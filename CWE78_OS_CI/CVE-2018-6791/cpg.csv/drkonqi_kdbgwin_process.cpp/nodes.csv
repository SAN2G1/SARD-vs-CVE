command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	268892	File	data/converged/CVE-2018-6791_plasma-workspace/drkonqi_kdbgwin_process.cpp								
ANR	268893	Function	Process :: Process	29:0:1195:1238							
ANR	268894	FunctionDef	Process :: Process ()		268893	0					
ANR	268895	CompoundStatement		31:0:1236:1238	268893	0					
ANR	268896	Identifier	Process :: Process		268893	1					
ANR	268897	ParameterList			268893	2					
ANR	268898	CFGEntryNode	ENTRY		268893		True				
ANR	268899	CFGExitNode	EXIT		268893		True				
ANR	268900	Function	Process :: EnableDebugPrivilege	36:0:1360:2903							
ANR	268901	FunctionDef	Process :: EnableDebugPrivilege ()		268900	0					
ANR	268902	CompoundStatement		37:0:1397:2903	268900	0					
ANR	268903	ExpressionStatement	"kDebug ( ) << ""Enabling debug privilege"""	38:4:1403:1441	268900	0	True				
ANR	268904	ShiftExpression	"kDebug ( ) << ""Enabling debug privilege"""		268900	0		<<			
ANR	268905	CallExpression	kDebug ( )		268900	0					
ANR	268906	Callee	kDebug		268900	0					
ANR	268907	Identifier	kDebug		268900	0					
ANR	268908	ArgumentList			268900	1					
ANR	268909	PrimaryExpression	"""Enabling debug privilege"""		268900	1					
ANR	268910	IdentifierDeclStatement	HANDLE hToken = NULL ;	39:4:1447:1467	268900	1	True				
ANR	268911	IdentifierDecl	hToken = NULL		268900	0					
ANR	268912	IdentifierDeclType	HANDLE		268900	0					
ANR	268913	Identifier	hToken		268900	1					
ANR	268914	AssignmentExpression	hToken = NULL		268900	2		=			
ANR	268915	Identifier	NULL		268900	0					
ANR	268916	Identifier	NULL		268900	1					
ANR	268917	IfStatement	"if ( ! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken ) )"		268900	2					
ANR	268918	Condition	"! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"	41:8:1478:1568	268900	0	True				
ANR	268919	UnaryOperationExpression	"! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"		268900	0					
ANR	268920	UnaryOperator	!		268900	0					
ANR	268921	CallExpression	"OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"		268900	1					
ANR	268922	Callee	OpenThreadToken		268900	0					
ANR	268923	Identifier	OpenThreadToken		268900	0					
ANR	268924	ArgumentList	GetCurrentThread ( )		268900	1					
ANR	268925	Argument	GetCurrentThread ( )		268900	0					
ANR	268926	CallExpression	GetCurrentThread ( )		268900	0					
ANR	268927	Callee	GetCurrentThread		268900	0					
ANR	268928	Identifier	GetCurrentThread		268900	0					
ANR	268929	ArgumentList			268900	1					
ANR	268930	Argument	TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY		268900	1					
ANR	268931	InclusiveOrExpression	TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY		268900	0		|			
ANR	268932	Identifier	TOKEN_ADJUST_PRIVILEGES		268900	0					
ANR	268933	Identifier	TOKEN_QUERY		268900	1					
ANR	268934	Argument	FALSE		268900	2					
ANR	268935	Identifier	FALSE		268900	0					
ANR	268936	Argument	& hToken		268900	3					
ANR	268937	UnaryOperationExpression	& hToken		268900	0					
ANR	268938	UnaryOperator	&		268900	0					
ANR	268939	Identifier	hToken		268900	1					
ANR	268940	CompoundStatement		6:4:177:177	268900	1					
ANR	268941	IfStatement	if ( GetLastError ( ) == ERROR_NO_TOKEN )		268900	0					
ANR	268942	Condition	GetLastError ( ) == ERROR_NO_TOKEN	43:12:1589:1620	268900	0	True				
ANR	268943	EqualityExpression	GetLastError ( ) == ERROR_NO_TOKEN		268900	0		==			
ANR	268944	CallExpression	GetLastError ( )		268900	0					
ANR	268945	Callee	GetLastError		268900	0					
ANR	268946	Identifier	GetLastError		268900	0					
ANR	268947	ArgumentList			268900	1					
ANR	268948	Identifier	ERROR_NO_TOKEN		268900	1					
ANR	268949	CompoundStatement		8:8:233:233	268900	1					
ANR	268950	IfStatement	if ( ! ImpersonateSelf ( SecurityImpersonation ) )		268900	0					
ANR	268951	Condition	! ImpersonateSelf ( SecurityImpersonation )	45:16:1649:1687	268900	0	True				
ANR	268952	UnaryOperationExpression	! ImpersonateSelf ( SecurityImpersonation )		268900	0					
ANR	268953	UnaryOperator	!		268900	0					
ANR	268954	CallExpression	ImpersonateSelf ( SecurityImpersonation )		268900	1					
ANR	268955	Callee	ImpersonateSelf		268900	0					
ANR	268956	Identifier	ImpersonateSelf		268900	0					
ANR	268957	ArgumentList	SecurityImpersonation		268900	1					
ANR	268958	Argument	SecurityImpersonation		268900	0					
ANR	268959	Identifier	SecurityImpersonation		268900	0					
ANR	268960	CompoundStatement		10:12:304:304	268900	1					
ANR	268961	ExpressionStatement	"kError ( ) << ""ImpersonateSelf() failed: "" << GetLastError ( )"	47:16:1720:1778	268900	0	True				
ANR	268962	ShiftExpression	"kError ( ) << ""ImpersonateSelf() failed: "" << GetLastError ( )"		268900	0		<<			
ANR	268963	CallExpression	kError ( )		268900	0					
ANR	268964	Callee	kError		268900	0					
ANR	268965	Identifier	kError		268900	0					
ANR	268966	ArgumentList			268900	1					
ANR	268967	ShiftExpression	"""ImpersonateSelf() failed: "" << GetLastError ( )"		268900	1		<<			
ANR	268968	PrimaryExpression	"""ImpersonateSelf() failed: """		268900	0					
ANR	268969	CallExpression	GetLastError ( )		268900	1					
ANR	268970	Callee	GetLastError		268900	0					
ANR	268971	Identifier	GetLastError		268900	0					
ANR	268972	ArgumentList			268900	1					
ANR	268973	ReturnStatement	return FALSE ;	48:16:1796:1808	268900	1	True				
ANR	268974	Identifier	FALSE		268900	0					
ANR	268975	IfStatement	"if ( ! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken ) )"		268900	1					
ANR	268976	Condition	"! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"	50:16:1840:1930	268900	0	True				
ANR	268977	UnaryOperationExpression	"! OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"		268900	0					
ANR	268978	UnaryOperator	!		268900	0					
ANR	268979	CallExpression	"OpenThreadToken ( GetCurrentThread ( ) , TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY , FALSE , & hToken )"		268900	1					
ANR	268980	Callee	OpenThreadToken		268900	0					
ANR	268981	Identifier	OpenThreadToken		268900	0					
ANR	268982	ArgumentList	GetCurrentThread ( )		268900	1					
ANR	268983	Argument	GetCurrentThread ( )		268900	0					
ANR	268984	CallExpression	GetCurrentThread ( )		268900	0					
ANR	268985	Callee	GetCurrentThread		268900	0					
ANR	268986	Identifier	GetCurrentThread		268900	0					
ANR	268987	ArgumentList			268900	1					
ANR	268988	Argument	TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY		268900	1					
ANR	268989	InclusiveOrExpression	TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY		268900	0		|			
ANR	268990	Identifier	TOKEN_ADJUST_PRIVILEGES		268900	0					
ANR	268991	Identifier	TOKEN_QUERY		268900	1					
ANR	268992	Argument	FALSE		268900	2					
ANR	268993	Identifier	FALSE		268900	0					
ANR	268994	Argument	& hToken		268900	3					
ANR	268995	UnaryOperationExpression	& hToken		268900	0					
ANR	268996	UnaryOperator	&		268900	0					
ANR	268997	Identifier	hToken		268900	1					
ANR	268998	CompoundStatement		15:12:547:547	268900	1					
ANR	268999	ExpressionStatement	"kError ( ) << ""OpenThreadToken() #2 failed: "" << GetLastError ( )"	52:16:1963:2024	268900	0	True				
ANR	269000	ShiftExpression	"kError ( ) << ""OpenThreadToken() #2 failed: "" << GetLastError ( )"		268900	0		<<			
ANR	269001	CallExpression	kError ( )		268900	0					
ANR	269002	Callee	kError		268900	0					
ANR	269003	Identifier	kError		268900	0					
ANR	269004	ArgumentList			268900	1					
ANR	269005	ShiftExpression	"""OpenThreadToken() #2 failed: "" << GetLastError ( )"		268900	1		<<			
ANR	269006	PrimaryExpression	"""OpenThreadToken() #2 failed: """		268900	0					
ANR	269007	CallExpression	GetLastError ( )		268900	1					
ANR	269008	Callee	GetLastError		268900	0					
ANR	269009	Identifier	GetLastError		268900	0					
ANR	269010	ArgumentList			268900	1					
ANR	269011	ReturnStatement	return FALSE ;	53:16:2042:2054	268900	1	True				
ANR	269012	Identifier	FALSE		268900	0					
ANR	269013	ElseStatement	else		268900	0					
ANR	269014	CompoundStatement		21:8:703:703	268900	0					
ANR	269015	ExpressionStatement	"kError ( ) << ""OpenThreadToken() #1 failed: "" << GetLastError ( )"	58:12:2115:2176	268900	0	True				
ANR	269016	ShiftExpression	"kError ( ) << ""OpenThreadToken() #1 failed: "" << GetLastError ( )"		268900	0		<<			
ANR	269017	CallExpression	kError ( )		268900	0					
ANR	269018	Callee	kError		268900	0					
ANR	269019	Identifier	kError		268900	0					
ANR	269020	ArgumentList			268900	1					
ANR	269021	ShiftExpression	"""OpenThreadToken() #1 failed: "" << GetLastError ( )"		268900	1		<<			
ANR	269022	PrimaryExpression	"""OpenThreadToken() #1 failed: """		268900	0					
ANR	269023	CallExpression	GetLastError ( )		268900	1					
ANR	269024	Callee	GetLastError		268900	0					
ANR	269025	Identifier	GetLastError		268900	0					
ANR	269026	ArgumentList			268900	1					
ANR	269027	ReturnStatement	return FALSE ;	59:12:2190:2202	268900	1	True				
ANR	269028	Identifier	FALSE		268900	0					
ANR	269029	IdentifierDeclStatement	LUID luid ;	63:4:2225:2234	268900	3	True				
ANR	269030	IdentifierDecl	luid		268900	0					
ANR	269031	IdentifierDeclType	LUID		268900	0					
ANR	269032	Identifier	luid		268900	1					
ANR	269033	IfStatement	"if ( ! LookupPrivilegeValue ( NULL , SE_DEBUG_NAME , & luid ) )"		268900	4					
ANR	269034	Condition	"! LookupPrivilegeValue ( NULL , SE_DEBUG_NAME , & luid )"	64:8:2244:2292	268900	0	True				
ANR	269035	UnaryOperationExpression	"! LookupPrivilegeValue ( NULL , SE_DEBUG_NAME , & luid )"		268900	0					
ANR	269036	UnaryOperator	!		268900	0					
ANR	269037	CallExpression	"LookupPrivilegeValue ( NULL , SE_DEBUG_NAME , & luid )"		268900	1					
ANR	269038	Callee	LookupPrivilegeValue		268900	0					
ANR	269039	Identifier	LookupPrivilegeValue		268900	0					
ANR	269040	ArgumentList	NULL		268900	1					
ANR	269041	Argument	NULL		268900	0					
ANR	269042	Identifier	NULL		268900	0					
ANR	269043	Argument	SE_DEBUG_NAME		268900	1					
ANR	269044	Identifier	SE_DEBUG_NAME		268900	0					
ANR	269045	Argument	& luid		268900	2					
ANR	269046	UnaryOperationExpression	& luid		268900	0					
ANR	269047	UnaryOperator	&		268900	0					
ANR	269048	Identifier	luid		268900	1					
ANR	269049	CompoundStatement		29:4:901:901	268900	1					
ANR	269050	ExpressionStatement	assert ( false )	66:8:2309:2322	268900	0	True				
ANR	269051	CallExpression	assert ( false )		268900	0					
ANR	269052	Callee	assert		268900	0					
ANR	269053	Identifier	assert		268900	0					
ANR	269054	ArgumentList	false		268900	1					
ANR	269055	Argument	false		268900	0					
ANR	269056	Identifier	false		268900	0					
ANR	269057	ExpressionStatement	"kError ( ) << ""Cannot lookup privilege: "" << GetLastError ( )"	67:8:2332:2389	268900	1	True				
ANR	269058	ShiftExpression	"kError ( ) << ""Cannot lookup privilege: "" << GetLastError ( )"		268900	0		<<			
ANR	269059	CallExpression	kError ( )		268900	0					
ANR	269060	Callee	kError		268900	0					
ANR	269061	Identifier	kError		268900	0					
ANR	269062	ArgumentList			268900	1					
ANR	269063	ShiftExpression	"""Cannot lookup privilege: "" << GetLastError ( )"		268900	1		<<			
ANR	269064	PrimaryExpression	"""Cannot lookup privilege: """		268900	0					
ANR	269065	CallExpression	GetLastError ( )		268900	1					
ANR	269066	Callee	GetLastError		268900	0					
ANR	269067	Identifier	GetLastError		268900	0					
ANR	269068	ArgumentList			268900	1					
ANR	269069	ExpressionStatement	SafeCloseHandle ( hToken )	68:8:2399:2422	268900	2	True				
ANR	269070	CallExpression	SafeCloseHandle ( hToken )		268900	0					
ANR	269071	Callee	SafeCloseHandle		268900	0					
ANR	269072	Identifier	SafeCloseHandle		268900	0					
ANR	269073	ArgumentList	hToken		268900	1					
ANR	269074	Argument	hToken		268900	0					
ANR	269075	Identifier	hToken		268900	0					
ANR	269076	ReturnStatement	return FALSE ;	69:8:2432:2444	268900	3	True				
ANR	269077	Identifier	FALSE		268900	0					
ANR	269078	IdentifierDeclStatement	TOKEN_PRIVILEGES tp ;	72:4:2457:2476	268900	5	True				
ANR	269079	IdentifierDecl	tp		268900	0					
ANR	269080	IdentifierDeclType	TOKEN_PRIVILEGES		268900	0					
ANR	269081	Identifier	tp		268900	1					
ANR	269082	ExpressionStatement	tp . PrivilegeCount = 1	73:4:2482:2503	268900	6	True				
ANR	269083	AssignmentExpression	tp . PrivilegeCount = 1		268900	0		=			
ANR	269084	MemberAccess	tp . PrivilegeCount		268900	0					
ANR	269085	Identifier	tp		268900	0					
ANR	269086	Identifier	PrivilegeCount		268900	1					
ANR	269087	PrimaryExpression	1		268900	1					
ANR	269088	ExpressionStatement	tp . Privileges [ 0 ] . Attributes = SE_PRIVILEGE_ENABLED	74:4:2509:2559	268900	7	True				
ANR	269089	AssignmentExpression	tp . Privileges [ 0 ] . Attributes = SE_PRIVILEGE_ENABLED		268900	0		=			
ANR	269090	MemberAccess	tp . Privileges [ 0 ] . Attributes		268900	0					
ANR	269091	ArrayIndexing	tp . Privileges [ 0 ]		268900	0					
ANR	269092	MemberAccess	tp . Privileges		268900	0					
ANR	269093	Identifier	tp		268900	0					
ANR	269094	Identifier	Privileges		268900	1					
ANR	269095	PrimaryExpression	0		268900	1					
ANR	269096	Identifier	Attributes		268900	1					
ANR	269097	Identifier	SE_PRIVILEGE_ENABLED		268900	1					
ANR	269098	ExpressionStatement	tp . Privileges [ 0 ] . Luid = luid	75:4:2565:2593	268900	8	True				
ANR	269099	AssignmentExpression	tp . Privileges [ 0 ] . Luid = luid		268900	0		=			
ANR	269100	MemberAccess	tp . Privileges [ 0 ] . Luid		268900	0					
ANR	269101	ArrayIndexing	tp . Privileges [ 0 ]		268900	0					
ANR	269102	MemberAccess	tp . Privileges		268900	0					
ANR	269103	Identifier	tp		268900	0					
ANR	269104	Identifier	Privileges		268900	1					
ANR	269105	PrimaryExpression	0		268900	1					
ANR	269106	Identifier	Luid		268900	1					
ANR	269107	Identifier	luid		268900	1					
ANR	269108	IfStatement	"if ( ! AdjustTokenPrivileges ( hToken , FALSE , & tp , NULL , ( PTOKEN_PRIVILEGES ) NULL , ( PDWORD ) NULL ) )"		268900	9					
ANR	269109	Condition	"! AdjustTokenPrivileges ( hToken , FALSE , & tp , NULL , ( PTOKEN_PRIVILEGES ) NULL , ( PDWORD ) NULL )"	77:8:2608:2696	268900	0	True				
ANR	269110	UnaryOperationExpression	"! AdjustTokenPrivileges ( hToken , FALSE , & tp , NULL , ( PTOKEN_PRIVILEGES ) NULL , ( PDWORD ) NULL )"		268900	0					
ANR	269111	UnaryOperator	!		268900	0					
ANR	269112	CallExpression	"AdjustTokenPrivileges ( hToken , FALSE , & tp , NULL , ( PTOKEN_PRIVILEGES ) NULL , ( PDWORD ) NULL )"		268900	1					
ANR	269113	Callee	AdjustTokenPrivileges		268900	0					
ANR	269114	Identifier	AdjustTokenPrivileges		268900	0					
ANR	269115	ArgumentList	hToken		268900	1					
ANR	269116	Argument	hToken		268900	0					
ANR	269117	Identifier	hToken		268900	0					
ANR	269118	Argument	FALSE		268900	1					
ANR	269119	Identifier	FALSE		268900	0					
ANR	269120	Argument	& tp		268900	2					
ANR	269121	UnaryOperationExpression	& tp		268900	0					
ANR	269122	UnaryOperator	&		268900	0					
ANR	269123	Identifier	tp		268900	1					
ANR	269124	Argument	NULL		268900	3					
ANR	269125	Identifier	NULL		268900	0					
ANR	269126	Argument	( PTOKEN_PRIVILEGES ) NULL		268900	4					
ANR	269127	CastExpression	( PTOKEN_PRIVILEGES ) NULL		268900	0					
ANR	269128	CastTarget	PTOKEN_PRIVILEGES		268900	0					
ANR	269129	Identifier	NULL		268900	1					
ANR	269130	Argument	( PDWORD ) NULL		268900	5					
ANR	269131	CastExpression	( PDWORD ) NULL		268900	0					
ANR	269132	CastTarget	PDWORD		268900	0					
ANR	269133	Identifier	NULL		268900	1					
ANR	269134	CompoundStatement		42:4:1305:1305	268900	1					
ANR	269135	ExpressionStatement	assert ( false )	79:8:2713:2726	268900	0	True				
ANR	269136	CallExpression	assert ( false )		268900	0					
ANR	269137	Callee	assert		268900	0					
ANR	269138	Identifier	assert		268900	0					
ANR	269139	ArgumentList	false		268900	1					
ANR	269140	Argument	false		268900	0					
ANR	269141	Identifier	false		268900	0					
ANR	269142	ExpressionStatement	"kError ( ) << ""Cannot adjust privilege: "" << GetLastError ( )"	80:8:2736:2793	268900	1	True				
ANR	269143	ShiftExpression	"kError ( ) << ""Cannot adjust privilege: "" << GetLastError ( )"		268900	0		<<			
ANR	269144	CallExpression	kError ( )		268900	0					
ANR	269145	Callee	kError		268900	0					
ANR	269146	Identifier	kError		268900	0					
ANR	269147	ArgumentList			268900	1					
ANR	269148	ShiftExpression	"""Cannot adjust privilege: "" << GetLastError ( )"		268900	1		<<			
ANR	269149	PrimaryExpression	"""Cannot adjust privilege: """		268900	0					
ANR	269150	CallExpression	GetLastError ( )		268900	1					
ANR	269151	Callee	GetLastError		268900	0					
ANR	269152	Identifier	GetLastError		268900	0					
ANR	269153	ArgumentList			268900	1					
ANR	269154	ExpressionStatement	SafeCloseHandle ( hToken )	81:8:2803:2826	268900	2	True				
ANR	269155	CallExpression	SafeCloseHandle ( hToken )		268900	0					
ANR	269156	Callee	SafeCloseHandle		268900	0					
ANR	269157	Identifier	SafeCloseHandle		268900	0					
ANR	269158	ArgumentList	hToken		268900	1					
ANR	269159	Argument	hToken		268900	0					
ANR	269160	Identifier	hToken		268900	0					
ANR	269161	ReturnStatement	return FALSE ;	82:8:2836:2848	268900	3	True				
ANR	269162	Identifier	FALSE		268900	0					
ANR	269163	ExpressionStatement	SafeCloseHandle ( hToken )	85:4:2861:2884	268900	10	True				
ANR	269164	CallExpression	SafeCloseHandle ( hToken )		268900	0					
ANR	269165	Callee	SafeCloseHandle		268900	0					
ANR	269166	Identifier	SafeCloseHandle		268900	0					
ANR	269167	ArgumentList	hToken		268900	1					
ANR	269168	Argument	hToken		268900	0					
ANR	269169	Identifier	hToken		268900	0					
ANR	269170	ReturnStatement	return TRUE ;	86:4:2890:2901	268900	11	True				
ANR	269171	Identifier	TRUE		268900	0					
ANR	269172	ReturnType	BOOL		268900	1					
ANR	269173	Identifier	Process :: EnableDebugPrivilege		268900	2					
ANR	269174	ParameterList			268900	3					
ANR	269175	CFGEntryNode	ENTRY		268900		True				
ANR	269176	CFGExitNode	EXIT		268900		True				
ANR	269177	Symbol	TOKEN_ADJUST_PRIVILEGES		268900						
ANR	269178	Symbol	LookupPrivilegeValue		268900						
ANR	269179	Symbol	* tp . Privileges		268900						
ANR	269180	Symbol	SE_DEBUG_NAME		268900						
ANR	269181	Symbol	TOKEN_QUERY		268900						
ANR	269182	Symbol	& luid		268900						
ANR	269183	Symbol	& hToken		268900						
ANR	269184	Symbol	ImpersonateSelf		268900						
ANR	269185	Symbol	tp . Privileges		268900						
ANR	269186	Symbol	luid		268900						
ANR	269187	Symbol	tp . Privileges [ 0 ] . Attributes		268900						
ANR	269188	Symbol	tp . PrivilegeCount		268900						
ANR	269189	Symbol	* tp		268900						
ANR	269190	Symbol	NULL		268900						
ANR	269191	Symbol	SE_PRIVILEGE_ENABLED		268900						
ANR	269192	Symbol	SecurityImpersonation		268900						
ANR	269193	Symbol	& tp		268900						
ANR	269194	Symbol	AdjustTokenPrivileges		268900						
ANR	269195	Symbol	GetCurrentThread		268900						
ANR	269196	Symbol	false		268900						
ANR	269197	Symbol	TRUE		268900						
ANR	269198	Symbol	tp . Privileges [ 0 ] . Luid		268900						
ANR	269199	Symbol	OpenThreadToken		268900						
ANR	269200	Symbol	GetLastError		268900						
ANR	269201	Symbol	hToken		268900						
ANR	269202	Symbol	FALSE		268900						
ANR	269203	Symbol	ERROR_NO_TOKEN		268900						
ANR	269204	Symbol	tp		268900						
ANR	269205	Function	Process :: GetInfo	89:0:2906:5958							
ANR	269206	FunctionDef	"Process :: GetInfo (const char * pid , const char * threadId)"		269205	0					
ANR	269207	CompoundStatement		90:0:2967:5958	269205	0					
ANR	269208	ExpressionStatement	"kDebug ( ) << ""Trying to get info about pid="" << pid"	91:4:2973:3023	269205	0	True				
ANR	269209	ShiftExpression	"kDebug ( ) << ""Trying to get info about pid="" << pid"		269205	0		<<			
ANR	269210	CallExpression	kDebug ( )		269205	0					
ANR	269211	Callee	kDebug		269205	0					
ANR	269212	Identifier	kDebug		269205	0					
ANR	269213	ArgumentList			269205	1					
ANR	269214	ShiftExpression	"""Trying to get info about pid="" << pid"		269205	1		<<			
ANR	269215	PrimaryExpression	"""Trying to get info about pid="""		269205	0					
ANR	269216	Identifier	pid		269205	1					
ANR	269217	IdentifierDeclStatement	DWORD dwPid = DWORD ( atoi ( pid ) ) ;	93:4:3030:3060	269205	1	True				
ANR	269218	IdentifierDecl	dwPid = DWORD ( atoi ( pid ) )		269205	0					
ANR	269219	IdentifierDeclType	DWORD		269205	0					
ANR	269220	Identifier	dwPid		269205	1					
ANR	269221	AssignmentExpression	dwPid = DWORD ( atoi ( pid ) )		269205	2		=			
ANR	269222	Identifier	dwPid		269205	0					
ANR	269223	CallExpression	DWORD ( atoi ( pid ) )		269205	1					
ANR	269224	Callee	DWORD		269205	0					
ANR	269225	Identifier	DWORD		269205	0					
ANR	269226	ArgumentList	atoi ( pid )		269205	1					
ANR	269227	Argument	atoi ( pid )		269205	0					
ANR	269228	CallExpression	atoi ( pid )		269205	0					
ANR	269229	Callee	atoi		269205	0					
ANR	269230	Identifier	atoi		269205	0					
ANR	269231	ArgumentList	pid		269205	1					
ANR	269232	Argument	pid		269205	0					
ANR	269233	Identifier	pid		269205	0					
ANR	269234	IdentifierDeclStatement	DWORD dwThread = DWORD ( atoi ( threadId ) ) ;	94:4:3066:3104	269205	2	True				
ANR	269235	IdentifierDecl	dwThread = DWORD ( atoi ( threadId ) )		269205	0					
ANR	269236	IdentifierDeclType	DWORD		269205	0					
ANR	269237	Identifier	dwThread		269205	1					
ANR	269238	AssignmentExpression	dwThread = DWORD ( atoi ( threadId ) )		269205	2		=			
ANR	269239	Identifier	dwThread		269205	0					
ANR	269240	CallExpression	DWORD ( atoi ( threadId ) )		269205	1					
ANR	269241	Callee	DWORD		269205	0					
ANR	269242	Identifier	DWORD		269205	0					
ANR	269243	ArgumentList	atoi ( threadId )		269205	1					
ANR	269244	Argument	atoi ( threadId )		269205	0					
ANR	269245	CallExpression	atoi ( threadId )		269205	0					
ANR	269246	Callee	atoi		269205	0					
ANR	269247	Identifier	atoi		269205	0					
ANR	269248	ArgumentList	threadId		269205	1					
ANR	269249	Argument	threadId		269205	0					
ANR	269250	Identifier	threadId		269205	0					
ANR	269251	IdentifierDeclStatement	HANDLE hProcess = NULL ;	97:4:3144:3166	269205	3	True				
ANR	269252	IdentifierDecl	hProcess = NULL		269205	0					
ANR	269253	IdentifierDeclType	HANDLE		269205	0					
ANR	269254	Identifier	hProcess		269205	1					
ANR	269255	AssignmentExpression	hProcess = NULL		269205	2		=			
ANR	269256	Identifier	NULL		269205	0					
ANR	269257	Identifier	NULL		269205	1					
ANR	269258	ExpressionStatement	"hProcess = OpenProcess ( PROCESS_ALL_ACCESS , FALSE , dwPid )"	98:4:3172:3228	269205	4	True				
ANR	269259	AssignmentExpression	"hProcess = OpenProcess ( PROCESS_ALL_ACCESS , FALSE , dwPid )"		269205	0		=			
ANR	269260	Identifier	hProcess		269205	0					
ANR	269261	CallExpression	"OpenProcess ( PROCESS_ALL_ACCESS , FALSE , dwPid )"		269205	1					
ANR	269262	Callee	OpenProcess		269205	0					
ANR	269263	Identifier	OpenProcess		269205	0					
ANR	269264	ArgumentList	PROCESS_ALL_ACCESS		269205	1					
ANR	269265	Argument	PROCESS_ALL_ACCESS		269205	0					
ANR	269266	Identifier	PROCESS_ALL_ACCESS		269205	0					
ANR	269267	Argument	FALSE		269205	1					
ANR	269268	Identifier	FALSE		269205	0					
ANR	269269	Argument	dwPid		269205	2					
ANR	269270	Identifier	dwPid		269205	0					
ANR	269271	ExpressionStatement	assert ( hProcess )	99:4:3234:3250	269205	5	True				
ANR	269272	CallExpression	assert ( hProcess )		269205	0					
ANR	269273	Callee	assert		269205	0					
ANR	269274	Identifier	assert		269205	0					
ANR	269275	ArgumentList	hProcess		269205	1					
ANR	269276	Argument	hProcess		269205	0					
ANR	269277	Identifier	hProcess		269205	0					
ANR	269278	IfStatement	if ( hProcess == NULL )		269205	6					
ANR	269279	Condition	hProcess == NULL	100:8:3260:3275	269205	0	True				
ANR	269280	EqualityExpression	hProcess == NULL		269205	0		==			
ANR	269281	Identifier	hProcess		269205	0					
ANR	269282	Identifier	NULL		269205	1					
ANR	269283	CompoundStatement		12:4:314:314	269205	1					
ANR	269284	ExpressionStatement	"kError ( ) << ""Cannot open process "" << dwPid << "": "" << GetLastError ( )"	102:8:3292:3361	269205	0	True				
ANR	269285	ShiftExpression	"kError ( ) << ""Cannot open process "" << dwPid << "": "" << GetLastError ( )"		269205	0		<<			
ANR	269286	CallExpression	kError ( )		269205	0					
ANR	269287	Callee	kError		269205	0					
ANR	269288	Identifier	kError		269205	0					
ANR	269289	ArgumentList			269205	1					
ANR	269290	ShiftExpression	"""Cannot open process "" << dwPid << "": "" << GetLastError ( )"		269205	1		<<			
ANR	269291	PrimaryExpression	"""Cannot open process """		269205	0					
ANR	269292	ShiftExpression	"dwPid << "": "" << GetLastError ( )"		269205	1		<<			
ANR	269293	Identifier	dwPid		269205	0					
ANR	269294	ShiftExpression	""": "" << GetLastError ( )"		269205	1		<<			
ANR	269295	PrimaryExpression	""": """		269205	0					
ANR	269296	CallExpression	GetLastError ( )		269205	1					
ANR	269297	Callee	GetLastError		269205	0					
ANR	269298	Identifier	GetLastError		269205	0					
ANR	269299	ArgumentList			269205	1					
ANR	269300	ReturnStatement	return m_bValid ;	103:8:3371:3386	269205	1	True				
ANR	269301	Identifier	m_bValid		269205	0					
ANR	269302	ExpressionStatement	m_dwPid = dwPid	105:4:3398:3413	269205	7	True				
ANR	269303	AssignmentExpression	m_dwPid = dwPid		269205	0		=			
ANR	269304	Identifier	m_dwPid		269205	0					
ANR	269305	Identifier	dwPid		269205	1					
ANR	269306	ExpressionStatement	m_hProcess = hProcess	106:4:3419:3440	269205	8	True				
ANR	269307	AssignmentExpression	m_hProcess = hProcess		269205	0		=			
ANR	269308	Identifier	m_hProcess		269205	0					
ANR	269309	Identifier	hProcess		269205	1					
ANR	269310	ExpressionStatement	m_dwThread = dwThread	107:4:3446:3467	269205	9	True				
ANR	269311	AssignmentExpression	m_dwThread = dwThread		269205	0		=			
ANR	269312	Identifier	m_dwThread		269205	0					
ANR	269313	Identifier	dwThread		269205	1					
ANR	269314	IdentifierDeclStatement	TCHAR procPath [ MAX_PATH * 2 + 1 ] = { 0 } ;	109:4:3474:3512	269205	10	True				
ANR	269315	IdentifierDecl	procPath [ MAX_PATH * 2 + 1 ] = { 0 }		269205	0					
ANR	269316	IdentifierDeclType	TCHAR [ MAX_PATH * 2 + 1 ]		269205	0					
ANR	269317	Identifier	procPath		269205	1					
ANR	269318	AdditiveExpression	MAX_PATH * 2 + 1		269205	2		+			
ANR	269319	MultiplicativeExpression	MAX_PATH * 2		269205	0		*			
ANR	269320	Identifier	MAX_PATH		269205	0					
ANR	269321	PrimaryExpression	2		269205	1					
ANR	269322	PrimaryExpression	1		269205	1					
ANR	269323	AssignmentExpression	procPath [ MAX_PATH * 2 + 1 ] = { 0 }		269205	3		=			
ANR	269324	Identifier	procPath		269205	0					
ANR	269325	InitializerList	0		269205	1					
ANR	269326	PrimaryExpression	0		269205	0					
ANR	269327	ExpressionStatement	"GetModuleFileNameEx ( hProcess , NULL , procPath , MAX_PATH * 2 + 1 )"	110:4:3518:3579	269205	11	True				
ANR	269328	CallExpression	"GetModuleFileNameEx ( hProcess , NULL , procPath , MAX_PATH * 2 + 1 )"		269205	0					
ANR	269329	Callee	GetModuleFileNameEx		269205	0					
ANR	269330	Identifier	GetModuleFileNameEx		269205	0					
ANR	269331	ArgumentList	hProcess		269205	1					
ANR	269332	Argument	hProcess		269205	0					
ANR	269333	Identifier	hProcess		269205	0					
ANR	269334	Argument	NULL		269205	1					
ANR	269335	Identifier	NULL		269205	0					
ANR	269336	Argument	procPath		269205	2					
ANR	269337	Identifier	procPath		269205	0					
ANR	269338	Argument	MAX_PATH * 2 + 1		269205	3					
ANR	269339	AdditiveExpression	MAX_PATH * 2 + 1		269205	0		+			
ANR	269340	MultiplicativeExpression	MAX_PATH * 2		269205	0		*			
ANR	269341	Identifier	MAX_PATH		269205	0					
ANR	269342	PrimaryExpression	2		269205	1					
ANR	269343	PrimaryExpression	1		269205	1					
ANR	269344	ExpressionStatement	m_path = QString :: fromWCharArray ( procPath )	111:4:3585:3627	269205	12	True				
ANR	269345	AssignmentExpression	m_path = QString :: fromWCharArray ( procPath )		269205	0		=			
ANR	269346	Identifier	m_path		269205	0					
ANR	269347	CallExpression	QString :: fromWCharArray ( procPath )		269205	1					
ANR	269348	Callee	QString :: fromWCharArray		269205	0					
ANR	269349	Identifier	QString :: fromWCharArray		269205	0					
ANR	269350	ArgumentList	procPath		269205	1					
ANR	269351	Argument	procPath		269205	0					
ANR	269352	Identifier	procPath		269205	0					
ANR	269353	IdentifierDeclStatement	"HANDLE hSnapshot = CreateToolhelp32Snapshot ( TH32CS_SNAPTHREAD , NULL ) ;"	115:4:3751:3819	269205	13	True				
ANR	269354	IdentifierDecl	"hSnapshot = CreateToolhelp32Snapshot ( TH32CS_SNAPTHREAD , NULL )"		269205	0					
ANR	269355	IdentifierDeclType	HANDLE		269205	0					
ANR	269356	Identifier	hSnapshot		269205	1					
ANR	269357	AssignmentExpression	"hSnapshot = CreateToolhelp32Snapshot ( TH32CS_SNAPTHREAD , NULL )"		269205	2		=			
ANR	269358	Identifier	hSnapshot		269205	0					
ANR	269359	CallExpression	"CreateToolhelp32Snapshot ( TH32CS_SNAPTHREAD , NULL )"		269205	1					
ANR	269360	Callee	CreateToolhelp32Snapshot		269205	0					
ANR	269361	Identifier	CreateToolhelp32Snapshot		269205	0					
ANR	269362	ArgumentList	TH32CS_SNAPTHREAD		269205	1					
ANR	269363	Argument	TH32CS_SNAPTHREAD		269205	0					
ANR	269364	Identifier	TH32CS_SNAPTHREAD		269205	0					
ANR	269365	Argument	NULL		269205	1					
ANR	269366	Identifier	NULL		269205	0					
ANR	269367	IfStatement	if ( hSnapshot == INVALID_HANDLE_VALUE )		269205	14					
ANR	269368	Condition	hSnapshot == INVALID_HANDLE_VALUE	116:8:3829:3861	269205	0	True				
ANR	269369	EqualityExpression	hSnapshot == INVALID_HANDLE_VALUE		269205	0		==			
ANR	269370	Identifier	hSnapshot		269205	0					
ANR	269371	Identifier	INVALID_HANDLE_VALUE		269205	1					
ANR	269372	CompoundStatement		28:4:900:900	269205	1					
ANR	269373	ExpressionStatement	"kError ( ) << ""CreateToolhelp32Snapshot() failed: "" << GetLastError ( )"	118:8:3878:3945	269205	0	True				
ANR	269374	ShiftExpression	"kError ( ) << ""CreateToolhelp32Snapshot() failed: "" << GetLastError ( )"		269205	0		<<			
ANR	269375	CallExpression	kError ( )		269205	0					
ANR	269376	Callee	kError		269205	0					
ANR	269377	Identifier	kError		269205	0					
ANR	269378	ArgumentList			269205	1					
ANR	269379	ShiftExpression	"""CreateToolhelp32Snapshot() failed: "" << GetLastError ( )"		269205	1		<<			
ANR	269380	PrimaryExpression	"""CreateToolhelp32Snapshot() failed: """		269205	0					
ANR	269381	CallExpression	GetLastError ( )		269205	1					
ANR	269382	Callee	GetLastError		269205	0					
ANR	269383	Identifier	GetLastError		269205	0					
ANR	269384	ArgumentList			269205	1					
ANR	269385	ExpressionStatement	assert ( false )	119:8:3955:3968	269205	1	True				
ANR	269386	CallExpression	assert ( false )		269205	0					
ANR	269387	Callee	assert		269205	0					
ANR	269388	Identifier	assert		269205	0					
ANR	269389	ArgumentList	false		269205	1					
ANR	269390	Argument	false		269205	0					
ANR	269391	Identifier	false		269205	0					
ANR	269392	ReturnStatement	return m_bValid ;	120:8:3978:3993	269205	2	True				
ANR	269393	Identifier	m_bValid		269205	0					
ANR	269394	IdentifierDeclStatement	THREADENTRY32 te ;	124:4:4033:4049	269205	15	True				
ANR	269395	IdentifierDecl	te		269205	0					
ANR	269396	IdentifierDeclType	THREADENTRY32		269205	0					
ANR	269397	Identifier	te		269205	1					
ANR	269398	ExpressionStatement	"ZeroMemory ( & te , sizeof ( te ) )"	125:4:4055:4082	269205	16	True				
ANR	269399	CallExpression	"ZeroMemory ( & te , sizeof ( te ) )"		269205	0					
ANR	269400	Callee	ZeroMemory		269205	0					
ANR	269401	Identifier	ZeroMemory		269205	0					
ANR	269402	ArgumentList	& te		269205	1					
ANR	269403	Argument	& te		269205	0					
ANR	269404	UnaryOperationExpression	& te		269205	0					
ANR	269405	UnaryOperator	&		269205	0					
ANR	269406	Identifier	te		269205	1					
ANR	269407	Argument	sizeof ( te )		269205	1					
ANR	269408	SizeofExpression	sizeof ( te )		269205	0					
ANR	269409	Sizeof	sizeof		269205	0					
ANR	269410	SizeofOperand	te		269205	1					
ANR	269411	ExpressionStatement	te . dwSize = sizeof ( te )	126:4:4088:4110	269205	17	True				
ANR	269412	AssignmentExpression	te . dwSize = sizeof ( te )		269205	0		=			
ANR	269413	MemberAccess	te . dwSize		269205	0					
ANR	269414	Identifier	te		269205	0					
ANR	269415	Identifier	dwSize		269205	1					
ANR	269416	SizeofExpression	sizeof ( te )		269205	1					
ANR	269417	Sizeof	sizeof		269205	0					
ANR	269418	SizeofOperand	te		269205	1					
ANR	269419	IfStatement	"if ( Thread32First ( hSnapshot , & te ) )"		269205	18					
ANR	269420	Condition	"Thread32First ( hSnapshot , & te )"	127:8:4120:4148	269205	0	True				
ANR	269421	CallExpression	"Thread32First ( hSnapshot , & te )"		269205	0					
ANR	269422	Callee	Thread32First		269205	0					
ANR	269423	Identifier	Thread32First		269205	0					
ANR	269424	ArgumentList	hSnapshot		269205	1					
ANR	269425	Argument	hSnapshot		269205	0					
ANR	269426	Identifier	hSnapshot		269205	0					
ANR	269427	Argument	& te		269205	1					
ANR	269428	UnaryOperationExpression	& te		269205	0					
ANR	269429	UnaryOperator	&		269205	0					
ANR	269430	Identifier	te		269205	1					
ANR	269431	CompoundStatement		39:4:1187:1187	269205	1					
ANR	269432	DoStatement	do		269205	0					
ANR	269433	CompoundStatement		41:8:1209:1209	269205	0					
ANR	269434	IfStatement	if ( te . th32OwnerProcessID == dwPid )		269205	0					
ANR	269435	Condition	te . th32OwnerProcessID == dwPid	131:16:4195:4224	269205	0	True				
ANR	269436	EqualityExpression	te . th32OwnerProcessID == dwPid		269205	0		==			
ANR	269437	MemberAccess	te . th32OwnerProcessID		269205	0					
ANR	269438	Identifier	te		269205	0					
ANR	269439	Identifier	th32OwnerProcessID		269205	1					
ANR	269440	Identifier	dwPid		269205	1					
ANR	269441	CompoundStatement		46:16:1392:1413	269205	1					
ANR	269442	ExpressionStatement	"kDebug ( ) << ""Found thread "" << te . th32ThreadID << "", adding to list"""	133:16:4257:4325	269205	0	True				
ANR	269443	ShiftExpression	"kDebug ( ) << ""Found thread "" << te . th32ThreadID << "", adding to list"""		269205	0		<<			
ANR	269444	CallExpression	kDebug ( )		269205	0					
ANR	269445	Callee	kDebug		269205	0					
ANR	269446	Identifier	kDebug		269205	0					
ANR	269447	ArgumentList			269205	1					
ANR	269448	ShiftExpression	"""Found thread "" << te . th32ThreadID << "", adding to list"""		269205	1		<<			
ANR	269449	PrimaryExpression	"""Found thread """		269205	0					
ANR	269450	ShiftExpression	"te . th32ThreadID << "", adding to list"""		269205	1		<<			
ANR	269451	MemberAccess	te . th32ThreadID		269205	0					
ANR	269452	Identifier	te		269205	0					
ANR	269453	Identifier	th32ThreadID		269205	1					
ANR	269454	PrimaryExpression	""", adding to list"""		269205	1					
ANR	269455	IdentifierDeclStatement	HANDLE hThread = NULL ;	135:16:4360:4381	269205	1	True				
ANR	269456	IdentifierDecl	hThread = NULL		269205	0					
ANR	269457	IdentifierDeclType	HANDLE		269205	0					
ANR	269458	Identifier	hThread		269205	1					
ANR	269459	AssignmentExpression	hThread = NULL		269205	2		=			
ANR	269460	Identifier	NULL		269205	0					
ANR	269461	Identifier	NULL		269205	1					
ANR	269462	ExpressionStatement	"hThread = OpenThread ( THREAD_ALL_ACCESS , FALSE , te . th32ThreadID )"	136:16:4399:4462	269205	2	True				
ANR	269463	AssignmentExpression	"hThread = OpenThread ( THREAD_ALL_ACCESS , FALSE , te . th32ThreadID )"		269205	0		=			
ANR	269464	Identifier	hThread		269205	0					
ANR	269465	CallExpression	"OpenThread ( THREAD_ALL_ACCESS , FALSE , te . th32ThreadID )"		269205	1					
ANR	269466	Callee	OpenThread		269205	0					
ANR	269467	Identifier	OpenThread		269205	0					
ANR	269468	ArgumentList	THREAD_ALL_ACCESS		269205	1					
ANR	269469	Argument	THREAD_ALL_ACCESS		269205	0					
ANR	269470	Identifier	THREAD_ALL_ACCESS		269205	0					
ANR	269471	Argument	FALSE		269205	1					
ANR	269472	Identifier	FALSE		269205	0					
ANR	269473	Argument	te . th32ThreadID		269205	2					
ANR	269474	MemberAccess	te . th32ThreadID		269205	0					
ANR	269475	Identifier	te		269205	0					
ANR	269476	Identifier	th32ThreadID		269205	1					
ANR	269477	ExpressionStatement	assert ( hThread )	137:16:4480:4495	269205	3	True				
ANR	269478	CallExpression	assert ( hThread )		269205	0					
ANR	269479	Callee	assert		269205	0					
ANR	269480	Identifier	assert		269205	0					
ANR	269481	ArgumentList	hThread		269205	1					
ANR	269482	Argument	hThread		269205	0					
ANR	269483	Identifier	hThread		269205	0					
ANR	269484	IfStatement	if ( hThread == NULL )		269205	4					
ANR	269485	Condition	hThread == NULL	138:20:4517:4531	269205	0	True				
ANR	269486	EqualityExpression	hThread == NULL		269205	0		==			
ANR	269487	Identifier	hThread		269205	0					
ANR	269488	Identifier	NULL		269205	1					
ANR	269489	CompoundStatement		50:16:1582:1582	269205	1					
ANR	269490	ExpressionStatement	"kError ( ) << ""Cannot open thread "" << te . th32ThreadID << "": "" << GetLastError ( )"	140:20:4572:4650	269205	0	True				
ANR	269491	ShiftExpression	"kError ( ) << ""Cannot open thread "" << te . th32ThreadID << "": "" << GetLastError ( )"		269205	0		<<			
ANR	269492	CallExpression	kError ( )		269205	0					
ANR	269493	Callee	kError		269205	0					
ANR	269494	Identifier	kError		269205	0					
ANR	269495	ArgumentList			269205	1					
ANR	269496	ShiftExpression	"""Cannot open thread "" << te . th32ThreadID << "": "" << GetLastError ( )"		269205	1		<<			
ANR	269497	PrimaryExpression	"""Cannot open thread """		269205	0					
ANR	269498	ShiftExpression	"te . th32ThreadID << "": "" << GetLastError ( )"		269205	1		<<			
ANR	269499	MemberAccess	te . th32ThreadID		269205	0					
ANR	269500	Identifier	te		269205	0					
ANR	269501	Identifier	th32ThreadID		269205	1					
ANR	269502	ShiftExpression	""": "" << GetLastError ( )"		269205	1		<<			
ANR	269503	PrimaryExpression	""": """		269205	0					
ANR	269504	CallExpression	GetLastError ( )		269205	1					
ANR	269505	Callee	GetLastError		269205	0					
ANR	269506	Identifier	GetLastError		269205	0					
ANR	269507	ArgumentList			269205	1					
ANR	269508	ContinueStatement	continue ;	141:20:4672:4680	269205	1	True				
ANR	269509	ExpressionStatement	m_threads [ te . th32ThreadID ] = hThread	144:16:4733:4769	269205	5	True				
ANR	269510	AssignmentExpression	m_threads [ te . th32ThreadID ] = hThread		269205	0		=			
ANR	269511	ArrayIndexing	m_threads [ te . th32ThreadID ]		269205	0					
ANR	269512	Identifier	m_threads		269205	0					
ANR	269513	MemberAccess	te . th32ThreadID		269205	1					
ANR	269514	Identifier	te		269205	0					
ANR	269515	Identifier	th32ThreadID		269205	1					
ANR	269516	Identifier	hThread		269205	1					
ANR	269517	ExpressionStatement	m_bValid = TRUE	146:16:4849:4864	269205	6	True				
ANR	269518	AssignmentExpression	m_bValid = TRUE		269205	0		=			
ANR	269519	Identifier	m_bValid		269205	0					
ANR	269520	Identifier	TRUE		269205	1					
ANR	269521	Condition	"Thread32Next ( hSnapshot , & te )"	149:15:4906:4933	269205	1	True				
ANR	269522	CallExpression	"Thread32Next ( hSnapshot , & te )"		269205	0					
ANR	269523	Callee	Thread32Next		269205	0					
ANR	269524	Identifier	Thread32Next		269205	0					
ANR	269525	ArgumentList	hSnapshot		269205	1					
ANR	269526	Argument	hSnapshot		269205	0					
ANR	269527	Identifier	hSnapshot		269205	0					
ANR	269528	Argument	& te		269205	1					
ANR	269529	UnaryOperationExpression	& te		269205	0					
ANR	269530	UnaryOperator	&		269205	0					
ANR	269531	Identifier	te		269205	1					
ANR	269532	ExpressionStatement	SafeCloseHandle ( hSnapshot )	151:4:4947:4973	269205	19	True				
ANR	269533	CallExpression	SafeCloseHandle ( hSnapshot )		269205	0					
ANR	269534	Callee	SafeCloseHandle		269205	0					
ANR	269535	Identifier	SafeCloseHandle		269205	0					
ANR	269536	ArgumentList	hSnapshot		269205	1					
ANR	269537	Argument	hSnapshot		269205	0					
ANR	269538	Identifier	hSnapshot		269205	0					
ANR	269539	ExpressionStatement	assert ( m_threads . size ( ) > 0 )	153:4:4980:5008	269205	20	True				
ANR	269540	CallExpression	assert ( m_threads . size ( ) > 0 )		269205	0					
ANR	269541	Callee	assert		269205	0					
ANR	269542	Identifier	assert		269205	0					
ANR	269543	ArgumentList	m_threads . size ( ) > 0		269205	1					
ANR	269544	Argument	m_threads . size ( ) > 0		269205	0					
ANR	269545	RelationalExpression	m_threads . size ( ) > 0		269205	0		>			
ANR	269546	CallExpression	m_threads . size ( )		269205	0					
ANR	269547	Callee	m_threads . size		269205	0					
ANR	269548	MemberAccess	m_threads . size		269205	0					
ANR	269549	Identifier	m_threads		269205	0					
ANR	269550	Identifier	size		269205	1					
ANR	269551	ArgumentList			269205	1					
ANR	269552	PrimaryExpression	0		269205	1					
ANR	269553	IdentifierDeclStatement	HMODULE hMods [ 1024 ] ;	156:4:5042:5061	269205	21	True				
ANR	269554	IdentifierDecl	hMods [ 1024 ]		269205	0					
ANR	269555	IdentifierDeclType	HMODULE [ 1024 ]		269205	0					
ANR	269556	Identifier	hMods		269205	1					
ANR	269557	PrimaryExpression	1024		269205	2					
ANR	269558	IdentifierDeclStatement	DWORD cbNeeded = 0 ;	157:4:5067:5085	269205	22	True				
ANR	269559	IdentifierDecl	cbNeeded = 0		269205	0					
ANR	269560	IdentifierDeclType	DWORD		269205	0					
ANR	269561	Identifier	cbNeeded		269205	1					
ANR	269562	AssignmentExpression	cbNeeded = 0		269205	2		=			
ANR	269563	Identifier	cbNeeded		269205	0					
ANR	269564	PrimaryExpression	0		269205	1					
ANR	269565	IfStatement	"if ( ! EnumProcessModules ( hProcess , hMods , ArrayCount ( hMods ) , & cbNeeded ) )"		269205	23					
ANR	269566	Condition	"! EnumProcessModules ( hProcess , hMods , ArrayCount ( hMods ) , & cbNeeded )"	158:8:5095:5160	269205	0	True				
ANR	269567	UnaryOperationExpression	"! EnumProcessModules ( hProcess , hMods , ArrayCount ( hMods ) , & cbNeeded )"		269205	0					
ANR	269568	UnaryOperator	!		269205	0					
ANR	269569	CallExpression	"EnumProcessModules ( hProcess , hMods , ArrayCount ( hMods ) , & cbNeeded )"		269205	1					
ANR	269570	Callee	EnumProcessModules		269205	0					
ANR	269571	Identifier	EnumProcessModules		269205	0					
ANR	269572	ArgumentList	hProcess		269205	1					
ANR	269573	Argument	hProcess		269205	0					
ANR	269574	Identifier	hProcess		269205	0					
ANR	269575	Argument	hMods		269205	1					
ANR	269576	Identifier	hMods		269205	0					
ANR	269577	Argument	ArrayCount ( hMods )		269205	2					
ANR	269578	CallExpression	ArrayCount ( hMods )		269205	0					
ANR	269579	Callee	ArrayCount		269205	0					
ANR	269580	Identifier	ArrayCount		269205	0					
ANR	269581	ArgumentList	hMods		269205	1					
ANR	269582	Argument	hMods		269205	0					
ANR	269583	Identifier	hMods		269205	0					
ANR	269584	Argument	& cbNeeded		269205	3					
ANR	269585	UnaryOperationExpression	& cbNeeded		269205	0					
ANR	269586	UnaryOperator	&		269205	0					
ANR	269587	Identifier	cbNeeded		269205	1					
ANR	269588	CompoundStatement		70:4:2199:2199	269205	1					
ANR	269589	ExpressionStatement	"kError ( ) << ""Cannot enumerate modules: "" << GetLastError ( )"	160:8:5177:5235	269205	0	True				
ANR	269590	ShiftExpression	"kError ( ) << ""Cannot enumerate modules: "" << GetLastError ( )"		269205	0		<<			
ANR	269591	CallExpression	kError ( )		269205	0					
ANR	269592	Callee	kError		269205	0					
ANR	269593	Identifier	kError		269205	0					
ANR	269594	ArgumentList			269205	1					
ANR	269595	ShiftExpression	"""Cannot enumerate modules: "" << GetLastError ( )"		269205	1		<<			
ANR	269596	PrimaryExpression	"""Cannot enumerate modules: """		269205	0					
ANR	269597	CallExpression	GetLastError ( )		269205	1					
ANR	269598	Callee	GetLastError		269205	0					
ANR	269599	Identifier	GetLastError		269205	0					
ANR	269600	ArgumentList			269205	1					
ANR	269601	ReturnStatement	return m_bValid ;	161:8:5245:5260	269205	1	True				
ANR	269602	Identifier	m_bValid		269205	0					
ANR	269603	ForStatement	for ( size_t i = 0 ; i < ( cbNeeded / sizeof ( hMods [ 0 ] ) ) ; i ++ )		269205	24					
ANR	269604	ForInit	size_t i = 0 ;	163:9:5277:5289	269205	0	True				
ANR	269605	IdentifierDeclStatement	size_t i = 0 ;		269205	0					
ANR	269606	IdentifierDecl	i = 0		269205	0					
ANR	269607	IdentifierDeclType	size_t		269205	0					
ANR	269608	Identifier	i		269205	1					
ANR	269609	AssignmentExpression	i = 0		269205	2		=			
ANR	269610	Identifier	i		269205	0					
ANR	269611	PrimaryExpression	0		269205	1					
ANR	269612	Condition	i < ( cbNeeded / sizeof ( hMods [ 0 ] ) )	163:23:5291:5323	269205	1	True				
ANR	269613	RelationalExpression	i < ( cbNeeded / sizeof ( hMods [ 0 ] ) )		269205	0		<			
ANR	269614	Identifier	i		269205	0					
ANR	269615	MultiplicativeExpression	cbNeeded / sizeof ( hMods [ 0 ] )		269205	1		/			
ANR	269616	Identifier	cbNeeded		269205	0					
ANR	269617	SizeofExpression	sizeof ( hMods [ 0 ] )		269205	1					
ANR	269618	Sizeof	sizeof		269205	0					
ANR	269619	ArrayIndexing	hMods [ 0 ]		269205	1					
ANR	269620	Identifier	hMods		269205	0					
ANR	269621	PrimaryExpression	0		269205	1					
ANR	269622	PostIncDecOperationExpression	i ++	163:58:5326:5328	269205	2	True				
ANR	269623	Identifier	i		269205	0					
ANR	269624	IncDec	++		269205	1					
ANR	269625	CompoundStatement		81:8:2592:2618	269205	3					
ANR	269626	IdentifierDeclStatement	ushort szModName [ MAX_PATH ] ;	170:8:5560:5586	269205	0	True				
ANR	269627	IdentifierDecl	szModName [ MAX_PATH ]		269205	0					
ANR	269628	IdentifierDeclType	ushort [ MAX_PATH ]		269205	0					
ANR	269629	Identifier	szModName		269205	1					
ANR	269630	Identifier	MAX_PATH		269205	2					
ANR	269631	IfStatement	"if ( GetModuleFileNameEx ( hProcess , hMods [ i ] , ( LPTSTR ) szModName , MAX_PATH ) )"		269205	1					
ANR	269632	Condition	"GetModuleFileNameEx ( hProcess , hMods [ i ] , ( LPTSTR ) szModName , MAX_PATH )"	171:12:5600:5668	269205	0	True				
ANR	269633	CallExpression	"GetModuleFileNameEx ( hProcess , hMods [ i ] , ( LPTSTR ) szModName , MAX_PATH )"		269205	0					
ANR	269634	Callee	GetModuleFileNameEx		269205	0					
ANR	269635	Identifier	GetModuleFileNameEx		269205	0					
ANR	269636	ArgumentList	hProcess		269205	1					
ANR	269637	Argument	hProcess		269205	0					
ANR	269638	Identifier	hProcess		269205	0					
ANR	269639	Argument	hMods [ i ]		269205	1					
ANR	269640	ArrayIndexing	hMods [ i ]		269205	0					
ANR	269641	Identifier	hMods		269205	0					
ANR	269642	Identifier	i		269205	1					
ANR	269643	Argument	( LPTSTR ) szModName		269205	2					
ANR	269644	CastExpression	( LPTSTR ) szModName		269205	0					
ANR	269645	CastTarget	LPTSTR		269205	0					
ANR	269646	Identifier	szModName		269205	1					
ANR	269647	Argument	MAX_PATH		269205	3					
ANR	269648	Identifier	MAX_PATH		269205	0					
ANR	269649	CompoundStatement		83:8:2711:2711	269205	1					
ANR	269650	ExpressionStatement	m_modules [ QString :: fromUtf16 ( szModName ) ] = hMods [ i ]	176:12:5867:5918	269205	0	True				
ANR	269651	AssignmentExpression	m_modules [ QString :: fromUtf16 ( szModName ) ] = hMods [ i ]		269205	0		=			
ANR	269652	ArrayIndexing	m_modules [ QString :: fromUtf16 ( szModName ) ]		269205	0					
ANR	269653	Identifier	m_modules		269205	0					
ANR	269654	CallExpression	QString :: fromUtf16 ( szModName )		269205	1					
ANR	269655	Callee	QString :: fromUtf16		269205	0					
ANR	269656	Identifier	QString :: fromUtf16		269205	0					
ANR	269657	ArgumentList	szModName		269205	1					
ANR	269658	Argument	szModName		269205	0					
ANR	269659	Identifier	szModName		269205	0					
ANR	269660	ArrayIndexing	hMods [ i ]		269205	1					
ANR	269661	Identifier	hMods		269205	0					
ANR	269662	Identifier	i		269205	1					
ANR	269663	ReturnStatement	return m_bValid ;	180:4:5941:5956	269205	25	True				
ANR	269664	Identifier	m_bValid		269205	0					
ANR	269665	ReturnType	BOOL		269205	1					
ANR	269666	Identifier	Process :: GetInfo		269205	2					
ANR	269667	ParameterList	"const char * pid , const char * threadId"		269205	3					
ANR	269668	Parameter	const char * pid	89:22:2928:2942	269205	0	True				
ANR	269669	ParameterType	const char *		269205	0					
ANR	269670	Identifier	pid		269205	1					
ANR	269671	Parameter	const char * threadId	89:39:2945:2964	269205	1	True				
ANR	269672	ParameterType	const char *		269205	0					
ANR	269673	Identifier	threadId		269205	1					
ANR	269674	CFGEntryNode	ENTRY		269205		True				
ANR	269675	CFGExitNode	EXIT		269205		True				
ANR	269676	Symbol	GetModuleFileNameEx		269205						
ANR	269677	Symbol	Thread32Next		269205						
ANR	269678	Symbol	pid		269205						
ANR	269679	Symbol	te . dwSize		269205						
ANR	269680	Symbol	* QString :: fromUtf16		269205						
ANR	269681	Symbol	threadId		269205						
ANR	269682	Symbol	m_threads . size		269205						
ANR	269683	Symbol	m_hProcess		269205						
ANR	269684	Symbol	procPath		269205						
ANR	269685	Symbol	THREAD_ALL_ACCESS		269205						
ANR	269686	Symbol	* te . th32ThreadID		269205						
ANR	269687	Symbol	te . th32OwnerProcessID		269205						
ANR	269688	Symbol	szModName		269205						
ANR	269689	Symbol	te . th32ThreadID		269205						
ANR	269690	Symbol	OpenProcess		269205						
ANR	269691	Symbol	CreateToolhelp32Snapshot		269205						
ANR	269692	Symbol	NULL		269205						
ANR	269693	Symbol	m_threads		269205						
ANR	269694	Symbol	DWORD		269205						
ANR	269695	Symbol	TRUE		269205						
ANR	269696	Symbol	& cbNeeded		269205						
ANR	269697	Symbol	QString :: fromUtf16		269205						
ANR	269698	Symbol	OpenThread		269205						
ANR	269699	Symbol	* m_modules		269205						
ANR	269700	Symbol	* te		269205						
ANR	269701	Symbol	m_bValid		269205						
ANR	269702	Symbol	& te		269205						
ANR	269703	Symbol	dwThread		269205						
ANR	269704	Symbol	Thread32First		269205						
ANR	269705	Symbol	dwPid		269205						
ANR	269706	Symbol	* m_threads		269205						
ANR	269707	Symbol	ArrayCount		269205						
ANR	269708	Symbol	hProcess		269205						
ANR	269709	Symbol	m_path		269205						
ANR	269710	Symbol	TH32CS_SNAPTHREAD		269205						
ANR	269711	Symbol	hThread		269205						
ANR	269712	Symbol	EnumProcessModules		269205						
ANR	269713	Symbol	atoi		269205						
ANR	269714	Symbol	QString :: fromWCharArray		269205						
ANR	269715	Symbol	m_dwThread		269205						
ANR	269716	Symbol	hMods		269205						
ANR	269717	Symbol	false		269205						
ANR	269718	Symbol	i		269205						
ANR	269719	Symbol	m_modules		269205						
ANR	269720	Symbol	INVALID_HANDLE_VALUE		269205						
ANR	269721	Symbol	hSnapshot		269205						
ANR	269722	Symbol	te		269205						
ANR	269723	Symbol	* i		269205						
ANR	269724	Symbol	PROCESS_ALL_ACCESS		269205						
ANR	269725	Symbol	FALSE		269205						
ANR	269726	Symbol	m_dwPid		269205						
ANR	269727	Symbol	MAX_PATH		269205						
ANR	269728	Symbol	cbNeeded		269205						
ANR	269729	Symbol	* hMods		269205						
