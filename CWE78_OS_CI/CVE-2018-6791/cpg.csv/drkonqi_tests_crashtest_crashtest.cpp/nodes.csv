command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	280370	File	data/converged/CVE-2018-6791_plasma-workspace/drkonqi_tests_crashtest_crashtest.cpp								
ANR	280371	ClassDef	CrashType	39:0:1753:1816							
ANR	280372	ClassDef	SomeStruct	41:0:1820:1883							
ANR	280373	Function	foo	43:4:1844:1868							
ANR	280374	FunctionDef	foo ()		280373	0					
ANR	280375	CompoundStatement		43:14:1854:1868	280373	0					
ANR	280376	ReturnStatement	return ret ;	43:1:1856:1866	280373	0	True				
ANR	280377	Identifier	ret		280373	0					
ANR	280378	ReturnType	int		280373	1					
ANR	280379	Identifier	foo		280373	2					
ANR	280380	ParameterList			280373	3					
ANR	280381	CFGEntryNode	ENTRY		280373		True				
ANR	280382	CFGExitNode	EXIT		280373		True				
ANR	280383	Symbol	ret		280373						
ANR	280384	DeclStmt									
ANR	280385	Decl							int	int	ret
ANR	280386	Function	do_crash	47:0:1887:1984							
ANR	280387	FunctionDef	do_crash ()		280386	0					
ANR	280388	CompoundStatement		48:0:1903:1984	280386	0					
ANR	280389	IdentifierDeclStatement	SomeStruct * obj = 0 ;	49:2:1907:1926	280386	0	True				
ANR	280390	IdentifierDecl	* obj = 0		280386	0					
ANR	280391	IdentifierDeclType	SomeStruct *		280386	0					
ANR	280392	Identifier	obj		280386	1					
ANR	280393	AssignmentExpression	* obj = 0		280386	2		=			
ANR	280394	Identifier	obj		280386	0					
ANR	280395	PrimaryExpression	0		280386	1					
ANR	280396	IdentifierDeclStatement	int ret = obj -> foo ( ) ;	50:2:1930:1950	280386	1	True				
ANR	280397	IdentifierDecl	ret = obj -> foo ( )		280386	0					
ANR	280398	IdentifierDeclType	int		280386	0					
ANR	280399	Identifier	ret		280386	1					
ANR	280400	AssignmentExpression	ret = obj -> foo ( )		280386	2		=			
ANR	280401	Identifier	ret		280386	0					
ANR	280402	CallExpression	obj -> foo ( )		280386	1					
ANR	280403	Callee	obj -> foo		280386	0					
ANR	280404	PtrMemberAccess	obj -> foo		280386	0					
ANR	280405	Identifier	obj		280386	0					
ANR	280406	Identifier	foo		280386	1					
ANR	280407	ArgumentList			280386	1					
ANR	280408	ExpressionStatement	"printf ( ""result = %d\\n"" , ret )"	51:2:1954:1982	280386	2	True				
ANR	280409	CallExpression	"printf ( ""result = %d\\n"" , ret )"		280386	0					
ANR	280410	Callee	printf		280386	0					
ANR	280411	Identifier	printf		280386	0					
ANR	280412	ArgumentList	"""result = %d\\n"""		280386	1					
ANR	280413	Argument	"""result = %d\\n"""		280386	0					
ANR	280414	PrimaryExpression	"""result = %d\\n"""		280386	0					
ANR	280415	Argument	ret		280386	1					
ANR	280416	Identifier	ret		280386	0					
ANR	280417	ReturnType	void		280386	1					
ANR	280418	Identifier	do_crash		280386	2					
ANR	280419	ParameterList			280386	3					
ANR	280420	CFGEntryNode	ENTRY		280386		True				
ANR	280421	CFGExitNode	EXIT		280386		True				
ANR	280422	Symbol	ret		280386						
ANR	280423	Symbol	* obj		280386						
ANR	280424	Symbol	obj -> foo		280386						
ANR	280425	Symbol	obj		280386						
ANR	280426	Function	do_malloc	54:0:1987:2030							
ANR	280427	FunctionDef	do_malloc ()		280426	0					
ANR	280428	CompoundStatement		55:0:2004:2030	280426	0					
ANR	280429	Statement	delete	56:2:2008:2013	280426	0	True				
ANR	280430	ExpressionStatement	( char * ) 0xdead	56:9:2015:2028	280426	1	True				
ANR	280431	CastExpression	( char * ) 0xdead		280426	0					
ANR	280432	CastTarget	char *		280426	0					
ANR	280433	PrimaryExpression	0xdead		280426	1					
ANR	280434	ReturnType	void		280426	1					
ANR	280435	Identifier	do_malloc		280426	2					
ANR	280436	ParameterList			280426	3					
ANR	280437	CFGEntryNode	ENTRY		280426		True				
ANR	280438	CFGExitNode	EXIT		280426		True				
ANR	280439	Function	do_div0	59:0:2033:2161							
ANR	280440	FunctionDef	do_div0 ()		280439	0					
ANR	280441	CompoundStatement		60:0:2048:2161	280439	0					
ANR	280442	IdentifierDeclStatement	volatile int a = 99 ;	61:2:2052:2071	280439	0	True				
ANR	280443	IdentifierDecl	a = 99		280439	0					
ANR	280444	IdentifierDeclType	volatile int		280439	0					
ANR	280445	Identifier	a		280439	1					
ANR	280446	AssignmentExpression	a = 99		280439	2		=			
ANR	280447	Identifier	a		280439	0					
ANR	280448	PrimaryExpression	99		280439	1					
ANR	280449	IdentifierDeclStatement	volatile int b = 10 ;	62:2:2075:2094	280439	1	True				
ANR	280450	IdentifierDecl	b = 10		280439	0					
ANR	280451	IdentifierDeclType	volatile int		280439	0					
ANR	280452	Identifier	b		280439	1					
ANR	280453	AssignmentExpression	b = 10		280439	2		=			
ANR	280454	Identifier	b		280439	0					
ANR	280455	PrimaryExpression	10		280439	1					
ANR	280456	IdentifierDeclStatement	volatile int c = a / ( b - 10 ) ;	63:2:2098:2129	280439	2	True				
ANR	280457	IdentifierDecl	c = a / ( b - 10 )		280439	0					
ANR	280458	IdentifierDeclType	volatile int		280439	0					
ANR	280459	Identifier	c		280439	1					
ANR	280460	AssignmentExpression	c = a / ( b - 10 )		280439	2		=			
ANR	280461	Identifier	c		280439	0					
ANR	280462	MultiplicativeExpression	a / ( b - 10 )		280439	1		/			
ANR	280463	Identifier	a		280439	0					
ANR	280464	AdditiveExpression	b - 10		280439	1		-			
ANR	280465	Identifier	b		280439	0					
ANR	280466	PrimaryExpression	10		280439	1					
ANR	280467	ExpressionStatement	"printf ( ""result = %d\\n"" , c )"	64:2:2133:2159	280439	3	True				
ANR	280468	CallExpression	"printf ( ""result = %d\\n"" , c )"		280439	0					
ANR	280469	Callee	printf		280439	0					
ANR	280470	Identifier	printf		280439	0					
ANR	280471	ArgumentList	"""result = %d\\n"""		280439	1					
ANR	280472	Argument	"""result = %d\\n"""		280439	0					
ANR	280473	PrimaryExpression	"""result = %d\\n"""		280439	0					
ANR	280474	Argument	c		280439	1					
ANR	280475	Identifier	c		280439	0					
ANR	280476	ReturnType	void		280439	1					
ANR	280477	Identifier	do_div0		280439	2					
ANR	280478	ParameterList			280439	3					
ANR	280479	CFGEntryNode	ENTRY		280439		True				
ANR	280480	CFGExitNode	EXIT		280439		True				
ANR	280481	Symbol	a		280439						
ANR	280482	Symbol	b		280439						
ANR	280483	Symbol	c		280439						
ANR	280484	Function	do_assert	67:0:2164:2200							
ANR	280485	FunctionDef	do_assert ()		280484	0					
ANR	280486	CompoundStatement		68:0:2181:2200	280484	0					
ANR	280487	ExpressionStatement	assert ( false )	69:2:2185:2198	280484	0	True				
ANR	280488	CallExpression	assert ( false )		280484	0					
ANR	280489	Callee	assert		280484	0					
ANR	280490	Identifier	assert		280484	0					
ANR	280491	ArgumentList	false		280484	1					
ANR	280492	Argument	false		280484	0					
ANR	280493	Identifier	false		280484	0					
ANR	280494	ReturnType	void		280484	1					
ANR	280495	Identifier	do_assert		280484	2					
ANR	280496	ParameterList			280484	3					
ANR	280497	CFGEntryNode	ENTRY		280484		True				
ANR	280498	CFGExitNode	EXIT		280484		True				
ANR	280499	Symbol	false		280484						
ANR	280500	Function	do_qassert	72:0:2203:2242							
ANR	280501	FunctionDef	do_qassert ()		280500	0					
ANR	280502	CompoundStatement		73:0:2221:2242	280500	0					
ANR	280503	ExpressionStatement	Q_ASSERT ( false )	74:2:2225:2240	280500	0	True				
ANR	280504	CallExpression	Q_ASSERT ( false )		280500	0					
ANR	280505	Callee	Q_ASSERT		280500	0					
ANR	280506	Identifier	Q_ASSERT		280500	0					
ANR	280507	ArgumentList	false		280500	1					
ANR	280508	Argument	false		280500	0					
ANR	280509	Identifier	false		280500	0					
ANR	280510	ReturnType	void		280500	1					
ANR	280511	Identifier	do_qassert		280500	2					
ANR	280512	ParameterList			280500	3					
ANR	280513	CFGEntryNode	ENTRY		280500		True				
ANR	280514	CFGExitNode	EXIT		280500		True				
ANR	280515	Symbol	false		280500						
ANR	280516	Function	map_function	77:0:2245:2348							
ANR	280517	FunctionDef	map_function (const QString & s)		280516	0					
ANR	280518	CompoundStatement		78:0:2282:2348	280516	0					
ANR	280519	WhileStatement	"while ( s != QLatin1String ( ""thread 4"" ) )"		280516	0					
ANR	280520	Condition	"s != QLatin1String ( ""thread 4"" )"	79:12:2296:2325	280516	0	True				
ANR	280521	EqualityExpression	"s != QLatin1String ( ""thread 4"" )"		280516	0		!=			
ANR	280522	Identifier	s		280516	0					
ANR	280523	CallExpression	"QLatin1String ( ""thread 4"" )"		280516	1					
ANR	280524	Callee	QLatin1String		280516	0					
ANR	280525	Identifier	QLatin1String		280516	0					
ANR	280526	ArgumentList	"""thread 4"""		280516	1					
ANR	280527	Argument	"""thread 4"""		280516	0					
ANR	280528	PrimaryExpression	"""thread 4"""		280516	0					
ANR	280529	CompoundStatement		2:45:46:46	280516	1					
ANR	280530	ExpressionStatement	do_crash ( )	80:4:2336:2346	280516	1	True				
ANR	280531	CallExpression	do_crash ( )		280516	0					
ANR	280532	Callee	do_crash		280516	0					
ANR	280533	Identifier	do_crash		280516	0					
ANR	280534	ArgumentList			280516	1					
ANR	280535	ReturnType	void		280516	1					
ANR	280536	Identifier	map_function		280516	2					
ANR	280537	ParameterList	const QString & s		280516	3					
ANR	280538	Parameter	const QString & s	77:18:2263:2279	280516	0	True				
ANR	280539	ParameterType	const QString &		280516	0					
ANR	280540	Identifier	s		280516	1					
ANR	280541	CFGEntryNode	ENTRY		280516		True				
ANR	280542	CFGExitNode	EXIT		280516		True				
ANR	280543	Symbol	QLatin1String		280516						
ANR	280544	Symbol	s		280516						
ANR	280545	Function	do_threads	83:0:2351:2658							
ANR	280546	FunctionDef	do_threads ()		280545	0					
ANR	280547	CompoundStatement		84:0:2369:2658	280545	0					
ANR	280548	IdentifierDeclStatement	QStringList foo ;	85:4:2375:2390	280545	0	True				
ANR	280549	IdentifierDecl	foo		280545	0					
ANR	280550	IdentifierDeclType	QStringList		280545	0					
ANR	280551	Identifier	foo		280545	1					
ANR	280552	ExpressionStatement	"foo << QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"	86:4:2396:2549	280545	1	True				
ANR	280553	ShiftExpression	"foo << QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		280545	0		<<			
ANR	280554	Identifier	foo		280545	0					
ANR	280555	ShiftExpression	"QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		280545	1		<<			
ANR	280556	CallExpression	"QStringLiteral ( ""thread 1"" )"		280545	0					
ANR	280557	Callee	QStringLiteral		280545	0					
ANR	280558	Identifier	QStringLiteral		280545	0					
ANR	280559	ArgumentList	"""thread 1"""		280545	1					
ANR	280560	Argument	"""thread 1"""		280545	0					
ANR	280561	PrimaryExpression	"""thread 1"""		280545	0					
ANR	280562	ShiftExpression	"QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		280545	1		<<			
ANR	280563	CallExpression	"QStringLiteral ( ""thread 2"" )"		280545	0					
ANR	280564	Callee	QStringLiteral		280545	0					
ANR	280565	Identifier	QStringLiteral		280545	0					
ANR	280566	ArgumentList	"""thread 2"""		280545	1					
ANR	280567	Argument	"""thread 2"""		280545	0					
ANR	280568	PrimaryExpression	"""thread 2"""		280545	0					
ANR	280569	ShiftExpression	"QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		280545	1		<<			
ANR	280570	CallExpression	"QStringLiteral ( ""thread 3"" )"		280545	0					
ANR	280571	Callee	QStringLiteral		280545	0					
ANR	280572	Identifier	QStringLiteral		280545	0					
ANR	280573	ArgumentList	"""thread 3"""		280545	1					
ANR	280574	Argument	"""thread 3"""		280545	0					
ANR	280575	PrimaryExpression	"""thread 3"""		280545	0					
ANR	280576	ShiftExpression	"QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		280545	1		<<			
ANR	280577	CallExpression	"QStringLiteral ( ""thread 4"" )"		280545	0					
ANR	280578	Callee	QStringLiteral		280545	0					
ANR	280579	Identifier	QStringLiteral		280545	0					
ANR	280580	ArgumentList	"""thread 4"""		280545	1					
ANR	280581	Argument	"""thread 4"""		280545	0					
ANR	280582	PrimaryExpression	"""thread 4"""		280545	0					
ANR	280583	CallExpression	"QStringLiteral ( ""thread 5"" )"		280545	1					
ANR	280584	Callee	QStringLiteral		280545	0					
ANR	280585	Identifier	QStringLiteral		280545	0					
ANR	280586	ArgumentList	"""thread 5"""		280545	1					
ANR	280587	Argument	"""thread 5"""		280545	0					
ANR	280588	PrimaryExpression	"""thread 5"""		280545	0					
ANR	280589	ExpressionStatement	QThreadPool :: globalInstance ( ) -> setMaxThreadCount ( 5 )	87:4:2555:2606	280545	2	True				
ANR	280590	CallExpression	QThreadPool :: globalInstance ( ) -> setMaxThreadCount ( 5 )		280545	0					
ANR	280591	Callee	QThreadPool :: globalInstance ( ) -> setMaxThreadCount		280545	0					
ANR	280592	PtrMemberAccess	QThreadPool :: globalInstance ( ) -> setMaxThreadCount		280545	0					
ANR	280593	CallExpression	QThreadPool :: globalInstance ( )		280545	0					
ANR	280594	Callee	QThreadPool :: globalInstance		280545	0					
ANR	280595	Identifier	QThreadPool :: globalInstance		280545	0					
ANR	280596	ArgumentList			280545	1					
ANR	280597	Identifier	setMaxThreadCount		280545	1					
ANR	280598	ArgumentList	5		280545	1					
ANR	280599	Argument	5		280545	0					
ANR	280600	PrimaryExpression	5		280545	0					
ANR	280601	ExpressionStatement	"QtConcurrent :: blockingMap ( foo , map_function )"	88:4:2612:2656	280545	3	True				
ANR	280602	CallExpression	"QtConcurrent :: blockingMap ( foo , map_function )"		280545	0					
ANR	280603	Callee	QtConcurrent :: blockingMap		280545	0					
ANR	280604	Identifier	QtConcurrent :: blockingMap		280545	0					
ANR	280605	ArgumentList	foo		280545	1					
ANR	280606	Argument	foo		280545	0					
ANR	280607	Identifier	foo		280545	0					
ANR	280608	Argument	map_function		280545	1					
ANR	280609	Identifier	map_function		280545	0					
ANR	280610	ReturnType	void		280545	1					
ANR	280611	Identifier	do_threads		280545	2					
ANR	280612	ParameterList			280545	3					
ANR	280613	CFGEntryNode	ENTRY		280545		True				
ANR	280614	CFGExitNode	EXIT		280545		True				
ANR	280615	Symbol	QThreadPool :: globalInstance		280545						
ANR	280616	Symbol	foo		280545						
ANR	280617	Symbol	map_function		280545						
ANR	280618	Function	level4	91:0:2661:2905							
ANR	280619	FunctionDef	level4 (int t)		280618	0					
ANR	280620	CompoundStatement		92:0:2680:2905	280618	0					
ANR	280621	IfStatement	if ( t == Malloc )		280618	0					
ANR	280622	Condition	t == Malloc	93:6:2688:2698	280618	0	True				
ANR	280623	EqualityExpression	t == Malloc		280618	0		==			
ANR	280624	Identifier	t		280618	0					
ANR	280625	Identifier	Malloc		280618	1					
ANR	280626	ExpressionStatement	do_malloc ( )	94:4:2705:2716	280618	1	True				
ANR	280627	CallExpression	do_malloc ( )		280618	0					
ANR	280628	Callee	do_malloc		280618	0					
ANR	280629	Identifier	do_malloc		280618	0					
ANR	280630	ArgumentList			280618	1					
ANR	280631	ElseStatement	else		280618	0					
ANR	280632	IfStatement	if ( t == Div0 )		280618	0					
ANR	280633	Condition	t == Div0	95:11:2729:2737	280618	0	True				
ANR	280634	EqualityExpression	t == Div0		280618	0		==			
ANR	280635	Identifier	t		280618	0					
ANR	280636	Identifier	Div0		280618	1					
ANR	280637	ExpressionStatement	do_div0 ( )	96:4:2744:2753	280618	1	True				
ANR	280638	CallExpression	do_div0 ( )		280618	0					
ANR	280639	Callee	do_div0		280618	0					
ANR	280640	Identifier	do_div0		280618	0					
ANR	280641	ArgumentList			280618	1					
ANR	280642	ElseStatement	else		280618	0					
ANR	280643	IfStatement	if ( t == Assert )		280618	0					
ANR	280644	Condition	t == Assert	97:11:2766:2776	280618	0	True				
ANR	280645	EqualityExpression	t == Assert		280618	0		==			
ANR	280646	Identifier	t		280618	0					
ANR	280647	Identifier	Assert		280618	1					
ANR	280648	ExpressionStatement	do_assert ( )	98:4:2783:2794	280618	1	True				
ANR	280649	CallExpression	do_assert ( )		280618	0					
ANR	280650	Callee	do_assert		280618	0					
ANR	280651	Identifier	do_assert		280618	0					
ANR	280652	ArgumentList			280618	1					
ANR	280653	ElseStatement	else		280618	0					
ANR	280654	IfStatement	if ( t == QAssert )		280618	0					
ANR	280655	Condition	t == QAssert	99:11:2807:2818	280618	0	True				
ANR	280656	EqualityExpression	t == QAssert		280618	0		==			
ANR	280657	Identifier	t		280618	0					
ANR	280658	Identifier	QAssert		280618	1					
ANR	280659	ExpressionStatement	do_qassert ( )	100:4:2825:2837	280618	1	True				
ANR	280660	CallExpression	do_qassert ( )		280618	0					
ANR	280661	Callee	do_qassert		280618	0					
ANR	280662	Identifier	do_qassert		280618	0					
ANR	280663	ArgumentList			280618	1					
ANR	280664	ElseStatement	else		280618	0					
ANR	280665	IfStatement	if ( t == Threads )		280618	0					
ANR	280666	Condition	t == Threads	101:11:2850:2861	280618	0	True				
ANR	280667	EqualityExpression	t == Threads		280618	0		==			
ANR	280668	Identifier	t		280618	0					
ANR	280669	Identifier	Threads		280618	1					
ANR	280670	ExpressionStatement	do_threads ( )	102:4:2868:2880	280618	1	True				
ANR	280671	CallExpression	do_threads ( )		280618	0					
ANR	280672	Callee	do_threads		280618	0					
ANR	280673	Identifier	do_threads		280618	0					
ANR	280674	ArgumentList			280618	1					
ANR	280675	ElseStatement	else		280618	0					
ANR	280676	ExpressionStatement	do_crash ( )	104:4:2893:2903	280618	0	True				
ANR	280677	CallExpression	do_crash ( )		280618	0					
ANR	280678	Callee	do_crash		280618	0					
ANR	280679	Identifier	do_crash		280618	0					
ANR	280680	ArgumentList			280618	1					
ANR	280681	ReturnType	void		280618	1					
ANR	280682	Identifier	level4		280618	2					
ANR	280683	ParameterList	int t		280618	3					
ANR	280684	Parameter	int t	91:12:2673:2677	280618	0	True				
ANR	280685	ParameterType	int		280618	0					
ANR	280686	Identifier	t		280618	1					
ANR	280687	CFGEntryNode	ENTRY		280618		True				
ANR	280688	CFGExitNode	EXIT		280618		True				
ANR	280689	Symbol	Threads		280618						
ANR	280690	Symbol	Assert		280618						
ANR	280691	Symbol	t		280618						
ANR	280692	Symbol	Malloc		280618						
ANR	280693	Symbol	QAssert		280618						
ANR	280694	Symbol	Div0		280618						
ANR	280695	Function	level3	107:0:2908:2942							
ANR	280696	FunctionDef	level3 (int t)		280695	0					
ANR	280697	CompoundStatement		108:0:2927:2942	280695	0					
ANR	280698	ExpressionStatement	level4 ( t )	109:2:2931:2940	280695	0	True				
ANR	280699	CallExpression	level4 ( t )		280695	0					
ANR	280700	Callee	level4		280695	0					
ANR	280701	Identifier	level4		280695	0					
ANR	280702	ArgumentList	t		280695	1					
ANR	280703	Argument	t		280695	0					
ANR	280704	Identifier	t		280695	0					
ANR	280705	ReturnType	void		280695	1					
ANR	280706	Identifier	level3		280695	2					
ANR	280707	ParameterList	int t		280695	3					
ANR	280708	Parameter	int t	107:12:2920:2924	280695	0	True				
ANR	280709	ParameterType	int		280695	0					
ANR	280710	Identifier	t		280695	1					
ANR	280711	CFGEntryNode	ENTRY		280695		True				
ANR	280712	CFGExitNode	EXIT		280695		True				
ANR	280713	Symbol	t		280695						
ANR	280714	Function	level2	112:0:2945:2979							
ANR	280715	FunctionDef	level2 (int t)		280714	0					
ANR	280716	CompoundStatement		113:0:2964:2979	280714	0					
ANR	280717	ExpressionStatement	level3 ( t )	114:2:2968:2977	280714	0	True				
ANR	280718	CallExpression	level3 ( t )		280714	0					
ANR	280719	Callee	level3		280714	0					
ANR	280720	Identifier	level3		280714	0					
ANR	280721	ArgumentList	t		280714	1					
ANR	280722	Argument	t		280714	0					
ANR	280723	Identifier	t		280714	0					
ANR	280724	ReturnType	void		280714	1					
ANR	280725	Identifier	level2		280714	2					
ANR	280726	ParameterList	int t		280714	3					
ANR	280727	Parameter	int t	112:12:2957:2961	280714	0	True				
ANR	280728	ParameterType	int		280714	0					
ANR	280729	Identifier	t		280714	1					
ANR	280730	CFGEntryNode	ENTRY		280714		True				
ANR	280731	CFGExitNode	EXIT		280714		True				
ANR	280732	Symbol	t		280714						
ANR	280733	Function	level1	117:0:2982:3016							
ANR	280734	FunctionDef	level1 (int t)		280733	0					
ANR	280735	CompoundStatement		118:0:3001:3016	280733	0					
ANR	280736	ExpressionStatement	level2 ( t )	119:2:3005:3014	280733	0	True				
ANR	280737	CallExpression	level2 ( t )		280733	0					
ANR	280738	Callee	level2		280733	0					
ANR	280739	Identifier	level2		280733	0					
ANR	280740	ArgumentList	t		280733	1					
ANR	280741	Argument	t		280733	0					
ANR	280742	Identifier	t		280733	0					
ANR	280743	ReturnType	void		280733	1					
ANR	280744	Identifier	level1		280733	2					
ANR	280745	ParameterList	int t		280733	3					
ANR	280746	Parameter	int t	117:12:2994:2998	280733	0	True				
ANR	280747	ParameterType	int		280733	0					
ANR	280748	Identifier	t		280733	1					
ANR	280749	CFGEntryNode	ENTRY		280733		True				
ANR	280750	CFGExitNode	EXIT		280733		True				
ANR	280751	Symbol	t		280733						
ANR	280752	Function	main	122:0:3019:4444							
ANR	280753	FunctionDef	"main (int argc , char * argv [ ])"		280752	0					
ANR	280754	CompoundStatement		123:0:3052:4444	280752	0					
ANR	280755	IdentifierDeclStatement	"QApplication app ( argc , argv ) ;"	124:2:3056:3084	280752	0	True				
ANR	280756	IdentifierDecl	"app ( argc , argv )"		280752	0					
ANR	280757	IdentifierDeclType	QApplication		280752	0					
ANR	280758	Identifier	app		280752	1					
ANR	280759	Expression	"argc , argv"		280752	2					
ANR	280760	Identifier	argc		280752	0					
ANR	280761	Identifier	argv		280752	1					
ANR	280762	IdentifierDeclStatement	"KAboutData aboutData ( QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" ) ) ;"	125:2:3088:3386	280752	1	True				
ANR	280763	IdentifierDecl	"aboutData ( QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" ) )"		280752	0					
ANR	280764	IdentifierDeclType	KAboutData		280752	0					
ANR	280765	Identifier	aboutData		280752	1					
ANR	280766	Expression	"QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	2					
ANR	280767	CallExpression	"QStringLiteral ( ""crashtext"" )"		280752	0					
ANR	280768	Callee	QStringLiteral		280752	0					
ANR	280769	Identifier	QStringLiteral		280752	0					
ANR	280770	ArgumentList	"""crashtext"""		280752	1					
ANR	280771	Argument	"""crashtext"""		280752	0					
ANR	280772	PrimaryExpression	"""crashtext"""		280752	0					
ANR	280773	Expression	"i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	1					
ANR	280774	CallExpression	"i18n ( ""Crash Test for DrKonqi"" )"		280752	0					
ANR	280775	Callee	i18n		280752	0					
ANR	280776	Identifier	i18n		280752	0					
ANR	280777	ArgumentList	"""Crash Test for DrKonqi"""		280752	1					
ANR	280778	Argument	"""Crash Test for DrKonqi"""		280752	0					
ANR	280779	PrimaryExpression	"""Crash Test for DrKonqi"""		280752	0					
ANR	280780	Expression	"QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	1					
ANR	280781	CallExpression	"QStringLiteral ( ""1.1"" )"		280752	0					
ANR	280782	Callee	QStringLiteral		280752	0					
ANR	280783	Identifier	QStringLiteral		280752	0					
ANR	280784	ArgumentList	"""1.1"""		280752	1					
ANR	280785	Argument	"""1.1"""		280752	0					
ANR	280786	PrimaryExpression	"""1.1"""		280752	0					
ANR	280787	Expression	"i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	1					
ANR	280788	CallExpression	"i18n ( ""Crash Test for DrKonqi"" )"		280752	0					
ANR	280789	Callee	i18n		280752	0					
ANR	280790	Identifier	i18n		280752	0					
ANR	280791	ArgumentList	"""Crash Test for DrKonqi"""		280752	1					
ANR	280792	Argument	"""Crash Test for DrKonqi"""		280752	0					
ANR	280793	PrimaryExpression	"""Crash Test for DrKonqi"""		280752	0					
ANR	280794	Expression	"KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	1					
ANR	280795	Identifier	KAboutLicense :: GPL		280752	0					
ANR	280796	CallExpression	"i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		280752	1					
ANR	280797	Callee	i18n		280752	0					
ANR	280798	Identifier	i18n		280752	0					
ANR	280799	ArgumentList	"""(c) 2000-2002 David Faure, Waldo Bastian"""		280752	1					
ANR	280800	Argument	"""(c) 2000-2002 David Faure, Waldo Bastian"""		280752	0					
ANR	280801	PrimaryExpression	"""(c) 2000-2002 David Faure, Waldo Bastian"""		280752	0					
ANR	280802	IdentifierDeclStatement	QCommandLineParser parser ;	131:2:3391:3416	280752	2	True				
ANR	280803	IdentifierDecl	parser		280752	0					
ANR	280804	IdentifierDeclType	QCommandLineParser		280752	0					
ANR	280805	Identifier	parser		280752	1					
ANR	280806	ExpressionStatement	"parser . addOption ( QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) ) )"	132:2:3420:3518	280752	3	True				
ANR	280807	CallExpression	"parser . addOption ( QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) ) )"		280752	0					
ANR	280808	Callee	parser . addOption		280752	0					
ANR	280809	MemberAccess	parser . addOption		280752	0					
ANR	280810	Identifier	parser		280752	0					
ANR	280811	Identifier	addOption		280752	1					
ANR	280812	ArgumentList	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		280752	1					
ANR	280813	Argument	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		280752	0					
ANR	280814	CallExpression	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		280752	0					
ANR	280815	Callee	QCommandLineOption		280752	0					
ANR	280816	Identifier	QCommandLineOption		280752	0					
ANR	280817	ArgumentList	"QStringLiteral ( ""autorestart"" )"		280752	1					
ANR	280818	Argument	"QStringLiteral ( ""autorestart"" )"		280752	0					
ANR	280819	CallExpression	"QStringLiteral ( ""autorestart"" )"		280752	0					
ANR	280820	Callee	QStringLiteral		280752	0					
ANR	280821	Identifier	QStringLiteral		280752	0					
ANR	280822	ArgumentList	"""autorestart"""		280752	1					
ANR	280823	Argument	"""autorestart"""		280752	0					
ANR	280824	PrimaryExpression	"""autorestart"""		280752	0					
ANR	280825	Argument	"i18n ( ""Automatically restart"" )"		280752	1					
ANR	280826	CallExpression	"i18n ( ""Automatically restart"" )"		280752	0					
ANR	280827	Callee	i18n		280752	0					
ANR	280828	Identifier	i18n		280752	0					
ANR	280829	ArgumentList	"""Automatically restart"""		280752	1					
ANR	280830	Argument	"""Automatically restart"""		280752	0					
ANR	280831	PrimaryExpression	"""Automatically restart"""		280752	0					
ANR	280832	ExpressionStatement	"parser . addPositionalArgument ( QStringLiteral ( ""type"" ) , i18n ( ""Type of crash."" ) , QStringLiteral ( ""crash|malloc|div0|assert|threads"" ) )"	133:2:3522:3650	280752	4	True				
ANR	280833	CallExpression	"parser . addPositionalArgument ( QStringLiteral ( ""type"" ) , i18n ( ""Type of crash."" ) , QStringLiteral ( ""crash|malloc|div0|assert|threads"" ) )"		280752	0					
ANR	280834	Callee	parser . addPositionalArgument		280752	0					
ANR	280835	MemberAccess	parser . addPositionalArgument		280752	0					
ANR	280836	Identifier	parser		280752	0					
ANR	280837	Identifier	addPositionalArgument		280752	1					
ANR	280838	ArgumentList	"QStringLiteral ( ""type"" )"		280752	1					
ANR	280839	Argument	"QStringLiteral ( ""type"" )"		280752	0					
ANR	280840	CallExpression	"QStringLiteral ( ""type"" )"		280752	0					
ANR	280841	Callee	QStringLiteral		280752	0					
ANR	280842	Identifier	QStringLiteral		280752	0					
ANR	280843	ArgumentList	"""type"""		280752	1					
ANR	280844	Argument	"""type"""		280752	0					
ANR	280845	PrimaryExpression	"""type"""		280752	0					
ANR	280846	Argument	"i18n ( ""Type of crash."" )"		280752	1					
ANR	280847	CallExpression	"i18n ( ""Type of crash."" )"		280752	0					
ANR	280848	Callee	i18n		280752	0					
ANR	280849	Identifier	i18n		280752	0					
ANR	280850	ArgumentList	"""Type of crash."""		280752	1					
ANR	280851	Argument	"""Type of crash."""		280752	0					
ANR	280852	PrimaryExpression	"""Type of crash."""		280752	0					
ANR	280853	Argument	"QStringLiteral ( ""crash|malloc|div0|assert|threads"" )"		280752	2					
ANR	280854	CallExpression	"QStringLiteral ( ""crash|malloc|div0|assert|threads"" )"		280752	0					
ANR	280855	Callee	QStringLiteral		280752	0					
ANR	280856	Identifier	QStringLiteral		280752	0					
ANR	280857	ArgumentList	"""crash|malloc|div0|assert|threads"""		280752	1					
ANR	280858	Argument	"""crash|malloc|div0|assert|threads"""		280752	0					
ANR	280859	PrimaryExpression	"""crash|malloc|div0|assert|threads"""		280752	0					
ANR	280860	ExpressionStatement	aboutData . setupCommandLine ( & parser )	134:2:3654:3689	280752	5	True				
ANR	280861	CallExpression	aboutData . setupCommandLine ( & parser )		280752	0					
ANR	280862	Callee	aboutData . setupCommandLine		280752	0					
ANR	280863	MemberAccess	aboutData . setupCommandLine		280752	0					
ANR	280864	Identifier	aboutData		280752	0					
ANR	280865	Identifier	setupCommandLine		280752	1					
ANR	280866	ArgumentList	& parser		280752	1					
ANR	280867	Argument	& parser		280752	0					
ANR	280868	UnaryOperationExpression	& parser		280752	0					
ANR	280869	UnaryOperator	&		280752	0					
ANR	280870	Identifier	parser		280752	1					
ANR	280871	ExpressionStatement	parser . process ( app )	135:2:3693:3712	280752	6	True				
ANR	280872	CallExpression	parser . process ( app )		280752	0					
ANR	280873	Callee	parser . process		280752	0					
ANR	280874	MemberAccess	parser . process		280752	0					
ANR	280875	Identifier	parser		280752	0					
ANR	280876	Identifier	process		280752	1					
ANR	280877	ArgumentList	app		280752	1					
ANR	280878	Argument	app		280752	0					
ANR	280879	Identifier	app		280752	0					
ANR	280880	ExpressionStatement	aboutData . processCommandLine ( & parser )	136:2:3716:3753	280752	7	True				
ANR	280881	CallExpression	aboutData . processCommandLine ( & parser )		280752	0					
ANR	280882	Callee	aboutData . processCommandLine		280752	0					
ANR	280883	MemberAccess	aboutData . processCommandLine		280752	0					
ANR	280884	Identifier	aboutData		280752	0					
ANR	280885	Identifier	processCommandLine		280752	1					
ANR	280886	ArgumentList	& parser		280752	1					
ANR	280887	Argument	& parser		280752	0					
ANR	280888	UnaryOperationExpression	& parser		280752	0					
ANR	280889	UnaryOperator	&		280752	0					
ANR	280890	Identifier	parser		280752	1					
ANR	280891	IdentifierDeclStatement	KCrash :: CrashFlags flags = KCrash :: AlwaysDirectly ;	139:2:3830:3879	280752	8	True				
ANR	280892	IdentifierDecl	flags = KCrash :: AlwaysDirectly		280752	0					
ANR	280893	IdentifierDeclType	KCrash :: CrashFlags		280752	0					
ANR	280894	Identifier	flags		280752	1					
ANR	280895	AssignmentExpression	flags = KCrash :: AlwaysDirectly		280752	2		=			
ANR	280896	Identifier	KCrash :: AlwaysDirectly		280752	0					
ANR	280897	Identifier	KCrash :: AlwaysDirectly		280752	1					
ANR	280898	IfStatement	"if ( parser . isSet ( QStringLiteral ( ""autorestart"" ) ) )"		280752	9					
ANR	280899	Condition	"parser . isSet ( QStringLiteral ( ""autorestart"" ) )"	140:6:3887:3929	280752	0	True				
ANR	280900	CallExpression	"parser . isSet ( QStringLiteral ( ""autorestart"" ) )"		280752	0					
ANR	280901	Callee	parser . isSet		280752	0					
ANR	280902	MemberAccess	parser . isSet		280752	0					
ANR	280903	Identifier	parser		280752	0					
ANR	280904	Identifier	isSet		280752	1					
ANR	280905	ArgumentList	"QStringLiteral ( ""autorestart"" )"		280752	1					
ANR	280906	Argument	"QStringLiteral ( ""autorestart"" )"		280752	0					
ANR	280907	CallExpression	"QStringLiteral ( ""autorestart"" )"		280752	0					
ANR	280908	Callee	QStringLiteral		280752	0					
ANR	280909	Identifier	QStringLiteral		280752	0					
ANR	280910	ArgumentList	"""autorestart"""		280752	1					
ANR	280911	Argument	"""autorestart"""		280752	0					
ANR	280912	PrimaryExpression	"""autorestart"""		280752	0					
ANR	280913	ExpressionStatement	flags |= KCrash :: AutoRestart	141:4:3936:3964	280752	1	True				
ANR	280914	AssignmentExpression	flags |= KCrash :: AutoRestart		280752	0		|=			
ANR	280915	Identifier	flags		280752	0					
ANR	280916	Identifier	KCrash :: AutoRestart		280752	1					
ANR	280917	ExpressionStatement	KCrash :: setFlags ( flags )	142:2:3968:3991	280752	10	True				
ANR	280918	CallExpression	KCrash :: setFlags ( flags )		280752	0					
ANR	280919	Callee	KCrash :: setFlags		280752	0					
ANR	280920	Identifier	KCrash :: setFlags		280752	0					
ANR	280921	ArgumentList	flags		280752	1					
ANR	280922	Argument	flags		280752	0					
ANR	280923	Identifier	flags		280752	0					
ANR	280924	IdentifierDeclStatement	QByteArray type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( ) ;	144:2:3996:4115	280752	11	True				
ANR	280925	IdentifierDecl	type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		280752	0					
ANR	280926	IdentifierDeclType	QByteArray		280752	0					
ANR	280927	Identifier	type		280752	1					
ANR	280928	AssignmentExpression	type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		280752	2		=			
ANR	280929	Identifier	type		280752	0					
ANR	280930	ConditionalExpression	parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		280752	1					
ANR	280931	Condition	parser . positionalArguments ( ) . isEmpty ( )		280752	0					
ANR	280932	CallExpression	parser . positionalArguments ( ) . isEmpty ( )		280752	0					
ANR	280933	Callee	parser . positionalArguments ( ) . isEmpty		280752	0					
ANR	280934	MemberAccess	parser . positionalArguments ( ) . isEmpty		280752	0					
ANR	280935	CallExpression	parser . positionalArguments ( )		280752	0					
ANR	280936	Callee	parser . positionalArguments		280752	0					
ANR	280937	MemberAccess	parser . positionalArguments		280752	0					
ANR	280938	Identifier	parser		280752	0					
ANR	280939	Identifier	positionalArguments		280752	1					
ANR	280940	ArgumentList			280752	1					
ANR	280941	Identifier	isEmpty		280752	1					
ANR	280942	ArgumentList			280752	1					
ANR	280943	CallExpression	QByteArray ( )		280752	1					
ANR	280944	Callee	QByteArray		280752	0					
ANR	280945	Identifier	QByteArray		280752	0					
ANR	280946	ArgumentList			280752	1					
ANR	280947	CallExpression	parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		280752	2					
ANR	280948	Callee	parser . positionalArguments ( ) . first ( ) . toUtf8		280752	0					
ANR	280949	MemberAccess	parser . positionalArguments ( ) . first ( ) . toUtf8		280752	0					
ANR	280950	CallExpression	parser . positionalArguments ( ) . first ( )		280752	0					
ANR	280951	Callee	parser . positionalArguments ( ) . first		280752	0					
ANR	280952	MemberAccess	parser . positionalArguments ( ) . first		280752	0					
ANR	280953	CallExpression	parser . positionalArguments ( )		280752	0					
ANR	280954	Callee	parser . positionalArguments		280752	0					
ANR	280955	MemberAccess	parser . positionalArguments		280752	0					
ANR	280956	Identifier	parser		280752	0					
ANR	280957	Identifier	positionalArguments		280752	1					
ANR	280958	ArgumentList			280752	1					
ANR	280959	Identifier	first		280752	1					
ANR	280960	ArgumentList			280752	1					
ANR	280961	Identifier	toUtf8		280752	1					
ANR	280962	ArgumentList			280752	1					
ANR	280963	IdentifierDeclStatement	int crashtype = Crash ;	145:2:4119:4140	280752	12	True				
ANR	280964	IdentifierDecl	crashtype = Crash		280752	0					
ANR	280965	IdentifierDeclType	int		280752	0					
ANR	280966	Identifier	crashtype		280752	1					
ANR	280967	AssignmentExpression	crashtype = Crash		280752	2		=			
ANR	280968	Identifier	Crash		280752	0					
ANR	280969	Identifier	Crash		280752	1					
ANR	280970	IfStatement	"if ( type == ""malloc"" )"		280752	13					
ANR	280971	Condition	"type == ""malloc"""	146:6:4148:4163	280752	0	True				
ANR	280972	EqualityExpression	"type == ""malloc"""		280752	0		==			
ANR	280973	Identifier	type		280752	0					
ANR	280974	PrimaryExpression	"""malloc"""		280752	1					
ANR	280975	ExpressionStatement	crashtype = Malloc	147:4:4170:4188	280752	1	True				
ANR	280976	AssignmentExpression	crashtype = Malloc		280752	0		=			
ANR	280977	Identifier	crashtype		280752	0					
ANR	280978	Identifier	Malloc		280752	1					
ANR	280979	ElseStatement	else		280752	0					
ANR	280980	IfStatement	"if ( type == ""div0"" )"		280752	0					
ANR	280981	Condition	"type == ""div0"""	148:11:4201:4214	280752	0	True				
ANR	280982	EqualityExpression	"type == ""div0"""		280752	0		==			
ANR	280983	Identifier	type		280752	0					
ANR	280984	PrimaryExpression	"""div0"""		280752	1					
ANR	280985	ExpressionStatement	crashtype = Div0	149:4:4221:4237	280752	1	True				
ANR	280986	AssignmentExpression	crashtype = Div0		280752	0		=			
ANR	280987	Identifier	crashtype		280752	0					
ANR	280988	Identifier	Div0		280752	1					
ANR	280989	ElseStatement	else		280752	0					
ANR	280990	IfStatement	"if ( type == ""assert"" )"		280752	0					
ANR	280991	Condition	"type == ""assert"""	150:11:4250:4265	280752	0	True				
ANR	280992	EqualityExpression	"type == ""assert"""		280752	0		==			
ANR	280993	Identifier	type		280752	0					
ANR	280994	PrimaryExpression	"""assert"""		280752	1					
ANR	280995	ExpressionStatement	crashtype = Assert	151:4:4272:4290	280752	1	True				
ANR	280996	AssignmentExpression	crashtype = Assert		280752	0		=			
ANR	280997	Identifier	crashtype		280752	0					
ANR	280998	Identifier	Assert		280752	1					
ANR	280999	ElseStatement	else		280752	0					
ANR	281000	IfStatement	"if ( type == ""qassert"" )"		280752	0					
ANR	281001	Condition	"type == ""qassert"""	152:11:4303:4319	280752	0	True				
ANR	281002	EqualityExpression	"type == ""qassert"""		280752	0		==			
ANR	281003	Identifier	type		280752	0					
ANR	281004	PrimaryExpression	"""qassert"""		280752	1					
ANR	281005	ExpressionStatement	crashtype = QAssert	153:4:4326:4345	280752	1	True				
ANR	281006	AssignmentExpression	crashtype = QAssert		280752	0		=			
ANR	281007	Identifier	crashtype		280752	0					
ANR	281008	Identifier	QAssert		280752	1					
ANR	281009	ElseStatement	else		280752	0					
ANR	281010	IfStatement	"if ( type == ""threads"" )"		280752	0					
ANR	281011	Condition	"type == ""threads"""	154:11:4358:4374	280752	0	True				
ANR	281012	EqualityExpression	"type == ""threads"""		280752	0		==			
ANR	281013	Identifier	type		280752	0					
ANR	281014	PrimaryExpression	"""threads"""		280752	1					
ANR	281015	ExpressionStatement	crashtype = Threads	155:4:4381:4400	280752	1	True				
ANR	281016	AssignmentExpression	crashtype = Threads		280752	0		=			
ANR	281017	Identifier	crashtype		280752	0					
ANR	281018	Identifier	Threads		280752	1					
ANR	281019	ExpressionStatement	level1 ( crashtype )	156:2:4404:4421	280752	14	True				
ANR	281020	CallExpression	level1 ( crashtype )		280752	0					
ANR	281021	Callee	level1		280752	0					
ANR	281022	Identifier	level1		280752	0					
ANR	281023	ArgumentList	crashtype		280752	1					
ANR	281024	Argument	crashtype		280752	0					
ANR	281025	Identifier	crashtype		280752	0					
ANR	281026	ReturnStatement	return app . exec ( ) ;	157:2:4425:4442	280752	15	True				
ANR	281027	CallExpression	app . exec ( )		280752	0					
ANR	281028	Callee	app . exec		280752	0					
ANR	281029	MemberAccess	app . exec		280752	0					
ANR	281030	Identifier	app		280752	0					
ANR	281031	Identifier	exec		280752	1					
ANR	281032	ArgumentList			280752	1					
ANR	281033	ReturnType	int		280752	1					
ANR	281034	Identifier	main		280752	2					
ANR	281035	ParameterList	"int argc , char * argv [ ]"		280752	3					
ANR	281036	Parameter	int argc	122:9:3028:3035	280752	0	True				
ANR	281037	ParameterType	int		280752	0					
ANR	281038	Identifier	argc		280752	1					
ANR	281039	Parameter	char * argv [ ]	122:19:3038:3049	280752	1	True				
ANR	281040	ParameterType	char * [ ]		280752	0					
ANR	281041	Identifier	argv		280752	1					
ANR	281042	CFGEntryNode	ENTRY		280752		True				
ANR	281043	CFGExitNode	EXIT		280752		True				
ANR	281044	Symbol	& parser		280752						
ANR	281045	Symbol	crashtype		280752						
ANR	281046	Symbol	flags		280752						
ANR	281047	Symbol	aboutData		280752						
ANR	281048	Symbol	parser . positionalArguments ( ) . isEmpty		280752						
ANR	281049	Symbol	type		280752						
ANR	281050	Symbol	argv		280752						
ANR	281051	Symbol	QCommandLineOption		280752						
ANR	281052	Symbol	parser . positionalArguments		280752						
ANR	281053	Symbol	parser . positionalArguments ( ) . first		280752						
ANR	281054	Symbol	Assert		280752						
ANR	281055	Symbol	argc		280752						
ANR	281056	Symbol	app		280752						
ANR	281057	Symbol	Crash		280752						
ANR	281058	Symbol	app . exec		280752						
ANR	281059	Symbol	QByteArray		280752						
ANR	281060	Symbol	Malloc		280752						
ANR	281061	Symbol	parser . positionalArguments ( ) . first ( ) . toUtf8		280752						
ANR	281062	Symbol	i18n		280752						
ANR	281063	Symbol	parser . isSet		280752						
ANR	281064	Symbol	Threads		280752						
ANR	281065	Symbol	parser		280752						
ANR	281066	Symbol	KCrash :: AutoRestart		280752						
ANR	281067	Symbol	QAssert		280752						
ANR	281068	Symbol	QStringLiteral		280752						
ANR	281069	Symbol	KCrash :: AlwaysDirectly		280752						
ANR	281070	Symbol	Div0		280752						
