command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	101570	File	data/converged/CVE-2018-6791_plasma-workspace/crashtest.cpp								
ANR	101571	ClassDef	CrashType	39:0:1753:1816							
ANR	101572	ClassDef	SomeStruct	41:0:1820:1883							
ANR	101573	Function	foo	43:4:1844:1868							
ANR	101574	FunctionDef	foo ()		101573	0					
ANR	101575	CompoundStatement		43:14:1854:1868	101573	0					
ANR	101576	ReturnStatement	return ret ;	43:1:1856:1866	101573	0	True				
ANR	101577	Identifier	ret		101573	0					
ANR	101578	ReturnType	int		101573	1					
ANR	101579	Identifier	foo		101573	2					
ANR	101580	ParameterList			101573	3					
ANR	101581	CFGEntryNode	ENTRY		101573		True				
ANR	101582	CFGExitNode	EXIT		101573		True				
ANR	101583	Symbol	ret		101573						
ANR	101584	DeclStmt									
ANR	101585	Decl							int	int	ret
ANR	101586	Function	do_crash	47:0:1887:1984							
ANR	101587	FunctionDef	do_crash ()		101586	0					
ANR	101588	CompoundStatement		48:0:1903:1984	101586	0					
ANR	101589	IdentifierDeclStatement	SomeStruct * obj = 0 ;	49:2:1907:1926	101586	0	True				
ANR	101590	IdentifierDecl	* obj = 0		101586	0					
ANR	101591	IdentifierDeclType	SomeStruct *		101586	0					
ANR	101592	Identifier	obj		101586	1					
ANR	101593	AssignmentExpression	* obj = 0		101586	2		=			
ANR	101594	Identifier	obj		101586	0					
ANR	101595	PrimaryExpression	0		101586	1					
ANR	101596	IdentifierDeclStatement	int ret = obj -> foo ( ) ;	50:2:1930:1950	101586	1	True				
ANR	101597	IdentifierDecl	ret = obj -> foo ( )		101586	0					
ANR	101598	IdentifierDeclType	int		101586	0					
ANR	101599	Identifier	ret		101586	1					
ANR	101600	AssignmentExpression	ret = obj -> foo ( )		101586	2		=			
ANR	101601	Identifier	ret		101586	0					
ANR	101602	CallExpression	obj -> foo ( )		101586	1					
ANR	101603	Callee	obj -> foo		101586	0					
ANR	101604	PtrMemberAccess	obj -> foo		101586	0					
ANR	101605	Identifier	obj		101586	0					
ANR	101606	Identifier	foo		101586	1					
ANR	101607	ArgumentList			101586	1					
ANR	101608	ExpressionStatement	"printf ( ""result = %d\\n"" , ret )"	51:2:1954:1982	101586	2	True				
ANR	101609	CallExpression	"printf ( ""result = %d\\n"" , ret )"		101586	0					
ANR	101610	Callee	printf		101586	0					
ANR	101611	Identifier	printf		101586	0					
ANR	101612	ArgumentList	"""result = %d\\n"""		101586	1					
ANR	101613	Argument	"""result = %d\\n"""		101586	0					
ANR	101614	PrimaryExpression	"""result = %d\\n"""		101586	0					
ANR	101615	Argument	ret		101586	1					
ANR	101616	Identifier	ret		101586	0					
ANR	101617	ReturnType	void		101586	1					
ANR	101618	Identifier	do_crash		101586	2					
ANR	101619	ParameterList			101586	3					
ANR	101620	CFGEntryNode	ENTRY		101586		True				
ANR	101621	CFGExitNode	EXIT		101586		True				
ANR	101622	Symbol	ret		101586						
ANR	101623	Symbol	* obj		101586						
ANR	101624	Symbol	obj -> foo		101586						
ANR	101625	Symbol	obj		101586						
ANR	101626	Function	do_malloc	54:0:1987:2030							
ANR	101627	FunctionDef	do_malloc ()		101626	0					
ANR	101628	CompoundStatement		55:0:2004:2030	101626	0					
ANR	101629	Statement	delete	56:2:2008:2013	101626	0	True				
ANR	101630	ExpressionStatement	( char * ) 0xdead	56:9:2015:2028	101626	1	True				
ANR	101631	CastExpression	( char * ) 0xdead		101626	0					
ANR	101632	CastTarget	char *		101626	0					
ANR	101633	PrimaryExpression	0xdead		101626	1					
ANR	101634	ReturnType	void		101626	1					
ANR	101635	Identifier	do_malloc		101626	2					
ANR	101636	ParameterList			101626	3					
ANR	101637	CFGEntryNode	ENTRY		101626		True				
ANR	101638	CFGExitNode	EXIT		101626		True				
ANR	101639	Function	do_div0	59:0:2033:2161							
ANR	101640	FunctionDef	do_div0 ()		101639	0					
ANR	101641	CompoundStatement		60:0:2048:2161	101639	0					
ANR	101642	IdentifierDeclStatement	volatile int a = 99 ;	61:2:2052:2071	101639	0	True				
ANR	101643	IdentifierDecl	a = 99		101639	0					
ANR	101644	IdentifierDeclType	volatile int		101639	0					
ANR	101645	Identifier	a		101639	1					
ANR	101646	AssignmentExpression	a = 99		101639	2		=			
ANR	101647	Identifier	a		101639	0					
ANR	101648	PrimaryExpression	99		101639	1					
ANR	101649	IdentifierDeclStatement	volatile int b = 10 ;	62:2:2075:2094	101639	1	True				
ANR	101650	IdentifierDecl	b = 10		101639	0					
ANR	101651	IdentifierDeclType	volatile int		101639	0					
ANR	101652	Identifier	b		101639	1					
ANR	101653	AssignmentExpression	b = 10		101639	2		=			
ANR	101654	Identifier	b		101639	0					
ANR	101655	PrimaryExpression	10		101639	1					
ANR	101656	IdentifierDeclStatement	volatile int c = a / ( b - 10 ) ;	63:2:2098:2129	101639	2	True				
ANR	101657	IdentifierDecl	c = a / ( b - 10 )		101639	0					
ANR	101658	IdentifierDeclType	volatile int		101639	0					
ANR	101659	Identifier	c		101639	1					
ANR	101660	AssignmentExpression	c = a / ( b - 10 )		101639	2		=			
ANR	101661	Identifier	c		101639	0					
ANR	101662	MultiplicativeExpression	a / ( b - 10 )		101639	1		/			
ANR	101663	Identifier	a		101639	0					
ANR	101664	AdditiveExpression	b - 10		101639	1		-			
ANR	101665	Identifier	b		101639	0					
ANR	101666	PrimaryExpression	10		101639	1					
ANR	101667	ExpressionStatement	"printf ( ""result = %d\\n"" , c )"	64:2:2133:2159	101639	3	True				
ANR	101668	CallExpression	"printf ( ""result = %d\\n"" , c )"		101639	0					
ANR	101669	Callee	printf		101639	0					
ANR	101670	Identifier	printf		101639	0					
ANR	101671	ArgumentList	"""result = %d\\n"""		101639	1					
ANR	101672	Argument	"""result = %d\\n"""		101639	0					
ANR	101673	PrimaryExpression	"""result = %d\\n"""		101639	0					
ANR	101674	Argument	c		101639	1					
ANR	101675	Identifier	c		101639	0					
ANR	101676	ReturnType	void		101639	1					
ANR	101677	Identifier	do_div0		101639	2					
ANR	101678	ParameterList			101639	3					
ANR	101679	CFGEntryNode	ENTRY		101639		True				
ANR	101680	CFGExitNode	EXIT		101639		True				
ANR	101681	Symbol	a		101639						
ANR	101682	Symbol	b		101639						
ANR	101683	Symbol	c		101639						
ANR	101684	Function	do_assert	67:0:2164:2200							
ANR	101685	FunctionDef	do_assert ()		101684	0					
ANR	101686	CompoundStatement		68:0:2181:2200	101684	0					
ANR	101687	ExpressionStatement	assert ( false )	69:2:2185:2198	101684	0	True				
ANR	101688	CallExpression	assert ( false )		101684	0					
ANR	101689	Callee	assert		101684	0					
ANR	101690	Identifier	assert		101684	0					
ANR	101691	ArgumentList	false		101684	1					
ANR	101692	Argument	false		101684	0					
ANR	101693	Identifier	false		101684	0					
ANR	101694	ReturnType	void		101684	1					
ANR	101695	Identifier	do_assert		101684	2					
ANR	101696	ParameterList			101684	3					
ANR	101697	CFGEntryNode	ENTRY		101684		True				
ANR	101698	CFGExitNode	EXIT		101684		True				
ANR	101699	Symbol	false		101684						
ANR	101700	Function	do_qassert	72:0:2203:2242							
ANR	101701	FunctionDef	do_qassert ()		101700	0					
ANR	101702	CompoundStatement		73:0:2221:2242	101700	0					
ANR	101703	ExpressionStatement	Q_ASSERT ( false )	74:2:2225:2240	101700	0	True				
ANR	101704	CallExpression	Q_ASSERT ( false )		101700	0					
ANR	101705	Callee	Q_ASSERT		101700	0					
ANR	101706	Identifier	Q_ASSERT		101700	0					
ANR	101707	ArgumentList	false		101700	1					
ANR	101708	Argument	false		101700	0					
ANR	101709	Identifier	false		101700	0					
ANR	101710	ReturnType	void		101700	1					
ANR	101711	Identifier	do_qassert		101700	2					
ANR	101712	ParameterList			101700	3					
ANR	101713	CFGEntryNode	ENTRY		101700		True				
ANR	101714	CFGExitNode	EXIT		101700		True				
ANR	101715	Symbol	false		101700						
ANR	101716	Function	map_function	77:0:2245:2348							
ANR	101717	FunctionDef	map_function (const QString & s)		101716	0					
ANR	101718	CompoundStatement		78:0:2282:2348	101716	0					
ANR	101719	WhileStatement	"while ( s != QLatin1String ( ""thread 4"" ) )"		101716	0					
ANR	101720	Condition	"s != QLatin1String ( ""thread 4"" )"	79:12:2296:2325	101716	0	True				
ANR	101721	EqualityExpression	"s != QLatin1String ( ""thread 4"" )"		101716	0		!=			
ANR	101722	Identifier	s		101716	0					
ANR	101723	CallExpression	"QLatin1String ( ""thread 4"" )"		101716	1					
ANR	101724	Callee	QLatin1String		101716	0					
ANR	101725	Identifier	QLatin1String		101716	0					
ANR	101726	ArgumentList	"""thread 4"""		101716	1					
ANR	101727	Argument	"""thread 4"""		101716	0					
ANR	101728	PrimaryExpression	"""thread 4"""		101716	0					
ANR	101729	CompoundStatement		2:45:46:46	101716	1					
ANR	101730	ExpressionStatement	do_crash ( )	80:4:2336:2346	101716	1	True				
ANR	101731	CallExpression	do_crash ( )		101716	0					
ANR	101732	Callee	do_crash		101716	0					
ANR	101733	Identifier	do_crash		101716	0					
ANR	101734	ArgumentList			101716	1					
ANR	101735	ReturnType	void		101716	1					
ANR	101736	Identifier	map_function		101716	2					
ANR	101737	ParameterList	const QString & s		101716	3					
ANR	101738	Parameter	const QString & s	77:18:2263:2279	101716	0	True				
ANR	101739	ParameterType	const QString &		101716	0					
ANR	101740	Identifier	s		101716	1					
ANR	101741	CFGEntryNode	ENTRY		101716		True				
ANR	101742	CFGExitNode	EXIT		101716		True				
ANR	101743	Symbol	QLatin1String		101716						
ANR	101744	Symbol	s		101716						
ANR	101745	Function	do_threads	83:0:2351:2658							
ANR	101746	FunctionDef	do_threads ()		101745	0					
ANR	101747	CompoundStatement		84:0:2369:2658	101745	0					
ANR	101748	IdentifierDeclStatement	QStringList foo ;	85:4:2375:2390	101745	0	True				
ANR	101749	IdentifierDecl	foo		101745	0					
ANR	101750	IdentifierDeclType	QStringList		101745	0					
ANR	101751	Identifier	foo		101745	1					
ANR	101752	ExpressionStatement	"foo << QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"	86:4:2396:2549	101745	1	True				
ANR	101753	ShiftExpression	"foo << QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		101745	0		<<			
ANR	101754	Identifier	foo		101745	0					
ANR	101755	ShiftExpression	"QStringLiteral ( ""thread 1"" ) << QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		101745	1		<<			
ANR	101756	CallExpression	"QStringLiteral ( ""thread 1"" )"		101745	0					
ANR	101757	Callee	QStringLiteral		101745	0					
ANR	101758	Identifier	QStringLiteral		101745	0					
ANR	101759	ArgumentList	"""thread 1"""		101745	1					
ANR	101760	Argument	"""thread 1"""		101745	0					
ANR	101761	PrimaryExpression	"""thread 1"""		101745	0					
ANR	101762	ShiftExpression	"QStringLiteral ( ""thread 2"" ) << QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		101745	1		<<			
ANR	101763	CallExpression	"QStringLiteral ( ""thread 2"" )"		101745	0					
ANR	101764	Callee	QStringLiteral		101745	0					
ANR	101765	Identifier	QStringLiteral		101745	0					
ANR	101766	ArgumentList	"""thread 2"""		101745	1					
ANR	101767	Argument	"""thread 2"""		101745	0					
ANR	101768	PrimaryExpression	"""thread 2"""		101745	0					
ANR	101769	ShiftExpression	"QStringLiteral ( ""thread 3"" ) << QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		101745	1		<<			
ANR	101770	CallExpression	"QStringLiteral ( ""thread 3"" )"		101745	0					
ANR	101771	Callee	QStringLiteral		101745	0					
ANR	101772	Identifier	QStringLiteral		101745	0					
ANR	101773	ArgumentList	"""thread 3"""		101745	1					
ANR	101774	Argument	"""thread 3"""		101745	0					
ANR	101775	PrimaryExpression	"""thread 3"""		101745	0					
ANR	101776	ShiftExpression	"QStringLiteral ( ""thread 4"" ) << QStringLiteral ( ""thread 5"" )"		101745	1		<<			
ANR	101777	CallExpression	"QStringLiteral ( ""thread 4"" )"		101745	0					
ANR	101778	Callee	QStringLiteral		101745	0					
ANR	101779	Identifier	QStringLiteral		101745	0					
ANR	101780	ArgumentList	"""thread 4"""		101745	1					
ANR	101781	Argument	"""thread 4"""		101745	0					
ANR	101782	PrimaryExpression	"""thread 4"""		101745	0					
ANR	101783	CallExpression	"QStringLiteral ( ""thread 5"" )"		101745	1					
ANR	101784	Callee	QStringLiteral		101745	0					
ANR	101785	Identifier	QStringLiteral		101745	0					
ANR	101786	ArgumentList	"""thread 5"""		101745	1					
ANR	101787	Argument	"""thread 5"""		101745	0					
ANR	101788	PrimaryExpression	"""thread 5"""		101745	0					
ANR	101789	ExpressionStatement	QThreadPool :: globalInstance ( ) -> setMaxThreadCount ( 5 )	87:4:2555:2606	101745	2	True				
ANR	101790	CallExpression	QThreadPool :: globalInstance ( ) -> setMaxThreadCount ( 5 )		101745	0					
ANR	101791	Callee	QThreadPool :: globalInstance ( ) -> setMaxThreadCount		101745	0					
ANR	101792	PtrMemberAccess	QThreadPool :: globalInstance ( ) -> setMaxThreadCount		101745	0					
ANR	101793	CallExpression	QThreadPool :: globalInstance ( )		101745	0					
ANR	101794	Callee	QThreadPool :: globalInstance		101745	0					
ANR	101795	Identifier	QThreadPool :: globalInstance		101745	0					
ANR	101796	ArgumentList			101745	1					
ANR	101797	Identifier	setMaxThreadCount		101745	1					
ANR	101798	ArgumentList	5		101745	1					
ANR	101799	Argument	5		101745	0					
ANR	101800	PrimaryExpression	5		101745	0					
ANR	101801	ExpressionStatement	"QtConcurrent :: blockingMap ( foo , map_function )"	88:4:2612:2656	101745	3	True				
ANR	101802	CallExpression	"QtConcurrent :: blockingMap ( foo , map_function )"		101745	0					
ANR	101803	Callee	QtConcurrent :: blockingMap		101745	0					
ANR	101804	Identifier	QtConcurrent :: blockingMap		101745	0					
ANR	101805	ArgumentList	foo		101745	1					
ANR	101806	Argument	foo		101745	0					
ANR	101807	Identifier	foo		101745	0					
ANR	101808	Argument	map_function		101745	1					
ANR	101809	Identifier	map_function		101745	0					
ANR	101810	ReturnType	void		101745	1					
ANR	101811	Identifier	do_threads		101745	2					
ANR	101812	ParameterList			101745	3					
ANR	101813	CFGEntryNode	ENTRY		101745		True				
ANR	101814	CFGExitNode	EXIT		101745		True				
ANR	101815	Symbol	QThreadPool :: globalInstance		101745						
ANR	101816	Symbol	foo		101745						
ANR	101817	Symbol	map_function		101745						
ANR	101818	Function	level4	91:0:2661:2905							
ANR	101819	FunctionDef	level4 (int t)		101818	0					
ANR	101820	CompoundStatement		92:0:2680:2905	101818	0					
ANR	101821	IfStatement	if ( t == Malloc )		101818	0					
ANR	101822	Condition	t == Malloc	93:6:2688:2698	101818	0	True				
ANR	101823	EqualityExpression	t == Malloc		101818	0		==			
ANR	101824	Identifier	t		101818	0					
ANR	101825	Identifier	Malloc		101818	1					
ANR	101826	ExpressionStatement	do_malloc ( )	94:4:2705:2716	101818	1	True				
ANR	101827	CallExpression	do_malloc ( )		101818	0					
ANR	101828	Callee	do_malloc		101818	0					
ANR	101829	Identifier	do_malloc		101818	0					
ANR	101830	ArgumentList			101818	1					
ANR	101831	ElseStatement	else		101818	0					
ANR	101832	IfStatement	if ( t == Div0 )		101818	0					
ANR	101833	Condition	t == Div0	95:11:2729:2737	101818	0	True				
ANR	101834	EqualityExpression	t == Div0		101818	0		==			
ANR	101835	Identifier	t		101818	0					
ANR	101836	Identifier	Div0		101818	1					
ANR	101837	ExpressionStatement	do_div0 ( )	96:4:2744:2753	101818	1	True				
ANR	101838	CallExpression	do_div0 ( )		101818	0					
ANR	101839	Callee	do_div0		101818	0					
ANR	101840	Identifier	do_div0		101818	0					
ANR	101841	ArgumentList			101818	1					
ANR	101842	ElseStatement	else		101818	0					
ANR	101843	IfStatement	if ( t == Assert )		101818	0					
ANR	101844	Condition	t == Assert	97:11:2766:2776	101818	0	True				
ANR	101845	EqualityExpression	t == Assert		101818	0		==			
ANR	101846	Identifier	t		101818	0					
ANR	101847	Identifier	Assert		101818	1					
ANR	101848	ExpressionStatement	do_assert ( )	98:4:2783:2794	101818	1	True				
ANR	101849	CallExpression	do_assert ( )		101818	0					
ANR	101850	Callee	do_assert		101818	0					
ANR	101851	Identifier	do_assert		101818	0					
ANR	101852	ArgumentList			101818	1					
ANR	101853	ElseStatement	else		101818	0					
ANR	101854	IfStatement	if ( t == QAssert )		101818	0					
ANR	101855	Condition	t == QAssert	99:11:2807:2818	101818	0	True				
ANR	101856	EqualityExpression	t == QAssert		101818	0		==			
ANR	101857	Identifier	t		101818	0					
ANR	101858	Identifier	QAssert		101818	1					
ANR	101859	ExpressionStatement	do_qassert ( )	100:4:2825:2837	101818	1	True				
ANR	101860	CallExpression	do_qassert ( )		101818	0					
ANR	101861	Callee	do_qassert		101818	0					
ANR	101862	Identifier	do_qassert		101818	0					
ANR	101863	ArgumentList			101818	1					
ANR	101864	ElseStatement	else		101818	0					
ANR	101865	IfStatement	if ( t == Threads )		101818	0					
ANR	101866	Condition	t == Threads	101:11:2850:2861	101818	0	True				
ANR	101867	EqualityExpression	t == Threads		101818	0		==			
ANR	101868	Identifier	t		101818	0					
ANR	101869	Identifier	Threads		101818	1					
ANR	101870	ExpressionStatement	do_threads ( )	102:4:2868:2880	101818	1	True				
ANR	101871	CallExpression	do_threads ( )		101818	0					
ANR	101872	Callee	do_threads		101818	0					
ANR	101873	Identifier	do_threads		101818	0					
ANR	101874	ArgumentList			101818	1					
ANR	101875	ElseStatement	else		101818	0					
ANR	101876	ExpressionStatement	do_crash ( )	104:4:2893:2903	101818	0	True				
ANR	101877	CallExpression	do_crash ( )		101818	0					
ANR	101878	Callee	do_crash		101818	0					
ANR	101879	Identifier	do_crash		101818	0					
ANR	101880	ArgumentList			101818	1					
ANR	101881	ReturnType	void		101818	1					
ANR	101882	Identifier	level4		101818	2					
ANR	101883	ParameterList	int t		101818	3					
ANR	101884	Parameter	int t	91:12:2673:2677	101818	0	True				
ANR	101885	ParameterType	int		101818	0					
ANR	101886	Identifier	t		101818	1					
ANR	101887	CFGEntryNode	ENTRY		101818		True				
ANR	101888	CFGExitNode	EXIT		101818		True				
ANR	101889	Symbol	Threads		101818						
ANR	101890	Symbol	Assert		101818						
ANR	101891	Symbol	t		101818						
ANR	101892	Symbol	Malloc		101818						
ANR	101893	Symbol	QAssert		101818						
ANR	101894	Symbol	Div0		101818						
ANR	101895	Function	level3	107:0:2908:2942							
ANR	101896	FunctionDef	level3 (int t)		101895	0					
ANR	101897	CompoundStatement		108:0:2927:2942	101895	0					
ANR	101898	ExpressionStatement	level4 ( t )	109:2:2931:2940	101895	0	True				
ANR	101899	CallExpression	level4 ( t )		101895	0					
ANR	101900	Callee	level4		101895	0					
ANR	101901	Identifier	level4		101895	0					
ANR	101902	ArgumentList	t		101895	1					
ANR	101903	Argument	t		101895	0					
ANR	101904	Identifier	t		101895	0					
ANR	101905	ReturnType	void		101895	1					
ANR	101906	Identifier	level3		101895	2					
ANR	101907	ParameterList	int t		101895	3					
ANR	101908	Parameter	int t	107:12:2920:2924	101895	0	True				
ANR	101909	ParameterType	int		101895	0					
ANR	101910	Identifier	t		101895	1					
ANR	101911	CFGEntryNode	ENTRY		101895		True				
ANR	101912	CFGExitNode	EXIT		101895		True				
ANR	101913	Symbol	t		101895						
ANR	101914	Function	level2	112:0:2945:2979							
ANR	101915	FunctionDef	level2 (int t)		101914	0					
ANR	101916	CompoundStatement		113:0:2964:2979	101914	0					
ANR	101917	ExpressionStatement	level3 ( t )	114:2:2968:2977	101914	0	True				
ANR	101918	CallExpression	level3 ( t )		101914	0					
ANR	101919	Callee	level3		101914	0					
ANR	101920	Identifier	level3		101914	0					
ANR	101921	ArgumentList	t		101914	1					
ANR	101922	Argument	t		101914	0					
ANR	101923	Identifier	t		101914	0					
ANR	101924	ReturnType	void		101914	1					
ANR	101925	Identifier	level2		101914	2					
ANR	101926	ParameterList	int t		101914	3					
ANR	101927	Parameter	int t	112:12:2957:2961	101914	0	True				
ANR	101928	ParameterType	int		101914	0					
ANR	101929	Identifier	t		101914	1					
ANR	101930	CFGEntryNode	ENTRY		101914		True				
ANR	101931	CFGExitNode	EXIT		101914		True				
ANR	101932	Symbol	t		101914						
ANR	101933	Function	level1	117:0:2982:3016							
ANR	101934	FunctionDef	level1 (int t)		101933	0					
ANR	101935	CompoundStatement		118:0:3001:3016	101933	0					
ANR	101936	ExpressionStatement	level2 ( t )	119:2:3005:3014	101933	0	True				
ANR	101937	CallExpression	level2 ( t )		101933	0					
ANR	101938	Callee	level2		101933	0					
ANR	101939	Identifier	level2		101933	0					
ANR	101940	ArgumentList	t		101933	1					
ANR	101941	Argument	t		101933	0					
ANR	101942	Identifier	t		101933	0					
ANR	101943	ReturnType	void		101933	1					
ANR	101944	Identifier	level1		101933	2					
ANR	101945	ParameterList	int t		101933	3					
ANR	101946	Parameter	int t	117:12:2994:2998	101933	0	True				
ANR	101947	ParameterType	int		101933	0					
ANR	101948	Identifier	t		101933	1					
ANR	101949	CFGEntryNode	ENTRY		101933		True				
ANR	101950	CFGExitNode	EXIT		101933		True				
ANR	101951	Symbol	t		101933						
ANR	101952	Function	main	122:0:3019:4444							
ANR	101953	FunctionDef	"main (int argc , char * argv [ ])"		101952	0					
ANR	101954	CompoundStatement		123:0:3052:4444	101952	0					
ANR	101955	IdentifierDeclStatement	"QApplication app ( argc , argv ) ;"	124:2:3056:3084	101952	0	True				
ANR	101956	IdentifierDecl	"app ( argc , argv )"		101952	0					
ANR	101957	IdentifierDeclType	QApplication		101952	0					
ANR	101958	Identifier	app		101952	1					
ANR	101959	Expression	"argc , argv"		101952	2					
ANR	101960	Identifier	argc		101952	0					
ANR	101961	Identifier	argv		101952	1					
ANR	101962	IdentifierDeclStatement	"KAboutData aboutData ( QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" ) ) ;"	125:2:3088:3386	101952	1	True				
ANR	101963	IdentifierDecl	"aboutData ( QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" ) )"		101952	0					
ANR	101964	IdentifierDeclType	KAboutData		101952	0					
ANR	101965	Identifier	aboutData		101952	1					
ANR	101966	Expression	"QStringLiteral ( ""crashtext"" ) , i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	2					
ANR	101967	CallExpression	"QStringLiteral ( ""crashtext"" )"		101952	0					
ANR	101968	Callee	QStringLiteral		101952	0					
ANR	101969	Identifier	QStringLiteral		101952	0					
ANR	101970	ArgumentList	"""crashtext"""		101952	1					
ANR	101971	Argument	"""crashtext"""		101952	0					
ANR	101972	PrimaryExpression	"""crashtext"""		101952	0					
ANR	101973	Expression	"i18n ( ""Crash Test for DrKonqi"" ) , QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	1					
ANR	101974	CallExpression	"i18n ( ""Crash Test for DrKonqi"" )"		101952	0					
ANR	101975	Callee	i18n		101952	0					
ANR	101976	Identifier	i18n		101952	0					
ANR	101977	ArgumentList	"""Crash Test for DrKonqi"""		101952	1					
ANR	101978	Argument	"""Crash Test for DrKonqi"""		101952	0					
ANR	101979	PrimaryExpression	"""Crash Test for DrKonqi"""		101952	0					
ANR	101980	Expression	"QStringLiteral ( ""1.1"" ) , i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	1					
ANR	101981	CallExpression	"QStringLiteral ( ""1.1"" )"		101952	0					
ANR	101982	Callee	QStringLiteral		101952	0					
ANR	101983	Identifier	QStringLiteral		101952	0					
ANR	101984	ArgumentList	"""1.1"""		101952	1					
ANR	101985	Argument	"""1.1"""		101952	0					
ANR	101986	PrimaryExpression	"""1.1"""		101952	0					
ANR	101987	Expression	"i18n ( ""Crash Test for DrKonqi"" ) , KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	1					
ANR	101988	CallExpression	"i18n ( ""Crash Test for DrKonqi"" )"		101952	0					
ANR	101989	Callee	i18n		101952	0					
ANR	101990	Identifier	i18n		101952	0					
ANR	101991	ArgumentList	"""Crash Test for DrKonqi"""		101952	1					
ANR	101992	Argument	"""Crash Test for DrKonqi"""		101952	0					
ANR	101993	PrimaryExpression	"""Crash Test for DrKonqi"""		101952	0					
ANR	101994	Expression	"KAboutLicense :: GPL , i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	1					
ANR	101995	Identifier	KAboutLicense :: GPL		101952	0					
ANR	101996	CallExpression	"i18n ( ""(c) 2000-2002 David Faure, Waldo Bastian"" )"		101952	1					
ANR	101997	Callee	i18n		101952	0					
ANR	101998	Identifier	i18n		101952	0					
ANR	101999	ArgumentList	"""(c) 2000-2002 David Faure, Waldo Bastian"""		101952	1					
ANR	102000	Argument	"""(c) 2000-2002 David Faure, Waldo Bastian"""		101952	0					
ANR	102001	PrimaryExpression	"""(c) 2000-2002 David Faure, Waldo Bastian"""		101952	0					
ANR	102002	IdentifierDeclStatement	QCommandLineParser parser ;	131:2:3391:3416	101952	2	True				
ANR	102003	IdentifierDecl	parser		101952	0					
ANR	102004	IdentifierDeclType	QCommandLineParser		101952	0					
ANR	102005	Identifier	parser		101952	1					
ANR	102006	ExpressionStatement	"parser . addOption ( QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) ) )"	132:2:3420:3518	101952	3	True				
ANR	102007	CallExpression	"parser . addOption ( QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) ) )"		101952	0					
ANR	102008	Callee	parser . addOption		101952	0					
ANR	102009	MemberAccess	parser . addOption		101952	0					
ANR	102010	Identifier	parser		101952	0					
ANR	102011	Identifier	addOption		101952	1					
ANR	102012	ArgumentList	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		101952	1					
ANR	102013	Argument	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		101952	0					
ANR	102014	CallExpression	"QCommandLineOption ( QStringLiteral ( ""autorestart"" ) , i18n ( ""Automatically restart"" ) )"		101952	0					
ANR	102015	Callee	QCommandLineOption		101952	0					
ANR	102016	Identifier	QCommandLineOption		101952	0					
ANR	102017	ArgumentList	"QStringLiteral ( ""autorestart"" )"		101952	1					
ANR	102018	Argument	"QStringLiteral ( ""autorestart"" )"		101952	0					
ANR	102019	CallExpression	"QStringLiteral ( ""autorestart"" )"		101952	0					
ANR	102020	Callee	QStringLiteral		101952	0					
ANR	102021	Identifier	QStringLiteral		101952	0					
ANR	102022	ArgumentList	"""autorestart"""		101952	1					
ANR	102023	Argument	"""autorestart"""		101952	0					
ANR	102024	PrimaryExpression	"""autorestart"""		101952	0					
ANR	102025	Argument	"i18n ( ""Automatically restart"" )"		101952	1					
ANR	102026	CallExpression	"i18n ( ""Automatically restart"" )"		101952	0					
ANR	102027	Callee	i18n		101952	0					
ANR	102028	Identifier	i18n		101952	0					
ANR	102029	ArgumentList	"""Automatically restart"""		101952	1					
ANR	102030	Argument	"""Automatically restart"""		101952	0					
ANR	102031	PrimaryExpression	"""Automatically restart"""		101952	0					
ANR	102032	ExpressionStatement	"parser . addPositionalArgument ( QStringLiteral ( ""type"" ) , i18n ( ""Type of crash."" ) , QStringLiteral ( ""crash|malloc|div0|assert|threads"" ) )"	133:2:3522:3650	101952	4	True				
ANR	102033	CallExpression	"parser . addPositionalArgument ( QStringLiteral ( ""type"" ) , i18n ( ""Type of crash."" ) , QStringLiteral ( ""crash|malloc|div0|assert|threads"" ) )"		101952	0					
ANR	102034	Callee	parser . addPositionalArgument		101952	0					
ANR	102035	MemberAccess	parser . addPositionalArgument		101952	0					
ANR	102036	Identifier	parser		101952	0					
ANR	102037	Identifier	addPositionalArgument		101952	1					
ANR	102038	ArgumentList	"QStringLiteral ( ""type"" )"		101952	1					
ANR	102039	Argument	"QStringLiteral ( ""type"" )"		101952	0					
ANR	102040	CallExpression	"QStringLiteral ( ""type"" )"		101952	0					
ANR	102041	Callee	QStringLiteral		101952	0					
ANR	102042	Identifier	QStringLiteral		101952	0					
ANR	102043	ArgumentList	"""type"""		101952	1					
ANR	102044	Argument	"""type"""		101952	0					
ANR	102045	PrimaryExpression	"""type"""		101952	0					
ANR	102046	Argument	"i18n ( ""Type of crash."" )"		101952	1					
ANR	102047	CallExpression	"i18n ( ""Type of crash."" )"		101952	0					
ANR	102048	Callee	i18n		101952	0					
ANR	102049	Identifier	i18n		101952	0					
ANR	102050	ArgumentList	"""Type of crash."""		101952	1					
ANR	102051	Argument	"""Type of crash."""		101952	0					
ANR	102052	PrimaryExpression	"""Type of crash."""		101952	0					
ANR	102053	Argument	"QStringLiteral ( ""crash|malloc|div0|assert|threads"" )"		101952	2					
ANR	102054	CallExpression	"QStringLiteral ( ""crash|malloc|div0|assert|threads"" )"		101952	0					
ANR	102055	Callee	QStringLiteral		101952	0					
ANR	102056	Identifier	QStringLiteral		101952	0					
ANR	102057	ArgumentList	"""crash|malloc|div0|assert|threads"""		101952	1					
ANR	102058	Argument	"""crash|malloc|div0|assert|threads"""		101952	0					
ANR	102059	PrimaryExpression	"""crash|malloc|div0|assert|threads"""		101952	0					
ANR	102060	ExpressionStatement	aboutData . setupCommandLine ( & parser )	134:2:3654:3689	101952	5	True				
ANR	102061	CallExpression	aboutData . setupCommandLine ( & parser )		101952	0					
ANR	102062	Callee	aboutData . setupCommandLine		101952	0					
ANR	102063	MemberAccess	aboutData . setupCommandLine		101952	0					
ANR	102064	Identifier	aboutData		101952	0					
ANR	102065	Identifier	setupCommandLine		101952	1					
ANR	102066	ArgumentList	& parser		101952	1					
ANR	102067	Argument	& parser		101952	0					
ANR	102068	UnaryOperationExpression	& parser		101952	0					
ANR	102069	UnaryOperator	&		101952	0					
ANR	102070	Identifier	parser		101952	1					
ANR	102071	ExpressionStatement	parser . process ( app )	135:2:3693:3712	101952	6	True				
ANR	102072	CallExpression	parser . process ( app )		101952	0					
ANR	102073	Callee	parser . process		101952	0					
ANR	102074	MemberAccess	parser . process		101952	0					
ANR	102075	Identifier	parser		101952	0					
ANR	102076	Identifier	process		101952	1					
ANR	102077	ArgumentList	app		101952	1					
ANR	102078	Argument	app		101952	0					
ANR	102079	Identifier	app		101952	0					
ANR	102080	ExpressionStatement	aboutData . processCommandLine ( & parser )	136:2:3716:3753	101952	7	True				
ANR	102081	CallExpression	aboutData . processCommandLine ( & parser )		101952	0					
ANR	102082	Callee	aboutData . processCommandLine		101952	0					
ANR	102083	MemberAccess	aboutData . processCommandLine		101952	0					
ANR	102084	Identifier	aboutData		101952	0					
ANR	102085	Identifier	processCommandLine		101952	1					
ANR	102086	ArgumentList	& parser		101952	1					
ANR	102087	Argument	& parser		101952	0					
ANR	102088	UnaryOperationExpression	& parser		101952	0					
ANR	102089	UnaryOperator	&		101952	0					
ANR	102090	Identifier	parser		101952	1					
ANR	102091	IdentifierDeclStatement	KCrash :: CrashFlags flags = KCrash :: AlwaysDirectly ;	139:2:3830:3879	101952	8	True				
ANR	102092	IdentifierDecl	flags = KCrash :: AlwaysDirectly		101952	0					
ANR	102093	IdentifierDeclType	KCrash :: CrashFlags		101952	0					
ANR	102094	Identifier	flags		101952	1					
ANR	102095	AssignmentExpression	flags = KCrash :: AlwaysDirectly		101952	2		=			
ANR	102096	Identifier	KCrash :: AlwaysDirectly		101952	0					
ANR	102097	Identifier	KCrash :: AlwaysDirectly		101952	1					
ANR	102098	IfStatement	"if ( parser . isSet ( QStringLiteral ( ""autorestart"" ) ) )"		101952	9					
ANR	102099	Condition	"parser . isSet ( QStringLiteral ( ""autorestart"" ) )"	140:6:3887:3929	101952	0	True				
ANR	102100	CallExpression	"parser . isSet ( QStringLiteral ( ""autorestart"" ) )"		101952	0					
ANR	102101	Callee	parser . isSet		101952	0					
ANR	102102	MemberAccess	parser . isSet		101952	0					
ANR	102103	Identifier	parser		101952	0					
ANR	102104	Identifier	isSet		101952	1					
ANR	102105	ArgumentList	"QStringLiteral ( ""autorestart"" )"		101952	1					
ANR	102106	Argument	"QStringLiteral ( ""autorestart"" )"		101952	0					
ANR	102107	CallExpression	"QStringLiteral ( ""autorestart"" )"		101952	0					
ANR	102108	Callee	QStringLiteral		101952	0					
ANR	102109	Identifier	QStringLiteral		101952	0					
ANR	102110	ArgumentList	"""autorestart"""		101952	1					
ANR	102111	Argument	"""autorestart"""		101952	0					
ANR	102112	PrimaryExpression	"""autorestart"""		101952	0					
ANR	102113	ExpressionStatement	flags |= KCrash :: AutoRestart	141:4:3936:3964	101952	1	True				
ANR	102114	AssignmentExpression	flags |= KCrash :: AutoRestart		101952	0		|=			
ANR	102115	Identifier	flags		101952	0					
ANR	102116	Identifier	KCrash :: AutoRestart		101952	1					
ANR	102117	ExpressionStatement	KCrash :: setFlags ( flags )	142:2:3968:3991	101952	10	True				
ANR	102118	CallExpression	KCrash :: setFlags ( flags )		101952	0					
ANR	102119	Callee	KCrash :: setFlags		101952	0					
ANR	102120	Identifier	KCrash :: setFlags		101952	0					
ANR	102121	ArgumentList	flags		101952	1					
ANR	102122	Argument	flags		101952	0					
ANR	102123	Identifier	flags		101952	0					
ANR	102124	IdentifierDeclStatement	QByteArray type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( ) ;	144:2:3996:4115	101952	11	True				
ANR	102125	IdentifierDecl	type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		101952	0					
ANR	102126	IdentifierDeclType	QByteArray		101952	0					
ANR	102127	Identifier	type		101952	1					
ANR	102128	AssignmentExpression	type = parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		101952	2		=			
ANR	102129	Identifier	type		101952	0					
ANR	102130	ConditionalExpression	parser . positionalArguments ( ) . isEmpty ( ) ? QByteArray ( ) : parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		101952	1					
ANR	102131	Condition	parser . positionalArguments ( ) . isEmpty ( )		101952	0					
ANR	102132	CallExpression	parser . positionalArguments ( ) . isEmpty ( )		101952	0					
ANR	102133	Callee	parser . positionalArguments ( ) . isEmpty		101952	0					
ANR	102134	MemberAccess	parser . positionalArguments ( ) . isEmpty		101952	0					
ANR	102135	CallExpression	parser . positionalArguments ( )		101952	0					
ANR	102136	Callee	parser . positionalArguments		101952	0					
ANR	102137	MemberAccess	parser . positionalArguments		101952	0					
ANR	102138	Identifier	parser		101952	0					
ANR	102139	Identifier	positionalArguments		101952	1					
ANR	102140	ArgumentList			101952	1					
ANR	102141	Identifier	isEmpty		101952	1					
ANR	102142	ArgumentList			101952	1					
ANR	102143	CallExpression	QByteArray ( )		101952	1					
ANR	102144	Callee	QByteArray		101952	0					
ANR	102145	Identifier	QByteArray		101952	0					
ANR	102146	ArgumentList			101952	1					
ANR	102147	CallExpression	parser . positionalArguments ( ) . first ( ) . toUtf8 ( )		101952	2					
ANR	102148	Callee	parser . positionalArguments ( ) . first ( ) . toUtf8		101952	0					
ANR	102149	MemberAccess	parser . positionalArguments ( ) . first ( ) . toUtf8		101952	0					
ANR	102150	CallExpression	parser . positionalArguments ( ) . first ( )		101952	0					
ANR	102151	Callee	parser . positionalArguments ( ) . first		101952	0					
ANR	102152	MemberAccess	parser . positionalArguments ( ) . first		101952	0					
ANR	102153	CallExpression	parser . positionalArguments ( )		101952	0					
ANR	102154	Callee	parser . positionalArguments		101952	0					
ANR	102155	MemberAccess	parser . positionalArguments		101952	0					
ANR	102156	Identifier	parser		101952	0					
ANR	102157	Identifier	positionalArguments		101952	1					
ANR	102158	ArgumentList			101952	1					
ANR	102159	Identifier	first		101952	1					
ANR	102160	ArgumentList			101952	1					
ANR	102161	Identifier	toUtf8		101952	1					
ANR	102162	ArgumentList			101952	1					
ANR	102163	IdentifierDeclStatement	int crashtype = Crash ;	145:2:4119:4140	101952	12	True				
ANR	102164	IdentifierDecl	crashtype = Crash		101952	0					
ANR	102165	IdentifierDeclType	int		101952	0					
ANR	102166	Identifier	crashtype		101952	1					
ANR	102167	AssignmentExpression	crashtype = Crash		101952	2		=			
ANR	102168	Identifier	Crash		101952	0					
ANR	102169	Identifier	Crash		101952	1					
ANR	102170	IfStatement	"if ( type == ""malloc"" )"		101952	13					
ANR	102171	Condition	"type == ""malloc"""	146:6:4148:4163	101952	0	True				
ANR	102172	EqualityExpression	"type == ""malloc"""		101952	0		==			
ANR	102173	Identifier	type		101952	0					
ANR	102174	PrimaryExpression	"""malloc"""		101952	1					
ANR	102175	ExpressionStatement	crashtype = Malloc	147:4:4170:4188	101952	1	True				
ANR	102176	AssignmentExpression	crashtype = Malloc		101952	0		=			
ANR	102177	Identifier	crashtype		101952	0					
ANR	102178	Identifier	Malloc		101952	1					
ANR	102179	ElseStatement	else		101952	0					
ANR	102180	IfStatement	"if ( type == ""div0"" )"		101952	0					
ANR	102181	Condition	"type == ""div0"""	148:11:4201:4214	101952	0	True				
ANR	102182	EqualityExpression	"type == ""div0"""		101952	0		==			
ANR	102183	Identifier	type		101952	0					
ANR	102184	PrimaryExpression	"""div0"""		101952	1					
ANR	102185	ExpressionStatement	crashtype = Div0	149:4:4221:4237	101952	1	True				
ANR	102186	AssignmentExpression	crashtype = Div0		101952	0		=			
ANR	102187	Identifier	crashtype		101952	0					
ANR	102188	Identifier	Div0		101952	1					
ANR	102189	ElseStatement	else		101952	0					
ANR	102190	IfStatement	"if ( type == ""assert"" )"		101952	0					
ANR	102191	Condition	"type == ""assert"""	150:11:4250:4265	101952	0	True				
ANR	102192	EqualityExpression	"type == ""assert"""		101952	0		==			
ANR	102193	Identifier	type		101952	0					
ANR	102194	PrimaryExpression	"""assert"""		101952	1					
ANR	102195	ExpressionStatement	crashtype = Assert	151:4:4272:4290	101952	1	True				
ANR	102196	AssignmentExpression	crashtype = Assert		101952	0		=			
ANR	102197	Identifier	crashtype		101952	0					
ANR	102198	Identifier	Assert		101952	1					
ANR	102199	ElseStatement	else		101952	0					
ANR	102200	IfStatement	"if ( type == ""qassert"" )"		101952	0					
ANR	102201	Condition	"type == ""qassert"""	152:11:4303:4319	101952	0	True				
ANR	102202	EqualityExpression	"type == ""qassert"""		101952	0		==			
ANR	102203	Identifier	type		101952	0					
ANR	102204	PrimaryExpression	"""qassert"""		101952	1					
ANR	102205	ExpressionStatement	crashtype = QAssert	153:4:4326:4345	101952	1	True				
ANR	102206	AssignmentExpression	crashtype = QAssert		101952	0		=			
ANR	102207	Identifier	crashtype		101952	0					
ANR	102208	Identifier	QAssert		101952	1					
ANR	102209	ElseStatement	else		101952	0					
ANR	102210	IfStatement	"if ( type == ""threads"" )"		101952	0					
ANR	102211	Condition	"type == ""threads"""	154:11:4358:4374	101952	0	True				
ANR	102212	EqualityExpression	"type == ""threads"""		101952	0		==			
ANR	102213	Identifier	type		101952	0					
ANR	102214	PrimaryExpression	"""threads"""		101952	1					
ANR	102215	ExpressionStatement	crashtype = Threads	155:4:4381:4400	101952	1	True				
ANR	102216	AssignmentExpression	crashtype = Threads		101952	0		=			
ANR	102217	Identifier	crashtype		101952	0					
ANR	102218	Identifier	Threads		101952	1					
ANR	102219	ExpressionStatement	level1 ( crashtype )	156:2:4404:4421	101952	14	True				
ANR	102220	CallExpression	level1 ( crashtype )		101952	0					
ANR	102221	Callee	level1		101952	0					
ANR	102222	Identifier	level1		101952	0					
ANR	102223	ArgumentList	crashtype		101952	1					
ANR	102224	Argument	crashtype		101952	0					
ANR	102225	Identifier	crashtype		101952	0					
ANR	102226	ReturnStatement	return app . exec ( ) ;	157:2:4425:4442	101952	15	True				
ANR	102227	CallExpression	app . exec ( )		101952	0					
ANR	102228	Callee	app . exec		101952	0					
ANR	102229	MemberAccess	app . exec		101952	0					
ANR	102230	Identifier	app		101952	0					
ANR	102231	Identifier	exec		101952	1					
ANR	102232	ArgumentList			101952	1					
ANR	102233	ReturnType	int		101952	1					
ANR	102234	Identifier	main		101952	2					
ANR	102235	ParameterList	"int argc , char * argv [ ]"		101952	3					
ANR	102236	Parameter	int argc	122:9:3028:3035	101952	0	True				
ANR	102237	ParameterType	int		101952	0					
ANR	102238	Identifier	argc		101952	1					
ANR	102239	Parameter	char * argv [ ]	122:19:3038:3049	101952	1	True				
ANR	102240	ParameterType	char * [ ]		101952	0					
ANR	102241	Identifier	argv		101952	1					
ANR	102242	CFGEntryNode	ENTRY		101952		True				
ANR	102243	CFGExitNode	EXIT		101952		True				
ANR	102244	Symbol	& parser		101952						
ANR	102245	Symbol	crashtype		101952						
ANR	102246	Symbol	flags		101952						
ANR	102247	Symbol	aboutData		101952						
ANR	102248	Symbol	parser . positionalArguments ( ) . isEmpty		101952						
ANR	102249	Symbol	type		101952						
ANR	102250	Symbol	argv		101952						
ANR	102251	Symbol	QCommandLineOption		101952						
ANR	102252	Symbol	parser . positionalArguments		101952						
ANR	102253	Symbol	parser . positionalArguments ( ) . first		101952						
ANR	102254	Symbol	Assert		101952						
ANR	102255	Symbol	argc		101952						
ANR	102256	Symbol	app		101952						
ANR	102257	Symbol	Crash		101952						
ANR	102258	Symbol	app . exec		101952						
ANR	102259	Symbol	QByteArray		101952						
ANR	102260	Symbol	Malloc		101952						
ANR	102261	Symbol	parser . positionalArguments ( ) . first ( ) . toUtf8		101952						
ANR	102262	Symbol	i18n		101952						
ANR	102263	Symbol	parser . isSet		101952						
ANR	102264	Symbol	Threads		101952						
ANR	102265	Symbol	parser		101952						
ANR	102266	Symbol	KCrash :: AutoRestart		101952						
ANR	102267	Symbol	QAssert		101952						
ANR	102268	Symbol	QStringLiteral		101952						
ANR	102269	Symbol	KCrash :: AlwaysDirectly		101952						
ANR	102270	Symbol	Div0		101952						
