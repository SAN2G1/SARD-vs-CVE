command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	576531	File	data/converged/CVE-2018-6791_plasma-workspace/plasmawindowedcorona.cpp								
ANR	576532	Function	PlasmaWindowedCorona :: PlasmaWindowedCorona	30:1:1151:1611							
ANR	576533	FunctionDef	PlasmaWindowedCorona :: PlasmaWindowedCorona (QObject * parent)		576532	0					
ANR	576534	CompoundStatement		36:0:1329:1611	576532	0					
ANR	576535	IdentifierDeclStatement	"KPackage :: Package package = KPackage :: PackageLoader :: self ( ) -> loadPackage ( QStringLiteral ( ""Plasma/Shell"" ) ) ;"	37:4:1335:1439	576532	0	True				
ANR	576536	IdentifierDecl	"package = KPackage :: PackageLoader :: self ( ) -> loadPackage ( QStringLiteral ( ""Plasma/Shell"" ) )"		576532	0					
ANR	576537	IdentifierDeclType	KPackage :: Package		576532	0					
ANR	576538	Identifier	package		576532	1					
ANR	576539	AssignmentExpression	"package = KPackage :: PackageLoader :: self ( ) -> loadPackage ( QStringLiteral ( ""Plasma/Shell"" ) )"		576532	2		=			
ANR	576540	Identifier	package		576532	0					
ANR	576541	CallExpression	"KPackage :: PackageLoader :: self ( ) -> loadPackage ( QStringLiteral ( ""Plasma/Shell"" ) )"		576532	1					
ANR	576542	Callee	KPackage :: PackageLoader :: self ( ) -> loadPackage		576532	0					
ANR	576543	PtrMemberAccess	KPackage :: PackageLoader :: self ( ) -> loadPackage		576532	0					
ANR	576544	CallExpression	KPackage :: PackageLoader :: self ( )		576532	0					
ANR	576545	Callee	KPackage :: PackageLoader :: self		576532	0					
ANR	576546	Identifier	KPackage :: PackageLoader :: self		576532	0					
ANR	576547	ArgumentList			576532	1					
ANR	576548	Identifier	loadPackage		576532	1					
ANR	576549	ArgumentList	"QStringLiteral ( ""Plasma/Shell"" )"		576532	1					
ANR	576550	Argument	"QStringLiteral ( ""Plasma/Shell"" )"		576532	0					
ANR	576551	CallExpression	"QStringLiteral ( ""Plasma/Shell"" )"		576532	0					
ANR	576552	Callee	QStringLiteral		576532	0					
ANR	576553	Identifier	QStringLiteral		576532	0					
ANR	576554	ArgumentList	"""Plasma/Shell"""		576532	1					
ANR	576555	Argument	"""Plasma/Shell"""		576532	0					
ANR	576556	PrimaryExpression	"""Plasma/Shell"""		576532	0					
ANR	576557	ExpressionStatement	"package . setPath ( QStringLiteral ( ""org.kde.plasma.desktop"" ) )"	38:4:1445:1502	576532	1	True				
ANR	576558	CallExpression	"package . setPath ( QStringLiteral ( ""org.kde.plasma.desktop"" ) )"		576532	0					
ANR	576559	Callee	package . setPath		576532	0					
ANR	576560	MemberAccess	package . setPath		576532	0					
ANR	576561	Identifier	package		576532	0					
ANR	576562	Identifier	setPath		576532	1					
ANR	576563	ArgumentList	"QStringLiteral ( ""org.kde.plasma.desktop"" )"		576532	1					
ANR	576564	Argument	"QStringLiteral ( ""org.kde.plasma.desktop"" )"		576532	0					
ANR	576565	CallExpression	"QStringLiteral ( ""org.kde.plasma.desktop"" )"		576532	0					
ANR	576566	Callee	QStringLiteral		576532	0					
ANR	576567	Identifier	QStringLiteral		576532	0					
ANR	576568	ArgumentList	"""org.kde.plasma.desktop"""		576532	1					
ANR	576569	Argument	"""org.kde.plasma.desktop"""		576532	0					
ANR	576570	PrimaryExpression	"""org.kde.plasma.desktop"""		576532	0					
ANR	576571	ExpressionStatement	setKPackage ( package )	39:4:1508:1528	576532	2	True				
ANR	576572	CallExpression	setKPackage ( package )		576532	0					
ANR	576573	Callee	setKPackage		576532	0					
ANR	576574	Identifier	setKPackage		576532	0					
ANR	576575	ArgumentList	package		576532	1					
ANR	576576	Argument	package		576532	0					
ANR	576577	Identifier	package		576532	0					
ANR	576578	ExpressionStatement	load ( )	41:4:1603:1609	576532	3	True				
ANR	576579	CallExpression	load ( )		576532	0					
ANR	576580	Callee	load		576532	0					
ANR	576581	Identifier	load		576532	0					
ANR	576582	ArgumentList			576532	1					
ANR	576583	ReturnType	include < Plasma / PluginLoader >		576532	1					
ANR	576584	Identifier	PlasmaWindowedCorona :: PlasmaWindowedCorona		576532	2					
ANR	576585	ParameterList	QObject * parent		576532	3					
ANR	576586	Parameter	QObject * parent	32:43:1225:1239	576532	0	True				
ANR	576587	ParameterType	QObject *		576532	0					
ANR	576588	Identifier	parent		576532	1					
ANR	576589	CFGEntryNode	ENTRY		576532		True				
ANR	576590	CFGExitNode	EXIT		576532		True				
ANR	576591	Symbol	parent		576532						
ANR	576592	Symbol	KPackage :: PackageLoader :: self		576532						
ANR	576593	Symbol	package		576532						
ANR	576594	Symbol	* KPackage :: PackageLoader :: self		576532						
ANR	576595	Symbol	QStringLiteral		576532						
ANR	576596	Symbol	KPackage :: PackageLoader :: self ( ) -> loadPackage		576532						
ANR	576597	Function	PlasmaWindowedCorona :: loadApplet	44:0:1614:3597							
ANR	576598	FunctionDef	"PlasmaWindowedCorona :: loadApplet (const QString & applet , const QVariantList & arguments)"		576597	0					
ANR	576599	CompoundStatement		45:0:1706:3597	576597	0					
ANR	576600	IfStatement	if ( containments ( ) . isEmpty ( ) )		576597	0					
ANR	576601	Condition	containments ( ) . isEmpty ( )	46:8:1716:1739	576597	0	True				
ANR	576602	CallExpression	containments ( ) . isEmpty ( )		576597	0					
ANR	576603	Callee	containments ( ) . isEmpty		576597	0					
ANR	576604	MemberAccess	containments ( ) . isEmpty		576597	0					
ANR	576605	CallExpression	containments ( )		576597	0					
ANR	576606	Callee	containments		576597	0					
ANR	576607	Identifier	containments		576597	0					
ANR	576608	ArgumentList			576597	1					
ANR	576609	Identifier	isEmpty		576597	1					
ANR	576610	ArgumentList			576597	1					
ANR	576611	CompoundStatement		2:34:35:35	576597	1					
ANR	576612	ReturnStatement	return ;	47:8:1752:1758	576597	0	True				
ANR	576613	IdentifierDeclStatement	Plasma :: Containment * cont = containments ( ) . first ( ) ;	50:4:1771:1821	576597	1	True				
ANR	576614	IdentifierDecl	* cont = containments ( ) . first ( )		576597	0					
ANR	576615	IdentifierDeclType	Plasma :: Containment *		576597	0					
ANR	576616	Identifier	cont		576597	1					
ANR	576617	AssignmentExpression	* cont = containments ( ) . first ( )		576597	2		=			
ANR	576618	Identifier	cont		576597	0					
ANR	576619	CallExpression	containments ( ) . first ( )		576597	1					
ANR	576620	Callee	containments ( ) . first		576597	0					
ANR	576621	MemberAccess	containments ( ) . first		576597	0					
ANR	576622	CallExpression	containments ( )		576597	0					
ANR	576623	Callee	containments		576597	0					
ANR	576624	Identifier	containments		576597	0					
ANR	576625	ArgumentList			576597	1					
ANR	576626	Identifier	first		576597	1					
ANR	576627	ArgumentList			576597	1					
ANR	576628	Statement	for	53:4:1925:1927	576597	2	True				
ANR	576629	Statement	(	53:8:1929:1929	576597	3	True				
ANR	576630	Statement	Plasma	53:9:1930:1935	576597	4	True				
ANR	576631	Statement	::	53:15:1936:1937	576597	5	True				
ANR	576632	Statement	Applet	53:17:1938:1943	576597	6	True				
ANR	576633	Statement	*	53:24:1945:1945	576597	7	True				
ANR	576634	Label	a :	53:25:1946:1948	576597	8	True				
ANR	576635	Identifier	a		576597	0					
ANR	576636	Statement	cont	53:29:1950:1953	576597	9	True				
ANR	576637	Statement	->	53:33:1954:1955	576597	10	True				
ANR	576638	Statement	applets	53:35:1956:1962	576597	11	True				
ANR	576639	Statement	(	53:42:1963:1963	576597	12	True				
ANR	576640	Statement	)	53:43:1964:1964	576597	13	True				
ANR	576641	Statement	)	53:44:1965:1965	576597	14	True				
ANR	576642	CompoundStatement		9:46:260:260	576597	15					
ANR	576643	IfStatement	if ( a -> pluginInfo ( ) . pluginName ( ) == applet )		576597	0					
ANR	576644	Condition	a -> pluginInfo ( ) . pluginName ( ) == applet	54:12:1981:2018	576597	0	True				
ANR	576645	EqualityExpression	a -> pluginInfo ( ) . pluginName ( ) == applet		576597	0		==			
ANR	576646	CallExpression	a -> pluginInfo ( ) . pluginName ( )		576597	0					
ANR	576647	Callee	a -> pluginInfo ( ) . pluginName		576597	0					
ANR	576648	MemberAccess	a -> pluginInfo ( ) . pluginName		576597	0					
ANR	576649	CallExpression	a -> pluginInfo ( )		576597	0					
ANR	576650	Callee	a -> pluginInfo		576597	0					
ANR	576651	PtrMemberAccess	a -> pluginInfo		576597	0					
ANR	576652	Identifier	a		576597	0					
ANR	576653	Identifier	pluginInfo		576597	1					
ANR	576654	ArgumentList			576597	1					
ANR	576655	Identifier	pluginName		576597	1					
ANR	576656	ArgumentList			576597	1					
ANR	576657	Identifier	applet		576597	1					
ANR	576658	CompoundStatement		10:52:314:314	576597	1					
ANR	576659	ReturnStatement	return ;	55:12:2035:2041	576597	0	True				
ANR	576660	IdentifierDeclStatement	PlasmaWindowedView * v = new PlasmaWindowedView ( ) ;	58:4:2063:2111	576597	16	True				
ANR	576661	IdentifierDecl	* v = new PlasmaWindowedView ( )		576597	0					
ANR	576662	IdentifierDeclType	PlasmaWindowedView *		576597	0					
ANR	576663	Identifier	v		576597	1					
ANR	576664	AssignmentExpression	* v = new PlasmaWindowedView ( )		576597	2		=			
ANR	576665	Identifier	v		576597	0					
ANR	576666	UnaryExpression	new PlasmaWindowedView ( )		576597	1					
ANR	576667	ExpressionStatement	v -> setHasStatusNotifier ( m_hasStatusNotifier )	59:4:2117:2161	576597	17	True				
ANR	576668	CallExpression	v -> setHasStatusNotifier ( m_hasStatusNotifier )		576597	0					
ANR	576669	Callee	v -> setHasStatusNotifier		576597	0					
ANR	576670	PtrMemberAccess	v -> setHasStatusNotifier		576597	0					
ANR	576671	Identifier	v		576597	0					
ANR	576672	Identifier	setHasStatusNotifier		576597	1					
ANR	576673	ArgumentList	m_hasStatusNotifier		576597	1					
ANR	576674	Argument	m_hasStatusNotifier		576597	0					
ANR	576675	Identifier	m_hasStatusNotifier		576597	0					
ANR	576676	ExpressionStatement	v -> show ( )	60:4:2167:2176	576597	18	True				
ANR	576677	CallExpression	v -> show ( )		576597	0					
ANR	576678	Callee	v -> show		576597	0					
ANR	576679	PtrMemberAccess	v -> show		576597	0					
ANR	576680	Identifier	v		576597	0					
ANR	576681	Identifier	show		576597	1					
ANR	576682	ArgumentList			576597	1					
ANR	576683	IdentifierDeclStatement	"KConfigGroup appletsGroup ( KSharedConfig :: openConfig ( ) , ""Applets"" ) ;"	62:4:2183:2248	576597	19	True				
ANR	576684	IdentifierDecl	"appletsGroup ( KSharedConfig :: openConfig ( ) , ""Applets"" )"		576597	0					
ANR	576685	IdentifierDeclType	KConfigGroup		576597	0					
ANR	576686	Identifier	appletsGroup		576597	1					
ANR	576687	Expression	"KSharedConfig :: openConfig ( ) , ""Applets"""		576597	2					
ANR	576688	CallExpression	KSharedConfig :: openConfig ( )		576597	0					
ANR	576689	Callee	KSharedConfig :: openConfig		576597	0					
ANR	576690	Identifier	KSharedConfig :: openConfig		576597	0					
ANR	576691	ArgumentList			576597	1					
ANR	576692	PrimaryExpression	"""Applets"""		576597	1					
ANR	576693	IdentifierDeclStatement	QString plugin ;	63:4:2254:2268	576597	20	True				
ANR	576694	IdentifierDecl	plugin		576597	0					
ANR	576695	IdentifierDeclType	QString		576597	0					
ANR	576696	Identifier	plugin		576597	1					
ANR	576697	Statement	for	64:4:2274:2276	576597	21	True				
ANR	576698	Statement	(	64:8:2278:2278	576597	22	True				
ANR	576699	Statement	const	64:9:2279:2283	576597	23	True				
ANR	576700	Statement	QString	64:15:2285:2291	576597	24	True				
ANR	576701	Statement	&	64:23:2293:2293	576597	25	True				
ANR	576702	Label	group :	64:24:2294:2300	576597	26	True				
ANR	576703	Identifier	group		576597	0					
ANR	576704	Statement	appletsGroup	64:32:2302:2313	576597	27	True				
ANR	576705	Statement	.	64:44:2314:2314	576597	28	True				
ANR	576706	Statement	groupList	64:45:2315:2323	576597	29	True				
ANR	576707	Statement	(	64:54:2324:2324	576597	30	True				
ANR	576708	Statement	)	64:55:2325:2325	576597	31	True				
ANR	576709	Statement	)	64:56:2326:2326	576597	32	True				
ANR	576710	CompoundStatement		21:8:631:668	576597	33					
ANR	576711	IdentifierDeclStatement	"KConfigGroup cg ( & appletsGroup , group ) ;"	65:8:2338:2375	576597	0	True				
ANR	576712	IdentifierDecl	"cg ( & appletsGroup , group )"		576597	0					
ANR	576713	IdentifierDeclType	KConfigGroup		576597	0					
ANR	576714	Identifier	cg		576597	1					
ANR	576715	Expression	"& appletsGroup , group"		576597	2					
ANR	576716	UnaryOperationExpression	& appletsGroup		576597	0					
ANR	576717	UnaryOperator	&		576597	0					
ANR	576718	Identifier	appletsGroup		576597	1					
ANR	576719	Identifier	group		576597	1					
ANR	576720	ExpressionStatement	"plugin = cg . readEntry ( ""plugin"" , QString ( ) )"	66:8:2385:2427	576597	1	True				
ANR	576721	AssignmentExpression	"plugin = cg . readEntry ( ""plugin"" , QString ( ) )"		576597	0		=			
ANR	576722	Identifier	plugin		576597	0					
ANR	576723	CallExpression	"cg . readEntry ( ""plugin"" , QString ( ) )"		576597	1					
ANR	576724	Callee	cg . readEntry		576597	0					
ANR	576725	MemberAccess	cg . readEntry		576597	0					
ANR	576726	Identifier	cg		576597	0					
ANR	576727	Identifier	readEntry		576597	1					
ANR	576728	ArgumentList	"""plugin"""		576597	1					
ANR	576729	Argument	"""plugin"""		576597	0					
ANR	576730	PrimaryExpression	"""plugin"""		576597	0					
ANR	576731	Argument	QString ( )		576597	1					
ANR	576732	CallExpression	QString ( )		576597	0					
ANR	576733	Callee	QString		576597	0					
ANR	576734	Identifier	QString		576597	0					
ANR	576735	ArgumentList			576597	1					
ANR	576736	IfStatement	if ( plugin == applet )		576597	2					
ANR	576737	Condition	plugin == applet	68:12:2442:2457	576597	0	True				
ANR	576738	EqualityExpression	plugin == applet		576597	0		==			
ANR	576739	Identifier	plugin		576597	0					
ANR	576740	Identifier	applet		576597	1					
ANR	576741	CompoundStatement		36:12:1278:1308	576597	1					
ANR	576742	IdentifierDeclStatement	"Plasma :: Applet * a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , group . toInt ( ) , arguments ) ;"	69:12:2474:2568	576597	0	True				
ANR	576743	IdentifierDecl	"* a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , group . toInt ( ) , arguments )"		576597	0					
ANR	576744	IdentifierDeclType	Plasma :: Applet *		576597	0					
ANR	576745	Identifier	a		576597	1					
ANR	576746	AssignmentExpression	"* a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , group . toInt ( ) , arguments )"		576597	2		=			
ANR	576747	Identifier	a		576597	0					
ANR	576748	CallExpression	"Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , group . toInt ( ) , arguments )"		576597	1					
ANR	576749	Callee	Plasma :: PluginLoader :: self ( ) -> loadApplet		576597	0					
ANR	576750	PtrMemberAccess	Plasma :: PluginLoader :: self ( ) -> loadApplet		576597	0					
ANR	576751	CallExpression	Plasma :: PluginLoader :: self ( )		576597	0					
ANR	576752	Callee	Plasma :: PluginLoader :: self		576597	0					
ANR	576753	Identifier	Plasma :: PluginLoader :: self		576597	0					
ANR	576754	ArgumentList			576597	1					
ANR	576755	Identifier	loadApplet		576597	1					
ANR	576756	ArgumentList	applet		576597	1					
ANR	576757	Argument	applet		576597	0					
ANR	576758	Identifier	applet		576597	0					
ANR	576759	Argument	group . toInt ( )		576597	1					
ANR	576760	CallExpression	group . toInt ( )		576597	0					
ANR	576761	Callee	group . toInt		576597	0					
ANR	576762	MemberAccess	group . toInt		576597	0					
ANR	576763	Identifier	group		576597	0					
ANR	576764	Identifier	toInt		576597	1					
ANR	576765	ArgumentList			576597	1					
ANR	576766	Argument	arguments		576597	2					
ANR	576767	Identifier	arguments		576597	0					
ANR	576768	IfStatement	if ( ! a )		576597	1					
ANR	576769	Condition	! a	70:16:2586:2587	576597	0	True				
ANR	576770	UnaryOperationExpression	! a		576597	0					
ANR	576771	UnaryOperator	!		576597	0					
ANR	576772	Identifier	a		576597	1					
ANR	576773	CompoundStatement		26:20:883:883	576597	1					
ANR	576774	ExpressionStatement	"qWarning ( ) << ""Unable to load applet"" << applet << ""with arguments"" << arguments"	71:16:2608:2687	576597	0	True				
ANR	576775	ShiftExpression	"qWarning ( ) << ""Unable to load applet"" << applet << ""with arguments"" << arguments"		576597	0		<<			
ANR	576776	CallExpression	qWarning ( )		576597	0					
ANR	576777	Callee	qWarning		576597	0					
ANR	576778	Identifier	qWarning		576597	0					
ANR	576779	ArgumentList			576597	1					
ANR	576780	ShiftExpression	"""Unable to load applet"" << applet << ""with arguments"" << arguments"		576597	1		<<			
ANR	576781	PrimaryExpression	"""Unable to load applet"""		576597	0					
ANR	576782	ShiftExpression	"applet << ""with arguments"" << arguments"		576597	1		<<			
ANR	576783	Identifier	applet		576597	0					
ANR	576784	ShiftExpression	"""with arguments"" << arguments"		576597	1		<<			
ANR	576785	PrimaryExpression	"""with arguments"""		576597	0					
ANR	576786	Identifier	arguments		576597	1					
ANR	576787	ExpressionStatement	v -> deleteLater ( )	72:16:2705:2721	576597	1	True				
ANR	576788	CallExpression	v -> deleteLater ( )		576597	0					
ANR	576789	Callee	v -> deleteLater		576597	0					
ANR	576790	PtrMemberAccess	v -> deleteLater		576597	0					
ANR	576791	Identifier	v		576597	0					
ANR	576792	Identifier	deleteLater		576597	1					
ANR	576793	ArgumentList			576597	1					
ANR	576794	ReturnStatement	return ;	73:16:2739:2745	576597	2	True				
ANR	576795	ExpressionStatement	a -> restore ( cg )	75:12:2773:2787	576597	2	True				
ANR	576796	CallExpression	a -> restore ( cg )		576597	0					
ANR	576797	Callee	a -> restore		576597	0					
ANR	576798	PtrMemberAccess	a -> restore		576597	0					
ANR	576799	Identifier	a		576597	0					
ANR	576800	Identifier	restore		576597	1					
ANR	576801	ArgumentList	cg		576597	1					
ANR	576802	Argument	cg		576597	0					
ANR	576803	Identifier	cg		576597	0					
ANR	576804	IdentifierDeclStatement	KConfigGroup cg2 = a -> config ( ) ;	80:12:2985:3015	576597	3	True				
ANR	576805	IdentifierDecl	cg2 = a -> config ( )		576597	0					
ANR	576806	IdentifierDeclType	KConfigGroup		576597	0					
ANR	576807	Identifier	cg2		576597	1					
ANR	576808	AssignmentExpression	cg2 = a -> config ( )		576597	2		=			
ANR	576809	Identifier	cg2		576597	0					
ANR	576810	CallExpression	a -> config ( )		576597	1					
ANR	576811	Callee	a -> config		576597	0					
ANR	576812	PtrMemberAccess	a -> config		576597	0					
ANR	576813	Identifier	a		576597	0					
ANR	576814	Identifier	config		576597	1					
ANR	576815	ArgumentList			576597	1					
ANR	576816	ExpressionStatement	cont -> addApplet ( a )	81:12:3029:3047	576597	4	True				
ANR	576817	CallExpression	cont -> addApplet ( a )		576597	0					
ANR	576818	Callee	cont -> addApplet		576597	0					
ANR	576819	PtrMemberAccess	cont -> addApplet		576597	0					
ANR	576820	Identifier	cont		576597	0					
ANR	576821	Identifier	addApplet		576597	1					
ANR	576822	ArgumentList	a		576597	1					
ANR	576823	Argument	a		576597	0					
ANR	576824	Identifier	a		576597	0					
ANR	576825	ExpressionStatement	v -> setApplet ( a )	83:12:3062:3077	576597	5	True				
ANR	576826	CallExpression	v -> setApplet ( a )		576597	0					
ANR	576827	Callee	v -> setApplet		576597	0					
ANR	576828	PtrMemberAccess	v -> setApplet		576597	0					
ANR	576829	Identifier	v		576597	0					
ANR	576830	Identifier	setApplet		576597	1					
ANR	576831	ArgumentList	a		576597	1					
ANR	576832	Argument	a		576597	0					
ANR	576833	Identifier	a		576597	0					
ANR	576834	ReturnStatement	return ;	84:12:3091:3097	576597	6	True				
ANR	576835	IdentifierDeclStatement	"Plasma :: Applet * a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , 0 , arguments ) ;"	88:4:3120:3202	576597	34	True				
ANR	576836	IdentifierDecl	"* a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , 0 , arguments )"		576597	0					
ANR	576837	IdentifierDeclType	Plasma :: Applet *		576597	0					
ANR	576838	Identifier	a		576597	1					
ANR	576839	AssignmentExpression	"* a = Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , 0 , arguments )"		576597	2		=			
ANR	576840	Identifier	a		576597	0					
ANR	576841	CallExpression	"Plasma :: PluginLoader :: self ( ) -> loadApplet ( applet , 0 , arguments )"		576597	1					
ANR	576842	Callee	Plasma :: PluginLoader :: self ( ) -> loadApplet		576597	0					
ANR	576843	PtrMemberAccess	Plasma :: PluginLoader :: self ( ) -> loadApplet		576597	0					
ANR	576844	CallExpression	Plasma :: PluginLoader :: self ( )		576597	0					
ANR	576845	Callee	Plasma :: PluginLoader :: self		576597	0					
ANR	576846	Identifier	Plasma :: PluginLoader :: self		576597	0					
ANR	576847	ArgumentList			576597	1					
ANR	576848	Identifier	loadApplet		576597	1					
ANR	576849	ArgumentList	applet		576597	1					
ANR	576850	Argument	applet		576597	0					
ANR	576851	Identifier	applet		576597	0					
ANR	576852	Argument	0		576597	1					
ANR	576853	PrimaryExpression	0		576597	0					
ANR	576854	Argument	arguments		576597	2					
ANR	576855	Identifier	arguments		576597	0					
ANR	576856	IfStatement	if ( ! a )		576597	35					
ANR	576857	Condition	! a	89:8:3212:3213	576597	0	True				
ANR	576858	UnaryOperationExpression	! a		576597	0					
ANR	576859	UnaryOperator	!		576597	0					
ANR	576860	Identifier	a		576597	1					
ANR	576861	CompoundStatement		45:12:1509:1509	576597	1					
ANR	576862	ExpressionStatement	"qWarning ( ) << ""Unable to load applet"" << applet << ""with arguments"" << arguments"	90:8:3226:3305	576597	0	True				
ANR	576863	ShiftExpression	"qWarning ( ) << ""Unable to load applet"" << applet << ""with arguments"" << arguments"		576597	0		<<			
ANR	576864	CallExpression	qWarning ( )		576597	0					
ANR	576865	Callee	qWarning		576597	0					
ANR	576866	Identifier	qWarning		576597	0					
ANR	576867	ArgumentList			576597	1					
ANR	576868	ShiftExpression	"""Unable to load applet"" << applet << ""with arguments"" << arguments"		576597	1		<<			
ANR	576869	PrimaryExpression	"""Unable to load applet"""		576597	0					
ANR	576870	ShiftExpression	"applet << ""with arguments"" << arguments"		576597	1		<<			
ANR	576871	Identifier	applet		576597	0					
ANR	576872	ShiftExpression	"""with arguments"" << arguments"		576597	1		<<			
ANR	576873	PrimaryExpression	"""with arguments"""		576597	0					
ANR	576874	Identifier	arguments		576597	1					
ANR	576875	ExpressionStatement	v -> deleteLater ( )	91:8:3315:3331	576597	1	True				
ANR	576876	CallExpression	v -> deleteLater ( )		576597	0					
ANR	576877	Callee	v -> deleteLater		576597	0					
ANR	576878	PtrMemberAccess	v -> deleteLater		576597	0					
ANR	576879	Identifier	v		576597	0					
ANR	576880	Identifier	deleteLater		576597	1					
ANR	576881	ArgumentList			576597	1					
ANR	576882	ReturnStatement	return ;	92:8:3341:3347	576597	2	True				
ANR	576883	IdentifierDeclStatement	KConfigGroup cg2 = a -> config ( ) ;	98:4:3519:3549	576597	36	True				
ANR	576884	IdentifierDecl	cg2 = a -> config ( )		576597	0					
ANR	576885	IdentifierDeclType	KConfigGroup		576597	0					
ANR	576886	Identifier	cg2		576597	1					
ANR	576887	AssignmentExpression	cg2 = a -> config ( )		576597	2		=			
ANR	576888	Identifier	cg2		576597	0					
ANR	576889	CallExpression	a -> config ( )		576597	1					
ANR	576890	Callee	a -> config		576597	0					
ANR	576891	PtrMemberAccess	a -> config		576597	0					
ANR	576892	Identifier	a		576597	0					
ANR	576893	Identifier	config		576597	1					
ANR	576894	ArgumentList			576597	1					
ANR	576895	ExpressionStatement	cont -> addApplet ( a )	99:4:3555:3573	576597	37	True				
ANR	576896	CallExpression	cont -> addApplet ( a )		576597	0					
ANR	576897	Callee	cont -> addApplet		576597	0					
ANR	576898	PtrMemberAccess	cont -> addApplet		576597	0					
ANR	576899	Identifier	cont		576597	0					
ANR	576900	Identifier	addApplet		576597	1					
ANR	576901	ArgumentList	a		576597	1					
ANR	576902	Argument	a		576597	0					
ANR	576903	Identifier	a		576597	0					
ANR	576904	ExpressionStatement	v -> setApplet ( a )	101:4:3580:3595	576597	38	True				
ANR	576905	CallExpression	v -> setApplet ( a )		576597	0					
ANR	576906	Callee	v -> setApplet		576597	0					
ANR	576907	PtrMemberAccess	v -> setApplet		576597	0					
ANR	576908	Identifier	v		576597	0					
ANR	576909	Identifier	setApplet		576597	1					
ANR	576910	ArgumentList	a		576597	1					
ANR	576911	Argument	a		576597	0					
ANR	576912	Identifier	a		576597	0					
ANR	576913	ReturnType	void		576597	1					
ANR	576914	Identifier	PlasmaWindowedCorona :: loadApplet		576597	2					
ANR	576915	ParameterList	"const QString & applet , const QVariantList & arguments"		576597	3					
ANR	576916	Parameter	const QString & applet	44:38:1652:1672	576597	0	True				
ANR	576917	ParameterType	const QString &		576597	0					
ANR	576918	Identifier	applet		576597	1					
ANR	576919	Parameter	const QVariantList & arguments	44:61:1675:1703	576597	1	True				
ANR	576920	ParameterType	const QVariantList &		576597	0					
ANR	576921	Identifier	arguments		576597	1					
ANR	576922	CFGEntryNode	ENTRY		576597		True				
ANR	576923	CFGExitNode	EXIT		576597		True				
ANR	576924	Symbol	a		576597						
ANR	576925	Symbol	cg		576597						
ANR	576926	Symbol	containments ( ) . isEmpty		576597						
ANR	576927	Symbol	appletsGroup		576597						
ANR	576928	Symbol	m_hasStatusNotifier		576597						
ANR	576929	Symbol	cg . readEntry		576597						
ANR	576930	Symbol	* a		576597						
ANR	576931	Symbol	cg2		576597						
ANR	576932	Symbol	QString		576597						
ANR	576933	Symbol	group . toInt		576597						
ANR	576934	Symbol	containments		576597						
ANR	576935	Symbol	Plasma :: PluginLoader :: self ( ) -> loadApplet		576597						
ANR	576936	Symbol	plugin		576597						
ANR	576937	Symbol	v		576597						
ANR	576938	Symbol	Plasma :: PluginLoader :: self		576597						
ANR	576939	Symbol	arguments		576597						
ANR	576940	Symbol	containments ( ) . first		576597						
ANR	576941	Symbol	* Plasma :: PluginLoader :: self		576597						
ANR	576942	Symbol	a -> pluginInfo		576597						
ANR	576943	Symbol	cont		576597						
ANR	576944	Symbol	applet		576597						
ANR	576945	Symbol	a -> pluginInfo ( ) . pluginName		576597						
ANR	576946	Symbol	group		576597						
ANR	576947	Symbol	a -> config		576597						
ANR	576948	Function	PlasmaWindowedCorona :: activateRequested	104:0:3600:4090							
ANR	576949	FunctionDef	"PlasmaWindowedCorona :: activateRequested (const QStringList & arguments , const QString & workingDirectory)"		576948	0					
ANR	576950	CompoundStatement		105:0:3708:4090	576948	0					
ANR	576951	Statement	Q_UNUSED	106:4:3714:3721	576948	0	True				
ANR	576952	Statement	(	106:12:3722:3722	576948	1	True				
ANR	576953	Statement	workingDirectory	106:13:3723:3738	576948	2	True				
ANR	576954	Statement	)	106:29:3739:3739	576948	3	True				
ANR	576955	IfStatement	if ( arguments . count ( ) <= 1 )		576948	4					
ANR	576956	Condition	arguments . count ( ) <= 1	107:8:3749:3770	576948	0	True				
ANR	576957	RelationalExpression	arguments . count ( ) <= 1		576948	0		<=			
ANR	576958	CallExpression	arguments . count ( )		576948	0					
ANR	576959	Callee	arguments . count		576948	0					
ANR	576960	MemberAccess	arguments . count		576948	0					
ANR	576961	Identifier	arguments		576948	0					
ANR	576962	Identifier	count		576948	1					
ANR	576963	ArgumentList			576948	1					
ANR	576964	PrimaryExpression	1		576948	1					
ANR	576965	CompoundStatement		3:32:64:64	576948	1					
ANR	576966	ReturnStatement	return ;	108:8:3783:3789	576948	0	True				
ANR	576967	IdentifierDeclStatement	QVariantList args ;	111:4:3802:3819	576948	5	True				
ANR	576968	IdentifierDecl	args		576948	0					
ANR	576969	IdentifierDeclType	QVariantList		576948	0					
ANR	576970	Identifier	args		576948	1					
ANR	576971	IdentifierDeclStatement	QStringList :: const_iterator constIterator ;	112:4:3825:3866	576948	6	True				
ANR	576972	IdentifierDecl	constIterator		576948	0					
ANR	576973	IdentifierDeclType	QStringList :: const_iterator		576948	0					
ANR	576974	Identifier	constIterator		576948	1					
ANR	576975	ExpressionStatement	constIterator = arguments . constBegin ( )	113:4:3872:3910	576948	7	True				
ANR	576976	AssignmentExpression	constIterator = arguments . constBegin ( )		576948	0		=			
ANR	576977	Identifier	constIterator		576948	0					
ANR	576978	CallExpression	arguments . constBegin ( )		576948	1					
ANR	576979	Callee	arguments . constBegin		576948	0					
ANR	576980	MemberAccess	arguments . constBegin		576948	0					
ANR	576981	Identifier	arguments		576948	0					
ANR	576982	Identifier	constBegin		576948	1					
ANR	576983	ArgumentList			576948	1					
ANR	576984	ExpressionStatement	++ constIterator	114:4:3916:3931	576948	8	True				
ANR	576985	UnaryExpression	++ constIterator		576948	0					
ANR	576986	IncDec	++		576948	0					
ANR	576987	Identifier	constIterator		576948	1					
ANR	576988	ForStatement	for ( ; constIterator != arguments . constEnd ( ) ; ++ constIterator )		576948	9					
ANR	576989	Condition	constIterator != arguments . constEnd ( )	115:11:3944:3980	576948	0	True				
ANR	576990	EqualityExpression	constIterator != arguments . constEnd ( )		576948	0		!=			
ANR	576991	Identifier	constIterator		576948	0					
ANR	576992	CallExpression	arguments . constEnd ( )		576948	1					
ANR	576993	Callee	arguments . constEnd		576948	0					
ANR	576994	MemberAccess	arguments . constEnd		576948	0					
ANR	576995	Identifier	arguments		576948	0					
ANR	576996	Identifier	constEnd		576948	1					
ANR	576997	ArgumentList			576948	1					
ANR	576998	UnaryExpression	++ constIterator	116:11:3994:4008	576948	1	True				
ANR	576999	IncDec	++		576948	0					
ANR	577000	Identifier	constIterator		576948	1					
ANR	577001	CompoundStatement		12:28:302:302	576948	2					
ANR	577002	ExpressionStatement	args << ( * constIterator )	117:8:4021:4045	576948	0	True				
ANR	577003	ShiftExpression	args << ( * constIterator )		576948	0		<<			
ANR	577004	Identifier	args		576948	0					
ANR	577005	UnaryOperationExpression	* constIterator		576948	1					
ANR	577006	UnaryOperator	*		576948	0					
ANR	577007	Identifier	constIterator		576948	1					
ANR	577008	ExpressionStatement	"loadApplet ( arguments [ 1 ] , args )"	120:4:4058:4088	576948	10	True				
ANR	577009	CallExpression	"loadApplet ( arguments [ 1 ] , args )"		576948	0					
ANR	577010	Callee	loadApplet		576948	0					
ANR	577011	Identifier	loadApplet		576948	0					
ANR	577012	ArgumentList	arguments [ 1 ]		576948	1					
ANR	577013	Argument	arguments [ 1 ]		576948	0					
ANR	577014	ArrayIndexing	arguments [ 1 ]		576948	0					
ANR	577015	Identifier	arguments		576948	0					
ANR	577016	PrimaryExpression	1		576948	1					
ANR	577017	Argument	args		576948	1					
ANR	577018	Identifier	args		576948	0					
ANR	577019	ReturnType	void		576948	1					
ANR	577020	Identifier	PlasmaWindowedCorona :: activateRequested		576948	2					
ANR	577021	ParameterList	"const QStringList & arguments , const QString & workingDirectory"		576948	3					
ANR	577022	Parameter	const QStringList & arguments	104:45:3645:3672	576948	0	True				
ANR	577023	ParameterType	const QStringList &		576948	0					
ANR	577024	Identifier	arguments		576948	1					
ANR	577025	Parameter	const QString & workingDirectory	104:75:3675:3705	576948	1	True				
ANR	577026	ParameterType	const QString &		576948	0					
ANR	577027	Identifier	workingDirectory		576948	1					
ANR	577028	CFGEntryNode	ENTRY		576948		True				
ANR	577029	CFGExitNode	EXIT		576948		True				
ANR	577030	Symbol	args		576948						
ANR	577031	Symbol	arguments . count		576948						
ANR	577032	Symbol	workingDirectory		576948						
ANR	577033	Symbol	arguments		576948						
ANR	577034	Symbol	arguments . constBegin		576948						
ANR	577035	Symbol	constIterator		576948						
ANR	577036	Symbol	arguments . constEnd		576948						
ANR	577037	Symbol	* arguments		576948						
ANR	577038	Function	PlasmaWindowedCorona :: screenGeometry	123:0:4093:4202							
ANR	577039	FunctionDef	PlasmaWindowedCorona :: screenGeometry (int id)		577038	0					
ANR	577040	CompoundStatement		124:0:4150:4202	577038	0					
ANR	577041	ExpressionStatement	Q_UNUSED ( id )	125:4:4156:4168	577038	0	True				
ANR	577042	CallExpression	Q_UNUSED ( id )		577038	0					
ANR	577043	Callee	Q_UNUSED		577038	0					
ANR	577044	Identifier	Q_UNUSED		577038	0					
ANR	577045	ArgumentList	id		577038	1					
ANR	577046	Argument	id		577038	0					
ANR	577047	Identifier	id		577038	0					
ANR	577048	ReturnStatement	return QRect ( ) ;	127:4:4186:4200	577038	1	True				
ANR	577049	CallExpression	QRect ( )		577038	0					
ANR	577050	Callee	QRect		577038	0					
ANR	577051	Identifier	QRect		577038	0					
ANR	577052	ArgumentList			577038	1					
ANR	577053	ReturnType	QRect		577038	1					
ANR	577054	Identifier	PlasmaWindowedCorona :: screenGeometry		577038	2					
ANR	577055	ParameterList	int id		577038	3					
ANR	577056	Parameter	int id	123:43:4136:4141	577038	0	True				
ANR	577057	ParameterType	int		577038	0					
ANR	577058	Identifier	id		577038	1					
ANR	577059	CFGEntryNode	ENTRY		577038		True				
ANR	577060	CFGExitNode	EXIT		577038		True				
ANR	577061	Symbol	QRect		577038						
ANR	577062	Symbol	id		577038						
ANR	577063	Function	PlasmaWindowedCorona :: load	130:0:4205:5175							
ANR	577064	FunctionDef	PlasmaWindowedCorona :: load ()		577063	0					
ANR	577065	CompoundStatement		131:0:4239:5175	577063	0					
ANR	577066	ExpressionStatement	"loadLayout ( QStringLiteral ( ""plasmawindowed-appletsrc"" ) )"	133:4:4316:4370	577063	0	True				
ANR	577067	CallExpression	"loadLayout ( QStringLiteral ( ""plasmawindowed-appletsrc"" ) )"		577063	0					
ANR	577068	Callee	loadLayout		577063	0					
ANR	577069	Identifier	loadLayout		577063	0					
ANR	577070	ArgumentList	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	1					
ANR	577071	Argument	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	0					
ANR	577072	CallExpression	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	0					
ANR	577073	Callee	QStringLiteral		577063	0					
ANR	577074	Identifier	QStringLiteral		577063	0					
ANR	577075	ArgumentList	"""plasmawindowed-appletsrc"""		577063	1					
ANR	577076	Argument	"""plasmawindowed-appletsrc"""		577063	0					
ANR	577077	PrimaryExpression	"""plasmawindowed-appletsrc"""		577063	0					
ANR	577078	IdentifierDeclStatement	bool found = false ;	136:4:4378:4396	577063	1	True				
ANR	577079	IdentifierDecl	found = false		577063	0					
ANR	577080	IdentifierDeclType	bool		577063	0					
ANR	577081	Identifier	found		577063	1					
ANR	577082	AssignmentExpression	found = false		577063	2		=			
ANR	577083	Identifier	false		577063	0					
ANR	577084	Identifier	false		577063	1					
ANR	577085	Statement	for	137:4:4402:4404	577063	2	True				
ANR	577086	Statement	(	137:8:4406:4406	577063	3	True				
ANR	577087	Statement	auto	137:9:4407:4410	577063	4	True				
ANR	577088	Label	c :	137:14:4412:4414	577063	5	True				
ANR	577089	Identifier	c		577063	0					
ANR	577090	Statement	containments	137:18:4416:4427	577063	6	True				
ANR	577091	Statement	(	137:30:4428:4428	577063	7	True				
ANR	577092	Statement	)	137:31:4429:4429	577063	8	True				
ANR	577093	Statement	)	137:32:4430:4430	577063	9	True				
ANR	577094	CompoundStatement		7:34:192:192	577063	10					
ANR	577095	IfStatement	if ( c -> containmentType ( ) == Plasma :: Types :: DesktopContainment )		577063	0					
ANR	577096	Condition	c -> containmentType ( ) == Plasma :: Types :: DesktopContainment	138:12:4446:4502	577063	0	True				
ANR	577097	EqualityExpression	c -> containmentType ( ) == Plasma :: Types :: DesktopContainment		577063	0		==			
ANR	577098	CallExpression	c -> containmentType ( )		577063	0					
ANR	577099	Callee	c -> containmentType		577063	0					
ANR	577100	PtrMemberAccess	c -> containmentType		577063	0					
ANR	577101	Identifier	c		577063	0					
ANR	577102	Identifier	containmentType		577063	1					
ANR	577103	ArgumentList			577063	1					
ANR	577104	Identifier	Plasma :: Types :: DesktopContainment		577063	1					
ANR	577105	CompoundStatement		8:71:265:265	577063	1					
ANR	577106	ExpressionStatement	found = true	139:12:4519:4531	577063	0	True				
ANR	577107	AssignmentExpression	found = true		577063	0		=			
ANR	577108	Identifier	found		577063	0					
ANR	577109	Identifier	true		577063	1					
ANR	577110	BreakStatement	break ;	140:12:4545:4550	577063	1	True				
ANR	577111	IfStatement	if ( ! found )		577063	11					
ANR	577112	Condition	! found	144:8:4577:4582	577063	0	True				
ANR	577113	UnaryOperationExpression	! found		577063	0					
ANR	577114	UnaryOperator	!		577063	0					
ANR	577115	Identifier	found		577063	1					
ANR	577116	CompoundStatement		14:16:345:345	577063	1					
ANR	577117	ExpressionStatement	"qDebug ( ) << ""Loading default layout"""	145:8:4595:4631	577063	0	True				
ANR	577118	ShiftExpression	"qDebug ( ) << ""Loading default layout"""		577063	0		<<			
ANR	577119	CallExpression	qDebug ( )		577063	0					
ANR	577120	Callee	qDebug		577063	0					
ANR	577121	Identifier	qDebug		577063	0					
ANR	577122	ArgumentList			577063	1					
ANR	577123	PrimaryExpression	"""Loading default layout"""		577063	1					
ANR	577124	ExpressionStatement	"createContainment ( QStringLiteral ( ""empty"" ) )"	146:8:4641:4683	577063	1	True				
ANR	577125	CallExpression	"createContainment ( QStringLiteral ( ""empty"" ) )"		577063	0					
ANR	577126	Callee	createContainment		577063	0					
ANR	577127	Identifier	createContainment		577063	0					
ANR	577128	ArgumentList	"QStringLiteral ( ""empty"" )"		577063	1					
ANR	577129	Argument	"QStringLiteral ( ""empty"" )"		577063	0					
ANR	577130	CallExpression	"QStringLiteral ( ""empty"" )"		577063	0					
ANR	577131	Callee	QStringLiteral		577063	0					
ANR	577132	Identifier	QStringLiteral		577063	0					
ANR	577133	ArgumentList	"""empty"""		577063	1					
ANR	577134	Argument	"""empty"""		577063	0					
ANR	577135	PrimaryExpression	"""empty"""		577063	0					
ANR	577136	ExpressionStatement	"saveLayout ( QStringLiteral ( ""plasmawindowed-appletsrc"" ) )"	147:8:4693:4747	577063	2	True				
ANR	577137	CallExpression	"saveLayout ( QStringLiteral ( ""plasmawindowed-appletsrc"" ) )"		577063	0					
ANR	577138	Callee	saveLayout		577063	0					
ANR	577139	Identifier	saveLayout		577063	0					
ANR	577140	ArgumentList	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	1					
ANR	577141	Argument	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	0					
ANR	577142	CallExpression	"QStringLiteral ( ""plasmawindowed-appletsrc"" )"		577063	0					
ANR	577143	Callee	QStringLiteral		577063	0					
ANR	577144	Identifier	QStringLiteral		577063	0					
ANR	577145	ArgumentList	"""plasmawindowed-appletsrc"""		577063	1					
ANR	577146	Argument	"""plasmawindowed-appletsrc"""		577063	0					
ANR	577147	PrimaryExpression	"""plasmawindowed-appletsrc"""		577063	0					
ANR	577148	Statement	for	150:4:4760:4762	577063	12	True				
ANR	577149	Statement	(	150:8:4764:4764	577063	13	True				
ANR	577150	Statement	auto	150:9:4765:4768	577063	14	True				
ANR	577151	Label	c :	150:14:4770:4772	577063	15	True				
ANR	577152	Identifier	c		577063	0					
ANR	577153	Statement	containments	150:18:4774:4785	577063	16	True				
ANR	577154	Statement	(	150:30:4786:4786	577063	17	True				
ANR	577155	Statement	)	150:31:4787:4787	577063	18	True				
ANR	577156	Statement	)	150:32:4788:4788	577063	19	True				
ANR	577157	CompoundStatement		20:34:550:550	577063	20					
ANR	577158	IfStatement	if ( c -> containmentType ( ) == Plasma :: Types :: DesktopContainment )		577063	0					
ANR	577159	Condition	c -> containmentType ( ) == Plasma :: Types :: DesktopContainment	151:12:4804:4860	577063	0	True				
ANR	577160	EqualityExpression	c -> containmentType ( ) == Plasma :: Types :: DesktopContainment		577063	0		==			
ANR	577161	CallExpression	c -> containmentType ( )		577063	0					
ANR	577162	Callee	c -> containmentType		577063	0					
ANR	577163	PtrMemberAccess	c -> containmentType		577063	0					
ANR	577164	Identifier	c		577063	0					
ANR	577165	Identifier	containmentType		577063	1					
ANR	577166	ArgumentList			577063	1					
ANR	577167	Identifier	Plasma :: Types :: DesktopContainment		577063	1					
ANR	577168	CompoundStatement		24:12:738:808	577063	1					
ANR	577169	ExpressionStatement	m_containment = c	152:12:4877:4894	577063	0	True				
ANR	577170	AssignmentExpression	m_containment = c		577063	0		=			
ANR	577171	Identifier	m_containment		577063	0					
ANR	577172	Identifier	c		577063	1					
ANR	577173	ExpressionStatement	m_containment -> setFormFactor ( Plasma :: Types :: Application )	153:12:4908:4964	577063	1	True				
ANR	577174	CallExpression	m_containment -> setFormFactor ( Plasma :: Types :: Application )		577063	0					
ANR	577175	Callee	m_containment -> setFormFactor		577063	0					
ANR	577176	PtrMemberAccess	m_containment -> setFormFactor		577063	0					
ANR	577177	Identifier	m_containment		577063	0					
ANR	577178	Identifier	setFormFactor		577063	1					
ANR	577179	ArgumentList	Plasma :: Types :: Application		577063	1					
ANR	577180	Argument	Plasma :: Types :: Application		577063	0					
ANR	577181	Identifier	Plasma :: Types :: Application		577063	0					
ANR	577182	IdentifierDeclStatement	"QAction * removeAction = c -> actions ( ) -> action ( QStringLiteral ( ""remove"" ) ) ;"	154:12:4978:5048	577063	2	True				
ANR	577183	IdentifierDecl	"* removeAction = c -> actions ( ) -> action ( QStringLiteral ( ""remove"" ) )"		577063	0					
ANR	577184	IdentifierDeclType	QAction *		577063	0					
ANR	577185	Identifier	removeAction		577063	1					
ANR	577186	AssignmentExpression	"* removeAction = c -> actions ( ) -> action ( QStringLiteral ( ""remove"" ) )"		577063	2		=			
ANR	577187	Identifier	removeAction		577063	0					
ANR	577188	CallExpression	"c -> actions ( ) -> action ( QStringLiteral ( ""remove"" ) )"		577063	1					
ANR	577189	Callee	c -> actions ( ) -> action		577063	0					
ANR	577190	PtrMemberAccess	c -> actions ( ) -> action		577063	0					
ANR	577191	CallExpression	c -> actions ( )		577063	0					
ANR	577192	Callee	c -> actions		577063	0					
ANR	577193	PtrMemberAccess	c -> actions		577063	0					
ANR	577194	Identifier	c		577063	0					
ANR	577195	Identifier	actions		577063	1					
ANR	577196	ArgumentList			577063	1					
ANR	577197	Identifier	action		577063	1					
ANR	577198	ArgumentList	"QStringLiteral ( ""remove"" )"		577063	1					
ANR	577199	Argument	"QStringLiteral ( ""remove"" )"		577063	0					
ANR	577200	CallExpression	"QStringLiteral ( ""remove"" )"		577063	0					
ANR	577201	Callee	QStringLiteral		577063	0					
ANR	577202	Identifier	QStringLiteral		577063	0					
ANR	577203	ArgumentList	"""remove"""		577063	1					
ANR	577204	Argument	"""remove"""		577063	0					
ANR	577205	PrimaryExpression	"""remove"""		577063	0					
ANR	577206	IfStatement	if ( removeAction )		577063	3					
ANR	577207	Condition	removeAction	155:15:5065:5076	577063	0	True				
ANR	577208	Identifier	removeAction		577063	0					
ANR	577209	CompoundStatement		25:29:839:839	577063	1					
ANR	577210	ExpressionStatement	removeAction -> deleteLater ( )	156:16:5097:5124	577063	0	True				
ANR	577211	CallExpression	removeAction -> deleteLater ( )		577063	0					
ANR	577212	Callee	removeAction -> deleteLater		577063	0					
ANR	577213	PtrMemberAccess	removeAction -> deleteLater		577063	0					
ANR	577214	Identifier	removeAction		577063	0					
ANR	577215	Identifier	deleteLater		577063	1					
ANR	577216	ArgumentList			577063	1					
ANR	577217	BreakStatement	break ;	158:12:5152:5157	577063	4	True				
ANR	577218	ReturnType	void		577063	1					
ANR	577219	Identifier	PlasmaWindowedCorona :: load		577063	2					
ANR	577220	ParameterList			577063	3					
ANR	577221	CFGEntryNode	ENTRY		577063		True				
ANR	577222	CFGExitNode	EXIT		577063		True				
ANR	577223	CFGErrorNode	ERROR		577063		True				
ANR	577224	Symbol	c -> containmentType		577063						
ANR	577225	Symbol	removeAction		577063						
ANR	577226	Symbol	c -> actions		577063						
ANR	577227	Symbol	c		577063						
ANR	577228	Symbol	false		577063						
ANR	577229	Symbol	* * c		577063						
ANR	577230	Symbol	* c		577063						
ANR	577231	Symbol	c -> actions ( ) -> action		577063						
ANR	577232	Symbol	Plasma :: Types :: Application		577063						
ANR	577233	Symbol	* c -> actions		577063						
ANR	577234	Symbol	Plasma :: Types :: DesktopContainment		577063						
ANR	577235	Symbol	found		577063						
ANR	577236	Symbol	true		577063						
ANR	577237	Symbol	m_containment		577063						
ANR	577238	Symbol	QStringLiteral		577063						
ANR	577239	Function	PlasmaWindowedCorona :: setHasStatusNotifier	163:0:5178:5271							
ANR	577240	FunctionDef	PlasmaWindowedCorona :: setHasStatusNotifier (bool stay)		577239	0					
ANR	577241	CompoundStatement		164:0:5237:5271	577239	0					
ANR	577242	ExpressionStatement	m_hasStatusNotifier = stay	165:4:5243:5269	577239	0	True				
ANR	577243	AssignmentExpression	m_hasStatusNotifier = stay		577239	0		=			
ANR	577244	Identifier	m_hasStatusNotifier		577239	0					
ANR	577245	Identifier	stay		577239	1					
ANR	577246	ReturnType	void		577239	1					
ANR	577247	Identifier	PlasmaWindowedCorona :: setHasStatusNotifier		577239	2					
ANR	577248	ParameterList	bool stay		577239	3					
ANR	577249	Parameter	bool stay	163:48:5226:5234	577239	0	True				
ANR	577250	ParameterType	bool		577239	0					
ANR	577251	Identifier	stay		577239	1					
ANR	577252	CFGEntryNode	ENTRY		577239		True				
ANR	577253	CFGExitNode	EXIT		577239		True				
ANR	577254	Symbol	m_hasStatusNotifier		577239						
ANR	577255	Symbol	stay		577239						
