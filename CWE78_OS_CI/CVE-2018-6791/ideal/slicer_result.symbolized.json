[{"FileName": "deviceserviceaction.cpp", "Caller": "DelayedExecutor::delayedExecute", "Source": false, "Sink": false, "idx": 0, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "runCommand", "line": 146, "label": -3, "slices": ["void SolidUiServer::showActionsDialog(const QString &udi,\n", "                                      const QStringList &desktopFiles)\n", "{\n", "    if (m_udiToActionsDialog.contains(udi)) {\n", "    QList<DeviceAction*> actions;\n", "    foreach (const QString &desktop, desktopFiles) {\n", "        const QString filePath = QStandardPaths::locate(QStandardPaths::GenericDataLocation, \"solid/actions/\"+desktop);\n", "        QList<KServiceAction> services = KDesktopFileActions::userDefinedServices(filePath, true);\n", "        foreach (const KServiceAction &service, services) {\n", "            DeviceServiceAction *action = new DeviceServiceAction();\n", "            action->setService(service);\n", "            actions << action;\n", "        }\n", "    }\n", "    if (actions.size()==1) {\n", "        DeviceAction *action = actions.takeFirst();\n", "        Solid::Device device(udi);\n", "        action->execute(device);\n", "void DeviceServiceAction::setService(const KServiceAction& service)\n", "{\n", "    DeviceAction::setIconName(service.icon());\n", "    DeviceAction::setLabel(service.text());\n", "    m_service = service;\n", "class DeviceServiceAction : public DeviceAction\n", "{\n", "public:\n", "    DeviceServiceAction();\n", "    QString id() const override;\n", "    void execute(Solid::Device &device) override;\n", "    void setService(const KServiceAction& service);\n", "    KServiceAction service() const;\n", "private:\n", "    KServiceAction m_service;\n", "};\n", "void DeviceServiceAction::execute(Solid::Device &device)\n", "{\n", "    new DelayedExecutor(m_service, device);\n", "DelayedExecutor::DelayedExecutor(const KServiceAction &service, Solid::Device &device): m_service(service)\n", "void DelayedExecutor::delayedExecute(const QString &udi)\n", "{\n", "    Solid::Device device(udi);\n", "    QString exec = m_service.exec();\n", "    MacroExpander mx(device);\n", "    mx.expandMacros(exec);\n", "    KRun::runCommand(exec, QString(), m_service.icon(), 0);"], "tokenized": "void CLASS1::FUNC1(const  Var1&Var2,\nconst  Var3&Var4)\n{\nif (Var5.FUNC2(Var2)){\nVar6<STRUCT1 *>Var7; \nFUNC3(const  Var1&Var8,Var4){\nconst  Var1  Var9=CLASS2::FUNC4(CLASS2::Var10,STRING+Var8); \nVar6<Var11>Var12=CLASS3::FUNC5(Var9,true ); \nFUNC3(const  Var11&Var13,Var12){\nSTRUCT2 *Var14=new STRUCT2(); \nVar14->FUNC6(Var13); \nVar7<<Var14; \n}\n}\nif (Var7.size () == 1){\nSTRUCT1 *Var14=Var7.FUNC7(); \nCLASS4::STRUCT3 FUNC8(Var2); \nVar14->FUNC9(FUNC8); \nvoid CLASS5::FUNC6(const  Var11&Var13)\n{\nCLASS6::FUNC10(Var13.FUNC11()); \nCLASS6::FUNC12(Var13.FUNC13()); \nVar15=Var13; \nclass  STRUCT2 public  STRUCT1\n{\npublic \nSTRUCT2(); \nVar1 FUNC14() const  Var16; \nvoid FUNC9(CLASS4::STRUCT3&FUNC8) Var16; \nvoid FUNC6(const  Var11&Var13); \nVar11 Var13() const ; \nprivate \nVar11  Var15; \n}; \nvoid CLASS5::FUNC9(CLASS4::STRUCT3&FUNC8)\n{\nnew FUNC15(Var15,FUNC8); \nCLASS7::FUNC15(const  Var11&Var13,CLASS4::STRUCT3&FUNC8) Var15(Var13)\nvoid CLASS7::FUNC16(const  Var1&Var2)\n{\nCLASS4::STRUCT3 FUNC8(Var2); \nVar1  Var17=Var15.Var17(); \nSTRUCT4 FUNC17(FUNC8); \nFUNC17.FUNC18(Var17); \nCLASS8::FUNC19(Var17,Var1(),Var15.FUNC11(),0); "}]