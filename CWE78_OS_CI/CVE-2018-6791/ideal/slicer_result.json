[
  {
    "FileName": "deviceserviceaction.cpp",
    "Caller": "DelayedExecutor::delayedExecute",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "runCommand",
    "line": 146,
    "label": -3,
    "slices": [
        "void SolidUiServer::showActionsDialog(const QString &udi,\n",
        "                                      const QStringList &desktopFiles)\n",
        "{\n",
        "    if (m_udiToActionsDialog.contains(udi)) {\n",
        "    QList<DeviceAction*> actions;\n",
        "    foreach (const QString &desktop, desktopFiles) {\n",
        "        const QString filePath = QStandardPaths::locate(QStandardPaths::GenericDataLocation, \"solid/actions/\"+desktop);\n",
        "        QList<KServiceAction> services = KDesktopFileActions::userDefinedServices(filePath, true);\n",
        "        foreach (const KServiceAction &service, services) {\n",
        "            DeviceServiceAction *action = new DeviceServiceAction();\n",
        "            action->setService(service);\n",
        "            actions << action;\n",
        "        }\n",
        "    }\n",
        "    if (actions.size()==1) {\n",
        "        DeviceAction *action = actions.takeFirst();\n",
        "        Solid::Device device(udi);\n",
        "        action->execute(device);\n",
        "void DeviceServiceAction::setService(const KServiceAction& service)\n",
        "{\n",
        "    DeviceAction::setIconName(service.icon());\n",
        "    DeviceAction::setLabel(service.text());\n",
        "    m_service = service;\n",
        "class DeviceServiceAction : public DeviceAction\n",
        "{\n",
        "public:\n",
        "    DeviceServiceAction();\n",
        "    QString id() const override;\n",
        "    void execute(Solid::Device &device) override;\n",
        "    void setService(const KServiceAction& service);\n",
        "    KServiceAction service() const;\n",
        "private:\n",
        "    KServiceAction m_service;\n",
        "};\n",
        "void DeviceServiceAction::execute(Solid::Device &device)\n",
        "{\n",
        "    new DelayedExecutor(m_service, device);\n",
        "DelayedExecutor::DelayedExecutor(const KServiceAction &service, Solid::Device &device): m_service(service)\n",
        "void DelayedExecutor::delayedExecute(const QString &udi)\n",
        "{\n",
        "    Solid::Device device(udi);\n",
        "    QString exec = m_service.exec();\n",
        "    MacroExpander mx(device);\n",
        "    mx.expandMacros(exec);\n",
        "    KRun::runCommand(exec, QString(), m_service.icon(), 0);"
      ]
  }
]
