# 📁 CVE-2018-6791

## 🔍 취약점 개요

**🔗 [커밋 링크](https://git.ghostscript.com/?p=ghostpdl.git;a=commit;h=79cccf641486)** | **🔗 [CVE 링크](https://www.cvedetails.com/cve/CVE-2018-6791/)**  

> 5.12.0 이전 버전의 KDE Plasma Workspace의 soliduiserver/deviceserviceaction.cpp에서 문제가 발견되었다. 볼륨 레이블에 '' 또는 $()가 포함된 vfat 썸드라이브를 장치 알리미를 통해 연결하고 마운트하면 셸 명령으로 해석되어 임의의 명령이 실행될 가능성이 있다. 문제가 되는 볼륨 레이블의 예로는 "$(touch b)"가 있다. (홈 폴더에 b라는 파일을 만든다.)

**취약점 종류**: [[CWE-78](https://cwe.mitre.org/data/definitions/78.html)] OS Command Injection

* **Source**: exec로 들어온 값 (m_service 객체에대해 exec() 실행해 얻은 값)
* **취약 조건**: 입력값 검증 없이 명령 실행 경로에 직접 사용됨
* **Sink**: mx.expandMacros(exec); 함수 사용했음. 하지만 sysevr 함수 리스트에 해당 함수명이 없다보니 다음과 같은 skipping 문구와 함께 criterion으로 잡히지 않음

** bash 오류 **
Error parsing function MacroExpander::expandEscapedMacro. skipping.
Error parsing function DelayedExecutor::DelayedExecutor. skipping

---

## 탐지 결과 요약
cve 설명에 나온 취약한 함수(Caller)에 대한 슬라이스만 고려했을 때,

| 총 슬라이스 수 |  취약으로 탐지 | 정상으로 탐지 |
| --------  | -- | -- |
| 1개       | 0개 | 1개 |

이중 Sink(`expandMacros()` 함수) 관련 슬라이스는 0건 존재

\* cve 설명에 나온 취약한 함수(Caller) && Sink와 관련된 슬라이스 데이터만 추출

cve 설명에 나온 취약한 함수가 l_funcs 리스트에 있는 함수가 아니기 때문인지 추출이 되지 않음

#### SARD는 잘 탐지하는데 이 CVE는 탐지 못했던 이유

말그대로 문제를 일으키는 sink 함수를 criterion으로 잡지 못함 그렇다고 source로 들어오는 exec 값을 잡는 것도 아님

---

### ⚠️ 탐지 결과 문제점

현재 탐지 결과에서 모든 슬라이스가 정상(라벨 0)으로 판정되었으나, 이는 다음과 같은 기술적 한계로 인한 오탐으로 판단됩니다:

1. **슬라이싱 범위 불완전**
   - l_funcs에 취약을 일으키는 sink의 이름이 존재하지 않음

## 취약점 세부 사항

### 📁 관련 파일 소개

| 파일명            | 설명              |
| -------------- | --------------- |
| `before_deviceserviceaction.cpp` | 취약 코드 (수정 전) 포함 |
| `after_deviceserviceaction.cpp`  | 개선 코드 (수정 후) 포함 |

---

### ❗️ 취약 코드

#### Source: `before_deviceserviceaction.cpp` 

```c
void DelayedExecutor::delayedExecute(const QString &udi)
{
    Solid::Device device(udi);

    QString exec = m_service.exec();
    MacroExpander mx(device);
    mx.expandMacros(exec);

    KRun::runCommand(exec, QString(), m_service.icon(), 0);
    deleteLater();
}
```

**문제점**:
사용자 입력이 적절히 검증되지 않은 채로 `expandMacros()` 함수의 인자로 사용되어 **명령어 인젝션**이 발생할 수 있음.

---

### ✅ 개선 코드

**패치 위치**: `after_deviceserviceaction.cpp`

```c
void DelayedExecutor::delayedExecute(const QString &udi)
{
    Solid::Device device(udi);

    QString exec = m_service.exec();
    MacroExpander mx(device);
    mx.expandMacrosShellQuote(exec);

    KRun::runCommand(exec, QString(), m_service.icon(), 0);
    deleteLater();
}
```

**개선 방법**:
expandMacrosShellQuote(exec) 입력값을 검증해주는 함수 사용

---

## 탐지 결과
취약점이 발현되는 부분은 탐지되지 않음