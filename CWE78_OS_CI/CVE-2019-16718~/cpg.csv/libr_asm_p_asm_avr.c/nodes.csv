command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3487935	File	data/converged/CVE-2019-16718~_radare2/libr_asm_p_asm_avr.c								
ANR	3487936	Function	disassemble	16:0:370:613							
ANR	3487937	FunctionDef	"disassemble (RAsm * a , RAsmOp * op , const ut8 * buf , int len)"		3487936	0					
ANR	3487938	CompoundStatement		16:69:439:613	3487936	0					
ANR	3487939	IdentifierDeclStatement	char buf_asm [ 32 ] = { 0 } ;	17:1:442:464	3487936	0	True				
ANR	3487940	IdentifierDecl	buf_asm [ 32 ] = { 0 }		3487936	0					
ANR	3487941	IdentifierDeclType	char [ 32 ]		3487936	0					
ANR	3487942	Identifier	buf_asm		3487936	1					
ANR	3487943	PrimaryExpression	32		3487936	2					
ANR	3487944	AssignmentExpression	buf_asm [ 32 ] = { 0 }		3487936	3		=			
ANR	3487945	Identifier	buf_asm		3487936	0					
ANR	3487946	InitializerList	0		3487936	1					
ANR	3487947	PrimaryExpression	0		3487936	0					
ANR	3487948	ExpressionStatement	"op -> size = avrdis ( buf_asm , a -> pc , buf , len )"	18:1:467:511	3487936	1	True				
ANR	3487949	AssignmentExpression	"op -> size = avrdis ( buf_asm , a -> pc , buf , len )"		3487936	0		=			
ANR	3487950	PtrMemberAccess	op -> size		3487936	0					
ANR	3487951	Identifier	op		3487936	0					
ANR	3487952	Identifier	size		3487936	1					
ANR	3487953	CallExpression	"avrdis ( buf_asm , a -> pc , buf , len )"		3487936	1					
ANR	3487954	Callee	avrdis		3487936	0					
ANR	3487955	Identifier	avrdis		3487936	0					
ANR	3487956	ArgumentList	buf_asm		3487936	1					
ANR	3487957	Argument	buf_asm		3487936	0					
ANR	3487958	Identifier	buf_asm		3487936	0					
ANR	3487959	Argument	a -> pc		3487936	1					
ANR	3487960	PtrMemberAccess	a -> pc		3487936	0					
ANR	3487961	Identifier	a		3487936	0					
ANR	3487962	Identifier	pc		3487936	1					
ANR	3487963	Argument	buf		3487936	2					
ANR	3487964	Identifier	buf		3487936	0					
ANR	3487965	Argument	len		3487936	3					
ANR	3487966	Identifier	len		3487936	0					
ANR	3487967	IfStatement	if ( * buf_asm == '.' )		3487936	2					
ANR	3487968	Condition	* buf_asm == '.'	19:5:518:532	3487936	0	True				
ANR	3487969	EqualityExpression	* buf_asm == '.'		3487936	0		==			
ANR	3487970	UnaryOperationExpression	* buf_asm		3487936	0					
ANR	3487971	UnaryOperator	*		3487936	0					
ANR	3487972	Identifier	buf_asm		3487936	1					
ANR	3487973	PrimaryExpression	'.'		3487936	1					
ANR	3487974	CompoundStatement		4:22:95:95	3487936	1					
ANR	3487975	ExpressionStatement	* buf_asm = 0	20:2:539:551	3487936	0	True				
ANR	3487976	AssignmentExpression	* buf_asm = 0		3487936	0		=			
ANR	3487977	UnaryOperationExpression	* buf_asm		3487936	0					
ANR	3487978	UnaryOperator	*		3487936	0					
ANR	3487979	Identifier	buf_asm		3487936	1					
ANR	3487980	PrimaryExpression	0		3487936	1					
ANR	3487981	ExpressionStatement	"r_strbuf_set ( & op -> buf_asm , buf_asm )"	22:1:557:593	3487936	3	True				
ANR	3487982	CallExpression	"r_strbuf_set ( & op -> buf_asm , buf_asm )"		3487936	0					
ANR	3487983	Callee	r_strbuf_set		3487936	0					
ANR	3487984	Identifier	r_strbuf_set		3487936	0					
ANR	3487985	ArgumentList	& op -> buf_asm		3487936	1					
ANR	3487986	Argument	& op -> buf_asm		3487936	0					
ANR	3487987	UnaryOperationExpression	& op -> buf_asm		3487936	0					
ANR	3487988	UnaryOperator	&		3487936	0					
ANR	3487989	PtrMemberAccess	op -> buf_asm		3487936	1					
ANR	3487990	Identifier	op		3487936	0					
ANR	3487991	Identifier	buf_asm		3487936	1					
ANR	3487992	Argument	buf_asm		3487936	1					
ANR	3487993	Identifier	buf_asm		3487936	0					
ANR	3487994	ReturnStatement	return op -> size ;	23:1:596:611	3487936	4	True				
ANR	3487995	PtrMemberAccess	op -> size		3487936	0					
ANR	3487996	Identifier	op		3487936	0					
ANR	3487997	Identifier	size		3487936	1					
ANR	3487998	ReturnType	static int		3487936	1					
ANR	3487999	Identifier	disassemble		3487936	2					
ANR	3488000	ParameterList	"RAsm * a , RAsmOp * op , const ut8 * buf , int len"		3487936	3					
ANR	3488001	Parameter	RAsm * a	16:23:393:399	3487936	0	True				
ANR	3488002	ParameterType	RAsm *		3487936	0					
ANR	3488003	Identifier	a		3487936	1					
ANR	3488004	Parameter	RAsmOp * op	16:32:402:411	3487936	1	True				
ANR	3488005	ParameterType	RAsmOp *		3487936	0					
ANR	3488006	Identifier	op		3487936	1					
ANR	3488007	Parameter	const ut8 * buf	16:44:414:427	3487936	2	True				
ANR	3488008	ParameterType	const ut8 *		3487936	0					
ANR	3488009	Identifier	buf		3487936	1					
ANR	3488010	Parameter	int len	16:60:430:436	3487936	3	True				
ANR	3488011	ParameterType	int		3487936	0					
ANR	3488012	Identifier	len		3487936	1					
ANR	3488013	CFGEntryNode	ENTRY		3487936		True				
ANR	3488014	CFGExitNode	EXIT		3487936		True				
ANR	3488015	Symbol	a		3487936						
ANR	3488016	Symbol	op		3487936						
ANR	3488017	Symbol	buf		3487936						
ANR	3488018	Symbol	len		3487936						
ANR	3488019	Symbol	* op		3487936						
ANR	3488020	Symbol	op -> size		3487936						
ANR	3488021	Symbol	* buf_asm		3487936						
ANR	3488022	Symbol	* a		3487936						
ANR	3488023	Symbol	avrdis		3487936						
ANR	3488024	Symbol	& op -> buf_asm		3487936						
ANR	3488025	Symbol	buf_asm		3487936						
ANR	3488026	Symbol	a -> pc		3487936						
ANR	3488027	DeclStmt									
ANR	3488028	Decl							extern instructionInfo	extern instructionInfo [ AVR_TOTAL_INSTRUCTIONS ]	instructionSet
ANR	3488029	ClassDef	_specialregs	34:0:878:932							
ANR	3488030	DeclStmt									
ANR	3488031	Decl							char	char [ 4 ]	reg
ANR	3488032	DeclStmt									
ANR	3488033	Decl							int	int	operandType
ANR	3488034	DeclStmt									
ANR	3488035	Decl							struct _specialregs	struct _specialregs	specialregs
ANR	3488036	DeclStmt									
ANR	3488037	Decl							specialregs	specialregs [ REGS_TABLE ]	RegsTable
ANR	3488038	Function	parse_specialreg	49:0:1291:2018							
ANR	3488039	FunctionDef	parse_specialreg (const char * reg)		3488038	0					
ANR	3488040	CompoundStatement		49:45:1336:2018	3488038	0					
ANR	3488041	IdentifierDeclStatement	const int len = strlen ( reg ) ;	50:1:1339:1367	3488038	0	True				
ANR	3488042	IdentifierDecl	len = strlen ( reg )		3488038	0					
ANR	3488043	IdentifierDeclType	const int		3488038	0					
ANR	3488044	Identifier	len		3488038	1					
ANR	3488045	AssignmentExpression	len = strlen ( reg )		3488038	2		=			
ANR	3488046	Identifier	len		3488038	0					
ANR	3488047	CallExpression	strlen ( reg )		3488038	1					
ANR	3488048	Callee	strlen		3488038	0					
ANR	3488049	Identifier	strlen		3488038	0					
ANR	3488050	ArgumentList	reg		3488038	1					
ANR	3488051	Argument	reg		3488038	0					
ANR	3488052	Identifier	reg		3488038	0					
ANR	3488053	IdentifierDeclStatement	"int i , found = - 1 ;"	51:1:1370:1387	3488038	1	True				
ANR	3488054	IdentifierDecl	i		3488038	0					
ANR	3488055	IdentifierDeclType	int		3488038	0					
ANR	3488056	Identifier	i		3488038	1					
ANR	3488057	IdentifierDecl	found = - 1		3488038	1					
ANR	3488058	IdentifierDeclType	int		3488038	0					
ANR	3488059	Identifier	found		3488038	1					
ANR	3488060	AssignmentExpression	found = - 1		3488038	2		=			
ANR	3488061	Identifier	found		3488038	0					
ANR	3488062	UnaryOperationExpression	- 1		3488038	1					
ANR	3488063	UnaryOperator	-		3488038	0					
ANR	3488064	PrimaryExpression	1		3488038	1					
ANR	3488065	IfStatement	if ( len > 0 )		3488038	2					
ANR	3488066	Condition	len > 0	53:5:1395:1401	3488038	0	True				
ANR	3488067	RelationalExpression	len > 0		3488038	0		>			
ANR	3488068	Identifier	len		3488038	0					
ANR	3488069	PrimaryExpression	0		3488038	1					
ANR	3488070	CompoundStatement		5:14:67:67	3488038	1					
ANR	3488071	ForStatement	for ( i = 0 ; i < REGS_TABLE ; i ++ )		3488038	0					
ANR	3488072	ForInit	i = 0 ;	54:7:1413:1418	3488038	0	True				
ANR	3488073	AssignmentExpression	i = 0		3488038	0		=			
ANR	3488074	Identifier	i		3488038	0					
ANR	3488075	PrimaryExpression	0		3488038	1					
ANR	3488076	Condition	i < REGS_TABLE	54:14:1420:1433	3488038	1	True				
ANR	3488077	RelationalExpression	i < REGS_TABLE		3488038	0		<			
ANR	3488078	Identifier	i		3488038	0					
ANR	3488079	Identifier	REGS_TABLE		3488038	1					
ANR	3488080	PostIncDecOperationExpression	i ++	54:30:1436:1438	3488038	2	True				
ANR	3488081	Identifier	i		3488038	0					
ANR	3488082	IncDec	++		3488038	1					
ANR	3488083	CompoundStatement		6:35:104:104	3488038	3					
ANR	3488084	IfStatement	"if ( ! strncmp ( RegsTable [ i ] . reg , reg , 4 ) )"		3488038	0					
ANR	3488085	Condition	"! strncmp ( RegsTable [ i ] . reg , reg , 4 )"	55:7:1450:1484	3488038	0	True				
ANR	3488086	UnaryOperationExpression	"! strncmp ( RegsTable [ i ] . reg , reg , 4 )"		3488038	0					
ANR	3488087	UnaryOperator	!		3488038	0					
ANR	3488088	CallExpression	"strncmp ( RegsTable [ i ] . reg , reg , 4 )"		3488038	1					
ANR	3488089	Callee	strncmp		3488038	0					
ANR	3488090	Identifier	strncmp		3488038	0					
ANR	3488091	ArgumentList	RegsTable [ i ] . reg		3488038	1					
ANR	3488092	Argument	RegsTable [ i ] . reg		3488038	0					
ANR	3488093	MemberAccess	RegsTable [ i ] . reg		3488038	0					
ANR	3488094	ArrayIndexing	RegsTable [ i ]		3488038	0					
ANR	3488095	Identifier	RegsTable		3488038	0					
ANR	3488096	Identifier	i		3488038	1					
ANR	3488097	Identifier	reg		3488038	1					
ANR	3488098	Argument	reg		3488038	1					
ANR	3488099	Identifier	reg		3488038	0					
ANR	3488100	Argument	4		3488038	2					
ANR	3488101	PrimaryExpression	4		3488038	0					
ANR	3488102	CompoundStatement		7:44:150:150	3488038	1					
ANR	3488103	ExpressionStatement	found = RegsTable [ i ] . operandType	56:4:1493:1525	3488038	0	True				
ANR	3488104	AssignmentExpression	found = RegsTable [ i ] . operandType		3488038	0		=			
ANR	3488105	Identifier	found		3488038	0					
ANR	3488106	MemberAccess	RegsTable [ i ] . operandType		3488038	1					
ANR	3488107	ArrayIndexing	RegsTable [ i ]		3488038	0					
ANR	3488108	Identifier	RegsTable		3488038	0					
ANR	3488109	Identifier	i		3488038	1					
ANR	3488110	Identifier	operandType		3488038	1					
ANR	3488111	BreakStatement	break ;	57:4:1531:1536	3488038	1	True				
ANR	3488112	IfStatement	if ( found == - 1 && reg [ 1 ] == '+' )		3488038	1					
ANR	3488113	Condition	found == - 1 && reg [ 1 ] == '+'	62:6:1658:1685	3488038	0	True				
ANR	3488114	AndExpression	found == - 1 && reg [ 1 ] == '+'		3488038	0		&&			
ANR	3488115	EqualityExpression	found == - 1		3488038	0		==			
ANR	3488116	Identifier	found		3488038	0					
ANR	3488117	UnaryOperationExpression	- 1		3488038	1					
ANR	3488118	UnaryOperator	-		3488038	0					
ANR	3488119	PrimaryExpression	1		3488038	1					
ANR	3488120	EqualityExpression	reg [ 1 ] == '+'		3488038	1		==			
ANR	3488121	ArrayIndexing	reg [ 1 ]		3488038	0					
ANR	3488122	Identifier	reg		3488038	0					
ANR	3488123	PrimaryExpression	1		3488038	1					
ANR	3488124	PrimaryExpression	'+'		3488038	1					
ANR	3488125	CompoundStatement		14:36:351:351	3488038	1					
ANR	3488126	IfStatement	if ( reg [ 0 ] == 'y' && len > 2 )		3488038	0					
ANR	3488127	Condition	reg [ 0 ] == 'y' && len > 2	63:7:1697:1720	3488038	0	True				
ANR	3488128	AndExpression	reg [ 0 ] == 'y' && len > 2		3488038	0		&&			
ANR	3488129	EqualityExpression	reg [ 0 ] == 'y'		3488038	0		==			
ANR	3488130	ArrayIndexing	reg [ 0 ]		3488038	0					
ANR	3488131	Identifier	reg		3488038	0					
ANR	3488132	PrimaryExpression	0		3488038	1					
ANR	3488133	PrimaryExpression	'y'		3488038	1					
ANR	3488134	RelationalExpression	len > 2		3488038	1		>			
ANR	3488135	Identifier	len		3488038	0					
ANR	3488136	PrimaryExpression	2		3488038	1					
ANR	3488137	CompoundStatement		15:33:386:386	3488038	1					
ANR	3488138	ExpressionStatement	found = OPERAND_YPQ	64:4:1729:1748	3488038	0	True				
ANR	3488139	AssignmentExpression	found = OPERAND_YPQ		3488038	0		=			
ANR	3488140	Identifier	found		3488038	0					
ANR	3488141	Identifier	OPERAND_YPQ		3488038	1					
ANR	3488142	ElseStatement	else		3488038	0					
ANR	3488143	IfStatement	if ( reg [ 0 ] == 'z' && len > 2 )		3488038	0					
ANR	3488144	Condition	reg [ 0 ] == 'z' && len > 2	65:14:1764:1787	3488038	0	True				
ANR	3488145	AndExpression	reg [ 0 ] == 'z' && len > 2		3488038	0		&&			
ANR	3488146	EqualityExpression	reg [ 0 ] == 'z'		3488038	0		==			
ANR	3488147	ArrayIndexing	reg [ 0 ]		3488038	0					
ANR	3488148	Identifier	reg		3488038	0					
ANR	3488149	PrimaryExpression	0		3488038	1					
ANR	3488150	PrimaryExpression	'z'		3488038	1					
ANR	3488151	RelationalExpression	len > 2		3488038	1		>			
ANR	3488152	Identifier	len		3488038	0					
ANR	3488153	PrimaryExpression	2		3488038	1					
ANR	3488154	CompoundStatement		17:40:453:453	3488038	1					
ANR	3488155	ExpressionStatement	found = OPERAND_ZPQ	66:4:1796:1815	3488038	0	True				
ANR	3488156	AssignmentExpression	found = OPERAND_ZPQ		3488038	0		=			
ANR	3488157	Identifier	found		3488038	0					
ANR	3488158	Identifier	OPERAND_ZPQ		3488038	1					
ANR	3488159	IfStatement	if ( found == - 1 && reg [ 2 ] == '+' )		3488038	2					
ANR	3488160	Condition	found == - 1 && reg [ 2 ] == '+'	69:6:1832:1859	3488038	0	True				
ANR	3488161	AndExpression	found == - 1 && reg [ 2 ] == '+'		3488038	0		&&			
ANR	3488162	EqualityExpression	found == - 1		3488038	0		==			
ANR	3488163	Identifier	found		3488038	0					
ANR	3488164	UnaryOperationExpression	- 1		3488038	1					
ANR	3488165	UnaryOperator	-		3488038	0					
ANR	3488166	PrimaryExpression	1		3488038	1					
ANR	3488167	EqualityExpression	reg [ 2 ] == '+'		3488038	1		==			
ANR	3488168	ArrayIndexing	reg [ 2 ]		3488038	0					
ANR	3488169	Identifier	reg		3488038	0					
ANR	3488170	PrimaryExpression	2		3488038	1					
ANR	3488171	PrimaryExpression	'+'		3488038	1					
ANR	3488172	CompoundStatement		21:36:525:525	3488038	1					
ANR	3488173	IfStatement	if ( reg [ 0 ] == 'y' && len > 2 )		3488038	0					
ANR	3488174	Condition	reg [ 0 ] == 'y' && len > 2	70:7:1871:1894	3488038	0	True				
ANR	3488175	AndExpression	reg [ 0 ] == 'y' && len > 2		3488038	0		&&			
ANR	3488176	EqualityExpression	reg [ 0 ] == 'y'		3488038	0		==			
ANR	3488177	ArrayIndexing	reg [ 0 ]		3488038	0					
ANR	3488178	Identifier	reg		3488038	0					
ANR	3488179	PrimaryExpression	0		3488038	1					
ANR	3488180	PrimaryExpression	'y'		3488038	1					
ANR	3488181	RelationalExpression	len > 2		3488038	1		>			
ANR	3488182	Identifier	len		3488038	0					
ANR	3488183	PrimaryExpression	2		3488038	1					
ANR	3488184	CompoundStatement		22:33:560:560	3488038	1					
ANR	3488185	ExpressionStatement	found = OPERAND_YPQ	71:4:1903:1922	3488038	0	True				
ANR	3488186	AssignmentExpression	found = OPERAND_YPQ		3488038	0		=			
ANR	3488187	Identifier	found		3488038	0					
ANR	3488188	Identifier	OPERAND_YPQ		3488038	1					
ANR	3488189	ElseStatement	else		3488038	0					
ANR	3488190	IfStatement	if ( reg [ 0 ] == 'z' && len > 2 )		3488038	0					
ANR	3488191	Condition	reg [ 0 ] == 'z' && len > 2	72:14:1938:1961	3488038	0	True				
ANR	3488192	AndExpression	reg [ 0 ] == 'z' && len > 2		3488038	0		&&			
ANR	3488193	EqualityExpression	reg [ 0 ] == 'z'		3488038	0		==			
ANR	3488194	ArrayIndexing	reg [ 0 ]		3488038	0					
ANR	3488195	Identifier	reg		3488038	0					
ANR	3488196	PrimaryExpression	0		3488038	1					
ANR	3488197	PrimaryExpression	'z'		3488038	1					
ANR	3488198	RelationalExpression	len > 2		3488038	1		>			
ANR	3488199	Identifier	len		3488038	0					
ANR	3488200	PrimaryExpression	2		3488038	1					
ANR	3488201	CompoundStatement		24:40:627:627	3488038	1					
ANR	3488202	ExpressionStatement	found = OPERAND_ZPQ	73:4:1970:1989	3488038	0	True				
ANR	3488203	AssignmentExpression	found = OPERAND_ZPQ		3488038	0		=			
ANR	3488204	Identifier	found		3488038	0					
ANR	3488205	Identifier	OPERAND_ZPQ		3488038	1					
ANR	3488206	ReturnStatement	return found ;	77:1:2004:2016	3488038	3	True				
ANR	3488207	Identifier	found		3488038	0					
ANR	3488208	ReturnType	static int		3488038	1					
ANR	3488209	Identifier	parse_specialreg		3488038	2					
ANR	3488210	ParameterList	const char * reg		3488038	3					
ANR	3488211	Parameter	const char * reg	49:28:1319:1333	3488038	0	True				
ANR	3488212	ParameterType	const char *		3488038	0					
ANR	3488213	Identifier	reg		3488038	1					
ANR	3488214	CFGEntryNode	ENTRY		3488038		True				
ANR	3488215	CFGExitNode	EXIT		3488038		True				
ANR	3488216	Symbol	RegsTable		3488038						
ANR	3488217	Symbol	REGS_TABLE		3488038						
ANR	3488218	Symbol	RegsTable [ i ] . operandType		3488038						
ANR	3488219	Symbol	i		3488038						
ANR	3488220	Symbol	strlen		3488038						
ANR	3488221	Symbol	strncmp		3488038						
ANR	3488222	Symbol	found		3488038						
ANR	3488223	Symbol	* i		3488038						
ANR	3488224	Symbol	len		3488038						
ANR	3488225	Symbol	reg		3488038						
ANR	3488226	Symbol	OPERAND_YPQ		3488038						
ANR	3488227	Symbol	OPERAND_ZPQ		3488038						
ANR	3488228	Symbol	* RegsTable		3488038						
ANR	3488229	Symbol	* reg		3488038						
ANR	3488230	Symbol	RegsTable [ i ] . reg		3488038						
ANR	3488231	Function	getnum	82:0:2123:2253							
ANR	3488232	FunctionDef	"getnum (RAsm * a , const char * s)"		3488231	0					
ANR	3488233	CompoundStatement		82:42:2165:2253	3488231	0					
ANR	3488234	IfStatement	if ( ! s )		3488231	0					
ANR	3488235	Condition	! s	83:5:2172:2173	3488231	0	True				
ANR	3488236	UnaryOperationExpression	! s		3488231	0					
ANR	3488237	UnaryOperator	!		3488231	0					
ANR	3488238	Identifier	s		3488231	1					
ANR	3488239	CompoundStatement		2:9:10:10	3488231	1					
ANR	3488240	ReturnStatement	return 0 ;	84:2:2180:2188	3488231	0	True				
ANR	3488241	PrimaryExpression	0		3488231	0					
ANR	3488242	IfStatement	if ( * s == '$' )		3488231	1					
ANR	3488243	Condition	* s == '$'	86:5:2198:2206	3488231	0	True				
ANR	3488244	EqualityExpression	* s == '$'		3488231	0		==			
ANR	3488245	UnaryOperationExpression	* s		3488231	0					
ANR	3488246	UnaryOperator	*		3488231	0					
ANR	3488247	Identifier	s		3488231	1					
ANR	3488248	PrimaryExpression	'$'		3488231	1					
ANR	3488249	CompoundStatement		5:16:43:43	3488231	1					
ANR	3488250	ExpressionStatement	s ++	87:2:2213:2216	3488231	0	True				
ANR	3488251	PostIncDecOperationExpression	s ++		3488231	0					
ANR	3488252	Identifier	s		3488231	0					
ANR	3488253	IncDec	++		3488231	1					
ANR	3488254	ReturnStatement	"return r_num_math ( a -> num , s ) ;"	89:1:2222:2251	3488231	2	True				
ANR	3488255	CallExpression	"r_num_math ( a -> num , s )"		3488231	0					
ANR	3488256	Callee	r_num_math		3488231	0					
ANR	3488257	Identifier	r_num_math		3488231	0					
ANR	3488258	ArgumentList	a -> num		3488231	1					
ANR	3488259	Argument	a -> num		3488231	0					
ANR	3488260	PtrMemberAccess	a -> num		3488231	0					
ANR	3488261	Identifier	a		3488231	0					
ANR	3488262	Identifier	num		3488231	1					
ANR	3488263	Argument	s		3488231	1					
ANR	3488264	Identifier	s		3488231	0					
ANR	3488265	ReturnType	static int		3488231	1					
ANR	3488266	Identifier	getnum		3488231	2					
ANR	3488267	ParameterList	"RAsm * a , const char * s"		3488231	3					
ANR	3488268	Parameter	RAsm * a	82:18:2141:2147	3488231	0	True				
ANR	3488269	ParameterType	RAsm *		3488231	0					
ANR	3488270	Identifier	a		3488231	1					
ANR	3488271	Parameter	const char * s	82:27:2150:2162	3488231	1	True				
ANR	3488272	ParameterType	const char *		3488231	0					
ANR	3488273	Identifier	s		3488231	1					
ANR	3488274	CFGEntryNode	ENTRY		3488231		True				
ANR	3488275	CFGExitNode	EXIT		3488231		True				
ANR	3488276	Symbol	a		3488231						
ANR	3488277	Symbol	s		3488231						
ANR	3488278	Symbol	* a		3488231						
ANR	3488279	Symbol	a -> num		3488231						
ANR	3488280	Symbol	* s		3488231						
ANR	3488281	Symbol	r_num_math		3488231						
ANR	3488282	DeclStmt									
ANR	3488283	Decl							int	int	i
ANR	3488284	Decl							int	int	op1
ANR	3488285	Decl							int	int	op2
ANR	3488286	Function	packDataByMask	163:0:5071:5637							
ANR	3488287	FunctionDef	"packDataByMask (uint16_t data , uint16_t mask)"		3488286	0					
ANR	3488288	CompoundStatement		163:61:5132:5637	3488286	0					
ANR	3488289	IdentifierDeclStatement	"int i , j ;"	164:1:5135:5143	3488286	0	True				
ANR	3488290	IdentifierDecl	i		3488286	0					
ANR	3488291	IdentifierDeclType	int		3488286	0					
ANR	3488292	Identifier	i		3488286	1					
ANR	3488293	IdentifierDecl	j		3488286	1					
ANR	3488294	IdentifierDeclType	int		3488286	0					
ANR	3488295	Identifier	j		3488286	1					
ANR	3488296	IdentifierDeclStatement	uint16_t result = 0 ;	165:1:5146:5165	3488286	1	True				
ANR	3488297	IdentifierDecl	result = 0		3488286	0					
ANR	3488298	IdentifierDeclType	uint16_t		3488286	0					
ANR	3488299	Identifier	result		3488286	1					
ANR	3488300	AssignmentExpression	result = 0		3488286	2		=			
ANR	3488301	Identifier	result		3488286	0					
ANR	3488302	PrimaryExpression	0		3488286	1					
ANR	3488303	ForStatement	"for ( i = 0 , j = 0 ; i < 16 ; i ++ )"		3488286	2					
ANR	3488304	ForInit	"i = 0 , j = 0 ;"	169:6:5268:5280	3488286	0	True				
ANR	3488305	Expression	"i = 0 , j = 0"		3488286	0					
ANR	3488306	AssignmentExpression	i = 0		3488286	0		=			
ANR	3488307	Identifier	i		3488286	0					
ANR	3488308	PrimaryExpression	0		3488286	1					
ANR	3488309	AssignmentExpression	j = 0		3488286	1		=			
ANR	3488310	Identifier	j		3488286	0					
ANR	3488311	PrimaryExpression	0		3488286	1					
ANR	3488312	Condition	i < 16	169:20:5282:5287	3488286	1	True				
ANR	3488313	RelationalExpression	i < 16		3488286	0		<			
ANR	3488314	Identifier	i		3488286	0					
ANR	3488315	PrimaryExpression	16		3488286	1					
ANR	3488316	PostIncDecOperationExpression	i ++	169:28:5290:5292	3488286	2	True				
ANR	3488317	Identifier	i		3488286	0					
ANR	3488318	IncDec	++		3488286	1					
ANR	3488319	CompoundStatement		7:33:162:162	3488286	3					
ANR	3488320	IfStatement	if ( mask & ( 1 << i ) )		3488286	0					
ANR	3488321	Condition	mask & ( 1 << i )	171:6:5347:5359	3488286	0	True				
ANR	3488322	BitAndExpression	mask & ( 1 << i )		3488286	0		&			
ANR	3488323	Identifier	mask		3488286	0					
ANR	3488324	ShiftExpression	1 << i		3488286	1		<<			
ANR	3488325	PrimaryExpression	1		3488286	0					
ANR	3488326	Identifier	i		3488286	1					
ANR	3488327	CompoundStatement		9:21:229:229	3488286	1					
ANR	3488328	IfStatement	if ( ( data & ( 1 << j ) ) != 0 )		3488286	0					
ANR	3488329	Condition	( data & ( 1 << j ) ) != 0	174:7:5510:5529	3488286	0	True				
ANR	3488330	EqualityExpression	( data & ( 1 << j ) ) != 0		3488286	0		!=			
ANR	3488331	BitAndExpression	data & ( 1 << j )		3488286	0		&			
ANR	3488332	Identifier	data		3488286	0					
ANR	3488333	ShiftExpression	1 << j		3488286	1		<<			
ANR	3488334	PrimaryExpression	1		3488286	0					
ANR	3488335	Identifier	j		3488286	1					
ANR	3488336	PrimaryExpression	0		3488286	1					
ANR	3488337	CompoundStatement		12:29:399:399	3488286	1					
ANR	3488338	ExpressionStatement	result |= ( 1 << i )	175:4:5538:5554	3488286	0	True				
ANR	3488339	AssignmentExpression	result |= ( 1 << i )		3488286	0		|=			
ANR	3488340	Identifier	result		3488286	0					
ANR	3488341	ShiftExpression	1 << i		3488286	1		<<			
ANR	3488342	PrimaryExpression	1		3488286	0					
ANR	3488343	Identifier	i		3488286	1					
ANR	3488344	ExpressionStatement	j ++	178:3:5609:5612	3488286	1	True				
ANR	3488345	PostIncDecOperationExpression	j ++		3488286	0					
ANR	3488346	Identifier	j		3488286	0					
ANR	3488347	IncDec	++		3488286	1					
ANR	3488348	ReturnStatement	return result ;	181:1:5622:5635	3488286	3	True				
ANR	3488349	Identifier	result		3488286	0					
ANR	3488350	ReturnType	static uint16_t		3488286	1					
ANR	3488351	Identifier	packDataByMask		3488286	2					
ANR	3488352	ParameterList	"uint16_t data , uint16_t mask"		3488286	3					
ANR	3488353	Parameter	uint16_t data	163:31:5102:5114	3488286	0	True				
ANR	3488354	ParameterType	uint16_t		3488286	0					
ANR	3488355	Identifier	data		3488286	1					
ANR	3488356	Parameter	uint16_t mask	163:46:5117:5129	3488286	1	True				
ANR	3488357	ParameterType	uint16_t		3488286	0					
ANR	3488358	Identifier	mask		3488286	1					
ANR	3488359	CFGEntryNode	ENTRY		3488286		True				
ANR	3488360	CFGExitNode	EXIT		3488286		True				
ANR	3488361	Symbol	result		3488286						
ANR	3488362	Symbol	data		3488286						
ANR	3488363	Symbol	i		3488286						
ANR	3488364	Symbol	j		3488286						
ANR	3488365	Symbol	mask		3488286						
ANR	3488366	Function	parse_registerpair	184:0:5640:7014							
ANR	3488367	FunctionDef	parse_registerpair (const char * operand)		3488366	0					
ANR	3488368	CompoundStatement		184:51:5691:7014	3488366	0					
ANR	3488369	IdentifierDeclStatement	int res = - 1 ;	185:1:5694:5706	3488366	0	True				
ANR	3488370	IdentifierDecl	res = - 1		3488366	0					
ANR	3488371	IdentifierDeclType	int		3488366	0					
ANR	3488372	Identifier	res		3488366	1					
ANR	3488373	AssignmentExpression	res = - 1		3488366	2		=			
ANR	3488374	Identifier	res		3488366	0					
ANR	3488375	UnaryOperationExpression	- 1		3488366	1					
ANR	3488376	UnaryOperator	-		3488366	0					
ANR	3488377	PrimaryExpression	1		3488366	1					
ANR	3488378	IdentifierDeclStatement	"char * first , * second , * op ;"	186:1:5709:5734	3488366	1	True				
ANR	3488379	IdentifierDecl	* first		3488366	0					
ANR	3488380	IdentifierDeclType	char *		3488366	0					
ANR	3488381	Identifier	first		3488366	1					
ANR	3488382	IdentifierDecl	* second		3488366	1					
ANR	3488383	IdentifierDeclType	char *		3488366	0					
ANR	3488384	Identifier	second		3488366	1					
ANR	3488385	IdentifierDecl	* op		3488366	2					
ANR	3488386	IdentifierDeclType	char *		3488366	0					
ANR	3488387	Identifier	op		3488366	1					
ANR	3488388	IdentifierDeclStatement	"int fnum , snum ;"	187:1:5737:5751	3488366	2	True				
ANR	3488389	IdentifierDecl	fnum		3488366	0					
ANR	3488390	IdentifierDeclType	int		3488366	0					
ANR	3488391	Identifier	fnum		3488366	1					
ANR	3488392	IdentifierDecl	snum		3488366	1					
ANR	3488393	IdentifierDeclType	int		3488366	0					
ANR	3488394	Identifier	snum		3488366	1					
ANR	3488395	ExpressionStatement	op = strdup ( operand )	189:1:5755:5776	3488366	3	True				
ANR	3488396	AssignmentExpression	op = strdup ( operand )		3488366	0		=			
ANR	3488397	Identifier	op		3488366	0					
ANR	3488398	CallExpression	strdup ( operand )		3488366	1					
ANR	3488399	Callee	strdup		3488366	0					
ANR	3488400	Identifier	strdup		3488366	0					
ANR	3488401	ArgumentList	operand		3488366	1					
ANR	3488402	Argument	operand		3488366	0					
ANR	3488403	Identifier	operand		3488366	0					
ANR	3488404	ExpressionStatement	"first = strtok ( op , "":"" )"	190:1:5779:5803	3488366	4	True				
ANR	3488405	AssignmentExpression	"first = strtok ( op , "":"" )"		3488366	0		=			
ANR	3488406	Identifier	first		3488366	0					
ANR	3488407	CallExpression	"strtok ( op , "":"" )"		3488366	1					
ANR	3488408	Callee	strtok		3488366	0					
ANR	3488409	Identifier	strtok		3488366	0					
ANR	3488410	ArgumentList	op		3488366	1					
ANR	3488411	Argument	op		3488366	0					
ANR	3488412	Identifier	op		3488366	0					
ANR	3488413	Argument	""":"""		3488366	1					
ANR	3488414	PrimaryExpression	""":"""		3488366	0					
ANR	3488415	IfStatement	if ( ! first || strlen ( first ) < 2 )		3488366	5					
ANR	3488416	Condition	! first || strlen ( first ) < 2	192:5:5811:5838	3488366	0	True				
ANR	3488417	OrExpression	! first || strlen ( first ) < 2		3488366	0		||			
ANR	3488418	UnaryOperationExpression	! first		3488366	0					
ANR	3488419	UnaryOperator	!		3488366	0					
ANR	3488420	Identifier	first		3488366	1					
ANR	3488421	RelationalExpression	strlen ( first ) < 2		3488366	1		<			
ANR	3488422	CallExpression	strlen ( first )		3488366	0					
ANR	3488423	Callee	strlen		3488366	0					
ANR	3488424	Identifier	strlen		3488366	0					
ANR	3488425	ArgumentList	first		3488366	1					
ANR	3488426	Argument	first		3488366	0					
ANR	3488427	Identifier	first		3488366	0					
ANR	3488428	PrimaryExpression	2		3488366	1					
ANR	3488429	CompoundStatement		9:35:149:149	3488366	1					
ANR	3488430	ExpressionStatement	free ( op )	193:2:5845:5854	3488366	0	True				
ANR	3488431	CallExpression	free ( op )		3488366	0					
ANR	3488432	Callee	free		3488366	0					
ANR	3488433	Identifier	free		3488366	0					
ANR	3488434	ArgumentList	op		3488366	1					
ANR	3488435	Argument	op		3488366	0					
ANR	3488436	Identifier	op		3488366	0					
ANR	3488437	ReturnStatement	return - 1 ;	194:2:5858:5867	3488366	1	True				
ANR	3488438	UnaryOperationExpression	- 1		3488366	0					
ANR	3488439	UnaryOperator	-		3488366	0					
ANR	3488440	PrimaryExpression	1		3488366	1					
ANR	3488441	ExpressionStatement	"second = strtok ( NULL , "":"" )"	197:1:5874:5901	3488366	6	True				
ANR	3488442	AssignmentExpression	"second = strtok ( NULL , "":"" )"		3488366	0		=			
ANR	3488443	Identifier	second		3488366	0					
ANR	3488444	CallExpression	"strtok ( NULL , "":"" )"		3488366	1					
ANR	3488445	Callee	strtok		3488366	0					
ANR	3488446	Identifier	strtok		3488366	0					
ANR	3488447	ArgumentList	NULL		3488366	1					
ANR	3488448	Argument	NULL		3488366	0					
ANR	3488449	Identifier	NULL		3488366	0					
ANR	3488450	Argument	""":"""		3488366	1					
ANR	3488451	PrimaryExpression	""":"""		3488366	0					
ANR	3488452	IfStatement	if ( second && strlen ( second ) < 2 )		3488366	7					
ANR	3488453	Condition	second && strlen ( second ) < 2	204:5:6129:6157	3488366	0	True				
ANR	3488454	AndExpression	second && strlen ( second ) < 2		3488366	0		&&			
ANR	3488455	Identifier	second		3488366	0					
ANR	3488456	RelationalExpression	strlen ( second ) < 2		3488366	1		<			
ANR	3488457	CallExpression	strlen ( second )		3488366	0					
ANR	3488458	Callee	strlen		3488366	0					
ANR	3488459	Identifier	strlen		3488366	0					
ANR	3488460	ArgumentList	second		3488366	1					
ANR	3488461	Argument	second		3488366	0					
ANR	3488462	Identifier	second		3488366	0					
ANR	3488463	PrimaryExpression	2		3488366	1					
ANR	3488464	CompoundStatement		21:36:468:468	3488366	1					
ANR	3488465	IfStatement	if ( first [ 0 ] == 'r' && second [ 0 ] == 'r' )		3488366	0					
ANR	3488466	Condition	first [ 0 ] == 'r' && second [ 0 ] == 'r'	208:6:6313:6347	3488366	0	True				
ANR	3488467	AndExpression	first [ 0 ] == 'r' && second [ 0 ] == 'r'		3488366	0		&&			
ANR	3488468	EqualityExpression	first [ 0 ] == 'r'		3488366	0		==			
ANR	3488469	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488470	Identifier	first		3488366	0					
ANR	3488471	PrimaryExpression	0		3488366	1					
ANR	3488472	PrimaryExpression	'r'		3488366	1					
ANR	3488473	EqualityExpression	second [ 0 ] == 'r'		3488366	1		==			
ANR	3488474	ArrayIndexing	second [ 0 ]		3488366	0					
ANR	3488475	Identifier	second		3488366	0					
ANR	3488476	PrimaryExpression	0		3488366	1					
ANR	3488477	PrimaryExpression	'r'		3488366	1					
ANR	3488478	CompoundStatement		25:43:658:658	3488366	1					
ANR	3488479	ExpressionStatement	fnum = atoi ( first + 1 )	209:3:6355:6375	3488366	0	True				
ANR	3488480	AssignmentExpression	fnum = atoi ( first + 1 )		3488366	0		=			
ANR	3488481	Identifier	fnum		3488366	0					
ANR	3488482	CallExpression	atoi ( first + 1 )		3488366	1					
ANR	3488483	Callee	atoi		3488366	0					
ANR	3488484	Identifier	atoi		3488366	0					
ANR	3488485	ArgumentList	first + 1		3488366	1					
ANR	3488486	Argument	first + 1		3488366	0					
ANR	3488487	AdditiveExpression	first + 1		3488366	0		+			
ANR	3488488	Identifier	first		3488366	0					
ANR	3488489	PrimaryExpression	1		3488366	1					
ANR	3488490	ExpressionStatement	snum = atoi ( second + 1 )	210:3:6380:6401	3488366	1	True				
ANR	3488491	AssignmentExpression	snum = atoi ( second + 1 )		3488366	0		=			
ANR	3488492	Identifier	snum		3488366	0					
ANR	3488493	CallExpression	atoi ( second + 1 )		3488366	1					
ANR	3488494	Callee	atoi		3488366	0					
ANR	3488495	Identifier	atoi		3488366	0					
ANR	3488496	ArgumentList	second + 1		3488366	1					
ANR	3488497	Argument	second + 1		3488366	0					
ANR	3488498	AdditiveExpression	second + 1		3488366	0		+			
ANR	3488499	Identifier	second		3488366	0					
ANR	3488500	PrimaryExpression	1		3488366	1					
ANR	3488501	IfStatement	if ( fnum > snum && snum >= 0 && snum <= 30 )		3488366	2					
ANR	3488502	Condition	fnum > snum && snum >= 0 && snum <= 30	211:7:6410:6447	3488366	0	True				
ANR	3488503	AndExpression	fnum > snum && snum >= 0 && snum <= 30		3488366	0		&&			
ANR	3488504	RelationalExpression	fnum > snum		3488366	0		>			
ANR	3488505	Identifier	fnum		3488366	0					
ANR	3488506	Identifier	snum		3488366	1					
ANR	3488507	AndExpression	snum >= 0 && snum <= 30		3488366	1		&&			
ANR	3488508	RelationalExpression	snum >= 0		3488366	0		>=			
ANR	3488509	Identifier	snum		3488366	0					
ANR	3488510	PrimaryExpression	0		3488366	1					
ANR	3488511	RelationalExpression	snum <= 30		3488366	1		<=			
ANR	3488512	Identifier	snum		3488366	0					
ANR	3488513	PrimaryExpression	30		3488366	1					
ANR	3488514	CompoundStatement		28:47:758:758	3488366	1					
ANR	3488515	ExpressionStatement	res = snum / 2	212:4:6456:6470	3488366	0	True				
ANR	3488516	AssignmentExpression	res = snum / 2		3488366	0		=			
ANR	3488517	Identifier	res		3488366	0					
ANR	3488518	MultiplicativeExpression	snum / 2		3488366	1		/			
ANR	3488519	Identifier	snum		3488366	0					
ANR	3488520	PrimaryExpression	2		3488366	1					
ANR	3488521	ElseStatement	else		3488366	0					
ANR	3488522	IfStatement	if ( first [ 0 ] >= 'x' && first [ 0 ] <= 'z' && second [ 0 ] >= 'x' && second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l' )		3488366	0					
ANR	3488523	Condition	first [ 0 ] >= 'x' && first [ 0 ] <= 'z' && second [ 0 ] >= 'x' && second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l'	214:13:6490:6610	3488366	0	True				
ANR	3488524	AndExpression	first [ 0 ] >= 'x' && first [ 0 ] <= 'z' && second [ 0 ] >= 'x' && second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l'		3488366	0		&&			
ANR	3488525	RelationalExpression	first [ 0 ] >= 'x'		3488366	0		>=			
ANR	3488526	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488527	Identifier	first		3488366	0					
ANR	3488528	PrimaryExpression	0		3488366	1					
ANR	3488529	PrimaryExpression	'x'		3488366	1					
ANR	3488530	AndExpression	first [ 0 ] <= 'z' && second [ 0 ] >= 'x' && second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l'		3488366	1		&&			
ANR	3488531	RelationalExpression	first [ 0 ] <= 'z'		3488366	0		<=			
ANR	3488532	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488533	Identifier	first		3488366	0					
ANR	3488534	PrimaryExpression	0		3488366	1					
ANR	3488535	PrimaryExpression	'z'		3488366	1					
ANR	3488536	AndExpression	second [ 0 ] >= 'x' && second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l'		3488366	1		&&			
ANR	3488537	RelationalExpression	second [ 0 ] >= 'x'		3488366	0		>=			
ANR	3488538	ArrayIndexing	second [ 0 ]		3488366	0					
ANR	3488539	Identifier	second		3488366	0					
ANR	3488540	PrimaryExpression	0		3488366	1					
ANR	3488541	PrimaryExpression	'x'		3488366	1					
ANR	3488542	AndExpression	second [ 0 ] <= 'z' && first [ 1 ] == 'h' && second [ 1 ] == 'l'		3488366	1		&&			
ANR	3488543	RelationalExpression	second [ 0 ] <= 'z'		3488366	0		<=			
ANR	3488544	ArrayIndexing	second [ 0 ]		3488366	0					
ANR	3488545	Identifier	second		3488366	0					
ANR	3488546	PrimaryExpression	0		3488366	1					
ANR	3488547	PrimaryExpression	'z'		3488366	1					
ANR	3488548	AndExpression	first [ 1 ] == 'h' && second [ 1 ] == 'l'		3488366	1		&&			
ANR	3488549	EqualityExpression	first [ 1 ] == 'h'		3488366	0		==			
ANR	3488550	ArrayIndexing	first [ 1 ]		3488366	0					
ANR	3488551	Identifier	first		3488366	0					
ANR	3488552	PrimaryExpression	1		3488366	1					
ANR	3488553	PrimaryExpression	'h'		3488366	1					
ANR	3488554	EqualityExpression	second [ 1 ] == 'l'		3488366	1		==			
ANR	3488555	ArrayIndexing	second [ 1 ]		3488366	0					
ANR	3488556	Identifier	second		3488366	0					
ANR	3488557	PrimaryExpression	1		3488366	1					
ANR	3488558	PrimaryExpression	'l'		3488366	1					
ANR	3488559	CompoundStatement		33:44:921:921	3488366	1					
ANR	3488560	ExpressionStatement	res = ( 2 - ( 'z' - first [ 0 ] ) ) + 12	218:3:6696:6729	3488366	0	True				
ANR	3488561	AssignmentExpression	res = ( 2 - ( 'z' - first [ 0 ] ) ) + 12		3488366	0		=			
ANR	3488562	Identifier	res		3488366	0					
ANR	3488563	AdditiveExpression	( 2 - ( 'z' - first [ 0 ] ) ) + 12		3488366	1		+			
ANR	3488564	AdditiveExpression	2 - ( 'z' - first [ 0 ] )		3488366	0		-			
ANR	3488565	PrimaryExpression	2		3488366	0					
ANR	3488566	AdditiveExpression	'z' - first [ 0 ]		3488366	1		-			
ANR	3488567	PrimaryExpression	'z'		3488366	0					
ANR	3488568	ArrayIndexing	first [ 0 ]		3488366	1					
ANR	3488569	Identifier	first		3488366	0					
ANR	3488570	PrimaryExpression	0		3488366	1					
ANR	3488571	PrimaryExpression	12		3488366	1					
ANR	3488572	ElseStatement	else		3488366	0					
ANR	3488573	CompoundStatement		37:8:1051:1051	3488366	0					
ANR	3488574	IfStatement	if ( first [ 0 ] == 'r' )		3488366	0					
ANR	3488575	Condition	first [ 0 ] == 'r'	222:6:6790:6804	3488366	0	True				
ANR	3488576	EqualityExpression	first [ 0 ] == 'r'		3488366	0		==			
ANR	3488577	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488578	Identifier	first		3488366	0					
ANR	3488579	PrimaryExpression	0		3488366	1					
ANR	3488580	PrimaryExpression	'r'		3488366	1					
ANR	3488581	CompoundStatement		39:23:1115:1115	3488366	1					
ANR	3488582	ExpressionStatement	snum = atoi ( first + 1 )	223:3:6812:6832	3488366	0	True				
ANR	3488583	AssignmentExpression	snum = atoi ( first + 1 )		3488366	0		=			
ANR	3488584	Identifier	snum		3488366	0					
ANR	3488585	CallExpression	atoi ( first + 1 )		3488366	1					
ANR	3488586	Callee	atoi		3488366	0					
ANR	3488587	Identifier	atoi		3488366	0					
ANR	3488588	ArgumentList	first + 1		3488366	1					
ANR	3488589	Argument	first + 1		3488366	0					
ANR	3488590	AdditiveExpression	first + 1		3488366	0		+			
ANR	3488591	Identifier	first		3488366	0					
ANR	3488592	PrimaryExpression	1		3488366	1					
ANR	3488593	IfStatement	if ( snum >= 0 && snum <= 30 )		3488366	1					
ANR	3488594	Condition	snum >= 0 && snum <= 30	224:7:6841:6863	3488366	0	True				
ANR	3488595	AndExpression	snum >= 0 && snum <= 30		3488366	0		&&			
ANR	3488596	RelationalExpression	snum >= 0		3488366	0		>=			
ANR	3488597	Identifier	snum		3488366	0					
ANR	3488598	PrimaryExpression	0		3488366	1					
ANR	3488599	RelationalExpression	snum <= 30		3488366	1		<=			
ANR	3488600	Identifier	snum		3488366	0					
ANR	3488601	PrimaryExpression	30		3488366	1					
ANR	3488602	CompoundStatement		41:32:1174:1174	3488366	1					
ANR	3488603	ExpressionStatement	res = snum / 2	225:4:6872:6886	3488366	0	True				
ANR	3488604	AssignmentExpression	res = snum / 2		3488366	0		=			
ANR	3488605	Identifier	res		3488366	0					
ANR	3488606	MultiplicativeExpression	snum / 2		3488366	1		/			
ANR	3488607	Identifier	snum		3488366	0					
ANR	3488608	PrimaryExpression	2		3488366	1					
ANR	3488609	ElseStatement	else		3488366	0					
ANR	3488610	IfStatement	if ( first [ 0 ] >= 'x' && first [ 0 ] <= 'z' )		3488366	0					
ANR	3488611	Condition	first [ 0 ] >= 'x' && first [ 0 ] <= 'z'	227:13:6906:6939	3488366	0	True				
ANR	3488612	AndExpression	first [ 0 ] >= 'x' && first [ 0 ] <= 'z'		3488366	0		&&			
ANR	3488613	RelationalExpression	first [ 0 ] >= 'x'		3488366	0		>=			
ANR	3488614	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488615	Identifier	first		3488366	0					
ANR	3488616	PrimaryExpression	0		3488366	1					
ANR	3488617	PrimaryExpression	'x'		3488366	1					
ANR	3488618	RelationalExpression	first [ 0 ] <= 'z'		3488366	1		<=			
ANR	3488619	ArrayIndexing	first [ 0 ]		3488366	0					
ANR	3488620	Identifier	first		3488366	0					
ANR	3488621	PrimaryExpression	0		3488366	1					
ANR	3488622	PrimaryExpression	'z'		3488366	1					
ANR	3488623	CompoundStatement		44:49:1250:1250	3488366	1					
ANR	3488624	ExpressionStatement	res = ( 2 - ( 'z' - first [ 0 ] ) ) + 12	228:3:6947:6980	3488366	0	True				
ANR	3488625	AssignmentExpression	res = ( 2 - ( 'z' - first [ 0 ] ) ) + 12		3488366	0		=			
ANR	3488626	Identifier	res		3488366	0					
ANR	3488627	AdditiveExpression	( 2 - ( 'z' - first [ 0 ] ) ) + 12		3488366	1		+			
ANR	3488628	AdditiveExpression	2 - ( 'z' - first [ 0 ] )		3488366	0		-			
ANR	3488629	PrimaryExpression	2		3488366	0					
ANR	3488630	AdditiveExpression	'z' - first [ 0 ]		3488366	1		-			
ANR	3488631	PrimaryExpression	'z'		3488366	0					
ANR	3488632	ArrayIndexing	first [ 0 ]		3488366	1					
ANR	3488633	Identifier	first		3488366	0					
ANR	3488634	PrimaryExpression	0		3488366	1					
ANR	3488635	PrimaryExpression	12		3488366	1					
ANR	3488636	ExpressionStatement	free ( op )	231:1:6990:6999	3488366	8	True				
ANR	3488637	CallExpression	free ( op )		3488366	0					
ANR	3488638	Callee	free		3488366	0					
ANR	3488639	Identifier	free		3488366	0					
ANR	3488640	ArgumentList	op		3488366	1					
ANR	3488641	Argument	op		3488366	0					
ANR	3488642	Identifier	op		3488366	0					
ANR	3488643	ReturnStatement	return res ;	232:1:7002:7012	3488366	9	True				
ANR	3488644	Identifier	res		3488366	0					
ANR	3488645	ReturnType	static int		3488366	1					
ANR	3488646	Identifier	parse_registerpair		3488366	2					
ANR	3488647	ParameterList	const char * operand		3488366	3					
ANR	3488648	Parameter	const char * operand	184:30:5670:5688	3488366	0	True				
ANR	3488649	ParameterType	const char *		3488366	0					
ANR	3488650	Identifier	operand		3488366	1					
ANR	3488651	CFGEntryNode	ENTRY		3488366		True				
ANR	3488652	CFGExitNode	EXIT		3488366		True				
ANR	3488653	Symbol	atoi		3488366						
ANR	3488654	Symbol	res		3488366						
ANR	3488655	Symbol	op		3488366						
ANR	3488656	Symbol	NULL		3488366						
ANR	3488657	Symbol	snum		3488366						
ANR	3488658	Symbol	strtok		3488366						
ANR	3488659	Symbol	second		3488366						
ANR	3488660	Symbol	fnum		3488366						
ANR	3488661	Symbol	strlen		3488366						
ANR	3488662	Symbol	* first		3488366						
ANR	3488663	Symbol	strdup		3488366						
ANR	3488664	Symbol	operand		3488366						
ANR	3488665	Symbol	first		3488366						
ANR	3488666	Symbol	* second		3488366						
ANR	3488667	Function	assemble_operand	236:0:7079:9423							
ANR	3488668	FunctionDef	"assemble_operand (RAsm * a , const char * operand , int type , uint32_t * res)"		3488667	0					
ANR	3488669	CompoundStatement		236:83:7162:9423	3488667	0					
ANR	3488670	IdentifierDeclStatement	int ret = - 1 ;	237:1:7165:7177	3488667	0	True				
ANR	3488671	IdentifierDecl	ret = - 1		3488667	0					
ANR	3488672	IdentifierDeclType	int		3488667	0					
ANR	3488673	Identifier	ret		3488667	1					
ANR	3488674	AssignmentExpression	ret = - 1		3488667	2		=			
ANR	3488675	Identifier	ret		3488667	0					
ANR	3488676	UnaryOperationExpression	- 1		3488667	1					
ANR	3488677	UnaryOperator	-		3488667	0					
ANR	3488678	PrimaryExpression	1		3488667	1					
ANR	3488679	IdentifierDeclStatement	int temp ;	238:1:7180:7188	3488667	1	True				
ANR	3488680	IdentifierDecl	temp		3488667	0					
ANR	3488681	IdentifierDeclType	int		3488667	0					
ANR	3488682	Identifier	temp		3488667	1					
ANR	3488683	SwitchStatement	switch ( type )		3488667	2					
ANR	3488684	Condition	type	240:9:7200:7203	3488667	0	True				
ANR	3488685	Identifier	type		3488667	0					
ANR	3488686	CompoundStatement		5:15:43:43	3488667	1					
ANR	3488687	Label	case OPERAND_REGISTER_EVEN_PAIR :	241:1:7209:7240	3488667	0	True				
ANR	3488688	Identifier	OPERAND_REGISTER_EVEN_PAIR		3488667	0					
ANR	3488689	ExpressionStatement	* res = parse_registerpair ( operand )	242:2:7244:7278	3488667	1	True				
ANR	3488690	AssignmentExpression	* res = parse_registerpair ( operand )		3488667	0		=			
ANR	3488691	UnaryOperationExpression	* res		3488667	0					
ANR	3488692	UnaryOperator	*		3488667	0					
ANR	3488693	Identifier	res		3488667	1					
ANR	3488694	CallExpression	parse_registerpair ( operand )		3488667	1					
ANR	3488695	Callee	parse_registerpair		3488667	0					
ANR	3488696	Identifier	parse_registerpair		3488667	0					
ANR	3488697	ArgumentList	operand		3488667	1					
ANR	3488698	Argument	operand		3488667	0					
ANR	3488699	Identifier	operand		3488667	0					
ANR	3488700	IfStatement	if ( * res > 0 )		3488667	2					
ANR	3488701	Condition	* res > 0	243:6:7286:7293	3488667	0	True				
ANR	3488702	RelationalExpression	* res > 0		3488667	0		>			
ANR	3488703	UnaryOperationExpression	* res		3488667	0					
ANR	3488704	UnaryOperator	*		3488667	0					
ANR	3488705	Identifier	res		3488667	1					
ANR	3488706	PrimaryExpression	0		3488667	1					
ANR	3488707	CompoundStatement		8:16:133:133	3488667	1					
ANR	3488708	ExpressionStatement	ret = 0	244:3:7301:7308	3488667	0	True				
ANR	3488709	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488710	Identifier	ret		3488667	0					
ANR	3488711	PrimaryExpression	0		3488667	1					
ANR	3488712	BreakStatement	break ;	246:2:7316:7321	3488667	3	True				
ANR	3488713	Label	case OPERAND_REGISTER_EVEN_PAIR_STARTR24 :	247:1:7324:7364	3488667	4	True				
ANR	3488714	Identifier	OPERAND_REGISTER_EVEN_PAIR_STARTR24		3488667	0					
ANR	3488715	ExpressionStatement	* res = parse_registerpair ( operand )	248:2:7368:7402	3488667	5	True				
ANR	3488716	AssignmentExpression	* res = parse_registerpair ( operand )		3488667	0		=			
ANR	3488717	UnaryOperationExpression	* res		3488667	0					
ANR	3488718	UnaryOperator	*		3488667	0					
ANR	3488719	Identifier	res		3488667	1					
ANR	3488720	CallExpression	parse_registerpair ( operand )		3488667	1					
ANR	3488721	Callee	parse_registerpair		3488667	0					
ANR	3488722	Identifier	parse_registerpair		3488667	0					
ANR	3488723	ArgumentList	operand		3488667	1					
ANR	3488724	Argument	operand		3488667	0					
ANR	3488725	Identifier	operand		3488667	0					
ANR	3488726	IfStatement	if ( * res >= 12 )		3488667	6					
ANR	3488727	Condition	* res >= 12	250:6:7462:7471	3488667	0	True				
ANR	3488728	RelationalExpression	* res >= 12		3488667	0		>=			
ANR	3488729	UnaryOperationExpression	* res		3488667	0					
ANR	3488730	UnaryOperator	*		3488667	0					
ANR	3488731	Identifier	res		3488667	1					
ANR	3488732	PrimaryExpression	12		3488667	1					
ANR	3488733	CompoundStatement		15:18:311:311	3488667	1					
ANR	3488734	ExpressionStatement	* res -= 12	251:3:7479:7489	3488667	0	True				
ANR	3488735	AssignmentExpression	* res -= 12		3488667	0		-=			
ANR	3488736	UnaryOperationExpression	* res		3488667	0					
ANR	3488737	UnaryOperator	*		3488667	0					
ANR	3488738	Identifier	res		3488667	1					
ANR	3488739	PrimaryExpression	12		3488667	1					
ANR	3488740	ExpressionStatement	ret = 0	252:3:7494:7501	3488667	1	True				
ANR	3488741	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488742	Identifier	ret		3488667	0					
ANR	3488743	PrimaryExpression	0		3488667	1					
ANR	3488744	BreakStatement	break ;	254:2:7509:7514	3488667	7	True				
ANR	3488745	Label	case OPERAND_BRANCH_ADDRESS :	255:1:7517:7544	3488667	8	True				
ANR	3488746	Identifier	OPERAND_BRANCH_ADDRESS		3488667	0					
ANR	3488747	Label	case OPERAND_RELATIVE_ADDRESS :	256:1:7547:7576	3488667	9	True				
ANR	3488748	Identifier	OPERAND_RELATIVE_ADDRESS		3488667	0					
ANR	3488749	ExpressionStatement	"temp = getnum ( a , operand )"	257:2:7640:7666	3488667	10	True				
ANR	3488750	AssignmentExpression	"temp = getnum ( a , operand )"		3488667	0		=			
ANR	3488751	Identifier	temp		3488667	0					
ANR	3488752	CallExpression	"getnum ( a , operand )"		3488667	1					
ANR	3488753	Callee	getnum		3488667	0					
ANR	3488754	Identifier	getnum		3488667	0					
ANR	3488755	ArgumentList	a		3488667	1					
ANR	3488756	Argument	a		3488667	0					
ANR	3488757	Identifier	a		3488667	0					
ANR	3488758	Argument	operand		3488667	1					
ANR	3488759	Identifier	operand		3488667	0					
ANR	3488760	IfStatement	if ( a -> pc || ( operand [ 0 ] != '+' && operand [ 0 ] != '-' ) )		3488667	11					
ANR	3488761	Condition	a -> pc || ( operand [ 0 ] != '+' && operand [ 0 ] != '-' )	262:5:7875:7923	3488667	0	True				
ANR	3488762	OrExpression	a -> pc || ( operand [ 0 ] != '+' && operand [ 0 ] != '-' )		3488667	0		||			
ANR	3488763	PtrMemberAccess	a -> pc		3488667	0					
ANR	3488764	Identifier	a		3488667	0					
ANR	3488765	Identifier	pc		3488667	1					
ANR	3488766	AndExpression	operand [ 0 ] != '+' && operand [ 0 ] != '-'		3488667	1		&&			
ANR	3488767	EqualityExpression	operand [ 0 ] != '+'		3488667	0		!=			
ANR	3488768	ArrayIndexing	operand [ 0 ]		3488667	0					
ANR	3488769	Identifier	operand		3488667	0					
ANR	3488770	PrimaryExpression	0		3488667	1					
ANR	3488771	PrimaryExpression	'+'		3488667	1					
ANR	3488772	EqualityExpression	operand [ 0 ] != '-'		3488667	1		!=			
ANR	3488773	ArrayIndexing	operand [ 0 ]		3488667	0					
ANR	3488774	Identifier	operand		3488667	0					
ANR	3488775	PrimaryExpression	0		3488667	1					
ANR	3488776	PrimaryExpression	'-'		3488667	1					
ANR	3488777	CompoundStatement		27:56:763:763	3488667	1					
ANR	3488778	ExpressionStatement	temp -= a -> pc + 2	265:3:8053:8070	3488667	0	True				
ANR	3488779	AssignmentExpression	temp -= a -> pc + 2		3488667	0		-=			
ANR	3488780	Identifier	temp		3488667	0					
ANR	3488781	AdditiveExpression	a -> pc + 2		3488667	1		+			
ANR	3488782	PtrMemberAccess	a -> pc		3488667	0					
ANR	3488783	Identifier	a		3488667	0					
ANR	3488784	Identifier	pc		3488667	1					
ANR	3488785	PrimaryExpression	2		3488667	1					
ANR	3488786	ExpressionStatement	temp /= 2	267:2:8078:8087	3488667	12	True				
ANR	3488787	AssignmentExpression	temp /= 2		3488667	0		/=			
ANR	3488788	Identifier	temp		3488667	0					
ANR	3488789	PrimaryExpression	2		3488667	1					
ANR	3488790	IfStatement	if ( temp >= - 64 && temp <= 63 )		3488667	13					
ANR	3488791	Condition	temp >= - 64 && temp <= 63	268:6:8107:8131	3488667	0	True				
ANR	3488792	AndExpression	temp >= - 64 && temp <= 63		3488667	0		&&			
ANR	3488793	RelationalExpression	temp >= - 64		3488667	0		>=			
ANR	3488794	Identifier	temp		3488667	0					
ANR	3488795	UnaryOperationExpression	- 64		3488667	1					
ANR	3488796	UnaryOperator	-		3488667	0					
ANR	3488797	PrimaryExpression	64		3488667	1					
ANR	3488798	RelationalExpression	temp <= 63		3488667	1		<=			
ANR	3488799	Identifier	temp		3488667	0					
ANR	3488800	PrimaryExpression	63		3488667	1					
ANR	3488801	CompoundStatement		33:33:971:971	3488667	1					
ANR	3488802	ExpressionStatement	ret = 0	269:3:8139:8146	3488667	0	True				
ANR	3488803	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488804	Identifier	ret		3488667	0					
ANR	3488805	PrimaryExpression	0		3488667	1					
ANR	3488806	ExpressionStatement	* res = temp	271:2:8154:8165	3488667	14	True				
ANR	3488807	AssignmentExpression	* res = temp		3488667	0		=			
ANR	3488808	UnaryOperationExpression	* res		3488667	0					
ANR	3488809	UnaryOperator	*		3488667	0					
ANR	3488810	Identifier	res		3488667	1					
ANR	3488811	Identifier	temp		3488667	1					
ANR	3488812	BreakStatement	break ;	272:2:8169:8174	3488667	15	True				
ANR	3488813	Label	case OPERAND_IO_REGISTER :	273:1:8177:8201	3488667	16	True				
ANR	3488814	Identifier	OPERAND_IO_REGISTER		3488667	0					
ANR	3488815	Label	case OPERAND_BIT :	274:1:8204:8220	3488667	17	True				
ANR	3488816	Identifier	OPERAND_BIT		3488667	0					
ANR	3488817	Label	case OPERAND_DES_ROUND :	275:1:8223:8245	3488667	18	True				
ANR	3488818	Identifier	OPERAND_DES_ROUND		3488667	0					
ANR	3488819	Label	case OPERAND_LONG_ABSOLUTE_ADDRESS :	276:1:8248:8282	3488667	19	True				
ANR	3488820	Identifier	OPERAND_LONG_ABSOLUTE_ADDRESS		3488667	0					
ANR	3488821	Label	case OPERAND_DATA :	277:1:8285:8302	3488667	20	True				
ANR	3488822	Identifier	OPERAND_DATA		3488667	0					
ANR	3488823	ExpressionStatement	"* res = getnum ( a , operand )"	278:2:8306:8331	3488667	21	True				
ANR	3488824	AssignmentExpression	"* res = getnum ( a , operand )"		3488667	0		=			
ANR	3488825	UnaryOperationExpression	* res		3488667	0					
ANR	3488826	UnaryOperator	*		3488667	0					
ANR	3488827	Identifier	res		3488667	1					
ANR	3488828	CallExpression	"getnum ( a , operand )"		3488667	1					
ANR	3488829	Callee	getnum		3488667	0					
ANR	3488830	Identifier	getnum		3488667	0					
ANR	3488831	ArgumentList	a		3488667	1					
ANR	3488832	Argument	a		3488667	0					
ANR	3488833	Identifier	a		3488667	0					
ANR	3488834	Argument	operand		3488667	1					
ANR	3488835	Identifier	operand		3488667	0					
ANR	3488836	ExpressionStatement	ret = 0	279:2:8357:8364	3488667	22	True				
ANR	3488837	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488838	Identifier	ret		3488667	0					
ANR	3488839	PrimaryExpression	0		3488667	1					
ANR	3488840	BreakStatement	break ;	280:2:8368:8373	3488667	23	True				
ANR	3488841	Label	case OPERAND_COMPLEMENTED_DATA :	281:1:8376:8406	3488667	24	True				
ANR	3488842	Identifier	OPERAND_COMPLEMENTED_DATA		3488667	0					
ANR	3488843	ExpressionStatement	"* res = getnum ( a , operand )"	282:2:8410:8435	3488667	25	True				
ANR	3488844	AssignmentExpression	"* res = getnum ( a , operand )"		3488667	0		=			
ANR	3488845	UnaryOperationExpression	* res		3488667	0					
ANR	3488846	UnaryOperator	*		3488667	0					
ANR	3488847	Identifier	res		3488667	1					
ANR	3488848	CallExpression	"getnum ( a , operand )"		3488667	1					
ANR	3488849	Callee	getnum		3488667	0					
ANR	3488850	Identifier	getnum		3488667	0					
ANR	3488851	ArgumentList	a		3488667	1					
ANR	3488852	Argument	a		3488667	0					
ANR	3488853	Identifier	a		3488667	0					
ANR	3488854	Argument	operand		3488667	1					
ANR	3488855	Identifier	operand		3488667	0					
ANR	3488856	ExpressionStatement	* res = ~ ( * res ) & 0xFF	283:2:8461:8482	3488667	26	True				
ANR	3488857	AssignmentExpression	* res = ~ ( * res ) & 0xFF		3488667	0		=			
ANR	3488858	UnaryOperationExpression	* res		3488667	0					
ANR	3488859	UnaryOperator	*		3488667	0					
ANR	3488860	Identifier	res		3488667	1					
ANR	3488861	BitAndExpression	~ ( * res ) & 0xFF		3488667	1		&			
ANR	3488862	UnaryOperationExpression	~ ( * res )		3488667	0					
ANR	3488863	UnaryOperator	~		3488667	0					
ANR	3488864	UnaryOperationExpression	* res		3488667	1					
ANR	3488865	UnaryOperator	*		3488667	0					
ANR	3488866	Identifier	res		3488667	1					
ANR	3488867	PrimaryExpression	0xFF		3488667	1					
ANR	3488868	ExpressionStatement	ret = 0	284:2:8503:8510	3488667	27	True				
ANR	3488869	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488870	Identifier	ret		3488667	0					
ANR	3488871	PrimaryExpression	0		3488667	1					
ANR	3488872	BreakStatement	break ;	285:2:8514:8519	3488667	28	True				
ANR	3488873	Label	case OPERAND_MX :	286:1:8522:8537	3488667	29	True				
ANR	3488874	Identifier	OPERAND_MX		3488667	0					
ANR	3488875	Label	case OPERAND_X :	287:1:8540:8554	3488667	30	True				
ANR	3488876	Identifier	OPERAND_X		3488667	0					
ANR	3488877	Label	case OPERAND_XP :	288:1:8557:8572	3488667	31	True				
ANR	3488878	Identifier	OPERAND_XP		3488667	0					
ANR	3488879	Label	case OPERAND_MY :	289:1:8575:8590	3488667	32	True				
ANR	3488880	Identifier	OPERAND_MY		3488667	0					
ANR	3488881	Label	case OPERAND_Y :	290:1:8593:8607	3488667	33	True				
ANR	3488882	Identifier	OPERAND_Y		3488667	0					
ANR	3488883	Label	case OPERAND_YP :	291:1:8610:8625	3488667	34	True				
ANR	3488884	Identifier	OPERAND_YP		3488667	0					
ANR	3488885	Label	case OPERAND_MZ :	292:1:8628:8643	3488667	35	True				
ANR	3488886	Identifier	OPERAND_MZ		3488667	0					
ANR	3488887	Label	case OPERAND_Z :	293:1:8646:8660	3488667	36	True				
ANR	3488888	Identifier	OPERAND_Z		3488667	0					
ANR	3488889	Label	case OPERAND_ZP :	294:1:8663:8678	3488667	37	True				
ANR	3488890	Identifier	OPERAND_ZP		3488667	0					
ANR	3488891	ExpressionStatement	* res = 0	295:2:8682:8690	3488667	38	True				
ANR	3488892	AssignmentExpression	* res = 0		3488667	0		=			
ANR	3488893	UnaryOperationExpression	* res		3488667	0					
ANR	3488894	UnaryOperator	*		3488667	0					
ANR	3488895	Identifier	res		3488667	1					
ANR	3488896	PrimaryExpression	0		3488667	1					
ANR	3488897	ExpressionStatement	ret = 0	296:2:8745:8752	3488667	39	True				
ANR	3488898	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488899	Identifier	ret		3488667	0					
ANR	3488900	PrimaryExpression	0		3488667	1					
ANR	3488901	BreakStatement	break ;	297:2:8756:8761	3488667	40	True				
ANR	3488902	Label	case OPERAND_YPQ :	299:1:8765:8781	3488667	41	True				
ANR	3488903	Identifier	OPERAND_YPQ		3488667	0					
ANR	3488904	Label	case OPERAND_ZPQ :	300:1:8784:8800	3488667	42	True				
ANR	3488905	Identifier	OPERAND_ZPQ		3488667	0					
ANR	3488906	IfStatement	if ( strlen ( operand ) > 2 )		3488667	43					
ANR	3488907	Condition	strlen ( operand ) > 2	301:6:8808:8826	3488667	0	True				
ANR	3488908	RelationalExpression	strlen ( operand ) > 2		3488667	0		>			
ANR	3488909	CallExpression	strlen ( operand )		3488667	0					
ANR	3488910	Callee	strlen		3488667	0					
ANR	3488911	Identifier	strlen		3488667	0					
ANR	3488912	ArgumentList	operand		3488667	1					
ANR	3488913	Argument	operand		3488667	0					
ANR	3488914	Identifier	operand		3488667	0					
ANR	3488915	PrimaryExpression	2		3488667	1					
ANR	3488916	CompoundStatement		66:27:1666:1666	3488667	1					
ANR	3488917	ExpressionStatement	"* res = getnum ( a , operand + 2 )"	304:3:8938:8967	3488667	0	True				
ANR	3488918	AssignmentExpression	"* res = getnum ( a , operand + 2 )"		3488667	0		=			
ANR	3488919	UnaryOperationExpression	* res		3488667	0					
ANR	3488920	UnaryOperator	*		3488667	0					
ANR	3488921	Identifier	res		3488667	1					
ANR	3488922	CallExpression	"getnum ( a , operand + 2 )"		3488667	1					
ANR	3488923	Callee	getnum		3488667	0					
ANR	3488924	Identifier	getnum		3488667	0					
ANR	3488925	ArgumentList	a		3488667	1					
ANR	3488926	Argument	a		3488667	0					
ANR	3488927	Identifier	a		3488667	0					
ANR	3488928	Argument	operand + 2		3488667	1					
ANR	3488929	AdditiveExpression	operand + 2		3488667	0		+			
ANR	3488930	Identifier	operand		3488667	0					
ANR	3488931	PrimaryExpression	2		3488667	1					
ANR	3488932	ExpressionStatement	ret = 0	305:3:8972:8979	3488667	1	True				
ANR	3488933	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488934	Identifier	ret		3488667	0					
ANR	3488935	PrimaryExpression	0		3488667	1					
ANR	3488936	BreakStatement	break ;	307:2:8987:8992	3488667	44	True				
ANR	3488937	Label	case OPERAND_REGISTER :	309:1:8996:9017	3488667	45	True				
ANR	3488938	Identifier	OPERAND_REGISTER		3488667	0					
ANR	3488939	IfStatement	if ( strlen ( operand ) > 1 )		3488667	46					
ANR	3488940	Condition	strlen ( operand ) > 1	310:6:9025:9043	3488667	0	True				
ANR	3488941	RelationalExpression	strlen ( operand ) > 1		3488667	0		>			
ANR	3488942	CallExpression	strlen ( operand )		3488667	0					
ANR	3488943	Callee	strlen		3488667	0					
ANR	3488944	Identifier	strlen		3488667	0					
ANR	3488945	ArgumentList	operand		3488667	1					
ANR	3488946	Argument	operand		3488667	0					
ANR	3488947	Identifier	operand		3488667	0					
ANR	3488948	PrimaryExpression	1		3488667	1					
ANR	3488949	CompoundStatement		75:27:1883:1883	3488667	1					
ANR	3488950	ExpressionStatement	"* res = getnum ( a , operand + 1 )"	312:3:9087:9116	3488667	0	True				
ANR	3488951	AssignmentExpression	"* res = getnum ( a , operand + 1 )"		3488667	0		=			
ANR	3488952	UnaryOperationExpression	* res		3488667	0					
ANR	3488953	UnaryOperator	*		3488667	0					
ANR	3488954	Identifier	res		3488667	1					
ANR	3488955	CallExpression	"getnum ( a , operand + 1 )"		3488667	1					
ANR	3488956	Callee	getnum		3488667	0					
ANR	3488957	Identifier	getnum		3488667	0					
ANR	3488958	ArgumentList	a		3488667	1					
ANR	3488959	Argument	a		3488667	0					
ANR	3488960	Identifier	a		3488667	0					
ANR	3488961	Argument	operand + 1		3488667	1					
ANR	3488962	AdditiveExpression	operand + 1		3488667	0		+			
ANR	3488963	Identifier	operand		3488667	0					
ANR	3488964	PrimaryExpression	1		3488667	1					
ANR	3488965	IfStatement	if ( * res <= 32 )		3488667	1					
ANR	3488966	Condition	* res <= 32	313:7:9125:9134	3488667	0	True				
ANR	3488967	RelationalExpression	* res <= 32		3488667	0		<=			
ANR	3488968	UnaryOperationExpression	* res		3488667	0					
ANR	3488969	UnaryOperator	*		3488667	0					
ANR	3488970	Identifier	res		3488667	1					
ANR	3488971	PrimaryExpression	32		3488667	1					
ANR	3488972	CompoundStatement		78:19:1974:1974	3488667	1					
ANR	3488973	ExpressionStatement	ret = 0	314:4:9143:9150	3488667	0	True				
ANR	3488974	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3488975	Identifier	ret		3488667	0					
ANR	3488976	PrimaryExpression	0		3488667	1					
ANR	3488977	BreakStatement	break ;	317:2:9163:9168	3488667	47	True				
ANR	3488978	Label	case OPERAND_REGISTER_STARTR16 :	318:1:9171:9201	3488667	48	True				
ANR	3488979	Identifier	OPERAND_REGISTER_STARTR16		3488667	0					
ANR	3488980	IfStatement	if ( strlen ( operand ) > 1 )		3488667	49					
ANR	3488981	Condition	strlen ( operand ) > 1	319:6:9209:9227	3488667	0	True				
ANR	3488982	RelationalExpression	strlen ( operand ) > 1		3488667	0		>			
ANR	3488983	CallExpression	strlen ( operand )		3488667	0					
ANR	3488984	Callee	strlen		3488667	0					
ANR	3488985	Identifier	strlen		3488667	0					
ANR	3488986	ArgumentList	operand		3488667	1					
ANR	3488987	Argument	operand		3488667	0					
ANR	3488988	Identifier	operand		3488667	0					
ANR	3488989	PrimaryExpression	1		3488667	1					
ANR	3488990	CompoundStatement		84:27:2067:2067	3488667	1					
ANR	3488991	ExpressionStatement	"* res = getnum ( a , operand + 1 )"	321:3:9271:9300	3488667	0	True				
ANR	3488992	AssignmentExpression	"* res = getnum ( a , operand + 1 )"		3488667	0		=			
ANR	3488993	UnaryOperationExpression	* res		3488667	0					
ANR	3488994	UnaryOperator	*		3488667	0					
ANR	3488995	Identifier	res		3488667	1					
ANR	3488996	CallExpression	"getnum ( a , operand + 1 )"		3488667	1					
ANR	3488997	Callee	getnum		3488667	0					
ANR	3488998	Identifier	getnum		3488667	0					
ANR	3488999	ArgumentList	a		3488667	1					
ANR	3489000	Argument	a		3488667	0					
ANR	3489001	Identifier	a		3488667	0					
ANR	3489002	Argument	operand + 1		3488667	1					
ANR	3489003	AdditiveExpression	operand + 1		3488667	0		+			
ANR	3489004	Identifier	operand		3488667	0					
ANR	3489005	PrimaryExpression	1		3488667	1					
ANR	3489006	IfStatement	if ( * res >= 16 && * res <= 32 )		3488667	1					
ANR	3489007	Condition	* res >= 16 && * res <= 32	322:7:9309:9332	3488667	0	True				
ANR	3489008	AndExpression	* res >= 16 && * res <= 32		3488667	0		&&			
ANR	3489009	RelationalExpression	* res >= 16		3488667	0		>=			
ANR	3489010	UnaryOperationExpression	* res		3488667	0					
ANR	3489011	UnaryOperator	*		3488667	0					
ANR	3489012	Identifier	res		3488667	1					
ANR	3489013	PrimaryExpression	16		3488667	1					
ANR	3489014	RelationalExpression	* res <= 32		3488667	1		<=			
ANR	3489015	UnaryOperationExpression	* res		3488667	0					
ANR	3489016	UnaryOperator	*		3488667	0					
ANR	3489017	Identifier	res		3488667	1					
ANR	3489018	PrimaryExpression	32		3488667	1					
ANR	3489019	CompoundStatement		87:33:2172:2172	3488667	1					
ANR	3489020	ExpressionStatement	* res -= 16	323:4:9341:9351	3488667	0	True				
ANR	3489021	AssignmentExpression	* res -= 16		3488667	0		-=			
ANR	3489022	UnaryOperationExpression	* res		3488667	0					
ANR	3489023	UnaryOperator	*		3488667	0					
ANR	3489024	Identifier	res		3488667	1					
ANR	3489025	PrimaryExpression	16		3488667	1					
ANR	3489026	ExpressionStatement	ret = 0	324:4:9357:9364	3488667	1	True				
ANR	3489027	AssignmentExpression	ret = 0		3488667	0		=			
ANR	3489028	Identifier	ret		3488667	0					
ANR	3489029	PrimaryExpression	0		3488667	1					
ANR	3489030	BreakStatement	break ;	327:2:9377:9382	3488667	50	True				
ANR	3489031	Label	default :	328:1:9385:9392	3488667	51	True				
ANR	3489032	Identifier	default		3488667	0					
ANR	3489033	ExpressionStatement	ret = - 1	329:2:9396:9404	3488667	52	True				
ANR	3489034	AssignmentExpression	ret = - 1		3488667	0		=			
ANR	3489035	Identifier	ret		3488667	0					
ANR	3489036	UnaryOperationExpression	- 1		3488667	1					
ANR	3489037	UnaryOperator	-		3488667	0					
ANR	3489038	PrimaryExpression	1		3488667	1					
ANR	3489039	ReturnStatement	return ret ;	332:1:9411:9421	3488667	3	True				
ANR	3489040	Identifier	ret		3488667	0					
ANR	3489041	ReturnType	static int		3488667	1					
ANR	3489042	Identifier	assemble_operand		3488667	2					
ANR	3489043	ParameterList	"RAsm * a , const char * operand , int type , uint32_t * res"		3488667	3					
ANR	3489044	Parameter	RAsm * a	236:28:7107:7113	3488667	0	True				
ANR	3489045	ParameterType	RAsm *		3488667	0					
ANR	3489046	Identifier	a		3488667	1					
ANR	3489047	Parameter	const char * operand	236:37:7116:7134	3488667	1	True				
ANR	3489048	ParameterType	const char *		3488667	0					
ANR	3489049	Identifier	operand		3488667	1					
ANR	3489050	Parameter	int type	236:58:7137:7144	3488667	2	True				
ANR	3489051	ParameterType	int		3488667	0					
ANR	3489052	Identifier	type		3488667	1					
ANR	3489053	Parameter	uint32_t * res	236:68:7147:7159	3488667	3	True				
ANR	3489054	ParameterType	uint32_t *		3488667	0					
ANR	3489055	Identifier	res		3488667	1					
ANR	3489056	CFGEntryNode	ENTRY		3488667		True				
ANR	3489057	CFGExitNode	EXIT		3488667		True				
ANR	3489058	Symbol	ret		3488667						
ANR	3489059	Symbol	a		3488667						
ANR	3489060	Symbol	res		3488667						
ANR	3489061	Symbol	temp		3488667						
ANR	3489062	Symbol	* operand		3488667						
ANR	3489063	Symbol	* res		3488667						
ANR	3489064	Symbol	* a		3488667						
ANR	3489065	Symbol	type		3488667						
ANR	3489066	Symbol	a -> pc		3488667						
ANR	3489067	Symbol	parse_registerpair		3488667						
ANR	3489068	Symbol	strlen		3488667						
ANR	3489069	Symbol	getnum		3488667						
ANR	3489070	Symbol	operand		3488667						
ANR	3489071	Function	assemble	335:0:9426:12810							
ANR	3489072	FunctionDef	"assemble (RAsm * a , RAsmOp * ao , const char * str)"		3489071	0					
ANR	3489073	CompoundStatement		335:58:9484:12810	3489071	0					
ANR	3489074	Statement	char	336:1:9487:9490	3489071	0	True				
ANR	3489075	ExpressionStatement	tokens [ 3 ] [ MAX_TOKEN_SIZE ]	336:6:9492:9517	3489071	1	True				
ANR	3489076	ArrayIndexing	tokens [ 3 ] [ MAX_TOKEN_SIZE ]		3489071	0					
ANR	3489077	ArrayIndexing	tokens [ 3 ]		3489071	0					
ANR	3489078	Identifier	tokens		3489071	0					
ANR	3489079	PrimaryExpression	3		3489071	1					
ANR	3489080	Identifier	MAX_TOKEN_SIZE		3489071	1					
ANR	3489081	IdentifierDeclStatement	char * token ;	337:1:9520:9531	3489071	2	True				
ANR	3489082	IdentifierDecl	* token		3489071	0					
ANR	3489083	IdentifierDeclType	char *		3489071	0					
ANR	3489084	Identifier	token		3489071	1					
ANR	3489085	IdentifierDeclStatement	uint32_t coded = 0 ;	338:1:9534:9552	3489071	3	True				
ANR	3489086	IdentifierDecl	coded = 0		3489071	0					
ANR	3489087	IdentifierDeclType	uint32_t		3489071	0					
ANR	3489088	Identifier	coded		3489071	1					
ANR	3489089	AssignmentExpression	coded = 0		3489071	2		=			
ANR	3489090	Identifier	coded		3489071	0					
ANR	3489091	PrimaryExpression	0		3489071	1					
ANR	3489092	IdentifierDeclStatement	int len = 0 ;	339:1:9555:9567	3489071	4	True				
ANR	3489093	IdentifierDecl	len = 0		3489071	0					
ANR	3489094	IdentifierDeclType	int		3489071	0					
ANR	3489095	Identifier	len		3489071	1					
ANR	3489096	AssignmentExpression	len = 0		3489071	2		=			
ANR	3489097	Identifier	len		3489071	0					
ANR	3489098	PrimaryExpression	0		3489071	1					
ANR	3489099	IdentifierDeclStatement	"uint32_t op1 = 0 , op2 = 0 ;"	340:1:9570:9595	3489071	5	True				
ANR	3489100	IdentifierDecl	op1 = 0		3489071	0					
ANR	3489101	IdentifierDeclType	uint32_t		3489071	0					
ANR	3489102	Identifier	op1		3489071	1					
ANR	3489103	AssignmentExpression	op1 = 0		3489071	2		=			
ANR	3489104	Identifier	op1		3489071	0					
ANR	3489105	PrimaryExpression	0		3489071	1					
ANR	3489106	IdentifierDecl	op2 = 0		3489071	1					
ANR	3489107	IdentifierDeclType	uint32_t		3489071	0					
ANR	3489108	Identifier	op2		3489071	1					
ANR	3489109	AssignmentExpression	op2 = 0		3489071	2		=			
ANR	3489110	Identifier	op2		3489071	0					
ANR	3489111	PrimaryExpression	0		3489071	1					
ANR	3489112	IdentifierDeclStatement	unsigned int tokens_cnt = 0 ;	341:1:9598:9625	3489071	6	True				
ANR	3489113	IdentifierDecl	tokens_cnt = 0		3489071	0					
ANR	3489114	IdentifierDeclType	unsigned int		3489071	0					
ANR	3489115	Identifier	tokens_cnt		3489071	1					
ANR	3489116	AssignmentExpression	tokens_cnt = 0		3489071	2		=			
ANR	3489117	Identifier	tokens_cnt		3489071	0					
ANR	3489118	PrimaryExpression	0		3489071	1					
ANR	3489119	IdentifierDeclStatement	int instr_idx = - 1 ;	342:1:9628:9646	3489071	7	True				
ANR	3489120	IdentifierDecl	instr_idx = - 1		3489071	0					
ANR	3489121	IdentifierDeclType	int		3489071	0					
ANR	3489122	Identifier	instr_idx		3489071	1					
ANR	3489123	AssignmentExpression	instr_idx = - 1		3489071	2		=			
ANR	3489124	Identifier	instr_idx		3489071	0					
ANR	3489125	UnaryOperationExpression	- 1		3489071	1					
ANR	3489126	UnaryOperator	-		3489071	0					
ANR	3489127	PrimaryExpression	1		3489071	1					
ANR	3489128	ExpressionStatement	"token = strtok ( ( char * ) str , TOKEN_DELIM )"	346:1:9750:9791	3489071	8	True				
ANR	3489129	AssignmentExpression	"token = strtok ( ( char * ) str , TOKEN_DELIM )"		3489071	0		=			
ANR	3489130	Identifier	token		3489071	0					
ANR	3489131	CallExpression	"strtok ( ( char * ) str , TOKEN_DELIM )"		3489071	1					
ANR	3489132	Callee	strtok		3489071	0					
ANR	3489133	Identifier	strtok		3489071	0					
ANR	3489134	ArgumentList	( char * ) str		3489071	1					
ANR	3489135	Argument	( char * ) str		3489071	0					
ANR	3489136	CastExpression	( char * ) str		3489071	0					
ANR	3489137	CastTarget	char *		3489071	0					
ANR	3489138	Identifier	str		3489071	1					
ANR	3489139	Argument	TOKEN_DELIM		3489071	1					
ANR	3489140	Identifier	TOKEN_DELIM		3489071	0					
ANR	3489141	WhileStatement	while ( token != NULL && tokens_cnt < 3 )		3489071	9					
ANR	3489142	Condition	token != NULL && tokens_cnt < 3	347:8:9801:9831	3489071	0	True				
ANR	3489143	AndExpression	token != NULL && tokens_cnt < 3		3489071	0		&&			
ANR	3489144	EqualityExpression	token != NULL		3489071	0		!=			
ANR	3489145	Identifier	token		3489071	0					
ANR	3489146	Identifier	NULL		3489071	1					
ANR	3489147	RelationalExpression	tokens_cnt < 3		3489071	1		<			
ANR	3489148	Identifier	tokens_cnt		3489071	0					
ANR	3489149	PrimaryExpression	3		3489071	1					
ANR	3489150	CompoundStatement		13:41:349:349	3489071	1					
ANR	3489151	ExpressionStatement	"memset ( tokens [ tokens_cnt ] , 0 , MAX_TOKEN_SIZE )"	348:2:9838:9884	3489071	0	True				
ANR	3489152	CallExpression	"memset ( tokens [ tokens_cnt ] , 0 , MAX_TOKEN_SIZE )"		3489071	0					
ANR	3489153	Callee	memset		3489071	0					
ANR	3489154	Identifier	memset		3489071	0					
ANR	3489155	ArgumentList	tokens [ tokens_cnt ]		3489071	1					
ANR	3489156	Argument	tokens [ tokens_cnt ]		3489071	0					
ANR	3489157	ArrayIndexing	tokens [ tokens_cnt ]		3489071	0					
ANR	3489158	Identifier	tokens		3489071	0					
ANR	3489159	Identifier	tokens_cnt		3489071	1					
ANR	3489160	Argument	0		3489071	1					
ANR	3489161	PrimaryExpression	0		3489071	0					
ANR	3489162	Argument	MAX_TOKEN_SIZE		3489071	2					
ANR	3489163	Identifier	MAX_TOKEN_SIZE		3489071	0					
ANR	3489164	ExpressionStatement	"strncpy ( tokens [ tokens_cnt ] , token , MAX_TOKEN_SIZE - 1 )"	349:2:9888:9941	3489071	1	True				
ANR	3489165	CallExpression	"strncpy ( tokens [ tokens_cnt ] , token , MAX_TOKEN_SIZE - 1 )"		3489071	0					
ANR	3489166	Callee	strncpy		3489071	0					
ANR	3489167	Identifier	strncpy		3489071	0					
ANR	3489168	ArgumentList	tokens [ tokens_cnt ]		3489071	1					
ANR	3489169	Argument	tokens [ tokens_cnt ]		3489071	0					
ANR	3489170	ArrayIndexing	tokens [ tokens_cnt ]		3489071	0					
ANR	3489171	Identifier	tokens		3489071	0					
ANR	3489172	Identifier	tokens_cnt		3489071	1					
ANR	3489173	Argument	token		3489071	1					
ANR	3489174	Identifier	token		3489071	0					
ANR	3489175	Argument	MAX_TOKEN_SIZE - 1		3489071	2					
ANR	3489176	AdditiveExpression	MAX_TOKEN_SIZE - 1		3489071	0		-			
ANR	3489177	Identifier	MAX_TOKEN_SIZE		3489071	0					
ANR	3489178	PrimaryExpression	1		3489071	1					
ANR	3489179	ExpressionStatement	"token = strtok ( NULL , TOKEN_DELIM )"	350:2:9945:9979	3489071	2	True				
ANR	3489180	AssignmentExpression	"token = strtok ( NULL , TOKEN_DELIM )"		3489071	0		=			
ANR	3489181	Identifier	token		3489071	0					
ANR	3489182	CallExpression	"strtok ( NULL , TOKEN_DELIM )"		3489071	1					
ANR	3489183	Callee	strtok		3489071	0					
ANR	3489184	Identifier	strtok		3489071	0					
ANR	3489185	ArgumentList	NULL		3489071	1					
ANR	3489186	Argument	NULL		3489071	0					
ANR	3489187	Identifier	NULL		3489071	0					
ANR	3489188	Argument	TOKEN_DELIM		3489071	1					
ANR	3489189	Identifier	TOKEN_DELIM		3489071	0					
ANR	3489190	ExpressionStatement	tokens_cnt += 1	351:2:9983:9998	3489071	3	True				
ANR	3489191	AssignmentExpression	tokens_cnt += 1		3489071	0		+=			
ANR	3489192	Identifier	tokens_cnt		3489071	0					
ANR	3489193	PrimaryExpression	1		3489071	1					
ANR	3489194	IfStatement	if ( tokens_cnt > 0 )		3489071	10					
ANR	3489195	Condition	tokens_cnt > 0	354:5:10009:10022	3489071	0	True				
ANR	3489196	RelationalExpression	tokens_cnt > 0		3489071	0		>			
ANR	3489197	Identifier	tokens_cnt		3489071	0					
ANR	3489198	PrimaryExpression	0		3489071	1					
ANR	3489199	CompoundStatement		20:21:540:540	3489071	1					
ANR	3489200	ExpressionStatement	"instr_idx = search_instruction ( a , tokens , tokens_cnt - 1 )"	356:2:10084:10142	3489071	0	True				
ANR	3489201	AssignmentExpression	"instr_idx = search_instruction ( a , tokens , tokens_cnt - 1 )"		3489071	0		=			
ANR	3489202	Identifier	instr_idx		3489071	0					
ANR	3489203	CallExpression	"search_instruction ( a , tokens , tokens_cnt - 1 )"		3489071	1					
ANR	3489204	Callee	search_instruction		3489071	0					
ANR	3489205	Identifier	search_instruction		3489071	0					
ANR	3489206	ArgumentList	a		3489071	1					
ANR	3489207	Argument	a		3489071	0					
ANR	3489208	Identifier	a		3489071	0					
ANR	3489209	Argument	tokens		3489071	1					
ANR	3489210	Identifier	tokens		3489071	0					
ANR	3489211	Argument	tokens_cnt - 1		3489071	2					
ANR	3489212	AdditiveExpression	tokens_cnt - 1		3489071	0		-			
ANR	3489213	Identifier	tokens_cnt		3489071	0					
ANR	3489214	PrimaryExpression	1		3489071	1					
ANR	3489215	IfStatement	if ( instr_idx >= 0 )		3489071	1					
ANR	3489216	Condition	instr_idx >= 0	358:6:10151:10164	3489071	0	True				
ANR	3489217	RelationalExpression	instr_idx >= 0		3489071	0		>=			
ANR	3489218	Identifier	instr_idx		3489071	0					
ANR	3489219	PrimaryExpression	0		3489071	1					
ANR	3489220	CompoundStatement		24:22:682:682	3489071	1					
ANR	3489221	IfStatement	if ( instructionSet [ instr_idx ] . numOperands == 0 && tokens_cnt == 1 )		3489071	0					
ANR	3489222	Condition	instructionSet [ instr_idx ] . numOperands == 0 && tokens_cnt == 1	360:7:10221:10281	3489071	0	True				
ANR	3489223	AndExpression	instructionSet [ instr_idx ] . numOperands == 0 && tokens_cnt == 1		3489071	0		&&			
ANR	3489224	EqualityExpression	instructionSet [ instr_idx ] . numOperands == 0		3489071	0		==			
ANR	3489225	MemberAccess	instructionSet [ instr_idx ] . numOperands		3489071	0					
ANR	3489226	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489227	Identifier	instructionSet		3489071	0					
ANR	3489228	Identifier	instr_idx		3489071	1					
ANR	3489229	Identifier	numOperands		3489071	1					
ANR	3489230	PrimaryExpression	0		3489071	1					
ANR	3489231	EqualityExpression	tokens_cnt == 1		3489071	1		==			
ANR	3489232	Identifier	tokens_cnt		3489071	0					
ANR	3489233	PrimaryExpression	1		3489071	1					
ANR	3489234	CompoundStatement		26:70:799:799	3489071	1					
ANR	3489235	ExpressionStatement	coded = instructionSet [ instr_idx ] . opcodeMask	361:4:10290:10334	3489071	0	True				
ANR	3489236	AssignmentExpression	coded = instructionSet [ instr_idx ] . opcodeMask		3489071	0		=			
ANR	3489237	Identifier	coded		3489071	0					
ANR	3489238	MemberAccess	instructionSet [ instr_idx ] . opcodeMask		3489071	1					
ANR	3489239	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489240	Identifier	instructionSet		3489071	0					
ANR	3489241	Identifier	instr_idx		3489071	1					
ANR	3489242	Identifier	opcodeMask		3489071	1					
ANR	3489243	ExpressionStatement	len = 2	362:4:10340:10347	3489071	1	True				
ANR	3489244	AssignmentExpression	len = 2		3489071	0		=			
ANR	3489245	Identifier	len		3489071	0					
ANR	3489246	PrimaryExpression	2		3489071	1					
ANR	3489247	ElseStatement	else		3489071	0					
ANR	3489248	IfStatement	if ( instructionSet [ instr_idx ] . numOperands == 1 && tokens_cnt == 2 )		3489071	0					
ANR	3489249	Condition	instructionSet [ instr_idx ] . numOperands == 1 && tokens_cnt == 2	370:14:10749:10809	3489071	0	True				
ANR	3489250	AndExpression	instructionSet [ instr_idx ] . numOperands == 1 && tokens_cnt == 2		3489071	0		&&			
ANR	3489251	EqualityExpression	instructionSet [ instr_idx ] . numOperands == 1		3489071	0		==			
ANR	3489252	MemberAccess	instructionSet [ instr_idx ] . numOperands		3489071	0					
ANR	3489253	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489254	Identifier	instructionSet		3489071	0					
ANR	3489255	Identifier	instr_idx		3489071	1					
ANR	3489256	Identifier	numOperands		3489071	1					
ANR	3489257	PrimaryExpression	1		3489071	1					
ANR	3489258	EqualityExpression	tokens_cnt == 2		3489071	1		==			
ANR	3489259	Identifier	tokens_cnt		3489071	0					
ANR	3489260	PrimaryExpression	2		3489071	1					
ANR	3489261	CompoundStatement		36:77:1327:1327	3489071	1					
ANR	3489262	IfStatement	"if ( assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0 )"		3489071	0					
ANR	3489263	Condition	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0"	372:8:10823:10907	3489071	0	True				
ANR	3489264	RelationalExpression	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0"		3489071	0		>=			
ANR	3489265	CallExpression	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 )"		3489071	0					
ANR	3489266	Callee	assemble_operand		3489071	0					
ANR	3489267	Identifier	assemble_operand		3489071	0					
ANR	3489268	ArgumentList	a		3489071	1					
ANR	3489269	Argument	a		3489071	0					
ANR	3489270	Identifier	a		3489071	0					
ANR	3489271	Argument	tokens [ 1 ]		3489071	1					
ANR	3489272	ArrayIndexing	tokens [ 1 ]		3489071	0					
ANR	3489273	Identifier	tokens		3489071	0					
ANR	3489274	PrimaryExpression	1		3489071	1					
ANR	3489275	Argument	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	2					
ANR	3489276	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	0					
ANR	3489277	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489278	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489279	Identifier	instructionSet		3489071	0					
ANR	3489280	Identifier	instr_idx		3489071	1					
ANR	3489281	Identifier	operandTypes		3489071	1					
ANR	3489282	PrimaryExpression	0		3489071	1					
ANR	3489283	Argument	& op1		3489071	3					
ANR	3489284	UnaryOperationExpression	& op1		3489071	0					
ANR	3489285	UnaryOperator	&		3489071	0					
ANR	3489286	Identifier	op1		3489071	1					
ANR	3489287	PrimaryExpression	0		3489071	1					
ANR	3489288	CompoundStatement		38:95:1425:1425	3489071	1					
ANR	3489289	IfStatement	if ( instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS )		3489071	0					
ANR	3489290	Condition	instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS	374:9:10960:11033	3489071	0	True				
ANR	3489291	EqualityExpression	instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	0		==			
ANR	3489292	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	0					
ANR	3489293	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489294	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489295	Identifier	instructionSet		3489071	0					
ANR	3489296	Identifier	instr_idx		3489071	1					
ANR	3489297	Identifier	operandTypes		3489071	1					
ANR	3489298	PrimaryExpression	0		3489071	1					
ANR	3489299	Identifier	OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	1					
ANR	3489300	CompoundStatement		40:85:1551:1551	3489071	1					
ANR	3489301	ExpressionStatement	op1 = op1 / 2	375:6:11044:11055	3489071	0	True				
ANR	3489302	AssignmentExpression	op1 = op1 / 2		3489071	0		=			
ANR	3489303	Identifier	op1		3489071	0					
ANR	3489304	MultiplicativeExpression	op1 / 2		3489071	1		/			
ANR	3489305	Identifier	op1		3489071	0					
ANR	3489306	PrimaryExpression	2		3489071	1					
ANR	3489307	ExpressionStatement	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( ( op1 >> 16 ) , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"	376:6:11063:11186	3489071	1	True				
ANR	3489308	AssignmentExpression	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( ( op1 >> 16 ) , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	0		=			
ANR	3489309	Identifier	coded		3489071	0					
ANR	3489310	InclusiveOrExpression	"instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( ( op1 >> 16 ) , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	1		|			
ANR	3489311	MemberAccess	instructionSet [ instr_idx ] . opcodeMask		3489071	0					
ANR	3489312	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489313	Identifier	instructionSet		3489071	0					
ANR	3489314	Identifier	instr_idx		3489071	1					
ANR	3489315	Identifier	opcodeMask		3489071	1					
ANR	3489316	CallExpression	"packDataByMask ( ( op1 >> 16 ) , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	1					
ANR	3489317	Callee	packDataByMask		3489071	0					
ANR	3489318	Identifier	packDataByMask		3489071	0					
ANR	3489319	ArgumentList	op1 >> 16		3489071	1					
ANR	3489320	Argument	op1 >> 16		3489071	0					
ANR	3489321	ShiftExpression	op1 >> 16		3489071	0		>>			
ANR	3489322	Identifier	op1		3489071	0					
ANR	3489323	PrimaryExpression	16		3489071	1					
ANR	3489324	Argument	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	1					
ANR	3489325	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	0					
ANR	3489326	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489327	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489328	Identifier	instructionSet		3489071	0					
ANR	3489329	Identifier	instr_idx		3489071	1					
ANR	3489330	Identifier	operandMasks		3489071	1					
ANR	3489331	PrimaryExpression	0		3489071	1					
ANR	3489332	ExpressionStatement	coded |= ( ( uint16_t ) op1 ) << 16	379:6:11239:11269	3489071	2	True				
ANR	3489333	AssignmentExpression	coded |= ( ( uint16_t ) op1 ) << 16		3489071	0		|=			
ANR	3489334	Identifier	coded		3489071	0					
ANR	3489335	ShiftExpression	( ( uint16_t ) op1 ) << 16		3489071	1		<<			
ANR	3489336	CastExpression	( uint16_t ) op1		3489071	0					
ANR	3489337	CastTarget	uint16_t		3489071	0					
ANR	3489338	Identifier	op1		3489071	1					
ANR	3489339	PrimaryExpression	16		3489071	1					
ANR	3489340	ExpressionStatement	len = 4	380:6:11277:11284	3489071	3	True				
ANR	3489341	AssignmentExpression	len = 4		3489071	0		=			
ANR	3489342	Identifier	len		3489071	0					
ANR	3489343	PrimaryExpression	4		3489071	1					
ANR	3489344	ElseStatement	else		3489071	0					
ANR	3489345	CompoundStatement		47:12:1813:1813	3489071	0					
ANR	3489346	IfStatement	if ( instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_REGISTER_GHOST )		3489071	0					
ANR	3489347	Condition	instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_REGISTER_GHOST	384:10:11410:11476	3489071	0	True				
ANR	3489348	EqualityExpression	instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_REGISTER_GHOST		3489071	0		==			
ANR	3489349	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 1 ]		3489071	0					
ANR	3489350	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489351	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489352	Identifier	instructionSet		3489071	0					
ANR	3489353	Identifier	instr_idx		3489071	1					
ANR	3489354	Identifier	operandTypes		3489071	1					
ANR	3489355	PrimaryExpression	1		3489071	1					
ANR	3489356	Identifier	OPERAND_REGISTER_GHOST		3489071	1					
ANR	3489357	CompoundStatement		50:79:1994:1994	3489071	1					
ANR	3489358	ExpressionStatement	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"	385:7:11488:11676	3489071	0	True				
ANR	3489359	AssignmentExpression	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	0		=			
ANR	3489360	Identifier	coded		3489071	0					
ANR	3489361	InclusiveOrExpression	"instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1		|			
ANR	3489362	MemberAccess	instructionSet [ instr_idx ] . opcodeMask		3489071	0					
ANR	3489363	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489364	Identifier	instructionSet		3489071	0					
ANR	3489365	Identifier	instr_idx		3489071	1					
ANR	3489366	Identifier	opcodeMask		3489071	1					
ANR	3489367	InclusiveOrExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1		|			
ANR	3489368	CallExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	0					
ANR	3489369	Callee	packDataByMask		3489071	0					
ANR	3489370	Identifier	packDataByMask		3489071	0					
ANR	3489371	ArgumentList	op1		3489071	1					
ANR	3489372	Argument	op1		3489071	0					
ANR	3489373	Identifier	op1		3489071	0					
ANR	3489374	Argument	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	1					
ANR	3489375	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	0					
ANR	3489376	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489377	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489378	Identifier	instructionSet		3489071	0					
ANR	3489379	Identifier	instr_idx		3489071	1					
ANR	3489380	Identifier	operandMasks		3489071	1					
ANR	3489381	PrimaryExpression	0		3489071	1					
ANR	3489382	CallExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1					
ANR	3489383	Callee	packDataByMask		3489071	0					
ANR	3489384	Identifier	packDataByMask		3489071	0					
ANR	3489385	ArgumentList	op1		3489071	1					
ANR	3489386	Argument	op1		3489071	0					
ANR	3489387	Identifier	op1		3489071	0					
ANR	3489388	Argument	instructionSet [ instr_idx ] . operandMasks [ 1 ]		3489071	1					
ANR	3489389	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 1 ]		3489071	0					
ANR	3489390	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489391	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489392	Identifier	instructionSet		3489071	0					
ANR	3489393	Identifier	instr_idx		3489071	1					
ANR	3489394	Identifier	operandMasks		3489071	1					
ANR	3489395	PrimaryExpression	1		3489071	1					
ANR	3489396	ElseStatement	else		3489071	0					
ANR	3489397	CompoundStatement		54:13:2206:2206	3489071	0					
ANR	3489398	ExpressionStatement	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"	389:7:11700:11816	3489071	0	True				
ANR	3489399	AssignmentExpression	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	0		=			
ANR	3489400	Identifier	coded		3489071	0					
ANR	3489401	InclusiveOrExpression	"instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	1		|			
ANR	3489402	MemberAccess	instructionSet [ instr_idx ] . opcodeMask		3489071	0					
ANR	3489403	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489404	Identifier	instructionSet		3489071	0					
ANR	3489405	Identifier	instr_idx		3489071	1					
ANR	3489406	Identifier	opcodeMask		3489071	1					
ANR	3489407	CallExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	1					
ANR	3489408	Callee	packDataByMask		3489071	0					
ANR	3489409	Identifier	packDataByMask		3489071	0					
ANR	3489410	ArgumentList	op1		3489071	1					
ANR	3489411	Argument	op1		3489071	0					
ANR	3489412	Identifier	op1		3489071	0					
ANR	3489413	Argument	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	1					
ANR	3489414	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	0					
ANR	3489415	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489416	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489417	Identifier	instructionSet		3489071	0					
ANR	3489418	Identifier	instr_idx		3489071	1					
ANR	3489419	Identifier	operandMasks		3489071	1					
ANR	3489420	PrimaryExpression	0		3489071	1					
ANR	3489421	ExpressionStatement	len = 2	393:6:11833:11840	3489071	1	True				
ANR	3489422	AssignmentExpression	len = 2		3489071	0		=			
ANR	3489423	Identifier	len		3489071	0					
ANR	3489424	PrimaryExpression	2		3489071	1					
ANR	3489425	ElseStatement	else		3489071	0					
ANR	3489426	IfStatement	if ( instructionSet [ instr_idx ] . numOperands == 2 && tokens_cnt == 3 )		3489071	0					
ANR	3489427	Condition	instructionSet [ instr_idx ] . numOperands == 2 && tokens_cnt == 3	397:14:11870:11930	3489071	0	True				
ANR	3489428	AndExpression	instructionSet [ instr_idx ] . numOperands == 2 && tokens_cnt == 3		3489071	0		&&			
ANR	3489429	EqualityExpression	instructionSet [ instr_idx ] . numOperands == 2		3489071	0		==			
ANR	3489430	MemberAccess	instructionSet [ instr_idx ] . numOperands		3489071	0					
ANR	3489431	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489432	Identifier	instructionSet		3489071	0					
ANR	3489433	Identifier	instr_idx		3489071	1					
ANR	3489434	Identifier	numOperands		3489071	1					
ANR	3489435	PrimaryExpression	2		3489071	1					
ANR	3489436	EqualityExpression	tokens_cnt == 3		3489071	1		==			
ANR	3489437	Identifier	tokens_cnt		3489071	0					
ANR	3489438	PrimaryExpression	3		3489071	1					
ANR	3489439	CompoundStatement		63:77:2448:2448	3489071	1					
ANR	3489440	IfStatement	"if ( assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0 && assemble_operand ( a , tokens [ 2 ] , instructionSet [ instr_idx ] . operandTypes [ 1 ] , & op2 ) >= 0 )"		3489071	0					
ANR	3489441	Condition	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0 && assemble_operand ( a , tokens [ 2 ] , instructionSet [ instr_idx ] . operandTypes [ 1 ] , & op2 ) >= 0"	398:8:11943:12121	3489071	0	True				
ANR	3489442	AndExpression	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0 && assemble_operand ( a , tokens [ 2 ] , instructionSet [ instr_idx ] . operandTypes [ 1 ] , & op2 ) >= 0"		3489071	0		&&			
ANR	3489443	RelationalExpression	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 ) >= 0"		3489071	0		>=			
ANR	3489444	CallExpression	"assemble_operand ( a , tokens [ 1 ] , instructionSet [ instr_idx ] . operandTypes [ 0 ] , & op1 )"		3489071	0					
ANR	3489445	Callee	assemble_operand		3489071	0					
ANR	3489446	Identifier	assemble_operand		3489071	0					
ANR	3489447	ArgumentList	a		3489071	1					
ANR	3489448	Argument	a		3489071	0					
ANR	3489449	Identifier	a		3489071	0					
ANR	3489450	Argument	tokens [ 1 ]		3489071	1					
ANR	3489451	ArrayIndexing	tokens [ 1 ]		3489071	0					
ANR	3489452	Identifier	tokens		3489071	0					
ANR	3489453	PrimaryExpression	1		3489071	1					
ANR	3489454	Argument	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	2					
ANR	3489455	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	0					
ANR	3489456	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489457	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489458	Identifier	instructionSet		3489071	0					
ANR	3489459	Identifier	instr_idx		3489071	1					
ANR	3489460	Identifier	operandTypes		3489071	1					
ANR	3489461	PrimaryExpression	0		3489071	1					
ANR	3489462	Argument	& op1		3489071	3					
ANR	3489463	UnaryOperationExpression	& op1		3489071	0					
ANR	3489464	UnaryOperator	&		3489071	0					
ANR	3489465	Identifier	op1		3489071	1					
ANR	3489466	PrimaryExpression	0		3489071	1					
ANR	3489467	RelationalExpression	"assemble_operand ( a , tokens [ 2 ] , instructionSet [ instr_idx ] . operandTypes [ 1 ] , & op2 ) >= 0"		3489071	1		>=			
ANR	3489468	CallExpression	"assemble_operand ( a , tokens [ 2 ] , instructionSet [ instr_idx ] . operandTypes [ 1 ] , & op2 )"		3489071	0					
ANR	3489469	Callee	assemble_operand		3489071	0					
ANR	3489470	Identifier	assemble_operand		3489071	0					
ANR	3489471	ArgumentList	a		3489071	1					
ANR	3489472	Argument	a		3489071	0					
ANR	3489473	Identifier	a		3489071	0					
ANR	3489474	Argument	tokens [ 2 ]		3489071	1					
ANR	3489475	ArrayIndexing	tokens [ 2 ]		3489071	0					
ANR	3489476	Identifier	tokens		3489071	0					
ANR	3489477	PrimaryExpression	2		3489071	1					
ANR	3489478	Argument	instructionSet [ instr_idx ] . operandTypes [ 1 ]		3489071	2					
ANR	3489479	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 1 ]		3489071	0					
ANR	3489480	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489481	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489482	Identifier	instructionSet		3489071	0					
ANR	3489483	Identifier	instr_idx		3489071	1					
ANR	3489484	Identifier	operandTypes		3489071	1					
ANR	3489485	PrimaryExpression	1		3489071	1					
ANR	3489486	Argument	& op2		3489071	3					
ANR	3489487	UnaryOperationExpression	& op2		3489071	0					
ANR	3489488	UnaryOperator	&		3489071	0					
ANR	3489489	Identifier	op2		3489071	1					
ANR	3489490	PrimaryExpression	0		3489071	1					
ANR	3489491	CompoundStatement		65:93:2639:2639	3489071	1					
ANR	3489492	ExpressionStatement	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op2 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"	401:5:12132:12318	3489071	0	True				
ANR	3489493	AssignmentExpression	"coded = instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op2 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	0		=			
ANR	3489494	Identifier	coded		3489071	0					
ANR	3489495	InclusiveOrExpression	"instructionSet [ instr_idx ] . opcodeMask | packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op2 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1		|			
ANR	3489496	MemberAccess	instructionSet [ instr_idx ] . opcodeMask		3489071	0					
ANR	3489497	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489498	Identifier	instructionSet		3489071	0					
ANR	3489499	Identifier	instr_idx		3489071	1					
ANR	3489500	Identifier	opcodeMask		3489071	1					
ANR	3489501	InclusiveOrExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] ) | packDataByMask ( op2 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1		|			
ANR	3489502	CallExpression	"packDataByMask ( op1 , instructionSet [ instr_idx ] . operandMasks [ 0 ] )"		3489071	0					
ANR	3489503	Callee	packDataByMask		3489071	0					
ANR	3489504	Identifier	packDataByMask		3489071	0					
ANR	3489505	ArgumentList	op1		3489071	1					
ANR	3489506	Argument	op1		3489071	0					
ANR	3489507	Identifier	op1		3489071	0					
ANR	3489508	Argument	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	1					
ANR	3489509	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 0 ]		3489071	0					
ANR	3489510	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489511	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489512	Identifier	instructionSet		3489071	0					
ANR	3489513	Identifier	instr_idx		3489071	1					
ANR	3489514	Identifier	operandMasks		3489071	1					
ANR	3489515	PrimaryExpression	0		3489071	1					
ANR	3489516	CallExpression	"packDataByMask ( op2 , instructionSet [ instr_idx ] . operandMasks [ 1 ] )"		3489071	1					
ANR	3489517	Callee	packDataByMask		3489071	0					
ANR	3489518	Identifier	packDataByMask		3489071	0					
ANR	3489519	ArgumentList	op2		3489071	1					
ANR	3489520	Argument	op2		3489071	0					
ANR	3489521	Identifier	op2		3489071	0					
ANR	3489522	Argument	instructionSet [ instr_idx ] . operandMasks [ 1 ]		3489071	1					
ANR	3489523	ArrayIndexing	instructionSet [ instr_idx ] . operandMasks [ 1 ]		3489071	0					
ANR	3489524	MemberAccess	instructionSet [ instr_idx ] . operandMasks		3489071	0					
ANR	3489525	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489526	Identifier	instructionSet		3489071	0					
ANR	3489527	Identifier	instr_idx		3489071	1					
ANR	3489528	Identifier	operandMasks		3489071	1					
ANR	3489529	PrimaryExpression	1		3489071	1					
ANR	3489530	ExpressionStatement	len = 2	405:5:12326:12333	3489071	1	True				
ANR	3489531	AssignmentExpression	len = 2		3489071	0		=			
ANR	3489532	Identifier	len		3489071	0					
ANR	3489533	PrimaryExpression	2		3489071	1					
ANR	3489534	IfStatement	if ( instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS )		3489071	2					
ANR	3489535	Condition	instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS	408:9:12383:12456	3489071	0	True				
ANR	3489536	EqualityExpression	instructionSet [ instr_idx ] . operandTypes [ 0 ] == OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	0		==			
ANR	3489537	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 0 ]		3489071	0					
ANR	3489538	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489539	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489540	Identifier	instructionSet		3489071	0					
ANR	3489541	Identifier	instr_idx		3489071	1					
ANR	3489542	Identifier	operandTypes		3489071	1					
ANR	3489543	PrimaryExpression	0		3489071	1					
ANR	3489544	Identifier	OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	1					
ANR	3489545	CompoundStatement		74:85:2974:2974	3489071	1					
ANR	3489546	ExpressionStatement	coded |= ( ( uint16_t ) op1 ) << 16	409:6:12467:12497	3489071	0	True				
ANR	3489547	AssignmentExpression	coded |= ( ( uint16_t ) op1 ) << 16		3489071	0		|=			
ANR	3489548	Identifier	coded		3489071	0					
ANR	3489549	ShiftExpression	( ( uint16_t ) op1 ) << 16		3489071	1		<<			
ANR	3489550	CastExpression	( uint16_t ) op1		3489071	0					
ANR	3489551	CastTarget	uint16_t		3489071	0					
ANR	3489552	Identifier	op1		3489071	1					
ANR	3489553	PrimaryExpression	16		3489071	1					
ANR	3489554	ExpressionStatement	len = 4	410:6:12505:12512	3489071	1	True				
ANR	3489555	AssignmentExpression	len = 4		3489071	0		=			
ANR	3489556	Identifier	len		3489071	0					
ANR	3489557	PrimaryExpression	4		3489071	1					
ANR	3489558	ElseStatement	else		3489071	0					
ANR	3489559	IfStatement	if ( instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_LONG_ABSOLUTE_ADDRESS )		3489071	0					
ANR	3489560	Condition	instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_LONG_ABSOLUTE_ADDRESS	411:16:12530:12603	3489071	0	True				
ANR	3489561	EqualityExpression	instructionSet [ instr_idx ] . operandTypes [ 1 ] == OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	0		==			
ANR	3489562	ArrayIndexing	instructionSet [ instr_idx ] . operandTypes [ 1 ]		3489071	0					
ANR	3489563	MemberAccess	instructionSet [ instr_idx ] . operandTypes		3489071	0					
ANR	3489564	ArrayIndexing	instructionSet [ instr_idx ]		3489071	0					
ANR	3489565	Identifier	instructionSet		3489071	0					
ANR	3489566	Identifier	instr_idx		3489071	1					
ANR	3489567	Identifier	operandTypes		3489071	1					
ANR	3489568	PrimaryExpression	1		3489071	1					
ANR	3489569	Identifier	OPERAND_LONG_ABSOLUTE_ADDRESS		3489071	1					
ANR	3489570	CompoundStatement		77:92:3121:3121	3489071	1					
ANR	3489571	ExpressionStatement	coded |= ( ( uint16_t ) op2 ) << 16	412:6:12614:12644	3489071	0	True				
ANR	3489572	AssignmentExpression	coded |= ( ( uint16_t ) op2 ) << 16		3489071	0		|=			
ANR	3489573	Identifier	coded		3489071	0					
ANR	3489574	ShiftExpression	( ( uint16_t ) op2 ) << 16		3489071	1		<<			
ANR	3489575	CastExpression	( uint16_t ) op2		3489071	0					
ANR	3489576	CastTarget	uint16_t		3489071	0					
ANR	3489577	Identifier	op2		3489071	1					
ANR	3489578	PrimaryExpression	16		3489071	1					
ANR	3489579	ExpressionStatement	len = 4	413:6:12652:12659	3489071	1	True				
ANR	3489580	AssignmentExpression	len = 4		3489071	0		=			
ANR	3489581	Identifier	len		3489071	0					
ANR	3489582	PrimaryExpression	4		3489071	1					
ANR	3489583	IfStatement	if ( len > 0 )		3489071	11					
ANR	3489584	Condition	len > 0	421:5:12728:12734	3489071	0	True				
ANR	3489585	RelationalExpression	len > 0		3489071	0		>			
ANR	3489586	Identifier	len		3489071	0					
ANR	3489587	PrimaryExpression	0		3489071	1					
ANR	3489588	CompoundStatement		87:14:3252:3252	3489071	1					
ANR	3489589	ExpressionStatement	"r_strbuf_setbin ( & ao -> buf , ( const ut8 * ) & coded , len )"	422:2:12741:12792	3489071	0	True				
ANR	3489590	CallExpression	"r_strbuf_setbin ( & ao -> buf , ( const ut8 * ) & coded , len )"		3489071	0					
ANR	3489591	Callee	r_strbuf_setbin		3489071	0					
ANR	3489592	Identifier	r_strbuf_setbin		3489071	0					
ANR	3489593	ArgumentList	& ao -> buf		3489071	1					
ANR	3489594	Argument	& ao -> buf		3489071	0					
ANR	3489595	UnaryOperationExpression	& ao -> buf		3489071	0					
ANR	3489596	UnaryOperator	&		3489071	0					
ANR	3489597	PtrMemberAccess	ao -> buf		3489071	1					
ANR	3489598	Identifier	ao		3489071	0					
ANR	3489599	Identifier	buf		3489071	1					
ANR	3489600	Argument	( const ut8 * ) & coded		3489071	1					
ANR	3489601	CastExpression	( const ut8 * ) & coded		3489071	0					
ANR	3489602	CastTarget	const ut8 *		3489071	0					
ANR	3489603	UnaryOperationExpression	& coded		3489071	1					
ANR	3489604	UnaryOperator	&		3489071	0					
ANR	3489605	Identifier	coded		3489071	1					
ANR	3489606	Argument	len		3489071	2					
ANR	3489607	Identifier	len		3489071	0					
ANR	3489608	ReturnStatement	return len ;	424:1:12798:12808	3489071	12	True				
ANR	3489609	Identifier	len		3489071	0					
ANR	3489610	ReturnType	static int		3489071	1					
ANR	3489611	Identifier	assemble		3489071	2					
ANR	3489612	ParameterList	"RAsm * a , RAsmOp * ao , const char * str"		3489071	3					
ANR	3489613	Parameter	RAsm * a	335:20:9446:9452	3489071	0	True				
ANR	3489614	ParameterType	RAsm *		3489071	0					
ANR	3489615	Identifier	a		3489071	1					
ANR	3489616	Parameter	RAsmOp * ao	335:29:9455:9464	3489071	1	True				
ANR	3489617	ParameterType	RAsmOp *		3489071	0					
ANR	3489618	Identifier	ao		3489071	1					
ANR	3489619	Parameter	const char * str	335:41:9467:9481	3489071	2	True				
ANR	3489620	ParameterType	const char *		3489071	0					
ANR	3489621	Identifier	str		3489071	1					
ANR	3489622	CFGEntryNode	ENTRY		3489071		True				
ANR	3489623	CFGExitNode	EXIT		3489071		True				
ANR	3489624	Symbol	OPERAND_LONG_ABSOLUTE_ADDRESS		3489071						
ANR	3489625	Symbol	& ao -> buf		3489071						
ANR	3489626	Symbol	instructionSet [ instr_idx ] . opcodeMask		3489071						
ANR	3489627	Symbol	OPERAND_REGISTER_GHOST		3489071						
ANR	3489628	Symbol	assemble_operand		3489071						
ANR	3489629	Symbol	* instructionSet		3489071						
ANR	3489630	Symbol	* instructionSet [ instr_idx ] . operandTypes		3489071						
ANR	3489631	Symbol	instr_idx		3489071						
ANR	3489632	Symbol	& op2		3489071						
ANR	3489633	Symbol	& op1		3489071						
ANR	3489634	Symbol	len		3489071						
ANR	3489635	Symbol	* instructionSet [ instr_idx ] . operandMasks		3489071						
ANR	3489636	Symbol	instructionSet [ instr_idx ] . numOperands		3489071						
ANR	3489637	Symbol	tokens_cnt		3489071						
ANR	3489638	Symbol	instructionSet [ instr_idx ] . operandMasks		3489071						
ANR	3489639	Symbol	tokens		3489071						
ANR	3489640	Symbol	search_instruction		3489071						
ANR	3489641	Symbol	MAX_TOKEN_SIZE		3489071						
ANR	3489642	Symbol	a		3489071						
ANR	3489643	Symbol	* tokens_cnt		3489071						
ANR	3489644	Symbol	NULL		3489071						
ANR	3489645	Symbol	instructionSet		3489071						
ANR	3489646	Symbol	* tokens		3489071						
ANR	3489647	Symbol	strtok		3489071						
ANR	3489648	Symbol	* instr_idx		3489071						
ANR	3489649	Symbol	ao		3489071						
ANR	3489650	Symbol	token		3489071						
ANR	3489651	Symbol	str		3489071						
ANR	3489652	Symbol	coded		3489071						
ANR	3489653	Symbol	op2		3489071						
ANR	3489654	Symbol	op1		3489071						
ANR	3489655	Symbol	* * instr_idx		3489071						
ANR	3489656	Symbol	& coded		3489071						
ANR	3489657	Symbol	* * instructionSet		3489071						
ANR	3489658	Symbol	TOKEN_DELIM		3489071						
ANR	3489659	Symbol	instructionSet [ instr_idx ] . operandTypes		3489071						
ANR	3489660	Symbol	packDataByMask		3489071						
ANR	3489661	DeclStmt									
ANR	3489662	Decl							RAsmPlugin	RAsmPlugin	r_asm_plugin_avr
ANR	3489663	DeclStmt									
ANR	3489664	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
