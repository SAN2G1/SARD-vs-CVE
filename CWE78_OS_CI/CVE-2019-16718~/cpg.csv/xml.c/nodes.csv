command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6525972	File	data/converged/CVE-2019-16718~_radare2/xml.c								
ANR	6525973	Function	gdbr_read_feature	10:0:201:2533							
ANR	6525974	FunctionDef	"gdbr_read_feature (libgdbr_t * g , const char * file , ut64 * tot_len)"		6525973	0					
ANR	6525975	CompoundStatement		10:78:279:2533	6525973	0					
ANR	6525976	IdentifierDeclStatement	"ut64 retlen = 0 , retmax = 0 , off = 0 , len = g -> stub_features . pkt_sz - 2 , blksz = g -> data_max , subret_space = 0 , subret_len = 0 ;"	11:1:282:410	6525973	0	True				
ANR	6525977	IdentifierDecl	retlen = 0		6525973	0					
ANR	6525978	IdentifierDeclType	ut64		6525973	0					
ANR	6525979	Identifier	retlen		6525973	1					
ANR	6525980	AssignmentExpression	retlen = 0		6525973	2		=			
ANR	6525981	Identifier	retlen		6525973	0					
ANR	6525982	PrimaryExpression	0		6525973	1					
ANR	6525983	IdentifierDecl	retmax = 0		6525973	1					
ANR	6525984	IdentifierDeclType	ut64		6525973	0					
ANR	6525985	Identifier	retmax		6525973	1					
ANR	6525986	AssignmentExpression	retmax = 0		6525973	2		=			
ANR	6525987	Identifier	retmax		6525973	0					
ANR	6525988	PrimaryExpression	0		6525973	1					
ANR	6525989	IdentifierDecl	off = 0		6525973	2					
ANR	6525990	IdentifierDeclType	ut64		6525973	0					
ANR	6525991	Identifier	off		6525973	1					
ANR	6525992	AssignmentExpression	off = 0		6525973	2		=			
ANR	6525993	Identifier	off		6525973	0					
ANR	6525994	PrimaryExpression	0		6525973	1					
ANR	6525995	IdentifierDecl	len = g -> stub_features . pkt_sz - 2		6525973	3					
ANR	6525996	IdentifierDeclType	ut64		6525973	0					
ANR	6525997	Identifier	len		6525973	1					
ANR	6525998	AssignmentExpression	len = g -> stub_features . pkt_sz - 2		6525973	2		=			
ANR	6525999	Identifier	len		6525973	0					
ANR	6526000	AdditiveExpression	g -> stub_features . pkt_sz - 2		6525973	1		-			
ANR	6526001	MemberAccess	g -> stub_features . pkt_sz		6525973	0					
ANR	6526002	PtrMemberAccess	g -> stub_features		6525973	0					
ANR	6526003	Identifier	g		6525973	0					
ANR	6526004	Identifier	stub_features		6525973	1					
ANR	6526005	Identifier	pkt_sz		6525973	1					
ANR	6526006	PrimaryExpression	2		6525973	1					
ANR	6526007	IdentifierDecl	blksz = g -> data_max		6525973	4					
ANR	6526008	IdentifierDeclType	ut64		6525973	0					
ANR	6526009	Identifier	blksz		6525973	1					
ANR	6526010	AssignmentExpression	blksz = g -> data_max		6525973	2		=			
ANR	6526011	Identifier	blksz		6525973	0					
ANR	6526012	PtrMemberAccess	g -> data_max		6525973	1					
ANR	6526013	Identifier	g		6525973	0					
ANR	6526014	Identifier	data_max		6525973	1					
ANR	6526015	IdentifierDecl	subret_space = 0		6525973	5					
ANR	6526016	IdentifierDeclType	ut64		6525973	0					
ANR	6526017	Identifier	subret_space		6525973	1					
ANR	6526018	AssignmentExpression	subret_space = 0		6525973	2		=			
ANR	6526019	Identifier	subret_space		6525973	0					
ANR	6526020	PrimaryExpression	0		6525973	1					
ANR	6526021	IdentifierDecl	subret_len = 0		6525973	6					
ANR	6526022	IdentifierDeclType	ut64		6525973	0					
ANR	6526023	Identifier	subret_len		6525973	1					
ANR	6526024	AssignmentExpression	subret_len = 0		6525973	2		=			
ANR	6526025	Identifier	subret_len		6525973	0					
ANR	6526026	PrimaryExpression	0		6525973	1					
ANR	6526027	IdentifierDeclStatement	"char * tmp , * tmp2 , * tmp3 , * ret = NULL , * subret = NULL , msg [ 128 ] = { 0 } , status , tmpchar ;"	13:1:413:502	6525973	1	True				
ANR	6526028	IdentifierDecl	* tmp		6525973	0					
ANR	6526029	IdentifierDeclType	char *		6525973	0					
ANR	6526030	Identifier	tmp		6525973	1					
ANR	6526031	IdentifierDecl	* tmp2		6525973	1					
ANR	6526032	IdentifierDeclType	char *		6525973	0					
ANR	6526033	Identifier	tmp2		6525973	1					
ANR	6526034	IdentifierDecl	* tmp3		6525973	2					
ANR	6526035	IdentifierDeclType	char *		6525973	0					
ANR	6526036	Identifier	tmp3		6525973	1					
ANR	6526037	IdentifierDecl	* ret = NULL		6525973	3					
ANR	6526038	IdentifierDeclType	char *		6525973	0					
ANR	6526039	Identifier	ret		6525973	1					
ANR	6526040	AssignmentExpression	* ret = NULL		6525973	2		=			
ANR	6526041	Identifier	NULL		6525973	0					
ANR	6526042	Identifier	NULL		6525973	1					
ANR	6526043	IdentifierDecl	* subret = NULL		6525973	4					
ANR	6526044	IdentifierDeclType	char *		6525973	0					
ANR	6526045	Identifier	subret		6525973	1					
ANR	6526046	AssignmentExpression	* subret = NULL		6525973	2		=			
ANR	6526047	Identifier	NULL		6525973	0					
ANR	6526048	Identifier	NULL		6525973	1					
ANR	6526049	IdentifierDecl	msg [ 128 ] = { 0 }		6525973	5					
ANR	6526050	IdentifierDeclType	char [ 128 ]		6525973	0					
ANR	6526051	Identifier	msg		6525973	1					
ANR	6526052	PrimaryExpression	128		6525973	2					
ANR	6526053	AssignmentExpression	msg [ 128 ] = { 0 }		6525973	3		=			
ANR	6526054	Identifier	msg		6525973	0					
ANR	6526055	InitializerList	0		6525973	1					
ANR	6526056	PrimaryExpression	0		6525973	0					
ANR	6526057	IdentifierDecl	status		6525973	6					
ANR	6526058	IdentifierDeclType	char		6525973	0					
ANR	6526059	Identifier	status		6525973	1					
ANR	6526060	IdentifierDecl	tmpchar		6525973	7					
ANR	6526061	IdentifierDeclType	char		6525973	0					
ANR	6526062	Identifier	tmpchar		6525973	1					
ANR	6526063	WhileStatement	while ( 1 )		6525973	2					
ANR	6526064	Condition	1	15:8:512:512	6525973	0	True				
ANR	6526065	PrimaryExpression	1		6525973	0					
ANR	6526066	CompoundStatement		6:11:235:235	6525973	1					
ANR	6526067	Statement	snprintf	16:2:519:526	6525973	0	True				
ANR	6526068	Statement	(	16:11:528:528	6525973	1	True				
ANR	6526069	Statement	msg	16:12:529:531	6525973	2	True				
ANR	6526070	Statement	","	16:15:532:532	6525973	3	True				
ANR	6526071	Statement	sizeof	16:17:534:539	6525973	4	True				
ANR	6526072	Statement	(	16:24:541:541	6525973	5	True				
ANR	6526073	Statement	msg	16:25:542:544	6525973	6	True				
ANR	6526074	Statement	)	16:28:545:545	6525973	7	True				
ANR	6526075	Statement	","	16:29:546:546	6525973	8	True				
ANR	6526076	Statement	"""qXfer:features:read:%s:%"""	16:31:548:573	6525973	9	True				
ANR	6526077	Statement	PFMT64x	16:57:574:580	6525973	10	True				
ANR	6526078	Statement	""",%"""	17:3:585:588	6525973	11	True				
ANR	6526079	Statement	PFMT64x	17:7:589:595	6525973	12	True				
ANR	6526080	Statement	","	17:14:596:596	6525973	13	True				
ANR	6526081	Statement	file	17:16:598:601	6525973	14	True				
ANR	6526082	Statement	","	17:20:602:602	6525973	15	True				
ANR	6526083	Statement	off	17:22:604:606	6525973	16	True				
ANR	6526084	Statement	","	17:25:607:607	6525973	17	True				
ANR	6526085	Statement	len	17:27:609:611	6525973	18	True				
ANR	6526086	Statement	)	17:30:612:612	6525973	19	True				
ANR	6526087	ExpressionStatement		17:31:613:613	6525973	20	True				
ANR	6526088	IfStatement	"if ( send_msg ( g , msg ) < 0 || read_packet ( g , false ) < 0 || send_ack ( g ) < 0 )"		6525973	21					
ANR	6526089	Condition	"send_msg ( g , msg ) < 0 || read_packet ( g , false ) < 0 || send_ack ( g ) < 0"	18:6:621:697	6525973	0	True				
ANR	6526090	OrExpression	"send_msg ( g , msg ) < 0 || read_packet ( g , false ) < 0 || send_ack ( g ) < 0"		6525973	0		||			
ANR	6526091	RelationalExpression	"send_msg ( g , msg ) < 0"		6525973	0		<			
ANR	6526092	CallExpression	"send_msg ( g , msg )"		6525973	0					
ANR	6526093	Callee	send_msg		6525973	0					
ANR	6526094	Identifier	send_msg		6525973	0					
ANR	6526095	ArgumentList	g		6525973	1					
ANR	6526096	Argument	g		6525973	0					
ANR	6526097	Identifier	g		6525973	0					
ANR	6526098	Argument	msg		6525973	1					
ANR	6526099	Identifier	msg		6525973	0					
ANR	6526100	PrimaryExpression	0		6525973	1					
ANR	6526101	OrExpression	"read_packet ( g , false ) < 0 || send_ack ( g ) < 0"		6525973	1		||			
ANR	6526102	RelationalExpression	"read_packet ( g , false ) < 0"		6525973	0		<			
ANR	6526103	CallExpression	"read_packet ( g , false )"		6525973	0					
ANR	6526104	Callee	read_packet		6525973	0					
ANR	6526105	Identifier	read_packet		6525973	0					
ANR	6526106	ArgumentList	g		6525973	1					
ANR	6526107	Argument	g		6525973	0					
ANR	6526108	Identifier	g		6525973	0					
ANR	6526109	Argument	false		6525973	1					
ANR	6526110	Identifier	false		6525973	0					
ANR	6526111	PrimaryExpression	0		6525973	1					
ANR	6526112	RelationalExpression	send_ack ( g ) < 0		6525973	1		<			
ANR	6526113	CallExpression	send_ack ( g )		6525973	0					
ANR	6526114	Callee	send_ack		6525973	0					
ANR	6526115	Identifier	send_ack		6525973	0					
ANR	6526116	ArgumentList	g		6525973	1					
ANR	6526117	Argument	g		6525973	0					
ANR	6526118	Identifier	g		6525973	0					
ANR	6526119	PrimaryExpression	0		6525973	1					
ANR	6526120	CompoundStatement		10:57:420:420	6525973	1					
ANR	6526121	GotoStatement	goto exit_err ;	20:3:705:718	6525973	0	True				
ANR	6526122	Identifier	exit_err		6525973	0					
ANR	6526123	IfStatement	if ( g -> data_len == 0 )		6525973	22					
ANR	6526124	Condition	g -> data_len == 0	22:6:730:745	6525973	0	True				
ANR	6526125	EqualityExpression	g -> data_len == 0		6525973	0		==			
ANR	6526126	PtrMemberAccess	g -> data_len		6525973	0					
ANR	6526127	Identifier	g		6525973	0					
ANR	6526128	Identifier	data_len		6525973	1					
ANR	6526129	PrimaryExpression	0		6525973	1					
ANR	6526130	CompoundStatement		13:24:468:468	6525973	1					
ANR	6526131	GotoStatement	goto exit_err ;	23:3:753:766	6525973	0	True				
ANR	6526132	Identifier	exit_err		6525973	0					
ANR	6526133	IfStatement	if ( g -> data_len == 1 && g -> data [ 0 ] == 'l' )		6525973	23					
ANR	6526134	Condition	g -> data_len == 1 && g -> data [ 0 ] == 'l'	25:6:778:814	6525973	0	True				
ANR	6526135	AndExpression	g -> data_len == 1 && g -> data [ 0 ] == 'l'		6525973	0		&&			
ANR	6526136	EqualityExpression	g -> data_len == 1		6525973	0		==			
ANR	6526137	PtrMemberAccess	g -> data_len		6525973	0					
ANR	6526138	Identifier	g		6525973	0					
ANR	6526139	Identifier	data_len		6525973	1					
ANR	6526140	PrimaryExpression	1		6525973	1					
ANR	6526141	EqualityExpression	g -> data [ 0 ] == 'l'		6525973	1		==			
ANR	6526142	ArrayIndexing	g -> data [ 0 ]		6525973	0					
ANR	6526143	PtrMemberAccess	g -> data		6525973	0					
ANR	6526144	Identifier	g		6525973	0					
ANR	6526145	Identifier	data		6525973	1					
ANR	6526146	PrimaryExpression	0		6525973	1					
ANR	6526147	PrimaryExpression	'l'		6525973	1					
ANR	6526148	CompoundStatement		16:45:537:537	6525973	1					
ANR	6526149	BreakStatement	break ;	26:3:822:827	6525973	0	True				
ANR	6526150	ExpressionStatement	status = g -> data [ 0 ]	28:2:835:854	6525973	24	True				
ANR	6526151	AssignmentExpression	status = g -> data [ 0 ]		6525973	0		=			
ANR	6526152	Identifier	status		6525973	0					
ANR	6526153	ArrayIndexing	g -> data [ 0 ]		6525973	1					
ANR	6526154	PtrMemberAccess	g -> data		6525973	0					
ANR	6526155	Identifier	g		6525973	0					
ANR	6526156	Identifier	data		6525973	1					
ANR	6526157	PrimaryExpression	0		6525973	1					
ANR	6526158	IfStatement	if ( retmax - retlen < g -> data_len )		6525973	25					
ANR	6526159	Condition	retmax - retlen < g -> data_len	29:6:862:890	6525973	0	True				
ANR	6526160	RelationalExpression	retmax - retlen < g -> data_len		6525973	0		<			
ANR	6526161	AdditiveExpression	retmax - retlen		6525973	0		-			
ANR	6526162	Identifier	retmax		6525973	0					
ANR	6526163	Identifier	retlen		6525973	1					
ANR	6526164	PtrMemberAccess	g -> data_len		6525973	1					
ANR	6526165	Identifier	g		6525973	0					
ANR	6526166	Identifier	data_len		6525973	1					
ANR	6526167	CompoundStatement		20:37:613:613	6525973	1					
ANR	6526168	IfStatement	"if ( ! ( tmp = realloc ( ret , retmax + blksz ) ) )"		6525973	0					
ANR	6526169	Condition	"! ( tmp = realloc ( ret , retmax + blksz ) )"	30:7:902:939	6525973	0	True				
ANR	6526170	UnaryOperationExpression	"! ( tmp = realloc ( ret , retmax + blksz ) )"		6525973	0					
ANR	6526171	UnaryOperator	!		6525973	0					
ANR	6526172	AssignmentExpression	"tmp = realloc ( ret , retmax + blksz )"		6525973	1		=			
ANR	6526173	Identifier	tmp		6525973	0					
ANR	6526174	CallExpression	"realloc ( ret , retmax + blksz )"		6525973	1					
ANR	6526175	Callee	realloc		6525973	0					
ANR	6526176	Identifier	realloc		6525973	0					
ANR	6526177	ArgumentList	ret		6525973	1					
ANR	6526178	Argument	ret		6525973	0					
ANR	6526179	Identifier	ret		6525973	0					
ANR	6526180	Argument	retmax + blksz		6525973	1					
ANR	6526181	AdditiveExpression	retmax + blksz		6525973	0		+			
ANR	6526182	Identifier	retmax		6525973	0					
ANR	6526183	Identifier	blksz		6525973	1					
ANR	6526184	CompoundStatement		21:47:662:662	6525973	1					
ANR	6526185	GotoStatement	goto exit_err ;	31:4:948:961	6525973	0	True				
ANR	6526186	Identifier	exit_err		6525973	0					
ANR	6526187	ExpressionStatement	retmax += blksz	33:3:971:986	6525973	1	True				
ANR	6526188	AssignmentExpression	retmax += blksz		6525973	0		+=			
ANR	6526189	Identifier	retmax		6525973	0					
ANR	6526190	Identifier	blksz		6525973	1					
ANR	6526191	ExpressionStatement	ret = tmp	34:3:991:1000	6525973	2	True				
ANR	6526192	AssignmentExpression	ret = tmp		6525973	0		=			
ANR	6526193	Identifier	ret		6525973	0					
ANR	6526194	Identifier	tmp		6525973	1					
ANR	6526195	ExpressionStatement	"strcpy ( ret + retlen , g -> data + 1 )"	36:2:1008:1042	6525973	26	True				
ANR	6526196	CallExpression	"strcpy ( ret + retlen , g -> data + 1 )"		6525973	0					
ANR	6526197	Callee	strcpy		6525973	0					
ANR	6526198	Identifier	strcpy		6525973	0					
ANR	6526199	ArgumentList	ret + retlen		6525973	1					
ANR	6526200	Argument	ret + retlen		6525973	0					
ANR	6526201	AdditiveExpression	ret + retlen		6525973	0		+			
ANR	6526202	Identifier	ret		6525973	0					
ANR	6526203	Identifier	retlen		6525973	1					
ANR	6526204	Argument	g -> data + 1		6525973	1					
ANR	6526205	AdditiveExpression	g -> data + 1		6525973	0		+			
ANR	6526206	PtrMemberAccess	g -> data		6525973	0					
ANR	6526207	Identifier	g		6525973	0					
ANR	6526208	Identifier	data		6525973	1					
ANR	6526209	PrimaryExpression	1		6525973	1					
ANR	6526210	ExpressionStatement	retlen += g -> data_len - 1	37:2:1046:1071	6525973	27	True				
ANR	6526211	AssignmentExpression	retlen += g -> data_len - 1		6525973	0		+=			
ANR	6526212	Identifier	retlen		6525973	0					
ANR	6526213	AdditiveExpression	g -> data_len - 1		6525973	1		-			
ANR	6526214	PtrMemberAccess	g -> data_len		6525973	0					
ANR	6526215	Identifier	g		6525973	0					
ANR	6526216	Identifier	data_len		6525973	1					
ANR	6526217	PrimaryExpression	1		6525973	1					
ANR	6526218	ExpressionStatement	off = retlen	38:2:1075:1087	6525973	28	True				
ANR	6526219	AssignmentExpression	off = retlen		6525973	0		=			
ANR	6526220	Identifier	off		6525973	0					
ANR	6526221	Identifier	retlen		6525973	1					
ANR	6526222	IfStatement	if ( status == 'l' )		6525973	29					
ANR	6526223	Condition	status == 'l'	39:6:1095:1107	6525973	0	True				
ANR	6526224	EqualityExpression	status == 'l'		6525973	0		==			
ANR	6526225	Identifier	status		6525973	0					
ANR	6526226	PrimaryExpression	'l'		6525973	1					
ANR	6526227	CompoundStatement		30:21:830:830	6525973	1					
ANR	6526228	BreakStatement	break ;	40:3:1115:1120	6525973	0	True				
ANR	6526229	IfStatement	if ( status != 'm' )		6525973	30					
ANR	6526230	Condition	status != 'm'	42:6:1132:1144	6525973	0	True				
ANR	6526231	EqualityExpression	status != 'm'		6525973	0		!=			
ANR	6526232	Identifier	status		6525973	0					
ANR	6526233	PrimaryExpression	'm'		6525973	1					
ANR	6526234	CompoundStatement		33:21:867:867	6525973	1					
ANR	6526235	GotoStatement	goto exit_err ;	43:3:1152:1165	6525973	0	True				
ANR	6526236	Identifier	exit_err		6525973	0					
ANR	6526237	IfStatement	if ( ! ret )		6525973	3					
ANR	6526238	Condition	! ret	46:5:1179:1182	6525973	0	True				
ANR	6526239	UnaryOperationExpression	! ret		6525973	0					
ANR	6526240	UnaryOperator	!		6525973	0					
ANR	6526241	Identifier	ret		6525973	1					
ANR	6526242	CompoundStatement		37:11:905:905	6525973	1					
ANR	6526243	ExpressionStatement	* tot_len = 0	47:2:1189:1201	6525973	0	True				
ANR	6526244	AssignmentExpression	* tot_len = 0		6525973	0		=			
ANR	6526245	UnaryOperationExpression	* tot_len		6525973	0					
ANR	6526246	UnaryOperator	*		6525973	0					
ANR	6526247	Identifier	tot_len		6525973	1					
ANR	6526248	PrimaryExpression	0		6525973	1					
ANR	6526249	ReturnStatement	return NULL ;	48:2:1205:1216	6525973	1	True				
ANR	6526250	Identifier	NULL		6525973	0					
ANR	6526251	ExpressionStatement	"tmp = strstr ( ret , ""<xi:include"" )"	50:1:1222:1255	6525973	4	True				
ANR	6526252	AssignmentExpression	"tmp = strstr ( ret , ""<xi:include"" )"		6525973	0		=			
ANR	6526253	Identifier	tmp		6525973	0					
ANR	6526254	CallExpression	"strstr ( ret , ""<xi:include"" )"		6525973	1					
ANR	6526255	Callee	strstr		6525973	0					
ANR	6526256	Identifier	strstr		6525973	0					
ANR	6526257	ArgumentList	ret		6525973	1					
ANR	6526258	Argument	ret		6525973	0					
ANR	6526259	Identifier	ret		6525973	0					
ANR	6526260	Argument	"""<xi:include"""		6525973	1					
ANR	6526261	PrimaryExpression	"""<xi:include"""		6525973	0					
ANR	6526262	WhileStatement	while ( tmp )		6525973	5					
ANR	6526263	Condition	tmp	51:8:1265:1267	6525973	0	True				
ANR	6526264	Identifier	tmp		6525973	0					
ANR	6526265	CompoundStatement		42:13:990:990	6525973	1					
ANR	6526266	IfStatement	"if ( ! ( tmp2 = strstr ( tmp , ""/>"" ) ) )"		6525973	0					
ANR	6526267	Condition	"! ( tmp2 = strstr ( tmp , ""/>"" ) )"	53:6:1293:1320	6525973	0	True				
ANR	6526268	UnaryOperationExpression	"! ( tmp2 = strstr ( tmp , ""/>"" ) )"		6525973	0					
ANR	6526269	UnaryOperator	!		6525973	0					
ANR	6526270	AssignmentExpression	"tmp2 = strstr ( tmp , ""/>"" )"		6525973	1		=			
ANR	6526271	Identifier	tmp2		6525973	0					
ANR	6526272	CallExpression	"strstr ( tmp , ""/>"" )"		6525973	1					
ANR	6526273	Callee	strstr		6525973	0					
ANR	6526274	Identifier	strstr		6525973	0					
ANR	6526275	ArgumentList	tmp		6525973	1					
ANR	6526276	Argument	tmp		6525973	0					
ANR	6526277	Identifier	tmp		6525973	0					
ANR	6526278	Argument	"""/>"""		6525973	1					
ANR	6526279	PrimaryExpression	"""/>"""		6525973	0					
ANR	6526280	CompoundStatement		44:36:1043:1043	6525973	1					
ANR	6526281	GotoStatement	goto exit_err ;	54:3:1328:1341	6525973	0	True				
ANR	6526282	Identifier	exit_err		6525973	0					
ANR	6526283	ExpressionStatement	subret_space = tmp2 + 2 - tmp	56:2:1349:1378	6525973	1	True				
ANR	6526284	AssignmentExpression	subret_space = tmp2 + 2 - tmp		6525973	0		=			
ANR	6526285	Identifier	subret_space		6525973	0					
ANR	6526286	AdditiveExpression	tmp2 + 2 - tmp		6525973	1		+			
ANR	6526287	Identifier	tmp2		6525973	0					
ANR	6526288	AdditiveExpression	2 - tmp		6525973	1		-			
ANR	6526289	PrimaryExpression	2		6525973	0					
ANR	6526290	Identifier	tmp		6525973	1					
ANR	6526291	IfStatement	"if ( ! ( tmp2 = strstr ( tmp , ""href="" ) ) )"		6525973	2					
ANR	6526292	Condition	"! ( tmp2 = strstr ( tmp , ""href="" ) )"	57:6:1386:1416	6525973	0	True				
ANR	6526293	UnaryOperationExpression	"! ( tmp2 = strstr ( tmp , ""href="" ) )"		6525973	0					
ANR	6526294	UnaryOperator	!		6525973	0					
ANR	6526295	AssignmentExpression	"tmp2 = strstr ( tmp , ""href="" )"		6525973	1		=			
ANR	6526296	Identifier	tmp2		6525973	0					
ANR	6526297	CallExpression	"strstr ( tmp , ""href="" )"		6525973	1					
ANR	6526298	Callee	strstr		6525973	0					
ANR	6526299	Identifier	strstr		6525973	0					
ANR	6526300	ArgumentList	tmp		6525973	1					
ANR	6526301	Argument	tmp		6525973	0					
ANR	6526302	Identifier	tmp		6525973	0					
ANR	6526303	Argument	"""href="""		6525973	1					
ANR	6526304	PrimaryExpression	"""href="""		6525973	0					
ANR	6526305	CompoundStatement		48:39:1139:1139	6525973	1					
ANR	6526306	GotoStatement	goto exit_err ;	58:3:1424:1437	6525973	0	True				
ANR	6526307	Identifier	exit_err		6525973	0					
ANR	6526308	ExpressionStatement	tmp2 += 6	60:2:1445:1454	6525973	3	True				
ANR	6526309	AssignmentExpression	tmp2 += 6		6525973	0		+=			
ANR	6526310	Identifier	tmp2		6525973	0					
ANR	6526311	PrimaryExpression	6		6525973	1					
ANR	6526312	IfStatement	"if ( ! ( tmp3 = strchr ( tmp2 , '""' ) ) )"		6525973	4					
ANR	6526313	Condition	"! ( tmp3 = strchr ( tmp2 , '""' ) )"	61:6:1462:1489	6525973	0	True				
ANR	6526314	UnaryOperationExpression	"! ( tmp3 = strchr ( tmp2 , '""' ) )"		6525973	0					
ANR	6526315	UnaryOperator	!		6525973	0					
ANR	6526316	AssignmentExpression	"tmp3 = strchr ( tmp2 , '""' )"		6525973	1		=			
ANR	6526317	Identifier	tmp3		6525973	0					
ANR	6526318	CallExpression	"strchr ( tmp2 , '""' )"		6525973	1					
ANR	6526319	Callee	strchr		6525973	0					
ANR	6526320	Identifier	strchr		6525973	0					
ANR	6526321	ArgumentList	tmp2		6525973	1					
ANR	6526322	Argument	tmp2		6525973	0					
ANR	6526323	Identifier	tmp2		6525973	0					
ANR	6526324	Argument	"'""'"		6525973	1					
ANR	6526325	PrimaryExpression	"'""'"		6525973	0					
ANR	6526326	CompoundStatement		52:36:1212:1212	6525973	1					
ANR	6526327	GotoStatement	goto exit_err ;	62:3:1497:1510	6525973	0	True				
ANR	6526328	Identifier	exit_err		6525973	0					
ANR	6526329	ExpressionStatement	tmpchar = * tmp3	64:2:1518:1533	6525973	5	True				
ANR	6526330	AssignmentExpression	tmpchar = * tmp3		6525973	0		=			
ANR	6526331	Identifier	tmpchar		6525973	0					
ANR	6526332	UnaryOperationExpression	* tmp3		6525973	1					
ANR	6526333	UnaryOperator	*		6525973	0					
ANR	6526334	Identifier	tmp3		6525973	1					
ANR	6526335	ExpressionStatement	* tmp3 = '\\0'	65:2:1537:1549	6525973	6	True				
ANR	6526336	AssignmentExpression	* tmp3 = '\\0'		6525973	0		=			
ANR	6526337	UnaryOperationExpression	* tmp3		6525973	0					
ANR	6526338	UnaryOperator	*		6525973	0					
ANR	6526339	Identifier	tmp3		6525973	1					
ANR	6526340	PrimaryExpression	'\\0'		6525973	1					
ANR	6526341	ExpressionStatement	"subret = gdbr_read_feature ( g , tmp2 , & subret_len )"	66:2:1553:1602	6525973	7	True				
ANR	6526342	AssignmentExpression	"subret = gdbr_read_feature ( g , tmp2 , & subret_len )"		6525973	0		=			
ANR	6526343	Identifier	subret		6525973	0					
ANR	6526344	CallExpression	"gdbr_read_feature ( g , tmp2 , & subret_len )"		6525973	1					
ANR	6526345	Callee	gdbr_read_feature		6525973	0					
ANR	6526346	Identifier	gdbr_read_feature		6525973	0					
ANR	6526347	ArgumentList	g		6525973	1					
ANR	6526348	Argument	g		6525973	0					
ANR	6526349	Identifier	g		6525973	0					
ANR	6526350	Argument	tmp2		6525973	1					
ANR	6526351	Identifier	tmp2		6525973	0					
ANR	6526352	Argument	& subret_len		6525973	2					
ANR	6526353	UnaryOperationExpression	& subret_len		6525973	0					
ANR	6526354	UnaryOperator	&		6525973	0					
ANR	6526355	Identifier	subret_len		6525973	1					
ANR	6526356	ExpressionStatement	* tmp3 = tmpchar	67:2:1606:1621	6525973	8	True				
ANR	6526357	AssignmentExpression	* tmp3 = tmpchar		6525973	0		=			
ANR	6526358	UnaryOperationExpression	* tmp3		6525973	0					
ANR	6526359	UnaryOperator	*		6525973	0					
ANR	6526360	Identifier	tmp3		6525973	1					
ANR	6526361	Identifier	tmpchar		6525973	1					
ANR	6526362	IfStatement	if ( subret )		6525973	9					
ANR	6526363	Condition	subret	68:6:1629:1634	6525973	0	True				
ANR	6526364	Identifier	subret		6525973	0					
ANR	6526365	CompoundStatement		59:14:1357:1357	6525973	1					
ANR	6526366	IfStatement	if ( subret_len <= subret_space )		6525973	0					
ANR	6526367	Condition	subret_len <= subret_space	69:7:1646:1671	6525973	0	True				
ANR	6526368	RelationalExpression	subret_len <= subret_space		6525973	0		<=			
ANR	6526369	Identifier	subret_len		6525973	0					
ANR	6526370	Identifier	subret_space		6525973	1					
ANR	6526371	CompoundStatement		60:35:1394:1394	6525973	1					
ANR	6526372	ExpressionStatement	"memcpy ( tmp , subret , subret_len )"	70:4:1680:1712	6525973	0	True				
ANR	6526373	CallExpression	"memcpy ( tmp , subret , subret_len )"		6525973	0					
ANR	6526374	Callee	memcpy		6525973	0					
ANR	6526375	Identifier	memcpy		6525973	0					
ANR	6526376	ArgumentList	tmp		6525973	1					
ANR	6526377	Argument	tmp		6525973	0					
ANR	6526378	Identifier	tmp		6525973	0					
ANR	6526379	Argument	subret		6525973	1					
ANR	6526380	Identifier	subret		6525973	0					
ANR	6526381	Argument	subret_len		6525973	2					
ANR	6526382	Identifier	subret_len		6525973	0					
ANR	6526383	ExpressionStatement	"memcpy ( tmp + subret_len , tmp + subret_space , retlen - ( tmp + subret_space - ret ) )"	71:4:1718:1805	6525973	1	True				
ANR	6526384	CallExpression	"memcpy ( tmp + subret_len , tmp + subret_space , retlen - ( tmp + subret_space - ret ) )"		6525973	0					
ANR	6526385	Callee	memcpy		6525973	0					
ANR	6526386	Identifier	memcpy		6525973	0					
ANR	6526387	ArgumentList	tmp + subret_len		6525973	1					
ANR	6526388	Argument	tmp + subret_len		6525973	0					
ANR	6526389	AdditiveExpression	tmp + subret_len		6525973	0		+			
ANR	6526390	Identifier	tmp		6525973	0					
ANR	6526391	Identifier	subret_len		6525973	1					
ANR	6526392	Argument	tmp + subret_space		6525973	1					
ANR	6526393	AdditiveExpression	tmp + subret_space		6525973	0		+			
ANR	6526394	Identifier	tmp		6525973	0					
ANR	6526395	Identifier	subret_space		6525973	1					
ANR	6526396	Argument	retlen - ( tmp + subret_space - ret )		6525973	2					
ANR	6526397	AdditiveExpression	retlen - ( tmp + subret_space - ret )		6525973	0		-			
ANR	6526398	Identifier	retlen		6525973	0					
ANR	6526399	AdditiveExpression	tmp + subret_space - ret		6525973	1		+			
ANR	6526400	Identifier	tmp		6525973	0					
ANR	6526401	AdditiveExpression	subret_space - ret		6525973	1		-			
ANR	6526402	Identifier	subret_space		6525973	0					
ANR	6526403	Identifier	ret		6525973	1					
ANR	6526404	ExpressionStatement	retlen -= subret_space - subret_len	73:4:1811:1846	6525973	2	True				
ANR	6526405	AssignmentExpression	retlen -= subret_space - subret_len		6525973	0		-=			
ANR	6526406	Identifier	retlen		6525973	0					
ANR	6526407	AdditiveExpression	subret_space - subret_len		6525973	1		-			
ANR	6526408	Identifier	subret_space		6525973	0					
ANR	6526409	Identifier	subret_len		6525973	1					
ANR	6526410	ExpressionStatement	ret [ retlen ] = '\\0'	74:4:1852:1870	6525973	3	True				
ANR	6526411	AssignmentExpression	ret [ retlen ] = '\\0'		6525973	0		=			
ANR	6526412	ArrayIndexing	ret [ retlen ]		6525973	0					
ANR	6526413	Identifier	ret		6525973	0					
ANR	6526414	Identifier	retlen		6525973	1					
ANR	6526415	PrimaryExpression	'\\0'		6525973	1					
ANR	6526416	ExpressionStatement	"tmp = strstr ( tmp3 , ""<xi:include"" )"	75:4:1876:1910	6525973	4	True				
ANR	6526417	AssignmentExpression	"tmp = strstr ( tmp3 , ""<xi:include"" )"		6525973	0		=			
ANR	6526418	Identifier	tmp		6525973	0					
ANR	6526419	CallExpression	"strstr ( tmp3 , ""<xi:include"" )"		6525973	1					
ANR	6526420	Callee	strstr		6525973	0					
ANR	6526421	Identifier	strstr		6525973	0					
ANR	6526422	ArgumentList	tmp3		6525973	1					
ANR	6526423	Argument	tmp3		6525973	0					
ANR	6526424	Identifier	tmp3		6525973	0					
ANR	6526425	Argument	"""<xi:include"""		6525973	1					
ANR	6526426	PrimaryExpression	"""<xi:include"""		6525973	0					
ANR	6526427	ExpressionStatement	free ( subret )	76:4:1916:1929	6525973	5	True				
ANR	6526428	CallExpression	free ( subret )		6525973	0					
ANR	6526429	Callee	free		6525973	0					
ANR	6526430	Identifier	free		6525973	0					
ANR	6526431	ArgumentList	subret		6525973	1					
ANR	6526432	Argument	subret		6525973	0					
ANR	6526433	Identifier	subret		6525973	0					
ANR	6526434	ContinueStatement	continue ;	77:4:1935:1943	6525973	6	True				
ANR	6526435	IfStatement	if ( subret_len > retmax - retlen - 1 )		6525973	1					
ANR	6526436	Condition	subret_len > retmax - retlen - 1	79:7:1957:1988	6525973	0	True				
ANR	6526437	RelationalExpression	subret_len > retmax - retlen - 1		6525973	0		>			
ANR	6526438	Identifier	subret_len		6525973	0					
ANR	6526439	AdditiveExpression	retmax - retlen - 1		6525973	1		-			
ANR	6526440	Identifier	retmax		6525973	0					
ANR	6526441	AdditiveExpression	retlen - 1		6525973	1		-			
ANR	6526442	Identifier	retlen		6525973	0					
ANR	6526443	PrimaryExpression	1		6525973	1					
ANR	6526444	CompoundStatement		70:41:1711:1711	6525973	1					
ANR	6526445	ExpressionStatement	tmp3 = NULL	80:4:1997:2008	6525973	0	True				
ANR	6526446	AssignmentExpression	tmp3 = NULL		6525973	0		=			
ANR	6526447	Identifier	tmp3		6525973	0					
ANR	6526448	Identifier	NULL		6525973	1					
ANR	6526449	IfStatement	"if ( ! ( tmp3 = realloc ( ret , retmax + subret_len ) ) )"		6525973	1					
ANR	6526450	Condition	"! ( tmp3 = realloc ( ret , retmax + subret_len ) )"	81:8:2018:2061	6525973	0	True				
ANR	6526451	UnaryOperationExpression	"! ( tmp3 = realloc ( ret , retmax + subret_len ) )"		6525973	0					
ANR	6526452	UnaryOperator	!		6525973	0					
ANR	6526453	AssignmentExpression	"tmp3 = realloc ( ret , retmax + subret_len )"		6525973	1		=			
ANR	6526454	Identifier	tmp3		6525973	0					
ANR	6526455	CallExpression	"realloc ( ret , retmax + subret_len )"		6525973	1					
ANR	6526456	Callee	realloc		6525973	0					
ANR	6526457	Identifier	realloc		6525973	0					
ANR	6526458	ArgumentList	ret		6525973	1					
ANR	6526459	Argument	ret		6525973	0					
ANR	6526460	Identifier	ret		6525973	0					
ANR	6526461	Argument	retmax + subret_len		6525973	1					
ANR	6526462	AdditiveExpression	retmax + subret_len		6525973	0		+			
ANR	6526463	Identifier	retmax		6525973	0					
ANR	6526464	Identifier	subret_len		6525973	1					
ANR	6526465	CompoundStatement		72:54:1784:1784	6525973	1					
ANR	6526466	ExpressionStatement	free ( subret )	82:5:2071:2084	6525973	0	True				
ANR	6526467	CallExpression	free ( subret )		6525973	0					
ANR	6526468	Callee	free		6525973	0					
ANR	6526469	Identifier	free		6525973	0					
ANR	6526470	ArgumentList	subret		6525973	1					
ANR	6526471	Argument	subret		6525973	0					
ANR	6526472	Identifier	subret		6525973	0					
ANR	6526473	GotoStatement	goto exit_err ;	83:5:2091:2104	6525973	1	True				
ANR	6526474	Identifier	exit_err		6525973	0					
ANR	6526475	ExpressionStatement	tmp = tmp3 + ( tmp - ret )	85:4:2116:2140	6525973	2	True				
ANR	6526476	AssignmentExpression	tmp = tmp3 + ( tmp - ret )		6525973	0		=			
ANR	6526477	Identifier	tmp		6525973	0					
ANR	6526478	AdditiveExpression	tmp3 + ( tmp - ret )		6525973	1		+			
ANR	6526479	Identifier	tmp3		6525973	0					
ANR	6526480	AdditiveExpression	tmp - ret		6525973	1		-			
ANR	6526481	Identifier	tmp		6525973	0					
ANR	6526482	Identifier	ret		6525973	1					
ANR	6526483	ExpressionStatement	ret = tmp3	86:4:2146:2156	6525973	3	True				
ANR	6526484	AssignmentExpression	ret = tmp3		6525973	0		=			
ANR	6526485	Identifier	ret		6525973	0					
ANR	6526486	Identifier	tmp3		6525973	1					
ANR	6526487	ExpressionStatement	retmax += subret_len + 1	87:4:2162:2186	6525973	4	True				
ANR	6526488	AssignmentExpression	retmax += subret_len + 1		6525973	0		+=			
ANR	6526489	Identifier	retmax		6525973	0					
ANR	6526490	AdditiveExpression	subret_len + 1		6525973	1		+			
ANR	6526491	Identifier	subret_len		6525973	0					
ANR	6526492	PrimaryExpression	1		6525973	1					
ANR	6526493	ExpressionStatement	"memmove ( tmp + subret_len , tmp + subret_space , retlen - ( tmp + subret_space - ret ) )"	89:3:2196:2283	6525973	2	True				
ANR	6526494	CallExpression	"memmove ( tmp + subret_len , tmp + subret_space , retlen - ( tmp + subret_space - ret ) )"		6525973	0					
ANR	6526495	Callee	memmove		6525973	0					
ANR	6526496	Identifier	memmove		6525973	0					
ANR	6526497	ArgumentList	tmp + subret_len		6525973	1					
ANR	6526498	Argument	tmp + subret_len		6525973	0					
ANR	6526499	AdditiveExpression	tmp + subret_len		6525973	0		+			
ANR	6526500	Identifier	tmp		6525973	0					
ANR	6526501	Identifier	subret_len		6525973	1					
ANR	6526502	Argument	tmp + subret_space		6525973	1					
ANR	6526503	AdditiveExpression	tmp + subret_space		6525973	0		+			
ANR	6526504	Identifier	tmp		6525973	0					
ANR	6526505	Identifier	subret_space		6525973	1					
ANR	6526506	Argument	retlen - ( tmp + subret_space - ret )		6525973	2					
ANR	6526507	AdditiveExpression	retlen - ( tmp + subret_space - ret )		6525973	0		-			
ANR	6526508	Identifier	retlen		6525973	0					
ANR	6526509	AdditiveExpression	tmp + subret_space - ret		6525973	1		+			
ANR	6526510	Identifier	tmp		6525973	0					
ANR	6526511	AdditiveExpression	subret_space - ret		6525973	1		-			
ANR	6526512	Identifier	subret_space		6525973	0					
ANR	6526513	Identifier	ret		6525973	1					
ANR	6526514	ExpressionStatement	"memcpy ( tmp , subret , subret_len )"	91:3:2288:2320	6525973	3	True				
ANR	6526515	CallExpression	"memcpy ( tmp , subret , subret_len )"		6525973	0					
ANR	6526516	Callee	memcpy		6525973	0					
ANR	6526517	Identifier	memcpy		6525973	0					
ANR	6526518	ArgumentList	tmp		6525973	1					
ANR	6526519	Argument	tmp		6525973	0					
ANR	6526520	Identifier	tmp		6525973	0					
ANR	6526521	Argument	subret		6525973	1					
ANR	6526522	Identifier	subret		6525973	0					
ANR	6526523	Argument	subret_len		6525973	2					
ANR	6526524	Identifier	subret_len		6525973	0					
ANR	6526525	ExpressionStatement	retlen += subret_len - subret_space	92:3:2325:2360	6525973	4	True				
ANR	6526526	AssignmentExpression	retlen += subret_len - subret_space		6525973	0		+=			
ANR	6526527	Identifier	retlen		6525973	0					
ANR	6526528	AdditiveExpression	subret_len - subret_space		6525973	1		-			
ANR	6526529	Identifier	subret_len		6525973	0					
ANR	6526530	Identifier	subret_space		6525973	1					
ANR	6526531	ExpressionStatement	ret [ retlen ] = '\\0'	93:3:2365:2383	6525973	5	True				
ANR	6526532	AssignmentExpression	ret [ retlen ] = '\\0'		6525973	0		=			
ANR	6526533	ArrayIndexing	ret [ retlen ]		6525973	0					
ANR	6526534	Identifier	ret		6525973	0					
ANR	6526535	Identifier	retlen		6525973	1					
ANR	6526536	PrimaryExpression	'\\0'		6525973	1					
ANR	6526537	ExpressionStatement	free ( subret )	94:3:2388:2401	6525973	6	True				
ANR	6526538	CallExpression	free ( subret )		6525973	0					
ANR	6526539	Callee	free		6525973	0					
ANR	6526540	Identifier	free		6525973	0					
ANR	6526541	ArgumentList	subret		6525973	1					
ANR	6526542	Argument	subret		6525973	0					
ANR	6526543	Identifier	subret		6525973	0					
ANR	6526544	ExpressionStatement	"tmp = strstr ( tmp3 , ""<xi:include"" )"	96:2:2409:2443	6525973	10	True				
ANR	6526545	AssignmentExpression	"tmp = strstr ( tmp3 , ""<xi:include"" )"		6525973	0		=			
ANR	6526546	Identifier	tmp		6525973	0					
ANR	6526547	CallExpression	"strstr ( tmp3 , ""<xi:include"" )"		6525973	1					
ANR	6526548	Callee	strstr		6525973	0					
ANR	6526549	Identifier	strstr		6525973	0					
ANR	6526550	ArgumentList	tmp3		6525973	1					
ANR	6526551	Argument	tmp3		6525973	0					
ANR	6526552	Identifier	tmp3		6525973	0					
ANR	6526553	Argument	"""<xi:include"""		6525973	1					
ANR	6526554	PrimaryExpression	"""<xi:include"""		6525973	0					
ANR	6526555	ExpressionStatement	* tot_len = retlen	98:1:2449:2466	6525973	6	True				
ANR	6526556	AssignmentExpression	* tot_len = retlen		6525973	0		=			
ANR	6526557	UnaryOperationExpression	* tot_len		6525973	0					
ANR	6526558	UnaryOperator	*		6525973	0					
ANR	6526559	Identifier	tot_len		6525973	1					
ANR	6526560	Identifier	retlen		6525973	1					
ANR	6526561	ReturnStatement	return ret ;	99:1:2469:2479	6525973	7	True				
ANR	6526562	Identifier	ret		6525973	0					
ANR	6526563	Label	exit_err :	100:0:2481:2489	6525973	8	True				
ANR	6526564	Identifier	exit_err		6525973	0					
ANR	6526565	ExpressionStatement	free ( ret )	101:1:2492:2502	6525973	9	True				
ANR	6526566	CallExpression	free ( ret )		6525973	0					
ANR	6526567	Callee	free		6525973	0					
ANR	6526568	Identifier	free		6525973	0					
ANR	6526569	ArgumentList	ret		6525973	1					
ANR	6526570	Argument	ret		6525973	0					
ANR	6526571	Identifier	ret		6525973	0					
ANR	6526572	ExpressionStatement	* tot_len = 0	102:1:2505:2517	6525973	10	True				
ANR	6526573	AssignmentExpression	* tot_len = 0		6525973	0		=			
ANR	6526574	UnaryOperationExpression	* tot_len		6525973	0					
ANR	6526575	UnaryOperator	*		6525973	0					
ANR	6526576	Identifier	tot_len		6525973	1					
ANR	6526577	PrimaryExpression	0		6525973	1					
ANR	6526578	ReturnStatement	return NULL ;	103:1:2520:2531	6525973	11	True				
ANR	6526579	Identifier	NULL		6525973	0					
ANR	6526580	ReturnType	static char *		6525973	1					
ANR	6526581	Identifier	gdbr_read_feature		6525973	2					
ANR	6526582	ParameterList	"libgdbr_t * g , const char * file , ut64 * tot_len"		6525973	3					
ANR	6526583	Parameter	libgdbr_t * g	10:31:232:243	6525973	0	True				
ANR	6526584	ParameterType	libgdbr_t *		6525973	0					
ANR	6526585	Identifier	g		6525973	1					
ANR	6526586	Parameter	const char * file	10:45:246:261	6525973	1	True				
ANR	6526587	ParameterType	const char *		6525973	0					
ANR	6526588	Identifier	file		6525973	1					
ANR	6526589	Parameter	ut64 * tot_len	10:63:264:276	6525973	2	True				
ANR	6526590	ParameterType	ut64 *		6525973	0					
ANR	6526591	Identifier	tot_len		6525973	1					
ANR	6526592	CFGEntryNode	ENTRY		6525973		True				
ANR	6526593	CFGExitNode	EXIT		6525973		True				
ANR	6526594	Symbol	msg		6525973						
ANR	6526595	Symbol	tmpchar		6525973						
ANR	6526596	Symbol	g -> data_len		6525973						
ANR	6526597	Symbol	strchr		6525973						
ANR	6526598	Symbol	tmp3		6525973						
ANR	6526599	Symbol	realloc		6525973						
ANR	6526600	Symbol	* ret		6525973						
ANR	6526601	Symbol	* retlen		6525973						
ANR	6526602	Symbol	tmp2		6525973						
ANR	6526603	Symbol	send_ack		6525973						
ANR	6526604	Symbol	subret_len		6525973						
ANR	6526605	Symbol	subret_space		6525973						
ANR	6526606	Symbol	* g -> data		6525973						
ANR	6526607	Symbol	file		6525973						
ANR	6526608	Symbol	gdbr_read_feature		6525973						
ANR	6526609	Symbol	len		6525973						
ANR	6526610	Symbol	send_msg		6525973						
ANR	6526611	Symbol	* tot_len		6525973						
ANR	6526612	Symbol	tmp		6525973						
ANR	6526613	Symbol	* tmp3		6525973						
ANR	6526614	Symbol	read_packet		6525973						
ANR	6526615	Symbol	retlen		6525973						
ANR	6526616	Symbol	blksz		6525973						
ANR	6526617	Symbol	ret		6525973						
ANR	6526618	Symbol	g -> stub_features . pkt_sz		6525973						
ANR	6526619	Symbol	tot_len		6525973						
ANR	6526620	Symbol	NULL		6525973						
ANR	6526621	Symbol	* * g		6525973						
ANR	6526622	Symbol	g -> data		6525973						
ANR	6526623	Symbol	g -> stub_features		6525973						
ANR	6526624	Symbol	g		6525973						
ANR	6526625	Symbol	false		6525973						
ANR	6526626	Symbol	& subret_len		6525973						
ANR	6526627	Symbol	retmax		6525973						
ANR	6526628	Symbol	off		6525973						
ANR	6526629	Symbol	* g		6525973						
ANR	6526630	Symbol	strstr		6525973						
ANR	6526631	Symbol	g -> data_max		6525973						
ANR	6526632	Symbol	subret		6525973						
ANR	6526633	Symbol	status		6525973						
ANR	6526634	ClassDef	<unnamed>	107:8:2545:2707							
ANR	6526635	DeclStmt									
ANR	6526636	Decl							char	char [ 32 ]	type
ANR	6526637	ClassDef	<unnamed>	109:1:2571:2653							
ANR	6526638	DeclStmt									
ANR	6526639	Decl							char	char [ 32 ]	name
ANR	6526640	DeclStmt									
ANR	6526641	Decl							ut32	ut32	bit_num
ANR	6526642	DeclStmt									
ANR	6526643	Decl							ut32	ut32	sz
ANR	6526644	DeclStmt									
ANR	6526645	Decl								 [ 64 ]	fields
ANR	6526646	DeclStmt									
ANR	6526647	Decl							ut32	ut32	num_bits
ANR	6526648	DeclStmt									
ANR	6526649	Decl							ut32	ut32	num_fields
ANR	6526650	DeclStmt									
ANR	6526651	Decl									gdbr_xml_flags_t
ANR	6526652	ClassDef	<unnamed>	118:8:2718:2801							
ANR	6526653	DeclStmt									
ANR	6526654	Decl							char	char [ 32 ]	name
ANR	6526655	DeclStmt									
ANR	6526656	Decl							char	char [ 8 ]	type
ANR	6526657	DeclStmt									
ANR	6526658	Decl							ut32	ut32	size
ANR	6526659	DeclStmt									
ANR	6526660	Decl							ut32	ut32	flagnum
ANR	6526661	DeclStmt									
ANR	6526662	Decl									gdbr_xml_reg_t
ANR	6526663	DeclStmt									
ANR	6526664	Decl							void	"void ( char * buf , const gdbr_xml_flags_t * flags )"	_write_flag_bits
ANR	6526665	DeclStmt									
ANR	6526666	Decl							int	"int ( libgdbr_t * g , char * xml_data )"	_resolve_arch
ANR	6526667	DeclStmt									
ANR	6526668	Decl							RList	RList * ( char * flagstr )	_extract_flags
ANR	6526669	DeclStmt									
ANR	6526670	Decl							RList	"RList * ( char * regstr , RList * flags , char * pc_alias )"	_extract_regs
ANR	6526671	Function	gdbr_parse_target_xml	130:0:3051:7283							
ANR	6526672	FunctionDef	"gdbr_parse_target_xml (libgdbr_t * g , char * xml_data , ut64 len)"		6526671	0					
ANR	6526673	CompoundStatement		130:73:3124:7283	6526671	0					
ANR	6526674	IdentifierDeclStatement	"char * regstr , * flagstr , * tmp , * profile = NULL , pc_alias [ 64 ] , flag_bits [ 65 ] ;"	131:1:3127:3201	6526671	0	True				
ANR	6526675	IdentifierDecl	* regstr		6526671	0					
ANR	6526676	IdentifierDeclType	char *		6526671	0					
ANR	6526677	Identifier	regstr		6526671	1					
ANR	6526678	IdentifierDecl	* flagstr		6526671	1					
ANR	6526679	IdentifierDeclType	char *		6526671	0					
ANR	6526680	Identifier	flagstr		6526671	1					
ANR	6526681	IdentifierDecl	* tmp		6526671	2					
ANR	6526682	IdentifierDeclType	char *		6526671	0					
ANR	6526683	Identifier	tmp		6526671	1					
ANR	6526684	IdentifierDecl	* profile = NULL		6526671	3					
ANR	6526685	IdentifierDeclType	char *		6526671	0					
ANR	6526686	Identifier	profile		6526671	1					
ANR	6526687	AssignmentExpression	* profile = NULL		6526671	2		=			
ANR	6526688	Identifier	NULL		6526671	0					
ANR	6526689	Identifier	NULL		6526671	1					
ANR	6526690	IdentifierDecl	pc_alias [ 64 ]		6526671	4					
ANR	6526691	IdentifierDeclType	char [ 64 ]		6526671	0					
ANR	6526692	Identifier	pc_alias		6526671	1					
ANR	6526693	PrimaryExpression	64		6526671	2					
ANR	6526694	IdentifierDecl	flag_bits [ 65 ]		6526671	5					
ANR	6526695	IdentifierDeclType	char [ 65 ]		6526671	0					
ANR	6526696	Identifier	flag_bits		6526671	1					
ANR	6526697	PrimaryExpression	65		6526671	2					
ANR	6526698	IdentifierDeclStatement	"RList * flags , * regs ;"	132:1:3204:3223	6526671	1	True				
ANR	6526699	IdentifierDecl	* flags		6526671	0					
ANR	6526700	IdentifierDeclType	RList *		6526671	0					
ANR	6526701	Identifier	flags		6526671	1					
ANR	6526702	IdentifierDecl	* regs		6526671	1					
ANR	6526703	IdentifierDeclType	RList *		6526671	0					
ANR	6526704	Identifier	regs		6526671	1					
ANR	6526705	IdentifierDeclStatement	RListIter * iter ;	133:1:3226:3241	6526671	2	True				
ANR	6526706	IdentifierDecl	* iter		6526671	0					
ANR	6526707	IdentifierDeclType	RListIter *		6526671	0					
ANR	6526708	Identifier	iter		6526671	1					
ANR	6526709	IdentifierDeclStatement	gdbr_xml_flags_t * tmpflag ;	134:1:3244:3269	6526671	3	True				
ANR	6526710	IdentifierDecl	* tmpflag		6526671	0					
ANR	6526711	IdentifierDeclType	gdbr_xml_flags_t *		6526671	0					
ANR	6526712	Identifier	tmpflag		6526671	1					
ANR	6526713	IdentifierDeclStatement	gdbr_xml_reg_t * tmpreg ;	135:1:3272:3294	6526671	4	True				
ANR	6526714	IdentifierDecl	* tmpreg		6526671	0					
ANR	6526715	IdentifierDeclType	gdbr_xml_reg_t *		6526671	0					
ANR	6526716	Identifier	tmpreg		6526671	1					
ANR	6526717	IdentifierDeclStatement	"ut64 profile_len = 0 , profile_max_len , regnum = 0 , regoff = 0 ;"	136:1:3297:3358	6526671	5	True				
ANR	6526718	IdentifierDecl	profile_len = 0		6526671	0					
ANR	6526719	IdentifierDeclType	ut64		6526671	0					
ANR	6526720	Identifier	profile_len		6526671	1					
ANR	6526721	AssignmentExpression	profile_len = 0		6526671	2		=			
ANR	6526722	Identifier	profile_len		6526671	0					
ANR	6526723	PrimaryExpression	0		6526671	1					
ANR	6526724	IdentifierDecl	profile_max_len		6526671	1					
ANR	6526725	IdentifierDeclType	ut64		6526671	0					
ANR	6526726	Identifier	profile_max_len		6526671	1					
ANR	6526727	IdentifierDecl	regnum = 0		6526671	2					
ANR	6526728	IdentifierDeclType	ut64		6526671	0					
ANR	6526729	Identifier	regnum		6526671	1					
ANR	6526730	AssignmentExpression	regnum = 0		6526671	2		=			
ANR	6526731	Identifier	regnum		6526671	0					
ANR	6526732	PrimaryExpression	0		6526671	1					
ANR	6526733	IdentifierDecl	regoff = 0		6526671	3					
ANR	6526734	IdentifierDeclType	ut64		6526671	0					
ANR	6526735	Identifier	regoff		6526671	1					
ANR	6526736	AssignmentExpression	regoff = 0		6526671	2		=			
ANR	6526737	Identifier	regoff		6526671	0					
ANR	6526738	PrimaryExpression	0		6526671	1					
ANR	6526739	ExpressionStatement	pc_alias [ 0 ] = '\\0'	137:1:3361:3379	6526671	6	True				
ANR	6526740	AssignmentExpression	pc_alias [ 0 ] = '\\0'		6526671	0		=			
ANR	6526741	ArrayIndexing	pc_alias [ 0 ]		6526671	0					
ANR	6526742	Identifier	pc_alias		6526671	0					
ANR	6526743	PrimaryExpression	0		6526671	1					
ANR	6526744	PrimaryExpression	'\\0'		6526671	1					
ANR	6526745	IdentifierDeclStatement	gdb_reg_t * arch_regs = NULL ;	138:1:3382:3409	6526671	7	True				
ANR	6526746	IdentifierDecl	* arch_regs = NULL		6526671	0					
ANR	6526747	IdentifierDeclType	gdb_reg_t *		6526671	0					
ANR	6526748	Identifier	arch_regs		6526671	1					
ANR	6526749	AssignmentExpression	* arch_regs = NULL		6526671	2		=			
ANR	6526750	Identifier	NULL		6526671	0					
ANR	6526751	Identifier	NULL		6526671	1					
ANR	6526752	IfStatement	"if ( _resolve_arch ( g , xml_data ) < 0 )"		6526671	8					
ANR	6526753	Condition	"_resolve_arch ( g , xml_data ) < 0"	139:5:3416:3446	6526671	0	True				
ANR	6526754	RelationalExpression	"_resolve_arch ( g , xml_data ) < 0"		6526671	0		<			
ANR	6526755	CallExpression	"_resolve_arch ( g , xml_data )"		6526671	0					
ANR	6526756	Callee	_resolve_arch		6526671	0					
ANR	6526757	Identifier	_resolve_arch		6526671	0					
ANR	6526758	ArgumentList	g		6526671	1					
ANR	6526759	Argument	g		6526671	0					
ANR	6526760	Identifier	g		6526671	0					
ANR	6526761	Argument	xml_data		6526671	1					
ANR	6526762	Identifier	xml_data		6526671	0					
ANR	6526763	PrimaryExpression	0		6526671	1					
ANR	6526764	CompoundStatement		10:38:324:324	6526671	1					
ANR	6526765	ReturnStatement	return - 1 ;	140:2:3453:3462	6526671	0	True				
ANR	6526766	UnaryOperationExpression	- 1		6526671	0					
ANR	6526767	UnaryOperator	-		6526671	0					
ANR	6526768	PrimaryExpression	1		6526671	1					
ANR	6526769	IfStatement	"if ( ! ( flagstr = strstr ( xml_data , ""<feature"" ) ) )"		6526671	9					
ANR	6526770	Condition	"! ( flagstr = strstr ( xml_data , ""<feature"" ) )"	142:5:3472:3513	6526671	0	True				
ANR	6526771	UnaryOperationExpression	"! ( flagstr = strstr ( xml_data , ""<feature"" ) )"		6526671	0					
ANR	6526772	UnaryOperator	!		6526671	0					
ANR	6526773	AssignmentExpression	"flagstr = strstr ( xml_data , ""<feature"" )"		6526671	1		=			
ANR	6526774	Identifier	flagstr		6526671	0					
ANR	6526775	CallExpression	"strstr ( xml_data , ""<feature"" )"		6526671	1					
ANR	6526776	Callee	strstr		6526671	0					
ANR	6526777	Identifier	strstr		6526671	0					
ANR	6526778	ArgumentList	xml_data		6526671	1					
ANR	6526779	Argument	xml_data		6526671	0					
ANR	6526780	Identifier	xml_data		6526671	0					
ANR	6526781	Argument	"""<feature"""		6526671	1					
ANR	6526782	PrimaryExpression	"""<feature"""		6526671	0					
ANR	6526783	CompoundStatement		13:49:391:391	6526671	1					
ANR	6526784	ReturnStatement	return - 1 ;	143:2:3520:3529	6526671	0	True				
ANR	6526785	UnaryOperationExpression	- 1		6526671	0					
ANR	6526786	UnaryOperator	-		6526671	0					
ANR	6526787	PrimaryExpression	1		6526671	1					
ANR	6526788	ExpressionStatement	regstr = flagstr	145:1:3535:3551	6526671	10	True				
ANR	6526789	AssignmentExpression	regstr = flagstr		6526671	0		=			
ANR	6526790	Identifier	regstr		6526671	0					
ANR	6526791	Identifier	flagstr		6526671	1					
ANR	6526792	IfStatement	if ( ! ( flags = _extract_flags ( flagstr ) ) )		6526671	11					
ANR	6526793	Condition	! ( flags = _extract_flags ( flagstr ) )	146:5:3558:3592	6526671	0	True				
ANR	6526794	UnaryOperationExpression	! ( flags = _extract_flags ( flagstr ) )		6526671	0					
ANR	6526795	UnaryOperator	!		6526671	0					
ANR	6526796	AssignmentExpression	flags = _extract_flags ( flagstr )		6526671	1		=			
ANR	6526797	Identifier	flags		6526671	0					
ANR	6526798	CallExpression	_extract_flags ( flagstr )		6526671	1					
ANR	6526799	Callee	_extract_flags		6526671	0					
ANR	6526800	Identifier	_extract_flags		6526671	0					
ANR	6526801	ArgumentList	flagstr		6526671	1					
ANR	6526802	Argument	flagstr		6526671	0					
ANR	6526803	Identifier	flagstr		6526671	0					
ANR	6526804	CompoundStatement		17:42:470:470	6526671	1					
ANR	6526805	ReturnStatement	return - 1 ;	147:2:3599:3608	6526671	0	True				
ANR	6526806	UnaryOperationExpression	- 1		6526671	0					
ANR	6526807	UnaryOperator	-		6526671	0					
ANR	6526808	PrimaryExpression	1		6526671	1					
ANR	6526809	IfStatement	"if ( ! ( regs = _extract_regs ( regstr , flags , pc_alias ) ) )"		6526671	12					
ANR	6526810	Condition	"! ( regs = _extract_regs ( regstr , flags , pc_alias ) )"	149:5:3618:3666	6526671	0	True				
ANR	6526811	UnaryOperationExpression	"! ( regs = _extract_regs ( regstr , flags , pc_alias ) )"		6526671	0					
ANR	6526812	UnaryOperator	!		6526671	0					
ANR	6526813	AssignmentExpression	"regs = _extract_regs ( regstr , flags , pc_alias )"		6526671	1		=			
ANR	6526814	Identifier	regs		6526671	0					
ANR	6526815	CallExpression	"_extract_regs ( regstr , flags , pc_alias )"		6526671	1					
ANR	6526816	Callee	_extract_regs		6526671	0					
ANR	6526817	Identifier	_extract_regs		6526671	0					
ANR	6526818	ArgumentList	regstr		6526671	1					
ANR	6526819	Argument	regstr		6526671	0					
ANR	6526820	Identifier	regstr		6526671	0					
ANR	6526821	Argument	flags		6526671	1					
ANR	6526822	Identifier	flags		6526671	0					
ANR	6526823	Argument	pc_alias		6526671	2					
ANR	6526824	Identifier	pc_alias		6526671	0					
ANR	6526825	CompoundStatement		20:56:544:544	6526671	1					
ANR	6526826	ExpressionStatement	r_list_free ( flags )	150:2:3673:3692	6526671	0	True				
ANR	6526827	CallExpression	r_list_free ( flags )		6526671	0					
ANR	6526828	Callee	r_list_free		6526671	0					
ANR	6526829	Identifier	r_list_free		6526671	0					
ANR	6526830	ArgumentList	flags		6526671	1					
ANR	6526831	Argument	flags		6526671	0					
ANR	6526832	Identifier	flags		6526671	0					
ANR	6526833	ReturnStatement	return - 1 ;	151:2:3696:3705	6526671	1	True				
ANR	6526834	UnaryOperationExpression	- 1		6526671	0					
ANR	6526835	UnaryOperator	-		6526671	0					
ANR	6526836	PrimaryExpression	1		6526671	1					
ANR	6526837	IfStatement	if ( ! ( arch_regs = malloc ( sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 ) ) ) )		6526671	13					
ANR	6526838	Condition	! ( arch_regs = malloc ( sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 ) ) )	153:5:3715:3785	6526671	0	True				
ANR	6526839	UnaryOperationExpression	! ( arch_regs = malloc ( sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 ) ) )		6526671	0					
ANR	6526840	UnaryOperator	!		6526671	0					
ANR	6526841	AssignmentExpression	arch_regs = malloc ( sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 ) )		6526671	1		=			
ANR	6526842	Identifier	arch_regs		6526671	0					
ANR	6526843	CallExpression	malloc ( sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 ) )		6526671	1					
ANR	6526844	Callee	malloc		6526671	0					
ANR	6526845	Identifier	malloc		6526671	0					
ANR	6526846	ArgumentList	sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 )		6526671	1					
ANR	6526847	Argument	sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 )		6526671	0					
ANR	6526848	MultiplicativeExpression	sizeof ( gdb_reg_t ) * ( r_list_length ( regs ) + 1 )		6526671	0		*			
ANR	6526849	SizeofExpression	sizeof ( gdb_reg_t )		6526671	0					
ANR	6526850	Sizeof	sizeof		6526671	0					
ANR	6526851	SizeofOperand	gdb_reg_t		6526671	1					
ANR	6526852	AdditiveExpression	r_list_length ( regs ) + 1		6526671	1		+			
ANR	6526853	CallExpression	r_list_length ( regs )		6526671	0					
ANR	6526854	Callee	r_list_length		6526671	0					
ANR	6526855	Identifier	r_list_length		6526671	0					
ANR	6526856	ArgumentList	regs		6526671	1					
ANR	6526857	Argument	regs		6526671	0					
ANR	6526858	Identifier	regs		6526671	0					
ANR	6526859	PrimaryExpression	1		6526671	1					
ANR	6526860	CompoundStatement		24:78:663:663	6526671	1					
ANR	6526861	GotoStatement	goto exit_err ;	154:2:3792:3805	6526671	0	True				
ANR	6526862	Identifier	exit_err		6526671	0					
ANR	6526863	ExpressionStatement	profile_max_len = r_list_length ( regs ) * 128 + r_list_length ( flags ) * 128	157:1:3850:3924	6526671	14	True				
ANR	6526864	AssignmentExpression	profile_max_len = r_list_length ( regs ) * 128 + r_list_length ( flags ) * 128		6526671	0		=			
ANR	6526865	Identifier	profile_max_len		6526671	0					
ANR	6526866	AdditiveExpression	r_list_length ( regs ) * 128 + r_list_length ( flags ) * 128		6526671	1		+			
ANR	6526867	MultiplicativeExpression	r_list_length ( regs ) * 128		6526671	0		*			
ANR	6526868	CallExpression	r_list_length ( regs )		6526671	0					
ANR	6526869	Callee	r_list_length		6526671	0					
ANR	6526870	Identifier	r_list_length		6526671	0					
ANR	6526871	ArgumentList	regs		6526671	1					
ANR	6526872	Argument	regs		6526671	0					
ANR	6526873	Identifier	regs		6526671	0					
ANR	6526874	PrimaryExpression	128		6526671	1					
ANR	6526875	MultiplicativeExpression	r_list_length ( flags ) * 128		6526671	1		*			
ANR	6526876	CallExpression	r_list_length ( flags )		6526671	0					
ANR	6526877	Callee	r_list_length		6526671	0					
ANR	6526878	Identifier	r_list_length		6526671	0					
ANR	6526879	ArgumentList	flags		6526671	1					
ANR	6526880	Argument	flags		6526671	0					
ANR	6526881	Identifier	flags		6526671	0					
ANR	6526882	PrimaryExpression	128		6526671	1					
ANR	6526883	IfStatement	if ( ! ( profile = malloc ( profile_max_len ) ) )		6526671	15					
ANR	6526884	Condition	! ( profile = malloc ( profile_max_len ) )	158:5:3931:3967	6526671	0	True				
ANR	6526885	UnaryOperationExpression	! ( profile = malloc ( profile_max_len ) )		6526671	0					
ANR	6526886	UnaryOperator	!		6526671	0					
ANR	6526887	AssignmentExpression	profile = malloc ( profile_max_len )		6526671	1		=			
ANR	6526888	Identifier	profile		6526671	0					
ANR	6526889	CallExpression	malloc ( profile_max_len )		6526671	1					
ANR	6526890	Callee	malloc		6526671	0					
ANR	6526891	Identifier	malloc		6526671	0					
ANR	6526892	ArgumentList	profile_max_len		6526671	1					
ANR	6526893	Argument	profile_max_len		6526671	0					
ANR	6526894	Identifier	profile_max_len		6526671	0					
ANR	6526895	CompoundStatement		29:44:845:845	6526671	1					
ANR	6526896	GotoStatement	goto exit_err ;	159:2:3974:3987	6526671	0	True				
ANR	6526897	Identifier	exit_err		6526671	0					
ANR	6526898	Statement	r_list_foreach	161:1:3993:4006	6526671	16	True				
ANR	6526899	Statement	(	161:16:4008:4008	6526671	17	True				
ANR	6526900	Statement	regs	161:17:4009:4012	6526671	18	True				
ANR	6526901	Statement	","	161:21:4013:4013	6526671	19	True				
ANR	6526902	Statement	iter	161:23:4015:4018	6526671	20	True				
ANR	6526903	Statement	","	161:27:4019:4019	6526671	21	True				
ANR	6526904	Statement	tmpreg	161:29:4021:4026	6526671	22	True				
ANR	6526905	Statement	)	161:35:4027:4027	6526671	23	True				
ANR	6526906	CompoundStatement		32:37:904:904	6526671	24					
ANR	6526907	IfStatement	if ( ! tmpreg )		6526671	0					
ANR	6526908	Condition	! tmpreg	162:6:4037:4043	6526671	0	True				
ANR	6526909	UnaryOperationExpression	! tmpreg		6526671	0					
ANR	6526910	UnaryOperator	!		6526671	0					
ANR	6526911	Identifier	tmpreg		6526671	1					
ANR	6526912	CompoundStatement		33:15:921:921	6526671	1					
ANR	6526913	ContinueStatement	continue ;	163:3:4051:4059	6526671	0	True				
ANR	6526914	IfStatement	if ( tmpreg -> size > 8 )		6526671	1					
ANR	6526915	Condition	tmpreg -> size > 8	166:6:4119:4134	6526671	0	True				
ANR	6526916	RelationalExpression	tmpreg -> size > 8		6526671	0		>			
ANR	6526917	PtrMemberAccess	tmpreg -> size		6526671	0					
ANR	6526918	Identifier	tmpreg		6526671	0					
ANR	6526919	Identifier	size		6526671	1					
ANR	6526920	PrimaryExpression	8		6526671	1					
ANR	6526921	CompoundStatement		37:24:1012:1012	6526671	1					
ANR	6526922	ExpressionStatement	regoff += tmpreg -> size	167:3:4142:4164	6526671	0	True				
ANR	6526923	AssignmentExpression	regoff += tmpreg -> size		6526671	0		+=			
ANR	6526924	Identifier	regoff		6526671	0					
ANR	6526925	PtrMemberAccess	tmpreg -> size		6526671	1					
ANR	6526926	Identifier	tmpreg		6526671	0					
ANR	6526927	Identifier	size		6526671	1					
ANR	6526928	ContinueStatement	continue ;	168:3:4169:4177	6526671	1	True				
ANR	6526929	ExpressionStatement	"memcpy ( arch_regs [ regnum ] . name , tmpreg -> name , sizeof ( tmpreg -> name ) )"	170:2:4185:4253	6526671	2	True				
ANR	6526930	CallExpression	"memcpy ( arch_regs [ regnum ] . name , tmpreg -> name , sizeof ( tmpreg -> name ) )"		6526671	0					
ANR	6526931	Callee	memcpy		6526671	0					
ANR	6526932	Identifier	memcpy		6526671	0					
ANR	6526933	ArgumentList	arch_regs [ regnum ] . name		6526671	1					
ANR	6526934	Argument	arch_regs [ regnum ] . name		6526671	0					
ANR	6526935	MemberAccess	arch_regs [ regnum ] . name		6526671	0					
ANR	6526936	ArrayIndexing	arch_regs [ regnum ]		6526671	0					
ANR	6526937	Identifier	arch_regs		6526671	0					
ANR	6526938	Identifier	regnum		6526671	1					
ANR	6526939	Identifier	name		6526671	1					
ANR	6526940	Argument	tmpreg -> name		6526671	1					
ANR	6526941	PtrMemberAccess	tmpreg -> name		6526671	0					
ANR	6526942	Identifier	tmpreg		6526671	0					
ANR	6526943	Identifier	name		6526671	1					
ANR	6526944	Argument	sizeof ( tmpreg -> name )		6526671	2					
ANR	6526945	SizeofExpression	sizeof ( tmpreg -> name )		6526671	0					
ANR	6526946	Sizeof	sizeof		6526671	0					
ANR	6526947	PtrMemberAccess	tmpreg -> name		6526671	1					
ANR	6526948	Identifier	tmpreg		6526671	0					
ANR	6526949	Identifier	name		6526671	1					
ANR	6526950	ExpressionStatement	arch_regs [ regnum ] . size = tmpreg -> size	171:2:4257:4294	6526671	3	True				
ANR	6526951	AssignmentExpression	arch_regs [ regnum ] . size = tmpreg -> size		6526671	0		=			
ANR	6526952	MemberAccess	arch_regs [ regnum ] . size		6526671	0					
ANR	6526953	ArrayIndexing	arch_regs [ regnum ]		6526671	0					
ANR	6526954	Identifier	arch_regs		6526671	0					
ANR	6526955	Identifier	regnum		6526671	1					
ANR	6526956	Identifier	size		6526671	1					
ANR	6526957	PtrMemberAccess	tmpreg -> size		6526671	1					
ANR	6526958	Identifier	tmpreg		6526671	0					
ANR	6526959	Identifier	size		6526671	1					
ANR	6526960	ExpressionStatement	arch_regs [ regnum ] . offset = regoff	172:2:4298:4331	6526671	4	True				
ANR	6526961	AssignmentExpression	arch_regs [ regnum ] . offset = regoff		6526671	0		=			
ANR	6526962	MemberAccess	arch_regs [ regnum ] . offset		6526671	0					
ANR	6526963	ArrayIndexing	arch_regs [ regnum ]		6526671	0					
ANR	6526964	Identifier	arch_regs		6526671	0					
ANR	6526965	Identifier	regnum		6526671	1					
ANR	6526966	Identifier	offset		6526671	1					
ANR	6526967	Identifier	regoff		6526671	1					
ANR	6526968	IfStatement	if ( profile_len + 128 >= profile_max_len )		6526671	5					
ANR	6526969	Condition	profile_len + 128 >= profile_max_len	173:6:4339:4374	6526671	0	True				
ANR	6526970	RelationalExpression	profile_len + 128 >= profile_max_len		6526671	0		>=			
ANR	6526971	AdditiveExpression	profile_len + 128		6526671	0		+			
ANR	6526972	Identifier	profile_len		6526671	0					
ANR	6526973	PrimaryExpression	128		6526671	1					
ANR	6526974	Identifier	profile_max_len		6526671	1					
ANR	6526975	CompoundStatement		44:44:1252:1252	6526671	1					
ANR	6526976	IfStatement	"if ( ! ( tmp = realloc ( profile , profile_max_len + 512 ) ) )"		6526671	0					
ANR	6526977	Condition	"! ( tmp = realloc ( profile , profile_max_len + 512 ) )"	174:7:4386:4434	6526671	0	True				
ANR	6526978	UnaryOperationExpression	"! ( tmp = realloc ( profile , profile_max_len + 512 ) )"		6526671	0					
ANR	6526979	UnaryOperator	!		6526671	0					
ANR	6526980	AssignmentExpression	"tmp = realloc ( profile , profile_max_len + 512 )"		6526671	1		=			
ANR	6526981	Identifier	tmp		6526671	0					
ANR	6526982	CallExpression	"realloc ( profile , profile_max_len + 512 )"		6526671	1					
ANR	6526983	Callee	realloc		6526671	0					
ANR	6526984	Identifier	realloc		6526671	0					
ANR	6526985	ArgumentList	profile		6526671	1					
ANR	6526986	Argument	profile		6526671	0					
ANR	6526987	Identifier	profile		6526671	0					
ANR	6526988	Argument	profile_max_len + 512		6526671	1					
ANR	6526989	AdditiveExpression	profile_max_len + 512		6526671	0		+			
ANR	6526990	Identifier	profile_max_len		6526671	0					
ANR	6526991	PrimaryExpression	512		6526671	1					
ANR	6526992	CompoundStatement		45:58:1312:1312	6526671	1					
ANR	6526993	GotoStatement	goto exit_err ;	175:4:4443:4456	6526671	0	True				
ANR	6526994	Identifier	exit_err		6526671	0					
ANR	6526995	ExpressionStatement	profile = tmp	177:3:4466:4479	6526671	1	True				
ANR	6526996	AssignmentExpression	profile = tmp		6526671	0		=			
ANR	6526997	Identifier	profile		6526671	0					
ANR	6526998	Identifier	tmp		6526671	1					
ANR	6526999	ExpressionStatement	profile_max_len += 512	178:3:4484:4506	6526671	2	True				
ANR	6527000	AssignmentExpression	profile_max_len += 512		6526671	0		+=			
ANR	6527001	Identifier	profile_max_len		6526671	0					
ANR	6527002	PrimaryExpression	512		6526671	1					
ANR	6527003	ExpressionStatement	flag_bits [ 0 ] = '\\0'	180:2:4514:4533	6526671	6	True				
ANR	6527004	AssignmentExpression	flag_bits [ 0 ] = '\\0'		6526671	0		=			
ANR	6527005	ArrayIndexing	flag_bits [ 0 ]		6526671	0					
ANR	6527006	Identifier	flag_bits		6526671	0					
ANR	6527007	PrimaryExpression	0		6526671	1					
ANR	6527008	PrimaryExpression	'\\0'		6526671	1					
ANR	6527009	ExpressionStatement	tmpflag = NULL	181:2:4537:4551	6526671	7	True				
ANR	6527010	AssignmentExpression	tmpflag = NULL		6526671	0		=			
ANR	6527011	Identifier	tmpflag		6526671	0					
ANR	6527012	Identifier	NULL		6526671	1					
ANR	6527013	IfStatement	if ( tmpreg -> flagnum < r_list_length ( flags ) )		6526671	8					
ANR	6527014	Condition	tmpreg -> flagnum < r_list_length ( flags )	182:6:4559:4597	6526671	0	True				
ANR	6527015	RelationalExpression	tmpreg -> flagnum < r_list_length ( flags )		6526671	0		<			
ANR	6527016	PtrMemberAccess	tmpreg -> flagnum		6526671	0					
ANR	6527017	Identifier	tmpreg		6526671	0					
ANR	6527018	Identifier	flagnum		6526671	1					
ANR	6527019	CallExpression	r_list_length ( flags )		6526671	1					
ANR	6527020	Callee	r_list_length		6526671	0					
ANR	6527021	Identifier	r_list_length		6526671	0					
ANR	6527022	ArgumentList	flags		6526671	1					
ANR	6527023	Argument	flags		6526671	0					
ANR	6527024	Identifier	flags		6526671	0					
ANR	6527025	CompoundStatement		53:47:1475:1475	6526671	1					
ANR	6527026	ExpressionStatement	"tmpflag = r_list_get_n ( flags , tmpreg -> flagnum )"	183:3:4605:4652	6526671	0	True				
ANR	6527027	AssignmentExpression	"tmpflag = r_list_get_n ( flags , tmpreg -> flagnum )"		6526671	0		=			
ANR	6527028	Identifier	tmpflag		6526671	0					
ANR	6527029	CallExpression	"r_list_get_n ( flags , tmpreg -> flagnum )"		6526671	1					
ANR	6527030	Callee	r_list_get_n		6526671	0					
ANR	6527031	Identifier	r_list_get_n		6526671	0					
ANR	6527032	ArgumentList	flags		6526671	1					
ANR	6527033	Argument	flags		6526671	0					
ANR	6527034	Identifier	flags		6526671	0					
ANR	6527035	Argument	tmpreg -> flagnum		6526671	1					
ANR	6527036	PtrMemberAccess	tmpreg -> flagnum		6526671	0					
ANR	6527037	Identifier	tmpreg		6526671	0					
ANR	6527038	Identifier	flagnum		6526671	1					
ANR	6527039	ExpressionStatement	"_write_flag_bits ( flag_bits , tmpflag )"	184:3:4657:4694	6526671	1	True				
ANR	6527040	CallExpression	"_write_flag_bits ( flag_bits , tmpflag )"		6526671	0					
ANR	6527041	Callee	_write_flag_bits		6526671	0					
ANR	6527042	Identifier	_write_flag_bits		6526671	0					
ANR	6527043	ArgumentList	flag_bits		6526671	1					
ANR	6527044	Argument	flag_bits		6526671	0					
ANR	6527045	Identifier	flag_bits		6526671	0					
ANR	6527046	Argument	tmpflag		6526671	1					
ANR	6527047	Identifier	tmpflag		6526671	0					
ANR	6527048	Statement	profile_len	186:2:4702:4712	6526671	9	True				
ANR	6527049	Statement	+=	186:14:4714:4715	6526671	10	True				
ANR	6527050	Statement	snprintf	186:17:4717:4724	6526671	11	True				
ANR	6527051	Statement	(	186:26:4726:4726	6526671	12	True				
ANR	6527052	Statement	profile	186:27:4727:4733	6526671	13	True				
ANR	6527053	Statement	+	186:35:4735:4735	6526671	14	True				
ANR	6527054	Statement	profile_len	186:37:4737:4747	6526671	15	True				
ANR	6527055	Statement	","	186:48:4748:4748	6526671	16	True				
ANR	6527056	Statement	128	186:50:4750:4752	6526671	17	True				
ANR	6527057	Statement	","	186:53:4753:4753	6526671	18	True				
ANR	6527058	Statement	"""%s\\t%s\\t"""	186:55:4755:4764	6526671	19	True				
ANR	6527059	Statement	""".%u\\t%"""	187:5:4771:4778	6526671	20	True				
ANR	6527060	Statement	PFMT64d	187:13:4779:4785	6526671	21	True				
ANR	6527061	Statement	"""\\t0\\t%s\\n"""	187:20:4786:4796	6526671	22	True				
ANR	6527062	Statement	","	187:31:4797:4797	6526671	23	True				
ANR	6527063	Statement	tmpreg	187:33:4799:4804	6526671	24	True				
ANR	6527064	Statement	->	187:39:4805:4806	6526671	25	True				
ANR	6527065	Statement	type	187:41:4807:4810	6526671	26	True				
ANR	6527066	Statement	","	187:45:4811:4811	6526671	27	True				
ANR	6527067	Statement	tmpreg	188:5:4818:4823	6526671	28	True				
ANR	6527068	Statement	->	188:11:4824:4825	6526671	29	True				
ANR	6527069	Statement	name	188:13:4826:4829	6526671	30	True				
ANR	6527070	Statement	","	188:17:4830:4830	6526671	31	True				
ANR	6527071	Statement	tmpreg	188:19:4832:4837	6526671	32	True				
ANR	6527072	Statement	->	188:25:4838:4839	6526671	33	True				
ANR	6527073	Statement	size	188:27:4840:4843	6526671	34	True				
ANR	6527074	Statement	*	188:32:4845:4845	6526671	35	True				
ANR	6527075	Statement	8	188:34:4847:4847	6526671	36	True				
ANR	6527076	Statement	","	188:35:4848:4848	6526671	37	True				
ANR	6527077	Statement	regoff	188:37:4850:4855	6526671	38	True				
ANR	6527078	Statement	","	188:43:4856:4856	6526671	39	True				
ANR	6527079	Statement	flag_bits	188:45:4858:4866	6526671	40	True				
ANR	6527080	Statement	)	188:54:4867:4867	6526671	41	True				
ANR	6527081	ExpressionStatement		188:55:4868:4868	6526671	42	True				
ANR	6527082	IfStatement	if ( tmpflag )		6526671	43					
ANR	6527083	Condition	tmpflag	190:6:4910:4916	6526671	0	True				
ANR	6527084	Identifier	tmpflag		6526671	0					
ANR	6527085	CompoundStatement		62:3:1799:1804	6526671	1					
ANR	6527086	IdentifierDeclStatement	int i ;	191:3:4924:4929	6526671	0	True				
ANR	6527087	IdentifierDecl	i		6526671	0					
ANR	6527088	IdentifierDeclType	int		6526671	0					
ANR	6527089	Identifier	i		6526671	1					
ANR	6527090	ForStatement	for ( i = 0 ; i < tmpflag -> num_fields ; i ++ )		6526671	1					
ANR	6527091	ForInit	i = 0 ;	192:8:4939:4944	6526671	0	True				
ANR	6527092	AssignmentExpression	i = 0		6526671	0		=			
ANR	6527093	Identifier	i		6526671	0					
ANR	6527094	PrimaryExpression	0		6526671	1					
ANR	6527095	Condition	i < tmpflag -> num_fields	192:15:4946:4968	6526671	1	True				
ANR	6527096	RelationalExpression	i < tmpflag -> num_fields		6526671	0		<			
ANR	6527097	Identifier	i		6526671	0					
ANR	6527098	PtrMemberAccess	tmpflag -> num_fields		6526671	1					
ANR	6527099	Identifier	tmpflag		6526671	0					
ANR	6527100	Identifier	num_fields		6526671	1					
ANR	6527101	PostIncDecOperationExpression	i ++	192:40:4971:4973	6526671	2	True				
ANR	6527102	Identifier	i		6526671	0					
ANR	6527103	IncDec	++		6526671	1					
ANR	6527104	CompoundStatement		63:45:1851:1851	6526671	3					
ANR	6527105	IfStatement	if ( profile_len + 128 >= profile_max_len )		6526671	0					
ANR	6527106	Condition	profile_len + 128 >= profile_max_len	193:8:4986:5021	6526671	0	True				
ANR	6527107	RelationalExpression	profile_len + 128 >= profile_max_len		6526671	0		>=			
ANR	6527108	AdditiveExpression	profile_len + 128		6526671	0		+			
ANR	6527109	Identifier	profile_len		6526671	0					
ANR	6527110	PrimaryExpression	128		6526671	1					
ANR	6527111	Identifier	profile_max_len		6526671	1					
ANR	6527112	CompoundStatement		64:46:1899:1899	6526671	1					
ANR	6527113	IfStatement	"if ( ! ( tmp = realloc ( profile , profile_max_len + 512 ) ) )"		6526671	0					
ANR	6527114	Condition	"! ( tmp = realloc ( profile , profile_max_len + 512 ) )"	194:9:5035:5083	6526671	0	True				
ANR	6527115	UnaryOperationExpression	"! ( tmp = realloc ( profile , profile_max_len + 512 ) )"		6526671	0					
ANR	6527116	UnaryOperator	!		6526671	0					
ANR	6527117	AssignmentExpression	"tmp = realloc ( profile , profile_max_len + 512 )"		6526671	1		=			
ANR	6527118	Identifier	tmp		6526671	0					
ANR	6527119	CallExpression	"realloc ( profile , profile_max_len + 512 )"		6526671	1					
ANR	6527120	Callee	realloc		6526671	0					
ANR	6527121	Identifier	realloc		6526671	0					
ANR	6527122	ArgumentList	profile		6526671	1					
ANR	6527123	Argument	profile		6526671	0					
ANR	6527124	Identifier	profile		6526671	0					
ANR	6527125	Argument	profile_max_len + 512		6526671	1					
ANR	6527126	AdditiveExpression	profile_max_len + 512		6526671	0		+			
ANR	6527127	Identifier	profile_max_len		6526671	0					
ANR	6527128	PrimaryExpression	512		6526671	1					
ANR	6527129	CompoundStatement		65:60:1961:1961	6526671	1					
ANR	6527130	GotoStatement	goto exit_err ;	195:6:5094:5107	6526671	0	True				
ANR	6527131	Identifier	exit_err		6526671	0					
ANR	6527132	ExpressionStatement	profile = tmp	197:5:5121:5134	6526671	1	True				
ANR	6527133	AssignmentExpression	profile = tmp		6526671	0		=			
ANR	6527134	Identifier	profile		6526671	0					
ANR	6527135	Identifier	tmp		6526671	1					
ANR	6527136	ExpressionStatement	profile_max_len += 512	198:5:5141:5163	6526671	2	True				
ANR	6527137	AssignmentExpression	profile_max_len += 512		6526671	0		+=			
ANR	6527138	Identifier	profile_max_len		6526671	0					
ANR	6527139	PrimaryExpression	512		6526671	1					
ANR	6527140	Statement	profile_len	200:4:5175:5185	6526671	1	True				
ANR	6527141	Statement	+=	200:16:5187:5188	6526671	2	True				
ANR	6527142	Statement	snprintf	200:19:5190:5197	6526671	3	True				
ANR	6527143	Statement	(	200:28:5199:5199	6526671	4	True				
ANR	6527144	Statement	profile	200:29:5200:5206	6526671	5	True				
ANR	6527145	Statement	+	200:37:5208:5208	6526671	6	True				
ANR	6527146	Statement	profile_len	200:39:5210:5220	6526671	7	True				
ANR	6527147	Statement	","	200:50:5221:5221	6526671	8	True				
ANR	6527148	Statement	128	200:52:5223:5225	6526671	9	True				
ANR	6527149	Statement	","	200:55:5226:5226	6526671	10	True				
ANR	6527150	Statement	"""gpr\\t%s\\t"""	200:57:5228:5238	6526671	11	True				
ANR	6527151	Statement	""".%u\\t.%"""	201:7:5247:5255	6526671	12	True				
ANR	6527152	Statement	PFMT64d	201:16:5256:5262	6526671	13	True				
ANR	6527153	Statement	"""\\t0\\n"""	201:23:5263:5269	6526671	14	True				
ANR	6527154	Statement	","	201:30:5270:5270	6526671	15	True				
ANR	6527155	Statement	tmpflag	201:32:5272:5278	6526671	16	True				
ANR	6527156	Statement	->	201:39:5279:5280	6526671	17	True				
ANR	6527157	Statement	fields	201:41:5281:5286	6526671	18	True				
ANR	6527158	Statement	[	201:47:5287:5287	6526671	19	True				
ANR	6527159	Statement	i	201:48:5288:5288	6526671	20	True				
ANR	6527160	Statement	]	201:49:5289:5289	6526671	21	True				
ANR	6527161	Statement	.	201:50:5290:5290	6526671	22	True				
ANR	6527162	Statement	name	201:51:5291:5294	6526671	23	True				
ANR	6527163	Statement	","	201:55:5295:5295	6526671	24	True				
ANR	6527164	Statement	tmpflag	202:7:5304:5310	6526671	25	True				
ANR	6527165	Statement	->	202:14:5311:5312	6526671	26	True				
ANR	6527166	Statement	fields	202:16:5313:5318	6526671	27	True				
ANR	6527167	Statement	[	202:22:5319:5319	6526671	28	True				
ANR	6527168	Statement	i	202:23:5320:5320	6526671	29	True				
ANR	6527169	Statement	]	202:24:5321:5321	6526671	30	True				
ANR	6527170	Statement	.	202:25:5322:5322	6526671	31	True				
ANR	6527171	Statement	sz	202:26:5323:5324	6526671	32	True				
ANR	6527172	Statement	","	202:28:5325:5325	6526671	33	True				
ANR	6527173	Statement	tmpflag	202:30:5327:5333	6526671	34	True				
ANR	6527174	Statement	->	202:37:5334:5335	6526671	35	True				
ANR	6527175	Statement	fields	202:39:5336:5341	6526671	36	True				
ANR	6527176	Statement	[	202:45:5342:5342	6526671	37	True				
ANR	6527177	Statement	i	202:46:5343:5343	6526671	38	True				
ANR	6527178	Statement	]	202:47:5344:5344	6526671	39	True				
ANR	6527179	Statement	.	202:48:5345:5345	6526671	40	True				
ANR	6527180	Statement	bit_num	202:49:5346:5352	6526671	41	True				
ANR	6527181	Statement	+	202:57:5354:5354	6526671	42	True				
ANR	6527182	Statement	(	202:59:5356:5356	6526671	43	True				
ANR	6527183	Statement	regoff	202:60:5357:5362	6526671	44	True				
ANR	6527184	Statement	*	202:67:5364:5364	6526671	45	True				
ANR	6527185	Statement	8	202:69:5366:5366	6526671	46	True				
ANR	6527186	Statement	)	202:70:5367:5367	6526671	47	True				
ANR	6527187	Statement	)	202:71:5368:5368	6526671	48	True				
ANR	6527188	ExpressionStatement		202:72:5369:5369	6526671	49	True				
ANR	6527189	ExpressionStatement	regnum ++	205:2:5382:5390	6526671	44	True				
ANR	6527190	PostIncDecOperationExpression	regnum ++		6526671	0					
ANR	6527191	Identifier	regnum		6526671	0					
ANR	6527192	IncDec	++		6526671	1					
ANR	6527193	ExpressionStatement	regoff += tmpreg -> size	206:2:5394:5416	6526671	45	True				
ANR	6527194	AssignmentExpression	regoff += tmpreg -> size		6526671	0		+=			
ANR	6527195	Identifier	regoff		6526671	0					
ANR	6527196	PtrMemberAccess	tmpreg -> size		6526671	1					
ANR	6527197	Identifier	tmpreg		6526671	0					
ANR	6527198	Identifier	size		6526671	1					
ANR	6527199	SwitchStatement	switch ( g -> target . arch )		6526671	25					
ANR	6527200	Condition	g -> target . arch	209:9:5512:5525	6526671	0	True				
ANR	6527201	MemberAccess	g -> target . arch		6526671	0					
ANR	6527202	PtrMemberAccess	g -> target		6526671	0					
ANR	6527203	Identifier	g		6526671	0					
ANR	6527204	Identifier	target		6526671	1					
ANR	6527205	Identifier	arch		6526671	1					
ANR	6527206	CompoundStatement		80:25:2403:2403	6526671	1					
ANR	6527207	Label	case R_SYS_ARCH_ARM :	210:1:5531:5550	6526671	0	True				
ANR	6527208	Identifier	R_SYS_ARCH_ARM		6526671	0					
ANR	6527209	SwitchStatement	switch ( g -> target . bits )		6526671	1					
ANR	6527210	Condition	g -> target . bits	211:10:5562:5575	6526671	0	True				
ANR	6527211	MemberAccess	g -> target . bits		6526671	0					
ANR	6527212	PtrMemberAccess	g -> target		6526671	0					
ANR	6527213	Identifier	g		6526671	0					
ANR	6527214	Identifier	target		6526671	1					
ANR	6527215	Identifier	bits		6526671	1					
ANR	6527216	CompoundStatement		82:26:2453:2453	6526671	1					
ANR	6527217	Label	case 32 :	212:2:5582:5589	6526671	0	True				
ANR	6527218	Statement	if	213:3:5594:5595	6526671	1	True				
ANR	6527219	Statement	(	213:6:5597:5597	6526671	2	True				
ANR	6527220	Statement	!	213:7:5598:5598	6526671	3	True				
ANR	6527221	Statement	(	213:8:5599:5599	6526671	4	True				
ANR	6527222	Statement	profile	213:9:5600:5606	6526671	5	True				
ANR	6527223	Statement	=	213:17:5608:5608	6526671	6	True				
ANR	6527224	Statement	r_str_prepend	213:19:5610:5622	6526671	7	True				
ANR	6527225	Statement	(	213:33:5624:5624	6526671	8	True				
ANR	6527226	Statement	profile	213:34:5625:5631	6526671	9	True				
ANR	6527227	Statement	","	213:41:5632:5632	6526671	10	True				
ANR	6527228	Statement	"""=PC\\tpc\\n"""	214:7:5641:5650	6526671	11	True				
ANR	6527229	Statement	"""=SP\\tsp\\n"""	215:7:5659:5668	6526671	12	True				
ANR	6527230	Statement	"""=A0\\tr0\\n"""	216:7:5684:5693	6526671	13	True				
ANR	6527231	Statement	"""=A1\\tr1\\n"""	217:7:5702:5711	6526671	14	True				
ANR	6527232	Statement	"""=A2\\tr2\\n"""	218:7:5720:5729	6526671	15	True				
ANR	6527233	Statement	"""=A3\\tr3\\n"""	219:7:5738:5747	6526671	16	True				
ANR	6527234	Statement	)	220:12:5761:5761	6526671	17	True				
ANR	6527235	Statement	)	220:13:5762:5762	6526671	18	True				
ANR	6527236	Statement	)	220:14:5763:5763	6526671	19	True				
ANR	6527237	CompoundStatement		91:16:2640:2640	6526671	20					
ANR	6527238	GotoStatement	goto exit_err ;	221:4:5771:5784	6526671	0	True				
ANR	6527239	Identifier	exit_err		6526671	0					
ANR	6527240	BreakStatement	break ;	223:3:5794:5799	6526671	21	True				
ANR	6527241	Label	case 64 :	224:2:5803:5810	6526671	22	True				
ANR	6527242	Statement	if	225:3:5815:5816	6526671	23	True				
ANR	6527243	Statement	(	225:6:5818:5818	6526671	24	True				
ANR	6527244	Statement	!	225:7:5819:5819	6526671	25	True				
ANR	6527245	Statement	(	225:8:5820:5820	6526671	26	True				
ANR	6527246	Statement	profile	225:9:5821:5827	6526671	27	True				
ANR	6527247	Statement	=	225:17:5829:5829	6526671	28	True				
ANR	6527248	Statement	r_str_prepend	225:19:5831:5843	6526671	29	True				
ANR	6527249	Statement	(	225:33:5845:5845	6526671	30	True				
ANR	6527250	Statement	profile	225:34:5846:5852	6526671	31	True				
ANR	6527251	Statement	","	225:41:5853:5853	6526671	32	True				
ANR	6527252	Statement	"""=PC\\tpc\\n"""	226:7:5862:5871	6526671	33	True				
ANR	6527253	Statement	"""=SP\\tsp\\n"""	227:7:5880:5889	6526671	34	True				
ANR	6527254	Statement	"""=BP\\tx29\\n"""	228:7:5898:5908	6526671	35	True				
ANR	6527255	Statement	"""=A0\\tx0\\n"""	229:7:5917:5926	6526671	36	True				
ANR	6527256	Statement	"""=A1\\tx1\\n"""	230:7:5935:5944	6526671	37	True				
ANR	6527257	Statement	"""=A2\\tx2\\n"""	231:7:5953:5962	6526671	38	True				
ANR	6527258	Statement	"""=A3\\tx3\\n"""	232:7:5971:5980	6526671	39	True				
ANR	6527259	Statement	"""=ZF\\tzf\\n"""	233:7:5989:5998	6526671	40	True				
ANR	6527260	Statement	"""=SF\\tnf\\n"""	234:7:6007:6016	6526671	41	True				
ANR	6527261	Statement	"""=OF\\tvf\\n"""	235:7:6025:6034	6526671	42	True				
ANR	6527262	Statement	"""=CF\\tcf\\n"""	236:7:6043:6052	6526671	43	True				
ANR	6527263	Statement	"""=SN\\tx8\\n"""	237:7:6061:6070	6526671	44	True				
ANR	6527264	Statement	)	238:12:6084:6084	6526671	45	True				
ANR	6527265	Statement	)	238:13:6085:6085	6526671	46	True				
ANR	6527266	Statement	)	238:14:6086:6086	6526671	47	True				
ANR	6527267	CompoundStatement		109:16:2963:2963	6526671	48					
ANR	6527268	GotoStatement	goto exit_err ;	239:4:6094:6107	6526671	0	True				
ANR	6527269	Identifier	exit_err		6526671	0					
ANR	6527270	BreakStatement	break ;	242:2:6120:6125	6526671	2	True				
ANR	6527271	Label	case R_SYS_ARCH_X86 :	243:1:6128:6147	6526671	3	True				
ANR	6527272	Identifier	R_SYS_ARCH_X86		6526671	0					
ANR	6527273	SwitchStatement	switch ( g -> target . bits )		6526671	4					
ANR	6527274	Condition	g -> target . bits	244:10:6159:6172	6526671	0	True				
ANR	6527275	MemberAccess	g -> target . bits		6526671	0					
ANR	6527276	PtrMemberAccess	g -> target		6526671	0					
ANR	6527277	Identifier	g		6526671	0					
ANR	6527278	Identifier	target		6526671	1					
ANR	6527279	Identifier	bits		6526671	1					
ANR	6527280	CompoundStatement		115:26:3050:3050	6526671	1					
ANR	6527281	Label	case 32 :	245:2:6179:6186	6526671	0	True				
ANR	6527282	Statement	if	246:3:6191:6192	6526671	1	True				
ANR	6527283	Statement	(	246:6:6194:6194	6526671	2	True				
ANR	6527284	Statement	!	246:7:6195:6195	6526671	3	True				
ANR	6527285	Statement	(	246:8:6196:6196	6526671	4	True				
ANR	6527286	Statement	profile	246:9:6197:6203	6526671	5	True				
ANR	6527287	Statement	=	246:17:6205:6205	6526671	6	True				
ANR	6527288	Statement	r_str_prepend	246:19:6207:6219	6526671	7	True				
ANR	6527289	Statement	(	246:33:6221:6221	6526671	8	True				
ANR	6527290	Statement	profile	246:34:6222:6228	6526671	9	True				
ANR	6527291	Statement	","	246:41:6229:6229	6526671	10	True				
ANR	6527292	Statement	"""=PC\\teip\\n"""	247:11:6242:6252	6526671	11	True				
ANR	6527293	Statement	"""=SP\\tesp\\n"""	248:11:6265:6275	6526671	12	True				
ANR	6527294	Statement	"""=BP\\tebp\\n"""	249:11:6288:6298	6526671	13	True				
ANR	6527295	Statement	)	249:22:6299:6299	6526671	14	True				
ANR	6527296	Statement	)	249:23:6300:6300	6526671	15	True				
ANR	6527297	Statement	)	249:24:6301:6301	6526671	16	True				
ANR	6527298	CompoundStatement		120:26:3178:3178	6526671	17					
ANR	6527299	GotoStatement	goto exit_err ;	250:4:6309:6322	6526671	0	True				
ANR	6527300	Identifier	exit_err		6526671	0					
ANR	6527301	BreakStatement	break ;	252:3:6332:6337	6526671	18	True				
ANR	6527302	Label	case 64 :	253:2:6341:6348	6526671	19	True				
ANR	6527303	Statement	if	254:3:6353:6354	6526671	20	True				
ANR	6527304	Statement	(	254:6:6356:6356	6526671	21	True				
ANR	6527305	Statement	!	254:7:6357:6357	6526671	22	True				
ANR	6527306	Statement	(	254:8:6358:6358	6526671	23	True				
ANR	6527307	Statement	profile	254:9:6359:6365	6526671	24	True				
ANR	6527308	Statement	=	254:17:6367:6367	6526671	25	True				
ANR	6527309	Statement	r_str_prepend	254:19:6369:6381	6526671	26	True				
ANR	6527310	Statement	(	254:33:6383:6383	6526671	27	True				
ANR	6527311	Statement	profile	254:34:6384:6390	6526671	28	True				
ANR	6527312	Statement	","	254:41:6391:6391	6526671	29	True				
ANR	6527313	Statement	"""=PC\\trip\\n"""	255:11:6404:6414	6526671	30	True				
ANR	6527314	Statement	"""=SP\\trsp\\n"""	256:11:6427:6437	6526671	31	True				
ANR	6527315	Statement	"""=BP\\trbp\\n"""	257:11:6450:6460	6526671	32	True				
ANR	6527316	Statement	)	257:22:6461:6461	6526671	33	True				
ANR	6527317	Statement	)	257:23:6462:6462	6526671	34	True				
ANR	6527318	Statement	)	257:24:6463:6463	6526671	35	True				
ANR	6527319	CompoundStatement		128:26:3340:3340	6526671	36					
ANR	6527320	GotoStatement	goto exit_err ;	258:4:6471:6484	6526671	0	True				
ANR	6527321	Identifier	exit_err		6526671	0					
ANR	6527322	BreakStatement	break ;	261:2:6497:6502	6526671	5	True				
ANR	6527323	Label	case R_SYS_ARCH_MIPS :	262:1:6505:6525	6526671	6	True				
ANR	6527324	Identifier	R_SYS_ARCH_MIPS		6526671	0					
ANR	6527325	Statement	if	263:2:6529:6530	6526671	7	True				
ANR	6527326	Statement	(	263:5:6532:6532	6526671	8	True				
ANR	6527327	Statement	!	263:6:6533:6533	6526671	9	True				
ANR	6527328	Statement	(	263:7:6534:6534	6526671	10	True				
ANR	6527329	Statement	profile	263:8:6535:6541	6526671	11	True				
ANR	6527330	Statement	=	263:16:6543:6543	6526671	12	True				
ANR	6527331	Statement	r_str_prepend	263:18:6545:6557	6526671	13	True				
ANR	6527332	Statement	(	263:32:6559:6559	6526671	14	True				
ANR	6527333	Statement	profile	263:33:6560:6566	6526671	15	True				
ANR	6527334	Statement	","	263:40:6567:6567	6526671	16	True				
ANR	6527335	Statement	"""=PC\\tpc\\n"""	264:6:6575:6584	6526671	17	True				
ANR	6527336	Statement	"""=SP\\tr29\\n"""	265:6:6592:6602	6526671	18	True				
ANR	6527337	Statement	)	265:17:6603:6603	6526671	19	True				
ANR	6527338	Statement	)	265:18:6604:6604	6526671	20	True				
ANR	6527339	Statement	)	265:19:6605:6605	6526671	21	True				
ANR	6527340	CompoundStatement		136:21:3482:3482	6526671	22					
ANR	6527341	GotoStatement	goto exit_err ;	266:3:6612:6625	6526671	0	True				
ANR	6527342	Identifier	exit_err		6526671	0					
ANR	6527343	BreakStatement	break ;	268:2:6633:6638	6526671	23	True				
ANR	6527344	Label	default :	269:1:6641:6648	6526671	24	True				
ANR	6527345	Identifier	default		6526671	0					
ANR	6527346	IfStatement	if ( * pc_alias )		6526671	25					
ANR	6527347	Condition	* pc_alias	271:6:6673:6681	6526671	0	True				
ANR	6527348	UnaryOperationExpression	* pc_alias		6526671	0					
ANR	6527349	UnaryOperator	*		6526671	0					
ANR	6527350	Identifier	pc_alias		6526671	1					
ANR	6527351	CompoundStatement		142:17:3559:3559	6526671	1					
ANR	6527352	IfStatement	"if ( ! ( profile = r_str_prepend ( profile , pc_alias ) ) )"		6526671	0					
ANR	6527353	Condition	"! ( profile = r_str_prepend ( profile , pc_alias ) )"	272:7:6693:6738	6526671	0	True				
ANR	6527354	UnaryOperationExpression	"! ( profile = r_str_prepend ( profile , pc_alias ) )"		6526671	0					
ANR	6527355	UnaryOperator	!		6526671	0					
ANR	6527356	AssignmentExpression	"profile = r_str_prepend ( profile , pc_alias )"		6526671	1		=			
ANR	6527357	Identifier	profile		6526671	0					
ANR	6527358	CallExpression	"r_str_prepend ( profile , pc_alias )"		6526671	1					
ANR	6527359	Callee	r_str_prepend		6526671	0					
ANR	6527360	Identifier	r_str_prepend		6526671	0					
ANR	6527361	ArgumentList	profile		6526671	1					
ANR	6527362	Argument	profile		6526671	0					
ANR	6527363	Identifier	profile		6526671	0					
ANR	6527364	Argument	pc_alias		6526671	1					
ANR	6527365	Identifier	pc_alias		6526671	0					
ANR	6527366	CompoundStatement		143:55:3616:3616	6526671	1					
ANR	6527367	GotoStatement	goto exit_err ;	273:4:6747:6760	6526671	0	True				
ANR	6527368	Identifier	exit_err		6526671	0					
ANR	6527369	IfStatement	if ( g -> target . arch == R_SYS_ARCH_MIPS )		6526671	26					
ANR	6527370	Condition	g -> target . arch == R_SYS_ARCH_MIPS	278:5:6852:6884	6526671	0	True				
ANR	6527371	EqualityExpression	g -> target . arch == R_SYS_ARCH_MIPS		6526671	0		==			
ANR	6527372	MemberAccess	g -> target . arch		6526671	0					
ANR	6527373	PtrMemberAccess	g -> target		6526671	0					
ANR	6527374	Identifier	g		6526671	0					
ANR	6527375	Identifier	target		6526671	1					
ANR	6527376	Identifier	arch		6526671	1					
ANR	6527377	Identifier	R_SYS_ARCH_MIPS		6526671	1					
ANR	6527378	CompoundStatement		149:40:3762:3762	6526671	1					
ANR	6527379	IfStatement	if ( arch_regs && arch_regs [ 0 ] . size == 8 )		6526671	0					
ANR	6527380	Condition	arch_regs && arch_regs [ 0 ] . size == 8	279:6:6895:6929	6526671	0	True				
ANR	6527381	AndExpression	arch_regs && arch_regs [ 0 ] . size == 8		6526671	0		&&			
ANR	6527382	Identifier	arch_regs		6526671	0					
ANR	6527383	EqualityExpression	arch_regs [ 0 ] . size == 8		6526671	1		==			
ANR	6527384	MemberAccess	arch_regs [ 0 ] . size		6526671	0					
ANR	6527385	ArrayIndexing	arch_regs [ 0 ]		6526671	0					
ANR	6527386	Identifier	arch_regs		6526671	0					
ANR	6527387	PrimaryExpression	0		6526671	1					
ANR	6527388	Identifier	size		6526671	1					
ANR	6527389	PrimaryExpression	8		6526671	1					
ANR	6527390	CompoundStatement		150:43:3807:3807	6526671	1					
ANR	6527391	ExpressionStatement	g -> target . bits = 64	280:3:6937:6956	6526671	0	True				
ANR	6527392	AssignmentExpression	g -> target . bits = 64		6526671	0		=			
ANR	6527393	MemberAccess	g -> target . bits		6526671	0					
ANR	6527394	PtrMemberAccess	g -> target		6526671	0					
ANR	6527395	Identifier	g		6526671	0					
ANR	6527396	Identifier	target		6526671	1					
ANR	6527397	Identifier	bits		6526671	1					
ANR	6527398	PrimaryExpression	64		6526671	1					
ANR	6527399	ExpressionStatement	r_list_free ( flags )	283:1:6966:6985	6526671	27	True				
ANR	6527400	CallExpression	r_list_free ( flags )		6526671	0					
ANR	6527401	Callee	r_list_free		6526671	0					
ANR	6527402	Identifier	r_list_free		6526671	0					
ANR	6527403	ArgumentList	flags		6526671	1					
ANR	6527404	Argument	flags		6526671	0					
ANR	6527405	Identifier	flags		6526671	0					
ANR	6527406	ExpressionStatement	r_list_free ( regs )	284:1:6988:7006	6526671	28	True				
ANR	6527407	CallExpression	r_list_free ( regs )		6526671	0					
ANR	6527408	Callee	r_list_free		6526671	0					
ANR	6527409	Identifier	r_list_free		6526671	0					
ANR	6527410	ArgumentList	regs		6526671	1					
ANR	6527411	Argument	regs		6526671	0					
ANR	6527412	Identifier	regs		6526671	0					
ANR	6527413	ExpressionStatement	free ( g -> target . regprofile )	285:1:7009:7036	6526671	29	True				
ANR	6527414	CallExpression	free ( g -> target . regprofile )		6526671	0					
ANR	6527415	Callee	free		6526671	0					
ANR	6527416	Identifier	free		6526671	0					
ANR	6527417	ArgumentList	g -> target . regprofile		6526671	1					
ANR	6527418	Argument	g -> target . regprofile		6526671	0					
ANR	6527419	MemberAccess	g -> target . regprofile		6526671	0					
ANR	6527420	PtrMemberAccess	g -> target		6526671	0					
ANR	6527421	Identifier	g		6526671	0					
ANR	6527422	Identifier	target		6526671	1					
ANR	6527423	Identifier	regprofile		6526671	1					
ANR	6527424	IfStatement	if ( profile )		6526671	30					
ANR	6527425	Condition	profile	286:5:7043:7049	6526671	0	True				
ANR	6527426	Identifier	profile		6526671	0					
ANR	6527427	CompoundStatement		157:14:3927:3927	6526671	1					
ANR	6527428	ExpressionStatement	g -> target . regprofile = strdup ( profile )	287:2:7056:7095	6526671	0	True				
ANR	6527429	AssignmentExpression	g -> target . regprofile = strdup ( profile )		6526671	0		=			
ANR	6527430	MemberAccess	g -> target . regprofile		6526671	0					
ANR	6527431	PtrMemberAccess	g -> target		6526671	0					
ANR	6527432	Identifier	g		6526671	0					
ANR	6527433	Identifier	target		6526671	1					
ANR	6527434	Identifier	regprofile		6526671	1					
ANR	6527435	CallExpression	strdup ( profile )		6526671	1					
ANR	6527436	Callee	strdup		6526671	0					
ANR	6527437	Identifier	strdup		6526671	0					
ANR	6527438	ArgumentList	profile		6526671	1					
ANR	6527439	Argument	profile		6526671	0					
ANR	6527440	Identifier	profile		6526671	0					
ANR	6527441	ExpressionStatement	free ( profile )	288:2:7099:7113	6526671	1	True				
ANR	6527442	CallExpression	free ( profile )		6526671	0					
ANR	6527443	Callee	free		6526671	0					
ANR	6527444	Identifier	free		6526671	0					
ANR	6527445	ArgumentList	profile		6526671	1					
ANR	6527446	Argument	profile		6526671	0					
ANR	6527447	Identifier	profile		6526671	0					
ANR	6527448	ExpressionStatement	g -> target . valid = true	290:1:7119:7141	6526671	31	True				
ANR	6527449	AssignmentExpression	g -> target . valid = true		6526671	0		=			
ANR	6527450	MemberAccess	g -> target . valid		6526671	0					
ANR	6527451	PtrMemberAccess	g -> target		6526671	0					
ANR	6527452	Identifier	g		6526671	0					
ANR	6527453	Identifier	target		6526671	1					
ANR	6527454	Identifier	valid		6526671	1					
ANR	6527455	Identifier	true		6526671	1					
ANR	6527456	ExpressionStatement	g -> registers = arch_regs	291:1:7144:7168	6526671	32	True				
ANR	6527457	AssignmentExpression	g -> registers = arch_regs		6526671	0		=			
ANR	6527458	PtrMemberAccess	g -> registers		6526671	0					
ANR	6527459	Identifier	g		6526671	0					
ANR	6527460	Identifier	registers		6526671	1					
ANR	6527461	Identifier	arch_regs		6526671	1					
ANR	6527462	ReturnStatement	return 0 ;	292:1:7171:7179	6526671	33	True				
ANR	6527463	PrimaryExpression	0		6526671	0					
ANR	6527464	Label	exit_err :	294:0:7182:7190	6526671	34	True				
ANR	6527465	Identifier	exit_err		6526671	0					
ANR	6527466	ExpressionStatement	r_list_free ( flags )	295:1:7193:7212	6526671	35	True				
ANR	6527467	CallExpression	r_list_free ( flags )		6526671	0					
ANR	6527468	Callee	r_list_free		6526671	0					
ANR	6527469	Identifier	r_list_free		6526671	0					
ANR	6527470	ArgumentList	flags		6526671	1					
ANR	6527471	Argument	flags		6526671	0					
ANR	6527472	Identifier	flags		6526671	0					
ANR	6527473	ExpressionStatement	r_list_free ( regs )	296:1:7215:7233	6526671	36	True				
ANR	6527474	CallExpression	r_list_free ( regs )		6526671	0					
ANR	6527475	Callee	r_list_free		6526671	0					
ANR	6527476	Identifier	r_list_free		6526671	0					
ANR	6527477	ArgumentList	regs		6526671	1					
ANR	6527478	Argument	regs		6526671	0					
ANR	6527479	Identifier	regs		6526671	0					
ANR	6527480	ExpressionStatement	free ( profile )	297:1:7236:7250	6526671	37	True				
ANR	6527481	CallExpression	free ( profile )		6526671	0					
ANR	6527482	Callee	free		6526671	0					
ANR	6527483	Identifier	free		6526671	0					
ANR	6527484	ArgumentList	profile		6526671	1					
ANR	6527485	Argument	profile		6526671	0					
ANR	6527486	Identifier	profile		6526671	0					
ANR	6527487	ExpressionStatement	free ( arch_regs )	298:1:7253:7269	6526671	38	True				
ANR	6527488	CallExpression	free ( arch_regs )		6526671	0					
ANR	6527489	Callee	free		6526671	0					
ANR	6527490	Identifier	free		6526671	0					
ANR	6527491	ArgumentList	arch_regs		6526671	1					
ANR	6527492	Argument	arch_regs		6526671	0					
ANR	6527493	Identifier	arch_regs		6526671	0					
ANR	6527494	ReturnStatement	return - 1 ;	299:1:7272:7281	6526671	39	True				
ANR	6527495	UnaryOperationExpression	- 1		6526671	0					
ANR	6527496	UnaryOperator	-		6526671	0					
ANR	6527497	PrimaryExpression	1		6526671	1					
ANR	6527498	ReturnType	static int		6526671	1					
ANR	6527499	Identifier	gdbr_parse_target_xml		6526671	2					
ANR	6527500	ParameterList	"libgdbr_t * g , char * xml_data , ut64 len"		6526671	3					
ANR	6527501	Parameter	libgdbr_t * g	130:33:3084:3095	6526671	0	True				
ANR	6527502	ParameterType	libgdbr_t *		6526671	0					
ANR	6527503	Identifier	g		6526671	1					
ANR	6527504	Parameter	char * xml_data	130:47:3098:3111	6526671	1	True				
ANR	6527505	ParameterType	char *		6526671	0					
ANR	6527506	Identifier	xml_data		6526671	1					
ANR	6527507	Parameter	ut64 len	130:63:3114:3121	6526671	2	True				
ANR	6527508	ParameterType	ut64		6526671	0					
ANR	6527509	Identifier	len		6526671	1					
ANR	6527510	CFGEntryNode	ENTRY		6526671		True				
ANR	6527511	CFGExitNode	EXIT		6526671		True				
ANR	6527512	CFGErrorNode	ERROR		6526671		True				
ANR	6527513	Symbol	* tmpflag		6526671						
ANR	6527514	Symbol	g -> registers		6526671						
ANR	6527515	Symbol	realloc		6526671						
ANR	6527516	Symbol	* tmpreg		6526671						
ANR	6527517	Symbol	arch_regs		6526671						
ANR	6527518	Symbol	_extract_flags		6526671						
ANR	6527519	Symbol	R_SYS_ARCH_MIPS		6526671						
ANR	6527520	Symbol	regoff		6526671						
ANR	6527521	Symbol	len		6526671						
ANR	6527522	Symbol	tmp		6526671						
ANR	6527523	Symbol	xml_data		6526671						
ANR	6527524	Symbol	g -> target . arch		6526671						
ANR	6527525	Symbol	NULL		6526671						
ANR	6527526	Symbol	profile_max_len		6526671						
ANR	6527527	Symbol	g -> target . valid		6526671						
ANR	6527528	Symbol	tmpflag -> num_fields		6526671						
ANR	6527529	Symbol	profile		6526671						
ANR	6527530	Symbol	* regnum		6526671						
ANR	6527531	Symbol	iter		6526671						
ANR	6527532	Symbol	r_list_get_n		6526671						
ANR	6527533	Symbol	tmpreg -> name		6526671						
ANR	6527534	Symbol	tmpflag		6526671						
ANR	6527535	Symbol	tmpreg -> size		6526671						
ANR	6527536	Symbol	strstr		6526671						
ANR	6527537	Symbol	pc_alias		6526671						
ANR	6527538	Symbol	true		6526671						
ANR	6527539	Symbol	regnum		6526671						
ANR	6527540	Symbol	tmpreg		6526671						
ANR	6527541	Symbol	arch_regs [ regnum ] . size		6526671						
ANR	6527542	Symbol	flags		6526671						
ANR	6527543	Symbol	tmpreg -> flagnum		6526671						
ANR	6527544	Symbol	flagstr		6526671						
ANR	6527545	Symbol	g -> target . bits		6526671						
ANR	6527546	Symbol	flag_bits		6526671						
ANR	6527547	Symbol	arch_regs [ regnum ] . name		6526671						
ANR	6527548	Symbol	regstr		6526671						
ANR	6527549	Symbol	arch_regs [ regnum ] . offset		6526671						
ANR	6527550	Symbol	_resolve_arch		6526671						
ANR	6527551	Symbol	g -> target . regprofile		6526671						
ANR	6527552	Symbol	_extract_regs		6526671						
ANR	6527553	Symbol	* flag_bits		6526671						
ANR	6527554	Symbol	malloc		6526671						
ANR	6527555	Symbol	profile_len		6526671						
ANR	6527556	Symbol	g		6526671						
ANR	6527557	Symbol	i		6526671						
ANR	6527558	Symbol	regs		6526671						
ANR	6527559	Symbol	* arch_regs		6526671						
ANR	6527560	Symbol	r_str_prepend		6526671						
ANR	6527561	Symbol	g -> target		6526671						
ANR	6527562	Symbol	* g		6526671						
ANR	6527563	Symbol	arch_regs [ 0 ] . size		6526671						
ANR	6527564	Symbol	* pc_alias		6526671						
ANR	6527565	Symbol	strdup		6526671						
ANR	6527566	Symbol	r_list_length		6526671						
ANR	6527567	Function	gdbr_read_target_xml	303:0:7337:7604							
ANR	6527568	FunctionDef	gdbr_read_target_xml (libgdbr_t * g)		6527567	0					
ANR	6527569	CompoundStatement		303:39:7376:7604	6527567	0					
ANR	6527570	IfStatement	if ( ! g -> stub_features . qXfer_features_read )		6527567	0					
ANR	6527571	Condition	! g -> stub_features . qXfer_features_read	304:5:7383:7419	6527567	0	True				
ANR	6527572	UnaryOperationExpression	! g -> stub_features . qXfer_features_read		6527567	0					
ANR	6527573	UnaryOperator	!		6527567	0					
ANR	6527574	MemberAccess	g -> stub_features . qXfer_features_read		6527567	1					
ANR	6527575	PtrMemberAccess	g -> stub_features		6527567	0					
ANR	6527576	Identifier	g		6527567	0					
ANR	6527577	Identifier	stub_features		6527567	1					
ANR	6527578	Identifier	qXfer_features_read		6527567	1					
ANR	6527579	CompoundStatement		2:44:45:45	6527567	1					
ANR	6527580	ReturnStatement	return - 1 ;	305:2:7426:7435	6527567	0	True				
ANR	6527581	UnaryOperationExpression	- 1		6527567	0					
ANR	6527582	UnaryOperator	-		6527567	0					
ANR	6527583	PrimaryExpression	1		6527567	1					
ANR	6527584	IdentifierDeclStatement	char * data ;	307:1:7441:7451	6527567	1	True				
ANR	6527585	IdentifierDecl	* data		6527567	0					
ANR	6527586	IdentifierDeclType	char *		6527567	0					
ANR	6527587	Identifier	data		6527567	1					
ANR	6527588	IdentifierDeclStatement	ut64 len ;	308:1:7454:7462	6527567	2	True				
ANR	6527589	IdentifierDecl	len		6527567	0					
ANR	6527590	IdentifierDeclType	ut64		6527567	0					
ANR	6527591	Identifier	len		6527567	1					
ANR	6527592	IfStatement	"if ( ! ( data = gdbr_read_feature ( g , ""target.xml"" , & len ) ) )"		6527567	3					
ANR	6527593	Condition	"! ( data = gdbr_read_feature ( g , ""target.xml"" , & len ) )"	309:5:7469:7519	6527567	0	True				
ANR	6527594	UnaryOperationExpression	"! ( data = gdbr_read_feature ( g , ""target.xml"" , & len ) )"		6527567	0					
ANR	6527595	UnaryOperator	!		6527567	0					
ANR	6527596	AssignmentExpression	"data = gdbr_read_feature ( g , ""target.xml"" , & len )"		6527567	1		=			
ANR	6527597	Identifier	data		6527567	0					
ANR	6527598	CallExpression	"gdbr_read_feature ( g , ""target.xml"" , & len )"		6527567	1					
ANR	6527599	Callee	gdbr_read_feature		6527567	0					
ANR	6527600	Identifier	gdbr_read_feature		6527567	0					
ANR	6527601	ArgumentList	g		6527567	1					
ANR	6527602	Argument	g		6527567	0					
ANR	6527603	Identifier	g		6527567	0					
ANR	6527604	Argument	"""target.xml"""		6527567	1					
ANR	6527605	PrimaryExpression	"""target.xml"""		6527567	0					
ANR	6527606	Argument	& len		6527567	2					
ANR	6527607	UnaryOperationExpression	& len		6527567	0					
ANR	6527608	UnaryOperator	&		6527567	0					
ANR	6527609	Identifier	len		6527567	1					
ANR	6527610	CompoundStatement		7:58:145:145	6527567	1					
ANR	6527611	ReturnStatement	return - 1 ;	310:2:7526:7535	6527567	0	True				
ANR	6527612	UnaryOperationExpression	- 1		6527567	0					
ANR	6527613	UnaryOperator	-		6527567	0					
ANR	6527614	PrimaryExpression	1		6527567	1					
ANR	6527615	ExpressionStatement	"gdbr_parse_target_xml ( g , data , len )"	312:1:7541:7577	6527567	4	True				
ANR	6527616	CallExpression	"gdbr_parse_target_xml ( g , data , len )"		6527567	0					
ANR	6527617	Callee	gdbr_parse_target_xml		6527567	0					
ANR	6527618	Identifier	gdbr_parse_target_xml		6527567	0					
ANR	6527619	ArgumentList	g		6527567	1					
ANR	6527620	Argument	g		6527567	0					
ANR	6527621	Identifier	g		6527567	0					
ANR	6527622	Argument	data		6527567	1					
ANR	6527623	Identifier	data		6527567	0					
ANR	6527624	Argument	len		6527567	2					
ANR	6527625	Identifier	len		6527567	0					
ANR	6527626	ExpressionStatement	free ( data )	313:1:7580:7591	6527567	5	True				
ANR	6527627	CallExpression	free ( data )		6527567	0					
ANR	6527628	Callee	free		6527567	0					
ANR	6527629	Identifier	free		6527567	0					
ANR	6527630	ArgumentList	data		6527567	1					
ANR	6527631	Argument	data		6527567	0					
ANR	6527632	Identifier	data		6527567	0					
ANR	6527633	ReturnStatement	return 0 ;	314:1:7594:7602	6527567	6	True				
ANR	6527634	PrimaryExpression	0		6527567	0					
ANR	6527635	ReturnType	int		6527567	1					
ANR	6527636	Identifier	gdbr_read_target_xml		6527567	2					
ANR	6527637	ParameterList	libgdbr_t * g		6527567	3					
ANR	6527638	Parameter	libgdbr_t * g	303:25:7362:7373	6527567	0	True				
ANR	6527639	ParameterType	libgdbr_t *		6527567	0					
ANR	6527640	Identifier	g		6527567	1					
ANR	6527641	CFGEntryNode	ENTRY		6527567		True				
ANR	6527642	CFGExitNode	EXIT		6527567		True				
ANR	6527643	Symbol	* g		6527567						
ANR	6527644	Symbol	gdbr_read_feature		6527567						
ANR	6527645	Symbol	g -> stub_features . qXfer_features_read		6527567						
ANR	6527646	Symbol	data		6527567						
ANR	6527647	Symbol	len		6527567						
ANR	6527648	Symbol	g -> stub_features		6527567						
ANR	6527649	Symbol	g		6527567						
ANR	6527650	Symbol	& len		6527567						
ANR	6527651	Function	_write_flag_bits	318:0:7663:8295							
ANR	6527652	FunctionDef	"_write_flag_bits (char * buf , const gdbr_xml_flags_t * flags)"		6527651	0					
ANR	6527653	CompoundStatement		318:71:7734:8295	6527651	0					
ANR	6527654	IdentifierDeclStatement	bool fc [ 26 ] = { false } ;	319:1:7737:7760	6527651	0	True				
ANR	6527655	IdentifierDecl	fc [ 26 ] = { false }		6527651	0					
ANR	6527656	IdentifierDeclType	bool [ 26 ]		6527651	0					
ANR	6527657	Identifier	fc		6527651	1					
ANR	6527658	PrimaryExpression	26		6527651	2					
ANR	6527659	AssignmentExpression	fc [ 26 ] = { false }		6527651	3		=			
ANR	6527660	Identifier	fc		6527651	0					
ANR	6527661	InitializerList	false		6527651	1					
ANR	6527662	Identifier	false		6527651	0					
ANR	6527663	IdentifierDeclStatement	"ut32 i , c ;"	320:1:7763:7772	6527651	1	True				
ANR	6527664	IdentifierDecl	i		6527651	0					
ANR	6527665	IdentifierDeclType	ut32		6527651	0					
ANR	6527666	Identifier	i		6527651	1					
ANR	6527667	IdentifierDecl	c		6527651	1					
ANR	6527668	IdentifierDeclType	ut32		6527651	0					
ANR	6527669	Identifier	c		6527651	1					
ANR	6527670	ExpressionStatement	"memset ( buf , '.' , flags -> num_bits )"	321:1:7775:7809	6527651	2	True				
ANR	6527671	CallExpression	"memset ( buf , '.' , flags -> num_bits )"		6527651	0					
ANR	6527672	Callee	memset		6527651	0					
ANR	6527673	Identifier	memset		6527651	0					
ANR	6527674	ArgumentList	buf		6527651	1					
ANR	6527675	Argument	buf		6527651	0					
ANR	6527676	Identifier	buf		6527651	0					
ANR	6527677	Argument	'.'		6527651	1					
ANR	6527678	PrimaryExpression	'.'		6527651	0					
ANR	6527679	Argument	flags -> num_bits		6527651	2					
ANR	6527680	PtrMemberAccess	flags -> num_bits		6527651	0					
ANR	6527681	Identifier	flags		6527651	0					
ANR	6527682	Identifier	num_bits		6527651	1					
ANR	6527683	ExpressionStatement	buf [ flags -> num_bits ] = '\\0'	322:1:7812:7839	6527651	3	True				
ANR	6527684	AssignmentExpression	buf [ flags -> num_bits ] = '\\0'		6527651	0		=			
ANR	6527685	ArrayIndexing	buf [ flags -> num_bits ]		6527651	0					
ANR	6527686	Identifier	buf		6527651	0					
ANR	6527687	PtrMemberAccess	flags -> num_bits		6527651	1					
ANR	6527688	Identifier	flags		6527651	0					
ANR	6527689	Identifier	num_bits		6527651	1					
ANR	6527690	PrimaryExpression	'\\0'		6527651	1					
ANR	6527691	ForStatement	for ( i = 0 ; i < flags -> num_fields ; i ++ )		6527651	4					
ANR	6527692	ForInit	i = 0 ;	323:6:7847:7852	6527651	0	True				
ANR	6527693	AssignmentExpression	i = 0		6527651	0		=			
ANR	6527694	Identifier	i		6527651	0					
ANR	6527695	PrimaryExpression	0		6527651	1					
ANR	6527696	Condition	i < flags -> num_fields	323:13:7854:7874	6527651	1	True				
ANR	6527697	RelationalExpression	i < flags -> num_fields		6527651	0		<			
ANR	6527698	Identifier	i		6527651	0					
ANR	6527699	PtrMemberAccess	flags -> num_fields		6527651	1					
ANR	6527700	Identifier	flags		6527651	0					
ANR	6527701	Identifier	num_fields		6527651	1					
ANR	6527702	PostIncDecOperationExpression	i ++	323:36:7877:7879	6527651	2	True				
ANR	6527703	Identifier	i		6527651	0					
ANR	6527704	IncDec	++		6527651	1					
ANR	6527705	CompoundStatement		6:41:147:147	6527651	3					
ANR	6527706	IfStatement	if ( flags -> fields [ i ] . sz != 1 )		6527651	0					
ANR	6527707	Condition	flags -> fields [ i ] . sz != 1	325:6:7927:7950	6527651	0	True				
ANR	6527708	EqualityExpression	flags -> fields [ i ] . sz != 1		6527651	0		!=			
ANR	6527709	MemberAccess	flags -> fields [ i ] . sz		6527651	0					
ANR	6527710	ArrayIndexing	flags -> fields [ i ]		6527651	0					
ANR	6527711	PtrMemberAccess	flags -> fields		6527651	0					
ANR	6527712	Identifier	flags		6527651	0					
ANR	6527713	Identifier	fields		6527651	1					
ANR	6527714	Identifier	i		6527651	1					
ANR	6527715	Identifier	sz		6527651	1					
ANR	6527716	PrimaryExpression	1		6527651	1					
ANR	6527717	CompoundStatement		8:32:218:218	6527651	1					
ANR	6527718	ContinueStatement	continue ;	326:3:7958:7966	6527651	0	True				
ANR	6527719	ExpressionStatement	c = tolower ( flags -> fields [ i ] . name [ 0 ] ) - 'a'	331:2:8155:8199	6527651	1	True				
ANR	6527720	AssignmentExpression	c = tolower ( flags -> fields [ i ] . name [ 0 ] ) - 'a'		6527651	0		=			
ANR	6527721	Identifier	c		6527651	0					
ANR	6527722	AdditiveExpression	tolower ( flags -> fields [ i ] . name [ 0 ] ) - 'a'		6527651	1		-			
ANR	6527723	CallExpression	tolower ( flags -> fields [ i ] . name [ 0 ] )		6527651	0					
ANR	6527724	Callee	tolower		6527651	0					
ANR	6527725	Identifier	tolower		6527651	0					
ANR	6527726	ArgumentList	flags -> fields [ i ] . name [ 0 ]		6527651	1					
ANR	6527727	Argument	flags -> fields [ i ] . name [ 0 ]		6527651	0					
ANR	6527728	ArrayIndexing	flags -> fields [ i ] . name [ 0 ]		6527651	0					
ANR	6527729	MemberAccess	flags -> fields [ i ] . name		6527651	0					
ANR	6527730	ArrayIndexing	flags -> fields [ i ]		6527651	0					
ANR	6527731	PtrMemberAccess	flags -> fields		6527651	0					
ANR	6527732	Identifier	flags		6527651	0					
ANR	6527733	Identifier	fields		6527651	1					
ANR	6527734	Identifier	i		6527651	1					
ANR	6527735	Identifier	name		6527651	1					
ANR	6527736	PrimaryExpression	0		6527651	1					
ANR	6527737	PrimaryExpression	'a'		6527651	1					
ANR	6527738	IfStatement	if ( fc [ c ] )		6527651	2					
ANR	6527739	Condition	fc [ c ]	332:6:8207:8211	6527651	0	True				
ANR	6527740	ArrayIndexing	fc [ c ]		6527651	0					
ANR	6527741	Identifier	fc		6527651	0					
ANR	6527742	Identifier	c		6527651	1					
ANR	6527743	CompoundStatement		15:13:479:479	6527651	1					
ANR	6527744	ContinueStatement	continue ;	333:3:8219:8227	6527651	0	True				
ANR	6527745	ExpressionStatement	fc [ c ] = true	335:2:8235:8247	6527651	3	True				
ANR	6527746	AssignmentExpression	fc [ c ] = true		6527651	0		=			
ANR	6527747	ArrayIndexing	fc [ c ]		6527651	0					
ANR	6527748	Identifier	fc		6527651	0					
ANR	6527749	Identifier	c		6527651	1					
ANR	6527750	Identifier	true		6527651	1					
ANR	6527751	ExpressionStatement	buf [ flags -> fields [ i ] . bit_num ] = 'a' + c	336:2:8251:8290	6527651	4	True				
ANR	6527752	AssignmentExpression	buf [ flags -> fields [ i ] . bit_num ] = 'a' + c		6527651	0		=			
ANR	6527753	ArrayIndexing	buf [ flags -> fields [ i ] . bit_num ]		6527651	0					
ANR	6527754	Identifier	buf		6527651	0					
ANR	6527755	MemberAccess	flags -> fields [ i ] . bit_num		6527651	1					
ANR	6527756	ArrayIndexing	flags -> fields [ i ]		6527651	0					
ANR	6527757	PtrMemberAccess	flags -> fields		6527651	0					
ANR	6527758	Identifier	flags		6527651	0					
ANR	6527759	Identifier	fields		6527651	1					
ANR	6527760	Identifier	i		6527651	1					
ANR	6527761	Identifier	bit_num		6527651	1					
ANR	6527762	AdditiveExpression	'a' + c		6527651	1		+			
ANR	6527763	PrimaryExpression	'a'		6527651	0					
ANR	6527764	Identifier	c		6527651	1					
ANR	6527765	ReturnType	static void		6527651	1					
ANR	6527766	Identifier	_write_flag_bits		6527651	2					
ANR	6527767	ParameterList	"char * buf , const gdbr_xml_flags_t * flags"		6527651	3					
ANR	6527768	Parameter	char * buf	318:29:7692:7700	6527651	0	True				
ANR	6527769	ParameterType	char *		6527651	0					
ANR	6527770	Identifier	buf		6527651	1					
ANR	6527771	Parameter	const gdbr_xml_flags_t * flags	318:40:7703:7731	6527651	1	True				
ANR	6527772	ParameterType	const gdbr_xml_flags_t *		6527651	0					
ANR	6527773	Identifier	flags		6527651	1					
ANR	6527774	CFGEntryNode	ENTRY		6527651		True				
ANR	6527775	CFGExitNode	EXIT		6527651		True				
ANR	6527776	Symbol	flags -> num_bits		6527651						
ANR	6527777	Symbol	tolower		6527651						
ANR	6527778	Symbol	* flags -> fields		6527651						
ANR	6527779	Symbol	flags		6527651						
ANR	6527780	Symbol	flags -> fields [ i ] . name		6527651						
ANR	6527781	Symbol	* * flags		6527651						
ANR	6527782	Symbol	flags -> fields		6527651						
ANR	6527783	Symbol	flags -> fields [ i ] . bit_num		6527651						
ANR	6527784	Symbol	* flags -> fields [ i ] . name		6527651						
ANR	6527785	Symbol	* flags -> num_bits		6527651						
ANR	6527786	Symbol	flags -> num_fields		6527651						
ANR	6527787	Symbol	* fc		6527651						
ANR	6527788	Symbol	* flags		6527651						
ANR	6527789	Symbol	* * * flags		6527651						
ANR	6527790	Symbol	* buf		6527651						
ANR	6527791	Symbol	* * i		6527651						
ANR	6527792	Symbol	c		6527651						
ANR	6527793	Symbol	false		6527651						
ANR	6527794	Symbol	i		6527651						
ANR	6527795	Symbol	* * flags -> fields		6527651						
ANR	6527796	Symbol	* c		6527651						
ANR	6527797	Symbol	buf		6527651						
ANR	6527798	Symbol	* i		6527651						
ANR	6527799	Symbol	* flags -> fields [ i ] . bit_num		6527651						
ANR	6527800	Symbol	true		6527651						
ANR	6527801	Symbol	flags -> fields [ i ] . sz		6527651						
ANR	6527802	Symbol	fc		6527651						
ANR	6527803	Function	_resolve_arch	340:0:8298:9597							
ANR	6527804	FunctionDef	"_resolve_arch (libgdbr_t * g , char * xml_data)"		6527803	0					
ANR	6527805	CompoundStatement		340:55:8353:9597	6527803	0					
ANR	6527806	IdentifierDeclStatement	char * arch ;	341:1:8356:8366	6527803	0	True				
ANR	6527807	IdentifierDecl	* arch		6527803	0					
ANR	6527808	IdentifierDeclType	char *		6527803	0					
ANR	6527809	Identifier	arch		6527803	1					
ANR	6527810	ExpressionStatement	g -> target . arch = R_SYS_ARCH_NONE	343:1:8391:8423	6527803	1	True				
ANR	6527811	AssignmentExpression	g -> target . arch = R_SYS_ARCH_NONE		6527803	0		=			
ANR	6527812	MemberAccess	g -> target . arch		6527803	0					
ANR	6527813	PtrMemberAccess	g -> target		6527803	0					
ANR	6527814	Identifier	g		6527803	0					
ANR	6527815	Identifier	target		6527803	1					
ANR	6527816	Identifier	arch		6527803	1					
ANR	6527817	Identifier	R_SYS_ARCH_NONE		6527803	1					
ANR	6527818	IfStatement	"if ( ( arch = strstr ( xml_data , ""<architecture"" ) ) )"		6527803	2					
ANR	6527819	Condition	"arch = strstr ( xml_data , ""<architecture"" )"	344:5:8430:8472	6527803	0	True				
ANR	6527820	AssignmentExpression	"arch = strstr ( xml_data , ""<architecture"" )"		6527803	0		=			
ANR	6527821	Identifier	arch		6527803	0					
ANR	6527822	CallExpression	"strstr ( xml_data , ""<architecture"" )"		6527803	1					
ANR	6527823	Callee	strstr		6527803	0					
ANR	6527824	Identifier	strstr		6527803	0					
ANR	6527825	ArgumentList	xml_data		6527803	1					
ANR	6527826	Argument	xml_data		6527803	0					
ANR	6527827	Identifier	xml_data		6527803	0					
ANR	6527828	Argument	"""<architecture"""		6527803	1					
ANR	6527829	PrimaryExpression	"""<architecture"""		6527803	0					
ANR	6527830	CompoundStatement		5:50:121:121	6527803	1					
ANR	6527831	IfStatement	"if ( ! ( arch = strchr ( arch , '>' ) ) )"		6527803	0					
ANR	6527832	Condition	"! ( arch = strchr ( arch , '>' ) )"	345:6:8483:8510	6527803	0	True				
ANR	6527833	UnaryOperationExpression	"! ( arch = strchr ( arch , '>' ) )"		6527803	0					
ANR	6527834	UnaryOperator	!		6527803	0					
ANR	6527835	AssignmentExpression	"arch = strchr ( arch , '>' )"		6527803	1		=			
ANR	6527836	Identifier	arch		6527803	0					
ANR	6527837	CallExpression	"strchr ( arch , '>' )"		6527803	1					
ANR	6527838	Callee	strchr		6527803	0					
ANR	6527839	Identifier	strchr		6527803	0					
ANR	6527840	ArgumentList	arch		6527803	1					
ANR	6527841	Argument	arch		6527803	0					
ANR	6527842	Identifier	arch		6527803	0					
ANR	6527843	Argument	'>'		6527803	1					
ANR	6527844	PrimaryExpression	'>'		6527803	0					
ANR	6527845	CompoundStatement		6:36:159:159	6527803	1					
ANR	6527846	ReturnStatement	return - 1 ;	346:3:8518:8527	6527803	0	True				
ANR	6527847	UnaryOperationExpression	- 1		6527803	0					
ANR	6527848	UnaryOperator	-		6527803	0					
ANR	6527849	PrimaryExpression	1		6527803	1					
ANR	6527850	ExpressionStatement	arch ++	348:2:8535:8541	6527803	1	True				
ANR	6527851	PostIncDecOperationExpression	arch ++		6527803	0					
ANR	6527852	Identifier	arch		6527803	0					
ANR	6527853	IncDec	++		6527803	1					
ANR	6527854	IfStatement	"if ( r_str_startswith ( arch , ""i386"" ) )"		6527803	2					
ANR	6527855	Condition	"r_str_startswith ( arch , ""i386"" )"	349:6:8549:8579	6527803	0	True				
ANR	6527856	CallExpression	"r_str_startswith ( arch , ""i386"" )"		6527803	0					
ANR	6527857	Callee	r_str_startswith		6527803	0					
ANR	6527858	Identifier	r_str_startswith		6527803	0					
ANR	6527859	ArgumentList	arch		6527803	1					
ANR	6527860	Argument	arch		6527803	0					
ANR	6527861	Identifier	arch		6527803	0					
ANR	6527862	Argument	"""i386"""		6527803	1					
ANR	6527863	PrimaryExpression	"""i386"""		6527803	0					
ANR	6527864	CompoundStatement		10:39:228:228	6527803	1					
ANR	6527865	ExpressionStatement	g -> target . arch = R_SYS_ARCH_X86	350:3:8587:8618	6527803	0	True				
ANR	6527866	AssignmentExpression	g -> target . arch = R_SYS_ARCH_X86		6527803	0		=			
ANR	6527867	MemberAccess	g -> target . arch		6527803	0					
ANR	6527868	PtrMemberAccess	g -> target		6527803	0					
ANR	6527869	Identifier	g		6527803	0					
ANR	6527870	Identifier	target		6527803	1					
ANR	6527871	Identifier	arch		6527803	1					
ANR	6527872	Identifier	R_SYS_ARCH_X86		6527803	1					
ANR	6527873	ExpressionStatement	g -> target . bits = 32	351:3:8623:8642	6527803	1	True				
ANR	6527874	AssignmentExpression	g -> target . bits = 32		6527803	0		=			
ANR	6527875	MemberAccess	g -> target . bits		6527803	0					
ANR	6527876	PtrMemberAccess	g -> target		6527803	0					
ANR	6527877	Identifier	g		6527803	0					
ANR	6527878	Identifier	target		6527803	1					
ANR	6527879	Identifier	bits		6527803	1					
ANR	6527880	PrimaryExpression	32		6527803	1					
ANR	6527881	ExpressionStatement	arch += 4	352:3:8647:8656	6527803	2	True				
ANR	6527882	AssignmentExpression	arch += 4		6527803	0		+=			
ANR	6527883	Identifier	arch		6527803	0					
ANR	6527884	PrimaryExpression	4		6527803	1					
ANR	6527885	IfStatement	"if ( r_str_startswith ( arch , "":x86-64"" ) )"		6527803	3					
ANR	6527886	Condition	"r_str_startswith ( arch , "":x86-64"" )"	353:7:8665:8698	6527803	0	True				
ANR	6527887	CallExpression	"r_str_startswith ( arch , "":x86-64"" )"		6527803	0					
ANR	6527888	Callee	r_str_startswith		6527803	0					
ANR	6527889	Identifier	r_str_startswith		6527803	0					
ANR	6527890	ArgumentList	arch		6527803	1					
ANR	6527891	Argument	arch		6527803	0					
ANR	6527892	Identifier	arch		6527803	0					
ANR	6527893	Argument	""":x86-64"""		6527803	1					
ANR	6527894	PrimaryExpression	""":x86-64"""		6527803	0					
ANR	6527895	CompoundStatement		14:43:347:347	6527803	1					
ANR	6527896	ExpressionStatement	g -> target . bits = 64	354:4:8707:8726	6527803	0	True				
ANR	6527897	AssignmentExpression	g -> target . bits = 64		6527803	0		=			
ANR	6527898	MemberAccess	g -> target . bits		6527803	0					
ANR	6527899	PtrMemberAccess	g -> target		6527803	0					
ANR	6527900	Identifier	g		6527803	0					
ANR	6527901	Identifier	target		6527803	1					
ANR	6527902	Identifier	bits		6527803	1					
ANR	6527903	PrimaryExpression	64		6527803	1					
ANR	6527904	ElseStatement	else		6527803	0					
ANR	6527905	IfStatement	"if ( r_str_startswith ( arch , ""aarch64"" ) )"		6527803	0					
ANR	6527906	Condition	"r_str_startswith ( arch , ""aarch64"" )"	356:13:8746:8779	6527803	0	True				
ANR	6527907	CallExpression	"r_str_startswith ( arch , ""aarch64"" )"		6527803	0					
ANR	6527908	Callee	r_str_startswith		6527803	0					
ANR	6527909	Identifier	r_str_startswith		6527803	0					
ANR	6527910	ArgumentList	arch		6527803	1					
ANR	6527911	Argument	arch		6527803	0					
ANR	6527912	Identifier	arch		6527803	0					
ANR	6527913	Argument	"""aarch64"""		6527803	1					
ANR	6527914	PrimaryExpression	"""aarch64"""		6527803	0					
ANR	6527915	CompoundStatement		17:49:428:428	6527803	1					
ANR	6527916	ExpressionStatement	g -> target . arch = R_SYS_ARCH_ARM	357:3:8787:8818	6527803	0	True				
ANR	6527917	AssignmentExpression	g -> target . arch = R_SYS_ARCH_ARM		6527803	0		=			
ANR	6527918	MemberAccess	g -> target . arch		6527803	0					
ANR	6527919	PtrMemberAccess	g -> target		6527803	0					
ANR	6527920	Identifier	g		6527803	0					
ANR	6527921	Identifier	target		6527803	1					
ANR	6527922	Identifier	arch		6527803	1					
ANR	6527923	Identifier	R_SYS_ARCH_ARM		6527803	1					
ANR	6527924	ExpressionStatement	g -> target . bits = 64	358:3:8823:8842	6527803	1	True				
ANR	6527925	AssignmentExpression	g -> target . bits = 64		6527803	0		=			
ANR	6527926	MemberAccess	g -> target . bits		6527803	0					
ANR	6527927	PtrMemberAccess	g -> target		6527803	0					
ANR	6527928	Identifier	g		6527803	0					
ANR	6527929	Identifier	target		6527803	1					
ANR	6527930	Identifier	bits		6527803	1					
ANR	6527931	PrimaryExpression	64		6527803	1					
ANR	6527932	ElseStatement	else		6527803	0					
ANR	6527933	IfStatement	"if ( r_str_startswith ( arch , ""arm"" ) )"		6527803	0					
ANR	6527934	Condition	"r_str_startswith ( arch , ""arm"" )"	359:13:8857:8886	6527803	0	True				
ANR	6527935	CallExpression	"r_str_startswith ( arch , ""arm"" )"		6527803	0					
ANR	6527936	Callee	r_str_startswith		6527803	0					
ANR	6527937	Identifier	r_str_startswith		6527803	0					
ANR	6527938	ArgumentList	arch		6527803	1					
ANR	6527939	Argument	arch		6527803	0					
ANR	6527940	Identifier	arch		6527803	0					
ANR	6527941	Argument	"""arm"""		6527803	1					
ANR	6527942	PrimaryExpression	"""arm"""		6527803	0					
ANR	6527943	CompoundStatement		20:45:535:535	6527803	1					
ANR	6527944	ExpressionStatement	g -> target . arch = R_SYS_ARCH_ARM	360:3:8894:8925	6527803	0	True				
ANR	6527945	AssignmentExpression	g -> target . arch = R_SYS_ARCH_ARM		6527803	0		=			
ANR	6527946	MemberAccess	g -> target . arch		6527803	0					
ANR	6527947	PtrMemberAccess	g -> target		6527803	0					
ANR	6527948	Identifier	g		6527803	0					
ANR	6527949	Identifier	target		6527803	1					
ANR	6527950	Identifier	arch		6527803	1					
ANR	6527951	Identifier	R_SYS_ARCH_ARM		6527803	1					
ANR	6527952	ExpressionStatement	g -> target . bits = 32	361:3:8930:8949	6527803	1	True				
ANR	6527953	AssignmentExpression	g -> target . bits = 32		6527803	0		=			
ANR	6527954	MemberAccess	g -> target . bits		6527803	0					
ANR	6527955	PtrMemberAccess	g -> target		6527803	0					
ANR	6527956	Identifier	g		6527803	0					
ANR	6527957	Identifier	target		6527803	1					
ANR	6527958	Identifier	bits		6527803	1					
ANR	6527959	PrimaryExpression	32		6527803	1					
ANR	6527960	ElseStatement	else		6527803	0					
ANR	6527961	IfStatement	"if ( r_str_startswith ( arch , ""mips"" ) )"		6527803	0					
ANR	6527962	Condition	"r_str_startswith ( arch , ""mips"" )"	362:13:8964:8994	6527803	0	True				
ANR	6527963	CallExpression	"r_str_startswith ( arch , ""mips"" )"		6527803	0					
ANR	6527964	Callee	r_str_startswith		6527803	0					
ANR	6527965	Identifier	r_str_startswith		6527803	0					
ANR	6527966	ArgumentList	arch		6527803	1					
ANR	6527967	Argument	arch		6527803	0					
ANR	6527968	Identifier	arch		6527803	0					
ANR	6527969	Argument	"""mips"""		6527803	1					
ANR	6527970	PrimaryExpression	"""mips"""		6527803	0					
ANR	6527971	CompoundStatement		23:46:643:643	6527803	1					
ANR	6527972	ExpressionStatement	g -> target . arch = R_SYS_ARCH_MIPS	363:3:9002:9034	6527803	0	True				
ANR	6527973	AssignmentExpression	g -> target . arch = R_SYS_ARCH_MIPS		6527803	0		=			
ANR	6527974	MemberAccess	g -> target . arch		6527803	0					
ANR	6527975	PtrMemberAccess	g -> target		6527803	0					
ANR	6527976	Identifier	g		6527803	0					
ANR	6527977	Identifier	target		6527803	1					
ANR	6527978	Identifier	arch		6527803	1					
ANR	6527979	Identifier	R_SYS_ARCH_MIPS		6527803	1					
ANR	6527980	ExpressionStatement	g -> target . bits = 32	364:3:9039:9058	6527803	1	True				
ANR	6527981	AssignmentExpression	g -> target . bits = 32		6527803	0		=			
ANR	6527982	MemberAccess	g -> target . bits		6527803	0					
ANR	6527983	PtrMemberAccess	g -> target		6527803	0					
ANR	6527984	Identifier	g		6527803	0					
ANR	6527985	Identifier	target		6527803	1					
ANR	6527986	Identifier	bits		6527803	1					
ANR	6527987	PrimaryExpression	32		6527803	1					
ANR	6527988	ElseStatement	else		6527803	0					
ANR	6527989	CompoundStatement		28:8:735:735	6527803	0					
ANR	6527990	IfStatement	"if ( strstr ( xml_data , ""com.apple.debugserver.arm64"" ) )"		6527803	0					
ANR	6527991	Condition	"strstr ( xml_data , ""com.apple.debugserver.arm64"" )"	369:6:9130:9177	6527803	0	True				
ANR	6527992	CallExpression	"strstr ( xml_data , ""com.apple.debugserver.arm64"" )"		6527803	0					
ANR	6527993	Callee	strstr		6527803	0					
ANR	6527994	Identifier	strstr		6527803	0					
ANR	6527995	ArgumentList	xml_data		6527803	1					
ANR	6527996	Argument	xml_data		6527803	0					
ANR	6527997	Identifier	xml_data		6527803	0					
ANR	6527998	Argument	"""com.apple.debugserver.arm64"""		6527803	1					
ANR	6527999	PrimaryExpression	"""com.apple.debugserver.arm64"""		6527803	0					
ANR	6528000	CompoundStatement		30:56:826:826	6527803	1					
ANR	6528001	ExpressionStatement	g -> target . arch = R_SYS_ARCH_ARM	370:3:9185:9216	6527803	0	True				
ANR	6528002	AssignmentExpression	g -> target . arch = R_SYS_ARCH_ARM		6527803	0		=			
ANR	6528003	MemberAccess	g -> target . arch		6527803	0					
ANR	6528004	PtrMemberAccess	g -> target		6527803	0					
ANR	6528005	Identifier	g		6527803	0					
ANR	6528006	Identifier	target		6527803	1					
ANR	6528007	Identifier	arch		6527803	1					
ANR	6528008	Identifier	R_SYS_ARCH_ARM		6527803	1					
ANR	6528009	ExpressionStatement	g -> target . bits = 64	371:3:9221:9240	6527803	1	True				
ANR	6528010	AssignmentExpression	g -> target . bits = 64		6527803	0		=			
ANR	6528011	MemberAccess	g -> target . bits		6527803	0					
ANR	6528012	PtrMemberAccess	g -> target		6527803	0					
ANR	6528013	Identifier	g		6527803	0					
ANR	6528014	Identifier	target		6527803	1					
ANR	6528015	Identifier	bits		6527803	1					
ANR	6528016	PrimaryExpression	64		6527803	1					
ANR	6528017	ElseStatement	else		6527803	0					
ANR	6528018	IfStatement	"if ( strstr ( xml_data , ""org.gnu.gdb.mips"" ) )"		6527803	0					
ANR	6528019	Condition	"strstr ( xml_data , ""org.gnu.gdb.mips"" )"	372:13:9255:9291	6527803	0	True				
ANR	6528020	CallExpression	"strstr ( xml_data , ""org.gnu.gdb.mips"" )"		6527803	0					
ANR	6528021	Callee	strstr		6527803	0					
ANR	6528022	Identifier	strstr		6527803	0					
ANR	6528023	ArgumentList	xml_data		6527803	1					
ANR	6528024	Argument	xml_data		6527803	0					
ANR	6528025	Identifier	xml_data		6527803	0					
ANR	6528026	Argument	"""org.gnu.gdb.mips"""		6527803	1					
ANR	6528027	PrimaryExpression	"""org.gnu.gdb.mips"""		6527803	0					
ANR	6528028	CompoundStatement		33:52:940:940	6527803	1					
ANR	6528029	ExpressionStatement	g -> target . arch = R_SYS_ARCH_MIPS	374:3:9319:9351	6527803	0	True				
ANR	6528030	AssignmentExpression	g -> target . arch = R_SYS_ARCH_MIPS		6527803	0		=			
ANR	6528031	MemberAccess	g -> target . arch		6527803	0					
ANR	6528032	PtrMemberAccess	g -> target		6527803	0					
ANR	6528033	Identifier	g		6527803	0					
ANR	6528034	Identifier	target		6527803	1					
ANR	6528035	Identifier	arch		6527803	1					
ANR	6528036	Identifier	R_SYS_ARCH_MIPS		6527803	1					
ANR	6528037	ExpressionStatement	g -> target . bits = 32	375:3:9356:9375	6527803	1	True				
ANR	6528038	AssignmentExpression	g -> target . bits = 32		6527803	0		=			
ANR	6528039	MemberAccess	g -> target . bits		6527803	0					
ANR	6528040	PtrMemberAccess	g -> target		6527803	0					
ANR	6528041	Identifier	g		6527803	0					
ANR	6528042	Identifier	target		6527803	1					
ANR	6528043	Identifier	bits		6527803	1					
ANR	6528044	PrimaryExpression	32		6527803	1					
ANR	6528045	ElseStatement	else		6527803	0					
ANR	6528046	IfStatement	"if ( strstr ( xml_data , ""com.apple.debugserver.x86_64"" ) )"		6527803	0					
ANR	6528047	Condition	"strstr ( xml_data , ""com.apple.debugserver.x86_64"" )"	376:13:9390:9437	6527803	0	True				
ANR	6528048	CallExpression	"strstr ( xml_data , ""com.apple.debugserver.x86_64"" )"		6527803	0					
ANR	6528049	Callee	strstr		6527803	0					
ANR	6528050	Identifier	strstr		6527803	0					
ANR	6528051	ArgumentList	xml_data		6527803	1					
ANR	6528052	Argument	xml_data		6527803	0					
ANR	6528053	Identifier	xml_data		6527803	0					
ANR	6528054	Argument	"""com.apple.debugserver.x86_64"""		6527803	1					
ANR	6528055	PrimaryExpression	"""com.apple.debugserver.x86_64"""		6527803	0					
ANR	6528056	CompoundStatement		37:63:1086:1086	6527803	1					
ANR	6528057	ExpressionStatement	g -> target . arch = R_SYS_ARCH_X86	377:3:9445:9476	6527803	0	True				
ANR	6528058	AssignmentExpression	g -> target . arch = R_SYS_ARCH_X86		6527803	0		=			
ANR	6528059	MemberAccess	g -> target . arch		6527803	0					
ANR	6528060	PtrMemberAccess	g -> target		6527803	0					
ANR	6528061	Identifier	g		6527803	0					
ANR	6528062	Identifier	target		6527803	1					
ANR	6528063	Identifier	arch		6527803	1					
ANR	6528064	Identifier	R_SYS_ARCH_X86		6527803	1					
ANR	6528065	ExpressionStatement	g -> target . bits = 64	378:3:9481:9500	6527803	1	True				
ANR	6528066	AssignmentExpression	g -> target . bits = 64		6527803	0		=			
ANR	6528067	MemberAccess	g -> target . bits		6527803	0					
ANR	6528068	PtrMemberAccess	g -> target		6527803	0					
ANR	6528069	Identifier	g		6527803	0					
ANR	6528070	Identifier	target		6527803	1					
ANR	6528071	Identifier	bits		6527803	1					
ANR	6528072	PrimaryExpression	64		6527803	1					
ANR	6528073	ElseStatement	else		6527803	0					
ANR	6528074	CompoundStatement		40:9:1157:1157	6527803	0					
ANR	6528075	ExpressionStatement	"eprintf ( ""Unknown architecture parsing XML (%s)\\n"" , xml_data )"	380:3:9516:9577	6527803	0	True				
ANR	6528076	CallExpression	"eprintf ( ""Unknown architecture parsing XML (%s)\\n"" , xml_data )"		6527803	0					
ANR	6528077	Callee	eprintf		6527803	0					
ANR	6528078	Identifier	eprintf		6527803	0					
ANR	6528079	ArgumentList	"""Unknown architecture parsing XML (%s)\\n"""		6527803	1					
ANR	6528080	Argument	"""Unknown architecture parsing XML (%s)\\n"""		6527803	0					
ANR	6528081	PrimaryExpression	"""Unknown architecture parsing XML (%s)\\n"""		6527803	0					
ANR	6528082	Argument	xml_data		6527803	1					
ANR	6528083	Identifier	xml_data		6527803	0					
ANR	6528084	ReturnStatement	return 0 ;	383:1:9587:9595	6527803	3	True				
ANR	6528085	PrimaryExpression	0		6527803	0					
ANR	6528086	ReturnType	static int		6527803	1					
ANR	6528087	Identifier	_resolve_arch		6527803	2					
ANR	6528088	ParameterList	"libgdbr_t * g , char * xml_data"		6527803	3					
ANR	6528089	Parameter	libgdbr_t * g	340:25:8323:8334	6527803	0	True				
ANR	6528090	ParameterType	libgdbr_t *		6527803	0					
ANR	6528091	Identifier	g		6527803	1					
ANR	6528092	Parameter	char * xml_data	340:39:8337:8350	6527803	1	True				
ANR	6528093	ParameterType	char *		6527803	0					
ANR	6528094	Identifier	xml_data		6527803	1					
ANR	6528095	CFGEntryNode	ENTRY		6527803		True				
ANR	6528096	CFGExitNode	EXIT		6527803		True				
ANR	6528097	Symbol	r_str_startswith		6527803						
ANR	6528098	Symbol	g -> target . arch		6527803						
ANR	6528099	Symbol	g		6527803						
ANR	6528100	Symbol	strchr		6527803						
ANR	6528101	Symbol	R_SYS_ARCH_ARM		6527803						
ANR	6528102	Symbol	g -> target		6527803						
ANR	6528103	Symbol	R_SYS_ARCH_X86		6527803						
ANR	6528104	Symbol	* g		6527803						
ANR	6528105	Symbol	g -> target . bits		6527803						
ANR	6528106	Symbol	R_SYS_ARCH_MIPS		6527803						
ANR	6528107	Symbol	strstr		6527803						
ANR	6528108	Symbol	R_SYS_ARCH_NONE		6527803						
ANR	6528109	Symbol	xml_data		6527803						
ANR	6528110	Symbol	arch		6527803						
ANR	6528111	Function	_extract_flags	386:0:9600:12243							
ANR	6528112	FunctionDef	_extract_flags (char * flagstr)		6528111	0					
ANR	6528113	CompoundStatement		386:44:9644:12243	6528111	0					
ANR	6528114	IdentifierDeclStatement	"char * tmp1 , * tmp2 , * flagsend , * field_start , * field_end ;"	387:1:9647:9701	6528111	0	True				
ANR	6528115	IdentifierDecl	* tmp1		6528111	0					
ANR	6528116	IdentifierDeclType	char *		6528111	0					
ANR	6528117	Identifier	tmp1		6528111	1					
ANR	6528118	IdentifierDecl	* tmp2		6528111	1					
ANR	6528119	IdentifierDeclType	char *		6528111	0					
ANR	6528120	Identifier	tmp2		6528111	1					
ANR	6528121	IdentifierDecl	* flagsend		6528111	2					
ANR	6528122	IdentifierDeclType	char *		6528111	0					
ANR	6528123	Identifier	flagsend		6528111	1					
ANR	6528124	IdentifierDecl	* field_start		6528111	3					
ANR	6528125	IdentifierDeclType	char *		6528111	0					
ANR	6528126	Identifier	field_start		6528111	1					
ANR	6528127	IdentifierDecl	* field_end		6528111	4					
ANR	6528128	IdentifierDeclType	char *		6528111	0					
ANR	6528129	Identifier	field_end		6528111	1					
ANR	6528130	IdentifierDeclStatement	"ut64 num_fields , type_sz , name_sz ;"	388:1:9704:9737	6528111	1	True				
ANR	6528131	IdentifierDecl	num_fields		6528111	0					
ANR	6528132	IdentifierDeclType	ut64		6528111	0					
ANR	6528133	Identifier	num_fields		6528111	1					
ANR	6528134	IdentifierDecl	type_sz		6528111	1					
ANR	6528135	IdentifierDeclType	ut64		6528111	0					
ANR	6528136	Identifier	type_sz		6528111	1					
ANR	6528137	IdentifierDecl	name_sz		6528111	2					
ANR	6528138	IdentifierDeclType	ut64		6528111	0					
ANR	6528139	Identifier	name_sz		6528111	1					
ANR	6528140	IdentifierDeclStatement	gdbr_xml_flags_t * tmpflag = NULL ;	389:1:9740:9772	6528111	2	True				
ANR	6528141	IdentifierDecl	* tmpflag = NULL		6528111	0					
ANR	6528142	IdentifierDeclType	gdbr_xml_flags_t *		6528111	0					
ANR	6528143	Identifier	tmpflag		6528111	1					
ANR	6528144	AssignmentExpression	* tmpflag = NULL		6528111	2		=			
ANR	6528145	Identifier	NULL		6528111	0					
ANR	6528146	Identifier	NULL		6528111	1					
ANR	6528147	IdentifierDeclStatement	RList * flags ;	390:1:9775:9787	6528111	3	True				
ANR	6528148	IdentifierDecl	* flags		6528111	0					
ANR	6528149	IdentifierDeclType	RList *		6528111	0					
ANR	6528150	Identifier	flags		6528111	1					
ANR	6528151	IfStatement	if ( ! ( flags = r_list_new ( ) ) )		6528111	4					
ANR	6528152	Condition	! ( flags = r_list_new ( ) )	391:5:9794:9817	6528111	0	True				
ANR	6528153	UnaryOperationExpression	! ( flags = r_list_new ( ) )		6528111	0					
ANR	6528154	UnaryOperator	!		6528111	0					
ANR	6528155	AssignmentExpression	flags = r_list_new ( )		6528111	1		=			
ANR	6528156	Identifier	flags		6528111	0					
ANR	6528157	CallExpression	r_list_new ( )		6528111	1					
ANR	6528158	Callee	r_list_new		6528111	0					
ANR	6528159	Identifier	r_list_new		6528111	0					
ANR	6528160	ArgumentList			6528111	1					
ANR	6528161	CompoundStatement		6:31:175:175	6528111	1					
ANR	6528162	ReturnStatement	return NULL ;	392:2:9824:9835	6528111	0	True				
ANR	6528163	Identifier	NULL		6528111	0					
ANR	6528164	ExpressionStatement	flags -> free = free	394:1:9841:9859	6528111	5	True				
ANR	6528165	AssignmentExpression	flags -> free = free		6528111	0		=			
ANR	6528166	PtrMemberAccess	flags -> free		6528111	0					
ANR	6528167	Identifier	flags		6528111	0					
ANR	6528168	Identifier	free		6528111	1					
ANR	6528169	Identifier	free		6528111	1					
ANR	6528170	WhileStatement	"while ( ( flagstr = strstr ( flagstr , ""<flags"" ) ) )"		6528111	6					
ANR	6528171	Condition	"flagstr = strstr ( flagstr , ""<flags"" )"	395:8:9869:9906	6528111	0	True				
ANR	6528172	AssignmentExpression	"flagstr = strstr ( flagstr , ""<flags"" )"		6528111	0		=			
ANR	6528173	Identifier	flagstr		6528111	0					
ANR	6528174	CallExpression	"strstr ( flagstr , ""<flags"" )"		6528111	1					
ANR	6528175	Callee	strstr		6528111	0					
ANR	6528176	Identifier	strstr		6528111	0					
ANR	6528177	ArgumentList	flagstr		6528111	1					
ANR	6528178	Argument	flagstr		6528111	0					
ANR	6528179	Identifier	flagstr		6528111	0					
ANR	6528180	Argument	"""<flags"""		6528111	1					
ANR	6528181	PrimaryExpression	"""<flags"""		6528111	0					
ANR	6528182	CompoundStatement		10:48:264:264	6528111	1					
ANR	6528183	IfStatement	"if ( ! ( flagsend = strstr ( flagstr , ""</flags>"" ) ) )"		6528111	0					
ANR	6528184	Condition	"! ( flagsend = strstr ( flagstr , ""</flags>"" ) )"	396:6:9917:9958	6528111	0	True				
ANR	6528185	UnaryOperationExpression	"! ( flagsend = strstr ( flagstr , ""</flags>"" ) )"		6528111	0					
ANR	6528186	UnaryOperator	!		6528111	0					
ANR	6528187	AssignmentExpression	"flagsend = strstr ( flagstr , ""</flags>"" )"		6528111	1		=			
ANR	6528188	Identifier	flagsend		6528111	0					
ANR	6528189	CallExpression	"strstr ( flagstr , ""</flags>"" )"		6528111	1					
ANR	6528190	Callee	strstr		6528111	0					
ANR	6528191	Identifier	strstr		6528111	0					
ANR	6528192	ArgumentList	flagstr		6528111	1					
ANR	6528193	Argument	flagstr		6528111	0					
ANR	6528194	Identifier	flagstr		6528111	0					
ANR	6528195	Argument	"""</flags>"""		6528111	1					
ANR	6528196	PrimaryExpression	"""</flags>"""		6528111	0					
ANR	6528197	CompoundStatement		11:50:316:316	6528111	1					
ANR	6528198	GotoStatement	goto exit_err ;	397:3:9966:9979	6528111	0	True				
ANR	6528199	Identifier	exit_err		6528111	0					
ANR	6528200	ExpressionStatement	* flagsend = '\\0'	399:2:9987:10003	6528111	1	True				
ANR	6528201	AssignmentExpression	* flagsend = '\\0'		6528111	0		=			
ANR	6528202	UnaryOperationExpression	* flagsend		6528111	0					
ANR	6528203	UnaryOperator	*		6528111	0					
ANR	6528204	Identifier	flagsend		6528111	1					
ANR	6528205	PrimaryExpression	'\\0'		6528111	1					
ANR	6528206	IfStatement	"if ( ! ( tmpflag = calloc ( 1 , sizeof ( gdbr_xml_flags_t ) ) ) )"		6528111	2					
ANR	6528207	Condition	"! ( tmpflag = calloc ( 1 , sizeof ( gdbr_xml_flags_t ) ) )"	400:6:10011:10060	6528111	0	True				
ANR	6528208	UnaryOperationExpression	"! ( tmpflag = calloc ( 1 , sizeof ( gdbr_xml_flags_t ) ) )"		6528111	0					
ANR	6528209	UnaryOperator	!		6528111	0					
ANR	6528210	AssignmentExpression	"tmpflag = calloc ( 1 , sizeof ( gdbr_xml_flags_t ) )"		6528111	1		=			
ANR	6528211	Identifier	tmpflag		6528111	0					
ANR	6528212	CallExpression	"calloc ( 1 , sizeof ( gdbr_xml_flags_t ) )"		6528111	1					
ANR	6528213	Callee	calloc		6528111	0					
ANR	6528214	Identifier	calloc		6528111	0					
ANR	6528215	ArgumentList	1		6528111	1					
ANR	6528216	Argument	1		6528111	0					
ANR	6528217	PrimaryExpression	1		6528111	0					
ANR	6528218	Argument	sizeof ( gdbr_xml_flags_t )		6528111	1					
ANR	6528219	SizeofExpression	sizeof ( gdbr_xml_flags_t )		6528111	0					
ANR	6528220	Sizeof	sizeof		6528111	0					
ANR	6528221	SizeofOperand	gdbr_xml_flags_t		6528111	1					
ANR	6528222	CompoundStatement		15:58:418:418	6528111	1					
ANR	6528223	GotoStatement	goto exit_err ;	401:3:10068:10081	6528111	0	True				
ANR	6528224	Identifier	exit_err		6528111	0					
ANR	6528225	IfStatement	"if ( ! ( tmp1 = strstr ( flagstr , ""id="" ) ) )"		6528111	3					
ANR	6528226	Condition	"! ( tmp1 = strstr ( flagstr , ""id="" ) )"	404:6:10105:10137	6528111	0	True				
ANR	6528227	UnaryOperationExpression	"! ( tmp1 = strstr ( flagstr , ""id="" ) )"		6528111	0					
ANR	6528228	UnaryOperator	!		6528111	0					
ANR	6528229	AssignmentExpression	"tmp1 = strstr ( flagstr , ""id="" )"		6528111	1		=			
ANR	6528230	Identifier	tmp1		6528111	0					
ANR	6528231	CallExpression	"strstr ( flagstr , ""id="" )"		6528111	1					
ANR	6528232	Callee	strstr		6528111	0					
ANR	6528233	Identifier	strstr		6528111	0					
ANR	6528234	ArgumentList	flagstr		6528111	1					
ANR	6528235	Argument	flagstr		6528111	0					
ANR	6528236	Identifier	flagstr		6528111	0					
ANR	6528237	Argument	"""id="""		6528111	1					
ANR	6528238	PrimaryExpression	"""id="""		6528111	0					
ANR	6528239	CompoundStatement		19:41:495:495	6528111	1					
ANR	6528240	GotoStatement	goto exit_err ;	405:3:10145:10158	6528111	0	True				
ANR	6528241	Identifier	exit_err		6528111	0					
ANR	6528242	ExpressionStatement	tmp1 += 4	407:2:10166:10175	6528111	4	True				
ANR	6528243	AssignmentExpression	tmp1 += 4		6528111	0		+=			
ANR	6528244	Identifier	tmp1		6528111	0					
ANR	6528245	PrimaryExpression	4		6528111	1					
ANR	6528246	IfStatement	"if ( ! ( tmp2 = strchr ( tmp1 , '""' ) ) )"		6528111	5					
ANR	6528247	Condition	"! ( tmp2 = strchr ( tmp1 , '""' ) )"	408:6:10183:10210	6528111	0	True				
ANR	6528248	UnaryOperationExpression	"! ( tmp2 = strchr ( tmp1 , '""' ) )"		6528111	0					
ANR	6528249	UnaryOperator	!		6528111	0					
ANR	6528250	AssignmentExpression	"tmp2 = strchr ( tmp1 , '""' )"		6528111	1		=			
ANR	6528251	Identifier	tmp2		6528111	0					
ANR	6528252	CallExpression	"strchr ( tmp1 , '""' )"		6528111	1					
ANR	6528253	Callee	strchr		6528111	0					
ANR	6528254	Identifier	strchr		6528111	0					
ANR	6528255	ArgumentList	tmp1		6528111	1					
ANR	6528256	Argument	tmp1		6528111	0					
ANR	6528257	Identifier	tmp1		6528111	0					
ANR	6528258	Argument	"'""'"		6528111	1					
ANR	6528259	PrimaryExpression	"'""'"		6528111	0					
ANR	6528260	CompoundStatement		23:36:568:568	6528111	1					
ANR	6528261	GotoStatement	goto exit_err ;	409:3:10218:10231	6528111	0	True				
ANR	6528262	Identifier	exit_err		6528111	0					
ANR	6528263	ExpressionStatement	* tmp2 = '\\0'	411:2:10239:10251	6528111	6	True				
ANR	6528264	AssignmentExpression	* tmp2 = '\\0'		6528111	0		=			
ANR	6528265	UnaryOperationExpression	* tmp2		6528111	0					
ANR	6528266	UnaryOperator	*		6528111	0					
ANR	6528267	Identifier	tmp2		6528111	1					
ANR	6528268	PrimaryExpression	'\\0'		6528111	1					
ANR	6528269	ExpressionStatement	type_sz = sizeof ( tmpflag -> type )	412:2:10255:10287	6528111	7	True				
ANR	6528270	AssignmentExpression	type_sz = sizeof ( tmpflag -> type )		6528111	0		=			
ANR	6528271	Identifier	type_sz		6528111	0					
ANR	6528272	SizeofExpression	sizeof ( tmpflag -> type )		6528111	1					
ANR	6528273	Sizeof	sizeof		6528111	0					
ANR	6528274	PtrMemberAccess	tmpflag -> type		6528111	1					
ANR	6528275	Identifier	tmpflag		6528111	0					
ANR	6528276	Identifier	type		6528111	1					
ANR	6528277	ExpressionStatement	"strncpy ( tmpflag -> type , tmp1 , type_sz - 1 )"	413:2:10291:10333	6528111	8	True				
ANR	6528278	CallExpression	"strncpy ( tmpflag -> type , tmp1 , type_sz - 1 )"		6528111	0					
ANR	6528279	Callee	strncpy		6528111	0					
ANR	6528280	Identifier	strncpy		6528111	0					
ANR	6528281	ArgumentList	tmpflag -> type		6528111	1					
ANR	6528282	Argument	tmpflag -> type		6528111	0					
ANR	6528283	PtrMemberAccess	tmpflag -> type		6528111	0					
ANR	6528284	Identifier	tmpflag		6528111	0					
ANR	6528285	Identifier	type		6528111	1					
ANR	6528286	Argument	tmp1		6528111	1					
ANR	6528287	Identifier	tmp1		6528111	0					
ANR	6528288	Argument	type_sz - 1		6528111	2					
ANR	6528289	AdditiveExpression	type_sz - 1		6528111	0		-			
ANR	6528290	Identifier	type_sz		6528111	0					
ANR	6528291	PrimaryExpression	1		6528111	1					
ANR	6528292	ExpressionStatement	tmpflag -> type [ type_sz - 1 ] = '\\0'	414:2:10337:10370	6528111	9	True				
ANR	6528293	AssignmentExpression	tmpflag -> type [ type_sz - 1 ] = '\\0'		6528111	0		=			
ANR	6528294	ArrayIndexing	tmpflag -> type [ type_sz - 1 ]		6528111	0					
ANR	6528295	PtrMemberAccess	tmpflag -> type		6528111	0					
ANR	6528296	Identifier	tmpflag		6528111	0					
ANR	6528297	Identifier	type		6528111	1					
ANR	6528298	AdditiveExpression	type_sz - 1		6528111	1		-			
ANR	6528299	Identifier	type_sz		6528111	0					
ANR	6528300	PrimaryExpression	1		6528111	1					
ANR	6528301	PrimaryExpression	'\\0'		6528111	1					
ANR	6528302	ExpressionStatement	"* tmp2 = '""'"	415:2:10374:10385	6528111	10	True				
ANR	6528303	AssignmentExpression	"* tmp2 = '""'"		6528111	0		=			
ANR	6528304	UnaryOperationExpression	* tmp2		6528111	0					
ANR	6528305	UnaryOperator	*		6528111	0					
ANR	6528306	Identifier	tmp2		6528111	1					
ANR	6528307	PrimaryExpression	"'""'"		6528111	1					
ANR	6528308	IfStatement	"if ( ! ( tmp1 = strstr ( flagstr , ""size="" ) ) )"		6528111	11					
ANR	6528309	Condition	"! ( tmp1 = strstr ( flagstr , ""size="" ) )"	417:6:10425:10459	6528111	0	True				
ANR	6528310	UnaryOperationExpression	"! ( tmp1 = strstr ( flagstr , ""size="" ) )"		6528111	0					
ANR	6528311	UnaryOperator	!		6528111	0					
ANR	6528312	AssignmentExpression	"tmp1 = strstr ( flagstr , ""size="" )"		6528111	1		=			
ANR	6528313	Identifier	tmp1		6528111	0					
ANR	6528314	CallExpression	"strstr ( flagstr , ""size="" )"		6528111	1					
ANR	6528315	Callee	strstr		6528111	0					
ANR	6528316	Identifier	strstr		6528111	0					
ANR	6528317	ArgumentList	flagstr		6528111	1					
ANR	6528318	Argument	flagstr		6528111	0					
ANR	6528319	Identifier	flagstr		6528111	0					
ANR	6528320	Argument	"""size="""		6528111	1					
ANR	6528321	PrimaryExpression	"""size="""		6528111	0					
ANR	6528322	CompoundStatement		32:43:817:817	6528111	1					
ANR	6528323	GotoStatement	goto exit_err ;	418:3:10467:10480	6528111	0	True				
ANR	6528324	Identifier	exit_err		6528111	0					
ANR	6528325	ExpressionStatement	tmp1 += 6	420:2:10488:10497	6528111	12	True				
ANR	6528326	AssignmentExpression	tmp1 += 6		6528111	0		+=			
ANR	6528327	Identifier	tmp1		6528111	0					
ANR	6528328	PrimaryExpression	6		6528111	1					
ANR	6528329	IfStatement	"if ( ! ( tmpflag -> num_bits = ( ut32 ) strtoul ( tmp1 , NULL , 10 ) ) )"		6528111	13					
ANR	6528330	Condition	"! ( tmpflag -> num_bits = ( ut32 ) strtoul ( tmp1 , NULL , 10 ) )"	421:6:10505:10558	6528111	0	True				
ANR	6528331	UnaryOperationExpression	"! ( tmpflag -> num_bits = ( ut32 ) strtoul ( tmp1 , NULL , 10 ) )"		6528111	0					
ANR	6528332	UnaryOperator	!		6528111	0					
ANR	6528333	AssignmentExpression	"tmpflag -> num_bits = ( ut32 ) strtoul ( tmp1 , NULL , 10 )"		6528111	1		=			
ANR	6528334	PtrMemberAccess	tmpflag -> num_bits		6528111	0					
ANR	6528335	Identifier	tmpflag		6528111	0					
ANR	6528336	Identifier	num_bits		6528111	1					
ANR	6528337	CastExpression	"( ut32 ) strtoul ( tmp1 , NULL , 10 )"		6528111	1					
ANR	6528338	CastTarget	ut32		6528111	0					
ANR	6528339	CallExpression	"strtoul ( tmp1 , NULL , 10 )"		6528111	1					
ANR	6528340	Callee	strtoul		6528111	0					
ANR	6528341	Identifier	strtoul		6528111	0					
ANR	6528342	ArgumentList	tmp1		6528111	1					
ANR	6528343	Argument	tmp1		6528111	0					
ANR	6528344	Identifier	tmp1		6528111	0					
ANR	6528345	Argument	NULL		6528111	1					
ANR	6528346	Identifier	NULL		6528111	0					
ANR	6528347	Argument	10		6528111	2					
ANR	6528348	PrimaryExpression	10		6528111	0					
ANR	6528349	CompoundStatement		36:62:916:916	6528111	1					
ANR	6528350	GotoStatement	goto exit_err ;	422:3:10566:10579	6528111	0	True				
ANR	6528351	Identifier	exit_err		6528111	0					
ANR	6528352	ExpressionStatement	tmpflag -> num_bits *= 8	424:2:10587:10609	6528111	14	True				
ANR	6528353	AssignmentExpression	tmpflag -> num_bits *= 8		6528111	0		*=			
ANR	6528354	PtrMemberAccess	tmpflag -> num_bits		6528111	0					
ANR	6528355	Identifier	tmpflag		6528111	0					
ANR	6528356	Identifier	num_bits		6528111	1					
ANR	6528357	PrimaryExpression	8		6528111	1					
ANR	6528358	ExpressionStatement	num_fields = 0	426:2:10629:10643	6528111	15	True				
ANR	6528359	AssignmentExpression	num_fields = 0		6528111	0		=			
ANR	6528360	Identifier	num_fields		6528111	0					
ANR	6528361	PrimaryExpression	0		6528111	1					
ANR	6528362	ExpressionStatement	field_start = flagstr	427:2:10647:10668	6528111	16	True				
ANR	6528363	AssignmentExpression	field_start = flagstr		6528111	0		=			
ANR	6528364	Identifier	field_start		6528111	0					
ANR	6528365	Identifier	flagstr		6528111	1					
ANR	6528366	WhileStatement	"while ( ( field_start = strstr ( field_start , ""<field"" ) ) )"		6528111	17					
ANR	6528367	Condition	"field_start = strstr ( field_start , ""<field"" )"	428:9:10679:10724	6528111	0	True				
ANR	6528368	AssignmentExpression	"field_start = strstr ( field_start , ""<field"" )"		6528111	0		=			
ANR	6528369	Identifier	field_start		6528111	0					
ANR	6528370	CallExpression	"strstr ( field_start , ""<field"" )"		6528111	1					
ANR	6528371	Callee	strstr		6528111	0					
ANR	6528372	Identifier	strstr		6528111	0					
ANR	6528373	ArgumentList	field_start		6528111	1					
ANR	6528374	Argument	field_start		6528111	0					
ANR	6528375	Identifier	field_start		6528111	0					
ANR	6528376	Argument	"""<field"""		6528111	1					
ANR	6528377	PrimaryExpression	"""<field"""		6528111	0					
ANR	6528378	CompoundStatement		43:57:1082:1082	6528111	1					
ANR	6528379	IfStatement	if ( num_fields >= 64 )		6528111	0					
ANR	6528380	Condition	num_fields >= 64	430:7:10756:10771	6528111	0	True				
ANR	6528381	RelationalExpression	num_fields >= 64		6528111	0		>=			
ANR	6528382	Identifier	num_fields		6528111	0					
ANR	6528383	PrimaryExpression	64		6528111	1					
ANR	6528384	CompoundStatement		45:25:1129:1129	6528111	1					
ANR	6528385	BreakStatement	break ;	431:4:10780:10785	6528111	0	True				
ANR	6528386	IfStatement	"if ( ! ( field_end = strstr ( field_start , ""/>"" ) ) )"		6528111	1					
ANR	6528387	Condition	"! ( field_end = strstr ( field_start , ""/>"" ) )"	433:7:10799:10839	6528111	0	True				
ANR	6528388	UnaryOperationExpression	"! ( field_end = strstr ( field_start , ""/>"" ) )"		6528111	0					
ANR	6528389	UnaryOperator	!		6528111	0					
ANR	6528390	AssignmentExpression	"field_end = strstr ( field_start , ""/>"" )"		6528111	1		=			
ANR	6528391	Identifier	field_end		6528111	0					
ANR	6528392	CallExpression	"strstr ( field_start , ""/>"" )"		6528111	1					
ANR	6528393	Callee	strstr		6528111	0					
ANR	6528394	Identifier	strstr		6528111	0					
ANR	6528395	ArgumentList	field_start		6528111	1					
ANR	6528396	Argument	field_start		6528111	0					
ANR	6528397	Identifier	field_start		6528111	0					
ANR	6528398	Argument	"""/>"""		6528111	1					
ANR	6528399	PrimaryExpression	"""/>"""		6528111	0					
ANR	6528400	CompoundStatement		48:50:1197:1197	6528111	1					
ANR	6528401	GotoStatement	goto exit_err ;	434:4:10848:10861	6528111	0	True				
ANR	6528402	Identifier	exit_err		6528111	0					
ANR	6528403	ExpressionStatement	* field_end = '\\0'	436:3:10871:10888	6528111	2	True				
ANR	6528404	AssignmentExpression	* field_end = '\\0'		6528111	0		=			
ANR	6528405	UnaryOperationExpression	* field_end		6528111	0					
ANR	6528406	UnaryOperator	*		6528111	0					
ANR	6528407	Identifier	field_end		6528111	1					
ANR	6528408	PrimaryExpression	'\\0'		6528111	1					
ANR	6528409	IfStatement	"if ( ! ( tmp1 = strstr ( field_start , ""name="" ) ) )"		6528111	3					
ANR	6528410	Condition	"! ( tmp1 = strstr ( field_start , ""name="" ) )"	438:7:10912:10950	6528111	0	True				
ANR	6528411	UnaryOperationExpression	"! ( tmp1 = strstr ( field_start , ""name="" ) )"		6528111	0					
ANR	6528412	UnaryOperator	!		6528111	0					
ANR	6528413	AssignmentExpression	"tmp1 = strstr ( field_start , ""name="" )"		6528111	1		=			
ANR	6528414	Identifier	tmp1		6528111	0					
ANR	6528415	CallExpression	"strstr ( field_start , ""name="" )"		6528111	1					
ANR	6528416	Callee	strstr		6528111	0					
ANR	6528417	Identifier	strstr		6528111	0					
ANR	6528418	ArgumentList	field_start		6528111	1					
ANR	6528419	Argument	field_start		6528111	0					
ANR	6528420	Identifier	field_start		6528111	0					
ANR	6528421	Argument	"""name="""		6528111	1					
ANR	6528422	PrimaryExpression	"""name="""		6528111	0					
ANR	6528423	CompoundStatement		53:48:1308:1308	6528111	1					
ANR	6528424	GotoStatement	goto exit_err ;	439:4:10959:10972	6528111	0	True				
ANR	6528425	Identifier	exit_err		6528111	0					
ANR	6528426	ExpressionStatement	tmp1 += 6	441:3:10982:10991	6528111	4	True				
ANR	6528427	AssignmentExpression	tmp1 += 6		6528111	0		+=			
ANR	6528428	Identifier	tmp1		6528111	0					
ANR	6528429	PrimaryExpression	6		6528111	1					
ANR	6528430	IfStatement	"if ( ! ( tmp2 = strchr ( tmp1 , '""' ) ) )"		6528111	5					
ANR	6528431	Condition	"! ( tmp2 = strchr ( tmp1 , '""' ) )"	442:7:11000:11027	6528111	0	True				
ANR	6528432	UnaryOperationExpression	"! ( tmp2 = strchr ( tmp1 , '""' ) )"		6528111	0					
ANR	6528433	UnaryOperator	!		6528111	0					
ANR	6528434	AssignmentExpression	"tmp2 = strchr ( tmp1 , '""' )"		6528111	1		=			
ANR	6528435	Identifier	tmp2		6528111	0					
ANR	6528436	CallExpression	"strchr ( tmp1 , '""' )"		6528111	1					
ANR	6528437	Callee	strchr		6528111	0					
ANR	6528438	Identifier	strchr		6528111	0					
ANR	6528439	ArgumentList	tmp1		6528111	1					
ANR	6528440	Argument	tmp1		6528111	0					
ANR	6528441	Identifier	tmp1		6528111	0					
ANR	6528442	Argument	"'""'"		6528111	1					
ANR	6528443	PrimaryExpression	"'""'"		6528111	0					
ANR	6528444	CompoundStatement		57:37:1385:1385	6528111	1					
ANR	6528445	GotoStatement	goto exit_err ;	443:4:11036:11049	6528111	0	True				
ANR	6528446	Identifier	exit_err		6528111	0					
ANR	6528447	IfStatement	if ( tmp2 - tmp1 <= 1 )		6528111	6					
ANR	6528448	Condition	tmp2 - tmp1 <= 1	446:7:11121:11136	6528111	0	True				
ANR	6528449	RelationalExpression	tmp2 - tmp1 <= 1		6528111	0		<=			
ANR	6528450	AdditiveExpression	tmp2 - tmp1		6528111	0		-			
ANR	6528451	Identifier	tmp2		6528111	0					
ANR	6528452	Identifier	tmp1		6528111	1					
ANR	6528453	PrimaryExpression	1		6528111	1					
ANR	6528454	CompoundStatement		61:25:1494:1494	6528111	1					
ANR	6528455	ExpressionStatement	* field_end = '/'	447:4:11145:11161	6528111	0	True				
ANR	6528456	AssignmentExpression	* field_end = '/'		6528111	0		=			
ANR	6528457	UnaryOperationExpression	* field_end		6528111	0					
ANR	6528458	UnaryOperator	*		6528111	0					
ANR	6528459	Identifier	field_end		6528111	1					
ANR	6528460	PrimaryExpression	'/'		6528111	1					
ANR	6528461	ExpressionStatement	field_start = field_end + 1	448:4:11167:11194	6528111	1	True				
ANR	6528462	AssignmentExpression	field_start = field_end + 1		6528111	0		=			
ANR	6528463	Identifier	field_start		6528111	0					
ANR	6528464	AdditiveExpression	field_end + 1		6528111	1		+			
ANR	6528465	Identifier	field_end		6528111	0					
ANR	6528466	PrimaryExpression	1		6528111	1					
ANR	6528467	ContinueStatement	continue ;	449:4:11200:11208	6528111	2	True				
ANR	6528468	ExpressionStatement	* tmp2 = '\\0'	451:3:11218:11230	6528111	7	True				
ANR	6528469	AssignmentExpression	* tmp2 = '\\0'		6528111	0		=			
ANR	6528470	UnaryOperationExpression	* tmp2		6528111	0					
ANR	6528471	UnaryOperator	*		6528111	0					
ANR	6528472	Identifier	tmp2		6528111	1					
ANR	6528473	PrimaryExpression	'\\0'		6528111	1					
ANR	6528474	ExpressionStatement	name_sz = sizeof ( tmpflag -> fields [ num_fields ] . name )	452:3:11235:11286	6528111	8	True				
ANR	6528475	AssignmentExpression	name_sz = sizeof ( tmpflag -> fields [ num_fields ] . name )		6528111	0		=			
ANR	6528476	Identifier	name_sz		6528111	0					
ANR	6528477	SizeofExpression	sizeof ( tmpflag -> fields [ num_fields ] . name )		6528111	1					
ANR	6528478	Sizeof	sizeof		6528111	0					
ANR	6528479	MemberAccess	tmpflag -> fields [ num_fields ] . name		6528111	1					
ANR	6528480	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528481	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528482	Identifier	tmpflag		6528111	0					
ANR	6528483	Identifier	fields		6528111	1					
ANR	6528484	Identifier	num_fields		6528111	1					
ANR	6528485	Identifier	name		6528111	1					
ANR	6528486	ExpressionStatement	"strncpy ( tmpflag -> fields [ num_fields ] . name , tmp1 , name_sz - 1 )"	453:3:11291:11352	6528111	9	True				
ANR	6528487	CallExpression	"strncpy ( tmpflag -> fields [ num_fields ] . name , tmp1 , name_sz - 1 )"		6528111	0					
ANR	6528488	Callee	strncpy		6528111	0					
ANR	6528489	Identifier	strncpy		6528111	0					
ANR	6528490	ArgumentList	tmpflag -> fields [ num_fields ] . name		6528111	1					
ANR	6528491	Argument	tmpflag -> fields [ num_fields ] . name		6528111	0					
ANR	6528492	MemberAccess	tmpflag -> fields [ num_fields ] . name		6528111	0					
ANR	6528493	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528494	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528495	Identifier	tmpflag		6528111	0					
ANR	6528496	Identifier	fields		6528111	1					
ANR	6528497	Identifier	num_fields		6528111	1					
ANR	6528498	Identifier	name		6528111	1					
ANR	6528499	Argument	tmp1		6528111	1					
ANR	6528500	Identifier	tmp1		6528111	0					
ANR	6528501	Argument	name_sz - 1		6528111	2					
ANR	6528502	AdditiveExpression	name_sz - 1		6528111	0		-			
ANR	6528503	Identifier	name_sz		6528111	0					
ANR	6528504	PrimaryExpression	1		6528111	1					
ANR	6528505	ExpressionStatement	tmpflag -> fields [ num_fields ] . name [ name_sz - 1 ] = '\\0'	454:3:11357:11409	6528111	10	True				
ANR	6528506	AssignmentExpression	tmpflag -> fields [ num_fields ] . name [ name_sz - 1 ] = '\\0'		6528111	0		=			
ANR	6528507	ArrayIndexing	tmpflag -> fields [ num_fields ] . name [ name_sz - 1 ]		6528111	0					
ANR	6528508	MemberAccess	tmpflag -> fields [ num_fields ] . name		6528111	0					
ANR	6528509	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528510	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528511	Identifier	tmpflag		6528111	0					
ANR	6528512	Identifier	fields		6528111	1					
ANR	6528513	Identifier	num_fields		6528111	1					
ANR	6528514	Identifier	name		6528111	1					
ANR	6528515	AdditiveExpression	name_sz - 1		6528111	1		-			
ANR	6528516	Identifier	name_sz		6528111	0					
ANR	6528517	PrimaryExpression	1		6528111	1					
ANR	6528518	PrimaryExpression	'\\0'		6528111	1					
ANR	6528519	ExpressionStatement	"* tmp2 = '""'"	455:3:11414:11425	6528111	11	True				
ANR	6528520	AssignmentExpression	"* tmp2 = '""'"		6528111	0		=			
ANR	6528521	UnaryOperationExpression	* tmp2		6528111	0					
ANR	6528522	UnaryOperator	*		6528111	0					
ANR	6528523	Identifier	tmp2		6528111	1					
ANR	6528524	PrimaryExpression	"'""'"		6528111	1					
ANR	6528525	IfStatement	"if ( ! ( tmp1 = strstr ( field_start , ""start="" ) ) )"		6528111	12					
ANR	6528526	Condition	"! ( tmp1 = strstr ( field_start , ""start="" ) )"	457:7:11451:11490	6528111	0	True				
ANR	6528527	UnaryOperationExpression	"! ( tmp1 = strstr ( field_start , ""start="" ) )"		6528111	0					
ANR	6528528	UnaryOperator	!		6528111	0					
ANR	6528529	AssignmentExpression	"tmp1 = strstr ( field_start , ""start="" )"		6528111	1		=			
ANR	6528530	Identifier	tmp1		6528111	0					
ANR	6528531	CallExpression	"strstr ( field_start , ""start="" )"		6528111	1					
ANR	6528532	Callee	strstr		6528111	0					
ANR	6528533	Identifier	strstr		6528111	0					
ANR	6528534	ArgumentList	field_start		6528111	1					
ANR	6528535	Argument	field_start		6528111	0					
ANR	6528536	Identifier	field_start		6528111	0					
ANR	6528537	Argument	"""start="""		6528111	1					
ANR	6528538	PrimaryExpression	"""start="""		6528111	0					
ANR	6528539	CompoundStatement		72:49:1848:1848	6528111	1					
ANR	6528540	GotoStatement	goto exit_err ;	458:4:11499:11512	6528111	0	True				
ANR	6528541	Identifier	exit_err		6528111	0					
ANR	6528542	ExpressionStatement	tmp1 += 7	460:3:11522:11531	6528111	13	True				
ANR	6528543	AssignmentExpression	tmp1 += 7		6528111	0		+=			
ANR	6528544	Identifier	tmp1		6528111	0					
ANR	6528545	PrimaryExpression	7		6528111	1					
ANR	6528546	IfStatement	if ( ! isdigit ( * tmp1 ) )		6528111	14					
ANR	6528547	Condition	! isdigit ( * tmp1 )	461:7:11540:11555	6528111	0	True				
ANR	6528548	UnaryOperationExpression	! isdigit ( * tmp1 )		6528111	0					
ANR	6528549	UnaryOperator	!		6528111	0					
ANR	6528550	CallExpression	isdigit ( * tmp1 )		6528111	1					
ANR	6528551	Callee	isdigit		6528111	0					
ANR	6528552	Identifier	isdigit		6528111	0					
ANR	6528553	ArgumentList	* tmp1		6528111	1					
ANR	6528554	Argument	* tmp1		6528111	0					
ANR	6528555	UnaryOperationExpression	* tmp1		6528111	0					
ANR	6528556	UnaryOperator	*		6528111	0					
ANR	6528557	Identifier	tmp1		6528111	1					
ANR	6528558	CompoundStatement		76:25:1913:1913	6528111	1					
ANR	6528559	GotoStatement	goto exit_err ;	462:4:11564:11577	6528111	0	True				
ANR	6528560	Identifier	exit_err		6528111	0					
ANR	6528561	ExpressionStatement	"tmpflag -> fields [ num_fields ] . bit_num = ( ut32 ) strtoul ( tmp1 , NULL , 10 )"	464:3:11587:11656	6528111	15	True				
ANR	6528562	AssignmentExpression	"tmpflag -> fields [ num_fields ] . bit_num = ( ut32 ) strtoul ( tmp1 , NULL , 10 )"		6528111	0		=			
ANR	6528563	MemberAccess	tmpflag -> fields [ num_fields ] . bit_num		6528111	0					
ANR	6528564	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528565	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528566	Identifier	tmpflag		6528111	0					
ANR	6528567	Identifier	fields		6528111	1					
ANR	6528568	Identifier	num_fields		6528111	1					
ANR	6528569	Identifier	bit_num		6528111	1					
ANR	6528570	CastExpression	"( ut32 ) strtoul ( tmp1 , NULL , 10 )"		6528111	1					
ANR	6528571	CastTarget	ut32		6528111	0					
ANR	6528572	CallExpression	"strtoul ( tmp1 , NULL , 10 )"		6528111	1					
ANR	6528573	Callee	strtoul		6528111	0					
ANR	6528574	Identifier	strtoul		6528111	0					
ANR	6528575	ArgumentList	tmp1		6528111	1					
ANR	6528576	Argument	tmp1		6528111	0					
ANR	6528577	Identifier	tmp1		6528111	0					
ANR	6528578	Argument	NULL		6528111	1					
ANR	6528579	Identifier	NULL		6528111	0					
ANR	6528580	Argument	10		6528111	2					
ANR	6528581	PrimaryExpression	10		6528111	0					
ANR	6528582	IfStatement	"if ( ! ( tmp1 = strstr ( field_start , ""end="" ) ) )"		6528111	16					
ANR	6528583	Condition	"! ( tmp1 = strstr ( field_start , ""end="" ) )"	466:7:11679:11716	6528111	0	True				
ANR	6528584	UnaryOperationExpression	"! ( tmp1 = strstr ( field_start , ""end="" ) )"		6528111	0					
ANR	6528585	UnaryOperator	!		6528111	0					
ANR	6528586	AssignmentExpression	"tmp1 = strstr ( field_start , ""end="" )"		6528111	1		=			
ANR	6528587	Identifier	tmp1		6528111	0					
ANR	6528588	CallExpression	"strstr ( field_start , ""end="" )"		6528111	1					
ANR	6528589	Callee	strstr		6528111	0					
ANR	6528590	Identifier	strstr		6528111	0					
ANR	6528591	ArgumentList	field_start		6528111	1					
ANR	6528592	Argument	field_start		6528111	0					
ANR	6528593	Identifier	field_start		6528111	0					
ANR	6528594	Argument	"""end="""		6528111	1					
ANR	6528595	PrimaryExpression	"""end="""		6528111	0					
ANR	6528596	CompoundStatement		81:47:2074:2074	6528111	1					
ANR	6528597	GotoStatement	goto exit_err ;	467:4:11725:11738	6528111	0	True				
ANR	6528598	Identifier	exit_err		6528111	0					
ANR	6528599	ExpressionStatement	tmp1 += 5	469:3:11748:11757	6528111	17	True				
ANR	6528600	AssignmentExpression	tmp1 += 5		6528111	0		+=			
ANR	6528601	Identifier	tmp1		6528111	0					
ANR	6528602	PrimaryExpression	5		6528111	1					
ANR	6528603	IfStatement	if ( ! isdigit ( * tmp1 ) )		6528111	18					
ANR	6528604	Condition	! isdigit ( * tmp1 )	470:7:11766:11781	6528111	0	True				
ANR	6528605	UnaryOperationExpression	! isdigit ( * tmp1 )		6528111	0					
ANR	6528606	UnaryOperator	!		6528111	0					
ANR	6528607	CallExpression	isdigit ( * tmp1 )		6528111	1					
ANR	6528608	Callee	isdigit		6528111	0					
ANR	6528609	Identifier	isdigit		6528111	0					
ANR	6528610	ArgumentList	* tmp1		6528111	1					
ANR	6528611	Argument	* tmp1		6528111	0					
ANR	6528612	UnaryOperationExpression	* tmp1		6528111	0					
ANR	6528613	UnaryOperator	*		6528111	0					
ANR	6528614	Identifier	tmp1		6528111	1					
ANR	6528615	CompoundStatement		85:25:2139:2139	6528111	1					
ANR	6528616	GotoStatement	goto exit_err ;	471:4:11790:11803	6528111	0	True				
ANR	6528617	Identifier	exit_err		6528111	0					
ANR	6528618	ExpressionStatement	"tmpflag -> fields [ num_fields ] . sz = ( ut32 ) strtoul ( tmp1 , NULL , 10 ) + 1"	473:3:11813:11881	6528111	19	True				
ANR	6528619	AssignmentExpression	"tmpflag -> fields [ num_fields ] . sz = ( ut32 ) strtoul ( tmp1 , NULL , 10 ) + 1"		6528111	0		=			
ANR	6528620	MemberAccess	tmpflag -> fields [ num_fields ] . sz		6528111	0					
ANR	6528621	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528622	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528623	Identifier	tmpflag		6528111	0					
ANR	6528624	Identifier	fields		6528111	1					
ANR	6528625	Identifier	num_fields		6528111	1					
ANR	6528626	Identifier	sz		6528111	1					
ANR	6528627	AdditiveExpression	"( ut32 ) strtoul ( tmp1 , NULL , 10 ) + 1"		6528111	1		+			
ANR	6528628	CastExpression	"( ut32 ) strtoul ( tmp1 , NULL , 10 )"		6528111	0					
ANR	6528629	CastTarget	ut32		6528111	0					
ANR	6528630	CallExpression	"strtoul ( tmp1 , NULL , 10 )"		6528111	1					
ANR	6528631	Callee	strtoul		6528111	0					
ANR	6528632	Identifier	strtoul		6528111	0					
ANR	6528633	ArgumentList	tmp1		6528111	1					
ANR	6528634	Argument	tmp1		6528111	0					
ANR	6528635	Identifier	tmp1		6528111	0					
ANR	6528636	Argument	NULL		6528111	1					
ANR	6528637	Identifier	NULL		6528111	0					
ANR	6528638	Argument	10		6528111	2					
ANR	6528639	PrimaryExpression	10		6528111	0					
ANR	6528640	PrimaryExpression	1		6528111	1					
ANR	6528641	ExpressionStatement	tmpflag -> fields [ num_fields ] . sz -= tmpflag -> fields [ num_fields ] . bit_num	474:3:11886:11955	6528111	20	True				
ANR	6528642	AssignmentExpression	tmpflag -> fields [ num_fields ] . sz -= tmpflag -> fields [ num_fields ] . bit_num		6528111	0		-=			
ANR	6528643	MemberAccess	tmpflag -> fields [ num_fields ] . sz		6528111	0					
ANR	6528644	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528645	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528646	Identifier	tmpflag		6528111	0					
ANR	6528647	Identifier	fields		6528111	1					
ANR	6528648	Identifier	num_fields		6528111	1					
ANR	6528649	Identifier	sz		6528111	1					
ANR	6528650	MemberAccess	tmpflag -> fields [ num_fields ] . bit_num		6528111	1					
ANR	6528651	ArrayIndexing	tmpflag -> fields [ num_fields ]		6528111	0					
ANR	6528652	PtrMemberAccess	tmpflag -> fields		6528111	0					
ANR	6528653	Identifier	tmpflag		6528111	0					
ANR	6528654	Identifier	fields		6528111	1					
ANR	6528655	Identifier	num_fields		6528111	1					
ANR	6528656	Identifier	bit_num		6528111	1					
ANR	6528657	ExpressionStatement	num_fields ++	475:3:11960:11972	6528111	21	True				
ANR	6528658	PostIncDecOperationExpression	num_fields ++		6528111	0					
ANR	6528659	Identifier	num_fields		6528111	0					
ANR	6528660	IncDec	++		6528111	1					
ANR	6528661	ExpressionStatement	* field_end = '/'	476:3:11977:11993	6528111	22	True				
ANR	6528662	AssignmentExpression	* field_end = '/'		6528111	0		=			
ANR	6528663	UnaryOperationExpression	* field_end		6528111	0					
ANR	6528664	UnaryOperator	*		6528111	0					
ANR	6528665	Identifier	field_end		6528111	1					
ANR	6528666	PrimaryExpression	'/'		6528111	1					
ANR	6528667	ExpressionStatement	field_start = field_end + 1	477:3:11998:12025	6528111	23	True				
ANR	6528668	AssignmentExpression	field_start = field_end + 1		6528111	0		=			
ANR	6528669	Identifier	field_start		6528111	0					
ANR	6528670	AdditiveExpression	field_end + 1		6528111	1		+			
ANR	6528671	Identifier	field_end		6528111	0					
ANR	6528672	PrimaryExpression	1		6528111	1					
ANR	6528673	ExpressionStatement	tmpflag -> num_fields = num_fields	479:2:12033:12065	6528111	18	True				
ANR	6528674	AssignmentExpression	tmpflag -> num_fields = num_fields		6528111	0		=			
ANR	6528675	PtrMemberAccess	tmpflag -> num_fields		6528111	0					
ANR	6528676	Identifier	tmpflag		6528111	0					
ANR	6528677	Identifier	num_fields		6528111	1					
ANR	6528678	Identifier	num_fields		6528111	1					
ANR	6528679	ExpressionStatement	"r_list_push ( flags , tmpflag )"	480:2:12069:12097	6528111	19	True				
ANR	6528680	CallExpression	"r_list_push ( flags , tmpflag )"		6528111	0					
ANR	6528681	Callee	r_list_push		6528111	0					
ANR	6528682	Identifier	r_list_push		6528111	0					
ANR	6528683	ArgumentList	flags		6528111	1					
ANR	6528684	Argument	flags		6528111	0					
ANR	6528685	Identifier	flags		6528111	0					
ANR	6528686	Argument	tmpflag		6528111	1					
ANR	6528687	Identifier	tmpflag		6528111	0					
ANR	6528688	ExpressionStatement	* flagsend = '<'	481:2:12101:12116	6528111	20	True				
ANR	6528689	AssignmentExpression	* flagsend = '<'		6528111	0		=			
ANR	6528690	UnaryOperationExpression	* flagsend		6528111	0					
ANR	6528691	UnaryOperator	*		6528111	0					
ANR	6528692	Identifier	flagsend		6528111	1					
ANR	6528693	PrimaryExpression	'<'		6528111	1					
ANR	6528694	ExpressionStatement	flagstr = flagsend + 1	482:2:12120:12142	6528111	21	True				
ANR	6528695	AssignmentExpression	flagstr = flagsend + 1		6528111	0		=			
ANR	6528696	Identifier	flagstr		6528111	0					
ANR	6528697	AdditiveExpression	flagsend + 1		6528111	1		+			
ANR	6528698	Identifier	flagsend		6528111	0					
ANR	6528699	PrimaryExpression	1		6528111	1					
ANR	6528700	ReturnStatement	return flags ;	484:1:12148:12160	6528111	7	True				
ANR	6528701	Identifier	flags		6528111	0					
ANR	6528702	Label	exit_err :	485:0:12162:12170	6528111	8	True				
ANR	6528703	Identifier	exit_err		6528111	0					
ANR	6528704	IfStatement	if ( flags )		6528111	9					
ANR	6528705	Condition	flags	486:5:12177:12181	6528111	0	True				
ANR	6528706	Identifier	flags		6528111	0					
ANR	6528707	CompoundStatement		101:12:2539:2539	6528111	1					
ANR	6528708	ExpressionStatement	r_list_free ( flags )	487:2:12188:12207	6528111	0	True				
ANR	6528709	CallExpression	r_list_free ( flags )		6528111	0					
ANR	6528710	Callee	r_list_free		6528111	0					
ANR	6528711	Identifier	r_list_free		6528111	0					
ANR	6528712	ArgumentList	flags		6528111	1					
ANR	6528713	Argument	flags		6528111	0					
ANR	6528714	Identifier	flags		6528111	0					
ANR	6528715	ExpressionStatement	free ( tmpflag )	489:1:12213:12227	6528111	10	True				
ANR	6528716	CallExpression	free ( tmpflag )		6528111	0					
ANR	6528717	Callee	free		6528111	0					
ANR	6528718	Identifier	free		6528111	0					
ANR	6528719	ArgumentList	tmpflag		6528111	1					
ANR	6528720	Argument	tmpflag		6528111	0					
ANR	6528721	Identifier	tmpflag		6528111	0					
ANR	6528722	ReturnStatement	return NULL ;	490:1:12230:12241	6528111	11	True				
ANR	6528723	Identifier	NULL		6528111	0					
ANR	6528724	ReturnType	static RList *		6528111	1					
ANR	6528725	Identifier	_extract_flags		6528111	2					
ANR	6528726	ParameterList	char * flagstr		6528111	3					
ANR	6528727	Parameter	char * flagstr	386:29:9629:9641	6528111	0	True				
ANR	6528728	ParameterType	char *		6528111	0					
ANR	6528729	Identifier	flagstr		6528111	1					
ANR	6528730	CFGEntryNode	ENTRY		6528111		True				
ANR	6528731	CFGExitNode	EXIT		6528111		True				
ANR	6528732	Symbol	* tmpflag		6528111						
ANR	6528733	Symbol	* field_end		6528111						
ANR	6528734	Symbol	tmpflag -> fields [ num_fields ] . sz		6528111						
ANR	6528735	Symbol	flags		6528111						
ANR	6528736	Symbol	strchr		6528111						
ANR	6528737	Symbol	flagstr		6528111						
ANR	6528738	Symbol	calloc		6528111						
ANR	6528739	Symbol	tmp1		6528111						
ANR	6528740	Symbol	tmp2		6528111						
ANR	6528741	Symbol	field_start		6528111						
ANR	6528742	Symbol	* type_sz		6528111						
ANR	6528743	Symbol	* tmpflag -> fields [ num_fields ] . name		6528111						
ANR	6528744	Symbol	* * num_fields		6528111						
ANR	6528745	Symbol	* tmp1		6528111						
ANR	6528746	Symbol	* tmp2		6528111						
ANR	6528747	Symbol	* * * tmpflag		6528111						
ANR	6528748	Symbol	flags -> free		6528111						
ANR	6528749	Symbol	* * tmpflag		6528111						
ANR	6528750	Symbol	strtoul		6528111						
ANR	6528751	Symbol	free		6528111						
ANR	6528752	Symbol	tmpflag -> fields [ num_fields ] . name		6528111						
ANR	6528753	Symbol	tmpflag -> type		6528111						
ANR	6528754	Symbol	isdigit		6528111						
ANR	6528755	Symbol	* flags		6528111						
ANR	6528756	Symbol	NULL		6528111						
ANR	6528757	Symbol	tmpflag -> num_bits		6528111						
ANR	6528758	Symbol	* * tmpflag -> fields		6528111						
ANR	6528759	Symbol	tmpflag -> num_fields		6528111						
ANR	6528760	Symbol	tmpflag -> fields [ num_fields ] . bit_num		6528111						
ANR	6528761	Symbol	* name_sz		6528111						
ANR	6528762	Symbol	type_sz		6528111						
ANR	6528763	Symbol	tmpflag		6528111						
ANR	6528764	Symbol	* num_fields		6528111						
ANR	6528765	Symbol	* flagsend		6528111						
ANR	6528766	Symbol	* tmpflag -> fields		6528111						
ANR	6528767	Symbol	flagsend		6528111						
ANR	6528768	Symbol	strstr		6528111						
ANR	6528769	Symbol	field_end		6528111						
ANR	6528770	Symbol	num_fields		6528111						
ANR	6528771	Symbol	name_sz		6528111						
ANR	6528772	Symbol	* tmpflag -> type		6528111						
ANR	6528773	Symbol	tmpflag -> fields		6528111						
ANR	6528774	Symbol	r_list_new		6528111						
ANR	6528775	Function	_extract_regs	493:0:12246:15467							
ANR	6528776	FunctionDef	"_extract_regs (char * regstr , RList * flags , char * pc_alias)"		6528775	0					
ANR	6528777	CompoundStatement		493:72:12318:15467	6528775	0					
ANR	6528778	IdentifierDeclStatement	"char * regstr_end , * regname , * regtype , * tmp1 ;"	494:1:12321:12364	6528775	0	True				
ANR	6528779	IdentifierDecl	* regstr_end		6528775	0					
ANR	6528780	IdentifierDeclType	char *		6528775	0					
ANR	6528781	Identifier	regstr_end		6528775	1					
ANR	6528782	IdentifierDecl	* regname		6528775	1					
ANR	6528783	IdentifierDeclType	char *		6528775	0					
ANR	6528784	Identifier	regname		6528775	1					
ANR	6528785	IdentifierDecl	* regtype		6528775	2					
ANR	6528786	IdentifierDeclType	char *		6528775	0					
ANR	6528787	Identifier	regtype		6528775	1					
ANR	6528788	IdentifierDecl	* tmp1		6528775	3					
ANR	6528789	IdentifierDeclType	char *		6528775	0					
ANR	6528790	Identifier	tmp1		6528775	1					
ANR	6528791	IdentifierDeclStatement	"ut32 flagnum , regname_len , regsize , regnum ;"	495:1:12367:12409	6528775	1	True				
ANR	6528792	IdentifierDecl	flagnum		6528775	0					
ANR	6528793	IdentifierDeclType	ut32		6528775	0					
ANR	6528794	Identifier	flagnum		6528775	1					
ANR	6528795	IdentifierDecl	regname_len		6528775	1					
ANR	6528796	IdentifierDeclType	ut32		6528775	0					
ANR	6528797	Identifier	regname_len		6528775	1					
ANR	6528798	IdentifierDecl	regsize		6528775	2					
ANR	6528799	IdentifierDeclType	ut32		6528775	0					
ANR	6528800	Identifier	regsize		6528775	1					
ANR	6528801	IdentifierDecl	regnum		6528775	3					
ANR	6528802	IdentifierDeclType	ut32		6528775	0					
ANR	6528803	Identifier	regnum		6528775	1					
ANR	6528804	IdentifierDeclStatement	RList * regs ;	496:1:12412:12423	6528775	2	True				
ANR	6528805	IdentifierDecl	* regs		6528775	0					
ANR	6528806	IdentifierDeclType	RList *		6528775	0					
ANR	6528807	Identifier	regs		6528775	1					
ANR	6528808	IdentifierDeclStatement	RListIter * iter ;	497:1:12426:12441	6528775	3	True				
ANR	6528809	IdentifierDecl	* iter		6528775	0					
ANR	6528810	IdentifierDeclType	RListIter *		6528775	0					
ANR	6528811	Identifier	iter		6528775	1					
ANR	6528812	IdentifierDeclStatement	gdbr_xml_reg_t * tmpreg ;	498:1:12444:12466	6528775	4	True				
ANR	6528813	IdentifierDecl	* tmpreg		6528775	0					
ANR	6528814	IdentifierDeclType	gdbr_xml_reg_t *		6528775	0					
ANR	6528815	Identifier	tmpreg		6528775	1					
ANR	6528816	IdentifierDeclStatement	gdbr_xml_flags_t * tmpflag ;	499:1:12469:12494	6528775	5	True				
ANR	6528817	IdentifierDecl	* tmpflag		6528775	0					
ANR	6528818	IdentifierDeclType	gdbr_xml_flags_t *		6528775	0					
ANR	6528819	Identifier	tmpflag		6528775	1					
ANR	6528820	IfStatement	if ( ! ( regs = r_list_new ( ) ) )		6528775	6					
ANR	6528821	Condition	! ( regs = r_list_new ( ) )	500:5:12501:12523	6528775	0	True				
ANR	6528822	UnaryOperationExpression	! ( regs = r_list_new ( ) )		6528775	0					
ANR	6528823	UnaryOperator	!		6528775	0					
ANR	6528824	AssignmentExpression	regs = r_list_new ( )		6528775	1		=			
ANR	6528825	Identifier	regs		6528775	0					
ANR	6528826	CallExpression	r_list_new ( )		6528775	1					
ANR	6528827	Callee	r_list_new		6528775	0					
ANR	6528828	Identifier	r_list_new		6528775	0					
ANR	6528829	ArgumentList			6528775	1					
ANR	6528830	CompoundStatement		8:30:207:207	6528775	1					
ANR	6528831	ReturnStatement	return NULL ;	501:2:12530:12541	6528775	0	True				
ANR	6528832	Identifier	NULL		6528775	0					
ANR	6528833	WhileStatement	"while ( ( regstr = strstr ( regstr , ""<reg"" ) ) )"		6528775	7					
ANR	6528834	Condition	"regstr = strstr ( regstr , ""<reg"" )"	503:8:12554:12587	6528775	0	True				
ANR	6528835	AssignmentExpression	"regstr = strstr ( regstr , ""<reg"" )"		6528775	0		=			
ANR	6528836	Identifier	regstr		6528775	0					
ANR	6528837	CallExpression	"strstr ( regstr , ""<reg"" )"		6528775	1					
ANR	6528838	Callee	strstr		6528775	0					
ANR	6528839	Identifier	strstr		6528775	0					
ANR	6528840	ArgumentList	regstr		6528775	1					
ANR	6528841	Argument	regstr		6528775	0					
ANR	6528842	Identifier	regstr		6528775	0					
ANR	6528843	Argument	"""<reg"""		6528775	1					
ANR	6528844	PrimaryExpression	"""<reg"""		6528775	0					
ANR	6528845	CompoundStatement		11:44:271:271	6528775	1					
ANR	6528846	IfStatement	"if ( ! ( regstr_end = strchr ( regstr , '/' ) ) )"		6528775	0					
ANR	6528847	Condition	"! ( regstr_end = strchr ( regstr , '/' ) )"	504:6:12598:12633	6528775	0	True				
ANR	6528848	UnaryOperationExpression	"! ( regstr_end = strchr ( regstr , '/' ) )"		6528775	0					
ANR	6528849	UnaryOperator	!		6528775	0					
ANR	6528850	AssignmentExpression	"regstr_end = strchr ( regstr , '/' )"		6528775	1		=			
ANR	6528851	Identifier	regstr_end		6528775	0					
ANR	6528852	CallExpression	"strchr ( regstr , '/' )"		6528775	1					
ANR	6528853	Callee	strchr		6528775	0					
ANR	6528854	Identifier	strchr		6528775	0					
ANR	6528855	ArgumentList	regstr		6528775	1					
ANR	6528856	Argument	regstr		6528775	0					
ANR	6528857	Identifier	regstr		6528775	0					
ANR	6528858	Argument	'/'		6528775	1					
ANR	6528859	PrimaryExpression	'/'		6528775	0					
ANR	6528860	CompoundStatement		12:44:317:317	6528775	1					
ANR	6528861	GotoStatement	goto exit_err ;	505:3:12641:12654	6528775	0	True				
ANR	6528862	Identifier	exit_err		6528775	0					
ANR	6528863	ExpressionStatement	* regstr_end = '\\0'	507:2:12662:12680	6528775	1	True				
ANR	6528864	AssignmentExpression	* regstr_end = '\\0'		6528775	0		=			
ANR	6528865	UnaryOperationExpression	* regstr_end		6528775	0					
ANR	6528866	UnaryOperator	*		6528775	0					
ANR	6528867	Identifier	regstr_end		6528775	1					
ANR	6528868	PrimaryExpression	'\\0'		6528775	1					
ANR	6528869	IfStatement	"if ( ! ( regname = strstr ( regstr , ""name="" ) ) )"		6528775	2					
ANR	6528870	Condition	"! ( regname = strstr ( regstr , ""name="" ) )"	509:6:12698:12734	6528775	0	True				
ANR	6528871	UnaryOperationExpression	"! ( regname = strstr ( regstr , ""name="" ) )"		6528775	0					
ANR	6528872	UnaryOperator	!		6528775	0					
ANR	6528873	AssignmentExpression	"regname = strstr ( regstr , ""name="" )"		6528775	1		=			
ANR	6528874	Identifier	regname		6528775	0					
ANR	6528875	CallExpression	"strstr ( regstr , ""name="" )"		6528775	1					
ANR	6528876	Callee	strstr		6528775	0					
ANR	6528877	Identifier	strstr		6528775	0					
ANR	6528878	ArgumentList	regstr		6528775	1					
ANR	6528879	Argument	regstr		6528775	0					
ANR	6528880	Identifier	regstr		6528775	0					
ANR	6528881	Argument	"""name="""		6528775	1					
ANR	6528882	PrimaryExpression	"""name="""		6528775	0					
ANR	6528883	CompoundStatement		17:45:418:418	6528775	1					
ANR	6528884	GotoStatement	goto exit_err ;	510:3:12742:12755	6528775	0	True				
ANR	6528885	Identifier	exit_err		6528775	0					
ANR	6528886	ExpressionStatement	regname += 6	512:2:12763:12775	6528775	3	True				
ANR	6528887	AssignmentExpression	regname += 6		6528775	0		+=			
ANR	6528888	Identifier	regname		6528775	0					
ANR	6528889	PrimaryExpression	6		6528775	1					
ANR	6528890	IfStatement	"if ( ! ( tmp1 = strchr ( regname , '""' ) ) )"		6528775	4					
ANR	6528891	Condition	"! ( tmp1 = strchr ( regname , '""' ) )"	513:6:12783:12813	6528775	0	True				
ANR	6528892	UnaryOperationExpression	"! ( tmp1 = strchr ( regname , '""' ) )"		6528775	0					
ANR	6528893	UnaryOperator	!		6528775	0					
ANR	6528894	AssignmentExpression	"tmp1 = strchr ( regname , '""' )"		6528775	1		=			
ANR	6528895	Identifier	tmp1		6528775	0					
ANR	6528896	CallExpression	"strchr ( regname , '""' )"		6528775	1					
ANR	6528897	Callee	strchr		6528775	0					
ANR	6528898	Identifier	strchr		6528775	0					
ANR	6528899	ArgumentList	regname		6528775	1					
ANR	6528900	Argument	regname		6528775	0					
ANR	6528901	Identifier	regname		6528775	0					
ANR	6528902	Argument	"'""'"		6528775	1					
ANR	6528903	PrimaryExpression	"'""'"		6528775	0					
ANR	6528904	CompoundStatement		21:39:497:497	6528775	1					
ANR	6528905	GotoStatement	goto exit_err ;	514:3:12821:12834	6528775	0	True				
ANR	6528906	Identifier	exit_err		6528775	0					
ANR	6528907	ExpressionStatement	regname_len = tmp1 - regname	516:2:12842:12870	6528775	5	True				
ANR	6528908	AssignmentExpression	regname_len = tmp1 - regname		6528775	0		=			
ANR	6528909	Identifier	regname_len		6528775	0					
ANR	6528910	AdditiveExpression	tmp1 - regname		6528775	1		-			
ANR	6528911	Identifier	tmp1		6528775	0					
ANR	6528912	Identifier	regname		6528775	1					
ANR	6528913	IfStatement	"if ( ! ( tmp1 = strstr ( regstr , ""bitsize="" ) ) )"		6528775	6					
ANR	6528914	Condition	"! ( tmp1 = strstr ( regstr , ""bitsize="" ) )"	518:6:12888:12924	6528775	0	True				
ANR	6528915	UnaryOperationExpression	"! ( tmp1 = strstr ( regstr , ""bitsize="" ) )"		6528775	0					
ANR	6528916	UnaryOperator	!		6528775	0					
ANR	6528917	AssignmentExpression	"tmp1 = strstr ( regstr , ""bitsize="" )"		6528775	1		=			
ANR	6528918	Identifier	tmp1		6528775	0					
ANR	6528919	CallExpression	"strstr ( regstr , ""bitsize="" )"		6528775	1					
ANR	6528920	Callee	strstr		6528775	0					
ANR	6528921	Identifier	strstr		6528775	0					
ANR	6528922	ArgumentList	regstr		6528775	1					
ANR	6528923	Argument	regstr		6528775	0					
ANR	6528924	Identifier	regstr		6528775	0					
ANR	6528925	Argument	"""bitsize="""		6528775	1					
ANR	6528926	PrimaryExpression	"""bitsize="""		6528775	0					
ANR	6528927	CompoundStatement		26:45:608:608	6528775	1					
ANR	6528928	GotoStatement	goto exit_err ;	519:3:12932:12945	6528775	0	True				
ANR	6528929	Identifier	exit_err		6528775	0					
ANR	6528930	ExpressionStatement	tmp1 += 9	521:2:12953:12962	6528775	7	True				
ANR	6528931	AssignmentExpression	tmp1 += 9		6528775	0		+=			
ANR	6528932	Identifier	tmp1		6528775	0					
ANR	6528933	PrimaryExpression	9		6528775	1					
ANR	6528934	IfStatement	if ( ! isdigit ( * tmp1 ) )		6528775	8					
ANR	6528935	Condition	! isdigit ( * tmp1 )	522:6:12970:12985	6528775	0	True				
ANR	6528936	UnaryOperationExpression	! isdigit ( * tmp1 )		6528775	0					
ANR	6528937	UnaryOperator	!		6528775	0					
ANR	6528938	CallExpression	isdigit ( * tmp1 )		6528775	1					
ANR	6528939	Callee	isdigit		6528775	0					
ANR	6528940	Identifier	isdigit		6528775	0					
ANR	6528941	ArgumentList	* tmp1		6528775	1					
ANR	6528942	Argument	* tmp1		6528775	0					
ANR	6528943	UnaryOperationExpression	* tmp1		6528775	0					
ANR	6528944	UnaryOperator	*		6528775	0					
ANR	6528945	Identifier	tmp1		6528775	1					
ANR	6528946	CompoundStatement		30:24:669:669	6528775	1					
ANR	6528947	GotoStatement	goto exit_err ;	523:3:12993:13006	6528775	0	True				
ANR	6528948	Identifier	exit_err		6528775	0					
ANR	6528949	ExpressionStatement	"regsize = strtoul ( tmp1 , NULL , 10 )"	525:2:13014:13048	6528775	9	True				
ANR	6528950	AssignmentExpression	"regsize = strtoul ( tmp1 , NULL , 10 )"		6528775	0		=			
ANR	6528951	Identifier	regsize		6528775	0					
ANR	6528952	CallExpression	"strtoul ( tmp1 , NULL , 10 )"		6528775	1					
ANR	6528953	Callee	strtoul		6528775	0					
ANR	6528954	Identifier	strtoul		6528775	0					
ANR	6528955	ArgumentList	tmp1		6528775	1					
ANR	6528956	Argument	tmp1		6528775	0					
ANR	6528957	Identifier	tmp1		6528775	0					
ANR	6528958	Argument	NULL		6528775	1					
ANR	6528959	Identifier	NULL		6528775	0					
ANR	6528960	Argument	10		6528775	2					
ANR	6528961	PrimaryExpression	10		6528775	0					
ANR	6528962	ExpressionStatement	regnum = UINT32_MAX	527:2:13064:13083	6528775	10	True				
ANR	6528963	AssignmentExpression	regnum = UINT32_MAX		6528775	0		=			
ANR	6528964	Identifier	regnum		6528775	0					
ANR	6528965	Identifier	UINT32_MAX		6528775	1					
ANR	6528966	IfStatement	"if ( ( tmp1 = strstr ( regstr , ""regnum="" ) ) )"		6528775	11					
ANR	6528967	Condition	"tmp1 = strstr ( regstr , ""regnum="" )"	528:6:13091:13125	6528775	0	True				
ANR	6528968	AssignmentExpression	"tmp1 = strstr ( regstr , ""regnum="" )"		6528775	0		=			
ANR	6528969	Identifier	tmp1		6528775	0					
ANR	6528970	CallExpression	"strstr ( regstr , ""regnum="" )"		6528775	1					
ANR	6528971	Callee	strstr		6528775	0					
ANR	6528972	Identifier	strstr		6528775	0					
ANR	6528973	ArgumentList	regstr		6528775	1					
ANR	6528974	Argument	regstr		6528775	0					
ANR	6528975	Identifier	regstr		6528775	0					
ANR	6528976	Argument	"""regnum="""		6528775	1					
ANR	6528977	PrimaryExpression	"""regnum="""		6528775	0					
ANR	6528978	CompoundStatement		36:43:809:809	6528775	1					
ANR	6528979	ExpressionStatement	tmp1 += 8	529:3:13133:13142	6528775	0	True				
ANR	6528980	AssignmentExpression	tmp1 += 8		6528775	0		+=			
ANR	6528981	Identifier	tmp1		6528775	0					
ANR	6528982	PrimaryExpression	8		6528775	1					
ANR	6528983	IfStatement	if ( ! isdigit ( * tmp1 ) )		6528775	1					
ANR	6528984	Condition	! isdigit ( * tmp1 )	530:7:13151:13166	6528775	0	True				
ANR	6528985	UnaryOperationExpression	! isdigit ( * tmp1 )		6528775	0					
ANR	6528986	UnaryOperator	!		6528775	0					
ANR	6528987	CallExpression	isdigit ( * tmp1 )		6528775	1					
ANR	6528988	Callee	isdigit		6528775	0					
ANR	6528989	Identifier	isdigit		6528775	0					
ANR	6528990	ArgumentList	* tmp1		6528775	1					
ANR	6528991	Argument	* tmp1		6528775	0					
ANR	6528992	UnaryOperationExpression	* tmp1		6528775	0					
ANR	6528993	UnaryOperator	*		6528775	0					
ANR	6528994	Identifier	tmp1		6528775	1					
ANR	6528995	CompoundStatement		38:25:850:850	6528775	1					
ANR	6528996	GotoStatement	goto exit_err ;	531:4:13175:13188	6528775	0	True				
ANR	6528997	Identifier	exit_err		6528775	0					
ANR	6528998	ExpressionStatement	"regnum = strtoul ( tmp1 , NULL , 10 )"	533:3:13198:13231	6528775	2	True				
ANR	6528999	AssignmentExpression	"regnum = strtoul ( tmp1 , NULL , 10 )"		6528775	0		=			
ANR	6529000	Identifier	regnum		6528775	0					
ANR	6529001	CallExpression	"strtoul ( tmp1 , NULL , 10 )"		6528775	1					
ANR	6529002	Callee	strtoul		6528775	0					
ANR	6529003	Identifier	strtoul		6528775	0					
ANR	6529004	ArgumentList	tmp1		6528775	1					
ANR	6529005	Argument	tmp1		6528775	0					
ANR	6529006	Identifier	tmp1		6528775	0					
ANR	6529007	Argument	NULL		6528775	1					
ANR	6529008	Identifier	NULL		6528775	0					
ANR	6529009	Argument	10		6528775	2					
ANR	6529010	PrimaryExpression	10		6528775	0					
ANR	6529011	ExpressionStatement	"regtype = ""gpr"""	536:2:13249:13264	6528775	12	True				
ANR	6529012	AssignmentExpression	"regtype = ""gpr"""		6528775	0		=			
ANR	6529013	Identifier	regtype		6528775	0					
ANR	6529014	PrimaryExpression	"""gpr"""		6528775	1					
ANR	6529015	ExpressionStatement	flagnum = r_list_length ( flags )	537:2:13268:13299	6528775	13	True				
ANR	6529016	AssignmentExpression	flagnum = r_list_length ( flags )		6528775	0		=			
ANR	6529017	Identifier	flagnum		6528775	0					
ANR	6529018	CallExpression	r_list_length ( flags )		6528775	1					
ANR	6529019	Callee	r_list_length		6528775	0					
ANR	6529020	Identifier	r_list_length		6528775	0					
ANR	6529021	ArgumentList	flags		6528775	1					
ANR	6529022	Argument	flags		6528775	0					
ANR	6529023	Identifier	flags		6528775	0					
ANR	6529024	IfStatement	"if ( ( tmp1 = strstr ( regstr , ""group="" ) ) )"		6528775	14					
ANR	6529025	Condition	"tmp1 = strstr ( regstr , ""group="" )"	538:6:13307:13340	6528775	0	True				
ANR	6529026	AssignmentExpression	"tmp1 = strstr ( regstr , ""group="" )"		6528775	0		=			
ANR	6529027	Identifier	tmp1		6528775	0					
ANR	6529028	CallExpression	"strstr ( regstr , ""group="" )"		6528775	1					
ANR	6529029	Callee	strstr		6528775	0					
ANR	6529030	Identifier	strstr		6528775	0					
ANR	6529031	ArgumentList	regstr		6528775	1					
ANR	6529032	Argument	regstr		6528775	0					
ANR	6529033	Identifier	regstr		6528775	0					
ANR	6529034	Argument	"""group="""		6528775	1					
ANR	6529035	PrimaryExpression	"""group="""		6528775	0					
ANR	6529036	CompoundStatement		46:42:1024:1024	6528775	1					
ANR	6529037	ExpressionStatement	tmp1 += 7	539:3:13348:13357	6528775	0	True				
ANR	6529038	AssignmentExpression	tmp1 += 7		6528775	0		+=			
ANR	6529039	Identifier	tmp1		6528775	0					
ANR	6529040	PrimaryExpression	7		6528775	1					
ANR	6529041	IfStatement	"if ( r_str_startswith ( tmp1 , ""float"" ) )"		6528775	1					
ANR	6529042	Condition	"r_str_startswith ( tmp1 , ""float"" )"	540:7:13366:13397	6528775	0	True				
ANR	6529043	CallExpression	"r_str_startswith ( tmp1 , ""float"" )"		6528775	0					
ANR	6529044	Callee	r_str_startswith		6528775	0					
ANR	6529045	Identifier	r_str_startswith		6528775	0					
ANR	6529046	ArgumentList	tmp1		6528775	1					
ANR	6529047	Argument	tmp1		6528775	0					
ANR	6529048	Identifier	tmp1		6528775	0					
ANR	6529049	Argument	"""float"""		6528775	1					
ANR	6529050	PrimaryExpression	"""float"""		6528775	0					
ANR	6529051	CompoundStatement		48:41:1081:1081	6528775	1					
ANR	6529052	ExpressionStatement	"regtype = ""fpu"""	541:4:13406:13421	6528775	0	True				
ANR	6529053	AssignmentExpression	"regtype = ""fpu"""		6528775	0		=			
ANR	6529054	Identifier	regtype		6528775	0					
ANR	6529055	PrimaryExpression	"""fpu"""		6528775	1					
ANR	6529056	ElseStatement	else		6528775	0					
ANR	6529057	IfStatement	"if ( ( tmp1 = strstr ( regstr , ""type="" ) ) )"		6528775	0					
ANR	6529058	Condition	"tmp1 = strstr ( regstr , ""type="" )"	544:13:13496:13528	6528775	0	True				
ANR	6529059	AssignmentExpression	"tmp1 = strstr ( regstr , ""type="" )"		6528775	0		=			
ANR	6529060	Identifier	tmp1		6528775	0					
ANR	6529061	CallExpression	"strstr ( regstr , ""type="" )"		6528775	1					
ANR	6529062	Callee	strstr		6528775	0					
ANR	6529063	Identifier	strstr		6528775	0					
ANR	6529064	ArgumentList	regstr		6528775	1					
ANR	6529065	Argument	regstr		6528775	0					
ANR	6529066	Identifier	regstr		6528775	0					
ANR	6529067	Argument	"""type="""		6528775	1					
ANR	6529068	PrimaryExpression	"""type="""		6528775	0					
ANR	6529069	CompoundStatement		52:48:1212:1212	6528775	1					
ANR	6529070	ExpressionStatement	tmp1 += 6	545:3:13536:13545	6528775	0	True				
ANR	6529071	AssignmentExpression	tmp1 += 6		6528775	0		+=			
ANR	6529072	Identifier	tmp1		6528775	0					
ANR	6529073	PrimaryExpression	6		6528775	1					
ANR	6529074	IfStatement	"if ( r_str_startswith ( tmp1 , ""vec"" ) || r_str_startswith ( tmp1 , ""i387_ext"" ) || r_str_startswith ( tmp1 , ""ieee_single"" ) || r_str_startswith ( tmp1 , ""ieee_double"" ) )"		6528775	1					
ANR	6529075	Condition	"r_str_startswith ( tmp1 , ""vec"" ) || r_str_startswith ( tmp1 , ""i387_ext"" ) || r_str_startswith ( tmp1 , ""ieee_single"" ) || r_str_startswith ( tmp1 , ""ieee_double"" )"	546:7:13554:13727	6528775	0	True				
ANR	6529076	OrExpression	"r_str_startswith ( tmp1 , ""vec"" ) || r_str_startswith ( tmp1 , ""i387_ext"" ) || r_str_startswith ( tmp1 , ""ieee_single"" ) || r_str_startswith ( tmp1 , ""ieee_double"" )"		6528775	0		||			
ANR	6529077	CallExpression	"r_str_startswith ( tmp1 , ""vec"" )"		6528775	0					
ANR	6529078	Callee	r_str_startswith		6528775	0					
ANR	6529079	Identifier	r_str_startswith		6528775	0					
ANR	6529080	ArgumentList	tmp1		6528775	1					
ANR	6529081	Argument	tmp1		6528775	0					
ANR	6529082	Identifier	tmp1		6528775	0					
ANR	6529083	Argument	"""vec"""		6528775	1					
ANR	6529084	PrimaryExpression	"""vec"""		6528775	0					
ANR	6529085	OrExpression	"r_str_startswith ( tmp1 , ""i387_ext"" ) || r_str_startswith ( tmp1 , ""ieee_single"" ) || r_str_startswith ( tmp1 , ""ieee_double"" )"		6528775	1		||			
ANR	6529086	CallExpression	"r_str_startswith ( tmp1 , ""i387_ext"" )"		6528775	0					
ANR	6529087	Callee	r_str_startswith		6528775	0					
ANR	6529088	Identifier	r_str_startswith		6528775	0					
ANR	6529089	ArgumentList	tmp1		6528775	1					
ANR	6529090	Argument	tmp1		6528775	0					
ANR	6529091	Identifier	tmp1		6528775	0					
ANR	6529092	Argument	"""i387_ext"""		6528775	1					
ANR	6529093	PrimaryExpression	"""i387_ext"""		6528775	0					
ANR	6529094	OrExpression	"r_str_startswith ( tmp1 , ""ieee_single"" ) || r_str_startswith ( tmp1 , ""ieee_double"" )"		6528775	1		||			
ANR	6529095	CallExpression	"r_str_startswith ( tmp1 , ""ieee_single"" )"		6528775	0					
ANR	6529096	Callee	r_str_startswith		6528775	0					
ANR	6529097	Identifier	r_str_startswith		6528775	0					
ANR	6529098	ArgumentList	tmp1		6528775	1					
ANR	6529099	Argument	tmp1		6528775	0					
ANR	6529100	Identifier	tmp1		6528775	0					
ANR	6529101	Argument	"""ieee_single"""		6528775	1					
ANR	6529102	PrimaryExpression	"""ieee_single"""		6528775	0					
ANR	6529103	CallExpression	"r_str_startswith ( tmp1 , ""ieee_double"" )"		6528775	1					
ANR	6529104	Callee	r_str_startswith		6528775	0					
ANR	6529105	Identifier	r_str_startswith		6528775	0					
ANR	6529106	ArgumentList	tmp1		6528775	1					
ANR	6529107	Argument	tmp1		6528775	0					
ANR	6529108	Identifier	tmp1		6528775	0					
ANR	6529109	Argument	"""ieee_double"""		6528775	1					
ANR	6529110	PrimaryExpression	"""ieee_double"""		6528775	0					
ANR	6529111	CompoundStatement		57:50:1411:1411	6528775	1					
ANR	6529112	ExpressionStatement	"regtype = ""fpu"""	550:4:13736:13751	6528775	0	True				
ANR	6529113	AssignmentExpression	"regtype = ""fpu"""		6528775	0		=			
ANR	6529114	Identifier	regtype		6528775	0					
ANR	6529115	PrimaryExpression	"""fpu"""		6528775	1					
ANR	6529116	ElseStatement	else		6528775	0					
ANR	6529117	IfStatement	"if ( r_str_startswith ( tmp1 , ""code_ptr"" ) )"		6528775	0					
ANR	6529118	Condition	"r_str_startswith ( tmp1 , ""code_ptr"" )"	551:14:13767:13801	6528775	0	True				
ANR	6529119	CallExpression	"r_str_startswith ( tmp1 , ""code_ptr"" )"		6528775	0					
ANR	6529120	Callee	r_str_startswith		6528775	0					
ANR	6529121	Identifier	r_str_startswith		6528775	0					
ANR	6529122	ArgumentList	tmp1		6528775	1					
ANR	6529123	Argument	tmp1		6528775	0					
ANR	6529124	Identifier	tmp1		6528775	0					
ANR	6529125	Argument	"""code_ptr"""		6528775	1					
ANR	6529126	PrimaryExpression	"""code_ptr"""		6528775	0					
ANR	6529127	CompoundStatement		59:51:1485:1485	6528775	1					
ANR	6529128	ExpressionStatement	"strcpy ( pc_alias , ""=PC\\t"" )"	552:4:13810:13835	6528775	0	True				
ANR	6529129	CallExpression	"strcpy ( pc_alias , ""=PC\\t"" )"		6528775	0					
ANR	6529130	Callee	strcpy		6528775	0					
ANR	6529131	Identifier	strcpy		6528775	0					
ANR	6529132	ArgumentList	pc_alias		6528775	1					
ANR	6529133	Argument	pc_alias		6528775	0					
ANR	6529134	Identifier	pc_alias		6528775	0					
ANR	6529135	Argument	"""=PC\\t"""		6528775	1					
ANR	6529136	PrimaryExpression	"""=PC\\t"""		6528775	0					
ANR	6529137	ExpressionStatement	"strncpy ( pc_alias + 4 , regname , regname_len )"	553:4:13841:13885	6528775	1	True				
ANR	6529138	CallExpression	"strncpy ( pc_alias + 4 , regname , regname_len )"		6528775	0					
ANR	6529139	Callee	strncpy		6528775	0					
ANR	6529140	Identifier	strncpy		6528775	0					
ANR	6529141	ArgumentList	pc_alias + 4		6528775	1					
ANR	6529142	Argument	pc_alias + 4		6528775	0					
ANR	6529143	AdditiveExpression	pc_alias + 4		6528775	0		+			
ANR	6529144	Identifier	pc_alias		6528775	0					
ANR	6529145	PrimaryExpression	4		6528775	1					
ANR	6529146	Argument	regname		6528775	1					
ANR	6529147	Identifier	regname		6528775	0					
ANR	6529148	Argument	regname_len		6528775	2					
ANR	6529149	Identifier	regname_len		6528775	0					
ANR	6529150	ExpressionStatement	"strcpy ( pc_alias + 4 + regname_len , ""\\n"" )"	554:4:13891:13932	6528775	2	True				
ANR	6529151	CallExpression	"strcpy ( pc_alias + 4 + regname_len , ""\\n"" )"		6528775	0					
ANR	6529152	Callee	strcpy		6528775	0					
ANR	6529153	Identifier	strcpy		6528775	0					
ANR	6529154	ArgumentList	pc_alias + 4 + regname_len		6528775	1					
ANR	6529155	Argument	pc_alias + 4 + regname_len		6528775	0					
ANR	6529156	AdditiveExpression	pc_alias + 4 + regname_len		6528775	0		+			
ANR	6529157	Identifier	pc_alias		6528775	0					
ANR	6529158	AdditiveExpression	4 + regname_len		6528775	1		+			
ANR	6529159	PrimaryExpression	4		6528775	0					
ANR	6529160	Identifier	regname_len		6528775	1					
ANR	6529161	Argument	"""\\n"""		6528775	1					
ANR	6529162	PrimaryExpression	"""\\n"""		6528775	0					
ANR	6529163	ElseStatement	else		6528775	0					
ANR	6529164	CompoundStatement		63:10:1625:1625	6528775	0					
ANR	6529165	ExpressionStatement	flagnum = 0	557:4:14008:14019	6528775	0	True				
ANR	6529166	AssignmentExpression	flagnum = 0		6528775	0		=			
ANR	6529167	Identifier	flagnum		6528775	0					
ANR	6529168	PrimaryExpression	0		6528775	1					
ANR	6529169	Statement	r_list_foreach	558:4:14025:14038	6528775	1	True				
ANR	6529170	Statement	(	558:19:14040:14040	6528775	2	True				
ANR	6529171	Statement	flags	558:20:14041:14045	6528775	3	True				
ANR	6529172	Statement	","	558:25:14046:14046	6528775	4	True				
ANR	6529173	Statement	iter	558:27:14048:14051	6528775	5	True				
ANR	6529174	Statement	","	558:31:14052:14052	6528775	6	True				
ANR	6529175	Statement	tmpflag	558:33:14054:14060	6528775	7	True				
ANR	6529176	Statement	)	558:40:14061:14061	6528775	8	True				
ANR	6529177	CompoundStatement		66:42:1744:1744	6528775	9					
ANR	6529178	IfStatement	"if ( r_str_startswith ( tmp1 , tmpflag -> type ) )"		6528775	0					
ANR	6529179	Condition	"r_str_startswith ( tmp1 , tmpflag -> type )"	559:9:14074:14111	6528775	0	True				
ANR	6529180	CallExpression	"r_str_startswith ( tmp1 , tmpflag -> type )"		6528775	0					
ANR	6529181	Callee	r_str_startswith		6528775	0					
ANR	6529182	Identifier	r_str_startswith		6528775	0					
ANR	6529183	ArgumentList	tmp1		6528775	1					
ANR	6529184	Argument	tmp1		6528775	0					
ANR	6529185	Identifier	tmp1		6528775	0					
ANR	6529186	Argument	tmpflag -> type		6528775	1					
ANR	6529187	PtrMemberAccess	tmpflag -> type		6528775	0					
ANR	6529188	Identifier	tmpflag		6528775	0					
ANR	6529189	Identifier	type		6528775	1					
ANR	6529190	CompoundStatement		67:49:1795:1795	6528775	1					
ANR	6529191	IfStatement	if ( tmpflag -> num_bits <= 64 )		6528775	0					
ANR	6529192	Condition	tmpflag -> num_bits <= 64	561:10:14149:14171	6528775	0	True				
ANR	6529193	RelationalExpression	tmpflag -> num_bits <= 64		6528775	0		<=			
ANR	6529194	PtrMemberAccess	tmpflag -> num_bits		6528775	0					
ANR	6529195	Identifier	tmpflag		6528775	0					
ANR	6529196	Identifier	num_bits		6528775	1					
ANR	6529197	PrimaryExpression	64		6528775	1					
ANR	6529198	CompoundStatement		69:35:1855:1855	6528775	1					
ANR	6529199	BreakStatement	break ;	562:7:14183:14188	6528775	0	True				
ANR	6529200	ExpressionStatement	flagnum ++	565:5:14210:14219	6528775	1	True				
ANR	6529201	PostIncDecOperationExpression	flagnum ++		6528775	0					
ANR	6529202	Identifier	flagnum		6528775	0					
ANR	6529203	IncDec	++		6528775	1					
ANR	6529204	IfStatement	"if ( ! ( tmpreg = calloc ( 1 , sizeof ( gdbr_xml_reg_t ) ) ) )"		6528775	15					
ANR	6529205	Condition	"! ( tmpreg = calloc ( 1 , sizeof ( gdbr_xml_reg_t ) ) )"	570:6:14297:14343	6528775	0	True				
ANR	6529206	UnaryOperationExpression	"! ( tmpreg = calloc ( 1 , sizeof ( gdbr_xml_reg_t ) ) )"		6528775	0					
ANR	6529207	UnaryOperator	!		6528775	0					
ANR	6529208	AssignmentExpression	"tmpreg = calloc ( 1 , sizeof ( gdbr_xml_reg_t ) )"		6528775	1		=			
ANR	6529209	Identifier	tmpreg		6528775	0					
ANR	6529210	CallExpression	"calloc ( 1 , sizeof ( gdbr_xml_reg_t ) )"		6528775	1					
ANR	6529211	Callee	calloc		6528775	0					
ANR	6529212	Identifier	calloc		6528775	0					
ANR	6529213	ArgumentList	1		6528775	1					
ANR	6529214	Argument	1		6528775	0					
ANR	6529215	PrimaryExpression	1		6528775	0					
ANR	6529216	Argument	sizeof ( gdbr_xml_reg_t )		6528775	1					
ANR	6529217	SizeofExpression	sizeof ( gdbr_xml_reg_t )		6528775	0					
ANR	6529218	Sizeof	sizeof		6528775	0					
ANR	6529219	SizeofOperand	gdbr_xml_reg_t		6528775	1					
ANR	6529220	CompoundStatement		78:55:2027:2027	6528775	1					
ANR	6529221	GotoStatement	goto exit_err ;	571:3:14351:14364	6528775	0	True				
ANR	6529222	Identifier	exit_err		6528775	0					
ANR	6529223	ExpressionStatement	regname [ regname_len ] = '\\0'	573:2:14372:14399	6528775	16	True				
ANR	6529224	AssignmentExpression	regname [ regname_len ] = '\\0'		6528775	0		=			
ANR	6529225	ArrayIndexing	regname [ regname_len ]		6528775	0					
ANR	6529226	Identifier	regname		6528775	0					
ANR	6529227	Identifier	regname_len		6528775	1					
ANR	6529228	PrimaryExpression	'\\0'		6528775	1					
ANR	6529229	IfStatement	if ( regname_len > sizeof ( tmpreg -> name ) - 1 )		6528775	17					
ANR	6529230	Condition	regname_len > sizeof ( tmpreg -> name ) - 1	574:6:14407:14445	6528775	0	True				
ANR	6529231	RelationalExpression	regname_len > sizeof ( tmpreg -> name ) - 1		6528775	0		>			
ANR	6529232	Identifier	regname_len		6528775	0					
ANR	6529233	AdditiveExpression	sizeof ( tmpreg -> name ) - 1		6528775	1		-			
ANR	6529234	SizeofExpression	sizeof ( tmpreg -> name )		6528775	0					
ANR	6529235	Sizeof	sizeof		6528775	0					
ANR	6529236	PtrMemberAccess	tmpreg -> name		6528775	1					
ANR	6529237	Identifier	tmpreg		6528775	0					
ANR	6529238	Identifier	name		6528775	1					
ANR	6529239	PrimaryExpression	1		6528775	1					
ANR	6529240	CompoundStatement		82:47:2129:2129	6528775	1					
ANR	6529241	ExpressionStatement	"eprintf ( ""Register name too long: %s\\n"" , regname )"	575:3:14453:14502	6528775	0	True				
ANR	6529242	CallExpression	"eprintf ( ""Register name too long: %s\\n"" , regname )"		6528775	0					
ANR	6529243	Callee	eprintf		6528775	0					
ANR	6529244	Identifier	eprintf		6528775	0					
ANR	6529245	ArgumentList	"""Register name too long: %s\\n"""		6528775	1					
ANR	6529246	Argument	"""Register name too long: %s\\n"""		6528775	0					
ANR	6529247	PrimaryExpression	"""Register name too long: %s\\n"""		6528775	0					
ANR	6529248	Argument	regname		6528775	1					
ANR	6529249	Identifier	regname		6528775	0					
ANR	6529250	ExpressionStatement	"strncpy ( tmpreg -> name , regname , sizeof ( tmpreg -> name ) - 1 )"	577:2:14510:14568	6528775	18	True				
ANR	6529251	CallExpression	"strncpy ( tmpreg -> name , regname , sizeof ( tmpreg -> name ) - 1 )"		6528775	0					
ANR	6529252	Callee	strncpy		6528775	0					
ANR	6529253	Identifier	strncpy		6528775	0					
ANR	6529254	ArgumentList	tmpreg -> name		6528775	1					
ANR	6529255	Argument	tmpreg -> name		6528775	0					
ANR	6529256	PtrMemberAccess	tmpreg -> name		6528775	0					
ANR	6529257	Identifier	tmpreg		6528775	0					
ANR	6529258	Identifier	name		6528775	1					
ANR	6529259	Argument	regname		6528775	1					
ANR	6529260	Identifier	regname		6528775	0					
ANR	6529261	Argument	sizeof ( tmpreg -> name ) - 1		6528775	2					
ANR	6529262	AdditiveExpression	sizeof ( tmpreg -> name ) - 1		6528775	0		-			
ANR	6529263	SizeofExpression	sizeof ( tmpreg -> name )		6528775	0					
ANR	6529264	Sizeof	sizeof		6528775	0					
ANR	6529265	PtrMemberAccess	tmpreg -> name		6528775	1					
ANR	6529266	Identifier	tmpreg		6528775	0					
ANR	6529267	Identifier	name		6528775	1					
ANR	6529268	PrimaryExpression	1		6528775	1					
ANR	6529269	ExpressionStatement	tmpreg -> name [ sizeof ( tmpreg -> name ) - 1 ] = '\\0'	578:2:14572:14618	6528775	19	True				
ANR	6529270	AssignmentExpression	tmpreg -> name [ sizeof ( tmpreg -> name ) - 1 ] = '\\0'		6528775	0		=			
ANR	6529271	ArrayIndexing	tmpreg -> name [ sizeof ( tmpreg -> name ) - 1 ]		6528775	0					
ANR	6529272	PtrMemberAccess	tmpreg -> name		6528775	0					
ANR	6529273	Identifier	tmpreg		6528775	0					
ANR	6529274	Identifier	name		6528775	1					
ANR	6529275	AdditiveExpression	sizeof ( tmpreg -> name ) - 1		6528775	1		-			
ANR	6529276	SizeofExpression	sizeof ( tmpreg -> name )		6528775	0					
ANR	6529277	Sizeof	sizeof		6528775	0					
ANR	6529278	PtrMemberAccess	tmpreg -> name		6528775	1					
ANR	6529279	Identifier	tmpreg		6528775	0					
ANR	6529280	Identifier	name		6528775	1					
ANR	6529281	PrimaryExpression	1		6528775	1					
ANR	6529282	PrimaryExpression	'\\0'		6528775	1					
ANR	6529283	ExpressionStatement	"regname [ regname_len ] = '""'"	579:2:14622:14648	6528775	20	True				
ANR	6529284	AssignmentExpression	"regname [ regname_len ] = '""'"		6528775	0		=			
ANR	6529285	ArrayIndexing	regname [ regname_len ]		6528775	0					
ANR	6529286	Identifier	regname		6528775	0					
ANR	6529287	Identifier	regname_len		6528775	1					
ANR	6529288	PrimaryExpression	"'""'"		6528775	1					
ANR	6529289	ExpressionStatement	"strncpy ( tmpreg -> type , regtype , sizeof ( tmpreg -> type ) - 1 )"	580:2:14652:14710	6528775	21	True				
ANR	6529290	CallExpression	"strncpy ( tmpreg -> type , regtype , sizeof ( tmpreg -> type ) - 1 )"		6528775	0					
ANR	6529291	Callee	strncpy		6528775	0					
ANR	6529292	Identifier	strncpy		6528775	0					
ANR	6529293	ArgumentList	tmpreg -> type		6528775	1					
ANR	6529294	Argument	tmpreg -> type		6528775	0					
ANR	6529295	PtrMemberAccess	tmpreg -> type		6528775	0					
ANR	6529296	Identifier	tmpreg		6528775	0					
ANR	6529297	Identifier	type		6528775	1					
ANR	6529298	Argument	regtype		6528775	1					
ANR	6529299	Identifier	regtype		6528775	0					
ANR	6529300	Argument	sizeof ( tmpreg -> type ) - 1		6528775	2					
ANR	6529301	AdditiveExpression	sizeof ( tmpreg -> type ) - 1		6528775	0		-			
ANR	6529302	SizeofExpression	sizeof ( tmpreg -> type )		6528775	0					
ANR	6529303	Sizeof	sizeof		6528775	0					
ANR	6529304	PtrMemberAccess	tmpreg -> type		6528775	1					
ANR	6529305	Identifier	tmpreg		6528775	0					
ANR	6529306	Identifier	type		6528775	1					
ANR	6529307	PrimaryExpression	1		6528775	1					
ANR	6529308	ExpressionStatement	tmpreg -> type [ sizeof ( tmpreg -> type ) - 1 ] = '\\0'	581:2:14714:14760	6528775	22	True				
ANR	6529309	AssignmentExpression	tmpreg -> type [ sizeof ( tmpreg -> type ) - 1 ] = '\\0'		6528775	0		=			
ANR	6529310	ArrayIndexing	tmpreg -> type [ sizeof ( tmpreg -> type ) - 1 ]		6528775	0					
ANR	6529311	PtrMemberAccess	tmpreg -> type		6528775	0					
ANR	6529312	Identifier	tmpreg		6528775	0					
ANR	6529313	Identifier	type		6528775	1					
ANR	6529314	AdditiveExpression	sizeof ( tmpreg -> type ) - 1		6528775	1		-			
ANR	6529315	SizeofExpression	sizeof ( tmpreg -> type )		6528775	0					
ANR	6529316	Sizeof	sizeof		6528775	0					
ANR	6529317	PtrMemberAccess	tmpreg -> type		6528775	1					
ANR	6529318	Identifier	tmpreg		6528775	0					
ANR	6529319	Identifier	type		6528775	1					
ANR	6529320	PrimaryExpression	1		6528775	1					
ANR	6529321	PrimaryExpression	'\\0'		6528775	1					
ANR	6529322	ExpressionStatement	tmpreg -> size = regsize / 8	582:2:14764:14790	6528775	23	True				
ANR	6529323	AssignmentExpression	tmpreg -> size = regsize / 8		6528775	0		=			
ANR	6529324	PtrMemberAccess	tmpreg -> size		6528775	0					
ANR	6529325	Identifier	tmpreg		6528775	0					
ANR	6529326	Identifier	size		6528775	1					
ANR	6529327	MultiplicativeExpression	regsize / 8		6528775	1		/			
ANR	6529328	Identifier	regsize		6528775	0					
ANR	6529329	PrimaryExpression	8		6528775	1					
ANR	6529330	ExpressionStatement	tmpreg -> flagnum = flagnum	583:2:14794:14819	6528775	24	True				
ANR	6529331	AssignmentExpression	tmpreg -> flagnum = flagnum		6528775	0		=			
ANR	6529332	PtrMemberAccess	tmpreg -> flagnum		6528775	0					
ANR	6529333	Identifier	tmpreg		6528775	0					
ANR	6529334	Identifier	flagnum		6528775	1					
ANR	6529335	Identifier	flagnum		6528775	1					
ANR	6529336	IfStatement	if ( regnum == UINT32_MAX )		6528775	25					
ANR	6529337	Condition	regnum == UINT32_MAX	584:6:14827:14846	6528775	0	True				
ANR	6529338	EqualityExpression	regnum == UINT32_MAX		6528775	0		==			
ANR	6529339	Identifier	regnum		6528775	0					
ANR	6529340	Identifier	UINT32_MAX		6528775	1					
ANR	6529341	CompoundStatement		92:28:2530:2530	6528775	1					
ANR	6529342	ExpressionStatement	"r_list_push ( regs , tmpreg )"	585:3:14854:14880	6528775	0	True				
ANR	6529343	CallExpression	"r_list_push ( regs , tmpreg )"		6528775	0					
ANR	6529344	Callee	r_list_push		6528775	0					
ANR	6529345	Identifier	r_list_push		6528775	0					
ANR	6529346	ArgumentList	regs		6528775	1					
ANR	6529347	Argument	regs		6528775	0					
ANR	6529348	Identifier	regs		6528775	0					
ANR	6529349	Argument	tmpreg		6528775	1					
ANR	6529350	Identifier	tmpreg		6528775	0					
ANR	6529351	ElseStatement	else		6528775	0					
ANR	6529352	IfStatement	if ( regnum >= r_list_length ( regs ) )		6528775	0					
ANR	6529353	Condition	regnum >= r_list_length ( regs )	586:13:14895:14924	6528775	0	True				
ANR	6529354	RelationalExpression	regnum >= r_list_length ( regs )		6528775	0		>=			
ANR	6529355	Identifier	regnum		6528775	0					
ANR	6529356	CallExpression	r_list_length ( regs )		6528775	1					
ANR	6529357	Callee	r_list_length		6528775	0					
ANR	6529358	Identifier	r_list_length		6528775	0					
ANR	6529359	ArgumentList	regs		6528775	1					
ANR	6529360	Argument	regs		6528775	0					
ANR	6529361	Identifier	regs		6528775	0					
ANR	6529362	CompoundStatement		95:3:2613:2618	6528775	1					
ANR	6529363	IdentifierDeclStatement	int i ;	587:3:14932:14937	6528775	0	True				
ANR	6529364	IdentifierDecl	i		6528775	0					
ANR	6529365	IdentifierDeclType	int		6528775	0					
ANR	6529366	Identifier	i		6528775	1					
ANR	6529367	ForStatement	for ( i = regnum - r_list_length ( regs ) ; i > 0 ; i -- )		6528775	1					
ANR	6529368	ForInit	i = regnum - r_list_length ( regs ) ;	588:8:14947:14980	6528775	0	True				
ANR	6529369	AssignmentExpression	i = regnum - r_list_length ( regs )		6528775	0		=			
ANR	6529370	Identifier	i		6528775	0					
ANR	6529371	AdditiveExpression	regnum - r_list_length ( regs )		6528775	1		-			
ANR	6529372	Identifier	regnum		6528775	0					
ANR	6529373	CallExpression	r_list_length ( regs )		6528775	1					
ANR	6529374	Callee	r_list_length		6528775	0					
ANR	6529375	Identifier	r_list_length		6528775	0					
ANR	6529376	ArgumentList	regs		6528775	1					
ANR	6529377	Argument	regs		6528775	0					
ANR	6529378	Identifier	regs		6528775	0					
ANR	6529379	Condition	i > 0	588:43:14982:14986	6528775	1	True				
ANR	6529380	RelationalExpression	i > 0		6528775	0		>			
ANR	6529381	Identifier	i		6528775	0					
ANR	6529382	PrimaryExpression	0		6528775	1					
ANR	6529383	PostIncDecOperationExpression	i --	588:50:14989:14991	6528775	2	True				
ANR	6529384	Identifier	i		6528775	0					
ANR	6529385	IncDec	--		6528775	1					
ANR	6529386	CompoundStatement		96:55:2675:2675	6528775	3					
ANR	6529387	ExpressionStatement	"r_list_push ( regs , tmpreg )"	590:4:15089:15115	6528775	0	True				
ANR	6529388	CallExpression	"r_list_push ( regs , tmpreg )"		6528775	0					
ANR	6529389	Callee	r_list_push		6528775	0					
ANR	6529390	Identifier	r_list_push		6528775	0					
ANR	6529391	ArgumentList	regs		6528775	1					
ANR	6529392	Argument	regs		6528775	0					
ANR	6529393	Identifier	regs		6528775	0					
ANR	6529394	Argument	tmpreg		6528775	1					
ANR	6529395	Identifier	tmpreg		6528775	0					
ANR	6529396	ExpressionStatement	r_list_tail ( regs ) -> data = NULL	591:4:15121:15152	6528775	1	True				
ANR	6529397	AssignmentExpression	r_list_tail ( regs ) -> data = NULL		6528775	0		=			
ANR	6529398	PtrMemberAccess	r_list_tail ( regs ) -> data		6528775	0					
ANR	6529399	CallExpression	r_list_tail ( regs )		6528775	0					
ANR	6529400	Callee	r_list_tail		6528775	0					
ANR	6529401	Identifier	r_list_tail		6528775	0					
ANR	6529402	ArgumentList	regs		6528775	1					
ANR	6529403	Argument	regs		6528775	0					
ANR	6529404	Identifier	regs		6528775	0					
ANR	6529405	Identifier	data		6528775	1					
ANR	6529406	Identifier	NULL		6528775	1					
ANR	6529407	ExpressionStatement	"r_list_push ( regs , tmpreg )"	593:3:15162:15188	6528775	2	True				
ANR	6529408	CallExpression	"r_list_push ( regs , tmpreg )"		6528775	0					
ANR	6529409	Callee	r_list_push		6528775	0					
ANR	6529410	Identifier	r_list_push		6528775	0					
ANR	6529411	ArgumentList	regs		6528775	1					
ANR	6529412	Argument	regs		6528775	0					
ANR	6529413	Identifier	regs		6528775	0					
ANR	6529414	Argument	tmpreg		6528775	1					
ANR	6529415	Identifier	tmpreg		6528775	0					
ANR	6529416	ElseStatement	else		6528775	0					
ANR	6529417	CompoundStatement		102:9:2880:2880	6528775	0					
ANR	6529418	ExpressionStatement	"r_list_set_n ( regs , regnum , tmpreg )"	596:3:15258:15293	6528775	0	True				
ANR	6529419	CallExpression	"r_list_set_n ( regs , regnum , tmpreg )"		6528775	0					
ANR	6529420	Callee	r_list_set_n		6528775	0					
ANR	6529421	Identifier	r_list_set_n		6528775	0					
ANR	6529422	ArgumentList	regs		6528775	1					
ANR	6529423	Argument	regs		6528775	0					
ANR	6529424	Identifier	regs		6528775	0					
ANR	6529425	Argument	regnum		6528775	1					
ANR	6529426	Identifier	regnum		6528775	0					
ANR	6529427	Argument	tmpreg		6528775	2					
ANR	6529428	Identifier	tmpreg		6528775	0					
ANR	6529429	ExpressionStatement	* regstr_end = '/'	598:2:15301:15318	6528775	26	True				
ANR	6529430	AssignmentExpression	* regstr_end = '/'		6528775	0		=			
ANR	6529431	UnaryOperationExpression	* regstr_end		6528775	0					
ANR	6529432	UnaryOperator	*		6528775	0					
ANR	6529433	Identifier	regstr_end		6528775	1					
ANR	6529434	PrimaryExpression	'/'		6528775	1					
ANR	6529435	ExpressionStatement	regstr = regstr_end + 2	599:2:15322:15345	6528775	27	True				
ANR	6529436	AssignmentExpression	regstr = regstr_end + 2		6528775	0		=			
ANR	6529437	Identifier	regstr		6528775	0					
ANR	6529438	AdditiveExpression	regstr_end + 2		6528775	1		+			
ANR	6529439	Identifier	regstr_end		6528775	0					
ANR	6529440	PrimaryExpression	2		6528775	1					
ANR	6529441	ExpressionStatement	regs -> free = free	601:1:15351:15368	6528775	8	True				
ANR	6529442	AssignmentExpression	regs -> free = free		6528775	0		=			
ANR	6529443	PtrMemberAccess	regs -> free		6528775	0					
ANR	6529444	Identifier	regs		6528775	0					
ANR	6529445	Identifier	free		6528775	1					
ANR	6529446	Identifier	free		6528775	1					
ANR	6529447	ReturnStatement	return regs ;	602:1:15371:15382	6528775	9	True				
ANR	6529448	Identifier	regs		6528775	0					
ANR	6529449	Label	exit_err :	603:0:15384:15392	6528775	10	True				
ANR	6529450	Identifier	exit_err		6528775	0					
ANR	6529451	IfStatement	if ( regs )		6528775	11					
ANR	6529452	Condition	regs	604:5:15399:15402	6528775	0	True				
ANR	6529453	Identifier	regs		6528775	0					
ANR	6529454	CompoundStatement		112:11:3086:3086	6528775	1					
ANR	6529455	ExpressionStatement	regs -> free = free	605:2:15409:15426	6528775	0	True				
ANR	6529456	AssignmentExpression	regs -> free = free		6528775	0		=			
ANR	6529457	PtrMemberAccess	regs -> free		6528775	0					
ANR	6529458	Identifier	regs		6528775	0					
ANR	6529459	Identifier	free		6528775	1					
ANR	6529460	Identifier	free		6528775	1					
ANR	6529461	ExpressionStatement	r_list_free ( regs )	606:2:15430:15448	6528775	1	True				
ANR	6529462	CallExpression	r_list_free ( regs )		6528775	0					
ANR	6529463	Callee	r_list_free		6528775	0					
ANR	6529464	Identifier	r_list_free		6528775	0					
ANR	6529465	ArgumentList	regs		6528775	1					
ANR	6529466	Argument	regs		6528775	0					
ANR	6529467	Identifier	regs		6528775	0					
ANR	6529468	ReturnStatement	return NULL ;	608:1:15454:15465	6528775	12	True				
ANR	6529469	Identifier	NULL		6528775	0					
ANR	6529470	ReturnType	static RList *		6528775	1					
ANR	6529471	Identifier	_extract_regs		6528775	2					
ANR	6529472	ParameterList	"char * regstr , RList * flags , char * pc_alias"		6528775	3					
ANR	6529473	Parameter	char * regstr	493:28:12274:12285	6528775	0	True				
ANR	6529474	ParameterType	char *		6528775	0					
ANR	6529475	Identifier	regstr		6528775	1					
ANR	6529476	Parameter	RList * flags	493:42:12288:12299	6528775	1	True				
ANR	6529477	ParameterType	RList *		6528775	0					
ANR	6529478	Identifier	flags		6528775	1					
ANR	6529479	Parameter	char * pc_alias	493:56:12302:12315	6528775	2	True				
ANR	6529480	ParameterType	char *		6528775	0					
ANR	6529481	Identifier	pc_alias		6528775	1					
ANR	6529482	CFGEntryNode	ENTRY		6528775		True				
ANR	6529483	CFGExitNode	EXIT		6528775		True				
ANR	6529484	Symbol	* tmpflag		6528775						
ANR	6529485	Symbol	regs -> free		6528775						
ANR	6529486	Symbol	flags		6528775						
ANR	6529487	Symbol	strchr		6528775						
ANR	6529488	Symbol	tmpreg -> flagnum		6528775						
ANR	6529489	Symbol	calloc		6528775						
ANR	6529490	Symbol	tmp1		6528775						
ANR	6529491	Symbol	* tmpreg		6528775						
ANR	6529492	Symbol	regtype		6528775						
ANR	6529493	Symbol	flagnum		6528775						
ANR	6529494	Symbol	regsize		6528775						
ANR	6529495	Symbol	* tmp1		6528775						
ANR	6529496	Symbol	regstr		6528775						
ANR	6529497	Symbol	strtoul		6528775						
ANR	6529498	Symbol	* r_list_tail		6528775						
ANR	6529499	Symbol	* tmpreg -> name		6528775						
ANR	6529500	Symbol	free		6528775						
ANR	6529501	Symbol	isdigit		6528775						
ANR	6529502	Symbol	tmpflag -> type		6528775						
ANR	6529503	Symbol	r_str_startswith		6528775						
ANR	6529504	Symbol	regname		6528775						
ANR	6529505	Symbol	NULL		6528775						
ANR	6529506	Symbol	tmpflag -> num_bits		6528775						
ANR	6529507	Symbol	regstr_end		6528775						
ANR	6529508	Symbol	regname_len		6528775						
ANR	6529509	Symbol	r_list_tail		6528775						
ANR	6529510	Symbol	* tmpreg -> type		6528775						
ANR	6529511	Symbol	iter		6528775						
ANR	6529512	Symbol	i		6528775						
ANR	6529513	Symbol	regs		6528775						
ANR	6529514	Symbol	tmpreg -> name		6528775						
ANR	6529515	Symbol	tmpflag		6528775						
ANR	6529516	Symbol	r_list_tail ( regs ) -> data		6528775						
ANR	6529517	Symbol	* * tmpreg		6528775						
ANR	6529518	Symbol	tmpreg -> size		6528775						
ANR	6529519	Symbol	strstr		6528775						
ANR	6529520	Symbol	* regstr_end		6528775						
ANR	6529521	Symbol	pc_alias		6528775						
ANR	6529522	Symbol	* regs		6528775						
ANR	6529523	Symbol	* regname		6528775						
ANR	6529524	Symbol	* regname_len		6528775						
ANR	6529525	Symbol	tmpreg -> type		6528775						
ANR	6529526	Symbol	regnum		6528775						
ANR	6529527	Symbol	tmpreg		6528775						
ANR	6529528	Symbol	r_list_length		6528775						
ANR	6529529	Symbol	r_list_new		6528775						
ANR	6529530	Symbol	UINT32_MAX		6528775						
