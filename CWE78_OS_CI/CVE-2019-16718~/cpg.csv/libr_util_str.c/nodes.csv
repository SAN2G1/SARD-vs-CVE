command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5219851	File	data/converged/CVE-2019-16718~_radare2/libr_util_str.c								
ANR	5219852	DeclStmt									
ANR	5219853	Decl							const char	const char *	nullstr
ANR	5219854	DeclStmt									
ANR	5219855	Decl							const char	const char *	nullstr_c
ANR	5219856	DeclStmt									
ANR	5219857	Decl							const char	const char * [ ]	rwxstr
ANR	5219858	Function	r_str_casecmp	36:0:591:733							
ANR	5219859	FunctionDef	"r_str_casecmp (const char * s1 , const char * s2)"		5219858	0					
ANR	5219860	CompoundStatement		36:56:647:733	5219858	0					
ANR	5219861	ReturnStatement	"return stricmp ( s1 , s2 ) ;"	38:1:666:689	5219858	0	True				
ANR	5219862	CallExpression	"stricmp ( s1 , s2 )"		5219858	0					
ANR	5219863	Callee	stricmp		5219858	0					
ANR	5219864	Identifier	stricmp		5219858	0					
ANR	5219865	ArgumentList	s1		5219858	1					
ANR	5219866	Argument	s1		5219858	0					
ANR	5219867	Identifier	s1		5219858	0					
ANR	5219868	Argument	s2		5219858	1					
ANR	5219869	Identifier	s2		5219858	0					
ANR	5219870	ReturnType	R_API int		5219858	1					
ANR	5219871	Identifier	r_str_casecmp		5219858	2					
ANR	5219872	ParameterList	"const char * s1 , const char * s2"		5219858	3					
ANR	5219873	Parameter	const char * s1	36:24:615:628	5219858	0	True				
ANR	5219874	ParameterType	const char *		5219858	0					
ANR	5219875	Identifier	s1		5219858	1					
ANR	5219876	Parameter	const char * s2	36:40:631:644	5219858	1	True				
ANR	5219877	ParameterType	const char *		5219858	0					
ANR	5219878	Identifier	s2		5219858	1					
ANR	5219879	CFGEntryNode	ENTRY		5219858		True				
ANR	5219880	CFGExitNode	EXIT		5219858		True				
ANR	5219881	Symbol	stricmp		5219858						
ANR	5219882	Symbol	s1		5219858						
ANR	5219883	Symbol	s2		5219858						
ANR	5219884	Function	r_str_ncasecmp	44:0:736:898							
ANR	5219885	FunctionDef	"r_str_ncasecmp (const char * s1 , const char * s2 , size_t n)"		5219884	0					
ANR	5219886	CompoundStatement		44:67:803:898	5219884	0					
ANR	5219887	ReturnStatement	"return _strnicmp ( s1 , s2 , n ) ;"	46:1:822:850	5219884	0	True				
ANR	5219888	CallExpression	"_strnicmp ( s1 , s2 , n )"		5219884	0					
ANR	5219889	Callee	_strnicmp		5219884	0					
ANR	5219890	Identifier	_strnicmp		5219884	0					
ANR	5219891	ArgumentList	s1		5219884	1					
ANR	5219892	Argument	s1		5219884	0					
ANR	5219893	Identifier	s1		5219884	0					
ANR	5219894	Argument	s2		5219884	1					
ANR	5219895	Identifier	s2		5219884	0					
ANR	5219896	Argument	n		5219884	2					
ANR	5219897	Identifier	n		5219884	0					
ANR	5219898	ReturnType	R_API int		5219884	1					
ANR	5219899	Identifier	r_str_ncasecmp		5219884	2					
ANR	5219900	ParameterList	"const char * s1 , const char * s2 , size_t n"		5219884	3					
ANR	5219901	Parameter	const char * s1	44:25:761:774	5219884	0	True				
ANR	5219902	ParameterType	const char *		5219884	0					
ANR	5219903	Identifier	s1		5219884	1					
ANR	5219904	Parameter	const char * s2	44:41:777:790	5219884	1	True				
ANR	5219905	ParameterType	const char *		5219884	0					
ANR	5219906	Identifier	s2		5219884	1					
ANR	5219907	Parameter	size_t n	44:57:793:800	5219884	2	True				
ANR	5219908	ParameterType	size_t		5219884	0					
ANR	5219909	Identifier	n		5219884	1					
ANR	5219910	CFGEntryNode	ENTRY		5219884		True				
ANR	5219911	CFGExitNode	EXIT		5219884		True				
ANR	5219912	Symbol	s1		5219884						
ANR	5219913	Symbol	n		5219884						
ANR	5219914	Symbol	s2		5219884						
ANR	5219915	Symbol	_strnicmp		5219884						
ANR	5219916	Function	r_str_replace_ch	54:0:990:1333							
ANR	5219917	FunctionDef	"r_str_replace_ch (char * s , char a , char b , bool global)"		5219916	0					
ANR	5219918	CompoundStatement		54:65:1055:1333	5219916	0					
ANR	5219919	IdentifierDeclStatement	int ret = 0 ;	55:1:1058:1069	5219916	0	True				
ANR	5219920	IdentifierDecl	ret = 0		5219916	0					
ANR	5219921	IdentifierDeclType	int		5219916	0					
ANR	5219922	Identifier	ret		5219916	1					
ANR	5219923	AssignmentExpression	ret = 0		5219916	2		=			
ANR	5219924	Identifier	ret		5219916	0					
ANR	5219925	PrimaryExpression	0		5219916	1					
ANR	5219926	IdentifierDeclStatement	char * o = s ;	56:1:1072:1083	5219916	1	True				
ANR	5219927	IdentifierDecl	* o = s		5219916	0					
ANR	5219928	IdentifierDeclType	char *		5219916	0					
ANR	5219929	Identifier	o		5219916	1					
ANR	5219930	AssignmentExpression	* o = s		5219916	2		=			
ANR	5219931	Identifier	s		5219916	0					
ANR	5219932	Identifier	s		5219916	1					
ANR	5219933	IfStatement	if ( ! s || a == b )		5219916	2					
ANR	5219934	Condition	! s || a == b	57:5:1090:1101	5219916	0	True				
ANR	5219935	OrExpression	! s || a == b		5219916	0		||			
ANR	5219936	UnaryOperationExpression	! s		5219916	0					
ANR	5219937	UnaryOperator	!		5219916	0					
ANR	5219938	Identifier	s		5219916	1					
ANR	5219939	EqualityExpression	a == b		5219916	1		==			
ANR	5219940	Identifier	a		5219916	0					
ANR	5219941	Identifier	b		5219916	1					
ANR	5219942	CompoundStatement		4:19:48:48	5219916	1					
ANR	5219943	ReturnStatement	return 0 ;	58:2:1108:1116	5219916	0	True				
ANR	5219944	PrimaryExpression	0		5219916	0					
ANR	5219945	ForStatement	"for ( ; * o ; s ++ , o ++ )"		5219916	3					
ANR	5219946	Condition	* o	60:8:1129:1130	5219916	0	True				
ANR	5219947	UnaryOperationExpression	* o		5219916	0					
ANR	5219948	UnaryOperator	*		5219916	0					
ANR	5219949	Identifier	o		5219916	1					
ANR	5219950	Expression	"s ++ , o ++"	60:12:1133:1140	5219916	1	True				
ANR	5219951	PostIncDecOperationExpression	s ++		5219916	0					
ANR	5219952	Identifier	s		5219916	0					
ANR	5219953	IncDec	++		5219916	1					
ANR	5219954	PostIncDecOperationExpression	o ++		5219916	1					
ANR	5219955	Identifier	o		5219916	0					
ANR	5219956	IncDec	++		5219916	1					
ANR	5219957	CompoundStatement		7:22:87:87	5219916	2					
ANR	5219958	IfStatement	if ( * o == a )		5219916	0					
ANR	5219959	Condition	* o == a	61:6:1151:1157	5219916	0	True				
ANR	5219960	EqualityExpression	* o == a		5219916	0		==			
ANR	5219961	UnaryOperationExpression	* o		5219916	0					
ANR	5219962	UnaryOperator	*		5219916	0					
ANR	5219963	Identifier	o		5219916	1					
ANR	5219964	Identifier	a		5219916	1					
ANR	5219965	CompoundStatement		8:15:104:104	5219916	1					
ANR	5219966	ExpressionStatement	ret ++	62:3:1165:1170	5219916	0	True				
ANR	5219967	PostIncDecOperationExpression	ret ++		5219916	0					
ANR	5219968	Identifier	ret		5219916	0					
ANR	5219969	IncDec	++		5219916	1					
ANR	5219970	IfStatement	if ( b )		5219916	1					
ANR	5219971	Condition	b	63:7:1179:1179	5219916	0	True				
ANR	5219972	Identifier	b		5219916	0					
ANR	5219973	CompoundStatement		10:10:126:126	5219916	1					
ANR	5219974	ExpressionStatement	* s = b	64:4:1188:1194	5219916	0	True				
ANR	5219975	AssignmentExpression	* s = b		5219916	0		=			
ANR	5219976	UnaryOperationExpression	* s		5219916	0					
ANR	5219977	UnaryOperator	*		5219916	0					
ANR	5219978	Identifier	s		5219916	1					
ANR	5219979	Identifier	b		5219916	1					
ANR	5219980	ElseStatement	else		5219916	0					
ANR	5219981	CompoundStatement		12:10:150:150	5219916	0					
ANR	5219982	ExpressionStatement	s --	67:4:1234:1237	5219916	0	True				
ANR	5219983	PostIncDecOperationExpression	s --		5219916	0					
ANR	5219984	Identifier	s		5219916	0					
ANR	5219985	IncDec	--		5219916	1					
ANR	5219986	IfStatement	if ( ! global )		5219916	2					
ANR	5219987	Condition	! global	69:7:1251:1257	5219916	0	True				
ANR	5219988	UnaryOperationExpression	! global		5219916	0					
ANR	5219989	UnaryOperator	!		5219916	0					
ANR	5219990	Identifier	global		5219916	1					
ANR	5219991	CompoundStatement		16:16:204:204	5219916	1					
ANR	5219992	ReturnStatement	return 1 ;	70:4:1266:1274	5219916	0	True				
ANR	5219993	PrimaryExpression	1		5219916	0					
ANR	5219994	ElseStatement	else		5219916	0					
ANR	5219995	CompoundStatement		19:9:234:234	5219916	0					
ANR	5219996	ExpressionStatement	* s = * o	73:3:1295:1302	5219916	0	True				
ANR	5219997	AssignmentExpression	* s = * o		5219916	0		=			
ANR	5219998	UnaryOperationExpression	* s		5219916	0					
ANR	5219999	UnaryOperator	*		5219916	0					
ANR	5220000	Identifier	s		5219916	1					
ANR	5220001	UnaryOperationExpression	* o		5219916	1					
ANR	5220002	UnaryOperator	*		5219916	0					
ANR	5220003	Identifier	o		5219916	1					
ANR	5220004	ExpressionStatement	* s = 0	76:1:1312:1318	5219916	4	True				
ANR	5220005	AssignmentExpression	* s = 0		5219916	0		=			
ANR	5220006	UnaryOperationExpression	* s		5219916	0					
ANR	5220007	UnaryOperator	*		5219916	0					
ANR	5220008	Identifier	s		5219916	1					
ANR	5220009	PrimaryExpression	0		5219916	1					
ANR	5220010	ReturnStatement	return ret ;	77:1:1321:1331	5219916	5	True				
ANR	5220011	Identifier	ret		5219916	0					
ANR	5220012	ReturnType	R_API int		5219916	1					
ANR	5220013	Identifier	r_str_replace_ch		5219916	2					
ANR	5220014	ParameterList	"char * s , char a , char b , bool global"		5219916	3					
ANR	5220015	Parameter	char * s	54:27:1017:1023	5219916	0	True				
ANR	5220016	ParameterType	char *		5219916	0					
ANR	5220017	Identifier	s		5219916	1					
ANR	5220018	Parameter	char a	54:36:1026:1031	5219916	1	True				
ANR	5220019	ParameterType	char		5219916	0					
ANR	5220020	Identifier	a		5219916	1					
ANR	5220021	Parameter	char b	54:44:1034:1039	5219916	2	True				
ANR	5220022	ParameterType	char		5219916	0					
ANR	5220023	Identifier	b		5219916	1					
ANR	5220024	Parameter	bool global	54:52:1042:1052	5219916	3	True				
ANR	5220025	ParameterType	bool		5219916	0					
ANR	5220026	Identifier	global		5219916	1					
ANR	5220027	CFGEntryNode	ENTRY		5219916		True				
ANR	5220028	CFGExitNode	EXIT		5219916		True				
ANR	5220029	Symbol	ret		5219916						
ANR	5220030	Symbol	a		5219916						
ANR	5220031	Symbol	b		5219916						
ANR	5220032	Symbol	s		5219916						
ANR	5220033	Symbol	* o		5219916						
ANR	5220034	Symbol	global		5219916						
ANR	5220035	Symbol	* s		5219916						
ANR	5220036	Symbol	o		5219916						
ANR	5220037	Function	r_str_replace_char_once	81:0:1350:1603							
ANR	5220038	FunctionDef	"r_str_replace_char_once (char * s , int a , int b)"		5220037	0					
ANR	5220039	CompoundStatement		81:57:1407:1603	5220037	0					
ANR	5220040	IdentifierDeclStatement	int ret = 0 ;	82:1:1410:1421	5220037	0	True				
ANR	5220041	IdentifierDecl	ret = 0		5220037	0					
ANR	5220042	IdentifierDeclType	int		5220037	0					
ANR	5220043	Identifier	ret		5220037	1					
ANR	5220044	AssignmentExpression	ret = 0		5220037	2		=			
ANR	5220045	Identifier	ret		5220037	0					
ANR	5220046	PrimaryExpression	0		5220037	1					
ANR	5220047	IdentifierDeclStatement	char * o = s ;	83:1:1424:1435	5220037	1	True				
ANR	5220048	IdentifierDecl	* o = s		5220037	0					
ANR	5220049	IdentifierDeclType	char *		5220037	0					
ANR	5220050	Identifier	o		5220037	1					
ANR	5220051	AssignmentExpression	* o = s		5220037	2		=			
ANR	5220052	Identifier	s		5220037	0					
ANR	5220053	Identifier	s		5220037	1					
ANR	5220054	IfStatement	if ( a == b )		5220037	2					
ANR	5220055	Condition	a == b	84:5:1442:1447	5220037	0	True				
ANR	5220056	EqualityExpression	a == b		5220037	0		==			
ANR	5220057	Identifier	a		5220037	0					
ANR	5220058	Identifier	b		5220037	1					
ANR	5220059	CompoundStatement		4:13:42:42	5220037	1					
ANR	5220060	ReturnStatement	return 0 ;	85:2:1454:1462	5220037	0	True				
ANR	5220061	PrimaryExpression	0		5220037	0					
ANR	5220062	ForStatement	"for ( ; * o ; s ++ , o ++ )"		5220037	3					
ANR	5220063	Condition	* o	87:8:1475:1476	5220037	0	True				
ANR	5220064	UnaryOperationExpression	* o		5220037	0					
ANR	5220065	UnaryOperator	*		5220037	0					
ANR	5220066	Identifier	o		5220037	1					
ANR	5220067	Expression	"s ++ , o ++"	87:12:1479:1486	5220037	1	True				
ANR	5220068	PostIncDecOperationExpression	s ++		5220037	0					
ANR	5220069	Identifier	s		5220037	0					
ANR	5220070	IncDec	++		5220037	1					
ANR	5220071	PostIncDecOperationExpression	o ++		5220037	1					
ANR	5220072	Identifier	o		5220037	0					
ANR	5220073	IncDec	++		5220037	1					
ANR	5220074	CompoundStatement		7:22:81:81	5220037	2					
ANR	5220075	IfStatement	if ( * o == a )		5220037	0					
ANR	5220076	Condition	* o == a	88:6:1497:1503	5220037	0	True				
ANR	5220077	EqualityExpression	* o == a		5220037	0		==			
ANR	5220078	UnaryOperationExpression	* o		5220037	0					
ANR	5220079	UnaryOperator	*		5220037	0					
ANR	5220080	Identifier	o		5220037	1					
ANR	5220081	Identifier	a		5220037	1					
ANR	5220082	CompoundStatement		8:15:98:98	5220037	1					
ANR	5220083	IfStatement	if ( b )		5220037	0					
ANR	5220084	Condition	b	89:7:1515:1515	5220037	0	True				
ANR	5220085	Identifier	b		5220037	0					
ANR	5220086	CompoundStatement		9:10:110:110	5220037	1					
ANR	5220087	ExpressionStatement	* s = b	90:4:1524:1530	5220037	0	True				
ANR	5220088	AssignmentExpression	* s = b		5220037	0		=			
ANR	5220089	UnaryOperationExpression	* s		5220037	0					
ANR	5220090	UnaryOperator	*		5220037	0					
ANR	5220091	Identifier	s		5220037	1					
ANR	5220092	Identifier	b		5220037	1					
ANR	5220093	ReturnStatement	return ++ ret ;	91:4:1536:1548	5220037	1	True				
ANR	5220094	UnaryExpression	++ ret		5220037	0					
ANR	5220095	IncDec	++		5220037	0					
ANR	5220096	Identifier	ret		5220037	1					
ANR	5220097	ExpressionStatement	o ++	93:3:1558:1561	5220037	1	True				
ANR	5220098	PostIncDecOperationExpression	o ++		5220037	0					
ANR	5220099	Identifier	o		5220037	0					
ANR	5220100	IncDec	++		5220037	1					
ANR	5220101	ExpressionStatement	* s = * o	95:2:1569:1576	5220037	1	True				
ANR	5220102	AssignmentExpression	* s = * o		5220037	0		=			
ANR	5220103	UnaryOperationExpression	* s		5220037	0					
ANR	5220104	UnaryOperator	*		5220037	0					
ANR	5220105	Identifier	s		5220037	1					
ANR	5220106	UnaryOperationExpression	* o		5220037	1					
ANR	5220107	UnaryOperator	*		5220037	0					
ANR	5220108	Identifier	o		5220037	1					
ANR	5220109	ExpressionStatement	* s = 0	97:1:1582:1588	5220037	4	True				
ANR	5220110	AssignmentExpression	* s = 0		5220037	0		=			
ANR	5220111	UnaryOperationExpression	* s		5220037	0					
ANR	5220112	UnaryOperator	*		5220037	0					
ANR	5220113	Identifier	s		5220037	1					
ANR	5220114	PrimaryExpression	0		5220037	1					
ANR	5220115	ReturnStatement	return ret ;	98:1:1591:1601	5220037	5	True				
ANR	5220116	Identifier	ret		5220037	0					
ANR	5220117	ReturnType	R_API int		5220037	1					
ANR	5220118	Identifier	r_str_replace_char_once		5220037	2					
ANR	5220119	ParameterList	"char * s , int a , int b"		5220037	3					
ANR	5220120	Parameter	char * s	81:34:1384:1390	5220037	0	True				
ANR	5220121	ParameterType	char *		5220037	0					
ANR	5220122	Identifier	s		5220037	1					
ANR	5220123	Parameter	int a	81:43:1393:1397	5220037	1	True				
ANR	5220124	ParameterType	int		5220037	0					
ANR	5220125	Identifier	a		5220037	1					
ANR	5220126	Parameter	int b	81:50:1400:1404	5220037	2	True				
ANR	5220127	ParameterType	int		5220037	0					
ANR	5220128	Identifier	b		5220037	1					
ANR	5220129	CFGEntryNode	ENTRY		5220037		True				
ANR	5220130	CFGExitNode	EXIT		5220037		True				
ANR	5220131	Symbol	ret		5220037						
ANR	5220132	Symbol	a		5220037						
ANR	5220133	Symbol	b		5220037						
ANR	5220134	Symbol	s		5220037						
ANR	5220135	Symbol	* o		5220037						
ANR	5220136	Symbol	* s		5220037						
ANR	5220137	Symbol	o		5220037						
ANR	5220138	Function	r_str_replace_char	102:0:1620:1913							
ANR	5220139	FunctionDef	"r_str_replace_char (char * s , int a , int b)"		5220138	0					
ANR	5220140	CompoundStatement		102:52:1672:1913	5220138	0					
ANR	5220141	IdentifierDeclStatement	int ret = 0 ;	103:1:1675:1686	5220138	0	True				
ANR	5220142	IdentifierDecl	ret = 0		5220138	0					
ANR	5220143	IdentifierDeclType	int		5220138	0					
ANR	5220144	Identifier	ret		5220138	1					
ANR	5220145	AssignmentExpression	ret = 0		5220138	2		=			
ANR	5220146	Identifier	ret		5220138	0					
ANR	5220147	PrimaryExpression	0		5220138	1					
ANR	5220148	IdentifierDeclStatement	char * o = s ;	104:1:1689:1700	5220138	1	True				
ANR	5220149	IdentifierDecl	* o = s		5220138	0					
ANR	5220150	IdentifierDeclType	char *		5220138	0					
ANR	5220151	Identifier	o		5220138	1					
ANR	5220152	AssignmentExpression	* o = s		5220138	2		=			
ANR	5220153	Identifier	s		5220138	0					
ANR	5220154	Identifier	s		5220138	1					
ANR	5220155	IfStatement	if ( ! s || a == b )		5220138	2					
ANR	5220156	Condition	! s || a == b	105:5:1707:1718	5220138	0	True				
ANR	5220157	OrExpression	! s || a == b		5220138	0		||			
ANR	5220158	UnaryOperationExpression	! s		5220138	0					
ANR	5220159	UnaryOperator	!		5220138	0					
ANR	5220160	Identifier	s		5220138	1					
ANR	5220161	EqualityExpression	a == b		5220138	1		==			
ANR	5220162	Identifier	a		5220138	0					
ANR	5220163	Identifier	b		5220138	1					
ANR	5220164	CompoundStatement		4:19:48:48	5220138	1					
ANR	5220165	ReturnStatement	return 0 ;	106:2:1725:1733	5220138	0	True				
ANR	5220166	PrimaryExpression	0		5220138	0					
ANR	5220167	ForStatement	"for ( ; * o ; s ++ , o ++ )"		5220138	3					
ANR	5220168	Condition	* o	108:8:1746:1747	5220138	0	True				
ANR	5220169	UnaryOperationExpression	* o		5220138	0					
ANR	5220170	UnaryOperator	*		5220138	0					
ANR	5220171	Identifier	o		5220138	1					
ANR	5220172	Expression	"s ++ , o ++"	108:12:1750:1757	5220138	1	True				
ANR	5220173	PostIncDecOperationExpression	s ++		5220138	0					
ANR	5220174	Identifier	s		5220138	0					
ANR	5220175	IncDec	++		5220138	1					
ANR	5220176	PostIncDecOperationExpression	o ++		5220138	1					
ANR	5220177	Identifier	o		5220138	0					
ANR	5220178	IncDec	++		5220138	1					
ANR	5220179	CompoundStatement		7:22:87:87	5220138	2					
ANR	5220180	IfStatement	if ( * o == a )		5220138	0					
ANR	5220181	Condition	* o == a	109:6:1768:1774	5220138	0	True				
ANR	5220182	EqualityExpression	* o == a		5220138	0		==			
ANR	5220183	UnaryOperationExpression	* o		5220138	0					
ANR	5220184	UnaryOperator	*		5220138	0					
ANR	5220185	Identifier	o		5220138	1					
ANR	5220186	Identifier	a		5220138	1					
ANR	5220187	CompoundStatement		8:15:104:104	5220138	1					
ANR	5220188	ExpressionStatement	ret ++	110:3:1782:1787	5220138	0	True				
ANR	5220189	PostIncDecOperationExpression	ret ++		5220138	0					
ANR	5220190	Identifier	ret		5220138	0					
ANR	5220191	IncDec	++		5220138	1					
ANR	5220192	IfStatement	if ( b )		5220138	1					
ANR	5220193	Condition	b	111:7:1796:1796	5220138	0	True				
ANR	5220194	Identifier	b		5220138	0					
ANR	5220195	CompoundStatement		10:10:126:126	5220138	1					
ANR	5220196	ExpressionStatement	* s = b	112:4:1805:1811	5220138	0	True				
ANR	5220197	AssignmentExpression	* s = b		5220138	0		=			
ANR	5220198	UnaryOperationExpression	* s		5220138	0					
ANR	5220199	UnaryOperator	*		5220138	0					
ANR	5220200	Identifier	s		5220138	1					
ANR	5220201	Identifier	b		5220138	1					
ANR	5220202	ElseStatement	else		5220138	0					
ANR	5220203	CompoundStatement		12:10:150:150	5220138	0					
ANR	5220204	ExpressionStatement	s --	115:4:1851:1854	5220138	0	True				
ANR	5220205	PostIncDecOperationExpression	s --		5220138	0					
ANR	5220206	Identifier	s		5220138	0					
ANR	5220207	IncDec	--		5220138	1					
ANR	5220208	ElseStatement	else		5220138	0					
ANR	5220209	CompoundStatement		16:9:197:197	5220138	0					
ANR	5220210	ExpressionStatement	* s = * o	118:3:1875:1882	5220138	0	True				
ANR	5220211	AssignmentExpression	* s = * o		5220138	0		=			
ANR	5220212	UnaryOperationExpression	* s		5220138	0					
ANR	5220213	UnaryOperator	*		5220138	0					
ANR	5220214	Identifier	s		5220138	1					
ANR	5220215	UnaryOperationExpression	* o		5220138	1					
ANR	5220216	UnaryOperator	*		5220138	0					
ANR	5220217	Identifier	o		5220138	1					
ANR	5220218	ExpressionStatement	* s = 0	121:1:1892:1898	5220138	4	True				
ANR	5220219	AssignmentExpression	* s = 0		5220138	0		=			
ANR	5220220	UnaryOperationExpression	* s		5220138	0					
ANR	5220221	UnaryOperator	*		5220138	0					
ANR	5220222	Identifier	s		5220138	1					
ANR	5220223	PrimaryExpression	0		5220138	1					
ANR	5220224	ReturnStatement	return ret ;	122:1:1901:1911	5220138	5	True				
ANR	5220225	Identifier	ret		5220138	0					
ANR	5220226	ReturnType	R_API int		5220138	1					
ANR	5220227	Identifier	r_str_replace_char		5220138	2					
ANR	5220228	ParameterList	"char * s , int a , int b"		5220138	3					
ANR	5220229	Parameter	char * s	102:29:1649:1655	5220138	0	True				
ANR	5220230	ParameterType	char *		5220138	0					
ANR	5220231	Identifier	s		5220138	1					
ANR	5220232	Parameter	int a	102:38:1658:1662	5220138	1	True				
ANR	5220233	ParameterType	int		5220138	0					
ANR	5220234	Identifier	a		5220138	1					
ANR	5220235	Parameter	int b	102:45:1665:1669	5220138	2	True				
ANR	5220236	ParameterType	int		5220138	0					
ANR	5220237	Identifier	b		5220138	1					
ANR	5220238	CFGEntryNode	ENTRY		5220138		True				
ANR	5220239	CFGExitNode	EXIT		5220138		True				
ANR	5220240	Symbol	ret		5220138						
ANR	5220241	Symbol	a		5220138						
ANR	5220242	Symbol	b		5220138						
ANR	5220243	Symbol	s		5220138						
ANR	5220244	Symbol	* o		5220138						
ANR	5220245	Symbol	* s		5220138						
ANR	5220246	Symbol	o		5220138						
ANR	5220247	Function	r_str_reverse	125:0:1916:2110							
ANR	5220248	FunctionDef	r_str_reverse (char * str)		5220247	0					
ANR	5220249	CompoundStatement		125:36:1952:2110	5220247	0					
ANR	5220250	IdentifierDeclStatement	"int i , len = strlen ( str ) ;"	126:1:1955:1980	5220247	0	True				
ANR	5220251	IdentifierDecl	i		5220247	0					
ANR	5220252	IdentifierDeclType	int		5220247	0					
ANR	5220253	Identifier	i		5220247	1					
ANR	5220254	IdentifierDecl	len = strlen ( str )		5220247	1					
ANR	5220255	IdentifierDeclType	int		5220247	0					
ANR	5220256	Identifier	len		5220247	1					
ANR	5220257	AssignmentExpression	len = strlen ( str )		5220247	2		=			
ANR	5220258	Identifier	len		5220247	0					
ANR	5220259	CallExpression	strlen ( str )		5220247	1					
ANR	5220260	Callee	strlen		5220247	0					
ANR	5220261	Identifier	strlen		5220247	0					
ANR	5220262	ArgumentList	str		5220247	1					
ANR	5220263	Argument	str		5220247	0					
ANR	5220264	Identifier	str		5220247	0					
ANR	5220265	IdentifierDeclStatement	int half = len / 2 ;	127:1:1983:2001	5220247	1	True				
ANR	5220266	IdentifierDecl	half = len / 2		5220247	0					
ANR	5220267	IdentifierDeclType	int		5220247	0					
ANR	5220268	Identifier	half		5220247	1					
ANR	5220269	AssignmentExpression	half = len / 2		5220247	2		=			
ANR	5220270	Identifier	half		5220247	0					
ANR	5220271	MultiplicativeExpression	len / 2		5220247	1		/			
ANR	5220272	Identifier	len		5220247	0					
ANR	5220273	PrimaryExpression	2		5220247	1					
ANR	5220274	ForStatement	for ( i = 0 ; i < half ; i ++ )		5220247	2					
ANR	5220275	ForInit	i = 0 ;	128:6:2009:2014	5220247	0	True				
ANR	5220276	AssignmentExpression	i = 0		5220247	0		=			
ANR	5220277	Identifier	i		5220247	0					
ANR	5220278	PrimaryExpression	0		5220247	1					
ANR	5220279	Condition	i < half	128:13:2016:2023	5220247	1	True				
ANR	5220280	RelationalExpression	i < half		5220247	0		<			
ANR	5220281	Identifier	i		5220247	0					
ANR	5220282	Identifier	half		5220247	1					
ANR	5220283	PostIncDecOperationExpression	i ++	128:23:2026:2028	5220247	2	True				
ANR	5220284	Identifier	i		5220247	0					
ANR	5220285	IncDec	++		5220247	1					
ANR	5220286	CompoundStatement		5:2:82:98	5220247	3					
ANR	5220287	IdentifierDeclStatement	char ch = str [ i ] ;	129:2:2035:2051	5220247	0	True				
ANR	5220288	IdentifierDecl	ch = str [ i ]		5220247	0					
ANR	5220289	IdentifierDeclType	char		5220247	0					
ANR	5220290	Identifier	ch		5220247	1					
ANR	5220291	AssignmentExpression	ch = str [ i ]		5220247	2		=			
ANR	5220292	Identifier	ch		5220247	0					
ANR	5220293	ArrayIndexing	str [ i ]		5220247	1					
ANR	5220294	Identifier	str		5220247	0					
ANR	5220295	Identifier	i		5220247	1					
ANR	5220296	ExpressionStatement	str [ i ] = str [ len - i - 1 ]	130:2:2055:2080	5220247	1	True				
ANR	5220297	AssignmentExpression	str [ i ] = str [ len - i - 1 ]		5220247	0		=			
ANR	5220298	ArrayIndexing	str [ i ]		5220247	0					
ANR	5220299	Identifier	str		5220247	0					
ANR	5220300	Identifier	i		5220247	1					
ANR	5220301	ArrayIndexing	str [ len - i - 1 ]		5220247	1					
ANR	5220302	Identifier	str		5220247	0					
ANR	5220303	AdditiveExpression	len - i - 1		5220247	1		-			
ANR	5220304	Identifier	len		5220247	0					
ANR	5220305	AdditiveExpression	i - 1		5220247	1		-			
ANR	5220306	Identifier	i		5220247	0					
ANR	5220307	PrimaryExpression	1		5220247	1					
ANR	5220308	ExpressionStatement	str [ len - i - 1 ] = ch	131:2:2084:2105	5220247	2	True				
ANR	5220309	AssignmentExpression	str [ len - i - 1 ] = ch		5220247	0		=			
ANR	5220310	ArrayIndexing	str [ len - i - 1 ]		5220247	0					
ANR	5220311	Identifier	str		5220247	0					
ANR	5220312	AdditiveExpression	len - i - 1		5220247	1		-			
ANR	5220313	Identifier	len		5220247	0					
ANR	5220314	AdditiveExpression	i - 1		5220247	1		-			
ANR	5220315	Identifier	i		5220247	0					
ANR	5220316	PrimaryExpression	1		5220247	1					
ANR	5220317	Identifier	ch		5220247	1					
ANR	5220318	ReturnType	R_API void		5220247	1					
ANR	5220319	Identifier	r_str_reverse		5220247	2					
ANR	5220320	ParameterList	char * str		5220247	3					
ANR	5220321	Parameter	char * str	125:25:1941:1949	5220247	0	True				
ANR	5220322	ParameterType	char *		5220247	0					
ANR	5220323	Identifier	str		5220247	1					
ANR	5220324	CFGEntryNode	ENTRY		5220247		True				
ANR	5220325	CFGExitNode	EXIT		5220247		True				
ANR	5220326	Symbol	str		5220247						
ANR	5220327	Symbol	strlen		5220247						
ANR	5220328	Symbol	half		5220247						
ANR	5220329	Symbol	* i		5220247						
ANR	5220330	Symbol	len		5220247						
ANR	5220331	Symbol	ch		5220247						
ANR	5220332	Symbol	i		5220247						
ANR	5220333	Symbol	* str		5220247						
ANR	5220334	Symbol	* len		5220247						
ANR	5220335	Function	r_str_bits	137:0:2253:2726							
ANR	5220336	FunctionDef	"r_str_bits (char * strout , const ut8 * buf , int len , const char * bitz)"		5220335	0					
ANR	5220337	CompoundStatement		137:78:2331:2726	5220335	0					
ANR	5220338	IdentifierDeclStatement	"int i , j , idx ;"	138:1:2334:2347	5220335	0	True				
ANR	5220339	IdentifierDecl	i		5220335	0					
ANR	5220340	IdentifierDeclType	int		5220335	0					
ANR	5220341	Identifier	i		5220335	1					
ANR	5220342	IdentifierDecl	j		5220335	1					
ANR	5220343	IdentifierDeclType	int		5220335	0					
ANR	5220344	Identifier	j		5220335	1					
ANR	5220345	IdentifierDecl	idx		5220335	2					
ANR	5220346	IdentifierDeclType	int		5220335	0					
ANR	5220347	Identifier	idx		5220335	1					
ANR	5220348	IfStatement	if ( bitz )		5220335	1					
ANR	5220349	Condition	bitz	139:5:2354:2357	5220335	0	True				
ANR	5220350	Identifier	bitz		5220335	0					
ANR	5220351	CompoundStatement		3:11:28:28	5220335	1					
ANR	5220352	ForStatement	for ( i = j = 0 ; i < len && ( ! bitz || bitz [ i ] ) ; i ++ )		5220335	0					
ANR	5220353	ForInit	i = j = 0 ;	140:7:2369:2378	5220335	0	True				
ANR	5220354	AssignmentExpression	i = j = 0		5220335	0		=			
ANR	5220355	Identifier	i		5220335	0					
ANR	5220356	AssignmentExpression	j = 0		5220335	1		=			
ANR	5220357	Identifier	j		5220335	0					
ANR	5220358	PrimaryExpression	0		5220335	1					
ANR	5220359	Condition	i < len && ( ! bitz || bitz [ i ] )	140:18:2380:2404	5220335	1	True				
ANR	5220360	AndExpression	i < len && ( ! bitz || bitz [ i ] )		5220335	0		&&			
ANR	5220361	RelationalExpression	i < len		5220335	0		<			
ANR	5220362	Identifier	i		5220335	0					
ANR	5220363	Identifier	len		5220335	1					
ANR	5220364	OrExpression	! bitz || bitz [ i ]		5220335	1		||			
ANR	5220365	UnaryOperationExpression	! bitz		5220335	0					
ANR	5220366	UnaryOperator	!		5220335	0					
ANR	5220367	Identifier	bitz		5220335	1					
ANR	5220368	ArrayIndexing	bitz [ i ]		5220335	1					
ANR	5220369	Identifier	bitz		5220335	0					
ANR	5220370	Identifier	i		5220335	1					
ANR	5220371	PostIncDecOperationExpression	i ++	140:45:2407:2409	5220335	2	True				
ANR	5220372	Identifier	i		5220335	0					
ANR	5220373	IncDec	++		5220335	1					
ANR	5220374	CompoundStatement		4:50:80:80	5220335	3					
ANR	5220375	IfStatement	if ( i > 0 && ( i % 8 ) == 0 )		5220335	0					
ANR	5220376	Condition	i > 0 && ( i % 8 ) == 0	141:7:2421:2441	5220335	0	True				
ANR	5220377	AndExpression	i > 0 && ( i % 8 ) == 0		5220335	0		&&			
ANR	5220378	RelationalExpression	i > 0		5220335	0		>			
ANR	5220379	Identifier	i		5220335	0					
ANR	5220380	PrimaryExpression	0		5220335	1					
ANR	5220381	EqualityExpression	( i % 8 ) == 0		5220335	1		==			
ANR	5220382	MultiplicativeExpression	i % 8		5220335	0		%			
ANR	5220383	Identifier	i		5220335	0					
ANR	5220384	PrimaryExpression	8		5220335	1					
ANR	5220385	PrimaryExpression	0		5220335	1					
ANR	5220386	CompoundStatement		5:30:112:112	5220335	1					
ANR	5220387	ExpressionStatement	buf ++	142:4:2450:2455	5220335	0	True				
ANR	5220388	PostIncDecOperationExpression	buf ++		5220335	0					
ANR	5220389	Identifier	buf		5220335	0					
ANR	5220390	IncDec	++		5220335	1					
ANR	5220391	IfStatement	if ( * buf & ( 1 << ( i % 8 ) ) )		5220335	1					
ANR	5220392	Condition	* buf & ( 1 << ( i % 8 ) )	144:7:2469:2489	5220335	0	True				
ANR	5220393	BitAndExpression	* buf & ( 1 << ( i % 8 ) )		5220335	0		&			
ANR	5220394	UnaryOperationExpression	* buf		5220335	0					
ANR	5220395	UnaryOperator	*		5220335	0					
ANR	5220396	Identifier	buf		5220335	1					
ANR	5220397	ShiftExpression	1 << ( i % 8 )		5220335	1		<<			
ANR	5220398	PrimaryExpression	1		5220335	0					
ANR	5220399	MultiplicativeExpression	i % 8		5220335	1		%			
ANR	5220400	Identifier	i		5220335	0					
ANR	5220401	PrimaryExpression	8		5220335	1					
ANR	5220402	CompoundStatement		8:30:160:160	5220335	1					
ANR	5220403	ExpressionStatement	strout [ j ++ ] = toupper ( ( const ut8 ) bitz [ i ] )	145:4:2498:2540	5220335	0	True				
ANR	5220404	AssignmentExpression	strout [ j ++ ] = toupper ( ( const ut8 ) bitz [ i ] )		5220335	0		=			
ANR	5220405	ArrayIndexing	strout [ j ++ ]		5220335	0					
ANR	5220406	Identifier	strout		5220335	0					
ANR	5220407	PostIncDecOperationExpression	j ++		5220335	1					
ANR	5220408	Identifier	j		5220335	0					
ANR	5220409	IncDec	++		5220335	1					
ANR	5220410	CallExpression	toupper ( ( const ut8 ) bitz [ i ] )		5220335	1					
ANR	5220411	Callee	toupper		5220335	0					
ANR	5220412	Identifier	toupper		5220335	0					
ANR	5220413	ArgumentList	( const ut8 ) bitz [ i ]		5220335	1					
ANR	5220414	Argument	( const ut8 ) bitz [ i ]		5220335	0					
ANR	5220415	CastExpression	( const ut8 ) bitz [ i ]		5220335	0					
ANR	5220416	CastTarget	const ut8		5220335	0					
ANR	5220417	ArrayIndexing	bitz [ i ]		5220335	1					
ANR	5220418	Identifier	bitz		5220335	0					
ANR	5220419	Identifier	i		5220335	1					
ANR	5220420	ElseStatement	else		5220335	0					
ANR	5220421	CompoundStatement		12:8:227:227	5220335	0					
ANR	5220422	ForStatement	for ( i = j = 0 ; i < len ; i ++ )		5220335	0					
ANR	5220423	ForInit	i = j = 0 ;	149:7:2568:2577	5220335	0	True				
ANR	5220424	AssignmentExpression	i = j = 0		5220335	0		=			
ANR	5220425	Identifier	i		5220335	0					
ANR	5220426	AssignmentExpression	j = 0		5220335	1		=			
ANR	5220427	Identifier	j		5220335	0					
ANR	5220428	PrimaryExpression	0		5220335	1					
ANR	5220429	Condition	i < len	149:18:2579:2585	5220335	1	True				
ANR	5220430	RelationalExpression	i < len		5220335	0		<			
ANR	5220431	Identifier	i		5220335	0					
ANR	5220432	Identifier	len		5220335	1					
ANR	5220433	PostIncDecOperationExpression	i ++	149:27:2588:2590	5220335	2	True				
ANR	5220434	Identifier	i		5220335	0					
ANR	5220435	IncDec	++		5220335	1					
ANR	5220436	CompoundStatement		15:3:284:305	5220335	3					
ANR	5220437	ExpressionStatement	idx = ( i / 8 )	150:3:2598:2611	5220335	0	True				
ANR	5220438	AssignmentExpression	idx = ( i / 8 )		5220335	0		=			
ANR	5220439	Identifier	idx		5220335	0					
ANR	5220440	MultiplicativeExpression	i / 8		5220335	1		/			
ANR	5220441	Identifier	i		5220335	0					
ANR	5220442	PrimaryExpression	8		5220335	1					
ANR	5220443	IdentifierDeclStatement	int bit = 7 - ( i % 8 ) ;	151:3:2616:2637	5220335	1	True				
ANR	5220444	IdentifierDecl	bit = 7 - ( i % 8 )		5220335	0					
ANR	5220445	IdentifierDeclType	int		5220335	0					
ANR	5220446	Identifier	bit		5220335	1					
ANR	5220447	AssignmentExpression	bit = 7 - ( i % 8 )		5220335	2		=			
ANR	5220448	Identifier	bit		5220335	0					
ANR	5220449	AdditiveExpression	7 - ( i % 8 )		5220335	1		-			
ANR	5220450	PrimaryExpression	7		5220335	0					
ANR	5220451	MultiplicativeExpression	i % 8		5220335	1		%			
ANR	5220452	Identifier	i		5220335	0					
ANR	5220453	PrimaryExpression	8		5220335	1					
ANR	5220454	ExpressionStatement	strout [ j ++ ] = ( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'	152:3:2642:2690	5220335	2	True				
ANR	5220455	AssignmentExpression	strout [ j ++ ] = ( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'		5220335	0		=			
ANR	5220456	ArrayIndexing	strout [ j ++ ]		5220335	0					
ANR	5220457	Identifier	strout		5220335	0					
ANR	5220458	PostIncDecOperationExpression	j ++		5220335	1					
ANR	5220459	Identifier	j		5220335	0					
ANR	5220460	IncDec	++		5220335	1					
ANR	5220461	ConditionalExpression	( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'		5220335	1					
ANR	5220462	Condition	buf [ idx ] & ( 1 << bit )		5220335	0					
ANR	5220463	BitAndExpression	buf [ idx ] & ( 1 << bit )		5220335	0		&			
ANR	5220464	ArrayIndexing	buf [ idx ]		5220335	0					
ANR	5220465	Identifier	buf		5220335	0					
ANR	5220466	Identifier	idx		5220335	1					
ANR	5220467	ShiftExpression	1 << bit		5220335	1		<<			
ANR	5220468	PrimaryExpression	1		5220335	0					
ANR	5220469	Identifier	bit		5220335	1					
ANR	5220470	PrimaryExpression	'1'		5220335	1					
ANR	5220471	PrimaryExpression	'0'		5220335	2					
ANR	5220472	ExpressionStatement	strout [ j ] = 0	155:1:2700:2713	5220335	2	True				
ANR	5220473	AssignmentExpression	strout [ j ] = 0		5220335	0		=			
ANR	5220474	ArrayIndexing	strout [ j ]		5220335	0					
ANR	5220475	Identifier	strout		5220335	0					
ANR	5220476	Identifier	j		5220335	1					
ANR	5220477	PrimaryExpression	0		5220335	1					
ANR	5220478	ReturnStatement	return j ;	156:1:2716:2724	5220335	3	True				
ANR	5220479	Identifier	j		5220335	0					
ANR	5220480	ReturnType	R_API int		5220335	1					
ANR	5220481	Identifier	r_str_bits		5220335	2					
ANR	5220482	ParameterList	"char * strout , const ut8 * buf , int len , const char * bitz"		5220335	3					
ANR	5220483	Parameter	char * strout	137:21:2274:2285	5220335	0	True				
ANR	5220484	ParameterType	char *		5220335	0					
ANR	5220485	Identifier	strout		5220335	1					
ANR	5220486	Parameter	const ut8 * buf	137:35:2288:2301	5220335	1	True				
ANR	5220487	ParameterType	const ut8 *		5220335	0					
ANR	5220488	Identifier	buf		5220335	1					
ANR	5220489	Parameter	int len	137:51:2304:2310	5220335	2	True				
ANR	5220490	ParameterType	int		5220335	0					
ANR	5220491	Identifier	len		5220335	1					
ANR	5220492	Parameter	const char * bitz	137:60:2313:2328	5220335	3	True				
ANR	5220493	ParameterType	const char *		5220335	0					
ANR	5220494	Identifier	bitz		5220335	1					
ANR	5220495	CFGEntryNode	ENTRY		5220335		True				
ANR	5220496	CFGExitNode	EXIT		5220335		True				
ANR	5220497	Symbol	* buf		5220335						
ANR	5220498	Symbol	bitz		5220335						
ANR	5220499	Symbol	toupper		5220335						
ANR	5220500	Symbol	strout		5220335						
ANR	5220501	Symbol	i		5220335						
ANR	5220502	Symbol	j		5220335						
ANR	5220503	Symbol	bit		5220335						
ANR	5220504	Symbol	buf		5220335						
ANR	5220505	Symbol	* i		5220335						
ANR	5220506	Symbol	len		5220335						
ANR	5220507	Symbol	* j		5220335						
ANR	5220508	Symbol	* idx		5220335						
ANR	5220509	Symbol	idx		5220335						
ANR	5220510	Symbol	* strout		5220335						
ANR	5220511	Symbol	* bitz		5220335						
ANR	5220512	Function	trimbits	162:0:2916:3118							
ANR	5220513	FunctionDef	trimbits (char * b)		5220512	0					
ANR	5220514	CompoundStatement		162:30:2946:3118	5220512	0					
ANR	5220515	IdentifierDeclStatement	const int len = strlen ( b ) ;	163:1:2949:2975	5220512	0	True				
ANR	5220516	IdentifierDecl	len = strlen ( b )		5220512	0					
ANR	5220517	IdentifierDeclType	const int		5220512	0					
ANR	5220518	Identifier	len		5220512	1					
ANR	5220519	AssignmentExpression	len = strlen ( b )		5220512	2		=			
ANR	5220520	Identifier	len		5220512	0					
ANR	5220521	CallExpression	strlen ( b )		5220512	1					
ANR	5220522	Callee	strlen		5220512	0					
ANR	5220523	Identifier	strlen		5220512	0					
ANR	5220524	ArgumentList	b		5220512	1					
ANR	5220525	Argument	b		5220512	0					
ANR	5220526	Identifier	b		5220512	0					
ANR	5220527	IdentifierDeclStatement	"char * one = strchr ( b , '1' ) ;"	164:1:2978:3005	5220512	1	True				
ANR	5220528	IdentifierDecl	"* one = strchr ( b , '1' )"		5220512	0					
ANR	5220529	IdentifierDeclType	char *		5220512	0					
ANR	5220530	Identifier	one		5220512	1					
ANR	5220531	AssignmentExpression	"* one = strchr ( b , '1' )"		5220512	2		=			
ANR	5220532	Identifier	one		5220512	0					
ANR	5220533	CallExpression	"strchr ( b , '1' )"		5220512	1					
ANR	5220534	Callee	strchr		5220512	0					
ANR	5220535	Identifier	strchr		5220512	0					
ANR	5220536	ArgumentList	b		5220512	1					
ANR	5220537	Argument	b		5220512	0					
ANR	5220538	Identifier	b		5220512	0					
ANR	5220539	Argument	'1'		5220512	1					
ANR	5220540	PrimaryExpression	'1'		5220512	0					
ANR	5220541	IdentifierDeclStatement	int pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1 ;	165:1:3008:3056	5220512	2	True				
ANR	5220542	IdentifierDecl	pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1		5220512	0					
ANR	5220543	IdentifierDeclType	int		5220512	0					
ANR	5220544	Identifier	pos		5220512	1					
ANR	5220545	AssignmentExpression	pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1		5220512	2		=			
ANR	5220546	Identifier	pos		5220512	0					
ANR	5220547	ConditionalExpression	one ? ( int ) ( size_t ) ( one - b ) : len - 1		5220512	1					
ANR	5220548	Condition	one		5220512	0					
ANR	5220549	Identifier	one		5220512	0					
ANR	5220550	CastExpression	( int ) ( size_t ) ( one - b )		5220512	1					
ANR	5220551	CastTarget	int		5220512	0					
ANR	5220552	CastExpression	( size_t ) ( one - b )		5220512	1					
ANR	5220553	CastTarget	size_t		5220512	0					
ANR	5220554	AdditiveExpression	one - b		5220512	1		-			
ANR	5220555	Identifier	one		5220512	0					
ANR	5220556	Identifier	b		5220512	1					
ANR	5220557	AdditiveExpression	len - 1		5220512	2		-			
ANR	5220558	Identifier	len		5220512	0					
ANR	5220559	PrimaryExpression	1		5220512	1					
ANR	5220560	ExpressionStatement	pos = ( pos / 8 ) * 8	166:1:3059:3078	5220512	3	True				
ANR	5220561	AssignmentExpression	pos = ( pos / 8 ) * 8		5220512	0		=			
ANR	5220562	Identifier	pos		5220512	0					
ANR	5220563	MultiplicativeExpression	( pos / 8 ) * 8		5220512	1		*			
ANR	5220564	MultiplicativeExpression	pos / 8		5220512	0		/			
ANR	5220565	Identifier	pos		5220512	0					
ANR	5220566	PrimaryExpression	8		5220512	1					
ANR	5220567	PrimaryExpression	8		5220512	1					
ANR	5220568	ExpressionStatement	"memmove ( b , b + pos , len - pos + 1 )"	167:1:3081:3116	5220512	4	True				
ANR	5220569	CallExpression	"memmove ( b , b + pos , len - pos + 1 )"		5220512	0					
ANR	5220570	Callee	memmove		5220512	0					
ANR	5220571	Identifier	memmove		5220512	0					
ANR	5220572	ArgumentList	b		5220512	1					
ANR	5220573	Argument	b		5220512	0					
ANR	5220574	Identifier	b		5220512	0					
ANR	5220575	Argument	b + pos		5220512	1					
ANR	5220576	AdditiveExpression	b + pos		5220512	0		+			
ANR	5220577	Identifier	b		5220512	0					
ANR	5220578	Identifier	pos		5220512	1					
ANR	5220579	Argument	len - pos + 1		5220512	2					
ANR	5220580	AdditiveExpression	len - pos + 1		5220512	0		-			
ANR	5220581	Identifier	len		5220512	0					
ANR	5220582	AdditiveExpression	pos + 1		5220512	1		+			
ANR	5220583	Identifier	pos		5220512	0					
ANR	5220584	PrimaryExpression	1		5220512	1					
ANR	5220585	ReturnType	static void		5220512	1					
ANR	5220586	Identifier	trimbits		5220512	2					
ANR	5220587	ParameterList	char * b		5220512	3					
ANR	5220588	Parameter	char * b	162:21:2937:2943	5220512	0	True				
ANR	5220589	ParameterType	char *		5220512	0					
ANR	5220590	Identifier	b		5220512	1					
ANR	5220591	CFGEntryNode	ENTRY		5220512		True				
ANR	5220592	CFGExitNode	EXIT		5220512		True				
ANR	5220593	Symbol	strlen		5220512						
ANR	5220594	Symbol	b		5220512						
ANR	5220595	Symbol	len		5220512						
ANR	5220596	Symbol	pos		5220512						
ANR	5220597	Symbol	one		5220512						
ANR	5220598	Symbol	strchr		5220512						
ANR	5220599	Function	r_str_bits64	173:0:3302:3625							
ANR	5220600	FunctionDef	"r_str_bits64 (char * strout , ut64 in)"		5220599	0					
ANR	5220601	CompoundStatement		173:46:3348:3625	5220599	0					
ANR	5220602	IdentifierDeclStatement	"int i , bit , count = 0 ;"	174:1:3351:3372	5220599	0	True				
ANR	5220603	IdentifierDecl	i		5220599	0					
ANR	5220604	IdentifierDeclType	int		5220599	0					
ANR	5220605	Identifier	i		5220599	1					
ANR	5220606	IdentifierDecl	bit		5220599	1					
ANR	5220607	IdentifierDeclType	int		5220599	0					
ANR	5220608	Identifier	bit		5220599	1					
ANR	5220609	IdentifierDecl	count = 0		5220599	2					
ANR	5220610	IdentifierDeclType	int		5220599	0					
ANR	5220611	Identifier	count		5220599	1					
ANR	5220612	AssignmentExpression	count = 0		5220599	2		=			
ANR	5220613	Identifier	count		5220599	0					
ANR	5220614	PrimaryExpression	0		5220599	1					
ANR	5220615	ExpressionStatement	count = 0	175:1:3375:3384	5220599	1	True				
ANR	5220616	AssignmentExpression	count = 0		5220599	0		=			
ANR	5220617	Identifier	count		5220599	0					
ANR	5220618	PrimaryExpression	0		5220599	1					
ANR	5220619	ForStatement	for ( i = ( sizeof ( in ) * 8 ) - 1 ; i >= 0 ; i -- )		5220599	2					
ANR	5220620	ForInit	i = ( sizeof ( in ) * 8 ) - 1 ;	176:6:3392:3417	5220599	0	True				
ANR	5220621	AssignmentExpression	i = ( sizeof ( in ) * 8 ) - 1		5220599	0		=			
ANR	5220622	Identifier	i		5220599	0					
ANR	5220623	AdditiveExpression	( sizeof ( in ) * 8 ) - 1		5220599	1		-			
ANR	5220624	MultiplicativeExpression	sizeof ( in ) * 8		5220599	0		*			
ANR	5220625	SizeofExpression	sizeof ( in )		5220599	0					
ANR	5220626	Sizeof	sizeof		5220599	0					
ANR	5220627	SizeofOperand	in		5220599	1					
ANR	5220628	PrimaryExpression	8		5220599	1					
ANR	5220629	PrimaryExpression	1		5220599	1					
ANR	5220630	Condition	i >= 0	176:33:3419:3424	5220599	1	True				
ANR	5220631	RelationalExpression	i >= 0		5220599	0		>=			
ANR	5220632	Identifier	i		5220599	0					
ANR	5220633	PrimaryExpression	0		5220599	1					
ANR	5220634	PostIncDecOperationExpression	i --	176:41:3427:3429	5220599	2	True				
ANR	5220635	Identifier	i		5220599	0					
ANR	5220636	IncDec	--		5220599	1					
ANR	5220637	CompoundStatement		4:46:83:83	5220599	3					
ANR	5220638	ExpressionStatement	bit = in >> i	177:2:3436:3449	5220599	0	True				
ANR	5220639	AssignmentExpression	bit = in >> i		5220599	0		=			
ANR	5220640	Identifier	bit		5220599	0					
ANR	5220641	ShiftExpression	in >> i		5220599	1		>>			
ANR	5220642	Identifier	in		5220599	0					
ANR	5220643	Identifier	i		5220599	1					
ANR	5220644	IfStatement	if ( bit & 1 )		5220599	1					
ANR	5220645	Condition	bit & 1	178:6:3457:3463	5220599	0	True				
ANR	5220646	BitAndExpression	bit & 1		5220599	0		&			
ANR	5220647	Identifier	bit		5220599	0					
ANR	5220648	PrimaryExpression	1		5220599	1					
ANR	5220649	CompoundStatement		6:15:117:117	5220599	1					
ANR	5220650	ExpressionStatement	strout [ count ] = '1'	179:3:3471:3490	5220599	0	True				
ANR	5220651	AssignmentExpression	strout [ count ] = '1'		5220599	0		=			
ANR	5220652	ArrayIndexing	strout [ count ]		5220599	0					
ANR	5220653	Identifier	strout		5220599	0					
ANR	5220654	Identifier	count		5220599	1					
ANR	5220655	PrimaryExpression	'1'		5220599	1					
ANR	5220656	ElseStatement	else		5220599	0					
ANR	5220657	CompoundStatement		8:9:152:152	5220599	0					
ANR	5220658	ExpressionStatement	strout [ count ] = '0'	181:3:3506:3525	5220599	0	True				
ANR	5220659	AssignmentExpression	strout [ count ] = '0'		5220599	0		=			
ANR	5220660	ArrayIndexing	strout [ count ]		5220599	0					
ANR	5220661	Identifier	strout		5220599	0					
ANR	5220662	Identifier	count		5220599	1					
ANR	5220663	PrimaryExpression	'0'		5220599	1					
ANR	5220664	ExpressionStatement	count ++	183:2:3533:3540	5220599	2	True				
ANR	5220665	PostIncDecOperationExpression	count ++		5220599	0					
ANR	5220666	Identifier	count		5220599	0					
ANR	5220667	IncDec	++		5220599	1					
ANR	5220668	ExpressionStatement	strout [ count ] = '\\0'	185:1:3546:3566	5220599	3	True				
ANR	5220669	AssignmentExpression	strout [ count ] = '\\0'		5220599	0		=			
ANR	5220670	ArrayIndexing	strout [ count ]		5220599	0					
ANR	5220671	Identifier	strout		5220599	0					
ANR	5220672	Identifier	count		5220599	1					
ANR	5220673	PrimaryExpression	'\\0'		5220599	1					
ANR	5220674	ExpressionStatement	trimbits ( strout )	187:1:3591:3608	5220599	4	True				
ANR	5220675	CallExpression	trimbits ( strout )		5220599	0					
ANR	5220676	Callee	trimbits		5220599	0					
ANR	5220677	Identifier	trimbits		5220599	0					
ANR	5220678	ArgumentList	strout		5220599	1					
ANR	5220679	Argument	strout		5220599	0					
ANR	5220680	Identifier	strout		5220599	0					
ANR	5220681	ReturnStatement	return count ;	188:1:3611:3623	5220599	5	True				
ANR	5220682	Identifier	count		5220599	0					
ANR	5220683	ReturnType	R_API int		5220599	1					
ANR	5220684	Identifier	r_str_bits64		5220599	2					
ANR	5220685	ParameterList	"char * strout , ut64 in"		5220599	3					
ANR	5220686	Parameter	char * strout	173:23:3325:3336	5220599	0	True				
ANR	5220687	ParameterType	char *		5220599	0					
ANR	5220688	Identifier	strout		5220599	1					
ANR	5220689	Parameter	ut64 in	173:37:3339:3345	5220599	1	True				
ANR	5220690	ParameterType	ut64		5220599	0					
ANR	5220691	Identifier	in		5220599	1					
ANR	5220692	CFGEntryNode	ENTRY		5220599		True				
ANR	5220693	CFGExitNode	EXIT		5220599		True				
ANR	5220694	Symbol	* count		5220599						
ANR	5220695	Symbol	in		5220599						
ANR	5220696	Symbol	strout		5220599						
ANR	5220697	Symbol	count		5220599						
ANR	5220698	Symbol	i		5220599						
ANR	5220699	Symbol	bit		5220599						
ANR	5220700	Symbol	* strout		5220599						
ANR	5220701	Function	r_str_bits_from_string	195:0:3672:4121							
ANR	5220702	FunctionDef	"r_str_bits_from_string (const char * buf , const char * bitz)"		5220701	0					
ANR	5220703	CompoundStatement		195:69:3741:4121	5220701	0					
ANR	5220704	Statement	ut64	196:1:3744:3747	5220701	0	True				
ANR	5220705	Statement	out	196:6:3749:3751	5220701	1	True				
ANR	5220706	Statement	=	196:10:3753:3753	5220701	2	True				
ANR	5220707	Statement	0L	196:12:3755:3756	5220701	3	True				
ANR	5220708	ExpressionStatement	L	196:14:3757:3758	5220701	4	True				
ANR	5220709	Identifier	L		5220701	0					
ANR	5220710	ForStatement	for ( ; * buf ; buf ++ )		5220701	5					
ANR	5220711	Condition	* buf	198:8:3832:3835	5220701	0	True				
ANR	5220712	UnaryOperationExpression	* buf		5220701	0					
ANR	5220713	UnaryOperator	*		5220701	0					
ANR	5220714	Identifier	buf		5220701	1					
ANR	5220715	PostIncDecOperationExpression	buf ++	198:14:3838:3842	5220701	1	True				
ANR	5220716	Identifier	buf		5220701	0					
ANR	5220717	IncDec	++		5220701	1					
ANR	5220718	CompoundStatement		5:2:107:168	5220701	2					
ANR	5220719	IdentifierDeclStatement	"char * ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) ) ;"	199:2:3849:3910	5220701	0	True				
ANR	5220720	IdentifierDecl	"* ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		5220701	0					
ANR	5220721	IdentifierDeclType	char *		5220701	0					
ANR	5220722	Identifier	ch		5220701	1					
ANR	5220723	AssignmentExpression	"* ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		5220701	2		=			
ANR	5220724	Identifier	ch		5220701	0					
ANR	5220725	CallExpression	"strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		5220701	1					
ANR	5220726	Callee	strchr		5220701	0					
ANR	5220727	Identifier	strchr		5220701	0					
ANR	5220728	ArgumentList	bitz		5220701	1					
ANR	5220729	Argument	bitz		5220701	0					
ANR	5220730	Identifier	bitz		5220701	0					
ANR	5220731	Argument	toupper ( ( const unsigned char ) * buf )		5220701	1					
ANR	5220732	CallExpression	toupper ( ( const unsigned char ) * buf )		5220701	0					
ANR	5220733	Callee	toupper		5220701	0					
ANR	5220734	Identifier	toupper		5220701	0					
ANR	5220735	ArgumentList	( const unsigned char ) * buf		5220701	1					
ANR	5220736	Argument	( const unsigned char ) * buf		5220701	0					
ANR	5220737	CastExpression	( const unsigned char ) * buf		5220701	0					
ANR	5220738	CastTarget	const unsigned char		5220701	0					
ANR	5220739	UnaryOperationExpression	* buf		5220701	1					
ANR	5220740	UnaryOperator	*		5220701	0					
ANR	5220741	Identifier	buf		5220701	1					
ANR	5220742	IfStatement	if ( ! ch )		5220701	1					
ANR	5220743	Condition	! ch	200:6:3918:3920	5220701	0	True				
ANR	5220744	UnaryOperationExpression	! ch		5220701	0					
ANR	5220745	UnaryOperator	!		5220701	0					
ANR	5220746	Identifier	ch		5220701	1					
ANR	5220747	CompoundStatement		6:11:181:181	5220701	1					
ANR	5220748	ExpressionStatement	"ch = strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"	201:3:3928:3983	5220701	0	True				
ANR	5220749	AssignmentExpression	"ch = strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"		5220701	0		=			
ANR	5220750	Identifier	ch		5220701	0					
ANR	5220751	CallExpression	"strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"		5220701	1					
ANR	5220752	Callee	strchr		5220701	0					
ANR	5220753	Identifier	strchr		5220701	0					
ANR	5220754	ArgumentList	bitz		5220701	1					
ANR	5220755	Argument	bitz		5220701	0					
ANR	5220756	Identifier	bitz		5220701	0					
ANR	5220757	Argument	tolower ( ( const unsigned char ) * buf )		5220701	1					
ANR	5220758	CallExpression	tolower ( ( const unsigned char ) * buf )		5220701	0					
ANR	5220759	Callee	tolower		5220701	0					
ANR	5220760	Identifier	tolower		5220701	0					
ANR	5220761	ArgumentList	( const unsigned char ) * buf		5220701	1					
ANR	5220762	Argument	( const unsigned char ) * buf		5220701	0					
ANR	5220763	CastExpression	( const unsigned char ) * buf		5220701	0					
ANR	5220764	CastTarget	const unsigned char		5220701	0					
ANR	5220765	UnaryOperationExpression	* buf		5220701	1					
ANR	5220766	UnaryOperator	*		5220701	0					
ANR	5220767	Identifier	buf		5220701	1					
ANR	5220768	IfStatement	if ( ch )		5220701	2					
ANR	5220769	Condition	ch	203:6:3995:3996	5220701	0	True				
ANR	5220770	Identifier	ch		5220701	0					
ANR	5220771	CompoundStatement		10:3:262:296	5220701	1					
ANR	5220772	IdentifierDeclStatement	int bit = ( int ) ( size_t ) ( ch - bitz ) ;	204:3:4004:4038	5220701	0	True				
ANR	5220773	IdentifierDecl	bit = ( int ) ( size_t ) ( ch - bitz )		5220701	0					
ANR	5220774	IdentifierDeclType	int		5220701	0					
ANR	5220775	Identifier	bit		5220701	1					
ANR	5220776	AssignmentExpression	bit = ( int ) ( size_t ) ( ch - bitz )		5220701	2		=			
ANR	5220777	Identifier	bit		5220701	0					
ANR	5220778	CastExpression	( int ) ( size_t ) ( ch - bitz )		5220701	1					
ANR	5220779	CastTarget	int		5220701	0					
ANR	5220780	CastExpression	( size_t ) ( ch - bitz )		5220701	1					
ANR	5220781	CastTarget	size_t		5220701	0					
ANR	5220782	AdditiveExpression	ch - bitz		5220701	1		-			
ANR	5220783	Identifier	ch		5220701	0					
ANR	5220784	Identifier	bitz		5220701	1					
ANR	5220785	Statement	out	205:3:4043:4045	5220701	1	True				
ANR	5220786	Statement	|=	205:7:4047:4048	5220701	2	True				
ANR	5220787	Statement	(	205:10:4050:4050	5220701	3	True				
ANR	5220788	Statement	ut64	205:11:4051:4054	5220701	4	True				
ANR	5220789	Statement	)	205:15:4055:4055	5220701	5	True				
ANR	5220790	Statement	(	205:16:4056:4056	5220701	6	True				
ANR	5220791	Statement	1L	205:17:4057:4058	5220701	7	True				
ANR	5220792	Statement	L	205:19:4059:4059	5220701	8	True				
ANR	5220793	Statement	<<	205:21:4061:4062	5220701	9	True				
ANR	5220794	Statement	bit	205:24:4064:4066	5220701	10	True				
ANR	5220795	Statement	)	205:27:4067:4067	5220701	11	True				
ANR	5220796	ExpressionStatement		205:28:4068:4068	5220701	12	True				
ANR	5220797	ElseStatement	else		5220701	0					
ANR	5220798	CompoundStatement		12:9:337:337	5220701	0					
ANR	5220799	ReturnStatement	return UT64_MAX ;	207:3:4084:4099	5220701	0	True				
ANR	5220800	Identifier	UT64_MAX		5220701	0					
ANR	5220801	ReturnStatement	return out ;	210:1:4109:4119	5220701	6	True				
ANR	5220802	Identifier	out		5220701	0					
ANR	5220803	ReturnType	R_API ut64		5220701	1					
ANR	5220804	Identifier	r_str_bits_from_string		5220701	2					
ANR	5220805	ParameterList	"const char * buf , const char * bitz"		5220701	3					
ANR	5220806	Parameter	const char * buf	195:34:3706:3720	5220701	0	True				
ANR	5220807	ParameterType	const char *		5220701	0					
ANR	5220808	Identifier	buf		5220701	1					
ANR	5220809	Parameter	const char * bitz	195:51:3723:3738	5220701	1	True				
ANR	5220810	ParameterType	const char *		5220701	0					
ANR	5220811	Identifier	bitz		5220701	1					
ANR	5220812	CFGEntryNode	ENTRY		5220701		True				
ANR	5220813	CFGExitNode	EXIT		5220701		True				
ANR	5220814	Symbol	buf		5220701						
ANR	5220815	Symbol	* buf		5220701						
ANR	5220816	Symbol	bitz		5220701						
ANR	5220817	Symbol	tolower		5220701						
ANR	5220818	Symbol	ch		5220701						
ANR	5220819	Symbol	toupper		5220701						
ANR	5220820	Symbol	strchr		5220701						
ANR	5220821	Symbol	bit		5220701						
ANR	5220822	Symbol	UT64_MAX		5220701						
ANR	5220823	Symbol	out		5220701						
ANR	5220824	Function	r_str_binstr2bin	213:0:4124:4772							
ANR	5220825	FunctionDef	"r_str_binstr2bin (const char * str , ut8 * out , int outlen)"		5220824	0					
ANR	5220826	CompoundStatement		213:66:4190:4772	5220824	0					
ANR	5220827	IdentifierDeclStatement	"int n , i , j , k , ret , len ;"	214:1:4193:4217	5220824	0	True				
ANR	5220828	IdentifierDecl	n		5220824	0					
ANR	5220829	IdentifierDeclType	int		5220824	0					
ANR	5220830	Identifier	n		5220824	1					
ANR	5220831	IdentifierDecl	i		5220824	1					
ANR	5220832	IdentifierDeclType	int		5220824	0					
ANR	5220833	Identifier	i		5220824	1					
ANR	5220834	IdentifierDecl	j		5220824	2					
ANR	5220835	IdentifierDeclType	int		5220824	0					
ANR	5220836	Identifier	j		5220824	1					
ANR	5220837	IdentifierDecl	k		5220824	3					
ANR	5220838	IdentifierDeclType	int		5220824	0					
ANR	5220839	Identifier	k		5220824	1					
ANR	5220840	IdentifierDecl	ret		5220824	4					
ANR	5220841	IdentifierDeclType	int		5220824	0					
ANR	5220842	Identifier	ret		5220824	1					
ANR	5220843	IdentifierDecl	len		5220824	5					
ANR	5220844	IdentifierDeclType	int		5220824	0					
ANR	5220845	Identifier	len		5220824	1					
ANR	5220846	ExpressionStatement	len = strlen ( str )	215:1:4220:4238	5220824	1	True				
ANR	5220847	AssignmentExpression	len = strlen ( str )		5220824	0		=			
ANR	5220848	Identifier	len		5220824	0					
ANR	5220849	CallExpression	strlen ( str )		5220824	1					
ANR	5220850	Callee	strlen		5220824	0					
ANR	5220851	Identifier	strlen		5220824	0					
ANR	5220852	ArgumentList	str		5220824	1					
ANR	5220853	Argument	str		5220824	0					
ANR	5220854	Identifier	str		5220824	0					
ANR	5220855	ForStatement	for ( n = i = 0 ; i < len ; i += 8 )		5220824	2					
ANR	5220856	ForInit	n = i = 0 ;	216:6:4246:4255	5220824	0	True				
ANR	5220857	AssignmentExpression	n = i = 0		5220824	0		=			
ANR	5220858	Identifier	n		5220824	0					
ANR	5220859	AssignmentExpression	i = 0		5220824	1		=			
ANR	5220860	Identifier	i		5220824	0					
ANR	5220861	PrimaryExpression	0		5220824	1					
ANR	5220862	Condition	i < len	216:17:4257:4263	5220824	1	True				
ANR	5220863	RelationalExpression	i < len		5220824	0		<			
ANR	5220864	Identifier	i		5220824	0					
ANR	5220865	Identifier	len		5220824	1					
ANR	5220866	AssignmentExpression	i += 8	216:26:4266:4271	5220824	2	True	+=			
ANR	5220867	Identifier	i		5220824	0					
ANR	5220868	PrimaryExpression	8		5220824	1					
ANR	5220869	CompoundStatement		4:34:83:83	5220824	3					
ANR	5220870	ExpressionStatement	ret = 0	217:2:4278:4285	5220824	0	True				
ANR	5220871	AssignmentExpression	ret = 0		5220824	0		=			
ANR	5220872	Identifier	ret		5220824	0					
ANR	5220873	PrimaryExpression	0		5220824	1					
ANR	5220874	WhileStatement	while ( str [ i ] == ' ' )		5220824	1					
ANR	5220875	Condition	str [ i ] == ' '	218:9:4296:4306	5220824	0	True				
ANR	5220876	EqualityExpression	str [ i ] == ' '		5220824	0		==			
ANR	5220877	ArrayIndexing	str [ i ]		5220824	0					
ANR	5220878	Identifier	str		5220824	0					
ANR	5220879	Identifier	i		5220824	1					
ANR	5220880	PrimaryExpression	' '		5220824	1					
ANR	5220881	CompoundStatement		6:22:118:118	5220824	1					
ANR	5220882	ExpressionStatement	str ++	219:3:4314:4319	5220824	0	True				
ANR	5220883	PostIncDecOperationExpression	str ++		5220824	0					
ANR	5220884	Identifier	str		5220824	0					
ANR	5220885	IncDec	++		5220824	1					
ANR	5220886	IfStatement	if ( i + 7 < len )		5220824	2					
ANR	5220887	Condition	i + 7 < len	221:6:4331:4341	5220824	0	True				
ANR	5220888	RelationalExpression	i + 7 < len		5220824	0		<			
ANR	5220889	AdditiveExpression	i + 7		5220824	0		+			
ANR	5220890	Identifier	i		5220824	0					
ANR	5220891	PrimaryExpression	7		5220824	1					
ANR	5220892	Identifier	len		5220824	1					
ANR	5220893	CompoundStatement		9:19:153:153	5220824	1					
ANR	5220894	ForStatement	"for ( k = 0 , j = i + 7 ; j >= i ; j -- , k ++ )"		5220824	0					
ANR	5220895	ForInit	"k = 0 , j = i + 7 ;"	222:8:4354:4370	5220824	0	True				
ANR	5220896	Expression	"k = 0 , j = i + 7"		5220824	0					
ANR	5220897	AssignmentExpression	k = 0		5220824	0		=			
ANR	5220898	Identifier	k		5220824	0					
ANR	5220899	PrimaryExpression	0		5220824	1					
ANR	5220900	AssignmentExpression	j = i + 7		5220824	1		=			
ANR	5220901	Identifier	j		5220824	0					
ANR	5220902	AdditiveExpression	i + 7		5220824	1		+			
ANR	5220903	Identifier	i		5220824	0					
ANR	5220904	PrimaryExpression	7		5220824	1					
ANR	5220905	Condition	j >= i	222:26:4372:4377	5220824	1	True				
ANR	5220906	RelationalExpression	j >= i		5220824	0		>=			
ANR	5220907	Identifier	j		5220824	0					
ANR	5220908	Identifier	i		5220824	1					
ANR	5220909	Expression	"j -- , k ++"	222:34:4380:4387	5220824	2	True				
ANR	5220910	PostIncDecOperationExpression	j --		5220824	0					
ANR	5220911	Identifier	j		5220824	0					
ANR	5220912	IncDec	--		5220824	1					
ANR	5220913	PostIncDecOperationExpression	k ++		5220824	1					
ANR	5220914	Identifier	k		5220824	0					
ANR	5220915	IncDec	++		5220824	1					
ANR	5220916	CompoundStatement		10:44:199:199	5220824	3					
ANR	5220917	IfStatement	if ( str [ j ] == ' ' )		5220824	0					
ANR	5220918	Condition	str [ j ] == ' '	224:8:4447:4459	5220824	0	True				
ANR	5220919	EqualityExpression	str [ j ] == ' '		5220824	0		==			
ANR	5220920	ArrayIndexing	str [ j ]		5220824	0					
ANR	5220921	Identifier	str		5220824	0					
ANR	5220922	Identifier	j		5220824	1					
ANR	5220923	PrimaryExpression	' '		5220824	1					
ANR	5220924	CompoundStatement		12:23:271:271	5220824	1					
ANR	5220925	ContinueStatement	continue ;	226:5:4481:4489	5220824	0	True				
ANR	5220926	IfStatement	if ( str [ j ] == '1' )		5220824	1					
ANR	5220927	Condition	str [ j ] == '1'	229:8:4568:4580	5220824	0	True				
ANR	5220928	EqualityExpression	str [ j ] == '1'		5220824	0		==			
ANR	5220929	ArrayIndexing	str [ j ]		5220824	0					
ANR	5220930	Identifier	str		5220824	0					
ANR	5220931	Identifier	j		5220824	1					
ANR	5220932	PrimaryExpression	'1'		5220824	1					
ANR	5220933	CompoundStatement		17:23:392:392	5220824	1					
ANR	5220934	ExpressionStatement	ret |= 1 << k	230:5:4590:4601	5220824	0	True				
ANR	5220935	AssignmentExpression	ret |= 1 << k		5220824	0		|=			
ANR	5220936	Identifier	ret		5220824	0					
ANR	5220937	ShiftExpression	1 << k		5220824	1		<<			
ANR	5220938	PrimaryExpression	1		5220824	0					
ANR	5220939	Identifier	k		5220824	1					
ANR	5220940	ElseStatement	else		5220824	0					
ANR	5220941	IfStatement	if ( str [ j ] != '0' )		5220824	0					
ANR	5220942	Condition	str [ j ] != '0'	231:15:4618:4630	5220824	0	True				
ANR	5220943	EqualityExpression	str [ j ] != '0'		5220824	0		!=			
ANR	5220944	ArrayIndexing	str [ j ]		5220824	0					
ANR	5220945	Identifier	str		5220824	0					
ANR	5220946	Identifier	j		5220824	1					
ANR	5220947	PrimaryExpression	'0'		5220824	1					
ANR	5220948	CompoundStatement		19:30:442:442	5220824	1					
ANR	5220949	ReturnStatement	return n ;	232:5:4640:4648	5220824	0	True				
ANR	5220950	Identifier	n		5220824	0					
ANR	5220951	ExpressionStatement	out [ n ++ ] = ret	237:2:4704:4718	5220824	3	True				
ANR	5220952	AssignmentExpression	out [ n ++ ] = ret		5220824	0		=			
ANR	5220953	ArrayIndexing	out [ n ++ ]		5220824	0					
ANR	5220954	Identifier	out		5220824	0					
ANR	5220955	PostIncDecOperationExpression	n ++		5220824	1					
ANR	5220956	Identifier	n		5220824	0					
ANR	5220957	IncDec	++		5220824	1					
ANR	5220958	Identifier	ret		5220824	1					
ANR	5220959	IfStatement	if ( n == outlen )		5220824	4					
ANR	5220960	Condition	n == outlen	238:6:4726:4736	5220824	0	True				
ANR	5220961	EqualityExpression	n == outlen		5220824	0		==			
ANR	5220962	Identifier	n		5220824	0					
ANR	5220963	Identifier	outlen		5220824	1					
ANR	5220964	CompoundStatement		26:19:548:548	5220824	1					
ANR	5220965	ReturnStatement	return n ;	239:3:4744:4752	5220824	0	True				
ANR	5220966	Identifier	n		5220824	0					
ANR	5220967	ReturnStatement	return n ;	242:1:4762:4770	5220824	3	True				
ANR	5220968	Identifier	n		5220824	0					
ANR	5220969	ReturnType	R_API int		5220824	1					
ANR	5220970	Identifier	r_str_binstr2bin		5220824	2					
ANR	5220971	ParameterList	"const char * str , ut8 * out , int outlen"		5220824	3					
ANR	5220972	Parameter	const char * str	213:27:4151:4165	5220824	0	True				
ANR	5220973	ParameterType	const char *		5220824	0					
ANR	5220974	Identifier	str		5220824	1					
ANR	5220975	Parameter	ut8 * out	213:44:4168:4175	5220824	1	True				
ANR	5220976	ParameterType	ut8 *		5220824	0					
ANR	5220977	Identifier	out		5220824	1					
ANR	5220978	Parameter	int outlen	213:54:4178:4187	5220824	2	True				
ANR	5220979	ParameterType	int		5220824	0					
ANR	5220980	Identifier	outlen		5220824	1					
ANR	5220981	CFGEntryNode	ENTRY		5220824		True				
ANR	5220982	CFGExitNode	EXIT		5220824		True				
ANR	5220983	Symbol	ret		5220824						
ANR	5220984	Symbol	i		5220824						
ANR	5220985	Symbol	j		5220824						
ANR	5220986	Symbol	k		5220824						
ANR	5220987	Symbol	n		5220824						
ANR	5220988	Symbol	out		5220824						
ANR	5220989	Symbol	str		5220824						
ANR	5220990	Symbol	strlen		5220824						
ANR	5220991	Symbol	* i		5220824						
ANR	5220992	Symbol	len		5220824						
ANR	5220993	Symbol	* j		5220824						
ANR	5220994	Symbol	outlen		5220824						
ANR	5220995	Symbol	* out		5220824						
ANR	5220996	Symbol	* str		5220824						
ANR	5220997	Function	r_str_rwx	247:0:4863:5165							
ANR	5220998	FunctionDef	r_str_rwx (const char * str)		5220997	0					
ANR	5220999	CompoundStatement		247:37:4900:5165	5220997	0					
ANR	5221000	IdentifierDeclStatement	int ret = atoi ( str ) ;	248:1:4903:4923	5220997	0	True				
ANR	5221001	IdentifierDecl	ret = atoi ( str )		5220997	0					
ANR	5221002	IdentifierDeclType	int		5220997	0					
ANR	5221003	Identifier	ret		5220997	1					
ANR	5221004	AssignmentExpression	ret = atoi ( str )		5220997	2		=			
ANR	5221005	Identifier	ret		5220997	0					
ANR	5221006	CallExpression	atoi ( str )		5220997	1					
ANR	5221007	Callee	atoi		5220997	0					
ANR	5221008	Identifier	atoi		5220997	0					
ANR	5221009	ArgumentList	str		5220997	1					
ANR	5221010	Argument	str		5220997	0					
ANR	5221011	Identifier	str		5220997	0					
ANR	5221012	IfStatement	if ( ! ret )		5220997	1					
ANR	5221013	Condition	! ret	249:5:4930:4933	5220997	0	True				
ANR	5221014	UnaryOperationExpression	! ret		5220997	0					
ANR	5221015	UnaryOperator	!		5220997	0					
ANR	5221016	Identifier	ret		5220997	1					
ANR	5221017	CompoundStatement		3:11:35:35	5220997	1					
ANR	5221018	ExpressionStatement	"ret |= strchr ( str , 'm' ) ? 16 : 0"	250:2:4940:4973	5220997	0	True				
ANR	5221019	AssignmentExpression	"ret |= strchr ( str , 'm' ) ? 16 : 0"		5220997	0		|=			
ANR	5221020	Identifier	ret		5220997	0					
ANR	5221021	ConditionalExpression	"strchr ( str , 'm' ) ? 16 : 0"		5220997	1					
ANR	5221022	Condition	"strchr ( str , 'm' )"		5220997	0					
ANR	5221023	CallExpression	"strchr ( str , 'm' )"		5220997	0					
ANR	5221024	Callee	strchr		5220997	0					
ANR	5221025	Identifier	strchr		5220997	0					
ANR	5221026	ArgumentList	str		5220997	1					
ANR	5221027	Argument	str		5220997	0					
ANR	5221028	Identifier	str		5220997	0					
ANR	5221029	Argument	'm'		5220997	1					
ANR	5221030	PrimaryExpression	'm'		5220997	0					
ANR	5221031	PrimaryExpression	16		5220997	1					
ANR	5221032	PrimaryExpression	0		5220997	2					
ANR	5221033	ExpressionStatement	"ret |= strchr ( str , 'r' ) ? 4 : 0"	251:2:4977:5009	5220997	1	True				
ANR	5221034	AssignmentExpression	"ret |= strchr ( str , 'r' ) ? 4 : 0"		5220997	0		|=			
ANR	5221035	Identifier	ret		5220997	0					
ANR	5221036	ConditionalExpression	"strchr ( str , 'r' ) ? 4 : 0"		5220997	1					
ANR	5221037	Condition	"strchr ( str , 'r' )"		5220997	0					
ANR	5221038	CallExpression	"strchr ( str , 'r' )"		5220997	0					
ANR	5221039	Callee	strchr		5220997	0					
ANR	5221040	Identifier	strchr		5220997	0					
ANR	5221041	ArgumentList	str		5220997	1					
ANR	5221042	Argument	str		5220997	0					
ANR	5221043	Identifier	str		5220997	0					
ANR	5221044	Argument	'r'		5220997	1					
ANR	5221045	PrimaryExpression	'r'		5220997	0					
ANR	5221046	PrimaryExpression	4		5220997	1					
ANR	5221047	PrimaryExpression	0		5220997	2					
ANR	5221048	ExpressionStatement	"ret |= strchr ( str , 'w' ) ? 2 : 0"	252:2:5013:5045	5220997	2	True				
ANR	5221049	AssignmentExpression	"ret |= strchr ( str , 'w' ) ? 2 : 0"		5220997	0		|=			
ANR	5221050	Identifier	ret		5220997	0					
ANR	5221051	ConditionalExpression	"strchr ( str , 'w' ) ? 2 : 0"		5220997	1					
ANR	5221052	Condition	"strchr ( str , 'w' )"		5220997	0					
ANR	5221053	CallExpression	"strchr ( str , 'w' )"		5220997	0					
ANR	5221054	Callee	strchr		5220997	0					
ANR	5221055	Identifier	strchr		5220997	0					
ANR	5221056	ArgumentList	str		5220997	1					
ANR	5221057	Argument	str		5220997	0					
ANR	5221058	Identifier	str		5220997	0					
ANR	5221059	Argument	'w'		5220997	1					
ANR	5221060	PrimaryExpression	'w'		5220997	0					
ANR	5221061	PrimaryExpression	2		5220997	1					
ANR	5221062	PrimaryExpression	0		5220997	2					
ANR	5221063	ExpressionStatement	"ret |= strchr ( str , 'x' ) ? 1 : 0"	253:2:5049:5081	5220997	3	True				
ANR	5221064	AssignmentExpression	"ret |= strchr ( str , 'x' ) ? 1 : 0"		5220997	0		|=			
ANR	5221065	Identifier	ret		5220997	0					
ANR	5221066	ConditionalExpression	"strchr ( str , 'x' ) ? 1 : 0"		5220997	1					
ANR	5221067	Condition	"strchr ( str , 'x' )"		5220997	0					
ANR	5221068	CallExpression	"strchr ( str , 'x' )"		5220997	0					
ANR	5221069	Callee	strchr		5220997	0					
ANR	5221070	Identifier	strchr		5220997	0					
ANR	5221071	ArgumentList	str		5220997	1					
ANR	5221072	Argument	str		5220997	0					
ANR	5221073	Identifier	str		5220997	0					
ANR	5221074	Argument	'x'		5220997	1					
ANR	5221075	PrimaryExpression	'x'		5220997	0					
ANR	5221076	PrimaryExpression	1		5220997	1					
ANR	5221077	PrimaryExpression	0		5220997	2					
ANR	5221078	ElseStatement	else		5220997	0					
ANR	5221079	IfStatement	if ( ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr ) )		5220997	0					
ANR	5221080	Condition	ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr )	254:12:5095:5133	5220997	0	True				
ANR	5221081	OrExpression	ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr )		5220997	0		||			
ANR	5221082	RelationalExpression	ret < 0		5220997	0		<			
ANR	5221083	Identifier	ret		5220997	0					
ANR	5221084	PrimaryExpression	0		5220997	1					
ANR	5221085	RelationalExpression	ret >= R_ARRAY_SIZE ( rwxstr )		5220997	1		>=			
ANR	5221086	Identifier	ret		5220997	0					
ANR	5221087	CallExpression	R_ARRAY_SIZE ( rwxstr )		5220997	1					
ANR	5221088	Callee	R_ARRAY_SIZE		5220997	0					
ANR	5221089	Identifier	R_ARRAY_SIZE		5220997	0					
ANR	5221090	ArgumentList	rwxstr		5220997	1					
ANR	5221091	Argument	rwxstr		5220997	0					
ANR	5221092	Identifier	rwxstr		5220997	0					
ANR	5221093	CompoundStatement		8:53:235:235	5220997	1					
ANR	5221094	ExpressionStatement	ret = 0	255:2:5140:5147	5220997	0	True				
ANR	5221095	AssignmentExpression	ret = 0		5220997	0		=			
ANR	5221096	Identifier	ret		5220997	0					
ANR	5221097	PrimaryExpression	0		5220997	1					
ANR	5221098	ReturnStatement	return ret ;	257:1:5153:5163	5220997	2	True				
ANR	5221099	Identifier	ret		5220997	0					
ANR	5221100	ReturnType	R_API int		5220997	1					
ANR	5221101	Identifier	r_str_rwx		5220997	2					
ANR	5221102	ParameterList	const char * str		5220997	3					
ANR	5221103	Parameter	const char * str	247:20:4883:4897	5220997	0	True				
ANR	5221104	ParameterType	const char *		5220997	0					
ANR	5221105	Identifier	str		5220997	1					
ANR	5221106	CFGEntryNode	ENTRY		5220997		True				
ANR	5221107	CFGExitNode	EXIT		5220997		True				
ANR	5221108	Symbol	str		5220997						
ANR	5221109	Symbol	ret		5220997						
ANR	5221110	Symbol	atoi		5220997						
ANR	5221111	Symbol	rwxstr		5220997						
ANR	5221112	Symbol	R_ARRAY_SIZE		5220997						
ANR	5221113	Symbol	strchr		5220997						
ANR	5221114	Function	r_str_rwx_i	261:6:5254:5392							
ANR	5221115	FunctionDef	r_str_rwx_i (int rwx)		5221114	0					
ANR	5221116	CompoundStatement		261:39:5287:5392	5221114	0					
ANR	5221117	IfStatement	if ( rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr ) )		5221114	0					
ANR	5221118	Condition	rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr )	262:5:5294:5332	5221114	0	True				
ANR	5221119	OrExpression	rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr )		5221114	0		||			
ANR	5221120	RelationalExpression	rwx < 0		5221114	0		<			
ANR	5221121	Identifier	rwx		5221114	0					
ANR	5221122	PrimaryExpression	0		5221114	1					
ANR	5221123	RelationalExpression	rwx >= R_ARRAY_SIZE ( rwxstr )		5221114	1		>=			
ANR	5221124	Identifier	rwx		5221114	0					
ANR	5221125	CallExpression	R_ARRAY_SIZE ( rwxstr )		5221114	1					
ANR	5221126	Callee	R_ARRAY_SIZE		5221114	0					
ANR	5221127	Identifier	R_ARRAY_SIZE		5221114	0					
ANR	5221128	ArgumentList	rwxstr		5221114	1					
ANR	5221129	Argument	rwxstr		5221114	0					
ANR	5221130	Identifier	rwxstr		5221114	0					
ANR	5221131	CompoundStatement		2:46:47:47	5221114	1					
ANR	5221132	ExpressionStatement	rwx = 0	263:2:5339:5346	5221114	0	True				
ANR	5221133	AssignmentExpression	rwx = 0		5221114	0		=			
ANR	5221134	Identifier	rwx		5221114	0					
ANR	5221135	PrimaryExpression	0		5221114	1					
ANR	5221136	ReturnStatement	return rwxstr [ rwx % 24 ] ;	265:1:5352:5375	5221114	1	True				
ANR	5221137	ArrayIndexing	rwxstr [ rwx % 24 ]		5221114	0					
ANR	5221138	Identifier	rwxstr		5221114	0					
ANR	5221139	MultiplicativeExpression	rwx % 24		5221114	1		%			
ANR	5221140	Identifier	rwx		5221114	0					
ANR	5221141	PrimaryExpression	24		5221114	1					
ANR	5221142	ReturnType	const char *		5221114	1					
ANR	5221143	Identifier	r_str_rwx_i		5221114	2					
ANR	5221144	ParameterList	int rwx		5221114	3					
ANR	5221145	Parameter	int rwx	261:30:5278:5284	5221114	0	True				
ANR	5221146	ParameterType	int		5221114	0					
ANR	5221147	Identifier	rwx		5221114	1					
ANR	5221148	CFGEntryNode	ENTRY		5221114		True				
ANR	5221149	CFGExitNode	EXIT		5221114		True				
ANR	5221150	Symbol	rwx		5221114						
ANR	5221151	Symbol	* rwxstr		5221114						
ANR	5221152	Symbol	rwxstr		5221114						
ANR	5221153	Symbol	R_ARRAY_SIZE		5221114						
ANR	5221154	Symbol	* rwx		5221114						
ANR	5221155	Function	r_str_case	270:0:5502:5750							
ANR	5221156	FunctionDef	"r_str_case (char * str , bool up)"		5221155	0					
ANR	5221157	CompoundStatement		270:42:5544:5750	5221155	0					
ANR	5221158	IfStatement	if ( up )		5221155	0					
ANR	5221159	Condition	up	271:5:5551:5552	5221155	0	True				
ANR	5221160	Identifier	up		5221155	0					
ANR	5221161	CompoundStatement		3:2:14:25	5221155	1					
ANR	5221162	IdentifierDeclStatement	char oc = 0 ;	272:2:5559:5570	5221155	0	True				
ANR	5221163	IdentifierDecl	oc = 0		5221155	0					
ANR	5221164	IdentifierDeclType	char		5221155	0					
ANR	5221165	Identifier	oc		5221155	1					
ANR	5221166	AssignmentExpression	oc = 0		5221155	2		=			
ANR	5221167	Identifier	oc		5221155	0					
ANR	5221168	PrimaryExpression	0		5221155	1					
ANR	5221169	ForStatement	for ( ; * str ; oc = * str ++ )		5221155	1					
ANR	5221170	Condition	* str	273:9:5581:5584	5221155	0	True				
ANR	5221171	UnaryOperationExpression	* str		5221155	0					
ANR	5221172	UnaryOperator	*		5221155	0					
ANR	5221173	Identifier	str		5221155	1					
ANR	5221174	AssignmentExpression	oc = * str ++	273:15:5587:5597	5221155	1	True	=			
ANR	5221175	Identifier	oc		5221155	0					
ANR	5221176	UnaryOperationExpression	* str ++		5221155	1					
ANR	5221177	UnaryOperator	*		5221155	0					
ANR	5221178	PostIncDecOperationExpression	str ++		5221155	1					
ANR	5221179	Identifier	str		5221155	0					
ANR	5221180	IncDec	++		5221155	1					
ANR	5221181	CompoundStatement		4:28:55:55	5221155	2					
ANR	5221182	ExpressionStatement	* str = ( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )	274:3:5605:5666	5221155	0	True				
ANR	5221183	AssignmentExpression	* str = ( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )		5221155	0		=			
ANR	5221184	UnaryOperationExpression	* str		5221155	0					
ANR	5221185	UnaryOperator	*		5221155	0					
ANR	5221186	Identifier	str		5221155	1					
ANR	5221187	ConditionalExpression	( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )		5221155	1					
ANR	5221188	Condition	* str == 'x' && oc == '0'		5221155	0					
ANR	5221189	AndExpression	* str == 'x' && oc == '0'		5221155	0		&&			
ANR	5221190	EqualityExpression	* str == 'x'		5221155	0		==			
ANR	5221191	UnaryOperationExpression	* str		5221155	0					
ANR	5221192	UnaryOperator	*		5221155	0					
ANR	5221193	Identifier	str		5221155	1					
ANR	5221194	PrimaryExpression	'x'		5221155	1					
ANR	5221195	EqualityExpression	oc == '0'		5221155	1		==			
ANR	5221196	Identifier	oc		5221155	0					
ANR	5221197	PrimaryExpression	'0'		5221155	1					
ANR	5221198	PrimaryExpression	'x'		5221155	1					
ANR	5221199	CallExpression	toupper ( ( int ) ( ut8 ) * str )		5221155	2					
ANR	5221200	Callee	toupper		5221155	0					
ANR	5221201	Identifier	toupper		5221155	0					
ANR	5221202	ArgumentList	( int ) ( ut8 ) * str		5221155	1					
ANR	5221203	Argument	( int ) ( ut8 ) * str		5221155	0					
ANR	5221204	CastExpression	( int ) ( ut8 ) * str		5221155	0					
ANR	5221205	CastTarget	int		5221155	0					
ANR	5221206	CastExpression	( ut8 ) * str		5221155	1					
ANR	5221207	CastTarget	ut8		5221155	0					
ANR	5221208	UnaryOperationExpression	* str		5221155	1					
ANR	5221209	UnaryOperator	*		5221155	0					
ANR	5221210	Identifier	str		5221155	1					
ANR	5221211	ElseStatement	else		5221155	0					
ANR	5221212	CompoundStatement		7:8:135:135	5221155	0					
ANR	5221213	ForStatement	for ( ; * str ; str ++ )		5221155	0					
ANR	5221214	Condition	* str	277:9:5691:5694	5221155	0	True				
ANR	5221215	UnaryOperationExpression	* str		5221155	0					
ANR	5221216	UnaryOperator	*		5221155	0					
ANR	5221217	Identifier	str		5221155	1					
ANR	5221218	PostIncDecOperationExpression	str ++	277:15:5697:5701	5221155	1	True				
ANR	5221219	Identifier	str		5221155	0					
ANR	5221220	IncDec	++		5221155	1					
ANR	5221221	CompoundStatement		8:22:159:159	5221155	2					
ANR	5221222	ExpressionStatement	* str = tolower ( ( int ) ( ut8 ) * str )	278:3:5710:5741	5221155	0	True				
ANR	5221223	AssignmentExpression	* str = tolower ( ( int ) ( ut8 ) * str )		5221155	0		=			
ANR	5221224	UnaryOperationExpression	* str		5221155	0					
ANR	5221225	UnaryOperator	*		5221155	0					
ANR	5221226	Identifier	str		5221155	1					
ANR	5221227	CallExpression	tolower ( ( int ) ( ut8 ) * str )		5221155	1					
ANR	5221228	Callee	tolower		5221155	0					
ANR	5221229	Identifier	tolower		5221155	0					
ANR	5221230	ArgumentList	( int ) ( ut8 ) * str		5221155	1					
ANR	5221231	Argument	( int ) ( ut8 ) * str		5221155	0					
ANR	5221232	CastExpression	( int ) ( ut8 ) * str		5221155	0					
ANR	5221233	CastTarget	int		5221155	0					
ANR	5221234	CastExpression	( ut8 ) * str		5221155	1					
ANR	5221235	CastTarget	ut8		5221155	0					
ANR	5221236	UnaryOperationExpression	* str		5221155	1					
ANR	5221237	UnaryOperator	*		5221155	0					
ANR	5221238	Identifier	str		5221155	1					
ANR	5221239	ReturnType	R_API void		5221155	1					
ANR	5221240	Identifier	r_str_case		5221155	2					
ANR	5221241	ParameterList	"char * str , bool up"		5221155	3					
ANR	5221242	Parameter	char * str	270:22:5524:5532	5221155	0	True				
ANR	5221243	ParameterType	char *		5221155	0					
ANR	5221244	Identifier	str		5221155	1					
ANR	5221245	Parameter	bool up	270:33:5535:5541	5221155	1	True				
ANR	5221246	ParameterType	bool		5221155	0					
ANR	5221247	Identifier	up		5221155	1					
ANR	5221248	CFGEntryNode	ENTRY		5221155		True				
ANR	5221249	CFGExitNode	EXIT		5221155		True				
ANR	5221250	Symbol	str		5221155						
ANR	5221251	Symbol	oc		5221155						
ANR	5221252	Symbol	tolower		5221155						
ANR	5221253	Symbol	toupper		5221155						
ANR	5221254	Symbol	* str ++		5221155						
ANR	5221255	Symbol	up		5221155						
ANR	5221256	Symbol	* str		5221155						
ANR	5221257	Function	r_str_home	283:0:5753:6271							
ANR	5221258	FunctionDef	r_str_home (const char * str)		5221257	0					
ANR	5221259	CompoundStatement		283:40:5793:6271	5221257	0					
ANR	5221260	IdentifierDeclStatement	"char * dst , * home = r_sys_getenv ( R_SYS_HOME ) ;"	284:1:5796:5840	5221257	0	True				
ANR	5221261	IdentifierDecl	* dst		5221257	0					
ANR	5221262	IdentifierDeclType	char *		5221257	0					
ANR	5221263	Identifier	dst		5221257	1					
ANR	5221264	IdentifierDecl	* home = r_sys_getenv ( R_SYS_HOME )		5221257	1					
ANR	5221265	IdentifierDeclType	char *		5221257	0					
ANR	5221266	Identifier	home		5221257	1					
ANR	5221267	AssignmentExpression	* home = r_sys_getenv ( R_SYS_HOME )		5221257	2		=			
ANR	5221268	Identifier	home		5221257	0					
ANR	5221269	CallExpression	r_sys_getenv ( R_SYS_HOME )		5221257	1					
ANR	5221270	Callee	r_sys_getenv		5221257	0					
ANR	5221271	Identifier	r_sys_getenv		5221257	0					
ANR	5221272	ArgumentList	R_SYS_HOME		5221257	1					
ANR	5221273	Argument	R_SYS_HOME		5221257	0					
ANR	5221274	Identifier	R_SYS_HOME		5221257	0					
ANR	5221275	IdentifierDeclStatement	size_t length ;	285:1:5843:5856	5221257	1	True				
ANR	5221276	IdentifierDecl	length		5221257	0					
ANR	5221277	IdentifierDeclType	size_t		5221257	0					
ANR	5221278	Identifier	length		5221257	1					
ANR	5221279	IfStatement	if ( ! home )		5221257	2					
ANR	5221280	Condition	! home	286:5:5863:5867	5221257	0	True				
ANR	5221281	UnaryOperationExpression	! home		5221257	0					
ANR	5221282	UnaryOperator	!		5221257	0					
ANR	5221283	Identifier	home		5221257	1					
ANR	5221284	CompoundStatement		4:12:76:76	5221257	1					
ANR	5221285	ExpressionStatement	home = r_file_tmpdir ( )	287:2:5874:5897	5221257	0	True				
ANR	5221286	AssignmentExpression	home = r_file_tmpdir ( )		5221257	0		=			
ANR	5221287	Identifier	home		5221257	0					
ANR	5221288	CallExpression	r_file_tmpdir ( )		5221257	1					
ANR	5221289	Callee	r_file_tmpdir		5221257	0					
ANR	5221290	Identifier	r_file_tmpdir		5221257	0					
ANR	5221291	ArgumentList			5221257	1					
ANR	5221292	IfStatement	if ( ! home )		5221257	1					
ANR	5221293	Condition	! home	288:6:5905:5909	5221257	0	True				
ANR	5221294	UnaryOperationExpression	! home		5221257	0					
ANR	5221295	UnaryOperator	!		5221257	0					
ANR	5221296	Identifier	home		5221257	1					
ANR	5221297	CompoundStatement		6:13:118:118	5221257	1					
ANR	5221298	ReturnStatement	return NULL ;	289:3:5917:5928	5221257	0	True				
ANR	5221299	Identifier	NULL		5221257	0					
ANR	5221300	ExpressionStatement	length = strlen ( home ) + 1	292:1:5938:5964	5221257	3	True				
ANR	5221301	AssignmentExpression	length = strlen ( home ) + 1		5221257	0		=			
ANR	5221302	Identifier	length		5221257	0					
ANR	5221303	AdditiveExpression	strlen ( home ) + 1		5221257	1		+			
ANR	5221304	CallExpression	strlen ( home )		5221257	0					
ANR	5221305	Callee	strlen		5221257	0					
ANR	5221306	Identifier	strlen		5221257	0					
ANR	5221307	ArgumentList	home		5221257	1					
ANR	5221308	Argument	home		5221257	0					
ANR	5221309	Identifier	home		5221257	0					
ANR	5221310	PrimaryExpression	1		5221257	1					
ANR	5221311	IfStatement	if ( str )		5221257	4					
ANR	5221312	Condition	str	293:5:5971:5973	5221257	0	True				
ANR	5221313	Identifier	str		5221257	0					
ANR	5221314	CompoundStatement		11:10:182:182	5221257	1					
ANR	5221315	ExpressionStatement	length += strlen ( R_SYS_DIR ) + strlen ( str )	294:2:5980:6023	5221257	0	True				
ANR	5221316	AssignmentExpression	length += strlen ( R_SYS_DIR ) + strlen ( str )		5221257	0		+=			
ANR	5221317	Identifier	length		5221257	0					
ANR	5221318	AdditiveExpression	strlen ( R_SYS_DIR ) + strlen ( str )		5221257	1		+			
ANR	5221319	CallExpression	strlen ( R_SYS_DIR )		5221257	0					
ANR	5221320	Callee	strlen		5221257	0					
ANR	5221321	Identifier	strlen		5221257	0					
ANR	5221322	ArgumentList	R_SYS_DIR		5221257	1					
ANR	5221323	Argument	R_SYS_DIR		5221257	0					
ANR	5221324	Identifier	R_SYS_DIR		5221257	0					
ANR	5221325	CallExpression	strlen ( str )		5221257	1					
ANR	5221326	Callee	strlen		5221257	0					
ANR	5221327	Identifier	strlen		5221257	0					
ANR	5221328	ArgumentList	str		5221257	1					
ANR	5221329	Argument	str		5221257	0					
ANR	5221330	Identifier	str		5221257	0					
ANR	5221331	ExpressionStatement	dst = ( char * ) malloc ( length )	296:1:6029:6058	5221257	5	True				
ANR	5221332	AssignmentExpression	dst = ( char * ) malloc ( length )		5221257	0		=			
ANR	5221333	Identifier	dst		5221257	0					
ANR	5221334	CastExpression	( char * ) malloc ( length )		5221257	1					
ANR	5221335	CastTarget	char *		5221257	0					
ANR	5221336	CallExpression	malloc ( length )		5221257	1					
ANR	5221337	Callee	malloc		5221257	0					
ANR	5221338	Identifier	malloc		5221257	0					
ANR	5221339	ArgumentList	length		5221257	1					
ANR	5221340	Argument	length		5221257	0					
ANR	5221341	Identifier	length		5221257	0					
ANR	5221342	IfStatement	if ( ! dst )		5221257	6					
ANR	5221343	Condition	! dst	297:5:6065:6068	5221257	0	True				
ANR	5221344	UnaryOperationExpression	! dst		5221257	0					
ANR	5221345	UnaryOperator	!		5221257	0					
ANR	5221346	Identifier	dst		5221257	1					
ANR	5221347	CompoundStatement		15:11:277:277	5221257	1					
ANR	5221348	GotoStatement	goto fail ;	298:2:6075:6084	5221257	0	True				
ANR	5221349	Identifier	fail		5221257	0					
ANR	5221350	IdentifierDeclStatement	int home_len = strlen ( home ) ;	300:1:6090:6118	5221257	7	True				
ANR	5221351	IdentifierDecl	home_len = strlen ( home )		5221257	0					
ANR	5221352	IdentifierDeclType	int		5221257	0					
ANR	5221353	Identifier	home_len		5221257	1					
ANR	5221354	AssignmentExpression	home_len = strlen ( home )		5221257	2		=			
ANR	5221355	Identifier	home_len		5221257	0					
ANR	5221356	CallExpression	strlen ( home )		5221257	1					
ANR	5221357	Callee	strlen		5221257	0					
ANR	5221358	Identifier	strlen		5221257	0					
ANR	5221359	ArgumentList	home		5221257	1					
ANR	5221360	Argument	home		5221257	0					
ANR	5221361	Identifier	home		5221257	0					
ANR	5221362	ExpressionStatement	"memcpy ( dst , home , home_len + 1 )"	301:1:6121:6153	5221257	8	True				
ANR	5221363	CallExpression	"memcpy ( dst , home , home_len + 1 )"		5221257	0					
ANR	5221364	Callee	memcpy		5221257	0					
ANR	5221365	Identifier	memcpy		5221257	0					
ANR	5221366	ArgumentList	dst		5221257	1					
ANR	5221367	Argument	dst		5221257	0					
ANR	5221368	Identifier	dst		5221257	0					
ANR	5221369	Argument	home		5221257	1					
ANR	5221370	Identifier	home		5221257	0					
ANR	5221371	Argument	home_len + 1		5221257	2					
ANR	5221372	AdditiveExpression	home_len + 1		5221257	0		+			
ANR	5221373	Identifier	home_len		5221257	0					
ANR	5221374	PrimaryExpression	1		5221257	1					
ANR	5221375	IfStatement	if ( str )		5221257	9					
ANR	5221376	Condition	str	302:5:6160:6162	5221257	0	True				
ANR	5221377	Identifier	str		5221257	0					
ANR	5221378	CompoundStatement		20:10:371:371	5221257	1					
ANR	5221379	ExpressionStatement	dst [ home_len ] = R_SYS_DIR [ 0 ]	303:2:6169:6197	5221257	0	True				
ANR	5221380	AssignmentExpression	dst [ home_len ] = R_SYS_DIR [ 0 ]		5221257	0		=			
ANR	5221381	ArrayIndexing	dst [ home_len ]		5221257	0					
ANR	5221382	Identifier	dst		5221257	0					
ANR	5221383	Identifier	home_len		5221257	1					
ANR	5221384	ArrayIndexing	R_SYS_DIR [ 0 ]		5221257	1					
ANR	5221385	Identifier	R_SYS_DIR		5221257	0					
ANR	5221386	PrimaryExpression	0		5221257	1					
ANR	5221387	ExpressionStatement	"strcpy ( dst + home_len + 1 , str )"	304:2:6201:6233	5221257	1	True				
ANR	5221388	CallExpression	"strcpy ( dst + home_len + 1 , str )"		5221257	0					
ANR	5221389	Callee	strcpy		5221257	0					
ANR	5221390	Identifier	strcpy		5221257	0					
ANR	5221391	ArgumentList	dst + home_len + 1		5221257	1					
ANR	5221392	Argument	dst + home_len + 1		5221257	0					
ANR	5221393	AdditiveExpression	dst + home_len + 1		5221257	0		+			
ANR	5221394	Identifier	dst		5221257	0					
ANR	5221395	AdditiveExpression	home_len + 1		5221257	1		+			
ANR	5221396	Identifier	home_len		5221257	0					
ANR	5221397	PrimaryExpression	1		5221257	1					
ANR	5221398	Argument	str		5221257	1					
ANR	5221399	Identifier	str		5221257	0					
ANR	5221400	Label	fail :	306:0:6238:6242	5221257	10	True				
ANR	5221401	Identifier	fail		5221257	0					
ANR	5221402	ExpressionStatement	free ( home )	307:1:6245:6256	5221257	11	True				
ANR	5221403	CallExpression	free ( home )		5221257	0					
ANR	5221404	Callee	free		5221257	0					
ANR	5221405	Identifier	free		5221257	0					
ANR	5221406	ArgumentList	home		5221257	1					
ANR	5221407	Argument	home		5221257	0					
ANR	5221408	Identifier	home		5221257	0					
ANR	5221409	ReturnStatement	return dst ;	308:1:6259:6269	5221257	12	True				
ANR	5221410	Identifier	dst		5221257	0					
ANR	5221411	ReturnType	R_API char *		5221257	1					
ANR	5221412	Identifier	r_str_home		5221257	2					
ANR	5221413	ParameterList	const char * str		5221257	3					
ANR	5221414	Parameter	const char * str	283:23:5776:5790	5221257	0	True				
ANR	5221415	ParameterType	const char *		5221257	0					
ANR	5221416	Identifier	str		5221257	1					
ANR	5221417	CFGEntryNode	ENTRY		5221257		True				
ANR	5221418	CFGExitNode	EXIT		5221257		True				
ANR	5221419	Symbol	malloc		5221257						
ANR	5221420	Symbol	r_file_tmpdir		5221257						
ANR	5221421	Symbol	NULL		5221257						
ANR	5221422	Symbol	dst		5221257						
ANR	5221423	Symbol	r_sys_getenv		5221257						
ANR	5221424	Symbol	R_SYS_HOME		5221257						
ANR	5221425	Symbol	length		5221257						
ANR	5221426	Symbol	* R_SYS_DIR		5221257						
ANR	5221427	Symbol	home		5221257						
ANR	5221428	Symbol	* home_len		5221257						
ANR	5221429	Symbol	str		5221257						
ANR	5221430	Symbol	* dst		5221257						
ANR	5221431	Symbol	strlen		5221257						
ANR	5221432	Symbol	R_SYS_DIR		5221257						
ANR	5221433	Symbol	home_len		5221257						
ANR	5221434	Function	r_str_r2_prefix	311:0:6274:6389							
ANR	5221435	FunctionDef	r_str_r2_prefix (const char * str)		5221434	0					
ANR	5221436	CompoundStatement		311:45:6319:6389	5221434	0					
ANR	5221437	ReturnStatement	"return r_str_newf ( ""%s%s%s"" , r_sys_prefix ( NULL ) , R_SYS_DIR , str ) ;"	312:1:6322:6387	5221434	0	True				
ANR	5221438	CallExpression	"r_str_newf ( ""%s%s%s"" , r_sys_prefix ( NULL ) , R_SYS_DIR , str )"		5221434	0					
ANR	5221439	Callee	r_str_newf		5221434	0					
ANR	5221440	Identifier	r_str_newf		5221434	0					
ANR	5221441	ArgumentList	"""%s%s%s"""		5221434	1					
ANR	5221442	Argument	"""%s%s%s"""		5221434	0					
ANR	5221443	PrimaryExpression	"""%s%s%s"""		5221434	0					
ANR	5221444	Argument	r_sys_prefix ( NULL )		5221434	1					
ANR	5221445	CallExpression	r_sys_prefix ( NULL )		5221434	0					
ANR	5221446	Callee	r_sys_prefix		5221434	0					
ANR	5221447	Identifier	r_sys_prefix		5221434	0					
ANR	5221448	ArgumentList	NULL		5221434	1					
ANR	5221449	Argument	NULL		5221434	0					
ANR	5221450	Identifier	NULL		5221434	0					
ANR	5221451	Argument	R_SYS_DIR		5221434	2					
ANR	5221452	Identifier	R_SYS_DIR		5221434	0					
ANR	5221453	Argument	str		5221434	3					
ANR	5221454	Identifier	str		5221434	0					
ANR	5221455	ReturnType	R_API char *		5221434	1					
ANR	5221456	Identifier	r_str_r2_prefix		5221434	2					
ANR	5221457	ParameterList	const char * str		5221434	3					
ANR	5221458	Parameter	const char * str	311:28:6302:6316	5221434	0	True				
ANR	5221459	ParameterType	const char *		5221434	0					
ANR	5221460	Identifier	str		5221434	1					
ANR	5221461	CFGEntryNode	ENTRY		5221434		True				
ANR	5221462	CFGExitNode	EXIT		5221434		True				
ANR	5221463	Symbol	str		5221434						
ANR	5221464	Symbol	R_SYS_DIR		5221434						
ANR	5221465	Symbol	NULL		5221434						
ANR	5221466	Symbol	r_str_newf		5221434						
ANR	5221467	Symbol	r_sys_prefix		5221434						
ANR	5221468	Function	r_str_hash64	316:0:6434:6607							
ANR	5221469	FunctionDef	r_str_hash64 (const char * s)		5221468	0					
ANR	5221470	CompoundStatement		316:39:6473:6607	5221468	0					
ANR	5221471	IdentifierDeclStatement	"ut64 len , h = 5381 ;"	317:1:6476:6494	5221468	0	True				
ANR	5221472	IdentifierDecl	len		5221468	0					
ANR	5221473	IdentifierDeclType	ut64		5221468	0					
ANR	5221474	Identifier	len		5221468	1					
ANR	5221475	IdentifierDecl	h = 5381		5221468	1					
ANR	5221476	IdentifierDeclType	ut64		5221468	0					
ANR	5221477	Identifier	h		5221468	1					
ANR	5221478	AssignmentExpression	h = 5381		5221468	2		=			
ANR	5221479	Identifier	h		5221468	0					
ANR	5221480	PrimaryExpression	5381		5221468	1					
ANR	5221481	IfStatement	if ( ! s )		5221468	1					
ANR	5221482	Condition	! s	318:5:6501:6502	5221468	0	True				
ANR	5221483	UnaryOperationExpression	! s		5221468	0					
ANR	5221484	UnaryOperator	!		5221468	0					
ANR	5221485	Identifier	s		5221468	1					
ANR	5221486	CompoundStatement		3:9:31:31	5221468	1					
ANR	5221487	ReturnStatement	return 0 ;	319:2:6509:6517	5221468	0	True				
ANR	5221488	PrimaryExpression	0		5221468	0					
ANR	5221489	ForStatement	for ( len = strlen ( s ) ; len > 0 ; len -- )		5221468	2					
ANR	5221490	ForInit	len = strlen ( s ) ;	321:6:6528:6544	5221468	0	True				
ANR	5221491	AssignmentExpression	len = strlen ( s )		5221468	0		=			
ANR	5221492	Identifier	len		5221468	0					
ANR	5221493	CallExpression	strlen ( s )		5221468	1					
ANR	5221494	Callee	strlen		5221468	0					
ANR	5221495	Identifier	strlen		5221468	0					
ANR	5221496	ArgumentList	s		5221468	1					
ANR	5221497	Argument	s		5221468	0					
ANR	5221498	Identifier	s		5221468	0					
ANR	5221499	Condition	len > 0	321:24:6546:6552	5221468	1	True				
ANR	5221500	RelationalExpression	len > 0		5221468	0		>			
ANR	5221501	Identifier	len		5221468	0					
ANR	5221502	PrimaryExpression	0		5221468	1					
ANR	5221503	PostIncDecOperationExpression	len --	321:33:6555:6559	5221468	2	True				
ANR	5221504	Identifier	len		5221468	0					
ANR	5221505	IncDec	--		5221468	1					
ANR	5221506	CompoundStatement		6:40:88:88	5221468	3					
ANR	5221507	ExpressionStatement	h = ( h ^ ( h << 5 ) ) ^ * s ++	322:2:6566:6591	5221468	0	True				
ANR	5221508	AssignmentExpression	h = ( h ^ ( h << 5 ) ) ^ * s ++		5221468	0		=			
ANR	5221509	Identifier	h		5221468	0					
ANR	5221510	ExclusiveOrExpression	( h ^ ( h << 5 ) ) ^ * s ++		5221468	1		^			
ANR	5221511	ExclusiveOrExpression	h ^ ( h << 5 )		5221468	0		^			
ANR	5221512	Identifier	h		5221468	0					
ANR	5221513	ShiftExpression	h << 5		5221468	1		<<			
ANR	5221514	Identifier	h		5221468	0					
ANR	5221515	PrimaryExpression	5		5221468	1					
ANR	5221516	UnaryOperationExpression	* s ++		5221468	1					
ANR	5221517	UnaryOperator	*		5221468	0					
ANR	5221518	PostIncDecOperationExpression	s ++		5221468	1					
ANR	5221519	Identifier	s		5221468	0					
ANR	5221520	IncDec	++		5221468	1					
ANR	5221521	ReturnStatement	return h ;	324:1:6597:6605	5221468	3	True				
ANR	5221522	Identifier	h		5221468	0					
ANR	5221523	ReturnType	R_API ut64		5221468	1					
ANR	5221524	Identifier	r_str_hash64		5221468	2					
ANR	5221525	ParameterList	const char * s		5221468	3					
ANR	5221526	Parameter	const char * s	316:24:6458:6470	5221468	0	True				
ANR	5221527	ParameterType	const char *		5221468	0					
ANR	5221528	Identifier	s		5221468	1					
ANR	5221529	CFGEntryNode	ENTRY		5221468		True				
ANR	5221530	CFGExitNode	EXIT		5221468		True				
ANR	5221531	Symbol	* s ++		5221468						
ANR	5221532	Symbol	strlen		5221468						
ANR	5221533	Symbol	s		5221468						
ANR	5221534	Symbol	len		5221468						
ANR	5221535	Symbol	h		5221468						
ANR	5221536	Function	r_str_hash	328:0:6651:6723							
ANR	5221537	FunctionDef	r_str_hash (const char * s)		5221536	0					
ANR	5221538	CompoundStatement		328:37:6688:6723	5221536	0					
ANR	5221539	ReturnStatement	return ( ut32 ) r_str_hash64 ( s ) ;	329:1:6691:6721	5221536	0	True				
ANR	5221540	CastExpression	( ut32 ) r_str_hash64 ( s )		5221536	0					
ANR	5221541	CastTarget	ut32		5221536	0					
ANR	5221542	CallExpression	r_str_hash64 ( s )		5221536	1					
ANR	5221543	Callee	r_str_hash64		5221536	0					
ANR	5221544	Identifier	r_str_hash64		5221536	0					
ANR	5221545	ArgumentList	s		5221536	1					
ANR	5221546	Argument	s		5221536	0					
ANR	5221547	Identifier	s		5221536	0					
ANR	5221548	ReturnType	R_API ut32		5221536	1					
ANR	5221549	Identifier	r_str_hash		5221536	2					
ANR	5221550	ParameterList	const char * s		5221536	3					
ANR	5221551	Parameter	const char * s	328:22:6673:6685	5221536	0	True				
ANR	5221552	ParameterType	const char *		5221536	0					
ANR	5221553	Identifier	s		5221536	1					
ANR	5221554	CFGEntryNode	ENTRY		5221536		True				
ANR	5221555	CFGExitNode	EXIT		5221536		True				
ANR	5221556	Symbol	s		5221536						
ANR	5221557	Symbol	r_str_hash64		5221536						
ANR	5221558	Function	r_str_delta	332:0:6726:6866							
ANR	5221559	FunctionDef	"r_str_delta (char * p , char a , char b)"		5221558	0					
ANR	5221560	CompoundStatement		332:47:6773:6866	5221558	0					
ANR	5221561	IdentifierDeclStatement	"char * _a = strchr ( p , a ) ;"	333:1:6776:6800	5221558	0	True				
ANR	5221562	IdentifierDecl	"* _a = strchr ( p , a )"		5221558	0					
ANR	5221563	IdentifierDeclType	char *		5221558	0					
ANR	5221564	Identifier	_a		5221558	1					
ANR	5221565	AssignmentExpression	"* _a = strchr ( p , a )"		5221558	2		=			
ANR	5221566	Identifier	_a		5221558	0					
ANR	5221567	CallExpression	"strchr ( p , a )"		5221558	1					
ANR	5221568	Callee	strchr		5221558	0					
ANR	5221569	Identifier	strchr		5221558	0					
ANR	5221570	ArgumentList	p		5221558	1					
ANR	5221571	Argument	p		5221558	0					
ANR	5221572	Identifier	p		5221558	0					
ANR	5221573	Argument	a		5221558	1					
ANR	5221574	Identifier	a		5221558	0					
ANR	5221575	IdentifierDeclStatement	"char * _b = strchr ( p , b ) ;"	334:1:6803:6827	5221558	1	True				
ANR	5221576	IdentifierDecl	"* _b = strchr ( p , b )"		5221558	0					
ANR	5221577	IdentifierDeclType	char *		5221558	0					
ANR	5221578	Identifier	_b		5221558	1					
ANR	5221579	AssignmentExpression	"* _b = strchr ( p , b )"		5221558	2		=			
ANR	5221580	Identifier	_b		5221558	0					
ANR	5221581	CallExpression	"strchr ( p , b )"		5221558	1					
ANR	5221582	Callee	strchr		5221558	0					
ANR	5221583	Identifier	strchr		5221558	0					
ANR	5221584	ArgumentList	p		5221558	1					
ANR	5221585	Argument	p		5221558	0					
ANR	5221586	Identifier	p		5221558	0					
ANR	5221587	Argument	b		5221558	1					
ANR	5221588	Identifier	b		5221558	0					
ANR	5221589	ReturnStatement	return ( ! _a || ! _b ) ? 0 : ( _a - _b ) ;	335:1:6830:6864	5221558	2	True				
ANR	5221590	ConditionalExpression	( ! _a || ! _b ) ? 0 : ( _a - _b )		5221558	0					
ANR	5221591	Condition	! _a || ! _b		5221558	0					
ANR	5221592	OrExpression	! _a || ! _b		5221558	0		||			
ANR	5221593	UnaryOperationExpression	! _a		5221558	0					
ANR	5221594	UnaryOperator	!		5221558	0					
ANR	5221595	Identifier	_a		5221558	1					
ANR	5221596	UnaryOperationExpression	! _b		5221558	1					
ANR	5221597	UnaryOperator	!		5221558	0					
ANR	5221598	Identifier	_b		5221558	1					
ANR	5221599	PrimaryExpression	0		5221558	1					
ANR	5221600	AdditiveExpression	_a - _b		5221558	2		-			
ANR	5221601	Identifier	_a		5221558	0					
ANR	5221602	Identifier	_b		5221558	1					
ANR	5221603	ReturnType	R_API int		5221558	1					
ANR	5221604	Identifier	r_str_delta		5221558	2					
ANR	5221605	ParameterList	"char * p , char a , char b"		5221558	3					
ANR	5221606	Parameter	char * p	332:22:6748:6754	5221558	0	True				
ANR	5221607	ParameterType	char *		5221558	0					
ANR	5221608	Identifier	p		5221558	1					
ANR	5221609	Parameter	char a	332:31:6757:6762	5221558	1	True				
ANR	5221610	ParameterType	char		5221558	0					
ANR	5221611	Identifier	a		5221558	1					
ANR	5221612	Parameter	char b	332:39:6765:6770	5221558	2	True				
ANR	5221613	ParameterType	char		5221558	0					
ANR	5221614	Identifier	b		5221558	1					
ANR	5221615	CFGEntryNode	ENTRY		5221558		True				
ANR	5221616	CFGExitNode	EXIT		5221558		True				
ANR	5221617	Symbol	p		5221558						
ANR	5221618	Symbol	a		5221558						
ANR	5221619	Symbol	b		5221558						
ANR	5221620	Symbol	_a		5221558						
ANR	5221621	Symbol	_b		5221558						
ANR	5221622	Symbol	strchr		5221558						
ANR	5221623	Function	r_str_split	342:0:7103:7336							
ANR	5221624	FunctionDef	"r_str_split (char * str , char ch)"		5221623	0					
ANR	5221625	CompoundStatement		342:42:7145:7336	5221623	0					
ANR	5221626	IdentifierDeclStatement	int i ;	343:1:7148:7153	5221623	0	True				
ANR	5221627	IdentifierDecl	i		5221623	0					
ANR	5221628	IdentifierDeclType	int		5221623	0					
ANR	5221629	Identifier	i		5221623	1					
ANR	5221630	IdentifierDeclStatement	char * p ;	344:1:7156:7163	5221623	1	True				
ANR	5221631	IdentifierDecl	* p		5221623	0					
ANR	5221632	IdentifierDeclType	char *		5221623	0					
ANR	5221633	Identifier	p		5221623	1					
ANR	5221634	IfStatement	if ( ! str || ! * str )		5221623	2					
ANR	5221635	Condition	! str || ! * str	345:5:7170:7182	5221623	0	True				
ANR	5221636	OrExpression	! str || ! * str		5221623	0		||			
ANR	5221637	UnaryOperationExpression	! str		5221623	0					
ANR	5221638	UnaryOperator	!		5221623	0					
ANR	5221639	Identifier	str		5221623	1					
ANR	5221640	UnaryOperationExpression	! * str		5221623	1					
ANR	5221641	UnaryOperator	!		5221623	0					
ANR	5221642	UnaryOperationExpression	* str		5221623	1					
ANR	5221643	UnaryOperator	*		5221623	0					
ANR	5221644	Identifier	str		5221623	1					
ANR	5221645	CompoundStatement		4:20:39:39	5221623	1					
ANR	5221646	ReturnStatement	return 0 ;	346:2:7189:7197	5221623	0	True				
ANR	5221647	PrimaryExpression	0		5221623	0					
ANR	5221648	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		5221623	3					
ANR	5221649	ForInit	"i = 1 , p = str ;"	349:6:7239:7253	5221623	0	True				
ANR	5221650	Expression	"i = 1 , p = str"		5221623	0					
ANR	5221651	AssignmentExpression	i = 1		5221623	0		=			
ANR	5221652	Identifier	i		5221623	0					
ANR	5221653	PrimaryExpression	1		5221623	1					
ANR	5221654	AssignmentExpression	p = str		5221623	1		=			
ANR	5221655	Identifier	p		5221623	0					
ANR	5221656	Identifier	str		5221623	1					
ANR	5221657	Condition	* p	349:22:7255:7256	5221623	1	True				
ANR	5221658	UnaryOperationExpression	* p		5221623	0					
ANR	5221659	UnaryOperator	*		5221623	0					
ANR	5221660	Identifier	p		5221623	1					
ANR	5221661	PostIncDecOperationExpression	p ++	349:26:7259:7261	5221623	2	True				
ANR	5221662	Identifier	p		5221623	0					
ANR	5221663	IncDec	++		5221623	1					
ANR	5221664	CompoundStatement		8:31:118:118	5221623	3					
ANR	5221665	IfStatement	if ( * p == ch )		5221623	0					
ANR	5221666	Condition	* p == ch	350:6:7272:7279	5221623	0	True				
ANR	5221667	EqualityExpression	* p == ch		5221623	0		==			
ANR	5221668	UnaryOperationExpression	* p		5221623	0					
ANR	5221669	UnaryOperator	*		5221623	0					
ANR	5221670	Identifier	p		5221623	1					
ANR	5221671	Identifier	ch		5221623	1					
ANR	5221672	CompoundStatement		9:16:136:136	5221623	1					
ANR	5221673	ExpressionStatement	i ++	351:3:7287:7290	5221623	0	True				
ANR	5221674	PostIncDecOperationExpression	i ++		5221623	0					
ANR	5221675	Identifier	i		5221623	0					
ANR	5221676	IncDec	++		5221623	1					
ANR	5221677	ExpressionStatement	* p = '\\0'	352:3:7295:7304	5221623	1	True				
ANR	5221678	AssignmentExpression	* p = '\\0'		5221623	0		=			
ANR	5221679	UnaryOperationExpression	* p		5221623	0					
ANR	5221680	UnaryOperator	*		5221623	0					
ANR	5221681	Identifier	p		5221623	1					
ANR	5221682	PrimaryExpression	'\\0'		5221623	1					
ANR	5221683	ReturnStatement	return i ;	355:1:7326:7334	5221623	4	True				
ANR	5221684	Identifier	i		5221623	0					
ANR	5221685	ReturnType	R_API int		5221623	1					
ANR	5221686	Identifier	r_str_split		5221623	2					
ANR	5221687	ParameterList	"char * str , char ch"		5221623	3					
ANR	5221688	Parameter	char * str	342:22:7125:7133	5221623	0	True				
ANR	5221689	ParameterType	char *		5221623	0					
ANR	5221690	Identifier	str		5221623	1					
ANR	5221691	Parameter	char ch	342:33:7136:7142	5221623	1	True				
ANR	5221692	ParameterType	char		5221623	0					
ANR	5221693	Identifier	ch		5221623	1					
ANR	5221694	CFGEntryNode	ENTRY		5221623		True				
ANR	5221695	CFGExitNode	EXIT		5221623		True				
ANR	5221696	Symbol	str		5221623						
ANR	5221697	Symbol	p		5221623						
ANR	5221698	Symbol	ch		5221623						
ANR	5221699	Symbol	i		5221623						
ANR	5221700	Symbol	* p		5221623						
ANR	5221701	Symbol	* str		5221623						
ANR	5221702	Function	r_str_word_set0	362:0:7529:8342							
ANR	5221703	FunctionDef	r_str_word_set0 (char * str)		5221702	0					
ANR	5221704	CompoundStatement		362:37:7566:8342	5221702	0					
ANR	5221705	IdentifierDeclStatement	"int i , quote = 0 ;"	363:1:7569:7585	5221702	0	True				
ANR	5221706	IdentifierDecl	i		5221702	0					
ANR	5221707	IdentifierDeclType	int		5221702	0					
ANR	5221708	Identifier	i		5221702	1					
ANR	5221709	IdentifierDecl	quote = 0		5221702	1					
ANR	5221710	IdentifierDeclType	int		5221702	0					
ANR	5221711	Identifier	quote		5221702	1					
ANR	5221712	AssignmentExpression	quote = 0		5221702	2		=			
ANR	5221713	Identifier	quote		5221702	0					
ANR	5221714	PrimaryExpression	0		5221702	1					
ANR	5221715	IdentifierDeclStatement	char * p ;	364:1:7588:7595	5221702	1	True				
ANR	5221716	IdentifierDecl	* p		5221702	0					
ANR	5221717	IdentifierDeclType	char *		5221702	0					
ANR	5221718	Identifier	p		5221702	1					
ANR	5221719	IfStatement	if ( ! str || ! * str )		5221702	2					
ANR	5221720	Condition	! str || ! * str	365:5:7602:7614	5221702	0	True				
ANR	5221721	OrExpression	! str || ! * str		5221702	0		||			
ANR	5221722	UnaryOperationExpression	! str		5221702	0					
ANR	5221723	UnaryOperator	!		5221702	0					
ANR	5221724	Identifier	str		5221702	1					
ANR	5221725	UnaryOperationExpression	! * str		5221702	1					
ANR	5221726	UnaryOperator	!		5221702	0					
ANR	5221727	UnaryOperationExpression	* str		5221702	1					
ANR	5221728	UnaryOperator	*		5221702	0					
ANR	5221729	Identifier	str		5221702	1					
ANR	5221730	CompoundStatement		4:20:50:50	5221702	1					
ANR	5221731	ReturnStatement	return 0 ;	366:2:7621:7629	5221702	0	True				
ANR	5221732	PrimaryExpression	0		5221702	0					
ANR	5221733	ForStatement	for ( i = 0 ; str [ i ] && str [ i + 1 ] ; i ++ )		5221702	3					
ANR	5221734	ForInit	i = 0 ;	368:6:7640:7645	5221702	0	True				
ANR	5221735	AssignmentExpression	i = 0		5221702	0		=			
ANR	5221736	Identifier	i		5221702	0					
ANR	5221737	PrimaryExpression	0		5221702	1					
ANR	5221738	Condition	str [ i ] && str [ i + 1 ]	368:13:7647:7666	5221702	1	True				
ANR	5221739	AndExpression	str [ i ] && str [ i + 1 ]		5221702	0		&&			
ANR	5221740	ArrayIndexing	str [ i ]		5221702	0					
ANR	5221741	Identifier	str		5221702	0					
ANR	5221742	Identifier	i		5221702	1					
ANR	5221743	ArrayIndexing	str [ i + 1 ]		5221702	1					
ANR	5221744	Identifier	str		5221702	0					
ANR	5221745	AdditiveExpression	i + 1		5221702	1		+			
ANR	5221746	Identifier	i		5221702	0					
ANR	5221747	PrimaryExpression	1		5221702	1					
ANR	5221748	PostIncDecOperationExpression	i ++	368:35:7669:7671	5221702	2	True				
ANR	5221749	Identifier	i		5221702	0					
ANR	5221750	IncDec	++		5221702	1					
ANR	5221751	CompoundStatement		7:40:107:107	5221702	3					
ANR	5221752	IfStatement	if ( i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' ' )		5221702	0					
ANR	5221753	Condition	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '	369:6:7682:7722	5221702	0	True				
ANR	5221754	AndExpression	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '		5221702	0		&&			
ANR	5221755	RelationalExpression	i > 0		5221702	0		>			
ANR	5221756	Identifier	i		5221702	0					
ANR	5221757	PrimaryExpression	0		5221702	1					
ANR	5221758	AndExpression	str [ i - 1 ] == ' ' && str [ i ] == ' '		5221702	1		&&			
ANR	5221759	EqualityExpression	str [ i - 1 ] == ' '		5221702	0		==			
ANR	5221760	ArrayIndexing	str [ i - 1 ]		5221702	0					
ANR	5221761	Identifier	str		5221702	0					
ANR	5221762	AdditiveExpression	i - 1		5221702	1		-			
ANR	5221763	Identifier	i		5221702	0					
ANR	5221764	PrimaryExpression	1		5221702	1					
ANR	5221765	PrimaryExpression	' '		5221702	1					
ANR	5221766	EqualityExpression	str [ i ] == ' '		5221702	1		==			
ANR	5221767	ArrayIndexing	str [ i ]		5221702	0					
ANR	5221768	Identifier	str		5221702	0					
ANR	5221769	Identifier	i		5221702	1					
ANR	5221770	PrimaryExpression	' '		5221702	1					
ANR	5221771	CompoundStatement		9:3:163:189	5221702	1					
ANR	5221772	IdentifierDeclStatement	int len = strlen ( str + i ) ;	370:3:7730:7756	5221702	0	True				
ANR	5221773	IdentifierDecl	len = strlen ( str + i )		5221702	0					
ANR	5221774	IdentifierDeclType	int		5221702	0					
ANR	5221775	Identifier	len		5221702	1					
ANR	5221776	AssignmentExpression	len = strlen ( str + i )		5221702	2		=			
ANR	5221777	Identifier	len		5221702	0					
ANR	5221778	CallExpression	strlen ( str + i )		5221702	1					
ANR	5221779	Callee	strlen		5221702	0					
ANR	5221780	Identifier	strlen		5221702	0					
ANR	5221781	ArgumentList	str + i		5221702	1					
ANR	5221782	Argument	str + i		5221702	0					
ANR	5221783	AdditiveExpression	str + i		5221702	0		+			
ANR	5221784	Identifier	str		5221702	0					
ANR	5221785	Identifier	i		5221702	1					
ANR	5221786	ExpressionStatement	"memmove ( str + i , str + i + 1 , len )"	371:3:7761:7796	5221702	1	True				
ANR	5221787	CallExpression	"memmove ( str + i , str + i + 1 , len )"		5221702	0					
ANR	5221788	Callee	memmove		5221702	0					
ANR	5221789	Identifier	memmove		5221702	0					
ANR	5221790	ArgumentList	str + i		5221702	1					
ANR	5221791	Argument	str + i		5221702	0					
ANR	5221792	AdditiveExpression	str + i		5221702	0		+			
ANR	5221793	Identifier	str		5221702	0					
ANR	5221794	Identifier	i		5221702	1					
ANR	5221795	Argument	str + i + 1		5221702	1					
ANR	5221796	AdditiveExpression	str + i + 1		5221702	0		+			
ANR	5221797	Identifier	str		5221702	0					
ANR	5221798	AdditiveExpression	i + 1		5221702	1		+			
ANR	5221799	Identifier	i		5221702	0					
ANR	5221800	PrimaryExpression	1		5221702	1					
ANR	5221801	Argument	len		5221702	2					
ANR	5221802	Identifier	len		5221702	0					
ANR	5221803	ExpressionStatement	i --	372:3:7801:7804	5221702	2	True				
ANR	5221804	PostIncDecOperationExpression	i --		5221702	0					
ANR	5221805	Identifier	i		5221702	0					
ANR	5221806	IncDec	--		5221702	1					
ANR	5221807	IfStatement	if ( str [ i ] == ' ' )		5221702	4					
ANR	5221808	Condition	str [ i ] == ' '	375:5:7818:7830	5221702	0	True				
ANR	5221809	EqualityExpression	str [ i ] == ' '		5221702	0		==			
ANR	5221810	ArrayIndexing	str [ i ]		5221702	0					
ANR	5221811	Identifier	str		5221702	0					
ANR	5221812	Identifier	i		5221702	1					
ANR	5221813	PrimaryExpression	' '		5221702	1					
ANR	5221814	CompoundStatement		14:20:266:266	5221702	1					
ANR	5221815	ExpressionStatement	str [ i ] = 0	376:2:7837:7847	5221702	0	True				
ANR	5221816	AssignmentExpression	str [ i ] = 0		5221702	0		=			
ANR	5221817	ArrayIndexing	str [ i ]		5221702	0					
ANR	5221818	Identifier	str		5221702	0					
ANR	5221819	Identifier	i		5221702	1					
ANR	5221820	PrimaryExpression	0		5221702	1					
ANR	5221821	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		5221702	5					
ANR	5221822	ForInit	"i = 1 , p = str ;"	378:6:7858:7872	5221702	0	True				
ANR	5221823	Expression	"i = 1 , p = str"		5221702	0					
ANR	5221824	AssignmentExpression	i = 1		5221702	0		=			
ANR	5221825	Identifier	i		5221702	0					
ANR	5221826	PrimaryExpression	1		5221702	1					
ANR	5221827	AssignmentExpression	p = str		5221702	1		=			
ANR	5221828	Identifier	p		5221702	0					
ANR	5221829	Identifier	str		5221702	1					
ANR	5221830	Condition	* p	378:22:7874:7875	5221702	1	True				
ANR	5221831	UnaryOperationExpression	* p		5221702	0					
ANR	5221832	UnaryOperator	*		5221702	0					
ANR	5221833	Identifier	p		5221702	1					
ANR	5221834	PostIncDecOperationExpression	p ++	378:26:7878:7880	5221702	2	True				
ANR	5221835	Identifier	p		5221702	0					
ANR	5221836	IncDec	++		5221702	1					
ANR	5221837	CompoundStatement		17:31:316:316	5221702	3					
ANR	5221838	IfStatement	"if ( * p == '\\""' )"		5221702	0					
ANR	5221839	Condition	"* p == '\\""'"	379:6:7891:7900	5221702	0	True				
ANR	5221840	EqualityExpression	"* p == '\\""'"		5221702	0		==			
ANR	5221841	UnaryOperationExpression	* p		5221702	0					
ANR	5221842	UnaryOperator	*		5221702	0					
ANR	5221843	Identifier	p		5221702	1					
ANR	5221844	PrimaryExpression	"'\\""'"		5221702	1					
ANR	5221845	CompoundStatement		18:18:336:336	5221702	1					
ANR	5221846	IfStatement	if ( quote )		5221702	0					
ANR	5221847	Condition	quote	380:7:7912:7916	5221702	0	True				
ANR	5221848	Identifier	quote		5221702	0					
ANR	5221849	CompoundStatement		19:14:352:352	5221702	1					
ANR	5221850	ExpressionStatement	quote = 0	381:4:7925:7934	5221702	0	True				
ANR	5221851	AssignmentExpression	quote = 0		5221702	0		=			
ANR	5221852	Identifier	quote		5221702	0					
ANR	5221853	PrimaryExpression	0		5221702	1					
ANR	5221854	ExpressionStatement	* p = '\\0'	382:4:7940:7949	5221702	1	True				
ANR	5221855	AssignmentExpression	* p = '\\0'		5221702	0		=			
ANR	5221856	UnaryOperationExpression	* p		5221702	0					
ANR	5221857	UnaryOperator	*		5221702	0					
ANR	5221858	Identifier	p		5221702	1					
ANR	5221859	PrimaryExpression	'\\0'		5221702	1					
ANR	5221860	ContinueStatement	continue ;	384:4:7972:7980	5221702	2	True				
ANR	5221861	ElseStatement	else		5221702	0					
ANR	5221862	CompoundStatement		24:10:425:425	5221702	0					
ANR	5221863	ExpressionStatement	quote = 1	386:4:7998:8007	5221702	0	True				
ANR	5221864	AssignmentExpression	quote = 1		5221702	0		=			
ANR	5221865	Identifier	quote		5221702	0					
ANR	5221866	PrimaryExpression	1		5221702	1					
ANR	5221867	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	387:4:8013:8051	5221702	1	True				
ANR	5221868	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		5221702	0					
ANR	5221869	Callee	memmove		5221702	0					
ANR	5221870	Identifier	memmove		5221702	0					
ANR	5221871	ArgumentList	p		5221702	1					
ANR	5221872	Argument	p		5221702	0					
ANR	5221873	Identifier	p		5221702	0					
ANR	5221874	Argument	p + 1		5221702	1					
ANR	5221875	AdditiveExpression	p + 1		5221702	0		+			
ANR	5221876	Identifier	p		5221702	0					
ANR	5221877	PrimaryExpression	1		5221702	1					
ANR	5221878	Argument	strlen ( p + 1 ) + 1		5221702	2					
ANR	5221879	AdditiveExpression	strlen ( p + 1 ) + 1		5221702	0		+			
ANR	5221880	CallExpression	strlen ( p + 1 )		5221702	0					
ANR	5221881	Callee	strlen		5221702	0					
ANR	5221882	Identifier	strlen		5221702	0					
ANR	5221883	ArgumentList	p + 1		5221702	1					
ANR	5221884	Argument	p + 1		5221702	0					
ANR	5221885	AdditiveExpression	p + 1		5221702	0		+			
ANR	5221886	Identifier	p		5221702	0					
ANR	5221887	PrimaryExpression	1		5221702	1					
ANR	5221888	PrimaryExpression	1		5221702	1					
ANR	5221889	IfStatement	if ( quote )		5221702	1					
ANR	5221890	Condition	quote	390:6:8068:8072	5221702	0	True				
ANR	5221891	Identifier	quote		5221702	0					
ANR	5221892	CompoundStatement		29:13:508:508	5221702	1					
ANR	5221893	ContinueStatement	continue ;	391:3:8080:8088	5221702	0	True				
ANR	5221894	IfStatement	if ( * p == ' ' )		5221702	2					
ANR	5221895	Condition	* p == ' '	393:6:8100:8108	5221702	0	True				
ANR	5221896	EqualityExpression	* p == ' '		5221702	0		==			
ANR	5221897	UnaryOperationExpression	* p		5221702	0					
ANR	5221898	UnaryOperator	*		5221702	0					
ANR	5221899	Identifier	p		5221702	1					
ANR	5221900	PrimaryExpression	' '		5221702	1					
ANR	5221901	CompoundStatement		33:3:549:564	5221702	1					
ANR	5221902	IdentifierDeclStatement	char * q = p - 1 ;	394:3:8116:8131	5221702	0	True				
ANR	5221903	IdentifierDecl	* q = p - 1		5221702	0					
ANR	5221904	IdentifierDeclType	char *		5221702	0					
ANR	5221905	Identifier	q		5221702	1					
ANR	5221906	AssignmentExpression	* q = p - 1		5221702	2		=			
ANR	5221907	Identifier	q		5221702	0					
ANR	5221908	AdditiveExpression	p - 1		5221702	1		-			
ANR	5221909	Identifier	p		5221702	0					
ANR	5221910	PrimaryExpression	1		5221702	1					
ANR	5221911	IfStatement	if ( p > str && ( * q == '\\\\' || ! * q ) )		5221702	1					
ANR	5221912	Condition	p > str && ( * q == '\\\\' || ! * q )	395:7:8140:8169	5221702	0	True				
ANR	5221913	AndExpression	p > str && ( * q == '\\\\' || ! * q )		5221702	0		&&			
ANR	5221914	RelationalExpression	p > str		5221702	0		>			
ANR	5221915	Identifier	p		5221702	0					
ANR	5221916	Identifier	str		5221702	1					
ANR	5221917	OrExpression	* q == '\\\\' || ! * q		5221702	1		||			
ANR	5221918	EqualityExpression	* q == '\\\\'		5221702	0		==			
ANR	5221919	UnaryOperationExpression	* q		5221702	0					
ANR	5221920	UnaryOperator	*		5221702	0					
ANR	5221921	Identifier	q		5221702	1					
ANR	5221922	PrimaryExpression	'\\\\'		5221702	1					
ANR	5221923	UnaryOperationExpression	! * q		5221702	1					
ANR	5221924	UnaryOperator	!		5221702	0					
ANR	5221925	UnaryOperationExpression	* q		5221702	1					
ANR	5221926	UnaryOperator	*		5221702	0					
ANR	5221927	Identifier	q		5221702	1					
ANR	5221928	CompoundStatement		34:39:605:605	5221702	1					
ANR	5221929	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	396:4:8178:8216	5221702	0	True				
ANR	5221930	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		5221702	0					
ANR	5221931	Callee	memmove		5221702	0					
ANR	5221932	Identifier	memmove		5221702	0					
ANR	5221933	ArgumentList	p		5221702	1					
ANR	5221934	Argument	p		5221702	0					
ANR	5221935	Identifier	p		5221702	0					
ANR	5221936	Argument	p + 1		5221702	1					
ANR	5221937	AdditiveExpression	p + 1		5221702	0		+			
ANR	5221938	Identifier	p		5221702	0					
ANR	5221939	PrimaryExpression	1		5221702	1					
ANR	5221940	Argument	strlen ( p + 1 ) + 1		5221702	2					
ANR	5221941	AdditiveExpression	strlen ( p + 1 ) + 1		5221702	0		+			
ANR	5221942	CallExpression	strlen ( p + 1 )		5221702	0					
ANR	5221943	Callee	strlen		5221702	0					
ANR	5221944	Identifier	strlen		5221702	0					
ANR	5221945	ArgumentList	p + 1		5221702	1					
ANR	5221946	Argument	p + 1		5221702	0					
ANR	5221947	AdditiveExpression	p + 1		5221702	0		+			
ANR	5221948	Identifier	p		5221702	0					
ANR	5221949	PrimaryExpression	1		5221702	1					
ANR	5221950	PrimaryExpression	1		5221702	1					
ANR	5221951	IfStatement	if ( * q == '\\\\' )		5221702	1					
ANR	5221952	Condition	* q == '\\\\'	397:8:8226:8235	5221702	0	True				
ANR	5221953	EqualityExpression	* q == '\\\\'		5221702	0		==			
ANR	5221954	UnaryOperationExpression	* q		5221702	0					
ANR	5221955	UnaryOperator	*		5221702	0					
ANR	5221956	Identifier	q		5221702	1					
ANR	5221957	PrimaryExpression	'\\\\'		5221702	1					
ANR	5221958	CompoundStatement		36:20:671:671	5221702	1					
ANR	5221959	ExpressionStatement	* q = ' '	398:5:8245:8253	5221702	0	True				
ANR	5221960	AssignmentExpression	* q = ' '		5221702	0		=			
ANR	5221961	UnaryOperationExpression	* q		5221702	0					
ANR	5221962	UnaryOperator	*		5221702	0					
ANR	5221963	Identifier	q		5221702	1					
ANR	5221964	PrimaryExpression	' '		5221702	1					
ANR	5221965	ContinueStatement	continue ;	399:5:8260:8268	5221702	1	True				
ANR	5221966	ExpressionStatement	p --	401:4:8280:8283	5221702	2	True				
ANR	5221967	PostIncDecOperationExpression	p --		5221702	0					
ANR	5221968	Identifier	p		5221702	0					
ANR	5221969	IncDec	--		5221702	1					
ANR	5221970	ExpressionStatement	i ++	403:3:8293:8296	5221702	2	True				
ANR	5221971	PostIncDecOperationExpression	i ++		5221702	0					
ANR	5221972	Identifier	i		5221702	0					
ANR	5221973	IncDec	++		5221702	1					
ANR	5221974	ExpressionStatement	* p = '\\0'	404:3:8301:8310	5221702	3	True				
ANR	5221975	AssignmentExpression	* p = '\\0'		5221702	0		=			
ANR	5221976	UnaryOperationExpression	* p		5221702	0					
ANR	5221977	UnaryOperator	*		5221702	0					
ANR	5221978	Identifier	p		5221702	1					
ANR	5221979	PrimaryExpression	'\\0'		5221702	1					
ANR	5221980	ReturnStatement	return i ;	407:1:8332:8340	5221702	6	True				
ANR	5221981	Identifier	i		5221702	0					
ANR	5221982	ReturnType	R_API int		5221702	1					
ANR	5221983	Identifier	r_str_word_set0		5221702	2					
ANR	5221984	ParameterList	char * str		5221702	3					
ANR	5221985	Parameter	char * str	362:26:7555:7563	5221702	0	True				
ANR	5221986	ParameterType	char *		5221702	0					
ANR	5221987	Identifier	str		5221702	1					
ANR	5221988	CFGEntryNode	ENTRY		5221702		True				
ANR	5221989	CFGExitNode	EXIT		5221702		True				
ANR	5221990	Symbol	str		5221702						
ANR	5221991	Symbol	p		5221702						
ANR	5221992	Symbol	strlen		5221702						
ANR	5221993	Symbol	q		5221702						
ANR	5221994	Symbol	quote		5221702						
ANR	5221995	Symbol	* i		5221702						
ANR	5221996	Symbol	len		5221702						
ANR	5221997	Symbol	i		5221702						
ANR	5221998	Symbol	* p		5221702						
ANR	5221999	Symbol	* str		5221702						
ANR	5222000	Symbol	* q		5221702						
ANR	5222001	Function	r_str_word_set0_stack	410:0:8345:9775							
ANR	5222002	FunctionDef	r_str_word_set0_stack (char * str)		5222001	0					
ANR	5222003	CompoundStatement		410:43:8388:9775	5222001	0					
ANR	5222004	IdentifierDeclStatement	int i ;	411:1:8391:8396	5222001	0	True				
ANR	5222005	IdentifierDecl	i		5222001	0					
ANR	5222006	IdentifierDeclType	int		5222001	0					
ANR	5222007	Identifier	i		5222001	1					
ANR	5222008	IdentifierDeclStatement	"char * p , * q ;"	412:1:8399:8410	5222001	1	True				
ANR	5222009	IdentifierDecl	* p		5222001	0					
ANR	5222010	IdentifierDeclType	char *		5222001	0					
ANR	5222011	Identifier	p		5222001	1					
ANR	5222012	IdentifierDecl	* q		5222001	1					
ANR	5222013	IdentifierDeclType	char *		5222001	0					
ANR	5222014	Identifier	q		5222001	1					
ANR	5222015	IdentifierDeclStatement	RStack * s ;	413:1:8413:8422	5222001	2	True				
ANR	5222016	IdentifierDecl	* s		5222001	0					
ANR	5222017	IdentifierDeclType	RStack *		5222001	0					
ANR	5222018	Identifier	s		5222001	1					
ANR	5222019	IdentifierDeclStatement	void * pop ;	414:1:8425:8434	5222001	3	True				
ANR	5222020	IdentifierDecl	* pop		5222001	0					
ANR	5222021	IdentifierDeclType	void *		5222001	0					
ANR	5222022	Identifier	pop		5222001	1					
ANR	5222023	IfStatement	if ( ! str || ! * str )		5222001	4					
ANR	5222024	Condition	! str || ! * str	415:5:8441:8453	5222001	0	True				
ANR	5222025	OrExpression	! str || ! * str		5222001	0		||			
ANR	5222026	UnaryOperationExpression	! str		5222001	0					
ANR	5222027	UnaryOperator	!		5222001	0					
ANR	5222028	Identifier	str		5222001	1					
ANR	5222029	UnaryOperationExpression	! * str		5222001	1					
ANR	5222030	UnaryOperator	!		5222001	0					
ANR	5222031	UnaryOperationExpression	* str		5222001	1					
ANR	5222032	UnaryOperator	*		5222001	0					
ANR	5222033	Identifier	str		5222001	1					
ANR	5222034	CompoundStatement		6:20:67:67	5222001	1					
ANR	5222035	ReturnStatement	return 0 ;	416:2:8460:8468	5222001	0	True				
ANR	5222036	PrimaryExpression	0		5222001	0					
ANR	5222037	ForStatement	for ( i = 0 ; str [ i ] && str [ i + 1 ] ; i ++ )		5222001	5					
ANR	5222038	ForInit	i = 0 ;	418:6:8479:8484	5222001	0	True				
ANR	5222039	AssignmentExpression	i = 0		5222001	0		=			
ANR	5222040	Identifier	i		5222001	0					
ANR	5222041	PrimaryExpression	0		5222001	1					
ANR	5222042	Condition	str [ i ] && str [ i + 1 ]	418:13:8486:8503	5222001	1	True				
ANR	5222043	AndExpression	str [ i ] && str [ i + 1 ]		5222001	0		&&			
ANR	5222044	ArrayIndexing	str [ i ]		5222001	0					
ANR	5222045	Identifier	str		5222001	0					
ANR	5222046	Identifier	i		5222001	1					
ANR	5222047	ArrayIndexing	str [ i + 1 ]		5222001	1					
ANR	5222048	Identifier	str		5222001	0					
ANR	5222049	AdditiveExpression	i + 1		5222001	1		+			
ANR	5222050	Identifier	i		5222001	0					
ANR	5222051	PrimaryExpression	1		5222001	1					
ANR	5222052	PostIncDecOperationExpression	i ++	418:33:8506:8508	5222001	2	True				
ANR	5222053	Identifier	i		5222001	0					
ANR	5222054	IncDec	++		5222001	1					
ANR	5222055	CompoundStatement		9:38:122:122	5222001	3					
ANR	5222056	IfStatement	if ( i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' ' )		5222001	0					
ANR	5222057	Condition	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '	419:6:8519:8561	5222001	0	True				
ANR	5222058	AndExpression	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '		5222001	0		&&			
ANR	5222059	RelationalExpression	i > 0		5222001	0		>			
ANR	5222060	Identifier	i		5222001	0					
ANR	5222061	PrimaryExpression	0		5222001	1					
ANR	5222062	AndExpression	str [ i - 1 ] == ' ' && str [ i ] == ' '		5222001	1		&&			
ANR	5222063	EqualityExpression	str [ i - 1 ] == ' '		5222001	0		==			
ANR	5222064	ArrayIndexing	str [ i - 1 ]		5222001	0					
ANR	5222065	Identifier	str		5222001	0					
ANR	5222066	AdditiveExpression	i - 1		5222001	1		-			
ANR	5222067	Identifier	i		5222001	0					
ANR	5222068	PrimaryExpression	1		5222001	1					
ANR	5222069	PrimaryExpression	' '		5222001	1					
ANR	5222070	EqualityExpression	str [ i ] == ' '		5222001	1		==			
ANR	5222071	ArrayIndexing	str [ i ]		5222001	0					
ANR	5222072	Identifier	str		5222001	0					
ANR	5222073	Identifier	i		5222001	1					
ANR	5222074	PrimaryExpression	' '		5222001	1					
ANR	5222075	CompoundStatement		10:51:175:175	5222001	1					
ANR	5222076	ExpressionStatement	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"	420:3:8569:8617	5222001	0	True				
ANR	5222077	CallExpression	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"		5222001	0					
ANR	5222078	Callee	memmove		5222001	0					
ANR	5222079	Identifier	memmove		5222001	0					
ANR	5222080	ArgumentList	str + i		5222001	1					
ANR	5222081	Argument	str + i		5222001	0					
ANR	5222082	AdditiveExpression	str + i		5222001	0		+			
ANR	5222083	Identifier	str		5222001	0					
ANR	5222084	Identifier	i		5222001	1					
ANR	5222085	Argument	str + i + 1		5222001	1					
ANR	5222086	AdditiveExpression	str + i + 1		5222001	0		+			
ANR	5222087	Identifier	str		5222001	0					
ANR	5222088	AdditiveExpression	i + 1		5222001	1		+			
ANR	5222089	Identifier	i		5222001	0					
ANR	5222090	PrimaryExpression	1		5222001	1					
ANR	5222091	Argument	strlen ( str + i )		5222001	2					
ANR	5222092	CallExpression	strlen ( str + i )		5222001	0					
ANR	5222093	Callee	strlen		5222001	0					
ANR	5222094	Identifier	strlen		5222001	0					
ANR	5222095	ArgumentList	str + i		5222001	1					
ANR	5222096	Argument	str + i		5222001	0					
ANR	5222097	AdditiveExpression	str + i		5222001	0		+			
ANR	5222098	Identifier	str		5222001	0					
ANR	5222099	Identifier	i		5222001	1					
ANR	5222100	ExpressionStatement	i --	421:3:8622:8625	5222001	1	True				
ANR	5222101	PostIncDecOperationExpression	i --		5222001	0					
ANR	5222102	Identifier	i		5222001	0					
ANR	5222103	IncDec	--		5222001	1					
ANR	5222104	IfStatement	if ( i == 0 && str [ i ] == ' ' )		5222001	1					
ANR	5222105	Condition	i == 0 && str [ i ] == ' '	423:6:8637:8659	5222001	0	True				
ANR	5222106	AndExpression	i == 0 && str [ i ] == ' '		5222001	0		&&			
ANR	5222107	EqualityExpression	i == 0		5222001	0		==			
ANR	5222108	Identifier	i		5222001	0					
ANR	5222109	PrimaryExpression	0		5222001	1					
ANR	5222110	EqualityExpression	str [ i ] == ' '		5222001	1		==			
ANR	5222111	ArrayIndexing	str [ i ]		5222001	0					
ANR	5222112	Identifier	str		5222001	0					
ANR	5222113	Identifier	i		5222001	1					
ANR	5222114	PrimaryExpression	' '		5222001	1					
ANR	5222115	CompoundStatement		14:31:273:273	5222001	1					
ANR	5222116	ExpressionStatement	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"	424:3:8667:8715	5222001	0	True				
ANR	5222117	CallExpression	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"		5222001	0					
ANR	5222118	Callee	memmove		5222001	0					
ANR	5222119	Identifier	memmove		5222001	0					
ANR	5222120	ArgumentList	str + i		5222001	1					
ANR	5222121	Argument	str + i		5222001	0					
ANR	5222122	AdditiveExpression	str + i		5222001	0		+			
ANR	5222123	Identifier	str		5222001	0					
ANR	5222124	Identifier	i		5222001	1					
ANR	5222125	Argument	str + i + 1		5222001	1					
ANR	5222126	AdditiveExpression	str + i + 1		5222001	0		+			
ANR	5222127	Identifier	str		5222001	0					
ANR	5222128	AdditiveExpression	i + 1		5222001	1		+			
ANR	5222129	Identifier	i		5222001	0					
ANR	5222130	PrimaryExpression	1		5222001	1					
ANR	5222131	Argument	strlen ( str + i )		5222001	2					
ANR	5222132	CallExpression	strlen ( str + i )		5222001	0					
ANR	5222133	Callee	strlen		5222001	0					
ANR	5222134	Identifier	strlen		5222001	0					
ANR	5222135	ArgumentList	str + i		5222001	1					
ANR	5222136	Argument	str + i		5222001	0					
ANR	5222137	AdditiveExpression	str + i		5222001	0		+			
ANR	5222138	Identifier	str		5222001	0					
ANR	5222139	Identifier	i		5222001	1					
ANR	5222140	IfStatement	if ( str [ i ] == ' ' )		5222001	6					
ANR	5222141	Condition	str [ i ] == ' '	427:5:8729:8741	5222001	0	True				
ANR	5222142	EqualityExpression	str [ i ] == ' '		5222001	0		==			
ANR	5222143	ArrayIndexing	str [ i ]		5222001	0					
ANR	5222144	Identifier	str		5222001	0					
ANR	5222145	Identifier	i		5222001	1					
ANR	5222146	PrimaryExpression	' '		5222001	1					
ANR	5222147	CompoundStatement		18:20:355:355	5222001	1					
ANR	5222148	ExpressionStatement	str [ i ] = 0	428:2:8748:8758	5222001	0	True				
ANR	5222149	AssignmentExpression	str [ i ] = 0		5222001	0		=			
ANR	5222150	ArrayIndexing	str [ i ]		5222001	0					
ANR	5222151	Identifier	str		5222001	0					
ANR	5222152	Identifier	i		5222001	1					
ANR	5222153	PrimaryExpression	0		5222001	1					
ANR	5222154	ExpressionStatement	s = r_stack_new ( 5 )	430:1:8764:8783	5222001	7	True				
ANR	5222155	AssignmentExpression	s = r_stack_new ( 5 )		5222001	0		=			
ANR	5222156	Identifier	s		5222001	0					
ANR	5222157	CallExpression	r_stack_new ( 5 )		5222001	1					
ANR	5222158	Callee	r_stack_new		5222001	0					
ANR	5222159	Identifier	r_stack_new		5222001	0					
ANR	5222160	ArgumentList	5		5222001	1					
ANR	5222161	Argument	5		5222001	0					
ANR	5222162	PrimaryExpression	5		5222001	0					
ANR	5222163	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		5222001	8					
ANR	5222164	ForInit	"i = 1 , p = str ;"	431:6:8812:8826	5222001	0	True				
ANR	5222165	Expression	"i = 1 , p = str"		5222001	0					
ANR	5222166	AssignmentExpression	i = 1		5222001	0		=			
ANR	5222167	Identifier	i		5222001	0					
ANR	5222168	PrimaryExpression	1		5222001	1					
ANR	5222169	AssignmentExpression	p = str		5222001	1		=			
ANR	5222170	Identifier	p		5222001	0					
ANR	5222171	Identifier	str		5222001	1					
ANR	5222172	Condition	* p	431:22:8828:8829	5222001	1	True				
ANR	5222173	UnaryOperationExpression	* p		5222001	0					
ANR	5222174	UnaryOperator	*		5222001	0					
ANR	5222175	Identifier	p		5222001	1					
ANR	5222176	PostIncDecOperationExpression	p ++	431:26:8832:8834	5222001	2	True				
ANR	5222177	Identifier	p		5222001	0					
ANR	5222178	IncDec	++		5222001	1					
ANR	5222179	CompoundStatement		22:31:448:448	5222001	3					
ANR	5222180	ExpressionStatement	q = p - 1	432:2:8841:8850	5222001	0	True				
ANR	5222181	AssignmentExpression	q = p - 1		5222001	0		=			
ANR	5222182	Identifier	q		5222001	0					
ANR	5222183	AdditiveExpression	p - 1		5222001	1		-			
ANR	5222184	Identifier	p		5222001	0					
ANR	5222185	PrimaryExpression	1		5222001	1					
ANR	5222186	IfStatement	if ( p > str && ( * q == '\\\\' ) )		5222001	1					
ANR	5222187	Condition	p > str && ( * q == '\\\\' )	433:6:8858:8880	5222001	0	True				
ANR	5222188	AndExpression	p > str && ( * q == '\\\\' )		5222001	0		&&			
ANR	5222189	RelationalExpression	p > str		5222001	0		>			
ANR	5222190	Identifier	p		5222001	0					
ANR	5222191	Identifier	str		5222001	1					
ANR	5222192	EqualityExpression	* q == '\\\\'		5222001	1		==			
ANR	5222193	UnaryOperationExpression	* q		5222001	0					
ANR	5222194	UnaryOperator	*		5222001	0					
ANR	5222195	Identifier	q		5222001	1					
ANR	5222196	PrimaryExpression	'\\\\'		5222001	1					
ANR	5222197	CompoundStatement		24:31:494:494	5222001	1					
ANR	5222198	ExpressionStatement	"memmove ( q , p , strlen ( p ) + 1 )"	434:3:8888:8918	5222001	0	True				
ANR	5222199	CallExpression	"memmove ( q , p , strlen ( p ) + 1 )"		5222001	0					
ANR	5222200	Callee	memmove		5222001	0					
ANR	5222201	Identifier	memmove		5222001	0					
ANR	5222202	ArgumentList	q		5222001	1					
ANR	5222203	Argument	q		5222001	0					
ANR	5222204	Identifier	q		5222001	0					
ANR	5222205	Argument	p		5222001	1					
ANR	5222206	Identifier	p		5222001	0					
ANR	5222207	Argument	strlen ( p ) + 1		5222001	2					
ANR	5222208	AdditiveExpression	strlen ( p ) + 1		5222001	0		+			
ANR	5222209	CallExpression	strlen ( p )		5222001	0					
ANR	5222210	Callee	strlen		5222001	0					
ANR	5222211	Identifier	strlen		5222001	0					
ANR	5222212	ArgumentList	p		5222001	1					
ANR	5222213	Argument	p		5222001	0					
ANR	5222214	Identifier	p		5222001	0					
ANR	5222215	PrimaryExpression	1		5222001	1					
ANR	5222216	ExpressionStatement	p --	435:3:8923:8926	5222001	1	True				
ANR	5222217	PostIncDecOperationExpression	p --		5222001	0					
ANR	5222218	Identifier	p		5222001	0					
ANR	5222219	IncDec	--		5222001	1					
ANR	5222220	ContinueStatement	continue ;	436:3:8931:8939	5222001	2	True				
ANR	5222221	SwitchStatement	switch ( * p )		5222001	2					
ANR	5222222	Condition	* p	438:10:8955:8956	5222001	0	True				
ANR	5222223	UnaryOperationExpression	* p		5222001	0					
ANR	5222224	UnaryOperator	*		5222001	0					
ANR	5222225	Identifier	p		5222001	1					
ANR	5222226	CompoundStatement		29:14:570:570	5222001	1					
ANR	5222227	Label	case '(' :	439:2:8963:8971	5222001	0	True				
ANR	5222228	Label	case '{' :	440:2:8975:8983	5222001	1	True				
ANR	5222229	Label	case '[' :	441:2:8987:8995	5222001	2	True				
ANR	5222230	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	442:3:9000:9027	5222001	3	True				
ANR	5222231	CallExpression	"r_stack_push ( s , ( void * ) p )"		5222001	0					
ANR	5222232	Callee	r_stack_push		5222001	0					
ANR	5222233	Identifier	r_stack_push		5222001	0					
ANR	5222234	ArgumentList	s		5222001	1					
ANR	5222235	Argument	s		5222001	0					
ANR	5222236	Identifier	s		5222001	0					
ANR	5222237	Argument	( void * ) p		5222001	1					
ANR	5222238	CastExpression	( void * ) p		5222001	0					
ANR	5222239	CastTarget	void *		5222001	0					
ANR	5222240	Identifier	p		5222001	1					
ANR	5222241	ContinueStatement	continue ;	443:3:9032:9040	5222001	4	True				
ANR	5222242	Label	case '\\'' :	444:2:9044:9053	5222001	5	True				
ANR	5222243	Label	"case '""' :"	445:2:9057:9065	5222001	6	True				
ANR	5222244	ExpressionStatement	pop = r_stack_pop ( s )	446:3:9070:9091	5222001	7	True				
ANR	5222245	AssignmentExpression	pop = r_stack_pop ( s )		5222001	0		=			
ANR	5222246	Identifier	pop		5222001	0					
ANR	5222247	CallExpression	r_stack_pop ( s )		5222001	1					
ANR	5222248	Callee	r_stack_pop		5222001	0					
ANR	5222249	Identifier	r_stack_pop		5222001	0					
ANR	5222250	ArgumentList	s		5222001	1					
ANR	5222251	Argument	s		5222001	0					
ANR	5222252	Identifier	s		5222001	0					
ANR	5222253	IfStatement	if ( pop && * ( char * ) pop != * p )		5222001	8					
ANR	5222254	Condition	pop && * ( char * ) pop != * p	447:7:9100:9124	5222001	0	True				
ANR	5222255	AndExpression	pop && * ( char * ) pop != * p		5222001	0		&&			
ANR	5222256	Identifier	pop		5222001	0					
ANR	5222257	EqualityExpression	* ( char * ) pop != * p		5222001	1		!=			
ANR	5222258	UnaryOperationExpression	* ( char * ) pop		5222001	0					
ANR	5222259	UnaryOperator	*		5222001	0					
ANR	5222260	CastExpression	( char * ) pop		5222001	1					
ANR	5222261	CastTarget	char *		5222001	0					
ANR	5222262	Identifier	pop		5222001	1					
ANR	5222263	UnaryOperationExpression	* p		5222001	1					
ANR	5222264	UnaryOperator	*		5222001	0					
ANR	5222265	Identifier	p		5222001	1					
ANR	5222266	CompoundStatement		38:34:738:738	5222001	1					
ANR	5222267	ExpressionStatement	"r_stack_push ( s , pop )"	448:4:9133:9154	5222001	0	True				
ANR	5222268	CallExpression	"r_stack_push ( s , pop )"		5222001	0					
ANR	5222269	Callee	r_stack_push		5222001	0					
ANR	5222270	Identifier	r_stack_push		5222001	0					
ANR	5222271	ArgumentList	s		5222001	1					
ANR	5222272	Argument	s		5222001	0					
ANR	5222273	Identifier	s		5222001	0					
ANR	5222274	Argument	pop		5222001	1					
ANR	5222275	Identifier	pop		5222001	0					
ANR	5222276	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	449:4:9160:9187	5222001	1	True				
ANR	5222277	CallExpression	"r_stack_push ( s , ( void * ) p )"		5222001	0					
ANR	5222278	Callee	r_stack_push		5222001	0					
ANR	5222279	Identifier	r_stack_push		5222001	0					
ANR	5222280	ArgumentList	s		5222001	1					
ANR	5222281	Argument	s		5222001	0					
ANR	5222282	Identifier	s		5222001	0					
ANR	5222283	Argument	( void * ) p		5222001	1					
ANR	5222284	CastExpression	( void * ) p		5222001	0					
ANR	5222285	CastTarget	void *		5222001	0					
ANR	5222286	Identifier	p		5222001	1					
ANR	5222287	ElseStatement	else		5222001	0					
ANR	5222288	IfStatement	if ( ! pop )		5222001	0					
ANR	5222289	Condition	! pop	450:14:9203:9206	5222001	0	True				
ANR	5222290	UnaryOperationExpression	! pop		5222001	0					
ANR	5222291	UnaryOperator	!		5222001	0					
ANR	5222292	Identifier	pop		5222001	1					
ANR	5222293	CompoundStatement		41:20:820:820	5222001	1					
ANR	5222294	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	451:4:9215:9242	5222001	0	True				
ANR	5222295	CallExpression	"r_stack_push ( s , ( void * ) p )"		5222001	0					
ANR	5222296	Callee	r_stack_push		5222001	0					
ANR	5222297	Identifier	r_stack_push		5222001	0					
ANR	5222298	ArgumentList	s		5222001	1					
ANR	5222299	Argument	s		5222001	0					
ANR	5222300	Identifier	s		5222001	0					
ANR	5222301	Argument	( void * ) p		5222001	1					
ANR	5222302	CastExpression	( void * ) p		5222001	0					
ANR	5222303	CastTarget	void *		5222001	0					
ANR	5222304	Identifier	p		5222001	1					
ANR	5222305	ContinueStatement	continue ;	453:3:9252:9260	5222001	9	True				
ANR	5222306	Label	case ')' :	454:2:9264:9272	5222001	10	True				
ANR	5222307	Label	case '}' :	455:2:9276:9284	5222001	11	True				
ANR	5222308	Label	case ']' :	456:2:9288:9296	5222001	12	True				
ANR	5222309	ExpressionStatement	pop = r_stack_pop ( s )	457:3:9301:9322	5222001	13	True				
ANR	5222310	AssignmentExpression	pop = r_stack_pop ( s )		5222001	0		=			
ANR	5222311	Identifier	pop		5222001	0					
ANR	5222312	CallExpression	r_stack_pop ( s )		5222001	1					
ANR	5222313	Callee	r_stack_pop		5222001	0					
ANR	5222314	Identifier	r_stack_pop		5222001	0					
ANR	5222315	ArgumentList	s		5222001	1					
ANR	5222316	Argument	s		5222001	0					
ANR	5222317	Identifier	s		5222001	0					
ANR	5222318	IfStatement	if ( pop )		5222001	14					
ANR	5222319	Condition	pop	458:7:9331:9333	5222001	0	True				
ANR	5222320	Identifier	pop		5222001	0					
ANR	5222321	CompoundStatement		49:12:947:947	5222001	1					
ANR	5222322	IfStatement	if ( ( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' ) )		5222001	0					
ANR	5222323	Condition	( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )	459:8:9346:9465	5222001	0	True				
ANR	5222324	OrExpression	( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )		5222001	0		||			
ANR	5222325	AndExpression	* ( char * ) pop == '(' && * p == ')'		5222001	0		&&			
ANR	5222326	EqualityExpression	* ( char * ) pop == '('		5222001	0		==			
ANR	5222327	UnaryOperationExpression	* ( char * ) pop		5222001	0					
ANR	5222328	UnaryOperator	*		5222001	0					
ANR	5222329	CastExpression	( char * ) pop		5222001	1					
ANR	5222330	CastTarget	char *		5222001	0					
ANR	5222331	Identifier	pop		5222001	1					
ANR	5222332	PrimaryExpression	'('		5222001	1					
ANR	5222333	EqualityExpression	* p == ')'		5222001	1		==			
ANR	5222334	UnaryOperationExpression	* p		5222001	0					
ANR	5222335	UnaryOperator	*		5222001	0					
ANR	5222336	Identifier	p		5222001	1					
ANR	5222337	PrimaryExpression	')'		5222001	1					
ANR	5222338	OrExpression	( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )		5222001	1		||			
ANR	5222339	AndExpression	* ( char * ) pop == '{' && * p == '}'		5222001	0		&&			
ANR	5222340	EqualityExpression	* ( char * ) pop == '{'		5222001	0		==			
ANR	5222341	UnaryOperationExpression	* ( char * ) pop		5222001	0					
ANR	5222342	UnaryOperator	*		5222001	0					
ANR	5222343	CastExpression	( char * ) pop		5222001	1					
ANR	5222344	CastTarget	char *		5222001	0					
ANR	5222345	Identifier	pop		5222001	1					
ANR	5222346	PrimaryExpression	'{'		5222001	1					
ANR	5222347	EqualityExpression	* p == '}'		5222001	1		==			
ANR	5222348	UnaryOperationExpression	* p		5222001	0					
ANR	5222349	UnaryOperator	*		5222001	0					
ANR	5222350	Identifier	p		5222001	1					
ANR	5222351	PrimaryExpression	'}'		5222001	1					
ANR	5222352	AndExpression	* ( char * ) pop == '[' && * p == ']'		5222001	1		&&			
ANR	5222353	EqualityExpression	* ( char * ) pop == '['		5222001	0		==			
ANR	5222354	UnaryOperationExpression	* ( char * ) pop		5222001	0					
ANR	5222355	UnaryOperator	*		5222001	0					
ANR	5222356	CastExpression	( char * ) pop		5222001	1					
ANR	5222357	CastTarget	char *		5222001	0					
ANR	5222358	Identifier	pop		5222001	1					
ANR	5222359	PrimaryExpression	'['		5222001	1					
ANR	5222360	EqualityExpression	* p == ']'		5222001	1		==			
ANR	5222361	UnaryOperationExpression	* p		5222001	0					
ANR	5222362	UnaryOperator	*		5222001	0					
ANR	5222363	Identifier	p		5222001	1					
ANR	5222364	PrimaryExpression	']'		5222001	1					
ANR	5222365	CompoundStatement		52:41:1079:1079	5222001	1					
ANR	5222366	ContinueStatement	continue ;	462:5:9475:9483	5222001	0	True				
ANR	5222367	BreakStatement	break ;	465:3:9499:9504	5222001	15	True				
ANR	5222368	Label	case ' ' :	466:2:9508:9516	5222001	16	True				
ANR	5222369	IfStatement	if ( p > str && ! * q )		5222001	17					
ANR	5222370	Condition	p > str && ! * q	467:7:9525:9538	5222001	0	True				
ANR	5222371	AndExpression	p > str && ! * q		5222001	0		&&			
ANR	5222372	RelationalExpression	p > str		5222001	0		>			
ANR	5222373	Identifier	p		5222001	0					
ANR	5222374	Identifier	str		5222001	1					
ANR	5222375	UnaryOperationExpression	! * q		5222001	1					
ANR	5222376	UnaryOperator	!		5222001	0					
ANR	5222377	UnaryOperationExpression	* q		5222001	1					
ANR	5222378	UnaryOperator	*		5222001	0					
ANR	5222379	Identifier	q		5222001	1					
ANR	5222380	CompoundStatement		58:23:1152:1152	5222001	1					
ANR	5222381	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	468:4:9547:9583	5222001	0	True				
ANR	5222382	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		5222001	0					
ANR	5222383	Callee	memmove		5222001	0					
ANR	5222384	Identifier	memmove		5222001	0					
ANR	5222385	ArgumentList	p		5222001	1					
ANR	5222386	Argument	p		5222001	0					
ANR	5222387	Identifier	p		5222001	0					
ANR	5222388	Argument	p + 1		5222001	1					
ANR	5222389	AdditiveExpression	p + 1		5222001	0		+			
ANR	5222390	Identifier	p		5222001	0					
ANR	5222391	PrimaryExpression	1		5222001	1					
ANR	5222392	Argument	strlen ( p + 1 ) + 1		5222001	2					
ANR	5222393	AdditiveExpression	strlen ( p + 1 ) + 1		5222001	0		+			
ANR	5222394	CallExpression	strlen ( p + 1 )		5222001	0					
ANR	5222395	Callee	strlen		5222001	0					
ANR	5222396	Identifier	strlen		5222001	0					
ANR	5222397	ArgumentList	p + 1		5222001	1					
ANR	5222398	Argument	p + 1		5222001	0					
ANR	5222399	AdditiveExpression	p + 1		5222001	0		+			
ANR	5222400	Identifier	p		5222001	0					
ANR	5222401	PrimaryExpression	1		5222001	1					
ANR	5222402	PrimaryExpression	1		5222001	1					
ANR	5222403	IfStatement	if ( * q == '\\\\' )		5222001	1					
ANR	5222404	Condition	* q == '\\\\'	469:8:9593:9602	5222001	0	True				
ANR	5222405	EqualityExpression	* q == '\\\\'		5222001	0		==			
ANR	5222406	UnaryOperationExpression	* q		5222001	0					
ANR	5222407	UnaryOperator	*		5222001	0					
ANR	5222408	Identifier	q		5222001	1					
ANR	5222409	PrimaryExpression	'\\\\'		5222001	1					
ANR	5222410	CompoundStatement		60:20:1216:1216	5222001	1					
ANR	5222411	ExpressionStatement	* q = ' '	470:5:9612:9620	5222001	0	True				
ANR	5222412	AssignmentExpression	* q = ' '		5222001	0		=			
ANR	5222413	UnaryOperationExpression	* q		5222001	0					
ANR	5222414	UnaryOperator	*		5222001	0					
ANR	5222415	Identifier	q		5222001	1					
ANR	5222416	PrimaryExpression	' '		5222001	1					
ANR	5222417	ContinueStatement	continue ;	471:5:9627:9635	5222001	1	True				
ANR	5222418	ExpressionStatement	p --	473:4:9647:9650	5222001	2	True				
ANR	5222419	PostIncDecOperationExpression	p --		5222001	0					
ANR	5222420	Identifier	p		5222001	0					
ANR	5222421	IncDec	--		5222001	1					
ANR	5222422	IfStatement	if ( r_stack_is_empty ( s ) )		5222001	18					
ANR	5222423	Condition	r_stack_is_empty ( s )	475:7:9664:9683	5222001	0	True				
ANR	5222424	CallExpression	r_stack_is_empty ( s )		5222001	0					
ANR	5222425	Callee	r_stack_is_empty		5222001	0					
ANR	5222426	Identifier	r_stack_is_empty		5222001	0					
ANR	5222427	ArgumentList	s		5222001	1					
ANR	5222428	Argument	s		5222001	0					
ANR	5222429	Identifier	s		5222001	0					
ANR	5222430	CompoundStatement		66:29:1297:1297	5222001	1					
ANR	5222431	ExpressionStatement	i ++	476:4:9692:9695	5222001	0	True				
ANR	5222432	PostIncDecOperationExpression	i ++		5222001	0					
ANR	5222433	Identifier	i		5222001	0					
ANR	5222434	IncDec	++		5222001	1					
ANR	5222435	ExpressionStatement	* p = '\\0'	477:4:9701:9710	5222001	1	True				
ANR	5222436	AssignmentExpression	* p = '\\0'		5222001	0		=			
ANR	5222437	UnaryOperationExpression	* p		5222001	0					
ANR	5222438	UnaryOperator	*		5222001	0					
ANR	5222439	Identifier	p		5222001	1					
ANR	5222440	PrimaryExpression	'\\0'		5222001	1					
ANR	5222441	Label	default :	479:2:9719:9726	5222001	19	True				
ANR	5222442	Identifier	default		5222001	0					
ANR	5222443	BreakStatement	break ;	480:3:9731:9736	5222001	20	True				
ANR	5222444	ExpressionStatement	r_stack_free ( s )	483:1:9746:9762	5222001	9	True				
ANR	5222445	CallExpression	r_stack_free ( s )		5222001	0					
ANR	5222446	Callee	r_stack_free		5222001	0					
ANR	5222447	Identifier	r_stack_free		5222001	0					
ANR	5222448	ArgumentList	s		5222001	1					
ANR	5222449	Argument	s		5222001	0					
ANR	5222450	Identifier	s		5222001	0					
ANR	5222451	ReturnStatement	return i ;	484:1:9765:9773	5222001	10	True				
ANR	5222452	Identifier	i		5222001	0					
ANR	5222453	ReturnType	R_API int		5222001	1					
ANR	5222454	Identifier	r_str_word_set0_stack		5222001	2					
ANR	5222455	ParameterList	char * str		5222001	3					
ANR	5222456	Parameter	char * str	410:32:8377:8385	5222001	0	True				
ANR	5222457	ParameterType	char *		5222001	0					
ANR	5222458	Identifier	str		5222001	1					
ANR	5222459	CFGEntryNode	ENTRY		5222001		True				
ANR	5222460	CFGExitNode	EXIT		5222001		True				
ANR	5222461	Symbol	r_stack_new		5222001						
ANR	5222462	Symbol	i		5222001						
ANR	5222463	Symbol	* ( char * ) pop		5222001						
ANR	5222464	Symbol	str		5222001						
ANR	5222465	Symbol	p		5222001						
ANR	5222466	Symbol	pop		5222001						
ANR	5222467	Symbol	q		5222001						
ANR	5222468	Symbol	strlen		5222001						
ANR	5222469	Symbol	s		5222001						
ANR	5222470	Symbol	* i		5222001						
ANR	5222471	Symbol	r_stack_pop		5222001						
ANR	5222472	Symbol	* p		5222001						
ANR	5222473	Symbol	* str		5222001						
ANR	5222474	Symbol	* q		5222001						
ANR	5222475	Symbol	* pop		5222001						
ANR	5222476	Symbol	r_stack_is_empty		5222001						
ANR	5222477	Function	r_str_word_get0set	487:0:9778:10722							
ANR	5222478	FunctionDef	"r_str_word_get0set (char * stra , int stralen , int idx , const char * newstr , int * newlen)"		5222477	0					
ANR	5222479	CompoundStatement		487:98:9876:10722	5222477	0					
ANR	5222480	IdentifierDeclStatement	char * p = NULL ;	488:1:9879:9893	5222477	0	True				
ANR	5222481	IdentifierDecl	* p = NULL		5222477	0					
ANR	5222482	IdentifierDeclType	char *		5222477	0					
ANR	5222483	Identifier	p		5222477	1					
ANR	5222484	AssignmentExpression	* p = NULL		5222477	2		=			
ANR	5222485	Identifier	NULL		5222477	0					
ANR	5222486	Identifier	NULL		5222477	1					
ANR	5222487	IdentifierDeclStatement	char * out ;	489:1:9896:9905	5222477	1	True				
ANR	5222488	IdentifierDecl	* out		5222477	0					
ANR	5222489	IdentifierDeclType	char *		5222477	0					
ANR	5222490	Identifier	out		5222477	1					
ANR	5222491	IdentifierDeclStatement	"int alen , blen , nlen ;"	490:1:9908:9928	5222477	2	True				
ANR	5222492	IdentifierDecl	alen		5222477	0					
ANR	5222493	IdentifierDeclType	int		5222477	0					
ANR	5222494	Identifier	alen		5222477	1					
ANR	5222495	IdentifierDecl	blen		5222477	1					
ANR	5222496	IdentifierDeclType	int		5222477	0					
ANR	5222497	Identifier	blen		5222477	1					
ANR	5222498	IdentifierDecl	nlen		5222477	2					
ANR	5222499	IdentifierDeclType	int		5222477	0					
ANR	5222500	Identifier	nlen		5222477	1					
ANR	5222501	IfStatement	if ( ! stra && ! newstr )		5222477	3					
ANR	5222502	Condition	! stra && ! newstr	491:5:9935:9950	5222477	0	True				
ANR	5222503	AndExpression	! stra && ! newstr		5222477	0		&&			
ANR	5222504	UnaryOperationExpression	! stra		5222477	0					
ANR	5222505	UnaryOperator	!		5222477	0					
ANR	5222506	Identifier	stra		5222477	1					
ANR	5222507	UnaryOperationExpression	! newstr		5222477	1					
ANR	5222508	UnaryOperator	!		5222477	0					
ANR	5222509	Identifier	newstr		5222477	1					
ANR	5222510	CompoundStatement		5:23:76:76	5222477	1					
ANR	5222511	ReturnStatement	return NULL ;	492:2:9957:9968	5222477	0	True				
ANR	5222512	Identifier	NULL		5222477	0					
ANR	5222513	IfStatement	if ( stra )		5222477	4					
ANR	5222514	Condition	stra	494:5:9978:9981	5222477	0	True				
ANR	5222515	Identifier	stra		5222477	0					
ANR	5222516	CompoundStatement		8:11:107:107	5222477	1					
ANR	5222517	ExpressionStatement	"p = ( char * ) r_str_word_get0 ( stra , idx )"	495:2:9988:10027	5222477	0	True				
ANR	5222518	AssignmentExpression	"p = ( char * ) r_str_word_get0 ( stra , idx )"		5222477	0		=			
ANR	5222519	Identifier	p		5222477	0					
ANR	5222520	CastExpression	"( char * ) r_str_word_get0 ( stra , idx )"		5222477	1					
ANR	5222521	CastTarget	char *		5222477	0					
ANR	5222522	CallExpression	"r_str_word_get0 ( stra , idx )"		5222477	1					
ANR	5222523	Callee	r_str_word_get0		5222477	0					
ANR	5222524	Identifier	r_str_word_get0		5222477	0					
ANR	5222525	ArgumentList	stra		5222477	1					
ANR	5222526	Argument	stra		5222477	0					
ANR	5222527	Identifier	stra		5222477	0					
ANR	5222528	Argument	idx		5222477	1					
ANR	5222529	Identifier	idx		5222477	0					
ANR	5222530	IfStatement	if ( ! p )		5222477	5					
ANR	5222531	Condition	! p	497:5:10037:10038	5222477	0	True				
ANR	5222532	UnaryOperationExpression	! p		5222477	0					
ANR	5222533	UnaryOperator	!		5222477	0					
ANR	5222534	Identifier	p		5222477	1					
ANR	5222535	CompoundStatement		12:2:168:195	5222477	1					
ANR	5222536	IdentifierDeclStatement	int nslen = strlen ( newstr ) ;	498:2:10045:10072	5222477	0	True				
ANR	5222537	IdentifierDecl	nslen = strlen ( newstr )		5222477	0					
ANR	5222538	IdentifierDeclType	int		5222477	0					
ANR	5222539	Identifier	nslen		5222477	1					
ANR	5222540	AssignmentExpression	nslen = strlen ( newstr )		5222477	2		=			
ANR	5222541	Identifier	nslen		5222477	0					
ANR	5222542	CallExpression	strlen ( newstr )		5222477	1					
ANR	5222543	Callee	strlen		5222477	0					
ANR	5222544	Identifier	strlen		5222477	0					
ANR	5222545	ArgumentList	newstr		5222477	1					
ANR	5222546	Argument	newstr		5222477	0					
ANR	5222547	Identifier	newstr		5222477	0					
ANR	5222548	ExpressionStatement	out = malloc ( nslen + 1 )	499:2:10076:10100	5222477	1	True				
ANR	5222549	AssignmentExpression	out = malloc ( nslen + 1 )		5222477	0		=			
ANR	5222550	Identifier	out		5222477	0					
ANR	5222551	CallExpression	malloc ( nslen + 1 )		5222477	1					
ANR	5222552	Callee	malloc		5222477	0					
ANR	5222553	Identifier	malloc		5222477	0					
ANR	5222554	ArgumentList	nslen + 1		5222477	1					
ANR	5222555	Argument	nslen + 1		5222477	0					
ANR	5222556	AdditiveExpression	nslen + 1		5222477	0		+			
ANR	5222557	Identifier	nslen		5222477	0					
ANR	5222558	PrimaryExpression	1		5222477	1					
ANR	5222559	IfStatement	if ( ! out )		5222477	2					
ANR	5222560	Condition	! out	500:6:10108:10111	5222477	0	True				
ANR	5222561	UnaryOperationExpression	! out		5222477	0					
ANR	5222562	UnaryOperator	!		5222477	0					
ANR	5222563	Identifier	out		5222477	1					
ANR	5222564	CompoundStatement		14:12:237:237	5222477	1					
ANR	5222565	ReturnStatement	return NULL ;	501:3:10119:10130	5222477	0	True				
ANR	5222566	Identifier	NULL		5222477	0					
ANR	5222567	ExpressionStatement	"strcpy ( out , newstr )"	503:2:10138:10158	5222477	3	True				
ANR	5222568	CallExpression	"strcpy ( out , newstr )"		5222477	0					
ANR	5222569	Callee	strcpy		5222477	0					
ANR	5222570	Identifier	strcpy		5222477	0					
ANR	5222571	ArgumentList	out		5222477	1					
ANR	5222572	Argument	out		5222477	0					
ANR	5222573	Identifier	out		5222477	0					
ANR	5222574	Argument	newstr		5222477	1					
ANR	5222575	Identifier	newstr		5222477	0					
ANR	5222576	ExpressionStatement	out [ nslen ] = 0	504:2:10162:10176	5222477	4	True				
ANR	5222577	AssignmentExpression	out [ nslen ] = 0		5222477	0		=			
ANR	5222578	ArrayIndexing	out [ nslen ]		5222477	0					
ANR	5222579	Identifier	out		5222477	0					
ANR	5222580	Identifier	nslen		5222477	1					
ANR	5222581	PrimaryExpression	0		5222477	1					
ANR	5222582	IfStatement	if ( newlen )		5222477	5					
ANR	5222583	Condition	newlen	505:6:10184:10189	5222477	0	True				
ANR	5222584	Identifier	newlen		5222477	0					
ANR	5222585	CompoundStatement		19:14:315:315	5222477	1					
ANR	5222586	ExpressionStatement	* newlen = nslen	506:3:10197:10212	5222477	0	True				
ANR	5222587	AssignmentExpression	* newlen = nslen		5222477	0		=			
ANR	5222588	UnaryOperationExpression	* newlen		5222477	0					
ANR	5222589	UnaryOperator	*		5222477	0					
ANR	5222590	Identifier	newlen		5222477	1					
ANR	5222591	Identifier	nslen		5222477	1					
ANR	5222592	ReturnStatement	return out ;	508:2:10220:10230	5222477	6	True				
ANR	5222593	Identifier	out		5222477	0					
ANR	5222594	ExpressionStatement	alen = ( size_t ) ( p - stra )	510:1:10236:10261	5222477	6	True				
ANR	5222595	AssignmentExpression	alen = ( size_t ) ( p - stra )		5222477	0		=			
ANR	5222596	Identifier	alen		5222477	0					
ANR	5222597	CastExpression	( size_t ) ( p - stra )		5222477	1					
ANR	5222598	CastTarget	size_t		5222477	0					
ANR	5222599	AdditiveExpression	p - stra		5222477	1		-			
ANR	5222600	Identifier	p		5222477	0					
ANR	5222601	Identifier	stra		5222477	1					
ANR	5222602	ExpressionStatement	blen = stralen - ( ( alen + strlen ( p ) ) + 1 )	511:1:10264:10306	5222477	7	True				
ANR	5222603	AssignmentExpression	blen = stralen - ( ( alen + strlen ( p ) ) + 1 )		5222477	0		=			
ANR	5222604	Identifier	blen		5222477	0					
ANR	5222605	AdditiveExpression	stralen - ( ( alen + strlen ( p ) ) + 1 )		5222477	1		-			
ANR	5222606	Identifier	stralen		5222477	0					
ANR	5222607	AdditiveExpression	( alen + strlen ( p ) ) + 1		5222477	1		+			
ANR	5222608	AdditiveExpression	alen + strlen ( p )		5222477	0		+			
ANR	5222609	Identifier	alen		5222477	0					
ANR	5222610	CallExpression	strlen ( p )		5222477	1					
ANR	5222611	Callee	strlen		5222477	0					
ANR	5222612	Identifier	strlen		5222477	0					
ANR	5222613	ArgumentList	p		5222477	1					
ANR	5222614	Argument	p		5222477	0					
ANR	5222615	Identifier	p		5222477	0					
ANR	5222616	PrimaryExpression	1		5222477	1					
ANR	5222617	IfStatement	if ( blen < 0 )		5222477	8					
ANR	5222618	Condition	blen < 0	512:5:10313:10320	5222477	0	True				
ANR	5222619	RelationalExpression	blen < 0		5222477	0		<			
ANR	5222620	Identifier	blen		5222477	0					
ANR	5222621	PrimaryExpression	0		5222477	1					
ANR	5222622	CompoundStatement		26:15:446:446	5222477	1					
ANR	5222623	ExpressionStatement	blen = 0	513:2:10327:10335	5222477	0	True				
ANR	5222624	AssignmentExpression	blen = 0		5222477	0		=			
ANR	5222625	Identifier	blen		5222477	0					
ANR	5222626	PrimaryExpression	0		5222477	1					
ANR	5222627	ExpressionStatement	nlen = alen + blen + strlen ( newstr )	515:1:10341:10377	5222477	9	True				
ANR	5222628	AssignmentExpression	nlen = alen + blen + strlen ( newstr )		5222477	0		=			
ANR	5222629	Identifier	nlen		5222477	0					
ANR	5222630	AdditiveExpression	alen + blen + strlen ( newstr )		5222477	1		+			
ANR	5222631	Identifier	alen		5222477	0					
ANR	5222632	AdditiveExpression	blen + strlen ( newstr )		5222477	1		+			
ANR	5222633	Identifier	blen		5222477	0					
ANR	5222634	CallExpression	strlen ( newstr )		5222477	1					
ANR	5222635	Callee	strlen		5222477	0					
ANR	5222636	Identifier	strlen		5222477	0					
ANR	5222637	ArgumentList	newstr		5222477	1					
ANR	5222638	Argument	newstr		5222477	0					
ANR	5222639	Identifier	newstr		5222477	0					
ANR	5222640	ExpressionStatement	out = malloc ( nlen + 2 )	516:1:10380:10403	5222477	10	True				
ANR	5222641	AssignmentExpression	out = malloc ( nlen + 2 )		5222477	0		=			
ANR	5222642	Identifier	out		5222477	0					
ANR	5222643	CallExpression	malloc ( nlen + 2 )		5222477	1					
ANR	5222644	Callee	malloc		5222477	0					
ANR	5222645	Identifier	malloc		5222477	0					
ANR	5222646	ArgumentList	nlen + 2		5222477	1					
ANR	5222647	Argument	nlen + 2		5222477	0					
ANR	5222648	AdditiveExpression	nlen + 2		5222477	0		+			
ANR	5222649	Identifier	nlen		5222477	0					
ANR	5222650	PrimaryExpression	2		5222477	1					
ANR	5222651	IfStatement	if ( ! out )		5222477	11					
ANR	5222652	Condition	! out	517:5:10410:10413	5222477	0	True				
ANR	5222653	UnaryOperationExpression	! out		5222477	0					
ANR	5222654	UnaryOperator	!		5222477	0					
ANR	5222655	Identifier	out		5222477	1					
ANR	5222656	CompoundStatement		31:11:539:539	5222477	1					
ANR	5222657	ReturnStatement	return NULL ;	518:2:10420:10431	5222477	0	True				
ANR	5222658	Identifier	NULL		5222477	0					
ANR	5222659	IfStatement	if ( alen > 0 )		5222477	12					
ANR	5222660	Condition	alen > 0	520:5:10441:10448	5222477	0	True				
ANR	5222661	RelationalExpression	alen > 0		5222477	0		>			
ANR	5222662	Identifier	alen		5222477	0					
ANR	5222663	PrimaryExpression	0		5222477	1					
ANR	5222664	CompoundStatement		34:15:574:574	5222477	1					
ANR	5222665	ExpressionStatement	"memcpy ( out , stra , alen )"	521:2:10455:10479	5222477	0	True				
ANR	5222666	CallExpression	"memcpy ( out , stra , alen )"		5222477	0					
ANR	5222667	Callee	memcpy		5222477	0					
ANR	5222668	Identifier	memcpy		5222477	0					
ANR	5222669	ArgumentList	out		5222477	1					
ANR	5222670	Argument	out		5222477	0					
ANR	5222671	Identifier	out		5222477	0					
ANR	5222672	Argument	stra		5222477	1					
ANR	5222673	Identifier	stra		5222477	0					
ANR	5222674	Argument	alen		5222477	2					
ANR	5222675	Identifier	alen		5222477	0					
ANR	5222676	ExpressionStatement	"memcpy ( out + alen , newstr , strlen ( newstr ) + 1 )"	523:1:10485:10533	5222477	13	True				
ANR	5222677	CallExpression	"memcpy ( out + alen , newstr , strlen ( newstr ) + 1 )"		5222477	0					
ANR	5222678	Callee	memcpy		5222477	0					
ANR	5222679	Identifier	memcpy		5222477	0					
ANR	5222680	ArgumentList	out + alen		5222477	1					
ANR	5222681	Argument	out + alen		5222477	0					
ANR	5222682	AdditiveExpression	out + alen		5222477	0		+			
ANR	5222683	Identifier	out		5222477	0					
ANR	5222684	Identifier	alen		5222477	1					
ANR	5222685	Argument	newstr		5222477	1					
ANR	5222686	Identifier	newstr		5222477	0					
ANR	5222687	Argument	strlen ( newstr ) + 1		5222477	2					
ANR	5222688	AdditiveExpression	strlen ( newstr ) + 1		5222477	0		+			
ANR	5222689	CallExpression	strlen ( newstr )		5222477	0					
ANR	5222690	Callee	strlen		5222477	0					
ANR	5222691	Identifier	strlen		5222477	0					
ANR	5222692	ArgumentList	newstr		5222477	1					
ANR	5222693	Argument	newstr		5222477	0					
ANR	5222694	Identifier	newstr		5222477	0					
ANR	5222695	PrimaryExpression	1		5222477	1					
ANR	5222696	IfStatement	if ( blen > 0 )		5222477	14					
ANR	5222697	Condition	blen > 0	524:5:10540:10547	5222477	0	True				
ANR	5222698	RelationalExpression	blen > 0		5222477	0		>			
ANR	5222699	Identifier	blen		5222477	0					
ANR	5222700	PrimaryExpression	0		5222477	1					
ANR	5222701	CompoundStatement		38:15:673:673	5222477	1					
ANR	5222702	ExpressionStatement	"memcpy ( out + alen + strlen ( newstr ) + 1 , p + strlen ( p ) + 1 , blen + 1 )"	525:2:10554:10625	5222477	0	True				
ANR	5222703	CallExpression	"memcpy ( out + alen + strlen ( newstr ) + 1 , p + strlen ( p ) + 1 , blen + 1 )"		5222477	0					
ANR	5222704	Callee	memcpy		5222477	0					
ANR	5222705	Identifier	memcpy		5222477	0					
ANR	5222706	ArgumentList	out + alen + strlen ( newstr ) + 1		5222477	1					
ANR	5222707	Argument	out + alen + strlen ( newstr ) + 1		5222477	0					
ANR	5222708	AdditiveExpression	out + alen + strlen ( newstr ) + 1		5222477	0		+			
ANR	5222709	Identifier	out		5222477	0					
ANR	5222710	AdditiveExpression	alen + strlen ( newstr ) + 1		5222477	1		+			
ANR	5222711	Identifier	alen		5222477	0					
ANR	5222712	AdditiveExpression	strlen ( newstr ) + 1		5222477	1		+			
ANR	5222713	CallExpression	strlen ( newstr )		5222477	0					
ANR	5222714	Callee	strlen		5222477	0					
ANR	5222715	Identifier	strlen		5222477	0					
ANR	5222716	ArgumentList	newstr		5222477	1					
ANR	5222717	Argument	newstr		5222477	0					
ANR	5222718	Identifier	newstr		5222477	0					
ANR	5222719	PrimaryExpression	1		5222477	1					
ANR	5222720	Argument	p + strlen ( p ) + 1		5222477	1					
ANR	5222721	AdditiveExpression	p + strlen ( p ) + 1		5222477	0		+			
ANR	5222722	Identifier	p		5222477	0					
ANR	5222723	AdditiveExpression	strlen ( p ) + 1		5222477	1		+			
ANR	5222724	CallExpression	strlen ( p )		5222477	0					
ANR	5222725	Callee	strlen		5222477	0					
ANR	5222726	Identifier	strlen		5222477	0					
ANR	5222727	ArgumentList	p		5222477	1					
ANR	5222728	Argument	p		5222477	0					
ANR	5222729	Identifier	p		5222477	0					
ANR	5222730	PrimaryExpression	1		5222477	1					
ANR	5222731	Argument	blen + 1		5222477	2					
ANR	5222732	AdditiveExpression	blen + 1		5222477	0		+			
ANR	5222733	Identifier	blen		5222477	0					
ANR	5222734	PrimaryExpression	1		5222477	1					
ANR	5222735	ExpressionStatement	out [ nlen + 1 ] = 0	527:1:10631:10648	5222477	15	True				
ANR	5222736	AssignmentExpression	out [ nlen + 1 ] = 0		5222477	0		=			
ANR	5222737	ArrayIndexing	out [ nlen + 1 ]		5222477	0					
ANR	5222738	Identifier	out		5222477	0					
ANR	5222739	AdditiveExpression	nlen + 1		5222477	1		+			
ANR	5222740	Identifier	nlen		5222477	0					
ANR	5222741	PrimaryExpression	1		5222477	1					
ANR	5222742	PrimaryExpression	0		5222477	1					
ANR	5222743	IfStatement	if ( newlen )		5222477	16					
ANR	5222744	Condition	newlen	528:5:10655:10660	5222477	0	True				
ANR	5222745	Identifier	newlen		5222477	0					
ANR	5222746	CompoundStatement		42:13:786:786	5222477	1					
ANR	5222747	ExpressionStatement	* newlen = nlen + ( ( blen == 0 ) ? 1 : 0 )	529:2:10667:10704	5222477	0	True				
ANR	5222748	AssignmentExpression	* newlen = nlen + ( ( blen == 0 ) ? 1 : 0 )		5222477	0		=			
ANR	5222749	UnaryOperationExpression	* newlen		5222477	0					
ANR	5222750	UnaryOperator	*		5222477	0					
ANR	5222751	Identifier	newlen		5222477	1					
ANR	5222752	AdditiveExpression	nlen + ( ( blen == 0 ) ? 1 : 0 )		5222477	1		+			
ANR	5222753	Identifier	nlen		5222477	0					
ANR	5222754	ConditionalExpression	( blen == 0 ) ? 1 : 0		5222477	1					
ANR	5222755	Condition	blen == 0		5222477	0					
ANR	5222756	EqualityExpression	blen == 0		5222477	0		==			
ANR	5222757	Identifier	blen		5222477	0					
ANR	5222758	PrimaryExpression	0		5222477	1					
ANR	5222759	PrimaryExpression	1		5222477	1					
ANR	5222760	PrimaryExpression	0		5222477	2					
ANR	5222761	ReturnStatement	return out ;	531:1:10710:10720	5222477	17	True				
ANR	5222762	Identifier	out		5222477	0					
ANR	5222763	ReturnType	R_API char *		5222477	1					
ANR	5222764	Identifier	r_str_word_get0set		5222477	2					
ANR	5222765	ParameterList	"char * stra , int stralen , int idx , const char * newstr , int * newlen"		5222477	3					
ANR	5222766	Parameter	char * stra	487:31:9809:9818	5222477	0	True				
ANR	5222767	ParameterType	char *		5222477	0					
ANR	5222768	Identifier	stra		5222477	1					
ANR	5222769	Parameter	int stralen	487:43:9821:9831	5222477	1	True				
ANR	5222770	ParameterType	int		5222477	0					
ANR	5222771	Identifier	stralen		5222477	1					
ANR	5222772	Parameter	int idx	487:56:9834:9840	5222477	2	True				
ANR	5222773	ParameterType	int		5222477	0					
ANR	5222774	Identifier	idx		5222477	1					
ANR	5222775	Parameter	const char * newstr	487:65:9843:9860	5222477	3	True				
ANR	5222776	ParameterType	const char *		5222477	0					
ANR	5222777	Identifier	newstr		5222477	1					
ANR	5222778	Parameter	int * newlen	487:85:9863:9873	5222477	4	True				
ANR	5222779	ParameterType	int *		5222477	0					
ANR	5222780	Identifier	newlen		5222477	1					
ANR	5222781	CFGEntryNode	ENTRY		5222477		True				
ANR	5222782	CFGExitNode	EXIT		5222477		True				
ANR	5222783	Symbol	malloc		5222477						
ANR	5222784	Symbol	NULL		5222477						
ANR	5222785	Symbol	stra		5222477						
ANR	5222786	Symbol	newlen		5222477						
ANR	5222787	Symbol	r_str_word_get0		5222477						
ANR	5222788	Symbol	newstr		5222477						
ANR	5222789	Symbol	out		5222477						
ANR	5222790	Symbol	p		5222477						
ANR	5222791	Symbol	strlen		5222477						
ANR	5222792	Symbol	nlen		5222477						
ANR	5222793	Symbol	nslen		5222477						
ANR	5222794	Symbol	stralen		5222477						
ANR	5222795	Symbol	* out		5222477						
ANR	5222796	Symbol	alen		5222477						
ANR	5222797	Symbol	idx		5222477						
ANR	5222798	Symbol	blen		5222477						
ANR	5222799	Symbol	* nslen		5222477						
ANR	5222800	Symbol	* newlen		5222477						
ANR	5222801	Symbol	* nlen		5222477						
ANR	5222802	Function	r_str_word_get0	537:6:10874:11130							
ANR	5222803	FunctionDef	"r_str_word_get0 (const char * str , int idx)"		5222802	0					
ANR	5222804	CompoundStatement		537:60:10928:11130	5222802	0					
ANR	5222805	IdentifierDeclStatement	int i ;	538:1:10931:10936	5222802	0	True				
ANR	5222806	IdentifierDecl	i		5222802	0					
ANR	5222807	IdentifierDeclType	int		5222802	0					
ANR	5222808	Identifier	i		5222802	1					
ANR	5222809	IdentifierDeclStatement	const char * ptr = str ;	539:1:10939:10960	5222802	1	True				
ANR	5222810	IdentifierDecl	* ptr = str		5222802	0					
ANR	5222811	IdentifierDeclType	const char *		5222802	0					
ANR	5222812	Identifier	ptr		5222802	1					
ANR	5222813	AssignmentExpression	* ptr = str		5222802	2		=			
ANR	5222814	Identifier	str		5222802	0					
ANR	5222815	Identifier	str		5222802	1					
ANR	5222816	IfStatement	if ( ! ptr || idx < 0 )		5222802	2					
ANR	5222817	Condition	! ptr || idx < 0	540:5:10967:10981	5222802	0	True				
ANR	5222818	OrExpression	! ptr || idx < 0		5222802	0		||			
ANR	5222819	UnaryOperationExpression	! ptr		5222802	0					
ANR	5222820	UnaryOperator	!		5222802	0					
ANR	5222821	Identifier	ptr		5222802	1					
ANR	5222822	RelationalExpression	idx < 0		5222802	1		<			
ANR	5222823	Identifier	idx		5222802	0					
ANR	5222824	PrimaryExpression	0		5222802	1					
ANR	5222825	CompoundStatement		4:64:97:97	5222802	1					
ANR	5222826	ReturnStatement	return ( char * ) nullstr ;	541:2:11030:11052	5222802	0	True				
ANR	5222827	CastExpression	( char * ) nullstr		5222802	0					
ANR	5222828	CastTarget	char *		5222802	0					
ANR	5222829	Identifier	nullstr		5222802	1					
ANR	5222830	ForStatement	for ( i = 0 ; i != idx ; i ++ )		5222802	3					
ANR	5222831	ForInit	i = 0 ;	543:6:11063:11068	5222802	0	True				
ANR	5222832	AssignmentExpression	i = 0		5222802	0		=			
ANR	5222833	Identifier	i		5222802	0					
ANR	5222834	PrimaryExpression	0		5222802	1					
ANR	5222835	Condition	i != idx	543:13:11070:11077	5222802	1	True				
ANR	5222836	EqualityExpression	i != idx		5222802	0		!=			
ANR	5222837	Identifier	i		5222802	0					
ANR	5222838	Identifier	idx		5222802	1					
ANR	5222839	PostIncDecOperationExpression	i ++	543:23:11080:11082	5222802	2	True				
ANR	5222840	Identifier	i		5222802	0					
ANR	5222841	IncDec	++		5222802	1					
ANR	5222842	CompoundStatement		7:28:156:156	5222802	3					
ANR	5222843	ExpressionStatement	ptr += strlen ( ptr ) + 1	544:2:11089:11112	5222802	0	True				
ANR	5222844	AssignmentExpression	ptr += strlen ( ptr ) + 1		5222802	0		+=			
ANR	5222845	Identifier	ptr		5222802	0					
ANR	5222846	AdditiveExpression	strlen ( ptr ) + 1		5222802	1		+			
ANR	5222847	CallExpression	strlen ( ptr )		5222802	0					
ANR	5222848	Callee	strlen		5222802	0					
ANR	5222849	Identifier	strlen		5222802	0					
ANR	5222850	ArgumentList	ptr		5222802	1					
ANR	5222851	Argument	ptr		5222802	0					
ANR	5222852	Identifier	ptr		5222802	0					
ANR	5222853	PrimaryExpression	1		5222802	1					
ANR	5222854	ReturnStatement	return ptr ;	546:1:11118:11128	5222802	4	True				
ANR	5222855	Identifier	ptr		5222802	0					
ANR	5222856	ReturnType	const char *		5222802	1					
ANR	5222857	Identifier	r_str_word_get0		5222802	2					
ANR	5222858	ParameterList	"const char * str , int idx"		5222802	3					
ANR	5222859	Parameter	const char * str	537:34:10902:10916	5222802	0	True				
ANR	5222860	ParameterType	const char *		5222802	0					
ANR	5222861	Identifier	str		5222802	1					
ANR	5222862	Parameter	int idx	537:51:10919:10925	5222802	1	True				
ANR	5222863	ParameterType	int		5222802	0					
ANR	5222864	Identifier	idx		5222802	1					
ANR	5222865	CFGEntryNode	ENTRY		5222802		True				
ANR	5222866	CFGExitNode	EXIT		5222802		True				
ANR	5222867	Symbol	str		5222802						
ANR	5222868	Symbol	strlen		5222802						
ANR	5222869	Symbol	nullstr		5222802						
ANR	5222870	Symbol	i		5222802						
ANR	5222871	Symbol	idx		5222802						
ANR	5222872	Symbol	ptr		5222802						
ANR	5222873	Function	r_str_char_count	550:0:11208:11375							
ANR	5222874	FunctionDef	"r_str_char_count (const char * string , char ch)"		5222873	0					
ANR	5222875	CompoundStatement		550:56:11264:11375	5222873	0					
ANR	5222876	IdentifierDeclStatement	"int i , count = 0 ;"	551:1:11267:11283	5222873	0	True				
ANR	5222877	IdentifierDecl	i		5222873	0					
ANR	5222878	IdentifierDeclType	int		5222873	0					
ANR	5222879	Identifier	i		5222873	1					
ANR	5222880	IdentifierDecl	count = 0		5222873	1					
ANR	5222881	IdentifierDeclType	int		5222873	0					
ANR	5222882	Identifier	count		5222873	1					
ANR	5222883	AssignmentExpression	count = 0		5222873	2		=			
ANR	5222884	Identifier	count		5222873	0					
ANR	5222885	PrimaryExpression	0		5222873	1					
ANR	5222886	ForStatement	for ( i = 0 ; string [ i ] ; i ++ )		5222873	1					
ANR	5222887	ForInit	i = 0 ;	552:6:11291:11296	5222873	0	True				
ANR	5222888	AssignmentExpression	i = 0		5222873	0		=			
ANR	5222889	Identifier	i		5222873	0					
ANR	5222890	PrimaryExpression	0		5222873	1					
ANR	5222891	Condition	string [ i ]	552:13:11298:11306	5222873	1	True				
ANR	5222892	ArrayIndexing	string [ i ]		5222873	0					
ANR	5222893	Identifier	string		5222873	0					
ANR	5222894	Identifier	i		5222873	1					
ANR	5222895	PostIncDecOperationExpression	i ++	552:24:11309:11311	5222873	2	True				
ANR	5222896	Identifier	i		5222873	0					
ANR	5222897	IncDec	++		5222873	1					
ANR	5222898	CompoundStatement		3:29:49:49	5222873	3					
ANR	5222899	IfStatement	if ( string [ i ] == ch )		5222873	0					
ANR	5222900	Condition	string [ i ] == ch	553:6:11322:11336	5222873	0	True				
ANR	5222901	EqualityExpression	string [ i ] == ch		5222873	0		==			
ANR	5222902	ArrayIndexing	string [ i ]		5222873	0					
ANR	5222903	Identifier	string		5222873	0					
ANR	5222904	Identifier	i		5222873	1					
ANR	5222905	Identifier	ch		5222873	1					
ANR	5222906	CompoundStatement		4:23:74:74	5222873	1					
ANR	5222907	ExpressionStatement	count ++	554:3:11344:11351	5222873	0	True				
ANR	5222908	PostIncDecOperationExpression	count ++		5222873	0					
ANR	5222909	Identifier	count		5222873	0					
ANR	5222910	IncDec	++		5222873	1					
ANR	5222911	ReturnStatement	return count ;	557:1:11361:11373	5222873	2	True				
ANR	5222912	Identifier	count		5222873	0					
ANR	5222913	ReturnType	R_API int		5222873	1					
ANR	5222914	Identifier	r_str_char_count		5222873	2					
ANR	5222915	ParameterList	"const char * string , char ch"		5222873	3					
ANR	5222916	Parameter	const char * string	550:27:11235:11252	5222873	0	True				
ANR	5222917	ParameterType	const char *		5222873	0					
ANR	5222918	Identifier	string		5222873	1					
ANR	5222919	Parameter	char ch	550:47:11255:11261	5222873	1	True				
ANR	5222920	ParameterType	char		5222873	0					
ANR	5222921	Identifier	ch		5222873	1					
ANR	5222922	CFGEntryNode	ENTRY		5222873		True				
ANR	5222923	CFGExitNode	EXIT		5222873		True				
ANR	5222924	Symbol	* i		5222873						
ANR	5222925	Symbol	string		5222873						
ANR	5222926	Symbol	ch		5222873						
ANR	5222927	Symbol	count		5222873						
ANR	5222928	Symbol	i		5222873						
ANR	5222929	Symbol	* string		5222873						
ANR	5222930	Function	r_str_word_count	562:0:11536:11876							
ANR	5222931	FunctionDef	r_str_word_count (const char * string)		5222930	0					
ANR	5222932	CompoundStatement		562:47:11583:11876	5222930	0					
ANR	5222933	IdentifierDeclStatement	"const char * text , * tmp ;"	563:1:11586:11608	5222930	0	True				
ANR	5222934	IdentifierDecl	* text		5222930	0					
ANR	5222935	IdentifierDeclType	const char *		5222930	0					
ANR	5222936	Identifier	text		5222930	1					
ANR	5222937	IdentifierDecl	* tmp		5222930	1					
ANR	5222938	IdentifierDeclType	const char *		5222930	0					
ANR	5222939	Identifier	tmp		5222930	1					
ANR	5222940	IdentifierDeclStatement	int word ;	564:1:11611:11619	5222930	1	True				
ANR	5222941	IdentifierDecl	word		5222930	0					
ANR	5222942	IdentifierDeclType	int		5222930	0					
ANR	5222943	Identifier	word		5222930	1					
ANR	5222944	ForStatement	for ( text = tmp = string ; * text && IS_SEPARATOR ( * text ) ; text ++ )		5222930	2					
ANR	5222945	ForInit	text = tmp = string ;	566:6:11628:11647	5222930	0	True				
ANR	5222946	AssignmentExpression	text = tmp = string		5222930	0		=			
ANR	5222947	Identifier	text		5222930	0					
ANR	5222948	AssignmentExpression	tmp = string		5222930	1		=			
ANR	5222949	Identifier	tmp		5222930	0					
ANR	5222950	Identifier	string		5222930	1					
ANR	5222951	Condition	* text && IS_SEPARATOR ( * text )	566:27:11649:11677	5222930	1	True				
ANR	5222952	AndExpression	* text && IS_SEPARATOR ( * text )		5222930	0		&&			
ANR	5222953	UnaryOperationExpression	* text		5222930	0					
ANR	5222954	UnaryOperator	*		5222930	0					
ANR	5222955	Identifier	text		5222930	1					
ANR	5222956	CallExpression	IS_SEPARATOR ( * text )		5222930	1					
ANR	5222957	Callee	IS_SEPARATOR		5222930	0					
ANR	5222958	Identifier	IS_SEPARATOR		5222930	0					
ANR	5222959	ArgumentList	* text		5222930	1					
ANR	5222960	Argument	* text		5222930	0					
ANR	5222961	UnaryOperationExpression	* text		5222930	0					
ANR	5222962	UnaryOperator	*		5222930	0					
ANR	5222963	Identifier	text		5222930	1					
ANR	5222964	PostIncDecOperationExpression	text ++	566:58:11680:11685	5222930	2	True				
ANR	5222965	Identifier	text		5222930	0					
ANR	5222966	IncDec	++		5222930	1					
ANR	5222967	CompoundStatement		5:66:104:104	5222930	3					
ANR	5222968	ExpressionStatement		567:2:11692:11692	5222930	0	True				
ANR	5222969	ForStatement	for ( word = 0 ; * text ; word ++ )		5222930	3					
ANR	5222970	ForInit	word = 0 ;	569:6:11703:11711	5222930	0	True				
ANR	5222971	AssignmentExpression	word = 0		5222930	0		=			
ANR	5222972	Identifier	word		5222930	0					
ANR	5222973	PrimaryExpression	0		5222930	1					
ANR	5222974	Condition	* text	569:16:11713:11717	5222930	1	True				
ANR	5222975	UnaryOperationExpression	* text		5222930	0					
ANR	5222976	UnaryOperator	*		5222930	0					
ANR	5222977	Identifier	text		5222930	1					
ANR	5222978	PostIncDecOperationExpression	word ++	569:23:11720:11725	5222930	2	True				
ANR	5222979	Identifier	word		5222930	0					
ANR	5222980	IncDec	++		5222930	1					
ANR	5222981	CompoundStatement		8:31:144:144	5222930	3					
ANR	5222982	ForStatement	for ( ; * text && ! IS_SEPARATOR ( * text ) ; text ++ )		5222930	0					
ANR	5222983	Condition	* text && ! IS_SEPARATOR ( * text )	570:9:11739:11768	5222930	0	True				
ANR	5222984	AndExpression	* text && ! IS_SEPARATOR ( * text )		5222930	0		&&			
ANR	5222985	UnaryOperationExpression	* text		5222930	0					
ANR	5222986	UnaryOperator	*		5222930	0					
ANR	5222987	Identifier	text		5222930	1					
ANR	5222988	UnaryOperationExpression	! IS_SEPARATOR ( * text )		5222930	1					
ANR	5222989	UnaryOperator	!		5222930	0					
ANR	5222990	CallExpression	IS_SEPARATOR ( * text )		5222930	1					
ANR	5222991	Callee	IS_SEPARATOR		5222930	0					
ANR	5222992	Identifier	IS_SEPARATOR		5222930	0					
ANR	5222993	ArgumentList	* text		5222930	1					
ANR	5222994	Argument	* text		5222930	0					
ANR	5222995	UnaryOperationExpression	* text		5222930	0					
ANR	5222996	UnaryOperator	*		5222930	0					
ANR	5222997	Identifier	text		5222930	1					
ANR	5222998	PostIncDecOperationExpression	text ++	570:41:11771:11776	5222930	1	True				
ANR	5222999	Identifier	text		5222930	0					
ANR	5223000	IncDec	++		5222930	1					
ANR	5223001	CompoundStatement		9:49:195:195	5222930	2					
ANR	5223002	ExpressionStatement		571:3:11784:11784	5222930	0	True				
ANR	5223003	ForStatement	for ( tmp = text ; * text && IS_SEPARATOR ( * text ) ; text ++ )		5222930	1					
ANR	5223004	ForInit	tmp = text ;	573:7:11797:11807	5222930	0	True				
ANR	5223005	AssignmentExpression	tmp = text		5222930	0		=			
ANR	5223006	Identifier	tmp		5222930	0					
ANR	5223007	Identifier	text		5222930	1					
ANR	5223008	Condition	* text && IS_SEPARATOR ( * text )	573:19:11809:11837	5222930	1	True				
ANR	5223009	AndExpression	* text && IS_SEPARATOR ( * text )		5222930	0		&&			
ANR	5223010	UnaryOperationExpression	* text		5222930	0					
ANR	5223011	UnaryOperator	*		5222930	0					
ANR	5223012	Identifier	text		5222930	1					
ANR	5223013	CallExpression	IS_SEPARATOR ( * text )		5222930	1					
ANR	5223014	Callee	IS_SEPARATOR		5222930	0					
ANR	5223015	Identifier	IS_SEPARATOR		5222930	0					
ANR	5223016	ArgumentList	* text		5222930	1					
ANR	5223017	Argument	* text		5222930	0					
ANR	5223018	UnaryOperationExpression	* text		5222930	0					
ANR	5223019	UnaryOperator	*		5222930	0					
ANR	5223020	Identifier	text		5222930	1					
ANR	5223021	PostIncDecOperationExpression	text ++	573:50:11840:11845	5222930	2	True				
ANR	5223022	Identifier	text		5222930	0					
ANR	5223023	IncDec	++		5222930	1					
ANR	5223024	CompoundStatement		12:58:264:264	5222930	3					
ANR	5223025	ExpressionStatement		574:3:11853:11853	5222930	0	True				
ANR	5223026	ReturnStatement	return word ;	577:1:11863:11874	5222930	4	True				
ANR	5223027	Identifier	word		5222930	0					
ANR	5223028	ReturnType	R_API int		5222930	1					
ANR	5223029	Identifier	r_str_word_count		5222930	2					
ANR	5223030	ParameterList	const char * string		5222930	3					
ANR	5223031	Parameter	const char * string	562:27:11563:11580	5222930	0	True				
ANR	5223032	ParameterType	const char *		5222930	0					
ANR	5223033	Identifier	string		5222930	1					
ANR	5223034	CFGEntryNode	ENTRY		5222930		True				
ANR	5223035	CFGExitNode	EXIT		5222930		True				
ANR	5223036	Symbol	IS_SEPARATOR		5222930						
ANR	5223037	Symbol	string		5222930						
ANR	5223038	Symbol	tmp		5222930						
ANR	5223039	Symbol	* text		5222930						
ANR	5223040	Symbol	text		5222930						
ANR	5223041	Symbol	word		5222930						
ANR	5223042	Function	r_str_ichr	585:0:12099:12193							
ANR	5223043	FunctionDef	"r_str_ichr (char * str , char chr)"		5223042	0					
ANR	5223044	CompoundStatement		585:44:12143:12193	5223042	0					
ANR	5223045	WhileStatement	while ( * str == chr )		5223042	0					
ANR	5223046	Condition	* str == chr	586:8:12153:12163	5223042	0	True				
ANR	5223047	EqualityExpression	* str == chr		5223042	0		==			
ANR	5223048	UnaryOperationExpression	* str		5223042	0					
ANR	5223049	UnaryOperator	*		5223042	0					
ANR	5223050	Identifier	str		5223042	1					
ANR	5223051	Identifier	chr		5223042	1					
ANR	5223052	CompoundStatement		2:21:22:22	5223042	1					
ANR	5223053	ExpressionStatement	str ++	587:2:12170:12175	5223042	0	True				
ANR	5223054	PostIncDecOperationExpression	str ++		5223042	0					
ANR	5223055	Identifier	str		5223042	0					
ANR	5223056	IncDec	++		5223042	1					
ANR	5223057	ReturnStatement	return str ;	589:1:12181:12191	5223042	1	True				
ANR	5223058	Identifier	str		5223042	0					
ANR	5223059	ReturnType	R_API char *		5223042	1					
ANR	5223060	Identifier	r_str_ichr		5223042	2					
ANR	5223061	ParameterList	"char * str , char chr"		5223042	3					
ANR	5223062	Parameter	char * str	585:23:12122:12130	5223042	0	True				
ANR	5223063	ParameterType	char *		5223042	0					
ANR	5223064	Identifier	str		5223042	1					
ANR	5223065	Parameter	char chr	585:34:12133:12140	5223042	1	True				
ANR	5223066	ParameterType	char		5223042	0					
ANR	5223067	Identifier	chr		5223042	1					
ANR	5223068	CFGEntryNode	ENTRY		5223042		True				
ANR	5223069	CFGExitNode	EXIT		5223042		True				
ANR	5223070	Symbol	str		5223042						
ANR	5223071	Symbol	* str		5223042						
ANR	5223072	Symbol	chr		5223042						
ANR	5223073	Function	r_str_lchr	594:6:12289:12481							
ANR	5223074	FunctionDef	"r_str_lchr (const char * str , char chr)"		5223073	0					
ANR	5223075	CompoundStatement		594:56:12339:12481	5223073	0					
ANR	5223076	IfStatement	if ( str )		5223073	0					
ANR	5223077	Condition	str	595:5:12346:12348	5223073	0	True				
ANR	5223078	Identifier	str		5223073	0					
ANR	5223079	CompoundStatement		3:2:15:37	5223073	1					
ANR	5223080	IdentifierDeclStatement	int len = strlen ( str ) ;	596:2:12355:12377	5223073	0	True				
ANR	5223081	IdentifierDecl	len = strlen ( str )		5223073	0					
ANR	5223082	IdentifierDeclType	int		5223073	0					
ANR	5223083	Identifier	len		5223073	1					
ANR	5223084	AssignmentExpression	len = strlen ( str )		5223073	2		=			
ANR	5223085	Identifier	len		5223073	0					
ANR	5223086	CallExpression	strlen ( str )		5223073	1					
ANR	5223087	Callee	strlen		5223073	0					
ANR	5223088	Identifier	strlen		5223073	0					
ANR	5223089	ArgumentList	str		5223073	1					
ANR	5223090	Argument	str		5223073	0					
ANR	5223091	Identifier	str		5223073	0					
ANR	5223092	ForStatement	for ( ; len >= 0 ; len -- )		5223073	1					
ANR	5223093	Condition	len >= 0	597:9:12388:12395	5223073	0	True				
ANR	5223094	RelationalExpression	len >= 0		5223073	0		>=			
ANR	5223095	Identifier	len		5223073	0					
ANR	5223096	PrimaryExpression	0		5223073	1					
ANR	5223097	PostIncDecOperationExpression	len --	597:19:12398:12402	5223073	1	True				
ANR	5223098	Identifier	len		5223073	0					
ANR	5223099	IncDec	--		5223073	1					
ANR	5223100	CompoundStatement		4:26:65:65	5223073	2					
ANR	5223101	IfStatement	if ( str [ len ] == chr )		5223073	0					
ANR	5223102	Condition	str [ len ] == chr	598:7:12414:12428	5223073	0	True				
ANR	5223103	EqualityExpression	str [ len ] == chr		5223073	0		==			
ANR	5223104	ArrayIndexing	str [ len ]		5223073	0					
ANR	5223105	Identifier	str		5223073	0					
ANR	5223106	Identifier	len		5223073	1					
ANR	5223107	Identifier	chr		5223073	1					
ANR	5223108	CompoundStatement		5:24:91:91	5223073	1					
ANR	5223109	ReturnStatement	return str + len ;	599:4:12437:12453	5223073	0	True				
ANR	5223110	AdditiveExpression	str + len		5223073	0		+			
ANR	5223111	Identifier	str		5223073	0					
ANR	5223112	Identifier	len		5223073	1					
ANR	5223113	ReturnStatement	return NULL ;	603:1:12468:12479	5223073	1	True				
ANR	5223114	Identifier	NULL		5223073	0					
ANR	5223115	ReturnType	const char *		5223073	1					
ANR	5223116	Identifier	r_str_lchr		5223073	2					
ANR	5223117	ParameterList	"const char * str , char chr"		5223073	3					
ANR	5223118	Parameter	const char * str	594:29:12312:12326	5223073	0	True				
ANR	5223119	ParameterType	const char *		5223073	0					
ANR	5223120	Identifier	str		5223073	1					
ANR	5223121	Parameter	char chr	594:46:12329:12336	5223073	1	True				
ANR	5223122	ParameterType	char		5223073	0					
ANR	5223123	Identifier	chr		5223073	1					
ANR	5223124	CFGEntryNode	ENTRY		5223073		True				
ANR	5223125	CFGExitNode	EXIT		5223073		True				
ANR	5223126	Symbol	str		5223073						
ANR	5223127	Symbol	strlen		5223073						
ANR	5223128	Symbol	NULL		5223073						
ANR	5223129	Symbol	len		5223073						
ANR	5223130	Symbol	* str		5223073						
ANR	5223131	Symbol	chr		5223073						
ANR	5223132	Symbol	* len		5223073						
ANR	5223133	Function	r_sub_str_lchr	607:6:12573:12752							
ANR	5223134	FunctionDef	"r_sub_str_lchr (const char * str , int start , int end , char chr)"		5223133	0					
ANR	5223135	CompoundStatement		607:80:12647:12752	5223133	0					
ANR	5223136	DoStatement	do		5223133	0					
ANR	5223137	CompoundStatement		2:4:5:5	5223133	0					
ANR	5223138	ExpressionStatement	end --	609:2:12657:12662	5223133	0	True				
ANR	5223139	PostIncDecOperationExpression	end --		5223133	0					
ANR	5223140	Identifier	end		5223133	0					
ANR	5223141	IncDec	--		5223133	1					
ANR	5223142	Condition	str [ end ] != chr && end >= start	610:10:12674:12704	5223133	1	True				
ANR	5223143	AndExpression	str [ end ] != chr && end >= start		5223133	0		&&			
ANR	5223144	EqualityExpression	str [ end ] != chr		5223133	0		!=			
ANR	5223145	ArrayIndexing	str [ end ]		5223133	0					
ANR	5223146	Identifier	str		5223133	0					
ANR	5223147	Identifier	end		5223133	1					
ANR	5223148	Identifier	chr		5223133	1					
ANR	5223149	RelationalExpression	end >= start		5223133	1		>=			
ANR	5223150	Identifier	end		5223133	0					
ANR	5223151	Identifier	start		5223133	1					
ANR	5223152	ReturnStatement	return str [ end ] == chr ? & str [ end ] : NULL ;	611:1:12709:12750	5223133	1	True				
ANR	5223153	ConditionalExpression	str [ end ] == chr ? & str [ end ] : NULL		5223133	0					
ANR	5223154	Condition	str [ end ] == chr		5223133	0					
ANR	5223155	EqualityExpression	str [ end ] == chr		5223133	0		==			
ANR	5223156	ArrayIndexing	str [ end ]		5223133	0					
ANR	5223157	Identifier	str		5223133	0					
ANR	5223158	Identifier	end		5223133	1					
ANR	5223159	Identifier	chr		5223133	1					
ANR	5223160	UnaryOperationExpression	& str [ end ]		5223133	1					
ANR	5223161	UnaryOperator	&		5223133	0					
ANR	5223162	ArrayIndexing	str [ end ]		5223133	1					
ANR	5223163	Identifier	str		5223133	0					
ANR	5223164	Identifier	end		5223133	1					
ANR	5223165	Identifier	NULL		5223133	2					
ANR	5223166	ReturnType	const char *		5223133	1					
ANR	5223167	Identifier	r_sub_str_lchr		5223133	2					
ANR	5223168	ParameterList	"const char * str , int start , int end , char chr"		5223133	3					
ANR	5223169	Parameter	const char * str	607:33:12600:12614	5223133	0	True				
ANR	5223170	ParameterType	const char *		5223133	0					
ANR	5223171	Identifier	str		5223133	1					
ANR	5223172	Parameter	int start	607:50:12617:12625	5223133	1	True				
ANR	5223173	ParameterType	int		5223133	0					
ANR	5223174	Identifier	start		5223133	1					
ANR	5223175	Parameter	int end	607:61:12628:12634	5223133	2	True				
ANR	5223176	ParameterType	int		5223133	0					
ANR	5223177	Identifier	end		5223133	1					
ANR	5223178	Parameter	char chr	607:70:12637:12644	5223133	3	True				
ANR	5223179	ParameterType	char		5223133	0					
ANR	5223180	Identifier	chr		5223133	1					
ANR	5223181	CFGEntryNode	ENTRY		5223133		True				
ANR	5223182	CFGExitNode	EXIT		5223133		True				
ANR	5223183	Symbol	str		5223133						
ANR	5223184	Symbol	NULL		5223133						
ANR	5223185	Symbol	start		5223133						
ANR	5223186	Symbol	end		5223133						
ANR	5223187	Symbol	* end		5223133						
ANR	5223188	Symbol	* str		5223133						
ANR	5223189	Symbol	chr		5223133						
ANR	5223190	Function	r_sub_str_rchr	615:6:12845:13027							
ANR	5223191	FunctionDef	"r_sub_str_rchr (const char * str , int start , int end , char chr)"		5223190	0					
ANR	5223192	CompoundStatement		615:80:12919:13027	5223190	0					
ANR	5223193	WhileStatement	while ( str [ start ] != chr && start < end )		5223190	0					
ANR	5223194	Condition	str [ start ] != chr && start < end	616:8:12929:12960	5223190	0	True				
ANR	5223195	AndExpression	str [ start ] != chr && start < end		5223190	0		&&			
ANR	5223196	EqualityExpression	str [ start ] != chr		5223190	0		!=			
ANR	5223197	ArrayIndexing	str [ start ]		5223190	0					
ANR	5223198	Identifier	str		5223190	0					
ANR	5223199	Identifier	start		5223190	1					
ANR	5223200	Identifier	chr		5223190	1					
ANR	5223201	RelationalExpression	start < end		5223190	1		<			
ANR	5223202	Identifier	start		5223190	0					
ANR	5223203	Identifier	end		5223190	1					
ANR	5223204	CompoundStatement		2:42:43:43	5223190	1					
ANR	5223205	ExpressionStatement	start ++	617:2:12967:12974	5223190	0	True				
ANR	5223206	PostIncDecOperationExpression	start ++		5223190	0					
ANR	5223207	Identifier	start		5223190	0					
ANR	5223208	IncDec	++		5223190	1					
ANR	5223209	ReturnStatement	return str [ start ] == chr ? & str [ start ] : NULL ;	619:1:12980:13025	5223190	1	True				
ANR	5223210	ConditionalExpression	str [ start ] == chr ? & str [ start ] : NULL		5223190	0					
ANR	5223211	Condition	str [ start ] == chr		5223190	0					
ANR	5223212	EqualityExpression	str [ start ] == chr		5223190	0		==			
ANR	5223213	ArrayIndexing	str [ start ]		5223190	0					
ANR	5223214	Identifier	str		5223190	0					
ANR	5223215	Identifier	start		5223190	1					
ANR	5223216	Identifier	chr		5223190	1					
ANR	5223217	UnaryOperationExpression	& str [ start ]		5223190	1					
ANR	5223218	UnaryOperator	&		5223190	0					
ANR	5223219	ArrayIndexing	str [ start ]		5223190	1					
ANR	5223220	Identifier	str		5223190	0					
ANR	5223221	Identifier	start		5223190	1					
ANR	5223222	Identifier	NULL		5223190	2					
ANR	5223223	ReturnType	const char *		5223190	1					
ANR	5223224	Identifier	r_sub_str_rchr		5223190	2					
ANR	5223225	ParameterList	"const char * str , int start , int end , char chr"		5223190	3					
ANR	5223226	Parameter	const char * str	615:33:12872:12886	5223190	0	True				
ANR	5223227	ParameterType	const char *		5223190	0					
ANR	5223228	Identifier	str		5223190	1					
ANR	5223229	Parameter	int start	615:50:12889:12897	5223190	1	True				
ANR	5223230	ParameterType	int		5223190	0					
ANR	5223231	Identifier	start		5223190	1					
ANR	5223232	Parameter	int end	615:61:12900:12906	5223190	2	True				
ANR	5223233	ParameterType	int		5223190	0					
ANR	5223234	Identifier	end		5223190	1					
ANR	5223235	Parameter	char chr	615:70:12909:12916	5223190	3	True				
ANR	5223236	ParameterType	char		5223190	0					
ANR	5223237	Identifier	chr		5223190	1					
ANR	5223238	CFGEntryNode	ENTRY		5223190		True				
ANR	5223239	CFGExitNode	EXIT		5223190		True				
ANR	5223240	Symbol	str		5223190						
ANR	5223241	Symbol	NULL		5223190						
ANR	5223242	Symbol	* start		5223190						
ANR	5223243	Symbol	start		5223190						
ANR	5223244	Symbol	end		5223190						
ANR	5223245	Symbol	* str		5223190						
ANR	5223246	Symbol	chr		5223190						
ANR	5223247	Function	r_str_sep	622:6:13036:13228							
ANR	5223248	FunctionDef	"r_str_sep (const char * base , const char * sep)"		5223247	0					
ANR	5223249	CompoundStatement		622:63:13093:13228	5223247	0					
ANR	5223250	IdentifierDeclStatement	int i ;	623:1:13096:13101	5223247	0	True				
ANR	5223251	IdentifierDecl	i		5223247	0					
ANR	5223252	IdentifierDeclType	int		5223247	0					
ANR	5223253	Identifier	i		5223247	1					
ANR	5223254	WhileStatement	while ( * base )		5223247	1					
ANR	5223255	Condition	* base	624:8:13111:13115	5223247	0	True				
ANR	5223256	UnaryOperationExpression	* base		5223247	0					
ANR	5223257	UnaryOperator	*		5223247	0					
ANR	5223258	Identifier	base		5223247	1					
ANR	5223259	CompoundStatement		3:15:24:24	5223247	1					
ANR	5223260	ForStatement	for ( i = 0 ; sep [ i ] ; i ++ )		5223247	0					
ANR	5223261	ForInit	i = 0 ;	625:7:13127:13132	5223247	0	True				
ANR	5223262	AssignmentExpression	i = 0		5223247	0		=			
ANR	5223263	Identifier	i		5223247	0					
ANR	5223264	PrimaryExpression	0		5223247	1					
ANR	5223265	Condition	sep [ i ]	625:14:13134:13139	5223247	1	True				
ANR	5223266	ArrayIndexing	sep [ i ]		5223247	0					
ANR	5223267	Identifier	sep		5223247	0					
ANR	5223268	Identifier	i		5223247	1					
ANR	5223269	PostIncDecOperationExpression	i ++	625:22:13142:13144	5223247	2	True				
ANR	5223270	Identifier	i		5223247	0					
ANR	5223271	IncDec	++		5223247	1					
ANR	5223272	CompoundStatement		4:27:53:53	5223247	3					
ANR	5223273	IfStatement	if ( * base == sep [ i ] )		5223247	0					
ANR	5223274	Condition	* base == sep [ i ]	626:7:13156:13170	5223247	0	True				
ANR	5223275	EqualityExpression	* base == sep [ i ]		5223247	0		==			
ANR	5223276	UnaryOperationExpression	* base		5223247	0					
ANR	5223277	UnaryOperator	*		5223247	0					
ANR	5223278	Identifier	base		5223247	1					
ANR	5223279	ArrayIndexing	sep [ i ]		5223247	1					
ANR	5223280	Identifier	sep		5223247	0					
ANR	5223281	Identifier	i		5223247	1					
ANR	5223282	CompoundStatement		5:24:79:79	5223247	1					
ANR	5223283	ReturnStatement	return base ;	627:4:13179:13190	5223247	0	True				
ANR	5223284	Identifier	base		5223247	0					
ANR	5223285	ExpressionStatement	base ++	630:2:13203:13209	5223247	1	True				
ANR	5223286	PostIncDecOperationExpression	base ++		5223247	0					
ANR	5223287	Identifier	base		5223247	0					
ANR	5223288	IncDec	++		5223247	1					
ANR	5223289	ReturnStatement	return NULL ;	632:1:13215:13226	5223247	2	True				
ANR	5223290	Identifier	NULL		5223247	0					
ANR	5223291	ReturnType	const char *		5223247	1					
ANR	5223292	Identifier	r_str_sep		5223247	2					
ANR	5223293	ParameterList	"const char * base , const char * sep"		5223247	3					
ANR	5223294	Parameter	const char * base	622:28:13058:13073	5223247	0	True				
ANR	5223295	ParameterType	const char *		5223247	0					
ANR	5223296	Identifier	base		5223247	1					
ANR	5223297	Parameter	const char * sep	622:46:13076:13090	5223247	1	True				
ANR	5223298	ParameterType	const char *		5223247	0					
ANR	5223299	Identifier	sep		5223247	1					
ANR	5223300	CFGEntryNode	ENTRY		5223247		True				
ANR	5223301	CFGExitNode	EXIT		5223247		True				
ANR	5223302	Symbol	* i		5223247						
ANR	5223303	Symbol	NULL		5223247						
ANR	5223304	Symbol	* sep		5223247						
ANR	5223305	Symbol	i		5223247						
ANR	5223306	Symbol	* base		5223247						
ANR	5223307	Symbol	base		5223247						
ANR	5223308	Symbol	sep		5223247						
ANR	5223309	Function	r_str_rsep	635:6:13237:13440							
ANR	5223310	FunctionDef	"r_str_rsep (const char * base , const char * p , const char * sep)"		5223309	0					
ANR	5223311	CompoundStatement		635:79:13310:13440	5223309	0					
ANR	5223312	IdentifierDeclStatement	int i ;	636:1:13313:13318	5223309	0	True				
ANR	5223313	IdentifierDecl	i		5223309	0					
ANR	5223314	IdentifierDeclType	int		5223309	0					
ANR	5223315	Identifier	i		5223309	1					
ANR	5223316	WhileStatement	while ( p >= base )		5223309	1					
ANR	5223317	Condition	p >= base	637:8:13328:13336	5223309	0	True				
ANR	5223318	RelationalExpression	p >= base		5223309	0		>=			
ANR	5223319	Identifier	p		5223309	0					
ANR	5223320	Identifier	base		5223309	1					
ANR	5223321	CompoundStatement		3:19:28:28	5223309	1					
ANR	5223322	ForStatement	for ( i = 0 ; sep [ i ] ; i ++ )		5223309	0					
ANR	5223323	ForInit	i = 0 ;	638:7:13348:13353	5223309	0	True				
ANR	5223324	AssignmentExpression	i = 0		5223309	0		=			
ANR	5223325	Identifier	i		5223309	0					
ANR	5223326	PrimaryExpression	0		5223309	1					
ANR	5223327	Condition	sep [ i ]	638:14:13355:13360	5223309	1	True				
ANR	5223328	ArrayIndexing	sep [ i ]		5223309	0					
ANR	5223329	Identifier	sep		5223309	0					
ANR	5223330	Identifier	i		5223309	1					
ANR	5223331	PostIncDecOperationExpression	i ++	638:22:13363:13365	5223309	2	True				
ANR	5223332	Identifier	i		5223309	0					
ANR	5223333	IncDec	++		5223309	1					
ANR	5223334	CompoundStatement		4:27:57:57	5223309	3					
ANR	5223335	IfStatement	if ( * p == sep [ i ] )		5223309	0					
ANR	5223336	Condition	* p == sep [ i ]	639:7:13377:13388	5223309	0	True				
ANR	5223337	EqualityExpression	* p == sep [ i ]		5223309	0		==			
ANR	5223338	UnaryOperationExpression	* p		5223309	0					
ANR	5223339	UnaryOperator	*		5223309	0					
ANR	5223340	Identifier	p		5223309	1					
ANR	5223341	ArrayIndexing	sep [ i ]		5223309	1					
ANR	5223342	Identifier	sep		5223309	0					
ANR	5223343	Identifier	i		5223309	1					
ANR	5223344	CompoundStatement		5:21:80:80	5223309	1					
ANR	5223345	ReturnStatement	return p ;	640:4:13397:13405	5223309	0	True				
ANR	5223346	Identifier	p		5223309	0					
ANR	5223347	ExpressionStatement	p --	643:2:13418:13421	5223309	1	True				
ANR	5223348	PostIncDecOperationExpression	p --		5223309	0					
ANR	5223349	Identifier	p		5223309	0					
ANR	5223350	IncDec	--		5223309	1					
ANR	5223351	ReturnStatement	return NULL ;	645:1:13427:13438	5223309	2	True				
ANR	5223352	Identifier	NULL		5223309	0					
ANR	5223353	ReturnType	const char *		5223309	1					
ANR	5223354	Identifier	r_str_rsep		5223309	2					
ANR	5223355	ParameterList	"const char * base , const char * p , const char * sep"		5223309	3					
ANR	5223356	Parameter	const char * base	635:29:13260:13275	5223309	0	True				
ANR	5223357	ParameterType	const char *		5223309	0					
ANR	5223358	Identifier	base		5223309	1					
ANR	5223359	Parameter	const char * p	635:47:13278:13290	5223309	1	True				
ANR	5223360	ParameterType	const char *		5223309	0					
ANR	5223361	Identifier	p		5223309	1					
ANR	5223362	Parameter	const char * sep	635:62:13293:13307	5223309	2	True				
ANR	5223363	ParameterType	const char *		5223309	0					
ANR	5223364	Identifier	sep		5223309	1					
ANR	5223365	CFGEntryNode	ENTRY		5223309		True				
ANR	5223366	CFGExitNode	EXIT		5223309		True				
ANR	5223367	Symbol	p		5223309						
ANR	5223368	Symbol	* i		5223309						
ANR	5223369	Symbol	NULL		5223309						
ANR	5223370	Symbol	* sep		5223309						
ANR	5223371	Symbol	i		5223309						
ANR	5223372	Symbol	* p		5223309						
ANR	5223373	Symbol	base		5223309						
ANR	5223374	Symbol	sep		5223309						
ANR	5223375	Function	r_str_rstr	648:6:13449:13742							
ANR	5223376	FunctionDef	"r_str_rstr (const char * base , const char * p)"		5223375	0					
ANR	5223377	CompoundStatement		648:62:13505:13742	5223375	0					
ANR	5223378	IdentifierDeclStatement	char * s = strdup ( base ) ;	649:1:13508:13531	5223375	0	True				
ANR	5223379	IdentifierDecl	* s = strdup ( base )		5223375	0					
ANR	5223380	IdentifierDeclType	char *		5223375	0					
ANR	5223381	Identifier	s		5223375	1					
ANR	5223382	AssignmentExpression	* s = strdup ( base )		5223375	2		=			
ANR	5223383	Identifier	s		5223375	0					
ANR	5223384	CallExpression	strdup ( base )		5223375	1					
ANR	5223385	Callee	strdup		5223375	0					
ANR	5223386	Identifier	strdup		5223375	0					
ANR	5223387	ArgumentList	base		5223375	1					
ANR	5223388	Argument	base		5223375	0					
ANR	5223389	Identifier	base		5223375	0					
ANR	5223390	IdentifierDeclStatement	char * k = strdup ( p ) ;	650:1:13534:13554	5223375	1	True				
ANR	5223391	IdentifierDecl	* k = strdup ( p )		5223375	0					
ANR	5223392	IdentifierDeclType	char *		5223375	0					
ANR	5223393	Identifier	k		5223375	1					
ANR	5223394	AssignmentExpression	* k = strdup ( p )		5223375	2		=			
ANR	5223395	Identifier	k		5223375	0					
ANR	5223396	CallExpression	strdup ( p )		5223375	1					
ANR	5223397	Callee	strdup		5223375	0					
ANR	5223398	Identifier	strdup		5223375	0					
ANR	5223399	ArgumentList	p		5223375	1					
ANR	5223400	Argument	p		5223375	0					
ANR	5223401	Identifier	p		5223375	0					
ANR	5223402	ExpressionStatement	r_str_reverse ( s )	651:1:13557:13574	5223375	2	True				
ANR	5223403	CallExpression	r_str_reverse ( s )		5223375	0					
ANR	5223404	Callee	r_str_reverse		5223375	0					
ANR	5223405	Identifier	r_str_reverse		5223375	0					
ANR	5223406	ArgumentList	s		5223375	1					
ANR	5223407	Argument	s		5223375	0					
ANR	5223408	Identifier	s		5223375	0					
ANR	5223409	ExpressionStatement	r_str_reverse ( k )	652:1:13577:13594	5223375	3	True				
ANR	5223410	CallExpression	r_str_reverse ( k )		5223375	0					
ANR	5223411	Callee	r_str_reverse		5223375	0					
ANR	5223412	Identifier	r_str_reverse		5223375	0					
ANR	5223413	ArgumentList	k		5223375	1					
ANR	5223414	Argument	k		5223375	0					
ANR	5223415	Identifier	k		5223375	0					
ANR	5223416	IdentifierDeclStatement	"char * q = strstr ( s , k ) ;"	653:1:13597:13620	5223375	4	True				
ANR	5223417	IdentifierDecl	"* q = strstr ( s , k )"		5223375	0					
ANR	5223418	IdentifierDeclType	char *		5223375	0					
ANR	5223419	Identifier	q		5223375	1					
ANR	5223420	AssignmentExpression	"* q = strstr ( s , k )"		5223375	2		=			
ANR	5223421	Identifier	q		5223375	0					
ANR	5223422	CallExpression	"strstr ( s , k )"		5223375	1					
ANR	5223423	Callee	strstr		5223375	0					
ANR	5223424	Identifier	strstr		5223375	0					
ANR	5223425	ArgumentList	s		5223375	1					
ANR	5223426	Argument	s		5223375	0					
ANR	5223427	Identifier	s		5223375	0					
ANR	5223428	Argument	k		5223375	1					
ANR	5223429	Identifier	k		5223375	0					
ANR	5223430	IdentifierDeclStatement	const char * r = NULL ;	654:1:13623:13643	5223375	5	True				
ANR	5223431	IdentifierDecl	* r = NULL		5223375	0					
ANR	5223432	IdentifierDeclType	const char *		5223375	0					
ANR	5223433	Identifier	r		5223375	1					
ANR	5223434	AssignmentExpression	* r = NULL		5223375	2		=			
ANR	5223435	Identifier	NULL		5223375	0					
ANR	5223436	Identifier	NULL		5223375	1					
ANR	5223437	IfStatement	if ( q )		5223375	6					
ANR	5223438	Condition	q	655:5:13650:13650	5223375	0	True				
ANR	5223439	Identifier	q		5223375	0					
ANR	5223440	CompoundStatement		8:8:147:147	5223375	1					
ANR	5223441	ExpressionStatement	r = base + strlen ( base ) - ( q - s ) - strlen ( p )	656:2:13657:13704	5223375	0	True				
ANR	5223442	AssignmentExpression	r = base + strlen ( base ) - ( q - s ) - strlen ( p )		5223375	0		=			
ANR	5223443	Identifier	r		5223375	0					
ANR	5223444	AdditiveExpression	base + strlen ( base ) - ( q - s ) - strlen ( p )		5223375	1		+			
ANR	5223445	Identifier	base		5223375	0					
ANR	5223446	AdditiveExpression	strlen ( base ) - ( q - s ) - strlen ( p )		5223375	1		-			
ANR	5223447	CallExpression	strlen ( base )		5223375	0					
ANR	5223448	Callee	strlen		5223375	0					
ANR	5223449	Identifier	strlen		5223375	0					
ANR	5223450	ArgumentList	base		5223375	1					
ANR	5223451	Argument	base		5223375	0					
ANR	5223452	Identifier	base		5223375	0					
ANR	5223453	AdditiveExpression	( q - s ) - strlen ( p )		5223375	1		-			
ANR	5223454	AdditiveExpression	q - s		5223375	0		-			
ANR	5223455	Identifier	q		5223375	0					
ANR	5223456	Identifier	s		5223375	1					
ANR	5223457	CallExpression	strlen ( p )		5223375	1					
ANR	5223458	Callee	strlen		5223375	0					
ANR	5223459	Identifier	strlen		5223375	0					
ANR	5223460	ArgumentList	p		5223375	1					
ANR	5223461	Argument	p		5223375	0					
ANR	5223462	Identifier	p		5223375	0					
ANR	5223463	ExpressionStatement	free ( s )	658:1:13710:13718	5223375	7	True				
ANR	5223464	CallExpression	free ( s )		5223375	0					
ANR	5223465	Callee	free		5223375	0					
ANR	5223466	Identifier	free		5223375	0					
ANR	5223467	ArgumentList	s		5223375	1					
ANR	5223468	Argument	s		5223375	0					
ANR	5223469	Identifier	s		5223375	0					
ANR	5223470	ExpressionStatement	free ( k )	659:1:13721:13729	5223375	8	True				
ANR	5223471	CallExpression	free ( k )		5223375	0					
ANR	5223472	Callee	free		5223375	0					
ANR	5223473	Identifier	free		5223375	0					
ANR	5223474	ArgumentList	k		5223375	1					
ANR	5223475	Argument	k		5223375	0					
ANR	5223476	Identifier	k		5223375	0					
ANR	5223477	ReturnStatement	return r ;	660:1:13732:13740	5223375	9	True				
ANR	5223478	Identifier	r		5223375	0					
ANR	5223479	ReturnType	const char *		5223375	1					
ANR	5223480	Identifier	r_str_rstr		5223375	2					
ANR	5223481	ParameterList	"const char * base , const char * p"		5223375	3					
ANR	5223482	Parameter	const char * base	648:29:13472:13487	5223375	0	True				
ANR	5223483	ParameterType	const char *		5223375	0					
ANR	5223484	Identifier	base		5223375	1					
ANR	5223485	Parameter	const char * p	648:47:13490:13502	5223375	1	True				
ANR	5223486	ParameterType	const char *		5223375	0					
ANR	5223487	Identifier	p		5223375	1					
ANR	5223488	CFGEntryNode	ENTRY		5223375		True				
ANR	5223489	CFGExitNode	EXIT		5223375		True				
ANR	5223490	Symbol	p		5223375						
ANR	5223491	Symbol	q		5223375						
ANR	5223492	Symbol	strlen		5223375						
ANR	5223493	Symbol	r		5223375						
ANR	5223494	Symbol	s		5223375						
ANR	5223495	Symbol	NULL		5223375						
ANR	5223496	Symbol	strstr		5223375						
ANR	5223497	Symbol	strdup		5223375						
ANR	5223498	Symbol	k		5223375						
ANR	5223499	Symbol	base		5223375						
ANR	5223500	Function	r_str_rchr	663:6:13751:13983							
ANR	5223501	FunctionDef	"r_str_rchr (const char * base , const char * p , int ch)"		5223500	0					
ANR	5223502	CompoundStatement		663:70:13815:13983	5223500	0					
ANR	5223503	IfStatement	if ( ! base )		5223500	0					
ANR	5223504	Condition	! base	664:5:13822:13826	5223500	0	True				
ANR	5223505	UnaryOperationExpression	! base		5223500	0					
ANR	5223506	UnaryOperator	!		5223500	0					
ANR	5223507	Identifier	base		5223500	1					
ANR	5223508	CompoundStatement		2:12:13:13	5223500	1					
ANR	5223509	ReturnStatement	return NULL ;	665:2:13833:13844	5223500	0	True				
ANR	5223510	Identifier	NULL		5223500	0					
ANR	5223511	IfStatement	if ( ! p )		5223500	1					
ANR	5223512	Condition	! p	667:5:13854:13855	5223500	0	True				
ANR	5223513	UnaryOperationExpression	! p		5223500	0					
ANR	5223514	UnaryOperator	!		5223500	0					
ANR	5223515	Identifier	p		5223500	1					
ANR	5223516	CompoundStatement		5:9:42:42	5223500	1					
ANR	5223517	ExpressionStatement	p = base + strlen ( base )	668:2:13862:13886	5223500	0	True				
ANR	5223518	AssignmentExpression	p = base + strlen ( base )		5223500	0		=			
ANR	5223519	Identifier	p		5223500	0					
ANR	5223520	AdditiveExpression	base + strlen ( base )		5223500	1		+			
ANR	5223521	Identifier	base		5223500	0					
ANR	5223522	CallExpression	strlen ( base )		5223500	1					
ANR	5223523	Callee	strlen		5223500	0					
ANR	5223524	Identifier	strlen		5223500	0					
ANR	5223525	ArgumentList	base		5223500	1					
ANR	5223526	Argument	base		5223500	0					
ANR	5223527	Identifier	base		5223500	0					
ANR	5223528	ForStatement	for ( ; p >= base ; p -- )		5223500	2					
ANR	5223529	Condition	p >= base	670:8:13899:13907	5223500	0	True				
ANR	5223530	RelationalExpression	p >= base		5223500	0		>=			
ANR	5223531	Identifier	p		5223500	0					
ANR	5223532	Identifier	base		5223500	1					
ANR	5223533	PostIncDecOperationExpression	p --	670:19:13910:13912	5223500	1	True				
ANR	5223534	Identifier	p		5223500	0					
ANR	5223535	IncDec	--		5223500	1					
ANR	5223536	CompoundStatement		8:24:99:99	5223500	2					
ANR	5223537	IfStatement	if ( ch == * p )		5223500	0					
ANR	5223538	Condition	ch == * p	671:6:13923:13930	5223500	0	True				
ANR	5223539	EqualityExpression	ch == * p		5223500	0		==			
ANR	5223540	Identifier	ch		5223500	0					
ANR	5223541	UnaryOperationExpression	* p		5223500	1					
ANR	5223542	UnaryOperator	*		5223500	0					
ANR	5223543	Identifier	p		5223500	1					
ANR	5223544	CompoundStatement		9:16:117:117	5223500	1					
ANR	5223545	BreakStatement	break ;	672:3:13938:13943	5223500	0	True				
ANR	5223546	ReturnStatement	return ( p < base ) ? NULL : p ;	675:1:13953:13981	5223500	3	True				
ANR	5223547	ConditionalExpression	( p < base ) ? NULL : p		5223500	0					
ANR	5223548	Condition	p < base		5223500	0					
ANR	5223549	RelationalExpression	p < base		5223500	0		<			
ANR	5223550	Identifier	p		5223500	0					
ANR	5223551	Identifier	base		5223500	1					
ANR	5223552	Identifier	NULL		5223500	1					
ANR	5223553	Identifier	p		5223500	2					
ANR	5223554	ReturnType	const char *		5223500	1					
ANR	5223555	Identifier	r_str_rchr		5223500	2					
ANR	5223556	ParameterList	"const char * base , const char * p , int ch"		5223500	3					
ANR	5223557	Parameter	const char * base	663:29:13774:13789	5223500	0	True				
ANR	5223558	ParameterType	const char *		5223500	0					
ANR	5223559	Identifier	base		5223500	1					
ANR	5223560	Parameter	const char * p	663:47:13792:13804	5223500	1	True				
ANR	5223561	ParameterType	const char *		5223500	0					
ANR	5223562	Identifier	p		5223500	1					
ANR	5223563	Parameter	int ch	663:62:13807:13812	5223500	2	True				
ANR	5223564	ParameterType	int		5223500	0					
ANR	5223565	Identifier	ch		5223500	1					
ANR	5223566	CFGEntryNode	ENTRY		5223500		True				
ANR	5223567	CFGExitNode	EXIT		5223500		True				
ANR	5223568	Symbol	p		5223500						
ANR	5223569	Symbol	strlen		5223500						
ANR	5223570	Symbol	NULL		5223500						
ANR	5223571	Symbol	ch		5223500						
ANR	5223572	Symbol	* p		5223500						
ANR	5223573	Symbol	base		5223500						
ANR	5223574	Function	r_str_nstr	678:6:13992:14359							
ANR	5223575	FunctionDef	"r_str_nstr (const char * s , const char * find , int slen)"		5223574	0					
ANR	5223576	CompoundStatement		678:73:14059:14359	5223574	0					
ANR	5223577	IdentifierDeclStatement	"char c , sc ;"	679:1:14062:14072	5223574	0	True				
ANR	5223578	IdentifierDecl	c		5223574	0					
ANR	5223579	IdentifierDeclType	char		5223574	0					
ANR	5223580	Identifier	c		5223574	1					
ANR	5223581	IdentifierDecl	sc		5223574	1					
ANR	5223582	IdentifierDeclType	char		5223574	0					
ANR	5223583	Identifier	sc		5223574	1					
ANR	5223584	IdentifierDeclStatement	size_t len ;	680:1:14075:14085	5223574	1	True				
ANR	5223585	IdentifierDecl	len		5223574	0					
ANR	5223586	IdentifierDeclType	size_t		5223574	0					
ANR	5223587	Identifier	len		5223574	1					
ANR	5223588	IfStatement	if ( ( c = * find ++ ) != '\\0' )		5223574	2					
ANR	5223589	Condition	( c = * find ++ ) != '\\0'	682:5:14093:14113	5223574	0	True				
ANR	5223590	EqualityExpression	( c = * find ++ ) != '\\0'		5223574	0		!=			
ANR	5223591	AssignmentExpression	c = * find ++		5223574	0		=			
ANR	5223592	Identifier	c		5223574	0					
ANR	5223593	UnaryOperationExpression	* find ++		5223574	1					
ANR	5223594	UnaryOperator	*		5223574	0					
ANR	5223595	PostIncDecOperationExpression	find ++		5223574	1					
ANR	5223596	Identifier	find		5223574	0					
ANR	5223597	IncDec	++		5223574	1					
ANR	5223598	PrimaryExpression	'\\0'		5223574	1					
ANR	5223599	CompoundStatement		5:28:56:56	5223574	1					
ANR	5223600	ExpressionStatement	len = strlen ( find )	683:2:14120:14139	5223574	0	True				
ANR	5223601	AssignmentExpression	len = strlen ( find )		5223574	0		=			
ANR	5223602	Identifier	len		5223574	0					
ANR	5223603	CallExpression	strlen ( find )		5223574	1					
ANR	5223604	Callee	strlen		5223574	0					
ANR	5223605	Identifier	strlen		5223574	0					
ANR	5223606	ArgumentList	find		5223574	1					
ANR	5223607	Argument	find		5223574	0					
ANR	5223608	Identifier	find		5223574	0					
ANR	5223609	DoStatement	do		5223574	1					
ANR	5223610	CompoundStatement		7:5:86:86	5223574	0					
ANR	5223611	DoStatement	do		5223574	0					
ANR	5223612	CompoundStatement		8:6:94:94	5223574	0					
ANR	5223613	IfStatement	if ( slen -- < 1 || ! ( sc = * s ++ ) )		5223574	0					
ANR	5223614	Condition	slen -- < 1 || ! ( sc = * s ++ )	686:8:14164:14189	5223574	0	True				
ANR	5223615	OrExpression	slen -- < 1 || ! ( sc = * s ++ )		5223574	0		||			
ANR	5223616	RelationalExpression	slen -- < 1		5223574	0		<			
ANR	5223617	PostIncDecOperationExpression	slen --		5223574	0					
ANR	5223618	Identifier	slen		5223574	0					
ANR	5223619	IncDec	--		5223574	1					
ANR	5223620	PrimaryExpression	1		5223574	1					
ANR	5223621	UnaryOperationExpression	! ( sc = * s ++ )		5223574	1					
ANR	5223622	UnaryOperator	!		5223574	0					
ANR	5223623	AssignmentExpression	sc = * s ++		5223574	1		=			
ANR	5223624	Identifier	sc		5223574	0					
ANR	5223625	UnaryOperationExpression	* s ++		5223574	1					
ANR	5223626	UnaryOperator	*		5223574	0					
ANR	5223627	PostIncDecOperationExpression	s ++		5223574	1					
ANR	5223628	Identifier	s		5223574	0					
ANR	5223629	IncDec	++		5223574	1					
ANR	5223630	CompoundStatement		9:36:132:132	5223574	1					
ANR	5223631	ReturnStatement	return ( NULL ) ;	687:5:14199:14212	5223574	0	True				
ANR	5223632	Identifier	NULL		5223574	0					
ANR	5223633	Condition	sc != c	689:12:14232:14238	5223574	1	True				
ANR	5223634	EqualityExpression	sc != c		5223574	0		!=			
ANR	5223635	Identifier	sc		5223574	0					
ANR	5223636	Identifier	c		5223574	1					
ANR	5223637	IfStatement	if ( len > slen )		5223574	1					
ANR	5223638	Condition	len > slen	690:7:14249:14258	5223574	0	True				
ANR	5223639	RelationalExpression	len > slen		5223574	0		>			
ANR	5223640	Identifier	len		5223574	0					
ANR	5223641	Identifier	slen		5223574	1					
ANR	5223642	CompoundStatement		13:19:201:201	5223574	1					
ANR	5223643	ReturnStatement	return ( NULL ) ;	691:4:14267:14280	5223574	0	True				
ANR	5223644	Identifier	NULL		5223574	0					
ANR	5223645	Condition	"strncmp ( s , find , len ) != 0"	693:11:14298:14324	5223574	1	True				
ANR	5223646	EqualityExpression	"strncmp ( s , find , len ) != 0"		5223574	0		!=			
ANR	5223647	CallExpression	"strncmp ( s , find , len )"		5223574	0					
ANR	5223648	Callee	strncmp		5223574	0					
ANR	5223649	Identifier	strncmp		5223574	0					
ANR	5223650	ArgumentList	s		5223574	1					
ANR	5223651	Argument	s		5223574	0					
ANR	5223652	Identifier	s		5223574	0					
ANR	5223653	Argument	find		5223574	1					
ANR	5223654	Identifier	find		5223574	0					
ANR	5223655	Argument	len		5223574	2					
ANR	5223656	Identifier	len		5223574	0					
ANR	5223657	PrimaryExpression	0		5223574	1					
ANR	5223658	ExpressionStatement	s --	694:2:14330:14333	5223574	2	True				
ANR	5223659	PostIncDecOperationExpression	s --		5223574	0					
ANR	5223660	Identifier	s		5223574	0					
ANR	5223661	IncDec	--		5223574	1					
ANR	5223662	ReturnStatement	return ( ( char * ) s ) ;	696:1:14339:14357	5223574	3	True				
ANR	5223663	CastExpression	( char * ) s		5223574	0					
ANR	5223664	CastTarget	char *		5223574	0					
ANR	5223665	Identifier	s		5223574	1					
ANR	5223666	ReturnType	const char *		5223574	1					
ANR	5223667	Identifier	r_str_nstr		5223574	2					
ANR	5223668	ParameterList	"const char * s , const char * find , int slen"		5223574	3					
ANR	5223669	Parameter	const char * s	678:30:14016:14028	5223574	0	True				
ANR	5223670	ParameterType	const char *		5223574	0					
ANR	5223671	Identifier	s		5223574	1					
ANR	5223672	Parameter	const char * find	678:45:14031:14046	5223574	1	True				
ANR	5223673	ParameterType	const char *		5223574	0					
ANR	5223674	Identifier	find		5223574	1					
ANR	5223675	Parameter	int slen	678:63:14049:14056	5223574	2	True				
ANR	5223676	ParameterType	int		5223574	0					
ANR	5223677	Identifier	slen		5223574	1					
ANR	5223678	CFGEntryNode	ENTRY		5223574		True				
ANR	5223679	CFGExitNode	EXIT		5223574		True				
ANR	5223680	Symbol	sc		5223574						
ANR	5223681	Symbol	* s ++		5223574						
ANR	5223682	Symbol	strlen		5223574						
ANR	5223683	Symbol	strncmp		5223574						
ANR	5223684	Symbol	s		5223574						
ANR	5223685	Symbol	c		5223574						
ANR	5223686	Symbol	NULL		5223574						
ANR	5223687	Symbol	len		5223574						
ANR	5223688	Symbol	* find ++		5223574						
ANR	5223689	Symbol	find		5223574						
ANR	5223690	Symbol	slen		5223574						
ANR	5223691	Function	r_str_new	701:0:14447:14521							
ANR	5223692	FunctionDef	r_str_new (const char * str)		5223691	0					
ANR	5223693	CompoundStatement		701:39:14486:14521	5223691	0					
ANR	5223694	ReturnStatement	return str ? strdup ( str ) : NULL ;	702:1:14489:14519	5223691	0	True				
ANR	5223695	ConditionalExpression	str ? strdup ( str ) : NULL		5223691	0					
ANR	5223696	Condition	str		5223691	0					
ANR	5223697	Identifier	str		5223691	0					
ANR	5223698	CallExpression	strdup ( str )		5223691	1					
ANR	5223699	Callee	strdup		5223691	0					
ANR	5223700	Identifier	strdup		5223691	0					
ANR	5223701	ArgumentList	str		5223691	1					
ANR	5223702	Argument	str		5223691	0					
ANR	5223703	Identifier	str		5223691	0					
ANR	5223704	Identifier	NULL		5223691	2					
ANR	5223705	ReturnType	R_API char *		5223691	1					
ANR	5223706	Identifier	r_str_new		5223691	2					
ANR	5223707	ParameterList	const char * str		5223691	3					
ANR	5223708	Parameter	const char * str	701:22:14469:14483	5223691	0	True				
ANR	5223709	ParameterType	const char *		5223691	0					
ANR	5223710	Identifier	str		5223691	1					
ANR	5223711	CFGEntryNode	ENTRY		5223691		True				
ANR	5223712	CFGExitNode	EXIT		5223691		True				
ANR	5223713	Symbol	str		5223691						
ANR	5223714	Symbol	NULL		5223691						
ANR	5223715	Symbol	strdup		5223691						
ANR	5223716	Function	r_str_newlen	707:0:14654:14842							
ANR	5223717	FunctionDef	"r_str_newlen (const char * str , int len)"		5223716	0					
ANR	5223718	CompoundStatement		707:51:14705:14842	5223716	0					
ANR	5223719	IfStatement	if ( len < 1 )		5223716	0					
ANR	5223720	Condition	len < 1	708:5:14712:14718	5223716	0	True				
ANR	5223721	RelationalExpression	len < 1		5223716	0		<			
ANR	5223722	Identifier	len		5223716	0					
ANR	5223723	PrimaryExpression	1		5223716	1					
ANR	5223724	CompoundStatement		2:14:15:15	5223716	1					
ANR	5223725	ReturnStatement	return NULL ;	709:2:14725:14736	5223716	0	True				
ANR	5223726	Identifier	NULL		5223716	0					
ANR	5223727	IdentifierDeclStatement	char * buf = malloc ( len + 1 ) ;	711:1:14742:14770	5223716	1	True				
ANR	5223728	IdentifierDecl	* buf = malloc ( len + 1 )		5223716	0					
ANR	5223729	IdentifierDeclType	char *		5223716	0					
ANR	5223730	Identifier	buf		5223716	1					
ANR	5223731	AssignmentExpression	* buf = malloc ( len + 1 )		5223716	2		=			
ANR	5223732	Identifier	buf		5223716	0					
ANR	5223733	CallExpression	malloc ( len + 1 )		5223716	1					
ANR	5223734	Callee	malloc		5223716	0					
ANR	5223735	Identifier	malloc		5223716	0					
ANR	5223736	ArgumentList	len + 1		5223716	1					
ANR	5223737	Argument	len + 1		5223716	0					
ANR	5223738	AdditiveExpression	len + 1		5223716	0		+			
ANR	5223739	Identifier	len		5223716	0					
ANR	5223740	PrimaryExpression	1		5223716	1					
ANR	5223741	IfStatement	if ( buf )		5223716	2					
ANR	5223742	Condition	buf	712:5:14777:14779	5223716	0	True				
ANR	5223743	Identifier	buf		5223716	0					
ANR	5223744	CompoundStatement		6:10:76:76	5223716	1					
ANR	5223745	ExpressionStatement	"memcpy ( buf , str , len )"	713:2:14786:14808	5223716	0	True				
ANR	5223746	CallExpression	"memcpy ( buf , str , len )"		5223716	0					
ANR	5223747	Callee	memcpy		5223716	0					
ANR	5223748	Identifier	memcpy		5223716	0					
ANR	5223749	ArgumentList	buf		5223716	1					
ANR	5223750	Argument	buf		5223716	0					
ANR	5223751	Identifier	buf		5223716	0					
ANR	5223752	Argument	str		5223716	1					
ANR	5223753	Identifier	str		5223716	0					
ANR	5223754	Argument	len		5223716	2					
ANR	5223755	Identifier	len		5223716	0					
ANR	5223756	ExpressionStatement	buf [ len ] = 0	714:2:14812:14824	5223716	1	True				
ANR	5223757	AssignmentExpression	buf [ len ] = 0		5223716	0		=			
ANR	5223758	ArrayIndexing	buf [ len ]		5223716	0					
ANR	5223759	Identifier	buf		5223716	0					
ANR	5223760	Identifier	len		5223716	1					
ANR	5223761	PrimaryExpression	0		5223716	1					
ANR	5223762	ReturnStatement	return buf ;	716:1:14830:14840	5223716	3	True				
ANR	5223763	Identifier	buf		5223716	0					
ANR	5223764	ReturnType	R_API char *		5223716	1					
ANR	5223765	Identifier	r_str_newlen		5223716	2					
ANR	5223766	ParameterList	"const char * str , int len"		5223716	3					
ANR	5223767	Parameter	const char * str	707:25:14679:14693	5223716	0	True				
ANR	5223768	ParameterType	const char *		5223716	0					
ANR	5223769	Identifier	str		5223716	1					
ANR	5223770	Parameter	int len	707:42:14696:14702	5223716	1	True				
ANR	5223771	ParameterType	int		5223716	0					
ANR	5223772	Identifier	len		5223716	1					
ANR	5223773	CFGEntryNode	ENTRY		5223716		True				
ANR	5223774	CFGExitNode	EXIT		5223716		True				
ANR	5223775	Symbol	str		5223716						
ANR	5223776	Symbol	malloc		5223716						
ANR	5223777	Symbol	buf		5223716						
ANR	5223778	Symbol	* buf		5223716						
ANR	5223779	Symbol	NULL		5223716						
ANR	5223780	Symbol	len		5223716						
ANR	5223781	Symbol	* len		5223716						
ANR	5223782	Function	r_str_trunc_ellipsis	719:0:14845:15100							
ANR	5223783	FunctionDef	"r_str_trunc_ellipsis (const char * str , int len)"		5223782	0					
ANR	5223784	CompoundStatement		719:59:14904:15100	5223782	0					
ANR	5223785	IfStatement	if ( ! str )		5223782	0					
ANR	5223786	Condition	! str	720:5:14911:14914	5223782	0	True				
ANR	5223787	UnaryOperationExpression	! str		5223782	0					
ANR	5223788	UnaryOperator	!		5223782	0					
ANR	5223789	Identifier	str		5223782	1					
ANR	5223790	CompoundStatement		2:11:12:12	5223782	1					
ANR	5223791	ReturnStatement	return NULL ;	721:2:14921:14932	5223782	0	True				
ANR	5223792	Identifier	NULL		5223782	0					
ANR	5223793	IfStatement	if ( strlen ( str ) < len )		5223782	1					
ANR	5223794	Condition	strlen ( str ) < len	723:5:14942:14959	5223782	0	True				
ANR	5223795	RelationalExpression	strlen ( str ) < len		5223782	0		<			
ANR	5223796	CallExpression	strlen ( str )		5223782	0					
ANR	5223797	Callee	strlen		5223782	0					
ANR	5223798	Identifier	strlen		5223782	0					
ANR	5223799	ArgumentList	str		5223782	1					
ANR	5223800	Argument	str		5223782	0					
ANR	5223801	Identifier	str		5223782	0					
ANR	5223802	Identifier	len		5223782	1					
ANR	5223803	CompoundStatement		5:25:57:57	5223782	1					
ANR	5223804	ReturnStatement	return strdup ( str ) ;	724:2:14966:14985	5223782	0	True				
ANR	5223805	CallExpression	strdup ( str )		5223782	0					
ANR	5223806	Callee	strdup		5223782	0					
ANR	5223807	Identifier	strdup		5223782	0					
ANR	5223808	ArgumentList	str		5223782	1					
ANR	5223809	Argument	str		5223782	0					
ANR	5223810	Identifier	str		5223782	0					
ANR	5223811	IdentifierDeclStatement	"char * buf = r_str_newlen ( str , len ) ;"	726:1:14991:15026	5223782	2	True				
ANR	5223812	IdentifierDecl	"* buf = r_str_newlen ( str , len )"		5223782	0					
ANR	5223813	IdentifierDeclType	char *		5223782	0					
ANR	5223814	Identifier	buf		5223782	1					
ANR	5223815	AssignmentExpression	"* buf = r_str_newlen ( str , len )"		5223782	2		=			
ANR	5223816	Identifier	buf		5223782	0					
ANR	5223817	CallExpression	"r_str_newlen ( str , len )"		5223782	1					
ANR	5223818	Callee	r_str_newlen		5223782	0					
ANR	5223819	Identifier	r_str_newlen		5223782	0					
ANR	5223820	ArgumentList	str		5223782	1					
ANR	5223821	Argument	str		5223782	0					
ANR	5223822	Identifier	str		5223782	0					
ANR	5223823	Argument	len		5223782	1					
ANR	5223824	Identifier	len		5223782	0					
ANR	5223825	IfStatement	if ( buf && len > 4 )		5223782	3					
ANR	5223826	Condition	buf && len > 4	727:5:15033:15046	5223782	0	True				
ANR	5223827	AndExpression	buf && len > 4		5223782	0		&&			
ANR	5223828	Identifier	buf		5223782	0					
ANR	5223829	RelationalExpression	len > 4		5223782	1		>			
ANR	5223830	Identifier	len		5223782	0					
ANR	5223831	PrimaryExpression	4		5223782	1					
ANR	5223832	CompoundStatement		9:21:144:144	5223782	1					
ANR	5223833	ExpressionStatement	"strcpy ( buf + len - 4 , ""..."" )"	728:2:15053:15082	5223782	0	True				
ANR	5223834	CallExpression	"strcpy ( buf + len - 4 , ""..."" )"		5223782	0					
ANR	5223835	Callee	strcpy		5223782	0					
ANR	5223836	Identifier	strcpy		5223782	0					
ANR	5223837	ArgumentList	buf + len - 4		5223782	1					
ANR	5223838	Argument	buf + len - 4		5223782	0					
ANR	5223839	AdditiveExpression	buf + len - 4		5223782	0		+			
ANR	5223840	Identifier	buf		5223782	0					
ANR	5223841	AdditiveExpression	len - 4		5223782	1		-			
ANR	5223842	Identifier	len		5223782	0					
ANR	5223843	PrimaryExpression	4		5223782	1					
ANR	5223844	Argument	"""..."""		5223782	1					
ANR	5223845	PrimaryExpression	"""..."""		5223782	0					
ANR	5223846	ReturnStatement	return buf ;	730:1:15088:15098	5223782	4	True				
ANR	5223847	Identifier	buf		5223782	0					
ANR	5223848	ReturnType	R_API char *		5223782	1					
ANR	5223849	Identifier	r_str_trunc_ellipsis		5223782	2					
ANR	5223850	ParameterList	"const char * str , int len"		5223782	3					
ANR	5223851	Parameter	const char * str	719:33:14878:14892	5223782	0	True				
ANR	5223852	ParameterType	const char *		5223782	0					
ANR	5223853	Identifier	str		5223782	1					
ANR	5223854	Parameter	int len	719:50:14895:14901	5223782	1	True				
ANR	5223855	ParameterType	int		5223782	0					
ANR	5223856	Identifier	len		5223782	1					
ANR	5223857	CFGEntryNode	ENTRY		5223782		True				
ANR	5223858	CFGExitNode	EXIT		5223782		True				
ANR	5223859	Symbol	str		5223782						
ANR	5223860	Symbol	strlen		5223782						
ANR	5223861	Symbol	buf		5223782						
ANR	5223862	Symbol	NULL		5223782						
ANR	5223863	Symbol	len		5223782						
ANR	5223864	Symbol	strdup		5223782						
ANR	5223865	Symbol	r_str_newlen		5223782						
ANR	5223866	Function	r_str_newf	733:0:15103:15446							
ANR	5223867	FunctionDef	r_str_newf (const char * fmt)		5223866	0					
ANR	5223868	CompoundStatement		733:45:15148:15446	5223866	0					
ANR	5223869	IdentifierDeclStatement	"va_list ap , ap2 ;"	734:1:15151:15166	5223866	0	True				
ANR	5223870	IdentifierDecl	ap		5223866	0					
ANR	5223871	IdentifierDeclType	va_list		5223866	0					
ANR	5223872	Identifier	ap		5223866	1					
ANR	5223873	IdentifierDecl	ap2		5223866	1					
ANR	5223874	IdentifierDeclType	va_list		5223866	0					
ANR	5223875	Identifier	ap2		5223866	1					
ANR	5223876	ExpressionStatement	"va_start ( ap , fmt )"	736:1:15170:15188	5223866	1	True				
ANR	5223877	CallExpression	"va_start ( ap , fmt )"		5223866	0					
ANR	5223878	Callee	va_start		5223866	0					
ANR	5223879	Identifier	va_start		5223866	0					
ANR	5223880	ArgumentList	ap		5223866	1					
ANR	5223881	Argument	ap		5223866	0					
ANR	5223882	Identifier	ap		5223866	0					
ANR	5223883	Argument	fmt		5223866	1					
ANR	5223884	Identifier	fmt		5223866	0					
ANR	5223885	IfStatement	"if ( ! strchr ( fmt , '%' ) )"		5223866	2					
ANR	5223886	Condition	"! strchr ( fmt , '%' )"	737:5:15195:15212	5223866	0	True				
ANR	5223887	UnaryOperationExpression	"! strchr ( fmt , '%' )"		5223866	0					
ANR	5223888	UnaryOperator	!		5223866	0					
ANR	5223889	CallExpression	"strchr ( fmt , '%' )"		5223866	1					
ANR	5223890	Callee	strchr		5223866	0					
ANR	5223891	Identifier	strchr		5223866	0					
ANR	5223892	ArgumentList	fmt		5223866	1					
ANR	5223893	Argument	fmt		5223866	0					
ANR	5223894	Identifier	fmt		5223866	0					
ANR	5223895	Argument	'%'		5223866	1					
ANR	5223896	PrimaryExpression	'%'		5223866	0					
ANR	5223897	CompoundStatement		5:25:66:66	5223866	1					
ANR	5223898	ExpressionStatement	va_end ( ap )	738:2:15219:15230	5223866	0	True				
ANR	5223899	CallExpression	va_end ( ap )		5223866	0					
ANR	5223900	Callee	va_end		5223866	0					
ANR	5223901	Identifier	va_end		5223866	0					
ANR	5223902	ArgumentList	ap		5223866	1					
ANR	5223903	Argument	ap		5223866	0					
ANR	5223904	Identifier	ap		5223866	0					
ANR	5223905	ReturnStatement	return strdup ( fmt ) ;	739:2:15234:15253	5223866	1	True				
ANR	5223906	CallExpression	strdup ( fmt )		5223866	0					
ANR	5223907	Callee	strdup		5223866	0					
ANR	5223908	Identifier	strdup		5223866	0					
ANR	5223909	ArgumentList	fmt		5223866	1					
ANR	5223910	Argument	fmt		5223866	0					
ANR	5223911	Identifier	fmt		5223866	0					
ANR	5223912	ExpressionStatement	"va_copy ( ap2 , ap )"	741:1:15259:15276	5223866	3	True				
ANR	5223913	CallExpression	"va_copy ( ap2 , ap )"		5223866	0					
ANR	5223914	Callee	va_copy		5223866	0					
ANR	5223915	Identifier	va_copy		5223866	0					
ANR	5223916	ArgumentList	ap2		5223866	1					
ANR	5223917	Argument	ap2		5223866	0					
ANR	5223918	Identifier	ap2		5223866	0					
ANR	5223919	Argument	ap		5223866	1					
ANR	5223920	Identifier	ap		5223866	0					
ANR	5223921	IdentifierDeclStatement	"int ret = vsnprintf ( NULL , 0 , fmt , ap2 ) ;"	742:1:15279:15318	5223866	4	True				
ANR	5223922	IdentifierDecl	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		5223866	0					
ANR	5223923	IdentifierDeclType	int		5223866	0					
ANR	5223924	Identifier	ret		5223866	1					
ANR	5223925	AssignmentExpression	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		5223866	2		=			
ANR	5223926	Identifier	ret		5223866	0					
ANR	5223927	CallExpression	"vsnprintf ( NULL , 0 , fmt , ap2 )"		5223866	1					
ANR	5223928	Callee	vsnprintf		5223866	0					
ANR	5223929	Identifier	vsnprintf		5223866	0					
ANR	5223930	ArgumentList	NULL		5223866	1					
ANR	5223931	Argument	NULL		5223866	0					
ANR	5223932	Identifier	NULL		5223866	0					
ANR	5223933	Argument	0		5223866	1					
ANR	5223934	PrimaryExpression	0		5223866	0					
ANR	5223935	Argument	fmt		5223866	2					
ANR	5223936	Identifier	fmt		5223866	0					
ANR	5223937	Argument	ap2		5223866	3					
ANR	5223938	Identifier	ap2		5223866	0					
ANR	5223939	ExpressionStatement	ret ++	743:1:15321:15326	5223866	5	True				
ANR	5223940	PostIncDecOperationExpression	ret ++		5223866	0					
ANR	5223941	Identifier	ret		5223866	0					
ANR	5223942	IncDec	++		5223866	1					
ANR	5223943	IdentifierDeclStatement	"char * p = calloc ( 1 , ret ) ;"	744:1:15329:15354	5223866	6	True				
ANR	5223944	IdentifierDecl	"* p = calloc ( 1 , ret )"		5223866	0					
ANR	5223945	IdentifierDeclType	char *		5223866	0					
ANR	5223946	Identifier	p		5223866	1					
ANR	5223947	AssignmentExpression	"* p = calloc ( 1 , ret )"		5223866	2		=			
ANR	5223948	Identifier	p		5223866	0					
ANR	5223949	CallExpression	"calloc ( 1 , ret )"		5223866	1					
ANR	5223950	Callee	calloc		5223866	0					
ANR	5223951	Identifier	calloc		5223866	0					
ANR	5223952	ArgumentList	1		5223866	1					
ANR	5223953	Argument	1		5223866	0					
ANR	5223954	PrimaryExpression	1		5223866	0					
ANR	5223955	Argument	ret		5223866	1					
ANR	5223956	Identifier	ret		5223866	0					
ANR	5223957	IfStatement	if ( p )		5223866	7					
ANR	5223958	Condition	p	745:5:15361:15361	5223866	0	True				
ANR	5223959	Identifier	p		5223866	0					
ANR	5223960	CompoundStatement		13:8:215:215	5223866	1					
ANR	5223961	ExpressionStatement	"( void ) vsnprintf ( p , ret , fmt , ap )"	746:2:15368:15401	5223866	0	True				
ANR	5223962	CastExpression	"( void ) vsnprintf ( p , ret , fmt , ap )"		5223866	0					
ANR	5223963	CastTarget	void		5223866	0					
ANR	5223964	CallExpression	"vsnprintf ( p , ret , fmt , ap )"		5223866	1					
ANR	5223965	Callee	vsnprintf		5223866	0					
ANR	5223966	Identifier	vsnprintf		5223866	0					
ANR	5223967	ArgumentList	p		5223866	1					
ANR	5223968	Argument	p		5223866	0					
ANR	5223969	Identifier	p		5223866	0					
ANR	5223970	Argument	ret		5223866	1					
ANR	5223971	Identifier	ret		5223866	0					
ANR	5223972	Argument	fmt		5223866	2					
ANR	5223973	Identifier	fmt		5223866	0					
ANR	5223974	Argument	ap		5223866	3					
ANR	5223975	Identifier	ap		5223866	0					
ANR	5223976	ExpressionStatement	va_end ( ap2 )	748:1:15407:15419	5223866	8	True				
ANR	5223977	CallExpression	va_end ( ap2 )		5223866	0					
ANR	5223978	Callee	va_end		5223866	0					
ANR	5223979	Identifier	va_end		5223866	0					
ANR	5223980	ArgumentList	ap2		5223866	1					
ANR	5223981	Argument	ap2		5223866	0					
ANR	5223982	Identifier	ap2		5223866	0					
ANR	5223983	ExpressionStatement	va_end ( ap )	749:1:15422:15433	5223866	9	True				
ANR	5223984	CallExpression	va_end ( ap )		5223866	0					
ANR	5223985	Callee	va_end		5223866	0					
ANR	5223986	Identifier	va_end		5223866	0					
ANR	5223987	ArgumentList	ap		5223866	1					
ANR	5223988	Argument	ap		5223866	0					
ANR	5223989	Identifier	ap		5223866	0					
ANR	5223990	ReturnStatement	return p ;	750:1:15436:15444	5223866	10	True				
ANR	5223991	Identifier	p		5223866	0					
ANR	5223992	ReturnType	R_API char *		5223866	1					
ANR	5223993	Identifier	r_str_newf		5223866	2					
ANR	5223994	ParameterList	const char * fmt		5223866	3					
ANR	5223995	Parameter	const char * fmt	733:23:15126:15140	5223866	0	True				
ANR	5223996	ParameterType	const char *		5223866	0					
ANR	5223997	Identifier	fmt		5223866	1					
ANR	5223998	CFGEntryNode	ENTRY		5223866		True				
ANR	5223999	CFGExitNode	EXIT		5223866		True				
ANR	5224000	Symbol	ret		5223866						
ANR	5224001	Symbol	p		5223866						
ANR	5224002	Symbol	ap2		5223866						
ANR	5224003	Symbol	NULL		5223866						
ANR	5224004	Symbol	strchr		5223866						
ANR	5224005	Symbol	strdup		5223866						
ANR	5224006	Symbol	calloc		5223866						
ANR	5224007	Symbol	fmt		5223866						
ANR	5224008	Symbol	vsnprintf		5223866						
ANR	5224009	Symbol	ap		5223866						
ANR	5224010	Function	r_str_ncpy	754:0:15526:15742							
ANR	5224011	FunctionDef	"r_str_ncpy (char * dst , const char * src , size_t n)"		5224010	0					
ANR	5224012	CompoundStatement		754:60:15586:15742	5224010	0					
ANR	5224013	IdentifierDeclStatement	int i ;	755:1:15589:15594	5224010	0	True				
ANR	5224014	IdentifierDecl	i		5224010	0					
ANR	5224015	IdentifierDeclType	int		5224010	0					
ANR	5224016	Identifier	i		5224010	1					
ANR	5224017	IfStatement	if ( n == 0 )		5224010	1					
ANR	5224018	Condition	n == 0	758:5:15635:15640	5224010	0	True				
ANR	5224019	EqualityExpression	n == 0		5224010	0		==			
ANR	5224020	Identifier	n		5224010	0					
ANR	5224021	PrimaryExpression	0		5224010	1					
ANR	5224022	CompoundStatement		5:13:56:56	5224010	1					
ANR	5224023	ReturnStatement	return ;	759:2:15647:15653	5224010	0	True				
ANR	5224024	ExpressionStatement	n --	762:1:15660:15663	5224010	2	True				
ANR	5224025	PostIncDecOperationExpression	n --		5224010	0					
ANR	5224026	Identifier	n		5224010	0					
ANR	5224027	IncDec	--		5224010	1					
ANR	5224028	ForStatement	"for ( i = 0 ; src [ i ] && n > 0 ; i ++ , n -- )"		5224010	3					
ANR	5224029	ForInit	i = 0 ;	763:6:15671:15676	5224010	0	True				
ANR	5224030	AssignmentExpression	i = 0		5224010	0		=			
ANR	5224031	Identifier	i		5224010	0					
ANR	5224032	PrimaryExpression	0		5224010	1					
ANR	5224033	Condition	src [ i ] && n > 0	763:13:15678:15692	5224010	1	True				
ANR	5224034	AndExpression	src [ i ] && n > 0		5224010	0		&&			
ANR	5224035	ArrayIndexing	src [ i ]		5224010	0					
ANR	5224036	Identifier	src		5224010	0					
ANR	5224037	Identifier	i		5224010	1					
ANR	5224038	RelationalExpression	n > 0		5224010	1		>			
ANR	5224039	Identifier	n		5224010	0					
ANR	5224040	PrimaryExpression	0		5224010	1					
ANR	5224041	Expression	"i ++ , n --"	763:30:15695:15702	5224010	2	True				
ANR	5224042	PostIncDecOperationExpression	i ++		5224010	0					
ANR	5224043	Identifier	i		5224010	0					
ANR	5224044	IncDec	++		5224010	1					
ANR	5224045	PostIncDecOperationExpression	n --		5224010	1					
ANR	5224046	Identifier	n		5224010	0					
ANR	5224047	IncDec	--		5224010	1					
ANR	5224048	CompoundStatement		10:40:118:118	5224010	3					
ANR	5224049	ExpressionStatement	dst [ i ] = src [ i ]	764:2:15709:15724	5224010	0	True				
ANR	5224050	AssignmentExpression	dst [ i ] = src [ i ]		5224010	0		=			
ANR	5224051	ArrayIndexing	dst [ i ]		5224010	0					
ANR	5224052	Identifier	dst		5224010	0					
ANR	5224053	Identifier	i		5224010	1					
ANR	5224054	ArrayIndexing	src [ i ]		5224010	1					
ANR	5224055	Identifier	src		5224010	0					
ANR	5224056	Identifier	i		5224010	1					
ANR	5224057	ExpressionStatement	dst [ i ] = 0	766:1:15730:15740	5224010	4	True				
ANR	5224058	AssignmentExpression	dst [ i ] = 0		5224010	0		=			
ANR	5224059	ArrayIndexing	dst [ i ]		5224010	0					
ANR	5224060	Identifier	dst		5224010	0					
ANR	5224061	Identifier	i		5224010	1					
ANR	5224062	PrimaryExpression	0		5224010	1					
ANR	5224063	ReturnType	R_API void		5224010	1					
ANR	5224064	Identifier	r_str_ncpy		5224010	2					
ANR	5224065	ParameterList	"char * dst , const char * src , size_t n"		5224010	3					
ANR	5224066	Parameter	char * dst	754:22:15548:15556	5224010	0	True				
ANR	5224067	ParameterType	char *		5224010	0					
ANR	5224068	Identifier	dst		5224010	1					
ANR	5224069	Parameter	const char * src	754:33:15559:15573	5224010	1	True				
ANR	5224070	ParameterType	const char *		5224010	0					
ANR	5224071	Identifier	src		5224010	1					
ANR	5224072	Parameter	size_t n	754:50:15576:15583	5224010	2	True				
ANR	5224073	ParameterType	size_t		5224010	0					
ANR	5224074	Identifier	n		5224010	1					
ANR	5224075	CFGEntryNode	ENTRY		5224010		True				
ANR	5224076	CFGExitNode	EXIT		5224010		True				
ANR	5224077	Symbol	* dst		5224010						
ANR	5224078	Symbol	* i		5224010						
ANR	5224079	Symbol	dst		5224010						
ANR	5224080	Symbol	src		5224010						
ANR	5224081	Symbol	i		5224010						
ANR	5224082	Symbol	n		5224010						
ANR	5224083	Symbol	* src		5224010						
ANR	5224084	Function	r_str_ccmp	771:0:15870:16052							
ANR	5224085	FunctionDef	"r_str_ccmp (const char * dst , const char * src , int ch)"		5224084	0					
ANR	5224086	CompoundStatement		771:64:15934:16052	5224084	0					
ANR	5224087	IdentifierDeclStatement	int i ;	772:1:15937:15942	5224084	0	True				
ANR	5224088	IdentifierDecl	i		5224084	0					
ANR	5224089	IdentifierDeclType	int		5224084	0					
ANR	5224090	Identifier	i		5224084	1					
ANR	5224091	ForStatement	for ( i = 0 ; src [ i ] && src [ i ] != ch ; i ++ )		5224084	1					
ANR	5224092	ForInit	i = 0 ;	773:6:15950:15955	5224084	0	True				
ANR	5224093	AssignmentExpression	i = 0		5224084	0		=			
ANR	5224094	Identifier	i		5224084	0					
ANR	5224095	PrimaryExpression	0		5224084	1					
ANR	5224096	Condition	src [ i ] && src [ i ] != ch	773:13:15957:15978	5224084	1	True				
ANR	5224097	AndExpression	src [ i ] && src [ i ] != ch		5224084	0		&&			
ANR	5224098	ArrayIndexing	src [ i ]		5224084	0					
ANR	5224099	Identifier	src		5224084	0					
ANR	5224100	Identifier	i		5224084	1					
ANR	5224101	EqualityExpression	src [ i ] != ch		5224084	1		!=			
ANR	5224102	ArrayIndexing	src [ i ]		5224084	0					
ANR	5224103	Identifier	src		5224084	0					
ANR	5224104	Identifier	i		5224084	1					
ANR	5224105	Identifier	ch		5224084	1					
ANR	5224106	PostIncDecOperationExpression	i ++	773:37:15981:15983	5224084	2	True				
ANR	5224107	Identifier	i		5224084	0					
ANR	5224108	IncDec	++		5224084	1					
ANR	5224109	CompoundStatement		3:42:51:51	5224084	3					
ANR	5224110	IfStatement	if ( dst [ i ] != src [ i ] )		5224084	0					
ANR	5224111	Condition	dst [ i ] != src [ i ]	774:6:15994:16009	5224084	0	True				
ANR	5224112	EqualityExpression	dst [ i ] != src [ i ]		5224084	0		!=			
ANR	5224113	ArrayIndexing	dst [ i ]		5224084	0					
ANR	5224114	Identifier	dst		5224084	0					
ANR	5224115	Identifier	i		5224084	1					
ANR	5224116	ArrayIndexing	src [ i ]		5224084	1					
ANR	5224117	Identifier	src		5224084	0					
ANR	5224118	Identifier	i		5224084	1					
ANR	5224119	CompoundStatement		4:24:77:77	5224084	1					
ANR	5224120	ReturnStatement	return true ;	775:3:16017:16028	5224084	0	True				
ANR	5224121	Identifier	true		5224084	0					
ANR	5224122	ReturnStatement	return false ;	778:1:16038:16050	5224084	2	True				
ANR	5224123	Identifier	false		5224084	0					
ANR	5224124	ReturnType	R_API bool		5224084	1					
ANR	5224125	Identifier	r_str_ccmp		5224084	2					
ANR	5224126	ParameterList	"const char * dst , const char * src , int ch"		5224084	3					
ANR	5224127	Parameter	const char * dst	771:22:15892:15906	5224084	0	True				
ANR	5224128	ParameterType	const char *		5224084	0					
ANR	5224129	Identifier	dst		5224084	1					
ANR	5224130	Parameter	const char * src	771:39:15909:15923	5224084	1	True				
ANR	5224131	ParameterType	const char *		5224084	0					
ANR	5224132	Identifier	src		5224084	1					
ANR	5224133	Parameter	int ch	771:56:15926:15931	5224084	2	True				
ANR	5224134	ParameterType	int		5224084	0					
ANR	5224135	Identifier	ch		5224084	1					
ANR	5224136	CFGEntryNode	ENTRY		5224084		True				
ANR	5224137	CFGExitNode	EXIT		5224084		True				
ANR	5224138	Symbol	* dst		5224084						
ANR	5224139	Symbol	* i		5224084						
ANR	5224140	Symbol	dst		5224084						
ANR	5224141	Symbol	src		5224084						
ANR	5224142	Symbol	ch		5224084						
ANR	5224143	Symbol	true		5224084						
ANR	5224144	Symbol	false		5224084						
ANR	5224145	Symbol	i		5224084						
ANR	5224146	Symbol	* src		5224084						
ANR	5224147	Function	r_str_cmp	782:0:16103:16345							
ANR	5224148	FunctionDef	"r_str_cmp (const char * a , const char * b , int len)"		5224147	0					
ANR	5224149	CompoundStatement		782:59:16162:16345	5224147	0					
ANR	5224150	IfStatement	if ( ( a == b ) || ( ! a && ! b ) )		5224147	0					
ANR	5224151	Condition	( a == b ) || ( ! a && ! b )	783:5:16169:16190	5224147	0	True				
ANR	5224152	OrExpression	( a == b ) || ( ! a && ! b )		5224147	0		||			
ANR	5224153	EqualityExpression	a == b		5224147	0		==			
ANR	5224154	Identifier	a		5224147	0					
ANR	5224155	Identifier	b		5224147	1					
ANR	5224156	AndExpression	! a && ! b		5224147	1		&&			
ANR	5224157	UnaryOperationExpression	! a		5224147	0					
ANR	5224158	UnaryOperator	!		5224147	0					
ANR	5224159	Identifier	a		5224147	1					
ANR	5224160	UnaryOperationExpression	! b		5224147	1					
ANR	5224161	UnaryOperator	!		5224147	0					
ANR	5224162	Identifier	b		5224147	1					
ANR	5224163	CompoundStatement		2:29:30:30	5224147	1					
ANR	5224164	ReturnStatement	return 0 ;	784:2:16197:16205	5224147	0	True				
ANR	5224165	PrimaryExpression	0		5224147	0					
ANR	5224166	IfStatement	if ( ! a && b )		5224147	1					
ANR	5224167	Condition	! a && b	786:5:16215:16221	5224147	0	True				
ANR	5224168	AndExpression	! a && b		5224147	0		&&			
ANR	5224169	UnaryOperationExpression	! a		5224147	0					
ANR	5224170	UnaryOperator	!		5224147	0					
ANR	5224171	Identifier	a		5224147	1					
ANR	5224172	Identifier	b		5224147	1					
ANR	5224173	CompoundStatement		5:14:61:61	5224147	1					
ANR	5224174	ReturnStatement	return - 1 ;	787:2:16228:16237	5224147	0	True				
ANR	5224175	UnaryOperationExpression	- 1		5224147	0					
ANR	5224176	UnaryOperator	-		5224147	0					
ANR	5224177	PrimaryExpression	1		5224147	1					
ANR	5224178	IfStatement	if ( a && ! b )		5224147	2					
ANR	5224179	Condition	a && ! b	789:5:16247:16253	5224147	0	True				
ANR	5224180	AndExpression	a && ! b		5224147	0		&&			
ANR	5224181	Identifier	a		5224147	0					
ANR	5224182	UnaryOperationExpression	! b		5224147	1					
ANR	5224183	UnaryOperator	!		5224147	0					
ANR	5224184	Identifier	b		5224147	1					
ANR	5224185	CompoundStatement		8:14:93:93	5224147	1					
ANR	5224186	ReturnStatement	return 1 ;	790:2:16260:16268	5224147	0	True				
ANR	5224187	PrimaryExpression	1		5224147	0					
ANR	5224188	IfStatement	if ( len < 0 )		5224147	3					
ANR	5224189	Condition	len < 0	792:5:16278:16284	5224147	0	True				
ANR	5224190	RelationalExpression	len < 0		5224147	0		<			
ANR	5224191	Identifier	len		5224147	0					
ANR	5224192	PrimaryExpression	0		5224147	1					
ANR	5224193	CompoundStatement		11:14:124:124	5224147	1					
ANR	5224194	ReturnStatement	"return strcmp ( a , b ) ;"	793:2:16291:16311	5224147	0	True				
ANR	5224195	CallExpression	"strcmp ( a , b )"		5224147	0					
ANR	5224196	Callee	strcmp		5224147	0					
ANR	5224197	Identifier	strcmp		5224147	0					
ANR	5224198	ArgumentList	a		5224147	1					
ANR	5224199	Argument	a		5224147	0					
ANR	5224200	Identifier	a		5224147	0					
ANR	5224201	Argument	b		5224147	1					
ANR	5224202	Identifier	b		5224147	0					
ANR	5224203	ReturnStatement	"return strncmp ( a , b , len ) ;"	795:1:16317:16343	5224147	4	True				
ANR	5224204	CallExpression	"strncmp ( a , b , len )"		5224147	0					
ANR	5224205	Callee	strncmp		5224147	0					
ANR	5224206	Identifier	strncmp		5224147	0					
ANR	5224207	ArgumentList	a		5224147	1					
ANR	5224208	Argument	a		5224147	0					
ANR	5224209	Identifier	a		5224147	0					
ANR	5224210	Argument	b		5224147	1					
ANR	5224211	Identifier	b		5224147	0					
ANR	5224212	Argument	len		5224147	2					
ANR	5224213	Identifier	len		5224147	0					
ANR	5224214	ReturnType	R_API int		5224147	1					
ANR	5224215	Identifier	r_str_cmp		5224147	2					
ANR	5224216	ParameterList	"const char * a , const char * b , int len"		5224147	3					
ANR	5224217	Parameter	const char * a	782:20:16123:16135	5224147	0	True				
ANR	5224218	ParameterType	const char *		5224147	0					
ANR	5224219	Identifier	a		5224147	1					
ANR	5224220	Parameter	const char * b	782:35:16138:16150	5224147	1	True				
ANR	5224221	ParameterType	const char *		5224147	0					
ANR	5224222	Identifier	b		5224147	1					
ANR	5224223	Parameter	int len	782:50:16153:16159	5224147	2	True				
ANR	5224224	ParameterType	int		5224147	0					
ANR	5224225	Identifier	len		5224147	1					
ANR	5224226	CFGEntryNode	ENTRY		5224147		True				
ANR	5224227	CFGExitNode	EXIT		5224147		True				
ANR	5224228	Symbol	strcmp		5224147						
ANR	5224229	Symbol	a		5224147						
ANR	5224230	Symbol	strncmp		5224147						
ANR	5224231	Symbol	b		5224147						
ANR	5224232	Symbol	len		5224147						
ANR	5224233	Function	r_str_ccpy	799:0:16418:16572							
ANR	5224234	FunctionDef	"r_str_ccpy (char * dst , char * src , int ch)"		5224233	0					
ANR	5224235	CompoundStatement		799:51:16469:16572	5224233	0					
ANR	5224236	IdentifierDeclStatement	int i ;	800:1:16472:16477	5224233	0	True				
ANR	5224237	IdentifierDecl	i		5224233	0					
ANR	5224238	IdentifierDeclType	int		5224233	0					
ANR	5224239	Identifier	i		5224233	1					
ANR	5224240	ForStatement	for ( i = 0 ; src [ i ] && src [ i ] != ch ; i ++ )		5224233	1					
ANR	5224241	ForInit	i = 0 ;	801:6:16485:16490	5224233	0	True				
ANR	5224242	AssignmentExpression	i = 0		5224233	0		=			
ANR	5224243	Identifier	i		5224233	0					
ANR	5224244	PrimaryExpression	0		5224233	1					
ANR	5224245	Condition	src [ i ] && src [ i ] != ch	801:13:16492:16513	5224233	1	True				
ANR	5224246	AndExpression	src [ i ] && src [ i ] != ch		5224233	0		&&			
ANR	5224247	ArrayIndexing	src [ i ]		5224233	0					
ANR	5224248	Identifier	src		5224233	0					
ANR	5224249	Identifier	i		5224233	1					
ANR	5224250	EqualityExpression	src [ i ] != ch		5224233	1		!=			
ANR	5224251	ArrayIndexing	src [ i ]		5224233	0					
ANR	5224252	Identifier	src		5224233	0					
ANR	5224253	Identifier	i		5224233	1					
ANR	5224254	Identifier	ch		5224233	1					
ANR	5224255	PostIncDecOperationExpression	i ++	801:37:16516:16518	5224233	2	True				
ANR	5224256	Identifier	i		5224233	0					
ANR	5224257	IncDec	++		5224233	1					
ANR	5224258	CompoundStatement		3:42:51:51	5224233	3					
ANR	5224259	ExpressionStatement	dst [ i ] = src [ i ]	802:2:16525:16540	5224233	0	True				
ANR	5224260	AssignmentExpression	dst [ i ] = src [ i ]		5224233	0		=			
ANR	5224261	ArrayIndexing	dst [ i ]		5224233	0					
ANR	5224262	Identifier	dst		5224233	0					
ANR	5224263	Identifier	i		5224233	1					
ANR	5224264	ArrayIndexing	src [ i ]		5224233	1					
ANR	5224265	Identifier	src		5224233	0					
ANR	5224266	Identifier	i		5224233	1					
ANR	5224267	ExpressionStatement	dst [ i ] = '\\0'	804:1:16546:16559	5224233	2	True				
ANR	5224268	AssignmentExpression	dst [ i ] = '\\0'		5224233	0		=			
ANR	5224269	ArrayIndexing	dst [ i ]		5224233	0					
ANR	5224270	Identifier	dst		5224233	0					
ANR	5224271	Identifier	i		5224233	1					
ANR	5224272	PrimaryExpression	'\\0'		5224233	1					
ANR	5224273	ReturnStatement	return i ;	805:1:16562:16570	5224233	3	True				
ANR	5224274	Identifier	i		5224233	0					
ANR	5224275	ReturnType	R_API int		5224233	1					
ANR	5224276	Identifier	r_str_ccpy		5224233	2					
ANR	5224277	ParameterList	"char * dst , char * src , int ch"		5224233	3					
ANR	5224278	Parameter	char * dst	799:21:16439:16447	5224233	0	True				
ANR	5224279	ParameterType	char *		5224233	0					
ANR	5224280	Identifier	dst		5224233	1					
ANR	5224281	Parameter	char * src	799:32:16450:16458	5224233	1	True				
ANR	5224282	ParameterType	char *		5224233	0					
ANR	5224283	Identifier	src		5224233	1					
ANR	5224284	Parameter	int ch	799:43:16461:16466	5224233	2	True				
ANR	5224285	ParameterType	int		5224233	0					
ANR	5224286	Identifier	ch		5224233	1					
ANR	5224287	CFGEntryNode	ENTRY		5224233		True				
ANR	5224288	CFGExitNode	EXIT		5224233		True				
ANR	5224289	Symbol	* dst		5224233						
ANR	5224290	Symbol	* i		5224233						
ANR	5224291	Symbol	dst		5224233						
ANR	5224292	Symbol	src		5224233						
ANR	5224293	Symbol	ch		5224233						
ANR	5224294	Symbol	i		5224233						
ANR	5224295	Symbol	* src		5224233						
ANR	5224296	Function	r_str_word_get_first	808:0:16575:16707							
ANR	5224297	FunctionDef	r_str_word_get_first (const char * text)		5224296	0					
ANR	5224298	CompoundStatement		808:51:16626:16707	5224296	0					
ANR	5224299	ForStatement	for ( ; * text && IS_SEPARATOR ( * text ) ; text ++ )		5224296	0					
ANR	5224300	Condition	* text && IS_SEPARATOR ( * text )	809:8:16636:16664	5224296	0	True				
ANR	5224301	AndExpression	* text && IS_SEPARATOR ( * text )		5224296	0		&&			
ANR	5224302	UnaryOperationExpression	* text		5224296	0					
ANR	5224303	UnaryOperator	*		5224296	0					
ANR	5224304	Identifier	text		5224296	1					
ANR	5224305	CallExpression	IS_SEPARATOR ( * text )		5224296	1					
ANR	5224306	Callee	IS_SEPARATOR		5224296	0					
ANR	5224307	Identifier	IS_SEPARATOR		5224296	0					
ANR	5224308	ArgumentList	* text		5224296	1					
ANR	5224309	Argument	* text		5224296	0					
ANR	5224310	UnaryOperationExpression	* text		5224296	0					
ANR	5224311	UnaryOperator	*		5224296	0					
ANR	5224312	Identifier	text		5224296	1					
ANR	5224313	PostIncDecOperationExpression	text ++	809:39:16667:16672	5224296	1	True				
ANR	5224314	Identifier	text		5224296	0					
ANR	5224315	IncDec	++		5224296	1					
ANR	5224316	CompoundStatement		2:47:48:48	5224296	2					
ANR	5224317	ExpressionStatement		810:2:16679:16679	5224296	0	True				
ANR	5224318	ReturnStatement	return strdup ( text ) ;	812:1:16685:16705	5224296	1	True				
ANR	5224319	CallExpression	strdup ( text )		5224296	0					
ANR	5224320	Callee	strdup		5224296	0					
ANR	5224321	Identifier	strdup		5224296	0					
ANR	5224322	ArgumentList	text		5224296	1					
ANR	5224323	Argument	text		5224296	0					
ANR	5224324	Identifier	text		5224296	0					
ANR	5224325	ReturnType	R_API char *		5224296	1					
ANR	5224326	Identifier	r_str_word_get_first		5224296	2					
ANR	5224327	ParameterList	const char * text		5224296	3					
ANR	5224328	Parameter	const char * text	808:33:16608:16623	5224296	0	True				
ANR	5224329	ParameterType	const char *		5224296	0					
ANR	5224330	Identifier	text		5224296	1					
ANR	5224331	CFGEntryNode	ENTRY		5224296		True				
ANR	5224332	CFGExitNode	EXIT		5224296		True				
ANR	5224333	Symbol	IS_SEPARATOR		5224296						
ANR	5224334	Symbol	* text		5224296						
ANR	5224335	Symbol	text		5224296						
ANR	5224336	Symbol	strdup		5224296						
ANR	5224337	Function	r_str_get	815:6:16716:16786							
ANR	5224338	FunctionDef	r_str_get (const char * str)		5224337	0					
ANR	5224339	CompoundStatement		815:45:16755:16786	5224337	0					
ANR	5224340	ReturnStatement	return str ? str : nullstr_c ;	816:1:16758:16784	5224337	0	True				
ANR	5224341	ConditionalExpression	str ? str : nullstr_c		5224337	0					
ANR	5224342	Condition	str		5224337	0					
ANR	5224343	Identifier	str		5224337	0					
ANR	5224344	Identifier	str		5224337	1					
ANR	5224345	Identifier	nullstr_c		5224337	2					
ANR	5224346	ReturnType	const char *		5224337	1					
ANR	5224347	Identifier	r_str_get		5224337	2					
ANR	5224348	ParameterList	const char * str		5224337	3					
ANR	5224349	Parameter	const char * str	815:28:16738:16752	5224337	0	True				
ANR	5224350	ParameterType	const char *		5224337	0					
ANR	5224351	Identifier	str		5224337	1					
ANR	5224352	CFGEntryNode	ENTRY		5224337		True				
ANR	5224353	CFGExitNode	EXIT		5224337		True				
ANR	5224354	Symbol	str		5224337						
ANR	5224355	Symbol	nullstr_c		5224337						
ANR	5224356	Function	r_str_get2	819:6:16795:16864							
ANR	5224357	FunctionDef	r_str_get2 (const char * str)		5224356	0					
ANR	5224358	CompoundStatement		819:46:16835:16864	5224356	0					
ANR	5224359	ReturnStatement	return str ? str : nullstr ;	820:1:16838:16862	5224356	0	True				
ANR	5224360	ConditionalExpression	str ? str : nullstr		5224356	0					
ANR	5224361	Condition	str		5224356	0					
ANR	5224362	Identifier	str		5224356	0					
ANR	5224363	Identifier	str		5224356	1					
ANR	5224364	Identifier	nullstr		5224356	2					
ANR	5224365	ReturnType	const char *		5224356	1					
ANR	5224366	Identifier	r_str_get2		5224356	2					
ANR	5224367	ParameterList	const char * str		5224356	3					
ANR	5224368	Parameter	const char * str	819:29:16818:16832	5224356	0	True				
ANR	5224369	ParameterType	const char *		5224356	0					
ANR	5224370	Identifier	str		5224356	1					
ANR	5224371	CFGEntryNode	ENTRY		5224356		True				
ANR	5224372	CFGExitNode	EXIT		5224356		True				
ANR	5224373	Symbol	str		5224356						
ANR	5224374	Symbol	nullstr		5224356						
ANR	5224375	Function	r_str_ndup	823:0:16867:17068							
ANR	5224376	FunctionDef	"r_str_ndup (const char * ptr , int len)"		5224375	0					
ANR	5224377	CompoundStatement		823:49:16916:17068	5224375	0					
ANR	5224378	IfStatement	if ( len < 0 )		5224375	0					
ANR	5224379	Condition	len < 0	824:5:16923:16929	5224375	0	True				
ANR	5224380	RelationalExpression	len < 0		5224375	0		<			
ANR	5224381	Identifier	len		5224375	0					
ANR	5224382	PrimaryExpression	0		5224375	1					
ANR	5224383	CompoundStatement		2:14:15:15	5224375	1					
ANR	5224384	ReturnStatement	return NULL ;	825:2:16936:16947	5224375	0	True				
ANR	5224385	Identifier	NULL		5224375	0					
ANR	5224386	IdentifierDeclStatement	char * out = malloc ( len + 1 ) ;	827:1:16953:16981	5224375	1	True				
ANR	5224387	IdentifierDecl	* out = malloc ( len + 1 )		5224375	0					
ANR	5224388	IdentifierDeclType	char *		5224375	0					
ANR	5224389	Identifier	out		5224375	1					
ANR	5224390	AssignmentExpression	* out = malloc ( len + 1 )		5224375	2		=			
ANR	5224391	Identifier	out		5224375	0					
ANR	5224392	CallExpression	malloc ( len + 1 )		5224375	1					
ANR	5224393	Callee	malloc		5224375	0					
ANR	5224394	Identifier	malloc		5224375	0					
ANR	5224395	ArgumentList	len + 1		5224375	1					
ANR	5224396	Argument	len + 1		5224375	0					
ANR	5224397	AdditiveExpression	len + 1		5224375	0		+			
ANR	5224398	Identifier	len		5224375	0					
ANR	5224399	PrimaryExpression	1		5224375	1					
ANR	5224400	IfStatement	if ( ! out )		5224375	2					
ANR	5224401	Condition	! out	828:5:16988:16991	5224375	0	True				
ANR	5224402	UnaryOperationExpression	! out		5224375	0					
ANR	5224403	UnaryOperator	!		5224375	0					
ANR	5224404	Identifier	out		5224375	1					
ANR	5224405	CompoundStatement		6:11:77:77	5224375	1					
ANR	5224406	ReturnStatement	return NULL ;	829:2:16998:17009	5224375	0	True				
ANR	5224407	Identifier	NULL		5224375	0					
ANR	5224408	ExpressionStatement	"strncpy ( out , ptr , len )"	831:1:17015:17038	5224375	3	True				
ANR	5224409	CallExpression	"strncpy ( out , ptr , len )"		5224375	0					
ANR	5224410	Callee	strncpy		5224375	0					
ANR	5224411	Identifier	strncpy		5224375	0					
ANR	5224412	ArgumentList	out		5224375	1					
ANR	5224413	Argument	out		5224375	0					
ANR	5224414	Identifier	out		5224375	0					
ANR	5224415	Argument	ptr		5224375	1					
ANR	5224416	Identifier	ptr		5224375	0					
ANR	5224417	Argument	len		5224375	2					
ANR	5224418	Identifier	len		5224375	0					
ANR	5224419	ExpressionStatement	out [ len ] = 0	832:1:17041:17053	5224375	4	True				
ANR	5224420	AssignmentExpression	out [ len ] = 0		5224375	0		=			
ANR	5224421	ArrayIndexing	out [ len ]		5224375	0					
ANR	5224422	Identifier	out		5224375	0					
ANR	5224423	Identifier	len		5224375	1					
ANR	5224424	PrimaryExpression	0		5224375	1					
ANR	5224425	ReturnStatement	return out ;	833:1:17056:17066	5224375	5	True				
ANR	5224426	Identifier	out		5224375	0					
ANR	5224427	ReturnType	R_API char *		5224375	1					
ANR	5224428	Identifier	r_str_ndup		5224375	2					
ANR	5224429	ParameterList	"const char * ptr , int len"		5224375	3					
ANR	5224430	Parameter	const char * ptr	823:23:16890:16904	5224375	0	True				
ANR	5224431	ParameterType	const char *		5224375	0					
ANR	5224432	Identifier	ptr		5224375	1					
ANR	5224433	Parameter	int len	823:40:16907:16913	5224375	1	True				
ANR	5224434	ParameterType	int		5224375	0					
ANR	5224435	Identifier	len		5224375	1					
ANR	5224436	CFGEntryNode	ENTRY		5224375		True				
ANR	5224437	CFGExitNode	EXIT		5224375		True				
ANR	5224438	Symbol	malloc		5224375						
ANR	5224439	Symbol	NULL		5224375						
ANR	5224440	Symbol	len		5224375						
ANR	5224441	Symbol	* out		5224375						
ANR	5224442	Symbol	ptr		5224375						
ANR	5224443	Symbol	out		5224375						
ANR	5224444	Symbol	* len		5224375						
ANR	5224445	Function	r_str_dup	837:0:17091:17187							
ANR	5224446	FunctionDef	"r_str_dup (char * ptr , const char * string)"		5224445	0					
ANR	5224447	CompoundStatement		837:53:17144:17187	5224445	0					
ANR	5224448	ExpressionStatement	free ( ptr )	838:1:17147:17157	5224445	0	True				
ANR	5224449	CallExpression	free ( ptr )		5224445	0					
ANR	5224450	Callee	free		5224445	0					
ANR	5224451	Identifier	free		5224445	0					
ANR	5224452	ArgumentList	ptr		5224445	1					
ANR	5224453	Argument	ptr		5224445	0					
ANR	5224454	Identifier	ptr		5224445	0					
ANR	5224455	ReturnStatement	return r_str_new ( string ) ;	839:1:17160:17185	5224445	1	True				
ANR	5224456	CallExpression	r_str_new ( string )		5224445	0					
ANR	5224457	Callee	r_str_new		5224445	0					
ANR	5224458	Identifier	r_str_new		5224445	0					
ANR	5224459	ArgumentList	string		5224445	1					
ANR	5224460	Argument	string		5224445	0					
ANR	5224461	Identifier	string		5224445	0					
ANR	5224462	ReturnType	R_API char *		5224445	1					
ANR	5224463	Identifier	r_str_dup		5224445	2					
ANR	5224464	ParameterList	"char * ptr , const char * string"		5224445	3					
ANR	5224465	Parameter	char * ptr	837:22:17113:17121	5224445	0	True				
ANR	5224466	ParameterType	char *		5224445	0					
ANR	5224467	Identifier	ptr		5224445	1					
ANR	5224468	Parameter	const char * string	837:33:17124:17141	5224445	1	True				
ANR	5224469	ParameterType	const char *		5224445	0					
ANR	5224470	Identifier	string		5224445	1					
ANR	5224471	CFGEntryNode	ENTRY		5224445		True				
ANR	5224472	CFGExitNode	EXIT		5224445		True				
ANR	5224473	Symbol	string		5224445						
ANR	5224474	Symbol	r_str_new		5224445						
ANR	5224475	Symbol	ptr		5224445						
ANR	5224476	Function	r_str_prepend	842:0:17190:17573							
ANR	5224477	FunctionDef	"r_str_prepend (char * ptr , const char * string)"		5224476	0					
ANR	5224478	CompoundStatement		842:57:17247:17573	5224476	0					
ANR	5224479	IdentifierDeclStatement	"int slen , plen ;"	843:1:17250:17264	5224476	0	True				
ANR	5224480	IdentifierDecl	slen		5224476	0					
ANR	5224481	IdentifierDeclType	int		5224476	0					
ANR	5224482	Identifier	slen		5224476	1					
ANR	5224483	IdentifierDecl	plen		5224476	1					
ANR	5224484	IdentifierDeclType	int		5224476	0					
ANR	5224485	Identifier	plen		5224476	1					
ANR	5224486	IfStatement	if ( ! ptr )		5224476	1					
ANR	5224487	Condition	! ptr	844:5:17271:17274	5224476	0	True				
ANR	5224488	UnaryOperationExpression	! ptr		5224476	0					
ANR	5224489	UnaryOperator	!		5224476	0					
ANR	5224490	Identifier	ptr		5224476	1					
ANR	5224491	CompoundStatement		3:11:29:29	5224476	1					
ANR	5224492	ReturnStatement	return strdup ( string ) ;	845:2:17281:17303	5224476	0	True				
ANR	5224493	CallExpression	strdup ( string )		5224476	0					
ANR	5224494	Callee	strdup		5224476	0					
ANR	5224495	Identifier	strdup		5224476	0					
ANR	5224496	ArgumentList	string		5224476	1					
ANR	5224497	Argument	string		5224476	0					
ANR	5224498	Identifier	string		5224476	0					
ANR	5224499	ExpressionStatement	plen = strlen ( ptr )	849:1:17376:17395	5224476	2	True				
ANR	5224500	AssignmentExpression	plen = strlen ( ptr )		5224476	0		=			
ANR	5224501	Identifier	plen		5224476	0					
ANR	5224502	CallExpression	strlen ( ptr )		5224476	1					
ANR	5224503	Callee	strlen		5224476	0					
ANR	5224504	Identifier	strlen		5224476	0					
ANR	5224505	ArgumentList	ptr		5224476	1					
ANR	5224506	Argument	ptr		5224476	0					
ANR	5224507	Identifier	ptr		5224476	0					
ANR	5224508	ExpressionStatement	slen = strlen ( string )	850:1:17398:17420	5224476	3	True				
ANR	5224509	AssignmentExpression	slen = strlen ( string )		5224476	0		=			
ANR	5224510	Identifier	slen		5224476	0					
ANR	5224511	CallExpression	strlen ( string )		5224476	1					
ANR	5224512	Callee	strlen		5224476	0					
ANR	5224513	Identifier	strlen		5224476	0					
ANR	5224514	ArgumentList	string		5224476	1					
ANR	5224515	Argument	string		5224476	0					
ANR	5224516	Identifier	string		5224476	0					
ANR	5224517	ExpressionStatement	"ptr = realloc ( ptr , slen + plen + 1 )"	851:1:17423:17459	5224476	4	True				
ANR	5224518	AssignmentExpression	"ptr = realloc ( ptr , slen + plen + 1 )"		5224476	0		=			
ANR	5224519	Identifier	ptr		5224476	0					
ANR	5224520	CallExpression	"realloc ( ptr , slen + plen + 1 )"		5224476	1					
ANR	5224521	Callee	realloc		5224476	0					
ANR	5224522	Identifier	realloc		5224476	0					
ANR	5224523	ArgumentList	ptr		5224476	1					
ANR	5224524	Argument	ptr		5224476	0					
ANR	5224525	Identifier	ptr		5224476	0					
ANR	5224526	Argument	slen + plen + 1		5224476	1					
ANR	5224527	AdditiveExpression	slen + plen + 1		5224476	0		+			
ANR	5224528	Identifier	slen		5224476	0					
ANR	5224529	AdditiveExpression	plen + 1		5224476	1		+			
ANR	5224530	Identifier	plen		5224476	0					
ANR	5224531	PrimaryExpression	1		5224476	1					
ANR	5224532	IfStatement	if ( ! ptr )		5224476	5					
ANR	5224533	Condition	! ptr	852:5:17466:17469	5224476	0	True				
ANR	5224534	UnaryOperationExpression	! ptr		5224476	0					
ANR	5224535	UnaryOperator	!		5224476	0					
ANR	5224536	Identifier	ptr		5224476	1					
ANR	5224537	CompoundStatement		11:11:224:224	5224476	1					
ANR	5224538	ReturnStatement	return NULL ;	853:2:17476:17487	5224476	0	True				
ANR	5224539	Identifier	NULL		5224476	0					
ANR	5224540	ExpressionStatement	"memmove ( ptr + slen , ptr , plen + 1 )"	855:1:17493:17528	5224476	6	True				
ANR	5224541	CallExpression	"memmove ( ptr + slen , ptr , plen + 1 )"		5224476	0					
ANR	5224542	Callee	memmove		5224476	0					
ANR	5224543	Identifier	memmove		5224476	0					
ANR	5224544	ArgumentList	ptr + slen		5224476	1					
ANR	5224545	Argument	ptr + slen		5224476	0					
ANR	5224546	AdditiveExpression	ptr + slen		5224476	0		+			
ANR	5224547	Identifier	ptr		5224476	0					
ANR	5224548	Identifier	slen		5224476	1					
ANR	5224549	Argument	ptr		5224476	1					
ANR	5224550	Identifier	ptr		5224476	0					
ANR	5224551	Argument	plen + 1		5224476	2					
ANR	5224552	AdditiveExpression	plen + 1		5224476	0		+			
ANR	5224553	Identifier	plen		5224476	0					
ANR	5224554	PrimaryExpression	1		5224476	1					
ANR	5224555	ExpressionStatement	"memmove ( ptr , string , slen )"	856:1:17531:17558	5224476	7	True				
ANR	5224556	CallExpression	"memmove ( ptr , string , slen )"		5224476	0					
ANR	5224557	Callee	memmove		5224476	0					
ANR	5224558	Identifier	memmove		5224476	0					
ANR	5224559	ArgumentList	ptr		5224476	1					
ANR	5224560	Argument	ptr		5224476	0					
ANR	5224561	Identifier	ptr		5224476	0					
ANR	5224562	Argument	string		5224476	1					
ANR	5224563	Identifier	string		5224476	0					
ANR	5224564	Argument	slen		5224476	2					
ANR	5224565	Identifier	slen		5224476	0					
ANR	5224566	ReturnStatement	return ptr ;	857:1:17561:17571	5224476	8	True				
ANR	5224567	Identifier	ptr		5224476	0					
ANR	5224568	ReturnType	R_API char *		5224476	1					
ANR	5224569	Identifier	r_str_prepend		5224476	2					
ANR	5224570	ParameterList	"char * ptr , const char * string"		5224476	3					
ANR	5224571	Parameter	char * ptr	842:26:17216:17224	5224476	0	True				
ANR	5224572	ParameterType	char *		5224476	0					
ANR	5224573	Identifier	ptr		5224476	1					
ANR	5224574	Parameter	const char * string	842:37:17227:17244	5224476	1	True				
ANR	5224575	ParameterType	const char *		5224476	0					
ANR	5224576	Identifier	string		5224476	1					
ANR	5224577	CFGEntryNode	ENTRY		5224476		True				
ANR	5224578	CFGExitNode	EXIT		5224476		True				
ANR	5224579	Symbol	plen		5224476						
ANR	5224580	Symbol	strlen		5224476						
ANR	5224581	Symbol	NULL		5224476						
ANR	5224582	Symbol	string		5224476						
ANR	5224583	Symbol	slen		5224476						
ANR	5224584	Symbol	strdup		5224476						
ANR	5224585	Symbol	realloc		5224476						
ANR	5224586	Symbol	ptr		5224476						
ANR	5224587	Function	r_str_appendlen	860:0:17576:17753							
ANR	5224588	FunctionDef	"r_str_appendlen (char * ptr , const char * string , int slen)"		5224587	0					
ANR	5224589	CompoundStatement		860:69:17645:17753	5224587	0					
ANR	5224590	IdentifierDeclStatement	"char * msg = r_str_newlen ( string , slen ) ;"	861:1:17648:17687	5224587	0	True				
ANR	5224591	IdentifierDecl	"* msg = r_str_newlen ( string , slen )"		5224587	0					
ANR	5224592	IdentifierDeclType	char *		5224587	0					
ANR	5224593	Identifier	msg		5224587	1					
ANR	5224594	AssignmentExpression	"* msg = r_str_newlen ( string , slen )"		5224587	2		=			
ANR	5224595	Identifier	msg		5224587	0					
ANR	5224596	CallExpression	"r_str_newlen ( string , slen )"		5224587	1					
ANR	5224597	Callee	r_str_newlen		5224587	0					
ANR	5224598	Identifier	r_str_newlen		5224587	0					
ANR	5224599	ArgumentList	string		5224587	1					
ANR	5224600	Argument	string		5224587	0					
ANR	5224601	Identifier	string		5224587	0					
ANR	5224602	Argument	slen		5224587	1					
ANR	5224603	Identifier	slen		5224587	0					
ANR	5224604	IdentifierDeclStatement	"char * ret = r_str_append ( ptr , msg ) ;"	862:1:17690:17725	5224587	1	True				
ANR	5224605	IdentifierDecl	"* ret = r_str_append ( ptr , msg )"		5224587	0					
ANR	5224606	IdentifierDeclType	char *		5224587	0					
ANR	5224607	Identifier	ret		5224587	1					
ANR	5224608	AssignmentExpression	"* ret = r_str_append ( ptr , msg )"		5224587	2		=			
ANR	5224609	Identifier	ret		5224587	0					
ANR	5224610	CallExpression	"r_str_append ( ptr , msg )"		5224587	1					
ANR	5224611	Callee	r_str_append		5224587	0					
ANR	5224612	Identifier	r_str_append		5224587	0					
ANR	5224613	ArgumentList	ptr		5224587	1					
ANR	5224614	Argument	ptr		5224587	0					
ANR	5224615	Identifier	ptr		5224587	0					
ANR	5224616	Argument	msg		5224587	1					
ANR	5224617	Identifier	msg		5224587	0					
ANR	5224618	ExpressionStatement	free ( msg )	863:1:17728:17738	5224587	2	True				
ANR	5224619	CallExpression	free ( msg )		5224587	0					
ANR	5224620	Callee	free		5224587	0					
ANR	5224621	Identifier	free		5224587	0					
ANR	5224622	ArgumentList	msg		5224587	1					
ANR	5224623	Argument	msg		5224587	0					
ANR	5224624	Identifier	msg		5224587	0					
ANR	5224625	ReturnStatement	return ret ;	864:1:17741:17751	5224587	3	True				
ANR	5224626	Identifier	ret		5224587	0					
ANR	5224627	ReturnType	R_API char *		5224587	1					
ANR	5224628	Identifier	r_str_appendlen		5224587	2					
ANR	5224629	ParameterList	"char * ptr , const char * string , int slen"		5224587	3					
ANR	5224630	Parameter	char * ptr	860:28:17604:17612	5224587	0	True				
ANR	5224631	ParameterType	char *		5224587	0					
ANR	5224632	Identifier	ptr		5224587	1					
ANR	5224633	Parameter	const char * string	860:39:17615:17632	5224587	1	True				
ANR	5224634	ParameterType	const char *		5224587	0					
ANR	5224635	Identifier	string		5224587	1					
ANR	5224636	Parameter	int slen	860:59:17635:17642	5224587	2	True				
ANR	5224637	ParameterType	int		5224587	0					
ANR	5224638	Identifier	slen		5224587	1					
ANR	5224639	CFGEntryNode	ENTRY		5224587		True				
ANR	5224640	CFGExitNode	EXIT		5224587		True				
ANR	5224641	Symbol	msg		5224587						
ANR	5224642	Symbol	ret		5224587						
ANR	5224643	Symbol	r_str_append		5224587						
ANR	5224644	Symbol	string		5224587						
ANR	5224645	Symbol	slen		5224587						
ANR	5224646	Symbol	r_str_newlen		5224587						
ANR	5224647	Symbol	ptr		5224587						
ANR	5224648	Function	r_str_append_owned	867:0:17756:17912							
ANR	5224649	FunctionDef	"r_str_append_owned (char * ptr , char * string)"		5224648	0					
ANR	5224650	CompoundStatement		867:56:17812:17912	5224648	0					
ANR	5224651	IfStatement	if ( ! ptr )		5224648	0					
ANR	5224652	Condition	! ptr	868:5:17819:17822	5224648	0	True				
ANR	5224653	UnaryOperationExpression	! ptr		5224648	0					
ANR	5224654	UnaryOperator	!		5224648	0					
ANR	5224655	Identifier	ptr		5224648	1					
ANR	5224656	CompoundStatement		2:11:12:12	5224648	1					
ANR	5224657	ReturnStatement	return string ;	869:2:17829:17842	5224648	0	True				
ANR	5224658	Identifier	string		5224648	0					
ANR	5224659	IdentifierDeclStatement	"char * r = r_str_append ( ptr , string ) ;"	871:1:17848:17883	5224648	1	True				
ANR	5224660	IdentifierDecl	"* r = r_str_append ( ptr , string )"		5224648	0					
ANR	5224661	IdentifierDeclType	char *		5224648	0					
ANR	5224662	Identifier	r		5224648	1					
ANR	5224663	AssignmentExpression	"* r = r_str_append ( ptr , string )"		5224648	2		=			
ANR	5224664	Identifier	r		5224648	0					
ANR	5224665	CallExpression	"r_str_append ( ptr , string )"		5224648	1					
ANR	5224666	Callee	r_str_append		5224648	0					
ANR	5224667	Identifier	r_str_append		5224648	0					
ANR	5224668	ArgumentList	ptr		5224648	1					
ANR	5224669	Argument	ptr		5224648	0					
ANR	5224670	Identifier	ptr		5224648	0					
ANR	5224671	Argument	string		5224648	1					
ANR	5224672	Identifier	string		5224648	0					
ANR	5224673	ExpressionStatement	free ( string )	872:1:17886:17899	5224648	2	True				
ANR	5224674	CallExpression	free ( string )		5224648	0					
ANR	5224675	Callee	free		5224648	0					
ANR	5224676	Identifier	free		5224648	0					
ANR	5224677	ArgumentList	string		5224648	1					
ANR	5224678	Argument	string		5224648	0					
ANR	5224679	Identifier	string		5224648	0					
ANR	5224680	ReturnStatement	return r ;	873:1:17902:17910	5224648	3	True				
ANR	5224681	Identifier	r		5224648	0					
ANR	5224682	ReturnType	R_API char *		5224648	1					
ANR	5224683	Identifier	r_str_append_owned		5224648	2					
ANR	5224684	ParameterList	"char * ptr , char * string"		5224648	3					
ANR	5224685	Parameter	char * ptr	867:31:17787:17795	5224648	0	True				
ANR	5224686	ParameterType	char *		5224648	0					
ANR	5224687	Identifier	ptr		5224648	1					
ANR	5224688	Parameter	char * string	867:42:17798:17809	5224648	1	True				
ANR	5224689	ParameterType	char *		5224648	0					
ANR	5224690	Identifier	string		5224648	1					
ANR	5224691	CFGEntryNode	ENTRY		5224648		True				
ANR	5224692	CFGExitNode	EXIT		5224648		True				
ANR	5224693	Symbol	r_str_append		5224648						
ANR	5224694	Symbol	r		5224648						
ANR	5224695	Symbol	string		5224648						
ANR	5224696	Symbol	ptr		5224648						
ANR	5224697	Function	r_str_append	879:0:18008:18370							
ANR	5224698	FunctionDef	"r_str_append (char * ptr , const char * string)"		5224697	0					
ANR	5224699	CompoundStatement		879:56:18064:18370	5224697	0					
ANR	5224700	IfStatement	if ( string && ! ptr )		5224697	0					
ANR	5224701	Condition	string && ! ptr	880:5:18071:18084	5224697	0	True				
ANR	5224702	AndExpression	string && ! ptr		5224697	0		&&			
ANR	5224703	Identifier	string		5224697	0					
ANR	5224704	UnaryOperationExpression	! ptr		5224697	1					
ANR	5224705	UnaryOperator	!		5224697	0					
ANR	5224706	Identifier	ptr		5224697	1					
ANR	5224707	CompoundStatement		2:21:22:22	5224697	1					
ANR	5224708	ReturnStatement	return strdup ( string ) ;	881:2:18091:18113	5224697	0	True				
ANR	5224709	CallExpression	strdup ( string )		5224697	0					
ANR	5224710	Callee	strdup		5224697	0					
ANR	5224711	Identifier	strdup		5224697	0					
ANR	5224712	ArgumentList	string		5224697	1					
ANR	5224713	Argument	string		5224697	0					
ANR	5224714	Identifier	string		5224697	0					
ANR	5224715	IfStatement	if ( ! string )		5224697	1					
ANR	5224716	Condition	! string	883:5:18123:18129	5224697	0	True				
ANR	5224717	UnaryOperationExpression	! string		5224697	0					
ANR	5224718	UnaryOperator	!		5224697	0					
ANR	5224719	Identifier	string		5224697	1					
ANR	5224720	CompoundStatement		5:14:67:67	5224697	1					
ANR	5224721	ReturnStatement	return ptr ;	884:2:18136:18146	5224697	0	True				
ANR	5224722	Identifier	ptr		5224697	0					
ANR	5224723	IdentifierDeclStatement	int plen = strlen ( ptr ) ;	886:1:18152:18175	5224697	2	True				
ANR	5224724	IdentifierDecl	plen = strlen ( ptr )		5224697	0					
ANR	5224725	IdentifierDeclType	int		5224697	0					
ANR	5224726	Identifier	plen		5224697	1					
ANR	5224727	AssignmentExpression	plen = strlen ( ptr )		5224697	2		=			
ANR	5224728	Identifier	plen		5224697	0					
ANR	5224729	CallExpression	strlen ( ptr )		5224697	1					
ANR	5224730	Callee	strlen		5224697	0					
ANR	5224731	Identifier	strlen		5224697	0					
ANR	5224732	ArgumentList	ptr		5224697	1					
ANR	5224733	Argument	ptr		5224697	0					
ANR	5224734	Identifier	ptr		5224697	0					
ANR	5224735	IdentifierDeclStatement	int slen = strlen ( string ) ;	887:1:18178:18204	5224697	3	True				
ANR	5224736	IdentifierDecl	slen = strlen ( string )		5224697	0					
ANR	5224737	IdentifierDeclType	int		5224697	0					
ANR	5224738	Identifier	slen		5224697	1					
ANR	5224739	AssignmentExpression	slen = strlen ( string )		5224697	2		=			
ANR	5224740	Identifier	slen		5224697	0					
ANR	5224741	CallExpression	strlen ( string )		5224697	1					
ANR	5224742	Callee	strlen		5224697	0					
ANR	5224743	Identifier	strlen		5224697	0					
ANR	5224744	ArgumentList	string		5224697	1					
ANR	5224745	Argument	string		5224697	0					
ANR	5224746	Identifier	string		5224697	0					
ANR	5224747	IdentifierDeclStatement	"char * newptr = realloc ( ptr , slen + plen + 1 ) ;"	888:1:18207:18252	5224697	4	True				
ANR	5224748	IdentifierDecl	"* newptr = realloc ( ptr , slen + plen + 1 )"		5224697	0					
ANR	5224749	IdentifierDeclType	char *		5224697	0					
ANR	5224750	Identifier	newptr		5224697	1					
ANR	5224751	AssignmentExpression	"* newptr = realloc ( ptr , slen + plen + 1 )"		5224697	2		=			
ANR	5224752	Identifier	newptr		5224697	0					
ANR	5224753	CallExpression	"realloc ( ptr , slen + plen + 1 )"		5224697	1					
ANR	5224754	Callee	realloc		5224697	0					
ANR	5224755	Identifier	realloc		5224697	0					
ANR	5224756	ArgumentList	ptr		5224697	1					
ANR	5224757	Argument	ptr		5224697	0					
ANR	5224758	Identifier	ptr		5224697	0					
ANR	5224759	Argument	slen + plen + 1		5224697	1					
ANR	5224760	AdditiveExpression	slen + plen + 1		5224697	0		+			
ANR	5224761	Identifier	slen		5224697	0					
ANR	5224762	AdditiveExpression	plen + 1		5224697	1		+			
ANR	5224763	Identifier	plen		5224697	0					
ANR	5224764	PrimaryExpression	1		5224697	1					
ANR	5224765	IfStatement	if ( ! newptr )		5224697	5					
ANR	5224766	Condition	! newptr	889:5:18259:18265	5224697	0	True				
ANR	5224767	UnaryOperationExpression	! newptr		5224697	0					
ANR	5224768	UnaryOperator	!		5224697	0					
ANR	5224769	Identifier	newptr		5224697	1					
ANR	5224770	CompoundStatement		11:14:203:203	5224697	1					
ANR	5224771	ExpressionStatement	free ( ptr )	890:2:18272:18282	5224697	0	True				
ANR	5224772	CallExpression	free ( ptr )		5224697	0					
ANR	5224773	Callee	free		5224697	0					
ANR	5224774	Identifier	free		5224697	0					
ANR	5224775	ArgumentList	ptr		5224697	1					
ANR	5224776	Argument	ptr		5224697	0					
ANR	5224777	Identifier	ptr		5224697	0					
ANR	5224778	ReturnStatement	return NULL ;	891:2:18286:18297	5224697	1	True				
ANR	5224779	Identifier	NULL		5224697	0					
ANR	5224780	ExpressionStatement	ptr = newptr	893:1:18303:18315	5224697	6	True				
ANR	5224781	AssignmentExpression	ptr = newptr		5224697	0		=			
ANR	5224782	Identifier	ptr		5224697	0					
ANR	5224783	Identifier	newptr		5224697	1					
ANR	5224784	ExpressionStatement	"memcpy ( ptr + plen , string , slen + 1 )"	894:1:18318:18355	5224697	7	True				
ANR	5224785	CallExpression	"memcpy ( ptr + plen , string , slen + 1 )"		5224697	0					
ANR	5224786	Callee	memcpy		5224697	0					
ANR	5224787	Identifier	memcpy		5224697	0					
ANR	5224788	ArgumentList	ptr + plen		5224697	1					
ANR	5224789	Argument	ptr + plen		5224697	0					
ANR	5224790	AdditiveExpression	ptr + plen		5224697	0		+			
ANR	5224791	Identifier	ptr		5224697	0					
ANR	5224792	Identifier	plen		5224697	1					
ANR	5224793	Argument	string		5224697	1					
ANR	5224794	Identifier	string		5224697	0					
ANR	5224795	Argument	slen + 1		5224697	2					
ANR	5224796	AdditiveExpression	slen + 1		5224697	0		+			
ANR	5224797	Identifier	slen		5224697	0					
ANR	5224798	PrimaryExpression	1		5224697	1					
ANR	5224799	ReturnStatement	return ptr ;	895:1:18358:18368	5224697	8	True				
ANR	5224800	Identifier	ptr		5224697	0					
ANR	5224801	ReturnType	R_API char *		5224697	1					
ANR	5224802	Identifier	r_str_append		5224697	2					
ANR	5224803	ParameterList	"char * ptr , const char * string"		5224697	3					
ANR	5224804	Parameter	char * ptr	879:25:18033:18041	5224697	0	True				
ANR	5224805	ParameterType	char *		5224697	0					
ANR	5224806	Identifier	ptr		5224697	1					
ANR	5224807	Parameter	const char * string	879:36:18044:18061	5224697	1	True				
ANR	5224808	ParameterType	const char *		5224697	0					
ANR	5224809	Identifier	string		5224697	1					
ANR	5224810	CFGEntryNode	ENTRY		5224697		True				
ANR	5224811	CFGExitNode	EXIT		5224697		True				
ANR	5224812	Symbol	plen		5224697						
ANR	5224813	Symbol	strlen		5224697						
ANR	5224814	Symbol	newptr		5224697						
ANR	5224815	Symbol	NULL		5224697						
ANR	5224816	Symbol	string		5224697						
ANR	5224817	Symbol	slen		5224697						
ANR	5224818	Symbol	strdup		5224697						
ANR	5224819	Symbol	realloc		5224697						
ANR	5224820	Symbol	ptr		5224697						
ANR	5224821	Function	r_str_appendf	898:0:18373:18786							
ANR	5224822	FunctionDef	"r_str_appendf (char * ptr , const char * fmt)"		5224821	0					
ANR	5224823	CompoundStatement		898:59:18432:18786	5224821	0					
ANR	5224824	IdentifierDeclStatement	"va_list ap , ap2 ;"	899:1:18435:18450	5224821	0	True				
ANR	5224825	IdentifierDecl	ap		5224821	0					
ANR	5224826	IdentifierDeclType	va_list		5224821	0					
ANR	5224827	Identifier	ap		5224821	1					
ANR	5224828	IdentifierDecl	ap2		5224821	1					
ANR	5224829	IdentifierDeclType	va_list		5224821	0					
ANR	5224830	Identifier	ap2		5224821	1					
ANR	5224831	ExpressionStatement	"va_start ( ap , fmt )"	901:1:18454:18472	5224821	1	True				
ANR	5224832	CallExpression	"va_start ( ap , fmt )"		5224821	0					
ANR	5224833	Callee	va_start		5224821	0					
ANR	5224834	Identifier	va_start		5224821	0					
ANR	5224835	ArgumentList	ap		5224821	1					
ANR	5224836	Argument	ap		5224821	0					
ANR	5224837	Identifier	ap		5224821	0					
ANR	5224838	Argument	fmt		5224821	1					
ANR	5224839	Identifier	fmt		5224821	0					
ANR	5224840	IfStatement	"if ( ! strchr ( fmt , '%' ) )"		5224821	2					
ANR	5224841	Condition	"! strchr ( fmt , '%' )"	902:5:18479:18496	5224821	0	True				
ANR	5224842	UnaryOperationExpression	"! strchr ( fmt , '%' )"		5224821	0					
ANR	5224843	UnaryOperator	!		5224821	0					
ANR	5224844	CallExpression	"strchr ( fmt , '%' )"		5224821	1					
ANR	5224845	Callee	strchr		5224821	0					
ANR	5224846	Identifier	strchr		5224821	0					
ANR	5224847	ArgumentList	fmt		5224821	1					
ANR	5224848	Argument	fmt		5224821	0					
ANR	5224849	Identifier	fmt		5224821	0					
ANR	5224850	Argument	'%'		5224821	1					
ANR	5224851	PrimaryExpression	'%'		5224821	0					
ANR	5224852	CompoundStatement		5:25:66:66	5224821	1					
ANR	5224853	ExpressionStatement	va_end ( ap )	903:2:18503:18514	5224821	0	True				
ANR	5224854	CallExpression	va_end ( ap )		5224821	0					
ANR	5224855	Callee	va_end		5224821	0					
ANR	5224856	Identifier	va_end		5224821	0					
ANR	5224857	ArgumentList	ap		5224821	1					
ANR	5224858	Argument	ap		5224821	0					
ANR	5224859	Identifier	ap		5224821	0					
ANR	5224860	ReturnStatement	"return r_str_append ( ptr , fmt ) ;"	904:2:18518:18548	5224821	1	True				
ANR	5224861	CallExpression	"r_str_append ( ptr , fmt )"		5224821	0					
ANR	5224862	Callee	r_str_append		5224821	0					
ANR	5224863	Identifier	r_str_append		5224821	0					
ANR	5224864	ArgumentList	ptr		5224821	1					
ANR	5224865	Argument	ptr		5224821	0					
ANR	5224866	Identifier	ptr		5224821	0					
ANR	5224867	Argument	fmt		5224821	1					
ANR	5224868	Identifier	fmt		5224821	0					
ANR	5224869	ExpressionStatement	"va_copy ( ap2 , ap )"	906:1:18554:18571	5224821	3	True				
ANR	5224870	CallExpression	"va_copy ( ap2 , ap )"		5224821	0					
ANR	5224871	Callee	va_copy		5224821	0					
ANR	5224872	Identifier	va_copy		5224821	0					
ANR	5224873	ArgumentList	ap2		5224821	1					
ANR	5224874	Argument	ap2		5224821	0					
ANR	5224875	Identifier	ap2		5224821	0					
ANR	5224876	Argument	ap		5224821	1					
ANR	5224877	Identifier	ap		5224821	0					
ANR	5224878	IdentifierDeclStatement	"int ret = vsnprintf ( NULL , 0 , fmt , ap2 ) ;"	907:1:18574:18613	5224821	4	True				
ANR	5224879	IdentifierDecl	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		5224821	0					
ANR	5224880	IdentifierDeclType	int		5224821	0					
ANR	5224881	Identifier	ret		5224821	1					
ANR	5224882	AssignmentExpression	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		5224821	2		=			
ANR	5224883	Identifier	ret		5224821	0					
ANR	5224884	CallExpression	"vsnprintf ( NULL , 0 , fmt , ap2 )"		5224821	1					
ANR	5224885	Callee	vsnprintf		5224821	0					
ANR	5224886	Identifier	vsnprintf		5224821	0					
ANR	5224887	ArgumentList	NULL		5224821	1					
ANR	5224888	Argument	NULL		5224821	0					
ANR	5224889	Identifier	NULL		5224821	0					
ANR	5224890	Argument	0		5224821	1					
ANR	5224891	PrimaryExpression	0		5224821	0					
ANR	5224892	Argument	fmt		5224821	2					
ANR	5224893	Identifier	fmt		5224821	0					
ANR	5224894	Argument	ap2		5224821	3					
ANR	5224895	Identifier	ap2		5224821	0					
ANR	5224896	ExpressionStatement	ret ++	908:1:18616:18621	5224821	5	True				
ANR	5224897	PostIncDecOperationExpression	ret ++		5224821	0					
ANR	5224898	Identifier	ret		5224821	0					
ANR	5224899	IncDec	++		5224821	1					
ANR	5224900	IdentifierDeclStatement	"char * p = calloc ( 1 , ret ) ;"	909:1:18624:18649	5224821	6	True				
ANR	5224901	IdentifierDecl	"* p = calloc ( 1 , ret )"		5224821	0					
ANR	5224902	IdentifierDeclType	char *		5224821	0					
ANR	5224903	Identifier	p		5224821	1					
ANR	5224904	AssignmentExpression	"* p = calloc ( 1 , ret )"		5224821	2		=			
ANR	5224905	Identifier	p		5224821	0					
ANR	5224906	CallExpression	"calloc ( 1 , ret )"		5224821	1					
ANR	5224907	Callee	calloc		5224821	0					
ANR	5224908	Identifier	calloc		5224821	0					
ANR	5224909	ArgumentList	1		5224821	1					
ANR	5224910	Argument	1		5224821	0					
ANR	5224911	PrimaryExpression	1		5224821	0					
ANR	5224912	Argument	ret		5224821	1					
ANR	5224913	Identifier	ret		5224821	0					
ANR	5224914	IfStatement	if ( p )		5224821	7					
ANR	5224915	Condition	p	910:5:18656:18656	5224821	0	True				
ANR	5224916	Identifier	p		5224821	0					
ANR	5224917	CompoundStatement		13:8:226:226	5224821	1					
ANR	5224918	ExpressionStatement	"( void ) vsnprintf ( p , ret , fmt , ap )"	911:2:18663:18696	5224821	0	True				
ANR	5224919	CastExpression	"( void ) vsnprintf ( p , ret , fmt , ap )"		5224821	0					
ANR	5224920	CastTarget	void		5224821	0					
ANR	5224921	CallExpression	"vsnprintf ( p , ret , fmt , ap )"		5224821	1					
ANR	5224922	Callee	vsnprintf		5224821	0					
ANR	5224923	Identifier	vsnprintf		5224821	0					
ANR	5224924	ArgumentList	p		5224821	1					
ANR	5224925	Argument	p		5224821	0					
ANR	5224926	Identifier	p		5224821	0					
ANR	5224927	Argument	ret		5224821	1					
ANR	5224928	Identifier	ret		5224821	0					
ANR	5224929	Argument	fmt		5224821	2					
ANR	5224930	Identifier	fmt		5224821	0					
ANR	5224931	Argument	ap		5224821	3					
ANR	5224932	Identifier	ap		5224821	0					
ANR	5224933	ExpressionStatement	"ptr = r_str_append ( ptr , p )"	912:2:18700:18727	5224821	1	True				
ANR	5224934	AssignmentExpression	"ptr = r_str_append ( ptr , p )"		5224821	0		=			
ANR	5224935	Identifier	ptr		5224821	0					
ANR	5224936	CallExpression	"r_str_append ( ptr , p )"		5224821	1					
ANR	5224937	Callee	r_str_append		5224821	0					
ANR	5224938	Identifier	r_str_append		5224821	0					
ANR	5224939	ArgumentList	ptr		5224821	1					
ANR	5224940	Argument	ptr		5224821	0					
ANR	5224941	Identifier	ptr		5224821	0					
ANR	5224942	Argument	p		5224821	1					
ANR	5224943	Identifier	p		5224821	0					
ANR	5224944	ExpressionStatement	free ( p )	913:2:18731:18739	5224821	2	True				
ANR	5224945	CallExpression	free ( p )		5224821	0					
ANR	5224946	Callee	free		5224821	0					
ANR	5224947	Identifier	free		5224821	0					
ANR	5224948	ArgumentList	p		5224821	1					
ANR	5224949	Argument	p		5224821	0					
ANR	5224950	Identifier	p		5224821	0					
ANR	5224951	ExpressionStatement	va_end ( ap2 )	915:1:18745:18757	5224821	8	True				
ANR	5224952	CallExpression	va_end ( ap2 )		5224821	0					
ANR	5224953	Callee	va_end		5224821	0					
ANR	5224954	Identifier	va_end		5224821	0					
ANR	5224955	ArgumentList	ap2		5224821	1					
ANR	5224956	Argument	ap2		5224821	0					
ANR	5224957	Identifier	ap2		5224821	0					
ANR	5224958	ExpressionStatement	va_end ( ap )	916:1:18760:18771	5224821	9	True				
ANR	5224959	CallExpression	va_end ( ap )		5224821	0					
ANR	5224960	Callee	va_end		5224821	0					
ANR	5224961	Identifier	va_end		5224821	0					
ANR	5224962	ArgumentList	ap		5224821	1					
ANR	5224963	Argument	ap		5224821	0					
ANR	5224964	Identifier	ap		5224821	0					
ANR	5224965	ReturnStatement	return ptr ;	917:1:18774:18784	5224821	10	True				
ANR	5224966	Identifier	ptr		5224821	0					
ANR	5224967	ReturnType	R_API char *		5224821	1					
ANR	5224968	Identifier	r_str_appendf		5224821	2					
ANR	5224969	ParameterList	"char * ptr , const char * fmt"		5224821	3					
ANR	5224970	Parameter	char * ptr	898:26:18399:18407	5224821	0	True				
ANR	5224971	ParameterType	char *		5224821	0					
ANR	5224972	Identifier	ptr		5224821	1					
ANR	5224973	Parameter	const char * fmt	898:37:18410:18424	5224821	1	True				
ANR	5224974	ParameterType	const char *		5224821	0					
ANR	5224975	Identifier	fmt		5224821	1					
ANR	5224976	CFGEntryNode	ENTRY		5224821		True				
ANR	5224977	CFGExitNode	EXIT		5224821		True				
ANR	5224978	Symbol	ret		5224821						
ANR	5224979	Symbol	p		5224821						
ANR	5224980	Symbol	r_str_append		5224821						
ANR	5224981	Symbol	ap2		5224821						
ANR	5224982	Symbol	NULL		5224821						
ANR	5224983	Symbol	strchr		5224821						
ANR	5224984	Symbol	calloc		5224821						
ANR	5224985	Symbol	fmt		5224821						
ANR	5224986	Symbol	vsnprintf		5224821						
ANR	5224987	Symbol	ptr		5224821						
ANR	5224988	Symbol	ap		5224821						
ANR	5224989	Function	r_str_appendch	920:0:18789:18887							
ANR	5224990	FunctionDef	"r_str_appendch (char * x , char y)"		5224989	0					
ANR	5224991	CompoundStatement		920:44:18833:18887	5224989	0					
ANR	5224992	IdentifierDeclStatement	"char b [ 2 ] = { y , 0 } ;"	921:1:18836:18856	5224989	0	True				
ANR	5224993	IdentifierDecl	"b [ 2 ] = { y , 0 }"		5224989	0					
ANR	5224994	IdentifierDeclType	char [ 2 ]		5224989	0					
ANR	5224995	Identifier	b		5224989	1					
ANR	5224996	PrimaryExpression	2		5224989	2					
ANR	5224997	AssignmentExpression	"b [ 2 ] = { y , 0 }"		5224989	3		=			
ANR	5224998	Identifier	b		5224989	0					
ANR	5224999	InitializerList	y		5224989	1					
ANR	5225000	Identifier	y		5224989	0					
ANR	5225001	PrimaryExpression	0		5224989	1					
ANR	5225002	ReturnStatement	"return r_str_append ( x , b ) ;"	922:1:18859:18885	5224989	1	True				
ANR	5225003	CallExpression	"r_str_append ( x , b )"		5224989	0					
ANR	5225004	Callee	r_str_append		5224989	0					
ANR	5225005	Identifier	r_str_append		5224989	0					
ANR	5225006	ArgumentList	x		5224989	1					
ANR	5225007	Argument	x		5224989	0					
ANR	5225008	Identifier	x		5224989	0					
ANR	5225009	Argument	b		5224989	1					
ANR	5225010	Identifier	b		5224989	0					
ANR	5225011	ReturnType	R_API char *		5224989	1					
ANR	5225012	Identifier	r_str_appendch		5224989	2					
ANR	5225013	ParameterList	"char * x , char y"		5224989	3					
ANR	5225014	Parameter	char * x	920:27:18816:18822	5224989	0	True				
ANR	5225015	ParameterType	char *		5224989	0					
ANR	5225016	Identifier	x		5224989	1					
ANR	5225017	Parameter	char y	920:36:18825:18830	5224989	1	True				
ANR	5225018	ParameterType	char		5224989	0					
ANR	5225019	Identifier	y		5224989	1					
ANR	5225020	CFGEntryNode	ENTRY		5224989		True				
ANR	5225021	CFGExitNode	EXIT		5224989		True				
ANR	5225022	Symbol	r_str_append		5224989						
ANR	5225023	Symbol	b		5224989						
ANR	5225024	Symbol	x		5224989						
ANR	5225025	Symbol	y		5224989						
ANR	5225026	Function	r_str_replace	925:0:18890:19896							
ANR	5225027	FunctionDef	"r_str_replace (char * str , const char * key , const char * val , int g)"		5225026	0					
ANR	5225028	CompoundStatement		925:78:18968:19896	5225026	0					
ANR	5225029	IfStatement	if ( g == 'i' )		5225026	0					
ANR	5225030	Condition	g == 'i'	926:5:18975:18982	5225026	0	True				
ANR	5225031	EqualityExpression	g == 'i'		5225026	0		==			
ANR	5225032	Identifier	g		5225026	0					
ANR	5225033	PrimaryExpression	'i'		5225026	1					
ANR	5225034	CompoundStatement		2:15:16:16	5225026	1					
ANR	5225035	ReturnStatement	"return r_str_replace_icase ( str , key , val , g , true ) ;"	927:2:18989:19040	5225026	0	True				
ANR	5225036	CallExpression	"r_str_replace_icase ( str , key , val , g , true )"		5225026	0					
ANR	5225037	Callee	r_str_replace_icase		5225026	0					
ANR	5225038	Identifier	r_str_replace_icase		5225026	0					
ANR	5225039	ArgumentList	str		5225026	1					
ANR	5225040	Argument	str		5225026	0					
ANR	5225041	Identifier	str		5225026	0					
ANR	5225042	Argument	key		5225026	1					
ANR	5225043	Identifier	key		5225026	0					
ANR	5225044	Argument	val		5225026	2					
ANR	5225045	Identifier	val		5225026	0					
ANR	5225046	Argument	g		5225026	3					
ANR	5225047	Identifier	g		5225026	0					
ANR	5225048	Argument	true		5225026	4					
ANR	5225049	Identifier	true		5225026	0					
ANR	5225050	ExpressionStatement	"r_return_val_if_fail ( str && key && val , NULL )"	929:1:19046:19092	5225026	1	True				
ANR	5225051	CallExpression	"r_return_val_if_fail ( str && key && val , NULL )"		5225026	0					
ANR	5225052	Callee	r_return_val_if_fail		5225026	0					
ANR	5225053	Identifier	r_return_val_if_fail		5225026	0					
ANR	5225054	ArgumentList	str && key && val		5225026	1					
ANR	5225055	Argument	str && key && val		5225026	0					
ANR	5225056	AndExpression	str && key && val		5225026	0		&&			
ANR	5225057	Identifier	str		5225026	0					
ANR	5225058	AndExpression	key && val		5225026	1		&&			
ANR	5225059	Identifier	key		5225026	0					
ANR	5225060	Identifier	val		5225026	1					
ANR	5225061	Argument	NULL		5225026	1					
ANR	5225062	Identifier	NULL		5225026	0					
ANR	5225063	IdentifierDeclStatement	"int off , i , slen ;"	931:1:19096:19112	5225026	2	True				
ANR	5225064	IdentifierDecl	off		5225026	0					
ANR	5225065	IdentifierDeclType	int		5225026	0					
ANR	5225066	Identifier	off		5225026	1					
ANR	5225067	IdentifierDecl	i		5225026	1					
ANR	5225068	IdentifierDeclType	int		5225026	0					
ANR	5225069	Identifier	i		5225026	1					
ANR	5225070	IdentifierDecl	slen		5225026	2					
ANR	5225071	IdentifierDeclType	int		5225026	0					
ANR	5225072	Identifier	slen		5225026	1					
ANR	5225073	IdentifierDeclStatement	"char * newstr , * scnd , * p = str ;"	932:1:19115:19144	5225026	3	True				
ANR	5225074	IdentifierDecl	* newstr		5225026	0					
ANR	5225075	IdentifierDeclType	char *		5225026	0					
ANR	5225076	Identifier	newstr		5225026	1					
ANR	5225077	IdentifierDecl	* scnd		5225026	1					
ANR	5225078	IdentifierDeclType	char *		5225026	0					
ANR	5225079	Identifier	scnd		5225026	1					
ANR	5225080	IdentifierDecl	* p = str		5225026	2					
ANR	5225081	IdentifierDeclType	char *		5225026	0					
ANR	5225082	Identifier	p		5225026	1					
ANR	5225083	AssignmentExpression	* p = str		5225026	2		=			
ANR	5225084	Identifier	str		5225026	0					
ANR	5225085	Identifier	str		5225026	1					
ANR	5225086	IdentifierDeclStatement	int klen = strlen ( key ) ;	933:1:19147:19170	5225026	4	True				
ANR	5225087	IdentifierDecl	klen = strlen ( key )		5225026	0					
ANR	5225088	IdentifierDeclType	int		5225026	0					
ANR	5225089	Identifier	klen		5225026	1					
ANR	5225090	AssignmentExpression	klen = strlen ( key )		5225026	2		=			
ANR	5225091	Identifier	klen		5225026	0					
ANR	5225092	CallExpression	strlen ( key )		5225026	1					
ANR	5225093	Callee	strlen		5225026	0					
ANR	5225094	Identifier	strlen		5225026	0					
ANR	5225095	ArgumentList	key		5225026	1					
ANR	5225096	Argument	key		5225026	0					
ANR	5225097	Identifier	key		5225026	0					
ANR	5225098	IdentifierDeclStatement	int vlen = strlen ( val ) ;	934:1:19173:19196	5225026	5	True				
ANR	5225099	IdentifierDecl	vlen = strlen ( val )		5225026	0					
ANR	5225100	IdentifierDeclType	int		5225026	0					
ANR	5225101	Identifier	vlen		5225026	1					
ANR	5225102	AssignmentExpression	vlen = strlen ( val )		5225026	2		=			
ANR	5225103	Identifier	vlen		5225026	0					
ANR	5225104	CallExpression	strlen ( val )		5225026	1					
ANR	5225105	Callee	strlen		5225026	0					
ANR	5225106	Identifier	strlen		5225026	0					
ANR	5225107	ArgumentList	val		5225026	1					
ANR	5225108	Argument	val		5225026	0					
ANR	5225109	Identifier	val		5225026	0					
ANR	5225110	IfStatement	if ( klen == 1 && vlen < 2 )		5225026	6					
ANR	5225111	Condition	klen == 1 && vlen < 2	935:5:19203:19223	5225026	0	True				
ANR	5225112	AndExpression	klen == 1 && vlen < 2		5225026	0		&&			
ANR	5225113	EqualityExpression	klen == 1		5225026	0		==			
ANR	5225114	Identifier	klen		5225026	0					
ANR	5225115	PrimaryExpression	1		5225026	1					
ANR	5225116	RelationalExpression	vlen < 2		5225026	1		<			
ANR	5225117	Identifier	vlen		5225026	0					
ANR	5225118	PrimaryExpression	2		5225026	1					
ANR	5225119	CompoundStatement		11:28:257:257	5225026	1					
ANR	5225120	ExpressionStatement	"r_str_replace_char ( str , * key , * val )"	936:2:19230:19266	5225026	0	True				
ANR	5225121	CallExpression	"r_str_replace_char ( str , * key , * val )"		5225026	0					
ANR	5225122	Callee	r_str_replace_char		5225026	0					
ANR	5225123	Identifier	r_str_replace_char		5225026	0					
ANR	5225124	ArgumentList	str		5225026	1					
ANR	5225125	Argument	str		5225026	0					
ANR	5225126	Identifier	str		5225026	0					
ANR	5225127	Argument	* key		5225026	1					
ANR	5225128	UnaryOperationExpression	* key		5225026	0					
ANR	5225129	UnaryOperator	*		5225026	0					
ANR	5225130	Identifier	key		5225026	1					
ANR	5225131	Argument	* val		5225026	2					
ANR	5225132	UnaryOperationExpression	* val		5225026	0					
ANR	5225133	UnaryOperator	*		5225026	0					
ANR	5225134	Identifier	val		5225026	1					
ANR	5225135	ReturnStatement	return str ;	937:2:19270:19280	5225026	1	True				
ANR	5225136	Identifier	str		5225026	0					
ANR	5225137	IfStatement	"if ( klen == vlen && ! strcmp ( key , val ) )"		5225026	7					
ANR	5225138	Condition	"klen == vlen && ! strcmp ( key , val )"	939:5:19290:19323	5225026	0	True				
ANR	5225139	AndExpression	"klen == vlen && ! strcmp ( key , val )"		5225026	0		&&			
ANR	5225140	EqualityExpression	klen == vlen		5225026	0		==			
ANR	5225141	Identifier	klen		5225026	0					
ANR	5225142	Identifier	vlen		5225026	1					
ANR	5225143	UnaryOperationExpression	"! strcmp ( key , val )"		5225026	1					
ANR	5225144	UnaryOperator	!		5225026	0					
ANR	5225145	CallExpression	"strcmp ( key , val )"		5225026	1					
ANR	5225146	Callee	strcmp		5225026	0					
ANR	5225147	Identifier	strcmp		5225026	0					
ANR	5225148	ArgumentList	key		5225026	1					
ANR	5225149	Argument	key		5225026	0					
ANR	5225150	Identifier	key		5225026	0					
ANR	5225151	Argument	val		5225026	1					
ANR	5225152	Identifier	val		5225026	0					
ANR	5225153	CompoundStatement		15:41:357:357	5225026	1					
ANR	5225154	ReturnStatement	return str ;	940:2:19330:19340	5225026	0	True				
ANR	5225155	Identifier	str		5225026	0					
ANR	5225156	ExpressionStatement	slen = strlen ( str )	942:1:19346:19365	5225026	8	True				
ANR	5225157	AssignmentExpression	slen = strlen ( str )		5225026	0		=			
ANR	5225158	Identifier	slen		5225026	0					
ANR	5225159	CallExpression	strlen ( str )		5225026	1					
ANR	5225160	Callee	strlen		5225026	0					
ANR	5225161	Identifier	strlen		5225026	0					
ANR	5225162	ArgumentList	str		5225026	1					
ANR	5225163	Argument	str		5225026	0					
ANR	5225164	Identifier	str		5225026	0					
ANR	5225165	IdentifierDeclStatement	char * q = str ;	943:1:19368:19381	5225026	9	True				
ANR	5225166	IdentifierDecl	* q = str		5225026	0					
ANR	5225167	IdentifierDeclType	char *		5225026	0					
ANR	5225168	Identifier	q		5225026	1					
ANR	5225169	AssignmentExpression	* q = str		5225026	2		=			
ANR	5225170	Identifier	str		5225026	0					
ANR	5225171	Identifier	str		5225026	1					
ANR	5225172	ForStatement	for ( ; ; )		5225026	10					
ANR	5225173	CompoundStatement		20:10:424:424	5225026	0					
ANR	5225174	ExpressionStatement	"p = strstr ( q , key )"	945:2:19397:19416	5225026	0	True				
ANR	5225175	AssignmentExpression	"p = strstr ( q , key )"		5225026	0		=			
ANR	5225176	Identifier	p		5225026	0					
ANR	5225177	CallExpression	"strstr ( q , key )"		5225026	1					
ANR	5225178	Callee	strstr		5225026	0					
ANR	5225179	Identifier	strstr		5225026	0					
ANR	5225180	ArgumentList	q		5225026	1					
ANR	5225181	Argument	q		5225026	0					
ANR	5225182	Identifier	q		5225026	0					
ANR	5225183	Argument	key		5225026	1					
ANR	5225184	Identifier	key		5225026	0					
ANR	5225185	IfStatement	if ( ! p )		5225026	1					
ANR	5225186	Condition	! p	946:6:19424:19425	5225026	0	True				
ANR	5225187	UnaryOperationExpression	! p		5225026	0					
ANR	5225188	UnaryOperator	!		5225026	0					
ANR	5225189	Identifier	p		5225026	1					
ANR	5225190	CompoundStatement		22:10:459:459	5225026	1					
ANR	5225191	BreakStatement	break ;	947:3:19433:19438	5225026	0	True				
ANR	5225192	ExpressionStatement	off = ( int ) ( size_t ) ( p - str )	949:2:19446:19474	5225026	2	True				
ANR	5225193	AssignmentExpression	off = ( int ) ( size_t ) ( p - str )		5225026	0		=			
ANR	5225194	Identifier	off		5225026	0					
ANR	5225195	CastExpression	( int ) ( size_t ) ( p - str )		5225026	1					
ANR	5225196	CastTarget	int		5225026	0					
ANR	5225197	CastExpression	( size_t ) ( p - str )		5225026	1					
ANR	5225198	CastTarget	size_t		5225026	0					
ANR	5225199	AdditiveExpression	p - str		5225026	1		-			
ANR	5225200	Identifier	p		5225026	0					
ANR	5225201	Identifier	str		5225026	1					
ANR	5225202	ExpressionStatement	scnd = strdup ( p + klen )	950:2:19478:19502	5225026	3	True				
ANR	5225203	AssignmentExpression	scnd = strdup ( p + klen )		5225026	0		=			
ANR	5225204	Identifier	scnd		5225026	0					
ANR	5225205	CallExpression	strdup ( p + klen )		5225026	1					
ANR	5225206	Callee	strdup		5225026	0					
ANR	5225207	Identifier	strdup		5225026	0					
ANR	5225208	ArgumentList	p + klen		5225026	1					
ANR	5225209	Argument	p + klen		5225026	0					
ANR	5225210	AdditiveExpression	p + klen		5225026	0		+			
ANR	5225211	Identifier	p		5225026	0					
ANR	5225212	Identifier	klen		5225026	1					
ANR	5225213	IfStatement	if ( ! scnd )		5225026	4					
ANR	5225214	Condition	! scnd	951:6:19510:19514	5225026	0	True				
ANR	5225215	UnaryOperationExpression	! scnd		5225026	0					
ANR	5225216	UnaryOperator	!		5225026	0					
ANR	5225217	Identifier	scnd		5225026	1					
ANR	5225218	CompoundStatement		27:13:548:548	5225026	1					
ANR	5225219	ExpressionStatement	R_FREE ( str )	952:3:19522:19534	5225026	0	True				
ANR	5225220	CallExpression	R_FREE ( str )		5225026	0					
ANR	5225221	Callee	R_FREE		5225026	0					
ANR	5225222	Identifier	R_FREE		5225026	0					
ANR	5225223	ArgumentList	str		5225026	1					
ANR	5225224	Argument	str		5225026	0					
ANR	5225225	Identifier	str		5225026	0					
ANR	5225226	BreakStatement	break ;	953:3:19539:19544	5225026	1	True				
ANR	5225227	ExpressionStatement	slen += vlen - klen	955:2:19552:19571	5225026	5	True				
ANR	5225228	AssignmentExpression	slen += vlen - klen		5225026	0		+=			
ANR	5225229	Identifier	slen		5225026	0					
ANR	5225230	AdditiveExpression	vlen - klen		5225026	1		-			
ANR	5225231	Identifier	vlen		5225026	0					
ANR	5225232	Identifier	klen		5225026	1					
ANR	5225233	ExpressionStatement	"newstr = realloc ( str , slen + 1 )"	956:2:19575:19607	5225026	6	True				
ANR	5225234	AssignmentExpression	"newstr = realloc ( str , slen + 1 )"		5225026	0		=			
ANR	5225235	Identifier	newstr		5225026	0					
ANR	5225236	CallExpression	"realloc ( str , slen + 1 )"		5225026	1					
ANR	5225237	Callee	realloc		5225026	0					
ANR	5225238	Identifier	realloc		5225026	0					
ANR	5225239	ArgumentList	str		5225026	1					
ANR	5225240	Argument	str		5225026	0					
ANR	5225241	Identifier	str		5225026	0					
ANR	5225242	Argument	slen + 1		5225026	1					
ANR	5225243	AdditiveExpression	slen + 1		5225026	0		+			
ANR	5225244	Identifier	slen		5225026	0					
ANR	5225245	PrimaryExpression	1		5225026	1					
ANR	5225246	IfStatement	if ( ! newstr )		5225026	7					
ANR	5225247	Condition	! newstr	957:6:19615:19621	5225026	0	True				
ANR	5225248	UnaryOperationExpression	! newstr		5225026	0					
ANR	5225249	UnaryOperator	!		5225026	0					
ANR	5225250	Identifier	newstr		5225026	1					
ANR	5225251	CompoundStatement		33:15:655:655	5225026	1					
ANR	5225252	ExpressionStatement	"eprintf ( ""alloc fail\\n"" )"	958:3:19629:19653	5225026	0	True				
ANR	5225253	CallExpression	"eprintf ( ""alloc fail\\n"" )"		5225026	0					
ANR	5225254	Callee	eprintf		5225026	0					
ANR	5225255	Identifier	eprintf		5225026	0					
ANR	5225256	ArgumentList	"""alloc fail\\n"""		5225026	1					
ANR	5225257	Argument	"""alloc fail\\n"""		5225026	0					
ANR	5225258	PrimaryExpression	"""alloc fail\\n"""		5225026	0					
ANR	5225259	ExpressionStatement	R_FREE ( str )	959:3:19658:19670	5225026	1	True				
ANR	5225260	CallExpression	R_FREE ( str )		5225026	0					
ANR	5225261	Callee	R_FREE		5225026	0					
ANR	5225262	Identifier	R_FREE		5225026	0					
ANR	5225263	ArgumentList	str		5225026	1					
ANR	5225264	Argument	str		5225026	0					
ANR	5225265	Identifier	str		5225026	0					
ANR	5225266	ExpressionStatement	free ( scnd )	960:3:19675:19686	5225026	2	True				
ANR	5225267	CallExpression	free ( scnd )		5225026	0					
ANR	5225268	Callee	free		5225026	0					
ANR	5225269	Identifier	free		5225026	0					
ANR	5225270	ArgumentList	scnd		5225026	1					
ANR	5225271	Argument	scnd		5225026	0					
ANR	5225272	Identifier	scnd		5225026	0					
ANR	5225273	BreakStatement	break ;	961:3:19691:19696	5225026	3	True				
ANR	5225274	ExpressionStatement	str = newstr	963:2:19704:19716	5225026	8	True				
ANR	5225275	AssignmentExpression	str = newstr		5225026	0		=			
ANR	5225276	Identifier	str		5225026	0					
ANR	5225277	Identifier	newstr		5225026	1					
ANR	5225278	ExpressionStatement	p = str + off	964:2:19720:19733	5225026	9	True				
ANR	5225279	AssignmentExpression	p = str + off		5225026	0		=			
ANR	5225280	Identifier	p		5225026	0					
ANR	5225281	AdditiveExpression	str + off		5225026	1		+			
ANR	5225282	Identifier	str		5225026	0					
ANR	5225283	Identifier	off		5225026	1					
ANR	5225284	ExpressionStatement	"memcpy ( p , val , vlen )"	965:2:19737:19758	5225026	10	True				
ANR	5225285	CallExpression	"memcpy ( p , val , vlen )"		5225026	0					
ANR	5225286	Callee	memcpy		5225026	0					
ANR	5225287	Identifier	memcpy		5225026	0					
ANR	5225288	ArgumentList	p		5225026	1					
ANR	5225289	Argument	p		5225026	0					
ANR	5225290	Identifier	p		5225026	0					
ANR	5225291	Argument	val		5225026	1					
ANR	5225292	Identifier	val		5225026	0					
ANR	5225293	Argument	vlen		5225026	2					
ANR	5225294	Identifier	vlen		5225026	0					
ANR	5225295	ExpressionStatement	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"	966:2:19762:19804	5225026	11	True				
ANR	5225296	CallExpression	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"		5225026	0					
ANR	5225297	Callee	memcpy		5225026	0					
ANR	5225298	Identifier	memcpy		5225026	0					
ANR	5225299	ArgumentList	p + vlen		5225026	1					
ANR	5225300	Argument	p + vlen		5225026	0					
ANR	5225301	AdditiveExpression	p + vlen		5225026	0		+			
ANR	5225302	Identifier	p		5225026	0					
ANR	5225303	Identifier	vlen		5225026	1					
ANR	5225304	Argument	scnd		5225026	1					
ANR	5225305	Identifier	scnd		5225026	0					
ANR	5225306	Argument	strlen ( scnd ) + 1		5225026	2					
ANR	5225307	AdditiveExpression	strlen ( scnd ) + 1		5225026	0		+			
ANR	5225308	CallExpression	strlen ( scnd )		5225026	0					
ANR	5225309	Callee	strlen		5225026	0					
ANR	5225310	Identifier	strlen		5225026	0					
ANR	5225311	ArgumentList	scnd		5225026	1					
ANR	5225312	Argument	scnd		5225026	0					
ANR	5225313	Identifier	scnd		5225026	0					
ANR	5225314	PrimaryExpression	1		5225026	1					
ANR	5225315	ExpressionStatement	i = off + vlen	967:2:19808:19822	5225026	12	True				
ANR	5225316	AssignmentExpression	i = off + vlen		5225026	0		=			
ANR	5225317	Identifier	i		5225026	0					
ANR	5225318	AdditiveExpression	off + vlen		5225026	1		+			
ANR	5225319	Identifier	off		5225026	0					
ANR	5225320	Identifier	vlen		5225026	1					
ANR	5225321	ExpressionStatement	q = str + i	968:2:19826:19837	5225026	13	True				
ANR	5225322	AssignmentExpression	q = str + i		5225026	0		=			
ANR	5225323	Identifier	q		5225026	0					
ANR	5225324	AdditiveExpression	str + i		5225026	1		+			
ANR	5225325	Identifier	str		5225026	0					
ANR	5225326	Identifier	i		5225026	1					
ANR	5225327	ExpressionStatement	free ( scnd )	969:2:19841:19852	5225026	14	True				
ANR	5225328	CallExpression	free ( scnd )		5225026	0					
ANR	5225329	Callee	free		5225026	0					
ANR	5225330	Identifier	free		5225026	0					
ANR	5225331	ArgumentList	scnd		5225026	1					
ANR	5225332	Argument	scnd		5225026	0					
ANR	5225333	Identifier	scnd		5225026	0					
ANR	5225334	IfStatement	if ( ! g )		5225026	15					
ANR	5225335	Condition	! g	970:6:19860:19861	5225026	0	True				
ANR	5225336	UnaryOperationExpression	! g		5225026	0					
ANR	5225337	UnaryOperator	!		5225026	0					
ANR	5225338	Identifier	g		5225026	1					
ANR	5225339	CompoundStatement		46:10:895:895	5225026	1					
ANR	5225340	BreakStatement	break ;	971:3:19869:19874	5225026	0	True				
ANR	5225341	ReturnStatement	return str ;	974:1:19884:19894	5225026	11	True				
ANR	5225342	Identifier	str		5225026	0					
ANR	5225343	ReturnType	R_API char *		5225026	1					
ANR	5225344	Identifier	r_str_replace		5225026	2					
ANR	5225345	ParameterList	"char * str , const char * key , const char * val , int g"		5225026	3					
ANR	5225346	Parameter	char * str	925:26:18916:18924	5225026	0	True				
ANR	5225347	ParameterType	char *		5225026	0					
ANR	5225348	Identifier	str		5225026	1					
ANR	5225349	Parameter	const char * key	925:37:18927:18941	5225026	1	True				
ANR	5225350	ParameterType	const char *		5225026	0					
ANR	5225351	Identifier	key		5225026	1					
ANR	5225352	Parameter	const char * val	925:54:18944:18958	5225026	2	True				
ANR	5225353	ParameterType	const char *		5225026	0					
ANR	5225354	Identifier	val		5225026	1					
ANR	5225355	Parameter	int g	925:71:18961:18965	5225026	3	True				
ANR	5225356	ParameterType	int		5225026	0					
ANR	5225357	Identifier	g		5225026	1					
ANR	5225358	CFGEntryNode	ENTRY		5225026		True				
ANR	5225359	CFGExitNode	EXIT		5225026		True				
ANR	5225360	InfiniteForNode	true		5225026		True				
ANR	5225361	Symbol	val		5225026						
ANR	5225362	Symbol	strcmp		5225026						
ANR	5225363	Symbol	r_str_replace_icase		5225026						
ANR	5225364	Symbol	NULL		5225026						
ANR	5225365	Symbol	g		5225026						
ANR	5225366	Symbol	vlen		5225026						
ANR	5225367	Symbol	i		5225026						
ANR	5225368	Symbol	* key		5225026						
ANR	5225369	Symbol	* val		5225026						
ANR	5225370	Symbol	realloc		5225026						
ANR	5225371	Symbol	newstr		5225026						
ANR	5225372	Symbol	off		5225026						
ANR	5225373	Symbol	str		5225026						
ANR	5225374	Symbol	p		5225026						
ANR	5225375	Symbol	strlen		5225026						
ANR	5225376	Symbol	q		5225026						
ANR	5225377	Symbol	scnd		5225026						
ANR	5225378	Symbol	strstr		5225026						
ANR	5225379	Symbol	slen		5225026						
ANR	5225380	Symbol	true		5225026						
ANR	5225381	Symbol	klen		5225026						
ANR	5225382	Symbol	strdup		5225026						
ANR	5225383	Symbol	key		5225026						
ANR	5225384	Function	r_str_replace_icase	977:0:19899:21080							
ANR	5225385	FunctionDef	"r_str_replace_icase (char * str , const char * key , const char * val , int g , int keep_case)"		5225384	0					
ANR	5225386	CompoundStatement		977:99:19998:21080	5225384	0					
ANR	5225387	ExpressionStatement	"r_return_val_if_fail ( str && key && val , NULL )"	978:1:20001:20047	5225384	0	True				
ANR	5225388	CallExpression	"r_return_val_if_fail ( str && key && val , NULL )"		5225384	0					
ANR	5225389	Callee	r_return_val_if_fail		5225384	0					
ANR	5225390	Identifier	r_return_val_if_fail		5225384	0					
ANR	5225391	ArgumentList	str && key && val		5225384	1					
ANR	5225392	Argument	str && key && val		5225384	0					
ANR	5225393	AndExpression	str && key && val		5225384	0		&&			
ANR	5225394	Identifier	str		5225384	0					
ANR	5225395	AndExpression	key && val		5225384	1		&&			
ANR	5225396	Identifier	key		5225384	0					
ANR	5225397	Identifier	val		5225384	1					
ANR	5225398	Argument	NULL		5225384	1					
ANR	5225399	Identifier	NULL		5225384	0					
ANR	5225400	IdentifierDeclStatement	"int off , i , klen , vlen , slen ;"	980:1:20051:20079	5225384	1	True				
ANR	5225401	IdentifierDecl	off		5225384	0					
ANR	5225402	IdentifierDeclType	int		5225384	0					
ANR	5225403	Identifier	off		5225384	1					
ANR	5225404	IdentifierDecl	i		5225384	1					
ANR	5225405	IdentifierDeclType	int		5225384	0					
ANR	5225406	Identifier	i		5225384	1					
ANR	5225407	IdentifierDecl	klen		5225384	2					
ANR	5225408	IdentifierDeclType	int		5225384	0					
ANR	5225409	Identifier	klen		5225384	1					
ANR	5225410	IdentifierDecl	vlen		5225384	3					
ANR	5225411	IdentifierDeclType	int		5225384	0					
ANR	5225412	Identifier	vlen		5225384	1					
ANR	5225413	IdentifierDecl	slen		5225384	4					
ANR	5225414	IdentifierDeclType	int		5225384	0					
ANR	5225415	Identifier	slen		5225384	1					
ANR	5225416	IdentifierDeclStatement	"char * newstr , * scnd , * p = str , * tmp_val = NULL ;"	981:1:20082:20128	5225384	2	True				
ANR	5225417	IdentifierDecl	* newstr		5225384	0					
ANR	5225418	IdentifierDeclType	char *		5225384	0					
ANR	5225419	Identifier	newstr		5225384	1					
ANR	5225420	IdentifierDecl	* scnd		5225384	1					
ANR	5225421	IdentifierDeclType	char *		5225384	0					
ANR	5225422	Identifier	scnd		5225384	1					
ANR	5225423	IdentifierDecl	* p = str		5225384	2					
ANR	5225424	IdentifierDeclType	char *		5225384	0					
ANR	5225425	Identifier	p		5225384	1					
ANR	5225426	AssignmentExpression	* p = str		5225384	2		=			
ANR	5225427	Identifier	str		5225384	0					
ANR	5225428	Identifier	str		5225384	1					
ANR	5225429	IdentifierDecl	* tmp_val = NULL		5225384	3					
ANR	5225430	IdentifierDeclType	char *		5225384	0					
ANR	5225431	Identifier	tmp_val		5225384	1					
ANR	5225432	AssignmentExpression	* tmp_val = NULL		5225384	2		=			
ANR	5225433	Identifier	NULL		5225384	0					
ANR	5225434	Identifier	NULL		5225384	1					
ANR	5225435	ExpressionStatement	klen = strlen ( key )	982:1:20131:20150	5225384	3	True				
ANR	5225436	AssignmentExpression	klen = strlen ( key )		5225384	0		=			
ANR	5225437	Identifier	klen		5225384	0					
ANR	5225438	CallExpression	strlen ( key )		5225384	1					
ANR	5225439	Callee	strlen		5225384	0					
ANR	5225440	Identifier	strlen		5225384	0					
ANR	5225441	ArgumentList	key		5225384	1					
ANR	5225442	Argument	key		5225384	0					
ANR	5225443	Identifier	key		5225384	0					
ANR	5225444	ExpressionStatement	vlen = strlen ( val )	983:1:20153:20172	5225384	4	True				
ANR	5225445	AssignmentExpression	vlen = strlen ( val )		5225384	0		=			
ANR	5225446	Identifier	vlen		5225384	0					
ANR	5225447	CallExpression	strlen ( val )		5225384	1					
ANR	5225448	Callee	strlen		5225384	0					
ANR	5225449	Identifier	strlen		5225384	0					
ANR	5225450	ArgumentList	val		5225384	1					
ANR	5225451	Argument	val		5225384	0					
ANR	5225452	Identifier	val		5225384	0					
ANR	5225453	ExpressionStatement	slen = strlen ( str )	985:1:20176:20195	5225384	5	True				
ANR	5225454	AssignmentExpression	slen = strlen ( str )		5225384	0		=			
ANR	5225455	Identifier	slen		5225384	0					
ANR	5225456	CallExpression	strlen ( str )		5225384	1					
ANR	5225457	Callee	strlen		5225384	0					
ANR	5225458	Identifier	strlen		5225384	0					
ANR	5225459	ArgumentList	str		5225384	1					
ANR	5225460	Argument	str		5225384	0					
ANR	5225461	Identifier	str		5225384	0					
ANR	5225462	ForStatement	for ( i = 0 ; i < slen ; )		5225384	6					
ANR	5225463	ForInit	i = 0 ;	986:6:20203:20208	5225384	0	True				
ANR	5225464	AssignmentExpression	i = 0		5225384	0		=			
ANR	5225465	Identifier	i		5225384	0					
ANR	5225466	PrimaryExpression	0		5225384	1					
ANR	5225467	Condition	i < slen	986:13:20210:20217	5225384	1	True				
ANR	5225468	RelationalExpression	i < slen		5225384	0		<			
ANR	5225469	Identifier	i		5225384	0					
ANR	5225470	Identifier	slen		5225384	1					
ANR	5225471	CompoundStatement		10:24:222:222	5225384	2					
ANR	5225472	ExpressionStatement	"p = ( char * ) r_str_casestr ( str + i , key )"	987:2:20225:20265	5225384	0	True				
ANR	5225473	AssignmentExpression	"p = ( char * ) r_str_casestr ( str + i , key )"		5225384	0		=			
ANR	5225474	Identifier	p		5225384	0					
ANR	5225475	CastExpression	"( char * ) r_str_casestr ( str + i , key )"		5225384	1					
ANR	5225476	CastTarget	char *		5225384	0					
ANR	5225477	CallExpression	"r_str_casestr ( str + i , key )"		5225384	1					
ANR	5225478	Callee	r_str_casestr		5225384	0					
ANR	5225479	Identifier	r_str_casestr		5225384	0					
ANR	5225480	ArgumentList	str + i		5225384	1					
ANR	5225481	Argument	str + i		5225384	0					
ANR	5225482	AdditiveExpression	str + i		5225384	0		+			
ANR	5225483	Identifier	str		5225384	0					
ANR	5225484	Identifier	i		5225384	1					
ANR	5225485	Argument	key		5225384	1					
ANR	5225486	Identifier	key		5225384	0					
ANR	5225487	IfStatement	if ( ! p )		5225384	1					
ANR	5225488	Condition	! p	988:6:20273:20274	5225384	0	True				
ANR	5225489	UnaryOperationExpression	! p		5225384	0					
ANR	5225490	UnaryOperator	!		5225384	0					
ANR	5225491	Identifier	p		5225384	1					
ANR	5225492	CompoundStatement		12:10:278:278	5225384	1					
ANR	5225493	BreakStatement	break ;	989:3:20282:20287	5225384	0	True				
ANR	5225494	ExpressionStatement	off = ( int ) ( size_t ) ( p - str )	991:2:20295:20324	5225384	2	True				
ANR	5225495	AssignmentExpression	off = ( int ) ( size_t ) ( p - str )		5225384	0		=			
ANR	5225496	Identifier	off		5225384	0					
ANR	5225497	CastExpression	( int ) ( size_t ) ( p - str )		5225384	1					
ANR	5225498	CastTarget	int		5225384	0					
ANR	5225499	CastExpression	( size_t ) ( p - str )		5225384	1					
ANR	5225500	CastTarget	size_t		5225384	0					
ANR	5225501	AdditiveExpression	p - str		5225384	1		-			
ANR	5225502	Identifier	p		5225384	0					
ANR	5225503	Identifier	str		5225384	1					
ANR	5225504	ExpressionStatement	scnd = strdup ( p + klen )	992:2:20328:20352	5225384	3	True				
ANR	5225505	AssignmentExpression	scnd = strdup ( p + klen )		5225384	0		=			
ANR	5225506	Identifier	scnd		5225384	0					
ANR	5225507	CallExpression	strdup ( p + klen )		5225384	1					
ANR	5225508	Callee	strdup		5225384	0					
ANR	5225509	Identifier	strdup		5225384	0					
ANR	5225510	ArgumentList	p + klen		5225384	1					
ANR	5225511	Argument	p + klen		5225384	0					
ANR	5225512	AdditiveExpression	p + klen		5225384	0		+			
ANR	5225513	Identifier	p		5225384	0					
ANR	5225514	Identifier	klen		5225384	1					
ANR	5225515	ExpressionStatement	tmp_val = strdup ( val )	993:2:20356:20378	5225384	4	True				
ANR	5225516	AssignmentExpression	tmp_val = strdup ( val )		5225384	0		=			
ANR	5225517	Identifier	tmp_val		5225384	0					
ANR	5225518	CallExpression	strdup ( val )		5225384	1					
ANR	5225519	Callee	strdup		5225384	0					
ANR	5225520	Identifier	strdup		5225384	0					
ANR	5225521	ArgumentList	val		5225384	1					
ANR	5225522	Argument	val		5225384	0					
ANR	5225523	Identifier	val		5225384	0					
ANR	5225524	IfStatement	if ( ! tmp_val || ! scnd )		5225384	5					
ANR	5225525	Condition	! tmp_val || ! scnd	994:6:20386:20402	5225384	0	True				
ANR	5225526	OrExpression	! tmp_val || ! scnd		5225384	0		||			
ANR	5225527	UnaryOperationExpression	! tmp_val		5225384	0					
ANR	5225528	UnaryOperator	!		5225384	0					
ANR	5225529	Identifier	tmp_val		5225384	1					
ANR	5225530	UnaryOperationExpression	! scnd		5225384	1					
ANR	5225531	UnaryOperator	!		5225384	0					
ANR	5225532	Identifier	scnd		5225384	1					
ANR	5225533	CompoundStatement		18:25:406:406	5225384	1					
ANR	5225534	GotoStatement	goto alloc_fail ;	995:3:20410:20425	5225384	0	True				
ANR	5225535	Identifier	alloc_fail		5225384	0					
ANR	5225536	ExpressionStatement	slen += vlen - klen	997:2:20433:20452	5225384	6	True				
ANR	5225537	AssignmentExpression	slen += vlen - klen		5225384	0		+=			
ANR	5225538	Identifier	slen		5225384	0					
ANR	5225539	AdditiveExpression	vlen - klen		5225384	1		-			
ANR	5225540	Identifier	vlen		5225384	0					
ANR	5225541	Identifier	klen		5225384	1					
ANR	5225542	ExpressionStatement	"newstr = realloc ( str , slen + klen + 1 )"	998:2:20456:20495	5225384	7	True				
ANR	5225543	AssignmentExpression	"newstr = realloc ( str , slen + klen + 1 )"		5225384	0		=			
ANR	5225544	Identifier	newstr		5225384	0					
ANR	5225545	CallExpression	"realloc ( str , slen + klen + 1 )"		5225384	1					
ANR	5225546	Callee	realloc		5225384	0					
ANR	5225547	Identifier	realloc		5225384	0					
ANR	5225548	ArgumentList	str		5225384	1					
ANR	5225549	Argument	str		5225384	0					
ANR	5225550	Identifier	str		5225384	0					
ANR	5225551	Argument	slen + klen + 1		5225384	1					
ANR	5225552	AdditiveExpression	slen + klen + 1		5225384	0		+			
ANR	5225553	Identifier	slen		5225384	0					
ANR	5225554	AdditiveExpression	klen + 1		5225384	1		+			
ANR	5225555	Identifier	klen		5225384	0					
ANR	5225556	PrimaryExpression	1		5225384	1					
ANR	5225557	IfStatement	if ( ! newstr )		5225384	8					
ANR	5225558	Condition	! newstr	999:6:20503:20509	5225384	0	True				
ANR	5225559	UnaryOperationExpression	! newstr		5225384	0					
ANR	5225560	UnaryOperator	!		5225384	0					
ANR	5225561	Identifier	newstr		5225384	1					
ANR	5225562	CompoundStatement		23:15:513:513	5225384	1					
ANR	5225563	GotoStatement	goto alloc_fail ;	1000:3:20517:20532	5225384	0	True				
ANR	5225564	Identifier	alloc_fail		5225384	0					
ANR	5225565	ExpressionStatement	str = newstr	1002:2:20540:20552	5225384	9	True				
ANR	5225566	AssignmentExpression	str = newstr		5225384	0		=			
ANR	5225567	Identifier	str		5225384	0					
ANR	5225568	Identifier	newstr		5225384	1					
ANR	5225569	ExpressionStatement	p = str + off	1003:2:20556:20569	5225384	10	True				
ANR	5225570	AssignmentExpression	p = str + off		5225384	0		=			
ANR	5225571	Identifier	p		5225384	0					
ANR	5225572	AdditiveExpression	str + off		5225384	1		+			
ANR	5225573	Identifier	str		5225384	0					
ANR	5225574	Identifier	off		5225384	1					
ANR	5225575	IfStatement	if ( keep_case )		5225384	11					
ANR	5225576	Condition	keep_case	1005:6:20578:20586	5225384	0	True				
ANR	5225577	Identifier	keep_case		5225384	0					
ANR	5225578	CompoundStatement		30:3:595:632	5225384	1					
ANR	5225579	IdentifierDeclStatement	"char * str_case = r_str_ndup ( p , klen ) ;"	1006:3:20594:20631	5225384	0	True				
ANR	5225580	IdentifierDecl	"* str_case = r_str_ndup ( p , klen )"		5225384	0					
ANR	5225581	IdentifierDeclType	char *		5225384	0					
ANR	5225582	Identifier	str_case		5225384	1					
ANR	5225583	AssignmentExpression	"* str_case = r_str_ndup ( p , klen )"		5225384	2		=			
ANR	5225584	Identifier	str_case		5225384	0					
ANR	5225585	CallExpression	"r_str_ndup ( p , klen )"		5225384	1					
ANR	5225586	Callee	r_str_ndup		5225384	0					
ANR	5225587	Identifier	r_str_ndup		5225384	0					
ANR	5225588	ArgumentList	p		5225384	1					
ANR	5225589	Argument	p		5225384	0					
ANR	5225590	Identifier	p		5225384	0					
ANR	5225591	Argument	klen		5225384	1					
ANR	5225592	Identifier	klen		5225384	0					
ANR	5225593	IfStatement	if ( ! str_case )		5225384	1					
ANR	5225594	Condition	! str_case	1007:7:20640:20648	5225384	0	True				
ANR	5225595	UnaryOperationExpression	! str_case		5225384	0					
ANR	5225596	UnaryOperator	!		5225384	0					
ANR	5225597	Identifier	str_case		5225384	1					
ANR	5225598	CompoundStatement		31:18:652:652	5225384	1					
ANR	5225599	GotoStatement	goto alloc_fail ;	1008:4:20657:20672	5225384	0	True				
ANR	5225600	Identifier	alloc_fail		5225384	0					
ANR	5225601	ExpressionStatement	"tmp_val = r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"	1010:3:20682:20742	5225384	2	True				
ANR	5225602	AssignmentExpression	"tmp_val = r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"		5225384	0		=			
ANR	5225603	Identifier	tmp_val		5225384	0					
ANR	5225604	CallExpression	"r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"		5225384	1					
ANR	5225605	Callee	r_str_replace_icase		5225384	0					
ANR	5225606	Identifier	r_str_replace_icase		5225384	0					
ANR	5225607	ArgumentList	tmp_val		5225384	1					
ANR	5225608	Argument	tmp_val		5225384	0					
ANR	5225609	Identifier	tmp_val		5225384	0					
ANR	5225610	Argument	key		5225384	1					
ANR	5225611	Identifier	key		5225384	0					
ANR	5225612	Argument	str_case		5225384	2					
ANR	5225613	Identifier	str_case		5225384	0					
ANR	5225614	Argument	0		5225384	3					
ANR	5225615	PrimaryExpression	0		5225384	0					
ANR	5225616	Argument	0		5225384	4					
ANR	5225617	PrimaryExpression	0		5225384	0					
ANR	5225618	ExpressionStatement	free ( str_case )	1011:3:20747:20762	5225384	3	True				
ANR	5225619	CallExpression	free ( str_case )		5225384	0					
ANR	5225620	Callee	free		5225384	0					
ANR	5225621	Identifier	free		5225384	0					
ANR	5225622	ArgumentList	str_case		5225384	1					
ANR	5225623	Argument	str_case		5225384	0					
ANR	5225624	Identifier	str_case		5225384	0					
ANR	5225625	IfStatement	if ( ! tmp_val )		5225384	4					
ANR	5225626	Condition	! tmp_val	1012:7:20771:20778	5225384	0	True				
ANR	5225627	UnaryOperationExpression	! tmp_val		5225384	0					
ANR	5225628	UnaryOperator	!		5225384	0					
ANR	5225629	Identifier	tmp_val		5225384	1					
ANR	5225630	CompoundStatement		36:17:782:782	5225384	1					
ANR	5225631	GotoStatement	goto alloc_fail ;	1013:4:20787:20802	5225384	0	True				
ANR	5225632	Identifier	alloc_fail		5225384	0					
ANR	5225633	ExpressionStatement	"memcpy ( p , tmp_val , vlen )"	1017:2:20816:20841	5225384	12	True				
ANR	5225634	CallExpression	"memcpy ( p , tmp_val , vlen )"		5225384	0					
ANR	5225635	Callee	memcpy		5225384	0					
ANR	5225636	Identifier	memcpy		5225384	0					
ANR	5225637	ArgumentList	p		5225384	1					
ANR	5225638	Argument	p		5225384	0					
ANR	5225639	Identifier	p		5225384	0					
ANR	5225640	Argument	tmp_val		5225384	1					
ANR	5225641	Identifier	tmp_val		5225384	0					
ANR	5225642	Argument	vlen		5225384	2					
ANR	5225643	Identifier	vlen		5225384	0					
ANR	5225644	ExpressionStatement	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"	1018:2:20845:20887	5225384	13	True				
ANR	5225645	CallExpression	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"		5225384	0					
ANR	5225646	Callee	memcpy		5225384	0					
ANR	5225647	Identifier	memcpy		5225384	0					
ANR	5225648	ArgumentList	p + vlen		5225384	1					
ANR	5225649	Argument	p + vlen		5225384	0					
ANR	5225650	AdditiveExpression	p + vlen		5225384	0		+			
ANR	5225651	Identifier	p		5225384	0					
ANR	5225652	Identifier	vlen		5225384	1					
ANR	5225653	Argument	scnd		5225384	1					
ANR	5225654	Identifier	scnd		5225384	0					
ANR	5225655	Argument	strlen ( scnd ) + 1		5225384	2					
ANR	5225656	AdditiveExpression	strlen ( scnd ) + 1		5225384	0		+			
ANR	5225657	CallExpression	strlen ( scnd )		5225384	0					
ANR	5225658	Callee	strlen		5225384	0					
ANR	5225659	Identifier	strlen		5225384	0					
ANR	5225660	ArgumentList	scnd		5225384	1					
ANR	5225661	Argument	scnd		5225384	0					
ANR	5225662	Identifier	scnd		5225384	0					
ANR	5225663	PrimaryExpression	1		5225384	1					
ANR	5225664	ExpressionStatement	i = off + vlen	1019:2:20891:20905	5225384	14	True				
ANR	5225665	AssignmentExpression	i = off + vlen		5225384	0		=			
ANR	5225666	Identifier	i		5225384	0					
ANR	5225667	AdditiveExpression	off + vlen		5225384	1		+			
ANR	5225668	Identifier	off		5225384	0					
ANR	5225669	Identifier	vlen		5225384	1					
ANR	5225670	ExpressionStatement	free ( tmp_val )	1020:2:20909:20923	5225384	15	True				
ANR	5225671	CallExpression	free ( tmp_val )		5225384	0					
ANR	5225672	Callee	free		5225384	0					
ANR	5225673	Identifier	free		5225384	0					
ANR	5225674	ArgumentList	tmp_val		5225384	1					
ANR	5225675	Argument	tmp_val		5225384	0					
ANR	5225676	Identifier	tmp_val		5225384	0					
ANR	5225677	ExpressionStatement	free ( scnd )	1021:2:20927:20938	5225384	16	True				
ANR	5225678	CallExpression	free ( scnd )		5225384	0					
ANR	5225679	Callee	free		5225384	0					
ANR	5225680	Identifier	free		5225384	0					
ANR	5225681	ArgumentList	scnd		5225384	1					
ANR	5225682	Argument	scnd		5225384	0					
ANR	5225683	Identifier	scnd		5225384	0					
ANR	5225684	IfStatement	if ( ! g )		5225384	17					
ANR	5225685	Condition	! g	1022:6:20946:20947	5225384	0	True				
ANR	5225686	UnaryOperationExpression	! g		5225384	0					
ANR	5225687	UnaryOperator	!		5225384	0					
ANR	5225688	Identifier	g		5225384	1					
ANR	5225689	CompoundStatement		46:10:951:951	5225384	1					
ANR	5225690	BreakStatement	break ;	1023:3:20955:20960	5225384	0	True				
ANR	5225691	ReturnStatement	return str ;	1026:1:20970:20980	5225384	7	True				
ANR	5225692	Identifier	str		5225384	0					
ANR	5225693	Label	alloc_fail :	1028:0:20983:20993	5225384	8	True				
ANR	5225694	Identifier	alloc_fail		5225384	0					
ANR	5225695	ExpressionStatement	"eprintf ( ""alloc fail\\n"" )"	1029:1:20996:21020	5225384	9	True				
ANR	5225696	CallExpression	"eprintf ( ""alloc fail\\n"" )"		5225384	0					
ANR	5225697	Callee	eprintf		5225384	0					
ANR	5225698	Identifier	eprintf		5225384	0					
ANR	5225699	ArgumentList	"""alloc fail\\n"""		5225384	1					
ANR	5225700	Argument	"""alloc fail\\n"""		5225384	0					
ANR	5225701	PrimaryExpression	"""alloc fail\\n"""		5225384	0					
ANR	5225702	ExpressionStatement	free ( str )	1030:1:21023:21033	5225384	10	True				
ANR	5225703	CallExpression	free ( str )		5225384	0					
ANR	5225704	Callee	free		5225384	0					
ANR	5225705	Identifier	free		5225384	0					
ANR	5225706	ArgumentList	str		5225384	1					
ANR	5225707	Argument	str		5225384	0					
ANR	5225708	Identifier	str		5225384	0					
ANR	5225709	ExpressionStatement	free ( scnd )	1031:1:21036:21047	5225384	11	True				
ANR	5225710	CallExpression	free ( scnd )		5225384	0					
ANR	5225711	Callee	free		5225384	0					
ANR	5225712	Identifier	free		5225384	0					
ANR	5225713	ArgumentList	scnd		5225384	1					
ANR	5225714	Argument	scnd		5225384	0					
ANR	5225715	Identifier	scnd		5225384	0					
ANR	5225716	ExpressionStatement	free ( tmp_val )	1032:1:21050:21064	5225384	12	True				
ANR	5225717	CallExpression	free ( tmp_val )		5225384	0					
ANR	5225718	Callee	free		5225384	0					
ANR	5225719	Identifier	free		5225384	0					
ANR	5225720	ArgumentList	tmp_val		5225384	1					
ANR	5225721	Argument	tmp_val		5225384	0					
ANR	5225722	Identifier	tmp_val		5225384	0					
ANR	5225723	ReturnStatement	return NULL ;	1033:1:21067:21078	5225384	13	True				
ANR	5225724	Identifier	NULL		5225384	0					
ANR	5225725	ReturnType	R_API char *		5225384	1					
ANR	5225726	Identifier	r_str_replace_icase		5225384	2					
ANR	5225727	ParameterList	"char * str , const char * key , const char * val , int g , int keep_case"		5225384	3					
ANR	5225728	Parameter	char * str	977:32:19931:19939	5225384	0	True				
ANR	5225729	ParameterType	char *		5225384	0					
ANR	5225730	Identifier	str		5225384	1					
ANR	5225731	Parameter	const char * key	977:43:19942:19956	5225384	1	True				
ANR	5225732	ParameterType	const char *		5225384	0					
ANR	5225733	Identifier	key		5225384	1					
ANR	5225734	Parameter	const char * val	977:60:19959:19973	5225384	2	True				
ANR	5225735	ParameterType	const char *		5225384	0					
ANR	5225736	Identifier	val		5225384	1					
ANR	5225737	Parameter	int g	977:77:19976:19980	5225384	3	True				
ANR	5225738	ParameterType	int		5225384	0					
ANR	5225739	Identifier	g		5225384	1					
ANR	5225740	Parameter	int keep_case	977:84:19983:19995	5225384	4	True				
ANR	5225741	ParameterType	int		5225384	0					
ANR	5225742	Identifier	keep_case		5225384	1					
ANR	5225743	CFGEntryNode	ENTRY		5225384		True				
ANR	5225744	CFGExitNode	EXIT		5225384		True				
ANR	5225745	Symbol	val		5225384						
ANR	5225746	Symbol	NULL		5225384						
ANR	5225747	Symbol	r_str_casestr		5225384						
ANR	5225748	Symbol	r_str_replace_icase		5225384						
ANR	5225749	Symbol	keep_case		5225384						
ANR	5225750	Symbol	r_str_ndup		5225384						
ANR	5225751	Symbol	g		5225384						
ANR	5225752	Symbol	vlen		5225384						
ANR	5225753	Symbol	i		5225384						
ANR	5225754	Symbol	realloc		5225384						
ANR	5225755	Symbol	newstr		5225384						
ANR	5225756	Symbol	off		5225384						
ANR	5225757	Symbol	str		5225384						
ANR	5225758	Symbol	p		5225384						
ANR	5225759	Symbol	strlen		5225384						
ANR	5225760	Symbol	scnd		5225384						
ANR	5225761	Symbol	tmp_val		5225384						
ANR	5225762	Symbol	str_case		5225384						
ANR	5225763	Symbol	slen		5225384						
ANR	5225764	Symbol	klen		5225384						
ANR	5225765	Symbol	strdup		5225384						
ANR	5225766	Symbol	key		5225384						
ANR	5225767	Function	r_str_replace_thunked	1048:0:21548:22821							
ANR	5225768	FunctionDef	"r_str_replace_thunked (char * str , char * clean , int * thunk , int clen , const char * key , const char * val , int g)"		5225767	0					
ANR	5225769	CompoundStatement		1049:47:21675:22821	5225767	0					
ANR	5225770	IdentifierDeclStatement	"int i , klen , vlen , slen , delta = 0 , bias ;"	1050:1:21678:21718	5225767	0	True				
ANR	5225771	IdentifierDecl	i		5225767	0					
ANR	5225772	IdentifierDeclType	int		5225767	0					
ANR	5225773	Identifier	i		5225767	1					
ANR	5225774	IdentifierDecl	klen		5225767	1					
ANR	5225775	IdentifierDeclType	int		5225767	0					
ANR	5225776	Identifier	klen		5225767	1					
ANR	5225777	IdentifierDecl	vlen		5225767	2					
ANR	5225778	IdentifierDeclType	int		5225767	0					
ANR	5225779	Identifier	vlen		5225767	1					
ANR	5225780	IdentifierDecl	slen		5225767	3					
ANR	5225781	IdentifierDeclType	int		5225767	0					
ANR	5225782	Identifier	slen		5225767	1					
ANR	5225783	IdentifierDecl	delta = 0		5225767	4					
ANR	5225784	IdentifierDeclType	int		5225767	0					
ANR	5225785	Identifier	delta		5225767	1					
ANR	5225786	AssignmentExpression	delta = 0		5225767	2		=			
ANR	5225787	Identifier	delta		5225767	0					
ANR	5225788	PrimaryExpression	0		5225767	1					
ANR	5225789	IdentifierDecl	bias		5225767	5					
ANR	5225790	IdentifierDeclType	int		5225767	0					
ANR	5225791	Identifier	bias		5225767	1					
ANR	5225792	IdentifierDeclStatement	"char * newstr , * scnd , * p = clean , * str_p ;"	1051:1:21721:21760	5225767	1	True				
ANR	5225793	IdentifierDecl	* newstr		5225767	0					
ANR	5225794	IdentifierDeclType	char *		5225767	0					
ANR	5225795	Identifier	newstr		5225767	1					
ANR	5225796	IdentifierDecl	* scnd		5225767	1					
ANR	5225797	IdentifierDeclType	char *		5225767	0					
ANR	5225798	Identifier	scnd		5225767	1					
ANR	5225799	IdentifierDecl	* p = clean		5225767	2					
ANR	5225800	IdentifierDeclType	char *		5225767	0					
ANR	5225801	Identifier	p		5225767	1					
ANR	5225802	AssignmentExpression	* p = clean		5225767	2		=			
ANR	5225803	Identifier	clean		5225767	0					
ANR	5225804	Identifier	clean		5225767	1					
ANR	5225805	IdentifierDecl	* str_p		5225767	3					
ANR	5225806	IdentifierDeclType	char *		5225767	0					
ANR	5225807	Identifier	str_p		5225767	1					
ANR	5225808	IfStatement	if ( ! str || ! key || ! val || ! clean || ! thunk )		5225767	2					
ANR	5225809	Condition	! str || ! key || ! val || ! clean || ! thunk	1053:5:21768:21807	5225767	0	True				
ANR	5225810	OrExpression	! str || ! key || ! val || ! clean || ! thunk		5225767	0		||			
ANR	5225811	UnaryOperationExpression	! str		5225767	0					
ANR	5225812	UnaryOperator	!		5225767	0					
ANR	5225813	Identifier	str		5225767	1					
ANR	5225814	OrExpression	! key || ! val || ! clean || ! thunk		5225767	1		||			
ANR	5225815	UnaryOperationExpression	! key		5225767	0					
ANR	5225816	UnaryOperator	!		5225767	0					
ANR	5225817	Identifier	key		5225767	1					
ANR	5225818	OrExpression	! val || ! clean || ! thunk		5225767	1		||			
ANR	5225819	UnaryOperationExpression	! val		5225767	0					
ANR	5225820	UnaryOperator	!		5225767	0					
ANR	5225821	Identifier	val		5225767	1					
ANR	5225822	OrExpression	! clean || ! thunk		5225767	1		||			
ANR	5225823	UnaryOperationExpression	! clean		5225767	0					
ANR	5225824	UnaryOperator	!		5225767	0					
ANR	5225825	Identifier	clean		5225767	1					
ANR	5225826	UnaryOperationExpression	! thunk		5225767	1					
ANR	5225827	UnaryOperator	!		5225767	0					
ANR	5225828	Identifier	thunk		5225767	1					
ANR	5225829	CompoundStatement		5:47:134:134	5225767	1					
ANR	5225830	ReturnStatement	return NULL ;	1054:2:21814:21825	5225767	0	True				
ANR	5225831	Identifier	NULL		5225767	0					
ANR	5225832	ExpressionStatement	klen = strlen ( key )	1056:1:21831:21850	5225767	3	True				
ANR	5225833	AssignmentExpression	klen = strlen ( key )		5225767	0		=			
ANR	5225834	Identifier	klen		5225767	0					
ANR	5225835	CallExpression	strlen ( key )		5225767	1					
ANR	5225836	Callee	strlen		5225767	0					
ANR	5225837	Identifier	strlen		5225767	0					
ANR	5225838	ArgumentList	key		5225767	1					
ANR	5225839	Argument	key		5225767	0					
ANR	5225840	Identifier	key		5225767	0					
ANR	5225841	ExpressionStatement	vlen = strlen ( val )	1057:1:21853:21872	5225767	4	True				
ANR	5225842	AssignmentExpression	vlen = strlen ( val )		5225767	0		=			
ANR	5225843	Identifier	vlen		5225767	0					
ANR	5225844	CallExpression	strlen ( val )		5225767	1					
ANR	5225845	Callee	strlen		5225767	0					
ANR	5225846	Identifier	strlen		5225767	0					
ANR	5225847	ArgumentList	val		5225767	1					
ANR	5225848	Argument	val		5225767	0					
ANR	5225849	Identifier	val		5225767	0					
ANR	5225850	IfStatement	"if ( klen == vlen && ! strcmp ( key , val ) )"		5225767	5					
ANR	5225851	Condition	"klen == vlen && ! strcmp ( key , val )"	1058:5:21879:21912	5225767	0	True				
ANR	5225852	AndExpression	"klen == vlen && ! strcmp ( key , val )"		5225767	0		&&			
ANR	5225853	EqualityExpression	klen == vlen		5225767	0		==			
ANR	5225854	Identifier	klen		5225767	0					
ANR	5225855	Identifier	vlen		5225767	1					
ANR	5225856	UnaryOperationExpression	"! strcmp ( key , val )"		5225767	1					
ANR	5225857	UnaryOperator	!		5225767	0					
ANR	5225858	CallExpression	"strcmp ( key , val )"		5225767	1					
ANR	5225859	Callee	strcmp		5225767	0					
ANR	5225860	Identifier	strcmp		5225767	0					
ANR	5225861	ArgumentList	key		5225767	1					
ANR	5225862	Argument	key		5225767	0					
ANR	5225863	Identifier	key		5225767	0					
ANR	5225864	Argument	val		5225767	1					
ANR	5225865	Identifier	val		5225767	0					
ANR	5225866	CompoundStatement		10:41:239:239	5225767	1					
ANR	5225867	ReturnStatement	return str ;	1059:2:21919:21929	5225767	0	True				
ANR	5225868	Identifier	str		5225767	0					
ANR	5225869	ExpressionStatement	slen = strlen ( str ) + 1	1061:1:21935:21958	5225767	6	True				
ANR	5225870	AssignmentExpression	slen = strlen ( str ) + 1		5225767	0		=			
ANR	5225871	Identifier	slen		5225767	0					
ANR	5225872	AdditiveExpression	strlen ( str ) + 1		5225767	1		+			
ANR	5225873	CallExpression	strlen ( str )		5225767	0					
ANR	5225874	Callee	strlen		5225767	0					
ANR	5225875	Identifier	strlen		5225767	0					
ANR	5225876	ArgumentList	str		5225767	1					
ANR	5225877	Argument	str		5225767	0					
ANR	5225878	Identifier	str		5225767	0					
ANR	5225879	PrimaryExpression	1		5225767	1					
ANR	5225880	ForStatement	for ( i = 0 ; i < clen ; )		5225767	7					
ANR	5225881	ForInit	i = 0 ;	1063:6:21967:21972	5225767	0	True				
ANR	5225882	AssignmentExpression	i = 0		5225767	0		=			
ANR	5225883	Identifier	i		5225767	0					
ANR	5225884	PrimaryExpression	0		5225767	1					
ANR	5225885	Condition	i < clen	1063:13:21974:21981	5225767	1	True				
ANR	5225886	RelationalExpression	i < clen		5225767	0		<			
ANR	5225887	Identifier	i		5225767	0					
ANR	5225888	Identifier	clen		5225767	1					
ANR	5225889	CompoundStatement		27:2:597:634	5225767	2					
ANR	5225890	ExpressionStatement	"p = ( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"	1064:2:21990:22075	5225767	0	True				
ANR	5225891	AssignmentExpression	"p = ( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		5225767	0		=			
ANR	5225892	Identifier	p		5225767	0					
ANR	5225893	CastExpression	"( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		5225767	1					
ANR	5225894	CastTarget	char *		5225767	0					
ANR	5225895	CallExpression	"r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		5225767	1					
ANR	5225896	Callee	r_mem_mem		5225767	0					
ANR	5225897	Identifier	r_mem_mem		5225767	0					
ANR	5225898	ArgumentList	( const ut8 * ) clean + i		5225767	1					
ANR	5225899	Argument	( const ut8 * ) clean + i		5225767	0					
ANR	5225900	AdditiveExpression	( const ut8 * ) clean + i		5225767	0		+			
ANR	5225901	CastExpression	( const ut8 * ) clean		5225767	0					
ANR	5225902	CastTarget	const ut8 *		5225767	0					
ANR	5225903	Identifier	clean		5225767	1					
ANR	5225904	Identifier	i		5225767	1					
ANR	5225905	Argument	clen - i		5225767	1					
ANR	5225906	AdditiveExpression	clen - i		5225767	0		-			
ANR	5225907	Identifier	clen		5225767	0					
ANR	5225908	Identifier	i		5225767	1					
ANR	5225909	Argument	( const ut8 * ) key		5225767	2					
ANR	5225910	CastExpression	( const ut8 * ) key		5225767	0					
ANR	5225911	CastTarget	const ut8 *		5225767	0					
ANR	5225912	Identifier	key		5225767	1					
ANR	5225913	Argument	klen		5225767	3					
ANR	5225914	Identifier	klen		5225767	0					
ANR	5225915	IfStatement	if ( ! p )		5225767	1					
ANR	5225916	Condition	! p	1067:6:22083:22084	5225767	0	True				
ANR	5225917	UnaryOperationExpression	! p		5225767	0					
ANR	5225918	UnaryOperator	!		5225767	0					
ANR	5225919	Identifier	p		5225767	1					
ANR	5225920	CompoundStatement		19:10:411:411	5225767	1					
ANR	5225921	BreakStatement	break ;	1068:3:22092:22097	5225767	0	True				
ANR	5225922	ExpressionStatement	i = ( int ) ( size_t ) ( p - clean )	1070:2:22105:22133	5225767	2	True				
ANR	5225923	AssignmentExpression	i = ( int ) ( size_t ) ( p - clean )		5225767	0		=			
ANR	5225924	Identifier	i		5225767	0					
ANR	5225925	CastExpression	( int ) ( size_t ) ( p - clean )		5225767	1					
ANR	5225926	CastTarget	int		5225767	0					
ANR	5225927	CastExpression	( size_t ) ( p - clean )		5225767	1					
ANR	5225928	CastTarget	size_t		5225767	0					
ANR	5225929	AdditiveExpression	p - clean		5225767	1		-			
ANR	5225930	Identifier	p		5225767	0					
ANR	5225931	Identifier	clean		5225767	1					
ANR	5225932	ExpressionStatement	str_p = str + thunk [ i ] + delta	1073:2:22238:22268	5225767	3	True				
ANR	5225933	AssignmentExpression	str_p = str + thunk [ i ] + delta		5225767	0		=			
ANR	5225934	Identifier	str_p		5225767	0					
ANR	5225935	AdditiveExpression	str + thunk [ i ] + delta		5225767	1		+			
ANR	5225936	Identifier	str		5225767	0					
ANR	5225937	AdditiveExpression	thunk [ i ] + delta		5225767	1		+			
ANR	5225938	ArrayIndexing	thunk [ i ]		5225767	0					
ANR	5225939	Identifier	thunk		5225767	0					
ANR	5225940	Identifier	i		5225767	1					
ANR	5225941	Identifier	delta		5225767	1					
ANR	5225942	IdentifierDeclStatement	int newo = thunk [ i + klen ] - thunk [ i ] ;	1075:2:22273:22310	5225767	4	True				
ANR	5225943	IdentifierDecl	newo = thunk [ i + klen ] - thunk [ i ]		5225767	0					
ANR	5225944	IdentifierDeclType	int		5225767	0					
ANR	5225945	Identifier	newo		5225767	1					
ANR	5225946	AssignmentExpression	newo = thunk [ i + klen ] - thunk [ i ]		5225767	2		=			
ANR	5225947	Identifier	newo		5225767	0					
ANR	5225948	AdditiveExpression	thunk [ i + klen ] - thunk [ i ]		5225767	1		-			
ANR	5225949	ArrayIndexing	thunk [ i + klen ]		5225767	0					
ANR	5225950	Identifier	thunk		5225767	0					
ANR	5225951	AdditiveExpression	i + klen		5225767	1		+			
ANR	5225952	Identifier	i		5225767	0					
ANR	5225953	Identifier	klen		5225767	1					
ANR	5225954	ArrayIndexing	thunk [ i ]		5225767	1					
ANR	5225955	Identifier	thunk		5225767	0					
ANR	5225956	Identifier	i		5225767	1					
ANR	5225957	ExpressionStatement	"r_str_ansi_filter ( str_p , NULL , NULL , newo )"	1076:2:22314:22357	5225767	5	True				
ANR	5225958	CallExpression	"r_str_ansi_filter ( str_p , NULL , NULL , newo )"		5225767	0					
ANR	5225959	Callee	r_str_ansi_filter		5225767	0					
ANR	5225960	Identifier	r_str_ansi_filter		5225767	0					
ANR	5225961	ArgumentList	str_p		5225767	1					
ANR	5225962	Argument	str_p		5225767	0					
ANR	5225963	Identifier	str_p		5225767	0					
ANR	5225964	Argument	NULL		5225767	1					
ANR	5225965	Identifier	NULL		5225767	0					
ANR	5225966	Argument	NULL		5225767	2					
ANR	5225967	Identifier	NULL		5225767	0					
ANR	5225968	Argument	newo		5225767	3					
ANR	5225969	Identifier	newo		5225767	0					
ANR	5225970	ExpressionStatement	scnd = strdup ( str_p + newo )	1077:2:22361:22389	5225767	6	True				
ANR	5225971	AssignmentExpression	scnd = strdup ( str_p + newo )		5225767	0		=			
ANR	5225972	Identifier	scnd		5225767	0					
ANR	5225973	CallExpression	strdup ( str_p + newo )		5225767	1					
ANR	5225974	Callee	strdup		5225767	0					
ANR	5225975	Identifier	strdup		5225767	0					
ANR	5225976	ArgumentList	str_p + newo		5225767	1					
ANR	5225977	Argument	str_p + newo		5225767	0					
ANR	5225978	AdditiveExpression	str_p + newo		5225767	0		+			
ANR	5225979	Identifier	str_p		5225767	0					
ANR	5225980	Identifier	newo		5225767	1					
ANR	5225981	ExpressionStatement	bias = vlen - newo	1078:2:22393:22411	5225767	7	True				
ANR	5225982	AssignmentExpression	bias = vlen - newo		5225767	0		=			
ANR	5225983	Identifier	bias		5225767	0					
ANR	5225984	AdditiveExpression	vlen - newo		5225767	1		-			
ANR	5225985	Identifier	vlen		5225767	0					
ANR	5225986	Identifier	newo		5225767	1					
ANR	5225987	ExpressionStatement	slen += bias	1080:2:22416:22428	5225767	8	True				
ANR	5225988	AssignmentExpression	slen += bias		5225767	0		+=			
ANR	5225989	Identifier	slen		5225767	0					
ANR	5225990	Identifier	bias		5225767	1					
ANR	5225991	ExpressionStatement	"newstr = realloc ( str , slen + klen )"	1082:2:22473:22508	5225767	9	True				
ANR	5225992	AssignmentExpression	"newstr = realloc ( str , slen + klen )"		5225767	0		=			
ANR	5225993	Identifier	newstr		5225767	0					
ANR	5225994	CallExpression	"realloc ( str , slen + klen )"		5225767	1					
ANR	5225995	Callee	realloc		5225767	0					
ANR	5225996	Identifier	realloc		5225767	0					
ANR	5225997	ArgumentList	str		5225767	1					
ANR	5225998	Argument	str		5225767	0					
ANR	5225999	Identifier	str		5225767	0					
ANR	5226000	Argument	slen + klen		5225767	1					
ANR	5226001	AdditiveExpression	slen + klen		5225767	0		+			
ANR	5226002	Identifier	slen		5225767	0					
ANR	5226003	Identifier	klen		5225767	1					
ANR	5226004	IfStatement	if ( ! newstr )		5225767	10					
ANR	5226005	Condition	! newstr	1083:6:22516:22522	5225767	0	True				
ANR	5226006	UnaryOperationExpression	! newstr		5225767	0					
ANR	5226007	UnaryOperator	!		5225767	0					
ANR	5226008	Identifier	newstr		5225767	1					
ANR	5226009	CompoundStatement		35:15:849:849	5225767	1					
ANR	5226010	ExpressionStatement	"eprintf ( ""realloc fail\\n"" )"	1084:3:22530:22556	5225767	0	True				
ANR	5226011	CallExpression	"eprintf ( ""realloc fail\\n"" )"		5225767	0					
ANR	5226012	Callee	eprintf		5225767	0					
ANR	5226013	Identifier	eprintf		5225767	0					
ANR	5226014	ArgumentList	"""realloc fail\\n"""		5225767	1					
ANR	5226015	Argument	"""realloc fail\\n"""		5225767	0					
ANR	5226016	PrimaryExpression	"""realloc fail\\n"""		5225767	0					
ANR	5226017	ExpressionStatement	R_FREE ( str )	1085:3:22561:22573	5225767	1	True				
ANR	5226018	CallExpression	R_FREE ( str )		5225767	0					
ANR	5226019	Callee	R_FREE		5225767	0					
ANR	5226020	Identifier	R_FREE		5225767	0					
ANR	5226021	ArgumentList	str		5225767	1					
ANR	5226022	Argument	str		5225767	0					
ANR	5226023	Identifier	str		5225767	0					
ANR	5226024	ExpressionStatement	free ( scnd )	1086:3:22578:22589	5225767	2	True				
ANR	5226025	CallExpression	free ( scnd )		5225767	0					
ANR	5226026	Callee	free		5225767	0					
ANR	5226027	Identifier	free		5225767	0					
ANR	5226028	ArgumentList	scnd		5225767	1					
ANR	5226029	Argument	scnd		5225767	0					
ANR	5226030	Identifier	scnd		5225767	0					
ANR	5226031	BreakStatement	break ;	1087:3:22594:22599	5225767	3	True				
ANR	5226032	ExpressionStatement	str = newstr	1089:2:22607:22619	5225767	11	True				
ANR	5226033	AssignmentExpression	str = newstr		5225767	0		=			
ANR	5226034	Identifier	str		5225767	0					
ANR	5226035	Identifier	newstr		5225767	1					
ANR	5226036	ExpressionStatement	str_p = str + thunk [ i ] + delta	1090:2:22623:22653	5225767	12	True				
ANR	5226037	AssignmentExpression	str_p = str + thunk [ i ] + delta		5225767	0		=			
ANR	5226038	Identifier	str_p		5225767	0					
ANR	5226039	AdditiveExpression	str + thunk [ i ] + delta		5225767	1		+			
ANR	5226040	Identifier	str		5225767	0					
ANR	5226041	AdditiveExpression	thunk [ i ] + delta		5225767	1		+			
ANR	5226042	ArrayIndexing	thunk [ i ]		5225767	0					
ANR	5226043	Identifier	thunk		5225767	0					
ANR	5226044	Identifier	i		5225767	1					
ANR	5226045	Identifier	delta		5225767	1					
ANR	5226046	ExpressionStatement	"memcpy ( str_p , val , vlen )"	1091:2:22657:22682	5225767	13	True				
ANR	5226047	CallExpression	"memcpy ( str_p , val , vlen )"		5225767	0					
ANR	5226048	Callee	memcpy		5225767	0					
ANR	5226049	Identifier	memcpy		5225767	0					
ANR	5226050	ArgumentList	str_p		5225767	1					
ANR	5226051	Argument	str_p		5225767	0					
ANR	5226052	Identifier	str_p		5225767	0					
ANR	5226053	Argument	val		5225767	1					
ANR	5226054	Identifier	val		5225767	0					
ANR	5226055	Argument	vlen		5225767	2					
ANR	5226056	Identifier	vlen		5225767	0					
ANR	5226057	ExpressionStatement	"memcpy ( str_p + vlen , scnd , strlen ( scnd ) + 1 )"	1092:2:22686:22732	5225767	14	True				
ANR	5226058	CallExpression	"memcpy ( str_p + vlen , scnd , strlen ( scnd ) + 1 )"		5225767	0					
ANR	5226059	Callee	memcpy		5225767	0					
ANR	5226060	Identifier	memcpy		5225767	0					
ANR	5226061	ArgumentList	str_p + vlen		5225767	1					
ANR	5226062	Argument	str_p + vlen		5225767	0					
ANR	5226063	AdditiveExpression	str_p + vlen		5225767	0		+			
ANR	5226064	Identifier	str_p		5225767	0					
ANR	5226065	Identifier	vlen		5225767	1					
ANR	5226066	Argument	scnd		5225767	1					
ANR	5226067	Identifier	scnd		5225767	0					
ANR	5226068	Argument	strlen ( scnd ) + 1		5225767	2					
ANR	5226069	AdditiveExpression	strlen ( scnd ) + 1		5225767	0		+			
ANR	5226070	CallExpression	strlen ( scnd )		5225767	0					
ANR	5226071	Callee	strlen		5225767	0					
ANR	5226072	Identifier	strlen		5225767	0					
ANR	5226073	ArgumentList	scnd		5225767	1					
ANR	5226074	Argument	scnd		5225767	0					
ANR	5226075	Identifier	scnd		5225767	0					
ANR	5226076	PrimaryExpression	1		5225767	1					
ANR	5226077	ExpressionStatement	i += klen	1093:2:22736:22745	5225767	15	True				
ANR	5226078	AssignmentExpression	i += klen		5225767	0		+=			
ANR	5226079	Identifier	i		5225767	0					
ANR	5226080	Identifier	klen		5225767	1					
ANR	5226081	ExpressionStatement	delta += bias	1094:2:22749:22762	5225767	16	True				
ANR	5226082	AssignmentExpression	delta += bias		5225767	0		+=			
ANR	5226083	Identifier	delta		5225767	0					
ANR	5226084	Identifier	bias		5225767	1					
ANR	5226085	ExpressionStatement	free ( scnd )	1095:2:22766:22777	5225767	17	True				
ANR	5226086	CallExpression	free ( scnd )		5225767	0					
ANR	5226087	Callee	free		5225767	0					
ANR	5226088	Identifier	free		5225767	0					
ANR	5226089	ArgumentList	scnd		5225767	1					
ANR	5226090	Argument	scnd		5225767	0					
ANR	5226091	Identifier	scnd		5225767	0					
ANR	5226092	IfStatement	if ( ! g )		5225767	18					
ANR	5226093	Condition	! g	1096:6:22785:22786	5225767	0	True				
ANR	5226094	UnaryOperationExpression	! g		5225767	0					
ANR	5226095	UnaryOperator	!		5225767	0					
ANR	5226096	Identifier	g		5225767	1					
ANR	5226097	CompoundStatement		48:10:1113:1113	5225767	1					
ANR	5226098	BreakStatement	break ;	1097:3:22794:22799	5225767	0	True				
ANR	5226099	ReturnStatement	return str ;	1100:1:22809:22819	5225767	8	True				
ANR	5226100	Identifier	str		5225767	0					
ANR	5226101	ReturnType	R_API char *		5225767	1					
ANR	5226102	Identifier	r_str_replace_thunked		5225767	2					
ANR	5226103	ParameterList	"char * str , char * clean , int * thunk , int clen , const char * key , const char * val , int g"		5225767	3					
ANR	5226104	Parameter	char * str	1048:34:21582:21590	5225767	0	True				
ANR	5226105	ParameterType	char *		5225767	0					
ANR	5226106	Identifier	str		5225767	1					
ANR	5226107	Parameter	char * clean	1048:45:21593:21603	5225767	1	True				
ANR	5226108	ParameterType	char *		5225767	0					
ANR	5226109	Identifier	clean		5225767	1					
ANR	5226110	Parameter	int * thunk	1048:58:21606:21615	5225767	2	True				
ANR	5226111	ParameterType	int *		5225767	0					
ANR	5226112	Identifier	thunk		5225767	1					
ANR	5226113	Parameter	int clen	1048:70:21618:21625	5225767	3	True				
ANR	5226114	ParameterType	int		5225767	0					
ANR	5226115	Identifier	clen		5225767	1					
ANR	5226116	Parameter	const char * key	1049:6:21634:21648	5225767	4	True				
ANR	5226117	ParameterType	const char *		5225767	0					
ANR	5226118	Identifier	key		5225767	1					
ANR	5226119	Parameter	const char * val	1049:23:21651:21665	5225767	5	True				
ANR	5226120	ParameterType	const char *		5225767	0					
ANR	5226121	Identifier	val		5225767	1					
ANR	5226122	Parameter	int g	1049:40:21668:21672	5225767	6	True				
ANR	5226123	ParameterType	int		5225767	0					
ANR	5226124	Identifier	g		5225767	1					
ANR	5226125	CFGEntryNode	ENTRY		5225767		True				
ANR	5226126	CFGExitNode	EXIT		5225767		True				
ANR	5226127	Symbol	delta		5225767						
ANR	5226128	Symbol	r_mem_mem		5225767						
ANR	5226129	Symbol	realloc		5225767						
ANR	5226130	Symbol	strlen		5225767						
ANR	5226131	Symbol	bias		5225767						
ANR	5226132	Symbol	key		5225767						
ANR	5226133	Symbol	val		5225767						
ANR	5226134	Symbol	strcmp		5225767						
ANR	5226135	Symbol	* klen		5225767						
ANR	5226136	Symbol	NULL		5225767						
ANR	5226137	Symbol	g		5225767						
ANR	5226138	Symbol	vlen		5225767						
ANR	5226139	Symbol	i		5225767						
ANR	5226140	Symbol	str_p		5225767						
ANR	5226141	Symbol	clean		5225767						
ANR	5226142	Symbol	thunk		5225767						
ANR	5226143	Symbol	newstr		5225767						
ANR	5226144	Symbol	str		5225767						
ANR	5226145	Symbol	p		5225767						
ANR	5226146	Symbol	scnd		5225767						
ANR	5226147	Symbol	* i		5225767						
ANR	5226148	Symbol	slen		5225767						
ANR	5226149	Symbol	klen		5225767						
ANR	5226150	Symbol	strdup		5225767						
ANR	5226151	Symbol	clen		5225767						
ANR	5226152	Symbol	* thunk		5225767						
ANR	5226153	Symbol	newo		5225767						
ANR	5226154	Function	r_str_replace_in	1103:0:22824:23099							
ANR	5226155	FunctionDef	"r_str_replace_in (char * str , ut32 sz , const char * key , const char * val , int g)"		5226154	0					
ANR	5226156	CompoundStatement		1103:90:22914:23099	5226154	0					
ANR	5226157	IfStatement	if ( ! str || ! key || ! val )		5226154	0					
ANR	5226158	Condition	! str || ! key || ! val	1104:5:22921:22940	5226154	0	True				
ANR	5226159	OrExpression	! str || ! key || ! val		5226154	0		||			
ANR	5226160	UnaryOperationExpression	! str		5226154	0					
ANR	5226161	UnaryOperator	!		5226154	0					
ANR	5226162	Identifier	str		5226154	1					
ANR	5226163	OrExpression	! key || ! val		5226154	1		||			
ANR	5226164	UnaryOperationExpression	! key		5226154	0					
ANR	5226165	UnaryOperator	!		5226154	0					
ANR	5226166	Identifier	key		5226154	1					
ANR	5226167	UnaryOperationExpression	! val		5226154	1					
ANR	5226168	UnaryOperator	!		5226154	0					
ANR	5226169	Identifier	val		5226154	1					
ANR	5226170	CompoundStatement		2:27:28:28	5226154	1					
ANR	5226171	ReturnStatement	return NULL ;	1105:2:22947:22958	5226154	0	True				
ANR	5226172	Identifier	NULL		5226154	0					
ANR	5226173	IdentifierDeclStatement	"char * heaped = r_str_replace ( strdup ( str ) , key , val , g ) ;"	1107:1:22964:23020	5226154	1	True				
ANR	5226174	IdentifierDecl	"* heaped = r_str_replace ( strdup ( str ) , key , val , g )"		5226154	0					
ANR	5226175	IdentifierDeclType	char *		5226154	0					
ANR	5226176	Identifier	heaped		5226154	1					
ANR	5226177	AssignmentExpression	"* heaped = r_str_replace ( strdup ( str ) , key , val , g )"		5226154	2		=			
ANR	5226178	Identifier	heaped		5226154	0					
ANR	5226179	CallExpression	"r_str_replace ( strdup ( str ) , key , val , g )"		5226154	1					
ANR	5226180	Callee	r_str_replace		5226154	0					
ANR	5226181	Identifier	r_str_replace		5226154	0					
ANR	5226182	ArgumentList	strdup ( str )		5226154	1					
ANR	5226183	Argument	strdup ( str )		5226154	0					
ANR	5226184	CallExpression	strdup ( str )		5226154	0					
ANR	5226185	Callee	strdup		5226154	0					
ANR	5226186	Identifier	strdup		5226154	0					
ANR	5226187	ArgumentList	str		5226154	1					
ANR	5226188	Argument	str		5226154	0					
ANR	5226189	Identifier	str		5226154	0					
ANR	5226190	Argument	key		5226154	1					
ANR	5226191	Identifier	key		5226154	0					
ANR	5226192	Argument	val		5226154	2					
ANR	5226193	Identifier	val		5226154	0					
ANR	5226194	Argument	g		5226154	3					
ANR	5226195	Identifier	g		5226154	0					
ANR	5226196	IfStatement	if ( heaped )		5226154	2					
ANR	5226197	Condition	heaped	1108:5:23027:23032	5226154	0	True				
ANR	5226198	Identifier	heaped		5226154	0					
ANR	5226199	CompoundStatement		6:13:120:120	5226154	1					
ANR	5226200	ExpressionStatement	"strncpy ( str , heaped , sz )"	1109:2:23039:23064	5226154	0	True				
ANR	5226201	CallExpression	"strncpy ( str , heaped , sz )"		5226154	0					
ANR	5226202	Callee	strncpy		5226154	0					
ANR	5226203	Identifier	strncpy		5226154	0					
ANR	5226204	ArgumentList	str		5226154	1					
ANR	5226205	Argument	str		5226154	0					
ANR	5226206	Identifier	str		5226154	0					
ANR	5226207	Argument	heaped		5226154	1					
ANR	5226208	Identifier	heaped		5226154	0					
ANR	5226209	Argument	sz		5226154	2					
ANR	5226210	Identifier	sz		5226154	0					
ANR	5226211	ExpressionStatement	free ( heaped )	1110:2:23068:23081	5226154	1	True				
ANR	5226212	CallExpression	free ( heaped )		5226154	0					
ANR	5226213	Callee	free		5226154	0					
ANR	5226214	Identifier	free		5226154	0					
ANR	5226215	ArgumentList	heaped		5226154	1					
ANR	5226216	Argument	heaped		5226154	0					
ANR	5226217	Identifier	heaped		5226154	0					
ANR	5226218	ReturnStatement	return str ;	1112:1:23087:23097	5226154	3	True				
ANR	5226219	Identifier	str		5226154	0					
ANR	5226220	ReturnType	R_API char *		5226154	1					
ANR	5226221	Identifier	r_str_replace_in		5226154	2					
ANR	5226222	ParameterList	"char * str , ut32 sz , const char * key , const char * val , int g"		5226154	3					
ANR	5226223	Parameter	char * str	1103:29:22853:22861	5226154	0	True				
ANR	5226224	ParameterType	char *		5226154	0					
ANR	5226225	Identifier	str		5226154	1					
ANR	5226226	Parameter	ut32 sz	1103:40:22864:22870	5226154	1	True				
ANR	5226227	ParameterType	ut32		5226154	0					
ANR	5226228	Identifier	sz		5226154	1					
ANR	5226229	Parameter	const char * key	1103:49:22873:22887	5226154	2	True				
ANR	5226230	ParameterType	const char *		5226154	0					
ANR	5226231	Identifier	key		5226154	1					
ANR	5226232	Parameter	const char * val	1103:66:22890:22904	5226154	3	True				
ANR	5226233	ParameterType	const char *		5226154	0					
ANR	5226234	Identifier	val		5226154	1					
ANR	5226235	Parameter	int g	1103:83:22907:22911	5226154	4	True				
ANR	5226236	ParameterType	int		5226154	0					
ANR	5226237	Identifier	g		5226154	1					
ANR	5226238	CFGEntryNode	ENTRY		5226154		True				
ANR	5226239	CFGExitNode	EXIT		5226154		True				
ANR	5226240	Symbol	str		5226154						
ANR	5226241	Symbol	val		5226154						
ANR	5226242	Symbol	NULL		5226154						
ANR	5226243	Symbol	sz		5226154						
ANR	5226244	Symbol	g		5226154						
ANR	5226245	Symbol	r_str_replace		5226154						
ANR	5226246	Symbol	strdup		5226154						
ANR	5226247	Symbol	key		5226154						
ANR	5226248	Symbol	heaped		5226154						
ANR	5226249	Function	r_str_unescape	1115:0:23102:24651							
ANR	5226250	FunctionDef	r_str_unescape (char * buf)		5226249	0					
ANR	5226251	CompoundStatement		1115:36:23138:24651	5226249	0					
ANR	5226252	IdentifierDeclStatement	"unsigned char ch = 0 , ch2 = 0 ;"	1116:1:23141:23170	5226249	0	True				
ANR	5226253	IdentifierDecl	ch = 0		5226249	0					
ANR	5226254	IdentifierDeclType	unsigned char		5226249	0					
ANR	5226255	Identifier	ch		5226249	1					
ANR	5226256	AssignmentExpression	ch = 0		5226249	2		=			
ANR	5226257	Identifier	ch		5226249	0					
ANR	5226258	PrimaryExpression	0		5226249	1					
ANR	5226259	IdentifierDecl	ch2 = 0		5226249	1					
ANR	5226260	IdentifierDeclType	unsigned char		5226249	0					
ANR	5226261	Identifier	ch2		5226249	1					
ANR	5226262	AssignmentExpression	ch2 = 0		5226249	2		=			
ANR	5226263	Identifier	ch2		5226249	0					
ANR	5226264	PrimaryExpression	0		5226249	1					
ANR	5226265	IdentifierDeclStatement	int err = 0 ;	1117:1:23173:23184	5226249	1	True				
ANR	5226266	IdentifierDecl	err = 0		5226249	0					
ANR	5226267	IdentifierDeclType	int		5226249	0					
ANR	5226268	Identifier	err		5226249	1					
ANR	5226269	AssignmentExpression	err = 0		5226249	2		=			
ANR	5226270	Identifier	err		5226249	0					
ANR	5226271	PrimaryExpression	0		5226249	1					
ANR	5226272	IdentifierDeclStatement	int i ;	1118:1:23187:23192	5226249	2	True				
ANR	5226273	IdentifierDecl	i		5226249	0					
ANR	5226274	IdentifierDeclType	int		5226249	0					
ANR	5226275	Identifier	i		5226249	1					
ANR	5226276	ForStatement	for ( i = 0 ; buf [ i ] ; i ++ )		5226249	3					
ANR	5226277	ForInit	i = 0 ;	1120:6:23201:23206	5226249	0	True				
ANR	5226278	AssignmentExpression	i = 0		5226249	0		=			
ANR	5226279	Identifier	i		5226249	0					
ANR	5226280	PrimaryExpression	0		5226249	1					
ANR	5226281	Condition	buf [ i ]	1120:13:23208:23213	5226249	1	True				
ANR	5226282	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226283	Identifier	buf		5226249	0					
ANR	5226284	Identifier	i		5226249	1					
ANR	5226285	PostIncDecOperationExpression	i ++	1120:21:23216:23218	5226249	2	True				
ANR	5226286	Identifier	i		5226249	0					
ANR	5226287	IncDec	++		5226249	1					
ANR	5226288	CompoundStatement		6:26:82:82	5226249	3					
ANR	5226289	IfStatement	if ( buf [ i ] != '\\\\' )		5226249	0					
ANR	5226290	Condition	buf [ i ] != '\\\\'	1121:6:23229:23242	5226249	0	True				
ANR	5226291	EqualityExpression	buf [ i ] != '\\\\'		5226249	0		!=			
ANR	5226292	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226293	Identifier	buf		5226249	0					
ANR	5226294	Identifier	i		5226249	1					
ANR	5226295	PrimaryExpression	'\\\\'		5226249	1					
ANR	5226296	CompoundStatement		7:22:106:106	5226249	1					
ANR	5226297	ContinueStatement	continue ;	1122:3:23250:23258	5226249	0	True				
ANR	5226298	IfStatement	if ( buf [ i + 1 ] == 'e' )		5226249	1					
ANR	5226299	Condition	buf [ i + 1 ] == 'e'	1124:6:23270:23284	5226249	0	True				
ANR	5226300	EqualityExpression	buf [ i + 1 ] == 'e'		5226249	0		==			
ANR	5226301	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226302	Identifier	buf		5226249	0					
ANR	5226303	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226304	Identifier	i		5226249	0					
ANR	5226305	PrimaryExpression	1		5226249	1					
ANR	5226306	PrimaryExpression	'e'		5226249	1					
ANR	5226307	CompoundStatement		10:23:148:148	5226249	1					
ANR	5226308	ExpressionStatement	buf [ i ] = 0x1b	1125:3:23292:23305	5226249	0	True				
ANR	5226309	AssignmentExpression	buf [ i ] = 0x1b		5226249	0		=			
ANR	5226310	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226311	Identifier	buf		5226249	0					
ANR	5226312	Identifier	i		5226249	1					
ANR	5226313	PrimaryExpression	0x1b		5226249	1					
ANR	5226314	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1126:3:23310:23370	5226249	1	True				
ANR	5226315	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		5226249	0					
ANR	5226316	Callee	memmove		5226249	0					
ANR	5226317	Identifier	memmove		5226249	0					
ANR	5226318	ArgumentList	buf + i + 1		5226249	1					
ANR	5226319	Argument	buf + i + 1		5226249	0					
ANR	5226320	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226321	Identifier	buf		5226249	0					
ANR	5226322	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226323	Identifier	i		5226249	0					
ANR	5226324	PrimaryExpression	1		5226249	1					
ANR	5226325	Argument	buf + i + 2		5226249	1					
ANR	5226326	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226327	Identifier	buf		5226249	0					
ANR	5226328	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226329	Identifier	i		5226249	0					
ANR	5226330	PrimaryExpression	2		5226249	1					
ANR	5226331	Argument	strlen ( buf + i + 2 ) + 1		5226249	2					
ANR	5226332	AdditiveExpression	strlen ( buf + i + 2 ) + 1		5226249	0		+			
ANR	5226333	CallExpression	strlen ( buf + i + 2 )		5226249	0					
ANR	5226334	Callee	strlen		5226249	0					
ANR	5226335	Identifier	strlen		5226249	0					
ANR	5226336	ArgumentList	buf + i + 2		5226249	1					
ANR	5226337	Argument	buf + i + 2		5226249	0					
ANR	5226338	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226339	Identifier	buf		5226249	0					
ANR	5226340	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226341	Identifier	i		5226249	0					
ANR	5226342	PrimaryExpression	2		5226249	1					
ANR	5226343	PrimaryExpression	1		5226249	1					
ANR	5226344	ElseStatement	else		5226249	0					
ANR	5226345	IfStatement	if ( buf [ i + 1 ] == '\\\\' )		5226249	0					
ANR	5226346	Condition	buf [ i + 1 ] == '\\\\'	1127:13:23385:23402	5226249	0	True				
ANR	5226347	EqualityExpression	buf [ i + 1 ] == '\\\\'		5226249	0		==			
ANR	5226348	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226349	Identifier	buf		5226249	0					
ANR	5226350	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226351	Identifier	i		5226249	0					
ANR	5226352	PrimaryExpression	1		5226249	1					
ANR	5226353	PrimaryExpression	'\\\\'		5226249	1					
ANR	5226354	CompoundStatement		13:33:266:266	5226249	1					
ANR	5226355	ExpressionStatement	buf [ i ] = '\\\\'	1128:3:23410:23423	5226249	0	True				
ANR	5226356	AssignmentExpression	buf [ i ] = '\\\\'		5226249	0		=			
ANR	5226357	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226358	Identifier	buf		5226249	0					
ANR	5226359	Identifier	i		5226249	1					
ANR	5226360	PrimaryExpression	'\\\\'		5226249	1					
ANR	5226361	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1129:3:23428:23488	5226249	1	True				
ANR	5226362	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		5226249	0					
ANR	5226363	Callee	memmove		5226249	0					
ANR	5226364	Identifier	memmove		5226249	0					
ANR	5226365	ArgumentList	buf + i + 1		5226249	1					
ANR	5226366	Argument	buf + i + 1		5226249	0					
ANR	5226367	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226368	Identifier	buf		5226249	0					
ANR	5226369	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226370	Identifier	i		5226249	0					
ANR	5226371	PrimaryExpression	1		5226249	1					
ANR	5226372	Argument	buf + i + 2		5226249	1					
ANR	5226373	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226374	Identifier	buf		5226249	0					
ANR	5226375	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226376	Identifier	i		5226249	0					
ANR	5226377	PrimaryExpression	2		5226249	1					
ANR	5226378	Argument	strlen ( buf + i + 2 ) + 1		5226249	2					
ANR	5226379	AdditiveExpression	strlen ( buf + i + 2 ) + 1		5226249	0		+			
ANR	5226380	CallExpression	strlen ( buf + i + 2 )		5226249	0					
ANR	5226381	Callee	strlen		5226249	0					
ANR	5226382	Identifier	strlen		5226249	0					
ANR	5226383	ArgumentList	buf + i + 2		5226249	1					
ANR	5226384	Argument	buf + i + 2		5226249	0					
ANR	5226385	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226386	Identifier	buf		5226249	0					
ANR	5226387	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226388	Identifier	i		5226249	0					
ANR	5226389	PrimaryExpression	2		5226249	1					
ANR	5226390	PrimaryExpression	1		5226249	1					
ANR	5226391	ElseStatement	else		5226249	0					
ANR	5226392	IfStatement	if ( buf [ i + 1 ] == 'r' )		5226249	0					
ANR	5226393	Condition	buf [ i + 1 ] == 'r'	1130:13:23503:23517	5226249	0	True				
ANR	5226394	EqualityExpression	buf [ i + 1 ] == 'r'		5226249	0		==			
ANR	5226395	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226396	Identifier	buf		5226249	0					
ANR	5226397	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226398	Identifier	i		5226249	0					
ANR	5226399	PrimaryExpression	1		5226249	1					
ANR	5226400	PrimaryExpression	'r'		5226249	1					
ANR	5226401	CompoundStatement		16:30:381:381	5226249	1					
ANR	5226402	ExpressionStatement	buf [ i ] = 0x0d	1131:3:23525:23538	5226249	0	True				
ANR	5226403	AssignmentExpression	buf [ i ] = 0x0d		5226249	0		=			
ANR	5226404	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226405	Identifier	buf		5226249	0					
ANR	5226406	Identifier	i		5226249	1					
ANR	5226407	PrimaryExpression	0x0d		5226249	1					
ANR	5226408	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1132:3:23543:23603	5226249	1	True				
ANR	5226409	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		5226249	0					
ANR	5226410	Callee	memmove		5226249	0					
ANR	5226411	Identifier	memmove		5226249	0					
ANR	5226412	ArgumentList	buf + i + 1		5226249	1					
ANR	5226413	Argument	buf + i + 1		5226249	0					
ANR	5226414	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226415	Identifier	buf		5226249	0					
ANR	5226416	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226417	Identifier	i		5226249	0					
ANR	5226418	PrimaryExpression	1		5226249	1					
ANR	5226419	Argument	buf + i + 2		5226249	1					
ANR	5226420	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226421	Identifier	buf		5226249	0					
ANR	5226422	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226423	Identifier	i		5226249	0					
ANR	5226424	PrimaryExpression	2		5226249	1					
ANR	5226425	Argument	strlen ( buf + i + 2 ) + 1		5226249	2					
ANR	5226426	AdditiveExpression	strlen ( buf + i + 2 ) + 1		5226249	0		+			
ANR	5226427	CallExpression	strlen ( buf + i + 2 )		5226249	0					
ANR	5226428	Callee	strlen		5226249	0					
ANR	5226429	Identifier	strlen		5226249	0					
ANR	5226430	ArgumentList	buf + i + 2		5226249	1					
ANR	5226431	Argument	buf + i + 2		5226249	0					
ANR	5226432	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226433	Identifier	buf		5226249	0					
ANR	5226434	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226435	Identifier	i		5226249	0					
ANR	5226436	PrimaryExpression	2		5226249	1					
ANR	5226437	PrimaryExpression	1		5226249	1					
ANR	5226438	ElseStatement	else		5226249	0					
ANR	5226439	IfStatement	if ( buf [ i + 1 ] == 'n' )		5226249	0					
ANR	5226440	Condition	buf [ i + 1 ] == 'n'	1133:13:23618:23632	5226249	0	True				
ANR	5226441	EqualityExpression	buf [ i + 1 ] == 'n'		5226249	0		==			
ANR	5226442	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226443	Identifier	buf		5226249	0					
ANR	5226444	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226445	Identifier	i		5226249	0					
ANR	5226446	PrimaryExpression	1		5226249	1					
ANR	5226447	PrimaryExpression	'n'		5226249	1					
ANR	5226448	CompoundStatement		19:30:496:496	5226249	1					
ANR	5226449	ExpressionStatement	buf [ i ] = 0x0a	1134:3:23640:23653	5226249	0	True				
ANR	5226450	AssignmentExpression	buf [ i ] = 0x0a		5226249	0		=			
ANR	5226451	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226452	Identifier	buf		5226249	0					
ANR	5226453	Identifier	i		5226249	1					
ANR	5226454	PrimaryExpression	0x0a		5226249	1					
ANR	5226455	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1135:3:23658:23718	5226249	1	True				
ANR	5226456	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		5226249	0					
ANR	5226457	Callee	memmove		5226249	0					
ANR	5226458	Identifier	memmove		5226249	0					
ANR	5226459	ArgumentList	buf + i + 1		5226249	1					
ANR	5226460	Argument	buf + i + 1		5226249	0					
ANR	5226461	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226462	Identifier	buf		5226249	0					
ANR	5226463	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226464	Identifier	i		5226249	0					
ANR	5226465	PrimaryExpression	1		5226249	1					
ANR	5226466	Argument	buf + i + 2		5226249	1					
ANR	5226467	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226468	Identifier	buf		5226249	0					
ANR	5226469	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226470	Identifier	i		5226249	0					
ANR	5226471	PrimaryExpression	2		5226249	1					
ANR	5226472	Argument	strlen ( buf + i + 2 ) + 1		5226249	2					
ANR	5226473	AdditiveExpression	strlen ( buf + i + 2 ) + 1		5226249	0		+			
ANR	5226474	CallExpression	strlen ( buf + i + 2 )		5226249	0					
ANR	5226475	Callee	strlen		5226249	0					
ANR	5226476	Identifier	strlen		5226249	0					
ANR	5226477	ArgumentList	buf + i + 2		5226249	1					
ANR	5226478	Argument	buf + i + 2		5226249	0					
ANR	5226479	AdditiveExpression	buf + i + 2		5226249	0		+			
ANR	5226480	Identifier	buf		5226249	0					
ANR	5226481	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226482	Identifier	i		5226249	0					
ANR	5226483	PrimaryExpression	2		5226249	1					
ANR	5226484	PrimaryExpression	1		5226249	1					
ANR	5226485	ElseStatement	else		5226249	0					
ANR	5226486	IfStatement	if ( buf [ i + 1 ] == 'x' )		5226249	0					
ANR	5226487	Condition	buf [ i + 1 ] == 'x'	1136:13:23733:23749	5226249	0	True				
ANR	5226488	EqualityExpression	buf [ i + 1 ] == 'x'		5226249	0		==			
ANR	5226489	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226490	Identifier	buf		5226249	0					
ANR	5226491	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226492	Identifier	i		5226249	0					
ANR	5226493	PrimaryExpression	1		5226249	1					
ANR	5226494	PrimaryExpression	'x'		5226249	1					
ANR	5226495	CompoundStatement		22:32:613:613	5226249	1					
ANR	5226496	ExpressionStatement	err = ch2 = ch = 0	1137:3:23757:23775	5226249	0	True				
ANR	5226497	AssignmentExpression	err = ch2 = ch = 0		5226249	0		=			
ANR	5226498	Identifier	err		5226249	0					
ANR	5226499	AssignmentExpression	ch2 = ch = 0		5226249	1		=			
ANR	5226500	Identifier	ch2		5226249	0					
ANR	5226501	AssignmentExpression	ch = 0		5226249	1		=			
ANR	5226502	Identifier	ch		5226249	0					
ANR	5226503	PrimaryExpression	0		5226249	1					
ANR	5226504	IfStatement	if ( ! buf [ i + 2 ] || ! buf [ i + 3 ] )		5226249	1					
ANR	5226505	Condition	! buf [ i + 2 ] || ! buf [ i + 3 ]	1138:7:23784:23809	5226249	0	True				
ANR	5226506	OrExpression	! buf [ i + 2 ] || ! buf [ i + 3 ]		5226249	0		||			
ANR	5226507	UnaryOperationExpression	! buf [ i + 2 ]		5226249	0					
ANR	5226508	UnaryOperator	!		5226249	0					
ANR	5226509	ArrayIndexing	buf [ i + 2 ]		5226249	1					
ANR	5226510	Identifier	buf		5226249	0					
ANR	5226511	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226512	Identifier	i		5226249	0					
ANR	5226513	PrimaryExpression	2		5226249	1					
ANR	5226514	UnaryOperationExpression	! buf [ i + 3 ]		5226249	1					
ANR	5226515	UnaryOperator	!		5226249	0					
ANR	5226516	ArrayIndexing	buf [ i + 3 ]		5226249	1					
ANR	5226517	Identifier	buf		5226249	0					
ANR	5226518	AdditiveExpression	i + 3		5226249	1		+			
ANR	5226519	Identifier	i		5226249	0					
ANR	5226520	PrimaryExpression	3		5226249	1					
ANR	5226521	CompoundStatement		24:35:673:673	5226249	1					
ANR	5226522	ExpressionStatement	"eprintf ( ""Unexpected end of string.\\n"" )"	1139:4:23818:23857	5226249	0	True				
ANR	5226523	CallExpression	"eprintf ( ""Unexpected end of string.\\n"" )"		5226249	0					
ANR	5226524	Callee	eprintf		5226249	0					
ANR	5226525	Identifier	eprintf		5226249	0					
ANR	5226526	ArgumentList	"""Unexpected end of string.\\n"""		5226249	1					
ANR	5226527	Argument	"""Unexpected end of string.\\n"""		5226249	0					
ANR	5226528	PrimaryExpression	"""Unexpected end of string.\\n"""		5226249	0					
ANR	5226529	ReturnStatement	return 0 ;	1140:4:23863:23871	5226249	1	True				
ANR	5226530	PrimaryExpression	0		5226249	0					
ANR	5226531	ExpressionStatement	"err |= r_hex_to_byte ( & ch , buf [ i + 2 ] )"	1142:3:23881:23920	5226249	2	True				
ANR	5226532	AssignmentExpression	"err |= r_hex_to_byte ( & ch , buf [ i + 2 ] )"		5226249	0		|=			
ANR	5226533	Identifier	err		5226249	0					
ANR	5226534	CallExpression	"r_hex_to_byte ( & ch , buf [ i + 2 ] )"		5226249	1					
ANR	5226535	Callee	r_hex_to_byte		5226249	0					
ANR	5226536	Identifier	r_hex_to_byte		5226249	0					
ANR	5226537	ArgumentList	& ch		5226249	1					
ANR	5226538	Argument	& ch		5226249	0					
ANR	5226539	UnaryOperationExpression	& ch		5226249	0					
ANR	5226540	UnaryOperator	&		5226249	0					
ANR	5226541	Identifier	ch		5226249	1					
ANR	5226542	Argument	buf [ i + 2 ]		5226249	1					
ANR	5226543	ArrayIndexing	buf [ i + 2 ]		5226249	0					
ANR	5226544	Identifier	buf		5226249	0					
ANR	5226545	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226546	Identifier	i		5226249	0					
ANR	5226547	PrimaryExpression	2		5226249	1					
ANR	5226548	ExpressionStatement	"err |= r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"	1143:3:23925:23964	5226249	3	True				
ANR	5226549	AssignmentExpression	"err |= r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"		5226249	0		|=			
ANR	5226550	Identifier	err		5226249	0					
ANR	5226551	CallExpression	"r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"		5226249	1					
ANR	5226552	Callee	r_hex_to_byte		5226249	0					
ANR	5226553	Identifier	r_hex_to_byte		5226249	0					
ANR	5226554	ArgumentList	& ch2		5226249	1					
ANR	5226555	Argument	& ch2		5226249	0					
ANR	5226556	UnaryOperationExpression	& ch2		5226249	0					
ANR	5226557	UnaryOperator	&		5226249	0					
ANR	5226558	Identifier	ch2		5226249	1					
ANR	5226559	Argument	buf [ i + 3 ]		5226249	1					
ANR	5226560	ArrayIndexing	buf [ i + 3 ]		5226249	0					
ANR	5226561	Identifier	buf		5226249	0					
ANR	5226562	AdditiveExpression	i + 3		5226249	1		+			
ANR	5226563	Identifier	i		5226249	0					
ANR	5226564	PrimaryExpression	3		5226249	1					
ANR	5226565	IfStatement	if ( err )		5226249	4					
ANR	5226566	Condition	err	1144:7:23973:23975	5226249	0	True				
ANR	5226567	Identifier	err		5226249	0					
ANR	5226568	CompoundStatement		30:12:839:839	5226249	1					
ANR	5226569	ExpressionStatement	"eprintf ( ""Error: Non-hexadecimal chars in input.\\n"" )"	1145:4:23984:24036	5226249	0	True				
ANR	5226570	CallExpression	"eprintf ( ""Error: Non-hexadecimal chars in input.\\n"" )"		5226249	0					
ANR	5226571	Callee	eprintf		5226249	0					
ANR	5226572	Identifier	eprintf		5226249	0					
ANR	5226573	ArgumentList	"""Error: Non-hexadecimal chars in input.\\n"""		5226249	1					
ANR	5226574	Argument	"""Error: Non-hexadecimal chars in input.\\n"""		5226249	0					
ANR	5226575	PrimaryExpression	"""Error: Non-hexadecimal chars in input.\\n"""		5226249	0					
ANR	5226576	ReturnStatement	return 0 ;	1146:4:24042:24050	5226249	1	True				
ANR	5226577	PrimaryExpression	0		5226249	0					
ANR	5226578	ExpressionStatement	buf [ i ] = ( ch << 4 ) + ch2	1148:3:24067:24091	5226249	5	True				
ANR	5226579	AssignmentExpression	buf [ i ] = ( ch << 4 ) + ch2		5226249	0		=			
ANR	5226580	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226581	Identifier	buf		5226249	0					
ANR	5226582	Identifier	i		5226249	1					
ANR	5226583	AdditiveExpression	( ch << 4 ) + ch2		5226249	1		+			
ANR	5226584	ShiftExpression	ch << 4		5226249	0		<<			
ANR	5226585	Identifier	ch		5226249	0					
ANR	5226586	PrimaryExpression	4		5226249	1					
ANR	5226587	Identifier	ch2		5226249	1					
ANR	5226588	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 4 , strlen ( buf + i + 4 ) + 1 )"	1149:3:24096:24156	5226249	6	True				
ANR	5226589	CallExpression	"memmove ( buf + i + 1 , buf + i + 4 , strlen ( buf + i + 4 ) + 1 )"		5226249	0					
ANR	5226590	Callee	memmove		5226249	0					
ANR	5226591	Identifier	memmove		5226249	0					
ANR	5226592	ArgumentList	buf + i + 1		5226249	1					
ANR	5226593	Argument	buf + i + 1		5226249	0					
ANR	5226594	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226595	Identifier	buf		5226249	0					
ANR	5226596	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226597	Identifier	i		5226249	0					
ANR	5226598	PrimaryExpression	1		5226249	1					
ANR	5226599	Argument	buf + i + 4		5226249	1					
ANR	5226600	AdditiveExpression	buf + i + 4		5226249	0		+			
ANR	5226601	Identifier	buf		5226249	0					
ANR	5226602	AdditiveExpression	i + 4		5226249	1		+			
ANR	5226603	Identifier	i		5226249	0					
ANR	5226604	PrimaryExpression	4		5226249	1					
ANR	5226605	Argument	strlen ( buf + i + 4 ) + 1		5226249	2					
ANR	5226606	AdditiveExpression	strlen ( buf + i + 4 ) + 1		5226249	0		+			
ANR	5226607	CallExpression	strlen ( buf + i + 4 )		5226249	0					
ANR	5226608	Callee	strlen		5226249	0					
ANR	5226609	Identifier	strlen		5226249	0					
ANR	5226610	ArgumentList	buf + i + 4		5226249	1					
ANR	5226611	Argument	buf + i + 4		5226249	0					
ANR	5226612	AdditiveExpression	buf + i + 4		5226249	0		+			
ANR	5226613	Identifier	buf		5226249	0					
ANR	5226614	AdditiveExpression	i + 4		5226249	1		+			
ANR	5226615	Identifier	i		5226249	0					
ANR	5226616	PrimaryExpression	4		5226249	1					
ANR	5226617	PrimaryExpression	1		5226249	1					
ANR	5226618	ElseStatement	else		5226249	0					
ANR	5226619	IfStatement	if ( IS_OCTAL ( buf [ i + 1 ] ) )		5226249	0					
ANR	5226620	Condition	IS_OCTAL ( buf [ i + 1 ] )	1150:13:24171:24191	5226249	0	True				
ANR	5226621	CallExpression	IS_OCTAL ( buf [ i + 1 ] )		5226249	0					
ANR	5226622	Callee	IS_OCTAL		5226249	0					
ANR	5226623	Identifier	IS_OCTAL		5226249	0					
ANR	5226624	ArgumentList	buf [ i + 1 ]		5226249	1					
ANR	5226625	Argument	buf [ i + 1 ]		5226249	0					
ANR	5226626	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226627	Identifier	buf		5226249	0					
ANR	5226628	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226629	Identifier	i		5226249	0					
ANR	5226630	PrimaryExpression	1		5226249	1					
ANR	5226631	CompoundStatement		37:3:1060:1078	5226249	1					
ANR	5226632	IdentifierDeclStatement	int num_digits = 1 ;	1151:3:24199:24217	5226249	0	True				
ANR	5226633	IdentifierDecl	num_digits = 1		5226249	0					
ANR	5226634	IdentifierDeclType	int		5226249	0					
ANR	5226635	Identifier	num_digits		5226249	1					
ANR	5226636	AssignmentExpression	num_digits = 1		5226249	2		=			
ANR	5226637	Identifier	num_digits		5226249	0					
ANR	5226638	PrimaryExpression	1		5226249	1					
ANR	5226639	ExpressionStatement	buf [ i ] = buf [ i + 1 ] - '0'	1152:3:24222:24247	5226249	1	True				
ANR	5226640	AssignmentExpression	buf [ i ] = buf [ i + 1 ] - '0'		5226249	0		=			
ANR	5226641	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226642	Identifier	buf		5226249	0					
ANR	5226643	Identifier	i		5226249	1					
ANR	5226644	AdditiveExpression	buf [ i + 1 ] - '0'		5226249	1		-			
ANR	5226645	ArrayIndexing	buf [ i + 1 ]		5226249	0					
ANR	5226646	Identifier	buf		5226249	0					
ANR	5226647	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226648	Identifier	i		5226249	0					
ANR	5226649	PrimaryExpression	1		5226249	1					
ANR	5226650	PrimaryExpression	'0'		5226249	1					
ANR	5226651	IfStatement	if ( IS_OCTAL ( buf [ i + 2 ] ) )		5226249	2					
ANR	5226652	Condition	IS_OCTAL ( buf [ i + 2 ] )	1153:7:24256:24276	5226249	0	True				
ANR	5226653	CallExpression	IS_OCTAL ( buf [ i + 2 ] )		5226249	0					
ANR	5226654	Callee	IS_OCTAL		5226249	0					
ANR	5226655	Identifier	IS_OCTAL		5226249	0					
ANR	5226656	ArgumentList	buf [ i + 2 ]		5226249	1					
ANR	5226657	Argument	buf [ i + 2 ]		5226249	0					
ANR	5226658	ArrayIndexing	buf [ i + 2 ]		5226249	0					
ANR	5226659	Identifier	buf		5226249	0					
ANR	5226660	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226661	Identifier	i		5226249	0					
ANR	5226662	PrimaryExpression	2		5226249	1					
ANR	5226663	CompoundStatement		39:30:1140:1140	5226249	1					
ANR	5226664	ExpressionStatement	num_digits ++	1154:4:24285:24297	5226249	0	True				
ANR	5226665	PostIncDecOperationExpression	num_digits ++		5226249	0					
ANR	5226666	Identifier	num_digits		5226249	0					
ANR	5226667	IncDec	++		5226249	1					
ANR	5226668	ExpressionStatement	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )	1155:4:24303:24348	5226249	1	True				
ANR	5226669	AssignmentExpression	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )		5226249	0		=			
ANR	5226670	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226671	Identifier	buf		5226249	0					
ANR	5226672	Identifier	i		5226249	1					
ANR	5226673	AdditiveExpression	( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )		5226249	1		+			
ANR	5226674	MultiplicativeExpression	( ut8 ) buf [ i ] * 8		5226249	0		*			
ANR	5226675	CastExpression	( ut8 ) buf [ i ]		5226249	0					
ANR	5226676	CastTarget	ut8		5226249	0					
ANR	5226677	ArrayIndexing	buf [ i ]		5226249	1					
ANR	5226678	Identifier	buf		5226249	0					
ANR	5226679	Identifier	i		5226249	1					
ANR	5226680	PrimaryExpression	8		5226249	1					
ANR	5226681	AdditiveExpression	buf [ i + 2 ] - '0'		5226249	1		-			
ANR	5226682	ArrayIndexing	buf [ i + 2 ]		5226249	0					
ANR	5226683	Identifier	buf		5226249	0					
ANR	5226684	AdditiveExpression	i + 2		5226249	1		+			
ANR	5226685	Identifier	i		5226249	0					
ANR	5226686	PrimaryExpression	2		5226249	1					
ANR	5226687	PrimaryExpression	'0'		5226249	1					
ANR	5226688	IfStatement	if ( IS_OCTAL ( buf [ i + 3 ] ) )		5226249	2					
ANR	5226689	Condition	IS_OCTAL ( buf [ i + 3 ] )	1156:8:24358:24378	5226249	0	True				
ANR	5226690	CallExpression	IS_OCTAL ( buf [ i + 3 ] )		5226249	0					
ANR	5226691	Callee	IS_OCTAL		5226249	0					
ANR	5226692	Identifier	IS_OCTAL		5226249	0					
ANR	5226693	ArgumentList	buf [ i + 3 ]		5226249	1					
ANR	5226694	Argument	buf [ i + 3 ]		5226249	0					
ANR	5226695	ArrayIndexing	buf [ i + 3 ]		5226249	0					
ANR	5226696	Identifier	buf		5226249	0					
ANR	5226697	AdditiveExpression	i + 3		5226249	1		+			
ANR	5226698	Identifier	i		5226249	0					
ANR	5226699	PrimaryExpression	3		5226249	1					
ANR	5226700	CompoundStatement		42:31:1242:1242	5226249	1					
ANR	5226701	ExpressionStatement	num_digits ++	1157:5:24388:24400	5226249	0	True				
ANR	5226702	PostIncDecOperationExpression	num_digits ++		5226249	0					
ANR	5226703	Identifier	num_digits		5226249	0					
ANR	5226704	IncDec	++		5226249	1					
ANR	5226705	ExpressionStatement	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )	1158:5:24407:24452	5226249	1	True				
ANR	5226706	AssignmentExpression	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )		5226249	0		=			
ANR	5226707	ArrayIndexing	buf [ i ]		5226249	0					
ANR	5226708	Identifier	buf		5226249	0					
ANR	5226709	Identifier	i		5226249	1					
ANR	5226710	AdditiveExpression	( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )		5226249	1		+			
ANR	5226711	MultiplicativeExpression	( ut8 ) buf [ i ] * 8		5226249	0		*			
ANR	5226712	CastExpression	( ut8 ) buf [ i ]		5226249	0					
ANR	5226713	CastTarget	ut8		5226249	0					
ANR	5226714	ArrayIndexing	buf [ i ]		5226249	1					
ANR	5226715	Identifier	buf		5226249	0					
ANR	5226716	Identifier	i		5226249	1					
ANR	5226717	PrimaryExpression	8		5226249	1					
ANR	5226718	AdditiveExpression	buf [ i + 3 ] - '0'		5226249	1		-			
ANR	5226719	ArrayIndexing	buf [ i + 3 ]		5226249	0					
ANR	5226720	Identifier	buf		5226249	0					
ANR	5226721	AdditiveExpression	i + 3		5226249	1		+			
ANR	5226722	Identifier	i		5226249	0					
ANR	5226723	PrimaryExpression	3		5226249	1					
ANR	5226724	PrimaryExpression	'0'		5226249	1					
ANR	5226725	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 1 + num_digits , strlen ( buf + i + 1 + num_digits ) + 1 )"	1161:3:24468:24566	5226249	3	True				
ANR	5226726	CallExpression	"memmove ( buf + i + 1 , buf + i + 1 + num_digits , strlen ( buf + i + 1 + num_digits ) + 1 )"		5226249	0					
ANR	5226727	Callee	memmove		5226249	0					
ANR	5226728	Identifier	memmove		5226249	0					
ANR	5226729	ArgumentList	buf + i + 1		5226249	1					
ANR	5226730	Argument	buf + i + 1		5226249	0					
ANR	5226731	AdditiveExpression	buf + i + 1		5226249	0		+			
ANR	5226732	Identifier	buf		5226249	0					
ANR	5226733	AdditiveExpression	i + 1		5226249	1		+			
ANR	5226734	Identifier	i		5226249	0					
ANR	5226735	PrimaryExpression	1		5226249	1					
ANR	5226736	Argument	buf + i + 1 + num_digits		5226249	1					
ANR	5226737	AdditiveExpression	buf + i + 1 + num_digits		5226249	0		+			
ANR	5226738	Identifier	buf		5226249	0					
ANR	5226739	AdditiveExpression	i + 1 + num_digits		5226249	1		+			
ANR	5226740	Identifier	i		5226249	0					
ANR	5226741	AdditiveExpression	1 + num_digits		5226249	1		+			
ANR	5226742	PrimaryExpression	1		5226249	0					
ANR	5226743	Identifier	num_digits		5226249	1					
ANR	5226744	Argument	strlen ( buf + i + 1 + num_digits ) + 1		5226249	2					
ANR	5226745	AdditiveExpression	strlen ( buf + i + 1 + num_digits ) + 1		5226249	0		+			
ANR	5226746	CallExpression	strlen ( buf + i + 1 + num_digits )		5226249	0					
ANR	5226747	Callee	strlen		5226249	0					
ANR	5226748	Identifier	strlen		5226249	0					
ANR	5226749	ArgumentList	buf + i + 1 + num_digits		5226249	1					
ANR	5226750	Argument	buf + i + 1 + num_digits		5226249	0					
ANR	5226751	AdditiveExpression	buf + i + 1 + num_digits		5226249	0		+			
ANR	5226752	Identifier	buf		5226249	0					
ANR	5226753	AdditiveExpression	i + 1 + num_digits		5226249	1		+			
ANR	5226754	Identifier	i		5226249	0					
ANR	5226755	AdditiveExpression	1 + num_digits		5226249	1		+			
ANR	5226756	PrimaryExpression	1		5226249	0					
ANR	5226757	Identifier	num_digits		5226249	1					
ANR	5226758	PrimaryExpression	1		5226249	1					
ANR	5226759	ElseStatement	else		5226249	0					
ANR	5226760	CompoundStatement		49:9:1438:1438	5226249	0					
ANR	5226761	ExpressionStatement	"eprintf ( ""'\\\\x' expected.\\n"" )"	1164:3:24582:24611	5226249	0	True				
ANR	5226762	CallExpression	"eprintf ( ""'\\\\x' expected.\\n"" )"		5226249	0					
ANR	5226763	Callee	eprintf		5226249	0					
ANR	5226764	Identifier	eprintf		5226249	0					
ANR	5226765	ArgumentList	"""'\\\\x' expected.\\n"""		5226249	1					
ANR	5226766	Argument	"""'\\\\x' expected.\\n"""		5226249	0					
ANR	5226767	PrimaryExpression	"""'\\\\x' expected.\\n"""		5226249	0					
ANR	5226768	ReturnStatement	return 0 ;	1165:3:24616:24624	5226249	1	True				
ANR	5226769	PrimaryExpression	0		5226249	0					
ANR	5226770	ReturnStatement	return i ;	1168:1:24641:24649	5226249	4	True				
ANR	5226771	Identifier	i		5226249	0					
ANR	5226772	ReturnType	R_API int		5226249	1					
ANR	5226773	Identifier	r_str_unescape		5226249	2					
ANR	5226774	ParameterList	char * buf		5226249	3					
ANR	5226775	Parameter	char * buf	1115:25:23127:23135	5226249	0	True				
ANR	5226776	ParameterType	char *		5226249	0					
ANR	5226777	Identifier	buf		5226249	1					
ANR	5226778	CFGEntryNode	ENTRY		5226249		True				
ANR	5226779	CFGExitNode	EXIT		5226249		True				
ANR	5226780	Symbol	* buf		5226249						
ANR	5226781	Symbol	err		5226249						
ANR	5226782	Symbol	ch		5226249						
ANR	5226783	Symbol	IS_OCTAL		5226249						
ANR	5226784	Symbol	i		5226249						
ANR	5226785	Symbol	r_hex_to_byte		5226249						
ANR	5226786	Symbol	ch2		5226249						
ANR	5226787	Symbol	& ch		5226249						
ANR	5226788	Symbol	strlen		5226249						
ANR	5226789	Symbol	buf		5226249						
ANR	5226790	Symbol	* i		5226249						
ANR	5226791	Symbol	& ch2		5226249						
ANR	5226792	Symbol	num_digits		5226249						
ANR	5226793	Function	r_str_sanitize	1171:0:24654:24954							
ANR	5226794	FunctionDef	r_str_sanitize (char * c)		5226793	0					
ANR	5226795	CompoundStatement		1171:35:24689:24954	5226793	0					
ANR	5226796	IdentifierDeclStatement	char * d = c ;	1172:1:24692:24703	5226793	0	True				
ANR	5226797	IdentifierDecl	* d = c		5226793	0					
ANR	5226798	IdentifierDeclType	char *		5226793	0					
ANR	5226799	Identifier	d		5226793	1					
ANR	5226800	AssignmentExpression	* d = c		5226793	2		=			
ANR	5226801	Identifier	c		5226793	0					
ANR	5226802	Identifier	c		5226793	1					
ANR	5226803	IfStatement	if ( d )		5226793	1					
ANR	5226804	Condition	d	1173:5:24710:24710	5226793	0	True				
ANR	5226805	Identifier	d		5226793	0					
ANR	5226806	CompoundStatement		3:9:24:24	5226793	1					
ANR	5226807	ForStatement	"for ( ; * d ; c ++ , d ++ )"		5226793	0					
ANR	5226808	Condition	* d	1174:9:24725:24726	5226793	0	True				
ANR	5226809	UnaryOperationExpression	* d		5226793	0					
ANR	5226810	UnaryOperator	*		5226793	0					
ANR	5226811	Identifier	d		5226793	1					
ANR	5226812	Expression	"c ++ , d ++"	1174:13:24729:24736	5226793	1	True				
ANR	5226813	PostIncDecOperationExpression	c ++		5226793	0					
ANR	5226814	Identifier	c		5226793	0					
ANR	5226815	IncDec	++		5226793	1					
ANR	5226816	PostIncDecOperationExpression	d ++		5226793	1					
ANR	5226817	Identifier	d		5226793	0					
ANR	5226818	IncDec	++		5226793	1					
ANR	5226819	CompoundStatement		4:23:49:49	5226793	2					
ANR	5226820	SwitchStatement	switch ( * d )		5226793	0					
ANR	5226821	Condition	* d	1175:11:24752:24753	5226793	0	True				
ANR	5226822	UnaryOperationExpression	* d		5226793	0					
ANR	5226823	UnaryOperator	*		5226793	0					
ANR	5226824	Identifier	d		5226793	1					
ANR	5226825	CompoundStatement		5:15:66:66	5226793	1					
ANR	5226826	Label	case '`' :	1176:3:24761:24769	5226793	0	True				
ANR	5226827	Label	case '$' :	1177:3:24774:24782	5226793	1	True				
ANR	5226828	Label	case '{' :	1178:3:24787:24795	5226793	2	True				
ANR	5226829	Label	case '}' :	1179:3:24800:24808	5226793	3	True				
ANR	5226830	Label	case '~' :	1180:3:24813:24821	5226793	4	True				
ANR	5226831	Label	case '|' :	1181:3:24826:24834	5226793	5	True				
ANR	5226832	Label	case ';' :	1182:3:24839:24847	5226793	6	True				
ANR	5226833	Label	case '#' :	1183:3:24852:24860	5226793	7	True				
ANR	5226834	Label	case '@' :	1184:3:24865:24873	5226793	8	True				
ANR	5226835	Label	case '&' :	1185:3:24878:24886	5226793	9	True				
ANR	5226836	Label	case '<' :	1186:3:24891:24899	5226793	10	True				
ANR	5226837	Label	case '>' :	1187:3:24904:24912	5226793	11	True				
ANR	5226838	ExpressionStatement	* c = '_'	1188:4:24918:24926	5226793	12	True				
ANR	5226839	AssignmentExpression	* c = '_'		5226793	0		=			
ANR	5226840	UnaryOperationExpression	* c		5226793	0					
ANR	5226841	UnaryOperator	*		5226793	0					
ANR	5226842	Identifier	c		5226793	1					
ANR	5226843	PrimaryExpression	'_'		5226793	1					
ANR	5226844	ContinueStatement	continue ;	1189:4:24932:24940	5226793	13	True				
ANR	5226845	ReturnType	R_API void		5226793	1					
ANR	5226846	Identifier	r_str_sanitize		5226793	2					
ANR	5226847	ParameterList	char * c		5226793	3					
ANR	5226848	Parameter	char * c	1171:26:24680:24686	5226793	0	True				
ANR	5226849	ParameterType	char *		5226793	0					
ANR	5226850	Identifier	c		5226793	1					
ANR	5226851	CFGEntryNode	ENTRY		5226793		True				
ANR	5226852	CFGExitNode	EXIT		5226793		True				
ANR	5226853	Symbol	c		5226793						
ANR	5226854	Symbol	d		5226793						
ANR	5226855	Symbol	* c		5226793						
ANR	5226856	Symbol	* d		5226793						
ANR	5226857	Function	r_str_sanitize_sdb_key	1195:0:24957:25382							
ANR	5226858	FunctionDef	r_str_sanitize_sdb_key (const char * s)		5226857	0					
ANR	5226859	CompoundStatement		1195:50:25007:25382	5226857	0					
ANR	5226860	IfStatement	if ( ! s || ! * s )		5226857	0					
ANR	5226861	Condition	! s || ! * s	1196:5:25014:25022	5226857	0	True				
ANR	5226862	OrExpression	! s || ! * s		5226857	0		||			
ANR	5226863	UnaryOperationExpression	! s		5226857	0					
ANR	5226864	UnaryOperator	!		5226857	0					
ANR	5226865	Identifier	s		5226857	1					
ANR	5226866	UnaryOperationExpression	! * s		5226857	1					
ANR	5226867	UnaryOperator	!		5226857	0					
ANR	5226868	UnaryOperationExpression	* s		5226857	1					
ANR	5226869	UnaryOperator	*		5226857	0					
ANR	5226870	Identifier	s		5226857	1					
ANR	5226871	CompoundStatement		2:16:17:17	5226857	1					
ANR	5226872	ReturnStatement	return NULL ;	1197:2:25029:25040	5226857	0	True				
ANR	5226873	Identifier	NULL		5226857	0					
ANR	5226874	IdentifierDeclStatement	size_t len = strlen ( s ) ;	1199:1:25046:25069	5226857	1	True				
ANR	5226875	IdentifierDecl	len = strlen ( s )		5226857	0					
ANR	5226876	IdentifierDeclType	size_t		5226857	0					
ANR	5226877	Identifier	len		5226857	1					
ANR	5226878	AssignmentExpression	len = strlen ( s )		5226857	2		=			
ANR	5226879	Identifier	len		5226857	0					
ANR	5226880	CallExpression	strlen ( s )		5226857	1					
ANR	5226881	Callee	strlen		5226857	0					
ANR	5226882	Identifier	strlen		5226857	0					
ANR	5226883	ArgumentList	s		5226857	1					
ANR	5226884	Argument	s		5226857	0					
ANR	5226885	Identifier	s		5226857	0					
ANR	5226886	IdentifierDeclStatement	char * ret = malloc ( len + 1 ) ;	1200:1:25072:25100	5226857	2	True				
ANR	5226887	IdentifierDecl	* ret = malloc ( len + 1 )		5226857	0					
ANR	5226888	IdentifierDeclType	char *		5226857	0					
ANR	5226889	Identifier	ret		5226857	1					
ANR	5226890	AssignmentExpression	* ret = malloc ( len + 1 )		5226857	2		=			
ANR	5226891	Identifier	ret		5226857	0					
ANR	5226892	CallExpression	malloc ( len + 1 )		5226857	1					
ANR	5226893	Callee	malloc		5226857	0					
ANR	5226894	Identifier	malloc		5226857	0					
ANR	5226895	ArgumentList	len + 1		5226857	1					
ANR	5226896	Argument	len + 1		5226857	0					
ANR	5226897	AdditiveExpression	len + 1		5226857	0		+			
ANR	5226898	Identifier	len		5226857	0					
ANR	5226899	PrimaryExpression	1		5226857	1					
ANR	5226900	IfStatement	if ( ! ret )		5226857	3					
ANR	5226901	Condition	! ret	1201:5:25107:25110	5226857	0	True				
ANR	5226902	UnaryOperationExpression	! ret		5226857	0					
ANR	5226903	UnaryOperator	!		5226857	0					
ANR	5226904	Identifier	ret		5226857	1					
ANR	5226905	CompoundStatement		7:11:105:105	5226857	1					
ANR	5226906	ReturnStatement	return NULL ;	1202:2:25117:25128	5226857	0	True				
ANR	5226907	Identifier	NULL		5226857	0					
ANR	5226908	IdentifierDeclStatement	char * cur = ret ;	1204:1:25134:25149	5226857	4	True				
ANR	5226909	IdentifierDecl	* cur = ret		5226857	0					
ANR	5226910	IdentifierDeclType	char *		5226857	0					
ANR	5226911	Identifier	cur		5226857	1					
ANR	5226912	AssignmentExpression	* cur = ret		5226857	2		=			
ANR	5226913	Identifier	ret		5226857	0					
ANR	5226914	Identifier	ret		5226857	1					
ANR	5226915	WhileStatement	while ( len > 0 )		5226857	5					
ANR	5226916	Condition	len > 0	1205:8:25159:25165	5226857	0	True				
ANR	5226917	RelationalExpression	len > 0		5226857	0		>			
ANR	5226918	Identifier	len		5226857	0					
ANR	5226919	PrimaryExpression	0		5226857	1					
ANR	5226920	CompoundStatement		12:2:164:175	5226857	1					
ANR	5226921	IdentifierDeclStatement	char c = * s ;	1206:2:25172:25183	5226857	0	True				
ANR	5226922	IdentifierDecl	c = * s		5226857	0					
ANR	5226923	IdentifierDeclType	char		5226857	0					
ANR	5226924	Identifier	c		5226857	1					
ANR	5226925	AssignmentExpression	c = * s		5226857	2		=			
ANR	5226926	Identifier	c		5226857	0					
ANR	5226927	UnaryOperationExpression	* s		5226857	1					
ANR	5226928	UnaryOperator	*		5226857	0					
ANR	5226929	Identifier	s		5226857	1					
ANR	5226930	IfStatement	if ( ! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':' )		5226857	1					
ANR	5226931	Condition	! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'	1207:6:25191:25294	5226857	0	True				
ANR	5226932	AndExpression	! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		5226857	0		&&			
ANR	5226933	UnaryOperationExpression	! ( c >= 'a' && c <= 'z' )		5226857	0					
ANR	5226934	UnaryOperator	!		5226857	0					
ANR	5226935	AndExpression	c >= 'a' && c <= 'z'		5226857	1		&&			
ANR	5226936	RelationalExpression	c >= 'a'		5226857	0		>=			
ANR	5226937	Identifier	c		5226857	0					
ANR	5226938	PrimaryExpression	'a'		5226857	1					
ANR	5226939	RelationalExpression	c <= 'z'		5226857	1		<=			
ANR	5226940	Identifier	c		5226857	0					
ANR	5226941	PrimaryExpression	'z'		5226857	1					
ANR	5226942	AndExpression	! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		5226857	1		&&			
ANR	5226943	UnaryOperationExpression	! ( c >= 'A' && c <= 'Z' )		5226857	0					
ANR	5226944	UnaryOperator	!		5226857	0					
ANR	5226945	AndExpression	c >= 'A' && c <= 'Z'		5226857	1		&&			
ANR	5226946	RelationalExpression	c >= 'A'		5226857	0		>=			
ANR	5226947	Identifier	c		5226857	0					
ANR	5226948	PrimaryExpression	'A'		5226857	1					
ANR	5226949	RelationalExpression	c <= 'Z'		5226857	1		<=			
ANR	5226950	Identifier	c		5226857	0					
ANR	5226951	PrimaryExpression	'Z'		5226857	1					
ANR	5226952	AndExpression	! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		5226857	1		&&			
ANR	5226953	UnaryOperationExpression	! ( c >= '0' && c <= '9' )		5226857	0					
ANR	5226954	UnaryOperator	!		5226857	0					
ANR	5226955	AndExpression	c >= '0' && c <= '9'		5226857	1		&&			
ANR	5226956	RelationalExpression	c >= '0'		5226857	0		>=			
ANR	5226957	Identifier	c		5226857	0					
ANR	5226958	PrimaryExpression	'0'		5226857	1					
ANR	5226959	RelationalExpression	c <= '9'		5226857	1		<=			
ANR	5226960	Identifier	c		5226857	0					
ANR	5226961	PrimaryExpression	'9'		5226857	1					
ANR	5226962	AndExpression	c != '_' && c != ':'		5226857	1		&&			
ANR	5226963	EqualityExpression	c != '_'		5226857	0		!=			
ANR	5226964	Identifier	c		5226857	0					
ANR	5226965	PrimaryExpression	'_'		5226857	1					
ANR	5226966	EqualityExpression	c != ':'		5226857	1		!=			
ANR	5226967	Identifier	c		5226857	0					
ANR	5226968	PrimaryExpression	':'		5226857	1					
ANR	5226969	CompoundStatement		14:28:289:289	5226857	1					
ANR	5226970	ExpressionStatement	c = '_'	1209:3:25302:25309	5226857	0	True				
ANR	5226971	AssignmentExpression	c = '_'		5226857	0		=			
ANR	5226972	Identifier	c		5226857	0					
ANR	5226973	PrimaryExpression	'_'		5226857	1					
ANR	5226974	ExpressionStatement	* cur = c	1211:2:25317:25325	5226857	2	True				
ANR	5226975	AssignmentExpression	* cur = c		5226857	0		=			
ANR	5226976	UnaryOperationExpression	* cur		5226857	0					
ANR	5226977	UnaryOperator	*		5226857	0					
ANR	5226978	Identifier	cur		5226857	1					
ANR	5226979	Identifier	c		5226857	1					
ANR	5226980	ExpressionStatement	s ++	1212:2:25329:25332	5226857	3	True				
ANR	5226981	PostIncDecOperationExpression	s ++		5226857	0					
ANR	5226982	Identifier	s		5226857	0					
ANR	5226983	IncDec	++		5226857	1					
ANR	5226984	ExpressionStatement	cur ++	1213:2:25336:25341	5226857	4	True				
ANR	5226985	PostIncDecOperationExpression	cur ++		5226857	0					
ANR	5226986	Identifier	cur		5226857	0					
ANR	5226987	IncDec	++		5226857	1					
ANR	5226988	ExpressionStatement	len --	1214:2:25345:25350	5226857	5	True				
ANR	5226989	PostIncDecOperationExpression	len --		5226857	0					
ANR	5226990	Identifier	len		5226857	0					
ANR	5226991	IncDec	--		5226857	1					
ANR	5226992	ExpressionStatement	* cur = '\\0'	1216:1:25356:25367	5226857	6	True				
ANR	5226993	AssignmentExpression	* cur = '\\0'		5226857	0		=			
ANR	5226994	UnaryOperationExpression	* cur		5226857	0					
ANR	5226995	UnaryOperator	*		5226857	0					
ANR	5226996	Identifier	cur		5226857	1					
ANR	5226997	PrimaryExpression	'\\0'		5226857	1					
ANR	5226998	ReturnStatement	return ret ;	1217:1:25370:25380	5226857	7	True				
ANR	5226999	Identifier	ret		5226857	0					
ANR	5227000	ReturnType	R_API char *		5226857	1					
ANR	5227001	Identifier	r_str_sanitize_sdb_key		5226857	2					
ANR	5227002	ParameterList	const char * s		5226857	3					
ANR	5227003	Parameter	const char * s	1195:35:24992:25004	5226857	0	True				
ANR	5227004	ParameterType	const char *		5226857	0					
ANR	5227005	Identifier	s		5226857	1					
ANR	5227006	CFGEntryNode	ENTRY		5226857		True				
ANR	5227007	CFGExitNode	EXIT		5226857		True				
ANR	5227008	Symbol	ret		5226857						
ANR	5227009	Symbol	strlen		5226857						
ANR	5227010	Symbol	malloc		5226857						
ANR	5227011	Symbol	cur		5226857						
ANR	5227012	Symbol	s		5226857						
ANR	5227013	Symbol	NULL		5226857						
ANR	5227014	Symbol	c		5226857						
ANR	5227015	Symbol	len		5226857						
ANR	5227016	Symbol	* cur		5226857						
ANR	5227017	Symbol	* s		5226857						
ANR	5227018	Function	r_str_byte_escape	1220:0:25385:26311							
ANR	5227019	FunctionDef	"r_str_byte_escape (const char * p , char * * dst , int dot_nl , bool default_dot , bool esc_bslash)"		5227018	0					
ANR	5227020	CompoundStatement		1220:103:25488:26311	5227018	0					
ANR	5227021	IdentifierDeclStatement	char * q = * dst ;	1221:1:25491:25505	5227018	0	True				
ANR	5227022	IdentifierDecl	* q = * dst		5227018	0					
ANR	5227023	IdentifierDeclType	char *		5227018	0					
ANR	5227024	Identifier	q		5227018	1					
ANR	5227025	AssignmentExpression	* q = * dst		5227018	2		=			
ANR	5227026	Identifier	q		5227018	0					
ANR	5227027	UnaryOperationExpression	* dst		5227018	1					
ANR	5227028	UnaryOperator	*		5227018	0					
ANR	5227029	Identifier	dst		5227018	1					
ANR	5227030	SwitchStatement	switch ( * p )		5227018	1					
ANR	5227031	Condition	* p	1222:9:25516:25517	5227018	0	True				
ANR	5227032	UnaryOperationExpression	* p		5227018	0					
ANR	5227033	UnaryOperator	*		5227018	0					
ANR	5227034	Identifier	p		5227018	1					
ANR	5227035	CompoundStatement		3:13:31:31	5227018	1					
ANR	5227036	Label	case '\\n' :	1223:1:25523:25532	5227018	0	True				
ANR	5227037	ExpressionStatement	* q ++ = '\\\\'	1224:2:25536:25547	5227018	1	True				
ANR	5227038	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227039	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227040	UnaryOperator	*		5227018	0					
ANR	5227041	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227042	Identifier	q		5227018	0					
ANR	5227043	IncDec	++		5227018	1					
ANR	5227044	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227045	ExpressionStatement	* q ++ = dot_nl ? 'l' : 'n'	1225:2:25551:25576	5227018	2	True				
ANR	5227046	AssignmentExpression	* q ++ = dot_nl ? 'l' : 'n'		5227018	0		=			
ANR	5227047	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227048	UnaryOperator	*		5227018	0					
ANR	5227049	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227050	Identifier	q		5227018	0					
ANR	5227051	IncDec	++		5227018	1					
ANR	5227052	ConditionalExpression	dot_nl ? 'l' : 'n'		5227018	1					
ANR	5227053	Condition	dot_nl		5227018	0					
ANR	5227054	Identifier	dot_nl		5227018	0					
ANR	5227055	PrimaryExpression	'l'		5227018	1					
ANR	5227056	PrimaryExpression	'n'		5227018	2					
ANR	5227057	BreakStatement	break ;	1226:2:25580:25585	5227018	3	True				
ANR	5227058	Label	case '\\r' :	1227:1:25588:25597	5227018	4	True				
ANR	5227059	ExpressionStatement	* q ++ = '\\\\'	1228:2:25601:25612	5227018	5	True				
ANR	5227060	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227061	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227062	UnaryOperator	*		5227018	0					
ANR	5227063	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227064	Identifier	q		5227018	0					
ANR	5227065	IncDec	++		5227018	1					
ANR	5227066	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227067	ExpressionStatement	* q ++ = 'r'	1229:2:25616:25626	5227018	6	True				
ANR	5227068	AssignmentExpression	* q ++ = 'r'		5227018	0		=			
ANR	5227069	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227070	UnaryOperator	*		5227018	0					
ANR	5227071	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227072	Identifier	q		5227018	0					
ANR	5227073	IncDec	++		5227018	1					
ANR	5227074	PrimaryExpression	'r'		5227018	1					
ANR	5227075	BreakStatement	break ;	1230:2:25630:25635	5227018	7	True				
ANR	5227076	Label	case '\\\\' :	1231:1:25638:25647	5227018	8	True				
ANR	5227077	ExpressionStatement	* q ++ = '\\\\'	1232:2:25651:25662	5227018	9	True				
ANR	5227078	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227079	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227080	UnaryOperator	*		5227018	0					
ANR	5227081	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227082	Identifier	q		5227018	0					
ANR	5227083	IncDec	++		5227018	1					
ANR	5227084	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227085	IfStatement	if ( esc_bslash )		5227018	10					
ANR	5227086	Condition	esc_bslash	1233:6:25670:25679	5227018	0	True				
ANR	5227087	Identifier	esc_bslash		5227018	0					
ANR	5227088	CompoundStatement		14:18:193:193	5227018	1					
ANR	5227089	ExpressionStatement	* q ++ = '\\\\'	1234:3:25687:25698	5227018	0	True				
ANR	5227090	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227091	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227092	UnaryOperator	*		5227018	0					
ANR	5227093	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227094	Identifier	q		5227018	0					
ANR	5227095	IncDec	++		5227018	1					
ANR	5227096	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227097	BreakStatement	break ;	1236:2:25706:25711	5227018	11	True				
ANR	5227098	Label	case '\\t' :	1237:1:25714:25723	5227018	12	True				
ANR	5227099	ExpressionStatement	* q ++ = '\\\\'	1238:2:25727:25738	5227018	13	True				
ANR	5227100	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227101	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227102	UnaryOperator	*		5227018	0					
ANR	5227103	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227104	Identifier	q		5227018	0					
ANR	5227105	IncDec	++		5227018	1					
ANR	5227106	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227107	ExpressionStatement	* q ++ = 't'	1239:2:25742:25752	5227018	14	True				
ANR	5227108	AssignmentExpression	* q ++ = 't'		5227018	0		=			
ANR	5227109	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227110	UnaryOperator	*		5227018	0					
ANR	5227111	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227112	Identifier	q		5227018	0					
ANR	5227113	IncDec	++		5227018	1					
ANR	5227114	PrimaryExpression	't'		5227018	1					
ANR	5227115	BreakStatement	break ;	1240:2:25756:25761	5227018	15	True				
ANR	5227116	Label	"case '""' :"	1241:1:25764:25773	5227018	16	True				
ANR	5227117	ExpressionStatement	* q ++ = '\\\\'	1242:2:25777:25788	5227018	17	True				
ANR	5227118	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227119	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227120	UnaryOperator	*		5227018	0					
ANR	5227121	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227122	Identifier	q		5227018	0					
ANR	5227123	IncDec	++		5227018	1					
ANR	5227124	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227125	ExpressionStatement	"* q ++ = '""'"	1243:2:25792:25802	5227018	18	True				
ANR	5227126	AssignmentExpression	"* q ++ = '""'"		5227018	0		=			
ANR	5227127	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227128	UnaryOperator	*		5227018	0					
ANR	5227129	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227130	Identifier	q		5227018	0					
ANR	5227131	IncDec	++		5227018	1					
ANR	5227132	PrimaryExpression	"'""'"		5227018	1					
ANR	5227133	BreakStatement	break ;	1244:2:25806:25811	5227018	19	True				
ANR	5227134	Label	case '\\f' :	1245:1:25814:25823	5227018	20	True				
ANR	5227135	ExpressionStatement	* q ++ = '\\\\'	1246:2:25827:25838	5227018	21	True				
ANR	5227136	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227137	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227138	UnaryOperator	*		5227018	0					
ANR	5227139	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227140	Identifier	q		5227018	0					
ANR	5227141	IncDec	++		5227018	1					
ANR	5227142	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227143	ExpressionStatement	* q ++ = 'f'	1247:2:25842:25852	5227018	22	True				
ANR	5227144	AssignmentExpression	* q ++ = 'f'		5227018	0		=			
ANR	5227145	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227146	UnaryOperator	*		5227018	0					
ANR	5227147	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227148	Identifier	q		5227018	0					
ANR	5227149	IncDec	++		5227018	1					
ANR	5227150	PrimaryExpression	'f'		5227018	1					
ANR	5227151	BreakStatement	break ;	1248:2:25856:25861	5227018	23	True				
ANR	5227152	Label	case '\\b' :	1249:1:25864:25873	5227018	24	True				
ANR	5227153	ExpressionStatement	* q ++ = '\\\\'	1250:2:25877:25888	5227018	25	True				
ANR	5227154	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227155	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227156	UnaryOperator	*		5227018	0					
ANR	5227157	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227158	Identifier	q		5227018	0					
ANR	5227159	IncDec	++		5227018	1					
ANR	5227160	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227161	ExpressionStatement	* q ++ = 'b'	1251:2:25892:25902	5227018	26	True				
ANR	5227162	AssignmentExpression	* q ++ = 'b'		5227018	0		=			
ANR	5227163	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227164	UnaryOperator	*		5227018	0					
ANR	5227165	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227166	Identifier	q		5227018	0					
ANR	5227167	IncDec	++		5227018	1					
ANR	5227168	PrimaryExpression	'b'		5227018	1					
ANR	5227169	BreakStatement	break ;	1252:2:25906:25911	5227018	27	True				
ANR	5227170	Label	case '\\v' :	1253:1:25914:25923	5227018	28	True				
ANR	5227171	ExpressionStatement	* q ++ = '\\\\'	1254:2:25927:25938	5227018	29	True				
ANR	5227172	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227173	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227174	UnaryOperator	*		5227018	0					
ANR	5227175	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227176	Identifier	q		5227018	0					
ANR	5227177	IncDec	++		5227018	1					
ANR	5227178	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227179	ExpressionStatement	* q ++ = 'v'	1255:2:25942:25952	5227018	30	True				
ANR	5227180	AssignmentExpression	* q ++ = 'v'		5227018	0		=			
ANR	5227181	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227182	UnaryOperator	*		5227018	0					
ANR	5227183	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227184	Identifier	q		5227018	0					
ANR	5227185	IncDec	++		5227018	1					
ANR	5227186	PrimaryExpression	'v'		5227018	1					
ANR	5227187	BreakStatement	break ;	1256:2:25956:25961	5227018	31	True				
ANR	5227188	Label	case '\\a' :	1257:1:25964:25973	5227018	32	True				
ANR	5227189	ExpressionStatement	* q ++ = '\\\\'	1258:2:25977:25988	5227018	33	True				
ANR	5227190	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227191	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227192	UnaryOperator	*		5227018	0					
ANR	5227193	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227194	Identifier	q		5227018	0					
ANR	5227195	IncDec	++		5227018	1					
ANR	5227196	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227197	ExpressionStatement	* q ++ = 'a'	1259:2:25992:26002	5227018	34	True				
ANR	5227198	AssignmentExpression	* q ++ = 'a'		5227018	0		=			
ANR	5227199	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227200	UnaryOperator	*		5227018	0					
ANR	5227201	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227202	Identifier	q		5227018	0					
ANR	5227203	IncDec	++		5227018	1					
ANR	5227204	PrimaryExpression	'a'		5227018	1					
ANR	5227205	BreakStatement	break ;	1260:2:26006:26011	5227018	35	True				
ANR	5227206	Label	default :	1261:1:26014:26021	5227018	36	True				
ANR	5227207	Identifier	default		5227018	0					
ANR	5227208	IfStatement	if ( ! IS_PRINTABLE ( * p ) )		5227018	37					
ANR	5227209	Condition	! IS_PRINTABLE ( * p )	1263:6:26071:26088	5227018	0	True				
ANR	5227210	UnaryOperationExpression	! IS_PRINTABLE ( * p )		5227018	0					
ANR	5227211	UnaryOperator	!		5227018	0					
ANR	5227212	CallExpression	IS_PRINTABLE ( * p )		5227018	1					
ANR	5227213	Callee	IS_PRINTABLE		5227018	0					
ANR	5227214	Identifier	IS_PRINTABLE		5227018	0					
ANR	5227215	ArgumentList	* p		5227018	1					
ANR	5227216	Argument	* p		5227018	0					
ANR	5227217	UnaryOperationExpression	* p		5227018	0					
ANR	5227218	UnaryOperator	*		5227018	0					
ANR	5227219	Identifier	p		5227018	1					
ANR	5227220	CompoundStatement		44:26:602:602	5227018	1					
ANR	5227221	IfStatement	if ( default_dot )		5227018	0					
ANR	5227222	Condition	default_dot	1264:7:26100:26110	5227018	0	True				
ANR	5227223	Identifier	default_dot		5227018	0					
ANR	5227224	CompoundStatement		45:20:624:624	5227018	1					
ANR	5227225	ExpressionStatement	* q ++ = '.'	1265:4:26119:26129	5227018	0	True				
ANR	5227226	AssignmentExpression	* q ++ = '.'		5227018	0		=			
ANR	5227227	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227228	UnaryOperator	*		5227018	0					
ANR	5227229	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227230	Identifier	q		5227018	0					
ANR	5227231	IncDec	++		5227018	1					
ANR	5227232	PrimaryExpression	'.'		5227018	1					
ANR	5227233	ElseStatement	else		5227018	0					
ANR	5227234	CompoundStatement		47:10:652:652	5227018	0					
ANR	5227235	ExpressionStatement	* q ++ = '\\\\'	1267:4:26147:26158	5227018	0	True				
ANR	5227236	AssignmentExpression	* q ++ = '\\\\'		5227018	0		=			
ANR	5227237	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227238	UnaryOperator	*		5227018	0					
ANR	5227239	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227240	Identifier	q		5227018	0					
ANR	5227241	IncDec	++		5227018	1					
ANR	5227242	PrimaryExpression	'\\\\'		5227018	1					
ANR	5227243	ExpressionStatement	* q ++ = 'x'	1268:4:26164:26174	5227018	1	True				
ANR	5227244	AssignmentExpression	* q ++ = 'x'		5227018	0		=			
ANR	5227245	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227246	UnaryOperator	*		5227018	0					
ANR	5227247	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227248	Identifier	q		5227018	0					
ANR	5227249	IncDec	++		5227018	1					
ANR	5227250	PrimaryExpression	'x'		5227018	1					
ANR	5227251	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1269:4:26180:26220	5227018	2	True				
ANR	5227252	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5227018	0		=			
ANR	5227253	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227254	UnaryOperator	*		5227018	0					
ANR	5227255	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227256	Identifier	q		5227018	0					
ANR	5227257	IncDec	++		5227018	1					
ANR	5227258	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5227018	1					
ANR	5227259	PrimaryExpression	"""0123456789abcdef"""		5227018	0					
ANR	5227260	BitAndExpression	* p >> 4 & 0xf		5227018	1		&			
ANR	5227261	ShiftExpression	* p >> 4		5227018	0		>>			
ANR	5227262	UnaryOperationExpression	* p		5227018	0					
ANR	5227263	UnaryOperator	*		5227018	0					
ANR	5227264	Identifier	p		5227018	1					
ANR	5227265	PrimaryExpression	4		5227018	1					
ANR	5227266	PrimaryExpression	0xf		5227018	1					
ANR	5227267	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1270:4:26226:26261	5227018	3	True				
ANR	5227268	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		5227018	0		=			
ANR	5227269	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227270	UnaryOperator	*		5227018	0					
ANR	5227271	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227272	Identifier	q		5227018	0					
ANR	5227273	IncDec	++		5227018	1					
ANR	5227274	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		5227018	1					
ANR	5227275	PrimaryExpression	"""0123456789abcdef"""		5227018	0					
ANR	5227276	BitAndExpression	* p & 0xf		5227018	1		&			
ANR	5227277	UnaryOperationExpression	* p		5227018	0					
ANR	5227278	UnaryOperator	*		5227018	0					
ANR	5227279	Identifier	p		5227018	1					
ANR	5227280	PrimaryExpression	0xf		5227018	1					
ANR	5227281	ElseStatement	else		5227018	0					
ANR	5227282	CompoundStatement		53:9:788:788	5227018	0					
ANR	5227283	ExpressionStatement	* q ++ = * p	1273:3:26282:26291	5227018	0	True				
ANR	5227284	AssignmentExpression	* q ++ = * p		5227018	0		=			
ANR	5227285	UnaryOperationExpression	* q ++		5227018	0					
ANR	5227286	UnaryOperator	*		5227018	0					
ANR	5227287	PostIncDecOperationExpression	q ++		5227018	1					
ANR	5227288	Identifier	q		5227018	0					
ANR	5227289	IncDec	++		5227018	1					
ANR	5227290	UnaryOperationExpression	* p		5227018	1					
ANR	5227291	UnaryOperator	*		5227018	0					
ANR	5227292	Identifier	p		5227018	1					
ANR	5227293	ExpressionStatement	* dst = q	1276:1:26301:26309	5227018	2	True				
ANR	5227294	AssignmentExpression	* dst = q		5227018	0		=			
ANR	5227295	UnaryOperationExpression	* dst		5227018	0					
ANR	5227296	UnaryOperator	*		5227018	0					
ANR	5227297	Identifier	dst		5227018	1					
ANR	5227298	Identifier	q		5227018	1					
ANR	5227299	ReturnType	R_API void		5227018	1					
ANR	5227300	Identifier	r_str_byte_escape		5227018	2					
ANR	5227301	ParameterList	"const char * p , char * * dst , int dot_nl , bool default_dot , bool esc_bslash"		5227018	3					
ANR	5227302	Parameter	const char * p	1220:29:25414:25426	5227018	0	True				
ANR	5227303	ParameterType	const char *		5227018	0					
ANR	5227304	Identifier	p		5227018	1					
ANR	5227305	Parameter	char * * dst	1220:44:25429:25438	5227018	1	True				
ANR	5227306	ParameterType	char * *		5227018	0					
ANR	5227307	Identifier	dst		5227018	1					
ANR	5227308	Parameter	int dot_nl	1220:56:25441:25450	5227018	2	True				
ANR	5227309	ParameterType	int		5227018	0					
ANR	5227310	Identifier	dot_nl		5227018	1					
ANR	5227311	Parameter	bool default_dot	1220:68:25453:25468	5227018	3	True				
ANR	5227312	ParameterType	bool		5227018	0					
ANR	5227313	Identifier	default_dot		5227018	1					
ANR	5227314	Parameter	bool esc_bslash	1220:86:25471:25485	5227018	4	True				
ANR	5227315	ParameterType	bool		5227018	0					
ANR	5227316	Identifier	esc_bslash		5227018	1					
ANR	5227317	CFGEntryNode	ENTRY		5227018		True				
ANR	5227318	CFGExitNode	EXIT		5227018		True				
ANR	5227319	Symbol	p		5227018						
ANR	5227320	Symbol	* dst		5227018						
ANR	5227321	Symbol	q		5227018						
ANR	5227322	Symbol	dot_nl		5227018						
ANR	5227323	Symbol	default_dot		5227018						
ANR	5227324	Symbol	IS_PRINTABLE		5227018						
ANR	5227325	Symbol	dst		5227018						
ANR	5227326	Symbol	* q ++		5227018						
ANR	5227327	Symbol	esc_bslash		5227018						
ANR	5227328	Symbol	* p		5227018						
ANR	5227329	Symbol	* * p		5227018						
ANR	5227330	Function	r_str_escape_	1281:0:26420:27498							
ANR	5227331	FunctionDef	"r_str_escape_ (const char * buf , int dot_nl , bool parse_esc_seq , bool ign_esc_seq , bool show_asciidot , bool esc_bslash)"		5227330	0					
ANR	5227332	CompoundStatement		1281:131:26551:27498	5227330	0					
ANR	5227333	ExpressionStatement	"r_return_val_if_fail ( buf , NULL )"	1282:1:26554:26586	5227330	0	True				
ANR	5227334	CallExpression	"r_return_val_if_fail ( buf , NULL )"		5227330	0					
ANR	5227335	Callee	r_return_val_if_fail		5227330	0					
ANR	5227336	Identifier	r_return_val_if_fail		5227330	0					
ANR	5227337	ArgumentList	buf		5227330	1					
ANR	5227338	Argument	buf		5227330	0					
ANR	5227339	Identifier	buf		5227330	0					
ANR	5227340	Argument	NULL		5227330	1					
ANR	5227341	Identifier	NULL		5227330	0					
ANR	5227342	IdentifierDeclStatement	char * new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) ) ;	1286:1:26722:26789	5227330	1	True				
ANR	5227343	IdentifierDecl	* new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		5227330	0					
ANR	5227344	IdentifierDeclType	char *		5227330	0					
ANR	5227345	Identifier	new_buf		5227330	1					
ANR	5227346	AssignmentExpression	* new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		5227330	2		=			
ANR	5227347	Identifier	new_buf		5227330	0					
ANR	5227348	CallExpression	malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		5227330	1					
ANR	5227349	Callee	malloc		5227330	0					
ANR	5227350	Identifier	malloc		5227330	0					
ANR	5227351	ArgumentList	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		5227330	1					
ANR	5227352	Argument	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		5227330	0					
ANR	5227353	AdditiveExpression	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		5227330	0		+			
ANR	5227354	PrimaryExpression	1		5227330	0					
ANR	5227355	MultiplicativeExpression	strlen ( buf ) * ( show_asciidot ? 2 : 4 )		5227330	1		*			
ANR	5227356	CallExpression	strlen ( buf )		5227330	0					
ANR	5227357	Callee	strlen		5227330	0					
ANR	5227358	Identifier	strlen		5227330	0					
ANR	5227359	ArgumentList	buf		5227330	1					
ANR	5227360	Argument	buf		5227330	0					
ANR	5227361	Identifier	buf		5227330	0					
ANR	5227362	ConditionalExpression	show_asciidot ? 2 : 4		5227330	1					
ANR	5227363	Condition	show_asciidot		5227330	0					
ANR	5227364	Identifier	show_asciidot		5227330	0					
ANR	5227365	PrimaryExpression	2		5227330	1					
ANR	5227366	PrimaryExpression	4		5227330	2					
ANR	5227367	IfStatement	if ( ! new_buf )		5227330	2					
ANR	5227368	Condition	! new_buf	1287:5:26796:26803	5227330	0	True				
ANR	5227369	UnaryOperationExpression	! new_buf		5227330	0					
ANR	5227370	UnaryOperator	!		5227330	0					
ANR	5227371	Identifier	new_buf		5227330	1					
ANR	5227372	CompoundStatement		7:15:254:254	5227330	1					
ANR	5227373	ReturnStatement	return NULL ;	1288:2:26810:26821	5227330	0	True				
ANR	5227374	Identifier	NULL		5227330	0					
ANR	5227375	IdentifierDeclStatement	const char * p = buf ;	1290:1:26827:26846	5227330	3	True				
ANR	5227376	IdentifierDecl	* p = buf		5227330	0					
ANR	5227377	IdentifierDeclType	const char *		5227330	0					
ANR	5227378	Identifier	p		5227330	1					
ANR	5227379	AssignmentExpression	* p = buf		5227330	2		=			
ANR	5227380	Identifier	buf		5227330	0					
ANR	5227381	Identifier	buf		5227330	1					
ANR	5227382	IdentifierDeclStatement	char * q = new_buf ;	1291:1:26849:26866	5227330	4	True				
ANR	5227383	IdentifierDecl	* q = new_buf		5227330	0					
ANR	5227384	IdentifierDeclType	char *		5227330	0					
ANR	5227385	Identifier	q		5227330	1					
ANR	5227386	AssignmentExpression	* q = new_buf		5227330	2		=			
ANR	5227387	Identifier	new_buf		5227330	0					
ANR	5227388	Identifier	new_buf		5227330	1					
ANR	5227389	WhileStatement	while ( * p )		5227330	5					
ANR	5227390	Condition	* p	1292:8:26876:26877	5227330	0	True				
ANR	5227391	UnaryOperationExpression	* p		5227330	0					
ANR	5227392	UnaryOperator	*		5227330	0					
ANR	5227393	Identifier	p		5227330	1					
ANR	5227394	CompoundStatement		12:12:328:328	5227330	1					
ANR	5227395	SwitchStatement	switch ( * p )		5227330	0					
ANR	5227396	Condition	* p	1293:10:26892:26893	5227330	0	True				
ANR	5227397	UnaryOperationExpression	* p		5227330	0					
ANR	5227398	UnaryOperator	*		5227330	0					
ANR	5227399	Identifier	p		5227330	1					
ANR	5227400	CompoundStatement		13:14:344:344	5227330	1					
ANR	5227401	Label	case 0x1b :	1294:2:26900:26909	5227330	0	True				
ANR	5227402	IfStatement	if ( parse_esc_seq )		5227330	1					
ANR	5227403	Condition	parse_esc_seq	1295:7:26925:26937	5227330	0	True				
ANR	5227404	Identifier	parse_esc_seq		5227330	0					
ANR	5227405	CompoundStatement		16:4:394:419	5227330	1					
ANR	5227406	IdentifierDeclStatement	const char * start_seq = p ;	1296:4:26946:26971	5227330	0	True				
ANR	5227407	IdentifierDecl	* start_seq = p		5227330	0					
ANR	5227408	IdentifierDeclType	const char *		5227330	0					
ANR	5227409	Identifier	start_seq		5227330	1					
ANR	5227410	AssignmentExpression	* start_seq = p		5227330	2		=			
ANR	5227411	Identifier	p		5227330	0					
ANR	5227412	Identifier	p		5227330	1					
ANR	5227413	ExpressionStatement	p ++	1297:4:26977:26980	5227330	1	True				
ANR	5227414	PostIncDecOperationExpression	p ++		5227330	0					
ANR	5227415	Identifier	p		5227330	0					
ANR	5227416	IncDec	++		5227330	1					
ANR	5227417	IfStatement	if ( * p == '\\0' )		5227330	2					
ANR	5227418	Condition	* p == '\\0'	1300:8:27074:27083	5227330	0	True				
ANR	5227419	EqualityExpression	* p == '\\0'		5227330	0		==			
ANR	5227420	UnaryOperationExpression	* p		5227330	0					
ANR	5227421	UnaryOperator	*		5227330	0					
ANR	5227422	Identifier	p		5227330	1					
ANR	5227423	PrimaryExpression	'\\0'		5227330	1					
ANR	5227424	CompoundStatement		20:20:534:534	5227330	1					
ANR	5227425	GotoStatement	goto out ;	1301:5:27093:27101	5227330	0	True				
ANR	5227426	Identifier	out		5227330	0					
ANR	5227427	IfStatement	if ( * p == '[' )		5227330	3					
ANR	5227428	Condition	* p == '['	1303:8:27117:27125	5227330	0	True				
ANR	5227429	EqualityExpression	* p == '['		5227330	0		==			
ANR	5227430	UnaryOperationExpression	* p		5227330	0					
ANR	5227431	UnaryOperator	*		5227330	0					
ANR	5227432	Identifier	p		5227330	1					
ANR	5227433	PrimaryExpression	'['		5227330	1					
ANR	5227434	CompoundStatement		23:19:576:576	5227330	1					
ANR	5227435	ForStatement	for ( p ++ ; * p != 'm' ; p ++ )		5227330	0					
ANR	5227436	ForInit	p ++ ;	1304:10:27140:27143	5227330	0	True				
ANR	5227437	PostIncDecOperationExpression	p ++		5227330	0					
ANR	5227438	Identifier	p		5227330	0					
ANR	5227439	IncDec	++		5227330	1					
ANR	5227440	Condition	* p != 'm'	1304:15:27145:27153	5227330	1	True				
ANR	5227441	EqualityExpression	* p != 'm'		5227330	0		!=			
ANR	5227442	UnaryOperationExpression	* p		5227330	0					
ANR	5227443	UnaryOperator	*		5227330	0					
ANR	5227444	Identifier	p		5227330	1					
ANR	5227445	PrimaryExpression	'm'		5227330	1					
ANR	5227446	PostIncDecOperationExpression	p ++	1304:26:27156:27158	5227330	2	True				
ANR	5227447	Identifier	p		5227330	0					
ANR	5227448	IncDec	++		5227330	1					
ANR	5227449	CompoundStatement		24:31:609:609	5227330	3					
ANR	5227450	IfStatement	if ( * p == '\\0' )		5227330	0					
ANR	5227451	Condition	* p == '\\0'	1305:10:27173:27182	5227330	0	True				
ANR	5227452	EqualityExpression	* p == '\\0'		5227330	0		==			
ANR	5227453	UnaryOperationExpression	* p		5227330	0					
ANR	5227454	UnaryOperator	*		5227330	0					
ANR	5227455	Identifier	p		5227330	1					
ANR	5227456	PrimaryExpression	'\\0'		5227330	1					
ANR	5227457	CompoundStatement		25:22:633:633	5227330	1					
ANR	5227458	GotoStatement	goto out ;	1306:7:27194:27202	5227330	0	True				
ANR	5227459	Identifier	out		5227330	0					
ANR	5227460	IfStatement	if ( ! ign_esc_seq )		5227330	1					
ANR	5227461	Condition	! ign_esc_seq	1309:9:27228:27239	5227330	0	True				
ANR	5227462	UnaryOperationExpression	! ign_esc_seq		5227330	0					
ANR	5227463	UnaryOperator	!		5227330	0					
ANR	5227464	Identifier	ign_esc_seq		5227330	1					
ANR	5227465	CompoundStatement		29:23:690:690	5227330	1					
ANR	5227466	ExpressionStatement	"memcpy ( q , start_seq , p - start_seq + 1 )"	1310:6:27250:27290	5227330	0	True				
ANR	5227467	CallExpression	"memcpy ( q , start_seq , p - start_seq + 1 )"		5227330	0					
ANR	5227468	Callee	memcpy		5227330	0					
ANR	5227469	Identifier	memcpy		5227330	0					
ANR	5227470	ArgumentList	q		5227330	1					
ANR	5227471	Argument	q		5227330	0					
ANR	5227472	Identifier	q		5227330	0					
ANR	5227473	Argument	start_seq		5227330	1					
ANR	5227474	Identifier	start_seq		5227330	0					
ANR	5227475	Argument	p - start_seq + 1		5227330	2					
ANR	5227476	AdditiveExpression	p - start_seq + 1		5227330	0		-			
ANR	5227477	Identifier	p		5227330	0					
ANR	5227478	AdditiveExpression	start_seq + 1		5227330	1		+			
ANR	5227479	Identifier	start_seq		5227330	0					
ANR	5227480	PrimaryExpression	1		5227330	1					
ANR	5227481	ExpressionStatement	q += ( p - start_seq + 1 )	1311:6:27298:27322	5227330	1	True				
ANR	5227482	AssignmentExpression	q += ( p - start_seq + 1 )		5227330	0		+=			
ANR	5227483	Identifier	q		5227330	0					
ANR	5227484	AdditiveExpression	p - start_seq + 1		5227330	1		-			
ANR	5227485	Identifier	p		5227330	0					
ANR	5227486	AdditiveExpression	start_seq + 1		5227330	1		+			
ANR	5227487	Identifier	start_seq		5227330	0					
ANR	5227488	PrimaryExpression	1		5227330	1					
ANR	5227489	BreakStatement	break ;	1314:4:27341:27346	5227330	4	True				
ANR	5227490	Label	default :	1317:2:27376:27383	5227330	2	True				
ANR	5227491	Identifier	default		5227330	0					
ANR	5227492	ExpressionStatement	"r_str_byte_escape ( p , & q , dot_nl , show_asciidot , esc_bslash )"	1318:3:27388:27448	5227330	3	True				
ANR	5227493	CallExpression	"r_str_byte_escape ( p , & q , dot_nl , show_asciidot , esc_bslash )"		5227330	0					
ANR	5227494	Callee	r_str_byte_escape		5227330	0					
ANR	5227495	Identifier	r_str_byte_escape		5227330	0					
ANR	5227496	ArgumentList	p		5227330	1					
ANR	5227497	Argument	p		5227330	0					
ANR	5227498	Identifier	p		5227330	0					
ANR	5227499	Argument	& q		5227330	1					
ANR	5227500	UnaryOperationExpression	& q		5227330	0					
ANR	5227501	UnaryOperator	&		5227330	0					
ANR	5227502	Identifier	q		5227330	1					
ANR	5227503	Argument	dot_nl		5227330	2					
ANR	5227504	Identifier	dot_nl		5227330	0					
ANR	5227505	Argument	show_asciidot		5227330	3					
ANR	5227506	Identifier	show_asciidot		5227330	0					
ANR	5227507	Argument	esc_bslash		5227330	4					
ANR	5227508	Identifier	esc_bslash		5227330	0					
ANR	5227509	ExpressionStatement	p ++	1320:2:27456:27459	5227330	1	True				
ANR	5227510	PostIncDecOperationExpression	p ++		5227330	0					
ANR	5227511	Identifier	p		5227330	0					
ANR	5227512	IncDec	++		5227330	1					
ANR	5227513	Label	out :	1322:0:27464:27467	5227330	6	True				
ANR	5227514	Identifier	out		5227330	0					
ANR	5227515	ExpressionStatement	* q = '\\0'	1323:1:27470:27479	5227330	7	True				
ANR	5227516	AssignmentExpression	* q = '\\0'		5227330	0		=			
ANR	5227517	UnaryOperationExpression	* q		5227330	0					
ANR	5227518	UnaryOperator	*		5227330	0					
ANR	5227519	Identifier	q		5227330	1					
ANR	5227520	PrimaryExpression	'\\0'		5227330	1					
ANR	5227521	ReturnStatement	return new_buf ;	1324:1:27482:27496	5227330	8	True				
ANR	5227522	Identifier	new_buf		5227330	0					
ANR	5227523	ReturnType	static char *		5227330	1					
ANR	5227524	Identifier	r_str_escape_		5227330	2					
ANR	5227525	ParameterList	"const char * buf , int dot_nl , bool parse_esc_seq , bool ign_esc_seq , bool show_asciidot , bool esc_bslash"		5227330	3					
ANR	5227526	Parameter	const char * buf	1281:27:26447:26461	5227330	0	True				
ANR	5227527	ParameterType	const char *		5227330	0					
ANR	5227528	Identifier	buf		5227330	1					
ANR	5227529	Parameter	int dot_nl	1281:44:26464:26473	5227330	1	True				
ANR	5227530	ParameterType	int		5227330	0					
ANR	5227531	Identifier	dot_nl		5227330	1					
ANR	5227532	Parameter	bool parse_esc_seq	1281:56:26476:26493	5227330	2	True				
ANR	5227533	ParameterType	bool		5227330	0					
ANR	5227534	Identifier	parse_esc_seq		5227330	1					
ANR	5227535	Parameter	bool ign_esc_seq	1281:76:26496:26511	5227330	3	True				
ANR	5227536	ParameterType	bool		5227330	0					
ANR	5227537	Identifier	ign_esc_seq		5227330	1					
ANR	5227538	Parameter	bool show_asciidot	1281:94:26514:26531	5227330	4	True				
ANR	5227539	ParameterType	bool		5227330	0					
ANR	5227540	Identifier	show_asciidot		5227330	1					
ANR	5227541	Parameter	bool esc_bslash	1281:114:26534:26548	5227330	5	True				
ANR	5227542	ParameterType	bool		5227330	0					
ANR	5227543	Identifier	esc_bslash		5227330	1					
ANR	5227544	CFGEntryNode	ENTRY		5227330		True				
ANR	5227545	CFGExitNode	EXIT		5227330		True				
ANR	5227546	Symbol	malloc		5227330						
ANR	5227547	Symbol	dot_nl		5227330						
ANR	5227548	Symbol	NULL		5227330						
ANR	5227549	Symbol	ign_esc_seq		5227330						
ANR	5227550	Symbol	p		5227330						
ANR	5227551	Symbol	strlen		5227330						
ANR	5227552	Symbol	q		5227330						
ANR	5227553	Symbol	buf		5227330						
ANR	5227554	Symbol	parse_esc_seq		5227330						
ANR	5227555	Symbol	new_buf		5227330						
ANR	5227556	Symbol	& q		5227330						
ANR	5227557	Symbol	esc_bslash		5227330						
ANR	5227558	Symbol	start_seq		5227330						
ANR	5227559	Symbol	show_asciidot		5227330						
ANR	5227560	Symbol	* p		5227330						
ANR	5227561	Symbol	* q		5227330						
ANR	5227562	Function	r_str_escape	1327:0:27501:27606							
ANR	5227563	FunctionDef	r_str_escape (const char * buf)		5227562	0					
ANR	5227564	CompoundStatement		1327:42:27543:27606	5227562	0					
ANR	5227565	ReturnStatement	"return r_str_escape_ ( buf , false , true , true , false , true ) ;"	1328:1:27546:27604	5227562	0	True				
ANR	5227566	CallExpression	"r_str_escape_ ( buf , false , true , true , false , true )"		5227562	0					
ANR	5227567	Callee	r_str_escape_		5227562	0					
ANR	5227568	Identifier	r_str_escape_		5227562	0					
ANR	5227569	ArgumentList	buf		5227562	1					
ANR	5227570	Argument	buf		5227562	0					
ANR	5227571	Identifier	buf		5227562	0					
ANR	5227572	Argument	false		5227562	1					
ANR	5227573	Identifier	false		5227562	0					
ANR	5227574	Argument	true		5227562	2					
ANR	5227575	Identifier	true		5227562	0					
ANR	5227576	Argument	true		5227562	3					
ANR	5227577	Identifier	true		5227562	0					
ANR	5227578	Argument	false		5227562	4					
ANR	5227579	Identifier	false		5227562	0					
ANR	5227580	Argument	true		5227562	5					
ANR	5227581	Identifier	true		5227562	0					
ANR	5227582	ReturnType	R_API char *		5227562	1					
ANR	5227583	Identifier	r_str_escape		5227562	2					
ANR	5227584	ParameterList	const char * buf		5227562	3					
ANR	5227585	Parameter	const char * buf	1327:25:27526:27540	5227562	0	True				
ANR	5227586	ParameterType	const char *		5227562	0					
ANR	5227587	Identifier	buf		5227562	1					
ANR	5227588	CFGEntryNode	ENTRY		5227562		True				
ANR	5227589	CFGExitNode	EXIT		5227562		True				
ANR	5227590	Symbol	buf		5227562						
ANR	5227591	Symbol	r_str_escape_		5227562						
ANR	5227592	Symbol	false		5227562						
ANR	5227593	Symbol	true		5227562						
ANR	5227594	Function	r_str_escape_dot	1331:0:27609:27717							
ANR	5227595	FunctionDef	r_str_escape_dot (const char * buf)		5227594	0					
ANR	5227596	CompoundStatement		1331:46:27655:27717	5227594	0					
ANR	5227597	ReturnStatement	"return r_str_escape_ ( buf , true , true , true , false , true ) ;"	1332:1:27658:27715	5227594	0	True				
ANR	5227598	CallExpression	"r_str_escape_ ( buf , true , true , true , false , true )"		5227594	0					
ANR	5227599	Callee	r_str_escape_		5227594	0					
ANR	5227600	Identifier	r_str_escape_		5227594	0					
ANR	5227601	ArgumentList	buf		5227594	1					
ANR	5227602	Argument	buf		5227594	0					
ANR	5227603	Identifier	buf		5227594	0					
ANR	5227604	Argument	true		5227594	1					
ANR	5227605	Identifier	true		5227594	0					
ANR	5227606	Argument	true		5227594	2					
ANR	5227607	Identifier	true		5227594	0					
ANR	5227608	Argument	true		5227594	3					
ANR	5227609	Identifier	true		5227594	0					
ANR	5227610	Argument	false		5227594	4					
ANR	5227611	Identifier	false		5227594	0					
ANR	5227612	Argument	true		5227594	5					
ANR	5227613	Identifier	true		5227594	0					
ANR	5227614	ReturnType	R_API char *		5227594	1					
ANR	5227615	Identifier	r_str_escape_dot		5227594	2					
ANR	5227616	ParameterList	const char * buf		5227594	3					
ANR	5227617	Parameter	const char * buf	1331:29:27638:27652	5227594	0	True				
ANR	5227618	ParameterType	const char *		5227594	0					
ANR	5227619	Identifier	buf		5227594	1					
ANR	5227620	CFGEntryNode	ENTRY		5227594		True				
ANR	5227621	CFGExitNode	EXIT		5227594		True				
ANR	5227622	Symbol	buf		5227594						
ANR	5227623	Symbol	r_str_escape_		5227594						
ANR	5227624	Symbol	true		5227594						
ANR	5227625	Symbol	false		5227594						
ANR	5227626	Function	r_str_escape_latin1	1335:0:27720:27901							
ANR	5227627	FunctionDef	"r_str_escape_latin1 (const char * buf , bool show_asciidot , bool esc_bslash , bool colors)"		5227626	0					
ANR	5227628	CompoundStatement		1335:99:27819:27901	5227626	0					
ANR	5227629	ReturnStatement	"return r_str_escape_ ( buf , false , colors , ! colors , show_asciidot , esc_bslash ) ;"	1336:1:27822:27899	5227626	0	True				
ANR	5227630	CallExpression	"r_str_escape_ ( buf , false , colors , ! colors , show_asciidot , esc_bslash )"		5227626	0					
ANR	5227631	Callee	r_str_escape_		5227626	0					
ANR	5227632	Identifier	r_str_escape_		5227626	0					
ANR	5227633	ArgumentList	buf		5227626	1					
ANR	5227634	Argument	buf		5227626	0					
ANR	5227635	Identifier	buf		5227626	0					
ANR	5227636	Argument	false		5227626	1					
ANR	5227637	Identifier	false		5227626	0					
ANR	5227638	Argument	colors		5227626	2					
ANR	5227639	Identifier	colors		5227626	0					
ANR	5227640	Argument	! colors		5227626	3					
ANR	5227641	UnaryOperationExpression	! colors		5227626	0					
ANR	5227642	UnaryOperator	!		5227626	0					
ANR	5227643	Identifier	colors		5227626	1					
ANR	5227644	Argument	show_asciidot		5227626	4					
ANR	5227645	Identifier	show_asciidot		5227626	0					
ANR	5227646	Argument	esc_bslash		5227626	5					
ANR	5227647	Identifier	esc_bslash		5227626	0					
ANR	5227648	ReturnType	R_API char *		5227626	1					
ANR	5227649	Identifier	r_str_escape_latin1		5227626	2					
ANR	5227650	ParameterList	"const char * buf , bool show_asciidot , bool esc_bslash , bool colors"		5227626	3					
ANR	5227651	Parameter	const char * buf	1335:32:27752:27766	5227626	0	True				
ANR	5227652	ParameterType	const char *		5227626	0					
ANR	5227653	Identifier	buf		5227626	1					
ANR	5227654	Parameter	bool show_asciidot	1335:49:27769:27786	5227626	1	True				
ANR	5227655	ParameterType	bool		5227626	0					
ANR	5227656	Identifier	show_asciidot		5227626	1					
ANR	5227657	Parameter	bool esc_bslash	1335:69:27789:27803	5227626	2	True				
ANR	5227658	ParameterType	bool		5227626	0					
ANR	5227659	Identifier	esc_bslash		5227626	1					
ANR	5227660	Parameter	bool colors	1335:86:27806:27816	5227626	3	True				
ANR	5227661	ParameterType	bool		5227626	0					
ANR	5227662	Identifier	colors		5227626	1					
ANR	5227663	CFGEntryNode	ENTRY		5227626		True				
ANR	5227664	CFGExitNode	EXIT		5227626		True				
ANR	5227665	Symbol	buf		5227626						
ANR	5227666	Symbol	r_str_escape_		5227626						
ANR	5227667	Symbol	esc_bslash		5227626						
ANR	5227668	Symbol	false		5227626						
ANR	5227669	Symbol	show_asciidot		5227626						
ANR	5227670	Symbol	colors		5227626						
ANR	5227671	Function	r_str_escape_utf	1339:0:27904:29741							
ANR	5227672	FunctionDef	"r_str_escape_utf (const char * buf , int buf_size , RStrEnc enc , bool show_asciidot , bool esc_bslash)"		5227671	0					
ANR	5227673	CompoundStatement		1339:111:28015:29741	5227671	0					
ANR	5227674	IdentifierDeclStatement	"char * new_buf , * q ;"	1340:1:28018:28035	5227671	0	True				
ANR	5227675	IdentifierDecl	* new_buf		5227671	0					
ANR	5227676	IdentifierDeclType	char *		5227671	0					
ANR	5227677	Identifier	new_buf		5227671	1					
ANR	5227678	IdentifierDecl	* q		5227671	1					
ANR	5227679	IdentifierDeclType	char *		5227671	0					
ANR	5227680	Identifier	q		5227671	1					
ANR	5227681	IdentifierDeclStatement	"const char * p , * end ;"	1341:1:28038:28057	5227671	1	True				
ANR	5227682	IdentifierDecl	* p		5227671	0					
ANR	5227683	IdentifierDeclType	const char *		5227671	0					
ANR	5227684	Identifier	p		5227671	1					
ANR	5227685	IdentifierDecl	* end		5227671	1					
ANR	5227686	IdentifierDeclType	const char *		5227671	0					
ANR	5227687	Identifier	end		5227671	1					
ANR	5227688	IdentifierDeclStatement	RRune ch ;	1342:1:28060:28068	5227671	2	True				
ANR	5227689	IdentifierDecl	ch		5227671	0					
ANR	5227690	IdentifierDeclType	RRune		5227671	0					
ANR	5227691	Identifier	ch		5227671	1					
ANR	5227692	IdentifierDeclStatement	"int i , len , ch_bytes ;"	1343:1:28071:28091	5227671	3	True				
ANR	5227693	IdentifierDecl	i		5227671	0					
ANR	5227694	IdentifierDeclType	int		5227671	0					
ANR	5227695	Identifier	i		5227671	1					
ANR	5227696	IdentifierDecl	len		5227671	1					
ANR	5227697	IdentifierDeclType	int		5227671	0					
ANR	5227698	Identifier	len		5227671	1					
ANR	5227699	IdentifierDecl	ch_bytes		5227671	2					
ANR	5227700	IdentifierDeclType	int		5227671	0					
ANR	5227701	Identifier	ch_bytes		5227671	1					
ANR	5227702	IfStatement	if ( ! buf )		5227671	4					
ANR	5227703	Condition	! buf	1345:5:28099:28102	5227671	0	True				
ANR	5227704	UnaryOperationExpression	! buf		5227671	0					
ANR	5227705	UnaryOperator	!		5227671	0					
ANR	5227706	Identifier	buf		5227671	1					
ANR	5227707	CompoundStatement		7:11:89:89	5227671	1					
ANR	5227708	ReturnStatement	return NULL ;	1346:2:28109:28120	5227671	0	True				
ANR	5227709	Identifier	NULL		5227671	0					
ANR	5227710	SwitchStatement	switch ( enc )		5227671	5					
ANR	5227711	Condition	enc	1348:9:28134:28136	5227671	0	True				
ANR	5227712	Identifier	enc		5227671	0					
ANR	5227713	CompoundStatement		10:14:123:123	5227671	1					
ANR	5227714	Label	case R_STRING_ENC_UTF16LE :	1349:1:28142:28167	5227671	0	True				
ANR	5227715	Identifier	R_STRING_ENC_UTF16LE		5227671	0					
ANR	5227716	Label	case R_STRING_ENC_UTF32LE :	1350:1:28170:28195	5227671	1	True				
ANR	5227717	Identifier	R_STRING_ENC_UTF32LE		5227671	0					
ANR	5227718	IfStatement	if ( buf_size < 0 )		5227671	2					
ANR	5227719	Condition	buf_size < 0	1351:6:28203:28214	5227671	0	True				
ANR	5227720	RelationalExpression	buf_size < 0		5227671	0		<			
ANR	5227721	Identifier	buf_size		5227671	0					
ANR	5227722	PrimaryExpression	0		5227671	1					
ANR	5227723	CompoundStatement		13:20:201:201	5227671	1					
ANR	5227724	ReturnStatement	return NULL ;	1352:3:28222:28233	5227671	0	True				
ANR	5227725	Identifier	NULL		5227671	0					
ANR	5227726	IfStatement	if ( enc == R_STRING_ENC_UTF16LE )		5227671	3					
ANR	5227727	Condition	enc == R_STRING_ENC_UTF16LE	1354:6:28245:28271	5227671	0	True				
ANR	5227728	EqualityExpression	enc == R_STRING_ENC_UTF16LE		5227671	0		==			
ANR	5227729	Identifier	enc		5227671	0					
ANR	5227730	Identifier	R_STRING_ENC_UTF16LE		5227671	1					
ANR	5227731	CompoundStatement		16:35:258:258	5227671	1					
ANR	5227732	ExpressionStatement	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"	1355:3:28279:28354	5227671	0	True				
ANR	5227733	AssignmentExpression	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		5227671	0		=			
ANR	5227734	Identifier	end		5227671	0					
ANR	5227735	CastExpression	"( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		5227671	1					
ANR	5227736	CastTarget	char *		5227671	0					
ANR	5227737	CallExpression	"r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		5227671	1					
ANR	5227738	Callee	r_mem_mem_aligned		5227671	0					
ANR	5227739	Identifier	r_mem_mem_aligned		5227671	0					
ANR	5227740	ArgumentList	( ut8 * ) buf		5227671	1					
ANR	5227741	Argument	( ut8 * ) buf		5227671	0					
ANR	5227742	CastExpression	( ut8 * ) buf		5227671	0					
ANR	5227743	CastTarget	ut8 *		5227671	0					
ANR	5227744	Identifier	buf		5227671	1					
ANR	5227745	Argument	buf_size		5227671	1					
ANR	5227746	Identifier	buf_size		5227671	0					
ANR	5227747	Argument	"( ut8 * ) ""\\0\\0"""		5227671	2					
ANR	5227748	CastExpression	"( ut8 * ) ""\\0\\0"""		5227671	0					
ANR	5227749	CastTarget	ut8 *		5227671	0					
ANR	5227750	PrimaryExpression	"""\\0\\0"""		5227671	1					
ANR	5227751	Argument	2		5227671	3					
ANR	5227752	PrimaryExpression	2		5227671	0					
ANR	5227753	Argument	2		5227671	4					
ANR	5227754	PrimaryExpression	2		5227671	0					
ANR	5227755	ElseStatement	else		5227671	0					
ANR	5227756	CompoundStatement		18:9:349:349	5227671	0					
ANR	5227757	ExpressionStatement	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"	1357:3:28370:28449	5227671	0	True				
ANR	5227758	AssignmentExpression	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		5227671	0		=			
ANR	5227759	Identifier	end		5227671	0					
ANR	5227760	CastExpression	"( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		5227671	1					
ANR	5227761	CastTarget	char *		5227671	0					
ANR	5227762	CallExpression	"r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		5227671	1					
ANR	5227763	Callee	r_mem_mem_aligned		5227671	0					
ANR	5227764	Identifier	r_mem_mem_aligned		5227671	0					
ANR	5227765	ArgumentList	( ut8 * ) buf		5227671	1					
ANR	5227766	Argument	( ut8 * ) buf		5227671	0					
ANR	5227767	CastExpression	( ut8 * ) buf		5227671	0					
ANR	5227768	CastTarget	ut8 *		5227671	0					
ANR	5227769	Identifier	buf		5227671	1					
ANR	5227770	Argument	buf_size		5227671	1					
ANR	5227771	Identifier	buf_size		5227671	0					
ANR	5227772	Argument	"( ut8 * ) ""\\0\\0\\0\\0"""		5227671	2					
ANR	5227773	CastExpression	"( ut8 * ) ""\\0\\0\\0\\0"""		5227671	0					
ANR	5227774	CastTarget	ut8 *		5227671	0					
ANR	5227775	PrimaryExpression	"""\\0\\0\\0\\0"""		5227671	1					
ANR	5227776	Argument	4		5227671	3					
ANR	5227777	PrimaryExpression	4		5227671	0					
ANR	5227778	Argument	4		5227671	4					
ANR	5227779	PrimaryExpression	4		5227671	0					
ANR	5227780	IfStatement	if ( ! end )		5227671	4					
ANR	5227781	Condition	! end	1359:6:28461:28464	5227671	0	True				
ANR	5227782	UnaryOperationExpression	! end		5227671	0					
ANR	5227783	UnaryOperator	!		5227671	0					
ANR	5227784	Identifier	end		5227671	1					
ANR	5227785	CompoundStatement		21:12:451:451	5227671	1					
ANR	5227786	ExpressionStatement	end = buf + buf_size - 1	1360:3:28472:28496	5227671	0	True				
ANR	5227787	AssignmentExpression	end = buf + buf_size - 1		5227671	0		=			
ANR	5227788	Identifier	end		5227671	0					
ANR	5227789	AdditiveExpression	buf + buf_size - 1		5227671	1		+			
ANR	5227790	Identifier	buf		5227671	0					
ANR	5227791	AdditiveExpression	buf_size - 1		5227671	1		-			
ANR	5227792	Identifier	buf_size		5227671	0					
ANR	5227793	PrimaryExpression	1		5227671	1					
ANR	5227794	ExpressionStatement	len = end - buf	1362:2:28504:28519	5227671	5	True				
ANR	5227795	AssignmentExpression	len = end - buf		5227671	0		=			
ANR	5227796	Identifier	len		5227671	0					
ANR	5227797	AdditiveExpression	end - buf		5227671	1		-			
ANR	5227798	Identifier	end		5227671	0					
ANR	5227799	Identifier	buf		5227671	1					
ANR	5227800	BreakStatement	break ;	1363:2:28523:28528	5227671	6	True				
ANR	5227801	Label	default :	1364:1:28531:28538	5227671	7	True				
ANR	5227802	Identifier	default		5227671	0					
ANR	5227803	ExpressionStatement	len = strlen ( buf )	1365:2:28542:28560	5227671	8	True				
ANR	5227804	AssignmentExpression	len = strlen ( buf )		5227671	0		=			
ANR	5227805	Identifier	len		5227671	0					
ANR	5227806	CallExpression	strlen ( buf )		5227671	1					
ANR	5227807	Callee	strlen		5227671	0					
ANR	5227808	Identifier	strlen		5227671	0					
ANR	5227809	ArgumentList	buf		5227671	1					
ANR	5227810	Argument	buf		5227671	0					
ANR	5227811	Identifier	buf		5227671	0					
ANR	5227812	ExpressionStatement	end = buf + len	1366:2:28564:28579	5227671	9	True				
ANR	5227813	AssignmentExpression	end = buf + len		5227671	0		=			
ANR	5227814	Identifier	end		5227671	0					
ANR	5227815	AdditiveExpression	buf + len		5227671	1		+			
ANR	5227816	Identifier	buf		5227671	0					
ANR	5227817	Identifier	len		5227671	1					
ANR	5227818	ExpressionStatement	new_buf = malloc ( 1 + ( len * 4 ) )	1369:1:28643:28675	5227671	6	True				
ANR	5227819	AssignmentExpression	new_buf = malloc ( 1 + ( len * 4 ) )		5227671	0		=			
ANR	5227820	Identifier	new_buf		5227671	0					
ANR	5227821	CallExpression	malloc ( 1 + ( len * 4 ) )		5227671	1					
ANR	5227822	Callee	malloc		5227671	0					
ANR	5227823	Identifier	malloc		5227671	0					
ANR	5227824	ArgumentList	1 + ( len * 4 )		5227671	1					
ANR	5227825	Argument	1 + ( len * 4 )		5227671	0					
ANR	5227826	AdditiveExpression	1 + ( len * 4 )		5227671	0		+			
ANR	5227827	PrimaryExpression	1		5227671	0					
ANR	5227828	MultiplicativeExpression	len * 4		5227671	1		*			
ANR	5227829	Identifier	len		5227671	0					
ANR	5227830	PrimaryExpression	4		5227671	1					
ANR	5227831	IfStatement	if ( ! new_buf )		5227671	7					
ANR	5227832	Condition	! new_buf	1370:5:28682:28689	5227671	0	True				
ANR	5227833	UnaryOperationExpression	! new_buf		5227671	0					
ANR	5227834	UnaryOperator	!		5227671	0					
ANR	5227835	Identifier	new_buf		5227671	1					
ANR	5227836	CompoundStatement		32:15:676:676	5227671	1					
ANR	5227837	ReturnStatement	return NULL ;	1371:2:28696:28707	5227671	0	True				
ANR	5227838	Identifier	NULL		5227671	0					
ANR	5227839	ExpressionStatement	p = buf	1373:1:28713:28720	5227671	8	True				
ANR	5227840	AssignmentExpression	p = buf		5227671	0		=			
ANR	5227841	Identifier	p		5227671	0					
ANR	5227842	Identifier	buf		5227671	1					
ANR	5227843	ExpressionStatement	q = new_buf	1374:1:28723:28734	5227671	9	True				
ANR	5227844	AssignmentExpression	q = new_buf		5227671	0		=			
ANR	5227845	Identifier	q		5227671	0					
ANR	5227846	Identifier	new_buf		5227671	1					
ANR	5227847	WhileStatement	while ( p < end )		5227671	10					
ANR	5227848	Condition	p < end	1375:8:28744:28750	5227671	0	True				
ANR	5227849	RelationalExpression	p < end		5227671	0		<			
ANR	5227850	Identifier	p		5227671	0					
ANR	5227851	Identifier	end		5227671	1					
ANR	5227852	CompoundStatement		37:17:737:737	5227671	1					
ANR	5227853	SwitchStatement	switch ( enc )		5227671	0					
ANR	5227854	Condition	enc	1376:10:28765:28767	5227671	0	True				
ANR	5227855	Identifier	enc		5227671	0					
ANR	5227856	CompoundStatement		38:15:754:754	5227671	1					
ANR	5227857	Label	case R_STRING_ENC_UTF16LE :	1377:2:28774:28799	5227671	0	True				
ANR	5227858	Identifier	R_STRING_ENC_UTF16LE		5227671	0					
ANR	5227859	Label	case R_STRING_ENC_UTF32LE :	1378:2:28803:28828	5227671	1	True				
ANR	5227860	Identifier	R_STRING_ENC_UTF32LE		5227671	0					
ANR	5227861	ExpressionStatement	"ch_bytes = ( enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch ) )"	1379:3:28833:28977	5227671	2	True				
ANR	5227862	AssignmentExpression	"ch_bytes = ( enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch ) )"		5227671	0		=			
ANR	5227863	Identifier	ch_bytes		5227671	0					
ANR	5227864	ConditionalExpression	"enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch )"		5227671	1					
ANR	5227865	Condition	enc == R_STRING_ENC_UTF16LE		5227671	0					
ANR	5227866	EqualityExpression	enc == R_STRING_ENC_UTF16LE		5227671	0		==			
ANR	5227867	Identifier	enc		5227671	0					
ANR	5227868	Identifier	R_STRING_ENC_UTF16LE		5227671	1					
ANR	5227869	CallExpression	"r_utf16le_decode ( ( ut8 * ) p , end - p , & ch )"		5227671	1					
ANR	5227870	Callee	r_utf16le_decode		5227671	0					
ANR	5227871	Identifier	r_utf16le_decode		5227671	0					
ANR	5227872	ArgumentList	( ut8 * ) p		5227671	1					
ANR	5227873	Argument	( ut8 * ) p		5227671	0					
ANR	5227874	CastExpression	( ut8 * ) p		5227671	0					
ANR	5227875	CastTarget	ut8 *		5227671	0					
ANR	5227876	Identifier	p		5227671	1					
ANR	5227877	Argument	end - p		5227671	1					
ANR	5227878	AdditiveExpression	end - p		5227671	0		-			
ANR	5227879	Identifier	end		5227671	0					
ANR	5227880	Identifier	p		5227671	1					
ANR	5227881	Argument	& ch		5227671	2					
ANR	5227882	UnaryOperationExpression	& ch		5227671	0					
ANR	5227883	UnaryOperator	&		5227671	0					
ANR	5227884	Identifier	ch		5227671	1					
ANR	5227885	CallExpression	"r_utf32le_decode ( ( ut8 * ) p , end - p , & ch )"		5227671	2					
ANR	5227886	Callee	r_utf32le_decode		5227671	0					
ANR	5227887	Identifier	r_utf32le_decode		5227671	0					
ANR	5227888	ArgumentList	( ut8 * ) p		5227671	1					
ANR	5227889	Argument	( ut8 * ) p		5227671	0					
ANR	5227890	CastExpression	( ut8 * ) p		5227671	0					
ANR	5227891	CastTarget	ut8 *		5227671	0					
ANR	5227892	Identifier	p		5227671	1					
ANR	5227893	Argument	end - p		5227671	1					
ANR	5227894	AdditiveExpression	end - p		5227671	0		-			
ANR	5227895	Identifier	end		5227671	0					
ANR	5227896	Identifier	p		5227671	1					
ANR	5227897	Argument	& ch		5227671	2					
ANR	5227898	UnaryOperationExpression	& ch		5227671	0					
ANR	5227899	UnaryOperator	&		5227671	0					
ANR	5227900	Identifier	ch		5227671	1					
ANR	5227901	IfStatement	if ( ch_bytes == 0 )		5227671	3					
ANR	5227902	Condition	ch_bytes == 0	1382:7:28986:28998	5227671	0	True				
ANR	5227903	EqualityExpression	ch_bytes == 0		5227671	0		==			
ANR	5227904	Identifier	ch_bytes		5227671	0					
ANR	5227905	PrimaryExpression	0		5227671	1					
ANR	5227906	CompoundStatement		44:22:985:985	5227671	1					
ANR	5227907	ExpressionStatement	p ++	1383:4:29007:29010	5227671	0	True				
ANR	5227908	PostIncDecOperationExpression	p ++		5227671	0					
ANR	5227909	Identifier	p		5227671	0					
ANR	5227910	IncDec	++		5227671	1					
ANR	5227911	ContinueStatement	continue ;	1384:4:29016:29024	5227671	1	True				
ANR	5227912	BreakStatement	break ;	1386:3:29034:29039	5227671	4	True				
ANR	5227913	Label	default :	1387:2:29043:29050	5227671	5	True				
ANR	5227914	Identifier	default		5227671	0					
ANR	5227915	ExpressionStatement	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"	1388:3:29055:29104	5227671	6	True				
ANR	5227916	AssignmentExpression	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		5227671	0		=			
ANR	5227917	Identifier	ch_bytes		5227671	0					
ANR	5227918	CallExpression	"r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		5227671	1					
ANR	5227919	Callee	r_utf8_decode		5227671	0					
ANR	5227920	Identifier	r_utf8_decode		5227671	0					
ANR	5227921	ArgumentList	( ut8 * ) p		5227671	1					
ANR	5227922	Argument	( ut8 * ) p		5227671	0					
ANR	5227923	CastExpression	( ut8 * ) p		5227671	0					
ANR	5227924	CastTarget	ut8 *		5227671	0					
ANR	5227925	Identifier	p		5227671	1					
ANR	5227926	Argument	end - p		5227671	1					
ANR	5227927	AdditiveExpression	end - p		5227671	0		-			
ANR	5227928	Identifier	end		5227671	0					
ANR	5227929	Identifier	p		5227671	1					
ANR	5227930	Argument	& ch		5227671	2					
ANR	5227931	UnaryOperationExpression	& ch		5227671	0					
ANR	5227932	UnaryOperator	&		5227671	0					
ANR	5227933	Identifier	ch		5227671	1					
ANR	5227934	IfStatement	if ( ch_bytes == 0 )		5227671	7					
ANR	5227935	Condition	ch_bytes == 0	1389:7:29113:29125	5227671	0	True				
ANR	5227936	EqualityExpression	ch_bytes == 0		5227671	0		==			
ANR	5227937	Identifier	ch_bytes		5227671	0					
ANR	5227938	PrimaryExpression	0		5227671	1					
ANR	5227939	CompoundStatement		51:22:1112:1112	5227671	1					
ANR	5227940	ExpressionStatement	ch_bytes = 1	1390:4:29134:29146	5227671	0	True				
ANR	5227941	AssignmentExpression	ch_bytes = 1		5227671	0		=			
ANR	5227942	Identifier	ch_bytes		5227671	0					
ANR	5227943	PrimaryExpression	1		5227671	1					
ANR	5227944	IfStatement	if ( show_asciidot && ! IS_PRINTABLE ( ch ) )		5227671	1					
ANR	5227945	Condition	show_asciidot && ! IS_PRINTABLE ( ch )	1393:6:29163:29196	5227671	0	True				
ANR	5227946	AndExpression	show_asciidot && ! IS_PRINTABLE ( ch )		5227671	0		&&			
ANR	5227947	Identifier	show_asciidot		5227671	0					
ANR	5227948	UnaryOperationExpression	! IS_PRINTABLE ( ch )		5227671	1					
ANR	5227949	UnaryOperator	!		5227671	0					
ANR	5227950	CallExpression	IS_PRINTABLE ( ch )		5227671	1					
ANR	5227951	Callee	IS_PRINTABLE		5227671	0					
ANR	5227952	Identifier	IS_PRINTABLE		5227671	0					
ANR	5227953	ArgumentList	ch		5227671	1					
ANR	5227954	Argument	ch		5227671	0					
ANR	5227955	Identifier	ch		5227671	0					
ANR	5227956	CompoundStatement		55:42:1183:1183	5227671	1					
ANR	5227957	ExpressionStatement	* q ++ = '.'	1394:3:29204:29214	5227671	0	True				
ANR	5227958	AssignmentExpression	* q ++ = '.'		5227671	0		=			
ANR	5227959	UnaryOperationExpression	* q ++		5227671	0					
ANR	5227960	UnaryOperator	*		5227671	0					
ANR	5227961	PostIncDecOperationExpression	q ++		5227671	1					
ANR	5227962	Identifier	q		5227671	0					
ANR	5227963	IncDec	++		5227671	1					
ANR	5227964	PrimaryExpression	'.'		5227671	1					
ANR	5227965	ElseStatement	else		5227671	0					
ANR	5227966	IfStatement	if ( ch_bytes > 1 )		5227671	0					
ANR	5227967	Condition	ch_bytes > 1	1395:13:29229:29240	5227671	0	True				
ANR	5227968	RelationalExpression	ch_bytes > 1		5227671	0		>			
ANR	5227969	Identifier	ch_bytes		5227671	0					
ANR	5227970	PrimaryExpression	1		5227671	1					
ANR	5227971	CompoundStatement		57:27:1227:1227	5227671	1					
ANR	5227972	ExpressionStatement	* q ++ = '\\\\'	1396:3:29248:29259	5227671	0	True				
ANR	5227973	AssignmentExpression	* q ++ = '\\\\'		5227671	0		=			
ANR	5227974	UnaryOperationExpression	* q ++		5227671	0					
ANR	5227975	UnaryOperator	*		5227671	0					
ANR	5227976	PostIncDecOperationExpression	q ++		5227671	1					
ANR	5227977	Identifier	q		5227671	0					
ANR	5227978	IncDec	++		5227671	1					
ANR	5227979	PrimaryExpression	'\\\\'		5227671	1					
ANR	5227980	ExpressionStatement	* q ++ = ch_bytes == 4 ? 'U' : 'u'	1397:3:29264:29296	5227671	1	True				
ANR	5227981	AssignmentExpression	* q ++ = ch_bytes == 4 ? 'U' : 'u'		5227671	0		=			
ANR	5227982	UnaryOperationExpression	* q ++		5227671	0					
ANR	5227983	UnaryOperator	*		5227671	0					
ANR	5227984	PostIncDecOperationExpression	q ++		5227671	1					
ANR	5227985	Identifier	q		5227671	0					
ANR	5227986	IncDec	++		5227671	1					
ANR	5227987	ConditionalExpression	ch_bytes == 4 ? 'U' : 'u'		5227671	1					
ANR	5227988	Condition	ch_bytes == 4		5227671	0					
ANR	5227989	EqualityExpression	ch_bytes == 4		5227671	0		==			
ANR	5227990	Identifier	ch_bytes		5227671	0					
ANR	5227991	PrimaryExpression	4		5227671	1					
ANR	5227992	PrimaryExpression	'U'		5227671	1					
ANR	5227993	PrimaryExpression	'u'		5227671	2					
ANR	5227994	ForStatement	for ( i = ch_bytes == 4 ? 6 : 2 ; i >= 0 ; i -= 2 )		5227671	2					
ANR	5227995	ForInit	i = ch_bytes == 4 ? 6 : 2 ;	1398:8:29306:29331	5227671	0	True				
ANR	5227996	AssignmentExpression	i = ch_bytes == 4 ? 6 : 2		5227671	0		=			
ANR	5227997	Identifier	i		5227671	0					
ANR	5227998	ConditionalExpression	ch_bytes == 4 ? 6 : 2		5227671	1					
ANR	5227999	Condition	ch_bytes == 4		5227671	0					
ANR	5228000	EqualityExpression	ch_bytes == 4		5227671	0		==			
ANR	5228001	Identifier	ch_bytes		5227671	0					
ANR	5228002	PrimaryExpression	4		5227671	1					
ANR	5228003	PrimaryExpression	6		5227671	1					
ANR	5228004	PrimaryExpression	2		5227671	2					
ANR	5228005	Condition	i >= 0	1398:35:29333:29338	5227671	1	True				
ANR	5228006	RelationalExpression	i >= 0		5227671	0		>=			
ANR	5228007	Identifier	i		5227671	0					
ANR	5228008	PrimaryExpression	0		5227671	1					
ANR	5228009	AssignmentExpression	i -= 2	1398:43:29341:29346	5227671	2	True	-=			
ANR	5228010	Identifier	i		5227671	0					
ANR	5228011	PrimaryExpression	2		5227671	1					
ANR	5228012	CompoundStatement		60:51:1333:1333	5227671	3					
ANR	5228013	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"	1399:4:29355:29405	5227671	0	True				
ANR	5228014	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		5227671	0		=			
ANR	5228015	UnaryOperationExpression	* q ++		5227671	0					
ANR	5228016	UnaryOperator	*		5227671	0					
ANR	5228017	PostIncDecOperationExpression	q ++		5227671	1					
ANR	5228018	Identifier	q		5227671	0					
ANR	5228019	IncDec	++		5227671	1					
ANR	5228020	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		5227671	1					
ANR	5228021	PrimaryExpression	"""0123456789abcdef"""		5227671	0					
ANR	5228022	BitAndExpression	ch >> 4 * ( i + 1 ) & 0xf		5227671	1		&			
ANR	5228023	ShiftExpression	ch >> 4 * ( i + 1 )		5227671	0		>>			
ANR	5228024	Identifier	ch		5227671	0					
ANR	5228025	MultiplicativeExpression	4 * ( i + 1 )		5227671	1		*			
ANR	5228026	PrimaryExpression	4		5227671	0					
ANR	5228027	AdditiveExpression	i + 1		5227671	1		+			
ANR	5228028	Identifier	i		5227671	0					
ANR	5228029	PrimaryExpression	1		5227671	1					
ANR	5228030	PrimaryExpression	0xf		5227671	1					
ANR	5228031	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"	1400:4:29411:29455	5227671	1	True				
ANR	5228032	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		5227671	0		=			
ANR	5228033	UnaryOperationExpression	* q ++		5227671	0					
ANR	5228034	UnaryOperator	*		5227671	0					
ANR	5228035	PostIncDecOperationExpression	q ++		5227671	1					
ANR	5228036	Identifier	q		5227671	0					
ANR	5228037	IncDec	++		5227671	1					
ANR	5228038	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		5227671	1					
ANR	5228039	PrimaryExpression	"""0123456789abcdef"""		5227671	0					
ANR	5228040	BitAndExpression	ch >> 4 * i & 0xf		5227671	1		&			
ANR	5228041	ShiftExpression	ch >> 4 * i		5227671	0		>>			
ANR	5228042	Identifier	ch		5227671	0					
ANR	5228043	MultiplicativeExpression	4 * i		5227671	1		*			
ANR	5228044	PrimaryExpression	4		5227671	0					
ANR	5228045	Identifier	i		5227671	1					
ANR	5228046	PrimaryExpression	0xf		5227671	1					
ANR	5228047	ElseStatement	else		5227671	0					
ANR	5228048	CompoundStatement		64:9:1455:1455	5227671	0					
ANR	5228049	ExpressionStatement	"r_str_byte_escape ( p , & q , false , false , esc_bslash )"	1403:3:29476:29527	5227671	0	True				
ANR	5228050	CallExpression	"r_str_byte_escape ( p , & q , false , false , esc_bslash )"		5227671	0					
ANR	5228051	Callee	r_str_byte_escape		5227671	0					
ANR	5228052	Identifier	r_str_byte_escape		5227671	0					
ANR	5228053	ArgumentList	p		5227671	1					
ANR	5228054	Argument	p		5227671	0					
ANR	5228055	Identifier	p		5227671	0					
ANR	5228056	Argument	& q		5227671	1					
ANR	5228057	UnaryOperationExpression	& q		5227671	0					
ANR	5228058	UnaryOperator	&		5227671	0					
ANR	5228059	Identifier	q		5227671	1					
ANR	5228060	Argument	false		5227671	2					
ANR	5228061	Identifier	false		5227671	0					
ANR	5228062	Argument	false		5227671	3					
ANR	5228063	Identifier	false		5227671	0					
ANR	5228064	Argument	esc_bslash		5227671	4					
ANR	5228065	Identifier	esc_bslash		5227671	0					
ANR	5228066	SwitchStatement	switch ( enc )		5227671	2					
ANR	5228067	Condition	enc	1405:10:29543:29545	5227671	0	True				
ANR	5228068	Identifier	enc		5227671	0					
ANR	5228069	CompoundStatement		67:15:1532:1532	5227671	1					
ANR	5228070	Label	case R_STRING_ENC_UTF16LE :	1406:2:29552:29577	5227671	0	True				
ANR	5228071	Identifier	R_STRING_ENC_UTF16LE		5227671	0					
ANR	5228072	ExpressionStatement	p += ch_bytes < 2 ? 2 : ch_bytes	1407:3:29582:29614	5227671	1	True				
ANR	5228073	AssignmentExpression	p += ch_bytes < 2 ? 2 : ch_bytes		5227671	0		+=			
ANR	5228074	Identifier	p		5227671	0					
ANR	5228075	ConditionalExpression	ch_bytes < 2 ? 2 : ch_bytes		5227671	1					
ANR	5228076	Condition	ch_bytes < 2		5227671	0					
ANR	5228077	RelationalExpression	ch_bytes < 2		5227671	0		<			
ANR	5228078	Identifier	ch_bytes		5227671	0					
ANR	5228079	PrimaryExpression	2		5227671	1					
ANR	5228080	PrimaryExpression	2		5227671	1					
ANR	5228081	Identifier	ch_bytes		5227671	2					
ANR	5228082	BreakStatement	break ;	1408:3:29619:29624	5227671	2	True				
ANR	5228083	Label	case R_STRING_ENC_UTF32LE :	1409:2:29628:29653	5227671	3	True				
ANR	5228084	Identifier	R_STRING_ENC_UTF32LE		5227671	0					
ANR	5228085	ExpressionStatement	p += 4	1410:3:29658:29664	5227671	4	True				
ANR	5228086	AssignmentExpression	p += 4		5227671	0		+=			
ANR	5228087	Identifier	p		5227671	0					
ANR	5228088	PrimaryExpression	4		5227671	1					
ANR	5228089	BreakStatement	break ;	1411:3:29669:29674	5227671	5	True				
ANR	5228090	Label	default :	1412:2:29678:29685	5227671	6	True				
ANR	5228091	Identifier	default		5227671	0					
ANR	5228092	ExpressionStatement	p += ch_bytes	1413:3:29690:29703	5227671	7	True				
ANR	5228093	AssignmentExpression	p += ch_bytes		5227671	0		+=			
ANR	5228094	Identifier	p		5227671	0					
ANR	5228095	Identifier	ch_bytes		5227671	1					
ANR	5228096	ExpressionStatement	* q = '\\0'	1416:1:29713:29722	5227671	11	True				
ANR	5228097	AssignmentExpression	* q = '\\0'		5227671	0		=			
ANR	5228098	UnaryOperationExpression	* q		5227671	0					
ANR	5228099	UnaryOperator	*		5227671	0					
ANR	5228100	Identifier	q		5227671	1					
ANR	5228101	PrimaryExpression	'\\0'		5227671	1					
ANR	5228102	ReturnStatement	return new_buf ;	1417:1:29725:29739	5227671	12	True				
ANR	5228103	Identifier	new_buf		5227671	0					
ANR	5228104	ReturnType	static char *		5227671	1					
ANR	5228105	Identifier	r_str_escape_utf		5227671	2					
ANR	5228106	ParameterList	"const char * buf , int buf_size , RStrEnc enc , bool show_asciidot , bool esc_bslash"		5227671	3					
ANR	5228107	Parameter	const char * buf	1339:30:27934:27948	5227671	0	True				
ANR	5228108	ParameterType	const char *		5227671	0					
ANR	5228109	Identifier	buf		5227671	1					
ANR	5228110	Parameter	int buf_size	1339:47:27951:27962	5227671	1	True				
ANR	5228111	ParameterType	int		5227671	0					
ANR	5228112	Identifier	buf_size		5227671	1					
ANR	5228113	Parameter	RStrEnc enc	1339:61:27965:27975	5227671	2	True				
ANR	5228114	ParameterType	RStrEnc		5227671	0					
ANR	5228115	Identifier	enc		5227671	1					
ANR	5228116	Parameter	bool show_asciidot	1339:74:27978:27995	5227671	3	True				
ANR	5228117	ParameterType	bool		5227671	0					
ANR	5228118	Identifier	show_asciidot		5227671	1					
ANR	5228119	Parameter	bool esc_bslash	1339:94:27998:28012	5227671	4	True				
ANR	5228120	ParameterType	bool		5227671	0					
ANR	5228121	Identifier	esc_bslash		5227671	1					
ANR	5228122	CFGEntryNode	ENTRY		5227671		True				
ANR	5228123	CFGExitNode	EXIT		5227671		True				
ANR	5228124	Symbol	IS_PRINTABLE		5227671						
ANR	5228125	Symbol	r_utf8_decode		5227671						
ANR	5228126	Symbol	ch_bytes		5227671						
ANR	5228127	Symbol	* q ++		5227671						
ANR	5228128	Symbol	* ch		5227671						
ANR	5228129	Symbol	R_STRING_ENC_UTF16LE		5227671						
ANR	5228130	Symbol	r_utf32le_decode		5227671						
ANR	5228131	Symbol	& ch		5227671						
ANR	5228132	Symbol	strlen		5227671						
ANR	5228133	Symbol	new_buf		5227671						
ANR	5228134	Symbol	len		5227671						
ANR	5228135	Symbol	esc_bslash		5227671						
ANR	5228136	Symbol	end		5227671						
ANR	5228137	Symbol	enc		5227671						
ANR	5228138	Symbol	malloc		5227671						
ANR	5228139	Symbol	NULL		5227671						
ANR	5228140	Symbol	r_utf16le_decode		5227671						
ANR	5228141	Symbol	ch		5227671						
ANR	5228142	Symbol	buf_size		5227671						
ANR	5228143	Symbol	false		5227671						
ANR	5228144	Symbol	i		5227671						
ANR	5228145	Symbol	p		5227671						
ANR	5228146	Symbol	q		5227671						
ANR	5228147	Symbol	buf		5227671						
ANR	5228148	Symbol	* i		5227671						
ANR	5228149	Symbol	r_mem_mem_aligned		5227671						
ANR	5228150	Symbol	& q		5227671						
ANR	5228151	Symbol	show_asciidot		5227671						
ANR	5228152	Symbol	* q		5227671						
ANR	5228153	Function	r_str_escape_utf8	1420:0:29744:29912							
ANR	5228154	FunctionDef	"r_str_escape_utf8 (const char * buf , bool show_asciidot , bool esc_bslash)"		5228153	0					
ANR	5228155	CompoundStatement		1420:84:29828:29912	5228153	0					
ANR	5228156	ReturnStatement	"return r_str_escape_utf ( buf , - 1 , R_STRING_ENC_UTF8 , show_asciidot , esc_bslash ) ;"	1421:1:29831:29910	5228153	0	True				
ANR	5228157	CallExpression	"r_str_escape_utf ( buf , - 1 , R_STRING_ENC_UTF8 , show_asciidot , esc_bslash )"		5228153	0					
ANR	5228158	Callee	r_str_escape_utf		5228153	0					
ANR	5228159	Identifier	r_str_escape_utf		5228153	0					
ANR	5228160	ArgumentList	buf		5228153	1					
ANR	5228161	Argument	buf		5228153	0					
ANR	5228162	Identifier	buf		5228153	0					
ANR	5228163	Argument	- 1		5228153	1					
ANR	5228164	UnaryOperationExpression	- 1		5228153	0					
ANR	5228165	UnaryOperator	-		5228153	0					
ANR	5228166	PrimaryExpression	1		5228153	1					
ANR	5228167	Argument	R_STRING_ENC_UTF8		5228153	2					
ANR	5228168	Identifier	R_STRING_ENC_UTF8		5228153	0					
ANR	5228169	Argument	show_asciidot		5228153	3					
ANR	5228170	Identifier	show_asciidot		5228153	0					
ANR	5228171	Argument	esc_bslash		5228153	4					
ANR	5228172	Identifier	esc_bslash		5228153	0					
ANR	5228173	ReturnType	R_API char *		5228153	1					
ANR	5228174	Identifier	r_str_escape_utf8		5228153	2					
ANR	5228175	ParameterList	"const char * buf , bool show_asciidot , bool esc_bslash"		5228153	3					
ANR	5228176	Parameter	const char * buf	1420:30:29774:29788	5228153	0	True				
ANR	5228177	ParameterType	const char *		5228153	0					
ANR	5228178	Identifier	buf		5228153	1					
ANR	5228179	Parameter	bool show_asciidot	1420:47:29791:29808	5228153	1	True				
ANR	5228180	ParameterType	bool		5228153	0					
ANR	5228181	Identifier	show_asciidot		5228153	1					
ANR	5228182	Parameter	bool esc_bslash	1420:67:29811:29825	5228153	2	True				
ANR	5228183	ParameterType	bool		5228153	0					
ANR	5228184	Identifier	esc_bslash		5228153	1					
ANR	5228185	CFGEntryNode	ENTRY		5228153		True				
ANR	5228186	CFGExitNode	EXIT		5228153		True				
ANR	5228187	Symbol	buf		5228153						
ANR	5228188	Symbol	R_STRING_ENC_UTF8		5228153						
ANR	5228189	Symbol	esc_bslash		5228153						
ANR	5228190	Symbol	show_asciidot		5228153						
ANR	5228191	Symbol	r_str_escape_utf		5228153						
ANR	5228192	Function	r_str_escape_utf16le	1424:0:29915:30109							
ANR	5228193	FunctionDef	"r_str_escape_utf16le (const char * buf , int buf_size , bool show_asciidot , bool esc_bslash)"		5228192	0					
ANR	5228194	CompoundStatement		1424:101:30016:30109	5228192	0					
ANR	5228195	ReturnStatement	"return r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF16LE , show_asciidot , esc_bslash ) ;"	1425:1:30019:30107	5228192	0	True				
ANR	5228196	CallExpression	"r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF16LE , show_asciidot , esc_bslash )"		5228192	0					
ANR	5228197	Callee	r_str_escape_utf		5228192	0					
ANR	5228198	Identifier	r_str_escape_utf		5228192	0					
ANR	5228199	ArgumentList	buf		5228192	1					
ANR	5228200	Argument	buf		5228192	0					
ANR	5228201	Identifier	buf		5228192	0					
ANR	5228202	Argument	buf_size		5228192	1					
ANR	5228203	Identifier	buf_size		5228192	0					
ANR	5228204	Argument	R_STRING_ENC_UTF16LE		5228192	2					
ANR	5228205	Identifier	R_STRING_ENC_UTF16LE		5228192	0					
ANR	5228206	Argument	show_asciidot		5228192	3					
ANR	5228207	Identifier	show_asciidot		5228192	0					
ANR	5228208	Argument	esc_bslash		5228192	4					
ANR	5228209	Identifier	esc_bslash		5228192	0					
ANR	5228210	ReturnType	R_API char *		5228192	1					
ANR	5228211	Identifier	r_str_escape_utf16le		5228192	2					
ANR	5228212	ParameterList	"const char * buf , int buf_size , bool show_asciidot , bool esc_bslash"		5228192	3					
ANR	5228213	Parameter	const char * buf	1424:33:29948:29962	5228192	0	True				
ANR	5228214	ParameterType	const char *		5228192	0					
ANR	5228215	Identifier	buf		5228192	1					
ANR	5228216	Parameter	int buf_size	1424:50:29965:29976	5228192	1	True				
ANR	5228217	ParameterType	int		5228192	0					
ANR	5228218	Identifier	buf_size		5228192	1					
ANR	5228219	Parameter	bool show_asciidot	1424:64:29979:29996	5228192	2	True				
ANR	5228220	ParameterType	bool		5228192	0					
ANR	5228221	Identifier	show_asciidot		5228192	1					
ANR	5228222	Parameter	bool esc_bslash	1424:84:29999:30013	5228192	3	True				
ANR	5228223	ParameterType	bool		5228192	0					
ANR	5228224	Identifier	esc_bslash		5228192	1					
ANR	5228225	CFGEntryNode	ENTRY		5228192		True				
ANR	5228226	CFGExitNode	EXIT		5228192		True				
ANR	5228227	Symbol	buf		5228192						
ANR	5228228	Symbol	buf_size		5228192						
ANR	5228229	Symbol	esc_bslash		5228192						
ANR	5228230	Symbol	show_asciidot		5228192						
ANR	5228231	Symbol	r_str_escape_utf		5228192						
ANR	5228232	Symbol	R_STRING_ENC_UTF16LE		5228192						
ANR	5228233	Function	r_str_escape_utf32le	1428:0:30112:30306							
ANR	5228234	FunctionDef	"r_str_escape_utf32le (const char * buf , int buf_size , bool show_asciidot , bool esc_bslash)"		5228233	0					
ANR	5228235	CompoundStatement		1428:101:30213:30306	5228233	0					
ANR	5228236	ReturnStatement	"return r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF32LE , show_asciidot , esc_bslash ) ;"	1429:1:30216:30304	5228233	0	True				
ANR	5228237	CallExpression	"r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF32LE , show_asciidot , esc_bslash )"		5228233	0					
ANR	5228238	Callee	r_str_escape_utf		5228233	0					
ANR	5228239	Identifier	r_str_escape_utf		5228233	0					
ANR	5228240	ArgumentList	buf		5228233	1					
ANR	5228241	Argument	buf		5228233	0					
ANR	5228242	Identifier	buf		5228233	0					
ANR	5228243	Argument	buf_size		5228233	1					
ANR	5228244	Identifier	buf_size		5228233	0					
ANR	5228245	Argument	R_STRING_ENC_UTF32LE		5228233	2					
ANR	5228246	Identifier	R_STRING_ENC_UTF32LE		5228233	0					
ANR	5228247	Argument	show_asciidot		5228233	3					
ANR	5228248	Identifier	show_asciidot		5228233	0					
ANR	5228249	Argument	esc_bslash		5228233	4					
ANR	5228250	Identifier	esc_bslash		5228233	0					
ANR	5228251	ReturnType	R_API char *		5228233	1					
ANR	5228252	Identifier	r_str_escape_utf32le		5228233	2					
ANR	5228253	ParameterList	"const char * buf , int buf_size , bool show_asciidot , bool esc_bslash"		5228233	3					
ANR	5228254	Parameter	const char * buf	1428:33:30145:30159	5228233	0	True				
ANR	5228255	ParameterType	const char *		5228233	0					
ANR	5228256	Identifier	buf		5228233	1					
ANR	5228257	Parameter	int buf_size	1428:50:30162:30173	5228233	1	True				
ANR	5228258	ParameterType	int		5228233	0					
ANR	5228259	Identifier	buf_size		5228233	1					
ANR	5228260	Parameter	bool show_asciidot	1428:64:30176:30193	5228233	2	True				
ANR	5228261	ParameterType	bool		5228233	0					
ANR	5228262	Identifier	show_asciidot		5228233	1					
ANR	5228263	Parameter	bool esc_bslash	1428:84:30196:30210	5228233	3	True				
ANR	5228264	ParameterType	bool		5228233	0					
ANR	5228265	Identifier	esc_bslash		5228233	1					
ANR	5228266	CFGEntryNode	ENTRY		5228233		True				
ANR	5228267	CFGExitNode	EXIT		5228233		True				
ANR	5228268	Symbol	buf		5228233						
ANR	5228269	Symbol	buf_size		5228233						
ANR	5228270	Symbol	esc_bslash		5228233						
ANR	5228271	Symbol	show_asciidot		5228233						
ANR	5228272	Symbol	R_STRING_ENC_UTF32LE		5228233						
ANR	5228273	Symbol	r_str_escape_utf		5228233						
ANR	5228274	Function	r_str_escape_utf8_for_json	1434:0:30428:33050							
ANR	5228275	FunctionDef	"r_str_escape_utf8_for_json (const char * buf , int buf_size)"		5228274	0					
ANR	5228276	CompoundStatement		1434:70:30498:33050	5228274	0					
ANR	5228277	IdentifierDeclStatement	"char * new_buf , * q ;"	1435:1:30501:30518	5228274	0	True				
ANR	5228278	IdentifierDecl	* new_buf		5228274	0					
ANR	5228279	IdentifierDeclType	char *		5228274	0					
ANR	5228280	Identifier	new_buf		5228274	1					
ANR	5228281	IdentifierDecl	* q		5228274	1					
ANR	5228282	IdentifierDeclType	char *		5228274	0					
ANR	5228283	Identifier	q		5228274	1					
ANR	5228284	IdentifierDeclStatement	"const char * p , * end ;"	1436:1:30521:30540	5228274	1	True				
ANR	5228285	IdentifierDecl	* p		5228274	0					
ANR	5228286	IdentifierDeclType	const char *		5228274	0					
ANR	5228287	Identifier	p		5228274	1					
ANR	5228288	IdentifierDecl	* end		5228274	1					
ANR	5228289	IdentifierDeclType	const char *		5228274	0					
ANR	5228290	Identifier	end		5228274	1					
ANR	5228291	IdentifierDeclStatement	RRune ch ;	1437:1:30543:30551	5228274	2	True				
ANR	5228292	IdentifierDecl	ch		5228274	0					
ANR	5228293	IdentifierDeclType	RRune		5228274	0					
ANR	5228294	Identifier	ch		5228274	1					
ANR	5228295	IdentifierDeclStatement	"int i , len , ch_bytes ;"	1438:1:30554:30574	5228274	3	True				
ANR	5228296	IdentifierDecl	i		5228274	0					
ANR	5228297	IdentifierDeclType	int		5228274	0					
ANR	5228298	Identifier	i		5228274	1					
ANR	5228299	IdentifierDecl	len		5228274	1					
ANR	5228300	IdentifierDeclType	int		5228274	0					
ANR	5228301	Identifier	len		5228274	1					
ANR	5228302	IdentifierDecl	ch_bytes		5228274	2					
ANR	5228303	IdentifierDeclType	int		5228274	0					
ANR	5228304	Identifier	ch_bytes		5228274	1					
ANR	5228305	IfStatement	if ( ! buf )		5228274	4					
ANR	5228306	Condition	! buf	1440:5:30582:30585	5228274	0	True				
ANR	5228307	UnaryOperationExpression	! buf		5228274	0					
ANR	5228308	UnaryOperator	!		5228274	0					
ANR	5228309	Identifier	buf		5228274	1					
ANR	5228310	CompoundStatement		7:11:89:89	5228274	1					
ANR	5228311	ReturnStatement	return NULL ;	1441:2:30592:30603	5228274	0	True				
ANR	5228312	Identifier	NULL		5228274	0					
ANR	5228313	ExpressionStatement	len = buf_size < 0 ? strlen ( buf ) : buf_size	1443:1:30609:30653	5228274	5	True				
ANR	5228314	AssignmentExpression	len = buf_size < 0 ? strlen ( buf ) : buf_size		5228274	0		=			
ANR	5228315	Identifier	len		5228274	0					
ANR	5228316	ConditionalExpression	buf_size < 0 ? strlen ( buf ) : buf_size		5228274	1					
ANR	5228317	Condition	buf_size < 0		5228274	0					
ANR	5228318	RelationalExpression	buf_size < 0		5228274	0		<			
ANR	5228319	Identifier	buf_size		5228274	0					
ANR	5228320	PrimaryExpression	0		5228274	1					
ANR	5228321	CallExpression	strlen ( buf )		5228274	1					
ANR	5228322	Callee	strlen		5228274	0					
ANR	5228323	Identifier	strlen		5228274	0					
ANR	5228324	ArgumentList	buf		5228274	1					
ANR	5228325	Argument	buf		5228274	0					
ANR	5228326	Identifier	buf		5228274	0					
ANR	5228327	Identifier	buf_size		5228274	2					
ANR	5228328	ExpressionStatement	end = buf + len	1444:1:30656:30671	5228274	6	True				
ANR	5228329	AssignmentExpression	end = buf + len		5228274	0		=			
ANR	5228330	Identifier	end		5228274	0					
ANR	5228331	AdditiveExpression	buf + len		5228274	1		+			
ANR	5228332	Identifier	buf		5228274	0					
ANR	5228333	Identifier	len		5228274	1					
ANR	5228334	ExpressionStatement	new_buf = malloc ( 1 + ( len * 6 ) )	1446:1:30734:30766	5228274	7	True				
ANR	5228335	AssignmentExpression	new_buf = malloc ( 1 + ( len * 6 ) )		5228274	0		=			
ANR	5228336	Identifier	new_buf		5228274	0					
ANR	5228337	CallExpression	malloc ( 1 + ( len * 6 ) )		5228274	1					
ANR	5228338	Callee	malloc		5228274	0					
ANR	5228339	Identifier	malloc		5228274	0					
ANR	5228340	ArgumentList	1 + ( len * 6 )		5228274	1					
ANR	5228341	Argument	1 + ( len * 6 )		5228274	0					
ANR	5228342	AdditiveExpression	1 + ( len * 6 )		5228274	0		+			
ANR	5228343	PrimaryExpression	1		5228274	0					
ANR	5228344	MultiplicativeExpression	len * 6		5228274	1		*			
ANR	5228345	Identifier	len		5228274	0					
ANR	5228346	PrimaryExpression	6		5228274	1					
ANR	5228347	IfStatement	if ( ! new_buf )		5228274	8					
ANR	5228348	Condition	! new_buf	1447:5:30773:30780	5228274	0	True				
ANR	5228349	UnaryOperationExpression	! new_buf		5228274	0					
ANR	5228350	UnaryOperator	!		5228274	0					
ANR	5228351	Identifier	new_buf		5228274	1					
ANR	5228352	CompoundStatement		14:15:284:284	5228274	1					
ANR	5228353	ReturnStatement	return NULL ;	1448:2:30787:30798	5228274	0	True				
ANR	5228354	Identifier	NULL		5228274	0					
ANR	5228355	ExpressionStatement	p = buf	1450:1:30804:30811	5228274	9	True				
ANR	5228356	AssignmentExpression	p = buf		5228274	0		=			
ANR	5228357	Identifier	p		5228274	0					
ANR	5228358	Identifier	buf		5228274	1					
ANR	5228359	ExpressionStatement	q = new_buf	1451:1:30814:30825	5228274	10	True				
ANR	5228360	AssignmentExpression	q = new_buf		5228274	0		=			
ANR	5228361	Identifier	q		5228274	0					
ANR	5228362	Identifier	new_buf		5228274	1					
ANR	5228363	WhileStatement	while ( p < end )		5228274	11					
ANR	5228364	Condition	p < end	1452:8:30835:30841	5228274	0	True				
ANR	5228365	RelationalExpression	p < end		5228274	0		<			
ANR	5228366	Identifier	p		5228274	0					
ANR	5228367	Identifier	end		5228274	1					
ANR	5228368	CompoundStatement		19:17:345:345	5228274	1					
ANR	5228369	ExpressionStatement	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"	1453:2:30848:30897	5228274	0	True				
ANR	5228370	AssignmentExpression	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		5228274	0		=			
ANR	5228371	Identifier	ch_bytes		5228274	0					
ANR	5228372	CallExpression	"r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		5228274	1					
ANR	5228373	Callee	r_utf8_decode		5228274	0					
ANR	5228374	Identifier	r_utf8_decode		5228274	0					
ANR	5228375	ArgumentList	( ut8 * ) p		5228274	1					
ANR	5228376	Argument	( ut8 * ) p		5228274	0					
ANR	5228377	CastExpression	( ut8 * ) p		5228274	0					
ANR	5228378	CastTarget	ut8 *		5228274	0					
ANR	5228379	Identifier	p		5228274	1					
ANR	5228380	Argument	end - p		5228274	1					
ANR	5228381	AdditiveExpression	end - p		5228274	0		-			
ANR	5228382	Identifier	end		5228274	0					
ANR	5228383	Identifier	p		5228274	1					
ANR	5228384	Argument	& ch		5228274	2					
ANR	5228385	UnaryOperationExpression	& ch		5228274	0					
ANR	5228386	UnaryOperator	&		5228274	0					
ANR	5228387	Identifier	ch		5228274	1					
ANR	5228388	IfStatement	if ( ch_bytes == 1 )		5228274	1					
ANR	5228389	Condition	ch_bytes == 1	1454:6:30905:30917	5228274	0	True				
ANR	5228390	EqualityExpression	ch_bytes == 1		5228274	0		==			
ANR	5228391	Identifier	ch_bytes		5228274	0					
ANR	5228392	PrimaryExpression	1		5228274	1					
ANR	5228393	CompoundStatement		21:21:421:421	5228274	1					
ANR	5228394	SwitchStatement	switch ( * p )		5228274	0					
ANR	5228395	Condition	* p	1455:11:30933:30934	5228274	0	True				
ANR	5228396	UnaryOperationExpression	* p		5228274	0					
ANR	5228397	UnaryOperator	*		5228274	0					
ANR	5228398	Identifier	p		5228274	1					
ANR	5228399	CompoundStatement		22:15:438:438	5228274	1					
ANR	5228400	Label	case '\\n' :	1456:3:30942:30951	5228274	0	True				
ANR	5228401	ExpressionStatement	* q ++ = '\\\\'	1457:4:30957:30968	5228274	1	True				
ANR	5228402	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228403	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228404	UnaryOperator	*		5228274	0					
ANR	5228405	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228406	Identifier	q		5228274	0					
ANR	5228407	IncDec	++		5228274	1					
ANR	5228408	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228409	ExpressionStatement	* q ++ = 'n'	1458:4:30974:30984	5228274	2	True				
ANR	5228410	AssignmentExpression	* q ++ = 'n'		5228274	0		=			
ANR	5228411	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228412	UnaryOperator	*		5228274	0					
ANR	5228413	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228414	Identifier	q		5228274	0					
ANR	5228415	IncDec	++		5228274	1					
ANR	5228416	PrimaryExpression	'n'		5228274	1					
ANR	5228417	BreakStatement	break ;	1459:4:30990:30995	5228274	3	True				
ANR	5228418	Label	case '\\r' :	1460:3:31000:31009	5228274	4	True				
ANR	5228419	ExpressionStatement	* q ++ = '\\\\'	1461:4:31015:31026	5228274	5	True				
ANR	5228420	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228421	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228422	UnaryOperator	*		5228274	0					
ANR	5228423	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228424	Identifier	q		5228274	0					
ANR	5228425	IncDec	++		5228274	1					
ANR	5228426	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228427	ExpressionStatement	* q ++ = 'r'	1462:4:31032:31042	5228274	6	True				
ANR	5228428	AssignmentExpression	* q ++ = 'r'		5228274	0		=			
ANR	5228429	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228430	UnaryOperator	*		5228274	0					
ANR	5228431	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228432	Identifier	q		5228274	0					
ANR	5228433	IncDec	++		5228274	1					
ANR	5228434	PrimaryExpression	'r'		5228274	1					
ANR	5228435	BreakStatement	break ;	1463:4:31048:31053	5228274	7	True				
ANR	5228436	Label	case '\\\\' :	1464:3:31058:31067	5228274	8	True				
ANR	5228437	ExpressionStatement	* q ++ = '\\\\'	1465:4:31073:31084	5228274	9	True				
ANR	5228438	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228439	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228440	UnaryOperator	*		5228274	0					
ANR	5228441	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228442	Identifier	q		5228274	0					
ANR	5228443	IncDec	++		5228274	1					
ANR	5228444	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228445	ExpressionStatement	* q ++ = '\\\\'	1466:4:31090:31101	5228274	10	True				
ANR	5228446	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228447	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228448	UnaryOperator	*		5228274	0					
ANR	5228449	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228450	Identifier	q		5228274	0					
ANR	5228451	IncDec	++		5228274	1					
ANR	5228452	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228453	BreakStatement	break ;	1467:4:31107:31112	5228274	11	True				
ANR	5228454	Label	case '/' :	1469:3:31123:31131	5228274	12	True				
ANR	5228455	ExpressionStatement	* q ++ = '\\\\'	1470:4:31201:31212	5228274	13	True				
ANR	5228456	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228457	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228458	UnaryOperator	*		5228274	0					
ANR	5228459	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228460	Identifier	q		5228274	0					
ANR	5228461	IncDec	++		5228274	1					
ANR	5228462	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228463	ExpressionStatement	* q ++ = '/'	1471:4:31218:31228	5228274	14	True				
ANR	5228464	AssignmentExpression	* q ++ = '/'		5228274	0		=			
ANR	5228465	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228466	UnaryOperator	*		5228274	0					
ANR	5228467	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228468	Identifier	q		5228274	0					
ANR	5228469	IncDec	++		5228274	1					
ANR	5228470	PrimaryExpression	'/'		5228274	1					
ANR	5228471	BreakStatement	break ;	1472:4:31234:31239	5228274	15	True				
ANR	5228472	Label	case '\\t' :	1474:3:31251:31260	5228274	16	True				
ANR	5228473	ExpressionStatement	* q ++ = '\\\\'	1475:4:31266:31277	5228274	17	True				
ANR	5228474	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228475	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228476	UnaryOperator	*		5228274	0					
ANR	5228477	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228478	Identifier	q		5228274	0					
ANR	5228479	IncDec	++		5228274	1					
ANR	5228480	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228481	ExpressionStatement	* q ++ = 't'	1476:4:31283:31293	5228274	18	True				
ANR	5228482	AssignmentExpression	* q ++ = 't'		5228274	0		=			
ANR	5228483	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228484	UnaryOperator	*		5228274	0					
ANR	5228485	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228486	Identifier	q		5228274	0					
ANR	5228487	IncDec	++		5228274	1					
ANR	5228488	PrimaryExpression	't'		5228274	1					
ANR	5228489	BreakStatement	break ;	1477:4:31299:31304	5228274	19	True				
ANR	5228490	Label	"case '""' :"	1478:3:31309:31318	5228274	20	True				
ANR	5228491	ExpressionStatement	* q ++ = '\\\\'	1479:4:31324:31335	5228274	21	True				
ANR	5228492	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228493	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228494	UnaryOperator	*		5228274	0					
ANR	5228495	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228496	Identifier	q		5228274	0					
ANR	5228497	IncDec	++		5228274	1					
ANR	5228498	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228499	ExpressionStatement	"* q ++ = '""'"	1480:4:31341:31351	5228274	22	True				
ANR	5228500	AssignmentExpression	"* q ++ = '""'"		5228274	0		=			
ANR	5228501	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228502	UnaryOperator	*		5228274	0					
ANR	5228503	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228504	Identifier	q		5228274	0					
ANR	5228505	IncDec	++		5228274	1					
ANR	5228506	PrimaryExpression	"'""'"		5228274	1					
ANR	5228507	BreakStatement	break ;	1481:4:31357:31362	5228274	23	True				
ANR	5228508	Label	case '\\f' :	1482:3:31367:31376	5228274	24	True				
ANR	5228509	ExpressionStatement	* q ++ = '\\\\'	1483:4:31382:31393	5228274	25	True				
ANR	5228510	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228511	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228512	UnaryOperator	*		5228274	0					
ANR	5228513	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228514	Identifier	q		5228274	0					
ANR	5228515	IncDec	++		5228274	1					
ANR	5228516	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228517	ExpressionStatement	* q ++ = 'f'	1484:4:31399:31409	5228274	26	True				
ANR	5228518	AssignmentExpression	* q ++ = 'f'		5228274	0		=			
ANR	5228519	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228520	UnaryOperator	*		5228274	0					
ANR	5228521	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228522	Identifier	q		5228274	0					
ANR	5228523	IncDec	++		5228274	1					
ANR	5228524	PrimaryExpression	'f'		5228274	1					
ANR	5228525	BreakStatement	break ;	1485:4:31415:31420	5228274	27	True				
ANR	5228526	Label	case '\\b' :	1486:3:31425:31434	5228274	28	True				
ANR	5228527	ExpressionStatement	* q ++ = '\\\\'	1487:4:31440:31451	5228274	29	True				
ANR	5228528	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228529	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228530	UnaryOperator	*		5228274	0					
ANR	5228531	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228532	Identifier	q		5228274	0					
ANR	5228533	IncDec	++		5228274	1					
ANR	5228534	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228535	ExpressionStatement	* q ++ = 'b'	1488:4:31457:31467	5228274	30	True				
ANR	5228536	AssignmentExpression	* q ++ = 'b'		5228274	0		=			
ANR	5228537	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228538	UnaryOperator	*		5228274	0					
ANR	5228539	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228540	Identifier	q		5228274	0					
ANR	5228541	IncDec	++		5228274	1					
ANR	5228542	PrimaryExpression	'b'		5228274	1					
ANR	5228543	BreakStatement	break ;	1489:4:31473:31478	5228274	31	True				
ANR	5228544	Label	default :	1490:3:31483:31490	5228274	32	True				
ANR	5228545	Identifier	default		5228274	0					
ANR	5228546	IfStatement	if ( ! IS_PRINTABLE ( * p ) )		5228274	33					
ANR	5228547	Condition	! IS_PRINTABLE ( * p )	1491:8:31500:31517	5228274	0	True				
ANR	5228548	UnaryOperationExpression	! IS_PRINTABLE ( * p )		5228274	0					
ANR	5228549	UnaryOperator	!		5228274	0					
ANR	5228550	CallExpression	IS_PRINTABLE ( * p )		5228274	1					
ANR	5228551	Callee	IS_PRINTABLE		5228274	0					
ANR	5228552	Identifier	IS_PRINTABLE		5228274	0					
ANR	5228553	ArgumentList	* p		5228274	1					
ANR	5228554	Argument	* p		5228274	0					
ANR	5228555	UnaryOperationExpression	* p		5228274	0					
ANR	5228556	UnaryOperator	*		5228274	0					
ANR	5228557	Identifier	p		5228274	1					
ANR	5228558	CompoundStatement		58:28:1021:1021	5228274	1					
ANR	5228559	ExpressionStatement	* q ++ = '\\\\'	1492:5:31527:31538	5228274	0	True				
ANR	5228560	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228561	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228562	UnaryOperator	*		5228274	0					
ANR	5228563	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228564	Identifier	q		5228274	0					
ANR	5228565	IncDec	++		5228274	1					
ANR	5228566	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228567	ExpressionStatement	* q ++ = 'u'	1493:5:31545:31555	5228274	1	True				
ANR	5228568	AssignmentExpression	* q ++ = 'u'		5228274	0		=			
ANR	5228569	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228570	UnaryOperator	*		5228274	0					
ANR	5228571	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228572	Identifier	q		5228274	0					
ANR	5228573	IncDec	++		5228274	1					
ANR	5228574	PrimaryExpression	'u'		5228274	1					
ANR	5228575	ExpressionStatement	* q ++ = '0'	1494:5:31562:31572	5228274	2	True				
ANR	5228576	AssignmentExpression	* q ++ = '0'		5228274	0		=			
ANR	5228577	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228578	UnaryOperator	*		5228274	0					
ANR	5228579	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228580	Identifier	q		5228274	0					
ANR	5228581	IncDec	++		5228274	1					
ANR	5228582	PrimaryExpression	'0'		5228274	1					
ANR	5228583	ExpressionStatement	* q ++ = '0'	1495:5:31579:31589	5228274	3	True				
ANR	5228584	AssignmentExpression	* q ++ = '0'		5228274	0		=			
ANR	5228585	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228586	UnaryOperator	*		5228274	0					
ANR	5228587	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228588	Identifier	q		5228274	0					
ANR	5228589	IncDec	++		5228274	1					
ANR	5228590	PrimaryExpression	'0'		5228274	1					
ANR	5228591	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1496:5:31596:31636	5228274	4	True				
ANR	5228592	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5228274	0		=			
ANR	5228593	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228594	UnaryOperator	*		5228274	0					
ANR	5228595	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228596	Identifier	q		5228274	0					
ANR	5228597	IncDec	++		5228274	1					
ANR	5228598	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5228274	1					
ANR	5228599	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228600	BitAndExpression	* p >> 4 & 0xf		5228274	1		&			
ANR	5228601	ShiftExpression	* p >> 4		5228274	0		>>			
ANR	5228602	UnaryOperationExpression	* p		5228274	0					
ANR	5228603	UnaryOperator	*		5228274	0					
ANR	5228604	Identifier	p		5228274	1					
ANR	5228605	PrimaryExpression	4		5228274	1					
ANR	5228606	PrimaryExpression	0xf		5228274	1					
ANR	5228607	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1497:5:31643:31678	5228274	5	True				
ANR	5228608	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		5228274	0		=			
ANR	5228609	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228610	UnaryOperator	*		5228274	0					
ANR	5228611	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228612	Identifier	q		5228274	0					
ANR	5228613	IncDec	++		5228274	1					
ANR	5228614	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		5228274	1					
ANR	5228615	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228616	BitAndExpression	* p & 0xf		5228274	1		&			
ANR	5228617	UnaryOperationExpression	* p		5228274	0					
ANR	5228618	UnaryOperator	*		5228274	0					
ANR	5228619	Identifier	p		5228274	1					
ANR	5228620	PrimaryExpression	0xf		5228274	1					
ANR	5228621	ElseStatement	else		5228274	0					
ANR	5228622	CompoundStatement		65:11:1192:1192	5228274	0					
ANR	5228623	ExpressionStatement	* q ++ = * p	1499:5:31698:31707	5228274	0	True				
ANR	5228624	AssignmentExpression	* q ++ = * p		5228274	0		=			
ANR	5228625	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228626	UnaryOperator	*		5228274	0					
ANR	5228627	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228628	Identifier	q		5228274	0					
ANR	5228629	IncDec	++		5228274	1					
ANR	5228630	UnaryOperationExpression	* p		5228274	1					
ANR	5228631	UnaryOperator	*		5228274	0					
ANR	5228632	Identifier	p		5228274	1					
ANR	5228633	ElseStatement	else		5228274	0					
ANR	5228634	IfStatement	if ( ch_bytes == 4 )		5228274	0					
ANR	5228635	Condition	ch_bytes == 4	1502:13:31733:31745	5228274	0	True				
ANR	5228636	EqualityExpression	ch_bytes == 4		5228274	0		==			
ANR	5228637	Identifier	ch_bytes		5228274	0					
ANR	5228638	PrimaryExpression	4		5228274	1					
ANR	5228639	CompoundStatement		69:28:1249:1249	5228274	1					
ANR	5228640	IfStatement	if ( r_isprint ( ch ) )		5228274	0					
ANR	5228641	Condition	r_isprint ( ch )	1503:7:31757:31770	5228274	0	True				
ANR	5228642	CallExpression	r_isprint ( ch )		5228274	0					
ANR	5228643	Callee	r_isprint		5228274	0					
ANR	5228644	Identifier	r_isprint		5228274	0					
ANR	5228645	ArgumentList	ch		5228274	1					
ANR	5228646	Argument	ch		5228274	0					
ANR	5228647	Identifier	ch		5228274	0					
ANR	5228648	CompoundStatement		70:23:1274:1274	5228274	1					
ANR	5228649	ForStatement	for ( i = 0 ; i < ch_bytes ; i ++ )		5228274	0					
ANR	5228650	ForInit	i = 0 ;	1505:9:31819:31824	5228274	0	True				
ANR	5228651	AssignmentExpression	i = 0		5228274	0		=			
ANR	5228652	Identifier	i		5228274	0					
ANR	5228653	PrimaryExpression	0		5228274	1					
ANR	5228654	Condition	i < ch_bytes	1505:16:31826:31837	5228274	1	True				
ANR	5228655	RelationalExpression	i < ch_bytes		5228274	0		<			
ANR	5228656	Identifier	i		5228274	0					
ANR	5228657	Identifier	ch_bytes		5228274	1					
ANR	5228658	PostIncDecOperationExpression	i ++	1505:30:31840:31842	5228274	2	True				
ANR	5228659	Identifier	i		5228274	0					
ANR	5228660	IncDec	++		5228274	1					
ANR	5228661	CompoundStatement		72:35:1346:1346	5228274	3					
ANR	5228662	ExpressionStatement	* q ++ = * ( p + i )	1506:5:31852:31867	5228274	0	True				
ANR	5228663	AssignmentExpression	* q ++ = * ( p + i )		5228274	0		=			
ANR	5228664	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228665	UnaryOperator	*		5228274	0					
ANR	5228666	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228667	Identifier	q		5228274	0					
ANR	5228668	IncDec	++		5228274	1					
ANR	5228669	UnaryOperationExpression	* ( p + i )		5228274	1					
ANR	5228670	UnaryOperator	*		5228274	0					
ANR	5228671	AdditiveExpression	p + i		5228274	1		+			
ANR	5228672	Identifier	p		5228274	0					
ANR	5228673	Identifier	i		5228274	1					
ANR	5228674	ElseStatement	else		5228274	0					
ANR	5228675	CompoundStatement		76:4:1392:1407	5228274	0					
ANR	5228676	IdentifierDeclStatement	"RRune high , low ;"	1509:4:31891:31906	5228274	0	True				
ANR	5228677	IdentifierDecl	high		5228274	0					
ANR	5228678	IdentifierDeclType	RRune		5228274	0					
ANR	5228679	Identifier	high		5228274	1					
ANR	5228680	IdentifierDecl	low		5228274	1					
ANR	5228681	IdentifierDeclType	RRune		5228274	0					
ANR	5228682	Identifier	low		5228274	1					
ANR	5228683	ExpressionStatement	ch -= 0x10000	1510:4:31912:31925	5228274	1	True				
ANR	5228684	AssignmentExpression	ch -= 0x10000		5228274	0		-=			
ANR	5228685	Identifier	ch		5228274	0					
ANR	5228686	PrimaryExpression	0x10000		5228274	1					
ANR	5228687	ExpressionStatement	high = 0xd800 + ( ch >> 10 & 0x3ff )	1511:4:31931:31965	5228274	2	True				
ANR	5228688	AssignmentExpression	high = 0xd800 + ( ch >> 10 & 0x3ff )		5228274	0		=			
ANR	5228689	Identifier	high		5228274	0					
ANR	5228690	AdditiveExpression	0xd800 + ( ch >> 10 & 0x3ff )		5228274	1		+			
ANR	5228691	PrimaryExpression	0xd800		5228274	0					
ANR	5228692	BitAndExpression	ch >> 10 & 0x3ff		5228274	1		&			
ANR	5228693	ShiftExpression	ch >> 10		5228274	0		>>			
ANR	5228694	Identifier	ch		5228274	0					
ANR	5228695	PrimaryExpression	10		5228274	1					
ANR	5228696	PrimaryExpression	0x3ff		5228274	1					
ANR	5228697	ExpressionStatement	low = 0xdc00 + ( ch & 0x3ff )	1512:4:31971:31998	5228274	3	True				
ANR	5228698	AssignmentExpression	low = 0xdc00 + ( ch & 0x3ff )		5228274	0		=			
ANR	5228699	Identifier	low		5228274	0					
ANR	5228700	AdditiveExpression	0xdc00 + ( ch & 0x3ff )		5228274	1		+			
ANR	5228701	PrimaryExpression	0xdc00		5228274	0					
ANR	5228702	BitAndExpression	ch & 0x3ff		5228274	1		&			
ANR	5228703	Identifier	ch		5228274	0					
ANR	5228704	PrimaryExpression	0x3ff		5228274	1					
ANR	5228705	ExpressionStatement	* q ++ = '\\\\'	1513:4:32004:32015	5228274	4	True				
ANR	5228706	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228707	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228708	UnaryOperator	*		5228274	0					
ANR	5228709	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228710	Identifier	q		5228274	0					
ANR	5228711	IncDec	++		5228274	1					
ANR	5228712	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228713	ExpressionStatement	* q ++ = 'u'	1514:4:32021:32031	5228274	5	True				
ANR	5228714	AssignmentExpression	* q ++ = 'u'		5228274	0		=			
ANR	5228715	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228716	UnaryOperator	*		5228274	0					
ANR	5228717	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228718	Identifier	q		5228274	0					
ANR	5228719	IncDec	++		5228274	1					
ANR	5228720	PrimaryExpression	'u'		5228274	1					
ANR	5228721	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		5228274	6					
ANR	5228722	ForInit	i = 2 ;	1515:9:32042:32047	5228274	0	True				
ANR	5228723	AssignmentExpression	i = 2		5228274	0		=			
ANR	5228724	Identifier	i		5228274	0					
ANR	5228725	PrimaryExpression	2		5228274	1					
ANR	5228726	Condition	i >= 0	1515:16:32049:32054	5228274	1	True				
ANR	5228727	RelationalExpression	i >= 0		5228274	0		>=			
ANR	5228728	Identifier	i		5228274	0					
ANR	5228729	PrimaryExpression	0		5228274	1					
ANR	5228730	AssignmentExpression	i -= 2	1515:24:32057:32062	5228274	2	True	-=			
ANR	5228731	Identifier	i		5228274	0					
ANR	5228732	PrimaryExpression	2		5228274	1					
ANR	5228733	CompoundStatement		82:32:1566:1566	5228274	3					
ANR	5228734	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"	1516:5:32072:32124	5228274	0	True				
ANR	5228735	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"		5228274	0		=			
ANR	5228736	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228737	UnaryOperator	*		5228274	0					
ANR	5228738	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228739	Identifier	q		5228274	0					
ANR	5228740	IncDec	++		5228274	1					
ANR	5228741	ArrayIndexing	"""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"		5228274	1					
ANR	5228742	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228743	BitAndExpression	high >> 4 * ( i + 1 ) & 0xf		5228274	1		&			
ANR	5228744	ShiftExpression	high >> 4 * ( i + 1 )		5228274	0		>>			
ANR	5228745	Identifier	high		5228274	0					
ANR	5228746	MultiplicativeExpression	4 * ( i + 1 )		5228274	1		*			
ANR	5228747	PrimaryExpression	4		5228274	0					
ANR	5228748	AdditiveExpression	i + 1		5228274	1		+			
ANR	5228749	Identifier	i		5228274	0					
ANR	5228750	PrimaryExpression	1		5228274	1					
ANR	5228751	PrimaryExpression	0xf		5228274	1					
ANR	5228752	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ high >> 4 * i & 0xf ]"	1517:5:32131:32177	5228274	1	True				
ANR	5228753	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ high >> 4 * i & 0xf ]"		5228274	0		=			
ANR	5228754	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228755	UnaryOperator	*		5228274	0					
ANR	5228756	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228757	Identifier	q		5228274	0					
ANR	5228758	IncDec	++		5228274	1					
ANR	5228759	ArrayIndexing	"""0123456789abcdef"" [ high >> 4 * i & 0xf ]"		5228274	1					
ANR	5228760	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228761	BitAndExpression	high >> 4 * i & 0xf		5228274	1		&			
ANR	5228762	ShiftExpression	high >> 4 * i		5228274	0		>>			
ANR	5228763	Identifier	high		5228274	0					
ANR	5228764	MultiplicativeExpression	4 * i		5228274	1		*			
ANR	5228765	PrimaryExpression	4		5228274	0					
ANR	5228766	Identifier	i		5228274	1					
ANR	5228767	PrimaryExpression	0xf		5228274	1					
ANR	5228768	ExpressionStatement	* q ++ = '\\\\'	1519:4:32189:32200	5228274	7	True				
ANR	5228769	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228770	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228771	UnaryOperator	*		5228274	0					
ANR	5228772	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228773	Identifier	q		5228274	0					
ANR	5228774	IncDec	++		5228274	1					
ANR	5228775	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228776	ExpressionStatement	* q ++ = 'u'	1520:4:32206:32216	5228274	8	True				
ANR	5228777	AssignmentExpression	* q ++ = 'u'		5228274	0		=			
ANR	5228778	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228779	UnaryOperator	*		5228274	0					
ANR	5228780	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228781	Identifier	q		5228274	0					
ANR	5228782	IncDec	++		5228274	1					
ANR	5228783	PrimaryExpression	'u'		5228274	1					
ANR	5228784	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		5228274	9					
ANR	5228785	ForInit	i = 2 ;	1521:9:32227:32232	5228274	0	True				
ANR	5228786	AssignmentExpression	i = 2		5228274	0		=			
ANR	5228787	Identifier	i		5228274	0					
ANR	5228788	PrimaryExpression	2		5228274	1					
ANR	5228789	Condition	i >= 0	1521:16:32234:32239	5228274	1	True				
ANR	5228790	RelationalExpression	i >= 0		5228274	0		>=			
ANR	5228791	Identifier	i		5228274	0					
ANR	5228792	PrimaryExpression	0		5228274	1					
ANR	5228793	AssignmentExpression	i -= 2	1521:24:32242:32247	5228274	2	True	-=			
ANR	5228794	Identifier	i		5228274	0					
ANR	5228795	PrimaryExpression	2		5228274	1					
ANR	5228796	CompoundStatement		88:32:1751:1751	5228274	3					
ANR	5228797	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"	1522:5:32257:32308	5228274	0	True				
ANR	5228798	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"		5228274	0		=			
ANR	5228799	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228800	UnaryOperator	*		5228274	0					
ANR	5228801	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228802	Identifier	q		5228274	0					
ANR	5228803	IncDec	++		5228274	1					
ANR	5228804	ArrayIndexing	"""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"		5228274	1					
ANR	5228805	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228806	BitAndExpression	low >> 4 * ( i + 1 ) & 0xf		5228274	1		&			
ANR	5228807	ShiftExpression	low >> 4 * ( i + 1 )		5228274	0		>>			
ANR	5228808	Identifier	low		5228274	0					
ANR	5228809	MultiplicativeExpression	4 * ( i + 1 )		5228274	1		*			
ANR	5228810	PrimaryExpression	4		5228274	0					
ANR	5228811	AdditiveExpression	i + 1		5228274	1		+			
ANR	5228812	Identifier	i		5228274	0					
ANR	5228813	PrimaryExpression	1		5228274	1					
ANR	5228814	PrimaryExpression	0xf		5228274	1					
ANR	5228815	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ low >> 4 * i & 0xf ]"	1523:5:32315:32360	5228274	1	True				
ANR	5228816	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ low >> 4 * i & 0xf ]"		5228274	0		=			
ANR	5228817	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228818	UnaryOperator	*		5228274	0					
ANR	5228819	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228820	Identifier	q		5228274	0					
ANR	5228821	IncDec	++		5228274	1					
ANR	5228822	ArrayIndexing	"""0123456789abcdef"" [ low >> 4 * i & 0xf ]"		5228274	1					
ANR	5228823	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228824	BitAndExpression	low >> 4 * i & 0xf		5228274	1		&			
ANR	5228825	ShiftExpression	low >> 4 * i		5228274	0		>>			
ANR	5228826	Identifier	low		5228274	0					
ANR	5228827	MultiplicativeExpression	4 * i		5228274	1		*			
ANR	5228828	PrimaryExpression	4		5228274	0					
ANR	5228829	Identifier	i		5228274	1					
ANR	5228830	PrimaryExpression	0xf		5228274	1					
ANR	5228831	ElseStatement	else		5228274	0					
ANR	5228832	IfStatement	if ( ch_bytes > 1 )		5228274	0					
ANR	5228833	Condition	ch_bytes > 1	1526:13:32386:32397	5228274	0	True				
ANR	5228834	RelationalExpression	ch_bytes > 1		5228274	0		>			
ANR	5228835	Identifier	ch_bytes		5228274	0					
ANR	5228836	PrimaryExpression	1		5228274	1					
ANR	5228837	CompoundStatement		93:27:1901:1901	5228274	1					
ANR	5228838	IfStatement	if ( r_isprint ( ch ) )		5228274	0					
ANR	5228839	Condition	r_isprint ( ch )	1527:7:32409:32422	5228274	0	True				
ANR	5228840	CallExpression	r_isprint ( ch )		5228274	0					
ANR	5228841	Callee	r_isprint		5228274	0					
ANR	5228842	Identifier	r_isprint		5228274	0					
ANR	5228843	ArgumentList	ch		5228274	1					
ANR	5228844	Argument	ch		5228274	0					
ANR	5228845	Identifier	ch		5228274	0					
ANR	5228846	CompoundStatement		94:23:1926:1926	5228274	1					
ANR	5228847	ForStatement	for ( i = 0 ; i < ch_bytes ; i ++ )		5228274	0					
ANR	5228848	ForInit	i = 0 ;	1529:9:32471:32476	5228274	0	True				
ANR	5228849	AssignmentExpression	i = 0		5228274	0		=			
ANR	5228850	Identifier	i		5228274	0					
ANR	5228851	PrimaryExpression	0		5228274	1					
ANR	5228852	Condition	i < ch_bytes	1529:16:32478:32489	5228274	1	True				
ANR	5228853	RelationalExpression	i < ch_bytes		5228274	0		<			
ANR	5228854	Identifier	i		5228274	0					
ANR	5228855	Identifier	ch_bytes		5228274	1					
ANR	5228856	PostIncDecOperationExpression	i ++	1529:30:32492:32494	5228274	2	True				
ANR	5228857	Identifier	i		5228274	0					
ANR	5228858	IncDec	++		5228274	1					
ANR	5228859	CompoundStatement		96:35:1998:1998	5228274	3					
ANR	5228860	ExpressionStatement	* q ++ = * ( p + i )	1530:5:32504:32519	5228274	0	True				
ANR	5228861	AssignmentExpression	* q ++ = * ( p + i )		5228274	0		=			
ANR	5228862	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228863	UnaryOperator	*		5228274	0					
ANR	5228864	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228865	Identifier	q		5228274	0					
ANR	5228866	IncDec	++		5228274	1					
ANR	5228867	UnaryOperationExpression	* ( p + i )		5228274	1					
ANR	5228868	UnaryOperator	*		5228274	0					
ANR	5228869	AdditiveExpression	p + i		5228274	1		+			
ANR	5228870	Identifier	p		5228274	0					
ANR	5228871	Identifier	i		5228274	1					
ANR	5228872	ElseStatement	else		5228274	0					
ANR	5228873	CompoundStatement		99:10:2038:2038	5228274	0					
ANR	5228874	ExpressionStatement	* q ++ = '\\\\'	1533:4:32543:32554	5228274	0	True				
ANR	5228875	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228876	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228877	UnaryOperator	*		5228274	0					
ANR	5228878	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228879	Identifier	q		5228274	0					
ANR	5228880	IncDec	++		5228274	1					
ANR	5228881	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228882	ExpressionStatement	* q ++ = 'u'	1534:4:32560:32570	5228274	1	True				
ANR	5228883	AssignmentExpression	* q ++ = 'u'		5228274	0		=			
ANR	5228884	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228885	UnaryOperator	*		5228274	0					
ANR	5228886	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228887	Identifier	q		5228274	0					
ANR	5228888	IncDec	++		5228274	1					
ANR	5228889	PrimaryExpression	'u'		5228274	1					
ANR	5228890	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		5228274	2					
ANR	5228891	ForInit	i = 2 ;	1535:9:32581:32586	5228274	0	True				
ANR	5228892	AssignmentExpression	i = 2		5228274	0		=			
ANR	5228893	Identifier	i		5228274	0					
ANR	5228894	PrimaryExpression	2		5228274	1					
ANR	5228895	Condition	i >= 0	1535:16:32588:32593	5228274	1	True				
ANR	5228896	RelationalExpression	i >= 0		5228274	0		>=			
ANR	5228897	Identifier	i		5228274	0					
ANR	5228898	PrimaryExpression	0		5228274	1					
ANR	5228899	AssignmentExpression	i -= 2	1535:24:32596:32601	5228274	2	True	-=			
ANR	5228900	Identifier	i		5228274	0					
ANR	5228901	PrimaryExpression	2		5228274	1					
ANR	5228902	CompoundStatement		102:32:2105:2105	5228274	3					
ANR	5228903	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"	1536:5:32611:32661	5228274	0	True				
ANR	5228904	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		5228274	0		=			
ANR	5228905	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228906	UnaryOperator	*		5228274	0					
ANR	5228907	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228908	Identifier	q		5228274	0					
ANR	5228909	IncDec	++		5228274	1					
ANR	5228910	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		5228274	1					
ANR	5228911	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228912	BitAndExpression	ch >> 4 * ( i + 1 ) & 0xf		5228274	1		&			
ANR	5228913	ShiftExpression	ch >> 4 * ( i + 1 )		5228274	0		>>			
ANR	5228914	Identifier	ch		5228274	0					
ANR	5228915	MultiplicativeExpression	4 * ( i + 1 )		5228274	1		*			
ANR	5228916	PrimaryExpression	4		5228274	0					
ANR	5228917	AdditiveExpression	i + 1		5228274	1		+			
ANR	5228918	Identifier	i		5228274	0					
ANR	5228919	PrimaryExpression	1		5228274	1					
ANR	5228920	PrimaryExpression	0xf		5228274	1					
ANR	5228921	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"	1537:5:32668:32712	5228274	1	True				
ANR	5228922	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		5228274	0		=			
ANR	5228923	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228924	UnaryOperator	*		5228274	0					
ANR	5228925	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228926	Identifier	q		5228274	0					
ANR	5228927	IncDec	++		5228274	1					
ANR	5228928	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		5228274	1					
ANR	5228929	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228930	BitAndExpression	ch >> 4 * i & 0xf		5228274	1		&			
ANR	5228931	ShiftExpression	ch >> 4 * i		5228274	0		>>			
ANR	5228932	Identifier	ch		5228274	0					
ANR	5228933	MultiplicativeExpression	4 * i		5228274	1		*			
ANR	5228934	PrimaryExpression	4		5228274	0					
ANR	5228935	Identifier	i		5228274	1					
ANR	5228936	PrimaryExpression	0xf		5228274	1					
ANR	5228937	ElseStatement	else		5228274	0					
ANR	5228938	CompoundStatement		107:9:2235:2235	5228274	0					
ANR	5228939	ExpressionStatement	* q ++ = '\\\\'	1543:3:32867:32878	5228274	0	True				
ANR	5228940	AssignmentExpression	* q ++ = '\\\\'		5228274	0		=			
ANR	5228941	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228942	UnaryOperator	*		5228274	0					
ANR	5228943	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228944	Identifier	q		5228274	0					
ANR	5228945	IncDec	++		5228274	1					
ANR	5228946	PrimaryExpression	'\\\\'		5228274	1					
ANR	5228947	ExpressionStatement	* q ++ = 'x'	1544:3:32883:32893	5228274	1	True				
ANR	5228948	AssignmentExpression	* q ++ = 'x'		5228274	0		=			
ANR	5228949	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228950	UnaryOperator	*		5228274	0					
ANR	5228951	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228952	Identifier	q		5228274	0					
ANR	5228953	IncDec	++		5228274	1					
ANR	5228954	PrimaryExpression	'x'		5228274	1					
ANR	5228955	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1545:3:32898:32938	5228274	2	True				
ANR	5228956	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5228274	0		=			
ANR	5228957	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228958	UnaryOperator	*		5228274	0					
ANR	5228959	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228960	Identifier	q		5228274	0					
ANR	5228961	IncDec	++		5228274	1					
ANR	5228962	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		5228274	1					
ANR	5228963	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228964	BitAndExpression	* p >> 4 & 0xf		5228274	1		&			
ANR	5228965	ShiftExpression	* p >> 4		5228274	0		>>			
ANR	5228966	UnaryOperationExpression	* p		5228274	0					
ANR	5228967	UnaryOperator	*		5228274	0					
ANR	5228968	Identifier	p		5228274	1					
ANR	5228969	PrimaryExpression	4		5228274	1					
ANR	5228970	PrimaryExpression	0xf		5228274	1					
ANR	5228971	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1546:3:32943:32978	5228274	3	True				
ANR	5228972	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		5228274	0		=			
ANR	5228973	UnaryOperationExpression	* q ++		5228274	0					
ANR	5228974	UnaryOperator	*		5228274	0					
ANR	5228975	PostIncDecOperationExpression	q ++		5228274	1					
ANR	5228976	Identifier	q		5228274	0					
ANR	5228977	IncDec	++		5228274	1					
ANR	5228978	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		5228274	1					
ANR	5228979	PrimaryExpression	"""0123456789abcdef"""		5228274	0					
ANR	5228980	BitAndExpression	* p & 0xf		5228274	1		&			
ANR	5228981	UnaryOperationExpression	* p		5228274	0					
ANR	5228982	UnaryOperator	*		5228274	0					
ANR	5228983	Identifier	p		5228274	1					
ANR	5228984	PrimaryExpression	0xf		5228274	1					
ANR	5228985	ExpressionStatement	ch_bytes = 1	1547:3:32983:32995	5228274	4	True				
ANR	5228986	AssignmentExpression	ch_bytes = 1		5228274	0		=			
ANR	5228987	Identifier	ch_bytes		5228274	0					
ANR	5228988	PrimaryExpression	1		5228274	1					
ANR	5228989	ExpressionStatement	p += ch_bytes	1549:2:33003:33016	5228274	2	True				
ANR	5228990	AssignmentExpression	p += ch_bytes		5228274	0		+=			
ANR	5228991	Identifier	p		5228274	0					
ANR	5228992	Identifier	ch_bytes		5228274	1					
ANR	5228993	ExpressionStatement	* q = '\\0'	1551:1:33022:33031	5228274	12	True				
ANR	5228994	AssignmentExpression	* q = '\\0'		5228274	0		=			
ANR	5228995	UnaryOperationExpression	* q		5228274	0					
ANR	5228996	UnaryOperator	*		5228274	0					
ANR	5228997	Identifier	q		5228274	1					
ANR	5228998	PrimaryExpression	'\\0'		5228274	1					
ANR	5228999	ReturnStatement	return new_buf ;	1552:1:33034:33048	5228274	13	True				
ANR	5229000	Identifier	new_buf		5228274	0					
ANR	5229001	ReturnType	R_API char *		5228274	1					
ANR	5229002	Identifier	r_str_escape_utf8_for_json		5228274	2					
ANR	5229003	ParameterList	"const char * buf , int buf_size"		5228274	3					
ANR	5229004	Parameter	const char * buf	1434:39:30467:30481	5228274	0	True				
ANR	5229005	ParameterType	const char *		5228274	0					
ANR	5229006	Identifier	buf		5228274	1					
ANR	5229007	Parameter	int buf_size	1434:56:30484:30495	5228274	1	True				
ANR	5229008	ParameterType	int		5228274	0					
ANR	5229009	Identifier	buf_size		5228274	1					
ANR	5229010	CFGEntryNode	ENTRY		5228274		True				
ANR	5229011	CFGExitNode	EXIT		5228274		True				
ANR	5229012	Symbol	IS_PRINTABLE		5228274						
ANR	5229013	Symbol	r_utf8_decode		5228274						
ANR	5229014	Symbol	ch_bytes		5228274						
ANR	5229015	Symbol	* q ++		5228274						
ANR	5229016	Symbol	* high		5228274						
ANR	5229017	Symbol	* ch		5228274						
ANR	5229018	Symbol	& ch		5228274						
ANR	5229019	Symbol	strlen		5228274						
ANR	5229020	Symbol	* ( p + i )		5228274						
ANR	5229021	Symbol	high		5228274						
ANR	5229022	Symbol	new_buf		5228274						
ANR	5229023	Symbol	len		5228274						
ANR	5229024	Symbol	low		5228274						
ANR	5229025	Symbol	end		5228274						
ANR	5229026	Symbol	* * p		5228274						
ANR	5229027	Symbol	malloc		5228274						
ANR	5229028	Symbol	r_isprint		5228274						
ANR	5229029	Symbol	NULL		5228274						
ANR	5229030	Symbol	ch		5228274						
ANR	5229031	Symbol	buf_size		5228274						
ANR	5229032	Symbol	i		5228274						
ANR	5229033	Symbol	p		5228274						
ANR	5229034	Symbol	q		5228274						
ANR	5229035	Symbol	buf		5228274						
ANR	5229036	Symbol	* i		5228274						
ANR	5229037	Symbol	* p		5228274						
ANR	5229038	Symbol	* q		5228274						
ANR	5229039	Symbol	* low		5228274						
ANR	5229040	Function	__str_ansi_length	1555:0:33053:33397							
ANR	5229041	FunctionDef	__str_ansi_length (char const * str)		5229040	0					
ANR	5229042	CompoundStatement		1555:47:33100:33397	5229040	0					
ANR	5229043	IdentifierDeclStatement	int i = 1 ;	1556:1:33103:33112	5229040	0	True				
ANR	5229044	IdentifierDecl	i = 1		5229040	0					
ANR	5229045	IdentifierDeclType	int		5229040	0					
ANR	5229046	Identifier	i		5229040	1					
ANR	5229047	AssignmentExpression	i = 1		5229040	2		=			
ANR	5229048	Identifier	i		5229040	0					
ANR	5229049	PrimaryExpression	1		5229040	1					
ANR	5229050	IfStatement	if ( str [ 0 ] == 0x1b )		5229040	1					
ANR	5229051	Condition	str [ 0 ] == 0x1b	1557:5:33119:33132	5229040	0	True				
ANR	5229052	EqualityExpression	str [ 0 ] == 0x1b		5229040	0		==			
ANR	5229053	ArrayIndexing	str [ 0 ]		5229040	0					
ANR	5229054	Identifier	str		5229040	0					
ANR	5229055	PrimaryExpression	0		5229040	1					
ANR	5229056	PrimaryExpression	0x1b		5229040	1					
ANR	5229057	CompoundStatement		3:21:34:34	5229040	1					
ANR	5229058	IfStatement	if ( str [ 1 ] == '[' )		5229040	0					
ANR	5229059	Condition	str [ 1 ] == '['	1558:6:33143:33155	5229040	0	True				
ANR	5229060	EqualityExpression	str [ 1 ] == '['		5229040	0		==			
ANR	5229061	ArrayIndexing	str [ 1 ]		5229040	0					
ANR	5229062	Identifier	str		5229040	0					
ANR	5229063	PrimaryExpression	1		5229040	1					
ANR	5229064	PrimaryExpression	'['		5229040	1					
ANR	5229065	CompoundStatement		4:21:57:57	5229040	1					
ANR	5229066	ExpressionStatement	i ++	1559:3:33163:33166	5229040	0	True				
ANR	5229067	PostIncDecOperationExpression	i ++		5229040	0					
ANR	5229068	Identifier	i		5229040	0					
ANR	5229069	IncDec	++		5229040	1					
ANR	5229070	WhileStatement	while ( str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K' )		5229040	1					
ANR	5229071	Condition	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'	1560:10:33178:33251	5229040	0	True				
ANR	5229072	AndExpression	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		5229040	0		&&			
ANR	5229073	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229074	Identifier	str		5229040	0					
ANR	5229075	Identifier	i		5229040	1					
ANR	5229076	AndExpression	str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		5229040	1		&&			
ANR	5229077	EqualityExpression	str [ i ] != 'J'		5229040	0		!=			
ANR	5229078	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229079	Identifier	str		5229040	0					
ANR	5229080	Identifier	i		5229040	1					
ANR	5229081	PrimaryExpression	'J'		5229040	1					
ANR	5229082	AndExpression	str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		5229040	1		&&			
ANR	5229083	EqualityExpression	str [ i ] != 'm'		5229040	0		!=			
ANR	5229084	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229085	Identifier	str		5229040	0					
ANR	5229086	Identifier	i		5229040	1					
ANR	5229087	PrimaryExpression	'm'		5229040	1					
ANR	5229088	AndExpression	str [ i ] != 'H' && str [ i ] != 'K'		5229040	1		&&			
ANR	5229089	EqualityExpression	str [ i ] != 'H'		5229040	0		!=			
ANR	5229090	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229091	Identifier	str		5229040	0					
ANR	5229092	Identifier	i		5229040	1					
ANR	5229093	PrimaryExpression	'H'		5229040	1					
ANR	5229094	EqualityExpression	str [ i ] != 'K'		5229040	1		!=			
ANR	5229095	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229096	Identifier	str		5229040	0					
ANR	5229097	Identifier	i		5229040	1					
ANR	5229098	PrimaryExpression	'K'		5229040	1					
ANR	5229099	CompoundStatement		6:86:153:153	5229040	1					
ANR	5229100	ExpressionStatement	i ++	1561:4:33260:33263	5229040	0	True				
ANR	5229101	PostIncDecOperationExpression	i ++		5229040	0					
ANR	5229102	Identifier	i		5229040	0					
ANR	5229103	IncDec	++		5229040	1					
ANR	5229104	ElseStatement	else		5229040	0					
ANR	5229105	IfStatement	if ( str [ 1 ] == '#' )		5229040	0					
ANR	5229106	Condition	str [ 1 ] == '#'	1563:13:33283:33295	5229040	0	True				
ANR	5229107	EqualityExpression	str [ 1 ] == '#'		5229040	0		==			
ANR	5229108	ArrayIndexing	str [ 1 ]		5229040	0					
ANR	5229109	Identifier	str		5229040	0					
ANR	5229110	PrimaryExpression	1		5229040	1					
ANR	5229111	PrimaryExpression	'#'		5229040	1					
ANR	5229112	CompoundStatement		9:28:197:197	5229040	1					
ANR	5229113	WhileStatement	while ( str [ i ] && str [ i ] != 'q' )		5229040	0					
ANR	5229114	Condition	str [ i ] && str [ i ] != 'q'	1564:10:33310:33332	5229040	0	True				
ANR	5229115	AndExpression	str [ i ] && str [ i ] != 'q'		5229040	0		&&			
ANR	5229116	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229117	Identifier	str		5229040	0					
ANR	5229118	Identifier	i		5229040	1					
ANR	5229119	EqualityExpression	str [ i ] != 'q'		5229040	1		!=			
ANR	5229120	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229121	Identifier	str		5229040	0					
ANR	5229122	Identifier	i		5229040	1					
ANR	5229123	PrimaryExpression	'q'		5229040	1					
ANR	5229124	CompoundStatement		10:35:234:234	5229040	1					
ANR	5229125	ExpressionStatement	i ++	1565:4:33341:33344	5229040	0	True				
ANR	5229126	PostIncDecOperationExpression	i ++		5229040	0					
ANR	5229127	Identifier	i		5229040	0					
ANR	5229128	IncDec	++		5229040	1					
ANR	5229129	IfStatement	if ( str [ i ] )		5229040	1					
ANR	5229130	Condition	str [ i ]	1568:6:33361:33366	5229040	0	True				
ANR	5229131	ArrayIndexing	str [ i ]		5229040	0					
ANR	5229132	Identifier	str		5229040	0					
ANR	5229133	Identifier	i		5229040	1					
ANR	5229134	CompoundStatement		14:14:268:268	5229040	1					
ANR	5229135	ExpressionStatement	i ++	1569:3:33374:33377	5229040	0	True				
ANR	5229136	PostIncDecOperationExpression	i ++		5229040	0					
ANR	5229137	Identifier	i		5229040	0					
ANR	5229138	IncDec	++		5229040	1					
ANR	5229139	ReturnStatement	return i ;	1572:1:33387:33395	5229040	2	True				
ANR	5229140	Identifier	i		5229040	0					
ANR	5229141	ReturnType	static int		5229040	1					
ANR	5229142	Identifier	__str_ansi_length		5229040	2					
ANR	5229143	ParameterList	char const * str		5229040	3					
ANR	5229144	Parameter	char const * str	1555:30:33083:33097	5229040	0	True				
ANR	5229145	ParameterType	char const *		5229040	0					
ANR	5229146	Identifier	str		5229040	1					
ANR	5229147	CFGEntryNode	ENTRY		5229040		True				
ANR	5229148	CFGExitNode	EXIT		5229040		True				
ANR	5229149	Symbol	str		5229040						
ANR	5229150	Symbol	* i		5229040						
ANR	5229151	Symbol	i		5229040						
ANR	5229152	Symbol	* str		5229040						
ANR	5229153	Function	r_str_ansi_nlen	1576:0:33419:33813							
ANR	5229154	FunctionDef	"r_str_ansi_nlen (const char * str , int slen)"		5229153	0					
ANR	5229155	CompoundStatement		1576:53:33472:33813	5229153	0					
ANR	5229156	IdentifierDeclStatement	"int i = 0 , len = 0 ;"	1577:1:33475:33493	5229153	0	True				
ANR	5229157	IdentifierDecl	i = 0		5229153	0					
ANR	5229158	IdentifierDeclType	int		5229153	0					
ANR	5229159	Identifier	i		5229153	1					
ANR	5229160	AssignmentExpression	i = 0		5229153	2		=			
ANR	5229161	Identifier	i		5229153	0					
ANR	5229162	PrimaryExpression	0		5229153	1					
ANR	5229163	IdentifierDecl	len = 0		5229153	1					
ANR	5229164	IdentifierDeclType	int		5229153	0					
ANR	5229165	Identifier	len		5229153	1					
ANR	5229166	AssignmentExpression	len = 0		5229153	2		=			
ANR	5229167	Identifier	len		5229153	0					
ANR	5229168	PrimaryExpression	0		5229153	1					
ANR	5229169	IfStatement	if ( slen > 0 )		5229153	1					
ANR	5229170	Condition	slen > 0	1578:5:33500:33507	5229153	0	True				
ANR	5229171	RelationalExpression	slen > 0		5229153	0		>			
ANR	5229172	Identifier	slen		5229153	0					
ANR	5229173	PrimaryExpression	0		5229153	1					
ANR	5229174	CompoundStatement		3:15:37:37	5229153	1					
ANR	5229175	WhileStatement	while ( str [ i ] && i < slen )		5229153	0					
ANR	5229176	Condition	str [ i ] && i < slen	1579:9:33521:33538	5229153	0	True				
ANR	5229177	AndExpression	str [ i ] && i < slen		5229153	0		&&			
ANR	5229178	ArrayIndexing	str [ i ]		5229153	0					
ANR	5229179	Identifier	str		5229153	0					
ANR	5229180	Identifier	i		5229153	1					
ANR	5229181	RelationalExpression	i < slen		5229153	1		<			
ANR	5229182	Identifier	i		5229153	0					
ANR	5229183	Identifier	slen		5229153	1					
ANR	5229184	CompoundStatement		5:3:73:112	5229153	1					
ANR	5229185	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1580:3:33546:33585	5229153	0	True				
ANR	5229186	IdentifierDecl	chlen = __str_ansi_length ( str + i )		5229153	0					
ANR	5229187	IdentifierDeclType	int		5229153	0					
ANR	5229188	Identifier	chlen		5229153	1					
ANR	5229189	AssignmentExpression	chlen = __str_ansi_length ( str + i )		5229153	2		=			
ANR	5229190	Identifier	chlen		5229153	0					
ANR	5229191	CallExpression	__str_ansi_length ( str + i )		5229153	1					
ANR	5229192	Callee	__str_ansi_length		5229153	0					
ANR	5229193	Identifier	__str_ansi_length		5229153	0					
ANR	5229194	ArgumentList	str + i		5229153	1					
ANR	5229195	Argument	str + i		5229153	0					
ANR	5229196	AdditiveExpression	str + i		5229153	0		+			
ANR	5229197	Identifier	str		5229153	0					
ANR	5229198	Identifier	i		5229153	1					
ANR	5229199	IfStatement	if ( chlen == 1 )		5229153	1					
ANR	5229200	Condition	chlen == 1	1581:7:33594:33603	5229153	0	True				
ANR	5229201	EqualityExpression	chlen == 1		5229153	0		==			
ANR	5229202	Identifier	chlen		5229153	0					
ANR	5229203	PrimaryExpression	1		5229153	1					
ANR	5229204	CompoundStatement		6:19:133:133	5229153	1					
ANR	5229205	ExpressionStatement	len ++	1582:4:33612:33618	5229153	0	True				
ANR	5229206	PostIncDecOperationExpression	len ++		5229153	0					
ANR	5229207	Identifier	len		5229153	0					
ANR	5229208	IncDec	++		5229153	1					
ANR	5229209	ExpressionStatement	i += chlen	1584:3:33628:33638	5229153	2	True				
ANR	5229210	AssignmentExpression	i += chlen		5229153	0		+=			
ANR	5229211	Identifier	i		5229153	0					
ANR	5229212	Identifier	chlen		5229153	1					
ANR	5229213	ReturnStatement	return len > 0 ? len : 1 ;	1586:2:33646:33669	5229153	1	True				
ANR	5229214	ConditionalExpression	len > 0 ? len : 1		5229153	0					
ANR	5229215	Condition	len > 0		5229153	0					
ANR	5229216	RelationalExpression	len > 0		5229153	0		>			
ANR	5229217	Identifier	len		5229153	0					
ANR	5229218	PrimaryExpression	0		5229153	1					
ANR	5229219	Identifier	len		5229153	1					
ANR	5229220	PrimaryExpression	1		5229153	2					
ANR	5229221	WhileStatement	while ( str [ i ] )		5229153	2					
ANR	5229222	Condition	str [ i ]	1588:8:33682:33687	5229153	0	True				
ANR	5229223	ArrayIndexing	str [ i ]		5229153	0					
ANR	5229224	Identifier	str		5229153	0					
ANR	5229225	Identifier	i		5229153	1					
ANR	5229226	CompoundStatement		14:2:221:260	5229153	1					
ANR	5229227	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1589:2:33694:33733	5229153	0	True				
ANR	5229228	IdentifierDecl	chlen = __str_ansi_length ( str + i )		5229153	0					
ANR	5229229	IdentifierDeclType	int		5229153	0					
ANR	5229230	Identifier	chlen		5229153	1					
ANR	5229231	AssignmentExpression	chlen = __str_ansi_length ( str + i )		5229153	2		=			
ANR	5229232	Identifier	chlen		5229153	0					
ANR	5229233	CallExpression	__str_ansi_length ( str + i )		5229153	1					
ANR	5229234	Callee	__str_ansi_length		5229153	0					
ANR	5229235	Identifier	__str_ansi_length		5229153	0					
ANR	5229236	ArgumentList	str + i		5229153	1					
ANR	5229237	Argument	str + i		5229153	0					
ANR	5229238	AdditiveExpression	str + i		5229153	0		+			
ANR	5229239	Identifier	str		5229153	0					
ANR	5229240	Identifier	i		5229153	1					
ANR	5229241	IfStatement	if ( chlen == 1 )		5229153	1					
ANR	5229242	Condition	chlen == 1	1590:6:33741:33750	5229153	0	True				
ANR	5229243	EqualityExpression	chlen == 1		5229153	0		==			
ANR	5229244	Identifier	chlen		5229153	0					
ANR	5229245	PrimaryExpression	1		5229153	1					
ANR	5229246	CompoundStatement		15:18:280:280	5229153	1					
ANR	5229247	ExpressionStatement	len ++	1591:3:33758:33764	5229153	0	True				
ANR	5229248	PostIncDecOperationExpression	len ++		5229153	0					
ANR	5229249	Identifier	len		5229153	0					
ANR	5229250	IncDec	++		5229153	1					
ANR	5229251	ExpressionStatement	i += chlen	1593:2:33772:33782	5229153	2	True				
ANR	5229252	AssignmentExpression	i += chlen		5229153	0		+=			
ANR	5229253	Identifier	i		5229153	0					
ANR	5229254	Identifier	chlen		5229153	1					
ANR	5229255	ReturnStatement	return len > 0 ? len : 1 ;	1595:1:33788:33811	5229153	3	True				
ANR	5229256	ConditionalExpression	len > 0 ? len : 1		5229153	0					
ANR	5229257	Condition	len > 0		5229153	0					
ANR	5229258	RelationalExpression	len > 0		5229153	0		>			
ANR	5229259	Identifier	len		5229153	0					
ANR	5229260	PrimaryExpression	0		5229153	1					
ANR	5229261	Identifier	len		5229153	1					
ANR	5229262	PrimaryExpression	1		5229153	2					
ANR	5229263	ReturnType	R_API int		5229153	1					
ANR	5229264	Identifier	r_str_ansi_nlen		5229153	2					
ANR	5229265	ParameterList	"const char * str , int slen"		5229153	3					
ANR	5229266	Parameter	const char * str	1576:26:33445:33459	5229153	0	True				
ANR	5229267	ParameterType	const char *		5229153	0					
ANR	5229268	Identifier	str		5229153	1					
ANR	5229269	Parameter	int slen	1576:43:33462:33469	5229153	1	True				
ANR	5229270	ParameterType	int		5229153	0					
ANR	5229271	Identifier	slen		5229153	1					
ANR	5229272	CFGEntryNode	ENTRY		5229153		True				
ANR	5229273	CFGExitNode	EXIT		5229153		True				
ANR	5229274	Symbol	str		5229153						
ANR	5229275	Symbol	* i		5229153						
ANR	5229276	Symbol	chlen		5229153						
ANR	5229277	Symbol	len		5229153						
ANR	5229278	Symbol	slen		5229153						
ANR	5229279	Symbol	i		5229153						
ANR	5229280	Symbol	__str_ansi_length		5229153						
ANR	5229281	Symbol	* str		5229153						
ANR	5229282	Function	r_str_ansi_len	1598:0:33816:33894							
ANR	5229283	FunctionDef	r_str_ansi_len (const char * str)		5229282	0					
ANR	5229284	CompoundStatement		1598:42:33858:33894	5229282	0					
ANR	5229285	ReturnStatement	"return r_str_ansi_nlen ( str , 0 ) ;"	1599:1:33861:33892	5229282	0	True				
ANR	5229286	CallExpression	"r_str_ansi_nlen ( str , 0 )"		5229282	0					
ANR	5229287	Callee	r_str_ansi_nlen		5229282	0					
ANR	5229288	Identifier	r_str_ansi_nlen		5229282	0					
ANR	5229289	ArgumentList	str		5229282	1					
ANR	5229290	Argument	str		5229282	0					
ANR	5229291	Identifier	str		5229282	0					
ANR	5229292	Argument	0		5229282	1					
ANR	5229293	PrimaryExpression	0		5229282	0					
ANR	5229294	ReturnType	R_API int		5229282	1					
ANR	5229295	Identifier	r_str_ansi_len		5229282	2					
ANR	5229296	ParameterList	const char * str		5229282	3					
ANR	5229297	Parameter	const char * str	1598:25:33841:33855	5229282	0	True				
ANR	5229298	ParameterType	const char *		5229282	0					
ANR	5229299	Identifier	str		5229282	1					
ANR	5229300	CFGEntryNode	ENTRY		5229282		True				
ANR	5229301	CFGExitNode	EXIT		5229282		True				
ANR	5229302	Symbol	str		5229282						
ANR	5229303	Symbol	r_str_ansi_nlen		5229282						
ANR	5229304	Function	r_str_nlen	1602:0:33897:34044							
ANR	5229305	FunctionDef	"r_str_nlen (const char * str , int n)"		5229304	0					
ANR	5229306	CompoundStatement		1602:45:33942:34044	5229304	0					
ANR	5229307	IdentifierDeclStatement	int len = 0 ;	1603:1:33945:33956	5229304	0	True				
ANR	5229308	IdentifierDecl	len = 0		5229304	0					
ANR	5229309	IdentifierDeclType	int		5229304	0					
ANR	5229310	Identifier	len		5229304	1					
ANR	5229311	AssignmentExpression	len = 0		5229304	2		=			
ANR	5229312	Identifier	len		5229304	0					
ANR	5229313	PrimaryExpression	0		5229304	1					
ANR	5229314	IfStatement	if ( str )		5229304	1					
ANR	5229315	Condition	str	1604:5:33963:33965	5229304	0	True				
ANR	5229316	Identifier	str		5229304	0					
ANR	5229317	CompoundStatement		3:10:25:25	5229304	1					
ANR	5229318	WhileStatement	while ( * str && n > 0 )		5229304	0					
ANR	5229319	Condition	* str && n > 0	1605:9:33979:33991	5229304	0	True				
ANR	5229320	AndExpression	* str && n > 0		5229304	0		&&			
ANR	5229321	UnaryOperationExpression	* str		5229304	0					
ANR	5229322	UnaryOperator	*		5229304	0					
ANR	5229323	Identifier	str		5229304	1					
ANR	5229324	RelationalExpression	n > 0		5229304	1		>			
ANR	5229325	Identifier	n		5229304	0					
ANR	5229326	PrimaryExpression	0		5229304	1					
ANR	5229327	CompoundStatement		4:24:51:51	5229304	1					
ANR	5229328	ExpressionStatement	len ++	1606:3:33999:34004	5229304	0	True				
ANR	5229329	PostIncDecOperationExpression	len ++		5229304	0					
ANR	5229330	Identifier	len		5229304	0					
ANR	5229331	IncDec	++		5229304	1					
ANR	5229332	ExpressionStatement	str ++	1607:3:34009:34014	5229304	1	True				
ANR	5229333	PostIncDecOperationExpression	str ++		5229304	0					
ANR	5229334	Identifier	str		5229304	0					
ANR	5229335	IncDec	++		5229304	1					
ANR	5229336	ExpressionStatement	n --	1608:3:34019:34022	5229304	2	True				
ANR	5229337	PostIncDecOperationExpression	n --		5229304	0					
ANR	5229338	Identifier	n		5229304	0					
ANR	5229339	IncDec	--		5229304	1					
ANR	5229340	ReturnStatement	return len ;	1611:1:34032:34042	5229304	2	True				
ANR	5229341	Identifier	len		5229304	0					
ANR	5229342	ReturnType	R_API int		5229304	1					
ANR	5229343	Identifier	r_str_nlen		5229304	2					
ANR	5229344	ParameterList	"const char * str , int n"		5229304	3					
ANR	5229345	Parameter	const char * str	1602:21:33918:33932	5229304	0	True				
ANR	5229346	ParameterType	const char *		5229304	0					
ANR	5229347	Identifier	str		5229304	1					
ANR	5229348	Parameter	int n	1602:38:33935:33939	5229304	1	True				
ANR	5229349	ParameterType	int		5229304	0					
ANR	5229350	Identifier	n		5229304	1					
ANR	5229351	CFGEntryNode	ENTRY		5229304		True				
ANR	5229352	CFGExitNode	EXIT		5229304		True				
ANR	5229353	Symbol	str		5229304						
ANR	5229354	Symbol	len		5229304						
ANR	5229355	Symbol	* str		5229304						
ANR	5229356	Symbol	n		5229304						
ANR	5229357	Function	r_str_nlen_w	1616:0:34104:34397							
ANR	5229358	FunctionDef	"r_str_nlen_w (const char * str , int n)"		5229357	0					
ANR	5229359	CompoundStatement		1616:47:34151:34397	5229357	0					
ANR	5229360	IdentifierDeclStatement	int len = 0 ;	1617:1:34154:34165	5229357	0	True				
ANR	5229361	IdentifierDecl	len = 0		5229357	0					
ANR	5229362	IdentifierDeclType	int		5229357	0					
ANR	5229363	Identifier	len		5229357	1					
ANR	5229364	AssignmentExpression	len = 0		5229357	2		=			
ANR	5229365	Identifier	len		5229357	0					
ANR	5229366	PrimaryExpression	0		5229357	1					
ANR	5229367	IfStatement	if ( str )		5229357	1					
ANR	5229368	Condition	str	1618:5:34172:34174	5229357	0	True				
ANR	5229369	Identifier	str		5229357	0					
ANR	5229370	CompoundStatement		3:10:25:25	5229357	1					
ANR	5229371	WhileStatement	while ( * str && n > 0 )		5229357	0					
ANR	5229372	Condition	* str && n > 0	1619:9:34188:34200	5229357	0	True				
ANR	5229373	AndExpression	* str && n > 0		5229357	0		&&			
ANR	5229374	UnaryOperationExpression	* str		5229357	0					
ANR	5229375	UnaryOperator	*		5229357	0					
ANR	5229376	Identifier	str		5229357	1					
ANR	5229377	RelationalExpression	n > 0		5229357	1		>			
ANR	5229378	Identifier	n		5229357	0					
ANR	5229379	PrimaryExpression	0		5229357	1					
ANR	5229380	CompoundStatement		4:24:51:51	5229357	1					
ANR	5229381	ExpressionStatement	len ++	1620:3:34208:34213	5229357	0	True				
ANR	5229382	PostIncDecOperationExpression	len ++		5229357	0					
ANR	5229383	Identifier	len		5229357	0					
ANR	5229384	IncDec	++		5229357	1					
ANR	5229385	ExpressionStatement	str ++	1621:3:34218:34223	5229357	1	True				
ANR	5229386	PostIncDecOperationExpression	str ++		5229357	0					
ANR	5229387	Identifier	str		5229357	0					
ANR	5229388	IncDec	++		5229357	1					
ANR	5229389	IfStatement	if ( ! * str )		5229357	2					
ANR	5229390	Condition	! * str	1622:7:34232:34236	5229357	0	True				
ANR	5229391	UnaryOperationExpression	! * str		5229357	0					
ANR	5229392	UnaryOperator	!		5229357	0					
ANR	5229393	UnaryOperationExpression	* str		5229357	1					
ANR	5229394	UnaryOperator	*		5229357	0					
ANR	5229395	Identifier	str		5229357	1					
ANR	5229396	CompoundStatement		7:14:87:87	5229357	1					
ANR	5229397	IfStatement	if ( n - 2 > 0 )		5229357	0					
ANR	5229398	Condition	n - 2 > 0	1625:8:34295:34303	5229357	0	True				
ANR	5229399	RelationalExpression	n - 2 > 0		5229357	0		>			
ANR	5229400	AdditiveExpression	n - 2		5229357	0		-			
ANR	5229401	Identifier	n		5229357	0					
ANR	5229402	PrimaryExpression	2		5229357	1					
ANR	5229403	PrimaryExpression	0		5229357	1					
ANR	5229404	CompoundStatement		10:19:154:154	5229357	1					
ANR	5229405	IfStatement	if ( str [ 2 ] )		5229357	0					
ANR	5229406	Condition	str [ 2 ]	1626:9:34317:34322	5229357	0	True				
ANR	5229407	ArrayIndexing	str [ 2 ]		5229357	0					
ANR	5229408	Identifier	str		5229357	0					
ANR	5229409	PrimaryExpression	2		5229357	1					
ANR	5229410	CompoundStatement		11:17:173:173	5229357	1					
ANR	5229411	BreakStatement	break ;	1627:6:34333:34338	5229357	0	True				
ANR	5229412	ExpressionStatement	str ++	1630:4:34357:34362	5229357	1	True				
ANR	5229413	PostIncDecOperationExpression	str ++		5229357	0					
ANR	5229414	Identifier	str		5229357	0					
ANR	5229415	IncDec	++		5229357	1					
ANR	5229416	ExpressionStatement	n --	1632:3:34372:34375	5229357	3	True				
ANR	5229417	PostIncDecOperationExpression	n --		5229357	0					
ANR	5229418	Identifier	n		5229357	0					
ANR	5229419	IncDec	--		5229357	1					
ANR	5229420	ReturnStatement	return len ;	1635:1:34385:34395	5229357	2	True				
ANR	5229421	Identifier	len		5229357	0					
ANR	5229422	ReturnType	R_API int		5229357	1					
ANR	5229423	Identifier	r_str_nlen_w		5229357	2					
ANR	5229424	ParameterList	"const char * str , int n"		5229357	3					
ANR	5229425	Parameter	const char * str	1616:23:34127:34141	5229357	0	True				
ANR	5229426	ParameterType	const char *		5229357	0					
ANR	5229427	Identifier	str		5229357	1					
ANR	5229428	Parameter	int n	1616:40:34144:34148	5229357	1	True				
ANR	5229429	ParameterType	int		5229357	0					
ANR	5229430	Identifier	n		5229357	1					
ANR	5229431	CFGEntryNode	ENTRY		5229357		True				
ANR	5229432	CFGExitNode	EXIT		5229357		True				
ANR	5229433	Symbol	str		5229357						
ANR	5229434	Symbol	len		5229357						
ANR	5229435	Symbol	* str		5229357						
ANR	5229436	Symbol	n		5229357						
ANR	5229437	Function	r_str_is_ascii	1638:0:34400:34566							
ANR	5229438	FunctionDef	r_str_is_ascii (const char * str)		5229437	0					
ANR	5229439	CompoundStatement		1638:43:34443:34566	5229437	0					
ANR	5229440	IdentifierDeclStatement	const ut8 * ptr ;	1639:1:34446:34460	5229437	0	True				
ANR	5229441	IdentifierDecl	* ptr		5229437	0					
ANR	5229442	IdentifierDeclType	const ut8 *		5229437	0					
ANR	5229443	Identifier	ptr		5229437	1					
ANR	5229444	ForStatement	for ( ptr = ( const ut8 * ) str ; * ptr ; ptr ++ )		5229437	1					
ANR	5229445	ForInit	ptr = ( const ut8 * ) str ;	1640:6:34468:34490	5229437	0	True				
ANR	5229446	AssignmentExpression	ptr = ( const ut8 * ) str		5229437	0		=			
ANR	5229447	Identifier	ptr		5229437	0					
ANR	5229448	CastExpression	( const ut8 * ) str		5229437	1					
ANR	5229449	CastTarget	const ut8 *		5229437	0					
ANR	5229450	Identifier	str		5229437	1					
ANR	5229451	Condition	* ptr	1640:30:34492:34495	5229437	1	True				
ANR	5229452	UnaryOperationExpression	* ptr		5229437	0					
ANR	5229453	UnaryOperator	*		5229437	0					
ANR	5229454	Identifier	ptr		5229437	1					
ANR	5229455	PostIncDecOperationExpression	ptr ++	1640:36:34498:34502	5229437	2	True				
ANR	5229456	Identifier	ptr		5229437	0					
ANR	5229457	IncDec	++		5229437	1					
ANR	5229458	CompoundStatement		3:43:61:61	5229437	3					
ANR	5229459	IfStatement	if ( * ptr > 0x7f )		5229437	0					
ANR	5229460	Condition	* ptr > 0x7f	1641:6:34513:34523	5229437	0	True				
ANR	5229461	RelationalExpression	* ptr > 0x7f		5229437	0		>			
ANR	5229462	UnaryOperationExpression	* ptr		5229437	0					
ANR	5229463	UnaryOperator	*		5229437	0					
ANR	5229464	Identifier	ptr		5229437	1					
ANR	5229465	PrimaryExpression	0x7f		5229437	1					
ANR	5229466	CompoundStatement		4:19:82:82	5229437	1					
ANR	5229467	ReturnStatement	return false ;	1642:3:34531:34543	5229437	0	True				
ANR	5229468	Identifier	false		5229437	0					
ANR	5229469	ReturnStatement	return true ;	1645:1:34553:34564	5229437	2	True				
ANR	5229470	Identifier	true		5229437	0					
ANR	5229471	ReturnType	R_API bool		5229437	1					
ANR	5229472	Identifier	r_str_is_ascii		5229437	2					
ANR	5229473	ParameterList	const char * str		5229437	3					
ANR	5229474	Parameter	const char * str	1638:26:34426:34440	5229437	0	True				
ANR	5229475	ParameterType	const char *		5229437	0					
ANR	5229476	Identifier	str		5229437	1					
ANR	5229477	CFGEntryNode	ENTRY		5229437		True				
ANR	5229478	CFGExitNode	EXIT		5229437		True				
ANR	5229479	Symbol	str		5229437						
ANR	5229480	Symbol	* ptr		5229437						
ANR	5229481	Symbol	false		5229437						
ANR	5229482	Symbol	true		5229437						
ANR	5229483	Symbol	ptr		5229437						
ANR	5229484	Function	r_str_is_printable	1648:0:34569:34820							
ANR	5229485	FunctionDef	r_str_is_printable (const char * str)		5229484	0					
ANR	5229486	CompoundStatement		1648:46:34615:34820	5229484	0					
ANR	5229487	WhileStatement	while ( * str )		5229484	0					
ANR	5229488	Condition	* str	1649:8:34625:34628	5229484	0	True				
ANR	5229489	UnaryOperationExpression	* str		5229484	0					
ANR	5229490	UnaryOperator	*		5229484	0					
ANR	5229491	Identifier	str		5229484	1					
ANR	5229492	CompoundStatement		3:2:19:81	5229484	1					
ANR	5229493	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1650:2:34635:34697	5229484	0	True				
ANR	5229494	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229484	0					
ANR	5229495	IdentifierDeclType	int		5229484	0					
ANR	5229496	Identifier	ulen		5229484	1					
ANR	5229497	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229484	2		=			
ANR	5229498	Identifier	ulen		5229484	0					
ANR	5229499	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229484	1					
ANR	5229500	Callee	r_utf8_decode		5229484	0					
ANR	5229501	Identifier	r_utf8_decode		5229484	0					
ANR	5229502	ArgumentList	( const ut8 * ) str		5229484	1					
ANR	5229503	Argument	( const ut8 * ) str		5229484	0					
ANR	5229504	CastExpression	( const ut8 * ) str		5229484	0					
ANR	5229505	CastTarget	const ut8 *		5229484	0					
ANR	5229506	Identifier	str		5229484	1					
ANR	5229507	Argument	strlen ( str )		5229484	1					
ANR	5229508	CallExpression	strlen ( str )		5229484	0					
ANR	5229509	Callee	strlen		5229484	0					
ANR	5229510	Identifier	strlen		5229484	0					
ANR	5229511	ArgumentList	str		5229484	1					
ANR	5229512	Argument	str		5229484	0					
ANR	5229513	Identifier	str		5229484	0					
ANR	5229514	Argument	NULL		5229484	2					
ANR	5229515	Identifier	NULL		5229484	0					
ANR	5229516	IfStatement	if ( ulen > 1 )		5229484	1					
ANR	5229517	Condition	ulen > 1	1651:6:34705:34712	5229484	0	True				
ANR	5229518	RelationalExpression	ulen > 1		5229484	0		>			
ANR	5229519	Identifier	ulen		5229484	0					
ANR	5229520	PrimaryExpression	1		5229484	1					
ANR	5229521	CompoundStatement		4:16:99:99	5229484	1					
ANR	5229522	ExpressionStatement	str += ulen	1652:3:34720:34731	5229484	0	True				
ANR	5229523	AssignmentExpression	str += ulen		5229484	0		+=			
ANR	5229524	Identifier	str		5229484	0					
ANR	5229525	Identifier	ulen		5229484	1					
ANR	5229526	ContinueStatement	continue ;	1653:3:34736:34744	5229484	1	True				
ANR	5229527	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		5229484	2					
ANR	5229528	Condition	! IS_PRINTABLE ( * str )	1655:6:34756:34775	5229484	0	True				
ANR	5229529	UnaryOperationExpression	! IS_PRINTABLE ( * str )		5229484	0					
ANR	5229530	UnaryOperator	!		5229484	0					
ANR	5229531	CallExpression	IS_PRINTABLE ( * str )		5229484	1					
ANR	5229532	Callee	IS_PRINTABLE		5229484	0					
ANR	5229533	Identifier	IS_PRINTABLE		5229484	0					
ANR	5229534	ArgumentList	* str		5229484	1					
ANR	5229535	Argument	* str		5229484	0					
ANR	5229536	UnaryOperationExpression	* str		5229484	0					
ANR	5229537	UnaryOperator	*		5229484	0					
ANR	5229538	Identifier	str		5229484	1					
ANR	5229539	CompoundStatement		8:28:162:162	5229484	1					
ANR	5229540	ReturnStatement	return 0 ;	1656:3:34783:34791	5229484	0	True				
ANR	5229541	PrimaryExpression	0		5229484	0					
ANR	5229542	ExpressionStatement	str ++	1658:2:34799:34804	5229484	3	True				
ANR	5229543	PostIncDecOperationExpression	str ++		5229484	0					
ANR	5229544	Identifier	str		5229484	0					
ANR	5229545	IncDec	++		5229484	1					
ANR	5229546	ReturnStatement	return 1 ;	1660:1:34810:34818	5229484	1	True				
ANR	5229547	PrimaryExpression	1		5229484	0					
ANR	5229548	ReturnType	R_API int		5229484	1					
ANR	5229549	Identifier	r_str_is_printable		5229484	2					
ANR	5229550	ParameterList	const char * str		5229484	3					
ANR	5229551	Parameter	const char * str	1648:29:34598:34612	5229484	0	True				
ANR	5229552	ParameterType	const char *		5229484	0					
ANR	5229553	Identifier	str		5229484	1					
ANR	5229554	CFGEntryNode	ENTRY		5229484		True				
ANR	5229555	CFGExitNode	EXIT		5229484		True				
ANR	5229556	Symbol	str		5229484						
ANR	5229557	Symbol	strlen		5229484						
ANR	5229558	Symbol	NULL		5229484						
ANR	5229559	Symbol	IS_PRINTABLE		5229484						
ANR	5229560	Symbol	r_utf8_decode		5229484						
ANR	5229561	Symbol	ulen		5229484						
ANR	5229562	Symbol	* str		5229484						
ANR	5229563	Function	r_str_is_printable_limited	1663:0:34823:35114							
ANR	5229564	FunctionDef	"r_str_is_printable_limited (const char * str , int size)"		5229563	0					
ANR	5229565	CompoundStatement		1663:64:34887:35114	5229563	0					
ANR	5229566	WhileStatement	while ( size > 0 && * str )		5229563	0					
ANR	5229567	Condition	size > 0 && * str	1664:8:34897:34912	5229563	0	True				
ANR	5229568	AndExpression	size > 0 && * str		5229563	0		&&			
ANR	5229569	RelationalExpression	size > 0		5229563	0		>			
ANR	5229570	Identifier	size		5229563	0					
ANR	5229571	PrimaryExpression	0		5229563	1					
ANR	5229572	UnaryOperationExpression	* str		5229563	1					
ANR	5229573	UnaryOperator	*		5229563	0					
ANR	5229574	Identifier	str		5229563	1					
ANR	5229575	CompoundStatement		3:2:31:93	5229563	1					
ANR	5229576	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1665:2:34919:34981	5229563	0	True				
ANR	5229577	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229563	0					
ANR	5229578	IdentifierDeclType	int		5229563	0					
ANR	5229579	Identifier	ulen		5229563	1					
ANR	5229580	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229563	2		=			
ANR	5229581	Identifier	ulen		5229563	0					
ANR	5229582	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229563	1					
ANR	5229583	Callee	r_utf8_decode		5229563	0					
ANR	5229584	Identifier	r_utf8_decode		5229563	0					
ANR	5229585	ArgumentList	( const ut8 * ) str		5229563	1					
ANR	5229586	Argument	( const ut8 * ) str		5229563	0					
ANR	5229587	CastExpression	( const ut8 * ) str		5229563	0					
ANR	5229588	CastTarget	const ut8 *		5229563	0					
ANR	5229589	Identifier	str		5229563	1					
ANR	5229590	Argument	strlen ( str )		5229563	1					
ANR	5229591	CallExpression	strlen ( str )		5229563	0					
ANR	5229592	Callee	strlen		5229563	0					
ANR	5229593	Identifier	strlen		5229563	0					
ANR	5229594	ArgumentList	str		5229563	1					
ANR	5229595	Argument	str		5229563	0					
ANR	5229596	Identifier	str		5229563	0					
ANR	5229597	Argument	NULL		5229563	2					
ANR	5229598	Identifier	NULL		5229563	0					
ANR	5229599	IfStatement	if ( ulen > 1 )		5229563	1					
ANR	5229600	Condition	ulen > 1	1666:6:34989:34996	5229563	0	True				
ANR	5229601	RelationalExpression	ulen > 1		5229563	0		>			
ANR	5229602	Identifier	ulen		5229563	0					
ANR	5229603	PrimaryExpression	1		5229563	1					
ANR	5229604	CompoundStatement		4:16:111:111	5229563	1					
ANR	5229605	ExpressionStatement	str += ulen	1667:3:35004:35015	5229563	0	True				
ANR	5229606	AssignmentExpression	str += ulen		5229563	0		+=			
ANR	5229607	Identifier	str		5229563	0					
ANR	5229608	Identifier	ulen		5229563	1					
ANR	5229609	ContinueStatement	continue ;	1668:3:35020:35028	5229563	1	True				
ANR	5229610	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		5229563	2					
ANR	5229611	Condition	! IS_PRINTABLE ( * str )	1670:6:35040:35059	5229563	0	True				
ANR	5229612	UnaryOperationExpression	! IS_PRINTABLE ( * str )		5229563	0					
ANR	5229613	UnaryOperator	!		5229563	0					
ANR	5229614	CallExpression	IS_PRINTABLE ( * str )		5229563	1					
ANR	5229615	Callee	IS_PRINTABLE		5229563	0					
ANR	5229616	Identifier	IS_PRINTABLE		5229563	0					
ANR	5229617	ArgumentList	* str		5229563	1					
ANR	5229618	Argument	* str		5229563	0					
ANR	5229619	UnaryOperationExpression	* str		5229563	0					
ANR	5229620	UnaryOperator	*		5229563	0					
ANR	5229621	Identifier	str		5229563	1					
ANR	5229622	CompoundStatement		8:28:174:174	5229563	1					
ANR	5229623	ReturnStatement	return 0 ;	1671:3:35067:35075	5229563	0	True				
ANR	5229624	PrimaryExpression	0		5229563	0					
ANR	5229625	ExpressionStatement	str ++	1673:2:35083:35088	5229563	3	True				
ANR	5229626	PostIncDecOperationExpression	str ++		5229563	0					
ANR	5229627	Identifier	str		5229563	0					
ANR	5229628	IncDec	++		5229563	1					
ANR	5229629	ExpressionStatement	size --	1674:2:35092:35098	5229563	4	True				
ANR	5229630	PostIncDecOperationExpression	size --		5229563	0					
ANR	5229631	Identifier	size		5229563	0					
ANR	5229632	IncDec	--		5229563	1					
ANR	5229633	ReturnStatement	return 1 ;	1676:1:35104:35112	5229563	1	True				
ANR	5229634	PrimaryExpression	1		5229563	0					
ANR	5229635	ReturnType	R_API int		5229563	1					
ANR	5229636	Identifier	r_str_is_printable_limited		5229563	2					
ANR	5229637	ParameterList	"const char * str , int size"		5229563	3					
ANR	5229638	Parameter	const char * str	1663:37:34860:34874	5229563	0	True				
ANR	5229639	ParameterType	const char *		5229563	0					
ANR	5229640	Identifier	str		5229563	1					
ANR	5229641	Parameter	int size	1663:54:34877:34884	5229563	1	True				
ANR	5229642	ParameterType	int		5229563	0					
ANR	5229643	Identifier	size		5229563	1					
ANR	5229644	CFGEntryNode	ENTRY		5229563		True				
ANR	5229645	CFGExitNode	EXIT		5229563		True				
ANR	5229646	Symbol	str		5229563						
ANR	5229647	Symbol	strlen		5229563						
ANR	5229648	Symbol	NULL		5229563						
ANR	5229649	Symbol	IS_PRINTABLE		5229563						
ANR	5229650	Symbol	size		5229563						
ANR	5229651	Symbol	r_utf8_decode		5229563						
ANR	5229652	Symbol	ulen		5229563						
ANR	5229653	Symbol	* str		5229563						
ANR	5229654	Function	r_str_is_printable_incl_newlines	1679:0:35117:35451							
ANR	5229655	FunctionDef	r_str_is_printable_incl_newlines (const char * str)		5229654	0					
ANR	5229656	CompoundStatement		1679:61:35178:35451	5229654	0					
ANR	5229657	WhileStatement	while ( * str )		5229654	0					
ANR	5229658	Condition	* str	1680:8:35188:35191	5229654	0	True				
ANR	5229659	UnaryOperationExpression	* str		5229654	0					
ANR	5229660	UnaryOperator	*		5229654	0					
ANR	5229661	Identifier	str		5229654	1					
ANR	5229662	CompoundStatement		3:2:19:81	5229654	1					
ANR	5229663	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1681:2:35198:35260	5229654	0	True				
ANR	5229664	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229654	0					
ANR	5229665	IdentifierDeclType	int		5229654	0					
ANR	5229666	Identifier	ulen		5229654	1					
ANR	5229667	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229654	2		=			
ANR	5229668	Identifier	ulen		5229654	0					
ANR	5229669	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		5229654	1					
ANR	5229670	Callee	r_utf8_decode		5229654	0					
ANR	5229671	Identifier	r_utf8_decode		5229654	0					
ANR	5229672	ArgumentList	( const ut8 * ) str		5229654	1					
ANR	5229673	Argument	( const ut8 * ) str		5229654	0					
ANR	5229674	CastExpression	( const ut8 * ) str		5229654	0					
ANR	5229675	CastTarget	const ut8 *		5229654	0					
ANR	5229676	Identifier	str		5229654	1					
ANR	5229677	Argument	strlen ( str )		5229654	1					
ANR	5229678	CallExpression	strlen ( str )		5229654	0					
ANR	5229679	Callee	strlen		5229654	0					
ANR	5229680	Identifier	strlen		5229654	0					
ANR	5229681	ArgumentList	str		5229654	1					
ANR	5229682	Argument	str		5229654	0					
ANR	5229683	Identifier	str		5229654	0					
ANR	5229684	Argument	NULL		5229654	2					
ANR	5229685	Identifier	NULL		5229654	0					
ANR	5229686	IfStatement	if ( ulen > 1 )		5229654	1					
ANR	5229687	Condition	ulen > 1	1682:6:35268:35275	5229654	0	True				
ANR	5229688	RelationalExpression	ulen > 1		5229654	0		>			
ANR	5229689	Identifier	ulen		5229654	0					
ANR	5229690	PrimaryExpression	1		5229654	1					
ANR	5229691	CompoundStatement		4:16:99:99	5229654	1					
ANR	5229692	ExpressionStatement	str += ulen	1683:3:35283:35294	5229654	0	True				
ANR	5229693	AssignmentExpression	str += ulen		5229654	0		+=			
ANR	5229694	Identifier	str		5229654	0					
ANR	5229695	Identifier	ulen		5229654	1					
ANR	5229696	ContinueStatement	continue ;	1684:3:35299:35307	5229654	1	True				
ANR	5229697	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		5229654	2					
ANR	5229698	Condition	! IS_PRINTABLE ( * str )	1686:6:35319:35338	5229654	0	True				
ANR	5229699	UnaryOperationExpression	! IS_PRINTABLE ( * str )		5229654	0					
ANR	5229700	UnaryOperator	!		5229654	0					
ANR	5229701	CallExpression	IS_PRINTABLE ( * str )		5229654	1					
ANR	5229702	Callee	IS_PRINTABLE		5229654	0					
ANR	5229703	Identifier	IS_PRINTABLE		5229654	0					
ANR	5229704	ArgumentList	* str		5229654	1					
ANR	5229705	Argument	* str		5229654	0					
ANR	5229706	UnaryOperationExpression	* str		5229654	0					
ANR	5229707	UnaryOperator	*		5229654	0					
ANR	5229708	Identifier	str		5229654	1					
ANR	5229709	CompoundStatement		8:28:162:162	5229654	1					
ANR	5229710	IfStatement	if ( * str != '\\r' && * str != '\\n' && * str != '\\t' )		5229654	0					
ANR	5229711	Condition	* str != '\\r' && * str != '\\n' && * str != '\\t'	1687:7:35350:35393	5229654	0	True				
ANR	5229712	AndExpression	* str != '\\r' && * str != '\\n' && * str != '\\t'		5229654	0		&&			
ANR	5229713	EqualityExpression	* str != '\\r'		5229654	0		!=			
ANR	5229714	UnaryOperationExpression	* str		5229654	0					
ANR	5229715	UnaryOperator	*		5229654	0					
ANR	5229716	Identifier	str		5229654	1					
ANR	5229717	PrimaryExpression	'\\r'		5229654	1					
ANR	5229718	AndExpression	* str != '\\n' && * str != '\\t'		5229654	1		&&			
ANR	5229719	EqualityExpression	* str != '\\n'		5229654	0		!=			
ANR	5229720	UnaryOperationExpression	* str		5229654	0					
ANR	5229721	UnaryOperator	*		5229654	0					
ANR	5229722	Identifier	str		5229654	1					
ANR	5229723	PrimaryExpression	'\\n'		5229654	1					
ANR	5229724	EqualityExpression	* str != '\\t'		5229654	1		!=			
ANR	5229725	UnaryOperationExpression	* str		5229654	0					
ANR	5229726	UnaryOperator	*		5229654	0					
ANR	5229727	Identifier	str		5229654	1					
ANR	5229728	PrimaryExpression	'\\t'		5229654	1					
ANR	5229729	CompoundStatement		9:53:217:217	5229654	1					
ANR	5229730	ReturnStatement	return false ;	1688:4:35402:35414	5229654	0	True				
ANR	5229731	Identifier	false		5229654	0					
ANR	5229732	ExpressionStatement	str ++	1691:2:35427:35432	5229654	3	True				
ANR	5229733	PostIncDecOperationExpression	str ++		5229654	0					
ANR	5229734	Identifier	str		5229654	0					
ANR	5229735	IncDec	++		5229654	1					
ANR	5229736	ReturnStatement	return true ;	1693:1:35438:35449	5229654	1	True				
ANR	5229737	Identifier	true		5229654	0					
ANR	5229738	ReturnType	R_API bool		5229654	1					
ANR	5229739	Identifier	r_str_is_printable_incl_newlines		5229654	2					
ANR	5229740	ParameterList	const char * str		5229654	3					
ANR	5229741	Parameter	const char * str	1679:44:35161:35175	5229654	0	True				
ANR	5229742	ParameterType	const char *		5229654	0					
ANR	5229743	Identifier	str		5229654	1					
ANR	5229744	CFGEntryNode	ENTRY		5229654		True				
ANR	5229745	CFGExitNode	EXIT		5229654		True				
ANR	5229746	Symbol	str		5229654						
ANR	5229747	Symbol	strlen		5229654						
ANR	5229748	Symbol	NULL		5229654						
ANR	5229749	Symbol	IS_PRINTABLE		5229654						
ANR	5229750	Symbol	r_utf8_decode		5229654						
ANR	5229751	Symbol	ulen		5229654						
ANR	5229752	Symbol	false		5229654						
ANR	5229753	Symbol	true		5229654						
ANR	5229754	Symbol	* str		5229654						
ANR	5229755	Function	r_wstr_clen	1697:0:35510:35645							
ANR	5229756	FunctionDef	r_wstr_clen (const char * s)		5229755	0					
ANR	5229757	CompoundStatement		1697:37:35547:35645	5229755	0					
ANR	5229758	IdentifierDeclStatement	int len = 0 ;	1698:1:35550:35561	5229755	0	True				
ANR	5229759	IdentifierDecl	len = 0		5229755	0					
ANR	5229760	IdentifierDeclType	int		5229755	0					
ANR	5229761	Identifier	len		5229755	1					
ANR	5229762	AssignmentExpression	len = 0		5229755	2		=			
ANR	5229763	Identifier	len		5229755	0					
ANR	5229764	PrimaryExpression	0		5229755	1					
ANR	5229765	IfStatement	if ( ! * s ++ )		5229755	1					
ANR	5229766	Condition	! * s ++	1699:5:35568:35572	5229755	0	True				
ANR	5229767	UnaryOperationExpression	! * s ++		5229755	0					
ANR	5229768	UnaryOperator	!		5229755	0					
ANR	5229769	UnaryOperationExpression	* s ++		5229755	1					
ANR	5229770	UnaryOperator	*		5229755	0					
ANR	5229771	PostIncDecOperationExpression	s ++		5229755	1					
ANR	5229772	Identifier	s		5229755	0					
ANR	5229773	IncDec	++		5229755	1					
ANR	5229774	CompoundStatement		3:12:27:27	5229755	1					
ANR	5229775	ReturnStatement	return 0 ;	1700:2:35579:35587	5229755	0	True				
ANR	5229776	PrimaryExpression	0		5229755	0					
ANR	5229777	WhileStatement	while ( * s ++ || * s ++ )		5229755	2					
ANR	5229778	Condition	* s ++ || * s ++	1702:8:35600:35611	5229755	0	True				
ANR	5229779	OrExpression	* s ++ || * s ++		5229755	0		||			
ANR	5229780	UnaryOperationExpression	* s ++		5229755	0					
ANR	5229781	UnaryOperator	*		5229755	0					
ANR	5229782	PostIncDecOperationExpression	s ++		5229755	1					
ANR	5229783	Identifier	s		5229755	0					
ANR	5229784	IncDec	++		5229755	1					
ANR	5229785	UnaryOperationExpression	* s ++		5229755	1					
ANR	5229786	UnaryOperator	*		5229755	0					
ANR	5229787	PostIncDecOperationExpression	s ++		5229755	1					
ANR	5229788	Identifier	s		5229755	0					
ANR	5229789	IncDec	++		5229755	1					
ANR	5229790	CompoundStatement		6:22:66:66	5229755	1					
ANR	5229791	ExpressionStatement	len ++	1703:2:35618:35623	5229755	0	True				
ANR	5229792	PostIncDecOperationExpression	len ++		5229755	0					
ANR	5229793	Identifier	len		5229755	0					
ANR	5229794	IncDec	++		5229755	1					
ANR	5229795	ReturnStatement	return len + 1 ;	1705:1:35629:35643	5229755	3	True				
ANR	5229796	AdditiveExpression	len + 1		5229755	0		+			
ANR	5229797	Identifier	len		5229755	0					
ANR	5229798	PrimaryExpression	1		5229755	1					
ANR	5229799	ReturnType	R_API int		5229755	1					
ANR	5229800	Identifier	r_wstr_clen		5229755	2					
ANR	5229801	ParameterList	const char * s		5229755	3					
ANR	5229802	Parameter	const char * s	1697:22:35532:35544	5229755	0	True				
ANR	5229803	ParameterType	const char *		5229755	0					
ANR	5229804	Identifier	s		5229755	1					
ANR	5229805	CFGEntryNode	ENTRY		5229755		True				
ANR	5229806	CFGExitNode	EXIT		5229755		True				
ANR	5229807	Symbol	* s ++		5229755						
ANR	5229808	Symbol	s		5229755						
ANR	5229809	Symbol	len		5229755						
ANR	5229810	Function	r_str_ansi_chrn	1708:6:35654:35956							
ANR	5229811	FunctionDef	"r_str_ansi_chrn (const char * str , int n)"		5229810	0					
ANR	5229812	CompoundStatement		1708:58:35706:35956	5229810	0					
ANR	5229813	IdentifierDeclStatement	"int len , i , li ;"	1709:1:35709:35723	5229810	0	True				
ANR	5229814	IdentifierDecl	len		5229810	0					
ANR	5229815	IdentifierDeclType	int		5229810	0					
ANR	5229816	Identifier	len		5229810	1					
ANR	5229817	IdentifierDecl	i		5229810	1					
ANR	5229818	IdentifierDeclType	int		5229810	0					
ANR	5229819	Identifier	i		5229810	1					
ANR	5229820	IdentifierDecl	li		5229810	2					
ANR	5229821	IdentifierDeclType	int		5229810	0					
ANR	5229822	Identifier	li		5229810	1					
ANR	5229823	ForStatement	for ( li = i = len = 0 ; str [ i ] && ( n != len ) ; i ++ )		5229810	1					
ANR	5229824	ForInit	li = i = len = 0 ;	1710:6:35731:35747	5229810	0	True				
ANR	5229825	AssignmentExpression	li = i = len = 0		5229810	0		=			
ANR	5229826	Identifier	li		5229810	0					
ANR	5229827	AssignmentExpression	i = len = 0		5229810	1		=			
ANR	5229828	Identifier	i		5229810	0					
ANR	5229829	AssignmentExpression	len = 0		5229810	1		=			
ANR	5229830	Identifier	len		5229810	0					
ANR	5229831	PrimaryExpression	0		5229810	1					
ANR	5229832	Condition	str [ i ] && ( n != len )	1710:24:35749:35768	5229810	1	True				
ANR	5229833	AndExpression	str [ i ] && ( n != len )		5229810	0		&&			
ANR	5229834	ArrayIndexing	str [ i ]		5229810	0					
ANR	5229835	Identifier	str		5229810	0					
ANR	5229836	Identifier	i		5229810	1					
ANR	5229837	EqualityExpression	n != len		5229810	1		!=			
ANR	5229838	Identifier	n		5229810	0					
ANR	5229839	Identifier	len		5229810	1					
ANR	5229840	PostIncDecOperationExpression	i ++	1710:46:35771:35773	5229810	2	True				
ANR	5229841	Identifier	i		5229810	0					
ANR	5229842	IncDec	++		5229810	1					
ANR	5229843	CompoundStatement		4:2:73:112	5229810	3					
ANR	5229844	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1711:2:35780:35819	5229810	0	True				
ANR	5229845	IdentifierDecl	chlen = __str_ansi_length ( str + i )		5229810	0					
ANR	5229846	IdentifierDeclType	int		5229810	0					
ANR	5229847	Identifier	chlen		5229810	1					
ANR	5229848	AssignmentExpression	chlen = __str_ansi_length ( str + i )		5229810	2		=			
ANR	5229849	Identifier	chlen		5229810	0					
ANR	5229850	CallExpression	__str_ansi_length ( str + i )		5229810	1					
ANR	5229851	Callee	__str_ansi_length		5229810	0					
ANR	5229852	Identifier	__str_ansi_length		5229810	0					
ANR	5229853	ArgumentList	str + i		5229810	1					
ANR	5229854	Argument	str + i		5229810	0					
ANR	5229855	AdditiveExpression	str + i		5229810	0		+			
ANR	5229856	Identifier	str		5229810	0					
ANR	5229857	Identifier	i		5229810	1					
ANR	5229858	IfStatement	if ( chlen > 1 )		5229810	1					
ANR	5229859	Condition	chlen > 1	1712:6:35827:35835	5229810	0	True				
ANR	5229860	RelationalExpression	chlen > 1		5229810	0		>			
ANR	5229861	Identifier	chlen		5229810	0					
ANR	5229862	PrimaryExpression	1		5229810	1					
ANR	5229863	CompoundStatement		5:17:131:131	5229810	1					
ANR	5229864	ExpressionStatement	i += chlen - 1	1713:3:35843:35857	5229810	0	True				
ANR	5229865	AssignmentExpression	i += chlen - 1		5229810	0		+=			
ANR	5229866	Identifier	i		5229810	0					
ANR	5229867	AdditiveExpression	chlen - 1		5229810	1		-			
ANR	5229868	Identifier	chlen		5229810	0					
ANR	5229869	PrimaryExpression	1		5229810	1					
ANR	5229870	ElseStatement	else		5229810	0					
ANR	5229871	CompoundStatement		7:9:161:161	5229810	0					
ANR	5229872	IfStatement	if ( ( str [ i ] & 0xc0 ) != 0x80 )		5229810	0					
ANR	5229873	Condition	( str [ i ] & 0xc0 ) != 0x80	1715:7:35877:35899	5229810	0	True				
ANR	5229874	EqualityExpression	( str [ i ] & 0xc0 ) != 0x80		5229810	0		!=			
ANR	5229875	BitAndExpression	str [ i ] & 0xc0		5229810	0		&			
ANR	5229876	ArrayIndexing	str [ i ]		5229810	0					
ANR	5229877	Identifier	str		5229810	0					
ANR	5229878	Identifier	i		5229810	1					
ANR	5229879	PrimaryExpression	0xc0		5229810	1					
ANR	5229880	PrimaryExpression	0x80		5229810	1					
ANR	5229881	CompoundStatement		8:32:195:195	5229810	1					
ANR	5229882	ExpressionStatement	len ++	1716:4:35908:35913	5229810	0	True				
ANR	5229883	PostIncDecOperationExpression	len ++		5229810	0					
ANR	5229884	Identifier	len		5229810	0					
ANR	5229885	IncDec	++		5229810	1					
ANR	5229886	ExpressionStatement	li = i	1718:3:35923:35929	5229810	1	True				
ANR	5229887	AssignmentExpression	li = i		5229810	0		=			
ANR	5229888	Identifier	li		5229810	0					
ANR	5229889	Identifier	i		5229810	1					
ANR	5229890	ReturnStatement	return str + li ;	1721:1:35939:35954	5229810	2	True				
ANR	5229891	AdditiveExpression	str + li		5229810	0		+			
ANR	5229892	Identifier	str		5229810	0					
ANR	5229893	Identifier	li		5229810	1					
ANR	5229894	ReturnType	const char *		5229810	1					
ANR	5229895	Identifier	r_str_ansi_chrn		5229810	2					
ANR	5229896	ParameterList	"const char * str , int n"		5229810	3					
ANR	5229897	Parameter	const char * str	1708:34:35682:35696	5229810	0	True				
ANR	5229898	ParameterType	const char *		5229810	0					
ANR	5229899	Identifier	str		5229810	1					
ANR	5229900	Parameter	int n	1708:51:35699:35703	5229810	1	True				
ANR	5229901	ParameterType	int		5229810	0					
ANR	5229902	Identifier	n		5229810	1					
ANR	5229903	CFGEntryNode	ENTRY		5229810		True				
ANR	5229904	CFGExitNode	EXIT		5229810		True				
ANR	5229905	Symbol	str		5229810						
ANR	5229906	Symbol	* i		5229810						
ANR	5229907	Symbol	chlen		5229810						
ANR	5229908	Symbol	len		5229810						
ANR	5229909	Symbol	i		5229810						
ANR	5229910	Symbol	__str_ansi_length		5229810						
ANR	5229911	Symbol	* str		5229810						
ANR	5229912	Symbol	li		5229810						
ANR	5229913	Symbol	n		5229810						
ANR	5229914	Function	r_str_ansi_filter	1734:0:36290:36982							
ANR	5229915	FunctionDef	"r_str_ansi_filter (char * str , char * * out , int * * cposs , int len)"		5229914	0					
ANR	5229916	CompoundStatement		1734:73:36363:36982	5229914	0					
ANR	5229917	IdentifierDeclStatement	"int i , j , * cps ;"	1735:1:36366:36380	5229914	0	True				
ANR	5229918	IdentifierDecl	i		5229914	0					
ANR	5229919	IdentifierDeclType	int		5229914	0					
ANR	5229920	Identifier	i		5229914	1					
ANR	5229921	IdentifierDecl	j		5229914	1					
ANR	5229922	IdentifierDeclType	int		5229914	0					
ANR	5229923	Identifier	j		5229914	1					
ANR	5229924	IdentifierDecl	* cps		5229914	2					
ANR	5229925	IdentifierDeclType	int *		5229914	0					
ANR	5229926	Identifier	cps		5229914	1					
ANR	5229927	IfStatement	if ( len == 0 )		5229914	1					
ANR	5229928	Condition	len == 0	1737:5:36388:36395	5229914	0	True				
ANR	5229929	EqualityExpression	len == 0		5229914	0		==			
ANR	5229930	Identifier	len		5229914	0					
ANR	5229931	PrimaryExpression	0		5229914	1					
ANR	5229932	CompoundStatement		4:15:34:34	5229914	1					
ANR	5229933	ReturnStatement	return 0 ;	1738:2:36402:36410	5229914	0	True				
ANR	5229934	PrimaryExpression	0		5229914	0					
ANR	5229935	IfStatement	if ( len < 0 )		5229914	2					
ANR	5229936	Condition	len < 0	1740:5:36420:36426	5229914	0	True				
ANR	5229937	RelationalExpression	len < 0		5229914	0		<			
ANR	5229938	Identifier	len		5229914	0					
ANR	5229939	PrimaryExpression	0		5229914	1					
ANR	5229940	CompoundStatement		7:14:65:65	5229914	1					
ANR	5229941	ExpressionStatement	len = strlen ( str )	1741:2:36433:36451	5229914	0	True				
ANR	5229942	AssignmentExpression	len = strlen ( str )		5229914	0		=			
ANR	5229943	Identifier	len		5229914	0					
ANR	5229944	CallExpression	strlen ( str )		5229914	1					
ANR	5229945	Callee	strlen		5229914	0					
ANR	5229946	Identifier	strlen		5229914	0					
ANR	5229947	ArgumentList	str		5229914	1					
ANR	5229948	Argument	str		5229914	0					
ANR	5229949	Identifier	str		5229914	0					
ANR	5229950	IdentifierDeclStatement	char * tmp = malloc ( len + 1 ) ;	1743:1:36457:36485	5229914	3	True				
ANR	5229951	IdentifierDecl	* tmp = malloc ( len + 1 )		5229914	0					
ANR	5229952	IdentifierDeclType	char *		5229914	0					
ANR	5229953	Identifier	tmp		5229914	1					
ANR	5229954	AssignmentExpression	* tmp = malloc ( len + 1 )		5229914	2		=			
ANR	5229955	Identifier	tmp		5229914	0					
ANR	5229956	CallExpression	malloc ( len + 1 )		5229914	1					
ANR	5229957	Callee	malloc		5229914	0					
ANR	5229958	Identifier	malloc		5229914	0					
ANR	5229959	ArgumentList	len + 1		5229914	1					
ANR	5229960	Argument	len + 1		5229914	0					
ANR	5229961	AdditiveExpression	len + 1		5229914	0		+			
ANR	5229962	Identifier	len		5229914	0					
ANR	5229963	PrimaryExpression	1		5229914	1					
ANR	5229964	IfStatement	if ( ! tmp )		5229914	4					
ANR	5229965	Condition	! tmp	1744:5:36492:36495	5229914	0	True				
ANR	5229966	UnaryOperationExpression	! tmp		5229914	0					
ANR	5229967	UnaryOperator	!		5229914	0					
ANR	5229968	Identifier	tmp		5229914	1					
ANR	5229969	CompoundStatement		11:11:134:134	5229914	1					
ANR	5229970	ReturnStatement	return - 1 ;	1745:2:36502:36511	5229914	0	True				
ANR	5229971	UnaryOperationExpression	- 1		5229914	0					
ANR	5229972	UnaryOperator	-		5229914	0					
ANR	5229973	PrimaryExpression	1		5229914	1					
ANR	5229974	ExpressionStatement	"memcpy ( tmp , str , len + 1 )"	1747:1:36517:36543	5229914	5	True				
ANR	5229975	CallExpression	"memcpy ( tmp , str , len + 1 )"		5229914	0					
ANR	5229976	Callee	memcpy		5229914	0					
ANR	5229977	Identifier	memcpy		5229914	0					
ANR	5229978	ArgumentList	tmp		5229914	1					
ANR	5229979	Argument	tmp		5229914	0					
ANR	5229980	Identifier	tmp		5229914	0					
ANR	5229981	Argument	str		5229914	1					
ANR	5229982	Identifier	str		5229914	0					
ANR	5229983	Argument	len + 1		5229914	2					
ANR	5229984	AdditiveExpression	len + 1		5229914	0		+			
ANR	5229985	Identifier	len		5229914	0					
ANR	5229986	PrimaryExpression	1		5229914	1					
ANR	5229987	ExpressionStatement	"cps = calloc ( len + 1 , sizeof ( int ) )"	1748:1:36546:36582	5229914	6	True				
ANR	5229988	AssignmentExpression	"cps = calloc ( len + 1 , sizeof ( int ) )"		5229914	0		=			
ANR	5229989	Identifier	cps		5229914	0					
ANR	5229990	CallExpression	"calloc ( len + 1 , sizeof ( int ) )"		5229914	1					
ANR	5229991	Callee	calloc		5229914	0					
ANR	5229992	Identifier	calloc		5229914	0					
ANR	5229993	ArgumentList	len + 1		5229914	1					
ANR	5229994	Argument	len + 1		5229914	0					
ANR	5229995	AdditiveExpression	len + 1		5229914	0		+			
ANR	5229996	Identifier	len		5229914	0					
ANR	5229997	PrimaryExpression	1		5229914	1					
ANR	5229998	Argument	sizeof ( int )		5229914	1					
ANR	5229999	SizeofExpression	sizeof ( int )		5229914	0					
ANR	5230000	Sizeof	sizeof		5229914	0					
ANR	5230001	SizeofOperand	int		5229914	1					
ANR	5230002	IfStatement	if ( ! cps )		5229914	7					
ANR	5230003	Condition	! cps	1749:5:36589:36592	5229914	0	True				
ANR	5230004	UnaryOperationExpression	! cps		5229914	0					
ANR	5230005	UnaryOperator	!		5229914	0					
ANR	5230006	Identifier	cps		5229914	1					
ANR	5230007	CompoundStatement		16:11:231:231	5229914	1					
ANR	5230008	ExpressionStatement	free ( tmp )	1750:2:36599:36609	5229914	0	True				
ANR	5230009	CallExpression	free ( tmp )		5229914	0					
ANR	5230010	Callee	free		5229914	0					
ANR	5230011	Identifier	free		5229914	0					
ANR	5230012	ArgumentList	tmp		5229914	1					
ANR	5230013	Argument	tmp		5229914	0					
ANR	5230014	Identifier	tmp		5229914	0					
ANR	5230015	ReturnStatement	return - 1 ;	1751:2:36613:36622	5229914	1	True				
ANR	5230016	UnaryOperationExpression	- 1		5229914	0					
ANR	5230017	UnaryOperator	-		5229914	0					
ANR	5230018	PrimaryExpression	1		5229914	1					
ANR	5230019	ForStatement	for ( i = j = 0 ; i < len ; i ++ )		5229914	8					
ANR	5230020	ForInit	i = j = 0 ;	1754:6:36634:36643	5229914	0	True				
ANR	5230021	AssignmentExpression	i = j = 0		5229914	0		=			
ANR	5230022	Identifier	i		5229914	0					
ANR	5230023	AssignmentExpression	j = 0		5229914	1		=			
ANR	5230024	Identifier	j		5229914	0					
ANR	5230025	PrimaryExpression	0		5229914	1					
ANR	5230026	Condition	i < len	1754:17:36645:36651	5229914	1	True				
ANR	5230027	RelationalExpression	i < len		5229914	0		<			
ANR	5230028	Identifier	i		5229914	0					
ANR	5230029	Identifier	len		5229914	1					
ANR	5230030	PostIncDecOperationExpression	i ++	1754:26:36654:36656	5229914	2	True				
ANR	5230031	Identifier	i		5229914	0					
ANR	5230032	IncDec	++		5229914	1					
ANR	5230033	CompoundStatement		21:31:295:295	5229914	3					
ANR	5230034	IfStatement	if ( tmp [ i ] == 0x1b )		5229914	0					
ANR	5230035	Condition	tmp [ i ] == 0x1b	1755:6:36667:36680	5229914	0	True				
ANR	5230036	EqualityExpression	tmp [ i ] == 0x1b		5229914	0		==			
ANR	5230037	ArrayIndexing	tmp [ i ]		5229914	0					
ANR	5230038	Identifier	tmp		5229914	0					
ANR	5230039	Identifier	i		5229914	1					
ANR	5230040	PrimaryExpression	0x1b		5229914	1					
ANR	5230041	CompoundStatement		23:3:324:363	5229914	1					
ANR	5230042	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1756:3:36688:36727	5229914	0	True				
ANR	5230043	IdentifierDecl	chlen = __str_ansi_length ( str + i )		5229914	0					
ANR	5230044	IdentifierDeclType	int		5229914	0					
ANR	5230045	Identifier	chlen		5229914	1					
ANR	5230046	AssignmentExpression	chlen = __str_ansi_length ( str + i )		5229914	2		=			
ANR	5230047	Identifier	chlen		5229914	0					
ANR	5230048	CallExpression	__str_ansi_length ( str + i )		5229914	1					
ANR	5230049	Callee	__str_ansi_length		5229914	0					
ANR	5230050	Identifier	__str_ansi_length		5229914	0					
ANR	5230051	ArgumentList	str + i		5229914	1					
ANR	5230052	Argument	str + i		5229914	0					
ANR	5230053	AdditiveExpression	str + i		5229914	0		+			
ANR	5230054	Identifier	str		5229914	0					
ANR	5230055	Identifier	i		5229914	1					
ANR	5230056	IfStatement	if ( chlen > 1 )		5229914	1					
ANR	5230057	Condition	chlen > 1	1757:7:36736:36744	5229914	0	True				
ANR	5230058	RelationalExpression	chlen > 1		5229914	0		>			
ANR	5230059	Identifier	chlen		5229914	0					
ANR	5230060	PrimaryExpression	1		5229914	1					
ANR	5230061	CompoundStatement		24:18:383:383	5229914	1					
ANR	5230062	ExpressionStatement	i += chlen	1758:4:36753:36763	5229914	0	True				
ANR	5230063	AssignmentExpression	i += chlen		5229914	0		+=			
ANR	5230064	Identifier	i		5229914	0					
ANR	5230065	Identifier	chlen		5229914	1					
ANR	5230066	ExpressionStatement	i --	1759:4:36769:36772	5229914	1	True				
ANR	5230067	PostIncDecOperationExpression	i --		5229914	0					
ANR	5230068	Identifier	i		5229914	0					
ANR	5230069	IncDec	--		5229914	1					
ANR	5230070	ElseStatement	else		5229914	0					
ANR	5230071	CompoundStatement		28:9:424:424	5229914	0					
ANR	5230072	ExpressionStatement	str [ j ] = tmp [ i ]	1762:3:36793:36808	5229914	0	True				
ANR	5230073	AssignmentExpression	str [ j ] = tmp [ i ]		5229914	0		=			
ANR	5230074	ArrayIndexing	str [ j ]		5229914	0					
ANR	5230075	Identifier	str		5229914	0					
ANR	5230076	Identifier	j		5229914	1					
ANR	5230077	ArrayIndexing	tmp [ i ]		5229914	1					
ANR	5230078	Identifier	tmp		5229914	0					
ANR	5230079	Identifier	i		5229914	1					
ANR	5230080	ExpressionStatement	cps [ j ] = i	1763:3:36813:36823	5229914	1	True				
ANR	5230081	AssignmentExpression	cps [ j ] = i		5229914	0		=			
ANR	5230082	ArrayIndexing	cps [ j ]		5229914	0					
ANR	5230083	Identifier	cps		5229914	0					
ANR	5230084	Identifier	j		5229914	1					
ANR	5230085	Identifier	i		5229914	1					
ANR	5230086	ExpressionStatement	j ++	1764:3:36828:36831	5229914	2	True				
ANR	5230087	PostIncDecOperationExpression	j ++		5229914	0					
ANR	5230088	Identifier	j		5229914	0					
ANR	5230089	IncDec	++		5229914	1					
ANR	5230090	ExpressionStatement	str [ j ] = tmp [ i ]	1767:1:36841:36856	5229914	9	True				
ANR	5230091	AssignmentExpression	str [ j ] = tmp [ i ]		5229914	0		=			
ANR	5230092	ArrayIndexing	str [ j ]		5229914	0					
ANR	5230093	Identifier	str		5229914	0					
ANR	5230094	Identifier	j		5229914	1					
ANR	5230095	ArrayIndexing	tmp [ i ]		5229914	1					
ANR	5230096	Identifier	tmp		5229914	0					
ANR	5230097	Identifier	i		5229914	1					
ANR	5230098	IfStatement	if ( out )		5229914	10					
ANR	5230099	Condition	out	1769:5:36864:36866	5229914	0	True				
ANR	5230100	Identifier	out		5229914	0					
ANR	5230101	CompoundStatement		36:10:505:505	5229914	1					
ANR	5230102	ExpressionStatement	* out = tmp	1770:2:36873:36883	5229914	0	True				
ANR	5230103	AssignmentExpression	* out = tmp		5229914	0		=			
ANR	5230104	UnaryOperationExpression	* out		5229914	0					
ANR	5230105	UnaryOperator	*		5229914	0					
ANR	5230106	Identifier	out		5229914	1					
ANR	5230107	Identifier	tmp		5229914	1					
ANR	5230108	ElseStatement	else		5229914	0					
ANR	5230109	CompoundStatement		38:8:529:529	5229914	0					
ANR	5230110	ExpressionStatement	free ( tmp )	1772:2:36897:36907	5229914	0	True				
ANR	5230111	CallExpression	free ( tmp )		5229914	0					
ANR	5230112	Callee	free		5229914	0					
ANR	5230113	Identifier	free		5229914	0					
ANR	5230114	ArgumentList	tmp		5229914	1					
ANR	5230115	Argument	tmp		5229914	0					
ANR	5230116	Identifier	tmp		5229914	0					
ANR	5230117	IfStatement	if ( cposs )		5229914	11					
ANR	5230118	Condition	cposs	1775:5:36918:36922	5229914	0	True				
ANR	5230119	Identifier	cposs		5229914	0					
ANR	5230120	CompoundStatement		42:12:561:561	5229914	1					
ANR	5230121	ExpressionStatement	* cposs = cps	1776:2:36929:36941	5229914	0	True				
ANR	5230122	AssignmentExpression	* cposs = cps		5229914	0		=			
ANR	5230123	UnaryOperationExpression	* cposs		5229914	0					
ANR	5230124	UnaryOperator	*		5229914	0					
ANR	5230125	Identifier	cposs		5229914	1					
ANR	5230126	Identifier	cps		5229914	1					
ANR	5230127	ElseStatement	else		5229914	0					
ANR	5230128	CompoundStatement		44:8:587:587	5229914	0					
ANR	5230129	ExpressionStatement	free ( cps )	1778:2:36955:36965	5229914	0	True				
ANR	5230130	CallExpression	free ( cps )		5229914	0					
ANR	5230131	Callee	free		5229914	0					
ANR	5230132	Identifier	free		5229914	0					
ANR	5230133	ArgumentList	cps		5229914	1					
ANR	5230134	Argument	cps		5229914	0					
ANR	5230135	Identifier	cps		5229914	0					
ANR	5230136	ReturnStatement	return j ;	1781:1:36972:36980	5229914	12	True				
ANR	5230137	Identifier	j		5229914	0					
ANR	5230138	ReturnType	R_API int		5229914	1					
ANR	5230139	Identifier	r_str_ansi_filter		5229914	2					
ANR	5230140	ParameterList	"char * str , char * * out , int * * cposs , int len"		5229914	3					
ANR	5230141	Parameter	char * str	1734:28:36318:36326	5229914	0	True				
ANR	5230142	ParameterType	char *		5229914	0					
ANR	5230143	Identifier	str		5229914	1					
ANR	5230144	Parameter	char * * out	1734:39:36329:36338	5229914	1	True				
ANR	5230145	ParameterType	char * *		5229914	0					
ANR	5230146	Identifier	out		5229914	1					
ANR	5230147	Parameter	int * * cposs	1734:51:36341:36351	5229914	2	True				
ANR	5230148	ParameterType	int * *		5229914	0					
ANR	5230149	Identifier	cposs		5229914	1					
ANR	5230150	Parameter	int len	1734:64:36354:36360	5229914	3	True				
ANR	5230151	ParameterType	int		5229914	0					
ANR	5230152	Identifier	len		5229914	1					
ANR	5230153	CFGEntryNode	ENTRY		5229914		True				
ANR	5230154	CFGExitNode	EXIT		5229914		True				
ANR	5230155	Symbol	malloc		5229914						
ANR	5230156	Symbol	* tmp		5229914						
ANR	5230157	Symbol	* cposs		5229914						
ANR	5230158	Symbol	cposs		5229914						
ANR	5230159	Symbol	cps		5229914						
ANR	5230160	Symbol	i		5229914						
ANR	5230161	Symbol	j		5229914						
ANR	5230162	Symbol	calloc		5229914						
ANR	5230163	Symbol	out		5229914						
ANR	5230164	Symbol	* cps		5229914						
ANR	5230165	Symbol	str		5229914						
ANR	5230166	Symbol	strlen		5229914						
ANR	5230167	Symbol	* i		5229914						
ANR	5230168	Symbol	chlen		5229914						
ANR	5230169	Symbol	len		5229914						
ANR	5230170	Symbol	* j		5229914						
ANR	5230171	Symbol	tmp		5229914						
ANR	5230172	Symbol	* out		5229914						
ANR	5230173	Symbol	__str_ansi_length		5229914						
ANR	5230174	Symbol	* str		5229914						
ANR	5230175	Function	r_str_ansi_crop	1784:0:36985:38736							
ANR	5230176	FunctionDef	"r_str_ansi_crop (const char * str , ut32 x , ut32 y , ut32 x2 , ut32 y2)"		5230175	0					
ANR	5230177	CompoundStatement		1784:79:37064:38736	5230175	0					
ANR	5230178	IdentifierDeclStatement	"char * r , * r_end , * ret ;"	1785:1:37067:37088	5230175	0	True				
ANR	5230179	IdentifierDecl	* r		5230175	0					
ANR	5230180	IdentifierDeclType	char *		5230175	0					
ANR	5230181	Identifier	r		5230175	1					
ANR	5230182	IdentifierDecl	* r_end		5230175	1					
ANR	5230183	IdentifierDeclType	char *		5230175	0					
ANR	5230184	Identifier	r_end		5230175	1					
ANR	5230185	IdentifierDecl	* ret		5230175	2					
ANR	5230186	IdentifierDeclType	char *		5230175	0					
ANR	5230187	Identifier	ret		5230175	1					
ANR	5230188	IdentifierDeclStatement	"const char * s , * s_start ;"	1786:1:37091:37114	5230175	1	True				
ANR	5230189	IdentifierDecl	* s		5230175	0					
ANR	5230190	IdentifierDeclType	const char *		5230175	0					
ANR	5230191	Identifier	s		5230175	1					
ANR	5230192	IdentifierDecl	* s_start		5230175	1					
ANR	5230193	IdentifierDeclType	const char *		5230175	0					
ANR	5230194	Identifier	s_start		5230175	1					
ANR	5230195	IdentifierDeclStatement	"size_t r_len , str_len = 0 , nr_of_lines = 0 ;"	1787:1:37117:37159	5230175	2	True				
ANR	5230196	IdentifierDecl	r_len		5230175	0					
ANR	5230197	IdentifierDeclType	size_t		5230175	0					
ANR	5230198	Identifier	r_len		5230175	1					
ANR	5230199	IdentifierDecl	str_len = 0		5230175	1					
ANR	5230200	IdentifierDeclType	size_t		5230175	0					
ANR	5230201	Identifier	str_len		5230175	1					
ANR	5230202	AssignmentExpression	str_len = 0		5230175	2		=			
ANR	5230203	Identifier	str_len		5230175	0					
ANR	5230204	PrimaryExpression	0		5230175	1					
ANR	5230205	IdentifierDecl	nr_of_lines = 0		5230175	2					
ANR	5230206	IdentifierDeclType	size_t		5230175	0					
ANR	5230207	Identifier	nr_of_lines		5230175	1					
ANR	5230208	AssignmentExpression	nr_of_lines = 0		5230175	2		=			
ANR	5230209	Identifier	nr_of_lines		5230175	0					
ANR	5230210	PrimaryExpression	0		5230175	1					
ANR	5230211	IdentifierDeclStatement	"ut32 ch = 0 , cw = 0 ;"	1788:1:37162:37181	5230175	3	True				
ANR	5230212	IdentifierDecl	ch = 0		5230175	0					
ANR	5230213	IdentifierDeclType	ut32		5230175	0					
ANR	5230214	Identifier	ch		5230175	1					
ANR	5230215	AssignmentExpression	ch = 0		5230175	2		=			
ANR	5230216	Identifier	ch		5230175	0					
ANR	5230217	PrimaryExpression	0		5230175	1					
ANR	5230218	IdentifierDecl	cw = 0		5230175	1					
ANR	5230219	IdentifierDeclType	ut32		5230175	0					
ANR	5230220	Identifier	cw		5230175	1					
ANR	5230221	AssignmentExpression	cw = 0		5230175	2		=			
ANR	5230222	Identifier	cw		5230175	0					
ANR	5230223	PrimaryExpression	0		5230175	1					
ANR	5230224	IfStatement	if ( x2 <= x || y2 <= y || ! str )		5230175	4					
ANR	5230225	Condition	x2 <= x || y2 <= y || ! str	1789:5:37188:37213	5230175	0	True				
ANR	5230226	OrExpression	x2 <= x || y2 <= y || ! str		5230175	0		||			
ANR	5230227	RelationalExpression	x2 <= x		5230175	0		<=			
ANR	5230228	Identifier	x2		5230175	0					
ANR	5230229	Identifier	x		5230175	1					
ANR	5230230	OrExpression	y2 <= y || ! str		5230175	1		||			
ANR	5230231	RelationalExpression	y2 <= y		5230175	0		<=			
ANR	5230232	Identifier	y2		5230175	0					
ANR	5230233	Identifier	y		5230175	1					
ANR	5230234	UnaryOperationExpression	! str		5230175	1					
ANR	5230235	UnaryOperator	!		5230175	0					
ANR	5230236	Identifier	str		5230175	1					
ANR	5230237	CompoundStatement		6:33:151:151	5230175	1					
ANR	5230238	ReturnStatement	"return strdup ( """" ) ;"	1790:2:37220:37238	5230175	0	True				
ANR	5230239	CallExpression	"strdup ( """" )"		5230175	0					
ANR	5230240	Callee	strdup		5230175	0					
ANR	5230241	Identifier	strdup		5230175	0					
ANR	5230242	ArgumentList	""""""		5230175	1					
ANR	5230243	Argument	""""""		5230175	0					
ANR	5230244	PrimaryExpression	""""""		5230175	0					
ANR	5230245	ExpressionStatement	s = s_start = str	1792:1:37244:37261	5230175	5	True				
ANR	5230246	AssignmentExpression	s = s_start = str		5230175	0		=			
ANR	5230247	Identifier	s		5230175	0					
ANR	5230248	AssignmentExpression	s_start = str		5230175	1		=			
ANR	5230249	Identifier	s_start		5230175	0					
ANR	5230250	Identifier	str		5230175	1					
ANR	5230251	WhileStatement	while ( * s )		5230175	6					
ANR	5230252	Condition	* s	1793:8:37271:37272	5230175	0	True				
ANR	5230253	UnaryOperationExpression	* s		5230175	0					
ANR	5230254	UnaryOperator	*		5230175	0					
ANR	5230255	Identifier	s		5230175	1					
ANR	5230256	CompoundStatement		10:12:210:210	5230175	1					
ANR	5230257	ExpressionStatement	str_len ++	1794:2:37279:37288	5230175	0	True				
ANR	5230258	PostIncDecOperationExpression	str_len ++		5230175	0					
ANR	5230259	Identifier	str_len		5230175	0					
ANR	5230260	IncDec	++		5230175	1					
ANR	5230261	IfStatement	if ( * s == '\\n' )		5230175	1					
ANR	5230262	Condition	* s == '\\n'	1795:6:37296:37305	5230175	0	True				
ANR	5230263	EqualityExpression	* s == '\\n'		5230175	0		==			
ANR	5230264	UnaryOperationExpression	* s		5230175	0					
ANR	5230265	UnaryOperator	*		5230175	0					
ANR	5230266	Identifier	s		5230175	1					
ANR	5230267	PrimaryExpression	'\\n'		5230175	1					
ANR	5230268	CompoundStatement		12:18:243:243	5230175	1					
ANR	5230269	ExpressionStatement	nr_of_lines ++	1796:3:37313:37326	5230175	0	True				
ANR	5230270	PostIncDecOperationExpression	nr_of_lines ++		5230175	0					
ANR	5230271	Identifier	nr_of_lines		5230175	0					
ANR	5230272	IncDec	++		5230175	1					
ANR	5230273	ExpressionStatement	s ++	1798:2:37334:37337	5230175	2	True				
ANR	5230274	PostIncDecOperationExpression	s ++		5230175	0					
ANR	5230275	Identifier	s		5230175	0					
ANR	5230276	IncDec	++		5230175	1					
ANR	5230277	ExpressionStatement	r_len = str_len + nr_of_lines * strlen ( Color_RESET ) + 1	1800:1:37343:37399	5230175	7	True				
ANR	5230278	AssignmentExpression	r_len = str_len + nr_of_lines * strlen ( Color_RESET ) + 1		5230175	0		=			
ANR	5230279	Identifier	r_len		5230175	0					
ANR	5230280	AdditiveExpression	str_len + nr_of_lines * strlen ( Color_RESET ) + 1		5230175	1		+			
ANR	5230281	Identifier	str_len		5230175	0					
ANR	5230282	AdditiveExpression	nr_of_lines * strlen ( Color_RESET ) + 1		5230175	1		+			
ANR	5230283	MultiplicativeExpression	nr_of_lines * strlen ( Color_RESET )		5230175	0		*			
ANR	5230284	Identifier	nr_of_lines		5230175	0					
ANR	5230285	CallExpression	strlen ( Color_RESET )		5230175	1					
ANR	5230286	Callee	strlen		5230175	0					
ANR	5230287	Identifier	strlen		5230175	0					
ANR	5230288	ArgumentList	Color_RESET		5230175	1					
ANR	5230289	Argument	Color_RESET		5230175	0					
ANR	5230290	Identifier	Color_RESET		5230175	0					
ANR	5230291	PrimaryExpression	1		5230175	1					
ANR	5230292	ExpressionStatement	r = ret = malloc ( r_len )	1801:1:37402:37426	5230175	8	True				
ANR	5230293	AssignmentExpression	r = ret = malloc ( r_len )		5230175	0		=			
ANR	5230294	Identifier	r		5230175	0					
ANR	5230295	AssignmentExpression	ret = malloc ( r_len )		5230175	1		=			
ANR	5230296	Identifier	ret		5230175	0					
ANR	5230297	CallExpression	malloc ( r_len )		5230175	1					
ANR	5230298	Callee	malloc		5230175	0					
ANR	5230299	Identifier	malloc		5230175	0					
ANR	5230300	ArgumentList	r_len		5230175	1					
ANR	5230301	Argument	r_len		5230175	0					
ANR	5230302	Identifier	r_len		5230175	0					
ANR	5230303	IfStatement	if ( ! r )		5230175	9					
ANR	5230304	Condition	! r	1802:5:37433:37434	5230175	0	True				
ANR	5230305	UnaryOperationExpression	! r		5230175	0					
ANR	5230306	UnaryOperator	!		5230175	0					
ANR	5230307	Identifier	r		5230175	1					
ANR	5230308	CompoundStatement		19:9:372:372	5230175	1					
ANR	5230309	ReturnStatement	return NULL ;	1803:2:37441:37452	5230175	0	True				
ANR	5230310	Identifier	NULL		5230175	0					
ANR	5230311	ExpressionStatement	r_end = r + r_len	1805:1:37458:37475	5230175	10	True				
ANR	5230312	AssignmentExpression	r_end = r + r_len		5230175	0		=			
ANR	5230313	Identifier	r_end		5230175	0					
ANR	5230314	AdditiveExpression	r + r_len		5230175	1		+			
ANR	5230315	Identifier	r		5230175	0					
ANR	5230316	Identifier	r_len		5230175	1					
ANR	5230317	WhileStatement	while ( * str )		5230175	11					
ANR	5230318	Condition	* str	1806:8:37485:37488	5230175	0	True				
ANR	5230319	UnaryOperationExpression	* str		5230175	0					
ANR	5230320	UnaryOperator	*		5230175	0					
ANR	5230321	Identifier	str		5230175	1					
ANR	5230322	CompoundStatement		23:14:426:426	5230175	1					
ANR	5230323	IfStatement	if ( ch >= y2 )		5230175	0					
ANR	5230324	Condition	ch >= y2	1808:6:37519:37526	5230175	0	True				
ANR	5230325	RelationalExpression	ch >= y2		5230175	0		>=			
ANR	5230326	Identifier	ch		5230175	0					
ANR	5230327	Identifier	y2		5230175	1					
ANR	5230328	CompoundStatement		25:16:464:464	5230175	1					
ANR	5230329	ExpressionStatement	r --	1809:3:37534:37537	5230175	0	True				
ANR	5230330	PostIncDecOperationExpression	r --		5230175	0					
ANR	5230331	Identifier	r		5230175	0					
ANR	5230332	IncDec	--		5230175	1					
ANR	5230333	BreakStatement	break ;	1810:3:37542:37547	5230175	1	True				
ANR	5230334	IfStatement	if ( * str == '\\n' )		5230175	1					
ANR	5230335	Condition	* str == '\\n'	1813:6:37560:37571	5230175	0	True				
ANR	5230336	EqualityExpression	* str == '\\n'		5230175	0		==			
ANR	5230337	UnaryOperationExpression	* str		5230175	0					
ANR	5230338	UnaryOperator	*		5230175	0					
ANR	5230339	Identifier	str		5230175	1					
ANR	5230340	PrimaryExpression	'\\n'		5230175	1					
ANR	5230341	CompoundStatement		30:20:509:509	5230175	1					
ANR	5230342	IfStatement	if ( ch >= y && ch < y2 )		5230175	0					
ANR	5230343	Condition	ch >= y && ch < y2	1814:7:37583:37600	5230175	0	True				
ANR	5230344	AndExpression	ch >= y && ch < y2		5230175	0		&&			
ANR	5230345	RelationalExpression	ch >= y		5230175	0		>=			
ANR	5230346	Identifier	ch		5230175	0					
ANR	5230347	Identifier	y		5230175	1					
ANR	5230348	RelationalExpression	ch < y2		5230175	1		<			
ANR	5230349	Identifier	ch		5230175	0					
ANR	5230350	Identifier	y2		5230175	1					
ANR	5230351	CompoundStatement		31:27:538:538	5230175	1					
ANR	5230352	Statement	const	1815:4:37609:37613	5230175	0	True				
ANR	5230353	Statement	char	1815:10:37615:37618	5230175	1	True				
ANR	5230354	Statement	*	1815:15:37620:37620	5230175	2	True				
ANR	5230355	Statement	reset	1815:16:37621:37625	5230175	3	True				
ANR	5230356	Statement	=	1815:22:37627:37627	5230175	4	True				
ANR	5230357	Statement	Color_RESET	1815:24:37629:37639	5230175	5	True				
ANR	5230358	ExpressionStatement	"""\\n"""	1815:36:37641:37645	5230175	6	True				
ANR	5230359	PrimaryExpression	"""\\n"""		5230175	0					
ANR	5230360	IfStatement	if ( strlen ( reset ) < ( r_end - r ) )		5230175	7					
ANR	5230361	Condition	strlen ( reset ) < ( r_end - r )	1816:8:37655:37682	5230175	0	True				
ANR	5230362	RelationalExpression	strlen ( reset ) < ( r_end - r )		5230175	0		<			
ANR	5230363	CallExpression	strlen ( reset )		5230175	0					
ANR	5230364	Callee	strlen		5230175	0					
ANR	5230365	Identifier	strlen		5230175	0					
ANR	5230366	ArgumentList	reset		5230175	1					
ANR	5230367	Argument	reset		5230175	0					
ANR	5230368	Identifier	reset		5230175	0					
ANR	5230369	AdditiveExpression	r_end - r		5230175	1		-			
ANR	5230370	Identifier	r_end		5230175	0					
ANR	5230371	Identifier	r		5230175	1					
ANR	5230372	CompoundStatement		34:5:627:666	5230175	1					
ANR	5230373	IdentifierDeclStatement	const int reset_length = strlen ( reset ) ;	1817:5:37692:37731	5230175	0	True				
ANR	5230374	IdentifierDecl	reset_length = strlen ( reset )		5230175	0					
ANR	5230375	IdentifierDeclType	const int		5230175	0					
ANR	5230376	Identifier	reset_length		5230175	1					
ANR	5230377	AssignmentExpression	reset_length = strlen ( reset )		5230175	2		=			
ANR	5230378	Identifier	reset_length		5230175	0					
ANR	5230379	CallExpression	strlen ( reset )		5230175	1					
ANR	5230380	Callee	strlen		5230175	0					
ANR	5230381	Identifier	strlen		5230175	0					
ANR	5230382	ArgumentList	reset		5230175	1					
ANR	5230383	Argument	reset		5230175	0					
ANR	5230384	Identifier	reset		5230175	0					
ANR	5230385	ExpressionStatement	"memcpy ( r , reset , reset_length + 1 )"	1818:5:37738:37773	5230175	1	True				
ANR	5230386	CallExpression	"memcpy ( r , reset , reset_length + 1 )"		5230175	0					
ANR	5230387	Callee	memcpy		5230175	0					
ANR	5230388	Identifier	memcpy		5230175	0					
ANR	5230389	ArgumentList	r		5230175	1					
ANR	5230390	Argument	r		5230175	0					
ANR	5230391	Identifier	r		5230175	0					
ANR	5230392	Argument	reset		5230175	1					
ANR	5230393	Identifier	reset		5230175	0					
ANR	5230394	Argument	reset_length + 1		5230175	2					
ANR	5230395	AdditiveExpression	reset_length + 1		5230175	0		+			
ANR	5230396	Identifier	reset_length		5230175	0					
ANR	5230397	PrimaryExpression	1		5230175	1					
ANR	5230398	ExpressionStatement	r += reset_length	1819:5:37780:37797	5230175	2	True				
ANR	5230399	AssignmentExpression	r += reset_length		5230175	0		+=			
ANR	5230400	Identifier	r		5230175	0					
ANR	5230401	Identifier	reset_length		5230175	1					
ANR	5230402	ExpressionStatement	str ++	1822:3:37813:37818	5230175	1	True				
ANR	5230403	PostIncDecOperationExpression	str ++		5230175	0					
ANR	5230404	Identifier	str		5230175	0					
ANR	5230405	IncDec	++		5230175	1					
ANR	5230406	ExpressionStatement	ch ++	1823:3:37823:37827	5230175	2	True				
ANR	5230407	PostIncDecOperationExpression	ch ++		5230175	0					
ANR	5230408	Identifier	ch		5230175	0					
ANR	5230409	IncDec	++		5230175	1					
ANR	5230410	ExpressionStatement	cw = 0	1824:3:37832:37838	5230175	3	True				
ANR	5230411	AssignmentExpression	cw = 0		5230175	0		=			
ANR	5230412	Identifier	cw		5230175	0					
ANR	5230413	PrimaryExpression	0		5230175	1					
ANR	5230414	ElseStatement	else		5230175	0					
ANR	5230415	CompoundStatement		42:9:784:784	5230175	0					
ANR	5230416	IfStatement	if ( ch >= y && ch < y2 )		5230175	0					
ANR	5230417	Condition	ch >= y && ch < y2	1826:7:37858:37875	5230175	0	True				
ANR	5230418	AndExpression	ch >= y && ch < y2		5230175	0		&&			
ANR	5230419	RelationalExpression	ch >= y		5230175	0		>=			
ANR	5230420	Identifier	ch		5230175	0					
ANR	5230421	Identifier	y		5230175	1					
ANR	5230422	RelationalExpression	ch < y2		5230175	1		<			
ANR	5230423	Identifier	ch		5230175	0					
ANR	5230424	Identifier	y2		5230175	1					
ANR	5230425	CompoundStatement		43:27:813:813	5230175	1					
ANR	5230426	IfStatement	if ( ( * str & 0xc0 ) == 0x80 )		5230175	0					
ANR	5230427	Condition	( * str & 0xc0 ) == 0x80	1827:8:37888:37908	5230175	0	True				
ANR	5230428	EqualityExpression	( * str & 0xc0 ) == 0x80		5230175	0		==			
ANR	5230429	BitAndExpression	* str & 0xc0		5230175	0		&			
ANR	5230430	UnaryOperationExpression	* str		5230175	0					
ANR	5230431	UnaryOperator	*		5230175	0					
ANR	5230432	Identifier	str		5230175	1					
ANR	5230433	PrimaryExpression	0xc0		5230175	1					
ANR	5230434	PrimaryExpression	0x80		5230175	1					
ANR	5230435	CompoundStatement		44:31:846:846	5230175	1					
ANR	5230436	IfStatement	if ( cw > x )		5230175	0					
ANR	5230437	Condition	cw > x	1828:9:37922:37927	5230175	0	True				
ANR	5230438	RelationalExpression	cw > x		5230175	0		>			
ANR	5230439	Identifier	cw		5230175	0					
ANR	5230440	Identifier	x		5230175	1					
ANR	5230441	CompoundStatement		45:17:865:865	5230175	1					
ANR	5230442	ExpressionStatement	* r ++ = * str ++	1829:6:37938:37951	5230175	0	True				
ANR	5230443	AssignmentExpression	* r ++ = * str ++		5230175	0		=			
ANR	5230444	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230445	UnaryOperator	*		5230175	0					
ANR	5230446	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230447	Identifier	r		5230175	0					
ANR	5230448	IncDec	++		5230175	1					
ANR	5230449	UnaryOperationExpression	* str ++		5230175	1					
ANR	5230450	UnaryOperator	*		5230175	0					
ANR	5230451	PostIncDecOperationExpression	str ++		5230175	1					
ANR	5230452	Identifier	str		5230175	0					
ANR	5230453	IncDec	++		5230175	1					
ANR	5230454	ElseStatement	else		5230175	0					
ANR	5230455	CompoundStatement		47:12:900:900	5230175	0					
ANR	5230456	ExpressionStatement	str ++	1831:6:37973:37978	5230175	0	True				
ANR	5230457	PostIncDecOperationExpression	str ++		5230175	0					
ANR	5230458	Identifier	str		5230175	0					
ANR	5230459	IncDec	++		5230175	1					
ANR	5230460	ContinueStatement	continue ;	1833:5:37992:38000	5230175	1	True				
ANR	5230461	IfStatement	"if ( r_str_char_fullwidth ( str , str_len - ( str - s_start ) ) )"		5230175	1					
ANR	5230462	Condition	"r_str_char_fullwidth ( str , str_len - ( str - s_start ) )"	1835:8:38016:38068	5230175	0	True				
ANR	5230463	CallExpression	"r_str_char_fullwidth ( str , str_len - ( str - s_start ) )"		5230175	0					
ANR	5230464	Callee	r_str_char_fullwidth		5230175	0					
ANR	5230465	Identifier	r_str_char_fullwidth		5230175	0					
ANR	5230466	ArgumentList	str		5230175	1					
ANR	5230467	Argument	str		5230175	0					
ANR	5230468	Identifier	str		5230175	0					
ANR	5230469	Argument	str_len - ( str - s_start )		5230175	1					
ANR	5230470	AdditiveExpression	str_len - ( str - s_start )		5230175	0		-			
ANR	5230471	Identifier	str_len		5230175	0					
ANR	5230472	AdditiveExpression	str - s_start		5230175	1		-			
ANR	5230473	Identifier	str		5230175	0					
ANR	5230474	Identifier	s_start		5230175	1					
ANR	5230475	CompoundStatement		52:63:1006:1006	5230175	1					
ANR	5230476	ExpressionStatement	cw ++	1836:5:38078:38082	5230175	0	True				
ANR	5230477	PostIncDecOperationExpression	cw ++		5230175	0					
ANR	5230478	Identifier	cw		5230175	0					
ANR	5230479	IncDec	++		5230175	1					
ANR	5230480	IfStatement	if ( cw == x )		5230175	1					
ANR	5230481	Condition	cw == x	1837:9:38093:38099	5230175	0	True				
ANR	5230482	EqualityExpression	cw == x		5230175	0		==			
ANR	5230483	Identifier	cw		5230175	0					
ANR	5230484	Identifier	x		5230175	1					
ANR	5230485	CompoundStatement		54:18:1037:1037	5230175	1					
ANR	5230486	ExpressionStatement	* r ++ = ' '	1838:6:38110:38120	5230175	0	True				
ANR	5230487	AssignmentExpression	* r ++ = ' '		5230175	0		=			
ANR	5230488	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230489	UnaryOperator	*		5230175	0					
ANR	5230490	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230491	Identifier	r		5230175	0					
ANR	5230492	IncDec	++		5230175	1					
ANR	5230493	PrimaryExpression	' '		5230175	1					
ANR	5230494	ExpressionStatement	str ++	1839:6:38128:38133	5230175	1	True				
ANR	5230495	PostIncDecOperationExpression	str ++		5230175	0					
ANR	5230496	Identifier	str		5230175	0					
ANR	5230497	IncDec	++		5230175	1					
ANR	5230498	ContinueStatement	continue ;	1840:6:38141:38149	5230175	2	True				
ANR	5230499	IfStatement	if ( * str == 0x1b && * ( str + 1 ) == '[' )		5230175	2					
ANR	5230500	Condition	* str == 0x1b && * ( str + 1 ) == '['	1843:8:38172:38204	5230175	0	True				
ANR	5230501	AndExpression	* str == 0x1b && * ( str + 1 ) == '['		5230175	0		&&			
ANR	5230502	EqualityExpression	* str == 0x1b		5230175	0		==			
ANR	5230503	UnaryOperationExpression	* str		5230175	0					
ANR	5230504	UnaryOperator	*		5230175	0					
ANR	5230505	Identifier	str		5230175	1					
ANR	5230506	PrimaryExpression	0x1b		5230175	1					
ANR	5230507	EqualityExpression	* ( str + 1 ) == '['		5230175	1		==			
ANR	5230508	UnaryOperationExpression	* ( str + 1 )		5230175	0					
ANR	5230509	UnaryOperator	*		5230175	0					
ANR	5230510	AdditiveExpression	str + 1		5230175	1		+			
ANR	5230511	Identifier	str		5230175	0					
ANR	5230512	PrimaryExpression	1		5230175	1					
ANR	5230513	PrimaryExpression	'['		5230175	1					
ANR	5230514	CompoundStatement		61:5:1149:1170	5230175	1					
ANR	5230515	IdentifierDeclStatement	const char * ptr = str ;	1844:5:38214:38235	5230175	0	True				
ANR	5230516	IdentifierDecl	* ptr = str		5230175	0					
ANR	5230517	IdentifierDeclType	const char *		5230175	0					
ANR	5230518	Identifier	ptr		5230175	1					
ANR	5230519	AssignmentExpression	* ptr = str		5230175	2		=			
ANR	5230520	Identifier	str		5230175	0					
ANR	5230521	Identifier	str		5230175	1					
ANR	5230522	IfStatement	if ( ( r_end - r ) > 2 )		5230175	1					
ANR	5230523	Condition	( r_end - r ) > 2	1845:9:38246:38260	5230175	0	True				
ANR	5230524	RelationalExpression	( r_end - r ) > 2		5230175	0		>			
ANR	5230525	AdditiveExpression	r_end - r		5230175	0		-			
ANR	5230526	Identifier	r_end		5230175	0					
ANR	5230527	Identifier	r		5230175	1					
ANR	5230528	PrimaryExpression	2		5230175	1					
ANR	5230529	CompoundStatement		62:26:1198:1198	5230175	1					
ANR	5230530	ExpressionStatement	* r ++ = * str ++	1847:6:38299:38312	5230175	0	True				
ANR	5230531	AssignmentExpression	* r ++ = * str ++		5230175	0		=			
ANR	5230532	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230533	UnaryOperator	*		5230175	0					
ANR	5230534	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230535	Identifier	r		5230175	0					
ANR	5230536	IncDec	++		5230175	1					
ANR	5230537	UnaryOperationExpression	* str ++		5230175	1					
ANR	5230538	UnaryOperator	*		5230175	0					
ANR	5230539	PostIncDecOperationExpression	str ++		5230175	1					
ANR	5230540	Identifier	str		5230175	0					
ANR	5230541	IncDec	++		5230175	1					
ANR	5230542	ExpressionStatement	* r ++ = * str ++	1848:6:38320:38333	5230175	1	True				
ANR	5230543	AssignmentExpression	* r ++ = * str ++		5230175	0		=			
ANR	5230544	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230545	UnaryOperator	*		5230175	0					
ANR	5230546	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230547	Identifier	r		5230175	0					
ANR	5230548	IncDec	++		5230175	1					
ANR	5230549	UnaryOperationExpression	* str ++		5230175	1					
ANR	5230550	UnaryOperator	*		5230175	0					
ANR	5230551	PostIncDecOperationExpression	str ++		5230175	1					
ANR	5230552	Identifier	str		5230175	0					
ANR	5230553	IncDec	++		5230175	1					
ANR	5230554	ForStatement	for ( ptr = str ; * ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H' ; ++ ptr )		5230175	2					
ANR	5230555	ForInit	ptr = str ;	1849:11:38346:38355	5230175	0	True				
ANR	5230556	AssignmentExpression	ptr = str		5230175	0		=			
ANR	5230557	Identifier	ptr		5230175	0					
ANR	5230558	Identifier	str		5230175	1					
ANR	5230559	Condition	* ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H'	1849:22:38357:38405	5230175	1	True				
ANR	5230560	AndExpression	* ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H'		5230175	0		&&			
ANR	5230561	UnaryOperationExpression	* ptr		5230175	0					
ANR	5230562	UnaryOperator	*		5230175	0					
ANR	5230563	Identifier	ptr		5230175	1					
ANR	5230564	AndExpression	* ptr != 'J' && * ptr != 'm' && * ptr != 'H'		5230175	1		&&			
ANR	5230565	EqualityExpression	* ptr != 'J'		5230175	0		!=			
ANR	5230566	UnaryOperationExpression	* ptr		5230175	0					
ANR	5230567	UnaryOperator	*		5230175	0					
ANR	5230568	Identifier	ptr		5230175	1					
ANR	5230569	PrimaryExpression	'J'		5230175	1					
ANR	5230570	AndExpression	* ptr != 'm' && * ptr != 'H'		5230175	1		&&			
ANR	5230571	EqualityExpression	* ptr != 'm'		5230175	0		!=			
ANR	5230572	UnaryOperationExpression	* ptr		5230175	0					
ANR	5230573	UnaryOperator	*		5230175	0					
ANR	5230574	Identifier	ptr		5230175	1					
ANR	5230575	PrimaryExpression	'm'		5230175	1					
ANR	5230576	EqualityExpression	* ptr != 'H'		5230175	1		!=			
ANR	5230577	UnaryOperationExpression	* ptr		5230175	0					
ANR	5230578	UnaryOperator	*		5230175	0					
ANR	5230579	Identifier	ptr		5230175	1					
ANR	5230580	PrimaryExpression	'H'		5230175	1					
ANR	5230581	UnaryExpression	++ ptr	1849:73:38408:38412	5230175	2	True				
ANR	5230582	IncDec	++		5230175	0					
ANR	5230583	Identifier	ptr		5230175	1					
ANR	5230584	CompoundStatement		66:80:1350:1350	5230175	3					
ANR	5230585	ExpressionStatement	* r ++ = * ptr	1850:7:38424:38435	5230175	0	True				
ANR	5230586	AssignmentExpression	* r ++ = * ptr		5230175	0		=			
ANR	5230587	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230588	UnaryOperator	*		5230175	0					
ANR	5230589	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230590	Identifier	r		5230175	0					
ANR	5230591	IncDec	++		5230175	1					
ANR	5230592	UnaryOperationExpression	* ptr		5230175	1					
ANR	5230593	UnaryOperator	*		5230175	0					
ANR	5230594	Identifier	ptr		5230175	1					
ANR	5230595	ExpressionStatement	* r ++ = * ptr ++	1852:6:38451:38464	5230175	3	True				
ANR	5230596	AssignmentExpression	* r ++ = * ptr ++		5230175	0		=			
ANR	5230597	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230598	UnaryOperator	*		5230175	0					
ANR	5230599	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230600	Identifier	r		5230175	0					
ANR	5230601	IncDec	++		5230175	1					
ANR	5230602	UnaryOperationExpression	* ptr ++		5230175	1					
ANR	5230603	UnaryOperator	*		5230175	0					
ANR	5230604	PostIncDecOperationExpression	ptr ++		5230175	1					
ANR	5230605	Identifier	ptr		5230175	0					
ANR	5230606	IncDec	++		5230175	1					
ANR	5230607	ExpressionStatement	str = ptr	1854:5:38478:38487	5230175	2	True				
ANR	5230608	AssignmentExpression	str = ptr		5230175	0		=			
ANR	5230609	Identifier	str		5230175	0					
ANR	5230610	Identifier	ptr		5230175	1					
ANR	5230611	ContinueStatement	continue ;	1855:5:38494:38502	5230175	3	True				
ANR	5230612	ElseStatement	else		5230175	0					
ANR	5230613	IfStatement	if ( cw >= x && cw < x2 )		5230175	0					
ANR	5230614	Condition	cw >= x && cw < x2	1856:15:38519:38536	5230175	0	True				
ANR	5230615	AndExpression	cw >= x && cw < x2		5230175	0		&&			
ANR	5230616	RelationalExpression	cw >= x		5230175	0		>=			
ANR	5230617	Identifier	cw		5230175	0					
ANR	5230618	Identifier	x		5230175	1					
ANR	5230619	RelationalExpression	cw < x2		5230175	1		<			
ANR	5230620	Identifier	cw		5230175	0					
ANR	5230621	Identifier	x2		5230175	1					
ANR	5230622	CompoundStatement		73:35:1474:1474	5230175	1					
ANR	5230623	ExpressionStatement	* r ++ = * str	1857:5:38546:38557	5230175	0	True				
ANR	5230624	AssignmentExpression	* r ++ = * str		5230175	0		=			
ANR	5230625	UnaryOperationExpression	* r ++		5230175	0					
ANR	5230626	UnaryOperator	*		5230175	0					
ANR	5230627	PostIncDecOperationExpression	r ++		5230175	1					
ANR	5230628	Identifier	r		5230175	0					
ANR	5230629	IncDec	++		5230175	1					
ANR	5230630	UnaryOperationExpression	* str		5230175	1					
ANR	5230631	UnaryOperator	*		5230175	0					
ANR	5230632	Identifier	str		5230175	1					
ANR	5230633	IfStatement	if ( cw >= x2 )		5230175	1					
ANR	5230634	Condition	cw >= x2	1861:7:38605:38612	5230175	0	True				
ANR	5230635	RelationalExpression	cw >= x2		5230175	0		>=			
ANR	5230636	Identifier	cw		5230175	0					
ANR	5230637	Identifier	x2		5230175	1					
ANR	5230638	CompoundStatement		78:17:1550:1550	5230175	1					
ANR	5230639	WhileStatement	while ( * str && * str != '\\n' )		5230175	0					
ANR	5230640	Condition	* str && * str != '\\n'	1862:11:38628:38647	5230175	0	True				
ANR	5230641	AndExpression	* str && * str != '\\n'		5230175	0		&&			
ANR	5230642	UnaryOperationExpression	* str		5230175	0					
ANR	5230643	UnaryOperator	*		5230175	0					
ANR	5230644	Identifier	str		5230175	1					
ANR	5230645	EqualityExpression	* str != '\\n'		5230175	1		!=			
ANR	5230646	UnaryOperationExpression	* str		5230175	0					
ANR	5230647	UnaryOperator	*		5230175	0					
ANR	5230648	Identifier	str		5230175	1					
ANR	5230649	PrimaryExpression	'\\n'		5230175	1					
ANR	5230650	CompoundStatement		79:33:1585:1585	5230175	1					
ANR	5230651	ExpressionStatement	str ++	1863:5:38657:38662	5230175	0	True				
ANR	5230652	PostIncDecOperationExpression	str ++		5230175	0					
ANR	5230653	Identifier	str		5230175	0					
ANR	5230654	IncDec	++		5230175	1					
ANR	5230655	ElseStatement	else		5230175	0					
ANR	5230656	CompoundStatement		82:10:1615:1615	5230175	0					
ANR	5230657	ExpressionStatement	str ++	1866:4:38686:38691	5230175	0	True				
ANR	5230658	PostIncDecOperationExpression	str ++		5230175	0					
ANR	5230659	Identifier	str		5230175	0					
ANR	5230660	IncDec	++		5230175	1					
ANR	5230661	ExpressionStatement	cw ++	1868:3:38701:38705	5230175	2	True				
ANR	5230662	PostIncDecOperationExpression	cw ++		5230175	0					
ANR	5230663	Identifier	cw		5230175	0					
ANR	5230664	IncDec	++		5230175	1					
ANR	5230665	ExpressionStatement	* r = 0	1871:1:38715:38721	5230175	12	True				
ANR	5230666	AssignmentExpression	* r = 0		5230175	0		=			
ANR	5230667	UnaryOperationExpression	* r		5230175	0					
ANR	5230668	UnaryOperator	*		5230175	0					
ANR	5230669	Identifier	r		5230175	1					
ANR	5230670	PrimaryExpression	0		5230175	1					
ANR	5230671	ReturnStatement	return ret ;	1872:1:38724:38734	5230175	13	True				
ANR	5230672	Identifier	ret		5230175	0					
ANR	5230673	ReturnType	R_API char *		5230175	1					
ANR	5230674	Identifier	r_str_ansi_crop		5230175	2					
ANR	5230675	ParameterList	"const char * str , ut32 x , ut32 y , ut32 x2 , ut32 y2"		5230175	3					
ANR	5230676	Parameter	const char * str	1784:28:37013:37027	5230175	0	True				
ANR	5230677	ParameterType	const char *		5230175	0					
ANR	5230678	Identifier	str		5230175	1					
ANR	5230679	Parameter	ut32 x	1784:45:37030:37035	5230175	1	True				
ANR	5230680	ParameterType	ut32		5230175	0					
ANR	5230681	Identifier	x		5230175	1					
ANR	5230682	Parameter	ut32 y	1784:53:37038:37043	5230175	2	True				
ANR	5230683	ParameterType	ut32		5230175	0					
ANR	5230684	Identifier	y		5230175	1					
ANR	5230685	Parameter	ut32 x2	1784:61:37046:37052	5230175	3	True				
ANR	5230686	ParameterType	ut32		5230175	0					
ANR	5230687	Identifier	x2		5230175	1					
ANR	5230688	Parameter	ut32 y2	1784:70:37055:37061	5230175	4	True				
ANR	5230689	ParameterType	ut32		5230175	0					
ANR	5230690	Identifier	y2		5230175	1					
ANR	5230691	CFGEntryNode	ENTRY		5230175		True				
ANR	5230692	CFGExitNode	EXIT		5230175		True				
ANR	5230693	Symbol	s_start		5230175						
ANR	5230694	Symbol	r_str_char_fullwidth		5230175						
ANR	5230695	Symbol	Color_RESET		5230175						
ANR	5230696	Symbol	reset_length		5230175						
ANR	5230697	Symbol	nr_of_lines		5230175						
ANR	5230698	Symbol	strlen		5230175						
ANR	5230699	Symbol	str_len		5230175						
ANR	5230700	Symbol	* ptr		5230175						
ANR	5230701	Symbol	y2		5230175						
ANR	5230702	Symbol	* ( str + 1 )		5230175						
ANR	5230703	Symbol	* str		5230175						
ANR	5230704	Symbol	ret		5230175						
ANR	5230705	Symbol	malloc		5230175						
ANR	5230706	Symbol	NULL		5230175						
ANR	5230707	Symbol	ch		5230175						
ANR	5230708	Symbol	* r ++		5230175						
ANR	5230709	Symbol	* ptr ++		5230175						
ANR	5230710	Symbol	* str ++		5230175						
ANR	5230711	Symbol	ptr		5230175						
ANR	5230712	Symbol	str		5230175						
ANR	5230713	Symbol	r		5230175						
ANR	5230714	Symbol	s		5230175						
ANR	5230715	Symbol	cw		5230175						
ANR	5230716	Symbol	x		5230175						
ANR	5230717	Symbol	y		5230175						
ANR	5230718	Symbol	reset		5230175						
ANR	5230719	Symbol	x2		5230175						
ANR	5230720	Symbol	r_len		5230175						
ANR	5230721	Symbol	strdup		5230175						
ANR	5230722	Symbol	* r		5230175						
ANR	5230723	Symbol	r_end		5230175						
ANR	5230724	Symbol	* s		5230175						
ANR	5230725	Function	r_str_utf8_codepoint	1875:0:38739:39349							
ANR	5230726	FunctionDef	"r_str_utf8_codepoint (const char * s , int left)"		5230725	0					
ANR	5230727	CompoundStatement		1875:57:38796:39349	5230725	0					
ANR	5230728	IdentifierDeclStatement	bool safe = left >= 0 ;	1876:1:38799:38820	5230725	0	True				
ANR	5230729	IdentifierDecl	safe = left >= 0		5230725	0					
ANR	5230730	IdentifierDeclType	bool		5230725	0					
ANR	5230731	Identifier	safe		5230725	1					
ANR	5230732	AssignmentExpression	safe = left >= 0		5230725	2		=			
ANR	5230733	Identifier	safe		5230725	0					
ANR	5230734	RelationalExpression	left >= 0		5230725	1		>=			
ANR	5230735	Identifier	left		5230725	0					
ANR	5230736	PrimaryExpression	0		5230725	1					
ANR	5230737	IfStatement	if ( ( * s & 0x80 ) != 0x80 )		5230725	1					
ANR	5230738	Condition	( * s & 0x80 ) != 0x80	1877:5:38827:38845	5230725	0	True				
ANR	5230739	EqualityExpression	( * s & 0x80 ) != 0x80		5230725	0		!=			
ANR	5230740	BitAndExpression	* s & 0x80		5230725	0		&			
ANR	5230741	UnaryOperationExpression	* s		5230725	0					
ANR	5230742	UnaryOperator	*		5230725	0					
ANR	5230743	Identifier	s		5230725	1					
ANR	5230744	PrimaryExpression	0x80		5230725	1					
ANR	5230745	PrimaryExpression	0x80		5230725	1					
ANR	5230746	CompoundStatement		3:26:51:51	5230725	1					
ANR	5230747	ReturnStatement	return 0 ;	1878:2:38852:38860	5230725	0	True				
ANR	5230748	PrimaryExpression	0		5230725	0					
ANR	5230749	ElseStatement	else		5230725	0					
ANR	5230750	IfStatement	if ( ( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) ) )		5230725	0					
ANR	5230751	Condition	( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) )	1879:12:38874:38925	5230725	0	True				
ANR	5230752	AndExpression	( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) )		5230725	0		&&			
ANR	5230753	EqualityExpression	( * s & 0xe0 ) == 0xc0		5230725	0		==			
ANR	5230754	BitAndExpression	* s & 0xe0		5230725	0		&			
ANR	5230755	UnaryOperationExpression	* s		5230725	0					
ANR	5230756	UnaryOperator	*		5230725	0					
ANR	5230757	Identifier	s		5230725	1					
ANR	5230758	PrimaryExpression	0xe0		5230725	1					
ANR	5230759	PrimaryExpression	0xc0		5230725	1					
ANR	5230760	ConditionalExpression	safe ? left >= 1 : * ( s + 1 )		5230725	1					
ANR	5230761	Condition	safe		5230725	0					
ANR	5230762	Identifier	safe		5230725	0					
ANR	5230763	RelationalExpression	left >= 1		5230725	1		>=			
ANR	5230764	Identifier	left		5230725	0					
ANR	5230765	PrimaryExpression	1		5230725	1					
ANR	5230766	UnaryOperationExpression	* ( s + 1 )		5230725	2					
ANR	5230767	UnaryOperator	*		5230725	0					
ANR	5230768	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230769	Identifier	s		5230725	0					
ANR	5230770	PrimaryExpression	1		5230725	1					
ANR	5230771	CompoundStatement		5:66:131:131	5230725	1					
ANR	5230772	ReturnStatement	return ( ( * s & 0x1f ) << 6 ) + ( * ( s + 1 ) & 0x3f ) ;	1880:2:38932:38977	5230725	0	True				
ANR	5230773	AdditiveExpression	( ( * s & 0x1f ) << 6 ) + ( * ( s + 1 ) & 0x3f )		5230725	0		+			
ANR	5230774	ShiftExpression	( * s & 0x1f ) << 6		5230725	0		<<			
ANR	5230775	BitAndExpression	* s & 0x1f		5230725	0		&			
ANR	5230776	UnaryOperationExpression	* s		5230725	0					
ANR	5230777	UnaryOperator	*		5230725	0					
ANR	5230778	Identifier	s		5230725	1					
ANR	5230779	PrimaryExpression	0x1f		5230725	1					
ANR	5230780	PrimaryExpression	6		5230725	1					
ANR	5230781	BitAndExpression	* ( s + 1 ) & 0x3f		5230725	1		&			
ANR	5230782	UnaryOperationExpression	* ( s + 1 )		5230725	0					
ANR	5230783	UnaryOperator	*		5230725	0					
ANR	5230784	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230785	Identifier	s		5230725	0					
ANR	5230786	PrimaryExpression	1		5230725	1					
ANR	5230787	PrimaryExpression	0x3f		5230725	1					
ANR	5230788	ElseStatement	else		5230725	0					
ANR	5230789	IfStatement	if ( ( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) ) )		5230725	0					
ANR	5230790	Condition	( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) )	1881:12:38991:39056	5230725	0	True				
ANR	5230791	AndExpression	( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) )		5230725	0		&&			
ANR	5230792	EqualityExpression	( * s & 0xf0 ) == 0xe0		5230725	0		==			
ANR	5230793	BitAndExpression	* s & 0xf0		5230725	0		&			
ANR	5230794	UnaryOperationExpression	* s		5230725	0					
ANR	5230795	UnaryOperator	*		5230725	0					
ANR	5230796	Identifier	s		5230725	1					
ANR	5230797	PrimaryExpression	0xf0		5230725	1					
ANR	5230798	PrimaryExpression	0xe0		5230725	1					
ANR	5230799	ConditionalExpression	safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) )		5230725	1					
ANR	5230800	Condition	safe		5230725	0					
ANR	5230801	Identifier	safe		5230725	0					
ANR	5230802	RelationalExpression	left >= 2		5230725	1		>=			
ANR	5230803	Identifier	left		5230725	0					
ANR	5230804	PrimaryExpression	2		5230725	1					
ANR	5230805	AndExpression	* ( s + 1 ) && * ( s + 2 )		5230725	2		&&			
ANR	5230806	UnaryOperationExpression	* ( s + 1 )		5230725	0					
ANR	5230807	UnaryOperator	*		5230725	0					
ANR	5230808	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230809	Identifier	s		5230725	0					
ANR	5230810	PrimaryExpression	1		5230725	1					
ANR	5230811	UnaryOperationExpression	* ( s + 2 )		5230725	1					
ANR	5230812	UnaryOperator	*		5230725	0					
ANR	5230813	AdditiveExpression	s + 2		5230725	1		+			
ANR	5230814	Identifier	s		5230725	0					
ANR	5230815	PrimaryExpression	2		5230725	1					
ANR	5230816	CompoundStatement		7:80:262:262	5230725	1					
ANR	5230817	ReturnStatement	return ( ( * s & 0xf ) << 12 ) + ( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f ) ;	1882:2:39063:39135	5230725	0	True				
ANR	5230818	AdditiveExpression	( ( * s & 0xf ) << 12 ) + ( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f )		5230725	0		+			
ANR	5230819	ShiftExpression	( * s & 0xf ) << 12		5230725	0		<<			
ANR	5230820	BitAndExpression	* s & 0xf		5230725	0		&			
ANR	5230821	UnaryOperationExpression	* s		5230725	0					
ANR	5230822	UnaryOperator	*		5230725	0					
ANR	5230823	Identifier	s		5230725	1					
ANR	5230824	PrimaryExpression	0xf		5230725	1					
ANR	5230825	PrimaryExpression	12		5230725	1					
ANR	5230826	AdditiveExpression	( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f )		5230725	1		+			
ANR	5230827	ShiftExpression	( * ( s + 1 ) & 0x3f ) << 6		5230725	0		<<			
ANR	5230828	BitAndExpression	* ( s + 1 ) & 0x3f		5230725	0		&			
ANR	5230829	UnaryOperationExpression	* ( s + 1 )		5230725	0					
ANR	5230830	UnaryOperator	*		5230725	0					
ANR	5230831	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230832	Identifier	s		5230725	0					
ANR	5230833	PrimaryExpression	1		5230725	1					
ANR	5230834	PrimaryExpression	0x3f		5230725	1					
ANR	5230835	PrimaryExpression	6		5230725	1					
ANR	5230836	BitAndExpression	* ( s + 2 ) & 0x3f		5230725	1		&			
ANR	5230837	UnaryOperationExpression	* ( s + 2 )		5230725	0					
ANR	5230838	UnaryOperator	*		5230725	0					
ANR	5230839	AdditiveExpression	s + 2		5230725	1		+			
ANR	5230840	Identifier	s		5230725	0					
ANR	5230841	PrimaryExpression	2		5230725	1					
ANR	5230842	PrimaryExpression	0x3f		5230725	1					
ANR	5230843	ElseStatement	else		5230725	0					
ANR	5230844	IfStatement	if ( ( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) ) )		5230725	0					
ANR	5230845	Condition	( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) )	1883:12:39149:39226	5230725	0	True				
ANR	5230846	AndExpression	( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) )		5230725	0		&&			
ANR	5230847	EqualityExpression	( * s & 0xf8 ) == 0xf0		5230725	0		==			
ANR	5230848	BitAndExpression	* s & 0xf8		5230725	0		&			
ANR	5230849	UnaryOperationExpression	* s		5230725	0					
ANR	5230850	UnaryOperator	*		5230725	0					
ANR	5230851	Identifier	s		5230725	1					
ANR	5230852	PrimaryExpression	0xf8		5230725	1					
ANR	5230853	PrimaryExpression	0xf0		5230725	1					
ANR	5230854	ConditionalExpression	safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) )		5230725	1					
ANR	5230855	Condition	safe		5230725	0					
ANR	5230856	Identifier	safe		5230725	0					
ANR	5230857	RelationalExpression	left >= 3		5230725	1		>=			
ANR	5230858	Identifier	left		5230725	0					
ANR	5230859	PrimaryExpression	3		5230725	1					
ANR	5230860	AndExpression	* ( s + 1 ) && * ( s + 2 ) && * ( s + 3 )		5230725	2		&&			
ANR	5230861	UnaryOperationExpression	* ( s + 1 )		5230725	0					
ANR	5230862	UnaryOperator	*		5230725	0					
ANR	5230863	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230864	Identifier	s		5230725	0					
ANR	5230865	PrimaryExpression	1		5230725	1					
ANR	5230866	AndExpression	* ( s + 2 ) && * ( s + 3 )		5230725	1		&&			
ANR	5230867	UnaryOperationExpression	* ( s + 2 )		5230725	0					
ANR	5230868	UnaryOperator	*		5230725	0					
ANR	5230869	AdditiveExpression	s + 2		5230725	1		+			
ANR	5230870	Identifier	s		5230725	0					
ANR	5230871	PrimaryExpression	2		5230725	1					
ANR	5230872	UnaryOperationExpression	* ( s + 3 )		5230725	1					
ANR	5230873	UnaryOperator	*		5230725	0					
ANR	5230874	AdditiveExpression	s + 3		5230725	1		+			
ANR	5230875	Identifier	s		5230725	0					
ANR	5230876	PrimaryExpression	3		5230725	1					
ANR	5230877	CompoundStatement		9:92:432:432	5230725	1					
ANR	5230878	ReturnStatement	return ( ( * s & 0x7 ) << 18 ) + ( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f ) ;	1884:2:39233:39333	5230725	0	True				
ANR	5230879	AdditiveExpression	( ( * s & 0x7 ) << 18 ) + ( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		5230725	0		+			
ANR	5230880	ShiftExpression	( * s & 0x7 ) << 18		5230725	0		<<			
ANR	5230881	BitAndExpression	* s & 0x7		5230725	0		&			
ANR	5230882	UnaryOperationExpression	* s		5230725	0					
ANR	5230883	UnaryOperator	*		5230725	0					
ANR	5230884	Identifier	s		5230725	1					
ANR	5230885	PrimaryExpression	0x7		5230725	1					
ANR	5230886	PrimaryExpression	18		5230725	1					
ANR	5230887	AdditiveExpression	( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		5230725	1		+			
ANR	5230888	ShiftExpression	( * ( s + 1 ) & 0x3f ) << 12		5230725	0		<<			
ANR	5230889	BitAndExpression	* ( s + 1 ) & 0x3f		5230725	0		&			
ANR	5230890	UnaryOperationExpression	* ( s + 1 )		5230725	0					
ANR	5230891	UnaryOperator	*		5230725	0					
ANR	5230892	AdditiveExpression	s + 1		5230725	1		+			
ANR	5230893	Identifier	s		5230725	0					
ANR	5230894	PrimaryExpression	1		5230725	1					
ANR	5230895	PrimaryExpression	0x3f		5230725	1					
ANR	5230896	PrimaryExpression	12		5230725	1					
ANR	5230897	AdditiveExpression	( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		5230725	1		+			
ANR	5230898	ShiftExpression	( * ( s + 2 ) & 0x3f ) << 6		5230725	0		<<			
ANR	5230899	BitAndExpression	* ( s + 2 ) & 0x3f		5230725	0		&			
ANR	5230900	UnaryOperationExpression	* ( s + 2 )		5230725	0					
ANR	5230901	UnaryOperator	*		5230725	0					
ANR	5230902	AdditiveExpression	s + 2		5230725	1		+			
ANR	5230903	Identifier	s		5230725	0					
ANR	5230904	PrimaryExpression	2		5230725	1					
ANR	5230905	PrimaryExpression	0x3f		5230725	1					
ANR	5230906	PrimaryExpression	6		5230725	1					
ANR	5230907	BitAndExpression	* ( s + 3 ) & 0x3f		5230725	1		&			
ANR	5230908	UnaryOperationExpression	* ( s + 3 )		5230725	0					
ANR	5230909	UnaryOperator	*		5230725	0					
ANR	5230910	AdditiveExpression	s + 3		5230725	1		+			
ANR	5230911	Identifier	s		5230725	0					
ANR	5230912	PrimaryExpression	3		5230725	1					
ANR	5230913	PrimaryExpression	0x3f		5230725	1					
ANR	5230914	ReturnStatement	return 0 ;	1886:1:39339:39347	5230725	2	True				
ANR	5230915	PrimaryExpression	0		5230725	0					
ANR	5230916	ReturnType	R_API int		5230725	1					
ANR	5230917	Identifier	r_str_utf8_codepoint		5230725	2					
ANR	5230918	ParameterList	"const char * s , int left"		5230725	3					
ANR	5230919	Parameter	const char * s	1875:32:38771:38783	5230725	0	True				
ANR	5230920	ParameterType	const char *		5230725	0					
ANR	5230921	Identifier	s		5230725	1					
ANR	5230922	Parameter	int left	1875:47:38786:38793	5230725	1	True				
ANR	5230923	ParameterType	int		5230725	0					
ANR	5230924	Identifier	left		5230725	1					
ANR	5230925	CFGEntryNode	ENTRY		5230725		True				
ANR	5230926	CFGExitNode	EXIT		5230725		True				
ANR	5230927	Symbol	s		5230725						
ANR	5230928	Symbol	* ( s + 3 )		5230725						
ANR	5230929	Symbol	* ( s + 2 )		5230725						
ANR	5230930	Symbol	left		5230725						
ANR	5230931	Symbol	* ( s + 1 )		5230725						
ANR	5230932	Symbol	safe		5230725						
ANR	5230933	Symbol	* s		5230725						
ANR	5230934	Function	r_str_char_fullwidth	1889:0:39352:40207							
ANR	5230935	FunctionDef	"r_str_char_fullwidth (const char * s , int left)"		5230934	0					
ANR	5230936	CompoundStatement		1889:58:39410:40207	5230934	0					
ANR	5230937	IdentifierDeclStatement	"int codepoint = r_str_utf8_codepoint ( s , left ) ;"	1890:1:39413:39459	5230934	0	True				
ANR	5230938	IdentifierDecl	"codepoint = r_str_utf8_codepoint ( s , left )"		5230934	0					
ANR	5230939	IdentifierDeclType	int		5230934	0					
ANR	5230940	Identifier	codepoint		5230934	1					
ANR	5230941	AssignmentExpression	"codepoint = r_str_utf8_codepoint ( s , left )"		5230934	2		=			
ANR	5230942	Identifier	codepoint		5230934	0					
ANR	5230943	CallExpression	"r_str_utf8_codepoint ( s , left )"		5230934	1					
ANR	5230944	Callee	r_str_utf8_codepoint		5230934	0					
ANR	5230945	Identifier	r_str_utf8_codepoint		5230934	0					
ANR	5230946	ArgumentList	s		5230934	1					
ANR	5230947	Argument	s		5230934	0					
ANR	5230948	Identifier	s		5230934	0					
ANR	5230949	Argument	left		5230934	1					
ANR	5230950	Identifier	left		5230934	0					
ANR	5230951	ReturnStatement	"return ( codepoint >= 0x1100 && ( codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd ) ) ) ;"	1891:1:39462:40204	5230934	1	True				
ANR	5230952	AndExpression	"codepoint >= 0x1100 && ( codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd ) )"		5230934	0		&&			
ANR	5230953	RelationalExpression	codepoint >= 0x1100		5230934	0		>=			
ANR	5230954	Identifier	codepoint		5230934	0					
ANR	5230955	PrimaryExpression	0x1100		5230934	1					
ANR	5230956	OrExpression	"codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230957	RelationalExpression	codepoint <= 0x115f		5230934	0		<=			
ANR	5230958	Identifier	codepoint		5230934	0					
ANR	5230959	PrimaryExpression	0x115f		5230934	1					
ANR	5230960	OrExpression	"codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230961	EqualityExpression	codepoint == 0x2329		5230934	0		==			
ANR	5230962	Identifier	codepoint		5230934	0					
ANR	5230963	PrimaryExpression	0x2329		5230934	1					
ANR	5230964	OrExpression	"codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230965	EqualityExpression	codepoint == 0x232a		5230934	0		==			
ANR	5230966	Identifier	codepoint		5230934	0					
ANR	5230967	PrimaryExpression	0x232a		5230934	1					
ANR	5230968	OrExpression	"( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230969	AndExpression	"R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f"		5230934	0		&&			
ANR	5230970	CallExpression	"R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf )"		5230934	0					
ANR	5230971	Callee	R_BETWEEN		5230934	0					
ANR	5230972	Identifier	R_BETWEEN		5230934	0					
ANR	5230973	ArgumentList	0x2e80		5230934	1					
ANR	5230974	Argument	0x2e80		5230934	0					
ANR	5230975	PrimaryExpression	0x2e80		5230934	0					
ANR	5230976	Argument	codepoint		5230934	1					
ANR	5230977	Identifier	codepoint		5230934	0					
ANR	5230978	Argument	0xa4cf		5230934	2					
ANR	5230979	PrimaryExpression	0xa4cf		5230934	0					
ANR	5230980	EqualityExpression	codepoint != 0x303f		5230934	1		!=			
ANR	5230981	Identifier	codepoint		5230934	0					
ANR	5230982	PrimaryExpression	0x303f		5230934	1					
ANR	5230983	OrExpression	"R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230984	CallExpression	"R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 )"		5230934	0					
ANR	5230985	Callee	R_BETWEEN		5230934	0					
ANR	5230986	Identifier	R_BETWEEN		5230934	0					
ANR	5230987	ArgumentList	0xac00		5230934	1					
ANR	5230988	Argument	0xac00		5230934	0					
ANR	5230989	PrimaryExpression	0xac00		5230934	0					
ANR	5230990	Argument	codepoint		5230934	1					
ANR	5230991	Identifier	codepoint		5230934	0					
ANR	5230992	Argument	0xd7a3		5230934	2					
ANR	5230993	PrimaryExpression	0xd7a3		5230934	0					
ANR	5230994	OrExpression	"R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5230995	CallExpression	"R_BETWEEN ( 0xf900 , codepoint , 0xfaff )"		5230934	0					
ANR	5230996	Callee	R_BETWEEN		5230934	0					
ANR	5230997	Identifier	R_BETWEEN		5230934	0					
ANR	5230998	ArgumentList	0xf900		5230934	1					
ANR	5230999	Argument	0xf900		5230934	0					
ANR	5231000	PrimaryExpression	0xf900		5230934	0					
ANR	5231001	Argument	codepoint		5230934	1					
ANR	5231002	Identifier	codepoint		5230934	0					
ANR	5231003	Argument	0xfaff		5230934	2					
ANR	5231004	PrimaryExpression	0xfaff		5230934	0					
ANR	5231005	OrExpression	"R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5231006	CallExpression	"R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 )"		5230934	0					
ANR	5231007	Callee	R_BETWEEN		5230934	0					
ANR	5231008	Identifier	R_BETWEEN		5230934	0					
ANR	5231009	ArgumentList	0xfe10		5230934	1					
ANR	5231010	Argument	0xfe10		5230934	0					
ANR	5231011	PrimaryExpression	0xfe10		5230934	0					
ANR	5231012	Argument	codepoint		5230934	1					
ANR	5231013	Identifier	codepoint		5230934	0					
ANR	5231014	Argument	0xfe19		5230934	2					
ANR	5231015	PrimaryExpression	0xfe19		5230934	0					
ANR	5231016	OrExpression	"R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5231017	CallExpression	"R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f )"		5230934	0					
ANR	5231018	Callee	R_BETWEEN		5230934	0					
ANR	5231019	Identifier	R_BETWEEN		5230934	0					
ANR	5231020	ArgumentList	0xfe30		5230934	1					
ANR	5231021	Argument	0xfe30		5230934	0					
ANR	5231022	PrimaryExpression	0xfe30		5230934	0					
ANR	5231023	Argument	codepoint		5230934	1					
ANR	5231024	Identifier	codepoint		5230934	0					
ANR	5231025	Argument	0xfe6f		5230934	2					
ANR	5231026	PrimaryExpression	0xfe6f		5230934	0					
ANR	5231027	OrExpression	"R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5231028	CallExpression	"R_BETWEEN ( 0xff00 , codepoint , 0xff60 )"		5230934	0					
ANR	5231029	Callee	R_BETWEEN		5230934	0					
ANR	5231030	Identifier	R_BETWEEN		5230934	0					
ANR	5231031	ArgumentList	0xff00		5230934	1					
ANR	5231032	Argument	0xff00		5230934	0					
ANR	5231033	PrimaryExpression	0xff00		5230934	0					
ANR	5231034	Argument	codepoint		5230934	1					
ANR	5231035	Identifier	codepoint		5230934	0					
ANR	5231036	Argument	0xff60		5230934	2					
ANR	5231037	PrimaryExpression	0xff60		5230934	0					
ANR	5231038	OrExpression	"R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5231039	CallExpression	"R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 )"		5230934	0					
ANR	5231040	Callee	R_BETWEEN		5230934	0					
ANR	5231041	Identifier	R_BETWEEN		5230934	0					
ANR	5231042	ArgumentList	0xffe0		5230934	1					
ANR	5231043	Argument	0xffe0		5230934	0					
ANR	5231044	PrimaryExpression	0xffe0		5230934	0					
ANR	5231045	Argument	codepoint		5230934	1					
ANR	5231046	Identifier	codepoint		5230934	0					
ANR	5231047	Argument	0xffe6		5230934	2					
ANR	5231048	PrimaryExpression	0xffe6		5230934	0					
ANR	5231049	OrExpression	"R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1		||			
ANR	5231050	CallExpression	"R_BETWEEN ( 0x20000 , codepoint , 0x2fffd )"		5230934	0					
ANR	5231051	Callee	R_BETWEEN		5230934	0					
ANR	5231052	Identifier	R_BETWEEN		5230934	0					
ANR	5231053	ArgumentList	0x20000		5230934	1					
ANR	5231054	Argument	0x20000		5230934	0					
ANR	5231055	PrimaryExpression	0x20000		5230934	0					
ANR	5231056	Argument	codepoint		5230934	1					
ANR	5231057	Identifier	codepoint		5230934	0					
ANR	5231058	Argument	0x2fffd		5230934	2					
ANR	5231059	PrimaryExpression	0x2fffd		5230934	0					
ANR	5231060	CallExpression	"R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		5230934	1					
ANR	5231061	Callee	R_BETWEEN		5230934	0					
ANR	5231062	Identifier	R_BETWEEN		5230934	0					
ANR	5231063	ArgumentList	0x30000		5230934	1					
ANR	5231064	Argument	0x30000		5230934	0					
ANR	5231065	PrimaryExpression	0x30000		5230934	0					
ANR	5231066	Argument	codepoint		5230934	1					
ANR	5231067	Identifier	codepoint		5230934	0					
ANR	5231068	Argument	0x3fffd		5230934	2					
ANR	5231069	PrimaryExpression	0x3fffd		5230934	0					
ANR	5231070	ReturnType	R_API bool		5230934	1					
ANR	5231071	Identifier	r_str_char_fullwidth		5230934	2					
ANR	5231072	ParameterList	"const char * s , int left"		5230934	3					
ANR	5231073	Parameter	const char * s	1889:33:39385:39397	5230934	0	True				
ANR	5231074	ParameterType	const char *		5230934	0					
ANR	5231075	Identifier	s		5230934	1					
ANR	5231076	Parameter	int left	1889:48:39400:39407	5230934	1	True				
ANR	5231077	ParameterType	int		5230934	0					
ANR	5231078	Identifier	left		5230934	1					
ANR	5231079	CFGEntryNode	ENTRY		5230934		True				
ANR	5231080	CFGExitNode	EXIT		5230934		True				
ANR	5231081	Symbol	s		5230934						
ANR	5231082	Symbol	codepoint		5230934						
ANR	5231083	Symbol	left		5230934						
ANR	5231084	Symbol	R_BETWEEN		5230934						
ANR	5231085	Symbol	r_str_utf8_codepoint		5230934						
ANR	5231086	Function	r_str_utf8_charsize	1912:0:40317:40570							
ANR	5231087	FunctionDef	r_str_utf8_charsize (const char * str)		5231086	0					
ANR	5231088	CompoundStatement		1912:47:40364:40570	5231086	0					
ANR	5231089	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1913:1:40367:40396	5231086	0	True				
ANR	5231090	CallExpression	"r_return_val_if_fail ( str , 0 )"		5231086	0					
ANR	5231091	Callee	r_return_val_if_fail		5231086	0					
ANR	5231092	Identifier	r_return_val_if_fail		5231086	0					
ANR	5231093	ArgumentList	str		5231086	1					
ANR	5231094	Argument	str		5231086	0					
ANR	5231095	Identifier	str		5231086	0					
ANR	5231096	Argument	0		5231086	1					
ANR	5231097	PrimaryExpression	0		5231086	0					
ANR	5231098	IdentifierDeclStatement	int size = 0 ;	1914:1:40399:40411	5231086	1	True				
ANR	5231099	IdentifierDecl	size = 0		5231086	0					
ANR	5231100	IdentifierDeclType	int		5231086	0					
ANR	5231101	Identifier	size		5231086	1					
ANR	5231102	AssignmentExpression	size = 0		5231086	2		=			
ANR	5231103	Identifier	size		5231086	0					
ANR	5231104	PrimaryExpression	0		5231086	1					
ANR	5231105	IdentifierDeclStatement	int length = strlen ( str ) ;	1915:1:40414:40439	5231086	2	True				
ANR	5231106	IdentifierDecl	length = strlen ( str )		5231086	0					
ANR	5231107	IdentifierDeclType	int		5231086	0					
ANR	5231108	Identifier	length		5231086	1					
ANR	5231109	AssignmentExpression	length = strlen ( str )		5231086	2		=			
ANR	5231110	Identifier	length		5231086	0					
ANR	5231111	CallExpression	strlen ( str )		5231086	1					
ANR	5231112	Callee	strlen		5231086	0					
ANR	5231113	Identifier	strlen		5231086	0					
ANR	5231114	ArgumentList	str		5231086	1					
ANR	5231115	Argument	str		5231086	0					
ANR	5231116	Identifier	str		5231086	0					
ANR	5231117	WhileStatement	while ( size < length && size < 5 )		5231086	3					
ANR	5231118	Condition	size < length && size < 5	1916:8:40449:40473	5231086	0	True				
ANR	5231119	AndExpression	size < length && size < 5		5231086	0		&&			
ANR	5231120	RelationalExpression	size < length		5231086	0		<			
ANR	5231121	Identifier	size		5231086	0					
ANR	5231122	Identifier	length		5231086	1					
ANR	5231123	RelationalExpression	size < 5		5231086	1		<			
ANR	5231124	Identifier	size		5231086	0					
ANR	5231125	PrimaryExpression	5		5231086	1					
ANR	5231126	CompoundStatement		5:35:111:111	5231086	1					
ANR	5231127	ExpressionStatement	size ++	1917:2:40480:40486	5231086	0	True				
ANR	5231128	PostIncDecOperationExpression	size ++		5231086	0					
ANR	5231129	Identifier	size		5231086	0					
ANR	5231130	IncDec	++		5231086	1					
ANR	5231131	IfStatement	if ( ( str [ size ] & 0xc0 ) != 0x80 )		5231086	1					
ANR	5231132	Condition	( str [ size ] & 0xc0 ) != 0x80	1918:6:40494:40519	5231086	0	True				
ANR	5231133	EqualityExpression	( str [ size ] & 0xc0 ) != 0x80		5231086	0		!=			
ANR	5231134	BitAndExpression	str [ size ] & 0xc0		5231086	0		&			
ANR	5231135	ArrayIndexing	str [ size ]		5231086	0					
ANR	5231136	Identifier	str		5231086	0					
ANR	5231137	Identifier	size		5231086	1					
ANR	5231138	PrimaryExpression	0xc0		5231086	1					
ANR	5231139	PrimaryExpression	0x80		5231086	1					
ANR	5231140	CompoundStatement		7:34:157:157	5231086	1					
ANR	5231141	BreakStatement	break ;	1919:3:40527:40532	5231086	0	True				
ANR	5231142	ReturnStatement	return size < 5 ? size : 0 ;	1922:1:40542:40568	5231086	4	True				
ANR	5231143	ConditionalExpression	size < 5 ? size : 0		5231086	0					
ANR	5231144	Condition	size < 5		5231086	0					
ANR	5231145	RelationalExpression	size < 5		5231086	0		<			
ANR	5231146	Identifier	size		5231086	0					
ANR	5231147	PrimaryExpression	5		5231086	1					
ANR	5231148	Identifier	size		5231086	1					
ANR	5231149	PrimaryExpression	0		5231086	2					
ANR	5231150	ReturnType	R_API int		5231086	1					
ANR	5231151	Identifier	r_str_utf8_charsize		5231086	2					
ANR	5231152	ParameterList	const char * str		5231086	3					
ANR	5231153	Parameter	const char * str	1912:30:40347:40361	5231086	0	True				
ANR	5231154	ParameterType	const char *		5231086	0					
ANR	5231155	Identifier	str		5231086	1					
ANR	5231156	CFGEntryNode	ENTRY		5231086		True				
ANR	5231157	CFGExitNode	EXIT		5231086		True				
ANR	5231158	Symbol	str		5231086						
ANR	5231159	Symbol	strlen		5231086						
ANR	5231160	Symbol	* size		5231086						
ANR	5231161	Symbol	size		5231086						
ANR	5231162	Symbol	length		5231086						
ANR	5231163	Symbol	* str		5231086						
ANR	5231164	Function	r_str_utf8_charsize_prev	1931:0:40761:41017							
ANR	5231165	FunctionDef	"r_str_utf8_charsize_prev (const char * str , int prev_len)"		5231164	0					
ANR	5231166	CompoundStatement		1931:66:40827:41017	5231164	0					
ANR	5231167	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1932:1:40830:40859	5231164	0	True				
ANR	5231168	CallExpression	"r_return_val_if_fail ( str , 0 )"		5231164	0					
ANR	5231169	Callee	r_return_val_if_fail		5231164	0					
ANR	5231170	Identifier	r_return_val_if_fail		5231164	0					
ANR	5231171	ArgumentList	str		5231164	1					
ANR	5231172	Argument	str		5231164	0					
ANR	5231173	Identifier	str		5231164	0					
ANR	5231174	Argument	0		5231164	1					
ANR	5231175	PrimaryExpression	0		5231164	0					
ANR	5231176	IdentifierDeclStatement	"int size = 0 , pos = 0 ;"	1933:1:40862:40883	5231164	1	True				
ANR	5231177	IdentifierDecl	size = 0		5231164	0					
ANR	5231178	IdentifierDeclType	int		5231164	0					
ANR	5231179	Identifier	size		5231164	1					
ANR	5231180	AssignmentExpression	size = 0		5231164	2		=			
ANR	5231181	Identifier	size		5231164	0					
ANR	5231182	PrimaryExpression	0		5231164	1					
ANR	5231183	IdentifierDecl	pos = 0		5231164	1					
ANR	5231184	IdentifierDeclType	int		5231164	0					
ANR	5231185	Identifier	pos		5231164	1					
ANR	5231186	AssignmentExpression	pos = 0		5231164	2		=			
ANR	5231187	Identifier	pos		5231164	0					
ANR	5231188	PrimaryExpression	0		5231164	1					
ANR	5231189	WhileStatement	while ( size < prev_len && size < 5 )		5231164	2					
ANR	5231190	Condition	size < prev_len && size < 5	1934:8:40893:40919	5231164	0	True				
ANR	5231191	AndExpression	size < prev_len && size < 5		5231164	0		&&			
ANR	5231192	RelationalExpression	size < prev_len		5231164	0		<			
ANR	5231193	Identifier	size		5231164	0					
ANR	5231194	Identifier	prev_len		5231164	1					
ANR	5231195	RelationalExpression	size < 5		5231164	1		<			
ANR	5231196	Identifier	size		5231164	0					
ANR	5231197	PrimaryExpression	5		5231164	1					
ANR	5231198	CompoundStatement		4:37:94:94	5231164	1					
ANR	5231199	ExpressionStatement	size ++	1935:2:40926:40932	5231164	0	True				
ANR	5231200	PostIncDecOperationExpression	size ++		5231164	0					
ANR	5231201	Identifier	size		5231164	0					
ANR	5231202	IncDec	++		5231164	1					
ANR	5231203	IfStatement	if ( ( str [ -- pos ] & 0xc0 ) != 0x80 )		5231164	1					
ANR	5231204	Condition	( str [ -- pos ] & 0xc0 ) != 0x80	1936:6:40940:40966	5231164	0	True				
ANR	5231205	EqualityExpression	( str [ -- pos ] & 0xc0 ) != 0x80		5231164	0		!=			
ANR	5231206	BitAndExpression	str [ -- pos ] & 0xc0		5231164	0		&			
ANR	5231207	ArrayIndexing	str [ -- pos ]		5231164	0					
ANR	5231208	Identifier	str		5231164	0					
ANR	5231209	UnaryExpression	-- pos		5231164	1					
ANR	5231210	IncDec	--		5231164	0					
ANR	5231211	Identifier	pos		5231164	1					
ANR	5231212	PrimaryExpression	0xc0		5231164	1					
ANR	5231213	PrimaryExpression	0x80		5231164	1					
ANR	5231214	CompoundStatement		6:35:141:141	5231164	1					
ANR	5231215	BreakStatement	break ;	1937:3:40974:40979	5231164	0	True				
ANR	5231216	ReturnStatement	return size < 5 ? size : 0 ;	1940:1:40989:41015	5231164	3	True				
ANR	5231217	ConditionalExpression	size < 5 ? size : 0		5231164	0					
ANR	5231218	Condition	size < 5		5231164	0					
ANR	5231219	RelationalExpression	size < 5		5231164	0		<			
ANR	5231220	Identifier	size		5231164	0					
ANR	5231221	PrimaryExpression	5		5231164	1					
ANR	5231222	Identifier	size		5231164	1					
ANR	5231223	PrimaryExpression	0		5231164	2					
ANR	5231224	ReturnType	R_API int		5231164	1					
ANR	5231225	Identifier	r_str_utf8_charsize_prev		5231164	2					
ANR	5231226	ParameterList	"const char * str , int prev_len"		5231164	3					
ANR	5231227	Parameter	const char * str	1931:35:40796:40810	5231164	0	True				
ANR	5231228	ParameterType	const char *		5231164	0					
ANR	5231229	Identifier	str		5231164	1					
ANR	5231230	Parameter	int prev_len	1931:52:40813:40824	5231164	1	True				
ANR	5231231	ParameterType	int		5231164	0					
ANR	5231232	Identifier	prev_len		5231164	1					
ANR	5231233	CFGEntryNode	ENTRY		5231164		True				
ANR	5231234	CFGExitNode	EXIT		5231164		True				
ANR	5231235	Symbol	str		5231164						
ANR	5231236	Symbol	size		5231164						
ANR	5231237	Symbol	pos		5231164						
ANR	5231238	Symbol	prev_len		5231164						
ANR	5231239	Symbol	* str		5231164						
ANR	5231240	Symbol	* pos		5231164						
ANR	5231241	Function	r_str_utf8_charsize_last	1948:0:41146:41308							
ANR	5231242	FunctionDef	r_str_utf8_charsize_last (const char * str)		5231241	0					
ANR	5231243	CompoundStatement		1948:52:41198:41308	5231241	0					
ANR	5231244	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1949:1:41201:41230	5231241	0	True				
ANR	5231245	CallExpression	"r_return_val_if_fail ( str , 0 )"		5231241	0					
ANR	5231246	Callee	r_return_val_if_fail		5231241	0					
ANR	5231247	Identifier	r_return_val_if_fail		5231241	0					
ANR	5231248	ArgumentList	str		5231241	1					
ANR	5231249	Argument	str		5231241	0					
ANR	5231250	Identifier	str		5231241	0					
ANR	5231251	Argument	0		5231241	1					
ANR	5231252	PrimaryExpression	0		5231241	0					
ANR	5231253	IdentifierDeclStatement	int len = strlen ( str ) ;	1950:1:41233:41255	5231241	1	True				
ANR	5231254	IdentifierDecl	len = strlen ( str )		5231241	0					
ANR	5231255	IdentifierDeclType	int		5231241	0					
ANR	5231256	Identifier	len		5231241	1					
ANR	5231257	AssignmentExpression	len = strlen ( str )		5231241	2		=			
ANR	5231258	Identifier	len		5231241	0					
ANR	5231259	CallExpression	strlen ( str )		5231241	1					
ANR	5231260	Callee	strlen		5231241	0					
ANR	5231261	Identifier	strlen		5231241	0					
ANR	5231262	ArgumentList	str		5231241	1					
ANR	5231263	Argument	str		5231241	0					
ANR	5231264	Identifier	str		5231241	0					
ANR	5231265	ReturnStatement	"return r_str_utf8_charsize_prev ( str + len , len ) ;"	1951:1:41258:41306	5231241	2	True				
ANR	5231266	CallExpression	"r_str_utf8_charsize_prev ( str + len , len )"		5231241	0					
ANR	5231267	Callee	r_str_utf8_charsize_prev		5231241	0					
ANR	5231268	Identifier	r_str_utf8_charsize_prev		5231241	0					
ANR	5231269	ArgumentList	str + len		5231241	1					
ANR	5231270	Argument	str + len		5231241	0					
ANR	5231271	AdditiveExpression	str + len		5231241	0		+			
ANR	5231272	Identifier	str		5231241	0					
ANR	5231273	Identifier	len		5231241	1					
ANR	5231274	Argument	len		5231241	1					
ANR	5231275	Identifier	len		5231241	0					
ANR	5231276	ReturnType	R_API int		5231241	1					
ANR	5231277	Identifier	r_str_utf8_charsize_last		5231241	2					
ANR	5231278	ParameterList	const char * str		5231241	3					
ANR	5231279	Parameter	const char * str	1948:35:41181:41195	5231241	0	True				
ANR	5231280	ParameterType	const char *		5231241	0					
ANR	5231281	Identifier	str		5231241	1					
ANR	5231282	CFGEntryNode	ENTRY		5231241		True				
ANR	5231283	CFGExitNode	EXIT		5231241		True				
ANR	5231284	Symbol	str		5231241						
ANR	5231285	Symbol	strlen		5231241						
ANR	5231286	Symbol	len		5231241						
ANR	5231287	Symbol	r_str_utf8_charsize_prev		5231241						
ANR	5231288	Function	r_str_filter_zeroline	1954:0:41311:41531							
ANR	5231289	FunctionDef	"r_str_filter_zeroline (char * str , int len)"		5231288	0					
ANR	5231290	CompoundStatement		1954:53:41364:41531	5231288	0					
ANR	5231291	IdentifierDeclStatement	int i ;	1955:1:41367:41372	5231288	0	True				
ANR	5231292	IdentifierDecl	i		5231288	0					
ANR	5231293	IdentifierDeclType	int		5231288	0					
ANR	5231294	Identifier	i		5231288	1					
ANR	5231295	ForStatement	for ( i = 0 ; i < len && str [ i ] ; i ++ )		5231288	1					
ANR	5231296	ForInit	i = 0 ;	1956:6:41380:41385	5231288	0	True				
ANR	5231297	AssignmentExpression	i = 0		5231288	0		=			
ANR	5231298	Identifier	i		5231288	0					
ANR	5231299	PrimaryExpression	0		5231288	1					
ANR	5231300	Condition	i < len && str [ i ]	1956:13:41387:41403	5231288	1	True				
ANR	5231301	AndExpression	i < len && str [ i ]		5231288	0		&&			
ANR	5231302	RelationalExpression	i < len		5231288	0		<			
ANR	5231303	Identifier	i		5231288	0					
ANR	5231304	Identifier	len		5231288	1					
ANR	5231305	ArrayIndexing	str [ i ]		5231288	1					
ANR	5231306	Identifier	str		5231288	0					
ANR	5231307	Identifier	i		5231288	1					
ANR	5231308	PostIncDecOperationExpression	i ++	1956:32:41406:41408	5231288	2	True				
ANR	5231309	Identifier	i		5231288	0					
ANR	5231310	IncDec	++		5231288	1					
ANR	5231311	CompoundStatement		3:37:46:46	5231288	3					
ANR	5231312	IfStatement	if ( str [ i ] == '\\n' || str [ i ] == '\\r' )		5231288	0					
ANR	5231313	Condition	str [ i ] == '\\n' || str [ i ] == '\\r'	1957:6:41419:41450	5231288	0	True				
ANR	5231314	OrExpression	str [ i ] == '\\n' || str [ i ] == '\\r'		5231288	0		||			
ANR	5231315	EqualityExpression	str [ i ] == '\\n'		5231288	0		==			
ANR	5231316	ArrayIndexing	str [ i ]		5231288	0					
ANR	5231317	Identifier	str		5231288	0					
ANR	5231318	Identifier	i		5231288	1					
ANR	5231319	PrimaryExpression	'\\n'		5231288	1					
ANR	5231320	EqualityExpression	str [ i ] == '\\r'		5231288	1		==			
ANR	5231321	ArrayIndexing	str [ i ]		5231288	0					
ANR	5231322	Identifier	str		5231288	0					
ANR	5231323	Identifier	i		5231288	1					
ANR	5231324	PrimaryExpression	'\\r'		5231288	1					
ANR	5231325	CompoundStatement		4:40:88:88	5231288	1					
ANR	5231326	BreakStatement	break ;	1958:3:41458:41463	5231288	0	True				
ANR	5231327	IfStatement	if ( ! IS_PRINTABLE ( str [ i ] ) )		5231288	1					
ANR	5231328	Condition	! IS_PRINTABLE ( str [ i ] )	1960:6:41475:41496	5231288	0	True				
ANR	5231329	UnaryOperationExpression	! IS_PRINTABLE ( str [ i ] )		5231288	0					
ANR	5231330	UnaryOperator	!		5231288	0					
ANR	5231331	CallExpression	IS_PRINTABLE ( str [ i ] )		5231288	1					
ANR	5231332	Callee	IS_PRINTABLE		5231288	0					
ANR	5231333	Identifier	IS_PRINTABLE		5231288	0					
ANR	5231334	ArgumentList	str [ i ]		5231288	1					
ANR	5231335	Argument	str [ i ]		5231288	0					
ANR	5231336	ArrayIndexing	str [ i ]		5231288	0					
ANR	5231337	Identifier	str		5231288	0					
ANR	5231338	Identifier	i		5231288	1					
ANR	5231339	CompoundStatement		7:30:134:134	5231288	1					
ANR	5231340	BreakStatement	break ;	1961:3:41504:41509	5231288	0	True				
ANR	5231341	ExpressionStatement	str [ i ] = 0	1964:1:41519:41529	5231288	2	True				
ANR	5231342	AssignmentExpression	str [ i ] = 0		5231288	0		=			
ANR	5231343	ArrayIndexing	str [ i ]		5231288	0					
ANR	5231344	Identifier	str		5231288	0					
ANR	5231345	Identifier	i		5231288	1					
ANR	5231346	PrimaryExpression	0		5231288	1					
ANR	5231347	ReturnType	R_API void		5231288	1					
ANR	5231348	Identifier	r_str_filter_zeroline		5231288	2					
ANR	5231349	ParameterList	"char * str , int len"		5231288	3					
ANR	5231350	Parameter	char * str	1954:33:41344:41352	5231288	0	True				
ANR	5231351	ParameterType	char *		5231288	0					
ANR	5231352	Identifier	str		5231288	1					
ANR	5231353	Parameter	int len	1954:44:41355:41361	5231288	1	True				
ANR	5231354	ParameterType	int		5231288	0					
ANR	5231355	Identifier	len		5231288	1					
ANR	5231356	CFGEntryNode	ENTRY		5231288		True				
ANR	5231357	CFGExitNode	EXIT		5231288		True				
ANR	5231358	Symbol	str		5231288						
ANR	5231359	Symbol	* i		5231288						
ANR	5231360	Symbol	IS_PRINTABLE		5231288						
ANR	5231361	Symbol	len		5231288						
ANR	5231362	Symbol	i		5231288						
ANR	5231363	Symbol	* str		5231288						
ANR	5231364	Function	r_str_filter	1967:0:41534:41714							
ANR	5231365	FunctionDef	"r_str_filter (char * str , int len)"		5231364	0					
ANR	5231366	CompoundStatement		1967:44:41578:41714	5231364	0					
ANR	5231367	IdentifierDeclStatement	int i ;	1968:1:41581:41586	5231364	0	True				
ANR	5231368	IdentifierDecl	i		5231364	0					
ANR	5231369	IdentifierDeclType	int		5231364	0					
ANR	5231370	Identifier	i		5231364	1					
ANR	5231371	IfStatement	if ( len < 1 )		5231364	1					
ANR	5231372	Condition	len < 1	1969:5:41593:41599	5231364	0	True				
ANR	5231373	RelationalExpression	len < 1		5231364	0		<			
ANR	5231374	Identifier	len		5231364	0					
ANR	5231375	PrimaryExpression	1		5231364	1					
ANR	5231376	CompoundStatement		3:14:23:23	5231364	1					
ANR	5231377	ExpressionStatement	len = strlen ( str )	1970:2:41606:41624	5231364	0	True				
ANR	5231378	AssignmentExpression	len = strlen ( str )		5231364	0		=			
ANR	5231379	Identifier	len		5231364	0					
ANR	5231380	CallExpression	strlen ( str )		5231364	1					
ANR	5231381	Callee	strlen		5231364	0					
ANR	5231382	Identifier	strlen		5231364	0					
ANR	5231383	ArgumentList	str		5231364	1					
ANR	5231384	Argument	str		5231364	0					
ANR	5231385	Identifier	str		5231364	0					
ANR	5231386	ForStatement	for ( i = 0 ; i < len ; i ++ )		5231364	2					
ANR	5231387	ForInit	i = 0 ;	1972:6:41635:41640	5231364	0	True				
ANR	5231388	AssignmentExpression	i = 0		5231364	0		=			
ANR	5231389	Identifier	i		5231364	0					
ANR	5231390	PrimaryExpression	0		5231364	1					
ANR	5231391	Condition	i < len	1972:13:41642:41648	5231364	1	True				
ANR	5231392	RelationalExpression	i < len		5231364	0		<			
ANR	5231393	Identifier	i		5231364	0					
ANR	5231394	Identifier	len		5231364	1					
ANR	5231395	PostIncDecOperationExpression	i ++	1972:22:41651:41653	5231364	2	True				
ANR	5231396	Identifier	i		5231364	0					
ANR	5231397	IncDec	++		5231364	1					
ANR	5231398	CompoundStatement		6:27:77:77	5231364	3					
ANR	5231399	IfStatement	if ( ! IS_PRINTABLE ( str [ i ] ) )		5231364	0					
ANR	5231400	Condition	! IS_PRINTABLE ( str [ i ] )	1973:6:41664:41685	5231364	0	True				
ANR	5231401	UnaryOperationExpression	! IS_PRINTABLE ( str [ i ] )		5231364	0					
ANR	5231402	UnaryOperator	!		5231364	0					
ANR	5231403	CallExpression	IS_PRINTABLE ( str [ i ] )		5231364	1					
ANR	5231404	Callee	IS_PRINTABLE		5231364	0					
ANR	5231405	Identifier	IS_PRINTABLE		5231364	0					
ANR	5231406	ArgumentList	str [ i ]		5231364	1					
ANR	5231407	Argument	str [ i ]		5231364	0					
ANR	5231408	ArrayIndexing	str [ i ]		5231364	0					
ANR	5231409	Identifier	str		5231364	0					
ANR	5231410	Identifier	i		5231364	1					
ANR	5231411	CompoundStatement		7:30:109:109	5231364	1					
ANR	5231412	ExpressionStatement	str [ i ] = '.'	1974:3:41693:41705	5231364	0	True				
ANR	5231413	AssignmentExpression	str [ i ] = '.'		5231364	0		=			
ANR	5231414	ArrayIndexing	str [ i ]		5231364	0					
ANR	5231415	Identifier	str		5231364	0					
ANR	5231416	Identifier	i		5231364	1					
ANR	5231417	PrimaryExpression	'.'		5231364	1					
ANR	5231418	ReturnType	R_API void		5231364	1					
ANR	5231419	Identifier	r_str_filter		5231364	2					
ANR	5231420	ParameterList	"char * str , int len"		5231364	3					
ANR	5231421	Parameter	char * str	1967:24:41558:41566	5231364	0	True				
ANR	5231422	ParameterType	char *		5231364	0					
ANR	5231423	Identifier	str		5231364	1					
ANR	5231424	Parameter	int len	1967:35:41569:41575	5231364	1	True				
ANR	5231425	ParameterType	int		5231364	0					
ANR	5231426	Identifier	len		5231364	1					
ANR	5231427	CFGEntryNode	ENTRY		5231364		True				
ANR	5231428	CFGExitNode	EXIT		5231364		True				
ANR	5231429	Symbol	str		5231364						
ANR	5231430	Symbol	strlen		5231364						
ANR	5231431	Symbol	IS_PRINTABLE		5231364						
ANR	5231432	Symbol	* i		5231364						
ANR	5231433	Symbol	len		5231364						
ANR	5231434	Symbol	i		5231364						
ANR	5231435	Symbol	* str		5231364						
ANR	5231436	Function	r_str_glob	1979:0:41717:43323							
ANR	5231437	FunctionDef	"r_str_glob (const char * str , const char * glob)"		5231436	0					
ANR	5231438	CompoundStatement		1979:57:41774:43323	5231436	0					
ANR	5231439	IdentifierDeclStatement	"const char * cp = NULL , * mp = NULL ;"	1980:8:41784:41817	5231436	0	True				
ANR	5231440	IdentifierDecl	* cp = NULL		5231436	0					
ANR	5231441	IdentifierDeclType	const char *		5231436	0					
ANR	5231442	Identifier	cp		5231436	1					
ANR	5231443	AssignmentExpression	* cp = NULL		5231436	2		=			
ANR	5231444	Identifier	NULL		5231436	0					
ANR	5231445	Identifier	NULL		5231436	1					
ANR	5231446	IdentifierDecl	* mp = NULL		5231436	1					
ANR	5231447	IdentifierDeclType	const char *		5231436	0					
ANR	5231448	Identifier	mp		5231436	1					
ANR	5231449	AssignmentExpression	* mp = NULL		5231436	2		=			
ANR	5231450	Identifier	NULL		5231436	0					
ANR	5231451	Identifier	NULL		5231436	1					
ANR	5231452	IfStatement	"if ( ! glob || ! strcmp ( glob , ""*"" ) )"		5231436	1					
ANR	5231453	Condition	"! glob || ! strcmp ( glob , ""*"" )"	1981:12:41831:41858	5231436	0	True				
ANR	5231454	OrExpression	"! glob || ! strcmp ( glob , ""*"" )"		5231436	0		||			
ANR	5231455	UnaryOperationExpression	! glob		5231436	0					
ANR	5231456	UnaryOperator	!		5231436	0					
ANR	5231457	Identifier	glob		5231436	1					
ANR	5231458	UnaryOperationExpression	"! strcmp ( glob , ""*"" )"		5231436	1					
ANR	5231459	UnaryOperator	!		5231436	0					
ANR	5231460	CallExpression	"strcmp ( glob , ""*"" )"		5231436	1					
ANR	5231461	Callee	strcmp		5231436	0					
ANR	5231462	Identifier	strcmp		5231436	0					
ANR	5231463	ArgumentList	glob		5231436	1					
ANR	5231464	Argument	glob		5231436	0					
ANR	5231465	Identifier	glob		5231436	0					
ANR	5231466	Argument	"""*"""		5231436	1					
ANR	5231467	PrimaryExpression	"""*"""		5231436	0					
ANR	5231468	CompoundStatement		3:42:86:86	5231436	1					
ANR	5231469	ReturnStatement	return true ;	1982:16:41879:41890	5231436	0	True				
ANR	5231470	Identifier	true		5231436	0					
ANR	5231471	IfStatement	"if ( ! strchr ( glob , '*' ) )"		5231436	2					
ANR	5231472	Condition	"! strchr ( glob , '*' )"	1984:12:41914:41932	5231436	0	True				
ANR	5231473	UnaryOperationExpression	"! strchr ( glob , '*' )"		5231436	0					
ANR	5231474	UnaryOperator	!		5231436	0					
ANR	5231475	CallExpression	"strchr ( glob , '*' )"		5231436	1					
ANR	5231476	Callee	strchr		5231436	0					
ANR	5231477	Identifier	strchr		5231436	0					
ANR	5231478	ArgumentList	glob		5231436	1					
ANR	5231479	Argument	glob		5231436	0					
ANR	5231480	Identifier	glob		5231436	0					
ANR	5231481	Argument	'*'		5231436	1					
ANR	5231482	PrimaryExpression	'*'		5231436	0					
ANR	5231483	CompoundStatement		6:33:160:160	5231436	1					
ANR	5231484	IfStatement	if ( * glob == '^' )		5231436	0					
ANR	5231485	Condition	* glob == '^'	1985:20:41957:41968	5231436	0	True				
ANR	5231486	EqualityExpression	* glob == '^'		5231436	0		==			
ANR	5231487	UnaryOperationExpression	* glob		5231436	0					
ANR	5231488	UnaryOperator	*		5231436	0					
ANR	5231489	Identifier	glob		5231436	1					
ANR	5231490	PrimaryExpression	'^'		5231436	1					
ANR	5231491	CompoundStatement		7:34:196:196	5231436	1					
ANR	5231492	ExpressionStatement	glob ++	1986:24:41997:42003	5231436	0	True				
ANR	5231493	PostIncDecOperationExpression	glob ++		5231436	0					
ANR	5231494	Identifier	glob		5231436	0					
ANR	5231495	IncDec	++		5231436	1					
ANR	5231496	WhileStatement	while ( * str )		5231436	1					
ANR	5231497	Condition	* str	1987:31:42036:42039	5231436	0	True				
ANR	5231498	UnaryOperationExpression	* str		5231436	0					
ANR	5231499	UnaryOperator	*		5231436	0					
ANR	5231500	Identifier	str		5231436	1					
ANR	5231501	CompoundStatement		9:37:267:267	5231436	1					
ANR	5231502	IfStatement	if ( * glob != * str )		5231436	0					
ANR	5231503	Condition	* glob != * str	1988:36:42080:42092	5231436	0	True				
ANR	5231504	EqualityExpression	* glob != * str		5231436	0		!=			
ANR	5231505	UnaryOperationExpression	* glob		5231436	0					
ANR	5231506	UnaryOperator	*		5231436	0					
ANR	5231507	Identifier	glob		5231436	1					
ANR	5231508	UnaryOperationExpression	* str		5231436	1					
ANR	5231509	UnaryOperator	*		5231436	0					
ANR	5231510	Identifier	str		5231436	1					
ANR	5231511	CompoundStatement		10:51:320:320	5231436	1					
ANR	5231512	ReturnStatement	return false ;	1989:40:42137:42149	5231436	0	True				
ANR	5231513	Identifier	false		5231436	0					
ANR	5231514	IfStatement	if ( ! * ++ glob )		5231436	1					
ANR	5231515	Condition	! * ++ glob	1991:36:42221:42228	5231436	0	True				
ANR	5231516	UnaryOperationExpression	! * ++ glob		5231436	0					
ANR	5231517	UnaryOperator	!		5231436	0					
ANR	5231518	UnaryOperationExpression	* ++ glob		5231436	1					
ANR	5231519	UnaryOperator	*		5231436	0					
ANR	5231520	UnaryExpression	++ glob		5231436	1					
ANR	5231521	IncDec	++		5231436	0					
ANR	5231522	Identifier	glob		5231436	1					
ANR	5231523	CompoundStatement		13:46:456:456	5231436	1					
ANR	5231524	ReturnStatement	return true ;	1992:40:42273:42284	5231436	0	True				
ANR	5231525	Identifier	true		5231436	0					
ANR	5231526	ExpressionStatement	str ++	1994:32:42352:42357	5231436	2	True				
ANR	5231527	PostIncDecOperationExpression	str ++		5231436	0					
ANR	5231528	Identifier	str		5231436	0					
ANR	5231529	IncDec	++		5231436	1					
ANR	5231530	ElseStatement	else		5231436	0					
ANR	5231531	CompoundStatement		18:23:633:633	5231436	0					
ANR	5231532	ReturnStatement	"return strstr ( str , glob ) != NULL ;"	1997:24:42434:42467	5231436	0	True				
ANR	5231533	EqualityExpression	"strstr ( str , glob ) != NULL"		5231436	0		!=			
ANR	5231534	CallExpression	"strstr ( str , glob )"		5231436	0					
ANR	5231535	Callee	strstr		5231436	0					
ANR	5231536	Identifier	strstr		5231436	0					
ANR	5231537	ArgumentList	str		5231436	1					
ANR	5231538	Argument	str		5231436	0					
ANR	5231539	Identifier	str		5231436	0					
ANR	5231540	Argument	glob		5231436	1					
ANR	5231541	Identifier	glob		5231436	0					
ANR	5231542	Identifier	NULL		5231436	1					
ANR	5231543	IfStatement	if ( * glob == '^' )		5231436	3					
ANR	5231544	Condition	* glob == '^'	2000:12:42509:42520	5231436	0	True				
ANR	5231545	EqualityExpression	* glob == '^'		5231436	0		==			
ANR	5231546	UnaryOperationExpression	* glob		5231436	0					
ANR	5231547	UnaryOperator	*		5231436	0					
ANR	5231548	Identifier	glob		5231436	1					
ANR	5231549	PrimaryExpression	'^'		5231436	1					
ANR	5231550	CompoundStatement		22:26:748:748	5231436	1					
ANR	5231551	ExpressionStatement	glob ++	2001:16:42541:42547	5231436	0	True				
ANR	5231552	PostIncDecOperationExpression	glob ++		5231436	0					
ANR	5231553	Identifier	glob		5231436	0					
ANR	5231554	IncDec	++		5231436	1					
ANR	5231555	WhileStatement	while ( * str && ( * glob != '*' ) )		5231436	4					
ANR	5231556	Condition	* str && ( * glob != '*' )	2003:15:42574:42595	5231436	0	True				
ANR	5231557	AndExpression	* str && ( * glob != '*' )		5231436	0		&&			
ANR	5231558	UnaryOperationExpression	* str		5231436	0					
ANR	5231559	UnaryOperator	*		5231436	0					
ANR	5231560	Identifier	str		5231436	1					
ANR	5231561	EqualityExpression	* glob != '*'		5231436	1		!=			
ANR	5231562	UnaryOperationExpression	* glob		5231436	0					
ANR	5231563	UnaryOperator	*		5231436	0					
ANR	5231564	Identifier	glob		5231436	1					
ANR	5231565	PrimaryExpression	'*'		5231436	1					
ANR	5231566	CompoundStatement		25:39:823:823	5231436	1					
ANR	5231567	IfStatement	if ( * glob != * str )		5231436	0					
ANR	5231568	Condition	* glob != * str	2004:20:42620:42632	5231436	0	True				
ANR	5231569	EqualityExpression	* glob != * str		5231436	0		!=			
ANR	5231570	UnaryOperationExpression	* glob		5231436	0					
ANR	5231571	UnaryOperator	*		5231436	0					
ANR	5231572	Identifier	glob		5231436	1					
ANR	5231573	UnaryOperationExpression	* str		5231436	1					
ANR	5231574	UnaryOperator	*		5231436	0					
ANR	5231575	Identifier	str		5231436	1					
ANR	5231576	CompoundStatement		26:35:860:860	5231436	1					
ANR	5231577	ReturnStatement	return false ;	2005:24:42661:42673	5231436	0	True				
ANR	5231578	Identifier	false		5231436	0					
ANR	5231579	ExpressionStatement	glob ++	2007:16:42709:42715	5231436	1	True				
ANR	5231580	PostIncDecOperationExpression	glob ++		5231436	0					
ANR	5231581	Identifier	glob		5231436	0					
ANR	5231582	IncDec	++		5231436	1					
ANR	5231583	ExpressionStatement	str ++	2008:16:42733:42738	5231436	2	True				
ANR	5231584	PostIncDecOperationExpression	str ++		5231436	0					
ANR	5231585	Identifier	str		5231436	0					
ANR	5231586	IncDec	++		5231436	1					
ANR	5231587	WhileStatement	while ( * str )		5231436	5					
ANR	5231588	Condition	* str	2010:15:42765:42768	5231436	0	True				
ANR	5231589	UnaryOperationExpression	* str		5231436	0					
ANR	5231590	UnaryOperator	*		5231436	0					
ANR	5231591	Identifier	str		5231436	1					
ANR	5231592	CompoundStatement		32:21:996:996	5231436	1					
ANR	5231593	IfStatement	if ( * glob == '*' )		5231436	0					
ANR	5231594	Condition	* glob == '*'	2011:20:42793:42804	5231436	0	True				
ANR	5231595	EqualityExpression	* glob == '*'		5231436	0		==			
ANR	5231596	UnaryOperationExpression	* glob		5231436	0					
ANR	5231597	UnaryOperator	*		5231436	0					
ANR	5231598	Identifier	glob		5231436	1					
ANR	5231599	PrimaryExpression	'*'		5231436	1					
ANR	5231600	CompoundStatement		33:34:1032:1032	5231436	1					
ANR	5231601	IfStatement	if ( ! * ++ glob )		5231436	0					
ANR	5231602	Condition	! * ++ glob	2012:28:42837:42844	5231436	0	True				
ANR	5231603	UnaryOperationExpression	! * ++ glob		5231436	0					
ANR	5231604	UnaryOperator	!		5231436	0					
ANR	5231605	UnaryOperationExpression	* ++ glob		5231436	1					
ANR	5231606	UnaryOperator	*		5231436	0					
ANR	5231607	UnaryExpression	++ glob		5231436	1					
ANR	5231608	IncDec	++		5231436	0					
ANR	5231609	Identifier	glob		5231436	1					
ANR	5231610	CompoundStatement		34:38:1072:1072	5231436	1					
ANR	5231611	ReturnStatement	return true ;	2013:32:42881:42892	5231436	0	True				
ANR	5231612	Identifier	true		5231436	0					
ANR	5231613	ExpressionStatement	mp = glob	2015:24:42944:42953	5231436	1	True				
ANR	5231614	AssignmentExpression	mp = glob		5231436	0		=			
ANR	5231615	Identifier	mp		5231436	0					
ANR	5231616	Identifier	glob		5231436	1					
ANR	5231617	ExpressionStatement	cp = str + 1	2016:24:42979:42991	5231436	2	True				
ANR	5231618	AssignmentExpression	cp = str + 1		5231436	0		=			
ANR	5231619	Identifier	cp		5231436	0					
ANR	5231620	AdditiveExpression	str + 1		5231436	1		+			
ANR	5231621	Identifier	str		5231436	0					
ANR	5231622	PrimaryExpression	1		5231436	1					
ANR	5231623	ElseStatement	else		5231436	0					
ANR	5231624	IfStatement	if ( * glob == * str )		5231436	0					
ANR	5231625	Condition	* glob == * str	2017:27:43020:43032	5231436	0	True				
ANR	5231626	EqualityExpression	* glob == * str		5231436	0		==			
ANR	5231627	UnaryOperationExpression	* glob		5231436	0					
ANR	5231628	UnaryOperator	*		5231436	0					
ANR	5231629	Identifier	glob		5231436	1					
ANR	5231630	UnaryOperationExpression	* str		5231436	1					
ANR	5231631	UnaryOperator	*		5231436	0					
ANR	5231632	Identifier	str		5231436	1					
ANR	5231633	CompoundStatement		39:42:1260:1260	5231436	1					
ANR	5231634	ExpressionStatement	glob ++	2018:24:43061:43067	5231436	0	True				
ANR	5231635	PostIncDecOperationExpression	glob ++		5231436	0					
ANR	5231636	Identifier	glob		5231436	0					
ANR	5231637	IncDec	++		5231436	1					
ANR	5231638	ExpressionStatement	str ++	2019:24:43093:43098	5231436	1	True				
ANR	5231639	PostIncDecOperationExpression	str ++		5231436	0					
ANR	5231640	Identifier	str		5231436	0					
ANR	5231641	IncDec	++		5231436	1					
ANR	5231642	ElseStatement	else		5231436	0					
ANR	5231643	CompoundStatement		42:23:1348:1348	5231436	0					
ANR	5231644	ExpressionStatement	glob = mp	2021:24:43149:43158	5231436	0	True				
ANR	5231645	AssignmentExpression	glob = mp		5231436	0		=			
ANR	5231646	Identifier	glob		5231436	0					
ANR	5231647	Identifier	mp		5231436	1					
ANR	5231648	ExpressionStatement	str = cp ++	2022:24:43184:43194	5231436	1	True				
ANR	5231649	AssignmentExpression	str = cp ++		5231436	0		=			
ANR	5231650	Identifier	str		5231436	0					
ANR	5231651	PostIncDecOperationExpression	cp ++		5231436	1					
ANR	5231652	Identifier	cp		5231436	0					
ANR	5231653	IncDec	++		5231436	1					
ANR	5231654	WhileStatement	while ( * glob == '*' )		5231436	6					
ANR	5231655	Condition	* glob == '*'	2025:15:43239:43250	5231436	0	True				
ANR	5231656	EqualityExpression	* glob == '*'		5231436	0		==			
ANR	5231657	UnaryOperationExpression	* glob		5231436	0					
ANR	5231658	UnaryOperator	*		5231436	0					
ANR	5231659	Identifier	glob		5231436	1					
ANR	5231660	PrimaryExpression	'*'		5231436	1					
ANR	5231661	CompoundStatement		47:29:1478:1478	5231436	1					
ANR	5231662	ExpressionStatement	++ glob	2026:16:43271:43277	5231436	0	True				
ANR	5231663	UnaryExpression	++ glob		5231436	0					
ANR	5231664	IncDec	++		5231436	0					
ANR	5231665	Identifier	glob		5231436	1					
ANR	5231666	ReturnStatement	return ( * glob == x00 ) ;	2028:8:43297:43321	5231436	7	True				
ANR	5231667	EqualityExpression	* glob == x00		5231436	0		==			
ANR	5231668	UnaryOperationExpression	* glob		5231436	0					
ANR	5231669	UnaryOperator	*		5231436	0					
ANR	5231670	Identifier	glob		5231436	1					
ANR	5231671	Identifier	x00		5231436	1					
ANR	5231672	ReturnType	R_API bool		5231436	1					
ANR	5231673	Identifier	r_str_glob		5231436	2					
ANR	5231674	ParameterList	"const char * str , const char * glob"		5231436	3					
ANR	5231675	Parameter	const char * str	1979:22:41739:41753	5231436	0	True				
ANR	5231676	ParameterType	const char *		5231436	0					
ANR	5231677	Identifier	str		5231436	1					
ANR	5231678	Parameter	const char * glob	1979:39:41756:41771	5231436	1	True				
ANR	5231679	ParameterType	const char *		5231436	0					
ANR	5231680	Identifier	glob		5231436	1					
ANR	5231681	CFGEntryNode	ENTRY		5231436		True				
ANR	5231682	CFGExitNode	EXIT		5231436		True				
ANR	5231683	Symbol	strcmp		5231436						
ANR	5231684	Symbol	NULL		5231436						
ANR	5231685	Symbol	mp		5231436						
ANR	5231686	Symbol	glob		5231436						
ANR	5231687	Symbol	false		5231436						
ANR	5231688	Symbol	strchr		5231436						
ANR	5231689	Symbol	cp		5231436						
ANR	5231690	Symbol	str		5231436						
ANR	5231691	Symbol	* glob		5231436						
ANR	5231692	Symbol	strstr		5231436						
ANR	5231693	Symbol	true		5231436						
ANR	5231694	Symbol	x00		5231436						
ANR	5231695	Symbol	* str		5231436						
ANR	5231696	Symbol	* ++ glob		5231436						
ANR	5231697	Function	r_str_arg_escape	2032:0:43407:43987							
ANR	5231698	FunctionDef	r_str_arg_escape (const char * arg)		5231697	0					
ANR	5231699	CompoundStatement		2032:46:43453:43987	5231697	0					
ANR	5231700	IdentifierDeclStatement	char * str ;	2033:1:43456:43465	5231697	0	True				
ANR	5231701	IdentifierDecl	* str		5231697	0					
ANR	5231702	IdentifierDeclType	char *		5231697	0					
ANR	5231703	Identifier	str		5231697	1					
ANR	5231704	IdentifierDeclStatement	"int dest_i = 0 , src_i = 0 ;"	2034:1:43468:43493	5231697	1	True				
ANR	5231705	IdentifierDecl	dest_i = 0		5231697	0					
ANR	5231706	IdentifierDeclType	int		5231697	0					
ANR	5231707	Identifier	dest_i		5231697	1					
ANR	5231708	AssignmentExpression	dest_i = 0		5231697	2		=			
ANR	5231709	Identifier	dest_i		5231697	0					
ANR	5231710	PrimaryExpression	0		5231697	1					
ANR	5231711	IdentifierDecl	src_i = 0		5231697	1					
ANR	5231712	IdentifierDeclType	int		5231697	0					
ANR	5231713	Identifier	src_i		5231697	1					
ANR	5231714	AssignmentExpression	src_i = 0		5231697	2		=			
ANR	5231715	Identifier	src_i		5231697	0					
ANR	5231716	PrimaryExpression	0		5231697	1					
ANR	5231717	IfStatement	if ( ! arg )		5231697	2					
ANR	5231718	Condition	! arg	2035:5:43500:43503	5231697	0	True				
ANR	5231719	UnaryOperationExpression	! arg		5231697	0					
ANR	5231720	UnaryOperator	!		5231697	0					
ANR	5231721	Identifier	arg		5231697	1					
ANR	5231722	CompoundStatement		4:11:52:52	5231697	1					
ANR	5231723	ReturnStatement	return NULL ;	2036:2:43510:43521	5231697	0	True				
ANR	5231724	Identifier	NULL		5231697	0					
ANR	5231725	ExpressionStatement	str = malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )	2038:1:43527:43580	5231697	3	True				
ANR	5231726	AssignmentExpression	str = malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )		5231697	0		=			
ANR	5231727	Identifier	str		5231697	0					
ANR	5231728	CallExpression	malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )		5231697	1					
ANR	5231729	Callee	malloc		5231697	0					
ANR	5231730	Identifier	malloc		5231697	0					
ANR	5231731	ArgumentList	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		5231697	1					
ANR	5231732	Argument	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		5231697	0					
ANR	5231733	MultiplicativeExpression	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		5231697	0		*			
ANR	5231734	AdditiveExpression	2 * strlen ( arg ) + 1		5231697	0		+			
ANR	5231735	MultiplicativeExpression	2 * strlen ( arg )		5231697	0		*			
ANR	5231736	PrimaryExpression	2		5231697	0					
ANR	5231737	CallExpression	strlen ( arg )		5231697	1					
ANR	5231738	Callee	strlen		5231697	0					
ANR	5231739	Identifier	strlen		5231697	0					
ANR	5231740	ArgumentList	arg		5231697	1					
ANR	5231741	Argument	arg		5231697	0					
ANR	5231742	Identifier	arg		5231697	0					
ANR	5231743	PrimaryExpression	1		5231697	1					
ANR	5231744	SizeofExpression	sizeof ( char )		5231697	1					
ANR	5231745	Sizeof	sizeof		5231697	0					
ANR	5231746	SizeofOperand	char		5231697	1					
ANR	5231747	IfStatement	if ( ! str )		5231697	4					
ANR	5231748	Condition	! str	2039:5:43641:43644	5231697	0	True				
ANR	5231749	UnaryOperationExpression	! str		5231697	0					
ANR	5231750	UnaryOperator	!		5231697	0					
ANR	5231751	Identifier	str		5231697	1					
ANR	5231752	CompoundStatement		8:11:193:193	5231697	1					
ANR	5231753	ReturnStatement	return NULL ;	2040:2:43651:43662	5231697	0	True				
ANR	5231754	Identifier	NULL		5231697	0					
ANR	5231755	ForStatement	for ( src_i = 0 ; arg [ src_i ] != '\\0' ; src_i ++ )		5231697	5					
ANR	5231756	ForInit	src_i = 0 ;	2042:6:43673:43682	5231697	0	True				
ANR	5231757	AssignmentExpression	src_i = 0		5231697	0		=			
ANR	5231758	Identifier	src_i		5231697	0					
ANR	5231759	PrimaryExpression	0		5231697	1					
ANR	5231760	Condition	arg [ src_i ] != '\\0'	2042:17:43684:43701	5231697	1	True				
ANR	5231761	EqualityExpression	arg [ src_i ] != '\\0'		5231697	0		!=			
ANR	5231762	ArrayIndexing	arg [ src_i ]		5231697	0					
ANR	5231763	Identifier	arg		5231697	0					
ANR	5231764	Identifier	src_i		5231697	1					
ANR	5231765	PrimaryExpression	'\\0'		5231697	1					
ANR	5231766	PostIncDecOperationExpression	src_i ++	2042:37:43704:43710	5231697	2	True				
ANR	5231767	Identifier	src_i		5231697	0					
ANR	5231768	IncDec	++		5231697	1					
ANR	5231769	CompoundStatement		12:2:263:282	5231697	3					
ANR	5231770	IdentifierDeclStatement	char c = arg [ src_i ] ;	2043:2:43717:43736	5231697	0	True				
ANR	5231771	IdentifierDecl	c = arg [ src_i ]		5231697	0					
ANR	5231772	IdentifierDeclType	char		5231697	0					
ANR	5231773	Identifier	c		5231697	1					
ANR	5231774	AssignmentExpression	c = arg [ src_i ]		5231697	2		=			
ANR	5231775	Identifier	c		5231697	0					
ANR	5231776	ArrayIndexing	arg [ src_i ]		5231697	1					
ANR	5231777	Identifier	arg		5231697	0					
ANR	5231778	Identifier	src_i		5231697	1					
ANR	5231779	SwitchStatement	switch ( c )		5231697	1					
ANR	5231780	Condition	c	2044:10:43748:43748	5231697	0	True				
ANR	5231781	Identifier	c		5231697	0					
ANR	5231782	CompoundStatement		13:13:297:297	5231697	1					
ANR	5231783	Label	case '\\'' :	2045:2:43755:43764	5231697	0	True				
ANR	5231784	Label	"case '""' :"	2046:2:43768:43776	5231697	1	True				
ANR	5231785	Label	case '\\\\' :	2047:2:43780:43789	5231697	2	True				
ANR	5231786	Label	case ' ' :	2048:2:43793:43801	5231697	3	True				
ANR	5231787	ExpressionStatement	str [ dest_i ++ ] = '\\\\'	2049:3:43806:43826	5231697	4	True				
ANR	5231788	AssignmentExpression	str [ dest_i ++ ] = '\\\\'		5231697	0		=			
ANR	5231789	ArrayIndexing	str [ dest_i ++ ]		5231697	0					
ANR	5231790	Identifier	str		5231697	0					
ANR	5231791	PostIncDecOperationExpression	dest_i ++		5231697	1					
ANR	5231792	Identifier	dest_i		5231697	0					
ANR	5231793	IncDec	++		5231697	1					
ANR	5231794	PrimaryExpression	'\\\\'		5231697	1					
ANR	5231795	ExpressionStatement	str [ dest_i ++ ] = c	2050:3:43831:43848	5231697	5	True				
ANR	5231796	AssignmentExpression	str [ dest_i ++ ] = c		5231697	0		=			
ANR	5231797	ArrayIndexing	str [ dest_i ++ ]		5231697	0					
ANR	5231798	Identifier	str		5231697	0					
ANR	5231799	PostIncDecOperationExpression	dest_i ++		5231697	1					
ANR	5231800	Identifier	dest_i		5231697	0					
ANR	5231801	IncDec	++		5231697	1					
ANR	5231802	Identifier	c		5231697	1					
ANR	5231803	BreakStatement	break ;	2051:3:43853:43858	5231697	6	True				
ANR	5231804	Label	default :	2052:2:43862:43869	5231697	7	True				
ANR	5231805	Identifier	default		5231697	0					
ANR	5231806	ExpressionStatement	str [ dest_i ++ ] = c	2053:3:43874:43891	5231697	8	True				
ANR	5231807	AssignmentExpression	str [ dest_i ++ ] = c		5231697	0		=			
ANR	5231808	ArrayIndexing	str [ dest_i ++ ]		5231697	0					
ANR	5231809	Identifier	str		5231697	0					
ANR	5231810	PostIncDecOperationExpression	dest_i ++		5231697	1					
ANR	5231811	Identifier	dest_i		5231697	0					
ANR	5231812	IncDec	++		5231697	1					
ANR	5231813	Identifier	c		5231697	1					
ANR	5231814	BreakStatement	break ;	2054:3:43896:43901	5231697	9	True				
ANR	5231815	ExpressionStatement	str [ dest_i ] = '\\0'	2057:1:43911:43929	5231697	6	True				
ANR	5231816	AssignmentExpression	str [ dest_i ] = '\\0'		5231697	0		=			
ANR	5231817	ArrayIndexing	str [ dest_i ]		5231697	0					
ANR	5231818	Identifier	str		5231697	0					
ANR	5231819	Identifier	dest_i		5231697	1					
ANR	5231820	PrimaryExpression	'\\0'		5231697	1					
ANR	5231821	ReturnStatement	"return realloc ( str , ( strlen ( str ) + 1 ) * sizeof ( char ) ) ;"	2058:1:43932:43985	5231697	7	True				
ANR	5231822	CallExpression	"realloc ( str , ( strlen ( str ) + 1 ) * sizeof ( char ) )"		5231697	0					
ANR	5231823	Callee	realloc		5231697	0					
ANR	5231824	Identifier	realloc		5231697	0					
ANR	5231825	ArgumentList	str		5231697	1					
ANR	5231826	Argument	str		5231697	0					
ANR	5231827	Identifier	str		5231697	0					
ANR	5231828	Argument	( strlen ( str ) + 1 ) * sizeof ( char )		5231697	1					
ANR	5231829	MultiplicativeExpression	( strlen ( str ) + 1 ) * sizeof ( char )		5231697	0		*			
ANR	5231830	AdditiveExpression	strlen ( str ) + 1		5231697	0		+			
ANR	5231831	CallExpression	strlen ( str )		5231697	0					
ANR	5231832	Callee	strlen		5231697	0					
ANR	5231833	Identifier	strlen		5231697	0					
ANR	5231834	ArgumentList	str		5231697	1					
ANR	5231835	Argument	str		5231697	0					
ANR	5231836	Identifier	str		5231697	0					
ANR	5231837	PrimaryExpression	1		5231697	1					
ANR	5231838	SizeofExpression	sizeof ( char )		5231697	1					
ANR	5231839	Sizeof	sizeof		5231697	0					
ANR	5231840	SizeofOperand	char		5231697	1					
ANR	5231841	ReturnType	R_API char *		5231697	1					
ANR	5231842	Identifier	r_str_arg_escape		5231697	2					
ANR	5231843	ParameterList	const char * arg		5231697	3					
ANR	5231844	Parameter	const char * arg	2032:29:43436:43450	5231697	0	True				
ANR	5231845	ParameterType	const char *		5231697	0					
ANR	5231846	Identifier	arg		5231697	1					
ANR	5231847	CFGEntryNode	ENTRY		5231697		True				
ANR	5231848	CFGExitNode	EXIT		5231697		True				
ANR	5231849	Symbol	* dest_i		5231697						
ANR	5231850	Symbol	malloc		5231697						
ANR	5231851	Symbol	NULL		5231697						
ANR	5231852	Symbol	c		5231697						
ANR	5231853	Symbol	dest_i		5231697						
ANR	5231854	Symbol	src_i		5231697						
ANR	5231855	Symbol	realloc		5231697						
ANR	5231856	Symbol	str		5231697						
ANR	5231857	Symbol	strlen		5231697						
ANR	5231858	Symbol	* src_i		5231697						
ANR	5231859	Symbol	arg		5231697						
ANR	5231860	Symbol	* str		5231697						
ANR	5231861	Symbol	* arg		5231697						
ANR	5231862	Function	r_str_arg_unescape	2062:0:44040:44383							
ANR	5231863	FunctionDef	r_str_arg_unescape (char * arg)		5231862	0					
ANR	5231864	CompoundStatement		2062:40:44080:44383	5231862	0					
ANR	5231865	IdentifierDeclStatement	"int dest_i = 0 , src_i = 0 ;"	2063:1:44083:44108	5231862	0	True				
ANR	5231866	IdentifierDecl	dest_i = 0		5231862	0					
ANR	5231867	IdentifierDeclType	int		5231862	0					
ANR	5231868	Identifier	dest_i		5231862	1					
ANR	5231869	AssignmentExpression	dest_i = 0		5231862	2		=			
ANR	5231870	Identifier	dest_i		5231862	0					
ANR	5231871	PrimaryExpression	0		5231862	1					
ANR	5231872	IdentifierDecl	src_i = 0		5231862	1					
ANR	5231873	IdentifierDeclType	int		5231862	0					
ANR	5231874	Identifier	src_i		5231862	1					
ANR	5231875	AssignmentExpression	src_i = 0		5231862	2		=			
ANR	5231876	Identifier	src_i		5231862	0					
ANR	5231877	PrimaryExpression	0		5231862	1					
ANR	5231878	IfStatement	if ( ! arg )		5231862	1					
ANR	5231879	Condition	! arg	2064:5:44115:44118	5231862	0	True				
ANR	5231880	UnaryOperationExpression	! arg		5231862	0					
ANR	5231881	UnaryOperator	!		5231862	0					
ANR	5231882	Identifier	arg		5231862	1					
ANR	5231883	CompoundStatement		3:11:40:40	5231862	1					
ANR	5231884	ReturnStatement	return 0 ;	2065:2:44125:44133	5231862	0	True				
ANR	5231885	PrimaryExpression	0		5231862	0					
ANR	5231886	ForStatement	for ( src_i = 0 ; arg [ src_i ] != '\\0' ; src_i ++ )		5231862	2					
ANR	5231887	ForInit	src_i = 0 ;	2067:6:44144:44153	5231862	0	True				
ANR	5231888	AssignmentExpression	src_i = 0		5231862	0		=			
ANR	5231889	Identifier	src_i		5231862	0					
ANR	5231890	PrimaryExpression	0		5231862	1					
ANR	5231891	Condition	arg [ src_i ] != '\\0'	2067:17:44155:44172	5231862	1	True				
ANR	5231892	EqualityExpression	arg [ src_i ] != '\\0'		5231862	0		!=			
ANR	5231893	ArrayIndexing	arg [ src_i ]		5231862	0					
ANR	5231894	Identifier	arg		5231862	0					
ANR	5231895	Identifier	src_i		5231862	1					
ANR	5231896	PrimaryExpression	'\\0'		5231862	1					
ANR	5231897	PostIncDecOperationExpression	src_i ++	2067:37:44175:44181	5231862	2	True				
ANR	5231898	Identifier	src_i		5231862	0					
ANR	5231899	IncDec	++		5231862	1					
ANR	5231900	CompoundStatement		7:2:107:126	5231862	3					
ANR	5231901	IdentifierDeclStatement	char c = arg [ src_i ] ;	2068:2:44188:44207	5231862	0	True				
ANR	5231902	IdentifierDecl	c = arg [ src_i ]		5231862	0					
ANR	5231903	IdentifierDeclType	char		5231862	0					
ANR	5231904	Identifier	c		5231862	1					
ANR	5231905	AssignmentExpression	c = arg [ src_i ]		5231862	2		=			
ANR	5231906	Identifier	c		5231862	0					
ANR	5231907	ArrayIndexing	arg [ src_i ]		5231862	1					
ANR	5231908	Identifier	arg		5231862	0					
ANR	5231909	Identifier	src_i		5231862	1					
ANR	5231910	IfStatement	if ( c == '\\\\' )		5231862	1					
ANR	5231911	Condition	c == '\\\\'	2069:6:44215:44223	5231862	0	True				
ANR	5231912	EqualityExpression	c == '\\\\'		5231862	0		==			
ANR	5231913	Identifier	c		5231862	0					
ANR	5231914	PrimaryExpression	'\\\\'		5231862	1					
ANR	5231915	CompoundStatement		8:17:145:145	5231862	1					
ANR	5231916	IfStatement	if ( arg [ ++ src_i ] == '\\0' )		5231862	0					
ANR	5231917	Condition	arg [ ++ src_i ] == '\\0'	2070:7:44235:44254	5231862	0	True				
ANR	5231918	EqualityExpression	arg [ ++ src_i ] == '\\0'		5231862	0		==			
ANR	5231919	ArrayIndexing	arg [ ++ src_i ]		5231862	0					
ANR	5231920	Identifier	arg		5231862	0					
ANR	5231921	UnaryExpression	++ src_i		5231862	1					
ANR	5231922	IncDec	++		5231862	0					
ANR	5231923	Identifier	src_i		5231862	1					
ANR	5231924	PrimaryExpression	'\\0'		5231862	1					
ANR	5231925	CompoundStatement		9:29:176:176	5231862	1					
ANR	5231926	BreakStatement	break ;	2071:4:44263:44268	5231862	0	True				
ANR	5231927	ExpressionStatement	arg [ dest_i ++ ] = arg [ src_i ]	2073:3:44278:44304	5231862	1	True				
ANR	5231928	AssignmentExpression	arg [ dest_i ++ ] = arg [ src_i ]		5231862	0		=			
ANR	5231929	ArrayIndexing	arg [ dest_i ++ ]		5231862	0					
ANR	5231930	Identifier	arg		5231862	0					
ANR	5231931	PostIncDecOperationExpression	dest_i ++		5231862	1					
ANR	5231932	Identifier	dest_i		5231862	0					
ANR	5231933	IncDec	++		5231862	1					
ANR	5231934	ArrayIndexing	arg [ src_i ]		5231862	1					
ANR	5231935	Identifier	arg		5231862	0					
ANR	5231936	Identifier	src_i		5231862	1					
ANR	5231937	ElseStatement	else		5231862	0					
ANR	5231938	CompoundStatement		13:9:234:234	5231862	0					
ANR	5231939	ExpressionStatement	arg [ dest_i ++ ] = c	2075:3:44320:44337	5231862	0	True				
ANR	5231940	AssignmentExpression	arg [ dest_i ++ ] = c		5231862	0		=			
ANR	5231941	ArrayIndexing	arg [ dest_i ++ ]		5231862	0					
ANR	5231942	Identifier	arg		5231862	0					
ANR	5231943	PostIncDecOperationExpression	dest_i ++		5231862	1					
ANR	5231944	Identifier	dest_i		5231862	0					
ANR	5231945	IncDec	++		5231862	1					
ANR	5231946	Identifier	c		5231862	1					
ANR	5231947	ExpressionStatement	arg [ dest_i ] = '\\0'	2078:1:44347:44365	5231862	3	True				
ANR	5231948	AssignmentExpression	arg [ dest_i ] = '\\0'		5231862	0		=			
ANR	5231949	ArrayIndexing	arg [ dest_i ]		5231862	0					
ANR	5231950	Identifier	arg		5231862	0					
ANR	5231951	Identifier	dest_i		5231862	1					
ANR	5231952	PrimaryExpression	'\\0'		5231862	1					
ANR	5231953	ReturnStatement	return dest_i ;	2079:1:44368:44381	5231862	4	True				
ANR	5231954	Identifier	dest_i		5231862	0					
ANR	5231955	ReturnType	R_API int		5231862	1					
ANR	5231956	Identifier	r_str_arg_unescape		5231862	2					
ANR	5231957	ParameterList	char * arg		5231862	3					
ANR	5231958	Parameter	char * arg	2062:29:44069:44077	5231862	0	True				
ANR	5231959	ParameterType	char *		5231862	0					
ANR	5231960	Identifier	arg		5231862	1					
ANR	5231961	CFGEntryNode	ENTRY		5231862		True				
ANR	5231962	CFGExitNode	EXIT		5231862		True				
ANR	5231963	Symbol	* dest_i		5231862						
ANR	5231964	Symbol	* src_i		5231862						
ANR	5231965	Symbol	c		5231862						
ANR	5231966	Symbol	dest_i		5231862						
ANR	5231967	Symbol	arg		5231862						
ANR	5231968	Symbol	src_i		5231862						
ANR	5231969	Symbol	* arg		5231862						
ANR	5231970	Function	r_str_argv	2082:0:44386:47177							
ANR	5231971	FunctionDef	"r_str_argv (const char * cmdline , int * _argc)"		5231970	0					
ANR	5231972	CompoundStatement		2082:57:44443:47177	5231970	0					
ANR	5231973	IdentifierDeclStatement	int argc = 0 ;	2083:1:44446:44458	5231970	0	True				
ANR	5231974	IdentifierDecl	argc = 0		5231970	0					
ANR	5231975	IdentifierDeclType	int		5231970	0					
ANR	5231976	Identifier	argc		5231970	1					
ANR	5231977	AssignmentExpression	argc = 0		5231970	2		=			
ANR	5231978	Identifier	argc		5231970	0					
ANR	5231979	PrimaryExpression	0		5231970	1					
ANR	5231980	IdentifierDeclStatement	int argv_len = 128 ;	2084:1:44461:44479	5231970	1	True				
ANR	5231981	IdentifierDecl	argv_len = 128		5231970	0					
ANR	5231982	IdentifierDeclType	int		5231970	0					
ANR	5231983	Identifier	argv_len		5231970	1					
ANR	5231984	AssignmentExpression	argv_len = 128		5231970	2		=			
ANR	5231985	Identifier	argv_len		5231970	0					
ANR	5231986	PrimaryExpression	128		5231970	1					
ANR	5231987	IdentifierDeclStatement	char * args ;	2085:1:44537:44547	5231970	2	True				
ANR	5231988	IdentifierDecl	* args		5231970	0					
ANR	5231989	IdentifierDeclType	char *		5231970	0					
ANR	5231990	Identifier	args		5231970	1					
ANR	5231991	IdentifierDeclStatement	int cmdline_current = 0 ;	2086:1:44595:44618	5231970	3	True				
ANR	5231992	IdentifierDecl	cmdline_current = 0		5231970	0					
ANR	5231993	IdentifierDeclType	int		5231970	0					
ANR	5231994	Identifier	cmdline_current		5231970	1					
ANR	5231995	AssignmentExpression	cmdline_current = 0		5231970	2		=			
ANR	5231996	Identifier	cmdline_current		5231970	0					
ANR	5231997	PrimaryExpression	0		5231970	1					
ANR	5231998	IdentifierDeclStatement	int args_current = 0 ;	2087:1:44660:44680	5231970	4	True				
ANR	5231999	IdentifierDecl	args_current = 0		5231970	0					
ANR	5232000	IdentifierDeclType	int		5231970	0					
ANR	5232001	Identifier	args_current		5231970	1					
ANR	5232002	AssignmentExpression	args_current = 0		5231970	2		=			
ANR	5232003	Identifier	args_current		5231970	0					
ANR	5232004	PrimaryExpression	0		5231970	1					
ANR	5232005	IdentifierDeclStatement	int arg_begin = 0 ;	2088:1:44719:44736	5231970	5	True				
ANR	5232006	IdentifierDecl	arg_begin = 0		5231970	0					
ANR	5232007	IdentifierDeclType	int		5231970	0					
ANR	5232008	Identifier	arg_begin		5231970	1					
ANR	5232009	AssignmentExpression	arg_begin = 0		5231970	2		=			
ANR	5232010	Identifier	arg_begin		5231970	0					
ANR	5232011	PrimaryExpression	0		5231970	1					
ANR	5232012	IfStatement	if ( ! cmdline || argv_len < 1 )		5231970	6					
ANR	5232013	Condition	! cmdline || argv_len < 1	2090:5:44808:44831	5231970	0	True				
ANR	5232014	OrExpression	! cmdline || argv_len < 1		5231970	0		||			
ANR	5232015	UnaryOperationExpression	! cmdline		5231970	0					
ANR	5232016	UnaryOperator	!		5231970	0					
ANR	5232017	Identifier	cmdline		5231970	1					
ANR	5232018	RelationalExpression	argv_len < 1		5231970	1		<			
ANR	5232019	Identifier	argv_len		5231970	0					
ANR	5232020	PrimaryExpression	1		5231970	1					
ANR	5232021	CompoundStatement		9:31:390:390	5231970	1					
ANR	5232022	ReturnStatement	return NULL ;	2091:2:44838:44849	5231970	0	True				
ANR	5232023	Identifier	NULL		5231970	0					
ANR	5232024	IdentifierDeclStatement	char * * argv = malloc ( argv_len * sizeof ( char * ) ) ;	2094:1:44856:44905	5231970	7	True				
ANR	5232025	IdentifierDecl	* * argv = malloc ( argv_len * sizeof ( char * ) )		5231970	0					
ANR	5232026	IdentifierDeclType	char * *		5231970	0					
ANR	5232027	Identifier	argv		5231970	1					
ANR	5232028	AssignmentExpression	* * argv = malloc ( argv_len * sizeof ( char * ) )		5231970	2		=			
ANR	5232029	Identifier	argv		5231970	0					
ANR	5232030	CallExpression	malloc ( argv_len * sizeof ( char * ) )		5231970	1					
ANR	5232031	Callee	malloc		5231970	0					
ANR	5232032	Identifier	malloc		5231970	0					
ANR	5232033	ArgumentList	argv_len * sizeof ( char * )		5231970	1					
ANR	5232034	Argument	argv_len * sizeof ( char * )		5231970	0					
ANR	5232035	MultiplicativeExpression	argv_len * sizeof ( char * )		5231970	0		*			
ANR	5232036	Identifier	argv_len		5231970	0					
ANR	5232037	SizeofExpression	sizeof ( char * )		5231970	1					
ANR	5232038	Sizeof	sizeof		5231970	0					
ANR	5232039	SizeofOperand	char *		5231970	1					
ANR	5232040	IfStatement	if ( ! argv )		5231970	8					
ANR	5232041	Condition	! argv	2095:5:44912:44916	5231970	0	True				
ANR	5232042	UnaryOperationExpression	! argv		5231970	0					
ANR	5232043	UnaryOperator	!		5231970	0					
ANR	5232044	Identifier	argv		5231970	1					
ANR	5232045	CompoundStatement		14:12:475:475	5231970	1					
ANR	5232046	ReturnStatement	return NULL ;	2096:2:44923:44934	5231970	0	True				
ANR	5232047	Identifier	NULL		5231970	0					
ANR	5232048	ExpressionStatement	args = malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )	2098:1:44940:44994	5231970	9	True				
ANR	5232049	AssignmentExpression	args = malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )		5231970	0		=			
ANR	5232050	Identifier	args		5231970	0					
ANR	5232051	CallExpression	malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )		5231970	1					
ANR	5232052	Callee	malloc		5231970	0					
ANR	5232053	Identifier	malloc		5231970	0					
ANR	5232054	ArgumentList	128 + strlen ( cmdline ) * sizeof ( char )		5231970	1					
ANR	5232055	Argument	128 + strlen ( cmdline ) * sizeof ( char )		5231970	0					
ANR	5232056	AdditiveExpression	128 + strlen ( cmdline ) * sizeof ( char )		5231970	0		+			
ANR	5232057	PrimaryExpression	128		5231970	0					
ANR	5232058	MultiplicativeExpression	strlen ( cmdline ) * sizeof ( char )		5231970	1		*			
ANR	5232059	CallExpression	strlen ( cmdline )		5231970	0					
ANR	5232060	Callee	strlen		5231970	0					
ANR	5232061	Identifier	strlen		5231970	0					
ANR	5232062	ArgumentList	cmdline		5231970	1					
ANR	5232063	Argument	cmdline		5231970	0					
ANR	5232064	Identifier	cmdline		5231970	0					
ANR	5232065	SizeofExpression	sizeof ( char )		5231970	1					
ANR	5232066	Sizeof	sizeof		5231970	0					
ANR	5232067	SizeofOperand	char		5231970	1					
ANR	5232068	IfStatement	if ( ! args )		5231970	10					
ANR	5232069	Condition	! args	2099:5:45071:45075	5231970	0	True				
ANR	5232070	UnaryOperationExpression	! args		5231970	0					
ANR	5232071	UnaryOperator	!		5231970	0					
ANR	5232072	Identifier	args		5231970	1					
ANR	5232073	CompoundStatement		18:12:634:634	5231970	1					
ANR	5232074	ExpressionStatement	free ( argv )	2100:2:45082:45093	5231970	0	True				
ANR	5232075	CallExpression	free ( argv )		5231970	0					
ANR	5232076	Callee	free		5231970	0					
ANR	5232077	Identifier	free		5231970	0					
ANR	5232078	ArgumentList	argv		5231970	1					
ANR	5232079	Argument	argv		5231970	0					
ANR	5232080	Identifier	argv		5231970	0					
ANR	5232081	ReturnStatement	return NULL ;	2101:2:45097:45108	5231970	1	True				
ANR	5232082	Identifier	NULL		5231970	0					
ANR	5232083	DoStatement	do		5231970	11					
ANR	5232084	CompoundStatement		26:2:749:769	5231970	0					
ANR	5232085	IdentifierDeclStatement	int escaped = 0 ;	2105:2:45150:45165	5231970	0	True				
ANR	5232086	IdentifierDecl	escaped = 0		5231970	0					
ANR	5232087	IdentifierDeclType	int		5231970	0					
ANR	5232088	Identifier	escaped		5231970	1					
ANR	5232089	AssignmentExpression	escaped = 0		5231970	2		=			
ANR	5232090	Identifier	escaped		5231970	0					
ANR	5232091	PrimaryExpression	0		5231970	1					
ANR	5232092	IdentifierDeclStatement	int singlequoted = 0 ;	2106:2:45169:45189	5231970	1	True				
ANR	5232093	IdentifierDecl	singlequoted = 0		5231970	0					
ANR	5232094	IdentifierDeclType	int		5231970	0					
ANR	5232095	Identifier	singlequoted		5231970	1					
ANR	5232096	AssignmentExpression	singlequoted = 0		5231970	2		=			
ANR	5232097	Identifier	singlequoted		5231970	0					
ANR	5232098	PrimaryExpression	0		5231970	1					
ANR	5232099	IdentifierDeclStatement	int doublequoted = 0 ;	2107:2:45193:45213	5231970	2	True				
ANR	5232100	IdentifierDecl	doublequoted = 0		5231970	0					
ANR	5232101	IdentifierDeclType	int		5231970	0					
ANR	5232102	Identifier	doublequoted		5231970	1					
ANR	5232103	AssignmentExpression	doublequoted = 0		5231970	2		=			
ANR	5232104	Identifier	doublequoted		5231970	0					
ANR	5232105	PrimaryExpression	0		5231970	1					
ANR	5232106	WhileStatement	while ( cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] ) )		5231970	3					
ANR	5232107	Condition	cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] )	2110:9:45285:45359	5231970	0	True				
ANR	5232108	AndExpression	cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] )		5231970	0		&&			
ANR	5232109	EqualityExpression	cmdline [ cmdline_current ] != '\\0'		5231970	0		!=			
ANR	5232110	ArrayIndexing	cmdline [ cmdline_current ]		5231970	0					
ANR	5232111	Identifier	cmdline		5231970	0					
ANR	5232112	Identifier	cmdline_current		5231970	1					
ANR	5232113	PrimaryExpression	'\\0'		5231970	1					
ANR	5232114	CallExpression	IS_WHITECHAR ( cmdline [ cmdline_current ] )		5231970	1					
ANR	5232115	Callee	IS_WHITECHAR		5231970	0					
ANR	5232116	Identifier	IS_WHITECHAR		5231970	0					
ANR	5232117	ArgumentList	cmdline [ cmdline_current ]		5231970	1					
ANR	5232118	Argument	cmdline [ cmdline_current ]		5231970	0					
ANR	5232119	ArrayIndexing	cmdline [ cmdline_current ]		5231970	0					
ANR	5232120	Identifier	cmdline		5231970	0					
ANR	5232121	Identifier	cmdline_current		5231970	1					
ANR	5232122	CompoundStatement		29:86:918:918	5231970	1					
ANR	5232123	ExpressionStatement	cmdline_current ++	2111:3:45367:45384	5231970	0	True				
ANR	5232124	PostIncDecOperationExpression	cmdline_current ++		5231970	0					
ANR	5232125	Identifier	cmdline_current		5231970	0					
ANR	5232126	IncDec	++		5231970	1					
ANR	5232127	IfStatement	if ( cmdline [ cmdline_current ] == '\\0' )		5231970	4					
ANR	5232128	Condition	cmdline [ cmdline_current ] == '\\0'	2114:6:45397:45428	5231970	0	True				
ANR	5232129	EqualityExpression	cmdline [ cmdline_current ] == '\\0'		5231970	0		==			
ANR	5232130	ArrayIndexing	cmdline [ cmdline_current ]		5231970	0					
ANR	5232131	Identifier	cmdline		5231970	0					
ANR	5232132	Identifier	cmdline_current		5231970	1					
ANR	5232133	PrimaryExpression	'\\0'		5231970	1					
ANR	5232134	CompoundStatement		33:40:987:987	5231970	1					
ANR	5232135	BreakStatement	break ;	2115:3:45436:45441	5231970	0	True				
ANR	5232136	WhileStatement	while ( 1 )		5231970	5					
ANR	5232137	Condition	1	2118:9:45500:45500	5231970	0	True				
ANR	5232138	PrimaryExpression	1		5231970	0					
ANR	5232139	CompoundStatement		39:3:1102:1128	5231970	1					
ANR	5232140	IdentifierDeclStatement	char c = cmdline [ cmdline_current ] ;	2119:3:45508:45541	5231970	0	True				
ANR	5232141	IdentifierDecl	c = cmdline [ cmdline_current ]		5231970	0					
ANR	5232142	IdentifierDeclType	char		5231970	0					
ANR	5232143	Identifier	c		5231970	1					
ANR	5232144	AssignmentExpression	c = cmdline [ cmdline_current ]		5231970	2		=			
ANR	5232145	Identifier	c		5231970	0					
ANR	5232146	ArrayIndexing	cmdline [ cmdline_current ]		5231970	1					
ANR	5232147	Identifier	cmdline		5231970	0					
ANR	5232148	Identifier	cmdline_current		5231970	1					
ANR	5232149	IdentifierDeclStatement	int end_of_current_arg = 0 ;	2120:3:45546:45572	5231970	1	True				
ANR	5232150	IdentifierDecl	end_of_current_arg = 0		5231970	0					
ANR	5232151	IdentifierDeclType	int		5231970	0					
ANR	5232152	Identifier	end_of_current_arg		5231970	1					
ANR	5232153	AssignmentExpression	end_of_current_arg = 0		5231970	2		=			
ANR	5232154	Identifier	end_of_current_arg		5231970	0					
ANR	5232155	PrimaryExpression	0		5231970	1					
ANR	5232156	IfStatement	if ( escaped )		5231970	2					
ANR	5232157	Condition	escaped	2121:7:45581:45587	5231970	0	True				
ANR	5232158	Identifier	escaped		5231970	0					
ANR	5232159	CompoundStatement		40:16:1146:1146	5231970	1					
ANR	5232160	SwitchStatement	switch ( c )		5231970	0					
ANR	5232161	Condition	c	2122:12:45604:45604	5231970	0	True				
ANR	5232162	Identifier	c		5231970	0					
ANR	5232163	CompoundStatement		41:15:1163:1163	5231970	1					
ANR	5232164	Label	case '\\'' :	2123:4:45613:45622	5231970	0	True				
ANR	5232165	Label	"case '""' :"	2124:4:45628:45636	5231970	1	True				
ANR	5232166	Label	case ' ' :	2125:4:45642:45650	5231970	2	True				
ANR	5232167	Label	case '\\\\' :	2126:4:45656:45665	5231970	3	True				
ANR	5232168	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2127:5:45672:45699	5231970	4	True				
ANR	5232169	AssignmentExpression	args [ args_current ++ ] = '\\\\'		5231970	0		=			
ANR	5232170	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232171	Identifier	args		5231970	0					
ANR	5232172	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232173	Identifier	args_current		5231970	0					
ANR	5232174	IncDec	++		5231970	1					
ANR	5232175	PrimaryExpression	'\\\\'		5231970	1					
ANR	5232176	ExpressionStatement	args [ args_current ++ ] = c	2128:5:45706:45730	5231970	5	True				
ANR	5232177	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232178	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232179	Identifier	args		5231970	0					
ANR	5232180	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232181	Identifier	args_current		5231970	0					
ANR	5232182	IncDec	++		5231970	1					
ANR	5232183	Identifier	c		5231970	1					
ANR	5232184	BreakStatement	break ;	2129:5:45737:45742	5231970	6	True				
ANR	5232185	Label	case '\\0' :	2130:4:45748:45757	5231970	7	True				
ANR	5232186	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2131:5:45764:45791	5231970	8	True				
ANR	5232187	AssignmentExpression	args [ args_current ++ ] = '\\\\'		5231970	0		=			
ANR	5232188	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232189	Identifier	args		5231970	0					
ANR	5232190	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232191	Identifier	args_current		5231970	0					
ANR	5232192	IncDec	++		5231970	1					
ANR	5232193	PrimaryExpression	'\\\\'		5231970	1					
ANR	5232194	ExpressionStatement	end_of_current_arg = 1	2132:5:45798:45820	5231970	9	True				
ANR	5232195	AssignmentExpression	end_of_current_arg = 1		5231970	0		=			
ANR	5232196	Identifier	end_of_current_arg		5231970	0					
ANR	5232197	PrimaryExpression	1		5231970	1					
ANR	5232198	BreakStatement	break ;	2133:5:45827:45832	5231970	10	True				
ANR	5232199	Label	default :	2134:4:45838:45845	5231970	11	True				
ANR	5232200	Identifier	default		5231970	0					
ANR	5232201	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2135:5:45852:45879	5231970	12	True				
ANR	5232202	AssignmentExpression	args [ args_current ++ ] = '\\\\'		5231970	0		=			
ANR	5232203	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232204	Identifier	args		5231970	0					
ANR	5232205	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232206	Identifier	args_current		5231970	0					
ANR	5232207	IncDec	++		5231970	1					
ANR	5232208	PrimaryExpression	'\\\\'		5231970	1					
ANR	5232209	ExpressionStatement	args [ args_current ++ ] = c	2136:5:45886:45910	5231970	13	True				
ANR	5232210	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232211	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232212	Identifier	args		5231970	0					
ANR	5232213	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232214	Identifier	args_current		5231970	0					
ANR	5232215	IncDec	++		5231970	1					
ANR	5232216	Identifier	c		5231970	1					
ANR	5232217	ExpressionStatement	escaped = 0	2138:4:45922:45933	5231970	1	True				
ANR	5232218	AssignmentExpression	escaped = 0		5231970	0		=			
ANR	5232219	Identifier	escaped		5231970	0					
ANR	5232220	PrimaryExpression	0		5231970	1					
ANR	5232221	ElseStatement	else		5231970	0					
ANR	5232222	CompoundStatement		58:10:1501:1501	5231970	0					
ANR	5232223	SwitchStatement	switch ( c )		5231970	0					
ANR	5232224	Condition	c	2140:12:45959:45959	5231970	0	True				
ANR	5232225	Identifier	c		5231970	0					
ANR	5232226	CompoundStatement		59:15:1518:1518	5231970	1					
ANR	5232227	Label	case '\\'' :	2141:4:45968:45977	5231970	0	True				
ANR	5232228	IfStatement	if ( doublequoted )		5231970	1					
ANR	5232229	Condition	doublequoted	2142:9:45988:45999	5231970	0	True				
ANR	5232230	Identifier	doublequoted		5231970	0					
ANR	5232231	CompoundStatement		61:23:1558:1558	5231970	1					
ANR	5232232	ExpressionStatement	args [ args_current ++ ] = c	2143:6:46010:46034	5231970	0	True				
ANR	5232233	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232234	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232235	Identifier	args		5231970	0					
ANR	5232236	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232237	Identifier	args_current		5231970	0					
ANR	5232238	IncDec	++		5231970	1					
ANR	5232239	Identifier	c		5231970	1					
ANR	5232240	ElseStatement	else		5231970	0					
ANR	5232241	CompoundStatement		63:12:1604:1604	5231970	0					
ANR	5232242	ExpressionStatement	singlequoted = ! singlequoted	2145:6:46056:46084	5231970	0	True				
ANR	5232243	AssignmentExpression	singlequoted = ! singlequoted		5231970	0		=			
ANR	5232244	Identifier	singlequoted		5231970	0					
ANR	5232245	UnaryOperationExpression	! singlequoted		5231970	1					
ANR	5232246	UnaryOperator	!		5231970	0					
ANR	5232247	Identifier	singlequoted		5231970	1					
ANR	5232248	BreakStatement	break ;	2147:5:46098:46103	5231970	2	True				
ANR	5232249	Label	"case '""' :"	2148:4:46109:46117	5231970	3	True				
ANR	5232250	IfStatement	if ( singlequoted )		5231970	4					
ANR	5232251	Condition	singlequoted	2149:9:46128:46139	5231970	0	True				
ANR	5232252	Identifier	singlequoted		5231970	0					
ANR	5232253	CompoundStatement		68:23:1698:1698	5231970	1					
ANR	5232254	ExpressionStatement	args [ args_current ++ ] = c	2150:6:46150:46174	5231970	0	True				
ANR	5232255	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232256	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232257	Identifier	args		5231970	0					
ANR	5232258	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232259	Identifier	args_current		5231970	0					
ANR	5232260	IncDec	++		5231970	1					
ANR	5232261	Identifier	c		5231970	1					
ANR	5232262	ElseStatement	else		5231970	0					
ANR	5232263	CompoundStatement		70:12:1744:1744	5231970	0					
ANR	5232264	ExpressionStatement	doublequoted = ! doublequoted	2152:6:46196:46224	5231970	0	True				
ANR	5232265	AssignmentExpression	doublequoted = ! doublequoted		5231970	0		=			
ANR	5232266	Identifier	doublequoted		5231970	0					
ANR	5232267	UnaryOperationExpression	! doublequoted		5231970	1					
ANR	5232268	UnaryOperator	!		5231970	0					
ANR	5232269	Identifier	doublequoted		5231970	1					
ANR	5232270	BreakStatement	break ;	2154:5:46238:46243	5231970	5	True				
ANR	5232271	Label	case '\\\\' :	2155:4:46249:46258	5231970	6	True				
ANR	5232272	ExpressionStatement	escaped = 1	2156:5:46265:46276	5231970	7	True				
ANR	5232273	AssignmentExpression	escaped = 1		5231970	0		=			
ANR	5232274	Identifier	escaped		5231970	0					
ANR	5232275	PrimaryExpression	1		5231970	1					
ANR	5232276	BreakStatement	break ;	2157:5:46283:46288	5231970	8	True				
ANR	5232277	Label	case ' ' :	2158:4:46294:46302	5231970	9	True				
ANR	5232278	IfStatement	if ( singlequoted || doublequoted )		5231970	10					
ANR	5232279	Condition	singlequoted || doublequoted	2159:9:46313:46340	5231970	0	True				
ANR	5232280	OrExpression	singlequoted || doublequoted		5231970	0		||			
ANR	5232281	Identifier	singlequoted		5231970	0					
ANR	5232282	Identifier	doublequoted		5231970	1					
ANR	5232283	CompoundStatement		78:39:1899:1899	5231970	1					
ANR	5232284	ExpressionStatement	args [ args_current ++ ] = c	2160:6:46351:46375	5231970	0	True				
ANR	5232285	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232286	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232287	Identifier	args		5231970	0					
ANR	5232288	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232289	Identifier	args_current		5231970	0					
ANR	5232290	IncDec	++		5231970	1					
ANR	5232291	Identifier	c		5231970	1					
ANR	5232292	ElseStatement	else		5231970	0					
ANR	5232293	CompoundStatement		80:12:1945:1945	5231970	0					
ANR	5232294	ExpressionStatement	end_of_current_arg = 1	2162:6:46397:46419	5231970	0	True				
ANR	5232295	AssignmentExpression	end_of_current_arg = 1		5231970	0		=			
ANR	5232296	Identifier	end_of_current_arg		5231970	0					
ANR	5232297	PrimaryExpression	1		5231970	1					
ANR	5232298	BreakStatement	break ;	2164:5:46433:46438	5231970	11	True				
ANR	5232299	Label	case '\\0' :	2165:4:46444:46453	5231970	12	True				
ANR	5232300	ExpressionStatement	end_of_current_arg = 1	2166:5:46460:46482	5231970	13	True				
ANR	5232301	AssignmentExpression	end_of_current_arg = 1		5231970	0		=			
ANR	5232302	Identifier	end_of_current_arg		5231970	0					
ANR	5232303	PrimaryExpression	1		5231970	1					
ANR	5232304	BreakStatement	break ;	2167:5:46489:46494	5231970	14	True				
ANR	5232305	Label	default :	2168:4:46500:46507	5231970	15	True				
ANR	5232306	Identifier	default		5231970	0					
ANR	5232307	ExpressionStatement	args [ args_current ++ ] = c	2169:5:46514:46538	5231970	16	True				
ANR	5232308	AssignmentExpression	args [ args_current ++ ] = c		5231970	0		=			
ANR	5232309	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232310	Identifier	args		5231970	0					
ANR	5232311	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232312	Identifier	args_current		5231970	0					
ANR	5232313	IncDec	++		5231970	1					
ANR	5232314	Identifier	c		5231970	1					
ANR	5232315	IfStatement	if ( end_of_current_arg )		5231970	3					
ANR	5232316	Condition	end_of_current_arg	2172:7:46558:46575	5231970	0	True				
ANR	5232317	Identifier	end_of_current_arg		5231970	0					
ANR	5232318	CompoundStatement		91:27:2134:2134	5231970	1					
ANR	5232319	BreakStatement	break ;	2173:4:46584:46589	5231970	0	True				
ANR	5232320	ExpressionStatement	cmdline_current ++	2175:3:46599:46616	5231970	4	True				
ANR	5232321	PostIncDecOperationExpression	cmdline_current ++		5231970	0					
ANR	5232322	Identifier	cmdline_current		5231970	0					
ANR	5232323	IncDec	++		5231970	1					
ANR	5232324	ExpressionStatement	args [ args_current ++ ] = '\\0'	2177:2:46624:46651	5231970	6	True				
ANR	5232325	AssignmentExpression	args [ args_current ++ ] = '\\0'		5231970	0		=			
ANR	5232326	ArrayIndexing	args [ args_current ++ ]		5231970	0					
ANR	5232327	Identifier	args		5231970	0					
ANR	5232328	PostIncDecOperationExpression	args_current ++		5231970	1					
ANR	5232329	Identifier	args_current		5231970	0					
ANR	5232330	IncDec	++		5231970	1					
ANR	5232331	PrimaryExpression	'\\0'		5231970	1					
ANR	5232332	ExpressionStatement	argv [ argc ++ ] = strdup ( & args [ arg_begin ] )	2178:2:46655:46695	5231970	7	True				
ANR	5232333	AssignmentExpression	argv [ argc ++ ] = strdup ( & args [ arg_begin ] )		5231970	0		=			
ANR	5232334	ArrayIndexing	argv [ argc ++ ]		5231970	0					
ANR	5232335	Identifier	argv		5231970	0					
ANR	5232336	PostIncDecOperationExpression	argc ++		5231970	1					
ANR	5232337	Identifier	argc		5231970	0					
ANR	5232338	IncDec	++		5231970	1					
ANR	5232339	CallExpression	strdup ( & args [ arg_begin ] )		5231970	1					
ANR	5232340	Callee	strdup		5231970	0					
ANR	5232341	Identifier	strdup		5231970	0					
ANR	5232342	ArgumentList	& args [ arg_begin ]		5231970	1					
ANR	5232343	Argument	& args [ arg_begin ]		5231970	0					
ANR	5232344	UnaryOperationExpression	& args [ arg_begin ]		5231970	0					
ANR	5232345	UnaryOperator	&		5231970	0					
ANR	5232346	ArrayIndexing	args [ arg_begin ]		5231970	1					
ANR	5232347	Identifier	args		5231970	0					
ANR	5232348	Identifier	arg_begin		5231970	1					
ANR	5232349	IfStatement	if ( argc >= argv_len )		5231970	8					
ANR	5232350	Condition	argc >= argv_len	2179:6:46703:46718	5231970	0	True				
ANR	5232351	RelationalExpression	argc >= argv_len		5231970	0		>=			
ANR	5232352	Identifier	argc		5231970	0					
ANR	5232353	Identifier	argv_len		5231970	1					
ANR	5232354	CompoundStatement		100:3:2300:2355	5231970	1					
ANR	5232355	ExpressionStatement	argv_len *= 2	2180:3:46726:46739	5231970	0	True				
ANR	5232356	AssignmentExpression	argv_len *= 2		5231970	0		*=			
ANR	5232357	Identifier	argv_len		5231970	0					
ANR	5232358	PrimaryExpression	2		5231970	1					
ANR	5232359	IdentifierDeclStatement	"char * * tmp = realloc ( argv , argv_len * sizeof ( char * ) ) ;"	2181:3:46744:46799	5231970	1	True				
ANR	5232360	IdentifierDecl	"* * tmp = realloc ( argv , argv_len * sizeof ( char * ) )"		5231970	0					
ANR	5232361	IdentifierDeclType	char * *		5231970	0					
ANR	5232362	Identifier	tmp		5231970	1					
ANR	5232363	AssignmentExpression	"* * tmp = realloc ( argv , argv_len * sizeof ( char * ) )"		5231970	2		=			
ANR	5232364	Identifier	tmp		5231970	0					
ANR	5232365	CallExpression	"realloc ( argv , argv_len * sizeof ( char * ) )"		5231970	1					
ANR	5232366	Callee	realloc		5231970	0					
ANR	5232367	Identifier	realloc		5231970	0					
ANR	5232368	ArgumentList	argv		5231970	1					
ANR	5232369	Argument	argv		5231970	0					
ANR	5232370	Identifier	argv		5231970	0					
ANR	5232371	Argument	argv_len * sizeof ( char * )		5231970	1					
ANR	5232372	MultiplicativeExpression	argv_len * sizeof ( char * )		5231970	0		*			
ANR	5232373	Identifier	argv_len		5231970	0					
ANR	5232374	SizeofExpression	sizeof ( char * )		5231970	1					
ANR	5232375	Sizeof	sizeof		5231970	0					
ANR	5232376	SizeofOperand	char *		5231970	1					
ANR	5232377	IfStatement	if ( ! tmp )		5231970	2					
ANR	5232378	Condition	! tmp	2182:7:46808:46811	5231970	0	True				
ANR	5232379	UnaryOperationExpression	! tmp		5231970	0					
ANR	5232380	UnaryOperator	!		5231970	0					
ANR	5232381	Identifier	tmp		5231970	1					
ANR	5232382	CompoundStatement		101:13:2370:2370	5231970	1					
ANR	5232383	ExpressionStatement	free ( args )	2183:4:46820:46831	5231970	0	True				
ANR	5232384	CallExpression	free ( args )		5231970	0					
ANR	5232385	Callee	free		5231970	0					
ANR	5232386	Identifier	free		5231970	0					
ANR	5232387	ArgumentList	args		5231970	1					
ANR	5232388	Argument	args		5231970	0					
ANR	5232389	Identifier	args		5231970	0					
ANR	5232390	ExpressionStatement	free ( argv )	2184:4:46837:46848	5231970	1	True				
ANR	5232391	CallExpression	free ( argv )		5231970	0					
ANR	5232392	Callee	free		5231970	0					
ANR	5232393	Identifier	free		5231970	0					
ANR	5232394	ArgumentList	argv		5231970	1					
ANR	5232395	Argument	argv		5231970	0					
ANR	5232396	Identifier	argv		5231970	0					
ANR	5232397	ReturnStatement	return NULL ;	2185:4:46854:46865	5231970	2	True				
ANR	5232398	Identifier	NULL		5231970	0					
ANR	5232399	ExpressionStatement	argv = tmp	2187:3:46875:46885	5231970	3	True				
ANR	5232400	AssignmentExpression	argv = tmp		5231970	0		=			
ANR	5232401	Identifier	argv		5231970	0					
ANR	5232402	Identifier	tmp		5231970	1					
ANR	5232403	ExpressionStatement	arg_begin = args_current	2189:2:46893:46917	5231970	9	True				
ANR	5232404	AssignmentExpression	arg_begin = args_current		5231970	0		=			
ANR	5232405	Identifier	arg_begin		5231970	0					
ANR	5232406	Identifier	args_current		5231970	1					
ANR	5232407	Condition	cmdline [ cmdline_current ++ ] != '\\0'	2190:10:46929:46962	5231970	1	True				
ANR	5232408	EqualityExpression	cmdline [ cmdline_current ++ ] != '\\0'		5231970	0		!=			
ANR	5232409	ArrayIndexing	cmdline [ cmdline_current ++ ]		5231970	0					
ANR	5232410	Identifier	cmdline		5231970	0					
ANR	5232411	PostIncDecOperationExpression	cmdline_current ++		5231970	1					
ANR	5232412	Identifier	cmdline_current		5231970	0					
ANR	5232413	IncDec	++		5231970	1					
ANR	5232414	PrimaryExpression	'\\0'		5231970	1					
ANR	5232415	ExpressionStatement	argv [ argc ] = NULL	2191:1:46967:46984	5231970	12	True				
ANR	5232416	AssignmentExpression	argv [ argc ] = NULL		5231970	0		=			
ANR	5232417	ArrayIndexing	argv [ argc ]		5231970	0					
ANR	5232418	Identifier	argv		5231970	0					
ANR	5232419	Identifier	argc		5231970	1					
ANR	5232420	Identifier	NULL		5231970	1					
ANR	5232421	IdentifierDeclStatement	"char * * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) ) ;"	2192:1:46987:47044	5231970	13	True				
ANR	5232422	IdentifierDecl	"* * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		5231970	0					
ANR	5232423	IdentifierDeclType	char * *		5231970	0					
ANR	5232424	Identifier	tmp		5231970	1					
ANR	5232425	AssignmentExpression	"* * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		5231970	2		=			
ANR	5232426	Identifier	tmp		5231970	0					
ANR	5232427	CallExpression	"realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		5231970	1					
ANR	5232428	Callee	realloc		5231970	0					
ANR	5232429	Identifier	realloc		5231970	0					
ANR	5232430	ArgumentList	argv		5231970	1					
ANR	5232431	Argument	argv		5231970	0					
ANR	5232432	Identifier	argv		5231970	0					
ANR	5232433	Argument	( argc + 1 ) * sizeof ( char * )		5231970	1					
ANR	5232434	MultiplicativeExpression	( argc + 1 ) * sizeof ( char * )		5231970	0		*			
ANR	5232435	AdditiveExpression	argc + 1		5231970	0		+			
ANR	5232436	Identifier	argc		5231970	0					
ANR	5232437	PrimaryExpression	1		5231970	1					
ANR	5232438	SizeofExpression	sizeof ( char * )		5231970	1					
ANR	5232439	Sizeof	sizeof		5231970	0					
ANR	5232440	SizeofOperand	char *		5231970	1					
ANR	5232441	IfStatement	if ( tmp )		5231970	14					
ANR	5232442	Condition	tmp	2193:5:47051:47053	5231970	0	True				
ANR	5232443	Identifier	tmp		5231970	0					
ANR	5232444	CompoundStatement		112:10:2612:2612	5231970	1					
ANR	5232445	ExpressionStatement	argv = tmp	2194:2:47060:47070	5231970	0	True				
ANR	5232446	AssignmentExpression	argv = tmp		5231970	0		=			
ANR	5232447	Identifier	argv		5231970	0					
ANR	5232448	Identifier	tmp		5231970	1					
ANR	5232449	ElseStatement	else		5231970	0					
ANR	5232450	CompoundStatement		114:8:2636:2636	5231970	0					
ANR	5232451	ExpressionStatement	free ( argv )	2196:2:47084:47095	5231970	0	True				
ANR	5232452	CallExpression	free ( argv )		5231970	0					
ANR	5232453	Callee	free		5231970	0					
ANR	5232454	Identifier	free		5231970	0					
ANR	5232455	ArgumentList	argv		5231970	1					
ANR	5232456	Argument	argv		5231970	0					
ANR	5232457	Identifier	argv		5231970	0					
ANR	5232458	ExpressionStatement	argv = NULL	2197:2:47099:47110	5231970	1	True				
ANR	5232459	AssignmentExpression	argv = NULL		5231970	0		=			
ANR	5232460	Identifier	argv		5231970	0					
ANR	5232461	Identifier	NULL		5231970	1					
ANR	5232462	IfStatement	if ( _argc )		5231970	15					
ANR	5232463	Condition	_argc	2199:5:47120:47124	5231970	0	True				
ANR	5232464	Identifier	_argc		5231970	0					
ANR	5232465	CompoundStatement		118:12:2683:2683	5231970	1					
ANR	5232466	ExpressionStatement	* _argc = argc	2200:2:47131:47144	5231970	0	True				
ANR	5232467	AssignmentExpression	* _argc = argc		5231970	0		=			
ANR	5232468	UnaryOperationExpression	* _argc		5231970	0					
ANR	5232469	UnaryOperator	*		5231970	0					
ANR	5232470	Identifier	_argc		5231970	1					
ANR	5232471	Identifier	argc		5231970	1					
ANR	5232472	ExpressionStatement	free ( args )	2202:1:47150:47161	5231970	16	True				
ANR	5232473	CallExpression	free ( args )		5231970	0					
ANR	5232474	Callee	free		5231970	0					
ANR	5232475	Identifier	free		5231970	0					
ANR	5232476	ArgumentList	args		5231970	1					
ANR	5232477	Argument	args		5231970	0					
ANR	5232478	Identifier	args		5231970	0					
ANR	5232479	ReturnStatement	return argv ;	2203:1:47164:47175	5231970	17	True				
ANR	5232480	Identifier	argv		5231970	0					
ANR	5232481	ReturnType	R_API char * *		5231970	1					
ANR	5232482	Identifier	r_str_argv		5231970	2					
ANR	5232483	ParameterList	"const char * cmdline , int * _argc"		5231970	3					
ANR	5232484	Parameter	const char * cmdline	2082:24:44410:44428	5231970	0	True				
ANR	5232485	ParameterType	const char *		5231970	0					
ANR	5232486	Identifier	cmdline		5231970	1					
ANR	5232487	Parameter	int * _argc	2082:45:44431:44440	5231970	1	True				
ANR	5232488	ParameterType	int *		5231970	0					
ANR	5232489	Identifier	_argc		5231970	1					
ANR	5232490	CFGEntryNode	ENTRY		5231970		True				
ANR	5232491	CFGExitNode	EXIT		5231970		True				
ANR	5232492	Symbol	_argc		5231970						
ANR	5232493	Symbol	IS_WHITECHAR		5231970						
ANR	5232494	Symbol	arg_begin		5231970						
ANR	5232495	Symbol	* argv		5231970						
ANR	5232496	Symbol	realloc		5231970						
ANR	5232497	Symbol	argv		5231970						
ANR	5232498	Symbol	singlequoted		5231970						
ANR	5232499	Symbol	* args		5231970						
ANR	5232500	Symbol	strlen		5231970						
ANR	5232501	Symbol	cmdline		5231970						
ANR	5232502	Symbol	end_of_current_arg		5231970						
ANR	5232503	Symbol	tmp		5231970						
ANR	5232504	Symbol	* argc		5231970						
ANR	5232505	Symbol	argc		5231970						
ANR	5232506	Symbol	malloc		5231970						
ANR	5232507	Symbol	NULL		5231970						
ANR	5232508	Symbol	c		5231970						
ANR	5232509	Symbol	* cmdline		5231970						
ANR	5232510	Symbol	doublequoted		5231970						
ANR	5232511	Symbol	cmdline_current		5231970						
ANR	5232512	Symbol	* cmdline_current		5231970						
ANR	5232513	Symbol	args		5231970						
ANR	5232514	Symbol	escaped		5231970						
ANR	5232515	Symbol	argv_len		5231970						
ANR	5232516	Symbol	args_current		5231970						
ANR	5232517	Symbol	strdup		5231970						
ANR	5232518	Symbol	* _argc		5231970						
ANR	5232519	Function	r_str_argv_free	2206:0:47180:47326							
ANR	5232520	FunctionDef	r_str_argv_free (char * * argv)		5232519	0					
ANR	5232521	CompoundStatement		2206:40:47220:47326	5232519	0					
ANR	5232522	IdentifierDeclStatement	int argc = 0 ;	2207:1:47223:47235	5232519	0	True				
ANR	5232523	IdentifierDecl	argc = 0		5232519	0					
ANR	5232524	IdentifierDeclType	int		5232519	0					
ANR	5232525	Identifier	argc		5232519	1					
ANR	5232526	AssignmentExpression	argc = 0		5232519	2		=			
ANR	5232527	Identifier	argc		5232519	0					
ANR	5232528	PrimaryExpression	0		5232519	1					
ANR	5232529	IfStatement	if ( ! argv )		5232519	1					
ANR	5232530	Condition	! argv	2208:5:47242:47246	5232519	0	True				
ANR	5232531	UnaryOperationExpression	! argv		5232519	0					
ANR	5232532	UnaryOperator	!		5232519	0					
ANR	5232533	Identifier	argv		5232519	1					
ANR	5232534	CompoundStatement		3:12:28:28	5232519	1					
ANR	5232535	ReturnStatement	return ;	2209:2:47253:47259	5232519	0	True				
ANR	5232536	WhileStatement	while ( argv [ argc ] )		5232519	2					
ANR	5232537	Condition	argv [ argc ]	2211:8:47272:47281	5232519	0	True				
ANR	5232538	ArrayIndexing	argv [ argc ]		5232519	0					
ANR	5232539	Identifier	argv		5232519	0					
ANR	5232540	Identifier	argc		5232519	1					
ANR	5232541	CompoundStatement		6:20:63:63	5232519	1					
ANR	5232542	ExpressionStatement	free ( argv [ argc ++ ] )	2212:2:47288:47307	5232519	0	True				
ANR	5232543	CallExpression	free ( argv [ argc ++ ] )		5232519	0					
ANR	5232544	Callee	free		5232519	0					
ANR	5232545	Identifier	free		5232519	0					
ANR	5232546	ArgumentList	argv [ argc ++ ]		5232519	1					
ANR	5232547	Argument	argv [ argc ++ ]		5232519	0					
ANR	5232548	ArrayIndexing	argv [ argc ++ ]		5232519	0					
ANR	5232549	Identifier	argv		5232519	0					
ANR	5232550	PostIncDecOperationExpression	argc ++		5232519	1					
ANR	5232551	Identifier	argc		5232519	0					
ANR	5232552	IncDec	++		5232519	1					
ANR	5232553	ExpressionStatement	free ( argv )	2214:1:47313:47324	5232519	3	True				
ANR	5232554	CallExpression	free ( argv )		5232519	0					
ANR	5232555	Callee	free		5232519	0					
ANR	5232556	Identifier	free		5232519	0					
ANR	5232557	ArgumentList	argv		5232519	1					
ANR	5232558	Argument	argv		5232519	0					
ANR	5232559	Identifier	argv		5232519	0					
ANR	5232560	ReturnType	R_API void		5232519	1					
ANR	5232561	Identifier	r_str_argv_free		5232519	2					
ANR	5232562	ParameterList	char * * argv		5232519	3					
ANR	5232563	Parameter	char * * argv	2206:27:47207:47217	5232519	0	True				
ANR	5232564	ParameterType	char * *		5232519	0					
ANR	5232565	Identifier	argv		5232519	1					
ANR	5232566	CFGEntryNode	ENTRY		5232519		True				
ANR	5232567	CFGExitNode	EXIT		5232519		True				
ANR	5232568	Symbol	argc		5232519						
ANR	5232569	Symbol	* argv		5232519						
ANR	5232570	Symbol	argv		5232519						
ANR	5232571	Symbol	* argc		5232519						
ANR	5232572	Function	r_str_firstbut	2217:6:47335:47853							
ANR	5232573	FunctionDef	"r_str_firstbut (const char * s , char ch , const char * but)"		5232572	0					
ANR	5232574	CompoundStatement		2217:74:47403:47853	5232572	0					
ANR	5232575	IdentifierDeclStatement	"int idx , _b = 0 ;"	2218:1:47406:47421	5232572	0	True				
ANR	5232576	IdentifierDecl	idx		5232572	0					
ANR	5232577	IdentifierDeclType	int		5232572	0					
ANR	5232578	Identifier	idx		5232572	1					
ANR	5232579	IdentifierDecl	_b = 0		5232572	1					
ANR	5232580	IdentifierDeclType	int		5232572	0					
ANR	5232581	Identifier	_b		5232572	1					
ANR	5232582	AssignmentExpression	_b = 0		5232572	2		=			
ANR	5232583	Identifier	_b		5232572	0					
ANR	5232584	PrimaryExpression	0		5232572	1					
ANR	5232585	IdentifierDeclStatement	ut8 * b = ( ut8 * ) & _b ;	2219:1:47424:47442	5232572	1	True				
ANR	5232586	IdentifierDecl	* b = ( ut8 * ) & _b		5232572	0					
ANR	5232587	IdentifierDeclType	ut8 *		5232572	0					
ANR	5232588	Identifier	b		5232572	1					
ANR	5232589	AssignmentExpression	* b = ( ut8 * ) & _b		5232572	2		=			
ANR	5232590	Identifier	b		5232572	0					
ANR	5232591	CastExpression	( ut8 * ) & _b		5232572	1					
ANR	5232592	CastTarget	ut8 *		5232572	0					
ANR	5232593	UnaryOperationExpression	& _b		5232572	1					
ANR	5232594	UnaryOperator	&		5232572	0					
ANR	5232595	Identifier	_b		5232572	1					
ANR	5232596	IdentifierDeclStatement	"const char * isbut , * p ;"	2220:1:47445:47466	5232572	2	True				
ANR	5232597	IdentifierDecl	* isbut		5232572	0					
ANR	5232598	IdentifierDeclType	const char *		5232572	0					
ANR	5232599	Identifier	isbut		5232572	1					
ANR	5232600	IdentifierDecl	* p		5232572	1					
ANR	5232601	IdentifierDeclType	const char *		5232572	0					
ANR	5232602	Identifier	p		5232572	1					
ANR	5232603	IdentifierDeclStatement	const int bsz = sizeof ( _b ) * 8 ;	2221:1:47469:47500	5232572	3	True				
ANR	5232604	IdentifierDecl	bsz = sizeof ( _b ) * 8		5232572	0					
ANR	5232605	IdentifierDeclType	const int		5232572	0					
ANR	5232606	Identifier	bsz		5232572	1					
ANR	5232607	AssignmentExpression	bsz = sizeof ( _b ) * 8		5232572	2		=			
ANR	5232608	Identifier	bsz		5232572	0					
ANR	5232609	MultiplicativeExpression	sizeof ( _b ) * 8		5232572	1		*			
ANR	5232610	SizeofExpression	sizeof ( _b )		5232572	0					
ANR	5232611	Sizeof	sizeof		5232572	0					
ANR	5232612	SizeofOperand	_b		5232572	1					
ANR	5232613	PrimaryExpression	8		5232572	1					
ANR	5232614	IfStatement	if ( ! but )		5232572	4					
ANR	5232615	Condition	! but	2222:5:47507:47510	5232572	0	True				
ANR	5232616	UnaryOperationExpression	! but		5232572	0					
ANR	5232617	UnaryOperator	!		5232572	0					
ANR	5232618	Identifier	but		5232572	1					
ANR	5232619	CompoundStatement		6:11:109:109	5232572	1					
ANR	5232620	ReturnStatement	"return strchr ( s , ch ) ;"	2223:2:47517:47538	5232572	0	True				
ANR	5232621	CallExpression	"strchr ( s , ch )"		5232572	0					
ANR	5232622	Callee	strchr		5232572	0					
ANR	5232623	Identifier	strchr		5232572	0					
ANR	5232624	ArgumentList	s		5232572	1					
ANR	5232625	Argument	s		5232572	0					
ANR	5232626	Identifier	s		5232572	0					
ANR	5232627	Argument	ch		5232572	1					
ANR	5232628	Identifier	ch		5232572	0					
ANR	5232629	IfStatement	if ( strlen ( but ) >= bsz )		5232572	5					
ANR	5232630	Condition	strlen ( but ) >= bsz	2225:5:47548:47566	5232572	0	True				
ANR	5232631	RelationalExpression	strlen ( but ) >= bsz		5232572	0		>=			
ANR	5232632	CallExpression	strlen ( but )		5232572	0					
ANR	5232633	Callee	strlen		5232572	0					
ANR	5232634	Identifier	strlen		5232572	0					
ANR	5232635	ArgumentList	but		5232572	1					
ANR	5232636	Argument	but		5232572	0					
ANR	5232637	Identifier	but		5232572	0					
ANR	5232638	Identifier	bsz		5232572	1					
ANR	5232639	CompoundStatement		9:26:165:165	5232572	1					
ANR	5232640	ExpressionStatement	"eprintf ( ""r_str_firstbut: but string too long\\n"" )"	2226:2:47573:47622	5232572	0	True				
ANR	5232641	CallExpression	"eprintf ( ""r_str_firstbut: but string too long\\n"" )"		5232572	0					
ANR	5232642	Callee	eprintf		5232572	0					
ANR	5232643	Identifier	eprintf		5232572	0					
ANR	5232644	ArgumentList	"""r_str_firstbut: but string too long\\n"""		5232572	1					
ANR	5232645	Argument	"""r_str_firstbut: but string too long\\n"""		5232572	0					
ANR	5232646	PrimaryExpression	"""r_str_firstbut: but string too long\\n"""		5232572	0					
ANR	5232647	ReturnStatement	return NULL ;	2227:2:47626:47637	5232572	1	True				
ANR	5232648	Identifier	NULL		5232572	0					
ANR	5232649	ForStatement	for ( p = s ; * p ; p ++ )		5232572	6					
ANR	5232650	ForInit	p = s ;	2229:6:47648:47653	5232572	0	True				
ANR	5232651	AssignmentExpression	p = s		5232572	0		=			
ANR	5232652	Identifier	p		5232572	0					
ANR	5232653	Identifier	s		5232572	1					
ANR	5232654	Condition	* p	2229:13:47655:47656	5232572	1	True				
ANR	5232655	UnaryOperationExpression	* p		5232572	0					
ANR	5232656	UnaryOperator	*		5232572	0					
ANR	5232657	Identifier	p		5232572	1					
ANR	5232658	PostIncDecOperationExpression	p ++	2229:17:47659:47661	5232572	2	True				
ANR	5232659	Identifier	p		5232572	0					
ANR	5232660	IncDec	++		5232572	1					
ANR	5232661	CompoundStatement		13:22:260:260	5232572	3					
ANR	5232662	ExpressionStatement	"isbut = strchr ( but , * p )"	2230:2:47668:47692	5232572	0	True				
ANR	5232663	AssignmentExpression	"isbut = strchr ( but , * p )"		5232572	0		=			
ANR	5232664	Identifier	isbut		5232572	0					
ANR	5232665	CallExpression	"strchr ( but , * p )"		5232572	1					
ANR	5232666	Callee	strchr		5232572	0					
ANR	5232667	Identifier	strchr		5232572	0					
ANR	5232668	ArgumentList	but		5232572	1					
ANR	5232669	Argument	but		5232572	0					
ANR	5232670	Identifier	but		5232572	0					
ANR	5232671	Argument	* p		5232572	1					
ANR	5232672	UnaryOperationExpression	* p		5232572	0					
ANR	5232673	UnaryOperator	*		5232572	0					
ANR	5232674	Identifier	p		5232572	1					
ANR	5232675	IfStatement	if ( isbut )		5232572	1					
ANR	5232676	Condition	isbut	2231:6:47700:47704	5232572	0	True				
ANR	5232677	Identifier	isbut		5232572	0					
ANR	5232678	CompoundStatement		15:13:303:303	5232572	1					
ANR	5232679	ExpressionStatement	idx = ( int ) ( size_t ) ( isbut - but )	2232:3:47712:47744	5232572	0	True				
ANR	5232680	AssignmentExpression	idx = ( int ) ( size_t ) ( isbut - but )		5232572	0		=			
ANR	5232681	Identifier	idx		5232572	0					
ANR	5232682	CastExpression	( int ) ( size_t ) ( isbut - but )		5232572	1					
ANR	5232683	CastTarget	int		5232572	0					
ANR	5232684	CastExpression	( size_t ) ( isbut - but )		5232572	1					
ANR	5232685	CastTarget	size_t		5232572	0					
ANR	5232686	AdditiveExpression	isbut - but		5232572	1		-			
ANR	5232687	Identifier	isbut		5232572	0					
ANR	5232688	Identifier	but		5232572	1					
ANR	5232689	ExpressionStatement	"_b = R_BIT_TOGGLE ( b , idx )"	2233:3:47749:47775	5232572	1	True				
ANR	5232690	AssignmentExpression	"_b = R_BIT_TOGGLE ( b , idx )"		5232572	0		=			
ANR	5232691	Identifier	_b		5232572	0					
ANR	5232692	CallExpression	"R_BIT_TOGGLE ( b , idx )"		5232572	1					
ANR	5232693	Callee	R_BIT_TOGGLE		5232572	0					
ANR	5232694	Identifier	R_BIT_TOGGLE		5232572	0					
ANR	5232695	ArgumentList	b		5232572	1					
ANR	5232696	Argument	b		5232572	0					
ANR	5232697	Identifier	b		5232572	0					
ANR	5232698	Argument	idx		5232572	1					
ANR	5232699	Identifier	idx		5232572	0					
ANR	5232700	ContinueStatement	continue ;	2234:3:47780:47788	5232572	2	True				
ANR	5232701	IfStatement	if ( * p == ch && ! _b )		5232572	2					
ANR	5232702	Condition	* p == ch && ! _b	2236:6:47800:47814	5232572	0	True				
ANR	5232703	AndExpression	* p == ch && ! _b		5232572	0		&&			
ANR	5232704	EqualityExpression	* p == ch		5232572	0		==			
ANR	5232705	UnaryOperationExpression	* p		5232572	0					
ANR	5232706	UnaryOperator	*		5232572	0					
ANR	5232707	Identifier	p		5232572	1					
ANR	5232708	Identifier	ch		5232572	1					
ANR	5232709	UnaryOperationExpression	! _b		5232572	1					
ANR	5232710	UnaryOperator	!		5232572	0					
ANR	5232711	Identifier	_b		5232572	1					
ANR	5232712	CompoundStatement		20:23:413:413	5232572	1					
ANR	5232713	ReturnStatement	return p ;	2237:3:47822:47830	5232572	0	True				
ANR	5232714	Identifier	p		5232572	0					
ANR	5232715	ReturnStatement	return NULL ;	2240:1:47840:47851	5232572	7	True				
ANR	5232716	Identifier	NULL		5232572	0					
ANR	5232717	ReturnType	const char *		5232572	1					
ANR	5232718	Identifier	r_str_firstbut		5232572	2					
ANR	5232719	ParameterList	"const char * s , char ch , const char * but"		5232572	3					
ANR	5232720	Parameter	const char * s	2217:33:47362:47374	5232572	0	True				
ANR	5232721	ParameterType	const char *		5232572	0					
ANR	5232722	Identifier	s		5232572	1					
ANR	5232723	Parameter	char ch	2217:48:47377:47383	5232572	1	True				
ANR	5232724	ParameterType	char		5232572	0					
ANR	5232725	Identifier	ch		5232572	1					
ANR	5232726	Parameter	const char * but	2217:57:47386:47400	5232572	2	True				
ANR	5232727	ParameterType	const char *		5232572	0					
ANR	5232728	Identifier	but		5232572	1					
ANR	5232729	CFGEntryNode	ENTRY		5232572		True				
ANR	5232730	CFGExitNode	EXIT		5232572		True				
ANR	5232731	Symbol	but		5232572						
ANR	5232732	Symbol	b		5232572						
ANR	5232733	Symbol	_b		5232572						
ANR	5232734	Symbol	NULL		5232572						
ANR	5232735	Symbol	ch		5232572						
ANR	5232736	Symbol	bsz		5232572						
ANR	5232737	Symbol	strchr		5232572						
ANR	5232738	Symbol	isbut		5232572						
ANR	5232739	Symbol	& _b		5232572						
ANR	5232740	Symbol	R_BIT_TOGGLE		5232572						
ANR	5232741	Symbol	p		5232572						
ANR	5232742	Symbol	strlen		5232572						
ANR	5232743	Symbol	s		5232572						
ANR	5232744	Symbol	* p		5232572						
ANR	5232745	Symbol	idx		5232572						
ANR	5232746	Function	r_str_lastbut	2243:6:47862:48390							
ANR	5232747	FunctionDef	"r_str_lastbut (const char * s , char ch , const char * but)"		5232746	0					
ANR	5232748	CompoundStatement		2243:73:47929:48390	5232746	0					
ANR	5232749	IdentifierDeclStatement	"int idx , _b = 0 ;"	2244:1:47932:47947	5232746	0	True				
ANR	5232750	IdentifierDecl	idx		5232746	0					
ANR	5232751	IdentifierDeclType	int		5232746	0					
ANR	5232752	Identifier	idx		5232746	1					
ANR	5232753	IdentifierDecl	_b = 0		5232746	1					
ANR	5232754	IdentifierDeclType	int		5232746	0					
ANR	5232755	Identifier	_b		5232746	1					
ANR	5232756	AssignmentExpression	_b = 0		5232746	2		=			
ANR	5232757	Identifier	_b		5232746	0					
ANR	5232758	PrimaryExpression	0		5232746	1					
ANR	5232759	IdentifierDeclStatement	ut8 * b = ( ut8 * ) & _b ;	2245:1:47950:47968	5232746	1	True				
ANR	5232760	IdentifierDecl	* b = ( ut8 * ) & _b		5232746	0					
ANR	5232761	IdentifierDeclType	ut8 *		5232746	0					
ANR	5232762	Identifier	b		5232746	1					
ANR	5232763	AssignmentExpression	* b = ( ut8 * ) & _b		5232746	2		=			
ANR	5232764	Identifier	b		5232746	0					
ANR	5232765	CastExpression	( ut8 * ) & _b		5232746	1					
ANR	5232766	CastTarget	ut8 *		5232746	0					
ANR	5232767	UnaryOperationExpression	& _b		5232746	1					
ANR	5232768	UnaryOperator	&		5232746	0					
ANR	5232769	Identifier	_b		5232746	1					
ANR	5232770	IdentifierDeclStatement	"const char * isbut , * p , * lp = NULL ;"	2246:1:47971:48004	5232746	2	True				
ANR	5232771	IdentifierDecl	* isbut		5232746	0					
ANR	5232772	IdentifierDeclType	const char *		5232746	0					
ANR	5232773	Identifier	isbut		5232746	1					
ANR	5232774	IdentifierDecl	* p		5232746	1					
ANR	5232775	IdentifierDeclType	const char *		5232746	0					
ANR	5232776	Identifier	p		5232746	1					
ANR	5232777	IdentifierDecl	* lp = NULL		5232746	2					
ANR	5232778	IdentifierDeclType	const char *		5232746	0					
ANR	5232779	Identifier	lp		5232746	1					
ANR	5232780	AssignmentExpression	* lp = NULL		5232746	2		=			
ANR	5232781	Identifier	NULL		5232746	0					
ANR	5232782	Identifier	NULL		5232746	1					
ANR	5232783	IdentifierDeclStatement	const int bsz = sizeof ( _b ) * 8 ;	2247:1:48007:48038	5232746	3	True				
ANR	5232784	IdentifierDecl	bsz = sizeof ( _b ) * 8		5232746	0					
ANR	5232785	IdentifierDeclType	const int		5232746	0					
ANR	5232786	Identifier	bsz		5232746	1					
ANR	5232787	AssignmentExpression	bsz = sizeof ( _b ) * 8		5232746	2		=			
ANR	5232788	Identifier	bsz		5232746	0					
ANR	5232789	MultiplicativeExpression	sizeof ( _b ) * 8		5232746	1		*			
ANR	5232790	SizeofExpression	sizeof ( _b )		5232746	0					
ANR	5232791	Sizeof	sizeof		5232746	0					
ANR	5232792	SizeofOperand	_b		5232746	1					
ANR	5232793	PrimaryExpression	8		5232746	1					
ANR	5232794	IfStatement	if ( ! but )		5232746	4					
ANR	5232795	Condition	! but	2248:5:48045:48048	5232746	0	True				
ANR	5232796	UnaryOperationExpression	! but		5232746	0					
ANR	5232797	UnaryOperator	!		5232746	0					
ANR	5232798	Identifier	but		5232746	1					
ANR	5232799	CompoundStatement		6:11:121:121	5232746	1					
ANR	5232800	ReturnStatement	"return r_str_lchr ( s , ch ) ;"	2249:2:48055:48080	5232746	0	True				
ANR	5232801	CallExpression	"r_str_lchr ( s , ch )"		5232746	0					
ANR	5232802	Callee	r_str_lchr		5232746	0					
ANR	5232803	Identifier	r_str_lchr		5232746	0					
ANR	5232804	ArgumentList	s		5232746	1					
ANR	5232805	Argument	s		5232746	0					
ANR	5232806	Identifier	s		5232746	0					
ANR	5232807	Argument	ch		5232746	1					
ANR	5232808	Identifier	ch		5232746	0					
ANR	5232809	IfStatement	if ( strlen ( but ) >= bsz )		5232746	5					
ANR	5232810	Condition	strlen ( but ) >= bsz	2251:5:48090:48108	5232746	0	True				
ANR	5232811	RelationalExpression	strlen ( but ) >= bsz		5232746	0		>=			
ANR	5232812	CallExpression	strlen ( but )		5232746	0					
ANR	5232813	Callee	strlen		5232746	0					
ANR	5232814	Identifier	strlen		5232746	0					
ANR	5232815	ArgumentList	but		5232746	1					
ANR	5232816	Argument	but		5232746	0					
ANR	5232817	Identifier	but		5232746	0					
ANR	5232818	Identifier	bsz		5232746	1					
ANR	5232819	CompoundStatement		9:26:181:181	5232746	1					
ANR	5232820	ExpressionStatement	"eprintf ( ""r_str_lastbut: but string too long\\n"" )"	2252:2:48115:48163	5232746	0	True				
ANR	5232821	CallExpression	"eprintf ( ""r_str_lastbut: but string too long\\n"" )"		5232746	0					
ANR	5232822	Callee	eprintf		5232746	0					
ANR	5232823	Identifier	eprintf		5232746	0					
ANR	5232824	ArgumentList	"""r_str_lastbut: but string too long\\n"""		5232746	1					
ANR	5232825	Argument	"""r_str_lastbut: but string too long\\n"""		5232746	0					
ANR	5232826	PrimaryExpression	"""r_str_lastbut: but string too long\\n"""		5232746	0					
ANR	5232827	ReturnStatement	return NULL ;	2253:2:48167:48178	5232746	1	True				
ANR	5232828	Identifier	NULL		5232746	0					
ANR	5232829	ForStatement	for ( p = s ; * p ; p ++ )		5232746	6					
ANR	5232830	ForInit	p = s ;	2255:6:48189:48194	5232746	0	True				
ANR	5232831	AssignmentExpression	p = s		5232746	0		=			
ANR	5232832	Identifier	p		5232746	0					
ANR	5232833	Identifier	s		5232746	1					
ANR	5232834	Condition	* p	2255:13:48196:48197	5232746	1	True				
ANR	5232835	UnaryOperationExpression	* p		5232746	0					
ANR	5232836	UnaryOperator	*		5232746	0					
ANR	5232837	Identifier	p		5232746	1					
ANR	5232838	PostIncDecOperationExpression	p ++	2255:17:48200:48202	5232746	2	True				
ANR	5232839	Identifier	p		5232746	0					
ANR	5232840	IncDec	++		5232746	1					
ANR	5232841	CompoundStatement		13:22:275:275	5232746	3					
ANR	5232842	ExpressionStatement	"isbut = strchr ( but , * p )"	2256:2:48209:48233	5232746	0	True				
ANR	5232843	AssignmentExpression	"isbut = strchr ( but , * p )"		5232746	0		=			
ANR	5232844	Identifier	isbut		5232746	0					
ANR	5232845	CallExpression	"strchr ( but , * p )"		5232746	1					
ANR	5232846	Callee	strchr		5232746	0					
ANR	5232847	Identifier	strchr		5232746	0					
ANR	5232848	ArgumentList	but		5232746	1					
ANR	5232849	Argument	but		5232746	0					
ANR	5232850	Identifier	but		5232746	0					
ANR	5232851	Argument	* p		5232746	1					
ANR	5232852	UnaryOperationExpression	* p		5232746	0					
ANR	5232853	UnaryOperator	*		5232746	0					
ANR	5232854	Identifier	p		5232746	1					
ANR	5232855	IfStatement	if ( isbut )		5232746	1					
ANR	5232856	Condition	isbut	2257:6:48241:48245	5232746	0	True				
ANR	5232857	Identifier	isbut		5232746	0					
ANR	5232858	CompoundStatement		15:13:318:318	5232746	1					
ANR	5232859	ExpressionStatement	idx = ( int ) ( size_t ) ( isbut - but )	2258:3:48253:48285	5232746	0	True				
ANR	5232860	AssignmentExpression	idx = ( int ) ( size_t ) ( isbut - but )		5232746	0		=			
ANR	5232861	Identifier	idx		5232746	0					
ANR	5232862	CastExpression	( int ) ( size_t ) ( isbut - but )		5232746	1					
ANR	5232863	CastTarget	int		5232746	0					
ANR	5232864	CastExpression	( size_t ) ( isbut - but )		5232746	1					
ANR	5232865	CastTarget	size_t		5232746	0					
ANR	5232866	AdditiveExpression	isbut - but		5232746	1		-			
ANR	5232867	Identifier	isbut		5232746	0					
ANR	5232868	Identifier	but		5232746	1					
ANR	5232869	ExpressionStatement	"_b = R_BIT_TOGGLE ( b , idx )"	2259:3:48290:48316	5232746	1	True				
ANR	5232870	AssignmentExpression	"_b = R_BIT_TOGGLE ( b , idx )"		5232746	0		=			
ANR	5232871	Identifier	_b		5232746	0					
ANR	5232872	CallExpression	"R_BIT_TOGGLE ( b , idx )"		5232746	1					
ANR	5232873	Callee	R_BIT_TOGGLE		5232746	0					
ANR	5232874	Identifier	R_BIT_TOGGLE		5232746	0					
ANR	5232875	ArgumentList	b		5232746	1					
ANR	5232876	Argument	b		5232746	0					
ANR	5232877	Identifier	b		5232746	0					
ANR	5232878	Argument	idx		5232746	1					
ANR	5232879	Identifier	idx		5232746	0					
ANR	5232880	ContinueStatement	continue ;	2260:3:48321:48329	5232746	2	True				
ANR	5232881	IfStatement	if ( * p == ch && ! _b )		5232746	2					
ANR	5232882	Condition	* p == ch && ! _b	2262:6:48341:48355	5232746	0	True				
ANR	5232883	AndExpression	* p == ch && ! _b		5232746	0		&&			
ANR	5232884	EqualityExpression	* p == ch		5232746	0		==			
ANR	5232885	UnaryOperationExpression	* p		5232746	0					
ANR	5232886	UnaryOperator	*		5232746	0					
ANR	5232887	Identifier	p		5232746	1					
ANR	5232888	Identifier	ch		5232746	1					
ANR	5232889	UnaryOperationExpression	! _b		5232746	1					
ANR	5232890	UnaryOperator	!		5232746	0					
ANR	5232891	Identifier	_b		5232746	1					
ANR	5232892	CompoundStatement		20:23:428:428	5232746	1					
ANR	5232893	ExpressionStatement	lp = p	2263:3:48363:48369	5232746	0	True				
ANR	5232894	AssignmentExpression	lp = p		5232746	0		=			
ANR	5232895	Identifier	lp		5232746	0					
ANR	5232896	Identifier	p		5232746	1					
ANR	5232897	ReturnStatement	return lp ;	2266:1:48379:48388	5232746	7	True				
ANR	5232898	Identifier	lp		5232746	0					
ANR	5232899	ReturnType	const char *		5232746	1					
ANR	5232900	Identifier	r_str_lastbut		5232746	2					
ANR	5232901	ParameterList	"const char * s , char ch , const char * but"		5232746	3					
ANR	5232902	Parameter	const char * s	2243:32:47888:47900	5232746	0	True				
ANR	5232903	ParameterType	const char *		5232746	0					
ANR	5232904	Identifier	s		5232746	1					
ANR	5232905	Parameter	char ch	2243:47:47903:47909	5232746	1	True				
ANR	5232906	ParameterType	char		5232746	0					
ANR	5232907	Identifier	ch		5232746	1					
ANR	5232908	Parameter	const char * but	2243:56:47912:47926	5232746	2	True				
ANR	5232909	ParameterType	const char *		5232746	0					
ANR	5232910	Identifier	but		5232746	1					
ANR	5232911	CFGEntryNode	ENTRY		5232746		True				
ANR	5232912	CFGExitNode	EXIT		5232746		True				
ANR	5232913	Symbol	but		5232746						
ANR	5232914	Symbol	b		5232746						
ANR	5232915	Symbol	_b		5232746						
ANR	5232916	Symbol	NULL		5232746						
ANR	5232917	Symbol	lp		5232746						
ANR	5232918	Symbol	ch		5232746						
ANR	5232919	Symbol	bsz		5232746						
ANR	5232920	Symbol	strchr		5232746						
ANR	5232921	Symbol	isbut		5232746						
ANR	5232922	Symbol	& _b		5232746						
ANR	5232923	Symbol	R_BIT_TOGGLE		5232746						
ANR	5232924	Symbol	p		5232746						
ANR	5232925	Symbol	strlen		5232746						
ANR	5232926	Symbol	s		5232746						
ANR	5232927	Symbol	r_str_lchr		5232746						
ANR	5232928	Symbol	* p		5232746						
ANR	5232929	Symbol	idx		5232746						
ANR	5232930	Function	r_str_len_utf8char	2270:0:48425:48608							
ANR	5232931	FunctionDef	"r_str_len_utf8char (const char * s , int left)"		5232930	0					
ANR	5232932	CompoundStatement		2270:54:48479:48608	5232930	0					
ANR	5232933	IdentifierDeclStatement	int i = 1 ;	2271:1:48482:48491	5232930	0	True				
ANR	5232934	IdentifierDecl	i = 1		5232930	0					
ANR	5232935	IdentifierDeclType	int		5232930	0					
ANR	5232936	Identifier	i		5232930	1					
ANR	5232937	AssignmentExpression	i = 1		5232930	2		=			
ANR	5232938	Identifier	i		5232930	0					
ANR	5232939	PrimaryExpression	1		5232930	1					
ANR	5232940	WhileStatement	while ( s [ i ] && ( ! left || i < left ) )		5232930	1					
ANR	5232941	Condition	s [ i ] && ( ! left || i < left )	2272:8:48501:48525	5232930	0	True				
ANR	5232942	AndExpression	s [ i ] && ( ! left || i < left )		5232930	0		&&			
ANR	5232943	ArrayIndexing	s [ i ]		5232930	0					
ANR	5232944	Identifier	s		5232930	0					
ANR	5232945	Identifier	i		5232930	1					
ANR	5232946	OrExpression	! left || i < left		5232930	1		||			
ANR	5232947	UnaryOperationExpression	! left		5232930	0					
ANR	5232948	UnaryOperator	!		5232930	0					
ANR	5232949	Identifier	left		5232930	1					
ANR	5232950	RelationalExpression	i < left		5232930	1		<			
ANR	5232951	Identifier	i		5232930	0					
ANR	5232952	Identifier	left		5232930	1					
ANR	5232953	CompoundStatement		3:35:48:48	5232930	1					
ANR	5232954	IfStatement	if ( ( s [ i ] & 0xc0 ) != 0x80 )		5232930	0					
ANR	5232955	Condition	( s [ i ] & 0xc0 ) != 0x80	2273:6:48536:48556	5232930	0	True				
ANR	5232956	EqualityExpression	( s [ i ] & 0xc0 ) != 0x80		5232930	0		!=			
ANR	5232957	BitAndExpression	s [ i ] & 0xc0		5232930	0		&			
ANR	5232958	ArrayIndexing	s [ i ]		5232930	0					
ANR	5232959	Identifier	s		5232930	0					
ANR	5232960	Identifier	i		5232930	1					
ANR	5232961	PrimaryExpression	0xc0		5232930	1					
ANR	5232962	PrimaryExpression	0x80		5232930	1					
ANR	5232963	CompoundStatement		4:29:79:79	5232930	1					
ANR	5232964	ExpressionStatement	i ++	2274:3:48564:48567	5232930	0	True				
ANR	5232965	PostIncDecOperationExpression	i ++		5232930	0					
ANR	5232966	Identifier	i		5232930	0					
ANR	5232967	IncDec	++		5232930	1					
ANR	5232968	ElseStatement	else		5232930	0					
ANR	5232969	CompoundStatement		6:9:98:98	5232930	0					
ANR	5232970	BreakStatement	break ;	2276:3:48583:48588	5232930	0	True				
ANR	5232971	ReturnStatement	return i ;	2279:1:48598:48606	5232930	2	True				
ANR	5232972	Identifier	i		5232930	0					
ANR	5232973	ReturnType	R_API int		5232930	1					
ANR	5232974	Identifier	r_str_len_utf8char		5232930	2					
ANR	5232975	ParameterList	"const char * s , int left"		5232930	3					
ANR	5232976	Parameter	const char * s	2270:29:48454:48466	5232930	0	True				
ANR	5232977	ParameterType	const char *		5232930	0					
ANR	5232978	Identifier	s		5232930	1					
ANR	5232979	Parameter	int left	2270:44:48469:48476	5232930	1	True				
ANR	5232980	ParameterType	int		5232930	0					
ANR	5232981	Identifier	left		5232930	1					
ANR	5232982	CFGEntryNode	ENTRY		5232930		True				
ANR	5232983	CFGExitNode	EXIT		5232930		True				
ANR	5232984	Symbol	s		5232930						
ANR	5232985	Symbol	* i		5232930						
ANR	5232986	Symbol	left		5232930						
ANR	5232987	Symbol	i		5232930						
ANR	5232988	Symbol	* s		5232930						
ANR	5232989	Function	r_str_len_utf8	2282:0:48611:48846							
ANR	5232990	FunctionDef	r_str_len_utf8 (const char * s)		5232989	0					
ANR	5232991	CompoundStatement		2282:40:48651:48846	5232989	0					
ANR	5232992	IdentifierDeclStatement	"int i = 0 , j = 0 , fullwidths = 0 ;"	2283:1:48654:48686	5232989	0	True				
ANR	5232993	IdentifierDecl	i = 0		5232989	0					
ANR	5232994	IdentifierDeclType	int		5232989	0					
ANR	5232995	Identifier	i		5232989	1					
ANR	5232996	AssignmentExpression	i = 0		5232989	2		=			
ANR	5232997	Identifier	i		5232989	0					
ANR	5232998	PrimaryExpression	0		5232989	1					
ANR	5232999	IdentifierDecl	j = 0		5232989	1					
ANR	5233000	IdentifierDeclType	int		5232989	0					
ANR	5233001	Identifier	j		5232989	1					
ANR	5233002	AssignmentExpression	j = 0		5232989	2		=			
ANR	5233003	Identifier	j		5232989	0					
ANR	5233004	PrimaryExpression	0		5232989	1					
ANR	5233005	IdentifierDecl	fullwidths = 0		5232989	2					
ANR	5233006	IdentifierDeclType	int		5232989	0					
ANR	5233007	Identifier	fullwidths		5232989	1					
ANR	5233008	AssignmentExpression	fullwidths = 0		5232989	2		=			
ANR	5233009	Identifier	fullwidths		5232989	0					
ANR	5233010	PrimaryExpression	0		5232989	1					
ANR	5233011	WhileStatement	while ( s [ i ] )		5232989	1					
ANR	5233012	Condition	s [ i ]	2284:8:48696:48699	5232989	0	True				
ANR	5233013	ArrayIndexing	s [ i ]		5232989	0					
ANR	5233014	Identifier	s		5232989	0					
ANR	5233015	Identifier	i		5232989	1					
ANR	5233016	CompoundStatement		3:14:50:50	5232989	1					
ANR	5233017	IfStatement	if ( ( s [ i ] & 0xc0 ) != 0x80 )		5232989	0					
ANR	5233018	Condition	( s [ i ] & 0xc0 ) != 0x80	2285:6:48710:48730	5232989	0	True				
ANR	5233019	EqualityExpression	( s [ i ] & 0xc0 ) != 0x80		5232989	0		!=			
ANR	5233020	BitAndExpression	s [ i ] & 0xc0		5232989	0		&			
ANR	5233021	ArrayIndexing	s [ i ]		5232989	0					
ANR	5233022	Identifier	s		5232989	0					
ANR	5233023	Identifier	i		5232989	1					
ANR	5233024	PrimaryExpression	0xc0		5232989	1					
ANR	5233025	PrimaryExpression	0x80		5232989	1					
ANR	5233026	CompoundStatement		4:29:81:81	5232989	1					
ANR	5233027	ExpressionStatement	j ++	2286:3:48738:48741	5232989	0	True				
ANR	5233028	PostIncDecOperationExpression	j ++		5232989	0					
ANR	5233029	Identifier	j		5232989	0					
ANR	5233030	IncDec	++		5232989	1					
ANR	5233031	IfStatement	"if ( r_str_char_fullwidth ( s + i , 4 ) )"		5232989	1					
ANR	5233032	Condition	"r_str_char_fullwidth ( s + i , 4 )"	2287:7:48750:48780	5232989	0	True				
ANR	5233033	CallExpression	"r_str_char_fullwidth ( s + i , 4 )"		5232989	0					
ANR	5233034	Callee	r_str_char_fullwidth		5232989	0					
ANR	5233035	Identifier	r_str_char_fullwidth		5232989	0					
ANR	5233036	ArgumentList	s + i		5232989	1					
ANR	5233037	Argument	s + i		5232989	0					
ANR	5233038	AdditiveExpression	s + i		5232989	0		+			
ANR	5233039	Identifier	s		5232989	0					
ANR	5233040	Identifier	i		5232989	1					
ANR	5233041	Argument	4		5232989	1					
ANR	5233042	PrimaryExpression	4		5232989	0					
ANR	5233043	CompoundStatement		6:40:131:131	5232989	1					
ANR	5233044	ExpressionStatement	fullwidths ++	2288:4:48789:48801	5232989	0	True				
ANR	5233045	PostIncDecOperationExpression	fullwidths ++		5232989	0					
ANR	5233046	Identifier	fullwidths		5232989	0					
ANR	5233047	IncDec	++		5232989	1					
ANR	5233048	ExpressionStatement	i ++	2291:2:48814:48817	5232989	1	True				
ANR	5233049	PostIncDecOperationExpression	i ++		5232989	0					
ANR	5233050	Identifier	i		5232989	0					
ANR	5233051	IncDec	++		5232989	1					
ANR	5233052	ReturnStatement	return j + fullwidths ;	2293:1:48823:48844	5232989	2	True				
ANR	5233053	AdditiveExpression	j + fullwidths		5232989	0		+			
ANR	5233054	Identifier	j		5232989	0					
ANR	5233055	Identifier	fullwidths		5232989	1					
ANR	5233056	ReturnType	R_API int		5232989	1					
ANR	5233057	Identifier	r_str_len_utf8		5232989	2					
ANR	5233058	ParameterList	const char * s		5232989	3					
ANR	5233059	Parameter	const char * s	2282:25:48636:48648	5232989	0	True				
ANR	5233060	ParameterType	const char *		5232989	0					
ANR	5233061	Identifier	s		5232989	1					
ANR	5233062	CFGEntryNode	ENTRY		5232989		True				
ANR	5233063	CFGExitNode	EXIT		5232989		True				
ANR	5233064	Symbol	s		5232989						
ANR	5233065	Symbol	* i		5232989						
ANR	5233066	Symbol	r_str_char_fullwidth		5232989						
ANR	5233067	Symbol	i		5232989						
ANR	5233068	Symbol	j		5232989						
ANR	5233069	Symbol	fullwidths		5232989						
ANR	5233070	Symbol	* s		5232989						
ANR	5233071	Function	r_str_len_utf8_ansi	2296:0:48849:49215							
ANR	5233072	FunctionDef	r_str_len_utf8_ansi (const char * str)		5233071	0					
ANR	5233073	CompoundStatement		2296:47:48896:49215	5233071	0					
ANR	5233074	IdentifierDeclStatement	"int i = 0 , len = 0 , fullwidths = 0 ;"	2297:1:48899:48933	5233071	0	True				
ANR	5233075	IdentifierDecl	i = 0		5233071	0					
ANR	5233076	IdentifierDeclType	int		5233071	0					
ANR	5233077	Identifier	i		5233071	1					
ANR	5233078	AssignmentExpression	i = 0		5233071	2		=			
ANR	5233079	Identifier	i		5233071	0					
ANR	5233080	PrimaryExpression	0		5233071	1					
ANR	5233081	IdentifierDecl	len = 0		5233071	1					
ANR	5233082	IdentifierDeclType	int		5233071	0					
ANR	5233083	Identifier	len		5233071	1					
ANR	5233084	AssignmentExpression	len = 0		5233071	2		=			
ANR	5233085	Identifier	len		5233071	0					
ANR	5233086	PrimaryExpression	0		5233071	1					
ANR	5233087	IdentifierDecl	fullwidths = 0		5233071	2					
ANR	5233088	IdentifierDeclType	int		5233071	0					
ANR	5233089	Identifier	fullwidths		5233071	1					
ANR	5233090	AssignmentExpression	fullwidths = 0		5233071	2		=			
ANR	5233091	Identifier	fullwidths		5233071	0					
ANR	5233092	PrimaryExpression	0		5233071	1					
ANR	5233093	WhileStatement	while ( str [ i ] )		5233071	1					
ANR	5233094	Condition	str [ i ]	2298:8:48943:48948	5233071	0	True				
ANR	5233095	ArrayIndexing	str [ i ]		5233071	0					
ANR	5233096	Identifier	str		5233071	0					
ANR	5233097	Identifier	i		5233071	1					
ANR	5233098	CompoundStatement		5:2:78:117	5233071	1					
ANR	5233099	IdentifierDeclStatement	char ch = str [ i ] ;	2299:2:48955:48971	5233071	0	True				
ANR	5233100	IdentifierDecl	ch = str [ i ]		5233071	0					
ANR	5233101	IdentifierDeclType	char		5233071	0					
ANR	5233102	Identifier	ch		5233071	1					
ANR	5233103	AssignmentExpression	ch = str [ i ]		5233071	2		=			
ANR	5233104	Identifier	ch		5233071	0					
ANR	5233105	ArrayIndexing	str [ i ]		5233071	1					
ANR	5233106	Identifier	str		5233071	0					
ANR	5233107	Identifier	i		5233071	1					
ANR	5233108	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	2300:2:48975:49014	5233071	1	True				
ANR	5233109	IdentifierDecl	chlen = __str_ansi_length ( str + i )		5233071	0					
ANR	5233110	IdentifierDeclType	int		5233071	0					
ANR	5233111	Identifier	chlen		5233071	1					
ANR	5233112	AssignmentExpression	chlen = __str_ansi_length ( str + i )		5233071	2		=			
ANR	5233113	Identifier	chlen		5233071	0					
ANR	5233114	CallExpression	__str_ansi_length ( str + i )		5233071	1					
ANR	5233115	Callee	__str_ansi_length		5233071	0					
ANR	5233116	Identifier	__str_ansi_length		5233071	0					
ANR	5233117	ArgumentList	str + i		5233071	1					
ANR	5233118	Argument	str + i		5233071	0					
ANR	5233119	AdditiveExpression	str + i		5233071	0		+			
ANR	5233120	Identifier	str		5233071	0					
ANR	5233121	Identifier	i		5233071	1					
ANR	5233122	IfStatement	if ( chlen > 1 )		5233071	2					
ANR	5233123	Condition	chlen > 1	2301:6:49022:49030	5233071	0	True				
ANR	5233124	RelationalExpression	chlen > 1		5233071	0		>			
ANR	5233125	Identifier	chlen		5233071	0					
ANR	5233126	PrimaryExpression	1		5233071	1					
ANR	5233127	CompoundStatement		6:17:136:136	5233071	1					
ANR	5233128	ExpressionStatement	i += chlen - 1	2302:3:49038:49052	5233071	0	True				
ANR	5233129	AssignmentExpression	i += chlen - 1		5233071	0		+=			
ANR	5233130	Identifier	i		5233071	0					
ANR	5233131	AdditiveExpression	chlen - 1		5233071	1		-			
ANR	5233132	Identifier	chlen		5233071	0					
ANR	5233133	PrimaryExpression	1		5233071	1					
ANR	5233134	ElseStatement	else		5233071	0					
ANR	5233135	IfStatement	if ( ( ch & 0xc0 ) != 0x80 )		5233071	0					
ANR	5233136	Condition	( ch & 0xc0 ) != 0x80	2303:13:49067:49085	5233071	0	True				
ANR	5233137	EqualityExpression	( ch & 0xc0 ) != 0x80		5233071	0		!=			
ANR	5233138	BitAndExpression	ch & 0xc0		5233071	0		&			
ANR	5233139	Identifier	ch		5233071	0					
ANR	5233140	PrimaryExpression	0xc0		5233071	1					
ANR	5233141	PrimaryExpression	0x80		5233071	1					
ANR	5233142	CompoundStatement		8:34:191:191	5233071	1					
ANR	5233143	ExpressionStatement	len ++	2304:3:49101:49106	5233071	0	True				
ANR	5233144	PostIncDecOperationExpression	len ++		5233071	0					
ANR	5233145	Identifier	len		5233071	0					
ANR	5233146	IncDec	++		5233071	1					
ANR	5233147	IfStatement	"if ( r_str_char_fullwidth ( str + i , 4 ) )"		5233071	1					
ANR	5233148	Condition	"r_str_char_fullwidth ( str + i , 4 )"	2305:7:49115:49147	5233071	0	True				
ANR	5233149	CallExpression	"r_str_char_fullwidth ( str + i , 4 )"		5233071	0					
ANR	5233150	Callee	r_str_char_fullwidth		5233071	0					
ANR	5233151	Identifier	r_str_char_fullwidth		5233071	0					
ANR	5233152	ArgumentList	str + i		5233071	1					
ANR	5233153	Argument	str + i		5233071	0					
ANR	5233154	AdditiveExpression	str + i		5233071	0		+			
ANR	5233155	Identifier	str		5233071	0					
ANR	5233156	Identifier	i		5233071	1					
ANR	5233157	Argument	4		5233071	1					
ANR	5233158	PrimaryExpression	4		5233071	0					
ANR	5233159	CompoundStatement		10:42:253:253	5233071	1					
ANR	5233160	ExpressionStatement	fullwidths ++	2306:4:49156:49168	5233071	0	True				
ANR	5233161	PostIncDecOperationExpression	fullwidths ++		5233071	0					
ANR	5233162	Identifier	fullwidths		5233071	0					
ANR	5233163	IncDec	++		5233071	1					
ANR	5233164	ExpressionStatement	i ++	2309:2:49181:49184	5233071	3	True				
ANR	5233165	PostIncDecOperationExpression	i ++		5233071	0					
ANR	5233166	Identifier	i		5233071	0					
ANR	5233167	IncDec	++		5233071	1					
ANR	5233168	ReturnStatement	return len + fullwidths ;	2311:1:49190:49213	5233071	2	True				
ANR	5233169	AdditiveExpression	len + fullwidths		5233071	0		+			
ANR	5233170	Identifier	len		5233071	0					
ANR	5233171	Identifier	fullwidths		5233071	1					
ANR	5233172	ReturnType	R_API int		5233071	1					
ANR	5233173	Identifier	r_str_len_utf8_ansi		5233071	2					
ANR	5233174	ParameterList	const char * str		5233071	3					
ANR	5233175	Parameter	const char * str	2296:30:48879:48893	5233071	0	True				
ANR	5233176	ParameterType	const char *		5233071	0					
ANR	5233177	Identifier	str		5233071	1					
ANR	5233178	CFGEntryNode	ENTRY		5233071		True				
ANR	5233179	CFGExitNode	EXIT		5233071		True				
ANR	5233180	Symbol	str		5233071						
ANR	5233181	Symbol	* i		5233071						
ANR	5233182	Symbol	chlen		5233071						
ANR	5233183	Symbol	len		5233071						
ANR	5233184	Symbol	ch		5233071						
ANR	5233185	Symbol	r_str_char_fullwidth		5233071						
ANR	5233186	Symbol	i		5233071						
ANR	5233187	Symbol	__str_ansi_length		5233071						
ANR	5233188	Symbol	* str		5233071						
ANR	5233189	Symbol	fullwidths		5233071						
ANR	5233190	Function	r_strstr_ansi	2315:6:49287:49571							
ANR	5233191	FunctionDef	"r_strstr_ansi (const char * a , const char * b)"		5233190	0					
ANR	5233192	CompoundStatement		2315:63:49344:49571	5233190	0					
ANR	5233193	IdentifierDeclStatement	"const char * ch , * p = a ;"	2316:1:49347:49369	5233190	0	True				
ANR	5233194	IdentifierDecl	* ch		5233190	0					
ANR	5233195	IdentifierDeclType	const char *		5233190	0					
ANR	5233196	Identifier	ch		5233190	1					
ANR	5233197	IdentifierDecl	* p = a		5233190	1					
ANR	5233198	IdentifierDeclType	const char *		5233190	0					
ANR	5233199	Identifier	p		5233190	1					
ANR	5233200	AssignmentExpression	* p = a		5233190	2		=			
ANR	5233201	Identifier	a		5233190	0					
ANR	5233202	Identifier	a		5233190	1					
ANR	5233203	DoStatement	do		5233190	1					
ANR	5233204	CompoundStatement		3:4:30:30	5233190	0					
ANR	5233205	ExpressionStatement	"ch = strchr ( p , x1b )"	2318:2:49379:49402	5233190	0	True				
ANR	5233206	AssignmentExpression	"ch = strchr ( p , x1b )"		5233190	0		=			
ANR	5233207	Identifier	ch		5233190	0					
ANR	5233208	CallExpression	"strchr ( p , x1b )"		5233190	1					
ANR	5233209	Callee	strchr		5233190	0					
ANR	5233210	Identifier	strchr		5233190	0					
ANR	5233211	ArgumentList	p		5233190	1					
ANR	5233212	Argument	p		5233190	0					
ANR	5233213	Identifier	p		5233190	0					
ANR	5233214	Argument	x1b		5233190	1					
ANR	5233215	Identifier	x1b		5233190	0					
ANR	5233216	IfStatement	if ( ch )		5233190	1					
ANR	5233217	Condition	ch	2319:6:49410:49411	5233190	0	True				
ANR	5233218	Identifier	ch		5233190	0					
ANR	5233219	CompoundStatement		6:3:74:115	5233190	1					
ANR	5233220	IdentifierDeclStatement	"const char * v = r_str_nstr ( p , b , ch - p ) ;"	2320:3:49419:49460	5233190	0	True				
ANR	5233221	IdentifierDecl	"* v = r_str_nstr ( p , b , ch - p )"		5233190	0					
ANR	5233222	IdentifierDeclType	const char *		5233190	0					
ANR	5233223	Identifier	v		5233190	1					
ANR	5233224	AssignmentExpression	"* v = r_str_nstr ( p , b , ch - p )"		5233190	2		=			
ANR	5233225	Identifier	v		5233190	0					
ANR	5233226	CallExpression	"r_str_nstr ( p , b , ch - p )"		5233190	1					
ANR	5233227	Callee	r_str_nstr		5233190	0					
ANR	5233228	Identifier	r_str_nstr		5233190	0					
ANR	5233229	ArgumentList	p		5233190	1					
ANR	5233230	Argument	p		5233190	0					
ANR	5233231	Identifier	p		5233190	0					
ANR	5233232	Argument	b		5233190	1					
ANR	5233233	Identifier	b		5233190	0					
ANR	5233234	Argument	ch - p		5233190	2					
ANR	5233235	AdditiveExpression	ch - p		5233190	0		-			
ANR	5233236	Identifier	ch		5233190	0					
ANR	5233237	Identifier	p		5233190	1					
ANR	5233238	IfStatement	if ( v )		5233190	1					
ANR	5233239	Condition	v	2321:7:49469:49469	5233190	0	True				
ANR	5233240	Identifier	v		5233190	0					
ANR	5233241	CompoundStatement		7:10:127:127	5233190	1					
ANR	5233242	ReturnStatement	return v ;	2322:4:49478:49486	5233190	0	True				
ANR	5233243	Identifier	v		5233190	0					
ANR	5233244	ExpressionStatement	p = ch + __str_ansi_length ( ch )	2324:3:49496:49527	5233190	2	True				
ANR	5233245	AssignmentExpression	p = ch + __str_ansi_length ( ch )		5233190	0		=			
ANR	5233246	Identifier	p		5233190	0					
ANR	5233247	AdditiveExpression	ch + __str_ansi_length ( ch )		5233190	1		+			
ANR	5233248	Identifier	ch		5233190	0					
ANR	5233249	CallExpression	__str_ansi_length ( ch )		5233190	1					
ANR	5233250	Callee	__str_ansi_length		5233190	0					
ANR	5233251	Identifier	__str_ansi_length		5233190	0					
ANR	5233252	ArgumentList	ch		5233190	1					
ANR	5233253	Argument	ch		5233190	0					
ANR	5233254	Identifier	ch		5233190	0					
ANR	5233255	Condition	ch	2326:10:49543:49544	5233190	1	True				
ANR	5233256	Identifier	ch		5233190	0					
ANR	5233257	ReturnStatement	"return strstr ( p , b ) ;"	2327:1:49549:49569	5233190	2	True				
ANR	5233258	CallExpression	"strstr ( p , b )"		5233190	0					
ANR	5233259	Callee	strstr		5233190	0					
ANR	5233260	Identifier	strstr		5233190	0					
ANR	5233261	ArgumentList	p		5233190	1					
ANR	5233262	Argument	p		5233190	0					
ANR	5233263	Identifier	p		5233190	0					
ANR	5233264	Argument	b		5233190	1					
ANR	5233265	Identifier	b		5233190	0					
ANR	5233266	ReturnType	const char *		5233190	1					
ANR	5233267	Identifier	r_strstr_ansi		5233190	2					
ANR	5233268	ParameterList	"const char * a , const char * b"		5233190	3					
ANR	5233269	Parameter	const char * a	2315:33:49314:49326	5233190	0	True				
ANR	5233270	ParameterType	const char *		5233190	0					
ANR	5233271	Identifier	a		5233190	1					
ANR	5233272	Parameter	const char * b	2315:48:49329:49341	5233190	1	True				
ANR	5233273	ParameterType	const char *		5233190	0					
ANR	5233274	Identifier	b		5233190	1					
ANR	5233275	CFGEntryNode	ENTRY		5233190		True				
ANR	5233276	CFGExitNode	EXIT		5233190		True				
ANR	5233277	Symbol	p		5233190						
ANR	5233278	Symbol	a		5233190						
ANR	5233279	Symbol	b		5233190						
ANR	5233280	Symbol	r_str_nstr		5233190						
ANR	5233281	Symbol	ch		5233190						
ANR	5233282	Symbol	strstr		5233190						
ANR	5233283	Symbol	v		5233190						
ANR	5233284	Symbol	x1b		5233190						
ANR	5233285	Symbol	strchr		5233190						
ANR	5233286	Symbol	__str_ansi_length		5233190						
ANR	5233287	Function	r_str_casestr	2330:6:49580:49996							
ANR	5233288	FunctionDef	"r_str_casestr (const char * a , const char * b)"		5233287	0					
ANR	5233289	CompoundStatement		2330:62:49636:49996	5233287	0					
ANR	5233290	IdentifierDeclStatement	size_t hay_len = strlen ( a ) ;	2333:1:49738:49765	5233287	0	True				
ANR	5233291	IdentifierDecl	hay_len = strlen ( a )		5233287	0					
ANR	5233292	IdentifierDeclType	size_t		5233287	0					
ANR	5233293	Identifier	hay_len		5233287	1					
ANR	5233294	AssignmentExpression	hay_len = strlen ( a )		5233287	2		=			
ANR	5233295	Identifier	hay_len		5233287	0					
ANR	5233296	CallExpression	strlen ( a )		5233287	1					
ANR	5233297	Callee	strlen		5233287	0					
ANR	5233298	Identifier	strlen		5233287	0					
ANR	5233299	ArgumentList	a		5233287	1					
ANR	5233300	Argument	a		5233287	0					
ANR	5233301	Identifier	a		5233287	0					
ANR	5233302	IdentifierDeclStatement	size_t needle_len = strlen ( b ) ;	2334:1:49768:49798	5233287	1	True				
ANR	5233303	IdentifierDecl	needle_len = strlen ( b )		5233287	0					
ANR	5233304	IdentifierDeclType	size_t		5233287	0					
ANR	5233305	Identifier	needle_len		5233287	1					
ANR	5233306	AssignmentExpression	needle_len = strlen ( b )		5233287	2		=			
ANR	5233307	Identifier	needle_len		5233287	0					
ANR	5233308	CallExpression	strlen ( b )		5233287	1					
ANR	5233309	Callee	strlen		5233287	0					
ANR	5233310	Identifier	strlen		5233287	0					
ANR	5233311	ArgumentList	b		5233287	1					
ANR	5233312	Argument	b		5233287	0					
ANR	5233313	Identifier	b		5233287	0					
ANR	5233314	IfStatement	if ( ! hay_len || ! needle_len )		5233287	2					
ANR	5233315	Condition	! hay_len || ! needle_len	2335:5:49805:49827	5233287	0	True				
ANR	5233316	OrExpression	! hay_len || ! needle_len		5233287	0		||			
ANR	5233317	UnaryOperationExpression	! hay_len		5233287	0					
ANR	5233318	UnaryOperator	!		5233287	0					
ANR	5233319	Identifier	hay_len		5233287	1					
ANR	5233320	UnaryOperationExpression	! needle_len		5233287	1					
ANR	5233321	UnaryOperator	!		5233287	0					
ANR	5233322	Identifier	needle_len		5233287	1					
ANR	5233323	CompoundStatement		6:30:193:193	5233287	1					
ANR	5233324	ReturnStatement	return NULL ;	2336:2:49834:49845	5233287	0	True				
ANR	5233325	Identifier	NULL		5233287	0					
ANR	5233326	WhileStatement	while ( hay_len >= needle_len )		5233287	3					
ANR	5233327	Condition	hay_len >= needle_len	2338:8:49858:49878	5233287	0	True				
ANR	5233328	RelationalExpression	hay_len >= needle_len		5233287	0		>=			
ANR	5233329	Identifier	hay_len		5233287	0					
ANR	5233330	Identifier	needle_len		5233287	1					
ANR	5233331	CompoundStatement		9:31:244:244	5233287	1					
ANR	5233332	IfStatement	"if ( ! r_str_ncasecmp ( a , b , needle_len ) )"		5233287	0					
ANR	5233333	Condition	"! r_str_ncasecmp ( a , b , needle_len )"	2339:6:49889:49922	5233287	0	True				
ANR	5233334	UnaryOperationExpression	"! r_str_ncasecmp ( a , b , needle_len )"		5233287	0					
ANR	5233335	UnaryOperator	!		5233287	0					
ANR	5233336	CallExpression	"r_str_ncasecmp ( a , b , needle_len )"		5233287	1					
ANR	5233337	Callee	r_str_ncasecmp		5233287	0					
ANR	5233338	Identifier	r_str_ncasecmp		5233287	0					
ANR	5233339	ArgumentList	a		5233287	1					
ANR	5233340	Argument	a		5233287	0					
ANR	5233341	Identifier	a		5233287	0					
ANR	5233342	Argument	b		5233287	1					
ANR	5233343	Identifier	b		5233287	0					
ANR	5233344	Argument	needle_len		5233287	2					
ANR	5233345	Identifier	needle_len		5233287	0					
ANR	5233346	CompoundStatement		10:42:288:288	5233287	1					
ANR	5233347	ReturnStatement	return ( const char * ) a ;	2340:3:49930:49953	5233287	0	True				
ANR	5233348	CastExpression	( const char * ) a		5233287	0					
ANR	5233349	CastTarget	const char *		5233287	0					
ANR	5233350	Identifier	a		5233287	1					
ANR	5233351	ExpressionStatement	a ++	2342:2:49961:49964	5233287	1	True				
ANR	5233352	PostIncDecOperationExpression	a ++		5233287	0					
ANR	5233353	Identifier	a		5233287	0					
ANR	5233354	IncDec	++		5233287	1					
ANR	5233355	ExpressionStatement	hay_len --	2343:2:49968:49977	5233287	2	True				
ANR	5233356	PostIncDecOperationExpression	hay_len --		5233287	0					
ANR	5233357	Identifier	hay_len		5233287	0					
ANR	5233358	IncDec	--		5233287	1					
ANR	5233359	ReturnStatement	return NULL ;	2345:1:49983:49994	5233287	4	True				
ANR	5233360	Identifier	NULL		5233287	0					
ANR	5233361	ReturnType	const char *		5233287	1					
ANR	5233362	Identifier	r_str_casestr		5233287	2					
ANR	5233363	ParameterList	"const char * a , const char * b"		5233287	3					
ANR	5233364	Parameter	const char * a	2330:32:49606:49618	5233287	0	True				
ANR	5233365	ParameterType	const char *		5233287	0					
ANR	5233366	Identifier	a		5233287	1					
ANR	5233367	Parameter	const char * b	2330:47:49621:49633	5233287	1	True				
ANR	5233368	ParameterType	const char *		5233287	0					
ANR	5233369	Identifier	b		5233287	1					
ANR	5233370	CFGEntryNode	ENTRY		5233287		True				
ANR	5233371	CFGExitNode	EXIT		5233287		True				
ANR	5233372	Symbol	a		5233287						
ANR	5233373	Symbol	strlen		5233287						
ANR	5233374	Symbol	b		5233287						
ANR	5233375	Symbol	hay_len		5233287						
ANR	5233376	Symbol	NULL		5233287						
ANR	5233377	Symbol	r_str_ncasecmp		5233287						
ANR	5233378	Symbol	needle_len		5233287						
ANR	5233379	Function	r_str_write	2348:0:49999:50081							
ANR	5233380	FunctionDef	"r_str_write (int fd , const char * b)"		5233379	0					
ANR	5233381	CompoundStatement		2348:45:50044:50081	5233379	0					
ANR	5233382	ReturnStatement	"return write ( fd , b , strlen ( b ) ) ;"	2349:1:50047:50079	5233379	0	True				
ANR	5233383	CallExpression	"write ( fd , b , strlen ( b ) )"		5233379	0					
ANR	5233384	Callee	write		5233379	0					
ANR	5233385	Identifier	write		5233379	0					
ANR	5233386	ArgumentList	fd		5233379	1					
ANR	5233387	Argument	fd		5233379	0					
ANR	5233388	Identifier	fd		5233379	0					
ANR	5233389	Argument	b		5233379	1					
ANR	5233390	Identifier	b		5233379	0					
ANR	5233391	Argument	strlen ( b )		5233379	2					
ANR	5233392	CallExpression	strlen ( b )		5233379	0					
ANR	5233393	Callee	strlen		5233379	0					
ANR	5233394	Identifier	strlen		5233379	0					
ANR	5233395	ArgumentList	b		5233379	1					
ANR	5233396	Argument	b		5233379	0					
ANR	5233397	Identifier	b		5233379	0					
ANR	5233398	ReturnType	R_API int		5233379	1					
ANR	5233399	Identifier	r_str_write		5233379	2					
ANR	5233400	ParameterList	"int fd , const char * b"		5233379	3					
ANR	5233401	Parameter	int fd	2348:22:50021:50026	5233379	0	True				
ANR	5233402	ParameterType	int		5233379	0					
ANR	5233403	Identifier	fd		5233379	1					
ANR	5233404	Parameter	const char * b	2348:30:50029:50041	5233379	1	True				
ANR	5233405	ParameterType	const char *		5233379	0					
ANR	5233406	Identifier	b		5233379	1					
ANR	5233407	CFGEntryNode	ENTRY		5233379		True				
ANR	5233408	CFGExitNode	EXIT		5233379		True				
ANR	5233409	Symbol	strlen		5233379						
ANR	5233410	Symbol	b		5233379						
ANR	5233411	Symbol	write		5233379						
ANR	5233412	Symbol	fd		5233379						
ANR	5233413	Function	r_str_range_foreach	2352:0:50084:50576							
ANR	5233414	FunctionDef	"r_str_range_foreach (const char * r , RStrRangeCallback cb , void * u)"		5233413	0					
ANR	5233415	CompoundStatement		2352:77:50161:50576	5233413	0					
ANR	5233416	IdentifierDeclStatement	const char * p = r ;	2353:1:50164:50181	5233413	0	True				
ANR	5233417	IdentifierDecl	* p = r		5233413	0					
ANR	5233418	IdentifierDeclType	const char *		5233413	0					
ANR	5233419	Identifier	p		5233413	1					
ANR	5233420	AssignmentExpression	* p = r		5233413	2		=			
ANR	5233421	Identifier	r		5233413	0					
ANR	5233422	Identifier	r		5233413	1					
ANR	5233423	ForStatement	for ( ; * r ; r ++ )		5233413	1					
ANR	5233424	Condition	* r	2354:8:50191:50192	5233413	0	True				
ANR	5233425	UnaryOperationExpression	* r		5233413	0					
ANR	5233426	UnaryOperator	*		5233413	0					
ANR	5233427	Identifier	r		5233413	1					
ANR	5233428	PostIncDecOperationExpression	r ++	2354:12:50195:50197	5233413	1	True				
ANR	5233429	Identifier	r		5233413	0					
ANR	5233430	IncDec	++		5233413	1					
ANR	5233431	CompoundStatement		3:17:38:38	5233413	2					
ANR	5233432	IfStatement	"if ( * r == ',' )"		5233413	0					
ANR	5233433	Condition	"* r == ','"	2355:6:50208:50216	5233413	0	True				
ANR	5233434	EqualityExpression	"* r == ','"		5233413	0		==			
ANR	5233435	UnaryOperationExpression	* r		5233413	0					
ANR	5233436	UnaryOperator	*		5233413	0					
ANR	5233437	Identifier	r		5233413	1					
ANR	5233438	PrimaryExpression	"','"		5233413	1					
ANR	5233439	CompoundStatement		4:17:57:57	5233413	1					
ANR	5233440	ExpressionStatement	"cb ( u , atoi ( p ) )"	2356:3:50224:50240	5233413	0	True				
ANR	5233441	CallExpression	"cb ( u , atoi ( p ) )"		5233413	0					
ANR	5233442	Callee	cb		5233413	0					
ANR	5233443	Identifier	cb		5233413	0					
ANR	5233444	ArgumentList	u		5233413	1					
ANR	5233445	Argument	u		5233413	0					
ANR	5233446	Identifier	u		5233413	0					
ANR	5233447	Argument	atoi ( p )		5233413	1					
ANR	5233448	CallExpression	atoi ( p )		5233413	0					
ANR	5233449	Callee	atoi		5233413	0					
ANR	5233450	Identifier	atoi		5233413	0					
ANR	5233451	ArgumentList	p		5233413	1					
ANR	5233452	Argument	p		5233413	0					
ANR	5233453	Identifier	p		5233413	0					
ANR	5233454	ExpressionStatement	p = r + 1	2357:3:50245:50254	5233413	1	True				
ANR	5233455	AssignmentExpression	p = r + 1		5233413	0		=			
ANR	5233456	Identifier	p		5233413	0					
ANR	5233457	AdditiveExpression	r + 1		5233413	1		+			
ANR	5233458	Identifier	r		5233413	0					
ANR	5233459	PrimaryExpression	1		5233413	1					
ANR	5233460	IfStatement	if ( * r == '-' )		5233413	1					
ANR	5233461	Condition	* r == '-'	2359:6:50266:50274	5233413	0	True				
ANR	5233462	EqualityExpression	* r == '-'		5233413	0		==			
ANR	5233463	UnaryOperationExpression	* r		5233413	0					
ANR	5233464	UnaryOperator	*		5233413	0					
ANR	5233465	Identifier	r		5233413	1					
ANR	5233466	PrimaryExpression	'-'		5233413	1					
ANR	5233467	CompoundStatement		8:17:115:115	5233413	1					
ANR	5233468	IfStatement	if ( p != r )		5233413	0					
ANR	5233469	Condition	p != r	2360:7:50286:50291	5233413	0	True				
ANR	5233470	EqualityExpression	p != r		5233413	0		!=			
ANR	5233471	Identifier	p		5233413	0					
ANR	5233472	Identifier	r		5233413	1					
ANR	5233473	CompoundStatement		11:4:163:184	5233413	1					
ANR	5233474	IdentifierDeclStatement	int from = atoi ( p ) ;	2361:4:50300:50319	5233413	0	True				
ANR	5233475	IdentifierDecl	from = atoi ( p )		5233413	0					
ANR	5233476	IdentifierDeclType	int		5233413	0					
ANR	5233477	Identifier	from		5233413	1					
ANR	5233478	AssignmentExpression	from = atoi ( p )		5233413	2		=			
ANR	5233479	Identifier	from		5233413	0					
ANR	5233480	CallExpression	atoi ( p )		5233413	1					
ANR	5233481	Callee	atoi		5233413	0					
ANR	5233482	Identifier	atoi		5233413	0					
ANR	5233483	ArgumentList	p		5233413	1					
ANR	5233484	Argument	p		5233413	0					
ANR	5233485	Identifier	p		5233413	0					
ANR	5233486	IdentifierDeclStatement	int to = atoi ( r + 1 ) ;	2362:4:50325:50346	5233413	1	True				
ANR	5233487	IdentifierDecl	to = atoi ( r + 1 )		5233413	0					
ANR	5233488	IdentifierDeclType	int		5233413	0					
ANR	5233489	Identifier	to		5233413	1					
ANR	5233490	AssignmentExpression	to = atoi ( r + 1 )		5233413	2		=			
ANR	5233491	Identifier	to		5233413	0					
ANR	5233492	CallExpression	atoi ( r + 1 )		5233413	1					
ANR	5233493	Callee	atoi		5233413	0					
ANR	5233494	Identifier	atoi		5233413	0					
ANR	5233495	ArgumentList	r + 1		5233413	1					
ANR	5233496	Argument	r + 1		5233413	0					
ANR	5233497	AdditiveExpression	r + 1		5233413	0		+			
ANR	5233498	Identifier	r		5233413	0					
ANR	5233499	PrimaryExpression	1		5233413	1					
ANR	5233500	ForStatement	for ( ; from <= to ; from ++ )		5233413	2					
ANR	5233501	Condition	from <= to	2363:11:50359:50368	5233413	0	True				
ANR	5233502	RelationalExpression	from <= to		5233413	0		<=			
ANR	5233503	Identifier	from		5233413	0					
ANR	5233504	Identifier	to		5233413	1					
ANR	5233505	PostIncDecOperationExpression	from ++	2363:23:50371:50376	5233413	1	True				
ANR	5233506	Identifier	from		5233413	0					
ANR	5233507	IncDec	++		5233413	1					
ANR	5233508	CompoundStatement		12:31:217:217	5233413	2					
ANR	5233509	ExpressionStatement	"cb ( u , from )"	2364:5:50386:50398	5233413	0	True				
ANR	5233510	CallExpression	"cb ( u , from )"		5233413	0					
ANR	5233511	Callee	cb		5233413	0					
ANR	5233512	Identifier	cb		5233413	0					
ANR	5233513	ArgumentList	u		5233413	1					
ANR	5233514	Argument	u		5233413	0					
ANR	5233515	Identifier	u		5233413	0					
ANR	5233516	Argument	from		5233413	1					
ANR	5233517	Identifier	from		5233413	0					
ANR	5233518	ElseStatement	else		5233413	0					
ANR	5233519	CompoundStatement		15:10:254:254	5233413	0					
ANR	5233520	ExpressionStatement	"fprintf ( stderr , ""Invalid range\\n"" )"	2367:4:50422:50457	5233413	0	True				
ANR	5233521	CallExpression	"fprintf ( stderr , ""Invalid range\\n"" )"		5233413	0					
ANR	5233522	Callee	fprintf		5233413	0					
ANR	5233523	Identifier	fprintf		5233413	0					
ANR	5233524	ArgumentList	stderr		5233413	1					
ANR	5233525	Argument	stderr		5233413	0					
ANR	5233526	Identifier	stderr		5233413	0					
ANR	5233527	Argument	"""Invalid range\\n"""		5233413	1					
ANR	5233528	PrimaryExpression	"""Invalid range\\n"""		5233413	0					
ANR	5233529	ForStatement	"for ( r ++ ; * r && * r != ',' && * r != '-' ; r ++ )"		5233413	1					
ANR	5233530	ForInit	r ++ ;	2369:8:50472:50475	5233413	0	True				
ANR	5233531	PostIncDecOperationExpression	r ++		5233413	0					
ANR	5233532	Identifier	r		5233413	0					
ANR	5233533	IncDec	++		5233413	1					
ANR	5233534	Condition	"* r && * r != ',' && * r != '-'"	2369:13:50477:50504	5233413	1	True				
ANR	5233535	AndExpression	"* r && * r != ',' && * r != '-'"		5233413	0		&&			
ANR	5233536	UnaryOperationExpression	* r		5233413	0					
ANR	5233537	UnaryOperator	*		5233413	0					
ANR	5233538	Identifier	r		5233413	1					
ANR	5233539	AndExpression	"* r != ',' && * r != '-'"		5233413	1		&&			
ANR	5233540	EqualityExpression	"* r != ','"		5233413	0		!=			
ANR	5233541	UnaryOperationExpression	* r		5233413	0					
ANR	5233542	UnaryOperator	*		5233413	0					
ANR	5233543	Identifier	r		5233413	1					
ANR	5233544	PrimaryExpression	"','"		5233413	1					
ANR	5233545	EqualityExpression	* r != '-'		5233413	1		!=			
ANR	5233546	UnaryOperationExpression	* r		5233413	0					
ANR	5233547	UnaryOperator	*		5233413	0					
ANR	5233548	Identifier	r		5233413	1					
ANR	5233549	PrimaryExpression	'-'		5233413	1					
ANR	5233550	PostIncDecOperationExpression	r ++	2369:43:50507:50509	5233413	2	True				
ANR	5233551	Identifier	r		5233413	0					
ANR	5233552	IncDec	++		5233413	1					
ANR	5233553	CompoundStatement		18:48:350:350	5233413	3					
ANR	5233554	ExpressionStatement		2370:4:50518:50518	5233413	0	True				
ANR	5233555	ExpressionStatement	p = r	2372:3:50528:50533	5233413	2	True				
ANR	5233556	AssignmentExpression	p = r		5233413	0		=			
ANR	5233557	Identifier	p		5233413	0					
ANR	5233558	Identifier	r		5233413	1					
ANR	5233559	IfStatement	if ( * p )		5233413	2					
ANR	5233560	Condition	* p	2375:5:50547:50548	5233413	0	True				
ANR	5233561	UnaryOperationExpression	* p		5233413	0					
ANR	5233562	UnaryOperator	*		5233413	0					
ANR	5233563	Identifier	p		5233413	1					
ANR	5233564	CompoundStatement		24:9:389:389	5233413	1					
ANR	5233565	ExpressionStatement	"cb ( u , atoi ( p ) )"	2376:2:50555:50571	5233413	0	True				
ANR	5233566	CallExpression	"cb ( u , atoi ( p ) )"		5233413	0					
ANR	5233567	Callee	cb		5233413	0					
ANR	5233568	Identifier	cb		5233413	0					
ANR	5233569	ArgumentList	u		5233413	1					
ANR	5233570	Argument	u		5233413	0					
ANR	5233571	Identifier	u		5233413	0					
ANR	5233572	Argument	atoi ( p )		5233413	1					
ANR	5233573	CallExpression	atoi ( p )		5233413	0					
ANR	5233574	Callee	atoi		5233413	0					
ANR	5233575	Identifier	atoi		5233413	0					
ANR	5233576	ArgumentList	p		5233413	1					
ANR	5233577	Argument	p		5233413	0					
ANR	5233578	Identifier	p		5233413	0					
ANR	5233579	ReturnType	R_API void		5233413	1					
ANR	5233580	Identifier	r_str_range_foreach		5233413	2					
ANR	5233581	ParameterList	"const char * r , RStrRangeCallback cb , void * u"		5233413	3					
ANR	5233582	Parameter	const char * r	2352:31:50115:50127	5233413	0	True				
ANR	5233583	ParameterType	const char *		5233413	0					
ANR	5233584	Identifier	r		5233413	1					
ANR	5233585	Parameter	RStrRangeCallback cb	2352:46:50130:50149	5233413	1	True				
ANR	5233586	ParameterType	RStrRangeCallback		5233413	0					
ANR	5233587	Identifier	cb		5233413	1					
ANR	5233588	Parameter	void * u	2352:68:50152:50158	5233413	2	True				
ANR	5233589	ParameterType	void *		5233413	0					
ANR	5233590	Identifier	u		5233413	1					
ANR	5233591	CFGEntryNode	ENTRY		5233413		True				
ANR	5233592	CFGExitNode	EXIT		5233413		True				
ANR	5233593	Symbol	p		5233413						
ANR	5233594	Symbol	atoi		5233413						
ANR	5233595	Symbol	r		5233413						
ANR	5233596	Symbol	u		5233413						
ANR	5233597	Symbol	from		5233413						
ANR	5233598	Symbol	* p		5233413						
ANR	5233599	Symbol	to		5233413						
ANR	5233600	Symbol	* r		5233413						
ANR	5233601	Symbol	stderr		5233413						
ANR	5233602	Symbol	cb		5233413						
ANR	5233603	Function	r_str_range_in	2380:0:50579:51349							
ANR	5233604	FunctionDef	"r_str_range_in (const char * r , ut64 addr)"		5233603	0					
ANR	5233605	CompoundStatement		2380:52:50631:51349	5233603	0					
ANR	5233606	IdentifierDeclStatement	const char * p = r ;	2381:1:50634:50651	5233603	0	True				
ANR	5233607	IdentifierDecl	* p = r		5233603	0					
ANR	5233608	IdentifierDeclType	const char *		5233603	0					
ANR	5233609	Identifier	p		5233603	1					
ANR	5233610	AssignmentExpression	* p = r		5233603	2		=			
ANR	5233611	Identifier	r		5233603	0					
ANR	5233612	Identifier	r		5233603	1					
ANR	5233613	IdentifierDeclStatement	ut64 min = UT64_MAX ;	2382:1:50654:50673	5233603	1	True				
ANR	5233614	IdentifierDecl	min = UT64_MAX		5233603	0					
ANR	5233615	IdentifierDeclType	ut64		5233603	0					
ANR	5233616	Identifier	min		5233603	1					
ANR	5233617	AssignmentExpression	min = UT64_MAX		5233603	2		=			
ANR	5233618	Identifier	UT64_MAX		5233603	0					
ANR	5233619	Identifier	UT64_MAX		5233603	1					
ANR	5233620	IdentifierDeclStatement	ut64 max = 0 ;	2383:1:50676:50688	5233603	2	True				
ANR	5233621	IdentifierDecl	max = 0		5233603	0					
ANR	5233622	IdentifierDeclType	ut64		5233603	0					
ANR	5233623	Identifier	max		5233603	1					
ANR	5233624	AssignmentExpression	max = 0		5233603	2		=			
ANR	5233625	Identifier	max		5233603	0					
ANR	5233626	PrimaryExpression	0		5233603	1					
ANR	5233627	IfStatement	if ( ! r )		5233603	3					
ANR	5233628	Condition	! r	2384:5:50695:50696	5233603	0	True				
ANR	5233629	UnaryOperationExpression	! r		5233603	0					
ANR	5233630	UnaryOperator	!		5233603	0					
ANR	5233631	Identifier	r		5233603	1					
ANR	5233632	CompoundStatement		5:9:67:67	5233603	1					
ANR	5233633	ReturnStatement	return false ;	2385:2:50703:50715	5233603	0	True				
ANR	5233634	Identifier	false		5233603	0					
ANR	5233635	ForStatement	for ( ; * r ; r ++ )		5233603	4					
ANR	5233636	Condition	* r	2387:8:50728:50729	5233603	0	True				
ANR	5233637	UnaryOperationExpression	* r		5233603	0					
ANR	5233638	UnaryOperator	*		5233603	0					
ANR	5233639	Identifier	r		5233603	1					
ANR	5233640	PostIncDecOperationExpression	r ++	2387:12:50732:50734	5233603	1	True				
ANR	5233641	Identifier	r		5233603	0					
ANR	5233642	IncDec	++		5233603	1					
ANR	5233643	CompoundStatement		8:17:105:105	5233603	2					
ANR	5233644	IfStatement	"if ( * r == ',' )"		5233603	0					
ANR	5233645	Condition	"* r == ','"	2388:6:50745:50753	5233603	0	True				
ANR	5233646	EqualityExpression	"* r == ','"		5233603	0		==			
ANR	5233647	UnaryOperationExpression	* r		5233603	0					
ANR	5233648	UnaryOperator	*		5233603	0					
ANR	5233649	Identifier	r		5233603	1					
ANR	5233650	PrimaryExpression	"','"		5233603	1					
ANR	5233651	CompoundStatement		9:17:124:124	5233603	1					
ANR	5233652	IfStatement	if ( max == 0 )		5233603	0					
ANR	5233653	Condition	max == 0	2389:7:50765:50772	5233603	0	True				
ANR	5233654	EqualityExpression	max == 0		5233603	0		==			
ANR	5233655	Identifier	max		5233603	0					
ANR	5233656	PrimaryExpression	0		5233603	1					
ANR	5233657	CompoundStatement		10:17:143:143	5233603	1					
ANR	5233658	IfStatement	"if ( addr == r_num_get ( NULL , p ) )"		5233603	0					
ANR	5233659	Condition	"addr == r_num_get ( NULL , p )"	2390:8:50785:50811	5233603	0	True				
ANR	5233660	EqualityExpression	"addr == r_num_get ( NULL , p )"		5233603	0		==			
ANR	5233661	Identifier	addr		5233603	0					
ANR	5233662	CallExpression	"r_num_get ( NULL , p )"		5233603	1					
ANR	5233663	Callee	r_num_get		5233603	0					
ANR	5233664	Identifier	r_num_get		5233603	0					
ANR	5233665	ArgumentList	NULL		5233603	1					
ANR	5233666	Argument	NULL		5233603	0					
ANR	5233667	Identifier	NULL		5233603	0					
ANR	5233668	Argument	p		5233603	1					
ANR	5233669	Identifier	p		5233603	0					
ANR	5233670	CompoundStatement		11:37:182:182	5233603	1					
ANR	5233671	ReturnStatement	return true ;	2391:5:50821:50832	5233603	0	True				
ANR	5233672	Identifier	true		5233603	0					
ANR	5233673	ElseStatement	else		5233603	0					
ANR	5233674	CompoundStatement		14:10:218:218	5233603	0					
ANR	5233675	IfStatement	"if ( addr >= min && addr <= r_num_get ( NULL , p ) )"		5233603	0					
ANR	5233676	Condition	"addr >= min && addr <= r_num_get ( NULL , p )"	2394:8:50860:50901	5233603	0	True				
ANR	5233677	AndExpression	"addr >= min && addr <= r_num_get ( NULL , p )"		5233603	0		&&			
ANR	5233678	RelationalExpression	addr >= min		5233603	0		>=			
ANR	5233679	Identifier	addr		5233603	0					
ANR	5233680	Identifier	min		5233603	1					
ANR	5233681	RelationalExpression	"addr <= r_num_get ( NULL , p )"		5233603	1		<=			
ANR	5233682	Identifier	addr		5233603	0					
ANR	5233683	CallExpression	"r_num_get ( NULL , p )"		5233603	1					
ANR	5233684	Callee	r_num_get		5233603	0					
ANR	5233685	Identifier	r_num_get		5233603	0					
ANR	5233686	ArgumentList	NULL		5233603	1					
ANR	5233687	Argument	NULL		5233603	0					
ANR	5233688	Identifier	NULL		5233603	0					
ANR	5233689	Argument	p		5233603	1					
ANR	5233690	Identifier	p		5233603	0					
ANR	5233691	CompoundStatement		15:52:272:272	5233603	1					
ANR	5233692	ReturnStatement	return true ;	2395:5:50911:50922	5233603	0	True				
ANR	5233693	Identifier	true		5233603	0					
ANR	5233694	ExpressionStatement	p = r + 1	2398:3:50938:50947	5233603	1	True				
ANR	5233695	AssignmentExpression	p = r + 1		5233603	0		=			
ANR	5233696	Identifier	p		5233603	0					
ANR	5233697	AdditiveExpression	r + 1		5233603	1		+			
ANR	5233698	Identifier	r		5233603	0					
ANR	5233699	PrimaryExpression	1		5233603	1					
ANR	5233700	IfStatement	if ( * r == '-' )		5233603	1					
ANR	5233701	Condition	* r == '-'	2400:6:50959:50967	5233603	0	True				
ANR	5233702	EqualityExpression	* r == '-'		5233603	0		==			
ANR	5233703	UnaryOperationExpression	* r		5233603	0					
ANR	5233704	UnaryOperator	*		5233603	0					
ANR	5233705	Identifier	r		5233603	1					
ANR	5233706	PrimaryExpression	'-'		5233603	1					
ANR	5233707	CompoundStatement		21:17:338:338	5233603	1					
ANR	5233708	IfStatement	if ( p != r )		5233603	0					
ANR	5233709	Condition	p != r	2401:7:50979:50984	5233603	0	True				
ANR	5233710	EqualityExpression	p != r		5233603	0		!=			
ANR	5233711	Identifier	p		5233603	0					
ANR	5233712	Identifier	r		5233603	1					
ANR	5233713	CompoundStatement		24:4:398:431	5233603	1					
ANR	5233714	IdentifierDeclStatement	"ut64 from = r_num_get ( NULL , p ) ;"	2402:4:50993:51024	5233603	0	True				
ANR	5233715	IdentifierDecl	"from = r_num_get ( NULL , p )"		5233603	0					
ANR	5233716	IdentifierDeclType	ut64		5233603	0					
ANR	5233717	Identifier	from		5233603	1					
ANR	5233718	AssignmentExpression	"from = r_num_get ( NULL , p )"		5233603	2		=			
ANR	5233719	Identifier	from		5233603	0					
ANR	5233720	CallExpression	"r_num_get ( NULL , p )"		5233603	1					
ANR	5233721	Callee	r_num_get		5233603	0					
ANR	5233722	Identifier	r_num_get		5233603	0					
ANR	5233723	ArgumentList	NULL		5233603	1					
ANR	5233724	Argument	NULL		5233603	0					
ANR	5233725	Identifier	NULL		5233603	0					
ANR	5233726	Argument	p		5233603	1					
ANR	5233727	Identifier	p		5233603	0					
ANR	5233728	IdentifierDeclStatement	"ut64 to = r_num_get ( NULL , r + 1 ) ;"	2403:4:51030:51063	5233603	1	True				
ANR	5233729	IdentifierDecl	"to = r_num_get ( NULL , r + 1 )"		5233603	0					
ANR	5233730	IdentifierDeclType	ut64		5233603	0					
ANR	5233731	Identifier	to		5233603	1					
ANR	5233732	AssignmentExpression	"to = r_num_get ( NULL , r + 1 )"		5233603	2		=			
ANR	5233733	Identifier	to		5233603	0					
ANR	5233734	CallExpression	"r_num_get ( NULL , r + 1 )"		5233603	1					
ANR	5233735	Callee	r_num_get		5233603	0					
ANR	5233736	Identifier	r_num_get		5233603	0					
ANR	5233737	ArgumentList	NULL		5233603	1					
ANR	5233738	Argument	NULL		5233603	0					
ANR	5233739	Identifier	NULL		5233603	0					
ANR	5233740	Argument	r + 1		5233603	1					
ANR	5233741	AdditiveExpression	r + 1		5233603	0		+			
ANR	5233742	Identifier	r		5233603	0					
ANR	5233743	PrimaryExpression	1		5233603	1					
ANR	5233744	IfStatement	if ( addr >= from && addr <= to )		5233603	2					
ANR	5233745	Condition	addr >= from && addr <= to	2404:8:51073:51098	5233603	0	True				
ANR	5233746	AndExpression	addr >= from && addr <= to		5233603	0		&&			
ANR	5233747	RelationalExpression	addr >= from		5233603	0		>=			
ANR	5233748	Identifier	addr		5233603	0					
ANR	5233749	Identifier	from		5233603	1					
ANR	5233750	RelationalExpression	addr <= to		5233603	1		<=			
ANR	5233751	Identifier	addr		5233603	0					
ANR	5233752	Identifier	to		5233603	1					
ANR	5233753	CompoundStatement		25:36:469:469	5233603	1					
ANR	5233754	ReturnStatement	return true ;	2405:5:51108:51119	5233603	0	True				
ANR	5233755	Identifier	true		5233603	0					
ANR	5233756	ElseStatement	else		5233603	0					
ANR	5233757	CompoundStatement		28:10:505:505	5233603	0					
ANR	5233758	ExpressionStatement	"fprintf ( stderr , ""Invalid range\\n"" )"	2408:4:51143:51178	5233603	0	True				
ANR	5233759	CallExpression	"fprintf ( stderr , ""Invalid range\\n"" )"		5233603	0					
ANR	5233760	Callee	fprintf		5233603	0					
ANR	5233761	Identifier	fprintf		5233603	0					
ANR	5233762	ArgumentList	stderr		5233603	1					
ANR	5233763	Argument	stderr		5233603	0					
ANR	5233764	Identifier	stderr		5233603	0					
ANR	5233765	Argument	"""Invalid range\\n"""		5233603	1					
ANR	5233766	PrimaryExpression	"""Invalid range\\n"""		5233603	0					
ANR	5233767	ForStatement	"for ( r ++ ; * r && * r != ',' && * r != '-' ; r ++ )"		5233603	1					
ANR	5233768	ForInit	r ++ ;	2410:8:51193:51196	5233603	0	True				
ANR	5233769	PostIncDecOperationExpression	r ++		5233603	0					
ANR	5233770	Identifier	r		5233603	0					
ANR	5233771	IncDec	++		5233603	1					
ANR	5233772	Condition	"* r && * r != ',' && * r != '-'"	2410:13:51198:51225	5233603	1	True				
ANR	5233773	AndExpression	"* r && * r != ',' && * r != '-'"		5233603	0		&&			
ANR	5233774	UnaryOperationExpression	* r		5233603	0					
ANR	5233775	UnaryOperator	*		5233603	0					
ANR	5233776	Identifier	r		5233603	1					
ANR	5233777	AndExpression	"* r != ',' && * r != '-'"		5233603	1		&&			
ANR	5233778	EqualityExpression	"* r != ','"		5233603	0		!=			
ANR	5233779	UnaryOperationExpression	* r		5233603	0					
ANR	5233780	UnaryOperator	*		5233603	0					
ANR	5233781	Identifier	r		5233603	1					
ANR	5233782	PrimaryExpression	"','"		5233603	1					
ANR	5233783	EqualityExpression	* r != '-'		5233603	1		!=			
ANR	5233784	UnaryOperationExpression	* r		5233603	0					
ANR	5233785	UnaryOperator	*		5233603	0					
ANR	5233786	Identifier	r		5233603	1					
ANR	5233787	PrimaryExpression	'-'		5233603	1					
ANR	5233788	PostIncDecOperationExpression	r ++	2410:43:51228:51230	5233603	2	True				
ANR	5233789	Identifier	r		5233603	0					
ANR	5233790	IncDec	++		5233603	1					
ANR	5233791	CompoundStatement		31:48:601:601	5233603	3					
ANR	5233792	ExpressionStatement		2411:4:51239:51239	5233603	0	True				
ANR	5233793	ExpressionStatement	p = r	2413:3:51249:51254	5233603	2	True				
ANR	5233794	AssignmentExpression	p = r		5233603	0		=			
ANR	5233795	Identifier	p		5233603	0					
ANR	5233796	Identifier	r		5233603	1					
ANR	5233797	IfStatement	if ( * p )		5233603	5					
ANR	5233798	Condition	* p	2416:5:51268:51269	5233603	0	True				
ANR	5233799	UnaryOperationExpression	* p		5233603	0					
ANR	5233800	UnaryOperator	*		5233603	0					
ANR	5233801	Identifier	p		5233603	1					
ANR	5233802	CompoundStatement		37:9:640:640	5233603	1					
ANR	5233803	IfStatement	"if ( addr == r_num_get ( NULL , p ) )"		5233603	0					
ANR	5233804	Condition	"addr == r_num_get ( NULL , p )"	2417:6:51280:51306	5233603	0	True				
ANR	5233805	EqualityExpression	"addr == r_num_get ( NULL , p )"		5233603	0		==			
ANR	5233806	Identifier	addr		5233603	0					
ANR	5233807	CallExpression	"r_num_get ( NULL , p )"		5233603	1					
ANR	5233808	Callee	r_num_get		5233603	0					
ANR	5233809	Identifier	r_num_get		5233603	0					
ANR	5233810	ArgumentList	NULL		5233603	1					
ANR	5233811	Argument	NULL		5233603	0					
ANR	5233812	Identifier	NULL		5233603	0					
ANR	5233813	Argument	p		5233603	1					
ANR	5233814	Identifier	p		5233603	0					
ANR	5233815	CompoundStatement		38:35:677:677	5233603	1					
ANR	5233816	ReturnStatement	return true ;	2418:3:51314:51325	5233603	0	True				
ANR	5233817	Identifier	true		5233603	0					
ANR	5233818	ReturnStatement	return false ;	2421:1:51335:51347	5233603	6	True				
ANR	5233819	Identifier	false		5233603	0					
ANR	5233820	ReturnType	R_API bool		5233603	1					
ANR	5233821	Identifier	r_str_range_in		5233603	2					
ANR	5233822	ParameterList	"const char * r , ut64 addr"		5233603	3					
ANR	5233823	Parameter	const char * r	2380:26:50605:50617	5233603	0	True				
ANR	5233824	ParameterType	const char *		5233603	0					
ANR	5233825	Identifier	r		5233603	1					
ANR	5233826	Parameter	ut64 addr	2380:41:50620:50628	5233603	1	True				
ANR	5233827	ParameterType	ut64		5233603	0					
ANR	5233828	Identifier	addr		5233603	1					
ANR	5233829	CFGEntryNode	ENTRY		5233603		True				
ANR	5233830	CFGExitNode	EXIT		5233603		True				
ANR	5233831	Symbol	NULL		5233603						
ANR	5233832	Symbol	max		5233603						
ANR	5233833	Symbol	false		5233603						
ANR	5233834	Symbol	stderr		5233603						
ANR	5233835	Symbol	p		5233603						
ANR	5233836	Symbol	r		5233603						
ANR	5233837	Symbol	min		5233603						
ANR	5233838	Symbol	true		5233603						
ANR	5233839	Symbol	r_num_get		5233603						
ANR	5233840	Symbol	from		5233603						
ANR	5233841	Symbol	* p		5233603						
ANR	5233842	Symbol	to		5233603						
ANR	5233843	Symbol	addr		5233603						
ANR	5233844	Symbol	UT64_MAX		5233603						
ANR	5233845	Symbol	* r		5233603						
ANR	5233846	Function	r_str_uri_decode	2426:0:51460:51657							
ANR	5233847	FunctionDef	r_str_uri_decode (char * s)		5233846	0					
ANR	5233848	CompoundStatement		2426:37:51497:51657	5233846	0					
ANR	5233849	IdentifierDeclStatement	int n ;	2427:1:51500:51505	5233846	0	True				
ANR	5233850	IdentifierDecl	n		5233846	0					
ANR	5233851	IdentifierDeclType	int		5233846	0					
ANR	5233852	Identifier	n		5233846	1					
ANR	5233853	IdentifierDeclStatement	char * d ;	2428:1:51508:51515	5233846	1	True				
ANR	5233854	IdentifierDecl	* d		5233846	0					
ANR	5233855	IdentifierDeclType	char *		5233846	0					
ANR	5233856	Identifier	d		5233846	1					
ANR	5233857	ForStatement	"for ( d = s ; * s ; s ++ , d ++ )"		5233846	2					
ANR	5233858	ForInit	d = s ;	2429:6:51523:51528	5233846	0	True				
ANR	5233859	AssignmentExpression	d = s		5233846	0		=			
ANR	5233860	Identifier	d		5233846	0					
ANR	5233861	Identifier	s		5233846	1					
ANR	5233862	Condition	* s	2429:13:51530:51531	5233846	1	True				
ANR	5233863	UnaryOperationExpression	* s		5233846	0					
ANR	5233864	UnaryOperator	*		5233846	0					
ANR	5233865	Identifier	s		5233846	1					
ANR	5233866	Expression	"s ++ , d ++"	2429:17:51534:51541	5233846	2	True				
ANR	5233867	PostIncDecOperationExpression	s ++		5233846	0					
ANR	5233868	Identifier	s		5233846	0					
ANR	5233869	IncDec	++		5233846	1					
ANR	5233870	PostIncDecOperationExpression	d ++		5233846	1					
ANR	5233871	Identifier	d		5233846	0					
ANR	5233872	IncDec	++		5233846	1					
ANR	5233873	CompoundStatement		4:27:46:46	5233846	3					
ANR	5233874	IfStatement	if ( * s == '%' )		5233846	0					
ANR	5233875	Condition	* s == '%'	2430:6:51552:51560	5233846	0	True				
ANR	5233876	EqualityExpression	* s == '%'		5233846	0		==			
ANR	5233877	UnaryOperationExpression	* s		5233846	0					
ANR	5233878	UnaryOperator	*		5233846	0					
ANR	5233879	Identifier	s		5233846	1					
ANR	5233880	PrimaryExpression	'%'		5233846	1					
ANR	5233881	CompoundStatement		5:17:65:65	5233846	1					
ANR	5233882	ExpressionStatement	"sscanf ( s + 1 , ""%02x"" , & n )"	2431:3:51568:51594	5233846	0	True				
ANR	5233883	CallExpression	"sscanf ( s + 1 , ""%02x"" , & n )"		5233846	0					
ANR	5233884	Callee	sscanf		5233846	0					
ANR	5233885	Identifier	sscanf		5233846	0					
ANR	5233886	ArgumentList	s + 1		5233846	1					
ANR	5233887	Argument	s + 1		5233846	0					
ANR	5233888	AdditiveExpression	s + 1		5233846	0		+			
ANR	5233889	Identifier	s		5233846	0					
ANR	5233890	PrimaryExpression	1		5233846	1					
ANR	5233891	Argument	"""%02x"""		5233846	1					
ANR	5233892	PrimaryExpression	"""%02x"""		5233846	0					
ANR	5233893	Argument	& n		5233846	2					
ANR	5233894	UnaryOperationExpression	& n		5233846	0					
ANR	5233895	UnaryOperator	&		5233846	0					
ANR	5233896	Identifier	n		5233846	1					
ANR	5233897	ExpressionStatement	* d = n	2432:3:51599:51605	5233846	1	True				
ANR	5233898	AssignmentExpression	* d = n		5233846	0		=			
ANR	5233899	UnaryOperationExpression	* d		5233846	0					
ANR	5233900	UnaryOperator	*		5233846	0					
ANR	5233901	Identifier	d		5233846	1					
ANR	5233902	Identifier	n		5233846	1					
ANR	5233903	ExpressionStatement	s += 2	2433:3:51610:51616	5233846	2	True				
ANR	5233904	AssignmentExpression	s += 2		5233846	0		+=			
ANR	5233905	Identifier	s		5233846	0					
ANR	5233906	PrimaryExpression	2		5233846	1					
ANR	5233907	ElseStatement	else		5233846	0					
ANR	5233908	CompoundStatement		9:9:129:129	5233846	0					
ANR	5233909	ExpressionStatement	* d = * s	2435:3:51632:51639	5233846	0	True				
ANR	5233910	AssignmentExpression	* d = * s		5233846	0		=			
ANR	5233911	UnaryOperationExpression	* d		5233846	0					
ANR	5233912	UnaryOperator	*		5233846	0					
ANR	5233913	Identifier	d		5233846	1					
ANR	5233914	UnaryOperationExpression	* s		5233846	1					
ANR	5233915	UnaryOperator	*		5233846	0					
ANR	5233916	Identifier	s		5233846	1					
ANR	5233917	ExpressionStatement	* d = 0	2438:1:51649:51655	5233846	3	True				
ANR	5233918	AssignmentExpression	* d = 0		5233846	0		=			
ANR	5233919	UnaryOperationExpression	* d		5233846	0					
ANR	5233920	UnaryOperator	*		5233846	0					
ANR	5233921	Identifier	d		5233846	1					
ANR	5233922	PrimaryExpression	0		5233846	1					
ANR	5233923	ReturnType	R_API void		5233846	1					
ANR	5233924	Identifier	r_str_uri_decode		5233846	2					
ANR	5233925	ParameterList	char * s		5233846	3					
ANR	5233926	Parameter	char * s	2426:28:51488:51494	5233846	0	True				
ANR	5233927	ParameterType	char *		5233846	0					
ANR	5233928	Identifier	s		5233846	1					
ANR	5233929	CFGEntryNode	ENTRY		5233846		True				
ANR	5233930	CFGExitNode	EXIT		5233846		True				
ANR	5233931	Symbol	s		5233846						
ANR	5233932	Symbol	d		5233846						
ANR	5233933	Symbol	& n		5233846						
ANR	5233934	Symbol	* s		5233846						
ANR	5233935	Symbol	n		5233846						
ANR	5233936	Symbol	* d		5233846						
ANR	5233937	Function	r_str_uri_encode	2441:0:51660:52162							
ANR	5233938	FunctionDef	r_str_uri_encode (const char * s)		5233937	0					
ANR	5233939	CompoundStatement		2441:44:51704:52162	5233937	0					
ANR	5233940	IdentifierDeclStatement	"char ch [ 4 ] , * d , * od ;"	2442:1:51707:51726	5233937	0	True				
ANR	5233941	IdentifierDecl	ch [ 4 ]		5233937	0					
ANR	5233942	IdentifierDeclType	char [ 4 ]		5233937	0					
ANR	5233943	Identifier	ch		5233937	1					
ANR	5233944	PrimaryExpression	4		5233937	2					
ANR	5233945	IdentifierDecl	* d		5233937	1					
ANR	5233946	IdentifierDeclType	char *		5233937	0					
ANR	5233947	Identifier	d		5233937	1					
ANR	5233948	IdentifierDecl	* od		5233937	2					
ANR	5233949	IdentifierDeclType	char *		5233937	0					
ANR	5233950	Identifier	od		5233937	1					
ANR	5233951	IfStatement	if ( ! s )		5233937	1					
ANR	5233952	Condition	! s	2443:5:51733:51734	5233937	0	True				
ANR	5233953	UnaryOperationExpression	! s		5233937	0					
ANR	5233954	UnaryOperator	!		5233937	0					
ANR	5233955	Identifier	s		5233937	1					
ANR	5233956	CompoundStatement		3:9:32:32	5233937	1					
ANR	5233957	ReturnStatement	return NULL ;	2444:2:51741:51752	5233937	0	True				
ANR	5233958	Identifier	NULL		5233937	0					
ANR	5233959	ExpressionStatement	od = d = malloc ( 1 + ( strlen ( s ) * 4 ) )	2446:1:51758:51796	5233937	2	True				
ANR	5233960	AssignmentExpression	od = d = malloc ( 1 + ( strlen ( s ) * 4 ) )		5233937	0		=			
ANR	5233961	Identifier	od		5233937	0					
ANR	5233962	AssignmentExpression	d = malloc ( 1 + ( strlen ( s ) * 4 ) )		5233937	1		=			
ANR	5233963	Identifier	d		5233937	0					
ANR	5233964	CallExpression	malloc ( 1 + ( strlen ( s ) * 4 ) )		5233937	1					
ANR	5233965	Callee	malloc		5233937	0					
ANR	5233966	Identifier	malloc		5233937	0					
ANR	5233967	ArgumentList	1 + ( strlen ( s ) * 4 )		5233937	1					
ANR	5233968	Argument	1 + ( strlen ( s ) * 4 )		5233937	0					
ANR	5233969	AdditiveExpression	1 + ( strlen ( s ) * 4 )		5233937	0		+			
ANR	5233970	PrimaryExpression	1		5233937	0					
ANR	5233971	MultiplicativeExpression	strlen ( s ) * 4		5233937	1		*			
ANR	5233972	CallExpression	strlen ( s )		5233937	0					
ANR	5233973	Callee	strlen		5233937	0					
ANR	5233974	Identifier	strlen		5233937	0					
ANR	5233975	ArgumentList	s		5233937	1					
ANR	5233976	Argument	s		5233937	0					
ANR	5233977	Identifier	s		5233937	0					
ANR	5233978	PrimaryExpression	4		5233937	1					
ANR	5233979	IfStatement	if ( ! d )		5233937	3					
ANR	5233980	Condition	! d	2447:5:51803:51804	5233937	0	True				
ANR	5233981	UnaryOperationExpression	! d		5233937	0					
ANR	5233982	UnaryOperator	!		5233937	0					
ANR	5233983	Identifier	d		5233937	1					
ANR	5233984	CompoundStatement		7:9:102:102	5233937	1					
ANR	5233985	ReturnStatement	return NULL ;	2448:2:51811:51822	5233937	0	True				
ANR	5233986	Identifier	NULL		5233937	0					
ANR	5233987	ForStatement	for ( ; * s ; s ++ )		5233937	4					
ANR	5233988	Condition	* s	2450:8:51835:51836	5233937	0	True				
ANR	5233989	UnaryOperationExpression	* s		5233937	0					
ANR	5233990	UnaryOperator	*		5233937	0					
ANR	5233991	Identifier	s		5233937	1					
ANR	5233992	PostIncDecOperationExpression	s ++	2450:12:51839:51841	5233937	1	True				
ANR	5233993	Identifier	s		5233937	0					
ANR	5233994	IncDec	++		5233937	1					
ANR	5233995	CompoundStatement		10:17:139:139	5233937	2					
ANR	5233996	IfStatement	if ( ( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' ) )		5233937	0					
ANR	5233997	Condition	( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )	2451:5:51851:51922	5233937	0	True				
ANR	5233998	OrExpression	( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )		5233937	0		||			
ANR	5233999	AndExpression	* s >= '0' && * s <= '9'		5233937	0		&&			
ANR	5234000	RelationalExpression	* s >= '0'		5233937	0		>=			
ANR	5234001	UnaryOperationExpression	* s		5233937	0					
ANR	5234002	UnaryOperator	*		5233937	0					
ANR	5234003	Identifier	s		5233937	1					
ANR	5234004	PrimaryExpression	'0'		5233937	1					
ANR	5234005	RelationalExpression	* s <= '9'		5233937	1		<=			
ANR	5234006	UnaryOperationExpression	* s		5233937	0					
ANR	5234007	UnaryOperator	*		5233937	0					
ANR	5234008	Identifier	s		5233937	1					
ANR	5234009	PrimaryExpression	'9'		5233937	1					
ANR	5234010	OrExpression	( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )		5233937	1		||			
ANR	5234011	AndExpression	* s >= 'a' && * s <= 'z'		5233937	0		&&			
ANR	5234012	RelationalExpression	* s >= 'a'		5233937	0		>=			
ANR	5234013	UnaryOperationExpression	* s		5233937	0					
ANR	5234014	UnaryOperator	*		5233937	0					
ANR	5234015	Identifier	s		5233937	1					
ANR	5234016	PrimaryExpression	'a'		5233937	1					
ANR	5234017	RelationalExpression	* s <= 'z'		5233937	1		<=			
ANR	5234018	UnaryOperationExpression	* s		5233937	0					
ANR	5234019	UnaryOperator	*		5233937	0					
ANR	5234020	Identifier	s		5233937	1					
ANR	5234021	PrimaryExpression	'z'		5233937	1					
ANR	5234022	AndExpression	* s >= 'A' && * s <= 'Z'		5233937	1		&&			
ANR	5234023	RelationalExpression	* s >= 'A'		5233937	0		>=			
ANR	5234024	UnaryOperationExpression	* s		5233937	0					
ANR	5234025	UnaryOperator	*		5233937	0					
ANR	5234026	Identifier	s		5233937	1					
ANR	5234027	PrimaryExpression	'A'		5233937	1					
ANR	5234028	RelationalExpression	* s <= 'Z'		5233937	1		<=			
ANR	5234029	UnaryOperationExpression	* s		5233937	0					
ANR	5234030	UnaryOperator	*		5233937	0					
ANR	5234031	Identifier	s		5233937	1					
ANR	5234032	PrimaryExpression	'Z'		5233937	1					
ANR	5234033	CompoundStatement		13:27:220:220	5233937	1					
ANR	5234034	ExpressionStatement	* d ++ = * s	2454:3:51930:51939	5233937	0	True				
ANR	5234035	AssignmentExpression	* d ++ = * s		5233937	0		=			
ANR	5234036	UnaryOperationExpression	* d ++		5233937	0					
ANR	5234037	UnaryOperator	*		5233937	0					
ANR	5234038	PostIncDecOperationExpression	d ++		5233937	1					
ANR	5234039	Identifier	d		5233937	0					
ANR	5234040	IncDec	++		5233937	1					
ANR	5234041	UnaryOperationExpression	* s		5233937	1					
ANR	5234042	UnaryOperator	*		5233937	0					
ANR	5234043	Identifier	s		5233937	1					
ANR	5234044	ElseStatement	else		5233937	0					
ANR	5234045	CompoundStatement		15:9:245:245	5233937	0					
ANR	5234046	ExpressionStatement	* d ++ = '%'	2456:3:51955:51965	5233937	0	True				
ANR	5234047	AssignmentExpression	* d ++ = '%'		5233937	0		=			
ANR	5234048	UnaryOperationExpression	* d ++		5233937	0					
ANR	5234049	UnaryOperator	*		5233937	0					
ANR	5234050	PostIncDecOperationExpression	d ++		5233937	1					
ANR	5234051	Identifier	d		5233937	0					
ANR	5234052	IncDec	++		5233937	1					
ANR	5234053	PrimaryExpression	'%'		5233937	1					
ANR	5234054	ExpressionStatement	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"	2457:3:51970:52022	5233937	1	True				
ANR	5234055	CallExpression	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"		5233937	0					
ANR	5234056	Callee	snprintf		5233937	0					
ANR	5234057	Identifier	snprintf		5233937	0					
ANR	5234058	ArgumentList	ch		5233937	1					
ANR	5234059	Argument	ch		5233937	0					
ANR	5234060	Identifier	ch		5233937	0					
ANR	5234061	Argument	sizeof ( ch )		5233937	1					
ANR	5234062	SizeofExpression	sizeof ( ch )		5233937	0					
ANR	5234063	Sizeof	sizeof		5233937	0					
ANR	5234064	SizeofOperand	ch		5233937	1					
ANR	5234065	Argument	"""%02x"""		5233937	2					
ANR	5234066	PrimaryExpression	"""%02x"""		5233937	0					
ANR	5234067	Argument	0xff & ( ( ut8 ) * s )		5233937	3					
ANR	5234068	BitAndExpression	0xff & ( ( ut8 ) * s )		5233937	0		&			
ANR	5234069	PrimaryExpression	0xff		5233937	0					
ANR	5234070	CastExpression	( ut8 ) * s		5233937	1					
ANR	5234071	CastTarget	ut8		5233937	0					
ANR	5234072	UnaryOperationExpression	* s		5233937	1					
ANR	5234073	UnaryOperator	*		5233937	0					
ANR	5234074	Identifier	s		5233937	1					
ANR	5234075	ExpressionStatement	* d ++ = ch [ 0 ]	2458:3:52027:52039	5233937	2	True				
ANR	5234076	AssignmentExpression	* d ++ = ch [ 0 ]		5233937	0		=			
ANR	5234077	UnaryOperationExpression	* d ++		5233937	0					
ANR	5234078	UnaryOperator	*		5233937	0					
ANR	5234079	PostIncDecOperationExpression	d ++		5233937	1					
ANR	5234080	Identifier	d		5233937	0					
ANR	5234081	IncDec	++		5233937	1					
ANR	5234082	ArrayIndexing	ch [ 0 ]		5233937	1					
ANR	5234083	Identifier	ch		5233937	0					
ANR	5234084	PrimaryExpression	0		5233937	1					
ANR	5234085	ExpressionStatement	* d ++ = ch [ 1 ]	2459:3:52044:52056	5233937	3	True				
ANR	5234086	AssignmentExpression	* d ++ = ch [ 1 ]		5233937	0		=			
ANR	5234087	UnaryOperationExpression	* d ++		5233937	0					
ANR	5234088	UnaryOperator	*		5233937	0					
ANR	5234089	PostIncDecOperationExpression	d ++		5233937	1					
ANR	5234090	Identifier	d		5233937	0					
ANR	5234091	IncDec	++		5233937	1					
ANR	5234092	ArrayIndexing	ch [ 1 ]		5233937	1					
ANR	5234093	Identifier	ch		5233937	0					
ANR	5234094	PrimaryExpression	1		5233937	1					
ANR	5234095	ExpressionStatement	* d = 0	2462:1:52066:52072	5233937	5	True				
ANR	5234096	AssignmentExpression	* d = 0		5233937	0		=			
ANR	5234097	UnaryOperationExpression	* d		5233937	0					
ANR	5234098	UnaryOperator	*		5233937	0					
ANR	5234099	Identifier	d		5233937	1					
ANR	5234100	PrimaryExpression	0		5233937	1					
ANR	5234101	IdentifierDeclStatement	"char * trimDown = realloc ( od , strlen ( od ) + 1 ) ;"	2463:1:52075:52121	5233937	6	True				
ANR	5234102	IdentifierDecl	"* trimDown = realloc ( od , strlen ( od ) + 1 )"		5233937	0					
ANR	5234103	IdentifierDeclType	char *		5233937	0					
ANR	5234104	Identifier	trimDown		5233937	1					
ANR	5234105	AssignmentExpression	"* trimDown = realloc ( od , strlen ( od ) + 1 )"		5233937	2		=			
ANR	5234106	Identifier	trimDown		5233937	0					
ANR	5234107	CallExpression	"realloc ( od , strlen ( od ) + 1 )"		5233937	1					
ANR	5234108	Callee	realloc		5233937	0					
ANR	5234109	Identifier	realloc		5233937	0					
ANR	5234110	ArgumentList	od		5233937	1					
ANR	5234111	Argument	od		5233937	0					
ANR	5234112	Identifier	od		5233937	0					
ANR	5234113	Argument	strlen ( od ) + 1		5233937	1					
ANR	5234114	AdditiveExpression	strlen ( od ) + 1		5233937	0		+			
ANR	5234115	CallExpression	strlen ( od )		5233937	0					
ANR	5234116	Callee	strlen		5233937	0					
ANR	5234117	Identifier	strlen		5233937	0					
ANR	5234118	ArgumentList	od		5233937	1					
ANR	5234119	Argument	od		5233937	0					
ANR	5234120	Identifier	od		5233937	0					
ANR	5234121	PrimaryExpression	1		5233937	1					
ANR	5234122	ReturnStatement	return trimDown ? trimDown : od ;	2464:1:52131:52160	5233937	7	True				
ANR	5234123	ConditionalExpression	trimDown ? trimDown : od		5233937	0					
ANR	5234124	Condition	trimDown		5233937	0					
ANR	5234125	Identifier	trimDown		5233937	0					
ANR	5234126	Identifier	trimDown		5233937	1					
ANR	5234127	Identifier	od		5233937	2					
ANR	5234128	ReturnType	R_API char *		5233937	1					
ANR	5234129	Identifier	r_str_uri_encode		5233937	2					
ANR	5234130	ParameterList	const char * s		5233937	3					
ANR	5234131	Parameter	const char * s	2441:29:51689:51701	5233937	0	True				
ANR	5234132	ParameterType	const char *		5233937	0					
ANR	5234133	Identifier	s		5233937	1					
ANR	5234134	CFGEntryNode	ENTRY		5233937		True				
ANR	5234135	CFGExitNode	EXIT		5233937		True				
ANR	5234136	Symbol	malloc		5233937						
ANR	5234137	Symbol	NULL		5233937						
ANR	5234138	Symbol	d		5233937						
ANR	5234139	Symbol	ch		5233937						
ANR	5234140	Symbol	* ch		5233937						
ANR	5234141	Symbol	realloc		5233937						
ANR	5234142	Symbol	* d ++		5233937						
ANR	5234143	Symbol	* d		5233937						
ANR	5234144	Symbol	strlen		5233937						
ANR	5234145	Symbol	s		5233937						
ANR	5234146	Symbol	od		5233937						
ANR	5234147	Symbol	trimDown		5233937						
ANR	5234148	Symbol	* s		5233937						
ANR	5234149	Function	r_str_utf16_to_utf8	2467:0:52165:53642							
ANR	5234150	FunctionDef	"r_str_utf16_to_utf8 (ut8 * dst , int len_dst , const ut8 * src , int len_src , int little_endian)"		5234149	0					
ANR	5234151	CompoundStatement		2467:101:52266:53642	5234149	0					
ANR	5234152	IdentifierDeclStatement	ut8 * outstart = dst ;	2468:1:52269:52288	5234149	0	True				
ANR	5234153	IdentifierDecl	* outstart = dst		5234149	0					
ANR	5234154	IdentifierDeclType	ut8 *		5234149	0					
ANR	5234155	Identifier	outstart		5234149	1					
ANR	5234156	AssignmentExpression	* outstart = dst		5234149	2		=			
ANR	5234157	Identifier	dst		5234149	0					
ANR	5234158	Identifier	dst		5234149	1					
ANR	5234159	IdentifierDeclStatement	ut8 * outend = dst + len_dst ;	2469:1:52291:52318	5234149	1	True				
ANR	5234160	IdentifierDecl	* outend = dst + len_dst		5234149	0					
ANR	5234161	IdentifierDeclType	ut8 *		5234149	0					
ANR	5234162	Identifier	outend		5234149	1					
ANR	5234163	AssignmentExpression	* outend = dst + len_dst		5234149	2		=			
ANR	5234164	Identifier	outend		5234149	0					
ANR	5234165	AdditiveExpression	dst + len_dst		5234149	1		+			
ANR	5234166	Identifier	dst		5234149	0					
ANR	5234167	Identifier	len_dst		5234149	1					
ANR	5234168	IdentifierDeclStatement	ut16 * in = ( ut16 * ) src ;	2470:1:52321:52342	5234149	2	True				
ANR	5234169	IdentifierDecl	* in = ( ut16 * ) src		5234149	0					
ANR	5234170	IdentifierDeclType	ut16 *		5234149	0					
ANR	5234171	Identifier	in		5234149	1					
ANR	5234172	AssignmentExpression	* in = ( ut16 * ) src		5234149	2		=			
ANR	5234173	Identifier	in		5234149	0					
ANR	5234174	CastExpression	( ut16 * ) src		5234149	1					
ANR	5234175	CastTarget	ut16 *		5234149	0					
ANR	5234176	Identifier	src		5234149	1					
ANR	5234177	IdentifierDeclStatement	ut16 * inend ;	2471:1:52345:52356	5234149	3	True				
ANR	5234178	IdentifierDecl	* inend		5234149	0					
ANR	5234179	IdentifierDeclType	ut16 *		5234149	0					
ANR	5234180	Identifier	inend		5234149	1					
ANR	5234181	IdentifierDeclStatement	"ut32 c , d , inlen ;"	2472:1:52359:52375	5234149	4	True				
ANR	5234182	IdentifierDecl	c		5234149	0					
ANR	5234183	IdentifierDeclType	ut32		5234149	0					
ANR	5234184	Identifier	c		5234149	1					
ANR	5234185	IdentifierDecl	d		5234149	1					
ANR	5234186	IdentifierDeclType	ut32		5234149	0					
ANR	5234187	Identifier	d		5234149	1					
ANR	5234188	IdentifierDecl	inlen		5234149	2					
ANR	5234189	IdentifierDeclType	ut32		5234149	0					
ANR	5234190	Identifier	inlen		5234149	1					
ANR	5234191	IdentifierDeclStatement	ut8 * tmp ;	2473:1:52378:52386	5234149	5	True				
ANR	5234192	IdentifierDecl	* tmp		5234149	0					
ANR	5234193	IdentifierDeclType	ut8 *		5234149	0					
ANR	5234194	Identifier	tmp		5234149	1					
ANR	5234195	IdentifierDeclStatement	int bits ;	2474:1:52389:52397	5234149	6	True				
ANR	5234196	IdentifierDecl	bits		5234149	0					
ANR	5234197	IdentifierDeclType	int		5234149	0					
ANR	5234198	Identifier	bits		5234149	1					
ANR	5234199	IfStatement	if ( ( len_src % 2 ) == 1 )		5234149	7					
ANR	5234200	Condition	( len_src % 2 ) == 1	2476:5:52405:52422	5234149	0	True				
ANR	5234201	EqualityExpression	( len_src % 2 ) == 1		5234149	0		==			
ANR	5234202	MultiplicativeExpression	len_src % 2		5234149	0		%			
ANR	5234203	Identifier	len_src		5234149	0					
ANR	5234204	PrimaryExpression	2		5234149	1					
ANR	5234205	PrimaryExpression	1		5234149	1					
ANR	5234206	CompoundStatement		10:25:158:158	5234149	1					
ANR	5234207	ExpressionStatement	len_src --	2477:2:52429:52438	5234149	0	True				
ANR	5234208	PostIncDecOperationExpression	len_src --		5234149	0					
ANR	5234209	Identifier	len_src		5234149	0					
ANR	5234210	IncDec	--		5234149	1					
ANR	5234211	ExpressionStatement	inlen = len_src / 2	2479:1:52444:52463	5234149	8	True				
ANR	5234212	AssignmentExpression	inlen = len_src / 2		5234149	0		=			
ANR	5234213	Identifier	inlen		5234149	0					
ANR	5234214	MultiplicativeExpression	len_src / 2		5234149	1		/			
ANR	5234215	Identifier	len_src		5234149	0					
ANR	5234216	PrimaryExpression	2		5234149	1					
ANR	5234217	ExpressionStatement	inend = in + inlen	2480:1:52466:52484	5234149	9	True				
ANR	5234218	AssignmentExpression	inend = in + inlen		5234149	0		=			
ANR	5234219	Identifier	inend		5234149	0					
ANR	5234220	AdditiveExpression	in + inlen		5234149	1		+			
ANR	5234221	Identifier	in		5234149	0					
ANR	5234222	Identifier	inlen		5234149	1					
ANR	5234223	WhileStatement	while ( ( in < inend ) && ( dst - outstart + 5 < len_dst ) )		5234149	10					
ANR	5234224	Condition	( in < inend ) && ( dst - outstart + 5 < len_dst )	2481:8:52494:52539	5234149	0	True				
ANR	5234225	AndExpression	( in < inend ) && ( dst - outstart + 5 < len_dst )		5234149	0		&&			
ANR	5234226	RelationalExpression	in < inend		5234149	0		<			
ANR	5234227	Identifier	in		5234149	0					
ANR	5234228	Identifier	inend		5234149	1					
ANR	5234229	RelationalExpression	dst - outstart + 5 < len_dst		5234149	1		<			
ANR	5234230	AdditiveExpression	dst - outstart + 5		5234149	0		-			
ANR	5234231	Identifier	dst		5234149	0					
ANR	5234232	AdditiveExpression	outstart + 5		5234149	1		+			
ANR	5234233	Identifier	outstart		5234149	0					
ANR	5234234	PrimaryExpression	5		5234149	1					
ANR	5234235	Identifier	len_dst		5234149	1					
ANR	5234236	CompoundStatement		15:56:275:275	5234149	1					
ANR	5234237	IfStatement	if ( little_endian )		5234149	0					
ANR	5234238	Condition	little_endian	2482:6:52550:52562	5234149	0	True				
ANR	5234239	Identifier	little_endian		5234149	0					
ANR	5234240	CompoundStatement		16:21:298:298	5234149	1					
ANR	5234241	ExpressionStatement	c = * in ++	2483:3:52570:52579	5234149	0	True				
ANR	5234242	AssignmentExpression	c = * in ++		5234149	0		=			
ANR	5234243	Identifier	c		5234149	0					
ANR	5234244	UnaryOperationExpression	* in ++		5234149	1					
ANR	5234245	UnaryOperator	*		5234149	0					
ANR	5234246	PostIncDecOperationExpression	in ++		5234149	1					
ANR	5234247	Identifier	in		5234149	0					
ANR	5234248	IncDec	++		5234149	1					
ANR	5234249	ElseStatement	else		5234149	0					
ANR	5234250	CompoundStatement		18:9:323:323	5234149	0					
ANR	5234251	ExpressionStatement	tmp = ( ut8 * ) in	2485:3:52595:52610	5234149	0	True				
ANR	5234252	AssignmentExpression	tmp = ( ut8 * ) in		5234149	0		=			
ANR	5234253	Identifier	tmp		5234149	0					
ANR	5234254	CastExpression	( ut8 * ) in		5234149	1					
ANR	5234255	CastTarget	ut8 *		5234149	0					
ANR	5234256	Identifier	in		5234149	1					
ANR	5234257	ExpressionStatement	c = * tmp ++	2486:3:52615:52625	5234149	1	True				
ANR	5234258	AssignmentExpression	c = * tmp ++		5234149	0		=			
ANR	5234259	Identifier	c		5234149	0					
ANR	5234260	UnaryOperationExpression	* tmp ++		5234149	1					
ANR	5234261	UnaryOperator	*		5234149	0					
ANR	5234262	PostIncDecOperationExpression	tmp ++		5234149	1					
ANR	5234263	Identifier	tmp		5234149	0					
ANR	5234264	IncDec	++		5234149	1					
ANR	5234265	IfStatement	if ( ! c && ! * tmp )		5234149	2					
ANR	5234266	Condition	! c && ! * tmp	2487:7:52634:52644	5234149	0	True				
ANR	5234267	AndExpression	! c && ! * tmp		5234149	0		&&			
ANR	5234268	UnaryOperationExpression	! c		5234149	0					
ANR	5234269	UnaryOperator	!		5234149	0					
ANR	5234270	Identifier	c		5234149	1					
ANR	5234271	UnaryOperationExpression	! * tmp		5234149	1					
ANR	5234272	UnaryOperator	!		5234149	0					
ANR	5234273	UnaryOperationExpression	* tmp		5234149	1					
ANR	5234274	UnaryOperator	*		5234149	0					
ANR	5234275	Identifier	tmp		5234149	1					
ANR	5234276	CompoundStatement		21:20:380:380	5234149	1					
ANR	5234277	BreakStatement	break ;	2488:4:52653:52658	5234149	0	True				
ANR	5234278	ExpressionStatement	c = c | ( ( ( ut32 ) * tmp ) << 8 )	2490:3:52668:52695	5234149	3	True				
ANR	5234279	AssignmentExpression	c = c | ( ( ( ut32 ) * tmp ) << 8 )		5234149	0		=			
ANR	5234280	Identifier	c		5234149	0					
ANR	5234281	InclusiveOrExpression	c | ( ( ( ut32 ) * tmp ) << 8 )		5234149	1		|			
ANR	5234282	Identifier	c		5234149	0					
ANR	5234283	ShiftExpression	( ( ut32 ) * tmp ) << 8		5234149	1		<<			
ANR	5234284	CastExpression	( ut32 ) * tmp		5234149	0					
ANR	5234285	CastTarget	ut32		5234149	0					
ANR	5234286	UnaryOperationExpression	* tmp		5234149	1					
ANR	5234287	UnaryOperator	*		5234149	0					
ANR	5234288	Identifier	tmp		5234149	1					
ANR	5234289	PrimaryExpression	8		5234149	1					
ANR	5234290	ExpressionStatement	in ++	2491:3:52700:52704	5234149	4	True				
ANR	5234291	PostIncDecOperationExpression	in ++		5234149	0					
ANR	5234292	Identifier	in		5234149	0					
ANR	5234293	IncDec	++		5234149	1					
ANR	5234294	IfStatement	if ( ( c & 0xFC00 ) == 0xD800 )		5234149	1					
ANR	5234295	Condition	( c & 0xFC00 ) == 0xD800	2493:6:52716:52737	5234149	0	True				
ANR	5234296	EqualityExpression	( c & 0xFC00 ) == 0xD800		5234149	0		==			
ANR	5234297	BitAndExpression	c & 0xFC00		5234149	0		&			
ANR	5234298	Identifier	c		5234149	0					
ANR	5234299	PrimaryExpression	0xFC00		5234149	1					
ANR	5234300	PrimaryExpression	0xD800		5234149	1					
ANR	5234301	CompoundStatement		27:30:473:473	5234149	1					
ANR	5234302	IfStatement	if ( in >= inend )		5234149	0					
ANR	5234303	Condition	in >= inend	2494:7:52769:52779	5234149	0	True				
ANR	5234304	RelationalExpression	in >= inend		5234149	0		>=			
ANR	5234305	Identifier	in		5234149	0					
ANR	5234306	Identifier	inend		5234149	1					
ANR	5234307	CompoundStatement		28:20:515:515	5234149	1					
ANR	5234308	BreakStatement	break ;	2495:4:52835:52840	5234149	0	True				
ANR	5234309	IfStatement	if ( little_endian )		5234149	1					
ANR	5234310	Condition	little_endian	2497:7:52854:52866	5234149	0	True				
ANR	5234311	Identifier	little_endian		5234149	0					
ANR	5234312	CompoundStatement		31:22:602:602	5234149	1					
ANR	5234313	ExpressionStatement	d = * in ++	2498:4:52875:52884	5234149	0	True				
ANR	5234314	AssignmentExpression	d = * in ++		5234149	0		=			
ANR	5234315	Identifier	d		5234149	0					
ANR	5234316	UnaryOperationExpression	* in ++		5234149	1					
ANR	5234317	UnaryOperator	*		5234149	0					
ANR	5234318	PostIncDecOperationExpression	in ++		5234149	1					
ANR	5234319	Identifier	in		5234149	0					
ANR	5234320	IncDec	++		5234149	1					
ANR	5234321	ElseStatement	else		5234149	0					
ANR	5234322	CompoundStatement		33:10:629:629	5234149	0					
ANR	5234323	ExpressionStatement	tmp = ( ut8 * ) in	2500:4:52902:52917	5234149	0	True				
ANR	5234324	AssignmentExpression	tmp = ( ut8 * ) in		5234149	0		=			
ANR	5234325	Identifier	tmp		5234149	0					
ANR	5234326	CastExpression	( ut8 * ) in		5234149	1					
ANR	5234327	CastTarget	ut8 *		5234149	0					
ANR	5234328	Identifier	in		5234149	1					
ANR	5234329	ExpressionStatement	d = * tmp ++	2501:4:52923:52933	5234149	1	True				
ANR	5234330	AssignmentExpression	d = * tmp ++		5234149	0		=			
ANR	5234331	Identifier	d		5234149	0					
ANR	5234332	UnaryOperationExpression	* tmp ++		5234149	1					
ANR	5234333	UnaryOperator	*		5234149	0					
ANR	5234334	PostIncDecOperationExpression	tmp ++		5234149	1					
ANR	5234335	Identifier	tmp		5234149	0					
ANR	5234336	IncDec	++		5234149	1					
ANR	5234337	ExpressionStatement	d = d | ( ( ( ut32 ) * tmp ) << 8 )	2502:4:52939:52966	5234149	2	True				
ANR	5234338	AssignmentExpression	d = d | ( ( ( ut32 ) * tmp ) << 8 )		5234149	0		=			
ANR	5234339	Identifier	d		5234149	0					
ANR	5234340	InclusiveOrExpression	d | ( ( ( ut32 ) * tmp ) << 8 )		5234149	1		|			
ANR	5234341	Identifier	d		5234149	0					
ANR	5234342	ShiftExpression	( ( ut32 ) * tmp ) << 8		5234149	1		<<			
ANR	5234343	CastExpression	( ut32 ) * tmp		5234149	0					
ANR	5234344	CastTarget	ut32		5234149	0					
ANR	5234345	UnaryOperationExpression	* tmp		5234149	1					
ANR	5234346	UnaryOperator	*		5234149	0					
ANR	5234347	Identifier	tmp		5234149	1					
ANR	5234348	PrimaryExpression	8		5234149	1					
ANR	5234349	ExpressionStatement	in ++	2503:4:52972:52976	5234149	3	True				
ANR	5234350	PostIncDecOperationExpression	in ++		5234149	0					
ANR	5234351	Identifier	in		5234149	0					
ANR	5234352	IncDec	++		5234149	1					
ANR	5234353	IfStatement	if ( ( d & 0xFC00 ) == 0xDC00 )		5234149	2					
ANR	5234354	Condition	( d & 0xFC00 ) == 0xDC00	2505:7:52990:53011	5234149	0	True				
ANR	5234355	EqualityExpression	( d & 0xFC00 ) == 0xDC00		5234149	0		==			
ANR	5234356	BitAndExpression	d & 0xFC00		5234149	0		&			
ANR	5234357	Identifier	d		5234149	0					
ANR	5234358	PrimaryExpression	0xFC00		5234149	1					
ANR	5234359	PrimaryExpression	0xDC00		5234149	1					
ANR	5234360	CompoundStatement		39:31:747:747	5234149	1					
ANR	5234361	ExpressionStatement	c &= 0x03FF	2506:4:53020:53031	5234149	0	True				
ANR	5234362	AssignmentExpression	c &= 0x03FF		5234149	0		&=			
ANR	5234363	Identifier	c		5234149	0					
ANR	5234364	PrimaryExpression	0x03FF		5234149	1					
ANR	5234365	ExpressionStatement	c <<= 10	2507:4:53037:53045	5234149	1	True				
ANR	5234366	AssignmentExpression	c <<= 10		5234149	0		<<=			
ANR	5234367	Identifier	c		5234149	0					
ANR	5234368	PrimaryExpression	10		5234149	1					
ANR	5234369	ExpressionStatement	c |= d & 0x03FF	2508:4:53051:53066	5234149	2	True				
ANR	5234370	AssignmentExpression	c |= d & 0x03FF		5234149	0		|=			
ANR	5234371	Identifier	c		5234149	0					
ANR	5234372	BitAndExpression	d & 0x03FF		5234149	1		&			
ANR	5234373	Identifier	d		5234149	0					
ANR	5234374	PrimaryExpression	0x03FF		5234149	1					
ANR	5234375	ExpressionStatement	c += 0x10000	2509:4:53072:53084	5234149	3	True				
ANR	5234376	AssignmentExpression	c += 0x10000		5234149	0		+=			
ANR	5234377	Identifier	c		5234149	0					
ANR	5234378	PrimaryExpression	0x10000		5234149	1					
ANR	5234379	ElseStatement	else		5234149	0					
ANR	5234380	CompoundStatement		44:10:829:829	5234149	0					
ANR	5234381	ReturnStatement	return - 2 ;	2511:4:53102:53111	5234149	0	True				
ANR	5234382	UnaryOperationExpression	- 2		5234149	0					
ANR	5234383	UnaryOperator	-		5234149	0					
ANR	5234384	PrimaryExpression	2		5234149	1					
ANR	5234385	IfStatement	if ( dst >= outend )		5234149	2					
ANR	5234386	Condition	dst >= outend	2516:6:53174:53186	5234149	0	True				
ANR	5234387	RelationalExpression	dst >= outend		5234149	0		>=			
ANR	5234388	Identifier	dst		5234149	0					
ANR	5234389	Identifier	outend		5234149	1					
ANR	5234390	CompoundStatement		50:21:922:922	5234149	1					
ANR	5234391	BreakStatement	break ;	2517:3:53194:53199	5234149	0	True				
ANR	5234392	IfStatement	if ( c < 0x80 )		5234149	3					
ANR	5234393	Condition	c < 0x80	2519:6:53211:53218	5234149	0	True				
ANR	5234394	RelationalExpression	c < 0x80		5234149	0		<			
ANR	5234395	Identifier	c		5234149	0					
ANR	5234396	PrimaryExpression	0x80		5234149	1					
ANR	5234397	CompoundStatement		53:16:954:954	5234149	1					
ANR	5234398	ExpressionStatement	* dst ++ = c	2520:3:53226:53237	5234149	0	True				
ANR	5234399	AssignmentExpression	* dst ++ = c		5234149	0		=			
ANR	5234400	UnaryOperationExpression	* dst ++		5234149	0					
ANR	5234401	UnaryOperator	*		5234149	0					
ANR	5234402	PostIncDecOperationExpression	dst ++		5234149	1					
ANR	5234403	Identifier	dst		5234149	0					
ANR	5234404	IncDec	++		5234149	1					
ANR	5234405	Identifier	c		5234149	1					
ANR	5234406	ExpressionStatement	bits = - 6	2520:16:53239:53247	5234149	1	True				
ANR	5234407	AssignmentExpression	bits = - 6		5234149	0		=			
ANR	5234408	Identifier	bits		5234149	0					
ANR	5234409	UnaryOperationExpression	- 6		5234149	1					
ANR	5234410	UnaryOperator	-		5234149	0					
ANR	5234411	PrimaryExpression	6		5234149	1					
ANR	5234412	ElseStatement	else		5234149	0					
ANR	5234413	IfStatement	if ( c < 0x800 )		5234149	0					
ANR	5234414	Condition	c < 0x800	2521:13:53262:53270	5234149	0	True				
ANR	5234415	RelationalExpression	c < 0x800		5234149	0		<			
ANR	5234416	Identifier	c		5234149	0					
ANR	5234417	PrimaryExpression	0x800		5234149	1					
ANR	5234418	CompoundStatement		55:24:1006:1006	5234149	1					
ANR	5234419	ExpressionStatement	* dst ++ = ( ( c >> 6 ) & 0x1F ) | 0xC0	2522:3:53278:53311	5234149	0	True				
ANR	5234420	AssignmentExpression	* dst ++ = ( ( c >> 6 ) & 0x1F ) | 0xC0		5234149	0		=			
ANR	5234421	UnaryOperationExpression	* dst ++		5234149	0					
ANR	5234422	UnaryOperator	*		5234149	0					
ANR	5234423	PostIncDecOperationExpression	dst ++		5234149	1					
ANR	5234424	Identifier	dst		5234149	0					
ANR	5234425	IncDec	++		5234149	1					
ANR	5234426	InclusiveOrExpression	( ( c >> 6 ) & 0x1F ) | 0xC0		5234149	1		|			
ANR	5234427	BitAndExpression	( c >> 6 ) & 0x1F		5234149	0		&			
ANR	5234428	ShiftExpression	c >> 6		5234149	0		>>			
ANR	5234429	Identifier	c		5234149	0					
ANR	5234430	PrimaryExpression	6		5234149	1					
ANR	5234431	PrimaryExpression	0x1F		5234149	1					
ANR	5234432	PrimaryExpression	0xC0		5234149	1					
ANR	5234433	ExpressionStatement	bits = 0	2523:3:53316:53325	5234149	1	True				
ANR	5234434	AssignmentExpression	bits = 0		5234149	0		=			
ANR	5234435	Identifier	bits		5234149	0					
ANR	5234436	PrimaryExpression	0		5234149	1					
ANR	5234437	ElseStatement	else		5234149	0					
ANR	5234438	IfStatement	if ( c < 0x10000 )		5234149	0					
ANR	5234439	Condition	c < 0x10000	2524:13:53340:53350	5234149	0	True				
ANR	5234440	RelationalExpression	c < 0x10000		5234149	0		<			
ANR	5234441	Identifier	c		5234149	0					
ANR	5234442	PrimaryExpression	0x10000		5234149	1					
ANR	5234443	CompoundStatement		58:26:1086:1086	5234149	1					
ANR	5234444	ExpressionStatement	* dst ++ = ( ( c >> 12 ) & 0x0F ) | 0xE0	2525:3:53358:53392	5234149	0	True				
ANR	5234445	AssignmentExpression	* dst ++ = ( ( c >> 12 ) & 0x0F ) | 0xE0		5234149	0		=			
ANR	5234446	UnaryOperationExpression	* dst ++		5234149	0					
ANR	5234447	UnaryOperator	*		5234149	0					
ANR	5234448	PostIncDecOperationExpression	dst ++		5234149	1					
ANR	5234449	Identifier	dst		5234149	0					
ANR	5234450	IncDec	++		5234149	1					
ANR	5234451	InclusiveOrExpression	( ( c >> 12 ) & 0x0F ) | 0xE0		5234149	1		|			
ANR	5234452	BitAndExpression	( c >> 12 ) & 0x0F		5234149	0		&			
ANR	5234453	ShiftExpression	c >> 12		5234149	0		>>			
ANR	5234454	Identifier	c		5234149	0					
ANR	5234455	PrimaryExpression	12		5234149	1					
ANR	5234456	PrimaryExpression	0x0F		5234149	1					
ANR	5234457	PrimaryExpression	0xE0		5234149	1					
ANR	5234458	ExpressionStatement	bits = 6	2526:3:53397:53406	5234149	1	True				
ANR	5234459	AssignmentExpression	bits = 6		5234149	0		=			
ANR	5234460	Identifier	bits		5234149	0					
ANR	5234461	PrimaryExpression	6		5234149	1					
ANR	5234462	ElseStatement	else		5234149	0					
ANR	5234463	CompoundStatement		61:9:1150:1150	5234149	0					
ANR	5234464	ExpressionStatement	* dst ++ = ( ( c >> 18 ) & 0x07 ) | 0xF0	2528:3:53422:53456	5234149	0	True				
ANR	5234465	AssignmentExpression	* dst ++ = ( ( c >> 18 ) & 0x07 ) | 0xF0		5234149	0		=			
ANR	5234466	UnaryOperationExpression	* dst ++		5234149	0					
ANR	5234467	UnaryOperator	*		5234149	0					
ANR	5234468	PostIncDecOperationExpression	dst ++		5234149	1					
ANR	5234469	Identifier	dst		5234149	0					
ANR	5234470	IncDec	++		5234149	1					
ANR	5234471	InclusiveOrExpression	( ( c >> 18 ) & 0x07 ) | 0xF0		5234149	1		|			
ANR	5234472	BitAndExpression	( c >> 18 ) & 0x07		5234149	0		&			
ANR	5234473	ShiftExpression	c >> 18		5234149	0		>>			
ANR	5234474	Identifier	c		5234149	0					
ANR	5234475	PrimaryExpression	18		5234149	1					
ANR	5234476	PrimaryExpression	0x07		5234149	1					
ANR	5234477	PrimaryExpression	0xF0		5234149	1					
ANR	5234478	ExpressionStatement	bits = 12	2529:3:53461:53470	5234149	1	True				
ANR	5234479	AssignmentExpression	bits = 12		5234149	0		=			
ANR	5234480	Identifier	bits		5234149	0					
ANR	5234481	PrimaryExpression	12		5234149	1					
ANR	5234482	ForStatement	for ( ; bits >= 0 ; bits -= 6 )		5234149	4					
ANR	5234483	Condition	bits >= 0	2532:9:53486:53494	5234149	0	True				
ANR	5234484	RelationalExpression	bits >= 0		5234149	0		>=			
ANR	5234485	Identifier	bits		5234149	0					
ANR	5234486	PrimaryExpression	0		5234149	1					
ANR	5234487	AssignmentExpression	bits -= 6	2532:20:53497:53505	5234149	1	True	-=			
ANR	5234488	Identifier	bits		5234149	0					
ANR	5234489	PrimaryExpression	6		5234149	1					
ANR	5234490	CompoundStatement		66:31:1241:1241	5234149	2					
ANR	5234491	IfStatement	if ( dst >= outend )		5234149	0					
ANR	5234492	Condition	dst >= outend	2533:7:53517:53529	5234149	0	True				
ANR	5234493	RelationalExpression	dst >= outend		5234149	0		>=			
ANR	5234494	Identifier	dst		5234149	0					
ANR	5234495	Identifier	outend		5234149	1					
ANR	5234496	CompoundStatement		67:22:1265:1265	5234149	1					
ANR	5234497	BreakStatement	break ;	2534:4:53538:53543	5234149	0	True				
ANR	5234498	ExpressionStatement	* dst ++ = ( ( c >> bits ) & 0x3F ) | 0x80	2536:3:53553:53589	5234149	1	True				
ANR	5234499	AssignmentExpression	* dst ++ = ( ( c >> bits ) & 0x3F ) | 0x80		5234149	0		=			
ANR	5234500	UnaryOperationExpression	* dst ++		5234149	0					
ANR	5234501	UnaryOperator	*		5234149	0					
ANR	5234502	PostIncDecOperationExpression	dst ++		5234149	1					
ANR	5234503	Identifier	dst		5234149	0					
ANR	5234504	IncDec	++		5234149	1					
ANR	5234505	InclusiveOrExpression	( ( c >> bits ) & 0x3F ) | 0x80		5234149	1		|			
ANR	5234506	BitAndExpression	( c >> bits ) & 0x3F		5234149	0		&			
ANR	5234507	ShiftExpression	c >> bits		5234149	0		>>			
ANR	5234508	Identifier	c		5234149	0					
ANR	5234509	Identifier	bits		5234149	1					
ANR	5234510	PrimaryExpression	0x3F		5234149	1					
ANR	5234511	PrimaryExpression	0x80		5234149	1					
ANR	5234512	ExpressionStatement	len_dst = dst - outstart	2539:1:53599:53623	5234149	11	True				
ANR	5234513	AssignmentExpression	len_dst = dst - outstart		5234149	0		=			
ANR	5234514	Identifier	len_dst		5234149	0					
ANR	5234515	AdditiveExpression	dst - outstart		5234149	1		-			
ANR	5234516	Identifier	dst		5234149	0					
ANR	5234517	Identifier	outstart		5234149	1					
ANR	5234518	ReturnStatement	return len_dst ;	2540:1:53626:53640	5234149	12	True				
ANR	5234519	Identifier	len_dst		5234149	0					
ANR	5234520	ReturnType	R_API int		5234149	1					
ANR	5234521	Identifier	r_str_utf16_to_utf8		5234149	2					
ANR	5234522	ParameterList	"ut8 * dst , int len_dst , const ut8 * src , int len_src , int little_endian"		5234149	3					
ANR	5234523	Parameter	ut8 * dst	2467:30:52195:52202	5234149	0	True				
ANR	5234524	ParameterType	ut8 *		5234149	0					
ANR	5234525	Identifier	dst		5234149	1					
ANR	5234526	Parameter	int len_dst	2467:40:52205:52215	5234149	1	True				
ANR	5234527	ParameterType	int		5234149	0					
ANR	5234528	Identifier	len_dst		5234149	1					
ANR	5234529	Parameter	const ut8 * src	2467:53:52218:52231	5234149	2	True				
ANR	5234530	ParameterType	const ut8 *		5234149	0					
ANR	5234531	Identifier	src		5234149	1					
ANR	5234532	Parameter	int len_src	2467:69:52234:52244	5234149	3	True				
ANR	5234533	ParameterType	int		5234149	0					
ANR	5234534	Identifier	len_src		5234149	1					
ANR	5234535	Parameter	int little_endian	2467:82:52247:52263	5234149	4	True				
ANR	5234536	ParameterType	int		5234149	0					
ANR	5234537	Identifier	little_endian		5234149	1					
ANR	5234538	CFGEntryNode	ENTRY		5234149		True				
ANR	5234539	CFGExitNode	EXIT		5234149		True				
ANR	5234540	Symbol	* tmp ++		5234149						
ANR	5234541	Symbol	* tmp		5234149						
ANR	5234542	Symbol	little_endian		5234149						
ANR	5234543	Symbol	c		5234149						
ANR	5234544	Symbol	dst		5234149						
ANR	5234545	Symbol	d		5234149						
ANR	5234546	Symbol	src		5234149						
ANR	5234547	Symbol	in		5234149						
ANR	5234548	Symbol	bits		5234149						
ANR	5234549	Symbol	inlen		5234149						
ANR	5234550	Symbol	outstart		5234149						
ANR	5234551	Symbol	inend		5234149						
ANR	5234552	Symbol	len_dst		5234149						
ANR	5234553	Symbol	len_src		5234149						
ANR	5234554	Symbol	tmp		5234149						
ANR	5234555	Symbol	* dst ++		5234149						
ANR	5234556	Symbol	outend		5234149						
ANR	5234557	Symbol	* in ++		5234149						
ANR	5234558	Function	r_str_utf16_decode	2543:0:53645:54411							
ANR	5234559	FunctionDef	"r_str_utf16_decode (const ut8 * s , int len)"		5234558	0					
ANR	5234560	CompoundStatement		2543:54:53699:54411	5234558	0					
ANR	5234561	IdentifierDeclStatement	int i = 0 ;	2544:1:53702:53711	5234558	0	True				
ANR	5234562	IdentifierDecl	i = 0		5234558	0					
ANR	5234563	IdentifierDeclType	int		5234558	0					
ANR	5234564	Identifier	i		5234558	1					
ANR	5234565	AssignmentExpression	i = 0		5234558	2		=			
ANR	5234566	Identifier	i		5234558	0					
ANR	5234567	PrimaryExpression	0		5234558	1					
ANR	5234568	IdentifierDeclStatement	int j = 0 ;	2545:1:53714:53723	5234558	1	True				
ANR	5234569	IdentifierDecl	j = 0		5234558	0					
ANR	5234570	IdentifierDeclType	int		5234558	0					
ANR	5234571	Identifier	j		5234558	1					
ANR	5234572	AssignmentExpression	j = 0		5234558	2		=			
ANR	5234573	Identifier	j		5234558	0					
ANR	5234574	PrimaryExpression	0		5234558	1					
ANR	5234575	IdentifierDeclStatement	char * result = NULL ;	2546:1:53726:53745	5234558	2	True				
ANR	5234576	IdentifierDecl	* result = NULL		5234558	0					
ANR	5234577	IdentifierDeclType	char *		5234558	0					
ANR	5234578	Identifier	result		5234558	1					
ANR	5234579	AssignmentExpression	* result = NULL		5234558	2		=			
ANR	5234580	Identifier	NULL		5234558	0					
ANR	5234581	Identifier	NULL		5234558	1					
ANR	5234582	IdentifierDeclStatement	int count_unicode = 0 ;	2547:1:53748:53769	5234558	3	True				
ANR	5234583	IdentifierDecl	count_unicode = 0		5234558	0					
ANR	5234584	IdentifierDeclType	int		5234558	0					
ANR	5234585	Identifier	count_unicode		5234558	1					
ANR	5234586	AssignmentExpression	count_unicode = 0		5234558	2		=			
ANR	5234587	Identifier	count_unicode		5234558	0					
ANR	5234588	PrimaryExpression	0		5234558	1					
ANR	5234589	IdentifierDeclStatement	int count_ascii = 0 ;	2548:1:53772:53791	5234558	4	True				
ANR	5234590	IdentifierDecl	count_ascii = 0		5234558	0					
ANR	5234591	IdentifierDeclType	int		5234558	0					
ANR	5234592	Identifier	count_ascii		5234558	1					
ANR	5234593	AssignmentExpression	count_ascii = 0		5234558	2		=			
ANR	5234594	Identifier	count_ascii		5234558	0					
ANR	5234595	PrimaryExpression	0		5234558	1					
ANR	5234596	IdentifierDeclStatement	int lenresult = 0 ;	2549:1:53794:53811	5234558	5	True				
ANR	5234597	IdentifierDecl	lenresult = 0		5234558	0					
ANR	5234598	IdentifierDeclType	int		5234558	0					
ANR	5234599	Identifier	lenresult		5234558	1					
ANR	5234600	AssignmentExpression	lenresult = 0		5234558	2		=			
ANR	5234601	Identifier	lenresult		5234558	0					
ANR	5234602	PrimaryExpression	0		5234558	1					
ANR	5234603	IfStatement	if ( ! s )		5234558	6					
ANR	5234604	Condition	! s	2550:5:53818:53819	5234558	0	True				
ANR	5234605	UnaryOperationExpression	! s		5234558	0					
ANR	5234606	UnaryOperator	!		5234558	0					
ANR	5234607	Identifier	s		5234558	1					
ANR	5234608	CompoundStatement		8:9:122:122	5234558	1					
ANR	5234609	ReturnStatement	return NULL ;	2551:2:53826:53837	5234558	0	True				
ANR	5234610	Identifier	NULL		5234558	0					
ANR	5234611	ForStatement	for ( i = 0 ; i < len && ( s [ i ] || s [ i + 1 ] ) ; i += 2 )		5234558	7					
ANR	5234612	ForInit	i = 0 ;	2553:6:53848:53853	5234558	0	True				
ANR	5234613	AssignmentExpression	i = 0		5234558	0		=			
ANR	5234614	Identifier	i		5234558	0					
ANR	5234615	PrimaryExpression	0		5234558	1					
ANR	5234616	Condition	i < len && ( s [ i ] || s [ i + 1 ] )	2553:13:53855:53881	5234558	1	True				
ANR	5234617	AndExpression	i < len && ( s [ i ] || s [ i + 1 ] )		5234558	0		&&			
ANR	5234618	RelationalExpression	i < len		5234558	0		<			
ANR	5234619	Identifier	i		5234558	0					
ANR	5234620	Identifier	len		5234558	1					
ANR	5234621	OrExpression	s [ i ] || s [ i + 1 ]		5234558	1		||			
ANR	5234622	ArrayIndexing	s [ i ]		5234558	0					
ANR	5234623	Identifier	s		5234558	0					
ANR	5234624	Identifier	i		5234558	1					
ANR	5234625	ArrayIndexing	s [ i + 1 ]		5234558	1					
ANR	5234626	Identifier	s		5234558	0					
ANR	5234627	AdditiveExpression	i + 1		5234558	1		+			
ANR	5234628	Identifier	i		5234558	0					
ANR	5234629	PrimaryExpression	1		5234558	1					
ANR	5234630	AssignmentExpression	i += 2	2553:42:53884:53889	5234558	2	True	+=			
ANR	5234631	Identifier	i		5234558	0					
ANR	5234632	PrimaryExpression	2		5234558	1					
ANR	5234633	CompoundStatement		11:50:192:192	5234558	3					
ANR	5234634	IfStatement	if ( ! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E )		5234558	0					
ANR	5234635	Condition	! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E	2554:6:53900:53938	5234558	0	True				
ANR	5234636	AndExpression	! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E		5234558	0		&&			
ANR	5234637	UnaryOperationExpression	! s [ i + 1 ]		5234558	0					
ANR	5234638	UnaryOperator	!		5234558	0					
ANR	5234639	ArrayIndexing	s [ i + 1 ]		5234558	1					
ANR	5234640	Identifier	s		5234558	0					
ANR	5234641	AdditiveExpression	i + 1		5234558	1		+			
ANR	5234642	Identifier	i		5234558	0					
ANR	5234643	PrimaryExpression	1		5234558	1					
ANR	5234644	AndExpression	0x20 <= s [ i ] && s [ i ] <= 0x7E		5234558	1		&&			
ANR	5234645	RelationalExpression	0x20 <= s [ i ]		5234558	0		<=			
ANR	5234646	PrimaryExpression	0x20		5234558	0					
ANR	5234647	ArrayIndexing	s [ i ]		5234558	1					
ANR	5234648	Identifier	s		5234558	0					
ANR	5234649	Identifier	i		5234558	1					
ANR	5234650	RelationalExpression	s [ i ] <= 0x7E		5234558	1		<=			
ANR	5234651	ArrayIndexing	s [ i ]		5234558	0					
ANR	5234652	Identifier	s		5234558	0					
ANR	5234653	Identifier	i		5234558	1					
ANR	5234654	PrimaryExpression	0x7E		5234558	1					
ANR	5234655	CompoundStatement		12:47:241:241	5234558	1					
ANR	5234656	ExpressionStatement	++ count_ascii	2555:3:53946:53959	5234558	0	True				
ANR	5234657	UnaryExpression	++ count_ascii		5234558	0					
ANR	5234658	IncDec	++		5234558	0					
ANR	5234659	Identifier	count_ascii		5234558	1					
ANR	5234660	ElseStatement	else		5234558	0					
ANR	5234661	CompoundStatement		14:9:270:270	5234558	0					
ANR	5234662	ExpressionStatement	++ count_unicode	2557:3:53975:53990	5234558	0	True				
ANR	5234663	UnaryExpression	++ count_unicode		5234558	0					
ANR	5234664	IncDec	++		5234558	0					
ANR	5234665	Identifier	count_unicode		5234558	1					
ANR	5234666	ExpressionStatement	lenresult = 1 + count_ascii + count_unicode * 6	2560:1:54000:54047	5234558	8	True				
ANR	5234667	AssignmentExpression	lenresult = 1 + count_ascii + count_unicode * 6		5234558	0		=			
ANR	5234668	Identifier	lenresult		5234558	0					
ANR	5234669	AdditiveExpression	1 + count_ascii + count_unicode * 6		5234558	1		+			
ANR	5234670	PrimaryExpression	1		5234558	0					
ANR	5234671	AdditiveExpression	count_ascii + count_unicode * 6		5234558	1		+			
ANR	5234672	Identifier	count_ascii		5234558	0					
ANR	5234673	MultiplicativeExpression	count_unicode * 6		5234558	1		*			
ANR	5234674	Identifier	count_unicode		5234558	0					
ANR	5234675	PrimaryExpression	6		5234558	1					
ANR	5234676	IfStatement	"if ( ! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) ) )"		5234558	9					
ANR	5234677	Condition	"! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) )"	2561:5:54076:54134	5234558	0	True				
ANR	5234678	UnaryOperationExpression	"! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) )"		5234558	0					
ANR	5234679	UnaryOperator	!		5234558	0					
ANR	5234680	AssignmentExpression	"result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 )"		5234558	1		=			
ANR	5234681	Identifier	result		5234558	0					
ANR	5234682	CallExpression	"calloc ( 1 + count_ascii + count_unicode * 6 , 1 )"		5234558	1					
ANR	5234683	Callee	calloc		5234558	0					
ANR	5234684	Identifier	calloc		5234558	0					
ANR	5234685	ArgumentList	1 + count_ascii + count_unicode * 6		5234558	1					
ANR	5234686	Argument	1 + count_ascii + count_unicode * 6		5234558	0					
ANR	5234687	AdditiveExpression	1 + count_ascii + count_unicode * 6		5234558	0		+			
ANR	5234688	PrimaryExpression	1		5234558	0					
ANR	5234689	AdditiveExpression	count_ascii + count_unicode * 6		5234558	1		+			
ANR	5234690	Identifier	count_ascii		5234558	0					
ANR	5234691	MultiplicativeExpression	count_unicode * 6		5234558	1		*			
ANR	5234692	Identifier	count_unicode		5234558	0					
ANR	5234693	PrimaryExpression	6		5234558	1					
ANR	5234694	Argument	1		5234558	1					
ANR	5234695	PrimaryExpression	1		5234558	0					
ANR	5234696	CompoundStatement		19:66:437:437	5234558	1					
ANR	5234697	ReturnStatement	return NULL ;	2562:2:54141:54152	5234558	0	True				
ANR	5234698	Identifier	NULL		5234558	0					
ANR	5234699	ForStatement	for ( i = 0 ; i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] ) ; i += 2 )		5234558	10					
ANR	5234700	ForInit	i = 0 ;	2564:6:54163:54168	5234558	0	True				
ANR	5234701	AssignmentExpression	i = 0		5234558	0		=			
ANR	5234702	Identifier	i		5234558	0					
ANR	5234703	PrimaryExpression	0		5234558	1					
ANR	5234704	Condition	i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] )	2564:13:54170:54213	5234558	1	True				
ANR	5234705	AndExpression	i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] )		5234558	0		&&			
ANR	5234706	RelationalExpression	i < len		5234558	0		<			
ANR	5234707	Identifier	i		5234558	0					
ANR	5234708	Identifier	len		5234558	1					
ANR	5234709	AndExpression	j < lenresult && ( s [ i ] || s [ i + 1 ] )		5234558	1		&&			
ANR	5234710	RelationalExpression	j < lenresult		5234558	0		<			
ANR	5234711	Identifier	j		5234558	0					
ANR	5234712	Identifier	lenresult		5234558	1					
ANR	5234713	OrExpression	s [ i ] || s [ i + 1 ]		5234558	1		||			
ANR	5234714	ArrayIndexing	s [ i ]		5234558	0					
ANR	5234715	Identifier	s		5234558	0					
ANR	5234716	Identifier	i		5234558	1					
ANR	5234717	ArrayIndexing	s [ i + 1 ]		5234558	1					
ANR	5234718	Identifier	s		5234558	0					
ANR	5234719	AdditiveExpression	i + 1		5234558	1		+			
ANR	5234720	Identifier	i		5234558	0					
ANR	5234721	PrimaryExpression	1		5234558	1					
ANR	5234722	AssignmentExpression	i += 2	2564:59:54216:54221	5234558	2	True	+=			
ANR	5234723	Identifier	i		5234558	0					
ANR	5234724	PrimaryExpression	2		5234558	1					
ANR	5234725	CompoundStatement		22:67:524:524	5234558	3					
ANR	5234726	IfStatement	if ( ! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] ) )		5234558	0					
ANR	5234727	Condition	! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] )	2565:6:54232:54260	5234558	0	True				
ANR	5234728	AndExpression	! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] )		5234558	0		&&			
ANR	5234729	UnaryOperationExpression	! s [ i + 1 ]		5234558	0					
ANR	5234730	UnaryOperator	!		5234558	0					
ANR	5234731	ArrayIndexing	s [ i + 1 ]		5234558	1					
ANR	5234732	Identifier	s		5234558	0					
ANR	5234733	AdditiveExpression	i + 1		5234558	1		+			
ANR	5234734	Identifier	i		5234558	0					
ANR	5234735	PrimaryExpression	1		5234558	1					
ANR	5234736	CallExpression	IS_PRINTABLE ( s [ i ] )		5234558	1					
ANR	5234737	Callee	IS_PRINTABLE		5234558	0					
ANR	5234738	Identifier	IS_PRINTABLE		5234558	0					
ANR	5234739	ArgumentList	s [ i ]		5234558	1					
ANR	5234740	Argument	s [ i ]		5234558	0					
ANR	5234741	ArrayIndexing	s [ i ]		5234558	0					
ANR	5234742	Identifier	s		5234558	0					
ANR	5234743	Identifier	i		5234558	1					
ANR	5234744	CompoundStatement		23:37:563:563	5234558	1					
ANR	5234745	ExpressionStatement	result [ j ++ ] = s [ i ]	2566:3:54268:54286	5234558	0	True				
ANR	5234746	AssignmentExpression	result [ j ++ ] = s [ i ]		5234558	0		=			
ANR	5234747	ArrayIndexing	result [ j ++ ]		5234558	0					
ANR	5234748	Identifier	result		5234558	0					
ANR	5234749	PostIncDecOperationExpression	j ++		5234558	1					
ANR	5234750	Identifier	j		5234558	0					
ANR	5234751	IncDec	++		5234558	1					
ANR	5234752	ArrayIndexing	s [ i ]		5234558	1					
ANR	5234753	Identifier	s		5234558	0					
ANR	5234754	Identifier	i		5234558	1					
ANR	5234755	ElseStatement	else		5234558	0					
ANR	5234756	CompoundStatement		25:9:597:597	5234558	0					
ANR	5234757	Statement	j	2568:3:54302:54302	5234558	0	True				
ANR	5234758	Statement	+=	2568:5:54304:54305	5234558	1	True				
ANR	5234759	Statement	snprintf	2568:8:54307:54314	5234558	2	True				
ANR	5234760	Statement	(	2568:17:54316:54316	5234558	3	True				
ANR	5234761	Statement	&	2568:18:54317:54317	5234558	4	True				
ANR	5234762	Statement	result	2568:19:54318:54323	5234558	5	True				
ANR	5234763	Statement	[	2568:25:54324:54324	5234558	6	True				
ANR	5234764	Statement	j	2568:26:54325:54325	5234558	7	True				
ANR	5234765	Statement	]	2568:27:54326:54326	5234558	8	True				
ANR	5234766	Statement	","	2568:28:54327:54327	5234558	9	True				
ANR	5234767	Statement	lenresult	2568:30:54329:54337	5234558	10	True				
ANR	5234768	Statement	-	2568:40:54339:54339	5234558	11	True				
ANR	5234769	Statement	j	2568:42:54341:54341	5234558	12	True				
ANR	5234770	Statement	","	2568:43:54342:54342	5234558	13	True				
ANR	5234771	Statement	"""\\\\u%.2"""	2568:45:54344:54351	5234558	14	True				
ANR	5234772	Statement	HHXFMT	2568:53:54352:54357	5234558	15	True				
ANR	5234773	Statement	"""%.2"""	2568:59:54358:54362	5234558	16	True				
ANR	5234774	Statement	HHXFMT	2568:64:54363:54368	5234558	17	True				
ANR	5234775	Statement	""""""	2568:70:54369:54370	5234558	18	True				
ANR	5234776	Statement	","	2568:72:54371:54371	5234558	19	True				
ANR	5234777	Statement	s	2568:74:54373:54373	5234558	20	True				
ANR	5234778	Statement	[	2568:75:54374:54374	5234558	21	True				
ANR	5234779	Statement	i	2568:76:54375:54375	5234558	22	True				
ANR	5234780	Statement	]	2568:77:54376:54376	5234558	23	True				
ANR	5234781	Statement	","	2568:78:54377:54377	5234558	24	True				
ANR	5234782	Statement	s	2568:80:54379:54379	5234558	25	True				
ANR	5234783	Statement	[	2568:81:54380:54380	5234558	26	True				
ANR	5234784	Statement	i	2568:82:54381:54381	5234558	27	True				
ANR	5234785	Statement	+	2568:83:54382:54382	5234558	28	True				
ANR	5234786	Statement	1	2568:84:54383:54383	5234558	29	True				
ANR	5234787	Statement	]	2568:85:54384:54384	5234558	30	True				
ANR	5234788	Statement	)	2568:86:54385:54385	5234558	31	True				
ANR	5234789	ExpressionStatement		2568:87:54386:54386	5234558	32	True				
ANR	5234790	ReturnStatement	return result ;	2571:1:54396:54409	5234558	11	True				
ANR	5234791	Identifier	result		5234558	0					
ANR	5234792	ReturnType	R_API char *		5234558	1					
ANR	5234793	Identifier	r_str_utf16_decode		5234558	2					
ANR	5234794	ParameterList	"const ut8 * s , int len"		5234558	3					
ANR	5234795	Parameter	const ut8 * s	2543:31:53676:53687	5234558	0	True				
ANR	5234796	ParameterType	const ut8 *		5234558	0					
ANR	5234797	Identifier	s		5234558	1					
ANR	5234798	Parameter	int len	2543:45:53690:53696	5234558	1	True				
ANR	5234799	ParameterType	int		5234558	0					
ANR	5234800	Identifier	len		5234558	1					
ANR	5234801	CFGEntryNode	ENTRY		5234558		True				
ANR	5234802	CFGExitNode	EXIT		5234558		True				
ANR	5234803	Symbol	lenresult		5234558						
ANR	5234804	Symbol	NULL		5234558						
ANR	5234805	Symbol	IS_PRINTABLE		5234558						
ANR	5234806	Symbol	i		5234558						
ANR	5234807	Symbol	j		5234558						
ANR	5234808	Symbol	calloc		5234558						
ANR	5234809	Symbol	count_ascii		5234558						
ANR	5234810	Symbol	result		5234558						
ANR	5234811	Symbol	count_unicode		5234558						
ANR	5234812	Symbol	s		5234558						
ANR	5234813	Symbol	* i		5234558						
ANR	5234814	Symbol	len		5234558						
ANR	5234815	Symbol	* result		5234558						
ANR	5234816	Symbol	* s		5234558						
ANR	5234817	Function	r_str_utf16_encode	2575:0:54464:55235							
ANR	5234818	FunctionDef	"r_str_utf16_encode (const char * s , int len)"		5234817	0					
ANR	5234819	CompoundStatement		2575:55:54519:55235	5234817	0					
ANR	5234820	IdentifierDeclStatement	int i ;	2576:1:54522:54527	5234817	0	True				
ANR	5234821	IdentifierDecl	i		5234817	0					
ANR	5234822	IdentifierDeclType	int		5234817	0					
ANR	5234823	Identifier	i		5234817	1					
ANR	5234824	IdentifierDeclStatement	"char ch [ 4 ] , * d , * od , * tmp ;"	2577:1:54530:54555	5234817	1	True				
ANR	5234825	IdentifierDecl	ch [ 4 ]		5234817	0					
ANR	5234826	IdentifierDeclType	char [ 4 ]		5234817	0					
ANR	5234827	Identifier	ch		5234817	1					
ANR	5234828	PrimaryExpression	4		5234817	2					
ANR	5234829	IdentifierDecl	* d		5234817	1					
ANR	5234830	IdentifierDeclType	char *		5234817	0					
ANR	5234831	Identifier	d		5234817	1					
ANR	5234832	IdentifierDecl	* od		5234817	2					
ANR	5234833	IdentifierDeclType	char *		5234817	0					
ANR	5234834	Identifier	od		5234817	1					
ANR	5234835	IdentifierDecl	* tmp		5234817	3					
ANR	5234836	IdentifierDeclType	char *		5234817	0					
ANR	5234837	Identifier	tmp		5234817	1					
ANR	5234838	IfStatement	if ( ! s )		5234817	2					
ANR	5234839	Condition	! s	2578:5:54562:54563	5234817	0	True				
ANR	5234840	UnaryOperationExpression	! s		5234817	0					
ANR	5234841	UnaryOperator	!		5234817	0					
ANR	5234842	Identifier	s		5234817	1					
ANR	5234843	CompoundStatement		4:9:46:46	5234817	1					
ANR	5234844	ReturnStatement	return NULL ;	2579:2:54570:54581	5234817	0	True				
ANR	5234845	Identifier	NULL		5234817	0					
ANR	5234846	IfStatement	if ( len < 0 )		5234817	3					
ANR	5234847	Condition	len < 0	2581:5:54591:54597	5234817	0	True				
ANR	5234848	RelationalExpression	len < 0		5234817	0		<			
ANR	5234849	Identifier	len		5234817	0					
ANR	5234850	PrimaryExpression	0		5234817	1					
ANR	5234851	CompoundStatement		7:14:80:80	5234817	1					
ANR	5234852	ExpressionStatement	len = strlen ( s )	2582:2:54604:54620	5234817	0	True				
ANR	5234853	AssignmentExpression	len = strlen ( s )		5234817	0		=			
ANR	5234854	Identifier	len		5234817	0					
ANR	5234855	CallExpression	strlen ( s )		5234817	1					
ANR	5234856	Callee	strlen		5234817	0					
ANR	5234857	Identifier	strlen		5234817	0					
ANR	5234858	ArgumentList	s		5234817	1					
ANR	5234859	Argument	s		5234817	0					
ANR	5234860	Identifier	s		5234817	0					
ANR	5234861	IfStatement	if ( ( len * 7 ) + 1 < len )		5234817	4					
ANR	5234862	Condition	( len * 7 ) + 1 < len	2584:5:54630:54648	5234817	0	True				
ANR	5234863	RelationalExpression	( len * 7 ) + 1 < len		5234817	0		<			
ANR	5234864	AdditiveExpression	( len * 7 ) + 1		5234817	0		+			
ANR	5234865	MultiplicativeExpression	len * 7		5234817	0		*			
ANR	5234866	Identifier	len		5234817	0					
ANR	5234867	PrimaryExpression	7		5234817	1					
ANR	5234868	PrimaryExpression	1		5234817	1					
ANR	5234869	Identifier	len		5234817	1					
ANR	5234870	CompoundStatement		10:26:131:131	5234817	1					
ANR	5234871	ReturnStatement	return NULL ;	2585:2:54655:54666	5234817	0	True				
ANR	5234872	Identifier	NULL		5234817	0					
ANR	5234873	ExpressionStatement	od = d = malloc ( 1 + ( len * 7 ) )	2587:1:54672:54703	5234817	5	True				
ANR	5234874	AssignmentExpression	od = d = malloc ( 1 + ( len * 7 ) )		5234817	0		=			
ANR	5234875	Identifier	od		5234817	0					
ANR	5234876	AssignmentExpression	d = malloc ( 1 + ( len * 7 ) )		5234817	1		=			
ANR	5234877	Identifier	d		5234817	0					
ANR	5234878	CallExpression	malloc ( 1 + ( len * 7 ) )		5234817	1					
ANR	5234879	Callee	malloc		5234817	0					
ANR	5234880	Identifier	malloc		5234817	0					
ANR	5234881	ArgumentList	1 + ( len * 7 )		5234817	1					
ANR	5234882	Argument	1 + ( len * 7 )		5234817	0					
ANR	5234883	AdditiveExpression	1 + ( len * 7 )		5234817	0		+			
ANR	5234884	PrimaryExpression	1		5234817	0					
ANR	5234885	MultiplicativeExpression	len * 7		5234817	1		*			
ANR	5234886	Identifier	len		5234817	0					
ANR	5234887	PrimaryExpression	7		5234817	1					
ANR	5234888	IfStatement	if ( ! d )		5234817	6					
ANR	5234889	Condition	! d	2588:5:54710:54711	5234817	0	True				
ANR	5234890	UnaryOperationExpression	! d		5234817	0					
ANR	5234891	UnaryOperator	!		5234817	0					
ANR	5234892	Identifier	d		5234817	1					
ANR	5234893	CompoundStatement		14:9:194:194	5234817	1					
ANR	5234894	ReturnStatement	return NULL ;	2589:2:54718:54729	5234817	0	True				
ANR	5234895	Identifier	NULL		5234817	0					
ANR	5234896	ForStatement	"for ( i = 0 ; i < len ; s ++ , i ++ )"		5234817	7					
ANR	5234897	ForInit	i = 0 ;	2591:6:54740:54745	5234817	0	True				
ANR	5234898	AssignmentExpression	i = 0		5234817	0		=			
ANR	5234899	Identifier	i		5234817	0					
ANR	5234900	PrimaryExpression	0		5234817	1					
ANR	5234901	Condition	i < len	2591:13:54747:54753	5234817	1	True				
ANR	5234902	RelationalExpression	i < len		5234817	0		<			
ANR	5234903	Identifier	i		5234817	0					
ANR	5234904	Identifier	len		5234817	1					
ANR	5234905	Expression	"s ++ , i ++"	2591:22:54756:54763	5234817	2	True				
ANR	5234906	PostIncDecOperationExpression	s ++		5234817	0					
ANR	5234907	Identifier	s		5234817	0					
ANR	5234908	IncDec	++		5234817	1					
ANR	5234909	PostIncDecOperationExpression	i ++		5234817	1					
ANR	5234910	Identifier	i		5234817	0					
ANR	5234911	IncDec	++		5234817	1					
ANR	5234912	CompoundStatement		17:32:246:246	5234817	3					
ANR	5234913	IfStatement	if ( * s == '\\\\' )		5234817	0					
ANR	5234914	Condition	* s == '\\\\'	2592:6:54774:54783	5234817	0	True				
ANR	5234915	EqualityExpression	* s == '\\\\'		5234817	0		==			
ANR	5234916	UnaryOperationExpression	* s		5234817	0					
ANR	5234917	UnaryOperator	*		5234817	0					
ANR	5234918	Identifier	s		5234817	1					
ANR	5234919	PrimaryExpression	'\\\\'		5234817	1					
ANR	5234920	CompoundStatement		18:18:266:266	5234817	1					
ANR	5234921	ExpressionStatement	* d ++ = '\\\\'	2593:3:54791:54802	5234817	0	True				
ANR	5234922	AssignmentExpression	* d ++ = '\\\\'		5234817	0		=			
ANR	5234923	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234924	UnaryOperator	*		5234817	0					
ANR	5234925	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234926	Identifier	d		5234817	0					
ANR	5234927	IncDec	++		5234817	1					
ANR	5234928	PrimaryExpression	'\\\\'		5234817	1					
ANR	5234929	ExpressionStatement	* d ++ = '\\\\'	2594:3:54807:54818	5234817	1	True				
ANR	5234930	AssignmentExpression	* d ++ = '\\\\'		5234817	0		=			
ANR	5234931	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234932	UnaryOperator	*		5234817	0					
ANR	5234933	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234934	Identifier	d		5234817	0					
ANR	5234935	IncDec	++		5234817	1					
ANR	5234936	PrimaryExpression	'\\\\'		5234817	1					
ANR	5234937	ElseStatement	else		5234817	0					
ANR	5234938	IfStatement	"if ( * s == '""' )"		5234817	0					
ANR	5234939	Condition	"* s == '""'"	2595:13:54833:54841	5234817	0	True				
ANR	5234940	EqualityExpression	"* s == '""'"		5234817	0		==			
ANR	5234941	UnaryOperationExpression	* s		5234817	0					
ANR	5234942	UnaryOperator	*		5234817	0					
ANR	5234943	Identifier	s		5234817	1					
ANR	5234944	PrimaryExpression	"'""'"		5234817	1					
ANR	5234945	CompoundStatement		21:24:324:324	5234817	1					
ANR	5234946	ExpressionStatement	* d ++ = '\\\\'	2596:3:54849:54860	5234817	0	True				
ANR	5234947	AssignmentExpression	* d ++ = '\\\\'		5234817	0		=			
ANR	5234948	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234949	UnaryOperator	*		5234817	0					
ANR	5234950	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234951	Identifier	d		5234817	0					
ANR	5234952	IncDec	++		5234817	1					
ANR	5234953	PrimaryExpression	'\\\\'		5234817	1					
ANR	5234954	ExpressionStatement	"* d ++ = '""'"	2597:3:54865:54875	5234817	1	True				
ANR	5234955	AssignmentExpression	"* d ++ = '""'"		5234817	0		=			
ANR	5234956	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234957	UnaryOperator	*		5234817	0					
ANR	5234958	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234959	Identifier	d		5234817	0					
ANR	5234960	IncDec	++		5234817	1					
ANR	5234961	PrimaryExpression	"'""'"		5234817	1					
ANR	5234962	ElseStatement	else		5234817	0					
ANR	5234963	IfStatement	if ( ( * s >= 0x20 ) && ( * s <= 126 ) )		5234817	0					
ANR	5234964	Condition	( * s >= 0x20 ) && ( * s <= 126 )	2598:13:54890:54916	5234817	0	True				
ANR	5234965	AndExpression	( * s >= 0x20 ) && ( * s <= 126 )		5234817	0		&&			
ANR	5234966	RelationalExpression	* s >= 0x20		5234817	0		>=			
ANR	5234967	UnaryOperationExpression	* s		5234817	0					
ANR	5234968	UnaryOperator	*		5234817	0					
ANR	5234969	Identifier	s		5234817	1					
ANR	5234970	PrimaryExpression	0x20		5234817	1					
ANR	5234971	RelationalExpression	* s <= 126		5234817	1		<=			
ANR	5234972	UnaryOperationExpression	* s		5234817	0					
ANR	5234973	UnaryOperator	*		5234817	0					
ANR	5234974	Identifier	s		5234817	1					
ANR	5234975	PrimaryExpression	126		5234817	1					
ANR	5234976	CompoundStatement		24:42:399:399	5234817	1					
ANR	5234977	ExpressionStatement	* d ++ = * s	2599:3:54924:54933	5234817	0	True				
ANR	5234978	AssignmentExpression	* d ++ = * s		5234817	0		=			
ANR	5234979	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234980	UnaryOperator	*		5234817	0					
ANR	5234981	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234982	Identifier	d		5234817	0					
ANR	5234983	IncDec	++		5234817	1					
ANR	5234984	UnaryOperationExpression	* s		5234817	1					
ANR	5234985	UnaryOperator	*		5234817	0					
ANR	5234986	Identifier	s		5234817	1					
ANR	5234987	ElseStatement	else		5234817	0					
ANR	5234988	CompoundStatement		26:9:424:424	5234817	0					
ANR	5234989	ExpressionStatement	* d ++ = '\\\\'	2601:3:54949:54960	5234817	0	True				
ANR	5234990	AssignmentExpression	* d ++ = '\\\\'		5234817	0		=			
ANR	5234991	UnaryOperationExpression	* d ++		5234817	0					
ANR	5234992	UnaryOperator	*		5234817	0					
ANR	5234993	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5234994	Identifier	d		5234817	0					
ANR	5234995	IncDec	++		5234817	1					
ANR	5234996	PrimaryExpression	'\\\\'		5234817	1					
ANR	5234997	ExpressionStatement	* d ++ = 'u'	2603:3:54984:54994	5234817	1	True				
ANR	5234998	AssignmentExpression	* d ++ = 'u'		5234817	0		=			
ANR	5234999	UnaryOperationExpression	* d ++		5234817	0					
ANR	5235000	UnaryOperator	*		5234817	0					
ANR	5235001	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5235002	Identifier	d		5234817	0					
ANR	5235003	IncDec	++		5234817	1					
ANR	5235004	PrimaryExpression	'u'		5234817	1					
ANR	5235005	ExpressionStatement	* d ++ = '0'	2604:3:54999:55009	5234817	2	True				
ANR	5235006	AssignmentExpression	* d ++ = '0'		5234817	0		=			
ANR	5235007	UnaryOperationExpression	* d ++		5234817	0					
ANR	5235008	UnaryOperator	*		5234817	0					
ANR	5235009	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5235010	Identifier	d		5234817	0					
ANR	5235011	IncDec	++		5234817	1					
ANR	5235012	PrimaryExpression	'0'		5234817	1					
ANR	5235013	ExpressionStatement	* d ++ = '0'	2605:3:55014:55024	5234817	3	True				
ANR	5235014	AssignmentExpression	* d ++ = '0'		5234817	0		=			
ANR	5235015	UnaryOperationExpression	* d ++		5234817	0					
ANR	5235016	UnaryOperator	*		5234817	0					
ANR	5235017	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5235018	Identifier	d		5234817	0					
ANR	5235019	IncDec	++		5234817	1					
ANR	5235020	PrimaryExpression	'0'		5234817	1					
ANR	5235021	ExpressionStatement	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"	2606:3:55029:55081	5234817	4	True				
ANR	5235022	CallExpression	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"		5234817	0					
ANR	5235023	Callee	snprintf		5234817	0					
ANR	5235024	Identifier	snprintf		5234817	0					
ANR	5235025	ArgumentList	ch		5234817	1					
ANR	5235026	Argument	ch		5234817	0					
ANR	5235027	Identifier	ch		5234817	0					
ANR	5235028	Argument	sizeof ( ch )		5234817	1					
ANR	5235029	SizeofExpression	sizeof ( ch )		5234817	0					
ANR	5235030	Sizeof	sizeof		5234817	0					
ANR	5235031	SizeofOperand	ch		5234817	1					
ANR	5235032	Argument	"""%02x"""		5234817	2					
ANR	5235033	PrimaryExpression	"""%02x"""		5234817	0					
ANR	5235034	Argument	0xff & ( ( ut8 ) * s )		5234817	3					
ANR	5235035	BitAndExpression	0xff & ( ( ut8 ) * s )		5234817	0		&			
ANR	5235036	PrimaryExpression	0xff		5234817	0					
ANR	5235037	CastExpression	( ut8 ) * s		5234817	1					
ANR	5235038	CastTarget	ut8		5234817	0					
ANR	5235039	UnaryOperationExpression	* s		5234817	1					
ANR	5235040	UnaryOperator	*		5234817	0					
ANR	5235041	Identifier	s		5234817	1					
ANR	5235042	ExpressionStatement	* d ++ = ch [ 0 ]	2607:3:55086:55098	5234817	5	True				
ANR	5235043	AssignmentExpression	* d ++ = ch [ 0 ]		5234817	0		=			
ANR	5235044	UnaryOperationExpression	* d ++		5234817	0					
ANR	5235045	UnaryOperator	*		5234817	0					
ANR	5235046	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5235047	Identifier	d		5234817	0					
ANR	5235048	IncDec	++		5234817	1					
ANR	5235049	ArrayIndexing	ch [ 0 ]		5234817	1					
ANR	5235050	Identifier	ch		5234817	0					
ANR	5235051	PrimaryExpression	0		5234817	1					
ANR	5235052	ExpressionStatement	* d ++ = ch [ 1 ]	2608:3:55103:55115	5234817	6	True				
ANR	5235053	AssignmentExpression	* d ++ = ch [ 1 ]		5234817	0		=			
ANR	5235054	UnaryOperationExpression	* d ++		5234817	0					
ANR	5235055	UnaryOperator	*		5234817	0					
ANR	5235056	PostIncDecOperationExpression	d ++		5234817	1					
ANR	5235057	Identifier	d		5234817	0					
ANR	5235058	IncDec	++		5234817	1					
ANR	5235059	ArrayIndexing	ch [ 1 ]		5234817	1					
ANR	5235060	Identifier	ch		5234817	0					
ANR	5235061	PrimaryExpression	1		5234817	1					
ANR	5235062	ExpressionStatement	* d = 0	2611:1:55125:55131	5234817	8	True				
ANR	5235063	AssignmentExpression	* d = 0		5234817	0		=			
ANR	5235064	UnaryOperationExpression	* d		5234817	0					
ANR	5235065	UnaryOperator	*		5234817	0					
ANR	5235066	Identifier	d		5234817	1					
ANR	5235067	PrimaryExpression	0		5234817	1					
ANR	5235068	ExpressionStatement	"tmp = realloc ( od , strlen ( od ) + 1 )"	2612:1:55134:55169	5234817	9	True				
ANR	5235069	AssignmentExpression	"tmp = realloc ( od , strlen ( od ) + 1 )"		5234817	0		=			
ANR	5235070	Identifier	tmp		5234817	0					
ANR	5235071	CallExpression	"realloc ( od , strlen ( od ) + 1 )"		5234817	1					
ANR	5235072	Callee	realloc		5234817	0					
ANR	5235073	Identifier	realloc		5234817	0					
ANR	5235074	ArgumentList	od		5234817	1					
ANR	5235075	Argument	od		5234817	0					
ANR	5235076	Identifier	od		5234817	0					
ANR	5235077	Argument	strlen ( od ) + 1		5234817	1					
ANR	5235078	AdditiveExpression	strlen ( od ) + 1		5234817	0		+			
ANR	5235079	CallExpression	strlen ( od )		5234817	0					
ANR	5235080	Callee	strlen		5234817	0					
ANR	5235081	Identifier	strlen		5234817	0					
ANR	5235082	ArgumentList	od		5234817	1					
ANR	5235083	Argument	od		5234817	0					
ANR	5235084	Identifier	od		5234817	0					
ANR	5235085	PrimaryExpression	1		5234817	1					
ANR	5235086	IfStatement	if ( ! tmp )		5234817	10					
ANR	5235087	Condition	! tmp	2613:5:55183:55186	5234817	0	True				
ANR	5235088	UnaryOperationExpression	! tmp		5234817	0					
ANR	5235089	UnaryOperator	!		5234817	0					
ANR	5235090	Identifier	tmp		5234817	1					
ANR	5235091	CompoundStatement		39:11:669:669	5234817	1					
ANR	5235092	ExpressionStatement	free ( od )	2614:2:55193:55202	5234817	0	True				
ANR	5235093	CallExpression	free ( od )		5234817	0					
ANR	5235094	Callee	free		5234817	0					
ANR	5235095	Identifier	free		5234817	0					
ANR	5235096	ArgumentList	od		5234817	1					
ANR	5235097	Argument	od		5234817	0					
ANR	5235098	Identifier	od		5234817	0					
ANR	5235099	ReturnStatement	return NULL ;	2615:2:55206:55217	5234817	1	True				
ANR	5235100	Identifier	NULL		5234817	0					
ANR	5235101	ReturnStatement	return tmp ;	2617:1:55223:55233	5234817	11	True				
ANR	5235102	Identifier	tmp		5234817	0					
ANR	5235103	ReturnType	R_API char *		5234817	1					
ANR	5235104	Identifier	r_str_utf16_encode		5234817	2					
ANR	5235105	ParameterList	"const char * s , int len"		5234817	3					
ANR	5235106	Parameter	const char * s	2575:31:54495:54507	5234817	0	True				
ANR	5235107	ParameterType	const char *		5234817	0					
ANR	5235108	Identifier	s		5234817	1					
ANR	5235109	Parameter	int len	2575:46:54510:54516	5234817	1	True				
ANR	5235110	ParameterType	int		5234817	0					
ANR	5235111	Identifier	len		5234817	1					
ANR	5235112	CFGEntryNode	ENTRY		5234817		True				
ANR	5235113	CFGExitNode	EXIT		5234817		True				
ANR	5235114	Symbol	malloc		5234817						
ANR	5235115	Symbol	NULL		5234817						
ANR	5235116	Symbol	d		5234817						
ANR	5235117	Symbol	ch		5234817						
ANR	5235118	Symbol	* ch		5234817						
ANR	5235119	Symbol	i		5234817						
ANR	5235120	Symbol	realloc		5234817						
ANR	5235121	Symbol	* d ++		5234817						
ANR	5235122	Symbol	* d		5234817						
ANR	5235123	Symbol	strlen		5234817						
ANR	5235124	Symbol	s		5234817						
ANR	5235125	Symbol	len		5234817						
ANR	5235126	Symbol	od		5234817						
ANR	5235127	Symbol	tmp		5234817						
ANR	5235128	Symbol	* s		5234817						
ANR	5235129	Function	r_print_format_length	2622:0:55294:57714							
ANR	5235130	FunctionDef	r_print_format_length (const char * fmt)		5235129	0					
ANR	5235131	CompoundStatement		2622:49:55343:57714	5235129	0					
ANR	5235132	IdentifierDeclStatement	"int nargs , i , j , idx , times , endian ;"	2623:1:55346:55381	5235129	0	True				
ANR	5235133	IdentifierDecl	nargs		5235129	0					
ANR	5235134	IdentifierDeclType	int		5235129	0					
ANR	5235135	Identifier	nargs		5235129	1					
ANR	5235136	IdentifierDecl	i		5235129	1					
ANR	5235137	IdentifierDeclType	int		5235129	0					
ANR	5235138	Identifier	i		5235129	1					
ANR	5235139	IdentifierDecl	j		5235129	2					
ANR	5235140	IdentifierDeclType	int		5235129	0					
ANR	5235141	Identifier	j		5235129	1					
ANR	5235142	IdentifierDecl	idx		5235129	3					
ANR	5235143	IdentifierDeclType	int		5235129	0					
ANR	5235144	Identifier	idx		5235129	1					
ANR	5235145	IdentifierDecl	times		5235129	4					
ANR	5235146	IdentifierDeclType	int		5235129	0					
ANR	5235147	Identifier	times		5235129	1					
ANR	5235148	IdentifierDecl	endian		5235129	5					
ANR	5235149	IdentifierDeclType	int		5235129	0					
ANR	5235150	Identifier	endian		5235129	1					
ANR	5235151	IdentifierDeclStatement	"char * args , * bracket , tmp , last = 0 ;"	2624:1:55384:55419	5235129	1	True				
ANR	5235152	IdentifierDecl	* args		5235129	0					
ANR	5235153	IdentifierDeclType	char *		5235129	0					
ANR	5235154	Identifier	args		5235129	1					
ANR	5235155	IdentifierDecl	* bracket		5235129	1					
ANR	5235156	IdentifierDeclType	char *		5235129	0					
ANR	5235157	Identifier	bracket		5235129	1					
ANR	5235158	IdentifierDecl	tmp		5235129	2					
ANR	5235159	IdentifierDeclType	char		5235129	0					
ANR	5235160	Identifier	tmp		5235129	1					
ANR	5235161	IdentifierDecl	last = 0		5235129	3					
ANR	5235162	IdentifierDeclType	char		5235129	0					
ANR	5235163	Identifier	last		5235129	1					
ANR	5235164	AssignmentExpression	last = 0		5235129	2		=			
ANR	5235165	Identifier	last		5235129	0					
ANR	5235166	PrimaryExpression	0		5235129	1					
ANR	5235167	IdentifierDeclStatement	const char * arg = fmt ;	2625:1:55422:55443	5235129	2	True				
ANR	5235168	IdentifierDecl	* arg = fmt		5235129	0					
ANR	5235169	IdentifierDeclType	const char *		5235129	0					
ANR	5235170	Identifier	arg		5235129	1					
ANR	5235171	AssignmentExpression	* arg = fmt		5235129	2		=			
ANR	5235172	Identifier	fmt		5235129	0					
ANR	5235173	Identifier	fmt		5235129	1					
ANR	5235174	IdentifierDeclStatement	const char * argend = arg + strlen ( fmt ) ;	2626:1:55446:55483	5235129	3	True				
ANR	5235175	IdentifierDecl	* argend = arg + strlen ( fmt )		5235129	0					
ANR	5235176	IdentifierDeclType	const char *		5235129	0					
ANR	5235177	Identifier	argend		5235129	1					
ANR	5235178	AssignmentExpression	* argend = arg + strlen ( fmt )		5235129	2		=			
ANR	5235179	Identifier	argend		5235129	0					
ANR	5235180	AdditiveExpression	arg + strlen ( fmt )		5235129	1		+			
ANR	5235181	Identifier	arg		5235129	0					
ANR	5235182	CallExpression	strlen ( fmt )		5235129	1					
ANR	5235183	Callee	strlen		5235129	0					
ANR	5235184	Identifier	strlen		5235129	0					
ANR	5235185	ArgumentList	fmt		5235129	1					
ANR	5235186	Argument	fmt		5235129	0					
ANR	5235187	Identifier	fmt		5235129	0					
ANR	5235188	IdentifierDeclStatement	char namefmt [ 8 ] ;	2627:1:55486:55501	5235129	4	True				
ANR	5235189	IdentifierDecl	namefmt [ 8 ]		5235129	0					
ANR	5235190	IdentifierDeclType	char [ 8 ]		5235129	0					
ANR	5235191	Identifier	namefmt		5235129	1					
ANR	5235192	PrimaryExpression	8		5235129	2					
ANR	5235193	IdentifierDeclStatement	int viewflags = 0 ;	2628:1:55504:55521	5235129	5	True				
ANR	5235194	IdentifierDecl	viewflags = 0		5235129	0					
ANR	5235195	IdentifierDeclType	int		5235129	0					
ANR	5235196	Identifier	viewflags		5235129	1					
ANR	5235197	AssignmentExpression	viewflags = 0		5235129	2		=			
ANR	5235198	Identifier	viewflags		5235129	0					
ANR	5235199	PrimaryExpression	0		5235129	1					
ANR	5235200	ExpressionStatement	endian = i = j = 0	2629:1:55524:55542	5235129	6	True				
ANR	5235201	AssignmentExpression	endian = i = j = 0		5235129	0		=			
ANR	5235202	Identifier	endian		5235129	0					
ANR	5235203	AssignmentExpression	i = j = 0		5235129	1		=			
ANR	5235204	Identifier	i		5235129	0					
ANR	5235205	AssignmentExpression	j = 0		5235129	1		=			
ANR	5235206	Identifier	j		5235129	0					
ANR	5235207	PrimaryExpression	0		5235129	1					
ANR	5235208	WhileStatement	while ( * arg && IS_WHITECHAR ( * arg ) )		5235129	7					
ANR	5235209	Condition	* arg && IS_WHITECHAR ( * arg )	2631:8:55553:55579	5235129	0	True				
ANR	5235210	AndExpression	* arg && IS_WHITECHAR ( * arg )		5235129	0		&&			
ANR	5235211	UnaryOperationExpression	* arg		5235129	0					
ANR	5235212	UnaryOperator	*		5235129	0					
ANR	5235213	Identifier	arg		5235129	1					
ANR	5235214	CallExpression	IS_WHITECHAR ( * arg )		5235129	1					
ANR	5235215	Callee	IS_WHITECHAR		5235129	0					
ANR	5235216	Identifier	IS_WHITECHAR		5235129	0					
ANR	5235217	ArgumentList	* arg		5235129	1					
ANR	5235218	Argument	* arg		5235129	0					
ANR	5235219	UnaryOperationExpression	* arg		5235129	0					
ANR	5235220	UnaryOperator	*		5235129	0					
ANR	5235221	Identifier	arg		5235129	1					
ANR	5235222	CompoundStatement		10:37:238:238	5235129	1					
ANR	5235223	ExpressionStatement	arg ++	2632:2:55586:55591	5235129	0	True				
ANR	5235224	PostIncDecOperationExpression	arg ++		5235129	0					
ANR	5235225	Identifier	arg		5235129	0					
ANR	5235226	IncDec	++		5235129	1					
ANR	5235227	ExpressionStatement	times = atoi ( arg )	2635:1:55614:55632	5235129	8	True				
ANR	5235228	AssignmentExpression	times = atoi ( arg )		5235129	0		=			
ANR	5235229	Identifier	times		5235129	0					
ANR	5235230	CallExpression	atoi ( arg )		5235129	1					
ANR	5235231	Callee	atoi		5235129	0					
ANR	5235232	Identifier	atoi		5235129	0					
ANR	5235233	ArgumentList	arg		5235129	1					
ANR	5235234	Argument	arg		5235129	0					
ANR	5235235	Identifier	arg		5235129	0					
ANR	5235236	IfStatement	if ( times > 0 )		5235129	9					
ANR	5235237	Condition	times > 0	2636:5:55639:55647	5235129	0	True				
ANR	5235238	RelationalExpression	times > 0		5235129	0		>			
ANR	5235239	Identifier	times		5235129	0					
ANR	5235240	PrimaryExpression	0		5235129	1					
ANR	5235241	CompoundStatement		15:16:306:306	5235129	1					
ANR	5235242	WhileStatement	while ( ( * arg >= '0' && * arg <= '9' ) )		5235129	0					
ANR	5235243	Condition	* arg >= '0' && * arg <= '9'	2637:9:55661:55688	5235129	0	True				
ANR	5235244	AndExpression	* arg >= '0' && * arg <= '9'		5235129	0		&&			
ANR	5235245	RelationalExpression	* arg >= '0'		5235129	0		>=			
ANR	5235246	UnaryOperationExpression	* arg		5235129	0					
ANR	5235247	UnaryOperator	*		5235129	0					
ANR	5235248	Identifier	arg		5235129	1					
ANR	5235249	PrimaryExpression	'0'		5235129	1					
ANR	5235250	RelationalExpression	* arg <= '9'		5235129	1		<=			
ANR	5235251	UnaryOperationExpression	* arg		5235129	0					
ANR	5235252	UnaryOperator	*		5235129	0					
ANR	5235253	Identifier	arg		5235129	1					
ANR	5235254	PrimaryExpression	'9'		5235129	1					
ANR	5235255	CompoundStatement		16:39:347:347	5235129	1					
ANR	5235256	ExpressionStatement	arg ++	2638:3:55696:55701	5235129	0	True				
ANR	5235257	PostIncDecOperationExpression	arg ++		5235129	0					
ANR	5235258	Identifier	arg		5235129	0					
ANR	5235259	IncDec	++		5235129	1					
ANR	5235260	ExpressionStatement	"bracket = strchr ( arg , '{' )"	2641:1:55711:55737	5235129	10	True				
ANR	5235261	AssignmentExpression	"bracket = strchr ( arg , '{' )"		5235129	0		=			
ANR	5235262	Identifier	bracket		5235129	0					
ANR	5235263	CallExpression	"strchr ( arg , '{' )"		5235129	1					
ANR	5235264	Callee	strchr		5235129	0					
ANR	5235265	Identifier	strchr		5235129	0					
ANR	5235266	ArgumentList	arg		5235129	1					
ANR	5235267	Argument	arg		5235129	0					
ANR	5235268	Identifier	arg		5235129	0					
ANR	5235269	Argument	'{'		5235129	1					
ANR	5235270	PrimaryExpression	'{'		5235129	0					
ANR	5235271	IfStatement	if ( bracket )		5235129	11					
ANR	5235272	Condition	bracket	2642:5:55744:55750	5235129	0	True				
ANR	5235273	Identifier	bracket		5235129	0					
ANR	5235274	CompoundStatement		22:2:413:441	5235129	1					
ANR	5235275	IdentifierDeclStatement	"char * end = strchr ( arg , '}' ) ;"	2643:2:55757:55785	5235129	0	True				
ANR	5235276	IdentifierDecl	"* end = strchr ( arg , '}' )"		5235129	0					
ANR	5235277	IdentifierDeclType	char *		5235129	0					
ANR	5235278	Identifier	end		5235129	1					
ANR	5235279	AssignmentExpression	"* end = strchr ( arg , '}' )"		5235129	2		=			
ANR	5235280	Identifier	end		5235129	0					
ANR	5235281	CallExpression	"strchr ( arg , '}' )"		5235129	1					
ANR	5235282	Callee	strchr		5235129	0					
ANR	5235283	Identifier	strchr		5235129	0					
ANR	5235284	ArgumentList	arg		5235129	1					
ANR	5235285	Argument	arg		5235129	0					
ANR	5235286	Identifier	arg		5235129	0					
ANR	5235287	Argument	'}'		5235129	1					
ANR	5235288	PrimaryExpression	'}'		5235129	0					
ANR	5235289	IfStatement	if ( ! end )		5235129	1					
ANR	5235290	Condition	! end	2644:6:55793:55796	5235129	0	True				
ANR	5235291	UnaryOperationExpression	! end		5235129	0					
ANR	5235292	UnaryOperator	!		5235129	0					
ANR	5235293	Identifier	end		5235129	1					
ANR	5235294	CompoundStatement		23:12:455:455	5235129	1					
ANR	5235295	ExpressionStatement	"eprintf ( ""No end bracket. Try pm {ecx}b @ esi\\n"" )"	2645:3:55804:55853	5235129	0	True				
ANR	5235296	CallExpression	"eprintf ( ""No end bracket. Try pm {ecx}b @ esi\\n"" )"		5235129	0					
ANR	5235297	Callee	eprintf		5235129	0					
ANR	5235298	Identifier	eprintf		5235129	0					
ANR	5235299	ArgumentList	"""No end bracket. Try pm {ecx}b @ esi\\n"""		5235129	1					
ANR	5235300	Argument	"""No end bracket. Try pm {ecx}b @ esi\\n"""		5235129	0					
ANR	5235301	PrimaryExpression	"""No end bracket. Try pm {ecx}b @ esi\\n"""		5235129	0					
ANR	5235302	ReturnStatement	return 0 ;	2646:3:55858:55866	5235129	1	True				
ANR	5235303	PrimaryExpression	0		5235129	0					
ANR	5235304	ExpressionStatement	* end = '\\0'	2648:2:55874:55883	5235129	2	True				
ANR	5235305	AssignmentExpression	* end = '\\0'		5235129	0		=			
ANR	5235306	UnaryOperationExpression	* end		5235129	0					
ANR	5235307	UnaryOperator	*		5235129	0					
ANR	5235308	Identifier	end		5235129	1					
ANR	5235309	PrimaryExpression	'\\0'		5235129	1					
ANR	5235310	ExpressionStatement	"times = r_num_math ( NULL , bracket + 1 )"	2649:2:55887:55923	5235129	3	True				
ANR	5235311	AssignmentExpression	"times = r_num_math ( NULL , bracket + 1 )"		5235129	0		=			
ANR	5235312	Identifier	times		5235129	0					
ANR	5235313	CallExpression	"r_num_math ( NULL , bracket + 1 )"		5235129	1					
ANR	5235314	Callee	r_num_math		5235129	0					
ANR	5235315	Identifier	r_num_math		5235129	0					
ANR	5235316	ArgumentList	NULL		5235129	1					
ANR	5235317	Argument	NULL		5235129	0					
ANR	5235318	Identifier	NULL		5235129	0					
ANR	5235319	Argument	bracket + 1		5235129	1					
ANR	5235320	AdditiveExpression	bracket + 1		5235129	0		+			
ANR	5235321	Identifier	bracket		5235129	0					
ANR	5235322	PrimaryExpression	1		5235129	1					
ANR	5235323	ExpressionStatement	arg = end + 1	2650:2:55927:55940	5235129	4	True				
ANR	5235324	AssignmentExpression	arg = end + 1		5235129	0		=			
ANR	5235325	Identifier	arg		5235129	0					
ANR	5235326	AdditiveExpression	end + 1		5235129	1		+			
ANR	5235327	Identifier	end		5235129	0					
ANR	5235328	PrimaryExpression	1		5235129	1					
ANR	5235329	IfStatement	if ( * arg == '\\0' )		5235129	12					
ANR	5235330	Condition	* arg == '\\0'	2653:5:55951:55962	5235129	0	True				
ANR	5235331	EqualityExpression	* arg == '\\0'		5235129	0		==			
ANR	5235332	UnaryOperationExpression	* arg		5235129	0					
ANR	5235333	UnaryOperator	*		5235129	0					
ANR	5235334	Identifier	arg		5235129	1					
ANR	5235335	PrimaryExpression	'\\0'		5235129	1					
ANR	5235336	CompoundStatement		32:19:621:621	5235129	1					
ANR	5235337	ReturnStatement	return 0 ;	2654:2:55969:55977	5235129	0	True				
ANR	5235338	PrimaryExpression	0		5235129	0					
ANR	5235339	ExpressionStatement	"args = strchr ( arg , ' ' )"	2657:1:55999:56023	5235129	13	True				
ANR	5235340	AssignmentExpression	"args = strchr ( arg , ' ' )"		5235129	0		=			
ANR	5235341	Identifier	args		5235129	0					
ANR	5235342	CallExpression	"strchr ( arg , ' ' )"		5235129	1					
ANR	5235343	Callee	strchr		5235129	0					
ANR	5235344	Identifier	strchr		5235129	0					
ANR	5235345	ArgumentList	arg		5235129	1					
ANR	5235346	Argument	arg		5235129	0					
ANR	5235347	Identifier	arg		5235129	0					
ANR	5235348	Argument	' '		5235129	1					
ANR	5235349	PrimaryExpression	' '		5235129	0					
ANR	5235350	IfStatement	if ( args )		5235129	14					
ANR	5235351	Condition	args	2658:5:56030:56033	5235129	0	True				
ANR	5235352	Identifier	args		5235129	0					
ANR	5235353	CompoundStatement		38:2:696:715	5235129	1					
ANR	5235354	IdentifierDeclStatement	"int l = 0 , maxl = 0 ;"	2659:2:56040:56059	5235129	0	True				
ANR	5235355	IdentifierDecl	l = 0		5235129	0					
ANR	5235356	IdentifierDeclType	int		5235129	0					
ANR	5235357	Identifier	l		5235129	1					
ANR	5235358	AssignmentExpression	l = 0		5235129	2		=			
ANR	5235359	Identifier	l		5235129	0					
ANR	5235360	PrimaryExpression	0		5235129	1					
ANR	5235361	IdentifierDecl	maxl = 0		5235129	1					
ANR	5235362	IdentifierDeclType	int		5235129	0					
ANR	5235363	Identifier	maxl		5235129	1					
ANR	5235364	AssignmentExpression	maxl = 0		5235129	2		=			
ANR	5235365	Identifier	maxl		5235129	0					
ANR	5235366	PrimaryExpression	0		5235129	1					
ANR	5235367	ExpressionStatement	argend = args	2660:2:56063:56076	5235129	1	True				
ANR	5235368	AssignmentExpression	argend = args		5235129	0		=			
ANR	5235369	Identifier	argend		5235129	0					
ANR	5235370	Identifier	args		5235129	1					
ANR	5235371	ExpressionStatement	args = strdup ( args + 1 )	2661:2:56080:56102	5235129	2	True				
ANR	5235372	AssignmentExpression	args = strdup ( args + 1 )		5235129	0		=			
ANR	5235373	Identifier	args		5235129	0					
ANR	5235374	CallExpression	strdup ( args + 1 )		5235129	1					
ANR	5235375	Callee	strdup		5235129	0					
ANR	5235376	Identifier	strdup		5235129	0					
ANR	5235377	ArgumentList	args + 1		5235129	1					
ANR	5235378	Argument	args + 1		5235129	0					
ANR	5235379	AdditiveExpression	args + 1		5235129	0		+			
ANR	5235380	Identifier	args		5235129	0					
ANR	5235381	PrimaryExpression	1		5235129	1					
ANR	5235382	ExpressionStatement	nargs = r_str_word_set0 ( args + 1 )	2662:2:56106:56138	5235129	3	True				
ANR	5235383	AssignmentExpression	nargs = r_str_word_set0 ( args + 1 )		5235129	0		=			
ANR	5235384	Identifier	nargs		5235129	0					
ANR	5235385	CallExpression	r_str_word_set0 ( args + 1 )		5235129	1					
ANR	5235386	Callee	r_str_word_set0		5235129	0					
ANR	5235387	Identifier	r_str_word_set0		5235129	0					
ANR	5235388	ArgumentList	args + 1		5235129	1					
ANR	5235389	Argument	args + 1		5235129	0					
ANR	5235390	AdditiveExpression	args + 1		5235129	0		+			
ANR	5235391	Identifier	args		5235129	0					
ANR	5235392	PrimaryExpression	1		5235129	1					
ANR	5235393	IfStatement	if ( ! nargs )		5235129	4					
ANR	5235394	Condition	! nargs	2663:6:56146:56151	5235129	0	True				
ANR	5235395	UnaryOperationExpression	! nargs		5235129	0					
ANR	5235396	UnaryOperator	!		5235129	0					
ANR	5235397	Identifier	nargs		5235129	1					
ANR	5235398	CompoundStatement		42:14:810:810	5235129	1					
ANR	5235399	ExpressionStatement	R_FREE ( args )	2664:3:56159:56172	5235129	0	True				
ANR	5235400	CallExpression	R_FREE ( args )		5235129	0					
ANR	5235401	Callee	R_FREE		5235129	0					
ANR	5235402	Identifier	R_FREE		5235129	0					
ANR	5235403	ArgumentList	args		5235129	1					
ANR	5235404	Argument	args		5235129	0					
ANR	5235405	Identifier	args		5235129	0					
ANR	5235406	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		5235129	5					
ANR	5235407	ForInit	i = 0 ;	2666:7:56185:56190	5235129	0	True				
ANR	5235408	AssignmentExpression	i = 0		5235129	0		=			
ANR	5235409	Identifier	i		5235129	0					
ANR	5235410	PrimaryExpression	0		5235129	1					
ANR	5235411	Condition	i < nargs	2666:14:56192:56198	5235129	1	True				
ANR	5235412	RelationalExpression	i < nargs		5235129	0		<			
ANR	5235413	Identifier	i		5235129	0					
ANR	5235414	Identifier	nargs		5235129	1					
ANR	5235415	PostIncDecOperationExpression	i ++	2666:23:56201:56203	5235129	2	True				
ANR	5235416	Identifier	i		5235129	0					
ANR	5235417	IncDec	++		5235129	1					
ANR	5235418	CompoundStatement		46:3:867:915	5235129	3					
ANR	5235419	IdentifierDeclStatement	"int len = strlen ( r_str_word_get0 ( args + 1 , i ) ) ;"	2667:3:56211:56259	5235129	0	True				
ANR	5235420	IdentifierDecl	"len = strlen ( r_str_word_get0 ( args + 1 , i ) )"		5235129	0					
ANR	5235421	IdentifierDeclType	int		5235129	0					
ANR	5235422	Identifier	len		5235129	1					
ANR	5235423	AssignmentExpression	"len = strlen ( r_str_word_get0 ( args + 1 , i ) )"		5235129	2		=			
ANR	5235424	Identifier	len		5235129	0					
ANR	5235425	CallExpression	"strlen ( r_str_word_get0 ( args + 1 , i ) )"		5235129	1					
ANR	5235426	Callee	strlen		5235129	0					
ANR	5235427	Identifier	strlen		5235129	0					
ANR	5235428	ArgumentList	"r_str_word_get0 ( args + 1 , i )"		5235129	1					
ANR	5235429	Argument	"r_str_word_get0 ( args + 1 , i )"		5235129	0					
ANR	5235430	CallExpression	"r_str_word_get0 ( args + 1 , i )"		5235129	0					
ANR	5235431	Callee	r_str_word_get0		5235129	0					
ANR	5235432	Identifier	r_str_word_get0		5235129	0					
ANR	5235433	ArgumentList	args + 1		5235129	1					
ANR	5235434	Argument	args + 1		5235129	0					
ANR	5235435	AdditiveExpression	args + 1		5235129	0		+			
ANR	5235436	Identifier	args		5235129	0					
ANR	5235437	PrimaryExpression	1		5235129	1					
ANR	5235438	Argument	i		5235129	1					
ANR	5235439	Identifier	i		5235129	0					
ANR	5235440	IfStatement	if ( len > maxl )		5235129	1					
ANR	5235441	Condition	len > maxl	2668:7:56268:56277	5235129	0	True				
ANR	5235442	RelationalExpression	len > maxl		5235129	0		>			
ANR	5235443	Identifier	len		5235129	0					
ANR	5235444	Identifier	maxl		5235129	1					
ANR	5235445	CompoundStatement		47:19:936:936	5235129	1					
ANR	5235446	ExpressionStatement	maxl = len	2669:4:56286:56296	5235129	0	True				
ANR	5235447	AssignmentExpression	maxl = len		5235129	0		=			
ANR	5235448	Identifier	maxl		5235129	0					
ANR	5235449	Identifier	len		5235129	1					
ANR	5235450	ExpressionStatement	l ++	2672:2:56309:56312	5235129	6	True				
ANR	5235451	PostIncDecOperationExpression	l ++		5235129	0					
ANR	5235452	Identifier	l		5235129	0					
ANR	5235453	IncDec	++		5235129	1					
ANR	5235454	ExpressionStatement	"snprintf ( namefmt , sizeof ( namefmt ) , ""%%%ds : "" , maxl )"	2673:2:56316:56370	5235129	7	True				
ANR	5235455	CallExpression	"snprintf ( namefmt , sizeof ( namefmt ) , ""%%%ds : "" , maxl )"		5235129	0					
ANR	5235456	Callee	snprintf		5235129	0					
ANR	5235457	Identifier	snprintf		5235129	0					
ANR	5235458	ArgumentList	namefmt		5235129	1					
ANR	5235459	Argument	namefmt		5235129	0					
ANR	5235460	Identifier	namefmt		5235129	0					
ANR	5235461	Argument	sizeof ( namefmt )		5235129	1					
ANR	5235462	SizeofExpression	sizeof ( namefmt )		5235129	0					
ANR	5235463	Sizeof	sizeof		5235129	0					
ANR	5235464	SizeofOperand	namefmt		5235129	1					
ANR	5235465	Argument	"""%%%ds : """		5235129	2					
ANR	5235466	PrimaryExpression	"""%%%ds : """		5235129	0					
ANR	5235467	Argument	maxl		5235129	3					
ANR	5235468	Identifier	maxl		5235129	0					
ANR	5235469	ExpressionStatement	i = 0	2677:1:56394:56399	5235129	15	True				
ANR	5235470	AssignmentExpression	i = 0		5235129	0		=			
ANR	5235471	Identifier	i		5235129	0					
ANR	5235472	PrimaryExpression	0		5235129	1					
ANR	5235473	IfStatement	if ( ! times )		5235129	16					
ANR	5235474	Condition	! times	2678:5:56406:56411	5235129	0	True				
ANR	5235475	UnaryOperationExpression	! times		5235129	0					
ANR	5235476	UnaryOperator	!		5235129	0					
ANR	5235477	Identifier	times		5235129	1					
ANR	5235478	CompoundStatement		57:13:1070:1070	5235129	1					
ANR	5235479	ExpressionStatement	times = 1	2679:2:56418:56427	5235129	0	True				
ANR	5235480	AssignmentExpression	times = 1		5235129	0		=			
ANR	5235481	Identifier	times		5235129	0					
ANR	5235482	PrimaryExpression	1		5235129	1					
ANR	5235483	ForStatement	for ( ; times ; times -- )		5235129	17					
ANR	5235484	Condition	times	2681:8:56440:56444	5235129	0	True				
ANR	5235485	Identifier	times		5235129	0					
ANR	5235486	PostIncDecOperationExpression	times --	2681:15:56447:56453	5235129	1	True				
ANR	5235487	Identifier	times		5235129	0					
ANR	5235488	IncDec	--		5235129	1					
ANR	5235489	CompoundStatement		61:2:1134:1157	5235129	2					
ANR	5235490	IdentifierDeclStatement	const char * orig = arg ;	2682:2:56478:56501	5235129	0	True				
ANR	5235491	IdentifierDecl	* orig = arg		5235129	0					
ANR	5235492	IdentifierDeclType	const char *		5235129	0					
ANR	5235493	Identifier	orig		5235129	1					
ANR	5235494	AssignmentExpression	* orig = arg		5235129	2		=			
ANR	5235495	Identifier	arg		5235129	0					
ANR	5235496	Identifier	arg		5235129	1					
ANR	5235497	ExpressionStatement	arg = orig	2683:2:56505:56515	5235129	1	True				
ANR	5235498	AssignmentExpression	arg = orig		5235129	0		=			
ANR	5235499	Identifier	arg		5235129	0					
ANR	5235500	Identifier	orig		5235129	1					
ANR	5235501	ForStatement	"for ( idx = 0 ; arg < argend && * arg ; idx ++ , arg ++ )"		5235129	2					
ANR	5235502	ForInit	idx = 0 ;	2684:7:56524:56531	5235129	0	True				
ANR	5235503	AssignmentExpression	idx = 0		5235129	0		=			
ANR	5235504	Identifier	idx		5235129	0					
ANR	5235505	PrimaryExpression	0		5235129	1					
ANR	5235506	Condition	arg < argend && * arg	2684:16:56533:56552	5235129	1	True				
ANR	5235507	AndExpression	arg < argend && * arg		5235129	0		&&			
ANR	5235508	RelationalExpression	arg < argend		5235129	0		<			
ANR	5235509	Identifier	arg		5235129	0					
ANR	5235510	Identifier	argend		5235129	1					
ANR	5235511	UnaryOperationExpression	* arg		5235129	1					
ANR	5235512	UnaryOperator	*		5235129	0					
ANR	5235513	Identifier	arg		5235129	1					
ANR	5235514	Expression	"idx ++ , arg ++"	2684:38:56555:56566	5235129	2	True				
ANR	5235515	PostIncDecOperationExpression	idx ++		5235129	0					
ANR	5235516	Identifier	idx		5235129	0					
ANR	5235517	IncDec	++		5235129	1					
ANR	5235518	PostIncDecOperationExpression	arg ++		5235129	1					
ANR	5235519	Identifier	arg		5235129	0					
ANR	5235520	IncDec	++		5235129	1					
ANR	5235521	CompoundStatement		63:52:1225:1225	5235129	3					
ANR	5235522	ExpressionStatement	tmp = * arg	2685:3:56574:56584	5235129	0	True				
ANR	5235523	AssignmentExpression	tmp = * arg		5235129	0		=			
ANR	5235524	Identifier	tmp		5235129	0					
ANR	5235525	UnaryOperationExpression	* arg		5235129	1					
ANR	5235526	UnaryOperator	*		5235129	0					
ANR	5235527	Identifier	arg		5235129	1					
ANR	5235528	Label	feed_me_again :	2686:2:56588:56601	5235129	1	True				
ANR	5235529	Identifier	feed_me_again		5235129	0					
ANR	5235530	IfStatement	if ( ! tmp && last != '*' )		5235129	2					
ANR	5235531	Condition	! tmp && last != '*'	2687:7:56610:56628	5235129	0	True				
ANR	5235532	AndExpression	! tmp && last != '*'		5235129	0		&&			
ANR	5235533	UnaryOperationExpression	! tmp		5235129	0					
ANR	5235534	UnaryOperator	!		5235129	0					
ANR	5235535	Identifier	tmp		5235129	1					
ANR	5235536	EqualityExpression	last != '*'		5235129	1		!=			
ANR	5235537	Identifier	last		5235129	0					
ANR	5235538	PrimaryExpression	'*'		5235129	1					
ANR	5235539	CompoundStatement		66:28:1287:1287	5235129	1					
ANR	5235540	BreakStatement	break ;	2688:4:56637:56642	5235129	0	True				
ANR	5235541	SwitchStatement	switch ( tmp )		5235129	3					
ANR	5235542	Condition	tmp	2691:11:56680:56682	5235129	0	True				
ANR	5235543	Identifier	tmp		5235129	0					
ANR	5235544	CompoundStatement		70:16:1341:1341	5235129	1					
ANR	5235545	Label	case '*' :	2692:3:56690:56698	5235129	0	True				
ANR	5235546	IfStatement	if ( i <= 0 )		5235129	1					
ANR	5235547	Condition	i <= 0	2693:8:56708:56713	5235129	0	True				
ANR	5235548	RelationalExpression	i <= 0		5235129	0		<=			
ANR	5235549	Identifier	i		5235129	0					
ANR	5235550	PrimaryExpression	0		5235129	1					
ANR	5235551	CompoundStatement		72:16:1372:1372	5235129	1					
ANR	5235552	BreakStatement	break ;	2694:5:56723:56728	5235129	0	True				
ANR	5235553	ExpressionStatement	tmp = last	2696:4:56740:56750	5235129	2	True				
ANR	5235554	AssignmentExpression	tmp = last		5235129	0		=			
ANR	5235555	Identifier	tmp		5235129	0					
ANR	5235556	Identifier	last		5235129	1					
ANR	5235557	ExpressionStatement	arg --	2697:4:56756:56761	5235129	3	True				
ANR	5235558	PostIncDecOperationExpression	arg --		5235129	0					
ANR	5235559	Identifier	arg		5235129	0					
ANR	5235560	IncDec	--		5235129	1					
ANR	5235561	ExpressionStatement	idx --	2698:4:56767:56772	5235129	4	True				
ANR	5235562	PostIncDecOperationExpression	idx --		5235129	0					
ANR	5235563	Identifier	idx		5235129	0					
ANR	5235564	IncDec	--		5235129	1					
ANR	5235565	GotoStatement	goto feed_me_again ;	2699:4:56778:56796	5235129	5	True				
ANR	5235566	Identifier	feed_me_again		5235129	0					
ANR	5235567	Label	case '+' :	2700:3:56801:56809	5235129	6	True				
ANR	5235568	ExpressionStatement	idx --	2701:4:56815:56820	5235129	7	True				
ANR	5235569	PostIncDecOperationExpression	idx --		5235129	0					
ANR	5235570	Identifier	idx		5235129	0					
ANR	5235571	IncDec	--		5235129	1					
ANR	5235572	ExpressionStatement	viewflags = ! viewflags	2702:4:56826:56848	5235129	8	True				
ANR	5235573	AssignmentExpression	viewflags = ! viewflags		5235129	0		=			
ANR	5235574	Identifier	viewflags		5235129	0					
ANR	5235575	UnaryOperationExpression	! viewflags		5235129	1					
ANR	5235576	UnaryOperator	!		5235129	0					
ANR	5235577	Identifier	viewflags		5235129	1					
ANR	5235578	ContinueStatement	continue ;	2703:4:56854:56862	5235129	9	True				
ANR	5235579	Label	case 'e' :	2704:3:56867:56875	5235129	10	True				
ANR	5235580	ExpressionStatement	idx --	2705:4:56900:56905	5235129	11	True				
ANR	5235581	PostIncDecOperationExpression	idx --		5235129	0					
ANR	5235582	Identifier	idx		5235129	0					
ANR	5235583	IncDec	--		5235129	1					
ANR	5235584	ExpressionStatement	endian ^= 1	2706:4:56911:56922	5235129	12	True				
ANR	5235585	AssignmentExpression	endian ^= 1		5235129	0		^=			
ANR	5235586	Identifier	endian		5235129	0					
ANR	5235587	PrimaryExpression	1		5235129	1					
ANR	5235588	ContinueStatement	continue ;	2707:4:56928:56936	5235129	13	True				
ANR	5235589	Label	case '.' :	2708:3:56941:56949	5235129	14	True				
ANR	5235590	ExpressionStatement	i ++	2709:4:56968:56971	5235129	15	True				
ANR	5235591	PostIncDecOperationExpression	i ++		5235129	0					
ANR	5235592	Identifier	i		5235129	0					
ANR	5235593	IncDec	++		5235129	1					
ANR	5235594	ExpressionStatement	idx --	2710:4:56977:56982	5235129	16	True				
ANR	5235595	PostIncDecOperationExpression	idx --		5235129	0					
ANR	5235596	Identifier	idx		5235129	0					
ANR	5235597	IncDec	--		5235129	1					
ANR	5235598	ContinueStatement	continue ;	2711:4:56988:56996	5235129	17	True				
ANR	5235599	Label	case 'p' :	2712:3:57001:57009	5235129	18	True				
ANR	5235600	ExpressionStatement	tmp = ( sizeof ( void * ) == 8 ) ? 'q' : 'x'	2713:4:57015:57052	5235129	19	True				
ANR	5235601	AssignmentExpression	tmp = ( sizeof ( void * ) == 8 ) ? 'q' : 'x'		5235129	0		=			
ANR	5235602	Identifier	tmp		5235129	0					
ANR	5235603	ConditionalExpression	( sizeof ( void * ) == 8 ) ? 'q' : 'x'		5235129	1					
ANR	5235604	Condition	sizeof ( void * ) == 8		5235129	0					
ANR	5235605	EqualityExpression	sizeof ( void * ) == 8		5235129	0		==			
ANR	5235606	SizeofExpression	sizeof ( void * )		5235129	0					
ANR	5235607	Sizeof	sizeof		5235129	0					
ANR	5235608	SizeofOperand	void *		5235129	1					
ANR	5235609	PrimaryExpression	8		5235129	1					
ANR	5235610	PrimaryExpression	'q'		5235129	1					
ANR	5235611	PrimaryExpression	'x'		5235129	2					
ANR	5235612	BreakStatement	break ;	2714:4:57058:57063	5235129	20	True				
ANR	5235613	Label	case '?' :	2715:3:57068:57076	5235129	21	True				
ANR	5235614	ExpressionStatement	idx --	2716:4:57090:57095	5235129	22	True				
ANR	5235615	PostIncDecOperationExpression	idx --		5235129	0					
ANR	5235616	Identifier	idx		5235129	0					
ANR	5235617	IncDec	--		5235129	1					
ANR	5235618	ExpressionStatement	free ( args )	2717:4:57101:57112	5235129	23	True				
ANR	5235619	CallExpression	free ( args )		5235129	0					
ANR	5235620	Callee	free		5235129	0					
ANR	5235621	Identifier	free		5235129	0					
ANR	5235622	ArgumentList	args		5235129	1					
ANR	5235623	Argument	args		5235129	0					
ANR	5235624	Identifier	args		5235129	0					
ANR	5235625	ReturnStatement	return 0 ;	2718:4:57118:57126	5235129	24	True				
ANR	5235626	PrimaryExpression	0		5235129	0					
ANR	5235627	SwitchStatement	switch ( tmp )		5235129	4					
ANR	5235628	Condition	tmp	2720:11:57144:57146	5235129	0	True				
ANR	5235629	Identifier	tmp		5235129	0					
ANR	5235630	CompoundStatement		99:16:1805:1805	5235129	1					
ANR	5235631	Label	case 'e' :	2721:3:57154:57162	5235129	0	True				
ANR	5235632	ExpressionStatement	i += 8	2721:13:57164:57170	5235129	1	True				
ANR	5235633	AssignmentExpression	i += 8		5235129	0		+=			
ANR	5235634	Identifier	i		5235129	0					
ANR	5235635	PrimaryExpression	8		5235129	1					
ANR	5235636	BreakStatement	break ;	2721:21:57172:57177	5235129	2	True				
ANR	5235637	Label	case 'q' :	2722:3:57182:57190	5235129	3	True				
ANR	5235638	ExpressionStatement	i += 8	2722:13:57192:57198	5235129	4	True				
ANR	5235639	AssignmentExpression	i += 8		5235129	0		+=			
ANR	5235640	Identifier	i		5235129	0					
ANR	5235641	PrimaryExpression	8		5235129	1					
ANR	5235642	BreakStatement	break ;	2722:21:57200:57205	5235129	5	True				
ANR	5235643	Label	case 'b' :	2723:3:57210:57218	5235129	6	True				
ANR	5235644	ExpressionStatement	i ++	2723:13:57220:57223	5235129	7	True				
ANR	5235645	PostIncDecOperationExpression	i ++		5235129	0					
ANR	5235646	Identifier	i		5235129	0					
ANR	5235647	IncDec	++		5235129	1					
ANR	5235648	BreakStatement	break ;	2723:18:57225:57230	5235129	8	True				
ANR	5235649	Label	case 'c' :	2724:3:57235:57243	5235129	9	True				
ANR	5235650	ExpressionStatement	i ++	2724:13:57245:57248	5235129	10	True				
ANR	5235651	PostIncDecOperationExpression	i ++		5235129	0					
ANR	5235652	Identifier	i		5235129	0					
ANR	5235653	IncDec	++		5235129	1					
ANR	5235654	BreakStatement	break ;	2724:18:57250:57255	5235129	11	True				
ANR	5235655	Label	case 'B' :	2725:3:57260:57268	5235129	12	True				
ANR	5235656	ExpressionStatement	i += 4	2725:13:57270:57276	5235129	13	True				
ANR	5235657	AssignmentExpression	i += 4		5235129	0		+=			
ANR	5235658	Identifier	i		5235129	0					
ANR	5235659	PrimaryExpression	4		5235129	1					
ANR	5235660	BreakStatement	break ;	2725:21:57278:57283	5235129	14	True				
ANR	5235661	Label	case 'i' :	2726:3:57288:57296	5235129	15	True				
ANR	5235662	ExpressionStatement	i += 4	2726:13:57298:57304	5235129	16	True				
ANR	5235663	AssignmentExpression	i += 4		5235129	0		+=			
ANR	5235664	Identifier	i		5235129	0					
ANR	5235665	PrimaryExpression	4		5235129	1					
ANR	5235666	BreakStatement	break ;	2726:21:57306:57311	5235129	17	True				
ANR	5235667	Label	case 'd' :	2727:3:57316:57324	5235129	18	True				
ANR	5235668	ExpressionStatement	i += 4	2727:13:57326:57332	5235129	19	True				
ANR	5235669	AssignmentExpression	i += 4		5235129	0		+=			
ANR	5235670	Identifier	i		5235129	0					
ANR	5235671	PrimaryExpression	4		5235129	1					
ANR	5235672	BreakStatement	break ;	2727:21:57334:57339	5235129	20	True				
ANR	5235673	Label	case 'x' :	2728:3:57344:57352	5235129	21	True				
ANR	5235674	ExpressionStatement	i += 4	2728:13:57354:57360	5235129	22	True				
ANR	5235675	AssignmentExpression	i += 4		5235129	0		+=			
ANR	5235676	Identifier	i		5235129	0					
ANR	5235677	PrimaryExpression	4		5235129	1					
ANR	5235678	BreakStatement	break ;	2728:21:57362:57367	5235129	23	True				
ANR	5235679	Label	case 'w' :	2729:3:57372:57380	5235129	24	True				
ANR	5235680	Label	case '1' :	2730:3:57385:57393	5235129	25	True				
ANR	5235681	ExpressionStatement	i += 2	2730:13:57395:57401	5235129	26	True				
ANR	5235682	AssignmentExpression	i += 2		5235129	0		+=			
ANR	5235683	Identifier	i		5235129	0					
ANR	5235684	PrimaryExpression	2		5235129	1					
ANR	5235685	BreakStatement	break ;	2730:21:57403:57408	5235129	27	True				
ANR	5235686	Label	case 'z' :	2731:3:57413:57421	5235129	28	True				
ANR	5235687	Label	case 'Z' :	2732:3:57445:57453	5235129	29	True				
ANR	5235688	BreakStatement	break ;	2733:4:57490:57495	5235129	30	True				
ANR	5235689	Label	case 's' :	2734:3:57500:57508	5235129	31	True				
ANR	5235690	ExpressionStatement	i += 4	2734:13:57510:57516	5235129	32	True				
ANR	5235691	AssignmentExpression	i += 4		5235129	0		+=			
ANR	5235692	Identifier	i		5235129	0					
ANR	5235693	PrimaryExpression	4		5235129	1					
ANR	5235694	BreakStatement	break ;	2734:21:57518:57523	5235129	33	True				
ANR	5235695	Label	case 'S' :	2735:3:57540:57548	5235129	34	True				
ANR	5235696	ExpressionStatement	i += 8	2735:13:57550:57556	5235129	35	True				
ANR	5235697	AssignmentExpression	i += 8		5235129	0		+=			
ANR	5235698	Identifier	i		5235129	0					
ANR	5235699	PrimaryExpression	8		5235129	1					
ANR	5235700	BreakStatement	break ;	2735:21:57558:57563	5235129	36	True				
ANR	5235701	Label	default :	2736:3:57580:57587	5235129	37	True				
ANR	5235702	Identifier	default		5235129	0					
ANR	5235703	BreakStatement	break ;	2738:4:57624:57629	5235129	38	True				
ANR	5235704	ExpressionStatement	last = tmp	2740:3:57639:57649	5235129	5	True				
ANR	5235705	AssignmentExpression	last = tmp		5235129	0		=			
ANR	5235706	Identifier	last		5235129	0					
ANR	5235707	Identifier	tmp		5235129	1					
ANR	5235708	ExpressionStatement	arg = orig	2742:2:57657:57667	5235129	3	True				
ANR	5235709	AssignmentExpression	arg = orig		5235129	0		=			
ANR	5235710	Identifier	arg		5235129	0					
ANR	5235711	Identifier	orig		5235129	1					
ANR	5235712	IfStatement	if ( args )		5235129	18					
ANR	5235713	Condition	args	2744:5:57677:57680	5235129	0	True				
ANR	5235714	Identifier	args		5235129	0					
ANR	5235715	CompoundStatement		123:11:2339:2339	5235129	1					
ANR	5235716	ExpressionStatement	free ( args )	2745:2:57687:57698	5235129	0	True				
ANR	5235717	CallExpression	free ( args )		5235129	0					
ANR	5235718	Callee	free		5235129	0					
ANR	5235719	Identifier	free		5235129	0					
ANR	5235720	ArgumentList	args		5235129	1					
ANR	5235721	Argument	args		5235129	0					
ANR	5235722	Identifier	args		5235129	0					
ANR	5235723	ReturnStatement	return i ;	2747:1:57704:57712	5235129	19	True				
ANR	5235724	Identifier	i		5235129	0					
ANR	5235725	ReturnType	R_API int		5235129	1					
ANR	5235726	Identifier	r_print_format_length		5235129	2					
ANR	5235727	ParameterList	const char * fmt		5235129	3					
ANR	5235728	Parameter	const char * fmt	2622:32:55326:55340	5235129	0	True				
ANR	5235729	ParameterType	const char *		5235129	0					
ANR	5235730	Identifier	fmt		5235129	1					
ANR	5235731	CFGEntryNode	ENTRY		5235129		True				
ANR	5235732	CFGExitNode	EXIT		5235129		True				
ANR	5235733	Symbol	namefmt		5235129						
ANR	5235734	Symbol	IS_WHITECHAR		5235129						
ANR	5235735	Symbol	strchr		5235129						
ANR	5235736	Symbol	fmt		5235129						
ANR	5235737	Symbol	r_str_word_set0		5235129						
ANR	5235738	Symbol	endian		5235129						
ANR	5235739	Symbol	r_num_math		5235129						
ANR	5235740	Symbol	strlen		5235129						
ANR	5235741	Symbol	times		5235129						
ANR	5235742	Symbol	len		5235129						
ANR	5235743	Symbol	tmp		5235129						
ANR	5235744	Symbol	arg		5235129						
ANR	5235745	Symbol	bracket		5235129						
ANR	5235746	Symbol	end		5235129						
ANR	5235747	Symbol	viewflags		5235129						
ANR	5235748	Symbol	atoi		5235129						
ANR	5235749	Symbol	NULL		5235129						
ANR	5235750	Symbol	last		5235129						
ANR	5235751	Symbol	i		5235129						
ANR	5235752	Symbol	j		5235129						
ANR	5235753	Symbol	r_str_word_get0		5235129						
ANR	5235754	Symbol	l		5235129						
ANR	5235755	Symbol	nargs		5235129						
ANR	5235756	Symbol	args		5235129						
ANR	5235757	Symbol	orig		5235129						
ANR	5235758	Symbol	argend		5235129						
ANR	5235759	Symbol	* end		5235129						
ANR	5235760	Symbol	maxl		5235129						
ANR	5235761	Symbol	strdup		5235129						
ANR	5235762	Symbol	idx		5235129						
ANR	5235763	Symbol	* arg		5235129						
ANR	5235764	Function	r_str_prefix_all	2750:0:57717:58308							
ANR	5235765	FunctionDef	"r_str_prefix_all (const char * s , const char * pfx)"		5235764	0					
ANR	5235766	CompoundStatement		2750:61:57778:58308	5235764	0					
ANR	5235767	IdentifierDeclStatement	const char * os = s ;	2751:1:57781:57799	5235764	0	True				
ANR	5235768	IdentifierDecl	* os = s		5235764	0					
ANR	5235769	IdentifierDeclType	const char *		5235764	0					
ANR	5235770	Identifier	os		5235764	1					
ANR	5235771	AssignmentExpression	* os = s		5235764	2		=			
ANR	5235772	Identifier	s		5235764	0					
ANR	5235773	Identifier	s		5235764	1					
ANR	5235774	IdentifierDeclStatement	char * p ;	2752:1:57802:57809	5235764	1	True				
ANR	5235775	IdentifierDecl	* p		5235764	0					
ANR	5235776	IdentifierDeclType	char *		5235764	0					
ANR	5235777	Identifier	p		5235764	1					
ANR	5235778	IdentifierDeclStatement	int newlines = 1 ;	2753:1:57812:57828	5235764	2	True				
ANR	5235779	IdentifierDecl	newlines = 1		5235764	0					
ANR	5235780	IdentifierDeclType	int		5235764	0					
ANR	5235781	Identifier	newlines		5235764	1					
ANR	5235782	AssignmentExpression	newlines = 1		5235764	2		=			
ANR	5235783	Identifier	newlines		5235764	0					
ANR	5235784	PrimaryExpression	1		5235764	1					
ANR	5235785	IdentifierDeclStatement	int len = 0 ;	2754:1:57831:57842	5235764	3	True				
ANR	5235786	IdentifierDecl	len = 0		5235764	0					
ANR	5235787	IdentifierDeclType	int		5235764	0					
ANR	5235788	Identifier	len		5235764	1					
ANR	5235789	AssignmentExpression	len = 0		5235764	2		=			
ANR	5235790	Identifier	len		5235764	0					
ANR	5235791	PrimaryExpression	0		5235764	1					
ANR	5235792	IdentifierDeclStatement	int pfx_len = 0 ;	2755:1:57845:57860	5235764	4	True				
ANR	5235793	IdentifierDecl	pfx_len = 0		5235764	0					
ANR	5235794	IdentifierDeclType	int		5235764	0					
ANR	5235795	Identifier	pfx_len		5235764	1					
ANR	5235796	AssignmentExpression	pfx_len = 0		5235764	2		=			
ANR	5235797	Identifier	pfx_len		5235764	0					
ANR	5235798	PrimaryExpression	0		5235764	1					
ANR	5235799	IfStatement	if ( ! s )		5235764	5					
ANR	5235800	Condition	! s	2757:5:57868:57869	5235764	0	True				
ANR	5235801	UnaryOperationExpression	! s		5235764	0					
ANR	5235802	UnaryOperator	!		5235764	0					
ANR	5235803	Identifier	s		5235764	1					
ANR	5235804	CompoundStatement		8:9:93:93	5235764	1					
ANR	5235805	ReturnStatement	return strdup ( pfx ) ;	2758:2:57876:57895	5235764	0	True				
ANR	5235806	CallExpression	strdup ( pfx )		5235764	0					
ANR	5235807	Callee	strdup		5235764	0					
ANR	5235808	Identifier	strdup		5235764	0					
ANR	5235809	ArgumentList	pfx		5235764	1					
ANR	5235810	Argument	pfx		5235764	0					
ANR	5235811	Identifier	pfx		5235764	0					
ANR	5235812	IfStatement	if ( ! pfx )		5235764	6					
ANR	5235813	Condition	! pfx	2760:5:57905:57908	5235764	0	True				
ANR	5235814	UnaryOperationExpression	! pfx		5235764	0					
ANR	5235815	UnaryOperator	!		5235764	0					
ANR	5235816	Identifier	pfx		5235764	1					
ANR	5235817	CompoundStatement		11:11:132:132	5235764	1					
ANR	5235818	ReturnStatement	return strdup ( s ) ;	2761:2:57915:57932	5235764	0	True				
ANR	5235819	CallExpression	strdup ( s )		5235764	0					
ANR	5235820	Callee	strdup		5235764	0					
ANR	5235821	Identifier	strdup		5235764	0					
ANR	5235822	ArgumentList	s		5235764	1					
ANR	5235823	Argument	s		5235764	0					
ANR	5235824	Identifier	s		5235764	0					
ANR	5235825	ExpressionStatement	len = strlen ( s )	2763:1:57938:57954	5235764	7	True				
ANR	5235826	AssignmentExpression	len = strlen ( s )		5235764	0		=			
ANR	5235827	Identifier	len		5235764	0					
ANR	5235828	CallExpression	strlen ( s )		5235764	1					
ANR	5235829	Callee	strlen		5235764	0					
ANR	5235830	Identifier	strlen		5235764	0					
ANR	5235831	ArgumentList	s		5235764	1					
ANR	5235832	Argument	s		5235764	0					
ANR	5235833	Identifier	s		5235764	0					
ANR	5235834	ExpressionStatement	pfx_len = strlen ( pfx )	2764:1:57957:57979	5235764	8	True				
ANR	5235835	AssignmentExpression	pfx_len = strlen ( pfx )		5235764	0		=			
ANR	5235836	Identifier	pfx_len		5235764	0					
ANR	5235837	CallExpression	strlen ( pfx )		5235764	1					
ANR	5235838	Callee	strlen		5235764	0					
ANR	5235839	Identifier	strlen		5235764	0					
ANR	5235840	ArgumentList	pfx		5235764	1					
ANR	5235841	Argument	pfx		5235764	0					
ANR	5235842	Identifier	pfx		5235764	0					
ANR	5235843	ForStatement	for ( os = s ; * os ; os ++ )		5235764	9					
ANR	5235844	ForInit	os = s ;	2765:6:57987:57993	5235764	0	True				
ANR	5235845	AssignmentExpression	os = s		5235764	0		=			
ANR	5235846	Identifier	os		5235764	0					
ANR	5235847	Identifier	s		5235764	1					
ANR	5235848	Condition	* os	2765:14:57995:57997	5235764	1	True				
ANR	5235849	UnaryOperationExpression	* os		5235764	0					
ANR	5235850	UnaryOperator	*		5235764	0					
ANR	5235851	Identifier	os		5235764	1					
ANR	5235852	PostIncDecOperationExpression	os ++	2765:19:58000:58003	5235764	2	True				
ANR	5235853	Identifier	os		5235764	0					
ANR	5235854	IncDec	++		5235764	1					
ANR	5235855	CompoundStatement		16:26:228:228	5235764	3					
ANR	5235856	IfStatement	if ( * os == '\\n' )		5235764	0					
ANR	5235857	Condition	* os == '\\n'	2766:6:58015:58025	5235764	0	True				
ANR	5235858	EqualityExpression	* os == '\\n'		5235764	0		==			
ANR	5235859	UnaryOperationExpression	* os		5235764	0					
ANR	5235860	UnaryOperator	*		5235764	0					
ANR	5235861	Identifier	os		5235764	1					
ANR	5235862	PrimaryExpression	'\\n'		5235764	1					
ANR	5235863	CompoundStatement		17:19:249:249	5235764	1					
ANR	5235864	ExpressionStatement	newlines ++	2767:3:58033:58043	5235764	0	True				
ANR	5235865	PostIncDecOperationExpression	newlines ++		5235764	0					
ANR	5235866	Identifier	newlines		5235764	0					
ANR	5235867	IncDec	++		5235764	1					
ANR	5235868	IdentifierDeclStatement	char * o = malloc ( len + ( pfx_len * newlines ) + 1 ) ;	2770:1:58053:58102	5235764	10	True				
ANR	5235869	IdentifierDecl	* o = malloc ( len + ( pfx_len * newlines ) + 1 )		5235764	0					
ANR	5235870	IdentifierDeclType	char *		5235764	0					
ANR	5235871	Identifier	o		5235764	1					
ANR	5235872	AssignmentExpression	* o = malloc ( len + ( pfx_len * newlines ) + 1 )		5235764	2		=			
ANR	5235873	Identifier	o		5235764	0					
ANR	5235874	CallExpression	malloc ( len + ( pfx_len * newlines ) + 1 )		5235764	1					
ANR	5235875	Callee	malloc		5235764	0					
ANR	5235876	Identifier	malloc		5235764	0					
ANR	5235877	ArgumentList	len + ( pfx_len * newlines ) + 1		5235764	1					
ANR	5235878	Argument	len + ( pfx_len * newlines ) + 1		5235764	0					
ANR	5235879	AdditiveExpression	len + ( pfx_len * newlines ) + 1		5235764	0		+			
ANR	5235880	Identifier	len		5235764	0					
ANR	5235881	AdditiveExpression	( pfx_len * newlines ) + 1		5235764	1		+			
ANR	5235882	MultiplicativeExpression	pfx_len * newlines		5235764	0		*			
ANR	5235883	Identifier	pfx_len		5235764	0					
ANR	5235884	Identifier	newlines		5235764	1					
ANR	5235885	PrimaryExpression	1		5235764	1					
ANR	5235886	IfStatement	if ( ! o )		5235764	11					
ANR	5235887	Condition	! o	2771:5:58109:58110	5235764	0	True				
ANR	5235888	UnaryOperationExpression	! o		5235764	0					
ANR	5235889	UnaryOperator	!		5235764	0					
ANR	5235890	Identifier	o		5235764	1					
ANR	5235891	CompoundStatement		22:9:334:334	5235764	1					
ANR	5235892	ReturnStatement	return NULL ;	2772:2:58117:58128	5235764	0	True				
ANR	5235893	Identifier	NULL		5235764	0					
ANR	5235894	ExpressionStatement	"memcpy ( o , pfx , pfx_len )"	2774:1:58134:58158	5235764	12	True				
ANR	5235895	CallExpression	"memcpy ( o , pfx , pfx_len )"		5235764	0					
ANR	5235896	Callee	memcpy		5235764	0					
ANR	5235897	Identifier	memcpy		5235764	0					
ANR	5235898	ArgumentList	o		5235764	1					
ANR	5235899	Argument	o		5235764	0					
ANR	5235900	Identifier	o		5235764	0					
ANR	5235901	Argument	pfx		5235764	1					
ANR	5235902	Identifier	pfx		5235764	0					
ANR	5235903	Argument	pfx_len		5235764	2					
ANR	5235904	Identifier	pfx_len		5235764	0					
ANR	5235905	ForStatement	for ( p = o + pfx_len ; * s ; s ++ )		5235764	13					
ANR	5235906	ForInit	p = o + pfx_len ;	2775:6:58166:58181	5235764	0	True				
ANR	5235907	AssignmentExpression	p = o + pfx_len		5235764	0		=			
ANR	5235908	Identifier	p		5235764	0					
ANR	5235909	AdditiveExpression	o + pfx_len		5235764	1		+			
ANR	5235910	Identifier	o		5235764	0					
ANR	5235911	Identifier	pfx_len		5235764	1					
ANR	5235912	Condition	* s	2775:23:58183:58184	5235764	1	True				
ANR	5235913	UnaryOperationExpression	* s		5235764	0					
ANR	5235914	UnaryOperator	*		5235764	0					
ANR	5235915	Identifier	s		5235764	1					
ANR	5235916	PostIncDecOperationExpression	s ++	2775:27:58187:58189	5235764	2	True				
ANR	5235917	Identifier	s		5235764	0					
ANR	5235918	IncDec	++		5235764	1					
ANR	5235919	CompoundStatement		26:32:413:413	5235764	3					
ANR	5235920	ExpressionStatement	* p ++ = * s	2776:2:58196:58205	5235764	0	True				
ANR	5235921	AssignmentExpression	* p ++ = * s		5235764	0		=			
ANR	5235922	UnaryOperationExpression	* p ++		5235764	0					
ANR	5235923	UnaryOperator	*		5235764	0					
ANR	5235924	PostIncDecOperationExpression	p ++		5235764	1					
ANR	5235925	Identifier	p		5235764	0					
ANR	5235926	IncDec	++		5235764	1					
ANR	5235927	UnaryOperationExpression	* s		5235764	1					
ANR	5235928	UnaryOperator	*		5235764	0					
ANR	5235929	Identifier	s		5235764	1					
ANR	5235930	IfStatement	if ( * s == '\\n' && s [ 1 ] )		5235764	1					
ANR	5235931	Condition	* s == '\\n' && s [ 1 ]	2777:6:58213:58230	5235764	0	True				
ANR	5235932	AndExpression	* s == '\\n' && s [ 1 ]		5235764	0		&&			
ANR	5235933	EqualityExpression	* s == '\\n'		5235764	0		==			
ANR	5235934	UnaryOperationExpression	* s		5235764	0					
ANR	5235935	UnaryOperator	*		5235764	0					
ANR	5235936	Identifier	s		5235764	1					
ANR	5235937	PrimaryExpression	'\\n'		5235764	1					
ANR	5235938	ArrayIndexing	s [ 1 ]		5235764	1					
ANR	5235939	Identifier	s		5235764	0					
ANR	5235940	PrimaryExpression	1		5235764	1					
ANR	5235941	CompoundStatement		28:26:454:454	5235764	1					
ANR	5235942	ExpressionStatement	"memcpy ( p , pfx , pfx_len )"	2778:3:58238:58262	5235764	0	True				
ANR	5235943	CallExpression	"memcpy ( p , pfx , pfx_len )"		5235764	0					
ANR	5235944	Callee	memcpy		5235764	0					
ANR	5235945	Identifier	memcpy		5235764	0					
ANR	5235946	ArgumentList	p		5235764	1					
ANR	5235947	Argument	p		5235764	0					
ANR	5235948	Identifier	p		5235764	0					
ANR	5235949	Argument	pfx		5235764	1					
ANR	5235950	Identifier	pfx		5235764	0					
ANR	5235951	Argument	pfx_len		5235764	2					
ANR	5235952	Identifier	pfx_len		5235764	0					
ANR	5235953	ExpressionStatement	p += pfx_len	2779:3:58267:58279	5235764	1	True				
ANR	5235954	AssignmentExpression	p += pfx_len		5235764	0		+=			
ANR	5235955	Identifier	p		5235764	0					
ANR	5235956	Identifier	pfx_len		5235764	1					
ANR	5235957	ExpressionStatement	* p = 0	2782:1:58289:58295	5235764	14	True				
ANR	5235958	AssignmentExpression	* p = 0		5235764	0		=			
ANR	5235959	UnaryOperationExpression	* p		5235764	0					
ANR	5235960	UnaryOperator	*		5235764	0					
ANR	5235961	Identifier	p		5235764	1					
ANR	5235962	PrimaryExpression	0		5235764	1					
ANR	5235963	ReturnStatement	return o ;	2783:1:58298:58306	5235764	15	True				
ANR	5235964	Identifier	o		5235764	0					
ANR	5235965	ReturnType	R_API char *		5235764	1					
ANR	5235966	Identifier	r_str_prefix_all		5235764	2					
ANR	5235967	ParameterList	"const char * s , const char * pfx"		5235764	3					
ANR	5235968	Parameter	const char * s	2750:29:57746:57758	5235764	0	True				
ANR	5235969	ParameterType	const char *		5235764	0					
ANR	5235970	Identifier	s		5235764	1					
ANR	5235971	Parameter	const char * pfx	2750:44:57761:57775	5235764	1	True				
ANR	5235972	ParameterType	const char *		5235764	0					
ANR	5235973	Identifier	pfx		5235764	1					
ANR	5235974	CFGEntryNode	ENTRY		5235764		True				
ANR	5235975	CFGExitNode	EXIT		5235764		True				
ANR	5235976	Symbol	malloc		5235764						
ANR	5235977	Symbol	pfx		5235764						
ANR	5235978	Symbol	NULL		5235764						
ANR	5235979	Symbol	os		5235764						
ANR	5235980	Symbol	* p ++		5235764						
ANR	5235981	Symbol	pfx_len		5235764						
ANR	5235982	Symbol	* os		5235764						
ANR	5235983	Symbol	o		5235764						
ANR	5235984	Symbol	p		5235764						
ANR	5235985	Symbol	strlen		5235764						
ANR	5235986	Symbol	s		5235764						
ANR	5235987	Symbol	len		5235764						
ANR	5235988	Symbol	newlines		5235764						
ANR	5235989	Symbol	* p		5235764						
ANR	5235990	Symbol	strdup		5235764						
ANR	5235991	Symbol	* s		5235764						
ANR	5235992	Function	r_str_contains_macro	2788:0:58380:59017							
ANR	5235993	FunctionDef	r_str_contains_macro (const char * input_value)		5235992	0					
ANR	5235994	CompoundStatement		2788:56:58436:59017	5235992	0					
ANR	5235995	IdentifierDeclStatement	"char * has_tilde = input_value ? HASCH ( '~' ) : NULL , * has_bang = input_value ? HASCH ( '!' ) : NULL , * has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL , * has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL , * has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL , * has_qmark = input_value ? HASCH ( '?' ) : NULL , * has_colon = input_value ? HASCH ( ':' ) : NULL , * has_at = input_value ? strchr ( input_value , '@' ) : NULL ;"	2789:1:58439:58903	5235992	0	True				
ANR	5235996	IdentifierDecl	* has_tilde = input_value ? HASCH ( '~' ) : NULL		5235992	0					
ANR	5235997	IdentifierDeclType	char *		5235992	0					
ANR	5235998	Identifier	has_tilde		5235992	1					
ANR	5235999	AssignmentExpression	* has_tilde = input_value ? HASCH ( '~' ) : NULL		5235992	2		=			
ANR	5236000	Identifier	has_tilde		5235992	0					
ANR	5236001	ConditionalExpression	input_value ? HASCH ( '~' ) : NULL		5235992	1					
ANR	5236002	Condition	input_value		5235992	0					
ANR	5236003	Identifier	input_value		5235992	0					
ANR	5236004	CallExpression	HASCH ( '~' )		5235992	1					
ANR	5236005	Callee	HASCH		5235992	0					
ANR	5236006	Identifier	HASCH		5235992	0					
ANR	5236007	ArgumentList	'~'		5235992	1					
ANR	5236008	Argument	'~'		5235992	0					
ANR	5236009	PrimaryExpression	'~'		5235992	0					
ANR	5236010	Identifier	NULL		5235992	2					
ANR	5236011	IdentifierDecl	* has_bang = input_value ? HASCH ( '!' ) : NULL		5235992	1					
ANR	5236012	IdentifierDeclType	char *		5235992	0					
ANR	5236013	Identifier	has_bang		5235992	1					
ANR	5236014	AssignmentExpression	* has_bang = input_value ? HASCH ( '!' ) : NULL		5235992	2		=			
ANR	5236015	Identifier	has_bang		5235992	0					
ANR	5236016	ConditionalExpression	input_value ? HASCH ( '!' ) : NULL		5235992	1					
ANR	5236017	Condition	input_value		5235992	0					
ANR	5236018	Identifier	input_value		5235992	0					
ANR	5236019	CallExpression	HASCH ( '!' )		5235992	1					
ANR	5236020	Callee	HASCH		5235992	0					
ANR	5236021	Identifier	HASCH		5235992	0					
ANR	5236022	ArgumentList	'!'		5235992	1					
ANR	5236023	Argument	'!'		5235992	0					
ANR	5236024	PrimaryExpression	'!'		5235992	0					
ANR	5236025	Identifier	NULL		5235992	2					
ANR	5236026	IdentifierDecl	* has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		5235992	2					
ANR	5236027	IdentifierDeclType	char *		5235992	0					
ANR	5236028	Identifier	has_brace		5235992	1					
ANR	5236029	AssignmentExpression	* has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		5235992	2		=			
ANR	5236030	Identifier	has_brace		5235992	0					
ANR	5236031	ConditionalExpression	input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		5235992	1					
ANR	5236032	Condition	input_value		5235992	0					
ANR	5236033	Identifier	input_value		5235992	0					
ANR	5236034	CallExpression	CAST ( HASCH ( '[' ) || HASCH ( ']' ) )		5235992	1					
ANR	5236035	Callee	CAST		5235992	0					
ANR	5236036	Identifier	CAST		5235992	0					
ANR	5236037	ArgumentList	HASCH ( '[' ) || HASCH ( ']' )		5235992	1					
ANR	5236038	Argument	HASCH ( '[' ) || HASCH ( ']' )		5235992	0					
ANR	5236039	OrExpression	HASCH ( '[' ) || HASCH ( ']' )		5235992	0		||			
ANR	5236040	CallExpression	HASCH ( '[' )		5235992	0					
ANR	5236041	Callee	HASCH		5235992	0					
ANR	5236042	Identifier	HASCH		5235992	0					
ANR	5236043	ArgumentList	'['		5235992	1					
ANR	5236044	Argument	'['		5235992	0					
ANR	5236045	PrimaryExpression	'['		5235992	0					
ANR	5236046	CallExpression	HASCH ( ']' )		5235992	1					
ANR	5236047	Callee	HASCH		5235992	0					
ANR	5236048	Identifier	HASCH		5235992	0					
ANR	5236049	ArgumentList	']'		5235992	1					
ANR	5236050	Argument	']'		5235992	0					
ANR	5236051	PrimaryExpression	']'		5235992	0					
ANR	5236052	Identifier	NULL		5235992	2					
ANR	5236053	IdentifierDecl	* has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		5235992	3					
ANR	5236054	IdentifierDeclType	char *		5235992	0					
ANR	5236055	Identifier	has_paren		5235992	1					
ANR	5236056	AssignmentExpression	* has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		5235992	2		=			
ANR	5236057	Identifier	has_paren		5235992	0					
ANR	5236058	ConditionalExpression	input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		5235992	1					
ANR	5236059	Condition	input_value		5235992	0					
ANR	5236060	Identifier	input_value		5235992	0					
ANR	5236061	CallExpression	CAST ( HASCH ( '(' ) || HASCH ( ')' ) )		5235992	1					
ANR	5236062	Callee	CAST		5235992	0					
ANR	5236063	Identifier	CAST		5235992	0					
ANR	5236064	ArgumentList	HASCH ( '(' ) || HASCH ( ')' )		5235992	1					
ANR	5236065	Argument	HASCH ( '(' ) || HASCH ( ')' )		5235992	0					
ANR	5236066	OrExpression	HASCH ( '(' ) || HASCH ( ')' )		5235992	0		||			
ANR	5236067	CallExpression	HASCH ( '(' )		5235992	0					
ANR	5236068	Callee	HASCH		5235992	0					
ANR	5236069	Identifier	HASCH		5235992	0					
ANR	5236070	ArgumentList	'('		5235992	1					
ANR	5236071	Argument	'('		5235992	0					
ANR	5236072	PrimaryExpression	'('		5235992	0					
ANR	5236073	CallExpression	HASCH ( ')' )		5235992	1					
ANR	5236074	Callee	HASCH		5235992	0					
ANR	5236075	Identifier	HASCH		5235992	0					
ANR	5236076	ArgumentList	')'		5235992	1					
ANR	5236077	Argument	')'		5235992	0					
ANR	5236078	PrimaryExpression	')'		5235992	0					
ANR	5236079	Identifier	NULL		5235992	2					
ANR	5236080	IdentifierDecl	* has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		5235992	4					
ANR	5236081	IdentifierDeclType	char *		5235992	0					
ANR	5236082	Identifier	has_cbrace		5235992	1					
ANR	5236083	AssignmentExpression	* has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		5235992	2		=			
ANR	5236084	Identifier	has_cbrace		5235992	0					
ANR	5236085	ConditionalExpression	input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		5235992	1					
ANR	5236086	Condition	input_value		5235992	0					
ANR	5236087	Identifier	input_value		5235992	0					
ANR	5236088	CallExpression	CAST ( HASCH ( '{' ) || HASCH ( '}' ) )		5235992	1					
ANR	5236089	Callee	CAST		5235992	0					
ANR	5236090	Identifier	CAST		5235992	0					
ANR	5236091	ArgumentList	HASCH ( '{' ) || HASCH ( '}' )		5235992	1					
ANR	5236092	Argument	HASCH ( '{' ) || HASCH ( '}' )		5235992	0					
ANR	5236093	OrExpression	HASCH ( '{' ) || HASCH ( '}' )		5235992	0		||			
ANR	5236094	CallExpression	HASCH ( '{' )		5235992	0					
ANR	5236095	Callee	HASCH		5235992	0					
ANR	5236096	Identifier	HASCH		5235992	0					
ANR	5236097	ArgumentList	'{'		5235992	1					
ANR	5236098	Argument	'{'		5235992	0					
ANR	5236099	PrimaryExpression	'{'		5235992	0					
ANR	5236100	CallExpression	HASCH ( '}' )		5235992	1					
ANR	5236101	Callee	HASCH		5235992	0					
ANR	5236102	Identifier	HASCH		5235992	0					
ANR	5236103	ArgumentList	'}'		5235992	1					
ANR	5236104	Argument	'}'		5235992	0					
ANR	5236105	PrimaryExpression	'}'		5235992	0					
ANR	5236106	Identifier	NULL		5235992	2					
ANR	5236107	IdentifierDecl	* has_qmark = input_value ? HASCH ( '?' ) : NULL		5235992	5					
ANR	5236108	IdentifierDeclType	char *		5235992	0					
ANR	5236109	Identifier	has_qmark		5235992	1					
ANR	5236110	AssignmentExpression	* has_qmark = input_value ? HASCH ( '?' ) : NULL		5235992	2		=			
ANR	5236111	Identifier	has_qmark		5235992	0					
ANR	5236112	ConditionalExpression	input_value ? HASCH ( '?' ) : NULL		5235992	1					
ANR	5236113	Condition	input_value		5235992	0					
ANR	5236114	Identifier	input_value		5235992	0					
ANR	5236115	CallExpression	HASCH ( '?' )		5235992	1					
ANR	5236116	Callee	HASCH		5235992	0					
ANR	5236117	Identifier	HASCH		5235992	0					
ANR	5236118	ArgumentList	'?'		5235992	1					
ANR	5236119	Argument	'?'		5235992	0					
ANR	5236120	PrimaryExpression	'?'		5235992	0					
ANR	5236121	Identifier	NULL		5235992	2					
ANR	5236122	IdentifierDecl	* has_colon = input_value ? HASCH ( ':' ) : NULL		5235992	6					
ANR	5236123	IdentifierDeclType	char *		5235992	0					
ANR	5236124	Identifier	has_colon		5235992	1					
ANR	5236125	AssignmentExpression	* has_colon = input_value ? HASCH ( ':' ) : NULL		5235992	2		=			
ANR	5236126	Identifier	has_colon		5235992	0					
ANR	5236127	ConditionalExpression	input_value ? HASCH ( ':' ) : NULL		5235992	1					
ANR	5236128	Condition	input_value		5235992	0					
ANR	5236129	Identifier	input_value		5235992	0					
ANR	5236130	CallExpression	HASCH ( ':' )		5235992	1					
ANR	5236131	Callee	HASCH		5235992	0					
ANR	5236132	Identifier	HASCH		5235992	0					
ANR	5236133	ArgumentList	':'		5235992	1					
ANR	5236134	Argument	':'		5235992	0					
ANR	5236135	PrimaryExpression	':'		5235992	0					
ANR	5236136	Identifier	NULL		5235992	2					
ANR	5236137	IdentifierDecl	"* has_at = input_value ? strchr ( input_value , '@' ) : NULL"		5235992	7					
ANR	5236138	IdentifierDeclType	char *		5235992	0					
ANR	5236139	Identifier	has_at		5235992	1					
ANR	5236140	AssignmentExpression	"* has_at = input_value ? strchr ( input_value , '@' ) : NULL"		5235992	2		=			
ANR	5236141	Identifier	has_at		5235992	0					
ANR	5236142	ConditionalExpression	"input_value ? strchr ( input_value , '@' ) : NULL"		5235992	1					
ANR	5236143	Condition	input_value		5235992	0					
ANR	5236144	Identifier	input_value		5235992	0					
ANR	5236145	CallExpression	"strchr ( input_value , '@' )"		5235992	1					
ANR	5236146	Callee	strchr		5235992	0					
ANR	5236147	Identifier	strchr		5235992	0					
ANR	5236148	ArgumentList	input_value		5235992	1					
ANR	5236149	Argument	input_value		5235992	0					
ANR	5236150	Identifier	input_value		5235992	0					
ANR	5236151	Argument	'@'		5235992	1					
ANR	5236152	PrimaryExpression	'@'		5235992	0					
ANR	5236153	Identifier	NULL		5235992	2					
ANR	5236154	ReturnStatement	return has_tilde || has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at ;	2798:1:58907:59015	5235992	1	True				
ANR	5236155	OrExpression	has_tilde || has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		5235992	0		||			
ANR	5236156	Identifier	has_tilde		5235992	0					
ANR	5236157	OrExpression	has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		5235992	1		||			
ANR	5236158	Identifier	has_bang		5235992	0					
ANR	5236159	OrExpression	has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		5235992	1		||			
ANR	5236160	Identifier	has_brace		5235992	0					
ANR	5236161	OrExpression	has_cbrace || has_qmark || has_paren || has_colon || has_at		5235992	1		||			
ANR	5236162	Identifier	has_cbrace		5235992	0					
ANR	5236163	OrExpression	has_qmark || has_paren || has_colon || has_at		5235992	1		||			
ANR	5236164	Identifier	has_qmark		5235992	0					
ANR	5236165	OrExpression	has_paren || has_colon || has_at		5235992	1		||			
ANR	5236166	Identifier	has_paren		5235992	0					
ANR	5236167	OrExpression	has_colon || has_at		5235992	1		||			
ANR	5236168	Identifier	has_colon		5235992	0					
ANR	5236169	Identifier	has_at		5235992	1					
ANR	5236170	ReturnType	R_API ut8		5235992	1					
ANR	5236171	Identifier	r_str_contains_macro		5235992	2					
ANR	5236172	ParameterList	const char * input_value		5235992	3					
ANR	5236173	Parameter	const char * input_value	2788:31:58411:58433	5235992	0	True				
ANR	5236174	ParameterType	const char *		5235992	0					
ANR	5236175	Identifier	input_value		5235992	1					
ANR	5236176	CFGEntryNode	ENTRY		5235992		True				
ANR	5236177	CFGExitNode	EXIT		5235992		True				
ANR	5236178	Symbol	CAST		5235992						
ANR	5236179	Symbol	has_bang		5235992						
ANR	5236180	Symbol	NULL		5235992						
ANR	5236181	Symbol	has_paren		5235992						
ANR	5236182	Symbol	strchr		5235992						
ANR	5236183	Symbol	has_qmark		5235992						
ANR	5236184	Symbol	HASCH		5235992						
ANR	5236185	Symbol	has_brace		5235992						
ANR	5236186	Symbol	input_value		5235992						
ANR	5236187	Symbol	has_tilde		5235992						
ANR	5236188	Symbol	has_cbrace		5235992						
ANR	5236189	Symbol	has_colon		5235992						
ANR	5236190	Symbol	has_at		5235992						
ANR	5236191	Function	r_str_truncate_cmd	2802:0:59020:59362							
ANR	5236192	FunctionDef	r_str_truncate_cmd (char * string)		5236191	0					
ANR	5236193	CompoundStatement		2802:44:59064:59362	5236191	0					
ANR	5236194	IdentifierDeclStatement	ut32 pos = 0 ;	2803:1:59067:59079	5236191	0	True				
ANR	5236195	IdentifierDecl	pos = 0		5236191	0					
ANR	5236196	IdentifierDeclType	ut32		5236191	0					
ANR	5236197	Identifier	pos		5236191	1					
ANR	5236198	AssignmentExpression	pos = 0		5236191	2		=			
ANR	5236199	Identifier	pos		5236191	0					
ANR	5236200	PrimaryExpression	0		5236191	1					
ANR	5236201	IfStatement	if ( string && * string )		5236191	1					
ANR	5236202	Condition	string && * string	2804:5:59086:59102	5236191	0	True				
ANR	5236203	AndExpression	string && * string		5236191	0		&&			
ANR	5236204	Identifier	string		5236191	0					
ANR	5236205	UnaryOperationExpression	* string		5236191	1					
ANR	5236206	UnaryOperator	*		5236191	0					
ANR	5236207	Identifier	string		5236191	1					
ANR	5236208	CompoundStatement		4:2:44:69	5236191	1					
ANR	5236209	IdentifierDeclStatement	ut32 sz = strlen ( string ) ;	2805:2:59109:59134	5236191	0	True				
ANR	5236210	IdentifierDecl	sz = strlen ( string )		5236191	0					
ANR	5236211	IdentifierDeclType	ut32		5236191	0					
ANR	5236212	Identifier	sz		5236191	1					
ANR	5236213	AssignmentExpression	sz = strlen ( string )		5236191	2		=			
ANR	5236214	Identifier	sz		5236191	0					
ANR	5236215	CallExpression	strlen ( string )		5236191	1					
ANR	5236216	Callee	strlen		5236191	0					
ANR	5236217	Identifier	strlen		5236191	0					
ANR	5236218	ArgumentList	string		5236191	1					
ANR	5236219	Argument	string		5236191	0					
ANR	5236220	Identifier	string		5236191	0					
ANR	5236221	ForStatement	for ( pos = 0 ; pos < sz ; pos ++ )		5236191	1					
ANR	5236222	ForInit	pos = 0 ;	2806:7:59143:59150	5236191	0	True				
ANR	5236223	AssignmentExpression	pos = 0		5236191	0		=			
ANR	5236224	Identifier	pos		5236191	0					
ANR	5236225	PrimaryExpression	0		5236191	1					
ANR	5236226	Condition	pos < sz	2806:16:59152:59159	5236191	1	True				
ANR	5236227	RelationalExpression	pos < sz		5236191	0		<			
ANR	5236228	Identifier	pos		5236191	0					
ANR	5236229	Identifier	sz		5236191	1					
ANR	5236230	PostIncDecOperationExpression	pos ++	2806:26:59162:59166	5236191	2	True				
ANR	5236231	Identifier	pos		5236191	0					
ANR	5236232	IncDec	++		5236191	1					
ANR	5236233	CompoundStatement		5:33:104:104	5236191	3					
ANR	5236234	SwitchStatement	switch ( string [ pos ] )		5236191	0					
ANR	5236235	Condition	string [ pos ]	2807:11:59182:59192	5236191	0	True				
ANR	5236236	ArrayIndexing	string [ pos ]		5236191	0					
ANR	5236237	Identifier	string		5236191	0					
ANR	5236238	Identifier	pos		5236191	1					
ANR	5236239	CompoundStatement		6:24:130:130	5236191	1					
ANR	5236240	Label	case '!' :	2808:3:59200:59208	5236191	0	True				
ANR	5236241	Label	case ':' :	2809:3:59213:59221	5236191	1	True				
ANR	5236242	Label	case ';' :	2810:3:59226:59234	5236191	2	True				
ANR	5236243	Label	case '@' :	2811:3:59239:59247	5236191	3	True				
ANR	5236244	Label	case '~' :	2812:3:59252:59260	5236191	4	True				
ANR	5236245	Label	case '(' :	2813:3:59265:59273	5236191	5	True				
ANR	5236246	Label	case '[' :	2814:3:59278:59286	5236191	6	True				
ANR	5236247	Label	case '{' :	2815:3:59291:59299	5236191	7	True				
ANR	5236248	Label	case '?' :	2816:3:59304:59312	5236191	8	True				
ANR	5236249	ExpressionStatement	string [ pos ] = '\\0'	2817:4:59318:59336	5236191	9	True				
ANR	5236250	AssignmentExpression	string [ pos ] = '\\0'		5236191	0		=			
ANR	5236251	ArrayIndexing	string [ pos ]		5236191	0					
ANR	5236252	Identifier	string		5236191	0					
ANR	5236253	Identifier	pos		5236191	1					
ANR	5236254	PrimaryExpression	'\\0'		5236191	1					
ANR	5236255	ReturnStatement	return ;	2818:4:59342:59348	5236191	10	True				
ANR	5236256	ReturnType	R_API void		5236191	1					
ANR	5236257	Identifier	r_str_truncate_cmd		5236191	2					
ANR	5236258	ParameterList	char * string		5236191	3					
ANR	5236259	Parameter	char * string	2802:30:59050:59061	5236191	0	True				
ANR	5236260	ParameterType	char *		5236191	0					
ANR	5236261	Identifier	string		5236191	1					
ANR	5236262	CFGEntryNode	ENTRY		5236191		True				
ANR	5236263	CFGExitNode	EXIT		5236191		True				
ANR	5236264	Symbol	strlen		5236191						
ANR	5236265	Symbol	string		5236191						
ANR	5236266	Symbol	pos		5236191						
ANR	5236267	Symbol	sz		5236191						
ANR	5236268	Symbol	* string		5236191						
ANR	5236269	Symbol	* pos		5236191						
ANR	5236270	Function	r_str_closer_chr	2824:6:59371:59553							
ANR	5236271	FunctionDef	"r_str_closer_chr (const char * b , const char * s)"		5236270	0					
ANR	5236272	CompoundStatement		2824:65:59430:59553	5236270	0					
ANR	5236273	IdentifierDeclStatement	const char * a ;	2825:1:59433:59446	5236270	0	True				
ANR	5236274	IdentifierDecl	* a		5236270	0					
ANR	5236275	IdentifierDeclType	const char *		5236270	0					
ANR	5236276	Identifier	a		5236270	1					
ANR	5236277	WhileStatement	while ( * b )		5236270	1					
ANR	5236278	Condition	* b	2826:8:59456:59457	5236270	0	True				
ANR	5236279	UnaryOperationExpression	* b		5236270	0					
ANR	5236280	UnaryOperator	*		5236270	0					
ANR	5236281	Identifier	b		5236270	1					
ANR	5236282	CompoundStatement		3:12:29:29	5236270	1					
ANR	5236283	ForStatement	for ( a = s ; * a ; a ++ )		5236270	0					
ANR	5236284	ForInit	a = s ;	2827:7:59469:59474	5236270	0	True				
ANR	5236285	AssignmentExpression	a = s		5236270	0		=			
ANR	5236286	Identifier	a		5236270	0					
ANR	5236287	Identifier	s		5236270	1					
ANR	5236288	Condition	* a	2827:14:59476:59477	5236270	1	True				
ANR	5236289	UnaryOperationExpression	* a		5236270	0					
ANR	5236290	UnaryOperator	*		5236270	0					
ANR	5236291	Identifier	a		5236270	1					
ANR	5236292	PostIncDecOperationExpression	a ++	2827:18:59480:59482	5236270	2	True				
ANR	5236293	Identifier	a		5236270	0					
ANR	5236294	IncDec	++		5236270	1					
ANR	5236295	CompoundStatement		4:23:54:54	5236270	3					
ANR	5236296	IfStatement	if ( * b == * a )		5236270	0					
ANR	5236297	Condition	* b == * a	2828:7:59494:59501	5236270	0	True				
ANR	5236298	EqualityExpression	* b == * a		5236270	0		==			
ANR	5236299	UnaryOperationExpression	* b		5236270	0					
ANR	5236300	UnaryOperator	*		5236270	0					
ANR	5236301	Identifier	b		5236270	1					
ANR	5236302	UnaryOperationExpression	* a		5236270	1					
ANR	5236303	UnaryOperator	*		5236270	0					
ANR	5236304	Identifier	a		5236270	1					
ANR	5236305	CompoundStatement		5:17:73:73	5236270	1					
ANR	5236306	ReturnStatement	return b ;	2829:4:59510:59518	5236270	0	True				
ANR	5236307	Identifier	b		5236270	0					
ANR	5236308	ExpressionStatement	b ++	2832:2:59531:59534	5236270	1	True				
ANR	5236309	PostIncDecOperationExpression	b ++		5236270	0					
ANR	5236310	Identifier	b		5236270	0					
ANR	5236311	IncDec	++		5236270	1					
ANR	5236312	ReturnStatement	return NULL ;	2834:1:59540:59551	5236270	2	True				
ANR	5236313	Identifier	NULL		5236270	0					
ANR	5236314	ReturnType	const char *		5236270	1					
ANR	5236315	Identifier	r_str_closer_chr		5236270	2					
ANR	5236316	ParameterList	"const char * b , const char * s"		5236270	3					
ANR	5236317	Parameter	const char * b	2824:35:59400:59412	5236270	0	True				
ANR	5236318	ParameterType	const char *		5236270	0					
ANR	5236319	Identifier	b		5236270	1					
ANR	5236320	Parameter	const char * s	2824:50:59415:59427	5236270	1	True				
ANR	5236321	ParameterType	const char *		5236270	0					
ANR	5236322	Identifier	s		5236270	1					
ANR	5236323	CFGEntryNode	ENTRY		5236270		True				
ANR	5236324	CFGExitNode	EXIT		5236270		True				
ANR	5236325	Symbol	a		5236270						
ANR	5236326	Symbol	b		5236270						
ANR	5236327	Symbol	s		5236270						
ANR	5236328	Symbol	NULL		5236270						
ANR	5236329	Symbol	* a		5236270						
ANR	5236330	Symbol	* b		5236270						
ANR	5236331	Function	r_str_bounds	2837:0:59556:59989							
ANR	5236332	FunctionDef	"r_str_bounds (const char * _str , int * h)"		5236331	0					
ANR	5236333	CompoundStatement		2837:49:59605:59989	5236331	0					
ANR	5236334	IdentifierDeclStatement	"const char * str , * ptr ;"	2838:1:59608:59629	5236331	0	True				
ANR	5236335	IdentifierDecl	* str		5236331	0					
ANR	5236336	IdentifierDeclType	const char *		5236331	0					
ANR	5236337	Identifier	str		5236331	1					
ANR	5236338	IdentifierDecl	* ptr		5236331	1					
ANR	5236339	IdentifierDeclType	const char *		5236331	0					
ANR	5236340	Identifier	ptr		5236331	1					
ANR	5236341	IdentifierDeclStatement	"int W = 0 , H = 0 ;"	2839:1:59632:59648	5236331	1	True				
ANR	5236342	IdentifierDecl	W = 0		5236331	0					
ANR	5236343	IdentifierDeclType	int		5236331	0					
ANR	5236344	Identifier	W		5236331	1					
ANR	5236345	AssignmentExpression	W = 0		5236331	2		=			
ANR	5236346	Identifier	W		5236331	0					
ANR	5236347	PrimaryExpression	0		5236331	1					
ANR	5236348	IdentifierDecl	H = 0		5236331	1					
ANR	5236349	IdentifierDeclType	int		5236331	0					
ANR	5236350	Identifier	H		5236331	1					
ANR	5236351	AssignmentExpression	H = 0		5236331	2		=			
ANR	5236352	Identifier	H		5236331	0					
ANR	5236353	PrimaryExpression	0		5236331	1					
ANR	5236354	IdentifierDeclStatement	int cw = 0 ;	2840:1:59651:59661	5236331	2	True				
ANR	5236355	IdentifierDecl	cw = 0		5236331	0					
ANR	5236356	IdentifierDeclType	int		5236331	0					
ANR	5236357	Identifier	cw		5236331	1					
ANR	5236358	AssignmentExpression	cw = 0		5236331	2		=			
ANR	5236359	Identifier	cw		5236331	0					
ANR	5236360	PrimaryExpression	0		5236331	1					
ANR	5236361	IfStatement	if ( _str )		5236331	3					
ANR	5236362	Condition	_str	2842:5:59669:59672	5236331	0	True				
ANR	5236363	Identifier	_str		5236331	0					
ANR	5236364	CompoundStatement		6:11:69:69	5236331	1					
ANR	5236365	ExpressionStatement	ptr = str = _str	2843:2:59679:59695	5236331	0	True				
ANR	5236366	AssignmentExpression	ptr = str = _str		5236331	0		=			
ANR	5236367	Identifier	ptr		5236331	0					
ANR	5236368	AssignmentExpression	str = _str		5236331	1		=			
ANR	5236369	Identifier	str		5236331	0					
ANR	5236370	Identifier	_str		5236331	1					
ANR	5236371	WhileStatement	while ( * str )		5236331	1					
ANR	5236372	Condition	* str	2844:9:59706:59709	5236331	0	True				
ANR	5236373	UnaryOperationExpression	* str		5236331	0					
ANR	5236374	UnaryOperator	*		5236331	0					
ANR	5236375	Identifier	str		5236331	1					
ANR	5236376	CompoundStatement		8:15:106:106	5236331	1					
ANR	5236377	IfStatement	if ( * str == '\\n' )		5236331	0					
ANR	5236378	Condition	* str == '\\n'	2845:7:59721:59732	5236331	0	True				
ANR	5236379	EqualityExpression	* str == '\\n'		5236331	0		==			
ANR	5236380	UnaryOperationExpression	* str		5236331	0					
ANR	5236381	UnaryOperator	*		5236331	0					
ANR	5236382	Identifier	str		5236331	1					
ANR	5236383	PrimaryExpression	'\\n'		5236331	1					
ANR	5236384	CompoundStatement		9:21:129:129	5236331	1					
ANR	5236385	ExpressionStatement	H ++	2846:4:59741:59744	5236331	0	True				
ANR	5236386	PostIncDecOperationExpression	H ++		5236331	0					
ANR	5236387	Identifier	H		5236331	0					
ANR	5236388	IncDec	++		5236331	1					
ANR	5236389	ExpressionStatement	"cw = r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"	2847:4:59750:59797	5236331	1	True				
ANR	5236390	AssignmentExpression	"cw = r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"		5236331	0		=			
ANR	5236391	Identifier	cw		5236331	0					
ANR	5236392	CallExpression	"r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"		5236331	1					
ANR	5236393	Callee	r_str_ansi_nlen		5236331	0					
ANR	5236394	Identifier	r_str_ansi_nlen		5236331	0					
ANR	5236395	ArgumentList	ptr		5236331	1					
ANR	5236396	Argument	ptr		5236331	0					
ANR	5236397	Identifier	ptr		5236331	0					
ANR	5236398	Argument	( size_t ) ( str - ptr )		5236331	1					
ANR	5236399	CastExpression	( size_t ) ( str - ptr )		5236331	0					
ANR	5236400	CastTarget	size_t		5236331	0					
ANR	5236401	AdditiveExpression	str - ptr		5236331	1		-			
ANR	5236402	Identifier	str		5236331	0					
ANR	5236403	Identifier	ptr		5236331	1					
ANR	5236404	IfStatement	if ( cw > W )		5236331	2					
ANR	5236405	Condition	cw > W	2848:8:59807:59812	5236331	0	True				
ANR	5236406	RelationalExpression	cw > W		5236331	0		>			
ANR	5236407	Identifier	cw		5236331	0					
ANR	5236408	Identifier	W		5236331	1					
ANR	5236409	CompoundStatement		12:16:209:209	5236331	1					
ANR	5236410	ExpressionStatement	W = cw	2849:5:59822:59828	5236331	0	True				
ANR	5236411	AssignmentExpression	W = cw		5236331	0		=			
ANR	5236412	Identifier	W		5236331	0					
ANR	5236413	Identifier	cw		5236331	1					
ANR	5236414	ExpressionStatement	cw = 0	2851:4:59840:59846	5236331	3	True				
ANR	5236415	AssignmentExpression	cw = 0		5236331	0		=			
ANR	5236416	Identifier	cw		5236331	0					
ANR	5236417	PrimaryExpression	0		5236331	1					
ANR	5236418	ExpressionStatement	ptr = str + 1	2852:4:59852:59865	5236331	4	True				
ANR	5236419	AssignmentExpression	ptr = str + 1		5236331	0		=			
ANR	5236420	Identifier	ptr		5236331	0					
ANR	5236421	AdditiveExpression	str + 1		5236331	1		+			
ANR	5236422	Identifier	str		5236331	0					
ANR	5236423	PrimaryExpression	1		5236331	1					
ANR	5236424	ExpressionStatement	str ++	2854:3:59875:59880	5236331	1	True				
ANR	5236425	PostIncDecOperationExpression	str ++		5236331	0					
ANR	5236426	Identifier	str		5236331	0					
ANR	5236427	IncDec	++		5236331	1					
ANR	5236428	ExpressionStatement	cw ++	2855:3:59885:59889	5236331	2	True				
ANR	5236429	PostIncDecOperationExpression	cw ++		5236331	0					
ANR	5236430	Identifier	cw		5236331	0					
ANR	5236431	IncDec	++		5236331	1					
ANR	5236432	IfStatement	if ( * str == '\\n' )		5236331	2					
ANR	5236433	Condition	* str == '\\n'	2857:6:59901:59912	5236331	0	True				
ANR	5236434	EqualityExpression	* str == '\\n'		5236331	0		==			
ANR	5236435	UnaryOperationExpression	* str		5236331	0					
ANR	5236436	UnaryOperator	*		5236331	0					
ANR	5236437	Identifier	str		5236331	1					
ANR	5236438	PrimaryExpression	'\\n'		5236331	1					
ANR	5236439	CompoundStatement		21:20:309:309	5236331	1					
ANR	5236440	ExpressionStatement	H --	2858:3:59940:59943	5236331	0	True				
ANR	5236441	PostIncDecOperationExpression	H --		5236331	0					
ANR	5236442	Identifier	H		5236331	0					
ANR	5236443	IncDec	--		5236331	1					
ANR	5236444	IfStatement	if ( h )		5236331	3					
ANR	5236445	Condition	h	2860:6:59955:59955	5236331	0	True				
ANR	5236446	Identifier	h		5236331	0					
ANR	5236447	CompoundStatement		24:9:352:352	5236331	1					
ANR	5236448	ExpressionStatement	* h = H	2861:3:59963:59969	5236331	0	True				
ANR	5236449	AssignmentExpression	* h = H		5236331	0		=			
ANR	5236450	UnaryOperationExpression	* h		5236331	0					
ANR	5236451	UnaryOperator	*		5236331	0					
ANR	5236452	Identifier	h		5236331	1					
ANR	5236453	Identifier	H		5236331	1					
ANR	5236454	ReturnStatement	return W ;	2864:1:59979:59987	5236331	4	True				
ANR	5236455	Identifier	W		5236331	0					
ANR	5236456	ReturnType	R_API int		5236331	1					
ANR	5236457	Identifier	r_str_bounds		5236331	2					
ANR	5236458	ParameterList	"const char * _str , int * h"		5236331	3					
ANR	5236459	Parameter	const char * _str	2837:23:59579:59594	5236331	0	True				
ANR	5236460	ParameterType	const char *		5236331	0					
ANR	5236461	Identifier	_str		5236331	1					
ANR	5236462	Parameter	int * h	2837:41:59597:59602	5236331	1	True				
ANR	5236463	ParameterType	int *		5236331	0					
ANR	5236464	Identifier	h		5236331	1					
ANR	5236465	CFGEntryNode	ENTRY		5236331		True				
ANR	5236466	CFGExitNode	EXIT		5236331		True				
ANR	5236467	Symbol	str		5236331						
ANR	5236468	Symbol	* h		5236331						
ANR	5236469	Symbol	cw		5236331						
ANR	5236470	Symbol	r_str_ansi_nlen		5236331						
ANR	5236471	Symbol	W		5236331						
ANR	5236472	Symbol	h		5236331						
ANR	5236473	Symbol	H		5236331						
ANR	5236474	Symbol	* str		5236331						
ANR	5236475	Symbol	_str		5236331						
ANR	5236476	Symbol	ptr		5236331						
ANR	5236477	Function	r_str_crop	2870:0:60225:60914							
ANR	5236478	FunctionDef	"r_str_crop (const char * str , unsigned int x , unsigned int y , unsigned int x2 , unsigned int y2)"		5236477	0					
ANR	5236479	CompoundStatement		2871:36:60333:60914	5236477	0					
ANR	5236480	IdentifierDeclStatement	"char * r , * ret ;"	2872:1:60336:60349	5236477	0	True				
ANR	5236481	IdentifierDecl	* r		5236477	0					
ANR	5236482	IdentifierDeclType	char *		5236477	0					
ANR	5236483	Identifier	r		5236477	1					
ANR	5236484	IdentifierDecl	* ret		5236477	1					
ANR	5236485	IdentifierDeclType	char *		5236477	0					
ANR	5236486	Identifier	ret		5236477	1					
ANR	5236487	IdentifierDeclStatement	"unsigned int ch = 0 , cw = 0 ;"	2873:1:60352:60379	5236477	1	True				
ANR	5236488	IdentifierDecl	ch = 0		5236477	0					
ANR	5236489	IdentifierDeclType	unsigned int		5236477	0					
ANR	5236490	Identifier	ch		5236477	1					
ANR	5236491	AssignmentExpression	ch = 0		5236477	2		=			
ANR	5236492	Identifier	ch		5236477	0					
ANR	5236493	PrimaryExpression	0		5236477	1					
ANR	5236494	IdentifierDecl	cw = 0		5236477	1					
ANR	5236495	IdentifierDeclType	unsigned int		5236477	0					
ANR	5236496	Identifier	cw		5236477	1					
ANR	5236497	AssignmentExpression	cw = 0		5236477	2		=			
ANR	5236498	Identifier	cw		5236477	0					
ANR	5236499	PrimaryExpression	0		5236477	1					
ANR	5236500	IfStatement	if ( x2 < 1 || y2 < 1 || ! str )		5236477	2					
ANR	5236501	Condition	x2 < 1 || y2 < 1 || ! str	2874:5:60386:60409	5236477	0	True				
ANR	5236502	OrExpression	x2 < 1 || y2 < 1 || ! str		5236477	0		||			
ANR	5236503	RelationalExpression	x2 < 1		5236477	0		<			
ANR	5236504	Identifier	x2		5236477	0					
ANR	5236505	PrimaryExpression	1		5236477	1					
ANR	5236506	OrExpression	y2 < 1 || ! str		5236477	1		||			
ANR	5236507	RelationalExpression	y2 < 1		5236477	0		<			
ANR	5236508	Identifier	y2		5236477	0					
ANR	5236509	PrimaryExpression	1		5236477	1					
ANR	5236510	UnaryOperationExpression	! str		5236477	1					
ANR	5236511	UnaryOperator	!		5236477	0					
ANR	5236512	Identifier	str		5236477	1					
ANR	5236513	CompoundStatement		4:31:78:78	5236477	1					
ANR	5236514	ReturnStatement	"return strdup ( """" ) ;"	2875:2:60416:60434	5236477	0	True				
ANR	5236515	CallExpression	"strdup ( """" )"		5236477	0					
ANR	5236516	Callee	strdup		5236477	0					
ANR	5236517	Identifier	strdup		5236477	0					
ANR	5236518	ArgumentList	""""""		5236477	1					
ANR	5236519	Argument	""""""		5236477	0					
ANR	5236520	PrimaryExpression	""""""		5236477	0					
ANR	5236521	ExpressionStatement	r = ret = strdup ( str )	2877:1:60440:60462	5236477	3	True				
ANR	5236522	AssignmentExpression	r = ret = strdup ( str )		5236477	0		=			
ANR	5236523	Identifier	r		5236477	0					
ANR	5236524	AssignmentExpression	ret = strdup ( str )		5236477	1		=			
ANR	5236525	Identifier	ret		5236477	0					
ANR	5236526	CallExpression	strdup ( str )		5236477	1					
ANR	5236527	Callee	strdup		5236477	0					
ANR	5236528	Identifier	strdup		5236477	0					
ANR	5236529	ArgumentList	str		5236477	1					
ANR	5236530	Argument	str		5236477	0					
ANR	5236531	Identifier	str		5236477	0					
ANR	5236532	WhileStatement	while ( * str )		5236477	4					
ANR	5236533	Condition	* str	2878:8:60472:60475	5236477	0	True				
ANR	5236534	UnaryOperationExpression	* str		5236477	0					
ANR	5236535	UnaryOperator	*		5236477	0					
ANR	5236536	Identifier	str		5236477	1					
ANR	5236537	CompoundStatement		8:14:144:144	5236477	1					
ANR	5236538	IfStatement	if ( ch >= y2 )		5236477	0					
ANR	5236539	Condition	ch >= y2	2880:6:60506:60513	5236477	0	True				
ANR	5236540	RelationalExpression	ch >= y2		5236477	0		>=			
ANR	5236541	Identifier	ch		5236477	0					
ANR	5236542	Identifier	y2		5236477	1					
ANR	5236543	CompoundStatement		10:16:182:182	5236477	1					
ANR	5236544	ExpressionStatement	r --	2881:3:60521:60524	5236477	0	True				
ANR	5236545	PostIncDecOperationExpression	r --		5236477	0					
ANR	5236546	Identifier	r		5236477	0					
ANR	5236547	IncDec	--		5236477	1					
ANR	5236548	BreakStatement	break ;	2882:3:60529:60534	5236477	1	True				
ANR	5236549	IfStatement	if ( * str == '\\n' )		5236477	1					
ANR	5236550	Condition	* str == '\\n'	2885:6:60547:60558	5236477	0	True				
ANR	5236551	EqualityExpression	* str == '\\n'		5236477	0		==			
ANR	5236552	UnaryOperationExpression	* str		5236477	0					
ANR	5236553	UnaryOperator	*		5236477	0					
ANR	5236554	Identifier	str		5236477	1					
ANR	5236555	PrimaryExpression	'\\n'		5236477	1					
ANR	5236556	CompoundStatement		15:20:227:227	5236477	1					
ANR	5236557	IfStatement	if ( ch >= y && ch < y2 )		5236477	0					
ANR	5236558	Condition	ch >= y && ch < y2	2886:7:60570:60587	5236477	0	True				
ANR	5236559	AndExpression	ch >= y && ch < y2		5236477	0		&&			
ANR	5236560	RelationalExpression	ch >= y		5236477	0		>=			
ANR	5236561	Identifier	ch		5236477	0					
ANR	5236562	Identifier	y		5236477	1					
ANR	5236563	RelationalExpression	ch < y2		5236477	1		<			
ANR	5236564	Identifier	ch		5236477	0					
ANR	5236565	Identifier	y2		5236477	1					
ANR	5236566	CompoundStatement		16:27:256:256	5236477	1					
ANR	5236567	ExpressionStatement	* r ++ = * str	2887:4:60596:60607	5236477	0	True				
ANR	5236568	AssignmentExpression	* r ++ = * str		5236477	0		=			
ANR	5236569	UnaryOperationExpression	* r ++		5236477	0					
ANR	5236570	UnaryOperator	*		5236477	0					
ANR	5236571	PostIncDecOperationExpression	r ++		5236477	1					
ANR	5236572	Identifier	r		5236477	0					
ANR	5236573	IncDec	++		5236477	1					
ANR	5236574	UnaryOperationExpression	* str		5236477	1					
ANR	5236575	UnaryOperator	*		5236477	0					
ANR	5236576	Identifier	str		5236477	1					
ANR	5236577	ExpressionStatement	str ++	2889:3:60617:60622	5236477	1	True				
ANR	5236578	PostIncDecOperationExpression	str ++		5236477	0					
ANR	5236579	Identifier	str		5236477	0					
ANR	5236580	IncDec	++		5236477	1					
ANR	5236581	ExpressionStatement	ch ++	2890:3:60627:60631	5236477	2	True				
ANR	5236582	PostIncDecOperationExpression	ch ++		5236477	0					
ANR	5236583	Identifier	ch		5236477	0					
ANR	5236584	IncDec	++		5236477	1					
ANR	5236585	ExpressionStatement	cw = 0	2891:3:60636:60642	5236477	3	True				
ANR	5236586	AssignmentExpression	cw = 0		5236477	0		=			
ANR	5236587	Identifier	cw		5236477	0					
ANR	5236588	PrimaryExpression	0		5236477	1					
ANR	5236589	ElseStatement	else		5236477	0					
ANR	5236590	CompoundStatement		22:9:319:319	5236477	0					
ANR	5236591	IfStatement	if ( ch >= y && ch < y2 && cw >= x && cw < x2 )		5236477	0					
ANR	5236592	Condition	ch >= y && ch < y2 && cw >= x && cw < x2	2893:7:60662:60701	5236477	0	True				
ANR	5236593	AndExpression	ch >= y && ch < y2 && cw >= x && cw < x2		5236477	0		&&			
ANR	5236594	RelationalExpression	ch >= y		5236477	0		>=			
ANR	5236595	Identifier	ch		5236477	0					
ANR	5236596	Identifier	y		5236477	1					
ANR	5236597	AndExpression	ch < y2 && cw >= x && cw < x2		5236477	1		&&			
ANR	5236598	RelationalExpression	ch < y2		5236477	0		<			
ANR	5236599	Identifier	ch		5236477	0					
ANR	5236600	Identifier	y2		5236477	1					
ANR	5236601	AndExpression	cw >= x && cw < x2		5236477	1		&&			
ANR	5236602	RelationalExpression	cw >= x		5236477	0		>=			
ANR	5236603	Identifier	cw		5236477	0					
ANR	5236604	Identifier	x		5236477	1					
ANR	5236605	RelationalExpression	cw < x2		5236477	1		<			
ANR	5236606	Identifier	cw		5236477	0					
ANR	5236607	Identifier	x2		5236477	1					
ANR	5236608	CompoundStatement		23:49:370:370	5236477	1					
ANR	5236609	ExpressionStatement	* r ++ = * str	2894:4:60710:60721	5236477	0	True				
ANR	5236610	AssignmentExpression	* r ++ = * str		5236477	0		=			
ANR	5236611	UnaryOperationExpression	* r ++		5236477	0					
ANR	5236612	UnaryOperator	*		5236477	0					
ANR	5236613	PostIncDecOperationExpression	r ++		5236477	1					
ANR	5236614	Identifier	r		5236477	0					
ANR	5236615	IncDec	++		5236477	1					
ANR	5236616	UnaryOperationExpression	* str		5236477	1					
ANR	5236617	UnaryOperator	*		5236477	0					
ANR	5236618	Identifier	str		5236477	1					
ANR	5236619	IfStatement	if ( cw >= x2 )		5236477	1					
ANR	5236620	Condition	cw >= x2	2898:7:60783:60790	5236477	0	True				
ANR	5236621	RelationalExpression	cw >= x2		5236477	0		>=			
ANR	5236622	Identifier	cw		5236477	0					
ANR	5236623	Identifier	x2		5236477	1					
ANR	5236624	CompoundStatement		28:17:459:459	5236477	1					
ANR	5236625	WhileStatement	while ( * str && * str != '\\n' )		5236477	0					
ANR	5236626	Condition	* str && * str != '\\n'	2899:11:60806:60825	5236477	0	True				
ANR	5236627	AndExpression	* str && * str != '\\n'		5236477	0		&&			
ANR	5236628	UnaryOperationExpression	* str		5236477	0					
ANR	5236629	UnaryOperator	*		5236477	0					
ANR	5236630	Identifier	str		5236477	1					
ANR	5236631	EqualityExpression	* str != '\\n'		5236477	1		!=			
ANR	5236632	UnaryOperationExpression	* str		5236477	0					
ANR	5236633	UnaryOperator	*		5236477	0					
ANR	5236634	Identifier	str		5236477	1					
ANR	5236635	PrimaryExpression	'\\n'		5236477	1					
ANR	5236636	CompoundStatement		29:33:494:494	5236477	1					
ANR	5236637	ExpressionStatement	str ++	2900:5:60835:60840	5236477	0	True				
ANR	5236638	PostIncDecOperationExpression	str ++		5236477	0					
ANR	5236639	Identifier	str		5236477	0					
ANR	5236640	IncDec	++		5236477	1					
ANR	5236641	ElseStatement	else		5236477	0					
ANR	5236642	CompoundStatement		32:10:524:524	5236477	0					
ANR	5236643	ExpressionStatement	str ++	2903:4:60864:60869	5236477	0	True				
ANR	5236644	PostIncDecOperationExpression	str ++		5236477	0					
ANR	5236645	Identifier	str		5236477	0					
ANR	5236646	IncDec	++		5236477	1					
ANR	5236647	ExpressionStatement	cw ++	2905:3:60879:60883	5236477	2	True				
ANR	5236648	PostIncDecOperationExpression	cw ++		5236477	0					
ANR	5236649	Identifier	cw		5236477	0					
ANR	5236650	IncDec	++		5236477	1					
ANR	5236651	ExpressionStatement	* r = 0	2908:1:60893:60899	5236477	5	True				
ANR	5236652	AssignmentExpression	* r = 0		5236477	0		=			
ANR	5236653	UnaryOperationExpression	* r		5236477	0					
ANR	5236654	UnaryOperator	*		5236477	0					
ANR	5236655	Identifier	r		5236477	1					
ANR	5236656	PrimaryExpression	0		5236477	1					
ANR	5236657	ReturnStatement	return ret ;	2909:1:60902:60912	5236477	6	True				
ANR	5236658	Identifier	ret		5236477	0					
ANR	5236659	ReturnType	R_API char *		5236477	1					
ANR	5236660	Identifier	r_str_crop		5236477	2					
ANR	5236661	ParameterList	"const char * str , unsigned int x , unsigned int y , unsigned int x2 , unsigned int y2"		5236477	3					
ANR	5236662	Parameter	const char * str	2870:23:60248:60262	5236477	0	True				
ANR	5236663	ParameterType	const char *		5236477	0					
ANR	5236664	Identifier	str		5236477	1					
ANR	5236665	Parameter	unsigned int x	2870:40:60265:60278	5236477	1	True				
ANR	5236666	ParameterType	unsigned int		5236477	0					
ANR	5236667	Identifier	x		5236477	1					
ANR	5236668	Parameter	unsigned int y	2870:56:60281:60294	5236477	2	True				
ANR	5236669	ParameterType	unsigned int		5236477	0					
ANR	5236670	Identifier	y		5236477	1					
ANR	5236671	Parameter	unsigned int x2	2871:2:60299:60313	5236477	3	True				
ANR	5236672	ParameterType	unsigned int		5236477	0					
ANR	5236673	Identifier	x2		5236477	1					
ANR	5236674	Parameter	unsigned int y2	2871:19:60316:60330	5236477	4	True				
ANR	5236675	ParameterType	unsigned int		5236477	0					
ANR	5236676	Identifier	y2		5236477	1					
ANR	5236677	CFGEntryNode	ENTRY		5236477		True				
ANR	5236678	CFGExitNode	EXIT		5236477		True				
ANR	5236679	Symbol	ret		5236477						
ANR	5236680	Symbol	ch		5236477						
ANR	5236681	Symbol	* r ++		5236477						
ANR	5236682	Symbol	str		5236477						
ANR	5236683	Symbol	r		5236477						
ANR	5236684	Symbol	cw		5236477						
ANR	5236685	Symbol	x		5236477						
ANR	5236686	Symbol	y		5236477						
ANR	5236687	Symbol	y2		5236477						
ANR	5236688	Symbol	x2		5236477						
ANR	5236689	Symbol	strdup		5236477						
ANR	5236690	Symbol	* str		5236477						
ANR	5236691	Symbol	* r		5236477						
ANR	5236692	Function	r_str_tok	2912:6:60923:61213							
ANR	5236693	FunctionDef	"r_str_tok (const char * str1 , const char b , size_t len)"		5236692	0					
ANR	5236694	CompoundStatement		2912:73:60990:61213	5236692	0					
ANR	5236695	IdentifierDeclStatement	const char * p = str1 ;	2913:1:60993:61013	5236692	0	True				
ANR	5236696	IdentifierDecl	* p = str1		5236692	0					
ANR	5236697	IdentifierDeclType	const char *		5236692	0					
ANR	5236698	Identifier	p		5236692	1					
ANR	5236699	AssignmentExpression	* p = str1		5236692	2		=			
ANR	5236700	Identifier	str1		5236692	0					
ANR	5236701	Identifier	str1		5236692	1					
ANR	5236702	IdentifierDeclStatement	size_t i = 0 ;	2914:1:61016:61028	5236692	1	True				
ANR	5236703	IdentifierDecl	i = 0		5236692	0					
ANR	5236704	IdentifierDeclType	size_t		5236692	0					
ANR	5236705	Identifier	i		5236692	1					
ANR	5236706	AssignmentExpression	i = 0		5236692	2		=			
ANR	5236707	Identifier	i		5236692	0					
ANR	5236708	PrimaryExpression	0		5236692	1					
ANR	5236709	IfStatement	if ( ! p || ! * p )		5236692	2					
ANR	5236710	Condition	! p || ! * p	2915:5:61035:61043	5236692	0	True				
ANR	5236711	OrExpression	! p || ! * p		5236692	0		||			
ANR	5236712	UnaryOperationExpression	! p		5236692	0					
ANR	5236713	UnaryOperator	!		5236692	0					
ANR	5236714	Identifier	p		5236692	1					
ANR	5236715	UnaryOperationExpression	! * p		5236692	1					
ANR	5236716	UnaryOperator	!		5236692	0					
ANR	5236717	UnaryOperationExpression	* p		5236692	1					
ANR	5236718	UnaryOperator	*		5236692	0					
ANR	5236719	Identifier	p		5236692	1					
ANR	5236720	CompoundStatement		4:16:55:55	5236692	1					
ANR	5236721	ReturnStatement	return p ;	2916:2:61050:61058	5236692	0	True				
ANR	5236722	Identifier	p		5236692	0					
ANR	5236723	IfStatement	if ( len == - 1 )		5236692	3					
ANR	5236724	Condition	len == - 1	2918:5:61068:61076	5236692	0	True				
ANR	5236725	EqualityExpression	len == - 1		5236692	0		==			
ANR	5236726	Identifier	len		5236692	0					
ANR	5236727	UnaryOperationExpression	- 1		5236692	1					
ANR	5236728	UnaryOperator	-		5236692	0					
ANR	5236729	PrimaryExpression	1		5236692	1					
ANR	5236730	CompoundStatement		7:16:88:88	5236692	1					
ANR	5236731	ExpressionStatement	len = strlen ( str1 )	2919:2:61083:61102	5236692	0	True				
ANR	5236732	AssignmentExpression	len = strlen ( str1 )		5236692	0		=			
ANR	5236733	Identifier	len		5236692	0					
ANR	5236734	CallExpression	strlen ( str1 )		5236692	1					
ANR	5236735	Callee	strlen		5236692	0					
ANR	5236736	Identifier	strlen		5236692	0					
ANR	5236737	ArgumentList	str1		5236692	1					
ANR	5236738	Argument	str1		5236692	0					
ANR	5236739	Identifier	str1		5236692	0					
ANR	5236740	ForStatement	"for ( ; i < len ; i ++ , p ++ )"		5236692	4					
ANR	5236741	Condition	i < len	2921:9:61116:61122	5236692	0	True				
ANR	5236742	RelationalExpression	i < len		5236692	0		<			
ANR	5236743	Identifier	i		5236692	0					
ANR	5236744	Identifier	len		5236692	1					
ANR	5236745	Expression	"i ++ , p ++"	2921:18:61125:61131	5236692	1	True				
ANR	5236746	PostIncDecOperationExpression	i ++		5236692	0					
ANR	5236747	Identifier	i		5236692	0					
ANR	5236748	IncDec	++		5236692	1					
ANR	5236749	PostIncDecOperationExpression	p ++		5236692	1					
ANR	5236750	Identifier	p		5236692	0					
ANR	5236751	IncDec	++		5236692	1					
ANR	5236752	CompoundStatement		10:27:143:143	5236692	2					
ANR	5236753	IfStatement	if ( * p == b )		5236692	0					
ANR	5236754	Condition	* p == b	2922:6:61142:61148	5236692	0	True				
ANR	5236755	EqualityExpression	* p == b		5236692	0		==			
ANR	5236756	UnaryOperationExpression	* p		5236692	0					
ANR	5236757	UnaryOperator	*		5236692	0					
ANR	5236758	Identifier	p		5236692	1					
ANR	5236759	Identifier	b		5236692	1					
ANR	5236760	CompoundStatement		11:15:160:160	5236692	1					
ANR	5236761	BreakStatement	break ;	2923:3:61156:61161	5236692	0	True				
ANR	5236762	IfStatement	if ( i == len )		5236692	5					
ANR	5236763	Condition	i == len	2926:5:61175:61182	5236692	0	True				
ANR	5236764	EqualityExpression	i == len		5236692	0		==			
ANR	5236765	Identifier	i		5236692	0					
ANR	5236766	Identifier	len		5236692	1					
ANR	5236767	CompoundStatement		15:15:194:194	5236692	1					
ANR	5236768	ExpressionStatement	p = NULL	2927:2:61189:61197	5236692	0	True				
ANR	5236769	AssignmentExpression	p = NULL		5236692	0		=			
ANR	5236770	Identifier	p		5236692	0					
ANR	5236771	Identifier	NULL		5236692	1					
ANR	5236772	ReturnStatement	return p ;	2929:1:61203:61211	5236692	6	True				
ANR	5236773	Identifier	p		5236692	0					
ANR	5236774	ReturnType	const char *		5236692	1					
ANR	5236775	Identifier	r_str_tok		5236692	2					
ANR	5236776	ParameterList	"const char * str1 , const char b , size_t len"		5236692	3					
ANR	5236777	Parameter	const char * str1	2912:29:60946:60961	5236692	0	True				
ANR	5236778	ParameterType	const char *		5236692	0					
ANR	5236779	Identifier	str1		5236692	1					
ANR	5236780	Parameter	const char b	2912:47:60964:60975	5236692	1	True				
ANR	5236781	ParameterType	const char		5236692	0					
ANR	5236782	Identifier	b		5236692	1					
ANR	5236783	Parameter	size_t len	2912:61:60978:60987	5236692	2	True				
ANR	5236784	ParameterType	size_t		5236692	0					
ANR	5236785	Identifier	len		5236692	1					
ANR	5236786	CFGEntryNode	ENTRY		5236692		True				
ANR	5236787	CFGExitNode	EXIT		5236692		True				
ANR	5236788	Symbol	p		5236692						
ANR	5236789	Symbol	strlen		5236692						
ANR	5236790	Symbol	b		5236692						
ANR	5236791	Symbol	NULL		5236692						
ANR	5236792	Symbol	len		5236692						
ANR	5236793	Symbol	str1		5236692						
ANR	5236794	Symbol	i		5236692						
ANR	5236795	Symbol	* p		5236692						
ANR	5236796	Function	r_str_do_until_token	2932:0:61216:61526							
ANR	5236797	FunctionDef	"r_str_do_until_token (str_operation op , char * str , const char tok)"		5236796	0					
ANR	5236798	CompoundStatement		2932:76:61292:61526	5236796	0					
ANR	5236799	IdentifierDeclStatement	int ret ;	2933:1:61295:61302	5236796	0	True				
ANR	5236800	IdentifierDecl	ret		5236796	0					
ANR	5236801	IdentifierDeclType	int		5236796	0					
ANR	5236802	Identifier	ret		5236796	1					
ANR	5236803	IfStatement	if ( ! str )		5236796	1					
ANR	5236804	Condition	! str	2934:5:61309:61312	5236796	0	True				
ANR	5236805	UnaryOperationExpression	! str		5236796	0					
ANR	5236806	UnaryOperator	!		5236796	0					
ANR	5236807	Identifier	str		5236796	1					
ANR	5236808	CompoundStatement		3:11:22:22	5236796	1					
ANR	5236809	ReturnStatement	return - 1 ;	2935:2:61319:61328	5236796	0	True				
ANR	5236810	UnaryOperationExpression	- 1		5236796	0					
ANR	5236811	UnaryOperator	-		5236796	0					
ANR	5236812	PrimaryExpression	1		5236796	1					
ANR	5236813	IfStatement	if ( ! op )		5236796	2					
ANR	5236814	Condition	! op	2937:5:61338:61340	5236796	0	True				
ANR	5236815	UnaryOperationExpression	! op		5236796	0					
ANR	5236816	UnaryOperator	!		5236796	0					
ANR	5236817	Identifier	op		5236796	1					
ANR	5236818	CompoundStatement		6:10:50:50	5236796	1					
ANR	5236819	ForStatement	for ( ret = 0 ; ( str [ ret ] != tok ) && str [ ret ] ; ret ++ )		5236796	0					
ANR	5236820	ForInit	ret = 0 ;	2938:7:61352:61359	5236796	0	True				
ANR	5236821	AssignmentExpression	ret = 0		5236796	0		=			
ANR	5236822	Identifier	ret		5236796	0					
ANR	5236823	PrimaryExpression	0		5236796	1					
ANR	5236824	Condition	( str [ ret ] != tok ) && str [ ret ]	2938:16:61361:61389	5236796	1	True				
ANR	5236825	AndExpression	( str [ ret ] != tok ) && str [ ret ]		5236796	0		&&			
ANR	5236826	EqualityExpression	str [ ret ] != tok		5236796	0		!=			
ANR	5236827	ArrayIndexing	str [ ret ]		5236796	0					
ANR	5236828	Identifier	str		5236796	0					
ANR	5236829	Identifier	ret		5236796	1					
ANR	5236830	Identifier	tok		5236796	1					
ANR	5236831	ArrayIndexing	str [ ret ]		5236796	1					
ANR	5236832	Identifier	str		5236796	0					
ANR	5236833	Identifier	ret		5236796	1					
ANR	5236834	PostIncDecOperationExpression	ret ++	2938:47:61392:61396	5236796	2	True				
ANR	5236835	Identifier	ret		5236796	0					
ANR	5236836	IncDec	++		5236796	1					
ANR	5236837	CompoundStatement		7:54:106:106	5236796	3					
ANR	5236838	ElseStatement	else		5236796	0					
ANR	5236839	CompoundStatement		10:8:136:136	5236796	0					
ANR	5236840	ForStatement	for ( ret = 0 ; ( str [ ret ] != tok ) && str [ ret ] ; ret ++ )		5236796	0					
ANR	5236841	ForInit	ret = 0 ;	2942:7:61438:61445	5236796	0	True				
ANR	5236842	AssignmentExpression	ret = 0		5236796	0		=			
ANR	5236843	Identifier	ret		5236796	0					
ANR	5236844	PrimaryExpression	0		5236796	1					
ANR	5236845	Condition	( str [ ret ] != tok ) && str [ ret ]	2942:16:61447:61475	5236796	1	True				
ANR	5236846	AndExpression	( str [ ret ] != tok ) && str [ ret ]		5236796	0		&&			
ANR	5236847	EqualityExpression	str [ ret ] != tok		5236796	0		!=			
ANR	5236848	ArrayIndexing	str [ ret ]		5236796	0					
ANR	5236849	Identifier	str		5236796	0					
ANR	5236850	Identifier	ret		5236796	1					
ANR	5236851	Identifier	tok		5236796	1					
ANR	5236852	ArrayIndexing	str [ ret ]		5236796	1					
ANR	5236853	Identifier	str		5236796	0					
ANR	5236854	Identifier	ret		5236796	1					
ANR	5236855	PostIncDecOperationExpression	ret ++	2942:47:61478:61482	5236796	2	True				
ANR	5236856	Identifier	ret		5236796	0					
ANR	5236857	IncDec	++		5236796	1					
ANR	5236858	CompoundStatement		11:54:192:192	5236796	3					
ANR	5236859	ExpressionStatement	op ( str + ret )	2943:3:61490:61504	5236796	0	True				
ANR	5236860	CallExpression	op ( str + ret )		5236796	0					
ANR	5236861	Callee	op		5236796	0					
ANR	5236862	Identifier	op		5236796	0					
ANR	5236863	ArgumentList	str + ret		5236796	1					
ANR	5236864	Argument	str + ret		5236796	0					
ANR	5236865	AdditiveExpression	str + ret		5236796	0		+			
ANR	5236866	Identifier	str		5236796	0					
ANR	5236867	Identifier	ret		5236796	1					
ANR	5236868	ReturnStatement	return ret ;	2946:1:61514:61524	5236796	3	True				
ANR	5236869	Identifier	ret		5236796	0					
ANR	5236870	ReturnType	R_API int		5236796	1					
ANR	5236871	Identifier	r_str_do_until_token		5236796	2					
ANR	5236872	ParameterList	"str_operation op , char * str , const char tok"		5236796	3					
ANR	5236873	Parameter	str_operation op	2932:31:61247:61262	5236796	0	True				
ANR	5236874	ParameterType	str_operation		5236796	0					
ANR	5236875	Identifier	op		5236796	1					
ANR	5236876	Parameter	char * str	2932:49:61265:61273	5236796	1	True				
ANR	5236877	ParameterType	char *		5236796	0					
ANR	5236878	Identifier	str		5236796	1					
ANR	5236879	Parameter	const char tok	2932:60:61276:61289	5236796	2	True				
ANR	5236880	ParameterType	const char		5236796	0					
ANR	5236881	Identifier	tok		5236796	1					
ANR	5236882	CFGEntryNode	ENTRY		5236796		True				
ANR	5236883	CFGExitNode	EXIT		5236796		True				
ANR	5236884	Symbol	str		5236796						
ANR	5236885	Symbol	ret		5236796						
ANR	5236886	Symbol	op		5236796						
ANR	5236887	Symbol	tok		5236796						
ANR	5236888	Symbol	* ret		5236796						
ANR	5236889	Symbol	* str		5236796						
ANR	5236890	Function	r_str_pad	2949:6:61535:61763							
ANR	5236891	FunctionDef	"r_str_pad (const char ch , int sz)"		5236890	0					
ANR	5236892	CompoundStatement		2949:51:61580:61763	5236890	0					
ANR	5236893	Statement	static	2950:1:61583:61588	5236890	0	True				
ANR	5236894	IdentifierDeclStatement	char pad [ 1024 ] ;	2950:8:61590:61604	5236890	1	True				
ANR	5236895	IdentifierDecl	pad [ 1024 ]		5236890	0					
ANR	5236896	IdentifierDeclType	char [ 1024 ]		5236890	0					
ANR	5236897	Identifier	pad		5236890	1					
ANR	5236898	PrimaryExpression	1024		5236890	2					
ANR	5236899	IfStatement	if ( sz < 0 )		5236890	2					
ANR	5236900	Condition	sz < 0	2951:5:61611:61616	5236890	0	True				
ANR	5236901	RelationalExpression	sz < 0		5236890	0		<			
ANR	5236902	Identifier	sz		5236890	0					
ANR	5236903	PrimaryExpression	0		5236890	1					
ANR	5236904	CompoundStatement		3:13:38:38	5236890	1					
ANR	5236905	ExpressionStatement	sz = 0	2952:2:61623:61629	5236890	0	True				
ANR	5236906	AssignmentExpression	sz = 0		5236890	0		=			
ANR	5236907	Identifier	sz		5236890	0					
ANR	5236908	PrimaryExpression	0		5236890	1					
ANR	5236909	ExpressionStatement	"memset ( pad , ch , R_MIN ( sz , sizeof ( pad ) ) )"	2954:1:61635:61677	5236890	3	True				
ANR	5236910	CallExpression	"memset ( pad , ch , R_MIN ( sz , sizeof ( pad ) ) )"		5236890	0					
ANR	5236911	Callee	memset		5236890	0					
ANR	5236912	Identifier	memset		5236890	0					
ANR	5236913	ArgumentList	pad		5236890	1					
ANR	5236914	Argument	pad		5236890	0					
ANR	5236915	Identifier	pad		5236890	0					
ANR	5236916	Argument	ch		5236890	1					
ANR	5236917	Identifier	ch		5236890	0					
ANR	5236918	Argument	"R_MIN ( sz , sizeof ( pad ) )"		5236890	2					
ANR	5236919	CallExpression	"R_MIN ( sz , sizeof ( pad ) )"		5236890	0					
ANR	5236920	Callee	R_MIN		5236890	0					
ANR	5236921	Identifier	R_MIN		5236890	0					
ANR	5236922	ArgumentList	sz		5236890	1					
ANR	5236923	Argument	sz		5236890	0					
ANR	5236924	Identifier	sz		5236890	0					
ANR	5236925	Argument	sizeof ( pad )		5236890	1					
ANR	5236926	SizeofExpression	sizeof ( pad )		5236890	0					
ANR	5236927	Sizeof	sizeof		5236890	0					
ANR	5236928	SizeofOperand	pad		5236890	1					
ANR	5236929	IfStatement	if ( sz < sizeof ( pad ) )		5236890	4					
ANR	5236930	Condition	sz < sizeof ( pad )	2955:5:61684:61700	5236890	0	True				
ANR	5236931	RelationalExpression	sz < sizeof ( pad )		5236890	0		<			
ANR	5236932	Identifier	sz		5236890	0					
ANR	5236933	SizeofExpression	sizeof ( pad )		5236890	1					
ANR	5236934	Sizeof	sizeof		5236890	0					
ANR	5236935	SizeofOperand	pad		5236890	1					
ANR	5236936	CompoundStatement		7:24:122:122	5236890	1					
ANR	5236937	ExpressionStatement	pad [ sz ] = 0	2956:2:61707:61718	5236890	0	True				
ANR	5236938	AssignmentExpression	pad [ sz ] = 0		5236890	0		=			
ANR	5236939	ArrayIndexing	pad [ sz ]		5236890	0					
ANR	5236940	Identifier	pad		5236890	0					
ANR	5236941	Identifier	sz		5236890	1					
ANR	5236942	PrimaryExpression	0		5236890	1					
ANR	5236943	ExpressionStatement	pad [ sizeof ( pad ) - 1 ] = 0	2958:1:61724:61748	5236890	5	True				
ANR	5236944	AssignmentExpression	pad [ sizeof ( pad ) - 1 ] = 0		5236890	0		=			
ANR	5236945	ArrayIndexing	pad [ sizeof ( pad ) - 1 ]		5236890	0					
ANR	5236946	Identifier	pad		5236890	0					
ANR	5236947	AdditiveExpression	sizeof ( pad ) - 1		5236890	1		-			
ANR	5236948	SizeofExpression	sizeof ( pad )		5236890	0					
ANR	5236949	Sizeof	sizeof		5236890	0					
ANR	5236950	SizeofOperand	pad		5236890	1					
ANR	5236951	PrimaryExpression	1		5236890	1					
ANR	5236952	PrimaryExpression	0		5236890	1					
ANR	5236953	ReturnStatement	return pad ;	2959:1:61751:61761	5236890	6	True				
ANR	5236954	Identifier	pad		5236890	0					
ANR	5236955	ReturnType	const char *		5236890	1					
ANR	5236956	Identifier	r_str_pad		5236890	2					
ANR	5236957	ParameterList	"const char ch , int sz"		5236890	3					
ANR	5236958	Parameter	const char ch	2949:28:61557:61569	5236890	0	True				
ANR	5236959	ParameterType	const char		5236890	0					
ANR	5236960	Identifier	ch		5236890	1					
ANR	5236961	Parameter	int sz	2949:43:61572:61577	5236890	1	True				
ANR	5236962	ParameterType	int		5236890	0					
ANR	5236963	Identifier	sz		5236890	1					
ANR	5236964	CFGEntryNode	ENTRY		5236890		True				
ANR	5236965	CFGExitNode	EXIT		5236890		True				
ANR	5236966	Symbol	pad		5236890						
ANR	5236967	Symbol	ch		5236890						
ANR	5236968	Symbol	sz		5236890						
ANR	5236969	Symbol	R_MIN		5236890						
ANR	5236970	Symbol	* pad		5236890						
ANR	5236971	Symbol	* sz		5236890						
ANR	5236972	DeclStmt									
ANR	5236973	Decl							char	char * *	__consts
ANR	5236974	Function	r_str_const_at	2964:6:61804:62380							
ANR	5236975	FunctionDef	"r_str_const_at (char * * * consts , const char * ptr)"		5236974	0					
ANR	5236976	CompoundStatement		2964:66:61864:62380	5236974	0					
ANR	5236977	IfStatement	if ( ! consts )		5236974	0					
ANR	5236978	Condition	! consts	2965:5:61871:61877	5236974	0	True				
ANR	5236979	UnaryOperationExpression	! consts		5236974	0					
ANR	5236980	UnaryOperator	!		5236974	0					
ANR	5236981	Identifier	consts		5236974	1					
ANR	5236982	CompoundStatement		2:14:15:15	5236974	1					
ANR	5236983	ExpressionStatement	consts = & __consts	2966:2:61884:61902	5236974	0	True				
ANR	5236984	AssignmentExpression	consts = & __consts		5236974	0		=			
ANR	5236985	Identifier	consts		5236974	0					
ANR	5236986	UnaryOperationExpression	& __consts		5236974	1					
ANR	5236987	UnaryOperator	&		5236974	0					
ANR	5236988	Identifier	__consts		5236974	1					
ANR	5236989	IdentifierDeclStatement	int ctr = 0 ;	2968:1:61908:61919	5236974	1	True				
ANR	5236990	IdentifierDecl	ctr = 0		5236974	0					
ANR	5236991	IdentifierDeclType	int		5236974	0					
ANR	5236992	Identifier	ctr		5236974	1					
ANR	5236993	AssignmentExpression	ctr = 0		5236974	2		=			
ANR	5236994	Identifier	ctr		5236974	0					
ANR	5236995	PrimaryExpression	0		5236974	1					
ANR	5236996	IfStatement	if ( ! ptr )		5236974	2					
ANR	5236997	Condition	! ptr	2969:5:61926:61929	5236974	0	True				
ANR	5236998	UnaryOperationExpression	! ptr		5236974	0					
ANR	5236999	UnaryOperator	!		5236974	0					
ANR	5237000	Identifier	ptr		5236974	1					
ANR	5237001	CompoundStatement		6:11:67:67	5236974	1					
ANR	5237002	ReturnStatement	return NULL ;	2970:2:61936:61947	5236974	0	True				
ANR	5237003	Identifier	NULL		5236974	0					
ANR	5237004	IfStatement	if ( * consts )		5236974	3					
ANR	5237005	Condition	* consts	2972:5:61957:61963	5236974	0	True				
ANR	5237006	UnaryOperationExpression	* consts		5236974	0					
ANR	5237007	UnaryOperator	*		5236974	0					
ANR	5237008	Identifier	consts		5236974	1					
ANR	5237009	CompoundStatement		17:2:228:286	5236974	1					
ANR	5237010	IdentifierDeclStatement	const char * p ;	2973:2:61970:61983	5236974	0	True				
ANR	5237011	IdentifierDecl	* p		5236974	0					
ANR	5237012	IdentifierDeclType	const char *		5236974	0					
ANR	5237013	Identifier	p		5236974	1					
ANR	5237014	WhileStatement	while ( ( p = ( * consts ) [ ctr ] ) )		5236974	1					
ANR	5237015	Condition	p = ( * consts ) [ ctr ]	2974:9:61994:62013	5236974	0	True				
ANR	5237016	AssignmentExpression	p = ( * consts ) [ ctr ]		5236974	0		=			
ANR	5237017	Identifier	p		5236974	0					
ANR	5237018	ArrayIndexing	( * consts ) [ ctr ]		5236974	1					
ANR	5237019	UnaryOperationExpression	* consts		5236974	0					
ANR	5237020	UnaryOperator	*		5236974	0					
ANR	5237021	Identifier	consts		5236974	1					
ANR	5237022	Identifier	ctr		5236974	1					
ANR	5237023	CompoundStatement		11:31:151:151	5236974	1					
ANR	5237024	IfStatement	"if ( ptr == p || ! strcmp ( ptr , p ) )"		5236974	0					
ANR	5237025	Condition	"ptr == p || ! strcmp ( ptr , p )"	2975:7:62025:62052	5236974	0	True				
ANR	5237026	OrExpression	"ptr == p || ! strcmp ( ptr , p )"		5236974	0		||			
ANR	5237027	EqualityExpression	ptr == p		5236974	0		==			
ANR	5237028	Identifier	ptr		5236974	0					
ANR	5237029	Identifier	p		5236974	1					
ANR	5237030	UnaryOperationExpression	"! strcmp ( ptr , p )"		5236974	1					
ANR	5237031	UnaryOperator	!		5236974	0					
ANR	5237032	CallExpression	"strcmp ( ptr , p )"		5236974	1					
ANR	5237033	Callee	strcmp		5236974	0					
ANR	5237034	Identifier	strcmp		5236974	0					
ANR	5237035	ArgumentList	ptr		5236974	1					
ANR	5237036	Argument	ptr		5236974	0					
ANR	5237037	Identifier	ptr		5236974	0					
ANR	5237038	Argument	p		5236974	1					
ANR	5237039	Identifier	p		5236974	0					
ANR	5237040	CompoundStatement		12:37:190:190	5236974	1					
ANR	5237041	ReturnStatement	return p ;	2976:4:62061:62069	5236974	0	True				
ANR	5237042	Identifier	p		5236974	0					
ANR	5237043	ExpressionStatement	ctr ++	2978:3:62079:62085	5236974	1	True				
ANR	5237044	PostIncDecOperationExpression	ctr ++		5236974	0					
ANR	5237045	Identifier	ctr		5236974	0					
ANR	5237046	IncDec	++		5236974	1					
ANR	5237047	IdentifierDeclStatement	"char * * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) ) ;"	2980:2:62093:62151	5236974	2	True				
ANR	5237048	IdentifierDecl	"* * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		5236974	0					
ANR	5237049	IdentifierDeclType	char * *		5236974	0					
ANR	5237050	Identifier	res		5236974	1					
ANR	5237051	AssignmentExpression	"* * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		5236974	2		=			
ANR	5237052	Identifier	res		5236974	0					
ANR	5237053	CallExpression	"realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		5236974	1					
ANR	5237054	Callee	realloc		5236974	0					
ANR	5237055	Identifier	realloc		5236974	0					
ANR	5237056	ArgumentList	* consts		5236974	1					
ANR	5237057	Argument	* consts		5236974	0					
ANR	5237058	UnaryOperationExpression	* consts		5236974	0					
ANR	5237059	UnaryOperator	*		5236974	0					
ANR	5237060	Identifier	consts		5236974	1					
ANR	5237061	Argument	( ctr + 2 ) * sizeof ( void * )		5236974	1					
ANR	5237062	MultiplicativeExpression	( ctr + 2 ) * sizeof ( void * )		5236974	0		*			
ANR	5237063	AdditiveExpression	ctr + 2		5236974	0		+			
ANR	5237064	Identifier	ctr		5236974	0					
ANR	5237065	PrimaryExpression	2		5236974	1					
ANR	5237066	SizeofExpression	sizeof ( void * )		5236974	1					
ANR	5237067	Sizeof	sizeof		5236974	0					
ANR	5237068	SizeofOperand	void *		5236974	1					
ANR	5237069	IfStatement	if ( ! res )		5236974	3					
ANR	5237070	Condition	! res	2981:6:62159:62162	5236974	0	True				
ANR	5237071	UnaryOperationExpression	! res		5236974	0					
ANR	5237072	UnaryOperator	!		5236974	0					
ANR	5237073	Identifier	res		5236974	1					
ANR	5237074	CompoundStatement		18:12:300:300	5236974	1					
ANR	5237075	ReturnStatement	return NULL ;	2982:3:62170:62181	5236974	0	True				
ANR	5237076	Identifier	NULL		5236974	0					
ANR	5237077	ExpressionStatement	* consts = res	2984:2:62189:62202	5236974	4	True				
ANR	5237078	AssignmentExpression	* consts = res		5236974	0		=			
ANR	5237079	UnaryOperationExpression	* consts		5236974	0					
ANR	5237080	UnaryOperator	*		5236974	0					
ANR	5237081	Identifier	consts		5236974	1					
ANR	5237082	Identifier	res		5236974	1					
ANR	5237083	ElseStatement	else		5236974	0					
ANR	5237084	CompoundStatement		22:8:347:347	5236974	0					
ANR	5237085	ExpressionStatement	* consts = malloc ( sizeof ( void * ) * 2 )	2986:2:62216:62253	5236974	0	True				
ANR	5237086	AssignmentExpression	* consts = malloc ( sizeof ( void * ) * 2 )		5236974	0		=			
ANR	5237087	UnaryOperationExpression	* consts		5236974	0					
ANR	5237088	UnaryOperator	*		5236974	0					
ANR	5237089	Identifier	consts		5236974	1					
ANR	5237090	CallExpression	malloc ( sizeof ( void * ) * 2 )		5236974	1					
ANR	5237091	Callee	malloc		5236974	0					
ANR	5237092	Identifier	malloc		5236974	0					
ANR	5237093	ArgumentList	sizeof ( void * ) * 2		5236974	1					
ANR	5237094	Argument	sizeof ( void * ) * 2		5236974	0					
ANR	5237095	MultiplicativeExpression	sizeof ( void * ) * 2		5236974	0		*			
ANR	5237096	SizeofExpression	sizeof ( void * )		5236974	0					
ANR	5237097	Sizeof	sizeof		5236974	0					
ANR	5237098	SizeofOperand	void *		5236974	1					
ANR	5237099	PrimaryExpression	2		5236974	1					
ANR	5237100	IfStatement	if ( ! * consts )		5236974	1					
ANR	5237101	Condition	! * consts	2987:6:62261:62268	5236974	0	True				
ANR	5237102	UnaryOperationExpression	! * consts		5236974	0					
ANR	5237103	UnaryOperator	!		5236974	0					
ANR	5237104	UnaryOperationExpression	* consts		5236974	1					
ANR	5237105	UnaryOperator	*		5236974	0					
ANR	5237106	Identifier	consts		5236974	1					
ANR	5237107	CompoundStatement		24:16:406:406	5236974	1					
ANR	5237108	ReturnStatement	return NULL ;	2988:3:62276:62287	5236974	0	True				
ANR	5237109	Identifier	NULL		5236974	0					
ANR	5237110	ExpressionStatement	( * consts ) [ ctr ] = strdup ( ptr )	2991:1:62297:62326	5236974	4	True				
ANR	5237111	AssignmentExpression	( * consts ) [ ctr ] = strdup ( ptr )		5236974	0		=			
ANR	5237112	ArrayIndexing	( * consts ) [ ctr ]		5236974	0					
ANR	5237113	UnaryOperationExpression	* consts		5236974	0					
ANR	5237114	UnaryOperator	*		5236974	0					
ANR	5237115	Identifier	consts		5236974	1					
ANR	5237116	Identifier	ctr		5236974	1					
ANR	5237117	CallExpression	strdup ( ptr )		5236974	1					
ANR	5237118	Callee	strdup		5236974	0					
ANR	5237119	Identifier	strdup		5236974	0					
ANR	5237120	ArgumentList	ptr		5236974	1					
ANR	5237121	Argument	ptr		5236974	0					
ANR	5237122	Identifier	ptr		5236974	0					
ANR	5237123	ExpressionStatement	( * consts ) [ ctr + 1 ] = NULL	2992:1:62329:62354	5236974	5	True				
ANR	5237124	AssignmentExpression	( * consts ) [ ctr + 1 ] = NULL		5236974	0		=			
ANR	5237125	ArrayIndexing	( * consts ) [ ctr + 1 ]		5236974	0					
ANR	5237126	UnaryOperationExpression	* consts		5236974	0					
ANR	5237127	UnaryOperator	*		5236974	0					
ANR	5237128	Identifier	consts		5236974	1					
ANR	5237129	AdditiveExpression	ctr + 1		5236974	1		+			
ANR	5237130	Identifier	ctr		5236974	0					
ANR	5237131	PrimaryExpression	1		5236974	1					
ANR	5237132	Identifier	NULL		5236974	1					
ANR	5237133	ReturnStatement	return ( * consts ) [ ctr ] ;	2993:1:62357:62378	5236974	6	True				
ANR	5237134	ArrayIndexing	( * consts ) [ ctr ]		5236974	0					
ANR	5237135	UnaryOperationExpression	* consts		5236974	0					
ANR	5237136	UnaryOperator	*		5236974	0					
ANR	5237137	Identifier	consts		5236974	1					
ANR	5237138	Identifier	ctr		5236974	1					
ANR	5237139	ReturnType	const char *		5236974	1					
ANR	5237140	Identifier	r_str_const_at		5236974	2					
ANR	5237141	ParameterList	"char * * * consts , const char * ptr"		5236974	3					
ANR	5237142	Parameter	char * * * consts	2964:33:61831:61844	5236974	0	True				
ANR	5237143	ParameterType	char * * *		5236974	0					
ANR	5237144	Identifier	consts		5236974	1					
ANR	5237145	Parameter	const char * ptr	2964:49:61847:61861	5236974	1	True				
ANR	5237146	ParameterType	const char *		5236974	0					
ANR	5237147	Identifier	ptr		5236974	1					
ANR	5237148	CFGEntryNode	ENTRY		5236974		True				
ANR	5237149	CFGExitNode	EXIT		5236974		True				
ANR	5237150	Symbol	ctr		5236974						
ANR	5237151	Symbol	strcmp		5236974						
ANR	5237152	Symbol	res		5236974						
ANR	5237153	Symbol	malloc		5236974						
ANR	5237154	Symbol	NULL		5236974						
ANR	5237155	Symbol	realloc		5236974						
ANR	5237156	Symbol	* * consts		5236974						
ANR	5237157	Symbol	consts		5236974						
ANR	5237158	Symbol	ptr		5236974						
ANR	5237159	Symbol	p		5236974						
ANR	5237160	Symbol	* ctr		5236974						
ANR	5237161	Symbol	strdup		5236974						
ANR	5237162	Symbol	& __consts		5236974						
ANR	5237163	Symbol	* consts		5236974						
ANR	5237164	Function	r_str_const	2996:6:62389:62504							
ANR	5237165	FunctionDef	r_str_const (const char * ptr)		5237164	0					
ANR	5237166	CompoundStatement		2996:47:62430:62504	5237164	0					
ANR	5237167	IfStatement	if ( ! ptr )		5237164	0					
ANR	5237168	Condition	! ptr	2997:5:62437:62440	5237164	0	True				
ANR	5237169	UnaryOperationExpression	! ptr		5237164	0					
ANR	5237170	UnaryOperator	!		5237164	0					
ANR	5237171	Identifier	ptr		5237164	1					
ANR	5237172	CompoundStatement		2:11:12:12	5237164	1					
ANR	5237173	ReturnStatement	return NULL ;	2998:2:62447:62458	5237164	0	True				
ANR	5237174	Identifier	NULL		5237164	0					
ANR	5237175	ReturnStatement	"return r_str_const_at ( & __consts , ptr ) ;"	3000:1:62464:62502	5237164	1	True				
ANR	5237176	CallExpression	"r_str_const_at ( & __consts , ptr )"		5237164	0					
ANR	5237177	Callee	r_str_const_at		5237164	0					
ANR	5237178	Identifier	r_str_const_at		5237164	0					
ANR	5237179	ArgumentList	& __consts		5237164	1					
ANR	5237180	Argument	& __consts		5237164	0					
ANR	5237181	UnaryOperationExpression	& __consts		5237164	0					
ANR	5237182	UnaryOperator	&		5237164	0					
ANR	5237183	Identifier	__consts		5237164	1					
ANR	5237184	Argument	ptr		5237164	1					
ANR	5237185	Identifier	ptr		5237164	0					
ANR	5237186	ReturnType	const char *		5237164	1					
ANR	5237187	Identifier	r_str_const		5237164	2					
ANR	5237188	ParameterList	const char * ptr		5237164	3					
ANR	5237189	Parameter	const char * ptr	2996:30:62413:62427	5237164	0	True				
ANR	5237190	ParameterType	const char *		5237164	0					
ANR	5237191	Identifier	ptr		5237164	1					
ANR	5237192	CFGEntryNode	ENTRY		5237164		True				
ANR	5237193	CFGExitNode	EXIT		5237164		True				
ANR	5237194	Symbol	NULL		5237164						
ANR	5237195	Symbol	r_str_const_at		5237164						
ANR	5237196	Symbol	& __consts		5237164						
ANR	5237197	Symbol	ptr		5237164						
ANR	5237198	Function	r_str_const_free	3003:0:62507:62704							
ANR	5237199	FunctionDef	r_str_const_free (char * * * consts)		5237198	0					
ANR	5237200	CompoundStatement		3003:44:62551:62704	5237198	0					
ANR	5237201	IdentifierDeclStatement	int i ;	3004:1:62554:62559	5237198	0	True				
ANR	5237202	IdentifierDecl	i		5237198	0					
ANR	5237203	IdentifierDeclType	int		5237198	0					
ANR	5237204	Identifier	i		5237198	1					
ANR	5237205	IfStatement	if ( ! consts )		5237198	1					
ANR	5237206	Condition	! consts	3005:5:62566:62572	5237198	0	True				
ANR	5237207	UnaryOperationExpression	! consts		5237198	0					
ANR	5237208	UnaryOperator	!		5237198	0					
ANR	5237209	Identifier	consts		5237198	1					
ANR	5237210	CompoundStatement		3:14:23:23	5237198	1					
ANR	5237211	ExpressionStatement	consts = & __consts	3006:2:62579:62597	5237198	0	True				
ANR	5237212	AssignmentExpression	consts = & __consts		5237198	0		=			
ANR	5237213	Identifier	consts		5237198	0					
ANR	5237214	UnaryOperationExpression	& __consts		5237198	1					
ANR	5237215	UnaryOperator	&		5237198	0					
ANR	5237216	Identifier	__consts		5237198	1					
ANR	5237217	IfStatement	if ( * consts )		5237198	2					
ANR	5237218	Condition	* consts	3008:5:62607:62613	5237198	0	True				
ANR	5237219	UnaryOperationExpression	* consts		5237198	0					
ANR	5237220	UnaryOperator	*		5237198	0					
ANR	5237221	Identifier	consts		5237198	1					
ANR	5237222	CompoundStatement		6:14:64:64	5237198	1					
ANR	5237223	ForStatement	for ( i = 0 ; ( * consts ) [ i ] ; i ++ )		5237198	0					
ANR	5237224	ForInit	i = 0 ;	3009:7:62625:62630	5237198	0	True				
ANR	5237225	AssignmentExpression	i = 0		5237198	0		=			
ANR	5237226	Identifier	i		5237198	0					
ANR	5237227	PrimaryExpression	0		5237198	1					
ANR	5237228	Condition	( * consts ) [ i ]	3009:14:62632:62643	5237198	1	True				
ANR	5237229	ArrayIndexing	( * consts ) [ i ]		5237198	0					
ANR	5237230	UnaryOperationExpression	* consts		5237198	0					
ANR	5237231	UnaryOperator	*		5237198	0					
ANR	5237232	Identifier	consts		5237198	1					
ANR	5237233	Identifier	i		5237198	1					
ANR	5237234	PostIncDecOperationExpression	i ++	3009:28:62646:62648	5237198	2	True				
ANR	5237235	Identifier	i		5237198	0					
ANR	5237236	IncDec	++		5237198	1					
ANR	5237237	CompoundStatement		7:33:99:99	5237198	3					
ANR	5237238	ExpressionStatement	free ( ( * consts ) [ i ] )	3010:3:62656:62675	5237198	0	True				
ANR	5237239	CallExpression	free ( ( * consts ) [ i ] )		5237198	0					
ANR	5237240	Callee	free		5237198	0					
ANR	5237241	Identifier	free		5237198	0					
ANR	5237242	ArgumentList	( * consts ) [ i ]		5237198	1					
ANR	5237243	Argument	( * consts ) [ i ]		5237198	0					
ANR	5237244	ArrayIndexing	( * consts ) [ i ]		5237198	0					
ANR	5237245	UnaryOperationExpression	* consts		5237198	0					
ANR	5237246	UnaryOperator	*		5237198	0					
ANR	5237247	Identifier	consts		5237198	1					
ANR	5237248	Identifier	i		5237198	1					
ANR	5237249	ExpressionStatement	R_FREE ( * consts )	3012:2:62683:62699	5237198	1	True				
ANR	5237250	CallExpression	R_FREE ( * consts )		5237198	0					
ANR	5237251	Callee	R_FREE		5237198	0					
ANR	5237252	Identifier	R_FREE		5237198	0					
ANR	5237253	ArgumentList	* consts		5237198	1					
ANR	5237254	Argument	* consts		5237198	0					
ANR	5237255	UnaryOperationExpression	* consts		5237198	0					
ANR	5237256	UnaryOperator	*		5237198	0					
ANR	5237257	Identifier	consts		5237198	1					
ANR	5237258	ReturnType	R_API void		5237198	1					
ANR	5237259	Identifier	r_str_const_free		5237198	2					
ANR	5237260	ParameterList	char * * * consts		5237198	3					
ANR	5237261	Parameter	char * * * consts	3003:28:62535:62548	5237198	0	True				
ANR	5237262	ParameterType	char * * *		5237198	0					
ANR	5237263	Identifier	consts		5237198	1					
ANR	5237264	CFGEntryNode	ENTRY		5237198		True				
ANR	5237265	CFGExitNode	EXIT		5237198		True				
ANR	5237266	Symbol	* i		5237198						
ANR	5237267	Symbol	i		5237198						
ANR	5237268	Symbol	& __consts		5237198						
ANR	5237269	Symbol	* consts		5237198						
ANR	5237270	Symbol	* * consts		5237198						
ANR	5237271	Symbol	consts		5237198						
ANR	5237272	Function	r_str_between	3016:0:62707:63062							
ANR	5237273	FunctionDef	"r_str_between (const char * cmt , const char * prefix , const char * suffix)"		5237272	0					
ANR	5237274	CompoundStatement		3016:83:62790:63062	5237272	0					
ANR	5237275	IdentifierDeclStatement	"char * c0 , * c1 ;"	3017:1:62793:62806	5237272	0	True				
ANR	5237276	IdentifierDecl	* c0		5237272	0					
ANR	5237277	IdentifierDeclType	char *		5237272	0					
ANR	5237278	Identifier	c0		5237272	1					
ANR	5237279	IdentifierDecl	* c1		5237272	1					
ANR	5237280	IdentifierDeclType	char *		5237272	0					
ANR	5237281	Identifier	c1		5237272	1					
ANR	5237282	IfStatement	if ( ! cmt || ! prefix || ! suffix || ! * cmt )		5237272	1					
ANR	5237283	Condition	! cmt || ! prefix || ! suffix || ! * cmt	3018:5:62813:62847	5237272	0	True				
ANR	5237284	OrExpression	! cmt || ! prefix || ! suffix || ! * cmt		5237272	0		||			
ANR	5237285	UnaryOperationExpression	! cmt		5237272	0					
ANR	5237286	UnaryOperator	!		5237272	0					
ANR	5237287	Identifier	cmt		5237272	1					
ANR	5237288	OrExpression	! prefix || ! suffix || ! * cmt		5237272	1		||			
ANR	5237289	UnaryOperationExpression	! prefix		5237272	0					
ANR	5237290	UnaryOperator	!		5237272	0					
ANR	5237291	Identifier	prefix		5237272	1					
ANR	5237292	OrExpression	! suffix || ! * cmt		5237272	1		||			
ANR	5237293	UnaryOperationExpression	! suffix		5237272	0					
ANR	5237294	UnaryOperator	!		5237272	0					
ANR	5237295	Identifier	suffix		5237272	1					
ANR	5237296	UnaryOperationExpression	! * cmt		5237272	1					
ANR	5237297	UnaryOperator	!		5237272	0					
ANR	5237298	UnaryOperationExpression	* cmt		5237272	1					
ANR	5237299	UnaryOperator	*		5237272	0					
ANR	5237300	Identifier	cmt		5237272	1					
ANR	5237301	CompoundStatement		3:42:59:59	5237272	1					
ANR	5237302	ReturnStatement	return NULL ;	3019:2:62854:62865	5237272	0	True				
ANR	5237303	Identifier	NULL		5237272	0					
ANR	5237304	ExpressionStatement	"c0 = strstr ( cmt , prefix )"	3021:1:62871:62896	5237272	2	True				
ANR	5237305	AssignmentExpression	"c0 = strstr ( cmt , prefix )"		5237272	0		=			
ANR	5237306	Identifier	c0		5237272	0					
ANR	5237307	CallExpression	"strstr ( cmt , prefix )"		5237272	1					
ANR	5237308	Callee	strstr		5237272	0					
ANR	5237309	Identifier	strstr		5237272	0					
ANR	5237310	ArgumentList	cmt		5237272	1					
ANR	5237311	Argument	cmt		5237272	0					
ANR	5237312	Identifier	cmt		5237272	0					
ANR	5237313	Argument	prefix		5237272	1					
ANR	5237314	Identifier	prefix		5237272	0					
ANR	5237315	IfStatement	if ( c0 )		5237272	3					
ANR	5237316	Condition	c0	3022:5:62903:62904	5237272	0	True				
ANR	5237317	Identifier	c0		5237272	0					
ANR	5237318	CompoundStatement		7:9:116:116	5237272	1					
ANR	5237319	ExpressionStatement	"c1 = strstr ( c0 + strlen ( prefix ) , suffix )"	3023:2:62911:62953	5237272	0	True				
ANR	5237320	AssignmentExpression	"c1 = strstr ( c0 + strlen ( prefix ) , suffix )"		5237272	0		=			
ANR	5237321	Identifier	c1		5237272	0					
ANR	5237322	CallExpression	"strstr ( c0 + strlen ( prefix ) , suffix )"		5237272	1					
ANR	5237323	Callee	strstr		5237272	0					
ANR	5237324	Identifier	strstr		5237272	0					
ANR	5237325	ArgumentList	c0 + strlen ( prefix )		5237272	1					
ANR	5237326	Argument	c0 + strlen ( prefix )		5237272	0					
ANR	5237327	AdditiveExpression	c0 + strlen ( prefix )		5237272	0		+			
ANR	5237328	Identifier	c0		5237272	0					
ANR	5237329	CallExpression	strlen ( prefix )		5237272	1					
ANR	5237330	Callee	strlen		5237272	0					
ANR	5237331	Identifier	strlen		5237272	0					
ANR	5237332	ArgumentList	prefix		5237272	1					
ANR	5237333	Argument	prefix		5237272	0					
ANR	5237334	Identifier	prefix		5237272	0					
ANR	5237335	Argument	suffix		5237272	1					
ANR	5237336	Identifier	suffix		5237272	0					
ANR	5237337	IfStatement	if ( c1 )		5237272	1					
ANR	5237338	Condition	c1	3024:6:62961:62962	5237272	0	True				
ANR	5237339	Identifier	c1		5237272	0					
ANR	5237340	CompoundStatement		9:10:174:174	5237272	1					
ANR	5237341	ReturnStatement	"return r_str_ndup ( c0 + strlen ( prefix ) , ( c1 - c0 - strlen ( prefix ) ) ) ;"	3025:3:62970:63039	5237272	0	True				
ANR	5237342	CallExpression	"r_str_ndup ( c0 + strlen ( prefix ) , ( c1 - c0 - strlen ( prefix ) ) )"		5237272	0					
ANR	5237343	Callee	r_str_ndup		5237272	0					
ANR	5237344	Identifier	r_str_ndup		5237272	0					
ANR	5237345	ArgumentList	c0 + strlen ( prefix )		5237272	1					
ANR	5237346	Argument	c0 + strlen ( prefix )		5237272	0					
ANR	5237347	AdditiveExpression	c0 + strlen ( prefix )		5237272	0		+			
ANR	5237348	Identifier	c0		5237272	0					
ANR	5237349	CallExpression	strlen ( prefix )		5237272	1					
ANR	5237350	Callee	strlen		5237272	0					
ANR	5237351	Identifier	strlen		5237272	0					
ANR	5237352	ArgumentList	prefix		5237272	1					
ANR	5237353	Argument	prefix		5237272	0					
ANR	5237354	Identifier	prefix		5237272	0					
ANR	5237355	Argument	c1 - c0 - strlen ( prefix )		5237272	1					
ANR	5237356	AdditiveExpression	c1 - c0 - strlen ( prefix )		5237272	0		-			
ANR	5237357	Identifier	c1		5237272	0					
ANR	5237358	AdditiveExpression	c0 - strlen ( prefix )		5237272	1		-			
ANR	5237359	Identifier	c0		5237272	0					
ANR	5237360	CallExpression	strlen ( prefix )		5237272	1					
ANR	5237361	Callee	strlen		5237272	0					
ANR	5237362	Identifier	strlen		5237272	0					
ANR	5237363	ArgumentList	prefix		5237272	1					
ANR	5237364	Argument	prefix		5237272	0					
ANR	5237365	Identifier	prefix		5237272	0					
ANR	5237366	ReturnStatement	return NULL ;	3028:1:63049:63060	5237272	4	True				
ANR	5237367	Identifier	NULL		5237272	0					
ANR	5237368	ReturnType	R_API char *		5237272	1					
ANR	5237369	Identifier	r_str_between		5237272	2					
ANR	5237370	ParameterList	"const char * cmt , const char * prefix , const char * suffix"		5237272	3					
ANR	5237371	Parameter	const char * cmt	3016:26:62733:62747	5237272	0	True				
ANR	5237372	ParameterType	const char *		5237272	0					
ANR	5237373	Identifier	cmt		5237272	1					
ANR	5237374	Parameter	const char * prefix	3016:43:62750:62767	5237272	1	True				
ANR	5237375	ParameterType	const char *		5237272	0					
ANR	5237376	Identifier	prefix		5237272	1					
ANR	5237377	Parameter	const char * suffix	3016:63:62770:62787	5237272	2	True				
ANR	5237378	ParameterType	const char *		5237272	0					
ANR	5237379	Identifier	suffix		5237272	1					
ANR	5237380	CFGEntryNode	ENTRY		5237272		True				
ANR	5237381	CFGExitNode	EXIT		5237272		True				
ANR	5237382	Symbol	strlen		5237272						
ANR	5237383	Symbol	NULL		5237272						
ANR	5237384	Symbol	strstr		5237272						
ANR	5237385	Symbol	prefix		5237272						
ANR	5237386	Symbol	r_str_ndup		5237272						
ANR	5237387	Symbol	cmt		5237272						
ANR	5237388	Symbol	* cmt		5237272						
ANR	5237389	Symbol	suffix		5237272						
ANR	5237390	Symbol	c0		5237272						
ANR	5237391	Symbol	c1		5237272						
ANR	5237392	Function	r_str_startswith	3031:0:63065:63267							
ANR	5237393	FunctionDef	"r_str_startswith (const char * str , const char * needle)"		5237392	0					
ANR	5237394	CompoundStatement		3031:65:63130:63267	5237392	0					
ANR	5237395	ExpressionStatement	"r_return_val_if_fail ( str && needle , false )"	3032:1:63133:63176	5237392	0	True				
ANR	5237396	CallExpression	"r_return_val_if_fail ( str && needle , false )"		5237392	0					
ANR	5237397	Callee	r_return_val_if_fail		5237392	0					
ANR	5237398	Identifier	r_return_val_if_fail		5237392	0					
ANR	5237399	ArgumentList	str && needle		5237392	1					
ANR	5237400	Argument	str && needle		5237392	0					
ANR	5237401	AndExpression	str && needle		5237392	0		&&			
ANR	5237402	Identifier	str		5237392	0					
ANR	5237403	Identifier	needle		5237392	1					
ANR	5237404	Argument	false		5237392	1					
ANR	5237405	Identifier	false		5237392	0					
ANR	5237406	IfStatement	if ( str == needle )		5237392	1					
ANR	5237407	Condition	str == needle	3033:5:63183:63195	5237392	0	True				
ANR	5237408	EqualityExpression	str == needle		5237392	0		==			
ANR	5237409	Identifier	str		5237392	0					
ANR	5237410	Identifier	needle		5237392	1					
ANR	5237411	CompoundStatement		3:20:67:67	5237392	1					
ANR	5237412	ReturnStatement	return true ;	3034:2:63202:63213	5237392	0	True				
ANR	5237413	Identifier	true		5237392	0					
ANR	5237414	ReturnStatement	"return ! strncmp ( str , needle , strlen ( needle ) ) ;"	3036:1:63219:63265	5237392	2	True				
ANR	5237415	UnaryOperationExpression	"! strncmp ( str , needle , strlen ( needle ) )"		5237392	0					
ANR	5237416	UnaryOperator	!		5237392	0					
ANR	5237417	CallExpression	"strncmp ( str , needle , strlen ( needle ) )"		5237392	1					
ANR	5237418	Callee	strncmp		5237392	0					
ANR	5237419	Identifier	strncmp		5237392	0					
ANR	5237420	ArgumentList	str		5237392	1					
ANR	5237421	Argument	str		5237392	0					
ANR	5237422	Identifier	str		5237392	0					
ANR	5237423	Argument	needle		5237392	1					
ANR	5237424	Identifier	needle		5237392	0					
ANR	5237425	Argument	strlen ( needle )		5237392	2					
ANR	5237426	CallExpression	strlen ( needle )		5237392	0					
ANR	5237427	Callee	strlen		5237392	0					
ANR	5237428	Identifier	strlen		5237392	0					
ANR	5237429	ArgumentList	needle		5237392	1					
ANR	5237430	Argument	needle		5237392	0					
ANR	5237431	Identifier	needle		5237392	0					
ANR	5237432	ReturnType	R_API bool		5237392	1					
ANR	5237433	Identifier	r_str_startswith		5237392	2					
ANR	5237434	ParameterList	"const char * str , const char * needle"		5237392	3					
ANR	5237435	Parameter	const char * str	3031:28:63093:63107	5237392	0	True				
ANR	5237436	ParameterType	const char *		5237392	0					
ANR	5237437	Identifier	str		5237392	1					
ANR	5237438	Parameter	const char * needle	3031:45:63110:63127	5237392	1	True				
ANR	5237439	ParameterType	const char *		5237392	0					
ANR	5237440	Identifier	needle		5237392	1					
ANR	5237441	CFGEntryNode	ENTRY		5237392		True				
ANR	5237442	CFGExitNode	EXIT		5237392		True				
ANR	5237443	Symbol	str		5237392						
ANR	5237444	Symbol	strncmp		5237392						
ANR	5237445	Symbol	strlen		5237392						
ANR	5237446	Symbol	false		5237392						
ANR	5237447	Symbol	true		5237392						
ANR	5237448	Symbol	needle		5237392						
ANR	5237449	Function	r_str_endswith	3039:0:63270:63575							
ANR	5237450	FunctionDef	"r_str_endswith (const char * str , const char * needle)"		5237449	0					
ANR	5237451	CompoundStatement		3039:63:63333:63575	5237449	0					
ANR	5237452	ExpressionStatement	"r_return_val_if_fail ( str && needle , false )"	3040:1:63336:63379	5237449	0	True				
ANR	5237453	CallExpression	"r_return_val_if_fail ( str && needle , false )"		5237449	0					
ANR	5237454	Callee	r_return_val_if_fail		5237449	0					
ANR	5237455	Identifier	r_return_val_if_fail		5237449	0					
ANR	5237456	ArgumentList	str && needle		5237449	1					
ANR	5237457	Argument	str && needle		5237449	0					
ANR	5237458	AndExpression	str && needle		5237449	0		&&			
ANR	5237459	Identifier	str		5237449	0					
ANR	5237460	Identifier	needle		5237449	1					
ANR	5237461	Argument	false		5237449	1					
ANR	5237462	Identifier	false		5237449	0					
ANR	5237463	IfStatement	if ( ! * needle )		5237449	1					
ANR	5237464	Condition	! * needle	3041:5:63386:63393	5237449	0	True				
ANR	5237465	UnaryOperationExpression	! * needle		5237449	0					
ANR	5237466	UnaryOperator	!		5237449	0					
ANR	5237467	UnaryOperationExpression	* needle		5237449	1					
ANR	5237468	UnaryOperator	*		5237449	0					
ANR	5237469	Identifier	needle		5237449	1					
ANR	5237470	CompoundStatement		3:15:62:62	5237449	1					
ANR	5237471	ReturnStatement	return true ;	3042:2:63400:63411	5237449	0	True				
ANR	5237472	Identifier	true		5237449	0					
ANR	5237473	IdentifierDeclStatement	int slen = strlen ( str ) ;	3044:1:63417:63440	5237449	2	True				
ANR	5237474	IdentifierDecl	slen = strlen ( str )		5237449	0					
ANR	5237475	IdentifierDeclType	int		5237449	0					
ANR	5237476	Identifier	slen		5237449	1					
ANR	5237477	AssignmentExpression	slen = strlen ( str )		5237449	2		=			
ANR	5237478	Identifier	slen		5237449	0					
ANR	5237479	CallExpression	strlen ( str )		5237449	1					
ANR	5237480	Callee	strlen		5237449	0					
ANR	5237481	Identifier	strlen		5237449	0					
ANR	5237482	ArgumentList	str		5237449	1					
ANR	5237483	Argument	str		5237449	0					
ANR	5237484	Identifier	str		5237449	0					
ANR	5237485	IdentifierDeclStatement	int nlen = strlen ( needle ) ;	3045:1:63443:63469	5237449	3	True				
ANR	5237486	IdentifierDecl	nlen = strlen ( needle )		5237449	0					
ANR	5237487	IdentifierDeclType	int		5237449	0					
ANR	5237488	Identifier	nlen		5237449	1					
ANR	5237489	AssignmentExpression	nlen = strlen ( needle )		5237449	2		=			
ANR	5237490	Identifier	nlen		5237449	0					
ANR	5237491	CallExpression	strlen ( needle )		5237449	1					
ANR	5237492	Callee	strlen		5237449	0					
ANR	5237493	Identifier	strlen		5237449	0					
ANR	5237494	ArgumentList	needle		5237449	1					
ANR	5237495	Argument	needle		5237449	0					
ANR	5237496	Identifier	needle		5237449	0					
ANR	5237497	IfStatement	if ( ! slen || ! nlen || slen < nlen )		5237449	4					
ANR	5237498	Condition	! slen || ! nlen || slen < nlen	3046:5:63476:63504	5237449	0	True				
ANR	5237499	OrExpression	! slen || ! nlen || slen < nlen		5237449	0		||			
ANR	5237500	UnaryOperationExpression	! slen		5237449	0					
ANR	5237501	UnaryOperator	!		5237449	0					
ANR	5237502	Identifier	slen		5237449	1					
ANR	5237503	OrExpression	! nlen || slen < nlen		5237449	1		||			
ANR	5237504	UnaryOperationExpression	! nlen		5237449	0					
ANR	5237505	UnaryOperator	!		5237449	0					
ANR	5237506	Identifier	nlen		5237449	1					
ANR	5237507	RelationalExpression	slen < nlen		5237449	1		<			
ANR	5237508	Identifier	slen		5237449	0					
ANR	5237509	Identifier	nlen		5237449	1					
ANR	5237510	CompoundStatement		8:36:173:173	5237449	1					
ANR	5237511	ReturnStatement	return false ;	3047:2:63511:63523	5237449	0	True				
ANR	5237512	Identifier	false		5237449	0					
ANR	5237513	ReturnStatement	"return ! strcmp ( str + ( slen - nlen ) , needle ) ;"	3049:1:63529:63573	5237449	5	True				
ANR	5237514	UnaryOperationExpression	"! strcmp ( str + ( slen - nlen ) , needle )"		5237449	0					
ANR	5237515	UnaryOperator	!		5237449	0					
ANR	5237516	CallExpression	"strcmp ( str + ( slen - nlen ) , needle )"		5237449	1					
ANR	5237517	Callee	strcmp		5237449	0					
ANR	5237518	Identifier	strcmp		5237449	0					
ANR	5237519	ArgumentList	str + ( slen - nlen )		5237449	1					
ANR	5237520	Argument	str + ( slen - nlen )		5237449	0					
ANR	5237521	AdditiveExpression	str + ( slen - nlen )		5237449	0		+			
ANR	5237522	Identifier	str		5237449	0					
ANR	5237523	AdditiveExpression	slen - nlen		5237449	1		-			
ANR	5237524	Identifier	slen		5237449	0					
ANR	5237525	Identifier	nlen		5237449	1					
ANR	5237526	Argument	needle		5237449	1					
ANR	5237527	Identifier	needle		5237449	0					
ANR	5237528	ReturnType	R_API bool		5237449	1					
ANR	5237529	Identifier	r_str_endswith		5237449	2					
ANR	5237530	ParameterList	"const char * str , const char * needle"		5237449	3					
ANR	5237531	Parameter	const char * str	3039:26:63296:63310	5237449	0	True				
ANR	5237532	ParameterType	const char *		5237449	0					
ANR	5237533	Identifier	str		5237449	1					
ANR	5237534	Parameter	const char * needle	3039:43:63313:63330	5237449	1	True				
ANR	5237535	ParameterType	const char *		5237449	0					
ANR	5237536	Identifier	needle		5237449	1					
ANR	5237537	CFGEntryNode	ENTRY		5237449		True				
ANR	5237538	CFGExitNode	EXIT		5237449		True				
ANR	5237539	Symbol	str		5237449						
ANR	5237540	Symbol	strcmp		5237449						
ANR	5237541	Symbol	strlen		5237449						
ANR	5237542	Symbol	nlen		5237449						
ANR	5237543	Symbol	slen		5237449						
ANR	5237544	Symbol	false		5237449						
ANR	5237545	Symbol	true		5237449						
ANR	5237546	Symbol	* needle		5237449						
ANR	5237547	Symbol	needle		5237449						
ANR	5237548	Function	r_str_split_list	3053:0:63653:64063							
ANR	5237549	FunctionDef	"r_str_split_list (char * str , const char * c , int n)"		5237548	0					
ANR	5237550	CompoundStatement		3053:64:63717:64063	5237548	0					
ANR	5237551	ExpressionStatement	"r_return_val_if_fail ( str && c , NULL )"	3054:1:63720:63757	5237548	0	True				
ANR	5237552	CallExpression	"r_return_val_if_fail ( str && c , NULL )"		5237548	0					
ANR	5237553	Callee	r_return_val_if_fail		5237548	0					
ANR	5237554	Identifier	r_return_val_if_fail		5237548	0					
ANR	5237555	ArgumentList	str && c		5237548	1					
ANR	5237556	Argument	str && c		5237548	0					
ANR	5237557	AndExpression	str && c		5237548	0		&&			
ANR	5237558	Identifier	str		5237548	0					
ANR	5237559	Identifier	c		5237548	1					
ANR	5237560	Argument	NULL		5237548	1					
ANR	5237561	Identifier	NULL		5237548	0					
ANR	5237562	IdentifierDeclStatement	RList * lst = r_list_newf ( NULL ) ;	3055:1:63760:63791	5237548	1	True				
ANR	5237563	IdentifierDecl	* lst = r_list_newf ( NULL )		5237548	0					
ANR	5237564	IdentifierDeclType	RList *		5237548	0					
ANR	5237565	Identifier	lst		5237548	1					
ANR	5237566	AssignmentExpression	* lst = r_list_newf ( NULL )		5237548	2		=			
ANR	5237567	Identifier	lst		5237548	0					
ANR	5237568	CallExpression	r_list_newf ( NULL )		5237548	1					
ANR	5237569	Callee	r_list_newf		5237548	0					
ANR	5237570	Identifier	r_list_newf		5237548	0					
ANR	5237571	ArgumentList	NULL		5237548	1					
ANR	5237572	Argument	NULL		5237548	0					
ANR	5237573	Identifier	NULL		5237548	0					
ANR	5237574	IdentifierDeclStatement	char * aux = str ;	3056:1:63794:63809	5237548	2	True				
ANR	5237575	IdentifierDecl	* aux = str		5237548	0					
ANR	5237576	IdentifierDeclType	char *		5237548	0					
ANR	5237577	Identifier	aux		5237548	1					
ANR	5237578	AssignmentExpression	* aux = str		5237548	2		=			
ANR	5237579	Identifier	str		5237548	0					
ANR	5237580	Identifier	str		5237548	1					
ANR	5237581	IdentifierDeclStatement	int i = 0 ;	3057:1:63812:63821	5237548	3	True				
ANR	5237582	IdentifierDecl	i = 0		5237548	0					
ANR	5237583	IdentifierDeclType	int		5237548	0					
ANR	5237584	Identifier	i		5237548	1					
ANR	5237585	AssignmentExpression	i = 0		5237548	2		=			
ANR	5237586	Identifier	i		5237548	0					
ANR	5237587	PrimaryExpression	0		5237548	1					
ANR	5237588	IdentifierDeclStatement	char * e = aux ;	3058:1:63824:63838	5237548	4	True				
ANR	5237589	IdentifierDecl	* e = aux		5237548	0					
ANR	5237590	IdentifierDeclType	char *		5237548	0					
ANR	5237591	Identifier	e		5237548	1					
ANR	5237592	AssignmentExpression	* e = aux		5237548	2		=			
ANR	5237593	Identifier	aux		5237548	0					
ANR	5237594	Identifier	aux		5237548	1					
ANR	5237595	ForStatement	for ( ; e ; )		5237548	5					
ANR	5237596	Condition	e	3059:7:63847:63847	5237548	0	True				
ANR	5237597	Identifier	e		5237548	0					
ANR	5237598	CompoundStatement		7:11:133:133	5237548	1					
ANR	5237599	ExpressionStatement	"e = strstr ( aux , c )"	3060:2:63855:63874	5237548	0	True				
ANR	5237600	AssignmentExpression	"e = strstr ( aux , c )"		5237548	0		=			
ANR	5237601	Identifier	e		5237548	0					
ANR	5237602	CallExpression	"strstr ( aux , c )"		5237548	1					
ANR	5237603	Callee	strstr		5237548	0					
ANR	5237604	Identifier	strstr		5237548	0					
ANR	5237605	ArgumentList	aux		5237548	1					
ANR	5237606	Argument	aux		5237548	0					
ANR	5237607	Identifier	aux		5237548	0					
ANR	5237608	Argument	c		5237548	1					
ANR	5237609	Identifier	c		5237548	0					
ANR	5237610	IfStatement	if ( n > 0 )		5237548	1					
ANR	5237611	Condition	n > 0	3061:6:63882:63886	5237548	0	True				
ANR	5237612	RelationalExpression	n > 0		5237548	0		>			
ANR	5237613	Identifier	n		5237548	0					
ANR	5237614	PrimaryExpression	0		5237548	1					
ANR	5237615	CompoundStatement		9:13:171:171	5237548	1					
ANR	5237616	IfStatement	if ( ++ i > n )		5237548	0					
ANR	5237617	Condition	++ i > n	3062:7:63898:63904	5237548	0	True				
ANR	5237618	RelationalExpression	++ i > n		5237548	0		>			
ANR	5237619	UnaryExpression	++ i		5237548	0					
ANR	5237620	IncDec	++		5237548	0					
ANR	5237621	Identifier	i		5237548	1					
ANR	5237622	Identifier	n		5237548	1					
ANR	5237623	CompoundStatement		10:16:189:189	5237548	1					
ANR	5237624	ExpressionStatement	"r_list_append ( lst , aux )"	3063:4:63913:63937	5237548	0	True				
ANR	5237625	CallExpression	"r_list_append ( lst , aux )"		5237548	0					
ANR	5237626	Callee	r_list_append		5237548	0					
ANR	5237627	Identifier	r_list_append		5237548	0					
ANR	5237628	ArgumentList	lst		5237548	1					
ANR	5237629	Argument	lst		5237548	0					
ANR	5237630	Identifier	lst		5237548	0					
ANR	5237631	Argument	aux		5237548	1					
ANR	5237632	Identifier	aux		5237548	0					
ANR	5237633	BreakStatement	break ;	3064:4:63943:63948	5237548	1	True				
ANR	5237634	IfStatement	if ( e )		5237548	2					
ANR	5237635	Condition	e	3067:6:63965:63965	5237548	0	True				
ANR	5237636	Identifier	e		5237548	0					
ANR	5237637	CompoundStatement		15:9:250:250	5237548	1					
ANR	5237638	ExpressionStatement	* e ++ = 0	3068:3:63973:63982	5237548	0	True				
ANR	5237639	AssignmentExpression	* e ++ = 0		5237548	0		=			
ANR	5237640	UnaryOperationExpression	* e ++		5237548	0					
ANR	5237641	UnaryOperator	*		5237548	0					
ANR	5237642	PostIncDecOperationExpression	e ++		5237548	1					
ANR	5237643	Identifier	e		5237548	0					
ANR	5237644	IncDec	++		5237548	1					
ANR	5237645	PrimaryExpression	0		5237548	1					
ANR	5237646	ExpressionStatement	r_str_trim ( aux )	3070:2:63990:64006	5237548	3	True				
ANR	5237647	CallExpression	r_str_trim ( aux )		5237548	0					
ANR	5237648	Callee	r_str_trim		5237548	0					
ANR	5237649	Identifier	r_str_trim		5237548	0					
ANR	5237650	ArgumentList	aux		5237548	1					
ANR	5237651	Argument	aux		5237548	0					
ANR	5237652	Identifier	aux		5237548	0					
ANR	5237653	ExpressionStatement	"r_list_append ( lst , aux )"	3071:2:64010:64034	5237548	4	True				
ANR	5237654	CallExpression	"r_list_append ( lst , aux )"		5237548	0					
ANR	5237655	Callee	r_list_append		5237548	0					
ANR	5237656	Identifier	r_list_append		5237548	0					
ANR	5237657	ArgumentList	lst		5237548	1					
ANR	5237658	Argument	lst		5237548	0					
ANR	5237659	Identifier	lst		5237548	0					
ANR	5237660	Argument	aux		5237548	1					
ANR	5237661	Identifier	aux		5237548	0					
ANR	5237662	ExpressionStatement	aux = e	3072:2:64038:64045	5237548	5	True				
ANR	5237663	AssignmentExpression	aux = e		5237548	0		=			
ANR	5237664	Identifier	aux		5237548	0					
ANR	5237665	Identifier	e		5237548	1					
ANR	5237666	ReturnStatement	return lst ;	3074:1:64051:64061	5237548	6	True				
ANR	5237667	Identifier	lst		5237548	0					
ANR	5237668	ReturnType	R_API RList *		5237548	1					
ANR	5237669	Identifier	r_str_split_list		5237548	2					
ANR	5237670	ParameterList	"char * str , const char * c , int n"		5237548	3					
ANR	5237671	Parameter	char * str	3053:30:63683:63691	5237548	0	True				
ANR	5237672	ParameterType	char *		5237548	0					
ANR	5237673	Identifier	str		5237548	1					
ANR	5237674	Parameter	const char * c	3053:41:63694:63706	5237548	1	True				
ANR	5237675	ParameterType	const char *		5237548	0					
ANR	5237676	Identifier	c		5237548	1					
ANR	5237677	Parameter	int n	3053:56:63709:63713	5237548	2	True				
ANR	5237678	ParameterType	int		5237548	0					
ANR	5237679	Identifier	n		5237548	1					
ANR	5237680	CFGEntryNode	ENTRY		5237548		True				
ANR	5237681	CFGExitNode	EXIT		5237548		True				
ANR	5237682	Symbol	str		5237548						
ANR	5237683	Symbol	c		5237548						
ANR	5237684	Symbol	NULL		5237548						
ANR	5237685	Symbol	r_list_newf		5237548						
ANR	5237686	Symbol	aux		5237548						
ANR	5237687	Symbol	e		5237548						
ANR	5237688	Symbol	strstr		5237548						
ANR	5237689	Symbol	i		5237548						
ANR	5237690	Symbol	lst		5237548						
ANR	5237691	Symbol	* e ++		5237548						
ANR	5237692	Symbol	n		5237548						
ANR	5237693	Function	r_str_split_duplist	3077:0:64066:64515							
ANR	5237694	FunctionDef	"r_str_split_duplist (const char * _str , const char * c)"		5237693	0					
ANR	5237695	CompoundStatement		3077:67:64133:64515	5237693	0					
ANR	5237696	ExpressionStatement	"r_return_val_if_fail ( _str && c , NULL )"	3078:1:64136:64174	5237693	0	True				
ANR	5237697	CallExpression	"r_return_val_if_fail ( _str && c , NULL )"		5237693	0					
ANR	5237698	Callee	r_return_val_if_fail		5237693	0					
ANR	5237699	Identifier	r_return_val_if_fail		5237693	0					
ANR	5237700	ArgumentList	_str && c		5237693	1					
ANR	5237701	Argument	_str && c		5237693	0					
ANR	5237702	AndExpression	_str && c		5237693	0		&&			
ANR	5237703	Identifier	_str		5237693	0					
ANR	5237704	Identifier	c		5237693	1					
ANR	5237705	Argument	NULL		5237693	1					
ANR	5237706	Identifier	NULL		5237693	0					
ANR	5237707	IdentifierDeclStatement	RList * lst = r_list_newf ( free ) ;	3079:1:64177:64208	5237693	1	True				
ANR	5237708	IdentifierDecl	* lst = r_list_newf ( free )		5237693	0					
ANR	5237709	IdentifierDeclType	RList *		5237693	0					
ANR	5237710	Identifier	lst		5237693	1					
ANR	5237711	AssignmentExpression	* lst = r_list_newf ( free )		5237693	2		=			
ANR	5237712	Identifier	lst		5237693	0					
ANR	5237713	CallExpression	r_list_newf ( free )		5237693	1					
ANR	5237714	Callee	r_list_newf		5237693	0					
ANR	5237715	Identifier	r_list_newf		5237693	0					
ANR	5237716	ArgumentList	free		5237693	1					
ANR	5237717	Argument	free		5237693	0					
ANR	5237718	Identifier	free		5237693	0					
ANR	5237719	IdentifierDeclStatement	char * str = strdup ( _str ) ;	3080:1:64211:64236	5237693	2	True				
ANR	5237720	IdentifierDecl	* str = strdup ( _str )		5237693	0					
ANR	5237721	IdentifierDeclType	char *		5237693	0					
ANR	5237722	Identifier	str		5237693	1					
ANR	5237723	AssignmentExpression	* str = strdup ( _str )		5237693	2		=			
ANR	5237724	Identifier	str		5237693	0					
ANR	5237725	CallExpression	strdup ( _str )		5237693	1					
ANR	5237726	Callee	strdup		5237693	0					
ANR	5237727	Identifier	strdup		5237693	0					
ANR	5237728	ArgumentList	_str		5237693	1					
ANR	5237729	Argument	_str		5237693	0					
ANR	5237730	Identifier	_str		5237693	0					
ANR	5237731	IdentifierDeclStatement	char * aux ;	3082:1:64240:64249	5237693	3	True				
ANR	5237732	IdentifierDecl	* aux		5237693	0					
ANR	5237733	IdentifierDeclType	char *		5237693	0					
ANR	5237734	Identifier	aux		5237693	1					
ANR	5237735	IdentifierDeclStatement	bool first_loop = true ;	3083:1:64252:64274	5237693	4	True				
ANR	5237736	IdentifierDecl	first_loop = true		5237693	0					
ANR	5237737	IdentifierDeclType	bool		5237693	0					
ANR	5237738	Identifier	first_loop		5237693	1					
ANR	5237739	AssignmentExpression	first_loop = true		5237693	2		=			
ANR	5237740	Identifier	true		5237693	0					
ANR	5237741	Identifier	true		5237693	1					
ANR	5237742	ForStatement	for ( ; ; )		5237693	5					
ANR	5237743	CompoundStatement		9:10:153:153	5237693	0					
ANR	5237744	IfStatement	if ( first_loop )		5237693	0					
ANR	5237745	Condition	first_loop	3086:6:64295:64304	5237693	0	True				
ANR	5237746	Identifier	first_loop		5237693	0					
ANR	5237747	CompoundStatement		10:18:173:173	5237693	1					
ANR	5237748	ExpressionStatement	"aux = strtok ( str , c )"	3087:3:64312:64333	5237693	0	True				
ANR	5237749	AssignmentExpression	"aux = strtok ( str , c )"		5237693	0		=			
ANR	5237750	Identifier	aux		5237693	0					
ANR	5237751	CallExpression	"strtok ( str , c )"		5237693	1					
ANR	5237752	Callee	strtok		5237693	0					
ANR	5237753	Identifier	strtok		5237693	0					
ANR	5237754	ArgumentList	str		5237693	1					
ANR	5237755	Argument	str		5237693	0					
ANR	5237756	Identifier	str		5237693	0					
ANR	5237757	Argument	c		5237693	1					
ANR	5237758	Identifier	c		5237693	0					
ANR	5237759	ExpressionStatement	first_loop = false	3088:3:64338:64356	5237693	1	True				
ANR	5237760	AssignmentExpression	first_loop = false		5237693	0		=			
ANR	5237761	Identifier	first_loop		5237693	0					
ANR	5237762	Identifier	false		5237693	1					
ANR	5237763	ElseStatement	else		5237693	0					
ANR	5237764	CompoundStatement		13:9:233:233	5237693	0					
ANR	5237765	ExpressionStatement	"aux = strtok ( NULL , c )"	3090:3:64372:64394	5237693	0	True				
ANR	5237766	AssignmentExpression	"aux = strtok ( NULL , c )"		5237693	0		=			
ANR	5237767	Identifier	aux		5237693	0					
ANR	5237768	CallExpression	"strtok ( NULL , c )"		5237693	1					
ANR	5237769	Callee	strtok		5237693	0					
ANR	5237770	Identifier	strtok		5237693	0					
ANR	5237771	ArgumentList	NULL		5237693	1					
ANR	5237772	Argument	NULL		5237693	0					
ANR	5237773	Identifier	NULL		5237693	0					
ANR	5237774	Argument	c		5237693	1					
ANR	5237775	Identifier	c		5237693	0					
ANR	5237776	IfStatement	if ( ! aux )		5237693	1					
ANR	5237777	Condition	! aux	3092:6:64406:64409	5237693	0	True				
ANR	5237778	UnaryOperationExpression	! aux		5237693	0					
ANR	5237779	UnaryOperator	!		5237693	0					
ANR	5237780	Identifier	aux		5237693	1					
ANR	5237781	CompoundStatement		16:12:278:278	5237693	1					
ANR	5237782	BreakStatement	break ;	3093:3:64417:64422	5237693	0	True				
ANR	5237783	ExpressionStatement	r_str_trim ( aux )	3095:2:64430:64446	5237693	2	True				
ANR	5237784	CallExpression	r_str_trim ( aux )		5237693	0					
ANR	5237785	Callee	r_str_trim		5237693	0					
ANR	5237786	Identifier	r_str_trim		5237693	0					
ANR	5237787	ArgumentList	aux		5237693	1					
ANR	5237788	Argument	aux		5237693	0					
ANR	5237789	Identifier	aux		5237693	0					
ANR	5237790	ExpressionStatement	"r_list_append ( lst , strdup ( aux ) )"	3096:2:64450:64483	5237693	3	True				
ANR	5237791	CallExpression	"r_list_append ( lst , strdup ( aux ) )"		5237693	0					
ANR	5237792	Callee	r_list_append		5237693	0					
ANR	5237793	Identifier	r_list_append		5237693	0					
ANR	5237794	ArgumentList	lst		5237693	1					
ANR	5237795	Argument	lst		5237693	0					
ANR	5237796	Identifier	lst		5237693	0					
ANR	5237797	Argument	strdup ( aux )		5237693	1					
ANR	5237798	CallExpression	strdup ( aux )		5237693	0					
ANR	5237799	Callee	strdup		5237693	0					
ANR	5237800	Identifier	strdup		5237693	0					
ANR	5237801	ArgumentList	aux		5237693	1					
ANR	5237802	Argument	aux		5237693	0					
ANR	5237803	Identifier	aux		5237693	0					
ANR	5237804	ExpressionStatement	free ( str )	3099:1:64490:64500	5237693	6	True				
ANR	5237805	CallExpression	free ( str )		5237693	0					
ANR	5237806	Callee	free		5237693	0					
ANR	5237807	Identifier	free		5237693	0					
ANR	5237808	ArgumentList	str		5237693	1					
ANR	5237809	Argument	str		5237693	0					
ANR	5237810	Identifier	str		5237693	0					
ANR	5237811	ReturnStatement	return lst ;	3100:1:64503:64513	5237693	7	True				
ANR	5237812	Identifier	lst		5237693	0					
ANR	5237813	ReturnType	R_API RList *		5237693	1					
ANR	5237814	Identifier	r_str_split_duplist		5237693	2					
ANR	5237815	ParameterList	"const char * _str , const char * c"		5237693	3					
ANR	5237816	Parameter	const char * _str	3077:33:64099:64114	5237693	0	True				
ANR	5237817	ParameterType	const char *		5237693	0					
ANR	5237818	Identifier	_str		5237693	1					
ANR	5237819	Parameter	const char * c	3077:51:64117:64129	5237693	1	True				
ANR	5237820	ParameterType	const char *		5237693	0					
ANR	5237821	Identifier	c		5237693	1					
ANR	5237822	CFGEntryNode	ENTRY		5237693		True				
ANR	5237823	CFGExitNode	EXIT		5237693		True				
ANR	5237824	InfiniteForNode	true		5237693		True				
ANR	5237825	Symbol	c		5237693						
ANR	5237826	Symbol	NULL		5237693						
ANR	5237827	Symbol	r_list_newf		5237693						
ANR	5237828	Symbol	aux		5237693						
ANR	5237829	Symbol	false		5237693						
ANR	5237830	Symbol	strtok		5237693						
ANR	5237831	Symbol	lst		5237693						
ANR	5237832	Symbol	str		5237693						
ANR	5237833	Symbol	first_loop		5237693						
ANR	5237834	Symbol	true		5237693						
ANR	5237835	Symbol	strdup		5237693						
ANR	5237836	Symbol	free		5237693						
ANR	5237837	Symbol	_str		5237693						
ANR	5237838	Function	r_str_split_lines	3103:0:64518:65035							
ANR	5237839	FunctionDef	"r_str_split_lines (char * str , int * count)"		5237838	0					
ANR	5237840	CompoundStatement		3103:52:64570:65035	5237838	0					
ANR	5237841	IdentifierDeclStatement	int i ;	3104:1:64573:64578	5237838	0	True				
ANR	5237842	IdentifierDecl	i		5237838	0					
ANR	5237843	IdentifierDeclType	int		5237838	0					
ANR	5237844	Identifier	i		5237838	1					
ANR	5237845	IdentifierDeclStatement	int lines = 0 ;	3105:1:64581:64594	5237838	1	True				
ANR	5237846	IdentifierDecl	lines = 0		5237838	0					
ANR	5237847	IdentifierDeclType	int		5237838	0					
ANR	5237848	Identifier	lines		5237838	1					
ANR	5237849	AssignmentExpression	lines = 0		5237838	2		=			
ANR	5237850	Identifier	lines		5237838	0					
ANR	5237851	PrimaryExpression	0		5237838	1					
ANR	5237852	IfStatement	if ( ! str )		5237838	2					
ANR	5237853	Condition	! str	3106:5:64601:64604	5237838	0	True				
ANR	5237854	UnaryOperationExpression	! str		5237838	0					
ANR	5237855	UnaryOperator	!		5237838	0					
ANR	5237856	Identifier	str		5237838	1					
ANR	5237857	CompoundStatement		4:11:36:36	5237838	1					
ANR	5237858	ReturnStatement	return NULL ;	3107:2:64611:64622	5237838	0	True				
ANR	5237859	Identifier	NULL		5237838	0					
ANR	5237860	IdentifierDeclStatement	int * indexes = NULL ;	3109:1:64628:64647	5237838	3	True				
ANR	5237861	IdentifierDecl	* indexes = NULL		5237838	0					
ANR	5237862	IdentifierDeclType	int *		5237838	0					
ANR	5237863	Identifier	indexes		5237838	1					
ANR	5237864	AssignmentExpression	* indexes = NULL		5237838	2		=			
ANR	5237865	Identifier	NULL		5237838	0					
ANR	5237866	Identifier	NULL		5237838	1					
ANR	5237867	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		5237838	4					
ANR	5237868	ForInit	i = 0 ;	3111:6:64671:64676	5237838	0	True				
ANR	5237869	AssignmentExpression	i = 0		5237838	0		=			
ANR	5237870	Identifier	i		5237838	0					
ANR	5237871	PrimaryExpression	0		5237838	1					
ANR	5237872	Condition	str [ i ]	3111:13:64678:64683	5237838	1	True				
ANR	5237873	ArrayIndexing	str [ i ]		5237838	0					
ANR	5237874	Identifier	str		5237838	0					
ANR	5237875	Identifier	i		5237838	1					
ANR	5237876	PostIncDecOperationExpression	i ++	3111:21:64686:64688	5237838	2	True				
ANR	5237877	Identifier	i		5237838	0					
ANR	5237878	IncDec	++		5237838	1					
ANR	5237879	CompoundStatement		9:26:120:120	5237838	3					
ANR	5237880	IfStatement	if ( str [ i ] == '\\n' )		5237838	0					
ANR	5237881	Condition	str [ i ] == '\\n'	3112:6:64699:64712	5237838	0	True				
ANR	5237882	EqualityExpression	str [ i ] == '\\n'		5237838	0		==			
ANR	5237883	ArrayIndexing	str [ i ]		5237838	0					
ANR	5237884	Identifier	str		5237838	0					
ANR	5237885	Identifier	i		5237838	1					
ANR	5237886	PrimaryExpression	'\\n'		5237838	1					
ANR	5237887	CompoundStatement		10:22:144:144	5237838	1					
ANR	5237888	ExpressionStatement	lines ++	3113:3:64720:64727	5237838	0	True				
ANR	5237889	PostIncDecOperationExpression	lines ++		5237838	0					
ANR	5237890	Identifier	lines		5237838	0					
ANR	5237891	IncDec	++		5237838	1					
ANR	5237892	ExpressionStatement	"indexes = calloc ( sizeof ( int ) , lines + 1 )"	3117:1:64766:64808	5237838	5	True				
ANR	5237893	AssignmentExpression	"indexes = calloc ( sizeof ( int ) , lines + 1 )"		5237838	0		=			
ANR	5237894	Identifier	indexes		5237838	0					
ANR	5237895	CallExpression	"calloc ( sizeof ( int ) , lines + 1 )"		5237838	1					
ANR	5237896	Callee	calloc		5237838	0					
ANR	5237897	Identifier	calloc		5237838	0					
ANR	5237898	ArgumentList	sizeof ( int )		5237838	1					
ANR	5237899	Argument	sizeof ( int )		5237838	0					
ANR	5237900	SizeofExpression	sizeof ( int )		5237838	0					
ANR	5237901	Sizeof	sizeof		5237838	0					
ANR	5237902	SizeofOperand	int		5237838	1					
ANR	5237903	Argument	lines + 1		5237838	1					
ANR	5237904	AdditiveExpression	lines + 1		5237838	0		+			
ANR	5237905	Identifier	lines		5237838	0					
ANR	5237906	PrimaryExpression	1		5237838	1					
ANR	5237907	IfStatement	if ( ! indexes )		5237838	6					
ANR	5237908	Condition	! indexes	3118:5:64815:64822	5237838	0	True				
ANR	5237909	UnaryOperationExpression	! indexes		5237838	0					
ANR	5237910	UnaryOperator	!		5237838	0					
ANR	5237911	Identifier	indexes		5237838	1					
ANR	5237912	CompoundStatement		16:15:254:254	5237838	1					
ANR	5237913	ReturnStatement	return NULL ;	3119:2:64829:64840	5237838	0	True				
ANR	5237914	Identifier	NULL		5237838	0					
ANR	5237915	IdentifierDeclStatement	int line = 0 ;	3121:1:64846:64858	5237838	7	True				
ANR	5237916	IdentifierDecl	line = 0		5237838	0					
ANR	5237917	IdentifierDeclType	int		5237838	0					
ANR	5237918	Identifier	line		5237838	1					
ANR	5237919	AssignmentExpression	line = 0		5237838	2		=			
ANR	5237920	Identifier	line		5237838	0					
ANR	5237921	PrimaryExpression	0		5237838	1					
ANR	5237922	ExpressionStatement	indexes [ line ++ ] = 0	3122:1:64861:64880	5237838	8	True				
ANR	5237923	AssignmentExpression	indexes [ line ++ ] = 0		5237838	0		=			
ANR	5237924	ArrayIndexing	indexes [ line ++ ]		5237838	0					
ANR	5237925	Identifier	indexes		5237838	0					
ANR	5237926	PostIncDecOperationExpression	line ++		5237838	1					
ANR	5237927	Identifier	line		5237838	0					
ANR	5237928	IncDec	++		5237838	1					
ANR	5237929	PrimaryExpression	0		5237838	1					
ANR	5237930	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		5237838	9					
ANR	5237931	ForInit	i = 0 ;	3123:6:64888:64893	5237838	0	True				
ANR	5237932	AssignmentExpression	i = 0		5237838	0		=			
ANR	5237933	Identifier	i		5237838	0					
ANR	5237934	PrimaryExpression	0		5237838	1					
ANR	5237935	Condition	str [ i ]	3123:13:64895:64900	5237838	1	True				
ANR	5237936	ArrayIndexing	str [ i ]		5237838	0					
ANR	5237937	Identifier	str		5237838	0					
ANR	5237938	Identifier	i		5237838	1					
ANR	5237939	PostIncDecOperationExpression	i ++	3123:21:64903:64905	5237838	2	True				
ANR	5237940	Identifier	i		5237838	0					
ANR	5237941	IncDec	++		5237838	1					
ANR	5237942	CompoundStatement		21:26:337:337	5237838	3					
ANR	5237943	IfStatement	if ( str [ i ] == '\\n' )		5237838	0					
ANR	5237944	Condition	str [ i ] == '\\n'	3124:6:64916:64929	5237838	0	True				
ANR	5237945	EqualityExpression	str [ i ] == '\\n'		5237838	0		==			
ANR	5237946	ArrayIndexing	str [ i ]		5237838	0					
ANR	5237947	Identifier	str		5237838	0					
ANR	5237948	Identifier	i		5237838	1					
ANR	5237949	PrimaryExpression	'\\n'		5237838	1					
ANR	5237950	CompoundStatement		22:22:361:361	5237838	1					
ANR	5237951	ExpressionStatement	str [ i ] = 0	3125:3:64937:64947	5237838	0	True				
ANR	5237952	AssignmentExpression	str [ i ] = 0		5237838	0		=			
ANR	5237953	ArrayIndexing	str [ i ]		5237838	0					
ANR	5237954	Identifier	str		5237838	0					
ANR	5237955	Identifier	i		5237838	1					
ANR	5237956	PrimaryExpression	0		5237838	1					
ANR	5237957	ExpressionStatement	indexes [ line ++ ] = i + 1	3126:3:64952:64975	5237838	1	True				
ANR	5237958	AssignmentExpression	indexes [ line ++ ] = i + 1		5237838	0		=			
ANR	5237959	ArrayIndexing	indexes [ line ++ ]		5237838	0					
ANR	5237960	Identifier	indexes		5237838	0					
ANR	5237961	PostIncDecOperationExpression	line ++		5237838	1					
ANR	5237962	Identifier	line		5237838	0					
ANR	5237963	IncDec	++		5237838	1					
ANR	5237964	AdditiveExpression	i + 1		5237838	1		+			
ANR	5237965	Identifier	i		5237838	0					
ANR	5237966	PrimaryExpression	1		5237838	1					
ANR	5237967	IfStatement	if ( count )		5237838	10					
ANR	5237968	Condition	count	3129:5:64989:64993	5237838	0	True				
ANR	5237969	Identifier	count		5237838	0					
ANR	5237970	CompoundStatement		27:12:425:425	5237838	1					
ANR	5237971	ExpressionStatement	* count = line	3130:2:65000:65013	5237838	0	True				
ANR	5237972	AssignmentExpression	* count = line		5237838	0		=			
ANR	5237973	UnaryOperationExpression	* count		5237838	0					
ANR	5237974	UnaryOperator	*		5237838	0					
ANR	5237975	Identifier	count		5237838	1					
ANR	5237976	Identifier	line		5237838	1					
ANR	5237977	ReturnStatement	return indexes ;	3132:1:65019:65033	5237838	11	True				
ANR	5237978	Identifier	indexes		5237838	0					
ANR	5237979	ReturnType	R_API int *		5237838	1					
ANR	5237980	Identifier	r_str_split_lines		5237838	2					
ANR	5237981	ParameterList	"char * str , int * count"		5237838	3					
ANR	5237982	Parameter	char * str	3103:29:64547:64555	5237838	0	True				
ANR	5237983	ParameterType	char *		5237838	0					
ANR	5237984	Identifier	str		5237838	1					
ANR	5237985	Parameter	int * count	3103:40:64558:64567	5237838	1	True				
ANR	5237986	ParameterType	int *		5237838	0					
ANR	5237987	Identifier	count		5237838	1					
ANR	5237988	CFGEntryNode	ENTRY		5237838		True				
ANR	5237989	CFGExitNode	EXIT		5237838		True				
ANR	5237990	Symbol	str		5237838						
ANR	5237991	Symbol	* count		5237838						
ANR	5237992	Symbol	NULL		5237838						
ANR	5237993	Symbol	* i		5237838						
ANR	5237994	Symbol	indexes		5237838						
ANR	5237995	Symbol	line		5237838						
ANR	5237996	Symbol	count		5237838						
ANR	5237997	Symbol	i		5237838						
ANR	5237998	Symbol	* str		5237838						
ANR	5237999	Symbol	calloc		5237838						
ANR	5238000	Symbol	lines		5237838						
ANR	5238001	Symbol	* indexes		5237838						
ANR	5238002	Function	r_str_isnumber	3135:0:65038:65263							
ANR	5238003	FunctionDef	r_str_isnumber (const char * str)		5238002	0					
ANR	5238004	CompoundStatement		3135:43:65081:65263	5238002	0					
ANR	5238005	IfStatement	if ( ! str || ! * str )		5238002	0					
ANR	5238006	Condition	! str || ! * str	3136:5:65088:65100	5238002	0	True				
ANR	5238007	OrExpression	! str || ! * str		5238002	0		||			
ANR	5238008	UnaryOperationExpression	! str		5238002	0					
ANR	5238009	UnaryOperator	!		5238002	0					
ANR	5238010	Identifier	str		5238002	1					
ANR	5238011	UnaryOperationExpression	! * str		5238002	1					
ANR	5238012	UnaryOperator	!		5238002	0					
ANR	5238013	UnaryOperationExpression	* str		5238002	1					
ANR	5238014	UnaryOperator	*		5238002	0					
ANR	5238015	Identifier	str		5238002	1					
ANR	5238016	CompoundStatement		2:20:21:21	5238002	1					
ANR	5238017	ReturnStatement	return false ;	3137:2:65107:65119	5238002	0	True				
ANR	5238018	Identifier	false		5238002	0					
ANR	5238019	IdentifierDeclStatement	bool isnum = IS_DIGIT ( * str ) || * str == '-' ;	3139:1:65125:65168	5238002	1	True				
ANR	5238020	IdentifierDecl	isnum = IS_DIGIT ( * str ) || * str == '-'		5238002	0					
ANR	5238021	IdentifierDeclType	bool		5238002	0					
ANR	5238022	Identifier	isnum		5238002	1					
ANR	5238023	AssignmentExpression	isnum = IS_DIGIT ( * str ) || * str == '-'		5238002	2		=			
ANR	5238024	Identifier	isnum		5238002	0					
ANR	5238025	OrExpression	IS_DIGIT ( * str ) || * str == '-'		5238002	1		||			
ANR	5238026	CallExpression	IS_DIGIT ( * str )		5238002	0					
ANR	5238027	Callee	IS_DIGIT		5238002	0					
ANR	5238028	Identifier	IS_DIGIT		5238002	0					
ANR	5238029	ArgumentList	* str		5238002	1					
ANR	5238030	Argument	* str		5238002	0					
ANR	5238031	UnaryOperationExpression	* str		5238002	0					
ANR	5238032	UnaryOperator	*		5238002	0					
ANR	5238033	Identifier	str		5238002	1					
ANR	5238034	EqualityExpression	* str == '-'		5238002	1		==			
ANR	5238035	UnaryOperationExpression	* str		5238002	0					
ANR	5238036	UnaryOperator	*		5238002	0					
ANR	5238037	Identifier	str		5238002	1					
ANR	5238038	PrimaryExpression	'-'		5238002	1					
ANR	5238039	WhileStatement	while ( isnum && * ++ str )		5238002	2					
ANR	5238040	Condition	isnum && * ++ str	3140:8:65178:65192	5238002	0	True				
ANR	5238041	AndExpression	isnum && * ++ str		5238002	0		&&			
ANR	5238042	Identifier	isnum		5238002	0					
ANR	5238043	UnaryOperationExpression	* ++ str		5238002	1					
ANR	5238044	UnaryOperator	*		5238002	0					
ANR	5238045	UnaryExpression	++ str		5238002	1					
ANR	5238046	IncDec	++		5238002	0					
ANR	5238047	Identifier	str		5238002	1					
ANR	5238048	CompoundStatement		6:25:113:113	5238002	1					
ANR	5238049	IfStatement	if ( ! IS_DIGIT ( * str ) )		5238002	0					
ANR	5238050	Condition	! IS_DIGIT ( * str )	3141:6:65203:65218	5238002	0	True				
ANR	5238051	UnaryOperationExpression	! IS_DIGIT ( * str )		5238002	0					
ANR	5238052	UnaryOperator	!		5238002	0					
ANR	5238053	CallExpression	IS_DIGIT ( * str )		5238002	1					
ANR	5238054	Callee	IS_DIGIT		5238002	0					
ANR	5238055	Identifier	IS_DIGIT		5238002	0					
ANR	5238056	ArgumentList	* str		5238002	1					
ANR	5238057	Argument	* str		5238002	0					
ANR	5238058	UnaryOperationExpression	* str		5238002	0					
ANR	5238059	UnaryOperator	*		5238002	0					
ANR	5238060	Identifier	str		5238002	1					
ANR	5238061	CompoundStatement		7:24:139:139	5238002	1					
ANR	5238062	ExpressionStatement	isnum = false	3142:3:65226:65239	5238002	0	True				
ANR	5238063	AssignmentExpression	isnum = false		5238002	0		=			
ANR	5238064	Identifier	isnum		5238002	0					
ANR	5238065	Identifier	false		5238002	1					
ANR	5238066	ReturnStatement	return isnum ;	3145:1:65249:65261	5238002	3	True				
ANR	5238067	Identifier	isnum		5238002	0					
ANR	5238068	ReturnType	R_API bool		5238002	1					
ANR	5238069	Identifier	r_str_isnumber		5238002	2					
ANR	5238070	ParameterList	const char * str		5238002	3					
ANR	5238071	Parameter	const char * str	3135:26:65064:65078	5238002	0	True				
ANR	5238072	ParameterType	const char *		5238002	0					
ANR	5238073	Identifier	str		5238002	1					
ANR	5238074	CFGEntryNode	ENTRY		5238002		True				
ANR	5238075	CFGExitNode	EXIT		5238002		True				
ANR	5238076	Symbol	str		5238002						
ANR	5238077	Symbol	* ++ str		5238002						
ANR	5238078	Symbol	isnum		5238002						
ANR	5238079	Symbol	false		5238002						
ANR	5238080	Symbol	* str		5238002						
ANR	5238081	Symbol	IS_DIGIT		5238002						
ANR	5238082	Function	r_str_last	3149:6:65337:65578							
ANR	5238083	FunctionDef	"r_str_last (const char * str , const char * ch)"		5238082	0					
ANR	5238084	CompoundStatement		3149:62:65393:65578	5238082	0					
ANR	5238085	IdentifierDeclStatement	"char * ptr , * end = NULL ;"	3150:1:65396:65418	5238082	0	True				
ANR	5238086	IdentifierDecl	* ptr		5238082	0					
ANR	5238087	IdentifierDeclType	char *		5238082	0					
ANR	5238088	Identifier	ptr		5238082	1					
ANR	5238089	IdentifierDecl	* end = NULL		5238082	1					
ANR	5238090	IdentifierDeclType	char *		5238082	0					
ANR	5238091	Identifier	end		5238082	1					
ANR	5238092	AssignmentExpression	* end = NULL		5238082	2		=			
ANR	5238093	Identifier	NULL		5238082	0					
ANR	5238094	Identifier	NULL		5238082	1					
ANR	5238095	IfStatement	if ( ! str || ! ch )		5238082	1					
ANR	5238096	Condition	! str || ! ch	3151:5:65425:65435	5238082	0	True				
ANR	5238097	OrExpression	! str || ! ch		5238082	0		||			
ANR	5238098	UnaryOperationExpression	! str		5238082	0					
ANR	5238099	UnaryOperator	!		5238082	0					
ANR	5238100	Identifier	str		5238082	1					
ANR	5238101	UnaryOperationExpression	! ch		5238082	1					
ANR	5238102	UnaryOperator	!		5238082	0					
ANR	5238103	Identifier	ch		5238082	1					
ANR	5238104	CompoundStatement		3:18:44:44	5238082	1					
ANR	5238105	ReturnStatement	return NULL ;	3152:2:65442:65453	5238082	0	True				
ANR	5238106	Identifier	NULL		5238082	0					
ANR	5238107	DoStatement	do		5238082	2					
ANR	5238108	CompoundStatement		6:4:68:68	5238082	0					
ANR	5238109	ExpressionStatement	"ptr = strstr ( str , ch )"	3155:2:65466:65488	5238082	0	True				
ANR	5238110	AssignmentExpression	"ptr = strstr ( str , ch )"		5238082	0		=			
ANR	5238111	Identifier	ptr		5238082	0					
ANR	5238112	CallExpression	"strstr ( str , ch )"		5238082	1					
ANR	5238113	Callee	strstr		5238082	0					
ANR	5238114	Identifier	strstr		5238082	0					
ANR	5238115	ArgumentList	str		5238082	1					
ANR	5238116	Argument	str		5238082	0					
ANR	5238117	Identifier	str		5238082	0					
ANR	5238118	Argument	ch		5238082	1					
ANR	5238119	Identifier	ch		5238082	0					
ANR	5238120	IfStatement	if ( ! ptr )		5238082	1					
ANR	5238121	Condition	! ptr	3156:6:65496:65499	5238082	0	True				
ANR	5238122	UnaryOperationExpression	! ptr		5238082	0					
ANR	5238123	UnaryOperator	!		5238082	0					
ANR	5238124	Identifier	ptr		5238082	1					
ANR	5238125	CompoundStatement		8:12:108:108	5238082	1					
ANR	5238126	BreakStatement	break ;	3157:3:65507:65512	5238082	0	True				
ANR	5238127	ExpressionStatement	end = ptr	3159:2:65520:65529	5238082	2	True				
ANR	5238128	AssignmentExpression	end = ptr		5238082	0		=			
ANR	5238129	Identifier	end		5238082	0					
ANR	5238130	Identifier	ptr		5238082	1					
ANR	5238131	ExpressionStatement	str = ptr + 1	3160:2:65533:65546	5238082	3	True				
ANR	5238132	AssignmentExpression	str = ptr + 1		5238082	0		=			
ANR	5238133	Identifier	str		5238082	0					
ANR	5238134	AdditiveExpression	ptr + 1		5238082	1		+			
ANR	5238135	Identifier	ptr		5238082	0					
ANR	5238136	PrimaryExpression	1		5238082	1					
ANR	5238137	Condition	true	3161:10:65558:65561	5238082	1	True				
ANR	5238138	Identifier	true		5238082	0					
ANR	5238139	ReturnStatement	return end ;	3162:1:65566:65576	5238082	3	True				
ANR	5238140	Identifier	end		5238082	0					
ANR	5238141	ReturnType	const char *		5238082	1					
ANR	5238142	Identifier	r_str_last		5238082	2					
ANR	5238143	ParameterList	"const char * str , const char * ch"		5238082	3					
ANR	5238144	Parameter	const char * str	3149:29:65360:65374	5238082	0	True				
ANR	5238145	ParameterType	const char *		5238082	0					
ANR	5238146	Identifier	str		5238082	1					
ANR	5238147	Parameter	const char * ch	3149:46:65377:65390	5238082	1	True				
ANR	5238148	ParameterType	const char *		5238082	0					
ANR	5238149	Identifier	ch		5238082	1					
ANR	5238150	CFGEntryNode	ENTRY		5238082		True				
ANR	5238151	CFGExitNode	EXIT		5238082		True				
ANR	5238152	Symbol	str		5238082						
ANR	5238153	Symbol	NULL		5238082						
ANR	5238154	Symbol	ch		5238082						
ANR	5238155	Symbol	strstr		5238082						
ANR	5238156	Symbol	true		5238082						
ANR	5238157	Symbol	end		5238082						
ANR	5238158	Symbol	ptr		5238082						
ANR	5238159	Function	strncpy_with_color_codes	3166:0:65655:66062							
ANR	5238160	FunctionDef	"strncpy_with_color_codes (char * s1 , char * s2 , int n)"		5238159	0					
ANR	5238161	CompoundStatement		3166:63:65718:66062	5238159	0					
ANR	5238162	IdentifierDeclStatement	"int i = 0 , j = 0 ;"	3167:1:65721:65737	5238159	0	True				
ANR	5238163	IdentifierDecl	i = 0		5238159	0					
ANR	5238164	IdentifierDeclType	int		5238159	0					
ANR	5238165	Identifier	i		5238159	1					
ANR	5238166	AssignmentExpression	i = 0		5238159	2		=			
ANR	5238167	Identifier	i		5238159	0					
ANR	5238168	PrimaryExpression	0		5238159	1					
ANR	5238169	IdentifierDecl	j = 0		5238159	1					
ANR	5238170	IdentifierDeclType	int		5238159	0					
ANR	5238171	Identifier	j		5238159	1					
ANR	5238172	AssignmentExpression	j = 0		5238159	2		=			
ANR	5238173	Identifier	j		5238159	0					
ANR	5238174	PrimaryExpression	0		5238159	1					
ANR	5238175	IdentifierDeclStatement	int count = 0 ;	3168:1:65740:65753	5238159	1	True				
ANR	5238176	IdentifierDecl	count = 0		5238159	0					
ANR	5238177	IdentifierDeclType	int		5238159	0					
ANR	5238178	Identifier	count		5238159	1					
ANR	5238179	AssignmentExpression	count = 0		5238159	2		=			
ANR	5238180	Identifier	count		5238159	0					
ANR	5238181	PrimaryExpression	0		5238159	1					
ANR	5238182	WhileStatement	while ( s2 [ j ] && count < n )		5238159	2					
ANR	5238183	Condition	s2 [ j ] && count < n	3169:8:65763:65780	5238159	0	True				
ANR	5238184	AndExpression	s2 [ j ] && count < n		5238159	0		&&			
ANR	5238185	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238186	Identifier	s2		5238159	0					
ANR	5238187	Identifier	j		5238159	1					
ANR	5238188	RelationalExpression	count < n		5238159	1		<			
ANR	5238189	Identifier	count		5238159	0					
ANR	5238190	Identifier	n		5238159	1					
ANR	5238191	CompoundStatement		4:28:64:64	5238159	1					
ANR	5238192	WhileStatement	while ( s2 [ j ] == 0x1b )		5238159	0					
ANR	5238193	Condition	s2 [ j ] == 0x1b	3171:9:65832:65844	5238159	0	True				
ANR	5238194	EqualityExpression	s2 [ j ] == 0x1b		5238159	0		==			
ANR	5238195	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238196	Identifier	s2		5238159	0					
ANR	5238197	Identifier	j		5238159	1					
ANR	5238198	PrimaryExpression	0x1b		5238159	1					
ANR	5238199	CompoundStatement		6:24:128:128	5238159	1					
ANR	5238200	WhileStatement	while ( s2 [ j ] && s2 [ j ] != 'm' )		5238159	0					
ANR	5238201	Condition	s2 [ j ] && s2 [ j ] != 'm'	3173:10:65879:65899	5238159	0	True				
ANR	5238202	AndExpression	s2 [ j ] && s2 [ j ] != 'm'		5238159	0		&&			
ANR	5238203	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238204	Identifier	s2		5238159	0					
ANR	5238205	Identifier	j		5238159	1					
ANR	5238206	EqualityExpression	s2 [ j ] != 'm'		5238159	1		!=			
ANR	5238207	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238208	Identifier	s2		5238159	0					
ANR	5238209	Identifier	j		5238159	1					
ANR	5238210	PrimaryExpression	'm'		5238159	1					
ANR	5238211	CompoundStatement		8:33:183:183	5238159	1					
ANR	5238212	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3174:4:65908:65925	5238159	0	True				
ANR	5238213	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		5238159	0		=			
ANR	5238214	ArrayIndexing	s1 [ i ++ ]		5238159	0					
ANR	5238215	Identifier	s1		5238159	0					
ANR	5238216	PostIncDecOperationExpression	i ++		5238159	1					
ANR	5238217	Identifier	i		5238159	0					
ANR	5238218	IncDec	++		5238159	1					
ANR	5238219	ArrayIndexing	s2 [ j ++ ]		5238159	1					
ANR	5238220	Identifier	s2		5238159	0					
ANR	5238221	PostIncDecOperationExpression	j ++		5238159	1					
ANR	5238222	Identifier	j		5238159	0					
ANR	5238223	IncDec	++		5238159	1					
ANR	5238224	IfStatement	if ( s2 [ j ] )		5238159	1					
ANR	5238225	Condition	s2 [ j ]	3177:7:65954:65958	5238159	0	True				
ANR	5238226	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238227	Identifier	s2		5238159	0					
ANR	5238228	Identifier	j		5238159	1					
ANR	5238229	CompoundStatement		12:14:242:242	5238159	1					
ANR	5238230	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3178:4:65967:65984	5238159	0	True				
ANR	5238231	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		5238159	0		=			
ANR	5238232	ArrayIndexing	s1 [ i ++ ]		5238159	0					
ANR	5238233	Identifier	s1		5238159	0					
ANR	5238234	PostIncDecOperationExpression	i ++		5238159	1					
ANR	5238235	Identifier	i		5238159	0					
ANR	5238236	IncDec	++		5238159	1					
ANR	5238237	ArrayIndexing	s2 [ j ++ ]		5238159	1					
ANR	5238238	Identifier	s2		5238159	0					
ANR	5238239	PostIncDecOperationExpression	j ++		5238159	1					
ANR	5238240	Identifier	j		5238159	0					
ANR	5238241	IncDec	++		5238159	1					
ANR	5238242	IfStatement	if ( s2 [ j ] )		5238159	1					
ANR	5238243	Condition	s2 [ j ]	3181:6:66001:66005	5238159	0	True				
ANR	5238244	ArrayIndexing	s2 [ j ]		5238159	0					
ANR	5238245	Identifier	s2		5238159	0					
ANR	5238246	Identifier	j		5238159	1					
ANR	5238247	CompoundStatement		16:13:289:289	5238159	1					
ANR	5238248	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3182:3:66013:66030	5238159	0	True				
ANR	5238249	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		5238159	0		=			
ANR	5238250	ArrayIndexing	s1 [ i ++ ]		5238159	0					
ANR	5238251	Identifier	s1		5238159	0					
ANR	5238252	PostIncDecOperationExpression	i ++		5238159	1					
ANR	5238253	Identifier	i		5238159	0					
ANR	5238254	IncDec	++		5238159	1					
ANR	5238255	ArrayIndexing	s2 [ j ++ ]		5238159	1					
ANR	5238256	Identifier	s2		5238159	0					
ANR	5238257	PostIncDecOperationExpression	j ++		5238159	1					
ANR	5238258	Identifier	j		5238159	0					
ANR	5238259	IncDec	++		5238159	1					
ANR	5238260	ExpressionStatement	count ++	3183:3:66035:66042	5238159	1	True				
ANR	5238261	PostIncDecOperationExpression	count ++		5238159	0					
ANR	5238262	Identifier	count		5238159	0					
ANR	5238263	IncDec	++		5238159	1					
ANR	5238264	ReturnStatement	return i ;	3186:1:66052:66060	5238159	3	True				
ANR	5238265	Identifier	i		5238159	0					
ANR	5238266	ReturnType	static int		5238159	1					
ANR	5238267	Identifier	strncpy_with_color_codes		5238159	2					
ANR	5238268	ParameterList	"char * s1 , char * s2 , int n"		5238159	3					
ANR	5238269	Parameter	char * s1	3166:36:65691:65698	5238159	0	True				
ANR	5238270	ParameterType	char *		5238159	0					
ANR	5238271	Identifier	s1		5238159	1					
ANR	5238272	Parameter	char * s2	3166:46:65701:65708	5238159	1	True				
ANR	5238273	ParameterType	char *		5238159	0					
ANR	5238274	Identifier	s2		5238159	1					
ANR	5238275	Parameter	int n	3166:56:65711:65715	5238159	2	True				
ANR	5238276	ParameterType	int		5238159	0					
ANR	5238277	Identifier	n		5238159	1					
ANR	5238278	CFGEntryNode	ENTRY		5238159		True				
ANR	5238279	CFGExitNode	EXIT		5238159		True				
ANR	5238280	Symbol	* j		5238159						
ANR	5238281	Symbol	* s2		5238159						
ANR	5238282	Symbol	* s1		5238159						
ANR	5238283	Symbol	count		5238159						
ANR	5238284	Symbol	i		5238159						
ANR	5238285	Symbol	j		5238159						
ANR	5238286	Symbol	s1		5238159						
ANR	5238287	Symbol	n		5238159						
ANR	5238288	Symbol	s2		5238159						
ANR	5238289	Function	strncmp_skip_color_codes	3189:0:66065:66576							
ANR	5238290	FunctionDef	"strncmp_skip_color_codes (const char * s1 , const char * s2 , int n)"		5238289	0					
ANR	5238291	CompoundStatement		3189:75:66140:66576	5238289	0					
ANR	5238292	IdentifierDeclStatement	"int i = 0 , j = 0 ;"	3190:1:66143:66159	5238289	0	True				
ANR	5238293	IdentifierDecl	i = 0		5238289	0					
ANR	5238294	IdentifierDeclType	int		5238289	0					
ANR	5238295	Identifier	i		5238289	1					
ANR	5238296	AssignmentExpression	i = 0		5238289	2		=			
ANR	5238297	Identifier	i		5238289	0					
ANR	5238298	PrimaryExpression	0		5238289	1					
ANR	5238299	IdentifierDecl	j = 0		5238289	1					
ANR	5238300	IdentifierDeclType	int		5238289	0					
ANR	5238301	Identifier	j		5238289	1					
ANR	5238302	AssignmentExpression	j = 0		5238289	2		=			
ANR	5238303	Identifier	j		5238289	0					
ANR	5238304	PrimaryExpression	0		5238289	1					
ANR	5238305	IdentifierDeclStatement	int count = 0 ;	3191:1:66162:66175	5238289	1	True				
ANR	5238306	IdentifierDecl	count = 0		5238289	0					
ANR	5238307	IdentifierDeclType	int		5238289	0					
ANR	5238308	Identifier	count		5238289	1					
ANR	5238309	AssignmentExpression	count = 0		5238289	2		=			
ANR	5238310	Identifier	count		5238289	0					
ANR	5238311	PrimaryExpression	0		5238289	1					
ANR	5238312	ForStatement	"for ( i = 0 , j = 0 ; s1 [ i ] && s2 [ j ] && count < n ; i ++ , j ++ , count ++ )"		5238289	2					
ANR	5238313	ForInit	"i = 0 , j = 0 ;"	3192:6:66183:66195	5238289	0	True				
ANR	5238314	Expression	"i = 0 , j = 0"		5238289	0					
ANR	5238315	AssignmentExpression	i = 0		5238289	0		=			
ANR	5238316	Identifier	i		5238289	0					
ANR	5238317	PrimaryExpression	0		5238289	1					
ANR	5238318	AssignmentExpression	j = 0		5238289	1		=			
ANR	5238319	Identifier	j		5238289	0					
ANR	5238320	PrimaryExpression	0		5238289	1					
ANR	5238321	Condition	s1 [ i ] && s2 [ j ] && count < n	3192:20:66197:66224	5238289	1	True				
ANR	5238322	AndExpression	s1 [ i ] && s2 [ j ] && count < n		5238289	0		&&			
ANR	5238323	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238324	Identifier	s1		5238289	0					
ANR	5238325	Identifier	i		5238289	1					
ANR	5238326	AndExpression	s2 [ j ] && count < n		5238289	1		&&			
ANR	5238327	ArrayIndexing	s2 [ j ]		5238289	0					
ANR	5238328	Identifier	s2		5238289	0					
ANR	5238329	Identifier	j		5238289	1					
ANR	5238330	RelationalExpression	count < n		5238289	1		<			
ANR	5238331	Identifier	count		5238289	0					
ANR	5238332	Identifier	n		5238289	1					
ANR	5238333	Expression	"i ++ , j ++ , count ++"	3192:50:66227:66243	5238289	2	True				
ANR	5238334	PostIncDecOperationExpression	i ++		5238289	0					
ANR	5238335	Identifier	i		5238289	0					
ANR	5238336	IncDec	++		5238289	1					
ANR	5238337	Expression	"j ++ , count ++"		5238289	1					
ANR	5238338	PostIncDecOperationExpression	j ++		5238289	0					
ANR	5238339	Identifier	j		5238289	0					
ANR	5238340	IncDec	++		5238289	1					
ANR	5238341	PostIncDecOperationExpression	count ++		5238289	1					
ANR	5238342	Identifier	count		5238289	0					
ANR	5238343	IncDec	++		5238289	1					
ANR	5238344	CompoundStatement		4:69:105:105	5238289	3					
ANR	5238345	WhileStatement	while ( s1 [ i ] == 0x1b )		5238289	0					
ANR	5238346	Condition	s1 [ i ] == 0x1b	3193:9:66257:66269	5238289	0	True				
ANR	5238347	EqualityExpression	s1 [ i ] == 0x1b		5238289	0		==			
ANR	5238348	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238349	Identifier	s1		5238289	0					
ANR	5238350	Identifier	i		5238289	1					
ANR	5238351	PrimaryExpression	0x1b		5238289	1					
ANR	5238352	CompoundStatement		5:24:131:131	5238289	1					
ANR	5238353	WhileStatement	while ( s1 [ i ] && s1 [ i ] != 'm' )		5238289	0					
ANR	5238354	Condition	s1 [ i ] && s1 [ i ] != 'm'	3194:10:66284:66304	5238289	0	True				
ANR	5238355	AndExpression	s1 [ i ] && s1 [ i ] != 'm'		5238289	0		&&			
ANR	5238356	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238357	Identifier	s1		5238289	0					
ANR	5238358	Identifier	i		5238289	1					
ANR	5238359	EqualityExpression	s1 [ i ] != 'm'		5238289	1		!=			
ANR	5238360	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238361	Identifier	s1		5238289	0					
ANR	5238362	Identifier	i		5238289	1					
ANR	5238363	PrimaryExpression	'm'		5238289	1					
ANR	5238364	CompoundStatement		6:33:166:166	5238289	1					
ANR	5238365	ExpressionStatement	i ++	3195:4:66313:66316	5238289	0	True				
ANR	5238366	PostIncDecOperationExpression	i ++		5238289	0					
ANR	5238367	Identifier	i		5238289	0					
ANR	5238368	IncDec	++		5238289	1					
ANR	5238369	IfStatement	if ( s1 [ i ] )		5238289	1					
ANR	5238370	Condition	s1 [ i ]	3197:7:66330:66334	5238289	0	True				
ANR	5238371	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238372	Identifier	s1		5238289	0					
ANR	5238373	Identifier	i		5238289	1					
ANR	5238374	CompoundStatement		9:14:196:196	5238289	1					
ANR	5238375	ExpressionStatement	i ++	3198:4:66343:66346	5238289	0	True				
ANR	5238376	PostIncDecOperationExpression	i ++		5238289	0					
ANR	5238377	Identifier	i		5238289	0					
ANR	5238378	IncDec	++		5238289	1					
ANR	5238379	WhileStatement	while ( s2 [ j ] == 0x1b )		5238289	1					
ANR	5238380	Condition	s2 [ j ] == 0x1b	3201:9:66366:66378	5238289	0	True				
ANR	5238381	EqualityExpression	s2 [ j ] == 0x1b		5238289	0		==			
ANR	5238382	ArrayIndexing	s2 [ j ]		5238289	0					
ANR	5238383	Identifier	s2		5238289	0					
ANR	5238384	Identifier	j		5238289	1					
ANR	5238385	PrimaryExpression	0x1b		5238289	1					
ANR	5238386	CompoundStatement		13:24:240:240	5238289	1					
ANR	5238387	WhileStatement	while ( s2 [ j ] && s2 [ j ] != 'm' )		5238289	0					
ANR	5238388	Condition	s2 [ j ] && s2 [ j ] != 'm'	3202:10:66393:66413	5238289	0	True				
ANR	5238389	AndExpression	s2 [ j ] && s2 [ j ] != 'm'		5238289	0		&&			
ANR	5238390	ArrayIndexing	s2 [ j ]		5238289	0					
ANR	5238391	Identifier	s2		5238289	0					
ANR	5238392	Identifier	j		5238289	1					
ANR	5238393	EqualityExpression	s2 [ j ] != 'm'		5238289	1		!=			
ANR	5238394	ArrayIndexing	s2 [ j ]		5238289	0					
ANR	5238395	Identifier	s2		5238289	0					
ANR	5238396	Identifier	j		5238289	1					
ANR	5238397	PrimaryExpression	'm'		5238289	1					
ANR	5238398	CompoundStatement		14:33:275:275	5238289	1					
ANR	5238399	ExpressionStatement	j ++	3203:4:66422:66425	5238289	0	True				
ANR	5238400	PostIncDecOperationExpression	j ++		5238289	0					
ANR	5238401	Identifier	j		5238289	0					
ANR	5238402	IncDec	++		5238289	1					
ANR	5238403	IfStatement	if ( s2 [ j ] )		5238289	1					
ANR	5238404	Condition	s2 [ j ]	3205:7:66439:66443	5238289	0	True				
ANR	5238405	ArrayIndexing	s2 [ j ]		5238289	0					
ANR	5238406	Identifier	s2		5238289	0					
ANR	5238407	Identifier	j		5238289	1					
ANR	5238408	CompoundStatement		17:14:305:305	5238289	1					
ANR	5238409	ExpressionStatement	j ++	3206:4:66452:66455	5238289	0	True				
ANR	5238410	PostIncDecOperationExpression	j ++		5238289	0					
ANR	5238411	Identifier	j		5238289	0					
ANR	5238412	IncDec	++		5238289	1					
ANR	5238413	IfStatement	if ( s1 [ i ] != s2 [ j ] )		5238289	2					
ANR	5238414	Condition	s1 [ i ] != s2 [ j ]	3209:6:66472:66485	5238289	0	True				
ANR	5238415	EqualityExpression	s1 [ i ] != s2 [ j ]		5238289	0		!=			
ANR	5238416	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238417	Identifier	s1		5238289	0					
ANR	5238418	Identifier	i		5238289	1					
ANR	5238419	ArrayIndexing	s2 [ j ]		5238289	1					
ANR	5238420	Identifier	s2		5238289	0					
ANR	5238421	Identifier	j		5238289	1					
ANR	5238422	CompoundStatement		21:22:347:347	5238289	1					
ANR	5238423	ReturnStatement	return - 1 ;	3210:3:66493:66502	5238289	0	True				
ANR	5238424	UnaryOperationExpression	- 1		5238289	0					
ANR	5238425	UnaryOperator	-		5238289	0					
ANR	5238426	PrimaryExpression	1		5238289	1					
ANR	5238427	IfStatement	if ( count < n && s1 [ i ] != s2 [ j ] )		5238289	3					
ANR	5238428	Condition	count < n && s1 [ i ] != s2 [ j ]	3214:5:66517:66543	5238289	0	True				
ANR	5238429	AndExpression	count < n && s1 [ i ] != s2 [ j ]		5238289	0		&&			
ANR	5238430	RelationalExpression	count < n		5238289	0		<			
ANR	5238431	Identifier	count		5238289	0					
ANR	5238432	Identifier	n		5238289	1					
ANR	5238433	EqualityExpression	s1 [ i ] != s2 [ j ]		5238289	1		!=			
ANR	5238434	ArrayIndexing	s1 [ i ]		5238289	0					
ANR	5238435	Identifier	s1		5238289	0					
ANR	5238436	Identifier	i		5238289	1					
ANR	5238437	ArrayIndexing	s2 [ j ]		5238289	1					
ANR	5238438	Identifier	s2		5238289	0					
ANR	5238439	Identifier	j		5238289	1					
ANR	5238440	CompoundStatement		26:34:405:405	5238289	1					
ANR	5238441	ReturnStatement	return - 1 ;	3215:2:66550:66559	5238289	0	True				
ANR	5238442	UnaryOperationExpression	- 1		5238289	0					
ANR	5238443	UnaryOperator	-		5238289	0					
ANR	5238444	PrimaryExpression	1		5238289	1					
ANR	5238445	ReturnStatement	return 0 ;	3218:1:66566:66574	5238289	4	True				
ANR	5238446	PrimaryExpression	0		5238289	0					
ANR	5238447	ReturnType	static int		5238289	1					
ANR	5238448	Identifier	strncmp_skip_color_codes		5238289	2					
ANR	5238449	ParameterList	"const char * s1 , const char * s2 , int n"		5238289	3					
ANR	5238450	Parameter	const char * s1	3189:36:66101:66114	5238289	0	True				
ANR	5238451	ParameterType	const char *		5238289	0					
ANR	5238452	Identifier	s1		5238289	1					
ANR	5238453	Parameter	const char * s2	3189:52:66117:66130	5238289	1	True				
ANR	5238454	ParameterType	const char *		5238289	0					
ANR	5238455	Identifier	s2		5238289	1					
ANR	5238456	Parameter	int n	3189:68:66133:66137	5238289	2	True				
ANR	5238457	ParameterType	int		5238289	0					
ANR	5238458	Identifier	n		5238289	1					
ANR	5238459	CFGEntryNode	ENTRY		5238289		True				
ANR	5238460	CFGExitNode	EXIT		5238289		True				
ANR	5238461	Symbol	* i		5238289						
ANR	5238462	Symbol	* j		5238289						
ANR	5238463	Symbol	* s2		5238289						
ANR	5238464	Symbol	* s1		5238289						
ANR	5238465	Symbol	count		5238289						
ANR	5238466	Symbol	i		5238289						
ANR	5238467	Symbol	j		5238289						
ANR	5238468	Symbol	s1		5238289						
ANR	5238469	Symbol	n		5238289						
ANR	5238470	Symbol	s2		5238289						
ANR	5238471	Function	strchr_skip_color_codes	3221:0:66579:66870							
ANR	5238472	FunctionDef	"strchr_skip_color_codes (const char * s , int c)"		5238471	0					
ANR	5238473	CompoundStatement		3221:59:66638:66870	5238471	0					
ANR	5238474	IdentifierDeclStatement	int i = 0 ;	3222:1:66641:66650	5238471	0	True				
ANR	5238475	IdentifierDecl	i = 0		5238471	0					
ANR	5238476	IdentifierDeclType	int		5238471	0					
ANR	5238477	Identifier	i		5238471	1					
ANR	5238478	AssignmentExpression	i = 0		5238471	2		=			
ANR	5238479	Identifier	i		5238471	0					
ANR	5238480	PrimaryExpression	0		5238471	1					
ANR	5238481	ForStatement	for ( i = 0 ; s [ i ] ; i ++ )		5238471	1					
ANR	5238482	ForInit	i = 0 ;	3223:6:66658:66663	5238471	0	True				
ANR	5238483	AssignmentExpression	i = 0		5238471	0		=			
ANR	5238484	Identifier	i		5238471	0					
ANR	5238485	PrimaryExpression	0		5238471	1					
ANR	5238486	Condition	s [ i ]	3223:13:66665:66668	5238471	1	True				
ANR	5238487	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238488	Identifier	s		5238471	0					
ANR	5238489	Identifier	i		5238471	1					
ANR	5238490	PostIncDecOperationExpression	i ++	3223:19:66671:66673	5238471	2	True				
ANR	5238491	Identifier	i		5238471	0					
ANR	5238492	IncDec	++		5238471	1					
ANR	5238493	CompoundStatement		3:24:37:37	5238471	3					
ANR	5238494	WhileStatement	while ( s [ i ] && s [ i ] == 0x1b )		5238471	0					
ANR	5238495	Condition	s [ i ] && s [ i ] == 0x1b	3224:9:66687:66706	5238471	0	True				
ANR	5238496	AndExpression	s [ i ] && s [ i ] == 0x1b		5238471	0		&&			
ANR	5238497	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238498	Identifier	s		5238471	0					
ANR	5238499	Identifier	i		5238471	1					
ANR	5238500	EqualityExpression	s [ i ] == 0x1b		5238471	1		==			
ANR	5238501	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238502	Identifier	s		5238471	0					
ANR	5238503	Identifier	i		5238471	1					
ANR	5238504	PrimaryExpression	0x1b		5238471	1					
ANR	5238505	CompoundStatement		4:31:70:70	5238471	1					
ANR	5238506	WhileStatement	while ( s [ i ] && s [ i ] != 'm' )		5238471	0					
ANR	5238507	Condition	s [ i ] && s [ i ] != 'm'	3225:10:66721:66739	5238471	0	True				
ANR	5238508	AndExpression	s [ i ] && s [ i ] != 'm'		5238471	0		&&			
ANR	5238509	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238510	Identifier	s		5238471	0					
ANR	5238511	Identifier	i		5238471	1					
ANR	5238512	EqualityExpression	s [ i ] != 'm'		5238471	1		!=			
ANR	5238513	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238514	Identifier	s		5238471	0					
ANR	5238515	Identifier	i		5238471	1					
ANR	5238516	PrimaryExpression	'm'		5238471	1					
ANR	5238517	CompoundStatement		5:31:103:103	5238471	1					
ANR	5238518	ExpressionStatement	i ++	3226:4:66748:66751	5238471	0	True				
ANR	5238519	PostIncDecOperationExpression	i ++		5238471	0					
ANR	5238520	Identifier	i		5238471	0					
ANR	5238521	IncDec	++		5238471	1					
ANR	5238522	IfStatement	if ( s [ i ] )		5238471	1					
ANR	5238523	Condition	s [ i ]	3228:7:66765:66768	5238471	0	True				
ANR	5238524	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238525	Identifier	s		5238471	0					
ANR	5238526	Identifier	i		5238471	1					
ANR	5238527	CompoundStatement		8:13:132:132	5238471	1					
ANR	5238528	ExpressionStatement	i ++	3229:4:66777:66780	5238471	0	True				
ANR	5238529	PostIncDecOperationExpression	i ++		5238471	0					
ANR	5238530	Identifier	i		5238471	0					
ANR	5238531	IncDec	++		5238471	1					
ANR	5238532	IfStatement	if ( ! s [ i ] || s [ i ] == ( char ) c )		5238471	1					
ANR	5238533	Condition	! s [ i ] || s [ i ] == ( char ) c	3232:6:66797:66820	5238471	0	True				
ANR	5238534	OrExpression	! s [ i ] || s [ i ] == ( char ) c		5238471	0		||			
ANR	5238535	UnaryOperationExpression	! s [ i ]		5238471	0					
ANR	5238536	UnaryOperator	!		5238471	0					
ANR	5238537	ArrayIndexing	s [ i ]		5238471	1					
ANR	5238538	Identifier	s		5238471	0					
ANR	5238539	Identifier	i		5238471	1					
ANR	5238540	EqualityExpression	s [ i ] == ( char ) c		5238471	1		==			
ANR	5238541	ArrayIndexing	s [ i ]		5238471	0					
ANR	5238542	Identifier	s		5238471	0					
ANR	5238543	Identifier	i		5238471	1					
ANR	5238544	CastExpression	( char ) c		5238471	1					
ANR	5238545	CastTarget	char		5238471	0					
ANR	5238546	Identifier	c		5238471	1					
ANR	5238547	CompoundStatement		12:32:184:184	5238471	1					
ANR	5238548	ReturnStatement	return ( char * ) s + i ;	3233:3:66828:66847	5238471	0	True				
ANR	5238549	AdditiveExpression	( char * ) s + i		5238471	0		+			
ANR	5238550	CastExpression	( char * ) s		5238471	0					
ANR	5238551	CastTarget	char *		5238471	0					
ANR	5238552	Identifier	s		5238471	1					
ANR	5238553	Identifier	i		5238471	1					
ANR	5238554	ReturnStatement	return NULL ;	3236:1:66857:66868	5238471	2	True				
ANR	5238555	Identifier	NULL		5238471	0					
ANR	5238556	ReturnType	static char *		5238471	1					
ANR	5238557	Identifier	strchr_skip_color_codes		5238471	2					
ANR	5238558	ParameterList	"const char * s , int c"		5238471	3					
ANR	5238559	Parameter	const char * s	3221:37:66616:66628	5238471	0	True				
ANR	5238560	ParameterType	const char *		5238471	0					
ANR	5238561	Identifier	s		5238471	1					
ANR	5238562	Parameter	int c	3221:52:66631:66635	5238471	1	True				
ANR	5238563	ParameterType	int		5238471	0					
ANR	5238564	Identifier	c		5238471	1					
ANR	5238565	CFGEntryNode	ENTRY		5238471		True				
ANR	5238566	CFGExitNode	EXIT		5238471		True				
ANR	5238567	Symbol	s		5238471						
ANR	5238568	Symbol	c		5238471						
ANR	5238569	Symbol	* i		5238471						
ANR	5238570	Symbol	NULL		5238471						
ANR	5238571	Symbol	i		5238471						
ANR	5238572	Symbol	* s		5238471						
ANR	5238573	Function	r_str_highlight	3241:0:66926:68448							
ANR	5238574	FunctionDef	"r_str_highlight (char * str , const char * word , const char * color , const char * color_reset)"		5238573	0					
ANR	5238575	CompoundStatement		3241:101:67027:68448	5238573	0					
ANR	5238576	IfStatement	if ( ! str || ! * str )		5238573	0					
ANR	5238577	Condition	! str || ! * str	3242:5:67034:67046	5238573	0	True				
ANR	5238578	OrExpression	! str || ! * str		5238573	0		||			
ANR	5238579	UnaryOperationExpression	! str		5238573	0					
ANR	5238580	UnaryOperator	!		5238573	0					
ANR	5238581	Identifier	str		5238573	1					
ANR	5238582	UnaryOperationExpression	! * str		5238573	1					
ANR	5238583	UnaryOperator	!		5238573	0					
ANR	5238584	UnaryOperationExpression	* str		5238573	1					
ANR	5238585	UnaryOperator	*		5238573	0					
ANR	5238586	Identifier	str		5238573	1					
ANR	5238587	CompoundStatement		2:20:21:21	5238573	1					
ANR	5238588	ReturnStatement	return NULL ;	3243:2:67053:67064	5238573	0	True				
ANR	5238589	Identifier	NULL		5238573	0					
ANR	5238590	IdentifierDeclStatement	"ut32 i = 0 , j = 0 , to_copy ;"	3245:1:67070:67096	5238573	1	True				
ANR	5238591	IdentifierDecl	i = 0		5238573	0					
ANR	5238592	IdentifierDeclType	ut32		5238573	0					
ANR	5238593	Identifier	i		5238573	1					
ANR	5238594	AssignmentExpression	i = 0		5238573	2		=			
ANR	5238595	Identifier	i		5238573	0					
ANR	5238596	PrimaryExpression	0		5238573	1					
ANR	5238597	IdentifierDecl	j = 0		5238573	1					
ANR	5238598	IdentifierDeclType	ut32		5238573	0					
ANR	5238599	Identifier	j		5238573	1					
ANR	5238600	AssignmentExpression	j = 0		5238573	2		=			
ANR	5238601	Identifier	j		5238573	0					
ANR	5238602	PrimaryExpression	0		5238573	1					
ANR	5238603	IdentifierDecl	to_copy		5238573	2					
ANR	5238604	IdentifierDeclType	ut32		5238573	0					
ANR	5238605	Identifier	to_copy		5238573	1					
ANR	5238606	IdentifierDeclStatement	char * start = str ;	3246:1:67099:67116	5238573	2	True				
ANR	5238607	IdentifierDecl	* start = str		5238573	0					
ANR	5238608	IdentifierDeclType	char *		5238573	0					
ANR	5238609	Identifier	start		5238573	1					
ANR	5238610	AssignmentExpression	* start = str		5238573	2		=			
ANR	5238611	Identifier	str		5238573	0					
ANR	5238612	Identifier	str		5238573	1					
ANR	5238613	IdentifierDeclStatement	ut32 l_str = strlen ( str ) ;	3247:1:67119:67144	5238573	3	True				
ANR	5238614	IdentifierDecl	l_str = strlen ( str )		5238573	0					
ANR	5238615	IdentifierDeclType	ut32		5238573	0					
ANR	5238616	Identifier	l_str		5238573	1					
ANR	5238617	AssignmentExpression	l_str = strlen ( str )		5238573	2		=			
ANR	5238618	Identifier	l_str		5238573	0					
ANR	5238619	CallExpression	strlen ( str )		5238573	1					
ANR	5238620	Callee	strlen		5238573	0					
ANR	5238621	Identifier	strlen		5238573	0					
ANR	5238622	ArgumentList	str		5238573	1					
ANR	5238623	Argument	str		5238573	0					
ANR	5238624	Identifier	str		5238573	0					
ANR	5238625	IdentifierDeclStatement	ut32 l_reset = strlen ( color_reset ) ;	3248:1:67147:67182	5238573	4	True				
ANR	5238626	IdentifierDecl	l_reset = strlen ( color_reset )		5238573	0					
ANR	5238627	IdentifierDeclType	ut32		5238573	0					
ANR	5238628	Identifier	l_reset		5238573	1					
ANR	5238629	AssignmentExpression	l_reset = strlen ( color_reset )		5238573	2		=			
ANR	5238630	Identifier	l_reset		5238573	0					
ANR	5238631	CallExpression	strlen ( color_reset )		5238573	1					
ANR	5238632	Callee	strlen		5238573	0					
ANR	5238633	Identifier	strlen		5238573	0					
ANR	5238634	ArgumentList	color_reset		5238573	1					
ANR	5238635	Argument	color_reset		5238573	0					
ANR	5238636	Identifier	color_reset		5238573	0					
ANR	5238637	IdentifierDeclStatement	ut32 l_color = color ? strlen ( color ) : 0 ;	3249:1:67185:67224	5238573	5	True				
ANR	5238638	IdentifierDecl	l_color = color ? strlen ( color ) : 0		5238573	0					
ANR	5238639	IdentifierDeclType	ut32		5238573	0					
ANR	5238640	Identifier	l_color		5238573	1					
ANR	5238641	AssignmentExpression	l_color = color ? strlen ( color ) : 0		5238573	2		=			
ANR	5238642	Identifier	l_color		5238573	0					
ANR	5238643	ConditionalExpression	color ? strlen ( color ) : 0		5238573	1					
ANR	5238644	Condition	color		5238573	0					
ANR	5238645	Identifier	color		5238573	0					
ANR	5238646	CallExpression	strlen ( color )		5238573	1					
ANR	5238647	Callee	strlen		5238573	0					
ANR	5238648	Identifier	strlen		5238573	0					
ANR	5238649	ArgumentList	color		5238573	1					
ANR	5238650	Argument	color		5238573	0					
ANR	5238651	Identifier	color		5238573	0					
ANR	5238652	PrimaryExpression	0		5238573	2					
ANR	5238653	IfStatement	if ( ! color )		5238573	6					
ANR	5238654	Condition	! color	3250:5:67231:67236	5238573	0	True				
ANR	5238655	UnaryOperationExpression	! color		5238573	0					
ANR	5238656	UnaryOperator	!		5238573	0					
ANR	5238657	Identifier	color		5238573	1					
ANR	5238658	CompoundStatement		10:13:211:211	5238573	1					
ANR	5238659	ReturnStatement	return strdup ( str ) ;	3251:2:67243:67262	5238573	0	True				
ANR	5238660	CallExpression	strdup ( str )		5238573	0					
ANR	5238661	Callee	strdup		5238573	0					
ANR	5238662	Identifier	strdup		5238573	0					
ANR	5238663	ArgumentList	str		5238573	1					
ANR	5238664	Argument	str		5238573	0					
ANR	5238665	Identifier	str		5238573	0					
ANR	5238666	IfStatement	if ( ! word || ! * word )		5238573	7					
ANR	5238667	Condition	! word || ! * word	3253:5:67272:67286	5238573	0	True				
ANR	5238668	OrExpression	! word || ! * word		5238573	0		||			
ANR	5238669	UnaryOperationExpression	! word		5238573	0					
ANR	5238670	UnaryOperator	!		5238573	0					
ANR	5238671	Identifier	word		5238573	1					
ANR	5238672	UnaryOperationExpression	! * word		5238573	1					
ANR	5238673	UnaryOperator	!		5238573	0					
ANR	5238674	UnaryOperationExpression	* word		5238573	1					
ANR	5238675	UnaryOperator	*		5238573	0					
ANR	5238676	Identifier	word		5238573	1					
ANR	5238677	CompoundStatement		13:22:261:261	5238573	1					
ANR	5238678	ReturnStatement	"return r_str_newf ( ""%s%s%s"" , color , str , color_reset ) ;"	3254:2:67293:67346	5238573	0	True				
ANR	5238679	CallExpression	"r_str_newf ( ""%s%s%s"" , color , str , color_reset )"		5238573	0					
ANR	5238680	Callee	r_str_newf		5238573	0					
ANR	5238681	Identifier	r_str_newf		5238573	0					
ANR	5238682	ArgumentList	"""%s%s%s"""		5238573	1					
ANR	5238683	Argument	"""%s%s%s"""		5238573	0					
ANR	5238684	PrimaryExpression	"""%s%s%s"""		5238573	0					
ANR	5238685	Argument	color		5238573	1					
ANR	5238686	Identifier	color		5238573	0					
ANR	5238687	Argument	str		5238573	2					
ANR	5238688	Identifier	str		5238573	0					
ANR	5238689	Argument	color_reset		5238573	3					
ANR	5238690	Identifier	color_reset		5238573	0					
ANR	5238691	IdentifierDeclStatement	ut32 l_word = strlen ( word ) ;	3256:1:67352:67379	5238573	8	True				
ANR	5238692	IdentifierDecl	l_word = strlen ( word )		5238573	0					
ANR	5238693	IdentifierDeclType	ut32		5238573	0					
ANR	5238694	Identifier	l_word		5238573	1					
ANR	5238695	AssignmentExpression	l_word = strlen ( word )		5238573	2		=			
ANR	5238696	Identifier	l_word		5238573	0					
ANR	5238697	CallExpression	strlen ( word )		5238573	1					
ANR	5238698	Callee	strlen		5238573	0					
ANR	5238699	Identifier	strlen		5238573	0					
ANR	5238700	ArgumentList	word		5238573	1					
ANR	5238701	Argument	word		5238573	0					
ANR	5238702	Identifier	word		5238573	0					
ANR	5238703	IdentifierDeclStatement	char o [ 1024 ] = { 0 } ;	3258:1:67415:67433	5238573	9	True				
ANR	5238704	IdentifierDecl	o [ 1024 ] = { 0 }		5238573	0					
ANR	5238705	IdentifierDeclType	char [ 1024 ]		5238573	0					
ANR	5238706	Identifier	o		5238573	1					
ANR	5238707	PrimaryExpression	1024		5238573	2					
ANR	5238708	AssignmentExpression	o [ 1024 ] = { 0 }		5238573	3		=			
ANR	5238709	Identifier	o		5238573	0					
ANR	5238710	InitializerList	0		5238573	1					
ANR	5238711	PrimaryExpression	0		5238573	0					
ANR	5238712	WhileStatement	while ( start && ( start < str + l_str ) )		5238573	10					
ANR	5238713	Condition	start && ( start < str + l_str )	3259:8:67443:67472	5238573	0	True				
ANR	5238714	AndExpression	start && ( start < str + l_str )		5238573	0		&&			
ANR	5238715	Identifier	start		5238573	0					
ANR	5238716	RelationalExpression	start < str + l_str		5238573	1		<			
ANR	5238717	Identifier	start		5238573	0					
ANR	5238718	AdditiveExpression	str + l_str		5238573	1		+			
ANR	5238719	Identifier	str		5238573	0					
ANR	5238720	Identifier	l_str		5238573	1					
ANR	5238721	CompoundStatement		20:2:451:465	5238573	1					
ANR	5238722	IdentifierDeclStatement	int copied = 0 ;	3260:2:67479:67493	5238573	0	True				
ANR	5238723	IdentifierDecl	copied = 0		5238573	0					
ANR	5238724	IdentifierDeclType	int		5238573	0					
ANR	5238725	Identifier	copied		5238573	1					
ANR	5238726	AssignmentExpression	copied = 0		5238573	2		=			
ANR	5238727	Identifier	copied		5238573	0					
ANR	5238728	PrimaryExpression	0		5238573	1					
ANR	5238729	ExpressionStatement	"start = strchr_skip_color_codes ( str + i , * word )"	3262:2:67520:67568	5238573	1	True				
ANR	5238730	AssignmentExpression	"start = strchr_skip_color_codes ( str + i , * word )"		5238573	0		=			
ANR	5238731	Identifier	start		5238573	0					
ANR	5238732	CallExpression	"strchr_skip_color_codes ( str + i , * word )"		5238573	1					
ANR	5238733	Callee	strchr_skip_color_codes		5238573	0					
ANR	5238734	Identifier	strchr_skip_color_codes		5238573	0					
ANR	5238735	ArgumentList	str + i		5238573	1					
ANR	5238736	Argument	str + i		5238573	0					
ANR	5238737	AdditiveExpression	str + i		5238573	0		+			
ANR	5238738	Identifier	str		5238573	0					
ANR	5238739	Identifier	i		5238573	1					
ANR	5238740	Argument	* word		5238573	1					
ANR	5238741	UnaryOperationExpression	* word		5238573	0					
ANR	5238742	UnaryOperator	*		5238573	0					
ANR	5238743	Identifier	word		5238573	1					
ANR	5238744	IfStatement	if ( start )		5238573	2					
ANR	5238745	Condition	start	3263:6:67576:67580	5238573	0	True				
ANR	5238746	Identifier	start		5238573	0					
ANR	5238747	CompoundStatement		23:13:555:555	5238573	1					
ANR	5238748	ExpressionStatement	to_copy = start - ( str + i )	3264:3:67588:67615	5238573	0	True				
ANR	5238749	AssignmentExpression	to_copy = start - ( str + i )		5238573	0		=			
ANR	5238750	Identifier	to_copy		5238573	0					
ANR	5238751	AdditiveExpression	start - ( str + i )		5238573	1		-			
ANR	5238752	Identifier	start		5238573	0					
ANR	5238753	AdditiveExpression	str + i		5238573	1		+			
ANR	5238754	Identifier	str		5238573	0					
ANR	5238755	Identifier	i		5238573	1					
ANR	5238756	IfStatement	if ( to_copy + j + 1 > sizeof ( o ) )		5238573	1					
ANR	5238757	Condition	to_copy + j + 1 > sizeof ( o )	3265:7:67624:67651	5238573	0	True				
ANR	5238758	RelationalExpression	to_copy + j + 1 > sizeof ( o )		5238573	0		>			
ANR	5238759	AdditiveExpression	to_copy + j + 1		5238573	0		+			
ANR	5238760	Identifier	to_copy		5238573	0					
ANR	5238761	AdditiveExpression	j + 1		5238573	1		+			
ANR	5238762	Identifier	j		5238573	0					
ANR	5238763	PrimaryExpression	1		5238573	1					
ANR	5238764	SizeofExpression	sizeof ( o )		5238573	1					
ANR	5238765	Sizeof	sizeof		5238573	0					
ANR	5238766	SizeofOperand	o		5238573	1					
ANR	5238767	CompoundStatement		25:37:626:626	5238573	1					
ANR	5238768	BreakStatement	break ;	3267:4:67682:67687	5238573	0	True				
ANR	5238769	ExpressionStatement	"strncpy ( o + j , str + i , to_copy )"	3269:3:67697:67730	5238573	2	True				
ANR	5238770	CallExpression	"strncpy ( o + j , str + i , to_copy )"		5238573	0					
ANR	5238771	Callee	strncpy		5238573	0					
ANR	5238772	Identifier	strncpy		5238573	0					
ANR	5238773	ArgumentList	o + j		5238573	1					
ANR	5238774	Argument	o + j		5238573	0					
ANR	5238775	AdditiveExpression	o + j		5238573	0		+			
ANR	5238776	Identifier	o		5238573	0					
ANR	5238777	Identifier	j		5238573	1					
ANR	5238778	Argument	str + i		5238573	1					
ANR	5238779	AdditiveExpression	str + i		5238573	0		+			
ANR	5238780	Identifier	str		5238573	0					
ANR	5238781	Identifier	i		5238573	1					
ANR	5238782	Argument	to_copy		5238573	2					
ANR	5238783	Identifier	to_copy		5238573	0					
ANR	5238784	ExpressionStatement	i += to_copy	3270:3:67735:67747	5238573	3	True				
ANR	5238785	AssignmentExpression	i += to_copy		5238573	0		+=			
ANR	5238786	Identifier	i		5238573	0					
ANR	5238787	Identifier	to_copy		5238573	1					
ANR	5238788	ExpressionStatement	j += to_copy	3271:3:67752:67764	5238573	4	True				
ANR	5238789	AssignmentExpression	j += to_copy		5238573	0		+=			
ANR	5238790	Identifier	j		5238573	0					
ANR	5238791	Identifier	to_copy		5238573	1					
ANR	5238792	IfStatement	"if ( ! strncmp_skip_color_codes ( start , word , l_word ) )"		5238573	5					
ANR	5238793	Condition	"! strncmp_skip_color_codes ( start , word , l_word )"	3272:7:67773:67819	5238573	0	True				
ANR	5238794	UnaryOperationExpression	"! strncmp_skip_color_codes ( start , word , l_word )"		5238573	0					
ANR	5238795	UnaryOperator	!		5238573	0					
ANR	5238796	CallExpression	"strncmp_skip_color_codes ( start , word , l_word )"		5238573	1					
ANR	5238797	Callee	strncmp_skip_color_codes		5238573	0					
ANR	5238798	Identifier	strncmp_skip_color_codes		5238573	0					
ANR	5238799	ArgumentList	start		5238573	1					
ANR	5238800	Argument	start		5238573	0					
ANR	5238801	Identifier	start		5238573	0					
ANR	5238802	Argument	word		5238573	1					
ANR	5238803	Identifier	word		5238573	0					
ANR	5238804	Argument	l_word		5238573	2					
ANR	5238805	Identifier	l_word		5238573	0					
ANR	5238806	CompoundStatement		32:56:794:794	5238573	1					
ANR	5238807	IfStatement	if ( j + strlen ( color ) >= sizeof ( o ) )		5238573	0					
ANR	5238808	Condition	j + strlen ( color ) >= sizeof ( o )	3273:8:67832:67863	5238573	0	True				
ANR	5238809	RelationalExpression	j + strlen ( color ) >= sizeof ( o )		5238573	0		>=			
ANR	5238810	AdditiveExpression	j + strlen ( color )		5238573	0		+			
ANR	5238811	Identifier	j		5238573	0					
ANR	5238812	CallExpression	strlen ( color )		5238573	1					
ANR	5238813	Callee	strlen		5238573	0					
ANR	5238814	Identifier	strlen		5238573	0					
ANR	5238815	ArgumentList	color		5238573	1					
ANR	5238816	Argument	color		5238573	0					
ANR	5238817	Identifier	color		5238573	0					
ANR	5238818	SizeofExpression	sizeof ( o )		5238573	1					
ANR	5238819	Sizeof	sizeof		5238573	0					
ANR	5238820	SizeofOperand	o		5238573	1					
ANR	5238821	CompoundStatement		33:42:838:838	5238573	1					
ANR	5238822	BreakStatement	break ;	3275:5:67896:67901	5238573	0	True				
ANR	5238823	ExpressionStatement	"strcpy ( o + j , color )"	3277:4:67913:67934	5238573	1	True				
ANR	5238824	CallExpression	"strcpy ( o + j , color )"		5238573	0					
ANR	5238825	Callee	strcpy		5238573	0					
ANR	5238826	Identifier	strcpy		5238573	0					
ANR	5238827	ArgumentList	o + j		5238573	1					
ANR	5238828	Argument	o + j		5238573	0					
ANR	5238829	AdditiveExpression	o + j		5238573	0		+			
ANR	5238830	Identifier	o		5238573	0					
ANR	5238831	Identifier	j		5238573	1					
ANR	5238832	Argument	color		5238573	1					
ANR	5238833	Identifier	color		5238573	0					
ANR	5238834	ExpressionStatement	j += l_color	3278:4:67940:67952	5238573	2	True				
ANR	5238835	AssignmentExpression	j += l_color		5238573	0		+=			
ANR	5238836	Identifier	j		5238573	0					
ANR	5238837	Identifier	l_color		5238573	1					
ANR	5238838	IfStatement	if ( j + l_word >= sizeof ( o ) )		5238573	3					
ANR	5238839	Condition	j + l_word >= sizeof ( o )	3279:8:67962:67985	5238573	0	True				
ANR	5238840	RelationalExpression	j + l_word >= sizeof ( o )		5238573	0		>=			
ANR	5238841	AdditiveExpression	j + l_word		5238573	0		+			
ANR	5238842	Identifier	j		5238573	0					
ANR	5238843	Identifier	l_word		5238573	1					
ANR	5238844	SizeofExpression	sizeof ( o )		5238573	1					
ANR	5238845	Sizeof	sizeof		5238573	0					
ANR	5238846	SizeofOperand	o		5238573	1					
ANR	5238847	CompoundStatement		39:34:960:960	5238573	1					
ANR	5238848	BreakStatement	break ;	3281:5:68018:68023	5238573	0	True				
ANR	5238849	ExpressionStatement	"copied = strncpy_with_color_codes ( o + j , str + i , l_word )"	3283:4:68035:68093	5238573	4	True				
ANR	5238850	AssignmentExpression	"copied = strncpy_with_color_codes ( o + j , str + i , l_word )"		5238573	0		=			
ANR	5238851	Identifier	copied		5238573	0					
ANR	5238852	CallExpression	"strncpy_with_color_codes ( o + j , str + i , l_word )"		5238573	1					
ANR	5238853	Callee	strncpy_with_color_codes		5238573	0					
ANR	5238854	Identifier	strncpy_with_color_codes		5238573	0					
ANR	5238855	ArgumentList	o + j		5238573	1					
ANR	5238856	Argument	o + j		5238573	0					
ANR	5238857	AdditiveExpression	o + j		5238573	0		+			
ANR	5238858	Identifier	o		5238573	0					
ANR	5238859	Identifier	j		5238573	1					
ANR	5238860	Argument	str + i		5238573	1					
ANR	5238861	AdditiveExpression	str + i		5238573	0		+			
ANR	5238862	Identifier	str		5238573	0					
ANR	5238863	Identifier	i		5238573	1					
ANR	5238864	Argument	l_word		5238573	2					
ANR	5238865	Identifier	l_word		5238573	0					
ANR	5238866	ExpressionStatement	i += copied	3284:4:68099:68110	5238573	5	True				
ANR	5238867	AssignmentExpression	i += copied		5238573	0		+=			
ANR	5238868	Identifier	i		5238573	0					
ANR	5238869	Identifier	copied		5238573	1					
ANR	5238870	ExpressionStatement	j += copied	3285:4:68116:68127	5238573	6	True				
ANR	5238871	AssignmentExpression	j += copied		5238573	0		+=			
ANR	5238872	Identifier	j		5238573	0					
ANR	5238873	Identifier	copied		5238573	1					
ANR	5238874	IfStatement	if ( j + strlen ( color_reset ) >= sizeof ( o ) )		5238573	7					
ANR	5238875	Condition	j + strlen ( color_reset ) >= sizeof ( o )	3286:8:68137:68174	5238573	0	True				
ANR	5238876	RelationalExpression	j + strlen ( color_reset ) >= sizeof ( o )		5238573	0		>=			
ANR	5238877	AdditiveExpression	j + strlen ( color_reset )		5238573	0		+			
ANR	5238878	Identifier	j		5238573	0					
ANR	5238879	CallExpression	strlen ( color_reset )		5238573	1					
ANR	5238880	Callee	strlen		5238573	0					
ANR	5238881	Identifier	strlen		5238573	0					
ANR	5238882	ArgumentList	color_reset		5238573	1					
ANR	5238883	Argument	color_reset		5238573	0					
ANR	5238884	Identifier	color_reset		5238573	0					
ANR	5238885	SizeofExpression	sizeof ( o )		5238573	1					
ANR	5238886	Sizeof	sizeof		5238573	0					
ANR	5238887	SizeofOperand	o		5238573	1					
ANR	5238888	CompoundStatement		46:48:1149:1149	5238573	1					
ANR	5238889	BreakStatement	break ;	3288:5:68207:68212	5238573	0	True				
ANR	5238890	ExpressionStatement	"strcpy ( o + j , color_reset )"	3290:4:68224:68251	5238573	8	True				
ANR	5238891	CallExpression	"strcpy ( o + j , color_reset )"		5238573	0					
ANR	5238892	Callee	strcpy		5238573	0					
ANR	5238893	Identifier	strcpy		5238573	0					
ANR	5238894	ArgumentList	o + j		5238573	1					
ANR	5238895	Argument	o + j		5238573	0					
ANR	5238896	AdditiveExpression	o + j		5238573	0		+			
ANR	5238897	Identifier	o		5238573	0					
ANR	5238898	Identifier	j		5238573	1					
ANR	5238899	Argument	color_reset		5238573	1					
ANR	5238900	Identifier	color_reset		5238573	0					
ANR	5238901	ExpressionStatement	j += l_reset	3291:4:68257:68269	5238573	9	True				
ANR	5238902	AssignmentExpression	j += l_reset		5238573	0		+=			
ANR	5238903	Identifier	j		5238573	0					
ANR	5238904	Identifier	l_reset		5238573	1					
ANR	5238905	ElseStatement	else		5238573	0					
ANR	5238906	CompoundStatement		52:10:1253:1253	5238573	0					
ANR	5238907	ExpressionStatement	o [ j ++ ] = str [ i ++ ]	3293:4:68287:68304	5238573	0	True				
ANR	5238908	AssignmentExpression	o [ j ++ ] = str [ i ++ ]		5238573	0		=			
ANR	5238909	ArrayIndexing	o [ j ++ ]		5238573	0					
ANR	5238910	Identifier	o		5238573	0					
ANR	5238911	PostIncDecOperationExpression	j ++		5238573	1					
ANR	5238912	Identifier	j		5238573	0					
ANR	5238913	IncDec	++		5238573	1					
ANR	5238914	ArrayIndexing	str [ i ++ ]		5238573	1					
ANR	5238915	Identifier	str		5238573	0					
ANR	5238916	PostIncDecOperationExpression	i ++		5238573	1					
ANR	5238917	Identifier	i		5238573	0					
ANR	5238918	IncDec	++		5238573	1					
ANR	5238919	ElseStatement	else		5238573	0					
ANR	5238920	CompoundStatement		55:9:1292:1292	5238573	0					
ANR	5238921	IfStatement	if ( j + strlen ( str + i ) >= sizeof ( o ) )		5238573	0					
ANR	5238922	Condition	j + strlen ( str + i ) >= sizeof ( o )	3296:7:68329:68362	5238573	0	True				
ANR	5238923	RelationalExpression	j + strlen ( str + i ) >= sizeof ( o )		5238573	0		>=			
ANR	5238924	AdditiveExpression	j + strlen ( str + i )		5238573	0		+			
ANR	5238925	Identifier	j		5238573	0					
ANR	5238926	CallExpression	strlen ( str + i )		5238573	1					
ANR	5238927	Callee	strlen		5238573	0					
ANR	5238928	Identifier	strlen		5238573	0					
ANR	5238929	ArgumentList	str + i		5238573	1					
ANR	5238930	Argument	str + i		5238573	0					
ANR	5238931	AdditiveExpression	str + i		5238573	0		+			
ANR	5238932	Identifier	str		5238573	0					
ANR	5238933	Identifier	i		5238573	1					
ANR	5238934	SizeofExpression	sizeof ( o )		5238573	1					
ANR	5238935	Sizeof	sizeof		5238573	0					
ANR	5238936	SizeofOperand	o		5238573	1					
ANR	5238937	CompoundStatement		56:43:1337:1337	5238573	1					
ANR	5238938	BreakStatement	break ;	3297:4:68371:68376	5238573	0	True				
ANR	5238939	ExpressionStatement	"strcpy ( o + j , str + i )"	3299:3:68386:68409	5238573	1	True				
ANR	5238940	CallExpression	"strcpy ( o + j , str + i )"		5238573	0					
ANR	5238941	Callee	strcpy		5238573	0					
ANR	5238942	Identifier	strcpy		5238573	0					
ANR	5238943	ArgumentList	o + j		5238573	1					
ANR	5238944	Argument	o + j		5238573	0					
ANR	5238945	AdditiveExpression	o + j		5238573	0		+			
ANR	5238946	Identifier	o		5238573	0					
ANR	5238947	Identifier	j		5238573	1					
ANR	5238948	Argument	str + i		5238573	1					
ANR	5238949	AdditiveExpression	str + i		5238573	0		+			
ANR	5238950	Identifier	str		5238573	0					
ANR	5238951	Identifier	i		5238573	1					
ANR	5238952	BreakStatement	break ;	3300:3:68414:68419	5238573	2	True				
ANR	5238953	ReturnStatement	return strdup ( o ) ;	3303:1:68429:68446	5238573	11	True				
ANR	5238954	CallExpression	strdup ( o )		5238573	0					
ANR	5238955	Callee	strdup		5238573	0					
ANR	5238956	Identifier	strdup		5238573	0					
ANR	5238957	ArgumentList	o		5238573	1					
ANR	5238958	Argument	o		5238573	0					
ANR	5238959	Identifier	o		5238573	0					
ANR	5238960	ReturnType	R_API char *		5238573	1					
ANR	5238961	Identifier	r_str_highlight		5238573	2					
ANR	5238962	ParameterList	"char * str , const char * word , const char * color , const char * color_reset"		5238573	3					
ANR	5238963	Parameter	char * str	3241:28:66954:66962	5238573	0	True				
ANR	5238964	ParameterType	char *		5238573	0					
ANR	5238965	Identifier	str		5238573	1					
ANR	5238966	Parameter	const char * word	3241:39:66965:66980	5238573	1	True				
ANR	5238967	ParameterType	const char *		5238573	0					
ANR	5238968	Identifier	word		5238573	1					
ANR	5238969	Parameter	const char * color	3241:57:66983:66999	5238573	2	True				
ANR	5238970	ParameterType	const char *		5238573	0					
ANR	5238971	Identifier	color		5238573	1					
ANR	5238972	Parameter	const char * color_reset	3241:76:67002:67024	5238573	3	True				
ANR	5238973	ParameterType	const char *		5238573	0					
ANR	5238974	Identifier	color_reset		5238573	1					
ANR	5238975	CFGEntryNode	ENTRY		5238573		True				
ANR	5238976	CFGExitNode	EXIT		5238573		True				
ANR	5238977	Symbol	l_str		5238573						
ANR	5238978	Symbol	l_word		5238573						
ANR	5238979	Symbol	NULL		5238573						
ANR	5238980	Symbol	color		5238573						
ANR	5238981	Symbol	copied		5238573						
ANR	5238982	Symbol	* word		5238573						
ANR	5238983	Symbol	start		5238573						
ANR	5238984	Symbol	i		5238573						
ANR	5238985	Symbol	j		5238573						
ANR	5238986	Symbol	r_str_newf		5238573						
ANR	5238987	Symbol	l_reset		5238573						
ANR	5238988	Symbol	o		5238573						
ANR	5238989	Symbol	str		5238573						
ANR	5238990	Symbol	color_reset		5238573						
ANR	5238991	Symbol	strlen		5238573						
ANR	5238992	Symbol	l_color		5238573						
ANR	5238993	Symbol	strncmp_skip_color_codes		5238573						
ANR	5238994	Symbol	strncpy_with_color_codes		5238573						
ANR	5238995	Symbol	* o		5238573						
ANR	5238996	Symbol	* str		5238573						
ANR	5238997	Symbol	strdup		5238573						
ANR	5238998	Symbol	word		5238573						
ANR	5238999	Symbol	to_copy		5238573						
ANR	5239000	Symbol	strchr_skip_color_codes		5238573						
ANR	5239001	Function	r_str_mb_to_wc_l	3306:0:68451:68992							
ANR	5239002	FunctionDef	"r_str_mb_to_wc_l (const char * buf , int len)"		5239001	0					
ANR	5239003	CompoundStatement		3306:58:68509:68992	5239001	0					
ANR	5239004	IdentifierDeclStatement	wchar_t * res_buf = NULL ;	3307:1:68512:68535	5239001	0	True				
ANR	5239005	IdentifierDecl	* res_buf = NULL		5239001	0					
ANR	5239006	IdentifierDeclType	wchar_t *		5239001	0					
ANR	5239007	Identifier	res_buf		5239001	1					
ANR	5239008	AssignmentExpression	* res_buf = NULL		5239001	2		=			
ANR	5239009	Identifier	NULL		5239001	0					
ANR	5239010	Identifier	NULL		5239001	1					
ANR	5239011	IdentifierDeclStatement	size_t sz ;	3308:1:68538:68547	5239001	1	True				
ANR	5239012	IdentifierDecl	sz		5239001	0					
ANR	5239013	IdentifierDeclType	size_t		5239001	0					
ANR	5239014	Identifier	sz		5239001	1					
ANR	5239015	IdentifierDeclStatement	bool fail = true ;	3309:1:68550:68566	5239001	2	True				
ANR	5239016	IdentifierDecl	fail = true		5239001	0					
ANR	5239017	IdentifierDeclType	bool		5239001	0					
ANR	5239018	Identifier	fail		5239001	1					
ANR	5239019	AssignmentExpression	fail = true		5239001	2		=			
ANR	5239020	Identifier	true		5239001	0					
ANR	5239021	Identifier	true		5239001	1					
ANR	5239022	IfStatement	if ( ! buf || len <= 0 )		5239001	3					
ANR	5239023	Condition	! buf || len <= 0	3311:5:68574:68589	5239001	0	True				
ANR	5239024	OrExpression	! buf || len <= 0		5239001	0		||			
ANR	5239025	UnaryOperationExpression	! buf		5239001	0					
ANR	5239026	UnaryOperator	!		5239001	0					
ANR	5239027	Identifier	buf		5239001	1					
ANR	5239028	RelationalExpression	len <= 0		5239001	1		<=			
ANR	5239029	Identifier	len		5239001	0					
ANR	5239030	PrimaryExpression	0		5239001	1					
ANR	5239031	CompoundStatement		6:23:82:82	5239001	1					
ANR	5239032	ReturnStatement	return NULL ;	3312:2:68596:68607	5239001	0	True				
ANR	5239033	Identifier	NULL		5239001	0					
ANR	5239034	ExpressionStatement	"sz = mbstowcs ( NULL , buf , len )"	3314:1:68613:68643	5239001	4	True				
ANR	5239035	AssignmentExpression	"sz = mbstowcs ( NULL , buf , len )"		5239001	0		=			
ANR	5239036	Identifier	sz		5239001	0					
ANR	5239037	CallExpression	"mbstowcs ( NULL , buf , len )"		5239001	1					
ANR	5239038	Callee	mbstowcs		5239001	0					
ANR	5239039	Identifier	mbstowcs		5239001	0					
ANR	5239040	ArgumentList	NULL		5239001	1					
ANR	5239041	Argument	NULL		5239001	0					
ANR	5239042	Identifier	NULL		5239001	0					
ANR	5239043	Argument	buf		5239001	1					
ANR	5239044	Identifier	buf		5239001	0					
ANR	5239045	Argument	len		5239001	2					
ANR	5239046	Identifier	len		5239001	0					
ANR	5239047	IfStatement	if ( sz == ( size_t ) - 1 )		5239001	5					
ANR	5239048	Condition	sz == ( size_t ) - 1	3315:5:68650:68665	5239001	0	True				
ANR	5239049	EqualityExpression	sz == ( size_t ) - 1		5239001	0		==			
ANR	5239050	Identifier	sz		5239001	0					
ANR	5239051	CastExpression	( size_t ) - 1		5239001	1					
ANR	5239052	CastTarget	size_t		5239001	0					
ANR	5239053	UnaryOperationExpression	- 1		5239001	1					
ANR	5239054	UnaryOperator	-		5239001	0					
ANR	5239055	PrimaryExpression	1		5239001	1					
ANR	5239056	CompoundStatement		10:23:158:158	5239001	1					
ANR	5239057	GotoStatement	goto err_r_str_mb_to_wc ;	3316:2:68672:68695	5239001	0	True				
ANR	5239058	Identifier	err_r_str_mb_to_wc		5239001	0					
ANR	5239059	ExpressionStatement	"res_buf = ( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"	3318:1:68701:68761	5239001	6	True				
ANR	5239060	AssignmentExpression	"res_buf = ( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		5239001	0		=			
ANR	5239061	Identifier	res_buf		5239001	0					
ANR	5239062	CastExpression	"( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		5239001	1					
ANR	5239063	CastTarget	wchar_t *		5239001	0					
ANR	5239064	CallExpression	"calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		5239001	1					
ANR	5239065	Callee	calloc		5239001	0					
ANR	5239066	Identifier	calloc		5239001	0					
ANR	5239067	ArgumentList	1		5239001	1					
ANR	5239068	Argument	1		5239001	0					
ANR	5239069	PrimaryExpression	1		5239001	0					
ANR	5239070	Argument	( sz + 1 ) * sizeof ( wchar_t )		5239001	1					
ANR	5239071	MultiplicativeExpression	( sz + 1 ) * sizeof ( wchar_t )		5239001	0		*			
ANR	5239072	AdditiveExpression	sz + 1		5239001	0		+			
ANR	5239073	Identifier	sz		5239001	0					
ANR	5239074	PrimaryExpression	1		5239001	1					
ANR	5239075	SizeofExpression	sizeof ( wchar_t )		5239001	1					
ANR	5239076	Sizeof	sizeof		5239001	0					
ANR	5239077	SizeofOperand	wchar_t		5239001	1					
ANR	5239078	IfStatement	if ( ! res_buf )		5239001	7					
ANR	5239079	Condition	! res_buf	3319:5:68768:68775	5239001	0	True				
ANR	5239080	UnaryOperationExpression	! res_buf		5239001	0					
ANR	5239081	UnaryOperator	!		5239001	0					
ANR	5239082	Identifier	res_buf		5239001	1					
ANR	5239083	CompoundStatement		14:15:268:268	5239001	1					
ANR	5239084	GotoStatement	goto err_r_str_mb_to_wc ;	3320:2:68782:68805	5239001	0	True				
ANR	5239085	Identifier	err_r_str_mb_to_wc		5239001	0					
ANR	5239086	ExpressionStatement	"sz = mbstowcs ( res_buf , buf , sz + 1 )"	3322:1:68811:68847	5239001	8	True				
ANR	5239087	AssignmentExpression	"sz = mbstowcs ( res_buf , buf , sz + 1 )"		5239001	0		=			
ANR	5239088	Identifier	sz		5239001	0					
ANR	5239089	CallExpression	"mbstowcs ( res_buf , buf , sz + 1 )"		5239001	1					
ANR	5239090	Callee	mbstowcs		5239001	0					
ANR	5239091	Identifier	mbstowcs		5239001	0					
ANR	5239092	ArgumentList	res_buf		5239001	1					
ANR	5239093	Argument	res_buf		5239001	0					
ANR	5239094	Identifier	res_buf		5239001	0					
ANR	5239095	Argument	buf		5239001	1					
ANR	5239096	Identifier	buf		5239001	0					
ANR	5239097	Argument	sz + 1		5239001	2					
ANR	5239098	AdditiveExpression	sz + 1		5239001	0		+			
ANR	5239099	Identifier	sz		5239001	0					
ANR	5239100	PrimaryExpression	1		5239001	1					
ANR	5239101	IfStatement	if ( sz == ( size_t ) - 1 )		5239001	9					
ANR	5239102	Condition	sz == ( size_t ) - 1	3323:5:68854:68869	5239001	0	True				
ANR	5239103	EqualityExpression	sz == ( size_t ) - 1		5239001	0		==			
ANR	5239104	Identifier	sz		5239001	0					
ANR	5239105	CastExpression	( size_t ) - 1		5239001	1					
ANR	5239106	CastTarget	size_t		5239001	0					
ANR	5239107	UnaryOperationExpression	- 1		5239001	1					
ANR	5239108	UnaryOperator	-		5239001	0					
ANR	5239109	PrimaryExpression	1		5239001	1					
ANR	5239110	CompoundStatement		18:23:362:362	5239001	1					
ANR	5239111	GotoStatement	goto err_r_str_mb_to_wc ;	3324:2:68876:68899	5239001	0	True				
ANR	5239112	Identifier	err_r_str_mb_to_wc		5239001	0					
ANR	5239113	ExpressionStatement	fail = false	3326:1:68905:68917	5239001	10	True				
ANR	5239114	AssignmentExpression	fail = false		5239001	0		=			
ANR	5239115	Identifier	fail		5239001	0					
ANR	5239116	Identifier	false		5239001	1					
ANR	5239117	Label	err_r_str_mb_to_wc :	3327:0:68919:68937	5239001	11	True				
ANR	5239118	Identifier	err_r_str_mb_to_wc		5239001	0					
ANR	5239119	IfStatement	if ( fail )		5239001	12					
ANR	5239120	Condition	fail	3328:5:68944:68947	5239001	0	True				
ANR	5239121	Identifier	fail		5239001	0					
ANR	5239122	CompoundStatement		23:11:440:440	5239001	1					
ANR	5239123	ExpressionStatement	R_FREE ( res_buf )	3329:2:68954:68970	5239001	0	True				
ANR	5239124	CallExpression	R_FREE ( res_buf )		5239001	0					
ANR	5239125	Callee	R_FREE		5239001	0					
ANR	5239126	Identifier	R_FREE		5239001	0					
ANR	5239127	ArgumentList	res_buf		5239001	1					
ANR	5239128	Argument	res_buf		5239001	0					
ANR	5239129	Identifier	res_buf		5239001	0					
ANR	5239130	ReturnStatement	return res_buf ;	3331:1:68976:68990	5239001	13	True				
ANR	5239131	Identifier	res_buf		5239001	0					
ANR	5239132	ReturnType	R_API wchar_t *		5239001	1					
ANR	5239133	Identifier	r_str_mb_to_wc_l		5239001	2					
ANR	5239134	ParameterList	"const char * buf , int len"		5239001	3					
ANR	5239135	Parameter	const char * buf	3306:32:68483:68497	5239001	0	True				
ANR	5239136	ParameterType	const char *		5239001	0					
ANR	5239137	Identifier	buf		5239001	1					
ANR	5239138	Parameter	int len	3306:49:68500:68506	5239001	1	True				
ANR	5239139	ParameterType	int		5239001	0					
ANR	5239140	Identifier	len		5239001	1					
ANR	5239141	CFGEntryNode	ENTRY		5239001		True				
ANR	5239142	CFGExitNode	EXIT		5239001		True				
ANR	5239143	Symbol	fail		5239001						
ANR	5239144	Symbol	buf		5239001						
ANR	5239145	Symbol	NULL		5239001						
ANR	5239146	Symbol	len		5239001						
ANR	5239147	Symbol	res_buf		5239001						
ANR	5239148	Symbol	sz		5239001						
ANR	5239149	Symbol	true		5239001						
ANR	5239150	Symbol	false		5239001						
ANR	5239151	Symbol	mbstowcs		5239001						
ANR	5239152	Symbol	calloc		5239001						
ANR	5239153	Function	r_str_wc_to_mb_l	3334:0:68995:69527							
ANR	5239154	FunctionDef	"r_str_wc_to_mb_l (const wchar_t * buf , int len)"		5239153	0					
ANR	5239155	CompoundStatement		3334:58:69053:69527	5239153	0					
ANR	5239156	IdentifierDeclStatement	char * res_buf = NULL ;	3335:1:69056:69076	5239153	0	True				
ANR	5239157	IdentifierDecl	* res_buf = NULL		5239153	0					
ANR	5239158	IdentifierDeclType	char *		5239153	0					
ANR	5239159	Identifier	res_buf		5239153	1					
ANR	5239160	AssignmentExpression	* res_buf = NULL		5239153	2		=			
ANR	5239161	Identifier	NULL		5239153	0					
ANR	5239162	Identifier	NULL		5239153	1					
ANR	5239163	IdentifierDeclStatement	bool fail = true ;	3336:1:69079:69095	5239153	1	True				
ANR	5239164	IdentifierDecl	fail = true		5239153	0					
ANR	5239165	IdentifierDeclType	bool		5239153	0					
ANR	5239166	Identifier	fail		5239153	1					
ANR	5239167	AssignmentExpression	fail = true		5239153	2		=			
ANR	5239168	Identifier	true		5239153	0					
ANR	5239169	Identifier	true		5239153	1					
ANR	5239170	IdentifierDeclStatement	size_t sz ;	3337:1:69098:69107	5239153	2	True				
ANR	5239171	IdentifierDecl	sz		5239153	0					
ANR	5239172	IdentifierDeclType	size_t		5239153	0					
ANR	5239173	Identifier	sz		5239153	1					
ANR	5239174	IfStatement	if ( ! buf || len <= 0 )		5239153	3					
ANR	5239175	Condition	! buf || len <= 0	3339:5:69115:69130	5239153	0	True				
ANR	5239176	OrExpression	! buf || len <= 0		5239153	0		||			
ANR	5239177	UnaryOperationExpression	! buf		5239153	0					
ANR	5239178	UnaryOperator	!		5239153	0					
ANR	5239179	Identifier	buf		5239153	1					
ANR	5239180	RelationalExpression	len <= 0		5239153	1		<=			
ANR	5239181	Identifier	len		5239153	0					
ANR	5239182	PrimaryExpression	0		5239153	1					
ANR	5239183	CompoundStatement		6:23:79:79	5239153	1					
ANR	5239184	ReturnStatement	return NULL ;	3340:2:69137:69148	5239153	0	True				
ANR	5239185	Identifier	NULL		5239153	0					
ANR	5239186	ExpressionStatement	"sz = wcstombs ( NULL , buf , len )"	3342:1:69154:69184	5239153	4	True				
ANR	5239187	AssignmentExpression	"sz = wcstombs ( NULL , buf , len )"		5239153	0		=			
ANR	5239188	Identifier	sz		5239153	0					
ANR	5239189	CallExpression	"wcstombs ( NULL , buf , len )"		5239153	1					
ANR	5239190	Callee	wcstombs		5239153	0					
ANR	5239191	Identifier	wcstombs		5239153	0					
ANR	5239192	ArgumentList	NULL		5239153	1					
ANR	5239193	Argument	NULL		5239153	0					
ANR	5239194	Identifier	NULL		5239153	0					
ANR	5239195	Argument	buf		5239153	1					
ANR	5239196	Identifier	buf		5239153	0					
ANR	5239197	Argument	len		5239153	2					
ANR	5239198	Identifier	len		5239153	0					
ANR	5239199	IfStatement	if ( sz == ( size_t ) - 1 )		5239153	5					
ANR	5239200	Condition	sz == ( size_t ) - 1	3343:5:69191:69206	5239153	0	True				
ANR	5239201	EqualityExpression	sz == ( size_t ) - 1		5239153	0		==			
ANR	5239202	Identifier	sz		5239153	0					
ANR	5239203	CastExpression	( size_t ) - 1		5239153	1					
ANR	5239204	CastTarget	size_t		5239153	0					
ANR	5239205	UnaryOperationExpression	- 1		5239153	1					
ANR	5239206	UnaryOperator	-		5239153	0					
ANR	5239207	PrimaryExpression	1		5239153	1					
ANR	5239208	CompoundStatement		10:23:155:155	5239153	1					
ANR	5239209	GotoStatement	goto err_r_str_wc_to_mb ;	3344:2:69213:69236	5239153	0	True				
ANR	5239210	Identifier	err_r_str_wc_to_mb		5239153	0					
ANR	5239211	ExpressionStatement	"res_buf = ( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"	3346:1:69242:69296	5239153	6	True				
ANR	5239212	AssignmentExpression	"res_buf = ( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		5239153	0		=			
ANR	5239213	Identifier	res_buf		5239153	0					
ANR	5239214	CastExpression	"( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		5239153	1					
ANR	5239215	CastTarget	char *		5239153	0					
ANR	5239216	CallExpression	"calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		5239153	1					
ANR	5239217	Callee	calloc		5239153	0					
ANR	5239218	Identifier	calloc		5239153	0					
ANR	5239219	ArgumentList	1		5239153	1					
ANR	5239220	Argument	1		5239153	0					
ANR	5239221	PrimaryExpression	1		5239153	0					
ANR	5239222	Argument	( sz + 1 ) * sizeof ( char )		5239153	1					
ANR	5239223	MultiplicativeExpression	( sz + 1 ) * sizeof ( char )		5239153	0		*			
ANR	5239224	AdditiveExpression	sz + 1		5239153	0		+			
ANR	5239225	Identifier	sz		5239153	0					
ANR	5239226	PrimaryExpression	1		5239153	1					
ANR	5239227	SizeofExpression	sizeof ( char )		5239153	1					
ANR	5239228	Sizeof	sizeof		5239153	0					
ANR	5239229	SizeofOperand	char		5239153	1					
ANR	5239230	IfStatement	if ( ! res_buf )		5239153	7					
ANR	5239231	Condition	! res_buf	3347:5:69303:69310	5239153	0	True				
ANR	5239232	UnaryOperationExpression	! res_buf		5239153	0					
ANR	5239233	UnaryOperator	!		5239153	0					
ANR	5239234	Identifier	res_buf		5239153	1					
ANR	5239235	CompoundStatement		14:15:259:259	5239153	1					
ANR	5239236	GotoStatement	goto err_r_str_wc_to_mb ;	3348:2:69317:69340	5239153	0	True				
ANR	5239237	Identifier	err_r_str_wc_to_mb		5239153	0					
ANR	5239238	ExpressionStatement	"sz = wcstombs ( res_buf , buf , sz + 1 )"	3350:1:69346:69382	5239153	8	True				
ANR	5239239	AssignmentExpression	"sz = wcstombs ( res_buf , buf , sz + 1 )"		5239153	0		=			
ANR	5239240	Identifier	sz		5239153	0					
ANR	5239241	CallExpression	"wcstombs ( res_buf , buf , sz + 1 )"		5239153	1					
ANR	5239242	Callee	wcstombs		5239153	0					
ANR	5239243	Identifier	wcstombs		5239153	0					
ANR	5239244	ArgumentList	res_buf		5239153	1					
ANR	5239245	Argument	res_buf		5239153	0					
ANR	5239246	Identifier	res_buf		5239153	0					
ANR	5239247	Argument	buf		5239153	1					
ANR	5239248	Identifier	buf		5239153	0					
ANR	5239249	Argument	sz + 1		5239153	2					
ANR	5239250	AdditiveExpression	sz + 1		5239153	0		+			
ANR	5239251	Identifier	sz		5239153	0					
ANR	5239252	PrimaryExpression	1		5239153	1					
ANR	5239253	IfStatement	if ( sz == ( size_t ) - 1 )		5239153	9					
ANR	5239254	Condition	sz == ( size_t ) - 1	3351:5:69389:69404	5239153	0	True				
ANR	5239255	EqualityExpression	sz == ( size_t ) - 1		5239153	0		==			
ANR	5239256	Identifier	sz		5239153	0					
ANR	5239257	CastExpression	( size_t ) - 1		5239153	1					
ANR	5239258	CastTarget	size_t		5239153	0					
ANR	5239259	UnaryOperationExpression	- 1		5239153	1					
ANR	5239260	UnaryOperator	-		5239153	0					
ANR	5239261	PrimaryExpression	1		5239153	1					
ANR	5239262	CompoundStatement		18:23:353:353	5239153	1					
ANR	5239263	GotoStatement	goto err_r_str_wc_to_mb ;	3352:2:69411:69434	5239153	0	True				
ANR	5239264	Identifier	err_r_str_wc_to_mb		5239153	0					
ANR	5239265	ExpressionStatement	fail = false	3354:1:69440:69452	5239153	10	True				
ANR	5239266	AssignmentExpression	fail = false		5239153	0		=			
ANR	5239267	Identifier	fail		5239153	0					
ANR	5239268	Identifier	false		5239153	1					
ANR	5239269	Label	err_r_str_wc_to_mb :	3355:0:69454:69472	5239153	11	True				
ANR	5239270	Identifier	err_r_str_wc_to_mb		5239153	0					
ANR	5239271	IfStatement	if ( fail )		5239153	12					
ANR	5239272	Condition	fail	3356:5:69479:69482	5239153	0	True				
ANR	5239273	Identifier	fail		5239153	0					
ANR	5239274	CompoundStatement		23:11:431:431	5239153	1					
ANR	5239275	ExpressionStatement	R_FREE ( res_buf )	3357:2:69489:69505	5239153	0	True				
ANR	5239276	CallExpression	R_FREE ( res_buf )		5239153	0					
ANR	5239277	Callee	R_FREE		5239153	0					
ANR	5239278	Identifier	R_FREE		5239153	0					
ANR	5239279	ArgumentList	res_buf		5239153	1					
ANR	5239280	Argument	res_buf		5239153	0					
ANR	5239281	Identifier	res_buf		5239153	0					
ANR	5239282	ReturnStatement	return res_buf ;	3359:1:69511:69525	5239153	13	True				
ANR	5239283	Identifier	res_buf		5239153	0					
ANR	5239284	ReturnType	R_API char *		5239153	1					
ANR	5239285	Identifier	r_str_wc_to_mb_l		5239153	2					
ANR	5239286	ParameterList	"const wchar_t * buf , int len"		5239153	3					
ANR	5239287	Parameter	const wchar_t * buf	3334:29:69024:69041	5239153	0	True				
ANR	5239288	ParameterType	const wchar_t *		5239153	0					
ANR	5239289	Identifier	buf		5239153	1					
ANR	5239290	Parameter	int len	3334:49:69044:69050	5239153	1	True				
ANR	5239291	ParameterType	int		5239153	0					
ANR	5239292	Identifier	len		5239153	1					
ANR	5239293	CFGEntryNode	ENTRY		5239153		True				
ANR	5239294	CFGExitNode	EXIT		5239153		True				
ANR	5239295	Symbol	fail		5239153						
ANR	5239296	Symbol	buf		5239153						
ANR	5239297	Symbol	NULL		5239153						
ANR	5239298	Symbol	len		5239153						
ANR	5239299	Symbol	wcstombs		5239153						
ANR	5239300	Symbol	res_buf		5239153						
ANR	5239301	Symbol	sz		5239153						
ANR	5239302	Symbol	true		5239153						
ANR	5239303	Symbol	false		5239153						
ANR	5239304	Symbol	calloc		5239153						
ANR	5239305	Function	r_str_wc_to_mb	3362:0:69530:69656							
ANR	5239306	FunctionDef	r_str_wc_to_mb (const wchar_t * buf)		5239305	0					
ANR	5239307	CompoundStatement		3362:47:69577:69656	5239305	0					
ANR	5239308	IfStatement	if ( ! buf )		5239305	0					
ANR	5239309	Condition	! buf	3363:5:69584:69587	5239305	0	True				
ANR	5239310	UnaryOperationExpression	! buf		5239305	0					
ANR	5239311	UnaryOperator	!		5239305	0					
ANR	5239312	Identifier	buf		5239305	1					
ANR	5239313	CompoundStatement		2:11:12:12	5239305	1					
ANR	5239314	ReturnStatement	return NULL ;	3364:2:69594:69605	5239305	0	True				
ANR	5239315	Identifier	NULL		5239305	0					
ANR	5239316	ReturnStatement	"return r_str_wc_to_mb_l ( buf , wcslen ( buf ) ) ;"	3366:1:69611:69654	5239305	1	True				
ANR	5239317	CallExpression	"r_str_wc_to_mb_l ( buf , wcslen ( buf ) )"		5239305	0					
ANR	5239318	Callee	r_str_wc_to_mb_l		5239305	0					
ANR	5239319	Identifier	r_str_wc_to_mb_l		5239305	0					
ANR	5239320	ArgumentList	buf		5239305	1					
ANR	5239321	Argument	buf		5239305	0					
ANR	5239322	Identifier	buf		5239305	0					
ANR	5239323	Argument	wcslen ( buf )		5239305	1					
ANR	5239324	CallExpression	wcslen ( buf )		5239305	0					
ANR	5239325	Callee	wcslen		5239305	0					
ANR	5239326	Identifier	wcslen		5239305	0					
ANR	5239327	ArgumentList	buf		5239305	1					
ANR	5239328	Argument	buf		5239305	0					
ANR	5239329	Identifier	buf		5239305	0					
ANR	5239330	ReturnType	R_API char *		5239305	1					
ANR	5239331	Identifier	r_str_wc_to_mb		5239305	2					
ANR	5239332	ParameterList	const wchar_t * buf		5239305	3					
ANR	5239333	Parameter	const wchar_t * buf	3362:27:69557:69574	5239305	0	True				
ANR	5239334	ParameterType	const wchar_t *		5239305	0					
ANR	5239335	Identifier	buf		5239305	1					
ANR	5239336	CFGEntryNode	ENTRY		5239305		True				
ANR	5239337	CFGExitNode	EXIT		5239305		True				
ANR	5239338	Symbol	buf		5239305						
ANR	5239339	Symbol	NULL		5239305						
ANR	5239340	Symbol	wcslen		5239305						
ANR	5239341	Symbol	r_str_wc_to_mb_l		5239305						
ANR	5239342	Function	r_str_mb_to_wc	3369:0:69659:69785							
ANR	5239343	FunctionDef	r_str_mb_to_wc (const char * buf)		5239342	0					
ANR	5239344	CompoundStatement		3369:47:69706:69785	5239342	0					
ANR	5239345	IfStatement	if ( ! buf )		5239342	0					
ANR	5239346	Condition	! buf	3370:5:69713:69716	5239342	0	True				
ANR	5239347	UnaryOperationExpression	! buf		5239342	0					
ANR	5239348	UnaryOperator	!		5239342	0					
ANR	5239349	Identifier	buf		5239342	1					
ANR	5239350	CompoundStatement		2:11:12:12	5239342	1					
ANR	5239351	ReturnStatement	return NULL ;	3371:2:69723:69734	5239342	0	True				
ANR	5239352	Identifier	NULL		5239342	0					
ANR	5239353	ReturnStatement	"return r_str_mb_to_wc_l ( buf , strlen ( buf ) ) ;"	3373:1:69740:69783	5239342	1	True				
ANR	5239354	CallExpression	"r_str_mb_to_wc_l ( buf , strlen ( buf ) )"		5239342	0					
ANR	5239355	Callee	r_str_mb_to_wc_l		5239342	0					
ANR	5239356	Identifier	r_str_mb_to_wc_l		5239342	0					
ANR	5239357	ArgumentList	buf		5239342	1					
ANR	5239358	Argument	buf		5239342	0					
ANR	5239359	Identifier	buf		5239342	0					
ANR	5239360	Argument	strlen ( buf )		5239342	1					
ANR	5239361	CallExpression	strlen ( buf )		5239342	0					
ANR	5239362	Callee	strlen		5239342	0					
ANR	5239363	Identifier	strlen		5239342	0					
ANR	5239364	ArgumentList	buf		5239342	1					
ANR	5239365	Argument	buf		5239342	0					
ANR	5239366	Identifier	buf		5239342	0					
ANR	5239367	ReturnType	R_API wchar_t *		5239342	1					
ANR	5239368	Identifier	r_str_mb_to_wc		5239342	2					
ANR	5239369	ParameterList	const char * buf		5239342	3					
ANR	5239370	Parameter	const char * buf	3369:30:69689:69703	5239342	0	True				
ANR	5239371	ParameterType	const char *		5239342	0					
ANR	5239372	Identifier	buf		5239342	1					
ANR	5239373	CFGEntryNode	ENTRY		5239342		True				
ANR	5239374	CFGExitNode	EXIT		5239342		True				
ANR	5239375	Symbol	strlen		5239342						
ANR	5239376	Symbol	buf		5239342						
ANR	5239377	Symbol	NULL		5239342						
ANR	5239378	Symbol	r_str_mb_to_wc_l		5239342						
ANR	5239379	Function	r_str_from_ut64	3376:0:69788:69989							
ANR	5239380	FunctionDef	r_str_from_ut64 (ut64 val)		5239379	0					
ANR	5239381	CompoundStatement		3376:38:69826:69989	5239379	0					
ANR	5239382	IdentifierDeclStatement	int i = 0 ;	3377:1:69829:69838	5239379	0	True				
ANR	5239383	IdentifierDecl	i = 0		5239379	0					
ANR	5239384	IdentifierDeclType	int		5239379	0					
ANR	5239385	Identifier	i		5239379	1					
ANR	5239386	AssignmentExpression	i = 0		5239379	2		=			
ANR	5239387	Identifier	i		5239379	0					
ANR	5239388	PrimaryExpression	0		5239379	1					
ANR	5239389	IdentifierDeclStatement	char * v = ( char * ) & val ;	3378:1:69841:69863	5239379	1	True				
ANR	5239390	IdentifierDecl	* v = ( char * ) & val		5239379	0					
ANR	5239391	IdentifierDeclType	char *		5239379	0					
ANR	5239392	Identifier	v		5239379	1					
ANR	5239393	AssignmentExpression	* v = ( char * ) & val		5239379	2		=			
ANR	5239394	Identifier	v		5239379	0					
ANR	5239395	CastExpression	( char * ) & val		5239379	1					
ANR	5239396	CastTarget	char *		5239379	0					
ANR	5239397	UnaryOperationExpression	& val		5239379	1					
ANR	5239398	UnaryOperator	&		5239379	0					
ANR	5239399	Identifier	val		5239379	1					
ANR	5239400	IdentifierDeclStatement	"char * str = ( char * ) calloc ( 1 , 9 ) ;"	3379:1:69866:69898	5239379	2	True				
ANR	5239401	IdentifierDecl	"* str = ( char * ) calloc ( 1 , 9 )"		5239379	0					
ANR	5239402	IdentifierDeclType	char *		5239379	0					
ANR	5239403	Identifier	str		5239379	1					
ANR	5239404	AssignmentExpression	"* str = ( char * ) calloc ( 1 , 9 )"		5239379	2		=			
ANR	5239405	Identifier	str		5239379	0					
ANR	5239406	CastExpression	"( char * ) calloc ( 1 , 9 )"		5239379	1					
ANR	5239407	CastTarget	char *		5239379	0					
ANR	5239408	CallExpression	"calloc ( 1 , 9 )"		5239379	1					
ANR	5239409	Callee	calloc		5239379	0					
ANR	5239410	Identifier	calloc		5239379	0					
ANR	5239411	ArgumentList	1		5239379	1					
ANR	5239412	Argument	1		5239379	0					
ANR	5239413	PrimaryExpression	1		5239379	0					
ANR	5239414	Argument	9		5239379	1					
ANR	5239415	PrimaryExpression	9		5239379	0					
ANR	5239416	IfStatement	if ( ! str )		5239379	3					
ANR	5239417	Condition	! str	3380:5:69905:69908	5239379	0	True				
ANR	5239418	UnaryOperationExpression	! str		5239379	0					
ANR	5239419	UnaryOperator	!		5239379	0					
ANR	5239420	Identifier	str		5239379	1					
ANR	5239421	CompoundStatement		5:11:84:84	5239379	1					
ANR	5239422	ReturnStatement	return NULL ;	3381:2:69915:69926	5239379	0	True				
ANR	5239423	Identifier	NULL		5239379	0					
ANR	5239424	WhileStatement	while ( i < 8 && * v )		5239379	4					
ANR	5239425	Condition	i < 8 && * v	3383:8:69939:69949	5239379	0	True				
ANR	5239426	AndExpression	i < 8 && * v		5239379	0		&&			
ANR	5239427	RelationalExpression	i < 8		5239379	0		<			
ANR	5239428	Identifier	i		5239379	0					
ANR	5239429	PrimaryExpression	8		5239379	1					
ANR	5239430	UnaryOperationExpression	* v		5239379	1					
ANR	5239431	UnaryOperator	*		5239379	0					
ANR	5239432	Identifier	v		5239379	1					
ANR	5239433	CompoundStatement		8:21:125:125	5239379	1					
ANR	5239434	ExpressionStatement	str [ i ++ ] = * v ++	3384:2:69956:69971	5239379	0	True				
ANR	5239435	AssignmentExpression	str [ i ++ ] = * v ++		5239379	0		=			
ANR	5239436	ArrayIndexing	str [ i ++ ]		5239379	0					
ANR	5239437	Identifier	str		5239379	0					
ANR	5239438	PostIncDecOperationExpression	i ++		5239379	1					
ANR	5239439	Identifier	i		5239379	0					
ANR	5239440	IncDec	++		5239379	1					
ANR	5239441	UnaryOperationExpression	* v ++		5239379	1					
ANR	5239442	UnaryOperator	*		5239379	0					
ANR	5239443	PostIncDecOperationExpression	v ++		5239379	1					
ANR	5239444	Identifier	v		5239379	0					
ANR	5239445	IncDec	++		5239379	1					
ANR	5239446	ReturnStatement	return str ;	3386:1:69977:69987	5239379	5	True				
ANR	5239447	Identifier	str		5239379	0					
ANR	5239448	ReturnType	R_API char *		5239379	1					
ANR	5239449	Identifier	r_str_from_ut64		5239379	2					
ANR	5239450	ParameterList	ut64 val		5239379	3					
ANR	5239451	Parameter	ut64 val	3376:28:69816:69823	5239379	0	True				
ANR	5239452	ParameterType	ut64		5239379	0					
ANR	5239453	Identifier	val		5239379	1					
ANR	5239454	CFGEntryNode	ENTRY		5239379		True				
ANR	5239455	CFGExitNode	EXIT		5239379		True				
ANR	5239456	Symbol	val		5239379						
ANR	5239457	Symbol	& val		5239379						
ANR	5239458	Symbol	str		5239379						
ANR	5239459	Symbol	* v		5239379						
ANR	5239460	Symbol	NULL		5239379						
ANR	5239461	Symbol	* v ++		5239379						
ANR	5239462	Symbol	v		5239379						
ANR	5239463	Symbol	i		5239379						
ANR	5239464	Symbol	calloc		5239379						
ANR	5239465	Symbol	* str		5239379						
ANR	5239466	Function	r_snprintf	3389:0:69992:70188							
ANR	5239467	FunctionDef	"r_snprintf (char * string , int len , const char * fmt)"		5239466	0					
ANR	5239468	CompoundStatement		3389:66:70058:70188	5239466	0					
ANR	5239469	IdentifierDeclStatement	va_list ap ;	3390:1:70061:70071	5239466	0	True				
ANR	5239470	IdentifierDecl	ap		5239466	0					
ANR	5239471	IdentifierDeclType	va_list		5239466	0					
ANR	5239472	Identifier	ap		5239466	1					
ANR	5239473	ExpressionStatement	"va_start ( ap , fmt )"	3391:1:70074:70092	5239466	1	True				
ANR	5239474	CallExpression	"va_start ( ap , fmt )"		5239466	0					
ANR	5239475	Callee	va_start		5239466	0					
ANR	5239476	Identifier	va_start		5239466	0					
ANR	5239477	ArgumentList	ap		5239466	1					
ANR	5239478	Argument	ap		5239466	0					
ANR	5239479	Identifier	ap		5239466	0					
ANR	5239480	Argument	fmt		5239466	1					
ANR	5239481	Identifier	fmt		5239466	0					
ANR	5239482	IdentifierDeclStatement	"int ret = vsnprintf ( string , len , fmt , ap ) ;"	3392:1:70095:70137	5239466	2	True				
ANR	5239483	IdentifierDecl	"ret = vsnprintf ( string , len , fmt , ap )"		5239466	0					
ANR	5239484	IdentifierDeclType	int		5239466	0					
ANR	5239485	Identifier	ret		5239466	1					
ANR	5239486	AssignmentExpression	"ret = vsnprintf ( string , len , fmt , ap )"		5239466	2		=			
ANR	5239487	Identifier	ret		5239466	0					
ANR	5239488	CallExpression	"vsnprintf ( string , len , fmt , ap )"		5239466	1					
ANR	5239489	Callee	vsnprintf		5239466	0					
ANR	5239490	Identifier	vsnprintf		5239466	0					
ANR	5239491	ArgumentList	string		5239466	1					
ANR	5239492	Argument	string		5239466	0					
ANR	5239493	Identifier	string		5239466	0					
ANR	5239494	Argument	len		5239466	1					
ANR	5239495	Identifier	len		5239466	0					
ANR	5239496	Argument	fmt		5239466	2					
ANR	5239497	Identifier	fmt		5239466	0					
ANR	5239498	Argument	ap		5239466	3					
ANR	5239499	Identifier	ap		5239466	0					
ANR	5239500	ExpressionStatement	string [ len - 1 ] = 0	3393:1:70140:70159	5239466	3	True				
ANR	5239501	AssignmentExpression	string [ len - 1 ] = 0		5239466	0		=			
ANR	5239502	ArrayIndexing	string [ len - 1 ]		5239466	0					
ANR	5239503	Identifier	string		5239466	0					
ANR	5239504	AdditiveExpression	len - 1		5239466	1		-			
ANR	5239505	Identifier	len		5239466	0					
ANR	5239506	PrimaryExpression	1		5239466	1					
ANR	5239507	PrimaryExpression	0		5239466	1					
ANR	5239508	ExpressionStatement	va_end ( ap )	3394:1:70162:70173	5239466	4	True				
ANR	5239509	CallExpression	va_end ( ap )		5239466	0					
ANR	5239510	Callee	va_end		5239466	0					
ANR	5239511	Identifier	va_end		5239466	0					
ANR	5239512	ArgumentList	ap		5239466	1					
ANR	5239513	Argument	ap		5239466	0					
ANR	5239514	Identifier	ap		5239466	0					
ANR	5239515	ReturnStatement	return ret ;	3395:1:70176:70186	5239466	5	True				
ANR	5239516	Identifier	ret		5239466	0					
ANR	5239517	ReturnType	R_API int		5239466	1					
ANR	5239518	Identifier	r_snprintf		5239466	2					
ANR	5239519	ParameterList	"char * string , int len , const char * fmt"		5239466	3					
ANR	5239520	Parameter	char * string	3389:21:70013:70024	5239466	0	True				
ANR	5239521	ParameterType	char *		5239466	0					
ANR	5239522	Identifier	string		5239466	1					
ANR	5239523	Parameter	int len	3389:35:70027:70033	5239466	1	True				
ANR	5239524	ParameterType	int		5239466	0					
ANR	5239525	Identifier	len		5239466	1					
ANR	5239526	Parameter	const char * fmt	3389:44:70036:70050	5239466	2	True				
ANR	5239527	ParameterType	const char *		5239466	0					
ANR	5239528	Identifier	fmt		5239466	1					
ANR	5239529	CFGEntryNode	ENTRY		5239466		True				
ANR	5239530	CFGExitNode	EXIT		5239466		True				
ANR	5239531	Symbol	ret		5239466						
ANR	5239532	Symbol	string		5239466						
ANR	5239533	Symbol	len		5239466						
ANR	5239534	Symbol	* string		5239466						
ANR	5239535	Symbol	fmt		5239466						
ANR	5239536	Symbol	vsnprintf		5239466						
ANR	5239537	Symbol	ap		5239466						
ANR	5239538	Symbol	* len		5239466						
ANR	5239539	Function	r_str_stripLine	3399:0:70239:70919							
ANR	5239540	FunctionDef	"r_str_stripLine (char * str , const char * key)"		5239539	0					
ANR	5239541	CompoundStatement		3399:55:70294:70919	5239539	0					
ANR	5239542	IdentifierDeclStatement	"size_t i , j , klen , slen , off ;"	3400:1:70297:70325	5239539	0	True				
ANR	5239543	IdentifierDecl	i		5239539	0					
ANR	5239544	IdentifierDeclType	size_t		5239539	0					
ANR	5239545	Identifier	i		5239539	1					
ANR	5239546	IdentifierDecl	j		5239539	1					
ANR	5239547	IdentifierDeclType	size_t		5239539	0					
ANR	5239548	Identifier	j		5239539	1					
ANR	5239549	IdentifierDecl	klen		5239539	2					
ANR	5239550	IdentifierDeclType	size_t		5239539	0					
ANR	5239551	Identifier	klen		5239539	1					
ANR	5239552	IdentifierDecl	slen		5239539	3					
ANR	5239553	IdentifierDeclType	size_t		5239539	0					
ANR	5239554	Identifier	slen		5239539	1					
ANR	5239555	IdentifierDecl	off		5239539	4					
ANR	5239556	IdentifierDeclType	size_t		5239539	0					
ANR	5239557	Identifier	off		5239539	1					
ANR	5239558	IdentifierDeclStatement	const char * ptr ;	3401:1:70328:70343	5239539	1	True				
ANR	5239559	IdentifierDecl	* ptr		5239539	0					
ANR	5239560	IdentifierDeclType	const char *		5239539	0					
ANR	5239561	Identifier	ptr		5239539	1					
ANR	5239562	IfStatement	if ( ! str || ! key )		5239539	2					
ANR	5239563	Condition	! str || ! key	3403:5:70352:70363	5239539	0	True				
ANR	5239564	OrExpression	! str || ! key		5239539	0		||			
ANR	5239565	UnaryOperationExpression	! str		5239539	0					
ANR	5239566	UnaryOperator	!		5239539	0					
ANR	5239567	Identifier	str		5239539	1					
ANR	5239568	UnaryOperationExpression	! key		5239539	1					
ANR	5239569	UnaryOperator	!		5239539	0					
ANR	5239570	Identifier	key		5239539	1					
ANR	5239571	CompoundStatement		5:19:71:71	5239539	1					
ANR	5239572	ReturnStatement	return ;	3404:2:70370:70376	5239539	0	True				
ANR	5239573	ExpressionStatement	klen = strlen ( key )	3406:1:70382:70401	5239539	3	True				
ANR	5239574	AssignmentExpression	klen = strlen ( key )		5239539	0		=			
ANR	5239575	Identifier	klen		5239539	0					
ANR	5239576	CallExpression	strlen ( key )		5239539	1					
ANR	5239577	Callee	strlen		5239539	0					
ANR	5239578	Identifier	strlen		5239539	0					
ANR	5239579	ArgumentList	key		5239539	1					
ANR	5239580	Argument	key		5239539	0					
ANR	5239581	Identifier	key		5239539	0					
ANR	5239582	ExpressionStatement	slen = strlen ( str )	3407:1:70404:70423	5239539	4	True				
ANR	5239583	AssignmentExpression	slen = strlen ( str )		5239539	0		=			
ANR	5239584	Identifier	slen		5239539	0					
ANR	5239585	CallExpression	strlen ( str )		5239539	1					
ANR	5239586	Callee	strlen		5239539	0					
ANR	5239587	Identifier	strlen		5239539	0					
ANR	5239588	ArgumentList	str		5239539	1					
ANR	5239589	Argument	str		5239539	0					
ANR	5239590	Identifier	str		5239539	0					
ANR	5239591	ForStatement	for ( i = 0 ; i < slen ; )		5239539	5					
ANR	5239592	ForInit	i = 0 ;	3409:6:70432:70437	5239539	0	True				
ANR	5239593	AssignmentExpression	i = 0		5239539	0		=			
ANR	5239594	Identifier	i		5239539	0					
ANR	5239595	PrimaryExpression	0		5239539	1					
ANR	5239596	Condition	i < slen	3409:13:70439:70446	5239539	1	True				
ANR	5239597	RelationalExpression	i < slen		5239539	0		<			
ANR	5239598	Identifier	i		5239539	0					
ANR	5239599	Identifier	slen		5239539	1					
ANR	5239600	CompoundStatement		11:25:156:156	5239539	2					
ANR	5239601	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"	3410:2:70455:70521	5239539	0	True				
ANR	5239602	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		5239539	0		=			
ANR	5239603	Identifier	ptr		5239539	0					
ANR	5239604	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		5239539	1					
ANR	5239605	CastTarget	char *		5239539	0					
ANR	5239606	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		5239539	1					
ANR	5239607	Callee	r_mem_mem		5239539	0					
ANR	5239608	Identifier	r_mem_mem		5239539	0					
ANR	5239609	ArgumentList	( ut8 * ) str + i		5239539	1					
ANR	5239610	Argument	( ut8 * ) str + i		5239539	0					
ANR	5239611	AdditiveExpression	( ut8 * ) str + i		5239539	0		+			
ANR	5239612	CastExpression	( ut8 * ) str		5239539	0					
ANR	5239613	CastTarget	ut8 *		5239539	0					
ANR	5239614	Identifier	str		5239539	1					
ANR	5239615	Identifier	i		5239539	1					
ANR	5239616	Argument	slen - i		5239539	1					
ANR	5239617	AdditiveExpression	slen - i		5239539	0		-			
ANR	5239618	Identifier	slen		5239539	0					
ANR	5239619	Identifier	i		5239539	1					
ANR	5239620	Argument	"( ut8 * ) ""\\n"""		5239539	2					
ANR	5239621	CastExpression	"( ut8 * ) ""\\n"""		5239539	0					
ANR	5239622	CastTarget	ut8 *		5239539	0					
ANR	5239623	PrimaryExpression	"""\\n"""		5239539	1					
ANR	5239624	Argument	1		5239539	3					
ANR	5239625	PrimaryExpression	1		5239539	0					
ANR	5239626	IfStatement	if ( ! ptr )		5239539	1					
ANR	5239627	Condition	! ptr	3411:6:70529:70532	5239539	0	True				
ANR	5239628	UnaryOperationExpression	! ptr		5239539	0					
ANR	5239629	UnaryOperator	!		5239539	0					
ANR	5239630	Identifier	ptr		5239539	1					
ANR	5239631	CompoundStatement		13:12:240:240	5239539	1					
ANR	5239632	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"	3412:3:70540:70608	5239539	0	True				
ANR	5239633	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		5239539	0		=			
ANR	5239634	Identifier	ptr		5239539	0					
ANR	5239635	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		5239539	1					
ANR	5239636	CastTarget	char *		5239539	0					
ANR	5239637	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		5239539	1					
ANR	5239638	Callee	r_mem_mem		5239539	0					
ANR	5239639	Identifier	r_mem_mem		5239539	0					
ANR	5239640	ArgumentList	( ut8 * ) str + i		5239539	1					
ANR	5239641	Argument	( ut8 * ) str + i		5239539	0					
ANR	5239642	AdditiveExpression	( ut8 * ) str + i		5239539	0		+			
ANR	5239643	CastExpression	( ut8 * ) str		5239539	0					
ANR	5239644	CastTarget	ut8 *		5239539	0					
ANR	5239645	Identifier	str		5239539	1					
ANR	5239646	Identifier	i		5239539	1					
ANR	5239647	Argument	slen - i		5239539	1					
ANR	5239648	AdditiveExpression	slen - i		5239539	0		-			
ANR	5239649	Identifier	slen		5239539	0					
ANR	5239650	Identifier	i		5239539	1					
ANR	5239651	Argument	( ut8 * ) key		5239539	2					
ANR	5239652	CastExpression	( ut8 * ) key		5239539	0					
ANR	5239653	CastTarget	ut8 *		5239539	0					
ANR	5239654	Identifier	key		5239539	1					
ANR	5239655	Argument	klen		5239539	3					
ANR	5239656	Identifier	klen		5239539	0					
ANR	5239657	IfStatement	if ( ptr )		5239539	1					
ANR	5239658	Condition	ptr	3413:7:70617:70619	5239539	0	True				
ANR	5239659	Identifier	ptr		5239539	0					
ANR	5239660	CompoundStatement		15:12:327:327	5239539	1					
ANR	5239661	ExpressionStatement	str [ i ] = '\\0'	3414:4:70628:70641	5239539	0	True				
ANR	5239662	AssignmentExpression	str [ i ] = '\\0'		5239539	0		=			
ANR	5239663	ArrayIndexing	str [ i ]		5239539	0					
ANR	5239664	Identifier	str		5239539	0					
ANR	5239665	Identifier	i		5239539	1					
ANR	5239666	PrimaryExpression	'\\0'		5239539	1					
ANR	5239667	BreakStatement	break ;	3415:4:70647:70652	5239539	1	True				
ANR	5239668	BreakStatement	break ;	3417:3:70662:70667	5239539	2	True				
ANR	5239669	ExpressionStatement	off = ( size_t ) ( ptr - ( str + i ) ) + 1	3420:2:70679:70715	5239539	2	True				
ANR	5239670	AssignmentExpression	off = ( size_t ) ( ptr - ( str + i ) ) + 1		5239539	0		=			
ANR	5239671	Identifier	off		5239539	0					
ANR	5239672	AdditiveExpression	( size_t ) ( ptr - ( str + i ) ) + 1		5239539	1		+			
ANR	5239673	CastExpression	( size_t ) ( ptr - ( str + i ) )		5239539	0					
ANR	5239674	CastTarget	size_t		5239539	0					
ANR	5239675	AdditiveExpression	ptr - ( str + i )		5239539	1		-			
ANR	5239676	Identifier	ptr		5239539	0					
ANR	5239677	AdditiveExpression	str + i		5239539	1		+			
ANR	5239678	Identifier	str		5239539	0					
ANR	5239679	Identifier	i		5239539	1					
ANR	5239680	PrimaryExpression	1		5239539	1					
ANR	5239681	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"	3422:2:70720:70783	5239539	3	True				
ANR	5239682	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		5239539	0		=			
ANR	5239683	Identifier	ptr		5239539	0					
ANR	5239684	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		5239539	1					
ANR	5239685	CastTarget	char *		5239539	0					
ANR	5239686	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		5239539	1					
ANR	5239687	Callee	r_mem_mem		5239539	0					
ANR	5239688	Identifier	r_mem_mem		5239539	0					
ANR	5239689	ArgumentList	( ut8 * ) str + i		5239539	1					
ANR	5239690	Argument	( ut8 * ) str + i		5239539	0					
ANR	5239691	AdditiveExpression	( ut8 * ) str + i		5239539	0		+			
ANR	5239692	CastExpression	( ut8 * ) str		5239539	0					
ANR	5239693	CastTarget	ut8 *		5239539	0					
ANR	5239694	Identifier	str		5239539	1					
ANR	5239695	Identifier	i		5239539	1					
ANR	5239696	Argument	off		5239539	1					
ANR	5239697	Identifier	off		5239539	0					
ANR	5239698	Argument	( ut8 * ) key		5239539	2					
ANR	5239699	CastExpression	( ut8 * ) key		5239539	0					
ANR	5239700	CastTarget	ut8 *		5239539	0					
ANR	5239701	Identifier	key		5239539	1					
ANR	5239702	Argument	klen		5239539	3					
ANR	5239703	Identifier	klen		5239539	0					
ANR	5239704	IfStatement	if ( ptr )		5239539	4					
ANR	5239705	Condition	ptr	3423:6:70791:70793	5239539	0	True				
ANR	5239706	Identifier	ptr		5239539	0					
ANR	5239707	CompoundStatement		25:11:501:501	5239539	1					
ANR	5239708	ForStatement	for ( j = i ; j < slen - off + 1 ; j ++ )		5239539	0					
ANR	5239709	ForInit	j = i ;	3424:8:70806:70811	5239539	0	True				
ANR	5239710	AssignmentExpression	j = i		5239539	0		=			
ANR	5239711	Identifier	j		5239539	0					
ANR	5239712	Identifier	i		5239539	1					
ANR	5239713	Condition	j < slen - off + 1	3424:15:70813:70830	5239539	1	True				
ANR	5239714	RelationalExpression	j < slen - off + 1		5239539	0		<			
ANR	5239715	Identifier	j		5239539	0					
ANR	5239716	AdditiveExpression	slen - off + 1		5239539	1		-			
ANR	5239717	Identifier	slen		5239539	0					
ANR	5239718	AdditiveExpression	off + 1		5239539	1		+			
ANR	5239719	Identifier	off		5239539	0					
ANR	5239720	PrimaryExpression	1		5239539	1					
ANR	5239721	PostIncDecOperationExpression	j ++	3424:35:70833:70835	5239539	2	True				
ANR	5239722	Identifier	j		5239539	0					
ANR	5239723	IncDec	++		5239539	1					
ANR	5239724	CompoundStatement		26:40:543:543	5239539	3					
ANR	5239725	ExpressionStatement	str [ j ] = str [ j + off ]	3425:4:70844:70865	5239539	0	True				
ANR	5239726	AssignmentExpression	str [ j ] = str [ j + off ]		5239539	0		=			
ANR	5239727	ArrayIndexing	str [ j ]		5239539	0					
ANR	5239728	Identifier	str		5239539	0					
ANR	5239729	Identifier	j		5239539	1					
ANR	5239730	ArrayIndexing	str [ j + off ]		5239539	1					
ANR	5239731	Identifier	str		5239539	0					
ANR	5239732	AdditiveExpression	j + off		5239539	1		+			
ANR	5239733	Identifier	j		5239539	0					
ANR	5239734	Identifier	off		5239539	1					
ANR	5239735	ExpressionStatement	slen -= off	3427:3:70875:70886	5239539	1	True				
ANR	5239736	AssignmentExpression	slen -= off		5239539	0		-=			
ANR	5239737	Identifier	slen		5239539	0					
ANR	5239738	Identifier	off		5239539	1					
ANR	5239739	ElseStatement	else		5239539	0					
ANR	5239740	CompoundStatement		30:9:602:602	5239539	0					
ANR	5239741	ExpressionStatement	i += off	3429:3:70902:70910	5239539	0	True				
ANR	5239742	AssignmentExpression	i += off		5239539	0		+=			
ANR	5239743	Identifier	i		5239539	0					
ANR	5239744	Identifier	off		5239539	1					
ANR	5239745	ReturnType	R_API void		5239539	1					
ANR	5239746	Identifier	r_str_stripLine		5239539	2					
ANR	5239747	ParameterList	"char * str , const char * key"		5239539	3					
ANR	5239748	Parameter	char * str	3399:27:70266:70274	5239539	0	True				
ANR	5239749	ParameterType	char *		5239539	0					
ANR	5239750	Identifier	str		5239539	1					
ANR	5239751	Parameter	const char * key	3399:38:70277:70291	5239539	1	True				
ANR	5239752	ParameterType	const char *		5239539	0					
ANR	5239753	Identifier	key		5239539	1					
ANR	5239754	CFGEntryNode	ENTRY		5239539		True				
ANR	5239755	CFGExitNode	EXIT		5239539		True				
ANR	5239756	Symbol	r_mem_mem		5239539						
ANR	5239757	Symbol	i		5239539						
ANR	5239758	Symbol	j		5239539						
ANR	5239759	Symbol	off		5239539						
ANR	5239760	Symbol	ptr		5239539						
ANR	5239761	Symbol	str		5239539						
ANR	5239762	Symbol	strlen		5239539						
ANR	5239763	Symbol	* i		5239539						
ANR	5239764	Symbol	* j		5239539						
ANR	5239765	Symbol	slen		5239539						
ANR	5239766	Symbol	klen		5239539						
ANR	5239767	Symbol	* off		5239539						
ANR	5239768	Symbol	* str		5239539						
ANR	5239769	Symbol	key		5239539						
ANR	5239770	Function	r_str_list_join	3434:0:70922:71198							
ANR	5239771	FunctionDef	"r_str_list_join (RList * str , const char * sep)"		5239770	0					
ANR	5239772	CompoundStatement		3434:57:70979:71198	5239770	0					
ANR	5239773	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	3435:1:70982:71013	5239770	0	True				
ANR	5239774	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5239770	0					
ANR	5239775	IdentifierDeclType	RStrBuf *		5239770	0					
ANR	5239776	Identifier	sb		5239770	1					
ANR	5239777	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5239770	2		=			
ANR	5239778	Identifier	sb		5239770	0					
ANR	5239779	CallExpression	"r_strbuf_new ( """" )"		5239770	1					
ANR	5239780	Callee	r_strbuf_new		5239770	0					
ANR	5239781	Identifier	r_strbuf_new		5239770	0					
ANR	5239782	ArgumentList	""""""		5239770	1					
ANR	5239783	Argument	""""""		5239770	0					
ANR	5239784	PrimaryExpression	""""""		5239770	0					
ANR	5239785	IdentifierDeclStatement	const char * p ;	3436:1:71016:71029	5239770	1	True				
ANR	5239786	IdentifierDecl	* p		5239770	0					
ANR	5239787	IdentifierDeclType	const char *		5239770	0					
ANR	5239788	Identifier	p		5239770	1					
ANR	5239789	WhileStatement	while ( ( p = r_list_pop_head ( str ) ) )		5239770	2					
ANR	5239790	Condition	p = r_list_pop_head ( str )	3437:8:71039:71065	5239770	0	True				
ANR	5239791	AssignmentExpression	p = r_list_pop_head ( str )		5239770	0		=			
ANR	5239792	Identifier	p		5239770	0					
ANR	5239793	CallExpression	r_list_pop_head ( str )		5239770	1					
ANR	5239794	Callee	r_list_pop_head		5239770	0					
ANR	5239795	Identifier	r_list_pop_head		5239770	0					
ANR	5239796	ArgumentList	str		5239770	1					
ANR	5239797	Argument	str		5239770	0					
ANR	5239798	Identifier	str		5239770	0					
ANR	5239799	CompoundStatement		4:37:88:88	5239770	1					
ANR	5239800	IfStatement	if ( r_strbuf_length ( sb ) != 0 )		5239770	0					
ANR	5239801	Condition	r_strbuf_length ( sb ) != 0	3438:6:71076:71100	5239770	0	True				
ANR	5239802	EqualityExpression	r_strbuf_length ( sb ) != 0		5239770	0		!=			
ANR	5239803	CallExpression	r_strbuf_length ( sb )		5239770	0					
ANR	5239804	Callee	r_strbuf_length		5239770	0					
ANR	5239805	Identifier	r_strbuf_length		5239770	0					
ANR	5239806	ArgumentList	sb		5239770	1					
ANR	5239807	Argument	sb		5239770	0					
ANR	5239808	Identifier	sb		5239770	0					
ANR	5239809	PrimaryExpression	0		5239770	1					
ANR	5239810	CompoundStatement		5:33:123:123	5239770	1					
ANR	5239811	ExpressionStatement	"r_strbuf_append ( sb , sep )"	3439:3:71108:71133	5239770	0	True				
ANR	5239812	CallExpression	"r_strbuf_append ( sb , sep )"		5239770	0					
ANR	5239813	Callee	r_strbuf_append		5239770	0					
ANR	5239814	Identifier	r_strbuf_append		5239770	0					
ANR	5239815	ArgumentList	sb		5239770	1					
ANR	5239816	Argument	sb		5239770	0					
ANR	5239817	Identifier	sb		5239770	0					
ANR	5239818	Argument	sep		5239770	1					
ANR	5239819	Identifier	sep		5239770	0					
ANR	5239820	ExpressionStatement	"r_strbuf_append ( sb , p )"	3441:2:71141:71164	5239770	1	True				
ANR	5239821	CallExpression	"r_strbuf_append ( sb , p )"		5239770	0					
ANR	5239822	Callee	r_strbuf_append		5239770	0					
ANR	5239823	Identifier	r_strbuf_append		5239770	0					
ANR	5239824	ArgumentList	sb		5239770	1					
ANR	5239825	Argument	sb		5239770	0					
ANR	5239826	Identifier	sb		5239770	0					
ANR	5239827	Argument	p		5239770	1					
ANR	5239828	Identifier	p		5239770	0					
ANR	5239829	ReturnStatement	return r_strbuf_drain ( sb ) ;	3443:1:71170:71196	5239770	3	True				
ANR	5239830	CallExpression	r_strbuf_drain ( sb )		5239770	0					
ANR	5239831	Callee	r_strbuf_drain		5239770	0					
ANR	5239832	Identifier	r_strbuf_drain		5239770	0					
ANR	5239833	ArgumentList	sb		5239770	1					
ANR	5239834	Argument	sb		5239770	0					
ANR	5239835	Identifier	sb		5239770	0					
ANR	5239836	ReturnType	R_API char *		5239770	1					
ANR	5239837	Identifier	r_str_list_join		5239770	2					
ANR	5239838	ParameterList	"RList * str , const char * sep"		5239770	3					
ANR	5239839	Parameter	RList * str	3434:28:70950:70959	5239770	0	True				
ANR	5239840	ParameterType	RList *		5239770	0					
ANR	5239841	Identifier	str		5239770	1					
ANR	5239842	Parameter	const char * sep	3434:40:70962:70976	5239770	1	True				
ANR	5239843	ParameterType	const char *		5239770	0					
ANR	5239844	Identifier	sep		5239770	1					
ANR	5239845	CFGEntryNode	ENTRY		5239770		True				
ANR	5239846	CFGExitNode	EXIT		5239770		True				
ANR	5239847	Symbol	str		5239770						
ANR	5239848	Symbol	p		5239770						
ANR	5239849	Symbol	r_strbuf_new		5239770						
ANR	5239850	Symbol	r_list_pop_head		5239770						
ANR	5239851	Symbol	r_strbuf_drain		5239770						
ANR	5239852	Symbol	r_strbuf_length		5239770						
ANR	5239853	Symbol	sep		5239770						
ANR	5239854	Symbol	sb		5239770						
ANR	5239855	Function	r_str_fmtargs	3447:0:71266:71431							
ANR	5239856	FunctionDef	r_str_fmtargs (const char * fmt)		5239855	0					
ANR	5239857	CompoundStatement		3447:41:71307:71431	5239855	0					
ANR	5239858	IdentifierDeclStatement	int n = 0 ;	3448:1:71310:71319	5239855	0	True				
ANR	5239859	IdentifierDecl	n = 0		5239855	0					
ANR	5239860	IdentifierDeclType	int		5239855	0					
ANR	5239861	Identifier	n		5239855	1					
ANR	5239862	AssignmentExpression	n = 0		5239855	2		=			
ANR	5239863	Identifier	n		5239855	0					
ANR	5239864	PrimaryExpression	0		5239855	1					
ANR	5239865	WhileStatement	while ( * fmt )		5239855	1					
ANR	5239866	Condition	* fmt	3449:8:71329:71332	5239855	0	True				
ANR	5239867	UnaryOperationExpression	* fmt		5239855	0					
ANR	5239868	UnaryOperator	*		5239855	0					
ANR	5239869	Identifier	fmt		5239855	1					
ANR	5239870	CompoundStatement		3:14:27:27	5239855	1					
ANR	5239871	IfStatement	if ( * fmt == '%' )		5239855	0					
ANR	5239872	Condition	* fmt == '%'	3450:6:71343:71353	5239855	0	True				
ANR	5239873	EqualityExpression	* fmt == '%'		5239855	0		==			
ANR	5239874	UnaryOperationExpression	* fmt		5239855	0					
ANR	5239875	UnaryOperator	*		5239855	0					
ANR	5239876	Identifier	fmt		5239855	1					
ANR	5239877	PrimaryExpression	'%'		5239855	1					
ANR	5239878	CompoundStatement		4:19:48:48	5239855	1					
ANR	5239879	IfStatement	if ( fmt [ 1 ] == '*' )		5239855	0					
ANR	5239880	Condition	fmt [ 1 ] == '*'	3451:7:71365:71377	5239855	0	True				
ANR	5239881	EqualityExpression	fmt [ 1 ] == '*'		5239855	0		==			
ANR	5239882	ArrayIndexing	fmt [ 1 ]		5239855	0					
ANR	5239883	Identifier	fmt		5239855	0					
ANR	5239884	PrimaryExpression	1		5239855	1					
ANR	5239885	PrimaryExpression	'*'		5239855	1					
ANR	5239886	CompoundStatement		5:22:72:72	5239855	1					
ANR	5239887	ExpressionStatement	n ++	3452:4:71386:71389	5239855	0	True				
ANR	5239888	PostIncDecOperationExpression	n ++		5239855	0					
ANR	5239889	Identifier	n		5239855	0					
ANR	5239890	IncDec	++		5239855	1					
ANR	5239891	ExpressionStatement	n ++	3454:3:71399:71402	5239855	1	True				
ANR	5239892	PostIncDecOperationExpression	n ++		5239855	0					
ANR	5239893	Identifier	n		5239855	0					
ANR	5239894	IncDec	++		5239855	1					
ANR	5239895	ExpressionStatement	fmt ++	3456:2:71410:71415	5239855	1	True				
ANR	5239896	PostIncDecOperationExpression	fmt ++		5239855	0					
ANR	5239897	Identifier	fmt		5239855	0					
ANR	5239898	IncDec	++		5239855	1					
ANR	5239899	ReturnStatement	return n ;	3458:1:71421:71429	5239855	2	True				
ANR	5239900	Identifier	n		5239855	0					
ANR	5239901	ReturnType	R_API int		5239855	1					
ANR	5239902	Identifier	r_str_fmtargs		5239855	2					
ANR	5239903	ParameterList	const char * fmt		5239855	3					
ANR	5239904	Parameter	const char * fmt	3447:24:71290:71304	5239855	0	True				
ANR	5239905	ParameterType	const char *		5239855	0					
ANR	5239906	Identifier	fmt		5239855	1					
ANR	5239907	CFGEntryNode	ENTRY		5239855		True				
ANR	5239908	CFGExitNode	EXIT		5239855		True				
ANR	5239909	Symbol	* fmt		5239855						
ANR	5239910	Symbol	fmt		5239855						
ANR	5239911	Symbol	n		5239855						
ANR	5239912	Function	r_str_bool	3466:6:71623:71683							
ANR	5239913	FunctionDef	r_str_bool (int b)		5239912	0					
ANR	5239914	CompoundStatement		3466:36:71653:71683	5239912	0					
ANR	5239915	ReturnStatement	"return b ? ""true"" : ""false"" ;"	3467:1:71656:71681	5239912	0	True				
ANR	5239916	ConditionalExpression	"b ? ""true"" : ""false"""		5239912	0					
ANR	5239917	Condition	b		5239912	0					
ANR	5239918	Identifier	b		5239912	0					
ANR	5239919	PrimaryExpression	"""true"""		5239912	1					
ANR	5239920	PrimaryExpression	"""false"""		5239912	2					
ANR	5239921	ReturnType	const char *		5239912	1					
ANR	5239922	Identifier	r_str_bool		5239912	2					
ANR	5239923	ParameterList	int b		5239912	3					
ANR	5239924	Parameter	int b	3466:29:71646:71650	5239912	0	True				
ANR	5239925	ParameterType	int		5239912	0					
ANR	5239926	Identifier	b		5239912	1					
ANR	5239927	CFGEntryNode	ENTRY		5239912		True				
ANR	5239928	CFGExitNode	EXIT		5239912		True				
ANR	5239929	Symbol	b		5239912						
ANR	5239930	Function	r_str_is_true	3470:0:71686:71860							
ANR	5239931	FunctionDef	r_str_is_true (const char * s)		5239930	0					
ANR	5239932	CompoundStatement		3470:40:71726:71860	5239930	0					
ANR	5239933	ReturnStatement	"return ! r_str_casecmp ( ""yes"" , s ) || ! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s ) ;"	3471:1:71729:71858	5239930	0	True				
ANR	5239934	OrExpression	"! r_str_casecmp ( ""yes"" , s ) || ! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		5239930	0		||			
ANR	5239935	UnaryOperationExpression	"! r_str_casecmp ( ""yes"" , s )"		5239930	0					
ANR	5239936	UnaryOperator	!		5239930	0					
ANR	5239937	CallExpression	"r_str_casecmp ( ""yes"" , s )"		5239930	1					
ANR	5239938	Callee	r_str_casecmp		5239930	0					
ANR	5239939	Identifier	r_str_casecmp		5239930	0					
ANR	5239940	ArgumentList	"""yes"""		5239930	1					
ANR	5239941	Argument	"""yes"""		5239930	0					
ANR	5239942	PrimaryExpression	"""yes"""		5239930	0					
ANR	5239943	Argument	s		5239930	1					
ANR	5239944	Identifier	s		5239930	0					
ANR	5239945	OrExpression	"! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		5239930	1		||			
ANR	5239946	UnaryOperationExpression	"! r_str_casecmp ( ""on"" , s )"		5239930	0					
ANR	5239947	UnaryOperator	!		5239930	0					
ANR	5239948	CallExpression	"r_str_casecmp ( ""on"" , s )"		5239930	1					
ANR	5239949	Callee	r_str_casecmp		5239930	0					
ANR	5239950	Identifier	r_str_casecmp		5239930	0					
ANR	5239951	ArgumentList	"""on"""		5239930	1					
ANR	5239952	Argument	"""on"""		5239930	0					
ANR	5239953	PrimaryExpression	"""on"""		5239930	0					
ANR	5239954	Argument	s		5239930	1					
ANR	5239955	Identifier	s		5239930	0					
ANR	5239956	OrExpression	"! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		5239930	1		||			
ANR	5239957	UnaryOperationExpression	"! r_str_casecmp ( ""true"" , s )"		5239930	0					
ANR	5239958	UnaryOperator	!		5239930	0					
ANR	5239959	CallExpression	"r_str_casecmp ( ""true"" , s )"		5239930	1					
ANR	5239960	Callee	r_str_casecmp		5239930	0					
ANR	5239961	Identifier	r_str_casecmp		5239930	0					
ANR	5239962	ArgumentList	"""true"""		5239930	1					
ANR	5239963	Argument	"""true"""		5239930	0					
ANR	5239964	PrimaryExpression	"""true"""		5239930	0					
ANR	5239965	Argument	s		5239930	1					
ANR	5239966	Identifier	s		5239930	0					
ANR	5239967	UnaryOperationExpression	"! r_str_casecmp ( ""1"" , s )"		5239930	1					
ANR	5239968	UnaryOperator	!		5239930	0					
ANR	5239969	CallExpression	"r_str_casecmp ( ""1"" , s )"		5239930	1					
ANR	5239970	Callee	r_str_casecmp		5239930	0					
ANR	5239971	Identifier	r_str_casecmp		5239930	0					
ANR	5239972	ArgumentList	"""1"""		5239930	1					
ANR	5239973	Argument	"""1"""		5239930	0					
ANR	5239974	PrimaryExpression	"""1"""		5239930	0					
ANR	5239975	Argument	s		5239930	1					
ANR	5239976	Identifier	s		5239930	0					
ANR	5239977	ReturnType	R_API bool		5239930	1					
ANR	5239978	Identifier	r_str_is_true		5239930	2					
ANR	5239979	ParameterList	const char * s		5239930	3					
ANR	5239980	Parameter	const char * s	3470:25:71711:71723	5239930	0	True				
ANR	5239981	ParameterType	const char *		5239930	0					
ANR	5239982	Identifier	s		5239930	1					
ANR	5239983	CFGEntryNode	ENTRY		5239930		True				
ANR	5239984	CFGExitNode	EXIT		5239930		True				
ANR	5239985	Symbol	s		5239930						
ANR	5239986	Symbol	r_str_casecmp		5239930						
ANR	5239987	Function	r_str_is_bool	3477:0:71863:72178							
ANR	5239988	FunctionDef	r_str_is_bool (const char * val)		5239987	0					
ANR	5239989	CompoundStatement		3477:42:71905:72178	5239987	0					
ANR	5239990	IfStatement	"if ( ! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" ) )"		5239987	0					
ANR	5239991	Condition	"! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" )"	3478:5:71912:71972	5239987	0	True				
ANR	5239992	OrExpression	"! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" )"		5239987	0		||			
ANR	5239993	UnaryOperationExpression	"! r_str_casecmp ( val , ""true"" )"		5239987	0					
ANR	5239994	UnaryOperator	!		5239987	0					
ANR	5239995	CallExpression	"r_str_casecmp ( val , ""true"" )"		5239987	1					
ANR	5239996	Callee	r_str_casecmp		5239987	0					
ANR	5239997	Identifier	r_str_casecmp		5239987	0					
ANR	5239998	ArgumentList	val		5239987	1					
ANR	5239999	Argument	val		5239987	0					
ANR	5240000	Identifier	val		5239987	0					
ANR	5240001	Argument	"""true"""		5239987	1					
ANR	5240002	PrimaryExpression	"""true"""		5239987	0					
ANR	5240003	UnaryOperationExpression	"! r_str_casecmp ( val , ""false"" )"		5239987	1					
ANR	5240004	UnaryOperator	!		5239987	0					
ANR	5240005	CallExpression	"r_str_casecmp ( val , ""false"" )"		5239987	1					
ANR	5240006	Callee	r_str_casecmp		5239987	0					
ANR	5240007	Identifier	r_str_casecmp		5239987	0					
ANR	5240008	ArgumentList	val		5239987	1					
ANR	5240009	Argument	val		5239987	0					
ANR	5240010	Identifier	val		5239987	0					
ANR	5240011	Argument	"""false"""		5239987	1					
ANR	5240012	PrimaryExpression	"""false"""		5239987	0					
ANR	5240013	CompoundStatement		2:68:69:69	5239987	1					
ANR	5240014	ReturnStatement	return true ;	3479:2:71979:71990	5239987	0	True				
ANR	5240015	Identifier	true		5239987	0					
ANR	5240016	IfStatement	"if ( ! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" ) )"		5239987	1					
ANR	5240017	Condition	"! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" )"	3481:5:72000:72056	5239987	0	True				
ANR	5240018	OrExpression	"! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" )"		5239987	0		||			
ANR	5240019	UnaryOperationExpression	"! r_str_casecmp ( val , ""on"" )"		5239987	0					
ANR	5240020	UnaryOperator	!		5239987	0					
ANR	5240021	CallExpression	"r_str_casecmp ( val , ""on"" )"		5239987	1					
ANR	5240022	Callee	r_str_casecmp		5239987	0					
ANR	5240023	Identifier	r_str_casecmp		5239987	0					
ANR	5240024	ArgumentList	val		5239987	1					
ANR	5240025	Argument	val		5239987	0					
ANR	5240026	Identifier	val		5239987	0					
ANR	5240027	Argument	"""on"""		5239987	1					
ANR	5240028	PrimaryExpression	"""on"""		5239987	0					
ANR	5240029	UnaryOperationExpression	"! r_str_casecmp ( val , ""off"" )"		5239987	1					
ANR	5240030	UnaryOperator	!		5239987	0					
ANR	5240031	CallExpression	"r_str_casecmp ( val , ""off"" )"		5239987	1					
ANR	5240032	Callee	r_str_casecmp		5239987	0					
ANR	5240033	Identifier	r_str_casecmp		5239987	0					
ANR	5240034	ArgumentList	val		5239987	1					
ANR	5240035	Argument	val		5239987	0					
ANR	5240036	Identifier	val		5239987	0					
ANR	5240037	Argument	"""off"""		5239987	1					
ANR	5240038	PrimaryExpression	"""off"""		5239987	0					
ANR	5240039	CompoundStatement		5:64:153:153	5239987	1					
ANR	5240040	ReturnStatement	return true ;	3482:2:72063:72074	5239987	0	True				
ANR	5240041	Identifier	true		5239987	0					
ANR	5240042	IfStatement	"if ( ! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" ) )"		5239987	2					
ANR	5240043	Condition	"! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" )"	3484:5:72084:72140	5239987	0	True				
ANR	5240044	OrExpression	"! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" )"		5239987	0		||			
ANR	5240045	UnaryOperationExpression	"! r_str_casecmp ( val , ""yes"" )"		5239987	0					
ANR	5240046	UnaryOperator	!		5239987	0					
ANR	5240047	CallExpression	"r_str_casecmp ( val , ""yes"" )"		5239987	1					
ANR	5240048	Callee	r_str_casecmp		5239987	0					
ANR	5240049	Identifier	r_str_casecmp		5239987	0					
ANR	5240050	ArgumentList	val		5239987	1					
ANR	5240051	Argument	val		5239987	0					
ANR	5240052	Identifier	val		5239987	0					
ANR	5240053	Argument	"""yes"""		5239987	1					
ANR	5240054	PrimaryExpression	"""yes"""		5239987	0					
ANR	5240055	UnaryOperationExpression	"! r_str_casecmp ( val , ""no"" )"		5239987	1					
ANR	5240056	UnaryOperator	!		5239987	0					
ANR	5240057	CallExpression	"r_str_casecmp ( val , ""no"" )"		5239987	1					
ANR	5240058	Callee	r_str_casecmp		5239987	0					
ANR	5240059	Identifier	r_str_casecmp		5239987	0					
ANR	5240060	ArgumentList	val		5239987	1					
ANR	5240061	Argument	val		5239987	0					
ANR	5240062	Identifier	val		5239987	0					
ANR	5240063	Argument	"""no"""		5239987	1					
ANR	5240064	PrimaryExpression	"""no"""		5239987	0					
ANR	5240065	CompoundStatement		8:64:237:237	5239987	1					
ANR	5240066	ReturnStatement	return true ;	3485:2:72147:72158	5239987	0	True				
ANR	5240067	Identifier	true		5239987	0					
ANR	5240068	ReturnStatement	return false ;	3487:1:72164:72176	5239987	3	True				
ANR	5240069	Identifier	false		5239987	0					
ANR	5240070	ReturnType	R_API bool		5239987	1					
ANR	5240071	Identifier	r_str_is_bool		5239987	2					
ANR	5240072	ParameterList	const char * val		5239987	3					
ANR	5240073	Parameter	const char * val	3477:25:71888:71902	5239987	0	True				
ANR	5240074	ParameterType	const char *		5239987	0					
ANR	5240075	Identifier	val		5239987	1					
ANR	5240076	CFGEntryNode	ENTRY		5239987		True				
ANR	5240077	CFGExitNode	EXIT		5239987		True				
ANR	5240078	Symbol	val		5239987						
ANR	5240079	Symbol	true		5239987						
ANR	5240080	Symbol	false		5239987						
ANR	5240081	Symbol	r_str_casecmp		5239987						
ANR	5240082	Function	r_str_nextword	3490:0:72181:72306							
ANR	5240083	FunctionDef	"r_str_nextword (char * s , char ch)"		5240082	0					
ANR	5240084	CompoundStatement		3490:45:72226:72306	5240082	0					
ANR	5240085	IdentifierDeclStatement	"char * p = strchr ( s , ch ) ;"	3491:1:72229:72253	5240082	0	True				
ANR	5240086	IdentifierDecl	"* p = strchr ( s , ch )"		5240082	0					
ANR	5240087	IdentifierDeclType	char *		5240082	0					
ANR	5240088	Identifier	p		5240082	1					
ANR	5240089	AssignmentExpression	"* p = strchr ( s , ch )"		5240082	2		=			
ANR	5240090	Identifier	p		5240082	0					
ANR	5240091	CallExpression	"strchr ( s , ch )"		5240082	1					
ANR	5240092	Callee	strchr		5240082	0					
ANR	5240093	Identifier	strchr		5240082	0					
ANR	5240094	ArgumentList	s		5240082	1					
ANR	5240095	Argument	s		5240082	0					
ANR	5240096	Identifier	s		5240082	0					
ANR	5240097	Argument	ch		5240082	1					
ANR	5240098	Identifier	ch		5240082	0					
ANR	5240099	IfStatement	if ( ! p )		5240082	1					
ANR	5240100	Condition	! p	3492:5:72260:72261	5240082	0	True				
ANR	5240101	UnaryOperationExpression	! p		5240082	0					
ANR	5240102	UnaryOperator	!		5240082	0					
ANR	5240103	Identifier	p		5240082	1					
ANR	5240104	CompoundStatement		3:9:37:37	5240082	1					
ANR	5240105	ReturnStatement	return NULL ;	3493:2:72268:72279	5240082	0	True				
ANR	5240106	Identifier	NULL		5240082	0					
ANR	5240107	ExpressionStatement	* p ++ = 0	3495:1:72285:72293	5240082	2	True				
ANR	5240108	AssignmentExpression	* p ++ = 0		5240082	0		=			
ANR	5240109	UnaryOperationExpression	* p ++		5240082	0					
ANR	5240110	UnaryOperator	*		5240082	0					
ANR	5240111	PostIncDecOperationExpression	p ++		5240082	1					
ANR	5240112	Identifier	p		5240082	0					
ANR	5240113	IncDec	++		5240082	1					
ANR	5240114	PrimaryExpression	0		5240082	1					
ANR	5240115	ReturnStatement	return p ;	3496:1:72296:72304	5240082	3	True				
ANR	5240116	Identifier	p		5240082	0					
ANR	5240117	ReturnType	R_API char *		5240082	1					
ANR	5240118	Identifier	r_str_nextword		5240082	2					
ANR	5240119	ParameterList	"char * s , char ch"		5240082	3					
ANR	5240120	Parameter	char * s	3490:27:72208:72214	5240082	0	True				
ANR	5240121	ParameterType	char *		5240082	0					
ANR	5240122	Identifier	s		5240082	1					
ANR	5240123	Parameter	char ch	3490:36:72217:72223	5240082	1	True				
ANR	5240124	ParameterType	char		5240082	0					
ANR	5240125	Identifier	ch		5240082	1					
ANR	5240126	CFGEntryNode	ENTRY		5240082		True				
ANR	5240127	CFGExitNode	EXIT		5240082		True				
ANR	5240128	Symbol	p		5240082						
ANR	5240129	Symbol	s		5240082						
ANR	5240130	Symbol	NULL		5240082						
ANR	5240131	Symbol	ch		5240082						
ANR	5240132	Symbol	* p ++		5240082						
ANR	5240133	Symbol	strchr		5240082						
ANR	5240134	Function	r_str_scale	3499:0:72309:73373							
ANR	5240135	FunctionDef	"r_str_scale (const char * s , int w , int h)"		5240134	0					
ANR	5240136	CompoundStatement		3499:53:72362:73373	5240134	0					
ANR	5240137	IdentifierDeclStatement	RListIter * iter ;	3504:1:72556:72571	5240134	0	True				
ANR	5240138	IdentifierDecl	* iter		5240134	0					
ANR	5240139	IdentifierDeclType	RListIter *		5240134	0					
ANR	5240140	Identifier	iter		5240134	1					
ANR	5240141	IdentifierDeclStatement	char * line ;	3505:1:72574:72584	5240134	1	True				
ANR	5240142	IdentifierDecl	* line		5240134	0					
ANR	5240143	IdentifierDeclType	char *		5240134	0					
ANR	5240144	Identifier	line		5240134	1					
ANR	5240145	IdentifierDeclStatement	char * str = strdup ( s ) ;	3506:1:72587:72609	5240134	2	True				
ANR	5240146	IdentifierDecl	* str = strdup ( s )		5240134	0					
ANR	5240147	IdentifierDeclType	char *		5240134	0					
ANR	5240148	Identifier	str		5240134	1					
ANR	5240149	AssignmentExpression	* str = strdup ( s )		5240134	2		=			
ANR	5240150	Identifier	str		5240134	0					
ANR	5240151	CallExpression	strdup ( s )		5240134	1					
ANR	5240152	Callee	strdup		5240134	0					
ANR	5240153	Identifier	strdup		5240134	0					
ANR	5240154	ArgumentList	s		5240134	1					
ANR	5240155	Argument	s		5240134	0					
ANR	5240156	Identifier	s		5240134	0					
ANR	5240157	IdentifierDeclStatement	"RList * lines = r_str_split_list ( str , ""\\n"" , 0 ) ;"	3507:1:72612:72658	5240134	3	True				
ANR	5240158	IdentifierDecl	"* lines = r_str_split_list ( str , ""\\n"" , 0 )"		5240134	0					
ANR	5240159	IdentifierDeclType	RList *		5240134	0					
ANR	5240160	Identifier	lines		5240134	1					
ANR	5240161	AssignmentExpression	"* lines = r_str_split_list ( str , ""\\n"" , 0 )"		5240134	2		=			
ANR	5240162	Identifier	lines		5240134	0					
ANR	5240163	CallExpression	"r_str_split_list ( str , ""\\n"" , 0 )"		5240134	1					
ANR	5240164	Callee	r_str_split_list		5240134	0					
ANR	5240165	Identifier	r_str_split_list		5240134	0					
ANR	5240166	ArgumentList	str		5240134	1					
ANR	5240167	Argument	str		5240134	0					
ANR	5240168	Identifier	str		5240134	0					
ANR	5240169	Argument	"""\\n"""		5240134	1					
ANR	5240170	PrimaryExpression	"""\\n"""		5240134	0					
ANR	5240171	Argument	0		5240134	2					
ANR	5240172	PrimaryExpression	0		5240134	0					
ANR	5240173	IdentifierDeclStatement	"int i , j ;"	3508:1:72661:72669	5240134	4	True				
ANR	5240174	IdentifierDecl	i		5240134	0					
ANR	5240175	IdentifierDeclType	int		5240134	0					
ANR	5240176	Identifier	i		5240134	1					
ANR	5240177	IdentifierDecl	j		5240134	1					
ANR	5240178	IdentifierDeclType	int		5240134	0					
ANR	5240179	Identifier	j		5240134	1					
ANR	5240180	IdentifierDeclStatement	int rows = 0 ;	3509:1:72672:72684	5240134	5	True				
ANR	5240181	IdentifierDecl	rows = 0		5240134	0					
ANR	5240182	IdentifierDeclType	int		5240134	0					
ANR	5240183	Identifier	rows		5240134	1					
ANR	5240184	AssignmentExpression	rows = 0		5240134	2		=			
ANR	5240185	Identifier	rows		5240134	0					
ANR	5240186	PrimaryExpression	0		5240134	1					
ANR	5240187	IdentifierDeclStatement	int maxcol = 0 ;	3510:1:72687:72701	5240134	6	True				
ANR	5240188	IdentifierDecl	maxcol = 0		5240134	0					
ANR	5240189	IdentifierDeclType	int		5240134	0					
ANR	5240190	Identifier	maxcol		5240134	1					
ANR	5240191	AssignmentExpression	maxcol = 0		5240134	2		=			
ANR	5240192	Identifier	maxcol		5240134	0					
ANR	5240193	PrimaryExpression	0		5240134	1					
ANR	5240194	ExpressionStatement	rows = r_list_length ( lines )	3512:1:72705:72733	5240134	7	True				
ANR	5240195	AssignmentExpression	rows = r_list_length ( lines )		5240134	0		=			
ANR	5240196	Identifier	rows		5240134	0					
ANR	5240197	CallExpression	r_list_length ( lines )		5240134	1					
ANR	5240198	Callee	r_list_length		5240134	0					
ANR	5240199	Identifier	r_list_length		5240134	0					
ANR	5240200	ArgumentList	lines		5240134	1					
ANR	5240201	Argument	lines		5240134	0					
ANR	5240202	Identifier	lines		5240134	0					
ANR	5240203	Statement	r_list_foreach	3513:1:72736:72749	5240134	8	True				
ANR	5240204	Statement	(	3513:16:72751:72751	5240134	9	True				
ANR	5240205	Statement	lines	3513:17:72752:72756	5240134	10	True				
ANR	5240206	Statement	","	3513:22:72757:72757	5240134	11	True				
ANR	5240207	Statement	iter	3513:24:72759:72762	5240134	12	True				
ANR	5240208	Statement	","	3513:28:72763:72763	5240134	13	True				
ANR	5240209	Statement	line	3513:30:72765:72768	5240134	14	True				
ANR	5240210	Statement	)	3513:34:72769:72769	5240134	15	True				
ANR	5240211	CompoundStatement		15:36:408:408	5240134	16					
ANR	5240212	ExpressionStatement	"maxcol = R_MAX ( strlen ( line ) , maxcol )"	3514:2:72775:72813	5240134	0	True				
ANR	5240213	AssignmentExpression	"maxcol = R_MAX ( strlen ( line ) , maxcol )"		5240134	0		=			
ANR	5240214	Identifier	maxcol		5240134	0					
ANR	5240215	CallExpression	"R_MAX ( strlen ( line ) , maxcol )"		5240134	1					
ANR	5240216	Callee	R_MAX		5240134	0					
ANR	5240217	Identifier	R_MAX		5240134	0					
ANR	5240218	ArgumentList	strlen ( line )		5240134	1					
ANR	5240219	Argument	strlen ( line )		5240134	0					
ANR	5240220	CallExpression	strlen ( line )		5240134	0					
ANR	5240221	Callee	strlen		5240134	0					
ANR	5240222	Identifier	strlen		5240134	0					
ANR	5240223	ArgumentList	line		5240134	1					
ANR	5240224	Argument	line		5240134	0					
ANR	5240225	Identifier	line		5240134	0					
ANR	5240226	Argument	maxcol		5240134	1					
ANR	5240227	Identifier	maxcol		5240134	0					
ANR	5240228	IdentifierDeclStatement	RList * out = r_list_newf ( free ) ;	3517:1:72820:72851	5240134	17	True				
ANR	5240229	IdentifierDecl	* out = r_list_newf ( free )		5240134	0					
ANR	5240230	IdentifierDeclType	RList *		5240134	0					
ANR	5240231	Identifier	out		5240134	1					
ANR	5240232	AssignmentExpression	* out = r_list_newf ( free )		5240134	2		=			
ANR	5240233	Identifier	out		5240134	0					
ANR	5240234	CallExpression	r_list_newf ( free )		5240134	1					
ANR	5240235	Callee	r_list_newf		5240134	0					
ANR	5240236	Identifier	r_list_newf		5240134	0					
ANR	5240237	ArgumentList	free		5240134	1					
ANR	5240238	Argument	free		5240134	0					
ANR	5240239	Identifier	free		5240134	0					
ANR	5240240	IdentifierDeclStatement	int curline = - 1 ;	3519:1:72855:72871	5240134	18	True				
ANR	5240241	IdentifierDecl	curline = - 1		5240134	0					
ANR	5240242	IdentifierDeclType	int		5240134	0					
ANR	5240243	Identifier	curline		5240134	1					
ANR	5240244	AssignmentExpression	curline = - 1		5240134	2		=			
ANR	5240245	Identifier	curline		5240134	0					
ANR	5240246	UnaryOperationExpression	- 1		5240134	1					
ANR	5240247	UnaryOperator	-		5240134	0					
ANR	5240248	PrimaryExpression	1		5240134	1					
ANR	5240249	IdentifierDeclStatement	"char * linetext = ( char * ) r_str_pad ( ' ' , w ) ;"	3520:1:72874:72916	5240134	19	True				
ANR	5240250	IdentifierDecl	"* linetext = ( char * ) r_str_pad ( ' ' , w )"		5240134	0					
ANR	5240251	IdentifierDeclType	char *		5240134	0					
ANR	5240252	Identifier	linetext		5240134	1					
ANR	5240253	AssignmentExpression	"* linetext = ( char * ) r_str_pad ( ' ' , w )"		5240134	2		=			
ANR	5240254	Identifier	linetext		5240134	0					
ANR	5240255	CastExpression	"( char * ) r_str_pad ( ' ' , w )"		5240134	1					
ANR	5240256	CastTarget	char *		5240134	0					
ANR	5240257	CallExpression	"r_str_pad ( ' ' , w )"		5240134	1					
ANR	5240258	Callee	r_str_pad		5240134	0					
ANR	5240259	Identifier	r_str_pad		5240134	0					
ANR	5240260	ArgumentList	' '		5240134	1					
ANR	5240261	Argument	' '		5240134	0					
ANR	5240262	PrimaryExpression	' '		5240134	0					
ANR	5240263	Argument	w		5240134	1					
ANR	5240264	Identifier	w		5240134	0					
ANR	5240265	ForStatement	for ( i = 0 ; i < h ; i ++ )		5240134	20					
ANR	5240266	ForInit	i = 0 ;	3521:6:72924:72929	5240134	0	True				
ANR	5240267	AssignmentExpression	i = 0		5240134	0		=			
ANR	5240268	Identifier	i		5240134	0					
ANR	5240269	PrimaryExpression	0		5240134	1					
ANR	5240270	Condition	i < h	3521:13:72931:72935	5240134	1	True				
ANR	5240271	RelationalExpression	i < h		5240134	0		<			
ANR	5240272	Identifier	i		5240134	0					
ANR	5240273	Identifier	h		5240134	1					
ANR	5240274	PostIncDecOperationExpression	i ++	3521:20:72938:72940	5240134	2	True				
ANR	5240275	Identifier	i		5240134	0					
ANR	5240276	IncDec	++		5240134	1					
ANR	5240277	CompoundStatement		26:2:684:711	5240134	3					
ANR	5240278	IdentifierDeclStatement	int zoomedline = i * ( ( float ) rows / h ) ;	3522:2:72947:72985	5240134	0	True				
ANR	5240279	IdentifierDecl	zoomedline = i * ( ( float ) rows / h )		5240134	0					
ANR	5240280	IdentifierDeclType	int		5240134	0					
ANR	5240281	Identifier	zoomedline		5240134	1					
ANR	5240282	AssignmentExpression	zoomedline = i * ( ( float ) rows / h )		5240134	2		=			
ANR	5240283	Identifier	zoomedline		5240134	0					
ANR	5240284	MultiplicativeExpression	i * ( ( float ) rows / h )		5240134	1		*			
ANR	5240285	Identifier	i		5240134	0					
ANR	5240286	MultiplicativeExpression	( float ) rows / h		5240134	1		/			
ANR	5240287	CastExpression	( float ) rows		5240134	0					
ANR	5240288	CastTarget	float		5240134	0					
ANR	5240289	Identifier	rows		5240134	1					
ANR	5240290	Identifier	h		5240134	1					
ANR	5240291	IdentifierDeclStatement	"const char * srcline = r_list_get_n ( lines , zoomedline ) ;"	3523:2:72989:73043	5240134	1	True				
ANR	5240292	IdentifierDecl	"* srcline = r_list_get_n ( lines , zoomedline )"		5240134	0					
ANR	5240293	IdentifierDeclType	const char *		5240134	0					
ANR	5240294	Identifier	srcline		5240134	1					
ANR	5240295	AssignmentExpression	"* srcline = r_list_get_n ( lines , zoomedline )"		5240134	2		=			
ANR	5240296	Identifier	srcline		5240134	0					
ANR	5240297	CallExpression	"r_list_get_n ( lines , zoomedline )"		5240134	1					
ANR	5240298	Callee	r_list_get_n		5240134	0					
ANR	5240299	Identifier	r_list_get_n		5240134	0					
ANR	5240300	ArgumentList	lines		5240134	1					
ANR	5240301	Argument	lines		5240134	0					
ANR	5240302	Identifier	lines		5240134	0					
ANR	5240303	Argument	zoomedline		5240134	1					
ANR	5240304	Identifier	zoomedline		5240134	0					
ANR	5240305	IdentifierDeclStatement	int cols = strlen ( srcline ) ;	3524:2:73047:73074	5240134	2	True				
ANR	5240306	IdentifierDecl	cols = strlen ( srcline )		5240134	0					
ANR	5240307	IdentifierDeclType	int		5240134	0					
ANR	5240308	Identifier	cols		5240134	1					
ANR	5240309	AssignmentExpression	cols = strlen ( srcline )		5240134	2		=			
ANR	5240310	Identifier	cols		5240134	0					
ANR	5240311	CallExpression	strlen ( srcline )		5240134	1					
ANR	5240312	Callee	strlen		5240134	0					
ANR	5240313	Identifier	strlen		5240134	0					
ANR	5240314	ArgumentList	srcline		5240134	1					
ANR	5240315	Argument	srcline		5240134	0					
ANR	5240316	Identifier	srcline		5240134	0					
ANR	5240317	ForStatement	for ( j = 0 ; j < w ; j ++ )		5240134	3					
ANR	5240318	ForInit	j = 0 ;	3525:7:73083:73088	5240134	0	True				
ANR	5240319	AssignmentExpression	j = 0		5240134	0		=			
ANR	5240320	Identifier	j		5240134	0					
ANR	5240321	PrimaryExpression	0		5240134	1					
ANR	5240322	Condition	j < w	3525:14:73090:73094	5240134	1	True				
ANR	5240323	RelationalExpression	j < w		5240134	0		<			
ANR	5240324	Identifier	j		5240134	0					
ANR	5240325	Identifier	w		5240134	1					
ANR	5240326	PostIncDecOperationExpression	j ++	3525:21:73097:73099	5240134	2	True				
ANR	5240327	Identifier	j		5240134	0					
ANR	5240328	IncDec	++		5240134	1					
ANR	5240329	CompoundStatement		28:3:744:782	5240134	3					
ANR	5240330	IdentifierDeclStatement	int zoomedcol = j * ( ( float ) cols / w ) ;	3526:3:73107:73145	5240134	0	True				
ANR	5240331	IdentifierDecl	zoomedcol = j * ( ( float ) cols / w )		5240134	0					
ANR	5240332	IdentifierDeclType	int		5240134	0					
ANR	5240333	Identifier	zoomedcol		5240134	1					
ANR	5240334	AssignmentExpression	zoomedcol = j * ( ( float ) cols / w )		5240134	2		=			
ANR	5240335	Identifier	zoomedcol		5240134	0					
ANR	5240336	MultiplicativeExpression	j * ( ( float ) cols / w )		5240134	1		*			
ANR	5240337	Identifier	j		5240134	0					
ANR	5240338	MultiplicativeExpression	( float ) cols / w		5240134	1		/			
ANR	5240339	CastExpression	( float ) cols		5240134	0					
ANR	5240340	CastTarget	float		5240134	0					
ANR	5240341	Identifier	cols		5240134	1					
ANR	5240342	Identifier	w		5240134	1					
ANR	5240343	ExpressionStatement	linetext [ j ] = srcline [ zoomedcol ]	3527:3:73150:73182	5240134	1	True				
ANR	5240344	AssignmentExpression	linetext [ j ] = srcline [ zoomedcol ]		5240134	0		=			
ANR	5240345	ArrayIndexing	linetext [ j ]		5240134	0					
ANR	5240346	Identifier	linetext		5240134	0					
ANR	5240347	Identifier	j		5240134	1					
ANR	5240348	ArrayIndexing	srcline [ zoomedcol ]		5240134	1					
ANR	5240349	Identifier	srcline		5240134	0					
ANR	5240350	Identifier	zoomedcol		5240134	1					
ANR	5240351	IfStatement	if ( curline != zoomedline )		5240134	4					
ANR	5240352	Condition	curline != zoomedline	3529:6:73194:73214	5240134	0	True				
ANR	5240353	EqualityExpression	curline != zoomedline		5240134	0		!=			
ANR	5240354	Identifier	curline		5240134	0					
ANR	5240355	Identifier	zoomedline		5240134	1					
ANR	5240356	CompoundStatement		31:29:854:854	5240134	1					
ANR	5240357	ExpressionStatement	"r_list_append ( out , strdup ( linetext ) )"	3530:3:73222:73260	5240134	0	True				
ANR	5240358	CallExpression	"r_list_append ( out , strdup ( linetext ) )"		5240134	0					
ANR	5240359	Callee	r_list_append		5240134	0					
ANR	5240360	Identifier	r_list_append		5240134	0					
ANR	5240361	ArgumentList	out		5240134	1					
ANR	5240362	Argument	out		5240134	0					
ANR	5240363	Identifier	out		5240134	0					
ANR	5240364	Argument	strdup ( linetext )		5240134	1					
ANR	5240365	CallExpression	strdup ( linetext )		5240134	0					
ANR	5240366	Callee	strdup		5240134	0					
ANR	5240367	Identifier	strdup		5240134	0					
ANR	5240368	ArgumentList	linetext		5240134	1					
ANR	5240369	Argument	linetext		5240134	0					
ANR	5240370	Identifier	linetext		5240134	0					
ANR	5240371	ExpressionStatement	curline = zoomedline	3531:3:73265:73285	5240134	1	True				
ANR	5240372	AssignmentExpression	curline = zoomedline		5240134	0		=			
ANR	5240373	Identifier	curline		5240134	0					
ANR	5240374	Identifier	zoomedline		5240134	1					
ANR	5240375	ExpressionStatement	"memset ( linetext , ' ' , w )"	3533:2:73293:73318	5240134	5	True				
ANR	5240376	CallExpression	"memset ( linetext , ' ' , w )"		5240134	0					
ANR	5240377	Callee	memset		5240134	0					
ANR	5240378	Identifier	memset		5240134	0					
ANR	5240379	ArgumentList	linetext		5240134	1					
ANR	5240380	Argument	linetext		5240134	0					
ANR	5240381	Identifier	linetext		5240134	0					
ANR	5240382	Argument	' '		5240134	1					
ANR	5240383	PrimaryExpression	' '		5240134	0					
ANR	5240384	Argument	w		5240134	2					
ANR	5240385	Identifier	w		5240134	0					
ANR	5240386	ExpressionStatement	free ( str )	3535:1:73324:73334	5240134	21	True				
ANR	5240387	CallExpression	free ( str )		5240134	0					
ANR	5240388	Callee	free		5240134	0					
ANR	5240389	Identifier	free		5240134	0					
ANR	5240390	ArgumentList	str		5240134	1					
ANR	5240391	Argument	str		5240134	0					
ANR	5240392	Identifier	str		5240134	0					
ANR	5240393	ReturnStatement	"return r_str_list_join ( out , ""\\n"" ) ;"	3536:1:73337:73371	5240134	22	True				
ANR	5240394	CallExpression	"r_str_list_join ( out , ""\\n"" )"		5240134	0					
ANR	5240395	Callee	r_str_list_join		5240134	0					
ANR	5240396	Identifier	r_str_list_join		5240134	0					
ANR	5240397	ArgumentList	out		5240134	1					
ANR	5240398	Argument	out		5240134	0					
ANR	5240399	Identifier	out		5240134	0					
ANR	5240400	Argument	"""\\n"""		5240134	1					
ANR	5240401	PrimaryExpression	"""\\n"""		5240134	0					
ANR	5240402	ReturnType	R_API char *		5240134	1					
ANR	5240403	Identifier	r_str_scale		5240134	2					
ANR	5240404	ParameterList	"const char * s , int w , int h"		5240134	3					
ANR	5240405	Parameter	const char * s	3499:24:72333:72345	5240134	0	True				
ANR	5240406	ParameterType	const char *		5240134	0					
ANR	5240407	Identifier	s		5240134	1					
ANR	5240408	Parameter	int w	3499:39:72348:72352	5240134	1	True				
ANR	5240409	ParameterType	int		5240134	0					
ANR	5240410	Identifier	w		5240134	1					
ANR	5240411	Parameter	int h	3499:46:72355:72359	5240134	2	True				
ANR	5240412	ParameterType	int		5240134	0					
ANR	5240413	Identifier	h		5240134	1					
ANR	5240414	CFGEntryNode	ENTRY		5240134		True				
ANR	5240415	CFGExitNode	EXIT		5240134		True				
ANR	5240416	Symbol	srcline		5240134						
ANR	5240417	Symbol	zoomedline		5240134						
ANR	5240418	Symbol	line		5240134						
ANR	5240419	Symbol	linetext		5240134						
ANR	5240420	Symbol	r_str_split_list		5240134						
ANR	5240421	Symbol	out		5240134						
ANR	5240422	Symbol	strlen		5240134						
ANR	5240423	Symbol	maxcol		5240134						
ANR	5240424	Symbol	* linetext		5240134						
ANR	5240425	Symbol	* srcline		5240134						
ANR	5240426	Symbol	lines		5240134						
ANR	5240427	Symbol	free		5240134						
ANR	5240428	Symbol	* zoomedcol		5240134						
ANR	5240429	Symbol	curline		5240134						
ANR	5240430	Symbol	cols		5240134						
ANR	5240431	Symbol	zoomedcol		5240134						
ANR	5240432	Symbol	r_str_pad		5240134						
ANR	5240433	Symbol	r_list_newf		5240134						
ANR	5240434	Symbol	h		5240134						
ANR	5240435	Symbol	iter		5240134						
ANR	5240436	Symbol	i		5240134						
ANR	5240437	Symbol	r_list_get_n		5240134						
ANR	5240438	Symbol	j		5240134						
ANR	5240439	Symbol	rows		5240134						
ANR	5240440	Symbol	r_str_list_join		5240134						
ANR	5240441	Symbol	str		5240134						
ANR	5240442	Symbol	s		5240134						
ANR	5240443	Symbol	* j		5240134						
ANR	5240444	Symbol	w		5240134						
ANR	5240445	Symbol	R_MAX		5240134						
ANR	5240446	Symbol	strdup		5240134						
ANR	5240447	Symbol	r_list_length		5240134						
