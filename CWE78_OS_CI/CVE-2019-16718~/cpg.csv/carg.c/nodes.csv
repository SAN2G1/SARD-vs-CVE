command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	689719	File	data/converged/CVE-2019-16718~_radare2/carg.c								
ANR	689720	Function	set_fcn_args_info	7:0:96:932							
ANR	689721	FunctionDef	"set_fcn_args_info (RAnalFuncArg * arg , RAnal * anal , const char * fcn_name , const char * cc , int arg_num)"		689720	0					
ANR	689722	CompoundStatement		7:113:209:932	689720	0					
ANR	689723	IfStatement	if ( ! fcn_name || ! arg || ! anal )		689720	0					
ANR	689724	Condition	! fcn_name || ! arg || ! anal	8:5:216:241	689720	0	True				
ANR	689725	OrExpression	! fcn_name || ! arg || ! anal		689720	0		||			
ANR	689726	UnaryOperationExpression	! fcn_name		689720	0					
ANR	689727	UnaryOperator	!		689720	0					
ANR	689728	Identifier	fcn_name		689720	1					
ANR	689729	OrExpression	! arg || ! anal		689720	1		||			
ANR	689730	UnaryOperationExpression	! arg		689720	0					
ANR	689731	UnaryOperator	!		689720	0					
ANR	689732	Identifier	arg		689720	1					
ANR	689733	UnaryOperationExpression	! anal		689720	1					
ANR	689734	UnaryOperator	!		689720	0					
ANR	689735	Identifier	anal		689720	1					
ANR	689736	CompoundStatement		2:33:34:34	689720	1					
ANR	689737	ReturnStatement	return ;	9:2:248:254	689720	0	True				
ANR	689738	IdentifierDeclStatement	Sdb * TDB = anal -> sdb_types ;	11:1:260:286	689720	1	True				
ANR	689739	IdentifierDecl	* TDB = anal -> sdb_types		689720	0					
ANR	689740	IdentifierDeclType	Sdb *		689720	0					
ANR	689741	Identifier	TDB		689720	1					
ANR	689742	AssignmentExpression	* TDB = anal -> sdb_types		689720	2		=			
ANR	689743	Identifier	TDB		689720	0					
ANR	689744	PtrMemberAccess	anal -> sdb_types		689720	1					
ANR	689745	Identifier	anal		689720	0					
ANR	689746	Identifier	sdb_types		689720	1					
ANR	689747	ExpressionStatement	"arg -> name = r_type_func_args_name ( TDB , fcn_name , arg_num )"	12:1:289:347	689720	2	True				
ANR	689748	AssignmentExpression	"arg -> name = r_type_func_args_name ( TDB , fcn_name , arg_num )"		689720	0		=			
ANR	689749	PtrMemberAccess	arg -> name		689720	0					
ANR	689750	Identifier	arg		689720	0					
ANR	689751	Identifier	name		689720	1					
ANR	689752	CallExpression	"r_type_func_args_name ( TDB , fcn_name , arg_num )"		689720	1					
ANR	689753	Callee	r_type_func_args_name		689720	0					
ANR	689754	Identifier	r_type_func_args_name		689720	0					
ANR	689755	ArgumentList	TDB		689720	1					
ANR	689756	Argument	TDB		689720	0					
ANR	689757	Identifier	TDB		689720	0					
ANR	689758	Argument	fcn_name		689720	1					
ANR	689759	Identifier	fcn_name		689720	0					
ANR	689760	Argument	arg_num		689720	2					
ANR	689761	Identifier	arg_num		689720	0					
ANR	689762	ExpressionStatement	"arg -> orig_c_type = r_type_func_args_type ( TDB , fcn_name , arg_num )"	13:1:350:415	689720	3	True				
ANR	689763	AssignmentExpression	"arg -> orig_c_type = r_type_func_args_type ( TDB , fcn_name , arg_num )"		689720	0		=			
ANR	689764	PtrMemberAccess	arg -> orig_c_type		689720	0					
ANR	689765	Identifier	arg		689720	0					
ANR	689766	Identifier	orig_c_type		689720	1					
ANR	689767	CallExpression	"r_type_func_args_type ( TDB , fcn_name , arg_num )"		689720	1					
ANR	689768	Callee	r_type_func_args_type		689720	0					
ANR	689769	Identifier	r_type_func_args_type		689720	0					
ANR	689770	ArgumentList	TDB		689720	1					
ANR	689771	Argument	TDB		689720	0					
ANR	689772	Identifier	TDB		689720	0					
ANR	689773	Argument	fcn_name		689720	1					
ANR	689774	Identifier	fcn_name		689720	0					
ANR	689775	Argument	arg_num		689720	2					
ANR	689776	Identifier	arg_num		689720	0					
ANR	689777	IfStatement	if ( ! arg -> name || ! arg -> orig_c_type )		689720	4					
ANR	689778	Condition	! arg -> name || ! arg -> orig_c_type	14:5:422:452	689720	0	True				
ANR	689779	OrExpression	! arg -> name || ! arg -> orig_c_type		689720	0		||			
ANR	689780	UnaryOperationExpression	! arg -> name		689720	0					
ANR	689781	UnaryOperator	!		689720	0					
ANR	689782	PtrMemberAccess	arg -> name		689720	1					
ANR	689783	Identifier	arg		689720	0					
ANR	689784	Identifier	name		689720	1					
ANR	689785	UnaryOperationExpression	! arg -> orig_c_type		689720	1					
ANR	689786	UnaryOperator	!		689720	0					
ANR	689787	PtrMemberAccess	arg -> orig_c_type		689720	1					
ANR	689788	Identifier	arg		689720	0					
ANR	689789	Identifier	orig_c_type		689720	1					
ANR	689790	CompoundStatement		8:38:245:245	689720	1					
ANR	689791	ExpressionStatement	"eprintf ( ""Missing type for function argument (%s)\\n"" , fcn_name )"	15:2:459:522	689720	0	True				
ANR	689792	CallExpression	"eprintf ( ""Missing type for function argument (%s)\\n"" , fcn_name )"		689720	0					
ANR	689793	Callee	eprintf		689720	0					
ANR	689794	Identifier	eprintf		689720	0					
ANR	689795	ArgumentList	"""Missing type for function argument (%s)\\n"""		689720	1					
ANR	689796	Argument	"""Missing type for function argument (%s)\\n"""		689720	0					
ANR	689797	PrimaryExpression	"""Missing type for function argument (%s)\\n"""		689720	0					
ANR	689798	Argument	fcn_name		689720	1					
ANR	689799	Identifier	fcn_name		689720	0					
ANR	689800	ReturnStatement	return ;	16:2:526:532	689720	1	True				
ANR	689801	IfStatement	"if ( ! strncmp ( ""const "" , arg -> orig_c_type , 6 ) )"		689720	5					
ANR	689802	Condition	"! strncmp ( ""const "" , arg -> orig_c_type , 6 )"	18:5:542:581	689720	0	True				
ANR	689803	UnaryOperationExpression	"! strncmp ( ""const "" , arg -> orig_c_type , 6 )"		689720	0					
ANR	689804	UnaryOperator	!		689720	0					
ANR	689805	CallExpression	"strncmp ( ""const "" , arg -> orig_c_type , 6 )"		689720	1					
ANR	689806	Callee	strncmp		689720	0					
ANR	689807	Identifier	strncmp		689720	0					
ANR	689808	ArgumentList	"""const """		689720	1					
ANR	689809	Argument	"""const """		689720	0					
ANR	689810	PrimaryExpression	"""const """		689720	0					
ANR	689811	Argument	arg -> orig_c_type		689720	1					
ANR	689812	PtrMemberAccess	arg -> orig_c_type		689720	0					
ANR	689813	Identifier	arg		689720	0					
ANR	689814	Identifier	orig_c_type		689720	1					
ANR	689815	Argument	6		689720	2					
ANR	689816	PrimaryExpression	6		689720	0					
ANR	689817	CompoundStatement		12:47:374:374	689720	1					
ANR	689818	ExpressionStatement	arg -> c_type = arg -> orig_c_type + 6	19:2:588:622	689720	0	True				
ANR	689819	AssignmentExpression	arg -> c_type = arg -> orig_c_type + 6		689720	0		=			
ANR	689820	PtrMemberAccess	arg -> c_type		689720	0					
ANR	689821	Identifier	arg		689720	0					
ANR	689822	Identifier	c_type		689720	1					
ANR	689823	AdditiveExpression	arg -> orig_c_type + 6		689720	1		+			
ANR	689824	PtrMemberAccess	arg -> orig_c_type		689720	0					
ANR	689825	Identifier	arg		689720	0					
ANR	689826	Identifier	orig_c_type		689720	1					
ANR	689827	PrimaryExpression	6		689720	1					
ANR	689828	ElseStatement	else		689720	0					
ANR	689829	CompoundStatement		14:8:422:422	689720	0					
ANR	689830	ExpressionStatement	arg -> c_type = arg -> orig_c_type	21:2:636:666	689720	0	True				
ANR	689831	AssignmentExpression	arg -> c_type = arg -> orig_c_type		689720	0		=			
ANR	689832	PtrMemberAccess	arg -> c_type		689720	0					
ANR	689833	Identifier	arg		689720	0					
ANR	689834	Identifier	c_type		689720	1					
ANR	689835	PtrMemberAccess	arg -> orig_c_type		689720	1					
ANR	689836	Identifier	arg		689720	0					
ANR	689837	Identifier	orig_c_type		689720	1					
ANR	689838	IdentifierDeclStatement	"const char * query = sdb_fmt ( ""type.%s"" , arg -> c_type ) ;"	23:1:672:724	689720	6	True				
ANR	689839	IdentifierDecl	"* query = sdb_fmt ( ""type.%s"" , arg -> c_type )"		689720	0					
ANR	689840	IdentifierDeclType	const char *		689720	0					
ANR	689841	Identifier	query		689720	1					
ANR	689842	AssignmentExpression	"* query = sdb_fmt ( ""type.%s"" , arg -> c_type )"		689720	2		=			
ANR	689843	Identifier	query		689720	0					
ANR	689844	CallExpression	"sdb_fmt ( ""type.%s"" , arg -> c_type )"		689720	1					
ANR	689845	Callee	sdb_fmt		689720	0					
ANR	689846	Identifier	sdb_fmt		689720	0					
ANR	689847	ArgumentList	"""type.%s"""		689720	1					
ANR	689848	Argument	"""type.%s"""		689720	0					
ANR	689849	PrimaryExpression	"""type.%s"""		689720	0					
ANR	689850	Argument	arg -> c_type		689720	1					
ANR	689851	PtrMemberAccess	arg -> c_type		689720	0					
ANR	689852	Identifier	arg		689720	0					
ANR	689853	Identifier	c_type		689720	1					
ANR	689854	ExpressionStatement	"arg -> fmt = sdb_const_get ( TDB , query , 0 )"	24:1:727:767	689720	7	True				
ANR	689855	AssignmentExpression	"arg -> fmt = sdb_const_get ( TDB , query , 0 )"		689720	0		=			
ANR	689856	PtrMemberAccess	arg -> fmt		689720	0					
ANR	689857	Identifier	arg		689720	0					
ANR	689858	Identifier	fmt		689720	1					
ANR	689859	CallExpression	"sdb_const_get ( TDB , query , 0 )"		689720	1					
ANR	689860	Callee	sdb_const_get		689720	0					
ANR	689861	Identifier	sdb_const_get		689720	0					
ANR	689862	ArgumentList	TDB		689720	1					
ANR	689863	Argument	TDB		689720	0					
ANR	689864	Identifier	TDB		689720	0					
ANR	689865	Argument	query		689720	1					
ANR	689866	Identifier	query		689720	0					
ANR	689867	Argument	0		689720	2					
ANR	689868	PrimaryExpression	0		689720	0					
ANR	689869	IdentifierDeclStatement	"const char * t_query = sdb_fmt ( ""type.%s.size"" , arg -> c_type ) ;"	25:1:770:829	689720	8	True				
ANR	689870	IdentifierDecl	"* t_query = sdb_fmt ( ""type.%s.size"" , arg -> c_type )"		689720	0					
ANR	689871	IdentifierDeclType	const char *		689720	0					
ANR	689872	Identifier	t_query		689720	1					
ANR	689873	AssignmentExpression	"* t_query = sdb_fmt ( ""type.%s.size"" , arg -> c_type )"		689720	2		=			
ANR	689874	Identifier	t_query		689720	0					
ANR	689875	CallExpression	"sdb_fmt ( ""type.%s.size"" , arg -> c_type )"		689720	1					
ANR	689876	Callee	sdb_fmt		689720	0					
ANR	689877	Identifier	sdb_fmt		689720	0					
ANR	689878	ArgumentList	"""type.%s.size"""		689720	1					
ANR	689879	Argument	"""type.%s.size"""		689720	0					
ANR	689880	PrimaryExpression	"""type.%s.size"""		689720	0					
ANR	689881	Argument	arg -> c_type		689720	1					
ANR	689882	PtrMemberAccess	arg -> c_type		689720	0					
ANR	689883	Identifier	arg		689720	0					
ANR	689884	Identifier	c_type		689720	1					
ANR	689885	ExpressionStatement	"arg -> size = sdb_num_get ( TDB , t_query , 0 ) / 8"	26:1:832:877	689720	9	True				
ANR	689886	AssignmentExpression	"arg -> size = sdb_num_get ( TDB , t_query , 0 ) / 8"		689720	0		=			
ANR	689887	PtrMemberAccess	arg -> size		689720	0					
ANR	689888	Identifier	arg		689720	0					
ANR	689889	Identifier	size		689720	1					
ANR	689890	MultiplicativeExpression	"sdb_num_get ( TDB , t_query , 0 ) / 8"		689720	1		/			
ANR	689891	CallExpression	"sdb_num_get ( TDB , t_query , 0 )"		689720	0					
ANR	689892	Callee	sdb_num_get		689720	0					
ANR	689893	Identifier	sdb_num_get		689720	0					
ANR	689894	ArgumentList	TDB		689720	1					
ANR	689895	Argument	TDB		689720	0					
ANR	689896	Identifier	TDB		689720	0					
ANR	689897	Argument	t_query		689720	1					
ANR	689898	Identifier	t_query		689720	0					
ANR	689899	Argument	0		689720	2					
ANR	689900	PrimaryExpression	0		689720	0					
ANR	689901	PrimaryExpression	8		689720	1					
ANR	689902	ExpressionStatement	"arg -> cc_source = r_anal_cc_arg ( anal , cc , arg_num )"	27:1:880:930	689720	10	True				
ANR	689903	AssignmentExpression	"arg -> cc_source = r_anal_cc_arg ( anal , cc , arg_num )"		689720	0		=			
ANR	689904	PtrMemberAccess	arg -> cc_source		689720	0					
ANR	689905	Identifier	arg		689720	0					
ANR	689906	Identifier	cc_source		689720	1					
ANR	689907	CallExpression	"r_anal_cc_arg ( anal , cc , arg_num )"		689720	1					
ANR	689908	Callee	r_anal_cc_arg		689720	0					
ANR	689909	Identifier	r_anal_cc_arg		689720	0					
ANR	689910	ArgumentList	anal		689720	1					
ANR	689911	Argument	anal		689720	0					
ANR	689912	Identifier	anal		689720	0					
ANR	689913	Argument	cc		689720	1					
ANR	689914	Identifier	cc		689720	0					
ANR	689915	Argument	arg_num		689720	2					
ANR	689916	Identifier	arg_num		689720	0					
ANR	689917	ReturnType	static void		689720	1					
ANR	689918	Identifier	set_fcn_args_info		689720	2					
ANR	689919	ParameterList	"RAnalFuncArg * arg , RAnal * anal , const char * fcn_name , const char * cc , int arg_num"		689720	3					
ANR	689920	Parameter	RAnalFuncArg * arg	7:30:126:142	689720	0	True				
ANR	689921	ParameterType	RAnalFuncArg *		689720	0					
ANR	689922	Identifier	arg		689720	1					
ANR	689923	Parameter	RAnal * anal	7:49:145:155	689720	1	True				
ANR	689924	ParameterType	RAnal *		689720	0					
ANR	689925	Identifier	anal		689720	1					
ANR	689926	Parameter	const char * fcn_name	7:62:158:177	689720	2	True				
ANR	689927	ParameterType	const char *		689720	0					
ANR	689928	Identifier	fcn_name		689720	1					
ANR	689929	Parameter	const char * cc	7:84:180:193	689720	3	True				
ANR	689930	ParameterType	const char *		689720	0					
ANR	689931	Identifier	cc		689720	1					
ANR	689932	Parameter	int arg_num	7:100:196:206	689720	4	True				
ANR	689933	ParameterType	int		689720	0					
ANR	689934	Identifier	arg_num		689720	1					
ANR	689935	CFGEntryNode	ENTRY		689720		True				
ANR	689936	CFGExitNode	EXIT		689720		True				
ANR	689937	Symbol	cc		689720						
ANR	689938	Symbol	arg_num		689720						
ANR	689939	Symbol	arg -> orig_c_type		689720						
ANR	689940	Symbol	sdb_num_get		689720						
ANR	689941	Symbol	t_query		689720						
ANR	689942	Symbol	query		689720						
ANR	689943	Symbol	r_type_func_args_name		689720						
ANR	689944	Symbol	sdb_const_get		689720						
ANR	689945	Symbol	arg -> size		689720						
ANR	689946	Symbol	strncmp		689720						
ANR	689947	Symbol	* anal		689720						
ANR	689948	Symbol	TDB		689720						
ANR	689949	Symbol	r_type_func_args_type		689720						
ANR	689950	Symbol	anal		689720						
ANR	689951	Symbol	arg -> name		689720						
ANR	689952	Symbol	arg		689720						
ANR	689953	Symbol	arg -> c_type		689720						
ANR	689954	Symbol	arg -> fmt		689720						
ANR	689955	Symbol	r_anal_cc_arg		689720						
ANR	689956	Symbol	arg -> cc_source		689720						
ANR	689957	Symbol	anal -> sdb_types		689720						
ANR	689958	Symbol	fcn_name		689720						
ANR	689959	Symbol	sdb_fmt		689720						
ANR	689960	Symbol	* arg		689720						
ANR	689961	Function	resolve_fcn_name	30:0:935:1357							
ANR	689962	FunctionDef	"resolve_fcn_name (RAnal * anal , const char * func_name)"		689961	0					
ANR	689963	CompoundStatement		30:65:1000:1357	689961	0					
ANR	689964	IdentifierDeclStatement	const char * str = func_name ;	31:1:1003:1030	689961	0	True				
ANR	689965	IdentifierDecl	* str = func_name		689961	0					
ANR	689966	IdentifierDeclType	const char *		689961	0					
ANR	689967	Identifier	str		689961	1					
ANR	689968	AssignmentExpression	* str = func_name		689961	2		=			
ANR	689969	Identifier	func_name		689961	0					
ANR	689970	Identifier	func_name		689961	1					
ANR	689971	IdentifierDeclStatement	const char * name = func_name ;	32:1:1033:1061	689961	1	True				
ANR	689972	IdentifierDecl	* name = func_name		689961	0					
ANR	689973	IdentifierDeclType	const char *		689961	0					
ANR	689974	Identifier	name		689961	1					
ANR	689975	AssignmentExpression	* name = func_name		689961	2		=			
ANR	689976	Identifier	func_name		689961	0					
ANR	689977	Identifier	func_name		689961	1					
ANR	689978	IfStatement	"if ( r_type_func_exist ( anal -> sdb_types , func_name ) )"		689961	2					
ANR	689979	Condition	"r_type_func_exist ( anal -> sdb_types , func_name )"	33:5:1068:1113	689961	0	True				
ANR	689980	CallExpression	"r_type_func_exist ( anal -> sdb_types , func_name )"		689961	0					
ANR	689981	Callee	r_type_func_exist		689961	0					
ANR	689982	Identifier	r_type_func_exist		689961	0					
ANR	689983	ArgumentList	anal -> sdb_types		689961	1					
ANR	689984	Argument	anal -> sdb_types		689961	0					
ANR	689985	PtrMemberAccess	anal -> sdb_types		689961	0					
ANR	689986	Identifier	anal		689961	0					
ANR	689987	Identifier	sdb_types		689961	1					
ANR	689988	Argument	func_name		689961	1					
ANR	689989	Identifier	func_name		689961	0					
ANR	689990	CompoundStatement		4:53:115:115	689961	1					
ANR	689991	ReturnStatement	return strdup ( func_name ) ;	34:2:1120:1145	689961	0	True				
ANR	689992	CallExpression	strdup ( func_name )		689961	0					
ANR	689993	Callee	strdup		689961	0					
ANR	689994	Identifier	strdup		689961	0					
ANR	689995	ArgumentList	func_name		689961	1					
ANR	689996	Argument	func_name		689961	0					
ANR	689997	Identifier	func_name		689961	0					
ANR	689998	WhileStatement	"while ( ( str = strchr ( str , '.' ) ) )"		689961	3					
ANR	689999	Condition	"str = strchr ( str , '.' )"	36:8:1158:1182	689961	0	True				
ANR	690000	AssignmentExpression	"str = strchr ( str , '.' )"		689961	0		=			
ANR	690001	Identifier	str		689961	0					
ANR	690002	CallExpression	"strchr ( str , '.' )"		689961	1					
ANR	690003	Callee	strchr		689961	0					
ANR	690004	Identifier	strchr		689961	0					
ANR	690005	ArgumentList	str		689961	1					
ANR	690006	Argument	str		689961	0					
ANR	690007	Identifier	str		689961	0					
ANR	690008	Argument	'.'		689961	1					
ANR	690009	PrimaryExpression	'.'		689961	0					
ANR	690010	CompoundStatement		7:35:184:184	689961	1					
ANR	690011	ExpressionStatement	name = str + 1	37:2:1189:1203	689961	0	True				
ANR	690012	AssignmentExpression	name = str + 1		689961	0		=			
ANR	690013	Identifier	name		689961	0					
ANR	690014	AdditiveExpression	str + 1		689961	1		+			
ANR	690015	Identifier	str		689961	0					
ANR	690016	PrimaryExpression	1		689961	1					
ANR	690017	ExpressionStatement	str ++	38:2:1207:1212	689961	1	True				
ANR	690018	PostIncDecOperationExpression	str ++		689961	0					
ANR	690019	Identifier	str		689961	0					
ANR	690020	IncDec	++		689961	1					
ANR	690021	IfStatement	"if ( r_type_func_exist ( anal -> sdb_types , name ) )"		689961	4					
ANR	690022	Condition	"r_type_func_exist ( anal -> sdb_types , name )"	40:5:1222:1262	689961	0	True				
ANR	690023	CallExpression	"r_type_func_exist ( anal -> sdb_types , name )"		689961	0					
ANR	690024	Callee	r_type_func_exist		689961	0					
ANR	690025	Identifier	r_type_func_exist		689961	0					
ANR	690026	ArgumentList	anal -> sdb_types		689961	1					
ANR	690027	Argument	anal -> sdb_types		689961	0					
ANR	690028	PtrMemberAccess	anal -> sdb_types		689961	0					
ANR	690029	Identifier	anal		689961	0					
ANR	690030	Identifier	sdb_types		689961	1					
ANR	690031	Argument	name		689961	1					
ANR	690032	Identifier	name		689961	0					
ANR	690033	CompoundStatement		11:48:264:264	689961	1					
ANR	690034	ReturnStatement	return strdup ( name ) ;	41:2:1269:1289	689961	0	True				
ANR	690035	CallExpression	strdup ( name )		689961	0					
ANR	690036	Callee	strdup		689961	0					
ANR	690037	Identifier	strdup		689961	0					
ANR	690038	ArgumentList	name		689961	1					
ANR	690039	Argument	name		689961	0					
ANR	690040	Identifier	name		689961	0					
ANR	690041	ReturnStatement	"return r_type_func_guess ( anal -> sdb_types , ( char * ) func_name ) ;"	43:1:1295:1355	689961	5	True				
ANR	690042	CallExpression	"r_type_func_guess ( anal -> sdb_types , ( char * ) func_name )"		689961	0					
ANR	690043	Callee	r_type_func_guess		689961	0					
ANR	690044	Identifier	r_type_func_guess		689961	0					
ANR	690045	ArgumentList	anal -> sdb_types		689961	1					
ANR	690046	Argument	anal -> sdb_types		689961	0					
ANR	690047	PtrMemberAccess	anal -> sdb_types		689961	0					
ANR	690048	Identifier	anal		689961	0					
ANR	690049	Identifier	sdb_types		689961	1					
ANR	690050	Argument	( char * ) func_name		689961	1					
ANR	690051	CastExpression	( char * ) func_name		689961	0					
ANR	690052	CastTarget	char *		689961	0					
ANR	690053	Identifier	func_name		689961	1					
ANR	690054	ReturnType	R_API char *		689961	1					
ANR	690055	Identifier	resolve_fcn_name		689961	2					
ANR	690056	ParameterList	"RAnal * anal , const char * func_name"		689961	3					
ANR	690057	Parameter	RAnal * anal	30:29:964:974	689961	0	True				
ANR	690058	ParameterType	RAnal *		689961	0					
ANR	690059	Identifier	anal		689961	1					
ANR	690060	Parameter	const char * func_name	30:42:977:997	689961	1	True				
ANR	690061	ParameterType	const char *		689961	0					
ANR	690062	Identifier	func_name		689961	1					
ANR	690063	CFGEntryNode	ENTRY		689961		True				
ANR	690064	CFGExitNode	EXIT		689961		True				
ANR	690065	Symbol	str		689961						
ANR	690066	Symbol	r_type_func_exist		689961						
ANR	690067	Symbol	* anal		689961						
ANR	690068	Symbol	r_type_func_guess		689961						
ANR	690069	Symbol	anal		689961						
ANR	690070	Symbol	name		689961						
ANR	690071	Symbol	strchr		689961						
ANR	690072	Symbol	strdup		689961						
ANR	690073	Symbol	anal -> sdb_types		689961						
ANR	690074	Symbol	func_name		689961						
ANR	690075	Function	get_buf_val	46:0:1360:1504							
ANR	690076	FunctionDef	"get_buf_val (ut8 * buf , int endian , int width)"		690075	0					
ANR	690077	CompoundStatement		46:57:1417:1504	690075	0					
ANR	690078	ReturnStatement	"return ( width == 8 ) ? r_read_ble64 ( buf , endian ) : ( ut64 ) r_read_ble32 ( buf , endian ) ;"	47:1:1420:1502	690075	0	True				
ANR	690079	ConditionalExpression	"( width == 8 ) ? r_read_ble64 ( buf , endian ) : ( ut64 ) r_read_ble32 ( buf , endian )"		690075	0					
ANR	690080	Condition	width == 8		690075	0					
ANR	690081	EqualityExpression	width == 8		690075	0		==			
ANR	690082	Identifier	width		690075	0					
ANR	690083	PrimaryExpression	8		690075	1					
ANR	690084	CallExpression	"r_read_ble64 ( buf , endian )"		690075	1					
ANR	690085	Callee	r_read_ble64		690075	0					
ANR	690086	Identifier	r_read_ble64		690075	0					
ANR	690087	ArgumentList	buf		690075	1					
ANR	690088	Argument	buf		690075	0					
ANR	690089	Identifier	buf		690075	0					
ANR	690090	Argument	endian		690075	1					
ANR	690091	Identifier	endian		690075	0					
ANR	690092	CastExpression	"( ut64 ) r_read_ble32 ( buf , endian )"		690075	2					
ANR	690093	CastTarget	ut64		690075	0					
ANR	690094	CallExpression	"r_read_ble32 ( buf , endian )"		690075	1					
ANR	690095	Callee	r_read_ble32		690075	0					
ANR	690096	Identifier	r_read_ble32		690075	0					
ANR	690097	ArgumentList	buf		690075	1					
ANR	690098	Argument	buf		690075	0					
ANR	690099	Identifier	buf		690075	0					
ANR	690100	Argument	endian		690075	1					
ANR	690101	Identifier	endian		690075	0					
ANR	690102	ReturnType	static ut64		690075	1					
ANR	690103	Identifier	get_buf_val		690075	2					
ANR	690104	ParameterList	"ut8 * buf , int endian , int width"		690075	3					
ANR	690105	Parameter	ut8 * buf	46:24:1384:1391	690075	0	True				
ANR	690106	ParameterType	ut8 *		690075	0					
ANR	690107	Identifier	buf		690075	1					
ANR	690108	Parameter	int endian	46:34:1394:1403	690075	1	True				
ANR	690109	ParameterType	int		690075	0					
ANR	690110	Identifier	endian		690075	1					
ANR	690111	Parameter	int width	46:46:1406:1414	690075	2	True				
ANR	690112	ParameterType	int		690075	0					
ANR	690113	Identifier	width		690075	1					
ANR	690114	CFGEntryNode	ENTRY		690075		True				
ANR	690115	CFGExitNode	EXIT		690075		True				
ANR	690116	Symbol	buf		690075						
ANR	690117	Symbol	width		690075						
ANR	690118	Symbol	endian		690075						
ANR	690119	Symbol	r_read_ble32		690075						
ANR	690120	Symbol	r_read_ble64		690075						
ANR	690121	Function	print_arg_str	50:0:1507:1767							
ANR	690122	FunctionDef	"print_arg_str (int argcnt , const char * name , bool color)"		690121	0					
ANR	690123	CompoundStatement		50:68:1575:1767	690121	0					
ANR	690124	IfStatement	if ( color )		690121	0					
ANR	690125	Condition	color	51:5:1582:1586	690121	0	True				
ANR	690126	Identifier	color		690121	0					
ANR	690127	CompoundStatement		2:12:13:13	690121	1					
ANR	690128	Statement	r_cons_printf	52:2:1593:1605	690121	0	True				
ANR	690129	Statement	(	52:16:1607:1607	690121	1	True				
ANR	690130	Statement	Color_BYELLOW	52:17:1608:1620	690121	2	True				
ANR	690131	Statement	""" arg [%d]"""	52:30:1621:1631	690121	3	True				
ANR	690132	Statement	Color_RESET	52:41:1632:1642	690121	4	True				
ANR	690133	Statement	""" -"""	52:52:1643:1646	690121	5	True				
ANR	690134	Statement	Color_BCYAN	52:56:1647:1657	690121	6	True				
ANR	690135	Statement	""" %s"""	52:67:1658:1662	690121	7	True				
ANR	690136	Statement	Color_RESET	52:72:1663:1673	690121	8	True				
ANR	690137	Statement	""" : """	52:83:1674:1678	690121	9	True				
ANR	690138	Statement	","	52:88:1679:1679	690121	10	True				
ANR	690139	Statement	argcnt	53:4:1685:1690	690121	11	True				
ANR	690140	Statement	","	53:10:1691:1691	690121	12	True				
ANR	690141	Statement	name	53:12:1693:1696	690121	13	True				
ANR	690142	Statement	)	53:16:1697:1697	690121	14	True				
ANR	690143	ExpressionStatement		53:17:1698:1698	690121	15	True				
ANR	690144	ElseStatement	else		690121	0					
ANR	690145	CompoundStatement		5:8:132:132	690121	0					
ANR	690146	ExpressionStatement	"r_cons_printf ( "" arg [%d] -  %s : "" , argcnt , name )"	55:2:1712:1762	690121	0	True				
ANR	690147	CallExpression	"r_cons_printf ( "" arg [%d] -  %s : "" , argcnt , name )"		690121	0					
ANR	690148	Callee	r_cons_printf		690121	0					
ANR	690149	Identifier	r_cons_printf		690121	0					
ANR	690150	ArgumentList	""" arg [%d] -  %s : """		690121	1					
ANR	690151	Argument	""" arg [%d] -  %s : """		690121	0					
ANR	690152	PrimaryExpression	""" arg [%d] -  %s : """		690121	0					
ANR	690153	Argument	argcnt		690121	1					
ANR	690154	Identifier	argcnt		690121	0					
ANR	690155	Argument	name		690121	2					
ANR	690156	Identifier	name		690121	0					
ANR	690157	ReturnType	static void		690121	1					
ANR	690158	Identifier	print_arg_str		690121	2					
ANR	690159	ParameterList	"int argcnt , const char * name , bool color"		690121	3					
ANR	690160	Parameter	int argcnt	50:26:1533:1542	690121	0	True				
ANR	690161	ParameterType	int		690121	0					
ANR	690162	Identifier	argcnt		690121	1					
ANR	690163	Parameter	const char * name	50:38:1545:1560	690121	1	True				
ANR	690164	ParameterType	const char *		690121	0					
ANR	690165	Identifier	name		690121	1					
ANR	690166	Parameter	bool color	50:56:1563:1572	690121	2	True				
ANR	690167	ParameterType	bool		690121	0					
ANR	690168	Identifier	color		690121	1					
ANR	690169	CFGEntryNode	ENTRY		690121		True				
ANR	690170	CFGExitNode	EXIT		690121		True				
ANR	690171	Symbol	color		690121						
ANR	690172	Symbol	name		690121						
ANR	690173	Symbol	argcnt		690121						
ANR	690174	Function	print_format_values	59:0:1770:3837							
ANR	690175	FunctionDef	"print_format_values (RCore * core , const char * fmt , bool onstack , ut64 src , bool color)"		690174	0					
ANR	690176	CompoundStatement		59:98:1868:3837	690174	0					
ANR	690177	IdentifierDeclStatement	char opt ;	60:1:1871:1879	690174	0	True				
ANR	690178	IdentifierDecl	opt		690174	0					
ANR	690179	IdentifierDeclType	char		690174	0					
ANR	690180	Identifier	opt		690174	1					
ANR	690181	IdentifierDeclStatement	ut64 bval = src ;	61:1:1882:1897	690174	1	True				
ANR	690182	IdentifierDecl	bval = src		690174	0					
ANR	690183	IdentifierDeclType	ut64		690174	0					
ANR	690184	Identifier	bval		690174	1					
ANR	690185	AssignmentExpression	bval = src		690174	2		=			
ANR	690186	Identifier	src		690174	0					
ANR	690187	Identifier	src		690174	1					
ANR	690188	IdentifierDeclStatement	int i ;	62:1:1900:1905	690174	2	True				
ANR	690189	IdentifierDecl	i		690174	0					
ANR	690190	IdentifierDeclType	int		690174	0					
ANR	690191	Identifier	i		690174	1					
ANR	690192	IdentifierDeclStatement	int endian = core -> print -> big_endian ;	63:1:1908:1944	690174	3	True				
ANR	690193	IdentifierDecl	endian = core -> print -> big_endian		690174	0					
ANR	690194	IdentifierDeclType	int		690174	0					
ANR	690195	Identifier	endian		690174	1					
ANR	690196	AssignmentExpression	endian = core -> print -> big_endian		690174	2		=			
ANR	690197	Identifier	endian		690174	0					
ANR	690198	PtrMemberAccess	core -> print -> big_endian		690174	1					
ANR	690199	PtrMemberAccess	core -> print		690174	0					
ANR	690200	Identifier	core		690174	0					
ANR	690201	Identifier	print		690174	1					
ANR	690202	Identifier	big_endian		690174	1					
ANR	690203	IdentifierDeclStatement	int width = ( core -> anal -> bits == 64 ) ? 8 : 4 ;	64:1:1947:1989	690174	4	True				
ANR	690204	IdentifierDecl	width = ( core -> anal -> bits == 64 ) ? 8 : 4		690174	0					
ANR	690205	IdentifierDeclType	int		690174	0					
ANR	690206	Identifier	width		690174	1					
ANR	690207	AssignmentExpression	width = ( core -> anal -> bits == 64 ) ? 8 : 4		690174	2		=			
ANR	690208	Identifier	width		690174	0					
ANR	690209	ConditionalExpression	( core -> anal -> bits == 64 ) ? 8 : 4		690174	1					
ANR	690210	Condition	core -> anal -> bits == 64		690174	0					
ANR	690211	EqualityExpression	core -> anal -> bits == 64		690174	0		==			
ANR	690212	PtrMemberAccess	core -> anal -> bits		690174	0					
ANR	690213	PtrMemberAccess	core -> anal		690174	0					
ANR	690214	Identifier	core		690174	0					
ANR	690215	Identifier	anal		690174	1					
ANR	690216	Identifier	bits		690174	1					
ANR	690217	PrimaryExpression	64		690174	1					
ANR	690218	PrimaryExpression	8		690174	1					
ANR	690219	PrimaryExpression	4		690174	2					
ANR	690220	IdentifierDeclStatement	"int bsize = R_MIN ( 64 , core -> blocksize ) ;"	65:1:1992:2031	690174	5	True				
ANR	690221	IdentifierDecl	"bsize = R_MIN ( 64 , core -> blocksize )"		690174	0					
ANR	690222	IdentifierDeclType	int		690174	0					
ANR	690223	Identifier	bsize		690174	1					
ANR	690224	AssignmentExpression	"bsize = R_MIN ( 64 , core -> blocksize )"		690174	2		=			
ANR	690225	Identifier	bsize		690174	0					
ANR	690226	CallExpression	"R_MIN ( 64 , core -> blocksize )"		690174	1					
ANR	690227	Callee	R_MIN		690174	0					
ANR	690228	Identifier	R_MIN		690174	0					
ANR	690229	ArgumentList	64		690174	1					
ANR	690230	Argument	64		690174	0					
ANR	690231	PrimaryExpression	64		690174	0					
ANR	690232	Argument	core -> blocksize		690174	1					
ANR	690233	PtrMemberAccess	core -> blocksize		690174	0					
ANR	690234	Identifier	core		690174	0					
ANR	690235	Identifier	blocksize		690174	1					
ANR	690236	IdentifierDeclStatement	ut8 * buf = malloc ( bsize ) ;	67:1:2035:2060	690174	6	True				
ANR	690237	IdentifierDecl	* buf = malloc ( bsize )		690174	0					
ANR	690238	IdentifierDeclType	ut8 *		690174	0					
ANR	690239	Identifier	buf		690174	1					
ANR	690240	AssignmentExpression	* buf = malloc ( bsize )		690174	2		=			
ANR	690241	Identifier	buf		690174	0					
ANR	690242	CallExpression	malloc ( bsize )		690174	1					
ANR	690243	Callee	malloc		690174	0					
ANR	690244	Identifier	malloc		690174	0					
ANR	690245	ArgumentList	bsize		690174	1					
ANR	690246	Argument	bsize		690174	0					
ANR	690247	Identifier	bsize		690174	0					
ANR	690248	IfStatement	if ( ! buf )		690174	7					
ANR	690249	Condition	! buf	68:5:2067:2070	690174	0	True				
ANR	690250	UnaryOperationExpression	! buf		690174	0					
ANR	690251	UnaryOperator	!		690174	0					
ANR	690252	Identifier	buf		690174	1					
ANR	690253	CompoundStatement		10:11:204:204	690174	1					
ANR	690254	ExpressionStatement	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , bsize )"	69:2:2077:2124	690174	0	True				
ANR	690255	CallExpression	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , bsize )"		690174	0					
ANR	690256	Callee	eprintf		690174	0					
ANR	690257	Identifier	eprintf		690174	0					
ANR	690258	ArgumentList	"""Cannot allocate %d byte(s)\\n"""		690174	1					
ANR	690259	Argument	"""Cannot allocate %d byte(s)\\n"""		690174	0					
ANR	690260	PrimaryExpression	"""Cannot allocate %d byte(s)\\n"""		690174	0					
ANR	690261	Argument	bsize		690174	1					
ANR	690262	Identifier	bsize		690174	0					
ANR	690263	ExpressionStatement	free ( buf )	70:2:2128:2138	690174	1	True				
ANR	690264	CallExpression	free ( buf )		690174	0					
ANR	690265	Callee	free		690174	0					
ANR	690266	Identifier	free		690174	0					
ANR	690267	ArgumentList	buf		690174	1					
ANR	690268	Argument	buf		690174	0					
ANR	690269	Identifier	buf		690174	0					
ANR	690270	ReturnStatement	return ;	71:2:2142:2148	690174	2	True				
ANR	690271	IfStatement	if ( fmt )		690174	8					
ANR	690272	Condition	fmt	73:5:2158:2160	690174	0	True				
ANR	690273	Identifier	fmt		690174	0					
ANR	690274	CompoundStatement		15:10:294:294	690174	1					
ANR	690275	ExpressionStatement	opt = * fmt	74:2:2167:2177	690174	0	True				
ANR	690276	AssignmentExpression	opt = * fmt		690174	0		=			
ANR	690277	Identifier	opt		690174	0					
ANR	690278	UnaryOperationExpression	* fmt		690174	1					
ANR	690279	UnaryOperator	*		690174	0					
ANR	690280	Identifier	fmt		690174	1					
ANR	690281	ElseStatement	else		690174	0					
ANR	690282	CompoundStatement		17:8:318:318	690174	0					
ANR	690283	ExpressionStatement	opt = 'p'	76:2:2191:2200	690174	0	True				
ANR	690284	AssignmentExpression	opt = 'p'		690174	0		=			
ANR	690285	Identifier	opt		690174	0					
ANR	690286	PrimaryExpression	'p'		690174	1					
ANR	690287	IfStatement	if ( onstack || ( ( opt != 'd' && opt != 'x' ) && ! onstack ) )		690174	9					
ANR	690288	Condition	onstack || ( ( opt != 'd' && opt != 'x' ) && ! onstack )	78:5:2223:2273	690174	0	True				
ANR	690289	OrExpression	onstack || ( ( opt != 'd' && opt != 'x' ) && ! onstack )		690174	0		||			
ANR	690290	Identifier	onstack		690174	0					
ANR	690291	AndExpression	( opt != 'd' && opt != 'x' ) && ! onstack		690174	1		&&			
ANR	690292	AndExpression	opt != 'd' && opt != 'x'		690174	0		&&			
ANR	690293	EqualityExpression	opt != 'd'		690174	0		!=			
ANR	690294	Identifier	opt		690174	0					
ANR	690295	PrimaryExpression	'd'		690174	1					
ANR	690296	EqualityExpression	opt != 'x'		690174	1		!=			
ANR	690297	Identifier	opt		690174	0					
ANR	690298	PrimaryExpression	'x'		690174	1					
ANR	690299	UnaryOperationExpression	! onstack		690174	1					
ANR	690300	UnaryOperator	!		690174	0					
ANR	690301	Identifier	onstack		690174	1					
ANR	690302	CompoundStatement		20:58:407:407	690174	1					
ANR	690303	IfStatement	if ( color )		690174	0					
ANR	690304	Condition	color	79:6:2284:2288	690174	0	True				
ANR	690305	Identifier	color		690174	0					
ANR	690306	CompoundStatement		21:13:422:422	690174	1					
ANR	690307	Statement	r_cons_printf	80:3:2296:2308	690174	0	True				
ANR	690308	Statement	(	80:17:2310:2310	690174	1	True				
ANR	690309	Statement	Color_BGREEN	80:18:2311:2322	690174	2	True				
ANR	690310	Statement	"""0x%08"""	80:30:2323:2329	690174	3	True				
ANR	690311	Statement	PFMT64x	80:37:2330:2336	690174	4	True				
ANR	690312	Statement	Color_RESET	80:45:2338:2348	690174	5	True				
ANR	690313	Statement	""" --> """	80:56:2349:2355	690174	6	True				
ANR	690314	Statement	","	80:63:2356:2356	690174	7	True				
ANR	690315	Statement	bval	80:65:2358:2361	690174	8	True				
ANR	690316	Statement	)	80:69:2362:2362	690174	9	True				
ANR	690317	ExpressionStatement		80:70:2363:2363	690174	10	True				
ANR	690318	ElseStatement	else		690174	0					
ANR	690319	CompoundStatement		23:9:505:505	690174	0					
ANR	690320	Statement	r_cons_printf	82:3:2379:2391	690174	0	True				
ANR	690321	Statement	(	82:17:2393:2393	690174	1	True				
ANR	690322	Statement	"""0x%08"""	82:18:2394:2400	690174	2	True				
ANR	690323	Statement	PFMT64x	82:25:2401:2407	690174	3	True				
ANR	690324	Statement	""" --> """	82:32:2408:2414	690174	4	True				
ANR	690325	Statement	","	82:39:2415:2415	690174	5	True				
ANR	690326	Statement	bval	82:41:2417:2420	690174	6	True				
ANR	690327	Statement	)	82:45:2421:2421	690174	7	True				
ANR	690328	ExpressionStatement		82:46:2422:2422	690174	8	True				
ANR	690329	ExpressionStatement	"r_io_read_at ( core -> io , bval , buf , bsize )"	84:2:2430:2471	690174	1	True				
ANR	690330	CallExpression	"r_io_read_at ( core -> io , bval , buf , bsize )"		690174	0					
ANR	690331	Callee	r_io_read_at		690174	0					
ANR	690332	Identifier	r_io_read_at		690174	0					
ANR	690333	ArgumentList	core -> io		690174	1					
ANR	690334	Argument	core -> io		690174	0					
ANR	690335	PtrMemberAccess	core -> io		690174	0					
ANR	690336	Identifier	core		690174	0					
ANR	690337	Identifier	io		690174	1					
ANR	690338	Argument	bval		690174	1					
ANR	690339	Identifier	bval		690174	0					
ANR	690340	Argument	buf		690174	2					
ANR	690341	Identifier	buf		690174	0					
ANR	690342	Argument	bsize		690174	3					
ANR	690343	Identifier	bsize		690174	0					
ANR	690344	IfStatement	if ( onstack )		690174	10					
ANR	690345	Condition	onstack	86:5:2481:2487	690174	0	True				
ANR	690346	Identifier	onstack		690174	0					
ANR	690347	CompoundStatement		28:14:621:621	690174	1					
ANR	690348	ExpressionStatement	"bval = get_buf_val ( buf , endian , width )"	87:2:2520:2559	690174	0	True				
ANR	690349	AssignmentExpression	"bval = get_buf_val ( buf , endian , width )"		690174	0		=			
ANR	690350	Identifier	bval		690174	0					
ANR	690351	CallExpression	"get_buf_val ( buf , endian , width )"		690174	1					
ANR	690352	Callee	get_buf_val		690174	0					
ANR	690353	Identifier	get_buf_val		690174	0					
ANR	690354	ArgumentList	buf		690174	1					
ANR	690355	Argument	buf		690174	0					
ANR	690356	Identifier	buf		690174	0					
ANR	690357	Argument	endian		690174	1					
ANR	690358	Identifier	endian		690174	0					
ANR	690359	Argument	width		690174	2					
ANR	690360	Identifier	width		690174	0					
ANR	690361	IfStatement	if ( opt != 'd' && opt != 'x' )		690174	1					
ANR	690362	Condition	opt != 'd' && opt != 'x'	88:6:2567:2590	690174	0	True				
ANR	690363	AndExpression	opt != 'd' && opt != 'x'		690174	0		&&			
ANR	690364	EqualityExpression	opt != 'd'		690174	0		!=			
ANR	690365	Identifier	opt		690174	0					
ANR	690366	PrimaryExpression	'd'		690174	1					
ANR	690367	EqualityExpression	opt != 'x'		690174	1		!=			
ANR	690368	Identifier	opt		690174	0					
ANR	690369	PrimaryExpression	'x'		690174	1					
ANR	690370	CompoundStatement		30:32:724:724	690174	1					
ANR	690371	ExpressionStatement	"r_io_read_at ( core -> io , bval , buf , bsize )"	89:3:2598:2639	690174	0	True				
ANR	690372	CallExpression	"r_io_read_at ( core -> io , bval , buf , bsize )"		690174	0					
ANR	690373	Callee	r_io_read_at		690174	0					
ANR	690374	Identifier	r_io_read_at		690174	0					
ANR	690375	ArgumentList	core -> io		690174	1					
ANR	690376	Argument	core -> io		690174	0					
ANR	690377	PtrMemberAccess	core -> io		690174	0					
ANR	690378	Identifier	core		690174	0					
ANR	690379	Identifier	io		690174	1					
ANR	690380	Argument	bval		690174	1					
ANR	690381	Identifier	bval		690174	0					
ANR	690382	Argument	buf		690174	2					
ANR	690383	Identifier	buf		690174	0					
ANR	690384	Argument	bsize		690174	3					
ANR	690385	Identifier	bsize		690174	0					
ANR	690386	ExpressionStatement	"r_cons_print ( color ? Color_BGREEN : """" )"	92:1:2683:2721	690174	11	True				
ANR	690387	CallExpression	"r_cons_print ( color ? Color_BGREEN : """" )"		690174	0					
ANR	690388	Callee	r_cons_print		690174	0					
ANR	690389	Identifier	r_cons_print		690174	0					
ANR	690390	ArgumentList	"color ? Color_BGREEN : """""		690174	1					
ANR	690391	Argument	"color ? Color_BGREEN : """""		690174	0					
ANR	690392	ConditionalExpression	"color ? Color_BGREEN : """""		690174	0					
ANR	690393	Condition	color		690174	0					
ANR	690394	Identifier	color		690174	0					
ANR	690395	Identifier	Color_BGREEN		690174	1					
ANR	690396	PrimaryExpression	""""""		690174	2					
ANR	690397	SwitchStatement	switch ( opt )		690174	12					
ANR	690398	Condition	opt	93:9:2732:2734	690174	0	True				
ANR	690399	Identifier	opt		690174	0					
ANR	690400	CompoundStatement		63:2:1487:1502	690174	1					
ANR	690401	Label	case 'z' :	94:1:2740:2749	690174	0	True				
ANR	690402	Statement	r_cons_print	95:2:2779:2790	690174	1	True				
ANR	690403	Statement	(	95:15:2792:2792	690174	2	True				
ANR	690404	Statement	color	95:16:2793:2797	690174	3	True				
ANR	690405	Statement	?	95:22:2799:2799	690174	4	True				
ANR	690406	Statement	Color_RESET	95:23:2800:2810	690174	5	True				
ANR	690407	Label	Color_BWHITE :	95:35:2812:2824	690174	6	True				
ANR	690408	Identifier	Color_BWHITE		690174	0					
ANR	690409	Statement	""""""	95:48:2825:2826	690174	7	True				
ANR	690410	Statement	)	95:50:2827:2827	690174	8	True				
ANR	690411	ExpressionStatement		95:51:2828:2828	690174	9	True				
ANR	690412	ExpressionStatement	"r_cons_print ( ""\\"""" )"	96:2:2832:2851	690174	10	True				
ANR	690413	CallExpression	"r_cons_print ( ""\\"""" )"		690174	0					
ANR	690414	Callee	r_cons_print		690174	0					
ANR	690415	Identifier	r_cons_print		690174	0					
ANR	690416	ArgumentList	"""\\"""""		690174	1					
ANR	690417	Argument	"""\\"""""		690174	0					
ANR	690418	PrimaryExpression	"""\\"""""		690174	0					
ANR	690419	ForStatement	for ( i = 0 ; i < MAXSTRLEN ; i ++ )		690174	11					
ANR	690420	ForInit	i = 0 ;	97:7:2860:2865	690174	0	True				
ANR	690421	AssignmentExpression	i = 0		690174	0		=			
ANR	690422	Identifier	i		690174	0					
ANR	690423	PrimaryExpression	0		690174	1					
ANR	690424	Condition	i < MAXSTRLEN	97:14:2867:2879	690174	1	True				
ANR	690425	RelationalExpression	i < MAXSTRLEN		690174	0		<			
ANR	690426	Identifier	i		690174	0					
ANR	690427	Identifier	MAXSTRLEN		690174	1					
ANR	690428	PostIncDecOperationExpression	i ++	97:29:2882:2884	690174	2	True				
ANR	690429	Identifier	i		690174	0					
ANR	690430	IncDec	++		690174	1					
ANR	690431	CompoundStatement		43:3:1064:1078	690174	3					
ANR	690432	IfStatement	if ( buf [ i ] == '\\0' )		690174	0					
ANR	690433	Condition	buf [ i ] == '\\0'	98:7:2896:2909	690174	0	True				
ANR	690434	EqualityExpression	buf [ i ] == '\\0'		690174	0		==			
ANR	690435	ArrayIndexing	buf [ i ]		690174	0					
ANR	690436	Identifier	buf		690174	0					
ANR	690437	Identifier	i		690174	1					
ANR	690438	PrimaryExpression	'\\0'		690174	1					
ANR	690439	CompoundStatement		40:23:1043:1043	690174	1					
ANR	690440	BreakStatement	break ;	99:4:2918:2923	690174	0	True				
ANR	690441	IdentifierDeclStatement	ut8 b = buf [ i ] ;	101:3:2933:2947	690174	1	True				
ANR	690442	IdentifierDecl	b = buf [ i ]		690174	0					
ANR	690443	IdentifierDeclType	ut8		690174	0					
ANR	690444	Identifier	b		690174	1					
ANR	690445	AssignmentExpression	b = buf [ i ]		690174	2		=			
ANR	690446	Identifier	b		690174	0					
ANR	690447	ArrayIndexing	buf [ i ]		690174	1					
ANR	690448	Identifier	buf		690174	0					
ANR	690449	Identifier	i		690174	1					
ANR	690450	IfStatement	if ( IS_PRINTABLE ( b ) )		690174	2					
ANR	690451	Condition	IS_PRINTABLE ( b )	102:7:2956:2971	690174	0	True				
ANR	690452	CallExpression	IS_PRINTABLE ( b )		690174	0					
ANR	690453	Callee	IS_PRINTABLE		690174	0					
ANR	690454	Identifier	IS_PRINTABLE		690174	0					
ANR	690455	ArgumentList	b		690174	1					
ANR	690456	Argument	b		690174	0					
ANR	690457	Identifier	b		690174	0					
ANR	690458	CompoundStatement		44:25:1105:1105	690174	1					
ANR	690459	ExpressionStatement	"r_cons_printf ( ""%c"" , b )"	103:4:2980:3003	690174	0	True				
ANR	690460	CallExpression	"r_cons_printf ( ""%c"" , b )"		690174	0					
ANR	690461	Callee	r_cons_printf		690174	0					
ANR	690462	Identifier	r_cons_printf		690174	0					
ANR	690463	ArgumentList	"""%c"""		690174	1					
ANR	690464	Argument	"""%c"""		690174	0					
ANR	690465	PrimaryExpression	"""%c"""		690174	0					
ANR	690466	Argument	b		690174	1					
ANR	690467	Identifier	b		690174	0					
ANR	690468	ElseStatement	else		690174	0					
ANR	690469	CompoundStatement		46:10:1146:1146	690174	0					
ANR	690470	ExpressionStatement	"r_cons_printf ( ""\\\\x%02x"" , b )"	105:4:3021:3049	690174	0	True				
ANR	690471	CallExpression	"r_cons_printf ( ""\\\\x%02x"" , b )"		690174	0					
ANR	690472	Callee	r_cons_printf		690174	0					
ANR	690473	Identifier	r_cons_printf		690174	0					
ANR	690474	ArgumentList	"""\\\\x%02x"""		690174	1					
ANR	690475	Argument	"""\\\\x%02x"""		690174	0					
ANR	690476	PrimaryExpression	"""\\\\x%02x"""		690174	0					
ANR	690477	Argument	b		690174	1					
ANR	690478	Identifier	b		690174	0					
ANR	690479	IfStatement	if ( i == MAXSTRLEN - 1 )		690174	3					
ANR	690480	Condition	i == MAXSTRLEN - 1	107:7:3063:3080	690174	0	True				
ANR	690481	EqualityExpression	i == MAXSTRLEN - 1		690174	0		==			
ANR	690482	Identifier	i		690174	0					
ANR	690483	AdditiveExpression	MAXSTRLEN - 1		690174	1		-			
ANR	690484	Identifier	MAXSTRLEN		690174	0					
ANR	690485	PrimaryExpression	1		690174	1					
ANR	690486	CompoundStatement		49:27:1214:1214	690174	1					
ANR	690487	ExpressionStatement	"r_cons_print ( ""..."" )"	108:5:3090:3110	690174	0	True				
ANR	690488	CallExpression	"r_cons_print ( ""..."" )"		690174	0					
ANR	690489	Callee	r_cons_print		690174	0					
ANR	690490	Identifier	r_cons_print		690174	0					
ANR	690491	ArgumentList	"""..."""		690174	1					
ANR	690492	Argument	"""..."""		690174	0					
ANR	690493	PrimaryExpression	"""..."""		690174	0					
ANR	690494	ExpressionStatement	"r_cons_print ( ""\\"""" )"	111:2:3154:3173	690174	12	True				
ANR	690495	CallExpression	"r_cons_print ( ""\\"""" )"		690174	0					
ANR	690496	Callee	r_cons_print		690174	0					
ANR	690497	Identifier	r_cons_print		690174	0					
ANR	690498	ArgumentList	"""\\"""""		690174	1					
ANR	690499	Argument	"""\\"""""		690174	0					
ANR	690500	PrimaryExpression	"""\\"""""		690174	0					
ANR	690501	ExpressionStatement	r_cons_newline ( )	112:2:3177:3194	690174	13	True				
ANR	690502	CallExpression	r_cons_newline ( )		690174	0					
ANR	690503	Callee	r_cons_newline		690174	0					
ANR	690504	Identifier	r_cons_newline		690174	0					
ANR	690505	ArgumentList			690174	1					
ANR	690506	BreakStatement	break ;	113:2:3198:3203	690174	14	True				
ANR	690507	Label	case 'd' :	114:1:3206:3215	690174	15	True				
ANR	690508	Label	case 'x' :	115:1:3229:3238	690174	16	True				
ANR	690509	Statement	r_cons_printf	116:2:3242:3254	690174	17	True				
ANR	690510	Statement	(	116:16:3256:3256	690174	18	True				
ANR	690511	Statement	"""0x%08"""	116:17:3257:3263	690174	19	True				
ANR	690512	Statement	PFMT64x	116:25:3265:3271	690174	20	True				
ANR	690513	Statement	","	116:32:3272:3272	690174	21	True				
ANR	690514	Statement	bval	116:34:3274:3277	690174	22	True				
ANR	690515	Statement	)	116:38:3278:3278	690174	23	True				
ANR	690516	ExpressionStatement		116:39:3279:3279	690174	24	True				
ANR	690517	ExpressionStatement	r_cons_newline ( )	117:2:3283:3300	690174	25	True				
ANR	690518	CallExpression	r_cons_newline ( )		690174	0					
ANR	690519	Callee	r_cons_newline		690174	0					
ANR	690520	Identifier	r_cons_newline		690174	0					
ANR	690521	ArgumentList			690174	1					
ANR	690522	BreakStatement	break ;	118:2:3304:3309	690174	26	True				
ANR	690523	Label	case 'c' :	119:1:3312:3321	690174	27	True				
ANR	690524	ExpressionStatement	"r_cons_print ( ""\\'"" )"	120:2:3333:3352	690174	28	True				
ANR	690525	CallExpression	"r_cons_print ( ""\\'"" )"		690174	0					
ANR	690526	Callee	r_cons_print		690174	0					
ANR	690527	Identifier	r_cons_print		690174	0					
ANR	690528	ArgumentList	"""\\'"""		690174	1					
ANR	690529	Argument	"""\\'"""		690174	0					
ANR	690530	PrimaryExpression	"""\\'"""		690174	0					
ANR	690531	IdentifierDeclStatement	ut8 ch = buf [ 0 ] ;	121:2:3356:3371	690174	29	True				
ANR	690532	IdentifierDecl	ch = buf [ 0 ]		690174	0					
ANR	690533	IdentifierDeclType	ut8		690174	0					
ANR	690534	Identifier	ch		690174	1					
ANR	690535	AssignmentExpression	ch = buf [ 0 ]		690174	2		=			
ANR	690536	Identifier	ch		690174	0					
ANR	690537	ArrayIndexing	buf [ 0 ]		690174	1					
ANR	690538	Identifier	buf		690174	0					
ANR	690539	PrimaryExpression	0		690174	1					
ANR	690540	IfStatement	if ( IS_PRINTABLE ( ch ) )		690174	30					
ANR	690541	Condition	IS_PRINTABLE ( ch )	122:6:3379:3395	690174	0	True				
ANR	690542	CallExpression	IS_PRINTABLE ( ch )		690174	0					
ANR	690543	Callee	IS_PRINTABLE		690174	0					
ANR	690544	Identifier	IS_PRINTABLE		690174	0					
ANR	690545	ArgumentList	ch		690174	1					
ANR	690546	Argument	ch		690174	0					
ANR	690547	Identifier	ch		690174	0					
ANR	690548	CompoundStatement		64:25:1529:1529	690174	1					
ANR	690549	ExpressionStatement	"r_cons_printf ( ""%c"" , ch )"	123:3:3403:3427	690174	0	True				
ANR	690550	CallExpression	"r_cons_printf ( ""%c"" , ch )"		690174	0					
ANR	690551	Callee	r_cons_printf		690174	0					
ANR	690552	Identifier	r_cons_printf		690174	0					
ANR	690553	ArgumentList	"""%c"""		690174	1					
ANR	690554	Argument	"""%c"""		690174	0					
ANR	690555	PrimaryExpression	"""%c"""		690174	0					
ANR	690556	Argument	ch		690174	1					
ANR	690557	Identifier	ch		690174	0					
ANR	690558	ElseStatement	else		690174	0					
ANR	690559	CompoundStatement		66:9:1569:1569	690174	0					
ANR	690560	ExpressionStatement	"r_cons_printf ( ""\\\\x%02x"" , ch )"	125:3:3443:3472	690174	0	True				
ANR	690561	CallExpression	"r_cons_printf ( ""\\\\x%02x"" , ch )"		690174	0					
ANR	690562	Callee	r_cons_printf		690174	0					
ANR	690563	Identifier	r_cons_printf		690174	0					
ANR	690564	ArgumentList	"""\\\\x%02x"""		690174	1					
ANR	690565	Argument	"""\\\\x%02x"""		690174	0					
ANR	690566	PrimaryExpression	"""\\\\x%02x"""		690174	0					
ANR	690567	Argument	ch		690174	1					
ANR	690568	Identifier	ch		690174	0					
ANR	690569	ExpressionStatement	"r_cons_print ( ""\\'"" )"	127:2:3480:3499	690174	31	True				
ANR	690570	CallExpression	"r_cons_print ( ""\\'"" )"		690174	0					
ANR	690571	Callee	r_cons_print		690174	0					
ANR	690572	Identifier	r_cons_print		690174	0					
ANR	690573	ArgumentList	"""\\'"""		690174	1					
ANR	690574	Argument	"""\\'"""		690174	0					
ANR	690575	PrimaryExpression	"""\\'"""		690174	0					
ANR	690576	ExpressionStatement	r_cons_newline ( )	128:2:3503:3520	690174	32	True				
ANR	690577	CallExpression	r_cons_newline ( )		690174	0					
ANR	690578	Callee	r_cons_newline		690174	0					
ANR	690579	Identifier	r_cons_newline		690174	0					
ANR	690580	ArgumentList			690174	1					
ANR	690581	BreakStatement	break ;	129:2:3524:3529	690174	33	True				
ANR	690582	Label	case 'p' :	130:1:3532:3541	690174	34	True				
ANR	690583	CompoundStatement		73:2:1687:1687	690174	35					
ANR	690584	Statement	r_cons_printf	133:2:3601:3613	690174	0	True				
ANR	690585	Statement	(	133:16:3615:3615	690174	1	True				
ANR	690586	Statement	"""0x%08"""	133:17:3616:3622	690174	2	True				
ANR	690587	Statement	PFMT64x	133:24:3623:3629	690174	3	True				
ANR	690588	Statement	","	133:31:3630:3630	690174	4	True				
ANR	690589	Statement	get_buf_val	133:33:3632:3642	690174	5	True				
ANR	690590	Statement	(	133:45:3644:3644	690174	6	True				
ANR	690591	Statement	buf	133:46:3645:3647	690174	7	True				
ANR	690592	Statement	","	133:49:3648:3648	690174	8	True				
ANR	690593	Statement	endian	133:51:3650:3655	690174	9	True				
ANR	690594	Statement	","	133:57:3656:3656	690174	10	True				
ANR	690595	Statement	width	133:59:3658:3662	690174	11	True				
ANR	690596	Statement	)	133:64:3663:3663	690174	12	True				
ANR	690597	Statement	)	133:65:3664:3664	690174	13	True				
ANR	690598	ExpressionStatement		133:66:3665:3665	690174	14	True				
ANR	690599	ExpressionStatement	r_cons_newline ( )	134:2:3669:3686	690174	15	True				
ANR	690600	CallExpression	r_cons_newline ( )		690174	0					
ANR	690601	Callee	r_cons_newline		690174	0					
ANR	690602	Identifier	r_cons_newline		690174	0					
ANR	690603	ArgumentList			690174	1					
ANR	690604	BreakStatement	break ;	135:2:3690:3695	690174	16	True				
ANR	690605	Label	default :	137:1:3702:3709	690174	36	True				
ANR	690606	Identifier	default		690174	0					
ANR	690607	ExpressionStatement	"r_cons_println ( ""unk_format"" )"	139:2:3761:3790	690174	37	True				
ANR	690608	CallExpression	"r_cons_println ( ""unk_format"" )"		690174	0					
ANR	690609	Callee	r_cons_println		690174	0					
ANR	690610	Identifier	r_cons_println		690174	0					
ANR	690611	ArgumentList	"""unk_format"""		690174	1					
ANR	690612	Argument	"""unk_format"""		690174	0					
ANR	690613	PrimaryExpression	"""unk_format"""		690174	0					
ANR	690614	ExpressionStatement	r_cons_print ( Color_RESET )	141:1:3796:3822	690174	13	True				
ANR	690615	CallExpression	r_cons_print ( Color_RESET )		690174	0					
ANR	690616	Callee	r_cons_print		690174	0					
ANR	690617	Identifier	r_cons_print		690174	0					
ANR	690618	ArgumentList	Color_RESET		690174	1					
ANR	690619	Argument	Color_RESET		690174	0					
ANR	690620	Identifier	Color_RESET		690174	0					
ANR	690621	ExpressionStatement	free ( buf )	142:1:3825:3835	690174	14	True				
ANR	690622	CallExpression	free ( buf )		690174	0					
ANR	690623	Callee	free		690174	0					
ANR	690624	Identifier	free		690174	0					
ANR	690625	ArgumentList	buf		690174	1					
ANR	690626	Argument	buf		690174	0					
ANR	690627	Identifier	buf		690174	0					
ANR	690628	ReturnType	static void		690174	1					
ANR	690629	Identifier	print_format_values		690174	2					
ANR	690630	ParameterList	"RCore * core , const char * fmt , bool onstack , ut64 src , bool color"		690174	3					
ANR	690631	Parameter	RCore * core	59:32:1802:1812	690174	0	True				
ANR	690632	ParameterType	RCore *		690174	0					
ANR	690633	Identifier	core		690174	1					
ANR	690634	Parameter	const char * fmt	59:45:1815:1829	690174	1	True				
ANR	690635	ParameterType	const char *		690174	0					
ANR	690636	Identifier	fmt		690174	1					
ANR	690637	Parameter	bool onstack	59:62:1832:1843	690174	2	True				
ANR	690638	ParameterType	bool		690174	0					
ANR	690639	Identifier	onstack		690174	1					
ANR	690640	Parameter	ut64 src	59:76:1846:1853	690174	3	True				
ANR	690641	ParameterType	ut64		690174	0					
ANR	690642	Identifier	src		690174	1					
ANR	690643	Parameter	bool color	59:86:1856:1865	690174	4	True				
ANR	690644	ParameterType	bool		690174	0					
ANR	690645	Identifier	color		690174	1					
ANR	690646	CFGEntryNode	ENTRY		690174		True				
ANR	690647	CFGExitNode	EXIT		690174		True				
ANR	690648	Symbol	IS_PRINTABLE		690174						
ANR	690649	Symbol	color		690174						
ANR	690650	Symbol	MAXSTRLEN		690174						
ANR	690651	Symbol	* core		690174						
ANR	690652	Symbol	* fmt		690174						
ANR	690653	Symbol	Color_RESET		690174						
ANR	690654	Symbol	fmt		690174						
ANR	690655	Symbol	endian		690174						
ANR	690656	Symbol	core -> anal		690174						
ANR	690657	Symbol	get_buf_val		690174						
ANR	690658	Symbol	bval		690174						
ANR	690659	Symbol	core -> io		690174						
ANR	690660	Symbol	onstack		690174						
ANR	690661	Symbol	* * core		690174						
ANR	690662	Symbol	core -> blocksize		690174						
ANR	690663	Symbol	malloc		690174						
ANR	690664	Symbol	core -> anal -> bits		690174						
ANR	690665	Symbol	* buf		690174						
ANR	690666	Symbol	b		690174						
ANR	690667	Symbol	src		690174						
ANR	690668	Symbol	ch		690174						
ANR	690669	Symbol	i		690174						
ANR	690670	Symbol	Color_BGREEN		690174						
ANR	690671	Symbol	core -> print -> big_endian		690174						
ANR	690672	Symbol	R_MIN		690174						
ANR	690673	Symbol	core		690174						
ANR	690674	Symbol	opt		690174						
ANR	690675	Symbol	* core -> print		690174						
ANR	690676	Symbol	buf		690174						
ANR	690677	Symbol	* core -> anal		690174						
ANR	690678	Symbol	* i		690174						
ANR	690679	Symbol	width		690174						
ANR	690680	Symbol	bsize		690174						
ANR	690681	Symbol	core -> print		690174						
ANR	690682	Function	r_core_print_func_args	147:0:3898:5511							
ANR	690683	FunctionDef	r_core_print_func_args (RCore * core)		690682	0					
ANR	690684	CompoundStatement		147:47:3945:5511	690682	0					
ANR	690685	IdentifierDeclStatement	RListIter * iter ;	148:1:3948:3963	690682	0	True				
ANR	690686	IdentifierDecl	* iter		690682	0					
ANR	690687	IdentifierDeclType	RListIter *		690682	0					
ANR	690688	Identifier	iter		690682	1					
ANR	690689	IdentifierDeclStatement	"bool color = r_config_get_i ( core -> config , ""scr.color"" ) ;"	149:1:3966:4021	690682	1	True				
ANR	690690	IdentifierDecl	"color = r_config_get_i ( core -> config , ""scr.color"" )"		690682	0					
ANR	690691	IdentifierDeclType	bool		690682	0					
ANR	690692	Identifier	color		690682	1					
ANR	690693	AssignmentExpression	"color = r_config_get_i ( core -> config , ""scr.color"" )"		690682	2		=			
ANR	690694	Identifier	color		690682	0					
ANR	690695	CallExpression	"r_config_get_i ( core -> config , ""scr.color"" )"		690682	1					
ANR	690696	Callee	r_config_get_i		690682	0					
ANR	690697	Identifier	r_config_get_i		690682	0					
ANR	690698	ArgumentList	core -> config		690682	1					
ANR	690699	Argument	core -> config		690682	0					
ANR	690700	PtrMemberAccess	core -> config		690682	0					
ANR	690701	Identifier	core		690682	0					
ANR	690702	Identifier	config		690682	1					
ANR	690703	Argument	"""scr.color"""		690682	1					
ANR	690704	PrimaryExpression	"""scr.color"""		690682	0					
ANR	690705	IfStatement	if ( ! core -> anal )		690682	2					
ANR	690706	Condition	! core -> anal	150:5:4028:4038	690682	0	True				
ANR	690707	UnaryOperationExpression	! core -> anal		690682	0					
ANR	690708	UnaryOperator	!		690682	0					
ANR	690709	PtrMemberAccess	core -> anal		690682	1					
ANR	690710	Identifier	core		690682	0					
ANR	690711	Identifier	anal		690682	1					
ANR	690712	CompoundStatement		4:18:95:95	690682	1					
ANR	690713	ReturnStatement	return ;	151:2:4045:4051	690682	0	True				
ANR	690714	IfStatement	if ( ! core -> anal -> reg )		690682	3					
ANR	690715	Condition	! core -> anal -> reg	153:5:4061:4076	690682	0	True				
ANR	690716	UnaryOperationExpression	! core -> anal -> reg		690682	0					
ANR	690717	UnaryOperator	!		690682	0					
ANR	690718	PtrMemberAccess	core -> anal -> reg		690682	1					
ANR	690719	PtrMemberAccess	core -> anal		690682	0					
ANR	690720	Identifier	core		690682	0					
ANR	690721	Identifier	anal		690682	1					
ANR	690722	Identifier	reg		690682	1					
ANR	690723	CompoundStatement		7:23:133:133	690682	1					
ANR	690724	ReturnStatement	return ;	154:2:4083:4089	690682	0	True				
ANR	690725	IdentifierDeclStatement	"const char * pc = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_PC ) ;"	156:1:4095:4159	690682	4	True				
ANR	690726	IdentifierDecl	"* pc = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_PC )"		690682	0					
ANR	690727	IdentifierDeclType	const char *		690682	0					
ANR	690728	Identifier	pc		690682	1					
ANR	690729	AssignmentExpression	"* pc = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_PC )"		690682	2		=			
ANR	690730	Identifier	pc		690682	0					
ANR	690731	CallExpression	"r_reg_get_name ( core -> anal -> reg , R_REG_NAME_PC )"		690682	1					
ANR	690732	Callee	r_reg_get_name		690682	0					
ANR	690733	Identifier	r_reg_get_name		690682	0					
ANR	690734	ArgumentList	core -> anal -> reg		690682	1					
ANR	690735	Argument	core -> anal -> reg		690682	0					
ANR	690736	PtrMemberAccess	core -> anal -> reg		690682	0					
ANR	690737	PtrMemberAccess	core -> anal		690682	0					
ANR	690738	Identifier	core		690682	0					
ANR	690739	Identifier	anal		690682	1					
ANR	690740	Identifier	reg		690682	1					
ANR	690741	Argument	R_REG_NAME_PC		690682	1					
ANR	690742	Identifier	R_REG_NAME_PC		690682	0					
ANR	690743	IdentifierDeclStatement	"ut64 cur_addr = r_reg_getv ( core -> anal -> reg , pc ) ;"	157:1:4162:4210	690682	5	True				
ANR	690744	IdentifierDecl	"cur_addr = r_reg_getv ( core -> anal -> reg , pc )"		690682	0					
ANR	690745	IdentifierDeclType	ut64		690682	0					
ANR	690746	Identifier	cur_addr		690682	1					
ANR	690747	AssignmentExpression	"cur_addr = r_reg_getv ( core -> anal -> reg , pc )"		690682	2		=			
ANR	690748	Identifier	cur_addr		690682	0					
ANR	690749	CallExpression	"r_reg_getv ( core -> anal -> reg , pc )"		690682	1					
ANR	690750	Callee	r_reg_getv		690682	0					
ANR	690751	Identifier	r_reg_getv		690682	0					
ANR	690752	ArgumentList	core -> anal -> reg		690682	1					
ANR	690753	Argument	core -> anal -> reg		690682	0					
ANR	690754	PtrMemberAccess	core -> anal -> reg		690682	0					
ANR	690755	PtrMemberAccess	core -> anal		690682	0					
ANR	690756	Identifier	core		690682	0					
ANR	690757	Identifier	anal		690682	1					
ANR	690758	Identifier	reg		690682	1					
ANR	690759	Argument	pc		690682	1					
ANR	690760	Identifier	pc		690682	0					
ANR	690761	IdentifierDeclStatement	"RAnalOp * op = r_core_anal_op ( core , cur_addr , R_ANAL_OP_MASK_BASIC ) ;"	158:1:4213:4280	690682	6	True				
ANR	690762	IdentifierDecl	"* op = r_core_anal_op ( core , cur_addr , R_ANAL_OP_MASK_BASIC )"		690682	0					
ANR	690763	IdentifierDeclType	RAnalOp *		690682	0					
ANR	690764	Identifier	op		690682	1					
ANR	690765	AssignmentExpression	"* op = r_core_anal_op ( core , cur_addr , R_ANAL_OP_MASK_BASIC )"		690682	2		=			
ANR	690766	Identifier	op		690682	0					
ANR	690767	CallExpression	"r_core_anal_op ( core , cur_addr , R_ANAL_OP_MASK_BASIC )"		690682	1					
ANR	690768	Callee	r_core_anal_op		690682	0					
ANR	690769	Identifier	r_core_anal_op		690682	0					
ANR	690770	ArgumentList	core		690682	1					
ANR	690771	Argument	core		690682	0					
ANR	690772	Identifier	core		690682	0					
ANR	690773	Argument	cur_addr		690682	1					
ANR	690774	Identifier	cur_addr		690682	0					
ANR	690775	Argument	R_ANAL_OP_MASK_BASIC		690682	2					
ANR	690776	Identifier	R_ANAL_OP_MASK_BASIC		690682	0					
ANR	690777	IfStatement	if ( ! op )		690682	7					
ANR	690778	Condition	! op	159:5:4287:4289	690682	0	True				
ANR	690779	UnaryOperationExpression	! op		690682	0					
ANR	690780	UnaryOperator	!		690682	0					
ANR	690781	Identifier	op		690682	1					
ANR	690782	CompoundStatement		13:10:346:346	690682	1					
ANR	690783	ReturnStatement	return ;	160:2:4296:4302	690682	0	True				
ANR	690784	IfStatement	if ( op -> type == R_ANAL_OP_TYPE_CALL )		690682	8					
ANR	690785	Condition	op -> type == R_ANAL_OP_TYPE_CALL	162:5:4312:4342	690682	0	True				
ANR	690786	EqualityExpression	op -> type == R_ANAL_OP_TYPE_CALL		690682	0		==			
ANR	690787	PtrMemberAccess	op -> type		690682	0					
ANR	690788	Identifier	op		690682	0					
ANR	690789	Identifier	type		690682	1					
ANR	690790	Identifier	R_ANAL_OP_TYPE_CALL		690682	1					
ANR	690791	CompoundStatement		38:2:830:881	690682	1					
ANR	690792	IdentifierDeclStatement	RAnalFunction * fcn ;	163:2:4349:4367	690682	0	True				
ANR	690793	IdentifierDecl	* fcn		690682	0					
ANR	690794	IdentifierDeclType	RAnalFunction *		690682	0					
ANR	690795	Identifier	fcn		690682	1					
ANR	690796	IdentifierDeclStatement	RAnalFuncArg * arg ;	164:2:4371:4388	690682	1	True				
ANR	690797	IdentifierDecl	* arg		690682	0					
ANR	690798	IdentifierDeclType	RAnalFuncArg *		690682	0					
ANR	690799	Identifier	arg		690682	1					
ANR	690800	IdentifierDeclStatement	int i ;	165:2:4392:4397	690682	2	True				
ANR	690801	IdentifierDecl	i		690682	0					
ANR	690802	IdentifierDeclType	int		690682	0					
ANR	690803	Identifier	i		690682	1					
ANR	690804	IdentifierDeclStatement	int nargs = 0 ;	166:2:4401:4414	690682	3	True				
ANR	690805	IdentifierDecl	nargs = 0		690682	0					
ANR	690806	IdentifierDeclType	int		690682	0					
ANR	690807	Identifier	nargs		690682	1					
ANR	690808	AssignmentExpression	nargs = 0		690682	2		=			
ANR	690809	Identifier	nargs		690682	0					
ANR	690810	PrimaryExpression	0		690682	1					
ANR	690811	IdentifierDeclStatement	bool onstack = false ;	167:2:4418:4438	690682	4	True				
ANR	690812	IdentifierDecl	onstack = false		690682	0					
ANR	690813	IdentifierDeclType	bool		690682	0					
ANR	690814	Identifier	onstack		690682	1					
ANR	690815	AssignmentExpression	onstack = false		690682	2		=			
ANR	690816	Identifier	false		690682	0					
ANR	690817	Identifier	false		690682	1					
ANR	690818	IdentifierDeclStatement	const char * fcn_name = NULL ;	168:2:4442:4469	690682	5	True				
ANR	690819	IdentifierDecl	* fcn_name = NULL		690682	0					
ANR	690820	IdentifierDeclType	const char *		690682	0					
ANR	690821	Identifier	fcn_name		690682	1					
ANR	690822	AssignmentExpression	* fcn_name = NULL		690682	2		=			
ANR	690823	Identifier	NULL		690682	0					
ANR	690824	Identifier	NULL		690682	1					
ANR	690825	IdentifierDeclStatement	ut64 pcv = op -> jump ;	169:2:4473:4492	690682	6	True				
ANR	690826	IdentifierDecl	pcv = op -> jump		690682	0					
ANR	690827	IdentifierDeclType	ut64		690682	0					
ANR	690828	Identifier	pcv		690682	1					
ANR	690829	AssignmentExpression	pcv = op -> jump		690682	2		=			
ANR	690830	Identifier	pcv		690682	0					
ANR	690831	PtrMemberAccess	op -> jump		690682	1					
ANR	690832	Identifier	op		690682	0					
ANR	690833	Identifier	jump		690682	1					
ANR	690834	IfStatement	if ( pcv == UT64_MAX )		690682	7					
ANR	690835	Condition	pcv == UT64_MAX	170:6:4500:4514	690682	0	True				
ANR	690836	EqualityExpression	pcv == UT64_MAX		690682	0		==			
ANR	690837	Identifier	pcv		690682	0					
ANR	690838	Identifier	UT64_MAX		690682	1					
ANR	690839	CompoundStatement		24:23:571:571	690682	1					
ANR	690840	ExpressionStatement	pcv = op -> ptr	171:3:4522:4535	690682	0	True				
ANR	690841	AssignmentExpression	pcv = op -> ptr		690682	0		=			
ANR	690842	Identifier	pcv		690682	0					
ANR	690843	PtrMemberAccess	op -> ptr		690682	1					
ANR	690844	Identifier	op		690682	0					
ANR	690845	Identifier	ptr		690682	1					
ANR	690846	ExpressionStatement	"fcn = r_anal_get_fcn_at ( core -> anal , pcv , 0 )"	173:2:4543:4587	690682	8	True				
ANR	690847	AssignmentExpression	"fcn = r_anal_get_fcn_at ( core -> anal , pcv , 0 )"		690682	0		=			
ANR	690848	Identifier	fcn		690682	0					
ANR	690849	CallExpression	"r_anal_get_fcn_at ( core -> anal , pcv , 0 )"		690682	1					
ANR	690850	Callee	r_anal_get_fcn_at		690682	0					
ANR	690851	Identifier	r_anal_get_fcn_at		690682	0					
ANR	690852	ArgumentList	core -> anal		690682	1					
ANR	690853	Argument	core -> anal		690682	0					
ANR	690854	PtrMemberAccess	core -> anal		690682	0					
ANR	690855	Identifier	core		690682	0					
ANR	690856	Identifier	anal		690682	1					
ANR	690857	Argument	pcv		690682	1					
ANR	690858	Identifier	pcv		690682	0					
ANR	690859	Argument	0		690682	2					
ANR	690860	PrimaryExpression	0		690682	0					
ANR	690861	IfStatement	if ( fcn )		690682	9					
ANR	690862	Condition	fcn	174:6:4595:4597	690682	0	True				
ANR	690863	Identifier	fcn		690682	0					
ANR	690864	CompoundStatement		28:11:654:654	690682	1					
ANR	690865	ExpressionStatement	fcn_name = fcn -> name	175:3:4605:4625	690682	0	True				
ANR	690866	AssignmentExpression	fcn_name = fcn -> name		690682	0		=			
ANR	690867	Identifier	fcn_name		690682	0					
ANR	690868	PtrMemberAccess	fcn -> name		690682	1					
ANR	690869	Identifier	fcn		690682	0					
ANR	690870	Identifier	name		690682	1					
ANR	690871	ElseStatement	else		690682	0					
ANR	690872	CompoundStatement		30:9:690:690	690682	0					
ANR	690873	IfStatement	if ( core -> flags )		690682	0					
ANR	690874	Condition	core -> flags	177:7:4645:4655	690682	0	True				
ANR	690875	PtrMemberAccess	core -> flags		690682	0					
ANR	690876	Identifier	core		690682	0					
ANR	690877	Identifier	flags		690682	1					
ANR	690878	CompoundStatement		32:4:718:767	690682	1					
ANR	690879	IdentifierDeclStatement	"RFlagItem * item = r_flag_get_i ( core -> flags , pcv ) ;"	178:4:4664:4713	690682	0	True				
ANR	690880	IdentifierDecl	"* item = r_flag_get_i ( core -> flags , pcv )"		690682	0					
ANR	690881	IdentifierDeclType	RFlagItem *		690682	0					
ANR	690882	Identifier	item		690682	1					
ANR	690883	AssignmentExpression	"* item = r_flag_get_i ( core -> flags , pcv )"		690682	2		=			
ANR	690884	Identifier	item		690682	0					
ANR	690885	CallExpression	"r_flag_get_i ( core -> flags , pcv )"		690682	1					
ANR	690886	Callee	r_flag_get_i		690682	0					
ANR	690887	Identifier	r_flag_get_i		690682	0					
ANR	690888	ArgumentList	core -> flags		690682	1					
ANR	690889	Argument	core -> flags		690682	0					
ANR	690890	PtrMemberAccess	core -> flags		690682	0					
ANR	690891	Identifier	core		690682	0					
ANR	690892	Identifier	flags		690682	1					
ANR	690893	Argument	pcv		690682	1					
ANR	690894	Identifier	pcv		690682	0					
ANR	690895	IfStatement	if ( item )		690682	1					
ANR	690896	Condition	item	179:8:4723:4726	690682	0	True				
ANR	690897	Identifier	item		690682	0					
ANR	690898	CompoundStatement		33:14:783:783	690682	1					
ANR	690899	ExpressionStatement	fcn_name = item -> name	180:5:4736:4757	690682	0	True				
ANR	690900	AssignmentExpression	fcn_name = item -> name		690682	0		=			
ANR	690901	Identifier	fcn_name		690682	0					
ANR	690902	PtrMemberAccess	item -> name		690682	1					
ANR	690903	Identifier	item		690682	0					
ANR	690904	Identifier	name		690682	1					
ANR	690905	IdentifierDeclStatement	"RList * list = r_core_get_func_args ( core , fcn_name ) ;"	184:2:4776:4827	690682	10	True				
ANR	690906	IdentifierDecl	"* list = r_core_get_func_args ( core , fcn_name )"		690682	0					
ANR	690907	IdentifierDeclType	RList *		690682	0					
ANR	690908	Identifier	list		690682	1					
ANR	690909	AssignmentExpression	"* list = r_core_get_func_args ( core , fcn_name )"		690682	2		=			
ANR	690910	Identifier	list		690682	0					
ANR	690911	CallExpression	"r_core_get_func_args ( core , fcn_name )"		690682	1					
ANR	690912	Callee	r_core_get_func_args		690682	0					
ANR	690913	Identifier	r_core_get_func_args		690682	0					
ANR	690914	ArgumentList	core		690682	1					
ANR	690915	Argument	core		690682	0					
ANR	690916	Identifier	core		690682	0					
ANR	690917	Argument	fcn_name		690682	1					
ANR	690918	Identifier	fcn_name		690682	0					
ANR	690919	IfStatement	if ( ! r_list_empty ( list ) )		690682	11					
ANR	690920	Condition	! r_list_empty ( list )	185:6:4835:4854	690682	0	True				
ANR	690921	UnaryOperationExpression	! r_list_empty ( list )		690682	0					
ANR	690922	UnaryOperator	!		690682	0					
ANR	690923	CallExpression	r_list_empty ( list )		690682	1					
ANR	690924	Callee	r_list_empty		690682	0					
ANR	690925	Identifier	r_list_empty		690682	0					
ANR	690926	ArgumentList	list		690682	1					
ANR	690927	Argument	list		690682	0					
ANR	690928	Identifier	list		690682	0					
ANR	690929	CompoundStatement		40:3:916:930	690682	1					
ANR	690930	IdentifierDeclStatement	int argcnt = 0 ;	186:3:4862:4876	690682	0	True				
ANR	690931	IdentifierDecl	argcnt = 0		690682	0					
ANR	690932	IdentifierDeclType	int		690682	0					
ANR	690933	Identifier	argcnt		690682	1					
ANR	690934	AssignmentExpression	argcnt = 0		690682	2		=			
ANR	690935	Identifier	argcnt		690682	0					
ANR	690936	PrimaryExpression	0		690682	1					
ANR	690937	Statement	r_list_foreach	187:3:4881:4894	690682	1	True				
ANR	690938	Statement	(	187:18:4896:4896	690682	2	True				
ANR	690939	Statement	list	187:19:4897:4900	690682	3	True				
ANR	690940	Statement	","	187:23:4901:4901	690682	4	True				
ANR	690941	Statement	iter	187:25:4903:4906	690682	5	True				
ANR	690942	Statement	","	187:29:4907:4907	690682	6	True				
ANR	690943	Statement	arg	187:31:4909:4911	690682	7	True				
ANR	690944	Statement	)	187:34:4912:4912	690682	8	True				
ANR	690945	CompoundStatement		41:36:968:968	690682	9					
ANR	690946	IfStatement	"if ( arg -> cc_source && ! strncmp ( arg -> cc_source , ""stack"" , 5 ) )"		690682	0					
ANR	690947	Condition	"arg -> cc_source && ! strncmp ( arg -> cc_source , ""stack"" , 5 )"	188:8:4924:4978	690682	0	True				
ANR	690948	AndExpression	"arg -> cc_source && ! strncmp ( arg -> cc_source , ""stack"" , 5 )"		690682	0		&&			
ANR	690949	PtrMemberAccess	arg -> cc_source		690682	0					
ANR	690950	Identifier	arg		690682	0					
ANR	690951	Identifier	cc_source		690682	1					
ANR	690952	UnaryOperationExpression	"! strncmp ( arg -> cc_source , ""stack"" , 5 )"		690682	1					
ANR	690953	UnaryOperator	!		690682	0					
ANR	690954	CallExpression	"strncmp ( arg -> cc_source , ""stack"" , 5 )"		690682	1					
ANR	690955	Callee	strncmp		690682	0					
ANR	690956	Identifier	strncmp		690682	0					
ANR	690957	ArgumentList	arg -> cc_source		690682	1					
ANR	690958	Argument	arg -> cc_source		690682	0					
ANR	690959	PtrMemberAccess	arg -> cc_source		690682	0					
ANR	690960	Identifier	arg		690682	0					
ANR	690961	Identifier	cc_source		690682	1					
ANR	690962	Argument	"""stack"""		690682	1					
ANR	690963	PrimaryExpression	"""stack"""		690682	0					
ANR	690964	Argument	5		690682	2					
ANR	690965	PrimaryExpression	5		690682	0					
ANR	690966	CompoundStatement		42:65:1035:1035	690682	1					
ANR	690967	ExpressionStatement	onstack = true	189:5:4988:5002	690682	0	True				
ANR	690968	AssignmentExpression	onstack = true		690682	0		=			
ANR	690969	Identifier	onstack		690682	0					
ANR	690970	Identifier	true		690682	1					
ANR	690971	ExpressionStatement	"print_arg_str ( argcnt , arg -> name , color )"	191:4:5014:5054	690682	1	True				
ANR	690972	CallExpression	"print_arg_str ( argcnt , arg -> name , color )"		690682	0					
ANR	690973	Callee	print_arg_str		690682	0					
ANR	690974	Identifier	print_arg_str		690682	0					
ANR	690975	ArgumentList	argcnt		690682	1					
ANR	690976	Argument	argcnt		690682	0					
ANR	690977	Identifier	argcnt		690682	0					
ANR	690978	Argument	arg -> name		690682	1					
ANR	690979	PtrMemberAccess	arg -> name		690682	0					
ANR	690980	Identifier	arg		690682	0					
ANR	690981	Identifier	name		690682	1					
ANR	690982	Argument	color		690682	2					
ANR	690983	Identifier	color		690682	0					
ANR	690984	ExpressionStatement	"print_format_values ( core , arg -> fmt , onstack , arg -> src , color )"	192:4:5060:5122	690682	2	True				
ANR	690985	CallExpression	"print_format_values ( core , arg -> fmt , onstack , arg -> src , color )"		690682	0					
ANR	690986	Callee	print_format_values		690682	0					
ANR	690987	Identifier	print_format_values		690682	0					
ANR	690988	ArgumentList	core		690682	1					
ANR	690989	Argument	core		690682	0					
ANR	690990	Identifier	core		690682	0					
ANR	690991	Argument	arg -> fmt		690682	1					
ANR	690992	PtrMemberAccess	arg -> fmt		690682	0					
ANR	690993	Identifier	arg		690682	0					
ANR	690994	Identifier	fmt		690682	1					
ANR	690995	Argument	onstack		690682	2					
ANR	690996	Identifier	onstack		690682	0					
ANR	690997	Argument	arg -> src		690682	3					
ANR	690998	PtrMemberAccess	arg -> src		690682	0					
ANR	690999	Identifier	arg		690682	0					
ANR	691000	Identifier	src		690682	1					
ANR	691001	Argument	color		690682	4					
ANR	691002	Identifier	color		690682	0					
ANR	691003	ExpressionStatement	argcnt ++	193:4:5128:5136	690682	3	True				
ANR	691004	PostIncDecOperationExpression	argcnt ++		690682	0					
ANR	691005	Identifier	argcnt		690682	0					
ANR	691006	IncDec	++		690682	1					
ANR	691007	ElseStatement	else		690682	0					
ANR	691008	CompoundStatement		49:9:1206:1206	690682	0					
ANR	691009	IfStatement	if ( fcn )		690682	0					
ANR	691010	Condition	fcn	196:7:5161:5163	690682	0	True				
ANR	691011	Identifier	fcn		690682	0					
ANR	691012	CompoundStatement		50:12:1220:1220	690682	1					
ANR	691013	ExpressionStatement	nargs = fcn -> nargs	197:4:5172:5190	690682	0	True				
ANR	691014	AssignmentExpression	nargs = fcn -> nargs		690682	0		=			
ANR	691015	Identifier	nargs		690682	0					
ANR	691016	PtrMemberAccess	fcn -> nargs		690682	1					
ANR	691017	Identifier	fcn		690682	0					
ANR	691018	Identifier	nargs		690682	1					
ANR	691019	IfStatement	if ( nargs > 0 )		690682	1					
ANR	691020	Condition	nargs > 0	199:7:5204:5212	690682	0	True				
ANR	691021	RelationalExpression	nargs > 0		690682	0		>			
ANR	691022	Identifier	nargs		690682	0					
ANR	691023	PrimaryExpression	0		690682	1					
ANR	691024	CompoundStatement		53:18:1269:1269	690682	1					
ANR	691025	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		690682	0					
ANR	691026	ForInit	i = 0 ;	200:9:5226:5231	690682	0	True				
ANR	691027	AssignmentExpression	i = 0		690682	0		=			
ANR	691028	Identifier	i		690682	0					
ANR	691029	PrimaryExpression	0		690682	1					
ANR	691030	Condition	i < nargs	200:16:5233:5241	690682	1	True				
ANR	691031	RelationalExpression	i < nargs		690682	0		<			
ANR	691032	Identifier	i		690682	0					
ANR	691033	Identifier	nargs		690682	1					
ANR	691034	PostIncDecOperationExpression	i ++	200:27:5244:5246	690682	2	True				
ANR	691035	Identifier	i		690682	0					
ANR	691036	IncDec	++		690682	1					
ANR	691037	CompoundStatement		55:5:1310:1373	690682	3					
ANR	691038	IdentifierDeclStatement	"ut64 v = r_debug_arg_get ( core -> dbg , R_ANAL_CC_TYPE_STDCALL , i ) ;"	201:5:5256:5319	690682	0	True				
ANR	691039	IdentifierDecl	"v = r_debug_arg_get ( core -> dbg , R_ANAL_CC_TYPE_STDCALL , i )"		690682	0					
ANR	691040	IdentifierDeclType	ut64		690682	0					
ANR	691041	Identifier	v		690682	1					
ANR	691042	AssignmentExpression	"v = r_debug_arg_get ( core -> dbg , R_ANAL_CC_TYPE_STDCALL , i )"		690682	2		=			
ANR	691043	Identifier	v		690682	0					
ANR	691044	CallExpression	"r_debug_arg_get ( core -> dbg , R_ANAL_CC_TYPE_STDCALL , i )"		690682	1					
ANR	691045	Callee	r_debug_arg_get		690682	0					
ANR	691046	Identifier	r_debug_arg_get		690682	0					
ANR	691047	ArgumentList	core -> dbg		690682	1					
ANR	691048	Argument	core -> dbg		690682	0					
ANR	691049	PtrMemberAccess	core -> dbg		690682	0					
ANR	691050	Identifier	core		690682	0					
ANR	691051	Identifier	dbg		690682	1					
ANR	691052	Argument	R_ANAL_CC_TYPE_STDCALL		690682	1					
ANR	691053	Identifier	R_ANAL_CC_TYPE_STDCALL		690682	0					
ANR	691054	Argument	i		690682	2					
ANR	691055	Identifier	i		690682	0					
ANR	691056	ExpressionStatement	"print_arg_str ( i , """" , color )"	202:5:5326:5354	690682	1	True				
ANR	691057	CallExpression	"print_arg_str ( i , """" , color )"		690682	0					
ANR	691058	Callee	print_arg_str		690682	0					
ANR	691059	Identifier	print_arg_str		690682	0					
ANR	691060	ArgumentList	i		690682	1					
ANR	691061	Argument	i		690682	0					
ANR	691062	Identifier	i		690682	0					
ANR	691063	Argument	""""""		690682	1					
ANR	691064	PrimaryExpression	""""""		690682	0					
ANR	691065	Argument	color		690682	2					
ANR	691066	Identifier	color		690682	0					
ANR	691067	Statement	r_cons_printf	203:5:5361:5373	690682	2	True				
ANR	691068	Statement	(	203:19:5375:5375	690682	3	True				
ANR	691069	Statement	"""0x%08"""	203:20:5376:5382	690682	4	True				
ANR	691070	Statement	PFMT64x	203:28:5384:5390	690682	5	True				
ANR	691071	Statement	","	203:35:5391:5391	690682	6	True				
ANR	691072	Statement	v	203:37:5393:5393	690682	7	True				
ANR	691073	Statement	)	203:38:5394:5394	690682	8	True				
ANR	691074	ExpressionStatement		203:39:5395:5395	690682	9	True				
ANR	691075	ExpressionStatement	r_cons_newline ( )	204:5:5402:5419	690682	10	True				
ANR	691076	CallExpression	r_cons_newline ( )		690682	0					
ANR	691077	Callee	r_cons_newline		690682	0					
ANR	691078	Identifier	r_cons_newline		690682	0					
ANR	691079	ArgumentList			690682	1					
ANR	691080	ElseStatement	else		690682	0					
ANR	691081	CompoundStatement		60:10:1491:1491	690682	0					
ANR	691082	ExpressionStatement	"print_arg_str ( 0 , ""void"" , color )"	207:4:5443:5475	690682	0	True				
ANR	691083	CallExpression	"print_arg_str ( 0 , ""void"" , color )"		690682	0					
ANR	691084	Callee	print_arg_str		690682	0					
ANR	691085	Identifier	print_arg_str		690682	0					
ANR	691086	ArgumentList	0		690682	1					
ANR	691087	Argument	0		690682	0					
ANR	691088	PrimaryExpression	0		690682	0					
ANR	691089	Argument	"""void"""		690682	1					
ANR	691090	PrimaryExpression	"""void"""		690682	0					
ANR	691091	Argument	color		690682	2					
ANR	691092	Identifier	color		690682	0					
ANR	691093	ExpressionStatement	r_anal_op_fini ( op )	211:1:5490:5509	690682	9	True				
ANR	691094	CallExpression	r_anal_op_fini ( op )		690682	0					
ANR	691095	Callee	r_anal_op_fini		690682	0					
ANR	691096	Identifier	r_anal_op_fini		690682	0					
ANR	691097	ArgumentList	op		690682	1					
ANR	691098	Argument	op		690682	0					
ANR	691099	Identifier	op		690682	0					
ANR	691100	ReturnType	R_API void		690682	1					
ANR	691101	Identifier	r_core_print_func_args		690682	2					
ANR	691102	ParameterList	RCore * core		690682	3					
ANR	691103	Parameter	RCore * core	147:34:3932:3942	690682	0	True				
ANR	691104	ParameterType	RCore *		690682	0					
ANR	691105	Identifier	core		690682	1					
ANR	691106	CFGEntryNode	ENTRY		690682		True				
ANR	691107	CFGExitNode	EXIT		690682		True				
ANR	691108	Symbol	core -> anal -> reg		690682						
ANR	691109	Symbol	* op		690682						
ANR	691110	Symbol	* fcn		690682						
ANR	691111	Symbol	R_REG_NAME_PC		690682						
ANR	691112	Symbol	fcn -> name		690682						
ANR	691113	Symbol	fcn -> nargs		690682						
ANR	691114	Symbol	r_core_anal_op		690682						
ANR	691115	Symbol	arg -> src		690682						
ANR	691116	Symbol	strncmp		690682						
ANR	691117	Symbol	arg -> name		690682						
ANR	691118	Symbol	onstack		690682						
ANR	691119	Symbol	r_flag_get_i		690682						
ANR	691120	Symbol	item		690682						
ANR	691121	Symbol	NULL		690682						
ANR	691122	Symbol	op -> ptr		690682						
ANR	691123	Symbol	op -> type		690682						
ANR	691124	Symbol	iter		690682						
ANR	691125	Symbol	list		690682						
ANR	691126	Symbol	cur_addr		690682						
ANR	691127	Symbol	argcnt		690682						
ANR	691128	Symbol	core		690682						
ANR	691129	Symbol	r_reg_get_name		690682						
ANR	691130	Symbol	R_ANAL_OP_TYPE_CALL		690682						
ANR	691131	Symbol	r_config_get_i		690682						
ANR	691132	Symbol	true		690682						
ANR	691133	Symbol	r_list_empty		690682						
ANR	691134	Symbol	r_reg_getv		690682						
ANR	691135	Symbol	* arg		690682						
ANR	691136	Symbol	r_anal_get_fcn_at		690682						
ANR	691137	Symbol	color		690682						
ANR	691138	Symbol	* core		690682						
ANR	691139	Symbol	r_core_get_func_args		690682						
ANR	691140	Symbol	core -> anal		690682						
ANR	691141	Symbol	R_ANAL_OP_MASK_BASIC		690682						
ANR	691142	Symbol	fcn		690682						
ANR	691143	Symbol	* item		690682						
ANR	691144	Symbol	arg		690682						
ANR	691145	Symbol	op -> jump		690682						
ANR	691146	Symbol	arg -> fmt		690682						
ANR	691147	Symbol	arg -> cc_source		690682						
ANR	691148	Symbol	UT64_MAX		690682						
ANR	691149	Symbol	fcn_name		690682						
ANR	691150	Symbol	* * core		690682						
ANR	691151	Symbol	core -> config		690682						
ANR	691152	Symbol	op		690682						
ANR	691153	Symbol	pcv		690682						
ANR	691154	Symbol	R_ANAL_CC_TYPE_STDCALL		690682						
ANR	691155	Symbol	false		690682						
ANR	691156	Symbol	i		690682						
ANR	691157	Symbol	core -> flags		690682						
ANR	691158	Symbol	r_debug_arg_get		690682						
ANR	691159	Symbol	nargs		690682						
ANR	691160	Symbol	* core -> anal		690682						
ANR	691161	Symbol	pc		690682						
ANR	691162	Symbol	item -> name		690682						
ANR	691163	Symbol	v		690682						
ANR	691164	Symbol	core -> dbg		690682						
ANR	691165	Function	r_anal_fcn_arg_free	214:0:5514:5632							
ANR	691166	FunctionDef	r_anal_fcn_arg_free (RAnalFuncArg * arg)		691165	0					
ANR	691167	CompoundStatement		214:51:5565:5632	691165	0					
ANR	691168	IfStatement	if ( ! arg )		691165	0					
ANR	691169	Condition	! arg	215:5:5572:5575	691165	0	True				
ANR	691170	UnaryOperationExpression	! arg		691165	0					
ANR	691171	UnaryOperator	!		691165	0					
ANR	691172	Identifier	arg		691165	1					
ANR	691173	CompoundStatement		2:11:12:12	691165	1					
ANR	691174	ReturnStatement	return ;	216:2:5582:5588	691165	0	True				
ANR	691175	ExpressionStatement	free ( arg -> orig_c_type )	218:1:5594:5617	691165	1	True				
ANR	691176	CallExpression	free ( arg -> orig_c_type )		691165	0					
ANR	691177	Callee	free		691165	0					
ANR	691178	Identifier	free		691165	0					
ANR	691179	ArgumentList	arg -> orig_c_type		691165	1					
ANR	691180	Argument	arg -> orig_c_type		691165	0					
ANR	691181	PtrMemberAccess	arg -> orig_c_type		691165	0					
ANR	691182	Identifier	arg		691165	0					
ANR	691183	Identifier	orig_c_type		691165	1					
ANR	691184	ExpressionStatement	free ( arg )	219:1:5620:5630	691165	2	True				
ANR	691185	CallExpression	free ( arg )		691165	0					
ANR	691186	Callee	free		691165	0					
ANR	691187	Identifier	free		691165	0					
ANR	691188	ArgumentList	arg		691165	1					
ANR	691189	Argument	arg		691165	0					
ANR	691190	Identifier	arg		691165	0					
ANR	691191	ReturnType	static void		691165	1					
ANR	691192	Identifier	r_anal_fcn_arg_free		691165	2					
ANR	691193	ParameterList	RAnalFuncArg * arg		691165	3					
ANR	691194	Parameter	RAnalFuncArg * arg	214:32:5546:5562	691165	0	True				
ANR	691195	ParameterType	RAnalFuncArg *		691165	0					
ANR	691196	Identifier	arg		691165	1					
ANR	691197	CFGEntryNode	ENTRY		691165		True				
ANR	691198	CFGExitNode	EXIT		691165		True				
ANR	691199	Symbol	arg -> orig_c_type		691165						
ANR	691200	Symbol	arg		691165						
ANR	691201	Symbol	* arg		691165						
ANR	691202	Function	r_core_get_func_args	223:0:5672:7258							
ANR	691203	FunctionDef	"r_core_get_func_args (RCore * core , const char * fcn_name)"		691202	0					
ANR	691204	CompoundStatement		223:69:5741:7258	691202	0					
ANR	691205	IfStatement	if ( ! fcn_name || ! core -> anal )		691202	0					
ANR	691206	Condition	! fcn_name || ! core -> anal	224:5:5748:5771	691202	0	True				
ANR	691207	OrExpression	! fcn_name || ! core -> anal		691202	0		||			
ANR	691208	UnaryOperationExpression	! fcn_name		691202	0					
ANR	691209	UnaryOperator	!		691202	0					
ANR	691210	Identifier	fcn_name		691202	1					
ANR	691211	UnaryOperationExpression	! core -> anal		691202	1					
ANR	691212	UnaryOperator	!		691202	0					
ANR	691213	PtrMemberAccess	core -> anal		691202	1					
ANR	691214	Identifier	core		691202	0					
ANR	691215	Identifier	anal		691202	1					
ANR	691216	CompoundStatement		2:31:32:32	691202	1					
ANR	691217	ReturnStatement	return NULL ;	225:2:5778:5789	691202	0	True				
ANR	691218	Identifier	NULL		691202	0					
ANR	691219	IdentifierDeclStatement	Sdb * TDB = core -> anal -> sdb_types ;	227:1:5795:5827	691202	1	True				
ANR	691220	IdentifierDecl	* TDB = core -> anal -> sdb_types		691202	0					
ANR	691221	IdentifierDeclType	Sdb *		691202	0					
ANR	691222	Identifier	TDB		691202	1					
ANR	691223	AssignmentExpression	* TDB = core -> anal -> sdb_types		691202	2		=			
ANR	691224	Identifier	TDB		691202	0					
ANR	691225	PtrMemberAccess	core -> anal -> sdb_types		691202	1					
ANR	691226	PtrMemberAccess	core -> anal		691202	0					
ANR	691227	Identifier	core		691202	0					
ANR	691228	Identifier	anal		691202	1					
ANR	691229	Identifier	sdb_types		691202	1					
ANR	691230	IdentifierDeclStatement	RList * list = r_list_newf ( ( RListFree ) r_anal_fcn_arg_free ) ;	228:1:5830:5888	691202	2	True				
ANR	691231	IdentifierDecl	* list = r_list_newf ( ( RListFree ) r_anal_fcn_arg_free )		691202	0					
ANR	691232	IdentifierDeclType	RList *		691202	0					
ANR	691233	Identifier	list		691202	1					
ANR	691234	AssignmentExpression	* list = r_list_newf ( ( RListFree ) r_anal_fcn_arg_free )		691202	2		=			
ANR	691235	Identifier	list		691202	0					
ANR	691236	CallExpression	r_list_newf ( ( RListFree ) r_anal_fcn_arg_free )		691202	1					
ANR	691237	Callee	r_list_newf		691202	0					
ANR	691238	Identifier	r_list_newf		691202	0					
ANR	691239	ArgumentList	( RListFree ) r_anal_fcn_arg_free		691202	1					
ANR	691240	Argument	( RListFree ) r_anal_fcn_arg_free		691202	0					
ANR	691241	CastExpression	( RListFree ) r_anal_fcn_arg_free		691202	0					
ANR	691242	CastTarget	RListFree		691202	0					
ANR	691243	Identifier	r_anal_fcn_arg_free		691202	1					
ANR	691244	IdentifierDeclStatement	"char * key = resolve_fcn_name ( core -> anal , fcn_name ) ;"	229:1:5891:5942	691202	3	True				
ANR	691245	IdentifierDecl	"* key = resolve_fcn_name ( core -> anal , fcn_name )"		691202	0					
ANR	691246	IdentifierDeclType	char *		691202	0					
ANR	691247	Identifier	key		691202	1					
ANR	691248	AssignmentExpression	"* key = resolve_fcn_name ( core -> anal , fcn_name )"		691202	2		=			
ANR	691249	Identifier	key		691202	0					
ANR	691250	CallExpression	"resolve_fcn_name ( core -> anal , fcn_name )"		691202	1					
ANR	691251	Callee	resolve_fcn_name		691202	0					
ANR	691252	Identifier	resolve_fcn_name		691202	0					
ANR	691253	ArgumentList	core -> anal		691202	1					
ANR	691254	Argument	core -> anal		691202	0					
ANR	691255	PtrMemberAccess	core -> anal		691202	0					
ANR	691256	Identifier	core		691202	0					
ANR	691257	Identifier	anal		691202	1					
ANR	691258	Argument	fcn_name		691202	1					
ANR	691259	Identifier	fcn_name		691202	0					
ANR	691260	IfStatement	if ( ! key )		691202	4					
ANR	691261	Condition	! key	230:5:5949:5952	691202	0	True				
ANR	691262	UnaryOperationExpression	! key		691202	0					
ANR	691263	UnaryOperator	!		691202	0					
ANR	691264	Identifier	key		691202	1					
ANR	691265	CompoundStatement		8:11:213:213	691202	1					
ANR	691266	ReturnStatement	return NULL ;	231:2:5959:5970	691202	0	True				
ANR	691267	Identifier	NULL		691202	0					
ANR	691268	IdentifierDeclStatement	"const char * sp = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_SP ) ;"	233:1:5976:6040	691202	5	True				
ANR	691269	IdentifierDecl	"* sp = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_SP )"		691202	0					
ANR	691270	IdentifierDeclType	const char *		691202	0					
ANR	691271	Identifier	sp		691202	1					
ANR	691272	AssignmentExpression	"* sp = r_reg_get_name ( core -> anal -> reg , R_REG_NAME_SP )"		691202	2		=			
ANR	691273	Identifier	sp		691202	0					
ANR	691274	CallExpression	"r_reg_get_name ( core -> anal -> reg , R_REG_NAME_SP )"		691202	1					
ANR	691275	Callee	r_reg_get_name		691202	0					
ANR	691276	Identifier	r_reg_get_name		691202	0					
ANR	691277	ArgumentList	core -> anal -> reg		691202	1					
ANR	691278	Argument	core -> anal -> reg		691202	0					
ANR	691279	PtrMemberAccess	core -> anal -> reg		691202	0					
ANR	691280	PtrMemberAccess	core -> anal		691202	0					
ANR	691281	Identifier	core		691202	0					
ANR	691282	Identifier	anal		691202	1					
ANR	691283	Identifier	reg		691202	1					
ANR	691284	Argument	R_REG_NAME_SP		691202	1					
ANR	691285	Identifier	R_REG_NAME_SP		691202	0					
ANR	691286	IdentifierDeclStatement	"int nargs = r_type_func_args_count ( TDB , key ) ;"	234:1:6043:6088	691202	6	True				
ANR	691287	IdentifierDecl	"nargs = r_type_func_args_count ( TDB , key )"		691202	0					
ANR	691288	IdentifierDeclType	int		691202	0					
ANR	691289	Identifier	nargs		691202	1					
ANR	691290	AssignmentExpression	"nargs = r_type_func_args_count ( TDB , key )"		691202	2		=			
ANR	691291	Identifier	nargs		691202	0					
ANR	691292	CallExpression	"r_type_func_args_count ( TDB , key )"		691202	1					
ANR	691293	Callee	r_type_func_args_count		691202	0					
ANR	691294	Identifier	r_type_func_args_count		691202	0					
ANR	691295	ArgumentList	TDB		691202	1					
ANR	691296	Argument	TDB		691202	0					
ANR	691297	Identifier	TDB		691202	0					
ANR	691298	Argument	key		691202	1					
ANR	691299	Identifier	key		691202	0					
ANR	691300	IdentifierDeclStatement	"char * cc = strdup ( r_anal_cc_func ( core -> anal , key ) ) ;"	235:1:6091:6143	691202	7	True				
ANR	691301	IdentifierDecl	"* cc = strdup ( r_anal_cc_func ( core -> anal , key ) )"		691202	0					
ANR	691302	IdentifierDeclType	char *		691202	0					
ANR	691303	Identifier	cc		691202	1					
ANR	691304	AssignmentExpression	"* cc = strdup ( r_anal_cc_func ( core -> anal , key ) )"		691202	2		=			
ANR	691305	Identifier	cc		691202	0					
ANR	691306	CallExpression	"strdup ( r_anal_cc_func ( core -> anal , key ) )"		691202	1					
ANR	691307	Callee	strdup		691202	0					
ANR	691308	Identifier	strdup		691202	0					
ANR	691309	ArgumentList	"r_anal_cc_func ( core -> anal , key )"		691202	1					
ANR	691310	Argument	"r_anal_cc_func ( core -> anal , key )"		691202	0					
ANR	691311	CallExpression	"r_anal_cc_func ( core -> anal , key )"		691202	0					
ANR	691312	Callee	r_anal_cc_func		691202	0					
ANR	691313	Identifier	r_anal_cc_func		691202	0					
ANR	691314	ArgumentList	core -> anal		691202	1					
ANR	691315	Argument	core -> anal		691202	0					
ANR	691316	PtrMemberAccess	core -> anal		691202	0					
ANR	691317	Identifier	core		691202	0					
ANR	691318	Identifier	anal		691202	1					
ANR	691319	Argument	key		691202	1					
ANR	691320	Identifier	key		691202	0					
ANR	691321	IdentifierDeclStatement	"const char * src = r_anal_cc_arg ( core -> anal , cc , 0 ) ;"	236:1:6146:6197	691202	8	True				
ANR	691322	IdentifierDecl	"* src = r_anal_cc_arg ( core -> anal , cc , 0 )"		691202	0					
ANR	691323	IdentifierDeclType	const char *		691202	0					
ANR	691324	Identifier	src		691202	1					
ANR	691325	AssignmentExpression	"* src = r_anal_cc_arg ( core -> anal , cc , 0 )"		691202	2		=			
ANR	691326	Identifier	src		691202	0					
ANR	691327	CallExpression	"r_anal_cc_arg ( core -> anal , cc , 0 )"		691202	1					
ANR	691328	Callee	r_anal_cc_arg		691202	0					
ANR	691329	Identifier	r_anal_cc_arg		691202	0					
ANR	691330	ArgumentList	core -> anal		691202	1					
ANR	691331	Argument	core -> anal		691202	0					
ANR	691332	PtrMemberAccess	core -> anal		691202	0					
ANR	691333	Identifier	core		691202	0					
ANR	691334	Identifier	anal		691202	1					
ANR	691335	Argument	cc		691202	1					
ANR	691336	Identifier	cc		691202	0					
ANR	691337	Argument	0		691202	2					
ANR	691338	PrimaryExpression	0		691202	0					
ANR	691339	IfStatement	if ( ! cc )		691202	9					
ANR	691340	Condition	! cc	237:5:6229:6231	691202	0	True				
ANR	691341	UnaryOperationExpression	! cc		691202	0					
ANR	691342	UnaryOperator	!		691202	0					
ANR	691343	Identifier	cc		691202	1					
ANR	691344	CompoundStatement		15:10:492:492	691202	1					
ANR	691345	ExpressionStatement	free ( key )	239:2:6274:6284	691202	0	True				
ANR	691346	CallExpression	free ( key )		691202	0					
ANR	691347	Callee	free		691202	0					
ANR	691348	Identifier	free		691202	0					
ANR	691349	ArgumentList	key		691202	1					
ANR	691350	Argument	key		691202	0					
ANR	691351	Identifier	key		691202	0					
ANR	691352	ReturnStatement	return NULL ;	240:2:6288:6299	691202	1	True				
ANR	691353	Identifier	NULL		691202	0					
ANR	691354	IdentifierDeclStatement	int i ;	242:1:6305:6310	691202	10	True				
ANR	691355	IdentifierDecl	i		691202	0					
ANR	691356	IdentifierDeclType	int		691202	0					
ANR	691357	Identifier	i		691202	1					
ANR	691358	IdentifierDeclStatement	"ut64 spv = r_reg_getv ( core -> anal -> reg , sp ) ;"	243:1:6313:6356	691202	11	True				
ANR	691359	IdentifierDecl	"spv = r_reg_getv ( core -> anal -> reg , sp )"		691202	0					
ANR	691360	IdentifierDeclType	ut64		691202	0					
ANR	691361	Identifier	spv		691202	1					
ANR	691362	AssignmentExpression	"spv = r_reg_getv ( core -> anal -> reg , sp )"		691202	2		=			
ANR	691363	Identifier	spv		691202	0					
ANR	691364	CallExpression	"r_reg_getv ( core -> anal -> reg , sp )"		691202	1					
ANR	691365	Callee	r_reg_getv		691202	0					
ANR	691366	Identifier	r_reg_getv		691202	0					
ANR	691367	ArgumentList	core -> anal -> reg		691202	1					
ANR	691368	Argument	core -> anal -> reg		691202	0					
ANR	691369	PtrMemberAccess	core -> anal -> reg		691202	0					
ANR	691370	PtrMemberAccess	core -> anal		691202	0					
ANR	691371	Identifier	core		691202	0					
ANR	691372	Identifier	anal		691202	1					
ANR	691373	Identifier	reg		691202	1					
ANR	691374	Argument	sp		691202	1					
ANR	691375	Identifier	sp		691202	0					
ANR	691376	IdentifierDeclStatement	ut64 s_width = ( core -> anal -> bits == 64 ) ? 8 : 4 ;	244:1:6359:6404	691202	12	True				
ANR	691377	IdentifierDecl	s_width = ( core -> anal -> bits == 64 ) ? 8 : 4		691202	0					
ANR	691378	IdentifierDeclType	ut64		691202	0					
ANR	691379	Identifier	s_width		691202	1					
ANR	691380	AssignmentExpression	s_width = ( core -> anal -> bits == 64 ) ? 8 : 4		691202	2		=			
ANR	691381	Identifier	s_width		691202	0					
ANR	691382	ConditionalExpression	( core -> anal -> bits == 64 ) ? 8 : 4		691202	1					
ANR	691383	Condition	core -> anal -> bits == 64		691202	0					
ANR	691384	EqualityExpression	core -> anal -> bits == 64		691202	0		==			
ANR	691385	PtrMemberAccess	core -> anal -> bits		691202	0					
ANR	691386	PtrMemberAccess	core -> anal		691202	0					
ANR	691387	Identifier	core		691202	0					
ANR	691388	Identifier	anal		691202	1					
ANR	691389	Identifier	bits		691202	1					
ANR	691390	PrimaryExpression	64		691202	1					
ANR	691391	PrimaryExpression	8		691202	1					
ANR	691392	PrimaryExpression	4		691202	2					
ANR	691393	IfStatement	"if ( src && ! strcmp ( src , ""stack_rev"" ) )"		691202	13					
ANR	691394	Condition	"src && ! strcmp ( src , ""stack_rev"" )"	245:5:6411:6443	691202	0	True				
ANR	691395	AndExpression	"src && ! strcmp ( src , ""stack_rev"" )"		691202	0		&&			
ANR	691396	Identifier	src		691202	0					
ANR	691397	UnaryOperationExpression	"! strcmp ( src , ""stack_rev"" )"		691202	1					
ANR	691398	UnaryOperator	!		691202	0					
ANR	691399	CallExpression	"strcmp ( src , ""stack_rev"" )"		691202	1					
ANR	691400	Callee	strcmp		691202	0					
ANR	691401	Identifier	strcmp		691202	0					
ANR	691402	ArgumentList	src		691202	1					
ANR	691403	Argument	src		691202	0					
ANR	691404	Identifier	src		691202	0					
ANR	691405	Argument	"""stack_rev"""		691202	1					
ANR	691406	PrimaryExpression	"""stack_rev"""		691202	0					
ANR	691407	CompoundStatement		23:40:704:704	691202	1					
ANR	691408	ForStatement	for ( i = nargs - 1 ; i >= 0 ; i -- )		691202	0					
ANR	691409	ForInit	i = nargs - 1 ;	246:7:6455:6468	691202	0	True				
ANR	691410	AssignmentExpression	i = nargs - 1		691202	0		=			
ANR	691411	Identifier	i		691202	0					
ANR	691412	AdditiveExpression	nargs - 1		691202	1		-			
ANR	691413	Identifier	nargs		691202	0					
ANR	691414	PrimaryExpression	1		691202	1					
ANR	691415	Condition	i >= 0	246:22:6470:6475	691202	1	True				
ANR	691416	RelationalExpression	i >= 0		691202	0		>=			
ANR	691417	Identifier	i		691202	0					
ANR	691418	PrimaryExpression	0		691202	1					
ANR	691419	PostIncDecOperationExpression	i --	246:30:6478:6480	691202	2	True				
ANR	691420	Identifier	i		691202	0					
ANR	691421	IncDec	--		691202	1					
ANR	691422	CompoundStatement		25:3:746:787	691202	3					
ANR	691423	IdentifierDeclStatement	RAnalFuncArg * arg = R_NEW0 ( RAnalFuncArg ) ;	247:3:6488:6529	691202	0	True				
ANR	691424	IdentifierDecl	* arg = R_NEW0 ( RAnalFuncArg )		691202	0					
ANR	691425	IdentifierDeclType	RAnalFuncArg *		691202	0					
ANR	691426	Identifier	arg		691202	1					
ANR	691427	AssignmentExpression	* arg = R_NEW0 ( RAnalFuncArg )		691202	2		=			
ANR	691428	Identifier	arg		691202	0					
ANR	691429	CallExpression	R_NEW0 ( RAnalFuncArg )		691202	1					
ANR	691430	Callee	R_NEW0		691202	0					
ANR	691431	Identifier	R_NEW0		691202	0					
ANR	691432	ArgumentList	RAnalFuncArg		691202	1					
ANR	691433	Argument	RAnalFuncArg		691202	0					
ANR	691434	Identifier	RAnalFuncArg		691202	0					
ANR	691435	ExpressionStatement	"set_fcn_args_info ( arg , core -> anal , key , cc , i )"	248:3:6534:6581	691202	1	True				
ANR	691436	CallExpression	"set_fcn_args_info ( arg , core -> anal , key , cc , i )"		691202	0					
ANR	691437	Callee	set_fcn_args_info		691202	0					
ANR	691438	Identifier	set_fcn_args_info		691202	0					
ANR	691439	ArgumentList	arg		691202	1					
ANR	691440	Argument	arg		691202	0					
ANR	691441	Identifier	arg		691202	0					
ANR	691442	Argument	core -> anal		691202	1					
ANR	691443	PtrMemberAccess	core -> anal		691202	0					
ANR	691444	Identifier	core		691202	0					
ANR	691445	Identifier	anal		691202	1					
ANR	691446	Argument	key		691202	2					
ANR	691447	Identifier	key		691202	0					
ANR	691448	Argument	cc		691202	3					
ANR	691449	Identifier	cc		691202	0					
ANR	691450	Argument	i		691202	4					
ANR	691451	Identifier	i		691202	0					
ANR	691452	ExpressionStatement	arg -> src = spv	249:3:6586:6600	691202	2	True				
ANR	691453	AssignmentExpression	arg -> src = spv		691202	0		=			
ANR	691454	PtrMemberAccess	arg -> src		691202	0					
ANR	691455	Identifier	arg		691202	0					
ANR	691456	Identifier	src		691202	1					
ANR	691457	Identifier	spv		691202	1					
ANR	691458	ExpressionStatement	spv += arg -> size ? arg -> size : s_width	250:3:6605:6642	691202	3	True				
ANR	691459	AssignmentExpression	spv += arg -> size ? arg -> size : s_width		691202	0		+=			
ANR	691460	Identifier	spv		691202	0					
ANR	691461	ConditionalExpression	arg -> size ? arg -> size : s_width		691202	1					
ANR	691462	Condition	arg -> size		691202	0					
ANR	691463	PtrMemberAccess	arg -> size		691202	0					
ANR	691464	Identifier	arg		691202	0					
ANR	691465	Identifier	size		691202	1					
ANR	691466	PtrMemberAccess	arg -> size		691202	1					
ANR	691467	Identifier	arg		691202	0					
ANR	691468	Identifier	size		691202	1					
ANR	691469	Identifier	s_width		691202	2					
ANR	691470	ExpressionStatement	"r_list_append ( list , arg )"	251:3:6647:6672	691202	4	True				
ANR	691471	CallExpression	"r_list_append ( list , arg )"		691202	0					
ANR	691472	Callee	r_list_append		691202	0					
ANR	691473	Identifier	r_list_append		691202	0					
ANR	691474	ArgumentList	list		691202	1					
ANR	691475	Argument	list		691202	0					
ANR	691476	Identifier	list		691202	0					
ANR	691477	Argument	arg		691202	1					
ANR	691478	Identifier	arg		691202	0					
ANR	691479	ElseStatement	else		691202	0					
ANR	691480	CompoundStatement		31:8:944:944	691202	0					
ANR	691481	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		691202	0					
ANR	691482	ForInit	i = 0 ;	254:7:6695:6700	691202	0	True				
ANR	691483	AssignmentExpression	i = 0		691202	0		=			
ANR	691484	Identifier	i		691202	0					
ANR	691485	PrimaryExpression	0		691202	1					
ANR	691486	Condition	i < nargs	254:14:6702:6710	691202	1	True				
ANR	691487	RelationalExpression	i < nargs		691202	0		<			
ANR	691488	Identifier	i		691202	0					
ANR	691489	Identifier	nargs		691202	1					
ANR	691490	PostIncDecOperationExpression	i ++	254:25:6713:6715	691202	2	True				
ANR	691491	Identifier	i		691202	0					
ANR	691492	IncDec	++		691202	1					
ANR	691493	CompoundStatement		33:3:981:1022	691202	3					
ANR	691494	IdentifierDeclStatement	RAnalFuncArg * arg = R_NEW0 ( RAnalFuncArg ) ;	255:3:6723:6764	691202	0	True				
ANR	691495	IdentifierDecl	* arg = R_NEW0 ( RAnalFuncArg )		691202	0					
ANR	691496	IdentifierDeclType	RAnalFuncArg *		691202	0					
ANR	691497	Identifier	arg		691202	1					
ANR	691498	AssignmentExpression	* arg = R_NEW0 ( RAnalFuncArg )		691202	2		=			
ANR	691499	Identifier	arg		691202	0					
ANR	691500	CallExpression	R_NEW0 ( RAnalFuncArg )		691202	1					
ANR	691501	Callee	R_NEW0		691202	0					
ANR	691502	Identifier	R_NEW0		691202	0					
ANR	691503	ArgumentList	RAnalFuncArg		691202	1					
ANR	691504	Argument	RAnalFuncArg		691202	0					
ANR	691505	Identifier	RAnalFuncArg		691202	0					
ANR	691506	IfStatement	if ( ! arg )		691202	1					
ANR	691507	Condition	! arg	256:7:6773:6776	691202	0	True				
ANR	691508	UnaryOperationExpression	! arg		691202	0					
ANR	691509	UnaryOperator	!		691202	0					
ANR	691510	Identifier	arg		691202	1					
ANR	691511	CompoundStatement		34:13:1037:1037	691202	1					
ANR	691512	ReturnStatement	return NULL ;	257:4:6785:6796	691202	0	True				
ANR	691513	Identifier	NULL		691202	0					
ANR	691514	ExpressionStatement	"set_fcn_args_info ( arg , core -> anal , key , cc , i )"	259:3:6806:6853	691202	2	True				
ANR	691515	CallExpression	"set_fcn_args_info ( arg , core -> anal , key , cc , i )"		691202	0					
ANR	691516	Callee	set_fcn_args_info		691202	0					
ANR	691517	Identifier	set_fcn_args_info		691202	0					
ANR	691518	ArgumentList	arg		691202	1					
ANR	691519	Argument	arg		691202	0					
ANR	691520	Identifier	arg		691202	0					
ANR	691521	Argument	core -> anal		691202	1					
ANR	691522	PtrMemberAccess	core -> anal		691202	0					
ANR	691523	Identifier	core		691202	0					
ANR	691524	Identifier	anal		691202	1					
ANR	691525	Argument	key		691202	2					
ANR	691526	Identifier	key		691202	0					
ANR	691527	Argument	cc		691202	3					
ANR	691528	Identifier	cc		691202	0					
ANR	691529	Argument	i		691202	4					
ANR	691530	Identifier	i		691202	0					
ANR	691531	IfStatement	"if ( src && ! strncmp ( src , ""stack"" , 5 ) )"		691202	3					
ANR	691532	Condition	"src && ! strncmp ( src , ""stack"" , 5 )"	260:7:6862:6894	691202	0	True				
ANR	691533	AndExpression	"src && ! strncmp ( src , ""stack"" , 5 )"		691202	0		&&			
ANR	691534	Identifier	src		691202	0					
ANR	691535	UnaryOperationExpression	"! strncmp ( src , ""stack"" , 5 )"		691202	1					
ANR	691536	UnaryOperator	!		691202	0					
ANR	691537	CallExpression	"strncmp ( src , ""stack"" , 5 )"		691202	1					
ANR	691538	Callee	strncmp		691202	0					
ANR	691539	Identifier	strncmp		691202	0					
ANR	691540	ArgumentList	src		691202	1					
ANR	691541	Argument	src		691202	0					
ANR	691542	Identifier	src		691202	0					
ANR	691543	Argument	"""stack"""		691202	1					
ANR	691544	PrimaryExpression	"""stack"""		691202	0					
ANR	691545	Argument	5		691202	2					
ANR	691546	PrimaryExpression	5		691202	0					
ANR	691547	CompoundStatement		38:42:1155:1155	691202	1					
ANR	691548	ExpressionStatement	arg -> src = spv	261:4:6903:6917	691202	0	True				
ANR	691549	AssignmentExpression	arg -> src = spv		691202	0		=			
ANR	691550	PtrMemberAccess	arg -> src		691202	0					
ANR	691551	Identifier	arg		691202	0					
ANR	691552	Identifier	src		691202	1					
ANR	691553	Identifier	spv		691202	1					
ANR	691554	IfStatement	if ( ! arg -> size )		691202	1					
ANR	691555	Condition	! arg -> size	262:8:6927:6936	691202	0	True				
ANR	691556	UnaryOperationExpression	! arg -> size		691202	0					
ANR	691557	UnaryOperator	!		691202	0					
ANR	691558	PtrMemberAccess	arg -> size		691202	1					
ANR	691559	Identifier	arg		691202	0					
ANR	691560	Identifier	size		691202	1					
ANR	691561	CompoundStatement		40:20:1197:1197	691202	1					
ANR	691562	ExpressionStatement	arg -> size = s_width	263:5:6946:6965	691202	0	True				
ANR	691563	AssignmentExpression	arg -> size = s_width		691202	0		=			
ANR	691564	PtrMemberAccess	arg -> size		691202	0					
ANR	691565	Identifier	arg		691202	0					
ANR	691566	Identifier	size		691202	1					
ANR	691567	Identifier	s_width		691202	1					
ANR	691568	ExpressionStatement	spv += arg -> size	265:4:6977:6993	691202	2	True				
ANR	691569	AssignmentExpression	spv += arg -> size		691202	0		+=			
ANR	691570	Identifier	spv		691202	0					
ANR	691571	PtrMemberAccess	arg -> size		691202	1					
ANR	691572	Identifier	arg		691202	0					
ANR	691573	Identifier	size		691202	1					
ANR	691574	ElseStatement	else		691202	0					
ANR	691575	CompoundStatement		45:4:1269:1300	691202	0					
ANR	691576	IdentifierDeclStatement	const char * cs = arg -> cc_source ;	267:4:7011:7042	691202	0	True				
ANR	691577	IdentifierDecl	* cs = arg -> cc_source		691202	0					
ANR	691578	IdentifierDeclType	const char *		691202	0					
ANR	691579	Identifier	cs		691202	1					
ANR	691580	AssignmentExpression	* cs = arg -> cc_source		691202	2		=			
ANR	691581	Identifier	cs		691202	0					
ANR	691582	PtrMemberAccess	arg -> cc_source		691202	1					
ANR	691583	Identifier	arg		691202	0					
ANR	691584	Identifier	cc_source		691202	1					
ANR	691585	IfStatement	if ( ! cs )		691202	1					
ANR	691586	Condition	! cs	268:8:7052:7054	691202	0	True				
ANR	691587	UnaryOperationExpression	! cs		691202	0					
ANR	691588	UnaryOperator	!		691202	0					
ANR	691589	Identifier	cs		691202	1					
ANR	691590	CompoundStatement		46:13:1315:1315	691202	1					
ANR	691591	ExpressionStatement	cs = r_anal_cc_default ( core -> anal )	269:5:7064:7099	691202	0	True				
ANR	691592	AssignmentExpression	cs = r_anal_cc_default ( core -> anal )		691202	0		=			
ANR	691593	Identifier	cs		691202	0					
ANR	691594	CallExpression	r_anal_cc_default ( core -> anal )		691202	1					
ANR	691595	Callee	r_anal_cc_default		691202	0					
ANR	691596	Identifier	r_anal_cc_default		691202	0					
ANR	691597	ArgumentList	core -> anal		691202	1					
ANR	691598	Argument	core -> anal		691202	0					
ANR	691599	PtrMemberAccess	core -> anal		691202	0					
ANR	691600	Identifier	core		691202	0					
ANR	691601	Identifier	anal		691202	1					
ANR	691602	IfStatement	if ( cs )		691202	2					
ANR	691603	Condition	cs	271:8:7115:7116	691202	0	True				
ANR	691604	Identifier	cs		691202	0					
ANR	691605	CompoundStatement		49:12:1377:1377	691202	1					
ANR	691606	ExpressionStatement	"arg -> src = r_reg_getv ( core -> anal -> reg , cs )"	272:5:7126:7169	691202	0	True				
ANR	691607	AssignmentExpression	"arg -> src = r_reg_getv ( core -> anal -> reg , cs )"		691202	0		=			
ANR	691608	PtrMemberAccess	arg -> src		691202	0					
ANR	691609	Identifier	arg		691202	0					
ANR	691610	Identifier	src		691202	1					
ANR	691611	CallExpression	"r_reg_getv ( core -> anal -> reg , cs )"		691202	1					
ANR	691612	Callee	r_reg_getv		691202	0					
ANR	691613	Identifier	r_reg_getv		691202	0					
ANR	691614	ArgumentList	core -> anal -> reg		691202	1					
ANR	691615	Argument	core -> anal -> reg		691202	0					
ANR	691616	PtrMemberAccess	core -> anal -> reg		691202	0					
ANR	691617	PtrMemberAccess	core -> anal		691202	0					
ANR	691618	Identifier	core		691202	0					
ANR	691619	Identifier	anal		691202	1					
ANR	691620	Identifier	reg		691202	1					
ANR	691621	Argument	cs		691202	1					
ANR	691622	Identifier	cs		691202	0					
ANR	691623	ExpressionStatement	"r_list_append ( list , arg )"	275:3:7185:7210	691202	4	True				
ANR	691624	CallExpression	"r_list_append ( list , arg )"		691202	0					
ANR	691625	Callee	r_list_append		691202	0					
ANR	691626	Identifier	r_list_append		691202	0					
ANR	691627	ArgumentList	list		691202	1					
ANR	691628	Argument	list		691202	0					
ANR	691629	Identifier	list		691202	0					
ANR	691630	Argument	arg		691202	1					
ANR	691631	Identifier	arg		691202	0					
ANR	691632	ExpressionStatement	free ( key )	278:1:7220:7230	691202	14	True				
ANR	691633	CallExpression	free ( key )		691202	0					
ANR	691634	Callee	free		691202	0					
ANR	691635	Identifier	free		691202	0					
ANR	691636	ArgumentList	key		691202	1					
ANR	691637	Argument	key		691202	0					
ANR	691638	Identifier	key		691202	0					
ANR	691639	ExpressionStatement	free ( cc )	279:1:7233:7242	691202	15	True				
ANR	691640	CallExpression	free ( cc )		691202	0					
ANR	691641	Callee	free		691202	0					
ANR	691642	Identifier	free		691202	0					
ANR	691643	ArgumentList	cc		691202	1					
ANR	691644	Argument	cc		691202	0					
ANR	691645	Identifier	cc		691202	0					
ANR	691646	ReturnStatement	return list ;	280:1:7245:7256	691202	16	True				
ANR	691647	Identifier	list		691202	0					
ANR	691648	ReturnType	R_API RList *		691202	1					
ANR	691649	Identifier	r_core_get_func_args		691202	2					
ANR	691650	ParameterList	"RCore * core , const char * fcn_name"		691202	3					
ANR	691651	Parameter	RCore * core	223:34:5706:5716	691202	0	True				
ANR	691652	ParameterType	RCore *		691202	0					
ANR	691653	Identifier	core		691202	1					
ANR	691654	Parameter	const char * fcn_name	223:47:5719:5738	691202	1	True				
ANR	691655	ParameterType	const char *		691202	0					
ANR	691656	Identifier	fcn_name		691202	1					
ANR	691657	CFGEntryNode	ENTRY		691202		True				
ANR	691658	CFGExitNode	EXIT		691202		True				
ANR	691659	Symbol	core -> anal -> reg		691202						
ANR	691660	Symbol	RAnalFuncArg		691202						
ANR	691661	Symbol	* core		691202						
ANR	691662	Symbol	core -> anal -> sdb_types		691202						
ANR	691663	Symbol	core -> anal		691202						
ANR	691664	Symbol	r_anal_fcn_arg_free		691202						
ANR	691665	Symbol	arg -> src		691202						
ANR	691666	Symbol	arg -> size		691202						
ANR	691667	Symbol	strncmp		691202						
ANR	691668	Symbol	TDB		691202						
ANR	691669	Symbol	r_type_func_args_count		691202						
ANR	691670	Symbol	r_anal_cc_func		691202						
ANR	691671	Symbol	arg		691202						
ANR	691672	Symbol	r_anal_cc_arg		691202						
ANR	691673	Symbol	arg -> cc_source		691202						
ANR	691674	Symbol	fcn_name		691202						
ANR	691675	Symbol	sp		691202						
ANR	691676	Symbol	* * core		691202						
ANR	691677	Symbol	key		691202						
ANR	691678	Symbol	cc		691202						
ANR	691679	Symbol	strcmp		691202						
ANR	691680	Symbol	core -> anal -> bits		691202						
ANR	691681	Symbol	NULL		691202						
ANR	691682	Symbol	r_list_newf		691202						
ANR	691683	Symbol	src		691202						
ANR	691684	Symbol	i		691202						
ANR	691685	Symbol	list		691202						
ANR	691686	Symbol	nargs		691202						
ANR	691687	Symbol	cs		691202						
ANR	691688	Symbol	r_anal_cc_default		691202						
ANR	691689	Symbol	core		691202						
ANR	691690	Symbol	R_NEW0		691202						
ANR	691691	Symbol	* core -> anal		691202						
ANR	691692	Symbol	R_REG_NAME_SP		691202						
ANR	691693	Symbol	r_reg_get_name		691202						
ANR	691694	Symbol	spv		691202						
ANR	691695	Symbol	resolve_fcn_name		691202						
ANR	691696	Symbol	strdup		691202						
ANR	691697	Symbol	r_reg_getv		691202						
ANR	691698	Symbol	s_width		691202						
ANR	691699	Symbol	* arg		691202						
