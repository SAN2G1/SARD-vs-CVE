command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5556087	File	data/converged/CVE-2019-16718~_radare2/parse_x86_pseudo.c								
ANR	5556088	Function	replace	15:0:415:4912							
ANR	5556089	FunctionDef	"replace (int argc , char * argv [ ] , char * newstr)"		5556088	0					
ANR	5556090	CompoundStatement		15:58:473:4912	5556088	0					
ANR	5556091	Statement	define	16:1:476:481	5556088	0	True				
ANR	5556092	Statement	MAXPSEUDOOPS	16:8:483:494	5556088	1	True				
ANR	5556093	Statement	10	16:21:496:497	5556088	2	True				
ANR	5556094	IdentifierDeclStatement	"int i , j , k , d ;"	17:1:500:514	5556088	3	True				
ANR	5556095	IdentifierDecl	i		5556088	0					
ANR	5556096	IdentifierDeclType	int		5556088	0					
ANR	5556097	Identifier	i		5556088	1					
ANR	5556098	IdentifierDecl	j		5556088	1					
ANR	5556099	IdentifierDeclType	int		5556088	0					
ANR	5556100	Identifier	j		5556088	1					
ANR	5556101	IdentifierDecl	k		5556088	2					
ANR	5556102	IdentifierDeclType	int		5556088	0					
ANR	5556103	Identifier	k		5556088	1					
ANR	5556104	IdentifierDecl	d		5556088	3					
ANR	5556105	IdentifierDeclType	int		5556088	0					
ANR	5556106	Identifier	d		5556088	1					
ANR	5556107	IdentifierDeclStatement	char ch ;	18:1:517:524	5556088	4	True				
ANR	5556108	IdentifierDecl	ch		5556088	0					
ANR	5556109	IdentifierDeclType	char		5556088	0					
ANR	5556110	Identifier	ch		5556088	1					
ANR	5556111	ClassDefStatement	"struct { char * op ; char * str ; int args [ MAXPSEUDOOPS ] ; } ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } } ;"	19:1:527:3873	5556088	5	True				
ANR	5556112	IdentifierDecl	"ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } }"		5556088	0					
ANR	5556113	IdentifierDeclType	 [ ]		5556088	0					
ANR	5556114	Identifier	ops		5556088	1					
ANR	5556115	AssignmentExpression	"ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } }"		5556088	2		=			
ANR	5556116	Identifier	ops		5556088	0					
ANR	5556117	InitializerList	"""adc"""		5556088	1					
ANR	5556118	InitializerList	"""adc"""		5556088	0					
ANR	5556119	PrimaryExpression	"""adc"""		5556088	0					
ANR	5556120	PrimaryExpression	"""# += #"""		5556088	1					
ANR	5556121	InitializerList	1		5556088	2					
ANR	5556122	PrimaryExpression	1		5556088	0					
ANR	5556123	PrimaryExpression	2		5556088	1					
ANR	5556124	InitializerList	"""add"""		5556088	1					
ANR	5556125	PrimaryExpression	"""add"""		5556088	0					
ANR	5556126	PrimaryExpression	"""# += #"""		5556088	1					
ANR	5556127	InitializerList	1		5556088	2					
ANR	5556128	PrimaryExpression	1		5556088	0					
ANR	5556129	PrimaryExpression	2		5556088	1					
ANR	5556130	InitializerList	"""and"""		5556088	2					
ANR	5556131	PrimaryExpression	"""and"""		5556088	0					
ANR	5556132	PrimaryExpression	"""# &= #"""		5556088	1					
ANR	5556133	InitializerList	1		5556088	2					
ANR	5556134	PrimaryExpression	1		5556088	0					
ANR	5556135	PrimaryExpression	2		5556088	1					
ANR	5556136	InitializerList	"""call"""		5556088	3					
ANR	5556137	PrimaryExpression	"""call"""		5556088	0					
ANR	5556138	PrimaryExpression	"""# ()"""		5556088	1					
ANR	5556139	InitializerList	1		5556088	2					
ANR	5556140	PrimaryExpression	1		5556088	0					
ANR	5556141	InitializerList	"""cmove"""		5556088	4					
ANR	5556142	PrimaryExpression	"""cmove"""		5556088	0					
ANR	5556143	PrimaryExpression	"""if (!var) # = #"""		5556088	1					
ANR	5556144	InitializerList	1		5556088	2					
ANR	5556145	PrimaryExpression	1		5556088	0					
ANR	5556146	PrimaryExpression	2		5556088	1					
ANR	5556147	InitializerList	"""cmovl"""		5556088	5					
ANR	5556148	PrimaryExpression	"""cmovl"""		5556088	0					
ANR	5556149	PrimaryExpression	"""if (var < 0) # = #"""		5556088	1					
ANR	5556150	InitializerList	1		5556088	2					
ANR	5556151	PrimaryExpression	1		5556088	0					
ANR	5556152	PrimaryExpression	2		5556088	1					
ANR	5556153	InitializerList	"""cmp"""		5556088	6					
ANR	5556154	PrimaryExpression	"""cmp"""		5556088	0					
ANR	5556155	PrimaryExpression	"""var = # - #"""		5556088	1					
ANR	5556156	InitializerList	1		5556088	2					
ANR	5556157	PrimaryExpression	1		5556088	0					
ANR	5556158	PrimaryExpression	2		5556088	1					
ANR	5556159	InitializerList	"""cmpsq"""		5556088	7					
ANR	5556160	PrimaryExpression	"""cmpsq"""		5556088	0					
ANR	5556161	PrimaryExpression	"""var = # - #"""		5556088	1					
ANR	5556162	InitializerList	1		5556088	2					
ANR	5556163	PrimaryExpression	1		5556088	0					
ANR	5556164	PrimaryExpression	2		5556088	1					
ANR	5556165	InitializerList	"""cmpsb"""		5556088	8					
ANR	5556166	PrimaryExpression	"""cmpsb"""		5556088	0					
ANR	5556167	PrimaryExpression	"""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"""		5556088	1					
ANR	5556168	InitializerList	0		5556088	2					
ANR	5556169	PrimaryExpression	0		5556088	0					
ANR	5556170	InitializerList	"""cmpsw"""		5556088	9					
ANR	5556171	PrimaryExpression	"""cmpsw"""		5556088	0					
ANR	5556172	PrimaryExpression	"""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"""		5556088	1					
ANR	5556173	InitializerList	0		5556088	2					
ANR	5556174	PrimaryExpression	0		5556088	0					
ANR	5556175	InitializerList	"""dec"""		5556088	10					
ANR	5556176	PrimaryExpression	"""dec"""		5556088	0					
ANR	5556177	PrimaryExpression	"""#--"""		5556088	1					
ANR	5556178	InitializerList	1		5556088	2					
ANR	5556179	PrimaryExpression	1		5556088	0					
ANR	5556180	InitializerList	"""div"""		5556088	11					
ANR	5556181	PrimaryExpression	"""div"""		5556088	0					
ANR	5556182	PrimaryExpression	"""# /= #"""		5556088	1					
ANR	5556183	InitializerList	1		5556088	2					
ANR	5556184	PrimaryExpression	1		5556088	0					
ANR	5556185	PrimaryExpression	2		5556088	1					
ANR	5556186	InitializerList	"""fabs"""		5556088	12					
ANR	5556187	PrimaryExpression	"""fabs"""		5556088	0					
ANR	5556188	PrimaryExpression	"""abs(#)"""		5556088	1					
ANR	5556189	InitializerList	1		5556088	2					
ANR	5556190	PrimaryExpression	1		5556088	0					
ANR	5556191	InitializerList	"""fadd"""		5556088	13					
ANR	5556192	PrimaryExpression	"""fadd"""		5556088	0					
ANR	5556193	PrimaryExpression	"""# = # + #"""		5556088	1					
ANR	5556194	InitializerList	1		5556088	2					
ANR	5556195	PrimaryExpression	1		5556088	0					
ANR	5556196	PrimaryExpression	1		5556088	1					
ANR	5556197	PrimaryExpression	2		5556088	2					
ANR	5556198	InitializerList	"""fcomp"""		5556088	14					
ANR	5556199	PrimaryExpression	"""fcomp"""		5556088	0					
ANR	5556200	PrimaryExpression	"""var = # - #"""		5556088	1					
ANR	5556201	InitializerList	1		5556088	2					
ANR	5556202	PrimaryExpression	1		5556088	0					
ANR	5556203	PrimaryExpression	2		5556088	1					
ANR	5556204	InitializerList	"""fcos"""		5556088	15					
ANR	5556205	PrimaryExpression	"""fcos"""		5556088	0					
ANR	5556206	PrimaryExpression	"""# = cos(#)"""		5556088	1					
ANR	5556207	InitializerList	1		5556088	2					
ANR	5556208	PrimaryExpression	1		5556088	0					
ANR	5556209	PrimaryExpression	1		5556088	1					
ANR	5556210	InitializerList	"""fdiv"""		5556088	16					
ANR	5556211	PrimaryExpression	"""fdiv"""		5556088	0					
ANR	5556212	PrimaryExpression	"""# = # / #"""		5556088	1					
ANR	5556213	InitializerList	1		5556088	2					
ANR	5556214	PrimaryExpression	1		5556088	0					
ANR	5556215	PrimaryExpression	1		5556088	1					
ANR	5556216	PrimaryExpression	2		5556088	2					
ANR	5556217	InitializerList	"""fiadd"""		5556088	17					
ANR	5556218	PrimaryExpression	"""fiadd"""		5556088	0					
ANR	5556219	PrimaryExpression	"""# = # / #"""		5556088	1					
ANR	5556220	InitializerList	1		5556088	2					
ANR	5556221	PrimaryExpression	1		5556088	0					
ANR	5556222	PrimaryExpression	1		5556088	1					
ANR	5556223	PrimaryExpression	2		5556088	2					
ANR	5556224	InitializerList	"""ficom"""		5556088	18					
ANR	5556225	PrimaryExpression	"""ficom"""		5556088	0					
ANR	5556226	PrimaryExpression	"""var = # - #"""		5556088	1					
ANR	5556227	InitializerList	1		5556088	2					
ANR	5556228	PrimaryExpression	1		5556088	0					
ANR	5556229	PrimaryExpression	2		5556088	1					
ANR	5556230	InitializerList	"""fidiv"""		5556088	19					
ANR	5556231	PrimaryExpression	"""fidiv"""		5556088	0					
ANR	5556232	PrimaryExpression	"""# = # / #"""		5556088	1					
ANR	5556233	InitializerList	1		5556088	2					
ANR	5556234	PrimaryExpression	1		5556088	0					
ANR	5556235	PrimaryExpression	1		5556088	1					
ANR	5556236	PrimaryExpression	2		5556088	2					
ANR	5556237	InitializerList	"""fidiv"""		5556088	20					
ANR	5556238	PrimaryExpression	"""fidiv"""		5556088	0					
ANR	5556239	PrimaryExpression	"""# = # * #"""		5556088	1					
ANR	5556240	InitializerList	1		5556088	2					
ANR	5556241	PrimaryExpression	1		5556088	0					
ANR	5556242	PrimaryExpression	1		5556088	1					
ANR	5556243	PrimaryExpression	2		5556088	2					
ANR	5556244	InitializerList	"""fisub"""		5556088	21					
ANR	5556245	PrimaryExpression	"""fisub"""		5556088	0					
ANR	5556246	PrimaryExpression	"""# = # - #"""		5556088	1					
ANR	5556247	InitializerList	1		5556088	2					
ANR	5556248	PrimaryExpression	1		5556088	0					
ANR	5556249	PrimaryExpression	1		5556088	1					
ANR	5556250	PrimaryExpression	2		5556088	2					
ANR	5556251	InitializerList	"""fnul"""		5556088	22					
ANR	5556252	PrimaryExpression	"""fnul"""		5556088	0					
ANR	5556253	PrimaryExpression	"""# = # * #"""		5556088	1					
ANR	5556254	InitializerList	1		5556088	2					
ANR	5556255	PrimaryExpression	1		5556088	0					
ANR	5556256	PrimaryExpression	1		5556088	1					
ANR	5556257	PrimaryExpression	2		5556088	2					
ANR	5556258	InitializerList	"""fnop"""		5556088	23					
ANR	5556259	PrimaryExpression	"""fnop"""		5556088	0					
ANR	5556260	PrimaryExpression	""" """		5556088	1					
ANR	5556261	InitializerList	0		5556088	2					
ANR	5556262	PrimaryExpression	0		5556088	0					
ANR	5556263	InitializerList	"""frndint"""		5556088	24					
ANR	5556264	PrimaryExpression	"""frndint"""		5556088	0					
ANR	5556265	PrimaryExpression	"""# = (int) #"""		5556088	1					
ANR	5556266	InitializerList	1		5556088	2					
ANR	5556267	PrimaryExpression	1		5556088	0					
ANR	5556268	PrimaryExpression	1		5556088	1					
ANR	5556269	InitializerList	"""fsin"""		5556088	25					
ANR	5556270	PrimaryExpression	"""fsin"""		5556088	0					
ANR	5556271	PrimaryExpression	"""# = sin(#)"""		5556088	1					
ANR	5556272	InitializerList	1		5556088	2					
ANR	5556273	PrimaryExpression	1		5556088	0					
ANR	5556274	PrimaryExpression	1		5556088	1					
ANR	5556275	InitializerList	"""fsqrt"""		5556088	26					
ANR	5556276	PrimaryExpression	"""fsqrt"""		5556088	0					
ANR	5556277	PrimaryExpression	"""# = sqrt(#)"""		5556088	1					
ANR	5556278	InitializerList	1		5556088	2					
ANR	5556279	PrimaryExpression	1		5556088	0					
ANR	5556280	PrimaryExpression	1		5556088	1					
ANR	5556281	InitializerList	"""fsub"""		5556088	27					
ANR	5556282	PrimaryExpression	"""fsub"""		5556088	0					
ANR	5556283	PrimaryExpression	"""# = # - #"""		5556088	1					
ANR	5556284	InitializerList	1		5556088	2					
ANR	5556285	PrimaryExpression	1		5556088	0					
ANR	5556286	PrimaryExpression	1		5556088	1					
ANR	5556287	PrimaryExpression	2		5556088	2					
ANR	5556288	InitializerList	"""fxch"""		5556088	28					
ANR	5556289	PrimaryExpression	"""fxch"""		5556088	0					
ANR	5556290	PrimaryExpression	"""#,# = #,#"""		5556088	1					
ANR	5556291	InitializerList	1		5556088	2					
ANR	5556292	PrimaryExpression	1		5556088	0					
ANR	5556293	PrimaryExpression	2		5556088	1					
ANR	5556294	PrimaryExpression	2		5556088	2					
ANR	5556295	PrimaryExpression	1		5556088	3					
ANR	5556296	InitializerList	"""idiv"""		5556088	29					
ANR	5556297	PrimaryExpression	"""idiv"""		5556088	0					
ANR	5556298	PrimaryExpression	"""# /= #"""		5556088	1					
ANR	5556299	InitializerList	1		5556088	2					
ANR	5556300	PrimaryExpression	1		5556088	0					
ANR	5556301	PrimaryExpression	2		5556088	1					
ANR	5556302	InitializerList	"""imul"""		5556088	30					
ANR	5556303	PrimaryExpression	"""imul"""		5556088	0					
ANR	5556304	PrimaryExpression	"""# = # * #"""		5556088	1					
ANR	5556305	InitializerList	1		5556088	2					
ANR	5556306	PrimaryExpression	1		5556088	0					
ANR	5556307	PrimaryExpression	2		5556088	1					
ANR	5556308	PrimaryExpression	3		5556088	2					
ANR	5556309	InitializerList	"""in"""		5556088	31					
ANR	5556310	PrimaryExpression	"""in"""		5556088	0					
ANR	5556311	PrimaryExpression	"""# = io[#]"""		5556088	1					
ANR	5556312	InitializerList	1		5556088	2					
ANR	5556313	PrimaryExpression	1		5556088	0					
ANR	5556314	PrimaryExpression	2		5556088	1					
ANR	5556315	InitializerList	"""inc"""		5556088	32					
ANR	5556316	PrimaryExpression	"""inc"""		5556088	0					
ANR	5556317	PrimaryExpression	"""#++"""		5556088	1					
ANR	5556318	InitializerList	1		5556088	2					
ANR	5556319	PrimaryExpression	1		5556088	0					
ANR	5556320	InitializerList	"""ja"""		5556088	33					
ANR	5556321	PrimaryExpression	"""ja"""		5556088	0					
ANR	5556322	PrimaryExpression	"""if (((unsigned) var) > 0) goto #"""		5556088	1					
ANR	5556323	InitializerList	1		5556088	2					
ANR	5556324	PrimaryExpression	1		5556088	0					
ANR	5556325	InitializerList	"""jb"""		5556088	34					
ANR	5556326	PrimaryExpression	"""jb"""		5556088	0					
ANR	5556327	PrimaryExpression	"""if (((unsigned) var) < 0) goto #"""		5556088	1					
ANR	5556328	InitializerList	1		5556088	2					
ANR	5556329	PrimaryExpression	1		5556088	0					
ANR	5556330	InitializerList	"""jbe"""		5556088	35					
ANR	5556331	PrimaryExpression	"""jbe"""		5556088	0					
ANR	5556332	PrimaryExpression	"""if (((unsigned) var) <= 0) goto #"""		5556088	1					
ANR	5556333	InitializerList	1		5556088	2					
ANR	5556334	PrimaryExpression	1		5556088	0					
ANR	5556335	InitializerList	"""je"""		5556088	36					
ANR	5556336	PrimaryExpression	"""je"""		5556088	0					
ANR	5556337	PrimaryExpression	"""if (!var) goto #"""		5556088	1					
ANR	5556338	InitializerList	1		5556088	2					
ANR	5556339	PrimaryExpression	1		5556088	0					
ANR	5556340	InitializerList	"""jg"""		5556088	37					
ANR	5556341	PrimaryExpression	"""jg"""		5556088	0					
ANR	5556342	PrimaryExpression	"""if (var > 0) goto #"""		5556088	1					
ANR	5556343	InitializerList	1		5556088	2					
ANR	5556344	PrimaryExpression	1		5556088	0					
ANR	5556345	InitializerList	"""jge"""		5556088	38					
ANR	5556346	PrimaryExpression	"""jge"""		5556088	0					
ANR	5556347	PrimaryExpression	"""if (var >= 0) goto #"""		5556088	1					
ANR	5556348	InitializerList	1		5556088	2					
ANR	5556349	PrimaryExpression	1		5556088	0					
ANR	5556350	InitializerList	"""jle"""		5556088	39					
ANR	5556351	PrimaryExpression	"""jle"""		5556088	0					
ANR	5556352	PrimaryExpression	"""if (var <= 0) goto #"""		5556088	1					
ANR	5556353	InitializerList	1		5556088	2					
ANR	5556354	PrimaryExpression	1		5556088	0					
ANR	5556355	InitializerList	"""jmp"""		5556088	40					
ANR	5556356	PrimaryExpression	"""jmp"""		5556088	0					
ANR	5556357	PrimaryExpression	"""goto #"""		5556088	1					
ANR	5556358	InitializerList	1		5556088	2					
ANR	5556359	PrimaryExpression	1		5556088	0					
ANR	5556360	InitializerList	"""jne"""		5556088	41					
ANR	5556361	PrimaryExpression	"""jne"""		5556088	0					
ANR	5556362	PrimaryExpression	"""if (var) goto #"""		5556088	1					
ANR	5556363	InitializerList	1		5556088	2					
ANR	5556364	PrimaryExpression	1		5556088	0					
ANR	5556365	InitializerList	"""lea"""		5556088	42					
ANR	5556366	PrimaryExpression	"""lea"""		5556088	0					
ANR	5556367	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556368	InitializerList	1		5556088	2					
ANR	5556369	PrimaryExpression	1		5556088	0					
ANR	5556370	PrimaryExpression	2		5556088	1					
ANR	5556371	InitializerList	"""mov"""		5556088	43					
ANR	5556372	PrimaryExpression	"""mov"""		5556088	0					
ANR	5556373	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556374	InitializerList	1		5556088	2					
ANR	5556375	PrimaryExpression	1		5556088	0					
ANR	5556376	PrimaryExpression	2		5556088	1					
ANR	5556377	InitializerList	"""movq"""		5556088	44					
ANR	5556378	PrimaryExpression	"""movq"""		5556088	0					
ANR	5556379	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556380	InitializerList	1		5556088	2					
ANR	5556381	PrimaryExpression	1		5556088	0					
ANR	5556382	PrimaryExpression	2		5556088	1					
ANR	5556383	InitializerList	"""movaps"""		5556088	45					
ANR	5556384	PrimaryExpression	"""movaps"""		5556088	0					
ANR	5556385	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556386	InitializerList	1		5556088	2					
ANR	5556387	PrimaryExpression	1		5556088	0					
ANR	5556388	PrimaryExpression	2		5556088	1					
ANR	5556389	InitializerList	"""movups"""		5556088	46					
ANR	5556390	PrimaryExpression	"""movups"""		5556088	0					
ANR	5556391	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556392	InitializerList	1		5556088	2					
ANR	5556393	PrimaryExpression	1		5556088	0					
ANR	5556394	PrimaryExpression	2		5556088	1					
ANR	5556395	InitializerList	"""movsd"""		5556088	47					
ANR	5556396	PrimaryExpression	"""movsd"""		5556088	0					
ANR	5556397	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556398	InitializerList	1		5556088	2					
ANR	5556399	PrimaryExpression	1		5556088	0					
ANR	5556400	PrimaryExpression	2		5556088	1					
ANR	5556401	InitializerList	"""movsx"""		5556088	48					
ANR	5556402	PrimaryExpression	"""movsx"""		5556088	0					
ANR	5556403	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556404	InitializerList	1		5556088	2					
ANR	5556405	PrimaryExpression	1		5556088	0					
ANR	5556406	PrimaryExpression	2		5556088	1					
ANR	5556407	InitializerList	"""movsxd"""		5556088	49					
ANR	5556408	PrimaryExpression	"""movsxd"""		5556088	0					
ANR	5556409	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556410	InitializerList	1		5556088	2					
ANR	5556411	PrimaryExpression	1		5556088	0					
ANR	5556412	PrimaryExpression	2		5556088	1					
ANR	5556413	InitializerList	"""movzx"""		5556088	50					
ANR	5556414	PrimaryExpression	"""movzx"""		5556088	0					
ANR	5556415	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556416	InitializerList	1		5556088	2					
ANR	5556417	PrimaryExpression	1		5556088	0					
ANR	5556418	PrimaryExpression	2		5556088	1					
ANR	5556419	InitializerList	"""movntdq"""		5556088	51					
ANR	5556420	PrimaryExpression	"""movntdq"""		5556088	0					
ANR	5556421	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556422	InitializerList	1		5556088	2					
ANR	5556423	PrimaryExpression	1		5556088	0					
ANR	5556424	PrimaryExpression	2		5556088	1					
ANR	5556425	InitializerList	"""movnti"""		5556088	52					
ANR	5556426	PrimaryExpression	"""movnti"""		5556088	0					
ANR	5556427	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556428	InitializerList	1		5556088	2					
ANR	5556429	PrimaryExpression	1		5556088	0					
ANR	5556430	PrimaryExpression	2		5556088	1					
ANR	5556431	InitializerList	"""movntpd"""		5556088	53					
ANR	5556432	PrimaryExpression	"""movntpd"""		5556088	0					
ANR	5556433	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556434	InitializerList	1		5556088	2					
ANR	5556435	PrimaryExpression	1		5556088	0					
ANR	5556436	PrimaryExpression	2		5556088	1					
ANR	5556437	InitializerList	"""pcmpeqb"""		5556088	54					
ANR	5556438	PrimaryExpression	"""pcmpeqb"""		5556088	0					
ANR	5556439	PrimaryExpression	"""# == #"""		5556088	1					
ANR	5556440	InitializerList	1		5556088	2					
ANR	5556441	PrimaryExpression	1		5556088	0					
ANR	5556442	PrimaryExpression	2		5556088	1					
ANR	5556443	InitializerList	"""movdqu"""		5556088	55					
ANR	5556444	PrimaryExpression	"""movdqu"""		5556088	0					
ANR	5556445	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556446	InitializerList	1		5556088	2					
ANR	5556447	PrimaryExpression	1		5556088	0					
ANR	5556448	PrimaryExpression	2		5556088	1					
ANR	5556449	InitializerList	"""movdqa"""		5556088	56					
ANR	5556450	PrimaryExpression	"""movdqa"""		5556088	0					
ANR	5556451	PrimaryExpression	"""# = #"""		5556088	1					
ANR	5556452	InitializerList	1		5556088	2					
ANR	5556453	PrimaryExpression	1		5556088	0					
ANR	5556454	PrimaryExpression	2		5556088	1					
ANR	5556455	InitializerList	"""pextrb"""		5556088	57					
ANR	5556456	PrimaryExpression	"""pextrb"""		5556088	0					
ANR	5556457	PrimaryExpression	"""# = (byte) # [#]"""		5556088	1					
ANR	5556458	InitializerList	1		5556088	2					
ANR	5556459	PrimaryExpression	1		5556088	0					
ANR	5556460	PrimaryExpression	2		5556088	1					
ANR	5556461	PrimaryExpression	3		5556088	2					
ANR	5556462	InitializerList	"""palignr"""		5556088	58					
ANR	5556463	PrimaryExpression	"""palignr"""		5556088	0					
ANR	5556464	PrimaryExpression	"""# = # align #"""		5556088	1					
ANR	5556465	InitializerList	1		5556088	2					
ANR	5556466	PrimaryExpression	1		5556088	0					
ANR	5556467	PrimaryExpression	2		5556088	1					
ANR	5556468	PrimaryExpression	3		5556088	2					
ANR	5556469	InitializerList	"""pxor"""		5556088	59					
ANR	5556470	PrimaryExpression	"""pxor"""		5556088	0					
ANR	5556471	PrimaryExpression	"""# ^= #"""		5556088	1					
ANR	5556472	InitializerList	1		5556088	2					
ANR	5556473	PrimaryExpression	1		5556088	0					
ANR	5556474	PrimaryExpression	2		5556088	1					
ANR	5556475	InitializerList	"""xorps"""		5556088	60					
ANR	5556476	PrimaryExpression	"""xorps"""		5556088	0					
ANR	5556477	PrimaryExpression	"""# ^= #"""		5556088	1					
ANR	5556478	InitializerList	1		5556088	2					
ANR	5556479	PrimaryExpression	1		5556088	0					
ANR	5556480	PrimaryExpression	2		5556088	1					
ANR	5556481	InitializerList	"""mul"""		5556088	61					
ANR	5556482	PrimaryExpression	"""mul"""		5556088	0					
ANR	5556483	PrimaryExpression	"""# = # * #"""		5556088	1					
ANR	5556484	InitializerList	1		5556088	2					
ANR	5556485	PrimaryExpression	1		5556088	0					
ANR	5556486	PrimaryExpression	2		5556088	1					
ANR	5556487	PrimaryExpression	3		5556088	2					
ANR	5556488	InitializerList	"""mulss"""		5556088	62					
ANR	5556489	PrimaryExpression	"""mulss"""		5556088	0					
ANR	5556490	PrimaryExpression	"""# = # * #"""		5556088	1					
ANR	5556491	InitializerList	1		5556088	2					
ANR	5556492	PrimaryExpression	1		5556088	0					
ANR	5556493	PrimaryExpression	2		5556088	1					
ANR	5556494	PrimaryExpression	3		5556088	2					
ANR	5556495	InitializerList	"""neg"""		5556088	63					
ANR	5556496	PrimaryExpression	"""neg"""		5556088	0					
ANR	5556497	PrimaryExpression	"""# ~= #"""		5556088	1					
ANR	5556498	InitializerList	1		5556088	2					
ANR	5556499	PrimaryExpression	1		5556088	0					
ANR	5556500	PrimaryExpression	1		5556088	1					
ANR	5556501	InitializerList	"""nop"""		5556088	64					
ANR	5556502	PrimaryExpression	"""nop"""		5556088	0					
ANR	5556503	PrimaryExpression	""""""		5556088	1					
ANR	5556504	InitializerList	0		5556088	2					
ANR	5556505	PrimaryExpression	0		5556088	0					
ANR	5556506	InitializerList	"""not"""		5556088	65					
ANR	5556507	PrimaryExpression	"""not"""		5556088	0					
ANR	5556508	PrimaryExpression	"""# = !#"""		5556088	1					
ANR	5556509	InitializerList	1		5556088	2					
ANR	5556510	PrimaryExpression	1		5556088	0					
ANR	5556511	PrimaryExpression	1		5556088	1					
ANR	5556512	InitializerList	"""or"""		5556088	66					
ANR	5556513	PrimaryExpression	"""or"""		5556088	0					
ANR	5556514	PrimaryExpression	"""# |= #"""		5556088	1					
ANR	5556515	InitializerList	1		5556088	2					
ANR	5556516	PrimaryExpression	1		5556088	0					
ANR	5556517	PrimaryExpression	2		5556088	1					
ANR	5556518	InitializerList	"""out"""		5556088	67					
ANR	5556519	PrimaryExpression	"""out"""		5556088	0					
ANR	5556520	PrimaryExpression	"""io[#] = #"""		5556088	1					
ANR	5556521	InitializerList	1		5556088	2					
ANR	5556522	PrimaryExpression	1		5556088	0					
ANR	5556523	PrimaryExpression	2		5556088	1					
ANR	5556524	InitializerList	"""pop"""		5556088	68					
ANR	5556525	PrimaryExpression	"""pop"""		5556088	0					
ANR	5556526	PrimaryExpression	"""pop #"""		5556088	1					
ANR	5556527	InitializerList	1		5556088	2					
ANR	5556528	PrimaryExpression	1		5556088	0					
ANR	5556529	InitializerList	"""push"""		5556088	69					
ANR	5556530	PrimaryExpression	"""push"""		5556088	0					
ANR	5556531	PrimaryExpression	"""push #"""		5556088	1					
ANR	5556532	InitializerList	1		5556088	2					
ANR	5556533	PrimaryExpression	1		5556088	0					
ANR	5556534	InitializerList	"""ret"""		5556088	70					
ANR	5556535	PrimaryExpression	"""ret"""		5556088	0					
ANR	5556536	PrimaryExpression	"""return"""		5556088	1					
ANR	5556537	InitializerList	0		5556088	2					
ANR	5556538	PrimaryExpression	0		5556088	0					
ANR	5556539	InitializerList	"""sal"""		5556088	71					
ANR	5556540	PrimaryExpression	"""sal"""		5556088	0					
ANR	5556541	PrimaryExpression	"""# <<= #"""		5556088	1					
ANR	5556542	InitializerList	1		5556088	2					
ANR	5556543	PrimaryExpression	1		5556088	0					
ANR	5556544	PrimaryExpression	2		5556088	1					
ANR	5556545	InitializerList	"""sar"""		5556088	72					
ANR	5556546	PrimaryExpression	"""sar"""		5556088	0					
ANR	5556547	PrimaryExpression	"""# >>= #"""		5556088	1					
ANR	5556548	InitializerList	1		5556088	2					
ANR	5556549	PrimaryExpression	1		5556088	0					
ANR	5556550	PrimaryExpression	2		5556088	1					
ANR	5556551	InitializerList	"""sete"""		5556088	73					
ANR	5556552	PrimaryExpression	"""sete"""		5556088	0					
ANR	5556553	PrimaryExpression	"""# = e"""		5556088	1					
ANR	5556554	InitializerList	1		5556088	2					
ANR	5556555	PrimaryExpression	1		5556088	0					
ANR	5556556	InitializerList	"""setne"""		5556088	74					
ANR	5556557	PrimaryExpression	"""setne"""		5556088	0					
ANR	5556558	PrimaryExpression	"""# = ne"""		5556088	1					
ANR	5556559	InitializerList	1		5556088	2					
ANR	5556560	PrimaryExpression	1		5556088	0					
ANR	5556561	InitializerList	"""shl"""		5556088	75					
ANR	5556562	PrimaryExpression	"""shl"""		5556088	0					
ANR	5556563	PrimaryExpression	"""# <<<= #"""		5556088	1					
ANR	5556564	InitializerList	1		5556088	2					
ANR	5556565	PrimaryExpression	1		5556088	0					
ANR	5556566	PrimaryExpression	2		5556088	1					
ANR	5556567	InitializerList	"""shld"""		5556088	76					
ANR	5556568	PrimaryExpression	"""shld"""		5556088	0					
ANR	5556569	PrimaryExpression	"""# <<<= #"""		5556088	1					
ANR	5556570	InitializerList	1		5556088	2					
ANR	5556571	PrimaryExpression	1		5556088	0					
ANR	5556572	PrimaryExpression	2		5556088	1					
ANR	5556573	InitializerList	"""sbb"""		5556088	77					
ANR	5556574	PrimaryExpression	"""sbb"""		5556088	0					
ANR	5556575	PrimaryExpression	"""# = # - #"""		5556088	1					
ANR	5556576	InitializerList	1		5556088	2					
ANR	5556577	PrimaryExpression	1		5556088	0					
ANR	5556578	PrimaryExpression	1		5556088	1					
ANR	5556579	PrimaryExpression	2		5556088	2					
ANR	5556580	InitializerList	"""shr"""		5556088	78					
ANR	5556581	PrimaryExpression	"""shr"""		5556088	0					
ANR	5556582	PrimaryExpression	"""# >>>= #"""		5556088	1					
ANR	5556583	InitializerList	1		5556088	2					
ANR	5556584	PrimaryExpression	1		5556088	0					
ANR	5556585	PrimaryExpression	2		5556088	1					
ANR	5556586	InitializerList	"""shlr"""		5556088	79					
ANR	5556587	PrimaryExpression	"""shlr"""		5556088	0					
ANR	5556588	PrimaryExpression	"""# >>>= #"""		5556088	1					
ANR	5556589	InitializerList	1		5556088	2					
ANR	5556590	PrimaryExpression	1		5556088	0					
ANR	5556591	PrimaryExpression	2		5556088	1					
ANR	5556592	InitializerList	"""sub"""		5556088	80					
ANR	5556593	PrimaryExpression	"""sub"""		5556088	0					
ANR	5556594	PrimaryExpression	"""# -= #"""		5556088	1					
ANR	5556595	InitializerList	1		5556088	2					
ANR	5556596	PrimaryExpression	1		5556088	0					
ANR	5556597	PrimaryExpression	2		5556088	1					
ANR	5556598	InitializerList	"""swap"""		5556088	81					
ANR	5556599	PrimaryExpression	"""swap"""		5556088	0					
ANR	5556600	PrimaryExpression	"""var = #; # = #; # = var"""		5556088	1					
ANR	5556601	InitializerList	1		5556088	2					
ANR	5556602	PrimaryExpression	1		5556088	0					
ANR	5556603	PrimaryExpression	1		5556088	1					
ANR	5556604	PrimaryExpression	2		5556088	2					
ANR	5556605	PrimaryExpression	2		5556088	3					
ANR	5556606	InitializerList	"""test"""		5556088	82					
ANR	5556607	PrimaryExpression	"""test"""		5556088	0					
ANR	5556608	PrimaryExpression	"""var = # & #"""		5556088	1					
ANR	5556609	InitializerList	1		5556088	2					
ANR	5556610	PrimaryExpression	1		5556088	0					
ANR	5556611	PrimaryExpression	2		5556088	1					
ANR	5556612	InitializerList	"""xchg"""		5556088	83					
ANR	5556613	PrimaryExpression	"""xchg"""		5556088	0					
ANR	5556614	PrimaryExpression	"""#,# = #,#"""		5556088	1					
ANR	5556615	InitializerList	1		5556088	2					
ANR	5556616	PrimaryExpression	1		5556088	0					
ANR	5556617	PrimaryExpression	2		5556088	1					
ANR	5556618	PrimaryExpression	2		5556088	2					
ANR	5556619	PrimaryExpression	1		5556088	3					
ANR	5556620	InitializerList	"""xadd"""		5556088	84					
ANR	5556621	PrimaryExpression	"""xadd"""		5556088	0					
ANR	5556622	PrimaryExpression	"""#,# = #,#+#"""		5556088	1					
ANR	5556623	InitializerList	1		5556088	2					
ANR	5556624	PrimaryExpression	1		5556088	0					
ANR	5556625	PrimaryExpression	2		5556088	1					
ANR	5556626	PrimaryExpression	2		5556088	2					
ANR	5556627	PrimaryExpression	1		5556088	3					
ANR	5556628	PrimaryExpression	2		5556088	4					
ANR	5556629	InitializerList	"""xor"""		5556088	85					
ANR	5556630	PrimaryExpression	"""xor"""		5556088	0					
ANR	5556631	PrimaryExpression	"""# ^= #"""		5556088	1					
ANR	5556632	InitializerList	1		5556088	2					
ANR	5556633	PrimaryExpression	1		5556088	0					
ANR	5556634	PrimaryExpression	2		5556088	1					
ANR	5556635	InitializerList	NULL		5556088	86					
ANR	5556636	Identifier	NULL		5556088	0					
ANR	5556637	IfStatement	"if ( argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" ) )"		5556088	6					
ANR	5556638	Condition	"argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" )"	115:5:3881:3916	5556088	0	True				
ANR	5556639	AndExpression	"argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" )"		5556088	0		&&			
ANR	5556640	RelationalExpression	argc > 2		5556088	0		>			
ANR	5556641	Identifier	argc		5556088	0					
ANR	5556642	PrimaryExpression	2		5556088	1					
ANR	5556643	UnaryOperationExpression	"! strcmp ( argv [ 0 ] , ""xor"" )"		5556088	1					
ANR	5556644	UnaryOperator	!		5556088	0					
ANR	5556645	CallExpression	"strcmp ( argv [ 0 ] , ""xor"" )"		5556088	1					
ANR	5556646	Callee	strcmp		5556088	0					
ANR	5556647	Identifier	strcmp		5556088	0					
ANR	5556648	ArgumentList	argv [ 0 ]		5556088	1					
ANR	5556649	Argument	argv [ 0 ]		5556088	0					
ANR	5556650	ArrayIndexing	argv [ 0 ]		5556088	0					
ANR	5556651	Identifier	argv		5556088	0					
ANR	5556652	PrimaryExpression	0		5556088	1					
ANR	5556653	Argument	"""xor"""		5556088	1					
ANR	5556654	PrimaryExpression	"""xor"""		5556088	0					
ANR	5556655	CompoundStatement		101:43:3445:3445	5556088	1					
ANR	5556656	IfStatement	"if ( ! strcmp ( argv [ 1 ] , argv [ 2 ] ) )"		5556088	0					
ANR	5556657	Condition	"! strcmp ( argv [ 1 ] , argv [ 2 ] )"	116:6:3927:3952	5556088	0	True				
ANR	5556658	UnaryOperationExpression	"! strcmp ( argv [ 1 ] , argv [ 2 ] )"		5556088	0					
ANR	5556659	UnaryOperator	!		5556088	0					
ANR	5556660	CallExpression	"strcmp ( argv [ 1 ] , argv [ 2 ] )"		5556088	1					
ANR	5556661	Callee	strcmp		5556088	0					
ANR	5556662	Identifier	strcmp		5556088	0					
ANR	5556663	ArgumentList	argv [ 1 ]		5556088	1					
ANR	5556664	Argument	argv [ 1 ]		5556088	0					
ANR	5556665	ArrayIndexing	argv [ 1 ]		5556088	0					
ANR	5556666	Identifier	argv		5556088	0					
ANR	5556667	PrimaryExpression	1		5556088	1					
ANR	5556668	Argument	argv [ 2 ]		5556088	1					
ANR	5556669	ArrayIndexing	argv [ 2 ]		5556088	0					
ANR	5556670	Identifier	argv		5556088	0					
ANR	5556671	PrimaryExpression	2		5556088	1					
ANR	5556672	CompoundStatement		102:34:3481:3481	5556088	1					
ANR	5556673	ExpressionStatement	"argv [ 0 ] = ""mov"""	117:3:3960:3975	5556088	0	True				
ANR	5556674	AssignmentExpression	"argv [ 0 ] = ""mov"""		5556088	0		=			
ANR	5556675	ArrayIndexing	argv [ 0 ]		5556088	0					
ANR	5556676	Identifier	argv		5556088	0					
ANR	5556677	PrimaryExpression	0		5556088	1					
ANR	5556678	PrimaryExpression	"""mov"""		5556088	1					
ANR	5556679	ExpressionStatement	"argv [ 2 ] = ""0"""	118:3:3980:3993	5556088	1	True				
ANR	5556680	AssignmentExpression	"argv [ 2 ] = ""0"""		5556088	0		=			
ANR	5556681	ArrayIndexing	argv [ 2 ]		5556088	0					
ANR	5556682	Identifier	argv		5556088	0					
ANR	5556683	PrimaryExpression	2		5556088	1					
ANR	5556684	PrimaryExpression	"""0"""		5556088	1					
ANR	5556685	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5556088	7					
ANR	5556686	ForInit	i = 0 ;	121:6:4008:4013	5556088	0	True				
ANR	5556687	AssignmentExpression	i = 0		5556088	0		=			
ANR	5556688	Identifier	i		5556088	0					
ANR	5556689	PrimaryExpression	0		5556088	1					
ANR	5556690	Condition	ops [ i ] . op != NULL	121:13:4015:4031	5556088	1	True				
ANR	5556691	EqualityExpression	ops [ i ] . op != NULL		5556088	0		!=			
ANR	5556692	MemberAccess	ops [ i ] . op		5556088	0					
ANR	5556693	ArrayIndexing	ops [ i ]		5556088	0					
ANR	5556694	Identifier	ops		5556088	0					
ANR	5556695	Identifier	i		5556088	1					
ANR	5556696	Identifier	op		5556088	1					
ANR	5556697	Identifier	NULL		5556088	1					
ANR	5556698	PostIncDecOperationExpression	i ++	121:32:4034:4036	5556088	2	True				
ANR	5556699	Identifier	i		5556088	0					
ANR	5556700	IncDec	++		5556088	1					
ANR	5556701	CompoundStatement		107:37:3565:3565	5556088	3					
ANR	5556702	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5556088	0					
ANR	5556703	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	122:6:4047:4074	5556088	0	True				
ANR	5556704	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5556088	0					
ANR	5556705	UnaryOperator	!		5556088	0					
ANR	5556706	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5556088	1					
ANR	5556707	Callee	strcmp		5556088	0					
ANR	5556708	Identifier	strcmp		5556088	0					
ANR	5556709	ArgumentList	ops [ i ] . op		5556088	1					
ANR	5556710	Argument	ops [ i ] . op		5556088	0					
ANR	5556711	MemberAccess	ops [ i ] . op		5556088	0					
ANR	5556712	ArrayIndexing	ops [ i ]		5556088	0					
ANR	5556713	Identifier	ops		5556088	0					
ANR	5556714	Identifier	i		5556088	1					
ANR	5556715	Identifier	op		5556088	1					
ANR	5556716	Argument	argv [ 0 ]		5556088	1					
ANR	5556717	ArrayIndexing	argv [ 0 ]		5556088	0					
ANR	5556718	Identifier	argv		5556088	0					
ANR	5556719	PrimaryExpression	0		5556088	1					
ANR	5556720	CompoundStatement		108:36:3603:3603	5556088	1					
ANR	5556721	IfStatement	if ( newstr != NULL )		5556088	0					
ANR	5556722	Condition	newstr != NULL	123:7:4086:4099	5556088	0	True				
ANR	5556723	EqualityExpression	newstr != NULL		5556088	0		!=			
ANR	5556724	Identifier	newstr		5556088	0					
ANR	5556725	Identifier	NULL		5556088	1					
ANR	5556726	CompoundStatement		109:23:3628:3628	5556088	1					
ANR	5556727	ExpressionStatement	d = 0	124:4:4108:4113	5556088	0	True				
ANR	5556728	AssignmentExpression	d = 0		5556088	0		=			
ANR	5556729	Identifier	d		5556088	0					
ANR	5556730	PrimaryExpression	0		5556088	1					
ANR	5556731	ExpressionStatement	j = 0	125:4:4119:4124	5556088	1	True				
ANR	5556732	AssignmentExpression	j = 0		5556088	0		=			
ANR	5556733	Identifier	j		5556088	0					
ANR	5556734	PrimaryExpression	0		5556088	1					
ANR	5556735	ExpressionStatement	ch = ops [ i ] . str [ j ]	126:4:4130:4148	5556088	2	True				
ANR	5556736	AssignmentExpression	ch = ops [ i ] . str [ j ]		5556088	0		=			
ANR	5556737	Identifier	ch		5556088	0					
ANR	5556738	ArrayIndexing	ops [ i ] . str [ j ]		5556088	1					
ANR	5556739	MemberAccess	ops [ i ] . str		5556088	0					
ANR	5556740	ArrayIndexing	ops [ i ]		5556088	0					
ANR	5556741	Identifier	ops		5556088	0					
ANR	5556742	Identifier	i		5556088	1					
ANR	5556743	Identifier	str		5556088	1					
ANR	5556744	Identifier	j		5556088	1					
ANR	5556745	ForStatement	"for ( j = 0 , k = 0 ; ch != '\\0' ; j ++ , k ++ )"		5556088	3					
ANR	5556746	ForInit	"j = 0 , k = 0 ;"	127:9:4159:4171	5556088	0	True				
ANR	5556747	Expression	"j = 0 , k = 0"		5556088	0					
ANR	5556748	AssignmentExpression	j = 0		5556088	0		=			
ANR	5556749	Identifier	j		5556088	0					
ANR	5556750	PrimaryExpression	0		5556088	1					
ANR	5556751	AssignmentExpression	k = 0		5556088	1		=			
ANR	5556752	Identifier	k		5556088	0					
ANR	5556753	PrimaryExpression	0		5556088	1					
ANR	5556754	Condition	ch != '\\0'	127:23:4173:4182	5556088	1	True				
ANR	5556755	EqualityExpression	ch != '\\0'		5556088	0		!=			
ANR	5556756	Identifier	ch		5556088	0					
ANR	5556757	PrimaryExpression	'\\0'		5556088	1					
ANR	5556758	Expression	"j ++ , k ++"	127:35:4185:4192	5556088	2	True				
ANR	5556759	PostIncDecOperationExpression	j ++		5556088	0					
ANR	5556760	Identifier	j		5556088	0					
ANR	5556761	IncDec	++		5556088	1					
ANR	5556762	PostIncDecOperationExpression	k ++		5556088	1					
ANR	5556763	Identifier	k		5556088	0					
ANR	5556764	IncDec	++		5556088	1					
ANR	5556765	CompoundStatement		113:45:3721:3721	5556088	3					
ANR	5556766	ExpressionStatement	ch = ops [ i ] . str [ j ]	128:5:4202:4220	5556088	0	True				
ANR	5556767	AssignmentExpression	ch = ops [ i ] . str [ j ]		5556088	0		=			
ANR	5556768	Identifier	ch		5556088	0					
ANR	5556769	ArrayIndexing	ops [ i ] . str [ j ]		5556088	1					
ANR	5556770	MemberAccess	ops [ i ] . str		5556088	0					
ANR	5556771	ArrayIndexing	ops [ i ]		5556088	0					
ANR	5556772	Identifier	ops		5556088	0					
ANR	5556773	Identifier	i		5556088	1					
ANR	5556774	Identifier	str		5556088	1					
ANR	5556775	Identifier	j		5556088	1					
ANR	5556776	IfStatement	if ( ch == '#' )		5556088	1					
ANR	5556777	Condition	ch == '#'	129:9:4231:4239	5556088	0	True				
ANR	5556778	EqualityExpression	ch == '#'		5556088	0		==			
ANR	5556779	Identifier	ch		5556088	0					
ANR	5556780	PrimaryExpression	'#'		5556088	1					
ANR	5556781	CompoundStatement		126:6:4000:4025	5556088	1					
ANR	5556782	IfStatement	if ( d >= MAXPSEUDOOPS )		5556088	0					
ANR	5556783	Condition	d >= MAXPSEUDOOPS	130:10:4254:4270	5556088	0	True				
ANR	5556784	RelationalExpression	d >= MAXPSEUDOOPS		5556088	0		>=			
ANR	5556785	Identifier	d		5556088	0					
ANR	5556786	Identifier	MAXPSEUDOOPS		5556088	1					
ANR	5556787	CompoundStatement		116:29:3799:3799	5556088	1					
ANR	5556788	ContinueStatement	continue ;	132:7:4321:4329	5556088	0	True				
ANR	5556789	IdentifierDeclStatement	int idx = ops [ i ] . args [ d ] ;	134:6:4345:4369	5556088	1	True				
ANR	5556790	IdentifierDecl	idx = ops [ i ] . args [ d ]		5556088	0					
ANR	5556791	IdentifierDeclType	int		5556088	0					
ANR	5556792	Identifier	idx		5556088	1					
ANR	5556793	AssignmentExpression	idx = ops [ i ] . args [ d ]		5556088	2		=			
ANR	5556794	Identifier	idx		5556088	0					
ANR	5556795	ArrayIndexing	ops [ i ] . args [ d ]		5556088	1					
ANR	5556796	MemberAccess	ops [ i ] . args		5556088	0					
ANR	5556797	ArrayIndexing	ops [ i ]		5556088	0					
ANR	5556798	Identifier	ops		5556088	0					
ANR	5556799	Identifier	i		5556088	1					
ANR	5556800	Identifier	args		5556088	1					
ANR	5556801	Identifier	d		5556088	1					
ANR	5556802	ExpressionStatement	d ++	135:6:4377:4380	5556088	2	True				
ANR	5556803	PostIncDecOperationExpression	d ++		5556088	0					
ANR	5556804	Identifier	d		5556088	0					
ANR	5556805	IncDec	++		5556088	1					
ANR	5556806	IfStatement	if ( idx <= 0 )		5556088	3					
ANR	5556807	Condition	idx <= 0	136:10:4392:4399	5556088	0	True				
ANR	5556808	RelationalExpression	idx <= 0		5556088	0		<=			
ANR	5556809	Identifier	idx		5556088	0					
ANR	5556810	PrimaryExpression	0		5556088	1					
ANR	5556811	CompoundStatement		122:20:3928:3928	5556088	1					
ANR	5556812	ContinueStatement	continue ;	138:7:4450:4458	5556088	0	True				
ANR	5556813	IdentifierDeclStatement	const char * w = argv [ idx ] ;	140:6:4474:4499	5556088	4	True				
ANR	5556814	IdentifierDecl	* w = argv [ idx ]		5556088	0					
ANR	5556815	IdentifierDeclType	const char *		5556088	0					
ANR	5556816	Identifier	w		5556088	1					
ANR	5556817	AssignmentExpression	* w = argv [ idx ]		5556088	2		=			
ANR	5556818	Identifier	w		5556088	0					
ANR	5556819	ArrayIndexing	argv [ idx ]		5556088	1					
ANR	5556820	Identifier	argv		5556088	0					
ANR	5556821	Identifier	idx		5556088	1					
ANR	5556822	IfStatement	if ( w != NULL )		5556088	5					
ANR	5556823	Condition	w != NULL	141:10:4511:4519	5556088	0	True				
ANR	5556824	EqualityExpression	w != NULL		5556088	0		!=			
ANR	5556825	Identifier	w		5556088	0					
ANR	5556826	Identifier	NULL		5556088	1					
ANR	5556827	CompoundStatement		127:21:4048:4048	5556088	1					
ANR	5556828	ExpressionStatement	"strcpy ( newstr + k , w )"	142:7:4531:4553	5556088	0	True				
ANR	5556829	CallExpression	"strcpy ( newstr + k , w )"		5556088	0					
ANR	5556830	Callee	strcpy		5556088	0					
ANR	5556831	Identifier	strcpy		5556088	0					
ANR	5556832	ArgumentList	newstr + k		5556088	1					
ANR	5556833	Argument	newstr + k		5556088	0					
ANR	5556834	AdditiveExpression	newstr + k		5556088	0		+			
ANR	5556835	Identifier	newstr		5556088	0					
ANR	5556836	Identifier	k		5556088	1					
ANR	5556837	Argument	w		5556088	1					
ANR	5556838	Identifier	w		5556088	0					
ANR	5556839	ExpressionStatement	k += strlen ( w ) - 1	143:7:4562:4581	5556088	1	True				
ANR	5556840	AssignmentExpression	k += strlen ( w ) - 1		5556088	0		+=			
ANR	5556841	Identifier	k		5556088	0					
ANR	5556842	AdditiveExpression	strlen ( w ) - 1		5556088	1		-			
ANR	5556843	CallExpression	strlen ( w )		5556088	0					
ANR	5556844	Callee	strlen		5556088	0					
ANR	5556845	Identifier	strlen		5556088	0					
ANR	5556846	ArgumentList	w		5556088	1					
ANR	5556847	Argument	w		5556088	0					
ANR	5556848	Identifier	w		5556088	0					
ANR	5556849	PrimaryExpression	1		5556088	1					
ANR	5556850	ElseStatement	else		5556088	0					
ANR	5556851	CompoundStatement		131:12:4129:4129	5556088	0					
ANR	5556852	ExpressionStatement	newstr [ k ] = ch	146:6:4611:4625	5556088	0	True				
ANR	5556853	AssignmentExpression	newstr [ k ] = ch		5556088	0		=			
ANR	5556854	ArrayIndexing	newstr [ k ]		5556088	0					
ANR	5556855	Identifier	newstr		5556088	0					
ANR	5556856	Identifier	k		5556088	1					
ANR	5556857	Identifier	ch		5556088	1					
ANR	5556858	ExpressionStatement	newstr [ k ] = '\\0'	149:4:4644:4660	5556088	4	True				
ANR	5556859	AssignmentExpression	newstr [ k ] = '\\0'		5556088	0		=			
ANR	5556860	ArrayIndexing	newstr [ k ]		5556088	0					
ANR	5556861	Identifier	newstr		5556088	0					
ANR	5556862	Identifier	k		5556088	1					
ANR	5556863	PrimaryExpression	'\\0'		5556088	1					
ANR	5556864	ReturnStatement	return true ;	151:3:4670:4681	5556088	1	True				
ANR	5556865	Identifier	true		5556088	0					
ANR	5556866	IfStatement	if ( newstr != NULL )		5556088	8					
ANR	5556867	Condition	newstr != NULL	156:5:4722:4735	5556088	0	True				
ANR	5556868	EqualityExpression	newstr != NULL		5556088	0		!=			
ANR	5556869	Identifier	newstr		5556088	0					
ANR	5556870	Identifier	NULL		5556088	1					
ANR	5556871	CompoundStatement		142:21:4264:4264	5556088	1					
ANR	5556872	ExpressionStatement	newstr [ 0 ] = '\\0'	157:2:4742:4758	5556088	0	True				
ANR	5556873	AssignmentExpression	newstr [ 0 ] = '\\0'		5556088	0		=			
ANR	5556874	ArrayIndexing	newstr [ 0 ]		5556088	0					
ANR	5556875	Identifier	newstr		5556088	0					
ANR	5556876	PrimaryExpression	0		5556088	1					
ANR	5556877	PrimaryExpression	'\\0'		5556088	1					
ANR	5556878	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5556088	1					
ANR	5556879	ForInit	i = 0 ;	158:7:4767:4770	5556088	0	True				
ANR	5556880	AssignmentExpression	i = 0		5556088	0		=			
ANR	5556881	Identifier	i		5556088	0					
ANR	5556882	PrimaryExpression	0		5556088	1					
ANR	5556883	Condition	i < argc	158:12:4772:4777	5556088	1	True				
ANR	5556884	RelationalExpression	i < argc		5556088	0		<			
ANR	5556885	Identifier	i		5556088	0					
ANR	5556886	Identifier	argc		5556088	1					
ANR	5556887	PostIncDecOperationExpression	i ++	158:20:4780:4782	5556088	2	True				
ANR	5556888	Identifier	i		5556088	0					
ANR	5556889	IncDec	++		5556088	1					
ANR	5556890	CompoundStatement		144:25:4311:4311	5556088	3					
ANR	5556891	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	159:3:4790:4814	5556088	0	True				
ANR	5556892	CallExpression	"strcat ( newstr , argv [ i ] )"		5556088	0					
ANR	5556893	Callee	strcat		5556088	0					
ANR	5556894	Identifier	strcat		5556088	0					
ANR	5556895	ArgumentList	newstr		5556088	1					
ANR	5556896	Argument	newstr		5556088	0					
ANR	5556897	Identifier	newstr		5556088	0					
ANR	5556898	Argument	argv [ i ]		5556088	1					
ANR	5556899	ArrayIndexing	argv [ i ]		5556088	0					
ANR	5556900	Identifier	argv		5556088	0					
ANR	5556901	Identifier	i		5556088	1					
ANR	5556902	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"	160:3:4819:4868	5556088	1	True				
ANR	5556903	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"		5556088	0					
ANR	5556904	Callee	strcat		5556088	0					
ANR	5556905	Identifier	strcat		5556088	0					
ANR	5556906	ArgumentList	newstr		5556088	1					
ANR	5556907	Argument	newstr		5556088	0					
ANR	5556908	Identifier	newstr		5556088	0					
ANR	5556909	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5556088	1					
ANR	5556910	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5556088	0					
ANR	5556911	Condition	i == 0 || i == argc - 1		5556088	0					
ANR	5556912	OrExpression	i == 0 || i == argc - 1		5556088	0		||			
ANR	5556913	EqualityExpression	i == 0		5556088	0		==			
ANR	5556914	Identifier	i		5556088	0					
ANR	5556915	PrimaryExpression	0		5556088	1					
ANR	5556916	EqualityExpression	i == argc - 1		5556088	1		==			
ANR	5556917	Identifier	i		5556088	0					
ANR	5556918	AdditiveExpression	argc - 1		5556088	1		-			
ANR	5556919	Identifier	argc		5556088	0					
ANR	5556920	PrimaryExpression	1		5556088	1					
ANR	5556921	PrimaryExpression	""" """		5556088	1					
ANR	5556922	PrimaryExpression	""","""		5556088	2					
ANR	5556923	ReturnStatement	return false ;	163:1:4878:4890	5556088	9	True				
ANR	5556924	Identifier	false		5556088	0					
ANR	5556925	Statement	undef	164:1:4893:4897	5556088	10	True				
ANR	5556926	Statement	MAXPSEUDOOPS	164:7:4899:4910	5556088	11	True				
ANR	5556927	ReturnType	static int		5556088	1					
ANR	5556928	Identifier	replace		5556088	2					
ANR	5556929	ParameterList	"int argc , char * argv [ ] , char * newstr"		5556088	3					
ANR	5556930	Parameter	int argc	15:20:435:442	5556088	0	True				
ANR	5556931	ParameterType	int		5556088	0					
ANR	5556932	Identifier	argc		5556088	1					
ANR	5556933	Parameter	char * argv [ ]	15:30:445:456	5556088	1	True				
ANR	5556934	ParameterType	char * [ ]		5556088	0					
ANR	5556935	Identifier	argv		5556088	1					
ANR	5556936	Parameter	char * newstr	15:44:459:470	5556088	2	True				
ANR	5556937	ParameterType	char *		5556088	0					
ANR	5556938	Identifier	newstr		5556088	1					
ANR	5556939	CFGEntryNode	ENTRY		5556088		True				
ANR	5556940	CFGExitNode	EXIT		5556088		True				
ANR	5556941	Symbol	* ops [ i ] . str		5556088						
ANR	5556942	Symbol	* * ops		5556088						
ANR	5556943	Symbol	* argv		5556088						
ANR	5556944	Symbol	* ops [ i ] . args		5556088						
ANR	5556945	Symbol	argv		5556088						
ANR	5556946	Symbol	ops [ i ] . str		5556088						
ANR	5556947	Symbol	strlen		5556088						
ANR	5556948	Symbol	ops [ i ] . op		5556088						
ANR	5556949	Symbol	* idx		5556088						
ANR	5556950	Symbol	* ops		5556088						
ANR	5556951	Symbol	argc		5556088						
ANR	5556952	Symbol	strcmp		5556088						
ANR	5556953	Symbol	* * i		5556088						
ANR	5556954	Symbol	NULL		5556088						
ANR	5556955	Symbol	d		5556088						
ANR	5556956	Symbol	ch		5556088						
ANR	5556957	Symbol	false		5556088						
ANR	5556958	Symbol	i		5556088						
ANR	5556959	Symbol	j		5556088						
ANR	5556960	Symbol	k		5556088						
ANR	5556961	Symbol	newstr		5556088						
ANR	5556962	Symbol	* d		5556088						
ANR	5556963	Symbol	MAXPSEUDOOPS		5556088						
ANR	5556964	Symbol	ops [ i ] . args		5556088						
ANR	5556965	Symbol	ops		5556088						
ANR	5556966	Symbol	* i		5556088						
ANR	5556967	Symbol	* newstr		5556088						
ANR	5556968	Symbol	* j		5556088						
ANR	5556969	Symbol	* k		5556088						
ANR	5556970	Symbol	w		5556088						
ANR	5556971	Symbol	true		5556088						
ANR	5556972	Symbol	idx		5556088						
ANR	5556973	Function	parse	167:0:4915:7851							
ANR	5556974	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5556973	0					
ANR	5556975	CompoundStatement		167:58:4973:7851	5556973	0					
ANR	5556976	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] , w3 [ 256 ] ;"	168:1:4976:5015	5556973	0	True				
ANR	5556977	IdentifierDecl	w0 [ 256 ]		5556973	0					
ANR	5556978	IdentifierDeclType	char [ 256 ]		5556973	0					
ANR	5556979	Identifier	w0		5556973	1					
ANR	5556980	PrimaryExpression	256		5556973	2					
ANR	5556981	IdentifierDecl	w1 [ 256 ]		5556973	1					
ANR	5556982	IdentifierDeclType	char [ 256 ]		5556973	0					
ANR	5556983	Identifier	w1		5556973	1					
ANR	5556984	PrimaryExpression	256		5556973	2					
ANR	5556985	IdentifierDecl	w2 [ 256 ]		5556973	2					
ANR	5556986	IdentifierDeclType	char [ 256 ]		5556973	0					
ANR	5556987	Identifier	w2		5556973	1					
ANR	5556988	PrimaryExpression	256		5556973	2					
ANR	5556989	IdentifierDecl	w3 [ 256 ]		5556973	3					
ANR	5556990	IdentifierDeclType	char [ 256 ]		5556973	0					
ANR	5556991	Identifier	w3		5556973	1					
ANR	5556992	PrimaryExpression	256		5556973	2					
ANR	5556993	IdentifierDeclStatement	int i ;	169:1:5018:5023	5556973	1	True				
ANR	5556994	IdentifierDecl	i		5556973	0					
ANR	5556995	IdentifierDeclType	int		5556973	0					
ANR	5556996	Identifier	i		5556973	1					
ANR	5556997	IdentifierDeclStatement	size_t len = strlen ( data ) ;	170:1:5026:5052	5556973	2	True				
ANR	5556998	IdentifierDecl	len = strlen ( data )		5556973	0					
ANR	5556999	IdentifierDeclType	size_t		5556973	0					
ANR	5557000	Identifier	len		5556973	1					
ANR	5557001	AssignmentExpression	len = strlen ( data )		5556973	2		=			
ANR	5557002	Identifier	len		5556973	0					
ANR	5557003	CallExpression	strlen ( data )		5556973	1					
ANR	5557004	Callee	strlen		5556973	0					
ANR	5557005	Identifier	strlen		5556973	0					
ANR	5557006	ArgumentList	data		5556973	1					
ANR	5557007	Argument	data		5556973	0					
ANR	5557008	Identifier	data		5556973	0					
ANR	5557009	IdentifierDeclStatement	int sz = 32 ;	171:1:5055:5066	5556973	3	True				
ANR	5557010	IdentifierDecl	sz = 32		5556973	0					
ANR	5557011	IdentifierDeclType	int		5556973	0					
ANR	5557012	Identifier	sz		5556973	1					
ANR	5557013	AssignmentExpression	sz = 32		5556973	2		=			
ANR	5557014	Identifier	sz		5556973	0					
ANR	5557015	PrimaryExpression	32		5556973	1					
ANR	5557016	IdentifierDeclStatement	"char * buf , * ptr , * optr , * end ;"	172:1:5069:5097	5556973	4	True				
ANR	5557017	IdentifierDecl	* buf		5556973	0					
ANR	5557018	IdentifierDeclType	char *		5556973	0					
ANR	5557019	Identifier	buf		5556973	1					
ANR	5557020	IdentifierDecl	* ptr		5556973	1					
ANR	5557021	IdentifierDeclType	char *		5556973	0					
ANR	5557022	Identifier	ptr		5556973	1					
ANR	5557023	IdentifierDecl	* optr		5556973	2					
ANR	5557024	IdentifierDeclType	char *		5556973	0					
ANR	5557025	Identifier	optr		5556973	1					
ANR	5557026	IdentifierDecl	* end		5556973	3					
ANR	5557027	IdentifierDeclType	char *		5556973	0					
ANR	5557028	Identifier	end		5556973	1					
ANR	5557029	IfStatement	if ( len >= sizeof ( w0 ) || sz >= sizeof ( w0 ) )		5556973	5					
ANR	5557030	Condition	len >= sizeof ( w0 ) || sz >= sizeof ( w0 )	173:5:5104:5142	5556973	0	True				
ANR	5557031	OrExpression	len >= sizeof ( w0 ) || sz >= sizeof ( w0 )		5556973	0		||			
ANR	5557032	RelationalExpression	len >= sizeof ( w0 )		5556973	0		>=			
ANR	5557033	Identifier	len		5556973	0					
ANR	5557034	SizeofExpression	sizeof ( w0 )		5556973	1					
ANR	5557035	Sizeof	sizeof		5556973	0					
ANR	5557036	SizeofOperand	w0		5556973	1					
ANR	5557037	RelationalExpression	sz >= sizeof ( w0 )		5556973	1		>=			
ANR	5557038	Identifier	sz		5556973	0					
ANR	5557039	SizeofExpression	sizeof ( w0 )		5556973	1					
ANR	5557040	Sizeof	sizeof		5556973	0					
ANR	5557041	SizeofOperand	w0		5556973	1					
ANR	5557042	CompoundStatement		7:46:171:171	5556973	1					
ANR	5557043	ReturnStatement	return false ;	174:2:5149:5161	5556973	0	True				
ANR	5557044	Identifier	false		5556973	0					
ANR	5557045	IfStatement	if ( ! ( buf = strdup ( data ) ) )		5556973	6					
ANR	5557046	Condition	! ( buf = strdup ( data ) )	177:5:5202:5223	5556973	0	True				
ANR	5557047	UnaryOperationExpression	! ( buf = strdup ( data ) )		5556973	0					
ANR	5557048	UnaryOperator	!		5556973	0					
ANR	5557049	AssignmentExpression	buf = strdup ( data )		5556973	1		=			
ANR	5557050	Identifier	buf		5556973	0					
ANR	5557051	CallExpression	strdup ( data )		5556973	1					
ANR	5557052	Callee	strdup		5556973	0					
ANR	5557053	Identifier	strdup		5556973	0					
ANR	5557054	ArgumentList	data		5556973	1					
ANR	5557055	Argument	data		5556973	0					
ANR	5557056	Identifier	data		5556973	0					
ANR	5557057	CompoundStatement		11:29:252:252	5556973	1					
ANR	5557058	ReturnStatement	return false ;	178:2:5230:5242	5556973	0	True				
ANR	5557059	Identifier	false		5556973	0					
ANR	5557060	ExpressionStatement	* w0 = * w1 = * w2 = * w3 = '\\0'	180:1:5248:5276	5556973	7	True				
ANR	5557061	AssignmentExpression	* w0 = * w1 = * w2 = * w3 = '\\0'		5556973	0		=			
ANR	5557062	UnaryOperationExpression	* w0		5556973	0					
ANR	5557063	UnaryOperator	*		5556973	0					
ANR	5557064	Identifier	w0		5556973	1					
ANR	5557065	AssignmentExpression	* w1 = * w2 = * w3 = '\\0'		5556973	1		=			
ANR	5557066	UnaryOperationExpression	* w1		5556973	0					
ANR	5557067	UnaryOperator	*		5556973	0					
ANR	5557068	Identifier	w1		5556973	1					
ANR	5557069	AssignmentExpression	* w2 = * w3 = '\\0'		5556973	1		=			
ANR	5557070	UnaryOperationExpression	* w2		5556973	0					
ANR	5557071	UnaryOperator	*		5556973	0					
ANR	5557072	Identifier	w2		5556973	1					
ANR	5557073	AssignmentExpression	* w3 = '\\0'		5556973	1		=			
ANR	5557074	UnaryOperationExpression	* w3		5556973	0					
ANR	5557075	UnaryOperator	*		5556973	0					
ANR	5557076	Identifier	w3		5556973	1					
ANR	5557077	PrimaryExpression	'\\0'		5556973	1					
ANR	5557078	IfStatement	if ( * buf )		5556973	8					
ANR	5557079	Condition	* buf	181:5:5283:5286	5556973	0	True				
ANR	5557080	UnaryOperationExpression	* buf		5556973	0					
ANR	5557081	UnaryOperator	*		5556973	0					
ANR	5557082	Identifier	buf		5556973	1					
ANR	5557083	CompoundStatement		15:11:315:315	5556973	1					
ANR	5557084	ExpressionStatement	"end = strchr ( buf , '\\0' )"	182:2:5293:5317	5556973	0	True				
ANR	5557085	AssignmentExpression	"end = strchr ( buf , '\\0' )"		5556973	0		=			
ANR	5557086	Identifier	end		5556973	0					
ANR	5557087	CallExpression	"strchr ( buf , '\\0' )"		5556973	1					
ANR	5557088	Callee	strchr		5556973	0					
ANR	5557089	Identifier	strchr		5556973	0					
ANR	5557090	ArgumentList	buf		5556973	1					
ANR	5557091	Argument	buf		5556973	0					
ANR	5557092	Identifier	buf		5556973	0					
ANR	5557093	Argument	'\\0'		5556973	1					
ANR	5557094	PrimaryExpression	'\\0'		5556973	0					
ANR	5557095	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	183:2:5321:5344	5556973	1	True				
ANR	5557096	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5556973	0		=			
ANR	5557097	Identifier	ptr		5556973	0					
ANR	5557098	CallExpression	"strchr ( buf , ' ' )"		5556973	1					
ANR	5557099	Callee	strchr		5556973	0					
ANR	5557100	Identifier	strchr		5556973	0					
ANR	5557101	ArgumentList	buf		5556973	1					
ANR	5557102	Argument	buf		5556973	0					
ANR	5557103	Identifier	buf		5556973	0					
ANR	5557104	Argument	' '		5556973	1					
ANR	5557105	PrimaryExpression	' '		5556973	0					
ANR	5557106	IfStatement	if ( ! ptr )		5556973	2					
ANR	5557107	Condition	! ptr	184:6:5352:5355	5556973	0	True				
ANR	5557108	UnaryOperationExpression	! ptr		5556973	0					
ANR	5557109	UnaryOperator	!		5556973	0					
ANR	5557110	Identifier	ptr		5556973	1					
ANR	5557111	CompoundStatement		18:12:384:384	5556973	1					
ANR	5557112	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	185:3:5363:5387	5556973	0	True				
ANR	5557113	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5556973	0		=			
ANR	5557114	Identifier	ptr		5556973	0					
ANR	5557115	CallExpression	"strchr ( buf , '\\t' )"		5556973	1					
ANR	5557116	Callee	strchr		5556973	0					
ANR	5557117	Identifier	strchr		5556973	0					
ANR	5557118	ArgumentList	buf		5556973	1					
ANR	5557119	Argument	buf		5556973	0					
ANR	5557120	Identifier	buf		5556973	0					
ANR	5557121	Argument	'\\t'		5556973	1					
ANR	5557122	PrimaryExpression	'\\t'		5556973	0					
ANR	5557123	IfStatement	if ( ! ptr )		5556973	3					
ANR	5557124	Condition	! ptr	187:6:5399:5402	5556973	0	True				
ANR	5557125	UnaryOperationExpression	! ptr		5556973	0					
ANR	5557126	UnaryOperator	!		5556973	0					
ANR	5557127	Identifier	ptr		5556973	1					
ANR	5557128	CompoundStatement		21:12:431:431	5556973	1					
ANR	5557129	ExpressionStatement	ptr = end	188:3:5410:5419	5556973	0	True				
ANR	5557130	AssignmentExpression	ptr = end		5556973	0		=			
ANR	5557131	Identifier	ptr		5556973	0					
ANR	5557132	Identifier	end		5556973	1					
ANR	5557133	ExpressionStatement	* ptr = '\\0'	190:2:5427:5438	5556973	4	True				
ANR	5557134	AssignmentExpression	* ptr = '\\0'		5556973	0		=			
ANR	5557135	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557136	UnaryOperator	*		5556973	0					
ANR	5557137	Identifier	ptr		5556973	1					
ANR	5557138	PrimaryExpression	'\\0'		5556973	1					
ANR	5557139	IfStatement	if ( ptr != end )		5556973	5					
ANR	5557140	Condition	ptr != end	191:6:5446:5455	5556973	0	True				
ANR	5557141	EqualityExpression	ptr != end		5556973	0		!=			
ANR	5557142	Identifier	ptr		5556973	0					
ANR	5557143	Identifier	end		5556973	1					
ANR	5557144	CompoundStatement		25:18:484:484	5556973	1					
ANR	5557145	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5556973	0					
ANR	5557146	ForInit	++ ptr ;	192:8:5468:5473	5556973	0	True				
ANR	5557147	UnaryExpression	++ ptr		5556973	0					
ANR	5557148	IncDec	++		5556973	0					
ANR	5557149	Identifier	ptr		5556973	1					
ANR	5557150	Condition	* ptr == ' '	192:15:5475:5485	5556973	1	True				
ANR	5557151	EqualityExpression	* ptr == ' '		5556973	0		==			
ANR	5557152	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557153	UnaryOperator	*		5556973	0					
ANR	5557154	Identifier	ptr		5556973	1					
ANR	5557155	PrimaryExpression	' '		5556973	1					
ANR	5557156	PostIncDecOperationExpression	ptr ++	192:28:5488:5492	5556973	2	True				
ANR	5557157	Identifier	ptr		5556973	0					
ANR	5557158	IncDec	++		5556973	1					
ANR	5557159	CompoundStatement		26:35:521:521	5556973	3					
ANR	5557160	ExpressionStatement		193:4:5501:5501	5556973	0	True				
ANR	5557161	ExpressionStatement	"r_str_ncpy ( w0 , buf , sizeof ( w0 ) )"	196:2:5514:5547	5556973	6	True				
ANR	5557162	CallExpression	"r_str_ncpy ( w0 , buf , sizeof ( w0 ) )"		5556973	0					
ANR	5557163	Callee	r_str_ncpy		5556973	0					
ANR	5557164	Identifier	r_str_ncpy		5556973	0					
ANR	5557165	ArgumentList	w0		5556973	1					
ANR	5557166	Argument	w0		5556973	0					
ANR	5557167	Identifier	w0		5556973	0					
ANR	5557168	Argument	buf		5556973	1					
ANR	5557169	Identifier	buf		5556973	0					
ANR	5557170	Argument	sizeof ( w0 )		5556973	2					
ANR	5557171	SizeofExpression	sizeof ( w0 )		5556973	0					
ANR	5557172	Sizeof	sizeof		5556973	0					
ANR	5557173	SizeofOperand	w0		5556973	1					
ANR	5557174	ExpressionStatement	"r_str_ncpy ( w1 , ptr , sizeof ( w1 ) )"	197:2:5551:5584	5556973	7	True				
ANR	5557175	CallExpression	"r_str_ncpy ( w1 , ptr , sizeof ( w1 ) )"		5556973	0					
ANR	5557176	Callee	r_str_ncpy		5556973	0					
ANR	5557177	Identifier	r_str_ncpy		5556973	0					
ANR	5557178	ArgumentList	w1		5556973	1					
ANR	5557179	Argument	w1		5556973	0					
ANR	5557180	Identifier	w1		5556973	0					
ANR	5557181	Argument	ptr		5556973	1					
ANR	5557182	Identifier	ptr		5556973	0					
ANR	5557183	Argument	sizeof ( w1 )		5556973	2					
ANR	5557184	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557185	Sizeof	sizeof		5556973	0					
ANR	5557186	SizeofOperand	w1		5556973	1					
ANR	5557187	ExpressionStatement	optr = ptr	198:2:5588:5598	5556973	8	True				
ANR	5557188	AssignmentExpression	optr = ptr		5556973	0		=			
ANR	5557189	Identifier	optr		5556973	0					
ANR	5557190	Identifier	ptr		5556973	1					
ANR	5557191	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	199:2:5602:5625	5556973	9	True				
ANR	5557192	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5556973	0		=			
ANR	5557193	Identifier	ptr		5556973	0					
ANR	5557194	CallExpression	"strchr ( ptr , ',' )"		5556973	1					
ANR	5557195	Callee	strchr		5556973	0					
ANR	5557196	Identifier	strchr		5556973	0					
ANR	5557197	ArgumentList	ptr		5556973	1					
ANR	5557198	Argument	ptr		5556973	0					
ANR	5557199	Identifier	ptr		5556973	0					
ANR	5557200	Argument	"','"		5556973	1					
ANR	5557201	PrimaryExpression	"','"		5556973	0					
ANR	5557202	IfStatement	if ( ptr )		5556973	10					
ANR	5557203	Condition	ptr	200:6:5633:5635	5556973	0	True				
ANR	5557204	Identifier	ptr		5556973	0					
ANR	5557205	CompoundStatement		34:11:664:664	5556973	1					
ANR	5557206	ExpressionStatement	* ptr = '\\0'	201:3:5643:5654	5556973	0	True				
ANR	5557207	AssignmentExpression	* ptr = '\\0'		5556973	0		=			
ANR	5557208	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557209	UnaryOperator	*		5556973	0					
ANR	5557210	Identifier	ptr		5556973	1					
ANR	5557211	PrimaryExpression	'\\0'		5556973	1					
ANR	5557212	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5556973	1					
ANR	5557213	ForInit	++ ptr ;	202:8:5664:5669	5556973	0	True				
ANR	5557214	UnaryExpression	++ ptr		5556973	0					
ANR	5557215	IncDec	++		5556973	0					
ANR	5557216	Identifier	ptr		5556973	1					
ANR	5557217	Condition	* ptr == ' '	202:15:5671:5681	5556973	1	True				
ANR	5557218	EqualityExpression	* ptr == ' '		5556973	0		==			
ANR	5557219	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557220	UnaryOperator	*		5556973	0					
ANR	5557221	Identifier	ptr		5556973	1					
ANR	5557222	PrimaryExpression	' '		5556973	1					
ANR	5557223	PostIncDecOperationExpression	ptr ++	202:28:5684:5688	5556973	2	True				
ANR	5557224	Identifier	ptr		5556973	0					
ANR	5557225	IncDec	++		5556973	1					
ANR	5557226	CompoundStatement		36:35:717:717	5556973	3					
ANR	5557227	ExpressionStatement		203:4:5697:5697	5556973	0	True				
ANR	5557228	ExpressionStatement	"r_str_ncpy ( w1 , optr , sizeof ( w1 ) )"	205:3:5707:5741	5556973	2	True				
ANR	5557229	CallExpression	"r_str_ncpy ( w1 , optr , sizeof ( w1 ) )"		5556973	0					
ANR	5557230	Callee	r_str_ncpy		5556973	0					
ANR	5557231	Identifier	r_str_ncpy		5556973	0					
ANR	5557232	ArgumentList	w1		5556973	1					
ANR	5557233	Argument	w1		5556973	0					
ANR	5557234	Identifier	w1		5556973	0					
ANR	5557235	Argument	optr		5556973	1					
ANR	5557236	Identifier	optr		5556973	0					
ANR	5557237	Argument	sizeof ( w1 )		5556973	2					
ANR	5557238	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557239	Sizeof	sizeof		5556973	0					
ANR	5557240	SizeofOperand	w1		5556973	1					
ANR	5557241	ExpressionStatement	"r_str_ncpy ( w2 , ptr , sizeof ( w2 ) )"	206:3:5746:5779	5556973	3	True				
ANR	5557242	CallExpression	"r_str_ncpy ( w2 , ptr , sizeof ( w2 ) )"		5556973	0					
ANR	5557243	Callee	r_str_ncpy		5556973	0					
ANR	5557244	Identifier	r_str_ncpy		5556973	0					
ANR	5557245	ArgumentList	w2		5556973	1					
ANR	5557246	Argument	w2		5556973	0					
ANR	5557247	Identifier	w2		5556973	0					
ANR	5557248	Argument	ptr		5556973	1					
ANR	5557249	Identifier	ptr		5556973	0					
ANR	5557250	Argument	sizeof ( w2 )		5556973	2					
ANR	5557251	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557252	Sizeof	sizeof		5556973	0					
ANR	5557253	SizeofOperand	w2		5556973	1					
ANR	5557254	ExpressionStatement	optr = ptr	207:3:5784:5794	5556973	4	True				
ANR	5557255	AssignmentExpression	optr = ptr		5556973	0		=			
ANR	5557256	Identifier	optr		5556973	0					
ANR	5557257	Identifier	ptr		5556973	1					
ANR	5557258	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	208:3:5799:5822	5556973	5	True				
ANR	5557259	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5556973	0		=			
ANR	5557260	Identifier	ptr		5556973	0					
ANR	5557261	CallExpression	"strchr ( ptr , ',' )"		5556973	1					
ANR	5557262	Callee	strchr		5556973	0					
ANR	5557263	Identifier	strchr		5556973	0					
ANR	5557264	ArgumentList	ptr		5556973	1					
ANR	5557265	Argument	ptr		5556973	0					
ANR	5557266	Identifier	ptr		5556973	0					
ANR	5557267	Argument	"','"		5556973	1					
ANR	5557268	PrimaryExpression	"','"		5556973	0					
ANR	5557269	IfStatement	if ( ptr )		5556973	6					
ANR	5557270	Condition	ptr	209:7:5831:5833	5556973	0	True				
ANR	5557271	Identifier	ptr		5556973	0					
ANR	5557272	CompoundStatement		43:12:862:862	5556973	1					
ANR	5557273	ExpressionStatement	* ptr = '\\0'	210:4:5842:5853	5556973	0	True				
ANR	5557274	AssignmentExpression	* ptr = '\\0'		5556973	0		=			
ANR	5557275	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557276	UnaryOperator	*		5556973	0					
ANR	5557277	Identifier	ptr		5556973	1					
ANR	5557278	PrimaryExpression	'\\0'		5556973	1					
ANR	5557279	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5556973	1					
ANR	5557280	ForInit	++ ptr ;	211:9:5864:5869	5556973	0	True				
ANR	5557281	UnaryExpression	++ ptr		5556973	0					
ANR	5557282	IncDec	++		5556973	0					
ANR	5557283	Identifier	ptr		5556973	1					
ANR	5557284	Condition	* ptr == ' '	211:16:5871:5881	5556973	1	True				
ANR	5557285	EqualityExpression	* ptr == ' '		5556973	0		==			
ANR	5557286	UnaryOperationExpression	* ptr		5556973	0					
ANR	5557287	UnaryOperator	*		5556973	0					
ANR	5557288	Identifier	ptr		5556973	1					
ANR	5557289	PrimaryExpression	' '		5556973	1					
ANR	5557290	PostIncDecOperationExpression	ptr ++	211:29:5884:5888	5556973	2	True				
ANR	5557291	Identifier	ptr		5556973	0					
ANR	5557292	IncDec	++		5556973	1					
ANR	5557293	CompoundStatement		45:36:917:917	5556973	3					
ANR	5557294	ExpressionStatement		212:5:5898:5898	5556973	0	True				
ANR	5557295	ExpressionStatement	"r_str_ncpy ( w2 , optr , sizeof ( w2 ) )"	214:4:5910:5944	5556973	2	True				
ANR	5557296	CallExpression	"r_str_ncpy ( w2 , optr , sizeof ( w2 ) )"		5556973	0					
ANR	5557297	Callee	r_str_ncpy		5556973	0					
ANR	5557298	Identifier	r_str_ncpy		5556973	0					
ANR	5557299	ArgumentList	w2		5556973	1					
ANR	5557300	Argument	w2		5556973	0					
ANR	5557301	Identifier	w2		5556973	0					
ANR	5557302	Argument	optr		5556973	1					
ANR	5557303	Identifier	optr		5556973	0					
ANR	5557304	Argument	sizeof ( w2 )		5556973	2					
ANR	5557305	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557306	Sizeof	sizeof		5556973	0					
ANR	5557307	SizeofOperand	w2		5556973	1					
ANR	5557308	ExpressionStatement	"r_str_ncpy ( w3 , ptr , sizeof ( w3 ) )"	215:4:5950:5983	5556973	3	True				
ANR	5557309	CallExpression	"r_str_ncpy ( w3 , ptr , sizeof ( w3 ) )"		5556973	0					
ANR	5557310	Callee	r_str_ncpy		5556973	0					
ANR	5557311	Identifier	r_str_ncpy		5556973	0					
ANR	5557312	ArgumentList	w3		5556973	1					
ANR	5557313	Argument	w3		5556973	0					
ANR	5557314	Identifier	w3		5556973	0					
ANR	5557315	Argument	ptr		5556973	1					
ANR	5557316	Identifier	ptr		5556973	0					
ANR	5557317	Argument	sizeof ( w3 )		5556973	2					
ANR	5557318	SizeofExpression	sizeof ( w3 )		5556973	0					
ANR	5557319	Sizeof	sizeof		5556973	0					
ANR	5557320	SizeofOperand	w3		5556973	1					
ANR	5557321	IdentifierDeclStatement	"char * wa [ ] = { w0 , w1 , w2 , w3 } ;"	219:1:5998:6029	5556973	9	True				
ANR	5557322	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5556973	0					
ANR	5557323	IdentifierDeclType	char * [ ]		5556973	0					
ANR	5557324	Identifier	wa		5556973	1					
ANR	5557325	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5556973	2		=			
ANR	5557326	Identifier	wa		5556973	0					
ANR	5557327	InitializerList	w0		5556973	1					
ANR	5557328	Identifier	w0		5556973	0					
ANR	5557329	Identifier	w1		5556973	1					
ANR	5557330	Identifier	w2		5556973	2					
ANR	5557331	Identifier	w3		5556973	3					
ANR	5557332	IdentifierDeclStatement	int nw = 0 ;	220:1:6032:6042	5556973	10	True				
ANR	5557333	IdentifierDecl	nw = 0		5556973	0					
ANR	5557334	IdentifierDeclType	int		5556973	0					
ANR	5557335	Identifier	nw		5556973	1					
ANR	5557336	AssignmentExpression	nw = 0		5556973	2		=			
ANR	5557337	Identifier	nw		5556973	0					
ANR	5557338	PrimaryExpression	0		5556973	1					
ANR	5557339	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5556973	11					
ANR	5557340	ForInit	i = 0 ;	221:6:6050:6055	5556973	0	True				
ANR	5557341	AssignmentExpression	i = 0		5556973	0		=			
ANR	5557342	Identifier	i		5556973	0					
ANR	5557343	PrimaryExpression	0		5556973	1					
ANR	5557344	Condition	i < 4	221:13:6057:6061	5556973	1	True				
ANR	5557345	RelationalExpression	i < 4		5556973	0		<			
ANR	5557346	Identifier	i		5556973	0					
ANR	5557347	PrimaryExpression	4		5556973	1					
ANR	5557348	PostIncDecOperationExpression	i ++	221:20:6064:6066	5556973	2	True				
ANR	5557349	Identifier	i		5556973	0					
ANR	5557350	IncDec	++		5556973	1					
ANR	5557351	CompoundStatement		55:25:1095:1095	5556973	3					
ANR	5557352	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5556973	0					
ANR	5557353	Condition	wa [ i ] [ 0 ] != '\\0'	222:6:6077:6092	5556973	0	True				
ANR	5557354	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5556973	0		!=			
ANR	5557355	ArrayIndexing	wa [ i ] [ 0 ]		5556973	0					
ANR	5557356	ArrayIndexing	wa [ i ]		5556973	0					
ANR	5557357	Identifier	wa		5556973	0					
ANR	5557358	Identifier	i		5556973	1					
ANR	5557359	PrimaryExpression	0		5556973	1					
ANR	5557360	PrimaryExpression	'\\0'		5556973	1					
ANR	5557361	CompoundStatement		56:24:1121:1121	5556973	1					
ANR	5557362	ExpressionStatement	nw ++	223:3:6100:6104	5556973	0	True				
ANR	5557363	PostIncDecOperationExpression	nw ++		5556973	0					
ANR	5557364	Identifier	nw		5556973	0					
ANR	5557365	IncDec	++		5556973	1					
ANR	5557366	IfStatement	"if ( strstr ( w0 , ""mul"" ) )"		5556973	12					
ANR	5557367	Condition	"strstr ( w0 , ""mul"" )"	228:5:6213:6230	5556973	0	True				
ANR	5557368	CallExpression	"strstr ( w0 , ""mul"" )"		5556973	0					
ANR	5557369	Callee	strstr		5556973	0					
ANR	5557370	Identifier	strstr		5556973	0					
ANR	5557371	ArgumentList	w0		5556973	1					
ANR	5557372	Argument	w0		5556973	0					
ANR	5557373	Identifier	w0		5556973	0					
ANR	5557374	Argument	"""mul"""		5556973	1					
ANR	5557375	PrimaryExpression	"""mul"""		5556973	0					
ANR	5557376	CompoundStatement		62:25:1259:1259	5556973	1					
ANR	5557377	IfStatement	if ( nw == 2 )		5556973	0					
ANR	5557378	Condition	nw == 2	229:6:6241:6247	5556973	0	True				
ANR	5557379	EqualityExpression	nw == 2		5556973	0		==			
ANR	5557380	Identifier	nw		5556973	0					
ANR	5557381	PrimaryExpression	2		5556973	1					
ANR	5557382	CompoundStatement		64:2:1278:1278	5556973	1					
ANR	5557383	ExpressionStatement	"r_str_ncpy ( wa [ 3 ] , wa [ 1 ] , sizeof ( w3 ) )"	231:3:6257:6295	5556973	0	True				
ANR	5557384	CallExpression	"r_str_ncpy ( wa [ 3 ] , wa [ 1 ] , sizeof ( w3 ) )"		5556973	0					
ANR	5557385	Callee	r_str_ncpy		5556973	0					
ANR	5557386	Identifier	r_str_ncpy		5556973	0					
ANR	5557387	ArgumentList	wa [ 3 ]		5556973	1					
ANR	5557388	Argument	wa [ 3 ]		5556973	0					
ANR	5557389	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557390	Identifier	wa		5556973	0					
ANR	5557391	PrimaryExpression	3		5556973	1					
ANR	5557392	Argument	wa [ 1 ]		5556973	1					
ANR	5557393	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557394	Identifier	wa		5556973	0					
ANR	5557395	PrimaryExpression	1		5556973	1					
ANR	5557396	Argument	sizeof ( w3 )		5556973	2					
ANR	5557397	SizeofExpression	sizeof ( w3 )		5556973	0					
ANR	5557398	Sizeof	sizeof		5556973	0					
ANR	5557399	SizeofOperand	w3		5556973	1					
ANR	5557400	SwitchStatement	switch ( wa [ 3 ] [ 0 ] )		5556973	1					
ANR	5557401	Condition	wa [ 3 ] [ 0 ]	233:11:6309:6316	5556973	0	True				
ANR	5557402	ArrayIndexing	wa [ 3 ] [ 0 ]		5556973	0					
ANR	5557403	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557404	Identifier	wa		5556973	0					
ANR	5557405	PrimaryExpression	3		5556973	1					
ANR	5557406	PrimaryExpression	0		5556973	1					
ANR	5557407	CompoundStatement		67:21:1345:1345	5556973	1					
ANR	5557408	Label	case 'q' :	234:3:6324:6332	5556973	0	True				
ANR	5557409	Label	case 'r' :	235:3:6337:6345	5556973	1	True				
ANR	5557410	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""rax"" , sizeof ( w1 ) )"	236:4:6364:6402	5556973	2	True				
ANR	5557411	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""rax"" , sizeof ( w1 ) )"		5556973	0					
ANR	5557412	Callee	r_str_ncpy		5556973	0					
ANR	5557413	Identifier	r_str_ncpy		5556973	0					
ANR	5557414	ArgumentList	wa [ 1 ]		5556973	1					
ANR	5557415	Argument	wa [ 1 ]		5556973	0					
ANR	5557416	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557417	Identifier	wa		5556973	0					
ANR	5557418	PrimaryExpression	1		5556973	1					
ANR	5557419	Argument	"""rax"""		5556973	1					
ANR	5557420	PrimaryExpression	"""rax"""		5556973	0					
ANR	5557421	Argument	sizeof ( w1 )		5556973	2					
ANR	5557422	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557423	Sizeof	sizeof		5556973	0					
ANR	5557424	SizeofOperand	w1		5556973	1					
ANR	5557425	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""rax"" , sizeof ( w2 ) )"	237:4:6408:6446	5556973	3	True				
ANR	5557426	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""rax"" , sizeof ( w2 ) )"		5556973	0					
ANR	5557427	Callee	r_str_ncpy		5556973	0					
ANR	5557428	Identifier	r_str_ncpy		5556973	0					
ANR	5557429	ArgumentList	wa [ 2 ]		5556973	1					
ANR	5557430	Argument	wa [ 2 ]		5556973	0					
ANR	5557431	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557432	Identifier	wa		5556973	0					
ANR	5557433	PrimaryExpression	2		5556973	1					
ANR	5557434	Argument	"""rax"""		5556973	1					
ANR	5557435	PrimaryExpression	"""rax"""		5556973	0					
ANR	5557436	Argument	sizeof ( w2 )		5556973	2					
ANR	5557437	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557438	Sizeof	sizeof		5556973	0					
ANR	5557439	SizeofOperand	w2		5556973	1					
ANR	5557440	BreakStatement	break ;	238:4:6452:6457	5556973	4	True				
ANR	5557441	Label	case 'd' :	239:3:6462:6470	5556973	5	True				
ANR	5557442	Label	case 'e' :	240:3:6475:6483	5556973	6	True				
ANR	5557443	IfStatement	if ( strlen ( wa [ 3 ] ) > 2 )		5556973	7					
ANR	5557444	Condition	strlen ( wa [ 3 ] ) > 2	241:8:6506:6523	5556973	0	True				
ANR	5557445	RelationalExpression	strlen ( wa [ 3 ] ) > 2		5556973	0		>			
ANR	5557446	CallExpression	strlen ( wa [ 3 ] )		5556973	0					
ANR	5557447	Callee	strlen		5556973	0					
ANR	5557448	Identifier	strlen		5556973	0					
ANR	5557449	ArgumentList	wa [ 3 ]		5556973	1					
ANR	5557450	Argument	wa [ 3 ]		5556973	0					
ANR	5557451	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557452	Identifier	wa		5556973	0					
ANR	5557453	PrimaryExpression	3		5556973	1					
ANR	5557454	PrimaryExpression	2		5556973	1					
ANR	5557455	CompoundStatement		75:28:1552:1552	5556973	1					
ANR	5557456	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""eax"" , sizeof ( w1 ) )"	242:5:6533:6571	5556973	0	True				
ANR	5557457	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""eax"" , sizeof ( w1 ) )"		5556973	0					
ANR	5557458	Callee	r_str_ncpy		5556973	0					
ANR	5557459	Identifier	r_str_ncpy		5556973	0					
ANR	5557460	ArgumentList	wa [ 1 ]		5556973	1					
ANR	5557461	Argument	wa [ 1 ]		5556973	0					
ANR	5557462	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557463	Identifier	wa		5556973	0					
ANR	5557464	PrimaryExpression	1		5556973	1					
ANR	5557465	Argument	"""eax"""		5556973	1					
ANR	5557466	PrimaryExpression	"""eax"""		5556973	0					
ANR	5557467	Argument	sizeof ( w1 )		5556973	2					
ANR	5557468	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557469	Sizeof	sizeof		5556973	0					
ANR	5557470	SizeofOperand	w1		5556973	1					
ANR	5557471	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""eax"" , sizeof ( w2 ) )"	243:5:6578:6616	5556973	1	True				
ANR	5557472	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""eax"" , sizeof ( w2 ) )"		5556973	0					
ANR	5557473	Callee	r_str_ncpy		5556973	0					
ANR	5557474	Identifier	r_str_ncpy		5556973	0					
ANR	5557475	ArgumentList	wa [ 2 ]		5556973	1					
ANR	5557476	Argument	wa [ 2 ]		5556973	0					
ANR	5557477	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557478	Identifier	wa		5556973	0					
ANR	5557479	PrimaryExpression	2		5556973	1					
ANR	5557480	Argument	"""eax"""		5556973	1					
ANR	5557481	PrimaryExpression	"""eax"""		5556973	0					
ANR	5557482	Argument	sizeof ( w2 )		5556973	2					
ANR	5557483	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557484	Sizeof	sizeof		5556973	0					
ANR	5557485	SizeofOperand	w2		5556973	1					
ANR	5557486	BreakStatement	break ;	244:5:6623:6628	5556973	2	True				
ANR	5557487	Label	default :	246:3:6639:6647	5556973	8	True				
ANR	5557488	Identifier	default		5556973	0					
ANR	5557489	IfStatement	if ( wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w' )		5556973	9					
ANR	5557490	Condition	wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'	247:8:6679:6757	5556973	0	True				
ANR	5557491	OrExpression	wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5556973	0		||			
ANR	5557492	EqualityExpression	wa [ 3 ] [ 1 ] == 'x'		5556973	0		==			
ANR	5557493	ArrayIndexing	wa [ 3 ] [ 1 ]		5556973	0					
ANR	5557494	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557495	Identifier	wa		5556973	0					
ANR	5557496	PrimaryExpression	3		5556973	1					
ANR	5557497	PrimaryExpression	1		5556973	1					
ANR	5557498	PrimaryExpression	'x'		5556973	1					
ANR	5557499	OrExpression	wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5556973	1		||			
ANR	5557500	EqualityExpression	wa [ 3 ] [ 1 ] == 'p'		5556973	0		==			
ANR	5557501	ArrayIndexing	wa [ 3 ] [ 1 ]		5556973	0					
ANR	5557502	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557503	Identifier	wa		5556973	0					
ANR	5557504	PrimaryExpression	3		5556973	1					
ANR	5557505	PrimaryExpression	1		5556973	1					
ANR	5557506	PrimaryExpression	'p'		5556973	1					
ANR	5557507	OrExpression	wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5556973	1		||			
ANR	5557508	EqualityExpression	wa [ 3 ] [ 1 ] == 'i'		5556973	0		==			
ANR	5557509	ArrayIndexing	wa [ 3 ] [ 1 ]		5556973	0					
ANR	5557510	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557511	Identifier	wa		5556973	0					
ANR	5557512	PrimaryExpression	3		5556973	1					
ANR	5557513	PrimaryExpression	1		5556973	1					
ANR	5557514	PrimaryExpression	'i'		5556973	1					
ANR	5557515	EqualityExpression	wa [ 3 ] [ 0 ] == 'w'		5556973	1		==			
ANR	5557516	ArrayIndexing	wa [ 3 ] [ 0 ]		5556973	0					
ANR	5557517	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557518	Identifier	wa		5556973	0					
ANR	5557519	PrimaryExpression	3		5556973	1					
ANR	5557520	PrimaryExpression	0		5556973	1					
ANR	5557521	PrimaryExpression	'w'		5556973	1					
ANR	5557522	CompoundStatement		82:41:1786:1786	5556973	1					
ANR	5557523	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""ax"" , sizeof ( w1 ) )"	249:5:6767:6804	5556973	0	True				
ANR	5557524	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""ax"" , sizeof ( w1 ) )"		5556973	0					
ANR	5557525	Callee	r_str_ncpy		5556973	0					
ANR	5557526	Identifier	r_str_ncpy		5556973	0					
ANR	5557527	ArgumentList	wa [ 1 ]		5556973	1					
ANR	5557528	Argument	wa [ 1 ]		5556973	0					
ANR	5557529	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557530	Identifier	wa		5556973	0					
ANR	5557531	PrimaryExpression	1		5556973	1					
ANR	5557532	Argument	"""ax"""		5556973	1					
ANR	5557533	PrimaryExpression	"""ax"""		5556973	0					
ANR	5557534	Argument	sizeof ( w1 )		5556973	2					
ANR	5557535	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557536	Sizeof	sizeof		5556973	0					
ANR	5557537	SizeofOperand	w1		5556973	1					
ANR	5557538	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""ax"" , sizeof ( w2 ) )"	250:5:6811:6848	5556973	1	True				
ANR	5557539	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""ax"" , sizeof ( w2 ) )"		5556973	0					
ANR	5557540	Callee	r_str_ncpy		5556973	0					
ANR	5557541	Identifier	r_str_ncpy		5556973	0					
ANR	5557542	ArgumentList	wa [ 2 ]		5556973	1					
ANR	5557543	Argument	wa [ 2 ]		5556973	0					
ANR	5557544	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557545	Identifier	wa		5556973	0					
ANR	5557546	PrimaryExpression	2		5556973	1					
ANR	5557547	Argument	"""ax"""		5556973	1					
ANR	5557548	PrimaryExpression	"""ax"""		5556973	0					
ANR	5557549	Argument	sizeof ( w2 )		5556973	2					
ANR	5557550	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557551	Sizeof	sizeof		5556973	0					
ANR	5557552	SizeofOperand	w2		5556973	1					
ANR	5557553	ElseStatement	else		5556973	0					
ANR	5557554	CompoundStatement		85:11:1887:1887	5556973	0					
ANR	5557555	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""al"" , sizeof ( w1 ) )"	252:5:6903:6940	5556973	0	True				
ANR	5557556	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""al"" , sizeof ( w1 ) )"		5556973	0					
ANR	5557557	Callee	r_str_ncpy		5556973	0					
ANR	5557558	Identifier	r_str_ncpy		5556973	0					
ANR	5557559	ArgumentList	wa [ 1 ]		5556973	1					
ANR	5557560	Argument	wa [ 1 ]		5556973	0					
ANR	5557561	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557562	Identifier	wa		5556973	0					
ANR	5557563	PrimaryExpression	1		5556973	1					
ANR	5557564	Argument	"""al"""		5556973	1					
ANR	5557565	PrimaryExpression	"""al"""		5556973	0					
ANR	5557566	Argument	sizeof ( w1 )		5556973	2					
ANR	5557567	SizeofExpression	sizeof ( w1 )		5556973	0					
ANR	5557568	Sizeof	sizeof		5556973	0					
ANR	5557569	SizeofOperand	w1		5556973	1					
ANR	5557570	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""al"" , sizeof ( w2 ) )"	253:5:6947:6984	5556973	1	True				
ANR	5557571	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""al"" , sizeof ( w2 ) )"		5556973	0					
ANR	5557572	Callee	r_str_ncpy		5556973	0					
ANR	5557573	Identifier	r_str_ncpy		5556973	0					
ANR	5557574	ArgumentList	wa [ 2 ]		5556973	1					
ANR	5557575	Argument	wa [ 2 ]		5556973	0					
ANR	5557576	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557577	Identifier	wa		5556973	0					
ANR	5557578	PrimaryExpression	2		5556973	1					
ANR	5557579	Argument	"""al"""		5556973	1					
ANR	5557580	PrimaryExpression	"""al"""		5556973	0					
ANR	5557581	Argument	sizeof ( w2 )		5556973	2					
ANR	5557582	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557583	Sizeof	sizeof		5556973	0					
ANR	5557584	SizeofOperand	w2		5556973	1					
ANR	5557585	ElseStatement	else		5556973	0					
ANR	5557586	IfStatement	if ( nw == 3 )		5556973	0					
ANR	5557587	Condition	nw == 3	257:11:7012:7018	5556973	0	True				
ANR	5557588	EqualityExpression	nw == 3		5556973	0		==			
ANR	5557589	Identifier	nw		5556973	0					
ANR	5557590	PrimaryExpression	3		5556973	1					
ANR	5557591	CompoundStatement		92:2:2049:2049	5556973	1					
ANR	5557592	ExpressionStatement	"r_str_ncpy ( wa [ 3 ] , wa [ 2 ] , sizeof ( w3 ) )"	259:3:7028:7066	5556973	0	True				
ANR	5557593	CallExpression	"r_str_ncpy ( wa [ 3 ] , wa [ 2 ] , sizeof ( w3 ) )"		5556973	0					
ANR	5557594	Callee	r_str_ncpy		5556973	0					
ANR	5557595	Identifier	r_str_ncpy		5556973	0					
ANR	5557596	ArgumentList	wa [ 3 ]		5556973	1					
ANR	5557597	Argument	wa [ 3 ]		5556973	0					
ANR	5557598	ArrayIndexing	wa [ 3 ]		5556973	0					
ANR	5557599	Identifier	wa		5556973	0					
ANR	5557600	PrimaryExpression	3		5556973	1					
ANR	5557601	Argument	wa [ 2 ]		5556973	1					
ANR	5557602	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557603	Identifier	wa		5556973	0					
ANR	5557604	PrimaryExpression	2		5556973	1					
ANR	5557605	Argument	sizeof ( w3 )		5556973	2					
ANR	5557606	SizeofExpression	sizeof ( w3 )		5556973	0					
ANR	5557607	Sizeof	sizeof		5556973	0					
ANR	5557608	SizeofOperand	w3		5556973	1					
ANR	5557609	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , wa [ 1 ] , sizeof ( w2 ) )"	260:3:7071:7109	5556973	1	True				
ANR	5557610	CallExpression	"r_str_ncpy ( wa [ 2 ] , wa [ 1 ] , sizeof ( w2 ) )"		5556973	0					
ANR	5557611	Callee	r_str_ncpy		5556973	0					
ANR	5557612	Identifier	r_str_ncpy		5556973	0					
ANR	5557613	ArgumentList	wa [ 2 ]		5556973	1					
ANR	5557614	Argument	wa [ 2 ]		5556973	0					
ANR	5557615	ArrayIndexing	wa [ 2 ]		5556973	0					
ANR	5557616	Identifier	wa		5556973	0					
ANR	5557617	PrimaryExpression	2		5556973	1					
ANR	5557618	Argument	wa [ 1 ]		5556973	1					
ANR	5557619	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557620	Identifier	wa		5556973	0					
ANR	5557621	PrimaryExpression	1		5556973	1					
ANR	5557622	Argument	sizeof ( w2 )		5556973	2					
ANR	5557623	SizeofExpression	sizeof ( w2 )		5556973	0					
ANR	5557624	Sizeof	sizeof		5556973	0					
ANR	5557625	SizeofOperand	w2		5556973	1					
ANR	5557626	ExpressionStatement	"replace ( nw , wa , str )"	263:2:7118:7139	5556973	1	True				
ANR	5557627	CallExpression	"replace ( nw , wa , str )"		5556973	0					
ANR	5557628	Callee	replace		5556973	0					
ANR	5557629	Identifier	replace		5556973	0					
ANR	5557630	ArgumentList	nw		5556973	1					
ANR	5557631	Argument	nw		5556973	0					
ANR	5557632	Identifier	nw		5556973	0					
ANR	5557633	Argument	wa		5556973	1					
ANR	5557634	Identifier	wa		5556973	0					
ANR	5557635	Argument	str		5556973	2					
ANR	5557636	Identifier	str		5556973	0					
ANR	5557637	ElseStatement	else		5556973	0					
ANR	5557638	IfStatement	"if ( ( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm )"		5556973	0					
ANR	5557639	Condition	"( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm"	265:12:7154:7234	5556973	0	True				
ANR	5557640	AndExpression	"( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm"		5556973	0		&&			
ANR	5557641	OrExpression	"strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" )"		5556973	0		||			
ANR	5557642	CallExpression	"strstr ( w1 , ""ax"" )"		5556973	0					
ANR	5557643	Callee	strstr		5556973	0					
ANR	5557644	Identifier	strstr		5556973	0					
ANR	5557645	ArgumentList	w1		5556973	1					
ANR	5557646	Argument	w1		5556973	0					
ANR	5557647	Identifier	w1		5556973	0					
ANR	5557648	Argument	"""ax"""		5556973	1					
ANR	5557649	PrimaryExpression	"""ax"""		5556973	0					
ANR	5557650	OrExpression	"strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" )"		5556973	1		||			
ANR	5557651	CallExpression	"strstr ( w1 , ""ah"" )"		5556973	0					
ANR	5557652	Callee	strstr		5556973	0					
ANR	5557653	Identifier	strstr		5556973	0					
ANR	5557654	ArgumentList	w1		5556973	1					
ANR	5557655	Argument	w1		5556973	0					
ANR	5557656	Identifier	w1		5556973	0					
ANR	5557657	Argument	"""ah"""		5556973	1					
ANR	5557658	PrimaryExpression	"""ah"""		5556973	0					
ANR	5557659	CallExpression	"strstr ( w1 , ""al"" )"		5556973	1					
ANR	5557660	Callee	strstr		5556973	0					
ANR	5557661	Identifier	strstr		5556973	0					
ANR	5557662	ArgumentList	w1		5556973	1					
ANR	5557663	Argument	w1		5556973	0					
ANR	5557664	Identifier	w1		5556973	0					
ANR	5557665	Argument	"""al"""		5556973	1					
ANR	5557666	PrimaryExpression	"""al"""		5556973	0					
ANR	5557667	UnaryOperationExpression	! p -> retleave_asm		5556973	1					
ANR	5557668	UnaryOperator	!		5556973	0					
ANR	5557669	PtrMemberAccess	p -> retleave_asm		5556973	1					
ANR	5557670	Identifier	p		5556973	0					
ANR	5557671	Identifier	retleave_asm		5556973	1					
ANR	5557672	CompoundStatement		99:95:2263:2263	5556973	1					
ANR	5557673	IfStatement	if ( ! ( p -> retleave_asm = ( char * ) malloc ( sz ) ) )		5556973	0					
ANR	5557674	Condition	! ( p -> retleave_asm = ( char * ) malloc ( sz ) )	266:6:7245:7285	5556973	0	True				
ANR	5557675	UnaryOperationExpression	! ( p -> retleave_asm = ( char * ) malloc ( sz ) )		5556973	0					
ANR	5557676	UnaryOperator	!		5556973	0					
ANR	5557677	AssignmentExpression	p -> retleave_asm = ( char * ) malloc ( sz )		5556973	1		=			
ANR	5557678	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557679	Identifier	p		5556973	0					
ANR	5557680	Identifier	retleave_asm		5556973	1					
ANR	5557681	CastExpression	( char * ) malloc ( sz )		5556973	1					
ANR	5557682	CastTarget	char *		5556973	0					
ANR	5557683	CallExpression	malloc ( sz )		5556973	1					
ANR	5557684	Callee	malloc		5556973	0					
ANR	5557685	Identifier	malloc		5556973	0					
ANR	5557686	ArgumentList	sz		5556973	1					
ANR	5557687	Argument	sz		5556973	0					
ANR	5557688	Identifier	sz		5556973	0					
ANR	5557689	CompoundStatement		100:49:2314:2314	5556973	1					
ANR	5557690	ReturnStatement	return false ;	267:3:7293:7305	5556973	0	True				
ANR	5557691	Identifier	false		5556973	0					
ANR	5557692	ExpressionStatement	"r_snprintf ( p -> retleave_asm , sz , ""return %s"" , w2 )"	269:2:7313:7362	5556973	1	True				
ANR	5557693	CallExpression	"r_snprintf ( p -> retleave_asm , sz , ""return %s"" , w2 )"		5556973	0					
ANR	5557694	Callee	r_snprintf		5556973	0					
ANR	5557695	Identifier	r_snprintf		5556973	0					
ANR	5557696	ArgumentList	p -> retleave_asm		5556973	1					
ANR	5557697	Argument	p -> retleave_asm		5556973	0					
ANR	5557698	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557699	Identifier	p		5556973	0					
ANR	5557700	Identifier	retleave_asm		5556973	1					
ANR	5557701	Argument	sz		5556973	1					
ANR	5557702	Identifier	sz		5556973	0					
ANR	5557703	Argument	"""return %s"""		5556973	2					
ANR	5557704	PrimaryExpression	"""return %s"""		5556973	0					
ANR	5557705	Argument	w2		5556973	3					
ANR	5557706	Identifier	w2		5556973	0					
ANR	5557707	ExpressionStatement	"replace ( nw , wa , str )"	270:2:7366:7387	5556973	2	True				
ANR	5557708	CallExpression	"replace ( nw , wa , str )"		5556973	0					
ANR	5557709	Callee	replace		5556973	0					
ANR	5557710	Identifier	replace		5556973	0					
ANR	5557711	ArgumentList	nw		5556973	1					
ANR	5557712	Argument	nw		5556973	0					
ANR	5557713	Identifier	nw		5556973	0					
ANR	5557714	Argument	wa		5556973	1					
ANR	5557715	Identifier	wa		5556973	0					
ANR	5557716	Argument	str		5556973	2					
ANR	5557717	Identifier	str		5556973	0					
ANR	5557718	ElseStatement	else		5556973	0					
ANR	5557719	IfStatement	"if ( ( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) ) )"		5556973	0					
ANR	5557720	Condition	"( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) )"	271:12:7401:7486	5556973	0	True				
ANR	5557721	OrExpression	"( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) )"		5556973	0		||			
ANR	5557722	AndExpression	"strstr ( w0 , ""leave"" ) && p -> retleave_asm"		5556973	0		&&			
ANR	5557723	CallExpression	"strstr ( w0 , ""leave"" )"		5556973	0					
ANR	5557724	Callee	strstr		5556973	0					
ANR	5557725	Identifier	strstr		5556973	0					
ANR	5557726	ArgumentList	w0		5556973	1					
ANR	5557727	Argument	w0		5556973	0					
ANR	5557728	Identifier	w0		5556973	0					
ANR	5557729	Argument	"""leave"""		5556973	1					
ANR	5557730	PrimaryExpression	"""leave"""		5556973	0					
ANR	5557731	PtrMemberAccess	p -> retleave_asm		5556973	1					
ANR	5557732	Identifier	p		5556973	0					
ANR	5557733	Identifier	retleave_asm		5556973	1					
ANR	5557734	AndExpression	"strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" )"		5556973	1		&&			
ANR	5557735	CallExpression	"strstr ( w0 , ""pop"" )"		5556973	0					
ANR	5557736	Callee	strstr		5556973	0					
ANR	5557737	Identifier	strstr		5556973	0					
ANR	5557738	ArgumentList	w0		5556973	1					
ANR	5557739	Argument	w0		5556973	0					
ANR	5557740	Identifier	w0		5556973	0					
ANR	5557741	Argument	"""pop"""		5556973	1					
ANR	5557742	PrimaryExpression	"""pop"""		5556973	0					
ANR	5557743	CallExpression	"strstr ( w1 , ""bp"" )"		5556973	1					
ANR	5557744	Callee	strstr		5556973	0					
ANR	5557745	Identifier	strstr		5556973	0					
ANR	5557746	ArgumentList	w1		5556973	1					
ANR	5557747	Argument	w1		5556973	0					
ANR	5557748	Identifier	w1		5556973	0					
ANR	5557749	Argument	"""bp"""		5556973	1					
ANR	5557750	PrimaryExpression	"""bp"""		5556973	0					
ANR	5557751	CompoundStatement		105:100:2515:2515	5556973	1					
ANR	5557752	ExpressionStatement	"r_str_ncpy ( wa [ 0 ] , "" \\0"" , 2 )"	272:2:7493:7521	5556973	0	True				
ANR	5557753	CallExpression	"r_str_ncpy ( wa [ 0 ] , "" \\0"" , 2 )"		5556973	0					
ANR	5557754	Callee	r_str_ncpy		5556973	0					
ANR	5557755	Identifier	r_str_ncpy		5556973	0					
ANR	5557756	ArgumentList	wa [ 0 ]		5556973	1					
ANR	5557757	Argument	wa [ 0 ]		5556973	0					
ANR	5557758	ArrayIndexing	wa [ 0 ]		5556973	0					
ANR	5557759	Identifier	wa		5556973	0					
ANR	5557760	PrimaryExpression	0		5556973	1					
ANR	5557761	Argument	""" \\0"""		5556973	1					
ANR	5557762	PrimaryExpression	""" \\0"""		5556973	0					
ANR	5557763	Argument	2		5556973	2					
ANR	5557764	PrimaryExpression	2		5556973	0					
ANR	5557765	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , "" \\0"" , 2 )"	273:2:7525:7553	5556973	1	True				
ANR	5557766	CallExpression	"r_str_ncpy ( wa [ 1 ] , "" \\0"" , 2 )"		5556973	0					
ANR	5557767	Callee	r_str_ncpy		5556973	0					
ANR	5557768	Identifier	r_str_ncpy		5556973	0					
ANR	5557769	ArgumentList	wa [ 1 ]		5556973	1					
ANR	5557770	Argument	wa [ 1 ]		5556973	0					
ANR	5557771	ArrayIndexing	wa [ 1 ]		5556973	0					
ANR	5557772	Identifier	wa		5556973	0					
ANR	5557773	PrimaryExpression	1		5556973	1					
ANR	5557774	Argument	""" \\0"""		5556973	1					
ANR	5557775	PrimaryExpression	""" \\0"""		5556973	0					
ANR	5557776	Argument	2		5556973	2					
ANR	5557777	PrimaryExpression	2		5556973	0					
ANR	5557778	ExpressionStatement	"replace ( nw , wa , str )"	274:2:7557:7578	5556973	2	True				
ANR	5557779	CallExpression	"replace ( nw , wa , str )"		5556973	0					
ANR	5557780	Callee	replace		5556973	0					
ANR	5557781	Identifier	replace		5556973	0					
ANR	5557782	ArgumentList	nw		5556973	1					
ANR	5557783	Argument	nw		5556973	0					
ANR	5557784	Identifier	nw		5556973	0					
ANR	5557785	Argument	wa		5556973	1					
ANR	5557786	Identifier	wa		5556973	0					
ANR	5557787	Argument	str		5556973	2					
ANR	5557788	Identifier	str		5556973	0					
ANR	5557789	ElseStatement	else		5556973	0					
ANR	5557790	IfStatement	"if ( strstr ( w0 , ""ret"" ) && p -> retleave_asm )"		5556973	0					
ANR	5557791	Condition	"strstr ( w0 , ""ret"" ) && p -> retleave_asm"	275:12:7592:7628	5556973	0	True				
ANR	5557792	AndExpression	"strstr ( w0 , ""ret"" ) && p -> retleave_asm"		5556973	0		&&			
ANR	5557793	CallExpression	"strstr ( w0 , ""ret"" )"		5556973	0					
ANR	5557794	Callee	strstr		5556973	0					
ANR	5557795	Identifier	strstr		5556973	0					
ANR	5557796	ArgumentList	w0		5556973	1					
ANR	5557797	Argument	w0		5556973	0					
ANR	5557798	Identifier	w0		5556973	0					
ANR	5557799	Argument	"""ret"""		5556973	1					
ANR	5557800	PrimaryExpression	"""ret"""		5556973	0					
ANR	5557801	PtrMemberAccess	p -> retleave_asm		5556973	1					
ANR	5557802	Identifier	p		5556973	0					
ANR	5557803	Identifier	retleave_asm		5556973	1					
ANR	5557804	CompoundStatement		109:51:2657:2657	5556973	1					
ANR	5557805	ExpressionStatement	"r_str_ncpy ( str , p -> retleave_asm , sz )"	276:2:7635:7672	5556973	0	True				
ANR	5557806	CallExpression	"r_str_ncpy ( str , p -> retleave_asm , sz )"		5556973	0					
ANR	5557807	Callee	r_str_ncpy		5556973	0					
ANR	5557808	Identifier	r_str_ncpy		5556973	0					
ANR	5557809	ArgumentList	str		5556973	1					
ANR	5557810	Argument	str		5556973	0					
ANR	5557811	Identifier	str		5556973	0					
ANR	5557812	Argument	p -> retleave_asm		5556973	1					
ANR	5557813	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557814	Identifier	p		5556973	0					
ANR	5557815	Identifier	retleave_asm		5556973	1					
ANR	5557816	Argument	sz		5556973	2					
ANR	5557817	Identifier	sz		5556973	0					
ANR	5557818	ExpressionStatement	R_FREE ( p -> retleave_asm )	277:2:7676:7700	5556973	1	True				
ANR	5557819	CallExpression	R_FREE ( p -> retleave_asm )		5556973	0					
ANR	5557820	Callee	R_FREE		5556973	0					
ANR	5557821	Identifier	R_FREE		5556973	0					
ANR	5557822	ArgumentList	p -> retleave_asm		5556973	1					
ANR	5557823	Argument	p -> retleave_asm		5556973	0					
ANR	5557824	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557825	Identifier	p		5556973	0					
ANR	5557826	Identifier	retleave_asm		5556973	1					
ANR	5557827	ElseStatement	else		5556973	0					
ANR	5557828	IfStatement	if ( p -> retleave_asm )		5556973	0					
ANR	5557829	Condition	p -> retleave_asm	278:12:7714:7728	5556973	0	True				
ANR	5557830	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557831	Identifier	p		5556973	0					
ANR	5557832	Identifier	retleave_asm		5556973	1					
ANR	5557833	CompoundStatement		112:29:2757:2757	5556973	1					
ANR	5557834	ExpressionStatement	R_FREE ( p -> retleave_asm )	279:2:7735:7759	5556973	0	True				
ANR	5557835	CallExpression	R_FREE ( p -> retleave_asm )		5556973	0					
ANR	5557836	Callee	R_FREE		5556973	0					
ANR	5557837	Identifier	R_FREE		5556973	0					
ANR	5557838	ArgumentList	p -> retleave_asm		5556973	1					
ANR	5557839	Argument	p -> retleave_asm		5556973	0					
ANR	5557840	PtrMemberAccess	p -> retleave_asm		5556973	0					
ANR	5557841	Identifier	p		5556973	0					
ANR	5557842	Identifier	retleave_asm		5556973	1					
ANR	5557843	ExpressionStatement	"replace ( nw , wa , str )"	280:2:7763:7784	5556973	1	True				
ANR	5557844	CallExpression	"replace ( nw , wa , str )"		5556973	0					
ANR	5557845	Callee	replace		5556973	0					
ANR	5557846	Identifier	replace		5556973	0					
ANR	5557847	ArgumentList	nw		5556973	1					
ANR	5557848	Argument	nw		5556973	0					
ANR	5557849	Identifier	nw		5556973	0					
ANR	5557850	Argument	wa		5556973	1					
ANR	5557851	Identifier	wa		5556973	0					
ANR	5557852	Argument	str		5556973	2					
ANR	5557853	Identifier	str		5556973	0					
ANR	5557854	ElseStatement	else		5556973	0					
ANR	5557855	CompoundStatement		115:8:2820:2820	5556973	0					
ANR	5557856	ExpressionStatement	"replace ( nw , wa , str )"	282:2:7798:7819	5556973	0	True				
ANR	5557857	CallExpression	"replace ( nw , wa , str )"		5556973	0					
ANR	5557858	Callee	replace		5556973	0					
ANR	5557859	Identifier	replace		5556973	0					
ANR	5557860	ArgumentList	nw		5556973	1					
ANR	5557861	Argument	nw		5556973	0					
ANR	5557862	Identifier	nw		5556973	0					
ANR	5557863	Argument	wa		5556973	1					
ANR	5557864	Identifier	wa		5556973	0					
ANR	5557865	Argument	str		5556973	2					
ANR	5557866	Identifier	str		5556973	0					
ANR	5557867	ExpressionStatement	free ( buf )	284:1:7825:7835	5556973	13	True				
ANR	5557868	CallExpression	free ( buf )		5556973	0					
ANR	5557869	Callee	free		5556973	0					
ANR	5557870	Identifier	free		5556973	0					
ANR	5557871	ArgumentList	buf		5556973	1					
ANR	5557872	Argument	buf		5556973	0					
ANR	5557873	Identifier	buf		5556973	0					
ANR	5557874	ReturnStatement	return true ;	285:1:7838:7849	5556973	14	True				
ANR	5557875	Identifier	true		5556973	0					
ANR	5557876	ReturnType	static int		5556973	1					
ANR	5557877	Identifier	parse		5556973	2					
ANR	5557878	ParameterList	"RParse * p , const char * data , char * str"		5556973	3					
ANR	5557879	Parameter	RParse * p	167:18:4933:4941	5556973	0	True				
ANR	5557880	ParameterType	RParse *		5556973	0					
ANR	5557881	Identifier	p		5556973	1					
ANR	5557882	Parameter	const char * data	167:29:4944:4959	5556973	1	True				
ANR	5557883	ParameterType	const char *		5556973	0					
ANR	5557884	Identifier	data		5556973	1					
ANR	5557885	Parameter	char * str	167:47:4962:4970	5556973	2	True				
ANR	5557886	ParameterType	char *		5556973	0					
ANR	5557887	Identifier	str		5556973	1					
ANR	5557888	CFGEntryNode	ENTRY		5556973		True				
ANR	5557889	CFGExitNode	EXIT		5556973		True				
ANR	5557890	Symbol	* w3		5556973						
ANR	5557891	Symbol	* w2		5556973						
ANR	5557892	Symbol	* w1		5556973						
ANR	5557893	Symbol	data		5556973						
ANR	5557894	Symbol	strchr		5556973						
ANR	5557895	Symbol	nw		5556973						
ANR	5557896	Symbol	wa		5556973						
ANR	5557897	Symbol	p -> retleave_asm		5556973						
ANR	5557898	Symbol	strlen		5556973						
ANR	5557899	Symbol	* wa		5556973						
ANR	5557900	Symbol	len		5556973						
ANR	5557901	Symbol	* ptr		5556973						
ANR	5557902	Symbol	w0		5556973						
ANR	5557903	Symbol	w1		5556973						
ANR	5557904	Symbol	end		5556973						
ANR	5557905	Symbol	w2		5556973						
ANR	5557906	Symbol	w3		5556973						
ANR	5557907	Symbol	* w0		5556973						
ANR	5557908	Symbol	malloc		5556973						
ANR	5557909	Symbol	* buf		5556973						
ANR	5557910	Symbol	* * i		5556973						
ANR	5557911	Symbol	sz		5556973						
ANR	5557912	Symbol	false		5556973						
ANR	5557913	Symbol	i		5556973						
ANR	5557914	Symbol	optr		5556973						
ANR	5557915	Symbol	ptr		5556973						
ANR	5557916	Symbol	p		5556973						
ANR	5557917	Symbol	str		5556973						
ANR	5557918	Symbol	buf		5556973						
ANR	5557919	Symbol	* i		5556973						
ANR	5557920	Symbol	* * wa		5556973						
ANR	5557921	Symbol	strstr		5556973						
ANR	5557922	Symbol	true		5556973						
ANR	5557923	Symbol	* p		5556973						
ANR	5557924	Symbol	strdup		5556973						
ANR	5557925	Function	ishexch	289:0:7860:8003							
ANR	5557926	FunctionDef	ishexch (char c)		5557925	0					
ANR	5557927	CompoundStatement		289:35:7895:8003	5557925	0					
ANR	5557928	IfStatement	if ( c >= 0 && c <= 9 )		5557925	0					
ANR	5557929	Condition	c >= 0 && c <= 9	290:5:7902:7913	5557925	0	True				
ANR	5557930	AndExpression	c >= 0 && c <= 9		5557925	0		&&			
ANR	5557931	RelationalExpression	c >= 0		5557925	0		>=			
ANR	5557932	Identifier	c		5557925	0					
ANR	5557933	PrimaryExpression	0		5557925	1					
ANR	5557934	RelationalExpression	c <= 9		5557925	1		<=			
ANR	5557935	Identifier	c		5557925	0					
ANR	5557936	PrimaryExpression	9		5557925	1					
ANR	5557937	ReturnStatement	return 1 ;	290:19:7916:7924	5557925	1	True				
ANR	5557938	PrimaryExpression	1		5557925	0					
ANR	5557939	IfStatement	if ( c >= 'a' && c <= 'f' )		5557925	1					
ANR	5557940	Condition	c >= 'a' && c <= 'f'	291:5:7931:7946	5557925	0	True				
ANR	5557941	AndExpression	c >= 'a' && c <= 'f'		5557925	0		&&			
ANR	5557942	RelationalExpression	c >= 'a'		5557925	0		>=			
ANR	5557943	Identifier	c		5557925	0					
ANR	5557944	PrimaryExpression	'a'		5557925	1					
ANR	5557945	RelationalExpression	c <= 'f'		5557925	1		<=			
ANR	5557946	Identifier	c		5557925	0					
ANR	5557947	PrimaryExpression	'f'		5557925	1					
ANR	5557948	ReturnStatement	return 1 ;	291:23:7949:7957	5557925	1	True				
ANR	5557949	PrimaryExpression	1		5557925	0					
ANR	5557950	IfStatement	if ( c >= 'A' && c <= 'F' )		5557925	2					
ANR	5557951	Condition	c >= 'A' && c <= 'F'	292:5:7964:7979	5557925	0	True				
ANR	5557952	AndExpression	c >= 'A' && c <= 'F'		5557925	0		&&			
ANR	5557953	RelationalExpression	c >= 'A'		5557925	0		>=			
ANR	5557954	Identifier	c		5557925	0					
ANR	5557955	PrimaryExpression	'A'		5557925	1					
ANR	5557956	RelationalExpression	c <= 'F'		5557925	1		<=			
ANR	5557957	Identifier	c		5557925	0					
ANR	5557958	PrimaryExpression	'F'		5557925	1					
ANR	5557959	ReturnStatement	return 1 ;	292:23:7982:7990	5557925	1	True				
ANR	5557960	PrimaryExpression	1		5557925	0					
ANR	5557961	ReturnStatement	return 0 ;	293:1:7993:8001	5557925	3	True				
ANR	5557962	PrimaryExpression	0		5557925	0					
ANR	5557963	ReturnType	static inline int		5557925	1					
ANR	5557964	Identifier	ishexch		5557925	2					
ANR	5557965	ParameterList	char c		5557925	3					
ANR	5557966	Parameter	char c	289:27:7887:7892	5557925	0	True				
ANR	5557967	ParameterType	char		5557925	0					
ANR	5557968	Identifier	c		5557925	1					
ANR	5557969	CFGEntryNode	ENTRY		5557925		True				
ANR	5557970	CFGExitNode	EXIT		5557925		True				
ANR	5557971	Symbol	c		5557925						
ANR	5557972	Function	issegoff	296:0:8006:8324							
ANR	5557973	FunctionDef	issegoff (const char * w)		5557972	0					
ANR	5557974	CompoundStatement		296:43:8049:8324	5557972	0					
ANR	5557975	IfStatement	if ( ! ishexch ( w [ 0 ] ) )		5557972	0					
ANR	5557976	Condition	! ishexch ( w [ 0 ] )	297:5:8056:8070	5557972	0	True				
ANR	5557977	UnaryOperationExpression	! ishexch ( w [ 0 ] )		5557972	0					
ANR	5557978	UnaryOperator	!		5557972	0					
ANR	5557979	CallExpression	ishexch ( w [ 0 ] )		5557972	1					
ANR	5557980	Callee	ishexch		5557972	0					
ANR	5557981	Identifier	ishexch		5557972	0					
ANR	5557982	ArgumentList	w [ 0 ]		5557972	1					
ANR	5557983	Argument	w [ 0 ]		5557972	0					
ANR	5557984	ArrayIndexing	w [ 0 ]		5557972	0					
ANR	5557985	Identifier	w		5557972	0					
ANR	5557986	PrimaryExpression	0		5557972	1					
ANR	5557987	ReturnStatement	return 0 ;	297:22:8073:8081	5557972	1	True				
ANR	5557988	PrimaryExpression	0		5557972	0					
ANR	5557989	IfStatement	if ( ! ishexch ( w [ 1 ] ) )		5557972	1					
ANR	5557990	Condition	! ishexch ( w [ 1 ] )	298:5:8088:8102	5557972	0	True				
ANR	5557991	UnaryOperationExpression	! ishexch ( w [ 1 ] )		5557972	0					
ANR	5557992	UnaryOperator	!		5557972	0					
ANR	5557993	CallExpression	ishexch ( w [ 1 ] )		5557972	1					
ANR	5557994	Callee	ishexch		5557972	0					
ANR	5557995	Identifier	ishexch		5557972	0					
ANR	5557996	ArgumentList	w [ 1 ]		5557972	1					
ANR	5557997	Argument	w [ 1 ]		5557972	0					
ANR	5557998	ArrayIndexing	w [ 1 ]		5557972	0					
ANR	5557999	Identifier	w		5557972	0					
ANR	5558000	PrimaryExpression	1		5557972	1					
ANR	5558001	ReturnStatement	return 0 ;	298:22:8105:8113	5557972	1	True				
ANR	5558002	PrimaryExpression	0		5557972	0					
ANR	5558003	IfStatement	if ( ! ishexch ( w [ 2 ] ) )		5557972	2					
ANR	5558004	Condition	! ishexch ( w [ 2 ] )	299:5:8120:8134	5557972	0	True				
ANR	5558005	UnaryOperationExpression	! ishexch ( w [ 2 ] )		5557972	0					
ANR	5558006	UnaryOperator	!		5557972	0					
ANR	5558007	CallExpression	ishexch ( w [ 2 ] )		5557972	1					
ANR	5558008	Callee	ishexch		5557972	0					
ANR	5558009	Identifier	ishexch		5557972	0					
ANR	5558010	ArgumentList	w [ 2 ]		5557972	1					
ANR	5558011	Argument	w [ 2 ]		5557972	0					
ANR	5558012	ArrayIndexing	w [ 2 ]		5557972	0					
ANR	5558013	Identifier	w		5557972	0					
ANR	5558014	PrimaryExpression	2		5557972	1					
ANR	5558015	ReturnStatement	return 0 ;	299:22:8137:8145	5557972	1	True				
ANR	5558016	PrimaryExpression	0		5557972	0					
ANR	5558017	IfStatement	if ( ! ishexch ( w [ 3 ] ) )		5557972	3					
ANR	5558018	Condition	! ishexch ( w [ 3 ] )	300:5:8152:8166	5557972	0	True				
ANR	5558019	UnaryOperationExpression	! ishexch ( w [ 3 ] )		5557972	0					
ANR	5558020	UnaryOperator	!		5557972	0					
ANR	5558021	CallExpression	ishexch ( w [ 3 ] )		5557972	1					
ANR	5558022	Callee	ishexch		5557972	0					
ANR	5558023	Identifier	ishexch		5557972	0					
ANR	5558024	ArgumentList	w [ 3 ]		5557972	1					
ANR	5558025	Argument	w [ 3 ]		5557972	0					
ANR	5558026	ArrayIndexing	w [ 3 ]		5557972	0					
ANR	5558027	Identifier	w		5557972	0					
ANR	5558028	PrimaryExpression	3		5557972	1					
ANR	5558029	ReturnStatement	return 0 ;	300:22:8169:8177	5557972	1	True				
ANR	5558030	PrimaryExpression	0		5557972	0					
ANR	5558031	IfStatement	if ( ! ishexch ( w [ 5 ] ) )		5557972	4					
ANR	5558032	Condition	! ishexch ( w [ 5 ] )	302:5:8190:8204	5557972	0	True				
ANR	5558033	UnaryOperationExpression	! ishexch ( w [ 5 ] )		5557972	0					
ANR	5558034	UnaryOperator	!		5557972	0					
ANR	5558035	CallExpression	ishexch ( w [ 5 ] )		5557972	1					
ANR	5558036	Callee	ishexch		5557972	0					
ANR	5558037	Identifier	ishexch		5557972	0					
ANR	5558038	ArgumentList	w [ 5 ]		5557972	1					
ANR	5558039	Argument	w [ 5 ]		5557972	0					
ANR	5558040	ArrayIndexing	w [ 5 ]		5557972	0					
ANR	5558041	Identifier	w		5557972	0					
ANR	5558042	PrimaryExpression	5		5557972	1					
ANR	5558043	ReturnStatement	return 0 ;	302:22:8207:8215	5557972	1	True				
ANR	5558044	PrimaryExpression	0		5557972	0					
ANR	5558045	IfStatement	if ( ! ishexch ( w [ 6 ] ) )		5557972	5					
ANR	5558046	Condition	! ishexch ( w [ 6 ] )	303:5:8222:8236	5557972	0	True				
ANR	5558047	UnaryOperationExpression	! ishexch ( w [ 6 ] )		5557972	0					
ANR	5558048	UnaryOperator	!		5557972	0					
ANR	5558049	CallExpression	ishexch ( w [ 6 ] )		5557972	1					
ANR	5558050	Callee	ishexch		5557972	0					
ANR	5558051	Identifier	ishexch		5557972	0					
ANR	5558052	ArgumentList	w [ 6 ]		5557972	1					
ANR	5558053	Argument	w [ 6 ]		5557972	0					
ANR	5558054	ArrayIndexing	w [ 6 ]		5557972	0					
ANR	5558055	Identifier	w		5557972	0					
ANR	5558056	PrimaryExpression	6		5557972	1					
ANR	5558057	ReturnStatement	return 0 ;	303:22:8239:8247	5557972	1	True				
ANR	5558058	PrimaryExpression	0		5557972	0					
ANR	5558059	IfStatement	if ( ! ishexch ( w [ 7 ] ) )		5557972	6					
ANR	5558060	Condition	! ishexch ( w [ 7 ] )	304:5:8254:8268	5557972	0	True				
ANR	5558061	UnaryOperationExpression	! ishexch ( w [ 7 ] )		5557972	0					
ANR	5558062	UnaryOperator	!		5557972	0					
ANR	5558063	CallExpression	ishexch ( w [ 7 ] )		5557972	1					
ANR	5558064	Callee	ishexch		5557972	0					
ANR	5558065	Identifier	ishexch		5557972	0					
ANR	5558066	ArgumentList	w [ 7 ]		5557972	1					
ANR	5558067	Argument	w [ 7 ]		5557972	0					
ANR	5558068	ArrayIndexing	w [ 7 ]		5557972	0					
ANR	5558069	Identifier	w		5557972	0					
ANR	5558070	PrimaryExpression	7		5557972	1					
ANR	5558071	ReturnStatement	return 0 ;	304:22:8271:8279	5557972	1	True				
ANR	5558072	PrimaryExpression	0		5557972	0					
ANR	5558073	IfStatement	if ( ! ishexch ( w [ 8 ] ) )		5557972	7					
ANR	5558074	Condition	! ishexch ( w [ 8 ] )	305:5:8286:8300	5557972	0	True				
ANR	5558075	UnaryOperationExpression	! ishexch ( w [ 8 ] )		5557972	0					
ANR	5558076	UnaryOperator	!		5557972	0					
ANR	5558077	CallExpression	ishexch ( w [ 8 ] )		5557972	1					
ANR	5558078	Callee	ishexch		5557972	0					
ANR	5558079	Identifier	ishexch		5557972	0					
ANR	5558080	ArgumentList	w [ 8 ]		5557972	1					
ANR	5558081	Argument	w [ 8 ]		5557972	0					
ANR	5558082	ArrayIndexing	w [ 8 ]		5557972	0					
ANR	5558083	Identifier	w		5557972	0					
ANR	5558084	PrimaryExpression	8		5557972	1					
ANR	5558085	ReturnStatement	return 0 ;	305:22:8303:8311	5557972	1	True				
ANR	5558086	PrimaryExpression	0		5557972	0					
ANR	5558087	ReturnStatement	return 1 ;	306:1:8314:8322	5557972	8	True				
ANR	5558088	PrimaryExpression	1		5557972	0					
ANR	5558089	ReturnType	static inline int		5557972	1					
ANR	5558090	Identifier	issegoff		5557972	2					
ANR	5558091	ParameterList	const char * w		5557972	3					
ANR	5558092	Parameter	const char * w	296:28:8034:8046	5557972	0	True				
ANR	5558093	ParameterType	const char *		5557972	0					
ANR	5558094	Identifier	w		5557972	1					
ANR	5558095	CFGEntryNode	ENTRY		5557972		True				
ANR	5558096	CFGExitNode	EXIT		5557972		True				
ANR	5558097	Symbol	* w		5557972						
ANR	5558098	Symbol	ishexch		5557972						
ANR	5558099	Symbol	w		5557972						
ANR	5558100	Function	parse_localvar	310:0:8334:9125							
ANR	5558101	FunctionDef	"parse_localvar (RParse * p , char * newstr , size_t newstr_len , const char * var , const char * reg , char sign , char * ireg , bool att)"		5558100	0					
ANR	5558102	CompoundStatement		310:139:8473:9125	5558100	0					
ANR	5558103	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	311:1:8476:8507	5558100	0	True				
ANR	5558104	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5558100	0					
ANR	5558105	IdentifierDeclType	RStrBuf *		5558100	0					
ANR	5558106	Identifier	sb		5558100	1					
ANR	5558107	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5558100	2		=			
ANR	5558108	Identifier	sb		5558100	0					
ANR	5558109	CallExpression	"r_strbuf_new ( """" )"		5558100	1					
ANR	5558110	Callee	r_strbuf_new		5558100	0					
ANR	5558111	Identifier	r_strbuf_new		5558100	0					
ANR	5558112	ArgumentList	""""""		5558100	1					
ANR	5558113	Argument	""""""		5558100	0					
ANR	5558114	PrimaryExpression	""""""		5558100	0					
ANR	5558115	IfStatement	if ( att )		5558100	1					
ANR	5558116	Condition	att	312:5:8514:8516	5558100	0	True				
ANR	5558117	Identifier	att		5558100	0					
ANR	5558118	CompoundStatement		3:10:45:45	5558100	1					
ANR	5558119	IfStatement	if ( p -> localvar_only )		5558100	0					
ANR	5558120	Condition	p -> localvar_only	313:6:8527:8542	5558100	0	True				
ANR	5558121	PtrMemberAccess	p -> localvar_only		5558100	0					
ANR	5558122	Identifier	p		5558100	0					
ANR	5558123	Identifier	localvar_only		5558100	1					
ANR	5558124	CompoundStatement		4:24:71:71	5558100	1					
ANR	5558125	IfStatement	if ( ireg )		5558100	0					
ANR	5558126	Condition	ireg	314:7:8554:8557	5558100	0	True				
ANR	5558127	Identifier	ireg		5558100	0					
ANR	5558128	CompoundStatement		5:13:86:86	5558100	1					
ANR	5558129	ExpressionStatement	"r_strbuf_setf ( sb , ""(%%%s)"" , ireg )"	315:4:8566:8600	5558100	0	True				
ANR	5558130	CallExpression	"r_strbuf_setf ( sb , ""(%%%s)"" , ireg )"		5558100	0					
ANR	5558131	Callee	r_strbuf_setf		5558100	0					
ANR	5558132	Identifier	r_strbuf_setf		5558100	0					
ANR	5558133	ArgumentList	sb		5558100	1					
ANR	5558134	Argument	sb		5558100	0					
ANR	5558135	Identifier	sb		5558100	0					
ANR	5558136	Argument	"""(%%%s)"""		5558100	1					
ANR	5558137	PrimaryExpression	"""(%%%s)"""		5558100	0					
ANR	5558138	Argument	ireg		5558100	2					
ANR	5558139	Identifier	ireg		5558100	0					
ANR	5558140	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""%s%s"" , var , r_strbuf_get ( sb ) )"	317:3:8610:8675	5558100	1	True				
ANR	5558141	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""%s%s"" , var , r_strbuf_get ( sb ) )"		5558100	0					
ANR	5558142	Callee	snprintf		5558100	0					
ANR	5558143	Identifier	snprintf		5558100	0					
ANR	5558144	ArgumentList	newstr		5558100	1					
ANR	5558145	Argument	newstr		5558100	0					
ANR	5558146	Identifier	newstr		5558100	0					
ANR	5558147	Argument	newstr_len - 1		5558100	1					
ANR	5558148	AdditiveExpression	newstr_len - 1		5558100	0		-			
ANR	5558149	Identifier	newstr_len		5558100	0					
ANR	5558150	PrimaryExpression	1		5558100	1					
ANR	5558151	Argument	"""%s%s"""		5558100	2					
ANR	5558152	PrimaryExpression	"""%s%s"""		5558100	0					
ANR	5558153	Argument	var		5558100	3					
ANR	5558154	Identifier	var		5558100	0					
ANR	5558155	Argument	r_strbuf_get ( sb )		5558100	4					
ANR	5558156	CallExpression	r_strbuf_get ( sb )		5558100	0					
ANR	5558157	Callee	r_strbuf_get		5558100	0					
ANR	5558158	Identifier	r_strbuf_get		5558100	0					
ANR	5558159	ArgumentList	sb		5558100	1					
ANR	5558160	Argument	sb		5558100	0					
ANR	5558161	Identifier	sb		5558100	0					
ANR	5558162	ElseStatement	else		5558100	0					
ANR	5558163	CompoundStatement		9:9:212:212	5558100	0					
ANR	5558164	IfStatement	if ( ireg )		5558100	0					
ANR	5558165	Condition	ireg	319:7:8695:8698	5558100	0	True				
ANR	5558166	Identifier	ireg		5558100	0					
ANR	5558167	CompoundStatement		10:13:227:227	5558100	1					
ANR	5558168	ExpressionStatement	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"	320:4:8707:8741	5558100	0	True				
ANR	5558169	CallExpression	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"		5558100	0					
ANR	5558170	Callee	r_strbuf_setf		5558100	0					
ANR	5558171	Identifier	r_strbuf_setf		5558100	0					
ANR	5558172	ArgumentList	sb		5558100	1					
ANR	5558173	Argument	sb		5558100	0					
ANR	5558174	Identifier	sb		5558100	0					
ANR	5558175	Argument	""", %%%s"""		5558100	1					
ANR	5558176	PrimaryExpression	""", %%%s"""		5558100	0					
ANR	5558177	Argument	ireg		5558100	2					
ANR	5558178	Identifier	ireg		5558100	0					
ANR	5558179	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""%s(%%%s%s)"" , var , reg , r_strbuf_get ( sb ) )"	322:3:8751:8827	5558100	1	True				
ANR	5558180	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""%s(%%%s%s)"" , var , reg , r_strbuf_get ( sb ) )"		5558100	0					
ANR	5558181	Callee	snprintf		5558100	0					
ANR	5558182	Identifier	snprintf		5558100	0					
ANR	5558183	ArgumentList	newstr		5558100	1					
ANR	5558184	Argument	newstr		5558100	0					
ANR	5558185	Identifier	newstr		5558100	0					
ANR	5558186	Argument	newstr_len - 1		5558100	1					
ANR	5558187	AdditiveExpression	newstr_len - 1		5558100	0		-			
ANR	5558188	Identifier	newstr_len		5558100	0					
ANR	5558189	PrimaryExpression	1		5558100	1					
ANR	5558190	Argument	"""%s(%%%s%s)"""		5558100	2					
ANR	5558191	PrimaryExpression	"""%s(%%%s%s)"""		5558100	0					
ANR	5558192	Argument	var		5558100	3					
ANR	5558193	Identifier	var		5558100	0					
ANR	5558194	Argument	reg		5558100	4					
ANR	5558195	Identifier	reg		5558100	0					
ANR	5558196	Argument	r_strbuf_get ( sb )		5558100	5					
ANR	5558197	CallExpression	r_strbuf_get ( sb )		5558100	0					
ANR	5558198	Callee	r_strbuf_get		5558100	0					
ANR	5558199	Identifier	r_strbuf_get		5558100	0					
ANR	5558200	ArgumentList	sb		5558100	1					
ANR	5558201	Argument	sb		5558100	0					
ANR	5558202	Identifier	sb		5558100	0					
ANR	5558203	ElseStatement	else		5558100	0					
ANR	5558204	CompoundStatement		15:8:367:367	5558100	0					
ANR	5558205	IfStatement	if ( ireg )		5558100	0					
ANR	5558206	Condition	ireg	325:6:8849:8852	5558100	0	True				
ANR	5558207	Identifier	ireg		5558100	0					
ANR	5558208	CompoundStatement		16:12:381:381	5558100	1					
ANR	5558209	ExpressionStatement	"r_strbuf_setf ( sb , "" + %s"" , ireg )"	326:3:8860:8893	5558100	0	True				
ANR	5558210	CallExpression	"r_strbuf_setf ( sb , "" + %s"" , ireg )"		5558100	0					
ANR	5558211	Callee	r_strbuf_setf		5558100	0					
ANR	5558212	Identifier	r_strbuf_setf		5558100	0					
ANR	5558213	ArgumentList	sb		5558100	1					
ANR	5558214	Argument	sb		5558100	0					
ANR	5558215	Identifier	sb		5558100	0					
ANR	5558216	Argument	""" + %s"""		5558100	1					
ANR	5558217	PrimaryExpression	""" + %s"""		5558100	0					
ANR	5558218	Argument	ireg		5558100	2					
ANR	5558219	Identifier	ireg		5558100	0					
ANR	5558220	IfStatement	if ( p -> localvar_only )		5558100	1					
ANR	5558221	Condition	p -> localvar_only	328:6:8905:8920	5558100	0	True				
ANR	5558222	PtrMemberAccess	p -> localvar_only		5558100	0					
ANR	5558223	Identifier	p		5558100	0					
ANR	5558224	Identifier	localvar_only		5558100	1					
ANR	5558225	CompoundStatement		19:24:449:449	5558100	1					
ANR	5558226	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""[%s%s]"" , var , r_strbuf_get ( sb ) )"	329:3:8928:8995	5558100	0	True				
ANR	5558227	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""[%s%s]"" , var , r_strbuf_get ( sb ) )"		5558100	0					
ANR	5558228	Callee	snprintf		5558100	0					
ANR	5558229	Identifier	snprintf		5558100	0					
ANR	5558230	ArgumentList	newstr		5558100	1					
ANR	5558231	Argument	newstr		5558100	0					
ANR	5558232	Identifier	newstr		5558100	0					
ANR	5558233	Argument	newstr_len - 1		5558100	1					
ANR	5558234	AdditiveExpression	newstr_len - 1		5558100	0		-			
ANR	5558235	Identifier	newstr_len		5558100	0					
ANR	5558236	PrimaryExpression	1		5558100	1					
ANR	5558237	Argument	"""[%s%s]"""		5558100	2					
ANR	5558238	PrimaryExpression	"""[%s%s]"""		5558100	0					
ANR	5558239	Argument	var		5558100	3					
ANR	5558240	Identifier	var		5558100	0					
ANR	5558241	Argument	r_strbuf_get ( sb )		5558100	4					
ANR	5558242	CallExpression	r_strbuf_get ( sb )		5558100	0					
ANR	5558243	Callee	r_strbuf_get		5558100	0					
ANR	5558244	Identifier	r_strbuf_get		5558100	0					
ANR	5558245	ArgumentList	sb		5558100	1					
ANR	5558246	Argument	sb		5558100	0					
ANR	5558247	Identifier	sb		5558100	0					
ANR	5558248	ElseStatement	else		5558100	0					
ANR	5558249	CompoundStatement		21:9:532:532	5558100	0					
ANR	5558250	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""[%s%s %c %s]"" , reg , r_strbuf_get ( sb ) , sign , var )"	331:3:9011:9095	5558100	0	True				
ANR	5558251	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""[%s%s %c %s]"" , reg , r_strbuf_get ( sb ) , sign , var )"		5558100	0					
ANR	5558252	Callee	snprintf		5558100	0					
ANR	5558253	Identifier	snprintf		5558100	0					
ANR	5558254	ArgumentList	newstr		5558100	1					
ANR	5558255	Argument	newstr		5558100	0					
ANR	5558256	Identifier	newstr		5558100	0					
ANR	5558257	Argument	newstr_len - 1		5558100	1					
ANR	5558258	AdditiveExpression	newstr_len - 1		5558100	0		-			
ANR	5558259	Identifier	newstr_len		5558100	0					
ANR	5558260	PrimaryExpression	1		5558100	1					
ANR	5558261	Argument	"""[%s%s %c %s]"""		5558100	2					
ANR	5558262	PrimaryExpression	"""[%s%s %c %s]"""		5558100	0					
ANR	5558263	Argument	reg		5558100	3					
ANR	5558264	Identifier	reg		5558100	0					
ANR	5558265	Argument	r_strbuf_get ( sb )		5558100	4					
ANR	5558266	CallExpression	r_strbuf_get ( sb )		5558100	0					
ANR	5558267	Callee	r_strbuf_get		5558100	0					
ANR	5558268	Identifier	r_strbuf_get		5558100	0					
ANR	5558269	ArgumentList	sb		5558100	1					
ANR	5558270	Argument	sb		5558100	0					
ANR	5558271	Identifier	sb		5558100	0					
ANR	5558272	Argument	sign		5558100	5					
ANR	5558273	Identifier	sign		5558100	0					
ANR	5558274	Argument	var		5558100	6					
ANR	5558275	Identifier	var		5558100	0					
ANR	5558276	ExpressionStatement	r_strbuf_free ( sb )	334:1:9105:9123	5558100	2	True				
ANR	5558277	CallExpression	r_strbuf_free ( sb )		5558100	0					
ANR	5558278	Callee	r_strbuf_free		5558100	0					
ANR	5558279	Identifier	r_strbuf_free		5558100	0					
ANR	5558280	ArgumentList	sb		5558100	1					
ANR	5558281	Argument	sb		5558100	0					
ANR	5558282	Identifier	sb		5558100	0					
ANR	5558283	ReturnType	static void		5558100	1					
ANR	5558284	Identifier	parse_localvar		5558100	2					
ANR	5558285	ParameterList	"RParse * p , char * newstr , size_t newstr_len , const char * var , const char * reg , char sign , char * ireg , bool att"		5558100	3					
ANR	5558286	Parameter	RParse * p	310:28:8362:8370	5558100	0	True				
ANR	5558287	ParameterType	RParse *		5558100	0					
ANR	5558288	Identifier	p		5558100	1					
ANR	5558289	Parameter	char * newstr	310:39:8373:8384	5558100	1	True				
ANR	5558290	ParameterType	char *		5558100	0					
ANR	5558291	Identifier	newstr		5558100	1					
ANR	5558292	Parameter	size_t newstr_len	310:53:8387:8403	5558100	2	True				
ANR	5558293	ParameterType	size_t		5558100	0					
ANR	5558294	Identifier	newstr_len		5558100	1					
ANR	5558295	Parameter	const char * var	310:72:8406:8420	5558100	3	True				
ANR	5558296	ParameterType	const char *		5558100	0					
ANR	5558297	Identifier	var		5558100	1					
ANR	5558298	Parameter	const char * reg	310:89:8423:8437	5558100	4	True				
ANR	5558299	ParameterType	const char *		5558100	0					
ANR	5558300	Identifier	reg		5558100	1					
ANR	5558301	Parameter	char sign	310:106:8440:8448	5558100	5	True				
ANR	5558302	ParameterType	char		5558100	0					
ANR	5558303	Identifier	sign		5558100	1					
ANR	5558304	Parameter	char * ireg	310:117:8451:8460	5558100	6	True				
ANR	5558305	ParameterType	char *		5558100	0					
ANR	5558306	Identifier	ireg		5558100	1					
ANR	5558307	Parameter	bool att	310:129:8463:8470	5558100	7	True				
ANR	5558308	ParameterType	bool		5558100	0					
ANR	5558309	Identifier	att		5558100	1					
ANR	5558310	CFGEntryNode	ENTRY		5558100		True				
ANR	5558311	CFGExitNode	EXIT		5558100		True				
ANR	5558312	Symbol	att		5558100						
ANR	5558313	Symbol	r_strbuf_new		5558100						
ANR	5558314	Symbol	var		5558100						
ANR	5558315	Symbol	sign		5558100						
ANR	5558316	Symbol	newstr_len		5558100						
ANR	5558317	Symbol	newstr		5558100						
ANR	5558318	Symbol	sb		5558100						
ANR	5558319	Symbol	p -> localvar_only		5558100						
ANR	5558320	Symbol	p		5558100						
ANR	5558321	Symbol	reg		5558100						
ANR	5558322	Symbol	r_strbuf_get		5558100						
ANR	5558323	Symbol	ireg		5558100						
ANR	5558324	Symbol	* p		5558100						
ANR	5558325	Function	mk_reg_str	337:0:9128:9899							
ANR	5558326	FunctionDef	"mk_reg_str (const char * regname , int delta , bool sign , bool att , char * ireg , char * dest , int len)"		5558325	0					
ANR	5558327	CompoundStatement		337:116:9244:9899	5558325	0					
ANR	5558328	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	338:1:9247:9278	5558325	0	True				
ANR	5558329	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5558325	0					
ANR	5558330	IdentifierDeclType	RStrBuf *		5558325	0					
ANR	5558331	Identifier	sb		5558325	1					
ANR	5558332	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5558325	2		=			
ANR	5558333	Identifier	sb		5558325	0					
ANR	5558334	CallExpression	"r_strbuf_new ( """" )"		5558325	1					
ANR	5558335	Callee	r_strbuf_new		5558325	0					
ANR	5558336	Identifier	r_strbuf_new		5558325	0					
ANR	5558337	ArgumentList	""""""		5558325	1					
ANR	5558338	Argument	""""""		5558325	0					
ANR	5558339	PrimaryExpression	""""""		5558325	0					
ANR	5558340	IfStatement	if ( att )		5558325	1					
ANR	5558341	Condition	att	339:5:9285:9287	5558325	0	True				
ANR	5558342	Identifier	att		5558325	0					
ANR	5558343	CompoundStatement		3:10:45:45	5558325	1					
ANR	5558344	IfStatement	if ( ireg )		5558325	0					
ANR	5558345	Condition	ireg	340:6:9298:9301	5558325	0	True				
ANR	5558346	Identifier	ireg		5558325	0					
ANR	5558347	CompoundStatement		4:12:59:59	5558325	1					
ANR	5558348	ExpressionStatement	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"	341:3:9309:9343	5558325	0	True				
ANR	5558349	CallExpression	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"		5558325	0					
ANR	5558350	Callee	r_strbuf_setf		5558325	0					
ANR	5558351	Identifier	r_strbuf_setf		5558325	0					
ANR	5558352	ArgumentList	sb		5558325	1					
ANR	5558353	Argument	sb		5558325	0					
ANR	5558354	Identifier	sb		5558325	0					
ANR	5558355	Argument	""", %%%s"""		5558325	1					
ANR	5558356	PrimaryExpression	""", %%%s"""		5558325	0					
ANR	5558357	Argument	ireg		5558325	2					
ANR	5558358	Identifier	ireg		5558325	0					
ANR	5558359	IfStatement	if ( delta < 10 )		5558325	1					
ANR	5558360	Condition	delta < 10	343:6:9355:9364	5558325	0	True				
ANR	5558361	RelationalExpression	delta < 10		5558325	0		<			
ANR	5558362	Identifier	delta		5558325	0					
ANR	5558363	PrimaryExpression	10		5558325	1					
ANR	5558364	CompoundStatement		7:18:122:122	5558325	1					
ANR	5558365	ExpressionStatement	"snprintf ( dest , len - 1 , ""%s%d(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"	344:3:9372:9464	5558325	0	True				
ANR	5558366	CallExpression	"snprintf ( dest , len - 1 , ""%s%d(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"		5558325	0					
ANR	5558367	Callee	snprintf		5558325	0					
ANR	5558368	Identifier	snprintf		5558325	0					
ANR	5558369	ArgumentList	dest		5558325	1					
ANR	5558370	Argument	dest		5558325	0					
ANR	5558371	Identifier	dest		5558325	0					
ANR	5558372	Argument	len - 1		5558325	1					
ANR	5558373	AdditiveExpression	len - 1		5558325	0		-			
ANR	5558374	Identifier	len		5558325	0					
ANR	5558375	PrimaryExpression	1		5558325	1					
ANR	5558376	Argument	"""%s%d(%%%s%s)"""		5558325	2					
ANR	5558377	PrimaryExpression	"""%s%d(%%%s%s)"""		5558325	0					
ANR	5558378	Argument	"sign ? """" : ""-"""		5558325	3					
ANR	5558379	ConditionalExpression	"sign ? """" : ""-"""		5558325	0					
ANR	5558380	Condition	sign		5558325	0					
ANR	5558381	Identifier	sign		5558325	0					
ANR	5558382	PrimaryExpression	""""""		5558325	1					
ANR	5558383	PrimaryExpression	"""-"""		5558325	2					
ANR	5558384	Argument	delta		5558325	4					
ANR	5558385	Identifier	delta		5558325	0					
ANR	5558386	Argument	regname		5558325	5					
ANR	5558387	Identifier	regname		5558325	0					
ANR	5558388	Argument	r_strbuf_get ( sb )		5558325	6					
ANR	5558389	CallExpression	r_strbuf_get ( sb )		5558325	0					
ANR	5558390	Callee	r_strbuf_get		5558325	0					
ANR	5558391	Identifier	r_strbuf_get		5558325	0					
ANR	5558392	ArgumentList	sb		5558325	1					
ANR	5558393	Argument	sb		5558325	0					
ANR	5558394	Identifier	sb		5558325	0					
ANR	5558395	ElseStatement	else		5558325	0					
ANR	5558396	CompoundStatement		9:9:230:230	5558325	0					
ANR	5558397	ExpressionStatement	"snprintf ( dest , len - 1 , ""%s0x%x(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"	346:3:9480:9574	5558325	0	True				
ANR	5558398	CallExpression	"snprintf ( dest , len - 1 , ""%s0x%x(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"		5558325	0					
ANR	5558399	Callee	snprintf		5558325	0					
ANR	5558400	Identifier	snprintf		5558325	0					
ANR	5558401	ArgumentList	dest		5558325	1					
ANR	5558402	Argument	dest		5558325	0					
ANR	5558403	Identifier	dest		5558325	0					
ANR	5558404	Argument	len - 1		5558325	1					
ANR	5558405	AdditiveExpression	len - 1		5558325	0		-			
ANR	5558406	Identifier	len		5558325	0					
ANR	5558407	PrimaryExpression	1		5558325	1					
ANR	5558408	Argument	"""%s0x%x(%%%s%s)"""		5558325	2					
ANR	5558409	PrimaryExpression	"""%s0x%x(%%%s%s)"""		5558325	0					
ANR	5558410	Argument	"sign ? """" : ""-"""		5558325	3					
ANR	5558411	ConditionalExpression	"sign ? """" : ""-"""		5558325	0					
ANR	5558412	Condition	sign		5558325	0					
ANR	5558413	Identifier	sign		5558325	0					
ANR	5558414	PrimaryExpression	""""""		5558325	1					
ANR	5558415	PrimaryExpression	"""-"""		5558325	2					
ANR	5558416	Argument	delta		5558325	4					
ANR	5558417	Identifier	delta		5558325	0					
ANR	5558418	Argument	regname		5558325	5					
ANR	5558419	Identifier	regname		5558325	0					
ANR	5558420	Argument	r_strbuf_get ( sb )		5558325	6					
ANR	5558421	CallExpression	r_strbuf_get ( sb )		5558325	0					
ANR	5558422	Callee	r_strbuf_get		5558325	0					
ANR	5558423	Identifier	r_strbuf_get		5558325	0					
ANR	5558424	ArgumentList	sb		5558325	1					
ANR	5558425	Argument	sb		5558325	0					
ANR	5558426	Identifier	sb		5558325	0					
ANR	5558427	ElseStatement	else		5558325	0					
ANR	5558428	CompoundStatement		12:8:343:343	5558325	0					
ANR	5558429	IfStatement	if ( ireg )		5558325	0					
ANR	5558430	Condition	ireg	349:6:9596:9599	5558325	0	True				
ANR	5558431	Identifier	ireg		5558325	0					
ANR	5558432	CompoundStatement		13:12:357:357	5558325	1					
ANR	5558433	ExpressionStatement	"r_strbuf_setf ( sb , "" + %s"" , ireg )"	350:3:9607:9640	5558325	0	True				
ANR	5558434	CallExpression	"r_strbuf_setf ( sb , "" + %s"" , ireg )"		5558325	0					
ANR	5558435	Callee	r_strbuf_setf		5558325	0					
ANR	5558436	Identifier	r_strbuf_setf		5558325	0					
ANR	5558437	ArgumentList	sb		5558325	1					
ANR	5558438	Argument	sb		5558325	0					
ANR	5558439	Identifier	sb		5558325	0					
ANR	5558440	Argument	""" + %s"""		5558325	1					
ANR	5558441	PrimaryExpression	""" + %s"""		5558325	0					
ANR	5558442	Argument	ireg		5558325	2					
ANR	5558443	Identifier	ireg		5558325	0					
ANR	5558444	IfStatement	if ( delta < 10 )		5558325	1					
ANR	5558445	Condition	delta < 10	352:6:9652:9661	5558325	0	True				
ANR	5558446	RelationalExpression	delta < 10		5558325	0		<			
ANR	5558447	Identifier	delta		5558325	0					
ANR	5558448	PrimaryExpression	10		5558325	1					
ANR	5558449	CompoundStatement		16:18:419:419	5558325	1					
ANR	5558450	ExpressionStatement	"snprintf ( dest , len - 1 , ""[%s%s %c %d]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"	353:3:9669:9760	5558325	0	True				
ANR	5558451	CallExpression	"snprintf ( dest , len - 1 , ""[%s%s %c %d]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"		5558325	0					
ANR	5558452	Callee	snprintf		5558325	0					
ANR	5558453	Identifier	snprintf		5558325	0					
ANR	5558454	ArgumentList	dest		5558325	1					
ANR	5558455	Argument	dest		5558325	0					
ANR	5558456	Identifier	dest		5558325	0					
ANR	5558457	Argument	len - 1		5558325	1					
ANR	5558458	AdditiveExpression	len - 1		5558325	0		-			
ANR	5558459	Identifier	len		5558325	0					
ANR	5558460	PrimaryExpression	1		5558325	1					
ANR	5558461	Argument	"""[%s%s %c %d]"""		5558325	2					
ANR	5558462	PrimaryExpression	"""[%s%s %c %d]"""		5558325	0					
ANR	5558463	Argument	regname		5558325	3					
ANR	5558464	Identifier	regname		5558325	0					
ANR	5558465	Argument	r_strbuf_get ( sb )		5558325	4					
ANR	5558466	CallExpression	r_strbuf_get ( sb )		5558325	0					
ANR	5558467	Callee	r_strbuf_get		5558325	0					
ANR	5558468	Identifier	r_strbuf_get		5558325	0					
ANR	5558469	ArgumentList	sb		5558325	1					
ANR	5558470	Argument	sb		5558325	0					
ANR	5558471	Identifier	sb		5558325	0					
ANR	5558472	Argument	sign ? '+' : '-'		5558325	5					
ANR	5558473	ConditionalExpression	sign ? '+' : '-'		5558325	0					
ANR	5558474	Condition	sign		5558325	0					
ANR	5558475	Identifier	sign		5558325	0					
ANR	5558476	PrimaryExpression	'+'		5558325	1					
ANR	5558477	PrimaryExpression	'-'		5558325	2					
ANR	5558478	Argument	delta		5558325	6					
ANR	5558479	Identifier	delta		5558325	0					
ANR	5558480	ElseStatement	else		5558325	0					
ANR	5558481	CompoundStatement		18:9:526:526	5558325	0					
ANR	5558482	ExpressionStatement	"snprintf ( dest , len - 1 , ""[%s%s %c 0x%x]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"	355:3:9776:9869	5558325	0	True				
ANR	5558483	CallExpression	"snprintf ( dest , len - 1 , ""[%s%s %c 0x%x]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"		5558325	0					
ANR	5558484	Callee	snprintf		5558325	0					
ANR	5558485	Identifier	snprintf		5558325	0					
ANR	5558486	ArgumentList	dest		5558325	1					
ANR	5558487	Argument	dest		5558325	0					
ANR	5558488	Identifier	dest		5558325	0					
ANR	5558489	Argument	len - 1		5558325	1					
ANR	5558490	AdditiveExpression	len - 1		5558325	0		-			
ANR	5558491	Identifier	len		5558325	0					
ANR	5558492	PrimaryExpression	1		5558325	1					
ANR	5558493	Argument	"""[%s%s %c 0x%x]"""		5558325	2					
ANR	5558494	PrimaryExpression	"""[%s%s %c 0x%x]"""		5558325	0					
ANR	5558495	Argument	regname		5558325	3					
ANR	5558496	Identifier	regname		5558325	0					
ANR	5558497	Argument	r_strbuf_get ( sb )		5558325	4					
ANR	5558498	CallExpression	r_strbuf_get ( sb )		5558325	0					
ANR	5558499	Callee	r_strbuf_get		5558325	0					
ANR	5558500	Identifier	r_strbuf_get		5558325	0					
ANR	5558501	ArgumentList	sb		5558325	1					
ANR	5558502	Argument	sb		5558325	0					
ANR	5558503	Identifier	sb		5558325	0					
ANR	5558504	Argument	sign ? '+' : '-'		5558325	5					
ANR	5558505	ConditionalExpression	sign ? '+' : '-'		5558325	0					
ANR	5558506	Condition	sign		5558325	0					
ANR	5558507	Identifier	sign		5558325	0					
ANR	5558508	PrimaryExpression	'+'		5558325	1					
ANR	5558509	PrimaryExpression	'-'		5558325	2					
ANR	5558510	Argument	delta		5558325	6					
ANR	5558511	Identifier	delta		5558325	0					
ANR	5558512	ExpressionStatement	r_strbuf_free ( sb )	358:1:9879:9897	5558325	2	True				
ANR	5558513	CallExpression	r_strbuf_free ( sb )		5558325	0					
ANR	5558514	Callee	r_strbuf_free		5558325	0					
ANR	5558515	Identifier	r_strbuf_free		5558325	0					
ANR	5558516	ArgumentList	sb		5558325	1					
ANR	5558517	Argument	sb		5558325	0					
ANR	5558518	Identifier	sb		5558325	0					
ANR	5558519	ReturnType	static inline void		5558325	1					
ANR	5558520	Identifier	mk_reg_str		5558325	2					
ANR	5558521	ParameterList	"const char * regname , int delta , bool sign , bool att , char * ireg , char * dest , int len"		5558325	3					
ANR	5558522	Parameter	const char * regname	337:30:9158:9176	5558325	0	True				
ANR	5558523	ParameterType	const char *		5558325	0					
ANR	5558524	Identifier	regname		5558325	1					
ANR	5558525	Parameter	int delta	337:51:9179:9187	5558325	1	True				
ANR	5558526	ParameterType	int		5558325	0					
ANR	5558527	Identifier	delta		5558325	1					
ANR	5558528	Parameter	bool sign	337:62:9190:9198	5558325	2	True				
ANR	5558529	ParameterType	bool		5558325	0					
ANR	5558530	Identifier	sign		5558325	1					
ANR	5558531	Parameter	bool att	337:73:9201:9208	5558325	3	True				
ANR	5558532	ParameterType	bool		5558325	0					
ANR	5558533	Identifier	att		5558325	1					
ANR	5558534	Parameter	char * ireg	337:83:9211:9220	5558325	4	True				
ANR	5558535	ParameterType	char *		5558325	0					
ANR	5558536	Identifier	ireg		5558325	1					
ANR	5558537	Parameter	char * dest	337:95:9223:9232	5558325	5	True				
ANR	5558538	ParameterType	char *		5558325	0					
ANR	5558539	Identifier	dest		5558325	1					
ANR	5558540	Parameter	int len	337:107:9235:9241	5558325	6	True				
ANR	5558541	ParameterType	int		5558325	0					
ANR	5558542	Identifier	len		5558325	1					
ANR	5558543	CFGEntryNode	ENTRY		5558325		True				
ANR	5558544	CFGExitNode	EXIT		5558325		True				
ANR	5558545	Symbol	att		5558325						
ANR	5558546	Symbol	regname		5558325						
ANR	5558547	Symbol	r_strbuf_new		5558325						
ANR	5558548	Symbol	len		5558325						
ANR	5558549	Symbol	r_strbuf_get		5558325						
ANR	5558550	Symbol	delta		5558325						
ANR	5558551	Symbol	sign		5558325						
ANR	5558552	Symbol	ireg		5558325						
ANR	5558553	Symbol	dest		5558325						
ANR	5558554	Symbol	sb		5558325						
ANR	5558555	Function	varsub	361:0:9902:14272							
ANR	5558556	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5558555	0					
ANR	5558557	CompoundStatement		361:103:10005:14272	5558555	0					
ANR	5558558	IdentifierDeclStatement	"RList * bpargs , * spargs ;"	362:1:10008:10030	5558555	0	True				
ANR	5558559	IdentifierDecl	* bpargs		5558555	0					
ANR	5558560	IdentifierDeclType	RList *		5558555	0					
ANR	5558561	Identifier	bpargs		5558555	1					
ANR	5558562	IdentifierDecl	* spargs		5558555	1					
ANR	5558563	IdentifierDeclType	RList *		5558555	0					
ANR	5558564	Identifier	spargs		5558555	1					
ANR	5558565	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	363:1:10033:10060	5558555	1	True				
ANR	5558566	IdentifierDecl	* anal = p -> analb . anal		5558555	0					
ANR	5558567	IdentifierDeclType	RAnal *		5558555	0					
ANR	5558568	Identifier	anal		5558555	1					
ANR	5558569	AssignmentExpression	* anal = p -> analb . anal		5558555	2		=			
ANR	5558570	Identifier	anal		5558555	0					
ANR	5558571	MemberAccess	p -> analb . anal		5558555	1					
ANR	5558572	PtrMemberAccess	p -> analb		5558555	0					
ANR	5558573	Identifier	p		5558555	0					
ANR	5558574	Identifier	analb		5558555	1					
ANR	5558575	Identifier	anal		5558555	1					
ANR	5558576	IdentifierDeclStatement	"RAnalVar * bparg , * sparg ;"	364:1:10063:10086	5558555	2	True				
ANR	5558577	IdentifierDecl	* bparg		5558555	0					
ANR	5558578	IdentifierDeclType	RAnalVar *		5558555	0					
ANR	5558579	Identifier	bparg		5558555	1					
ANR	5558580	IdentifierDecl	* sparg		5558555	1					
ANR	5558581	IdentifierDeclType	RAnalVar *		5558555	0					
ANR	5558582	Identifier	sparg		5558555	1					
ANR	5558583	IdentifierDeclStatement	"RListIter * bpargiter , * spiter ;"	365:1:10089:10118	5558555	3	True				
ANR	5558584	IdentifierDecl	* bpargiter		5558555	0					
ANR	5558585	IdentifierDeclType	RListIter *		5558555	0					
ANR	5558586	Identifier	bpargiter		5558555	1					
ANR	5558587	IdentifierDecl	* spiter		5558555	1					
ANR	5558588	IdentifierDeclType	RListIter *		5558555	0					
ANR	5558589	Identifier	spiter		5558555	1					
ANR	5558590	IdentifierDeclStatement	"char oldstr [ 64 ] , newstr [ 64 ] ;"	366:1:10121:10148	5558555	4	True				
ANR	5558591	IdentifierDecl	oldstr [ 64 ]		5558555	0					
ANR	5558592	IdentifierDeclType	char [ 64 ]		5558555	0					
ANR	5558593	Identifier	oldstr		5558555	1					
ANR	5558594	PrimaryExpression	64		5558555	2					
ANR	5558595	IdentifierDecl	newstr [ 64 ]		5558555	1					
ANR	5558596	IdentifierDeclType	char [ 64 ]		5558555	0					
ANR	5558597	Identifier	newstr		5558555	1					
ANR	5558598	PrimaryExpression	64		5558555	2					
ANR	5558599	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	367:1:10151:10177	5558555	5	True				
ANR	5558600	IdentifierDecl	* tstr = strdup ( data )		5558555	0					
ANR	5558601	IdentifierDeclType	char *		5558555	0					
ANR	5558602	Identifier	tstr		5558555	1					
ANR	5558603	AssignmentExpression	* tstr = strdup ( data )		5558555	2		=			
ANR	5558604	Identifier	tstr		5558555	0					
ANR	5558605	CallExpression	strdup ( data )		5558555	1					
ANR	5558606	Callee	strdup		5558555	0					
ANR	5558607	Identifier	strdup		5558555	0					
ANR	5558608	ArgumentList	data		5558555	1					
ANR	5558609	Argument	data		5558555	0					
ANR	5558610	Identifier	data		5558555	0					
ANR	5558611	IfStatement	if ( ! tstr )		5558555	6					
ANR	5558612	Condition	! tstr	368:5:10184:10188	5558555	0	True				
ANR	5558613	UnaryOperationExpression	! tstr		5558555	0					
ANR	5558614	UnaryOperator	!		5558555	0					
ANR	5558615	Identifier	tstr		5558555	1					
ANR	5558616	CompoundStatement		8:12:185:185	5558555	1					
ANR	5558617	ReturnStatement	return false ;	369:2:10195:10207	5558555	0	True				
ANR	5558618	Identifier	false		5558555	0					
ANR	5558619	IdentifierDeclStatement	"bool att = strchr ( data , '%' ) ;"	372:1:10214:10243	5558555	7	True				
ANR	5558620	IdentifierDecl	"att = strchr ( data , '%' )"		5558555	0					
ANR	5558621	IdentifierDeclType	bool		5558555	0					
ANR	5558622	Identifier	att		5558555	1					
ANR	5558623	AssignmentExpression	"att = strchr ( data , '%' )"		5558555	2		=			
ANR	5558624	Identifier	att		5558555	0					
ANR	5558625	CallExpression	"strchr ( data , '%' )"		5558555	1					
ANR	5558626	Callee	strchr		5558555	0					
ANR	5558627	Identifier	strchr		5558555	0					
ANR	5558628	ArgumentList	data		5558555	1					
ANR	5558629	Argument	data		5558555	0					
ANR	5558630	Identifier	data		5558555	0					
ANR	5558631	Argument	'%'		5558555	1					
ANR	5558632	PrimaryExpression	'%'		5558555	0					
ANR	5558633	IfStatement	if ( p -> relsub )		5558555	8					
ANR	5558634	Condition	p -> relsub	374:5:10251:10259	5558555	0	True				
ANR	5558635	PtrMemberAccess	p -> relsub		5558555	0					
ANR	5558636	Identifier	p		5558555	0					
ANR	5558637	Identifier	relsub		5558555	1					
ANR	5558638	CompoundStatement		14:16:256:256	5558555	1					
ANR	5558639	IfStatement	if ( att )		5558555	0					
ANR	5558640	Condition	att	375:6:10270:10272	5558555	0	True				
ANR	5558641	Identifier	att		5558555	0					
ANR	5558642	CompoundStatement		16:3:274:325	5558555	1					
ANR	5558643	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" ) ;"	376:3:10280:10331	5558555	0	True				
ANR	5558644	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5558555	0					
ANR	5558645	IdentifierDeclType	char *		5558555	0					
ANR	5558646	Identifier	rip		5558555	1					
ANR	5558647	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5558555	2		=			
ANR	5558648	Identifier	rip		5558555	0					
ANR	5558649	CastExpression	"( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5558555	1					
ANR	5558650	CastTarget	char *		5558555	0					
ANR	5558651	CallExpression	"r_str_casestr ( tstr , ""(%rip)"" )"		5558555	1					
ANR	5558652	Callee	r_str_casestr		5558555	0					
ANR	5558653	Identifier	r_str_casestr		5558555	0					
ANR	5558654	ArgumentList	tstr		5558555	1					
ANR	5558655	Argument	tstr		5558555	0					
ANR	5558656	Identifier	tstr		5558555	0					
ANR	5558657	Argument	"""(%rip)"""		5558555	1					
ANR	5558658	PrimaryExpression	"""(%rip)"""		5558555	0					
ANR	5558659	IfStatement	if ( rip )		5558555	1					
ANR	5558660	Condition	rip	377:7:10340:10342	5558555	0	True				
ANR	5558661	Identifier	rip		5558555	0					
ANR	5558662	CompoundStatement		21:4:406:422	5558555	1					
ANR	5558663	ExpressionStatement	* rip = 0	378:4:10351:10359	5558555	0	True				
ANR	5558664	AssignmentExpression	* rip = 0		5558555	0		=			
ANR	5558665	UnaryOperationExpression	* rip		5558555	0					
ANR	5558666	UnaryOperator	*		5558555	0					
ANR	5558667	Identifier	rip		5558555	1					
ANR	5558668	PrimaryExpression	0		5558555	1					
ANR	5558669	IdentifierDeclStatement	char * pre = tstr ;	379:4:10365:10381	5558555	1	True				
ANR	5558670	IdentifierDecl	* pre = tstr		5558555	0					
ANR	5558671	IdentifierDeclType	char *		5558555	0					
ANR	5558672	Identifier	pre		5558555	1					
ANR	5558673	AssignmentExpression	* pre = tstr		5558555	2		=			
ANR	5558674	Identifier	tstr		5558555	0					
ANR	5558675	Identifier	tstr		5558555	1					
ANR	5558676	IdentifierDeclStatement	char * pos = rip + 6 ;	380:4:10387:10406	5558555	2	True				
ANR	5558677	IdentifierDecl	* pos = rip + 6		5558555	0					
ANR	5558678	IdentifierDeclType	char *		5558555	0					
ANR	5558679	Identifier	pos		5558555	1					
ANR	5558680	AssignmentExpression	* pos = rip + 6		5558555	2		=			
ANR	5558681	Identifier	pos		5558555	0					
ANR	5558682	AdditiveExpression	rip + 6		5558555	1		+			
ANR	5558683	Identifier	rip		5558555	0					
ANR	5558684	PrimaryExpression	6		5558555	1					
ANR	5558685	IdentifierDeclStatement	char * word = rip ;	381:4:10412:10428	5558555	3	True				
ANR	5558686	IdentifierDecl	* word = rip		5558555	0					
ANR	5558687	IdentifierDeclType	char *		5558555	0					
ANR	5558688	Identifier	word		5558555	1					
ANR	5558689	AssignmentExpression	* word = rip		5558555	2		=			
ANR	5558690	Identifier	rip		5558555	0					
ANR	5558691	Identifier	rip		5558555	1					
ANR	5558692	WhileStatement	while ( word > tstr && * word != ' ' )		5558555	4					
ANR	5558693	Condition	word > tstr && * word != ' '	382:11:10441:10467	5558555	0	True				
ANR	5558694	AndExpression	word > tstr && * word != ' '		5558555	0		&&			
ANR	5558695	RelationalExpression	word > tstr		5558555	0		>			
ANR	5558696	Identifier	word		5558555	0					
ANR	5558697	Identifier	tstr		5558555	1					
ANR	5558698	EqualityExpression	* word != ' '		5558555	1		!=			
ANR	5558699	UnaryOperationExpression	* word		5558555	0					
ANR	5558700	UnaryOperator	*		5558555	0					
ANR	5558701	Identifier	word		5558555	1					
ANR	5558702	PrimaryExpression	' '		5558555	1					
ANR	5558703	CompoundStatement		22:40:464:464	5558555	1					
ANR	5558704	ExpressionStatement	word --	383:5:10477:10483	5558555	0	True				
ANR	5558705	PostIncDecOperationExpression	word --		5558555	0					
ANR	5558706	Identifier	word		5558555	0					
ANR	5558707	IncDec	--		5558555	1					
ANR	5558708	IfStatement	if ( word > tstr )		5558555	5					
ANR	5558709	Condition	word > tstr	386:8:10500:10510	5558555	0	True				
ANR	5558710	RelationalExpression	word > tstr		5558555	0		>			
ANR	5558711	Identifier	word		5558555	0					
ANR	5558712	Identifier	tstr		5558555	1					
ANR	5558713	CompoundStatement		30:5:586:618	5558555	1					
ANR	5558714	ExpressionStatement	* word ++ = 0	387:5:10520:10531	5558555	0	True				
ANR	5558715	AssignmentExpression	* word ++ = 0		5558555	0		=			
ANR	5558716	UnaryOperationExpression	* word ++		5558555	0					
ANR	5558717	UnaryOperator	*		5558555	0					
ANR	5558718	PostIncDecOperationExpression	word ++		5558555	1					
ANR	5558719	Identifier	word		5558555	0					
ANR	5558720	IncDec	++		5558555	1					
ANR	5558721	PrimaryExpression	0		5558555	1					
ANR	5558722	ExpressionStatement	* rip = 0	388:5:10538:10546	5558555	1	True				
ANR	5558723	AssignmentExpression	* rip = 0		5558555	0		=			
ANR	5558724	UnaryOperationExpression	* rip		5558555	0					
ANR	5558725	UnaryOperator	*		5558555	0					
ANR	5558726	Identifier	rip		5558555	1					
ANR	5558727	PrimaryExpression	0		5558555	1					
ANR	5558728	IdentifierDeclStatement	"st64 n = r_num_math ( NULL , word ) ;"	389:5:10553:10585	5558555	2	True				
ANR	5558729	IdentifierDecl	"n = r_num_math ( NULL , word )"		5558555	0					
ANR	5558730	IdentifierDeclType	st64		5558555	0					
ANR	5558731	Identifier	n		5558555	1					
ANR	5558732	AssignmentExpression	"n = r_num_math ( NULL , word )"		5558555	2		=			
ANR	5558733	Identifier	n		5558555	0					
ANR	5558734	CallExpression	"r_num_math ( NULL , word )"		5558555	1					
ANR	5558735	Callee	r_num_math		5558555	0					
ANR	5558736	Identifier	r_num_math		5558555	0					
ANR	5558737	ArgumentList	NULL		5558555	1					
ANR	5558738	Argument	NULL		5558555	0					
ANR	5558739	Identifier	NULL		5558555	0					
ANR	5558740	Argument	word		5558555	1					
ANR	5558741	Identifier	word		5558555	0					
ANR	5558742	IdentifierDeclStatement	ut64 repl_num = oplen + addr + n ;	390:5:10592:10624	5558555	3	True				
ANR	5558743	IdentifierDecl	repl_num = oplen + addr + n		5558555	0					
ANR	5558744	IdentifierDeclType	ut64		5558555	0					
ANR	5558745	Identifier	repl_num		5558555	1					
ANR	5558746	AssignmentExpression	repl_num = oplen + addr + n		5558555	2		=			
ANR	5558747	Identifier	repl_num		5558555	0					
ANR	5558748	AdditiveExpression	oplen + addr + n		5558555	1		+			
ANR	5558749	Identifier	oplen		5558555	0					
ANR	5558750	AdditiveExpression	addr + n		5558555	1		+			
ANR	5558751	Identifier	addr		5558555	0					
ANR	5558752	Identifier	n		5558555	1					
ANR	5558753	Statement	char	391:5:10631:10634	5558555	4	True				
ANR	5558754	Statement	*	391:10:10636:10636	5558555	5	True				
ANR	5558755	Statement	tstr_new	391:11:10637:10644	5558555	6	True				
ANR	5558756	Statement	=	391:20:10646:10646	5558555	7	True				
ANR	5558757	Statement	r_str_newf	391:22:10648:10657	5558555	8	True				
ANR	5558758	Statement	(	391:33:10659:10659	5558555	9	True				
ANR	5558759	Statement	"""%s 0x%08"""	391:34:10660:10669	5558555	10	True				
ANR	5558760	Statement	PFMT64x	391:44:10670:10676	5558555	11	True				
ANR	5558761	Statement	"""%s"""	391:51:10677:10680	5558555	12	True				
ANR	5558762	Statement	","	391:55:10681:10681	5558555	13	True				
ANR	5558763	Statement	pre	391:57:10683:10685	5558555	14	True				
ANR	5558764	Statement	","	391:60:10686:10686	5558555	15	True				
ANR	5558765	Statement	repl_num	391:62:10688:10695	5558555	16	True				
ANR	5558766	Statement	","	391:70:10696:10696	5558555	17	True				
ANR	5558767	Statement	pos	391:72:10698:10700	5558555	18	True				
ANR	5558768	Statement	)	391:75:10701:10701	5558555	19	True				
ANR	5558769	ExpressionStatement		391:76:10702:10702	5558555	20	True				
ANR	5558770	ExpressionStatement	* rip = '('	392:5:10709:10719	5558555	21	True				
ANR	5558771	AssignmentExpression	* rip = '('		5558555	0		=			
ANR	5558772	UnaryOperationExpression	* rip		5558555	0					
ANR	5558773	UnaryOperator	*		5558555	0					
ANR	5558774	Identifier	rip		5558555	1					
ANR	5558775	PrimaryExpression	'('		5558555	1					
ANR	5558776	ExpressionStatement	free ( tstr )	393:5:10726:10737	5558555	22	True				
ANR	5558777	CallExpression	free ( tstr )		5558555	0					
ANR	5558778	Callee	free		5558555	0					
ANR	5558779	Identifier	free		5558555	0					
ANR	5558780	ArgumentList	tstr		5558555	1					
ANR	5558781	Argument	tstr		5558555	0					
ANR	5558782	Identifier	tstr		5558555	0					
ANR	5558783	ExpressionStatement	tstr = tstr_new	394:5:10744:10759	5558555	23	True				
ANR	5558784	AssignmentExpression	tstr = tstr_new		5558555	0		=			
ANR	5558785	Identifier	tstr		5558555	0					
ANR	5558786	Identifier	tstr_new		5558555	1					
ANR	5558787	ElseStatement	else		5558555	0					
ANR	5558788	CompoundStatement		38:3:780:829	5558555	0					
ANR	5558789	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""[rip"" ) ;"	398:3:10786:10835	5558555	0	True				
ANR	5558790	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""[rip"" )"		5558555	0					
ANR	5558791	IdentifierDeclType	char *		5558555	0					
ANR	5558792	Identifier	rip		5558555	1					
ANR	5558793	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""[rip"" )"		5558555	2		=			
ANR	5558794	Identifier	rip		5558555	0					
ANR	5558795	CastExpression	"( char * ) r_str_casestr ( tstr , ""[rip"" )"		5558555	1					
ANR	5558796	CastTarget	char *		5558555	0					
ANR	5558797	CallExpression	"r_str_casestr ( tstr , ""[rip"" )"		5558555	1					
ANR	5558798	Callee	r_str_casestr		5558555	0					
ANR	5558799	Identifier	r_str_casestr		5558555	0					
ANR	5558800	ArgumentList	tstr		5558555	1					
ANR	5558801	Argument	tstr		5558555	0					
ANR	5558802	Identifier	tstr		5558555	0					
ANR	5558803	Argument	"""[rip"""		5558555	1					
ANR	5558804	PrimaryExpression	"""[rip"""		5558555	0					
ANR	5558805	IfStatement	if ( rip )		5558555	1					
ANR	5558806	Condition	rip	399:7:10844:10846	5558555	0	True				
ANR	5558807	Identifier	rip		5558555	0					
ANR	5558808	CompoundStatement		44:4:994:1022	5558555	1					
ANR	5558809	IdentifierDeclStatement	"char * ripend = strchr ( rip + 3 , ']' ) ;"	400:4:10855:10891	5558555	0	True				
ANR	5558810	IdentifierDecl	"* ripend = strchr ( rip + 3 , ']' )"		5558555	0					
ANR	5558811	IdentifierDeclType	char *		5558555	0					
ANR	5558812	Identifier	ripend		5558555	1					
ANR	5558813	AssignmentExpression	"* ripend = strchr ( rip + 3 , ']' )"		5558555	2		=			
ANR	5558814	Identifier	ripend		5558555	0					
ANR	5558815	CallExpression	"strchr ( rip + 3 , ']' )"		5558555	1					
ANR	5558816	Callee	strchr		5558555	0					
ANR	5558817	Identifier	strchr		5558555	0					
ANR	5558818	ArgumentList	rip + 3		5558555	1					
ANR	5558819	Argument	rip + 3		5558555	0					
ANR	5558820	AdditiveExpression	rip + 3		5558555	0		+			
ANR	5558821	Identifier	rip		5558555	0					
ANR	5558822	PrimaryExpression	3		5558555	1					
ANR	5558823	Argument	']'		5558555	1					
ANR	5558824	PrimaryExpression	']'		5558555	0					
ANR	5558825	IdentifierDeclStatement	"const char * plus = strchr ( rip , '+' ) ;"	401:4:10897:10933	5558555	1	True				
ANR	5558826	IdentifierDecl	"* plus = strchr ( rip , '+' )"		5558555	0					
ANR	5558827	IdentifierDeclType	const char *		5558555	0					
ANR	5558828	Identifier	plus		5558555	1					
ANR	5558829	AssignmentExpression	"* plus = strchr ( rip , '+' )"		5558555	2		=			
ANR	5558830	Identifier	plus		5558555	0					
ANR	5558831	CallExpression	"strchr ( rip , '+' )"		5558555	1					
ANR	5558832	Callee	strchr		5558555	0					
ANR	5558833	Identifier	strchr		5558555	0					
ANR	5558834	ArgumentList	rip		5558555	1					
ANR	5558835	Argument	rip		5558555	0					
ANR	5558836	Identifier	rip		5558555	0					
ANR	5558837	Argument	'+'		5558555	1					
ANR	5558838	PrimaryExpression	'+'		5558555	0					
ANR	5558839	IdentifierDeclStatement	"const char * neg = strchr ( rip , '-' ) ;"	402:4:10939:10974	5558555	2	True				
ANR	5558840	IdentifierDecl	"* neg = strchr ( rip , '-' )"		5558555	0					
ANR	5558841	IdentifierDeclType	const char *		5558555	0					
ANR	5558842	Identifier	neg		5558555	1					
ANR	5558843	AssignmentExpression	"* neg = strchr ( rip , '-' )"		5558555	2		=			
ANR	5558844	Identifier	neg		5558555	0					
ANR	5558845	CallExpression	"strchr ( rip , '-' )"		5558555	1					
ANR	5558846	Callee	strchr		5558555	0					
ANR	5558847	Identifier	strchr		5558555	0					
ANR	5558848	ArgumentList	rip		5558555	1					
ANR	5558849	Argument	rip		5558555	0					
ANR	5558850	Identifier	rip		5558555	0					
ANR	5558851	Argument	'-'		5558555	1					
ANR	5558852	PrimaryExpression	'-'		5558555	0					
ANR	5558853	IdentifierDeclStatement	char * tstr_new ;	403:4:10980:10994	5558555	3	True				
ANR	5558854	IdentifierDecl	* tstr_new		5558555	0					
ANR	5558855	IdentifierDeclType	char *		5558555	0					
ANR	5558856	Identifier	tstr_new		5558555	1					
ANR	5558857	IdentifierDeclStatement	ut64 repl_num = oplen + addr ;	404:4:11000:11028	5558555	4	True				
ANR	5558858	IdentifierDecl	repl_num = oplen + addr		5558555	0					
ANR	5558859	IdentifierDeclType	ut64		5558555	0					
ANR	5558860	Identifier	repl_num		5558555	1					
ANR	5558861	AssignmentExpression	repl_num = oplen + addr		5558555	2		=			
ANR	5558862	Identifier	repl_num		5558555	0					
ANR	5558863	AdditiveExpression	oplen + addr		5558555	1		+			
ANR	5558864	Identifier	oplen		5558555	0					
ANR	5558865	Identifier	addr		5558555	1					
ANR	5558866	IfStatement	if ( ! ripend )		5558555	5					
ANR	5558867	Condition	! ripend	406:8:11039:11045	5558555	0	True				
ANR	5558868	UnaryOperationExpression	! ripend		5558555	0					
ANR	5558869	UnaryOperator	!		5558555	0					
ANR	5558870	Identifier	ripend		5558555	1					
ANR	5558871	CompoundStatement		46:17:1042:1042	5558555	1					
ANR	5558872	ExpressionStatement	"ripend = ""]"""	407:5:11055:11067	5558555	0	True				
ANR	5558873	AssignmentExpression	"ripend = ""]"""		5558555	0		=			
ANR	5558874	Identifier	ripend		5558555	0					
ANR	5558875	PrimaryExpression	"""]"""		5558555	1					
ANR	5558876	IfStatement	if ( plus )		5558555	6					
ANR	5558877	Condition	plus	409:8:11083:11086	5558555	0	True				
ANR	5558878	Identifier	plus		5558555	0					
ANR	5558879	CompoundStatement		49:14:1083:1083	5558555	1					
ANR	5558880	ExpressionStatement	"repl_num += r_num_get ( NULL , plus + 1 )"	410:5:11096:11134	5558555	0	True				
ANR	5558881	AssignmentExpression	"repl_num += r_num_get ( NULL , plus + 1 )"		5558555	0		+=			
ANR	5558882	Identifier	repl_num		5558555	0					
ANR	5558883	CallExpression	"r_num_get ( NULL , plus + 1 )"		5558555	1					
ANR	5558884	Callee	r_num_get		5558555	0					
ANR	5558885	Identifier	r_num_get		5558555	0					
ANR	5558886	ArgumentList	NULL		5558555	1					
ANR	5558887	Argument	NULL		5558555	0					
ANR	5558888	Identifier	NULL		5558555	0					
ANR	5558889	Argument	plus + 1		5558555	1					
ANR	5558890	AdditiveExpression	plus + 1		5558555	0		+			
ANR	5558891	Identifier	plus		5558555	0					
ANR	5558892	PrimaryExpression	1		5558555	1					
ANR	5558893	IfStatement	if ( neg )		5558555	7					
ANR	5558894	Condition	neg	412:8:11150:11152	5558555	0	True				
ANR	5558895	Identifier	neg		5558555	0					
ANR	5558896	CompoundStatement		52:13:1149:1149	5558555	1					
ANR	5558897	ExpressionStatement	"repl_num -= r_num_get ( NULL , neg + 1 )"	413:5:11162:11199	5558555	0	True				
ANR	5558898	AssignmentExpression	"repl_num -= r_num_get ( NULL , neg + 1 )"		5558555	0		-=			
ANR	5558899	Identifier	repl_num		5558555	0					
ANR	5558900	CallExpression	"r_num_get ( NULL , neg + 1 )"		5558555	1					
ANR	5558901	Callee	r_num_get		5558555	0					
ANR	5558902	Identifier	r_num_get		5558555	0					
ANR	5558903	ArgumentList	NULL		5558555	1					
ANR	5558904	Argument	NULL		5558555	0					
ANR	5558905	Identifier	NULL		5558555	0					
ANR	5558906	Argument	neg + 1		5558555	1					
ANR	5558907	AdditiveExpression	neg + 1		5558555	0		+			
ANR	5558908	Identifier	neg		5558555	0					
ANR	5558909	PrimaryExpression	1		5558555	1					
ANR	5558910	ExpressionStatement	rip [ 1 ] = '\\0'	416:4:11212:11225	5558555	8	True				
ANR	5558911	AssignmentExpression	rip [ 1 ] = '\\0'		5558555	0		=			
ANR	5558912	ArrayIndexing	rip [ 1 ]		5558555	0					
ANR	5558913	Identifier	rip		5558555	0					
ANR	5558914	PrimaryExpression	1		5558555	1					
ANR	5558915	PrimaryExpression	'\\0'		5558555	1					
ANR	5558916	Statement	tstr_new	417:4:11231:11238	5558555	9	True				
ANR	5558917	Statement	=	417:13:11240:11240	5558555	10	True				
ANR	5558918	Statement	r_str_newf	417:15:11242:11251	5558555	11	True				
ANR	5558919	Statement	(	417:26:11253:11253	5558555	12	True				
ANR	5558920	Statement	"""%s0x%08"""	417:27:11254:11262	5558555	13	True				
ANR	5558921	Statement	PFMT64x	417:36:11263:11269	5558555	14	True				
ANR	5558922	Statement	"""%s"""	417:43:11270:11273	5558555	15	True				
ANR	5558923	Statement	","	417:47:11274:11274	5558555	16	True				
ANR	5558924	Statement	tstr	417:49:11276:11279	5558555	17	True				
ANR	5558925	Statement	","	417:53:11280:11280	5558555	18	True				
ANR	5558926	Statement	repl_num	417:55:11282:11289	5558555	19	True				
ANR	5558927	Statement	","	417:63:11290:11290	5558555	20	True				
ANR	5558928	Statement	ripend	417:65:11292:11297	5558555	21	True				
ANR	5558929	Statement	)	417:71:11298:11298	5558555	22	True				
ANR	5558930	ExpressionStatement		417:72:11299:11299	5558555	23	True				
ANR	5558931	ExpressionStatement	free ( tstr )	418:4:11305:11316	5558555	24	True				
ANR	5558932	CallExpression	free ( tstr )		5558555	0					
ANR	5558933	Callee	free		5558555	0					
ANR	5558934	Identifier	free		5558555	0					
ANR	5558935	ArgumentList	tstr		5558555	1					
ANR	5558936	Argument	tstr		5558555	0					
ANR	5558937	Identifier	tstr		5558555	0					
ANR	5558938	ExpressionStatement	tstr = tstr_new	419:4:11322:11337	5558555	25	True				
ANR	5558939	AssignmentExpression	tstr = tstr_new		5558555	0		=			
ANR	5558940	Identifier	tstr		5558555	0					
ANR	5558941	Identifier	tstr_new		5558555	1					
ANR	5558942	IfStatement	if ( ! p -> varlist )		5558555	9					
ANR	5558943	Condition	! p -> varlist	424:5:11357:11367	5558555	0	True				
ANR	5558944	UnaryOperationExpression	! p -> varlist		5558555	0					
ANR	5558945	UnaryOperator	!		5558555	0					
ANR	5558946	PtrMemberAccess	p -> varlist		5558555	1					
ANR	5558947	Identifier	p		5558555	0					
ANR	5558948	Identifier	varlist		5558555	1					
ANR	5558949	CompoundStatement		64:18:1364:1364	5558555	1					
ANR	5558950	ExpressionStatement	free ( tstr )	425:16:11388:11399	5558555	0	True				
ANR	5558951	CallExpression	free ( tstr )		5558555	0					
ANR	5558952	Callee	free		5558555	0					
ANR	5558953	Identifier	free		5558555	0					
ANR	5558954	ArgumentList	tstr		5558555	1					
ANR	5558955	Argument	tstr		5558555	0					
ANR	5558956	Identifier	tstr		5558555	0					
ANR	5558957	ReturnStatement	return false ;	426:2:11403:11415	5558555	1	True				
ANR	5558958	Identifier	false		5558555	0					
ANR	5558959	ExpressionStatement	"bpargs = p -> varlist ( anal , f , 'b' )"	428:1:11428:11462	5558555	10	True				
ANR	5558960	AssignmentExpression	"bpargs = p -> varlist ( anal , f , 'b' )"		5558555	0		=			
ANR	5558961	Identifier	bpargs		5558555	0					
ANR	5558962	CallExpression	"p -> varlist ( anal , f , 'b' )"		5558555	1					
ANR	5558963	Callee	p -> varlist		5558555	0					
ANR	5558964	PtrMemberAccess	p -> varlist		5558555	0					
ANR	5558965	Identifier	p		5558555	0					
ANR	5558966	Identifier	varlist		5558555	1					
ANR	5558967	ArgumentList	anal		5558555	1					
ANR	5558968	Argument	anal		5558555	0					
ANR	5558969	Identifier	anal		5558555	0					
ANR	5558970	Argument	f		5558555	1					
ANR	5558971	Identifier	f		5558555	0					
ANR	5558972	Argument	'b'		5558555	2					
ANR	5558973	PrimaryExpression	'b'		5558555	0					
ANR	5558974	ExpressionStatement	"spargs = p -> varlist ( anal , f , 's' )"	429:1:11465:11499	5558555	11	True				
ANR	5558975	AssignmentExpression	"spargs = p -> varlist ( anal , f , 's' )"		5558555	0		=			
ANR	5558976	Identifier	spargs		5558555	0					
ANR	5558977	CallExpression	"p -> varlist ( anal , f , 's' )"		5558555	1					
ANR	5558978	Callee	p -> varlist		5558555	0					
ANR	5558979	PtrMemberAccess	p -> varlist		5558555	0					
ANR	5558980	Identifier	p		5558555	0					
ANR	5558981	Identifier	varlist		5558555	1					
ANR	5558982	ArgumentList	anal		5558555	1					
ANR	5558983	Argument	anal		5558555	0					
ANR	5558984	Identifier	anal		5558555	0					
ANR	5558985	Argument	f		5558555	1					
ANR	5558986	Identifier	f		5558555	0					
ANR	5558987	Argument	's'		5558555	2					
ANR	5558988	PrimaryExpression	's'		5558555	0					
ANR	5558989	IdentifierDeclStatement	bool ucase = * tstr >= 'A' && * tstr <= 'Z' ;	431:1:11554:11595	5558555	12	True				
ANR	5558990	IdentifierDecl	ucase = * tstr >= 'A' && * tstr <= 'Z'		5558555	0					
ANR	5558991	IdentifierDeclType	bool		5558555	0					
ANR	5558992	Identifier	ucase		5558555	1					
ANR	5558993	AssignmentExpression	ucase = * tstr >= 'A' && * tstr <= 'Z'		5558555	2		=			
ANR	5558994	Identifier	ucase		5558555	0					
ANR	5558995	AndExpression	* tstr >= 'A' && * tstr <= 'Z'		5558555	1		&&			
ANR	5558996	RelationalExpression	* tstr >= 'A'		5558555	0		>=			
ANR	5558997	UnaryOperationExpression	* tstr		5558555	0					
ANR	5558998	UnaryOperator	*		5558555	0					
ANR	5558999	Identifier	tstr		5558555	1					
ANR	5559000	PrimaryExpression	'A'		5558555	1					
ANR	5559001	RelationalExpression	* tstr <= 'Z'		5558555	1		<=			
ANR	5559002	UnaryOperationExpression	* tstr		5558555	0					
ANR	5559003	UnaryOperator	*		5558555	0					
ANR	5559004	Identifier	tstr		5558555	1					
ANR	5559005	PrimaryExpression	'Z'		5558555	1					
ANR	5559006	IfStatement	if ( ucase && tstr [ 1 ] )		5558555	13					
ANR	5559007	Condition	ucase && tstr [ 1 ]	432:5:11602:11617	5558555	0	True				
ANR	5559008	AndExpression	ucase && tstr [ 1 ]		5558555	0		&&			
ANR	5559009	Identifier	ucase		5558555	0					
ANR	5559010	ArrayIndexing	tstr [ 1 ]		5558555	1					
ANR	5559011	Identifier	tstr		5558555	0					
ANR	5559012	PrimaryExpression	1		5558555	1					
ANR	5559013	CompoundStatement		72:23:1614:1614	5558555	1					
ANR	5559014	ExpressionStatement	ucase = tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'	433:2:11624:11664	5558555	0	True				
ANR	5559015	AssignmentExpression	ucase = tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'		5558555	0		=			
ANR	5559016	Identifier	ucase		5558555	0					
ANR	5559017	AndExpression	tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'		5558555	1		&&			
ANR	5559018	RelationalExpression	tstr [ 1 ] >= 'A'		5558555	0		>=			
ANR	5559019	ArrayIndexing	tstr [ 1 ]		5558555	0					
ANR	5559020	Identifier	tstr		5558555	0					
ANR	5559021	PrimaryExpression	1		5558555	1					
ANR	5559022	PrimaryExpression	'A'		5558555	1					
ANR	5559023	RelationalExpression	tstr [ 1 ] <= 'Z'		5558555	1		<=			
ANR	5559024	ArrayIndexing	tstr [ 1 ]		5558555	0					
ANR	5559025	Identifier	tstr		5558555	0					
ANR	5559026	PrimaryExpression	1		5558555	1					
ANR	5559027	PrimaryExpression	'Z'		5558555	1					
ANR	5559028	IdentifierDeclStatement	char * ireg = NULL ;	435:1:11670:11687	5558555	14	True				
ANR	5559029	IdentifierDecl	* ireg = NULL		5558555	0					
ANR	5559030	IdentifierDeclType	char *		5558555	0					
ANR	5559031	Identifier	ireg		5558555	1					
ANR	5559032	AssignmentExpression	* ireg = NULL		5558555	2		=			
ANR	5559033	Identifier	NULL		5558555	0					
ANR	5559034	Identifier	NULL		5558555	1					
ANR	5559035	IfStatement	if ( p -> get_op_ireg )		5558555	15					
ANR	5559036	Condition	p -> get_op_ireg	436:5:11694:11707	5558555	0	True				
ANR	5559037	PtrMemberAccess	p -> get_op_ireg		5558555	0					
ANR	5559038	Identifier	p		5558555	0					
ANR	5559039	Identifier	get_op_ireg		5558555	1					
ANR	5559040	CompoundStatement		76:21:1704:1704	5558555	1					
ANR	5559041	ExpressionStatement	"ireg = p -> get_op_ireg ( p -> user , addr )"	437:2:11714:11750	5558555	0	True				
ANR	5559042	AssignmentExpression	"ireg = p -> get_op_ireg ( p -> user , addr )"		5558555	0		=			
ANR	5559043	Identifier	ireg		5558555	0					
ANR	5559044	CallExpression	"p -> get_op_ireg ( p -> user , addr )"		5558555	1					
ANR	5559045	Callee	p -> get_op_ireg		5558555	0					
ANR	5559046	PtrMemberAccess	p -> get_op_ireg		5558555	0					
ANR	5559047	Identifier	p		5558555	0					
ANR	5559048	Identifier	get_op_ireg		5558555	1					
ANR	5559049	ArgumentList	p -> user		5558555	1					
ANR	5559050	Argument	p -> user		5558555	0					
ANR	5559051	PtrMemberAccess	p -> user		5558555	0					
ANR	5559052	Identifier	p		5558555	0					
ANR	5559053	Identifier	user		5558555	1					
ANR	5559054	Argument	addr		5558555	1					
ANR	5559055	Identifier	addr		5558555	0					
ANR	5559056	Statement	r_list_foreach	439:1:11756:11769	5558555	16	True				
ANR	5559057	Statement	(	439:16:11771:11771	5558555	17	True				
ANR	5559058	Statement	spargs	439:17:11772:11777	5558555	18	True				
ANR	5559059	Statement	","	439:23:11778:11778	5558555	19	True				
ANR	5559060	Statement	spiter	439:25:11780:11785	5558555	20	True				
ANR	5559061	Statement	","	439:31:11786:11786	5558555	21	True				
ANR	5559062	Statement	sparg	439:33:11788:11792	5558555	22	True				
ANR	5559063	Statement	)	439:38:11793:11793	5558555	23	True				
ANR	5559064	CompoundStatement		97:2:2274:2306	5558555	24					
ANR	5559065	ExpressionStatement	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_SP ] , sparg -> delta , true , att , ireg , oldstr , sizeof ( oldstr ) )"	441:2:11836:11935	5558555	0	True				
ANR	5559066	CallExpression	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_SP ] , sparg -> delta , true , att , ireg , oldstr , sizeof ( oldstr ) )"		5558555	0					
ANR	5559067	Callee	mk_reg_str		5558555	0					
ANR	5559068	Identifier	mk_reg_str		5558555	0					
ANR	5559069	ArgumentList	anal -> reg -> name [ R_REG_NAME_SP ]		5558555	1					
ANR	5559070	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5558555	0					
ANR	5559071	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5558555	0					
ANR	5559072	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559073	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559074	Identifier	anal		5558555	0					
ANR	5559075	Identifier	reg		5558555	1					
ANR	5559076	Identifier	name		5558555	1					
ANR	5559077	Identifier	R_REG_NAME_SP		5558555	1					
ANR	5559078	Argument	sparg -> delta		5558555	1					
ANR	5559079	PtrMemberAccess	sparg -> delta		5558555	0					
ANR	5559080	Identifier	sparg		5558555	0					
ANR	5559081	Identifier	delta		5558555	1					
ANR	5559082	Argument	true		5558555	2					
ANR	5559083	Identifier	true		5558555	0					
ANR	5559084	Argument	att		5558555	3					
ANR	5559085	Identifier	att		5558555	0					
ANR	5559086	Argument	ireg		5558555	4					
ANR	5559087	Identifier	ireg		5558555	0					
ANR	5559088	Argument	oldstr		5558555	5					
ANR	5559089	Identifier	oldstr		5558555	0					
ANR	5559090	Argument	sizeof ( oldstr )		5558555	6					
ANR	5559091	SizeofExpression	sizeof ( oldstr )		5558555	0					
ANR	5559092	Sizeof	sizeof		5558555	0					
ANR	5559093	SizeofOperand	oldstr		5558555	1					
ANR	5559094	IfStatement	if ( ucase )		5558555	1					
ANR	5559095	Condition	ucase	443:6:11944:11948	5558555	0	True				
ANR	5559096	Identifier	ucase		5558555	0					
ANR	5559097	CompoundStatement		83:13:1945:1945	5558555	1					
ANR	5559098	ExpressionStatement	"r_str_case ( oldstr , true )"	444:3:11956:11981	5558555	0	True				
ANR	5559099	CallExpression	"r_str_case ( oldstr , true )"		5558555	0					
ANR	5559100	Callee	r_str_case		5558555	0					
ANR	5559101	Identifier	r_str_case		5558555	0					
ANR	5559102	ArgumentList	oldstr		5558555	1					
ANR	5559103	Argument	oldstr		5558555	0					
ANR	5559104	Identifier	oldstr		5558555	0					
ANR	5559105	Argument	true		5558555	1					
ANR	5559106	Identifier	true		5558555	0					
ANR	5559107	ExpressionStatement	"parse_localvar ( p , newstr , sizeof ( newstr ) , sparg -> name , anal -> reg -> name [ R_REG_NAME_SP ] , '+' , ireg , att )"	446:2:11989:12093	5558555	2	True				
ANR	5559108	CallExpression	"parse_localvar ( p , newstr , sizeof ( newstr ) , sparg -> name , anal -> reg -> name [ R_REG_NAME_SP ] , '+' , ireg , att )"		5558555	0					
ANR	5559109	Callee	parse_localvar		5558555	0					
ANR	5559110	Identifier	parse_localvar		5558555	0					
ANR	5559111	ArgumentList	p		5558555	1					
ANR	5559112	Argument	p		5558555	0					
ANR	5559113	Identifier	p		5558555	0					
ANR	5559114	Argument	newstr		5558555	1					
ANR	5559115	Identifier	newstr		5558555	0					
ANR	5559116	Argument	sizeof ( newstr )		5558555	2					
ANR	5559117	SizeofExpression	sizeof ( newstr )		5558555	0					
ANR	5559118	Sizeof	sizeof		5558555	0					
ANR	5559119	SizeofOperand	newstr		5558555	1					
ANR	5559120	Argument	sparg -> name		5558555	3					
ANR	5559121	PtrMemberAccess	sparg -> name		5558555	0					
ANR	5559122	Identifier	sparg		5558555	0					
ANR	5559123	Identifier	name		5558555	1					
ANR	5559124	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5558555	4					
ANR	5559125	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5558555	0					
ANR	5559126	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559127	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559128	Identifier	anal		5558555	0					
ANR	5559129	Identifier	reg		5558555	1					
ANR	5559130	Identifier	name		5558555	1					
ANR	5559131	Identifier	R_REG_NAME_SP		5558555	1					
ANR	5559132	Argument	'+'		5558555	5					
ANR	5559133	PrimaryExpression	'+'		5558555	0					
ANR	5559134	Argument	ireg		5558555	6					
ANR	5559135	Identifier	ireg		5558555	0					
ANR	5559136	Argument	att		5558555	7					
ANR	5559137	Identifier	att		5558555	0					
ANR	5559138	IfStatement	if ( ucase )		5558555	3					
ANR	5559139	Condition	ucase	447:6:12101:12105	5558555	0	True				
ANR	5559140	Identifier	ucase		5558555	0					
ANR	5559141	CompoundStatement		88:3:2107:2140	5558555	1					
ANR	5559142	IdentifierDeclStatement	"char * plus = strchr ( newstr , '+' ) ;"	448:3:12113:12146	5558555	0	True				
ANR	5559143	IdentifierDecl	"* plus = strchr ( newstr , '+' )"		5558555	0					
ANR	5559144	IdentifierDeclType	char *		5558555	0					
ANR	5559145	Identifier	plus		5558555	1					
ANR	5559146	AssignmentExpression	"* plus = strchr ( newstr , '+' )"		5558555	2		=			
ANR	5559147	Identifier	plus		5558555	0					
ANR	5559148	CallExpression	"strchr ( newstr , '+' )"		5558555	1					
ANR	5559149	Callee	strchr		5558555	0					
ANR	5559150	Identifier	strchr		5558555	0					
ANR	5559151	ArgumentList	newstr		5558555	1					
ANR	5559152	Argument	newstr		5558555	0					
ANR	5559153	Identifier	newstr		5558555	0					
ANR	5559154	Argument	'+'		5558555	1					
ANR	5559155	PrimaryExpression	'+'		5558555	0					
ANR	5559156	IfStatement	if ( plus )		5558555	1					
ANR	5559157	Condition	plus	449:7:12155:12158	5558555	0	True				
ANR	5559158	Identifier	plus		5558555	0					
ANR	5559159	CompoundStatement		89:13:2155:2155	5558555	1					
ANR	5559160	ExpressionStatement	* plus = 0	450:4:12167:12176	5558555	0	True				
ANR	5559161	AssignmentExpression	* plus = 0		5558555	0		=			
ANR	5559162	UnaryOperationExpression	* plus		5558555	0					
ANR	5559163	UnaryOperator	*		5558555	0					
ANR	5559164	Identifier	plus		5558555	1					
ANR	5559165	PrimaryExpression	0		5558555	1					
ANR	5559166	ExpressionStatement	"r_str_case ( newstr , true )"	451:4:12182:12207	5558555	1	True				
ANR	5559167	CallExpression	"r_str_case ( newstr , true )"		5558555	0					
ANR	5559168	Callee	r_str_case		5558555	0					
ANR	5559169	Identifier	r_str_case		5558555	0					
ANR	5559170	ArgumentList	newstr		5558555	1					
ANR	5559171	Argument	newstr		5558555	0					
ANR	5559172	Identifier	newstr		5558555	0					
ANR	5559173	Argument	true		5558555	1					
ANR	5559174	Identifier	true		5558555	0					
ANR	5559175	ExpressionStatement	* plus = '+'	452:4:12213:12224	5558555	2	True				
ANR	5559176	AssignmentExpression	* plus = '+'		5558555	0		=			
ANR	5559177	UnaryOperationExpression	* plus		5558555	0					
ANR	5559178	UnaryOperator	*		5558555	0					
ANR	5559179	Identifier	plus		5558555	1					
ANR	5559180	PrimaryExpression	'+'		5558555	1					
ANR	5559181	ElseStatement	else		5558555	0					
ANR	5559182	CompoundStatement		93:10:2230:2230	5558555	0					
ANR	5559183	ExpressionStatement	"r_str_case ( newstr , true )"	454:4:12242:12267	5558555	0	True				
ANR	5559184	CallExpression	"r_str_case ( newstr , true )"		5558555	0					
ANR	5559185	Callee	r_str_case		5558555	0					
ANR	5559186	Identifier	r_str_case		5558555	0					
ANR	5559187	ArgumentList	newstr		5558555	1					
ANR	5559188	Argument	newstr		5558555	0					
ANR	5559189	Identifier	newstr		5558555	0					
ANR	5559190	Argument	true		5558555	1					
ANR	5559191	Identifier	true		5558555	0					
ANR	5559192	IdentifierDeclStatement	"char * ptr = strstr ( tstr , oldstr ) ;"	457:2:12280:12312	5558555	4	True				
ANR	5559193	IdentifierDecl	"* ptr = strstr ( tstr , oldstr )"		5558555	0					
ANR	5559194	IdentifierDeclType	char *		5558555	0					
ANR	5559195	Identifier	ptr		5558555	1					
ANR	5559196	AssignmentExpression	"* ptr = strstr ( tstr , oldstr )"		5558555	2		=			
ANR	5559197	Identifier	ptr		5558555	0					
ANR	5559198	CallExpression	"strstr ( tstr , oldstr )"		5558555	1					
ANR	5559199	Callee	strstr		5558555	0					
ANR	5559200	Identifier	strstr		5558555	0					
ANR	5559201	ArgumentList	tstr		5558555	1					
ANR	5559202	Argument	tstr		5558555	0					
ANR	5559203	Identifier	tstr		5558555	0					
ANR	5559204	Argument	oldstr		5558555	1					
ANR	5559205	Identifier	oldstr		5558555	0					
ANR	5559206	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5558555	5					
ANR	5559207	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	458:6:12320:12353	5558555	0	True				
ANR	5559208	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5558555	0		&&			
ANR	5559209	Identifier	ptr		5558555	0					
ANR	5559210	OrExpression	! att || * ( ptr - 1 ) == ' '		5558555	1		||			
ANR	5559211	UnaryOperationExpression	! att		5558555	0					
ANR	5559212	UnaryOperator	!		5558555	0					
ANR	5559213	Identifier	att		5558555	1					
ANR	5559214	EqualityExpression	* ( ptr - 1 ) == ' '		5558555	1		==			
ANR	5559215	UnaryOperationExpression	* ( ptr - 1 )		5558555	0					
ANR	5559216	UnaryOperator	*		5558555	0					
ANR	5559217	AdditiveExpression	ptr - 1		5558555	1		-			
ANR	5559218	Identifier	ptr		5558555	0					
ANR	5559219	PrimaryExpression	1		5558555	1					
ANR	5559220	PrimaryExpression	' '		5558555	1					
ANR	5559221	CompoundStatement		98:42:2350:2350	5558555	1					
ANR	5559222	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	459:3:12361:12407	5558555	0	True				
ANR	5559223	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	0		=			
ANR	5559224	Identifier	tstr		5558555	0					
ANR	5559225	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	1					
ANR	5559226	Callee	r_str_replace		5558555	0					
ANR	5559227	Identifier	r_str_replace		5558555	0					
ANR	5559228	ArgumentList	tstr		5558555	1					
ANR	5559229	Argument	tstr		5558555	0					
ANR	5559230	Identifier	tstr		5558555	0					
ANR	5559231	Argument	oldstr		5558555	1					
ANR	5559232	Identifier	oldstr		5558555	0					
ANR	5559233	Argument	newstr		5558555	2					
ANR	5559234	Identifier	newstr		5558555	0					
ANR	5559235	Argument	1		5558555	3					
ANR	5559236	PrimaryExpression	1		5558555	0					
ANR	5559237	BreakStatement	break ;	460:3:12412:12417	5558555	1	True				
ANR	5559238	ElseStatement	else		5558555	0					
ANR	5559239	CompoundStatement		101:9:2422:2422	5558555	0					
ANR	5559240	ExpressionStatement	"r_str_case ( oldstr , false )"	462:3:12433:12459	5558555	0	True				
ANR	5559241	CallExpression	"r_str_case ( oldstr , false )"		5558555	0					
ANR	5559242	Callee	r_str_case		5558555	0					
ANR	5559243	Identifier	r_str_case		5558555	0					
ANR	5559244	ArgumentList	oldstr		5558555	1					
ANR	5559245	Argument	oldstr		5558555	0					
ANR	5559246	Identifier	oldstr		5558555	0					
ANR	5559247	Argument	false		5558555	1					
ANR	5559248	Identifier	false		5558555	0					
ANR	5559249	ExpressionStatement	"ptr = strstr ( tstr , oldstr )"	463:3:12464:12490	5558555	1	True				
ANR	5559250	AssignmentExpression	"ptr = strstr ( tstr , oldstr )"		5558555	0		=			
ANR	5559251	Identifier	ptr		5558555	0					
ANR	5559252	CallExpression	"strstr ( tstr , oldstr )"		5558555	1					
ANR	5559253	Callee	strstr		5558555	0					
ANR	5559254	Identifier	strstr		5558555	0					
ANR	5559255	ArgumentList	tstr		5558555	1					
ANR	5559256	Argument	tstr		5558555	0					
ANR	5559257	Identifier	tstr		5558555	0					
ANR	5559258	Argument	oldstr		5558555	1					
ANR	5559259	Identifier	oldstr		5558555	0					
ANR	5559260	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5558555	2					
ANR	5559261	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	464:7:12499:12532	5558555	0	True				
ANR	5559262	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5558555	0		&&			
ANR	5559263	Identifier	ptr		5558555	0					
ANR	5559264	OrExpression	! att || * ( ptr - 1 ) == ' '		5558555	1		||			
ANR	5559265	UnaryOperationExpression	! att		5558555	0					
ANR	5559266	UnaryOperator	!		5558555	0					
ANR	5559267	Identifier	att		5558555	1					
ANR	5559268	EqualityExpression	* ( ptr - 1 ) == ' '		5558555	1		==			
ANR	5559269	UnaryOperationExpression	* ( ptr - 1 )		5558555	0					
ANR	5559270	UnaryOperator	*		5558555	0					
ANR	5559271	AdditiveExpression	ptr - 1		5558555	1		-			
ANR	5559272	Identifier	ptr		5558555	0					
ANR	5559273	PrimaryExpression	1		5558555	1					
ANR	5559274	PrimaryExpression	' '		5558555	1					
ANR	5559275	CompoundStatement		104:43:2529:2529	5558555	1					
ANR	5559276	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	465:4:12541:12587	5558555	0	True				
ANR	5559277	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	0		=			
ANR	5559278	Identifier	tstr		5558555	0					
ANR	5559279	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	1					
ANR	5559280	Callee	r_str_replace		5558555	0					
ANR	5559281	Identifier	r_str_replace		5558555	0					
ANR	5559282	ArgumentList	tstr		5558555	1					
ANR	5559283	Argument	tstr		5558555	0					
ANR	5559284	Identifier	tstr		5558555	0					
ANR	5559285	Argument	oldstr		5558555	1					
ANR	5559286	Identifier	oldstr		5558555	0					
ANR	5559287	Argument	newstr		5558555	2					
ANR	5559288	Identifier	newstr		5558555	0					
ANR	5559289	Argument	1		5558555	3					
ANR	5559290	PrimaryExpression	1		5558555	0					
ANR	5559291	BreakStatement	break ;	466:4:12593:12598	5558555	1	True				
ANR	5559292	Statement	r_list_foreach	471:1:12656:12669	5558555	25	True				
ANR	5559293	Statement	(	471:16:12671:12671	5558555	26	True				
ANR	5559294	Statement	bpargs	471:17:12672:12677	5558555	27	True				
ANR	5559295	Statement	","	471:23:12678:12678	5558555	28	True				
ANR	5559296	Statement	bpargiter	471:25:12680:12688	5558555	29	True				
ANR	5559297	Statement	","	471:34:12689:12689	5558555	30	True				
ANR	5559298	Statement	bparg	471:36:12691:12695	5558555	31	True				
ANR	5559299	Statement	)	471:41:12696:12696	5558555	32	True				
ANR	5559300	CompoundStatement		132:2:3244:3277	5558555	33					
ANR	5559301	IdentifierDeclStatement	char sign = '+' ;	472:2:12702:12717	5558555	0	True				
ANR	5559302	IdentifierDecl	sign = '+'		5558555	0					
ANR	5559303	IdentifierDeclType	char		5558555	0					
ANR	5559304	Identifier	sign		5558555	1					
ANR	5559305	AssignmentExpression	sign = '+'		5558555	2		=			
ANR	5559306	Identifier	sign		5558555	0					
ANR	5559307	PrimaryExpression	'+'		5558555	1					
ANR	5559308	IfStatement	if ( bparg -> delta < 0 )		5558555	1					
ANR	5559309	Condition	bparg -> delta < 0	473:6:12725:12740	5558555	0	True				
ANR	5559310	RelationalExpression	bparg -> delta < 0		5558555	0		<			
ANR	5559311	PtrMemberAccess	bparg -> delta		5558555	0					
ANR	5559312	Identifier	bparg		5558555	0					
ANR	5559313	Identifier	delta		5558555	1					
ANR	5559314	PrimaryExpression	0		5558555	1					
ANR	5559315	CompoundStatement		113:24:2737:2737	5558555	1					
ANR	5559316	ExpressionStatement	sign = '-'	474:3:12748:12758	5558555	0	True				
ANR	5559317	AssignmentExpression	sign = '-'		5558555	0		=			
ANR	5559318	Identifier	sign		5558555	0					
ANR	5559319	PrimaryExpression	'-'		5558555	1					
ANR	5559320	ExpressionStatement	bparg -> delta = - bparg -> delta	475:3:12763:12791	5558555	1	True				
ANR	5559321	AssignmentExpression	bparg -> delta = - bparg -> delta		5558555	0		=			
ANR	5559322	PtrMemberAccess	bparg -> delta		5558555	0					
ANR	5559323	Identifier	bparg		5558555	0					
ANR	5559324	Identifier	delta		5558555	1					
ANR	5559325	UnaryOperationExpression	- bparg -> delta		5558555	1					
ANR	5559326	UnaryOperator	-		5558555	0					
ANR	5559327	PtrMemberAccess	bparg -> delta		5558555	1					
ANR	5559328	Identifier	bparg		5558555	0					
ANR	5559329	Identifier	delta		5558555	1					
ANR	5559330	ExpressionStatement	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_BP ] , bparg -> delta , sign == '+' , att , ireg , oldstr , sizeof ( oldstr ) )"	477:2:12799:12903	5558555	2	True				
ANR	5559331	CallExpression	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_BP ] , bparg -> delta , sign == '+' , att , ireg , oldstr , sizeof ( oldstr ) )"		5558555	0					
ANR	5559332	Callee	mk_reg_str		5558555	0					
ANR	5559333	Identifier	mk_reg_str		5558555	0					
ANR	5559334	ArgumentList	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	1					
ANR	5559335	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559336	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559337	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559338	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559339	Identifier	anal		5558555	0					
ANR	5559340	Identifier	reg		5558555	1					
ANR	5559341	Identifier	name		5558555	1					
ANR	5559342	Identifier	R_REG_NAME_BP		5558555	1					
ANR	5559343	Argument	bparg -> delta		5558555	1					
ANR	5559344	PtrMemberAccess	bparg -> delta		5558555	0					
ANR	5559345	Identifier	bparg		5558555	0					
ANR	5559346	Identifier	delta		5558555	1					
ANR	5559347	Argument	sign == '+'		5558555	2					
ANR	5559348	EqualityExpression	sign == '+'		5558555	0		==			
ANR	5559349	Identifier	sign		5558555	0					
ANR	5559350	PrimaryExpression	'+'		5558555	1					
ANR	5559351	Argument	att		5558555	3					
ANR	5559352	Identifier	att		5558555	0					
ANR	5559353	Argument	ireg		5558555	4					
ANR	5559354	Identifier	ireg		5558555	0					
ANR	5559355	Argument	oldstr		5558555	5					
ANR	5559356	Identifier	oldstr		5558555	0					
ANR	5559357	Argument	sizeof ( oldstr )		5558555	6					
ANR	5559358	SizeofExpression	sizeof ( oldstr )		5558555	0					
ANR	5559359	Sizeof	sizeof		5558555	0					
ANR	5559360	SizeofOperand	oldstr		5558555	1					
ANR	5559361	IfStatement	if ( ucase )		5558555	3					
ANR	5559362	Condition	ucase	478:6:12911:12915	5558555	0	True				
ANR	5559363	Identifier	ucase		5558555	0					
ANR	5559364	CompoundStatement		118:13:2912:2912	5558555	1					
ANR	5559365	ExpressionStatement	"r_str_case ( oldstr , true )"	479:3:12923:12948	5558555	0	True				
ANR	5559366	CallExpression	"r_str_case ( oldstr , true )"		5558555	0					
ANR	5559367	Callee	r_str_case		5558555	0					
ANR	5559368	Identifier	r_str_case		5558555	0					
ANR	5559369	ArgumentList	oldstr		5558555	1					
ANR	5559370	Argument	oldstr		5558555	0					
ANR	5559371	Identifier	oldstr		5558555	0					
ANR	5559372	Argument	true		5558555	1					
ANR	5559373	Identifier	true		5558555	0					
ANR	5559374	ExpressionStatement	"parse_localvar ( p , newstr , sizeof ( newstr ) , bparg -> name , anal -> reg -> name [ R_REG_NAME_BP ] , sign , ireg , att )"	481:2:12956:13061	5558555	4	True				
ANR	5559375	CallExpression	"parse_localvar ( p , newstr , sizeof ( newstr ) , bparg -> name , anal -> reg -> name [ R_REG_NAME_BP ] , sign , ireg , att )"		5558555	0					
ANR	5559376	Callee	parse_localvar		5558555	0					
ANR	5559377	Identifier	parse_localvar		5558555	0					
ANR	5559378	ArgumentList	p		5558555	1					
ANR	5559379	Argument	p		5558555	0					
ANR	5559380	Identifier	p		5558555	0					
ANR	5559381	Argument	newstr		5558555	1					
ANR	5559382	Identifier	newstr		5558555	0					
ANR	5559383	Argument	sizeof ( newstr )		5558555	2					
ANR	5559384	SizeofExpression	sizeof ( newstr )		5558555	0					
ANR	5559385	Sizeof	sizeof		5558555	0					
ANR	5559386	SizeofOperand	newstr		5558555	1					
ANR	5559387	Argument	bparg -> name		5558555	3					
ANR	5559388	PtrMemberAccess	bparg -> name		5558555	0					
ANR	5559389	Identifier	bparg		5558555	0					
ANR	5559390	Identifier	name		5558555	1					
ANR	5559391	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	4					
ANR	5559392	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559393	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559394	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559395	Identifier	anal		5558555	0					
ANR	5559396	Identifier	reg		5558555	1					
ANR	5559397	Identifier	name		5558555	1					
ANR	5559398	Identifier	R_REG_NAME_BP		5558555	1					
ANR	5559399	Argument	sign		5558555	5					
ANR	5559400	Identifier	sign		5558555	0					
ANR	5559401	Argument	ireg		5558555	6					
ANR	5559402	Identifier	ireg		5558555	0					
ANR	5559403	Argument	att		5558555	7					
ANR	5559404	Identifier	att		5558555	0					
ANR	5559405	IfStatement	if ( ucase )		5558555	5					
ANR	5559406	Condition	ucase	482:6:13069:13073	5558555	0	True				
ANR	5559407	Identifier	ucase		5558555	0					
ANR	5559408	CompoundStatement		123:3:3075:3109	5558555	1					
ANR	5559409	IdentifierDeclStatement	"char * plus = strchr ( newstr , sign ) ;"	483:3:13081:13115	5558555	0	True				
ANR	5559410	IdentifierDecl	"* plus = strchr ( newstr , sign )"		5558555	0					
ANR	5559411	IdentifierDeclType	char *		5558555	0					
ANR	5559412	Identifier	plus		5558555	1					
ANR	5559413	AssignmentExpression	"* plus = strchr ( newstr , sign )"		5558555	2		=			
ANR	5559414	Identifier	plus		5558555	0					
ANR	5559415	CallExpression	"strchr ( newstr , sign )"		5558555	1					
ANR	5559416	Callee	strchr		5558555	0					
ANR	5559417	Identifier	strchr		5558555	0					
ANR	5559418	ArgumentList	newstr		5558555	1					
ANR	5559419	Argument	newstr		5558555	0					
ANR	5559420	Identifier	newstr		5558555	0					
ANR	5559421	Argument	sign		5558555	1					
ANR	5559422	Identifier	sign		5558555	0					
ANR	5559423	IfStatement	if ( plus )		5558555	1					
ANR	5559424	Condition	plus	484:7:13124:13127	5558555	0	True				
ANR	5559425	Identifier	plus		5558555	0					
ANR	5559426	CompoundStatement		124:13:3124:3124	5558555	1					
ANR	5559427	ExpressionStatement	* plus = 0	485:4:13136:13145	5558555	0	True				
ANR	5559428	AssignmentExpression	* plus = 0		5558555	0		=			
ANR	5559429	UnaryOperationExpression	* plus		5558555	0					
ANR	5559430	UnaryOperator	*		5558555	0					
ANR	5559431	Identifier	plus		5558555	1					
ANR	5559432	PrimaryExpression	0		5558555	1					
ANR	5559433	ExpressionStatement	"r_str_case ( newstr , true )"	486:4:13151:13176	5558555	1	True				
ANR	5559434	CallExpression	"r_str_case ( newstr , true )"		5558555	0					
ANR	5559435	Callee	r_str_case		5558555	0					
ANR	5559436	Identifier	r_str_case		5558555	0					
ANR	5559437	ArgumentList	newstr		5558555	1					
ANR	5559438	Argument	newstr		5558555	0					
ANR	5559439	Identifier	newstr		5558555	0					
ANR	5559440	Argument	true		5558555	1					
ANR	5559441	Identifier	true		5558555	0					
ANR	5559442	ExpressionStatement	* plus = sign	487:4:13182:13194	5558555	2	True				
ANR	5559443	AssignmentExpression	* plus = sign		5558555	0		=			
ANR	5559444	UnaryOperationExpression	* plus		5558555	0					
ANR	5559445	UnaryOperator	*		5558555	0					
ANR	5559446	Identifier	plus		5558555	1					
ANR	5559447	Identifier	sign		5558555	1					
ANR	5559448	ElseStatement	else		5558555	0					
ANR	5559449	CompoundStatement		128:10:3200:3200	5558555	0					
ANR	5559450	ExpressionStatement	"r_str_case ( newstr , true )"	489:4:13212:13237	5558555	0	True				
ANR	5559451	CallExpression	"r_str_case ( newstr , true )"		5558555	0					
ANR	5559452	Callee	r_str_case		5558555	0					
ANR	5559453	Identifier	r_str_case		5558555	0					
ANR	5559454	ArgumentList	newstr		5558555	1					
ANR	5559455	Argument	newstr		5558555	0					
ANR	5559456	Identifier	newstr		5558555	0					
ANR	5559457	Argument	true		5558555	1					
ANR	5559458	Identifier	true		5558555	0					
ANR	5559459	IdentifierDeclStatement	"char * ptr = strstr ( tstr , oldstr ) ;"	492:2:13250:13283	5558555	6	True				
ANR	5559460	IdentifierDecl	"* ptr = strstr ( tstr , oldstr )"		5558555	0					
ANR	5559461	IdentifierDeclType	char *		5558555	0					
ANR	5559462	Identifier	ptr		5558555	1					
ANR	5559463	AssignmentExpression	"* ptr = strstr ( tstr , oldstr )"		5558555	2		=			
ANR	5559464	Identifier	ptr		5558555	0					
ANR	5559465	CallExpression	"strstr ( tstr , oldstr )"		5558555	1					
ANR	5559466	Callee	strstr		5558555	0					
ANR	5559467	Identifier	strstr		5558555	0					
ANR	5559468	ArgumentList	tstr		5558555	1					
ANR	5559469	Argument	tstr		5558555	0					
ANR	5559470	Identifier	tstr		5558555	0					
ANR	5559471	Argument	oldstr		5558555	1					
ANR	5559472	Identifier	oldstr		5558555	0					
ANR	5559473	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5558555	7					
ANR	5559474	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	493:6:13291:13324	5558555	0	True				
ANR	5559475	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5558555	0		&&			
ANR	5559476	Identifier	ptr		5558555	0					
ANR	5559477	OrExpression	! att || * ( ptr - 1 ) == ' '		5558555	1		||			
ANR	5559478	UnaryOperationExpression	! att		5558555	0					
ANR	5559479	UnaryOperator	!		5558555	0					
ANR	5559480	Identifier	att		5558555	1					
ANR	5559481	EqualityExpression	* ( ptr - 1 ) == ' '		5558555	1		==			
ANR	5559482	UnaryOperationExpression	* ( ptr - 1 )		5558555	0					
ANR	5559483	UnaryOperator	*		5558555	0					
ANR	5559484	AdditiveExpression	ptr - 1		5558555	1		-			
ANR	5559485	Identifier	ptr		5558555	0					
ANR	5559486	PrimaryExpression	1		5558555	1					
ANR	5559487	PrimaryExpression	' '		5558555	1					
ANR	5559488	CompoundStatement		133:42:3321:3321	5558555	1					
ANR	5559489	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	494:3:13332:13378	5558555	0	True				
ANR	5559490	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	0		=			
ANR	5559491	Identifier	tstr		5558555	0					
ANR	5559492	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	1					
ANR	5559493	Callee	r_str_replace		5558555	0					
ANR	5559494	Identifier	r_str_replace		5558555	0					
ANR	5559495	ArgumentList	tstr		5558555	1					
ANR	5559496	Argument	tstr		5558555	0					
ANR	5559497	Identifier	tstr		5558555	0					
ANR	5559498	Argument	oldstr		5558555	1					
ANR	5559499	Identifier	oldstr		5558555	0					
ANR	5559500	Argument	newstr		5558555	2					
ANR	5559501	Identifier	newstr		5558555	0					
ANR	5559502	Argument	1		5558555	3					
ANR	5559503	PrimaryExpression	1		5558555	0					
ANR	5559504	BreakStatement	break ;	495:3:13383:13388	5558555	1	True				
ANR	5559505	ElseStatement	else		5558555	0					
ANR	5559506	CompoundStatement		136:9:3393:3393	5558555	0					
ANR	5559507	ExpressionStatement	"r_str_case ( oldstr , false )"	497:3:13404:13430	5558555	0	True				
ANR	5559508	CallExpression	"r_str_case ( oldstr , false )"		5558555	0					
ANR	5559509	Callee	r_str_case		5558555	0					
ANR	5559510	Identifier	r_str_case		5558555	0					
ANR	5559511	ArgumentList	oldstr		5558555	1					
ANR	5559512	Argument	oldstr		5558555	0					
ANR	5559513	Identifier	oldstr		5558555	0					
ANR	5559514	Argument	false		5558555	1					
ANR	5559515	Identifier	false		5558555	0					
ANR	5559516	ExpressionStatement	"ptr = strstr ( tstr , oldstr )"	498:3:13435:13461	5558555	1	True				
ANR	5559517	AssignmentExpression	"ptr = strstr ( tstr , oldstr )"		5558555	0		=			
ANR	5559518	Identifier	ptr		5558555	0					
ANR	5559519	CallExpression	"strstr ( tstr , oldstr )"		5558555	1					
ANR	5559520	Callee	strstr		5558555	0					
ANR	5559521	Identifier	strstr		5558555	0					
ANR	5559522	ArgumentList	tstr		5558555	1					
ANR	5559523	Argument	tstr		5558555	0					
ANR	5559524	Identifier	tstr		5558555	0					
ANR	5559525	Argument	oldstr		5558555	1					
ANR	5559526	Identifier	oldstr		5558555	0					
ANR	5559527	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5558555	2					
ANR	5559528	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	499:7:13470:13503	5558555	0	True				
ANR	5559529	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5558555	0		&&			
ANR	5559530	Identifier	ptr		5558555	0					
ANR	5559531	OrExpression	! att || * ( ptr - 1 ) == ' '		5558555	1		||			
ANR	5559532	UnaryOperationExpression	! att		5558555	0					
ANR	5559533	UnaryOperator	!		5558555	0					
ANR	5559534	Identifier	att		5558555	1					
ANR	5559535	EqualityExpression	* ( ptr - 1 ) == ' '		5558555	1		==			
ANR	5559536	UnaryOperationExpression	* ( ptr - 1 )		5558555	0					
ANR	5559537	UnaryOperator	*		5558555	0					
ANR	5559538	AdditiveExpression	ptr - 1		5558555	1		-			
ANR	5559539	Identifier	ptr		5558555	0					
ANR	5559540	PrimaryExpression	1		5558555	1					
ANR	5559541	PrimaryExpression	' '		5558555	1					
ANR	5559542	CompoundStatement		139:43:3500:3500	5558555	1					
ANR	5559543	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	500:4:13512:13558	5558555	0	True				
ANR	5559544	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	0		=			
ANR	5559545	Identifier	tstr		5558555	0					
ANR	5559546	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	1					
ANR	5559547	Callee	r_str_replace		5558555	0					
ANR	5559548	Identifier	r_str_replace		5558555	0					
ANR	5559549	ArgumentList	tstr		5558555	1					
ANR	5559550	Argument	tstr		5558555	0					
ANR	5559551	Identifier	tstr		5558555	0					
ANR	5559552	Argument	oldstr		5558555	1					
ANR	5559553	Identifier	oldstr		5558555	0					
ANR	5559554	Argument	newstr		5558555	2					
ANR	5559555	Identifier	newstr		5558555	0					
ANR	5559556	Argument	1		5558555	3					
ANR	5559557	PrimaryExpression	1		5558555	0					
ANR	5559558	BreakStatement	break ;	501:4:13564:13569	5558555	1	True				
ANR	5559559	ExpressionStatement	"snprintf ( oldstr , sizeof ( oldstr ) - 1 , ""[%s%c0x%x]"" , anal -> reg -> name [ R_REG_NAME_BP ] , sign , bparg -> delta )"	505:2:13606:13708	5558555	8	True				
ANR	5559560	CallExpression	"snprintf ( oldstr , sizeof ( oldstr ) - 1 , ""[%s%c0x%x]"" , anal -> reg -> name [ R_REG_NAME_BP ] , sign , bparg -> delta )"		5558555	0					
ANR	5559561	Callee	snprintf		5558555	0					
ANR	5559562	Identifier	snprintf		5558555	0					
ANR	5559563	ArgumentList	oldstr		5558555	1					
ANR	5559564	Argument	oldstr		5558555	0					
ANR	5559565	Identifier	oldstr		5558555	0					
ANR	5559566	Argument	sizeof ( oldstr ) - 1		5558555	1					
ANR	5559567	AdditiveExpression	sizeof ( oldstr ) - 1		5558555	0		-			
ANR	5559568	SizeofExpression	sizeof ( oldstr )		5558555	0					
ANR	5559569	Sizeof	sizeof		5558555	0					
ANR	5559570	SizeofOperand	oldstr		5558555	1					
ANR	5559571	PrimaryExpression	1		5558555	1					
ANR	5559572	Argument	"""[%s%c0x%x]"""		5558555	2					
ANR	5559573	PrimaryExpression	"""[%s%c0x%x]"""		5558555	0					
ANR	5559574	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	3					
ANR	5559575	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559576	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559577	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559578	Identifier	anal		5558555	0					
ANR	5559579	Identifier	reg		5558555	1					
ANR	5559580	Identifier	name		5558555	1					
ANR	5559581	Identifier	R_REG_NAME_BP		5558555	1					
ANR	5559582	Argument	sign		5558555	4					
ANR	5559583	Identifier	sign		5558555	0					
ANR	5559584	Argument	bparg -> delta		5558555	5					
ANR	5559585	PtrMemberAccess	bparg -> delta		5558555	0					
ANR	5559586	Identifier	bparg		5558555	0					
ANR	5559587	Identifier	delta		5558555	1					
ANR	5559588	IfStatement	"if ( strstr ( tstr , oldstr ) != NULL )"		5558555	9					
ANR	5559589	Condition	"strstr ( tstr , oldstr ) != NULL"	506:6:13716:13744	5558555	0	True				
ANR	5559590	EqualityExpression	"strstr ( tstr , oldstr ) != NULL"		5558555	0		!=			
ANR	5559591	CallExpression	"strstr ( tstr , oldstr )"		5558555	0					
ANR	5559592	Callee	strstr		5558555	0					
ANR	5559593	Identifier	strstr		5558555	0					
ANR	5559594	ArgumentList	tstr		5558555	1					
ANR	5559595	Argument	tstr		5558555	0					
ANR	5559596	Identifier	tstr		5558555	0					
ANR	5559597	Argument	oldstr		5558555	1					
ANR	5559598	Identifier	oldstr		5558555	0					
ANR	5559599	Identifier	NULL		5558555	1					
ANR	5559600	CompoundStatement		146:37:3741:3741	5558555	1					
ANR	5559601	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	507:3:13752:13798	5558555	0	True				
ANR	5559602	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	0		=			
ANR	5559603	Identifier	tstr		5558555	0					
ANR	5559604	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5558555	1					
ANR	5559605	Callee	r_str_replace		5558555	0					
ANR	5559606	Identifier	r_str_replace		5558555	0					
ANR	5559607	ArgumentList	tstr		5558555	1					
ANR	5559608	Argument	tstr		5558555	0					
ANR	5559609	Identifier	tstr		5558555	0					
ANR	5559610	Argument	oldstr		5558555	1					
ANR	5559611	Identifier	oldstr		5558555	0					
ANR	5559612	Argument	newstr		5558555	2					
ANR	5559613	Identifier	newstr		5558555	0					
ANR	5559614	Argument	1		5558555	3					
ANR	5559615	PrimaryExpression	1		5558555	0					
ANR	5559616	BreakStatement	break ;	508:3:13803:13808	5558555	1	True				
ANR	5559617	IdentifierDeclStatement	char bp [ 32 ] ;	512:1:13819:13830	5558555	34	True				
ANR	5559618	IdentifierDecl	bp [ 32 ]		5558555	0					
ANR	5559619	IdentifierDeclType	char [ 32 ]		5558555	0					
ANR	5559620	Identifier	bp		5558555	1					
ANR	5559621	PrimaryExpression	32		5558555	2					
ANR	5559622	IfStatement	if ( anal -> reg -> name [ R_REG_NAME_BP ] )		5558555	35					
ANR	5559623	Condition	anal -> reg -> name [ R_REG_NAME_BP ]	513:5:13837:13866	5558555	0	True				
ANR	5559624	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559625	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559626	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559627	Identifier	anal		5558555	0					
ANR	5559628	Identifier	reg		5558555	1					
ANR	5559629	Identifier	name		5558555	1					
ANR	5559630	Identifier	R_REG_NAME_BP		5558555	1					
ANR	5559631	CompoundStatement		153:37:3863:3863	5558555	1					
ANR	5559632	ExpressionStatement	"strncpy ( bp , anal -> reg -> name [ R_REG_NAME_BP ] , sizeof ( bp ) - 1 )"	514:2:13873:13934	5558555	0	True				
ANR	5559633	CallExpression	"strncpy ( bp , anal -> reg -> name [ R_REG_NAME_BP ] , sizeof ( bp ) - 1 )"		5558555	0					
ANR	5559634	Callee	strncpy		5558555	0					
ANR	5559635	Identifier	strncpy		5558555	0					
ANR	5559636	ArgumentList	bp		5558555	1					
ANR	5559637	Argument	bp		5558555	0					
ANR	5559638	Identifier	bp		5558555	0					
ANR	5559639	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	1					
ANR	5559640	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5558555	0					
ANR	5559641	PtrMemberAccess	anal -> reg -> name		5558555	0					
ANR	5559642	PtrMemberAccess	anal -> reg		5558555	0					
ANR	5559643	Identifier	anal		5558555	0					
ANR	5559644	Identifier	reg		5558555	1					
ANR	5559645	Identifier	name		5558555	1					
ANR	5559646	Identifier	R_REG_NAME_BP		5558555	1					
ANR	5559647	Argument	sizeof ( bp ) - 1		5558555	2					
ANR	5559648	AdditiveExpression	sizeof ( bp ) - 1		5558555	0		-			
ANR	5559649	SizeofExpression	sizeof ( bp )		5558555	0					
ANR	5559650	Sizeof	sizeof		5558555	0					
ANR	5559651	SizeofOperand	bp		5558555	1					
ANR	5559652	PrimaryExpression	1		5558555	1					
ANR	5559653	IfStatement	if ( isupper ( ( ut8 ) * str ) )		5558555	1					
ANR	5559654	Condition	isupper ( ( ut8 ) * str )	515:6:13942:13960	5558555	0	True				
ANR	5559655	CallExpression	isupper ( ( ut8 ) * str )		5558555	0					
ANR	5559656	Callee	isupper		5558555	0					
ANR	5559657	Identifier	isupper		5558555	0					
ANR	5559658	ArgumentList	( ut8 ) * str		5558555	1					
ANR	5559659	Argument	( ut8 ) * str		5558555	0					
ANR	5559660	CastExpression	( ut8 ) * str		5558555	0					
ANR	5559661	CastTarget	ut8		5558555	0					
ANR	5559662	UnaryOperationExpression	* str		5558555	1					
ANR	5559663	UnaryOperator	*		5558555	0					
ANR	5559664	Identifier	str		5558555	1					
ANR	5559665	CompoundStatement		155:27:3957:3957	5558555	1					
ANR	5559666	ExpressionStatement	"r_str_case ( bp , true )"	516:3:13968:13989	5558555	0	True				
ANR	5559667	CallExpression	"r_str_case ( bp , true )"		5558555	0					
ANR	5559668	Callee	r_str_case		5558555	0					
ANR	5559669	Identifier	r_str_case		5558555	0					
ANR	5559670	ArgumentList	bp		5558555	1					
ANR	5559671	Argument	bp		5558555	0					
ANR	5559672	Identifier	bp		5558555	0					
ANR	5559673	Argument	true		5558555	1					
ANR	5559674	Identifier	true		5558555	0					
ANR	5559675	ExpressionStatement	bp [ sizeof ( bp ) - 1 ] = 0	518:2:13997:14020	5558555	2	True				
ANR	5559676	AssignmentExpression	bp [ sizeof ( bp ) - 1 ] = 0		5558555	0		=			
ANR	5559677	ArrayIndexing	bp [ sizeof ( bp ) - 1 ]		5558555	0					
ANR	5559678	Identifier	bp		5558555	0					
ANR	5559679	AdditiveExpression	sizeof ( bp ) - 1		5558555	1		-			
ANR	5559680	SizeofExpression	sizeof ( bp )		5558555	0					
ANR	5559681	Sizeof	sizeof		5558555	0					
ANR	5559682	SizeofOperand	bp		5558555	1					
ANR	5559683	PrimaryExpression	1		5558555	1					
ANR	5559684	PrimaryExpression	0		5558555	1					
ANR	5559685	ElseStatement	else		5558555	0					
ANR	5559686	CompoundStatement		159:8:4024:4024	5558555	0					
ANR	5559687	ExpressionStatement	bp [ 0 ] = 0	520:2:14034:14043	5558555	0	True				
ANR	5559688	AssignmentExpression	bp [ 0 ] = 0		5558555	0		=			
ANR	5559689	ArrayIndexing	bp [ 0 ]		5558555	0					
ANR	5559690	Identifier	bp		5558555	0					
ANR	5559691	PrimaryExpression	0		5558555	1					
ANR	5559692	PrimaryExpression	0		5558555	1					
ANR	5559693	IdentifierDeclStatement	bool ret = true ;	523:1:14050:14065	5558555	36	True				
ANR	5559694	IdentifierDecl	ret = true		5558555	0					
ANR	5559695	IdentifierDeclType	bool		5558555	0					
ANR	5559696	Identifier	ret		5558555	1					
ANR	5559697	AssignmentExpression	ret = true		5558555	2		=			
ANR	5559698	Identifier	true		5558555	0					
ANR	5559699	Identifier	true		5558555	1					
ANR	5559700	IfStatement	if ( len > strlen ( tstr ) )		5558555	37					
ANR	5559701	Condition	len > strlen ( tstr )	524:5:14072:14090	5558555	0	True				
ANR	5559702	RelationalExpression	len > strlen ( tstr )		5558555	0		>			
ANR	5559703	Identifier	len		5558555	0					
ANR	5559704	CallExpression	strlen ( tstr )		5558555	1					
ANR	5559705	Callee	strlen		5558555	0					
ANR	5559706	Identifier	strlen		5558555	0					
ANR	5559707	ArgumentList	tstr		5558555	1					
ANR	5559708	Argument	tstr		5558555	0					
ANR	5559709	Identifier	tstr		5558555	0					
ANR	5559710	CompoundStatement		164:26:4087:4087	5558555	1					
ANR	5559711	ExpressionStatement	"strcpy ( str , tstr )"	525:2:14097:14115	5558555	0	True				
ANR	5559712	CallExpression	"strcpy ( str , tstr )"		5558555	0					
ANR	5559713	Callee	strcpy		5558555	0					
ANR	5559714	Identifier	strcpy		5558555	0					
ANR	5559715	ArgumentList	str		5558555	1					
ANR	5559716	Argument	str		5558555	0					
ANR	5559717	Identifier	str		5558555	0					
ANR	5559718	Argument	tstr		5558555	1					
ANR	5559719	Identifier	tstr		5558555	0					
ANR	5559720	ElseStatement	else		5558555	0					
ANR	5559721	CompoundStatement		166:8:4119:4119	5558555	0					
ANR	5559722	ExpressionStatement	ret = false	528:2:14169:14180	5558555	0	True				
ANR	5559723	AssignmentExpression	ret = false		5558555	0		=			
ANR	5559724	Identifier	ret		5558555	0					
ANR	5559725	Identifier	false		5558555	1					
ANR	5559726	ExpressionStatement	free ( tstr )	530:1:14186:14197	5558555	38	True				
ANR	5559727	CallExpression	free ( tstr )		5558555	0					
ANR	5559728	Callee	free		5558555	0					
ANR	5559729	Identifier	free		5558555	0					
ANR	5559730	ArgumentList	tstr		5558555	1					
ANR	5559731	Argument	tstr		5558555	0					
ANR	5559732	Identifier	tstr		5558555	0					
ANR	5559733	ExpressionStatement	free ( ireg )	531:1:14200:14211	5558555	39	True				
ANR	5559734	CallExpression	free ( ireg )		5558555	0					
ANR	5559735	Callee	free		5558555	0					
ANR	5559736	Identifier	free		5558555	0					
ANR	5559737	ArgumentList	ireg		5558555	1					
ANR	5559738	Argument	ireg		5558555	0					
ANR	5559739	Identifier	ireg		5558555	0					
ANR	5559740	ExpressionStatement	r_list_free ( spargs )	532:1:14214:14234	5558555	40	True				
ANR	5559741	CallExpression	r_list_free ( spargs )		5558555	0					
ANR	5559742	Callee	r_list_free		5558555	0					
ANR	5559743	Identifier	r_list_free		5558555	0					
ANR	5559744	ArgumentList	spargs		5558555	1					
ANR	5559745	Argument	spargs		5558555	0					
ANR	5559746	Identifier	spargs		5558555	0					
ANR	5559747	ExpressionStatement	r_list_free ( bpargs )	533:1:14237:14257	5558555	41	True				
ANR	5559748	CallExpression	r_list_free ( bpargs )		5558555	0					
ANR	5559749	Callee	r_list_free		5558555	0					
ANR	5559750	Identifier	r_list_free		5558555	0					
ANR	5559751	ArgumentList	bpargs		5558555	1					
ANR	5559752	Argument	bpargs		5558555	0					
ANR	5559753	Identifier	bpargs		5558555	0					
ANR	5559754	ReturnStatement	return ret ;	534:1:14260:14270	5558555	42	True				
ANR	5559755	Identifier	ret		5558555	0					
ANR	5559756	ReturnType	static bool		5558555	1					
ANR	5559757	Identifier	varsub		5558555	2					
ANR	5559758	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5558555	3					
ANR	5559759	Parameter	RParse * p	361:20:9922:9930	5558555	0	True				
ANR	5559760	ParameterType	RParse *		5558555	0					
ANR	5559761	Identifier	p		5558555	1					
ANR	5559762	Parameter	RAnalFunction * f	361:31:9933:9948	5558555	1	True				
ANR	5559763	ParameterType	RAnalFunction *		5558555	0					
ANR	5559764	Identifier	f		5558555	1					
ANR	5559765	Parameter	ut64 addr	361:49:9951:9959	5558555	2	True				
ANR	5559766	ParameterType	ut64		5558555	0					
ANR	5559767	Identifier	addr		5558555	1					
ANR	5559768	Parameter	int oplen	361:60:9962:9970	5558555	3	True				
ANR	5559769	ParameterType	int		5558555	0					
ANR	5559770	Identifier	oplen		5558555	1					
ANR	5559771	Parameter	char * data	361:71:9973:9982	5558555	4	True				
ANR	5559772	ParameterType	char *		5558555	0					
ANR	5559773	Identifier	data		5558555	1					
ANR	5559774	Parameter	char * str	361:83:9985:9993	5558555	5	True				
ANR	5559775	ParameterType	char *		5558555	0					
ANR	5559776	Identifier	str		5558555	1					
ANR	5559777	Parameter	int len	361:94:9996:10002	5558555	6	True				
ANR	5559778	ParameterType	int		5558555	0					
ANR	5559779	Identifier	len		5558555	1					
ANR	5559780	CFGEntryNode	ENTRY		5558555		True				
ANR	5559781	CFGExitNode	EXIT		5558555		True				
ANR	5559782	CFGErrorNode	ERROR		5558555		True				
ANR	5559783	Symbol	* word ++		5558555						
ANR	5559784	Symbol	anal -> reg		5558555						
ANR	5559785	Symbol	data		5558555						
ANR	5559786	Symbol	p -> varlist		5558555						
ANR	5559787	Symbol	sign		5558555						
ANR	5559788	Symbol	strchr		5558555						
ANR	5559789	Symbol	* sparg		5558555						
ANR	5559790	Symbol	sparg -> name		5558555						
ANR	5559791	Symbol	tstr		5558555						
ANR	5559792	Symbol	neg		5558555						
ANR	5559793	Symbol	strlen		5558555						
ANR	5559794	Symbol	len		5558555						
ANR	5559795	Symbol	* bp		5558555						
ANR	5559796	Symbol	rip		5558555						
ANR	5559797	Symbol	p -> get_op_ireg		5558555						
ANR	5559798	Symbol	* ptr		5558555						
ANR	5559799	Symbol	r_num_get		5558555						
ANR	5559800	Symbol	anal -> reg -> name		5558555						
ANR	5559801	Symbol	att		5558555						
ANR	5559802	Symbol	R_REG_NAME_BP		5558555						
ANR	5559803	Symbol	ret		5558555						
ANR	5559804	Symbol	oldstr		5558555						
ANR	5559805	Symbol	pre		5558555						
ANR	5559806	Symbol	NULL		5558555						
ANR	5559807	Symbol	ripend		5558555						
ANR	5559808	Symbol	* ( ptr - 1 )		5558555						
ANR	5559809	Symbol	* bparg		5558555						
ANR	5559810	Symbol	sparg -> delta		5558555						
ANR	5559811	Symbol	plus		5558555						
ANR	5559812	Symbol	spargs		5558555						
ANR	5559813	Symbol	str		5558555						
ANR	5559814	Symbol	R_REG_NAME_SP		5558555						
ANR	5559815	Symbol	anal		5558555						
ANR	5559816	Symbol	strstr		5558555						
ANR	5559817	Symbol	bpargiter		5558555						
ANR	5559818	Symbol	bpargs		5558555						
ANR	5559819	Symbol	true		5558555						
ANR	5559820	Symbol	ucase		5558555						
ANR	5559821	Symbol	ireg		5558555						
ANR	5559822	Symbol	word		5558555						
ANR	5559823	Symbol	* anal -> reg -> name		5558555						
ANR	5559824	Symbol	* R_REG_NAME_SP		5558555						
ANR	5559825	Symbol	r_str_casestr		5558555						
ANR	5559826	Symbol	* rip		5558555						
ANR	5559827	Symbol	oplen		5558555						
ANR	5559828	Symbol	tstr_new		5558555						
ANR	5559829	Symbol	bp		5558555						
ANR	5559830	Symbol	r_num_math		5558555						
ANR	5559831	Symbol	bparg		5558555						
ANR	5559832	Symbol	sparg		5558555						
ANR	5559833	Symbol	* * anal		5558555						
ANR	5559834	Symbol	* anal		5558555						
ANR	5559835	Symbol	pos		5558555						
ANR	5559836	Symbol	* anal -> reg		5558555						
ANR	5559837	Symbol	* * * anal		5558555						
ANR	5559838	Symbol	* tstr		5558555						
ANR	5559839	Symbol	r_str_replace		5558555						
ANR	5559840	Symbol	p -> analb . anal		5558555						
ANR	5559841	Symbol	* * anal -> reg		5558555						
ANR	5559842	Symbol	* str		5558555						
ANR	5559843	Symbol	addr		5558555						
ANR	5559844	Symbol	bparg -> name		5558555						
ANR	5559845	Symbol	f		5558555						
ANR	5559846	Symbol	* word		5558555						
ANR	5559847	Symbol	p -> analb		5558555						
ANR	5559848	Symbol	false		5558555						
ANR	5559849	Symbol	isupper		5558555						
ANR	5559850	Symbol	spiter		5558555						
ANR	5559851	Symbol	newstr		5558555						
ANR	5559852	Symbol	n		5558555						
ANR	5559853	Symbol	repl_num		5558555						
ANR	5559854	Symbol	ptr		5558555						
ANR	5559855	Symbol	p		5558555						
ANR	5559856	Symbol	* plus		5558555						
ANR	5559857	Symbol	* R_REG_NAME_BP		5558555						
ANR	5559858	Symbol	p -> relsub		5558555						
ANR	5559859	Symbol	* p		5558555						
ANR	5559860	Symbol	strdup		5558555						
ANR	5559861	Symbol	p -> user		5558555						
ANR	5559862	Symbol	bparg -> delta		5558555						
ANR	5559863	DeclStmt									
ANR	5559864	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_x86_pseudo
ANR	5559865	DeclStmt									
ANR	5559866	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
