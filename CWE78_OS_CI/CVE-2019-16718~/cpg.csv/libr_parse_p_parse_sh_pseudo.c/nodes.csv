command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5033603	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_sh_pseudo.c								
ANR	5033604	Function	replace	13:0:208:4320							
ANR	5033605	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5033604	0					
ANR	5033606	CompoundStatement		13:63:271:4320	5033604	0					
ANR	5033607	IdentifierDeclStatement	"int i , j , k ;"	14:1:274:283	5033604	0	True				
ANR	5033608	IdentifierDecl	i		5033604	0					
ANR	5033609	IdentifierDeclType	int		5033604	0					
ANR	5033610	Identifier	i		5033604	1					
ANR	5033611	IdentifierDecl	j		5033604	1					
ANR	5033612	IdentifierDeclType	int		5033604	0					
ANR	5033613	Identifier	j		5033604	1					
ANR	5033614	IdentifierDecl	k		5033604	2					
ANR	5033615	IdentifierDeclType	int		5033604	0					
ANR	5033616	Identifier	k		5033604	1					
ANR	5033617	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } } ;"	15:1:286:3644	5033604	1	True				
ANR	5033618	IdentifierDecl	"ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } }"		5033604	0					
ANR	5033619	IdentifierDeclType	 [ ]		5033604	0					
ANR	5033620	Identifier	ops		5033604	1					
ANR	5033621	AssignmentExpression	"ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } }"		5033604	2		=			
ANR	5033622	Identifier	ops		5033604	0					
ANR	5033623	InitializerList	"""add"""		5033604	1					
ANR	5033624	InitializerList	"""add"""		5033604	0					
ANR	5033625	PrimaryExpression	"""add"""		5033604	0					
ANR	5033626	PrimaryExpression	"""B += A"""		5033604	1					
ANR	5033627	InitializerList	"""addc"""		5033604	1					
ANR	5033628	PrimaryExpression	"""addc"""		5033604	0					
ANR	5033629	PrimaryExpression	"""B += A + t"""		5033604	1					
ANR	5033630	InitializerList	"""addv"""		5033604	2					
ANR	5033631	PrimaryExpression	"""addv"""		5033604	0					
ANR	5033632	PrimaryExpression	"""B += A; t = int_overflow (B)"""		5033604	1					
ANR	5033633	InitializerList	"""and"""		5033604	3					
ANR	5033634	PrimaryExpression	"""and"""		5033604	0					
ANR	5033635	PrimaryExpression	"""B &= A"""		5033604	1					
ANR	5033636	InitializerList	"""and.b"""		5033604	4					
ANR	5033637	PrimaryExpression	"""and.b"""		5033604	0					
ANR	5033638	PrimaryExpression	"""B &= A"""		5033604	1					
ANR	5033639	InitializerList	"""bf"""		5033604	5					
ANR	5033640	PrimaryExpression	"""bf"""		5033604	0					
ANR	5033641	PrimaryExpression	"""if (!t) goto A"""		5033604	1					
ANR	5033642	InitializerList	"""bf.s"""		5033604	6					
ANR	5033643	PrimaryExpression	"""bf.s"""		5033604	0					
ANR	5033644	PrimaryExpression	"""if (!t) goto A"""		5033604	1					
ANR	5033645	InitializerList	"""bra"""		5033604	7					
ANR	5033646	PrimaryExpression	"""bra"""		5033604	0					
ANR	5033647	PrimaryExpression	"""goto A"""		5033604	1					
ANR	5033648	InitializerList	"""brk"""		5033604	8					
ANR	5033649	PrimaryExpression	"""brk"""		5033604	0					
ANR	5033650	PrimaryExpression	"""_break_exception ()"""		5033604	1					
ANR	5033651	InitializerList	"""bsr"""		5033604	9					
ANR	5033652	PrimaryExpression	"""bsr"""		5033604	0					
ANR	5033653	PrimaryExpression	"""A ()"""		5033604	1					
ANR	5033654	InitializerList	"""bsrf"""		5033604	10					
ANR	5033655	PrimaryExpression	"""bsrf"""		5033604	0					
ANR	5033656	PrimaryExpression	"""A ()"""		5033604	1					
ANR	5033657	InitializerList	"""bt"""		5033604	11					
ANR	5033658	PrimaryExpression	"""bt"""		5033604	0					
ANR	5033659	PrimaryExpression	"""if (t) goto A"""		5033604	1					
ANR	5033660	InitializerList	"""bt.s"""		5033604	12					
ANR	5033661	PrimaryExpression	"""bt.s"""		5033604	0					
ANR	5033662	PrimaryExpression	"""if (t) goto A"""		5033604	1					
ANR	5033663	InitializerList	"""clrmac"""		5033604	13					
ANR	5033664	PrimaryExpression	"""clrmac"""		5033604	0					
ANR	5033665	PrimaryExpression	"""_clrmac ()"""		5033604	1					
ANR	5033666	InitializerList	"""clrs"""		5033604	14					
ANR	5033667	PrimaryExpression	"""clrs"""		5033604	0					
ANR	5033668	PrimaryExpression	"""_clrs ()"""		5033604	1					
ANR	5033669	InitializerList	"""clrt"""		5033604	15					
ANR	5033670	PrimaryExpression	"""clrt"""		5033604	0					
ANR	5033671	PrimaryExpression	"""_clrt ()"""		5033604	1					
ANR	5033672	InitializerList	"""cmp/eq"""		5033604	16					
ANR	5033673	PrimaryExpression	"""cmp/eq"""		5033604	0					
ANR	5033674	PrimaryExpression	"""t = B == A ? 1 : 0"""		5033604	1					
ANR	5033675	InitializerList	"""cmp/ge"""		5033604	17					
ANR	5033676	PrimaryExpression	"""cmp/ge"""		5033604	0					
ANR	5033677	PrimaryExpression	"""t = B >= A ? 1 : 0"""		5033604	1					
ANR	5033678	InitializerList	"""cmp/gt"""		5033604	18					
ANR	5033679	PrimaryExpression	"""cmp/gt"""		5033604	0					
ANR	5033680	PrimaryExpression	"""t = B > A ? 1 : 0"""		5033604	1					
ANR	5033681	InitializerList	"""cmp/hi"""		5033604	19					
ANR	5033682	PrimaryExpression	"""cmp/hi"""		5033604	0					
ANR	5033683	PrimaryExpression	"""t = (unsigned) B > (unsigned) A ? 1 : 0"""		5033604	1					
ANR	5033684	InitializerList	"""cmp/hs"""		5033604	20					
ANR	5033685	PrimaryExpression	"""cmp/hs"""		5033604	0					
ANR	5033686	PrimaryExpression	"""t = (unsigned) B >= (unsigned) A ? 1 : 0"""		5033604	1					
ANR	5033687	InitializerList	"""cmp/pl"""		5033604	21					
ANR	5033688	PrimaryExpression	"""cmp/pl"""		5033604	0					
ANR	5033689	PrimaryExpression	"""t = A > 0 ? 1 : 0"""		5033604	1					
ANR	5033690	InitializerList	"""cmp/pz"""		5033604	22					
ANR	5033691	PrimaryExpression	"""cmp/pz"""		5033604	0					
ANR	5033692	PrimaryExpression	"""t = A >= 0 ? 1 : 0"""		5033604	1					
ANR	5033693	InitializerList	"""cmp/str"""		5033604	23					
ANR	5033694	PrimaryExpression	"""cmp/str"""		5033604	0					
ANR	5033695	PrimaryExpression	"""t = A ^ B ? 1 : 0"""		5033604	1					
ANR	5033696	InitializerList	"""div1"""		5033604	24					
ANR	5033697	PrimaryExpression	"""div1"""		5033604	0					
ANR	5033698	PrimaryExpression	"""B /= A"""		5033604	1					
ANR	5033699	InitializerList	"""dmuls.l"""		5033604	25					
ANR	5033700	PrimaryExpression	"""dmuls.l"""		5033604	0					
ANR	5033701	PrimaryExpression	"""mac = B * A"""		5033604	1					
ANR	5033702	InitializerList	"""dmulu.l"""		5033604	26					
ANR	5033703	PrimaryExpression	"""dmulu.l"""		5033604	0					
ANR	5033704	PrimaryExpression	"""mac = (unsigned) B * (unsigned) A"""		5033604	1					
ANR	5033705	InitializerList	"""dt"""		5033604	27					
ANR	5033706	PrimaryExpression	"""dt"""		5033604	0					
ANR	5033707	PrimaryExpression	"""A--; t = !A ? 1 : 0"""		5033604	1					
ANR	5033708	InitializerList	"""exts.b"""		5033604	28					
ANR	5033709	PrimaryExpression	"""exts.b"""		5033604	0					
ANR	5033710	PrimaryExpression	"""B = (int) A"""		5033604	1					
ANR	5033711	InitializerList	"""extu.b"""		5033604	29					
ANR	5033712	PrimaryExpression	"""extu.b"""		5033604	0					
ANR	5033713	PrimaryExpression	"""B = (unsigned int) A"""		5033604	1					
ANR	5033714	InitializerList	"""exts.w"""		5033604	30					
ANR	5033715	PrimaryExpression	"""exts.w"""		5033604	0					
ANR	5033716	PrimaryExpression	"""B = (int) A"""		5033604	1					
ANR	5033717	InitializerList	"""extu.w"""		5033604	31					
ANR	5033718	PrimaryExpression	"""extu.w"""		5033604	0					
ANR	5033719	PrimaryExpression	"""B = (unsigned int) A"""		5033604	1					
ANR	5033720	InitializerList	"""fabs"""		5033604	32					
ANR	5033721	PrimaryExpression	"""fabs"""		5033604	0					
ANR	5033722	PrimaryExpression	"""A = abs (A)"""		5033604	1					
ANR	5033723	InitializerList	"""fadd"""		5033604	33					
ANR	5033724	PrimaryExpression	"""fadd"""		5033604	0					
ANR	5033725	PrimaryExpression	"""B += A"""		5033604	1					
ANR	5033726	InitializerList	"""fcmp/eq"""		5033604	34					
ANR	5033727	PrimaryExpression	"""fcmp/eq"""		5033604	0					
ANR	5033728	PrimaryExpression	"""t = B == A ? 1 : 0"""		5033604	1					
ANR	5033729	InitializerList	"""fcmp/gt"""		5033604	35					
ANR	5033730	PrimaryExpression	"""fcmp/gt"""		5033604	0					
ANR	5033731	PrimaryExpression	"""t = B > A ? 1 : 0"""		5033604	1					
ANR	5033732	InitializerList	"""fcnvds"""		5033604	36					
ANR	5033733	PrimaryExpression	"""fcnvds"""		5033604	0					
ANR	5033734	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033735	InitializerList	"""fdiv"""		5033604	37					
ANR	5033736	PrimaryExpression	"""fdiv"""		5033604	0					
ANR	5033737	PrimaryExpression	"""B /= A"""		5033604	1					
ANR	5033738	InitializerList	"""flds"""		5033604	38					
ANR	5033739	PrimaryExpression	"""flds"""		5033604	0					
ANR	5033740	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033741	InitializerList	"""fldi0"""		5033604	39					
ANR	5033742	PrimaryExpression	"""fldi0"""		5033604	0					
ANR	5033743	PrimaryExpression	"""A = 0.0f"""		5033604	1					
ANR	5033744	InitializerList	"""fldi1"""		5033604	40					
ANR	5033745	PrimaryExpression	"""fldi1"""		5033604	0					
ANR	5033746	PrimaryExpression	"""A = 1.0f"""		5033604	1					
ANR	5033747	InitializerList	"""float"""		5033604	41					
ANR	5033748	PrimaryExpression	"""float"""		5033604	0					
ANR	5033749	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033750	InitializerList	"""fmac"""		5033604	42					
ANR	5033751	PrimaryExpression	"""fmac"""		5033604	0					
ANR	5033752	PrimaryExpression	"""C += A * B"""		5033604	1					
ANR	5033753	InitializerList	"""fmov"""		5033604	43					
ANR	5033754	PrimaryExpression	"""fmov"""		5033604	0					
ANR	5033755	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033756	InitializerList	"""fmov.s"""		5033604	44					
ANR	5033757	PrimaryExpression	"""fmov.s"""		5033604	0					
ANR	5033758	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033759	InitializerList	"""fmul"""		5033604	45					
ANR	5033760	PrimaryExpression	"""fmul"""		5033604	0					
ANR	5033761	PrimaryExpression	"""B *= A"""		5033604	1					
ANR	5033762	InitializerList	"""fneg"""		5033604	46					
ANR	5033763	PrimaryExpression	"""fneg"""		5033604	0					
ANR	5033764	PrimaryExpression	"""A = -A"""		5033604	1					
ANR	5033765	InitializerList	"""fsqrt"""		5033604	47					
ANR	5033766	PrimaryExpression	"""fsqrt"""		5033604	0					
ANR	5033767	PrimaryExpression	"""A = sqrt (A)"""		5033604	1					
ANR	5033768	InitializerList	"""fsts"""		5033604	48					
ANR	5033769	PrimaryExpression	"""fsts"""		5033604	0					
ANR	5033770	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033771	InitializerList	"""fsub"""		5033604	49					
ANR	5033772	PrimaryExpression	"""fsub"""		5033604	0					
ANR	5033773	PrimaryExpression	"""B -= A"""		5033604	1					
ANR	5033774	InitializerList	"""ftrc"""		5033604	50					
ANR	5033775	PrimaryExpression	"""ftrc"""		5033604	0					
ANR	5033776	PrimaryExpression	"""B = trunc (A)"""		5033604	1					
ANR	5033777	InitializerList	"""ftrv"""		5033604	51					
ANR	5033778	PrimaryExpression	"""ftrv"""		5033604	0					
ANR	5033779	PrimaryExpression	"""B *= A"""		5033604	1					
ANR	5033780	InitializerList	"""jmp"""		5033604	52					
ANR	5033781	PrimaryExpression	"""jmp"""		5033604	0					
ANR	5033782	PrimaryExpression	"""goto A"""		5033604	1					
ANR	5033783	InitializerList	"""jsr"""		5033604	53					
ANR	5033784	PrimaryExpression	"""jsr"""		5033604	0					
ANR	5033785	PrimaryExpression	"""A ()"""		5033604	1					
ANR	5033786	InitializerList	"""ldr"""		5033604	54					
ANR	5033787	PrimaryExpression	"""ldr"""		5033604	0					
ANR	5033788	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033789	InitializerList	"""ldr.l"""		5033604	55					
ANR	5033790	PrimaryExpression	"""ldr.l"""		5033604	0					
ANR	5033791	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033792	InitializerList	"""lds"""		5033604	56					
ANR	5033793	PrimaryExpression	"""lds"""		5033604	0					
ANR	5033794	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033795	InitializerList	"""lds.l"""		5033604	57					
ANR	5033796	PrimaryExpression	"""lds.l"""		5033604	0					
ANR	5033797	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033798	InitializerList	"""mov"""		5033604	58					
ANR	5033799	PrimaryExpression	"""mov"""		5033604	0					
ANR	5033800	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033801	InitializerList	"""mov.b"""		5033604	59					
ANR	5033802	PrimaryExpression	"""mov.b"""		5033604	0					
ANR	5033803	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033804	InitializerList	"""mov.l"""		5033604	60					
ANR	5033805	PrimaryExpression	"""mov.l"""		5033604	0					
ANR	5033806	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033807	InitializerList	"""mov.w"""		5033604	61					
ANR	5033808	PrimaryExpression	"""mov.w"""		5033604	0					
ANR	5033809	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033810	InitializerList	"""movca.l"""		5033604	62					
ANR	5033811	PrimaryExpression	"""movca.l"""		5033604	0					
ANR	5033812	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033813	InitializerList	"""movt"""		5033604	63					
ANR	5033814	PrimaryExpression	"""movt"""		5033604	0					
ANR	5033815	PrimaryExpression	"""A = t"""		5033604	1					
ANR	5033816	InitializerList	"""muls.w"""		5033604	64					
ANR	5033817	PrimaryExpression	"""muls.w"""		5033604	0					
ANR	5033818	PrimaryExpression	"""macl = A * B"""		5033604	1					
ANR	5033819	InitializerList	"""mulu.w"""		5033604	65					
ANR	5033820	PrimaryExpression	"""mulu.w"""		5033604	0					
ANR	5033821	PrimaryExpression	"""macl = (unsigned) A * (unsigned) B"""		5033604	1					
ANR	5033822	InitializerList	"""neg"""		5033604	66					
ANR	5033823	PrimaryExpression	"""neg"""		5033604	0					
ANR	5033824	PrimaryExpression	"""A = -A"""		5033604	1					
ANR	5033825	InitializerList	"""negc"""		5033604	67					
ANR	5033826	PrimaryExpression	"""negc"""		5033604	0					
ANR	5033827	PrimaryExpression	"""A = (-A) - t"""		5033604	1					
ANR	5033828	InitializerList	"""nop"""		5033604	68					
ANR	5033829	PrimaryExpression	"""nop"""		5033604	0					
ANR	5033830	PrimaryExpression	""""""		5033604	1					
ANR	5033831	InitializerList	"""not"""		5033604	69					
ANR	5033832	PrimaryExpression	"""not"""		5033604	0					
ANR	5033833	PrimaryExpression	"""A = !A"""		5033604	1					
ANR	5033834	InitializerList	"""or"""		5033604	70					
ANR	5033835	PrimaryExpression	"""or"""		5033604	0					
ANR	5033836	PrimaryExpression	"""B |= A"""		5033604	1					
ANR	5033837	InitializerList	"""rotcl"""		5033604	71					
ANR	5033838	PrimaryExpression	"""rotcl"""		5033604	0					
ANR	5033839	PrimaryExpression	"""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"""		5033604	1					
ANR	5033840	InitializerList	"""rotl"""		5033604	72					
ANR	5033841	PrimaryExpression	"""rotl"""		5033604	0					
ANR	5033842	PrimaryExpression	"""A = (A << 1) | (A >> 31)"""		5033604	1					
ANR	5033843	InitializerList	"""rotr"""		5033604	73					
ANR	5033844	PrimaryExpression	"""rotr"""		5033604	0					
ANR	5033845	PrimaryExpression	"""A = (A << 31) | (A >> 1)"""		5033604	1					
ANR	5033846	InitializerList	"""rte"""		5033604	74					
ANR	5033847	PrimaryExpression	"""rte"""		5033604	0					
ANR	5033848	PrimaryExpression	"""_rte ()"""		5033604	1					
ANR	5033849	InitializerList	"""rts"""		5033604	75					
ANR	5033850	PrimaryExpression	"""rts"""		5033604	0					
ANR	5033851	PrimaryExpression	"""return"""		5033604	1					
ANR	5033852	InitializerList	"""sets"""		5033604	76					
ANR	5033853	PrimaryExpression	"""sets"""		5033604	0					
ANR	5033854	PrimaryExpression	"""s = 1"""		5033604	1					
ANR	5033855	InitializerList	"""sett"""		5033604	77					
ANR	5033856	PrimaryExpression	"""sett"""		5033604	0					
ANR	5033857	PrimaryExpression	"""t = 1"""		5033604	1					
ANR	5033858	InitializerList	"""shad"""		5033604	78					
ANR	5033859	PrimaryExpression	"""shad"""		5033604	0					
ANR	5033860	PrimaryExpression	"""B = A >= 0 ? B << A : B >> (31 - A)"""		5033604	1					
ANR	5033861	InitializerList	"""shal"""		5033604	79					
ANR	5033862	PrimaryExpression	"""shal"""		5033604	0					
ANR	5033863	PrimaryExpression	"""A <<= 1"""		5033604	1					
ANR	5033864	InitializerList	"""shar"""		5033604	80					
ANR	5033865	PrimaryExpression	"""shar"""		5033604	0					
ANR	5033866	PrimaryExpression	"""A >>= 1"""		5033604	1					
ANR	5033867	InitializerList	"""shld"""		5033604	81					
ANR	5033868	PrimaryExpression	"""shld"""		5033604	0					
ANR	5033869	PrimaryExpression	"""B = A >= 0 ? B << A : B >> (31 - A)"""		5033604	1					
ANR	5033870	InitializerList	"""shll"""		5033604	82					
ANR	5033871	PrimaryExpression	"""shll"""		5033604	0					
ANR	5033872	PrimaryExpression	"""A <<= 1"""		5033604	1					
ANR	5033873	InitializerList	"""shll2"""		5033604	83					
ANR	5033874	PrimaryExpression	"""shll2"""		5033604	0					
ANR	5033875	PrimaryExpression	"""A <<= 2"""		5033604	1					
ANR	5033876	InitializerList	"""shll8"""		5033604	84					
ANR	5033877	PrimaryExpression	"""shll8"""		5033604	0					
ANR	5033878	PrimaryExpression	"""A <<= 8"""		5033604	1					
ANR	5033879	InitializerList	"""shll16"""		5033604	85					
ANR	5033880	PrimaryExpression	"""shll16"""		5033604	0					
ANR	5033881	PrimaryExpression	"""A <<= 16"""		5033604	1					
ANR	5033882	InitializerList	"""shlr"""		5033604	86					
ANR	5033883	PrimaryExpression	"""shlr"""		5033604	0					
ANR	5033884	PrimaryExpression	"""A >>= 1"""		5033604	1					
ANR	5033885	InitializerList	"""shlr2"""		5033604	87					
ANR	5033886	PrimaryExpression	"""shlr2"""		5033604	0					
ANR	5033887	PrimaryExpression	"""A >>= 2"""		5033604	1					
ANR	5033888	InitializerList	"""shlr8"""		5033604	88					
ANR	5033889	PrimaryExpression	"""shlr8"""		5033604	0					
ANR	5033890	PrimaryExpression	"""A >>= 8"""		5033604	1					
ANR	5033891	InitializerList	"""shlr16"""		5033604	89					
ANR	5033892	PrimaryExpression	"""shlr16"""		5033604	0					
ANR	5033893	PrimaryExpression	"""A >>= 16"""		5033604	1					
ANR	5033894	InitializerList	"""sleep"""		5033604	90					
ANR	5033895	PrimaryExpression	"""sleep"""		5033604	0					
ANR	5033896	PrimaryExpression	"""_halt ()"""		5033604	1					
ANR	5033897	InitializerList	"""stc"""		5033604	91					
ANR	5033898	PrimaryExpression	"""stc"""		5033604	0					
ANR	5033899	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033900	InitializerList	"""stc.l"""		5033604	92					
ANR	5033901	PrimaryExpression	"""stc.l"""		5033604	0					
ANR	5033902	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033903	InitializerList	"""sts"""		5033604	93					
ANR	5033904	PrimaryExpression	"""sts"""		5033604	0					
ANR	5033905	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033906	InitializerList	"""sts.l"""		5033604	94					
ANR	5033907	PrimaryExpression	"""sts.l"""		5033604	0					
ANR	5033908	PrimaryExpression	"""B = A"""		5033604	1					
ANR	5033909	InitializerList	"""sub"""		5033604	95					
ANR	5033910	PrimaryExpression	"""sub"""		5033604	0					
ANR	5033911	PrimaryExpression	"""B -= A"""		5033604	1					
ANR	5033912	InitializerList	"""subc"""		5033604	96					
ANR	5033913	PrimaryExpression	"""subc"""		5033604	0					
ANR	5033914	PrimaryExpression	"""B -= A - t"""		5033604	1					
ANR	5033915	InitializerList	"""subv"""		5033604	97					
ANR	5033916	PrimaryExpression	"""subv"""		5033604	0					
ANR	5033917	PrimaryExpression	"""B -= A; t = int_underflow (B)"""		5033604	1					
ANR	5033918	InitializerList	"""swap.b"""		5033604	98					
ANR	5033919	PrimaryExpression	"""swap.b"""		5033604	0					
ANR	5033920	PrimaryExpression	"""swap_byte (B, A)"""		5033604	1					
ANR	5033921	InitializerList	"""swap.w"""		5033604	99					
ANR	5033922	PrimaryExpression	"""swap.w"""		5033604	0					
ANR	5033923	PrimaryExpression	"""swap_word (B, A)"""		5033604	1					
ANR	5033924	InitializerList	"""tas.b"""		5033604	100					
ANR	5033925	PrimaryExpression	"""tas.b"""		5033604	0					
ANR	5033926	PrimaryExpression	"""test_and_set (A)"""		5033604	1					
ANR	5033927	InitializerList	"""trapa"""		5033604	101					
ANR	5033928	PrimaryExpression	"""trapa"""		5033604	0					
ANR	5033929	PrimaryExpression	"""trap (A)"""		5033604	1					
ANR	5033930	InitializerList	"""tst"""		5033604	102					
ANR	5033931	PrimaryExpression	"""tst"""		5033604	0					
ANR	5033932	PrimaryExpression	"""t = B & A ? 0 : 1"""		5033604	1					
ANR	5033933	InitializerList	"""xor"""		5033604	103					
ANR	5033934	PrimaryExpression	"""xor"""		5033604	0					
ANR	5033935	PrimaryExpression	"""B ^= A"""		5033604	1					
ANR	5033936	InitializerList	"""xor.b"""		5033604	104					
ANR	5033937	PrimaryExpression	"""xor.b"""		5033604	0					
ANR	5033938	PrimaryExpression	"""B ^= A"""		5033604	1					
ANR	5033939	InitializerList	NULL		5033604	105					
ANR	5033940	Identifier	NULL		5033604	0					
ANR	5033941	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5033604	2					
ANR	5033942	ForInit	i = 0 ;	127:6:3653:3658	5033604	0	True				
ANR	5033943	AssignmentExpression	i = 0		5033604	0		=			
ANR	5033944	Identifier	i		5033604	0					
ANR	5033945	PrimaryExpression	0		5033604	1					
ANR	5033946	Condition	ops [ i ] . op != NULL	127:13:3660:3676	5033604	1	True				
ANR	5033947	EqualityExpression	ops [ i ] . op != NULL		5033604	0		!=			
ANR	5033948	MemberAccess	ops [ i ] . op		5033604	0					
ANR	5033949	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5033950	Identifier	ops		5033604	0					
ANR	5033951	Identifier	i		5033604	1					
ANR	5033952	Identifier	op		5033604	1					
ANR	5033953	Identifier	NULL		5033604	1					
ANR	5033954	PostIncDecOperationExpression	i ++	127:32:3679:3681	5033604	2	True				
ANR	5033955	Identifier	i		5033604	0					
ANR	5033956	IncDec	++		5033604	1					
ANR	5033957	CompoundStatement		115:37:3412:3412	5033604	3					
ANR	5033958	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5033604	0					
ANR	5033959	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	128:6:3692:3719	5033604	0	True				
ANR	5033960	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5033604	0					
ANR	5033961	UnaryOperator	!		5033604	0					
ANR	5033962	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5033604	1					
ANR	5033963	Callee	strcmp		5033604	0					
ANR	5033964	Identifier	strcmp		5033604	0					
ANR	5033965	ArgumentList	ops [ i ] . op		5033604	1					
ANR	5033966	Argument	ops [ i ] . op		5033604	0					
ANR	5033967	MemberAccess	ops [ i ] . op		5033604	0					
ANR	5033968	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5033969	Identifier	ops		5033604	0					
ANR	5033970	Identifier	i		5033604	1					
ANR	5033971	Identifier	op		5033604	1					
ANR	5033972	Argument	argv [ 0 ]		5033604	1					
ANR	5033973	ArrayIndexing	argv [ 0 ]		5033604	0					
ANR	5033974	Identifier	argv		5033604	0					
ANR	5033975	PrimaryExpression	0		5033604	1					
ANR	5033976	CompoundStatement		116:36:3450:3450	5033604	1					
ANR	5033977	IfStatement	if ( newstr != NULL )		5033604	0					
ANR	5033978	Condition	newstr != NULL	129:7:3731:3744	5033604	0	True				
ANR	5033979	EqualityExpression	newstr != NULL		5033604	0		!=			
ANR	5033980	Identifier	newstr		5033604	0					
ANR	5033981	Identifier	NULL		5033604	1					
ANR	5033982	CompoundStatement		117:23:3475:3475	5033604	1					
ANR	5033983	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5033604	0					
ANR	5033984	ForInit	j = k = 0 ;	130:9:3758:3767	5033604	0	True				
ANR	5033985	AssignmentExpression	j = k = 0		5033604	0		=			
ANR	5033986	Identifier	j		5033604	0					
ANR	5033987	AssignmentExpression	k = 0		5033604	1		=			
ANR	5033988	Identifier	k		5033604	0					
ANR	5033989	PrimaryExpression	0		5033604	1					
ANR	5033990	Condition	ops [ i ] . str [ j ] != '\\0'	130:20:3769:3789	5033604	1	True				
ANR	5033991	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5033604	0		!=			
ANR	5033992	ArrayIndexing	ops [ i ] . str [ j ]		5033604	0					
ANR	5033993	MemberAccess	ops [ i ] . str		5033604	0					
ANR	5033994	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5033995	Identifier	ops		5033604	0					
ANR	5033996	Identifier	i		5033604	1					
ANR	5033997	Identifier	str		5033604	1					
ANR	5033998	Identifier	j		5033604	1					
ANR	5033999	PrimaryExpression	'\\0'		5033604	1					
ANR	5034000	Expression	"j ++ , k ++"	130:43:3792:3799	5033604	2	True				
ANR	5034001	PostIncDecOperationExpression	j ++		5033604	0					
ANR	5034002	Identifier	j		5033604	0					
ANR	5034003	IncDec	++		5033604	1					
ANR	5034004	PostIncDecOperationExpression	k ++		5033604	1					
ANR	5034005	Identifier	k		5033604	0					
ANR	5034006	IncDec	++		5033604	1					
ANR	5034007	CompoundStatement		118:53:3530:3530	5033604	3					
ANR	5034008	IfStatement	if ( ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J' )		5033604	0					
ANR	5034009	Condition	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'	131:9:3813:3856	5033604	0	True				
ANR	5034010	AndExpression	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'		5033604	0		&&			
ANR	5034011	RelationalExpression	ops [ i ] . str [ j ] >= 'A'		5033604	0		>=			
ANR	5034012	ArrayIndexing	ops [ i ] . str [ j ]		5033604	0					
ANR	5034013	MemberAccess	ops [ i ] . str		5033604	0					
ANR	5034014	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5034015	Identifier	ops		5033604	0					
ANR	5034016	Identifier	i		5033604	1					
ANR	5034017	Identifier	str		5033604	1					
ANR	5034018	Identifier	j		5033604	1					
ANR	5034019	PrimaryExpression	'A'		5033604	1					
ANR	5034020	RelationalExpression	ops [ i ] . str [ j ] <= 'J'		5033604	1		<=			
ANR	5034021	ArrayIndexing	ops [ i ] . str [ j ]		5033604	0					
ANR	5034022	MemberAccess	ops [ i ] . str		5033604	0					
ANR	5034023	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5034024	Identifier	ops		5033604	0					
ANR	5034025	Identifier	i		5033604	1					
ANR	5034026	Identifier	str		5033604	1					
ANR	5034027	Identifier	j		5033604	1					
ANR	5034028	PrimaryExpression	'J'		5033604	1					
ANR	5034029	CompoundStatement		120:6:3595:3636	5033604	1					
ANR	5034030	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '@' ] ;	132:6:3867:3908	5033604	0	True				
ANR	5034031	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5033604	0					
ANR	5034032	IdentifierDeclType	const char *		5033604	0					
ANR	5034033	Identifier	w		5033604	1					
ANR	5034034	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5033604	2		=			
ANR	5034035	Identifier	w		5033604	0					
ANR	5034036	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '@' ]		5033604	1					
ANR	5034037	Identifier	argv		5033604	0					
ANR	5034038	AdditiveExpression	ops [ i ] . str [ j ] - '@'		5033604	1		-			
ANR	5034039	ArrayIndexing	ops [ i ] . str [ j ]		5033604	0					
ANR	5034040	MemberAccess	ops [ i ] . str		5033604	0					
ANR	5034041	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5034042	Identifier	ops		5033604	0					
ANR	5034043	Identifier	i		5033604	1					
ANR	5034044	Identifier	str		5033604	1					
ANR	5034045	Identifier	j		5033604	1					
ANR	5034046	PrimaryExpression	'@'		5033604	1					
ANR	5034047	IfStatement	if ( w != NULL )		5033604	1					
ANR	5034048	Condition	w != NULL	133:10:3920:3928	5033604	0	True				
ANR	5034049	EqualityExpression	w != NULL		5033604	0		!=			
ANR	5034050	Identifier	w		5033604	0					
ANR	5034051	Identifier	NULL		5033604	1					
ANR	5034052	CompoundStatement		121:21:3659:3659	5033604	1					
ANR	5034053	ExpressionStatement	"strcpy ( newstr + k , w )"	134:7:3940:3962	5033604	0	True				
ANR	5034054	CallExpression	"strcpy ( newstr + k , w )"		5033604	0					
ANR	5034055	Callee	strcpy		5033604	0					
ANR	5034056	Identifier	strcpy		5033604	0					
ANR	5034057	ArgumentList	newstr + k		5033604	1					
ANR	5034058	Argument	newstr + k		5033604	0					
ANR	5034059	AdditiveExpression	newstr + k		5033604	0		+			
ANR	5034060	Identifier	newstr		5033604	0					
ANR	5034061	Identifier	k		5033604	1					
ANR	5034062	Argument	w		5033604	1					
ANR	5034063	Identifier	w		5033604	0					
ANR	5034064	ExpressionStatement	k += strlen ( w ) - 1	135:7:3971:3989	5033604	1	True				
ANR	5034065	AssignmentExpression	k += strlen ( w ) - 1		5033604	0		+=			
ANR	5034066	Identifier	k		5033604	0					
ANR	5034067	AdditiveExpression	strlen ( w ) - 1		5033604	1		-			
ANR	5034068	CallExpression	strlen ( w )		5033604	0					
ANR	5034069	Callee	strlen		5033604	0					
ANR	5034070	Identifier	strlen		5033604	0					
ANR	5034071	ArgumentList	w		5033604	1					
ANR	5034072	Argument	w		5033604	0					
ANR	5034073	Identifier	w		5033604	0					
ANR	5034074	PrimaryExpression	1		5033604	1					
ANR	5034075	ElseStatement	else		5033604	0					
ANR	5034076	CompoundStatement		125:12:3739:3739	5033604	0					
ANR	5034077	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	138:6:4019:4044	5033604	0	True				
ANR	5034078	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5033604	0		=			
ANR	5034079	ArrayIndexing	newstr [ k ]		5033604	0					
ANR	5034080	Identifier	newstr		5033604	0					
ANR	5034081	Identifier	k		5033604	1					
ANR	5034082	ArrayIndexing	ops [ i ] . str [ j ]		5033604	1					
ANR	5034083	MemberAccess	ops [ i ] . str		5033604	0					
ANR	5034084	ArrayIndexing	ops [ i ]		5033604	0					
ANR	5034085	Identifier	ops		5033604	0					
ANR	5034086	Identifier	i		5033604	1					
ANR	5034087	Identifier	str		5033604	1					
ANR	5034088	Identifier	j		5033604	1					
ANR	5034089	ExpressionStatement	newstr [ k ] = '\\0'	141:4:4063:4079	5033604	1	True				
ANR	5034090	AssignmentExpression	newstr [ k ] = '\\0'		5033604	0		=			
ANR	5034091	ArrayIndexing	newstr [ k ]		5033604	0					
ANR	5034092	Identifier	newstr		5033604	0					
ANR	5034093	Identifier	k		5033604	1					
ANR	5034094	PrimaryExpression	'\\0'		5033604	1					
ANR	5034095	ReturnStatement	return true ;	143:3:4089:4100	5033604	1	True				
ANR	5034096	Identifier	true		5033604	0					
ANR	5034097	IfStatement	if ( newstr != NULL )		5033604	3					
ANR	5034098	Condition	newstr != NULL	148:5:4141:4154	5033604	0	True				
ANR	5034099	EqualityExpression	newstr != NULL		5033604	0		!=			
ANR	5034100	Identifier	newstr		5033604	0					
ANR	5034101	Identifier	NULL		5033604	1					
ANR	5034102	CompoundStatement		136:21:3885:3885	5033604	1					
ANR	5034103	ExpressionStatement	newstr [ 0 ] = '\\0'	149:2:4161:4177	5033604	0	True				
ANR	5034104	AssignmentExpression	newstr [ 0 ] = '\\0'		5033604	0		=			
ANR	5034105	ArrayIndexing	newstr [ 0 ]		5033604	0					
ANR	5034106	Identifier	newstr		5033604	0					
ANR	5034107	PrimaryExpression	0		5033604	1					
ANR	5034108	PrimaryExpression	'\\0'		5033604	1					
ANR	5034109	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5033604	1					
ANR	5034110	ForInit	i = 0 ;	150:7:4186:4191	5033604	0	True				
ANR	5034111	AssignmentExpression	i = 0		5033604	0		=			
ANR	5034112	Identifier	i		5033604	0					
ANR	5034113	PrimaryExpression	0		5033604	1					
ANR	5034114	Condition	i < argc	150:14:4193:4200	5033604	1	True				
ANR	5034115	RelationalExpression	i < argc		5033604	0		<			
ANR	5034116	Identifier	i		5033604	0					
ANR	5034117	Identifier	argc		5033604	1					
ANR	5034118	PostIncDecOperationExpression	i ++	150:24:4203:4205	5033604	2	True				
ANR	5034119	Identifier	i		5033604	0					
ANR	5034120	IncDec	++		5033604	1					
ANR	5034121	CompoundStatement		138:29:3936:3936	5033604	3					
ANR	5034122	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	151:3:4213:4237	5033604	0	True				
ANR	5034123	CallExpression	"strcat ( newstr , argv [ i ] )"		5033604	0					
ANR	5034124	Callee	strcat		5033604	0					
ANR	5034125	Identifier	strcat		5033604	0					
ANR	5034126	ArgumentList	newstr		5033604	1					
ANR	5034127	Argument	newstr		5033604	0					
ANR	5034128	Identifier	newstr		5033604	0					
ANR	5034129	Argument	argv [ i ]		5033604	1					
ANR	5034130	ArrayIndexing	argv [ i ]		5033604	0					
ANR	5034131	Identifier	argv		5033604	0					
ANR	5034132	Identifier	i		5033604	1					
ANR	5034133	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	152:3:4242:4295	5033604	1	True				
ANR	5034134	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5033604	0					
ANR	5034135	Callee	strcat		5033604	0					
ANR	5034136	Identifier	strcat		5033604	0					
ANR	5034137	ArgumentList	newstr		5033604	1					
ANR	5034138	Argument	newstr		5033604	0					
ANR	5034139	Identifier	newstr		5033604	0					
ANR	5034140	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5033604	1					
ANR	5034141	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5033604	0					
ANR	5034142	Condition	i == 0 || i == argc - 1		5033604	0					
ANR	5034143	OrExpression	i == 0 || i == argc - 1		5033604	0		||			
ANR	5034144	EqualityExpression	i == 0		5033604	0		==			
ANR	5034145	Identifier	i		5033604	0					
ANR	5034146	PrimaryExpression	0		5033604	1					
ANR	5034147	EqualityExpression	i == argc - 1		5033604	1		==			
ANR	5034148	Identifier	i		5033604	0					
ANR	5034149	AdditiveExpression	argc - 1		5033604	1		-			
ANR	5034150	Identifier	argc		5033604	0					
ANR	5034151	PrimaryExpression	1		5033604	1					
ANR	5034152	PrimaryExpression	""" """		5033604	1					
ANR	5034153	PrimaryExpression	""", """		5033604	2					
ANR	5034154	ReturnStatement	return false ;	156:1:4306:4318	5033604	4	True				
ANR	5034155	Identifier	false		5033604	0					
ANR	5034156	ReturnType	static int		5033604	1					
ANR	5034157	Identifier	replace		5033604	2					
ANR	5034158	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5033604	3					
ANR	5034159	Parameter	int argc	13:19:227:234	5033604	0	True				
ANR	5034160	ParameterType	int		5033604	0					
ANR	5034161	Identifier	argc		5033604	1					
ANR	5034162	Parameter	const char * argv [ ]	13:29:237:254	5033604	1	True				
ANR	5034163	ParameterType	const char * [ ]		5033604	0					
ANR	5034164	Identifier	argv		5033604	1					
ANR	5034165	Parameter	char * newstr	13:49:257:268	5033604	2	True				
ANR	5034166	ParameterType	char *		5033604	0					
ANR	5034167	Identifier	newstr		5033604	1					
ANR	5034168	CFGEntryNode	ENTRY		5033604		True				
ANR	5034169	CFGExitNode	EXIT		5033604		True				
ANR	5034170	Symbol	* ops [ i ] . str		5033604						
ANR	5034171	Symbol	* * ops		5033604						
ANR	5034172	Symbol	* argv		5033604						
ANR	5034173	Symbol	argv		5033604						
ANR	5034174	Symbol	ops [ i ] . str		5033604						
ANR	5034175	Symbol	strlen		5033604						
ANR	5034176	Symbol	ops [ i ] . op		5033604						
ANR	5034177	Symbol	* ops		5033604						
ANR	5034178	Symbol	argc		5033604						
ANR	5034179	Symbol	strcmp		5033604						
ANR	5034180	Symbol	* * j		5033604						
ANR	5034181	Symbol	* * i		5033604						
ANR	5034182	Symbol	NULL		5033604						
ANR	5034183	Symbol	* * ops [ i ] . str		5033604						
ANR	5034184	Symbol	false		5033604						
ANR	5034185	Symbol	i		5033604						
ANR	5034186	Symbol	j		5033604						
ANR	5034187	Symbol	k		5033604						
ANR	5034188	Symbol	newstr		5033604						
ANR	5034189	Symbol	* * * ops		5033604						
ANR	5034190	Symbol	ops		5033604						
ANR	5034191	Symbol	* i		5033604						
ANR	5034192	Symbol	* newstr		5033604						
ANR	5034193	Symbol	* j		5033604						
ANR	5034194	Symbol	* k		5033604						
ANR	5034195	Symbol	w		5033604						
ANR	5034196	Symbol	* * * i		5033604						
ANR	5034197	Symbol	true		5033604						
ANR	5034198	Function	parse	160:0:4339:6459							
ANR	5034199	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5034198	0					
ANR	5034200	CompoundStatement		160:57:4396:6459	5034198	0					
ANR	5034201	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	161:1:4399:4425	5034198	0	True				
ANR	5034202	IdentifierDecl	i		5034198	0					
ANR	5034203	IdentifierDeclType	int		5034198	0					
ANR	5034204	Identifier	i		5034198	1					
ANR	5034205	IdentifierDecl	len = strlen ( data )		5034198	1					
ANR	5034206	IdentifierDeclType	int		5034198	0					
ANR	5034207	Identifier	len		5034198	1					
ANR	5034208	AssignmentExpression	len = strlen ( data )		5034198	2		=			
ANR	5034209	Identifier	len		5034198	0					
ANR	5034210	CallExpression	strlen ( data )		5034198	1					
ANR	5034211	Callee	strlen		5034198	0					
ANR	5034212	Identifier	strlen		5034198	0					
ANR	5034213	ArgumentList	data		5034198	1					
ANR	5034214	Argument	data		5034198	0					
ANR	5034215	Identifier	data		5034198	0					
ANR	5034216	IdentifierDeclStatement	char w0 [ WSZ ] ;	162:1:4428:4440	5034198	1	True				
ANR	5034217	IdentifierDecl	w0 [ WSZ ]		5034198	0					
ANR	5034218	IdentifierDeclType	char [ WSZ ]		5034198	0					
ANR	5034219	Identifier	w0		5034198	1					
ANR	5034220	Identifier	WSZ		5034198	2					
ANR	5034221	IdentifierDeclStatement	char w1 [ WSZ ] ;	163:1:4443:4455	5034198	2	True				
ANR	5034222	IdentifierDecl	w1 [ WSZ ]		5034198	0					
ANR	5034223	IdentifierDeclType	char [ WSZ ]		5034198	0					
ANR	5034224	Identifier	w1		5034198	1					
ANR	5034225	Identifier	WSZ		5034198	2					
ANR	5034226	IdentifierDeclStatement	char w2 [ WSZ ] ;	164:1:4458:4470	5034198	3	True				
ANR	5034227	IdentifierDecl	w2 [ WSZ ]		5034198	0					
ANR	5034228	IdentifierDeclType	char [ WSZ ]		5034198	0					
ANR	5034229	Identifier	w2		5034198	1					
ANR	5034230	Identifier	WSZ		5034198	2					
ANR	5034231	IdentifierDeclStatement	char w3 [ WSZ ] ;	165:1:4473:4485	5034198	4	True				
ANR	5034232	IdentifierDecl	w3 [ WSZ ]		5034198	0					
ANR	5034233	IdentifierDeclType	char [ WSZ ]		5034198	0					
ANR	5034234	Identifier	w3		5034198	1					
ANR	5034235	Identifier	WSZ		5034198	2					
ANR	5034236	IdentifierDeclStatement	char w4 [ WSZ ] ;	166:1:4488:4500	5034198	5	True				
ANR	5034237	IdentifierDecl	w4 [ WSZ ]		5034198	0					
ANR	5034238	IdentifierDeclType	char [ WSZ ]		5034198	0					
ANR	5034239	Identifier	w4		5034198	1					
ANR	5034240	Identifier	WSZ		5034198	2					
ANR	5034241	IdentifierDeclStatement	"char * buf , * ptr , * optr , * par ;"	167:1:4503:4531	5034198	6	True				
ANR	5034242	IdentifierDecl	* buf		5034198	0					
ANR	5034243	IdentifierDeclType	char *		5034198	0					
ANR	5034244	Identifier	buf		5034198	1					
ANR	5034245	IdentifierDecl	* ptr		5034198	1					
ANR	5034246	IdentifierDeclType	char *		5034198	0					
ANR	5034247	Identifier	ptr		5034198	1					
ANR	5034248	IdentifierDecl	* optr		5034198	2					
ANR	5034249	IdentifierDeclType	char *		5034198	0					
ANR	5034250	Identifier	optr		5034198	1					
ANR	5034251	IdentifierDecl	* par		5034198	3					
ANR	5034252	IdentifierDeclType	char *		5034198	0					
ANR	5034253	Identifier	par		5034198	1					
ANR	5034254	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5034198	7					
ANR	5034255	Condition	! ( buf = malloc ( len + 1 ) )	170:5:4570:4594	5034198	0	True				
ANR	5034256	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5034198	0					
ANR	5034257	UnaryOperator	!		5034198	0					
ANR	5034258	AssignmentExpression	buf = malloc ( len + 1 )		5034198	1		=			
ANR	5034259	Identifier	buf		5034198	0					
ANR	5034260	CallExpression	malloc ( len + 1 )		5034198	1					
ANR	5034261	Callee	malloc		5034198	0					
ANR	5034262	Identifier	malloc		5034198	0					
ANR	5034263	ArgumentList	len + 1		5034198	1					
ANR	5034264	Argument	len + 1		5034198	0					
ANR	5034265	AdditiveExpression	len + 1		5034198	0		+			
ANR	5034266	Identifier	len		5034198	0					
ANR	5034267	PrimaryExpression	1		5034198	1					
ANR	5034268	CompoundStatement		11:32:200:200	5034198	1					
ANR	5034269	ReturnStatement	return false ;	171:2:4601:4613	5034198	0	True				
ANR	5034270	Identifier	false		5034198	0					
ANR	5034271	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	173:1:4619:4646	5034198	8	True				
ANR	5034272	CallExpression	"memcpy ( buf , data , len + 1 )"		5034198	0					
ANR	5034273	Callee	memcpy		5034198	0					
ANR	5034274	Identifier	memcpy		5034198	0					
ANR	5034275	ArgumentList	buf		5034198	1					
ANR	5034276	Argument	buf		5034198	0					
ANR	5034277	Identifier	buf		5034198	0					
ANR	5034278	Argument	data		5034198	1					
ANR	5034279	Identifier	data		5034198	0					
ANR	5034280	Argument	len + 1		5034198	2					
ANR	5034281	AdditiveExpression	len + 1		5034198	0		+			
ANR	5034282	Identifier	len		5034198	0					
ANR	5034283	PrimaryExpression	1		5034198	1					
ANR	5034284	ExpressionStatement	r_str_trim ( buf )	175:1:4650:4666	5034198	9	True				
ANR	5034285	CallExpression	r_str_trim ( buf )		5034198	0					
ANR	5034286	Callee	r_str_trim		5034198	0					
ANR	5034287	Identifier	r_str_trim		5034198	0					
ANR	5034288	ArgumentList	buf		5034198	1					
ANR	5034289	Argument	buf		5034198	0					
ANR	5034290	Identifier	buf		5034198	0					
ANR	5034291	IfStatement	if ( * buf )		5034198	10					
ANR	5034292	Condition	* buf	176:5:4673:4676	5034198	0	True				
ANR	5034293	UnaryOperationExpression	* buf		5034198	0					
ANR	5034294	UnaryOperator	*		5034198	0					
ANR	5034295	Identifier	buf		5034198	1					
ANR	5034296	CompoundStatement		17:11:282:282	5034198	1					
ANR	5034297	ExpressionStatement	w0 [ 0 ] = '\\0'	177:2:4683:4695	5034198	0	True				
ANR	5034298	AssignmentExpression	w0 [ 0 ] = '\\0'		5034198	0		=			
ANR	5034299	ArrayIndexing	w0 [ 0 ]		5034198	0					
ANR	5034300	Identifier	w0		5034198	0					
ANR	5034301	PrimaryExpression	0		5034198	1					
ANR	5034302	PrimaryExpression	'\\0'		5034198	1					
ANR	5034303	ExpressionStatement	w1 [ 0 ] = '\\0'	178:2:4699:4711	5034198	1	True				
ANR	5034304	AssignmentExpression	w1 [ 0 ] = '\\0'		5034198	0		=			
ANR	5034305	ArrayIndexing	w1 [ 0 ]		5034198	0					
ANR	5034306	Identifier	w1		5034198	0					
ANR	5034307	PrimaryExpression	0		5034198	1					
ANR	5034308	PrimaryExpression	'\\0'		5034198	1					
ANR	5034309	ExpressionStatement	w2 [ 0 ] = '\\0'	179:2:4715:4727	5034198	2	True				
ANR	5034310	AssignmentExpression	w2 [ 0 ] = '\\0'		5034198	0		=			
ANR	5034311	ArrayIndexing	w2 [ 0 ]		5034198	0					
ANR	5034312	Identifier	w2		5034198	0					
ANR	5034313	PrimaryExpression	0		5034198	1					
ANR	5034314	PrimaryExpression	'\\0'		5034198	1					
ANR	5034315	ExpressionStatement	w3 [ 0 ] = '\\0'	180:2:4731:4743	5034198	3	True				
ANR	5034316	AssignmentExpression	w3 [ 0 ] = '\\0'		5034198	0		=			
ANR	5034317	ArrayIndexing	w3 [ 0 ]		5034198	0					
ANR	5034318	Identifier	w3		5034198	0					
ANR	5034319	PrimaryExpression	0		5034198	1					
ANR	5034320	PrimaryExpression	'\\0'		5034198	1					
ANR	5034321	ExpressionStatement	w4 [ 0 ] = '\\0'	181:2:4747:4759	5034198	4	True				
ANR	5034322	AssignmentExpression	w4 [ 0 ] = '\\0'		5034198	0		=			
ANR	5034323	ArrayIndexing	w4 [ 0 ]		5034198	0					
ANR	5034324	Identifier	w4		5034198	0					
ANR	5034325	PrimaryExpression	0		5034198	1					
ANR	5034326	PrimaryExpression	'\\0'		5034198	1					
ANR	5034327	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	182:2:4763:4786	5034198	5	True				
ANR	5034328	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5034198	0		=			
ANR	5034329	Identifier	ptr		5034198	0					
ANR	5034330	CallExpression	"strchr ( buf , ' ' )"		5034198	1					
ANR	5034331	Callee	strchr		5034198	0					
ANR	5034332	Identifier	strchr		5034198	0					
ANR	5034333	ArgumentList	buf		5034198	1					
ANR	5034334	Argument	buf		5034198	0					
ANR	5034335	Identifier	buf		5034198	0					
ANR	5034336	Argument	' '		5034198	1					
ANR	5034337	PrimaryExpression	' '		5034198	0					
ANR	5034338	IfStatement	if ( ! ptr )		5034198	6					
ANR	5034339	Condition	! ptr	183:6:4794:4797	5034198	0	True				
ANR	5034340	UnaryOperationExpression	! ptr		5034198	0					
ANR	5034341	UnaryOperator	!		5034198	0					
ANR	5034342	Identifier	ptr		5034198	1					
ANR	5034343	CompoundStatement		24:12:403:403	5034198	1					
ANR	5034344	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	184:3:4805:4829	5034198	0	True				
ANR	5034345	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5034198	0		=			
ANR	5034346	Identifier	ptr		5034198	0					
ANR	5034347	CallExpression	"strchr ( buf , '\\t' )"		5034198	1					
ANR	5034348	Callee	strchr		5034198	0					
ANR	5034349	Identifier	strchr		5034198	0					
ANR	5034350	ArgumentList	buf		5034198	1					
ANR	5034351	Argument	buf		5034198	0					
ANR	5034352	Identifier	buf		5034198	0					
ANR	5034353	Argument	'\\t'		5034198	1					
ANR	5034354	PrimaryExpression	'\\t'		5034198	0					
ANR	5034355	IfStatement	if ( ptr )		5034198	7					
ANR	5034356	Condition	ptr	186:6:4841:4843	5034198	0	True				
ANR	5034357	Identifier	ptr		5034198	0					
ANR	5034358	CompoundStatement		27:11:449:449	5034198	1					
ANR	5034359	ExpressionStatement	* ptr = '\\0'	187:3:4851:4862	5034198	0	True				
ANR	5034360	AssignmentExpression	* ptr = '\\0'		5034198	0		=			
ANR	5034361	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034362	UnaryOperator	*		5034198	0					
ANR	5034363	Identifier	ptr		5034198	1					
ANR	5034364	PrimaryExpression	'\\0'		5034198	1					
ANR	5034365	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5034198	1					
ANR	5034366	ForInit	++ ptr ;	188:8:4872:4877	5034198	0	True				
ANR	5034367	UnaryExpression	++ ptr		5034198	0					
ANR	5034368	IncDec	++		5034198	0					
ANR	5034369	Identifier	ptr		5034198	1					
ANR	5034370	Condition	* ptr == ' '	188:15:4879:4889	5034198	1	True				
ANR	5034371	EqualityExpression	* ptr == ' '		5034198	0		==			
ANR	5034372	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034373	UnaryOperator	*		5034198	0					
ANR	5034374	Identifier	ptr		5034198	1					
ANR	5034375	PrimaryExpression	' '		5034198	1					
ANR	5034376	PostIncDecOperationExpression	ptr ++	188:28:4892:4896	5034198	2	True				
ANR	5034377	Identifier	ptr		5034198	0					
ANR	5034378	IncDec	++		5034198	1					
ANR	5034379	CompoundStatement		29:35:502:502	5034198	3					
ANR	5034380	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	191:3:4935:4961	5034198	2	True				
ANR	5034381	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5034198	0					
ANR	5034382	Callee	strncpy		5034198	0					
ANR	5034383	Identifier	strncpy		5034198	0					
ANR	5034384	ArgumentList	w0		5034198	1					
ANR	5034385	Argument	w0		5034198	0					
ANR	5034386	Identifier	w0		5034198	0					
ANR	5034387	Argument	buf		5034198	1					
ANR	5034388	Identifier	buf		5034198	0					
ANR	5034389	Argument	WSZ - 1		5034198	2					
ANR	5034390	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034391	Identifier	WSZ		5034198	0					
ANR	5034392	PrimaryExpression	1		5034198	1					
ANR	5034393	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	192:3:4966:4992	5034198	3	True				
ANR	5034394	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5034198	0					
ANR	5034395	Callee	strncpy		5034198	0					
ANR	5034396	Identifier	strncpy		5034198	0					
ANR	5034397	ArgumentList	w1		5034198	1					
ANR	5034398	Argument	w1		5034198	0					
ANR	5034399	Identifier	w1		5034198	0					
ANR	5034400	Argument	ptr		5034198	1					
ANR	5034401	Identifier	ptr		5034198	0					
ANR	5034402	Argument	WSZ - 1		5034198	2					
ANR	5034403	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034404	Identifier	WSZ		5034198	0					
ANR	5034405	PrimaryExpression	1		5034198	1					
ANR	5034406	ExpressionStatement	optr = ptr	194:3:4998:5008	5034198	4	True				
ANR	5034407	AssignmentExpression	optr = ptr		5034198	0		=			
ANR	5034408	Identifier	optr		5034198	0					
ANR	5034409	Identifier	ptr		5034198	1					
ANR	5034410	ExpressionStatement	"par = strchr ( ptr , '(' )"	195:3:5013:5036	5034198	5	True				
ANR	5034411	AssignmentExpression	"par = strchr ( ptr , '(' )"		5034198	0		=			
ANR	5034412	Identifier	par		5034198	0					
ANR	5034413	CallExpression	"strchr ( ptr , '(' )"		5034198	1					
ANR	5034414	Callee	strchr		5034198	0					
ANR	5034415	Identifier	strchr		5034198	0					
ANR	5034416	ArgumentList	ptr		5034198	1					
ANR	5034417	Argument	ptr		5034198	0					
ANR	5034418	Identifier	ptr		5034198	0					
ANR	5034419	Argument	'('		5034198	1					
ANR	5034420	PrimaryExpression	'('		5034198	0					
ANR	5034421	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5034198	6					
ANR	5034422	Condition	"par && strchr ( ptr , ',' ) > par"	196:7:5045:5074	5034198	0	True				
ANR	5034423	AndExpression	"par && strchr ( ptr , ',' ) > par"		5034198	0		&&			
ANR	5034424	Identifier	par		5034198	0					
ANR	5034425	RelationalExpression	"strchr ( ptr , ',' ) > par"		5034198	1		>			
ANR	5034426	CallExpression	"strchr ( ptr , ',' )"		5034198	0					
ANR	5034427	Callee	strchr		5034198	0					
ANR	5034428	Identifier	strchr		5034198	0					
ANR	5034429	ArgumentList	ptr		5034198	1					
ANR	5034430	Argument	ptr		5034198	0					
ANR	5034431	Identifier	ptr		5034198	0					
ANR	5034432	Argument	"','"		5034198	1					
ANR	5034433	PrimaryExpression	"','"		5034198	0					
ANR	5034434	Identifier	par		5034198	1					
ANR	5034435	CompoundStatement		37:39:680:680	5034198	1					
ANR	5034436	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	197:4:5083:5106	5034198	0	True				
ANR	5034437	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5034198	0		=			
ANR	5034438	Identifier	ptr		5034198	0					
ANR	5034439	CallExpression	"strchr ( ptr , ')' )"		5034198	1					
ANR	5034440	Callee	strchr		5034198	0					
ANR	5034441	Identifier	strchr		5034198	0					
ANR	5034442	ArgumentList	ptr		5034198	1					
ANR	5034443	Argument	ptr		5034198	0					
ANR	5034444	Identifier	ptr		5034198	0					
ANR	5034445	Argument	')'		5034198	1					
ANR	5034446	PrimaryExpression	')'		5034198	0					
ANR	5034447	IfStatement	if ( ptr )		5034198	1					
ANR	5034448	Condition	ptr	198:8:5116:5118	5034198	0	True				
ANR	5034449	Identifier	ptr		5034198	0					
ANR	5034450	CompoundStatement		39:13:724:724	5034198	1					
ANR	5034451	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	199:5:5128:5151	5034198	0	True				
ANR	5034452	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034453	Identifier	ptr		5034198	0					
ANR	5034454	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034455	Callee	strchr		5034198	0					
ANR	5034456	Identifier	strchr		5034198	0					
ANR	5034457	ArgumentList	ptr		5034198	1					
ANR	5034458	Argument	ptr		5034198	0					
ANR	5034459	Identifier	ptr		5034198	0					
ANR	5034460	Argument	"','"		5034198	1					
ANR	5034461	PrimaryExpression	"','"		5034198	0					
ANR	5034462	ElseStatement	else		5034198	0					
ANR	5034463	CompoundStatement		42:10:772:772	5034198	0					
ANR	5034464	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	202:4:5175:5198	5034198	0	True				
ANR	5034465	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034466	Identifier	ptr		5034198	0					
ANR	5034467	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034468	Callee	strchr		5034198	0					
ANR	5034469	Identifier	strchr		5034198	0					
ANR	5034470	ArgumentList	ptr		5034198	1					
ANR	5034471	Argument	ptr		5034198	0					
ANR	5034472	Identifier	ptr		5034198	0					
ANR	5034473	Argument	"','"		5034198	1					
ANR	5034474	PrimaryExpression	"','"		5034198	0					
ANR	5034475	IfStatement	if ( ptr )		5034198	7					
ANR	5034476	Condition	ptr	204:7:5212:5214	5034198	0	True				
ANR	5034477	Identifier	ptr		5034198	0					
ANR	5034478	CompoundStatement		45:12:820:820	5034198	1					
ANR	5034479	ExpressionStatement	* ptr = '\\0'	205:4:5223:5234	5034198	0	True				
ANR	5034480	AssignmentExpression	* ptr = '\\0'		5034198	0		=			
ANR	5034481	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034482	UnaryOperator	*		5034198	0					
ANR	5034483	Identifier	ptr		5034198	1					
ANR	5034484	PrimaryExpression	'\\0'		5034198	1					
ANR	5034485	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5034198	1					
ANR	5034486	ForInit	++ ptr ;	206:9:5245:5250	5034198	0	True				
ANR	5034487	UnaryExpression	++ ptr		5034198	0					
ANR	5034488	IncDec	++		5034198	0					
ANR	5034489	Identifier	ptr		5034198	1					
ANR	5034490	Condition	* ptr == ' '	206:16:5252:5262	5034198	1	True				
ANR	5034491	EqualityExpression	* ptr == ' '		5034198	0		==			
ANR	5034492	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034493	UnaryOperator	*		5034198	0					
ANR	5034494	Identifier	ptr		5034198	1					
ANR	5034495	PrimaryExpression	' '		5034198	1					
ANR	5034496	PostIncDecOperationExpression	ptr ++	206:29:5265:5269	5034198	2	True				
ANR	5034497	Identifier	ptr		5034198	0					
ANR	5034498	IncDec	++		5034198	1					
ANR	5034499	CompoundStatement		47:36:875:875	5034198	3					
ANR	5034500	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	209:4:5311:5338	5034198	2	True				
ANR	5034501	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5034198	0					
ANR	5034502	Callee	strncpy		5034198	0					
ANR	5034503	Identifier	strncpy		5034198	0					
ANR	5034504	ArgumentList	w1		5034198	1					
ANR	5034505	Argument	w1		5034198	0					
ANR	5034506	Identifier	w1		5034198	0					
ANR	5034507	Argument	optr		5034198	1					
ANR	5034508	Identifier	optr		5034198	0					
ANR	5034509	Argument	WSZ - 1		5034198	2					
ANR	5034510	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034511	Identifier	WSZ		5034198	0					
ANR	5034512	PrimaryExpression	1		5034198	1					
ANR	5034513	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	210:4:5344:5370	5034198	3	True				
ANR	5034514	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5034198	0					
ANR	5034515	Callee	strncpy		5034198	0					
ANR	5034516	Identifier	strncpy		5034198	0					
ANR	5034517	ArgumentList	w2		5034198	1					
ANR	5034518	Argument	w2		5034198	0					
ANR	5034519	Identifier	w2		5034198	0					
ANR	5034520	Argument	ptr		5034198	1					
ANR	5034521	Identifier	ptr		5034198	0					
ANR	5034522	Argument	WSZ - 1		5034198	2					
ANR	5034523	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034524	Identifier	WSZ		5034198	0					
ANR	5034525	PrimaryExpression	1		5034198	1					
ANR	5034526	ExpressionStatement	optr = ptr	211:4:5376:5386	5034198	4	True				
ANR	5034527	AssignmentExpression	optr = ptr		5034198	0		=			
ANR	5034528	Identifier	optr		5034198	0					
ANR	5034529	Identifier	ptr		5034198	1					
ANR	5034530	ExpressionStatement	"par = strchr ( ptr , '(' )"	212:4:5392:5415	5034198	5	True				
ANR	5034531	AssignmentExpression	"par = strchr ( ptr , '(' )"		5034198	0		=			
ANR	5034532	Identifier	par		5034198	0					
ANR	5034533	CallExpression	"strchr ( ptr , '(' )"		5034198	1					
ANR	5034534	Callee	strchr		5034198	0					
ANR	5034535	Identifier	strchr		5034198	0					
ANR	5034536	ArgumentList	ptr		5034198	1					
ANR	5034537	Argument	ptr		5034198	0					
ANR	5034538	Identifier	ptr		5034198	0					
ANR	5034539	Argument	'('		5034198	1					
ANR	5034540	PrimaryExpression	'('		5034198	0					
ANR	5034541	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5034198	6					
ANR	5034542	Condition	"par && strchr ( ptr , ',' ) > par"	213:8:5425:5454	5034198	0	True				
ANR	5034543	AndExpression	"par && strchr ( ptr , ',' ) > par"		5034198	0		&&			
ANR	5034544	Identifier	par		5034198	0					
ANR	5034545	RelationalExpression	"strchr ( ptr , ',' ) > par"		5034198	1		>			
ANR	5034546	CallExpression	"strchr ( ptr , ',' )"		5034198	0					
ANR	5034547	Callee	strchr		5034198	0					
ANR	5034548	Identifier	strchr		5034198	0					
ANR	5034549	ArgumentList	ptr		5034198	1					
ANR	5034550	Argument	ptr		5034198	0					
ANR	5034551	Identifier	ptr		5034198	0					
ANR	5034552	Argument	"','"		5034198	1					
ANR	5034553	PrimaryExpression	"','"		5034198	0					
ANR	5034554	Identifier	par		5034198	1					
ANR	5034555	CompoundStatement		54:40:1060:1060	5034198	1					
ANR	5034556	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	214:5:5464:5487	5034198	0	True				
ANR	5034557	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5034198	0		=			
ANR	5034558	Identifier	ptr		5034198	0					
ANR	5034559	CallExpression	"strchr ( ptr , ')' )"		5034198	1					
ANR	5034560	Callee	strchr		5034198	0					
ANR	5034561	Identifier	strchr		5034198	0					
ANR	5034562	ArgumentList	ptr		5034198	1					
ANR	5034563	Argument	ptr		5034198	0					
ANR	5034564	Identifier	ptr		5034198	0					
ANR	5034565	Argument	')'		5034198	1					
ANR	5034566	PrimaryExpression	')'		5034198	0					
ANR	5034567	IfStatement	if ( ptr )		5034198	1					
ANR	5034568	Condition	ptr	215:9:5498:5500	5034198	0	True				
ANR	5034569	Identifier	ptr		5034198	0					
ANR	5034570	CompoundStatement		56:14:1106:1106	5034198	1					
ANR	5034571	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	216:6:5511:5534	5034198	0	True				
ANR	5034572	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034573	Identifier	ptr		5034198	0					
ANR	5034574	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034575	Callee	strchr		5034198	0					
ANR	5034576	Identifier	strchr		5034198	0					
ANR	5034577	ArgumentList	ptr		5034198	1					
ANR	5034578	Argument	ptr		5034198	0					
ANR	5034579	Identifier	ptr		5034198	0					
ANR	5034580	Argument	"','"		5034198	1					
ANR	5034581	PrimaryExpression	"','"		5034198	0					
ANR	5034582	ElseStatement	else		5034198	0					
ANR	5034583	CompoundStatement		59:11:1157:1157	5034198	0					
ANR	5034584	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	219:5:5561:5584	5034198	0	True				
ANR	5034585	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034586	Identifier	ptr		5034198	0					
ANR	5034587	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034588	Callee	strchr		5034198	0					
ANR	5034589	Identifier	strchr		5034198	0					
ANR	5034590	ArgumentList	ptr		5034198	1					
ANR	5034591	Argument	ptr		5034198	0					
ANR	5034592	Identifier	ptr		5034198	0					
ANR	5034593	Argument	"','"		5034198	1					
ANR	5034594	PrimaryExpression	"','"		5034198	0					
ANR	5034595	IfStatement	if ( ptr )		5034198	7					
ANR	5034596	Condition	ptr	221:8:5600:5602	5034198	0	True				
ANR	5034597	Identifier	ptr		5034198	0					
ANR	5034598	CompoundStatement		62:13:1208:1208	5034198	1					
ANR	5034599	ExpressionStatement	* ptr = '\\0'	222:5:5612:5623	5034198	0	True				
ANR	5034600	AssignmentExpression	* ptr = '\\0'		5034198	0		=			
ANR	5034601	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034602	UnaryOperator	*		5034198	0					
ANR	5034603	Identifier	ptr		5034198	1					
ANR	5034604	PrimaryExpression	'\\0'		5034198	1					
ANR	5034605	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5034198	1					
ANR	5034606	ForInit	++ ptr ;	223:10:5635:5640	5034198	0	True				
ANR	5034607	UnaryExpression	++ ptr		5034198	0					
ANR	5034608	IncDec	++		5034198	0					
ANR	5034609	Identifier	ptr		5034198	1					
ANR	5034610	Condition	* ptr == ' '	223:17:5642:5652	5034198	1	True				
ANR	5034611	EqualityExpression	* ptr == ' '		5034198	0		==			
ANR	5034612	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034613	UnaryOperator	*		5034198	0					
ANR	5034614	Identifier	ptr		5034198	1					
ANR	5034615	PrimaryExpression	' '		5034198	1					
ANR	5034616	PostIncDecOperationExpression	ptr ++	223:30:5655:5659	5034198	2	True				
ANR	5034617	Identifier	ptr		5034198	0					
ANR	5034618	IncDec	++		5034198	1					
ANR	5034619	CompoundStatement		64:37:1265:1265	5034198	3					
ANR	5034620	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	226:5:5704:5731	5034198	2	True				
ANR	5034621	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5034198	0					
ANR	5034622	Callee	strncpy		5034198	0					
ANR	5034623	Identifier	strncpy		5034198	0					
ANR	5034624	ArgumentList	w2		5034198	1					
ANR	5034625	Argument	w2		5034198	0					
ANR	5034626	Identifier	w2		5034198	0					
ANR	5034627	Argument	optr		5034198	1					
ANR	5034628	Identifier	optr		5034198	0					
ANR	5034629	Argument	WSZ - 1		5034198	2					
ANR	5034630	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034631	Identifier	WSZ		5034198	0					
ANR	5034632	PrimaryExpression	1		5034198	1					
ANR	5034633	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	227:5:5738:5764	5034198	3	True				
ANR	5034634	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5034198	0					
ANR	5034635	Callee	strncpy		5034198	0					
ANR	5034636	Identifier	strncpy		5034198	0					
ANR	5034637	ArgumentList	w3		5034198	1					
ANR	5034638	Argument	w3		5034198	0					
ANR	5034639	Identifier	w3		5034198	0					
ANR	5034640	Argument	ptr		5034198	1					
ANR	5034641	Identifier	ptr		5034198	0					
ANR	5034642	Argument	WSZ - 1		5034198	2					
ANR	5034643	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034644	Identifier	WSZ		5034198	0					
ANR	5034645	PrimaryExpression	1		5034198	1					
ANR	5034646	ExpressionStatement	optr = ptr	228:5:5771:5781	5034198	4	True				
ANR	5034647	AssignmentExpression	optr = ptr		5034198	0		=			
ANR	5034648	Identifier	optr		5034198	0					
ANR	5034649	Identifier	ptr		5034198	1					
ANR	5034650	ExpressionStatement	"par = strchr ( ptr , '(' )"	230:5:5802:5825	5034198	5	True				
ANR	5034651	AssignmentExpression	"par = strchr ( ptr , '(' )"		5034198	0		=			
ANR	5034652	Identifier	par		5034198	0					
ANR	5034653	CallExpression	"strchr ( ptr , '(' )"		5034198	1					
ANR	5034654	Callee	strchr		5034198	0					
ANR	5034655	Identifier	strchr		5034198	0					
ANR	5034656	ArgumentList	ptr		5034198	1					
ANR	5034657	Argument	ptr		5034198	0					
ANR	5034658	Identifier	ptr		5034198	0					
ANR	5034659	Argument	'('		5034198	1					
ANR	5034660	PrimaryExpression	'('		5034198	0					
ANR	5034661	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5034198	6					
ANR	5034662	Condition	"par && strchr ( ptr , ',' ) > par"	231:9:5836:5865	5034198	0	True				
ANR	5034663	AndExpression	"par && strchr ( ptr , ',' ) > par"		5034198	0		&&			
ANR	5034664	Identifier	par		5034198	0					
ANR	5034665	RelationalExpression	"strchr ( ptr , ',' ) > par"		5034198	1		>			
ANR	5034666	CallExpression	"strchr ( ptr , ',' )"		5034198	0					
ANR	5034667	Callee	strchr		5034198	0					
ANR	5034668	Identifier	strchr		5034198	0					
ANR	5034669	ArgumentList	ptr		5034198	1					
ANR	5034670	Argument	ptr		5034198	0					
ANR	5034671	Identifier	ptr		5034198	0					
ANR	5034672	Argument	"','"		5034198	1					
ANR	5034673	PrimaryExpression	"','"		5034198	0					
ANR	5034674	Identifier	par		5034198	1					
ANR	5034675	CompoundStatement		72:41:1471:1471	5034198	1					
ANR	5034676	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	232:6:5876:5899	5034198	0	True				
ANR	5034677	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5034198	0		=			
ANR	5034678	Identifier	ptr		5034198	0					
ANR	5034679	CallExpression	"strchr ( ptr , ')' )"		5034198	1					
ANR	5034680	Callee	strchr		5034198	0					
ANR	5034681	Identifier	strchr		5034198	0					
ANR	5034682	ArgumentList	ptr		5034198	1					
ANR	5034683	Argument	ptr		5034198	0					
ANR	5034684	Identifier	ptr		5034198	0					
ANR	5034685	Argument	')'		5034198	1					
ANR	5034686	PrimaryExpression	')'		5034198	0					
ANR	5034687	IfStatement	if ( ptr )		5034198	1					
ANR	5034688	Condition	ptr	233:10:5911:5913	5034198	0	True				
ANR	5034689	Identifier	ptr		5034198	0					
ANR	5034690	CompoundStatement		74:15:1519:1519	5034198	1					
ANR	5034691	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	234:7:5925:5948	5034198	0	True				
ANR	5034692	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034693	Identifier	ptr		5034198	0					
ANR	5034694	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034695	Callee	strchr		5034198	0					
ANR	5034696	Identifier	strchr		5034198	0					
ANR	5034697	ArgumentList	ptr		5034198	1					
ANR	5034698	Argument	ptr		5034198	0					
ANR	5034699	Identifier	ptr		5034198	0					
ANR	5034700	Argument	"','"		5034198	1					
ANR	5034701	PrimaryExpression	"','"		5034198	0					
ANR	5034702	ElseStatement	else		5034198	0					
ANR	5034703	CompoundStatement		77:12:1573:1573	5034198	0					
ANR	5034704	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	237:6:5978:6001	5034198	0	True				
ANR	5034705	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5034198	0		=			
ANR	5034706	Identifier	ptr		5034198	0					
ANR	5034707	CallExpression	"strchr ( ptr , ',' )"		5034198	1					
ANR	5034708	Callee	strchr		5034198	0					
ANR	5034709	Identifier	strchr		5034198	0					
ANR	5034710	ArgumentList	ptr		5034198	1					
ANR	5034711	Argument	ptr		5034198	0					
ANR	5034712	Identifier	ptr		5034198	0					
ANR	5034713	Argument	"','"		5034198	1					
ANR	5034714	PrimaryExpression	"','"		5034198	0					
ANR	5034715	IfStatement	if ( ptr )		5034198	7					
ANR	5034716	Condition	ptr	239:9:6019:6021	5034198	0	True				
ANR	5034717	Identifier	ptr		5034198	0					
ANR	5034718	CompoundStatement		80:14:1627:1627	5034198	1					
ANR	5034719	ExpressionStatement	* ptr = '\\0'	240:6:6032:6043	5034198	0	True				
ANR	5034720	AssignmentExpression	* ptr = '\\0'		5034198	0		=			
ANR	5034721	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034722	UnaryOperator	*		5034198	0					
ANR	5034723	Identifier	ptr		5034198	1					
ANR	5034724	PrimaryExpression	'\\0'		5034198	1					
ANR	5034725	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5034198	1					
ANR	5034726	ForInit	++ ptr ;	241:11:6056:6061	5034198	0	True				
ANR	5034727	UnaryExpression	++ ptr		5034198	0					
ANR	5034728	IncDec	++		5034198	0					
ANR	5034729	Identifier	ptr		5034198	1					
ANR	5034730	Condition	* ptr == ' '	241:18:6063:6073	5034198	1	True				
ANR	5034731	EqualityExpression	* ptr == ' '		5034198	0		==			
ANR	5034732	UnaryOperationExpression	* ptr		5034198	0					
ANR	5034733	UnaryOperator	*		5034198	0					
ANR	5034734	Identifier	ptr		5034198	1					
ANR	5034735	PrimaryExpression	' '		5034198	1					
ANR	5034736	PostIncDecOperationExpression	ptr ++	241:31:6076:6080	5034198	2	True				
ANR	5034737	Identifier	ptr		5034198	0					
ANR	5034738	IncDec	++		5034198	1					
ANR	5034739	CompoundStatement		82:38:1686:1686	5034198	3					
ANR	5034740	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	244:6:6128:6155	5034198	2	True				
ANR	5034741	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5034198	0					
ANR	5034742	Callee	strncpy		5034198	0					
ANR	5034743	Identifier	strncpy		5034198	0					
ANR	5034744	ArgumentList	w3		5034198	1					
ANR	5034745	Argument	w3		5034198	0					
ANR	5034746	Identifier	w3		5034198	0					
ANR	5034747	Argument	optr		5034198	1					
ANR	5034748	Identifier	optr		5034198	0					
ANR	5034749	Argument	WSZ - 1		5034198	2					
ANR	5034750	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034751	Identifier	WSZ		5034198	0					
ANR	5034752	PrimaryExpression	1		5034198	1					
ANR	5034753	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	245:6:6163:6189	5034198	3	True				
ANR	5034754	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5034198	0					
ANR	5034755	Callee	strncpy		5034198	0					
ANR	5034756	Identifier	strncpy		5034198	0					
ANR	5034757	ArgumentList	w4		5034198	1					
ANR	5034758	Argument	w4		5034198	0					
ANR	5034759	Identifier	w4		5034198	0					
ANR	5034760	Argument	ptr		5034198	1					
ANR	5034761	Identifier	ptr		5034198	0					
ANR	5034762	Argument	WSZ - 1		5034198	2					
ANR	5034763	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034764	Identifier	WSZ		5034198	0					
ANR	5034765	PrimaryExpression	1		5034198	1					
ANR	5034766	ElseStatement	else		5034198	0					
ANR	5034767	CompoundStatement		90:9:1821:1821	5034198	0					
ANR	5034768	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	250:3:6223:6249	5034198	0	True				
ANR	5034769	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5034198	0					
ANR	5034770	Callee	strncpy		5034198	0					
ANR	5034771	Identifier	strncpy		5034198	0					
ANR	5034772	ArgumentList	w0		5034198	1					
ANR	5034773	Argument	w0		5034198	0					
ANR	5034774	Identifier	w0		5034198	0					
ANR	5034775	Argument	buf		5034198	1					
ANR	5034776	Identifier	buf		5034198	0					
ANR	5034777	Argument	WSZ - 1		5034198	2					
ANR	5034778	AdditiveExpression	WSZ - 1		5034198	0		-			
ANR	5034779	Identifier	WSZ		5034198	0					
ANR	5034780	PrimaryExpression	1		5034198	1					
ANR	5034781	CompoundStatement		95:3:1911:1921	5034198	8					
ANR	5034782	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	253:3:6262:6303	5034198	0	True				
ANR	5034783	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5034198	0					
ANR	5034784	IdentifierDeclType	const char * [ ]		5034198	0					
ANR	5034785	Identifier	wa		5034198	1					
ANR	5034786	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5034198	2		=			
ANR	5034787	Identifier	wa		5034198	0					
ANR	5034788	InitializerList	w0		5034198	1					
ANR	5034789	Identifier	w0		5034198	0					
ANR	5034790	Identifier	w1		5034198	1					
ANR	5034791	Identifier	w2		5034198	2					
ANR	5034792	Identifier	w3		5034198	3					
ANR	5034793	Identifier	w4		5034198	4					
ANR	5034794	IdentifierDeclStatement	int nw = 0 ;	254:3:6308:6318	5034198	1	True				
ANR	5034795	IdentifierDecl	nw = 0		5034198	0					
ANR	5034796	IdentifierDeclType	int		5034198	0					
ANR	5034797	Identifier	nw		5034198	1					
ANR	5034798	AssignmentExpression	nw = 0		5034198	2		=			
ANR	5034799	Identifier	nw		5034198	0					
ANR	5034800	PrimaryExpression	0		5034198	1					
ANR	5034801	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5034198	2					
ANR	5034802	ForInit	i = 0 ;	255:8:6328:6333	5034198	0	True				
ANR	5034803	AssignmentExpression	i = 0		5034198	0		=			
ANR	5034804	Identifier	i		5034198	0					
ANR	5034805	PrimaryExpression	0		5034198	1					
ANR	5034806	Condition	i < 5	255:15:6335:6339	5034198	1	True				
ANR	5034807	RelationalExpression	i < 5		5034198	0		<			
ANR	5034808	Identifier	i		5034198	0					
ANR	5034809	PrimaryExpression	5		5034198	1					
ANR	5034810	PostIncDecOperationExpression	i ++	255:22:6342:6344	5034198	2	True				
ANR	5034811	Identifier	i		5034198	0					
ANR	5034812	IncDec	++		5034198	1					
ANR	5034813	CompoundStatement		96:27:1950:1950	5034198	3					
ANR	5034814	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5034198	0					
ANR	5034815	Condition	wa [ i ] [ 0 ] != '\\0'	256:8:6357:6372	5034198	0	True				
ANR	5034816	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5034198	0		!=			
ANR	5034817	ArrayIndexing	wa [ i ] [ 0 ]		5034198	0					
ANR	5034818	ArrayIndexing	wa [ i ]		5034198	0					
ANR	5034819	Identifier	wa		5034198	0					
ANR	5034820	Identifier	i		5034198	1					
ANR	5034821	PrimaryExpression	0		5034198	1					
ANR	5034822	PrimaryExpression	'\\0'		5034198	1					
ANR	5034823	CompoundStatement		97:26:1978:1978	5034198	1					
ANR	5034824	ExpressionStatement	nw ++	257:5:6382:6386	5034198	0	True				
ANR	5034825	PostIncDecOperationExpression	nw ++		5034198	0					
ANR	5034826	Identifier	nw		5034198	0					
ANR	5034827	IncDec	++		5034198	1					
ANR	5034828	ExpressionStatement	"replace ( nw , wa , str )"	260:3:6402:6423	5034198	3	True				
ANR	5034829	CallExpression	"replace ( nw , wa , str )"		5034198	0					
ANR	5034830	Callee	replace		5034198	0					
ANR	5034831	Identifier	replace		5034198	0					
ANR	5034832	ArgumentList	nw		5034198	1					
ANR	5034833	Argument	nw		5034198	0					
ANR	5034834	Identifier	nw		5034198	0					
ANR	5034835	Argument	wa		5034198	1					
ANR	5034836	Identifier	wa		5034198	0					
ANR	5034837	Argument	str		5034198	2					
ANR	5034838	Identifier	str		5034198	0					
ANR	5034839	ExpressionStatement	free ( buf )	263:1:6433:6443	5034198	11	True				
ANR	5034840	CallExpression	free ( buf )		5034198	0					
ANR	5034841	Callee	free		5034198	0					
ANR	5034842	Identifier	free		5034198	0					
ANR	5034843	ArgumentList	buf		5034198	1					
ANR	5034844	Argument	buf		5034198	0					
ANR	5034845	Identifier	buf		5034198	0					
ANR	5034846	ReturnStatement	return true ;	264:1:6446:6457	5034198	12	True				
ANR	5034847	Identifier	true		5034198	0					
ANR	5034848	ReturnType	static int		5034198	1					
ANR	5034849	Identifier	parse		5034198	2					
ANR	5034850	ParameterList	"RParse * p , const char * data , char * str"		5034198	3					
ANR	5034851	Parameter	RParse * p	160:17:4356:4364	5034198	0	True				
ANR	5034852	ParameterType	RParse *		5034198	0					
ANR	5034853	Identifier	p		5034198	1					
ANR	5034854	Parameter	const char * data	160:28:4367:4382	5034198	1	True				
ANR	5034855	ParameterType	const char *		5034198	0					
ANR	5034856	Identifier	data		5034198	1					
ANR	5034857	Parameter	char * str	160:46:4385:4393	5034198	2	True				
ANR	5034858	ParameterType	char *		5034198	0					
ANR	5034859	Identifier	str		5034198	1					
ANR	5034860	CFGEntryNode	ENTRY		5034198		True				
ANR	5034861	CFGExitNode	EXIT		5034198		True				
ANR	5034862	Symbol	* w4		5034198						
ANR	5034863	Symbol	* w3		5034198						
ANR	5034864	Symbol	* w2		5034198						
ANR	5034865	Symbol	* w1		5034198						
ANR	5034866	Symbol	data		5034198						
ANR	5034867	Symbol	strchr		5034198						
ANR	5034868	Symbol	nw		5034198						
ANR	5034869	Symbol	wa		5034198						
ANR	5034870	Symbol	strlen		5034198						
ANR	5034871	Symbol	* wa		5034198						
ANR	5034872	Symbol	len		5034198						
ANR	5034873	Symbol	* ptr		5034198						
ANR	5034874	Symbol	w0		5034198						
ANR	5034875	Symbol	w1		5034198						
ANR	5034876	Symbol	w2		5034198						
ANR	5034877	Symbol	w3		5034198						
ANR	5034878	Symbol	* w0		5034198						
ANR	5034879	Symbol	w4		5034198						
ANR	5034880	Symbol	par		5034198						
ANR	5034881	Symbol	malloc		5034198						
ANR	5034882	Symbol	* buf		5034198						
ANR	5034883	Symbol	* * i		5034198						
ANR	5034884	Symbol	false		5034198						
ANR	5034885	Symbol	i		5034198						
ANR	5034886	Symbol	optr		5034198						
ANR	5034887	Symbol	ptr		5034198						
ANR	5034888	Symbol	p		5034198						
ANR	5034889	Symbol	str		5034198						
ANR	5034890	Symbol	buf		5034198						
ANR	5034891	Symbol	* i		5034198						
ANR	5034892	Symbol	* * wa		5034198						
ANR	5034893	Symbol	true		5034198						
ANR	5034894	Symbol	WSZ		5034198						
ANR	5034895	DeclStmt									
ANR	5034896	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_sh_pseudo
ANR	5034897	DeclStmt									
ANR	5034898	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
