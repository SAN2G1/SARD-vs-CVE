command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6061145	File	data/converged/CVE-2019-16718~_radare2/shlr_qnx_src_utils.c								
ANR	6061146	ClassDef	<unnamed>	29:0:939:1024							
ANR	6061147	ClassDef	i386_regnum	37:0:1028:1590							
ANR	6061148	DeclStmt									
ANR	6061149	Decl							int	int [ ]	i386nto_gregset_reg_offset
ANR	6061150	ClassDef	errnomap_t	87:0:2340:2382							
ANR	6061151	DeclStmt									
ANR	6061152	Decl							int	int	nto
ANR	6061153	DeclStmt									
ANR	6061154	Decl							int	int	other
ANR	6061155	Function	errnoconvert	92:0:2386:3262							
ANR	6061156	FunctionDef	errnoconvert (int x)		6061155	0					
ANR	6061157	CompoundStatement		92:25:2411:3262	6061155	0					
ANR	6061158	Statement	struct	93:1:2414:2419	6061155	0	True				
ANR	6061159	Statement	errnomap_t	93:8:2421:2430	6061155	1	True				
ANR	6061160	Statement	errnomap	93:19:2432:2439	6061155	2	True				
ANR	6061161	Statement	[	93:27:2440:2440	6061155	3	True				
ANR	6061162	Statement	]	93:28:2441:2441	6061155	4	True				
ANR	6061163	Statement	=	93:30:2443:2443	6061155	5	True				
ANR	6061164	CompoundStatement		2:32:33:33	6061155	6					
ANR	6061165	CompoundStatement		4:2:60:60	6061155	0					
ANR	6061166	Statement	NTO_ENAMETOOLONG	95:3:2473:2488	6061155	0	True				
ANR	6061167	Statement	","	95:19:2489:2489	6061155	1	True				
ANR	6061168	Statement	ENAMETOOLONG	95:21:2491:2502	6061155	2	True				
ANR	6061169	Statement	","	95:34:2504:2504	6061155	1	True				
ANR	6061170	CompoundStatement		5:2:96:96	6061155	2					
ANR	6061171	Statement	NTO_ELIBACC	96:3:2509:2519	6061155	0	True				
ANR	6061172	Statement	","	96:14:2520:2520	6061155	1	True				
ANR	6061173	Statement	ELIBACC	96:16:2522:2528	6061155	2	True				
ANR	6061174	Statement	","	96:24:2530:2530	6061155	3	True				
ANR	6061175	CompoundStatement		6:2:122:122	6061155	4					
ANR	6061176	Statement	NTO_ELIBBAD	97:3:2535:2545	6061155	0	True				
ANR	6061177	Statement	","	97:14:2546:2546	6061155	1	True				
ANR	6061178	Statement	ELIBBAD	97:16:2548:2554	6061155	2	True				
ANR	6061179	Statement	","	97:24:2556:2556	6061155	5	True				
ANR	6061180	CompoundStatement		7:2:148:148	6061155	6					
ANR	6061181	Statement	NTO_ELIBSCN	98:3:2561:2571	6061155	0	True				
ANR	6061182	Statement	","	98:14:2572:2572	6061155	1	True				
ANR	6061183	Statement	ELIBSCN	98:16:2574:2580	6061155	2	True				
ANR	6061184	Statement	","	98:24:2582:2582	6061155	7	True				
ANR	6061185	CompoundStatement		8:2:174:174	6061155	8					
ANR	6061186	Statement	NTO_ELIBMAX	99:3:2587:2597	6061155	0	True				
ANR	6061187	Statement	","	99:14:2598:2598	6061155	1	True				
ANR	6061188	Statement	ELIBMAX	99:16:2600:2606	6061155	2	True				
ANR	6061189	Statement	","	99:24:2608:2608	6061155	9	True				
ANR	6061190	CompoundStatement		9:2:200:200	6061155	10					
ANR	6061191	Statement	NTO_ELIBEXEC	100:3:2613:2624	6061155	0	True				
ANR	6061192	Statement	","	100:15:2625:2625	6061155	1	True				
ANR	6061193	Statement	ELIBEXEC	100:17:2627:2634	6061155	2	True				
ANR	6061194	Statement	","	100:26:2636:2636	6061155	11	True				
ANR	6061195	CompoundStatement		10:2:228:228	6061155	12					
ANR	6061196	Statement	NTO_EILSEQ	101:3:2641:2650	6061155	0	True				
ANR	6061197	Statement	","	101:13:2651:2651	6061155	1	True				
ANR	6061198	Statement	EILSEQ	101:15:2653:2658	6061155	2	True				
ANR	6061199	Statement	","	101:22:2660:2660	6061155	13	True				
ANR	6061200	CompoundStatement		11:2:252:252	6061155	14					
ANR	6061201	Statement	NTO_ENOSYS	102:3:2665:2674	6061155	0	True				
ANR	6061202	Statement	","	102:13:2675:2675	6061155	1	True				
ANR	6061203	Statement	ENOSYS	102:15:2677:2682	6061155	2	True				
ANR	6061204	ExpressionStatement		119:2:3121:3121	6061155	7	True				
ANR	6061205	IdentifierDeclStatement	int i ;	120:1:3124:3129	6061155	8	True				
ANR	6061206	IdentifierDecl	i		6061155	0					
ANR	6061207	IdentifierDeclType	int		6061155	0					
ANR	6061208	Identifier	i		6061155	1					
ANR	6061209	ForStatement	for ( i = 0 ; i < sizeof ( errnomap ) / sizeof ( errnomap [ 0 ] ) ; i ++ )		6061155	9					
ANR	6061210	ForInit	i = 0 ;	122:6:3138:3143	6061155	0	True				
ANR	6061211	AssignmentExpression	i = 0		6061155	0		=			
ANR	6061212	Identifier	i		6061155	0					
ANR	6061213	PrimaryExpression	0		6061155	1					
ANR	6061214	Condition	i < sizeof ( errnomap ) / sizeof ( errnomap [ 0 ] )	122:13:3145:3186	6061155	1	True				
ANR	6061215	RelationalExpression	i < sizeof ( errnomap ) / sizeof ( errnomap [ 0 ] )		6061155	0		<			
ANR	6061216	Identifier	i		6061155	0					
ANR	6061217	MultiplicativeExpression	sizeof ( errnomap ) / sizeof ( errnomap [ 0 ] )		6061155	1		/			
ANR	6061218	SizeofExpression	sizeof ( errnomap )		6061155	0					
ANR	6061219	Sizeof	sizeof		6061155	0					
ANR	6061220	SizeofOperand	errnomap		6061155	1					
ANR	6061221	SizeofExpression	sizeof ( errnomap [ 0 ] )		6061155	1					
ANR	6061222	Sizeof	sizeof		6061155	0					
ANR	6061223	ArrayIndexing	errnomap [ 0 ]		6061155	1					
ANR	6061224	Identifier	errnomap		6061155	0					
ANR	6061225	PrimaryExpression	0		6061155	1					
ANR	6061226	PostIncDecOperationExpression	i ++	122:57:3189:3191	6061155	2	True				
ANR	6061227	Identifier	i		6061155	0					
ANR	6061228	IncDec	++		6061155	1					
ANR	6061229	IfStatement	if ( errnomap [ i ] . nto == x )		6061155	3					
ANR	6061230	Condition	errnomap [ i ] . nto == x	123:6:3200:3219	6061155	0	True				
ANR	6061231	EqualityExpression	errnomap [ i ] . nto == x		6061155	0		==			
ANR	6061232	MemberAccess	errnomap [ i ] . nto		6061155	0					
ANR	6061233	ArrayIndexing	errnomap [ i ]		6061155	0					
ANR	6061234	Identifier	errnomap		6061155	0					
ANR	6061235	Identifier	i		6061155	1					
ANR	6061236	Identifier	nto		6061155	1					
ANR	6061237	Identifier	x		6061155	1					
ANR	6061238	ReturnStatement	return errnomap [ i ] . other ;	124:3:3225:3249	6061155	1	True				
ANR	6061239	MemberAccess	errnomap [ i ] . other		6061155	0					
ANR	6061240	ArrayIndexing	errnomap [ i ]		6061155	0					
ANR	6061241	Identifier	errnomap		6061155	0					
ANR	6061242	Identifier	i		6061155	1					
ANR	6061243	Identifier	other		6061155	1					
ANR	6061244	ReturnStatement	return x ;	125:1:3252:3260	6061155	10	True				
ANR	6061245	Identifier	x		6061155	0					
ANR	6061246	ReturnType	int		6061155	1					
ANR	6061247	Identifier	errnoconvert		6061155	2					
ANR	6061248	ParameterList	int x		6061155	3					
ANR	6061249	Parameter	int x	92:18:2404:2408	6061155	0	True				
ANR	6061250	ParameterType	int		6061155	0					
ANR	6061251	Identifier	x		6061155	1					
ANR	6061252	CFGEntryNode	ENTRY		6061155		True				
ANR	6061253	CFGExitNode	EXIT		6061155		True				
ANR	6061254	Symbol	errnomap		6061155						
ANR	6061255	Symbol	* i		6061155						
ANR	6061256	Symbol	x		6061155						
ANR	6061257	Symbol	i		6061155						
ANR	6061258	Symbol	* errnomap		6061155						
ANR	6061259	Symbol	errnomap [ i ] . nto		6061155						
ANR	6061260	Symbol	errnomap [ i ] . other		6061155						
ANR	6061261	Function	errnoconvert	129:0:3271:3309							
ANR	6061262	FunctionDef	errnoconvert (int x)		6061261	0					
ANR	6061263	CompoundStatement		129:25:3296:3309	6061261	0					
ANR	6061264	ReturnStatement	return x ;	130:1:3299:3307	6061261	0	True				
ANR	6061265	Identifier	x		6061261	0					
ANR	6061266	ReturnType	int		6061261	1					
ANR	6061267	Identifier	errnoconvert		6061261	2					
ANR	6061268	ParameterList	int x		6061261	3					
ANR	6061269	Parameter	int x	129:18:3289:3293	6061261	0	True				
ANR	6061270	ParameterType	int		6061261	0					
ANR	6061271	Identifier	x		6061261	1					
ANR	6061272	CFGEntryNode	ENTRY		6061261		True				
ANR	6061273	CFGExitNode	EXIT		6061261		True				
ANR	6061274	Symbol	x		6061261						
ANR	6061275	Function	extract_signed_integer	134:0:3336:4136							
ANR	6061276	FunctionDef	"extract_signed_integer (const ut8 * addr , int len , int be)"		6061275	0					
ANR	6061277	CompoundStatement		135:58:3402:4136	6061275	0					
ANR	6061278	IdentifierDeclStatement	LONGEST retval ;	136:1:3405:3419	6061275	0	True				
ANR	6061279	IdentifierDecl	retval		6061275	0					
ANR	6061280	IdentifierDeclType	LONGEST		6061275	0					
ANR	6061281	Identifier	retval		6061275	1					
ANR	6061282	IdentifierDeclStatement	const ut8 * p ;	137:1:3422:3434	6061275	1	True				
ANR	6061283	IdentifierDecl	* p		6061275	0					
ANR	6061284	IdentifierDeclType	const ut8 *		6061275	0					
ANR	6061285	Identifier	p		6061275	1					
ANR	6061286	IdentifierDeclStatement	const ut8 * startaddr = addr ;	138:1:3437:3464	6061275	2	True				
ANR	6061287	IdentifierDecl	* startaddr = addr		6061275	0					
ANR	6061288	IdentifierDeclType	const ut8 *		6061275	0					
ANR	6061289	Identifier	startaddr		6061275	1					
ANR	6061290	AssignmentExpression	* startaddr = addr		6061275	2		=			
ANR	6061291	Identifier	addr		6061275	0					
ANR	6061292	Identifier	addr		6061275	1					
ANR	6061293	IdentifierDeclStatement	const ut8 * endaddr = startaddr + len ;	139:1:3467:3503	6061275	3	True				
ANR	6061294	IdentifierDecl	* endaddr = startaddr + len		6061275	0					
ANR	6061295	IdentifierDeclType	const ut8 *		6061275	0					
ANR	6061296	Identifier	endaddr		6061275	1					
ANR	6061297	AssignmentExpression	* endaddr = startaddr + len		6061275	2		=			
ANR	6061298	Identifier	endaddr		6061275	0					
ANR	6061299	AdditiveExpression	startaddr + len		6061275	1		+			
ANR	6061300	Identifier	startaddr		6061275	0					
ANR	6061301	Identifier	len		6061275	1					
ANR	6061302	IfStatement	if ( len > ( int ) sizeof ( LONGEST ) )		6061275	4					
ANR	6061303	Condition	len > ( int ) sizeof ( LONGEST )	141:5:3511:3536	6061275	0	True				
ANR	6061304	RelationalExpression	len > ( int ) sizeof ( LONGEST )		6061275	0		>			
ANR	6061305	Identifier	len		6061275	0					
ANR	6061306	CastExpression	( int ) sizeof ( LONGEST )		6061275	1					
ANR	6061307	CastTarget	int		6061275	0					
ANR	6061308	SizeofExpression	sizeof ( LONGEST )		6061275	1					
ANR	6061309	Sizeof	sizeof		6061275	0					
ANR	6061310	SizeofOperand	LONGEST		6061275	1					
ANR	6061311	ExpressionStatement	"eprintf ( ""This operation is not available on integers of more than %d byte(s)\\n"" , ( int ) sizeof ( LONGEST ) )"	142:2:3541:3651	6061275	1	True				
ANR	6061312	CallExpression	"eprintf ( ""This operation is not available on integers of more than %d byte(s)\\n"" , ( int ) sizeof ( LONGEST ) )"		6061275	0					
ANR	6061313	Callee	eprintf		6061275	0					
ANR	6061314	Identifier	eprintf		6061275	0					
ANR	6061315	ArgumentList	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061275	1					
ANR	6061316	Argument	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061275	0					
ANR	6061317	PrimaryExpression	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061275	0					
ANR	6061318	Argument	( int ) sizeof ( LONGEST )		6061275	1					
ANR	6061319	CastExpression	( int ) sizeof ( LONGEST )		6061275	0					
ANR	6061320	CastTarget	int		6061275	0					
ANR	6061321	SizeofExpression	sizeof ( LONGEST )		6061275	1					
ANR	6061322	Sizeof	sizeof		6061275	0					
ANR	6061323	SizeofOperand	LONGEST		6061275	1					
ANR	6061324	IfStatement	if ( be )		6061275	5					
ANR	6061325	Condition	be	148:5:3758:3759	6061275	0	True				
ANR	6061326	Identifier	be		6061275	0					
ANR	6061327	CompoundStatement		14:9:359:359	6061275	1					
ANR	6061328	ExpressionStatement	p = startaddr	149:2:3766:3779	6061275	0	True				
ANR	6061329	AssignmentExpression	p = startaddr		6061275	0		=			
ANR	6061330	Identifier	p		6061275	0					
ANR	6061331	Identifier	startaddr		6061275	1					
ANR	6061332	ExpressionStatement	retval = ( ( LONGEST ) * p ^ 0x80 ) - 0x80	151:2:3833:3869	6061275	1	True				
ANR	6061333	AssignmentExpression	retval = ( ( LONGEST ) * p ^ 0x80 ) - 0x80		6061275	0		=			
ANR	6061334	Identifier	retval		6061275	0					
ANR	6061335	AdditiveExpression	( ( LONGEST ) * p ^ 0x80 ) - 0x80		6061275	1		-			
ANR	6061336	ExclusiveOrExpression	( LONGEST ) * p ^ 0x80		6061275	0		^			
ANR	6061337	CastExpression	( LONGEST ) * p		6061275	0					
ANR	6061338	CastTarget	LONGEST		6061275	0					
ANR	6061339	UnaryOperationExpression	* p		6061275	1					
ANR	6061340	UnaryOperator	*		6061275	0					
ANR	6061341	Identifier	p		6061275	1					
ANR	6061342	PrimaryExpression	0x80		6061275	1					
ANR	6061343	PrimaryExpression	0x80		6061275	1					
ANR	6061344	ForStatement	for ( ++ p ; p < endaddr ; ++ p )		6061275	2					
ANR	6061345	ForInit	++ p ;	152:7:3878:3881	6061275	0	True				
ANR	6061346	UnaryExpression	++ p		6061275	0					
ANR	6061347	IncDec	++		6061275	0					
ANR	6061348	Identifier	p		6061275	1					
ANR	6061349	Condition	p < endaddr	152:12:3883:3893	6061275	1	True				
ANR	6061350	RelationalExpression	p < endaddr		6061275	0		<			
ANR	6061351	Identifier	p		6061275	0					
ANR	6061352	Identifier	endaddr		6061275	1					
ANR	6061353	UnaryExpression	++ p	152:25:3896:3898	6061275	2	True				
ANR	6061354	IncDec	++		6061275	0					
ANR	6061355	Identifier	p		6061275	1					
ANR	6061356	ExpressionStatement	retval = ( retval << 8 ) | * p	153:3:3904:3931	6061275	3	True				
ANR	6061357	AssignmentExpression	retval = ( retval << 8 ) | * p		6061275	0		=			
ANR	6061358	Identifier	retval		6061275	0					
ANR	6061359	InclusiveOrExpression	( retval << 8 ) | * p		6061275	1		|			
ANR	6061360	ShiftExpression	retval << 8		6061275	0		<<			
ANR	6061361	Identifier	retval		6061275	0					
ANR	6061362	PrimaryExpression	8		6061275	1					
ANR	6061363	UnaryOperationExpression	* p		6061275	1					
ANR	6061364	UnaryOperator	*		6061275	0					
ANR	6061365	Identifier	p		6061275	1					
ANR	6061366	ElseStatement	else		6061275	0					
ANR	6061367	CompoundStatement		20:8:538:538	6061275	0					
ANR	6061368	ExpressionStatement	p = endaddr - 1	155:2:3945:3960	6061275	0	True				
ANR	6061369	AssignmentExpression	p = endaddr - 1		6061275	0		=			
ANR	6061370	Identifier	p		6061275	0					
ANR	6061371	AdditiveExpression	endaddr - 1		6061275	1		-			
ANR	6061372	Identifier	endaddr		6061275	0					
ANR	6061373	PrimaryExpression	1		6061275	1					
ANR	6061374	ExpressionStatement	retval = ( ( LONGEST ) * p ^ 0x80 ) - 0x80	157:2:4014:4050	6061275	1	True				
ANR	6061375	AssignmentExpression	retval = ( ( LONGEST ) * p ^ 0x80 ) - 0x80		6061275	0		=			
ANR	6061376	Identifier	retval		6061275	0					
ANR	6061377	AdditiveExpression	( ( LONGEST ) * p ^ 0x80 ) - 0x80		6061275	1		-			
ANR	6061378	ExclusiveOrExpression	( LONGEST ) * p ^ 0x80		6061275	0		^			
ANR	6061379	CastExpression	( LONGEST ) * p		6061275	0					
ANR	6061380	CastTarget	LONGEST		6061275	0					
ANR	6061381	UnaryOperationExpression	* p		6061275	1					
ANR	6061382	UnaryOperator	*		6061275	0					
ANR	6061383	Identifier	p		6061275	1					
ANR	6061384	PrimaryExpression	0x80		6061275	1					
ANR	6061385	PrimaryExpression	0x80		6061275	1					
ANR	6061386	ForStatement	for ( -- p ; p >= startaddr ; -- p )		6061275	2					
ANR	6061387	ForInit	-- p ;	158:7:4059:4062	6061275	0	True				
ANR	6061388	UnaryExpression	-- p		6061275	0					
ANR	6061389	IncDec	--		6061275	0					
ANR	6061390	Identifier	p		6061275	1					
ANR	6061391	Condition	p >= startaddr	158:12:4064:4077	6061275	1	True				
ANR	6061392	RelationalExpression	p >= startaddr		6061275	0		>=			
ANR	6061393	Identifier	p		6061275	0					
ANR	6061394	Identifier	startaddr		6061275	1					
ANR	6061395	UnaryExpression	-- p	158:28:4080:4082	6061275	2	True				
ANR	6061396	IncDec	--		6061275	0					
ANR	6061397	Identifier	p		6061275	1					
ANR	6061398	ExpressionStatement	retval = ( retval << 8 ) | * p	159:3:4088:4115	6061275	3	True				
ANR	6061399	AssignmentExpression	retval = ( retval << 8 ) | * p		6061275	0		=			
ANR	6061400	Identifier	retval		6061275	0					
ANR	6061401	InclusiveOrExpression	( retval << 8 ) | * p		6061275	1		|			
ANR	6061402	ShiftExpression	retval << 8		6061275	0		<<			
ANR	6061403	Identifier	retval		6061275	0					
ANR	6061404	PrimaryExpression	8		6061275	1					
ANR	6061405	UnaryOperationExpression	* p		6061275	1					
ANR	6061406	UnaryOperator	*		6061275	0					
ANR	6061407	Identifier	p		6061275	1					
ANR	6061408	ReturnStatement	return retval ;	161:1:4121:4134	6061275	6	True				
ANR	6061409	Identifier	retval		6061275	0					
ANR	6061410	ReturnType	LONGEST		6061275	1					
ANR	6061411	Identifier	extract_signed_integer		6061275	2					
ANR	6061412	ParameterList	"const ut8 * addr , int len , int be"		6061275	3					
ANR	6061413	Parameter	const ut8 * addr	135:24:3368:3382	6061275	0	True				
ANR	6061414	ParameterType	const ut8 *		6061275	0					
ANR	6061415	Identifier	addr		6061275	1					
ANR	6061416	Parameter	int len	135:41:3385:3391	6061275	1	True				
ANR	6061417	ParameterType	int		6061275	0					
ANR	6061418	Identifier	len		6061275	1					
ANR	6061419	Parameter	int be	135:50:3394:3399	6061275	2	True				
ANR	6061420	ParameterType	int		6061275	0					
ANR	6061421	Identifier	be		6061275	1					
ANR	6061422	CFGEntryNode	ENTRY		6061275		True				
ANR	6061423	CFGExitNode	EXIT		6061275		True				
ANR	6061424	Symbol	p		6061275						
ANR	6061425	Symbol	be		6061275						
ANR	6061426	Symbol	len		6061275						
ANR	6061427	Symbol	endaddr		6061275						
ANR	6061428	Symbol	startaddr		6061275						
ANR	6061429	Symbol	* p		6061275						
ANR	6061430	Symbol	addr		6061275						
ANR	6061431	Symbol	retval		6061275						
ANR	6061432	Function	extract_unsigned_integer	164:0:4139:4762							
ANR	6061433	FunctionDef	"extract_unsigned_integer (const ut8 * addr , int len , int be)"		6061432	0					
ANR	6061434	CompoundStatement		165:60:4208:4762	6061432	0					
ANR	6061435	IdentifierDeclStatement	ULONGEST retval ;	166:1:4211:4226	6061432	0	True				
ANR	6061436	IdentifierDecl	retval		6061432	0					
ANR	6061437	IdentifierDeclType	ULONGEST		6061432	0					
ANR	6061438	Identifier	retval		6061432	1					
ANR	6061439	IdentifierDeclStatement	const ut8 * p ;	167:1:4229:4241	6061432	1	True				
ANR	6061440	IdentifierDecl	* p		6061432	0					
ANR	6061441	IdentifierDeclType	const ut8 *		6061432	0					
ANR	6061442	Identifier	p		6061432	1					
ANR	6061443	IdentifierDeclStatement	const ut8 * startaddr = addr ;	168:1:4244:4271	6061432	2	True				
ANR	6061444	IdentifierDecl	* startaddr = addr		6061432	0					
ANR	6061445	IdentifierDeclType	const ut8 *		6061432	0					
ANR	6061446	Identifier	startaddr		6061432	1					
ANR	6061447	AssignmentExpression	* startaddr = addr		6061432	2		=			
ANR	6061448	Identifier	addr		6061432	0					
ANR	6061449	Identifier	addr		6061432	1					
ANR	6061450	IdentifierDeclStatement	const ut8 * endaddr = startaddr + len ;	169:1:4274:4310	6061432	3	True				
ANR	6061451	IdentifierDecl	* endaddr = startaddr + len		6061432	0					
ANR	6061452	IdentifierDeclType	const ut8 *		6061432	0					
ANR	6061453	Identifier	endaddr		6061432	1					
ANR	6061454	AssignmentExpression	* endaddr = startaddr + len		6061432	2		=			
ANR	6061455	Identifier	endaddr		6061432	0					
ANR	6061456	AdditiveExpression	startaddr + len		6061432	1		+			
ANR	6061457	Identifier	startaddr		6061432	0					
ANR	6061458	Identifier	len		6061432	1					
ANR	6061459	IfStatement	if ( len > ( int ) sizeof ( LONGEST ) )		6061432	4					
ANR	6061460	Condition	len > ( int ) sizeof ( LONGEST )	171:5:4318:4343	6061432	0	True				
ANR	6061461	RelationalExpression	len > ( int ) sizeof ( LONGEST )		6061432	0		>			
ANR	6061462	Identifier	len		6061432	0					
ANR	6061463	CastExpression	( int ) sizeof ( LONGEST )		6061432	1					
ANR	6061464	CastTarget	int		6061432	0					
ANR	6061465	SizeofExpression	sizeof ( LONGEST )		6061432	1					
ANR	6061466	Sizeof	sizeof		6061432	0					
ANR	6061467	SizeofOperand	LONGEST		6061432	1					
ANR	6061468	ExpressionStatement	"eprintf ( ""This operation is not available on integers of more than %d byte(s)\\n"" , ( int ) sizeof ( LONGEST ) )"	172:2:4348:4458	6061432	1	True				
ANR	6061469	CallExpression	"eprintf ( ""This operation is not available on integers of more than %d byte(s)\\n"" , ( int ) sizeof ( LONGEST ) )"		6061432	0					
ANR	6061470	Callee	eprintf		6061432	0					
ANR	6061471	Identifier	eprintf		6061432	0					
ANR	6061472	ArgumentList	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061432	1					
ANR	6061473	Argument	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061432	0					
ANR	6061474	PrimaryExpression	"""This operation is not available on integers of more than %d byte(s)\\n"""		6061432	0					
ANR	6061475	Argument	( int ) sizeof ( LONGEST )		6061432	1					
ANR	6061476	CastExpression	( int ) sizeof ( LONGEST )		6061432	0					
ANR	6061477	CastTarget	int		6061432	0					
ANR	6061478	SizeofExpression	sizeof ( LONGEST )		6061432	1					
ANR	6061479	Sizeof	sizeof		6061432	0					
ANR	6061480	SizeofOperand	LONGEST		6061432	1					
ANR	6061481	ExpressionStatement	retval = 0	178:1:4561:4571	6061432	5	True				
ANR	6061482	AssignmentExpression	retval = 0		6061432	0		=			
ANR	6061483	Identifier	retval		6061432	0					
ANR	6061484	PrimaryExpression	0		6061432	1					
ANR	6061485	IfStatement	if ( be )		6061432	6					
ANR	6061486	Condition	be	179:5:4578:4579	6061432	0	True				
ANR	6061487	Identifier	be		6061432	0					
ANR	6061488	CompoundStatement		15:9:373:373	6061432	1					
ANR	6061489	ForStatement	for ( p = startaddr ; p < endaddr ; ++ p )		6061432	0					
ANR	6061490	ForInit	p = startaddr ;	180:7:4591:4604	6061432	0	True				
ANR	6061491	AssignmentExpression	p = startaddr		6061432	0		=			
ANR	6061492	Identifier	p		6061432	0					
ANR	6061493	Identifier	startaddr		6061432	1					
ANR	6061494	Condition	p < endaddr	180:22:4606:4616	6061432	1	True				
ANR	6061495	RelationalExpression	p < endaddr		6061432	0		<			
ANR	6061496	Identifier	p		6061432	0					
ANR	6061497	Identifier	endaddr		6061432	1					
ANR	6061498	UnaryExpression	++ p	180:35:4619:4621	6061432	2	True				
ANR	6061499	IncDec	++		6061432	0					
ANR	6061500	Identifier	p		6061432	1					
ANR	6061501	ExpressionStatement	retval = ( retval << 8 ) | * p	181:3:4627:4654	6061432	3	True				
ANR	6061502	AssignmentExpression	retval = ( retval << 8 ) | * p		6061432	0		=			
ANR	6061503	Identifier	retval		6061432	0					
ANR	6061504	InclusiveOrExpression	( retval << 8 ) | * p		6061432	1		|			
ANR	6061505	ShiftExpression	retval << 8		6061432	0		<<			
ANR	6061506	Identifier	retval		6061432	0					
ANR	6061507	PrimaryExpression	8		6061432	1					
ANR	6061508	UnaryOperationExpression	* p		6061432	1					
ANR	6061509	UnaryOperator	*		6061432	0					
ANR	6061510	Identifier	p		6061432	1					
ANR	6061511	ElseStatement	else		6061432	0					
ANR	6061512	CompoundStatement		18:8:455:455	6061432	0					
ANR	6061513	ForStatement	for ( p = endaddr - 1 ; p >= startaddr ; -- p )		6061432	0					
ANR	6061514	ForInit	p = endaddr - 1 ;	183:7:4673:4688	6061432	0	True				
ANR	6061515	AssignmentExpression	p = endaddr - 1		6061432	0		=			
ANR	6061516	Identifier	p		6061432	0					
ANR	6061517	AdditiveExpression	endaddr - 1		6061432	1		-			
ANR	6061518	Identifier	endaddr		6061432	0					
ANR	6061519	PrimaryExpression	1		6061432	1					
ANR	6061520	Condition	p >= startaddr	183:24:4690:4703	6061432	1	True				
ANR	6061521	RelationalExpression	p >= startaddr		6061432	0		>=			
ANR	6061522	Identifier	p		6061432	0					
ANR	6061523	Identifier	startaddr		6061432	1					
ANR	6061524	UnaryExpression	-- p	183:40:4706:4708	6061432	2	True				
ANR	6061525	IncDec	--		6061432	0					
ANR	6061526	Identifier	p		6061432	1					
ANR	6061527	ExpressionStatement	retval = ( retval << 8 ) | * p	184:3:4714:4741	6061432	3	True				
ANR	6061528	AssignmentExpression	retval = ( retval << 8 ) | * p		6061432	0		=			
ANR	6061529	Identifier	retval		6061432	0					
ANR	6061530	InclusiveOrExpression	( retval << 8 ) | * p		6061432	1		|			
ANR	6061531	ShiftExpression	retval << 8		6061432	0		<<			
ANR	6061532	Identifier	retval		6061432	0					
ANR	6061533	PrimaryExpression	8		6061432	1					
ANR	6061534	UnaryOperationExpression	* p		6061432	1					
ANR	6061535	UnaryOperator	*		6061432	0					
ANR	6061536	Identifier	p		6061432	1					
ANR	6061537	ReturnStatement	return retval ;	186:1:4747:4760	6061432	7	True				
ANR	6061538	Identifier	retval		6061432	0					
ANR	6061539	ReturnType	ULONGEST		6061432	1					
ANR	6061540	Identifier	extract_unsigned_integer		6061432	2					
ANR	6061541	ParameterList	"const ut8 * addr , int len , int be"		6061432	3					
ANR	6061542	Parameter	const ut8 * addr	165:26:4174:4188	6061432	0	True				
ANR	6061543	ParameterType	const ut8 *		6061432	0					
ANR	6061544	Identifier	addr		6061432	1					
ANR	6061545	Parameter	int len	165:43:4191:4197	6061432	1	True				
ANR	6061546	ParameterType	int		6061432	0					
ANR	6061547	Identifier	len		6061432	1					
ANR	6061548	Parameter	int be	165:52:4200:4205	6061432	2	True				
ANR	6061549	ParameterType	int		6061432	0					
ANR	6061550	Identifier	be		6061432	1					
ANR	6061551	CFGEntryNode	ENTRY		6061432		True				
ANR	6061552	CFGExitNode	EXIT		6061432		True				
ANR	6061553	Symbol	p		6061432						
ANR	6061554	Symbol	be		6061432						
ANR	6061555	Symbol	len		6061432						
ANR	6061556	Symbol	endaddr		6061432						
ANR	6061557	Symbol	startaddr		6061432						
ANR	6061558	Symbol	* p		6061432						
ANR	6061559	Symbol	addr		6061432						
ANR	6061560	Symbol	retval		6061432						
ANR	6061561	Function	i386nto_regset_id	189:0:4765:5081							
ANR	6061562	FunctionDef	i386nto_regset_id (int regno)		6061561	0					
ANR	6061563	CompoundStatement		189:34:4799:5081	6061561	0					
ANR	6061564	IfStatement	if ( regno == - 1 )		6061561	0					
ANR	6061565	Condition	regno == - 1	190:5:4806:4816	6061561	0	True				
ANR	6061566	EqualityExpression	regno == - 1		6061561	0		==			
ANR	6061567	Identifier	regno		6061561	0					
ANR	6061568	UnaryOperationExpression	- 1		6061561	1					
ANR	6061569	UnaryOperator	-		6061561	0					
ANR	6061570	PrimaryExpression	1		6061561	1					
ANR	6061571	ReturnStatement	return NTO_REG_END ;	191:2:4821:4839	6061561	1	True				
ANR	6061572	Identifier	NTO_REG_END		6061561	0					
ANR	6061573	IfStatement	if ( regno < I386_NUM_GREGS )		6061561	1					
ANR	6061574	Condition	regno < I386_NUM_GREGS	192:5:4846:4867	6061561	0	True				
ANR	6061575	RelationalExpression	regno < I386_NUM_GREGS		6061561	0		<			
ANR	6061576	Identifier	regno		6061561	0					
ANR	6061577	Identifier	I386_NUM_GREGS		6061561	1					
ANR	6061578	ReturnStatement	return NTO_REG_GENERAL ;	193:2:4872:4894	6061561	1	True				
ANR	6061579	Identifier	NTO_REG_GENERAL		6061561	0					
ANR	6061580	IfStatement	if ( regno < I386_NUM_GREGS + I386_NUM_FREGS )		6061561	2					
ANR	6061581	Condition	regno < I386_NUM_GREGS + I386_NUM_FREGS	194:5:4901:4939	6061561	0	True				
ANR	6061582	RelationalExpression	regno < I386_NUM_GREGS + I386_NUM_FREGS		6061561	0		<			
ANR	6061583	Identifier	regno		6061561	0					
ANR	6061584	AdditiveExpression	I386_NUM_GREGS + I386_NUM_FREGS		6061561	1		+			
ANR	6061585	Identifier	I386_NUM_GREGS		6061561	0					
ANR	6061586	Identifier	I386_NUM_FREGS		6061561	1					
ANR	6061587	ReturnStatement	return NTO_REG_FLOAT ;	195:2:4944:4964	6061561	1	True				
ANR	6061588	Identifier	NTO_REG_FLOAT		6061561	0					
ANR	6061589	IfStatement	if ( regno < I386_SSE_NUM_REGS )		6061561	3					
ANR	6061590	Condition	regno < I386_SSE_NUM_REGS	196:5:4971:4995	6061561	0	True				
ANR	6061591	RelationalExpression	regno < I386_SSE_NUM_REGS		6061561	0		<			
ANR	6061592	Identifier	regno		6061561	0					
ANR	6061593	Identifier	I386_SSE_NUM_REGS		6061561	1					
ANR	6061594	ReturnStatement	return NTO_REG_FLOAT ;	197:2:5000:5020	6061561	1	True				
ANR	6061595	Identifier	NTO_REG_FLOAT		6061561	0					
ANR	6061596	ReturnStatement	return - 1 ;	199:1:5070:5079	6061561	4	True				
ANR	6061597	UnaryOperationExpression	- 1		6061561	0					
ANR	6061598	UnaryOperator	-		6061561	0					
ANR	6061599	PrimaryExpression	1		6061561	1					
ANR	6061600	ReturnType	int		6061561	1					
ANR	6061601	Identifier	i386nto_regset_id		6061561	2					
ANR	6061602	ParameterList	int regno		6061561	3					
ANR	6061603	Parameter	int regno	189:23:4788:4796	6061561	0	True				
ANR	6061604	ParameterType	int		6061561	0					
ANR	6061605	Identifier	regno		6061561	1					
ANR	6061606	CFGEntryNode	ENTRY		6061561		True				
ANR	6061607	CFGExitNode	EXIT		6061561		True				
ANR	6061608	Symbol	regno		6061561						
ANR	6061609	Symbol	NTO_REG_GENERAL		6061561						
ANR	6061610	Symbol	I386_SSE_NUM_REGS		6061561						
ANR	6061611	Symbol	NTO_REG_FLOAT		6061561						
ANR	6061612	Symbol	I386_NUM_GREGS		6061561						
ANR	6061613	Symbol	I386_NUM_FREGS		6061561						
ANR	6061614	Symbol	NTO_REG_END		6061561						
ANR	6061615	Function	i386nto_reg_offset	202:0:5084:5250							
ANR	6061616	FunctionDef	i386nto_reg_offset (int regnum)		6061615	0					
ANR	6061617	CompoundStatement		202:36:5120:5250	6061615	0					
ANR	6061618	IfStatement	if ( regnum >= 0 && regnum < ARRAY_SIZE ( i386nto_gregset_reg_offset ) )		6061615	0					
ANR	6061619	Condition	regnum >= 0 && regnum < ARRAY_SIZE ( i386nto_gregset_reg_offset )	203:5:5127:5189	6061615	0	True				
ANR	6061620	AndExpression	regnum >= 0 && regnum < ARRAY_SIZE ( i386nto_gregset_reg_offset )		6061615	0		&&			
ANR	6061621	RelationalExpression	regnum >= 0		6061615	0		>=			
ANR	6061622	Identifier	regnum		6061615	0					
ANR	6061623	PrimaryExpression	0		6061615	1					
ANR	6061624	RelationalExpression	regnum < ARRAY_SIZE ( i386nto_gregset_reg_offset )		6061615	1		<			
ANR	6061625	Identifier	regnum		6061615	0					
ANR	6061626	CallExpression	ARRAY_SIZE ( i386nto_gregset_reg_offset )		6061615	1					
ANR	6061627	Callee	ARRAY_SIZE		6061615	0					
ANR	6061628	Identifier	ARRAY_SIZE		6061615	0					
ANR	6061629	ArgumentList	i386nto_gregset_reg_offset		6061615	1					
ANR	6061630	Argument	i386nto_gregset_reg_offset		6061615	0					
ANR	6061631	Identifier	i386nto_gregset_reg_offset		6061615	0					
ANR	6061632	ReturnStatement	return i386nto_gregset_reg_offset [ regnum ] ;	204:2:5194:5235	6061615	1	True				
ANR	6061633	ArrayIndexing	i386nto_gregset_reg_offset [ regnum ]		6061615	0					
ANR	6061634	Identifier	i386nto_gregset_reg_offset		6061615	0					
ANR	6061635	Identifier	regnum		6061615	1					
ANR	6061636	ReturnStatement	return - 1 ;	206:1:5239:5248	6061615	1	True				
ANR	6061637	UnaryOperationExpression	- 1		6061615	0					
ANR	6061638	UnaryOperator	-		6061615	0					
ANR	6061639	PrimaryExpression	1		6061615	1					
ANR	6061640	ReturnType	int		6061615	1					
ANR	6061641	Identifier	i386nto_reg_offset		6061615	2					
ANR	6061642	ParameterList	int regnum		6061615	3					
ANR	6061643	Parameter	int regnum	202:24:5108:5117	6061615	0	True				
ANR	6061644	ParameterType	int		6061615	0					
ANR	6061645	Identifier	regnum		6061615	1					
ANR	6061646	CFGEntryNode	ENTRY		6061615		True				
ANR	6061647	CFGExitNode	EXIT		6061615		True				
ANR	6061648	Symbol	ARRAY_SIZE		6061615						
ANR	6061649	Symbol	* i386nto_gregset_reg_offset		6061615						
ANR	6061650	Symbol	* regnum		6061615						
ANR	6061651	Symbol	regnum		6061615						
ANR	6061652	Symbol	i386nto_gregset_reg_offset		6061615						
ANR	6061653	Function	i386nto_register_area	209:0:5253:7555							
ANR	6061654	FunctionDef	"i386nto_register_area (int regno , int regset , ut32 * off)"		6061653	0					
ANR	6061655	CompoundStatement		209:61:5314:7555	6061653	0					
ANR	6061656	ExpressionStatement	* off = 0	210:1:5317:5325	6061653	0	True				
ANR	6061657	AssignmentExpression	* off = 0		6061653	0		=			
ANR	6061658	UnaryOperationExpression	* off		6061653	0					
ANR	6061659	UnaryOperator	*		6061653	0					
ANR	6061660	Identifier	off		6061653	1					
ANR	6061661	PrimaryExpression	0		6061653	1					
ANR	6061662	IfStatement	if ( regset == NTO_REG_GENERAL )		6061653	1					
ANR	6061663	Condition	regset == NTO_REG_GENERAL	211:5:5332:5356	6061653	0	True				
ANR	6061664	EqualityExpression	regset == NTO_REG_GENERAL		6061653	0		==			
ANR	6061665	Identifier	regset		6061653	0					
ANR	6061666	Identifier	NTO_REG_GENERAL		6061653	1					
ANR	6061667	CompoundStatement		3:32:44:44	6061653	1					
ANR	6061668	IfStatement	if ( regno == - 1 )		6061653	0					
ANR	6061669	Condition	regno == - 1	212:6:5367:5377	6061653	0	True				
ANR	6061670	EqualityExpression	regno == - 1		6061653	0		==			
ANR	6061671	Identifier	regno		6061653	0					
ANR	6061672	UnaryOperationExpression	- 1		6061653	1					
ANR	6061673	UnaryOperator	-		6061653	0					
ANR	6061674	PrimaryExpression	1		6061653	1					
ANR	6061675	ReturnStatement	return NUM_GPREGS * 4 ;	213:3:5383:5404	6061653	1	True				
ANR	6061676	MultiplicativeExpression	NUM_GPREGS * 4		6061653	0		*			
ANR	6061677	Identifier	NUM_GPREGS		6061653	0					
ANR	6061678	PrimaryExpression	4		6061653	1					
ANR	6061679	ExpressionStatement	* off = i386nto_reg_offset ( regno )	215:2:5409:5442	6061653	1	True				
ANR	6061680	AssignmentExpression	* off = i386nto_reg_offset ( regno )		6061653	0		=			
ANR	6061681	UnaryOperationExpression	* off		6061653	0					
ANR	6061682	UnaryOperator	*		6061653	0					
ANR	6061683	Identifier	off		6061653	1					
ANR	6061684	CallExpression	i386nto_reg_offset ( regno )		6061653	1					
ANR	6061685	Callee	i386nto_reg_offset		6061653	0					
ANR	6061686	Identifier	i386nto_reg_offset		6061653	0					
ANR	6061687	ArgumentList	regno		6061653	1					
ANR	6061688	Argument	regno		6061653	0					
ANR	6061689	Identifier	regno		6061653	0					
ANR	6061690	IfStatement	if ( * off == - 1 )		6061653	2					
ANR	6061691	Condition	* off == - 1	216:6:5450:5459	6061653	0	True				
ANR	6061692	EqualityExpression	* off == - 1		6061653	0		==			
ANR	6061693	UnaryOperationExpression	* off		6061653	0					
ANR	6061694	UnaryOperator	*		6061653	0					
ANR	6061695	Identifier	off		6061653	1					
ANR	6061696	UnaryOperationExpression	- 1		6061653	1					
ANR	6061697	UnaryOperator	-		6061653	0					
ANR	6061698	PrimaryExpression	1		6061653	1					
ANR	6061699	ReturnStatement	return 0 ;	217:3:5465:5473	6061653	1	True				
ANR	6061700	PrimaryExpression	0		6061653	0					
ANR	6061701	ReturnStatement	return 4 ;	218:2:5477:5485	6061653	3	True				
ANR	6061702	PrimaryExpression	4		6061653	0					
ANR	6061703	ElseStatement	else		6061653	0					
ANR	6061704	IfStatement	if ( regset == NTO_REG_FLOAT )		6061653	0					
ANR	6061705	Condition	regset == NTO_REG_FLOAT	219:12:5499:5521	6061653	0	True				
ANR	6061706	EqualityExpression	regset == NTO_REG_FLOAT		6061653	0		==			
ANR	6061707	Identifier	regset		6061653	0					
ANR	6061708	Identifier	NTO_REG_FLOAT		6061653	1					
ANR	6061709	CompoundStatement		17:2:567:637	6061653	1					
ANR	6061710	IdentifierDeclStatement	"ut32 off_adjust , regsize , regset_size , regno_base ;"	220:2:5528:5577	6061653	0	True				
ANR	6061711	IdentifierDecl	off_adjust		6061653	0					
ANR	6061712	IdentifierDeclType	ut32		6061653	0					
ANR	6061713	Identifier	off_adjust		6061653	1					
ANR	6061714	IdentifierDecl	regsize		6061653	1					
ANR	6061715	IdentifierDeclType	ut32		6061653	0					
ANR	6061716	Identifier	regsize		6061653	1					
ANR	6061717	IdentifierDecl	regset_size		6061653	2					
ANR	6061718	IdentifierDeclType	ut32		6061653	0					
ANR	6061719	Identifier	regset_size		6061653	1					
ANR	6061720	IdentifierDecl	regno_base		6061653	3					
ANR	6061721	IdentifierDeclType	ut32		6061653	0					
ANR	6061722	Identifier	regno_base		6061653	1					
ANR	6061723	IdentifierDeclStatement	int first_four = ( regno >= I387_FCTRL_REGNUM && regno <= I387_FISEG_REGNUM ) ;	222:2:5652:5727	6061653	1	True				
ANR	6061724	IdentifierDecl	first_four = ( regno >= I387_FCTRL_REGNUM && regno <= I387_FISEG_REGNUM )		6061653	0					
ANR	6061725	IdentifierDeclType	int		6061653	0					
ANR	6061726	Identifier	first_four		6061653	1					
ANR	6061727	AssignmentExpression	first_four = ( regno >= I387_FCTRL_REGNUM && regno <= I387_FISEG_REGNUM )		6061653	2		=			
ANR	6061728	Identifier	first_four		6061653	0					
ANR	6061729	AndExpression	regno >= I387_FCTRL_REGNUM && regno <= I387_FISEG_REGNUM		6061653	1		&&			
ANR	6061730	RelationalExpression	regno >= I387_FCTRL_REGNUM		6061653	0		>=			
ANR	6061731	Identifier	regno		6061653	0					
ANR	6061732	Identifier	I387_FCTRL_REGNUM		6061653	1					
ANR	6061733	RelationalExpression	regno <= I387_FISEG_REGNUM		6061653	1		<=			
ANR	6061734	Identifier	regno		6061653	0					
ANR	6061735	Identifier	I387_FISEG_REGNUM		6061653	1					
ANR	6061736	IdentifierDeclStatement	int second_four = ( regno > I387_FISEG_REGNUM && regno <= I387_FOP_REGNUM ) ;	223:2:5731:5804	6061653	2	True				
ANR	6061737	IdentifierDecl	second_four = ( regno > I387_FISEG_REGNUM && regno <= I387_FOP_REGNUM )		6061653	0					
ANR	6061738	IdentifierDeclType	int		6061653	0					
ANR	6061739	Identifier	second_four		6061653	1					
ANR	6061740	AssignmentExpression	second_four = ( regno > I387_FISEG_REGNUM && regno <= I387_FOP_REGNUM )		6061653	2		=			
ANR	6061741	Identifier	second_four		6061653	0					
ANR	6061742	AndExpression	regno > I387_FISEG_REGNUM && regno <= I387_FOP_REGNUM		6061653	1		&&			
ANR	6061743	RelationalExpression	regno > I387_FISEG_REGNUM		6061653	0		>			
ANR	6061744	Identifier	regno		6061653	0					
ANR	6061745	Identifier	I387_FISEG_REGNUM		6061653	1					
ANR	6061746	RelationalExpression	regno <= I387_FOP_REGNUM		6061653	1		<=			
ANR	6061747	Identifier	regno		6061653	0					
ANR	6061748	Identifier	I387_FOP_REGNUM		6061653	1					
ANR	6061749	IdentifierDeclStatement	int st_reg = ( regno >= I387_ST0_REGNUM && regno < I387_ST0_REGNUM + 8 ) ;	224:2:5808:5878	6061653	3	True				
ANR	6061750	IdentifierDecl	st_reg = ( regno >= I387_ST0_REGNUM && regno < I387_ST0_REGNUM + 8 )		6061653	0					
ANR	6061751	IdentifierDeclType	int		6061653	0					
ANR	6061752	Identifier	st_reg		6061653	1					
ANR	6061753	AssignmentExpression	st_reg = ( regno >= I387_ST0_REGNUM && regno < I387_ST0_REGNUM + 8 )		6061653	2		=			
ANR	6061754	Identifier	st_reg		6061653	0					
ANR	6061755	AndExpression	regno >= I387_ST0_REGNUM && regno < I387_ST0_REGNUM + 8		6061653	1		&&			
ANR	6061756	RelationalExpression	regno >= I387_ST0_REGNUM		6061653	0		>=			
ANR	6061757	Identifier	regno		6061653	0					
ANR	6061758	Identifier	I387_ST0_REGNUM		6061653	1					
ANR	6061759	RelationalExpression	regno < I387_ST0_REGNUM + 8		6061653	1		<			
ANR	6061760	Identifier	regno		6061653	0					
ANR	6061761	AdditiveExpression	I387_ST0_REGNUM + 8		6061653	1		+			
ANR	6061762	Identifier	I387_ST0_REGNUM		6061653	0					
ANR	6061763	PrimaryExpression	8		6061653	1					
ANR	6061764	IdentifierDeclStatement	int xmm_reg = ( regno >= I387_XMM0_REGNUM && regno < I387_MXCSR_REGNUM ) ;	225:2:5882:5952	6061653	4	True				
ANR	6061765	IdentifierDecl	xmm_reg = ( regno >= I387_XMM0_REGNUM && regno < I387_MXCSR_REGNUM )		6061653	0					
ANR	6061766	IdentifierDeclType	int		6061653	0					
ANR	6061767	Identifier	xmm_reg		6061653	1					
ANR	6061768	AssignmentExpression	xmm_reg = ( regno >= I387_XMM0_REGNUM && regno < I387_MXCSR_REGNUM )		6061653	2		=			
ANR	6061769	Identifier	xmm_reg		6061653	0					
ANR	6061770	AndExpression	regno >= I387_XMM0_REGNUM && regno < I387_MXCSR_REGNUM		6061653	1		&&			
ANR	6061771	RelationalExpression	regno >= I387_XMM0_REGNUM		6061653	0		>=			
ANR	6061772	Identifier	regno		6061653	0					
ANR	6061773	Identifier	I387_XMM0_REGNUM		6061653	1					
ANR	6061774	RelationalExpression	regno < I387_MXCSR_REGNUM		6061653	1		<			
ANR	6061775	Identifier	regno		6061653	0					
ANR	6061776	Identifier	I387_MXCSR_REGNUM		6061653	1					
ANR	6061777	IfStatement	if ( nto_cpuinfo_valid && nto_cpuinfo_flags | X86_CPU_FXSR )		6061653	5					
ANR	6061778	Condition	nto_cpuinfo_valid && nto_cpuinfo_flags | X86_CPU_FXSR	227:10:5970:6022	6061653	0	True				
ANR	6061779	AndExpression	nto_cpuinfo_valid && nto_cpuinfo_flags | X86_CPU_FXSR		6061653	0		&&			
ANR	6061780	Identifier	nto_cpuinfo_valid		6061653	0					
ANR	6061781	InclusiveOrExpression	nto_cpuinfo_flags | X86_CPU_FXSR		6061653	1		|			
ANR	6061782	Identifier	nto_cpuinfo_flags		6061653	0					
ANR	6061783	Identifier	X86_CPU_FXSR		6061653	1					
ANR	6061784	CompoundStatement		20:3:713:713	6061653	1					
ANR	6061785	ExpressionStatement	regset_size = 512	230:2:6039:6056	6061653	0	True				
ANR	6061786	AssignmentExpression	regset_size = 512		6061653	0		=			
ANR	6061787	Identifier	regset_size		6061653	0					
ANR	6061788	PrimaryExpression	512		6061653	1					
ANR	6061789	IfStatement	if ( first_four )		6061653	1					
ANR	6061790	Condition	first_four	232:6:6096:6105	6061653	0	True				
ANR	6061791	Identifier	first_four		6061653	0					
ANR	6061792	CompoundStatement		24:18:793:793	6061653	1					
ANR	6061793	ExpressionStatement	regsize = 2	235:3:6195:6206	6061653	0	True				
ANR	6061794	AssignmentExpression	regsize = 2		6061653	0		=			
ANR	6061795	Identifier	regsize		6061653	0					
ANR	6061796	PrimaryExpression	2		6061653	1					
ANR	6061797	ExpressionStatement	off_adjust = 0	236:3:6234:6248	6061653	1	True				
ANR	6061798	AssignmentExpression	off_adjust = 0		6061653	0		=			
ANR	6061799	Identifier	off_adjust		6061653	0					
ANR	6061800	PrimaryExpression	0		6061653	1					
ANR	6061801	ExpressionStatement	regno_base = I387_FCTRL_REGNUM	237:3:6253:6283	6061653	2	True				
ANR	6061802	AssignmentExpression	regno_base = I387_FCTRL_REGNUM		6061653	0		=			
ANR	6061803	Identifier	regno_base		6061653	0					
ANR	6061804	Identifier	I387_FCTRL_REGNUM		6061653	1					
ANR	6061805	ElseStatement	else		6061653	0					
ANR	6061806	IfStatement	if ( second_four )		6061653	0					
ANR	6061807	Condition	second_four	238:13:6298:6308	6061653	0	True				
ANR	6061808	Identifier	second_four		6061653	0					
ANR	6061809	CompoundStatement		30:26:996:996	6061653	1					
ANR	6061810	ExpressionStatement	regsize = 4	240:3:6368:6379	6061653	0	True				
ANR	6061811	AssignmentExpression	regsize = 4		6061653	0		=			
ANR	6061812	Identifier	regsize		6061653	0					
ANR	6061813	PrimaryExpression	4		6061653	1					
ANR	6061814	ExpressionStatement	off_adjust = 8	241:3:6384:6398	6061653	1	True				
ANR	6061815	AssignmentExpression	off_adjust = 8		6061653	0		=			
ANR	6061816	Identifier	off_adjust		6061653	0					
ANR	6061817	PrimaryExpression	8		6061653	1					
ANR	6061818	ExpressionStatement	regno_base = I387_FISEG_REGNUM + 1	242:3:6403:6437	6061653	2	True				
ANR	6061819	AssignmentExpression	regno_base = I387_FISEG_REGNUM + 1		6061653	0		=			
ANR	6061820	Identifier	regno_base		6061653	0					
ANR	6061821	AdditiveExpression	I387_FISEG_REGNUM + 1		6061653	1		+			
ANR	6061822	Identifier	I387_FISEG_REGNUM		6061653	0					
ANR	6061823	PrimaryExpression	1		6061653	1					
ANR	6061824	ElseStatement	else		6061653	0					
ANR	6061825	IfStatement	if ( st_reg )		6061653	0					
ANR	6061826	Condition	st_reg	243:13:6452:6457	6061653	0	True				
ANR	6061827	Identifier	st_reg		6061653	0					
ANR	6061828	CompoundStatement		35:21:1145:1145	6061653	1					
ANR	6061829	ExpressionStatement	regsize = 16	245:3:6489:6501	6061653	0	True				
ANR	6061830	AssignmentExpression	regsize = 16		6061653	0		=			
ANR	6061831	Identifier	regsize		6061653	0					
ANR	6061832	PrimaryExpression	16		6061653	1					
ANR	6061833	ExpressionStatement	off_adjust = 32	246:3:6506:6521	6061653	1	True				
ANR	6061834	AssignmentExpression	off_adjust = 32		6061653	0		=			
ANR	6061835	Identifier	off_adjust		6061653	0					
ANR	6061836	PrimaryExpression	32		6061653	1					
ANR	6061837	ExpressionStatement	regno_base = I387_ST0_REGNUM	247:3:6526:6554	6061653	2	True				
ANR	6061838	AssignmentExpression	regno_base = I387_ST0_REGNUM		6061653	0		=			
ANR	6061839	Identifier	regno_base		6061653	0					
ANR	6061840	Identifier	I387_ST0_REGNUM		6061653	1					
ANR	6061841	ElseStatement	else		6061653	0					
ANR	6061842	IfStatement	if ( xmm_reg )		6061653	0					
ANR	6061843	Condition	xmm_reg	248:13:6569:6575	6061653	0	True				
ANR	6061844	Identifier	xmm_reg		6061653	0					
ANR	6061845	CompoundStatement		40:22:1263:1263	6061653	1					
ANR	6061846	ExpressionStatement	regsize = 16	250:3:6608:6620	6061653	0	True				
ANR	6061847	AssignmentExpression	regsize = 16		6061653	0		=			
ANR	6061848	Identifier	regsize		6061653	0					
ANR	6061849	PrimaryExpression	16		6061653	1					
ANR	6061850	ExpressionStatement	off_adjust = 160	251:3:6625:6641	6061653	1	True				
ANR	6061851	AssignmentExpression	off_adjust = 160		6061653	0		=			
ANR	6061852	Identifier	off_adjust		6061653	0					
ANR	6061853	PrimaryExpression	160		6061653	1					
ANR	6061854	ExpressionStatement	regno_base = I387_XMM0_REGNUM	252:3:6646:6675	6061653	2	True				
ANR	6061855	AssignmentExpression	regno_base = I387_XMM0_REGNUM		6061653	0		=			
ANR	6061856	Identifier	regno_base		6061653	0					
ANR	6061857	Identifier	I387_XMM0_REGNUM		6061653	1					
ANR	6061858	ElseStatement	else		6061653	0					
ANR	6061859	IfStatement	if ( regno == I387_MXCSR_REGNUM )		6061653	0					
ANR	6061860	Condition	regno == I387_MXCSR_REGNUM	253:13:6690:6715	6061653	0	True				
ANR	6061861	EqualityExpression	regno == I387_MXCSR_REGNUM		6061653	0		==			
ANR	6061862	Identifier	regno		6061653	0					
ANR	6061863	Identifier	I387_MXCSR_REGNUM		6061653	1					
ANR	6061864	CompoundStatement		45:41:1403:1403	6061653	1					
ANR	6061865	ExpressionStatement	regsize = 4	254:3:6723:6734	6061653	0	True				
ANR	6061866	AssignmentExpression	regsize = 4		6061653	0		=			
ANR	6061867	Identifier	regsize		6061653	0					
ANR	6061868	PrimaryExpression	4		6061653	1					
ANR	6061869	ExpressionStatement	off_adjust = 24	255:3:6739:6754	6061653	1	True				
ANR	6061870	AssignmentExpression	off_adjust = 24		6061653	0		=			
ANR	6061871	Identifier	off_adjust		6061653	0					
ANR	6061872	PrimaryExpression	24		6061653	1					
ANR	6061873	ExpressionStatement	regno_base = I387_MXCSR_REGNUM	256:3:6759:6789	6061653	2	True				
ANR	6061874	AssignmentExpression	regno_base = I387_MXCSR_REGNUM		6061653	0		=			
ANR	6061875	Identifier	regno_base		6061653	0					
ANR	6061876	Identifier	I387_MXCSR_REGNUM		6061653	1					
ANR	6061877	ElseStatement	else		6061653	0					
ANR	6061878	CompoundStatement		49:9:1485:1485	6061653	0					
ANR	6061879	ExpressionStatement	off_adjust = 0	259:3:6829:6843	6061653	0	True				
ANR	6061880	AssignmentExpression	off_adjust = 0		6061653	0		=			
ANR	6061881	Identifier	off_adjust		6061653	0					
ANR	6061882	PrimaryExpression	0		6061653	1					
ANR	6061883	ExpressionStatement	regno_base = 0	260:3:6848:6862	6061653	1	True				
ANR	6061884	AssignmentExpression	regno_base = 0		6061653	0		=			
ANR	6061885	Identifier	regno_base		6061653	0					
ANR	6061886	PrimaryExpression	0		6061653	1					
ANR	6061887	ExpressionStatement	regsize = regset_size	261:3:6867:6888	6061653	2	True				
ANR	6061888	AssignmentExpression	regsize = regset_size		6061653	0		=			
ANR	6061889	Identifier	regsize		6061653	0					
ANR	6061890	Identifier	regset_size		6061653	1					
ANR	6061891	ElseStatement	else		6061653	0					
ANR	6061892	CompoundStatement		58:1:1600:1600	6061653	0					
ANR	6061893	ExpressionStatement	regset_size = 108	267:3:6920:6937	6061653	0	True				
ANR	6061894	AssignmentExpression	regset_size = 108		6061653	0		=			
ANR	6061895	Identifier	regset_size		6061653	0					
ANR	6061896	PrimaryExpression	108		6061653	1					
ANR	6061897	IfStatement	if ( first_four || second_four )		6061653	1					
ANR	6061898	Condition	first_four || second_four	269:7:6978:7002	6061653	0	True				
ANR	6061899	OrExpression	first_four || second_four		6061653	0		||			
ANR	6061900	Identifier	first_four		6061653	0					
ANR	6061901	Identifier	second_four		6061653	1					
ANR	6061902	CompoundStatement		62:5:1695:1695	6061653	1					
ANR	6061903	ExpressionStatement	regsize = 4	272:7:7075:7086	6061653	0	True				
ANR	6061904	AssignmentExpression	regsize = 4		6061653	0		=			
ANR	6061905	Identifier	regsize		6061653	0					
ANR	6061906	PrimaryExpression	4		6061653	1					
ANR	6061907	ExpressionStatement	off_adjust = 0	273:7:7095:7109	6061653	1	True				
ANR	6061908	AssignmentExpression	off_adjust = 0		6061653	0		=			
ANR	6061909	Identifier	off_adjust		6061653	0					
ANR	6061910	PrimaryExpression	0		6061653	1					
ANR	6061911	ExpressionStatement	regno_base = I387_FCTRL_REGNUM	274:7:7118:7148	6061653	2	True				
ANR	6061912	AssignmentExpression	regno_base = I387_FCTRL_REGNUM		6061653	0		=			
ANR	6061913	Identifier	regno_base		6061653	0					
ANR	6061914	Identifier	I387_FCTRL_REGNUM		6061653	1					
ANR	6061915	ElseStatement	else		6061653	0					
ANR	6061916	IfStatement	if ( st_reg )		6061653	0					
ANR	6061917	Condition	st_reg	276:12:7169:7174	6061653	0	True				
ANR	6061918	Identifier	st_reg		6061653	0					
ANR	6061919	CompoundStatement		69:5:1867:1867	6061653	1					
ANR	6061920	ExpressionStatement	regsize = 10	279:7:7226:7238	6061653	0	True				
ANR	6061921	AssignmentExpression	regsize = 10		6061653	0		=			
ANR	6061922	Identifier	regsize		6061653	0					
ANR	6061923	PrimaryExpression	10		6061653	1					
ANR	6061924	ExpressionStatement	off_adjust = 7 * 4	280:7:7247:7265	6061653	1	True				
ANR	6061925	AssignmentExpression	off_adjust = 7 * 4		6061653	0		=			
ANR	6061926	Identifier	off_adjust		6061653	0					
ANR	6061927	MultiplicativeExpression	7 * 4		6061653	1		*			
ANR	6061928	PrimaryExpression	7		6061653	0					
ANR	6061929	PrimaryExpression	4		6061653	1					
ANR	6061930	ExpressionStatement	regno_base = I387_ST0_REGNUM	281:7:7274:7302	6061653	2	True				
ANR	6061931	AssignmentExpression	regno_base = I387_ST0_REGNUM		6061653	0		=			
ANR	6061932	Identifier	regno_base		6061653	0					
ANR	6061933	Identifier	I387_ST0_REGNUM		6061653	1					
ANR	6061934	ElseStatement	else		6061653	0					
ANR	6061935	CompoundStatement		76:5:2009:2009	6061653	0					
ANR	6061936	ExpressionStatement	off_adjust = 0	286:7:7361:7375	6061653	0	True				
ANR	6061937	AssignmentExpression	off_adjust = 0		6061653	0		=			
ANR	6061938	Identifier	off_adjust		6061653	0					
ANR	6061939	PrimaryExpression	0		6061653	1					
ANR	6061940	ExpressionStatement	regno_base = 0	287:7:7384:7398	6061653	1	True				
ANR	6061941	AssignmentExpression	regno_base = 0		6061653	0		=			
ANR	6061942	Identifier	regno_base		6061653	0					
ANR	6061943	PrimaryExpression	0		6061653	1					
ANR	6061944	ExpressionStatement	regsize = regset_size	288:7:7407:7428	6061653	2	True				
ANR	6061945	AssignmentExpression	regsize = regset_size		6061653	0		=			
ANR	6061946	Identifier	regsize		6061653	0					
ANR	6061947	Identifier	regset_size		6061653	1					
ANR	6061948	ExpressionStatement	* off = ( regno != - 1 ) ? off_adjust + ( regno - regno_base ) * regsize : 0	293:2:7450:7520	6061653	6	True				
ANR	6061949	AssignmentExpression	* off = ( regno != - 1 ) ? off_adjust + ( regno - regno_base ) * regsize : 0		6061653	0		=			
ANR	6061950	UnaryOperationExpression	* off		6061653	0					
ANR	6061951	UnaryOperator	*		6061653	0					
ANR	6061952	Identifier	off		6061653	1					
ANR	6061953	ConditionalExpression	( regno != - 1 ) ? off_adjust + ( regno - regno_base ) * regsize : 0		6061653	1					
ANR	6061954	Condition	regno != - 1		6061653	0					
ANR	6061955	EqualityExpression	regno != - 1		6061653	0		!=			
ANR	6061956	Identifier	regno		6061653	0					
ANR	6061957	UnaryOperationExpression	- 1		6061653	1					
ANR	6061958	UnaryOperator	-		6061653	0					
ANR	6061959	PrimaryExpression	1		6061653	1					
ANR	6061960	AdditiveExpression	off_adjust + ( regno - regno_base ) * regsize		6061653	1		+			
ANR	6061961	Identifier	off_adjust		6061653	0					
ANR	6061962	MultiplicativeExpression	( regno - regno_base ) * regsize		6061653	1		*			
ANR	6061963	AdditiveExpression	regno - regno_base		6061653	0		-			
ANR	6061964	Identifier	regno		6061653	0					
ANR	6061965	Identifier	regno_base		6061653	1					
ANR	6061966	Identifier	regsize		6061653	1					
ANR	6061967	PrimaryExpression	0		6061653	2					
ANR	6061968	ReturnStatement	return regsize ;	294:2:7524:7538	6061653	7	True				
ANR	6061969	Identifier	regsize		6061653	0					
ANR	6061970	ReturnStatement	return - 1 ;	296:1:7544:7553	6061653	2	True				
ANR	6061971	UnaryOperationExpression	- 1		6061653	0					
ANR	6061972	UnaryOperator	-		6061653	0					
ANR	6061973	PrimaryExpression	1		6061653	1					
ANR	6061974	ReturnType	int		6061653	1					
ANR	6061975	Identifier	i386nto_register_area		6061653	2					
ANR	6061976	ParameterList	"int regno , int regset , ut32 * off"		6061653	3					
ANR	6061977	Parameter	int regno	209:27:5280:5288	6061653	0	True				
ANR	6061978	ParameterType	int		6061653	0					
ANR	6061979	Identifier	regno		6061653	1					
ANR	6061980	Parameter	int regset	209:38:5291:5300	6061653	1	True				
ANR	6061981	ParameterType	int		6061653	0					
ANR	6061982	Identifier	regset		6061653	1					
ANR	6061983	Parameter	ut32 * off	209:50:5303:5311	6061653	2	True				
ANR	6061984	ParameterType	ut32 *		6061653	0					
ANR	6061985	Identifier	off		6061653	1					
ANR	6061986	CFGEntryNode	ENTRY		6061653		True				
ANR	6061987	CFGExitNode	EXIT		6061653		True				
ANR	6061988	Symbol	I387_ST0_REGNUM		6061653						
ANR	6061989	Symbol	regset		6061653						
ANR	6061990	Symbol	I387_FOP_REGNUM		6061653						
ANR	6061991	Symbol	NTO_REG_GENERAL		6061653						
ANR	6061992	Symbol	I387_XMM0_REGNUM		6061653						
ANR	6061993	Symbol	regsize		6061653						
ANR	6061994	Symbol	X86_CPU_FXSR		6061653						
ANR	6061995	Symbol	* off		6061653						
ANR	6061996	Symbol	second_four		6061653						
ANR	6061997	Symbol	regno		6061653						
ANR	6061998	Symbol	off_adjust		6061653						
ANR	6061999	Symbol	NTO_REG_FLOAT		6061653						
ANR	6062000	Symbol	nto_cpuinfo_flags		6061653						
ANR	6062001	Symbol	regset_size		6061653						
ANR	6062002	Symbol	I387_FCTRL_REGNUM		6061653						
ANR	6062003	Symbol	off		6061653						
ANR	6062004	Symbol	first_four		6061653						
ANR	6062005	Symbol	I387_MXCSR_REGNUM		6061653						
ANR	6062006	Symbol	xmm_reg		6061653						
ANR	6062007	Symbol	regno_base		6061653						
ANR	6062008	Symbol	nto_cpuinfo_valid		6061653						
ANR	6062009	Symbol	NUM_GPREGS		6061653						
ANR	6062010	Symbol	st_reg		6061653						
ANR	6062011	Symbol	I387_FISEG_REGNUM		6061653						
ANR	6062012	Symbol	i386nto_reg_offset		6061653						
ANR	6062013	Function	ptid_build	299:0:7558:7662							
ANR	6062014	FunctionDef	"ptid_build (st32 pid , st64 tid)"		6062013	0					
ANR	6062015	CompoundStatement		299:39:7597:7662	6062013	0					
ANR	6062016	IdentifierDeclStatement	ptid_t ptid ;	300:1:7600:7611	6062013	0	True				
ANR	6062017	IdentifierDecl	ptid		6062013	0					
ANR	6062018	IdentifierDeclType	ptid_t		6062013	0					
ANR	6062019	Identifier	ptid		6062013	1					
ANR	6062020	ExpressionStatement	ptid . pid = pid	301:1:7614:7628	6062013	1	True				
ANR	6062021	AssignmentExpression	ptid . pid = pid		6062013	0		=			
ANR	6062022	MemberAccess	ptid . pid		6062013	0					
ANR	6062023	Identifier	ptid		6062013	0					
ANR	6062024	Identifier	pid		6062013	1					
ANR	6062025	Identifier	pid		6062013	1					
ANR	6062026	ExpressionStatement	ptid . tid = tid	302:1:7631:7645	6062013	2	True				
ANR	6062027	AssignmentExpression	ptid . tid = tid		6062013	0		=			
ANR	6062028	MemberAccess	ptid . tid		6062013	0					
ANR	6062029	Identifier	ptid		6062013	0					
ANR	6062030	Identifier	tid		6062013	1					
ANR	6062031	Identifier	tid		6062013	1					
ANR	6062032	ReturnStatement	return ptid ;	304:1:7649:7660	6062013	3	True				
ANR	6062033	Identifier	ptid		6062013	0					
ANR	6062034	ReturnType	ptid_t		6062013	1					
ANR	6062035	Identifier	ptid_build		6062013	2					
ANR	6062036	ParameterList	"st32 pid , st64 tid"		6062013	3					
ANR	6062037	Parameter	st32 pid	299:19:7577:7584	6062013	0	True				
ANR	6062038	ParameterType	st32		6062013	0					
ANR	6062039	Identifier	pid		6062013	1					
ANR	6062040	Parameter	st64 tid	299:29:7587:7594	6062013	1	True				
ANR	6062041	ParameterType	st64		6062013	0					
ANR	6062042	Identifier	tid		6062013	1					
ANR	6062043	CFGEntryNode	ENTRY		6062013		True				
ANR	6062044	CFGExitNode	EXIT		6062013		True				
ANR	6062045	Symbol	ptid . pid		6062013						
ANR	6062046	Symbol	pid		6062013						
ANR	6062047	Symbol	ptid		6062013						
ANR	6062048	Symbol	ptid . tid		6062013						
ANR	6062049	Symbol	tid		6062013						
ANR	6062050	Function	ptid_equal	307:0:7665:7769							
ANR	6062051	FunctionDef	"ptid_equal (ptid_t ptid1 , ptid_t ptid2)"		6062050	0					
ANR	6062052	CompoundStatement		307:44:7709:7769	6062050	0					
ANR	6062053	ReturnStatement	return ptid1 . pid == ptid2 . pid && ptid1 . tid == ptid2 . tid ;	308:1:7712:7767	6062050	0	True				
ANR	6062054	AndExpression	ptid1 . pid == ptid2 . pid && ptid1 . tid == ptid2 . tid		6062050	0		&&			
ANR	6062055	EqualityExpression	ptid1 . pid == ptid2 . pid		6062050	0		==			
ANR	6062056	MemberAccess	ptid1 . pid		6062050	0					
ANR	6062057	Identifier	ptid1		6062050	0					
ANR	6062058	Identifier	pid		6062050	1					
ANR	6062059	MemberAccess	ptid2 . pid		6062050	1					
ANR	6062060	Identifier	ptid2		6062050	0					
ANR	6062061	Identifier	pid		6062050	1					
ANR	6062062	EqualityExpression	ptid1 . tid == ptid2 . tid		6062050	1		==			
ANR	6062063	MemberAccess	ptid1 . tid		6062050	0					
ANR	6062064	Identifier	ptid1		6062050	0					
ANR	6062065	Identifier	tid		6062050	1					
ANR	6062066	MemberAccess	ptid2 . tid		6062050	1					
ANR	6062067	Identifier	ptid2		6062050	0					
ANR	6062068	Identifier	tid		6062050	1					
ANR	6062069	ReturnType	int		6062050	1					
ANR	6062070	Identifier	ptid_equal		6062050	2					
ANR	6062071	ParameterList	"ptid_t ptid1 , ptid_t ptid2"		6062050	3					
ANR	6062072	Parameter	ptid_t ptid1	307:16:7681:7692	6062050	0	True				
ANR	6062073	ParameterType	ptid_t		6062050	0					
ANR	6062074	Identifier	ptid1		6062050	1					
ANR	6062075	Parameter	ptid_t ptid2	307:30:7695:7706	6062050	1	True				
ANR	6062076	ParameterType	ptid_t		6062050	0					
ANR	6062077	Identifier	ptid2		6062050	1					
ANR	6062078	CFGEntryNode	ENTRY		6062050		True				
ANR	6062079	CFGExitNode	EXIT		6062050		True				
ANR	6062080	Symbol	ptid1		6062050						
ANR	6062081	Symbol	ptid2		6062050						
ANR	6062082	Symbol	ptid2 . tid		6062050						
ANR	6062083	Symbol	ptid1 . pid		6062050						
ANR	6062084	Symbol	ptid2 . pid		6062050						
ANR	6062085	Symbol	ptid1 . tid		6062050						
