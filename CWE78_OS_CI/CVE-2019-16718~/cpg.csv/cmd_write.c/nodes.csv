command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1053071	File	data/converged/CVE-2019-16718~_radare2/cmd_write.c								
ANR	1053072	DeclStmt									
ANR	1053073	Decl							const char	const char * [ ]	help_msg_w
ANR	1053074	DeclStmt									
ANR	1053075	Decl							const char	const char * [ ]	help_msg_wa
ANR	1053076	DeclStmt									
ANR	1053077	Decl							const char	const char * [ ]	help_msg_wA
ANR	1053078	DeclStmt									
ANR	1053079	Decl							const char	const char * [ ]	help_msg_wc
ANR	1053080	DeclStmt									
ANR	1053081	Decl							const char	const char * [ ]	help_msg_we
ANR	1053082	DeclStmt									
ANR	1053083	Decl							const char	const char * [ ]	help_msg_wo
ANR	1053084	DeclStmt									
ANR	1053085	Decl							const char	const char * [ ]	help_msg_wop
ANR	1053086	DeclStmt									
ANR	1053087	Decl							const char	const char * [ ]	help_msg_wp
ANR	1053088	DeclStmt									
ANR	1053089	Decl							const char	const char * [ ]	help_msg_wt
ANR	1053090	DeclStmt									
ANR	1053091	Decl							const char	const char * [ ]	help_msg_wf
ANR	1053092	DeclStmt									
ANR	1053093	Decl							const char	const char * [ ]	help_msg_wv
ANR	1053094	DeclStmt									
ANR	1053095	Decl							const char	const char * [ ]	help_msg_wx
ANR	1053096	Function	cmd_write_init	169:0:6830:7257							
ANR	1053097	FunctionDef	cmd_write_init (RCore * core)		1053096	0					
ANR	1053098	CompoundStatement		169:40:6870:7257	1053096	0					
ANR	1053099	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , w )"	170:1:6873:6904	1053096	0	True				
ANR	1053100	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , w )"		1053096	0					
ANR	1053101	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053102	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053103	ArgumentList	core		1053096	1					
ANR	1053104	Argument	core		1053096	0					
ANR	1053105	Identifier	core		1053096	0					
ANR	1053106	Argument	w		1053096	1					
ANR	1053107	Identifier	w		1053096	0					
ANR	1053108	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wa )"	171:1:6907:6939	1053096	1	True				
ANR	1053109	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wa )"		1053096	0					
ANR	1053110	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053111	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053112	ArgumentList	core		1053096	1					
ANR	1053113	Argument	core		1053096	0					
ANR	1053114	Identifier	core		1053096	0					
ANR	1053115	Argument	wa		1053096	1					
ANR	1053116	Identifier	wa		1053096	0					
ANR	1053117	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wA )"	172:1:6942:6974	1053096	2	True				
ANR	1053118	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wA )"		1053096	0					
ANR	1053119	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053120	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053121	ArgumentList	core		1053096	1					
ANR	1053122	Argument	core		1053096	0					
ANR	1053123	Identifier	core		1053096	0					
ANR	1053124	Argument	wA		1053096	1					
ANR	1053125	Identifier	wA		1053096	0					
ANR	1053126	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wc )"	173:1:6977:7009	1053096	3	True				
ANR	1053127	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wc )"		1053096	0					
ANR	1053128	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053129	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053130	ArgumentList	core		1053096	1					
ANR	1053131	Argument	core		1053096	0					
ANR	1053132	Identifier	core		1053096	0					
ANR	1053133	Argument	wc		1053096	1					
ANR	1053134	Identifier	wc		1053096	0					
ANR	1053135	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , we )"	174:1:7012:7044	1053096	4	True				
ANR	1053136	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , we )"		1053096	0					
ANR	1053137	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053138	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053139	ArgumentList	core		1053096	1					
ANR	1053140	Argument	core		1053096	0					
ANR	1053141	Identifier	core		1053096	0					
ANR	1053142	Argument	we		1053096	1					
ANR	1053143	Identifier	we		1053096	0					
ANR	1053144	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wo )"	175:1:7047:7079	1053096	5	True				
ANR	1053145	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wo )"		1053096	0					
ANR	1053146	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053147	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053148	ArgumentList	core		1053096	1					
ANR	1053149	Argument	core		1053096	0					
ANR	1053150	Identifier	core		1053096	0					
ANR	1053151	Argument	wo		1053096	1					
ANR	1053152	Identifier	wo		1053096	0					
ANR	1053153	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wop )"	176:1:7082:7115	1053096	6	True				
ANR	1053154	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wop )"		1053096	0					
ANR	1053155	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053156	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053157	ArgumentList	core		1053096	1					
ANR	1053158	Argument	core		1053096	0					
ANR	1053159	Identifier	core		1053096	0					
ANR	1053160	Argument	wop		1053096	1					
ANR	1053161	Identifier	wop		1053096	0					
ANR	1053162	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wp )"	177:1:7118:7150	1053096	7	True				
ANR	1053163	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wp )"		1053096	0					
ANR	1053164	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053165	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053166	ArgumentList	core		1053096	1					
ANR	1053167	Argument	core		1053096	0					
ANR	1053168	Identifier	core		1053096	0					
ANR	1053169	Argument	wp		1053096	1					
ANR	1053170	Identifier	wp		1053096	0					
ANR	1053171	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wt )"	178:1:7153:7185	1053096	8	True				
ANR	1053172	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wt )"		1053096	0					
ANR	1053173	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053174	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053175	ArgumentList	core		1053096	1					
ANR	1053176	Argument	core		1053096	0					
ANR	1053177	Identifier	core		1053096	0					
ANR	1053178	Argument	wt		1053096	1					
ANR	1053179	Identifier	wt		1053096	0					
ANR	1053180	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wv )"	179:1:7188:7220	1053096	9	True				
ANR	1053181	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wv )"		1053096	0					
ANR	1053182	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053183	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053184	ArgumentList	core		1053096	1					
ANR	1053185	Argument	core		1053096	0					
ANR	1053186	Identifier	core		1053096	0					
ANR	1053187	Argument	wv		1053096	1					
ANR	1053188	Identifier	wv		1053096	0					
ANR	1053189	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , wx )"	180:1:7223:7255	1053096	10	True				
ANR	1053190	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , wx )"		1053096	0					
ANR	1053191	Callee	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053192	Identifier	DEFINE_CMD_DESCRIPTOR		1053096	0					
ANR	1053193	ArgumentList	core		1053096	1					
ANR	1053194	Argument	core		1053096	0					
ANR	1053195	Identifier	core		1053096	0					
ANR	1053196	Argument	wx		1053096	1					
ANR	1053197	Identifier	wx		1053096	0					
ANR	1053198	ReturnType	static void		1053096	1					
ANR	1053199	Identifier	cmd_write_init		1053096	2					
ANR	1053200	ParameterList	RCore * core		1053096	3					
ANR	1053201	Parameter	RCore * core	169:27:6857:6867	1053096	0	True				
ANR	1053202	ParameterType	RCore *		1053096	0					
ANR	1053203	Identifier	core		1053096	1					
ANR	1053204	CFGEntryNode	ENTRY		1053096		True				
ANR	1053205	CFGExitNode	EXIT		1053096		True				
ANR	1053206	Symbol	core		1053096						
ANR	1053207	Symbol	wx		1053096						
ANR	1053208	Symbol	w		1053096						
ANR	1053209	Symbol	wo		1053096						
ANR	1053210	Symbol	wop		1053096						
ANR	1053211	Symbol	wp		1053096						
ANR	1053212	Symbol	wa		1053096						
ANR	1053213	Symbol	wA		1053096						
ANR	1053214	Symbol	wc		1053096						
ANR	1053215	Symbol	wt		1053096						
ANR	1053216	Symbol	we		1053096						
ANR	1053217	Symbol	wv		1053096						
ANR	1053218	Function	cmd_write_fail	183:0:7260:7323							
ANR	1053219	FunctionDef	cmd_write_fail ()		1053218	0					
ANR	1053220	CompoundStatement		183:29:7289:7323	1053218	0					
ANR	1053221	ExpressionStatement	"eprintf ( ""Failed to write\\n"" )"	184:1:7292:7321	1053218	0	True				
ANR	1053222	CallExpression	"eprintf ( ""Failed to write\\n"" )"		1053218	0					
ANR	1053223	Callee	eprintf		1053218	0					
ANR	1053224	Identifier	eprintf		1053218	0					
ANR	1053225	ArgumentList	"""Failed to write\\n"""		1053218	1					
ANR	1053226	Argument	"""Failed to write\\n"""		1053218	0					
ANR	1053227	PrimaryExpression	"""Failed to write\\n"""		1053218	0					
ANR	1053228	ReturnType	static void		1053218	1					
ANR	1053229	Identifier	cmd_write_fail		1053218	2					
ANR	1053230	ParameterList			1053218	3					
ANR	1053231	CFGEntryNode	ENTRY		1053218		True				
ANR	1053232	CFGExitNode	EXIT		1053218		True				
ANR	1053233	Function	cmd_write_hexpair	187:0:7326:7931							
ANR	1053234	FunctionDef	"cmd_write_hexpair (RCore * core , const char * pairs)"		1053233	0					
ANR	1053235	CompoundStatement		187:60:7386:7931	1053233	0					
ANR	1053236	ExpressionStatement	"r_return_val_if_fail ( core && pairs , 0 )"	188:1:7389:7428	1053233	0	True				
ANR	1053237	CallExpression	"r_return_val_if_fail ( core && pairs , 0 )"		1053233	0					
ANR	1053238	Callee	r_return_val_if_fail		1053233	0					
ANR	1053239	Identifier	r_return_val_if_fail		1053233	0					
ANR	1053240	ArgumentList	core && pairs		1053233	1					
ANR	1053241	Argument	core && pairs		1053233	0					
ANR	1053242	AndExpression	core && pairs		1053233	0		&&			
ANR	1053243	Identifier	core		1053233	0					
ANR	1053244	Identifier	pairs		1053233	1					
ANR	1053245	Argument	0		1053233	1					
ANR	1053246	PrimaryExpression	0		1053233	0					
ANR	1053247	IdentifierDeclStatement	ut8 * buf = malloc ( strlen ( pairs ) + 1 ) ;	189:1:7431:7469	1053233	1	True				
ANR	1053248	IdentifierDecl	* buf = malloc ( strlen ( pairs ) + 1 )		1053233	0					
ANR	1053249	IdentifierDeclType	ut8 *		1053233	0					
ANR	1053250	Identifier	buf		1053233	1					
ANR	1053251	AssignmentExpression	* buf = malloc ( strlen ( pairs ) + 1 )		1053233	2		=			
ANR	1053252	Identifier	buf		1053233	0					
ANR	1053253	CallExpression	malloc ( strlen ( pairs ) + 1 )		1053233	1					
ANR	1053254	Callee	malloc		1053233	0					
ANR	1053255	Identifier	malloc		1053233	0					
ANR	1053256	ArgumentList	strlen ( pairs ) + 1		1053233	1					
ANR	1053257	Argument	strlen ( pairs ) + 1		1053233	0					
ANR	1053258	AdditiveExpression	strlen ( pairs ) + 1		1053233	0		+			
ANR	1053259	CallExpression	strlen ( pairs )		1053233	0					
ANR	1053260	Callee	strlen		1053233	0					
ANR	1053261	Identifier	strlen		1053233	0					
ANR	1053262	ArgumentList	pairs		1053233	1					
ANR	1053263	Argument	pairs		1053233	0					
ANR	1053264	Identifier	pairs		1053233	0					
ANR	1053265	PrimaryExpression	1		1053233	1					
ANR	1053266	IdentifierDeclStatement	"int len = r_hex_str2bin ( pairs , buf ) ;"	190:1:7472:7508	1053233	2	True				
ANR	1053267	IdentifierDecl	"len = r_hex_str2bin ( pairs , buf )"		1053233	0					
ANR	1053268	IdentifierDeclType	int		1053233	0					
ANR	1053269	Identifier	len		1053233	1					
ANR	1053270	AssignmentExpression	"len = r_hex_str2bin ( pairs , buf )"		1053233	2		=			
ANR	1053271	Identifier	len		1053233	0					
ANR	1053272	CallExpression	"r_hex_str2bin ( pairs , buf )"		1053233	1					
ANR	1053273	Callee	r_hex_str2bin		1053233	0					
ANR	1053274	Identifier	r_hex_str2bin		1053233	0					
ANR	1053275	ArgumentList	pairs		1053233	1					
ANR	1053276	Argument	pairs		1053233	0					
ANR	1053277	Identifier	pairs		1053233	0					
ANR	1053278	Argument	buf		1053233	1					
ANR	1053279	Identifier	buf		1053233	0					
ANR	1053280	IfStatement	if ( len != 0 )		1053233	3					
ANR	1053281	Condition	len != 0	191:5:7515:7522	1053233	0	True				
ANR	1053282	EqualityExpression	len != 0		1053233	0		!=			
ANR	1053283	Identifier	len		1053233	0					
ANR	1053284	PrimaryExpression	0		1053233	1					
ANR	1053285	CompoundStatement		5:15:138:138	1053233	1					
ANR	1053286	IfStatement	if ( len < 0 )		1053233	0					
ANR	1053287	Condition	len < 0	192:6:7533:7539	1053233	0	True				
ANR	1053288	RelationalExpression	len < 0		1053233	0		<			
ANR	1053289	Identifier	len		1053233	0					
ANR	1053290	PrimaryExpression	0		1053233	1					
ANR	1053291	CompoundStatement		6:15:155:155	1053233	1					
ANR	1053292	ExpressionStatement	len = - len	193:3:7547:7557	1053233	0	True				
ANR	1053293	AssignmentExpression	len = - len		1053233	0		=			
ANR	1053294	Identifier	len		1053233	0					
ANR	1053295	UnaryOperationExpression	- len		1053233	1					
ANR	1053296	UnaryOperator	-		1053233	0					
ANR	1053297	Identifier	len		1053233	1					
ANR	1053298	IfStatement	if ( len < core -> blocksize )		1053233	1					
ANR	1053299	Condition	len < core -> blocksize	194:7:7566:7586	1053233	0	True				
ANR	1053300	RelationalExpression	len < core -> blocksize		1053233	0		<			
ANR	1053301	Identifier	len		1053233	0					
ANR	1053302	PtrMemberAccess	core -> blocksize		1053233	1					
ANR	1053303	Identifier	core		1053233	0					
ANR	1053304	Identifier	blocksize		1053233	1					
ANR	1053305	CompoundStatement		8:30:202:202	1053233	1					
ANR	1053306	ExpressionStatement	buf [ len - 1 ] |= core -> block [ len - 1 ] & 0xf	195:4:7595:7633	1053233	0	True				
ANR	1053307	AssignmentExpression	buf [ len - 1 ] |= core -> block [ len - 1 ] & 0xf		1053233	0		|=			
ANR	1053308	ArrayIndexing	buf [ len - 1 ]		1053233	0					
ANR	1053309	Identifier	buf		1053233	0					
ANR	1053310	AdditiveExpression	len - 1		1053233	1		-			
ANR	1053311	Identifier	len		1053233	0					
ANR	1053312	PrimaryExpression	1		1053233	1					
ANR	1053313	BitAndExpression	core -> block [ len - 1 ] & 0xf		1053233	1		&			
ANR	1053314	ArrayIndexing	core -> block [ len - 1 ]		1053233	0					
ANR	1053315	PtrMemberAccess	core -> block		1053233	0					
ANR	1053316	Identifier	core		1053233	0					
ANR	1053317	Identifier	block		1053233	1					
ANR	1053318	AdditiveExpression	len - 1		1053233	1		-			
ANR	1053319	Identifier	len		1053233	0					
ANR	1053320	PrimaryExpression	1		1053233	1					
ANR	1053321	PrimaryExpression	0xf		1053233	1					
ANR	1053322	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , buf , len ) )"		1053233	1					
ANR	1053323	Condition	"! r_core_write_at ( core , core -> offset , buf , len )"	198:6:7650:7696	1053233	0	True				
ANR	1053324	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , buf , len )"		1053233	0					
ANR	1053325	UnaryOperator	!		1053233	0					
ANR	1053326	CallExpression	"r_core_write_at ( core , core -> offset , buf , len )"		1053233	1					
ANR	1053327	Callee	r_core_write_at		1053233	0					
ANR	1053328	Identifier	r_core_write_at		1053233	0					
ANR	1053329	ArgumentList	core		1053233	1					
ANR	1053330	Argument	core		1053233	0					
ANR	1053331	Identifier	core		1053233	0					
ANR	1053332	Argument	core -> offset		1053233	1					
ANR	1053333	PtrMemberAccess	core -> offset		1053233	0					
ANR	1053334	Identifier	core		1053233	0					
ANR	1053335	Identifier	offset		1053233	1					
ANR	1053336	Argument	buf		1053233	2					
ANR	1053337	Identifier	buf		1053233	0					
ANR	1053338	Argument	len		1053233	3					
ANR	1053339	Identifier	len		1053233	0					
ANR	1053340	CompoundStatement		12:55:312:312	1053233	1					
ANR	1053341	ExpressionStatement	cmd_write_fail ( )	199:3:7704:7721	1053233	0	True				
ANR	1053342	CallExpression	cmd_write_fail ( )		1053233	0					
ANR	1053343	Callee	cmd_write_fail		1053233	0					
ANR	1053344	Identifier	cmd_write_fail		1053233	0					
ANR	1053345	ArgumentList			1053233	1					
ANR	1053346	IfStatement	"if ( r_config_get_i ( core -> config , ""cfg.wseek"" ) )"		1053233	2					
ANR	1053347	Condition	"r_config_get_i ( core -> config , ""cfg.wseek"" )"	201:6:7733:7774	1053233	0	True				
ANR	1053348	CallExpression	"r_config_get_i ( core -> config , ""cfg.wseek"" )"		1053233	0					
ANR	1053349	Callee	r_config_get_i		1053233	0					
ANR	1053350	Identifier	r_config_get_i		1053233	0					
ANR	1053351	ArgumentList	core -> config		1053233	1					
ANR	1053352	Argument	core -> config		1053233	0					
ANR	1053353	PtrMemberAccess	core -> config		1053233	0					
ANR	1053354	Identifier	core		1053233	0					
ANR	1053355	Identifier	config		1053233	1					
ANR	1053356	Argument	"""cfg.wseek"""		1053233	1					
ANR	1053357	PrimaryExpression	"""cfg.wseek"""		1053233	0					
ANR	1053358	CompoundStatement		15:50:390:390	1053233	1					
ANR	1053359	ExpressionStatement	"r_core_seek_delta ( core , len )"	202:3:7782:7811	1053233	0	True				
ANR	1053360	CallExpression	"r_core_seek_delta ( core , len )"		1053233	0					
ANR	1053361	Callee	r_core_seek_delta		1053233	0					
ANR	1053362	Identifier	r_core_seek_delta		1053233	0					
ANR	1053363	ArgumentList	core		1053233	1					
ANR	1053364	Argument	core		1053233	0					
ANR	1053365	Identifier	core		1053233	0					
ANR	1053366	Argument	len		1053233	1					
ANR	1053367	Identifier	len		1053233	0					
ANR	1053368	ExpressionStatement	r_core_block_read ( core )	204:2:7819:7843	1053233	3	True				
ANR	1053369	CallExpression	r_core_block_read ( core )		1053233	0					
ANR	1053370	Callee	r_core_block_read		1053233	0					
ANR	1053371	Identifier	r_core_block_read		1053233	0					
ANR	1053372	ArgumentList	core		1053233	1					
ANR	1053373	Argument	core		1053233	0					
ANR	1053374	Identifier	core		1053233	0					
ANR	1053375	ElseStatement	else		1053233	0					
ANR	1053376	CompoundStatement		19:8:466:466	1053233	0					
ANR	1053377	ExpressionStatement	"eprintf ( ""Error: invalid hexpair string\\n"" )"	206:2:7857:7900	1053233	0	True				
ANR	1053378	CallExpression	"eprintf ( ""Error: invalid hexpair string\\n"" )"		1053233	0					
ANR	1053379	Callee	eprintf		1053233	0					
ANR	1053380	Identifier	eprintf		1053233	0					
ANR	1053381	ArgumentList	"""Error: invalid hexpair string\\n"""		1053233	1					
ANR	1053382	Argument	"""Error: invalid hexpair string\\n"""		1053233	0					
ANR	1053383	PrimaryExpression	"""Error: invalid hexpair string\\n"""		1053233	0					
ANR	1053384	ExpressionStatement	free ( buf )	208:1:7906:7916	1053233	4	True				
ANR	1053385	CallExpression	free ( buf )		1053233	0					
ANR	1053386	Callee	free		1053233	0					
ANR	1053387	Identifier	free		1053233	0					
ANR	1053388	ArgumentList	buf		1053233	1					
ANR	1053389	Argument	buf		1053233	0					
ANR	1053390	Identifier	buf		1053233	0					
ANR	1053391	ReturnStatement	return len ;	209:1:7919:7929	1053233	5	True				
ANR	1053392	Identifier	len		1053233	0					
ANR	1053393	ReturnType	R_API int		1053233	1					
ANR	1053394	Identifier	cmd_write_hexpair		1053233	2					
ANR	1053395	ParameterList	"RCore * core , const char * pairs"		1053233	3					
ANR	1053396	Parameter	RCore * core	187:28:7354:7364	1053233	0	True				
ANR	1053397	ParameterType	RCore *		1053233	0					
ANR	1053398	Identifier	core		1053233	1					
ANR	1053399	Parameter	const char * pairs	187:41:7367:7383	1053233	1	True				
ANR	1053400	ParameterType	const char *		1053233	0					
ANR	1053401	Identifier	pairs		1053233	1					
ANR	1053402	CFGEntryNode	ENTRY		1053233		True				
ANR	1053403	CFGExitNode	EXIT		1053233		True				
ANR	1053404	Symbol	core -> blocksize		1053233						
ANR	1053405	Symbol	core -> config		1053233						
ANR	1053406	Symbol	malloc		1053233						
ANR	1053407	Symbol	* buf		1053233						
ANR	1053408	Symbol	core -> block		1053233						
ANR	1053409	Symbol	* core		1053233						
ANR	1053410	Symbol	core -> offset		1053233						
ANR	1053411	Symbol	pairs		1053233						
ANR	1053412	Symbol	core		1053233						
ANR	1053413	Symbol	strlen		1053233						
ANR	1053414	Symbol	buf		1053233						
ANR	1053415	Symbol	len		1053233						
ANR	1053416	Symbol	r_config_get_i		1053233						
ANR	1053417	Symbol	r_core_write_at		1053233						
ANR	1053418	Symbol	r_hex_str2bin		1053233						
ANR	1053419	Symbol	* core -> block		1053233						
ANR	1053420	Symbol	* * core		1053233						
ANR	1053421	Symbol	* len		1053233						
ANR	1053422	Function	encrypt_or_decrypt_block	212:0:7934:9705							
ANR	1053423	FunctionDef	"encrypt_or_decrypt_block (RCore * core , const char * algo , const char * key , int direction , const char * iv)"		1053422	0					
ANR	1053424	CompoundStatement		212:116:8050:9705	1053422	0					
ANR	1053425	IdentifierDeclStatement	int keylen = 0 ;	214:1:8120:8134	1053422	0	True				
ANR	1053426	IdentifierDecl	keylen = 0		1053422	0					
ANR	1053427	IdentifierDeclType	int		1053422	0					
ANR	1053428	Identifier	keylen		1053422	1					
ANR	1053429	AssignmentExpression	keylen = 0		1053422	2		=			
ANR	1053430	Identifier	keylen		1053422	0					
ANR	1053431	PrimaryExpression	0		1053422	1					
ANR	1053432	IdentifierDeclStatement	"bool no_key_mode = ! strcmp ( ""base64"" , algo ) || ! strcmp ( ""base91"" , algo ) || ! strcmp ( ""punycode"" , algo ) ;"	215:1:8137:8238	1053422	1	True				
ANR	1053433	IdentifierDecl	"no_key_mode = ! strcmp ( ""base64"" , algo ) || ! strcmp ( ""base91"" , algo ) || ! strcmp ( ""punycode"" , algo )"		1053422	0					
ANR	1053434	IdentifierDeclType	bool		1053422	0					
ANR	1053435	Identifier	no_key_mode		1053422	1					
ANR	1053436	AssignmentExpression	"no_key_mode = ! strcmp ( ""base64"" , algo ) || ! strcmp ( ""base91"" , algo ) || ! strcmp ( ""punycode"" , algo )"		1053422	2		=			
ANR	1053437	Identifier	no_key_mode		1053422	0					
ANR	1053438	OrExpression	"! strcmp ( ""base64"" , algo ) || ! strcmp ( ""base91"" , algo ) || ! strcmp ( ""punycode"" , algo )"		1053422	1		||			
ANR	1053439	UnaryOperationExpression	"! strcmp ( ""base64"" , algo )"		1053422	0					
ANR	1053440	UnaryOperator	!		1053422	0					
ANR	1053441	CallExpression	"strcmp ( ""base64"" , algo )"		1053422	1					
ANR	1053442	Callee	strcmp		1053422	0					
ANR	1053443	Identifier	strcmp		1053422	0					
ANR	1053444	ArgumentList	"""base64"""		1053422	1					
ANR	1053445	Argument	"""base64"""		1053422	0					
ANR	1053446	PrimaryExpression	"""base64"""		1053422	0					
ANR	1053447	Argument	algo		1053422	1					
ANR	1053448	Identifier	algo		1053422	0					
ANR	1053449	OrExpression	"! strcmp ( ""base91"" , algo ) || ! strcmp ( ""punycode"" , algo )"		1053422	1		||			
ANR	1053450	UnaryOperationExpression	"! strcmp ( ""base91"" , algo )"		1053422	0					
ANR	1053451	UnaryOperator	!		1053422	0					
ANR	1053452	CallExpression	"strcmp ( ""base91"" , algo )"		1053422	1					
ANR	1053453	Callee	strcmp		1053422	0					
ANR	1053454	Identifier	strcmp		1053422	0					
ANR	1053455	ArgumentList	"""base91"""		1053422	1					
ANR	1053456	Argument	"""base91"""		1053422	0					
ANR	1053457	PrimaryExpression	"""base91"""		1053422	0					
ANR	1053458	Argument	algo		1053422	1					
ANR	1053459	Identifier	algo		1053422	0					
ANR	1053460	UnaryOperationExpression	"! strcmp ( ""punycode"" , algo )"		1053422	1					
ANR	1053461	UnaryOperator	!		1053422	0					
ANR	1053462	CallExpression	"strcmp ( ""punycode"" , algo )"		1053422	1					
ANR	1053463	Callee	strcmp		1053422	0					
ANR	1053464	Identifier	strcmp		1053422	0					
ANR	1053465	ArgumentList	"""punycode"""		1053422	1					
ANR	1053466	Argument	"""punycode"""		1053422	0					
ANR	1053467	PrimaryExpression	"""punycode"""		1053422	0					
ANR	1053468	Argument	algo		1053422	1					
ANR	1053469	Identifier	algo		1053422	0					
ANR	1053470	IdentifierDeclStatement	ut8 * binkey = NULL ;	216:1:8241:8259	1053422	2	True				
ANR	1053471	IdentifierDecl	* binkey = NULL		1053422	0					
ANR	1053472	IdentifierDeclType	ut8 *		1053422	0					
ANR	1053473	Identifier	binkey		1053422	1					
ANR	1053474	AssignmentExpression	* binkey = NULL		1053422	2		=			
ANR	1053475	Identifier	NULL		1053422	0					
ANR	1053476	Identifier	NULL		1053422	1					
ANR	1053477	IfStatement	"if ( ! strncmp ( key , ""s:"" , 2 ) )"		1053422	3					
ANR	1053478	Condition	"! strncmp ( key , ""s:"" , 2 )"	217:5:8266:8288	1053422	0	True				
ANR	1053479	UnaryOperationExpression	"! strncmp ( key , ""s:"" , 2 )"		1053422	0					
ANR	1053480	UnaryOperator	!		1053422	0					
ANR	1053481	CallExpression	"strncmp ( key , ""s:"" , 2 )"		1053422	1					
ANR	1053482	Callee	strncmp		1053422	0					
ANR	1053483	Identifier	strncmp		1053422	0					
ANR	1053484	ArgumentList	key		1053422	1					
ANR	1053485	Argument	key		1053422	0					
ANR	1053486	Identifier	key		1053422	0					
ANR	1053487	Argument	"""s:"""		1053422	1					
ANR	1053488	PrimaryExpression	"""s:"""		1053422	0					
ANR	1053489	Argument	2		1053422	2					
ANR	1053490	PrimaryExpression	2		1053422	0					
ANR	1053491	CompoundStatement		6:30:240:240	1053422	1					
ANR	1053492	ExpressionStatement	binkey = ( ut8 * ) strdup ( key + 2 )	218:2:8295:8326	1053422	0	True				
ANR	1053493	AssignmentExpression	binkey = ( ut8 * ) strdup ( key + 2 )		1053422	0		=			
ANR	1053494	Identifier	binkey		1053422	0					
ANR	1053495	CastExpression	( ut8 * ) strdup ( key + 2 )		1053422	1					
ANR	1053496	CastTarget	ut8 *		1053422	0					
ANR	1053497	CallExpression	strdup ( key + 2 )		1053422	1					
ANR	1053498	Callee	strdup		1053422	0					
ANR	1053499	Identifier	strdup		1053422	0					
ANR	1053500	ArgumentList	key + 2		1053422	1					
ANR	1053501	Argument	key + 2		1053422	0					
ANR	1053502	AdditiveExpression	key + 2		1053422	0		+			
ANR	1053503	Identifier	key		1053422	0					
ANR	1053504	PrimaryExpression	2		1053422	1					
ANR	1053505	ExpressionStatement	keylen = strlen ( key + 2 )	219:2:8330:8355	1053422	1	True				
ANR	1053506	AssignmentExpression	keylen = strlen ( key + 2 )		1053422	0		=			
ANR	1053507	Identifier	keylen		1053422	0					
ANR	1053508	CallExpression	strlen ( key + 2 )		1053422	1					
ANR	1053509	Callee	strlen		1053422	0					
ANR	1053510	Identifier	strlen		1053422	0					
ANR	1053511	ArgumentList	key + 2		1053422	1					
ANR	1053512	Argument	key + 2		1053422	0					
ANR	1053513	AdditiveExpression	key + 2		1053422	0		+			
ANR	1053514	Identifier	key		1053422	0					
ANR	1053515	PrimaryExpression	2		1053422	1					
ANR	1053516	ElseStatement	else		1053422	0					
ANR	1053517	CompoundStatement		9:8:314:314	1053422	0					
ANR	1053518	ExpressionStatement	binkey = ( ut8 * ) strdup ( key )	221:2:8369:8397	1053422	0	True				
ANR	1053519	AssignmentExpression	binkey = ( ut8 * ) strdup ( key )		1053422	0		=			
ANR	1053520	Identifier	binkey		1053422	0					
ANR	1053521	CastExpression	( ut8 * ) strdup ( key )		1053422	1					
ANR	1053522	CastTarget	ut8 *		1053422	0					
ANR	1053523	CallExpression	strdup ( key )		1053422	1					
ANR	1053524	Callee	strdup		1053422	0					
ANR	1053525	Identifier	strdup		1053422	0					
ANR	1053526	ArgumentList	key		1053422	1					
ANR	1053527	Argument	key		1053422	0					
ANR	1053528	Identifier	key		1053422	0					
ANR	1053529	ExpressionStatement	"keylen = r_hex_str2bin ( key , binkey )"	222:2:8401:8437	1053422	1	True				
ANR	1053530	AssignmentExpression	"keylen = r_hex_str2bin ( key , binkey )"		1053422	0		=			
ANR	1053531	Identifier	keylen		1053422	0					
ANR	1053532	CallExpression	"r_hex_str2bin ( key , binkey )"		1053422	1					
ANR	1053533	Callee	r_hex_str2bin		1053422	0					
ANR	1053534	Identifier	r_hex_str2bin		1053422	0					
ANR	1053535	ArgumentList	key		1053422	1					
ANR	1053536	Argument	key		1053422	0					
ANR	1053537	Identifier	key		1053422	0					
ANR	1053538	Argument	binkey		1053422	1					
ANR	1053539	Identifier	binkey		1053422	0					
ANR	1053540	IfStatement	if ( ! no_key_mode && keylen < 1 )		1053422	4					
ANR	1053541	Condition	! no_key_mode && keylen < 1	224:5:8447:8472	1053422	0	True				
ANR	1053542	AndExpression	! no_key_mode && keylen < 1		1053422	0		&&			
ANR	1053543	UnaryOperationExpression	! no_key_mode		1053422	0					
ANR	1053544	UnaryOperator	!		1053422	0					
ANR	1053545	Identifier	no_key_mode		1053422	1					
ANR	1053546	RelationalExpression	keylen < 1		1053422	1		<			
ANR	1053547	Identifier	keylen		1053422	0					
ANR	1053548	PrimaryExpression	1		1053422	1					
ANR	1053549	CompoundStatement		13:33:424:424	1053422	1					
ANR	1053550	ExpressionStatement	"eprintf ( ""%s key not defined. Use -S [key]\\n"" , ( ( ! direction ) ? ""Encryption"" : ""Decryption"" ) )"	225:2:8479:8571	1053422	0	True				
ANR	1053551	CallExpression	"eprintf ( ""%s key not defined. Use -S [key]\\n"" , ( ( ! direction ) ? ""Encryption"" : ""Decryption"" ) )"		1053422	0					
ANR	1053552	Callee	eprintf		1053422	0					
ANR	1053553	Identifier	eprintf		1053422	0					
ANR	1053554	ArgumentList	"""%s key not defined. Use -S [key]\\n"""		1053422	1					
ANR	1053555	Argument	"""%s key not defined. Use -S [key]\\n"""		1053422	0					
ANR	1053556	PrimaryExpression	"""%s key not defined. Use -S [key]\\n"""		1053422	0					
ANR	1053557	Argument	"( ! direction ) ? ""Encryption"" : ""Decryption"""		1053422	1					
ANR	1053558	ConditionalExpression	"( ! direction ) ? ""Encryption"" : ""Decryption"""		1053422	0					
ANR	1053559	Condition	! direction		1053422	0					
ANR	1053560	UnaryOperationExpression	! direction		1053422	0					
ANR	1053561	UnaryOperator	!		1053422	0					
ANR	1053562	Identifier	direction		1053422	1					
ANR	1053563	PrimaryExpression	"""Encryption"""		1053422	1					
ANR	1053564	PrimaryExpression	"""Decryption"""		1053422	2					
ANR	1053565	ReturnStatement	return false ;	226:2:8575:8587	1053422	1	True				
ANR	1053566	Identifier	false		1053422	0					
ANR	1053567	IdentifierDeclStatement	RCrypto * cry = r_crypto_new ( ) ;	228:1:8593:8623	1053422	5	True				
ANR	1053568	IdentifierDecl	* cry = r_crypto_new ( )		1053422	0					
ANR	1053569	IdentifierDeclType	RCrypto *		1053422	0					
ANR	1053570	Identifier	cry		1053422	1					
ANR	1053571	AssignmentExpression	* cry = r_crypto_new ( )		1053422	2		=			
ANR	1053572	Identifier	cry		1053422	0					
ANR	1053573	CallExpression	r_crypto_new ( )		1053422	1					
ANR	1053574	Callee	r_crypto_new		1053422	0					
ANR	1053575	Identifier	r_crypto_new		1053422	0					
ANR	1053576	ArgumentList			1053422	1					
ANR	1053577	IfStatement	"if ( r_crypto_use ( cry , algo ) )"		1053422	6					
ANR	1053578	Condition	"r_crypto_use ( cry , algo )"	229:5:8630:8653	1053422	0	True				
ANR	1053579	CallExpression	"r_crypto_use ( cry , algo )"		1053422	0					
ANR	1053580	Callee	r_crypto_use		1053422	0					
ANR	1053581	Identifier	r_crypto_use		1053422	0					
ANR	1053582	ArgumentList	cry		1053422	1					
ANR	1053583	Argument	cry		1053422	0					
ANR	1053584	Identifier	cry		1053422	0					
ANR	1053585	Argument	algo		1053422	1					
ANR	1053586	Identifier	algo		1053422	0					
ANR	1053587	CompoundStatement		18:31:605:605	1053422	1					
ANR	1053588	IfStatement	if ( ! binkey )		1053422	0					
ANR	1053589	Condition	! binkey	230:6:8664:8670	1053422	0	True				
ANR	1053590	UnaryOperationExpression	! binkey		1053422	0					
ANR	1053591	UnaryOperator	!		1053422	0					
ANR	1053592	Identifier	binkey		1053422	1					
ANR	1053593	CompoundStatement		19:15:622:622	1053422	1					
ANR	1053594	ExpressionStatement	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , keylen )"	231:3:8678:8726	1053422	0	True				
ANR	1053595	CallExpression	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , keylen )"		1053422	0					
ANR	1053596	Callee	eprintf		1053422	0					
ANR	1053597	Identifier	eprintf		1053422	0					
ANR	1053598	ArgumentList	"""Cannot allocate %d byte(s)\\n"""		1053422	1					
ANR	1053599	Argument	"""Cannot allocate %d byte(s)\\n"""		1053422	0					
ANR	1053600	PrimaryExpression	"""Cannot allocate %d byte(s)\\n"""		1053422	0					
ANR	1053601	Argument	keylen		1053422	1					
ANR	1053602	Identifier	keylen		1053422	0					
ANR	1053603	ExpressionStatement	r_crypto_free ( cry )	232:3:8731:8750	1053422	1	True				
ANR	1053604	CallExpression	r_crypto_free ( cry )		1053422	0					
ANR	1053605	Callee	r_crypto_free		1053422	0					
ANR	1053606	Identifier	r_crypto_free		1053422	0					
ANR	1053607	ArgumentList	cry		1053422	1					
ANR	1053608	Argument	cry		1053422	0					
ANR	1053609	Identifier	cry		1053422	0					
ANR	1053610	ReturnStatement	return false ;	233:3:8755:8767	1053422	2	True				
ANR	1053611	Identifier	false		1053422	0					
ANR	1053612	IfStatement	"if ( r_crypto_set_key ( cry , binkey , keylen , 0 , direction ) )"		1053422	1					
ANR	1053613	Condition	"r_crypto_set_key ( cry , binkey , keylen , 0 , direction )"	235:6:8779:8830	1053422	0	True				
ANR	1053614	CallExpression	"r_crypto_set_key ( cry , binkey , keylen , 0 , direction )"		1053422	0					
ANR	1053615	Callee	r_crypto_set_key		1053422	0					
ANR	1053616	Identifier	r_crypto_set_key		1053422	0					
ANR	1053617	ArgumentList	cry		1053422	1					
ANR	1053618	Argument	cry		1053422	0					
ANR	1053619	Identifier	cry		1053422	0					
ANR	1053620	Argument	binkey		1053422	1					
ANR	1053621	Identifier	binkey		1053422	0					
ANR	1053622	Argument	keylen		1053422	2					
ANR	1053623	Identifier	keylen		1053422	0					
ANR	1053624	Argument	0		1053422	3					
ANR	1053625	PrimaryExpression	0		1053422	0					
ANR	1053626	Argument	direction		1053422	4					
ANR	1053627	Identifier	direction		1053422	0					
ANR	1053628	CompoundStatement		41:3:1204:1257	1053422	1					
ANR	1053629	IfStatement	if ( iv )		1053422	0					
ANR	1053630	Condition	iv	236:7:8842:8843	1053422	0	True				
ANR	1053631	Identifier	iv		1053422	0					
ANR	1053632	CompoundStatement		27:4:844:881	1053422	1					
ANR	1053633	IdentifierDeclStatement	ut8 * biniv = malloc ( strlen ( iv ) + 1 ) ;	237:4:8852:8889	1053422	0	True				
ANR	1053634	IdentifierDecl	* biniv = malloc ( strlen ( iv ) + 1 )		1053422	0					
ANR	1053635	IdentifierDeclType	ut8 *		1053422	0					
ANR	1053636	Identifier	biniv		1053422	1					
ANR	1053637	AssignmentExpression	* biniv = malloc ( strlen ( iv ) + 1 )		1053422	2		=			
ANR	1053638	Identifier	biniv		1053422	0					
ANR	1053639	CallExpression	malloc ( strlen ( iv ) + 1 )		1053422	1					
ANR	1053640	Callee	malloc		1053422	0					
ANR	1053641	Identifier	malloc		1053422	0					
ANR	1053642	ArgumentList	strlen ( iv ) + 1		1053422	1					
ANR	1053643	Argument	strlen ( iv ) + 1		1053422	0					
ANR	1053644	AdditiveExpression	strlen ( iv ) + 1		1053422	0		+			
ANR	1053645	CallExpression	strlen ( iv )		1053422	0					
ANR	1053646	Callee	strlen		1053422	0					
ANR	1053647	Identifier	strlen		1053422	0					
ANR	1053648	ArgumentList	iv		1053422	1					
ANR	1053649	Argument	iv		1053422	0					
ANR	1053650	Identifier	iv		1053422	0					
ANR	1053651	PrimaryExpression	1		1053422	1					
ANR	1053652	IdentifierDeclStatement	"int ivlen = r_hex_str2bin ( iv , biniv ) ;"	238:4:8895:8932	1053422	1	True				
ANR	1053653	IdentifierDecl	"ivlen = r_hex_str2bin ( iv , biniv )"		1053422	0					
ANR	1053654	IdentifierDeclType	int		1053422	0					
ANR	1053655	Identifier	ivlen		1053422	1					
ANR	1053656	AssignmentExpression	"ivlen = r_hex_str2bin ( iv , biniv )"		1053422	2		=			
ANR	1053657	Identifier	ivlen		1053422	0					
ANR	1053658	CallExpression	"r_hex_str2bin ( iv , biniv )"		1053422	1					
ANR	1053659	Callee	r_hex_str2bin		1053422	0					
ANR	1053660	Identifier	r_hex_str2bin		1053422	0					
ANR	1053661	ArgumentList	iv		1053422	1					
ANR	1053662	Argument	iv		1053422	0					
ANR	1053663	Identifier	iv		1053422	0					
ANR	1053664	Argument	biniv		1053422	1					
ANR	1053665	Identifier	biniv		1053422	0					
ANR	1053666	IfStatement	if ( ivlen < 1 )		1053422	2					
ANR	1053667	Condition	ivlen < 1	239:8:8942:8950	1053422	0	True				
ANR	1053668	RelationalExpression	ivlen < 1		1053422	0		<			
ANR	1053669	Identifier	ivlen		1053422	0					
ANR	1053670	PrimaryExpression	1		1053422	1					
ANR	1053671	CompoundStatement		28:19:902:902	1053422	1					
ANR	1053672	ExpressionStatement	ivlen = strlen ( iv )	240:5:8960:8978	1053422	0	True				
ANR	1053673	AssignmentExpression	ivlen = strlen ( iv )		1053422	0		=			
ANR	1053674	Identifier	ivlen		1053422	0					
ANR	1053675	CallExpression	strlen ( iv )		1053422	1					
ANR	1053676	Callee	strlen		1053422	0					
ANR	1053677	Identifier	strlen		1053422	0					
ANR	1053678	ArgumentList	iv		1053422	1					
ANR	1053679	Argument	iv		1053422	0					
ANR	1053680	Identifier	iv		1053422	0					
ANR	1053681	ExpressionStatement	"strcpy ( ( char * ) biniv , iv )"	241:5:8985:9011	1053422	1	True				
ANR	1053682	CallExpression	"strcpy ( ( char * ) biniv , iv )"		1053422	0					
ANR	1053683	Callee	strcpy		1053422	0					
ANR	1053684	Identifier	strcpy		1053422	0					
ANR	1053685	ArgumentList	( char * ) biniv		1053422	1					
ANR	1053686	Argument	( char * ) biniv		1053422	0					
ANR	1053687	CastExpression	( char * ) biniv		1053422	0					
ANR	1053688	CastTarget	char *		1053422	0					
ANR	1053689	Identifier	biniv		1053422	1					
ANR	1053690	Argument	iv		1053422	1					
ANR	1053691	Identifier	iv		1053422	0					
ANR	1053692	IfStatement	"if ( ! r_crypto_set_iv ( cry , biniv , ivlen ) )"		1053422	3					
ANR	1053693	Condition	"! r_crypto_set_iv ( cry , biniv , ivlen )"	243:8:9027:9062	1053422	0	True				
ANR	1053694	UnaryOperationExpression	"! r_crypto_set_iv ( cry , biniv , ivlen )"		1053422	0					
ANR	1053695	UnaryOperator	!		1053422	0					
ANR	1053696	CallExpression	"r_crypto_set_iv ( cry , biniv , ivlen )"		1053422	1					
ANR	1053697	Callee	r_crypto_set_iv		1053422	0					
ANR	1053698	Identifier	r_crypto_set_iv		1053422	0					
ANR	1053699	ArgumentList	cry		1053422	1					
ANR	1053700	Argument	cry		1053422	0					
ANR	1053701	Identifier	cry		1053422	0					
ANR	1053702	Argument	biniv		1053422	1					
ANR	1053703	Identifier	biniv		1053422	0					
ANR	1053704	Argument	ivlen		1053422	2					
ANR	1053705	Identifier	ivlen		1053422	0					
ANR	1053706	CompoundStatement		32:46:1014:1014	1053422	1					
ANR	1053707	ExpressionStatement	"eprintf ( ""Invalid IV.\\n"" )"	244:5:9072:9097	1053422	0	True				
ANR	1053708	CallExpression	"eprintf ( ""Invalid IV.\\n"" )"		1053422	0					
ANR	1053709	Callee	eprintf		1053422	0					
ANR	1053710	Identifier	eprintf		1053422	0					
ANR	1053711	ArgumentList	"""Invalid IV.\\n"""		1053422	1					
ANR	1053712	Argument	"""Invalid IV.\\n"""		1053422	0					
ANR	1053713	PrimaryExpression	"""Invalid IV.\\n"""		1053422	0					
ANR	1053714	ReturnStatement	return 0 ;	245:5:9104:9112	1053422	1	True				
ANR	1053715	PrimaryExpression	0		1053422	0					
ANR	1053716	ExpressionStatement	"r_crypto_update ( cry , ( const ut8 * ) core -> block , core -> blocksize )"	248:3:9128:9191	1053422	1	True				
ANR	1053717	CallExpression	"r_crypto_update ( cry , ( const ut8 * ) core -> block , core -> blocksize )"		1053422	0					
ANR	1053718	Callee	r_crypto_update		1053422	0					
ANR	1053719	Identifier	r_crypto_update		1053422	0					
ANR	1053720	ArgumentList	cry		1053422	1					
ANR	1053721	Argument	cry		1053422	0					
ANR	1053722	Identifier	cry		1053422	0					
ANR	1053723	Argument	( const ut8 * ) core -> block		1053422	1					
ANR	1053724	CastExpression	( const ut8 * ) core -> block		1053422	0					
ANR	1053725	CastTarget	const ut8 *		1053422	0					
ANR	1053726	PtrMemberAccess	core -> block		1053422	1					
ANR	1053727	Identifier	core		1053422	0					
ANR	1053728	Identifier	block		1053422	1					
ANR	1053729	Argument	core -> blocksize		1053422	2					
ANR	1053730	PtrMemberAccess	core -> blocksize		1053422	0					
ANR	1053731	Identifier	core		1053422	0					
ANR	1053732	Identifier	blocksize		1053422	1					
ANR	1053733	ExpressionStatement	"r_crypto_final ( cry , NULL , 0 )"	249:3:9196:9225	1053422	2	True				
ANR	1053734	CallExpression	"r_crypto_final ( cry , NULL , 0 )"		1053422	0					
ANR	1053735	Callee	r_crypto_final		1053422	0					
ANR	1053736	Identifier	r_crypto_final		1053422	0					
ANR	1053737	ArgumentList	cry		1053422	1					
ANR	1053738	Argument	cry		1053422	0					
ANR	1053739	Identifier	cry		1053422	0					
ANR	1053740	Argument	NULL		1053422	1					
ANR	1053741	Identifier	NULL		1053422	0					
ANR	1053742	Argument	0		1053422	2					
ANR	1053743	PrimaryExpression	0		1053422	0					
ANR	1053744	IdentifierDeclStatement	int result_size = 0 ;	251:3:9231:9250	1053422	3	True				
ANR	1053745	IdentifierDecl	result_size = 0		1053422	0					
ANR	1053746	IdentifierDeclType	int		1053422	0					
ANR	1053747	Identifier	result_size		1053422	1					
ANR	1053748	AssignmentExpression	result_size = 0		1053422	2		=			
ANR	1053749	Identifier	result_size		1053422	0					
ANR	1053750	PrimaryExpression	0		1053422	1					
ANR	1053751	IdentifierDeclStatement	"ut8 * result = r_crypto_get_output ( cry , & result_size ) ;"	252:3:9255:9308	1053422	4	True				
ANR	1053752	IdentifierDecl	"* result = r_crypto_get_output ( cry , & result_size )"		1053422	0					
ANR	1053753	IdentifierDeclType	ut8 *		1053422	0					
ANR	1053754	Identifier	result		1053422	1					
ANR	1053755	AssignmentExpression	"* result = r_crypto_get_output ( cry , & result_size )"		1053422	2		=			
ANR	1053756	Identifier	result		1053422	0					
ANR	1053757	CallExpression	"r_crypto_get_output ( cry , & result_size )"		1053422	1					
ANR	1053758	Callee	r_crypto_get_output		1053422	0					
ANR	1053759	Identifier	r_crypto_get_output		1053422	0					
ANR	1053760	ArgumentList	cry		1053422	1					
ANR	1053761	Argument	cry		1053422	0					
ANR	1053762	Identifier	cry		1053422	0					
ANR	1053763	Argument	& result_size		1053422	1					
ANR	1053764	UnaryOperationExpression	& result_size		1053422	0					
ANR	1053765	UnaryOperator	&		1053422	0					
ANR	1053766	Identifier	result_size		1053422	1					
ANR	1053767	IfStatement	if ( result )		1053422	5					
ANR	1053768	Condition	result	253:7:9317:9322	1053422	0	True				
ANR	1053769	Identifier	result		1053422	0					
ANR	1053770	CompoundStatement		42:15:1274:1274	1053422	1					
ANR	1053771	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , result , result_size )"	254:4:9331:9390	1053422	0	True				
ANR	1053772	CallExpression	"r_io_write_at ( core -> io , core -> offset , result , result_size )"		1053422	0					
ANR	1053773	Callee	r_io_write_at		1053422	0					
ANR	1053774	Identifier	r_io_write_at		1053422	0					
ANR	1053775	ArgumentList	core -> io		1053422	1					
ANR	1053776	Argument	core -> io		1053422	0					
ANR	1053777	PtrMemberAccess	core -> io		1053422	0					
ANR	1053778	Identifier	core		1053422	0					
ANR	1053779	Identifier	io		1053422	1					
ANR	1053780	Argument	core -> offset		1053422	1					
ANR	1053781	PtrMemberAccess	core -> offset		1053422	0					
ANR	1053782	Identifier	core		1053422	0					
ANR	1053783	Identifier	offset		1053422	1					
ANR	1053784	Argument	result		1053422	2					
ANR	1053785	Identifier	result		1053422	0					
ANR	1053786	Argument	result_size		1053422	3					
ANR	1053787	Identifier	result_size		1053422	0					
ANR	1053788	ExpressionStatement	"eprintf ( ""Written %d byte(s)\\n"" , result_size )"	255:4:9396:9441	1053422	1	True				
ANR	1053789	CallExpression	"eprintf ( ""Written %d byte(s)\\n"" , result_size )"		1053422	0					
ANR	1053790	Callee	eprintf		1053422	0					
ANR	1053791	Identifier	eprintf		1053422	0					
ANR	1053792	ArgumentList	"""Written %d byte(s)\\n"""		1053422	1					
ANR	1053793	Argument	"""Written %d byte(s)\\n"""		1053422	0					
ANR	1053794	PrimaryExpression	"""Written %d byte(s)\\n"""		1053422	0					
ANR	1053795	Argument	result_size		1053422	1					
ANR	1053796	Identifier	result_size		1053422	0					
ANR	1053797	ExpressionStatement	free ( result )	256:4:9447:9460	1053422	2	True				
ANR	1053798	CallExpression	free ( result )		1053422	0					
ANR	1053799	Callee	free		1053422	0					
ANR	1053800	Identifier	free		1053422	0					
ANR	1053801	ArgumentList	result		1053422	1					
ANR	1053802	Argument	result		1053422	0					
ANR	1053803	Identifier	result		1053422	0					
ANR	1053804	ElseStatement	else		1053422	0					
ANR	1053805	CompoundStatement		47:9:1425:1425	1053422	0					
ANR	1053806	ExpressionStatement	"eprintf ( ""Invalid key\\n"" )"	259:3:9481:9506	1053422	0	True				
ANR	1053807	CallExpression	"eprintf ( ""Invalid key\\n"" )"		1053422	0					
ANR	1053808	Callee	eprintf		1053422	0					
ANR	1053809	Identifier	eprintf		1053422	0					
ANR	1053810	ArgumentList	"""Invalid key\\n"""		1053422	1					
ANR	1053811	Argument	"""Invalid key\\n"""		1053422	0					
ANR	1053812	PrimaryExpression	"""Invalid key\\n"""		1053422	0					
ANR	1053813	ExpressionStatement	free ( binkey )	261:2:9514:9527	1053422	2	True				
ANR	1053814	CallExpression	free ( binkey )		1053422	0					
ANR	1053815	Callee	free		1053422	0					
ANR	1053816	Identifier	free		1053422	0					
ANR	1053817	ArgumentList	binkey		1053422	1					
ANR	1053818	Argument	binkey		1053422	0					
ANR	1053819	Identifier	binkey		1053422	0					
ANR	1053820	ExpressionStatement	r_crypto_free ( cry )	262:2:9531:9550	1053422	3	True				
ANR	1053821	CallExpression	r_crypto_free ( cry )		1053422	0					
ANR	1053822	Callee	r_crypto_free		1053422	0					
ANR	1053823	Identifier	r_crypto_free		1053422	0					
ANR	1053824	ArgumentList	cry		1053422	1					
ANR	1053825	Argument	cry		1053422	0					
ANR	1053826	Identifier	cry		1053422	0					
ANR	1053827	ReturnStatement	return 0 ;	263:2:9554:9562	1053422	4	True				
ANR	1053828	PrimaryExpression	0		1053422	0					
ANR	1053829	ElseStatement	else		1053422	0					
ANR	1053830	CompoundStatement		53:8:1521:1521	1053422	0					
ANR	1053831	ExpressionStatement	"eprintf ( ""Unknown %s algorithm '%s'\\n"" , ( ( ! direction ) ? ""encryption"" : ""decryption"" ) , algo )"	265:2:9576:9667	1053422	0	True				
ANR	1053832	CallExpression	"eprintf ( ""Unknown %s algorithm '%s'\\n"" , ( ( ! direction ) ? ""encryption"" : ""decryption"" ) , algo )"		1053422	0					
ANR	1053833	Callee	eprintf		1053422	0					
ANR	1053834	Identifier	eprintf		1053422	0					
ANR	1053835	ArgumentList	"""Unknown %s algorithm '%s'\\n"""		1053422	1					
ANR	1053836	Argument	"""Unknown %s algorithm '%s'\\n"""		1053422	0					
ANR	1053837	PrimaryExpression	"""Unknown %s algorithm '%s'\\n"""		1053422	0					
ANR	1053838	Argument	"( ! direction ) ? ""encryption"" : ""decryption"""		1053422	1					
ANR	1053839	ConditionalExpression	"( ! direction ) ? ""encryption"" : ""decryption"""		1053422	0					
ANR	1053840	Condition	! direction		1053422	0					
ANR	1053841	UnaryOperationExpression	! direction		1053422	0					
ANR	1053842	UnaryOperator	!		1053422	0					
ANR	1053843	Identifier	direction		1053422	1					
ANR	1053844	PrimaryExpression	"""encryption"""		1053422	1					
ANR	1053845	PrimaryExpression	"""decryption"""		1053422	2					
ANR	1053846	Argument	algo		1053422	2					
ANR	1053847	Identifier	algo		1053422	0					
ANR	1053848	ExpressionStatement	r_crypto_free ( cry )	267:1:9673:9692	1053422	7	True				
ANR	1053849	CallExpression	r_crypto_free ( cry )		1053422	0					
ANR	1053850	Callee	r_crypto_free		1053422	0					
ANR	1053851	Identifier	r_crypto_free		1053422	0					
ANR	1053852	ArgumentList	cry		1053422	1					
ANR	1053853	Argument	cry		1053422	0					
ANR	1053854	Identifier	cry		1053422	0					
ANR	1053855	ReturnStatement	return 1 ;	268:1:9695:9703	1053422	8	True				
ANR	1053856	PrimaryExpression	1		1053422	0					
ANR	1053857	ReturnType	static bool		1053422	1					
ANR	1053858	Identifier	encrypt_or_decrypt_block		1053422	2					
ANR	1053859	ParameterList	"RCore * core , const char * algo , const char * key , int direction , const char * iv"		1053422	3					
ANR	1053860	Parameter	RCore * core	212:37:7971:7981	1053422	0	True				
ANR	1053861	ParameterType	RCore *		1053422	0					
ANR	1053862	Identifier	core		1053422	1					
ANR	1053863	Parameter	const char * algo	212:50:7984:7999	1053422	1	True				
ANR	1053864	ParameterType	const char *		1053422	0					
ANR	1053865	Identifier	algo		1053422	1					
ANR	1053866	Parameter	const char * key	212:68:8002:8016	1053422	2	True				
ANR	1053867	ParameterType	const char *		1053422	0					
ANR	1053868	Identifier	key		1053422	1					
ANR	1053869	Parameter	int direction	212:85:8019:8031	1053422	3	True				
ANR	1053870	ParameterType	int		1053422	0					
ANR	1053871	Identifier	direction		1053422	1					
ANR	1053872	Parameter	const char * iv	212:100:8034:8047	1053422	4	True				
ANR	1053873	ParameterType	const char *		1053422	0					
ANR	1053874	Identifier	iv		1053422	1					
ANR	1053875	CFGEntryNode	ENTRY		1053422		True				
ANR	1053876	CFGExitNode	EXIT		1053422		True				
ANR	1053877	Symbol	r_crypto_set_iv		1053422						
ANR	1053878	Symbol	r_crypto_get_output		1053422						
ANR	1053879	Symbol	keylen		1053422						
ANR	1053880	Symbol	* core		1053422						
ANR	1053881	Symbol	core -> offset		1053422						
ANR	1053882	Symbol	& result_size		1053422						
ANR	1053883	Symbol	r_crypto_use		1053422						
ANR	1053884	Symbol	binkey		1053422						
ANR	1053885	Symbol	result		1053422						
ANR	1053886	Symbol	strncmp		1053422						
ANR	1053887	Symbol	strlen		1053422						
ANR	1053888	Symbol	core -> io		1053422						
ANR	1053889	Symbol	no_key_mode		1053422						
ANR	1053890	Symbol	r_hex_str2bin		1053422						
ANR	1053891	Symbol	key		1053422						
ANR	1053892	Symbol	direction		1053422						
ANR	1053893	Symbol	result_size		1053422						
ANR	1053894	Symbol	strcmp		1053422						
ANR	1053895	Symbol	core -> blocksize		1053422						
ANR	1053896	Symbol	malloc		1053422						
ANR	1053897	Symbol	biniv		1053422						
ANR	1053898	Symbol	NULL		1053422						
ANR	1053899	Symbol	core -> block		1053422						
ANR	1053900	Symbol	false		1053422						
ANR	1053901	Symbol	cry		1053422						
ANR	1053902	Symbol	r_crypto_set_key		1053422						
ANR	1053903	Symbol	iv		1053422						
ANR	1053904	Symbol	core		1053422						
ANR	1053905	Symbol	r_crypto_new		1053422						
ANR	1053906	Symbol	ivlen		1053422						
ANR	1053907	Symbol	strdup		1053422						
ANR	1053908	Symbol	algo		1053422						
ANR	1053909	Function	cmd_write_bits	271:0:9708:10071							
ANR	1053910	FunctionDef	"cmd_write_bits (RCore * core , int set , ut64 val)"		1053909	0					
ANR	1053911	CompoundStatement		271:59:9767:10071	1053909	0					
ANR	1053912	IdentifierDeclStatement	"ut64 ret , orig ;"	272:1:9770:9784	1053909	0	True				
ANR	1053913	IdentifierDecl	ret		1053909	0					
ANR	1053914	IdentifierDeclType	ut64		1053909	0					
ANR	1053915	Identifier	ret		1053909	1					
ANR	1053916	IdentifierDecl	orig		1053909	1					
ANR	1053917	IdentifierDeclType	ut64		1053909	0					
ANR	1053918	Identifier	orig		1053909	1					
ANR	1053919	ExpressionStatement	"r_io_read_at ( core -> io , core -> offset , ( ut8 * ) & orig , sizeof ( orig ) )"	274:1:9832:9897	1053909	1	True				
ANR	1053920	CallExpression	"r_io_read_at ( core -> io , core -> offset , ( ut8 * ) & orig , sizeof ( orig ) )"		1053909	0					
ANR	1053921	Callee	r_io_read_at		1053909	0					
ANR	1053922	Identifier	r_io_read_at		1053909	0					
ANR	1053923	ArgumentList	core -> io		1053909	1					
ANR	1053924	Argument	core -> io		1053909	0					
ANR	1053925	PtrMemberAccess	core -> io		1053909	0					
ANR	1053926	Identifier	core		1053909	0					
ANR	1053927	Identifier	io		1053909	1					
ANR	1053928	Argument	core -> offset		1053909	1					
ANR	1053929	PtrMemberAccess	core -> offset		1053909	0					
ANR	1053930	Identifier	core		1053909	0					
ANR	1053931	Identifier	offset		1053909	1					
ANR	1053932	Argument	( ut8 * ) & orig		1053909	2					
ANR	1053933	CastExpression	( ut8 * ) & orig		1053909	0					
ANR	1053934	CastTarget	ut8 *		1053909	0					
ANR	1053935	UnaryOperationExpression	& orig		1053909	1					
ANR	1053936	UnaryOperator	&		1053909	0					
ANR	1053937	Identifier	orig		1053909	1					
ANR	1053938	Argument	sizeof ( orig )		1053909	3					
ANR	1053939	SizeofExpression	sizeof ( orig )		1053909	0					
ANR	1053940	Sizeof	sizeof		1053909	0					
ANR	1053941	SizeofOperand	orig		1053909	1					
ANR	1053942	IfStatement	if ( set )		1053909	2					
ANR	1053943	Condition	set	275:5:9904:9906	1053909	0	True				
ANR	1053944	Identifier	set		1053909	0					
ANR	1053945	CompoundStatement		5:10:141:141	1053909	1					
ANR	1053946	ExpressionStatement	ret = orig | val	276:2:9913:9929	1053909	0	True				
ANR	1053947	AssignmentExpression	ret = orig | val		1053909	0		=			
ANR	1053948	Identifier	ret		1053909	0					
ANR	1053949	InclusiveOrExpression	orig | val		1053909	1		|			
ANR	1053950	Identifier	orig		1053909	0					
ANR	1053951	Identifier	val		1053909	1					
ANR	1053952	ElseStatement	else		1053909	0					
ANR	1053953	CompoundStatement		7:8:171:171	1053909	0					
ANR	1053954	ExpressionStatement	ret = orig & ( ~ ( val ) )	278:2:9943:9964	1053909	0	True				
ANR	1053955	AssignmentExpression	ret = orig & ( ~ ( val ) )		1053909	0		=			
ANR	1053956	Identifier	ret		1053909	0					
ANR	1053957	BitAndExpression	orig & ( ~ ( val ) )		1053909	1		&			
ANR	1053958	Identifier	orig		1053909	0					
ANR	1053959	UnaryOperationExpression	~ ( val )		1053909	1					
ANR	1053960	UnaryOperator	~		1053909	0					
ANR	1053961	Identifier	val		1053909	1					
ANR	1053962	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , ( const ut8 * ) & ret , sizeof ( ret ) ) )"		1053909	3					
ANR	1053963	Condition	"! r_core_write_at ( core , core -> offset , ( const ut8 * ) & ret , sizeof ( ret ) )"	280:5:9974:10042	1053909	0	True				
ANR	1053964	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , ( const ut8 * ) & ret , sizeof ( ret ) )"		1053909	0					
ANR	1053965	UnaryOperator	!		1053909	0					
ANR	1053966	CallExpression	"r_core_write_at ( core , core -> offset , ( const ut8 * ) & ret , sizeof ( ret ) )"		1053909	1					
ANR	1053967	Callee	r_core_write_at		1053909	0					
ANR	1053968	Identifier	r_core_write_at		1053909	0					
ANR	1053969	ArgumentList	core		1053909	1					
ANR	1053970	Argument	core		1053909	0					
ANR	1053971	Identifier	core		1053909	0					
ANR	1053972	Argument	core -> offset		1053909	1					
ANR	1053973	PtrMemberAccess	core -> offset		1053909	0					
ANR	1053974	Identifier	core		1053909	0					
ANR	1053975	Identifier	offset		1053909	1					
ANR	1053976	Argument	( const ut8 * ) & ret		1053909	2					
ANR	1053977	CastExpression	( const ut8 * ) & ret		1053909	0					
ANR	1053978	CastTarget	const ut8 *		1053909	0					
ANR	1053979	UnaryOperationExpression	& ret		1053909	1					
ANR	1053980	UnaryOperator	&		1053909	0					
ANR	1053981	Identifier	ret		1053909	1					
ANR	1053982	Argument	sizeof ( ret )		1053909	3					
ANR	1053983	SizeofExpression	sizeof ( ret )		1053909	0					
ANR	1053984	Sizeof	sizeof		1053909	0					
ANR	1053985	SizeofOperand	ret		1053909	1					
ANR	1053986	CompoundStatement		10:76:277:277	1053909	1					
ANR	1053987	ExpressionStatement	cmd_write_fail ( )	281:2:10049:10066	1053909	0	True				
ANR	1053988	CallExpression	cmd_write_fail ( )		1053909	0					
ANR	1053989	Callee	cmd_write_fail		1053909	0					
ANR	1053990	Identifier	cmd_write_fail		1053909	0					
ANR	1053991	ArgumentList			1053909	1					
ANR	1053992	ReturnType	static void		1053909	1					
ANR	1053993	Identifier	cmd_write_bits		1053909	2					
ANR	1053994	ParameterList	"RCore * core , int set , ut64 val"		1053909	3					
ANR	1053995	Parameter	RCore * core	271:27:9735:9745	1053909	0	True				
ANR	1053996	ParameterType	RCore *		1053909	0					
ANR	1053997	Identifier	core		1053909	1					
ANR	1053998	Parameter	int set	271:40:9748:9754	1053909	1	True				
ANR	1053999	ParameterType	int		1053909	0					
ANR	1054000	Identifier	set		1053909	1					
ANR	1054001	Parameter	ut64 val	271:49:9757:9764	1053909	2	True				
ANR	1054002	ParameterType	ut64		1053909	0					
ANR	1054003	Identifier	val		1053909	1					
ANR	1054004	CFGEntryNode	ENTRY		1053909		True				
ANR	1054005	CFGExitNode	EXIT		1053909		True				
ANR	1054006	Symbol	val		1053909						
ANR	1054007	Symbol	ret		1053909						
ANR	1054008	Symbol	& ret		1053909						
ANR	1054009	Symbol	core		1053909						
ANR	1054010	Symbol	set		1053909						
ANR	1054011	Symbol	core -> io		1053909						
ANR	1054012	Symbol	& orig		1053909						
ANR	1054013	Symbol	orig		1053909						
ANR	1054014	Symbol	* core		1053909						
ANR	1054015	Symbol	core -> offset		1053909						
ANR	1054016	Symbol	r_core_write_at		1053909						
ANR	1054017	Function	cmd_write_inc	285:0:10074:10510							
ANR	1054018	FunctionDef	"cmd_write_inc (RCore * core , int size , st64 num)"		1054017	0					
ANR	1054019	CompoundStatement		285:59:10133:10510	1054017	0					
ANR	1054020	IdentifierDeclStatement	ut64 * v64 ;	286:1:10136:10145	1054017	0	True				
ANR	1054021	IdentifierDecl	* v64		1054017	0					
ANR	1054022	IdentifierDeclType	ut64 *		1054017	0					
ANR	1054023	Identifier	v64		1054017	1					
ANR	1054024	IdentifierDeclStatement	ut32 * v32 ;	287:1:10148:10157	1054017	1	True				
ANR	1054025	IdentifierDecl	* v32		1054017	0					
ANR	1054026	IdentifierDeclType	ut32 *		1054017	0					
ANR	1054027	Identifier	v32		1054017	1					
ANR	1054028	IdentifierDeclStatement	ut16 * v16 ;	288:1:10160:10169	1054017	2	True				
ANR	1054029	IdentifierDecl	* v16		1054017	0					
ANR	1054030	IdentifierDeclType	ut16 *		1054017	0					
ANR	1054031	Identifier	v16		1054017	1					
ANR	1054032	IdentifierDeclStatement	ut8 * v8 ;	289:1:10172:10179	1054017	3	True				
ANR	1054033	IdentifierDecl	* v8		1054017	0					
ANR	1054034	IdentifierDeclType	ut8 *		1054017	0					
ANR	1054035	Identifier	v8		1054017	1					
ANR	1054036	SwitchStatement	switch ( size )		1054017	4					
ANR	1054037	Condition	size	290:9:10190:10193	1054017	0	True				
ANR	1054038	Identifier	size		1054017	0					
ANR	1054039	CompoundStatement		6:15:62:62	1054017	1					
ANR	1054040	Label	case 1 :	291:1:10199:10205	1054017	0	True				
ANR	1054041	ExpressionStatement	v8 = ( ut8 * ) core -> block	291:9:10207:10229	1054017	1	True				
ANR	1054042	AssignmentExpression	v8 = ( ut8 * ) core -> block		1054017	0		=			
ANR	1054043	Identifier	v8		1054017	0					
ANR	1054044	CastExpression	( ut8 * ) core -> block		1054017	1					
ANR	1054045	CastTarget	ut8 *		1054017	0					
ANR	1054046	PtrMemberAccess	core -> block		1054017	1					
ANR	1054047	Identifier	core		1054017	0					
ANR	1054048	Identifier	block		1054017	1					
ANR	1054049	ExpressionStatement	* v8 += num	291:33:10231:10241	1054017	2	True				
ANR	1054050	AssignmentExpression	* v8 += num		1054017	0		+=			
ANR	1054051	UnaryOperationExpression	* v8		1054017	0					
ANR	1054052	UnaryOperator	*		1054017	0					
ANR	1054053	Identifier	v8		1054017	1					
ANR	1054054	Identifier	num		1054017	1					
ANR	1054055	BreakStatement	break ;	291:45:10243:10248	1054017	3	True				
ANR	1054056	Label	case 2 :	292:1:10251:10257	1054017	4	True				
ANR	1054057	ExpressionStatement	v16 = ( ut16 * ) core -> block	292:9:10259:10283	1054017	5	True				
ANR	1054058	AssignmentExpression	v16 = ( ut16 * ) core -> block		1054017	0		=			
ANR	1054059	Identifier	v16		1054017	0					
ANR	1054060	CastExpression	( ut16 * ) core -> block		1054017	1					
ANR	1054061	CastTarget	ut16 *		1054017	0					
ANR	1054062	PtrMemberAccess	core -> block		1054017	1					
ANR	1054063	Identifier	core		1054017	0					
ANR	1054064	Identifier	block		1054017	1					
ANR	1054065	ExpressionStatement	* v16 += num	292:35:10285:10296	1054017	6	True				
ANR	1054066	AssignmentExpression	* v16 += num		1054017	0		+=			
ANR	1054067	UnaryOperationExpression	* v16		1054017	0					
ANR	1054068	UnaryOperator	*		1054017	0					
ANR	1054069	Identifier	v16		1054017	1					
ANR	1054070	Identifier	num		1054017	1					
ANR	1054071	BreakStatement	break ;	292:48:10298:10303	1054017	7	True				
ANR	1054072	Label	case 4 :	293:1:10306:10312	1054017	8	True				
ANR	1054073	ExpressionStatement	v32 = ( ut32 * ) core -> block	293:9:10314:10338	1054017	9	True				
ANR	1054074	AssignmentExpression	v32 = ( ut32 * ) core -> block		1054017	0		=			
ANR	1054075	Identifier	v32		1054017	0					
ANR	1054076	CastExpression	( ut32 * ) core -> block		1054017	1					
ANR	1054077	CastTarget	ut32 *		1054017	0					
ANR	1054078	PtrMemberAccess	core -> block		1054017	1					
ANR	1054079	Identifier	core		1054017	0					
ANR	1054080	Identifier	block		1054017	1					
ANR	1054081	ExpressionStatement	* v32 += num	293:35:10340:10351	1054017	10	True				
ANR	1054082	AssignmentExpression	* v32 += num		1054017	0		+=			
ANR	1054083	UnaryOperationExpression	* v32		1054017	0					
ANR	1054084	UnaryOperator	*		1054017	0					
ANR	1054085	Identifier	v32		1054017	1					
ANR	1054086	Identifier	num		1054017	1					
ANR	1054087	BreakStatement	break ;	293:48:10353:10358	1054017	11	True				
ANR	1054088	Label	case 8 :	294:1:10361:10367	1054017	12	True				
ANR	1054089	ExpressionStatement	v64 = ( ut64 * ) core -> block	294:9:10369:10393	1054017	13	True				
ANR	1054090	AssignmentExpression	v64 = ( ut64 * ) core -> block		1054017	0		=			
ANR	1054091	Identifier	v64		1054017	0					
ANR	1054092	CastExpression	( ut64 * ) core -> block		1054017	1					
ANR	1054093	CastTarget	ut64 *		1054017	0					
ANR	1054094	PtrMemberAccess	core -> block		1054017	1					
ANR	1054095	Identifier	core		1054017	0					
ANR	1054096	Identifier	block		1054017	1					
ANR	1054097	ExpressionStatement	* v64 += num	294:35:10395:10406	1054017	14	True				
ANR	1054098	AssignmentExpression	* v64 += num		1054017	0		+=			
ANR	1054099	UnaryOperationExpression	* v64		1054017	0					
ANR	1054100	UnaryOperator	*		1054017	0					
ANR	1054101	Identifier	v64		1054017	1					
ANR	1054102	Identifier	num		1054017	1					
ANR	1054103	BreakStatement	break ;	294:48:10408:10413	1054017	15	True				
ANR	1054104	ExpressionStatement	"r_core_write_at ( core , core -> offset , core -> block , size )"	297:8:10453:10508	1054017	5	True				
ANR	1054105	CallExpression	"r_core_write_at ( core , core -> offset , core -> block , size )"		1054017	0					
ANR	1054106	Callee	r_core_write_at		1054017	0					
ANR	1054107	Identifier	r_core_write_at		1054017	0					
ANR	1054108	ArgumentList	core		1054017	1					
ANR	1054109	Argument	core		1054017	0					
ANR	1054110	Identifier	core		1054017	0					
ANR	1054111	Argument	core -> offset		1054017	1					
ANR	1054112	PtrMemberAccess	core -> offset		1054017	0					
ANR	1054113	Identifier	core		1054017	0					
ANR	1054114	Identifier	offset		1054017	1					
ANR	1054115	Argument	core -> block		1054017	2					
ANR	1054116	PtrMemberAccess	core -> block		1054017	0					
ANR	1054117	Identifier	core		1054017	0					
ANR	1054118	Identifier	block		1054017	1					
ANR	1054119	Argument	size		1054017	3					
ANR	1054120	Identifier	size		1054017	0					
ANR	1054121	ReturnType	static void		1054017	1					
ANR	1054122	Identifier	cmd_write_inc		1054017	2					
ANR	1054123	ParameterList	"RCore * core , int size , st64 num"		1054017	3					
ANR	1054124	Parameter	RCore * core	285:26:10100:10110	1054017	0	True				
ANR	1054125	ParameterType	RCore *		1054017	0					
ANR	1054126	Identifier	core		1054017	1					
ANR	1054127	Parameter	int size	285:39:10113:10120	1054017	1	True				
ANR	1054128	ParameterType	int		1054017	0					
ANR	1054129	Identifier	size		1054017	1					
ANR	1054130	Parameter	st64 num	285:49:10123:10130	1054017	2	True				
ANR	1054131	ParameterType	st64		1054017	0					
ANR	1054132	Identifier	num		1054017	1					
ANR	1054133	CFGEntryNode	ENTRY		1054017		True				
ANR	1054134	CFGExitNode	EXIT		1054017		True				
ANR	1054135	Symbol	v8		1054017						
ANR	1054136	Symbol	core -> block		1054017						
ANR	1054137	Symbol	* v16		1054017						
ANR	1054138	Symbol	num		1054017						
ANR	1054139	Symbol	* core		1054017						
ANR	1054140	Symbol	core -> offset		1054017						
ANR	1054141	Symbol	* v8		1054017						
ANR	1054142	Symbol	core		1054017						
ANR	1054143	Symbol	size		1054017						
ANR	1054144	Symbol	v32		1054017						
ANR	1054145	Symbol	v64		1054017						
ANR	1054146	Symbol	v16		1054017						
ANR	1054147	Symbol	* v64		1054017						
ANR	1054148	Symbol	* v32		1054017						
ANR	1054149	Function	cmd_write_op	300:0:10513:14105							
ANR	1054150	FunctionDef	"cmd_write_op (RCore * core , const char * input)"		1054149	0					
ANR	1054151	CompoundStatement		300:58:10571:14105	1054149	0					
ANR	1054152	IdentifierDeclStatement	ut8 * buf ;	301:1:10574:10582	1054149	0	True				
ANR	1054153	IdentifierDecl	* buf		1054149	0					
ANR	1054154	IdentifierDeclType	ut8 *		1054149	0					
ANR	1054155	Identifier	buf		1054149	1					
ANR	1054156	IdentifierDeclStatement	int len ;	302:1:10585:10592	1054149	1	True				
ANR	1054157	IdentifierDecl	len		1054149	0					
ANR	1054158	IdentifierDeclType	int		1054149	0					
ANR	1054159	Identifier	len		1054149	1					
ANR	1054160	IdentifierDeclStatement	int value ;	303:1:10595:10604	1054149	2	True				
ANR	1054161	IdentifierDecl	value		1054149	0					
ANR	1054162	IdentifierDeclType	int		1054149	0					
ANR	1054163	Identifier	value		1054149	1					
ANR	1054164	IfStatement	if ( ! input [ 0 ] )		1054149	3					
ANR	1054165	Condition	! input [ 0 ]	304:5:10611:10619	1054149	0	True				
ANR	1054166	UnaryOperationExpression	! input [ 0 ]		1054149	0					
ANR	1054167	UnaryOperator	!		1054149	0					
ANR	1054168	ArrayIndexing	input [ 0 ]		1054149	1					
ANR	1054169	Identifier	input		1054149	0					
ANR	1054170	PrimaryExpression	0		1054149	1					
ANR	1054171	ReturnStatement	return ;	305:2:10624:10630	1054149	1	True				
ANR	1054172	SwitchStatement	switch ( input [ 1 ] )		1054149	4					
ANR	1054173	Condition	input [ 1 ]	306:9:10641:10648	1054149	0	True				
ANR	1054174	ArrayIndexing	input [ 1 ]		1054149	0					
ANR	1054175	Identifier	input		1054149	0					
ANR	1054176	PrimaryExpression	1		1054149	1					
ANR	1054177	CompoundStatement		7:19:79:79	1054149	1					
ANR	1054178	Label	case 'e' :	307:1:10654:10662	1054149	0	True				
ANR	1054179	IfStatement	if ( input [ 2 ] != ' ' )		1054149	1					
ANR	1054180	Condition	input [ 2 ] != ' '	308:6:10670:10682	1054149	0	True				
ANR	1054181	EqualityExpression	input [ 2 ] != ' '		1054149	0		!=			
ANR	1054182	ArrayIndexing	input [ 2 ]		1054149	0					
ANR	1054183	Identifier	input		1054149	0					
ANR	1054184	PrimaryExpression	2		1054149	1					
ANR	1054185	PrimaryExpression	' '		1054149	1					
ANR	1054186	CompoundStatement		9:21:113:113	1054149	1					
ANR	1054187	ExpressionStatement	"r_cons_printf ( ""Usage: 'woe from-to step'\\n"" )"	309:3:10690:10735	1054149	0	True				
ANR	1054188	CallExpression	"r_cons_printf ( ""Usage: 'woe from-to step'\\n"" )"		1054149	0					
ANR	1054189	Callee	r_cons_printf		1054149	0					
ANR	1054190	Identifier	r_cons_printf		1054149	0					
ANR	1054191	ArgumentList	"""Usage: 'woe from-to step'\\n"""		1054149	1					
ANR	1054192	Argument	"""Usage: 'woe from-to step'\\n"""		1054149	0					
ANR	1054193	PrimaryExpression	"""Usage: 'woe from-to step'\\n"""		1054149	0					
ANR	1054194	ReturnStatement	return ;	310:3:10740:10746	1054149	1	True				
ANR	1054195	Label	case 'a' :	313:1:10770:10778	1054149	2	True				
ANR	1054196	Label	case 's' :	314:1:10781:10789	1054149	3	True				
ANR	1054197	Label	case 'A' :	315:1:10792:10800	1054149	4	True				
ANR	1054198	Label	case 'x' :	316:1:10803:10811	1054149	5	True				
ANR	1054199	Label	case 'r' :	317:1:10814:10822	1054149	6	True				
ANR	1054200	Label	case 'l' :	318:1:10825:10833	1054149	7	True				
ANR	1054201	Label	case 'm' :	319:1:10836:10844	1054149	8	True				
ANR	1054202	Label	case 'd' :	320:1:10847:10855	1054149	9	True				
ANR	1054203	Label	case 'o' :	321:1:10858:10866	1054149	10	True				
ANR	1054204	Label	case 'w' :	322:1:10869:10877	1054149	11	True				
ANR	1054205	Label	case '2' :	323:1:10880:10888	1054149	12	True				
ANR	1054206	Label	case '4' :	324:1:10900:10908	1054149	13	True				
ANR	1054207	Label	case '8' :	325:1:10920:10928	1054149	14	True				
ANR	1054208	IfStatement	if ( input [ 2 ] )		1054149	15					
ANR	1054209	Condition	input [ 2 ]	326:6:10945:10952	1054149	0	True				
ANR	1054210	ArrayIndexing	input [ 2 ]		1054149	0					
ANR	1054211	Identifier	input		1054149	0					
ANR	1054212	PrimaryExpression	2		1054149	1					
ANR	1054213	CompoundStatement		27:16:383:383	1054149	1					
ANR	1054214	ExpressionStatement	"r_core_write_op ( core , input + 3 , input [ 1 ] )"	327:3:10983:11026	1054149	0	True				
ANR	1054215	CallExpression	"r_core_write_op ( core , input + 3 , input [ 1 ] )"		1054149	0					
ANR	1054216	Callee	r_core_write_op		1054149	0					
ANR	1054217	Identifier	r_core_write_op		1054149	0					
ANR	1054218	ArgumentList	core		1054149	1					
ANR	1054219	Argument	core		1054149	0					
ANR	1054220	Identifier	core		1054149	0					
ANR	1054221	Argument	input + 3		1054149	1					
ANR	1054222	AdditiveExpression	input + 3		1054149	0		+			
ANR	1054223	Identifier	input		1054149	0					
ANR	1054224	PrimaryExpression	3		1054149	1					
ANR	1054225	Argument	input [ 1 ]		1054149	2					
ANR	1054226	ArrayIndexing	input [ 1 ]		1054149	0					
ANR	1054227	Identifier	input		1054149	0					
ANR	1054228	PrimaryExpression	1		1054149	1					
ANR	1054229	ElseStatement	else		1054149	0					
ANR	1054230	CompoundStatement		29:9:465:465	1054149	0					
ANR	1054231	ExpressionStatement	"r_core_write_op ( core , NULL , input [ 1 ] )"	329:3:11075:11113	1054149	0	True				
ANR	1054232	CallExpression	"r_core_write_op ( core , NULL , input [ 1 ] )"		1054149	0					
ANR	1054233	Callee	r_core_write_op		1054149	0					
ANR	1054234	Identifier	r_core_write_op		1054149	0					
ANR	1054235	ArgumentList	core		1054149	1					
ANR	1054236	Argument	core		1054149	0					
ANR	1054237	Identifier	core		1054149	0					
ANR	1054238	Argument	NULL		1054149	1					
ANR	1054239	Identifier	NULL		1054149	0					
ANR	1054240	Argument	input [ 1 ]		1054149	2					
ANR	1054241	ArrayIndexing	input [ 1 ]		1054149	0					
ANR	1054242	Identifier	input		1054149	0					
ANR	1054243	PrimaryExpression	1		1054149	1					
ANR	1054244	ExpressionStatement	r_core_block_read ( core )	331:2:11121:11145	1054149	16	True				
ANR	1054245	CallExpression	r_core_block_read ( core )		1054149	0					
ANR	1054246	Callee	r_core_block_read		1054149	0					
ANR	1054247	Identifier	r_core_block_read		1054149	0					
ANR	1054248	ArgumentList	core		1054149	1					
ANR	1054249	Argument	core		1054149	0					
ANR	1054250	Identifier	core		1054149	0					
ANR	1054251	BreakStatement	break ;	332:2:11149:11154	1054149	17	True				
ANR	1054252	Label	case 'R' :	333:1:11157:11165	1054149	18	True				
ANR	1054253	ExpressionStatement	"r_core_cmd0 ( core , ""wr $b"" )"	334:2:11169:11196	1054149	19	True				
ANR	1054254	CallExpression	"r_core_cmd0 ( core , ""wr $b"" )"		1054149	0					
ANR	1054255	Callee	r_core_cmd0		1054149	0					
ANR	1054256	Identifier	r_core_cmd0		1054149	0					
ANR	1054257	ArgumentList	core		1054149	1					
ANR	1054258	Argument	core		1054149	0					
ANR	1054259	Identifier	core		1054149	0					
ANR	1054260	Argument	"""wr $b"""		1054149	1					
ANR	1054261	PrimaryExpression	"""wr $b"""		1054149	0					
ANR	1054262	BreakStatement	break ;	335:2:11200:11205	1054149	20	True				
ANR	1054263	Label	case 'n' :	336:1:11208:11216	1054149	21	True				
ANR	1054264	ExpressionStatement	"r_core_write_op ( core , ""ff"" , 'x' )"	337:2:11220:11253	1054149	22	True				
ANR	1054265	CallExpression	"r_core_write_op ( core , ""ff"" , 'x' )"		1054149	0					
ANR	1054266	Callee	r_core_write_op		1054149	0					
ANR	1054267	Identifier	r_core_write_op		1054149	0					
ANR	1054268	ArgumentList	core		1054149	1					
ANR	1054269	Argument	core		1054149	0					
ANR	1054270	Identifier	core		1054149	0					
ANR	1054271	Argument	"""ff"""		1054149	1					
ANR	1054272	PrimaryExpression	"""ff"""		1054149	0					
ANR	1054273	Argument	'x'		1054149	2					
ANR	1054274	PrimaryExpression	'x'		1054149	0					
ANR	1054275	ExpressionStatement	r_core_block_read ( core )	338:2:11257:11281	1054149	23	True				
ANR	1054276	CallExpression	r_core_block_read ( core )		1054149	0					
ANR	1054277	Callee	r_core_block_read		1054149	0					
ANR	1054278	Identifier	r_core_block_read		1054149	0					
ANR	1054279	ArgumentList	core		1054149	1					
ANR	1054280	Argument	core		1054149	0					
ANR	1054281	Identifier	core		1054149	0					
ANR	1054282	BreakStatement	break ;	339:2:11285:11290	1054149	24	True				
ANR	1054283	Label	case 'E' :	340:1:11293:11301	1054149	25	True				
ANR	1054284	Label	case 'D' :	341:1:11321:11329	1054149	26	True				
ANR	1054285	CompoundStatement		48:3:910:963	1054149	27					
ANR	1054286	IdentifierDeclStatement	int direction = ( input [ 1 ] == 'E' ) ? 0 : 1 ;	343:3:11355:11396	1054149	0	True				
ANR	1054287	IdentifierDecl	direction = ( input [ 1 ] == 'E' ) ? 0 : 1		1054149	0					
ANR	1054288	IdentifierDeclType	int		1054149	0					
ANR	1054289	Identifier	direction		1054149	1					
ANR	1054290	AssignmentExpression	direction = ( input [ 1 ] == 'E' ) ? 0 : 1		1054149	2		=			
ANR	1054291	Identifier	direction		1054149	0					
ANR	1054292	ConditionalExpression	( input [ 1 ] == 'E' ) ? 0 : 1		1054149	1					
ANR	1054293	Condition	input [ 1 ] == 'E'		1054149	0					
ANR	1054294	EqualityExpression	input [ 1 ] == 'E'		1054149	0		==			
ANR	1054295	ArrayIndexing	input [ 1 ]		1054149	0					
ANR	1054296	Identifier	input		1054149	0					
ANR	1054297	PrimaryExpression	1		1054149	1					
ANR	1054298	PrimaryExpression	'E'		1054149	1					
ANR	1054299	PrimaryExpression	0		1054149	1					
ANR	1054300	PrimaryExpression	1		1054149	2					
ANR	1054301	IdentifierDeclStatement	const char * algo = NULL ;	344:3:11401:11424	1054149	1	True				
ANR	1054302	IdentifierDecl	* algo = NULL		1054149	0					
ANR	1054303	IdentifierDeclType	const char *		1054149	0					
ANR	1054304	Identifier	algo		1054149	1					
ANR	1054305	AssignmentExpression	* algo = NULL		1054149	2		=			
ANR	1054306	Identifier	NULL		1054149	0					
ANR	1054307	Identifier	NULL		1054149	1					
ANR	1054308	IdentifierDeclStatement	const char * key = NULL ;	345:3:11429:11451	1054149	2	True				
ANR	1054309	IdentifierDecl	* key = NULL		1054149	0					
ANR	1054310	IdentifierDeclType	const char *		1054149	0					
ANR	1054311	Identifier	key		1054149	1					
ANR	1054312	AssignmentExpression	* key = NULL		1054149	2		=			
ANR	1054313	Identifier	NULL		1054149	0					
ANR	1054314	Identifier	NULL		1054149	1					
ANR	1054315	IdentifierDeclStatement	const char * iv = NULL ;	346:3:11456:11477	1054149	3	True				
ANR	1054316	IdentifierDecl	* iv = NULL		1054149	0					
ANR	1054317	IdentifierDeclType	const char *		1054149	0					
ANR	1054318	Identifier	iv		1054149	1					
ANR	1054319	AssignmentExpression	* iv = NULL		1054149	2		=			
ANR	1054320	Identifier	NULL		1054149	0					
ANR	1054321	Identifier	NULL		1054149	1					
ANR	1054322	IdentifierDeclStatement	"char * space , * args = strdup ( r_str_trim_ro ( input + 2 ) ) ;"	347:3:11482:11535	1054149	4	True				
ANR	1054323	IdentifierDecl	* space		1054149	0					
ANR	1054324	IdentifierDeclType	char *		1054149	0					
ANR	1054325	Identifier	space		1054149	1					
ANR	1054326	IdentifierDecl	* args = strdup ( r_str_trim_ro ( input + 2 ) )		1054149	1					
ANR	1054327	IdentifierDeclType	char *		1054149	0					
ANR	1054328	Identifier	args		1054149	1					
ANR	1054329	AssignmentExpression	* args = strdup ( r_str_trim_ro ( input + 2 ) )		1054149	2		=			
ANR	1054330	Identifier	args		1054149	0					
ANR	1054331	CallExpression	strdup ( r_str_trim_ro ( input + 2 ) )		1054149	1					
ANR	1054332	Callee	strdup		1054149	0					
ANR	1054333	Identifier	strdup		1054149	0					
ANR	1054334	ArgumentList	r_str_trim_ro ( input + 2 )		1054149	1					
ANR	1054335	Argument	r_str_trim_ro ( input + 2 )		1054149	0					
ANR	1054336	CallExpression	r_str_trim_ro ( input + 2 )		1054149	0					
ANR	1054337	Callee	r_str_trim_ro		1054149	0					
ANR	1054338	Identifier	r_str_trim_ro		1054149	0					
ANR	1054339	ArgumentList	input + 2		1054149	1					
ANR	1054340	Argument	input + 2		1054149	0					
ANR	1054341	AdditiveExpression	input + 2		1054149	0		+			
ANR	1054342	Identifier	input		1054149	0					
ANR	1054343	PrimaryExpression	2		1054149	1					
ANR	1054344	ExpressionStatement	"space = strchr ( args , ' ' )"	348:3:11540:11566	1054149	5	True				
ANR	1054345	AssignmentExpression	"space = strchr ( args , ' ' )"		1054149	0		=			
ANR	1054346	Identifier	space		1054149	0					
ANR	1054347	CallExpression	"strchr ( args , ' ' )"		1054149	1					
ANR	1054348	Callee	strchr		1054149	0					
ANR	1054349	Identifier	strchr		1054149	0					
ANR	1054350	ArgumentList	args		1054149	1					
ANR	1054351	Argument	args		1054149	0					
ANR	1054352	Identifier	args		1054149	0					
ANR	1054353	Argument	' '		1054149	1					
ANR	1054354	PrimaryExpression	' '		1054149	0					
ANR	1054355	IfStatement	if ( space )		1054149	6					
ANR	1054356	Condition	space	349:7:11575:11579	1054149	0	True				
ANR	1054357	Identifier	space		1054149	0					
ANR	1054358	CompoundStatement		50:14:1010:1010	1054149	1					
ANR	1054359	ExpressionStatement	* space ++ = 0	350:4:11588:11600	1054149	0	True				
ANR	1054360	AssignmentExpression	* space ++ = 0		1054149	0		=			
ANR	1054361	UnaryOperationExpression	* space ++		1054149	0					
ANR	1054362	UnaryOperator	*		1054149	0					
ANR	1054363	PostIncDecOperationExpression	space ++		1054149	1					
ANR	1054364	Identifier	space		1054149	0					
ANR	1054365	IncDec	++		1054149	1					
ANR	1054366	PrimaryExpression	0		1054149	1					
ANR	1054367	ExpressionStatement	key = space	351:4:11606:11617	1054149	1	True				
ANR	1054368	AssignmentExpression	key = space		1054149	0		=			
ANR	1054369	Identifier	key		1054149	0					
ANR	1054370	Identifier	space		1054149	1					
ANR	1054371	ExpressionStatement	"space = strchr ( key , ' ' )"	352:4:11623:11648	1054149	2	True				
ANR	1054372	AssignmentExpression	"space = strchr ( key , ' ' )"		1054149	0		=			
ANR	1054373	Identifier	space		1054149	0					
ANR	1054374	CallExpression	"strchr ( key , ' ' )"		1054149	1					
ANR	1054375	Callee	strchr		1054149	0					
ANR	1054376	Identifier	strchr		1054149	0					
ANR	1054377	ArgumentList	key		1054149	1					
ANR	1054378	Argument	key		1054149	0					
ANR	1054379	Identifier	key		1054149	0					
ANR	1054380	Argument	' '		1054149	1					
ANR	1054381	PrimaryExpression	' '		1054149	0					
ANR	1054382	IfStatement	if ( space )		1054149	3					
ANR	1054383	Condition	space	353:8:11658:11662	1054149	0	True				
ANR	1054384	Identifier	space		1054149	0					
ANR	1054385	CompoundStatement		54:15:1093:1093	1054149	1					
ANR	1054386	ExpressionStatement	* space ++ = 0	354:5:11672:11684	1054149	0	True				
ANR	1054387	AssignmentExpression	* space ++ = 0		1054149	0		=			
ANR	1054388	UnaryOperationExpression	* space ++		1054149	0					
ANR	1054389	UnaryOperator	*		1054149	0					
ANR	1054390	PostIncDecOperationExpression	space ++		1054149	1					
ANR	1054391	Identifier	space		1054149	0					
ANR	1054392	IncDec	++		1054149	1					
ANR	1054393	PrimaryExpression	0		1054149	1					
ANR	1054394	ExpressionStatement	iv = space	355:5:11691:11701	1054149	1	True				
ANR	1054395	AssignmentExpression	iv = space		1054149	0		=			
ANR	1054396	Identifier	iv		1054149	0					
ANR	1054397	Identifier	space		1054149	1					
ANR	1054398	ExpressionStatement	algo = args	358:3:11717:11728	1054149	7	True				
ANR	1054399	AssignmentExpression	algo = args		1054149	0		=			
ANR	1054400	Identifier	algo		1054149	0					
ANR	1054401	Identifier	args		1054149	1					
ANR	1054402	IfStatement	if ( algo && * algo && key )		1054149	8					
ANR	1054403	Condition	algo && * algo && key	359:7:11737:11756	1054149	0	True				
ANR	1054404	AndExpression	algo && * algo && key		1054149	0		&&			
ANR	1054405	Identifier	algo		1054149	0					
ANR	1054406	AndExpression	* algo && key		1054149	1		&&			
ANR	1054407	UnaryOperationExpression	* algo		1054149	0					
ANR	1054408	UnaryOperator	*		1054149	0					
ANR	1054409	Identifier	algo		1054149	1					
ANR	1054410	Identifier	key		1054149	1					
ANR	1054411	CompoundStatement		60:29:1187:1187	1054149	1					
ANR	1054412	ExpressionStatement	"encrypt_or_decrypt_block ( core , algo , key , direction , iv )"	360:4:11765:11822	1054149	0	True				
ANR	1054413	CallExpression	"encrypt_or_decrypt_block ( core , algo , key , direction , iv )"		1054149	0					
ANR	1054414	Callee	encrypt_or_decrypt_block		1054149	0					
ANR	1054415	Identifier	encrypt_or_decrypt_block		1054149	0					
ANR	1054416	ArgumentList	core		1054149	1					
ANR	1054417	Argument	core		1054149	0					
ANR	1054418	Identifier	core		1054149	0					
ANR	1054419	Argument	algo		1054149	1					
ANR	1054420	Identifier	algo		1054149	0					
ANR	1054421	Argument	key		1054149	2					
ANR	1054422	Identifier	key		1054149	0					
ANR	1054423	Argument	direction		1054149	3					
ANR	1054424	Identifier	direction		1054149	0					
ANR	1054425	Argument	iv		1054149	4					
ANR	1054426	Identifier	iv		1054149	0					
ANR	1054427	ElseStatement	else		1054149	0					
ANR	1054428	CompoundStatement		66:4:1403:1408	1054149	0					
ANR	1054429	ExpressionStatement	"eprintf ( ""Usage: wo%c [algo] [key] [IV]\\n"" , ( ( ! direction ) ? 'E' : 'D' ) )"	362:4:11840:11907	1054149	0	True				
ANR	1054430	CallExpression	"eprintf ( ""Usage: wo%c [algo] [key] [IV]\\n"" , ( ( ! direction ) ? 'E' : 'D' ) )"		1054149	0					
ANR	1054431	Callee	eprintf		1054149	0					
ANR	1054432	Identifier	eprintf		1054149	0					
ANR	1054433	ArgumentList	"""Usage: wo%c [algo] [key] [IV]\\n"""		1054149	1					
ANR	1054434	Argument	"""Usage: wo%c [algo] [key] [IV]\\n"""		1054149	0					
ANR	1054435	PrimaryExpression	"""Usage: wo%c [algo] [key] [IV]\\n"""		1054149	0					
ANR	1054436	Argument	( ! direction ) ? 'E' : 'D'		1054149	1					
ANR	1054437	ConditionalExpression	( ! direction ) ? 'E' : 'D'		1054149	0					
ANR	1054438	Condition	! direction		1054149	0					
ANR	1054439	UnaryOperationExpression	! direction		1054149	0					
ANR	1054440	UnaryOperator	!		1054149	0					
ANR	1054441	Identifier	direction		1054149	1					
ANR	1054442	PrimaryExpression	'E'		1054149	1					
ANR	1054443	PrimaryExpression	'D'		1054149	2					
ANR	1054444	ExpressionStatement	"eprintf ( ""Currently supported hashes:\\n"" )"	363:4:11913:11954	1054149	1	True				
ANR	1054445	CallExpression	"eprintf ( ""Currently supported hashes:\\n"" )"		1054149	0					
ANR	1054446	Callee	eprintf		1054149	0					
ANR	1054447	Identifier	eprintf		1054149	0					
ANR	1054448	ArgumentList	"""Currently supported hashes:\\n"""		1054149	1					
ANR	1054449	Argument	"""Currently supported hashes:\\n"""		1054149	0					
ANR	1054450	PrimaryExpression	"""Currently supported hashes:\\n"""		1054149	0					
ANR	1054451	IdentifierDeclStatement	ut64 bits ;	364:4:11960:11969	1054149	2	True				
ANR	1054452	IdentifierDecl	bits		1054149	0					
ANR	1054453	IdentifierDeclType	ut64		1054149	0					
ANR	1054454	Identifier	bits		1054149	1					
ANR	1054455	IdentifierDeclStatement	int i ;	365:4:11975:11980	1054149	3	True				
ANR	1054456	IdentifierDecl	i		1054149	0					
ANR	1054457	IdentifierDeclType	int		1054149	0					
ANR	1054458	Identifier	i		1054149	1					
ANR	1054459	ForStatement	for ( i = 0 ; ; i ++ )		1054149	4					
ANR	1054460	ForInit	i = 0 ;	366:9:11991:11996	1054149	0	True				
ANR	1054461	AssignmentExpression	i = 0		1054149	0		=			
ANR	1054462	Identifier	i		1054149	0					
ANR	1054463	PrimaryExpression	0		1054149	1					
ANR	1054464	PostIncDecOperationExpression	i ++	366:18:12000:12002	1054149	1	True				
ANR	1054465	Identifier	i		1054149	0					
ANR	1054466	IncDec	++		1054149	1					
ANR	1054467	CompoundStatement		69:5:1468:1505	1054149	2					
ANR	1054468	ExpressionStatement	bits = ( ( ut64 ) 1 ) << i	367:5:12012:12033	1054149	0	True				
ANR	1054469	AssignmentExpression	bits = ( ( ut64 ) 1 ) << i		1054149	0		=			
ANR	1054470	Identifier	bits		1054149	0					
ANR	1054471	ShiftExpression	( ( ut64 ) 1 ) << i		1054149	1		<<			
ANR	1054472	CastExpression	( ut64 ) 1		1054149	0					
ANR	1054473	CastTarget	ut64		1054149	0					
ANR	1054474	PrimaryExpression	1		1054149	1					
ANR	1054475	Identifier	i		1054149	1					
ANR	1054476	IdentifierDeclStatement	const char * name = r_hash_name ( bits ) ;	368:5:12040:12077	1054149	1	True				
ANR	1054477	IdentifierDecl	* name = r_hash_name ( bits )		1054149	0					
ANR	1054478	IdentifierDeclType	const char *		1054149	0					
ANR	1054479	Identifier	name		1054149	1					
ANR	1054480	AssignmentExpression	* name = r_hash_name ( bits )		1054149	2		=			
ANR	1054481	Identifier	name		1054149	0					
ANR	1054482	CallExpression	r_hash_name ( bits )		1054149	1					
ANR	1054483	Callee	r_hash_name		1054149	0					
ANR	1054484	Identifier	r_hash_name		1054149	0					
ANR	1054485	ArgumentList	bits		1054149	1					
ANR	1054486	Argument	bits		1054149	0					
ANR	1054487	Identifier	bits		1054149	0					
ANR	1054488	IfStatement	if ( ! name || ! * name )		1054149	2					
ANR	1054489	Condition	! name || ! * name	369:9:12088:12102	1054149	0	True				
ANR	1054490	OrExpression	! name || ! * name		1054149	0		||			
ANR	1054491	UnaryOperationExpression	! name		1054149	0					
ANR	1054492	UnaryOperator	!		1054149	0					
ANR	1054493	Identifier	name		1054149	1					
ANR	1054494	UnaryOperationExpression	! * name		1054149	1					
ANR	1054495	UnaryOperator	!		1054149	0					
ANR	1054496	UnaryOperationExpression	* name		1054149	1					
ANR	1054497	UnaryOperator	*		1054149	0					
ANR	1054498	Identifier	name		1054149	1					
ANR	1054499	BreakStatement	break ;	369:26:12105:12110	1054149	1	True				
ANR	1054500	ExpressionStatement	"printf ( ""  %s\\n"" , name )"	370:5:12117:12140	1054149	3	True				
ANR	1054501	CallExpression	"printf ( ""  %s\\n"" , name )"		1054149	0					
ANR	1054502	Callee	printf		1054149	0					
ANR	1054503	Identifier	printf		1054149	0					
ANR	1054504	ArgumentList	"""  %s\\n"""		1054149	1					
ANR	1054505	Argument	"""  %s\\n"""		1054149	0					
ANR	1054506	PrimaryExpression	"""  %s\\n"""		1054149	0					
ANR	1054507	Argument	name		1054149	1					
ANR	1054508	Identifier	name		1054149	0					
ANR	1054509	ExpressionStatement	"eprintf ( ""Available Encoders/Decoders: \\n"" )"	372:4:12152:12195	1054149	5	True				
ANR	1054510	CallExpression	"eprintf ( ""Available Encoders/Decoders: \\n"" )"		1054149	0					
ANR	1054511	Callee	eprintf		1054149	0					
ANR	1054512	Identifier	eprintf		1054149	0					
ANR	1054513	ArgumentList	"""Available Encoders/Decoders: \\n"""		1054149	1					
ANR	1054514	Argument	"""Available Encoders/Decoders: \\n"""		1054149	0					
ANR	1054515	PrimaryExpression	"""Available Encoders/Decoders: \\n"""		1054149	0					
ANR	1054516	ExpressionStatement	"eprintf ( ""  base64\\n"" )"	374:4:12230:12252	1054149	6	True				
ANR	1054517	CallExpression	"eprintf ( ""  base64\\n"" )"		1054149	0					
ANR	1054518	Callee	eprintf		1054149	0					
ANR	1054519	Identifier	eprintf		1054149	0					
ANR	1054520	ArgumentList	"""  base64\\n"""		1054149	1					
ANR	1054521	Argument	"""  base64\\n"""		1054149	0					
ANR	1054522	PrimaryExpression	"""  base64\\n"""		1054149	0					
ANR	1054523	ExpressionStatement	"eprintf ( ""  base91\\n"" )"	375:4:12258:12280	1054149	7	True				
ANR	1054524	CallExpression	"eprintf ( ""  base91\\n"" )"		1054149	0					
ANR	1054525	Callee	eprintf		1054149	0					
ANR	1054526	Identifier	eprintf		1054149	0					
ANR	1054527	ArgumentList	"""  base91\\n"""		1054149	1					
ANR	1054528	Argument	"""  base91\\n"""		1054149	0					
ANR	1054529	PrimaryExpression	"""  base91\\n"""		1054149	0					
ANR	1054530	ExpressionStatement	"eprintf ( ""  punycode\\n"" )"	376:4:12286:12310	1054149	8	True				
ANR	1054531	CallExpression	"eprintf ( ""  punycode\\n"" )"		1054149	0					
ANR	1054532	Callee	eprintf		1054149	0					
ANR	1054533	Identifier	eprintf		1054149	0					
ANR	1054534	ArgumentList	"""  punycode\\n"""		1054149	1					
ANR	1054535	Argument	"""  punycode\\n"""		1054149	0					
ANR	1054536	PrimaryExpression	"""  punycode\\n"""		1054149	0					
ANR	1054537	ExpressionStatement	"eprintf ( ""Currently supported crypto algos:\\n"" )"	377:4:12316:12363	1054149	9	True				
ANR	1054538	CallExpression	"eprintf ( ""Currently supported crypto algos:\\n"" )"		1054149	0					
ANR	1054539	Callee	eprintf		1054149	0					
ANR	1054540	Identifier	eprintf		1054149	0					
ANR	1054541	ArgumentList	"""Currently supported crypto algos:\\n"""		1054149	1					
ANR	1054542	Argument	"""Currently supported crypto algos:\\n"""		1054149	0					
ANR	1054543	PrimaryExpression	"""Currently supported crypto algos:\\n"""		1054149	0					
ANR	1054544	ForStatement	for ( i = 0 ; ; i ++ )		1054149	10					
ANR	1054545	ForInit	i = 0 ;	378:9:12374:12379	1054149	0	True				
ANR	1054546	AssignmentExpression	i = 0		1054149	0		=			
ANR	1054547	Identifier	i		1054149	0					
ANR	1054548	PrimaryExpression	0		1054149	1					
ANR	1054549	PostIncDecOperationExpression	i ++	378:18:12383:12385	1054149	1	True				
ANR	1054550	Identifier	i		1054149	0					
ANR	1054551	IncDec	++		1054149	1					
ANR	1054552	CompoundStatement		81:5:1851:1890	1054149	2					
ANR	1054553	ExpressionStatement	bits = ( ( ut64 ) 1 ) << i	379:5:12395:12416	1054149	0	True				
ANR	1054554	AssignmentExpression	bits = ( ( ut64 ) 1 ) << i		1054149	0		=			
ANR	1054555	Identifier	bits		1054149	0					
ANR	1054556	ShiftExpression	( ( ut64 ) 1 ) << i		1054149	1		<<			
ANR	1054557	CastExpression	( ut64 ) 1		1054149	0					
ANR	1054558	CastTarget	ut64		1054149	0					
ANR	1054559	PrimaryExpression	1		1054149	1					
ANR	1054560	Identifier	i		1054149	1					
ANR	1054561	IdentifierDeclStatement	const char * name = r_crypto_name ( bits ) ;	380:5:12423:12462	1054149	1	True				
ANR	1054562	IdentifierDecl	* name = r_crypto_name ( bits )		1054149	0					
ANR	1054563	IdentifierDeclType	const char *		1054149	0					
ANR	1054564	Identifier	name		1054149	1					
ANR	1054565	AssignmentExpression	* name = r_crypto_name ( bits )		1054149	2		=			
ANR	1054566	Identifier	name		1054149	0					
ANR	1054567	CallExpression	r_crypto_name ( bits )		1054149	1					
ANR	1054568	Callee	r_crypto_name		1054149	0					
ANR	1054569	Identifier	r_crypto_name		1054149	0					
ANR	1054570	ArgumentList	bits		1054149	1					
ANR	1054571	Argument	bits		1054149	0					
ANR	1054572	Identifier	bits		1054149	0					
ANR	1054573	IfStatement	if ( ! name || ! * name )		1054149	2					
ANR	1054574	Condition	! name || ! * name	381:9:12473:12487	1054149	0	True				
ANR	1054575	OrExpression	! name || ! * name		1054149	0		||			
ANR	1054576	UnaryOperationExpression	! name		1054149	0					
ANR	1054577	UnaryOperator	!		1054149	0					
ANR	1054578	Identifier	name		1054149	1					
ANR	1054579	UnaryOperationExpression	! * name		1054149	1					
ANR	1054580	UnaryOperator	!		1054149	0					
ANR	1054581	UnaryOperationExpression	* name		1054149	1					
ANR	1054582	UnaryOperator	*		1054149	0					
ANR	1054583	Identifier	name		1054149	1					
ANR	1054584	BreakStatement	break ;	381:26:12490:12495	1054149	1	True				
ANR	1054585	ExpressionStatement	"printf ( ""  %s\\n"" , name )"	382:5:12502:12525	1054149	3	True				
ANR	1054586	CallExpression	"printf ( ""  %s\\n"" , name )"		1054149	0					
ANR	1054587	Callee	printf		1054149	0					
ANR	1054588	Identifier	printf		1054149	0					
ANR	1054589	ArgumentList	"""  %s\\n"""		1054149	1					
ANR	1054590	Argument	"""  %s\\n"""		1054149	0					
ANR	1054591	PrimaryExpression	"""  %s\\n"""		1054149	0					
ANR	1054592	Argument	name		1054149	1					
ANR	1054593	Identifier	name		1054149	0					
ANR	1054594	ExpressionStatement	free ( args )	385:3:12541:12552	1054149	9	True				
ANR	1054595	CallExpression	free ( args )		1054149	0					
ANR	1054596	Callee	free		1054149	0					
ANR	1054597	Identifier	free		1054149	0					
ANR	1054598	ArgumentList	args		1054149	1					
ANR	1054599	Argument	args		1054149	0					
ANR	1054600	Identifier	args		1054149	0					
ANR	1054601	BreakStatement	break ;	387:2:12560:12565	1054149	28	True				
ANR	1054602	Label	case 'p' :	388:1:12568:12576	1054149	29	True				
ANR	1054603	SwitchStatement	switch ( input [ 2 ] )		1054149	30					
ANR	1054604	Condition	input [ 2 ]	389:10:12609:12616	1054149	0	True				
ANR	1054605	ArrayIndexing	input [ 2 ]		1054149	0					
ANR	1054606	Identifier	input		1054149	0					
ANR	1054607	PrimaryExpression	2		1054149	1					
ANR	1054608	CompoundStatement		90:20:2047:2047	1054149	1					
ANR	1054609	Label	case 'D' :	390:2:12623:12631	1054149	0	True				
ANR	1054610	ExpressionStatement	"len = ( int ) ( input [ 3 ] == ' ' ) ? r_num_math ( core -> num , input + 3 ) : core -> blocksize"	391:3:12646:12734	1054149	1	True				
ANR	1054611	AssignmentExpression	"len = ( int ) ( input [ 3 ] == ' ' ) ? r_num_math ( core -> num , input + 3 ) : core -> blocksize"		1054149	0		=			
ANR	1054612	Identifier	len		1054149	0					
ANR	1054613	ConditionalExpression	"( int ) ( input [ 3 ] == ' ' ) ? r_num_math ( core -> num , input + 3 ) : core -> blocksize"		1054149	1					
ANR	1054614	Condition	( int ) ( input [ 3 ] == ' ' )		1054149	0					
ANR	1054615	CastExpression	( int ) ( input [ 3 ] == ' ' )		1054149	0					
ANR	1054616	CastTarget	int		1054149	0					
ANR	1054617	EqualityExpression	input [ 3 ] == ' '		1054149	1		==			
ANR	1054618	ArrayIndexing	input [ 3 ]		1054149	0					
ANR	1054619	Identifier	input		1054149	0					
ANR	1054620	PrimaryExpression	3		1054149	1					
ANR	1054621	PrimaryExpression	' '		1054149	1					
ANR	1054622	CallExpression	"r_num_math ( core -> num , input + 3 )"		1054149	1					
ANR	1054623	Callee	r_num_math		1054149	0					
ANR	1054624	Identifier	r_num_math		1054149	0					
ANR	1054625	ArgumentList	core -> num		1054149	1					
ANR	1054626	Argument	core -> num		1054149	0					
ANR	1054627	PtrMemberAccess	core -> num		1054149	0					
ANR	1054628	Identifier	core		1054149	0					
ANR	1054629	Identifier	num		1054149	1					
ANR	1054630	Argument	input + 3		1054149	1					
ANR	1054631	AdditiveExpression	input + 3		1054149	0		+			
ANR	1054632	Identifier	input		1054149	0					
ANR	1054633	PrimaryExpression	3		1054149	1					
ANR	1054634	PtrMemberAccess	core -> blocksize		1054149	2					
ANR	1054635	Identifier	core		1054149	0					
ANR	1054636	Identifier	blocksize		1054149	1					
ANR	1054637	IfStatement	if ( len > 0 )		1054149	2					
ANR	1054638	Condition	len > 0	394:7:12743:12749	1054149	0	True				
ANR	1054639	RelationalExpression	len > 0		1054149	0		>			
ANR	1054640	Identifier	len		1054149	0					
ANR	1054641	PrimaryExpression	0		1054149	1					
ANR	1054642	CompoundStatement		95:16:2180:2180	1054149	1					
ANR	1054643	ExpressionStatement	"buf = ( ut8 * ) r_debruijn_pattern ( len , 0 , NULL )"	396:4:12831:12876	1054149	0	True				
ANR	1054644	AssignmentExpression	"buf = ( ut8 * ) r_debruijn_pattern ( len , 0 , NULL )"		1054149	0		=			
ANR	1054645	Identifier	buf		1054149	0					
ANR	1054646	CastExpression	"( ut8 * ) r_debruijn_pattern ( len , 0 , NULL )"		1054149	1					
ANR	1054647	CastTarget	ut8 *		1054149	0					
ANR	1054648	CallExpression	"r_debruijn_pattern ( len , 0 , NULL )"		1054149	1					
ANR	1054649	Callee	r_debruijn_pattern		1054149	0					
ANR	1054650	Identifier	r_debruijn_pattern		1054149	0					
ANR	1054651	ArgumentList	len		1054149	1					
ANR	1054652	Argument	len		1054149	0					
ANR	1054653	Identifier	len		1054149	0					
ANR	1054654	Argument	0		1054149	1					
ANR	1054655	PrimaryExpression	0		1054149	0					
ANR	1054656	Argument	NULL		1054149	2					
ANR	1054657	Identifier	NULL		1054149	0					
ANR	1054658	IfStatement	if ( buf )		1054149	1					
ANR	1054659	Condition	buf	397:8:12907:12909	1054149	0	True				
ANR	1054660	Identifier	buf		1054149	0					
ANR	1054661	CompoundStatement		100:5:2374:2398	1054149	1					
ANR	1054662	IdentifierDeclStatement	const ut8 * ptr = buf ;	398:5:12919:12939	1054149	0	True				
ANR	1054663	IdentifierDecl	* ptr = buf		1054149	0					
ANR	1054664	IdentifierDeclType	const ut8 *		1054149	0					
ANR	1054665	Identifier	ptr		1054149	1					
ANR	1054666	AssignmentExpression	* ptr = buf		1054149	2		=			
ANR	1054667	Identifier	buf		1054149	0					
ANR	1054668	Identifier	buf		1054149	1					
ANR	1054669	IdentifierDeclStatement	ut64 addr = core -> offset ;	399:5:12946:12970	1054149	1	True				
ANR	1054670	IdentifierDecl	addr = core -> offset		1054149	0					
ANR	1054671	IdentifierDeclType	ut64		1054149	0					
ANR	1054672	Identifier	addr		1054149	1					
ANR	1054673	AssignmentExpression	addr = core -> offset		1054149	2		=			
ANR	1054674	Identifier	addr		1054149	0					
ANR	1054675	PtrMemberAccess	core -> offset		1054149	1					
ANR	1054676	Identifier	core		1054149	0					
ANR	1054677	Identifier	offset		1054149	1					
ANR	1054678	IfStatement	if ( input [ 3 ] == '*' )		1054149	2					
ANR	1054679	Condition	input [ 3 ] == '*'	400:9:12981:12995	1054149	0	True				
ANR	1054680	EqualityExpression	input [ 3 ] == '*'		1054149	0		==			
ANR	1054681	ArrayIndexing	input [ 3 ]		1054149	0					
ANR	1054682	Identifier	input		1054149	0					
ANR	1054683	PrimaryExpression	3		1054149	1					
ANR	1054684	PrimaryExpression	'*'		1054149	1					
ANR	1054685	CompoundStatement		102:6:2434:2439	1054149	1					
ANR	1054686	IdentifierDeclStatement	int i ;	401:6:13006:13011	1054149	0	True				
ANR	1054687	IdentifierDecl	i		1054149	0					
ANR	1054688	IdentifierDeclType	int		1054149	0					
ANR	1054689	Identifier	i		1054149	1					
ANR	1054690	ExpressionStatement	"r_cons_printf ( ""wx "" )"	402:6:13019:13040	1054149	1	True				
ANR	1054691	CallExpression	"r_cons_printf ( ""wx "" )"		1054149	0					
ANR	1054692	Callee	r_cons_printf		1054149	0					
ANR	1054693	Identifier	r_cons_printf		1054149	0					
ANR	1054694	ArgumentList	"""wx """		1054149	1					
ANR	1054695	Argument	"""wx """		1054149	0					
ANR	1054696	PrimaryExpression	"""wx """		1054149	0					
ANR	1054697	ForStatement	for ( i = 0 ; i < len ; i ++ )		1054149	2					
ANR	1054698	ForInit	i = 0 ;	403:11:13053:13058	1054149	0	True				
ANR	1054699	AssignmentExpression	i = 0		1054149	0		=			
ANR	1054700	Identifier	i		1054149	0					
ANR	1054701	PrimaryExpression	0		1054149	1					
ANR	1054702	Condition	i < len	403:18:13060:13066	1054149	1	True				
ANR	1054703	RelationalExpression	i < len		1054149	0		<			
ANR	1054704	Identifier	i		1054149	0					
ANR	1054705	Identifier	len		1054149	1					
ANR	1054706	PostIncDecOperationExpression	i ++	403:27:13069:13071	1054149	2	True				
ANR	1054707	Identifier	i		1054149	0					
ANR	1054708	IncDec	++		1054149	1					
ANR	1054709	CompoundStatement		104:32:2502:2502	1054149	3					
ANR	1054710	ExpressionStatement	"r_cons_printf ( ""%02x"" , buf [ i ] )"	404:7:13083:13113	1054149	0	True				
ANR	1054711	CallExpression	"r_cons_printf ( ""%02x"" , buf [ i ] )"		1054149	0					
ANR	1054712	Callee	r_cons_printf		1054149	0					
ANR	1054713	Identifier	r_cons_printf		1054149	0					
ANR	1054714	ArgumentList	"""%02x"""		1054149	1					
ANR	1054715	Argument	"""%02x"""		1054149	0					
ANR	1054716	PrimaryExpression	"""%02x"""		1054149	0					
ANR	1054717	Argument	buf [ i ]		1054149	1					
ANR	1054718	ArrayIndexing	buf [ i ]		1054149	0					
ANR	1054719	Identifier	buf		1054149	0					
ANR	1054720	Identifier	i		1054149	1					
ANR	1054721	ExpressionStatement	r_cons_newline ( )	406:6:13129:13146	1054149	3	True				
ANR	1054722	CallExpression	r_cons_newline ( )		1054149	0					
ANR	1054723	Callee	r_cons_newline		1054149	0					
ANR	1054724	Identifier	r_cons_newline		1054149	0					
ANR	1054725	ArgumentList			1054149	1					
ANR	1054726	ElseStatement	else		1054149	0					
ANR	1054727	CompoundStatement		108:12:2588:2588	1054149	0					
ANR	1054728	WhileStatement	while ( true )		1054149	0					
ANR	1054729	Condition	true	408:13:13175:13178	1054149	0	True				
ANR	1054730	Identifier	true		1054149	0					
ANR	1054731	CompoundStatement		110:7:2618:2666	1054149	1					
ANR	1054732	IdentifierDeclStatement	"int res = r_core_write_at ( core , addr , ptr , len ) ;"	409:7:13190:13238	1054149	0	True				
ANR	1054733	IdentifierDecl	"res = r_core_write_at ( core , addr , ptr , len )"		1054149	0					
ANR	1054734	IdentifierDeclType	int		1054149	0					
ANR	1054735	Identifier	res		1054149	1					
ANR	1054736	AssignmentExpression	"res = r_core_write_at ( core , addr , ptr , len )"		1054149	2		=			
ANR	1054737	Identifier	res		1054149	0					
ANR	1054738	CallExpression	"r_core_write_at ( core , addr , ptr , len )"		1054149	1					
ANR	1054739	Callee	r_core_write_at		1054149	0					
ANR	1054740	Identifier	r_core_write_at		1054149	0					
ANR	1054741	ArgumentList	core		1054149	1					
ANR	1054742	Argument	core		1054149	0					
ANR	1054743	Identifier	core		1054149	0					
ANR	1054744	Argument	addr		1054149	1					
ANR	1054745	Identifier	addr		1054149	0					
ANR	1054746	Argument	ptr		1054149	2					
ANR	1054747	Identifier	ptr		1054149	0					
ANR	1054748	Argument	len		1054149	3					
ANR	1054749	Identifier	len		1054149	0					
ANR	1054750	IfStatement	if ( res < 1 || len == res )		1054149	1					
ANR	1054751	Condition	res < 1 || len == res	410:11:13251:13271	1054149	0	True				
ANR	1054752	OrExpression	res < 1 || len == res		1054149	0		||			
ANR	1054753	RelationalExpression	res < 1		1054149	0		<			
ANR	1054754	Identifier	res		1054149	0					
ANR	1054755	PrimaryExpression	1		1054149	1					
ANR	1054756	EqualityExpression	len == res		1054149	1		==			
ANR	1054757	Identifier	len		1054149	0					
ANR	1054758	Identifier	res		1054149	1					
ANR	1054759	CompoundStatement		111:34:2702:2702	1054149	1					
ANR	1054760	BreakStatement	break ;	411:8:13284:13289	1054149	0	True				
ANR	1054761	IfStatement	if ( res < len )		1054149	2					
ANR	1054762	Condition	res < len	413:11:13311:13319	1054149	0	True				
ANR	1054763	RelationalExpression	res < len		1054149	0		<			
ANR	1054764	Identifier	res		1054149	0					
ANR	1054765	Identifier	len		1054149	1					
ANR	1054766	CompoundStatement		114:22:2750:2750	1054149	1					
ANR	1054767	ExpressionStatement	ptr += res	414:8:13332:13342	1054149	0	True				
ANR	1054768	AssignmentExpression	ptr += res		1054149	0		+=			
ANR	1054769	Identifier	ptr		1054149	0					
ANR	1054770	Identifier	res		1054149	1					
ANR	1054771	ExpressionStatement	len -= res	415:8:13352:13362	1054149	1	True				
ANR	1054772	AssignmentExpression	len -= res		1054149	0		-=			
ANR	1054773	Identifier	len		1054149	0					
ANR	1054774	Identifier	res		1054149	1					
ANR	1054775	ExpressionStatement	addr += res	416:8:13372:13383	1054149	2	True				
ANR	1054776	AssignmentExpression	addr += res		1054149	0		+=			
ANR	1054777	Identifier	addr		1054149	0					
ANR	1054778	Identifier	res		1054149	1					
ANR	1054779	ExpressionStatement	free ( buf )	420:5:13415:13425	1054149	3	True				
ANR	1054780	CallExpression	free ( buf )		1054149	0					
ANR	1054781	Callee	free		1054149	0					
ANR	1054782	Identifier	free		1054149	0					
ANR	1054783	ArgumentList	buf		1054149	1					
ANR	1054784	Argument	buf		1054149	0					
ANR	1054785	Identifier	buf		1054149	0					
ANR	1054786	ElseStatement	else		1054149	0					
ANR	1054787	CompoundStatement		122:11:2866:2866	1054149	0					
ANR	1054788	ExpressionStatement	"eprintf ( ""Couldn't generate pattern of length %d\\n"" , len )"	422:5:13445:13502	1054149	0	True				
ANR	1054789	CallExpression	"eprintf ( ""Couldn't generate pattern of length %d\\n"" , len )"		1054149	0					
ANR	1054790	Callee	eprintf		1054149	0					
ANR	1054791	Identifier	eprintf		1054149	0					
ANR	1054792	ArgumentList	"""Couldn't generate pattern of length %d\\n"""		1054149	1					
ANR	1054793	Argument	"""Couldn't generate pattern of length %d\\n"""		1054149	0					
ANR	1054794	PrimaryExpression	"""Couldn't generate pattern of length %d\\n"""		1054149	0					
ANR	1054795	Argument	len		1054149	1					
ANR	1054796	Identifier	len		1054149	0					
ANR	1054797	BreakStatement	break ;	425:3:13518:13523	1054149	3	True				
ANR	1054798	Label	case 'O' :	426:2:13527:13535	1054149	4	True				
ANR	1054799	IfStatement	"if ( strlen ( input ) > 4 && strncmp ( input + 4 , ""0x"" , 2 ) )"		1054149	5					
ANR	1054800	Condition	"strlen ( input ) > 4 && strncmp ( input + 4 , ""0x"" , 2 )"	427:7:13554:13603	1054149	0	True				
ANR	1054801	AndExpression	"strlen ( input ) > 4 && strncmp ( input + 4 , ""0x"" , 2 )"		1054149	0		&&			
ANR	1054802	RelationalExpression	strlen ( input ) > 4		1054149	0		>			
ANR	1054803	CallExpression	strlen ( input )		1054149	0					
ANR	1054804	Callee	strlen		1054149	0					
ANR	1054805	Identifier	strlen		1054149	0					
ANR	1054806	ArgumentList	input		1054149	1					
ANR	1054807	Argument	input		1054149	0					
ANR	1054808	Identifier	input		1054149	0					
ANR	1054809	PrimaryExpression	4		1054149	1					
ANR	1054810	CallExpression	"strncmp ( input + 4 , ""0x"" , 2 )"		1054149	1					
ANR	1054811	Callee	strncmp		1054149	0					
ANR	1054812	Identifier	strncmp		1054149	0					
ANR	1054813	ArgumentList	input + 4		1054149	1					
ANR	1054814	Argument	input + 4		1054149	0					
ANR	1054815	AdditiveExpression	input + 4		1054149	0		+			
ANR	1054816	Identifier	input		1054149	0					
ANR	1054817	PrimaryExpression	4		1054149	1					
ANR	1054818	Argument	"""0x"""		1054149	1					
ANR	1054819	PrimaryExpression	"""0x"""		1054149	0					
ANR	1054820	Argument	2		1054149	2					
ANR	1054821	PrimaryExpression	2		1054149	0					
ANR	1054822	CompoundStatement		128:59:3034:3034	1054149	1					
ANR	1054823	ExpressionStatement	"eprintf ( ""Need hex value with `0x' prefix e.g. 0x41414142\\n"" )"	428:4:13612:13673	1054149	0	True				
ANR	1054824	CallExpression	"eprintf ( ""Need hex value with `0x' prefix e.g. 0x41414142\\n"" )"		1054149	0					
ANR	1054825	Callee	eprintf		1054149	0					
ANR	1054826	Identifier	eprintf		1054149	0					
ANR	1054827	ArgumentList	"""Need hex value with `0x' prefix e.g. 0x41414142\\n"""		1054149	1					
ANR	1054828	Argument	"""Need hex value with `0x' prefix e.g. 0x41414142\\n"""		1054149	0					
ANR	1054829	PrimaryExpression	"""Need hex value with `0x' prefix e.g. 0x41414142\\n"""		1054149	0					
ANR	1054830	ElseStatement	else		1054149	0					
ANR	1054831	IfStatement	if ( input [ 3 ] == ' ' )		1054149	0					
ANR	1054832	Condition	input [ 3 ] == ' '	429:14:13689:13703	1054149	0	True				
ANR	1054833	EqualityExpression	input [ 3 ] == ' '		1054149	0		==			
ANR	1054834	ArrayIndexing	input [ 3 ]		1054149	0					
ANR	1054835	Identifier	input		1054149	0					
ANR	1054836	PrimaryExpression	3		1054149	1					
ANR	1054837	PrimaryExpression	' '		1054149	1					
ANR	1054838	CompoundStatement		130:31:3134:3134	1054149	1					
ANR	1054839	ExpressionStatement	"value = r_num_get ( core -> num , input + 4 )"	430:4:13712:13752	1054149	0	True				
ANR	1054840	AssignmentExpression	"value = r_num_get ( core -> num , input + 4 )"		1054149	0		=			
ANR	1054841	Identifier	value		1054149	0					
ANR	1054842	CallExpression	"r_num_get ( core -> num , input + 4 )"		1054149	1					
ANR	1054843	Callee	r_num_get		1054149	0					
ANR	1054844	Identifier	r_num_get		1054149	0					
ANR	1054845	ArgumentList	core -> num		1054149	1					
ANR	1054846	Argument	core -> num		1054149	0					
ANR	1054847	PtrMemberAccess	core -> num		1054149	0					
ANR	1054848	Identifier	core		1054149	0					
ANR	1054849	Identifier	num		1054149	1					
ANR	1054850	Argument	input + 4		1054149	1					
ANR	1054851	AdditiveExpression	input + 4		1054149	0		+			
ANR	1054852	Identifier	input		1054149	0					
ANR	1054853	PrimaryExpression	4		1054149	1					
ANR	1054854	ExpressionStatement	"core -> num -> value = r_debruijn_offset ( value , r_config_get_i ( core -> config , ""cfg.bigendian"" ) )"	431:4:13758:13850	1054149	1	True				
ANR	1054855	AssignmentExpression	"core -> num -> value = r_debruijn_offset ( value , r_config_get_i ( core -> config , ""cfg.bigendian"" ) )"		1054149	0		=			
ANR	1054856	PtrMemberAccess	core -> num -> value		1054149	0					
ANR	1054857	PtrMemberAccess	core -> num		1054149	0					
ANR	1054858	Identifier	core		1054149	0					
ANR	1054859	Identifier	num		1054149	1					
ANR	1054860	Identifier	value		1054149	1					
ANR	1054861	CallExpression	"r_debruijn_offset ( value , r_config_get_i ( core -> config , ""cfg.bigendian"" ) )"		1054149	1					
ANR	1054862	Callee	r_debruijn_offset		1054149	0					
ANR	1054863	Identifier	r_debruijn_offset		1054149	0					
ANR	1054864	ArgumentList	value		1054149	1					
ANR	1054865	Argument	value		1054149	0					
ANR	1054866	Identifier	value		1054149	0					
ANR	1054867	Argument	"r_config_get_i ( core -> config , ""cfg.bigendian"" )"		1054149	1					
ANR	1054868	CallExpression	"r_config_get_i ( core -> config , ""cfg.bigendian"" )"		1054149	0					
ANR	1054869	Callee	r_config_get_i		1054149	0					
ANR	1054870	Identifier	r_config_get_i		1054149	0					
ANR	1054871	ArgumentList	core -> config		1054149	1					
ANR	1054872	Argument	core -> config		1054149	0					
ANR	1054873	PtrMemberAccess	core -> config		1054149	0					
ANR	1054874	Identifier	core		1054149	0					
ANR	1054875	Identifier	config		1054149	1					
ANR	1054876	Argument	"""cfg.bigendian"""		1054149	1					
ANR	1054877	PrimaryExpression	"""cfg.bigendian"""		1054149	0					
ANR	1054878	Statement	r_cons_printf	432:4:13856:13868	1054149	2	True				
ANR	1054879	Statement	(	432:18:13870:13870	1054149	3	True				
ANR	1054880	Statement	"""%"""	432:19:13871:13873	1054149	4	True				
ANR	1054881	Statement	PFMT64d	432:22:13874:13880	1054149	5	True				
ANR	1054882	Statement	"""\\n"""	432:29:13881:13884	1054149	6	True				
ANR	1054883	Statement	","	432:33:13885:13885	1054149	7	True				
ANR	1054884	Statement	core	432:35:13887:13890	1054149	8	True				
ANR	1054885	Statement	->	432:39:13891:13892	1054149	9	True				
ANR	1054886	Statement	num	432:41:13893:13895	1054149	10	True				
ANR	1054887	Statement	->	432:44:13896:13897	1054149	11	True				
ANR	1054888	Statement	value	432:46:13898:13902	1054149	12	True				
ANR	1054889	Statement	)	432:51:13903:13903	1054149	13	True				
ANR	1054890	ExpressionStatement		432:52:13904:13904	1054149	14	True				
ANR	1054891	BreakStatement	break ;	434:3:13914:13919	1054149	6	True				
ANR	1054892	Label	case '\\0' :	435:2:13923:13932	1054149	7	True				
ANR	1054893	Label	case '?' :	436:2:13936:13944	1054149	8	True				
ANR	1054894	Label	default :	437:2:13948:13955	1054149	9	True				
ANR	1054895	Identifier	default		1054149	0					
ANR	1054896	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wop )"	438:3:13960:13996	1054149	10	True				
ANR	1054897	CallExpression	"r_core_cmd_help ( core , help_msg_wop )"		1054149	0					
ANR	1054898	Callee	r_core_cmd_help		1054149	0					
ANR	1054899	Identifier	r_core_cmd_help		1054149	0					
ANR	1054900	ArgumentList	core		1054149	1					
ANR	1054901	Argument	core		1054149	0					
ANR	1054902	Identifier	core		1054149	0					
ANR	1054903	Argument	help_msg_wop		1054149	1					
ANR	1054904	Identifier	help_msg_wop		1054149	0					
ANR	1054905	BreakStatement	break ;	439:3:14001:14006	1054149	11	True				
ANR	1054906	BreakStatement	break ;	441:2:14014:14019	1054149	31	True				
ANR	1054907	Label	case '\\0' :	442:1:14022:14031	1054149	32	True				
ANR	1054908	Label	case '?' :	443:1:14034:14042	1054149	33	True				
ANR	1054909	Label	default :	444:1:14045:14052	1054149	34	True				
ANR	1054910	Identifier	default		1054149	0					
ANR	1054911	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wo )"	445:2:14056:14091	1054149	35	True				
ANR	1054912	CallExpression	"r_core_cmd_help ( core , help_msg_wo )"		1054149	0					
ANR	1054913	Callee	r_core_cmd_help		1054149	0					
ANR	1054914	Identifier	r_core_cmd_help		1054149	0					
ANR	1054915	ArgumentList	core		1054149	1					
ANR	1054916	Argument	core		1054149	0					
ANR	1054917	Identifier	core		1054149	0					
ANR	1054918	Argument	help_msg_wo		1054149	1					
ANR	1054919	Identifier	help_msg_wo		1054149	0					
ANR	1054920	BreakStatement	break ;	446:2:14095:14100	1054149	36	True				
ANR	1054921	ReturnType	static void		1054149	1					
ANR	1054922	Identifier	cmd_write_op		1054149	2					
ANR	1054923	ParameterList	"RCore * core , const char * input"		1054149	3					
ANR	1054924	Parameter	RCore * core	300:26:10539:10549	1054149	0	True				
ANR	1054925	ParameterType	RCore *		1054149	0					
ANR	1054926	Identifier	core		1054149	1					
ANR	1054927	Parameter	const char * input	300:39:10552:10568	1054149	1	True				
ANR	1054928	ParameterType	const char *		1054149	0					
ANR	1054929	Identifier	input		1054149	1					
ANR	1054930	CFGEntryNode	ENTRY		1054149		True				
ANR	1054931	CFGExitNode	EXIT		1054149		True				
ANR	1054932	InfiniteForNode	true		1054149		True				
ANR	1054933	InfiniteForNode	true		1054149		True				
ANR	1054934	Symbol	r_hash_name		1054149						
ANR	1054935	Symbol	* input		1054149						
ANR	1054936	Symbol	* core		1054149						
ANR	1054937	Symbol	strchr		1054149						
ANR	1054938	Symbol	core -> offset		1054149						
ANR	1054939	Symbol	core -> num -> value		1054149						
ANR	1054940	Symbol	r_crypto_name		1054149						
ANR	1054941	Symbol	space		1054149						
ANR	1054942	Symbol	r_num_math		1054149						
ANR	1054943	Symbol	strncmp		1054149						
ANR	1054944	Symbol	strlen		1054149						
ANR	1054945	Symbol	* space ++		1054149						
ANR	1054946	Symbol	len		1054149						
ANR	1054947	Symbol	* algo		1054149						
ANR	1054948	Symbol	r_num_get		1054149						
ANR	1054949	Symbol	* core -> num		1054149						
ANR	1054950	Symbol	core -> num		1054149						
ANR	1054951	Symbol	addr		1054149						
ANR	1054952	Symbol	value		1054149						
ANR	1054953	Symbol	key		1054149						
ANR	1054954	Symbol	* * core		1054149						
ANR	1054955	Symbol	direction		1054149						
ANR	1054956	Symbol	* name		1054149						
ANR	1054957	Symbol	core -> blocksize		1054149						
ANR	1054958	Symbol	core -> config		1054149						
ANR	1054959	Symbol	res		1054149						
ANR	1054960	Symbol	* buf		1054149						
ANR	1054961	Symbol	help_msg_wop		1054149						
ANR	1054962	Symbol	NULL		1054149						
ANR	1054963	Symbol	r_debruijn_pattern		1054149						
ANR	1054964	Symbol	bits		1054149						
ANR	1054965	Symbol	i		1054149						
ANR	1054966	Symbol	iv		1054149						
ANR	1054967	Symbol	help_msg_wo		1054149						
ANR	1054968	Symbol	ptr		1054149						
ANR	1054969	Symbol	args		1054149						
ANR	1054970	Symbol	core		1054149						
ANR	1054971	Symbol	input		1054149						
ANR	1054972	Symbol	buf		1054149						
ANR	1054973	Symbol	* i		1054149						
ANR	1054974	Symbol	r_config_get_i		1054149						
ANR	1054975	Symbol	r_str_trim_ro		1054149						
ANR	1054976	Symbol	name		1054149						
ANR	1054977	Symbol	true		1054149						
ANR	1054978	Symbol	r_debruijn_offset		1054149						
ANR	1054979	Symbol	r_core_write_at		1054149						
ANR	1054980	Symbol	strdup		1054149						
ANR	1054981	Symbol	algo		1054149						
ANR	1054982	Function	cmd_write_value	451:0:14161:15615							
ANR	1054983	FunctionDef	"cmd_write_value (RCore * core , const char * input)"		1054982	0					
ANR	1054984	CompoundStatement		451:61:14222:15615	1054982	0					
ANR	1054985	IdentifierDeclStatement	int type = 0 ;	452:1:14225:14237	1054982	0	True				
ANR	1054986	IdentifierDecl	type = 0		1054982	0					
ANR	1054987	IdentifierDeclType	int		1054982	0					
ANR	1054988	Identifier	type		1054982	1					
ANR	1054989	AssignmentExpression	type = 0		1054982	2		=			
ANR	1054990	Identifier	type		1054982	0					
ANR	1054991	PrimaryExpression	0		1054982	1					
ANR	1054992	Statement	ut64	453:1:14240:14243	1054982	1	True				
ANR	1054993	Statement	off	453:6:14245:14247	1054982	2	True				
ANR	1054994	Statement	=	453:10:14249:14249	1054982	3	True				
ANR	1054995	Statement	0L	453:12:14251:14252	1054982	4	True				
ANR	1054996	ExpressionStatement	L	453:14:14253:14254	1054982	5	True				
ANR	1054997	Identifier	L		1054982	0					
ANR	1054998	IdentifierDeclStatement	ut8 buf [ sizeof ( ut64 ) ] ;	454:1:14257:14278	1054982	6	True				
ANR	1054999	IdentifierDecl	buf [ sizeof ( ut64 ) ]		1054982	0					
ANR	1055000	IdentifierDeclType	ut8 [ sizeof ( ut64 ) ]		1054982	0					
ANR	1055001	Identifier	buf		1054982	1					
ANR	1055002	SizeofExpression	sizeof ( ut64 )		1054982	2					
ANR	1055003	Sizeof	sizeof		1054982	0					
ANR	1055004	SizeofOperand	ut64		1054982	1					
ANR	1055005	IdentifierDeclStatement	"int wseek = r_config_get_i ( core -> config , ""cfg.wseek"" ) ;"	455:1:14281:14335	1054982	7	True				
ANR	1055006	IdentifierDecl	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"		1054982	0					
ANR	1055007	IdentifierDeclType	int		1054982	0					
ANR	1055008	Identifier	wseek		1054982	1					
ANR	1055009	AssignmentExpression	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"		1054982	2		=			
ANR	1055010	Identifier	wseek		1054982	0					
ANR	1055011	CallExpression	"r_config_get_i ( core -> config , ""cfg.wseek"" )"		1054982	1					
ANR	1055012	Callee	r_config_get_i		1054982	0					
ANR	1055013	Identifier	r_config_get_i		1054982	0					
ANR	1055014	ArgumentList	core -> config		1054982	1					
ANR	1055015	Argument	core -> config		1054982	0					
ANR	1055016	PtrMemberAccess	core -> config		1054982	0					
ANR	1055017	Identifier	core		1054982	0					
ANR	1055018	Identifier	config		1054982	1					
ANR	1055019	Argument	"""cfg.wseek"""		1054982	1					
ANR	1055020	PrimaryExpression	"""cfg.wseek"""		1054982	0					
ANR	1055021	IdentifierDeclStatement	"bool be = r_config_get_i ( core -> config , ""cfg.bigendian"" ) ;"	456:1:14338:14394	1054982	8	True				
ANR	1055022	IdentifierDecl	"be = r_config_get_i ( core -> config , ""cfg.bigendian"" )"		1054982	0					
ANR	1055023	IdentifierDeclType	bool		1054982	0					
ANR	1055024	Identifier	be		1054982	1					
ANR	1055025	AssignmentExpression	"be = r_config_get_i ( core -> config , ""cfg.bigendian"" )"		1054982	2		=			
ANR	1055026	Identifier	be		1054982	0					
ANR	1055027	CallExpression	"r_config_get_i ( core -> config , ""cfg.bigendian"" )"		1054982	1					
ANR	1055028	Callee	r_config_get_i		1054982	0					
ANR	1055029	Identifier	r_config_get_i		1054982	0					
ANR	1055030	ArgumentList	core -> config		1054982	1					
ANR	1055031	Argument	core -> config		1054982	0					
ANR	1055032	PtrMemberAccess	core -> config		1054982	0					
ANR	1055033	Identifier	core		1054982	0					
ANR	1055034	Identifier	config		1054982	1					
ANR	1055035	Argument	"""cfg.bigendian"""		1054982	1					
ANR	1055036	PrimaryExpression	"""cfg.bigendian"""		1054982	0					
ANR	1055037	IfStatement	if ( ! input )		1054982	9					
ANR	1055038	Condition	! input	458:5:14402:14407	1054982	0	True				
ANR	1055039	UnaryOperationExpression	! input		1054982	0					
ANR	1055040	UnaryOperator	!		1054982	0					
ANR	1055041	Identifier	input		1054982	1					
ANR	1055042	ReturnStatement	return ;	459:2:14412:14418	1054982	1	True				
ANR	1055043	IfStatement	if ( input [ 0 ] )		1054982	10					
ANR	1055044	Condition	input [ 0 ]	461:5:14426:14433	1054982	0	True				
ANR	1055045	ArrayIndexing	input [ 0 ]		1054982	0					
ANR	1055046	Identifier	input		1054982	0					
ANR	1055047	PrimaryExpression	0		1054982	1					
ANR	1055048	SwitchStatement	switch ( input [ 1 ] )		1054982	1					
ANR	1055049	Condition	input [ 1 ]	462:9:14445:14452	1054982	0	True				
ANR	1055050	ArrayIndexing	input [ 1 ]		1054982	0					
ANR	1055051	Identifier	input		1054982	0					
ANR	1055052	PrimaryExpression	1		1054982	1					
ANR	1055053	CompoundStatement		12:19:232:232	1054982	1					
ANR	1055054	Label	case '?' :	463:1:14458:14466	1054982	0	True				
ANR	1055055	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wv )"	464:2:14470:14505	1054982	1	True				
ANR	1055056	CallExpression	"r_core_cmd_help ( core , help_msg_wv )"		1054982	0					
ANR	1055057	Callee	r_core_cmd_help		1054982	0					
ANR	1055058	Identifier	r_core_cmd_help		1054982	0					
ANR	1055059	ArgumentList	core		1054982	1					
ANR	1055060	Argument	core		1054982	0					
ANR	1055061	Identifier	core		1054982	0					
ANR	1055062	Argument	help_msg_wv		1054982	1					
ANR	1055063	Identifier	help_msg_wv		1054982	0					
ANR	1055064	ReturnStatement	return ;	465:2:14509:14515	1054982	2	True				
ANR	1055065	Label	case '1' :	466:1:14518:14526	1054982	3	True				
ANR	1055066	ExpressionStatement	type = 1	466:11:14528:14536	1054982	4	True				
ANR	1055067	AssignmentExpression	type = 1		1054982	0		=			
ANR	1055068	Identifier	type		1054982	0					
ANR	1055069	PrimaryExpression	1		1054982	1					
ANR	1055070	BreakStatement	break ;	466:21:14538:14543	1054982	5	True				
ANR	1055071	Label	case '2' :	467:1:14546:14554	1054982	6	True				
ANR	1055072	ExpressionStatement	type = 2	467:11:14556:14564	1054982	7	True				
ANR	1055073	AssignmentExpression	type = 2		1054982	0		=			
ANR	1055074	Identifier	type		1054982	0					
ANR	1055075	PrimaryExpression	2		1054982	1					
ANR	1055076	BreakStatement	break ;	467:21:14566:14571	1054982	8	True				
ANR	1055077	Label	case '4' :	468:1:14574:14582	1054982	9	True				
ANR	1055078	ExpressionStatement	type = 4	468:11:14584:14592	1054982	10	True				
ANR	1055079	AssignmentExpression	type = 4		1054982	0		=			
ANR	1055080	Identifier	type		1054982	0					
ANR	1055081	PrimaryExpression	4		1054982	1					
ANR	1055082	BreakStatement	break ;	468:21:14594:14599	1054982	11	True				
ANR	1055083	Label	case '8' :	469:1:14602:14610	1054982	12	True				
ANR	1055084	ExpressionStatement	type = 8	469:11:14612:14620	1054982	13	True				
ANR	1055085	AssignmentExpression	type = 8		1054982	0		=			
ANR	1055086	Identifier	type		1054982	0					
ANR	1055087	PrimaryExpression	8		1054982	1					
ANR	1055088	BreakStatement	break ;	469:21:14622:14627	1054982	14	True				
ANR	1055089	IfStatement	if ( input && input [ 0 ] && input [ 1 ] && input [ 2 ] )		1054982	11					
ANR	1055090	Condition	input && input [ 0 ] && input [ 1 ] && input [ 2 ]	471:5:14637:14677	1054982	0	True				
ANR	1055091	AndExpression	input && input [ 0 ] && input [ 1 ] && input [ 2 ]		1054982	0		&&			
ANR	1055092	Identifier	input		1054982	0					
ANR	1055093	AndExpression	input [ 0 ] && input [ 1 ] && input [ 2 ]		1054982	1		&&			
ANR	1055094	ArrayIndexing	input [ 0 ]		1054982	0					
ANR	1055095	Identifier	input		1054982	0					
ANR	1055096	PrimaryExpression	0		1054982	1					
ANR	1055097	AndExpression	input [ 1 ] && input [ 2 ]		1054982	1		&&			
ANR	1055098	ArrayIndexing	input [ 1 ]		1054982	0					
ANR	1055099	Identifier	input		1054982	0					
ANR	1055100	PrimaryExpression	1		1054982	1					
ANR	1055101	ArrayIndexing	input [ 2 ]		1054982	1					
ANR	1055102	Identifier	input		1054982	0					
ANR	1055103	PrimaryExpression	2		1054982	1					
ANR	1055104	CompoundStatement		21:48:457:457	1054982	1					
ANR	1055105	ExpressionStatement	"off = r_num_math ( core -> num , input + 2 )"	472:2:14684:14721	1054982	0	True				
ANR	1055106	AssignmentExpression	"off = r_num_math ( core -> num , input + 2 )"		1054982	0		=			
ANR	1055107	Identifier	off		1054982	0					
ANR	1055108	CallExpression	"r_num_math ( core -> num , input + 2 )"		1054982	1					
ANR	1055109	Callee	r_num_math		1054982	0					
ANR	1055110	Identifier	r_num_math		1054982	0					
ANR	1055111	ArgumentList	core -> num		1054982	1					
ANR	1055112	Argument	core -> num		1054982	0					
ANR	1055113	PtrMemberAccess	core -> num		1054982	0					
ANR	1055114	Identifier	core		1054982	0					
ANR	1055115	Identifier	num		1054982	1					
ANR	1055116	Argument	input + 2		1054982	1					
ANR	1055117	AdditiveExpression	input + 2		1054982	0		+			
ANR	1055118	Identifier	input		1054982	0					
ANR	1055119	PrimaryExpression	2		1054982	1					
ANR	1055120	IfStatement	if ( core -> file )		1054982	12					
ANR	1055121	Condition	core -> file	474:5:14731:14740	1054982	0	True				
ANR	1055122	PtrMemberAccess	core -> file		1054982	0					
ANR	1055123	Identifier	core		1054982	0					
ANR	1055124	Identifier	file		1054982	1					
ANR	1055125	CompoundStatement		24:17:520:520	1054982	1					
ANR	1055126	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	475:2:14747:14785	1054982	0	True				
ANR	1055127	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1054982	0					
ANR	1055128	Callee	r_io_use_fd		1054982	0					
ANR	1055129	Identifier	r_io_use_fd		1054982	0					
ANR	1055130	ArgumentList	core -> io		1054982	1					
ANR	1055131	Argument	core -> io		1054982	0					
ANR	1055132	PtrMemberAccess	core -> io		1054982	0					
ANR	1055133	Identifier	core		1054982	0					
ANR	1055134	Identifier	io		1054982	1					
ANR	1055135	Argument	core -> file -> fd		1054982	1					
ANR	1055136	PtrMemberAccess	core -> file -> fd		1054982	0					
ANR	1055137	PtrMemberAccess	core -> file		1054982	0					
ANR	1055138	Identifier	core		1054982	0					
ANR	1055139	Identifier	file		1054982	1					
ANR	1055140	Identifier	fd		1054982	1					
ANR	1055141	IdentifierDeclStatement	"ut64 res = r_io_seek ( core -> io , core -> offset , R_IO_SEEK_SET ) ;"	477:1:14791:14851	1054982	13	True				
ANR	1055142	IdentifierDecl	"res = r_io_seek ( core -> io , core -> offset , R_IO_SEEK_SET )"		1054982	0					
ANR	1055143	IdentifierDeclType	ut64		1054982	0					
ANR	1055144	Identifier	res		1054982	1					
ANR	1055145	AssignmentExpression	"res = r_io_seek ( core -> io , core -> offset , R_IO_SEEK_SET )"		1054982	2		=			
ANR	1055146	Identifier	res		1054982	0					
ANR	1055147	CallExpression	"r_io_seek ( core -> io , core -> offset , R_IO_SEEK_SET )"		1054982	1					
ANR	1055148	Callee	r_io_seek		1054982	0					
ANR	1055149	Identifier	r_io_seek		1054982	0					
ANR	1055150	ArgumentList	core -> io		1054982	1					
ANR	1055151	Argument	core -> io		1054982	0					
ANR	1055152	PtrMemberAccess	core -> io		1054982	0					
ANR	1055153	Identifier	core		1054982	0					
ANR	1055154	Identifier	io		1054982	1					
ANR	1055155	Argument	core -> offset		1054982	1					
ANR	1055156	PtrMemberAccess	core -> offset		1054982	0					
ANR	1055157	Identifier	core		1054982	0					
ANR	1055158	Identifier	offset		1054982	1					
ANR	1055159	Argument	R_IO_SEEK_SET		1054982	2					
ANR	1055160	Identifier	R_IO_SEEK_SET		1054982	0					
ANR	1055161	IfStatement	if ( res == UT64_MAX )		1054982	14					
ANR	1055162	Condition	res == UT64_MAX	478:5:14858:14872	1054982	0	True				
ANR	1055163	EqualityExpression	res == UT64_MAX		1054982	0		==			
ANR	1055164	Identifier	res		1054982	0					
ANR	1055165	Identifier	UT64_MAX		1054982	1					
ANR	1055166	ReturnStatement	return ;	478:22:14875:14881	1054982	1	True				
ANR	1055167	IfStatement	if ( type == 0 )		1054982	15					
ANR	1055168	Condition	type == 0	479:5:14888:14896	1054982	0	True				
ANR	1055169	EqualityExpression	type == 0		1054982	0		==			
ANR	1055170	Identifier	type		1054982	0					
ANR	1055171	PrimaryExpression	0		1054982	1					
ANR	1055172	ExpressionStatement	type = ( off & UT64_32U ) ? 8 : 4	480:2:14901:14928	1054982	1	True				
ANR	1055173	AssignmentExpression	type = ( off & UT64_32U ) ? 8 : 4		1054982	0		=			
ANR	1055174	Identifier	type		1054982	0					
ANR	1055175	ConditionalExpression	( off & UT64_32U ) ? 8 : 4		1054982	1					
ANR	1055176	Condition	off & UT64_32U		1054982	0					
ANR	1055177	BitAndExpression	off & UT64_32U		1054982	0		&			
ANR	1055178	Identifier	off		1054982	0					
ANR	1055179	Identifier	UT64_32U		1054982	1					
ANR	1055180	PrimaryExpression	8		1054982	1					
ANR	1055181	PrimaryExpression	4		1054982	2					
ANR	1055182	SwitchStatement	switch ( type )		1054982	16					
ANR	1055183	Condition	type	481:9:14939:14942	1054982	0	True				
ANR	1055184	Identifier	type		1054982	0					
ANR	1055185	CompoundStatement		31:15:722:722	1054982	1					
ANR	1055186	Label	case 1 :	482:1:14948:14954	1054982	0	True				
ANR	1055187	ExpressionStatement	"r_write_ble8 ( buf , ( ut8 ) ( off & UT8_MAX ) )"	483:2:14958:14998	1054982	1	True				
ANR	1055188	CallExpression	"r_write_ble8 ( buf , ( ut8 ) ( off & UT8_MAX ) )"		1054982	0					
ANR	1055189	Callee	r_write_ble8		1054982	0					
ANR	1055190	Identifier	r_write_ble8		1054982	0					
ANR	1055191	ArgumentList	buf		1054982	1					
ANR	1055192	Argument	buf		1054982	0					
ANR	1055193	Identifier	buf		1054982	0					
ANR	1055194	Argument	( ut8 ) ( off & UT8_MAX )		1054982	1					
ANR	1055195	CastExpression	( ut8 ) ( off & UT8_MAX )		1054982	0					
ANR	1055196	CastTarget	ut8		1054982	0					
ANR	1055197	BitAndExpression	off & UT8_MAX		1054982	1		&			
ANR	1055198	Identifier	off		1054982	0					
ANR	1055199	Identifier	UT8_MAX		1054982	1					
ANR	1055200	IfStatement	"if ( ! r_io_write ( core -> io , buf , 1 ) )"		1054982	2					
ANR	1055201	Condition	"! r_io_write ( core -> io , buf , 1 )"	484:6:15006:15035	1054982	0	True				
ANR	1055202	UnaryOperationExpression	"! r_io_write ( core -> io , buf , 1 )"		1054982	0					
ANR	1055203	UnaryOperator	!		1054982	0					
ANR	1055204	CallExpression	"r_io_write ( core -> io , buf , 1 )"		1054982	1					
ANR	1055205	Callee	r_io_write		1054982	0					
ANR	1055206	Identifier	r_io_write		1054982	0					
ANR	1055207	ArgumentList	core -> io		1054982	1					
ANR	1055208	Argument	core -> io		1054982	0					
ANR	1055209	PtrMemberAccess	core -> io		1054982	0					
ANR	1055210	Identifier	core		1054982	0					
ANR	1055211	Identifier	io		1054982	1					
ANR	1055212	Argument	buf		1054982	1					
ANR	1055213	Identifier	buf		1054982	0					
ANR	1055214	Argument	1		1054982	2					
ANR	1055215	PrimaryExpression	1		1054982	0					
ANR	1055216	CompoundStatement		34:38:815:815	1054982	1					
ANR	1055217	ExpressionStatement	cmd_write_fail ( )	485:3:15043:15060	1054982	0	True				
ANR	1055218	CallExpression	cmd_write_fail ( )		1054982	0					
ANR	1055219	Callee	cmd_write_fail		1054982	0					
ANR	1055220	Identifier	cmd_write_fail		1054982	0					
ANR	1055221	ArgumentList			1054982	1					
ANR	1055222	ElseStatement	else		1054982	0					
ANR	1055223	CompoundStatement		36:9:848:848	1054982	0					
ANR	1055224	ExpressionStatement	"WSEEK ( core , 1 )"	487:3:15076:15091	1054982	0	True				
ANR	1055225	CallExpression	"WSEEK ( core , 1 )"		1054982	0					
ANR	1055226	Callee	WSEEK		1054982	0					
ANR	1055227	Identifier	WSEEK		1054982	0					
ANR	1055228	ArgumentList	core		1054982	1					
ANR	1055229	Argument	core		1054982	0					
ANR	1055230	Identifier	core		1054982	0					
ANR	1055231	Argument	1		1054982	1					
ANR	1055232	PrimaryExpression	1		1054982	0					
ANR	1055233	BreakStatement	break ;	489:2:15099:15104	1054982	3	True				
ANR	1055234	Label	case 2 :	490:1:15107:15113	1054982	4	True				
ANR	1055235	ExpressionStatement	"r_write_ble16 ( buf , ( ut16 ) ( off & UT16_MAX ) , be )"	491:2:15117:15164	1054982	5	True				
ANR	1055236	CallExpression	"r_write_ble16 ( buf , ( ut16 ) ( off & UT16_MAX ) , be )"		1054982	0					
ANR	1055237	Callee	r_write_ble16		1054982	0					
ANR	1055238	Identifier	r_write_ble16		1054982	0					
ANR	1055239	ArgumentList	buf		1054982	1					
ANR	1055240	Argument	buf		1054982	0					
ANR	1055241	Identifier	buf		1054982	0					
ANR	1055242	Argument	( ut16 ) ( off & UT16_MAX )		1054982	1					
ANR	1055243	CastExpression	( ut16 ) ( off & UT16_MAX )		1054982	0					
ANR	1055244	CastTarget	ut16		1054982	0					
ANR	1055245	BitAndExpression	off & UT16_MAX		1054982	1		&			
ANR	1055246	Identifier	off		1054982	0					
ANR	1055247	Identifier	UT16_MAX		1054982	1					
ANR	1055248	Argument	be		1054982	2					
ANR	1055249	Identifier	be		1054982	0					
ANR	1055250	IfStatement	"if ( ! r_io_write ( core -> io , buf , 2 ) )"		1054982	6					
ANR	1055251	Condition	"! r_io_write ( core -> io , buf , 2 )"	492:6:15172:15201	1054982	0	True				
ANR	1055252	UnaryOperationExpression	"! r_io_write ( core -> io , buf , 2 )"		1054982	0					
ANR	1055253	UnaryOperator	!		1054982	0					
ANR	1055254	CallExpression	"r_io_write ( core -> io , buf , 2 )"		1054982	1					
ANR	1055255	Callee	r_io_write		1054982	0					
ANR	1055256	Identifier	r_io_write		1054982	0					
ANR	1055257	ArgumentList	core -> io		1054982	1					
ANR	1055258	Argument	core -> io		1054982	0					
ANR	1055259	PtrMemberAccess	core -> io		1054982	0					
ANR	1055260	Identifier	core		1054982	0					
ANR	1055261	Identifier	io		1054982	1					
ANR	1055262	Argument	buf		1054982	1					
ANR	1055263	Identifier	buf		1054982	0					
ANR	1055264	Argument	2		1054982	2					
ANR	1055265	PrimaryExpression	2		1054982	0					
ANR	1055266	CompoundStatement		42:38:981:981	1054982	1					
ANR	1055267	ExpressionStatement	cmd_write_fail ( )	493:3:15209:15226	1054982	0	True				
ANR	1055268	CallExpression	cmd_write_fail ( )		1054982	0					
ANR	1055269	Callee	cmd_write_fail		1054982	0					
ANR	1055270	Identifier	cmd_write_fail		1054982	0					
ANR	1055271	ArgumentList			1054982	1					
ANR	1055272	ElseStatement	else		1054982	0					
ANR	1055273	CompoundStatement		44:9:1014:1014	1054982	0					
ANR	1055274	ExpressionStatement	"WSEEK ( core , 2 )"	495:3:15242:15257	1054982	0	True				
ANR	1055275	CallExpression	"WSEEK ( core , 2 )"		1054982	0					
ANR	1055276	Callee	WSEEK		1054982	0					
ANR	1055277	Identifier	WSEEK		1054982	0					
ANR	1055278	ArgumentList	core		1054982	1					
ANR	1055279	Argument	core		1054982	0					
ANR	1055280	Identifier	core		1054982	0					
ANR	1055281	Argument	2		1054982	1					
ANR	1055282	PrimaryExpression	2		1054982	0					
ANR	1055283	BreakStatement	break ;	497:2:15265:15270	1054982	7	True				
ANR	1055284	Label	case 4 :	498:1:15273:15279	1054982	8	True				
ANR	1055285	ExpressionStatement	"r_write_ble32 ( buf , ( ut32 ) ( off & UT32_MAX ) , be )"	499:2:15283:15330	1054982	9	True				
ANR	1055286	CallExpression	"r_write_ble32 ( buf , ( ut32 ) ( off & UT32_MAX ) , be )"		1054982	0					
ANR	1055287	Callee	r_write_ble32		1054982	0					
ANR	1055288	Identifier	r_write_ble32		1054982	0					
ANR	1055289	ArgumentList	buf		1054982	1					
ANR	1055290	Argument	buf		1054982	0					
ANR	1055291	Identifier	buf		1054982	0					
ANR	1055292	Argument	( ut32 ) ( off & UT32_MAX )		1054982	1					
ANR	1055293	CastExpression	( ut32 ) ( off & UT32_MAX )		1054982	0					
ANR	1055294	CastTarget	ut32		1054982	0					
ANR	1055295	BitAndExpression	off & UT32_MAX		1054982	1		&			
ANR	1055296	Identifier	off		1054982	0					
ANR	1055297	Identifier	UT32_MAX		1054982	1					
ANR	1055298	Argument	be		1054982	2					
ANR	1055299	Identifier	be		1054982	0					
ANR	1055300	IfStatement	"if ( ! r_io_write ( core -> io , buf , 4 ) )"		1054982	10					
ANR	1055301	Condition	"! r_io_write ( core -> io , buf , 4 )"	500:6:15338:15367	1054982	0	True				
ANR	1055302	UnaryOperationExpression	"! r_io_write ( core -> io , buf , 4 )"		1054982	0					
ANR	1055303	UnaryOperator	!		1054982	0					
ANR	1055304	CallExpression	"r_io_write ( core -> io , buf , 4 )"		1054982	1					
ANR	1055305	Callee	r_io_write		1054982	0					
ANR	1055306	Identifier	r_io_write		1054982	0					
ANR	1055307	ArgumentList	core -> io		1054982	1					
ANR	1055308	Argument	core -> io		1054982	0					
ANR	1055309	PtrMemberAccess	core -> io		1054982	0					
ANR	1055310	Identifier	core		1054982	0					
ANR	1055311	Identifier	io		1054982	1					
ANR	1055312	Argument	buf		1054982	1					
ANR	1055313	Identifier	buf		1054982	0					
ANR	1055314	Argument	4		1054982	2					
ANR	1055315	PrimaryExpression	4		1054982	0					
ANR	1055316	CompoundStatement		50:38:1147:1147	1054982	1					
ANR	1055317	ExpressionStatement	cmd_write_fail ( )	501:3:15375:15392	1054982	0	True				
ANR	1055318	CallExpression	cmd_write_fail ( )		1054982	0					
ANR	1055319	Callee	cmd_write_fail		1054982	0					
ANR	1055320	Identifier	cmd_write_fail		1054982	0					
ANR	1055321	ArgumentList			1054982	1					
ANR	1055322	ElseStatement	else		1054982	0					
ANR	1055323	CompoundStatement		52:9:1180:1180	1054982	0					
ANR	1055324	ExpressionStatement	"WSEEK ( core , 4 )"	503:3:15408:15423	1054982	0	True				
ANR	1055325	CallExpression	"WSEEK ( core , 4 )"		1054982	0					
ANR	1055326	Callee	WSEEK		1054982	0					
ANR	1055327	Identifier	WSEEK		1054982	0					
ANR	1055328	ArgumentList	core		1054982	1					
ANR	1055329	Argument	core		1054982	0					
ANR	1055330	Identifier	core		1054982	0					
ANR	1055331	Argument	4		1054982	1					
ANR	1055332	PrimaryExpression	4		1054982	0					
ANR	1055333	BreakStatement	break ;	505:2:15431:15436	1054982	11	True				
ANR	1055334	Label	case 8 :	506:1:15439:15445	1054982	12	True				
ANR	1055335	ExpressionStatement	"r_write_ble64 ( buf , off , be )"	507:2:15449:15477	1054982	13	True				
ANR	1055336	CallExpression	"r_write_ble64 ( buf , off , be )"		1054982	0					
ANR	1055337	Callee	r_write_ble64		1054982	0					
ANR	1055338	Identifier	r_write_ble64		1054982	0					
ANR	1055339	ArgumentList	buf		1054982	1					
ANR	1055340	Argument	buf		1054982	0					
ANR	1055341	Identifier	buf		1054982	0					
ANR	1055342	Argument	off		1054982	1					
ANR	1055343	Identifier	off		1054982	0					
ANR	1055344	Argument	be		1054982	2					
ANR	1055345	Identifier	be		1054982	0					
ANR	1055346	IfStatement	"if ( ! r_io_write ( core -> io , buf , 8 ) )"		1054982	14					
ANR	1055347	Condition	"! r_io_write ( core -> io , buf , 8 )"	508:6:15485:15514	1054982	0	True				
ANR	1055348	UnaryOperationExpression	"! r_io_write ( core -> io , buf , 8 )"		1054982	0					
ANR	1055349	UnaryOperator	!		1054982	0					
ANR	1055350	CallExpression	"r_io_write ( core -> io , buf , 8 )"		1054982	1					
ANR	1055351	Callee	r_io_write		1054982	0					
ANR	1055352	Identifier	r_io_write		1054982	0					
ANR	1055353	ArgumentList	core -> io		1054982	1					
ANR	1055354	Argument	core -> io		1054982	0					
ANR	1055355	PtrMemberAccess	core -> io		1054982	0					
ANR	1055356	Identifier	core		1054982	0					
ANR	1055357	Identifier	io		1054982	1					
ANR	1055358	Argument	buf		1054982	1					
ANR	1055359	Identifier	buf		1054982	0					
ANR	1055360	Argument	8		1054982	2					
ANR	1055361	PrimaryExpression	8		1054982	0					
ANR	1055362	CompoundStatement		58:38:1294:1294	1054982	1					
ANR	1055363	ExpressionStatement	cmd_write_fail ( )	509:3:15522:15539	1054982	0	True				
ANR	1055364	CallExpression	cmd_write_fail ( )		1054982	0					
ANR	1055365	Callee	cmd_write_fail		1054982	0					
ANR	1055366	Identifier	cmd_write_fail		1054982	0					
ANR	1055367	ArgumentList			1054982	1					
ANR	1055368	ElseStatement	else		1054982	0					
ANR	1055369	CompoundStatement		60:9:1327:1327	1054982	0					
ANR	1055370	ExpressionStatement	"WSEEK ( core , 8 )"	511:3:15555:15570	1054982	0	True				
ANR	1055371	CallExpression	"WSEEK ( core , 8 )"		1054982	0					
ANR	1055372	Callee	WSEEK		1054982	0					
ANR	1055373	Identifier	WSEEK		1054982	0					
ANR	1055374	ArgumentList	core		1054982	1					
ANR	1055375	Argument	core		1054982	0					
ANR	1055376	Identifier	core		1054982	0					
ANR	1055377	Argument	8		1054982	1					
ANR	1055378	PrimaryExpression	8		1054982	0					
ANR	1055379	BreakStatement	break ;	513:2:15578:15583	1054982	15	True				
ANR	1055380	ExpressionStatement	r_core_block_read ( core )	515:1:15589:15613	1054982	17	True				
ANR	1055381	CallExpression	r_core_block_read ( core )		1054982	0					
ANR	1055382	Callee	r_core_block_read		1054982	0					
ANR	1055383	Identifier	r_core_block_read		1054982	0					
ANR	1055384	ArgumentList	core		1054982	1					
ANR	1055385	Argument	core		1054982	0					
ANR	1055386	Identifier	core		1054982	0					
ANR	1055387	ReturnType	static void		1054982	1					
ANR	1055388	Identifier	cmd_write_value		1054982	2					
ANR	1055389	ParameterList	"RCore * core , const char * input"		1054982	3					
ANR	1055390	Parameter	RCore * core	451:29:14190:14200	1054982	0	True				
ANR	1055391	ParameterType	RCore *		1054982	0					
ANR	1055392	Identifier	core		1054982	1					
ANR	1055393	Parameter	const char * input	451:42:14203:14219	1054982	1	True				
ANR	1055394	ParameterType	const char *		1054982	0					
ANR	1055395	Identifier	input		1054982	1					
ANR	1055396	CFGEntryNode	ENTRY		1054982		True				
ANR	1055397	CFGExitNode	EXIT		1054982		True				
ANR	1055398	Symbol	UT32_MAX		1054982						
ANR	1055399	Symbol	R_IO_SEEK_SET		1054982						
ANR	1055400	Symbol	be		1054982						
ANR	1055401	Symbol	* core		1054982						
ANR	1055402	Symbol	* input		1054982						
ANR	1055403	Symbol	core -> offset		1054982						
ANR	1055404	Symbol	UT64_32U		1054982						
ANR	1055405	Symbol	type		1054982						
ANR	1055406	Symbol	r_num_math		1054982						
ANR	1055407	Symbol	core -> io		1054982						
ANR	1055408	Symbol	r_io_write		1054982						
ANR	1055409	Symbol	UT16_MAX		1054982						
ANR	1055410	Symbol	core -> num		1054982						
ANR	1055411	Symbol	UT64_MAX		1054982						
ANR	1055412	Symbol	* * core		1054982						
ANR	1055413	Symbol	core -> config		1054982						
ANR	1055414	Symbol	res		1054982						
ANR	1055415	Symbol	help_msg_wv		1054982						
ANR	1055416	Symbol	core -> file		1054982						
ANR	1055417	Symbol	wseek		1054982						
ANR	1055418	Symbol	off		1054982						
ANR	1055419	Symbol	core		1054982						
ANR	1055420	Symbol	input		1054982						
ANR	1055421	Symbol	* core -> file		1054982						
ANR	1055422	Symbol	buf		1054982						
ANR	1055423	Symbol	UT8_MAX		1054982						
ANR	1055424	Symbol	r_io_seek		1054982						
ANR	1055425	Symbol	r_config_get_i		1054982						
ANR	1055426	Symbol	core -> file -> fd		1054982						
ANR	1055427	Function	cmd_wff	518:0:15618:16783							
ANR	1055428	FunctionDef	"cmd_wff (RCore * core , const char * input)"		1055427	0					
ANR	1055429	CompoundStatement		518:52:15670:16783	1055427	0					
ANR	1055430	IdentifierDeclStatement	ut8 * buf ;	519:1:15673:15681	1055427	0	True				
ANR	1055431	IdentifierDecl	* buf		1055427	0					
ANR	1055432	IdentifierDeclType	ut8 *		1055427	0					
ANR	1055433	Identifier	buf		1055427	1					
ANR	1055434	IdentifierDeclStatement	int size ;	520:1:15684:15692	1055427	1	True				
ANR	1055435	IdentifierDecl	size		1055427	0					
ANR	1055436	IdentifierDeclType	int		1055427	0					
ANR	1055437	Identifier	size		1055427	1					
ANR	1055438	IdentifierDeclStatement	const char * arg = input + ( ( input [ 1 ] == ' ' ) ? 2 : 1 ) ;	522:1:15737:15790	1055427	2	True				
ANR	1055439	IdentifierDecl	* arg = input + ( ( input [ 1 ] == ' ' ) ? 2 : 1 )		1055427	0					
ANR	1055440	IdentifierDeclType	const char *		1055427	0					
ANR	1055441	Identifier	arg		1055427	1					
ANR	1055442	AssignmentExpression	* arg = input + ( ( input [ 1 ] == ' ' ) ? 2 : 1 )		1055427	2		=			
ANR	1055443	Identifier	arg		1055427	0					
ANR	1055444	AdditiveExpression	input + ( ( input [ 1 ] == ' ' ) ? 2 : 1 )		1055427	1		+			
ANR	1055445	Identifier	input		1055427	0					
ANR	1055446	ConditionalExpression	( input [ 1 ] == ' ' ) ? 2 : 1		1055427	1					
ANR	1055447	Condition	input [ 1 ] == ' '		1055427	0					
ANR	1055448	EqualityExpression	input [ 1 ] == ' '		1055427	0		==			
ANR	1055449	ArrayIndexing	input [ 1 ]		1055427	0					
ANR	1055450	Identifier	input		1055427	0					
ANR	1055451	PrimaryExpression	1		1055427	1					
ANR	1055452	PrimaryExpression	' '		1055427	1					
ANR	1055453	PrimaryExpression	2		1055427	1					
ANR	1055454	PrimaryExpression	1		1055427	2					
ANR	1055455	IdentifierDeclStatement	"int wseek = r_config_get_i ( core -> config , ""cfg.wseek"" ) ;"	523:1:15793:15847	1055427	3	True				
ANR	1055456	IdentifierDecl	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"		1055427	0					
ANR	1055457	IdentifierDeclType	int		1055427	0					
ANR	1055458	Identifier	wseek		1055427	1					
ANR	1055459	AssignmentExpression	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"		1055427	2		=			
ANR	1055460	Identifier	wseek		1055427	0					
ANR	1055461	CallExpression	"r_config_get_i ( core -> config , ""cfg.wseek"" )"		1055427	1					
ANR	1055462	Callee	r_config_get_i		1055427	0					
ANR	1055463	Identifier	r_config_get_i		1055427	0					
ANR	1055464	ArgumentList	core -> config		1055427	1					
ANR	1055465	Argument	core -> config		1055427	0					
ANR	1055466	PtrMemberAccess	core -> config		1055427	0					
ANR	1055467	Identifier	core		1055427	0					
ANR	1055468	Identifier	config		1055427	1					
ANR	1055469	Argument	"""cfg.wseek"""		1055427	1					
ANR	1055470	PrimaryExpression	"""cfg.wseek"""		1055427	0					
ANR	1055471	IdentifierDeclStatement	"char * p , * a = r_str_trim_dup ( arg ) ;"	524:1:15850:15884	1055427	4	True				
ANR	1055472	IdentifierDecl	* p		1055427	0					
ANR	1055473	IdentifierDeclType	char *		1055427	0					
ANR	1055474	Identifier	p		1055427	1					
ANR	1055475	IdentifierDecl	* a = r_str_trim_dup ( arg )		1055427	1					
ANR	1055476	IdentifierDeclType	char *		1055427	0					
ANR	1055477	Identifier	a		1055427	1					
ANR	1055478	AssignmentExpression	* a = r_str_trim_dup ( arg )		1055427	2		=			
ANR	1055479	Identifier	a		1055427	0					
ANR	1055480	CallExpression	r_str_trim_dup ( arg )		1055427	1					
ANR	1055481	Callee	r_str_trim_dup		1055427	0					
ANR	1055482	Identifier	r_str_trim_dup		1055427	0					
ANR	1055483	ArgumentList	arg		1055427	1					
ANR	1055484	Argument	arg		1055427	0					
ANR	1055485	Identifier	arg		1055427	0					
ANR	1055486	ExpressionStatement	"p = strchr ( a , ' ' )"	525:1:15887:15906	1055427	5	True				
ANR	1055487	AssignmentExpression	"p = strchr ( a , ' ' )"		1055427	0		=			
ANR	1055488	Identifier	p		1055427	0					
ANR	1055489	CallExpression	"strchr ( a , ' ' )"		1055427	1					
ANR	1055490	Callee	strchr		1055427	0					
ANR	1055491	Identifier	strchr		1055427	0					
ANR	1055492	ArgumentList	a		1055427	1					
ANR	1055493	Argument	a		1055427	0					
ANR	1055494	Identifier	a		1055427	0					
ANR	1055495	Argument	' '		1055427	1					
ANR	1055496	PrimaryExpression	' '		1055427	0					
ANR	1055497	IfStatement	if ( p )		1055427	6					
ANR	1055498	Condition	p	526:5:15913:15913	1055427	0	True				
ANR	1055499	Identifier	p		1055427	0					
ANR	1055500	CompoundStatement		9:8:245:245	1055427	1					
ANR	1055501	ExpressionStatement	* p ++ = 0	527:2:15920:15928	1055427	0	True				
ANR	1055502	AssignmentExpression	* p ++ = 0		1055427	0		=			
ANR	1055503	UnaryOperationExpression	* p ++		1055427	0					
ANR	1055504	UnaryOperator	*		1055427	0					
ANR	1055505	PostIncDecOperationExpression	p ++		1055427	1					
ANR	1055506	Identifier	p		1055427	0					
ANR	1055507	IncDec	++		1055427	1					
ANR	1055508	PrimaryExpression	0		1055427	1					
ANR	1055509	IfStatement	if ( * arg == '?' || ! * arg )		1055427	7					
ANR	1055510	Condition	* arg == '?' || ! * arg	530:5:15939:15957	1055427	0	True				
ANR	1055511	OrExpression	* arg == '?' || ! * arg		1055427	0		||			
ANR	1055512	EqualityExpression	* arg == '?'		1055427	0		==			
ANR	1055513	UnaryOperationExpression	* arg		1055427	0					
ANR	1055514	UnaryOperator	*		1055427	0					
ANR	1055515	Identifier	arg		1055427	1					
ANR	1055516	PrimaryExpression	'?'		1055427	1					
ANR	1055517	UnaryOperationExpression	! * arg		1055427	1					
ANR	1055518	UnaryOperator	!		1055427	0					
ANR	1055519	UnaryOperationExpression	* arg		1055427	1					
ANR	1055520	UnaryOperator	*		1055427	0					
ANR	1055521	Identifier	arg		1055427	1					
ANR	1055522	CompoundStatement		13:26:289:289	1055427	1					
ANR	1055523	ExpressionStatement	"eprintf ( ""Usage: wf [file] ([size] ([offset]))\\n"" )"	531:2:15964:16014	1055427	0	True				
ANR	1055524	CallExpression	"eprintf ( ""Usage: wf [file] ([size] ([offset]))\\n"" )"		1055427	0					
ANR	1055525	Callee	eprintf		1055427	0					
ANR	1055526	Identifier	eprintf		1055427	0					
ANR	1055527	ArgumentList	"""Usage: wf [file] ([size] ([offset]))\\n"""		1055427	1					
ANR	1055528	Argument	"""Usage: wf [file] ([size] ([offset]))\\n"""		1055427	0					
ANR	1055529	PrimaryExpression	"""Usage: wf [file] ([size] ([offset]))\\n"""		1055427	0					
ANR	1055530	IfStatement	"if ( ! strcmp ( arg , ""-"" ) )"		1055427	8					
ANR	1055531	Condition	"! strcmp ( arg , ""-"" )"	533:5:16024:16041	1055427	0	True				
ANR	1055532	UnaryOperationExpression	"! strcmp ( arg , ""-"" )"		1055427	0					
ANR	1055533	UnaryOperator	!		1055427	0					
ANR	1055534	CallExpression	"strcmp ( arg , ""-"" )"		1055427	1					
ANR	1055535	Callee	strcmp		1055427	0					
ANR	1055536	Identifier	strcmp		1055427	0					
ANR	1055537	ArgumentList	arg		1055427	1					
ANR	1055538	Argument	arg		1055427	0					
ANR	1055539	Identifier	arg		1055427	0					
ANR	1055540	Argument	"""-"""		1055427	1					
ANR	1055541	PrimaryExpression	"""-"""		1055427	0					
ANR	1055542	CompoundStatement		17:2:377:421	1055427	1					
ANR	1055543	IdentifierDeclStatement	"char * out = r_core_editor ( core , NULL , NULL ) ;"	534:2:16048:16092	1055427	0	True				
ANR	1055544	IdentifierDecl	"* out = r_core_editor ( core , NULL , NULL )"		1055427	0					
ANR	1055545	IdentifierDeclType	char *		1055427	0					
ANR	1055546	Identifier	out		1055427	1					
ANR	1055547	AssignmentExpression	"* out = r_core_editor ( core , NULL , NULL )"		1055427	2		=			
ANR	1055548	Identifier	out		1055427	0					
ANR	1055549	CallExpression	"r_core_editor ( core , NULL , NULL )"		1055427	1					
ANR	1055550	Callee	r_core_editor		1055427	0					
ANR	1055551	Identifier	r_core_editor		1055427	0					
ANR	1055552	ArgumentList	core		1055427	1					
ANR	1055553	Argument	core		1055427	0					
ANR	1055554	Identifier	core		1055427	0					
ANR	1055555	Argument	NULL		1055427	1					
ANR	1055556	Identifier	NULL		1055427	0					
ANR	1055557	Argument	NULL		1055427	2					
ANR	1055558	Identifier	NULL		1055427	0					
ANR	1055559	IfStatement	if ( out )		1055427	1					
ANR	1055560	Condition	out	535:6:16100:16102	1055427	0	True				
ANR	1055561	Identifier	out		1055427	0					
ANR	1055562	CompoundStatement		18:11:434:434	1055427	1					
ANR	1055563	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , ( ut8 * ) out , strlen ( out ) )"	536:3:16110:16177	1055427	0	True				
ANR	1055564	CallExpression	"r_io_write_at ( core -> io , core -> offset , ( ut8 * ) out , strlen ( out ) )"		1055427	0					
ANR	1055565	Callee	r_io_write_at		1055427	0					
ANR	1055566	Identifier	r_io_write_at		1055427	0					
ANR	1055567	ArgumentList	core -> io		1055427	1					
ANR	1055568	Argument	core -> io		1055427	0					
ANR	1055569	PtrMemberAccess	core -> io		1055427	0					
ANR	1055570	Identifier	core		1055427	0					
ANR	1055571	Identifier	io		1055427	1					
ANR	1055572	Argument	core -> offset		1055427	1					
ANR	1055573	PtrMemberAccess	core -> offset		1055427	0					
ANR	1055574	Identifier	core		1055427	0					
ANR	1055575	Identifier	offset		1055427	1					
ANR	1055576	Argument	( ut8 * ) out		1055427	2					
ANR	1055577	CastExpression	( ut8 * ) out		1055427	0					
ANR	1055578	CastTarget	ut8 *		1055427	0					
ANR	1055579	Identifier	out		1055427	1					
ANR	1055580	Argument	strlen ( out )		1055427	3					
ANR	1055581	CallExpression	strlen ( out )		1055427	0					
ANR	1055582	Callee	strlen		1055427	0					
ANR	1055583	Identifier	strlen		1055427	0					
ANR	1055584	ArgumentList	out		1055427	1					
ANR	1055585	Argument	out		1055427	0					
ANR	1055586	Identifier	out		1055427	0					
ANR	1055587	ExpressionStatement	r_core_block_read ( core )	538:3:16182:16206	1055427	1	True				
ANR	1055588	CallExpression	r_core_block_read ( core )		1055427	0					
ANR	1055589	Callee	r_core_block_read		1055427	0					
ANR	1055590	Identifier	r_core_block_read		1055427	0					
ANR	1055591	ArgumentList	core		1055427	1					
ANR	1055592	Argument	core		1055427	0					
ANR	1055593	Identifier	core		1055427	0					
ANR	1055594	ExpressionStatement	free ( out )	539:3:16211:16221	1055427	2	True				
ANR	1055595	CallExpression	free ( out )		1055427	0					
ANR	1055596	Callee	free		1055427	0					
ANR	1055597	Identifier	free		1055427	0					
ANR	1055598	ArgumentList	out		1055427	1					
ANR	1055599	Argument	out		1055427	0					
ANR	1055600	Identifier	out		1055427	0					
ANR	1055601	IfStatement	"if ( ( buf = ( ut8 * ) r_file_slurp ( a , & size ) ) )"		1055427	9					
ANR	1055602	Condition	"buf = ( ut8 * ) r_file_slurp ( a , & size )"	542:5:16235:16272	1055427	0	True				
ANR	1055603	AssignmentExpression	"buf = ( ut8 * ) r_file_slurp ( a , & size )"		1055427	0		=			
ANR	1055604	Identifier	buf		1055427	0					
ANR	1055605	CastExpression	"( ut8 * ) r_file_slurp ( a , & size )"		1055427	1					
ANR	1055606	CastTarget	ut8 *		1055427	0					
ANR	1055607	CallExpression	"r_file_slurp ( a , & size )"		1055427	1					
ANR	1055608	Callee	r_file_slurp		1055427	0					
ANR	1055609	Identifier	r_file_slurp		1055427	0					
ANR	1055610	ArgumentList	a		1055427	1					
ANR	1055611	Argument	a		1055427	0					
ANR	1055612	Identifier	a		1055427	0					
ANR	1055613	Argument	& size		1055427	1					
ANR	1055614	UnaryOperationExpression	& size		1055427	0					
ANR	1055615	UnaryOperator	&		1055427	0					
ANR	1055616	Identifier	size		1055427	1					
ANR	1055617	CompoundStatement		27:2:628:666	1055427	1					
ANR	1055618	IdentifierDeclStatement	int u_offset = 0 ;	543:2:16279:16295	1055427	0	True				
ANR	1055619	IdentifierDecl	u_offset = 0		1055427	0					
ANR	1055620	IdentifierDeclType	int		1055427	0					
ANR	1055621	Identifier	u_offset		1055427	1					
ANR	1055622	AssignmentExpression	u_offset = 0		1055427	2		=			
ANR	1055623	Identifier	u_offset		1055427	0					
ANR	1055624	PrimaryExpression	0		1055427	1					
ANR	1055625	IdentifierDeclStatement	"int u_size = r_num_math ( core -> num , p ) ;"	544:2:16299:16337	1055427	1	True				
ANR	1055626	IdentifierDecl	"u_size = r_num_math ( core -> num , p )"		1055427	0					
ANR	1055627	IdentifierDeclType	int		1055427	0					
ANR	1055628	Identifier	u_size		1055427	1					
ANR	1055629	AssignmentExpression	"u_size = r_num_math ( core -> num , p )"		1055427	2		=			
ANR	1055630	Identifier	u_size		1055427	0					
ANR	1055631	CallExpression	"r_num_math ( core -> num , p )"		1055427	1					
ANR	1055632	Callee	r_num_math		1055427	0					
ANR	1055633	Identifier	r_num_math		1055427	0					
ANR	1055634	ArgumentList	core -> num		1055427	1					
ANR	1055635	Argument	core -> num		1055427	0					
ANR	1055636	PtrMemberAccess	core -> num		1055427	0					
ANR	1055637	Identifier	core		1055427	0					
ANR	1055638	Identifier	num		1055427	1					
ANR	1055639	Argument	p		1055427	1					
ANR	1055640	Identifier	p		1055427	0					
ANR	1055641	IfStatement	if ( u_size < 1 )		1055427	2					
ANR	1055642	Condition	u_size < 1	545:6:16345:16354	1055427	0	True				
ANR	1055643	RelationalExpression	u_size < 1		1055427	0		<			
ANR	1055644	Identifier	u_size		1055427	0					
ANR	1055645	PrimaryExpression	1		1055427	1					
ANR	1055646	ExpressionStatement	u_size = size	545:18:16357:16370	1055427	1	True				
ANR	1055647	AssignmentExpression	u_size = size		1055427	0		=			
ANR	1055648	Identifier	u_size		1055427	0					
ANR	1055649	Identifier	size		1055427	1					
ANR	1055650	IfStatement	if ( p )		1055427	3					
ANR	1055651	Condition	p	546:6:16378:16378	1055427	0	True				
ANR	1055652	Identifier	p		1055427	0					
ANR	1055653	CompoundStatement		29:9:710:710	1055427	1					
ANR	1055654	ExpressionStatement	* p ++ = 0	547:3:16386:16394	1055427	0	True				
ANR	1055655	AssignmentExpression	* p ++ = 0		1055427	0		=			
ANR	1055656	UnaryOperationExpression	* p ++		1055427	0					
ANR	1055657	UnaryOperator	*		1055427	0					
ANR	1055658	PostIncDecOperationExpression	p ++		1055427	1					
ANR	1055659	Identifier	p		1055427	0					
ANR	1055660	IncDec	++		1055427	1					
ANR	1055661	PrimaryExpression	0		1055427	1					
ANR	1055662	ExpressionStatement	"u_offset = r_num_math ( core -> num , p )"	548:3:16399:16435	1055427	1	True				
ANR	1055663	AssignmentExpression	"u_offset = r_num_math ( core -> num , p )"		1055427	0		=			
ANR	1055664	Identifier	u_offset		1055427	0					
ANR	1055665	CallExpression	"r_num_math ( core -> num , p )"		1055427	1					
ANR	1055666	Callee	r_num_math		1055427	0					
ANR	1055667	Identifier	r_num_math		1055427	0					
ANR	1055668	ArgumentList	core -> num		1055427	1					
ANR	1055669	Argument	core -> num		1055427	0					
ANR	1055670	PtrMemberAccess	core -> num		1055427	0					
ANR	1055671	Identifier	core		1055427	0					
ANR	1055672	Identifier	num		1055427	1					
ANR	1055673	Argument	p		1055427	1					
ANR	1055674	Identifier	p		1055427	0					
ANR	1055675	IfStatement	if ( u_offset > size )		1055427	2					
ANR	1055676	Condition	u_offset > size	549:7:16444:16458	1055427	0	True				
ANR	1055677	RelationalExpression	u_offset > size		1055427	0		>			
ANR	1055678	Identifier	u_offset		1055427	0					
ANR	1055679	Identifier	size		1055427	1					
ANR	1055680	CompoundStatement		32:24:790:790	1055427	1					
ANR	1055681	ExpressionStatement	"eprintf ( ""Invalid offset\\n"" )"	550:4:16467:16495	1055427	0	True				
ANR	1055682	CallExpression	"eprintf ( ""Invalid offset\\n"" )"		1055427	0					
ANR	1055683	Callee	eprintf		1055427	0					
ANR	1055684	Identifier	eprintf		1055427	0					
ANR	1055685	ArgumentList	"""Invalid offset\\n"""		1055427	1					
ANR	1055686	Argument	"""Invalid offset\\n"""		1055427	0					
ANR	1055687	PrimaryExpression	"""Invalid offset\\n"""		1055427	0					
ANR	1055688	ExpressionStatement	free ( buf )	551:4:16501:16511	1055427	1	True				
ANR	1055689	CallExpression	free ( buf )		1055427	0					
ANR	1055690	Callee	free		1055427	0					
ANR	1055691	Identifier	free		1055427	0					
ANR	1055692	ArgumentList	buf		1055427	1					
ANR	1055693	Argument	buf		1055427	0					
ANR	1055694	Identifier	buf		1055427	0					
ANR	1055695	ReturnStatement	return false ;	552:4:16517:16529	1055427	2	True				
ANR	1055696	Identifier	false		1055427	0					
ANR	1055697	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	555:2:16542:16580	1055427	4	True				
ANR	1055698	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1055427	0					
ANR	1055699	Callee	r_io_use_fd		1055427	0					
ANR	1055700	Identifier	r_io_use_fd		1055427	0					
ANR	1055701	ArgumentList	core -> io		1055427	1					
ANR	1055702	Argument	core -> io		1055427	0					
ANR	1055703	PtrMemberAccess	core -> io		1055427	0					
ANR	1055704	Identifier	core		1055427	0					
ANR	1055705	Identifier	io		1055427	1					
ANR	1055706	Argument	core -> file -> fd		1055427	1					
ANR	1055707	PtrMemberAccess	core -> file -> fd		1055427	0					
ANR	1055708	PtrMemberAccess	core -> file		1055427	0					
ANR	1055709	Identifier	core		1055427	0					
ANR	1055710	Identifier	file		1055427	1					
ANR	1055711	Identifier	fd		1055427	1					
ANR	1055712	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , buf + u_offset , u_size )"	556:2:16584:16646	1055427	5	True				
ANR	1055713	CallExpression	"r_io_write_at ( core -> io , core -> offset , buf + u_offset , u_size )"		1055427	0					
ANR	1055714	Callee	r_io_write_at		1055427	0					
ANR	1055715	Identifier	r_io_write_at		1055427	0					
ANR	1055716	ArgumentList	core -> io		1055427	1					
ANR	1055717	Argument	core -> io		1055427	0					
ANR	1055718	PtrMemberAccess	core -> io		1055427	0					
ANR	1055719	Identifier	core		1055427	0					
ANR	1055720	Identifier	io		1055427	1					
ANR	1055721	Argument	core -> offset		1055427	1					
ANR	1055722	PtrMemberAccess	core -> offset		1055427	0					
ANR	1055723	Identifier	core		1055427	0					
ANR	1055724	Identifier	offset		1055427	1					
ANR	1055725	Argument	buf + u_offset		1055427	2					
ANR	1055726	AdditiveExpression	buf + u_offset		1055427	0		+			
ANR	1055727	Identifier	buf		1055427	0					
ANR	1055728	Identifier	u_offset		1055427	1					
ANR	1055729	Argument	u_size		1055427	3					
ANR	1055730	Identifier	u_size		1055427	0					
ANR	1055731	ExpressionStatement	"WSEEK ( core , size )"	557:2:16650:16668	1055427	6	True				
ANR	1055732	CallExpression	"WSEEK ( core , size )"		1055427	0					
ANR	1055733	Callee	WSEEK		1055427	0					
ANR	1055734	Identifier	WSEEK		1055427	0					
ANR	1055735	ArgumentList	core		1055427	1					
ANR	1055736	Argument	core		1055427	0					
ANR	1055737	Identifier	core		1055427	0					
ANR	1055738	Argument	size		1055427	1					
ANR	1055739	Identifier	size		1055427	0					
ANR	1055740	ExpressionStatement	free ( buf )	558:2:16672:16682	1055427	7	True				
ANR	1055741	CallExpression	free ( buf )		1055427	0					
ANR	1055742	Callee	free		1055427	0					
ANR	1055743	Identifier	free		1055427	0					
ANR	1055744	ArgumentList	buf		1055427	1					
ANR	1055745	Argument	buf		1055427	0					
ANR	1055746	Identifier	buf		1055427	0					
ANR	1055747	ExpressionStatement	r_core_block_read ( core )	559:2:16686:16710	1055427	8	True				
ANR	1055748	CallExpression	r_core_block_read ( core )		1055427	0					
ANR	1055749	Callee	r_core_block_read		1055427	0					
ANR	1055750	Identifier	r_core_block_read		1055427	0					
ANR	1055751	ArgumentList	core		1055427	1					
ANR	1055752	Argument	core		1055427	0					
ANR	1055753	Identifier	core		1055427	0					
ANR	1055754	ElseStatement	else		1055427	0					
ANR	1055755	CompoundStatement		43:8:1049:1049	1055427	0					
ANR	1055756	ExpressionStatement	"eprintf ( ""Cannot open file '%s'\\n"" , arg )"	561:2:16724:16764	1055427	0	True				
ANR	1055757	CallExpression	"eprintf ( ""Cannot open file '%s'\\n"" , arg )"		1055427	0					
ANR	1055758	Callee	eprintf		1055427	0					
ANR	1055759	Identifier	eprintf		1055427	0					
ANR	1055760	ArgumentList	"""Cannot open file '%s'\\n"""		1055427	1					
ANR	1055761	Argument	"""Cannot open file '%s'\\n"""		1055427	0					
ANR	1055762	PrimaryExpression	"""Cannot open file '%s'\\n"""		1055427	0					
ANR	1055763	Argument	arg		1055427	1					
ANR	1055764	Identifier	arg		1055427	0					
ANR	1055765	ReturnStatement	return true ;	563:1:16770:16781	1055427	10	True				
ANR	1055766	Identifier	true		1055427	0					
ANR	1055767	ReturnType	static bool		1055427	1					
ANR	1055768	Identifier	cmd_wff		1055427	2					
ANR	1055769	ParameterList	"RCore * core , const char * input"		1055427	3					
ANR	1055770	Parameter	RCore * core	518:20:15638:15648	1055427	0	True				
ANR	1055771	ParameterType	RCore *		1055427	0					
ANR	1055772	Identifier	core		1055427	1					
ANR	1055773	Parameter	const char * input	518:33:15651:15667	1055427	1	True				
ANR	1055774	ParameterType	const char *		1055427	0					
ANR	1055775	Identifier	input		1055427	1					
ANR	1055776	CFGEntryNode	ENTRY		1055427		True				
ANR	1055777	CFGExitNode	EXIT		1055427		True				
ANR	1055778	Symbol	* input		1055427						
ANR	1055779	Symbol	* core		1055427						
ANR	1055780	Symbol	strchr		1055427						
ANR	1055781	Symbol	core -> offset		1055427						
ANR	1055782	Symbol	u_offset		1055427						
ANR	1055783	Symbol	r_str_trim_dup		1055427						
ANR	1055784	Symbol	out		1055427						
ANR	1055785	Symbol	r_num_math		1055427						
ANR	1055786	Symbol	strlen		1055427						
ANR	1055787	Symbol	core -> io		1055427						
ANR	1055788	Symbol	arg		1055427						
ANR	1055789	Symbol	r_core_editor		1055427						
ANR	1055790	Symbol	u_size		1055427						
ANR	1055791	Symbol	core -> num		1055427						
ANR	1055792	Symbol	* * core		1055427						
ANR	1055793	Symbol	core -> config		1055427						
ANR	1055794	Symbol	strcmp		1055427						
ANR	1055795	Symbol	a		1055427						
ANR	1055796	Symbol	r_file_slurp		1055427						
ANR	1055797	Symbol	NULL		1055427						
ANR	1055798	Symbol	core -> file		1055427						
ANR	1055799	Symbol	* p ++		1055427						
ANR	1055800	Symbol	false		1055427						
ANR	1055801	Symbol	& size		1055427						
ANR	1055802	Symbol	wseek		1055427						
ANR	1055803	Symbol	p		1055427						
ANR	1055804	Symbol	core		1055427						
ANR	1055805	Symbol	input		1055427						
ANR	1055806	Symbol	* core -> file		1055427						
ANR	1055807	Symbol	buf		1055427						
ANR	1055808	Symbol	size		1055427						
ANR	1055809	Symbol	r_config_get_i		1055427						
ANR	1055810	Symbol	core -> file -> fd		1055427						
ANR	1055811	Symbol	true		1055427						
ANR	1055812	Symbol	* arg		1055427						
ANR	1055813	Function	ioMemcpy	566:0:16786:17276							
ANR	1055814	FunctionDef	"ioMemcpy (RCore * core , ut64 dst , ut64 src , int len)"		1055813	0					
ANR	1055815	CompoundStatement		566:64:16850:17276	1055813	0					
ANR	1055816	IdentifierDeclStatement	bool ret = false ;	567:1:16853:16869	1055813	0	True				
ANR	1055817	IdentifierDecl	ret = false		1055813	0					
ANR	1055818	IdentifierDeclType	bool		1055813	0					
ANR	1055819	Identifier	ret		1055813	1					
ANR	1055820	AssignmentExpression	ret = false		1055813	2		=			
ANR	1055821	Identifier	false		1055813	0					
ANR	1055822	Identifier	false		1055813	1					
ANR	1055823	IfStatement	if ( len > 0 )		1055813	1					
ANR	1055824	Condition	len > 0	568:5:16876:16882	1055813	0	True				
ANR	1055825	RelationalExpression	len > 0		1055813	0		>			
ANR	1055826	Identifier	len		1055813	0					
ANR	1055827	PrimaryExpression	0		1055813	1					
ANR	1055828	CompoundStatement		4:2:38:65	1055813	1					
ANR	1055829	IdentifierDeclStatement	"ut8 * buf = calloc ( 1 , len ) ;"	569:2:16889:16916	1055813	0	True				
ANR	1055830	IdentifierDecl	"* buf = calloc ( 1 , len )"		1055813	0					
ANR	1055831	IdentifierDeclType	ut8 *		1055813	0					
ANR	1055832	Identifier	buf		1055813	1					
ANR	1055833	AssignmentExpression	"* buf = calloc ( 1 , len )"		1055813	2		=			
ANR	1055834	Identifier	buf		1055813	0					
ANR	1055835	CallExpression	"calloc ( 1 , len )"		1055813	1					
ANR	1055836	Callee	calloc		1055813	0					
ANR	1055837	Identifier	calloc		1055813	0					
ANR	1055838	ArgumentList	1		1055813	1					
ANR	1055839	Argument	1		1055813	0					
ANR	1055840	PrimaryExpression	1		1055813	0					
ANR	1055841	Argument	len		1055813	1					
ANR	1055842	Identifier	len		1055813	0					
ANR	1055843	IfStatement	if ( buf )		1055813	1					
ANR	1055844	Condition	buf	570:6:16924:16926	1055813	0	True				
ANR	1055845	Identifier	buf		1055813	0					
ANR	1055846	CompoundStatement		5:11:78:78	1055813	1					
ANR	1055847	IfStatement	"if ( r_io_read_at ( core -> io , src , buf , len ) )"		1055813	0					
ANR	1055848	Condition	"r_io_read_at ( core -> io , src , buf , len )"	571:7:16938:16975	1055813	0	True				
ANR	1055849	CallExpression	"r_io_read_at ( core -> io , src , buf , len )"		1055813	0					
ANR	1055850	Callee	r_io_read_at		1055813	0					
ANR	1055851	Identifier	r_io_read_at		1055813	0					
ANR	1055852	ArgumentList	core -> io		1055813	1					
ANR	1055853	Argument	core -> io		1055813	0					
ANR	1055854	PtrMemberAccess	core -> io		1055813	0					
ANR	1055855	Identifier	core		1055813	0					
ANR	1055856	Identifier	io		1055813	1					
ANR	1055857	Argument	src		1055813	1					
ANR	1055858	Identifier	src		1055813	0					
ANR	1055859	Argument	buf		1055813	2					
ANR	1055860	Identifier	buf		1055813	0					
ANR	1055861	Argument	len		1055813	3					
ANR	1055862	Identifier	len		1055813	0					
ANR	1055863	CompoundStatement		6:47:127:127	1055813	1					
ANR	1055864	IfStatement	"if ( r_io_write_at ( core -> io , dst , buf , len ) )"		1055813	0					
ANR	1055865	Condition	"r_io_write_at ( core -> io , dst , buf , len )"	572:8:16988:17026	1055813	0	True				
ANR	1055866	CallExpression	"r_io_write_at ( core -> io , dst , buf , len )"		1055813	0					
ANR	1055867	Callee	r_io_write_at		1055813	0					
ANR	1055868	Identifier	r_io_write_at		1055813	0					
ANR	1055869	ArgumentList	core -> io		1055813	1					
ANR	1055870	Argument	core -> io		1055813	0					
ANR	1055871	PtrMemberAccess	core -> io		1055813	0					
ANR	1055872	Identifier	core		1055813	0					
ANR	1055873	Identifier	io		1055813	1					
ANR	1055874	Argument	dst		1055813	1					
ANR	1055875	Identifier	dst		1055813	0					
ANR	1055876	Argument	buf		1055813	2					
ANR	1055877	Identifier	buf		1055813	0					
ANR	1055878	Argument	len		1055813	3					
ANR	1055879	Identifier	len		1055813	0					
ANR	1055880	CompoundStatement		7:49:178:178	1055813	1					
ANR	1055881	ExpressionStatement	r_core_block_read ( core )	573:5:17036:17060	1055813	0	True				
ANR	1055882	CallExpression	r_core_block_read ( core )		1055813	0					
ANR	1055883	Callee	r_core_block_read		1055813	0					
ANR	1055884	Identifier	r_core_block_read		1055813	0					
ANR	1055885	ArgumentList	core		1055813	1					
ANR	1055886	Argument	core		1055813	0					
ANR	1055887	Identifier	core		1055813	0					
ANR	1055888	ExpressionStatement	ret = true	574:5:17067:17077	1055813	1	True				
ANR	1055889	AssignmentExpression	ret = true		1055813	0		=			
ANR	1055890	Identifier	ret		1055813	0					
ANR	1055891	Identifier	true		1055813	1					
ANR	1055892	ElseStatement	else		1055813	0					
ANR	1055893	CompoundStatement		10:11:239:239	1055813	0					
ANR	1055894	Statement	eprintf	576:5:17097:17103	1055813	0	True				
ANR	1055895	Statement	(	576:13:17105:17105	1055813	1	True				
ANR	1055896	Statement	"""r_io_write_at failed at 0x%08"""	576:14:17106:17136	1055813	2	True				
ANR	1055897	Statement	PFMT64x	576:45:17137:17143	1055813	3	True				
ANR	1055898	Statement	"""\\n"""	576:52:17144:17147	1055813	4	True				
ANR	1055899	Statement	","	576:56:17148:17148	1055813	5	True				
ANR	1055900	Statement	dst	576:58:17150:17152	1055813	6	True				
ANR	1055901	Statement	)	576:61:17153:17153	1055813	7	True				
ANR	1055902	ExpressionStatement		576:62:17154:17154	1055813	8	True				
ANR	1055903	ElseStatement	else		1055813	0					
ANR	1055904	CompoundStatement		13:10:321:321	1055813	0					
ANR	1055905	Statement	eprintf	579:4:17178:17184	1055813	0	True				
ANR	1055906	Statement	(	579:12:17186:17186	1055813	1	True				
ANR	1055907	Statement	"""r_io_read_at failed at 0x%08"""	579:13:17187:17216	1055813	2	True				
ANR	1055908	Statement	PFMT64x	579:43:17217:17223	1055813	3	True				
ANR	1055909	Statement	"""\\n"""	579:50:17224:17227	1055813	4	True				
ANR	1055910	Statement	","	579:54:17228:17228	1055813	5	True				
ANR	1055911	Statement	src	579:56:17230:17232	1055813	6	True				
ANR	1055912	Statement	)	579:59:17233:17233	1055813	7	True				
ANR	1055913	ExpressionStatement		579:60:17234:17234	1055813	8	True				
ANR	1055914	ExpressionStatement	free ( buf )	581:3:17244:17254	1055813	1	True				
ANR	1055915	CallExpression	free ( buf )		1055813	0					
ANR	1055916	Callee	free		1055813	0					
ANR	1055917	Identifier	free		1055813	0					
ANR	1055918	ArgumentList	buf		1055813	1					
ANR	1055919	Argument	buf		1055813	0					
ANR	1055920	Identifier	buf		1055813	0					
ANR	1055921	ReturnStatement	return ret ;	584:1:17264:17274	1055813	2	True				
ANR	1055922	Identifier	ret		1055813	0					
ANR	1055923	ReturnType	static bool		1055813	1					
ANR	1055924	Identifier	ioMemcpy		1055813	2					
ANR	1055925	ParameterList	"RCore * core , ut64 dst , ut64 src , int len"		1055813	3					
ANR	1055926	Parameter	RCore * core	566:22:16808:16818	1055813	0	True				
ANR	1055927	ParameterType	RCore *		1055813	0					
ANR	1055928	Identifier	core		1055813	1					
ANR	1055929	Parameter	ut64 dst	566:35:16821:16828	1055813	1	True				
ANR	1055930	ParameterType	ut64		1055813	0					
ANR	1055931	Identifier	dst		1055813	1					
ANR	1055932	Parameter	ut64 src	566:45:16831:16838	1055813	2	True				
ANR	1055933	ParameterType	ut64		1055813	0					
ANR	1055934	Identifier	src		1055813	1					
ANR	1055935	Parameter	int len	566:55:16841:16847	1055813	3	True				
ANR	1055936	ParameterType	int		1055813	0					
ANR	1055937	Identifier	len		1055813	1					
ANR	1055938	CFGEntryNode	ENTRY		1055813		True				
ANR	1055939	CFGExitNode	EXIT		1055813		True				
ANR	1055940	Symbol	ret		1055813						
ANR	1055941	Symbol	dst		1055813						
ANR	1055942	Symbol	src		1055813						
ANR	1055943	Symbol	false		1055813						
ANR	1055944	Symbol	* core		1055813						
ANR	1055945	Symbol	r_io_read_at		1055813						
ANR	1055946	Symbol	calloc		1055813						
ANR	1055947	Symbol	core		1055813						
ANR	1055948	Symbol	buf		1055813						
ANR	1055949	Symbol	len		1055813						
ANR	1055950	Symbol	core -> io		1055813						
ANR	1055951	Symbol	true		1055813						
ANR	1055952	Symbol	r_io_write_at		1055813						
ANR	1055953	Function	cmd_wfs	587:0:17279:18056							
ANR	1055954	FunctionDef	"cmd_wfs (RCore * core , const char * input)"		1055953	0					
ANR	1055955	CompoundStatement		587:52:17331:18056	1055953	0					
ANR	1055956	IdentifierDeclStatement	char * args = r_str_trim_dup ( input + 1 ) ;	588:1:17334:17374	1055953	0	True				
ANR	1055957	IdentifierDecl	* args = r_str_trim_dup ( input + 1 )		1055953	0					
ANR	1055958	IdentifierDeclType	char *		1055953	0					
ANR	1055959	Identifier	args		1055953	1					
ANR	1055960	AssignmentExpression	* args = r_str_trim_dup ( input + 1 )		1055953	2		=			
ANR	1055961	Identifier	args		1055953	0					
ANR	1055962	CallExpression	r_str_trim_dup ( input + 1 )		1055953	1					
ANR	1055963	Callee	r_str_trim_dup		1055953	0					
ANR	1055964	Identifier	r_str_trim_dup		1055953	0					
ANR	1055965	ArgumentList	input + 1		1055953	1					
ANR	1055966	Argument	input + 1		1055953	0					
ANR	1055967	AdditiveExpression	input + 1		1055953	0		+			
ANR	1055968	Identifier	input		1055953	0					
ANR	1055969	PrimaryExpression	1		1055953	1					
ANR	1055970	IdentifierDeclStatement	"char * arg = strchr ( args , ' ' ) ;"	589:1:17377:17407	1055953	1	True				
ANR	1055971	IdentifierDecl	"* arg = strchr ( args , ' ' )"		1055953	0					
ANR	1055972	IdentifierDeclType	char *		1055953	0					
ANR	1055973	Identifier	arg		1055953	1					
ANR	1055974	AssignmentExpression	"* arg = strchr ( args , ' ' )"		1055953	2		=			
ANR	1055975	Identifier	arg		1055953	0					
ANR	1055976	CallExpression	"strchr ( args , ' ' )"		1055953	1					
ANR	1055977	Callee	strchr		1055953	0					
ANR	1055978	Identifier	strchr		1055953	0					
ANR	1055979	ArgumentList	args		1055953	1					
ANR	1055980	Argument	args		1055953	0					
ANR	1055981	Identifier	args		1055953	0					
ANR	1055982	Argument	' '		1055953	1					
ANR	1055983	PrimaryExpression	' '		1055953	0					
ANR	1055984	IdentifierDeclStatement	int len = core -> blocksize ;	590:1:17410:17435	1055953	2	True				
ANR	1055985	IdentifierDecl	len = core -> blocksize		1055953	0					
ANR	1055986	IdentifierDeclType	int		1055953	0					
ANR	1055987	Identifier	len		1055953	1					
ANR	1055988	AssignmentExpression	len = core -> blocksize		1055953	2		=			
ANR	1055989	Identifier	len		1055953	0					
ANR	1055990	PtrMemberAccess	core -> blocksize		1055953	1					
ANR	1055991	Identifier	core		1055953	0					
ANR	1055992	Identifier	blocksize		1055953	1					
ANR	1055993	IfStatement	if ( arg )		1055953	3					
ANR	1055994	Condition	arg	591:5:17442:17444	1055953	0	True				
ANR	1055995	Identifier	arg		1055953	0					
ANR	1055996	CompoundStatement		5:10:115:115	1055953	1					
ANR	1055997	ExpressionStatement	* arg = 0	592:2:17451:17459	1055953	0	True				
ANR	1055998	AssignmentExpression	* arg = 0		1055953	0		=			
ANR	1055999	UnaryOperationExpression	* arg		1055953	0					
ANR	1056000	UnaryOperator	*		1055953	0					
ANR	1056001	Identifier	arg		1055953	1					
ANR	1056002	PrimaryExpression	0		1055953	1					
ANR	1056003	ExpressionStatement	"len = r_num_math ( core -> num , arg + 1 )"	593:2:17463:17500	1055953	1	True				
ANR	1056004	AssignmentExpression	"len = r_num_math ( core -> num , arg + 1 )"		1055953	0		=			
ANR	1056005	Identifier	len		1055953	0					
ANR	1056006	CallExpression	"r_num_math ( core -> num , arg + 1 )"		1055953	1					
ANR	1056007	Callee	r_num_math		1055953	0					
ANR	1056008	Identifier	r_num_math		1055953	0					
ANR	1056009	ArgumentList	core -> num		1055953	1					
ANR	1056010	Argument	core -> num		1055953	0					
ANR	1056011	PtrMemberAccess	core -> num		1055953	0					
ANR	1056012	Identifier	core		1055953	0					
ANR	1056013	Identifier	num		1055953	1					
ANR	1056014	Argument	arg + 1		1055953	1					
ANR	1056015	AdditiveExpression	arg + 1		1055953	0		+			
ANR	1056016	Identifier	arg		1055953	0					
ANR	1056017	PrimaryExpression	1		1055953	1					
ANR	1056018	IdentifierDeclStatement	ut64 dst = core -> offset ;	595:1:17506:17529	1055953	4	True				
ANR	1056019	IdentifierDecl	dst = core -> offset		1055953	0					
ANR	1056020	IdentifierDeclType	ut64		1055953	0					
ANR	1056021	Identifier	dst		1055953	1					
ANR	1056022	AssignmentExpression	dst = core -> offset		1055953	2		=			
ANR	1056023	Identifier	dst		1055953	0					
ANR	1056024	PtrMemberAccess	core -> offset		1055953	1					
ANR	1056025	Identifier	core		1055953	0					
ANR	1056026	Identifier	offset		1055953	1					
ANR	1056027	IdentifierDeclStatement	"ut64 src = r_num_math ( core -> num , args ) ;"	596:1:17532:17571	1055953	5	True				
ANR	1056028	IdentifierDecl	"src = r_num_math ( core -> num , args )"		1055953	0					
ANR	1056029	IdentifierDeclType	ut64		1055953	0					
ANR	1056030	Identifier	src		1055953	1					
ANR	1056031	AssignmentExpression	"src = r_num_math ( core -> num , args )"		1055953	2		=			
ANR	1056032	Identifier	src		1055953	0					
ANR	1056033	CallExpression	"r_num_math ( core -> num , args )"		1055953	1					
ANR	1056034	Callee	r_num_math		1055953	0					
ANR	1056035	Identifier	r_num_math		1055953	0					
ANR	1056036	ArgumentList	core -> num		1055953	1					
ANR	1056037	Argument	core -> num		1055953	0					
ANR	1056038	PtrMemberAccess	core -> num		1055953	0					
ANR	1056039	Identifier	core		1055953	0					
ANR	1056040	Identifier	num		1055953	1					
ANR	1056041	Argument	args		1055953	1					
ANR	1056042	Identifier	args		1055953	0					
ANR	1056043	IfStatement	if ( len > 0 )		1055953	6					
ANR	1056044	Condition	len > 0	597:5:17578:17584	1055953	0	True				
ANR	1056045	RelationalExpression	len > 0		1055953	0		>			
ANR	1056046	Identifier	len		1055953	0					
ANR	1056047	PrimaryExpression	0		1055953	1					
ANR	1056048	CompoundStatement		13:2:296:322	1055953	1					
ANR	1056049	IdentifierDeclStatement	"ut8 * buf = calloc ( 1 , len ) ;"	599:2:17628:17654	1055953	0	True				
ANR	1056050	IdentifierDecl	"* buf = calloc ( 1 , len )"		1055953	0					
ANR	1056051	IdentifierDeclType	ut8 *		1055953	0					
ANR	1056052	Identifier	buf		1055953	1					
ANR	1056053	AssignmentExpression	"* buf = calloc ( 1 , len )"		1055953	2		=			
ANR	1056054	Identifier	buf		1055953	0					
ANR	1056055	CallExpression	"calloc ( 1 , len )"		1055953	1					
ANR	1056056	Callee	calloc		1055953	0					
ANR	1056057	Identifier	calloc		1055953	0					
ANR	1056058	ArgumentList	1		1055953	1					
ANR	1056059	Argument	1		1055953	0					
ANR	1056060	PrimaryExpression	1		1055953	0					
ANR	1056061	Argument	len		1055953	1					
ANR	1056062	Identifier	len		1055953	0					
ANR	1056063	IfStatement	if ( buf )		1055953	1					
ANR	1056064	Condition	buf	600:6:17662:17664	1055953	0	True				
ANR	1056065	Identifier	buf		1055953	0					
ANR	1056066	CompoundStatement		14:11:335:335	1055953	1					
ANR	1056067	IfStatement	"if ( r_io_read_at ( core -> io , dst , buf , len ) )"		1055953	0					
ANR	1056068	Condition	"r_io_read_at ( core -> io , dst , buf , len )"	601:7:17676:17713	1055953	0	True				
ANR	1056069	CallExpression	"r_io_read_at ( core -> io , dst , buf , len )"		1055953	0					
ANR	1056070	Callee	r_io_read_at		1055953	0					
ANR	1056071	Identifier	r_io_read_at		1055953	0					
ANR	1056072	ArgumentList	core -> io		1055953	1					
ANR	1056073	Argument	core -> io		1055953	0					
ANR	1056074	PtrMemberAccess	core -> io		1055953	0					
ANR	1056075	Identifier	core		1055953	0					
ANR	1056076	Identifier	io		1055953	1					
ANR	1056077	Argument	dst		1055953	1					
ANR	1056078	Identifier	dst		1055953	0					
ANR	1056079	Argument	buf		1055953	2					
ANR	1056080	Identifier	buf		1055953	0					
ANR	1056081	Argument	len		1055953	3					
ANR	1056082	Identifier	len		1055953	0					
ANR	1056083	CompoundStatement		15:47:384:384	1055953	1					
ANR	1056084	ExpressionStatement	"ioMemcpy ( core , core -> offset , src , len )"	602:4:17722:17761	1055953	0	True				
ANR	1056085	CallExpression	"ioMemcpy ( core , core -> offset , src , len )"		1055953	0					
ANR	1056086	Callee	ioMemcpy		1055953	0					
ANR	1056087	Identifier	ioMemcpy		1055953	0					
ANR	1056088	ArgumentList	core		1055953	1					
ANR	1056089	Argument	core		1055953	0					
ANR	1056090	Identifier	core		1055953	0					
ANR	1056091	Argument	core -> offset		1055953	1					
ANR	1056092	PtrMemberAccess	core -> offset		1055953	0					
ANR	1056093	Identifier	core		1055953	0					
ANR	1056094	Identifier	offset		1055953	1					
ANR	1056095	Argument	src		1055953	2					
ANR	1056096	Identifier	src		1055953	0					
ANR	1056097	Argument	len		1055953	3					
ANR	1056098	Identifier	len		1055953	0					
ANR	1056099	IfStatement	"if ( r_io_write_at ( core -> io , src , buf , len ) )"		1055953	1					
ANR	1056100	Condition	"r_io_write_at ( core -> io , src , buf , len )"	603:8:17771:17809	1055953	0	True				
ANR	1056101	CallExpression	"r_io_write_at ( core -> io , src , buf , len )"		1055953	0					
ANR	1056102	Callee	r_io_write_at		1055953	0					
ANR	1056103	Identifier	r_io_write_at		1055953	0					
ANR	1056104	ArgumentList	core -> io		1055953	1					
ANR	1056105	Argument	core -> io		1055953	0					
ANR	1056106	PtrMemberAccess	core -> io		1055953	0					
ANR	1056107	Identifier	core		1055953	0					
ANR	1056108	Identifier	io		1055953	1					
ANR	1056109	Argument	src		1055953	1					
ANR	1056110	Identifier	src		1055953	0					
ANR	1056111	Argument	buf		1055953	2					
ANR	1056112	Identifier	buf		1055953	0					
ANR	1056113	Argument	len		1055953	3					
ANR	1056114	Identifier	len		1055953	0					
ANR	1056115	CompoundStatement		17:49:480:480	1055953	1					
ANR	1056116	ExpressionStatement	r_core_block_read ( core )	604:5:17819:17843	1055953	0	True				
ANR	1056117	CallExpression	r_core_block_read ( core )		1055953	0					
ANR	1056118	Callee	r_core_block_read		1055953	0					
ANR	1056119	Identifier	r_core_block_read		1055953	0					
ANR	1056120	ArgumentList	core		1055953	1					
ANR	1056121	Argument	core		1055953	0					
ANR	1056122	Identifier	core		1055953	0					
ANR	1056123	ElseStatement	else		1055953	0					
ANR	1056124	CompoundStatement		19:11:524:524	1055953	0					
ANR	1056125	Statement	eprintf	606:5:17863:17869	1055953	0	True				
ANR	1056126	Statement	(	606:13:17871:17871	1055953	1	True				
ANR	1056127	Statement	"""Failed to write at 0x%08"""	606:14:17872:17897	1055953	2	True				
ANR	1056128	Statement	PFMT64x	606:40:17898:17904	1055953	3	True				
ANR	1056129	Statement	"""\\n"""	606:47:17905:17908	1055953	4	True				
ANR	1056130	Statement	","	606:51:17909:17909	1055953	5	True				
ANR	1056131	Statement	src	606:53:17911:17913	1055953	6	True				
ANR	1056132	Statement	)	606:56:17914:17914	1055953	7	True				
ANR	1056133	ExpressionStatement		606:57:17915:17915	1055953	8	True				
ANR	1056134	ElseStatement	else		1055953	0					
ANR	1056135	CompoundStatement		22:10:601:601	1055953	0					
ANR	1056136	Statement	eprintf	609:4:17939:17945	1055953	0	True				
ANR	1056137	Statement	(	609:12:17947:17947	1055953	1	True				
ANR	1056138	Statement	"""cmd_wfs: failed to read at 0x%08"""	609:13:17948:17981	1055953	2	True				
ANR	1056139	Statement	PFMT64x	609:47:17982:17988	1055953	3	True				
ANR	1056140	Statement	"""\\n"""	609:54:17989:17992	1055953	4	True				
ANR	1056141	Statement	","	609:58:17993:17993	1055953	5	True				
ANR	1056142	Statement	dst	609:60:17995:17997	1055953	6	True				
ANR	1056143	Statement	)	609:63:17998:17998	1055953	7	True				
ANR	1056144	ExpressionStatement		609:64:17999:17999	1055953	8	True				
ANR	1056145	ExpressionStatement	free ( buf )	611:3:18009:18019	1055953	1	True				
ANR	1056146	CallExpression	free ( buf )		1055953	0					
ANR	1056147	Callee	free		1055953	0					
ANR	1056148	Identifier	free		1055953	0					
ANR	1056149	ArgumentList	buf		1055953	1					
ANR	1056150	Argument	buf		1055953	0					
ANR	1056151	Identifier	buf		1055953	0					
ANR	1056152	ExpressionStatement	free ( args )	614:1:18029:18040	1055953	7	True				
ANR	1056153	CallExpression	free ( args )		1055953	0					
ANR	1056154	Callee	free		1055953	0					
ANR	1056155	Identifier	free		1055953	0					
ANR	1056156	ArgumentList	args		1055953	1					
ANR	1056157	Argument	args		1055953	0					
ANR	1056158	Identifier	args		1055953	0					
ANR	1056159	ReturnStatement	return true ;	615:1:18043:18054	1055953	8	True				
ANR	1056160	Identifier	true		1055953	0					
ANR	1056161	ReturnType	static bool		1055953	1					
ANR	1056162	Identifier	cmd_wfs		1055953	2					
ANR	1056163	ParameterList	"RCore * core , const char * input"		1055953	3					
ANR	1056164	Parameter	RCore * core	587:20:17299:17309	1055953	0	True				
ANR	1056165	ParameterType	RCore *		1055953	0					
ANR	1056166	Identifier	core		1055953	1					
ANR	1056167	Parameter	const char * input	587:33:17312:17328	1055953	1	True				
ANR	1056168	ParameterType	const char *		1055953	0					
ANR	1056169	Identifier	input		1055953	1					
ANR	1056170	CFGEntryNode	ENTRY		1055953		True				
ANR	1056171	CFGExitNode	EXIT		1055953		True				
ANR	1056172	Symbol	core -> blocksize		1055953						
ANR	1056173	Symbol	dst		1055953						
ANR	1056174	Symbol	src		1055953						
ANR	1056175	Symbol	* core		1055953						
ANR	1056176	Symbol	strchr		1055953						
ANR	1056177	Symbol	core -> offset		1055953						
ANR	1056178	Symbol	r_io_read_at		1055953						
ANR	1056179	Symbol	calloc		1055953						
ANR	1056180	Symbol	r_str_trim_dup		1055953						
ANR	1056181	Symbol	r_num_math		1055953						
ANR	1056182	Symbol	args		1055953						
ANR	1056183	Symbol	core		1055953						
ANR	1056184	Symbol	input		1055953						
ANR	1056185	Symbol	buf		1055953						
ANR	1056186	Symbol	len		1055953						
ANR	1056187	Symbol	core -> io		1055953						
ANR	1056188	Symbol	arg		1055953						
ANR	1056189	Symbol	true		1055953						
ANR	1056190	Symbol	core -> num		1055953						
ANR	1056191	Symbol	* arg		1055953						
ANR	1056192	Symbol	r_io_write_at		1055953						
ANR	1056193	Function	cmd_wf	618:0:18059:18746							
ANR	1056194	FunctionDef	"cmd_wf (RCore * core , const char * input)"		1056193	0					
ANR	1056195	CompoundStatement		618:51:18110:18746	1056193	0					
ANR	1056196	IfStatement	if ( ! core || ! * input )		1056193	0					
ANR	1056197	Condition	! core || ! * input	619:5:18117:18132	1056193	0	True				
ANR	1056198	OrExpression	! core || ! * input		1056193	0		||			
ANR	1056199	UnaryOperationExpression	! core		1056193	0					
ANR	1056200	UnaryOperator	!		1056193	0					
ANR	1056201	Identifier	core		1056193	1					
ANR	1056202	UnaryOperationExpression	! * input		1056193	1					
ANR	1056203	UnaryOperator	!		1056193	0					
ANR	1056204	UnaryOperationExpression	* input		1056193	1					
ANR	1056205	UnaryOperator	*		1056193	0					
ANR	1056206	Identifier	input		1056193	1					
ANR	1056207	CompoundStatement		2:23:24:24	1056193	1					
ANR	1056208	ReturnStatement	return false ;	620:2:18139:18151	1056193	0	True				
ANR	1056209	Identifier	false		1056193	0					
ANR	1056210	IfStatement	if ( input [ 1 ] == '?' )		1056193	1					
ANR	1056211	Condition	input [ 1 ] == '?'	622:5:18161:18175	1056193	0	True				
ANR	1056212	EqualityExpression	input [ 1 ] == '?'		1056193	0		==			
ANR	1056213	ArrayIndexing	input [ 1 ]		1056193	0					
ANR	1056214	Identifier	input		1056193	0					
ANR	1056215	PrimaryExpression	1		1056193	1					
ANR	1056216	PrimaryExpression	'?'		1056193	1					
ANR	1056217	CompoundStatement		5:22:67:67	1056193	1					
ANR	1056218	ExpressionStatement	"eprintf ( ""Usage: wf [file] ([size] ([offset]))\\n"" )"	623:2:18182:18232	1056193	0	True				
ANR	1056219	CallExpression	"eprintf ( ""Usage: wf [file] ([size] ([offset]))\\n"" )"		1056193	0					
ANR	1056220	Callee	eprintf		1056193	0					
ANR	1056221	Identifier	eprintf		1056193	0					
ANR	1056222	ArgumentList	"""Usage: wf [file] ([size] ([offset]))\\n"""		1056193	1					
ANR	1056223	Argument	"""Usage: wf [file] ([size] ([offset]))\\n"""		1056193	0					
ANR	1056224	PrimaryExpression	"""Usage: wf [file] ([size] ([offset]))\\n"""		1056193	0					
ANR	1056225	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wf )"	624:2:18236:18271	1056193	1	True				
ANR	1056226	CallExpression	"r_core_cmd_help ( core , help_msg_wf )"		1056193	0					
ANR	1056227	Callee	r_core_cmd_help		1056193	0					
ANR	1056228	Identifier	r_core_cmd_help		1056193	0					
ANR	1056229	ArgumentList	core		1056193	1					
ANR	1056230	Argument	core		1056193	0					
ANR	1056231	Identifier	core		1056193	0					
ANR	1056232	Argument	help_msg_wf		1056193	1					
ANR	1056233	Identifier	help_msg_wf		1056193	0					
ANR	1056234	ReturnStatement	return false ;	625:2:18275:18287	1056193	2	True				
ANR	1056235	Identifier	false		1056193	0					
ANR	1056236	IfStatement	if ( input [ 1 ] == 's' )		1056193	2					
ANR	1056237	Condition	input [ 1 ] == 's'	627:5:18297:18311	1056193	0	True				
ANR	1056238	EqualityExpression	input [ 1 ] == 's'		1056193	0		==			
ANR	1056239	ArrayIndexing	input [ 1 ]		1056193	0					
ANR	1056240	Identifier	input		1056193	0					
ANR	1056241	PrimaryExpression	1		1056193	1					
ANR	1056242	PrimaryExpression	's'		1056193	1					
ANR	1056243	CompoundStatement		10:22:203:203	1056193	1					
ANR	1056244	ReturnStatement	"return cmd_wfs ( core , input + 1 ) ;"	628:2:18327:18359	1056193	0	True				
ANR	1056245	CallExpression	"cmd_wfs ( core , input + 1 )"		1056193	0					
ANR	1056246	Callee	cmd_wfs		1056193	0					
ANR	1056247	Identifier	cmd_wfs		1056193	0					
ANR	1056248	ArgumentList	core		1056193	1					
ANR	1056249	Argument	core		1056193	0					
ANR	1056250	Identifier	core		1056193	0					
ANR	1056251	Argument	input + 1		1056193	1					
ANR	1056252	AdditiveExpression	input + 1		1056193	0		+			
ANR	1056253	Identifier	input		1056193	0					
ANR	1056254	PrimaryExpression	1		1056193	1					
ANR	1056255	IfStatement	if ( input [ 1 ] == 'f' )		1056193	3					
ANR	1056256	Condition	input [ 1 ] == 'f'	630:5:18369:18383	1056193	0	True				
ANR	1056257	EqualityExpression	input [ 1 ] == 'f'		1056193	0		==			
ANR	1056258	ArrayIndexing	input [ 1 ]		1056193	0					
ANR	1056259	Identifier	input		1056193	0					
ANR	1056260	PrimaryExpression	1		1056193	1					
ANR	1056261	PrimaryExpression	'f'		1056193	1					
ANR	1056262	CompoundStatement		13:22:275:275	1056193	1					
ANR	1056263	ReturnStatement	"return cmd_wff ( core , input + 1 ) ;"	631:2:18399:18431	1056193	0	True				
ANR	1056264	CallExpression	"cmd_wff ( core , input + 1 )"		1056193	0					
ANR	1056265	Callee	cmd_wff		1056193	0					
ANR	1056266	Identifier	cmd_wff		1056193	0					
ANR	1056267	ArgumentList	core		1056193	1					
ANR	1056268	Argument	core		1056193	0					
ANR	1056269	Identifier	core		1056193	0					
ANR	1056270	Argument	input + 1		1056193	1					
ANR	1056271	AdditiveExpression	input + 1		1056193	0		+			
ANR	1056272	Identifier	input		1056193	0					
ANR	1056273	PrimaryExpression	1		1056193	1					
ANR	1056274	IdentifierDeclStatement	char * args = r_str_trim_dup ( input + 1 ) ;	633:1:18437:18476	1056193	4	True				
ANR	1056275	IdentifierDecl	* args = r_str_trim_dup ( input + 1 )		1056193	0					
ANR	1056276	IdentifierDeclType	char *		1056193	0					
ANR	1056277	Identifier	args		1056193	1					
ANR	1056278	AssignmentExpression	* args = r_str_trim_dup ( input + 1 )		1056193	2		=			
ANR	1056279	Identifier	args		1056193	0					
ANR	1056280	CallExpression	r_str_trim_dup ( input + 1 )		1056193	1					
ANR	1056281	Callee	r_str_trim_dup		1056193	0					
ANR	1056282	Identifier	r_str_trim_dup		1056193	0					
ANR	1056283	ArgumentList	input + 1		1056193	1					
ANR	1056284	Argument	input + 1		1056193	0					
ANR	1056285	AdditiveExpression	input + 1		1056193	0		+			
ANR	1056286	Identifier	input		1056193	0					
ANR	1056287	PrimaryExpression	1		1056193	1					
ANR	1056288	IdentifierDeclStatement	"char * arg = strchr ( args , ' ' ) ;"	634:1:18479:18509	1056193	5	True				
ANR	1056289	IdentifierDecl	"* arg = strchr ( args , ' ' )"		1056193	0					
ANR	1056290	IdentifierDeclType	char *		1056193	0					
ANR	1056291	Identifier	arg		1056193	1					
ANR	1056292	AssignmentExpression	"* arg = strchr ( args , ' ' )"		1056193	2		=			
ANR	1056293	Identifier	arg		1056193	0					
ANR	1056294	CallExpression	"strchr ( args , ' ' )"		1056193	1					
ANR	1056295	Callee	strchr		1056193	0					
ANR	1056296	Identifier	strchr		1056193	0					
ANR	1056297	ArgumentList	args		1056193	1					
ANR	1056298	Argument	args		1056193	0					
ANR	1056299	Identifier	args		1056193	0					
ANR	1056300	Argument	' '		1056193	1					
ANR	1056301	PrimaryExpression	' '		1056193	0					
ANR	1056302	IdentifierDeclStatement	int len = core -> blocksize ;	635:1:18512:18537	1056193	6	True				
ANR	1056303	IdentifierDecl	len = core -> blocksize		1056193	0					
ANR	1056304	IdentifierDeclType	int		1056193	0					
ANR	1056305	Identifier	len		1056193	1					
ANR	1056306	AssignmentExpression	len = core -> blocksize		1056193	2		=			
ANR	1056307	Identifier	len		1056193	0					
ANR	1056308	PtrMemberAccess	core -> blocksize		1056193	1					
ANR	1056309	Identifier	core		1056193	0					
ANR	1056310	Identifier	blocksize		1056193	1					
ANR	1056311	IfStatement	if ( arg )		1056193	7					
ANR	1056312	Condition	arg	636:5:18544:18546	1056193	0	True				
ANR	1056313	Identifier	arg		1056193	0					
ANR	1056314	CompoundStatement		19:10:438:438	1056193	1					
ANR	1056315	ExpressionStatement	* arg ++ = 0	637:2:18553:18563	1056193	0	True				
ANR	1056316	AssignmentExpression	* arg ++ = 0		1056193	0		=			
ANR	1056317	UnaryOperationExpression	* arg ++		1056193	0					
ANR	1056318	UnaryOperator	*		1056193	0					
ANR	1056319	PostIncDecOperationExpression	arg ++		1056193	1					
ANR	1056320	Identifier	arg		1056193	0					
ANR	1056321	IncDec	++		1056193	1					
ANR	1056322	PrimaryExpression	0		1056193	1					
ANR	1056323	ExpressionStatement	"len = r_num_math ( core -> num , arg )"	638:2:18567:18600	1056193	1	True				
ANR	1056324	AssignmentExpression	"len = r_num_math ( core -> num , arg )"		1056193	0		=			
ANR	1056325	Identifier	len		1056193	0					
ANR	1056326	CallExpression	"r_num_math ( core -> num , arg )"		1056193	1					
ANR	1056327	Callee	r_num_math		1056193	0					
ANR	1056328	Identifier	r_num_math		1056193	0					
ANR	1056329	ArgumentList	core -> num		1056193	1					
ANR	1056330	Argument	core -> num		1056193	0					
ANR	1056331	PtrMemberAccess	core -> num		1056193	0					
ANR	1056332	Identifier	core		1056193	0					
ANR	1056333	Identifier	num		1056193	1					
ANR	1056334	Argument	arg		1056193	1					
ANR	1056335	Identifier	arg		1056193	0					
ANR	1056336	IdentifierDeclStatement	"ut64 addr = r_num_math ( core -> num , args ) ;"	640:1:18606:18646	1056193	8	True				
ANR	1056337	IdentifierDecl	"addr = r_num_math ( core -> num , args )"		1056193	0					
ANR	1056338	IdentifierDeclType	ut64		1056193	0					
ANR	1056339	Identifier	addr		1056193	1					
ANR	1056340	AssignmentExpression	"addr = r_num_math ( core -> num , args )"		1056193	2		=			
ANR	1056341	Identifier	addr		1056193	0					
ANR	1056342	CallExpression	"r_num_math ( core -> num , args )"		1056193	1					
ANR	1056343	Callee	r_num_math		1056193	0					
ANR	1056344	Identifier	r_num_math		1056193	0					
ANR	1056345	ArgumentList	core -> num		1056193	1					
ANR	1056346	Argument	core -> num		1056193	0					
ANR	1056347	PtrMemberAccess	core -> num		1056193	0					
ANR	1056348	Identifier	core		1056193	0					
ANR	1056349	Identifier	num		1056193	1					
ANR	1056350	Argument	args		1056193	1					
ANR	1056351	Identifier	args		1056193	0					
ANR	1056352	ExpressionStatement	"ioMemcpy ( core , core -> offset , addr , len )"	641:1:18649:18689	1056193	9	True				
ANR	1056353	CallExpression	"ioMemcpy ( core , core -> offset , addr , len )"		1056193	0					
ANR	1056354	Callee	ioMemcpy		1056193	0					
ANR	1056355	Identifier	ioMemcpy		1056193	0					
ANR	1056356	ArgumentList	core		1056193	1					
ANR	1056357	Argument	core		1056193	0					
ANR	1056358	Identifier	core		1056193	0					
ANR	1056359	Argument	core -> offset		1056193	1					
ANR	1056360	PtrMemberAccess	core -> offset		1056193	0					
ANR	1056361	Identifier	core		1056193	0					
ANR	1056362	Identifier	offset		1056193	1					
ANR	1056363	Argument	addr		1056193	2					
ANR	1056364	Identifier	addr		1056193	0					
ANR	1056365	Argument	len		1056193	3					
ANR	1056366	Identifier	len		1056193	0					
ANR	1056367	ExpressionStatement	free ( args )	642:1:18692:18703	1056193	10	True				
ANR	1056368	CallExpression	free ( args )		1056193	0					
ANR	1056369	Callee	free		1056193	0					
ANR	1056370	Identifier	free		1056193	0					
ANR	1056371	ArgumentList	args		1056193	1					
ANR	1056372	Argument	args		1056193	0					
ANR	1056373	Identifier	args		1056193	0					
ANR	1056374	ExpressionStatement	r_core_block_read ( core )	643:1:18706:18730	1056193	11	True				
ANR	1056375	CallExpression	r_core_block_read ( core )		1056193	0					
ANR	1056376	Callee	r_core_block_read		1056193	0					
ANR	1056377	Identifier	r_core_block_read		1056193	0					
ANR	1056378	ArgumentList	core		1056193	1					
ANR	1056379	Argument	core		1056193	0					
ANR	1056380	Identifier	core		1056193	0					
ANR	1056381	ReturnStatement	return true ;	644:1:18733:18744	1056193	12	True				
ANR	1056382	Identifier	true		1056193	0					
ANR	1056383	ReturnType	static bool		1056193	1					
ANR	1056384	Identifier	cmd_wf		1056193	2					
ANR	1056385	ParameterList	"RCore * core , const char * input"		1056193	3					
ANR	1056386	Parameter	RCore * core	618:19:18078:18088	1056193	0	True				
ANR	1056387	ParameterType	RCore *		1056193	0					
ANR	1056388	Identifier	core		1056193	1					
ANR	1056389	Parameter	const char * input	618:32:18091:18107	1056193	1	True				
ANR	1056390	ParameterType	const char *		1056193	0					
ANR	1056391	Identifier	input		1056193	1					
ANR	1056392	CFGEntryNode	ENTRY		1056193		True				
ANR	1056393	CFGExitNode	EXIT		1056193		True				
ANR	1056394	Symbol	core -> blocksize		1056193						
ANR	1056395	Symbol	cmd_wff		1056193						
ANR	1056396	Symbol	* input		1056193						
ANR	1056397	Symbol	false		1056193						
ANR	1056398	Symbol	cmd_wfs		1056193						
ANR	1056399	Symbol	* core		1056193						
ANR	1056400	Symbol	strchr		1056193						
ANR	1056401	Symbol	core -> offset		1056193						
ANR	1056402	Symbol	r_str_trim_dup		1056193						
ANR	1056403	Symbol	r_num_math		1056193						
ANR	1056404	Symbol	args		1056193						
ANR	1056405	Symbol	core		1056193						
ANR	1056406	Symbol	input		1056193						
ANR	1056407	Symbol	help_msg_wf		1056193						
ANR	1056408	Symbol	len		1056193						
ANR	1056409	Symbol	* arg ++		1056193						
ANR	1056410	Symbol	arg		1056193						
ANR	1056411	Symbol	true		1056193						
ANR	1056412	Symbol	core -> num		1056193						
ANR	1056413	Symbol	addr		1056193						
ANR	1056414	Function	cmd_write_pcache	647:0:18749:20476							
ANR	1056415	FunctionDef	"cmd_write_pcache (RCore * core , const char * input)"		1056414	0					
ANR	1056416	CompoundStatement		647:61:18810:20476	1056414	0					
ANR	1056417	IdentifierDeclStatement	RIODesc * desc ;	648:1:18813:18826	1056414	0	True				
ANR	1056418	IdentifierDecl	* desc		1056414	0					
ANR	1056419	IdentifierDeclType	RIODesc *		1056414	0					
ANR	1056420	Identifier	desc		1056414	1					
ANR	1056421	IdentifierDeclStatement	RIOCache * c ;	649:1:18829:18840	1056414	1	True				
ANR	1056422	IdentifierDecl	* c		1056414	0					
ANR	1056423	IdentifierDeclType	RIOCache *		1056414	0					
ANR	1056424	Identifier	c		1056414	1					
ANR	1056425	IdentifierDeclStatement	RList * caches ;	650:1:18843:18856	1056414	2	True				
ANR	1056426	IdentifierDecl	* caches		1056414	0					
ANR	1056427	IdentifierDeclType	RList *		1056414	0					
ANR	1056428	Identifier	caches		1056414	1					
ANR	1056429	IdentifierDeclStatement	RListIter * iter ;	651:1:18859:18874	1056414	3	True				
ANR	1056430	IdentifierDecl	* iter		1056414	0					
ANR	1056431	IdentifierDeclType	RListIter *		1056414	0					
ANR	1056432	Identifier	iter		1056414	1					
ANR	1056433	IdentifierDeclStatement	"int fd , i ;"	652:1:18877:18886	1056414	4	True				
ANR	1056434	IdentifierDecl	fd		1056414	0					
ANR	1056435	IdentifierDeclType	int		1056414	0					
ANR	1056436	Identifier	fd		1056414	1					
ANR	1056437	IdentifierDecl	i		1056414	1					
ANR	1056438	IdentifierDeclType	int		1056414	0					
ANR	1056439	Identifier	i		1056414	1					
ANR	1056440	IdentifierDeclStatement	bool rad = false ;	653:1:18889:18905	1056414	5	True				
ANR	1056441	IdentifierDecl	rad = false		1056414	0					
ANR	1056442	IdentifierDeclType	bool		1056414	0					
ANR	1056443	Identifier	rad		1056414	1					
ANR	1056444	AssignmentExpression	rad = false		1056414	2		=			
ANR	1056445	Identifier	false		1056414	0					
ANR	1056446	Identifier	false		1056414	1					
ANR	1056447	IfStatement	if ( core && core -> io && core -> io -> p_cache && core -> print && core -> print -> cb_printf )		1056414	6					
ANR	1056448	Condition	core && core -> io && core -> io -> p_cache && core -> print && core -> print -> cb_printf	654:5:18912:18989	1056414	0	True				
ANR	1056449	AndExpression	core && core -> io && core -> io -> p_cache && core -> print && core -> print -> cb_printf		1056414	0		&&			
ANR	1056450	Identifier	core		1056414	0					
ANR	1056451	AndExpression	core -> io && core -> io -> p_cache && core -> print && core -> print -> cb_printf		1056414	1		&&			
ANR	1056452	PtrMemberAccess	core -> io		1056414	0					
ANR	1056453	Identifier	core		1056414	0					
ANR	1056454	Identifier	io		1056414	1					
ANR	1056455	AndExpression	core -> io -> p_cache && core -> print && core -> print -> cb_printf		1056414	1		&&			
ANR	1056456	PtrMemberAccess	core -> io -> p_cache		1056414	0					
ANR	1056457	PtrMemberAccess	core -> io		1056414	0					
ANR	1056458	Identifier	core		1056414	0					
ANR	1056459	Identifier	io		1056414	1					
ANR	1056460	Identifier	p_cache		1056414	1					
ANR	1056461	AndExpression	core -> print && core -> print -> cb_printf		1056414	1		&&			
ANR	1056462	PtrMemberAccess	core -> print		1056414	0					
ANR	1056463	Identifier	core		1056414	0					
ANR	1056464	Identifier	print		1056414	1					
ANR	1056465	PtrMemberAccess	core -> print -> cb_printf		1056414	1					
ANR	1056466	PtrMemberAccess	core -> print		1056414	0					
ANR	1056467	Identifier	core		1056414	0					
ANR	1056468	Identifier	print		1056414	1					
ANR	1056469	Identifier	cb_printf		1056414	1					
ANR	1056470	CompoundStatement		8:85:181:181	1056414	1					
ANR	1056471	SwitchStatement	switch ( input [ 0 ] )		1056414	0					
ANR	1056472	Condition	input [ 0 ]	655:10:19004:19011	1056414	0	True				
ANR	1056473	ArrayIndexing	input [ 0 ]		1056414	0					
ANR	1056474	Identifier	input		1056414	0					
ANR	1056475	PrimaryExpression	0		1056414	1					
ANR	1056476	CompoundStatement		9:20:203:203	1056414	1					
ANR	1056477	Label	case 'i' :	656:2:19018:19027	1056414	0	True				
ANR	1056478	IfStatement	if ( input [ 1 ] )		1056414	1					
ANR	1056479	Condition	input [ 1 ]	657:7:19036:19043	1056414	0	True				
ANR	1056480	ArrayIndexing	input [ 1 ]		1056414	0					
ANR	1056481	Identifier	input		1056414	0					
ANR	1056482	PrimaryExpression	1		1056414	1					
ANR	1056483	CompoundStatement		11:17:235:235	1056414	1					
ANR	1056484	ExpressionStatement	"fd = ( int ) r_num_math ( core -> num , input + 1 )"	658:4:19052:19095	1056414	0	True				
ANR	1056485	AssignmentExpression	"fd = ( int ) r_num_math ( core -> num , input + 1 )"		1056414	0		=			
ANR	1056486	Identifier	fd		1056414	0					
ANR	1056487	CastExpression	"( int ) r_num_math ( core -> num , input + 1 )"		1056414	1					
ANR	1056488	CastTarget	int		1056414	0					
ANR	1056489	CallExpression	"r_num_math ( core -> num , input + 1 )"		1056414	1					
ANR	1056490	Callee	r_num_math		1056414	0					
ANR	1056491	Identifier	r_num_math		1056414	0					
ANR	1056492	ArgumentList	core -> num		1056414	1					
ANR	1056493	Argument	core -> num		1056414	0					
ANR	1056494	PtrMemberAccess	core -> num		1056414	0					
ANR	1056495	Identifier	core		1056414	0					
ANR	1056496	Identifier	num		1056414	1					
ANR	1056497	Argument	input + 1		1056414	1					
ANR	1056498	AdditiveExpression	input + 1		1056414	0		+			
ANR	1056499	Identifier	input		1056414	0					
ANR	1056500	PrimaryExpression	1		1056414	1					
ANR	1056501	ExpressionStatement	"desc = r_io_desc_get ( core -> io , fd )"	659:4:19101:19136	1056414	1	True				
ANR	1056502	AssignmentExpression	"desc = r_io_desc_get ( core -> io , fd )"		1056414	0		=			
ANR	1056503	Identifier	desc		1056414	0					
ANR	1056504	CallExpression	"r_io_desc_get ( core -> io , fd )"		1056414	1					
ANR	1056505	Callee	r_io_desc_get		1056414	0					
ANR	1056506	Identifier	r_io_desc_get		1056414	0					
ANR	1056507	ArgumentList	core -> io		1056414	1					
ANR	1056508	Argument	core -> io		1056414	0					
ANR	1056509	PtrMemberAccess	core -> io		1056414	0					
ANR	1056510	Identifier	core		1056414	0					
ANR	1056511	Identifier	io		1056414	1					
ANR	1056512	Argument	fd		1056414	1					
ANR	1056513	Identifier	fd		1056414	0					
ANR	1056514	ElseStatement	else		1056414	0					
ANR	1056515	CompoundStatement		14:10:337:337	1056414	0					
ANR	1056516	ExpressionStatement	desc = core -> io -> desc	661:4:19154:19175	1056414	0	True				
ANR	1056517	AssignmentExpression	desc = core -> io -> desc		1056414	0		=			
ANR	1056518	Identifier	desc		1056414	0					
ANR	1056519	PtrMemberAccess	core -> io -> desc		1056414	1					
ANR	1056520	PtrMemberAccess	core -> io		1056414	0					
ANR	1056521	Identifier	core		1056414	0					
ANR	1056522	Identifier	io		1056414	1					
ANR	1056523	Identifier	desc		1056414	1					
ANR	1056524	ExpressionStatement	r_io_desc_cache_commit ( desc )	663:3:19185:19214	1056414	2	True				
ANR	1056525	CallExpression	r_io_desc_cache_commit ( desc )		1056414	0					
ANR	1056526	Callee	r_io_desc_cache_commit		1056414	0					
ANR	1056527	Identifier	r_io_desc_cache_commit		1056414	0					
ANR	1056528	ArgumentList	desc		1056414	1					
ANR	1056529	Argument	desc		1056414	0					
ANR	1056530	Identifier	desc		1056414	0					
ANR	1056531	BreakStatement	break ;	664:3:19219:19224	1056414	3	True				
ANR	1056532	Label	case '*' :	665:2:19228:19236	1056414	4	True				
ANR	1056533	ExpressionStatement	rad = true	666:3:19241:19251	1056414	5	True				
ANR	1056534	AssignmentExpression	rad = true		1056414	0		=			
ANR	1056535	Identifier	rad		1056414	0					
ANR	1056536	Identifier	true		1056414	1					
ANR	1056537	Label	case ' ' :	667:2:19255:19263	1056414	6	True				
ANR	1056538	Label	case '\\0' :	668:2:19284:19293	1056414	7	True				
ANR	1056539	IfStatement	if ( input [ 0 ] && input [ 1 ] )		1056414	8					
ANR	1056540	Condition	input [ 0 ] && input [ 1 ]	669:7:19302:19321	1056414	0	True				
ANR	1056541	AndExpression	input [ 0 ] && input [ 1 ]		1056414	0		&&			
ANR	1056542	ArrayIndexing	input [ 0 ]		1056414	0					
ANR	1056543	Identifier	input		1056414	0					
ANR	1056544	PrimaryExpression	0		1056414	1					
ANR	1056545	ArrayIndexing	input [ 1 ]		1056414	1					
ANR	1056546	Identifier	input		1056414	0					
ANR	1056547	PrimaryExpression	1		1056414	1					
ANR	1056548	CompoundStatement		23:29:513:513	1056414	1					
ANR	1056549	ExpressionStatement	"fd = ( int ) r_num_math ( core -> num , input + 1 )"	670:4:19330:19373	1056414	0	True				
ANR	1056550	AssignmentExpression	"fd = ( int ) r_num_math ( core -> num , input + 1 )"		1056414	0		=			
ANR	1056551	Identifier	fd		1056414	0					
ANR	1056552	CastExpression	"( int ) r_num_math ( core -> num , input + 1 )"		1056414	1					
ANR	1056553	CastTarget	int		1056414	0					
ANR	1056554	CallExpression	"r_num_math ( core -> num , input + 1 )"		1056414	1					
ANR	1056555	Callee	r_num_math		1056414	0					
ANR	1056556	Identifier	r_num_math		1056414	0					
ANR	1056557	ArgumentList	core -> num		1056414	1					
ANR	1056558	Argument	core -> num		1056414	0					
ANR	1056559	PtrMemberAccess	core -> num		1056414	0					
ANR	1056560	Identifier	core		1056414	0					
ANR	1056561	Identifier	num		1056414	1					
ANR	1056562	Argument	input + 1		1056414	1					
ANR	1056563	AdditiveExpression	input + 1		1056414	0		+			
ANR	1056564	Identifier	input		1056414	0					
ANR	1056565	PrimaryExpression	1		1056414	1					
ANR	1056566	ExpressionStatement	"desc = r_io_desc_get ( core -> io , fd )"	671:4:19379:19414	1056414	1	True				
ANR	1056567	AssignmentExpression	"desc = r_io_desc_get ( core -> io , fd )"		1056414	0		=			
ANR	1056568	Identifier	desc		1056414	0					
ANR	1056569	CallExpression	"r_io_desc_get ( core -> io , fd )"		1056414	1					
ANR	1056570	Callee	r_io_desc_get		1056414	0					
ANR	1056571	Identifier	r_io_desc_get		1056414	0					
ANR	1056572	ArgumentList	core -> io		1056414	1					
ANR	1056573	Argument	core -> io		1056414	0					
ANR	1056574	PtrMemberAccess	core -> io		1056414	0					
ANR	1056575	Identifier	core		1056414	0					
ANR	1056576	Identifier	io		1056414	1					
ANR	1056577	Argument	fd		1056414	1					
ANR	1056578	Identifier	fd		1056414	0					
ANR	1056579	ElseStatement	else		1056414	0					
ANR	1056580	CompoundStatement		26:10:615:615	1056414	0					
ANR	1056581	ExpressionStatement	desc = core -> io -> desc	673:4:19432:19453	1056414	0	True				
ANR	1056582	AssignmentExpression	desc = core -> io -> desc		1056414	0		=			
ANR	1056583	Identifier	desc		1056414	0					
ANR	1056584	PtrMemberAccess	core -> io -> desc		1056414	1					
ANR	1056585	PtrMemberAccess	core -> io		1056414	0					
ANR	1056586	Identifier	core		1056414	0					
ANR	1056587	Identifier	io		1056414	1					
ANR	1056588	Identifier	desc		1056414	1					
ANR	1056589	IfStatement	if ( ( caches = r_io_desc_cache_list ( desc ) ) )		1056414	9					
ANR	1056590	Condition	caches = r_io_desc_cache_list ( desc )	675:7:19467:19504	1056414	0	True				
ANR	1056591	AssignmentExpression	caches = r_io_desc_cache_list ( desc )		1056414	0		=			
ANR	1056592	Identifier	caches		1056414	0					
ANR	1056593	CallExpression	r_io_desc_cache_list ( desc )		1056414	1					
ANR	1056594	Callee	r_io_desc_cache_list		1056414	0					
ANR	1056595	Identifier	r_io_desc_cache_list		1056414	0					
ANR	1056596	ArgumentList	desc		1056414	1					
ANR	1056597	Argument	desc		1056414	0					
ANR	1056598	Identifier	desc		1056414	0					
ANR	1056599	CompoundStatement		29:47:696:696	1056414	1					
ANR	1056600	IfStatement	if ( rad )		1056414	0					
ANR	1056601	Condition	rad	676:8:19517:19519	1056414	0	True				
ANR	1056602	Identifier	rad		1056414	0					
ANR	1056603	CompoundStatement		30:13:711:711	1056414	1					
ANR	1056604	ExpressionStatement	"core -> print -> cb_printf ( ""e io.va = false\\n"" )"	677:5:19529:19573	1056414	0	True				
ANR	1056605	CallExpression	"core -> print -> cb_printf ( ""e io.va = false\\n"" )"		1056414	0					
ANR	1056606	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056607	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056608	PtrMemberAccess	core -> print		1056414	0					
ANR	1056609	Identifier	core		1056414	0					
ANR	1056610	Identifier	print		1056414	1					
ANR	1056611	Identifier	cb_printf		1056414	1					
ANR	1056612	ArgumentList	"""e io.va = false\\n"""		1056414	1					
ANR	1056613	Argument	"""e io.va = false\\n"""		1056414	0					
ANR	1056614	PrimaryExpression	"""e io.va = false\\n"""		1056414	0					
ANR	1056615	Statement	r_list_foreach	678:5:19580:19593	1056414	1	True				
ANR	1056616	Statement	(	678:20:19595:19595	1056414	2	True				
ANR	1056617	Statement	caches	678:21:19596:19601	1056414	3	True				
ANR	1056618	Statement	","	678:27:19602:19602	1056414	4	True				
ANR	1056619	Statement	iter	678:29:19604:19607	1056414	5	True				
ANR	1056620	Statement	","	678:33:19608:19608	1056414	6	True				
ANR	1056621	Statement	c	678:35:19610:19610	1056414	7	True				
ANR	1056622	Statement	)	678:36:19611:19611	1056414	8	True				
ANR	1056623	CompoundStatement		34:6:864:905	1056414	9					
ANR	1056624	ExpressionStatement	"core -> print -> cb_printf ( ""wx %02x"" , c -> data [ 0 ] )"	679:6:19621:19667	1056414	0	True				
ANR	1056625	CallExpression	"core -> print -> cb_printf ( ""wx %02x"" , c -> data [ 0 ] )"		1056414	0					
ANR	1056626	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056627	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056628	PtrMemberAccess	core -> print		1056414	0					
ANR	1056629	Identifier	core		1056414	0					
ANR	1056630	Identifier	print		1056414	1					
ANR	1056631	Identifier	cb_printf		1056414	1					
ANR	1056632	ArgumentList	"""wx %02x"""		1056414	1					
ANR	1056633	Argument	"""wx %02x"""		1056414	0					
ANR	1056634	PrimaryExpression	"""wx %02x"""		1056414	0					
ANR	1056635	Argument	c -> data [ 0 ]		1056414	1					
ANR	1056636	ArrayIndexing	c -> data [ 0 ]		1056414	0					
ANR	1056637	PtrMemberAccess	c -> data		1056414	0					
ANR	1056638	Identifier	c		1056414	0					
ANR	1056639	Identifier	data		1056414	1					
ANR	1056640	PrimaryExpression	0		1056414	1					
ANR	1056641	IdentifierDeclStatement	const int cacheSize = r_itv_size ( c -> itv ) ;	680:6:19675:19716	1056414	1	True				
ANR	1056642	IdentifierDecl	cacheSize = r_itv_size ( c -> itv )		1056414	0					
ANR	1056643	IdentifierDeclType	const int		1056414	0					
ANR	1056644	Identifier	cacheSize		1056414	1					
ANR	1056645	AssignmentExpression	cacheSize = r_itv_size ( c -> itv )		1056414	2		=			
ANR	1056646	Identifier	cacheSize		1056414	0					
ANR	1056647	CallExpression	r_itv_size ( c -> itv )		1056414	1					
ANR	1056648	Callee	r_itv_size		1056414	0					
ANR	1056649	Identifier	r_itv_size		1056414	0					
ANR	1056650	ArgumentList	c -> itv		1056414	1					
ANR	1056651	Argument	c -> itv		1056414	0					
ANR	1056652	PtrMemberAccess	c -> itv		1056414	0					
ANR	1056653	Identifier	c		1056414	0					
ANR	1056654	Identifier	itv		1056414	1					
ANR	1056655	ForStatement	for ( i = 1 ; i < cacheSize ; i ++ )		1056414	2					
ANR	1056656	ForInit	i = 1 ;	681:11:19729:19734	1056414	0	True				
ANR	1056657	AssignmentExpression	i = 1		1056414	0		=			
ANR	1056658	Identifier	i		1056414	0					
ANR	1056659	PrimaryExpression	1		1056414	1					
ANR	1056660	Condition	i < cacheSize	681:18:19736:19748	1056414	1	True				
ANR	1056661	RelationalExpression	i < cacheSize		1056414	0		<			
ANR	1056662	Identifier	i		1056414	0					
ANR	1056663	Identifier	cacheSize		1056414	1					
ANR	1056664	PostIncDecOperationExpression	i ++	681:33:19751:19753	1056414	2	True				
ANR	1056665	Identifier	i		1056414	0					
ANR	1056666	IncDec	++		1056414	1					
ANR	1056667	CompoundStatement		35:38:945:945	1056414	3					
ANR	1056668	ExpressionStatement	"core -> print -> cb_printf ( ""%02x"" , c -> data [ i ] )"	682:7:19765:19808	1056414	0	True				
ANR	1056669	CallExpression	"core -> print -> cb_printf ( ""%02x"" , c -> data [ i ] )"		1056414	0					
ANR	1056670	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056671	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056672	PtrMemberAccess	core -> print		1056414	0					
ANR	1056673	Identifier	core		1056414	0					
ANR	1056674	Identifier	print		1056414	1					
ANR	1056675	Identifier	cb_printf		1056414	1					
ANR	1056676	ArgumentList	"""%02x"""		1056414	1					
ANR	1056677	Argument	"""%02x"""		1056414	0					
ANR	1056678	PrimaryExpression	"""%02x"""		1056414	0					
ANR	1056679	Argument	c -> data [ i ]		1056414	1					
ANR	1056680	ArrayIndexing	c -> data [ i ]		1056414	0					
ANR	1056681	PtrMemberAccess	c -> data		1056414	0					
ANR	1056682	Identifier	c		1056414	0					
ANR	1056683	Identifier	data		1056414	1					
ANR	1056684	Identifier	i		1056414	1					
ANR	1056685	Statement	core	684:6:19824:19827	1056414	3	True				
ANR	1056686	Statement	->	684:10:19828:19829	1056414	4	True				
ANR	1056687	Statement	print	684:12:19830:19834	1056414	5	True				
ANR	1056688	Statement	->	684:17:19835:19836	1056414	6	True				
ANR	1056689	Statement	cb_printf	684:19:19837:19845	1056414	7	True				
ANR	1056690	Statement	(	684:29:19847:19847	1056414	8	True				
ANR	1056691	Statement	""" @ 0x%08"""	684:30:19848:19857	1056414	9	True				
ANR	1056692	Statement	PFMT64x	684:40:19858:19864	1056414	10	True				
ANR	1056693	Statement	""" \\n"""	684:47:19865:19869	1056414	11	True				
ANR	1056694	Statement	","	684:52:19870:19870	1056414	12	True				
ANR	1056695	Statement	r_itv_begin	684:54:19872:19882	1056414	13	True				
ANR	1056696	Statement	(	684:66:19884:19884	1056414	14	True				
ANR	1056697	Statement	c	684:67:19885:19885	1056414	15	True				
ANR	1056698	Statement	->	684:68:19886:19887	1056414	16	True				
ANR	1056699	Statement	itv	684:70:19888:19890	1056414	17	True				
ANR	1056700	Statement	)	684:73:19891:19891	1056414	18	True				
ANR	1056701	Statement	)	684:74:19892:19892	1056414	19	True				
ANR	1056702	ExpressionStatement		684:75:19893:19893	1056414	20	True				
ANR	1056703	ElseStatement	else		1056414	0					
ANR	1056704	CompoundStatement		40:11:1102:1102	1056414	0					
ANR	1056705	Statement	r_list_foreach	687:5:19920:19933	1056414	0	True				
ANR	1056706	Statement	(	687:20:19935:19935	1056414	1	True				
ANR	1056707	Statement	caches	687:21:19936:19941	1056414	2	True				
ANR	1056708	Statement	","	687:27:19942:19942	1056414	3	True				
ANR	1056709	Statement	iter	687:29:19944:19947	1056414	4	True				
ANR	1056710	Statement	","	687:33:19948:19948	1056414	5	True				
ANR	1056711	Statement	c	687:35:19950:19950	1056414	6	True				
ANR	1056712	Statement	)	687:36:19951:19951	1056414	7	True				
ANR	1056713	CompoundStatement		44:6:1247:1288	1056414	8					
ANR	1056714	Statement	core	688:6:19961:19964	1056414	0	True				
ANR	1056715	Statement	->	688:10:19965:19966	1056414	1	True				
ANR	1056716	Statement	print	688:12:19967:19971	1056414	2	True				
ANR	1056717	Statement	->	688:17:19972:19973	1056414	3	True				
ANR	1056718	Statement	cb_printf	688:19:19974:19982	1056414	4	True				
ANR	1056719	Statement	(	688:29:19984:19984	1056414	5	True				
ANR	1056720	Statement	"""0x%08"""	688:30:19985:19991	1056414	6	True				
ANR	1056721	Statement	PFMT64x	688:37:19992:19998	1056414	7	True				
ANR	1056722	Statement	""": %02x"""	688:44:19999:20006	1056414	8	True				
ANR	1056723	Statement	","	688:52:20007:20007	1056414	9	True				
ANR	1056724	Statement	r_itv_begin	689:7:20016:20026	1056414	10	True				
ANR	1056725	Statement	(	689:19:20028:20028	1056414	11	True				
ANR	1056726	Statement	c	689:20:20029:20029	1056414	12	True				
ANR	1056727	Statement	->	689:21:20030:20031	1056414	13	True				
ANR	1056728	Statement	itv	689:23:20032:20034	1056414	14	True				
ANR	1056729	Statement	)	689:26:20035:20035	1056414	15	True				
ANR	1056730	Statement	","	689:27:20036:20036	1056414	16	True				
ANR	1056731	Statement	c	689:29:20038:20038	1056414	17	True				
ANR	1056732	Statement	->	689:30:20039:20040	1056414	18	True				
ANR	1056733	Statement	odata	689:32:20041:20045	1056414	19	True				
ANR	1056734	Statement	[	689:37:20046:20046	1056414	20	True				
ANR	1056735	Statement	0	689:38:20047:20047	1056414	21	True				
ANR	1056736	Statement	]	689:39:20048:20048	1056414	22	True				
ANR	1056737	Statement	)	689:40:20049:20049	1056414	23	True				
ANR	1056738	ExpressionStatement		689:41:20050:20050	1056414	24	True				
ANR	1056739	IdentifierDeclStatement	const int cacheSize = r_itv_size ( c -> itv ) ;	690:6:20058:20099	1056414	25	True				
ANR	1056740	IdentifierDecl	cacheSize = r_itv_size ( c -> itv )		1056414	0					
ANR	1056741	IdentifierDeclType	const int		1056414	0					
ANR	1056742	Identifier	cacheSize		1056414	1					
ANR	1056743	AssignmentExpression	cacheSize = r_itv_size ( c -> itv )		1056414	2		=			
ANR	1056744	Identifier	cacheSize		1056414	0					
ANR	1056745	CallExpression	r_itv_size ( c -> itv )		1056414	1					
ANR	1056746	Callee	r_itv_size		1056414	0					
ANR	1056747	Identifier	r_itv_size		1056414	0					
ANR	1056748	ArgumentList	c -> itv		1056414	1					
ANR	1056749	Argument	c -> itv		1056414	0					
ANR	1056750	PtrMemberAccess	c -> itv		1056414	0					
ANR	1056751	Identifier	c		1056414	0					
ANR	1056752	Identifier	itv		1056414	1					
ANR	1056753	ForStatement	for ( i = 1 ; i < cacheSize ; i ++ )		1056414	26					
ANR	1056754	ForInit	i = 1 ;	691:11:20112:20117	1056414	0	True				
ANR	1056755	AssignmentExpression	i = 1		1056414	0		=			
ANR	1056756	Identifier	i		1056414	0					
ANR	1056757	PrimaryExpression	1		1056414	1					
ANR	1056758	Condition	i < cacheSize	691:18:20119:20131	1056414	1	True				
ANR	1056759	RelationalExpression	i < cacheSize		1056414	0		<			
ANR	1056760	Identifier	i		1056414	0					
ANR	1056761	Identifier	cacheSize		1056414	1					
ANR	1056762	PostIncDecOperationExpression	i ++	691:33:20134:20136	1056414	2	True				
ANR	1056763	Identifier	i		1056414	0					
ANR	1056764	IncDec	++		1056414	1					
ANR	1056765	CompoundStatement		45:38:1328:1328	1056414	3					
ANR	1056766	ExpressionStatement	"core -> print -> cb_printf ( ""%02x"" , c -> odata [ i ] )"	692:7:20148:20192	1056414	0	True				
ANR	1056767	CallExpression	"core -> print -> cb_printf ( ""%02x"" , c -> odata [ i ] )"		1056414	0					
ANR	1056768	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056769	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056770	PtrMemberAccess	core -> print		1056414	0					
ANR	1056771	Identifier	core		1056414	0					
ANR	1056772	Identifier	print		1056414	1					
ANR	1056773	Identifier	cb_printf		1056414	1					
ANR	1056774	ArgumentList	"""%02x"""		1056414	1					
ANR	1056775	Argument	"""%02x"""		1056414	0					
ANR	1056776	PrimaryExpression	"""%02x"""		1056414	0					
ANR	1056777	Argument	c -> odata [ i ]		1056414	1					
ANR	1056778	ArrayIndexing	c -> odata [ i ]		1056414	0					
ANR	1056779	PtrMemberAccess	c -> odata		1056414	0					
ANR	1056780	Identifier	c		1056414	0					
ANR	1056781	Identifier	odata		1056414	1					
ANR	1056782	Identifier	i		1056414	1					
ANR	1056783	ExpressionStatement	"core -> print -> cb_printf ( "" -> %02x"" , c -> data [ 0 ] )"	694:6:20208:20255	1056414	27	True				
ANR	1056784	CallExpression	"core -> print -> cb_printf ( "" -> %02x"" , c -> data [ 0 ] )"		1056414	0					
ANR	1056785	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056786	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056787	PtrMemberAccess	core -> print		1056414	0					
ANR	1056788	Identifier	core		1056414	0					
ANR	1056789	Identifier	print		1056414	1					
ANR	1056790	Identifier	cb_printf		1056414	1					
ANR	1056791	ArgumentList	""" -> %02x"""		1056414	1					
ANR	1056792	Argument	""" -> %02x"""		1056414	0					
ANR	1056793	PrimaryExpression	""" -> %02x"""		1056414	0					
ANR	1056794	Argument	c -> data [ 0 ]		1056414	1					
ANR	1056795	ArrayIndexing	c -> data [ 0 ]		1056414	0					
ANR	1056796	PtrMemberAccess	c -> data		1056414	0					
ANR	1056797	Identifier	c		1056414	0					
ANR	1056798	Identifier	data		1056414	1					
ANR	1056799	PrimaryExpression	0		1056414	1					
ANR	1056800	ForStatement	for ( i = 1 ; i < cacheSize ; i ++ )		1056414	28					
ANR	1056801	ForInit	i = 1 ;	695:11:20268:20273	1056414	0	True				
ANR	1056802	AssignmentExpression	i = 1		1056414	0		=			
ANR	1056803	Identifier	i		1056414	0					
ANR	1056804	PrimaryExpression	1		1056414	1					
ANR	1056805	Condition	i < cacheSize	695:18:20275:20287	1056414	1	True				
ANR	1056806	RelationalExpression	i < cacheSize		1056414	0		<			
ANR	1056807	Identifier	i		1056414	0					
ANR	1056808	Identifier	cacheSize		1056414	1					
ANR	1056809	PostIncDecOperationExpression	i ++	695:33:20290:20292	1056414	2	True				
ANR	1056810	Identifier	i		1056414	0					
ANR	1056811	IncDec	++		1056414	1					
ANR	1056812	CompoundStatement		49:38:1484:1484	1056414	3					
ANR	1056813	ExpressionStatement	"core -> print -> cb_printf ( ""%02x"" , c -> data [ i ] )"	696:7:20304:20347	1056414	0	True				
ANR	1056814	CallExpression	"core -> print -> cb_printf ( ""%02x"" , c -> data [ i ] )"		1056414	0					
ANR	1056815	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056816	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056817	PtrMemberAccess	core -> print		1056414	0					
ANR	1056818	Identifier	core		1056414	0					
ANR	1056819	Identifier	print		1056414	1					
ANR	1056820	Identifier	cb_printf		1056414	1					
ANR	1056821	ArgumentList	"""%02x"""		1056414	1					
ANR	1056822	Argument	"""%02x"""		1056414	0					
ANR	1056823	PrimaryExpression	"""%02x"""		1056414	0					
ANR	1056824	Argument	c -> data [ i ]		1056414	1					
ANR	1056825	ArrayIndexing	c -> data [ i ]		1056414	0					
ANR	1056826	PtrMemberAccess	c -> data		1056414	0					
ANR	1056827	Identifier	c		1056414	0					
ANR	1056828	Identifier	data		1056414	1					
ANR	1056829	Identifier	i		1056414	1					
ANR	1056830	ExpressionStatement	"core -> print -> cb_printf ( ""\\n"" )"	698:6:20363:20392	1056414	29	True				
ANR	1056831	CallExpression	"core -> print -> cb_printf ( ""\\n"" )"		1056414	0					
ANR	1056832	Callee	core -> print -> cb_printf		1056414	0					
ANR	1056833	PtrMemberAccess	core -> print -> cb_printf		1056414	0					
ANR	1056834	PtrMemberAccess	core -> print		1056414	0					
ANR	1056835	Identifier	core		1056414	0					
ANR	1056836	Identifier	print		1056414	1					
ANR	1056837	Identifier	cb_printf		1056414	1					
ANR	1056838	ArgumentList	"""\\n"""		1056414	1					
ANR	1056839	Argument	"""\\n"""		1056414	0					
ANR	1056840	PrimaryExpression	"""\\n"""		1056414	0					
ANR	1056841	ExpressionStatement	r_list_free ( caches )	701:4:20411:20431	1056414	1	True				
ANR	1056842	CallExpression	r_list_free ( caches )		1056414	0					
ANR	1056843	Callee	r_list_free		1056414	0					
ANR	1056844	Identifier	r_list_free		1056414	0					
ANR	1056845	ArgumentList	caches		1056414	1					
ANR	1056846	Argument	caches		1056414	0					
ANR	1056847	Identifier	caches		1056414	0					
ANR	1056848	BreakStatement	break ;	703:3:20441:20446	1056414	10	True				
ANR	1056849	Label	default :	704:2:20450:20457	1056414	11	True				
ANR	1056850	Identifier	default		1056414	0					
ANR	1056851	BreakStatement	break ;	705:3:20462:20467	1056414	12	True				
ANR	1056852	ReturnType	static void		1056414	1					
ANR	1056853	Identifier	cmd_write_pcache		1056414	2					
ANR	1056854	ParameterList	"RCore * core , const char * input"		1056414	3					
ANR	1056855	Parameter	RCore * core	647:29:18778:18788	1056414	0	True				
ANR	1056856	ParameterType	RCore *		1056414	0					
ANR	1056857	Identifier	core		1056414	1					
ANR	1056858	Parameter	const char * input	647:42:18791:18807	1056414	1	True				
ANR	1056859	ParameterType	const char *		1056414	0					
ANR	1056860	Identifier	input		1056414	1					
ANR	1056861	CFGEntryNode	ENTRY		1056414		True				
ANR	1056862	CFGExitNode	EXIT		1056414		True				
ANR	1056863	Symbol	core -> io -> p_cache		1056414						
ANR	1056864	Symbol	* c -> data		1056414						
ANR	1056865	Symbol	caches		1056414						
ANR	1056866	Symbol	c -> itv		1056414						
ANR	1056867	Symbol	* core		1056414						
ANR	1056868	Symbol	* input		1056414						
ANR	1056869	Symbol	r_num_math		1056414						
ANR	1056870	Symbol	* c -> odata		1056414						
ANR	1056871	Symbol	rad		1056414						
ANR	1056872	Symbol	core -> io		1056414						
ANR	1056873	Symbol	r_itv_size		1056414						
ANR	1056874	Symbol	core -> num		1056414						
ANR	1056875	Symbol	* * core		1056414						
ANR	1056876	Symbol	c		1056414						
ANR	1056877	Symbol	core -> print -> cb_printf		1056414						
ANR	1056878	Symbol	r_io_desc_get		1056414						
ANR	1056879	Symbol	cacheSize		1056414						
ANR	1056880	Symbol	false		1056414						
ANR	1056881	Symbol	* * c		1056414						
ANR	1056882	Symbol	iter		1056414						
ANR	1056883	Symbol	i		1056414						
ANR	1056884	Symbol	core -> io -> desc		1056414						
ANR	1056885	Symbol	* c		1056414						
ANR	1056886	Symbol	c -> data		1056414						
ANR	1056887	Symbol	core		1056414						
ANR	1056888	Symbol	input		1056414						
ANR	1056889	Symbol	* core -> io		1056414						
ANR	1056890	Symbol	* core -> print		1056414						
ANR	1056891	Symbol	* i		1056414						
ANR	1056892	Symbol	c -> odata		1056414						
ANR	1056893	Symbol	true		1056414						
ANR	1056894	Symbol	r_io_desc_cache_list		1056414						
ANR	1056895	Symbol	core -> print		1056414						
ANR	1056896	Symbol	fd		1056414						
ANR	1056897	Symbol	desc		1056414						
ANR	1056898	Function	cmd_write	711:0:20514:44196							
ANR	1056899	FunctionDef	"cmd_write (void * data , const char * input)"		1056898	0					
ANR	1056900	CompoundStatement		711:52:20566:44196	1056898	0					
ANR	1056901	IdentifierDeclStatement	"int wseek , i , size , len ;"	712:1:20569:20592	1056898	0	True				
ANR	1056902	IdentifierDecl	wseek		1056898	0					
ANR	1056903	IdentifierDeclType	int		1056898	0					
ANR	1056904	Identifier	wseek		1056898	1					
ANR	1056905	IdentifierDecl	i		1056898	1					
ANR	1056906	IdentifierDeclType	int		1056898	0					
ANR	1056907	Identifier	i		1056898	1					
ANR	1056908	IdentifierDecl	size		1056898	2					
ANR	1056909	IdentifierDeclType	int		1056898	0					
ANR	1056910	Identifier	size		1056898	1					
ANR	1056911	IdentifierDecl	len		1056898	3					
ANR	1056912	IdentifierDeclType	int		1056898	0					
ANR	1056913	Identifier	len		1056898	1					
ANR	1056914	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	713:1:20595:20622	1056898	1	True				
ANR	1056915	IdentifierDecl	* core = ( RCore * ) data		1056898	0					
ANR	1056916	IdentifierDeclType	RCore *		1056898	0					
ANR	1056917	Identifier	core		1056898	1					
ANR	1056918	AssignmentExpression	* core = ( RCore * ) data		1056898	2		=			
ANR	1056919	Identifier	core		1056898	0					
ANR	1056920	CastExpression	( RCore * ) data		1056898	1					
ANR	1056921	CastTarget	RCore *		1056898	0					
ANR	1056922	Identifier	data		1056898	1					
ANR	1056923	IdentifierDeclStatement	"char * tmp , * str , * ostr ;"	714:1:20625:20647	1056898	2	True				
ANR	1056924	IdentifierDecl	* tmp		1056898	0					
ANR	1056925	IdentifierDeclType	char *		1056898	0					
ANR	1056926	Identifier	tmp		1056898	1					
ANR	1056927	IdentifierDecl	* str		1056898	1					
ANR	1056928	IdentifierDeclType	char *		1056898	0					
ANR	1056929	Identifier	str		1056898	1					
ANR	1056930	IdentifierDecl	* ostr		1056898	2					
ANR	1056931	IdentifierDeclType	char *		1056898	0					
ANR	1056932	Identifier	ostr		1056898	1					
ANR	1056933	IdentifierDeclStatement	"const char * arg , * filename = """" ;"	715:1:20650:20681	1056898	3	True				
ANR	1056934	IdentifierDecl	* arg		1056898	0					
ANR	1056935	IdentifierDeclType	const char *		1056898	0					
ANR	1056936	Identifier	arg		1056898	1					
ANR	1056937	IdentifierDecl	"* filename = """""		1056898	1					
ANR	1056938	IdentifierDeclType	const char *		1056898	0					
ANR	1056939	Identifier	filename		1056898	1					
ANR	1056940	AssignmentExpression	"* filename = """""		1056898	2		=			
ANR	1056941	Identifier	filename		1056898	0					
ANR	1056942	PrimaryExpression	""""""		1056898	1					
ANR	1056943	IdentifierDeclStatement	char _fn [ 32 ] ;	716:1:20684:20696	1056898	4	True				
ANR	1056944	IdentifierDecl	_fn [ 32 ]		1056898	0					
ANR	1056945	IdentifierDeclType	char [ 32 ]		1056898	0					
ANR	1056946	Identifier	_fn		1056898	1					
ANR	1056947	PrimaryExpression	32		1056898	2					
ANR	1056948	IdentifierDeclStatement	ut64 off ;	717:1:20699:20707	1056898	5	True				
ANR	1056949	IdentifierDecl	off		1056898	0					
ANR	1056950	IdentifierDeclType	ut64		1056898	0					
ANR	1056951	Identifier	off		1056898	1					
ANR	1056952	IdentifierDeclStatement	ut8 * buf ;	718:1:20710:20718	1056898	6	True				
ANR	1056953	IdentifierDecl	* buf		1056898	0					
ANR	1056954	IdentifierDeclType	ut8 *		1056898	0					
ANR	1056955	Identifier	buf		1056898	1					
ANR	1056956	IdentifierDeclStatement	st64 num = 0 ;	719:1:20721:20733	1056898	7	True				
ANR	1056957	IdentifierDecl	num = 0		1056898	0					
ANR	1056958	IdentifierDeclType	st64		1056898	0					
ANR	1056959	Identifier	num		1056898	1					
ANR	1056960	AssignmentExpression	num = 0		1056898	2		=			
ANR	1056961	Identifier	num		1056898	0					
ANR	1056962	PrimaryExpression	0		1056898	1					
ANR	1056963	IfStatement	if ( ! input )		1056898	8					
ANR	1056964	Condition	! input	721:5:20741:20746	1056898	0	True				
ANR	1056965	UnaryOperationExpression	! input		1056898	0					
ANR	1056966	UnaryOperator	!		1056898	0					
ANR	1056967	Identifier	input		1056898	1					
ANR	1056968	CompoundStatement		11:13:182:182	1056898	1					
ANR	1056969	ReturnStatement	return 0 ;	722:2:20753:20761	1056898	0	True				
ANR	1056970	PrimaryExpression	0		1056898	0					
ANR	1056971	ExpressionStatement	len = strlen ( input )	725:1:20768:20788	1056898	9	True				
ANR	1056972	AssignmentExpression	len = strlen ( input )		1056898	0		=			
ANR	1056973	Identifier	len		1056898	0					
ANR	1056974	CallExpression	strlen ( input )		1056898	1					
ANR	1056975	Callee	strlen		1056898	0					
ANR	1056976	Identifier	strlen		1056898	0					
ANR	1056977	ArgumentList	input		1056898	1					
ANR	1056978	Argument	input		1056898	0					
ANR	1056979	Identifier	input		1056898	0					
ANR	1056980	ExpressionStatement	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"	726:1:20791:20841	1056898	10	True				
ANR	1056981	AssignmentExpression	"wseek = r_config_get_i ( core -> config , ""cfg.wseek"" )"		1056898	0		=			
ANR	1056982	Identifier	wseek		1056898	0					
ANR	1056983	CallExpression	"r_config_get_i ( core -> config , ""cfg.wseek"" )"		1056898	1					
ANR	1056984	Callee	r_config_get_i		1056898	0					
ANR	1056985	Identifier	r_config_get_i		1056898	0					
ANR	1056986	ArgumentList	core -> config		1056898	1					
ANR	1056987	Argument	core -> config		1056898	0					
ANR	1056988	PtrMemberAccess	core -> config		1056898	0					
ANR	1056989	Identifier	core		1056898	0					
ANR	1056990	Identifier	config		1056898	1					
ANR	1056991	Argument	"""cfg.wseek"""		1056898	1					
ANR	1056992	PrimaryExpression	"""cfg.wseek"""		1056898	0					
ANR	1056993	ExpressionStatement	"str = ostr = strdup ( * input ? input + 1 : """" )"	727:1:20844:20887	1056898	11	True				
ANR	1056994	AssignmentExpression	"str = ostr = strdup ( * input ? input + 1 : """" )"		1056898	0		=			
ANR	1056995	Identifier	str		1056898	0					
ANR	1056996	AssignmentExpression	"ostr = strdup ( * input ? input + 1 : """" )"		1056898	1		=			
ANR	1056997	Identifier	ostr		1056898	0					
ANR	1056998	CallExpression	"strdup ( * input ? input + 1 : """" )"		1056898	1					
ANR	1056999	Callee	strdup		1056898	0					
ANR	1057000	Identifier	strdup		1056898	0					
ANR	1057001	ArgumentList	"* input ? input + 1 : """""		1056898	1					
ANR	1057002	Argument	"* input ? input + 1 : """""		1056898	0					
ANR	1057003	ConditionalExpression	"* input ? input + 1 : """""		1056898	0					
ANR	1057004	Condition	* input		1056898	0					
ANR	1057005	UnaryOperationExpression	* input		1056898	0					
ANR	1057006	UnaryOperator	*		1056898	0					
ANR	1057007	Identifier	input		1056898	1					
ANR	1057008	AdditiveExpression	input + 1		1056898	1		+			
ANR	1057009	Identifier	input		1056898	0					
ANR	1057010	PrimaryExpression	1		1056898	1					
ANR	1057011	PrimaryExpression	""""""		1056898	2					
ANR	1057012	ExpressionStatement	_fn [ 0 ] = 0	728:1:20890:20900	1056898	12	True				
ANR	1057013	AssignmentExpression	_fn [ 0 ] = 0		1056898	0		=			
ANR	1057014	ArrayIndexing	_fn [ 0 ]		1056898	0					
ANR	1057015	Identifier	_fn		1056898	0					
ANR	1057016	PrimaryExpression	0		1056898	1					
ANR	1057017	PrimaryExpression	0		1056898	1					
ANR	1057018	SwitchStatement	switch ( * input )		1056898	13					
ANR	1057019	Condition	* input	730:9:20912:20917	1056898	0	True				
ANR	1057020	UnaryOperationExpression	* input		1056898	0					
ANR	1057021	UnaryOperator	*		1056898	0					
ANR	1057022	Identifier	input		1056898	1					
ANR	1057023	CompoundStatement		20:17:353:353	1056898	1					
ANR	1057024	Label	case 'B' :	731:1:20923:20931	1056898	0	True				
ANR	1057025	SwitchStatement	switch ( input [ 1 ] )		1056898	1					
ANR	1057026	Condition	input [ 1 ]	732:10:20951:20958	1056898	0	True				
ANR	1057027	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057028	Identifier	input		1056898	0					
ANR	1057029	PrimaryExpression	1		1056898	1					
ANR	1057030	CompoundStatement		22:20:394:394	1056898	1					
ANR	1057031	Label	case ' ' :	733:2:20965:20973	1056898	0	True				
ANR	1057032	ExpressionStatement	"cmd_write_bits ( core , 1 , r_num_math ( core -> num , input + 2 ) )"	734:3:20978:21037	1056898	1	True				
ANR	1057033	CallExpression	"cmd_write_bits ( core , 1 , r_num_math ( core -> num , input + 2 ) )"		1056898	0					
ANR	1057034	Callee	cmd_write_bits		1056898	0					
ANR	1057035	Identifier	cmd_write_bits		1056898	0					
ANR	1057036	ArgumentList	core		1056898	1					
ANR	1057037	Argument	core		1056898	0					
ANR	1057038	Identifier	core		1056898	0					
ANR	1057039	Argument	1		1056898	1					
ANR	1057040	PrimaryExpression	1		1056898	0					
ANR	1057041	Argument	"r_num_math ( core -> num , input + 2 )"		1056898	2					
ANR	1057042	CallExpression	"r_num_math ( core -> num , input + 2 )"		1056898	0					
ANR	1057043	Callee	r_num_math		1056898	0					
ANR	1057044	Identifier	r_num_math		1056898	0					
ANR	1057045	ArgumentList	core -> num		1056898	1					
ANR	1057046	Argument	core -> num		1056898	0					
ANR	1057047	PtrMemberAccess	core -> num		1056898	0					
ANR	1057048	Identifier	core		1056898	0					
ANR	1057049	Identifier	num		1056898	1					
ANR	1057050	Argument	input + 2		1056898	1					
ANR	1057051	AdditiveExpression	input + 2		1056898	0		+			
ANR	1057052	Identifier	input		1056898	0					
ANR	1057053	PrimaryExpression	2		1056898	1					
ANR	1057054	BreakStatement	break ;	735:3:21042:21047	1056898	2	True				
ANR	1057055	Label	case '-' :	736:2:21051:21059	1056898	3	True				
ANR	1057056	ExpressionStatement	"cmd_write_bits ( core , 0 , r_num_math ( core -> num , input + 2 ) )"	737:3:21064:21123	1056898	4	True				
ANR	1057057	CallExpression	"cmd_write_bits ( core , 0 , r_num_math ( core -> num , input + 2 ) )"		1056898	0					
ANR	1057058	Callee	cmd_write_bits		1056898	0					
ANR	1057059	Identifier	cmd_write_bits		1056898	0					
ANR	1057060	ArgumentList	core		1056898	1					
ANR	1057061	Argument	core		1056898	0					
ANR	1057062	Identifier	core		1056898	0					
ANR	1057063	Argument	0		1056898	1					
ANR	1057064	PrimaryExpression	0		1056898	0					
ANR	1057065	Argument	"r_num_math ( core -> num , input + 2 )"		1056898	2					
ANR	1057066	CallExpression	"r_num_math ( core -> num , input + 2 )"		1056898	0					
ANR	1057067	Callee	r_num_math		1056898	0					
ANR	1057068	Identifier	r_num_math		1056898	0					
ANR	1057069	ArgumentList	core -> num		1056898	1					
ANR	1057070	Argument	core -> num		1056898	0					
ANR	1057071	PtrMemberAccess	core -> num		1056898	0					
ANR	1057072	Identifier	core		1056898	0					
ANR	1057073	Identifier	num		1056898	1					
ANR	1057074	Argument	input + 2		1056898	1					
ANR	1057075	AdditiveExpression	input + 2		1056898	0		+			
ANR	1057076	Identifier	input		1056898	0					
ANR	1057077	PrimaryExpression	2		1056898	1					
ANR	1057078	BreakStatement	break ;	738:3:21128:21133	1056898	5	True				
ANR	1057079	Label	default :	739:2:21137:21144	1056898	6	True				
ANR	1057080	Identifier	default		1056898	0					
ANR	1057081	ExpressionStatement	"eprintf ( ""Usage: wB 0x2000  # or wB-0x2000\\n"" )"	740:3:21149:21195	1056898	7	True				
ANR	1057082	CallExpression	"eprintf ( ""Usage: wB 0x2000  # or wB-0x2000\\n"" )"		1056898	0					
ANR	1057083	Callee	eprintf		1056898	0					
ANR	1057084	Identifier	eprintf		1056898	0					
ANR	1057085	ArgumentList	"""Usage: wB 0x2000  # or wB-0x2000\\n"""		1056898	1					
ANR	1057086	Argument	"""Usage: wB 0x2000  # or wB-0x2000\\n"""		1056898	0					
ANR	1057087	PrimaryExpression	"""Usage: wB 0x2000  # or wB-0x2000\\n"""		1056898	0					
ANR	1057088	BreakStatement	break ;	741:3:21200:21205	1056898	8	True				
ANR	1057089	BreakStatement	break ;	743:2:21213:21218	1056898	2	True				
ANR	1057090	Label	case '0' :	744:1:21221:21229	1056898	3	True				
ANR	1057091	CompoundStatement		36:3:679:721	1056898	4					
ANR	1057092	IdentifierDeclStatement	"ut64 len = r_num_math ( core -> num , input + 1 ) ;"	746:3:21246:21288	1056898	0	True				
ANR	1057093	IdentifierDecl	"len = r_num_math ( core -> num , input + 1 )"		1056898	0					
ANR	1057094	IdentifierDeclType	ut64		1056898	0					
ANR	1057095	Identifier	len		1056898	1					
ANR	1057096	AssignmentExpression	"len = r_num_math ( core -> num , input + 1 )"		1056898	2		=			
ANR	1057097	Identifier	len		1056898	0					
ANR	1057098	CallExpression	"r_num_math ( core -> num , input + 1 )"		1056898	1					
ANR	1057099	Callee	r_num_math		1056898	0					
ANR	1057100	Identifier	r_num_math		1056898	0					
ANR	1057101	ArgumentList	core -> num		1056898	1					
ANR	1057102	Argument	core -> num		1056898	0					
ANR	1057103	PtrMemberAccess	core -> num		1056898	0					
ANR	1057104	Identifier	core		1056898	0					
ANR	1057105	Identifier	num		1056898	1					
ANR	1057106	Argument	input + 1		1056898	1					
ANR	1057107	AdditiveExpression	input + 1		1056898	0		+			
ANR	1057108	Identifier	input		1056898	0					
ANR	1057109	PrimaryExpression	1		1056898	1					
ANR	1057110	IfStatement	if ( len > 0 )		1056898	1					
ANR	1057111	Condition	len > 0	747:7:21297:21301	1056898	0	True				
ANR	1057112	RelationalExpression	len > 0		1056898	0		>			
ANR	1057113	Identifier	len		1056898	0					
ANR	1057114	PrimaryExpression	0		1056898	1					
ANR	1057115	CompoundStatement		38:4:743:769	1056898	1					
ANR	1057116	IdentifierDeclStatement	"ut8 * buf = calloc ( 1 , len ) ;"	748:4:21310:21336	1056898	0	True				
ANR	1057117	IdentifierDecl	"* buf = calloc ( 1 , len )"		1056898	0					
ANR	1057118	IdentifierDeclType	ut8 *		1056898	0					
ANR	1057119	Identifier	buf		1056898	1					
ANR	1057120	AssignmentExpression	"* buf = calloc ( 1 , len )"		1056898	2		=			
ANR	1057121	Identifier	buf		1056898	0					
ANR	1057122	CallExpression	"calloc ( 1 , len )"		1056898	1					
ANR	1057123	Callee	calloc		1056898	0					
ANR	1057124	Identifier	calloc		1056898	0					
ANR	1057125	ArgumentList	1		1056898	1					
ANR	1057126	Argument	1		1056898	0					
ANR	1057127	PrimaryExpression	1		1056898	0					
ANR	1057128	Argument	len		1056898	1					
ANR	1057129	Identifier	len		1056898	0					
ANR	1057130	IfStatement	if ( buf )		1056898	1					
ANR	1057131	Condition	buf	749:8:21346:21348	1056898	0	True				
ANR	1057132	Identifier	buf		1056898	0					
ANR	1057133	CompoundStatement		39:13:784:784	1056898	1					
ANR	1057134	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , buf , len )"	750:5:21358:21406	1056898	0	True				
ANR	1057135	CallExpression	"r_io_write_at ( core -> io , core -> offset , buf , len )"		1056898	0					
ANR	1057136	Callee	r_io_write_at		1056898	0					
ANR	1057137	Identifier	r_io_write_at		1056898	0					
ANR	1057138	ArgumentList	core -> io		1056898	1					
ANR	1057139	Argument	core -> io		1056898	0					
ANR	1057140	PtrMemberAccess	core -> io		1056898	0					
ANR	1057141	Identifier	core		1056898	0					
ANR	1057142	Identifier	io		1056898	1					
ANR	1057143	Argument	core -> offset		1056898	1					
ANR	1057144	PtrMemberAccess	core -> offset		1056898	0					
ANR	1057145	Identifier	core		1056898	0					
ANR	1057146	Identifier	offset		1056898	1					
ANR	1057147	Argument	buf		1056898	2					
ANR	1057148	Identifier	buf		1056898	0					
ANR	1057149	Argument	len		1056898	3					
ANR	1057150	Identifier	len		1056898	0					
ANR	1057151	ExpressionStatement	r_core_block_read ( core )	751:5:21413:21437	1056898	1	True				
ANR	1057152	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1057153	Callee	r_core_block_read		1056898	0					
ANR	1057154	Identifier	r_core_block_read		1056898	0					
ANR	1057155	ArgumentList	core		1056898	1					
ANR	1057156	Argument	core		1056898	0					
ANR	1057157	Identifier	core		1056898	0					
ANR	1057158	ExpressionStatement	free ( buf )	752:5:21444:21454	1056898	2	True				
ANR	1057159	CallExpression	free ( buf )		1056898	0					
ANR	1057160	Callee	free		1056898	0					
ANR	1057161	Identifier	free		1056898	0					
ANR	1057162	ArgumentList	buf		1056898	1					
ANR	1057163	Argument	buf		1056898	0					
ANR	1057164	Identifier	buf		1056898	0					
ANR	1057165	ElseStatement	else		1056898	0					
ANR	1057166	ExpressionStatement	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , ( int ) len )"	753:11:21467:21517	1056898	0	True				
ANR	1057167	CallExpression	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , ( int ) len )"		1056898	0					
ANR	1057168	Callee	eprintf		1056898	0					
ANR	1057169	Identifier	eprintf		1056898	0					
ANR	1057170	ArgumentList	"""Cannot allocate %d byte(s)\\n"""		1056898	1					
ANR	1057171	Argument	"""Cannot allocate %d byte(s)\\n"""		1056898	0					
ANR	1057172	PrimaryExpression	"""Cannot allocate %d byte(s)\\n"""		1056898	0					
ANR	1057173	Argument	( int ) len		1056898	1					
ANR	1057174	CastExpression	( int ) len		1056898	0					
ANR	1057175	CastTarget	int		1056898	0					
ANR	1057176	Identifier	len		1056898	1					
ANR	1057177	BreakStatement	break ;	756:2:21530:21535	1056898	5	True				
ANR	1057178	Label	case '1' :	757:1:21538:21546	1056898	6	True				
ANR	1057179	Label	case '2' :	758:1:21557:21565	1056898	7	True				
ANR	1057180	Label	case '4' :	759:1:21576:21584	1056898	8	True				
ANR	1057181	Label	case '8' :	760:1:21595:21603	1056898	9	True				
ANR	1057182	IfStatement	if ( input [ 1 ] && input [ 2 ] )		1056898	10					
ANR	1057183	Condition	input [ 1 ] && input [ 2 ]	761:6:21619:21638	1056898	0	True				
ANR	1057184	AndExpression	input [ 1 ] && input [ 2 ]		1056898	0		&&			
ANR	1057185	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057186	Identifier	input		1056898	0					
ANR	1057187	PrimaryExpression	1		1056898	1					
ANR	1057188	ArrayIndexing	input [ 2 ]		1056898	1					
ANR	1057189	Identifier	input		1056898	0					
ANR	1057190	PrimaryExpression	2		1056898	1					
ANR	1057191	CompoundStatement		51:28:1074:1074	1056898	1					
ANR	1057192	IfStatement	if ( input [ 1 ] == input [ 2 ] )		1056898	0					
ANR	1057193	Condition	input [ 1 ] == input [ 2 ]	762:7:21650:21667	1056898	0	True				
ANR	1057194	EqualityExpression	input [ 1 ] == input [ 2 ]		1056898	0		==			
ANR	1057195	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057196	Identifier	input		1056898	0					
ANR	1057197	PrimaryExpression	1		1056898	1					
ANR	1057198	ArrayIndexing	input [ 2 ]		1056898	1					
ANR	1057199	Identifier	input		1056898	0					
ANR	1057200	PrimaryExpression	2		1056898	1					
ANR	1057201	CompoundStatement		52:27:1103:1103	1056898	1					
ANR	1057202	ExpressionStatement	num = 1	763:4:21676:21683	1056898	0	True				
ANR	1057203	AssignmentExpression	num = 1		1056898	0		=			
ANR	1057204	Identifier	num		1056898	0					
ANR	1057205	PrimaryExpression	1		1056898	1					
ANR	1057206	ElseStatement	else		1056898	0					
ANR	1057207	ExpressionStatement	"num = r_num_math ( core -> num , input + 2 )"	764:10:21695:21732	1056898	0	True				
ANR	1057208	AssignmentExpression	"num = r_num_math ( core -> num , input + 2 )"		1056898	0		=			
ANR	1057209	Identifier	num		1056898	0					
ANR	1057210	CallExpression	"r_num_math ( core -> num , input + 2 )"		1056898	1					
ANR	1057211	Callee	r_num_math		1056898	0					
ANR	1057212	Identifier	r_num_math		1056898	0					
ANR	1057213	ArgumentList	core -> num		1056898	1					
ANR	1057214	Argument	core -> num		1056898	0					
ANR	1057215	PtrMemberAccess	core -> num		1056898	0					
ANR	1057216	Identifier	core		1056898	0					
ANR	1057217	Identifier	num		1056898	1					
ANR	1057218	Argument	input + 2		1056898	1					
ANR	1057219	AdditiveExpression	input + 2		1056898	0		+			
ANR	1057220	Identifier	input		1056898	0					
ANR	1057221	PrimaryExpression	2		1056898	1					
ANR	1057222	SwitchStatement	switch ( input [ 2 ] ? input [ 1 ] : 0 )		1056898	11					
ANR	1057223	Condition	input [ 2 ] ? input [ 1 ] : 0	766:10:21748:21770	1056898	0	True				
ANR	1057224	ConditionalExpression	input [ 2 ] ? input [ 1 ] : 0		1056898	0					
ANR	1057225	Condition	input [ 2 ]		1056898	0					
ANR	1057226	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057227	Identifier	input		1056898	0					
ANR	1057228	PrimaryExpression	2		1056898	1					
ANR	1057229	ArrayIndexing	input [ 1 ]		1056898	1					
ANR	1057230	Identifier	input		1056898	0					
ANR	1057231	PrimaryExpression	1		1056898	1					
ANR	1057232	PrimaryExpression	0		1056898	2					
ANR	1057233	CompoundStatement		56:35:1206:1206	1056898	1					
ANR	1057234	Label	case '+' :	767:2:21777:21785	1056898	0	True				
ANR	1057235	ExpressionStatement	"cmd_write_inc ( core , * input - '0' , num )"	768:3:21790:21827	1056898	1	True				
ANR	1057236	CallExpression	"cmd_write_inc ( core , * input - '0' , num )"		1056898	0					
ANR	1057237	Callee	cmd_write_inc		1056898	0					
ANR	1057238	Identifier	cmd_write_inc		1056898	0					
ANR	1057239	ArgumentList	core		1056898	1					
ANR	1057240	Argument	core		1056898	0					
ANR	1057241	Identifier	core		1056898	0					
ANR	1057242	Argument	* input - '0'		1056898	1					
ANR	1057243	AdditiveExpression	* input - '0'		1056898	0		-			
ANR	1057244	UnaryOperationExpression	* input		1056898	0					
ANR	1057245	UnaryOperator	*		1056898	0					
ANR	1057246	Identifier	input		1056898	1					
ANR	1057247	PrimaryExpression	'0'		1056898	1					
ANR	1057248	Argument	num		1056898	2					
ANR	1057249	Identifier	num		1056898	0					
ANR	1057250	BreakStatement	break ;	769:3:21832:21837	1056898	2	True				
ANR	1057251	Label	case '-' :	770:2:21841:21849	1056898	3	True				
ANR	1057252	ExpressionStatement	"cmd_write_inc ( core , * input - '0' , - num )"	771:3:21854:21892	1056898	4	True				
ANR	1057253	CallExpression	"cmd_write_inc ( core , * input - '0' , - num )"		1056898	0					
ANR	1057254	Callee	cmd_write_inc		1056898	0					
ANR	1057255	Identifier	cmd_write_inc		1056898	0					
ANR	1057256	ArgumentList	core		1056898	1					
ANR	1057257	Argument	core		1056898	0					
ANR	1057258	Identifier	core		1056898	0					
ANR	1057259	Argument	* input - '0'		1056898	1					
ANR	1057260	AdditiveExpression	* input - '0'		1056898	0		-			
ANR	1057261	UnaryOperationExpression	* input		1056898	0					
ANR	1057262	UnaryOperator	*		1056898	0					
ANR	1057263	Identifier	input		1056898	1					
ANR	1057264	PrimaryExpression	'0'		1056898	1					
ANR	1057265	Argument	- num		1056898	2					
ANR	1057266	UnaryOperationExpression	- num		1056898	0					
ANR	1057267	UnaryOperator	-		1056898	0					
ANR	1057268	Identifier	num		1056898	1					
ANR	1057269	BreakStatement	break ;	772:3:21897:21902	1056898	5	True				
ANR	1057270	Label	default :	773:2:21906:21913	1056898	6	True				
ANR	1057271	Identifier	default		1056898	0					
ANR	1057272	ExpressionStatement	"eprintf ( ""Usage: w[1248][+-][num]   # inc/dec byte/word/..\\n"" )"	774:3:21918:21980	1056898	7	True				
ANR	1057273	CallExpression	"eprintf ( ""Usage: w[1248][+-][num]   # inc/dec byte/word/..\\n"" )"		1056898	0					
ANR	1057274	Callee	eprintf		1056898	0					
ANR	1057275	Identifier	eprintf		1056898	0					
ANR	1057276	ArgumentList	"""Usage: w[1248][+-][num]   # inc/dec byte/word/..\\n"""		1056898	1					
ANR	1057277	Argument	"""Usage: w[1248][+-][num]   # inc/dec byte/word/..\\n"""		1056898	0					
ANR	1057278	PrimaryExpression	"""Usage: w[1248][+-][num]   # inc/dec byte/word/..\\n"""		1056898	0					
ANR	1057279	BreakStatement	break ;	776:2:21988:21993	1056898	12	True				
ANR	1057280	Label	case '6' :	777:1:21996:22004	1056898	13	True				
ANR	1057281	CompoundStatement		72:2:1512:1527	1056898	14					
ANR	1057282	IdentifierDeclStatement	int fail = 0 ;	779:2:22020:22032	1056898	0	True				
ANR	1057283	IdentifierDecl	fail = 0		1056898	0					
ANR	1057284	IdentifierDeclType	int		1056898	0					
ANR	1057285	Identifier	fail		1056898	1					
ANR	1057286	AssignmentExpression	fail = 0		1056898	2		=			
ANR	1057287	Identifier	fail		1056898	0					
ANR	1057288	PrimaryExpression	0		1056898	1					
ANR	1057289	IdentifierDeclStatement	ut8 * buf = NULL ;	780:2:22036:22051	1056898	1	True				
ANR	1057290	IdentifierDecl	* buf = NULL		1056898	0					
ANR	1057291	IdentifierDeclType	ut8 *		1056898	0					
ANR	1057292	Identifier	buf		1056898	1					
ANR	1057293	AssignmentExpression	* buf = NULL		1056898	2		=			
ANR	1057294	Identifier	NULL		1056898	0					
ANR	1057295	Identifier	NULL		1056898	1					
ANR	1057296	IdentifierDeclStatement	"int len = 0 , str_len ;"	781:2:22055:22075	1056898	2	True				
ANR	1057297	IdentifierDecl	len = 0		1056898	0					
ANR	1057298	IdentifierDeclType	int		1056898	0					
ANR	1057299	Identifier	len		1056898	1					
ANR	1057300	AssignmentExpression	len = 0		1056898	2		=			
ANR	1057301	Identifier	len		1056898	0					
ANR	1057302	PrimaryExpression	0		1056898	1					
ANR	1057303	IdentifierDecl	str_len		1056898	1					
ANR	1057304	IdentifierDeclType	int		1056898	0					
ANR	1057305	Identifier	str_len		1056898	1					
ANR	1057306	IdentifierDeclStatement	const char * str ;	782:2:22079:22094	1056898	3	True				
ANR	1057307	IdentifierDecl	* str		1056898	0					
ANR	1057308	IdentifierDeclType	const char *		1056898	0					
ANR	1057309	Identifier	str		1056898	1					
ANR	1057310	IfStatement	if ( input [ 1 ] && input [ 2 ] != ' ' )		1056898	4					
ANR	1057311	Condition	input [ 1 ] && input [ 2 ] != ' '	784:6:22103:22129	1056898	0	True				
ANR	1057312	AndExpression	input [ 1 ] && input [ 2 ] != ' '		1056898	0		&&			
ANR	1057313	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057314	Identifier	input		1056898	0					
ANR	1057315	PrimaryExpression	1		1056898	1					
ANR	1057316	EqualityExpression	input [ 2 ] != ' '		1056898	1		!=			
ANR	1057317	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057318	Identifier	input		1056898	0					
ANR	1057319	PrimaryExpression	2		1056898	1					
ANR	1057320	PrimaryExpression	' '		1056898	1					
ANR	1057321	ExpressionStatement	fail = 1	785:3:22135:22143	1056898	1	True				
ANR	1057322	AssignmentExpression	fail = 1		1056898	0		=			
ANR	1057323	Identifier	fail		1056898	0					
ANR	1057324	PrimaryExpression	1		1056898	1					
ANR	1057325	IfStatement	if ( input [ 1 ] && input [ 2 ] && input [ 3 ] )		1056898	5					
ANR	1057326	Condition	input [ 1 ] && input [ 2 ] && input [ 3 ]	787:6:22152:22183	1056898	0	True				
ANR	1057327	AndExpression	input [ 1 ] && input [ 2 ] && input [ 3 ]		1056898	0		&&			
ANR	1057328	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057329	Identifier	input		1056898	0					
ANR	1057330	PrimaryExpression	1		1056898	1					
ANR	1057331	AndExpression	input [ 2 ] && input [ 3 ]		1056898	1		&&			
ANR	1057332	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057333	Identifier	input		1056898	0					
ANR	1057334	PrimaryExpression	2		1056898	1					
ANR	1057335	ArrayIndexing	input [ 3 ]		1056898	1					
ANR	1057336	Identifier	input		1056898	0					
ANR	1057337	PrimaryExpression	3		1056898	1					
ANR	1057338	ExpressionStatement	str = input + 3	788:3:22189:22204	1056898	1	True				
ANR	1057339	AssignmentExpression	str = input + 3		1056898	0		=			
ANR	1057340	Identifier	str		1056898	0					
ANR	1057341	AdditiveExpression	input + 3		1056898	1		+			
ANR	1057342	Identifier	input		1056898	0					
ANR	1057343	PrimaryExpression	3		1056898	1					
ANR	1057344	ElseStatement	else		1056898	0					
ANR	1057345	ExpressionStatement	"str = """""	790:3:22216:22224	1056898	0	True				
ANR	1057346	AssignmentExpression	"str = """""		1056898	0		=			
ANR	1057347	Identifier	str		1056898	0					
ANR	1057348	PrimaryExpression	""""""		1056898	1					
ANR	1057349	ExpressionStatement	str_len = strlen ( str ) + 1	791:2:22228:22254	1056898	6	True				
ANR	1057350	AssignmentExpression	str_len = strlen ( str ) + 1		1056898	0		=			
ANR	1057351	Identifier	str_len		1056898	0					
ANR	1057352	AdditiveExpression	strlen ( str ) + 1		1056898	1		+			
ANR	1057353	CallExpression	strlen ( str )		1056898	0					
ANR	1057354	Callee	strlen		1056898	0					
ANR	1057355	Identifier	strlen		1056898	0					
ANR	1057356	ArgumentList	str		1056898	1					
ANR	1057357	Argument	str		1056898	0					
ANR	1057358	Identifier	str		1056898	0					
ANR	1057359	PrimaryExpression	1		1056898	1					
ANR	1057360	IfStatement	if ( ! fail )		1056898	7					
ANR	1057361	Condition	! fail	792:6:22262:22266	1056898	0	True				
ANR	1057362	UnaryOperationExpression	! fail		1056898	0					
ANR	1057363	UnaryOperator	!		1056898	0					
ANR	1057364	Identifier	fail		1056898	1					
ANR	1057365	CompoundStatement		82:13:1702:1702	1056898	1					
ANR	1057366	SwitchStatement	switch ( input [ 1 ] )		1056898	0					
ANR	1057367	Condition	input [ 1 ]	793:11:22282:22289	1056898	0	True				
ANR	1057368	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057369	Identifier	input		1056898	0					
ANR	1057370	PrimaryExpression	1		1056898	1					
ANR	1057371	CompoundStatement		83:21:1725:1725	1056898	1					
ANR	1057372	Label	case 'd' :	794:3:22297:22305	1056898	0	True				
ANR	1057373	ExpressionStatement	buf = malloc ( str_len )	795:4:22320:22342	1056898	1	True				
ANR	1057374	AssignmentExpression	buf = malloc ( str_len )		1056898	0		=			
ANR	1057375	Identifier	buf		1056898	0					
ANR	1057376	CallExpression	malloc ( str_len )		1056898	1					
ANR	1057377	Callee	malloc		1056898	0					
ANR	1057378	Identifier	malloc		1056898	0					
ANR	1057379	ArgumentList	str_len		1056898	1					
ANR	1057380	Argument	str_len		1056898	0					
ANR	1057381	Identifier	str_len		1056898	0					
ANR	1057382	IfStatement	if ( ! buf )		1056898	2					
ANR	1057383	Condition	! buf	796:8:22352:22355	1056898	0	True				
ANR	1057384	UnaryOperationExpression	! buf		1056898	0					
ANR	1057385	UnaryOperator	!		1056898	0					
ANR	1057386	Identifier	buf		1056898	1					
ANR	1057387	CompoundStatement		86:14:1791:1791	1056898	1					
ANR	1057388	ExpressionStatement	"eprintf ( ""Error: failed to malloc memory"" )"	797:5:22365:22407	1056898	0	True				
ANR	1057389	CallExpression	"eprintf ( ""Error: failed to malloc memory"" )"		1056898	0					
ANR	1057390	Callee	eprintf		1056898	0					
ANR	1057391	Identifier	eprintf		1056898	0					
ANR	1057392	ArgumentList	"""Error: failed to malloc memory"""		1056898	1					
ANR	1057393	Argument	"""Error: failed to malloc memory"""		1056898	0					
ANR	1057394	PrimaryExpression	"""Error: failed to malloc memory"""		1056898	0					
ANR	1057395	BreakStatement	break ;	798:5:22414:22419	1056898	1	True				
ANR	1057396	ExpressionStatement	"len = r_base64_decode ( buf , str , - 1 )"	800:4:22431:22467	1056898	3	True				
ANR	1057397	AssignmentExpression	"len = r_base64_decode ( buf , str , - 1 )"		1056898	0		=			
ANR	1057398	Identifier	len		1056898	0					
ANR	1057399	CallExpression	"r_base64_decode ( buf , str , - 1 )"		1056898	1					
ANR	1057400	Callee	r_base64_decode		1056898	0					
ANR	1057401	Identifier	r_base64_decode		1056898	0					
ANR	1057402	ArgumentList	buf		1056898	1					
ANR	1057403	Argument	buf		1056898	0					
ANR	1057404	Identifier	buf		1056898	0					
ANR	1057405	Argument	str		1056898	1					
ANR	1057406	Identifier	str		1056898	0					
ANR	1057407	Argument	- 1		1056898	2					
ANR	1057408	UnaryOperationExpression	- 1		1056898	0					
ANR	1057409	UnaryOperator	-		1056898	0					
ANR	1057410	PrimaryExpression	1		1056898	1					
ANR	1057411	IfStatement	if ( len < 0 )		1056898	4					
ANR	1057412	Condition	len < 0	801:8:22477:22483	1056898	0	True				
ANR	1057413	RelationalExpression	len < 0		1056898	0		<			
ANR	1057414	Identifier	len		1056898	0					
ANR	1057415	PrimaryExpression	0		1056898	1					
ANR	1057416	CompoundStatement		91:17:1919:1919	1056898	1					
ANR	1057417	ExpressionStatement	free ( buf )	802:5:22493:22503	1056898	0	True				
ANR	1057418	CallExpression	free ( buf )		1056898	0					
ANR	1057419	Callee	free		1056898	0					
ANR	1057420	Identifier	free		1056898	0					
ANR	1057421	ArgumentList	buf		1056898	1					
ANR	1057422	Argument	buf		1056898	0					
ANR	1057423	Identifier	buf		1056898	0					
ANR	1057424	ExpressionStatement	fail = 1	803:5:22510:22518	1056898	1	True				
ANR	1057425	AssignmentExpression	fail = 1		1056898	0		=			
ANR	1057426	Identifier	fail		1056898	0					
ANR	1057427	PrimaryExpression	1		1056898	1					
ANR	1057428	BreakStatement	break ;	805:4:22530:22535	1056898	5	True				
ANR	1057429	Label	case 'e' :	806:3:22540:22548	1056898	6	True				
ANR	1057430	CompoundStatement		102:4:2122:2170	1056898	7					
ANR	1057431	IdentifierDeclStatement	ut8 * bin_buf = malloc ( str_len ) ;	807:4:22565:22596	1056898	0	True				
ANR	1057432	IdentifierDecl	* bin_buf = malloc ( str_len )		1056898	0					
ANR	1057433	IdentifierDeclType	ut8 *		1056898	0					
ANR	1057434	Identifier	bin_buf		1056898	1					
ANR	1057435	AssignmentExpression	* bin_buf = malloc ( str_len )		1056898	2		=			
ANR	1057436	Identifier	bin_buf		1056898	0					
ANR	1057437	CallExpression	malloc ( str_len )		1056898	1					
ANR	1057438	Callee	malloc		1056898	0					
ANR	1057439	Identifier	malloc		1056898	0					
ANR	1057440	ArgumentList	str_len		1056898	1					
ANR	1057441	Argument	str_len		1056898	0					
ANR	1057442	Identifier	str_len		1056898	0					
ANR	1057443	IfStatement	if ( ! bin_buf )		1056898	1					
ANR	1057444	Condition	! bin_buf	808:8:22606:22613	1056898	0	True				
ANR	1057445	UnaryOperationExpression	! bin_buf		1056898	0					
ANR	1057446	UnaryOperator	!		1056898	0					
ANR	1057447	Identifier	bin_buf		1056898	1					
ANR	1057448	CompoundStatement		98:18:2049:2049	1056898	1					
ANR	1057449	ExpressionStatement	"eprintf ( ""Error: failed to malloc memory"" )"	809:5:22623:22665	1056898	0	True				
ANR	1057450	CallExpression	"eprintf ( ""Error: failed to malloc memory"" )"		1056898	0					
ANR	1057451	Callee	eprintf		1056898	0					
ANR	1057452	Identifier	eprintf		1056898	0					
ANR	1057453	ArgumentList	"""Error: failed to malloc memory"""		1056898	1					
ANR	1057454	Argument	"""Error: failed to malloc memory"""		1056898	0					
ANR	1057455	PrimaryExpression	"""Error: failed to malloc memory"""		1056898	0					
ANR	1057456	BreakStatement	break ;	810:5:22672:22677	1056898	1	True				
ANR	1057457	IdentifierDeclStatement	"const int bin_len = r_hex_str2bin ( str , bin_buf ) ;"	812:4:22689:22737	1056898	2	True				
ANR	1057458	IdentifierDecl	"bin_len = r_hex_str2bin ( str , bin_buf )"		1056898	0					
ANR	1057459	IdentifierDeclType	const int		1056898	0					
ANR	1057460	Identifier	bin_len		1056898	1					
ANR	1057461	AssignmentExpression	"bin_len = r_hex_str2bin ( str , bin_buf )"		1056898	2		=			
ANR	1057462	Identifier	bin_len		1056898	0					
ANR	1057463	CallExpression	"r_hex_str2bin ( str , bin_buf )"		1056898	1					
ANR	1057464	Callee	r_hex_str2bin		1056898	0					
ANR	1057465	Identifier	r_hex_str2bin		1056898	0					
ANR	1057466	ArgumentList	str		1056898	1					
ANR	1057467	Argument	str		1056898	0					
ANR	1057468	Identifier	str		1056898	0					
ANR	1057469	Argument	bin_buf		1056898	1					
ANR	1057470	Identifier	bin_buf		1056898	0					
ANR	1057471	IfStatement	if ( bin_len <= 0 )		1056898	3					
ANR	1057472	Condition	bin_len <= 0	813:8:22747:22758	1056898	0	True				
ANR	1057473	RelationalExpression	bin_len <= 0		1056898	0		<=			
ANR	1057474	Identifier	bin_len		1056898	0					
ANR	1057475	PrimaryExpression	0		1056898	1					
ANR	1057476	CompoundStatement		103:22:2194:2194	1056898	1					
ANR	1057477	ExpressionStatement	fail = 1	814:5:22768:22776	1056898	0	True				
ANR	1057478	AssignmentExpression	fail = 1		1056898	0		=			
ANR	1057479	Identifier	fail		1056898	0					
ANR	1057480	PrimaryExpression	1		1056898	1					
ANR	1057481	ElseStatement	else		1056898	0					
ANR	1057482	CompoundStatement		105:11:2222:2222	1056898	0					
ANR	1057483	ExpressionStatement	"buf = calloc ( str_len + 1 , 4 )"	816:5:22796:22825	1056898	0	True				
ANR	1057484	AssignmentExpression	"buf = calloc ( str_len + 1 , 4 )"		1056898	0		=			
ANR	1057485	Identifier	buf		1056898	0					
ANR	1057486	CallExpression	"calloc ( str_len + 1 , 4 )"		1056898	1					
ANR	1057487	Callee	calloc		1056898	0					
ANR	1057488	Identifier	calloc		1056898	0					
ANR	1057489	ArgumentList	str_len + 1		1056898	1					
ANR	1057490	Argument	str_len + 1		1056898	0					
ANR	1057491	AdditiveExpression	str_len + 1		1056898	0		+			
ANR	1057492	Identifier	str_len		1056898	0					
ANR	1057493	PrimaryExpression	1		1056898	1					
ANR	1057494	Argument	4		1056898	1					
ANR	1057495	PrimaryExpression	4		1056898	0					
ANR	1057496	ExpressionStatement	"len = r_base64_encode ( ( char * ) buf , bin_buf , bin_len )"	817:5:22832:22885	1056898	1	True				
ANR	1057497	AssignmentExpression	"len = r_base64_encode ( ( char * ) buf , bin_buf , bin_len )"		1056898	0		=			
ANR	1057498	Identifier	len		1056898	0					
ANR	1057499	CallExpression	"r_base64_encode ( ( char * ) buf , bin_buf , bin_len )"		1056898	1					
ANR	1057500	Callee	r_base64_encode		1056898	0					
ANR	1057501	Identifier	r_base64_encode		1056898	0					
ANR	1057502	ArgumentList	( char * ) buf		1056898	1					
ANR	1057503	Argument	( char * ) buf		1056898	0					
ANR	1057504	CastExpression	( char * ) buf		1056898	0					
ANR	1057505	CastTarget	char *		1056898	0					
ANR	1057506	Identifier	buf		1056898	1					
ANR	1057507	Argument	bin_buf		1056898	1					
ANR	1057508	Identifier	bin_buf		1056898	0					
ANR	1057509	Argument	bin_len		1056898	2					
ANR	1057510	Identifier	bin_len		1056898	0					
ANR	1057511	IfStatement	if ( len == 0 )		1056898	2					
ANR	1057512	Condition	len == 0	818:8:22895:22902	1056898	0	True				
ANR	1057513	EqualityExpression	len == 0		1056898	0		==			
ANR	1057514	Identifier	len		1056898	0					
ANR	1057515	PrimaryExpression	0		1056898	1					
ANR	1057516	CompoundStatement		108:18:2338:2338	1056898	1					
ANR	1057517	ExpressionStatement	free ( buf )	819:6:22913:22923	1056898	0	True				
ANR	1057518	CallExpression	free ( buf )		1056898	0					
ANR	1057519	Callee	free		1056898	0					
ANR	1057520	Identifier	free		1056898	0					
ANR	1057521	ArgumentList	buf		1056898	1					
ANR	1057522	Argument	buf		1056898	0					
ANR	1057523	Identifier	buf		1056898	0					
ANR	1057524	ExpressionStatement	fail = 1	820:6:22931:22939	1056898	1	True				
ANR	1057525	AssignmentExpression	fail = 1		1056898	0		=			
ANR	1057526	Identifier	fail		1056898	0					
ANR	1057527	PrimaryExpression	1		1056898	1					
ANR	1057528	ExpressionStatement	free ( bin_buf )	823:4:22958:22972	1056898	4	True				
ANR	1057529	CallExpression	free ( bin_buf )		1056898	0					
ANR	1057530	Callee	free		1056898	0					
ANR	1057531	Identifier	free		1056898	0					
ANR	1057532	ArgumentList	bin_buf		1056898	1					
ANR	1057533	Argument	bin_buf		1056898	0					
ANR	1057534	Identifier	bin_buf		1056898	0					
ANR	1057535	BreakStatement	break ;	824:4:22978:22983	1056898	5	True				
ANR	1057536	Label	default :	826:3:22993:23000	1056898	8	True				
ANR	1057537	Identifier	default		1056898	0					
ANR	1057538	ExpressionStatement	fail = 1	827:4:23006:23014	1056898	9	True				
ANR	1057539	AssignmentExpression	fail = 1		1056898	0		=			
ANR	1057540	Identifier	fail		1056898	0					
ANR	1057541	PrimaryExpression	1		1056898	1					
ANR	1057542	BreakStatement	break ;	828:4:23020:23025	1056898	10	True				
ANR	1057543	IfStatement	if ( ! fail )		1056898	8					
ANR	1057544	Condition	! fail	831:6:23042:23046	1056898	0	True				
ANR	1057545	UnaryOperationExpression	! fail		1056898	0					
ANR	1057546	UnaryOperator	!		1056898	0					
ANR	1057547	Identifier	fail		1056898	1					
ANR	1057548	CompoundStatement		121:13:2482:2482	1056898	1					
ANR	1057549	ExpressionStatement	"r_core_write_at ( core , core -> offset , buf , len )"	832:3:23054:23100	1056898	0	True				
ANR	1057550	CallExpression	"r_core_write_at ( core , core -> offset , buf , len )"		1056898	0					
ANR	1057551	Callee	r_core_write_at		1056898	0					
ANR	1057552	Identifier	r_core_write_at		1056898	0					
ANR	1057553	ArgumentList	core		1056898	1					
ANR	1057554	Argument	core		1056898	0					
ANR	1057555	Identifier	core		1056898	0					
ANR	1057556	Argument	core -> offset		1056898	1					
ANR	1057557	PtrMemberAccess	core -> offset		1056898	0					
ANR	1057558	Identifier	core		1056898	0					
ANR	1057559	Identifier	offset		1056898	1					
ANR	1057560	Argument	buf		1056898	2					
ANR	1057561	Identifier	buf		1056898	0					
ANR	1057562	Argument	len		1056898	3					
ANR	1057563	Identifier	len		1056898	0					
ANR	1057564	ExpressionStatement	"WSEEK ( core , len )"	833:3:23105:23122	1056898	1	True				
ANR	1057565	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1057566	Callee	WSEEK		1056898	0					
ANR	1057567	Identifier	WSEEK		1056898	0					
ANR	1057568	ArgumentList	core		1056898	1					
ANR	1057569	Argument	core		1056898	0					
ANR	1057570	Identifier	core		1056898	0					
ANR	1057571	Argument	len		1056898	1					
ANR	1057572	Identifier	len		1056898	0					
ANR	1057573	ExpressionStatement	r_core_block_read ( core )	834:3:23127:23151	1056898	2	True				
ANR	1057574	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1057575	Callee	r_core_block_read		1056898	0					
ANR	1057576	Identifier	r_core_block_read		1056898	0					
ANR	1057577	ArgumentList	core		1056898	1					
ANR	1057578	Argument	core		1056898	0					
ANR	1057579	Identifier	core		1056898	0					
ANR	1057580	ExpressionStatement	free ( buf )	835:3:23156:23166	1056898	3	True				
ANR	1057581	CallExpression	free ( buf )		1056898	0					
ANR	1057582	Callee	free		1056898	0					
ANR	1057583	Identifier	free		1056898	0					
ANR	1057584	ArgumentList	buf		1056898	1					
ANR	1057585	Argument	buf		1056898	0					
ANR	1057586	Identifier	buf		1056898	0					
ANR	1057587	ElseStatement	else		1056898	0					
ANR	1057588	CompoundStatement		126:9:2610:2610	1056898	0					
ANR	1057589	ExpressionStatement	"eprintf ( ""Usage: w6[de] base64/hex\\n"" )"	837:3:23182:23220	1056898	0	True				
ANR	1057590	CallExpression	"eprintf ( ""Usage: w6[de] base64/hex\\n"" )"		1056898	0					
ANR	1057591	Callee	eprintf		1056898	0					
ANR	1057592	Identifier	eprintf		1056898	0					
ANR	1057593	ArgumentList	"""Usage: w6[de] base64/hex\\n"""		1056898	1					
ANR	1057594	Argument	"""Usage: w6[de] base64/hex\\n"""		1056898	0					
ANR	1057595	PrimaryExpression	"""Usage: w6[de] base64/hex\\n"""		1056898	0					
ANR	1057596	BreakStatement	break ;	839:2:23228:23233	1056898	9	True				
ANR	1057597	Label	case 'h' :	841:1:23240:23248	1056898	15	True				
ANR	1057598	CompoundStatement		133:2:2697:2726	1056898	16					
ANR	1057599	IdentifierDeclStatement	"char * p = strchr ( input , ' ' ) ;"	843:2:23264:23293	1056898	0	True				
ANR	1057600	IdentifierDecl	"* p = strchr ( input , ' ' )"		1056898	0					
ANR	1057601	IdentifierDeclType	char *		1056898	0					
ANR	1057602	Identifier	p		1056898	1					
ANR	1057603	AssignmentExpression	"* p = strchr ( input , ' ' )"		1056898	2		=			
ANR	1057604	Identifier	p		1056898	0					
ANR	1057605	CallExpression	"strchr ( input , ' ' )"		1056898	1					
ANR	1057606	Callee	strchr		1056898	0					
ANR	1057607	Identifier	strchr		1056898	0					
ANR	1057608	ArgumentList	input		1056898	1					
ANR	1057609	Argument	input		1056898	0					
ANR	1057610	Identifier	input		1056898	0					
ANR	1057611	Argument	' '		1056898	1					
ANR	1057612	PrimaryExpression	' '		1056898	0					
ANR	1057613	IfStatement	if ( p )		1056898	1					
ANR	1057614	Condition	p	844:6:23301:23301	1056898	0	True				
ANR	1057615	Identifier	p		1056898	0					
ANR	1057616	CompoundStatement		134:9:2737:2737	1056898	1					
ANR	1057617	WhileStatement	while ( * p == ' ' )		1056898	0					
ANR	1057618	Condition	* p == ' '	845:10:23316:23322	1056898	0	True				
ANR	1057619	EqualityExpression	* p == ' '		1056898	0		==			
ANR	1057620	UnaryOperationExpression	* p		1056898	0					
ANR	1057621	UnaryOperator	*		1056898	0					
ANR	1057622	Identifier	p		1056898	1					
ANR	1057623	PrimaryExpression	' '		1056898	1					
ANR	1057624	ExpressionStatement	p ++	845:19:23325:23328	1056898	1	True				
ANR	1057625	PostIncDecOperationExpression	p ++		1056898	0					
ANR	1057626	Identifier	p		1056898	0					
ANR	1057627	IncDec	++		1056898	1					
ANR	1057628	ExpressionStatement	p = r_file_path ( p )	846:3:23333:23352	1056898	1	True				
ANR	1057629	AssignmentExpression	p = r_file_path ( p )		1056898	0		=			
ANR	1057630	Identifier	p		1056898	0					
ANR	1057631	CallExpression	r_file_path ( p )		1056898	1					
ANR	1057632	Callee	r_file_path		1056898	0					
ANR	1057633	Identifier	r_file_path		1056898	0					
ANR	1057634	ArgumentList	p		1056898	1					
ANR	1057635	Argument	p		1056898	0					
ANR	1057636	Identifier	p		1056898	0					
ANR	1057637	IfStatement	if ( p )		1056898	2					
ANR	1057638	Condition	p	847:7:23361:23361	1056898	0	True				
ANR	1057639	Identifier	p		1056898	0					
ANR	1057640	CompoundStatement		137:10:2797:2797	1056898	1					
ANR	1057641	ExpressionStatement	r_cons_println ( p )	848:4:23370:23388	1056898	0	True				
ANR	1057642	CallExpression	r_cons_println ( p )		1056898	0					
ANR	1057643	Callee	r_cons_println		1056898	0					
ANR	1057644	Identifier	r_cons_println		1056898	0					
ANR	1057645	ArgumentList	p		1056898	1					
ANR	1057646	Argument	p		1056898	0					
ANR	1057647	Identifier	p		1056898	0					
ANR	1057648	ExpressionStatement	free ( p )	849:4:23394:23402	1056898	1	True				
ANR	1057649	CallExpression	free ( p )		1056898	0					
ANR	1057650	Callee	free		1056898	0					
ANR	1057651	Identifier	free		1056898	0					
ANR	1057652	ArgumentList	p		1056898	1					
ANR	1057653	Argument	p		1056898	0					
ANR	1057654	Identifier	p		1056898	0					
ANR	1057655	BreakStatement	break ;	853:2:23419:23424	1056898	17	True				
ANR	1057656	Label	case 'e' :	854:1:23427:23435	1056898	18	True				
ANR	1057657	CompoundStatement		149:2:2981:3017	1056898	19					
ANR	1057658	IdentifierDeclStatement	"ut64 addr = 0 , len = 0 , b_size = 0 ;"	855:2:23449:23483	1056898	0	True				
ANR	1057659	IdentifierDecl	addr = 0		1056898	0					
ANR	1057660	IdentifierDeclType	ut64		1056898	0					
ANR	1057661	Identifier	addr		1056898	1					
ANR	1057662	AssignmentExpression	addr = 0		1056898	2		=			
ANR	1057663	Identifier	addr		1056898	0					
ANR	1057664	PrimaryExpression	0		1056898	1					
ANR	1057665	IdentifierDecl	len = 0		1056898	1					
ANR	1057666	IdentifierDeclType	ut64		1056898	0					
ANR	1057667	Identifier	len		1056898	1					
ANR	1057668	AssignmentExpression	len = 0		1056898	2		=			
ANR	1057669	Identifier	len		1056898	0					
ANR	1057670	PrimaryExpression	0		1056898	1					
ANR	1057671	IdentifierDecl	b_size = 0		1056898	2					
ANR	1057672	IdentifierDeclType	ut64		1056898	0					
ANR	1057673	Identifier	b_size		1056898	1					
ANR	1057674	AssignmentExpression	b_size = 0		1056898	2		=			
ANR	1057675	Identifier	b_size		1056898	0					
ANR	1057676	PrimaryExpression	0		1056898	1					
ANR	1057677	IdentifierDeclStatement	st64 dist = 0 ;	856:2:23487:23500	1056898	1	True				
ANR	1057678	IdentifierDecl	dist = 0		1056898	0					
ANR	1057679	IdentifierDeclType	st64		1056898	0					
ANR	1057680	Identifier	dist		1056898	1					
ANR	1057681	AssignmentExpression	dist = 0		1056898	2		=			
ANR	1057682	Identifier	dist		1056898	0					
ANR	1057683	PrimaryExpression	0		1056898	1					
ANR	1057684	IdentifierDeclStatement	ut8 * bytes = NULL ;	857:2:23504:23521	1056898	2	True				
ANR	1057685	IdentifierDecl	* bytes = NULL		1056898	0					
ANR	1057686	IdentifierDeclType	ut8 *		1056898	0					
ANR	1057687	Identifier	bytes		1056898	1					
ANR	1057688	AssignmentExpression	* bytes = NULL		1056898	2		=			
ANR	1057689	Identifier	NULL		1056898	0					
ANR	1057690	Identifier	NULL		1056898	1					
ANR	1057691	IdentifierDeclStatement	int cmd_suc = false ;	858:2:23525:23544	1056898	3	True				
ANR	1057692	IdentifierDecl	cmd_suc = false		1056898	0					
ANR	1057693	IdentifierDeclType	int		1056898	0					
ANR	1057694	Identifier	cmd_suc		1056898	1					
ANR	1057695	AssignmentExpression	cmd_suc = false		1056898	2		=			
ANR	1057696	Identifier	false		1056898	0					
ANR	1057697	Identifier	false		1056898	1					
ANR	1057698	IdentifierDeclStatement	"char * input_shadow = NULL , * p = NULL ;"	859:2:23548:23584	1056898	4	True				
ANR	1057699	IdentifierDecl	* input_shadow = NULL		1056898	0					
ANR	1057700	IdentifierDeclType	char *		1056898	0					
ANR	1057701	Identifier	input_shadow		1056898	1					
ANR	1057702	AssignmentExpression	* input_shadow = NULL		1056898	2		=			
ANR	1057703	Identifier	NULL		1056898	0					
ANR	1057704	Identifier	NULL		1056898	1					
ANR	1057705	IdentifierDecl	* p = NULL		1056898	1					
ANR	1057706	IdentifierDeclType	char *		1056898	0					
ANR	1057707	Identifier	p		1056898	1					
ANR	1057708	AssignmentExpression	* p = NULL		1056898	2		=			
ANR	1057709	Identifier	NULL		1056898	0					
ANR	1057710	Identifier	NULL		1056898	1					
ANR	1057711	SwitchStatement	switch ( input [ 1 ] )		1056898	5					
ANR	1057712	Condition	input [ 1 ]	861:10:23597:23604	1056898	0	True				
ANR	1057713	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1057714	Identifier	input		1056898	0					
ANR	1057715	PrimaryExpression	1		1056898	1					
ANR	1057716	CompoundStatement		151:20:3040:3040	1056898	1					
ANR	1057717	Label	case 'n' :	862:2:23611:23619	1056898	0	True				
ANR	1057718	IfStatement	if ( input [ 2 ] == ' ' )		1056898	1					
ANR	1057719	Condition	input [ 2 ] == ' '	863:7:23637:23651	1056898	0	True				
ANR	1057720	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1057721	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057722	Identifier	input		1056898	0					
ANR	1057723	PrimaryExpression	2		1056898	1					
ANR	1057724	PrimaryExpression	' '		1056898	1					
ANR	1057725	CompoundStatement		153:24:3087:3087	1056898	1					
ANR	1057726	ExpressionStatement	"len = * input ? r_num_math ( core -> num , input + 3 ) : 0"	864:4:23660:23710	1056898	0	True				
ANR	1057727	AssignmentExpression	"len = * input ? r_num_math ( core -> num , input + 3 ) : 0"		1056898	0		=			
ANR	1057728	Identifier	len		1056898	0					
ANR	1057729	ConditionalExpression	"* input ? r_num_math ( core -> num , input + 3 ) : 0"		1056898	1					
ANR	1057730	Condition	* input		1056898	0					
ANR	1057731	UnaryOperationExpression	* input		1056898	0					
ANR	1057732	UnaryOperator	*		1056898	0					
ANR	1057733	Identifier	input		1056898	1					
ANR	1057734	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1057735	Callee	r_num_math		1056898	0					
ANR	1057736	Identifier	r_num_math		1056898	0					
ANR	1057737	ArgumentList	core -> num		1056898	1					
ANR	1057738	Argument	core -> num		1056898	0					
ANR	1057739	PtrMemberAccess	core -> num		1056898	0					
ANR	1057740	Identifier	core		1056898	0					
ANR	1057741	Identifier	num		1056898	1					
ANR	1057742	Argument	input + 3		1056898	1					
ANR	1057743	AdditiveExpression	input + 3		1056898	0		+			
ANR	1057744	Identifier	input		1056898	0					
ANR	1057745	PrimaryExpression	3		1056898	1					
ANR	1057746	PrimaryExpression	0		1056898	2					
ANR	1057747	IfStatement	if ( len > 0 )		1056898	1					
ANR	1057748	Condition	len > 0	865:8:23720:23726	1056898	0	True				
ANR	1057749	RelationalExpression	len > 0		1056898	0		>			
ANR	1057750	Identifier	len		1056898	0					
ANR	1057751	PrimaryExpression	0		1056898	1					
ANR	1057752	CompoundStatement		156:5:3169:3202	1056898	1					
ANR	1057753	IdentifierDeclStatement	const ut64 cur_off = core -> offset ;	866:5:23736:23769	1056898	0	True				
ANR	1057754	IdentifierDecl	cur_off = core -> offset		1056898	0					
ANR	1057755	IdentifierDeclType	const ut64		1056898	0					
ANR	1057756	Identifier	cur_off		1056898	1					
ANR	1057757	AssignmentExpression	cur_off = core -> offset		1056898	2		=			
ANR	1057758	Identifier	cur_off		1056898	0					
ANR	1057759	PtrMemberAccess	core -> offset		1056898	1					
ANR	1057760	Identifier	core		1056898	0					
ANR	1057761	Identifier	offset		1056898	1					
ANR	1057762	ExpressionStatement	"cmd_suc = r_core_extend_at ( core , core -> offset , len )"	867:5:23776:23828	1056898	1	True				
ANR	1057763	AssignmentExpression	"cmd_suc = r_core_extend_at ( core , core -> offset , len )"		1056898	0		=			
ANR	1057764	Identifier	cmd_suc		1056898	0					
ANR	1057765	CallExpression	"r_core_extend_at ( core , core -> offset , len )"		1056898	1					
ANR	1057766	Callee	r_core_extend_at		1056898	0					
ANR	1057767	Identifier	r_core_extend_at		1056898	0					
ANR	1057768	ArgumentList	core		1056898	1					
ANR	1057769	Argument	core		1056898	0					
ANR	1057770	Identifier	core		1056898	0					
ANR	1057771	Argument	core -> offset		1056898	1					
ANR	1057772	PtrMemberAccess	core -> offset		1056898	0					
ANR	1057773	Identifier	core		1056898	0					
ANR	1057774	Identifier	offset		1056898	1					
ANR	1057775	Argument	len		1056898	2					
ANR	1057776	Identifier	len		1056898	0					
ANR	1057777	ExpressionStatement	core -> offset = cur_off	868:5:23835:23857	1056898	2	True				
ANR	1057778	AssignmentExpression	core -> offset = cur_off		1056898	0		=			
ANR	1057779	PtrMemberAccess	core -> offset		1056898	0					
ANR	1057780	Identifier	core		1056898	0					
ANR	1057781	Identifier	offset		1056898	1					
ANR	1057782	Identifier	cur_off		1056898	1					
ANR	1057783	ExpressionStatement	r_core_block_read ( core )	869:5:23864:23888	1056898	3	True				
ANR	1057784	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1057785	Callee	r_core_block_read		1056898	0					
ANR	1057786	Identifier	r_core_block_read		1056898	0					
ANR	1057787	ArgumentList	core		1056898	1					
ANR	1057788	Argument	core		1056898	0					
ANR	1057789	Identifier	core		1056898	0					
ANR	1057790	BreakStatement	break ;	872:3:23904:23909	1056898	2	True				
ANR	1057791	Label	case 'N' :	873:2:23913:23921	1056898	3	True				
ANR	1057792	IfStatement	if ( input [ 2 ] == ' ' )		1056898	4					
ANR	1057793	Condition	input [ 2 ] == ' '	874:7:23939:23953	1056898	0	True				
ANR	1057794	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1057795	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057796	Identifier	input		1056898	0					
ANR	1057797	PrimaryExpression	2		1056898	1					
ANR	1057798	PrimaryExpression	' '		1056898	1					
ANR	1057799	CompoundStatement		164:24:3389:3389	1056898	1					
ANR	1057800	ExpressionStatement	input += 3	875:4:23962:23972	1056898	0	True				
ANR	1057801	AssignmentExpression	input += 3		1056898	0		+=			
ANR	1057802	Identifier	input		1056898	0					
ANR	1057803	PrimaryExpression	3		1056898	1					
ANR	1057804	WhileStatement	while ( * input && * input == ' ' )		1056898	1					
ANR	1057805	Condition	* input && * input == ' '	876:11:23985:24007	1056898	0	True				
ANR	1057806	AndExpression	* input && * input == ' '		1056898	0		&&			
ANR	1057807	UnaryOperationExpression	* input		1056898	0					
ANR	1057808	UnaryOperator	*		1056898	0					
ANR	1057809	Identifier	input		1056898	1					
ANR	1057810	EqualityExpression	* input == ' '		1056898	1		==			
ANR	1057811	UnaryOperationExpression	* input		1056898	0					
ANR	1057812	UnaryOperator	*		1056898	0					
ANR	1057813	Identifier	input		1056898	1					
ANR	1057814	PrimaryExpression	' '		1056898	1					
ANR	1057815	ExpressionStatement	input ++	876:36:24010:24017	1056898	1	True				
ANR	1057816	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1057817	Identifier	input		1056898	0					
ANR	1057818	IncDec	++		1056898	1					
ANR	1057819	ExpressionStatement	"addr = r_num_math ( core -> num , input )"	877:4:24023:24059	1056898	2	True				
ANR	1057820	AssignmentExpression	"addr = r_num_math ( core -> num , input )"		1056898	0		=			
ANR	1057821	Identifier	addr		1056898	0					
ANR	1057822	CallExpression	"r_num_math ( core -> num , input )"		1056898	1					
ANR	1057823	Callee	r_num_math		1056898	0					
ANR	1057824	Identifier	r_num_math		1056898	0					
ANR	1057825	ArgumentList	core -> num		1056898	1					
ANR	1057826	Argument	core -> num		1056898	0					
ANR	1057827	PtrMemberAccess	core -> num		1056898	0					
ANR	1057828	Identifier	core		1056898	0					
ANR	1057829	Identifier	num		1056898	1					
ANR	1057830	Argument	input		1056898	1					
ANR	1057831	Identifier	input		1056898	0					
ANR	1057832	WhileStatement	while ( * input && * input != ' ' )		1056898	3					
ANR	1057833	Condition	* input && * input != ' '	878:11:24072:24094	1056898	0	True				
ANR	1057834	AndExpression	* input && * input != ' '		1056898	0		&&			
ANR	1057835	UnaryOperationExpression	* input		1056898	0					
ANR	1057836	UnaryOperator	*		1056898	0					
ANR	1057837	Identifier	input		1056898	1					
ANR	1057838	EqualityExpression	* input != ' '		1056898	1		!=			
ANR	1057839	UnaryOperationExpression	* input		1056898	0					
ANR	1057840	UnaryOperator	*		1056898	0					
ANR	1057841	Identifier	input		1056898	1					
ANR	1057842	PrimaryExpression	' '		1056898	1					
ANR	1057843	ExpressionStatement	input ++	878:36:24097:24104	1056898	1	True				
ANR	1057844	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1057845	Identifier	input		1056898	0					
ANR	1057846	IncDec	++		1056898	1					
ANR	1057847	ExpressionStatement	input ++	879:4:24110:24117	1056898	4	True				
ANR	1057848	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1057849	Identifier	input		1056898	0					
ANR	1057850	IncDec	++		1056898	1					
ANR	1057851	ExpressionStatement	"len = * input ? r_num_math ( core -> num , input ) : 0"	880:4:24123:24171	1056898	5	True				
ANR	1057852	AssignmentExpression	"len = * input ? r_num_math ( core -> num , input ) : 0"		1056898	0		=			
ANR	1057853	Identifier	len		1056898	0					
ANR	1057854	ConditionalExpression	"* input ? r_num_math ( core -> num , input ) : 0"		1056898	1					
ANR	1057855	Condition	* input		1056898	0					
ANR	1057856	UnaryOperationExpression	* input		1056898	0					
ANR	1057857	UnaryOperator	*		1056898	0					
ANR	1057858	Identifier	input		1056898	1					
ANR	1057859	CallExpression	"r_num_math ( core -> num , input )"		1056898	1					
ANR	1057860	Callee	r_num_math		1056898	0					
ANR	1057861	Identifier	r_num_math		1056898	0					
ANR	1057862	ArgumentList	core -> num		1056898	1					
ANR	1057863	Argument	core -> num		1056898	0					
ANR	1057864	PtrMemberAccess	core -> num		1056898	0					
ANR	1057865	Identifier	core		1056898	0					
ANR	1057866	Identifier	num		1056898	1					
ANR	1057867	Argument	input		1056898	1					
ANR	1057868	Identifier	input		1056898	0					
ANR	1057869	PrimaryExpression	0		1056898	2					
ANR	1057870	IfStatement	if ( len > 0 )		1056898	6					
ANR	1057871	Condition	len > 0	881:8:24181:24187	1056898	0	True				
ANR	1057872	RelationalExpression	len > 0		1056898	0		>			
ANR	1057873	Identifier	len		1056898	0					
ANR	1057874	PrimaryExpression	0		1056898	1					
ANR	1057875	CompoundStatement		172:5:3629:3656	1056898	1					
ANR	1057876	IdentifierDeclStatement	ut64 cur_off = core -> offset ;	882:5:24196:24223	1056898	0	True				
ANR	1057877	IdentifierDecl	cur_off = core -> offset		1056898	0					
ANR	1057878	IdentifierDeclType	ut64		1056898	0					
ANR	1057879	Identifier	cur_off		1056898	1					
ANR	1057880	AssignmentExpression	cur_off = core -> offset		1056898	2		=			
ANR	1057881	Identifier	cur_off		1056898	0					
ANR	1057882	PtrMemberAccess	core -> offset		1056898	1					
ANR	1057883	Identifier	core		1056898	0					
ANR	1057884	Identifier	offset		1056898	1					
ANR	1057885	ExpressionStatement	"cmd_suc = r_core_extend_at ( core , addr , len )"	883:5:24230:24274	1056898	1	True				
ANR	1057886	AssignmentExpression	"cmd_suc = r_core_extend_at ( core , addr , len )"		1056898	0		=			
ANR	1057887	Identifier	cmd_suc		1056898	0					
ANR	1057888	CallExpression	"r_core_extend_at ( core , addr , len )"		1056898	1					
ANR	1057889	Callee	r_core_extend_at		1056898	0					
ANR	1057890	Identifier	r_core_extend_at		1056898	0					
ANR	1057891	ArgumentList	core		1056898	1					
ANR	1057892	Argument	core		1056898	0					
ANR	1057893	Identifier	core		1056898	0					
ANR	1057894	Argument	addr		1056898	1					
ANR	1057895	Identifier	addr		1056898	0					
ANR	1057896	Argument	len		1056898	2					
ANR	1057897	Identifier	len		1056898	0					
ANR	1057898	ExpressionStatement	"r_core_seek ( core , cur_off , 1 )"	884:5:24281:24311	1056898	2	True				
ANR	1057899	CallExpression	"r_core_seek ( core , cur_off , 1 )"		1056898	0					
ANR	1057900	Callee	r_core_seek		1056898	0					
ANR	1057901	Identifier	r_core_seek		1056898	0					
ANR	1057902	ArgumentList	core		1056898	1					
ANR	1057903	Argument	core		1056898	0					
ANR	1057904	Identifier	core		1056898	0					
ANR	1057905	Argument	cur_off		1056898	1					
ANR	1057906	Identifier	cur_off		1056898	0					
ANR	1057907	Argument	1		1056898	2					
ANR	1057908	PrimaryExpression	1		1056898	0					
ANR	1057909	ExpressionStatement	core -> offset = addr	885:5:24318:24337	1056898	3	True				
ANR	1057910	AssignmentExpression	core -> offset = addr		1056898	0		=			
ANR	1057911	PtrMemberAccess	core -> offset		1056898	0					
ANR	1057912	Identifier	core		1056898	0					
ANR	1057913	Identifier	offset		1056898	1					
ANR	1057914	Identifier	addr		1056898	1					
ANR	1057915	ExpressionStatement	r_core_block_read ( core )	886:5:24344:24368	1056898	4	True				
ANR	1057916	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1057917	Callee	r_core_block_read		1056898	0					
ANR	1057918	Identifier	r_core_block_read		1056898	0					
ANR	1057919	ArgumentList	core		1056898	1					
ANR	1057920	Argument	core		1056898	0					
ANR	1057921	Identifier	core		1056898	0					
ANR	1057922	ExpressionStatement	cmd_suc = true	888:4:24380:24394	1056898	7	True				
ANR	1057923	AssignmentExpression	cmd_suc = true		1056898	0		=			
ANR	1057924	Identifier	cmd_suc		1056898	0					
ANR	1057925	Identifier	true		1056898	1					
ANR	1057926	BreakStatement	break ;	890:3:24404:24409	1056898	5	True				
ANR	1057927	Label	case 'x' :	891:2:24413:24421	1056898	6	True				
ANR	1057928	IfStatement	if ( input [ 2 ] == ' ' )		1056898	7					
ANR	1057929	Condition	input [ 2 ] == ' '	892:7:24439:24453	1056898	0	True				
ANR	1057930	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1057931	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1057932	Identifier	input		1056898	0					
ANR	1057933	PrimaryExpression	2		1056898	1					
ANR	1057934	PrimaryExpression	' '		1056898	1					
ANR	1057935	CompoundStatement		182:24:3889:3889	1056898	1					
ANR	1057936	ExpressionStatement	input += 2	893:4:24462:24472	1056898	0	True				
ANR	1057937	AssignmentExpression	input += 2		1056898	0		+=			
ANR	1057938	Identifier	input		1056898	0					
ANR	1057939	PrimaryExpression	2		1056898	1					
ANR	1057940	ExpressionStatement	len = * input ? strlen ( input ) : 0	894:4:24478:24511	1056898	1	True				
ANR	1057941	AssignmentExpression	len = * input ? strlen ( input ) : 0		1056898	0		=			
ANR	1057942	Identifier	len		1056898	0					
ANR	1057943	ConditionalExpression	* input ? strlen ( input ) : 0		1056898	1					
ANR	1057944	Condition	* input		1056898	0					
ANR	1057945	UnaryOperationExpression	* input		1056898	0					
ANR	1057946	UnaryOperator	*		1056898	0					
ANR	1057947	Identifier	input		1056898	1					
ANR	1057948	CallExpression	strlen ( input )		1056898	1					
ANR	1057949	Callee	strlen		1056898	0					
ANR	1057950	Identifier	strlen		1056898	0					
ANR	1057951	ArgumentList	input		1056898	1					
ANR	1057952	Argument	input		1056898	0					
ANR	1057953	Identifier	input		1056898	0					
ANR	1057954	PrimaryExpression	0		1056898	2					
ANR	1057955	ExpressionStatement	bytes = len > 1 ? malloc ( len + 1 ) : NULL	895:4:24517:24555	1056898	2	True				
ANR	1057956	AssignmentExpression	bytes = len > 1 ? malloc ( len + 1 ) : NULL		1056898	0		=			
ANR	1057957	Identifier	bytes		1056898	0					
ANR	1057958	ConditionalExpression	len > 1 ? malloc ( len + 1 ) : NULL		1056898	1					
ANR	1057959	Condition	len > 1		1056898	0					
ANR	1057960	RelationalExpression	len > 1		1056898	0		>			
ANR	1057961	Identifier	len		1056898	0					
ANR	1057962	PrimaryExpression	1		1056898	1					
ANR	1057963	CallExpression	malloc ( len + 1 )		1056898	1					
ANR	1057964	Callee	malloc		1056898	0					
ANR	1057965	Identifier	malloc		1056898	0					
ANR	1057966	ArgumentList	len + 1		1056898	1					
ANR	1057967	Argument	len + 1		1056898	0					
ANR	1057968	AdditiveExpression	len + 1		1056898	0		+			
ANR	1057969	Identifier	len		1056898	0					
ANR	1057970	PrimaryExpression	1		1056898	1					
ANR	1057971	Identifier	NULL		1056898	2					
ANR	1057972	ExpressionStatement	"len = bytes ? r_hex_str2bin ( input , bytes ) : 0"	896:4:24561:24607	1056898	3	True				
ANR	1057973	AssignmentExpression	"len = bytes ? r_hex_str2bin ( input , bytes ) : 0"		1056898	0		=			
ANR	1057974	Identifier	len		1056898	0					
ANR	1057975	ConditionalExpression	"bytes ? r_hex_str2bin ( input , bytes ) : 0"		1056898	1					
ANR	1057976	Condition	bytes		1056898	0					
ANR	1057977	Identifier	bytes		1056898	0					
ANR	1057978	CallExpression	"r_hex_str2bin ( input , bytes )"		1056898	1					
ANR	1057979	Callee	r_hex_str2bin		1056898	0					
ANR	1057980	Identifier	r_hex_str2bin		1056898	0					
ANR	1057981	ArgumentList	input		1056898	1					
ANR	1057982	Argument	input		1056898	0					
ANR	1057983	Identifier	input		1056898	0					
ANR	1057984	Argument	bytes		1056898	1					
ANR	1057985	Identifier	bytes		1056898	0					
ANR	1057986	PrimaryExpression	0		1056898	2					
ANR	1057987	IfStatement	if ( len > 0 )		1056898	4					
ANR	1057988	Condition	len > 0	897:8:24617:24623	1056898	0	True				
ANR	1057989	RelationalExpression	len > 0		1056898	0		>			
ANR	1057990	Identifier	len		1056898	0					
ANR	1057991	PrimaryExpression	0		1056898	1					
ANR	1057992	CompoundStatement		188:5:4066:4093	1056898	1					
ANR	1057993	IdentifierDeclStatement	ut64 cur_off = core -> offset ;	898:5:24633:24660	1056898	0	True				
ANR	1057994	IdentifierDecl	cur_off = core -> offset		1056898	0					
ANR	1057995	IdentifierDeclType	ut64		1056898	0					
ANR	1057996	Identifier	cur_off		1056898	1					
ANR	1057997	AssignmentExpression	cur_off = core -> offset		1056898	2		=			
ANR	1057998	Identifier	cur_off		1056898	0					
ANR	1057999	PtrMemberAccess	core -> offset		1056898	1					
ANR	1058000	Identifier	core		1056898	0					
ANR	1058001	Identifier	offset		1056898	1					
ANR	1058002	ExpressionStatement	"cmd_suc = r_core_extend_at ( core , cur_off , len )"	899:5:24667:24714	1056898	1	True				
ANR	1058003	AssignmentExpression	"cmd_suc = r_core_extend_at ( core , cur_off , len )"		1056898	0		=			
ANR	1058004	Identifier	cmd_suc		1056898	0					
ANR	1058005	CallExpression	"r_core_extend_at ( core , cur_off , len )"		1056898	1					
ANR	1058006	Callee	r_core_extend_at		1056898	0					
ANR	1058007	Identifier	r_core_extend_at		1056898	0					
ANR	1058008	ArgumentList	core		1056898	1					
ANR	1058009	Argument	core		1056898	0					
ANR	1058010	Identifier	core		1056898	0					
ANR	1058011	Argument	cur_off		1056898	1					
ANR	1058012	Identifier	cur_off		1056898	0					
ANR	1058013	Argument	len		1056898	2					
ANR	1058014	Identifier	len		1056898	0					
ANR	1058015	IfStatement	if ( cmd_suc )		1056898	2					
ANR	1058016	Condition	cmd_suc	900:9:24725:24731	1056898	0	True				
ANR	1058017	Identifier	cmd_suc		1056898	0					
ANR	1058018	CompoundStatement		190:18:4167:4167	1056898	1					
ANR	1058019	ExpressionStatement	"r_core_write_at ( core , cur_off , bytes , len )"	901:6:24742:24785	1056898	0	True				
ANR	1058020	CallExpression	"r_core_write_at ( core , cur_off , bytes , len )"		1056898	0					
ANR	1058021	Callee	r_core_write_at		1056898	0					
ANR	1058022	Identifier	r_core_write_at		1056898	0					
ANR	1058023	ArgumentList	core		1056898	1					
ANR	1058024	Argument	core		1056898	0					
ANR	1058025	Identifier	core		1056898	0					
ANR	1058026	Argument	cur_off		1056898	1					
ANR	1058027	Identifier	cur_off		1056898	0					
ANR	1058028	Argument	bytes		1056898	2					
ANR	1058029	Identifier	bytes		1056898	0					
ANR	1058030	Argument	len		1056898	3					
ANR	1058031	Identifier	len		1056898	0					
ANR	1058032	ExpressionStatement	core -> offset = cur_off	903:5:24799:24821	1056898	3	True				
ANR	1058033	AssignmentExpression	core -> offset = cur_off		1056898	0		=			
ANR	1058034	PtrMemberAccess	core -> offset		1056898	0					
ANR	1058035	Identifier	core		1056898	0					
ANR	1058036	Identifier	offset		1056898	1					
ANR	1058037	Identifier	cur_off		1056898	1					
ANR	1058038	ExpressionStatement	r_core_block_read ( core )	904:5:24828:24852	1056898	4	True				
ANR	1058039	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1058040	Callee	r_core_block_read		1056898	0					
ANR	1058041	Identifier	r_core_block_read		1056898	0					
ANR	1058042	ArgumentList	core		1056898	1					
ANR	1058043	Argument	core		1056898	0					
ANR	1058044	Identifier	core		1056898	0					
ANR	1058045	ExpressionStatement	free ( bytes )	906:4:24864:24876	1056898	5	True				
ANR	1058046	CallExpression	free ( bytes )		1056898	0					
ANR	1058047	Callee	free		1056898	0					
ANR	1058048	Identifier	free		1056898	0					
ANR	1058049	ArgumentList	bytes		1056898	1					
ANR	1058050	Argument	bytes		1056898	0					
ANR	1058051	Identifier	bytes		1056898	0					
ANR	1058052	BreakStatement	break ;	908:3:24886:24891	1056898	8	True				
ANR	1058053	Label	case 's' :	909:2:24895:24903	1056898	9	True				
ANR	1058054	ExpressionStatement	input += 3	910:3:24917:24928	1056898	10	True				
ANR	1058055	AssignmentExpression	input += 3		1056898	0		+=			
ANR	1058056	Identifier	input		1056898	0					
ANR	1058057	PrimaryExpression	3		1056898	1					
ANR	1058058	WhileStatement	while ( * input && * input == ' ' )		1056898	11					
ANR	1058059	Condition	* input && * input == ' '	911:10:24940:24962	1056898	0	True				
ANR	1058060	AndExpression	* input && * input == ' '		1056898	0		&&			
ANR	1058061	UnaryOperationExpression	* input		1056898	0					
ANR	1058062	UnaryOperator	*		1056898	0					
ANR	1058063	Identifier	input		1056898	1					
ANR	1058064	EqualityExpression	* input == ' '		1056898	1		==			
ANR	1058065	UnaryOperationExpression	* input		1056898	0					
ANR	1058066	UnaryOperator	*		1056898	0					
ANR	1058067	Identifier	input		1056898	1					
ANR	1058068	PrimaryExpression	' '		1056898	1					
ANR	1058069	CompoundStatement		201:35:4398:4398	1056898	1					
ANR	1058070	ExpressionStatement	input ++	912:4:24971:24978	1056898	0	True				
ANR	1058071	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1058072	Identifier	input		1056898	0					
ANR	1058073	IncDec	++		1056898	1					
ANR	1058074	ExpressionStatement	len = strlen ( input )	914:3:24988:25008	1056898	12	True				
ANR	1058075	AssignmentExpression	len = strlen ( input )		1056898	0		=			
ANR	1058076	Identifier	len		1056898	0					
ANR	1058077	CallExpression	strlen ( input )		1056898	1					
ANR	1058078	Callee	strlen		1056898	0					
ANR	1058079	Identifier	strlen		1056898	0					
ANR	1058080	ArgumentList	input		1056898	1					
ANR	1058081	Argument	input		1056898	0					
ANR	1058082	Identifier	input		1056898	0					
ANR	1058083	IfStatement	if ( len > 0 )		1056898	13					
ANR	1058084	Condition	len > 0	919:7:25164:25170	1056898	0	True				
ANR	1058085	RelationalExpression	len > 0		1056898	0		>			
ANR	1058086	Identifier	len		1056898	0					
ANR	1058087	PrimaryExpression	0		1056898	1					
ANR	1058088	CompoundStatement		209:16:4606:4606	1056898	1					
ANR	1058089	ExpressionStatement	input_shadow = strdup ( input )	920:4:25179:25208	1056898	0	True				
ANR	1058090	AssignmentExpression	input_shadow = strdup ( input )		1056898	0		=			
ANR	1058091	Identifier	input_shadow		1056898	0					
ANR	1058092	CallExpression	strdup ( input )		1056898	1					
ANR	1058093	Callee	strdup		1056898	0					
ANR	1058094	Identifier	strdup		1056898	0					
ANR	1058095	ArgumentList	input		1056898	1					
ANR	1058096	Argument	input		1056898	0					
ANR	1058097	Identifier	input		1056898	0					
ANR	1058098	ExpressionStatement	"p = strtok ( input_shadow , "" "" )"	921:4:25214:25244	1056898	1	True				
ANR	1058099	AssignmentExpression	"p = strtok ( input_shadow , "" "" )"		1056898	0		=			
ANR	1058100	Identifier	p		1056898	0					
ANR	1058101	CallExpression	"strtok ( input_shadow , "" "" )"		1056898	1					
ANR	1058102	Callee	strtok		1056898	0					
ANR	1058103	Identifier	strtok		1056898	0					
ANR	1058104	ArgumentList	input_shadow		1056898	1					
ANR	1058105	Argument	input_shadow		1056898	0					
ANR	1058106	Identifier	input_shadow		1056898	0					
ANR	1058107	Argument	""" """		1056898	1					
ANR	1058108	PrimaryExpression	""" """		1056898	0					
ANR	1058109	ExpressionStatement	"addr = p && * p ? r_num_math ( core -> num , p ) : 0"	922:4:25250:25296	1056898	2	True				
ANR	1058110	AssignmentExpression	"addr = p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	0		=			
ANR	1058111	Identifier	addr		1056898	0					
ANR	1058112	ConditionalExpression	"p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	1					
ANR	1058113	Condition	p && * p		1056898	0					
ANR	1058114	AndExpression	p && * p		1056898	0		&&			
ANR	1058115	Identifier	p		1056898	0					
ANR	1058116	UnaryOperationExpression	* p		1056898	1					
ANR	1058117	UnaryOperator	*		1056898	0					
ANR	1058118	Identifier	p		1056898	1					
ANR	1058119	CallExpression	"r_num_math ( core -> num , p )"		1056898	1					
ANR	1058120	Callee	r_num_math		1056898	0					
ANR	1058121	Identifier	r_num_math		1056898	0					
ANR	1058122	ArgumentList	core -> num		1056898	1					
ANR	1058123	Argument	core -> num		1056898	0					
ANR	1058124	PtrMemberAccess	core -> num		1056898	0					
ANR	1058125	Identifier	core		1056898	0					
ANR	1058126	Identifier	num		1056898	1					
ANR	1058127	Argument	p		1056898	1					
ANR	1058128	Identifier	p		1056898	0					
ANR	1058129	PrimaryExpression	0		1056898	2					
ANR	1058130	ExpressionStatement	"p = strtok ( NULL , "" "" )"	924:4:25303:25325	1056898	3	True				
ANR	1058131	AssignmentExpression	"p = strtok ( NULL , "" "" )"		1056898	0		=			
ANR	1058132	Identifier	p		1056898	0					
ANR	1058133	CallExpression	"strtok ( NULL , "" "" )"		1056898	1					
ANR	1058134	Callee	strtok		1056898	0					
ANR	1058135	Identifier	strtok		1056898	0					
ANR	1058136	ArgumentList	NULL		1056898	1					
ANR	1058137	Argument	NULL		1056898	0					
ANR	1058138	Identifier	NULL		1056898	0					
ANR	1058139	Argument	""" """		1056898	1					
ANR	1058140	PrimaryExpression	""" """		1056898	0					
ANR	1058141	ExpressionStatement	"dist = p && * p ? r_num_math ( core -> num , p ) : 0"	925:4:25331:25377	1056898	4	True				
ANR	1058142	AssignmentExpression	"dist = p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	0		=			
ANR	1058143	Identifier	dist		1056898	0					
ANR	1058144	ConditionalExpression	"p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	1					
ANR	1058145	Condition	p && * p		1056898	0					
ANR	1058146	AndExpression	p && * p		1056898	0		&&			
ANR	1058147	Identifier	p		1056898	0					
ANR	1058148	UnaryOperationExpression	* p		1056898	1					
ANR	1058149	UnaryOperator	*		1056898	0					
ANR	1058150	Identifier	p		1056898	1					
ANR	1058151	CallExpression	"r_num_math ( core -> num , p )"		1056898	1					
ANR	1058152	Callee	r_num_math		1056898	0					
ANR	1058153	Identifier	r_num_math		1056898	0					
ANR	1058154	ArgumentList	core -> num		1056898	1					
ANR	1058155	Argument	core -> num		1056898	0					
ANR	1058156	PtrMemberAccess	core -> num		1056898	0					
ANR	1058157	Identifier	core		1056898	0					
ANR	1058158	Identifier	num		1056898	1					
ANR	1058159	Argument	p		1056898	1					
ANR	1058160	Identifier	p		1056898	0					
ANR	1058161	PrimaryExpression	0		1056898	2					
ANR	1058162	ExpressionStatement	"p = strtok ( NULL , "" "" )"	927:4:25384:25406	1056898	5	True				
ANR	1058163	AssignmentExpression	"p = strtok ( NULL , "" "" )"		1056898	0		=			
ANR	1058164	Identifier	p		1056898	0					
ANR	1058165	CallExpression	"strtok ( NULL , "" "" )"		1056898	1					
ANR	1058166	Callee	strtok		1056898	0					
ANR	1058167	Identifier	strtok		1056898	0					
ANR	1058168	ArgumentList	NULL		1056898	1					
ANR	1058169	Argument	NULL		1056898	0					
ANR	1058170	Identifier	NULL		1056898	0					
ANR	1058171	Argument	""" """		1056898	1					
ANR	1058172	PrimaryExpression	""" """		1056898	0					
ANR	1058173	ExpressionStatement	"b_size = p && * p ? r_num_math ( core -> num , p ) : 0"	928:4:25412:25460	1056898	6	True				
ANR	1058174	AssignmentExpression	"b_size = p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	0		=			
ANR	1058175	Identifier	b_size		1056898	0					
ANR	1058176	ConditionalExpression	"p && * p ? r_num_math ( core -> num , p ) : 0"		1056898	1					
ANR	1058177	Condition	p && * p		1056898	0					
ANR	1058178	AndExpression	p && * p		1056898	0		&&			
ANR	1058179	Identifier	p		1056898	0					
ANR	1058180	UnaryOperationExpression	* p		1056898	1					
ANR	1058181	UnaryOperator	*		1056898	0					
ANR	1058182	Identifier	p		1056898	1					
ANR	1058183	CallExpression	"r_num_math ( core -> num , p )"		1056898	1					
ANR	1058184	Callee	r_num_math		1056898	0					
ANR	1058185	Identifier	r_num_math		1056898	0					
ANR	1058186	ArgumentList	core -> num		1056898	1					
ANR	1058187	Argument	core -> num		1056898	0					
ANR	1058188	PtrMemberAccess	core -> num		1056898	0					
ANR	1058189	Identifier	core		1056898	0					
ANR	1058190	Identifier	num		1056898	1					
ANR	1058191	Argument	p		1056898	1					
ANR	1058192	Identifier	p		1056898	0					
ANR	1058193	PrimaryExpression	0		1056898	2					
ANR	1058194	IfStatement	if ( dist != 0 )		1056898	7					
ANR	1058195	Condition	dist != 0	929:8:25470:25478	1056898	0	True				
ANR	1058196	EqualityExpression	dist != 0		1056898	0		!=			
ANR	1058197	Identifier	dist		1056898	0					
ANR	1058198	PrimaryExpression	0		1056898	1					
ANR	1058199	CompoundStatement		219:18:4913:4913	1056898	1					
ANR	1058200	ExpressionStatement	"r_core_shift_block ( core , addr , b_size , dist )"	930:5:25487:25532	1056898	0	True				
ANR	1058201	CallExpression	"r_core_shift_block ( core , addr , b_size , dist )"		1056898	0					
ANR	1058202	Callee	r_core_shift_block		1056898	0					
ANR	1058203	Identifier	r_core_shift_block		1056898	0					
ANR	1058204	ArgumentList	core		1056898	1					
ANR	1058205	Argument	core		1056898	0					
ANR	1058206	Identifier	core		1056898	0					
ANR	1058207	Argument	addr		1056898	1					
ANR	1058208	Identifier	addr		1056898	0					
ANR	1058209	Argument	b_size		1056898	2					
ANR	1058210	Identifier	b_size		1056898	0					
ANR	1058211	Argument	dist		1056898	3					
ANR	1058212	Identifier	dist		1056898	0					
ANR	1058213	ExpressionStatement	"r_core_seek ( core , addr , 1 )"	931:5:25539:25566	1056898	1	True				
ANR	1058214	CallExpression	"r_core_seek ( core , addr , 1 )"		1056898	0					
ANR	1058215	Callee	r_core_seek		1056898	0					
ANR	1058216	Identifier	r_core_seek		1056898	0					
ANR	1058217	ArgumentList	core		1056898	1					
ANR	1058218	Argument	core		1056898	0					
ANR	1058219	Identifier	core		1056898	0					
ANR	1058220	Argument	addr		1056898	1					
ANR	1058221	Identifier	addr		1056898	0					
ANR	1058222	Argument	1		1056898	2					
ANR	1058223	PrimaryExpression	1		1056898	0					
ANR	1058224	ExpressionStatement	cmd_suc = true	932:5:25573:25587	1056898	2	True				
ANR	1058225	AssignmentExpression	cmd_suc = true		1056898	0		=			
ANR	1058226	Identifier	cmd_suc		1056898	0					
ANR	1058227	Identifier	true		1056898	1					
ANR	1058228	ExpressionStatement	free ( input_shadow )	935:3:25603:25622	1056898	14	True				
ANR	1058229	CallExpression	free ( input_shadow )		1056898	0					
ANR	1058230	Callee	free		1056898	0					
ANR	1058231	Identifier	free		1056898	0					
ANR	1058232	ArgumentList	input_shadow		1056898	1					
ANR	1058233	Argument	input_shadow		1056898	0					
ANR	1058234	Identifier	input_shadow		1056898	0					
ANR	1058235	BreakStatement	break ;	936:3:25627:25632	1056898	15	True				
ANR	1058236	Label	case 'X' :	937:2:25636:25644	1056898	16	True				
ANR	1058237	IfStatement	if ( input [ 2 ] == ' ' )		1056898	17					
ANR	1058238	Condition	input [ 2 ] == ' '	938:7:25662:25676	1056898	0	True				
ANR	1058239	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1058240	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1058241	Identifier	input		1056898	0					
ANR	1058242	PrimaryExpression	2		1056898	1					
ANR	1058243	PrimaryExpression	' '		1056898	1					
ANR	1058244	CompoundStatement		228:24:5112:5112	1056898	1					
ANR	1058245	ExpressionStatement	"addr = r_num_math ( core -> num , input + 3 )"	939:4:25685:25723	1056898	0	True				
ANR	1058246	AssignmentExpression	"addr = r_num_math ( core -> num , input + 3 )"		1056898	0		=			
ANR	1058247	Identifier	addr		1056898	0					
ANR	1058248	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1058249	Callee	r_num_math		1056898	0					
ANR	1058250	Identifier	r_num_math		1056898	0					
ANR	1058251	ArgumentList	core -> num		1056898	1					
ANR	1058252	Argument	core -> num		1056898	0					
ANR	1058253	PtrMemberAccess	core -> num		1056898	0					
ANR	1058254	Identifier	core		1056898	0					
ANR	1058255	Identifier	num		1056898	1					
ANR	1058256	Argument	input + 3		1056898	1					
ANR	1058257	AdditiveExpression	input + 3		1056898	0		+			
ANR	1058258	Identifier	input		1056898	0					
ANR	1058259	PrimaryExpression	3		1056898	1					
ANR	1058260	ExpressionStatement	input += 3	940:4:25729:25739	1056898	1	True				
ANR	1058261	AssignmentExpression	input += 3		1056898	0		+=			
ANR	1058262	Identifier	input		1056898	0					
ANR	1058263	PrimaryExpression	3		1056898	1					
ANR	1058264	WhileStatement	while ( * input && * input != ' ' )		1056898	2					
ANR	1058265	Condition	* input && * input != ' '	941:11:25752:25774	1056898	0	True				
ANR	1058266	AndExpression	* input && * input != ' '		1056898	0		&&			
ANR	1058267	UnaryOperationExpression	* input		1056898	0					
ANR	1058268	UnaryOperator	*		1056898	0					
ANR	1058269	Identifier	input		1056898	1					
ANR	1058270	EqualityExpression	* input != ' '		1056898	1		!=			
ANR	1058271	UnaryOperationExpression	* input		1056898	0					
ANR	1058272	UnaryOperator	*		1056898	0					
ANR	1058273	Identifier	input		1056898	1					
ANR	1058274	PrimaryExpression	' '		1056898	1					
ANR	1058275	ExpressionStatement	input ++	941:36:25777:25784	1056898	1	True				
ANR	1058276	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1058277	Identifier	input		1056898	0					
ANR	1058278	IncDec	++		1056898	1					
ANR	1058279	ExpressionStatement	input ++	942:4:25790:25797	1056898	3	True				
ANR	1058280	PostIncDecOperationExpression	input ++		1056898	0					
ANR	1058281	Identifier	input		1056898	0					
ANR	1058282	IncDec	++		1056898	1					
ANR	1058283	ExpressionStatement	len = * input ? strlen ( input ) : 0	943:4:25803:25836	1056898	4	True				
ANR	1058284	AssignmentExpression	len = * input ? strlen ( input ) : 0		1056898	0		=			
ANR	1058285	Identifier	len		1056898	0					
ANR	1058286	ConditionalExpression	* input ? strlen ( input ) : 0		1056898	1					
ANR	1058287	Condition	* input		1056898	0					
ANR	1058288	UnaryOperationExpression	* input		1056898	0					
ANR	1058289	UnaryOperator	*		1056898	0					
ANR	1058290	Identifier	input		1056898	1					
ANR	1058291	CallExpression	strlen ( input )		1056898	1					
ANR	1058292	Callee	strlen		1056898	0					
ANR	1058293	Identifier	strlen		1056898	0					
ANR	1058294	ArgumentList	input		1056898	1					
ANR	1058295	Argument	input		1056898	0					
ANR	1058296	Identifier	input		1056898	0					
ANR	1058297	PrimaryExpression	0		1056898	2					
ANR	1058298	ExpressionStatement	bytes = len > 1 ? malloc ( len + 1 ) : NULL	944:4:25842:25880	1056898	5	True				
ANR	1058299	AssignmentExpression	bytes = len > 1 ? malloc ( len + 1 ) : NULL		1056898	0		=			
ANR	1058300	Identifier	bytes		1056898	0					
ANR	1058301	ConditionalExpression	len > 1 ? malloc ( len + 1 ) : NULL		1056898	1					
ANR	1058302	Condition	len > 1		1056898	0					
ANR	1058303	RelationalExpression	len > 1		1056898	0		>			
ANR	1058304	Identifier	len		1056898	0					
ANR	1058305	PrimaryExpression	1		1056898	1					
ANR	1058306	CallExpression	malloc ( len + 1 )		1056898	1					
ANR	1058307	Callee	malloc		1056898	0					
ANR	1058308	Identifier	malloc		1056898	0					
ANR	1058309	ArgumentList	len + 1		1056898	1					
ANR	1058310	Argument	len + 1		1056898	0					
ANR	1058311	AdditiveExpression	len + 1		1056898	0		+			
ANR	1058312	Identifier	len		1056898	0					
ANR	1058313	PrimaryExpression	1		1056898	1					
ANR	1058314	Identifier	NULL		1056898	2					
ANR	1058315	ExpressionStatement	"len = bytes ? r_hex_str2bin ( input , bytes ) : 0"	945:4:25886:25932	1056898	6	True				
ANR	1058316	AssignmentExpression	"len = bytes ? r_hex_str2bin ( input , bytes ) : 0"		1056898	0		=			
ANR	1058317	Identifier	len		1056898	0					
ANR	1058318	ConditionalExpression	"bytes ? r_hex_str2bin ( input , bytes ) : 0"		1056898	1					
ANR	1058319	Condition	bytes		1056898	0					
ANR	1058320	Identifier	bytes		1056898	0					
ANR	1058321	CallExpression	"r_hex_str2bin ( input , bytes )"		1056898	1					
ANR	1058322	Callee	r_hex_str2bin		1056898	0					
ANR	1058323	Identifier	r_hex_str2bin		1056898	0					
ANR	1058324	ArgumentList	input		1056898	1					
ANR	1058325	Argument	input		1056898	0					
ANR	1058326	Identifier	input		1056898	0					
ANR	1058327	Argument	bytes		1056898	1					
ANR	1058328	Identifier	bytes		1056898	0					
ANR	1058329	PrimaryExpression	0		1056898	2					
ANR	1058330	IfStatement	if ( len > 0 )		1056898	7					
ANR	1058331	Condition	len > 0	946:8:25942:25948	1056898	0	True				
ANR	1058332	RelationalExpression	len > 0		1056898	0		>			
ANR	1058333	Identifier	len		1056898	0					
ANR	1058334	PrimaryExpression	0		1056898	1					
ANR	1058335	CompoundStatement		236:17:5384:5384	1056898	1					
ANR	1058336	ExpressionStatement	"cmd_suc = r_core_extend_at ( core , addr , len )"	948:5:25994:26038	1056898	0	True				
ANR	1058337	AssignmentExpression	"cmd_suc = r_core_extend_at ( core , addr , len )"		1056898	0		=			
ANR	1058338	Identifier	cmd_suc		1056898	0					
ANR	1058339	CallExpression	"r_core_extend_at ( core , addr , len )"		1056898	1					
ANR	1058340	Callee	r_core_extend_at		1056898	0					
ANR	1058341	Identifier	r_core_extend_at		1056898	0					
ANR	1058342	ArgumentList	core		1056898	1					
ANR	1058343	Argument	core		1056898	0					
ANR	1058344	Identifier	core		1056898	0					
ANR	1058345	Argument	addr		1056898	1					
ANR	1058346	Identifier	addr		1056898	0					
ANR	1058347	Argument	len		1056898	2					
ANR	1058348	Identifier	len		1056898	0					
ANR	1058349	IfStatement	if ( cmd_suc )		1056898	1					
ANR	1058350	Condition	cmd_suc	949:9:26049:26055	1056898	0	True				
ANR	1058351	Identifier	cmd_suc		1056898	0					
ANR	1058352	CompoundStatement		239:18:5491:5491	1056898	1					
ANR	1058353	ExpressionStatement	"r_core_write_at ( core , addr , bytes , len )"	950:6:26066:26106	1056898	0	True				
ANR	1058354	CallExpression	"r_core_write_at ( core , addr , bytes , len )"		1056898	0					
ANR	1058355	Callee	r_core_write_at		1056898	0					
ANR	1058356	Identifier	r_core_write_at		1056898	0					
ANR	1058357	ArgumentList	core		1056898	1					
ANR	1058358	Argument	core		1056898	0					
ANR	1058359	Identifier	core		1056898	0					
ANR	1058360	Argument	addr		1056898	1					
ANR	1058361	Identifier	addr		1056898	0					
ANR	1058362	Argument	bytes		1056898	2					
ANR	1058363	Identifier	bytes		1056898	0					
ANR	1058364	Argument	len		1056898	3					
ANR	1058365	Identifier	len		1056898	0					
ANR	1058366	ExpressionStatement	core -> offset = addr	952:5:26120:26139	1056898	2	True				
ANR	1058367	AssignmentExpression	core -> offset = addr		1056898	0		=			
ANR	1058368	PtrMemberAccess	core -> offset		1056898	0					
ANR	1058369	Identifier	core		1056898	0					
ANR	1058370	Identifier	offset		1056898	1					
ANR	1058371	Identifier	addr		1056898	1					
ANR	1058372	ExpressionStatement	r_core_block_read ( core )	953:5:26146:26170	1056898	3	True				
ANR	1058373	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1058374	Callee	r_core_block_read		1056898	0					
ANR	1058375	Identifier	r_core_block_read		1056898	0					
ANR	1058376	ArgumentList	core		1056898	1					
ANR	1058377	Argument	core		1056898	0					
ANR	1058378	Identifier	core		1056898	0					
ANR	1058379	ExpressionStatement	free ( bytes )	955:4:26182:26194	1056898	8	True				
ANR	1058380	CallExpression	free ( bytes )		1056898	0					
ANR	1058381	Callee	free		1056898	0					
ANR	1058382	Identifier	free		1056898	0					
ANR	1058383	ArgumentList	bytes		1056898	1					
ANR	1058384	Argument	bytes		1056898	0					
ANR	1058385	Identifier	bytes		1056898	0					
ANR	1058386	BreakStatement	break ;	957:3:26204:26209	1056898	18	True				
ANR	1058387	Label	case '?' :	958:2:26213:26221	1056898	19	True				
ANR	1058388	Label	default :	959:2:26234:26241	1056898	20	True				
ANR	1058389	Identifier	default		1056898	0					
ANR	1058390	ExpressionStatement	cmd_suc = false	960:3:26246:26261	1056898	21	True				
ANR	1058391	AssignmentExpression	cmd_suc = false		1056898	0		=			
ANR	1058392	Identifier	cmd_suc		1056898	0					
ANR	1058393	Identifier	false		1056898	1					
ANR	1058394	BreakStatement	break ;	961:3:26266:26271	1056898	22	True				
ANR	1058395	IfStatement	if ( cmd_suc == false )		1056898	6					
ANR	1058396	Condition	cmd_suc == false	963:6:26283:26298	1056898	0	True				
ANR	1058397	EqualityExpression	cmd_suc == false		1056898	0		==			
ANR	1058398	Identifier	cmd_suc		1056898	0					
ANR	1058399	Identifier	false		1056898	1					
ANR	1058400	CompoundStatement		253:24:5734:5734	1056898	1					
ANR	1058401	ExpressionStatement	"r_core_cmd_help ( core , help_msg_we )"	964:3:26306:26341	1056898	0	True				
ANR	1058402	CallExpression	"r_core_cmd_help ( core , help_msg_we )"		1056898	0					
ANR	1058403	Callee	r_core_cmd_help		1056898	0					
ANR	1058404	Identifier	r_core_cmd_help		1056898	0					
ANR	1058405	ArgumentList	core		1056898	1					
ANR	1058406	Argument	core		1056898	0					
ANR	1058407	Identifier	core		1056898	0					
ANR	1058408	Argument	help_msg_we		1056898	1					
ANR	1058409	Identifier	help_msg_we		1056898	0					
ANR	1058410	BreakStatement	break ;	967:2:26353:26358	1056898	20	True				
ANR	1058411	Label	case 'p' :	968:1:26361:26369	1056898	21	True				
ANR	1058412	IfStatement	if ( input [ 1 ] == '-' || ( input [ 1 ] == ' ' && input [ 2 ] == '-' ) )		1056898	22					
ANR	1058413	Condition	input [ 1 ] == '-' || ( input [ 1 ] == ' ' && input [ 2 ] == '-' )	969:6:26385:26433	1056898	0	True				
ANR	1058414	OrExpression	input [ 1 ] == '-' || ( input [ 1 ] == ' ' && input [ 2 ] == '-' )		1056898	0		||			
ANR	1058415	EqualityExpression	input [ 1 ] == '-'		1056898	0		==			
ANR	1058416	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1058417	Identifier	input		1056898	0					
ANR	1058418	PrimaryExpression	1		1056898	1					
ANR	1058419	PrimaryExpression	'-'		1056898	1					
ANR	1058420	AndExpression	input [ 1 ] == ' ' && input [ 2 ] == '-'		1056898	1		&&			
ANR	1058421	EqualityExpression	input [ 1 ] == ' '		1056898	0		==			
ANR	1058422	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1058423	Identifier	input		1056898	0					
ANR	1058424	PrimaryExpression	1		1056898	1					
ANR	1058425	PrimaryExpression	' '		1056898	1					
ANR	1058426	EqualityExpression	input [ 2 ] == '-'		1056898	1		==			
ANR	1058427	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1058428	Identifier	input		1056898	0					
ANR	1058429	PrimaryExpression	2		1056898	1					
ANR	1058430	PrimaryExpression	'-'		1056898	1					
ANR	1058431	CompoundStatement		260:3:5874:5918	1056898	1					
ANR	1058432	IdentifierDeclStatement	"char * out = r_core_editor ( core , NULL , NULL ) ;"	970:3:26441:26485	1056898	0	True				
ANR	1058433	IdentifierDecl	"* out = r_core_editor ( core , NULL , NULL )"		1056898	0					
ANR	1058434	IdentifierDeclType	char *		1056898	0					
ANR	1058435	Identifier	out		1056898	1					
ANR	1058436	AssignmentExpression	"* out = r_core_editor ( core , NULL , NULL )"		1056898	2		=			
ANR	1058437	Identifier	out		1056898	0					
ANR	1058438	CallExpression	"r_core_editor ( core , NULL , NULL )"		1056898	1					
ANR	1058439	Callee	r_core_editor		1056898	0					
ANR	1058440	Identifier	r_core_editor		1056898	0					
ANR	1058441	ArgumentList	core		1056898	1					
ANR	1058442	Argument	core		1056898	0					
ANR	1058443	Identifier	core		1056898	0					
ANR	1058444	Argument	NULL		1056898	1					
ANR	1058445	Identifier	NULL		1056898	0					
ANR	1058446	Argument	NULL		1056898	2					
ANR	1058447	Identifier	NULL		1056898	0					
ANR	1058448	IfStatement	if ( out )		1056898	1					
ANR	1058449	Condition	out	971:7:26494:26496	1056898	0	True				
ANR	1058450	Identifier	out		1056898	0					
ANR	1058451	CompoundStatement		261:12:5932:5932	1056898	1					
ANR	1058452	ExpressionStatement	"r_core_patch ( core , out )"	972:4:26505:26529	1056898	0	True				
ANR	1058453	CallExpression	"r_core_patch ( core , out )"		1056898	0					
ANR	1058454	Callee	r_core_patch		1056898	0					
ANR	1058455	Identifier	r_core_patch		1056898	0					
ANR	1058456	ArgumentList	core		1056898	1					
ANR	1058457	Argument	core		1056898	0					
ANR	1058458	Identifier	core		1056898	0					
ANR	1058459	Argument	out		1056898	1					
ANR	1058460	Identifier	out		1056898	0					
ANR	1058461	ExpressionStatement	free ( out )	973:4:26535:26545	1056898	1	True				
ANR	1058462	CallExpression	free ( out )		1056898	0					
ANR	1058463	Callee	free		1056898	0					
ANR	1058464	Identifier	free		1056898	0					
ANR	1058465	ArgumentList	out		1056898	1					
ANR	1058466	Argument	out		1056898	0					
ANR	1058467	Identifier	out		1056898	0					
ANR	1058468	ElseStatement	else		1056898	0					
ANR	1058469	CompoundStatement		265:9:5994:5994	1056898	0					
ANR	1058470	IfStatement	if ( input [ 1 ] == ' ' && input [ 2 ] )		1056898	0					
ANR	1058471	Condition	input [ 1 ] == ' ' && input [ 2 ]	976:7:26570:26594	1056898	0	True				
ANR	1058472	AndExpression	input [ 1 ] == ' ' && input [ 2 ]		1056898	0		&&			
ANR	1058473	EqualityExpression	input [ 1 ] == ' '		1056898	0		==			
ANR	1058474	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1058475	Identifier	input		1056898	0					
ANR	1058476	PrimaryExpression	1		1056898	1					
ANR	1058477	PrimaryExpression	' '		1056898	1					
ANR	1058478	ArrayIndexing	input [ 2 ]		1056898	1					
ANR	1058479	Identifier	input		1056898	0					
ANR	1058480	PrimaryExpression	2		1056898	1					
ANR	1058481	CompoundStatement		267:4:6036:6077	1056898	1					
ANR	1058482	IdentifierDeclStatement	"char * data = r_file_slurp ( input + 2 , NULL ) ;"	977:4:26603:26644	1056898	0	True				
ANR	1058483	IdentifierDecl	"* data = r_file_slurp ( input + 2 , NULL )"		1056898	0					
ANR	1058484	IdentifierDeclType	char *		1056898	0					
ANR	1058485	Identifier	data		1056898	1					
ANR	1058486	AssignmentExpression	"* data = r_file_slurp ( input + 2 , NULL )"		1056898	2		=			
ANR	1058487	Identifier	data		1056898	0					
ANR	1058488	CallExpression	"r_file_slurp ( input + 2 , NULL )"		1056898	1					
ANR	1058489	Callee	r_file_slurp		1056898	0					
ANR	1058490	Identifier	r_file_slurp		1056898	0					
ANR	1058491	ArgumentList	input + 2		1056898	1					
ANR	1058492	Argument	input + 2		1056898	0					
ANR	1058493	AdditiveExpression	input + 2		1056898	0		+			
ANR	1058494	Identifier	input		1056898	0					
ANR	1058495	PrimaryExpression	2		1056898	1					
ANR	1058496	Argument	NULL		1056898	1					
ANR	1058497	Identifier	NULL		1056898	0					
ANR	1058498	IfStatement	if ( data )		1056898	1					
ANR	1058499	Condition	data	978:8:26654:26657	1056898	0	True				
ANR	1058500	Identifier	data		1056898	0					
ANR	1058501	CompoundStatement		268:14:6093:6093	1056898	1					
ANR	1058502	ExpressionStatement	"r_core_patch ( core , data )"	979:5:26667:26692	1056898	0	True				
ANR	1058503	CallExpression	"r_core_patch ( core , data )"		1056898	0					
ANR	1058504	Callee	r_core_patch		1056898	0					
ANR	1058505	Identifier	r_core_patch		1056898	0					
ANR	1058506	ArgumentList	core		1056898	1					
ANR	1058507	Argument	core		1056898	0					
ANR	1058508	Identifier	core		1056898	0					
ANR	1058509	Argument	data		1056898	1					
ANR	1058510	Identifier	data		1056898	0					
ANR	1058511	ExpressionStatement	free ( data )	980:5:26699:26710	1056898	1	True				
ANR	1058512	CallExpression	free ( data )		1056898	0					
ANR	1058513	Callee	free		1056898	0					
ANR	1058514	Identifier	free		1056898	0					
ANR	1058515	ArgumentList	data		1056898	1					
ANR	1058516	Argument	data		1056898	0					
ANR	1058517	Identifier	data		1056898	0					
ANR	1058518	ElseStatement	else		1056898	0					
ANR	1058519	CompoundStatement		272:10:6161:6161	1056898	0					
ANR	1058520	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wp )"	983:4:26734:26769	1056898	0	True				
ANR	1058521	CallExpression	"r_core_cmd_help ( core , help_msg_wp )"		1056898	0					
ANR	1058522	Callee	r_core_cmd_help		1056898	0					
ANR	1058523	Identifier	r_core_cmd_help		1056898	0					
ANR	1058524	ArgumentList	core		1056898	1					
ANR	1058525	Argument	core		1056898	0					
ANR	1058526	Identifier	core		1056898	0					
ANR	1058527	Argument	help_msg_wp		1056898	1					
ANR	1058528	Identifier	help_msg_wp		1056898	0					
ANR	1058529	BreakStatement	break ;	986:2:26782:26787	1056898	23	True				
ANR	1058530	Label	case 'u' :	987:1:26790:26798	1056898	24	True				
ANR	1058531	IfStatement	if ( input [ 1 ] == ' ' )		1056898	25					
ANR	1058532	Condition	input [ 1 ] == ' '	989:6:26891:26903	1056898	0	True				
ANR	1058533	EqualityExpression	input [ 1 ] == ' '		1056898	0		==			
ANR	1058534	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1058535	Identifier	input		1056898	0					
ANR	1058536	PrimaryExpression	1		1056898	1					
ANR	1058537	PrimaryExpression	' '		1056898	1					
ANR	1058538	CompoundStatement		280:3:6344:6385	1056898	1					
ANR	1058539	IdentifierDeclStatement	"char * data = r_file_slurp ( input + 2 , NULL ) ;"	990:3:26911:26952	1056898	0	True				
ANR	1058540	IdentifierDecl	"* data = r_file_slurp ( input + 2 , NULL )"		1056898	0					
ANR	1058541	IdentifierDeclType	char *		1056898	0					
ANR	1058542	Identifier	data		1056898	1					
ANR	1058543	AssignmentExpression	"* data = r_file_slurp ( input + 2 , NULL )"		1056898	2		=			
ANR	1058544	Identifier	data		1056898	0					
ANR	1058545	CallExpression	"r_file_slurp ( input + 2 , NULL )"		1056898	1					
ANR	1058546	Callee	r_file_slurp		1056898	0					
ANR	1058547	Identifier	r_file_slurp		1056898	0					
ANR	1058548	ArgumentList	input + 2		1056898	1					
ANR	1058549	Argument	input + 2		1056898	0					
ANR	1058550	AdditiveExpression	input + 2		1056898	0		+			
ANR	1058551	Identifier	input		1056898	0					
ANR	1058552	PrimaryExpression	2		1056898	1					
ANR	1058553	Argument	NULL		1056898	1					
ANR	1058554	Identifier	NULL		1056898	0					
ANR	1058555	IfStatement	if ( data )		1056898	1					
ANR	1058556	Condition	data	991:7:26961:26964	1056898	0	True				
ANR	1058557	Identifier	data		1056898	0					
ANR	1058558	CompoundStatement		284:4:6465:6480	1056898	1					
ANR	1058559	IdentifierDeclStatement	char sign = ' ' ;	992:4:26973:26988	1056898	0	True				
ANR	1058560	IdentifierDecl	sign = ' '		1056898	0					
ANR	1058561	IdentifierDeclType	char		1056898	0					
ANR	1058562	Identifier	sign		1056898	1					
ANR	1058563	AssignmentExpression	sign = ' '		1056898	2		=			
ANR	1058564	Identifier	sign		1056898	0					
ANR	1058565	PrimaryExpression	' '		1056898	1					
ANR	1058566	IdentifierDeclStatement	"int line = 0 , offs = 0 , hexa = 0 ;"	993:4:26994:27026	1056898	1	True				
ANR	1058567	IdentifierDecl	line = 0		1056898	0					
ANR	1058568	IdentifierDeclType	int		1056898	0					
ANR	1058569	Identifier	line		1056898	1					
ANR	1058570	AssignmentExpression	line = 0		1056898	2		=			
ANR	1058571	Identifier	line		1056898	0					
ANR	1058572	PrimaryExpression	0		1056898	1					
ANR	1058573	IdentifierDecl	offs = 0		1056898	1					
ANR	1058574	IdentifierDeclType	int		1056898	0					
ANR	1058575	Identifier	offs		1056898	1					
ANR	1058576	AssignmentExpression	offs = 0		1056898	2		=			
ANR	1058577	Identifier	offs		1056898	0					
ANR	1058578	PrimaryExpression	0		1056898	1					
ANR	1058579	IdentifierDecl	hexa = 0		1056898	2					
ANR	1058580	IdentifierDeclType	int		1056898	0					
ANR	1058581	Identifier	hexa		1056898	1					
ANR	1058582	AssignmentExpression	hexa = 0		1056898	2		=			
ANR	1058583	Identifier	hexa		1056898	0					
ANR	1058584	PrimaryExpression	0		1056898	1					
ANR	1058585	IdentifierDeclStatement	int newline = 1 ;	994:4:27032:27047	1056898	2	True				
ANR	1058586	IdentifierDecl	newline = 1		1056898	0					
ANR	1058587	IdentifierDeclType	int		1056898	0					
ANR	1058588	Identifier	newline		1056898	1					
ANR	1058589	AssignmentExpression	newline = 1		1056898	2		=			
ANR	1058590	Identifier	newline		1056898	0					
ANR	1058591	PrimaryExpression	1		1056898	1					
ANR	1058592	ForStatement	for ( i = 0 ; data [ i ] ; i ++ )		1056898	3					
ANR	1058593	ForInit	i = 0 ;	995:9:27058:27061	1056898	0	True				
ANR	1058594	AssignmentExpression	i = 0		1056898	0		=			
ANR	1058595	Identifier	i		1056898	0					
ANR	1058596	PrimaryExpression	0		1056898	1					
ANR	1058597	Condition	data [ i ]	995:14:27063:27069	1056898	1	True				
ANR	1058598	ArrayIndexing	data [ i ]		1056898	0					
ANR	1058599	Identifier	data		1056898	0					
ANR	1058600	Identifier	i		1056898	1					
ANR	1058601	PostIncDecOperationExpression	i ++	995:23:27072:27074	1056898	2	True				
ANR	1058602	Identifier	i		1056898	0					
ANR	1058603	IncDec	++		1056898	1					
ANR	1058604	CompoundStatement		285:28:6510:6510	1056898	3					
ANR	1058605	SwitchStatement	switch ( data [ i ] )		1056898	0					
ANR	1058606	Condition	data [ i ]	996:13:27092:27098	1056898	0	True				
ANR	1058607	ArrayIndexing	data [ i ]		1056898	0					
ANR	1058608	Identifier	data		1056898	0					
ANR	1058609	Identifier	i		1056898	1					
ANR	1058610	CompoundStatement		286:22:6534:6534	1056898	1					
ANR	1058611	Label	case '+' :	997:5:27108:27116	1056898	0	True				
ANR	1058612	IfStatement	if ( newline )		1056898	1					
ANR	1058613	Condition	newline	998:10:27128:27134	1056898	0	True				
ANR	1058614	Identifier	newline		1056898	0					
ANR	1058615	ExpressionStatement	sign = 1	999:7:27144:27152	1056898	1	True				
ANR	1058616	AssignmentExpression	sign = 1		1056898	0		=			
ANR	1058617	Identifier	sign		1056898	0					
ANR	1058618	PrimaryExpression	1		1056898	1					
ANR	1058619	BreakStatement	break ;	1000:6:27160:27165	1056898	2	True				
ANR	1058620	Label	case '-' :	1001:5:27172:27180	1056898	3	True				
ANR	1058621	IfStatement	if ( newline )		1056898	4					
ANR	1058622	Condition	newline	1002:10:27192:27198	1056898	0	True				
ANR	1058623	Identifier	newline		1056898	0					
ANR	1058624	CompoundStatement		292:19:6634:6634	1056898	1					
ANR	1058625	ExpressionStatement	sign = 0	1003:7:27210:27218	1056898	0	True				
ANR	1058626	AssignmentExpression	sign = 0		1056898	0		=			
ANR	1058627	Identifier	sign		1056898	0					
ANR	1058628	PrimaryExpression	0		1056898	1					
ANR	1058629	ExpressionStatement	offs = i + ( ( data [ i + 1 ] == ' ' ) ? 2 : 1 )	1004:7:27227:27260	1056898	1	True				
ANR	1058630	AssignmentExpression	offs = i + ( ( data [ i + 1 ] == ' ' ) ? 2 : 1 )		1056898	0		=			
ANR	1058631	Identifier	offs		1056898	0					
ANR	1058632	AdditiveExpression	i + ( ( data [ i + 1 ] == ' ' ) ? 2 : 1 )		1056898	1		+			
ANR	1058633	Identifier	i		1056898	0					
ANR	1058634	ConditionalExpression	( data [ i + 1 ] == ' ' ) ? 2 : 1		1056898	1					
ANR	1058635	Condition	data [ i + 1 ] == ' '		1056898	0					
ANR	1058636	EqualityExpression	data [ i + 1 ] == ' '		1056898	0		==			
ANR	1058637	ArrayIndexing	data [ i + 1 ]		1056898	0					
ANR	1058638	Identifier	data		1056898	0					
ANR	1058639	AdditiveExpression	i + 1		1056898	1		+			
ANR	1058640	Identifier	i		1056898	0					
ANR	1058641	PrimaryExpression	1		1056898	1					
ANR	1058642	PrimaryExpression	' '		1056898	1					
ANR	1058643	PrimaryExpression	2		1056898	1					
ANR	1058644	PrimaryExpression	1		1056898	2					
ANR	1058645	BreakStatement	break ;	1006:6:27276:27281	1056898	5	True				
ANR	1058646	Label	case ' ' :	1007:5:27288:27296	1056898	6	True				
ANR	1058647	ExpressionStatement	data [ i ] = 0	1008:6:27304:27315	1056898	7	True				
ANR	1058648	AssignmentExpression	data [ i ] = 0		1056898	0		=			
ANR	1058649	ArrayIndexing	data [ i ]		1056898	0					
ANR	1058650	Identifier	data		1056898	0					
ANR	1058651	Identifier	i		1056898	1					
ANR	1058652	PrimaryExpression	0		1056898	1					
ANR	1058653	IfStatement	if ( sign )		1056898	8					
ANR	1058654	Condition	sign	1009:10:27327:27330	1056898	0	True				
ANR	1058655	Identifier	sign		1056898	0					
ANR	1058656	CompoundStatement		299:16:6766:6766	1056898	1					
ANR	1058657	IfStatement	if ( ! line )		1056898	0					
ANR	1058658	Condition	! line	1010:11:27346:27350	1056898	0	True				
ANR	1058659	UnaryOperationExpression	! line		1056898	0					
ANR	1058660	UnaryOperator	!		1056898	0					
ANR	1058661	Identifier	line		1056898	1					
ANR	1058662	ExpressionStatement	line = i + 1	1010:18:27353:27363	1056898	1	True				
ANR	1058663	AssignmentExpression	line = i + 1		1056898	0		=			
ANR	1058664	Identifier	line		1056898	0					
ANR	1058665	AdditiveExpression	i + 1		1056898	1		+			
ANR	1058666	Identifier	i		1056898	0					
ANR	1058667	PrimaryExpression	1		1056898	1					
ANR	1058668	ElseStatement	else		1056898	0					
ANR	1058669	IfStatement	if ( ! hexa )		1056898	0					
ANR	1058670	Condition	! hexa	1012:11:27388:27392	1056898	0	True				
ANR	1058671	UnaryOperationExpression	! hexa		1056898	0					
ANR	1058672	UnaryOperator	!		1056898	0					
ANR	1058673	Identifier	hexa		1056898	1					
ANR	1058674	ExpressionStatement	hexa = i + 1	1012:18:27395:27405	1056898	1	True				
ANR	1058675	AssignmentExpression	hexa = i + 1		1056898	0		=			
ANR	1058676	Identifier	hexa		1056898	0					
ANR	1058677	AdditiveExpression	i + 1		1056898	1		+			
ANR	1058678	Identifier	i		1056898	0					
ANR	1058679	PrimaryExpression	1		1056898	1					
ANR	1058680	BreakStatement	break ;	1014:6:27421:27426	1056898	9	True				
ANR	1058681	Label	case '\\r' :	1015:5:27433:27442	1056898	10	True				
ANR	1058682	BreakStatement	break ;	1016:6:27450:27455	1056898	11	True				
ANR	1058683	Label	case '\\n' :	1017:5:27462:27471	1056898	12	True				
ANR	1058684	ExpressionStatement	newline = 1	1018:6:27479:27490	1056898	13	True				
ANR	1058685	AssignmentExpression	newline = 1		1056898	0		=			
ANR	1058686	Identifier	newline		1056898	0					
ANR	1058687	PrimaryExpression	1		1056898	1					
ANR	1058688	IfStatement	if ( sign == ' ' )		1056898	14					
ANR	1058689	Condition	sign == ' '	1019:10:27502:27512	1056898	0	True				
ANR	1058690	EqualityExpression	sign == ' '		1056898	0		==			
ANR	1058691	Identifier	sign		1056898	0					
ANR	1058692	PrimaryExpression	' '		1056898	1					
ANR	1058693	CompoundStatement		309:23:6948:6948	1056898	1					
ANR	1058694	ExpressionStatement	offs = 0	1020:7:27524:27532	1056898	0	True				
ANR	1058695	AssignmentExpression	offs = 0		1056898	0		=			
ANR	1058696	Identifier	offs		1056898	0					
ANR	1058697	PrimaryExpression	0		1056898	1					
ANR	1058698	ExpressionStatement	line = 0	1021:7:27541:27549	1056898	1	True				
ANR	1058699	AssignmentExpression	line = 0		1056898	0		=			
ANR	1058700	Identifier	line		1056898	0					
ANR	1058701	PrimaryExpression	0		1056898	1					
ANR	1058702	ExpressionStatement	hexa = 0	1022:7:27558:27566	1056898	2	True				
ANR	1058703	AssignmentExpression	hexa = 0		1056898	0		=			
ANR	1058704	Identifier	hexa		1056898	0					
ANR	1058705	PrimaryExpression	0		1056898	1					
ANR	1058706	ElseStatement	else		1056898	0					
ANR	1058707	IfStatement	if ( sign )		1056898	0					
ANR	1058708	Condition	sign	1023:17:27585:27588	1056898	0	True				
ANR	1058709	Identifier	sign		1056898	0					
ANR	1058710	CompoundStatement		313:23:7024:7024	1056898	1					
ANR	1058711	IfStatement	if ( offs && hexa )		1056898	0					
ANR	1058712	Condition	offs && hexa	1024:11:27604:27615	1056898	0	True				
ANR	1058713	AndExpression	offs && hexa		1056898	0		&&			
ANR	1058714	Identifier	offs		1056898	0					
ANR	1058715	Identifier	hexa		1056898	1					
ANR	1058716	CompoundStatement		314:25:7051:7051	1056898	1					
ANR	1058717	ExpressionStatement	"r_cons_printf ( ""wx %s @ %s\\n"" , data + hexa , data + offs )"	1025:8:27628:27680	1056898	0	True				
ANR	1058718	CallExpression	"r_cons_printf ( ""wx %s @ %s\\n"" , data + hexa , data + offs )"		1056898	0					
ANR	1058719	Callee	r_cons_printf		1056898	0					
ANR	1058720	Identifier	r_cons_printf		1056898	0					
ANR	1058721	ArgumentList	"""wx %s @ %s\\n"""		1056898	1					
ANR	1058722	Argument	"""wx %s @ %s\\n"""		1056898	0					
ANR	1058723	PrimaryExpression	"""wx %s @ %s\\n"""		1056898	0					
ANR	1058724	Argument	data + hexa		1056898	1					
ANR	1058725	AdditiveExpression	data + hexa		1056898	0		+			
ANR	1058726	Identifier	data		1056898	0					
ANR	1058727	Identifier	hexa		1056898	1					
ANR	1058728	Argument	data + offs		1056898	2					
ANR	1058729	AdditiveExpression	data + offs		1056898	0		+			
ANR	1058730	Identifier	data		1056898	0					
ANR	1058731	Identifier	offs		1056898	1					
ANR	1058732	ElseStatement	else		1056898	0					
ANR	1058733	ExpressionStatement	"eprintf ( ""food\\n"" )"	1026:14:27696:27714	1056898	0	True				
ANR	1058734	CallExpression	"eprintf ( ""food\\n"" )"		1056898	0					
ANR	1058735	Callee	eprintf		1056898	0					
ANR	1058736	Identifier	eprintf		1056898	0					
ANR	1058737	ArgumentList	"""food\\n"""		1056898	1					
ANR	1058738	Argument	"""food\\n"""		1056898	0					
ANR	1058739	PrimaryExpression	"""food\\n"""		1056898	0					
ANR	1058740	ExpressionStatement	offs = 0	1027:7:27723:27731	1056898	1	True				
ANR	1058741	AssignmentExpression	offs = 0		1056898	0		=			
ANR	1058742	Identifier	offs		1056898	0					
ANR	1058743	PrimaryExpression	0		1056898	1					
ANR	1058744	ExpressionStatement	line = 0	1028:7:27740:27748	1056898	2	True				
ANR	1058745	AssignmentExpression	line = 0		1056898	0		=			
ANR	1058746	Identifier	line		1056898	0					
ANR	1058747	PrimaryExpression	0		1056898	1					
ANR	1058748	ElseStatement	else		1056898	0					
ANR	1058749	ExpressionStatement	hexa = 0	1029:13:27763:27771	1056898	0	True				
ANR	1058750	AssignmentExpression	hexa = 0		1056898	0		=			
ANR	1058751	Identifier	hexa		1056898	0					
ANR	1058752	PrimaryExpression	0		1056898	1					
ANR	1058753	ExpressionStatement	sign = - 1	1030:6:27779:27788	1056898	15	True				
ANR	1058754	AssignmentExpression	sign = - 1		1056898	0		=			
ANR	1058755	Identifier	sign		1056898	0					
ANR	1058756	UnaryOperationExpression	- 1		1056898	1					
ANR	1058757	UnaryOperator	-		1056898	0					
ANR	1058758	PrimaryExpression	1		1056898	1					
ANR	1058759	ContinueStatement	continue ;	1031:6:27796:27804	1056898	16	True				
ANR	1058760	ExpressionStatement	newline = 0	1033:5:27818:27829	1056898	1	True				
ANR	1058761	AssignmentExpression	newline = 0		1056898	0		=			
ANR	1058762	Identifier	newline		1056898	0					
ANR	1058763	PrimaryExpression	0		1056898	1					
ANR	1058764	ExpressionStatement	free ( data )	1035:4:27841:27852	1056898	4	True				
ANR	1058765	CallExpression	free ( data )		1056898	0					
ANR	1058766	Callee	free		1056898	0					
ANR	1058767	Identifier	free		1056898	0					
ANR	1058768	ArgumentList	data		1056898	1					
ANR	1058769	Argument	data		1056898	0					
ANR	1058770	Identifier	data		1056898	0					
ANR	1058771	ElseStatement	else		1056898	0					
ANR	1058772	CompoundStatement		327:9:7301:7301	1056898	0					
ANR	1058773	ExpressionStatement	"eprintf ( ""|Usage: wu [unified-diff-patch]    # see 'cu'\\n"" )"	1038:3:27873:27932	1056898	0	True				
ANR	1058774	CallExpression	"eprintf ( ""|Usage: wu [unified-diff-patch]    # see 'cu'\\n"" )"		1056898	0					
ANR	1058775	Callee	eprintf		1056898	0					
ANR	1058776	Identifier	eprintf		1056898	0					
ANR	1058777	ArgumentList	"""|Usage: wu [unified-diff-patch]    # see 'cu'\\n"""		1056898	1					
ANR	1058778	Argument	"""|Usage: wu [unified-diff-patch]    # see 'cu'\\n"""		1056898	0					
ANR	1058779	PrimaryExpression	"""|Usage: wu [unified-diff-patch]    # see 'cu'\\n"""		1056898	0					
ANR	1058780	BreakStatement	break ;	1040:2:27940:27945	1056898	26	True				
ANR	1058781	Label	case 'r' :	1041:1:27948:27956	1056898	27	True				
ANR	1058782	ExpressionStatement	"off = r_num_math ( core -> num , input + 1 )"	1042:2:27968:28005	1056898	28	True				
ANR	1058783	AssignmentExpression	"off = r_num_math ( core -> num , input + 1 )"		1056898	0		=			
ANR	1058784	Identifier	off		1056898	0					
ANR	1058785	CallExpression	"r_num_math ( core -> num , input + 1 )"		1056898	1					
ANR	1058786	Callee	r_num_math		1056898	0					
ANR	1058787	Identifier	r_num_math		1056898	0					
ANR	1058788	ArgumentList	core -> num		1056898	1					
ANR	1058789	Argument	core -> num		1056898	0					
ANR	1058790	PtrMemberAccess	core -> num		1056898	0					
ANR	1058791	Identifier	core		1056898	0					
ANR	1058792	Identifier	num		1056898	1					
ANR	1058793	Argument	input + 1		1056898	1					
ANR	1058794	AdditiveExpression	input + 1		1056898	0		+			
ANR	1058795	Identifier	input		1056898	0					
ANR	1058796	PrimaryExpression	1		1056898	1					
ANR	1058797	ExpressionStatement	len = ( int ) off	1043:2:28009:28023	1056898	29	True				
ANR	1058798	AssignmentExpression	len = ( int ) off		1056898	0		=			
ANR	1058799	Identifier	len		1056898	0					
ANR	1058800	CastExpression	( int ) off		1056898	1					
ANR	1058801	CastTarget	int		1056898	0					
ANR	1058802	Identifier	off		1056898	1					
ANR	1058803	IfStatement	if ( len > 0 )		1056898	30					
ANR	1058804	Condition	len > 0	1044:6:28031:28037	1056898	0	True				
ANR	1058805	RelationalExpression	len > 0		1056898	0		>			
ANR	1058806	Identifier	len		1056898	0					
ANR	1058807	PrimaryExpression	0		1056898	1					
ANR	1058808	CompoundStatement		334:15:7473:7473	1056898	1					
ANR	1058809	ExpressionStatement	buf = malloc ( len )	1045:3:28045:28063	1056898	0	True				
ANR	1058810	AssignmentExpression	buf = malloc ( len )		1056898	0		=			
ANR	1058811	Identifier	buf		1056898	0					
ANR	1058812	CallExpression	malloc ( len )		1056898	1					
ANR	1058813	Callee	malloc		1056898	0					
ANR	1058814	Identifier	malloc		1056898	0					
ANR	1058815	ArgumentList	len		1056898	1					
ANR	1058816	Argument	len		1056898	0					
ANR	1058817	Identifier	len		1056898	0					
ANR	1058818	IfStatement	if ( buf != NULL )		1056898	1					
ANR	1058819	Condition	buf != NULL	1046:7:28072:28082	1056898	0	True				
ANR	1058820	EqualityExpression	buf != NULL		1056898	0		!=			
ANR	1058821	Identifier	buf		1056898	0					
ANR	1058822	Identifier	NULL		1056898	1					
ANR	1058823	CompoundStatement		336:20:7518:7518	1056898	1					
ANR	1058824	ExpressionStatement	r_num_irand ( )	1047:4:28091:28105	1056898	0	True				
ANR	1058825	CallExpression	r_num_irand ( )		1056898	0					
ANR	1058826	Callee	r_num_irand		1056898	0					
ANR	1058827	Identifier	r_num_irand		1056898	0					
ANR	1058828	ArgumentList			1056898	1					
ANR	1058829	ForStatement	for ( i = 0 ; i < len ; i ++ )		1056898	1					
ANR	1058830	ForInit	i = 0 ;	1048:9:28116:28119	1056898	0	True				
ANR	1058831	AssignmentExpression	i = 0		1056898	0		=			
ANR	1058832	Identifier	i		1056898	0					
ANR	1058833	PrimaryExpression	0		1056898	1					
ANR	1058834	Condition	i < len	1048:14:28121:28125	1056898	1	True				
ANR	1058835	RelationalExpression	i < len		1056898	0		<			
ANR	1058836	Identifier	i		1056898	0					
ANR	1058837	Identifier	len		1056898	1					
ANR	1058838	PostIncDecOperationExpression	i ++	1048:21:28128:28130	1056898	2	True				
ANR	1058839	Identifier	i		1056898	0					
ANR	1058840	IncDec	++		1056898	1					
ANR	1058841	ExpressionStatement	buf [ i ] = r_num_rand ( 256 )	1049:5:28138:28163	1056898	3	True				
ANR	1058842	AssignmentExpression	buf [ i ] = r_num_rand ( 256 )		1056898	0		=			
ANR	1058843	ArrayIndexing	buf [ i ]		1056898	0					
ANR	1058844	Identifier	buf		1056898	0					
ANR	1058845	Identifier	i		1056898	1					
ANR	1058846	CallExpression	r_num_rand ( 256 )		1056898	1					
ANR	1058847	Callee	r_num_rand		1056898	0					
ANR	1058848	Identifier	r_num_rand		1056898	0					
ANR	1058849	ArgumentList	256		1056898	1					
ANR	1058850	Argument	256		1056898	0					
ANR	1058851	PrimaryExpression	256		1056898	0					
ANR	1058852	ExpressionStatement	"r_core_write_at ( core , core -> offset , buf , len )"	1050:4:28169:28215	1056898	2	True				
ANR	1058853	CallExpression	"r_core_write_at ( core , core -> offset , buf , len )"		1056898	0					
ANR	1058854	Callee	r_core_write_at		1056898	0					
ANR	1058855	Identifier	r_core_write_at		1056898	0					
ANR	1058856	ArgumentList	core		1056898	1					
ANR	1058857	Argument	core		1056898	0					
ANR	1058858	Identifier	core		1056898	0					
ANR	1058859	Argument	core -> offset		1056898	1					
ANR	1058860	PtrMemberAccess	core -> offset		1056898	0					
ANR	1058861	Identifier	core		1056898	0					
ANR	1058862	Identifier	offset		1056898	1					
ANR	1058863	Argument	buf		1056898	2					
ANR	1058864	Identifier	buf		1056898	0					
ANR	1058865	Argument	len		1056898	3					
ANR	1058866	Identifier	len		1056898	0					
ANR	1058867	ExpressionStatement	"WSEEK ( core , len )"	1051:4:28221:28238	1056898	3	True				
ANR	1058868	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1058869	Callee	WSEEK		1056898	0					
ANR	1058870	Identifier	WSEEK		1056898	0					
ANR	1058871	ArgumentList	core		1056898	1					
ANR	1058872	Argument	core		1056898	0					
ANR	1058873	Identifier	core		1056898	0					
ANR	1058874	Argument	len		1056898	1					
ANR	1058875	Identifier	len		1056898	0					
ANR	1058876	ExpressionStatement	free ( buf )	1052:4:28244:28254	1056898	4	True				
ANR	1058877	CallExpression	free ( buf )		1056898	0					
ANR	1058878	Callee	free		1056898	0					
ANR	1058879	Identifier	free		1056898	0					
ANR	1058880	ArgumentList	buf		1056898	1					
ANR	1058881	Argument	buf		1056898	0					
ANR	1058882	Identifier	buf		1056898	0					
ANR	1058883	ElseStatement	else		1056898	0					
ANR	1058884	ExpressionStatement	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , len )"	1053:10:28266:28311	1056898	0	True				
ANR	1058885	CallExpression	"eprintf ( ""Cannot allocate %d byte(s)\\n"" , len )"		1056898	0					
ANR	1058886	Callee	eprintf		1056898	0					
ANR	1058887	Identifier	eprintf		1056898	0					
ANR	1058888	ArgumentList	"""Cannot allocate %d byte(s)\\n"""		1056898	1					
ANR	1058889	Argument	"""Cannot allocate %d byte(s)\\n"""		1056898	0					
ANR	1058890	PrimaryExpression	"""Cannot allocate %d byte(s)\\n"""		1056898	0					
ANR	1058891	Argument	len		1056898	1					
ANR	1058892	Identifier	len		1056898	0					
ANR	1058893	BreakStatement	break ;	1055:2:28319:28324	1056898	31	True				
ANR	1058894	Label	case 'A' :	1056:1:28327:28335	1056898	32	True				
ANR	1058895	SwitchStatement	switch ( input [ 1 ] )		1056898	33					
ANR	1058896	Condition	input [ 1 ]	1057:10:28355:28362	1056898	0	True				
ANR	1058897	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1058898	Identifier	input		1056898	0					
ANR	1058899	PrimaryExpression	1		1056898	1					
ANR	1058900	CompoundStatement		347:20:7798:7798	1056898	1					
ANR	1058901	Label	case ' ' :	1058:2:28369:28377	1056898	0	True				
ANR	1058902	IfStatement	if ( input [ 2 ] && input [ 3 ] == ' ' )		1056898	1					
ANR	1058903	Condition	input [ 2 ] && input [ 3 ] == ' '	1059:7:28386:28410	1056898	0	True				
ANR	1058904	AndExpression	input [ 2 ] && input [ 3 ] == ' '		1056898	0		&&			
ANR	1058905	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1058906	Identifier	input		1056898	0					
ANR	1058907	PrimaryExpression	2		1056898	1					
ANR	1058908	EqualityExpression	input [ 3 ] == ' '		1056898	1		==			
ANR	1058909	ArrayIndexing	input [ 3 ]		1056898	0					
ANR	1058910	Identifier	input		1056898	0					
ANR	1058911	PrimaryExpression	3		1056898	1					
ANR	1058912	PrimaryExpression	' '		1056898	1					
ANR	1058913	CompoundStatement		349:34:7846:7846	1056898	1					
ANR	1058914	ExpressionStatement	"r_asm_set_pc ( core -> assembler , core -> offset )"	1060:4:28419:28463	1056898	0	True				
ANR	1058915	CallExpression	"r_asm_set_pc ( core -> assembler , core -> offset )"		1056898	0					
ANR	1058916	Callee	r_asm_set_pc		1056898	0					
ANR	1058917	Identifier	r_asm_set_pc		1056898	0					
ANR	1058918	ArgumentList	core -> assembler		1056898	1					
ANR	1058919	Argument	core -> assembler		1056898	0					
ANR	1058920	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1058921	Identifier	core		1056898	0					
ANR	1058922	Identifier	assembler		1056898	1					
ANR	1058923	Argument	core -> offset		1056898	1					
ANR	1058924	PtrMemberAccess	core -> offset		1056898	0					
ANR	1058925	Identifier	core		1056898	0					
ANR	1058926	Identifier	offset		1056898	1					
ANR	1058927	ExpressionStatement	"eprintf ( ""modify (%c)=%s\\n"" , input [ 2 ] , input + 4 )"	1061:4:28469:28516	1056898	1	True				
ANR	1058928	CallExpression	"eprintf ( ""modify (%c)=%s\\n"" , input [ 2 ] , input + 4 )"		1056898	0					
ANR	1058929	Callee	eprintf		1056898	0					
ANR	1058930	Identifier	eprintf		1056898	0					
ANR	1058931	ArgumentList	"""modify (%c)=%s\\n"""		1056898	1					
ANR	1058932	Argument	"""modify (%c)=%s\\n"""		1056898	0					
ANR	1058933	PrimaryExpression	"""modify (%c)=%s\\n"""		1056898	0					
ANR	1058934	Argument	input [ 2 ]		1056898	1					
ANR	1058935	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1058936	Identifier	input		1056898	0					
ANR	1058937	PrimaryExpression	2		1056898	1					
ANR	1058938	Argument	input + 4		1056898	2					
ANR	1058939	AdditiveExpression	input + 4		1056898	0		+			
ANR	1058940	Identifier	input		1056898	0					
ANR	1058941	PrimaryExpression	4		1056898	1					
ANR	1058942	ExpressionStatement	"len = r_asm_modify ( core -> assembler , core -> block , input [ 2 ] , r_num_math ( core -> num , input + 4 ) )"	1062:4:28522:28619	1056898	2	True				
ANR	1058943	AssignmentExpression	"len = r_asm_modify ( core -> assembler , core -> block , input [ 2 ] , r_num_math ( core -> num , input + 4 ) )"		1056898	0		=			
ANR	1058944	Identifier	len		1056898	0					
ANR	1058945	CallExpression	"r_asm_modify ( core -> assembler , core -> block , input [ 2 ] , r_num_math ( core -> num , input + 4 ) )"		1056898	1					
ANR	1058946	Callee	r_asm_modify		1056898	0					
ANR	1058947	Identifier	r_asm_modify		1056898	0					
ANR	1058948	ArgumentList	core -> assembler		1056898	1					
ANR	1058949	Argument	core -> assembler		1056898	0					
ANR	1058950	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1058951	Identifier	core		1056898	0					
ANR	1058952	Identifier	assembler		1056898	1					
ANR	1058953	Argument	core -> block		1056898	1					
ANR	1058954	PtrMemberAccess	core -> block		1056898	0					
ANR	1058955	Identifier	core		1056898	0					
ANR	1058956	Identifier	block		1056898	1					
ANR	1058957	Argument	input [ 2 ]		1056898	2					
ANR	1058958	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1058959	Identifier	input		1056898	0					
ANR	1058960	PrimaryExpression	2		1056898	1					
ANR	1058961	Argument	"r_num_math ( core -> num , input + 4 )"		1056898	3					
ANR	1058962	CallExpression	"r_num_math ( core -> num , input + 4 )"		1056898	0					
ANR	1058963	Callee	r_num_math		1056898	0					
ANR	1058964	Identifier	r_num_math		1056898	0					
ANR	1058965	ArgumentList	core -> num		1056898	1					
ANR	1058966	Argument	core -> num		1056898	0					
ANR	1058967	PtrMemberAccess	core -> num		1056898	0					
ANR	1058968	Identifier	core		1056898	0					
ANR	1058969	Identifier	num		1056898	1					
ANR	1058970	Argument	input + 4		1056898	1					
ANR	1058971	AdditiveExpression	input + 4		1056898	0		+			
ANR	1058972	Identifier	input		1056898	0					
ANR	1058973	PrimaryExpression	4		1056898	1					
ANR	1058974	ExpressionStatement	"eprintf ( ""len=%d\\n"" , len )"	1064:4:28625:28650	1056898	3	True				
ANR	1058975	CallExpression	"eprintf ( ""len=%d\\n"" , len )"		1056898	0					
ANR	1058976	Callee	eprintf		1056898	0					
ANR	1058977	Identifier	eprintf		1056898	0					
ANR	1058978	ArgumentList	"""len=%d\\n"""		1056898	1					
ANR	1058979	Argument	"""len=%d\\n"""		1056898	0					
ANR	1058980	PrimaryExpression	"""len=%d\\n"""		1056898	0					
ANR	1058981	Argument	len		1056898	1					
ANR	1058982	Identifier	len		1056898	0					
ANR	1058983	IfStatement	if ( len > 0 )		1056898	4					
ANR	1058984	Condition	len > 0	1065:8:28660:28664	1056898	0	True				
ANR	1058985	RelationalExpression	len > 0		1056898	0		>			
ANR	1058986	Identifier	len		1056898	0					
ANR	1058987	PrimaryExpression	0		1056898	1					
ANR	1058988	CompoundStatement		355:15:8100:8100	1056898	1					
ANR	1058989	ExpressionStatement	"r_core_write_at ( core , core -> offset , core -> block , len )"	1066:5:28674:28728	1056898	0	True				
ANR	1058990	CallExpression	"r_core_write_at ( core , core -> offset , core -> block , len )"		1056898	0					
ANR	1058991	Callee	r_core_write_at		1056898	0					
ANR	1058992	Identifier	r_core_write_at		1056898	0					
ANR	1058993	ArgumentList	core		1056898	1					
ANR	1058994	Argument	core		1056898	0					
ANR	1058995	Identifier	core		1056898	0					
ANR	1058996	Argument	core -> offset		1056898	1					
ANR	1058997	PtrMemberAccess	core -> offset		1056898	0					
ANR	1058998	Identifier	core		1056898	0					
ANR	1058999	Identifier	offset		1056898	1					
ANR	1059000	Argument	core -> block		1056898	2					
ANR	1059001	PtrMemberAccess	core -> block		1056898	0					
ANR	1059002	Identifier	core		1056898	0					
ANR	1059003	Identifier	block		1056898	1					
ANR	1059004	Argument	len		1056898	3					
ANR	1059005	Identifier	len		1056898	0					
ANR	1059006	ExpressionStatement	"WSEEK ( core , len )"	1067:5:28735:28752	1056898	1	True				
ANR	1059007	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1059008	Callee	WSEEK		1056898	0					
ANR	1059009	Identifier	WSEEK		1056898	0					
ANR	1059010	ArgumentList	core		1056898	1					
ANR	1059011	Argument	core		1056898	0					
ANR	1059012	Identifier	core		1056898	0					
ANR	1059013	Argument	len		1056898	1					
ANR	1059014	Identifier	len		1056898	0					
ANR	1059015	ElseStatement	else		1056898	0					
ANR	1059016	ExpressionStatement	"eprintf ( ""r_asm_modify = %d\\n"" , len )"	1068:11:28765:28801	1056898	0	True				
ANR	1059017	CallExpression	"eprintf ( ""r_asm_modify = %d\\n"" , len )"		1056898	0					
ANR	1059018	Callee	eprintf		1056898	0					
ANR	1059019	Identifier	eprintf		1056898	0					
ANR	1059020	ArgumentList	"""r_asm_modify = %d\\n"""		1056898	1					
ANR	1059021	Argument	"""r_asm_modify = %d\\n"""		1056898	0					
ANR	1059022	PrimaryExpression	"""r_asm_modify = %d\\n"""		1056898	0					
ANR	1059023	Argument	len		1056898	1					
ANR	1059024	Identifier	len		1056898	0					
ANR	1059025	ElseStatement	else		1056898	0					
ANR	1059026	ExpressionStatement	"eprintf ( ""Usage: wA [type] [value]\\n"" )"	1069:10:28813:28851	1056898	0	True				
ANR	1059027	CallExpression	"eprintf ( ""Usage: wA [type] [value]\\n"" )"		1056898	0					
ANR	1059028	Callee	eprintf		1056898	0					
ANR	1059029	Identifier	eprintf		1056898	0					
ANR	1059030	ArgumentList	"""Usage: wA [type] [value]\\n"""		1056898	1					
ANR	1059031	Argument	"""Usage: wA [type] [value]\\n"""		1056898	0					
ANR	1059032	PrimaryExpression	"""Usage: wA [type] [value]\\n"""		1056898	0					
ANR	1059033	BreakStatement	break ;	1070:3:28856:28861	1056898	2	True				
ANR	1059034	Label	case '?' :	1071:2:28865:28873	1056898	3	True				
ANR	1059035	Label	default :	1072:2:28877:28884	1056898	4	True				
ANR	1059036	Identifier	default		1056898	0					
ANR	1059037	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wA )"	1073:3:28889:28924	1056898	5	True				
ANR	1059038	CallExpression	"r_core_cmd_help ( core , help_msg_wA )"		1056898	0					
ANR	1059039	Callee	r_core_cmd_help		1056898	0					
ANR	1059040	Identifier	r_core_cmd_help		1056898	0					
ANR	1059041	ArgumentList	core		1056898	1					
ANR	1059042	Argument	core		1056898	0					
ANR	1059043	Identifier	core		1056898	0					
ANR	1059044	Argument	help_msg_wA		1056898	1					
ANR	1059045	Identifier	help_msg_wA		1056898	0					
ANR	1059046	BreakStatement	break ;	1074:3:28929:28934	1056898	6	True				
ANR	1059047	BreakStatement	break ;	1076:2:28942:28947	1056898	34	True				
ANR	1059048	Label	case 'c' :	1077:1:28950:28958	1056898	35	True				
ANR	1059049	SwitchStatement	switch ( input [ 1 ] )		1056898	36					
ANR	1059050	Condition	input [ 1 ]	1078:10:28978:28985	1056898	0	True				
ANR	1059051	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1059052	Identifier	input		1056898	0					
ANR	1059053	PrimaryExpression	1		1056898	1					
ANR	1059054	CompoundStatement		368:20:8421:8421	1056898	1					
ANR	1059055	Label	case '\\0' :	1079:2:28992:29001	1056898	0	True				
ANR	1059056	ExpressionStatement	"r_io_cache_list ( core -> io , 0 )"	1082:3:29122:29151	1056898	1	True				
ANR	1059057	CallExpression	"r_io_cache_list ( core -> io , 0 )"		1056898	0					
ANR	1059058	Callee	r_io_cache_list		1056898	0					
ANR	1059059	Identifier	r_io_cache_list		1056898	0					
ANR	1059060	ArgumentList	core -> io		1056898	1					
ANR	1059061	Argument	core -> io		1056898	0					
ANR	1059062	PtrMemberAccess	core -> io		1056898	0					
ANR	1059063	Identifier	core		1056898	0					
ANR	1059064	Identifier	io		1056898	1					
ANR	1059065	Argument	0		1056898	1					
ANR	1059066	PrimaryExpression	0		1056898	0					
ANR	1059067	BreakStatement	break ;	1083:3:29156:29161	1056898	2	True				
ANR	1059068	Label	case '?' :	1084:2:29165:29173	1056898	3	True				
ANR	1059069	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wc )"	1085:3:29187:29222	1056898	4	True				
ANR	1059070	CallExpression	"r_core_cmd_help ( core , help_msg_wc )"		1056898	0					
ANR	1059071	Callee	r_core_cmd_help		1056898	0					
ANR	1059072	Identifier	r_core_cmd_help		1056898	0					
ANR	1059073	ArgumentList	core		1056898	1					
ANR	1059074	Argument	core		1056898	0					
ANR	1059075	Identifier	core		1056898	0					
ANR	1059076	Argument	help_msg_wc		1056898	1					
ANR	1059077	Identifier	help_msg_wc		1056898	0					
ANR	1059078	BreakStatement	break ;	1086:3:29227:29232	1056898	5	True				
ANR	1059079	Label	case '*' :	1087:2:29236:29244	1056898	6	True				
ANR	1059080	ExpressionStatement	"r_io_cache_list ( core -> io , 1 )"	1088:3:29258:29287	1056898	7	True				
ANR	1059081	CallExpression	"r_io_cache_list ( core -> io , 1 )"		1056898	0					
ANR	1059082	Callee	r_io_cache_list		1056898	0					
ANR	1059083	Identifier	r_io_cache_list		1056898	0					
ANR	1059084	ArgumentList	core -> io		1056898	1					
ANR	1059085	Argument	core -> io		1056898	0					
ANR	1059086	PtrMemberAccess	core -> io		1056898	0					
ANR	1059087	Identifier	core		1056898	0					
ANR	1059088	Identifier	io		1056898	1					
ANR	1059089	Argument	1		1056898	1					
ANR	1059090	PrimaryExpression	1		1056898	0					
ANR	1059091	BreakStatement	break ;	1089:3:29292:29297	1056898	8	True				
ANR	1059092	Label	case '+' :	1090:2:29301:29309	1056898	9	True				
ANR	1059093	IfStatement	if ( input [ 2 ] == '*' )		1056898	10					
ANR	1059094	Condition	input [ 2 ] == '*'	1091:7:29327:29339	1056898	0	True				
ANR	1059095	EqualityExpression	input [ 2 ] == '*'		1056898	0		==			
ANR	1059096	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1059097	Identifier	input		1056898	0					
ANR	1059098	PrimaryExpression	2		1056898	1					
ANR	1059099	PrimaryExpression	'*'		1056898	1					
ANR	1059100	CompoundStatement		381:22:8775:8775	1056898	1					
ANR	1059101	ExpressionStatement	"eprintf ( ""TODO\\n"" )"	1093:4:29411:29429	1056898	0	True				
ANR	1059102	CallExpression	"eprintf ( ""TODO\\n"" )"		1056898	0					
ANR	1059103	Callee	eprintf		1056898	0					
ANR	1059104	Identifier	eprintf		1056898	0					
ANR	1059105	ArgumentList	"""TODO\\n"""		1056898	1					
ANR	1059106	Argument	"""TODO\\n"""		1056898	0					
ANR	1059107	PrimaryExpression	"""TODO\\n"""		1056898	0					
ANR	1059108	ElseStatement	else		1056898	0					
ANR	1059109	IfStatement	if ( input [ 2 ] == ' ' )		1056898	0					
ANR	1059110	Condition	input [ 2 ] == ' '	1094:14:29445:29457	1056898	0	True				
ANR	1059111	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1059112	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1059113	Identifier	input		1056898	0					
ANR	1059114	PrimaryExpression	2		1056898	1					
ANR	1059115	PrimaryExpression	' '		1056898	1					
ANR	1059116	CompoundStatement		386:4:8946:8959	1056898	1					
ANR	1059117	IdentifierDeclStatement	"char * p = strchr ( input + 3 , ' ' ) ;"	1095:4:29476:29507	1056898	0	True				
ANR	1059118	IdentifierDecl	"* p = strchr ( input + 3 , ' ' )"		1056898	0					
ANR	1059119	IdentifierDeclType	char *		1056898	0					
ANR	1059120	Identifier	p		1056898	1					
ANR	1059121	AssignmentExpression	"* p = strchr ( input + 3 , ' ' )"		1056898	2		=			
ANR	1059122	Identifier	p		1056898	0					
ANR	1059123	CallExpression	"strchr ( input + 3 , ' ' )"		1056898	1					
ANR	1059124	Callee	strchr		1056898	0					
ANR	1059125	Identifier	strchr		1056898	0					
ANR	1059126	ArgumentList	input + 3		1056898	1					
ANR	1059127	Argument	input + 3		1056898	0					
ANR	1059128	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059129	Identifier	input		1056898	0					
ANR	1059130	PrimaryExpression	3		1056898	1					
ANR	1059131	Argument	' '		1056898	1					
ANR	1059132	PrimaryExpression	' '		1056898	0					
ANR	1059133	IdentifierDeclStatement	"ut64 to , from ;"	1096:4:29513:29526	1056898	1	True				
ANR	1059134	IdentifierDecl	to		1056898	0					
ANR	1059135	IdentifierDeclType	ut64		1056898	0					
ANR	1059136	Identifier	to		1056898	1					
ANR	1059137	IdentifierDecl	from		1056898	1					
ANR	1059138	IdentifierDeclType	ut64		1056898	0					
ANR	1059139	Identifier	from		1056898	1					
ANR	1059140	ExpressionStatement	"from = r_num_math ( core -> num , input + 3 )"	1097:4:29532:29570	1056898	2	True				
ANR	1059141	AssignmentExpression	"from = r_num_math ( core -> num , input + 3 )"		1056898	0		=			
ANR	1059142	Identifier	from		1056898	0					
ANR	1059143	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1059144	Callee	r_num_math		1056898	0					
ANR	1059145	Identifier	r_num_math		1056898	0					
ANR	1059146	ArgumentList	core -> num		1056898	1					
ANR	1059147	Argument	core -> num		1056898	0					
ANR	1059148	PtrMemberAccess	core -> num		1056898	0					
ANR	1059149	Identifier	core		1056898	0					
ANR	1059150	Identifier	num		1056898	1					
ANR	1059151	Argument	input + 3		1056898	1					
ANR	1059152	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059153	Identifier	input		1056898	0					
ANR	1059154	PrimaryExpression	3		1056898	1					
ANR	1059155	IfStatement	if ( p )		1056898	3					
ANR	1059156	Condition	p	1098:8:29580:29580	1056898	0	True				
ANR	1059157	Identifier	p		1056898	0					
ANR	1059158	CompoundStatement		388:11:9016:9016	1056898	1					
ANR	1059159	ExpressionStatement	* p = 0	1099:5:29590:29596	1056898	0	True				
ANR	1059160	AssignmentExpression	* p = 0		1056898	0		=			
ANR	1059161	UnaryOperationExpression	* p		1056898	0					
ANR	1059162	UnaryOperator	*		1056898	0					
ANR	1059163	Identifier	p		1056898	1					
ANR	1059164	PrimaryExpression	0		1056898	1					
ANR	1059165	ExpressionStatement	"to = r_num_math ( core -> num , input + 3 )"	1100:5:29603:29639	1056898	1	True				
ANR	1059166	AssignmentExpression	"to = r_num_math ( core -> num , input + 3 )"		1056898	0		=			
ANR	1059167	Identifier	to		1056898	0					
ANR	1059168	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1059169	Callee	r_num_math		1056898	0					
ANR	1059170	Identifier	r_num_math		1056898	0					
ANR	1059171	ArgumentList	core -> num		1056898	1					
ANR	1059172	Argument	core -> num		1056898	0					
ANR	1059173	PtrMemberAccess	core -> num		1056898	0					
ANR	1059174	Identifier	core		1056898	0					
ANR	1059175	Identifier	num		1056898	1					
ANR	1059176	Argument	input + 3		1056898	1					
ANR	1059177	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059178	Identifier	input		1056898	0					
ANR	1059179	PrimaryExpression	3		1056898	1					
ANR	1059180	IfStatement	if ( to < from )		1056898	2					
ANR	1059181	Condition	to < from	1101:9:29650:29656	1056898	0	True				
ANR	1059182	RelationalExpression	to < from		1056898	0		<			
ANR	1059183	Identifier	to		1056898	0					
ANR	1059184	Identifier	from		1056898	1					
ANR	1059185	CompoundStatement		391:18:9092:9092	1056898	1					
ANR	1059186	ExpressionStatement	"eprintf ( ""Invalid range (from>to)\\n"" )"	1102:6:29667:29704	1056898	0	True				
ANR	1059187	CallExpression	"eprintf ( ""Invalid range (from>to)\\n"" )"		1056898	0					
ANR	1059188	Callee	eprintf		1056898	0					
ANR	1059189	Identifier	eprintf		1056898	0					
ANR	1059190	ArgumentList	"""Invalid range (from>to)\\n"""		1056898	1					
ANR	1059191	Argument	"""Invalid range (from>to)\\n"""		1056898	0					
ANR	1059192	PrimaryExpression	"""Invalid range (from>to)\\n"""		1056898	0					
ANR	1059193	ReturnStatement	return 0 ;	1103:6:29712:29720	1056898	1	True				
ANR	1059194	PrimaryExpression	0		1056898	0					
ANR	1059195	ElseStatement	else		1056898	0					
ANR	1059196	CompoundStatement		395:11:9173:9173	1056898	0					
ANR	1059197	ExpressionStatement	to = from + core -> blocksize	1106:5:29747:29774	1056898	0	True				
ANR	1059198	AssignmentExpression	to = from + core -> blocksize		1056898	0		=			
ANR	1059199	Identifier	to		1056898	0					
ANR	1059200	AdditiveExpression	from + core -> blocksize		1056898	1		+			
ANR	1059201	Identifier	from		1056898	0					
ANR	1059202	PtrMemberAccess	core -> blocksize		1056898	1					
ANR	1059203	Identifier	core		1056898	0					
ANR	1059204	Identifier	blocksize		1056898	1					
ANR	1059205	ExpressionStatement	"r_io_cache_commit ( core -> io , from , to )"	1108:4:29786:29824	1056898	4	True				
ANR	1059206	CallExpression	"r_io_cache_commit ( core -> io , from , to )"		1056898	0					
ANR	1059207	Callee	r_io_cache_commit		1056898	0					
ANR	1059208	Identifier	r_io_cache_commit		1056898	0					
ANR	1059209	ArgumentList	core -> io		1056898	1					
ANR	1059210	Argument	core -> io		1056898	0					
ANR	1059211	PtrMemberAccess	core -> io		1056898	0					
ANR	1059212	Identifier	core		1056898	0					
ANR	1059213	Identifier	io		1056898	1					
ANR	1059214	Argument	from		1056898	1					
ANR	1059215	Identifier	from		1056898	0					
ANR	1059216	Argument	to		1056898	2					
ANR	1059217	Identifier	to		1056898	0					
ANR	1059218	ElseStatement	else		1056898	0					
ANR	1059219	CompoundStatement		399:10:9269:9269	1056898	0					
ANR	1059220	Statement	eprintf	1110:4:29842:29848	1056898	0	True				
ANR	1059221	Statement	(	1110:12:29850:29850	1056898	1	True				
ANR	1059222	Statement	"""Invalidate write cache at 0x%08"""	1110:13:29851:29883	1056898	2	True				
ANR	1059223	Statement	PFMT64x	1110:46:29884:29890	1056898	3	True				
ANR	1059224	Statement	"""\\n"""	1110:53:29891:29894	1056898	4	True				
ANR	1059225	Statement	","	1110:57:29895:29895	1056898	5	True				
ANR	1059226	Statement	core	1110:59:29897:29900	1056898	6	True				
ANR	1059227	Statement	->	1110:63:29901:29902	1056898	7	True				
ANR	1059228	Statement	offset	1110:65:29903:29908	1056898	8	True				
ANR	1059229	Statement	)	1110:71:29909:29909	1056898	9	True				
ANR	1059230	ExpressionStatement		1110:72:29910:29910	1056898	10	True				
ANR	1059231	ExpressionStatement	"r_io_cache_commit ( core -> io , core -> offset , core -> offset + 1 )"	1111:4:29916:29974	1056898	11	True				
ANR	1059232	CallExpression	"r_io_cache_commit ( core -> io , core -> offset , core -> offset + 1 )"		1056898	0					
ANR	1059233	Callee	r_io_cache_commit		1056898	0					
ANR	1059234	Identifier	r_io_cache_commit		1056898	0					
ANR	1059235	ArgumentList	core -> io		1056898	1					
ANR	1059236	Argument	core -> io		1056898	0					
ANR	1059237	PtrMemberAccess	core -> io		1056898	0					
ANR	1059238	Identifier	core		1056898	0					
ANR	1059239	Identifier	io		1056898	1					
ANR	1059240	Argument	core -> offset		1056898	1					
ANR	1059241	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059242	Identifier	core		1056898	0					
ANR	1059243	Identifier	offset		1056898	1					
ANR	1059244	Argument	core -> offset + 1		1056898	2					
ANR	1059245	AdditiveExpression	core -> offset + 1		1056898	0		+			
ANR	1059246	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059247	Identifier	core		1056898	0					
ANR	1059248	Identifier	offset		1056898	1					
ANR	1059249	PrimaryExpression	1		1056898	1					
ANR	1059250	BreakStatement	break ;	1113:3:29984:29989	1056898	11	True				
ANR	1059251	Label	case '-' :	1114:2:29993:30001	1056898	12	True				
ANR	1059252	CompoundStatement		409:3:9551:9564	1056898	13					
ANR	1059253	IfStatement	if ( input [ 2 ] == '*' )		1056898	0					
ANR	1059254	Condition	input [ 2 ] == '*'	1115:7:30021:30033	1056898	0	True				
ANR	1059255	EqualityExpression	input [ 2 ] == '*'		1056898	0		==			
ANR	1059256	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1059257	Identifier	input		1056898	0					
ANR	1059258	PrimaryExpression	2		1056898	1					
ANR	1059259	PrimaryExpression	'*'		1056898	1					
ANR	1059260	CompoundStatement		405:22:9469:9469	1056898	1					
ANR	1059261	ExpressionStatement	"r_io_cache_reset ( core -> io , core -> io -> cached )"	1116:4:30052:30097	1056898	0	True				
ANR	1059262	CallExpression	"r_io_cache_reset ( core -> io , core -> io -> cached )"		1056898	0					
ANR	1059263	Callee	r_io_cache_reset		1056898	0					
ANR	1059264	Identifier	r_io_cache_reset		1056898	0					
ANR	1059265	ArgumentList	core -> io		1056898	1					
ANR	1059266	Argument	core -> io		1056898	0					
ANR	1059267	PtrMemberAccess	core -> io		1056898	0					
ANR	1059268	Identifier	core		1056898	0					
ANR	1059269	Identifier	io		1056898	1					
ANR	1059270	Argument	core -> io -> cached		1056898	1					
ANR	1059271	PtrMemberAccess	core -> io -> cached		1056898	0					
ANR	1059272	PtrMemberAccess	core -> io		1056898	0					
ANR	1059273	Identifier	core		1056898	0					
ANR	1059274	Identifier	io		1056898	1					
ANR	1059275	Identifier	cached		1056898	1					
ANR	1059276	BreakStatement	break ;	1117:4:30103:30108	1056898	1	True				
ANR	1059277	IdentifierDeclStatement	"ut64 from , to ;"	1119:3:30118:30131	1056898	1	True				
ANR	1059278	IdentifierDecl	from		1056898	0					
ANR	1059279	IdentifierDeclType	ut64		1056898	0					
ANR	1059280	Identifier	from		1056898	1					
ANR	1059281	IdentifierDecl	to		1056898	1					
ANR	1059282	IdentifierDeclType	ut64		1056898	0					
ANR	1059283	Identifier	to		1056898	1					
ANR	1059284	IfStatement	if ( input [ 2 ] == ' ' )		1056898	2					
ANR	1059285	Condition	input [ 2 ] == ' '	1120:7:30140:30152	1056898	0	True				
ANR	1059286	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1059287	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1059288	Identifier	input		1056898	0					
ANR	1059289	PrimaryExpression	2		1056898	1					
ANR	1059290	PrimaryExpression	' '		1056898	1					
ANR	1059291	CompoundStatement		411:4:9604:9635	1056898	1					
ANR	1059292	IdentifierDeclStatement	"char * p = strchr ( input + 3 , ' ' ) ;"	1121:4:30171:30202	1056898	0	True				
ANR	1059293	IdentifierDecl	"* p = strchr ( input + 3 , ' ' )"		1056898	0					
ANR	1059294	IdentifierDeclType	char *		1056898	0					
ANR	1059295	Identifier	p		1056898	1					
ANR	1059296	AssignmentExpression	"* p = strchr ( input + 3 , ' ' )"		1056898	2		=			
ANR	1059297	Identifier	p		1056898	0					
ANR	1059298	CallExpression	"strchr ( input + 3 , ' ' )"		1056898	1					
ANR	1059299	Callee	strchr		1056898	0					
ANR	1059300	Identifier	strchr		1056898	0					
ANR	1059301	ArgumentList	input + 3		1056898	1					
ANR	1059302	Argument	input + 3		1056898	0					
ANR	1059303	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059304	Identifier	input		1056898	0					
ANR	1059305	PrimaryExpression	3		1056898	1					
ANR	1059306	Argument	' '		1056898	1					
ANR	1059307	PrimaryExpression	' '		1056898	0					
ANR	1059308	IfStatement	if ( p )		1056898	1					
ANR	1059309	Condition	p	1122:8:30212:30212	1056898	0	True				
ANR	1059310	Identifier	p		1056898	0					
ANR	1059311	CompoundStatement		412:11:9648:9648	1056898	1					
ANR	1059312	ExpressionStatement	* p = 0	1123:5:30222:30228	1056898	0	True				
ANR	1059313	AssignmentExpression	* p = 0		1056898	0		=			
ANR	1059314	UnaryOperationExpression	* p		1056898	0					
ANR	1059315	UnaryOperator	*		1056898	0					
ANR	1059316	Identifier	p		1056898	1					
ANR	1059317	PrimaryExpression	0		1056898	1					
ANR	1059318	ExpressionStatement	"from = r_num_math ( core -> num , input + 3 )"	1124:5:30235:30273	1056898	1	True				
ANR	1059319	AssignmentExpression	"from = r_num_math ( core -> num , input + 3 )"		1056898	0		=			
ANR	1059320	Identifier	from		1056898	0					
ANR	1059321	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1059322	Callee	r_num_math		1056898	0					
ANR	1059323	Identifier	r_num_math		1056898	0					
ANR	1059324	ArgumentList	core -> num		1056898	1					
ANR	1059325	Argument	core -> num		1056898	0					
ANR	1059326	PtrMemberAccess	core -> num		1056898	0					
ANR	1059327	Identifier	core		1056898	0					
ANR	1059328	Identifier	num		1056898	1					
ANR	1059329	Argument	input + 3		1056898	1					
ANR	1059330	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059331	Identifier	input		1056898	0					
ANR	1059332	PrimaryExpression	3		1056898	1					
ANR	1059333	ExpressionStatement	"to = r_num_math ( core -> num , p + 1 )"	1125:5:30280:30312	1056898	2	True				
ANR	1059334	AssignmentExpression	"to = r_num_math ( core -> num , p + 1 )"		1056898	0		=			
ANR	1059335	Identifier	to		1056898	0					
ANR	1059336	CallExpression	"r_num_math ( core -> num , p + 1 )"		1056898	1					
ANR	1059337	Callee	r_num_math		1056898	0					
ANR	1059338	Identifier	r_num_math		1056898	0					
ANR	1059339	ArgumentList	core -> num		1056898	1					
ANR	1059340	Argument	core -> num		1056898	0					
ANR	1059341	PtrMemberAccess	core -> num		1056898	0					
ANR	1059342	Identifier	core		1056898	0					
ANR	1059343	Identifier	num		1056898	1					
ANR	1059344	Argument	p + 1		1056898	1					
ANR	1059345	AdditiveExpression	p + 1		1056898	0		+			
ANR	1059346	Identifier	p		1056898	0					
ANR	1059347	PrimaryExpression	1		1056898	1					
ANR	1059348	IfStatement	if ( to < from )		1056898	3					
ANR	1059349	Condition	to < from	1126:9:30323:30331	1056898	0	True				
ANR	1059350	RelationalExpression	to < from		1056898	0		<			
ANR	1059351	Identifier	to		1056898	0					
ANR	1059352	Identifier	from		1056898	1					
ANR	1059353	CompoundStatement		416:20:9767:9767	1056898	1					
ANR	1059354	ExpressionStatement	"eprintf ( ""Invalid range (from>to)\\n"" )"	1127:6:30342:30379	1056898	0	True				
ANR	1059355	CallExpression	"eprintf ( ""Invalid range (from>to)\\n"" )"		1056898	0					
ANR	1059356	Callee	eprintf		1056898	0					
ANR	1059357	Identifier	eprintf		1056898	0					
ANR	1059358	ArgumentList	"""Invalid range (from>to)\\n"""		1056898	1					
ANR	1059359	Argument	"""Invalid range (from>to)\\n"""		1056898	0					
ANR	1059360	PrimaryExpression	"""Invalid range (from>to)\\n"""		1056898	0					
ANR	1059361	ReturnStatement	return 0 ;	1128:6:30387:30395	1056898	1	True				
ANR	1059362	PrimaryExpression	0		1056898	0					
ANR	1059363	ElseStatement	else		1056898	0					
ANR	1059364	CompoundStatement		420:11:9848:9848	1056898	0					
ANR	1059365	ExpressionStatement	"from = r_num_math ( core -> num , input + 3 )"	1131:5:30422:30460	1056898	0	True				
ANR	1059366	AssignmentExpression	"from = r_num_math ( core -> num , input + 3 )"		1056898	0		=			
ANR	1059367	Identifier	from		1056898	0					
ANR	1059368	CallExpression	"r_num_math ( core -> num , input + 3 )"		1056898	1					
ANR	1059369	Callee	r_num_math		1056898	0					
ANR	1059370	Identifier	r_num_math		1056898	0					
ANR	1059371	ArgumentList	core -> num		1056898	1					
ANR	1059372	Argument	core -> num		1056898	0					
ANR	1059373	PtrMemberAccess	core -> num		1056898	0					
ANR	1059374	Identifier	core		1056898	0					
ANR	1059375	Identifier	num		1056898	1					
ANR	1059376	Argument	input + 3		1056898	1					
ANR	1059377	AdditiveExpression	input + 3		1056898	0		+			
ANR	1059378	Identifier	input		1056898	0					
ANR	1059379	PrimaryExpression	3		1056898	1					
ANR	1059380	ExpressionStatement	to = from + core -> blocksize	1132:5:30467:30494	1056898	1	True				
ANR	1059381	AssignmentExpression	to = from + core -> blocksize		1056898	0		=			
ANR	1059382	Identifier	to		1056898	0					
ANR	1059383	AdditiveExpression	from + core -> blocksize		1056898	1		+			
ANR	1059384	Identifier	from		1056898	0					
ANR	1059385	PtrMemberAccess	core -> blocksize		1056898	1					
ANR	1059386	Identifier	core		1056898	0					
ANR	1059387	Identifier	blocksize		1056898	1					
ANR	1059388	ElseStatement	else		1056898	0					
ANR	1059389	CompoundStatement		424:10:9945:9945	1056898	0					
ANR	1059390	Statement	eprintf	1135:4:30518:30524	1056898	0	True				
ANR	1059391	Statement	(	1135:12:30526:30526	1056898	1	True				
ANR	1059392	Statement	"""Invalidate write cache at 0x%08"""	1135:13:30527:30559	1056898	2	True				
ANR	1059393	Statement	PFMT64x	1135:46:30560:30566	1056898	3	True				
ANR	1059394	Statement	"""\\n"""	1135:53:30567:30570	1056898	4	True				
ANR	1059395	Statement	","	1135:57:30571:30571	1056898	5	True				
ANR	1059396	Statement	core	1135:59:30573:30576	1056898	6	True				
ANR	1059397	Statement	->	1135:63:30577:30578	1056898	7	True				
ANR	1059398	Statement	offset	1135:65:30579:30584	1056898	8	True				
ANR	1059399	Statement	)	1135:71:30585:30585	1056898	9	True				
ANR	1059400	ExpressionStatement		1135:72:30586:30586	1056898	10	True				
ANR	1059401	ExpressionStatement	from = core -> offset	1136:4:30592:30611	1056898	11	True				
ANR	1059402	AssignmentExpression	from = core -> offset		1056898	0		=			
ANR	1059403	Identifier	from		1056898	0					
ANR	1059404	PtrMemberAccess	core -> offset		1056898	1					
ANR	1059405	Identifier	core		1056898	0					
ANR	1059406	Identifier	offset		1056898	1					
ANR	1059407	ExpressionStatement	to = core -> offset + core -> blocksize	1137:4:30617:30652	1056898	12	True				
ANR	1059408	AssignmentExpression	to = core -> offset + core -> blocksize		1056898	0		=			
ANR	1059409	Identifier	to		1056898	0					
ANR	1059410	AdditiveExpression	core -> offset + core -> blocksize		1056898	1		+			
ANR	1059411	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059412	Identifier	core		1056898	0					
ANR	1059413	Identifier	offset		1056898	1					
ANR	1059414	PtrMemberAccess	core -> blocksize		1056898	1					
ANR	1059415	Identifier	core		1056898	0					
ANR	1059416	Identifier	blocksize		1056898	1					
ANR	1059417	ExpressionStatement	"eprintf ( ""invalidated %d cache(s)\\n"" , r_io_cache_invalidate ( core -> io , from , to ) )"	1139:3:30662:30746	1056898	3	True				
ANR	1059418	CallExpression	"eprintf ( ""invalidated %d cache(s)\\n"" , r_io_cache_invalidate ( core -> io , from , to ) )"		1056898	0					
ANR	1059419	Callee	eprintf		1056898	0					
ANR	1059420	Identifier	eprintf		1056898	0					
ANR	1059421	ArgumentList	"""invalidated %d cache(s)\\n"""		1056898	1					
ANR	1059422	Argument	"""invalidated %d cache(s)\\n"""		1056898	0					
ANR	1059423	PrimaryExpression	"""invalidated %d cache(s)\\n"""		1056898	0					
ANR	1059424	Argument	"r_io_cache_invalidate ( core -> io , from , to )"		1056898	1					
ANR	1059425	CallExpression	"r_io_cache_invalidate ( core -> io , from , to )"		1056898	0					
ANR	1059426	Callee	r_io_cache_invalidate		1056898	0					
ANR	1059427	Identifier	r_io_cache_invalidate		1056898	0					
ANR	1059428	ArgumentList	core -> io		1056898	1					
ANR	1059429	Argument	core -> io		1056898	0					
ANR	1059430	PtrMemberAccess	core -> io		1056898	0					
ANR	1059431	Identifier	core		1056898	0					
ANR	1059432	Identifier	io		1056898	1					
ANR	1059433	Argument	from		1056898	1					
ANR	1059434	Identifier	from		1056898	0					
ANR	1059435	Argument	to		1056898	2					
ANR	1059436	Identifier	to		1056898	0					
ANR	1059437	ExpressionStatement	r_core_block_read ( core )	1141:3:30751:30775	1056898	4	True				
ANR	1059438	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1059439	Callee	r_core_block_read		1056898	0					
ANR	1059440	Identifier	r_core_block_read		1056898	0					
ANR	1059441	ArgumentList	core		1056898	1					
ANR	1059442	Argument	core		1056898	0					
ANR	1059443	Identifier	core		1056898	0					
ANR	1059444	BreakStatement	break ;	1142:3:30780:30785	1056898	5	True				
ANR	1059445	Label	case 'i' :	1144:2:30793:30801	1056898	14	True				
ANR	1059446	ExpressionStatement	"r_io_cache_commit ( core -> io , 0 , UT64_MAX )"	1145:3:30815:30856	1056898	15	True				
ANR	1059447	CallExpression	"r_io_cache_commit ( core -> io , 0 , UT64_MAX )"		1056898	0					
ANR	1059448	Callee	r_io_cache_commit		1056898	0					
ANR	1059449	Identifier	r_io_cache_commit		1056898	0					
ANR	1059450	ArgumentList	core -> io		1056898	1					
ANR	1059451	Argument	core -> io		1056898	0					
ANR	1059452	PtrMemberAccess	core -> io		1056898	0					
ANR	1059453	Identifier	core		1056898	0					
ANR	1059454	Identifier	io		1056898	1					
ANR	1059455	Argument	0		1056898	1					
ANR	1059456	PrimaryExpression	0		1056898	0					
ANR	1059457	Argument	UT64_MAX		1056898	2					
ANR	1059458	Identifier	UT64_MAX		1056898	0					
ANR	1059459	ExpressionStatement	r_core_block_read ( core )	1146:3:30861:30885	1056898	16	True				
ANR	1059460	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1059461	Callee	r_core_block_read		1056898	0					
ANR	1059462	Identifier	r_core_block_read		1056898	0					
ANR	1059463	ArgumentList	core		1056898	1					
ANR	1059464	Argument	core		1056898	0					
ANR	1059465	Identifier	core		1056898	0					
ANR	1059466	BreakStatement	break ;	1147:3:30890:30895	1056898	17	True				
ANR	1059467	Label	case 'j' :	1148:2:30899:30907	1056898	18	True				
ANR	1059468	ExpressionStatement	"r_io_cache_list ( core -> io , 2 )"	1149:3:30921:30950	1056898	19	True				
ANR	1059469	CallExpression	"r_io_cache_list ( core -> io , 2 )"		1056898	0					
ANR	1059470	Callee	r_io_cache_list		1056898	0					
ANR	1059471	Identifier	r_io_cache_list		1056898	0					
ANR	1059472	ArgumentList	core -> io		1056898	1					
ANR	1059473	Argument	core -> io		1056898	0					
ANR	1059474	PtrMemberAccess	core -> io		1056898	0					
ANR	1059475	Identifier	core		1056898	0					
ANR	1059476	Identifier	io		1056898	1					
ANR	1059477	Argument	2		1056898	1					
ANR	1059478	PrimaryExpression	2		1056898	0					
ANR	1059479	BreakStatement	break ;	1150:3:30955:30960	1056898	20	True				
ANR	1059480	Label	case 'p' :	1151:2:30964:30972	1056898	21	True				
ANR	1059481	ExpressionStatement	"cmd_write_pcache ( core , & input [ 2 ] )"	1152:3:30986:31020	1056898	22	True				
ANR	1059482	CallExpression	"cmd_write_pcache ( core , & input [ 2 ] )"		1056898	0					
ANR	1059483	Callee	cmd_write_pcache		1056898	0					
ANR	1059484	Identifier	cmd_write_pcache		1056898	0					
ANR	1059485	ArgumentList	core		1056898	1					
ANR	1059486	Argument	core		1056898	0					
ANR	1059487	Identifier	core		1056898	0					
ANR	1059488	Argument	& input [ 2 ]		1056898	1					
ANR	1059489	UnaryOperationExpression	& input [ 2 ]		1056898	0					
ANR	1059490	UnaryOperator	&		1056898	0					
ANR	1059491	ArrayIndexing	input [ 2 ]		1056898	1					
ANR	1059492	Identifier	input		1056898	0					
ANR	1059493	PrimaryExpression	2		1056898	1					
ANR	1059494	BreakStatement	break ;	1153:3:31025:31030	1056898	23	True				
ANR	1059495	Label	case 'r' :	1154:2:31034:31042	1056898	24	True				
ANR	1059496	ExpressionStatement	"r_io_cache_reset ( core -> io , core -> io -> cached )"	1155:3:31056:31101	1056898	25	True				
ANR	1059497	CallExpression	"r_io_cache_reset ( core -> io , core -> io -> cached )"		1056898	0					
ANR	1059498	Callee	r_io_cache_reset		1056898	0					
ANR	1059499	Identifier	r_io_cache_reset		1056898	0					
ANR	1059500	ArgumentList	core -> io		1056898	1					
ANR	1059501	Argument	core -> io		1056898	0					
ANR	1059502	PtrMemberAccess	core -> io		1056898	0					
ANR	1059503	Identifier	core		1056898	0					
ANR	1059504	Identifier	io		1056898	1					
ANR	1059505	Argument	core -> io -> cached		1056898	1					
ANR	1059506	PtrMemberAccess	core -> io -> cached		1056898	0					
ANR	1059507	PtrMemberAccess	core -> io		1056898	0					
ANR	1059508	Identifier	core		1056898	0					
ANR	1059509	Identifier	io		1056898	1					
ANR	1059510	Identifier	cached		1056898	1					
ANR	1059511	ExpressionStatement	"memset ( core -> block , 0xff , core -> blocksize )"	1159:3:31263:31306	1056898	26	True				
ANR	1059512	CallExpression	"memset ( core -> block , 0xff , core -> blocksize )"		1056898	0					
ANR	1059513	Callee	memset		1056898	0					
ANR	1059514	Identifier	memset		1056898	0					
ANR	1059515	ArgumentList	core -> block		1056898	1					
ANR	1059516	Argument	core -> block		1056898	0					
ANR	1059517	PtrMemberAccess	core -> block		1056898	0					
ANR	1059518	Identifier	core		1056898	0					
ANR	1059519	Identifier	block		1056898	1					
ANR	1059520	Argument	0xff		1056898	1					
ANR	1059521	PrimaryExpression	0xff		1056898	0					
ANR	1059522	Argument	core -> blocksize		1056898	2					
ANR	1059523	PtrMemberAccess	core -> blocksize		1056898	0					
ANR	1059524	Identifier	core		1056898	0					
ANR	1059525	Identifier	blocksize		1056898	1					
ANR	1059526	ExpressionStatement	r_core_block_read ( core )	1160:3:31311:31335	1056898	27	True				
ANR	1059527	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1059528	Callee	r_core_block_read		1056898	0					
ANR	1059529	Identifier	r_core_block_read		1056898	0					
ANR	1059530	ArgumentList	core		1056898	1					
ANR	1059531	Argument	core		1056898	0					
ANR	1059532	Identifier	core		1056898	0					
ANR	1059533	BreakStatement	break ;	1161:3:31340:31345	1056898	28	True				
ANR	1059534	BreakStatement	break ;	1163:2:31353:31358	1056898	37	True				
ANR	1059535	Label	case ' ' :	1164:1:31361:31369	1056898	38	True				
ANR	1059536	ExpressionStatement	len = r_str_unescape ( str )	1166:2:31401:31427	1056898	39	True				
ANR	1059537	AssignmentExpression	len = r_str_unescape ( str )		1056898	0		=			
ANR	1059538	Identifier	len		1056898	0					
ANR	1059539	CallExpression	r_str_unescape ( str )		1056898	1					
ANR	1059540	Callee	r_str_unescape		1056898	0					
ANR	1059541	Identifier	r_str_unescape		1056898	0					
ANR	1059542	ArgumentList	str		1056898	1					
ANR	1059543	Argument	str		1056898	0					
ANR	1059544	Identifier	str		1056898	0					
ANR	1059545	ExpressionStatement	"r_core_write_at ( core , core -> offset , ( const ut8 * ) str , len )"	1167:2:31431:31489	1056898	40	True				
ANR	1059546	CallExpression	"r_core_write_at ( core , core -> offset , ( const ut8 * ) str , len )"		1056898	0					
ANR	1059547	Callee	r_core_write_at		1056898	0					
ANR	1059548	Identifier	r_core_write_at		1056898	0					
ANR	1059549	ArgumentList	core		1056898	1					
ANR	1059550	Argument	core		1056898	0					
ANR	1059551	Identifier	core		1056898	0					
ANR	1059552	Argument	core -> offset		1056898	1					
ANR	1059553	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059554	Identifier	core		1056898	0					
ANR	1059555	Identifier	offset		1056898	1					
ANR	1059556	Argument	( const ut8 * ) str		1056898	2					
ANR	1059557	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1059558	CastTarget	const ut8 *		1056898	0					
ANR	1059559	Identifier	str		1056898	1					
ANR	1059560	Argument	len		1056898	3					
ANR	1059561	Identifier	len		1056898	0					
ANR	1059562	ExpressionStatement	"r_io_use_desc ( core -> io , core -> file -> desc )"	1169:2:31499:31541	1056898	41	True				
ANR	1059563	CallExpression	"r_io_use_desc ( core -> io , core -> file -> desc )"		1056898	0					
ANR	1059564	Callee	r_io_use_desc		1056898	0					
ANR	1059565	Identifier	r_io_use_desc		1056898	0					
ANR	1059566	ArgumentList	core -> io		1056898	1					
ANR	1059567	Argument	core -> io		1056898	0					
ANR	1059568	PtrMemberAccess	core -> io		1056898	0					
ANR	1059569	Identifier	core		1056898	0					
ANR	1059570	Identifier	io		1056898	1					
ANR	1059571	Argument	core -> file -> desc		1056898	1					
ANR	1059572	PtrMemberAccess	core -> file -> desc		1056898	0					
ANR	1059573	PtrMemberAccess	core -> file		1056898	0					
ANR	1059574	Identifier	core		1056898	0					
ANR	1059575	Identifier	file		1056898	1					
ANR	1059576	Identifier	desc		1056898	1					
ANR	1059577	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , ( const ut8 * ) str , len )"	1170:2:31545:31605	1056898	42	True				
ANR	1059578	CallExpression	"r_io_write_at ( core -> io , core -> offset , ( const ut8 * ) str , len )"		1056898	0					
ANR	1059579	Callee	r_io_write_at		1056898	0					
ANR	1059580	Identifier	r_io_write_at		1056898	0					
ANR	1059581	ArgumentList	core -> io		1056898	1					
ANR	1059582	Argument	core -> io		1056898	0					
ANR	1059583	PtrMemberAccess	core -> io		1056898	0					
ANR	1059584	Identifier	core		1056898	0					
ANR	1059585	Identifier	io		1056898	1					
ANR	1059586	Argument	core -> offset		1056898	1					
ANR	1059587	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059588	Identifier	core		1056898	0					
ANR	1059589	Identifier	offset		1056898	1					
ANR	1059590	Argument	( const ut8 * ) str		1056898	2					
ANR	1059591	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1059592	CastTarget	const ut8 *		1056898	0					
ANR	1059593	Identifier	str		1056898	1					
ANR	1059594	Argument	len		1056898	3					
ANR	1059595	Identifier	len		1056898	0					
ANR	1059596	ExpressionStatement	"WSEEK ( core , len )"	1172:2:31616:31633	1056898	43	True				
ANR	1059597	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1059598	Callee	WSEEK		1056898	0					
ANR	1059599	Identifier	WSEEK		1056898	0					
ANR	1059600	ArgumentList	core		1056898	1					
ANR	1059601	Argument	core		1056898	0					
ANR	1059602	Identifier	core		1056898	0					
ANR	1059603	Argument	len		1056898	1					
ANR	1059604	Identifier	len		1056898	0					
ANR	1059605	ExpressionStatement	r_core_block_read ( core )	1173:2:31637:31661	1056898	44	True				
ANR	1059606	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1059607	Callee	r_core_block_read		1056898	0					
ANR	1059608	Identifier	r_core_block_read		1056898	0					
ANR	1059609	ArgumentList	core		1056898	1					
ANR	1059610	Argument	core		1056898	0					
ANR	1059611	Identifier	core		1056898	0					
ANR	1059612	BreakStatement	break ;	1174:2:31665:31670	1056898	45	True				
ANR	1059613	Label	case 'z' :	1175:1:31673:31681	1056898	46	True				
ANR	1059614	ExpressionStatement	len = r_str_unescape ( str )	1177:2:31730:31756	1056898	47	True				
ANR	1059615	AssignmentExpression	len = r_str_unescape ( str )		1056898	0		=			
ANR	1059616	Identifier	len		1056898	0					
ANR	1059617	CallExpression	r_str_unescape ( str )		1056898	1					
ANR	1059618	Callee	r_str_unescape		1056898	0					
ANR	1059619	Identifier	r_str_unescape		1056898	0					
ANR	1059620	ArgumentList	str		1056898	1					
ANR	1059621	Argument	str		1056898	0					
ANR	1059622	Identifier	str		1056898	0					
ANR	1059623	ExpressionStatement	"r_core_write_at ( core , core -> offset , ( const ut8 * ) str + 1 , len )"	1178:2:31760:31822	1056898	48	True				
ANR	1059624	CallExpression	"r_core_write_at ( core , core -> offset , ( const ut8 * ) str + 1 , len )"		1056898	0					
ANR	1059625	Callee	r_core_write_at		1056898	0					
ANR	1059626	Identifier	r_core_write_at		1056898	0					
ANR	1059627	ArgumentList	core		1056898	1					
ANR	1059628	Argument	core		1056898	0					
ANR	1059629	Identifier	core		1056898	0					
ANR	1059630	Argument	core -> offset		1056898	1					
ANR	1059631	PtrMemberAccess	core -> offset		1056898	0					
ANR	1059632	Identifier	core		1056898	0					
ANR	1059633	Identifier	offset		1056898	1					
ANR	1059634	Argument	( const ut8 * ) str + 1		1056898	2					
ANR	1059635	AdditiveExpression	( const ut8 * ) str + 1		1056898	0		+			
ANR	1059636	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1059637	CastTarget	const ut8 *		1056898	0					
ANR	1059638	Identifier	str		1056898	1					
ANR	1059639	PrimaryExpression	1		1056898	1					
ANR	1059640	Argument	len		1056898	3					
ANR	1059641	Identifier	len		1056898	0					
ANR	1059642	IfStatement	if ( len > 0 )		1056898	49					
ANR	1059643	Condition	len > 0	1179:6:31830:31836	1056898	0	True				
ANR	1059644	RelationalExpression	len > 0		1056898	0		>			
ANR	1059645	Identifier	len		1056898	0					
ANR	1059646	PrimaryExpression	0		1056898	1					
ANR	1059647	CompoundStatement		469:15:11272:11272	1056898	1					
ANR	1059648	ExpressionStatement	core -> num -> value = len	1180:3:31844:31866	1056898	0	True				
ANR	1059649	AssignmentExpression	core -> num -> value = len		1056898	0		=			
ANR	1059650	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1059651	PtrMemberAccess	core -> num		1056898	0					
ANR	1059652	Identifier	core		1056898	0					
ANR	1059653	Identifier	num		1056898	1					
ANR	1059654	Identifier	value		1056898	1					
ANR	1059655	Identifier	len		1056898	1					
ANR	1059656	ElseStatement	else		1056898	0					
ANR	1059657	CompoundStatement		471:9:11310:11310	1056898	0					
ANR	1059658	ExpressionStatement	core -> num -> value = 0	1182:3:31882:31902	1056898	0	True				
ANR	1059659	AssignmentExpression	core -> num -> value = 0		1056898	0		=			
ANR	1059660	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1059661	PtrMemberAccess	core -> num		1056898	0					
ANR	1059662	Identifier	core		1056898	0					
ANR	1059663	Identifier	num		1056898	1					
ANR	1059664	Identifier	value		1056898	1					
ANR	1059665	PrimaryExpression	0		1056898	1					
ANR	1059666	ExpressionStatement	"r_io_use_desc ( core -> io , core -> file -> desc )"	1185:2:31916:31958	1056898	50	True				
ANR	1059667	CallExpression	"r_io_use_desc ( core -> io , core -> file -> desc )"		1056898	0					
ANR	1059668	Callee	r_io_use_desc		1056898	0					
ANR	1059669	Identifier	r_io_use_desc		1056898	0					
ANR	1059670	ArgumentList	core -> io		1056898	1					
ANR	1059671	Argument	core -> io		1056898	0					
ANR	1059672	PtrMemberAccess	core -> io		1056898	0					
ANR	1059673	Identifier	core		1056898	0					
ANR	1059674	Identifier	io		1056898	1					
ANR	1059675	Argument	core -> file -> desc		1056898	1					
ANR	1059676	PtrMemberAccess	core -> file -> desc		1056898	0					
ANR	1059677	PtrMemberAccess	core -> file		1056898	0					
ANR	1059678	Identifier	core		1056898	0					
ANR	1059679	Identifier	file		1056898	1					
ANR	1059680	Identifier	desc		1056898	1					
ANR	1059681	ExpressionStatement	"WSEEK ( core , len + 1 )"	1187:2:31969:31990	1056898	51	True				
ANR	1059682	CallExpression	"WSEEK ( core , len + 1 )"		1056898	0					
ANR	1059683	Callee	WSEEK		1056898	0					
ANR	1059684	Identifier	WSEEK		1056898	0					
ANR	1059685	ArgumentList	core		1056898	1					
ANR	1059686	Argument	core		1056898	0					
ANR	1059687	Identifier	core		1056898	0					
ANR	1059688	Argument	len + 1		1056898	1					
ANR	1059689	AdditiveExpression	len + 1		1056898	0		+			
ANR	1059690	Identifier	len		1056898	0					
ANR	1059691	PrimaryExpression	1		1056898	1					
ANR	1059692	ExpressionStatement	r_core_block_read ( core )	1188:2:31994:32018	1056898	52	True				
ANR	1059693	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1059694	Callee	r_core_block_read		1056898	0					
ANR	1059695	Identifier	r_core_block_read		1056898	0					
ANR	1059696	ArgumentList	core		1056898	1					
ANR	1059697	Argument	core		1056898	0					
ANR	1059698	Identifier	core		1056898	0					
ANR	1059699	BreakStatement	break ;	1189:2:32022:32027	1056898	53	True				
ANR	1059700	Label	case 't' :	1190:1:32030:32038	1056898	54	True				
ANR	1059701	IfStatement	if ( * str == 's' )		1056898	55					
ANR	1059702	Condition	* str == 's'	1191:6:32054:32064	1056898	0	True				
ANR	1059703	EqualityExpression	* str == 's'		1056898	0		==			
ANR	1059704	UnaryOperationExpression	* str		1056898	0					
ANR	1059705	UnaryOperator	*		1056898	0					
ANR	1059706	Identifier	str		1056898	1					
ANR	1059707	PrimaryExpression	's'		1056898	1					
ANR	1059708	CompoundStatement		481:19:11500:11500	1056898	1					
ANR	1059709	IfStatement	if ( str [ 1 ] == ' ' )		1056898	0					
ANR	1059710	Condition	str [ 1 ] == ' '	1192:7:32085:32097	1056898	0	True				
ANR	1059711	EqualityExpression	str [ 1 ] == ' '		1056898	0		==			
ANR	1059712	ArrayIndexing	str [ 1 ]		1056898	0					
ANR	1059713	Identifier	str		1056898	0					
ANR	1059714	PrimaryExpression	1		1056898	1					
ANR	1059715	PrimaryExpression	' '		1056898	1					
ANR	1059716	CompoundStatement		484:4:11574:11604	1056898	1					
ANR	1059717	ExpressionStatement	"eprintf ( ""Write to server\\n"" )"	1193:4:32106:32135	1056898	0	True				
ANR	1059718	CallExpression	"eprintf ( ""Write to server\\n"" )"		1056898	0					
ANR	1059719	Callee	eprintf		1056898	0					
ANR	1059720	Identifier	eprintf		1056898	0					
ANR	1059721	ArgumentList	"""Write to server\\n"""		1056898	1					
ANR	1059722	Argument	"""Write to server\\n"""		1056898	0					
ANR	1059723	PrimaryExpression	"""Write to server\\n"""		1056898	0					
ANR	1059724	IdentifierDeclStatement	st64 sz = r_io_size ( core -> io ) ;	1194:4:32141:32171	1056898	1	True				
ANR	1059725	IdentifierDecl	sz = r_io_size ( core -> io )		1056898	0					
ANR	1059726	IdentifierDeclType	st64		1056898	0					
ANR	1059727	Identifier	sz		1056898	1					
ANR	1059728	AssignmentExpression	sz = r_io_size ( core -> io )		1056898	2		=			
ANR	1059729	Identifier	sz		1056898	0					
ANR	1059730	CallExpression	r_io_size ( core -> io )		1056898	1					
ANR	1059731	Callee	r_io_size		1056898	0					
ANR	1059732	Identifier	r_io_size		1056898	0					
ANR	1059733	ArgumentList	core -> io		1056898	1					
ANR	1059734	Argument	core -> io		1056898	0					
ANR	1059735	PtrMemberAccess	core -> io		1056898	0					
ANR	1059736	Identifier	core		1056898	0					
ANR	1059737	Identifier	io		1056898	1					
ANR	1059738	IfStatement	if ( sz > 0 )		1056898	2					
ANR	1059739	Condition	sz > 0	1195:8:32181:32186	1056898	0	True				
ANR	1059740	RelationalExpression	sz > 0		1056898	0		>			
ANR	1059741	Identifier	sz		1056898	0					
ANR	1059742	PrimaryExpression	0		1056898	1					
ANR	1059743	CompoundStatement		488:5:11676:11707	1056898	1					
ANR	1059744	IdentifierDeclStatement	ut64 addr = 0 ;	1196:5:32196:32209	1056898	0	True				
ANR	1059745	IdentifierDecl	addr = 0		1056898	0					
ANR	1059746	IdentifierDeclType	ut64		1056898	0					
ANR	1059747	Identifier	addr		1056898	1					
ANR	1059748	AssignmentExpression	addr = 0		1056898	2		=			
ANR	1059749	Identifier	addr		1056898	0					
ANR	1059750	PrimaryExpression	0		1056898	1					
ANR	1059751	IdentifierDeclStatement	char * host = str + 2 ;	1197:5:32216:32236	1056898	1	True				
ANR	1059752	IdentifierDecl	* host = str + 2		1056898	0					
ANR	1059753	IdentifierDeclType	char *		1056898	0					
ANR	1059754	Identifier	host		1056898	1					
ANR	1059755	AssignmentExpression	* host = str + 2		1056898	2		=			
ANR	1059756	Identifier	host		1056898	0					
ANR	1059757	AdditiveExpression	str + 2		1056898	1		+			
ANR	1059758	Identifier	str		1056898	0					
ANR	1059759	PrimaryExpression	2		1056898	1					
ANR	1059760	IdentifierDeclStatement	"char * port = strchr ( host , ':' ) ;"	1198:5:32243:32274	1056898	2	True				
ANR	1059761	IdentifierDecl	"* port = strchr ( host , ':' )"		1056898	0					
ANR	1059762	IdentifierDeclType	char *		1056898	0					
ANR	1059763	Identifier	port		1056898	1					
ANR	1059764	AssignmentExpression	"* port = strchr ( host , ':' )"		1056898	2		=			
ANR	1059765	Identifier	port		1056898	0					
ANR	1059766	CallExpression	"strchr ( host , ':' )"		1056898	1					
ANR	1059767	Callee	strchr		1056898	0					
ANR	1059768	Identifier	strchr		1056898	0					
ANR	1059769	ArgumentList	host		1056898	1					
ANR	1059770	Argument	host		1056898	0					
ANR	1059771	Identifier	host		1056898	0					
ANR	1059772	Argument	':'		1056898	1					
ANR	1059773	PrimaryExpression	':'		1056898	0					
ANR	1059774	IfStatement	if ( port )		1056898	3					
ANR	1059775	Condition	port	1199:9:32285:32288	1056898	0	True				
ANR	1059776	Identifier	port		1056898	0					
ANR	1059777	CompoundStatement		499:6:11989:12022	1056898	1					
ANR	1059778	ExpressionStatement	* port ++ = 0	1200:6:32299:32310	1056898	0	True				
ANR	1059779	AssignmentExpression	* port ++ = 0		1056898	0		=			
ANR	1059780	UnaryOperationExpression	* port ++		1056898	0					
ANR	1059781	UnaryOperator	*		1056898	0					
ANR	1059782	PostIncDecOperationExpression	port ++		1056898	1					
ANR	1059783	Identifier	port		1056898	0					
ANR	1059784	IncDec	++		1056898	1					
ANR	1059785	PrimaryExpression	0		1056898	1					
ANR	1059786	IdentifierDeclStatement	"char * space = strchr ( port , ' ' ) ;"	1201:6:32318:32350	1056898	1	True				
ANR	1059787	IdentifierDecl	"* space = strchr ( port , ' ' )"		1056898	0					
ANR	1059788	IdentifierDeclType	char *		1056898	0					
ANR	1059789	Identifier	space		1056898	1					
ANR	1059790	AssignmentExpression	"* space = strchr ( port , ' ' )"		1056898	2		=			
ANR	1059791	Identifier	space		1056898	0					
ANR	1059792	CallExpression	"strchr ( port , ' ' )"		1056898	1					
ANR	1059793	Callee	strchr		1056898	0					
ANR	1059794	Identifier	strchr		1056898	0					
ANR	1059795	ArgumentList	port		1056898	1					
ANR	1059796	Argument	port		1056898	0					
ANR	1059797	Identifier	port		1056898	0					
ANR	1059798	Argument	' '		1056898	1					
ANR	1059799	PrimaryExpression	' '		1056898	0					
ANR	1059800	IfStatement	if ( space )		1056898	2					
ANR	1059801	Condition	space	1202:10:32362:32366	1056898	0	True				
ANR	1059802	Identifier	space		1056898	0					
ANR	1059803	CompoundStatement		492:17:11802:11802	1056898	1					
ANR	1059804	ExpressionStatement	* space ++ = 0	1203:7:32378:32390	1056898	0	True				
ANR	1059805	AssignmentExpression	* space ++ = 0		1056898	0		=			
ANR	1059806	UnaryOperationExpression	* space ++		1056898	0					
ANR	1059807	UnaryOperator	*		1056898	0					
ANR	1059808	PostIncDecOperationExpression	space ++		1056898	1					
ANR	1059809	Identifier	space		1056898	0					
ANR	1059810	IncDec	++		1056898	1					
ANR	1059811	PrimaryExpression	0		1056898	1					
ANR	1059812	ExpressionStatement	"sz = r_num_math ( core -> num , space )"	1204:7:32399:32433	1056898	1	True				
ANR	1059813	AssignmentExpression	"sz = r_num_math ( core -> num , space )"		1056898	0		=			
ANR	1059814	Identifier	sz		1056898	0					
ANR	1059815	CallExpression	"r_num_math ( core -> num , space )"		1056898	1					
ANR	1059816	Callee	r_num_math		1056898	0					
ANR	1059817	Identifier	r_num_math		1056898	0					
ANR	1059818	ArgumentList	core -> num		1056898	1					
ANR	1059819	Argument	core -> num		1056898	0					
ANR	1059820	PtrMemberAccess	core -> num		1056898	0					
ANR	1059821	Identifier	core		1056898	0					
ANR	1059822	Identifier	num		1056898	1					
ANR	1059823	Argument	space		1056898	1					
ANR	1059824	Identifier	space		1056898	0					
ANR	1059825	ExpressionStatement	addr = core -> offset	1205:7:32442:32461	1056898	2	True				
ANR	1059826	AssignmentExpression	addr = core -> offset		1056898	0		=			
ANR	1059827	Identifier	addr		1056898	0					
ANR	1059828	PtrMemberAccess	core -> offset		1056898	1					
ANR	1059829	Identifier	core		1056898	0					
ANR	1059830	Identifier	offset		1056898	1					
ANR	1059831	IdentifierDeclStatement	"ut8 * buf = calloc ( 1 , sz ) ;"	1207:6:32477:32502	1056898	3	True				
ANR	1059832	IdentifierDecl	"* buf = calloc ( 1 , sz )"		1056898	0					
ANR	1059833	IdentifierDeclType	ut8 *		1056898	0					
ANR	1059834	Identifier	buf		1056898	1					
ANR	1059835	AssignmentExpression	"* buf = calloc ( 1 , sz )"		1056898	2		=			
ANR	1059836	Identifier	buf		1056898	0					
ANR	1059837	CallExpression	"calloc ( 1 , sz )"		1056898	1					
ANR	1059838	Callee	calloc		1056898	0					
ANR	1059839	Identifier	calloc		1056898	0					
ANR	1059840	ArgumentList	1		1056898	1					
ANR	1059841	Argument	1		1056898	0					
ANR	1059842	PrimaryExpression	1		1056898	0					
ANR	1059843	Argument	sz		1056898	1					
ANR	1059844	Identifier	sz		1056898	0					
ANR	1059845	ExpressionStatement	"r_io_read_at ( core -> io , addr , buf , sz )"	1208:6:32510:32548	1056898	4	True				
ANR	1059846	CallExpression	"r_io_read_at ( core -> io , addr , buf , sz )"		1056898	0					
ANR	1059847	Callee	r_io_read_at		1056898	0					
ANR	1059848	Identifier	r_io_read_at		1056898	0					
ANR	1059849	ArgumentList	core -> io		1056898	1					
ANR	1059850	Argument	core -> io		1056898	0					
ANR	1059851	PtrMemberAccess	core -> io		1056898	0					
ANR	1059852	Identifier	core		1056898	0					
ANR	1059853	Identifier	io		1056898	1					
ANR	1059854	Argument	addr		1056898	1					
ANR	1059855	Identifier	addr		1056898	0					
ANR	1059856	Argument	buf		1056898	2					
ANR	1059857	Identifier	buf		1056898	0					
ANR	1059858	Argument	sz		1056898	3					
ANR	1059859	Identifier	sz		1056898	0					
ANR	1059860	IdentifierDeclStatement	RSocket * s = r_socket_new ( false ) ;	1209:6:32556:32589	1056898	5	True				
ANR	1059861	IdentifierDecl	* s = r_socket_new ( false )		1056898	0					
ANR	1059862	IdentifierDeclType	RSocket *		1056898	0					
ANR	1059863	Identifier	s		1056898	1					
ANR	1059864	AssignmentExpression	* s = r_socket_new ( false )		1056898	2		=			
ANR	1059865	Identifier	s		1056898	0					
ANR	1059866	CallExpression	r_socket_new ( false )		1056898	1					
ANR	1059867	Callee	r_socket_new		1056898	0					
ANR	1059868	Identifier	r_socket_new		1056898	0					
ANR	1059869	ArgumentList	false		1056898	1					
ANR	1059870	Argument	false		1056898	0					
ANR	1059871	Identifier	false		1056898	0					
ANR	1059872	IfStatement	"if ( r_socket_connect ( s , host , port , R_SOCKET_PROTO_TCP , 0 ) )"		1056898	6					
ANR	1059873	Condition	"r_socket_connect ( s , host , port , R_SOCKET_PROTO_TCP , 0 )"	1210:10:32601:32655	1056898	0	True				
ANR	1059874	CallExpression	"r_socket_connect ( s , host , port , R_SOCKET_PROTO_TCP , 0 )"		1056898	0					
ANR	1059875	Callee	r_socket_connect		1056898	0					
ANR	1059876	Identifier	r_socket_connect		1056898	0					
ANR	1059877	ArgumentList	s		1056898	1					
ANR	1059878	Argument	s		1056898	0					
ANR	1059879	Identifier	s		1056898	0					
ANR	1059880	Argument	host		1056898	1					
ANR	1059881	Identifier	host		1056898	0					
ANR	1059882	Argument	port		1056898	2					
ANR	1059883	Identifier	port		1056898	0					
ANR	1059884	Argument	R_SOCKET_PROTO_TCP		1056898	3					
ANR	1059885	Identifier	R_SOCKET_PROTO_TCP		1056898	0					
ANR	1059886	Argument	0		1056898	4					
ANR	1059887	PrimaryExpression	0		1056898	0					
ANR	1059888	CompoundStatement		501:7:12100:12112	1056898	1					
ANR	1059889	IdentifierDeclStatement	int done = 0 ;	1211:7:32667:32679	1056898	0	True				
ANR	1059890	IdentifierDecl	done = 0		1056898	0					
ANR	1059891	IdentifierDeclType	int		1056898	0					
ANR	1059892	Identifier	done		1056898	1					
ANR	1059893	AssignmentExpression	done = 0		1056898	2		=			
ANR	1059894	Identifier	done		1056898	0					
ANR	1059895	PrimaryExpression	0		1056898	1					
ANR	1059896	ExpressionStatement	"eprintf ( ""Transfering file to the end-point...\\n"" )"	1212:7:32688:32738	1056898	1	True				
ANR	1059897	CallExpression	"eprintf ( ""Transfering file to the end-point...\\n"" )"		1056898	0					
ANR	1059898	Callee	eprintf		1056898	0					
ANR	1059899	Identifier	eprintf		1056898	0					
ANR	1059900	ArgumentList	"""Transfering file to the end-point...\\n"""		1056898	1					
ANR	1059901	Argument	"""Transfering file to the end-point...\\n"""		1056898	0					
ANR	1059902	PrimaryExpression	"""Transfering file to the end-point...\\n"""		1056898	0					
ANR	1059903	WhileStatement	while ( done < sz )		1056898	2					
ANR	1059904	Condition	done < sz	1213:14:32754:32762	1056898	0	True				
ANR	1059905	RelationalExpression	done < sz		1056898	0		<			
ANR	1059906	Identifier	done		1056898	0					
ANR	1059907	Identifier	sz		1056898	1					
ANR	1059908	CompoundStatement		504:8:12208:12258	1056898	1					
ANR	1059909	IdentifierDeclStatement	"int rc = r_socket_write ( s , buf + done , sz - done ) ;"	1214:8:32775:32825	1056898	0	True				
ANR	1059910	IdentifierDecl	"rc = r_socket_write ( s , buf + done , sz - done )"		1056898	0					
ANR	1059911	IdentifierDeclType	int		1056898	0					
ANR	1059912	Identifier	rc		1056898	1					
ANR	1059913	AssignmentExpression	"rc = r_socket_write ( s , buf + done , sz - done )"		1056898	2		=			
ANR	1059914	Identifier	rc		1056898	0					
ANR	1059915	CallExpression	"r_socket_write ( s , buf + done , sz - done )"		1056898	1					
ANR	1059916	Callee	r_socket_write		1056898	0					
ANR	1059917	Identifier	r_socket_write		1056898	0					
ANR	1059918	ArgumentList	s		1056898	1					
ANR	1059919	Argument	s		1056898	0					
ANR	1059920	Identifier	s		1056898	0					
ANR	1059921	Argument	buf + done		1056898	1					
ANR	1059922	AdditiveExpression	buf + done		1056898	0		+			
ANR	1059923	Identifier	buf		1056898	0					
ANR	1059924	Identifier	done		1056898	1					
ANR	1059925	Argument	sz - done		1056898	2					
ANR	1059926	AdditiveExpression	sz - done		1056898	0		-			
ANR	1059927	Identifier	sz		1056898	0					
ANR	1059928	Identifier	done		1056898	1					
ANR	1059929	IfStatement	if ( rc < 1 )		1056898	1					
ANR	1059930	Condition	rc < 1	1215:12:32839:32843	1056898	0	True				
ANR	1059931	RelationalExpression	rc < 1		1056898	0		<			
ANR	1059932	Identifier	rc		1056898	0					
ANR	1059933	PrimaryExpression	1		1056898	1					
ANR	1059934	CompoundStatement		505:19:12279:12279	1056898	1					
ANR	1059935	ExpressionStatement	"eprintf ( ""oops\\n"" )"	1216:9:32857:32875	1056898	0	True				
ANR	1059936	CallExpression	"eprintf ( ""oops\\n"" )"		1056898	0					
ANR	1059937	Callee	eprintf		1056898	0					
ANR	1059938	Identifier	eprintf		1056898	0					
ANR	1059939	ArgumentList	"""oops\\n"""		1056898	1					
ANR	1059940	Argument	"""oops\\n"""		1056898	0					
ANR	1059941	PrimaryExpression	"""oops\\n"""		1056898	0					
ANR	1059942	BreakStatement	break ;	1217:9:32886:32891	1056898	1	True				
ANR	1059943	ExpressionStatement	done += rc	1219:8:32911:32921	1056898	2	True				
ANR	1059944	AssignmentExpression	done += rc		1056898	0		+=			
ANR	1059945	Identifier	done		1056898	0					
ANR	1059946	Identifier	rc		1056898	1					
ANR	1059947	ElseStatement	else		1056898	0					
ANR	1059948	CompoundStatement		511:13:12378:12378	1056898	0					
ANR	1059949	ExpressionStatement	"eprintf ( ""Cannot connect\\n"" )"	1222:7:32954:32982	1056898	0	True				
ANR	1059950	CallExpression	"eprintf ( ""Cannot connect\\n"" )"		1056898	0					
ANR	1059951	Callee	eprintf		1056898	0					
ANR	1059952	Identifier	eprintf		1056898	0					
ANR	1059953	ArgumentList	"""Cannot connect\\n"""		1056898	1					
ANR	1059954	Argument	"""Cannot connect\\n"""		1056898	0					
ANR	1059955	PrimaryExpression	"""Cannot connect\\n"""		1056898	0					
ANR	1059956	ExpressionStatement	r_socket_free ( s )	1224:6:32998:33015	1056898	7	True				
ANR	1059957	CallExpression	r_socket_free ( s )		1056898	0					
ANR	1059958	Callee	r_socket_free		1056898	0					
ANR	1059959	Identifier	r_socket_free		1056898	0					
ANR	1059960	ArgumentList	s		1056898	1					
ANR	1059961	Argument	s		1056898	0					
ANR	1059962	Identifier	s		1056898	0					
ANR	1059963	ExpressionStatement	free ( buf )	1225:6:33023:33033	1056898	8	True				
ANR	1059964	CallExpression	free ( buf )		1056898	0					
ANR	1059965	Callee	free		1056898	0					
ANR	1059966	Identifier	free		1056898	0					
ANR	1059967	ArgumentList	buf		1056898	1					
ANR	1059968	Argument	buf		1056898	0					
ANR	1059969	Identifier	buf		1056898	0					
ANR	1059970	ElseStatement	else		1056898	0					
ANR	1059971	CompoundStatement		516:12:12480:12480	1056898	0					
ANR	1059972	ExpressionStatement	"eprintf ( ""Usage wts host:port [sz]\\n"" )"	1227:6:33055:33093	1056898	0	True				
ANR	1059973	CallExpression	"eprintf ( ""Usage wts host:port [sz]\\n"" )"		1056898	0					
ANR	1059974	Callee	eprintf		1056898	0					
ANR	1059975	Identifier	eprintf		1056898	0					
ANR	1059976	ArgumentList	"""Usage wts host:port [sz]\\n"""		1056898	1					
ANR	1059977	Argument	"""Usage wts host:port [sz]\\n"""		1056898	0					
ANR	1059978	PrimaryExpression	"""Usage wts host:port [sz]\\n"""		1056898	0					
ANR	1059979	ElseStatement	else		1056898	0					
ANR	1059980	CompoundStatement		519:11:12546:12546	1056898	0					
ANR	1059981	ExpressionStatement	"eprintf ( ""Unknown file size\\n"" )"	1230:5:33120:33151	1056898	0	True				
ANR	1059982	CallExpression	"eprintf ( ""Unknown file size\\n"" )"		1056898	0					
ANR	1059983	Callee	eprintf		1056898	0					
ANR	1059984	Identifier	eprintf		1056898	0					
ANR	1059985	ArgumentList	"""Unknown file size\\n"""		1056898	1					
ANR	1059986	Argument	"""Unknown file size\\n"""		1056898	0					
ANR	1059987	PrimaryExpression	"""Unknown file size\\n"""		1056898	0					
ANR	1059988	ElseStatement	else		1056898	0					
ANR	1059989	CompoundStatement		522:10:12602:12602	1056898	0					
ANR	1059990	ExpressionStatement	"eprintf ( ""Usage wts host:port [sz]\\n"" )"	1233:4:33175:33213	1056898	0	True				
ANR	1059991	CallExpression	"eprintf ( ""Usage wts host:port [sz]\\n"" )"		1056898	0					
ANR	1059992	Callee	eprintf		1056898	0					
ANR	1059993	Identifier	eprintf		1056898	0					
ANR	1059994	ArgumentList	"""Usage wts host:port [sz]\\n"""		1056898	1					
ANR	1059995	Argument	"""Usage wts host:port [sz]\\n"""		1056898	0					
ANR	1059996	PrimaryExpression	"""Usage wts host:port [sz]\\n"""		1056898	0					
ANR	1059997	ElseStatement	else		1056898	0					
ANR	1059998	IfStatement	if ( * str == '?' || * str == '\\0' )		1056898	0					
ANR	1059999	Condition	* str == '?' || * str == '\\0'	1235:13:33233:33259	1056898	0	True				
ANR	1060000	OrExpression	* str == '?' || * str == '\\0'		1056898	0		||			
ANR	1060001	EqualityExpression	* str == '?'		1056898	0		==			
ANR	1060002	UnaryOperationExpression	* str		1056898	0					
ANR	1060003	UnaryOperator	*		1056898	0					
ANR	1060004	Identifier	str		1056898	1					
ANR	1060005	PrimaryExpression	'?'		1056898	1					
ANR	1060006	EqualityExpression	* str == '\\0'		1056898	1		==			
ANR	1060007	UnaryOperationExpression	* str		1056898	0					
ANR	1060008	UnaryOperator	*		1056898	0					
ANR	1060009	Identifier	str		1056898	1					
ANR	1060010	PrimaryExpression	'\\0'		1056898	1					
ANR	1060011	CompoundStatement		525:42:12695:12695	1056898	1					
ANR	1060012	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wt )"	1236:3:33267:33302	1056898	0	True				
ANR	1060013	CallExpression	"r_core_cmd_help ( core , help_msg_wt )"		1056898	0					
ANR	1060014	Callee	r_core_cmd_help		1056898	0					
ANR	1060015	Identifier	r_core_cmd_help		1056898	0					
ANR	1060016	ArgumentList	core		1056898	1					
ANR	1060017	Argument	core		1056898	0					
ANR	1060018	Identifier	core		1056898	0					
ANR	1060019	Argument	help_msg_wt		1056898	1					
ANR	1060020	Identifier	help_msg_wt		1056898	0					
ANR	1060021	ExpressionStatement	free ( ostr )	1237:3:33307:33318	1056898	1	True				
ANR	1060022	CallExpression	free ( ostr )		1056898	0					
ANR	1060023	Callee	free		1056898	0					
ANR	1060024	Identifier	free		1056898	0					
ANR	1060025	ArgumentList	ostr		1056898	1					
ANR	1060026	Argument	ostr		1056898	0					
ANR	1060027	Identifier	ostr		1056898	0					
ANR	1060028	ReturnStatement	return 0 ;	1238:3:33323:33331	1056898	2	True				
ANR	1060029	PrimaryExpression	0		1056898	0					
ANR	1060030	ElseStatement	else		1056898	0					
ANR	1060031	CompoundStatement		533:3:12857:12881	1056898	0					
ANR	1060032	IdentifierDeclStatement	bool append = false ;	1240:3:33347:33366	1056898	0	True				
ANR	1060033	IdentifierDecl	append = false		1056898	0					
ANR	1060034	IdentifierDeclType	bool		1056898	0					
ANR	1060035	Identifier	append		1056898	1					
ANR	1060036	AssignmentExpression	append = false		1056898	2		=			
ANR	1060037	Identifier	false		1056898	0					
ANR	1060038	Identifier	false		1056898	1					
ANR	1060039	IdentifierDeclStatement	bool toend = false ;	1241:3:33371:33389	1056898	1	True				
ANR	1060040	IdentifierDecl	toend = false		1056898	0					
ANR	1060041	IdentifierDeclType	bool		1056898	0					
ANR	1060042	Identifier	toend		1056898	1					
ANR	1060043	AssignmentExpression	toend = false		1056898	2		=			
ANR	1060044	Identifier	false		1056898	0					
ANR	1060045	Identifier	false		1056898	1					
ANR	1060046	IdentifierDeclStatement	st64 sz = core -> blocksize ;	1242:3:33394:33419	1056898	2	True				
ANR	1060047	IdentifierDecl	sz = core -> blocksize		1056898	0					
ANR	1060048	IdentifierDeclType	st64		1056898	0					
ANR	1060049	Identifier	sz		1056898	1					
ANR	1060050	AssignmentExpression	sz = core -> blocksize		1056898	2		=			
ANR	1060051	Identifier	sz		1056898	0					
ANR	1060052	PtrMemberAccess	core -> blocksize		1056898	1					
ANR	1060053	Identifier	core		1056898	0					
ANR	1060054	Identifier	blocksize		1056898	1					
ANR	1060055	IdentifierDeclStatement	ut64 poff = core -> offset ;	1243:3:33424:33448	1056898	3	True				
ANR	1060056	IdentifierDecl	poff = core -> offset		1056898	0					
ANR	1060057	IdentifierDeclType	ut64		1056898	0					
ANR	1060058	Identifier	poff		1056898	1					
ANR	1060059	AssignmentExpression	poff = core -> offset		1056898	2		=			
ANR	1060060	Identifier	poff		1056898	0					
ANR	1060061	PtrMemberAccess	core -> offset		1056898	1					
ANR	1060062	Identifier	core		1056898	0					
ANR	1060063	Identifier	offset		1056898	1					
ANR	1060064	IfStatement	if ( * str == 'f' )		1056898	4					
ANR	1060065	Condition	* str == 'f'	1244:7:33457:33467	1056898	0	True				
ANR	1060066	EqualityExpression	* str == 'f'		1056898	0		==			
ANR	1060067	UnaryOperationExpression	* str		1056898	0					
ANR	1060068	UnaryOperator	*		1056898	0					
ANR	1060069	Identifier	str		1056898	1					
ANR	1060070	PrimaryExpression	'f'		1056898	1					
ANR	1060071	CompoundStatement		534:20:12903:12903	1056898	1					
ANR	1060072	ExpressionStatement	str ++	1245:4:33485:33490	1056898	0	True				
ANR	1060073	PostIncDecOperationExpression	str ++		1056898	0					
ANR	1060074	Identifier	str		1056898	0					
ANR	1060075	IncDec	++		1056898	1					
ANR	1060076	IfStatement	if ( * str == '?' )		1056898	1					
ANR	1060077	Condition	* str == '?'	1246:8:33500:33510	1056898	0	True				
ANR	1060078	EqualityExpression	* str == '?'		1056898	0		==			
ANR	1060079	UnaryOperationExpression	* str		1056898	0					
ANR	1060080	UnaryOperator	*		1056898	0					
ANR	1060081	Identifier	str		1056898	1					
ANR	1060082	PrimaryExpression	'?'		1056898	1					
ANR	1060083	CompoundStatement		536:21:12946:12946	1056898	1					
ANR	1060084	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wt )"	1247:5:33520:33555	1056898	0	True				
ANR	1060085	CallExpression	"r_core_cmd_help ( core , help_msg_wt )"		1056898	0					
ANR	1060086	Callee	r_core_cmd_help		1056898	0					
ANR	1060087	Identifier	r_core_cmd_help		1056898	0					
ANR	1060088	ArgumentList	core		1056898	1					
ANR	1060089	Argument	core		1056898	0					
ANR	1060090	Identifier	core		1056898	0					
ANR	1060091	Argument	help_msg_wt		1056898	1					
ANR	1060092	Identifier	help_msg_wt		1056898	0					
ANR	1060093	ReturnStatement	return 0 ;	1248:5:33562:33570	1056898	1	True				
ANR	1060094	PrimaryExpression	0		1056898	0					
ANR	1060095	IfStatement	if ( * str == '!' )		1056898	2					
ANR	1060096	Condition	* str == '!'	1250:8:33586:33596	1056898	0	True				
ANR	1060097	EqualityExpression	* str == '!'		1056898	0		==			
ANR	1060098	UnaryOperationExpression	* str		1056898	0					
ANR	1060099	UnaryOperator	*		1056898	0					
ANR	1060100	Identifier	str		1056898	1					
ANR	1060101	PrimaryExpression	'!'		1056898	1					
ANR	1060102	CompoundStatement		545:5:13131:13174	1056898	1					
ANR	1060103	IfStatement	if ( str [ 1 ] == '?' )		1056898	0					
ANR	1060104	Condition	str [ 1 ] == '?'	1251:9:33610:33622	1056898	0	True				
ANR	1060105	EqualityExpression	str [ 1 ] == '?'		1056898	0		==			
ANR	1060106	ArrayIndexing	str [ 1 ]		1056898	0					
ANR	1060107	Identifier	str		1056898	0					
ANR	1060108	PrimaryExpression	1		1056898	1					
ANR	1060109	PrimaryExpression	'?'		1056898	1					
ANR	1060110	CompoundStatement		541:24:13058:13058	1056898	1					
ANR	1060111	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wt )"	1252:6:33633:33668	1056898	0	True				
ANR	1060112	CallExpression	"r_core_cmd_help ( core , help_msg_wt )"		1056898	0					
ANR	1060113	Callee	r_core_cmd_help		1056898	0					
ANR	1060114	Identifier	r_core_cmd_help		1056898	0					
ANR	1060115	ArgumentList	core		1056898	1					
ANR	1060116	Argument	core		1056898	0					
ANR	1060117	Identifier	core		1056898	0					
ANR	1060118	Argument	help_msg_wt		1056898	1					
ANR	1060119	Identifier	help_msg_wt		1056898	0					
ANR	1060120	ReturnStatement	return 0 ;	1253:6:33676:33684	1056898	1	True				
ANR	1060121	PrimaryExpression	0		1056898	0					
ANR	1060122	IdentifierDeclStatement	"RIOMap * map = r_io_map_get ( core -> io , poff ) ;"	1255:5:33698:33741	1056898	1	True				
ANR	1060123	IdentifierDecl	"* map = r_io_map_get ( core -> io , poff )"		1056898	0					
ANR	1060124	IdentifierDeclType	RIOMap *		1056898	0					
ANR	1060125	Identifier	map		1056898	1					
ANR	1060126	AssignmentExpression	"* map = r_io_map_get ( core -> io , poff )"		1056898	2		=			
ANR	1060127	Identifier	map		1056898	0					
ANR	1060128	CallExpression	"r_io_map_get ( core -> io , poff )"		1056898	1					
ANR	1060129	Callee	r_io_map_get		1056898	0					
ANR	1060130	Identifier	r_io_map_get		1056898	0					
ANR	1060131	ArgumentList	core -> io		1056898	1					
ANR	1060132	Argument	core -> io		1056898	0					
ANR	1060133	PtrMemberAccess	core -> io		1056898	0					
ANR	1060134	Identifier	core		1056898	0					
ANR	1060135	Identifier	io		1056898	1					
ANR	1060136	Argument	poff		1056898	1					
ANR	1060137	Identifier	poff		1056898	0					
ANR	1060138	ExpressionStatement	toend = true	1256:5:33748:33760	1056898	2	True				
ANR	1060139	AssignmentExpression	toend = true		1056898	0		=			
ANR	1060140	Identifier	toend		1056898	0					
ANR	1060141	Identifier	true		1056898	1					
ANR	1060142	ExpressionStatement	poff = map ? poff - map -> itv . addr + map -> delta : poff	1258:5:33795:33848	1056898	3	True				
ANR	1060143	AssignmentExpression	poff = map ? poff - map -> itv . addr + map -> delta : poff		1056898	0		=			
ANR	1060144	Identifier	poff		1056898	0					
ANR	1060145	ConditionalExpression	map ? poff - map -> itv . addr + map -> delta : poff		1056898	1					
ANR	1060146	Condition	map		1056898	0					
ANR	1060147	Identifier	map		1056898	0					
ANR	1060148	AdditiveExpression	poff - map -> itv . addr + map -> delta		1056898	1		-			
ANR	1060149	Identifier	poff		1056898	0					
ANR	1060150	AdditiveExpression	map -> itv . addr + map -> delta		1056898	1		+			
ANR	1060151	MemberAccess	map -> itv . addr		1056898	0					
ANR	1060152	PtrMemberAccess	map -> itv		1056898	0					
ANR	1060153	Identifier	map		1056898	0					
ANR	1060154	Identifier	itv		1056898	1					
ANR	1060155	Identifier	addr		1056898	1					
ANR	1060156	PtrMemberAccess	map -> delta		1056898	1					
ANR	1060157	Identifier	map		1056898	0					
ANR	1060158	Identifier	delta		1056898	1					
ANR	1060159	Identifier	poff		1056898	2					
ANR	1060160	ExpressionStatement	str ++	1259:5:33855:33860	1056898	4	True				
ANR	1060161	PostIncDecOperationExpression	str ++		1056898	0					
ANR	1060162	Identifier	str		1056898	0					
ANR	1060163	IncDec	++		1056898	1					
ANR	1060164	IfStatement	if ( * str == 'f' )		1056898	3					
ANR	1060165	Condition	* str == 'f'	1261:8:33876:33886	1056898	0	True				
ANR	1060166	EqualityExpression	* str == 'f'		1056898	0		==			
ANR	1060167	UnaryOperationExpression	* str		1056898	0					
ANR	1060168	UnaryOperator	*		1056898	0					
ANR	1060169	Identifier	str		1056898	1					
ANR	1060170	PrimaryExpression	'f'		1056898	1					
ANR	1060171	CompoundStatement		556:5:13431:13475	1056898	1					
ANR	1060172	IfStatement	if ( str [ 1 ] == '?' )		1056898	0					
ANR	1060173	Condition	str [ 1 ] == '?'	1262:9:33910:33922	1056898	0	True				
ANR	1060174	EqualityExpression	str [ 1 ] == '?'		1056898	0		==			
ANR	1060175	ArrayIndexing	str [ 1 ]		1056898	0					
ANR	1060176	Identifier	str		1056898	0					
ANR	1060177	PrimaryExpression	1		1056898	1					
ANR	1060178	PrimaryExpression	'?'		1056898	1					
ANR	1060179	CompoundStatement		552:24:13358:13358	1056898	1					
ANR	1060180	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wt )"	1263:6:33933:33968	1056898	0	True				
ANR	1060181	CallExpression	"r_core_cmd_help ( core , help_msg_wt )"		1056898	0					
ANR	1060182	Callee	r_core_cmd_help		1056898	0					
ANR	1060183	Identifier	r_core_cmd_help		1056898	0					
ANR	1060184	ArgumentList	core		1056898	1					
ANR	1060185	Argument	core		1056898	0					
ANR	1060186	Identifier	core		1056898	0					
ANR	1060187	Argument	help_msg_wt		1056898	1					
ANR	1060188	Identifier	help_msg_wt		1056898	0					
ANR	1060189	ReturnStatement	return 0 ;	1264:6:33976:33984	1056898	1	True				
ANR	1060190	PrimaryExpression	0		1056898	0					
ANR	1060191	IdentifierDeclStatement	const char * prefix = r_str_trim_ro ( str + 2 ) ;	1266:5:33998:34042	1056898	1	True				
ANR	1060192	IdentifierDecl	* prefix = r_str_trim_ro ( str + 2 )		1056898	0					
ANR	1060193	IdentifierDeclType	const char *		1056898	0					
ANR	1060194	Identifier	prefix		1056898	1					
ANR	1060195	AssignmentExpression	* prefix = r_str_trim_ro ( str + 2 )		1056898	2		=			
ANR	1060196	Identifier	prefix		1056898	0					
ANR	1060197	CallExpression	r_str_trim_ro ( str + 2 )		1056898	1					
ANR	1060198	Callee	r_str_trim_ro		1056898	0					
ANR	1060199	Identifier	r_str_trim_ro		1056898	0					
ANR	1060200	ArgumentList	str + 2		1056898	1					
ANR	1060201	Argument	str + 2		1056898	0					
ANR	1060202	AdditiveExpression	str + 2		1056898	0		+			
ANR	1060203	Identifier	str		1056898	0					
ANR	1060204	PrimaryExpression	2		1056898	1					
ANR	1060205	IfStatement	if ( ! * prefix )		1056898	2					
ANR	1060206	Condition	! * prefix	1267:9:34053:34060	1056898	0	True				
ANR	1060207	UnaryOperationExpression	! * prefix		1056898	0					
ANR	1060208	UnaryOperator	!		1056898	0					
ANR	1060209	UnaryOperationExpression	* prefix		1056898	1					
ANR	1060210	UnaryOperator	*		1056898	0					
ANR	1060211	Identifier	prefix		1056898	1					
ANR	1060212	CompoundStatement		557:19:13496:13496	1056898	1					
ANR	1060213	ExpressionStatement	"prefix = ""dump"""	1268:6:34071:34086	1056898	0	True				
ANR	1060214	AssignmentExpression	"prefix = ""dump"""		1056898	0		=			
ANR	1060215	Identifier	prefix		1056898	0					
ANR	1060216	PrimaryExpression	"""dump"""		1056898	1					
ANR	1060217	ExpressionStatement	str ++	1270:5:34100:34105	1056898	3	True				
ANR	1060218	PostIncDecOperationExpression	str ++		1056898	0					
ANR	1060219	Identifier	str		1056898	0					
ANR	1060220	IncDec	++		1056898	1					
ANR	1060221	Statement	filename	1271:5:34112:34119	1056898	4	True				
ANR	1060222	Statement	=	1271:14:34121:34121	1056898	5	True				
ANR	1060223	Statement	r_str_newf	1271:16:34123:34132	1056898	6	True				
ANR	1060224	Statement	(	1271:27:34134:34134	1056898	7	True				
ANR	1060225	Statement	"""%s-0x%08"""	1271:28:34135:34144	1056898	8	True				
ANR	1060226	Statement	PFMT64x	1271:38:34145:34151	1056898	9	True				
ANR	1060227	Statement	","	1271:45:34152:34152	1056898	10	True				
ANR	1060228	Statement	prefix	1271:47:34154:34159	1056898	11	True				
ANR	1060229	Statement	","	1271:53:34160:34160	1056898	12	True				
ANR	1060230	Statement	core	1271:55:34162:34165	1056898	13	True				
ANR	1060231	Statement	->	1271:59:34166:34167	1056898	14	True				
ANR	1060232	Statement	offset	1271:61:34168:34173	1056898	15	True				
ANR	1060233	Statement	)	1271:67:34174:34174	1056898	16	True				
ANR	1060234	ExpressionStatement		1271:68:34175:34175	1056898	17	True				
ANR	1060235	ElseStatement	else		1056898	0					
ANR	1060236	CompoundStatement		562:11:13621:13621	1056898	0					
ANR	1060237	IfStatement	if ( * str )		1056898	0					
ANR	1060238	Condition	* str	1273:9:34199:34202	1056898	0	True				
ANR	1060239	UnaryOperationExpression	* str		1056898	0					
ANR	1060240	UnaryOperator	*		1056898	0					
ANR	1060241	Identifier	str		1056898	1					
ANR	1060242	CompoundStatement		563:15:13638:13638	1056898	1					
ANR	1060243	IfStatement	if ( str [ 1 ] == '?' )		1056898	0					
ANR	1060244	Condition	str [ 1 ] == '?'	1274:10:34217:34229	1056898	0	True				
ANR	1060245	EqualityExpression	str [ 1 ] == '?'		1056898	0		==			
ANR	1060246	ArrayIndexing	str [ 1 ]		1056898	0					
ANR	1060247	Identifier	str		1056898	0					
ANR	1060248	PrimaryExpression	1		1056898	1					
ANR	1060249	PrimaryExpression	'?'		1056898	1					
ANR	1060250	CompoundStatement		564:25:13665:13665	1056898	1					
ANR	1060251	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wt )"	1275:7:34241:34276	1056898	0	True				
ANR	1060252	CallExpression	"r_core_cmd_help ( core , help_msg_wt )"		1056898	0					
ANR	1060253	Callee	r_core_cmd_help		1056898	0					
ANR	1060254	Identifier	r_core_cmd_help		1056898	0					
ANR	1060255	ArgumentList	core		1056898	1					
ANR	1060256	Argument	core		1056898	0					
ANR	1060257	Identifier	core		1056898	0					
ANR	1060258	Argument	help_msg_wt		1056898	1					
ANR	1060259	Identifier	help_msg_wt		1056898	0					
ANR	1060260	ReturnStatement	return 0 ;	1276:7:34285:34293	1056898	1	True				
ANR	1060261	PrimaryExpression	0		1056898	0					
ANR	1060262	ExpressionStatement	filename = r_str_trim_ro ( str )	1278:6:34309:34339	1056898	1	True				
ANR	1060263	AssignmentExpression	filename = r_str_trim_ro ( str )		1056898	0		=			
ANR	1060264	Identifier	filename		1056898	0					
ANR	1060265	CallExpression	r_str_trim_ro ( str )		1056898	1					
ANR	1060266	Callee	r_str_trim_ro		1056898	0					
ANR	1060267	Identifier	r_str_trim_ro		1056898	0					
ANR	1060268	ArgumentList	str		1056898	1					
ANR	1060269	Argument	str		1056898	0					
ANR	1060270	Identifier	str		1056898	0					
ANR	1060271	ElseStatement	else		1056898	0					
ANR	1060272	CompoundStatement		569:12:13786:13786	1056898	0					
ANR	1060273	ExpressionStatement	"filename = """""	1280:6:34361:34374	1056898	0	True				
ANR	1060274	AssignmentExpression	"filename = """""		1056898	0		=			
ANR	1060275	Identifier	filename		1056898	0					
ANR	1060276	PrimaryExpression	""""""		1056898	1					
ANR	1060277	ElseStatement	else		1056898	0					
ANR	1060278	IfStatement	if ( * str == 'a' )		1056898	0					
ANR	1060279	Condition	* str == 'a'	1283:14:34403:34413	1056898	0	True				
ANR	1060280	EqualityExpression	* str == 'a'		1056898	0		==			
ANR	1060281	UnaryOperationExpression	* str		1056898	0					
ANR	1060282	UnaryOperator	*		1056898	0					
ANR	1060283	Identifier	str		1056898	1					
ANR	1060284	PrimaryExpression	'a'		1056898	1					
ANR	1060285	CompoundStatement		573:27:13849:13849	1056898	1					
ANR	1060286	ExpressionStatement	append = 1	1284:4:34431:34441	1056898	0	True				
ANR	1060287	AssignmentExpression	append = 1		1056898	0		=			
ANR	1060288	Identifier	append		1056898	0					
ANR	1060289	PrimaryExpression	1		1056898	1					
ANR	1060290	ExpressionStatement	str ++	1285:4:34447:34452	1056898	1	True				
ANR	1060291	PostIncDecOperationExpression	str ++		1056898	0					
ANR	1060292	Identifier	str		1056898	0					
ANR	1060293	IncDec	++		1056898	1					
ANR	1060294	IfStatement	if ( str [ 0 ] == ' ' )		1056898	2					
ANR	1060295	Condition	str [ 0 ] == ' '	1286:8:34462:34474	1056898	0	True				
ANR	1060296	EqualityExpression	str [ 0 ] == ' '		1056898	0		==			
ANR	1060297	ArrayIndexing	str [ 0 ]		1056898	0					
ANR	1060298	Identifier	str		1056898	0					
ANR	1060299	PrimaryExpression	0		1056898	1					
ANR	1060300	PrimaryExpression	' '		1056898	1					
ANR	1060301	CompoundStatement		576:23:13910:13910	1056898	1					
ANR	1060302	ExpressionStatement	filename = str + 1	1287:5:34484:34502	1056898	0	True				
ANR	1060303	AssignmentExpression	filename = str + 1		1056898	0		=			
ANR	1060304	Identifier	filename		1056898	0					
ANR	1060305	AdditiveExpression	str + 1		1056898	1		+			
ANR	1060306	Identifier	str		1056898	0					
ANR	1060307	PrimaryExpression	1		1056898	1					
ANR	1060308	ElseStatement	else		1056898	0					
ANR	1060309	CompoundStatement		579:5:13955:14021	1056898	0					
ANR	1060310	IdentifierDeclStatement	"const char * prefix = r_config_get ( core -> config , ""cfg.prefixdump"" ) ;"	1289:5:34522:34588	1056898	0	True				
ANR	1060311	IdentifierDecl	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	0					
ANR	1060312	IdentifierDeclType	const char *		1056898	0					
ANR	1060313	Identifier	prefix		1056898	1					
ANR	1060314	AssignmentExpression	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	2		=			
ANR	1060315	Identifier	prefix		1056898	0					
ANR	1060316	CallExpression	"r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	1					
ANR	1060317	Callee	r_config_get		1056898	0					
ANR	1060318	Identifier	r_config_get		1056898	0					
ANR	1060319	ArgumentList	core -> config		1056898	1					
ANR	1060320	Argument	core -> config		1056898	0					
ANR	1060321	PtrMemberAccess	core -> config		1056898	0					
ANR	1060322	Identifier	core		1056898	0					
ANR	1060323	Identifier	config		1056898	1					
ANR	1060324	Argument	"""cfg.prefixdump"""		1056898	1					
ANR	1060325	PrimaryExpression	"""cfg.prefixdump"""		1056898	0					
ANR	1060326	Statement	snprintf	1290:5:34595:34602	1056898	1	True				
ANR	1060327	Statement	(	1290:14:34604:34604	1056898	2	True				
ANR	1060328	Statement	_fn	1290:15:34605:34607	1056898	3	True				
ANR	1060329	Statement	","	1290:18:34608:34608	1056898	4	True				
ANR	1060330	Statement	sizeof	1290:20:34610:34615	1056898	5	True				
ANR	1060331	Statement	(	1290:27:34617:34617	1056898	6	True				
ANR	1060332	Statement	_fn	1290:28:34618:34620	1056898	7	True				
ANR	1060333	Statement	)	1290:31:34621:34621	1056898	8	True				
ANR	1060334	Statement	","	1290:32:34622:34622	1056898	9	True				
ANR	1060335	Statement	"""%s.0x%08"""	1290:34:34624:34633	1056898	10	True				
ANR	1060336	Statement	PFMT64x	1290:44:34634:34640	1056898	11	True				
ANR	1060337	Statement	","	1290:51:34641:34641	1056898	12	True				
ANR	1060338	Statement	prefix	1290:53:34643:34648	1056898	13	True				
ANR	1060339	Statement	","	1290:59:34649:34649	1056898	14	True				
ANR	1060340	Statement	poff	1290:61:34651:34654	1056898	15	True				
ANR	1060341	Statement	)	1290:65:34655:34655	1056898	16	True				
ANR	1060342	ExpressionStatement		1290:66:34656:34656	1056898	17	True				
ANR	1060343	ExpressionStatement	filename = _fn	1291:5:34663:34677	1056898	18	True				
ANR	1060344	AssignmentExpression	filename = _fn		1056898	0		=			
ANR	1060345	Identifier	filename		1056898	0					
ANR	1060346	Identifier	_fn		1056898	1					
ANR	1060347	ElseStatement	else		1056898	0					
ANR	1060348	IfStatement	if ( * str != ' ' )		1056898	0					
ANR	1060349	Condition	* str != ' '	1293:14:34699:34709	1056898	0	True				
ANR	1060350	EqualityExpression	* str != ' '		1056898	0		!=			
ANR	1060351	UnaryOperationExpression	* str		1056898	0					
ANR	1060352	UnaryOperator	*		1056898	0					
ANR	1060353	Identifier	str		1056898	1					
ANR	1060354	PrimaryExpression	' '		1056898	1					
ANR	1060355	CompoundStatement		584:4:14151:14217	1056898	1					
ANR	1060356	IdentifierDeclStatement	"const char * prefix = r_config_get ( core -> config , ""cfg.prefixdump"" ) ;"	1294:4:34718:34784	1056898	0	True				
ANR	1060357	IdentifierDecl	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	0					
ANR	1060358	IdentifierDeclType	const char *		1056898	0					
ANR	1060359	Identifier	prefix		1056898	1					
ANR	1060360	AssignmentExpression	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	2		=			
ANR	1060361	Identifier	prefix		1056898	0					
ANR	1060362	CallExpression	"r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	1					
ANR	1060363	Callee	r_config_get		1056898	0					
ANR	1060364	Identifier	r_config_get		1056898	0					
ANR	1060365	ArgumentList	core -> config		1056898	1					
ANR	1060366	Argument	core -> config		1056898	0					
ANR	1060367	PtrMemberAccess	core -> config		1056898	0					
ANR	1060368	Identifier	core		1056898	0					
ANR	1060369	Identifier	config		1056898	1					
ANR	1060370	Argument	"""cfg.prefixdump"""		1056898	1					
ANR	1060371	PrimaryExpression	"""cfg.prefixdump"""		1056898	0					
ANR	1060372	Statement	snprintf	1295:4:34790:34797	1056898	1	True				
ANR	1060373	Statement	(	1295:13:34799:34799	1056898	2	True				
ANR	1060374	Statement	_fn	1295:14:34800:34802	1056898	3	True				
ANR	1060375	Statement	","	1295:17:34803:34803	1056898	4	True				
ANR	1060376	Statement	sizeof	1295:19:34805:34810	1056898	5	True				
ANR	1060377	Statement	(	1295:26:34812:34812	1056898	6	True				
ANR	1060378	Statement	_fn	1295:27:34813:34815	1056898	7	True				
ANR	1060379	Statement	)	1295:30:34816:34816	1056898	8	True				
ANR	1060380	Statement	","	1295:31:34817:34817	1056898	9	True				
ANR	1060381	Statement	"""%s.0x%08"""	1295:33:34819:34828	1056898	10	True				
ANR	1060382	Statement	PFMT64x	1295:43:34829:34835	1056898	11	True				
ANR	1060383	Statement	","	1295:50:34836:34836	1056898	12	True				
ANR	1060384	Statement	prefix	1295:52:34838:34843	1056898	13	True				
ANR	1060385	Statement	","	1295:58:34844:34844	1056898	14	True				
ANR	1060386	Statement	poff	1295:60:34846:34849	1056898	15	True				
ANR	1060387	Statement	)	1295:64:34850:34850	1056898	16	True				
ANR	1060388	ExpressionStatement		1295:65:34851:34851	1056898	17	True				
ANR	1060389	ExpressionStatement	filename = _fn	1296:4:34857:34871	1056898	18	True				
ANR	1060390	AssignmentExpression	filename = _fn		1056898	0		=			
ANR	1060391	Identifier	filename		1056898	0					
ANR	1060392	Identifier	_fn		1056898	1					
ANR	1060393	ElseStatement	else		1056898	0					
ANR	1060394	CompoundStatement		587:10:14316:14316	1056898	0					
ANR	1060395	ExpressionStatement	filename = str + 1	1298:4:34889:34907	1056898	0	True				
ANR	1060396	AssignmentExpression	filename = str + 1		1056898	0		=			
ANR	1060397	Identifier	filename		1056898	0					
ANR	1060398	AdditiveExpression	str + 1		1056898	1		+			
ANR	1060399	Identifier	str		1056898	0					
ANR	1060400	PrimaryExpression	1		1056898	1					
ANR	1060401	ExpressionStatement	"tmp = * str ? strchr ( str + 1 , ' ' ) : NULL"	1300:3:34917:34957	1056898	5	True				
ANR	1060402	AssignmentExpression	"tmp = * str ? strchr ( str + 1 , ' ' ) : NULL"		1056898	0		=			
ANR	1060403	Identifier	tmp		1056898	0					
ANR	1060404	ConditionalExpression	"* str ? strchr ( str + 1 , ' ' ) : NULL"		1056898	1					
ANR	1060405	Condition	* str		1056898	0					
ANR	1060406	UnaryOperationExpression	* str		1056898	0					
ANR	1060407	UnaryOperator	*		1056898	0					
ANR	1060408	Identifier	str		1056898	1					
ANR	1060409	CallExpression	"strchr ( str + 1 , ' ' )"		1056898	1					
ANR	1060410	Callee	strchr		1056898	0					
ANR	1060411	Identifier	strchr		1056898	0					
ANR	1060412	ArgumentList	str + 1		1056898	1					
ANR	1060413	Argument	str + 1		1056898	0					
ANR	1060414	AdditiveExpression	str + 1		1056898	0		+			
ANR	1060415	Identifier	str		1056898	0					
ANR	1060416	PrimaryExpression	1		1056898	1					
ANR	1060417	Argument	' '		1056898	1					
ANR	1060418	PrimaryExpression	' '		1056898	0					
ANR	1060419	Identifier	NULL		1056898	2					
ANR	1060420	IfStatement	if ( ! filename || ! * filename )		1056898	6					
ANR	1060421	Condition	! filename || ! * filename	1301:7:34966:34988	1056898	0	True				
ANR	1060422	OrExpression	! filename || ! * filename		1056898	0		||			
ANR	1060423	UnaryOperationExpression	! filename		1056898	0					
ANR	1060424	UnaryOperator	!		1056898	0					
ANR	1060425	Identifier	filename		1056898	1					
ANR	1060426	UnaryOperationExpression	! * filename		1056898	1					
ANR	1060427	UnaryOperator	!		1056898	0					
ANR	1060428	UnaryOperationExpression	* filename		1056898	1					
ANR	1060429	UnaryOperator	*		1056898	0					
ANR	1060430	Identifier	filename		1056898	1					
ANR	1060431	CompoundStatement		592:4:14430:14496	1056898	1					
ANR	1060432	IdentifierDeclStatement	"const char * prefix = r_config_get ( core -> config , ""cfg.prefixdump"" ) ;"	1302:4:34997:35063	1056898	0	True				
ANR	1060433	IdentifierDecl	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	0					
ANR	1060434	IdentifierDeclType	const char *		1056898	0					
ANR	1060435	Identifier	prefix		1056898	1					
ANR	1060436	AssignmentExpression	"* prefix = r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	2		=			
ANR	1060437	Identifier	prefix		1056898	0					
ANR	1060438	CallExpression	"r_config_get ( core -> config , ""cfg.prefixdump"" )"		1056898	1					
ANR	1060439	Callee	r_config_get		1056898	0					
ANR	1060440	Identifier	r_config_get		1056898	0					
ANR	1060441	ArgumentList	core -> config		1056898	1					
ANR	1060442	Argument	core -> config		1056898	0					
ANR	1060443	PtrMemberAccess	core -> config		1056898	0					
ANR	1060444	Identifier	core		1056898	0					
ANR	1060445	Identifier	config		1056898	1					
ANR	1060446	Argument	"""cfg.prefixdump"""		1056898	1					
ANR	1060447	PrimaryExpression	"""cfg.prefixdump"""		1056898	0					
ANR	1060448	Statement	snprintf	1303:4:35069:35076	1056898	1	True				
ANR	1060449	Statement	(	1303:13:35078:35078	1056898	2	True				
ANR	1060450	Statement	_fn	1303:14:35079:35081	1056898	3	True				
ANR	1060451	Statement	","	1303:17:35082:35082	1056898	4	True				
ANR	1060452	Statement	sizeof	1303:19:35084:35089	1056898	5	True				
ANR	1060453	Statement	(	1303:26:35091:35091	1056898	6	True				
ANR	1060454	Statement	_fn	1303:27:35092:35094	1056898	7	True				
ANR	1060455	Statement	)	1303:30:35095:35095	1056898	8	True				
ANR	1060456	Statement	","	1303:31:35096:35096	1056898	9	True				
ANR	1060457	Statement	"""%s.0x%08"""	1303:33:35098:35107	1056898	10	True				
ANR	1060458	Statement	PFMT64x	1303:43:35108:35114	1056898	11	True				
ANR	1060459	Statement	","	1303:50:35115:35115	1056898	12	True				
ANR	1060460	Statement	prefix	1303:52:35117:35122	1056898	13	True				
ANR	1060461	Statement	","	1303:58:35123:35123	1056898	14	True				
ANR	1060462	Statement	poff	1303:60:35125:35128	1056898	15	True				
ANR	1060463	Statement	)	1303:64:35129:35129	1056898	16	True				
ANR	1060464	ExpressionStatement		1303:65:35130:35130	1056898	17	True				
ANR	1060465	ExpressionStatement	filename = _fn	1304:4:35136:35150	1056898	18	True				
ANR	1060466	AssignmentExpression	filename = _fn		1056898	0		=			
ANR	1060467	Identifier	filename		1056898	0					
ANR	1060468	Identifier	_fn		1056898	1					
ANR	1060469	IfStatement	if ( tmp )		1056898	7					
ANR	1060470	Condition	tmp	1306:7:35164:35166	1056898	0	True				
ANR	1060471	Identifier	tmp		1056898	0					
ANR	1060472	CompoundStatement		596:12:14602:14602	1056898	1					
ANR	1060473	IfStatement	if ( toend )		1056898	0					
ANR	1060474	Condition	toend	1307:8:35179:35183	1056898	0	True				
ANR	1060475	Identifier	toend		1056898	0					
ANR	1060476	CompoundStatement		597:15:14619:14619	1056898	1					
ANR	1060477	ExpressionStatement	"sz = r_io_fd_size ( core -> io , core -> file -> fd ) - core -> offset"	1308:5:35193:35252	1056898	0	True				
ANR	1060478	AssignmentExpression	"sz = r_io_fd_size ( core -> io , core -> file -> fd ) - core -> offset"		1056898	0		=			
ANR	1060479	Identifier	sz		1056898	0					
ANR	1060480	AdditiveExpression	"r_io_fd_size ( core -> io , core -> file -> fd ) - core -> offset"		1056898	1		-			
ANR	1060481	CallExpression	"r_io_fd_size ( core -> io , core -> file -> fd )"		1056898	0					
ANR	1060482	Callee	r_io_fd_size		1056898	0					
ANR	1060483	Identifier	r_io_fd_size		1056898	0					
ANR	1060484	ArgumentList	core -> io		1056898	1					
ANR	1060485	Argument	core -> io		1056898	0					
ANR	1060486	PtrMemberAccess	core -> io		1056898	0					
ANR	1060487	Identifier	core		1056898	0					
ANR	1060488	Identifier	io		1056898	1					
ANR	1060489	Argument	core -> file -> fd		1056898	1					
ANR	1060490	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1060491	PtrMemberAccess	core -> file		1056898	0					
ANR	1060492	Identifier	core		1056898	0					
ANR	1060493	Identifier	file		1056898	1					
ANR	1060494	Identifier	fd		1056898	1					
ANR	1060495	PtrMemberAccess	core -> offset		1056898	1					
ANR	1060496	Identifier	core		1056898	0					
ANR	1060497	Identifier	offset		1056898	1					
ANR	1060498	IfStatement	if ( sz < 0 )		1056898	1					
ANR	1060499	Condition	sz < 0	1309:9:35263:35268	1056898	0	True				
ANR	1060500	RelationalExpression	sz < 0		1056898	0		<			
ANR	1060501	Identifier	sz		1056898	0					
ANR	1060502	PrimaryExpression	0		1056898	1					
ANR	1060503	CompoundStatement		599:17:14704:14704	1056898	1					
ANR	1060504	ExpressionStatement	"eprintf ( ""Warning: File size is unknown."" )"	1310:6:35279:35321	1056898	0	True				
ANR	1060505	CallExpression	"eprintf ( ""Warning: File size is unknown."" )"		1056898	0					
ANR	1060506	Callee	eprintf		1056898	0					
ANR	1060507	Identifier	eprintf		1056898	0					
ANR	1060508	ArgumentList	"""Warning: File size is unknown."""		1056898	1					
ANR	1060509	Argument	"""Warning: File size is unknown."""		1056898	0					
ANR	1060510	PrimaryExpression	"""Warning: File size is unknown."""		1056898	0					
ANR	1060511	ElseStatement	else		1056898	0					
ANR	1060512	CompoundStatement		602:11:14774:14774	1056898	0					
ANR	1060513	ExpressionStatement	"sz = ( st64 ) r_num_math ( core -> num , tmp + 1 )"	1313:5:35348:35391	1056898	0	True				
ANR	1060514	AssignmentExpression	"sz = ( st64 ) r_num_math ( core -> num , tmp + 1 )"		1056898	0		=			
ANR	1060515	Identifier	sz		1056898	0					
ANR	1060516	CastExpression	"( st64 ) r_num_math ( core -> num , tmp + 1 )"		1056898	1					
ANR	1060517	CastTarget	st64		1056898	0					
ANR	1060518	CallExpression	"r_num_math ( core -> num , tmp + 1 )"		1056898	1					
ANR	1060519	Callee	r_num_math		1056898	0					
ANR	1060520	Identifier	r_num_math		1056898	0					
ANR	1060521	ArgumentList	core -> num		1056898	1					
ANR	1060522	Argument	core -> num		1056898	0					
ANR	1060523	PtrMemberAccess	core -> num		1056898	0					
ANR	1060524	Identifier	core		1056898	0					
ANR	1060525	Identifier	num		1056898	1					
ANR	1060526	Argument	tmp + 1		1056898	1					
ANR	1060527	AdditiveExpression	tmp + 1		1056898	0		+			
ANR	1060528	Identifier	tmp		1056898	0					
ANR	1060529	PrimaryExpression	1		1056898	1					
ANR	1060530	ExpressionStatement	* tmp = 0	1314:5:35398:35406	1056898	1	True				
ANR	1060531	AssignmentExpression	* tmp = 0		1056898	0		=			
ANR	1060532	UnaryOperationExpression	* tmp		1056898	0					
ANR	1060533	UnaryOperator	*		1056898	0					
ANR	1060534	Identifier	tmp		1056898	1					
ANR	1060535	PrimaryExpression	0		1056898	1					
ANR	1060536	IfStatement	if ( ( st64 ) sz < 1 )		1056898	1					
ANR	1060537	Condition	( st64 ) sz < 1	1316:8:35422:35433	1056898	0	True				
ANR	1060538	RelationalExpression	( st64 ) sz < 1		1056898	0		<			
ANR	1060539	CastExpression	( st64 ) sz		1056898	0					
ANR	1060540	CastTarget	st64		1056898	0					
ANR	1060541	Identifier	sz		1056898	1					
ANR	1060542	PrimaryExpression	1		1056898	1					
ANR	1060543	CompoundStatement		606:22:14869:14869	1056898	1					
ANR	1060544	ExpressionStatement	sz = 0	1318:5:35456:35462	1056898	0	True				
ANR	1060545	AssignmentExpression	sz = 0		1056898	0		=			
ANR	1060546	Identifier	sz		1056898	0					
ANR	1060547	PrimaryExpression	0		1056898	1					
ANR	1060548	ElseStatement	else		1056898	0					
ANR	1060549	IfStatement	"if ( ! r_core_dump ( core , filename , poff , ( ut64 ) sz , append ) )"		1056898	0					
ANR	1060550	Condition	"! r_core_dump ( core , filename , poff , ( ut64 ) sz , append )"	1319:15:35479:35531	1056898	0	True				
ANR	1060551	UnaryOperationExpression	"! r_core_dump ( core , filename , poff , ( ut64 ) sz , append )"		1056898	0					
ANR	1060552	UnaryOperator	!		1056898	0					
ANR	1060553	CallExpression	"r_core_dump ( core , filename , poff , ( ut64 ) sz , append )"		1056898	1					
ANR	1060554	Callee	r_core_dump		1056898	0					
ANR	1060555	Identifier	r_core_dump		1056898	0					
ANR	1060556	ArgumentList	core		1056898	1					
ANR	1060557	Argument	core		1056898	0					
ANR	1060558	Identifier	core		1056898	0					
ANR	1060559	Argument	filename		1056898	1					
ANR	1060560	Identifier	filename		1056898	0					
ANR	1060561	Argument	poff		1056898	2					
ANR	1060562	Identifier	poff		1056898	0					
ANR	1060563	Argument	( ut64 ) sz		1056898	3					
ANR	1060564	CastExpression	( ut64 ) sz		1056898	0					
ANR	1060565	CastTarget	ut64		1056898	0					
ANR	1060566	Identifier	sz		1056898	1					
ANR	1060567	Argument	append		1056898	4					
ANR	1060568	Identifier	append		1056898	0					
ANR	1060569	CompoundStatement		609:70:14967:14967	1056898	1					
ANR	1060570	ExpressionStatement	sz = - 1	1320:5:35541:35548	1056898	0	True				
ANR	1060571	AssignmentExpression	sz = - 1		1056898	0		=			
ANR	1060572	Identifier	sz		1056898	0					
ANR	1060573	UnaryOperationExpression	- 1		1056898	1					
ANR	1060574	UnaryOperator	-		1056898	0					
ANR	1060575	PrimaryExpression	1		1056898	1					
ANR	1060576	ElseStatement	else		1056898	0					
ANR	1060577	CompoundStatement		612:10:14999:14999	1056898	0					
ANR	1060578	IfStatement	if ( toend )		1056898	0					
ANR	1060579	Condition	toend	1323:8:35576:35580	1056898	0	True				
ANR	1060580	Identifier	toend		1056898	0					
ANR	1060581	CompoundStatement		613:15:15016:15016	1056898	1					
ANR	1060582	ExpressionStatement	"sz = r_io_fd_size ( core -> io , core -> file -> fd )"	1324:5:35590:35634	1056898	0	True				
ANR	1060583	AssignmentExpression	"sz = r_io_fd_size ( core -> io , core -> file -> fd )"		1056898	0		=			
ANR	1060584	Identifier	sz		1056898	0					
ANR	1060585	CallExpression	"r_io_fd_size ( core -> io , core -> file -> fd )"		1056898	1					
ANR	1060586	Callee	r_io_fd_size		1056898	0					
ANR	1060587	Identifier	r_io_fd_size		1056898	0					
ANR	1060588	ArgumentList	core -> io		1056898	1					
ANR	1060589	Argument	core -> io		1056898	0					
ANR	1060590	PtrMemberAccess	core -> io		1056898	0					
ANR	1060591	Identifier	core		1056898	0					
ANR	1060592	Identifier	io		1056898	1					
ANR	1060593	Argument	core -> file -> fd		1056898	1					
ANR	1060594	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1060595	PtrMemberAccess	core -> file		1056898	0					
ANR	1060596	Identifier	core		1056898	0					
ANR	1060597	Identifier	file		1056898	1					
ANR	1060598	Identifier	fd		1056898	1					
ANR	1060599	IfStatement	if ( sz < 0 )		1056898	1					
ANR	1060600	Condition	sz < 0	1325:9:35645:35650	1056898	0	True				
ANR	1060601	RelationalExpression	sz < 0		1056898	0		<			
ANR	1060602	Identifier	sz		1056898	0					
ANR	1060603	PrimaryExpression	0		1056898	1					
ANR	1060604	CompoundStatement		615:17:15086:15086	1056898	1					
ANR	1060605	ExpressionStatement	"eprintf ( ""Warning: File size is unknown."" )"	1326:6:35661:35703	1056898	0	True				
ANR	1060606	CallExpression	"eprintf ( ""Warning: File size is unknown."" )"		1056898	0					
ANR	1060607	Callee	eprintf		1056898	0					
ANR	1060608	Identifier	eprintf		1056898	0					
ANR	1060609	ArgumentList	"""Warning: File size is unknown."""		1056898	1					
ANR	1060610	Argument	"""Warning: File size is unknown."""		1056898	0					
ANR	1060611	PrimaryExpression	"""Warning: File size is unknown."""		1056898	0					
ANR	1060612	IfStatement	if ( sz != - 1 && core -> offset <= sz )		1056898	2					
ANR	1060613	Condition	sz != - 1 && core -> offset <= sz	1328:9:35721:35750	1056898	0	True				
ANR	1060614	AndExpression	sz != - 1 && core -> offset <= sz		1056898	0		&&			
ANR	1060615	EqualityExpression	sz != - 1		1056898	0		!=			
ANR	1060616	Identifier	sz		1056898	0					
ANR	1060617	UnaryOperationExpression	- 1		1056898	1					
ANR	1060618	UnaryOperator	-		1056898	0					
ANR	1060619	PrimaryExpression	1		1056898	1					
ANR	1060620	RelationalExpression	core -> offset <= sz		1056898	1		<=			
ANR	1060621	PtrMemberAccess	core -> offset		1056898	0					
ANR	1060622	Identifier	core		1056898	0					
ANR	1060623	Identifier	offset		1056898	1					
ANR	1060624	Identifier	sz		1056898	1					
ANR	1060625	CompoundStatement		618:41:15186:15186	1056898	1					
ANR	1060626	ExpressionStatement	sz -= core -> offset	1329:6:35761:35779	1056898	0	True				
ANR	1060627	AssignmentExpression	sz -= core -> offset		1056898	0		-=			
ANR	1060628	Identifier	sz		1056898	0					
ANR	1060629	PtrMemberAccess	core -> offset		1056898	1					
ANR	1060630	Identifier	core		1056898	0					
ANR	1060631	Identifier	offset		1056898	1					
ANR	1060632	IfStatement	"if ( ! r_core_dump ( core , filename , core -> offset , ( ut64 ) sz , append ) )"		1056898	1					
ANR	1060633	Condition	"! r_core_dump ( core , filename , core -> offset , ( ut64 ) sz , append )"	1330:10:35791:35851	1056898	0	True				
ANR	1060634	UnaryOperationExpression	"! r_core_dump ( core , filename , core -> offset , ( ut64 ) sz , append )"		1056898	0					
ANR	1060635	UnaryOperator	!		1056898	0					
ANR	1060636	CallExpression	"r_core_dump ( core , filename , core -> offset , ( ut64 ) sz , append )"		1056898	1					
ANR	1060637	Callee	r_core_dump		1056898	0					
ANR	1060638	Identifier	r_core_dump		1056898	0					
ANR	1060639	ArgumentList	core		1056898	1					
ANR	1060640	Argument	core		1056898	0					
ANR	1060641	Identifier	core		1056898	0					
ANR	1060642	Argument	filename		1056898	1					
ANR	1060643	Identifier	filename		1056898	0					
ANR	1060644	Argument	core -> offset		1056898	2					
ANR	1060645	PtrMemberAccess	core -> offset		1056898	0					
ANR	1060646	Identifier	core		1056898	0					
ANR	1060647	Identifier	offset		1056898	1					
ANR	1060648	Argument	( ut64 ) sz		1056898	3					
ANR	1060649	CastExpression	( ut64 ) sz		1056898	0					
ANR	1060650	CastTarget	ut64		1056898	0					
ANR	1060651	Identifier	sz		1056898	1					
ANR	1060652	Argument	append		1056898	4					
ANR	1060653	Identifier	append		1056898	0					
ANR	1060654	CompoundStatement		620:73:15287:15287	1056898	1					
ANR	1060655	ExpressionStatement	sz = - 1	1331:7:35863:35870	1056898	0	True				
ANR	1060656	AssignmentExpression	sz = - 1		1056898	0		=			
ANR	1060657	Identifier	sz		1056898	0					
ANR	1060658	UnaryOperationExpression	- 1		1056898	1					
ANR	1060659	UnaryOperator	-		1056898	0					
ANR	1060660	PrimaryExpression	1		1056898	1					
ANR	1060661	ElseStatement	else		1056898	0					
ANR	1060662	CompoundStatement		623:12:15325:15325	1056898	0					
ANR	1060663	ExpressionStatement	sz = - 1	1334:6:35900:35907	1056898	0	True				
ANR	1060664	AssignmentExpression	sz = - 1		1056898	0		=			
ANR	1060665	Identifier	sz		1056898	0					
ANR	1060666	UnaryOperationExpression	- 1		1056898	1					
ANR	1060667	UnaryOperator	-		1056898	0					
ANR	1060668	PrimaryExpression	1		1056898	1					
ANR	1060669	ElseStatement	else		1056898	0					
ANR	1060670	CompoundStatement		626:11:15360:15360	1056898	0					
ANR	1060671	ExpressionStatement	sz = core -> blocksize	1337:5:35934:35954	1056898	0	True				
ANR	1060672	AssignmentExpression	sz = core -> blocksize		1056898	0		=			
ANR	1060673	Identifier	sz		1056898	0					
ANR	1060674	PtrMemberAccess	core -> blocksize		1056898	1					
ANR	1060675	Identifier	core		1056898	0					
ANR	1060676	Identifier	blocksize		1056898	1					
ANR	1060677	IfStatement	"if ( ! r_file_dump ( filename , core -> block , sz , append ) )"		1056898	1					
ANR	1060678	Condition	"! r_file_dump ( filename , core -> block , sz , append )"	1338:9:35965:36012	1056898	0	True				
ANR	1060679	UnaryOperationExpression	"! r_file_dump ( filename , core -> block , sz , append )"		1056898	0					
ANR	1060680	UnaryOperator	!		1056898	0					
ANR	1060681	CallExpression	"r_file_dump ( filename , core -> block , sz , append )"		1056898	1					
ANR	1060682	Callee	r_file_dump		1056898	0					
ANR	1060683	Identifier	r_file_dump		1056898	0					
ANR	1060684	ArgumentList	filename		1056898	1					
ANR	1060685	Argument	filename		1056898	0					
ANR	1060686	Identifier	filename		1056898	0					
ANR	1060687	Argument	core -> block		1056898	1					
ANR	1060688	PtrMemberAccess	core -> block		1056898	0					
ANR	1060689	Identifier	core		1056898	0					
ANR	1060690	Identifier	block		1056898	1					
ANR	1060691	Argument	sz		1056898	2					
ANR	1060692	Identifier	sz		1056898	0					
ANR	1060693	Argument	append		1056898	3					
ANR	1060694	Identifier	append		1056898	0					
ANR	1060695	CompoundStatement		628:59:15448:15448	1056898	1					
ANR	1060696	ExpressionStatement	sz = - 1	1339:6:36023:36030	1056898	0	True				
ANR	1060697	AssignmentExpression	sz = - 1		1056898	0		=			
ANR	1060698	Identifier	sz		1056898	0					
ANR	1060699	UnaryOperationExpression	- 1		1056898	1					
ANR	1060700	UnaryOperator	-		1056898	0					
ANR	1060701	PrimaryExpression	1		1056898	1					
ANR	1060702	IfStatement	if ( sz >= 0 )		1056898	8					
ANR	1060703	Condition	sz >= 0	1343:7:36057:36063	1056898	0	True				
ANR	1060704	RelationalExpression	sz >= 0		1056898	0		>=			
ANR	1060705	Identifier	sz		1056898	0					
ANR	1060706	PrimaryExpression	0		1056898	1					
ANR	1060707	CompoundStatement		633:16:15499:15499	1056898	1					
ANR	1060708	Statement	eprintf	1344:4:36072:36078	1056898	0	True				
ANR	1060709	Statement	(	1344:12:36080:36080	1056898	1	True				
ANR	1060710	Statement	"""Dumped %"""	1344:13:36081:36090	1056898	2	True				
ANR	1060711	Statement	PFMT64d	1344:23:36091:36097	1056898	3	True				
ANR	1060712	Statement	""" bytes from 0x%08"""	1344:30:36098:36116	1056898	4	True				
ANR	1060713	Statement	PFMT64x	1344:49:36117:36123	1056898	5	True				
ANR	1060714	Statement	""" into %s\\n"""	1344:56:36124:36135	1056898	6	True				
ANR	1060715	Statement	","	1344:68:36136:36136	1056898	7	True				
ANR	1060716	Statement	sz	1345:6:36144:36145	1056898	8	True				
ANR	1060717	Statement	","	1345:8:36146:36146	1056898	9	True				
ANR	1060718	Statement	poff	1345:10:36148:36151	1056898	10	True				
ANR	1060719	Statement	","	1345:14:36152:36152	1056898	11	True				
ANR	1060720	Statement	filename	1345:16:36154:36161	1056898	12	True				
ANR	1060721	Statement	)	1345:24:36162:36162	1056898	13	True				
ANR	1060722	ExpressionStatement		1345:25:36163:36163	1056898	14	True				
ANR	1060723	BreakStatement	break ;	1348:2:36176:36181	1056898	56	True				
ANR	1060724	Label	case 'f' :	1349:1:36184:36192	1056898	57	True				
ANR	1060725	ExpressionStatement	"cmd_wf ( core , input )"	1350:2:36204:36224	1056898	58	True				
ANR	1060726	CallExpression	"cmd_wf ( core , input )"		1056898	0					
ANR	1060727	Callee	cmd_wf		1056898	0					
ANR	1060728	Identifier	cmd_wf		1056898	0					
ANR	1060729	ArgumentList	core		1056898	1					
ANR	1060730	Argument	core		1056898	0					
ANR	1060731	Identifier	core		1056898	0					
ANR	1060732	Argument	input		1056898	1					
ANR	1060733	Identifier	input		1056898	0					
ANR	1060734	BreakStatement	break ;	1351:2:36228:36233	1056898	59	True				
ANR	1060735	Label	case 'w' :	1352:1:36236:36244	1056898	60	True				
ANR	1060736	ExpressionStatement	str ++	1353:2:36256:36261	1056898	61	True				
ANR	1060737	PostIncDecOperationExpression	str ++		1056898	0					
ANR	1060738	Identifier	str		1056898	0					
ANR	1060739	IncDec	++		1056898	1					
ANR	1060740	ExpressionStatement	len = ( len - 1 ) << 1	1354:2:36265:36285	1056898	62	True				
ANR	1060741	AssignmentExpression	len = ( len - 1 ) << 1		1056898	0		=			
ANR	1060742	Identifier	len		1056898	0					
ANR	1060743	ShiftExpression	( len - 1 ) << 1		1056898	1		<<			
ANR	1060744	AdditiveExpression	len - 1		1056898	0		-			
ANR	1060745	Identifier	len		1056898	0					
ANR	1060746	PrimaryExpression	1		1056898	1					
ANR	1060747	PrimaryExpression	1		1056898	1					
ANR	1060748	ExpressionStatement	tmp = ( len > 0 ) ? malloc ( len + 1 ) : NULL	1355:2:36289:36330	1056898	63	True				
ANR	1060749	AssignmentExpression	tmp = ( len > 0 ) ? malloc ( len + 1 ) : NULL		1056898	0		=			
ANR	1060750	Identifier	tmp		1056898	0					
ANR	1060751	ConditionalExpression	( len > 0 ) ? malloc ( len + 1 ) : NULL		1056898	1					
ANR	1060752	Condition	len > 0		1056898	0					
ANR	1060753	RelationalExpression	len > 0		1056898	0		>			
ANR	1060754	Identifier	len		1056898	0					
ANR	1060755	PrimaryExpression	0		1056898	1					
ANR	1060756	CallExpression	malloc ( len + 1 )		1056898	1					
ANR	1060757	Callee	malloc		1056898	0					
ANR	1060758	Identifier	malloc		1056898	0					
ANR	1060759	ArgumentList	len + 1		1056898	1					
ANR	1060760	Argument	len + 1		1056898	0					
ANR	1060761	AdditiveExpression	len + 1		1056898	0		+			
ANR	1060762	Identifier	len		1056898	0					
ANR	1060763	PrimaryExpression	1		1056898	1					
ANR	1060764	Identifier	NULL		1056898	2					
ANR	1060765	IfStatement	if ( tmp )		1056898	64					
ANR	1060766	Condition	tmp	1356:6:36338:36340	1056898	0	True				
ANR	1060767	Identifier	tmp		1056898	0					
ANR	1060768	CompoundStatement		646:11:15776:15776	1056898	1					
ANR	1060769	ForStatement	for ( i = 0 ; i < len ; i ++ )		1056898	0					
ANR	1060770	ForInit	i = 0 ;	1357:8:36353:36356	1056898	0	True				
ANR	1060771	AssignmentExpression	i = 0		1056898	0		=			
ANR	1060772	Identifier	i		1056898	0					
ANR	1060773	PrimaryExpression	0		1056898	1					
ANR	1060774	Condition	i < len	1357:13:36358:36362	1056898	1	True				
ANR	1060775	RelationalExpression	i < len		1056898	0		<			
ANR	1060776	Identifier	i		1056898	0					
ANR	1060777	Identifier	len		1056898	1					
ANR	1060778	PostIncDecOperationExpression	i ++	1357:20:36365:36367	1056898	2	True				
ANR	1060779	Identifier	i		1056898	0					
ANR	1060780	IncDec	++		1056898	1					
ANR	1060781	CompoundStatement		647:25:15803:15803	1056898	3					
ANR	1060782	IfStatement	if ( i % 2 )		1056898	0					
ANR	1060783	Condition	i % 2	1358:8:36380:36382	1056898	0	True				
ANR	1060784	MultiplicativeExpression	i % 2		1056898	0		%			
ANR	1060785	Identifier	i		1056898	0					
ANR	1060786	PrimaryExpression	2		1056898	1					
ANR	1060787	ExpressionStatement	tmp [ i ] = 0	1358:13:36385:36395	1056898	1	True				
ANR	1060788	AssignmentExpression	tmp [ i ] = 0		1056898	0		=			
ANR	1060789	ArrayIndexing	tmp [ i ]		1056898	0					
ANR	1060790	Identifier	tmp		1056898	0					
ANR	1060791	Identifier	i		1056898	1					
ANR	1060792	PrimaryExpression	0		1056898	1					
ANR	1060793	ElseStatement	else		1056898	0					
ANR	1060794	ExpressionStatement	tmp [ i ] = str [ i >> 1 ]	1359:9:36406:36424	1056898	0	True				
ANR	1060795	AssignmentExpression	tmp [ i ] = str [ i >> 1 ]		1056898	0		=			
ANR	1060796	ArrayIndexing	tmp [ i ]		1056898	0					
ANR	1060797	Identifier	tmp		1056898	0					
ANR	1060798	Identifier	i		1056898	1					
ANR	1060799	ArrayIndexing	str [ i >> 1 ]		1056898	1					
ANR	1060800	Identifier	str		1056898	0					
ANR	1060801	ShiftExpression	i >> 1		1056898	1		>>			
ANR	1060802	Identifier	i		1056898	0					
ANR	1060803	PrimaryExpression	1		1056898	1					
ANR	1060804	ExpressionStatement	str = tmp	1361:3:36434:36443	1056898	1	True				
ANR	1060805	AssignmentExpression	str = tmp		1056898	0		=			
ANR	1060806	Identifier	str		1056898	0					
ANR	1060807	Identifier	tmp		1056898	1					
ANR	1060808	IfStatement	if ( core -> file )		1056898	2					
ANR	1060809	Condition	core -> file	1362:7:36452:36461	1056898	0	True				
ANR	1060810	PtrMemberAccess	core -> file		1056898	0					
ANR	1060811	Identifier	core		1056898	0					
ANR	1060812	Identifier	file		1056898	1					
ANR	1060813	CompoundStatement		652:19:15897:15897	1056898	1					
ANR	1060814	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	1363:4:36470:36508	1056898	0	True				
ANR	1060815	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1056898	0					
ANR	1060816	Callee	r_io_use_fd		1056898	0					
ANR	1060817	Identifier	r_io_use_fd		1056898	0					
ANR	1060818	ArgumentList	core -> io		1056898	1					
ANR	1060819	Argument	core -> io		1056898	0					
ANR	1060820	PtrMemberAccess	core -> io		1056898	0					
ANR	1060821	Identifier	core		1056898	0					
ANR	1060822	Identifier	io		1056898	1					
ANR	1060823	Argument	core -> file -> fd		1056898	1					
ANR	1060824	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1060825	PtrMemberAccess	core -> file		1056898	0					
ANR	1060826	Identifier	core		1056898	0					
ANR	1060827	Identifier	file		1056898	1					
ANR	1060828	Identifier	fd		1056898	1					
ANR	1060829	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , ( const ut8 * ) str , len )"	1365:3:36518:36578	1056898	3	True				
ANR	1060830	CallExpression	"r_io_write_at ( core -> io , core -> offset , ( const ut8 * ) str , len )"		1056898	0					
ANR	1060831	Callee	r_io_write_at		1056898	0					
ANR	1060832	Identifier	r_io_write_at		1056898	0					
ANR	1060833	ArgumentList	core -> io		1056898	1					
ANR	1060834	Argument	core -> io		1056898	0					
ANR	1060835	PtrMemberAccess	core -> io		1056898	0					
ANR	1060836	Identifier	core		1056898	0					
ANR	1060837	Identifier	io		1056898	1					
ANR	1060838	Argument	core -> offset		1056898	1					
ANR	1060839	PtrMemberAccess	core -> offset		1056898	0					
ANR	1060840	Identifier	core		1056898	0					
ANR	1060841	Identifier	offset		1056898	1					
ANR	1060842	Argument	( const ut8 * ) str		1056898	2					
ANR	1060843	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1060844	CastTarget	const ut8 *		1056898	0					
ANR	1060845	Identifier	str		1056898	1					
ANR	1060846	Argument	len		1056898	3					
ANR	1060847	Identifier	len		1056898	0					
ANR	1060848	ExpressionStatement	"WSEEK ( core , len )"	1366:3:36583:36600	1056898	4	True				
ANR	1060849	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1060850	Callee	WSEEK		1056898	0					
ANR	1060851	Identifier	WSEEK		1056898	0					
ANR	1060852	ArgumentList	core		1056898	1					
ANR	1060853	Argument	core		1056898	0					
ANR	1060854	Identifier	core		1056898	0					
ANR	1060855	Argument	len		1056898	1					
ANR	1060856	Identifier	len		1056898	0					
ANR	1060857	ExpressionStatement	r_core_block_read ( core )	1367:3:36605:36629	1056898	5	True				
ANR	1060858	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1060859	Callee	r_core_block_read		1056898	0					
ANR	1060860	Identifier	r_core_block_read		1056898	0					
ANR	1060861	ArgumentList	core		1056898	1					
ANR	1060862	Argument	core		1056898	0					
ANR	1060863	Identifier	core		1056898	0					
ANR	1060864	ExpressionStatement	free ( tmp )	1368:3:36634:36644	1056898	6	True				
ANR	1060865	CallExpression	free ( tmp )		1056898	0					
ANR	1060866	Callee	free		1056898	0					
ANR	1060867	Identifier	free		1056898	0					
ANR	1060868	ArgumentList	tmp		1056898	1					
ANR	1060869	Argument	tmp		1056898	0					
ANR	1060870	Identifier	tmp		1056898	0					
ANR	1060871	ElseStatement	else		1056898	0					
ANR	1060872	CompoundStatement		659:9:16088:16088	1056898	0					
ANR	1060873	ExpressionStatement	"eprintf ( ""Cannot malloc %d\\n"" , len )"	1370:3:36660:36695	1056898	0	True				
ANR	1060874	CallExpression	"eprintf ( ""Cannot malloc %d\\n"" , len )"		1056898	0					
ANR	1060875	Callee	eprintf		1056898	0					
ANR	1060876	Identifier	eprintf		1056898	0					
ANR	1060877	ArgumentList	"""Cannot malloc %d\\n"""		1056898	1					
ANR	1060878	Argument	"""Cannot malloc %d\\n"""		1056898	0					
ANR	1060879	PrimaryExpression	"""Cannot malloc %d\\n"""		1056898	0					
ANR	1060880	Argument	len		1056898	1					
ANR	1060881	Identifier	len		1056898	0					
ANR	1060882	BreakStatement	break ;	1372:2:36703:36708	1056898	65	True				
ANR	1060883	Label	case 'x' :	1373:1:36711:36719	1056898	66	True				
ANR	1060884	SwitchStatement	switch ( input [ 1 ] )		1056898	67					
ANR	1060885	Condition	input [ 1 ]	1374:10:36739:36746	1056898	0	True				
ANR	1060886	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1060887	Identifier	input		1056898	0					
ANR	1060888	PrimaryExpression	1		1056898	1					
ANR	1060889	CompoundStatement		664:20:16182:16182	1056898	1					
ANR	1060890	Label	case ' ' :	1375:2:36753:36761	1056898	0	True				
ANR	1060891	ExpressionStatement	"cmd_write_hexpair ( core , input + 1 )"	1376:3:36775:36810	1056898	1	True				
ANR	1060892	CallExpression	"cmd_write_hexpair ( core , input + 1 )"		1056898	0					
ANR	1060893	Callee	cmd_write_hexpair		1056898	0					
ANR	1060894	Identifier	cmd_write_hexpair		1056898	0					
ANR	1060895	ArgumentList	core		1056898	1					
ANR	1060896	Argument	core		1056898	0					
ANR	1060897	Identifier	core		1056898	0					
ANR	1060898	Argument	input + 1		1056898	1					
ANR	1060899	AdditiveExpression	input + 1		1056898	0		+			
ANR	1060900	Identifier	input		1056898	0					
ANR	1060901	PrimaryExpression	1		1056898	1					
ANR	1060902	BreakStatement	break ;	1377:3:36815:36820	1056898	2	True				
ANR	1060903	Label	case 'f' :	1378:2:36824:36832	1056898	3	True				
ANR	1060904	ExpressionStatement	arg = ( const char * ) ( input + ( ( input [ 2 ] == ' ' ) ? 3 : 2 ) )	1379:3:36846:36899	1056898	4	True				
ANR	1060905	AssignmentExpression	arg = ( const char * ) ( input + ( ( input [ 2 ] == ' ' ) ? 3 : 2 ) )		1056898	0		=			
ANR	1060906	Identifier	arg		1056898	0					
ANR	1060907	CastExpression	( const char * ) ( input + ( ( input [ 2 ] == ' ' ) ? 3 : 2 ) )		1056898	1					
ANR	1060908	CastTarget	const char *		1056898	0					
ANR	1060909	AdditiveExpression	input + ( ( input [ 2 ] == ' ' ) ? 3 : 2 )		1056898	1		+			
ANR	1060910	Identifier	input		1056898	0					
ANR	1060911	ConditionalExpression	( input [ 2 ] == ' ' ) ? 3 : 2		1056898	1					
ANR	1060912	Condition	input [ 2 ] == ' '		1056898	0					
ANR	1060913	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1060914	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1060915	Identifier	input		1056898	0					
ANR	1060916	PrimaryExpression	2		1056898	1					
ANR	1060917	PrimaryExpression	' '		1056898	1					
ANR	1060918	PrimaryExpression	3		1056898	1					
ANR	1060919	PrimaryExpression	2		1056898	2					
ANR	1060920	IfStatement	"if ( ! strcmp ( arg , ""-"" ) )"		1056898	5					
ANR	1060921	Condition	"! strcmp ( arg , ""-"" )"	1380:7:36908:36925	1056898	0	True				
ANR	1060922	UnaryOperationExpression	"! strcmp ( arg , ""-"" )"		1056898	0					
ANR	1060923	UnaryOperator	!		1056898	0					
ANR	1060924	CallExpression	"strcmp ( arg , ""-"" )"		1056898	1					
ANR	1060925	Callee	strcmp		1056898	0					
ANR	1060926	Identifier	strcmp		1056898	0					
ANR	1060927	ArgumentList	arg		1056898	1					
ANR	1060928	Argument	arg		1056898	0					
ANR	1060929	Identifier	arg		1056898	0					
ANR	1060930	Argument	"""-"""		1056898	1					
ANR	1060931	PrimaryExpression	"""-"""		1056898	0					
ANR	1060932	CompoundStatement		673:4:16394:16437	1056898	1					
ANR	1060933	IdentifierDeclStatement	int len ;	1381:4:36934:36941	1056898	0	True				
ANR	1060934	IdentifierDecl	len		1056898	0					
ANR	1060935	IdentifierDeclType	int		1056898	0					
ANR	1060936	Identifier	len		1056898	1					
ANR	1060937	IdentifierDeclStatement	ut8 * out ;	1382:4:36947:36955	1056898	1	True				
ANR	1060938	IdentifierDecl	* out		1056898	0					
ANR	1060939	IdentifierDeclType	ut8 *		1056898	0					
ANR	1060940	Identifier	out		1056898	1					
ANR	1060941	IdentifierDeclStatement	"char * in = r_core_editor ( core , NULL , NULL ) ;"	1383:4:36961:37004	1056898	2	True				
ANR	1060942	IdentifierDecl	"* in = r_core_editor ( core , NULL , NULL )"		1056898	0					
ANR	1060943	IdentifierDeclType	char *		1056898	0					
ANR	1060944	Identifier	in		1056898	1					
ANR	1060945	AssignmentExpression	"* in = r_core_editor ( core , NULL , NULL )"		1056898	2		=			
ANR	1060946	Identifier	in		1056898	0					
ANR	1060947	CallExpression	"r_core_editor ( core , NULL , NULL )"		1056898	1					
ANR	1060948	Callee	r_core_editor		1056898	0					
ANR	1060949	Identifier	r_core_editor		1056898	0					
ANR	1060950	ArgumentList	core		1056898	1					
ANR	1060951	Argument	core		1056898	0					
ANR	1060952	Identifier	core		1056898	0					
ANR	1060953	Argument	NULL		1056898	1					
ANR	1060954	Identifier	NULL		1056898	0					
ANR	1060955	Argument	NULL		1056898	2					
ANR	1060956	Identifier	NULL		1056898	0					
ANR	1060957	IfStatement	if ( in )		1056898	3					
ANR	1060958	Condition	in	1384:8:37014:37015	1056898	0	True				
ANR	1060959	Identifier	in		1056898	0					
ANR	1060960	CompoundStatement		674:12:16451:16451	1056898	1					
ANR	1060961	ExpressionStatement	out = ( ut8 * ) strdup ( in )	1385:5:37025:37049	1056898	0	True				
ANR	1060962	AssignmentExpression	out = ( ut8 * ) strdup ( in )		1056898	0		=			
ANR	1060963	Identifier	out		1056898	0					
ANR	1060964	CastExpression	( ut8 * ) strdup ( in )		1056898	1					
ANR	1060965	CastTarget	ut8 *		1056898	0					
ANR	1060966	CallExpression	strdup ( in )		1056898	1					
ANR	1060967	Callee	strdup		1056898	0					
ANR	1060968	Identifier	strdup		1056898	0					
ANR	1060969	ArgumentList	in		1056898	1					
ANR	1060970	Argument	in		1056898	0					
ANR	1060971	Identifier	in		1056898	0					
ANR	1060972	IfStatement	if ( out )		1056898	1					
ANR	1060973	Condition	out	1386:9:37060:37062	1056898	0	True				
ANR	1060974	Identifier	out		1056898	0					
ANR	1060975	CompoundStatement		676:14:16498:16498	1056898	1					
ANR	1060976	ExpressionStatement	"len = r_hex_str2bin ( in , out )"	1387:6:37073:37102	1056898	0	True				
ANR	1060977	AssignmentExpression	"len = r_hex_str2bin ( in , out )"		1056898	0		=			
ANR	1060978	Identifier	len		1056898	0					
ANR	1060979	CallExpression	"r_hex_str2bin ( in , out )"		1056898	1					
ANR	1060980	Callee	r_hex_str2bin		1056898	0					
ANR	1060981	Identifier	r_hex_str2bin		1056898	0					
ANR	1060982	ArgumentList	in		1056898	1					
ANR	1060983	Argument	in		1056898	0					
ANR	1060984	Identifier	in		1056898	0					
ANR	1060985	Argument	out		1056898	1					
ANR	1060986	Identifier	out		1056898	0					
ANR	1060987	IfStatement	if ( len > 0 )		1056898	1					
ANR	1060988	Condition	len > 0	1388:10:37114:37120	1056898	0	True				
ANR	1060989	RelationalExpression	len > 0		1056898	0		>			
ANR	1060990	Identifier	len		1056898	0					
ANR	1060991	PrimaryExpression	0		1056898	1					
ANR	1060992	CompoundStatement		678:19:16556:16556	1056898	1					
ANR	1060993	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , out , len )"	1389:7:37132:37180	1056898	0	True				
ANR	1060994	CallExpression	"r_io_write_at ( core -> io , core -> offset , out , len )"		1056898	0					
ANR	1060995	Callee	r_io_write_at		1056898	0					
ANR	1060996	Identifier	r_io_write_at		1056898	0					
ANR	1060997	ArgumentList	core -> io		1056898	1					
ANR	1060998	Argument	core -> io		1056898	0					
ANR	1060999	PtrMemberAccess	core -> io		1056898	0					
ANR	1061000	Identifier	core		1056898	0					
ANR	1061001	Identifier	io		1056898	1					
ANR	1061002	Argument	core -> offset		1056898	1					
ANR	1061003	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061004	Identifier	core		1056898	0					
ANR	1061005	Identifier	offset		1056898	1					
ANR	1061006	Argument	out		1056898	2					
ANR	1061007	Identifier	out		1056898	0					
ANR	1061008	Argument	len		1056898	3					
ANR	1061009	Identifier	len		1056898	0					
ANR	1061010	ExpressionStatement	core -> num -> value = len	1390:7:37189:37211	1056898	1	True				
ANR	1061011	AssignmentExpression	core -> num -> value = len		1056898	0		=			
ANR	1061012	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1061013	PtrMemberAccess	core -> num		1056898	0					
ANR	1061014	Identifier	core		1056898	0					
ANR	1061015	Identifier	num		1056898	1					
ANR	1061016	Identifier	value		1056898	1					
ANR	1061017	Identifier	len		1056898	1					
ANR	1061018	ElseStatement	else		1056898	0					
ANR	1061019	CompoundStatement		681:13:16659:16659	1056898	0					
ANR	1061020	ExpressionStatement	core -> num -> value = 0	1392:7:37235:37255	1056898	0	True				
ANR	1061021	AssignmentExpression	core -> num -> value = 0		1056898	0		=			
ANR	1061022	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1061023	PtrMemberAccess	core -> num		1056898	0					
ANR	1061024	Identifier	core		1056898	0					
ANR	1061025	Identifier	num		1056898	1					
ANR	1061026	Identifier	value		1056898	1					
ANR	1061027	PrimaryExpression	0		1056898	1					
ANR	1061028	ExpressionStatement	free ( out )	1394:6:37271:37281	1056898	2	True				
ANR	1061029	CallExpression	free ( out )		1056898	0					
ANR	1061030	Callee	free		1056898	0					
ANR	1061031	Identifier	free		1056898	0					
ANR	1061032	ArgumentList	out		1056898	1					
ANR	1061033	Argument	out		1056898	0					
ANR	1061034	Identifier	out		1056898	0					
ANR	1061035	ExpressionStatement	free ( in )	1396:5:37295:37304	1056898	2	True				
ANR	1061036	CallExpression	free ( in )		1056898	0					
ANR	1061037	Callee	free		1056898	0					
ANR	1061038	Identifier	free		1056898	0					
ANR	1061039	ArgumentList	in		1056898	1					
ANR	1061040	Argument	in		1056898	0					
ANR	1061041	Identifier	in		1056898	0					
ANR	1061042	ElseStatement	else		1056898	0					
ANR	1061043	IfStatement	if ( r_file_exists ( arg ) )		1056898	0					
ANR	1061044	Condition	r_file_exists ( arg )	1398:14:37326:37344	1056898	0	True				
ANR	1061045	CallExpression	r_file_exists ( arg )		1056898	0					
ANR	1061046	Callee	r_file_exists		1056898	0					
ANR	1061047	Identifier	r_file_exists		1056898	0					
ANR	1061048	ArgumentList	arg		1056898	1					
ANR	1061049	Argument	arg		1056898	0					
ANR	1061050	Identifier	arg		1056898	0					
ANR	1061051	CompoundStatement		688:35:16780:16780	1056898	1					
ANR	1061052	IfStatement	"if ( ( buf = r_file_slurp_hexpairs ( arg , & size ) ) )"		1056898	0					
ANR	1061053	Condition	"buf = r_file_slurp_hexpairs ( arg , & size )"	1399:8:37357:37398	1056898	0	True				
ANR	1061054	AssignmentExpression	"buf = r_file_slurp_hexpairs ( arg , & size )"		1056898	0		=			
ANR	1061055	Identifier	buf		1056898	0					
ANR	1061056	CallExpression	"r_file_slurp_hexpairs ( arg , & size )"		1056898	1					
ANR	1061057	Callee	r_file_slurp_hexpairs		1056898	0					
ANR	1061058	Identifier	r_file_slurp_hexpairs		1056898	0					
ANR	1061059	ArgumentList	arg		1056898	1					
ANR	1061060	Argument	arg		1056898	0					
ANR	1061061	Identifier	arg		1056898	0					
ANR	1061062	Argument	& size		1056898	1					
ANR	1061063	UnaryOperationExpression	& size		1056898	0					
ANR	1061064	UnaryOperator	&		1056898	0					
ANR	1061065	Identifier	size		1056898	1					
ANR	1061066	CompoundStatement		689:52:16834:16834	1056898	1					
ANR	1061067	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	1400:5:37408:37446	1056898	0	True				
ANR	1061068	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1056898	0					
ANR	1061069	Callee	r_io_use_fd		1056898	0					
ANR	1061070	Identifier	r_io_use_fd		1056898	0					
ANR	1061071	ArgumentList	core -> io		1056898	1					
ANR	1061072	Argument	core -> io		1056898	0					
ANR	1061073	PtrMemberAccess	core -> io		1056898	0					
ANR	1061074	Identifier	core		1056898	0					
ANR	1061075	Identifier	io		1056898	1					
ANR	1061076	Argument	core -> file -> fd		1056898	1					
ANR	1061077	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1061078	PtrMemberAccess	core -> file		1056898	0					
ANR	1061079	Identifier	core		1056898	0					
ANR	1061080	Identifier	file		1056898	1					
ANR	1061081	Identifier	fd		1056898	1					
ANR	1061082	IfStatement	"if ( r_io_write_at ( core -> io , core -> offset , buf , size ) > 0 )"		1056898	1					
ANR	1061083	Condition	"r_io_write_at ( core -> io , core -> offset , buf , size ) > 0"	1401:9:37457:37509	1056898	0	True				
ANR	1061084	RelationalExpression	"r_io_write_at ( core -> io , core -> offset , buf , size ) > 0"		1056898	0		>			
ANR	1061085	CallExpression	"r_io_write_at ( core -> io , core -> offset , buf , size )"		1056898	0					
ANR	1061086	Callee	r_io_write_at		1056898	0					
ANR	1061087	Identifier	r_io_write_at		1056898	0					
ANR	1061088	ArgumentList	core -> io		1056898	1					
ANR	1061089	Argument	core -> io		1056898	0					
ANR	1061090	PtrMemberAccess	core -> io		1056898	0					
ANR	1061091	Identifier	core		1056898	0					
ANR	1061092	Identifier	io		1056898	1					
ANR	1061093	Argument	core -> offset		1056898	1					
ANR	1061094	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061095	Identifier	core		1056898	0					
ANR	1061096	Identifier	offset		1056898	1					
ANR	1061097	Argument	buf		1056898	2					
ANR	1061098	Identifier	buf		1056898	0					
ANR	1061099	Argument	size		1056898	3					
ANR	1061100	Identifier	size		1056898	0					
ANR	1061101	PrimaryExpression	0		1056898	1					
ANR	1061102	CompoundStatement		691:64:16945:16945	1056898	1					
ANR	1061103	ExpressionStatement	core -> num -> value = size	1402:6:37520:37543	1056898	0	True				
ANR	1061104	AssignmentExpression	core -> num -> value = size		1056898	0		=			
ANR	1061105	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1061106	PtrMemberAccess	core -> num		1056898	0					
ANR	1061107	Identifier	core		1056898	0					
ANR	1061108	Identifier	num		1056898	1					
ANR	1061109	Identifier	value		1056898	1					
ANR	1061110	Identifier	size		1056898	1					
ANR	1061111	ExpressionStatement	"WSEEK ( core , size )"	1403:6:37551:37569	1056898	1	True				
ANR	1061112	CallExpression	"WSEEK ( core , size )"		1056898	0					
ANR	1061113	Callee	WSEEK		1056898	0					
ANR	1061114	Identifier	WSEEK		1056898	0					
ANR	1061115	ArgumentList	core		1056898	1					
ANR	1061116	Argument	core		1056898	0					
ANR	1061117	Identifier	core		1056898	0					
ANR	1061118	Argument	size		1056898	1					
ANR	1061119	Identifier	size		1056898	0					
ANR	1061120	ExpressionStatement	free ( buf )	1405:5:37583:37593	1056898	2	True				
ANR	1061121	CallExpression	free ( buf )		1056898	0					
ANR	1061122	Callee	free		1056898	0					
ANR	1061123	Identifier	free		1056898	0					
ANR	1061124	ArgumentList	buf		1056898	1					
ANR	1061125	Argument	buf		1056898	0					
ANR	1061126	Identifier	buf		1056898	0					
ANR	1061127	ExpressionStatement	r_core_block_read ( core )	1406:5:37600:37624	1056898	3	True				
ANR	1061128	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1061129	Callee	r_core_block_read		1056898	0					
ANR	1061130	Identifier	r_core_block_read		1056898	0					
ANR	1061131	ArgumentList	core		1056898	1					
ANR	1061132	Argument	core		1056898	0					
ANR	1061133	Identifier	core		1056898	0					
ANR	1061134	ElseStatement	else		1056898	0					
ANR	1061135	CompoundStatement		697:11:17070:17070	1056898	0					
ANR	1061136	ExpressionStatement	"eprintf ( ""This file doesnt contains hexpairs\\n"" )"	1408:5:37644:37692	1056898	0	True				
ANR	1061137	CallExpression	"eprintf ( ""This file doesnt contains hexpairs\\n"" )"		1056898	0					
ANR	1061138	Callee	eprintf		1056898	0					
ANR	1061139	Identifier	eprintf		1056898	0					
ANR	1061140	ArgumentList	"""This file doesnt contains hexpairs\\n"""		1056898	1					
ANR	1061141	Argument	"""This file doesnt contains hexpairs\\n"""		1056898	0					
ANR	1061142	PrimaryExpression	"""This file doesnt contains hexpairs\\n"""		1056898	0					
ANR	1061143	ElseStatement	else		1056898	0					
ANR	1061144	CompoundStatement		700:10:17143:17143	1056898	0					
ANR	1061145	ExpressionStatement	"eprintf ( ""Cannot open file '%s'\\n"" , arg )"	1411:4:37716:37756	1056898	0	True				
ANR	1061146	CallExpression	"eprintf ( ""Cannot open file '%s'\\n"" , arg )"		1056898	0					
ANR	1061147	Callee	eprintf		1056898	0					
ANR	1061148	Identifier	eprintf		1056898	0					
ANR	1061149	ArgumentList	"""Cannot open file '%s'\\n"""		1056898	1					
ANR	1061150	Argument	"""Cannot open file '%s'\\n"""		1056898	0					
ANR	1061151	PrimaryExpression	"""Cannot open file '%s'\\n"""		1056898	0					
ANR	1061152	Argument	arg		1056898	1					
ANR	1061153	Identifier	arg		1056898	0					
ANR	1061154	BreakStatement	break ;	1413:3:37766:37771	1056898	6	True				
ANR	1061155	Label	case 's' :	1414:2:37775:37783	1056898	7	True				
ANR	1061156	CompoundStatement		706:4:17236:17281	1056898	8					
ANR	1061157	IdentifierDeclStatement	"int len = cmd_write_hexpair ( core , input + 2 ) ;"	1416:4:37803:37848	1056898	0	True				
ANR	1061158	IdentifierDecl	"len = cmd_write_hexpair ( core , input + 2 )"		1056898	0					
ANR	1061159	IdentifierDeclType	int		1056898	0					
ANR	1061160	Identifier	len		1056898	1					
ANR	1061161	AssignmentExpression	"len = cmd_write_hexpair ( core , input + 2 )"		1056898	2		=			
ANR	1061162	Identifier	len		1056898	0					
ANR	1061163	CallExpression	"cmd_write_hexpair ( core , input + 2 )"		1056898	1					
ANR	1061164	Callee	cmd_write_hexpair		1056898	0					
ANR	1061165	Identifier	cmd_write_hexpair		1056898	0					
ANR	1061166	ArgumentList	core		1056898	1					
ANR	1061167	Argument	core		1056898	0					
ANR	1061168	Identifier	core		1056898	0					
ANR	1061169	Argument	input + 2		1056898	1					
ANR	1061170	AdditiveExpression	input + 2		1056898	0		+			
ANR	1061171	Identifier	input		1056898	0					
ANR	1061172	PrimaryExpression	2		1056898	1					
ANR	1061173	IfStatement	if ( len > 0 )		1056898	1					
ANR	1061174	Condition	len > 0	1417:8:37858:37864	1056898	0	True				
ANR	1061175	RelationalExpression	len > 0		1056898	0		>			
ANR	1061176	Identifier	len		1056898	0					
ANR	1061177	PrimaryExpression	0		1056898	1					
ANR	1061178	CompoundStatement		707:17:17300:17300	1056898	1					
ANR	1061179	ExpressionStatement	"r_core_seek_delta ( core , len )"	1418:5:37874:37903	1056898	0	True				
ANR	1061180	CallExpression	"r_core_seek_delta ( core , len )"		1056898	0					
ANR	1061181	Callee	r_core_seek_delta		1056898	0					
ANR	1061182	Identifier	r_core_seek_delta		1056898	0					
ANR	1061183	ArgumentList	core		1056898	1					
ANR	1061184	Argument	core		1056898	0					
ANR	1061185	Identifier	core		1056898	0					
ANR	1061186	Argument	len		1056898	1					
ANR	1061187	Identifier	len		1056898	0					
ANR	1061188	ExpressionStatement	core -> num -> value = len	1419:5:37910:37932	1056898	1	True				
ANR	1061189	AssignmentExpression	core -> num -> value = len		1056898	0		=			
ANR	1061190	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1061191	PtrMemberAccess	core -> num		1056898	0					
ANR	1061192	Identifier	core		1056898	0					
ANR	1061193	Identifier	num		1056898	1					
ANR	1061194	Identifier	value		1056898	1					
ANR	1061195	Identifier	len		1056898	1					
ANR	1061196	ElseStatement	else		1056898	0					
ANR	1061197	CompoundStatement		710:11:17378:17378	1056898	0					
ANR	1061198	ExpressionStatement	core -> num -> value = 0	1421:5:37952:37972	1056898	0	True				
ANR	1061199	AssignmentExpression	core -> num -> value = 0		1056898	0		=			
ANR	1061200	PtrMemberAccess	core -> num -> value		1056898	0					
ANR	1061201	PtrMemberAccess	core -> num		1056898	0					
ANR	1061202	Identifier	core		1056898	0					
ANR	1061203	Identifier	num		1056898	1					
ANR	1061204	Identifier	value		1056898	1					
ANR	1061205	PrimaryExpression	0		1056898	1					
ANR	1061206	BreakStatement	break ;	1424:3:37988:37993	1056898	9	True				
ANR	1061207	Label	default :	1425:2:37997:38004	1056898	10	True				
ANR	1061208	Identifier	default		1056898	0					
ANR	1061209	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wx )"	1426:3:38009:38044	1056898	11	True				
ANR	1061210	CallExpression	"r_core_cmd_help ( core , help_msg_wx )"		1056898	0					
ANR	1061211	Callee	r_core_cmd_help		1056898	0					
ANR	1061212	Identifier	r_core_cmd_help		1056898	0					
ANR	1061213	ArgumentList	core		1056898	1					
ANR	1061214	Argument	core		1056898	0					
ANR	1061215	Identifier	core		1056898	0					
ANR	1061216	Argument	help_msg_wx		1056898	1					
ANR	1061217	Identifier	help_msg_wx		1056898	0					
ANR	1061218	BreakStatement	break ;	1427:3:38049:38054	1056898	12	True				
ANR	1061219	BreakStatement	break ;	1429:2:38062:38067	1056898	68	True				
ANR	1061220	Label	case 'a' :	1430:1:38070:38078	1056898	69	True				
ANR	1061221	SwitchStatement	switch ( input [ 1 ] )		1056898	70					
ANR	1061222	Condition	input [ 1 ]	1431:10:38098:38105	1056898	0	True				
ANR	1061223	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1061224	Identifier	input		1056898	0					
ANR	1061225	PrimaryExpression	1		1056898	1					
ANR	1061226	CompoundStatement		721:20:17541:17541	1056898	1					
ANR	1061227	Label	case 'o' :	1432:2:38112:38120	1056898	0	True				
ANR	1061228	IfStatement	if ( input [ 2 ] == ' ' )		1056898	1					
ANR	1061229	Condition	input [ 2 ] == ' '	1433:7:38138:38152	1056898	0	True				
ANR	1061230	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1061231	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061232	Identifier	input		1056898	0					
ANR	1061233	PrimaryExpression	2		1056898	1					
ANR	1061234	PrimaryExpression	' '		1056898	1					
ANR	1061235	CompoundStatement		724:4:17594:17631	1056898	1					
ANR	1061236	IdentifierDeclStatement	char * op = r_str_trim_dup ( input + 3 ) ;	1434:4:38161:38198	1056898	0	True				
ANR	1061237	IdentifierDecl	* op = r_str_trim_dup ( input + 3 )		1056898	0					
ANR	1061238	IdentifierDeclType	char *		1056898	0					
ANR	1061239	Identifier	op		1056898	1					
ANR	1061240	AssignmentExpression	* op = r_str_trim_dup ( input + 3 )		1056898	2		=			
ANR	1061241	Identifier	op		1056898	0					
ANR	1061242	CallExpression	r_str_trim_dup ( input + 3 )		1056898	1					
ANR	1061243	Callee	r_str_trim_dup		1056898	0					
ANR	1061244	Identifier	r_str_trim_dup		1056898	0					
ANR	1061245	ArgumentList	input + 3		1056898	1					
ANR	1061246	Argument	input + 3		1056898	0					
ANR	1061247	AdditiveExpression	input + 3		1056898	0		+			
ANR	1061248	Identifier	input		1056898	0					
ANR	1061249	PrimaryExpression	3		1056898	1					
ANR	1061250	IfStatement	if ( op )		1056898	1					
ANR	1061251	Condition	op	1435:8:38208:38209	1056898	0	True				
ANR	1061252	Identifier	op		1056898	0					
ANR	1061253	CompoundStatement		725:12:17645:17645	1056898	1					
ANR	1061254	ExpressionStatement	"r_core_hack ( core , op )"	1436:5:38219:38241	1056898	0	True				
ANR	1061255	CallExpression	"r_core_hack ( core , op )"		1056898	0					
ANR	1061256	Callee	r_core_hack		1056898	0					
ANR	1061257	Identifier	r_core_hack		1056898	0					
ANR	1061258	ArgumentList	core		1056898	1					
ANR	1061259	Argument	core		1056898	0					
ANR	1061260	Identifier	core		1056898	0					
ANR	1061261	Argument	op		1056898	1					
ANR	1061262	Identifier	op		1056898	0					
ANR	1061263	ExpressionStatement	free ( op )	1437:5:38248:38257	1056898	1	True				
ANR	1061264	CallExpression	free ( op )		1056898	0					
ANR	1061265	Callee	free		1056898	0					
ANR	1061266	Identifier	free		1056898	0					
ANR	1061267	ArgumentList	op		1056898	1					
ANR	1061268	Argument	op		1056898	0					
ANR	1061269	Identifier	op		1056898	0					
ANR	1061270	ElseStatement	else		1056898	0					
ANR	1061271	CompoundStatement		729:10:17708:17708	1056898	0					
ANR	1061272	ExpressionStatement	r_core_hack_help ( core )	1440:4:38281:38304	1056898	0	True				
ANR	1061273	CallExpression	r_core_hack_help ( core )		1056898	0					
ANR	1061274	Callee	r_core_hack_help		1056898	0					
ANR	1061275	Identifier	r_core_hack_help		1056898	0					
ANR	1061276	ArgumentList	core		1056898	1					
ANR	1061277	Argument	core		1056898	0					
ANR	1061278	Identifier	core		1056898	0					
ANR	1061279	BreakStatement	break ;	1442:3:38314:38319	1056898	2	True				
ANR	1061280	Label	case ' ' :	1443:2:38323:38331	1056898	3	True				
ANR	1061281	Label	case 'i' :	1444:2:38335:38343	1056898	4	True				
ANR	1061282	Label	case '*' :	1445:2:38347:38355	1056898	5	True				
ANR	1061283	CompoundStatement		737:3:17844:17859	1056898	6					
ANR	1061284	IdentifierDeclStatement	const char * file = r_str_trim_ro ( input + 2 ) ;	1446:3:38362:38406	1056898	0	True				
ANR	1061285	IdentifierDecl	* file = r_str_trim_ro ( input + 2 )		1056898	0					
ANR	1061286	IdentifierDeclType	const char *		1056898	0					
ANR	1061287	Identifier	file		1056898	1					
ANR	1061288	AssignmentExpression	* file = r_str_trim_ro ( input + 2 )		1056898	2		=			
ANR	1061289	Identifier	file		1056898	0					
ANR	1061290	CallExpression	r_str_trim_ro ( input + 2 )		1056898	1					
ANR	1061291	Callee	r_str_trim_ro		1056898	0					
ANR	1061292	Identifier	r_str_trim_ro		1056898	0					
ANR	1061293	ArgumentList	input + 2		1056898	1					
ANR	1061294	Argument	input + 2		1056898	0					
ANR	1061295	AdditiveExpression	input + 2		1056898	0		+			
ANR	1061296	Identifier	input		1056898	0					
ANR	1061297	PrimaryExpression	2		1056898	1					
ANR	1061298	IdentifierDeclStatement	RAsmCode * acode ;	1447:3:38411:38426	1056898	1	True				
ANR	1061299	IdentifierDecl	* acode		1056898	0					
ANR	1061300	IdentifierDeclType	RAsmCode *		1056898	0					
ANR	1061301	Identifier	acode		1056898	1					
ANR	1061302	ExpressionStatement	"r_asm_set_pc ( core -> assembler , core -> offset )"	1448:3:38431:38475	1056898	2	True				
ANR	1061303	CallExpression	"r_asm_set_pc ( core -> assembler , core -> offset )"		1056898	0					
ANR	1061304	Callee	r_asm_set_pc		1056898	0					
ANR	1061305	Identifier	r_asm_set_pc		1056898	0					
ANR	1061306	ArgumentList	core -> assembler		1056898	1					
ANR	1061307	Argument	core -> assembler		1056898	0					
ANR	1061308	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061309	Identifier	core		1056898	0					
ANR	1061310	Identifier	assembler		1056898	1					
ANR	1061311	Argument	core -> offset		1056898	1					
ANR	1061312	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061313	Identifier	core		1056898	0					
ANR	1061314	Identifier	offset		1056898	1					
ANR	1061315	ExpressionStatement	"acode = r_asm_massemble ( core -> assembler , file )"	1449:3:38480:38527	1056898	3	True				
ANR	1061316	AssignmentExpression	"acode = r_asm_massemble ( core -> assembler , file )"		1056898	0		=			
ANR	1061317	Identifier	acode		1056898	0					
ANR	1061318	CallExpression	"r_asm_massemble ( core -> assembler , file )"		1056898	1					
ANR	1061319	Callee	r_asm_massemble		1056898	0					
ANR	1061320	Identifier	r_asm_massemble		1056898	0					
ANR	1061321	ArgumentList	core -> assembler		1056898	1					
ANR	1061322	Argument	core -> assembler		1056898	0					
ANR	1061323	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061324	Identifier	core		1056898	0					
ANR	1061325	Identifier	assembler		1056898	1					
ANR	1061326	Argument	file		1056898	1					
ANR	1061327	Identifier	file		1056898	0					
ANR	1061328	IfStatement	if ( acode )		1056898	4					
ANR	1061329	Condition	acode	1450:7:38536:38540	1056898	0	True				
ANR	1061330	Identifier	acode		1056898	0					
ANR	1061331	CompoundStatement		740:14:17976:17976	1056898	1					
ANR	1061332	IfStatement	if ( input [ 1 ] == 'i' )		1056898	0					
ANR	1061333	Condition	input [ 1 ] == 'i'	1451:8:38553:38567	1056898	0	True				
ANR	1061334	EqualityExpression	input [ 1 ] == 'i'		1056898	0		==			
ANR	1061335	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1061336	Identifier	input		1056898	0					
ANR	1061337	PrimaryExpression	1		1056898	1					
ANR	1061338	PrimaryExpression	'i'		1056898	1					
ANR	1061339	CompoundStatement		742:5:18019:18033	1056898	1					
ANR	1061340	IdentifierDeclStatement	RAnalOp analop ;	1452:5:38586:38600	1056898	0	True				
ANR	1061341	IdentifierDecl	analop		1056898	0					
ANR	1061342	IdentifierDeclType	RAnalOp		1056898	0					
ANR	1061343	Identifier	analop		1056898	1					
ANR	1061344	IfStatement	"if ( ! r_anal_op ( core -> anal , & analop , core -> offset , core -> block , core -> blocksize , R_ANAL_OP_MASK_BASIC ) )"		1056898	1					
ANR	1061345	Condition	"! r_anal_op ( core -> anal , & analop , core -> offset , core -> block , core -> blocksize , R_ANAL_OP_MASK_BASIC )"	1453:9:38611:38708	1056898	0	True				
ANR	1061346	UnaryOperationExpression	"! r_anal_op ( core -> anal , & analop , core -> offset , core -> block , core -> blocksize , R_ANAL_OP_MASK_BASIC )"		1056898	0					
ANR	1061347	UnaryOperator	!		1056898	0					
ANR	1061348	CallExpression	"r_anal_op ( core -> anal , & analop , core -> offset , core -> block , core -> blocksize , R_ANAL_OP_MASK_BASIC )"		1056898	1					
ANR	1061349	Callee	r_anal_op		1056898	0					
ANR	1061350	Identifier	r_anal_op		1056898	0					
ANR	1061351	ArgumentList	core -> anal		1056898	1					
ANR	1061352	Argument	core -> anal		1056898	0					
ANR	1061353	PtrMemberAccess	core -> anal		1056898	0					
ANR	1061354	Identifier	core		1056898	0					
ANR	1061355	Identifier	anal		1056898	1					
ANR	1061356	Argument	& analop		1056898	1					
ANR	1061357	UnaryOperationExpression	& analop		1056898	0					
ANR	1061358	UnaryOperator	&		1056898	0					
ANR	1061359	Identifier	analop		1056898	1					
ANR	1061360	Argument	core -> offset		1056898	2					
ANR	1061361	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061362	Identifier	core		1056898	0					
ANR	1061363	Identifier	offset		1056898	1					
ANR	1061364	Argument	core -> block		1056898	3					
ANR	1061365	PtrMemberAccess	core -> block		1056898	0					
ANR	1061366	Identifier	core		1056898	0					
ANR	1061367	Identifier	block		1056898	1					
ANR	1061368	Argument	core -> blocksize		1056898	4					
ANR	1061369	PtrMemberAccess	core -> blocksize		1056898	0					
ANR	1061370	Identifier	core		1056898	0					
ANR	1061371	Identifier	blocksize		1056898	1					
ANR	1061372	Argument	R_ANAL_OP_MASK_BASIC		1056898	5					
ANR	1061373	Identifier	R_ANAL_OP_MASK_BASIC		1056898	0					
ANR	1061374	CompoundStatement		743:109:18144:18144	1056898	1					
ANR	1061375	ExpressionStatement	"eprintf ( ""Invalid instruction?\\n"" )"	1454:6:38719:38753	1056898	0	True				
ANR	1061376	CallExpression	"eprintf ( ""Invalid instruction?\\n"" )"		1056898	0					
ANR	1061377	Callee	eprintf		1056898	0					
ANR	1061378	Identifier	eprintf		1056898	0					
ANR	1061379	ArgumentList	"""Invalid instruction?\\n"""		1056898	1					
ANR	1061380	Argument	"""Invalid instruction?\\n"""		1056898	0					
ANR	1061381	PrimaryExpression	"""Invalid instruction?\\n"""		1056898	0					
ANR	1061382	BreakStatement	break ;	1455:6:38761:38766	1056898	1	True				
ANR	1061383	IfStatement	if ( analop . size < acode -> len )		1056898	2					
ANR	1061384	Condition	analop . size < acode -> len	1457:9:38784:38807	1056898	0	True				
ANR	1061385	RelationalExpression	analop . size < acode -> len		1056898	0		<			
ANR	1061386	MemberAccess	analop . size		1056898	0					
ANR	1061387	Identifier	analop		1056898	0					
ANR	1061388	Identifier	size		1056898	1					
ANR	1061389	PtrMemberAccess	acode -> len		1056898	1					
ANR	1061390	Identifier	acode		1056898	0					
ANR	1061391	Identifier	len		1056898	1					
ANR	1061392	CompoundStatement		747:35:18243:18243	1056898	1					
ANR	1061393	ExpressionStatement	"eprintf ( ""Doesnt fit\\n"" )"	1458:6:38818:38842	1056898	0	True				
ANR	1061394	CallExpression	"eprintf ( ""Doesnt fit\\n"" )"		1056898	0					
ANR	1061395	Callee	eprintf		1056898	0					
ANR	1061396	Identifier	eprintf		1056898	0					
ANR	1061397	ArgumentList	"""Doesnt fit\\n"""		1056898	1					
ANR	1061398	Argument	"""Doesnt fit\\n"""		1056898	0					
ANR	1061399	PrimaryExpression	"""Doesnt fit\\n"""		1056898	0					
ANR	1061400	ExpressionStatement	r_anal_op_fini ( & analop )	1459:6:38850:38874	1056898	1	True				
ANR	1061401	CallExpression	r_anal_op_fini ( & analop )		1056898	0					
ANR	1061402	Callee	r_anal_op_fini		1056898	0					
ANR	1061403	Identifier	r_anal_op_fini		1056898	0					
ANR	1061404	ArgumentList	& analop		1056898	1					
ANR	1061405	Argument	& analop		1056898	0					
ANR	1061406	UnaryOperationExpression	& analop		1056898	0					
ANR	1061407	UnaryOperator	&		1056898	0					
ANR	1061408	Identifier	analop		1056898	1					
ANR	1061409	ExpressionStatement	r_asm_code_free ( acode )	1460:6:38882:38905	1056898	2	True				
ANR	1061410	CallExpression	r_asm_code_free ( acode )		1056898	0					
ANR	1061411	Callee	r_asm_code_free		1056898	0					
ANR	1061412	Identifier	r_asm_code_free		1056898	0					
ANR	1061413	ArgumentList	acode		1056898	1					
ANR	1061414	Argument	acode		1056898	0					
ANR	1061415	Identifier	acode		1056898	0					
ANR	1061416	BreakStatement	break ;	1461:6:38913:38918	1056898	3	True				
ANR	1061417	ExpressionStatement	r_anal_op_fini ( & analop )	1463:5:38932:38956	1056898	3	True				
ANR	1061418	CallExpression	r_anal_op_fini ( & analop )		1056898	0					
ANR	1061419	Callee	r_anal_op_fini		1056898	0					
ANR	1061420	Identifier	r_anal_op_fini		1056898	0					
ANR	1061421	ArgumentList	& analop		1056898	1					
ANR	1061422	Argument	& analop		1056898	0					
ANR	1061423	UnaryOperationExpression	& analop		1056898	0					
ANR	1061424	UnaryOperator	&		1056898	0					
ANR	1061425	Identifier	analop		1056898	1					
ANR	1061426	ExpressionStatement	"r_core_cmd0 ( core , ""wao nop"" )"	1464:5:38963:38992	1056898	4	True				
ANR	1061427	CallExpression	"r_core_cmd0 ( core , ""wao nop"" )"		1056898	0					
ANR	1061428	Callee	r_core_cmd0		1056898	0					
ANR	1061429	Identifier	r_core_cmd0		1056898	0					
ANR	1061430	ArgumentList	core		1056898	1					
ANR	1061431	Argument	core		1056898	0					
ANR	1061432	Identifier	core		1056898	0					
ANR	1061433	Argument	"""wao nop"""		1056898	1					
ANR	1061434	PrimaryExpression	"""wao nop"""		1056898	0					
ANR	1061435	IfStatement	if ( acode -> len > 0 )		1056898	1					
ANR	1061436	Condition	acode -> len > 0	1466:8:39008:39021	1056898	0	True				
ANR	1061437	RelationalExpression	acode -> len > 0		1056898	0		>			
ANR	1061438	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061439	Identifier	acode		1056898	0					
ANR	1061440	Identifier	len		1056898	1					
ANR	1061441	PrimaryExpression	0		1056898	1					
ANR	1061442	CompoundStatement		757:5:18464:18502	1056898	1					
ANR	1061443	IdentifierDeclStatement	char * hex = r_asm_code_get_hex ( acode ) ;	1467:5:39031:39069	1056898	0	True				
ANR	1061444	IdentifierDecl	* hex = r_asm_code_get_hex ( acode )		1056898	0					
ANR	1061445	IdentifierDeclType	char *		1056898	0					
ANR	1061446	Identifier	hex		1056898	1					
ANR	1061447	AssignmentExpression	* hex = r_asm_code_get_hex ( acode )		1056898	2		=			
ANR	1061448	Identifier	hex		1056898	0					
ANR	1061449	CallExpression	r_asm_code_get_hex ( acode )		1056898	1					
ANR	1061450	Callee	r_asm_code_get_hex		1056898	0					
ANR	1061451	Identifier	r_asm_code_get_hex		1056898	0					
ANR	1061452	ArgumentList	acode		1056898	1					
ANR	1061453	Argument	acode		1056898	0					
ANR	1061454	Identifier	acode		1056898	0					
ANR	1061455	IfStatement	if ( input [ 1 ] == '*' )		1056898	1					
ANR	1061456	Condition	input [ 1 ] == '*'	1468:9:39080:39094	1056898	0	True				
ANR	1061457	EqualityExpression	input [ 1 ] == '*'		1056898	0		==			
ANR	1061458	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1061459	Identifier	input		1056898	0					
ANR	1061460	PrimaryExpression	1		1056898	1					
ANR	1061461	PrimaryExpression	'*'		1056898	1					
ANR	1061462	CompoundStatement		758:26:18530:18530	1056898	1					
ANR	1061463	ExpressionStatement	"r_cons_printf ( ""wx %s\\n"" , hex )"	1469:6:39105:39135	1056898	0	True				
ANR	1061464	CallExpression	"r_cons_printf ( ""wx %s\\n"" , hex )"		1056898	0					
ANR	1061465	Callee	r_cons_printf		1056898	0					
ANR	1061466	Identifier	r_cons_printf		1056898	0					
ANR	1061467	ArgumentList	"""wx %s\\n"""		1056898	1					
ANR	1061468	Argument	"""wx %s\\n"""		1056898	0					
ANR	1061469	PrimaryExpression	"""wx %s\\n"""		1056898	0					
ANR	1061470	Argument	hex		1056898	1					
ANR	1061471	Identifier	hex		1056898	0					
ANR	1061472	ElseStatement	else		1056898	0					
ANR	1061473	CompoundStatement		760:12:18582:18582	1056898	0					
ANR	1061474	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len ) )"		1056898	0					
ANR	1061475	Condition	"! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"	1471:10:39161:39223	1056898	0	True				
ANR	1061476	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"		1056898	0					
ANR	1061477	UnaryOperator	!		1056898	0					
ANR	1061478	CallExpression	"r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"		1056898	1					
ANR	1061479	Callee	r_core_write_at		1056898	0					
ANR	1061480	Identifier	r_core_write_at		1056898	0					
ANR	1061481	ArgumentList	core		1056898	1					
ANR	1061482	Argument	core		1056898	0					
ANR	1061483	Identifier	core		1056898	0					
ANR	1061484	Argument	core -> offset		1056898	1					
ANR	1061485	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061486	Identifier	core		1056898	0					
ANR	1061487	Identifier	offset		1056898	1					
ANR	1061488	Argument	acode -> bytes		1056898	2					
ANR	1061489	PtrMemberAccess	acode -> bytes		1056898	0					
ANR	1061490	Identifier	acode		1056898	0					
ANR	1061491	Identifier	bytes		1056898	1					
ANR	1061492	Argument	acode -> len		1056898	3					
ANR	1061493	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061494	Identifier	acode		1056898	0					
ANR	1061495	Identifier	len		1056898	1					
ANR	1061496	CompoundStatement		761:75:18659:18659	1056898	1					
ANR	1061497	ExpressionStatement	cmd_write_fail ( )	1472:7:39235:39252	1056898	0	True				
ANR	1061498	CallExpression	cmd_write_fail ( )		1056898	0					
ANR	1061499	Callee	cmd_write_fail		1056898	0					
ANR	1061500	Identifier	cmd_write_fail		1056898	0					
ANR	1061501	ArgumentList			1056898	1					
ANR	1061502	ElseStatement	else		1056898	0					
ANR	1061503	CompoundStatement		763:13:18700:18700	1056898	0					
ANR	1061504	IfStatement	"if ( r_config_get_i ( core -> config , ""scr.prompt"" ) )"		1056898	0					
ANR	1061505	Condition	"r_config_get_i ( core -> config , ""scr.prompt"" )"	1474:11:39280:39322	1056898	0	True				
ANR	1061506	CallExpression	"r_config_get_i ( core -> config , ""scr.prompt"" )"		1056898	0					
ANR	1061507	Callee	r_config_get_i		1056898	0					
ANR	1061508	Identifier	r_config_get_i		1056898	0					
ANR	1061509	ArgumentList	core -> config		1056898	1					
ANR	1061510	Argument	core -> config		1056898	0					
ANR	1061511	PtrMemberAccess	core -> config		1056898	0					
ANR	1061512	Identifier	core		1056898	0					
ANR	1061513	Identifier	config		1056898	1					
ANR	1061514	Argument	"""scr.prompt"""		1056898	1					
ANR	1061515	PrimaryExpression	"""scr.prompt"""		1056898	0					
ANR	1061516	CompoundStatement		764:56:18758:18758	1056898	1					
ANR	1061517	ExpressionStatement	"eprintf ( ""Written %d byte(s) (%s) = wx %s\\n"" , acode -> len , input + 2 , hex )"	1475:8:39335:39406	1056898	0	True				
ANR	1061518	CallExpression	"eprintf ( ""Written %d byte(s) (%s) = wx %s\\n"" , acode -> len , input + 2 , hex )"		1056898	0					
ANR	1061519	Callee	eprintf		1056898	0					
ANR	1061520	Identifier	eprintf		1056898	0					
ANR	1061521	ArgumentList	"""Written %d byte(s) (%s) = wx %s\\n"""		1056898	1					
ANR	1061522	Argument	"""Written %d byte(s) (%s) = wx %s\\n"""		1056898	0					
ANR	1061523	PrimaryExpression	"""Written %d byte(s) (%s) = wx %s\\n"""		1056898	0					
ANR	1061524	Argument	acode -> len		1056898	1					
ANR	1061525	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061526	Identifier	acode		1056898	0					
ANR	1061527	Identifier	len		1056898	1					
ANR	1061528	Argument	input + 2		1056898	2					
ANR	1061529	AdditiveExpression	input + 2		1056898	0		+			
ANR	1061530	Identifier	input		1056898	0					
ANR	1061531	PrimaryExpression	2		1056898	1					
ANR	1061532	Argument	hex		1056898	3					
ANR	1061533	Identifier	hex		1056898	0					
ANR	1061534	ExpressionStatement	"WSEEK ( core , acode -> len )"	1477:7:39424:39448	1056898	1	True				
ANR	1061535	CallExpression	"WSEEK ( core , acode -> len )"		1056898	0					
ANR	1061536	Callee	WSEEK		1056898	0					
ANR	1061537	Identifier	WSEEK		1056898	0					
ANR	1061538	ArgumentList	core		1056898	1					
ANR	1061539	Argument	core		1056898	0					
ANR	1061540	Identifier	core		1056898	0					
ANR	1061541	Argument	acode -> len		1056898	1					
ANR	1061542	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061543	Identifier	acode		1056898	0					
ANR	1061544	Identifier	len		1056898	1					
ANR	1061545	ExpressionStatement	r_core_block_read ( core )	1479:6:39464:39488	1056898	1	True				
ANR	1061546	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1061547	Callee	r_core_block_read		1056898	0					
ANR	1061548	Identifier	r_core_block_read		1056898	0					
ANR	1061549	ArgumentList	core		1056898	1					
ANR	1061550	Argument	core		1056898	0					
ANR	1061551	Identifier	core		1056898	0					
ANR	1061552	ExpressionStatement	free ( hex )	1481:5:39502:39512	1056898	2	True				
ANR	1061553	CallExpression	free ( hex )		1056898	0					
ANR	1061554	Callee	free		1056898	0					
ANR	1061555	Identifier	free		1056898	0					
ANR	1061556	ArgumentList	hex		1056898	1					
ANR	1061557	Argument	hex		1056898	0					
ANR	1061558	Identifier	hex		1056898	0					
ANR	1061559	ElseStatement	else		1056898	0					
ANR	1061560	CompoundStatement		772:11:18958:18958	1056898	0					
ANR	1061561	ExpressionStatement	"eprintf ( ""Nothing to do.\\n"" )"	1483:5:39532:39560	1056898	0	True				
ANR	1061562	CallExpression	"eprintf ( ""Nothing to do.\\n"" )"		1056898	0					
ANR	1061563	Callee	eprintf		1056898	0					
ANR	1061564	Identifier	eprintf		1056898	0					
ANR	1061565	ArgumentList	"""Nothing to do.\\n"""		1056898	1					
ANR	1061566	Argument	"""Nothing to do.\\n"""		1056898	0					
ANR	1061567	PrimaryExpression	"""Nothing to do.\\n"""		1056898	0					
ANR	1061568	ExpressionStatement	r_asm_code_free ( acode )	1485:4:39572:39595	1056898	2	True				
ANR	1061569	CallExpression	r_asm_code_free ( acode )		1056898	0					
ANR	1061570	Callee	r_asm_code_free		1056898	0					
ANR	1061571	Identifier	r_asm_code_free		1056898	0					
ANR	1061572	ArgumentList	acode		1056898	1					
ANR	1061573	Argument	acode		1056898	0					
ANR	1061574	Identifier	acode		1056898	0					
ANR	1061575	BreakStatement	break ;	1488:3:39609:39614	1056898	7	True				
ANR	1061576	Label	case 'f' :	1489:2:39618:39626	1056898	8	True				
ANR	1061577	IfStatement	if ( ( input [ 2 ] == ' ' || input [ 2 ] == '*' ) )		1056898	9					
ANR	1061578	Condition	input [ 2 ] == ' ' || input [ 2 ] == '*'	1490:7:39644:39679	1056898	0	True				
ANR	1061579	OrExpression	input [ 2 ] == ' ' || input [ 2 ] == '*'		1056898	0		||			
ANR	1061580	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1061581	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061582	Identifier	input		1056898	0					
ANR	1061583	PrimaryExpression	2		1056898	1					
ANR	1061584	PrimaryExpression	' '		1056898	1					
ANR	1061585	EqualityExpression	input [ 2 ] == '*'		1056898	1		==			
ANR	1061586	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061587	Identifier	input		1056898	0					
ANR	1061588	PrimaryExpression	2		1056898	1					
ANR	1061589	PrimaryExpression	'*'		1056898	1					
ANR	1061590	CompoundStatement		784:4:19230:19267	1056898	1					
ANR	1061591	IdentifierDeclStatement	const char * file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 ) ;	1491:4:39688:39740	1056898	0	True				
ANR	1061592	IdentifierDecl	* file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	0					
ANR	1061593	IdentifierDeclType	const char *		1056898	0					
ANR	1061594	Identifier	file		1056898	1					
ANR	1061595	AssignmentExpression	* file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	2		=			
ANR	1061596	Identifier	file		1056898	0					
ANR	1061597	AdditiveExpression	input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	1		+			
ANR	1061598	Identifier	input		1056898	0					
ANR	1061599	ConditionalExpression	( input [ 2 ] == '*' ) ? 4 : 3		1056898	1					
ANR	1061600	Condition	input [ 2 ] == '*'		1056898	0					
ANR	1061601	EqualityExpression	input [ 2 ] == '*'		1056898	0		==			
ANR	1061602	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061603	Identifier	input		1056898	0					
ANR	1061604	PrimaryExpression	2		1056898	1					
ANR	1061605	PrimaryExpression	'*'		1056898	1					
ANR	1061606	PrimaryExpression	4		1056898	1					
ANR	1061607	PrimaryExpression	3		1056898	2					
ANR	1061608	ExpressionStatement	"r_asm_set_pc ( core -> assembler , core -> offset )"	1492:4:39746:39790	1056898	1	True				
ANR	1061609	CallExpression	"r_asm_set_pc ( core -> assembler , core -> offset )"		1056898	0					
ANR	1061610	Callee	r_asm_set_pc		1056898	0					
ANR	1061611	Identifier	r_asm_set_pc		1056898	0					
ANR	1061612	ArgumentList	core -> assembler		1056898	1					
ANR	1061613	Argument	core -> assembler		1056898	0					
ANR	1061614	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061615	Identifier	core		1056898	0					
ANR	1061616	Identifier	assembler		1056898	1					
ANR	1061617	Argument	core -> offset		1056898	1					
ANR	1061618	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061619	Identifier	core		1056898	0					
ANR	1061620	Identifier	offset		1056898	1					
ANR	1061621	IdentifierDeclStatement	"char * src = r_file_slurp ( file , NULL ) ;"	1494:4:39797:39834	1056898	2	True				
ANR	1061622	IdentifierDecl	"* src = r_file_slurp ( file , NULL )"		1056898	0					
ANR	1061623	IdentifierDeclType	char *		1056898	0					
ANR	1061624	Identifier	src		1056898	1					
ANR	1061625	AssignmentExpression	"* src = r_file_slurp ( file , NULL )"		1056898	2		=			
ANR	1061626	Identifier	src		1056898	0					
ANR	1061627	CallExpression	"r_file_slurp ( file , NULL )"		1056898	1					
ANR	1061628	Callee	r_file_slurp		1056898	0					
ANR	1061629	Identifier	r_file_slurp		1056898	0					
ANR	1061630	ArgumentList	file		1056898	1					
ANR	1061631	Argument	file		1056898	0					
ANR	1061632	Identifier	file		1056898	0					
ANR	1061633	Argument	NULL		1056898	1					
ANR	1061634	Identifier	NULL		1056898	0					
ANR	1061635	IfStatement	if ( src )		1056898	3					
ANR	1061636	Condition	src	1495:8:39844:39846	1056898	0	True				
ANR	1061637	Identifier	src		1056898	0					
ANR	1061638	CompoundStatement		787:5:19330:19347	1056898	1					
ANR	1061639	IdentifierDeclStatement	"ut64 nextaddr , addr = core -> offset ;"	1496:5:39856:39890	1056898	0	True				
ANR	1061640	IdentifierDecl	nextaddr		1056898	0					
ANR	1061641	IdentifierDeclType	ut64		1056898	0					
ANR	1061642	Identifier	nextaddr		1056898	1					
ANR	1061643	IdentifierDecl	addr = core -> offset		1056898	1					
ANR	1061644	IdentifierDeclType	ut64		1056898	0					
ANR	1061645	Identifier	addr		1056898	1					
ANR	1061646	AssignmentExpression	addr = core -> offset		1056898	2		=			
ANR	1061647	Identifier	addr		1056898	0					
ANR	1061648	PtrMemberAccess	core -> offset		1056898	1					
ANR	1061649	Identifier	core		1056898	0					
ANR	1061650	Identifier	offset		1056898	1					
ANR	1061651	IdentifierDeclStatement	"char * a , * b = src ;"	1497:5:39897:39914	1056898	1	True				
ANR	1061652	IdentifierDecl	* a		1056898	0					
ANR	1061653	IdentifierDeclType	char *		1056898	0					
ANR	1061654	Identifier	a		1056898	1					
ANR	1061655	IdentifierDecl	* b = src		1056898	1					
ANR	1061656	IdentifierDeclType	char *		1056898	0					
ANR	1061657	Identifier	b		1056898	1					
ANR	1061658	AssignmentExpression	* b = src		1056898	2		=			
ANR	1061659	Identifier	src		1056898	0					
ANR	1061660	Identifier	src		1056898	1					
ANR	1061661	DoStatement	do		1056898	2					
ANR	1061662	CompoundStatement		788:8:19357:19357	1056898	0					
ANR	1061663	ExpressionStatement	"a = strstr ( b , "".offset "" )"	1499:6:39932:39958	1056898	0	True				
ANR	1061664	AssignmentExpression	"a = strstr ( b , "".offset "" )"		1056898	0		=			
ANR	1061665	Identifier	a		1056898	0					
ANR	1061666	CallExpression	"strstr ( b , "".offset "" )"		1056898	1					
ANR	1061667	Callee	strstr		1056898	0					
ANR	1061668	Identifier	strstr		1056898	0					
ANR	1061669	ArgumentList	b		1056898	1					
ANR	1061670	Argument	b		1056898	0					
ANR	1061671	Identifier	b		1056898	0					
ANR	1061672	Argument	""".offset """		1056898	1					
ANR	1061673	PrimaryExpression	""".offset """		1056898	0					
ANR	1061674	IfStatement	if ( a )		1056898	1					
ANR	1061675	Condition	a	1500:10:39970:39970	1056898	0	True				
ANR	1061676	Identifier	a		1056898	0					
ANR	1061677	CompoundStatement		794:7:19508:19535	1056898	1					
ANR	1061678	ExpressionStatement	* a = 0	1501:7:39982:39988	1056898	0	True				
ANR	1061679	AssignmentExpression	* a = 0		1056898	0		=			
ANR	1061680	UnaryOperationExpression	* a		1056898	0					
ANR	1061681	UnaryOperator	*		1056898	0					
ANR	1061682	Identifier	a		1056898	1					
ANR	1061683	PrimaryExpression	0		1056898	1					
ANR	1061684	ExpressionStatement	"a += strlen ( "".offset "" )"	1502:7:39997:40021	1056898	1	True				
ANR	1061685	AssignmentExpression	"a += strlen ( "".offset "" )"		1056898	0		+=			
ANR	1061686	Identifier	a		1056898	0					
ANR	1061687	CallExpression	"strlen ( "".offset "" )"		1056898	1					
ANR	1061688	Callee	strlen		1056898	0					
ANR	1061689	Identifier	strlen		1056898	0					
ANR	1061690	ArgumentList	""".offset """		1056898	1					
ANR	1061691	Argument	""".offset """		1056898	0					
ANR	1061692	PrimaryExpression	""".offset """		1056898	0					
ANR	1061693	ExpressionStatement	"nextaddr = r_num_math ( core -> num , a )"	1503:7:40030:40066	1056898	2	True				
ANR	1061694	AssignmentExpression	"nextaddr = r_num_math ( core -> num , a )"		1056898	0		=			
ANR	1061695	Identifier	nextaddr		1056898	0					
ANR	1061696	CallExpression	"r_num_math ( core -> num , a )"		1056898	1					
ANR	1061697	Callee	r_num_math		1056898	0					
ANR	1061698	Identifier	r_num_math		1056898	0					
ANR	1061699	ArgumentList	core -> num		1056898	1					
ANR	1061700	Argument	core -> num		1056898	0					
ANR	1061701	PtrMemberAccess	core -> num		1056898	0					
ANR	1061702	Identifier	core		1056898	0					
ANR	1061703	Identifier	num		1056898	1					
ANR	1061704	Argument	a		1056898	1					
ANR	1061705	Identifier	a		1056898	0					
ANR	1061706	IdentifierDeclStatement	"char * nl = strchr ( a , '\\n' ) ;"	1504:7:40075:40102	1056898	3	True				
ANR	1061707	IdentifierDecl	"* nl = strchr ( a , '\\n' )"		1056898	0					
ANR	1061708	IdentifierDeclType	char *		1056898	0					
ANR	1061709	Identifier	nl		1056898	1					
ANR	1061710	AssignmentExpression	"* nl = strchr ( a , '\\n' )"		1056898	2		=			
ANR	1061711	Identifier	nl		1056898	0					
ANR	1061712	CallExpression	"strchr ( a , '\\n' )"		1056898	1					
ANR	1061713	Callee	strchr		1056898	0					
ANR	1061714	Identifier	strchr		1056898	0					
ANR	1061715	ArgumentList	a		1056898	1					
ANR	1061716	Argument	a		1056898	0					
ANR	1061717	Identifier	a		1056898	0					
ANR	1061718	Argument	'\\n'		1056898	1					
ANR	1061719	PrimaryExpression	'\\n'		1056898	0					
ANR	1061720	IfStatement	if ( nl )		1056898	4					
ANR	1061721	Condition	nl	1505:11:40115:40116	1056898	0	True				
ANR	1061722	Identifier	nl		1056898	0					
ANR	1061723	CompoundStatement		795:15:19552:19552	1056898	1					
ANR	1061724	ExpressionStatement	* nl = 0	1506:8:40129:40136	1056898	0	True				
ANR	1061725	AssignmentExpression	* nl = 0		1056898	0		=			
ANR	1061726	UnaryOperationExpression	* nl		1056898	0					
ANR	1061727	UnaryOperator	*		1056898	0					
ANR	1061728	Identifier	nl		1056898	1					
ANR	1061729	PrimaryExpression	0		1056898	1					
ANR	1061730	ExpressionStatement	a = nl + 1	1507:8:40146:40156	1056898	1	True				
ANR	1061731	AssignmentExpression	a = nl + 1		1056898	0		=			
ANR	1061732	Identifier	a		1056898	0					
ANR	1061733	AdditiveExpression	nl + 1		1056898	1		+			
ANR	1061734	Identifier	nl		1056898	0					
ANR	1061735	PrimaryExpression	1		1056898	1					
ANR	1061736	ElseStatement	else		1056898	0					
ANR	1061737	CompoundStatement		798:14:19605:19605	1056898	0					
ANR	1061738	BreakStatement	break ;	1509:8:40182:40187	1056898	0	True				
ANR	1061739	IfStatement	if ( * b )		1056898	2					
ANR	1061740	Condition	* b	1512:10:40216:40217	1056898	0	True				
ANR	1061741	UnaryOperationExpression	* b		1056898	0					
ANR	1061742	UnaryOperator	*		1056898	0					
ANR	1061743	Identifier	b		1056898	1					
ANR	1061744	CompoundStatement		804:7:19722:19757	1056898	1					
ANR	1061745	IdentifierDeclStatement	"RAsmCode * ac = r_asm_massemble ( core -> assembler , b ) ;"	1513:7:40229:40280	1056898	0	True				
ANR	1061746	IdentifierDecl	"* ac = r_asm_massemble ( core -> assembler , b )"		1056898	0					
ANR	1061747	IdentifierDeclType	RAsmCode *		1056898	0					
ANR	1061748	Identifier	ac		1056898	1					
ANR	1061749	AssignmentExpression	"* ac = r_asm_massemble ( core -> assembler , b )"		1056898	2		=			
ANR	1061750	Identifier	ac		1056898	0					
ANR	1061751	CallExpression	"r_asm_massemble ( core -> assembler , b )"		1056898	1					
ANR	1061752	Callee	r_asm_massemble		1056898	0					
ANR	1061753	Identifier	r_asm_massemble		1056898	0					
ANR	1061754	ArgumentList	core -> assembler		1056898	1					
ANR	1061755	Argument	core -> assembler		1056898	0					
ANR	1061756	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061757	Identifier	core		1056898	0					
ANR	1061758	Identifier	assembler		1056898	1					
ANR	1061759	Argument	b		1056898	1					
ANR	1061760	Identifier	b		1056898	0					
ANR	1061761	IdentifierDeclStatement	char * hex = r_asm_code_get_hex ( ac ) ;	1514:7:40289:40324	1056898	1	True				
ANR	1061762	IdentifierDecl	* hex = r_asm_code_get_hex ( ac )		1056898	0					
ANR	1061763	IdentifierDeclType	char *		1056898	0					
ANR	1061764	Identifier	hex		1056898	1					
ANR	1061765	AssignmentExpression	* hex = r_asm_code_get_hex ( ac )		1056898	2		=			
ANR	1061766	Identifier	hex		1056898	0					
ANR	1061767	CallExpression	r_asm_code_get_hex ( ac )		1056898	1					
ANR	1061768	Callee	r_asm_code_get_hex		1056898	0					
ANR	1061769	Identifier	r_asm_code_get_hex		1056898	0					
ANR	1061770	ArgumentList	ac		1056898	1					
ANR	1061771	Argument	ac		1056898	0					
ANR	1061772	Identifier	ac		1056898	0					
ANR	1061773	IfStatement	if ( hex )		1056898	2					
ANR	1061774	Condition	hex	1515:11:40337:40339	1056898	0	True				
ANR	1061775	Identifier	hex		1056898	0					
ANR	1061776	CompoundStatement		805:16:19775:19775	1056898	1					
ANR	1061777	Statement	r_cons_printf	1516:8:40352:40364	1056898	0	True				
ANR	1061778	Statement	(	1516:22:40366:40366	1056898	1	True				
ANR	1061779	Statement	"""wx %s @ 0x%08"""	1516:23:40367:40381	1056898	2	True				
ANR	1061780	Statement	PFMT64x	1516:38:40382:40388	1056898	3	True				
ANR	1061781	Statement	"""\\n"""	1516:45:40389:40392	1056898	4	True				
ANR	1061782	Statement	","	1516:49:40393:40393	1056898	5	True				
ANR	1061783	Statement	hex	1516:52:40396:40398	1056898	6	True				
ANR	1061784	Statement	","	1516:55:40399:40399	1056898	7	True				
ANR	1061785	Statement	addr	1516:57:40401:40404	1056898	8	True				
ANR	1061786	Statement	)	1516:61:40405:40405	1056898	9	True				
ANR	1061787	ExpressionStatement		1516:62:40406:40406	1056898	10	True				
ANR	1061788	ExpressionStatement	free ( hex )	1517:8:40416:40426	1056898	11	True				
ANR	1061789	CallExpression	free ( hex )		1056898	0					
ANR	1061790	Callee	free		1056898	0					
ANR	1061791	Identifier	free		1056898	0					
ANR	1061792	ArgumentList	hex		1056898	1					
ANR	1061793	Argument	hex		1056898	0					
ANR	1061794	Identifier	hex		1056898	0					
ANR	1061795	ExpressionStatement	r_asm_code_free ( ac )	1519:7:40444:40464	1056898	3	True				
ANR	1061796	CallExpression	r_asm_code_free ( ac )		1056898	0					
ANR	1061797	Callee	r_asm_code_free		1056898	0					
ANR	1061798	Identifier	r_asm_code_free		1056898	0					
ANR	1061799	ArgumentList	ac		1056898	1					
ANR	1061800	Argument	ac		1056898	0					
ANR	1061801	Identifier	ac		1056898	0					
ANR	1061802	ExpressionStatement	b = a	1521:6:40480:40485	1056898	3	True				
ANR	1061803	AssignmentExpression	b = a		1056898	0		=			
ANR	1061804	Identifier	b		1056898	0					
ANR	1061805	Identifier	a		1056898	1					
ANR	1061806	ExpressionStatement	addr = nextaddr	1522:6:40493:40508	1056898	4	True				
ANR	1061807	AssignmentExpression	addr = nextaddr		1056898	0		=			
ANR	1061808	Identifier	addr		1056898	0					
ANR	1061809	Identifier	nextaddr		1056898	1					
ANR	1061810	Condition	a	1523:14:40524:40524	1056898	1	True				
ANR	1061811	Identifier	a		1056898	0					
ANR	1061812	ExpressionStatement	free ( src )	1524:5:40533:40543	1056898	3	True				
ANR	1061813	CallExpression	free ( src )		1056898	0					
ANR	1061814	Callee	free		1056898	0					
ANR	1061815	Identifier	free		1056898	0					
ANR	1061816	ArgumentList	src		1056898	1					
ANR	1061817	Argument	src		1056898	0					
ANR	1061818	Identifier	src		1056898	0					
ANR	1061819	ElseStatement	else		1056898	0					
ANR	1061820	CompoundStatement		815:11:19989:19989	1056898	0					
ANR	1061821	ExpressionStatement	"eprintf ( ""Cannot open '%s'\\n"" , file )"	1526:5:40563:40599	1056898	0	True				
ANR	1061822	CallExpression	"eprintf ( ""Cannot open '%s'\\n"" , file )"		1056898	0					
ANR	1061823	Callee	eprintf		1056898	0					
ANR	1061824	Identifier	eprintf		1056898	0					
ANR	1061825	ArgumentList	"""Cannot open '%s'\\n"""		1056898	1					
ANR	1061826	Argument	"""Cannot open '%s'\\n"""		1056898	0					
ANR	1061827	PrimaryExpression	"""Cannot open '%s'\\n"""		1056898	0					
ANR	1061828	Argument	file		1056898	1					
ANR	1061829	Identifier	file		1056898	0					
ANR	1061830	ElseStatement	else		1056898	0					
ANR	1061831	CompoundStatement		818:10:20050:20050	1056898	0					
ANR	1061832	ExpressionStatement	"eprintf ( ""Wrong argument\\n"" )"	1529:4:40623:40651	1056898	0	True				
ANR	1061833	CallExpression	"eprintf ( ""Wrong argument\\n"" )"		1056898	0					
ANR	1061834	Callee	eprintf		1056898	0					
ANR	1061835	Identifier	eprintf		1056898	0					
ANR	1061836	ArgumentList	"""Wrong argument\\n"""		1056898	1					
ANR	1061837	Argument	"""Wrong argument\\n"""		1056898	0					
ANR	1061838	PrimaryExpression	"""Wrong argument\\n"""		1056898	0					
ANR	1061839	BreakStatement	break ;	1531:3:40661:40666	1056898	10	True				
ANR	1061840	Label	case 'F' :	1532:2:40670:40678	1056898	11	True				
ANR	1061841	IfStatement	if ( ( input [ 2 ] == ' ' || input [ 2 ] == '*' ) )		1056898	12					
ANR	1061842	Condition	input [ 2 ] == ' ' || input [ 2 ] == '*'	1533:7:40696:40731	1056898	0	True				
ANR	1061843	OrExpression	input [ 2 ] == ' ' || input [ 2 ] == '*'		1056898	0		||			
ANR	1061844	EqualityExpression	input [ 2 ] == ' '		1056898	0		==			
ANR	1061845	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061846	Identifier	input		1056898	0					
ANR	1061847	PrimaryExpression	2		1056898	1					
ANR	1061848	PrimaryExpression	' '		1056898	1					
ANR	1061849	EqualityExpression	input [ 2 ] == '*'		1056898	1		==			
ANR	1061850	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061851	Identifier	input		1056898	0					
ANR	1061852	PrimaryExpression	2		1056898	1					
ANR	1061853	PrimaryExpression	'*'		1056898	1					
ANR	1061854	CompoundStatement		826:4:20281:20342	1056898	1					
ANR	1061855	IdentifierDeclStatement	const char * file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 ) ;	1534:4:40740:40792	1056898	0	True				
ANR	1061856	IdentifierDecl	* file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	0					
ANR	1061857	IdentifierDeclType	const char *		1056898	0					
ANR	1061858	Identifier	file		1056898	1					
ANR	1061859	AssignmentExpression	* file = input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	2		=			
ANR	1061860	Identifier	file		1056898	0					
ANR	1061861	AdditiveExpression	input + ( ( input [ 2 ] == '*' ) ? 4 : 3 )		1056898	1		+			
ANR	1061862	Identifier	input		1056898	0					
ANR	1061863	ConditionalExpression	( input [ 2 ] == '*' ) ? 4 : 3		1056898	1					
ANR	1061864	Condition	input [ 2 ] == '*'		1056898	0					
ANR	1061865	EqualityExpression	input [ 2 ] == '*'		1056898	0		==			
ANR	1061866	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061867	Identifier	input		1056898	0					
ANR	1061868	PrimaryExpression	2		1056898	1					
ANR	1061869	PrimaryExpression	'*'		1056898	1					
ANR	1061870	PrimaryExpression	4		1056898	1					
ANR	1061871	PrimaryExpression	3		1056898	2					
ANR	1061872	ExpressionStatement	"r_asm_set_pc ( core -> assembler , core -> offset )"	1535:4:40798:40842	1056898	1	True				
ANR	1061873	CallExpression	"r_asm_set_pc ( core -> assembler , core -> offset )"		1056898	0					
ANR	1061874	Callee	r_asm_set_pc		1056898	0					
ANR	1061875	Identifier	r_asm_set_pc		1056898	0					
ANR	1061876	ArgumentList	core -> assembler		1056898	1					
ANR	1061877	Argument	core -> assembler		1056898	0					
ANR	1061878	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061879	Identifier	core		1056898	0					
ANR	1061880	Identifier	assembler		1056898	1					
ANR	1061881	Argument	core -> offset		1056898	1					
ANR	1061882	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061883	Identifier	core		1056898	0					
ANR	1061884	Identifier	offset		1056898	1					
ANR	1061885	IdentifierDeclStatement	"RAsmCode * acode = r_asm_assemble_file ( core -> assembler , file ) ;"	1536:4:40848:40909	1056898	2	True				
ANR	1061886	IdentifierDecl	"* acode = r_asm_assemble_file ( core -> assembler , file )"		1056898	0					
ANR	1061887	IdentifierDeclType	RAsmCode *		1056898	0					
ANR	1061888	Identifier	acode		1056898	1					
ANR	1061889	AssignmentExpression	"* acode = r_asm_assemble_file ( core -> assembler , file )"		1056898	2		=			
ANR	1061890	Identifier	acode		1056898	0					
ANR	1061891	CallExpression	"r_asm_assemble_file ( core -> assembler , file )"		1056898	1					
ANR	1061892	Callee	r_asm_assemble_file		1056898	0					
ANR	1061893	Identifier	r_asm_assemble_file		1056898	0					
ANR	1061894	ArgumentList	core -> assembler		1056898	1					
ANR	1061895	Argument	core -> assembler		1056898	0					
ANR	1061896	PtrMemberAccess	core -> assembler		1056898	0					
ANR	1061897	Identifier	core		1056898	0					
ANR	1061898	Identifier	assembler		1056898	1					
ANR	1061899	Argument	file		1056898	1					
ANR	1061900	Identifier	file		1056898	0					
ANR	1061901	IfStatement	if ( acode )		1056898	3					
ANR	1061902	Condition	acode	1537:8:40919:40923	1056898	0	True				
ANR	1061903	Identifier	acode		1056898	0					
ANR	1061904	CompoundStatement		828:5:20366:20404	1056898	1					
ANR	1061905	IdentifierDeclStatement	char * hex = r_asm_code_get_hex ( acode ) ;	1538:5:40933:40971	1056898	0	True				
ANR	1061906	IdentifierDecl	* hex = r_asm_code_get_hex ( acode )		1056898	0					
ANR	1061907	IdentifierDeclType	char *		1056898	0					
ANR	1061908	Identifier	hex		1056898	1					
ANR	1061909	AssignmentExpression	* hex = r_asm_code_get_hex ( acode )		1056898	2		=			
ANR	1061910	Identifier	hex		1056898	0					
ANR	1061911	CallExpression	r_asm_code_get_hex ( acode )		1056898	1					
ANR	1061912	Callee	r_asm_code_get_hex		1056898	0					
ANR	1061913	Identifier	r_asm_code_get_hex		1056898	0					
ANR	1061914	ArgumentList	acode		1056898	1					
ANR	1061915	Argument	acode		1056898	0					
ANR	1061916	Identifier	acode		1056898	0					
ANR	1061917	IfStatement	if ( input [ 2 ] == '*' )		1056898	1					
ANR	1061918	Condition	input [ 2 ] == '*'	1539:9:40982:40996	1056898	0	True				
ANR	1061919	EqualityExpression	input [ 2 ] == '*'		1056898	0		==			
ANR	1061920	ArrayIndexing	input [ 2 ]		1056898	0					
ANR	1061921	Identifier	input		1056898	0					
ANR	1061922	PrimaryExpression	2		1056898	1					
ANR	1061923	PrimaryExpression	'*'		1056898	1					
ANR	1061924	CompoundStatement		829:26:20432:20432	1056898	1					
ANR	1061925	ExpressionStatement	"cmd_write_hexpair ( core , hex )"	1540:6:41007:41036	1056898	0	True				
ANR	1061926	CallExpression	"cmd_write_hexpair ( core , hex )"		1056898	0					
ANR	1061927	Callee	cmd_write_hexpair		1056898	0					
ANR	1061928	Identifier	cmd_write_hexpair		1056898	0					
ANR	1061929	ArgumentList	core		1056898	1					
ANR	1061930	Argument	core		1056898	0					
ANR	1061931	Identifier	core		1056898	0					
ANR	1061932	Argument	hex		1056898	1					
ANR	1061933	Identifier	hex		1056898	0					
ANR	1061934	ElseStatement	else		1056898	0					
ANR	1061935	CompoundStatement		831:12:20483:20483	1056898	0					
ANR	1061936	IfStatement	"if ( r_config_get_i ( core -> config , ""scr.prompt"" ) )"		1056898	0					
ANR	1061937	Condition	"r_config_get_i ( core -> config , ""scr.prompt"" )"	1542:10:41062:41104	1056898	0	True				
ANR	1061938	CallExpression	"r_config_get_i ( core -> config , ""scr.prompt"" )"		1056898	0					
ANR	1061939	Callee	r_config_get_i		1056898	0					
ANR	1061940	Identifier	r_config_get_i		1056898	0					
ANR	1061941	ArgumentList	core -> config		1056898	1					
ANR	1061942	Argument	core -> config		1056898	0					
ANR	1061943	PtrMemberAccess	core -> config		1056898	0					
ANR	1061944	Identifier	core		1056898	0					
ANR	1061945	Identifier	config		1056898	1					
ANR	1061946	Argument	"""scr.prompt"""		1056898	1					
ANR	1061947	PrimaryExpression	"""scr.prompt"""		1056898	0					
ANR	1061948	CompoundStatement		832:55:20540:20540	1056898	1					
ANR	1061949	ExpressionStatement	"eprintf ( ""Written %d byte(s) (%s)=wx %s\\n"" , acode -> len , input + 1 , hex )"	1543:7:41116:41185	1056898	0	True				
ANR	1061950	CallExpression	"eprintf ( ""Written %d byte(s) (%s)=wx %s\\n"" , acode -> len , input + 1 , hex )"		1056898	0					
ANR	1061951	Callee	eprintf		1056898	0					
ANR	1061952	Identifier	eprintf		1056898	0					
ANR	1061953	ArgumentList	"""Written %d byte(s) (%s)=wx %s\\n"""		1056898	1					
ANR	1061954	Argument	"""Written %d byte(s) (%s)=wx %s\\n"""		1056898	0					
ANR	1061955	PrimaryExpression	"""Written %d byte(s) (%s)=wx %s\\n"""		1056898	0					
ANR	1061956	Argument	acode -> len		1056898	1					
ANR	1061957	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061958	Identifier	acode		1056898	0					
ANR	1061959	Identifier	len		1056898	1					
ANR	1061960	Argument	input + 1		1056898	2					
ANR	1061961	AdditiveExpression	input + 1		1056898	0		+			
ANR	1061962	Identifier	input		1056898	0					
ANR	1061963	PrimaryExpression	1		1056898	1					
ANR	1061964	Argument	hex		1056898	3					
ANR	1061965	Identifier	hex		1056898	0					
ANR	1061966	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len ) )"		1056898	1					
ANR	1061967	Condition	"! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"	1545:10:41205:41267	1056898	0	True				
ANR	1061968	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"		1056898	0					
ANR	1061969	UnaryOperator	!		1056898	0					
ANR	1061970	CallExpression	"r_core_write_at ( core , core -> offset , acode -> bytes , acode -> len )"		1056898	1					
ANR	1061971	Callee	r_core_write_at		1056898	0					
ANR	1061972	Identifier	r_core_write_at		1056898	0					
ANR	1061973	ArgumentList	core		1056898	1					
ANR	1061974	Argument	core		1056898	0					
ANR	1061975	Identifier	core		1056898	0					
ANR	1061976	Argument	core -> offset		1056898	1					
ANR	1061977	PtrMemberAccess	core -> offset		1056898	0					
ANR	1061978	Identifier	core		1056898	0					
ANR	1061979	Identifier	offset		1056898	1					
ANR	1061980	Argument	acode -> bytes		1056898	2					
ANR	1061981	PtrMemberAccess	acode -> bytes		1056898	0					
ANR	1061982	Identifier	acode		1056898	0					
ANR	1061983	Identifier	bytes		1056898	1					
ANR	1061984	Argument	acode -> len		1056898	3					
ANR	1061985	PtrMemberAccess	acode -> len		1056898	0					
ANR	1061986	Identifier	acode		1056898	0					
ANR	1061987	Identifier	len		1056898	1					
ANR	1061988	CompoundStatement		835:75:20703:20703	1056898	1					
ANR	1061989	ExpressionStatement	cmd_write_fail ( )	1546:7:41279:41296	1056898	0	True				
ANR	1061990	CallExpression	cmd_write_fail ( )		1056898	0					
ANR	1061991	Callee	cmd_write_fail		1056898	0					
ANR	1061992	Identifier	cmd_write_fail		1056898	0					
ANR	1061993	ArgumentList			1056898	1					
ANR	1061994	ElseStatement	else		1056898	0					
ANR	1061995	CompoundStatement		837:13:20744:20744	1056898	0					
ANR	1061996	ExpressionStatement	"WSEEK ( core , acode -> len )"	1548:7:41320:41344	1056898	0	True				
ANR	1061997	CallExpression	"WSEEK ( core , acode -> len )"		1056898	0					
ANR	1061998	Callee	WSEEK		1056898	0					
ANR	1061999	Identifier	WSEEK		1056898	0					
ANR	1062000	ArgumentList	core		1056898	1					
ANR	1062001	Argument	core		1056898	0					
ANR	1062002	Identifier	core		1056898	0					
ANR	1062003	Argument	acode -> len		1056898	1					
ANR	1062004	PtrMemberAccess	acode -> len		1056898	0					
ANR	1062005	Identifier	acode		1056898	0					
ANR	1062006	Identifier	len		1056898	1					
ANR	1062007	ExpressionStatement	r_core_block_read ( core )	1550:6:41360:41384	1056898	2	True				
ANR	1062008	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1062009	Callee	r_core_block_read		1056898	0					
ANR	1062010	Identifier	r_core_block_read		1056898	0					
ANR	1062011	ArgumentList	core		1056898	1					
ANR	1062012	Argument	core		1056898	0					
ANR	1062013	Identifier	core		1056898	0					
ANR	1062014	ExpressionStatement	free ( hex )	1552:5:41398:41408	1056898	2	True				
ANR	1062015	CallExpression	free ( hex )		1056898	0					
ANR	1062016	Callee	free		1056898	0					
ANR	1062017	Identifier	free		1056898	0					
ANR	1062018	ArgumentList	hex		1056898	1					
ANR	1062019	Argument	hex		1056898	0					
ANR	1062020	Identifier	hex		1056898	0					
ANR	1062021	ExpressionStatement	r_asm_code_free ( acode )	1553:5:41415:41438	1056898	3	True				
ANR	1062022	CallExpression	r_asm_code_free ( acode )		1056898	0					
ANR	1062023	Callee	r_asm_code_free		1056898	0					
ANR	1062024	Identifier	r_asm_code_free		1056898	0					
ANR	1062025	ArgumentList	acode		1056898	1					
ANR	1062026	Argument	acode		1056898	0					
ANR	1062027	Identifier	acode		1056898	0					
ANR	1062028	ElseStatement	else		1056898	0					
ANR	1062029	CompoundStatement		844:11:20884:20884	1056898	0					
ANR	1062030	ExpressionStatement	"eprintf ( ""Cannot assemble file\\n"" )"	1555:5:41458:41492	1056898	0	True				
ANR	1062031	CallExpression	"eprintf ( ""Cannot assemble file\\n"" )"		1056898	0					
ANR	1062032	Callee	eprintf		1056898	0					
ANR	1062033	Identifier	eprintf		1056898	0					
ANR	1062034	ArgumentList	"""Cannot assemble file\\n"""		1056898	1					
ANR	1062035	Argument	"""Cannot assemble file\\n"""		1056898	0					
ANR	1062036	PrimaryExpression	"""Cannot assemble file\\n"""		1056898	0					
ANR	1062037	ElseStatement	else		1056898	0					
ANR	1062038	CompoundStatement		847:10:20943:20943	1056898	0					
ANR	1062039	ExpressionStatement	"eprintf ( ""Wrong argument\\n"" )"	1558:4:41516:41544	1056898	0	True				
ANR	1062040	CallExpression	"eprintf ( ""Wrong argument\\n"" )"		1056898	0					
ANR	1062041	Callee	eprintf		1056898	0					
ANR	1062042	Identifier	eprintf		1056898	0					
ANR	1062043	ArgumentList	"""Wrong argument\\n"""		1056898	1					
ANR	1062044	Argument	"""Wrong argument\\n"""		1056898	0					
ANR	1062045	PrimaryExpression	"""Wrong argument\\n"""		1056898	0					
ANR	1062046	BreakStatement	break ;	1560:3:41554:41559	1056898	13	True				
ANR	1062047	Label	default :	1561:2:41563:41570	1056898	14	True				
ANR	1062048	Identifier	default		1056898	0					
ANR	1062049	ExpressionStatement	"r_core_cmd_help ( core , help_msg_wa )"	1562:3:41575:41610	1056898	15	True				
ANR	1062050	CallExpression	"r_core_cmd_help ( core , help_msg_wa )"		1056898	0					
ANR	1062051	Callee	r_core_cmd_help		1056898	0					
ANR	1062052	Identifier	r_core_cmd_help		1056898	0					
ANR	1062053	ArgumentList	core		1056898	1					
ANR	1062054	Argument	core		1056898	0					
ANR	1062055	Identifier	core		1056898	0					
ANR	1062056	Argument	help_msg_wa		1056898	1					
ANR	1062057	Identifier	help_msg_wa		1056898	0					
ANR	1062058	BreakStatement	break ;	1563:3:41615:41620	1056898	16	True				
ANR	1062059	BreakStatement	break ;	1565:2:41628:41633	1056898	71	True				
ANR	1062060	Label	case 'b' :	1566:1:41636:41644	1056898	72	True				
ANR	1062061	CompoundStatement		858:2:21119:21144	1056898	73					
ANR	1062062	IdentifierDeclStatement	int len = strlen ( input ) ;	1567:2:41658:41682	1056898	0	True				
ANR	1062063	IdentifierDecl	len = strlen ( input )		1056898	0					
ANR	1062064	IdentifierDeclType	int		1056898	0					
ANR	1062065	Identifier	len		1056898	1					
ANR	1062066	AssignmentExpression	len = strlen ( input )		1056898	2		=			
ANR	1062067	Identifier	len		1056898	0					
ANR	1062068	CallExpression	strlen ( input )		1056898	1					
ANR	1062069	Callee	strlen		1056898	0					
ANR	1062070	Identifier	strlen		1056898	0					
ANR	1062071	ArgumentList	input		1056898	1					
ANR	1062072	Argument	input		1056898	0					
ANR	1062073	Identifier	input		1056898	0					
ANR	1062074	IdentifierDeclStatement	ut8 * buf = malloc ( len + 1 ) ;	1568:2:41686:41711	1056898	1	True				
ANR	1062075	IdentifierDecl	* buf = malloc ( len + 1 )		1056898	0					
ANR	1062076	IdentifierDeclType	ut8 *		1056898	0					
ANR	1062077	Identifier	buf		1056898	1					
ANR	1062078	AssignmentExpression	* buf = malloc ( len + 1 )		1056898	2		=			
ANR	1062079	Identifier	buf		1056898	0					
ANR	1062080	CallExpression	malloc ( len + 1 )		1056898	1					
ANR	1062081	Callee	malloc		1056898	0					
ANR	1062082	Identifier	malloc		1056898	0					
ANR	1062083	ArgumentList	len + 1		1056898	1					
ANR	1062084	Argument	len + 1		1056898	0					
ANR	1062085	AdditiveExpression	len + 1		1056898	0		+			
ANR	1062086	Identifier	len		1056898	0					
ANR	1062087	PrimaryExpression	1		1056898	1					
ANR	1062088	IfStatement	if ( buf )		1056898	2					
ANR	1062089	Condition	buf	1569:6:41719:41721	1056898	0	True				
ANR	1062090	Identifier	buf		1056898	0					
ANR	1062091	CompoundStatement		859:11:21157:21157	1056898	1					
ANR	1062092	ExpressionStatement	"len = r_hex_str2bin ( input + 1 , buf )"	1570:3:41729:41763	1056898	0	True				
ANR	1062093	AssignmentExpression	"len = r_hex_str2bin ( input + 1 , buf )"		1056898	0		=			
ANR	1062094	Identifier	len		1056898	0					
ANR	1062095	CallExpression	"r_hex_str2bin ( input + 1 , buf )"		1056898	1					
ANR	1062096	Callee	r_hex_str2bin		1056898	0					
ANR	1062097	Identifier	r_hex_str2bin		1056898	0					
ANR	1062098	ArgumentList	input + 1		1056898	1					
ANR	1062099	Argument	input + 1		1056898	0					
ANR	1062100	AdditiveExpression	input + 1		1056898	0		+			
ANR	1062101	Identifier	input		1056898	0					
ANR	1062102	PrimaryExpression	1		1056898	1					
ANR	1062103	Argument	buf		1056898	1					
ANR	1062104	Identifier	buf		1056898	0					
ANR	1062105	IfStatement	if ( len > 0 )		1056898	1					
ANR	1062106	Condition	len > 0	1571:7:41772:41778	1056898	0	True				
ANR	1062107	RelationalExpression	len > 0		1056898	0		>			
ANR	1062108	Identifier	len		1056898	0					
ANR	1062109	PrimaryExpression	0		1056898	1					
ANR	1062110	CompoundStatement		861:16:21214:21214	1056898	1					
ANR	1062111	ExpressionStatement	"r_mem_copyloop ( core -> block , buf , core -> blocksize , len )"	1572:4:41787:41842	1056898	0	True				
ANR	1062112	CallExpression	"r_mem_copyloop ( core -> block , buf , core -> blocksize , len )"		1056898	0					
ANR	1062113	Callee	r_mem_copyloop		1056898	0					
ANR	1062114	Identifier	r_mem_copyloop		1056898	0					
ANR	1062115	ArgumentList	core -> block		1056898	1					
ANR	1062116	Argument	core -> block		1056898	0					
ANR	1062117	PtrMemberAccess	core -> block		1056898	0					
ANR	1062118	Identifier	core		1056898	0					
ANR	1062119	Identifier	block		1056898	1					
ANR	1062120	Argument	buf		1056898	1					
ANR	1062121	Identifier	buf		1056898	0					
ANR	1062122	Argument	core -> blocksize		1056898	2					
ANR	1062123	PtrMemberAccess	core -> blocksize		1056898	0					
ANR	1062124	Identifier	core		1056898	0					
ANR	1062125	Identifier	blocksize		1056898	1					
ANR	1062126	Argument	len		1056898	3					
ANR	1062127	Identifier	len		1056898	0					
ANR	1062128	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , core -> block , core -> blocksize ) )"		1056898	1					
ANR	1062129	Condition	"! r_core_write_at ( core , core -> offset , core -> block , core -> blocksize )"	1573:8:41852:41918	1056898	0	True				
ANR	1062130	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , core -> block , core -> blocksize )"		1056898	0					
ANR	1062131	UnaryOperator	!		1056898	0					
ANR	1062132	CallExpression	"r_core_write_at ( core , core -> offset , core -> block , core -> blocksize )"		1056898	1					
ANR	1062133	Callee	r_core_write_at		1056898	0					
ANR	1062134	Identifier	r_core_write_at		1056898	0					
ANR	1062135	ArgumentList	core		1056898	1					
ANR	1062136	Argument	core		1056898	0					
ANR	1062137	Identifier	core		1056898	0					
ANR	1062138	Argument	core -> offset		1056898	1					
ANR	1062139	PtrMemberAccess	core -> offset		1056898	0					
ANR	1062140	Identifier	core		1056898	0					
ANR	1062141	Identifier	offset		1056898	1					
ANR	1062142	Argument	core -> block		1056898	2					
ANR	1062143	PtrMemberAccess	core -> block		1056898	0					
ANR	1062144	Identifier	core		1056898	0					
ANR	1062145	Identifier	block		1056898	1					
ANR	1062146	Argument	core -> blocksize		1056898	3					
ANR	1062147	PtrMemberAccess	core -> blocksize		1056898	0					
ANR	1062148	Identifier	core		1056898	0					
ANR	1062149	Identifier	blocksize		1056898	1					
ANR	1062150	CompoundStatement		863:77:21354:21354	1056898	1					
ANR	1062151	ExpressionStatement	cmd_write_fail ( )	1574:5:41928:41945	1056898	0	True				
ANR	1062152	CallExpression	cmd_write_fail ( )		1056898	0					
ANR	1062153	Callee	cmd_write_fail		1056898	0					
ANR	1062154	Identifier	cmd_write_fail		1056898	0					
ANR	1062155	ArgumentList			1056898	1					
ANR	1062156	ElseStatement	else		1056898	0					
ANR	1062157	CompoundStatement		865:11:21391:21391	1056898	0					
ANR	1062158	ExpressionStatement	"WSEEK ( core , core -> blocksize )"	1576:5:41965:41994	1056898	0	True				
ANR	1062159	CallExpression	"WSEEK ( core , core -> blocksize )"		1056898	0					
ANR	1062160	Callee	WSEEK		1056898	0					
ANR	1062161	Identifier	WSEEK		1056898	0					
ANR	1062162	ArgumentList	core		1056898	1					
ANR	1062163	Argument	core		1056898	0					
ANR	1062164	Identifier	core		1056898	0					
ANR	1062165	Argument	core -> blocksize		1056898	1					
ANR	1062166	PtrMemberAccess	core -> blocksize		1056898	0					
ANR	1062167	Identifier	core		1056898	0					
ANR	1062168	Identifier	blocksize		1056898	1					
ANR	1062169	ExpressionStatement	r_core_block_read ( core )	1578:4:42006:42030	1056898	2	True				
ANR	1062170	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1062171	Callee	r_core_block_read		1056898	0					
ANR	1062172	Identifier	r_core_block_read		1056898	0					
ANR	1062173	ArgumentList	core		1056898	1					
ANR	1062174	Argument	core		1056898	0					
ANR	1062175	Identifier	core		1056898	0					
ANR	1062176	ElseStatement	else		1056898	0					
ANR	1062177	ExpressionStatement	"eprintf ( ""Wrong argument\\n"" )"	1579:10:42042:42070	1056898	0	True				
ANR	1062178	CallExpression	"eprintf ( ""Wrong argument\\n"" )"		1056898	0					
ANR	1062179	Callee	eprintf		1056898	0					
ANR	1062180	Identifier	eprintf		1056898	0					
ANR	1062181	ArgumentList	"""Wrong argument\\n"""		1056898	1					
ANR	1062182	Argument	"""Wrong argument\\n"""		1056898	0					
ANR	1062183	PrimaryExpression	"""Wrong argument\\n"""		1056898	0					
ANR	1062184	ExpressionStatement	free ( buf )	1580:3:42075:42085	1056898	2	True				
ANR	1062185	CallExpression	free ( buf )		1056898	0					
ANR	1062186	Callee	free		1056898	0					
ANR	1062187	Identifier	free		1056898	0					
ANR	1062188	ArgumentList	buf		1056898	1					
ANR	1062189	Argument	buf		1056898	0					
ANR	1062190	Identifier	buf		1056898	0					
ANR	1062191	ElseStatement	else		1056898	0					
ANR	1062192	ExpressionStatement	"eprintf ( ""Cannot malloc %d\\n"" , len + 1 )"	1581:9:42096:42133	1056898	0	True				
ANR	1062193	CallExpression	"eprintf ( ""Cannot malloc %d\\n"" , len + 1 )"		1056898	0					
ANR	1062194	Callee	eprintf		1056898	0					
ANR	1062195	Identifier	eprintf		1056898	0					
ANR	1062196	ArgumentList	"""Cannot malloc %d\\n"""		1056898	1					
ANR	1062197	Argument	"""Cannot malloc %d\\n"""		1056898	0					
ANR	1062198	PrimaryExpression	"""Cannot malloc %d\\n"""		1056898	0					
ANR	1062199	Argument	len + 1		1056898	1					
ANR	1062200	AdditiveExpression	len + 1		1056898	0		+			
ANR	1062201	Identifier	len		1056898	0					
ANR	1062202	PrimaryExpression	1		1056898	1					
ANR	1062203	BreakStatement	break ;	1582:2:42137:42142	1056898	3	True				
ANR	1062204	Label	case 'm' :	1584:1:42148:42156	1056898	74	True				
ANR	1062205	ExpressionStatement	"size = r_hex_str2bin ( input + 1 , ( ut8 * ) str )"	1585:2:42168:42209	1056898	75	True				
ANR	1062206	AssignmentExpression	"size = r_hex_str2bin ( input + 1 , ( ut8 * ) str )"		1056898	0		=			
ANR	1062207	Identifier	size		1056898	0					
ANR	1062208	CallExpression	"r_hex_str2bin ( input + 1 , ( ut8 * ) str )"		1056898	1					
ANR	1062209	Callee	r_hex_str2bin		1056898	0					
ANR	1062210	Identifier	r_hex_str2bin		1056898	0					
ANR	1062211	ArgumentList	input + 1		1056898	1					
ANR	1062212	Argument	input + 1		1056898	0					
ANR	1062213	AdditiveExpression	input + 1		1056898	0		+			
ANR	1062214	Identifier	input		1056898	0					
ANR	1062215	PrimaryExpression	1		1056898	1					
ANR	1062216	Argument	( ut8 * ) str		1056898	1					
ANR	1062217	CastExpression	( ut8 * ) str		1056898	0					
ANR	1062218	CastTarget	ut8 *		1056898	0					
ANR	1062219	Identifier	str		1056898	1					
ANR	1062220	SwitchStatement	switch ( input [ 1 ] )		1056898	76					
ANR	1062221	Condition	input [ 1 ]	1586:10:42221:42228	1056898	0	True				
ANR	1062222	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1062223	Identifier	input		1056898	0					
ANR	1062224	PrimaryExpression	1		1056898	1					
ANR	1062225	CompoundStatement		876:20:21664:21664	1056898	1					
ANR	1062226	Label	case '\\0' :	1587:2:42235:42244	1056898	0	True				
ANR	1062227	ExpressionStatement	"eprintf ( ""Current write mask: TODO\\n"" )"	1588:3:42249:42287	1056898	1	True				
ANR	1062228	CallExpression	"eprintf ( ""Current write mask: TODO\\n"" )"		1056898	0					
ANR	1062229	Callee	eprintf		1056898	0					
ANR	1062230	Identifier	eprintf		1056898	0					
ANR	1062231	ArgumentList	"""Current write mask: TODO\\n"""		1056898	1					
ANR	1062232	Argument	"""Current write mask: TODO\\n"""		1056898	0					
ANR	1062233	PrimaryExpression	"""Current write mask: TODO\\n"""		1056898	0					
ANR	1062234	BreakStatement	break ;	1590:3:42303:42308	1056898	2	True				
ANR	1062235	Label	case '?' :	1591:2:42312:42320	1056898	3	True				
ANR	1062236	BreakStatement	break ;	1592:3:42325:42330	1056898	4	True				
ANR	1062237	Label	case '-' :	1593:2:42334:42342	1056898	5	True				
ANR	1062238	ExpressionStatement	"r_io_set_write_mask ( core -> io , 0 , 0 )"	1594:3:42347:42383	1056898	6	True				
ANR	1062239	CallExpression	"r_io_set_write_mask ( core -> io , 0 , 0 )"		1056898	0					
ANR	1062240	Callee	r_io_set_write_mask		1056898	0					
ANR	1062241	Identifier	r_io_set_write_mask		1056898	0					
ANR	1062242	ArgumentList	core -> io		1056898	1					
ANR	1062243	Argument	core -> io		1056898	0					
ANR	1062244	PtrMemberAccess	core -> io		1056898	0					
ANR	1062245	Identifier	core		1056898	0					
ANR	1062246	Identifier	io		1056898	1					
ANR	1062247	Argument	0		1056898	1					
ANR	1062248	PrimaryExpression	0		1056898	0					
ANR	1062249	Argument	0		1056898	2					
ANR	1062250	PrimaryExpression	0		1056898	0					
ANR	1062251	ExpressionStatement	"eprintf ( ""Write mask disabled\\n"" )"	1595:3:42388:42421	1056898	7	True				
ANR	1062252	CallExpression	"eprintf ( ""Write mask disabled\\n"" )"		1056898	0					
ANR	1062253	Callee	eprintf		1056898	0					
ANR	1062254	Identifier	eprintf		1056898	0					
ANR	1062255	ArgumentList	"""Write mask disabled\\n"""		1056898	1					
ANR	1062256	Argument	"""Write mask disabled\\n"""		1056898	0					
ANR	1062257	PrimaryExpression	"""Write mask disabled\\n"""		1056898	0					
ANR	1062258	BreakStatement	break ;	1596:3:42426:42431	1056898	8	True				
ANR	1062259	Label	case ' ' :	1597:2:42435:42443	1056898	9	True				
ANR	1062260	IfStatement	if ( size > 0 )		1056898	10					
ANR	1062261	Condition	size > 0	1598:7:42452:42457	1056898	0	True				
ANR	1062262	RelationalExpression	size > 0		1056898	0		>			
ANR	1062263	Identifier	size		1056898	0					
ANR	1062264	PrimaryExpression	0		1056898	1					
ANR	1062265	CompoundStatement		888:15:21893:21893	1056898	1					
ANR	1062266	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	1599:4:42466:42504	1056898	0	True				
ANR	1062267	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1056898	0					
ANR	1062268	Callee	r_io_use_fd		1056898	0					
ANR	1062269	Identifier	r_io_use_fd		1056898	0					
ANR	1062270	ArgumentList	core -> io		1056898	1					
ANR	1062271	Argument	core -> io		1056898	0					
ANR	1062272	PtrMemberAccess	core -> io		1056898	0					
ANR	1062273	Identifier	core		1056898	0					
ANR	1062274	Identifier	io		1056898	1					
ANR	1062275	Argument	core -> file -> fd		1056898	1					
ANR	1062276	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1062277	PtrMemberAccess	core -> file		1056898	0					
ANR	1062278	Identifier	core		1056898	0					
ANR	1062279	Identifier	file		1056898	1					
ANR	1062280	Identifier	fd		1056898	1					
ANR	1062281	ExpressionStatement	"r_io_set_write_mask ( core -> io , ( const ut8 * ) str , size )"	1600:4:42510:42563	1056898	1	True				
ANR	1062282	CallExpression	"r_io_set_write_mask ( core -> io , ( const ut8 * ) str , size )"		1056898	0					
ANR	1062283	Callee	r_io_set_write_mask		1056898	0					
ANR	1062284	Identifier	r_io_set_write_mask		1056898	0					
ANR	1062285	ArgumentList	core -> io		1056898	1					
ANR	1062286	Argument	core -> io		1056898	0					
ANR	1062287	PtrMemberAccess	core -> io		1056898	0					
ANR	1062288	Identifier	core		1056898	0					
ANR	1062289	Identifier	io		1056898	1					
ANR	1062290	Argument	( const ut8 * ) str		1056898	1					
ANR	1062291	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1062292	CastTarget	const ut8 *		1056898	0					
ANR	1062293	Identifier	str		1056898	1					
ANR	1062294	Argument	size		1056898	2					
ANR	1062295	Identifier	size		1056898	0					
ANR	1062296	ExpressionStatement	"WSEEK ( core , size )"	1601:4:42569:42587	1056898	2	True				
ANR	1062297	CallExpression	"WSEEK ( core , size )"		1056898	0					
ANR	1062298	Callee	WSEEK		1056898	0					
ANR	1062299	Identifier	WSEEK		1056898	0					
ANR	1062300	ArgumentList	core		1056898	1					
ANR	1062301	Argument	core		1056898	0					
ANR	1062302	Identifier	core		1056898	0					
ANR	1062303	Argument	size		1056898	1					
ANR	1062304	Identifier	size		1056898	0					
ANR	1062305	ExpressionStatement	"eprintf ( ""Write mask set to '"" )"	1602:4:42593:42624	1056898	3	True				
ANR	1062306	CallExpression	"eprintf ( ""Write mask set to '"" )"		1056898	0					
ANR	1062307	Callee	eprintf		1056898	0					
ANR	1062308	Identifier	eprintf		1056898	0					
ANR	1062309	ArgumentList	"""Write mask set to '"""		1056898	1					
ANR	1062310	Argument	"""Write mask set to '"""		1056898	0					
ANR	1062311	PrimaryExpression	"""Write mask set to '"""		1056898	0					
ANR	1062312	ForStatement	for ( i = 0 ; i < size ; i ++ )		1056898	4					
ANR	1062313	ForInit	i = 0 ;	1603:9:42635:42638	1056898	0	True				
ANR	1062314	AssignmentExpression	i = 0		1056898	0		=			
ANR	1062315	Identifier	i		1056898	0					
ANR	1062316	PrimaryExpression	0		1056898	1					
ANR	1062317	Condition	i < size	1603:14:42640:42645	1056898	1	True				
ANR	1062318	RelationalExpression	i < size		1056898	0		<			
ANR	1062319	Identifier	i		1056898	0					
ANR	1062320	Identifier	size		1056898	1					
ANR	1062321	PostIncDecOperationExpression	i ++	1603:22:42648:42650	1056898	2	True				
ANR	1062322	Identifier	i		1056898	0					
ANR	1062323	IncDec	++		1056898	1					
ANR	1062324	ExpressionStatement	"eprintf ( ""%02x"" , str [ i ] )"	1604:5:42658:42682	1056898	3	True				
ANR	1062325	CallExpression	"eprintf ( ""%02x"" , str [ i ] )"		1056898	0					
ANR	1062326	Callee	eprintf		1056898	0					
ANR	1062327	Identifier	eprintf		1056898	0					
ANR	1062328	ArgumentList	"""%02x"""		1056898	1					
ANR	1062329	Argument	"""%02x"""		1056898	0					
ANR	1062330	PrimaryExpression	"""%02x"""		1056898	0					
ANR	1062331	Argument	str [ i ]		1056898	1					
ANR	1062332	ArrayIndexing	str [ i ]		1056898	0					
ANR	1062333	Identifier	str		1056898	0					
ANR	1062334	Identifier	i		1056898	1					
ANR	1062335	ExpressionStatement	"eprintf ( ""'\\n"" )"	1605:4:42688:42703	1056898	5	True				
ANR	1062336	CallExpression	"eprintf ( ""'\\n"" )"		1056898	0					
ANR	1062337	Callee	eprintf		1056898	0					
ANR	1062338	Identifier	eprintf		1056898	0					
ANR	1062339	ArgumentList	"""'\\n"""		1056898	1					
ANR	1062340	Argument	"""'\\n"""		1056898	0					
ANR	1062341	PrimaryExpression	"""'\\n"""		1056898	0					
ANR	1062342	ElseStatement	else		1056898	0					
ANR	1062343	ExpressionStatement	"eprintf ( ""Invalid string\\n"" )"	1606:10:42715:42743	1056898	0	True				
ANR	1062344	CallExpression	"eprintf ( ""Invalid string\\n"" )"		1056898	0					
ANR	1062345	Callee	eprintf		1056898	0					
ANR	1062346	Identifier	eprintf		1056898	0					
ANR	1062347	ArgumentList	"""Invalid string\\n"""		1056898	1					
ANR	1062348	Argument	"""Invalid string\\n"""		1056898	0					
ANR	1062349	PrimaryExpression	"""Invalid string\\n"""		1056898	0					
ANR	1062350	BreakStatement	break ;	1607:3:42748:42753	1056898	11	True				
ANR	1062351	BreakStatement	break ;	1609:2:42761:42766	1056898	77	True				
ANR	1062352	Label	case 'v' :	1610:1:42769:42777	1056898	78	True				
ANR	1062353	ExpressionStatement	"cmd_write_value ( core , input )"	1611:2:42789:42818	1056898	79	True				
ANR	1062354	CallExpression	"cmd_write_value ( core , input )"		1056898	0					
ANR	1062355	Callee	cmd_write_value		1056898	0					
ANR	1062356	Identifier	cmd_write_value		1056898	0					
ANR	1062357	ArgumentList	core		1056898	1					
ANR	1062358	Argument	core		1056898	0					
ANR	1062359	Identifier	core		1056898	0					
ANR	1062360	Argument	input		1056898	1					
ANR	1062361	Identifier	input		1056898	0					
ANR	1062362	BreakStatement	break ;	1612:2:42822:42827	1056898	80	True				
ANR	1062363	Label	case 'o' :	1613:1:42830:42838	1056898	81	True				
ANR	1062364	ExpressionStatement	"cmd_write_op ( core , input )"	1614:2:42850:42876	1056898	82	True				
ANR	1062365	CallExpression	"cmd_write_op ( core , input )"		1056898	0					
ANR	1062366	Callee	cmd_write_op		1056898	0					
ANR	1062367	Identifier	cmd_write_op		1056898	0					
ANR	1062368	ArgumentList	core		1056898	1					
ANR	1062369	Argument	core		1056898	0					
ANR	1062370	Identifier	core		1056898	0					
ANR	1062371	Argument	input		1056898	1					
ANR	1062372	Identifier	input		1056898	0					
ANR	1062373	BreakStatement	break ;	1615:2:42880:42885	1056898	83	True				
ANR	1062374	Label	case 'd' :	1616:1:42888:42896	1056898	84	True				
ANR	1062375	IfStatement	if ( input [ 1 ] && input [ 1 ] == ' ' )		1056898	85					
ANR	1062376	Condition	input [ 1 ] && input [ 1 ] == ' '	1617:6:42912:42936	1056898	0	True				
ANR	1062377	AndExpression	input [ 1 ] && input [ 1 ] == ' '		1056898	0		&&			
ANR	1062378	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1062379	Identifier	input		1056898	0					
ANR	1062380	PrimaryExpression	1		1056898	1					
ANR	1062381	EqualityExpression	input [ 1 ] == ' '		1056898	1		==			
ANR	1062382	ArrayIndexing	input [ 1 ]		1056898	0					
ANR	1062383	Identifier	input		1056898	0					
ANR	1062384	PrimaryExpression	1		1056898	1					
ANR	1062385	PrimaryExpression	' '		1056898	1					
ANR	1062386	CompoundStatement		908:3:22377:22411	1056898	1					
ANR	1062387	IdentifierDeclStatement	"char * arg , * inp = strdup ( input + 2 ) ;"	1618:3:42944:42978	1056898	0	True				
ANR	1062388	IdentifierDecl	* arg		1056898	0					
ANR	1062389	IdentifierDeclType	char *		1056898	0					
ANR	1062390	Identifier	arg		1056898	1					
ANR	1062391	IdentifierDecl	* inp = strdup ( input + 2 )		1056898	1					
ANR	1062392	IdentifierDeclType	char *		1056898	0					
ANR	1062393	Identifier	inp		1056898	1					
ANR	1062394	AssignmentExpression	* inp = strdup ( input + 2 )		1056898	2		=			
ANR	1062395	Identifier	inp		1056898	0					
ANR	1062396	CallExpression	strdup ( input + 2 )		1056898	1					
ANR	1062397	Callee	strdup		1056898	0					
ANR	1062398	Identifier	strdup		1056898	0					
ANR	1062399	ArgumentList	input + 2		1056898	1					
ANR	1062400	Argument	input + 2		1056898	0					
ANR	1062401	AdditiveExpression	input + 2		1056898	0		+			
ANR	1062402	Identifier	input		1056898	0					
ANR	1062403	PrimaryExpression	2		1056898	1					
ANR	1062404	ExpressionStatement	"arg = strchr ( inp , ' ' )"	1619:3:42983:43006	1056898	1	True				
ANR	1062405	AssignmentExpression	"arg = strchr ( inp , ' ' )"		1056898	0		=			
ANR	1062406	Identifier	arg		1056898	0					
ANR	1062407	CallExpression	"strchr ( inp , ' ' )"		1056898	1					
ANR	1062408	Callee	strchr		1056898	0					
ANR	1062409	Identifier	strchr		1056898	0					
ANR	1062410	ArgumentList	inp		1056898	1					
ANR	1062411	Argument	inp		1056898	0					
ANR	1062412	Identifier	inp		1056898	0					
ANR	1062413	Argument	' '		1056898	1					
ANR	1062414	PrimaryExpression	' '		1056898	0					
ANR	1062415	IfStatement	if ( arg )		1056898	2					
ANR	1062416	Condition	arg	1620:7:43015:43017	1056898	0	True				
ANR	1062417	Identifier	arg		1056898	0					
ANR	1062418	CompoundStatement		914:4:22568:22592	1056898	1					
ANR	1062419	ExpressionStatement	* arg = 0	1621:4:43026:43034	1056898	0	True				
ANR	1062420	AssignmentExpression	* arg = 0		1056898	0		=			
ANR	1062421	UnaryOperationExpression	* arg		1056898	0					
ANR	1062422	UnaryOperator	*		1056898	0					
ANR	1062423	Identifier	arg		1056898	1					
ANR	1062424	PrimaryExpression	0		1056898	1					
ANR	1062425	IdentifierDeclStatement	"ut64 addr = r_num_math ( core -> num , input + 2 ) ;"	1622:4:43040:43083	1056898	1	True				
ANR	1062426	IdentifierDecl	"addr = r_num_math ( core -> num , input + 2 )"		1056898	0					
ANR	1062427	IdentifierDeclType	ut64		1056898	0					
ANR	1062428	Identifier	addr		1056898	1					
ANR	1062429	AssignmentExpression	"addr = r_num_math ( core -> num , input + 2 )"		1056898	2		=			
ANR	1062430	Identifier	addr		1056898	0					
ANR	1062431	CallExpression	"r_num_math ( core -> num , input + 2 )"		1056898	1					
ANR	1062432	Callee	r_num_math		1056898	0					
ANR	1062433	Identifier	r_num_math		1056898	0					
ANR	1062434	ArgumentList	core -> num		1056898	1					
ANR	1062435	Argument	core -> num		1056898	0					
ANR	1062436	PtrMemberAccess	core -> num		1056898	0					
ANR	1062437	Identifier	core		1056898	0					
ANR	1062438	Identifier	num		1056898	1					
ANR	1062439	Argument	input + 2		1056898	1					
ANR	1062440	AdditiveExpression	input + 2		1056898	0		+			
ANR	1062441	Identifier	input		1056898	0					
ANR	1062442	PrimaryExpression	2		1056898	1					
ANR	1062443	IdentifierDeclStatement	"ut64 len = r_num_math ( core -> num , arg + 1 ) ;"	1623:4:43089:43129	1056898	2	True				
ANR	1062444	IdentifierDecl	"len = r_num_math ( core -> num , arg + 1 )"		1056898	0					
ANR	1062445	IdentifierDeclType	ut64		1056898	0					
ANR	1062446	Identifier	len		1056898	1					
ANR	1062447	AssignmentExpression	"len = r_num_math ( core -> num , arg + 1 )"		1056898	2		=			
ANR	1062448	Identifier	len		1056898	0					
ANR	1062449	CallExpression	"r_num_math ( core -> num , arg + 1 )"		1056898	1					
ANR	1062450	Callee	r_num_math		1056898	0					
ANR	1062451	Identifier	r_num_math		1056898	0					
ANR	1062452	ArgumentList	core -> num		1056898	1					
ANR	1062453	Argument	core -> num		1056898	0					
ANR	1062454	PtrMemberAccess	core -> num		1056898	0					
ANR	1062455	Identifier	core		1056898	0					
ANR	1062456	Identifier	num		1056898	1					
ANR	1062457	Argument	arg + 1		1056898	1					
ANR	1062458	AdditiveExpression	arg + 1		1056898	0		+			
ANR	1062459	Identifier	arg		1056898	0					
ANR	1062460	PrimaryExpression	1		1056898	1					
ANR	1062461	IdentifierDeclStatement	ut8 * data = malloc ( len ) ;	1624:4:43135:43159	1056898	3	True				
ANR	1062462	IdentifierDecl	* data = malloc ( len )		1056898	0					
ANR	1062463	IdentifierDeclType	ut8 *		1056898	0					
ANR	1062464	Identifier	data		1056898	1					
ANR	1062465	AssignmentExpression	* data = malloc ( len )		1056898	2		=			
ANR	1062466	Identifier	data		1056898	0					
ANR	1062467	CallExpression	malloc ( len )		1056898	1					
ANR	1062468	Callee	malloc		1056898	0					
ANR	1062469	Identifier	malloc		1056898	0					
ANR	1062470	ArgumentList	len		1056898	1					
ANR	1062471	Argument	len		1056898	0					
ANR	1062472	Identifier	len		1056898	0					
ANR	1062473	ExpressionStatement	"r_io_read_at ( core -> io , addr , data , len )"	1625:4:43165:43205	1056898	4	True				
ANR	1062474	CallExpression	"r_io_read_at ( core -> io , addr , data , len )"		1056898	0					
ANR	1062475	Callee	r_io_read_at		1056898	0					
ANR	1062476	Identifier	r_io_read_at		1056898	0					
ANR	1062477	ArgumentList	core -> io		1056898	1					
ANR	1062478	Argument	core -> io		1056898	0					
ANR	1062479	PtrMemberAccess	core -> io		1056898	0					
ANR	1062480	Identifier	core		1056898	0					
ANR	1062481	Identifier	io		1056898	1					
ANR	1062482	Argument	addr		1056898	1					
ANR	1062483	Identifier	addr		1056898	0					
ANR	1062484	Argument	data		1056898	2					
ANR	1062485	Identifier	data		1056898	0					
ANR	1062486	Argument	len		1056898	3					
ANR	1062487	Identifier	len		1056898	0					
ANR	1062488	ExpressionStatement	"r_io_write_at ( core -> io , core -> offset , data , len )"	1626:4:43211:43260	1056898	5	True				
ANR	1062489	CallExpression	"r_io_write_at ( core -> io , core -> offset , data , len )"		1056898	0					
ANR	1062490	Callee	r_io_write_at		1056898	0					
ANR	1062491	Identifier	r_io_write_at		1056898	0					
ANR	1062492	ArgumentList	core -> io		1056898	1					
ANR	1062493	Argument	core -> io		1056898	0					
ANR	1062494	PtrMemberAccess	core -> io		1056898	0					
ANR	1062495	Identifier	core		1056898	0					
ANR	1062496	Identifier	io		1056898	1					
ANR	1062497	Argument	core -> offset		1056898	1					
ANR	1062498	PtrMemberAccess	core -> offset		1056898	0					
ANR	1062499	Identifier	core		1056898	0					
ANR	1062500	Identifier	offset		1056898	1					
ANR	1062501	Argument	data		1056898	2					
ANR	1062502	Identifier	data		1056898	0					
ANR	1062503	Argument	len		1056898	3					
ANR	1062504	Identifier	len		1056898	0					
ANR	1062505	ExpressionStatement	free ( data )	1627:4:43266:43277	1056898	6	True				
ANR	1062506	CallExpression	free ( data )		1056898	0					
ANR	1062507	Callee	free		1056898	0					
ANR	1062508	Identifier	free		1056898	0					
ANR	1062509	ArgumentList	data		1056898	1					
ANR	1062510	Argument	data		1056898	0					
ANR	1062511	Identifier	data		1056898	0					
ANR	1062512	ElseStatement	else		1056898	0					
ANR	1062513	ExpressionStatement	"eprintf ( ""See wd?\\n"" )"	1628:10:43289:43310	1056898	0	True				
ANR	1062514	CallExpression	"eprintf ( ""See wd?\\n"" )"		1056898	0					
ANR	1062515	Callee	eprintf		1056898	0					
ANR	1062516	Identifier	eprintf		1056898	0					
ANR	1062517	ArgumentList	"""See wd?\\n"""		1056898	1					
ANR	1062518	Argument	"""See wd?\\n"""		1056898	0					
ANR	1062519	PrimaryExpression	"""See wd?\\n"""		1056898	0					
ANR	1062520	ExpressionStatement	free ( inp )	1629:3:43315:43325	1056898	3	True				
ANR	1062521	CallExpression	free ( inp )		1056898	0					
ANR	1062522	Callee	free		1056898	0					
ANR	1062523	Identifier	free		1056898	0					
ANR	1062524	ArgumentList	inp		1056898	1					
ANR	1062525	Argument	inp		1056898	0					
ANR	1062526	Identifier	inp		1056898	0					
ANR	1062527	ElseStatement	else		1056898	0					
ANR	1062528	ExpressionStatement	"eprintf ( ""Usage: wd [source-offset] [length] @ [dest-offset]\\n"" )"	1630:9:43336:43400	1056898	0	True				
ANR	1062529	CallExpression	"eprintf ( ""Usage: wd [source-offset] [length] @ [dest-offset]\\n"" )"		1056898	0					
ANR	1062530	Callee	eprintf		1056898	0					
ANR	1062531	Identifier	eprintf		1056898	0					
ANR	1062532	ArgumentList	"""Usage: wd [source-offset] [length] @ [dest-offset]\\n"""		1056898	1					
ANR	1062533	Argument	"""Usage: wd [source-offset] [length] @ [dest-offset]\\n"""		1056898	0					
ANR	1062534	PrimaryExpression	"""Usage: wd [source-offset] [length] @ [dest-offset]\\n"""		1056898	0					
ANR	1062535	BreakStatement	break ;	1631:2:43404:43409	1056898	86	True				
ANR	1062536	Label	case 's' :	1632:1:43412:43420	1056898	87	True				
ANR	1062537	IfStatement	if ( str && * str && str [ 1 ] )		1056898	88					
ANR	1062538	Condition	str && * str && str [ 1 ]	1633:6:43436:43456	1056898	0	True				
ANR	1062539	AndExpression	str && * str && str [ 1 ]		1056898	0		&&			
ANR	1062540	Identifier	str		1056898	0					
ANR	1062541	AndExpression	* str && str [ 1 ]		1056898	1		&&			
ANR	1062542	UnaryOperationExpression	* str		1056898	0					
ANR	1062543	UnaryOperator	*		1056898	0					
ANR	1062544	Identifier	str		1056898	1					
ANR	1062545	ArrayIndexing	str [ 1 ]		1056898	1					
ANR	1062546	Identifier	str		1056898	0					
ANR	1062547	PrimaryExpression	1		1056898	1					
ANR	1062548	CompoundStatement		923:29:22892:22892	1056898	1					
ANR	1062549	ExpressionStatement	len = r_str_unescape ( str + 1 )	1634:3:43464:43492	1056898	0	True				
ANR	1062550	AssignmentExpression	len = r_str_unescape ( str + 1 )		1056898	0		=			
ANR	1062551	Identifier	len		1056898	0					
ANR	1062552	CallExpression	r_str_unescape ( str + 1 )		1056898	1					
ANR	1062553	Callee	r_str_unescape		1056898	0					
ANR	1062554	Identifier	r_str_unescape		1056898	0					
ANR	1062555	ArgumentList	str + 1		1056898	1					
ANR	1062556	Argument	str + 1		1056898	0					
ANR	1062557	AdditiveExpression	str + 1		1056898	0		+			
ANR	1062558	Identifier	str		1056898	0					
ANR	1062559	PrimaryExpression	1		1056898	1					
ANR	1062560	IfStatement	if ( len > 255 )		1056898	1					
ANR	1062561	Condition	len > 255	1635:7:43501:43507	1056898	0	True				
ANR	1062562	RelationalExpression	len > 255		1056898	0		>			
ANR	1062563	Identifier	len		1056898	0					
ANR	1062564	PrimaryExpression	255		1056898	1					
ANR	1062565	CompoundStatement		925:16:22943:22943	1056898	1					
ANR	1062566	ExpressionStatement	"eprintf ( ""Too large\\n"" )"	1636:4:43516:43539	1056898	0	True				
ANR	1062567	CallExpression	"eprintf ( ""Too large\\n"" )"		1056898	0					
ANR	1062568	Callee	eprintf		1056898	0					
ANR	1062569	Identifier	eprintf		1056898	0					
ANR	1062570	ArgumentList	"""Too large\\n"""		1056898	1					
ANR	1062571	Argument	"""Too large\\n"""		1056898	0					
ANR	1062572	PrimaryExpression	"""Too large\\n"""		1056898	0					
ANR	1062573	ElseStatement	else		1056898	0					
ANR	1062574	CompoundStatement		928:4:22990:23009	1056898	0					
ANR	1062575	IdentifierDeclStatement	ut8 ulen = ( ut8 ) len ;	1638:4:43557:43576	1056898	0	True				
ANR	1062576	IdentifierDecl	ulen = ( ut8 ) len		1056898	0					
ANR	1062577	IdentifierDeclType	ut8		1056898	0					
ANR	1062578	Identifier	ulen		1056898	1					
ANR	1062579	AssignmentExpression	ulen = ( ut8 ) len		1056898	2		=			
ANR	1062580	Identifier	ulen		1056898	0					
ANR	1062581	CastExpression	( ut8 ) len		1056898	1					
ANR	1062582	CastTarget	ut8		1056898	0					
ANR	1062583	Identifier	len		1056898	1					
ANR	1062584	IfStatement	"if ( ! r_core_write_at ( core , core -> offset , & ulen , 1 ) || ! r_core_write_at ( core , core -> offset + 1 , ( const ut8 * ) str + 1 , len ) )"		1056898	1					
ANR	1062585	Condition	"! r_core_write_at ( core , core -> offset , & ulen , 1 ) || ! r_core_write_at ( core , core -> offset + 1 , ( const ut8 * ) str + 1 , len )"	1639:8:43586:43705	1056898	0	True				
ANR	1062586	OrExpression	"! r_core_write_at ( core , core -> offset , & ulen , 1 ) || ! r_core_write_at ( core , core -> offset + 1 , ( const ut8 * ) str + 1 , len )"		1056898	0		||			
ANR	1062587	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset , & ulen , 1 )"		1056898	0					
ANR	1062588	UnaryOperator	!		1056898	0					
ANR	1062589	CallExpression	"r_core_write_at ( core , core -> offset , & ulen , 1 )"		1056898	1					
ANR	1062590	Callee	r_core_write_at		1056898	0					
ANR	1062591	Identifier	r_core_write_at		1056898	0					
ANR	1062592	ArgumentList	core		1056898	1					
ANR	1062593	Argument	core		1056898	0					
ANR	1062594	Identifier	core		1056898	0					
ANR	1062595	Argument	core -> offset		1056898	1					
ANR	1062596	PtrMemberAccess	core -> offset		1056898	0					
ANR	1062597	Identifier	core		1056898	0					
ANR	1062598	Identifier	offset		1056898	1					
ANR	1062599	Argument	& ulen		1056898	2					
ANR	1062600	UnaryOperationExpression	& ulen		1056898	0					
ANR	1062601	UnaryOperator	&		1056898	0					
ANR	1062602	Identifier	ulen		1056898	1					
ANR	1062603	Argument	1		1056898	3					
ANR	1062604	PrimaryExpression	1		1056898	0					
ANR	1062605	UnaryOperationExpression	"! r_core_write_at ( core , core -> offset + 1 , ( const ut8 * ) str + 1 , len )"		1056898	1					
ANR	1062606	UnaryOperator	!		1056898	0					
ANR	1062607	CallExpression	"r_core_write_at ( core , core -> offset + 1 , ( const ut8 * ) str + 1 , len )"		1056898	1					
ANR	1062608	Callee	r_core_write_at		1056898	0					
ANR	1062609	Identifier	r_core_write_at		1056898	0					
ANR	1062610	ArgumentList	core		1056898	1					
ANR	1062611	Argument	core		1056898	0					
ANR	1062612	Identifier	core		1056898	0					
ANR	1062613	Argument	core -> offset + 1		1056898	1					
ANR	1062614	AdditiveExpression	core -> offset + 1		1056898	0		+			
ANR	1062615	PtrMemberAccess	core -> offset		1056898	0					
ANR	1062616	Identifier	core		1056898	0					
ANR	1062617	Identifier	offset		1056898	1					
ANR	1062618	PrimaryExpression	1		1056898	1					
ANR	1062619	Argument	( const ut8 * ) str + 1		1056898	2					
ANR	1062620	AdditiveExpression	( const ut8 * ) str + 1		1056898	0		+			
ANR	1062621	CastExpression	( const ut8 * ) str		1056898	0					
ANR	1062622	CastTarget	const ut8 *		1056898	0					
ANR	1062623	Identifier	str		1056898	1					
ANR	1062624	PrimaryExpression	1		1056898	1					
ANR	1062625	Argument	len		1056898	3					
ANR	1062626	Identifier	len		1056898	0					
ANR	1062627	CompoundStatement		930:71:23141:23141	1056898	1					
ANR	1062628	ExpressionStatement	cmd_write_fail ( )	1641:5:43715:43732	1056898	0	True				
ANR	1062629	CallExpression	cmd_write_fail ( )		1056898	0					
ANR	1062630	Callee	cmd_write_fail		1056898	0					
ANR	1062631	Identifier	cmd_write_fail		1056898	0					
ANR	1062632	ArgumentList			1056898	1					
ANR	1062633	ElseStatement	else		1056898	0					
ANR	1062634	CompoundStatement		932:11:23178:23178	1056898	0					
ANR	1062635	ExpressionStatement	"WSEEK ( core , len )"	1643:5:43752:43769	1056898	0	True				
ANR	1062636	CallExpression	"WSEEK ( core , len )"		1056898	0					
ANR	1062637	Callee	WSEEK		1056898	0					
ANR	1062638	Identifier	WSEEK		1056898	0					
ANR	1062639	ArgumentList	core		1056898	1					
ANR	1062640	Argument	core		1056898	0					
ANR	1062641	Identifier	core		1056898	0					
ANR	1062642	Argument	len		1056898	1					
ANR	1062643	Identifier	len		1056898	0					
ANR	1062644	ExpressionStatement	r_core_block_read ( core )	1645:4:43781:43805	1056898	2	True				
ANR	1062645	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1062646	Callee	r_core_block_read		1056898	0					
ANR	1062647	Identifier	r_core_block_read		1056898	0					
ANR	1062648	ArgumentList	core		1056898	1					
ANR	1062649	Argument	core		1056898	0					
ANR	1062650	Identifier	core		1056898	0					
ANR	1062651	ElseStatement	else		1056898	0					
ANR	1062652	ExpressionStatement	"eprintf ( ""Too short.\\n"" )"	1647:9:43821:43845	1056898	0	True				
ANR	1062653	CallExpression	"eprintf ( ""Too short.\\n"" )"		1056898	0					
ANR	1062654	Callee	eprintf		1056898	0					
ANR	1062655	Identifier	eprintf		1056898	0					
ANR	1062656	ArgumentList	"""Too short.\\n"""		1056898	1					
ANR	1062657	Argument	"""Too short.\\n"""		1056898	0					
ANR	1062658	PrimaryExpression	"""Too short.\\n"""		1056898	0					
ANR	1062659	BreakStatement	break ;	1648:2:43849:43854	1056898	89	True				
ANR	1062660	Label	default :	1649:1:43857:43864	1056898	90	True				
ANR	1062661	Identifier	default		1056898	0					
ANR	1062662	Label	case '?' :	1650:1:43867:43875	1056898	91	True				
ANR	1062663	IfStatement	if ( core -> oobi )		1056898	92					
ANR	1062664	Condition	core -> oobi	1651:6:43891:43900	1056898	0	True				
ANR	1062665	PtrMemberAccess	core -> oobi		1056898	0					
ANR	1062666	Identifier	core		1056898	0					
ANR	1062667	Identifier	oobi		1056898	1					
ANR	1062668	CompoundStatement		941:18:23336:23336	1056898	1					
ANR	1062669	ExpressionStatement	"eprintf ( ""Writing oobi buffer!\\n"" )"	1652:3:43908:43942	1056898	0	True				
ANR	1062670	CallExpression	"eprintf ( ""Writing oobi buffer!\\n"" )"		1056898	0					
ANR	1062671	Callee	eprintf		1056898	0					
ANR	1062672	Identifier	eprintf		1056898	0					
ANR	1062673	ArgumentList	"""Writing oobi buffer!\\n"""		1056898	1					
ANR	1062674	Argument	"""Writing oobi buffer!\\n"""		1056898	0					
ANR	1062675	PrimaryExpression	"""Writing oobi buffer!\\n"""		1056898	0					
ANR	1062676	ExpressionStatement	"r_io_use_fd ( core -> io , core -> file -> fd )"	1653:3:43947:43985	1056898	1	True				
ANR	1062677	CallExpression	"r_io_use_fd ( core -> io , core -> file -> fd )"		1056898	0					
ANR	1062678	Callee	r_io_use_fd		1056898	0					
ANR	1062679	Identifier	r_io_use_fd		1056898	0					
ANR	1062680	ArgumentList	core -> io		1056898	1					
ANR	1062681	Argument	core -> io		1056898	0					
ANR	1062682	PtrMemberAccess	core -> io		1056898	0					
ANR	1062683	Identifier	core		1056898	0					
ANR	1062684	Identifier	io		1056898	1					
ANR	1062685	Argument	core -> file -> fd		1056898	1					
ANR	1062686	PtrMemberAccess	core -> file -> fd		1056898	0					
ANR	1062687	PtrMemberAccess	core -> file		1056898	0					
ANR	1062688	Identifier	core		1056898	0					
ANR	1062689	Identifier	file		1056898	1					
ANR	1062690	Identifier	fd		1056898	1					
ANR	1062691	ExpressionStatement	"r_io_write ( core -> io , core -> oobi , core -> oobi_len )"	1654:3:43990:44039	1056898	2	True				
ANR	1062692	CallExpression	"r_io_write ( core -> io , core -> oobi , core -> oobi_len )"		1056898	0					
ANR	1062693	Callee	r_io_write		1056898	0					
ANR	1062694	Identifier	r_io_write		1056898	0					
ANR	1062695	ArgumentList	core -> io		1056898	1					
ANR	1062696	Argument	core -> io		1056898	0					
ANR	1062697	PtrMemberAccess	core -> io		1056898	0					
ANR	1062698	Identifier	core		1056898	0					
ANR	1062699	Identifier	io		1056898	1					
ANR	1062700	Argument	core -> oobi		1056898	1					
ANR	1062701	PtrMemberAccess	core -> oobi		1056898	0					
ANR	1062702	Identifier	core		1056898	0					
ANR	1062703	Identifier	oobi		1056898	1					
ANR	1062704	Argument	core -> oobi_len		1056898	2					
ANR	1062705	PtrMemberAccess	core -> oobi_len		1056898	0					
ANR	1062706	Identifier	core		1056898	0					
ANR	1062707	Identifier	oobi_len		1056898	1					
ANR	1062708	ExpressionStatement	"WSEEK ( core , core -> oobi_len )"	1655:3:44044:44072	1056898	3	True				
ANR	1062709	CallExpression	"WSEEK ( core , core -> oobi_len )"		1056898	0					
ANR	1062710	Callee	WSEEK		1056898	0					
ANR	1062711	Identifier	WSEEK		1056898	0					
ANR	1062712	ArgumentList	core		1056898	1					
ANR	1062713	Argument	core		1056898	0					
ANR	1062714	Identifier	core		1056898	0					
ANR	1062715	Argument	core -> oobi_len		1056898	1					
ANR	1062716	PtrMemberAccess	core -> oobi_len		1056898	0					
ANR	1062717	Identifier	core		1056898	0					
ANR	1062718	Identifier	oobi_len		1056898	1					
ANR	1062719	ExpressionStatement	r_core_block_read ( core )	1656:3:44077:44101	1056898	4	True				
ANR	1062720	CallExpression	r_core_block_read ( core )		1056898	0					
ANR	1062721	Callee	r_core_block_read		1056898	0					
ANR	1062722	Identifier	r_core_block_read		1056898	0					
ANR	1062723	ArgumentList	core		1056898	1					
ANR	1062724	Argument	core		1056898	0					
ANR	1062725	Identifier	core		1056898	0					
ANR	1062726	ElseStatement	else		1056898	0					
ANR	1062727	CompoundStatement		947:9:23545:23545	1056898	0					
ANR	1062728	ExpressionStatement	"r_core_cmd_help ( core , help_msg_w )"	1658:3:44117:44151	1056898	0	True				
ANR	1062729	CallExpression	"r_core_cmd_help ( core , help_msg_w )"		1056898	0					
ANR	1062730	Callee	r_core_cmd_help		1056898	0					
ANR	1062731	Identifier	r_core_cmd_help		1056898	0					
ANR	1062732	ArgumentList	core		1056898	1					
ANR	1062733	Argument	core		1056898	0					
ANR	1062734	Identifier	core		1056898	0					
ANR	1062735	Argument	help_msg_w		1056898	1					
ANR	1062736	Identifier	help_msg_w		1056898	0					
ANR	1062737	BreakStatement	break ;	1660:2:44159:44164	1056898	93	True				
ANR	1062738	ExpressionStatement	R_FREE ( ostr )	1662:1:44170:44183	1056898	14	True				
ANR	1062739	CallExpression	R_FREE ( ostr )		1056898	0					
ANR	1062740	Callee	R_FREE		1056898	0					
ANR	1062741	Identifier	R_FREE		1056898	0					
ANR	1062742	ArgumentList	ostr		1056898	1					
ANR	1062743	Argument	ostr		1056898	0					
ANR	1062744	Identifier	ostr		1056898	0					
ANR	1062745	ReturnStatement	return 0 ;	1663:1:44186:44194	1056898	15	True				
ANR	1062746	PrimaryExpression	0		1056898	0					
ANR	1062747	ReturnType	static int		1056898	1					
ANR	1062748	Identifier	cmd_write		1056898	2					
ANR	1062749	ParameterList	"void * data , const char * input"		1056898	3					
ANR	1062750	Parameter	void * data	711:21:20535:20544	1056898	0	True				
ANR	1062751	ParameterType	void *		1056898	0					
ANR	1062752	Identifier	data		1056898	1					
ANR	1062753	Parameter	const char * input	711:33:20547:20563	1056898	1	True				
ANR	1062754	ParameterType	const char *		1056898	0					
ANR	1062755	Identifier	input		1056898	1					
ANR	1062756	CFGEntryNode	ENTRY		1056898		True				
ANR	1062757	CFGExitNode	EXIT		1056898		True				
ANR	1062758	Symbol	* prefix		1056898						
ANR	1062759	Symbol	* map		1056898						
ANR	1062760	Symbol	prefix		1056898						
ANR	1062761	Symbol	* input		1056898						
ANR	1062762	Symbol	core -> offset		1056898						
ANR	1062763	Symbol	strchr		1056898						
ANR	1062764	Symbol	cmd_suc		1056898						
ANR	1062765	Symbol	input_shadow		1056898						
ANR	1062766	Symbol	len		1056898						
ANR	1062767	Symbol	b_size		1056898						
ANR	1062768	Symbol	tmp		1056898						
ANR	1062769	Symbol	toend		1056898						
ANR	1062770	Symbol	* core -> num		1056898						
ANR	1062771	Symbol	hex		1056898						
ANR	1062772	Symbol	r_socket_new		1056898						
ANR	1062773	Symbol	r_anal_op		1056898						
ANR	1062774	Symbol	core -> blocksize		1056898						
ANR	1062775	Symbol	help_msg_wt		1056898						
ANR	1062776	Symbol	r_file_slurp		1056898						
ANR	1062777	Symbol	* buf		1056898						
ANR	1062778	Symbol	ac		1056898						
ANR	1062779	Symbol	core -> block		1056898						
ANR	1062780	Symbol	help_msg_wx		1056898						
ANR	1062781	Symbol	in		1056898						
ANR	1062782	Symbol	help_msg_wp		1056898						
ANR	1062783	Symbol	* _fn		1056898						
ANR	1062784	Symbol	str		1056898						
ANR	1062785	Symbol	input		1056898						
ANR	1062786	Symbol	fail		1056898						
ANR	1062787	Symbol	help_msg_wc		1056898						
ANR	1062788	Symbol	rc		1056898						
ANR	1062789	Symbol	filename		1056898						
ANR	1062790	Symbol	help_msg_we		1056898						
ANR	1062791	Symbol	size		1056898						
ANR	1062792	Symbol	r_config_get_i		1056898						
ANR	1062793	Symbol	r_str_trim_ro		1056898						
ANR	1062794	Symbol	analop		1056898						
ANR	1062795	Symbol	help_msg_wa		1056898						
ANR	1062796	Symbol	* arg		1056898						
ANR	1062797	Symbol	* tmp		1056898						
ANR	1062798	Symbol	r_core_extend_at		1056898						
ANR	1062799	Symbol	core -> oobi		1056898						
ANR	1062800	Symbol	* core		1056898						
ANR	1062801	Symbol	r_config_get		1056898						
ANR	1062802	Symbol	core -> assembler		1056898						
ANR	1062803	Symbol	acode		1056898						
ANR	1062804	Symbol	core -> anal		1056898						
ANR	1062805	Symbol	out		1056898						
ANR	1062806	Symbol	map -> delta		1056898						
ANR	1062807	Symbol	* space ++		1056898						
ANR	1062808	Symbol	file		1056898						
ANR	1062809	Symbol	core -> io		1056898						
ANR	1062810	Symbol	ostr		1056898						
ANR	1062811	Symbol	arg		1056898						
ANR	1062812	Symbol	bin_len		1056898						
ANR	1062813	Symbol	* str		1056898						
ANR	1062814	Symbol	r_asm_code_get_hex		1056898						
ANR	1062815	Symbol	help_msg_w		1056898						
ANR	1062816	Symbol	r_hex_str2bin		1056898						
ANR	1062817	Symbol	map		1056898						
ANR	1062818	Symbol	malloc		1056898						
ANR	1062819	Symbol	a		1056898						
ANR	1062820	Symbol	b		1056898						
ANR	1062821	Symbol	_fn		1056898						
ANR	1062822	Symbol	sz		1056898						
ANR	1062823	Symbol	acode -> bytes		1056898						
ANR	1062824	Symbol	* nl		1056898						
ANR	1062825	Symbol	i		1056898						
ANR	1062826	Symbol	& size		1056898						
ANR	1062827	Symbol	r_io_cache_invalidate		1056898						
ANR	1062828	Symbol	off		1056898						
ANR	1062829	Symbol	p		1056898						
ANR	1062830	Symbol	buf		1056898						
ANR	1062831	Symbol	s		1056898						
ANR	1062832	Symbol	to		1056898						
ANR	1062833	Symbol	r_core_dump		1056898						
ANR	1062834	Symbol	r_asm_assemble_file		1056898						
ANR	1062835	Symbol	* data		1056898						
ANR	1062836	Symbol	r_io_write_at		1056898						
ANR	1062837	Symbol	data		1056898						
ANR	1062838	Symbol	num		1056898						
ANR	1062839	Symbol	R_SOCKET_PROTO_TCP		1056898						
ANR	1062840	Symbol	sign		1056898						
ANR	1062841	Symbol	nextaddr		1056898						
ANR	1062842	Symbol	dist		1056898						
ANR	1062843	Symbol	core -> num -> value		1056898						
ANR	1062844	Symbol	space		1056898						
ANR	1062845	Symbol	r_str_trim_dup		1056898						
ANR	1062846	Symbol	acode -> len		1056898						
ANR	1062847	Symbol	strlen		1056898						
ANR	1062848	Symbol	newline		1056898						
ANR	1062849	Symbol	r_io_fd_size		1056898						
ANR	1062850	Symbol	hexa		1056898						
ANR	1062851	Symbol	* port ++		1056898						
ANR	1062852	Symbol	r_asm_massemble		1056898						
ANR	1062853	Symbol	host		1056898						
ANR	1062854	Symbol	r_base64_encode		1056898						
ANR	1062855	Symbol	r_core_editor		1056898						
ANR	1062856	Symbol	from		1056898						
ANR	1062857	Symbol	core -> num		1056898						
ANR	1062858	Symbol	strcmp		1056898						
ANR	1062859	Symbol	NULL		1056898						
ANR	1062860	Symbol	r_socket_write		1056898						
ANR	1062861	Symbol	strtok		1056898						
ANR	1062862	Symbol	wseek		1056898						
ANR	1062863	Symbol	done		1056898						
ANR	1062864	Symbol	core		1056898						
ANR	1062865	Symbol	bin_buf		1056898						
ANR	1062866	Symbol	port		1056898						
ANR	1062867	Symbol	strstr		1056898						
ANR	1062868	Symbol	analop . size		1056898						
ANR	1062869	Symbol	ulen		1056898						
ANR	1062870	Symbol	true		1056898						
ANR	1062871	Symbol	core -> file -> fd		1056898						
ANR	1062872	Symbol	* acode		1056898						
ANR	1062873	Symbol	nl		1056898						
ANR	1062874	Symbol	map -> itv		1056898						
ANR	1062875	Symbol	line		1056898						
ANR	1062876	Symbol	& analop		1056898						
ANR	1062877	Symbol	core -> file -> desc		1056898						
ANR	1062878	Symbol	calloc		1056898						
ANR	1062879	Symbol	r_str_unescape		1056898						
ANR	1062880	Symbol	poff		1056898						
ANR	1062881	Symbol	r_asm_modify		1056898						
ANR	1062882	Symbol	R_ANAL_OP_MASK_BASIC		1056898						
ANR	1062883	Symbol	r_num_math		1056898						
ANR	1062884	Symbol	offs		1056898						
ANR	1062885	Symbol	cur_off		1056898						
ANR	1062886	Symbol	str_len		1056898						
ANR	1062887	Symbol	r_file_dump		1056898						
ANR	1062888	Symbol	r_socket_connect		1056898						
ANR	1062889	Symbol	r_file_path		1056898						
ANR	1062890	Symbol	map -> itv . addr		1056898						
ANR	1062891	Symbol	addr		1056898						
ANR	1062892	Symbol	UT64_MAX		1056898						
ANR	1062893	Symbol	core -> io -> cached		1056898						
ANR	1062894	Symbol	* * core		1056898						
ANR	1062895	Symbol	help_msg_wA		1056898						
ANR	1062896	Symbol	core -> config		1056898						
ANR	1062897	Symbol	r_base64_decode		1056898						
ANR	1062898	Symbol	op		1056898						
ANR	1062899	Symbol	core -> file		1056898						
ANR	1062900	Symbol	src		1056898						
ANR	1062901	Symbol	false		1056898						
ANR	1062902	Symbol	inp		1056898						
ANR	1062903	Symbol	* a		1056898						
ANR	1062904	Symbol	& ulen		1056898						
ANR	1062905	Symbol	* b		1056898						
ANR	1062906	Symbol	core -> oobi_len		1056898						
ANR	1062907	Symbol	r_num_rand		1056898						
ANR	1062908	Symbol	* core -> io		1056898						
ANR	1062909	Symbol	* core -> file		1056898						
ANR	1062910	Symbol	r_file_slurp_hexpairs		1056898						
ANR	1062911	Symbol	* i		1056898						
ANR	1062912	Symbol	* filename		1056898						
ANR	1062913	Symbol	bytes		1056898						
ANR	1062914	Symbol	cmd_write_hexpair		1056898						
ANR	1062915	Symbol	* p		1056898						
ANR	1062916	Symbol	r_core_write_at		1056898						
ANR	1062917	Symbol	strdup		1056898						
ANR	1062918	Symbol	r_io_size		1056898						
ANR	1062919	Symbol	r_file_exists		1056898						
ANR	1062920	Symbol	append		1056898						
ANR	1062921	Symbol	r_io_map_get		1056898						
