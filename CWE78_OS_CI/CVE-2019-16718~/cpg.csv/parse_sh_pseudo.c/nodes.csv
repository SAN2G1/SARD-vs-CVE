command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5554562	File	data/converged/CVE-2019-16718~_radare2/parse_sh_pseudo.c								
ANR	5554563	Function	replace	13:0:208:4320							
ANR	5554564	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5554563	0					
ANR	5554565	CompoundStatement		13:63:271:4320	5554563	0					
ANR	5554566	IdentifierDeclStatement	"int i , j , k ;"	14:1:274:283	5554563	0	True				
ANR	5554567	IdentifierDecl	i		5554563	0					
ANR	5554568	IdentifierDeclType	int		5554563	0					
ANR	5554569	Identifier	i		5554563	1					
ANR	5554570	IdentifierDecl	j		5554563	1					
ANR	5554571	IdentifierDeclType	int		5554563	0					
ANR	5554572	Identifier	j		5554563	1					
ANR	5554573	IdentifierDecl	k		5554563	2					
ANR	5554574	IdentifierDeclType	int		5554563	0					
ANR	5554575	Identifier	k		5554563	1					
ANR	5554576	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } } ;"	15:1:286:3644	5554563	1	True				
ANR	5554577	IdentifierDecl	"ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } }"		5554563	0					
ANR	5554578	IdentifierDeclType	 [ ]		5554563	0					
ANR	5554579	Identifier	ops		5554563	1					
ANR	5554580	AssignmentExpression	"ops [ ] = { { ""add"" , ""B += A"" } , { ""addc"" , ""B += A + t"" } , { ""addv"" , ""B += A; t = int_overflow (B)"" } , { ""and"" , ""B &= A"" } , { ""and.b"" , ""B &= A"" } , { ""bf"" , ""if (!t) goto A"" } , { ""bf.s"" , ""if (!t) goto A"" } , { ""bra"" , ""goto A"" } , { ""brk"" , ""_break_exception ()"" } , { ""bsr"" , ""A ()"" } , { ""bsrf"" , ""A ()"" } , { ""bt"" , ""if (t) goto A"" } , { ""bt.s"" , ""if (t) goto A"" } , { ""clrmac"" , ""_clrmac ()"" } , { ""clrs"" , ""_clrs ()"" } , { ""clrt"" , ""_clrt ()"" } , { ""cmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""cmp/ge"" , ""t = B >= A ? 1 : 0"" } , { ""cmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""cmp/hi"" , ""t = (unsigned) B > (unsigned) A ? 1 : 0"" } , { ""cmp/hs"" , ""t = (unsigned) B >= (unsigned) A ? 1 : 0"" } , { ""cmp/pl"" , ""t = A > 0 ? 1 : 0"" } , { ""cmp/pz"" , ""t = A >= 0 ? 1 : 0"" } , { ""cmp/str"" , ""t = A ^ B ? 1 : 0"" } , { ""div1"" , ""B /= A"" } , { ""dmuls.l"" , ""mac = B * A"" } , { ""dmulu.l"" , ""mac = (unsigned) B * (unsigned) A"" } , { ""dt"" , ""A--; t = !A ? 1 : 0"" } , { ""exts.b"" , ""B = (int) A"" } , { ""extu.b"" , ""B = (unsigned int) A"" } , { ""exts.w"" , ""B = (int) A"" } , { ""extu.w"" , ""B = (unsigned int) A"" } , { ""fabs"" , ""A = abs (A)"" } , { ""fadd"" , ""B += A"" } , { ""fcmp/eq"" , ""t = B == A ? 1 : 0"" } , { ""fcmp/gt"" , ""t = B > A ? 1 : 0"" } , { ""fcnvds"" , ""B = A"" } , { ""fdiv"" , ""B /= A"" } , { ""flds"" , ""B = A"" } , { ""fldi0"" , ""A = 0.0f"" } , { ""fldi1"" , ""A = 1.0f"" } , { ""float"" , ""B = A"" } , { ""fmac"" , ""C += A * B"" } , { ""fmov"" , ""B = A"" } , { ""fmov.s"" , ""B = A"" } , { ""fmul"" , ""B *= A"" } , { ""fneg"" , ""A = -A"" } , { ""fsqrt"" , ""A = sqrt (A)"" } , { ""fsts"" , ""B = A"" } , { ""fsub"" , ""B -= A"" } , { ""ftrc"" , ""B = trunc (A)"" } , { ""ftrv"" , ""B *= A"" } , { ""jmp"" , ""goto A"" } , { ""jsr"" , ""A ()"" } , { ""ldr"" , ""B = A"" } , { ""ldr.l"" , ""B = A"" } , { ""lds"" , ""B = A"" } , { ""lds.l"" , ""B = A"" } , { ""mov"" , ""B = A"" } , { ""mov.b"" , ""B = A"" } , { ""mov.l"" , ""B = A"" } , { ""mov.w"" , ""B = A"" } , { ""movca.l"" , ""B = A"" } , { ""movt"" , ""A = t"" } , { ""muls.w"" , ""macl = A * B"" } , { ""mulu.w"" , ""macl = (unsigned) A * (unsigned) B"" } , { ""neg"" , ""A = -A"" } , { ""negc"" , ""A = (-A) - t"" } , { ""nop"" , """" } , { ""not"" , ""A = !A"" } , { ""or"" , ""B |= A"" } , { ""rotcl"" , ""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"" } , { ""rotl"" , ""A = (A << 1) | (A >> 31)"" } , { ""rotr"" , ""A = (A << 31) | (A >> 1)"" } , { ""rte"" , ""_rte ()"" } , { ""rts"" , ""return"" } , { ""sets"" , ""s = 1"" } , { ""sett"" , ""t = 1"" } , { ""shad"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shal"" , ""A <<= 1"" } , { ""shar"" , ""A >>= 1"" } , { ""shld"" , ""B = A >= 0 ? B << A : B >> (31 - A)"" } , { ""shll"" , ""A <<= 1"" } , { ""shll2"" , ""A <<= 2"" } , { ""shll8"" , ""A <<= 8"" } , { ""shll16"" , ""A <<= 16"" } , { ""shlr"" , ""A >>= 1"" } , { ""shlr2"" , ""A >>= 2"" } , { ""shlr8"" , ""A >>= 8"" } , { ""shlr16"" , ""A >>= 16"" } , { ""sleep"" , ""_halt ()"" } , { ""stc"" , ""B = A"" } , { ""stc.l"" , ""B = A"" } , { ""sts"" , ""B = A"" } , { ""sts.l"" , ""B = A"" } , { ""sub"" , ""B -= A"" } , { ""subc"" , ""B -= A - t"" } , { ""subv"" , ""B -= A; t = int_underflow (B)"" } , { ""swap.b"" , ""swap_byte (B, A)"" } , { ""swap.w"" , ""swap_word (B, A)"" } , { ""tas.b"" , ""test_and_set (A)"" } , { ""trapa"" , ""trap (A)"" } , { ""tst"" , ""t = B & A ? 0 : 1"" } , { ""xor"" , ""B ^= A"" } , { ""xor.b"" , ""B ^= A"" } , { NULL } }"		5554563	2		=			
ANR	5554581	Identifier	ops		5554563	0					
ANR	5554582	InitializerList	"""add"""		5554563	1					
ANR	5554583	InitializerList	"""add"""		5554563	0					
ANR	5554584	PrimaryExpression	"""add"""		5554563	0					
ANR	5554585	PrimaryExpression	"""B += A"""		5554563	1					
ANR	5554586	InitializerList	"""addc"""		5554563	1					
ANR	5554587	PrimaryExpression	"""addc"""		5554563	0					
ANR	5554588	PrimaryExpression	"""B += A + t"""		5554563	1					
ANR	5554589	InitializerList	"""addv"""		5554563	2					
ANR	5554590	PrimaryExpression	"""addv"""		5554563	0					
ANR	5554591	PrimaryExpression	"""B += A; t = int_overflow (B)"""		5554563	1					
ANR	5554592	InitializerList	"""and"""		5554563	3					
ANR	5554593	PrimaryExpression	"""and"""		5554563	0					
ANR	5554594	PrimaryExpression	"""B &= A"""		5554563	1					
ANR	5554595	InitializerList	"""and.b"""		5554563	4					
ANR	5554596	PrimaryExpression	"""and.b"""		5554563	0					
ANR	5554597	PrimaryExpression	"""B &= A"""		5554563	1					
ANR	5554598	InitializerList	"""bf"""		5554563	5					
ANR	5554599	PrimaryExpression	"""bf"""		5554563	0					
ANR	5554600	PrimaryExpression	"""if (!t) goto A"""		5554563	1					
ANR	5554601	InitializerList	"""bf.s"""		5554563	6					
ANR	5554602	PrimaryExpression	"""bf.s"""		5554563	0					
ANR	5554603	PrimaryExpression	"""if (!t) goto A"""		5554563	1					
ANR	5554604	InitializerList	"""bra"""		5554563	7					
ANR	5554605	PrimaryExpression	"""bra"""		5554563	0					
ANR	5554606	PrimaryExpression	"""goto A"""		5554563	1					
ANR	5554607	InitializerList	"""brk"""		5554563	8					
ANR	5554608	PrimaryExpression	"""brk"""		5554563	0					
ANR	5554609	PrimaryExpression	"""_break_exception ()"""		5554563	1					
ANR	5554610	InitializerList	"""bsr"""		5554563	9					
ANR	5554611	PrimaryExpression	"""bsr"""		5554563	0					
ANR	5554612	PrimaryExpression	"""A ()"""		5554563	1					
ANR	5554613	InitializerList	"""bsrf"""		5554563	10					
ANR	5554614	PrimaryExpression	"""bsrf"""		5554563	0					
ANR	5554615	PrimaryExpression	"""A ()"""		5554563	1					
ANR	5554616	InitializerList	"""bt"""		5554563	11					
ANR	5554617	PrimaryExpression	"""bt"""		5554563	0					
ANR	5554618	PrimaryExpression	"""if (t) goto A"""		5554563	1					
ANR	5554619	InitializerList	"""bt.s"""		5554563	12					
ANR	5554620	PrimaryExpression	"""bt.s"""		5554563	0					
ANR	5554621	PrimaryExpression	"""if (t) goto A"""		5554563	1					
ANR	5554622	InitializerList	"""clrmac"""		5554563	13					
ANR	5554623	PrimaryExpression	"""clrmac"""		5554563	0					
ANR	5554624	PrimaryExpression	"""_clrmac ()"""		5554563	1					
ANR	5554625	InitializerList	"""clrs"""		5554563	14					
ANR	5554626	PrimaryExpression	"""clrs"""		5554563	0					
ANR	5554627	PrimaryExpression	"""_clrs ()"""		5554563	1					
ANR	5554628	InitializerList	"""clrt"""		5554563	15					
ANR	5554629	PrimaryExpression	"""clrt"""		5554563	0					
ANR	5554630	PrimaryExpression	"""_clrt ()"""		5554563	1					
ANR	5554631	InitializerList	"""cmp/eq"""		5554563	16					
ANR	5554632	PrimaryExpression	"""cmp/eq"""		5554563	0					
ANR	5554633	PrimaryExpression	"""t = B == A ? 1 : 0"""		5554563	1					
ANR	5554634	InitializerList	"""cmp/ge"""		5554563	17					
ANR	5554635	PrimaryExpression	"""cmp/ge"""		5554563	0					
ANR	5554636	PrimaryExpression	"""t = B >= A ? 1 : 0"""		5554563	1					
ANR	5554637	InitializerList	"""cmp/gt"""		5554563	18					
ANR	5554638	PrimaryExpression	"""cmp/gt"""		5554563	0					
ANR	5554639	PrimaryExpression	"""t = B > A ? 1 : 0"""		5554563	1					
ANR	5554640	InitializerList	"""cmp/hi"""		5554563	19					
ANR	5554641	PrimaryExpression	"""cmp/hi"""		5554563	0					
ANR	5554642	PrimaryExpression	"""t = (unsigned) B > (unsigned) A ? 1 : 0"""		5554563	1					
ANR	5554643	InitializerList	"""cmp/hs"""		5554563	20					
ANR	5554644	PrimaryExpression	"""cmp/hs"""		5554563	0					
ANR	5554645	PrimaryExpression	"""t = (unsigned) B >= (unsigned) A ? 1 : 0"""		5554563	1					
ANR	5554646	InitializerList	"""cmp/pl"""		5554563	21					
ANR	5554647	PrimaryExpression	"""cmp/pl"""		5554563	0					
ANR	5554648	PrimaryExpression	"""t = A > 0 ? 1 : 0"""		5554563	1					
ANR	5554649	InitializerList	"""cmp/pz"""		5554563	22					
ANR	5554650	PrimaryExpression	"""cmp/pz"""		5554563	0					
ANR	5554651	PrimaryExpression	"""t = A >= 0 ? 1 : 0"""		5554563	1					
ANR	5554652	InitializerList	"""cmp/str"""		5554563	23					
ANR	5554653	PrimaryExpression	"""cmp/str"""		5554563	0					
ANR	5554654	PrimaryExpression	"""t = A ^ B ? 1 : 0"""		5554563	1					
ANR	5554655	InitializerList	"""div1"""		5554563	24					
ANR	5554656	PrimaryExpression	"""div1"""		5554563	0					
ANR	5554657	PrimaryExpression	"""B /= A"""		5554563	1					
ANR	5554658	InitializerList	"""dmuls.l"""		5554563	25					
ANR	5554659	PrimaryExpression	"""dmuls.l"""		5554563	0					
ANR	5554660	PrimaryExpression	"""mac = B * A"""		5554563	1					
ANR	5554661	InitializerList	"""dmulu.l"""		5554563	26					
ANR	5554662	PrimaryExpression	"""dmulu.l"""		5554563	0					
ANR	5554663	PrimaryExpression	"""mac = (unsigned) B * (unsigned) A"""		5554563	1					
ANR	5554664	InitializerList	"""dt"""		5554563	27					
ANR	5554665	PrimaryExpression	"""dt"""		5554563	0					
ANR	5554666	PrimaryExpression	"""A--; t = !A ? 1 : 0"""		5554563	1					
ANR	5554667	InitializerList	"""exts.b"""		5554563	28					
ANR	5554668	PrimaryExpression	"""exts.b"""		5554563	0					
ANR	5554669	PrimaryExpression	"""B = (int) A"""		5554563	1					
ANR	5554670	InitializerList	"""extu.b"""		5554563	29					
ANR	5554671	PrimaryExpression	"""extu.b"""		5554563	0					
ANR	5554672	PrimaryExpression	"""B = (unsigned int) A"""		5554563	1					
ANR	5554673	InitializerList	"""exts.w"""		5554563	30					
ANR	5554674	PrimaryExpression	"""exts.w"""		5554563	0					
ANR	5554675	PrimaryExpression	"""B = (int) A"""		5554563	1					
ANR	5554676	InitializerList	"""extu.w"""		5554563	31					
ANR	5554677	PrimaryExpression	"""extu.w"""		5554563	0					
ANR	5554678	PrimaryExpression	"""B = (unsigned int) A"""		5554563	1					
ANR	5554679	InitializerList	"""fabs"""		5554563	32					
ANR	5554680	PrimaryExpression	"""fabs"""		5554563	0					
ANR	5554681	PrimaryExpression	"""A = abs (A)"""		5554563	1					
ANR	5554682	InitializerList	"""fadd"""		5554563	33					
ANR	5554683	PrimaryExpression	"""fadd"""		5554563	0					
ANR	5554684	PrimaryExpression	"""B += A"""		5554563	1					
ANR	5554685	InitializerList	"""fcmp/eq"""		5554563	34					
ANR	5554686	PrimaryExpression	"""fcmp/eq"""		5554563	0					
ANR	5554687	PrimaryExpression	"""t = B == A ? 1 : 0"""		5554563	1					
ANR	5554688	InitializerList	"""fcmp/gt"""		5554563	35					
ANR	5554689	PrimaryExpression	"""fcmp/gt"""		5554563	0					
ANR	5554690	PrimaryExpression	"""t = B > A ? 1 : 0"""		5554563	1					
ANR	5554691	InitializerList	"""fcnvds"""		5554563	36					
ANR	5554692	PrimaryExpression	"""fcnvds"""		5554563	0					
ANR	5554693	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554694	InitializerList	"""fdiv"""		5554563	37					
ANR	5554695	PrimaryExpression	"""fdiv"""		5554563	0					
ANR	5554696	PrimaryExpression	"""B /= A"""		5554563	1					
ANR	5554697	InitializerList	"""flds"""		5554563	38					
ANR	5554698	PrimaryExpression	"""flds"""		5554563	0					
ANR	5554699	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554700	InitializerList	"""fldi0"""		5554563	39					
ANR	5554701	PrimaryExpression	"""fldi0"""		5554563	0					
ANR	5554702	PrimaryExpression	"""A = 0.0f"""		5554563	1					
ANR	5554703	InitializerList	"""fldi1"""		5554563	40					
ANR	5554704	PrimaryExpression	"""fldi1"""		5554563	0					
ANR	5554705	PrimaryExpression	"""A = 1.0f"""		5554563	1					
ANR	5554706	InitializerList	"""float"""		5554563	41					
ANR	5554707	PrimaryExpression	"""float"""		5554563	0					
ANR	5554708	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554709	InitializerList	"""fmac"""		5554563	42					
ANR	5554710	PrimaryExpression	"""fmac"""		5554563	0					
ANR	5554711	PrimaryExpression	"""C += A * B"""		5554563	1					
ANR	5554712	InitializerList	"""fmov"""		5554563	43					
ANR	5554713	PrimaryExpression	"""fmov"""		5554563	0					
ANR	5554714	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554715	InitializerList	"""fmov.s"""		5554563	44					
ANR	5554716	PrimaryExpression	"""fmov.s"""		5554563	0					
ANR	5554717	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554718	InitializerList	"""fmul"""		5554563	45					
ANR	5554719	PrimaryExpression	"""fmul"""		5554563	0					
ANR	5554720	PrimaryExpression	"""B *= A"""		5554563	1					
ANR	5554721	InitializerList	"""fneg"""		5554563	46					
ANR	5554722	PrimaryExpression	"""fneg"""		5554563	0					
ANR	5554723	PrimaryExpression	"""A = -A"""		5554563	1					
ANR	5554724	InitializerList	"""fsqrt"""		5554563	47					
ANR	5554725	PrimaryExpression	"""fsqrt"""		5554563	0					
ANR	5554726	PrimaryExpression	"""A = sqrt (A)"""		5554563	1					
ANR	5554727	InitializerList	"""fsts"""		5554563	48					
ANR	5554728	PrimaryExpression	"""fsts"""		5554563	0					
ANR	5554729	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554730	InitializerList	"""fsub"""		5554563	49					
ANR	5554731	PrimaryExpression	"""fsub"""		5554563	0					
ANR	5554732	PrimaryExpression	"""B -= A"""		5554563	1					
ANR	5554733	InitializerList	"""ftrc"""		5554563	50					
ANR	5554734	PrimaryExpression	"""ftrc"""		5554563	0					
ANR	5554735	PrimaryExpression	"""B = trunc (A)"""		5554563	1					
ANR	5554736	InitializerList	"""ftrv"""		5554563	51					
ANR	5554737	PrimaryExpression	"""ftrv"""		5554563	0					
ANR	5554738	PrimaryExpression	"""B *= A"""		5554563	1					
ANR	5554739	InitializerList	"""jmp"""		5554563	52					
ANR	5554740	PrimaryExpression	"""jmp"""		5554563	0					
ANR	5554741	PrimaryExpression	"""goto A"""		5554563	1					
ANR	5554742	InitializerList	"""jsr"""		5554563	53					
ANR	5554743	PrimaryExpression	"""jsr"""		5554563	0					
ANR	5554744	PrimaryExpression	"""A ()"""		5554563	1					
ANR	5554745	InitializerList	"""ldr"""		5554563	54					
ANR	5554746	PrimaryExpression	"""ldr"""		5554563	0					
ANR	5554747	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554748	InitializerList	"""ldr.l"""		5554563	55					
ANR	5554749	PrimaryExpression	"""ldr.l"""		5554563	0					
ANR	5554750	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554751	InitializerList	"""lds"""		5554563	56					
ANR	5554752	PrimaryExpression	"""lds"""		5554563	0					
ANR	5554753	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554754	InitializerList	"""lds.l"""		5554563	57					
ANR	5554755	PrimaryExpression	"""lds.l"""		5554563	0					
ANR	5554756	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554757	InitializerList	"""mov"""		5554563	58					
ANR	5554758	PrimaryExpression	"""mov"""		5554563	0					
ANR	5554759	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554760	InitializerList	"""mov.b"""		5554563	59					
ANR	5554761	PrimaryExpression	"""mov.b"""		5554563	0					
ANR	5554762	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554763	InitializerList	"""mov.l"""		5554563	60					
ANR	5554764	PrimaryExpression	"""mov.l"""		5554563	0					
ANR	5554765	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554766	InitializerList	"""mov.w"""		5554563	61					
ANR	5554767	PrimaryExpression	"""mov.w"""		5554563	0					
ANR	5554768	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554769	InitializerList	"""movca.l"""		5554563	62					
ANR	5554770	PrimaryExpression	"""movca.l"""		5554563	0					
ANR	5554771	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554772	InitializerList	"""movt"""		5554563	63					
ANR	5554773	PrimaryExpression	"""movt"""		5554563	0					
ANR	5554774	PrimaryExpression	"""A = t"""		5554563	1					
ANR	5554775	InitializerList	"""muls.w"""		5554563	64					
ANR	5554776	PrimaryExpression	"""muls.w"""		5554563	0					
ANR	5554777	PrimaryExpression	"""macl = A * B"""		5554563	1					
ANR	5554778	InitializerList	"""mulu.w"""		5554563	65					
ANR	5554779	PrimaryExpression	"""mulu.w"""		5554563	0					
ANR	5554780	PrimaryExpression	"""macl = (unsigned) A * (unsigned) B"""		5554563	1					
ANR	5554781	InitializerList	"""neg"""		5554563	66					
ANR	5554782	PrimaryExpression	"""neg"""		5554563	0					
ANR	5554783	PrimaryExpression	"""A = -A"""		5554563	1					
ANR	5554784	InitializerList	"""negc"""		5554563	67					
ANR	5554785	PrimaryExpression	"""negc"""		5554563	0					
ANR	5554786	PrimaryExpression	"""A = (-A) - t"""		5554563	1					
ANR	5554787	InitializerList	"""nop"""		5554563	68					
ANR	5554788	PrimaryExpression	"""nop"""		5554563	0					
ANR	5554789	PrimaryExpression	""""""		5554563	1					
ANR	5554790	InitializerList	"""not"""		5554563	69					
ANR	5554791	PrimaryExpression	"""not"""		5554563	0					
ANR	5554792	PrimaryExpression	"""A = !A"""		5554563	1					
ANR	5554793	InitializerList	"""or"""		5554563	70					
ANR	5554794	PrimaryExpression	"""or"""		5554563	0					
ANR	5554795	PrimaryExpression	"""B |= A"""		5554563	1					
ANR	5554796	InitializerList	"""rotcl"""		5554563	71					
ANR	5554797	PrimaryExpression	"""rotcl"""		5554563	0					
ANR	5554798	PrimaryExpression	"""t = A & 0x80000000 ? 0 : 1; A = (A << 1) | t"""		5554563	1					
ANR	5554799	InitializerList	"""rotl"""		5554563	72					
ANR	5554800	PrimaryExpression	"""rotl"""		5554563	0					
ANR	5554801	PrimaryExpression	"""A = (A << 1) | (A >> 31)"""		5554563	1					
ANR	5554802	InitializerList	"""rotr"""		5554563	73					
ANR	5554803	PrimaryExpression	"""rotr"""		5554563	0					
ANR	5554804	PrimaryExpression	"""A = (A << 31) | (A >> 1)"""		5554563	1					
ANR	5554805	InitializerList	"""rte"""		5554563	74					
ANR	5554806	PrimaryExpression	"""rte"""		5554563	0					
ANR	5554807	PrimaryExpression	"""_rte ()"""		5554563	1					
ANR	5554808	InitializerList	"""rts"""		5554563	75					
ANR	5554809	PrimaryExpression	"""rts"""		5554563	0					
ANR	5554810	PrimaryExpression	"""return"""		5554563	1					
ANR	5554811	InitializerList	"""sets"""		5554563	76					
ANR	5554812	PrimaryExpression	"""sets"""		5554563	0					
ANR	5554813	PrimaryExpression	"""s = 1"""		5554563	1					
ANR	5554814	InitializerList	"""sett"""		5554563	77					
ANR	5554815	PrimaryExpression	"""sett"""		5554563	0					
ANR	5554816	PrimaryExpression	"""t = 1"""		5554563	1					
ANR	5554817	InitializerList	"""shad"""		5554563	78					
ANR	5554818	PrimaryExpression	"""shad"""		5554563	0					
ANR	5554819	PrimaryExpression	"""B = A >= 0 ? B << A : B >> (31 - A)"""		5554563	1					
ANR	5554820	InitializerList	"""shal"""		5554563	79					
ANR	5554821	PrimaryExpression	"""shal"""		5554563	0					
ANR	5554822	PrimaryExpression	"""A <<= 1"""		5554563	1					
ANR	5554823	InitializerList	"""shar"""		5554563	80					
ANR	5554824	PrimaryExpression	"""shar"""		5554563	0					
ANR	5554825	PrimaryExpression	"""A >>= 1"""		5554563	1					
ANR	5554826	InitializerList	"""shld"""		5554563	81					
ANR	5554827	PrimaryExpression	"""shld"""		5554563	0					
ANR	5554828	PrimaryExpression	"""B = A >= 0 ? B << A : B >> (31 - A)"""		5554563	1					
ANR	5554829	InitializerList	"""shll"""		5554563	82					
ANR	5554830	PrimaryExpression	"""shll"""		5554563	0					
ANR	5554831	PrimaryExpression	"""A <<= 1"""		5554563	1					
ANR	5554832	InitializerList	"""shll2"""		5554563	83					
ANR	5554833	PrimaryExpression	"""shll2"""		5554563	0					
ANR	5554834	PrimaryExpression	"""A <<= 2"""		5554563	1					
ANR	5554835	InitializerList	"""shll8"""		5554563	84					
ANR	5554836	PrimaryExpression	"""shll8"""		5554563	0					
ANR	5554837	PrimaryExpression	"""A <<= 8"""		5554563	1					
ANR	5554838	InitializerList	"""shll16"""		5554563	85					
ANR	5554839	PrimaryExpression	"""shll16"""		5554563	0					
ANR	5554840	PrimaryExpression	"""A <<= 16"""		5554563	1					
ANR	5554841	InitializerList	"""shlr"""		5554563	86					
ANR	5554842	PrimaryExpression	"""shlr"""		5554563	0					
ANR	5554843	PrimaryExpression	"""A >>= 1"""		5554563	1					
ANR	5554844	InitializerList	"""shlr2"""		5554563	87					
ANR	5554845	PrimaryExpression	"""shlr2"""		5554563	0					
ANR	5554846	PrimaryExpression	"""A >>= 2"""		5554563	1					
ANR	5554847	InitializerList	"""shlr8"""		5554563	88					
ANR	5554848	PrimaryExpression	"""shlr8"""		5554563	0					
ANR	5554849	PrimaryExpression	"""A >>= 8"""		5554563	1					
ANR	5554850	InitializerList	"""shlr16"""		5554563	89					
ANR	5554851	PrimaryExpression	"""shlr16"""		5554563	0					
ANR	5554852	PrimaryExpression	"""A >>= 16"""		5554563	1					
ANR	5554853	InitializerList	"""sleep"""		5554563	90					
ANR	5554854	PrimaryExpression	"""sleep"""		5554563	0					
ANR	5554855	PrimaryExpression	"""_halt ()"""		5554563	1					
ANR	5554856	InitializerList	"""stc"""		5554563	91					
ANR	5554857	PrimaryExpression	"""stc"""		5554563	0					
ANR	5554858	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554859	InitializerList	"""stc.l"""		5554563	92					
ANR	5554860	PrimaryExpression	"""stc.l"""		5554563	0					
ANR	5554861	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554862	InitializerList	"""sts"""		5554563	93					
ANR	5554863	PrimaryExpression	"""sts"""		5554563	0					
ANR	5554864	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554865	InitializerList	"""sts.l"""		5554563	94					
ANR	5554866	PrimaryExpression	"""sts.l"""		5554563	0					
ANR	5554867	PrimaryExpression	"""B = A"""		5554563	1					
ANR	5554868	InitializerList	"""sub"""		5554563	95					
ANR	5554869	PrimaryExpression	"""sub"""		5554563	0					
ANR	5554870	PrimaryExpression	"""B -= A"""		5554563	1					
ANR	5554871	InitializerList	"""subc"""		5554563	96					
ANR	5554872	PrimaryExpression	"""subc"""		5554563	0					
ANR	5554873	PrimaryExpression	"""B -= A - t"""		5554563	1					
ANR	5554874	InitializerList	"""subv"""		5554563	97					
ANR	5554875	PrimaryExpression	"""subv"""		5554563	0					
ANR	5554876	PrimaryExpression	"""B -= A; t = int_underflow (B)"""		5554563	1					
ANR	5554877	InitializerList	"""swap.b"""		5554563	98					
ANR	5554878	PrimaryExpression	"""swap.b"""		5554563	0					
ANR	5554879	PrimaryExpression	"""swap_byte (B, A)"""		5554563	1					
ANR	5554880	InitializerList	"""swap.w"""		5554563	99					
ANR	5554881	PrimaryExpression	"""swap.w"""		5554563	0					
ANR	5554882	PrimaryExpression	"""swap_word (B, A)"""		5554563	1					
ANR	5554883	InitializerList	"""tas.b"""		5554563	100					
ANR	5554884	PrimaryExpression	"""tas.b"""		5554563	0					
ANR	5554885	PrimaryExpression	"""test_and_set (A)"""		5554563	1					
ANR	5554886	InitializerList	"""trapa"""		5554563	101					
ANR	5554887	PrimaryExpression	"""trapa"""		5554563	0					
ANR	5554888	PrimaryExpression	"""trap (A)"""		5554563	1					
ANR	5554889	InitializerList	"""tst"""		5554563	102					
ANR	5554890	PrimaryExpression	"""tst"""		5554563	0					
ANR	5554891	PrimaryExpression	"""t = B & A ? 0 : 1"""		5554563	1					
ANR	5554892	InitializerList	"""xor"""		5554563	103					
ANR	5554893	PrimaryExpression	"""xor"""		5554563	0					
ANR	5554894	PrimaryExpression	"""B ^= A"""		5554563	1					
ANR	5554895	InitializerList	"""xor.b"""		5554563	104					
ANR	5554896	PrimaryExpression	"""xor.b"""		5554563	0					
ANR	5554897	PrimaryExpression	"""B ^= A"""		5554563	1					
ANR	5554898	InitializerList	NULL		5554563	105					
ANR	5554899	Identifier	NULL		5554563	0					
ANR	5554900	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5554563	2					
ANR	5554901	ForInit	i = 0 ;	127:6:3653:3658	5554563	0	True				
ANR	5554902	AssignmentExpression	i = 0		5554563	0		=			
ANR	5554903	Identifier	i		5554563	0					
ANR	5554904	PrimaryExpression	0		5554563	1					
ANR	5554905	Condition	ops [ i ] . op != NULL	127:13:3660:3676	5554563	1	True				
ANR	5554906	EqualityExpression	ops [ i ] . op != NULL		5554563	0		!=			
ANR	5554907	MemberAccess	ops [ i ] . op		5554563	0					
ANR	5554908	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5554909	Identifier	ops		5554563	0					
ANR	5554910	Identifier	i		5554563	1					
ANR	5554911	Identifier	op		5554563	1					
ANR	5554912	Identifier	NULL		5554563	1					
ANR	5554913	PostIncDecOperationExpression	i ++	127:32:3679:3681	5554563	2	True				
ANR	5554914	Identifier	i		5554563	0					
ANR	5554915	IncDec	++		5554563	1					
ANR	5554916	CompoundStatement		115:37:3412:3412	5554563	3					
ANR	5554917	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5554563	0					
ANR	5554918	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	128:6:3692:3719	5554563	0	True				
ANR	5554919	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5554563	0					
ANR	5554920	UnaryOperator	!		5554563	0					
ANR	5554921	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5554563	1					
ANR	5554922	Callee	strcmp		5554563	0					
ANR	5554923	Identifier	strcmp		5554563	0					
ANR	5554924	ArgumentList	ops [ i ] . op		5554563	1					
ANR	5554925	Argument	ops [ i ] . op		5554563	0					
ANR	5554926	MemberAccess	ops [ i ] . op		5554563	0					
ANR	5554927	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5554928	Identifier	ops		5554563	0					
ANR	5554929	Identifier	i		5554563	1					
ANR	5554930	Identifier	op		5554563	1					
ANR	5554931	Argument	argv [ 0 ]		5554563	1					
ANR	5554932	ArrayIndexing	argv [ 0 ]		5554563	0					
ANR	5554933	Identifier	argv		5554563	0					
ANR	5554934	PrimaryExpression	0		5554563	1					
ANR	5554935	CompoundStatement		116:36:3450:3450	5554563	1					
ANR	5554936	IfStatement	if ( newstr != NULL )		5554563	0					
ANR	5554937	Condition	newstr != NULL	129:7:3731:3744	5554563	0	True				
ANR	5554938	EqualityExpression	newstr != NULL		5554563	0		!=			
ANR	5554939	Identifier	newstr		5554563	0					
ANR	5554940	Identifier	NULL		5554563	1					
ANR	5554941	CompoundStatement		117:23:3475:3475	5554563	1					
ANR	5554942	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5554563	0					
ANR	5554943	ForInit	j = k = 0 ;	130:9:3758:3767	5554563	0	True				
ANR	5554944	AssignmentExpression	j = k = 0		5554563	0		=			
ANR	5554945	Identifier	j		5554563	0					
ANR	5554946	AssignmentExpression	k = 0		5554563	1		=			
ANR	5554947	Identifier	k		5554563	0					
ANR	5554948	PrimaryExpression	0		5554563	1					
ANR	5554949	Condition	ops [ i ] . str [ j ] != '\\0'	130:20:3769:3789	5554563	1	True				
ANR	5554950	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5554563	0		!=			
ANR	5554951	ArrayIndexing	ops [ i ] . str [ j ]		5554563	0					
ANR	5554952	MemberAccess	ops [ i ] . str		5554563	0					
ANR	5554953	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5554954	Identifier	ops		5554563	0					
ANR	5554955	Identifier	i		5554563	1					
ANR	5554956	Identifier	str		5554563	1					
ANR	5554957	Identifier	j		5554563	1					
ANR	5554958	PrimaryExpression	'\\0'		5554563	1					
ANR	5554959	Expression	"j ++ , k ++"	130:43:3792:3799	5554563	2	True				
ANR	5554960	PostIncDecOperationExpression	j ++		5554563	0					
ANR	5554961	Identifier	j		5554563	0					
ANR	5554962	IncDec	++		5554563	1					
ANR	5554963	PostIncDecOperationExpression	k ++		5554563	1					
ANR	5554964	Identifier	k		5554563	0					
ANR	5554965	IncDec	++		5554563	1					
ANR	5554966	CompoundStatement		118:53:3530:3530	5554563	3					
ANR	5554967	IfStatement	if ( ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J' )		5554563	0					
ANR	5554968	Condition	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'	131:9:3813:3856	5554563	0	True				
ANR	5554969	AndExpression	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'		5554563	0		&&			
ANR	5554970	RelationalExpression	ops [ i ] . str [ j ] >= 'A'		5554563	0		>=			
ANR	5554971	ArrayIndexing	ops [ i ] . str [ j ]		5554563	0					
ANR	5554972	MemberAccess	ops [ i ] . str		5554563	0					
ANR	5554973	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5554974	Identifier	ops		5554563	0					
ANR	5554975	Identifier	i		5554563	1					
ANR	5554976	Identifier	str		5554563	1					
ANR	5554977	Identifier	j		5554563	1					
ANR	5554978	PrimaryExpression	'A'		5554563	1					
ANR	5554979	RelationalExpression	ops [ i ] . str [ j ] <= 'J'		5554563	1		<=			
ANR	5554980	ArrayIndexing	ops [ i ] . str [ j ]		5554563	0					
ANR	5554981	MemberAccess	ops [ i ] . str		5554563	0					
ANR	5554982	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5554983	Identifier	ops		5554563	0					
ANR	5554984	Identifier	i		5554563	1					
ANR	5554985	Identifier	str		5554563	1					
ANR	5554986	Identifier	j		5554563	1					
ANR	5554987	PrimaryExpression	'J'		5554563	1					
ANR	5554988	CompoundStatement		120:6:3595:3636	5554563	1					
ANR	5554989	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '@' ] ;	132:6:3867:3908	5554563	0	True				
ANR	5554990	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5554563	0					
ANR	5554991	IdentifierDeclType	const char *		5554563	0					
ANR	5554992	Identifier	w		5554563	1					
ANR	5554993	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5554563	2		=			
ANR	5554994	Identifier	w		5554563	0					
ANR	5554995	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '@' ]		5554563	1					
ANR	5554996	Identifier	argv		5554563	0					
ANR	5554997	AdditiveExpression	ops [ i ] . str [ j ] - '@'		5554563	1		-			
ANR	5554998	ArrayIndexing	ops [ i ] . str [ j ]		5554563	0					
ANR	5554999	MemberAccess	ops [ i ] . str		5554563	0					
ANR	5555000	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5555001	Identifier	ops		5554563	0					
ANR	5555002	Identifier	i		5554563	1					
ANR	5555003	Identifier	str		5554563	1					
ANR	5555004	Identifier	j		5554563	1					
ANR	5555005	PrimaryExpression	'@'		5554563	1					
ANR	5555006	IfStatement	if ( w != NULL )		5554563	1					
ANR	5555007	Condition	w != NULL	133:10:3920:3928	5554563	0	True				
ANR	5555008	EqualityExpression	w != NULL		5554563	0		!=			
ANR	5555009	Identifier	w		5554563	0					
ANR	5555010	Identifier	NULL		5554563	1					
ANR	5555011	CompoundStatement		121:21:3659:3659	5554563	1					
ANR	5555012	ExpressionStatement	"strcpy ( newstr + k , w )"	134:7:3940:3962	5554563	0	True				
ANR	5555013	CallExpression	"strcpy ( newstr + k , w )"		5554563	0					
ANR	5555014	Callee	strcpy		5554563	0					
ANR	5555015	Identifier	strcpy		5554563	0					
ANR	5555016	ArgumentList	newstr + k		5554563	1					
ANR	5555017	Argument	newstr + k		5554563	0					
ANR	5555018	AdditiveExpression	newstr + k		5554563	0		+			
ANR	5555019	Identifier	newstr		5554563	0					
ANR	5555020	Identifier	k		5554563	1					
ANR	5555021	Argument	w		5554563	1					
ANR	5555022	Identifier	w		5554563	0					
ANR	5555023	ExpressionStatement	k += strlen ( w ) - 1	135:7:3971:3989	5554563	1	True				
ANR	5555024	AssignmentExpression	k += strlen ( w ) - 1		5554563	0		+=			
ANR	5555025	Identifier	k		5554563	0					
ANR	5555026	AdditiveExpression	strlen ( w ) - 1		5554563	1		-			
ANR	5555027	CallExpression	strlen ( w )		5554563	0					
ANR	5555028	Callee	strlen		5554563	0					
ANR	5555029	Identifier	strlen		5554563	0					
ANR	5555030	ArgumentList	w		5554563	1					
ANR	5555031	Argument	w		5554563	0					
ANR	5555032	Identifier	w		5554563	0					
ANR	5555033	PrimaryExpression	1		5554563	1					
ANR	5555034	ElseStatement	else		5554563	0					
ANR	5555035	CompoundStatement		125:12:3739:3739	5554563	0					
ANR	5555036	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	138:6:4019:4044	5554563	0	True				
ANR	5555037	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5554563	0		=			
ANR	5555038	ArrayIndexing	newstr [ k ]		5554563	0					
ANR	5555039	Identifier	newstr		5554563	0					
ANR	5555040	Identifier	k		5554563	1					
ANR	5555041	ArrayIndexing	ops [ i ] . str [ j ]		5554563	1					
ANR	5555042	MemberAccess	ops [ i ] . str		5554563	0					
ANR	5555043	ArrayIndexing	ops [ i ]		5554563	0					
ANR	5555044	Identifier	ops		5554563	0					
ANR	5555045	Identifier	i		5554563	1					
ANR	5555046	Identifier	str		5554563	1					
ANR	5555047	Identifier	j		5554563	1					
ANR	5555048	ExpressionStatement	newstr [ k ] = '\\0'	141:4:4063:4079	5554563	1	True				
ANR	5555049	AssignmentExpression	newstr [ k ] = '\\0'		5554563	0		=			
ANR	5555050	ArrayIndexing	newstr [ k ]		5554563	0					
ANR	5555051	Identifier	newstr		5554563	0					
ANR	5555052	Identifier	k		5554563	1					
ANR	5555053	PrimaryExpression	'\\0'		5554563	1					
ANR	5555054	ReturnStatement	return true ;	143:3:4089:4100	5554563	1	True				
ANR	5555055	Identifier	true		5554563	0					
ANR	5555056	IfStatement	if ( newstr != NULL )		5554563	3					
ANR	5555057	Condition	newstr != NULL	148:5:4141:4154	5554563	0	True				
ANR	5555058	EqualityExpression	newstr != NULL		5554563	0		!=			
ANR	5555059	Identifier	newstr		5554563	0					
ANR	5555060	Identifier	NULL		5554563	1					
ANR	5555061	CompoundStatement		136:21:3885:3885	5554563	1					
ANR	5555062	ExpressionStatement	newstr [ 0 ] = '\\0'	149:2:4161:4177	5554563	0	True				
ANR	5555063	AssignmentExpression	newstr [ 0 ] = '\\0'		5554563	0		=			
ANR	5555064	ArrayIndexing	newstr [ 0 ]		5554563	0					
ANR	5555065	Identifier	newstr		5554563	0					
ANR	5555066	PrimaryExpression	0		5554563	1					
ANR	5555067	PrimaryExpression	'\\0'		5554563	1					
ANR	5555068	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5554563	1					
ANR	5555069	ForInit	i = 0 ;	150:7:4186:4191	5554563	0	True				
ANR	5555070	AssignmentExpression	i = 0		5554563	0		=			
ANR	5555071	Identifier	i		5554563	0					
ANR	5555072	PrimaryExpression	0		5554563	1					
ANR	5555073	Condition	i < argc	150:14:4193:4200	5554563	1	True				
ANR	5555074	RelationalExpression	i < argc		5554563	0		<			
ANR	5555075	Identifier	i		5554563	0					
ANR	5555076	Identifier	argc		5554563	1					
ANR	5555077	PostIncDecOperationExpression	i ++	150:24:4203:4205	5554563	2	True				
ANR	5555078	Identifier	i		5554563	0					
ANR	5555079	IncDec	++		5554563	1					
ANR	5555080	CompoundStatement		138:29:3936:3936	5554563	3					
ANR	5555081	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	151:3:4213:4237	5554563	0	True				
ANR	5555082	CallExpression	"strcat ( newstr , argv [ i ] )"		5554563	0					
ANR	5555083	Callee	strcat		5554563	0					
ANR	5555084	Identifier	strcat		5554563	0					
ANR	5555085	ArgumentList	newstr		5554563	1					
ANR	5555086	Argument	newstr		5554563	0					
ANR	5555087	Identifier	newstr		5554563	0					
ANR	5555088	Argument	argv [ i ]		5554563	1					
ANR	5555089	ArrayIndexing	argv [ i ]		5554563	0					
ANR	5555090	Identifier	argv		5554563	0					
ANR	5555091	Identifier	i		5554563	1					
ANR	5555092	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	152:3:4242:4295	5554563	1	True				
ANR	5555093	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5554563	0					
ANR	5555094	Callee	strcat		5554563	0					
ANR	5555095	Identifier	strcat		5554563	0					
ANR	5555096	ArgumentList	newstr		5554563	1					
ANR	5555097	Argument	newstr		5554563	0					
ANR	5555098	Identifier	newstr		5554563	0					
ANR	5555099	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5554563	1					
ANR	5555100	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5554563	0					
ANR	5555101	Condition	i == 0 || i == argc - 1		5554563	0					
ANR	5555102	OrExpression	i == 0 || i == argc - 1		5554563	0		||			
ANR	5555103	EqualityExpression	i == 0		5554563	0		==			
ANR	5555104	Identifier	i		5554563	0					
ANR	5555105	PrimaryExpression	0		5554563	1					
ANR	5555106	EqualityExpression	i == argc - 1		5554563	1		==			
ANR	5555107	Identifier	i		5554563	0					
ANR	5555108	AdditiveExpression	argc - 1		5554563	1		-			
ANR	5555109	Identifier	argc		5554563	0					
ANR	5555110	PrimaryExpression	1		5554563	1					
ANR	5555111	PrimaryExpression	""" """		5554563	1					
ANR	5555112	PrimaryExpression	""", """		5554563	2					
ANR	5555113	ReturnStatement	return false ;	156:1:4306:4318	5554563	4	True				
ANR	5555114	Identifier	false		5554563	0					
ANR	5555115	ReturnType	static int		5554563	1					
ANR	5555116	Identifier	replace		5554563	2					
ANR	5555117	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5554563	3					
ANR	5555118	Parameter	int argc	13:19:227:234	5554563	0	True				
ANR	5555119	ParameterType	int		5554563	0					
ANR	5555120	Identifier	argc		5554563	1					
ANR	5555121	Parameter	const char * argv [ ]	13:29:237:254	5554563	1	True				
ANR	5555122	ParameterType	const char * [ ]		5554563	0					
ANR	5555123	Identifier	argv		5554563	1					
ANR	5555124	Parameter	char * newstr	13:49:257:268	5554563	2	True				
ANR	5555125	ParameterType	char *		5554563	0					
ANR	5555126	Identifier	newstr		5554563	1					
ANR	5555127	CFGEntryNode	ENTRY		5554563		True				
ANR	5555128	CFGExitNode	EXIT		5554563		True				
ANR	5555129	Symbol	* ops [ i ] . str		5554563						
ANR	5555130	Symbol	* * ops		5554563						
ANR	5555131	Symbol	* argv		5554563						
ANR	5555132	Symbol	argv		5554563						
ANR	5555133	Symbol	ops [ i ] . str		5554563						
ANR	5555134	Symbol	strlen		5554563						
ANR	5555135	Symbol	ops [ i ] . op		5554563						
ANR	5555136	Symbol	* ops		5554563						
ANR	5555137	Symbol	argc		5554563						
ANR	5555138	Symbol	strcmp		5554563						
ANR	5555139	Symbol	* * j		5554563						
ANR	5555140	Symbol	* * i		5554563						
ANR	5555141	Symbol	NULL		5554563						
ANR	5555142	Symbol	* * ops [ i ] . str		5554563						
ANR	5555143	Symbol	false		5554563						
ANR	5555144	Symbol	i		5554563						
ANR	5555145	Symbol	j		5554563						
ANR	5555146	Symbol	k		5554563						
ANR	5555147	Symbol	newstr		5554563						
ANR	5555148	Symbol	* * * ops		5554563						
ANR	5555149	Symbol	ops		5554563						
ANR	5555150	Symbol	* i		5554563						
ANR	5555151	Symbol	* newstr		5554563						
ANR	5555152	Symbol	* j		5554563						
ANR	5555153	Symbol	* k		5554563						
ANR	5555154	Symbol	w		5554563						
ANR	5555155	Symbol	* * * i		5554563						
ANR	5555156	Symbol	true		5554563						
ANR	5555157	Function	parse	160:0:4339:6459							
ANR	5555158	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5555157	0					
ANR	5555159	CompoundStatement		160:57:4396:6459	5555157	0					
ANR	5555160	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	161:1:4399:4425	5555157	0	True				
ANR	5555161	IdentifierDecl	i		5555157	0					
ANR	5555162	IdentifierDeclType	int		5555157	0					
ANR	5555163	Identifier	i		5555157	1					
ANR	5555164	IdentifierDecl	len = strlen ( data )		5555157	1					
ANR	5555165	IdentifierDeclType	int		5555157	0					
ANR	5555166	Identifier	len		5555157	1					
ANR	5555167	AssignmentExpression	len = strlen ( data )		5555157	2		=			
ANR	5555168	Identifier	len		5555157	0					
ANR	5555169	CallExpression	strlen ( data )		5555157	1					
ANR	5555170	Callee	strlen		5555157	0					
ANR	5555171	Identifier	strlen		5555157	0					
ANR	5555172	ArgumentList	data		5555157	1					
ANR	5555173	Argument	data		5555157	0					
ANR	5555174	Identifier	data		5555157	0					
ANR	5555175	IdentifierDeclStatement	char w0 [ WSZ ] ;	162:1:4428:4440	5555157	1	True				
ANR	5555176	IdentifierDecl	w0 [ WSZ ]		5555157	0					
ANR	5555177	IdentifierDeclType	char [ WSZ ]		5555157	0					
ANR	5555178	Identifier	w0		5555157	1					
ANR	5555179	Identifier	WSZ		5555157	2					
ANR	5555180	IdentifierDeclStatement	char w1 [ WSZ ] ;	163:1:4443:4455	5555157	2	True				
ANR	5555181	IdentifierDecl	w1 [ WSZ ]		5555157	0					
ANR	5555182	IdentifierDeclType	char [ WSZ ]		5555157	0					
ANR	5555183	Identifier	w1		5555157	1					
ANR	5555184	Identifier	WSZ		5555157	2					
ANR	5555185	IdentifierDeclStatement	char w2 [ WSZ ] ;	164:1:4458:4470	5555157	3	True				
ANR	5555186	IdentifierDecl	w2 [ WSZ ]		5555157	0					
ANR	5555187	IdentifierDeclType	char [ WSZ ]		5555157	0					
ANR	5555188	Identifier	w2		5555157	1					
ANR	5555189	Identifier	WSZ		5555157	2					
ANR	5555190	IdentifierDeclStatement	char w3 [ WSZ ] ;	165:1:4473:4485	5555157	4	True				
ANR	5555191	IdentifierDecl	w3 [ WSZ ]		5555157	0					
ANR	5555192	IdentifierDeclType	char [ WSZ ]		5555157	0					
ANR	5555193	Identifier	w3		5555157	1					
ANR	5555194	Identifier	WSZ		5555157	2					
ANR	5555195	IdentifierDeclStatement	char w4 [ WSZ ] ;	166:1:4488:4500	5555157	5	True				
ANR	5555196	IdentifierDecl	w4 [ WSZ ]		5555157	0					
ANR	5555197	IdentifierDeclType	char [ WSZ ]		5555157	0					
ANR	5555198	Identifier	w4		5555157	1					
ANR	5555199	Identifier	WSZ		5555157	2					
ANR	5555200	IdentifierDeclStatement	"char * buf , * ptr , * optr , * par ;"	167:1:4503:4531	5555157	6	True				
ANR	5555201	IdentifierDecl	* buf		5555157	0					
ANR	5555202	IdentifierDeclType	char *		5555157	0					
ANR	5555203	Identifier	buf		5555157	1					
ANR	5555204	IdentifierDecl	* ptr		5555157	1					
ANR	5555205	IdentifierDeclType	char *		5555157	0					
ANR	5555206	Identifier	ptr		5555157	1					
ANR	5555207	IdentifierDecl	* optr		5555157	2					
ANR	5555208	IdentifierDeclType	char *		5555157	0					
ANR	5555209	Identifier	optr		5555157	1					
ANR	5555210	IdentifierDecl	* par		5555157	3					
ANR	5555211	IdentifierDeclType	char *		5555157	0					
ANR	5555212	Identifier	par		5555157	1					
ANR	5555213	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5555157	7					
ANR	5555214	Condition	! ( buf = malloc ( len + 1 ) )	170:5:4570:4594	5555157	0	True				
ANR	5555215	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5555157	0					
ANR	5555216	UnaryOperator	!		5555157	0					
ANR	5555217	AssignmentExpression	buf = malloc ( len + 1 )		5555157	1		=			
ANR	5555218	Identifier	buf		5555157	0					
ANR	5555219	CallExpression	malloc ( len + 1 )		5555157	1					
ANR	5555220	Callee	malloc		5555157	0					
ANR	5555221	Identifier	malloc		5555157	0					
ANR	5555222	ArgumentList	len + 1		5555157	1					
ANR	5555223	Argument	len + 1		5555157	0					
ANR	5555224	AdditiveExpression	len + 1		5555157	0		+			
ANR	5555225	Identifier	len		5555157	0					
ANR	5555226	PrimaryExpression	1		5555157	1					
ANR	5555227	CompoundStatement		11:32:200:200	5555157	1					
ANR	5555228	ReturnStatement	return false ;	171:2:4601:4613	5555157	0	True				
ANR	5555229	Identifier	false		5555157	0					
ANR	5555230	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	173:1:4619:4646	5555157	8	True				
ANR	5555231	CallExpression	"memcpy ( buf , data , len + 1 )"		5555157	0					
ANR	5555232	Callee	memcpy		5555157	0					
ANR	5555233	Identifier	memcpy		5555157	0					
ANR	5555234	ArgumentList	buf		5555157	1					
ANR	5555235	Argument	buf		5555157	0					
ANR	5555236	Identifier	buf		5555157	0					
ANR	5555237	Argument	data		5555157	1					
ANR	5555238	Identifier	data		5555157	0					
ANR	5555239	Argument	len + 1		5555157	2					
ANR	5555240	AdditiveExpression	len + 1		5555157	0		+			
ANR	5555241	Identifier	len		5555157	0					
ANR	5555242	PrimaryExpression	1		5555157	1					
ANR	5555243	ExpressionStatement	r_str_trim ( buf )	175:1:4650:4666	5555157	9	True				
ANR	5555244	CallExpression	r_str_trim ( buf )		5555157	0					
ANR	5555245	Callee	r_str_trim		5555157	0					
ANR	5555246	Identifier	r_str_trim		5555157	0					
ANR	5555247	ArgumentList	buf		5555157	1					
ANR	5555248	Argument	buf		5555157	0					
ANR	5555249	Identifier	buf		5555157	0					
ANR	5555250	IfStatement	if ( * buf )		5555157	10					
ANR	5555251	Condition	* buf	176:5:4673:4676	5555157	0	True				
ANR	5555252	UnaryOperationExpression	* buf		5555157	0					
ANR	5555253	UnaryOperator	*		5555157	0					
ANR	5555254	Identifier	buf		5555157	1					
ANR	5555255	CompoundStatement		17:11:282:282	5555157	1					
ANR	5555256	ExpressionStatement	w0 [ 0 ] = '\\0'	177:2:4683:4695	5555157	0	True				
ANR	5555257	AssignmentExpression	w0 [ 0 ] = '\\0'		5555157	0		=			
ANR	5555258	ArrayIndexing	w0 [ 0 ]		5555157	0					
ANR	5555259	Identifier	w0		5555157	0					
ANR	5555260	PrimaryExpression	0		5555157	1					
ANR	5555261	PrimaryExpression	'\\0'		5555157	1					
ANR	5555262	ExpressionStatement	w1 [ 0 ] = '\\0'	178:2:4699:4711	5555157	1	True				
ANR	5555263	AssignmentExpression	w1 [ 0 ] = '\\0'		5555157	0		=			
ANR	5555264	ArrayIndexing	w1 [ 0 ]		5555157	0					
ANR	5555265	Identifier	w1		5555157	0					
ANR	5555266	PrimaryExpression	0		5555157	1					
ANR	5555267	PrimaryExpression	'\\0'		5555157	1					
ANR	5555268	ExpressionStatement	w2 [ 0 ] = '\\0'	179:2:4715:4727	5555157	2	True				
ANR	5555269	AssignmentExpression	w2 [ 0 ] = '\\0'		5555157	0		=			
ANR	5555270	ArrayIndexing	w2 [ 0 ]		5555157	0					
ANR	5555271	Identifier	w2		5555157	0					
ANR	5555272	PrimaryExpression	0		5555157	1					
ANR	5555273	PrimaryExpression	'\\0'		5555157	1					
ANR	5555274	ExpressionStatement	w3 [ 0 ] = '\\0'	180:2:4731:4743	5555157	3	True				
ANR	5555275	AssignmentExpression	w3 [ 0 ] = '\\0'		5555157	0		=			
ANR	5555276	ArrayIndexing	w3 [ 0 ]		5555157	0					
ANR	5555277	Identifier	w3		5555157	0					
ANR	5555278	PrimaryExpression	0		5555157	1					
ANR	5555279	PrimaryExpression	'\\0'		5555157	1					
ANR	5555280	ExpressionStatement	w4 [ 0 ] = '\\0'	181:2:4747:4759	5555157	4	True				
ANR	5555281	AssignmentExpression	w4 [ 0 ] = '\\0'		5555157	0		=			
ANR	5555282	ArrayIndexing	w4 [ 0 ]		5555157	0					
ANR	5555283	Identifier	w4		5555157	0					
ANR	5555284	PrimaryExpression	0		5555157	1					
ANR	5555285	PrimaryExpression	'\\0'		5555157	1					
ANR	5555286	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	182:2:4763:4786	5555157	5	True				
ANR	5555287	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5555157	0		=			
ANR	5555288	Identifier	ptr		5555157	0					
ANR	5555289	CallExpression	"strchr ( buf , ' ' )"		5555157	1					
ANR	5555290	Callee	strchr		5555157	0					
ANR	5555291	Identifier	strchr		5555157	0					
ANR	5555292	ArgumentList	buf		5555157	1					
ANR	5555293	Argument	buf		5555157	0					
ANR	5555294	Identifier	buf		5555157	0					
ANR	5555295	Argument	' '		5555157	1					
ANR	5555296	PrimaryExpression	' '		5555157	0					
ANR	5555297	IfStatement	if ( ! ptr )		5555157	6					
ANR	5555298	Condition	! ptr	183:6:4794:4797	5555157	0	True				
ANR	5555299	UnaryOperationExpression	! ptr		5555157	0					
ANR	5555300	UnaryOperator	!		5555157	0					
ANR	5555301	Identifier	ptr		5555157	1					
ANR	5555302	CompoundStatement		24:12:403:403	5555157	1					
ANR	5555303	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	184:3:4805:4829	5555157	0	True				
ANR	5555304	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5555157	0		=			
ANR	5555305	Identifier	ptr		5555157	0					
ANR	5555306	CallExpression	"strchr ( buf , '\\t' )"		5555157	1					
ANR	5555307	Callee	strchr		5555157	0					
ANR	5555308	Identifier	strchr		5555157	0					
ANR	5555309	ArgumentList	buf		5555157	1					
ANR	5555310	Argument	buf		5555157	0					
ANR	5555311	Identifier	buf		5555157	0					
ANR	5555312	Argument	'\\t'		5555157	1					
ANR	5555313	PrimaryExpression	'\\t'		5555157	0					
ANR	5555314	IfStatement	if ( ptr )		5555157	7					
ANR	5555315	Condition	ptr	186:6:4841:4843	5555157	0	True				
ANR	5555316	Identifier	ptr		5555157	0					
ANR	5555317	CompoundStatement		27:11:449:449	5555157	1					
ANR	5555318	ExpressionStatement	* ptr = '\\0'	187:3:4851:4862	5555157	0	True				
ANR	5555319	AssignmentExpression	* ptr = '\\0'		5555157	0		=			
ANR	5555320	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555321	UnaryOperator	*		5555157	0					
ANR	5555322	Identifier	ptr		5555157	1					
ANR	5555323	PrimaryExpression	'\\0'		5555157	1					
ANR	5555324	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5555157	1					
ANR	5555325	ForInit	++ ptr ;	188:8:4872:4877	5555157	0	True				
ANR	5555326	UnaryExpression	++ ptr		5555157	0					
ANR	5555327	IncDec	++		5555157	0					
ANR	5555328	Identifier	ptr		5555157	1					
ANR	5555329	Condition	* ptr == ' '	188:15:4879:4889	5555157	1	True				
ANR	5555330	EqualityExpression	* ptr == ' '		5555157	0		==			
ANR	5555331	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555332	UnaryOperator	*		5555157	0					
ANR	5555333	Identifier	ptr		5555157	1					
ANR	5555334	PrimaryExpression	' '		5555157	1					
ANR	5555335	PostIncDecOperationExpression	ptr ++	188:28:4892:4896	5555157	2	True				
ANR	5555336	Identifier	ptr		5555157	0					
ANR	5555337	IncDec	++		5555157	1					
ANR	5555338	CompoundStatement		29:35:502:502	5555157	3					
ANR	5555339	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	191:3:4935:4961	5555157	2	True				
ANR	5555340	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5555157	0					
ANR	5555341	Callee	strncpy		5555157	0					
ANR	5555342	Identifier	strncpy		5555157	0					
ANR	5555343	ArgumentList	w0		5555157	1					
ANR	5555344	Argument	w0		5555157	0					
ANR	5555345	Identifier	w0		5555157	0					
ANR	5555346	Argument	buf		5555157	1					
ANR	5555347	Identifier	buf		5555157	0					
ANR	5555348	Argument	WSZ - 1		5555157	2					
ANR	5555349	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555350	Identifier	WSZ		5555157	0					
ANR	5555351	PrimaryExpression	1		5555157	1					
ANR	5555352	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	192:3:4966:4992	5555157	3	True				
ANR	5555353	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5555157	0					
ANR	5555354	Callee	strncpy		5555157	0					
ANR	5555355	Identifier	strncpy		5555157	0					
ANR	5555356	ArgumentList	w1		5555157	1					
ANR	5555357	Argument	w1		5555157	0					
ANR	5555358	Identifier	w1		5555157	0					
ANR	5555359	Argument	ptr		5555157	1					
ANR	5555360	Identifier	ptr		5555157	0					
ANR	5555361	Argument	WSZ - 1		5555157	2					
ANR	5555362	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555363	Identifier	WSZ		5555157	0					
ANR	5555364	PrimaryExpression	1		5555157	1					
ANR	5555365	ExpressionStatement	optr = ptr	194:3:4998:5008	5555157	4	True				
ANR	5555366	AssignmentExpression	optr = ptr		5555157	0		=			
ANR	5555367	Identifier	optr		5555157	0					
ANR	5555368	Identifier	ptr		5555157	1					
ANR	5555369	ExpressionStatement	"par = strchr ( ptr , '(' )"	195:3:5013:5036	5555157	5	True				
ANR	5555370	AssignmentExpression	"par = strchr ( ptr , '(' )"		5555157	0		=			
ANR	5555371	Identifier	par		5555157	0					
ANR	5555372	CallExpression	"strchr ( ptr , '(' )"		5555157	1					
ANR	5555373	Callee	strchr		5555157	0					
ANR	5555374	Identifier	strchr		5555157	0					
ANR	5555375	ArgumentList	ptr		5555157	1					
ANR	5555376	Argument	ptr		5555157	0					
ANR	5555377	Identifier	ptr		5555157	0					
ANR	5555378	Argument	'('		5555157	1					
ANR	5555379	PrimaryExpression	'('		5555157	0					
ANR	5555380	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5555157	6					
ANR	5555381	Condition	"par && strchr ( ptr , ',' ) > par"	196:7:5045:5074	5555157	0	True				
ANR	5555382	AndExpression	"par && strchr ( ptr , ',' ) > par"		5555157	0		&&			
ANR	5555383	Identifier	par		5555157	0					
ANR	5555384	RelationalExpression	"strchr ( ptr , ',' ) > par"		5555157	1		>			
ANR	5555385	CallExpression	"strchr ( ptr , ',' )"		5555157	0					
ANR	5555386	Callee	strchr		5555157	0					
ANR	5555387	Identifier	strchr		5555157	0					
ANR	5555388	ArgumentList	ptr		5555157	1					
ANR	5555389	Argument	ptr		5555157	0					
ANR	5555390	Identifier	ptr		5555157	0					
ANR	5555391	Argument	"','"		5555157	1					
ANR	5555392	PrimaryExpression	"','"		5555157	0					
ANR	5555393	Identifier	par		5555157	1					
ANR	5555394	CompoundStatement		37:39:680:680	5555157	1					
ANR	5555395	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	197:4:5083:5106	5555157	0	True				
ANR	5555396	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5555157	0		=			
ANR	5555397	Identifier	ptr		5555157	0					
ANR	5555398	CallExpression	"strchr ( ptr , ')' )"		5555157	1					
ANR	5555399	Callee	strchr		5555157	0					
ANR	5555400	Identifier	strchr		5555157	0					
ANR	5555401	ArgumentList	ptr		5555157	1					
ANR	5555402	Argument	ptr		5555157	0					
ANR	5555403	Identifier	ptr		5555157	0					
ANR	5555404	Argument	')'		5555157	1					
ANR	5555405	PrimaryExpression	')'		5555157	0					
ANR	5555406	IfStatement	if ( ptr )		5555157	1					
ANR	5555407	Condition	ptr	198:8:5116:5118	5555157	0	True				
ANR	5555408	Identifier	ptr		5555157	0					
ANR	5555409	CompoundStatement		39:13:724:724	5555157	1					
ANR	5555410	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	199:5:5128:5151	5555157	0	True				
ANR	5555411	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555412	Identifier	ptr		5555157	0					
ANR	5555413	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555414	Callee	strchr		5555157	0					
ANR	5555415	Identifier	strchr		5555157	0					
ANR	5555416	ArgumentList	ptr		5555157	1					
ANR	5555417	Argument	ptr		5555157	0					
ANR	5555418	Identifier	ptr		5555157	0					
ANR	5555419	Argument	"','"		5555157	1					
ANR	5555420	PrimaryExpression	"','"		5555157	0					
ANR	5555421	ElseStatement	else		5555157	0					
ANR	5555422	CompoundStatement		42:10:772:772	5555157	0					
ANR	5555423	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	202:4:5175:5198	5555157	0	True				
ANR	5555424	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555425	Identifier	ptr		5555157	0					
ANR	5555426	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555427	Callee	strchr		5555157	0					
ANR	5555428	Identifier	strchr		5555157	0					
ANR	5555429	ArgumentList	ptr		5555157	1					
ANR	5555430	Argument	ptr		5555157	0					
ANR	5555431	Identifier	ptr		5555157	0					
ANR	5555432	Argument	"','"		5555157	1					
ANR	5555433	PrimaryExpression	"','"		5555157	0					
ANR	5555434	IfStatement	if ( ptr )		5555157	7					
ANR	5555435	Condition	ptr	204:7:5212:5214	5555157	0	True				
ANR	5555436	Identifier	ptr		5555157	0					
ANR	5555437	CompoundStatement		45:12:820:820	5555157	1					
ANR	5555438	ExpressionStatement	* ptr = '\\0'	205:4:5223:5234	5555157	0	True				
ANR	5555439	AssignmentExpression	* ptr = '\\0'		5555157	0		=			
ANR	5555440	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555441	UnaryOperator	*		5555157	0					
ANR	5555442	Identifier	ptr		5555157	1					
ANR	5555443	PrimaryExpression	'\\0'		5555157	1					
ANR	5555444	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5555157	1					
ANR	5555445	ForInit	++ ptr ;	206:9:5245:5250	5555157	0	True				
ANR	5555446	UnaryExpression	++ ptr		5555157	0					
ANR	5555447	IncDec	++		5555157	0					
ANR	5555448	Identifier	ptr		5555157	1					
ANR	5555449	Condition	* ptr == ' '	206:16:5252:5262	5555157	1	True				
ANR	5555450	EqualityExpression	* ptr == ' '		5555157	0		==			
ANR	5555451	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555452	UnaryOperator	*		5555157	0					
ANR	5555453	Identifier	ptr		5555157	1					
ANR	5555454	PrimaryExpression	' '		5555157	1					
ANR	5555455	PostIncDecOperationExpression	ptr ++	206:29:5265:5269	5555157	2	True				
ANR	5555456	Identifier	ptr		5555157	0					
ANR	5555457	IncDec	++		5555157	1					
ANR	5555458	CompoundStatement		47:36:875:875	5555157	3					
ANR	5555459	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	209:4:5311:5338	5555157	2	True				
ANR	5555460	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5555157	0					
ANR	5555461	Callee	strncpy		5555157	0					
ANR	5555462	Identifier	strncpy		5555157	0					
ANR	5555463	ArgumentList	w1		5555157	1					
ANR	5555464	Argument	w1		5555157	0					
ANR	5555465	Identifier	w1		5555157	0					
ANR	5555466	Argument	optr		5555157	1					
ANR	5555467	Identifier	optr		5555157	0					
ANR	5555468	Argument	WSZ - 1		5555157	2					
ANR	5555469	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555470	Identifier	WSZ		5555157	0					
ANR	5555471	PrimaryExpression	1		5555157	1					
ANR	5555472	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	210:4:5344:5370	5555157	3	True				
ANR	5555473	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5555157	0					
ANR	5555474	Callee	strncpy		5555157	0					
ANR	5555475	Identifier	strncpy		5555157	0					
ANR	5555476	ArgumentList	w2		5555157	1					
ANR	5555477	Argument	w2		5555157	0					
ANR	5555478	Identifier	w2		5555157	0					
ANR	5555479	Argument	ptr		5555157	1					
ANR	5555480	Identifier	ptr		5555157	0					
ANR	5555481	Argument	WSZ - 1		5555157	2					
ANR	5555482	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555483	Identifier	WSZ		5555157	0					
ANR	5555484	PrimaryExpression	1		5555157	1					
ANR	5555485	ExpressionStatement	optr = ptr	211:4:5376:5386	5555157	4	True				
ANR	5555486	AssignmentExpression	optr = ptr		5555157	0		=			
ANR	5555487	Identifier	optr		5555157	0					
ANR	5555488	Identifier	ptr		5555157	1					
ANR	5555489	ExpressionStatement	"par = strchr ( ptr , '(' )"	212:4:5392:5415	5555157	5	True				
ANR	5555490	AssignmentExpression	"par = strchr ( ptr , '(' )"		5555157	0		=			
ANR	5555491	Identifier	par		5555157	0					
ANR	5555492	CallExpression	"strchr ( ptr , '(' )"		5555157	1					
ANR	5555493	Callee	strchr		5555157	0					
ANR	5555494	Identifier	strchr		5555157	0					
ANR	5555495	ArgumentList	ptr		5555157	1					
ANR	5555496	Argument	ptr		5555157	0					
ANR	5555497	Identifier	ptr		5555157	0					
ANR	5555498	Argument	'('		5555157	1					
ANR	5555499	PrimaryExpression	'('		5555157	0					
ANR	5555500	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5555157	6					
ANR	5555501	Condition	"par && strchr ( ptr , ',' ) > par"	213:8:5425:5454	5555157	0	True				
ANR	5555502	AndExpression	"par && strchr ( ptr , ',' ) > par"		5555157	0		&&			
ANR	5555503	Identifier	par		5555157	0					
ANR	5555504	RelationalExpression	"strchr ( ptr , ',' ) > par"		5555157	1		>			
ANR	5555505	CallExpression	"strchr ( ptr , ',' )"		5555157	0					
ANR	5555506	Callee	strchr		5555157	0					
ANR	5555507	Identifier	strchr		5555157	0					
ANR	5555508	ArgumentList	ptr		5555157	1					
ANR	5555509	Argument	ptr		5555157	0					
ANR	5555510	Identifier	ptr		5555157	0					
ANR	5555511	Argument	"','"		5555157	1					
ANR	5555512	PrimaryExpression	"','"		5555157	0					
ANR	5555513	Identifier	par		5555157	1					
ANR	5555514	CompoundStatement		54:40:1060:1060	5555157	1					
ANR	5555515	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	214:5:5464:5487	5555157	0	True				
ANR	5555516	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5555157	0		=			
ANR	5555517	Identifier	ptr		5555157	0					
ANR	5555518	CallExpression	"strchr ( ptr , ')' )"		5555157	1					
ANR	5555519	Callee	strchr		5555157	0					
ANR	5555520	Identifier	strchr		5555157	0					
ANR	5555521	ArgumentList	ptr		5555157	1					
ANR	5555522	Argument	ptr		5555157	0					
ANR	5555523	Identifier	ptr		5555157	0					
ANR	5555524	Argument	')'		5555157	1					
ANR	5555525	PrimaryExpression	')'		5555157	0					
ANR	5555526	IfStatement	if ( ptr )		5555157	1					
ANR	5555527	Condition	ptr	215:9:5498:5500	5555157	0	True				
ANR	5555528	Identifier	ptr		5555157	0					
ANR	5555529	CompoundStatement		56:14:1106:1106	5555157	1					
ANR	5555530	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	216:6:5511:5534	5555157	0	True				
ANR	5555531	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555532	Identifier	ptr		5555157	0					
ANR	5555533	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555534	Callee	strchr		5555157	0					
ANR	5555535	Identifier	strchr		5555157	0					
ANR	5555536	ArgumentList	ptr		5555157	1					
ANR	5555537	Argument	ptr		5555157	0					
ANR	5555538	Identifier	ptr		5555157	0					
ANR	5555539	Argument	"','"		5555157	1					
ANR	5555540	PrimaryExpression	"','"		5555157	0					
ANR	5555541	ElseStatement	else		5555157	0					
ANR	5555542	CompoundStatement		59:11:1157:1157	5555157	0					
ANR	5555543	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	219:5:5561:5584	5555157	0	True				
ANR	5555544	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555545	Identifier	ptr		5555157	0					
ANR	5555546	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555547	Callee	strchr		5555157	0					
ANR	5555548	Identifier	strchr		5555157	0					
ANR	5555549	ArgumentList	ptr		5555157	1					
ANR	5555550	Argument	ptr		5555157	0					
ANR	5555551	Identifier	ptr		5555157	0					
ANR	5555552	Argument	"','"		5555157	1					
ANR	5555553	PrimaryExpression	"','"		5555157	0					
ANR	5555554	IfStatement	if ( ptr )		5555157	7					
ANR	5555555	Condition	ptr	221:8:5600:5602	5555157	0	True				
ANR	5555556	Identifier	ptr		5555157	0					
ANR	5555557	CompoundStatement		62:13:1208:1208	5555157	1					
ANR	5555558	ExpressionStatement	* ptr = '\\0'	222:5:5612:5623	5555157	0	True				
ANR	5555559	AssignmentExpression	* ptr = '\\0'		5555157	0		=			
ANR	5555560	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555561	UnaryOperator	*		5555157	0					
ANR	5555562	Identifier	ptr		5555157	1					
ANR	5555563	PrimaryExpression	'\\0'		5555157	1					
ANR	5555564	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5555157	1					
ANR	5555565	ForInit	++ ptr ;	223:10:5635:5640	5555157	0	True				
ANR	5555566	UnaryExpression	++ ptr		5555157	0					
ANR	5555567	IncDec	++		5555157	0					
ANR	5555568	Identifier	ptr		5555157	1					
ANR	5555569	Condition	* ptr == ' '	223:17:5642:5652	5555157	1	True				
ANR	5555570	EqualityExpression	* ptr == ' '		5555157	0		==			
ANR	5555571	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555572	UnaryOperator	*		5555157	0					
ANR	5555573	Identifier	ptr		5555157	1					
ANR	5555574	PrimaryExpression	' '		5555157	1					
ANR	5555575	PostIncDecOperationExpression	ptr ++	223:30:5655:5659	5555157	2	True				
ANR	5555576	Identifier	ptr		5555157	0					
ANR	5555577	IncDec	++		5555157	1					
ANR	5555578	CompoundStatement		64:37:1265:1265	5555157	3					
ANR	5555579	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	226:5:5704:5731	5555157	2	True				
ANR	5555580	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5555157	0					
ANR	5555581	Callee	strncpy		5555157	0					
ANR	5555582	Identifier	strncpy		5555157	0					
ANR	5555583	ArgumentList	w2		5555157	1					
ANR	5555584	Argument	w2		5555157	0					
ANR	5555585	Identifier	w2		5555157	0					
ANR	5555586	Argument	optr		5555157	1					
ANR	5555587	Identifier	optr		5555157	0					
ANR	5555588	Argument	WSZ - 1		5555157	2					
ANR	5555589	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555590	Identifier	WSZ		5555157	0					
ANR	5555591	PrimaryExpression	1		5555157	1					
ANR	5555592	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	227:5:5738:5764	5555157	3	True				
ANR	5555593	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5555157	0					
ANR	5555594	Callee	strncpy		5555157	0					
ANR	5555595	Identifier	strncpy		5555157	0					
ANR	5555596	ArgumentList	w3		5555157	1					
ANR	5555597	Argument	w3		5555157	0					
ANR	5555598	Identifier	w3		5555157	0					
ANR	5555599	Argument	ptr		5555157	1					
ANR	5555600	Identifier	ptr		5555157	0					
ANR	5555601	Argument	WSZ - 1		5555157	2					
ANR	5555602	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555603	Identifier	WSZ		5555157	0					
ANR	5555604	PrimaryExpression	1		5555157	1					
ANR	5555605	ExpressionStatement	optr = ptr	228:5:5771:5781	5555157	4	True				
ANR	5555606	AssignmentExpression	optr = ptr		5555157	0		=			
ANR	5555607	Identifier	optr		5555157	0					
ANR	5555608	Identifier	ptr		5555157	1					
ANR	5555609	ExpressionStatement	"par = strchr ( ptr , '(' )"	230:5:5802:5825	5555157	5	True				
ANR	5555610	AssignmentExpression	"par = strchr ( ptr , '(' )"		5555157	0		=			
ANR	5555611	Identifier	par		5555157	0					
ANR	5555612	CallExpression	"strchr ( ptr , '(' )"		5555157	1					
ANR	5555613	Callee	strchr		5555157	0					
ANR	5555614	Identifier	strchr		5555157	0					
ANR	5555615	ArgumentList	ptr		5555157	1					
ANR	5555616	Argument	ptr		5555157	0					
ANR	5555617	Identifier	ptr		5555157	0					
ANR	5555618	Argument	'('		5555157	1					
ANR	5555619	PrimaryExpression	'('		5555157	0					
ANR	5555620	IfStatement	"if ( par && strchr ( ptr , ',' ) > par )"		5555157	6					
ANR	5555621	Condition	"par && strchr ( ptr , ',' ) > par"	231:9:5836:5865	5555157	0	True				
ANR	5555622	AndExpression	"par && strchr ( ptr , ',' ) > par"		5555157	0		&&			
ANR	5555623	Identifier	par		5555157	0					
ANR	5555624	RelationalExpression	"strchr ( ptr , ',' ) > par"		5555157	1		>			
ANR	5555625	CallExpression	"strchr ( ptr , ',' )"		5555157	0					
ANR	5555626	Callee	strchr		5555157	0					
ANR	5555627	Identifier	strchr		5555157	0					
ANR	5555628	ArgumentList	ptr		5555157	1					
ANR	5555629	Argument	ptr		5555157	0					
ANR	5555630	Identifier	ptr		5555157	0					
ANR	5555631	Argument	"','"		5555157	1					
ANR	5555632	PrimaryExpression	"','"		5555157	0					
ANR	5555633	Identifier	par		5555157	1					
ANR	5555634	CompoundStatement		72:41:1471:1471	5555157	1					
ANR	5555635	ExpressionStatement	"ptr = strchr ( ptr , ')' )"	232:6:5876:5899	5555157	0	True				
ANR	5555636	AssignmentExpression	"ptr = strchr ( ptr , ')' )"		5555157	0		=			
ANR	5555637	Identifier	ptr		5555157	0					
ANR	5555638	CallExpression	"strchr ( ptr , ')' )"		5555157	1					
ANR	5555639	Callee	strchr		5555157	0					
ANR	5555640	Identifier	strchr		5555157	0					
ANR	5555641	ArgumentList	ptr		5555157	1					
ANR	5555642	Argument	ptr		5555157	0					
ANR	5555643	Identifier	ptr		5555157	0					
ANR	5555644	Argument	')'		5555157	1					
ANR	5555645	PrimaryExpression	')'		5555157	0					
ANR	5555646	IfStatement	if ( ptr )		5555157	1					
ANR	5555647	Condition	ptr	233:10:5911:5913	5555157	0	True				
ANR	5555648	Identifier	ptr		5555157	0					
ANR	5555649	CompoundStatement		74:15:1519:1519	5555157	1					
ANR	5555650	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	234:7:5925:5948	5555157	0	True				
ANR	5555651	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555652	Identifier	ptr		5555157	0					
ANR	5555653	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555654	Callee	strchr		5555157	0					
ANR	5555655	Identifier	strchr		5555157	0					
ANR	5555656	ArgumentList	ptr		5555157	1					
ANR	5555657	Argument	ptr		5555157	0					
ANR	5555658	Identifier	ptr		5555157	0					
ANR	5555659	Argument	"','"		5555157	1					
ANR	5555660	PrimaryExpression	"','"		5555157	0					
ANR	5555661	ElseStatement	else		5555157	0					
ANR	5555662	CompoundStatement		77:12:1573:1573	5555157	0					
ANR	5555663	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	237:6:5978:6001	5555157	0	True				
ANR	5555664	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5555157	0		=			
ANR	5555665	Identifier	ptr		5555157	0					
ANR	5555666	CallExpression	"strchr ( ptr , ',' )"		5555157	1					
ANR	5555667	Callee	strchr		5555157	0					
ANR	5555668	Identifier	strchr		5555157	0					
ANR	5555669	ArgumentList	ptr		5555157	1					
ANR	5555670	Argument	ptr		5555157	0					
ANR	5555671	Identifier	ptr		5555157	0					
ANR	5555672	Argument	"','"		5555157	1					
ANR	5555673	PrimaryExpression	"','"		5555157	0					
ANR	5555674	IfStatement	if ( ptr )		5555157	7					
ANR	5555675	Condition	ptr	239:9:6019:6021	5555157	0	True				
ANR	5555676	Identifier	ptr		5555157	0					
ANR	5555677	CompoundStatement		80:14:1627:1627	5555157	1					
ANR	5555678	ExpressionStatement	* ptr = '\\0'	240:6:6032:6043	5555157	0	True				
ANR	5555679	AssignmentExpression	* ptr = '\\0'		5555157	0		=			
ANR	5555680	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555681	UnaryOperator	*		5555157	0					
ANR	5555682	Identifier	ptr		5555157	1					
ANR	5555683	PrimaryExpression	'\\0'		5555157	1					
ANR	5555684	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5555157	1					
ANR	5555685	ForInit	++ ptr ;	241:11:6056:6061	5555157	0	True				
ANR	5555686	UnaryExpression	++ ptr		5555157	0					
ANR	5555687	IncDec	++		5555157	0					
ANR	5555688	Identifier	ptr		5555157	1					
ANR	5555689	Condition	* ptr == ' '	241:18:6063:6073	5555157	1	True				
ANR	5555690	EqualityExpression	* ptr == ' '		5555157	0		==			
ANR	5555691	UnaryOperationExpression	* ptr		5555157	0					
ANR	5555692	UnaryOperator	*		5555157	0					
ANR	5555693	Identifier	ptr		5555157	1					
ANR	5555694	PrimaryExpression	' '		5555157	1					
ANR	5555695	PostIncDecOperationExpression	ptr ++	241:31:6076:6080	5555157	2	True				
ANR	5555696	Identifier	ptr		5555157	0					
ANR	5555697	IncDec	++		5555157	1					
ANR	5555698	CompoundStatement		82:38:1686:1686	5555157	3					
ANR	5555699	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	244:6:6128:6155	5555157	2	True				
ANR	5555700	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5555157	0					
ANR	5555701	Callee	strncpy		5555157	0					
ANR	5555702	Identifier	strncpy		5555157	0					
ANR	5555703	ArgumentList	w3		5555157	1					
ANR	5555704	Argument	w3		5555157	0					
ANR	5555705	Identifier	w3		5555157	0					
ANR	5555706	Argument	optr		5555157	1					
ANR	5555707	Identifier	optr		5555157	0					
ANR	5555708	Argument	WSZ - 1		5555157	2					
ANR	5555709	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555710	Identifier	WSZ		5555157	0					
ANR	5555711	PrimaryExpression	1		5555157	1					
ANR	5555712	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	245:6:6163:6189	5555157	3	True				
ANR	5555713	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5555157	0					
ANR	5555714	Callee	strncpy		5555157	0					
ANR	5555715	Identifier	strncpy		5555157	0					
ANR	5555716	ArgumentList	w4		5555157	1					
ANR	5555717	Argument	w4		5555157	0					
ANR	5555718	Identifier	w4		5555157	0					
ANR	5555719	Argument	ptr		5555157	1					
ANR	5555720	Identifier	ptr		5555157	0					
ANR	5555721	Argument	WSZ - 1		5555157	2					
ANR	5555722	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555723	Identifier	WSZ		5555157	0					
ANR	5555724	PrimaryExpression	1		5555157	1					
ANR	5555725	ElseStatement	else		5555157	0					
ANR	5555726	CompoundStatement		90:9:1821:1821	5555157	0					
ANR	5555727	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	250:3:6223:6249	5555157	0	True				
ANR	5555728	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5555157	0					
ANR	5555729	Callee	strncpy		5555157	0					
ANR	5555730	Identifier	strncpy		5555157	0					
ANR	5555731	ArgumentList	w0		5555157	1					
ANR	5555732	Argument	w0		5555157	0					
ANR	5555733	Identifier	w0		5555157	0					
ANR	5555734	Argument	buf		5555157	1					
ANR	5555735	Identifier	buf		5555157	0					
ANR	5555736	Argument	WSZ - 1		5555157	2					
ANR	5555737	AdditiveExpression	WSZ - 1		5555157	0		-			
ANR	5555738	Identifier	WSZ		5555157	0					
ANR	5555739	PrimaryExpression	1		5555157	1					
ANR	5555740	CompoundStatement		95:3:1911:1921	5555157	8					
ANR	5555741	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	253:3:6262:6303	5555157	0	True				
ANR	5555742	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5555157	0					
ANR	5555743	IdentifierDeclType	const char * [ ]		5555157	0					
ANR	5555744	Identifier	wa		5555157	1					
ANR	5555745	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5555157	2		=			
ANR	5555746	Identifier	wa		5555157	0					
ANR	5555747	InitializerList	w0		5555157	1					
ANR	5555748	Identifier	w0		5555157	0					
ANR	5555749	Identifier	w1		5555157	1					
ANR	5555750	Identifier	w2		5555157	2					
ANR	5555751	Identifier	w3		5555157	3					
ANR	5555752	Identifier	w4		5555157	4					
ANR	5555753	IdentifierDeclStatement	int nw = 0 ;	254:3:6308:6318	5555157	1	True				
ANR	5555754	IdentifierDecl	nw = 0		5555157	0					
ANR	5555755	IdentifierDeclType	int		5555157	0					
ANR	5555756	Identifier	nw		5555157	1					
ANR	5555757	AssignmentExpression	nw = 0		5555157	2		=			
ANR	5555758	Identifier	nw		5555157	0					
ANR	5555759	PrimaryExpression	0		5555157	1					
ANR	5555760	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5555157	2					
ANR	5555761	ForInit	i = 0 ;	255:8:6328:6333	5555157	0	True				
ANR	5555762	AssignmentExpression	i = 0		5555157	0		=			
ANR	5555763	Identifier	i		5555157	0					
ANR	5555764	PrimaryExpression	0		5555157	1					
ANR	5555765	Condition	i < 5	255:15:6335:6339	5555157	1	True				
ANR	5555766	RelationalExpression	i < 5		5555157	0		<			
ANR	5555767	Identifier	i		5555157	0					
ANR	5555768	PrimaryExpression	5		5555157	1					
ANR	5555769	PostIncDecOperationExpression	i ++	255:22:6342:6344	5555157	2	True				
ANR	5555770	Identifier	i		5555157	0					
ANR	5555771	IncDec	++		5555157	1					
ANR	5555772	CompoundStatement		96:27:1950:1950	5555157	3					
ANR	5555773	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5555157	0					
ANR	5555774	Condition	wa [ i ] [ 0 ] != '\\0'	256:8:6357:6372	5555157	0	True				
ANR	5555775	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5555157	0		!=			
ANR	5555776	ArrayIndexing	wa [ i ] [ 0 ]		5555157	0					
ANR	5555777	ArrayIndexing	wa [ i ]		5555157	0					
ANR	5555778	Identifier	wa		5555157	0					
ANR	5555779	Identifier	i		5555157	1					
ANR	5555780	PrimaryExpression	0		5555157	1					
ANR	5555781	PrimaryExpression	'\\0'		5555157	1					
ANR	5555782	CompoundStatement		97:26:1978:1978	5555157	1					
ANR	5555783	ExpressionStatement	nw ++	257:5:6382:6386	5555157	0	True				
ANR	5555784	PostIncDecOperationExpression	nw ++		5555157	0					
ANR	5555785	Identifier	nw		5555157	0					
ANR	5555786	IncDec	++		5555157	1					
ANR	5555787	ExpressionStatement	"replace ( nw , wa , str )"	260:3:6402:6423	5555157	3	True				
ANR	5555788	CallExpression	"replace ( nw , wa , str )"		5555157	0					
ANR	5555789	Callee	replace		5555157	0					
ANR	5555790	Identifier	replace		5555157	0					
ANR	5555791	ArgumentList	nw		5555157	1					
ANR	5555792	Argument	nw		5555157	0					
ANR	5555793	Identifier	nw		5555157	0					
ANR	5555794	Argument	wa		5555157	1					
ANR	5555795	Identifier	wa		5555157	0					
ANR	5555796	Argument	str		5555157	2					
ANR	5555797	Identifier	str		5555157	0					
ANR	5555798	ExpressionStatement	free ( buf )	263:1:6433:6443	5555157	11	True				
ANR	5555799	CallExpression	free ( buf )		5555157	0					
ANR	5555800	Callee	free		5555157	0					
ANR	5555801	Identifier	free		5555157	0					
ANR	5555802	ArgumentList	buf		5555157	1					
ANR	5555803	Argument	buf		5555157	0					
ANR	5555804	Identifier	buf		5555157	0					
ANR	5555805	ReturnStatement	return true ;	264:1:6446:6457	5555157	12	True				
ANR	5555806	Identifier	true		5555157	0					
ANR	5555807	ReturnType	static int		5555157	1					
ANR	5555808	Identifier	parse		5555157	2					
ANR	5555809	ParameterList	"RParse * p , const char * data , char * str"		5555157	3					
ANR	5555810	Parameter	RParse * p	160:17:4356:4364	5555157	0	True				
ANR	5555811	ParameterType	RParse *		5555157	0					
ANR	5555812	Identifier	p		5555157	1					
ANR	5555813	Parameter	const char * data	160:28:4367:4382	5555157	1	True				
ANR	5555814	ParameterType	const char *		5555157	0					
ANR	5555815	Identifier	data		5555157	1					
ANR	5555816	Parameter	char * str	160:46:4385:4393	5555157	2	True				
ANR	5555817	ParameterType	char *		5555157	0					
ANR	5555818	Identifier	str		5555157	1					
ANR	5555819	CFGEntryNode	ENTRY		5555157		True				
ANR	5555820	CFGExitNode	EXIT		5555157		True				
ANR	5555821	Symbol	* w4		5555157						
ANR	5555822	Symbol	* w3		5555157						
ANR	5555823	Symbol	* w2		5555157						
ANR	5555824	Symbol	* w1		5555157						
ANR	5555825	Symbol	data		5555157						
ANR	5555826	Symbol	strchr		5555157						
ANR	5555827	Symbol	nw		5555157						
ANR	5555828	Symbol	wa		5555157						
ANR	5555829	Symbol	strlen		5555157						
ANR	5555830	Symbol	* wa		5555157						
ANR	5555831	Symbol	len		5555157						
ANR	5555832	Symbol	* ptr		5555157						
ANR	5555833	Symbol	w0		5555157						
ANR	5555834	Symbol	w1		5555157						
ANR	5555835	Symbol	w2		5555157						
ANR	5555836	Symbol	w3		5555157						
ANR	5555837	Symbol	* w0		5555157						
ANR	5555838	Symbol	w4		5555157						
ANR	5555839	Symbol	par		5555157						
ANR	5555840	Symbol	malloc		5555157						
ANR	5555841	Symbol	* buf		5555157						
ANR	5555842	Symbol	* * i		5555157						
ANR	5555843	Symbol	false		5555157						
ANR	5555844	Symbol	i		5555157						
ANR	5555845	Symbol	optr		5555157						
ANR	5555846	Symbol	ptr		5555157						
ANR	5555847	Symbol	p		5555157						
ANR	5555848	Symbol	str		5555157						
ANR	5555849	Symbol	buf		5555157						
ANR	5555850	Symbol	* i		5555157						
ANR	5555851	Symbol	* * wa		5555157						
ANR	5555852	Symbol	true		5555157						
ANR	5555853	Symbol	WSZ		5555157						
ANR	5555854	DeclStmt									
ANR	5555855	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_sh_pseudo
ANR	5555856	DeclStmt									
ANR	5555857	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
