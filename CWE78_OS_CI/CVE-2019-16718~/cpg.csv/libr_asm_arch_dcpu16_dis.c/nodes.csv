command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2708790	File	data/converged/CVE-2019-16718~_radare2/libr_asm_arch_dcpu16_dis.c								
ANR	2708791	ClassDef	op_code	10:0:194:224							
ANR	2708792	DeclStmt									
ANR	2708793	Decl							ut8	ut8	opcode
ANR	2708794	ClassDef	op_basic	14:0:228:304							
ANR	2708795	DeclStmt									
ANR	2708796	Decl							ut8	ut8	opcode
ANR	2708797	DeclStmt									
ANR	2708798	Decl							ut8	ut8	a_type
ANR	2708799	DeclStmt									
ANR	2708800	Decl							ut8	ut8	b_type
ANR	2708801	DeclStmt									
ANR	2708802	Decl							ut16	ut16	a
ANR	2708803	DeclStmt									
ANR	2708804	Decl							ut16	ut16	b
ANR	2708805	ClassDef	op_nbasic	23:0:308:376							
ANR	2708806	DeclStmt									
ANR	2708807	Decl							ut8	ut8	__empty
ANR	2708808	DeclStmt									
ANR	2708809	Decl							ut8	ut8	a_type
ANR	2708810	DeclStmt									
ANR	2708811	Decl							ut8	ut8	opcode
ANR	2708812	DeclStmt									
ANR	2708813	Decl							ut16	ut16	a
ANR	2708814	ClassDef	<unnamed>	30:8:388:463							
ANR	2708815	DeclStmt									
ANR	2708816	Decl							struct op_code	struct op_code	code
ANR	2708817	DeclStmt									
ANR	2708818	Decl							struct op_basic	struct op_basic	b
ANR	2708819	DeclStmt									
ANR	2708820	Decl							struct op_nbasic	struct op_nbasic	n
ANR	2708821	DeclStmt									
ANR	2708822	Decl									op
ANR	2708823	DeclStmt									
ANR	2708824	Decl							const int	const int [ ]	opCycle
ANR	2708825	DeclStmt									
ANR	2708826	Decl							const int	const int [ ]	opCycleB
ANR	2708827	DeclStmt									
ANR	2708828	Decl							const char	const char * [ ]	opName
ANR	2708829	DeclStmt									
ANR	2708830	Decl							const char	const char * [ ]	opNameB
ANR	2708831	DeclStmt									
ANR	2708832	Decl							const char	const char * [ ]	regs
ANR	2708833	Function	needWord	55:0:907:1029							
ANR	2708834	FunctionDef	needWord (ut8 type)		2708833	0					
ANR	2708835	CompoundStatement		55:37:944:1029	2708833	0					
ANR	2708836	ReturnStatement	return ( ( type <= 0x17 ) && ( type > 0x0f ) ) || ( type == 0x1e ) || ( type == 0x1f ) ;	56:1:947:1027	2708833	0	True				
ANR	2708837	OrExpression	( ( type <= 0x17 ) && ( type > 0x0f ) ) || ( type == 0x1e ) || ( type == 0x1f )		2708833	0		||			
ANR	2708838	AndExpression	( type <= 0x17 ) && ( type > 0x0f )		2708833	0		&&			
ANR	2708839	RelationalExpression	type <= 0x17		2708833	0		<=			
ANR	2708840	Identifier	type		2708833	0					
ANR	2708841	PrimaryExpression	0x17		2708833	1					
ANR	2708842	RelationalExpression	type > 0x0f		2708833	1		>			
ANR	2708843	Identifier	type		2708833	0					
ANR	2708844	PrimaryExpression	0x0f		2708833	1					
ANR	2708845	OrExpression	( type == 0x1e ) || ( type == 0x1f )		2708833	1		||			
ANR	2708846	EqualityExpression	type == 0x1e		2708833	0		==			
ANR	2708847	Identifier	type		2708833	0					
ANR	2708848	PrimaryExpression	0x1e		2708833	1					
ANR	2708849	EqualityExpression	type == 0x1f		2708833	1		==			
ANR	2708850	Identifier	type		2708833	0					
ANR	2708851	PrimaryExpression	0x1f		2708833	1					
ANR	2708852	ReturnType	static inline int		2708833	1					
ANR	2708853	Identifier	needWord		2708833	2					
ANR	2708854	ParameterList	ut8 type		2708833	3					
ANR	2708855	Parameter	ut8 type	55:27:934:941	2708833	0	True				
ANR	2708856	ParameterType	ut8		2708833	0					
ANR	2708857	Identifier	type		2708833	1					
ANR	2708858	CFGEntryNode	ENTRY		2708833		True				
ANR	2708859	CFGExitNode	EXIT		2708833		True				
ANR	2708860	Symbol	type		2708833						
ANR	2708861	Function	valPrint	60:0:1032:1529							
ANR	2708862	FunctionDef	"valPrint (char * out , ut8 type , ut16 value)"		2708861	0					
ANR	2708863	CompoundStatement		60:53:1085:1529	2708861	0					
ANR	2708864	IfStatement	if ( type <= 0x07 )		2708861	0					
ANR	2708865	Condition	type <= 0x07	61:5:1092:1103	2708861	0	True				
ANR	2708866	RelationalExpression	type <= 0x07		2708861	0		<=			
ANR	2708867	Identifier	type		2708861	0					
ANR	2708868	PrimaryExpression	0x07		2708861	1					
ANR	2708869	ReturnStatement	"return sprintf ( out , ""%s"" , regs [ type ] ) ;"	61:19:1106:1143	2708861	1	True				
ANR	2708870	CallExpression	"sprintf ( out , ""%s"" , regs [ type ] )"		2708861	0					
ANR	2708871	Callee	sprintf		2708861	0					
ANR	2708872	Identifier	sprintf		2708861	0					
ANR	2708873	ArgumentList	out		2708861	1					
ANR	2708874	Argument	out		2708861	0					
ANR	2708875	Identifier	out		2708861	0					
ANR	2708876	Argument	"""%s"""		2708861	1					
ANR	2708877	PrimaryExpression	"""%s"""		2708861	0					
ANR	2708878	Argument	regs [ type ]		2708861	2					
ANR	2708879	ArrayIndexing	regs [ type ]		2708861	0					
ANR	2708880	Identifier	regs		2708861	0					
ANR	2708881	Identifier	type		2708861	1					
ANR	2708882	IfStatement	if ( type <= 0x0f )		2708861	1					
ANR	2708883	Condition	type <= 0x0f	62:5:1150:1161	2708861	0	True				
ANR	2708884	RelationalExpression	type <= 0x0f		2708861	0		<=			
ANR	2708885	Identifier	type		2708861	0					
ANR	2708886	PrimaryExpression	0x0f		2708861	1					
ANR	2708887	ReturnStatement	"return sprintf ( out , ""[%s]"" , regs [ type - 0x08 ] ) ;"	62:19:1164:1210	2708861	1	True				
ANR	2708888	CallExpression	"sprintf ( out , ""[%s]"" , regs [ type - 0x08 ] )"		2708861	0					
ANR	2708889	Callee	sprintf		2708861	0					
ANR	2708890	Identifier	sprintf		2708861	0					
ANR	2708891	ArgumentList	out		2708861	1					
ANR	2708892	Argument	out		2708861	0					
ANR	2708893	Identifier	out		2708861	0					
ANR	2708894	Argument	"""[%s]"""		2708861	1					
ANR	2708895	PrimaryExpression	"""[%s]"""		2708861	0					
ANR	2708896	Argument	regs [ type - 0x08 ]		2708861	2					
ANR	2708897	ArrayIndexing	regs [ type - 0x08 ]		2708861	0					
ANR	2708898	Identifier	regs		2708861	0					
ANR	2708899	AdditiveExpression	type - 0x08		2708861	1		-			
ANR	2708900	Identifier	type		2708861	0					
ANR	2708901	PrimaryExpression	0x08		2708861	1					
ANR	2708902	IfStatement	if ( type <= 0x17 )		2708861	2					
ANR	2708903	Condition	type <= 0x17	63:5:1217:1228	2708861	0	True				
ANR	2708904	RelationalExpression	type <= 0x17		2708861	0		<=			
ANR	2708905	Identifier	type		2708861	0					
ANR	2708906	PrimaryExpression	0x17		2708861	1					
ANR	2708907	ReturnStatement	"return sprintf ( out , ""[%s + %#hx]"" , regs [ type - 0x10 ] , value ) ;"	63:19:1231:1291	2708861	1	True				
ANR	2708908	CallExpression	"sprintf ( out , ""[%s + %#hx]"" , regs [ type - 0x10 ] , value )"		2708861	0					
ANR	2708909	Callee	sprintf		2708861	0					
ANR	2708910	Identifier	sprintf		2708861	0					
ANR	2708911	ArgumentList	out		2708861	1					
ANR	2708912	Argument	out		2708861	0					
ANR	2708913	Identifier	out		2708861	0					
ANR	2708914	Argument	"""[%s + %#hx]"""		2708861	1					
ANR	2708915	PrimaryExpression	"""[%s + %#hx]"""		2708861	0					
ANR	2708916	Argument	regs [ type - 0x10 ]		2708861	2					
ANR	2708917	ArrayIndexing	regs [ type - 0x10 ]		2708861	0					
ANR	2708918	Identifier	regs		2708861	0					
ANR	2708919	AdditiveExpression	type - 0x10		2708861	1		-			
ANR	2708920	Identifier	type		2708861	0					
ANR	2708921	PrimaryExpression	0x10		2708861	1					
ANR	2708922	Argument	value		2708861	3					
ANR	2708923	Identifier	value		2708861	0					
ANR	2708924	IfStatement	if ( type <= 0x1d )		2708861	3					
ANR	2708925	Condition	type <= 0x1d	64:5:1298:1309	2708861	0	True				
ANR	2708926	RelationalExpression	type <= 0x1d		2708861	0		<=			
ANR	2708927	Identifier	type		2708861	0					
ANR	2708928	PrimaryExpression	0x1d		2708861	1					
ANR	2708929	ReturnStatement	"return sprintf ( out , ""%s"" , regs [ type - 0x18 + 0x08 ] ) ;"	64:19:1312:1363	2708861	1	True				
ANR	2708930	CallExpression	"sprintf ( out , ""%s"" , regs [ type - 0x18 + 0x08 ] )"		2708861	0					
ANR	2708931	Callee	sprintf		2708861	0					
ANR	2708932	Identifier	sprintf		2708861	0					
ANR	2708933	ArgumentList	out		2708861	1					
ANR	2708934	Argument	out		2708861	0					
ANR	2708935	Identifier	out		2708861	0					
ANR	2708936	Argument	"""%s"""		2708861	1					
ANR	2708937	PrimaryExpression	"""%s"""		2708861	0					
ANR	2708938	Argument	regs [ type - 0x18 + 0x08 ]		2708861	2					
ANR	2708939	ArrayIndexing	regs [ type - 0x18 + 0x08 ]		2708861	0					
ANR	2708940	Identifier	regs		2708861	0					
ANR	2708941	AdditiveExpression	type - 0x18 + 0x08		2708861	1		-			
ANR	2708942	Identifier	type		2708861	0					
ANR	2708943	AdditiveExpression	0x18 + 0x08		2708861	1		+			
ANR	2708944	PrimaryExpression	0x18		2708861	0					
ANR	2708945	PrimaryExpression	0x08		2708861	1					
ANR	2708946	IfStatement	if ( type == 0x1e )		2708861	4					
ANR	2708947	Condition	type == 0x1e	65:5:1370:1381	2708861	0	True				
ANR	2708948	EqualityExpression	type == 0x1e		2708861	0		==			
ANR	2708949	Identifier	type		2708861	0					
ANR	2708950	PrimaryExpression	0x1e		2708861	1					
ANR	2708951	ReturnStatement	"return sprintf ( out , ""[%#hx]"" , value ) ;"	65:19:1384:1420	2708861	1	True				
ANR	2708952	CallExpression	"sprintf ( out , ""[%#hx]"" , value )"		2708861	0					
ANR	2708953	Callee	sprintf		2708861	0					
ANR	2708954	Identifier	sprintf		2708861	0					
ANR	2708955	ArgumentList	out		2708861	1					
ANR	2708956	Argument	out		2708861	0					
ANR	2708957	Identifier	out		2708861	0					
ANR	2708958	Argument	"""[%#hx]"""		2708861	1					
ANR	2708959	PrimaryExpression	"""[%#hx]"""		2708861	0					
ANR	2708960	Argument	value		2708861	2					
ANR	2708961	Identifier	value		2708861	0					
ANR	2708962	IfStatement	if ( type == 0x1f )		2708861	5					
ANR	2708963	Condition	type == 0x1f	66:5:1427:1438	2708861	0	True				
ANR	2708964	EqualityExpression	type == 0x1f		2708861	0		==			
ANR	2708965	Identifier	type		2708861	0					
ANR	2708966	PrimaryExpression	0x1f		2708861	1					
ANR	2708967	ReturnStatement	"return sprintf ( out , ""%#hx"" , value ) ;"	66:19:1441:1475	2708861	1	True				
ANR	2708968	CallExpression	"sprintf ( out , ""%#hx"" , value )"		2708861	0					
ANR	2708969	Callee	sprintf		2708861	0					
ANR	2708970	Identifier	sprintf		2708861	0					
ANR	2708971	ArgumentList	out		2708861	1					
ANR	2708972	Argument	out		2708861	0					
ANR	2708973	Identifier	out		2708861	0					
ANR	2708974	Argument	"""%#hx"""		2708861	1					
ANR	2708975	PrimaryExpression	"""%#hx"""		2708861	0					
ANR	2708976	Argument	value		2708861	2					
ANR	2708977	Identifier	value		2708861	0					
ANR	2708978	ReturnStatement	"return sprintf ( out , ""%#hx"" , ( short ) ( type - 0x20 ) ) ;"	67:1:1478:1527	2708861	6	True				
ANR	2708979	CallExpression	"sprintf ( out , ""%#hx"" , ( short ) ( type - 0x20 ) )"		2708861	0					
ANR	2708980	Callee	sprintf		2708861	0					
ANR	2708981	Identifier	sprintf		2708861	0					
ANR	2708982	ArgumentList	out		2708861	1					
ANR	2708983	Argument	out		2708861	0					
ANR	2708984	Identifier	out		2708861	0					
ANR	2708985	Argument	"""%#hx"""		2708861	1					
ANR	2708986	PrimaryExpression	"""%#hx"""		2708861	0					
ANR	2708987	Argument	( short ) ( type - 0x20 )		2708861	2					
ANR	2708988	CastExpression	( short ) ( type - 0x20 )		2708861	0					
ANR	2708989	CastTarget	short		2708861	0					
ANR	2708990	AdditiveExpression	type - 0x20		2708861	1		-			
ANR	2708991	Identifier	type		2708861	0					
ANR	2708992	PrimaryExpression	0x20		2708861	1					
ANR	2708993	ReturnType	static int		2708861	1					
ANR	2708994	Identifier	valPrint		2708861	2					
ANR	2708995	ParameterList	"char * out , ut8 type , ut16 value"		2708861	3					
ANR	2708996	Parameter	char * out	60:20:1052:1060	2708861	0	True				
ANR	2708997	ParameterType	char *		2708861	0					
ANR	2708998	Identifier	out		2708861	1					
ANR	2708999	Parameter	ut8 type	60:31:1063:1070	2708861	1	True				
ANR	2709000	ParameterType	ut8		2708861	0					
ANR	2709001	Identifier	type		2708861	1					
ANR	2709002	Parameter	ut16 value	60:41:1073:1082	2708861	2	True				
ANR	2709003	ParameterType	ut16		2708861	0					
ANR	2709004	Identifier	value		2708861	1					
ANR	2709005	CFGEntryNode	ENTRY		2708861		True				
ANR	2709006	CFGExitNode	EXIT		2708861		True				
ANR	2709007	Symbol	* type		2708861						
ANR	2709008	Symbol	* regs		2708861						
ANR	2709009	Symbol	regs		2708861						
ANR	2709010	Symbol	type		2708861						
ANR	2709011	Symbol	value		2708861						
ANR	2709012	Symbol	out		2708861						
ANR	2709013	Symbol	sprintf		2708861						
ANR	2709014	Function	instrPrint	70:0:1532:1962							
ANR	2709015	FunctionDef	"instrPrint (char * out , const op * o)"		2709014	0					
ANR	2709016	CompoundStatement		70:46:1578:1962	2709014	0					
ANR	2709017	IdentifierDeclStatement	"char arg [ 32 ] , arg2 [ 32 ] ;"	71:1:1581:1603	2709014	0	True				
ANR	2709018	IdentifierDecl	arg [ 32 ]		2709014	0					
ANR	2709019	IdentifierDeclType	char [ 32 ]		2709014	0					
ANR	2709020	Identifier	arg		2709014	1					
ANR	2709021	PrimaryExpression	32		2709014	2					
ANR	2709022	IdentifierDecl	arg2 [ 32 ]		2709014	1					
ANR	2709023	IdentifierDeclType	char [ 32 ]		2709014	0					
ANR	2709024	Identifier	arg2		2709014	1					
ANR	2709025	PrimaryExpression	32		2709014	2					
ANR	2709026	IfStatement	if ( o -> code . opcode == 0 )		2709014	1					
ANR	2709027	Condition	o -> code . opcode == 0	72:5:1610:1628	2709014	0	True				
ANR	2709028	EqualityExpression	o -> code . opcode == 0		2709014	0		==			
ANR	2709029	MemberAccess	o -> code . opcode		2709014	0					
ANR	2709030	PtrMemberAccess	o -> code		2709014	0					
ANR	2709031	Identifier	o		2709014	0					
ANR	2709032	Identifier	code		2709014	1					
ANR	2709033	Identifier	opcode		2709014	1					
ANR	2709034	PrimaryExpression	0		2709014	1					
ANR	2709035	CompoundStatement		3:26:52:52	2709014	1					
ANR	2709036	ExpressionStatement	"valPrint ( arg , o -> n . a_type , o -> n . a )"	73:2:1635:1670	2709014	0	True				
ANR	2709037	CallExpression	"valPrint ( arg , o -> n . a_type , o -> n . a )"		2709014	0					
ANR	2709038	Callee	valPrint		2709014	0					
ANR	2709039	Identifier	valPrint		2709014	0					
ANR	2709040	ArgumentList	arg		2709014	1					
ANR	2709041	Argument	arg		2709014	0					
ANR	2709042	Identifier	arg		2709014	0					
ANR	2709043	Argument	o -> n . a_type		2709014	1					
ANR	2709044	MemberAccess	o -> n . a_type		2709014	0					
ANR	2709045	PtrMemberAccess	o -> n		2709014	0					
ANR	2709046	Identifier	o		2709014	0					
ANR	2709047	Identifier	n		2709014	1					
ANR	2709048	Identifier	a_type		2709014	1					
ANR	2709049	Argument	o -> n . a		2709014	2					
ANR	2709050	MemberAccess	o -> n . a		2709014	0					
ANR	2709051	PtrMemberAccess	o -> n		2709014	0					
ANR	2709052	Identifier	o		2709014	0					
ANR	2709053	Identifier	n		2709014	1					
ANR	2709054	Identifier	a		2709014	1					
ANR	2709055	IfStatement	if ( o -> n . opcode > 1 )		2709014	1					
ANR	2709056	Condition	o -> n . opcode > 1	74:6:1678:1692	2709014	0	True				
ANR	2709057	RelationalExpression	o -> n . opcode > 1		2709014	0		>			
ANR	2709058	MemberAccess	o -> n . opcode		2709014	0					
ANR	2709059	PtrMemberAccess	o -> n		2709014	0					
ANR	2709060	Identifier	o		2709014	0					
ANR	2709061	Identifier	n		2709014	1					
ANR	2709062	Identifier	opcode		2709014	1					
ANR	2709063	PrimaryExpression	1		2709014	1					
ANR	2709064	CompoundStatement		5:23:116:116	2709014	1					
ANR	2709065	ExpressionStatement	"strcpy ( out , ""invalid"" )"	75:3:1700:1723	2709014	0	True				
ANR	2709066	CallExpression	"strcpy ( out , ""invalid"" )"		2709014	0					
ANR	2709067	Callee	strcpy		2709014	0					
ANR	2709068	Identifier	strcpy		2709014	0					
ANR	2709069	ArgumentList	out		2709014	1					
ANR	2709070	Argument	out		2709014	0					
ANR	2709071	Identifier	out		2709014	0					
ANR	2709072	Argument	"""invalid"""		2709014	1					
ANR	2709073	PrimaryExpression	"""invalid"""		2709014	0					
ANR	2709074	ReturnStatement	return strlen ( out ) ;	76:3:1728:1747	2709014	1	True				
ANR	2709075	CallExpression	strlen ( out )		2709014	0					
ANR	2709076	Callee	strlen		2709014	0					
ANR	2709077	Identifier	strlen		2709014	0					
ANR	2709078	ArgumentList	out		2709014	1					
ANR	2709079	Argument	out		2709014	0					
ANR	2709080	Identifier	out		2709014	0					
ANR	2709081	ReturnStatement	"return sprintf ( out , ""%s %s"" , opNameB [ o -> n . opcode ] , arg ) ;"	78:2:1755:1813	2709014	2	True				
ANR	2709082	CallExpression	"sprintf ( out , ""%s %s"" , opNameB [ o -> n . opcode ] , arg )"		2709014	0					
ANR	2709083	Callee	sprintf		2709014	0					
ANR	2709084	Identifier	sprintf		2709014	0					
ANR	2709085	ArgumentList	out		2709014	1					
ANR	2709086	Argument	out		2709014	0					
ANR	2709087	Identifier	out		2709014	0					
ANR	2709088	Argument	"""%s %s"""		2709014	1					
ANR	2709089	PrimaryExpression	"""%s %s"""		2709014	0					
ANR	2709090	Argument	opNameB [ o -> n . opcode ]		2709014	2					
ANR	2709091	ArrayIndexing	opNameB [ o -> n . opcode ]		2709014	0					
ANR	2709092	Identifier	opNameB		2709014	0					
ANR	2709093	MemberAccess	o -> n . opcode		2709014	1					
ANR	2709094	PtrMemberAccess	o -> n		2709014	0					
ANR	2709095	Identifier	o		2709014	0					
ANR	2709096	Identifier	n		2709014	1					
ANR	2709097	Identifier	opcode		2709014	1					
ANR	2709098	Argument	arg		2709014	3					
ANR	2709099	Identifier	arg		2709014	0					
ANR	2709100	ExpressionStatement	"valPrint ( arg , o -> b . a_type , o -> b . a )"	81:1:1819:1854	2709014	2	True				
ANR	2709101	CallExpression	"valPrint ( arg , o -> b . a_type , o -> b . a )"		2709014	0					
ANR	2709102	Callee	valPrint		2709014	0					
ANR	2709103	Identifier	valPrint		2709014	0					
ANR	2709104	ArgumentList	arg		2709014	1					
ANR	2709105	Argument	arg		2709014	0					
ANR	2709106	Identifier	arg		2709014	0					
ANR	2709107	Argument	o -> b . a_type		2709014	1					
ANR	2709108	MemberAccess	o -> b . a_type		2709014	0					
ANR	2709109	PtrMemberAccess	o -> b		2709014	0					
ANR	2709110	Identifier	o		2709014	0					
ANR	2709111	Identifier	b		2709014	1					
ANR	2709112	Identifier	a_type		2709014	1					
ANR	2709113	Argument	o -> b . a		2709014	2					
ANR	2709114	MemberAccess	o -> b . a		2709014	0					
ANR	2709115	PtrMemberAccess	o -> b		2709014	0					
ANR	2709116	Identifier	o		2709014	0					
ANR	2709117	Identifier	b		2709014	1					
ANR	2709118	Identifier	a		2709014	1					
ANR	2709119	ExpressionStatement	"valPrint ( arg2 , o -> b . b_type , o -> b . b )"	82:1:1857:1893	2709014	3	True				
ANR	2709120	CallExpression	"valPrint ( arg2 , o -> b . b_type , o -> b . b )"		2709014	0					
ANR	2709121	Callee	valPrint		2709014	0					
ANR	2709122	Identifier	valPrint		2709014	0					
ANR	2709123	ArgumentList	arg2		2709014	1					
ANR	2709124	Argument	arg2		2709014	0					
ANR	2709125	Identifier	arg2		2709014	0					
ANR	2709126	Argument	o -> b . b_type		2709014	1					
ANR	2709127	MemberAccess	o -> b . b_type		2709014	0					
ANR	2709128	PtrMemberAccess	o -> b		2709014	0					
ANR	2709129	Identifier	o		2709014	0					
ANR	2709130	Identifier	b		2709014	1					
ANR	2709131	Identifier	b_type		2709014	1					
ANR	2709132	Argument	o -> b . b		2709014	2					
ANR	2709133	MemberAccess	o -> b . b		2709014	0					
ANR	2709134	PtrMemberAccess	o -> b		2709014	0					
ANR	2709135	Identifier	o		2709014	0					
ANR	2709136	Identifier	b		2709014	1					
ANR	2709137	Identifier	b		2709014	1					
ANR	2709138	ReturnStatement	"return sprintf ( out , ""%s %s, %s"" , opName [ o -> b . opcode ] , arg , arg2 ) ;"	83:1:1896:1960	2709014	4	True				
ANR	2709139	CallExpression	"sprintf ( out , ""%s %s, %s"" , opName [ o -> b . opcode ] , arg , arg2 )"		2709014	0					
ANR	2709140	Callee	sprintf		2709014	0					
ANR	2709141	Identifier	sprintf		2709014	0					
ANR	2709142	ArgumentList	out		2709014	1					
ANR	2709143	Argument	out		2709014	0					
ANR	2709144	Identifier	out		2709014	0					
ANR	2709145	Argument	"""%s %s, %s"""		2709014	1					
ANR	2709146	PrimaryExpression	"""%s %s, %s"""		2709014	0					
ANR	2709147	Argument	opName [ o -> b . opcode ]		2709014	2					
ANR	2709148	ArrayIndexing	opName [ o -> b . opcode ]		2709014	0					
ANR	2709149	Identifier	opName		2709014	0					
ANR	2709150	MemberAccess	o -> b . opcode		2709014	1					
ANR	2709151	PtrMemberAccess	o -> b		2709014	0					
ANR	2709152	Identifier	o		2709014	0					
ANR	2709153	Identifier	b		2709014	1					
ANR	2709154	Identifier	opcode		2709014	1					
ANR	2709155	Argument	arg		2709014	3					
ANR	2709156	Identifier	arg		2709014	0					
ANR	2709157	Argument	arg2		2709014	4					
ANR	2709158	Identifier	arg2		2709014	0					
ANR	2709159	ReturnType	static int		2709014	1					
ANR	2709160	Identifier	instrPrint		2709014	2					
ANR	2709161	ParameterList	"char * out , const op * o"		2709014	3					
ANR	2709162	Parameter	char * out	70:22:1554:1562	2709014	0	True				
ANR	2709163	ParameterType	char *		2709014	0					
ANR	2709164	Identifier	out		2709014	1					
ANR	2709165	Parameter	const op * o	70:33:1565:1575	2709014	1	True				
ANR	2709166	ParameterType	const op *		2709014	0					
ANR	2709167	Identifier	o		2709014	1					
ANR	2709168	CFGEntryNode	ENTRY		2709014		True				
ANR	2709169	CFGExitNode	EXIT		2709014		True				
ANR	2709170	Symbol	* o -> b		2709014						
ANR	2709171	Symbol	o -> code		2709014						
ANR	2709172	Symbol	o -> b . a_type		2709014						
ANR	2709173	Symbol	o -> b		2709014						
ANR	2709174	Symbol	o -> n . a_type		2709014						
ANR	2709175	Symbol	* opNameB		2709014						
ANR	2709176	Symbol	o -> n . opcode		2709014						
ANR	2709177	Symbol	out		2709014						
ANR	2709178	Symbol	sprintf		2709014						
ANR	2709179	Symbol	o -> b . b_type		2709014						
ANR	2709180	Symbol	strlen		2709014						
ANR	2709181	Symbol	o -> n		2709014						
ANR	2709182	Symbol	arg		2709014						
ANR	2709183	Symbol	o -> b . b		2709014						
ANR	2709184	Symbol	* * o		2709014						
ANR	2709185	Symbol	opNameB		2709014						
ANR	2709186	Symbol	o -> b . a		2709014						
ANR	2709187	Symbol	* o -> b . opcode		2709014						
ANR	2709188	Symbol	o -> n . a		2709014						
ANR	2709189	Symbol	* o -> n . opcode		2709014						
ANR	2709190	Symbol	o		2709014						
ANR	2709191	Symbol	o -> b . opcode		2709014						
ANR	2709192	Symbol	arg2		2709014						
ANR	2709193	Symbol	* opName		2709014						
ANR	2709194	Symbol	opName		2709014						
ANR	2709195	Symbol	o -> code . opcode		2709014						
ANR	2709196	Symbol	* o		2709014						
ANR	2709197	Symbol	* o -> n		2709014						
ANR	2709198	Function	instrGet	86:0:1965:2537							
ANR	2709199	FunctionDef	"instrGet (ut16 in , op * o , ut16 a , ut16 b)"		2709198	0					
ANR	2709200	CompoundStatement		86:52:2017:2537	2709198	0					
ANR	2709201	IdentifierDeclStatement	int ret = 1 ;	87:1:2020:2031	2709198	0	True				
ANR	2709202	IdentifierDecl	ret = 1		2709198	0					
ANR	2709203	IdentifierDeclType	int		2709198	0					
ANR	2709204	Identifier	ret		2709198	1					
ANR	2709205	AssignmentExpression	ret = 1		2709198	2		=			
ANR	2709206	Identifier	ret		2709198	0					
ANR	2709207	PrimaryExpression	1		2709198	1					
ANR	2709208	ExpressionStatement	o -> code . opcode = in & 0xF	88:1:2034:2059	2709198	1	True				
ANR	2709209	AssignmentExpression	o -> code . opcode = in & 0xF		2709198	0		=			
ANR	2709210	MemberAccess	o -> code . opcode		2709198	0					
ANR	2709211	PtrMemberAccess	o -> code		2709198	0					
ANR	2709212	Identifier	o		2709198	0					
ANR	2709213	Identifier	code		2709198	1					
ANR	2709214	Identifier	opcode		2709198	1					
ANR	2709215	BitAndExpression	in & 0xF		2709198	1		&			
ANR	2709216	Identifier	in		2709198	0					
ANR	2709217	PrimaryExpression	0xF		2709198	1					
ANR	2709218	IfStatement	if ( ! ( o -> code . opcode = in & 0xF ) )		2709198	2					
ANR	2709219	Condition	! ( o -> code . opcode = in & 0xF )	89:5:2066:2093	2709198	0	True				
ANR	2709220	UnaryOperationExpression	! ( o -> code . opcode = in & 0xF )		2709198	0					
ANR	2709221	UnaryOperator	!		2709198	0					
ANR	2709222	AssignmentExpression	o -> code . opcode = in & 0xF		2709198	1		=			
ANR	2709223	MemberAccess	o -> code . opcode		2709198	0					
ANR	2709224	PtrMemberAccess	o -> code		2709198	0					
ANR	2709225	Identifier	o		2709198	0					
ANR	2709226	Identifier	code		2709198	1					
ANR	2709227	Identifier	opcode		2709198	1					
ANR	2709228	BitAndExpression	in & 0xF		2709198	1		&			
ANR	2709229	Identifier	in		2709198	0					
ANR	2709230	PrimaryExpression	0xF		2709198	1					
ANR	2709231	CompoundStatement		4:35:78:78	2709198	1					
ANR	2709232	ExpressionStatement	o -> n . opcode = ( in >> 4 ) & 0x3F	91:2:2126:2156	2709198	0	True				
ANR	2709233	AssignmentExpression	o -> n . opcode = ( in >> 4 ) & 0x3F		2709198	0		=			
ANR	2709234	MemberAccess	o -> n . opcode		2709198	0					
ANR	2709235	PtrMemberAccess	o -> n		2709198	0					
ANR	2709236	Identifier	o		2709198	0					
ANR	2709237	Identifier	n		2709198	1					
ANR	2709238	Identifier	opcode		2709198	1					
ANR	2709239	BitAndExpression	( in >> 4 ) & 0x3F		2709198	1		&			
ANR	2709240	ShiftExpression	in >> 4		2709198	0		>>			
ANR	2709241	Identifier	in		2709198	0					
ANR	2709242	PrimaryExpression	4		2709198	1					
ANR	2709243	PrimaryExpression	0x3F		2709198	1					
ANR	2709244	ExpressionStatement	o -> n . a_type = ( in >> 10 ) & 0x3F	92:2:2160:2191	2709198	1	True				
ANR	2709245	AssignmentExpression	o -> n . a_type = ( in >> 10 ) & 0x3F		2709198	0		=			
ANR	2709246	MemberAccess	o -> n . a_type		2709198	0					
ANR	2709247	PtrMemberAccess	o -> n		2709198	0					
ANR	2709248	Identifier	o		2709198	0					
ANR	2709249	Identifier	n		2709198	1					
ANR	2709250	Identifier	a_type		2709198	1					
ANR	2709251	BitAndExpression	( in >> 10 ) & 0x3F		2709198	1		&			
ANR	2709252	ShiftExpression	in >> 10		2709198	0		>>			
ANR	2709253	Identifier	in		2709198	0					
ANR	2709254	PrimaryExpression	10		2709198	1					
ANR	2709255	PrimaryExpression	0x3F		2709198	1					
ANR	2709256	IfStatement	if ( needWord ( o -> n . a_type ) )		2709198	2					
ANR	2709257	Condition	needWord ( o -> n . a_type )	94:6:2200:2220	2709198	0	True				
ANR	2709258	CallExpression	needWord ( o -> n . a_type )		2709198	0					
ANR	2709259	Callee	needWord		2709198	0					
ANR	2709260	Identifier	needWord		2709198	0					
ANR	2709261	ArgumentList	o -> n . a_type		2709198	1					
ANR	2709262	Argument	o -> n . a_type		2709198	0					
ANR	2709263	MemberAccess	o -> n . a_type		2709198	0					
ANR	2709264	PtrMemberAccess	o -> n		2709198	0					
ANR	2709265	Identifier	o		2709198	0					
ANR	2709266	Identifier	n		2709198	1					
ANR	2709267	Identifier	a_type		2709198	1					
ANR	2709268	CompoundStatement		9:29:205:205	2709198	1					
ANR	2709269	ExpressionStatement	o -> n . a = a	95:3:2228:2238	2709198	0	True				
ANR	2709270	AssignmentExpression	o -> n . a = a		2709198	0		=			
ANR	2709271	MemberAccess	o -> n . a		2709198	0					
ANR	2709272	PtrMemberAccess	o -> n		2709198	0					
ANR	2709273	Identifier	o		2709198	0					
ANR	2709274	Identifier	n		2709198	1					
ANR	2709275	Identifier	a		2709198	1					
ANR	2709276	Identifier	a		2709198	1					
ANR	2709277	ExpressionStatement	ret ++	96:3:2243:2248	2709198	1	True				
ANR	2709278	PostIncDecOperationExpression	ret ++		2709198	0					
ANR	2709279	Identifier	ret		2709198	0					
ANR	2709280	IncDec	++		2709198	1					
ANR	2709281	ElseStatement	else		2709198	0					
ANR	2709282	CompoundStatement		13:8:244:244	2709198	0					
ANR	2709283	ExpressionStatement	o -> b . a_type = ( in >> 4 ) & 0x3F	99:2:2266:2296	2709198	0	True				
ANR	2709284	AssignmentExpression	o -> b . a_type = ( in >> 4 ) & 0x3F		2709198	0		=			
ANR	2709285	MemberAccess	o -> b . a_type		2709198	0					
ANR	2709286	PtrMemberAccess	o -> b		2709198	0					
ANR	2709287	Identifier	o		2709198	0					
ANR	2709288	Identifier	b		2709198	1					
ANR	2709289	Identifier	a_type		2709198	1					
ANR	2709290	BitAndExpression	( in >> 4 ) & 0x3F		2709198	1		&			
ANR	2709291	ShiftExpression	in >> 4		2709198	0		>>			
ANR	2709292	Identifier	in		2709198	0					
ANR	2709293	PrimaryExpression	4		2709198	1					
ANR	2709294	PrimaryExpression	0x3F		2709198	1					
ANR	2709295	ExpressionStatement	o -> b . b_type = ( in >> 10 ) & 0x3F	100:2:2300:2331	2709198	1	True				
ANR	2709296	AssignmentExpression	o -> b . b_type = ( in >> 10 ) & 0x3F		2709198	0		=			
ANR	2709297	MemberAccess	o -> b . b_type		2709198	0					
ANR	2709298	PtrMemberAccess	o -> b		2709198	0					
ANR	2709299	Identifier	o		2709198	0					
ANR	2709300	Identifier	b		2709198	1					
ANR	2709301	Identifier	b_type		2709198	1					
ANR	2709302	BitAndExpression	( in >> 10 ) & 0x3F		2709198	1		&			
ANR	2709303	ShiftExpression	in >> 10		2709198	0		>>			
ANR	2709304	Identifier	in		2709198	0					
ANR	2709305	PrimaryExpression	10		2709198	1					
ANR	2709306	PrimaryExpression	0x3F		2709198	1					
ANR	2709307	IfStatement	if ( needWord ( o -> b . a_type ) )		2709198	2					
ANR	2709308	Condition	needWord ( o -> b . a_type )	101:6:2339:2359	2709198	0	True				
ANR	2709309	CallExpression	needWord ( o -> b . a_type )		2709198	0					
ANR	2709310	Callee	needWord		2709198	0					
ANR	2709311	Identifier	needWord		2709198	0					
ANR	2709312	ArgumentList	o -> b . a_type		2709198	1					
ANR	2709313	Argument	o -> b . a_type		2709198	0					
ANR	2709314	MemberAccess	o -> b . a_type		2709198	0					
ANR	2709315	PtrMemberAccess	o -> b		2709198	0					
ANR	2709316	Identifier	o		2709198	0					
ANR	2709317	Identifier	b		2709198	1					
ANR	2709318	Identifier	a_type		2709198	1					
ANR	2709319	CompoundStatement		16:29:344:344	2709198	1					
ANR	2709320	ExpressionStatement	o -> b . a = a	102:3:2367:2377	2709198	0	True				
ANR	2709321	AssignmentExpression	o -> b . a = a		2709198	0		=			
ANR	2709322	MemberAccess	o -> b . a		2709198	0					
ANR	2709323	PtrMemberAccess	o -> b		2709198	0					
ANR	2709324	Identifier	o		2709198	0					
ANR	2709325	Identifier	b		2709198	1					
ANR	2709326	Identifier	a		2709198	1					
ANR	2709327	Identifier	a		2709198	1					
ANR	2709328	ExpressionStatement	ret ++	103:3:2382:2387	2709198	1	True				
ANR	2709329	PostIncDecOperationExpression	ret ++		2709198	0					
ANR	2709330	Identifier	ret		2709198	0					
ANR	2709331	IncDec	++		2709198	1					
ANR	2709332	IfStatement	if ( needWord ( o -> b . b_type ) )		2709198	2					
ANR	2709333	Condition	needWord ( o -> b . b_type )	104:7:2396:2417	2709198	0	True				
ANR	2709334	CallExpression	needWord ( o -> b . b_type )		2709198	0					
ANR	2709335	Callee	needWord		2709198	0					
ANR	2709336	Identifier	needWord		2709198	0					
ANR	2709337	ArgumentList	o -> b . b_type		2709198	1					
ANR	2709338	Argument	o -> b . b_type		2709198	0					
ANR	2709339	MemberAccess	o -> b . b_type		2709198	0					
ANR	2709340	PtrMemberAccess	o -> b		2709198	0					
ANR	2709341	Identifier	o		2709198	0					
ANR	2709342	Identifier	b		2709198	1					
ANR	2709343	Identifier	b_type		2709198	1					
ANR	2709344	CompoundStatement		19:31:402:402	2709198	1					
ANR	2709345	ExpressionStatement	o -> b . b = b	105:4:2426:2436	2709198	0	True				
ANR	2709346	AssignmentExpression	o -> b . b = b		2709198	0		=			
ANR	2709347	MemberAccess	o -> b . b		2709198	0					
ANR	2709348	PtrMemberAccess	o -> b		2709198	0					
ANR	2709349	Identifier	o		2709198	0					
ANR	2709350	Identifier	b		2709198	1					
ANR	2709351	Identifier	b		2709198	1					
ANR	2709352	Identifier	b		2709198	1					
ANR	2709353	ExpressionStatement	ret ++	106:4:2442:2447	2709198	1	True				
ANR	2709354	PostIncDecOperationExpression	ret ++		2709198	0					
ANR	2709355	Identifier	ret		2709198	0					
ANR	2709356	IncDec	++		2709198	1					
ANR	2709357	ElseStatement	else		2709198	0					
ANR	2709358	IfStatement	if ( needWord ( o -> b . b_type ) )		2709198	0					
ANR	2709359	Condition	needWord ( o -> b . b_type )	108:13:2467:2487	2709198	0	True				
ANR	2709360	CallExpression	needWord ( o -> b . b_type )		2709198	0					
ANR	2709361	Callee	needWord		2709198	0					
ANR	2709362	Identifier	needWord		2709198	0					
ANR	2709363	ArgumentList	o -> b . b_type		2709198	1					
ANR	2709364	Argument	o -> b . b_type		2709198	0					
ANR	2709365	MemberAccess	o -> b . b_type		2709198	0					
ANR	2709366	PtrMemberAccess	o -> b		2709198	0					
ANR	2709367	Identifier	o		2709198	0					
ANR	2709368	Identifier	b		2709198	1					
ANR	2709369	Identifier	b_type		2709198	1					
ANR	2709370	CompoundStatement		23:36:472:472	2709198	1					
ANR	2709371	ExpressionStatement	o -> b . b = a	109:3:2495:2505	2709198	0	True				
ANR	2709372	AssignmentExpression	o -> b . b = a		2709198	0		=			
ANR	2709373	MemberAccess	o -> b . b		2709198	0					
ANR	2709374	PtrMemberAccess	o -> b		2709198	0					
ANR	2709375	Identifier	o		2709198	0					
ANR	2709376	Identifier	b		2709198	1					
ANR	2709377	Identifier	b		2709198	1					
ANR	2709378	Identifier	a		2709198	1					
ANR	2709379	ExpressionStatement	ret ++	110:3:2510:2515	2709198	1	True				
ANR	2709380	PostIncDecOperationExpression	ret ++		2709198	0					
ANR	2709381	Identifier	ret		2709198	0					
ANR	2709382	IncDec	++		2709198	1					
ANR	2709383	ReturnStatement	return ret ;	113:1:2525:2535	2709198	3	True				
ANR	2709384	Identifier	ret		2709198	0					
ANR	2709385	ReturnType	static int		2709198	1					
ANR	2709386	Identifier	instrGet		2709198	2					
ANR	2709387	ParameterList	"ut16 in , op * o , ut16 a , ut16 b"		2709198	3					
ANR	2709388	Parameter	ut16 in	86:20:1985:1991	2709198	0	True				
ANR	2709389	ParameterType	ut16		2709198	0					
ANR	2709390	Identifier	in		2709198	1					
ANR	2709391	Parameter	op * o	86:29:1994:1998	2709198	1	True				
ANR	2709392	ParameterType	op *		2709198	0					
ANR	2709393	Identifier	o		2709198	1					
ANR	2709394	Parameter	ut16 a	86:36:2001:2006	2709198	2	True				
ANR	2709395	ParameterType	ut16		2709198	0					
ANR	2709396	Identifier	a		2709198	1					
ANR	2709397	Parameter	ut16 b	86:44:2009:2014	2709198	3	True				
ANR	2709398	ParameterType	ut16		2709198	0					
ANR	2709399	Identifier	b		2709198	1					
ANR	2709400	CFGEntryNode	ENTRY		2709198		True				
ANR	2709401	CFGExitNode	EXIT		2709198		True				
ANR	2709402	Symbol	ret		2709198						
ANR	2709403	Symbol	a		2709198						
ANR	2709404	Symbol	b		2709198						
ANR	2709405	Symbol	o -> code		2709198						
ANR	2709406	Symbol	in		2709198						
ANR	2709407	Symbol	o -> b . a_type		2709198						
ANR	2709408	Symbol	o -> b		2709198						
ANR	2709409	Symbol	o -> n . a_type		2709198						
ANR	2709410	Symbol	o -> n . a		2709198						
ANR	2709411	Symbol	o -> n . opcode		2709198						
ANR	2709412	Symbol	o		2709198						
ANR	2709413	Symbol	o -> b . b_type		2709198						
ANR	2709414	Symbol	o -> n		2709198						
ANR	2709415	Symbol	o -> code . opcode		2709198						
ANR	2709416	Symbol	o -> b . b		2709198						
ANR	2709417	Symbol	* o		2709198						
ANR	2709418	Symbol	needWord		2709198						
ANR	2709419	Symbol	o -> b . a		2709198						
ANR	2709420	Function	instrGetCycles	116:0:2540:2743							
ANR	2709421	FunctionDef	instrGetCycles (const op * o)		2709420	0					
ANR	2709422	CompoundStatement		116:39:2579:2743	2709420	0					
ANR	2709423	IfStatement	if ( o -> code . opcode == 0 )		2709420	0					
ANR	2709424	Condition	o -> code . opcode == 0	117:5:2586:2604	2709420	0	True				
ANR	2709425	EqualityExpression	o -> code . opcode == 0		2709420	0		==			
ANR	2709426	MemberAccess	o -> code . opcode		2709420	0					
ANR	2709427	PtrMemberAccess	o -> code		2709420	0					
ANR	2709428	Identifier	o		2709420	0					
ANR	2709429	Identifier	code		2709420	1					
ANR	2709430	Identifier	opcode		2709420	1					
ANR	2709431	PrimaryExpression	0		2709420	1					
ANR	2709432	ReturnStatement	return opCycleB [ o -> n . opcode ] + needWord ( o -> n . a_type ) ;	118:2:2609:2661	2709420	1	True				
ANR	2709433	AdditiveExpression	opCycleB [ o -> n . opcode ] + needWord ( o -> n . a_type )		2709420	0		+			
ANR	2709434	ArrayIndexing	opCycleB [ o -> n . opcode ]		2709420	0					
ANR	2709435	Identifier	opCycleB		2709420	0					
ANR	2709436	MemberAccess	o -> n . opcode		2709420	1					
ANR	2709437	PtrMemberAccess	o -> n		2709420	0					
ANR	2709438	Identifier	o		2709420	0					
ANR	2709439	Identifier	n		2709420	1					
ANR	2709440	Identifier	opcode		2709420	1					
ANR	2709441	CallExpression	needWord ( o -> n . a_type )		2709420	1					
ANR	2709442	Callee	needWord		2709420	0					
ANR	2709443	Identifier	needWord		2709420	0					
ANR	2709444	ArgumentList	o -> n . a_type		2709420	1					
ANR	2709445	Argument	o -> n . a_type		2709420	0					
ANR	2709446	MemberAccess	o -> n . a_type		2709420	0					
ANR	2709447	PtrMemberAccess	o -> n		2709420	0					
ANR	2709448	Identifier	o		2709420	0					
ANR	2709449	Identifier	n		2709420	1					
ANR	2709450	Identifier	a_type		2709420	1					
ANR	2709451	ReturnStatement	return opCycle [ o -> b . opcode ] + needWord ( o -> b . a_type ) + needWord ( o -> b . b_type ) ;	119:1:2664:2741	2709420	1	True				
ANR	2709452	AdditiveExpression	opCycle [ o -> b . opcode ] + needWord ( o -> b . a_type ) + needWord ( o -> b . b_type )		2709420	0		+			
ANR	2709453	ArrayIndexing	opCycle [ o -> b . opcode ]		2709420	0					
ANR	2709454	Identifier	opCycle		2709420	0					
ANR	2709455	MemberAccess	o -> b . opcode		2709420	1					
ANR	2709456	PtrMemberAccess	o -> b		2709420	0					
ANR	2709457	Identifier	o		2709420	0					
ANR	2709458	Identifier	b		2709420	1					
ANR	2709459	Identifier	opcode		2709420	1					
ANR	2709460	AdditiveExpression	needWord ( o -> b . a_type ) + needWord ( o -> b . b_type )		2709420	1		+			
ANR	2709461	CallExpression	needWord ( o -> b . a_type )		2709420	0					
ANR	2709462	Callee	needWord		2709420	0					
ANR	2709463	Identifier	needWord		2709420	0					
ANR	2709464	ArgumentList	o -> b . a_type		2709420	1					
ANR	2709465	Argument	o -> b . a_type		2709420	0					
ANR	2709466	MemberAccess	o -> b . a_type		2709420	0					
ANR	2709467	PtrMemberAccess	o -> b		2709420	0					
ANR	2709468	Identifier	o		2709420	0					
ANR	2709469	Identifier	b		2709420	1					
ANR	2709470	Identifier	a_type		2709420	1					
ANR	2709471	CallExpression	needWord ( o -> b . b_type )		2709420	1					
ANR	2709472	Callee	needWord		2709420	0					
ANR	2709473	Identifier	needWord		2709420	0					
ANR	2709474	ArgumentList	o -> b . b_type		2709420	1					
ANR	2709475	Argument	o -> b . b_type		2709420	0					
ANR	2709476	MemberAccess	o -> b . b_type		2709420	0					
ANR	2709477	PtrMemberAccess	o -> b		2709420	0					
ANR	2709478	Identifier	o		2709420	0					
ANR	2709479	Identifier	b		2709420	1					
ANR	2709480	Identifier	b_type		2709420	1					
ANR	2709481	ReturnType	static int		2709420	1					
ANR	2709482	Identifier	instrGetCycles		2709420	2					
ANR	2709483	ParameterList	const op * o		2709420	3					
ANR	2709484	Parameter	const op * o	116:26:2566:2576	2709420	0	True				
ANR	2709485	ParameterType	const op *		2709420	0					
ANR	2709486	Identifier	o		2709420	1					
ANR	2709487	CFGEntryNode	ENTRY		2709420		True				
ANR	2709488	CFGExitNode	EXIT		2709420		True				
ANR	2709489	Symbol	* o -> b . opcode		2709420						
ANR	2709490	Symbol	* o -> b		2709420						
ANR	2709491	Symbol	o -> code		2709420						
ANR	2709492	Symbol	o -> b		2709420						
ANR	2709493	Symbol	o -> b . a_type		2709420						
ANR	2709494	Symbol	o -> n . a_type		2709420						
ANR	2709495	Symbol	* o -> n . opcode		2709420						
ANR	2709496	Symbol	o -> n . opcode		2709420						
ANR	2709497	Symbol	o		2709420						
ANR	2709498	Symbol	* opCycleB		2709420						
ANR	2709499	Symbol	o -> b . opcode		2709420						
ANR	2709500	Symbol	o -> b . b_type		2709420						
ANR	2709501	Symbol	o -> n		2709420						
ANR	2709502	Symbol	opCycleB		2709420						
ANR	2709503	Symbol	* opCycle		2709420						
ANR	2709504	Symbol	o -> code . opcode		2709420						
ANR	2709505	Symbol	* o		2709420						
ANR	2709506	Symbol	needWord		2709420						
ANR	2709507	Symbol	* * o		2709420						
ANR	2709508	Symbol	* o -> n		2709420						
ANR	2709509	Symbol	opCycle		2709420						
ANR	2709510	Function	dcpu16_disasm	123:0:2746:3019							
ANR	2709511	FunctionDef	"dcpu16_disasm (char * out , const ut16 * inp , int len , int * cost)"		2709510	0					
ANR	2709512	CompoundStatement		123:66:2812:3019	2709510	0					
ANR	2709513	IdentifierDeclStatement	op o = { { 0 } } ;	124:1:2815:2827	2709510	0	True				
ANR	2709514	IdentifierDecl	o = { { 0 } }		2709510	0					
ANR	2709515	IdentifierDeclType	op		2709510	0					
ANR	2709516	Identifier	o		2709510	1					
ANR	2709517	AssignmentExpression	o = { { 0 } }		2709510	2		=			
ANR	2709518	Identifier	o		2709510	0					
ANR	2709519	InitializerList	0		2709510	1					
ANR	2709520	InitializerList	0		2709510	0					
ANR	2709521	PrimaryExpression	0		2709510	0					
ANR	2709522	IdentifierDeclStatement	"int delta = instrGet ( inp [ 0 ] , & o , inp [ 1 ] , inp [ 2 ] ) ;"	125:1:2830:2879	2709510	1	True				
ANR	2709523	IdentifierDecl	"delta = instrGet ( inp [ 0 ] , & o , inp [ 1 ] , inp [ 2 ] )"		2709510	0					
ANR	2709524	IdentifierDeclType	int		2709510	0					
ANR	2709525	Identifier	delta		2709510	1					
ANR	2709526	AssignmentExpression	"delta = instrGet ( inp [ 0 ] , & o , inp [ 1 ] , inp [ 2 ] )"		2709510	2		=			
ANR	2709527	Identifier	delta		2709510	0					
ANR	2709528	CallExpression	"instrGet ( inp [ 0 ] , & o , inp [ 1 ] , inp [ 2 ] )"		2709510	1					
ANR	2709529	Callee	instrGet		2709510	0					
ANR	2709530	Identifier	instrGet		2709510	0					
ANR	2709531	ArgumentList	inp [ 0 ]		2709510	1					
ANR	2709532	Argument	inp [ 0 ]		2709510	0					
ANR	2709533	ArrayIndexing	inp [ 0 ]		2709510	0					
ANR	2709534	Identifier	inp		2709510	0					
ANR	2709535	PrimaryExpression	0		2709510	1					
ANR	2709536	Argument	& o		2709510	1					
ANR	2709537	UnaryOperationExpression	& o		2709510	0					
ANR	2709538	UnaryOperator	&		2709510	0					
ANR	2709539	Identifier	o		2709510	1					
ANR	2709540	Argument	inp [ 1 ]		2709510	2					
ANR	2709541	ArrayIndexing	inp [ 1 ]		2709510	0					
ANR	2709542	Identifier	inp		2709510	0					
ANR	2709543	PrimaryExpression	1		2709510	1					
ANR	2709544	Argument	inp [ 2 ]		2709510	3					
ANR	2709545	ArrayIndexing	inp [ 2 ]		2709510	0					
ANR	2709546	Identifier	inp		2709510	0					
ANR	2709547	PrimaryExpression	2		2709510	1					
ANR	2709548	IfStatement	if ( cost )		2709510	2					
ANR	2709549	Condition	cost	126:5:2886:2889	2709510	0	True				
ANR	2709550	Identifier	cost		2709510	0					
ANR	2709551	ExpressionStatement	* cost = instrGetCycles ( & o ) + ( ( o . b . opcode >= 0xc ) ? 1 : 0 )	126:11:2892:2946	2709510	1	True				
ANR	2709552	AssignmentExpression	* cost = instrGetCycles ( & o ) + ( ( o . b . opcode >= 0xc ) ? 1 : 0 )		2709510	0		=			
ANR	2709553	UnaryOperationExpression	* cost		2709510	0					
ANR	2709554	UnaryOperator	*		2709510	0					
ANR	2709555	Identifier	cost		2709510	1					
ANR	2709556	AdditiveExpression	instrGetCycles ( & o ) + ( ( o . b . opcode >= 0xc ) ? 1 : 0 )		2709510	1		+			
ANR	2709557	CallExpression	instrGetCycles ( & o )		2709510	0					
ANR	2709558	Callee	instrGetCycles		2709510	0					
ANR	2709559	Identifier	instrGetCycles		2709510	0					
ANR	2709560	ArgumentList	& o		2709510	1					
ANR	2709561	Argument	& o		2709510	0					
ANR	2709562	UnaryOperationExpression	& o		2709510	0					
ANR	2709563	UnaryOperator	&		2709510	0					
ANR	2709564	Identifier	o		2709510	1					
ANR	2709565	ConditionalExpression	( o . b . opcode >= 0xc ) ? 1 : 0		2709510	1					
ANR	2709566	Condition	o . b . opcode >= 0xc		2709510	0					
ANR	2709567	RelationalExpression	o . b . opcode >= 0xc		2709510	0		>=			
ANR	2709568	MemberAccess	o . b . opcode		2709510	0					
ANR	2709569	MemberAccess	o . b		2709510	0					
ANR	2709570	Identifier	o		2709510	0					
ANR	2709571	Identifier	b		2709510	1					
ANR	2709572	Identifier	opcode		2709510	1					
ANR	2709573	PrimaryExpression	0xc		2709510	1					
ANR	2709574	PrimaryExpression	1		2709510	1					
ANR	2709575	PrimaryExpression	0		2709510	2					
ANR	2709576	ExpressionStatement	"instrPrint ( out , & o )"	127:1:2949:2969	2709510	3	True				
ANR	2709577	CallExpression	"instrPrint ( out , & o )"		2709510	0					
ANR	2709578	Callee	instrPrint		2709510	0					
ANR	2709579	Identifier	instrPrint		2709510	0					
ANR	2709580	ArgumentList	out		2709510	1					
ANR	2709581	Argument	out		2709510	0					
ANR	2709582	Identifier	out		2709510	0					
ANR	2709583	Argument	& o		2709510	1					
ANR	2709584	UnaryOperationExpression	& o		2709510	0					
ANR	2709585	UnaryOperator	&		2709510	0					
ANR	2709586	Identifier	o		2709510	1					
ANR	2709587	ReturnStatement	return delta << 1 ;	129:1:3002:3017	2709510	4	True				
ANR	2709588	ShiftExpression	delta << 1		2709510	0		<<			
ANR	2709589	Identifier	delta		2709510	0					
ANR	2709590	PrimaryExpression	1		2709510	1					
ANR	2709591	ReturnType	int		2709510	1					
ANR	2709592	Identifier	dcpu16_disasm		2709510	2					
ANR	2709593	ParameterList	"char * out , const ut16 * inp , int len , int * cost"		2709510	3					
ANR	2709594	Parameter	char * out	123:18:2764:2772	2709510	0	True				
ANR	2709595	ParameterType	char *		2709510	0					
ANR	2709596	Identifier	out		2709510	1					
ANR	2709597	Parameter	const ut16 * inp	123:29:2775:2789	2709510	1	True				
ANR	2709598	ParameterType	const ut16 *		2709510	0					
ANR	2709599	Identifier	inp		2709510	1					
ANR	2709600	Parameter	int len	123:46:2792:2798	2709510	2	True				
ANR	2709601	ParameterType	int		2709510	0					
ANR	2709602	Identifier	len		2709510	1					
ANR	2709603	Parameter	int * cost	123:55:2801:2809	2709510	3	True				
ANR	2709604	ParameterType	int *		2709510	0					
ANR	2709605	Identifier	cost		2709510	1					
ANR	2709606	CFGEntryNode	ENTRY		2709510		True				
ANR	2709607	CFGExitNode	EXIT		2709510		True				
ANR	2709608	Symbol	instrGetCycles		2709510						
ANR	2709609	Symbol	cost		2709510						
ANR	2709610	Symbol	delta		2709510						
ANR	2709611	Symbol	inp		2709510						
ANR	2709612	Symbol	* inp		2709510						
ANR	2709613	Symbol	out		2709510						
ANR	2709614	Symbol	o		2709510						
ANR	2709615	Symbol	len		2709510						
ANR	2709616	Symbol	o . b		2709510						
ANR	2709617	Symbol	& o		2709510						
ANR	2709618	Symbol	instrGet		2709510						
ANR	2709619	Symbol	o . b . opcode		2709510						
ANR	2709620	Symbol	* cost		2709510						
