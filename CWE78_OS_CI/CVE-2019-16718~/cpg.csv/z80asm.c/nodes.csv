command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6608318	File	data/converged/CVE-2019-16718~_radare2/z80asm.c								
ANR	6608319	DeclStmt									
ANR	6608320	Decl							unsigned char	unsigned char *	obuf
ANR	6608321	DeclStmt									
ANR	6608322	Decl							int	int	obuflen
ANR	6608323	DeclStmt									
ANR	6608324	Decl							const char	const char * [ ]	mnemonics
ANR	6608325	DeclStmt									
ANR	6608326	Decl							int	int	addr
ANR	6608327	Decl							int	int	file
ANR	6608328	DeclStmt									
ANR	6608329	Decl							int	int	writebyte
ANR	6608330	DeclStmt									
ANR	6608331	Decl							const char	const char *	readbyte
ANR	6608332	DeclStmt									
ANR	6608333	Decl							const char	const char *	readword
ANR	6608334	Decl							const char	const char *	indexjmp
ANR	6608335	Decl							const char	const char *	bitsetres
ANR	6608336	DeclStmt									
ANR	6608337	Decl							int	int	indexed
ANR	6608338	DeclStmt									
ANR	6608339	Decl							int	int	verbose
ANR	6608340	DeclStmt									
ANR	6608341	Decl							int	int	comma
ANR	6608342	DeclStmt									
ANR	6608343	Decl							int	int	baseaddr
ANR	6608344	DeclStmt									
ANR	6608345	Decl							char	char	mem_delimiter
ANR	6608346	DeclStmt									
ANR	6608347	Decl							char	char *	z80buffer
ANR	6608348	DeclStmt									
ANR	6608349	Decl							int	int	define_macro
ANR	6608350	DeclStmt									
ANR	6608351	Decl							int	int	sp
ANR	6608352	DeclStmt									
ANR	6608353	Decl							struct stack	struct stack [ MAX_INCLUDE ]	stack
ANR	6608354	Function	printerr	94:0:3124:3570							
ANR	6608355	FunctionDef	"printerr (int error , const char * fmt)"		6608354	0					
ANR	6608356	CompoundStatement		94:54:3178:3570	6608354	0					
ANR	6608357	IdentifierDeclStatement	va_list l ;	96:1:3187:3196	6608354	0	True				
ANR	6608358	IdentifierDecl	l		6608354	0					
ANR	6608359	IdentifierDeclType	va_list		6608354	0					
ANR	6608360	Identifier	l		6608354	1					
ANR	6608361	ExpressionStatement	"va_start ( l , fmt )"	97:1:3199:3216	6608354	1	True				
ANR	6608362	CallExpression	"va_start ( l , fmt )"		6608354	0					
ANR	6608363	Callee	va_start		6608354	0					
ANR	6608364	Identifier	va_start		6608354	0					
ANR	6608365	ArgumentList	l		6608354	1					
ANR	6608366	Argument	l		6608354	0					
ANR	6608367	Identifier	l		6608354	0					
ANR	6608368	Argument	fmt		6608354	1					
ANR	6608369	Identifier	fmt		6608354	0					
ANR	6608370	IfStatement	if ( ( sp < 0 ) || ( stack [ sp ] . name == 0 ) )		6608354	2					
ANR	6608371	Condition	( sp < 0 ) || ( stack [ sp ] . name == 0 )	98:5:3223:3255	6608354	0	True				
ANR	6608372	OrExpression	( sp < 0 ) || ( stack [ sp ] . name == 0 )		6608354	0		||			
ANR	6608373	RelationalExpression	sp < 0		6608354	0		<			
ANR	6608374	Identifier	sp		6608354	0					
ANR	6608375	PrimaryExpression	0		6608354	1					
ANR	6608376	EqualityExpression	stack [ sp ] . name == 0		6608354	1		==			
ANR	6608377	MemberAccess	stack [ sp ] . name		6608354	0					
ANR	6608378	ArrayIndexing	stack [ sp ]		6608354	0					
ANR	6608379	Identifier	stack		6608354	0					
ANR	6608380	Identifier	sp		6608354	1					
ANR	6608381	Identifier	name		6608354	1					
ANR	6608382	PrimaryExpression	0		6608354	1					
ANR	6608383	CompoundStatement		5:40:79:79	6608354	1					
ANR	6608384	ExpressionStatement	"fprintf ( stderr , ""internal assembler error, sp == %i\\n"" , sp )"	99:2:3262:3322	6608354	0	True				
ANR	6608385	CallExpression	"fprintf ( stderr , ""internal assembler error, sp == %i\\n"" , sp )"		6608354	0					
ANR	6608386	Callee	fprintf		6608354	0					
ANR	6608387	Identifier	fprintf		6608354	0					
ANR	6608388	ArgumentList	stderr		6608354	1					
ANR	6608389	Argument	stderr		6608354	0					
ANR	6608390	Identifier	stderr		6608354	0					
ANR	6608391	Argument	"""internal assembler error, sp == %i\\n"""		6608354	1					
ANR	6608392	PrimaryExpression	"""internal assembler error, sp == %i\\n"""		6608354	0					
ANR	6608393	Argument	sp		6608354	2					
ANR	6608394	Identifier	sp		6608354	0					
ANR	6608395	ExpressionStatement	"vfprintf ( stderr , fmt , l )"	100:2:3326:3351	6608354	1	True				
ANR	6608396	CallExpression	"vfprintf ( stderr , fmt , l )"		6608354	0					
ANR	6608397	Callee	vfprintf		6608354	0					
ANR	6608398	Identifier	vfprintf		6608354	0					
ANR	6608399	ArgumentList	stderr		6608354	1					
ANR	6608400	Argument	stderr		6608354	0					
ANR	6608401	Identifier	stderr		6608354	0					
ANR	6608402	Argument	fmt		6608354	1					
ANR	6608403	Identifier	fmt		6608354	0					
ANR	6608404	Argument	l		6608354	2					
ANR	6608405	Identifier	l		6608354	0					
ANR	6608406	ExpressionStatement	"fprintf ( stderr , ""%s%s:%d: %s: "" , stack [ sp ] . dir ? stack [ sp ] . dir -> name : """" , stack [ sp ] . name , stack [ sp ] . line , error ? ""error"" : ""warning"" )"	102:1:3357:3491	6608354	3	True				
ANR	6608407	CallExpression	"fprintf ( stderr , ""%s%s:%d: %s: "" , stack [ sp ] . dir ? stack [ sp ] . dir -> name : """" , stack [ sp ] . name , stack [ sp ] . line , error ? ""error"" : ""warning"" )"		6608354	0					
ANR	6608408	Callee	fprintf		6608354	0					
ANR	6608409	Identifier	fprintf		6608354	0					
ANR	6608410	ArgumentList	stderr		6608354	1					
ANR	6608411	Argument	stderr		6608354	0					
ANR	6608412	Identifier	stderr		6608354	0					
ANR	6608413	Argument	"""%s%s:%d: %s: """		6608354	1					
ANR	6608414	PrimaryExpression	"""%s%s:%d: %s: """		6608354	0					
ANR	6608415	Argument	"stack [ sp ] . dir ? stack [ sp ] . dir -> name : """""		6608354	2					
ANR	6608416	ConditionalExpression	"stack [ sp ] . dir ? stack [ sp ] . dir -> name : """""		6608354	0					
ANR	6608417	Condition	stack [ sp ] . dir		6608354	0					
ANR	6608418	MemberAccess	stack [ sp ] . dir		6608354	0					
ANR	6608419	ArrayIndexing	stack [ sp ]		6608354	0					
ANR	6608420	Identifier	stack		6608354	0					
ANR	6608421	Identifier	sp		6608354	1					
ANR	6608422	Identifier	dir		6608354	1					
ANR	6608423	PtrMemberAccess	stack [ sp ] . dir -> name		6608354	1					
ANR	6608424	MemberAccess	stack [ sp ] . dir		6608354	0					
ANR	6608425	ArrayIndexing	stack [ sp ]		6608354	0					
ANR	6608426	Identifier	stack		6608354	0					
ANR	6608427	Identifier	sp		6608354	1					
ANR	6608428	Identifier	dir		6608354	1					
ANR	6608429	Identifier	name		6608354	1					
ANR	6608430	PrimaryExpression	""""""		6608354	2					
ANR	6608431	Argument	stack [ sp ] . name		6608354	3					
ANR	6608432	MemberAccess	stack [ sp ] . name		6608354	0					
ANR	6608433	ArrayIndexing	stack [ sp ]		6608354	0					
ANR	6608434	Identifier	stack		6608354	0					
ANR	6608435	Identifier	sp		6608354	1					
ANR	6608436	Identifier	name		6608354	1					
ANR	6608437	Argument	stack [ sp ] . line		6608354	4					
ANR	6608438	MemberAccess	stack [ sp ] . line		6608354	0					
ANR	6608439	ArrayIndexing	stack [ sp ]		6608354	0					
ANR	6608440	Identifier	stack		6608354	0					
ANR	6608441	Identifier	sp		6608354	1					
ANR	6608442	Identifier	line		6608354	1					
ANR	6608443	Argument	"error ? ""error"" : ""warning"""		6608354	5					
ANR	6608444	ConditionalExpression	"error ? ""error"" : ""warning"""		6608354	0					
ANR	6608445	Condition	error		6608354	0					
ANR	6608446	Identifier	error		6608354	0					
ANR	6608447	PrimaryExpression	"""error"""		6608354	1					
ANR	6608448	PrimaryExpression	"""warning"""		6608354	2					
ANR	6608449	ExpressionStatement	"vfprintf ( stderr , fmt , l )"	104:1:3494:3519	6608354	4	True				
ANR	6608450	CallExpression	"vfprintf ( stderr , fmt , l )"		6608354	0					
ANR	6608451	Callee	vfprintf		6608354	0					
ANR	6608452	Identifier	vfprintf		6608354	0					
ANR	6608453	ArgumentList	stderr		6608354	1					
ANR	6608454	Argument	stderr		6608354	0					
ANR	6608455	Identifier	stderr		6608354	0					
ANR	6608456	Argument	fmt		6608354	1					
ANR	6608457	Identifier	fmt		6608354	0					
ANR	6608458	Argument	l		6608354	2					
ANR	6608459	Identifier	l		6608354	0					
ANR	6608460	ExpressionStatement	va_end ( l )	105:1:3522:3532	6608354	5	True				
ANR	6608461	CallExpression	va_end ( l )		6608354	0					
ANR	6608462	Callee	va_end		6608354	0					
ANR	6608463	Identifier	va_end		6608354	0					
ANR	6608464	ArgumentList	l		6608354	1					
ANR	6608465	Argument	l		6608354	0					
ANR	6608466	Identifier	l		6608354	0					
ANR	6608467	IfStatement	if ( error )		6608354	6					
ANR	6608468	Condition	error	106:5:3539:3543	6608354	0	True				
ANR	6608469	Identifier	error		6608354	0					
ANR	6608470	CompoundStatement		13:12:367:367	6608354	1					
ANR	6608471	ExpressionStatement	errors ++	107:2:3550:3558	6608354	0	True				
ANR	6608472	PostIncDecOperationExpression	errors ++		6608354	0					
ANR	6608473	Identifier	errors		6608354	0					
ANR	6608474	IncDec	++		6608354	1					
ANR	6608475	ReturnType	static void		6608354	1					
ANR	6608476	Identifier	printerr		6608354	2					
ANR	6608477	ParameterList	"int error , const char * fmt"		6608354	3					
ANR	6608478	Parameter	int error	94:21:3145:3153	6608354	0	True				
ANR	6608479	ParameterType	int		6608354	0					
ANR	6608480	Identifier	error		6608354	1					
ANR	6608481	Parameter	const char * fmt	94:32:3156:3170	6608354	1	True				
ANR	6608482	ParameterType	const char *		6608354	0					
ANR	6608483	Identifier	fmt		6608354	1					
ANR	6608484	CFGEntryNode	ENTRY		6608354		True				
ANR	6608485	CFGExitNode	EXIT		6608354		True				
ANR	6608486	Symbol	* sp		6608354						
ANR	6608487	Symbol	stack		6608354						
ANR	6608488	Symbol	stack [ sp ] . dir		6608354						
ANR	6608489	Symbol	* * sp		6608354						
ANR	6608490	Symbol	error		6608354						
ANR	6608491	Symbol	fmt		6608354						
ANR	6608492	Symbol	l		6608354						
ANR	6608493	Symbol	stderr		6608354						
ANR	6608494	Symbol	stack [ sp ] . name		6608354						
ANR	6608495	Symbol	* * stack		6608354						
ANR	6608496	Symbol	* stack		6608354						
ANR	6608497	Symbol	stack [ sp ] . line		6608354						
ANR	6608498	Symbol	* stack [ sp ] . dir		6608354						
ANR	6608499	Symbol	sp		6608354						
ANR	6608500	Symbol	errors		6608354						
ANR	6608501	Symbol	stack [ sp ] . dir -> name		6608354						
ANR	6608502	Function	delspc	113:0:3606:3762							
ANR	6608503	FunctionDef	delspc (const char * ptr)		6608502	0					
ANR	6608504	CompoundStatement		113:43:3649:3762	6608502	0					
ANR	6608505	WhileStatement	while ( * ptr && isspace ( ( const unsigned char ) * ptr ) )		6608502	0					
ANR	6608506	Condition	* ptr && isspace ( ( const unsigned char ) * ptr )	114:8:3659:3702	6608502	0	True				
ANR	6608507	AndExpression	* ptr && isspace ( ( const unsigned char ) * ptr )		6608502	0		&&			
ANR	6608508	UnaryOperationExpression	* ptr		6608502	0					
ANR	6608509	UnaryOperator	*		6608502	0					
ANR	6608510	Identifier	ptr		6608502	1					
ANR	6608511	CallExpression	isspace ( ( const unsigned char ) * ptr )		6608502	1					
ANR	6608512	Callee	isspace		6608502	0					
ANR	6608513	Identifier	isspace		6608502	0					
ANR	6608514	ArgumentList	( const unsigned char ) * ptr		6608502	1					
ANR	6608515	Argument	( const unsigned char ) * ptr		6608502	0					
ANR	6608516	CastExpression	( const unsigned char ) * ptr		6608502	0					
ANR	6608517	CastTarget	const unsigned char		6608502	0					
ANR	6608518	UnaryOperationExpression	* ptr		6608502	1					
ANR	6608519	UnaryOperator	*		6608502	0					
ANR	6608520	Identifier	ptr		6608502	1					
ANR	6608521	ExpressionStatement	ptr ++	115:2:3707:3712	6608502	1	True				
ANR	6608522	PostIncDecOperationExpression	ptr ++		6608502	0					
ANR	6608523	Identifier	ptr		6608502	0					
ANR	6608524	IncDec	++		6608502	1					
ANR	6608525	IfStatement	if ( * ptr == ';' )		6608502	1					
ANR	6608526	Condition	* ptr == ';'	116:5:3719:3729	6608502	0	True				
ANR	6608527	EqualityExpression	* ptr == ';'		6608502	0		==			
ANR	6608528	UnaryOperationExpression	* ptr		6608502	0					
ANR	6608529	UnaryOperator	*		6608502	0					
ANR	6608530	Identifier	ptr		6608502	1					
ANR	6608531	PrimaryExpression	';'		6608502	1					
ANR	6608532	CompoundStatement		4:18:82:82	6608502	1					
ANR	6608533	ExpressionStatement	"ptr = """""	117:2:3736:3744	6608502	0	True				
ANR	6608534	AssignmentExpression	"ptr = """""		6608502	0		=			
ANR	6608535	Identifier	ptr		6608502	0					
ANR	6608536	PrimaryExpression	""""""		6608502	1					
ANR	6608537	ReturnStatement	return ptr ;	119:1:3750:3760	6608502	2	True				
ANR	6608538	Identifier	ptr		6608502	0					
ANR	6608539	ReturnType	static const char *		6608502	1					
ANR	6608540	Identifier	delspc		6608502	2					
ANR	6608541	ParameterList	const char * ptr		6608502	3					
ANR	6608542	Parameter	const char * ptr	113:26:3632:3646	6608502	0	True				
ANR	6608543	ParameterType	const char *		6608502	0					
ANR	6608544	Identifier	ptr		6608502	1					
ANR	6608545	CFGEntryNode	ENTRY		6608502		True				
ANR	6608546	CFGExitNode	EXIT		6608502		True				
ANR	6608547	Symbol	* ptr		6608502						
ANR	6608548	Symbol	isspace		6608502						
ANR	6608549	Symbol	ptr		6608502						
ANR	6608550	Function	rd_comma	123:0:3813:3985							
ANR	6608551	FunctionDef	rd_comma (const char * * p)		6608550	0					
ANR	6608552	CompoundStatement		123:37:3850:3985	6608550	0					
ANR	6608553	ExpressionStatement	* p = delspc ( * p )	124:1:3853:3869	6608550	0	True				
ANR	6608554	AssignmentExpression	* p = delspc ( * p )		6608550	0		=			
ANR	6608555	UnaryOperationExpression	* p		6608550	0					
ANR	6608556	UnaryOperator	*		6608550	0					
ANR	6608557	Identifier	p		6608550	1					
ANR	6608558	CallExpression	delspc ( * p )		6608550	1					
ANR	6608559	Callee	delspc		6608550	0					
ANR	6608560	Identifier	delspc		6608550	0					
ANR	6608561	ArgumentList	* p		6608550	1					
ANR	6608562	Argument	* p		6608550	0					
ANR	6608563	UnaryOperationExpression	* p		6608550	0					
ANR	6608564	UnaryOperator	*		6608550	0					
ANR	6608565	Identifier	p		6608550	1					
ANR	6608566	IfStatement	"if ( * * p != ',' )"		6608550	1					
ANR	6608567	Condition	"* * p != ','"	125:5:3876:3885	6608550	0	True				
ANR	6608568	EqualityExpression	"* * p != ','"		6608550	0		!=			
ANR	6608569	UnaryOperationExpression	* * p		6608550	0					
ANR	6608570	UnaryOperator	*		6608550	0					
ANR	6608571	UnaryOperationExpression	* p		6608550	1					
ANR	6608572	UnaryOperator	*		6608550	0					
ANR	6608573	Identifier	p		6608550	1					
ANR	6608574	PrimaryExpression	"','"		6608550	1					
ANR	6608575	CompoundStatement		3:17:37:37	6608550	1					
ANR	6608576	ExpressionStatement	"eprintf ( ""`,' expected. Remainder of line: %s\\n"" , * p )"	126:2:3892:3945	6608550	0	True				
ANR	6608577	CallExpression	"eprintf ( ""`,' expected. Remainder of line: %s\\n"" , * p )"		6608550	0					
ANR	6608578	Callee	eprintf		6608550	0					
ANR	6608579	Identifier	eprintf		6608550	0					
ANR	6608580	ArgumentList	"""`,' expected. Remainder of line: %s\\n"""		6608550	1					
ANR	6608581	Argument	"""`,' expected. Remainder of line: %s\\n"""		6608550	0					
ANR	6608582	PrimaryExpression	"""`,' expected. Remainder of line: %s\\n"""		6608550	0					
ANR	6608583	Argument	* p		6608550	1					
ANR	6608584	UnaryOperationExpression	* p		6608550	0					
ANR	6608585	UnaryOperator	*		6608550	0					
ANR	6608586	Identifier	p		6608550	1					
ANR	6608587	ReturnStatement	return ;	127:2:3949:3955	6608550	1	True				
ANR	6608588	ExpressionStatement	* p = delspc ( ( * p ) + 1 )	129:1:3961:3983	6608550	2	True				
ANR	6608589	AssignmentExpression	* p = delspc ( ( * p ) + 1 )		6608550	0		=			
ANR	6608590	UnaryOperationExpression	* p		6608550	0					
ANR	6608591	UnaryOperator	*		6608550	0					
ANR	6608592	Identifier	p		6608550	1					
ANR	6608593	CallExpression	delspc ( ( * p ) + 1 )		6608550	1					
ANR	6608594	Callee	delspc		6608550	0					
ANR	6608595	Identifier	delspc		6608550	0					
ANR	6608596	ArgumentList	( * p ) + 1		6608550	1					
ANR	6608597	Argument	( * p ) + 1		6608550	0					
ANR	6608598	AdditiveExpression	( * p ) + 1		6608550	0		+			
ANR	6608599	UnaryOperationExpression	* p		6608550	0					
ANR	6608600	UnaryOperator	*		6608550	0					
ANR	6608601	Identifier	p		6608550	1					
ANR	6608602	PrimaryExpression	1		6608550	1					
ANR	6608603	ReturnType	static void		6608550	1					
ANR	6608604	Identifier	rd_comma		6608550	2					
ANR	6608605	ParameterList	const char * * p		6608550	3					
ANR	6608606	Parameter	const char * * p	123:21:3834:3847	6608550	0	True				
ANR	6608607	ParameterType	const char * *		6608550	0					
ANR	6608608	Identifier	p		6608550	1					
ANR	6608609	CFGEntryNode	ENTRY		6608550		True				
ANR	6608610	CFGExitNode	EXIT		6608550		True				
ANR	6608611	Symbol	p		6608550						
ANR	6608612	Symbol	* p		6608550						
ANR	6608613	Symbol	* * p		6608550						
ANR	6608614	Symbol	delspc		6608550						
ANR	6608615	Function	has_argument	133:0:4040:4131							
ANR	6608616	FunctionDef	has_argument (const char * * p)		6608615	0					
ANR	6608617	CompoundStatement		133:40:4080:4131	6608615	0					
ANR	6608618	IdentifierDeclStatement	const char * q = delspc ( * p ) ;	134:1:4083:4110	6608615	0	True				
ANR	6608619	IdentifierDecl	* q = delspc ( * p )		6608615	0					
ANR	6608620	IdentifierDeclType	const char *		6608615	0					
ANR	6608621	Identifier	q		6608615	1					
ANR	6608622	AssignmentExpression	* q = delspc ( * p )		6608615	2		=			
ANR	6608623	Identifier	q		6608615	0					
ANR	6608624	CallExpression	delspc ( * p )		6608615	1					
ANR	6608625	Callee	delspc		6608615	0					
ANR	6608626	Identifier	delspc		6608615	0					
ANR	6608627	ArgumentList	* p		6608615	1					
ANR	6608628	Argument	* p		6608615	0					
ANR	6608629	UnaryOperationExpression	* p		6608615	0					
ANR	6608630	UnaryOperator	*		6608615	0					
ANR	6608631	Identifier	p		6608615	1					
ANR	6608632	ReturnStatement	"return * q == ',' ;"	135:1:4113:4129	6608615	1	True				
ANR	6608633	EqualityExpression	"* q == ','"		6608615	0		==			
ANR	6608634	UnaryOperationExpression	* q		6608615	0					
ANR	6608635	UnaryOperator	*		6608615	0					
ANR	6608636	Identifier	q		6608615	1					
ANR	6608637	PrimaryExpression	"','"		6608615	1					
ANR	6608638	ReturnType	static int		6608615	1					
ANR	6608639	Identifier	has_argument		6608615	2					
ANR	6608640	ParameterList	const char * * p		6608615	3					
ANR	6608641	Parameter	const char * * p	133:24:4064:4077	6608615	0	True				
ANR	6608642	ParameterType	const char * *		6608615	0					
ANR	6608643	Identifier	p		6608615	1					
ANR	6608644	CFGEntryNode	ENTRY		6608615		True				
ANR	6608645	CFGExitNode	EXIT		6608615		True				
ANR	6608646	Symbol	p		6608615						
ANR	6608647	Symbol	q		6608615						
ANR	6608648	Symbol	* p		6608615						
ANR	6608649	Symbol	* q		6608615						
ANR	6608650	Symbol	delspc		6608615						
ANR	6608651	Function	skipword	141:0:4362:4677							
ANR	6608652	FunctionDef	"skipword (const char * * pos , char delimiter)"		6608651	0					
ANR	6608653	CompoundStatement		141:55:4417:4677	6608651	0					
ANR	6608654	IdentifierDeclStatement	int valid ;	145:1:4624:4633	6608651	0	True				
ANR	6608655	IdentifierDecl	valid		6608651	0					
ANR	6608656	IdentifierDeclType	int		6608651	0					
ANR	6608657	Identifier	valid		6608651	1					
ANR	6608658	ExpressionStatement	"rd_expr ( pos , delimiter , & valid , sp , 0 )"	146:1:4636:4675	6608651	1	True				
ANR	6608659	CallExpression	"rd_expr ( pos , delimiter , & valid , sp , 0 )"		6608651	0					
ANR	6608660	Callee	rd_expr		6608651	0					
ANR	6608661	Identifier	rd_expr		6608651	0					
ANR	6608662	ArgumentList	pos		6608651	1					
ANR	6608663	Argument	pos		6608651	0					
ANR	6608664	Identifier	pos		6608651	0					
ANR	6608665	Argument	delimiter		6608651	1					
ANR	6608666	Identifier	delimiter		6608651	0					
ANR	6608667	Argument	& valid		6608651	2					
ANR	6608668	UnaryOperationExpression	& valid		6608651	0					
ANR	6608669	UnaryOperator	&		6608651	0					
ANR	6608670	Identifier	valid		6608651	1					
ANR	6608671	Argument	sp		6608651	3					
ANR	6608672	Identifier	sp		6608651	0					
ANR	6608673	Argument	0		6608651	4					
ANR	6608674	PrimaryExpression	0		6608651	0					
ANR	6608675	ReturnType	static void		6608651	1					
ANR	6608676	Identifier	skipword		6608651	2					
ANR	6608677	ParameterList	"const char * * pos , char delimiter"		6608651	3					
ANR	6608678	Parameter	const char * * pos	141:21:4383:4398	6608651	0	True				
ANR	6608679	ParameterType	const char * *		6608651	0					
ANR	6608680	Identifier	pos		6608651	1					
ANR	6608681	Parameter	char delimiter	141:39:4401:4414	6608651	1	True				
ANR	6608682	ParameterType	char		6608651	0					
ANR	6608683	Identifier	delimiter		6608651	1					
ANR	6608684	CFGEntryNode	ENTRY		6608651		True				
ANR	6608685	CFGExitNode	EXIT		6608651		True				
ANR	6608686	Symbol	valid		6608651						
ANR	6608687	Symbol	pos		6608651						
ANR	6608688	Symbol	delimiter		6608651						
ANR	6608689	Symbol	& valid		6608651						
ANR	6608690	Symbol	sp		6608651						
ANR	6608691	Function	indx	150:0:4754:6090							
ANR	6608692	FunctionDef	"indx (const char * * ptr , const char * * list , int error , const char * * expr)"		6608691	0					
ANR	6608693	CompoundStatement		150:83:4837:6090	6608691	0					
ANR	6608694	IdentifierDeclStatement	int i ;	151:1:4840:4845	6608691	0	True				
ANR	6608695	IdentifierDecl	i		6608691	0					
ANR	6608696	IdentifierDeclType	int		6608691	0					
ANR	6608697	Identifier	i		6608691	1					
ANR	6608698	ExpressionStatement	* ptr = delspc ( * ptr )	152:1:4848:4868	6608691	1	True				
ANR	6608699	AssignmentExpression	* ptr = delspc ( * ptr )		6608691	0		=			
ANR	6608700	UnaryOperationExpression	* ptr		6608691	0					
ANR	6608701	UnaryOperator	*		6608691	0					
ANR	6608702	Identifier	ptr		6608691	1					
ANR	6608703	CallExpression	delspc ( * ptr )		6608691	1					
ANR	6608704	Callee	delspc		6608691	0					
ANR	6608705	Identifier	delspc		6608691	0					
ANR	6608706	ArgumentList	* ptr		6608691	1					
ANR	6608707	Argument	* ptr		6608691	0					
ANR	6608708	UnaryOperationExpression	* ptr		6608691	0					
ANR	6608709	UnaryOperator	*		6608691	0					
ANR	6608710	Identifier	ptr		6608691	1					
ANR	6608711	IfStatement	if ( ! * * ptr )		6608691	2					
ANR	6608712	Condition	! * * ptr	153:5:4875:4880	6608691	0	True				
ANR	6608713	UnaryOperationExpression	! * * ptr		6608691	0					
ANR	6608714	UnaryOperator	!		6608691	0					
ANR	6608715	UnaryOperationExpression	* * ptr		6608691	1					
ANR	6608716	UnaryOperator	*		6608691	0					
ANR	6608717	UnaryOperationExpression	* ptr		6608691	1					
ANR	6608718	UnaryOperator	*		6608691	0					
ANR	6608719	Identifier	ptr		6608691	1					
ANR	6608720	CompoundStatement		4:13:45:45	6608691	1					
ANR	6608721	IfStatement	if ( error )		6608691	0					
ANR	6608722	Condition	error	154:6:4891:4895	6608691	0	True				
ANR	6608723	Identifier	error		6608691	0					
ANR	6608724	CompoundStatement		5:13:60:60	6608691	1					
ANR	6608725	ExpressionStatement	"eprintf ( ""unexpected end of line\\n"" )"	155:3:4903:4939	6608691	0	True				
ANR	6608726	CallExpression	"eprintf ( ""unexpected end of line\\n"" )"		6608691	0					
ANR	6608727	Callee	eprintf		6608691	0					
ANR	6608728	Identifier	eprintf		6608691	0					
ANR	6608729	ArgumentList	"""unexpected end of line\\n"""		6608691	1					
ANR	6608730	Argument	"""unexpected end of line\\n"""		6608691	0					
ANR	6608731	PrimaryExpression	"""unexpected end of line\\n"""		6608691	0					
ANR	6608732	ReturnStatement	return 0 ;	156:3:4944:4952	6608691	1	True				
ANR	6608733	PrimaryExpression	0		6608691	0					
ANR	6608734	ElseStatement	else		6608691	0					
ANR	6608735	CompoundStatement		8:9:125:125	6608691	0					
ANR	6608736	ReturnStatement	return 0 ;	158:3:4968:4976	6608691	0	True				
ANR	6608737	PrimaryExpression	0		6608691	0					
ANR	6608738	IfStatement	if ( comma > 1 )		6608691	3					
ANR	6608739	Condition	comma > 1	161:5:4990:4998	6608691	0	True				
ANR	6608740	RelationalExpression	comma > 1		6608691	0		>			
ANR	6608741	Identifier	comma		6608691	0					
ANR	6608742	PrimaryExpression	1		6608691	1					
ANR	6608743	CompoundStatement		12:16:163:163	6608691	1					
ANR	6608744	ExpressionStatement	rd_comma ( ptr )	162:2:5005:5019	6608691	0	True				
ANR	6608745	CallExpression	rd_comma ( ptr )		6608691	0					
ANR	6608746	Callee	rd_comma		6608691	0					
ANR	6608747	Identifier	rd_comma		6608691	0					
ANR	6608748	ArgumentList	ptr		6608691	1					
ANR	6608749	Argument	ptr		6608691	0					
ANR	6608750	Identifier	ptr		6608691	0					
ANR	6608751	ForStatement	for ( i = 0 ; list [ i ] ; i ++ )		6608691	4					
ANR	6608752	ForInit	i = 0 ;	164:6:5030:5035	6608691	0	True				
ANR	6608753	AssignmentExpression	i = 0		6608691	0		=			
ANR	6608754	Identifier	i		6608691	0					
ANR	6608755	PrimaryExpression	0		6608691	1					
ANR	6608756	Condition	list [ i ]	164:13:5037:5043	6608691	1	True				
ANR	6608757	ArrayIndexing	list [ i ]		6608691	0					
ANR	6608758	Identifier	list		6608691	0					
ANR	6608759	Identifier	i		6608691	1					
ANR	6608760	PostIncDecOperationExpression	i ++	164:22:5046:5048	6608691	2	True				
ANR	6608761	Identifier	i		6608691	0					
ANR	6608762	IncDec	++		6608691	1					
ANR	6608763	CompoundStatement		18:2:276:292	6608691	3					
ANR	6608764	IdentifierDeclStatement	const char * input = * ptr ;	165:2:5055:5079	6608691	0	True				
ANR	6608765	IdentifierDecl	* input = * ptr		6608691	0					
ANR	6608766	IdentifierDeclType	const char *		6608691	0					
ANR	6608767	Identifier	input		6608691	1					
ANR	6608768	AssignmentExpression	* input = * ptr		6608691	2		=			
ANR	6608769	Identifier	input		6608691	0					
ANR	6608770	UnaryOperationExpression	* ptr		6608691	1					
ANR	6608771	UnaryOperator	*		6608691	0					
ANR	6608772	Identifier	ptr		6608691	1					
ANR	6608773	IdentifierDeclStatement	const char * check = list [ i ] ;	166:2:5083:5110	6608691	1	True				
ANR	6608774	IdentifierDecl	* check = list [ i ]		6608691	0					
ANR	6608775	IdentifierDeclType	const char *		6608691	0					
ANR	6608776	Identifier	check		6608691	1					
ANR	6608777	AssignmentExpression	* check = list [ i ]		6608691	2		=			
ANR	6608778	Identifier	check		6608691	0					
ANR	6608779	ArrayIndexing	list [ i ]		6608691	1					
ANR	6608780	Identifier	list		6608691	0					
ANR	6608781	Identifier	i		6608691	1					
ANR	6608782	IdentifierDeclStatement	int had_expr = 0 ;	167:2:5114:5130	6608691	2	True				
ANR	6608783	IdentifierDecl	had_expr = 0		6608691	0					
ANR	6608784	IdentifierDeclType	int		6608691	0					
ANR	6608785	Identifier	had_expr		6608691	1					
ANR	6608786	AssignmentExpression	had_expr = 0		6608691	2		=			
ANR	6608787	Identifier	had_expr		6608691	0					
ANR	6608788	PrimaryExpression	0		6608691	1					
ANR	6608789	IfStatement	if ( ! list [ i ] [ 0 ] )		6608691	3					
ANR	6608790	Condition	! list [ i ] [ 0 ]	168:6:5138:5148	6608691	0	True				
ANR	6608791	UnaryOperationExpression	! list [ i ] [ 0 ]		6608691	0					
ANR	6608792	UnaryOperator	!		6608691	0					
ANR	6608793	ArrayIndexing	list [ i ] [ 0 ]		6608691	1					
ANR	6608794	ArrayIndexing	list [ i ]		6608691	0					
ANR	6608795	Identifier	list		6608691	0					
ANR	6608796	Identifier	i		6608691	1					
ANR	6608797	PrimaryExpression	0		6608691	1					
ANR	6608798	CompoundStatement		19:19:313:313	6608691	1					
ANR	6608799	ContinueStatement	continue ;	169:3:5156:5164	6608691	0	True				
ANR	6608800	WhileStatement	while ( * check )		6608691	4					
ANR	6608801	Condition	* check	171:9:5179:5184	6608691	0	True				
ANR	6608802	UnaryOperationExpression	* check		6608691	0					
ANR	6608803	UnaryOperator	*		6608691	0					
ANR	6608804	Identifier	check		6608691	1					
ANR	6608805	CompoundStatement		22:17:349:349	6608691	1					
ANR	6608806	IfStatement	if ( * check == ' ' )		6608691	0					
ANR	6608807	Condition	* check == ' '	172:7:5196:5208	6608691	0	True				
ANR	6608808	EqualityExpression	* check == ' '		6608691	0		==			
ANR	6608809	UnaryOperationExpression	* check		6608691	0					
ANR	6608810	UnaryOperator	*		6608691	0					
ANR	6608811	Identifier	check		6608691	1					
ANR	6608812	PrimaryExpression	' '		6608691	1					
ANR	6608813	CompoundStatement		23:22:373:373	6608691	1					
ANR	6608814	ExpressionStatement	input = delspc ( input )	173:4:5217:5239	6608691	0	True				
ANR	6608815	AssignmentExpression	input = delspc ( input )		6608691	0		=			
ANR	6608816	Identifier	input		6608691	0					
ANR	6608817	CallExpression	delspc ( input )		6608691	1					
ANR	6608818	Callee	delspc		6608691	0					
ANR	6608819	Identifier	delspc		6608691	0					
ANR	6608820	ArgumentList	input		6608691	1					
ANR	6608821	Argument	input		6608691	0					
ANR	6608822	Identifier	input		6608691	0					
ANR	6608823	ElseStatement	else		6608691	0					
ANR	6608824	IfStatement	if ( * check == '*' )		6608691	0					
ANR	6608825	Condition	* check == '*'	174:14:5255:5267	6608691	0	True				
ANR	6608826	EqualityExpression	* check == '*'		6608691	0		==			
ANR	6608827	UnaryOperationExpression	* check		6608691	0					
ANR	6608828	UnaryOperator	*		6608691	0					
ANR	6608829	Identifier	check		6608691	1					
ANR	6608830	PrimaryExpression	'*'		6608691	1					
ANR	6608831	CompoundStatement		25:29:432:432	6608691	1					
ANR	6608832	ExpressionStatement	* expr = input	175:4:5276:5289	6608691	0	True				
ANR	6608833	AssignmentExpression	* expr = input		6608691	0		=			
ANR	6608834	UnaryOperationExpression	* expr		6608691	0					
ANR	6608835	UnaryOperator	*		6608691	0					
ANR	6608836	Identifier	expr		6608691	1					
ANR	6608837	Identifier	input		6608691	1					
ANR	6608838	ExpressionStatement	mem_delimiter = check [ 1 ]	176:4:5295:5319	6608691	1	True				
ANR	6608839	AssignmentExpression	mem_delimiter = check [ 1 ]		6608691	0		=			
ANR	6608840	Identifier	mem_delimiter		6608691	0					
ANR	6608841	ArrayIndexing	check [ 1 ]		6608691	1					
ANR	6608842	Identifier	check		6608691	0					
ANR	6608843	PrimaryExpression	1		6608691	1					
ANR	6608844	ExpressionStatement	"rd_expr ( & input , mem_delimiter , NULL , sp , 0 )"	177:4:5325:5369	6608691	2	True				
ANR	6608845	CallExpression	"rd_expr ( & input , mem_delimiter , NULL , sp , 0 )"		6608691	0					
ANR	6608846	Callee	rd_expr		6608691	0					
ANR	6608847	Identifier	rd_expr		6608691	0					
ANR	6608848	ArgumentList	& input		6608691	1					
ANR	6608849	Argument	& input		6608691	0					
ANR	6608850	UnaryOperationExpression	& input		6608691	0					
ANR	6608851	UnaryOperator	&		6608691	0					
ANR	6608852	Identifier	input		6608691	1					
ANR	6608853	Argument	mem_delimiter		6608691	1					
ANR	6608854	Identifier	mem_delimiter		6608691	0					
ANR	6608855	Argument	NULL		6608691	2					
ANR	6608856	Identifier	NULL		6608691	0					
ANR	6608857	Argument	sp		6608691	3					
ANR	6608858	Identifier	sp		6608691	0					
ANR	6608859	Argument	0		6608691	4					
ANR	6608860	PrimaryExpression	0		6608691	0					
ANR	6608861	ExpressionStatement	had_expr = 1	178:4:5375:5387	6608691	3	True				
ANR	6608862	AssignmentExpression	had_expr = 1		6608691	0		=			
ANR	6608863	Identifier	had_expr		6608691	0					
ANR	6608864	PrimaryExpression	1		6608691	1					
ANR	6608865	ElseStatement	else		6608691	0					
ANR	6608866	IfStatement	if ( * check == '+' )		6608691	0					
ANR	6608867	Condition	* check == '+'	179:14:5403:5415	6608691	0	True				
ANR	6608868	EqualityExpression	* check == '+'		6608691	0		==			
ANR	6608869	UnaryOperationExpression	* check		6608691	0					
ANR	6608870	UnaryOperator	*		6608691	0					
ANR	6608871	Identifier	check		6608691	1					
ANR	6608872	PrimaryExpression	'+'		6608691	1					
ANR	6608873	CompoundStatement		30:29:580:580	6608691	1					
ANR	6608874	IfStatement	if ( * input == '+' || * input == '-' )		6608691	0					
ANR	6608875	Condition	* input == '+' || * input == '-'	180:8:5428:5457	6608691	0	True				
ANR	6608876	OrExpression	* input == '+' || * input == '-'		6608691	0		||			
ANR	6608877	EqualityExpression	* input == '+'		6608691	0		==			
ANR	6608878	UnaryOperationExpression	* input		6608691	0					
ANR	6608879	UnaryOperator	*		6608691	0					
ANR	6608880	Identifier	input		6608691	1					
ANR	6608881	PrimaryExpression	'+'		6608691	1					
ANR	6608882	EqualityExpression	* input == '-'		6608691	1		==			
ANR	6608883	UnaryOperationExpression	* input		6608691	0					
ANR	6608884	UnaryOperator	*		6608691	0					
ANR	6608885	Identifier	input		6608691	1					
ANR	6608886	PrimaryExpression	'-'		6608691	1					
ANR	6608887	CompoundStatement		31:40:622:622	6608691	1					
ANR	6608888	ExpressionStatement	* expr = input	181:5:5467:5480	6608691	0	True				
ANR	6608889	AssignmentExpression	* expr = input		6608691	0		=			
ANR	6608890	UnaryOperationExpression	* expr		6608691	0					
ANR	6608891	UnaryOperator	*		6608691	0					
ANR	6608892	Identifier	expr		6608691	1					
ANR	6608893	Identifier	input		6608691	1					
ANR	6608894	ExpressionStatement	mem_delimiter = check [ 1 ]	182:5:5487:5511	6608691	1	True				
ANR	6608895	AssignmentExpression	mem_delimiter = check [ 1 ]		6608691	0		=			
ANR	6608896	Identifier	mem_delimiter		6608691	0					
ANR	6608897	ArrayIndexing	check [ 1 ]		6608691	1					
ANR	6608898	Identifier	check		6608691	0					
ANR	6608899	PrimaryExpression	1		6608691	1					
ANR	6608900	ExpressionStatement	"rd_expr ( & input , mem_delimiter , NULL , sp , 0 )"	183:5:5518:5562	6608691	2	True				
ANR	6608901	CallExpression	"rd_expr ( & input , mem_delimiter , NULL , sp , 0 )"		6608691	0					
ANR	6608902	Callee	rd_expr		6608691	0					
ANR	6608903	Identifier	rd_expr		6608691	0					
ANR	6608904	ArgumentList	& input		6608691	1					
ANR	6608905	Argument	& input		6608691	0					
ANR	6608906	UnaryOperationExpression	& input		6608691	0					
ANR	6608907	UnaryOperator	&		6608691	0					
ANR	6608908	Identifier	input		6608691	1					
ANR	6608909	Argument	mem_delimiter		6608691	1					
ANR	6608910	Identifier	mem_delimiter		6608691	0					
ANR	6608911	Argument	NULL		6608691	2					
ANR	6608912	Identifier	NULL		6608691	0					
ANR	6608913	Argument	sp		6608691	3					
ANR	6608914	Identifier	sp		6608691	0					
ANR	6608915	Argument	0		6608691	4					
ANR	6608916	PrimaryExpression	0		6608691	0					
ANR	6608917	ElseStatement	else		6608691	0					
ANR	6608918	IfStatement	if ( * check == * input || ( * check >= 'a' && * check <= 'z' && * check - 'a' + 'A' == * input ) )		6608691	0					
ANR	6608919	Condition	* check == * input || ( * check >= 'a' && * check <= 'z' && * check - 'a' + 'A' == * input )	185:14:5584:5674	6608691	0	True				
ANR	6608920	OrExpression	* check == * input || ( * check >= 'a' && * check <= 'z' && * check - 'a' + 'A' == * input )		6608691	0		||			
ANR	6608921	EqualityExpression	* check == * input		6608691	0		==			
ANR	6608922	UnaryOperationExpression	* check		6608691	0					
ANR	6608923	UnaryOperator	*		6608691	0					
ANR	6608924	Identifier	check		6608691	1					
ANR	6608925	UnaryOperationExpression	* input		6608691	1					
ANR	6608926	UnaryOperator	*		6608691	0					
ANR	6608927	Identifier	input		6608691	1					
ANR	6608928	AndExpression	* check >= 'a' && * check <= 'z' && * check - 'a' + 'A' == * input		6608691	1		&&			
ANR	6608929	RelationalExpression	* check >= 'a'		6608691	0		>=			
ANR	6608930	UnaryOperationExpression	* check		6608691	0					
ANR	6608931	UnaryOperator	*		6608691	0					
ANR	6608932	Identifier	check		6608691	1					
ANR	6608933	PrimaryExpression	'a'		6608691	1					
ANR	6608934	AndExpression	* check <= 'z' && * check - 'a' + 'A' == * input		6608691	1		&&			
ANR	6608935	RelationalExpression	* check <= 'z'		6608691	0		<=			
ANR	6608936	UnaryOperationExpression	* check		6608691	0					
ANR	6608937	UnaryOperator	*		6608691	0					
ANR	6608938	Identifier	check		6608691	1					
ANR	6608939	PrimaryExpression	'z'		6608691	1					
ANR	6608940	EqualityExpression	* check - 'a' + 'A' == * input		6608691	1		==			
ANR	6608941	AdditiveExpression	* check - 'a' + 'A'		6608691	0		-			
ANR	6608942	UnaryOperationExpression	* check		6608691	0					
ANR	6608943	UnaryOperator	*		6608691	0					
ANR	6608944	Identifier	check		6608691	1					
ANR	6608945	AdditiveExpression	'a' + 'A'		6608691	1		+			
ANR	6608946	PrimaryExpression	'a'		6608691	0					
ANR	6608947	PrimaryExpression	'A'		6608691	1					
ANR	6608948	UnaryOperationExpression	* input		6608691	1					
ANR	6608949	UnaryOperator	*		6608691	0					
ANR	6608950	Identifier	input		6608691	1					
ANR	6608951	CompoundStatement		37:41:839:839	6608691	1					
ANR	6608952	ExpressionStatement	++ input	187:4:5683:5690	6608691	0	True				
ANR	6608953	UnaryExpression	++ input		6608691	0					
ANR	6608954	IncDec	++		6608691	0					
ANR	6608955	Identifier	input		6608691	1					
ANR	6608956	ElseStatement	else		6608691	0					
ANR	6608957	CompoundStatement		39:10:864:864	6608691	0					
ANR	6608958	BreakStatement	break ;	189:4:5708:5713	6608691	0	True				
ANR	6608959	ExpressionStatement	++ check	192:3:5724:5731	6608691	1	True				
ANR	6608960	UnaryExpression	++ check		6608691	0					
ANR	6608961	IncDec	++		6608691	0					
ANR	6608962	Identifier	check		6608691	1					
ANR	6608963	IfStatement	if ( * check || ( isalnum ( ( const unsigned char ) check [ - 1 ] ) && isalnum ( ( const unsigned char ) input [ 0 ] ) ) )		6608691	5					
ANR	6608964	Condition	* check || ( isalnum ( ( const unsigned char ) check [ - 1 ] ) && isalnum ( ( const unsigned char ) input [ 0 ] ) )	194:6:5743:5839	6608691	0	True				
ANR	6608965	OrExpression	* check || ( isalnum ( ( const unsigned char ) check [ - 1 ] ) && isalnum ( ( const unsigned char ) input [ 0 ] ) )		6608691	0		||			
ANR	6608966	UnaryOperationExpression	* check		6608691	0					
ANR	6608967	UnaryOperator	*		6608691	0					
ANR	6608968	Identifier	check		6608691	1					
ANR	6608969	AndExpression	isalnum ( ( const unsigned char ) check [ - 1 ] ) && isalnum ( ( const unsigned char ) input [ 0 ] )		6608691	1		&&			
ANR	6608970	CallExpression	isalnum ( ( const unsigned char ) check [ - 1 ] )		6608691	0					
ANR	6608971	Callee	isalnum		6608691	0					
ANR	6608972	Identifier	isalnum		6608691	0					
ANR	6608973	ArgumentList	( const unsigned char ) check [ - 1 ]		6608691	1					
ANR	6608974	Argument	( const unsigned char ) check [ - 1 ]		6608691	0					
ANR	6608975	CastExpression	( const unsigned char ) check [ - 1 ]		6608691	0					
ANR	6608976	CastTarget	const unsigned char		6608691	0					
ANR	6608977	ArrayIndexing	check [ - 1 ]		6608691	1					
ANR	6608978	Identifier	check		6608691	0					
ANR	6608979	UnaryOperationExpression	- 1		6608691	1					
ANR	6608980	UnaryOperator	-		6608691	0					
ANR	6608981	PrimaryExpression	1		6608691	1					
ANR	6608982	CallExpression	isalnum ( ( const unsigned char ) input [ 0 ] )		6608691	1					
ANR	6608983	Callee	isalnum		6608691	0					
ANR	6608984	Identifier	isalnum		6608691	0					
ANR	6608985	ArgumentList	( const unsigned char ) input [ 0 ]		6608691	1					
ANR	6608986	Argument	( const unsigned char ) input [ 0 ]		6608691	0					
ANR	6608987	CastExpression	( const unsigned char ) input [ 0 ]		6608691	0					
ANR	6608988	CastTarget	const unsigned char		6608691	0					
ANR	6608989	ArrayIndexing	input [ 0 ]		6608691	1					
ANR	6608990	Identifier	input		6608691	0					
ANR	6608991	PrimaryExpression	0		6608691	1					
ANR	6608992	CompoundStatement		45:105:1004:1004	6608691	1					
ANR	6608993	ContinueStatement	continue ;	195:3:5847:5855	6608691	0	True				
ANR	6608994	IfStatement	if ( had_expr )		6608691	6					
ANR	6608995	Condition	had_expr	197:6:5867:5874	6608691	0	True				
ANR	6608996	Identifier	had_expr		6608691	0					
ANR	6608997	CompoundStatement		48:16:1039:1039	6608691	1					
ANR	6608998	ExpressionStatement	input = delspc ( input )	198:3:5882:5904	6608691	0	True				
ANR	6608999	AssignmentExpression	input = delspc ( input )		6608691	0		=			
ANR	6609000	Identifier	input		6608691	0					
ANR	6609001	CallExpression	delspc ( input )		6608691	1					
ANR	6609002	Callee	delspc		6608691	0					
ANR	6609003	Identifier	delspc		6608691	0					
ANR	6609004	ArgumentList	input		6608691	1					
ANR	6609005	Argument	input		6608691	0					
ANR	6609006	Identifier	input		6608691	0					
ANR	6609007	IfStatement	"if ( * input && * input != ',' )"		6608691	1					
ANR	6609008	Condition	"* input && * input != ','"	199:7:5913:5935	6608691	0	True				
ANR	6609009	AndExpression	"* input && * input != ','"		6608691	0		&&			
ANR	6609010	UnaryOperationExpression	* input		6608691	0					
ANR	6609011	UnaryOperator	*		6608691	0					
ANR	6609012	Identifier	input		6608691	1					
ANR	6609013	EqualityExpression	"* input != ','"		6608691	1		!=			
ANR	6609014	UnaryOperationExpression	* input		6608691	0					
ANR	6609015	UnaryOperator	*		6608691	0					
ANR	6609016	Identifier	input		6608691	1					
ANR	6609017	PrimaryExpression	"','"		6608691	1					
ANR	6609018	CompoundStatement		50:32:1100:1100	6608691	1					
ANR	6609019	ContinueStatement	continue ;	200:4:5944:5952	6608691	0	True				
ANR	6609020	ExpressionStatement	* ptr = input	203:2:5965:5977	6608691	7	True				
ANR	6609021	AssignmentExpression	* ptr = input		6608691	0		=			
ANR	6609022	UnaryOperationExpression	* ptr		6608691	0					
ANR	6609023	UnaryOperator	*		6608691	0					
ANR	6609024	Identifier	ptr		6608691	1					
ANR	6609025	Identifier	input		6608691	1					
ANR	6609026	ExpressionStatement	comma ++	204:2:5981:5988	6608691	8	True				
ANR	6609027	PostIncDecOperationExpression	comma ++		6608691	0					
ANR	6609028	Identifier	comma		6608691	0					
ANR	6609029	IncDec	++		6608691	1					
ANR	6609030	ReturnStatement	return i + 1 ;	205:2:5992:6004	6608691	9	True				
ANR	6609031	AdditiveExpression	i + 1		6608691	0		+			
ANR	6609032	Identifier	i		6608691	0					
ANR	6609033	PrimaryExpression	1		6608691	1					
ANR	6609034	ReturnStatement	return 0 ;	208:1:6080:6088	6608691	5	True				
ANR	6609035	PrimaryExpression	0		6608691	0					
ANR	6609036	ReturnType	static int		6608691	1					
ANR	6609037	Identifier	indx		6608691	2					
ANR	6609038	ParameterList	"const char * * ptr , const char * * list , int error , const char * * expr"		6608691	3					
ANR	6609039	Parameter	const char * * ptr	150:16:4770:4785	6608691	0	True				
ANR	6609040	ParameterType	const char * *		6608691	0					
ANR	6609041	Identifier	ptr		6608691	1					
ANR	6609042	Parameter	const char * * list	150:34:4788:4804	6608691	1	True				
ANR	6609043	ParameterType	const char * *		6608691	0					
ANR	6609044	Identifier	list		6608691	1					
ANR	6609045	Parameter	int error	150:53:4807:4815	6608691	2	True				
ANR	6609046	ParameterType	int		6608691	0					
ANR	6609047	Identifier	error		6608691	1					
ANR	6609048	Parameter	const char * * expr	150:64:4818:4834	6608691	3	True				
ANR	6609049	ParameterType	const char * *		6608691	0					
ANR	6609050	Identifier	expr		6608691	1					
ANR	6609051	CFGEntryNode	ENTRY		6608691		True				
ANR	6609052	CFGExitNode	EXIT		6608691		True				
ANR	6609053	Symbol	* * ptr		6608691						
ANR	6609054	Symbol	* * i		6608691						
ANR	6609055	Symbol	NULL		6608691						
ANR	6609056	Symbol	isalnum		6608691						
ANR	6609057	Symbol	* input		6608691						
ANR	6609058	Symbol	i		6608691						
ANR	6609059	Symbol	check		6608691						
ANR	6609060	Symbol	list		6608691						
ANR	6609061	Symbol	error		6608691						
ANR	6609062	Symbol	had_expr		6608691						
ANR	6609063	Symbol	ptr		6608691						
ANR	6609064	Symbol	mem_delimiter		6608691						
ANR	6609065	Symbol	input		6608691						
ANR	6609066	Symbol	comma		6608691						
ANR	6609067	Symbol	* i		6608691						
ANR	6609068	Symbol	* * list		6608691						
ANR	6609069	Symbol	& input		6608691						
ANR	6609070	Symbol	* list		6608691						
ANR	6609071	Symbol	* expr		6608691						
ANR	6609072	Symbol	* check		6608691						
ANR	6609073	Symbol	* ptr		6608691						
ANR	6609074	Symbol	expr		6608691						
ANR	6609075	Symbol	delspc		6608691						
ANR	6609076	Symbol	sp		6608691						
ANR	6609077	Function	readcommand	212:0:6115:6194							
ANR	6609078	FunctionDef	readcommand (const char * * p)		6609077	0					
ANR	6609079	CompoundStatement		212:39:6154:6194	6609077	0					
ANR	6609080	ReturnStatement	"return indx ( p , mnemonics , 0 , NULL ) ;"	213:1:6157:6192	6609077	0	True				
ANR	6609081	CallExpression	"indx ( p , mnemonics , 0 , NULL )"		6609077	0					
ANR	6609082	Callee	indx		6609077	0					
ANR	6609083	Identifier	indx		6609077	0					
ANR	6609084	ArgumentList	p		6609077	1					
ANR	6609085	Argument	p		6609077	0					
ANR	6609086	Identifier	p		6609077	0					
ANR	6609087	Argument	mnemonics		6609077	1					
ANR	6609088	Identifier	mnemonics		6609077	0					
ANR	6609089	Argument	0		6609077	2					
ANR	6609090	PrimaryExpression	0		6609077	0					
ANR	6609091	Argument	NULL		6609077	3					
ANR	6609092	Identifier	NULL		6609077	0					
ANR	6609093	ReturnType	static int		6609077	1					
ANR	6609094	Identifier	readcommand		6609077	2					
ANR	6609095	ParameterList	const char * * p		6609077	3					
ANR	6609096	Parameter	const char * * p	212:23:6138:6151	6609077	0	True				
ANR	6609097	ParameterType	const char * *		6609077	0					
ANR	6609098	Identifier	p		6609077	1					
ANR	6609099	CFGEntryNode	ENTRY		6609077		True				
ANR	6609100	CFGExitNode	EXIT		6609077		True				
ANR	6609101	Symbol	p		6609077						
ANR	6609102	Symbol	NULL		6609077						
ANR	6609103	Symbol	indx		6609077						
ANR	6609104	Symbol	mnemonics		6609077						
ANR	6609105	Function	readlabel	217:0:6259:7509							
ANR	6609106	FunctionDef	"readlabel (const char * * p , int store)"		6609105	0					
ANR	6609107	CompoundStatement		217:49:6308:7509	6609105	0					
ANR	6609108	IdentifierDeclStatement	"const char * c , * d , * pos , * dummy ;"	218:1:6311:6342	6609105	0	True				
ANR	6609109	IdentifierDecl	* c		6609105	0					
ANR	6609110	IdentifierDeclType	const char *		6609105	0					
ANR	6609111	Identifier	c		6609105	1					
ANR	6609112	IdentifierDecl	* d		6609105	1					
ANR	6609113	IdentifierDeclType	const char *		6609105	0					
ANR	6609114	Identifier	d		6609105	1					
ANR	6609115	IdentifierDecl	* pos		6609105	2					
ANR	6609116	IdentifierDeclType	const char *		6609105	0					
ANR	6609117	Identifier	pos		6609105	1					
ANR	6609118	IdentifierDecl	* dummy		6609105	3					
ANR	6609119	IdentifierDeclType	const char *		6609105	0					
ANR	6609120	Identifier	dummy		6609105	1					
ANR	6609121	IdentifierDeclStatement	"int i , j ;"	219:1:6345:6353	6609105	1	True				
ANR	6609122	IdentifierDecl	i		6609105	0					
ANR	6609123	IdentifierDeclType	int		6609105	0					
ANR	6609124	Identifier	i		6609105	1					
ANR	6609125	IdentifierDecl	j		6609105	1					
ANR	6609126	IdentifierDeclType	int		6609105	0					
ANR	6609127	Identifier	j		6609105	1					
ANR	6609128	IdentifierDeclStatement	"struct label * buf , * previous ;"	220:1:6356:6384	6609105	2	True				
ANR	6609129	IdentifierDecl	* buf		6609105	0					
ANR	6609130	IdentifierDeclType	struct label *		6609105	0					
ANR	6609131	Identifier	buf		6609105	1					
ANR	6609132	IdentifierDecl	* previous		6609105	1					
ANR	6609133	IdentifierDeclType	struct label *		6609105	0					
ANR	6609134	Identifier	previous		6609105	1					
ANR	6609135	ForStatement	for ( d = * p ; * d && * d != ';' ; ++ d )		6609105	3					
ANR	6609136	ForInit	d = * p ;	221:6:6392:6398	6609105	0	True				
ANR	6609137	AssignmentExpression	d = * p		6609105	0		=			
ANR	6609138	Identifier	d		6609105	0					
ANR	6609139	UnaryOperationExpression	* p		6609105	1					
ANR	6609140	UnaryOperator	*		6609105	0					
ANR	6609141	Identifier	p		6609105	1					
ANR	6609142	Condition	* d && * d != ';'	221:14:6400:6414	6609105	1	True				
ANR	6609143	AndExpression	* d && * d != ';'		6609105	0		&&			
ANR	6609144	UnaryOperationExpression	* d		6609105	0					
ANR	6609145	UnaryOperator	*		6609105	0					
ANR	6609146	Identifier	d		6609105	1					
ANR	6609147	EqualityExpression	* d != ';'		6609105	1		!=			
ANR	6609148	UnaryOperationExpression	* d		6609105	0					
ANR	6609149	UnaryOperator	*		6609105	0					
ANR	6609150	Identifier	d		6609105	1					
ANR	6609151	PrimaryExpression	';'		6609105	1					
ANR	6609152	UnaryExpression	++ d	221:31:6417:6419	6609105	2	True				
ANR	6609153	IncDec	++		6609105	0					
ANR	6609154	Identifier	d		6609105	1					
ANR	6609155	CompoundStatement		5:36:113:113	6609105	3					
ANR	6609156	ExpressionStatement		222:2:6426:6426	6609105	0	True				
ANR	6609157	ForStatement	"for ( c = * p ; ! strchr ( "" \\r\\n\\t"" , * c ) && c < d ; ++ c )"		6609105	4					
ANR	6609158	ForInit	c = * p ;	224:6:6437:6443	6609105	0	True				
ANR	6609159	AssignmentExpression	c = * p		6609105	0		=			
ANR	6609160	Identifier	c		6609105	0					
ANR	6609161	UnaryOperationExpression	* p		6609105	1					
ANR	6609162	UnaryOperator	*		6609105	0					
ANR	6609163	Identifier	p		6609105	1					
ANR	6609164	Condition	"! strchr ( "" \\r\\n\\t"" , * c ) && c < d"	224:14:6445:6476	6609105	1	True				
ANR	6609165	AndExpression	"! strchr ( "" \\r\\n\\t"" , * c ) && c < d"		6609105	0		&&			
ANR	6609166	UnaryOperationExpression	"! strchr ( "" \\r\\n\\t"" , * c )"		6609105	0					
ANR	6609167	UnaryOperator	!		6609105	0					
ANR	6609168	CallExpression	"strchr ( "" \\r\\n\\t"" , * c )"		6609105	1					
ANR	6609169	Callee	strchr		6609105	0					
ANR	6609170	Identifier	strchr		6609105	0					
ANR	6609171	ArgumentList	""" \\r\\n\\t"""		6609105	1					
ANR	6609172	Argument	""" \\r\\n\\t"""		6609105	0					
ANR	6609173	PrimaryExpression	""" \\r\\n\\t"""		6609105	0					
ANR	6609174	Argument	* c		6609105	1					
ANR	6609175	UnaryOperationExpression	* c		6609105	0					
ANR	6609176	UnaryOperator	*		6609105	0					
ANR	6609177	Identifier	c		6609105	1					
ANR	6609178	RelationalExpression	c < d		6609105	1		<			
ANR	6609179	Identifier	c		6609105	0					
ANR	6609180	Identifier	d		6609105	1					
ANR	6609181	UnaryExpression	++ c	224:48:6479:6481	6609105	2	True				
ANR	6609182	IncDec	++		6609105	0					
ANR	6609183	Identifier	c		6609105	1					
ANR	6609184	CompoundStatement		8:53:175:175	6609105	3					
ANR	6609185	ExpressionStatement		225:2:6488:6488	6609105	0	True				
ANR	6609186	ExpressionStatement	"pos = strchr ( * p , ':' )"	227:1:6494:6516	6609105	5	True				
ANR	6609187	AssignmentExpression	"pos = strchr ( * p , ':' )"		6609105	0		=			
ANR	6609188	Identifier	pos		6609105	0					
ANR	6609189	CallExpression	"strchr ( * p , ':' )"		6609105	1					
ANR	6609190	Callee	strchr		6609105	0					
ANR	6609191	Identifier	strchr		6609105	0					
ANR	6609192	ArgumentList	* p		6609105	1					
ANR	6609193	Argument	* p		6609105	0					
ANR	6609194	UnaryOperationExpression	* p		6609105	0					
ANR	6609195	UnaryOperator	*		6609105	0					
ANR	6609196	Identifier	p		6609105	1					
ANR	6609197	Argument	':'		6609105	1					
ANR	6609198	PrimaryExpression	':'		6609105	0					
ANR	6609199	IfStatement	if ( ! pos || pos >= c )		6609105	6					
ANR	6609200	Condition	! pos || pos >= c	228:5:6523:6538	6609105	0	True				
ANR	6609201	OrExpression	! pos || pos >= c		6609105	0		||			
ANR	6609202	UnaryOperationExpression	! pos		6609105	0					
ANR	6609203	UnaryOperator	!		6609105	0					
ANR	6609204	Identifier	pos		6609105	1					
ANR	6609205	RelationalExpression	pos >= c		6609105	1		>=			
ANR	6609206	Identifier	pos		6609105	0					
ANR	6609207	Identifier	c		6609105	1					
ANR	6609208	CompoundStatement		12:23:232:232	6609105	1					
ANR	6609209	ReturnStatement	return ;	229:2:6545:6551	6609105	0	True				
ANR	6609210	IfStatement	if ( pos == * p )		6609105	7					
ANR	6609211	Condition	pos == * p	231:5:6561:6569	6609105	0	True				
ANR	6609212	EqualityExpression	pos == * p		6609105	0		==			
ANR	6609213	Identifier	pos		6609105	0					
ANR	6609214	UnaryOperationExpression	* p		6609105	1					
ANR	6609215	UnaryOperator	*		6609105	0					
ANR	6609216	Identifier	p		6609105	1					
ANR	6609217	CompoundStatement		15:16:263:263	6609105	1					
ANR	6609218	ExpressionStatement	"eprintf ( ""`:' found without a label"" )"	232:2:6576:6613	6609105	0	True				
ANR	6609219	CallExpression	"eprintf ( ""`:' found without a label"" )"		6609105	0					
ANR	6609220	Callee	eprintf		6609105	0					
ANR	6609221	Identifier	eprintf		6609105	0					
ANR	6609222	ArgumentList	"""`:' found without a label"""		6609105	1					
ANR	6609223	Argument	"""`:' found without a label"""		6609105	0					
ANR	6609224	PrimaryExpression	"""`:' found without a label"""		6609105	0					
ANR	6609225	ReturnStatement	return ;	233:2:6617:6623	6609105	1	True				
ANR	6609226	IfStatement	if ( ! store )		6609105	8					
ANR	6609227	Condition	! store	235:5:6633:6638	6609105	0	True				
ANR	6609228	UnaryOperationExpression	! store		6609105	0					
ANR	6609229	UnaryOperator	!		6609105	0					
ANR	6609230	Identifier	store		6609105	1					
ANR	6609231	CompoundStatement		19:13:332:332	6609105	1					
ANR	6609232	ExpressionStatement	* p = pos + 1	236:2:6645:6657	6609105	0	True				
ANR	6609233	AssignmentExpression	* p = pos + 1		6609105	0		=			
ANR	6609234	UnaryOperationExpression	* p		6609105	0					
ANR	6609235	UnaryOperator	*		6609105	0					
ANR	6609236	Identifier	p		6609105	1					
ANR	6609237	AdditiveExpression	pos + 1		6609105	1		+			
ANR	6609238	Identifier	pos		6609105	0					
ANR	6609239	PrimaryExpression	1		6609105	1					
ANR	6609240	ReturnStatement	return ;	237:2:6661:6667	6609105	1	True				
ANR	6609241	ExpressionStatement	c = pos + 1	239:1:6673:6684	6609105	9	True				
ANR	6609242	AssignmentExpression	c = pos + 1		6609105	0		=			
ANR	6609243	Identifier	c		6609105	0					
ANR	6609244	AdditiveExpression	pos + 1		6609105	1		+			
ANR	6609245	Identifier	pos		6609105	0					
ANR	6609246	PrimaryExpression	1		6609105	1					
ANR	6609247	ExpressionStatement	dummy = * p	240:1:6687:6697	6609105	10	True				
ANR	6609248	AssignmentExpression	dummy = * p		6609105	0		=			
ANR	6609249	Identifier	dummy		6609105	0					
ANR	6609250	UnaryOperationExpression	* p		6609105	1					
ANR	6609251	UnaryOperator	*		6609105	0					
ANR	6609252	Identifier	p		6609105	1					
ANR	6609253	ExpressionStatement	"j = rd_label ( & dummy , & i , & previous , sp , 0 )"	241:1:6700:6743	6609105	11	True				
ANR	6609254	AssignmentExpression	"j = rd_label ( & dummy , & i , & previous , sp , 0 )"		6609105	0		=			
ANR	6609255	Identifier	j		6609105	0					
ANR	6609256	CallExpression	"rd_label ( & dummy , & i , & previous , sp , 0 )"		6609105	1					
ANR	6609257	Callee	rd_label		6609105	0					
ANR	6609258	Identifier	rd_label		6609105	0					
ANR	6609259	ArgumentList	& dummy		6609105	1					
ANR	6609260	Argument	& dummy		6609105	0					
ANR	6609261	UnaryOperationExpression	& dummy		6609105	0					
ANR	6609262	UnaryOperator	&		6609105	0					
ANR	6609263	Identifier	dummy		6609105	1					
ANR	6609264	Argument	& i		6609105	1					
ANR	6609265	UnaryOperationExpression	& i		6609105	0					
ANR	6609266	UnaryOperator	&		6609105	0					
ANR	6609267	Identifier	i		6609105	1					
ANR	6609268	Argument	& previous		6609105	2					
ANR	6609269	UnaryOperationExpression	& previous		6609105	0					
ANR	6609270	UnaryOperator	&		6609105	0					
ANR	6609271	Identifier	previous		6609105	1					
ANR	6609272	Argument	sp		6609105	3					
ANR	6609273	Identifier	sp		6609105	0					
ANR	6609274	Argument	0		6609105	4					
ANR	6609275	PrimaryExpression	0		6609105	0					
ANR	6609276	IfStatement	if ( i || j )		6609105	12					
ANR	6609277	Condition	i || j	242:5:6750:6755	6609105	0	True				
ANR	6609278	OrExpression	i || j		6609105	0		||			
ANR	6609279	Identifier	i		6609105	0					
ANR	6609280	Identifier	j		6609105	1					
ANR	6609281	CompoundStatement		26:13:449:449	6609105	1					
ANR	6609282	ExpressionStatement	"eprintf ( ""duplicate definition of label %s\\n"" , * p )"	243:2:6762:6812	6609105	0	True				
ANR	6609283	CallExpression	"eprintf ( ""duplicate definition of label %s\\n"" , * p )"		6609105	0					
ANR	6609284	Callee	eprintf		6609105	0					
ANR	6609285	Identifier	eprintf		6609105	0					
ANR	6609286	ArgumentList	"""duplicate definition of label %s\\n"""		6609105	1					
ANR	6609287	Argument	"""duplicate definition of label %s\\n"""		6609105	0					
ANR	6609288	PrimaryExpression	"""duplicate definition of label %s\\n"""		6609105	0					
ANR	6609289	Argument	* p		6609105	1					
ANR	6609290	UnaryOperationExpression	* p		6609105	0					
ANR	6609291	UnaryOperator	*		6609105	0					
ANR	6609292	Identifier	p		6609105	1					
ANR	6609293	ExpressionStatement	* p = c	244:2:6816:6822	6609105	1	True				
ANR	6609294	AssignmentExpression	* p = c		6609105	0		=			
ANR	6609295	UnaryOperationExpression	* p		6609105	0					
ANR	6609296	UnaryOperator	*		6609105	0					
ANR	6609297	Identifier	p		6609105	1					
ANR	6609298	Identifier	c		6609105	1					
ANR	6609299	ReturnStatement	return ;	245:2:6826:6832	6609105	2	True				
ANR	6609300	IfStatement	if ( ! ( buf = malloc ( sizeof ( struct label ) + c - * p ) ) )		6609105	13					
ANR	6609301	Condition	! ( buf = malloc ( sizeof ( struct label ) + c - * p ) )	247:5:6842:6889	6609105	0	True				
ANR	6609302	UnaryOperationExpression	! ( buf = malloc ( sizeof ( struct label ) + c - * p ) )		6609105	0					
ANR	6609303	UnaryOperator	!		6609105	0					
ANR	6609304	AssignmentExpression	buf = malloc ( sizeof ( struct label ) + c - * p )		6609105	1		=			
ANR	6609305	Identifier	buf		6609105	0					
ANR	6609306	CallExpression	malloc ( sizeof ( struct label ) + c - * p )		6609105	1					
ANR	6609307	Callee	malloc		6609105	0					
ANR	6609308	Identifier	malloc		6609105	0					
ANR	6609309	ArgumentList	sizeof ( struct label ) + c - * p		6609105	1					
ANR	6609310	Argument	sizeof ( struct label ) + c - * p		6609105	0					
ANR	6609311	AdditiveExpression	sizeof ( struct label ) + c - * p		6609105	0		+			
ANR	6609312	SizeofExpression	sizeof ( struct label )		6609105	0					
ANR	6609313	Sizeof	sizeof		6609105	0					
ANR	6609314	SizeofOperand	struct label		6609105	1					
ANR	6609315	AdditiveExpression	c - * p		6609105	1		-			
ANR	6609316	Identifier	c		6609105	0					
ANR	6609317	UnaryOperationExpression	* p		6609105	1					
ANR	6609318	UnaryOperator	*		6609105	0					
ANR	6609319	Identifier	p		6609105	1					
ANR	6609320	CompoundStatement		31:55:583:583	6609105	1					
ANR	6609321	ExpressionStatement	"eprintf ( ""not enough memory to store label %s\\n"" , * p )"	248:2:6896:6949	6609105	0	True				
ANR	6609322	CallExpression	"eprintf ( ""not enough memory to store label %s\\n"" , * p )"		6609105	0					
ANR	6609323	Callee	eprintf		6609105	0					
ANR	6609324	Identifier	eprintf		6609105	0					
ANR	6609325	ArgumentList	"""not enough memory to store label %s\\n"""		6609105	1					
ANR	6609326	Argument	"""not enough memory to store label %s\\n"""		6609105	0					
ANR	6609327	PrimaryExpression	"""not enough memory to store label %s\\n"""		6609105	0					
ANR	6609328	Argument	* p		6609105	1					
ANR	6609329	UnaryOperationExpression	* p		6609105	0					
ANR	6609330	UnaryOperator	*		6609105	0					
ANR	6609331	Identifier	p		6609105	1					
ANR	6609332	ExpressionStatement	* p = c	250:2:6959:6965	6609105	1	True				
ANR	6609333	AssignmentExpression	* p = c		6609105	0		=			
ANR	6609334	UnaryOperationExpression	* p		6609105	0					
ANR	6609335	UnaryOperator	*		6609105	0					
ANR	6609336	Identifier	p		6609105	1					
ANR	6609337	Identifier	c		6609105	1					
ANR	6609338	ReturnStatement	return ;	251:2:6969:6975	6609105	2	True				
ANR	6609339	ExpressionStatement	"strncpy ( buf -> name , * p , c - * p - 1 )"	256:1:7085:7120	6609105	14	True				
ANR	6609340	CallExpression	"strncpy ( buf -> name , * p , c - * p - 1 )"		6609105	0					
ANR	6609341	Callee	strncpy		6609105	0					
ANR	6609342	Identifier	strncpy		6609105	0					
ANR	6609343	ArgumentList	buf -> name		6609105	1					
ANR	6609344	Argument	buf -> name		6609105	0					
ANR	6609345	PtrMemberAccess	buf -> name		6609105	0					
ANR	6609346	Identifier	buf		6609105	0					
ANR	6609347	Identifier	name		6609105	1					
ANR	6609348	Argument	* p		6609105	1					
ANR	6609349	UnaryOperationExpression	* p		6609105	0					
ANR	6609350	UnaryOperator	*		6609105	0					
ANR	6609351	Identifier	p		6609105	1					
ANR	6609352	Argument	c - * p - 1		6609105	2					
ANR	6609353	AdditiveExpression	c - * p - 1		6609105	0		-			
ANR	6609354	Identifier	c		6609105	0					
ANR	6609355	AdditiveExpression	* p - 1		6609105	1		-			
ANR	6609356	UnaryOperationExpression	* p		6609105	0					
ANR	6609357	UnaryOperator	*		6609105	0					
ANR	6609358	Identifier	p		6609105	1					
ANR	6609359	PrimaryExpression	1		6609105	1					
ANR	6609360	ExpressionStatement	buf -> name [ c - * p - 1 ] = 0	257:1:7123:7148	6609105	15	True				
ANR	6609361	AssignmentExpression	buf -> name [ c - * p - 1 ] = 0		6609105	0		=			
ANR	6609362	ArrayIndexing	buf -> name [ c - * p - 1 ]		6609105	0					
ANR	6609363	PtrMemberAccess	buf -> name		6609105	0					
ANR	6609364	Identifier	buf		6609105	0					
ANR	6609365	Identifier	name		6609105	1					
ANR	6609366	AdditiveExpression	c - * p - 1		6609105	1		-			
ANR	6609367	Identifier	c		6609105	0					
ANR	6609368	AdditiveExpression	* p - 1		6609105	1		-			
ANR	6609369	UnaryOperationExpression	* p		6609105	0					
ANR	6609370	UnaryOperator	*		6609105	0					
ANR	6609371	Identifier	p		6609105	1					
ANR	6609372	PrimaryExpression	1		6609105	1					
ANR	6609373	PrimaryExpression	0		6609105	1					
ANR	6609374	ExpressionStatement	* p = c	258:1:7151:7157	6609105	16	True				
ANR	6609375	AssignmentExpression	* p = c		6609105	0		=			
ANR	6609376	UnaryOperationExpression	* p		6609105	0					
ANR	6609377	UnaryOperator	*		6609105	0					
ANR	6609378	Identifier	p		6609105	1					
ANR	6609379	Identifier	c		6609105	1					
ANR	6609380	ExpressionStatement	buf -> value = addr	259:1:7160:7177	6609105	17	True				
ANR	6609381	AssignmentExpression	buf -> value = addr		6609105	0		=			
ANR	6609382	PtrMemberAccess	buf -> value		6609105	0					
ANR	6609383	Identifier	buf		6609105	0					
ANR	6609384	Identifier	value		6609105	1					
ANR	6609385	Identifier	addr		6609105	1					
ANR	6609386	IfStatement	if ( previous )		6609105	18					
ANR	6609387	Condition	previous	261:5:7205:7212	6609105	0	True				
ANR	6609388	Identifier	previous		6609105	0					
ANR	6609389	CompoundStatement		45:15:906:906	6609105	1					
ANR	6609390	ExpressionStatement	buf -> next = previous -> next	262:2:7219:7245	6609105	0	True				
ANR	6609391	AssignmentExpression	buf -> next = previous -> next		6609105	0		=			
ANR	6609392	PtrMemberAccess	buf -> next		6609105	0					
ANR	6609393	Identifier	buf		6609105	0					
ANR	6609394	Identifier	next		6609105	1					
ANR	6609395	PtrMemberAccess	previous -> next		6609105	1					
ANR	6609396	Identifier	previous		6609105	0					
ANR	6609397	Identifier	next		6609105	1					
ANR	6609398	ElseStatement	else		6609105	0					
ANR	6609399	CompoundStatement		47:8:946:946	6609105	0					
ANR	6609400	ExpressionStatement	buf -> next = NULL	264:2:7259:7275	6609105	0	True				
ANR	6609401	AssignmentExpression	buf -> next = NULL		6609105	0		=			
ANR	6609402	PtrMemberAccess	buf -> next		6609105	0					
ANR	6609403	Identifier	buf		6609105	0					
ANR	6609404	Identifier	next		6609105	1					
ANR	6609405	Identifier	NULL		6609105	1					
ANR	6609406	ExpressionStatement	buf -> prev = previous	266:1:7281:7301	6609105	19	True				
ANR	6609407	AssignmentExpression	buf -> prev = previous		6609105	0		=			
ANR	6609408	PtrMemberAccess	buf -> prev		6609105	0					
ANR	6609409	Identifier	buf		6609105	0					
ANR	6609410	Identifier	prev		6609105	1					
ANR	6609411	Identifier	previous		6609105	1					
ANR	6609412	ExpressionStatement	buf -> valid = 1	267:1:7304:7318	6609105	20	True				
ANR	6609413	AssignmentExpression	buf -> valid = 1		6609105	0		=			
ANR	6609414	PtrMemberAccess	buf -> valid		6609105	0					
ANR	6609415	Identifier	buf		6609105	0					
ANR	6609416	Identifier	valid		6609105	1					
ANR	6609417	PrimaryExpression	1		6609105	1					
ANR	6609418	ExpressionStatement	buf -> busy = 0	268:1:7321:7334	6609105	21	True				
ANR	6609419	AssignmentExpression	buf -> busy = 0		6609105	0		=			
ANR	6609420	PtrMemberAccess	buf -> busy		6609105	0					
ANR	6609421	Identifier	buf		6609105	0					
ANR	6609422	Identifier	busy		6609105	1					
ANR	6609423	PrimaryExpression	0		6609105	1					
ANR	6609424	ExpressionStatement	buf -> ref = NULL	269:1:7337:7352	6609105	22	True				
ANR	6609425	AssignmentExpression	buf -> ref = NULL		6609105	0		=			
ANR	6609426	PtrMemberAccess	buf -> ref		6609105	0					
ANR	6609427	Identifier	buf		6609105	0					
ANR	6609428	Identifier	ref		6609105	1					
ANR	6609429	Identifier	NULL		6609105	1					
ANR	6609430	IfStatement	if ( buf -> prev )		6609105	23					
ANR	6609431	Condition	buf -> prev	270:5:7359:7367	6609105	0	True				
ANR	6609432	PtrMemberAccess	buf -> prev		6609105	0					
ANR	6609433	Identifier	buf		6609105	0					
ANR	6609434	Identifier	prev		6609105	1					
ANR	6609435	CompoundStatement		54:16:1061:1061	6609105	1					
ANR	6609436	ExpressionStatement	buf -> prev -> next = buf	271:2:7374:7395	6609105	0	True				
ANR	6609437	AssignmentExpression	buf -> prev -> next = buf		6609105	0		=			
ANR	6609438	PtrMemberAccess	buf -> prev -> next		6609105	0					
ANR	6609439	PtrMemberAccess	buf -> prev		6609105	0					
ANR	6609440	Identifier	buf		6609105	0					
ANR	6609441	Identifier	prev		6609105	1					
ANR	6609442	Identifier	next		6609105	1					
ANR	6609443	Identifier	buf		6609105	1					
ANR	6609444	IfStatement	if ( buf -> next )		6609105	24					
ANR	6609445	Condition	buf -> next	273:5:7405:7413	6609105	0	True				
ANR	6609446	PtrMemberAccess	buf -> next		6609105	0					
ANR	6609447	Identifier	buf		6609105	0					
ANR	6609448	Identifier	next		6609105	1					
ANR	6609449	CompoundStatement		57:16:1107:1107	6609105	1					
ANR	6609450	ExpressionStatement	buf -> next -> prev = buf	274:2:7420:7441	6609105	0	True				
ANR	6609451	AssignmentExpression	buf -> next -> prev = buf		6609105	0		=			
ANR	6609452	PtrMemberAccess	buf -> next -> prev		6609105	0					
ANR	6609453	PtrMemberAccess	buf -> next		6609105	0					
ANR	6609454	Identifier	buf		6609105	0					
ANR	6609455	Identifier	next		6609105	1					
ANR	6609456	Identifier	prev		6609105	1					
ANR	6609457	Identifier	buf		6609105	1					
ANR	6609458	ReturnType	static void		6609105	1					
ANR	6609459	Identifier	readlabel		6609105	2					
ANR	6609460	ParameterList	"const char * * p , int store"		6609105	3					
ANR	6609461	Parameter	const char * * p	217:22:6281:6294	6609105	0	True				
ANR	6609462	ParameterType	const char * *		6609105	0					
ANR	6609463	Identifier	p		6609105	1					
ANR	6609464	Parameter	int store	217:38:6297:6305	6609105	1	True				
ANR	6609465	ParameterType	int		6609105	0					
ANR	6609466	Identifier	store		6609105	1					
ANR	6609467	CFGEntryNode	ENTRY		6609105		True				
ANR	6609468	CFGExitNode	EXIT		6609105		True				
ANR	6609469	Symbol	* buf -> name		6609105						
ANR	6609470	Symbol	* previous		6609105						
ANR	6609471	Symbol	* * buf		6609105						
ANR	6609472	Symbol	strchr		6609105						
ANR	6609473	Symbol	dummy		6609105						
ANR	6609474	Symbol	& dummy		6609105						
ANR	6609475	Symbol	pos		6609105						
ANR	6609476	Symbol	rd_label		6609105						
ANR	6609477	Symbol	buf -> prev		6609105						
ANR	6609478	Symbol	buf -> ref		6609105						
ANR	6609479	Symbol	buf -> next		6609105						
ANR	6609480	Symbol	buf -> prev -> next		6609105						
ANR	6609481	Symbol	* * p		6609105						
ANR	6609482	Symbol	addr		6609105						
ANR	6609483	Symbol	sp		6609105						
ANR	6609484	Symbol	malloc		6609105						
ANR	6609485	Symbol	* buf		6609105						
ANR	6609486	Symbol	c		6609105						
ANR	6609487	Symbol	NULL		6609105						
ANR	6609488	Symbol	d		6609105						
ANR	6609489	Symbol	previous		6609105						
ANR	6609490	Symbol	buf -> busy		6609105						
ANR	6609491	Symbol	* buf -> prev		6609105						
ANR	6609492	Symbol	i		6609105						
ANR	6609493	Symbol	* buf -> next		6609105						
ANR	6609494	Symbol	j		6609105						
ANR	6609495	Symbol	store		6609105						
ANR	6609496	Symbol	buf -> valid		6609105						
ANR	6609497	Symbol	* c		6609105						
ANR	6609498	Symbol	buf -> next -> prev		6609105						
ANR	6609499	Symbol	* d		6609105						
ANR	6609500	Symbol	& i		6609105						
ANR	6609501	Symbol	buf -> name		6609105						
ANR	6609502	Symbol	p		6609105						
ANR	6609503	Symbol	buf		6609105						
ANR	6609504	Symbol	previous -> next		6609105						
ANR	6609505	Symbol	& previous		6609105						
ANR	6609506	Symbol	buf -> value		6609105						
ANR	6609507	Symbol	* p		6609105						
ANR	6609508	Function	compute_ref	283:0:7512:8174							
ANR	6609509	FunctionDef	"compute_ref (struct reference * ref , int allow_invalid)"		6609508	0					
ANR	6609510	CompoundStatement		283:65:7577:8174	6609508	0					
ANR	6609511	IdentifierDeclStatement	const char * ptr ;	284:1:7580:7595	6609508	0	True				
ANR	6609512	IdentifierDecl	* ptr		6609508	0					
ANR	6609513	IdentifierDeclType	const char *		6609508	0					
ANR	6609514	Identifier	ptr		6609508	1					
ANR	6609515	IdentifierDeclStatement	int valid = 0 ;	285:1:7598:7611	6609508	1	True				
ANR	6609516	IdentifierDecl	valid = 0		6609508	0					
ANR	6609517	IdentifierDeclType	int		6609508	0					
ANR	6609518	Identifier	valid		6609508	1					
ANR	6609519	AssignmentExpression	valid = 0		6609508	2		=			
ANR	6609520	Identifier	valid		6609508	0					
ANR	6609521	PrimaryExpression	0		6609508	1					
ANR	6609522	IdentifierDeclStatement	int backup_addr = addr ;	286:1:7614:7636	6609508	2	True				
ANR	6609523	IdentifierDecl	backup_addr = addr		6609508	0					
ANR	6609524	IdentifierDeclType	int		6609508	0					
ANR	6609525	Identifier	backup_addr		6609508	1					
ANR	6609526	AssignmentExpression	backup_addr = addr		6609508	2		=			
ANR	6609527	Identifier	addr		6609508	0					
ANR	6609528	Identifier	addr		6609508	1					
ANR	6609529	IdentifierDeclStatement	int backup_baseaddr = baseaddr ;	287:1:7639:7669	6609508	3	True				
ANR	6609530	IdentifierDecl	backup_baseaddr = baseaddr		6609508	0					
ANR	6609531	IdentifierDeclType	int		6609508	0					
ANR	6609532	Identifier	backup_baseaddr		6609508	1					
ANR	6609533	AssignmentExpression	backup_baseaddr = baseaddr		6609508	2		=			
ANR	6609534	Identifier	baseaddr		6609508	0					
ANR	6609535	Identifier	baseaddr		6609508	1					
ANR	6609536	IdentifierDeclStatement	int backup_comma = comma ;	288:1:7672:7696	6609508	4	True				
ANR	6609537	IdentifierDecl	backup_comma = comma		6609508	0					
ANR	6609538	IdentifierDeclType	int		6609508	0					
ANR	6609539	Identifier	backup_comma		6609508	1					
ANR	6609540	AssignmentExpression	backup_comma = comma		6609508	2		=			
ANR	6609541	Identifier	comma		6609508	0					
ANR	6609542	Identifier	comma		6609508	1					
ANR	6609543	IdentifierDeclStatement	int backup_file = file ;	289:1:7699:7721	6609508	5	True				
ANR	6609544	IdentifierDecl	backup_file = file		6609508	0					
ANR	6609545	IdentifierDeclType	int		6609508	0					
ANR	6609546	Identifier	backup_file		6609508	1					
ANR	6609547	AssignmentExpression	backup_file = file		6609508	2		=			
ANR	6609548	Identifier	file		6609508	0					
ANR	6609549	Identifier	file		6609508	1					
ANR	6609550	IdentifierDeclStatement	int backup_sp = sp ;	290:1:7724:7742	6609508	6	True				
ANR	6609551	IdentifierDecl	backup_sp = sp		6609508	0					
ANR	6609552	IdentifierDeclType	int		6609508	0					
ANR	6609553	Identifier	backup_sp		6609508	1					
ANR	6609554	AssignmentExpression	backup_sp = sp		6609508	2		=			
ANR	6609555	Identifier	sp		6609508	0					
ANR	6609556	Identifier	sp		6609508	1					
ANR	6609557	ExpressionStatement	sp = ref -> level	291:1:7745:7760	6609508	7	True				
ANR	6609558	AssignmentExpression	sp = ref -> level		6609508	0		=			
ANR	6609559	Identifier	sp		6609508	0					
ANR	6609560	PtrMemberAccess	ref -> level		6609508	1					
ANR	6609561	Identifier	ref		6609508	0					
ANR	6609562	Identifier	level		6609508	1					
ANR	6609563	ExpressionStatement	addr = ref -> addr	292:1:7763:7779	6609508	8	True				
ANR	6609564	AssignmentExpression	addr = ref -> addr		6609508	0		=			
ANR	6609565	Identifier	addr		6609508	0					
ANR	6609566	PtrMemberAccess	ref -> addr		6609508	1					
ANR	6609567	Identifier	ref		6609508	0					
ANR	6609568	Identifier	addr		6609508	1					
ANR	6609569	ExpressionStatement	baseaddr = ref -> baseaddr	293:1:7782:7806	6609508	9	True				
ANR	6609570	AssignmentExpression	baseaddr = ref -> baseaddr		6609508	0		=			
ANR	6609571	Identifier	baseaddr		6609508	0					
ANR	6609572	PtrMemberAccess	ref -> baseaddr		6609508	1					
ANR	6609573	Identifier	ref		6609508	0					
ANR	6609574	Identifier	baseaddr		6609508	1					
ANR	6609575	ExpressionStatement	comma = ref -> comma	294:1:7809:7827	6609508	10	True				
ANR	6609576	AssignmentExpression	comma = ref -> comma		6609508	0		=			
ANR	6609577	Identifier	comma		6609508	0					
ANR	6609578	PtrMemberAccess	ref -> comma		6609508	1					
ANR	6609579	Identifier	ref		6609508	0					
ANR	6609580	Identifier	comma		6609508	1					
ANR	6609581	ExpressionStatement	file = ref -> infile	295:1:7830:7848	6609508	11	True				
ANR	6609582	AssignmentExpression	file = ref -> infile		6609508	0		=			
ANR	6609583	Identifier	file		6609508	0					
ANR	6609584	PtrMemberAccess	ref -> infile		6609508	1					
ANR	6609585	Identifier	ref		6609508	0					
ANR	6609586	Identifier	infile		6609508	1					
ANR	6609587	ExpressionStatement	ptr = ref -> input	296:1:7851:7867	6609508	12	True				
ANR	6609588	AssignmentExpression	ptr = ref -> input		6609508	0		=			
ANR	6609589	Identifier	ptr		6609508	0					
ANR	6609590	PtrMemberAccess	ref -> input		6609508	1					
ANR	6609591	Identifier	ref		6609508	0					
ANR	6609592	Identifier	input		6609508	1					
ANR	6609593	IfStatement	if ( ! ref -> done )		6609508	13					
ANR	6609594	Condition	! ref -> done	297:5:7874:7883	6609508	0	True				
ANR	6609595	UnaryOperationExpression	! ref -> done		6609508	0					
ANR	6609596	UnaryOperator	!		6609508	0					
ANR	6609597	PtrMemberAccess	ref -> done		6609508	1					
ANR	6609598	Identifier	ref		6609508	0					
ANR	6609599	Identifier	done		6609508	1					
ANR	6609600	CompoundStatement		15:17:308:308	6609508	1					
ANR	6609601	ExpressionStatement	"ref -> computed_value = rd_expr ( & ptr , ref -> delimiter , allow_invalid ? & valid : NULL , ref -> level , 1 )"	298:2:7890:7992	6609508	0	True				
ANR	6609602	AssignmentExpression	"ref -> computed_value = rd_expr ( & ptr , ref -> delimiter , allow_invalid ? & valid : NULL , ref -> level , 1 )"		6609508	0		=			
ANR	6609603	PtrMemberAccess	ref -> computed_value		6609508	0					
ANR	6609604	Identifier	ref		6609508	0					
ANR	6609605	Identifier	computed_value		6609508	1					
ANR	6609606	CallExpression	"rd_expr ( & ptr , ref -> delimiter , allow_invalid ? & valid : NULL , ref -> level , 1 )"		6609508	1					
ANR	6609607	Callee	rd_expr		6609508	0					
ANR	6609608	Identifier	rd_expr		6609508	0					
ANR	6609609	ArgumentList	& ptr		6609508	1					
ANR	6609610	Argument	& ptr		6609508	0					
ANR	6609611	UnaryOperationExpression	& ptr		6609508	0					
ANR	6609612	UnaryOperator	&		6609508	0					
ANR	6609613	Identifier	ptr		6609508	1					
ANR	6609614	Argument	ref -> delimiter		6609508	1					
ANR	6609615	PtrMemberAccess	ref -> delimiter		6609508	0					
ANR	6609616	Identifier	ref		6609508	0					
ANR	6609617	Identifier	delimiter		6609508	1					
ANR	6609618	Argument	allow_invalid ? & valid : NULL		6609508	2					
ANR	6609619	ConditionalExpression	allow_invalid ? & valid : NULL		6609508	0					
ANR	6609620	Condition	allow_invalid		6609508	0					
ANR	6609621	Identifier	allow_invalid		6609508	0					
ANR	6609622	UnaryOperationExpression	& valid		6609508	1					
ANR	6609623	UnaryOperator	&		6609508	0					
ANR	6609624	Identifier	valid		6609508	1					
ANR	6609625	Identifier	NULL		6609508	2					
ANR	6609626	Argument	ref -> level		6609508	3					
ANR	6609627	PtrMemberAccess	ref -> level		6609508	0					
ANR	6609628	Identifier	ref		6609508	0					
ANR	6609629	Identifier	level		6609508	1					
ANR	6609630	Argument	1		6609508	4					
ANR	6609631	PrimaryExpression	1		6609508	0					
ANR	6609632	IfStatement	if ( valid )		6609508	1					
ANR	6609633	Condition	valid	301:6:8000:8004	6609508	0	True				
ANR	6609634	Identifier	valid		6609508	0					
ANR	6609635	CompoundStatement		19:13:429:429	6609508	1					
ANR	6609636	ExpressionStatement	ref -> done = 1	302:3:8012:8025	6609508	0	True				
ANR	6609637	AssignmentExpression	ref -> done = 1		6609508	0		=			
ANR	6609638	PtrMemberAccess	ref -> done		6609508	0					
ANR	6609639	Identifier	ref		6609508	0					
ANR	6609640	Identifier	done		6609508	1					
ANR	6609641	PrimaryExpression	1		6609508	1					
ANR	6609642	ExpressionStatement	sp = backup_sp	305:1:8035:8049	6609508	14	True				
ANR	6609643	AssignmentExpression	sp = backup_sp		6609508	0		=			
ANR	6609644	Identifier	sp		6609508	0					
ANR	6609645	Identifier	backup_sp		6609508	1					
ANR	6609646	ExpressionStatement	addr = backup_addr	306:1:8052:8070	6609508	15	True				
ANR	6609647	AssignmentExpression	addr = backup_addr		6609508	0		=			
ANR	6609648	Identifier	addr		6609508	0					
ANR	6609649	Identifier	backup_addr		6609508	1					
ANR	6609650	ExpressionStatement	baseaddr = backup_baseaddr	307:1:8073:8099	6609508	16	True				
ANR	6609651	AssignmentExpression	baseaddr = backup_baseaddr		6609508	0		=			
ANR	6609652	Identifier	baseaddr		6609508	0					
ANR	6609653	Identifier	backup_baseaddr		6609508	1					
ANR	6609654	ExpressionStatement	comma = backup_comma	308:1:8102:8122	6609508	17	True				
ANR	6609655	AssignmentExpression	comma = backup_comma		6609508	0		=			
ANR	6609656	Identifier	comma		6609508	0					
ANR	6609657	Identifier	backup_comma		6609508	1					
ANR	6609658	ExpressionStatement	file = backup_file	309:1:8125:8143	6609508	18	True				
ANR	6609659	AssignmentExpression	file = backup_file		6609508	0		=			
ANR	6609660	Identifier	file		6609508	0					
ANR	6609661	Identifier	backup_file		6609508	1					
ANR	6609662	ReturnStatement	return ref -> computed_value ;	310:1:8146:8172	6609508	19	True				
ANR	6609663	PtrMemberAccess	ref -> computed_value		6609508	0					
ANR	6609664	Identifier	ref		6609508	0					
ANR	6609665	Identifier	computed_value		6609508	1					
ANR	6609666	ReturnType	static int		6609508	1					
ANR	6609667	Identifier	compute_ref		6609508	2					
ANR	6609668	ParameterList	"struct reference * ref , int allow_invalid"		6609508	3					
ANR	6609669	Parameter	struct reference * ref	283:23:7535:7555	6609508	0	True				
ANR	6609670	ParameterType	struct reference *		6609508	0					
ANR	6609671	Identifier	ref		6609508	1					
ANR	6609672	Parameter	int allow_invalid	283:46:7558:7574	6609508	1	True				
ANR	6609673	ParameterType	int		6609508	0					
ANR	6609674	Identifier	allow_invalid		6609508	1					
ANR	6609675	CFGEntryNode	ENTRY		6609508		True				
ANR	6609676	CFGExitNode	EXIT		6609508		True				
ANR	6609677	Symbol	ref -> addr		6609508						
ANR	6609678	Symbol	backup_comma		6609508						
ANR	6609679	Symbol	valid		6609508						
ANR	6609680	Symbol	ref		6609508						
ANR	6609681	Symbol	file		6609508						
ANR	6609682	Symbol	ref -> comma		6609508						
ANR	6609683	Symbol	& ptr		6609508						
ANR	6609684	Symbol	ref -> baseaddr		6609508						
ANR	6609685	Symbol	allow_invalid		6609508						
ANR	6609686	Symbol	ref -> computed_value		6609508						
ANR	6609687	Symbol	addr		6609508						
ANR	6609688	Symbol	ref -> infile		6609508						
ANR	6609689	Symbol	ref -> input		6609508						
ANR	6609690	Symbol	sp		6609508						
ANR	6609691	Symbol	NULL		6609508						
ANR	6609692	Symbol	ref -> delimiter		6609508						
ANR	6609693	Symbol	baseaddr		6609508						
ANR	6609694	Symbol	backup_file		6609508						
ANR	6609695	Symbol	ptr		6609508						
ANR	6609696	Symbol	comma		6609508						
ANR	6609697	Symbol	backup_sp		6609508						
ANR	6609698	Symbol	backup_baseaddr		6609508						
ANR	6609699	Symbol	ref -> done		6609508						
ANR	6609700	Symbol	& valid		6609508						
ANR	6609701	Symbol	rd_expr		6609508						
ANR	6609702	Symbol	ref -> level		6609508						
ANR	6609703	Symbol	backup_addr		6609508						
ANR	6609704	Symbol	* ref		6609508						
ANR	6609705	Function	rd_word	314:0:8252:8437							
ANR	6609706	FunctionDef	"rd_word (const char * * p , char delimiter)"		6609705	0					
ANR	6609707	CompoundStatement		314:51:8303:8437	6609705	0					
ANR	6609708	ExpressionStatement	* p = delspc ( * p )	315:1:8306:8322	6609705	0	True				
ANR	6609709	AssignmentExpression	* p = delspc ( * p )		6609705	0		=			
ANR	6609710	UnaryOperationExpression	* p		6609705	0					
ANR	6609711	UnaryOperator	*		6609705	0					
ANR	6609712	Identifier	p		6609705	1					
ANR	6609713	CallExpression	delspc ( * p )		6609705	1					
ANR	6609714	Callee	delspc		6609705	0					
ANR	6609715	Identifier	delspc		6609705	0					
ANR	6609716	ArgumentList	* p		6609705	1					
ANR	6609717	Argument	* p		6609705	0					
ANR	6609718	UnaryOperationExpression	* p		6609705	0					
ANR	6609719	UnaryOperator	*		6609705	0					
ANR	6609720	Identifier	p		6609705	1					
ANR	6609721	IfStatement	if ( * * p == 0 )		6609705	1					
ANR	6609722	Condition	* * p == 0	316:5:8329:8336	6609705	0	True				
ANR	6609723	EqualityExpression	* * p == 0		6609705	0		==			
ANR	6609724	UnaryOperationExpression	* * p		6609705	0					
ANR	6609725	UnaryOperator	*		6609705	0					
ANR	6609726	UnaryOperationExpression	* p		6609705	1					
ANR	6609727	UnaryOperator	*		6609705	0					
ANR	6609728	Identifier	p		6609705	1					
ANR	6609729	PrimaryExpression	0		6609705	1					
ANR	6609730	CompoundStatement		3:15:35:35	6609705	1					
ANR	6609731	ReturnStatement	return 0 ;	317:2:8343:8351	6609705	0	True				
ANR	6609732	PrimaryExpression	0		6609705	0					
ANR	6609733	ExpressionStatement	readword = * p	319:1:8357:8370	6609705	2	True				
ANR	6609734	AssignmentExpression	readword = * p		6609705	0		=			
ANR	6609735	Identifier	readword		6609705	0					
ANR	6609736	UnaryOperationExpression	* p		6609705	1					
ANR	6609737	UnaryOperator	*		6609705	0					
ANR	6609738	Identifier	p		6609705	1					
ANR	6609739	ExpressionStatement	mem_delimiter = delimiter	320:1:8373:8398	6609705	3	True				
ANR	6609740	AssignmentExpression	mem_delimiter = delimiter		6609705	0		=			
ANR	6609741	Identifier	mem_delimiter		6609705	0					
ANR	6609742	Identifier	delimiter		6609705	1					
ANR	6609743	ExpressionStatement	"skipword ( p , delimiter )"	321:1:8401:8424	6609705	4	True				
ANR	6609744	CallExpression	"skipword ( p , delimiter )"		6609705	0					
ANR	6609745	Callee	skipword		6609705	0					
ANR	6609746	Identifier	skipword		6609705	0					
ANR	6609747	ArgumentList	p		6609705	1					
ANR	6609748	Argument	p		6609705	0					
ANR	6609749	Identifier	p		6609705	0					
ANR	6609750	Argument	delimiter		6609705	1					
ANR	6609751	Identifier	delimiter		6609705	0					
ANR	6609752	ReturnStatement	return 1 ;	322:1:8427:8435	6609705	5	True				
ANR	6609753	PrimaryExpression	1		6609705	0					
ANR	6609754	ReturnType	static int		6609705	1					
ANR	6609755	Identifier	rd_word		6609705	2					
ANR	6609756	ParameterList	"const char * * p , char delimiter"		6609705	3					
ANR	6609757	Parameter	const char * * p	314:19:8271:8284	6609705	0	True				
ANR	6609758	ParameterType	const char * *		6609705	0					
ANR	6609759	Identifier	p		6609705	1					
ANR	6609760	Parameter	char delimiter	314:35:8287:8300	6609705	1	True				
ANR	6609761	ParameterType	char		6609705	0					
ANR	6609762	Identifier	delimiter		6609705	1					
ANR	6609763	CFGEntryNode	ENTRY		6609705		True				
ANR	6609764	CFGExitNode	EXIT		6609705		True				
ANR	6609765	Symbol	p		6609705						
ANR	6609766	Symbol	delimiter		6609705						
ANR	6609767	Symbol	* p		6609705						
ANR	6609768	Symbol	readword		6609705						
ANR	6609769	Symbol	* * p		6609705						
ANR	6609770	Symbol	delspc		6609705						
ANR	6609771	Symbol	mem_delimiter		6609705						
ANR	6609772	Function	rd_byte	326:0:8515:8716							
ANR	6609773	FunctionDef	"rd_byte (const char * * p , char delimiter)"		6609772	0					
ANR	6609774	CompoundStatement		326:51:8566:8716	6609772	0					
ANR	6609775	ExpressionStatement	* p = delspc ( * p )	327:1:8569:8585	6609772	0	True				
ANR	6609776	AssignmentExpression	* p = delspc ( * p )		6609772	0		=			
ANR	6609777	UnaryOperationExpression	* p		6609772	0					
ANR	6609778	UnaryOperator	*		6609772	0					
ANR	6609779	Identifier	p		6609772	1					
ANR	6609780	CallExpression	delspc ( * p )		6609772	1					
ANR	6609781	Callee	delspc		6609772	0					
ANR	6609782	Identifier	delspc		6609772	0					
ANR	6609783	ArgumentList	* p		6609772	1					
ANR	6609784	Argument	* p		6609772	0					
ANR	6609785	UnaryOperationExpression	* p		6609772	0					
ANR	6609786	UnaryOperator	*		6609772	0					
ANR	6609787	Identifier	p		6609772	1					
ANR	6609788	IfStatement	if ( * * p == 0 )		6609772	1					
ANR	6609789	Condition	* * p == 0	328:5:8592:8599	6609772	0	True				
ANR	6609790	EqualityExpression	* * p == 0		6609772	0		==			
ANR	6609791	UnaryOperationExpression	* * p		6609772	0					
ANR	6609792	UnaryOperator	*		6609772	0					
ANR	6609793	UnaryOperationExpression	* p		6609772	1					
ANR	6609794	UnaryOperator	*		6609772	0					
ANR	6609795	Identifier	p		6609772	1					
ANR	6609796	PrimaryExpression	0		6609772	1					
ANR	6609797	CompoundStatement		3:15:35:35	6609772	1					
ANR	6609798	ReturnStatement	return 0 ;	329:2:8606:8614	6609772	0	True				
ANR	6609799	PrimaryExpression	0		6609772	0					
ANR	6609800	ExpressionStatement	readbyte = * p	331:1:8620:8633	6609772	2	True				
ANR	6609801	AssignmentExpression	readbyte = * p		6609772	0		=			
ANR	6609802	Identifier	readbyte		6609772	0					
ANR	6609803	UnaryOperationExpression	* p		6609772	1					
ANR	6609804	UnaryOperator	*		6609772	0					
ANR	6609805	Identifier	p		6609772	1					
ANR	6609806	ExpressionStatement	writebyte = 1	332:1:8636:8649	6609772	3	True				
ANR	6609807	AssignmentExpression	writebyte = 1		6609772	0		=			
ANR	6609808	Identifier	writebyte		6609772	0					
ANR	6609809	PrimaryExpression	1		6609772	1					
ANR	6609810	ExpressionStatement	mem_delimiter = delimiter	333:1:8652:8677	6609772	4	True				
ANR	6609811	AssignmentExpression	mem_delimiter = delimiter		6609772	0		=			
ANR	6609812	Identifier	mem_delimiter		6609772	0					
ANR	6609813	Identifier	delimiter		6609772	1					
ANR	6609814	ExpressionStatement	"skipword ( p , delimiter )"	334:1:8680:8703	6609772	5	True				
ANR	6609815	CallExpression	"skipword ( p , delimiter )"		6609772	0					
ANR	6609816	Callee	skipword		6609772	0					
ANR	6609817	Identifier	skipword		6609772	0					
ANR	6609818	ArgumentList	p		6609772	1					
ANR	6609819	Argument	p		6609772	0					
ANR	6609820	Identifier	p		6609772	0					
ANR	6609821	Argument	delimiter		6609772	1					
ANR	6609822	Identifier	delimiter		6609772	0					
ANR	6609823	ReturnStatement	return 1 ;	335:1:8706:8714	6609772	6	True				
ANR	6609824	PrimaryExpression	1		6609772	0					
ANR	6609825	ReturnType	static int		6609772	1					
ANR	6609826	Identifier	rd_byte		6609772	2					
ANR	6609827	ParameterList	"const char * * p , char delimiter"		6609772	3					
ANR	6609828	Parameter	const char * * p	326:19:8534:8547	6609772	0	True				
ANR	6609829	ParameterType	const char * *		6609772	0					
ANR	6609830	Identifier	p		6609772	1					
ANR	6609831	Parameter	char delimiter	326:35:8550:8563	6609772	1	True				
ANR	6609832	ParameterType	char		6609772	0					
ANR	6609833	Identifier	delimiter		6609772	1					
ANR	6609834	CFGEntryNode	ENTRY		6609772		True				
ANR	6609835	CFGExitNode	EXIT		6609772		True				
ANR	6609836	Symbol	p		6609772						
ANR	6609837	Symbol	writebyte		6609772						
ANR	6609838	Symbol	delimiter		6609772						
ANR	6609839	Symbol	* p		6609772						
ANR	6609840	Symbol	* * p		6609772						
ANR	6609841	Symbol	delspc		6609772						
ANR	6609842	Symbol	readbyte		6609772						
ANR	6609843	Symbol	mem_delimiter		6609772						
ANR	6609844	Function	rd_ex1	339:0:8746:8898							
ANR	6609845	FunctionDef	rd_ex1 (const char * * p)		6609844	0					
ANR	6609846	CompoundStatement		339:34:8780:8898	6609844	0					
ANR	6609847	Statement	define	340:1:8783:8788	6609844	0	True				
ANR	6609848	Statement	DE	340:8:8790:8791	6609844	1	True				
ANR	6609849	Statement	2	340:11:8793:8793	6609844	2	True				
ANR	6609850	Statement	define	341:1:8796:8801	6609844	3	True				
ANR	6609851	Statement	AF	341:8:8803:8804	6609844	4	True				
ANR	6609852	Statement	3	341:11:8806:8806	6609844	5	True				
ANR	6609853	IdentifierDeclStatement	"const char * list [ ] = { ""( sp )"" , ""de"" , ""af"" , NULL } ;"	342:1:8809:8863	6609844	6	True				
ANR	6609854	IdentifierDecl	"* list [ ] = { ""( sp )"" , ""de"" , ""af"" , NULL }"		6609844	0					
ANR	6609855	IdentifierDeclType	const char * [ ]		6609844	0					
ANR	6609856	Identifier	list		6609844	1					
ANR	6609857	AssignmentExpression	"* list [ ] = { ""( sp )"" , ""de"" , ""af"" , NULL }"		6609844	2		=			
ANR	6609858	Identifier	list		6609844	0					
ANR	6609859	InitializerList	"""( sp )"""		6609844	1					
ANR	6609860	PrimaryExpression	"""( sp )"""		6609844	0					
ANR	6609861	PrimaryExpression	"""de"""		6609844	1					
ANR	6609862	PrimaryExpression	"""af"""		6609844	2					
ANR	6609863	Identifier	NULL		6609844	3					
ANR	6609864	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	345:1:8866:8896	6609844	7	True				
ANR	6609865	CallExpression	"indx ( p , list , 1 , NULL )"		6609844	0					
ANR	6609866	Callee	indx		6609844	0					
ANR	6609867	Identifier	indx		6609844	0					
ANR	6609868	ArgumentList	p		6609844	1					
ANR	6609869	Argument	p		6609844	0					
ANR	6609870	Identifier	p		6609844	0					
ANR	6609871	Argument	list		6609844	1					
ANR	6609872	Identifier	list		6609844	0					
ANR	6609873	Argument	1		6609844	2					
ANR	6609874	PrimaryExpression	1		6609844	0					
ANR	6609875	Argument	NULL		6609844	3					
ANR	6609876	Identifier	NULL		6609844	0					
ANR	6609877	ReturnType	static int		6609844	1					
ANR	6609878	Identifier	rd_ex1		6609844	2					
ANR	6609879	ParameterList	const char * * p		6609844	3					
ANR	6609880	Parameter	const char * * p	339:18:8764:8777	6609844	0	True				
ANR	6609881	ParameterType	const char * *		6609844	0					
ANR	6609882	Identifier	p		6609844	1					
ANR	6609883	CFGEntryNode	ENTRY		6609844		True				
ANR	6609884	CFGExitNode	EXIT		6609844		True				
ANR	6609885	Symbol	p		6609844						
ANR	6609886	Symbol	NULL		6609844						
ANR	6609887	Symbol	indx		6609844						
ANR	6609888	Symbol	list		6609844						
ANR	6609889	Function	rd_in	349:0:8933:9088							
ANR	6609890	FunctionDef	rd_in (const char * * p)		6609889	0					
ANR	6609891	CompoundStatement		349:33:8966:9088	6609889	0					
ANR	6609892	Statement	define	350:1:8969:8974	6609889	0	True				
ANR	6609893	Statement	A	350:8:8976:8976	6609889	1	True				
ANR	6609894	Statement	8	350:10:8978:8978	6609889	2	True				
ANR	6609895	IdentifierDeclStatement	"const char * list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""f"" , ""a"" , NULL } ;"	351:1:8981:9053	6609889	3	True				
ANR	6609896	IdentifierDecl	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""f"" , ""a"" , NULL }"		6609889	0					
ANR	6609897	IdentifierDeclType	const char * [ ]		6609889	0					
ANR	6609898	Identifier	list		6609889	1					
ANR	6609899	AssignmentExpression	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""f"" , ""a"" , NULL }"		6609889	2		=			
ANR	6609900	Identifier	list		6609889	0					
ANR	6609901	InitializerList	"""b"""		6609889	1					
ANR	6609902	PrimaryExpression	"""b"""		6609889	0					
ANR	6609903	PrimaryExpression	"""c"""		6609889	1					
ANR	6609904	PrimaryExpression	"""d"""		6609889	2					
ANR	6609905	PrimaryExpression	"""e"""		6609889	3					
ANR	6609906	PrimaryExpression	"""h"""		6609889	4					
ANR	6609907	PrimaryExpression	"""l"""		6609889	5					
ANR	6609908	PrimaryExpression	"""f"""		6609889	6					
ANR	6609909	PrimaryExpression	"""a"""		6609889	7					
ANR	6609910	Identifier	NULL		6609889	8					
ANR	6609911	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	354:1:9056:9086	6609889	4	True				
ANR	6609912	CallExpression	"indx ( p , list , 1 , NULL )"		6609889	0					
ANR	6609913	Callee	indx		6609889	0					
ANR	6609914	Identifier	indx		6609889	0					
ANR	6609915	ArgumentList	p		6609889	1					
ANR	6609916	Argument	p		6609889	0					
ANR	6609917	Identifier	p		6609889	0					
ANR	6609918	Argument	list		6609889	1					
ANR	6609919	Identifier	list		6609889	0					
ANR	6609920	Argument	1		6609889	2					
ANR	6609921	PrimaryExpression	1		6609889	0					
ANR	6609922	Argument	NULL		6609889	3					
ANR	6609923	Identifier	NULL		6609889	0					
ANR	6609924	ReturnType	static int		6609889	1					
ANR	6609925	Identifier	rd_in		6609889	2					
ANR	6609926	ParameterList	const char * * p		6609889	3					
ANR	6609927	Parameter	const char * * p	349:17:8950:8963	6609889	0	True				
ANR	6609928	ParameterType	const char * *		6609889	0					
ANR	6609929	Identifier	p		6609889	1					
ANR	6609930	CFGEntryNode	ENTRY		6609889		True				
ANR	6609931	CFGExitNode	EXIT		6609889		True				
ANR	6609932	Symbol	p		6609889						
ANR	6609933	Symbol	NULL		6609889						
ANR	6609934	Symbol	indx		6609889						
ANR	6609935	Symbol	list		6609889						
ANR	6609936	Function	rd_out	358:0:9131:9275							
ANR	6609937	FunctionDef	rd_out (const char * * p)		6609936	0					
ANR	6609938	CompoundStatement		358:34:9165:9275	6609936	0					
ANR	6609939	IdentifierDeclStatement	"const char * list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""0"" , ""a"" , NULL } ;"	359:1:9168:9240	6609936	0	True				
ANR	6609940	IdentifierDecl	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""0"" , ""a"" , NULL }"		6609936	0					
ANR	6609941	IdentifierDeclType	const char * [ ]		6609936	0					
ANR	6609942	Identifier	list		6609936	1					
ANR	6609943	AssignmentExpression	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""0"" , ""a"" , NULL }"		6609936	2		=			
ANR	6609944	Identifier	list		6609936	0					
ANR	6609945	InitializerList	"""b"""		6609936	1					
ANR	6609946	PrimaryExpression	"""b"""		6609936	0					
ANR	6609947	PrimaryExpression	"""c"""		6609936	1					
ANR	6609948	PrimaryExpression	"""d"""		6609936	2					
ANR	6609949	PrimaryExpression	"""e"""		6609936	3					
ANR	6609950	PrimaryExpression	"""h"""		6609936	4					
ANR	6609951	PrimaryExpression	"""l"""		6609936	5					
ANR	6609952	PrimaryExpression	"""0"""		6609936	6					
ANR	6609953	PrimaryExpression	"""a"""		6609936	7					
ANR	6609954	Identifier	NULL		6609936	8					
ANR	6609955	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	362:1:9243:9273	6609936	1	True				
ANR	6609956	CallExpression	"indx ( p , list , 1 , NULL )"		6609936	0					
ANR	6609957	Callee	indx		6609936	0					
ANR	6609958	Identifier	indx		6609936	0					
ANR	6609959	ArgumentList	p		6609936	1					
ANR	6609960	Argument	p		6609936	0					
ANR	6609961	Identifier	p		6609936	0					
ANR	6609962	Argument	list		6609936	1					
ANR	6609963	Identifier	list		6609936	0					
ANR	6609964	Argument	1		6609936	2					
ANR	6609965	PrimaryExpression	1		6609936	0					
ANR	6609966	Argument	NULL		6609936	3					
ANR	6609967	Identifier	NULL		6609936	0					
ANR	6609968	ReturnType	static int		6609936	1					
ANR	6609969	Identifier	rd_out		6609936	2					
ANR	6609970	ParameterList	const char * * p		6609936	3					
ANR	6609971	Parameter	const char * * p	358:18:9149:9162	6609936	0	True				
ANR	6609972	ParameterType	const char * *		6609936	0					
ANR	6609973	Identifier	p		6609936	1					
ANR	6609974	CFGEntryNode	ENTRY		6609936		True				
ANR	6609975	CFGExitNode	EXIT		6609936		True				
ANR	6609976	Symbol	p		6609936						
ANR	6609977	Symbol	NULL		6609936						
ANR	6609978	Symbol	indx		6609936						
ANR	6609979	Symbol	list		6609936						
ANR	6609980	Function	rd_nnc	366:0:9301:9494							
ANR	6609981	FunctionDef	rd_nnc (const char * * p)		6609980	0					
ANR	6609982	CompoundStatement		366:34:9335:9494	6609980	0					
ANR	6609983	Statement	define	367:1:9338:9343	6609980	0	True				
ANR	6609984	Statement	C	367:8:9345:9345	6609980	1	True				
ANR	6609985	Statement	1	367:10:9347:9347	6609980	2	True				
ANR	6609986	IdentifierDeclStatement	int i ;	368:1:9350:9355	6609980	3	True				
ANR	6609987	IdentifierDecl	i		6609980	0					
ANR	6609988	IdentifierDeclType	int		6609980	0					
ANR	6609989	Identifier	i		6609980	1					
ANR	6609990	IdentifierDeclStatement	"const char * list [ ] = { ""( c )"" , ""(*)"" , ""a , (*)"" , NULL } ;"	369:1:9358:9417	6609980	4	True				
ANR	6609991	IdentifierDecl	"* list [ ] = { ""( c )"" , ""(*)"" , ""a , (*)"" , NULL }"		6609980	0					
ANR	6609992	IdentifierDeclType	const char * [ ]		6609980	0					
ANR	6609993	Identifier	list		6609980	1					
ANR	6609994	AssignmentExpression	"* list [ ] = { ""( c )"" , ""(*)"" , ""a , (*)"" , NULL }"		6609980	2		=			
ANR	6609995	Identifier	list		6609980	0					
ANR	6609996	InitializerList	"""( c )"""		6609980	1					
ANR	6609997	PrimaryExpression	"""( c )"""		6609980	0					
ANR	6609998	PrimaryExpression	"""(*)"""		6609980	1					
ANR	6609999	PrimaryExpression	"""a , (*)"""		6609980	2					
ANR	6610000	Identifier	NULL		6609980	3					
ANR	6610001	ExpressionStatement	"i = indx ( p , list , 1 , & readbyte )"	372:1:9420:9452	6609980	5	True				
ANR	6610002	AssignmentExpression	"i = indx ( p , list , 1 , & readbyte )"		6609980	0		=			
ANR	6610003	Identifier	i		6609980	0					
ANR	6610004	CallExpression	"indx ( p , list , 1 , & readbyte )"		6609980	1					
ANR	6610005	Callee	indx		6609980	0					
ANR	6610006	Identifier	indx		6609980	0					
ANR	6610007	ArgumentList	p		6609980	1					
ANR	6610008	Argument	p		6609980	0					
ANR	6610009	Identifier	p		6609980	0					
ANR	6610010	Argument	list		6609980	1					
ANR	6610011	Identifier	list		6609980	0					
ANR	6610012	Argument	1		6609980	2					
ANR	6610013	PrimaryExpression	1		6609980	0					
ANR	6610014	Argument	& readbyte		6609980	3					
ANR	6610015	UnaryOperationExpression	& readbyte		6609980	0					
ANR	6610016	UnaryOperator	&		6609980	0					
ANR	6610017	Identifier	readbyte		6609980	1					
ANR	6610018	IfStatement	if ( i < 2 )		6609980	6					
ANR	6610019	Condition	i < 2	373:5:9459:9463	6609980	0	True				
ANR	6610020	RelationalExpression	i < 2		6609980	0		<			
ANR	6610021	Identifier	i		6609980	0					
ANR	6610022	PrimaryExpression	2		6609980	1					
ANR	6610023	CompoundStatement		8:12:130:130	6609980	1					
ANR	6610024	ReturnStatement	return i ;	374:2:9470:9478	6609980	0	True				
ANR	6610025	Identifier	i		6609980	0					
ANR	6610026	ReturnStatement	return 2 ;	376:1:9484:9492	6609980	7	True				
ANR	6610027	PrimaryExpression	2		6609980	0					
ANR	6610028	ReturnType	static int		6609980	1					
ANR	6610029	Identifier	rd_nnc		6609980	2					
ANR	6610030	ParameterList	const char * * p		6609980	3					
ANR	6610031	Parameter	const char * * p	366:18:9319:9332	6609980	0	True				
ANR	6610032	ParameterType	const char * *		6609980	0					
ANR	6610033	Identifier	p		6609980	1					
ANR	6610034	CFGEntryNode	ENTRY		6609980		True				
ANR	6610035	CFGExitNode	EXIT		6609980		True				
ANR	6610036	Symbol	p		6609980						
ANR	6610037	Symbol	NULL		6609980						
ANR	6610038	Symbol	indx		6609980						
ANR	6610039	Symbol	i		6609980						
ANR	6610040	Symbol	list		6609980						
ANR	6610041	Symbol	& readbyte		6609980						
ANR	6610042	Function	rd_c	380:0:9512:9633							
ANR	6610043	FunctionDef	rd_c (const char * * p)		6610042	0					
ANR	6610044	CompoundStatement		380:32:9544:9633	6610042	0					
ANR	6610045	IdentifierDeclStatement	"const char * list [ ] = { ""( c )"" , ""( bc )"" , NULL } ;"	381:1:9547:9598	6610042	0	True				
ANR	6610046	IdentifierDecl	"* list [ ] = { ""( c )"" , ""( bc )"" , NULL }"		6610042	0					
ANR	6610047	IdentifierDeclType	const char * [ ]		6610042	0					
ANR	6610048	Identifier	list		6610042	1					
ANR	6610049	AssignmentExpression	"* list [ ] = { ""( c )"" , ""( bc )"" , NULL }"		6610042	2		=			
ANR	6610050	Identifier	list		6610042	0					
ANR	6610051	InitializerList	"""( c )"""		6610042	1					
ANR	6610052	PrimaryExpression	"""( c )"""		6610042	0					
ANR	6610053	PrimaryExpression	"""( bc )"""		6610042	1					
ANR	6610054	Identifier	NULL		6610042	2					
ANR	6610055	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	384:1:9601:9631	6610042	1	True				
ANR	6610056	CallExpression	"indx ( p , list , 1 , NULL )"		6610042	0					
ANR	6610057	Callee	indx		6610042	0					
ANR	6610058	Identifier	indx		6610042	0					
ANR	6610059	ArgumentList	p		6610042	1					
ANR	6610060	Argument	p		6610042	0					
ANR	6610061	Identifier	p		6610042	0					
ANR	6610062	Argument	list		6610042	1					
ANR	6610063	Identifier	list		6610042	0					
ANR	6610064	Argument	1		6610042	2					
ANR	6610065	PrimaryExpression	1		6610042	0					
ANR	6610066	Argument	NULL		6610042	3					
ANR	6610067	Identifier	NULL		6610042	0					
ANR	6610068	ReturnType	static int		6610042	1					
ANR	6610069	Identifier	rd_c		6610042	2					
ANR	6610070	ParameterList	const char * * p		6610042	3					
ANR	6610071	Parameter	const char * * p	380:16:9528:9541	6610042	0	True				
ANR	6610072	ParameterType	const char * *		6610042	0					
ANR	6610073	Identifier	p		6610042	1					
ANR	6610074	CFGEntryNode	ENTRY		6610042		True				
ANR	6610075	CFGExitNode	EXIT		6610042		True				
ANR	6610076	Symbol	p		6610042						
ANR	6610077	Symbol	NULL		6610042						
ANR	6610078	Symbol	indx		6610042						
ANR	6610079	Symbol	list		6610042						
ANR	6610080	Function	rd_a_hl	388:0:9655:9784							
ANR	6610081	FunctionDef	rd_a_hl (const char * * p)		6610080	0					
ANR	6610082	CompoundStatement		388:35:9690:9784	6610080	0					
ANR	6610083	Statement	define	389:1:9693:9698	6610080	0	True				
ANR	6610084	Statement	HL	389:8:9700:9701	6610080	1	True				
ANR	6610085	Statement	2	389:11:9703:9703	6610080	2	True				
ANR	6610086	IdentifierDeclStatement	"const char * list [ ] = { ""a"" , ""hl"" , NULL } ;"	390:1:9706:9749	6610080	3	True				
ANR	6610087	IdentifierDecl	"* list [ ] = { ""a"" , ""hl"" , NULL }"		6610080	0					
ANR	6610088	IdentifierDeclType	const char * [ ]		6610080	0					
ANR	6610089	Identifier	list		6610080	1					
ANR	6610090	AssignmentExpression	"* list [ ] = { ""a"" , ""hl"" , NULL }"		6610080	2		=			
ANR	6610091	Identifier	list		6610080	0					
ANR	6610092	InitializerList	"""a"""		6610080	1					
ANR	6610093	PrimaryExpression	"""a"""		6610080	0					
ANR	6610094	PrimaryExpression	"""hl"""		6610080	1					
ANR	6610095	Identifier	NULL		6610080	2					
ANR	6610096	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	393:1:9752:9782	6610080	4	True				
ANR	6610097	CallExpression	"indx ( p , list , 1 , NULL )"		6610080	0					
ANR	6610098	Callee	indx		6610080	0					
ANR	6610099	Identifier	indx		6610080	0					
ANR	6610100	ArgumentList	p		6610080	1					
ANR	6610101	Argument	p		6610080	0					
ANR	6610102	Identifier	p		6610080	0					
ANR	6610103	Argument	list		6610080	1					
ANR	6610104	Identifier	list		6610080	0					
ANR	6610105	Argument	1		6610080	2					
ANR	6610106	PrimaryExpression	1		6610080	0					
ANR	6610107	Argument	NULL		6610080	3					
ANR	6610108	Identifier	NULL		6610080	0					
ANR	6610109	ReturnType	static int		6610080	1					
ANR	6610110	Identifier	rd_a_hl		6610080	2					
ANR	6610111	ParameterList	const char * * p		6610080	3					
ANR	6610112	Parameter	const char * * p	388:19:9674:9687	6610080	0	True				
ANR	6610113	ParameterType	const char * *		6610080	0					
ANR	6610114	Identifier	p		6610080	1					
ANR	6610115	CFGEntryNode	ENTRY		6610080		True				
ANR	6610116	CFGExitNode	EXIT		6610080		True				
ANR	6610117	Symbol	p		6610080						
ANR	6610118	Symbol	NULL		6610080						
ANR	6610119	Symbol	indx		6610080						
ANR	6610120	Symbol	list		6610080						
ANR	6610121	Function	rd_ld	397:0:9819:10900							
ANR	6610122	FunctionDef	rd_ld (const char * * p)		6610121	0					
ANR	6610123	CompoundStatement		397:33:9852:10900	6610121	0					
ANR	6610124	Statement	define	398:1:9855:9860	6610121	0	True				
ANR	6610125	Statement	ldBC	398:8:9862:9865	6610121	1	True				
ANR	6610126	Statement	1	398:16:9870:9870	6610121	2	True				
ANR	6610127	Statement	define	399:1:9873:9878	6610121	3	True				
ANR	6610128	Statement	ldDE	399:8:9880:9883	6610121	4	True				
ANR	6610129	Statement	2	399:16:9888:9888	6610121	5	True				
ANR	6610130	Statement	define	400:1:9891:9896	6610121	6	True				
ANR	6610131	Statement	ldHL	400:8:9898:9901	6610121	7	True				
ANR	6610132	Statement	3	400:16:9906:9906	6610121	8	True				
ANR	6610133	Statement	define	401:1:9909:9914	6610121	9	True				
ANR	6610134	Statement	ldSP	401:8:9916:9919	6610121	10	True				
ANR	6610135	Statement	4	401:16:9924:9924	6610121	11	True				
ANR	6610136	Statement	define	402:1:9927:9932	6610121	12	True				
ANR	6610137	Statement	ldIX	402:8:9934:9937	6610121	13	True				
ANR	6610138	Statement	5	402:16:9942:9942	6610121	14	True				
ANR	6610139	Statement	define	403:1:9945:9950	6610121	15	True				
ANR	6610140	Statement	ldIY	403:8:9952:9955	6610121	16	True				
ANR	6610141	Statement	6	403:16:9960:9960	6610121	17	True				
ANR	6610142	Statement	define	404:1:9963:9968	6610121	18	True				
ANR	6610143	Statement	ldB	404:8:9970:9972	6610121	19	True				
ANR	6610144	Statement	7	404:16:9978:9978	6610121	20	True				
ANR	6610145	Statement	define	405:1:9981:9986	6610121	21	True				
ANR	6610146	Statement	ldC	405:8:9988:9990	6610121	22	True				
ANR	6610147	Statement	8	405:16:9996:9996	6610121	23	True				
ANR	6610148	Statement	define	406:1:9999:10004	6610121	24	True				
ANR	6610149	Statement	ldD	406:8:10006:10008	6610121	25	True				
ANR	6610150	Statement	9	406:16:10014:10014	6610121	26	True				
ANR	6610151	Statement	define	407:1:10017:10022	6610121	27	True				
ANR	6610152	Statement	ldE	407:8:10024:10026	6610121	28	True				
ANR	6610153	Statement	10	407:16:10032:10033	6610121	29	True				
ANR	6610154	Statement	define	408:1:10036:10041	6610121	30	True				
ANR	6610155	Statement	ldH	408:8:10043:10045	6610121	31	True				
ANR	6610156	Statement	11	408:16:10051:10052	6610121	32	True				
ANR	6610157	Statement	define	409:1:10055:10060	6610121	33	True				
ANR	6610158	Statement	ldL	409:8:10062:10064	6610121	34	True				
ANR	6610159	Statement	12	409:16:10070:10071	6610121	35	True				
ANR	6610160	Statement	define	410:1:10074:10079	6610121	36	True				
ANR	6610161	Statement	ld_HL	410:8:10081:10085	6610121	37	True				
ANR	6610162	Statement	13	410:16:10089:10090	6610121	38	True				
ANR	6610163	Statement	define	411:1:10093:10098	6610121	39	True				
ANR	6610164	Statement	ldA	411:8:10100:10102	6610121	40	True				
ANR	6610165	Statement	14	411:16:10108:10109	6610121	41	True				
ANR	6610166	Statement	define	412:1:10112:10117	6610121	42	True				
ANR	6610167	Statement	ldI	412:8:10119:10121	6610121	43	True				
ANR	6610168	Statement	15	412:16:10127:10128	6610121	44	True				
ANR	6610169	Statement	define	413:1:10131:10136	6610121	45	True				
ANR	6610170	Statement	ldR	413:8:10138:10140	6610121	46	True				
ANR	6610171	Statement	16	413:16:10146:10147	6610121	47	True				
ANR	6610172	Statement	define	414:1:10150:10155	6610121	48	True				
ANR	6610173	Statement	ld_BC	414:8:10157:10161	6610121	49	True				
ANR	6610174	Statement	17	414:16:10165:10166	6610121	50	True				
ANR	6610175	Statement	define	415:1:10169:10174	6610121	51	True				
ANR	6610176	Statement	ld_DE	415:8:10176:10180	6610121	52	True				
ANR	6610177	Statement	18	415:16:10184:10185	6610121	53	True				
ANR	6610178	Statement	define	416:1:10188:10193	6610121	54	True				
ANR	6610179	Statement	ld_IX	416:8:10195:10199	6610121	55	True				
ANR	6610180	Statement	19	416:16:10203:10204	6610121	56	True				
ANR	6610181	Statement	define	417:1:10207:10212	6610121	57	True				
ANR	6610182	Statement	ld_IY	417:8:10214:10218	6610121	58	True				
ANR	6610183	Statement	20	417:16:10222:10223	6610121	59	True				
ANR	6610184	Statement	define	418:1:10226:10231	6610121	60	True				
ANR	6610185	Statement	ld_NN	418:8:10233:10237	6610121	61	True				
ANR	6610186	Statement	21	418:16:10241:10242	6610121	62	True				
ANR	6610187	IdentifierDeclStatement	int i ;	419:1:10245:10250	6610121	63	True				
ANR	6610188	IdentifierDecl	i		6610121	0					
ANR	6610189	IdentifierDeclType	int		6610121	0					
ANR	6610190	Identifier	i		6610121	1					
ANR	6610191	IdentifierDeclStatement	"const char * list [ ] = { ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""bc"" , ""de"" , ""hl"" , ""sp"" , ""ix"" , ""iy"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""( bc )"" , ""( de )"" , ""( ix +)"" , ""(iy +)"" , ""(*)"" , NULL } ;"	420:1:10253:10456	6610121	64	True				
ANR	6610192	IdentifierDecl	"* list [ ] = { ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""bc"" , ""de"" , ""hl"" , ""sp"" , ""ix"" , ""iy"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""( bc )"" , ""( de )"" , ""( ix +)"" , ""(iy +)"" , ""(*)"" , NULL }"		6610121	0					
ANR	6610193	IdentifierDeclType	const char * [ ]		6610121	0					
ANR	6610194	Identifier	list		6610121	1					
ANR	6610195	AssignmentExpression	"* list [ ] = { ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""bc"" , ""de"" , ""hl"" , ""sp"" , ""ix"" , ""iy"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""( bc )"" , ""( de )"" , ""( ix +)"" , ""(iy +)"" , ""(*)"" , NULL }"		6610121	2		=			
ANR	6610196	Identifier	list		6610121	0					
ANR	6610197	InitializerList	"""ixh"""		6610121	1					
ANR	6610198	PrimaryExpression	"""ixh"""		6610121	0					
ANR	6610199	PrimaryExpression	"""ixl"""		6610121	1					
ANR	6610200	PrimaryExpression	"""iyh"""		6610121	2					
ANR	6610201	PrimaryExpression	"""iyl"""		6610121	3					
ANR	6610202	PrimaryExpression	"""bc"""		6610121	4					
ANR	6610203	PrimaryExpression	"""de"""		6610121	5					
ANR	6610204	PrimaryExpression	"""hl"""		6610121	6					
ANR	6610205	PrimaryExpression	"""sp"""		6610121	7					
ANR	6610206	PrimaryExpression	"""ix"""		6610121	8					
ANR	6610207	PrimaryExpression	"""iy"""		6610121	9					
ANR	6610208	PrimaryExpression	"""b"""		6610121	10					
ANR	6610209	PrimaryExpression	"""c"""		6610121	11					
ANR	6610210	PrimaryExpression	"""d"""		6610121	12					
ANR	6610211	PrimaryExpression	"""e"""		6610121	13					
ANR	6610212	PrimaryExpression	"""h"""		6610121	14					
ANR	6610213	PrimaryExpression	"""l"""		6610121	15					
ANR	6610214	PrimaryExpression	"""( hl )"""		6610121	16					
ANR	6610215	PrimaryExpression	"""a"""		6610121	17					
ANR	6610216	PrimaryExpression	"""i"""		6610121	18					
ANR	6610217	PrimaryExpression	"""r"""		6610121	19					
ANR	6610218	PrimaryExpression	"""( bc )"""		6610121	20					
ANR	6610219	PrimaryExpression	"""( de )"""		6610121	21					
ANR	6610220	PrimaryExpression	"""( ix +)"""		6610121	22					
ANR	6610221	PrimaryExpression	"""(iy +)"""		6610121	23					
ANR	6610222	PrimaryExpression	"""(*)"""		6610121	24					
ANR	6610223	Identifier	NULL		6610121	25					
ANR	6610224	IdentifierDeclStatement	const char * nn ;	425:1:10459:10473	6610121	65	True				
ANR	6610225	IdentifierDecl	* nn		6610121	0					
ANR	6610226	IdentifierDeclType	const char *		6610121	0					
ANR	6610227	Identifier	nn		6610121	1					
ANR	6610228	ExpressionStatement	"i = indx ( p , list , 1 , & nn )"	426:1:10476:10502	6610121	66	True				
ANR	6610229	AssignmentExpression	"i = indx ( p , list , 1 , & nn )"		6610121	0		=			
ANR	6610230	Identifier	i		6610121	0					
ANR	6610231	CallExpression	"indx ( p , list , 1 , & nn )"		6610121	1					
ANR	6610232	Callee	indx		6610121	0					
ANR	6610233	Identifier	indx		6610121	0					
ANR	6610234	ArgumentList	p		6610121	1					
ANR	6610235	Argument	p		6610121	0					
ANR	6610236	Identifier	p		6610121	0					
ANR	6610237	Argument	list		6610121	1					
ANR	6610238	Identifier	list		6610121	0					
ANR	6610239	Argument	1		6610121	2					
ANR	6610240	PrimaryExpression	1		6610121	0					
ANR	6610241	Argument	& nn		6610121	3					
ANR	6610242	UnaryOperationExpression	& nn		6610121	0					
ANR	6610243	UnaryOperator	&		6610121	0					
ANR	6610244	Identifier	nn		6610121	1					
ANR	6610245	IfStatement	if ( ! i )		6610121	67					
ANR	6610246	Condition	! i	427:5:10509:10510	6610121	0	True				
ANR	6610247	UnaryOperationExpression	! i		6610121	0					
ANR	6610248	UnaryOperator	!		6610121	0					
ANR	6610249	Identifier	i		6610121	1					
ANR	6610250	CompoundStatement		31:9:660:660	6610121	1					
ANR	6610251	ReturnStatement	return 0 ;	428:2:10517:10525	6610121	0	True				
ANR	6610252	PrimaryExpression	0		6610121	0					
ANR	6610253	IfStatement	if ( i <= 2 )		6610121	68					
ANR	6610254	Condition	i <= 2	430:5:10535:10540	6610121	0	True				
ANR	6610255	RelationalExpression	i <= 2		6610121	0		<=			
ANR	6610256	Identifier	i		6610121	0					
ANR	6610257	PrimaryExpression	2		6610121	1					
ANR	6610258	CompoundStatement		34:13:690:690	6610121	1					
ANR	6610259	ExpressionStatement	indexed = 0xdd	431:2:10547:10561	6610121	0	True				
ANR	6610260	AssignmentExpression	indexed = 0xdd		6610121	0		=			
ANR	6610261	Identifier	indexed		6610121	0					
ANR	6610262	PrimaryExpression	0xdd		6610121	1					
ANR	6610263	ReturnStatement	return ldH + ( i == 2 ) ;	432:2:10565:10586	6610121	1	True				
ANR	6610264	AdditiveExpression	ldH + ( i == 2 )		6610121	0		+			
ANR	6610265	Identifier	ldH		6610121	0					
ANR	6610266	EqualityExpression	i == 2		6610121	1		==			
ANR	6610267	Identifier	i		6610121	0					
ANR	6610268	PrimaryExpression	2		6610121	1					
ANR	6610269	IfStatement	if ( i <= 4 )		6610121	69					
ANR	6610270	Condition	i <= 4	434:5:10596:10601	6610121	0	True				
ANR	6610271	RelationalExpression	i <= 4		6610121	0		<=			
ANR	6610272	Identifier	i		6610121	0					
ANR	6610273	PrimaryExpression	4		6610121	1					
ANR	6610274	CompoundStatement		38:13:751:751	6610121	1					
ANR	6610275	ExpressionStatement	indexed = 0xfd	435:2:10608:10622	6610121	0	True				
ANR	6610276	AssignmentExpression	indexed = 0xfd		6610121	0		=			
ANR	6610277	Identifier	indexed		6610121	0					
ANR	6610278	PrimaryExpression	0xfd		6610121	1					
ANR	6610279	ReturnStatement	return ldH + ( i == 4 ) ;	436:2:10626:10647	6610121	1	True				
ANR	6610280	AdditiveExpression	ldH + ( i == 4 )		6610121	0		+			
ANR	6610281	Identifier	ldH		6610121	0					
ANR	6610282	EqualityExpression	i == 4		6610121	1		==			
ANR	6610283	Identifier	i		6610121	0					
ANR	6610284	PrimaryExpression	4		6610121	1					
ANR	6610285	ExpressionStatement	i -= 4	438:1:10653:10659	6610121	70	True				
ANR	6610286	AssignmentExpression	i -= 4		6610121	0		-=			
ANR	6610287	Identifier	i		6610121	0					
ANR	6610288	PrimaryExpression	4		6610121	1					
ANR	6610289	IfStatement	if ( i == ldIX || i == ldIY )		6610121	71					
ANR	6610290	Condition	i == ldIX || i == ldIY	439:5:10666:10687	6610121	0	True				
ANR	6610291	OrExpression	i == ldIX || i == ldIY		6610121	0		||			
ANR	6610292	EqualityExpression	i == ldIX		6610121	0		==			
ANR	6610293	Identifier	i		6610121	0					
ANR	6610294	Identifier	ldIX		6610121	1					
ANR	6610295	EqualityExpression	i == ldIY		6610121	1		==			
ANR	6610296	Identifier	i		6610121	0					
ANR	6610297	Identifier	ldIY		6610121	1					
ANR	6610298	CompoundStatement		43:29:837:837	6610121	1					
ANR	6610299	ExpressionStatement	indexed = i == ldIX ? 0xDD : 0xFD	440:2:10694:10725	6610121	0	True				
ANR	6610300	AssignmentExpression	indexed = i == ldIX ? 0xDD : 0xFD		6610121	0		=			
ANR	6610301	Identifier	indexed		6610121	0					
ANR	6610302	ConditionalExpression	i == ldIX ? 0xDD : 0xFD		6610121	1					
ANR	6610303	Condition	i == ldIX		6610121	0					
ANR	6610304	EqualityExpression	i == ldIX		6610121	0		==			
ANR	6610305	Identifier	i		6610121	0					
ANR	6610306	Identifier	ldIX		6610121	1					
ANR	6610307	PrimaryExpression	0xDD		6610121	1					
ANR	6610308	PrimaryExpression	0xFD		6610121	2					
ANR	6610309	ReturnStatement	return ldHL ;	441:2:10729:10740	6610121	1	True				
ANR	6610310	Identifier	ldHL		6610121	0					
ANR	6610311	IfStatement	if ( i == ld_IX || i == ld_IY )		6610121	72					
ANR	6610312	Condition	i == ld_IX || i == ld_IY	443:5:10750:10773	6610121	0	True				
ANR	6610313	OrExpression	i == ld_IX || i == ld_IY		6610121	0		||			
ANR	6610314	EqualityExpression	i == ld_IX		6610121	0		==			
ANR	6610315	Identifier	i		6610121	0					
ANR	6610316	Identifier	ld_IX		6610121	1					
ANR	6610317	EqualityExpression	i == ld_IY		6610121	1		==			
ANR	6610318	Identifier	i		6610121	0					
ANR	6610319	Identifier	ld_IY		6610121	1					
ANR	6610320	CompoundStatement		47:31:923:923	6610121	1					
ANR	6610321	ExpressionStatement	indexjmp = nn	444:2:10780:10793	6610121	0	True				
ANR	6610322	AssignmentExpression	indexjmp = nn		6610121	0		=			
ANR	6610323	Identifier	indexjmp		6610121	0					
ANR	6610324	Identifier	nn		6610121	1					
ANR	6610325	ExpressionStatement	indexed = i == ld_IX ? 0xDD : 0xFD	445:2:10797:10829	6610121	1	True				
ANR	6610326	AssignmentExpression	indexed = i == ld_IX ? 0xDD : 0xFD		6610121	0		=			
ANR	6610327	Identifier	indexed		6610121	0					
ANR	6610328	ConditionalExpression	i == ld_IX ? 0xDD : 0xFD		6610121	1					
ANR	6610329	Condition	i == ld_IX		6610121	0					
ANR	6610330	EqualityExpression	i == ld_IX		6610121	0		==			
ANR	6610331	Identifier	i		6610121	0					
ANR	6610332	Identifier	ld_IX		6610121	1					
ANR	6610333	PrimaryExpression	0xDD		6610121	1					
ANR	6610334	PrimaryExpression	0xFD		6610121	2					
ANR	6610335	ReturnStatement	return ld_HL ;	446:2:10833:10845	6610121	2	True				
ANR	6610336	Identifier	ld_HL		6610121	0					
ANR	6610337	IfStatement	if ( i == ld_NN )		6610121	73					
ANR	6610338	Condition	i == ld_NN	448:5:10855:10864	6610121	0	True				
ANR	6610339	EqualityExpression	i == ld_NN		6610121	0		==			
ANR	6610340	Identifier	i		6610121	0					
ANR	6610341	Identifier	ld_NN		6610121	1					
ANR	6610342	CompoundStatement		52:17:1014:1014	6610121	1					
ANR	6610343	ExpressionStatement	readword = nn	449:2:10871:10884	6610121	0	True				
ANR	6610344	AssignmentExpression	readword = nn		6610121	0		=			
ANR	6610345	Identifier	readword		6610121	0					
ANR	6610346	Identifier	nn		6610121	1					
ANR	6610347	ReturnStatement	return i ;	451:1:10890:10898	6610121	74	True				
ANR	6610348	Identifier	i		6610121	0					
ANR	6610349	ReturnType	static int		6610121	1					
ANR	6610350	Identifier	rd_ld		6610121	2					
ANR	6610351	ParameterList	const char * * p		6610121	3					
ANR	6610352	Parameter	const char * * p	397:17:9836:9849	6610121	0	True				
ANR	6610353	ParameterType	const char * *		6610121	0					
ANR	6610354	Identifier	p		6610121	1					
ANR	6610355	CFGEntryNode	ENTRY		6610121		True				
ANR	6610356	CFGExitNode	EXIT		6610121		True				
ANR	6610357	Symbol	nn		6610121						
ANR	6610358	Symbol	NULL		6610121						
ANR	6610359	Symbol	indexed		6610121						
ANR	6610360	Symbol	ld_NN		6610121						
ANR	6610361	Symbol	indx		6610121						
ANR	6610362	Symbol	i		6610121						
ANR	6610363	Symbol	& nn		6610121						
ANR	6610364	Symbol	ld_HL		6610121						
ANR	6610365	Symbol	list		6610121						
ANR	6610366	Symbol	ldHL		6610121						
ANR	6610367	Symbol	indexjmp		6610121						
ANR	6610368	Symbol	p		6610121						
ANR	6610369	Symbol	ldH		6610121						
ANR	6610370	Symbol	ldIX		6610121						
ANR	6610371	Symbol	ld_IX		6610121						
ANR	6610372	Symbol	ld_IY		6610121						
ANR	6610373	Symbol	ldIY		6610121						
ANR	6610374	Symbol	readword		6610121						
ANR	6610375	Function	rd_jp	455:0:10935:11224							
ANR	6610376	FunctionDef	rd_jp (const char * * p)		6610375	0					
ANR	6610377	CompoundStatement		455:33:10968:11224	6610375	0					
ANR	6610378	IdentifierDeclStatement	int i ;	456:1:10971:10976	6610375	0	True				
ANR	6610379	IdentifierDecl	i		6610375	0					
ANR	6610380	IdentifierDeclType	int		6610375	0					
ANR	6610381	Identifier	i		6610375	1					
ANR	6610382	IdentifierDeclStatement	"const char * list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , ""( ix )"" , ""( iy )"" , ""(hl)"" , NULL } ;"	457:1:10979:11085	6610375	1	True				
ANR	6610383	IdentifierDecl	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , ""( ix )"" , ""( iy )"" , ""(hl)"" , NULL }"		6610375	0					
ANR	6610384	IdentifierDeclType	const char * [ ]		6610375	0					
ANR	6610385	Identifier	list		6610375	1					
ANR	6610386	AssignmentExpression	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , ""( ix )"" , ""( iy )"" , ""(hl)"" , NULL }"		6610375	2		=			
ANR	6610387	Identifier	list		6610375	0					
ANR	6610388	InitializerList	"""nz"""		6610375	1					
ANR	6610389	PrimaryExpression	"""nz"""		6610375	0					
ANR	6610390	PrimaryExpression	"""z"""		6610375	1					
ANR	6610391	PrimaryExpression	"""nc"""		6610375	2					
ANR	6610392	PrimaryExpression	"""c"""		6610375	3					
ANR	6610393	PrimaryExpression	"""po"""		6610375	4					
ANR	6610394	PrimaryExpression	"""pe"""		6610375	5					
ANR	6610395	PrimaryExpression	"""p"""		6610375	6					
ANR	6610396	PrimaryExpression	"""m"""		6610375	7					
ANR	6610397	PrimaryExpression	"""( ix )"""		6610375	8					
ANR	6610398	PrimaryExpression	"""( iy )"""		6610375	9					
ANR	6610399	PrimaryExpression	"""(hl)"""		6610375	10					
ANR	6610400	Identifier	NULL		6610375	11					
ANR	6610401	ExpressionStatement	"i = indx ( p , list , 0 , NULL )"	461:1:11088:11115	6610375	2	True				
ANR	6610402	AssignmentExpression	"i = indx ( p , list , 0 , NULL )"		6610375	0		=			
ANR	6610403	Identifier	i		6610375	0					
ANR	6610404	CallExpression	"indx ( p , list , 0 , NULL )"		6610375	1					
ANR	6610405	Callee	indx		6610375	0					
ANR	6610406	Identifier	indx		6610375	0					
ANR	6610407	ArgumentList	p		6610375	1					
ANR	6610408	Argument	p		6610375	0					
ANR	6610409	Identifier	p		6610375	0					
ANR	6610410	Argument	list		6610375	1					
ANR	6610411	Identifier	list		6610375	0					
ANR	6610412	Argument	0		6610375	2					
ANR	6610413	PrimaryExpression	0		6610375	0					
ANR	6610414	Argument	NULL		6610375	3					
ANR	6610415	Identifier	NULL		6610375	0					
ANR	6610416	IfStatement	if ( i < 9 )		6610375	3					
ANR	6610417	Condition	i < 9	462:5:11122:11126	6610375	0	True				
ANR	6610418	RelationalExpression	i < 9		6610375	0		<			
ANR	6610419	Identifier	i		6610375	0					
ANR	6610420	PrimaryExpression	9		6610375	1					
ANR	6610421	CompoundStatement		8:12:160:160	6610375	1					
ANR	6610422	ReturnStatement	return i ;	463:2:11133:11141	6610375	0	True				
ANR	6610423	Identifier	i		6610375	0					
ANR	6610424	IfStatement	if ( i == 11 )		6610375	4					
ANR	6610425	Condition	i == 11	465:5:11151:11157	6610375	0	True				
ANR	6610426	EqualityExpression	i == 11		6610375	0		==			
ANR	6610427	Identifier	i		6610375	0					
ANR	6610428	PrimaryExpression	11		6610375	1					
ANR	6610429	CompoundStatement		11:14:191:191	6610375	1					
ANR	6610430	ReturnStatement	return - 1 ;	466:2:11164:11173	6610375	0	True				
ANR	6610431	UnaryOperationExpression	- 1		6610375	0					
ANR	6610432	UnaryOperator	-		6610375	0					
ANR	6610433	PrimaryExpression	1		6610375	1					
ANR	6610434	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 9 )	468:1:11179:11210	6610375	5	True				
ANR	6610435	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 9 )		6610375	0		=			
ANR	6610436	Identifier	indexed		6610375	0					
ANR	6610437	AdditiveExpression	0xDD + 0x20 * ( i - 9 )		6610375	1		+			
ANR	6610438	PrimaryExpression	0xDD		6610375	0					
ANR	6610439	MultiplicativeExpression	0x20 * ( i - 9 )		6610375	1		*			
ANR	6610440	PrimaryExpression	0x20		6610375	0					
ANR	6610441	AdditiveExpression	i - 9		6610375	1		-			
ANR	6610442	Identifier	i		6610375	0					
ANR	6610443	PrimaryExpression	9		6610375	1					
ANR	6610444	ReturnStatement	return - 1 ;	469:1:11213:11222	6610375	6	True				
ANR	6610445	UnaryOperationExpression	- 1		6610375	0					
ANR	6610446	UnaryOperator	-		6610375	0					
ANR	6610447	PrimaryExpression	1		6610375	1					
ANR	6610448	ReturnType	static int		6610375	1					
ANR	6610449	Identifier	rd_jp		6610375	2					
ANR	6610450	ParameterList	const char * * p		6610375	3					
ANR	6610451	Parameter	const char * * p	455:17:10952:10965	6610375	0	True				
ANR	6610452	ParameterType	const char * *		6610375	0					
ANR	6610453	Identifier	p		6610375	1					
ANR	6610454	CFGEntryNode	ENTRY		6610375		True				
ANR	6610455	CFGExitNode	EXIT		6610375		True				
ANR	6610456	Symbol	p		6610375						
ANR	6610457	Symbol	NULL		6610375						
ANR	6610458	Symbol	indexed		6610375						
ANR	6610459	Symbol	indx		6610375						
ANR	6610460	Symbol	i		6610375						
ANR	6610461	Symbol	list		6610375						
ANR	6610462	Function	rd_jr	473:0:11259:11384							
ANR	6610463	FunctionDef	rd_jr (const char * * p)		6610462	0					
ANR	6610464	CompoundStatement		473:33:11292:11384	6610462	0					
ANR	6610465	IdentifierDeclStatement	"const char * list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , NULL } ;"	474:1:11295:11349	6610462	0	True				
ANR	6610466	IdentifierDecl	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , NULL }"		6610462	0					
ANR	6610467	IdentifierDeclType	const char * [ ]		6610462	0					
ANR	6610468	Identifier	list		6610462	1					
ANR	6610469	AssignmentExpression	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , NULL }"		6610462	2		=			
ANR	6610470	Identifier	list		6610462	0					
ANR	6610471	InitializerList	"""nz"""		6610462	1					
ANR	6610472	PrimaryExpression	"""nz"""		6610462	0					
ANR	6610473	PrimaryExpression	"""z"""		6610462	1					
ANR	6610474	PrimaryExpression	"""nc"""		6610462	2					
ANR	6610475	PrimaryExpression	"""c"""		6610462	3					
ANR	6610476	Identifier	NULL		6610462	4					
ANR	6610477	ReturnStatement	"return indx ( p , list , 0 , NULL ) ;"	477:1:11352:11382	6610462	1	True				
ANR	6610478	CallExpression	"indx ( p , list , 0 , NULL )"		6610462	0					
ANR	6610479	Callee	indx		6610462	0					
ANR	6610480	Identifier	indx		6610462	0					
ANR	6610481	ArgumentList	p		6610462	1					
ANR	6610482	Argument	p		6610462	0					
ANR	6610483	Identifier	p		6610462	0					
ANR	6610484	Argument	list		6610462	1					
ANR	6610485	Identifier	list		6610462	0					
ANR	6610486	Argument	0		6610462	2					
ANR	6610487	PrimaryExpression	0		6610462	0					
ANR	6610488	Argument	NULL		6610462	3					
ANR	6610489	Identifier	NULL		6610462	0					
ANR	6610490	ReturnType	static int		6610462	1					
ANR	6610491	Identifier	rd_jr		6610462	2					
ANR	6610492	ParameterList	const char * * p		6610462	3					
ANR	6610493	Parameter	const char * * p	473:17:11276:11289	6610462	0	True				
ANR	6610494	ParameterType	const char * *		6610462	0					
ANR	6610495	Identifier	p		6610462	1					
ANR	6610496	CFGEntryNode	ENTRY		6610462		True				
ANR	6610497	CFGExitNode	EXIT		6610462		True				
ANR	6610498	Symbol	p		6610462						
ANR	6610499	Symbol	NULL		6610462						
ANR	6610500	Symbol	indx		6610462						
ANR	6610501	Symbol	list		6610462						
ANR	6610502	Function	rd_a	481:0:11400:11507							
ANR	6610503	FunctionDef	rd_a (const char * * p)		6610502	0					
ANR	6610504	CompoundStatement		481:32:11432:11507	6610502	0					
ANR	6610505	IdentifierDeclStatement	"const char * list [ ] = { ""a"" , NULL } ;"	482:1:11435:11472	6610502	0	True				
ANR	6610506	IdentifierDecl	"* list [ ] = { ""a"" , NULL }"		6610502	0					
ANR	6610507	IdentifierDeclType	const char * [ ]		6610502	0					
ANR	6610508	Identifier	list		6610502	1					
ANR	6610509	AssignmentExpression	"* list [ ] = { ""a"" , NULL }"		6610502	2		=			
ANR	6610510	Identifier	list		6610502	0					
ANR	6610511	InitializerList	"""a"""		6610502	1					
ANR	6610512	PrimaryExpression	"""a"""		6610502	0					
ANR	6610513	Identifier	NULL		6610502	1					
ANR	6610514	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	485:1:11475:11505	6610502	1	True				
ANR	6610515	CallExpression	"indx ( p , list , 1 , NULL )"		6610502	0					
ANR	6610516	Callee	indx		6610502	0					
ANR	6610517	Identifier	indx		6610502	0					
ANR	6610518	ArgumentList	p		6610502	1					
ANR	6610519	Argument	p		6610502	0					
ANR	6610520	Identifier	p		6610502	0					
ANR	6610521	Argument	list		6610502	1					
ANR	6610522	Identifier	list		6610502	0					
ANR	6610523	Argument	1		6610502	2					
ANR	6610524	PrimaryExpression	1		6610502	0					
ANR	6610525	Argument	NULL		6610502	3					
ANR	6610526	Identifier	NULL		6610502	0					
ANR	6610527	ReturnType	static int		6610502	1					
ANR	6610528	Identifier	rd_a		6610502	2					
ANR	6610529	ParameterList	const char * * p		6610502	3					
ANR	6610530	Parameter	const char * * p	481:16:11416:11429	6610502	0	True				
ANR	6610531	ParameterType	const char * *		6610502	0					
ANR	6610532	Identifier	p		6610502	1					
ANR	6610533	CFGEntryNode	ENTRY		6610502		True				
ANR	6610534	CFGExitNode	EXIT		6610502		True				
ANR	6610535	Symbol	p		6610502						
ANR	6610536	Symbol	NULL		6610502						
ANR	6610537	Symbol	indx		6610502						
ANR	6610538	Symbol	list		6610502						
ANR	6610539	Function	rd_stack	489:0:11533:11754							
ANR	6610540	FunctionDef	rd_stack (const char * * p)		6610539	0					
ANR	6610541	CompoundStatement		489:36:11569:11754	6610539	0					
ANR	6610542	IdentifierDeclStatement	int i ;	490:1:11572:11577	6610539	0	True				
ANR	6610543	IdentifierDecl	i		6610539	0					
ANR	6610544	IdentifierDeclType	int		6610539	0					
ANR	6610545	Identifier	i		6610539	1					
ANR	6610546	IdentifierDeclStatement	"const char * list [ ] = { ""bc"" , ""de"" , ""hl"" , ""af"" , ""ix"" , ""iy"" , NULL } ;"	491:1:11580:11648	6610539	1	True				
ANR	6610547	IdentifierDecl	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""af"" , ""ix"" , ""iy"" , NULL }"		6610539	0					
ANR	6610548	IdentifierDeclType	const char * [ ]		6610539	0					
ANR	6610549	Identifier	list		6610539	1					
ANR	6610550	AssignmentExpression	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""af"" , ""ix"" , ""iy"" , NULL }"		6610539	2		=			
ANR	6610551	Identifier	list		6610539	0					
ANR	6610552	InitializerList	"""bc"""		6610539	1					
ANR	6610553	PrimaryExpression	"""bc"""		6610539	0					
ANR	6610554	PrimaryExpression	"""de"""		6610539	1					
ANR	6610555	PrimaryExpression	"""hl"""		6610539	2					
ANR	6610556	PrimaryExpression	"""af"""		6610539	3					
ANR	6610557	PrimaryExpression	"""ix"""		6610539	4					
ANR	6610558	PrimaryExpression	"""iy"""		6610539	5					
ANR	6610559	Identifier	NULL		6610539	6					
ANR	6610560	ExpressionStatement	"i = indx ( p , list , 1 , NULL )"	494:1:11651:11678	6610539	2	True				
ANR	6610561	AssignmentExpression	"i = indx ( p , list , 1 , NULL )"		6610539	0		=			
ANR	6610562	Identifier	i		6610539	0					
ANR	6610563	CallExpression	"indx ( p , list , 1 , NULL )"		6610539	1					
ANR	6610564	Callee	indx		6610539	0					
ANR	6610565	Identifier	indx		6610539	0					
ANR	6610566	ArgumentList	p		6610539	1					
ANR	6610567	Argument	p		6610539	0					
ANR	6610568	Identifier	p		6610539	0					
ANR	6610569	Argument	list		6610539	1					
ANR	6610570	Identifier	list		6610539	0					
ANR	6610571	Argument	1		6610539	2					
ANR	6610572	PrimaryExpression	1		6610539	0					
ANR	6610573	Argument	NULL		6610539	3					
ANR	6610574	Identifier	NULL		6610539	0					
ANR	6610575	IfStatement	if ( i < 5 )		6610539	3					
ANR	6610576	Condition	i < 5	495:5:11685:11689	6610539	0	True				
ANR	6610577	RelationalExpression	i < 5		6610539	0		<			
ANR	6610578	Identifier	i		6610539	0					
ANR	6610579	PrimaryExpression	5		6610539	1					
ANR	6610580	CompoundStatement		7:12:122:122	6610539	1					
ANR	6610581	ReturnStatement	return i ;	496:2:11696:11704	6610539	0	True				
ANR	6610582	Identifier	i		6610539	0					
ANR	6610583	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 5 )	498:1:11710:11741	6610539	4	True				
ANR	6610584	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 5 )		6610539	0		=			
ANR	6610585	Identifier	indexed		6610539	0					
ANR	6610586	AdditiveExpression	0xDD + 0x20 * ( i - 5 )		6610539	1		+			
ANR	6610587	PrimaryExpression	0xDD		6610539	0					
ANR	6610588	MultiplicativeExpression	0x20 * ( i - 5 )		6610539	1		*			
ANR	6610589	PrimaryExpression	0x20		6610539	0					
ANR	6610590	AdditiveExpression	i - 5		6610539	1		-			
ANR	6610591	Identifier	i		6610539	0					
ANR	6610592	PrimaryExpression	5		6610539	1					
ANR	6610593	ReturnStatement	return 3 ;	499:1:11744:11752	6610539	5	True				
ANR	6610594	PrimaryExpression	3		6610539	0					
ANR	6610595	ReturnType	static int		6610539	1					
ANR	6610596	Identifier	rd_stack		6610539	2					
ANR	6610597	ParameterList	const char * * p		6610539	3					
ANR	6610598	Parameter	const char * * p	489:20:11553:11566	6610539	0	True				
ANR	6610599	ParameterType	const char * *		6610539	0					
ANR	6610600	Identifier	p		6610539	1					
ANR	6610601	CFGEntryNode	ENTRY		6610539		True				
ANR	6610602	CFGExitNode	EXIT		6610539		True				
ANR	6610603	Symbol	p		6610539						
ANR	6610604	Symbol	NULL		6610539						
ANR	6610605	Symbol	indexed		6610539						
ANR	6610606	Symbol	indx		6610539						
ANR	6610607	Symbol	i		6610539						
ANR	6610608	Symbol	list		6610539						
ANR	6610609	Function	rd_r_add	505:0:11897:12560							
ANR	6610610	FunctionDef	rd_r_add (const char * * p)		6610609	0					
ANR	6610611	CompoundStatement		505:36:11933:12560	6610609	0					
ANR	6610612	Statement	define	506:1:11936:11941	6610609	0	True				
ANR	6610613	Statement	addHL	506:8:11943:11947	6610609	1	True				
ANR	6610614	Statement	15	506:16:11951:11952	6610609	2	True				
ANR	6610615	IdentifierDeclStatement	int i ;	507:1:11955:11960	6610609	3	True				
ANR	6610616	IdentifierDecl	i		6610609	0					
ANR	6610617	IdentifierDeclType	int		6610609	0					
ANR	6610618	Identifier	i		6610609	1					
ANR	6610619	IdentifierDeclStatement	"const char * list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""hl"" , ""ix"" , ""iy"" , ""*"" , NULL } ;"	508:1:11963:12115	6610609	4	True				
ANR	6610620	IdentifierDecl	"* list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""hl"" , ""ix"" , ""iy"" , ""*"" , NULL }"		6610609	0					
ANR	6610621	IdentifierDeclType	const char * [ ]		6610609	0					
ANR	6610622	Identifier	list		6610609	1					
ANR	6610623	AssignmentExpression	"* list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""hl"" , ""ix"" , ""iy"" , ""*"" , NULL }"		6610609	2		=			
ANR	6610624	Identifier	list		6610609	0					
ANR	6610625	InitializerList	"""ixl"""		6610609	1					
ANR	6610626	PrimaryExpression	"""ixl"""		6610609	0					
ANR	6610627	PrimaryExpression	"""ixh"""		6610609	1					
ANR	6610628	PrimaryExpression	"""iyl"""		6610609	2					
ANR	6610629	PrimaryExpression	"""iyh"""		6610609	3					
ANR	6610630	PrimaryExpression	"""b"""		6610609	4					
ANR	6610631	PrimaryExpression	"""c"""		6610609	5					
ANR	6610632	PrimaryExpression	"""d"""		6610609	6					
ANR	6610633	PrimaryExpression	"""e"""		6610609	7					
ANR	6610634	PrimaryExpression	"""h"""		6610609	8					
ANR	6610635	PrimaryExpression	"""l"""		6610609	9					
ANR	6610636	PrimaryExpression	"""( hl )"""		6610609	10					
ANR	6610637	PrimaryExpression	"""a"""		6610609	11					
ANR	6610638	PrimaryExpression	"""( ix +)"""		6610609	12					
ANR	6610639	PrimaryExpression	"""( iy +)"""		6610609	13					
ANR	6610640	PrimaryExpression	"""hl"""		6610609	14					
ANR	6610641	PrimaryExpression	"""ix"""		6610609	15					
ANR	6610642	PrimaryExpression	"""iy"""		6610609	16					
ANR	6610643	PrimaryExpression	"""*"""		6610609	17					
ANR	6610644	Identifier	NULL		6610609	18					
ANR	6610645	IdentifierDeclStatement	const char * nn ;	512:1:12118:12132	6610609	5	True				
ANR	6610646	IdentifierDecl	* nn		6610609	0					
ANR	6610647	IdentifierDeclType	const char *		6610609	0					
ANR	6610648	Identifier	nn		6610609	1					
ANR	6610649	ExpressionStatement	"i = indx ( p , list , 0 , & nn )"	513:1:12135:12161	6610609	6	True				
ANR	6610650	AssignmentExpression	"i = indx ( p , list , 0 , & nn )"		6610609	0		=			
ANR	6610651	Identifier	i		6610609	0					
ANR	6610652	CallExpression	"indx ( p , list , 0 , & nn )"		6610609	1					
ANR	6610653	Callee	indx		6610609	0					
ANR	6610654	Identifier	indx		6610609	0					
ANR	6610655	ArgumentList	p		6610609	1					
ANR	6610656	Argument	p		6610609	0					
ANR	6610657	Identifier	p		6610609	0					
ANR	6610658	Argument	list		6610609	1					
ANR	6610659	Identifier	list		6610609	0					
ANR	6610660	Argument	0		6610609	2					
ANR	6610661	PrimaryExpression	0		6610609	0					
ANR	6610662	Argument	& nn		6610609	3					
ANR	6610663	UnaryOperationExpression	& nn		6610609	0					
ANR	6610664	UnaryOperator	&		6610609	0					
ANR	6610665	Identifier	nn		6610609	1					
ANR	6610666	IfStatement	if ( i == 18 )		6610609	7					
ANR	6610667	Condition	i == 18	514:5:12168:12174	6610609	0	True				
ANR	6610668	EqualityExpression	i == 18		6610609	0		==			
ANR	6610669	Identifier	i		6610609	0					
ANR	6610670	PrimaryExpression	18		6610609	1					
ANR	6610671	CompoundStatement		10:14:243:243	6610609	1					
ANR	6610672	ExpressionStatement	readbyte = nn	515:2:12198:12211	6610609	0	True				
ANR	6610673	AssignmentExpression	readbyte = nn		6610609	0		=			
ANR	6610674	Identifier	readbyte		6610609	0					
ANR	6610675	Identifier	nn		6610609	1					
ANR	6610676	ExpressionStatement	writebyte = 1	516:2:12215:12228	6610609	1	True				
ANR	6610677	AssignmentExpression	writebyte = 1		6610609	0		=			
ANR	6610678	Identifier	writebyte		6610609	0					
ANR	6610679	PrimaryExpression	1		6610609	1					
ANR	6610680	ReturnStatement	return 7 ;	517:2:12232:12240	6610609	2	True				
ANR	6610681	PrimaryExpression	7		6610609	0					
ANR	6610682	IfStatement	if ( i > 14 )		6610609	8					
ANR	6610683	Condition	i > 14	519:5:12250:12255	6610609	0	True				
ANR	6610684	RelationalExpression	i > 14		6610609	0		>			
ANR	6610685	Identifier	i		6610609	0					
ANR	6610686	PrimaryExpression	14		6610609	1					
ANR	6610687	CompoundStatement		15:13:324:324	6610609	1					
ANR	6610688	IfStatement	if ( i > 15 )		6610609	0					
ANR	6610689	Condition	i > 15	520:6:12283:12288	6610609	0	True				
ANR	6610690	RelationalExpression	i > 15		6610609	0		>			
ANR	6610691	Identifier	i		6610609	0					
ANR	6610692	PrimaryExpression	15		6610609	1					
ANR	6610693	CompoundStatement		16:14:357:357	6610609	1					
ANR	6610694	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 16 )	521:3:12296:12328	6610609	0	True				
ANR	6610695	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 16 )		6610609	0		=			
ANR	6610696	Identifier	indexed		6610609	0					
ANR	6610697	AdditiveExpression	0xDD + 0x20 * ( i - 16 )		6610609	1		+			
ANR	6610698	PrimaryExpression	0xDD		6610609	0					
ANR	6610699	MultiplicativeExpression	0x20 * ( i - 16 )		6610609	1		*			
ANR	6610700	PrimaryExpression	0x20		6610609	0					
ANR	6610701	AdditiveExpression	i - 16		6610609	1		-			
ANR	6610702	Identifier	i		6610609	0					
ANR	6610703	PrimaryExpression	16		6610609	1					
ANR	6610704	ReturnStatement	return addHL ;	523:2:12336:12348	6610609	1	True				
ANR	6610705	Identifier	addHL		6610609	0					
ANR	6610706	IfStatement	if ( i <= 4 )		6610609	9					
ANR	6610707	Condition	i <= 4	525:5:12358:12363	6610609	0	True				
ANR	6610708	RelationalExpression	i <= 4		6610609	0		<=			
ANR	6610709	Identifier	i		6610609	0					
ANR	6610710	PrimaryExpression	4		6610609	1					
ANR	6610711	CompoundStatement		21:13:432:432	6610609	1					
ANR	6610712	ExpressionStatement	indexed = 0xdd + 0x20 * ( i > 2 )	526:2:12387:12418	6610609	0	True				
ANR	6610713	AssignmentExpression	indexed = 0xdd + 0x20 * ( i > 2 )		6610609	0		=			
ANR	6610714	Identifier	indexed		6610609	0					
ANR	6610715	AdditiveExpression	0xdd + 0x20 * ( i > 2 )		6610609	1		+			
ANR	6610716	PrimaryExpression	0xdd		6610609	0					
ANR	6610717	MultiplicativeExpression	0x20 * ( i > 2 )		6610609	1		*			
ANR	6610718	PrimaryExpression	0x20		6610609	0					
ANR	6610719	RelationalExpression	i > 2		6610609	1		>			
ANR	6610720	Identifier	i		6610609	0					
ANR	6610721	PrimaryExpression	2		6610609	1					
ANR	6610722	ReturnStatement	return 6 - ( i & 1 ) ;	527:2:12422:12440	6610609	1	True				
ANR	6610723	AdditiveExpression	6 - ( i & 1 )		6610609	0		-			
ANR	6610724	PrimaryExpression	6		6610609	0					
ANR	6610725	BitAndExpression	i & 1		6610609	1		&			
ANR	6610726	Identifier	i		6610609	0					
ANR	6610727	PrimaryExpression	1		6610609	1					
ANR	6610728	ExpressionStatement	i -= 4	529:1:12446:12452	6610609	10	True				
ANR	6610729	AssignmentExpression	i -= 4		6610609	0		-=			
ANR	6610730	Identifier	i		6610609	0					
ANR	6610731	PrimaryExpression	4		6610609	1					
ANR	6610732	IfStatement	if ( i < 9 )		6610609	11					
ANR	6610733	Condition	i < 9	530:5:12459:12463	6610609	0	True				
ANR	6610734	RelationalExpression	i < 9		6610609	0		<			
ANR	6610735	Identifier	i		6610609	0					
ANR	6610736	PrimaryExpression	9		6610609	1					
ANR	6610737	CompoundStatement		26:12:532:532	6610609	1					
ANR	6610738	ReturnStatement	return i ;	531:2:12470:12478	6610609	0	True				
ANR	6610739	Identifier	i		6610609	0					
ANR	6610740	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 9 )	533:1:12484:12515	6610609	12	True				
ANR	6610741	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 9 )		6610609	0		=			
ANR	6610742	Identifier	indexed		6610609	0					
ANR	6610743	AdditiveExpression	0xDD + 0x20 * ( i - 9 )		6610609	1		+			
ANR	6610744	PrimaryExpression	0xDD		6610609	0					
ANR	6610745	MultiplicativeExpression	0x20 * ( i - 9 )		6610609	1		*			
ANR	6610746	PrimaryExpression	0x20		6610609	0					
ANR	6610747	AdditiveExpression	i - 9		6610609	1		-			
ANR	6610748	Identifier	i		6610609	0					
ANR	6610749	PrimaryExpression	9		6610609	1					
ANR	6610750	ExpressionStatement	indexjmp = nn	534:1:12534:12547	6610609	13	True				
ANR	6610751	AssignmentExpression	indexjmp = nn		6610609	0		=			
ANR	6610752	Identifier	indexjmp		6610609	0					
ANR	6610753	Identifier	nn		6610609	1					
ANR	6610754	ReturnStatement	return 7 ;	535:1:12550:12558	6610609	14	True				
ANR	6610755	PrimaryExpression	7		6610609	0					
ANR	6610756	ReturnType	static int		6610609	1					
ANR	6610757	Identifier	rd_r_add		6610609	2					
ANR	6610758	ParameterList	const char * * p		6610609	3					
ANR	6610759	Parameter	const char * * p	505:20:11917:11930	6610609	0	True				
ANR	6610760	ParameterType	const char * *		6610609	0					
ANR	6610761	Identifier	p		6610609	1					
ANR	6610762	CFGEntryNode	ENTRY		6610609		True				
ANR	6610763	CFGExitNode	EXIT		6610609		True				
ANR	6610764	Symbol	p		6610609						
ANR	6610765	Symbol	nn		6610609						
ANR	6610766	Symbol	addHL		6610609						
ANR	6610767	Symbol	NULL		6610609						
ANR	6610768	Symbol	writebyte		6610609						
ANR	6610769	Symbol	indexed		6610609						
ANR	6610770	Symbol	indx		6610609						
ANR	6610771	Symbol	i		6610609						
ANR	6610772	Symbol	& nn		6610609						
ANR	6610773	Symbol	list		6610609						
ANR	6610774	Symbol	readbyte		6610609						
ANR	6610775	Symbol	indexjmp		6610609						
ANR	6610776	Function	rd_rr_	539:0:12590:12718							
ANR	6610777	FunctionDef	rd_rr_ (const char * * p)		6610776	0					
ANR	6610778	CompoundStatement		539:34:12624:12718	6610776	0					
ANR	6610779	IdentifierDeclStatement	"const char * list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL } ;"	540:1:12627:12683	6610776	0	True				
ANR	6610780	IdentifierDecl	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL }"		6610776	0					
ANR	6610781	IdentifierDeclType	const char * [ ]		6610776	0					
ANR	6610782	Identifier	list		6610776	1					
ANR	6610783	AssignmentExpression	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL }"		6610776	2		=			
ANR	6610784	Identifier	list		6610776	0					
ANR	6610785	InitializerList	"""bc"""		6610776	1					
ANR	6610786	PrimaryExpression	"""bc"""		6610776	0					
ANR	6610787	PrimaryExpression	"""de"""		6610776	1					
ANR	6610788	PrimaryExpression	"""hl"""		6610776	2					
ANR	6610789	PrimaryExpression	"""sp"""		6610776	3					
ANR	6610790	Identifier	NULL		6610776	4					
ANR	6610791	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	543:1:12686:12716	6610776	1	True				
ANR	6610792	CallExpression	"indx ( p , list , 1 , NULL )"		6610776	0					
ANR	6610793	Callee	indx		6610776	0					
ANR	6610794	Identifier	indx		6610776	0					
ANR	6610795	ArgumentList	p		6610776	1					
ANR	6610796	Argument	p		6610776	0					
ANR	6610797	Identifier	p		6610776	0					
ANR	6610798	Argument	list		6610776	1					
ANR	6610799	Identifier	list		6610776	0					
ANR	6610800	Argument	1		6610776	2					
ANR	6610801	PrimaryExpression	1		6610776	0					
ANR	6610802	Argument	NULL		6610776	3					
ANR	6610803	Identifier	NULL		6610776	0					
ANR	6610804	ReturnType	static int		6610776	1					
ANR	6610805	Identifier	rd_rr_		6610776	2					
ANR	6610806	ParameterList	const char * * p		6610776	3					
ANR	6610807	Parameter	const char * * p	539:18:12608:12621	6610776	0	True				
ANR	6610808	ParameterType	const char * *		6610776	0					
ANR	6610809	Identifier	p		6610776	1					
ANR	6610810	CFGEntryNode	ENTRY		6610776		True				
ANR	6610811	CFGExitNode	EXIT		6610776		True				
ANR	6610812	Symbol	p		6610776						
ANR	6610813	Symbol	NULL		6610776						
ANR	6610814	Symbol	indx		6610776						
ANR	6610815	Symbol	list		6610776						
ANR	6610816	Function	rd_rrxx	547:0:12800:13173							
ANR	6610817	FunctionDef	rd_rrxx (const char * * p)		6610816	0					
ANR	6610818	CompoundStatement		547:35:12835:13173	6610816	0					
ANR	6610819	IdentifierDeclStatement	"const char * listx [ ] = { ""bc"" , ""de"" , ""ix"" , ""sp"" , NULL } ;"	548:1:12838:12895	6610816	0	True				
ANR	6610820	IdentifierDecl	"* listx [ ] = { ""bc"" , ""de"" , ""ix"" , ""sp"" , NULL }"		6610816	0					
ANR	6610821	IdentifierDeclType	const char * [ ]		6610816	0					
ANR	6610822	Identifier	listx		6610816	1					
ANR	6610823	AssignmentExpression	"* listx [ ] = { ""bc"" , ""de"" , ""ix"" , ""sp"" , NULL }"		6610816	2		=			
ANR	6610824	Identifier	listx		6610816	0					
ANR	6610825	InitializerList	"""bc"""		6610816	1					
ANR	6610826	PrimaryExpression	"""bc"""		6610816	0					
ANR	6610827	PrimaryExpression	"""de"""		6610816	1					
ANR	6610828	PrimaryExpression	"""ix"""		6610816	2					
ANR	6610829	PrimaryExpression	"""sp"""		6610816	3					
ANR	6610830	Identifier	NULL		6610816	4					
ANR	6610831	IdentifierDeclStatement	"const char * listy [ ] = { ""bc"" , ""de"" , ""iy"" , ""sp"" , NULL } ;"	551:1:12898:12955	6610816	1	True				
ANR	6610832	IdentifierDecl	"* listy [ ] = { ""bc"" , ""de"" , ""iy"" , ""sp"" , NULL }"		6610816	0					
ANR	6610833	IdentifierDeclType	const char * [ ]		6610816	0					
ANR	6610834	Identifier	listy		6610816	1					
ANR	6610835	AssignmentExpression	"* listy [ ] = { ""bc"" , ""de"" , ""iy"" , ""sp"" , NULL }"		6610816	2		=			
ANR	6610836	Identifier	listy		6610816	0					
ANR	6610837	InitializerList	"""bc"""		6610816	1					
ANR	6610838	PrimaryExpression	"""bc"""		6610816	0					
ANR	6610839	PrimaryExpression	"""de"""		6610816	1					
ANR	6610840	PrimaryExpression	"""iy"""		6610816	2					
ANR	6610841	PrimaryExpression	"""sp"""		6610816	3					
ANR	6610842	Identifier	NULL		6610816	4					
ANR	6610843	IdentifierDeclStatement	"const char * list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL } ;"	554:1:12958:13014	6610816	2	True				
ANR	6610844	IdentifierDecl	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL }"		6610816	0					
ANR	6610845	IdentifierDeclType	const char * [ ]		6610816	0					
ANR	6610846	Identifier	list		6610816	1					
ANR	6610847	AssignmentExpression	"* list [ ] = { ""bc"" , ""de"" , ""hl"" , ""sp"" , NULL }"		6610816	2		=			
ANR	6610848	Identifier	list		6610816	0					
ANR	6610849	InitializerList	"""bc"""		6610816	1					
ANR	6610850	PrimaryExpression	"""bc"""		6610816	0					
ANR	6610851	PrimaryExpression	"""de"""		6610816	1					
ANR	6610852	PrimaryExpression	"""hl"""		6610816	2					
ANR	6610853	PrimaryExpression	"""sp"""		6610816	3					
ANR	6610854	Identifier	NULL		6610816	4					
ANR	6610855	IfStatement	if ( indexed == 0xdd )		6610816	3					
ANR	6610856	Condition	indexed == 0xdd	557:5:13021:13035	6610816	0	True				
ANR	6610857	EqualityExpression	indexed == 0xdd		6610816	0		==			
ANR	6610858	Identifier	indexed		6610816	0					
ANR	6610859	PrimaryExpression	0xdd		6610816	1					
ANR	6610860	CompoundStatement		11:22:202:202	6610816	1					
ANR	6610861	ReturnStatement	"return indx ( p , listx , 1 , NULL ) ;"	558:2:13042:13073	6610816	0	True				
ANR	6610862	CallExpression	"indx ( p , listx , 1 , NULL )"		6610816	0					
ANR	6610863	Callee	indx		6610816	0					
ANR	6610864	Identifier	indx		6610816	0					
ANR	6610865	ArgumentList	p		6610816	1					
ANR	6610866	Argument	p		6610816	0					
ANR	6610867	Identifier	p		6610816	0					
ANR	6610868	Argument	listx		6610816	1					
ANR	6610869	Identifier	listx		6610816	0					
ANR	6610870	Argument	1		6610816	2					
ANR	6610871	PrimaryExpression	1		6610816	0					
ANR	6610872	Argument	NULL		6610816	3					
ANR	6610873	Identifier	NULL		6610816	0					
ANR	6610874	IfStatement	if ( indexed == 0xfd )		6610816	4					
ANR	6610875	Condition	indexed == 0xfd	560:5:13083:13097	6610816	0	True				
ANR	6610876	EqualityExpression	indexed == 0xfd		6610816	0		==			
ANR	6610877	Identifier	indexed		6610816	0					
ANR	6610878	PrimaryExpression	0xfd		6610816	1					
ANR	6610879	CompoundStatement		14:22:264:264	6610816	1					
ANR	6610880	ReturnStatement	"return indx ( p , listy , 1 , NULL ) ;"	561:2:13104:13135	6610816	0	True				
ANR	6610881	CallExpression	"indx ( p , listy , 1 , NULL )"		6610816	0					
ANR	6610882	Callee	indx		6610816	0					
ANR	6610883	Identifier	indx		6610816	0					
ANR	6610884	ArgumentList	p		6610816	1					
ANR	6610885	Argument	p		6610816	0					
ANR	6610886	Identifier	p		6610816	0					
ANR	6610887	Argument	listy		6610816	1					
ANR	6610888	Identifier	listy		6610816	0					
ANR	6610889	Argument	1		6610816	2					
ANR	6610890	PrimaryExpression	1		6610816	0					
ANR	6610891	Argument	NULL		6610816	3					
ANR	6610892	Identifier	NULL		6610816	0					
ANR	6610893	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	563:1:13141:13171	6610816	5	True				
ANR	6610894	CallExpression	"indx ( p , list , 1 , NULL )"		6610816	0					
ANR	6610895	Callee	indx		6610816	0					
ANR	6610896	Identifier	indx		6610816	0					
ANR	6610897	ArgumentList	p		6610816	1					
ANR	6610898	Argument	p		6610816	0					
ANR	6610899	Identifier	p		6610816	0					
ANR	6610900	Argument	list		6610816	1					
ANR	6610901	Identifier	list		6610816	0					
ANR	6610902	Argument	1		6610816	2					
ANR	6610903	PrimaryExpression	1		6610816	0					
ANR	6610904	Argument	NULL		6610816	3					
ANR	6610905	Identifier	NULL		6610816	0					
ANR	6610906	ReturnType	static int		6610816	1					
ANR	6610907	Identifier	rd_rrxx		6610816	2					
ANR	6610908	ParameterList	const char * * p		6610816	3					
ANR	6610909	Parameter	const char * * p	547:19:12819:12832	6610816	0	True				
ANR	6610910	ParameterType	const char * *		6610816	0					
ANR	6610911	Identifier	p		6610816	1					
ANR	6610912	CFGEntryNode	ENTRY		6610816		True				
ANR	6610913	CFGExitNode	EXIT		6610816		True				
ANR	6610914	Symbol	p		6610816						
ANR	6610915	Symbol	NULL		6610816						
ANR	6610916	Symbol	indexed		6610816						
ANR	6610917	Symbol	listy		6610816						
ANR	6610918	Symbol	indx		6610816						
ANR	6610919	Symbol	listx		6610816						
ANR	6610920	Symbol	list		6610816						
ANR	6610921	Function	rd_r	568:0:13258:13739							
ANR	6610922	FunctionDef	rd_r (const char * * p)		6610921	0					
ANR	6610923	CompoundStatement		568:32:13290:13739	6610921	0					
ANR	6610924	IdentifierDeclStatement	int i ;	569:1:13293:13298	6610921	0	True				
ANR	6610925	IdentifierDecl	i		6610921	0					
ANR	6610926	IdentifierDeclType	int		6610921	0					
ANR	6610927	Identifier	i		6610921	1					
ANR	6610928	IdentifierDeclStatement	const char * nn ;	570:1:13301:13315	6610921	1	True				
ANR	6610929	IdentifierDecl	* nn		6610921	0					
ANR	6610930	IdentifierDeclType	const char *		6610921	0					
ANR	6610931	Identifier	nn		6610921	1					
ANR	6610932	IdentifierDeclStatement	"const char * list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""*"" , NULL } ;"	571:1:13318:13452	6610921	2	True				
ANR	6610933	IdentifierDecl	"* list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""*"" , NULL }"		6610921	0					
ANR	6610934	IdentifierDeclType	const char * [ ]		6610921	0					
ANR	6610935	Identifier	list		6610921	1					
ANR	6610936	AssignmentExpression	"* list [ ] = { ""ixl"" , ""ixh"" , ""iyl"" , ""iyh"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""*"" , NULL }"		6610921	2		=			
ANR	6610937	Identifier	list		6610921	0					
ANR	6610938	InitializerList	"""ixl"""		6610921	1					
ANR	6610939	PrimaryExpression	"""ixl"""		6610921	0					
ANR	6610940	PrimaryExpression	"""ixh"""		6610921	1					
ANR	6610941	PrimaryExpression	"""iyl"""		6610921	2					
ANR	6610942	PrimaryExpression	"""iyh"""		6610921	3					
ANR	6610943	PrimaryExpression	"""b"""		6610921	4					
ANR	6610944	PrimaryExpression	"""c"""		6610921	5					
ANR	6610945	PrimaryExpression	"""d"""		6610921	6					
ANR	6610946	PrimaryExpression	"""e"""		6610921	7					
ANR	6610947	PrimaryExpression	"""h"""		6610921	8					
ANR	6610948	PrimaryExpression	"""l"""		6610921	9					
ANR	6610949	PrimaryExpression	"""( hl )"""		6610921	10					
ANR	6610950	PrimaryExpression	"""a"""		6610921	11					
ANR	6610951	PrimaryExpression	"""( ix +)"""		6610921	12					
ANR	6610952	PrimaryExpression	"""( iy +)"""		6610921	13					
ANR	6610953	PrimaryExpression	"""*"""		6610921	14					
ANR	6610954	Identifier	NULL		6610921	15					
ANR	6610955	ExpressionStatement	"i = indx ( p , list , 0 , & nn )"	575:1:13455:13481	6610921	3	True				
ANR	6610956	AssignmentExpression	"i = indx ( p , list , 0 , & nn )"		6610921	0		=			
ANR	6610957	Identifier	i		6610921	0					
ANR	6610958	CallExpression	"indx ( p , list , 0 , & nn )"		6610921	1					
ANR	6610959	Callee	indx		6610921	0					
ANR	6610960	Identifier	indx		6610921	0					
ANR	6610961	ArgumentList	p		6610921	1					
ANR	6610962	Argument	p		6610921	0					
ANR	6610963	Identifier	p		6610921	0					
ANR	6610964	Argument	list		6610921	1					
ANR	6610965	Identifier	list		6610921	0					
ANR	6610966	Argument	0		6610921	2					
ANR	6610967	PrimaryExpression	0		6610921	0					
ANR	6610968	Argument	& nn		6610921	3					
ANR	6610969	UnaryOperationExpression	& nn		6610921	0					
ANR	6610970	UnaryOperator	&		6610921	0					
ANR	6610971	Identifier	nn		6610921	1					
ANR	6610972	IfStatement	if ( i == 15 )		6610921	4					
ANR	6610973	Condition	i == 15	576:5:13488:13494	6610921	0	True				
ANR	6610974	EqualityExpression	i == 15		6610921	0		==			
ANR	6610975	Identifier	i		6610921	0					
ANR	6610976	PrimaryExpression	15		6610921	1					
ANR	6610977	CompoundStatement		9:14:206:206	6610921	1					
ANR	6610978	ExpressionStatement	readbyte = nn	577:2:13518:13531	6610921	0	True				
ANR	6610979	AssignmentExpression	readbyte = nn		6610921	0		=			
ANR	6610980	Identifier	readbyte		6610921	0					
ANR	6610981	Identifier	nn		6610921	1					
ANR	6610982	ExpressionStatement	writebyte = 1	578:2:13535:13548	6610921	1	True				
ANR	6610983	AssignmentExpression	writebyte = 1		6610921	0		=			
ANR	6610984	Identifier	writebyte		6610921	0					
ANR	6610985	PrimaryExpression	1		6610921	1					
ANR	6610986	ReturnStatement	return 7 ;	579:2:13552:13560	6610921	2	True				
ANR	6610987	PrimaryExpression	7		6610921	0					
ANR	6610988	IfStatement	if ( i <= 4 )		6610921	5					
ANR	6610989	Condition	i <= 4	581:5:13570:13575	6610921	0	True				
ANR	6610990	RelationalExpression	i <= 4		6610921	0		<=			
ANR	6610991	Identifier	i		6610921	0					
ANR	6610992	PrimaryExpression	4		6610921	1					
ANR	6610993	CompoundStatement		14:13:287:287	6610921	1					
ANR	6610994	ExpressionStatement	indexed = 0xdd + 0x20 * ( i > 2 )	582:2:13582:13613	6610921	0	True				
ANR	6610995	AssignmentExpression	indexed = 0xdd + 0x20 * ( i > 2 )		6610921	0		=			
ANR	6610996	Identifier	indexed		6610921	0					
ANR	6610997	AdditiveExpression	0xdd + 0x20 * ( i > 2 )		6610921	1		+			
ANR	6610998	PrimaryExpression	0xdd		6610921	0					
ANR	6610999	MultiplicativeExpression	0x20 * ( i > 2 )		6610921	1		*			
ANR	6611000	PrimaryExpression	0x20		6610921	0					
ANR	6611001	RelationalExpression	i > 2		6610921	1		>			
ANR	6611002	Identifier	i		6610921	0					
ANR	6611003	PrimaryExpression	2		6610921	1					
ANR	6611004	ReturnStatement	return 6 - ( i & 1 ) ;	583:2:13617:13635	6610921	1	True				
ANR	6611005	AdditiveExpression	6 - ( i & 1 )		6610921	0		-			
ANR	6611006	PrimaryExpression	6		6610921	0					
ANR	6611007	BitAndExpression	i & 1		6610921	1		&			
ANR	6611008	Identifier	i		6610921	0					
ANR	6611009	PrimaryExpression	1		6610921	1					
ANR	6611010	ExpressionStatement	i -= 4	585:1:13641:13647	6610921	6	True				
ANR	6611011	AssignmentExpression	i -= 4		6610921	0		-=			
ANR	6611012	Identifier	i		6610921	0					
ANR	6611013	PrimaryExpression	4		6610921	1					
ANR	6611014	IfStatement	if ( i < 9 )		6610921	7					
ANR	6611015	Condition	i < 9	586:5:13654:13658	6610921	0	True				
ANR	6611016	RelationalExpression	i < 9		6610921	0		<			
ANR	6611017	Identifier	i		6610921	0					
ANR	6611018	PrimaryExpression	9		6610921	1					
ANR	6611019	CompoundStatement		19:12:370:370	6610921	1					
ANR	6611020	ReturnStatement	return i ;	587:2:13665:13673	6610921	0	True				
ANR	6611021	Identifier	i		6610921	0					
ANR	6611022	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 9 )	589:1:13679:13710	6610921	8	True				
ANR	6611023	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 9 )		6610921	0		=			
ANR	6611024	Identifier	indexed		6610921	0					
ANR	6611025	AdditiveExpression	0xDD + 0x20 * ( i - 9 )		6610921	1		+			
ANR	6611026	PrimaryExpression	0xDD		6610921	0					
ANR	6611027	MultiplicativeExpression	0x20 * ( i - 9 )		6610921	1		*			
ANR	6611028	PrimaryExpression	0x20		6610921	0					
ANR	6611029	AdditiveExpression	i - 9		6610921	1		-			
ANR	6611030	Identifier	i		6610921	0					
ANR	6611031	PrimaryExpression	9		6610921	1					
ANR	6611032	ExpressionStatement	indexjmp = nn	590:1:13713:13726	6610921	9	True				
ANR	6611033	AssignmentExpression	indexjmp = nn		6610921	0		=			
ANR	6611034	Identifier	indexjmp		6610921	0					
ANR	6611035	Identifier	nn		6610921	1					
ANR	6611036	ReturnStatement	return 7 ;	591:1:13729:13737	6610921	10	True				
ANR	6611037	PrimaryExpression	7		6610921	0					
ANR	6611038	ReturnType	static int		6610921	1					
ANR	6611039	Identifier	rd_r		6610921	2					
ANR	6611040	ParameterList	const char * * p		6610921	3					
ANR	6611041	Parameter	const char * * p	568:16:13274:13287	6610921	0	True				
ANR	6611042	ParameterType	const char * *		6610921	0					
ANR	6611043	Identifier	p		6610921	1					
ANR	6611044	CFGEntryNode	ENTRY		6610921		True				
ANR	6611045	CFGExitNode	EXIT		6610921		True				
ANR	6611046	Symbol	p		6610921						
ANR	6611047	Symbol	nn		6610921						
ANR	6611048	Symbol	NULL		6610921						
ANR	6611049	Symbol	writebyte		6610921						
ANR	6611050	Symbol	indexed		6610921						
ANR	6611051	Symbol	indx		6610921						
ANR	6611052	Symbol	i		6610921						
ANR	6611053	Symbol	& nn		6610921						
ANR	6611054	Symbol	list		6610921						
ANR	6611055	Symbol	readbyte		6610921						
ANR	6611056	Symbol	indexjmp		6610921						
ANR	6611057	Function	rd_r_	595:0:13776:14030							
ANR	6611058	FunctionDef	rd_r_ (const char * * p)		6611057	0					
ANR	6611059	CompoundStatement		595:33:13809:14030	6611057	0					
ANR	6611060	IdentifierDeclStatement	int i ;	596:1:13812:13817	6611057	0	True				
ANR	6611061	IdentifierDecl	i		6611057	0					
ANR	6611062	IdentifierDeclType	int		6611057	0					
ANR	6611063	Identifier	i		6611057	1					
ANR	6611064	IdentifierDeclStatement	"const char * list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL } ;"	597:1:13820:13919	6611057	1	True				
ANR	6611065	IdentifierDecl	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL }"		6611057	0					
ANR	6611066	IdentifierDeclType	const char * [ ]		6611057	0					
ANR	6611067	Identifier	list		6611057	1					
ANR	6611068	AssignmentExpression	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL }"		6611057	2		=			
ANR	6611069	Identifier	list		6611057	0					
ANR	6611070	InitializerList	"""b"""		6611057	1					
ANR	6611071	PrimaryExpression	"""b"""		6611057	0					
ANR	6611072	PrimaryExpression	"""c"""		6611057	1					
ANR	6611073	PrimaryExpression	"""d"""		6611057	2					
ANR	6611074	PrimaryExpression	"""e"""		6611057	3					
ANR	6611075	PrimaryExpression	"""h"""		6611057	4					
ANR	6611076	PrimaryExpression	"""l"""		6611057	5					
ANR	6611077	PrimaryExpression	"""( hl )"""		6611057	6					
ANR	6611078	PrimaryExpression	"""a"""		6611057	7					
ANR	6611079	PrimaryExpression	"""( ix +)"""		6611057	8					
ANR	6611080	PrimaryExpression	"""( iy +)"""		6611057	9					
ANR	6611081	Identifier	NULL		6611057	10					
ANR	6611082	ExpressionStatement	"i = indx ( p , list , 1 , & indexjmp )"	600:1:13922:13954	6611057	2	True				
ANR	6611083	AssignmentExpression	"i = indx ( p , list , 1 , & indexjmp )"		6611057	0		=			
ANR	6611084	Identifier	i		6611057	0					
ANR	6611085	CallExpression	"indx ( p , list , 1 , & indexjmp )"		6611057	1					
ANR	6611086	Callee	indx		6611057	0					
ANR	6611087	Identifier	indx		6611057	0					
ANR	6611088	ArgumentList	p		6611057	1					
ANR	6611089	Argument	p		6611057	0					
ANR	6611090	Identifier	p		6611057	0					
ANR	6611091	Argument	list		6611057	1					
ANR	6611092	Identifier	list		6611057	0					
ANR	6611093	Argument	1		6611057	2					
ANR	6611094	PrimaryExpression	1		6611057	0					
ANR	6611095	Argument	& indexjmp		6611057	3					
ANR	6611096	UnaryOperationExpression	& indexjmp		6611057	0					
ANR	6611097	UnaryOperator	&		6611057	0					
ANR	6611098	Identifier	indexjmp		6611057	1					
ANR	6611099	IfStatement	if ( i < 9 )		6611057	3					
ANR	6611100	Condition	i < 9	601:5:13961:13965	6611057	0	True				
ANR	6611101	RelationalExpression	i < 9		6611057	0		<			
ANR	6611102	Identifier	i		6611057	0					
ANR	6611103	PrimaryExpression	9		6611057	1					
ANR	6611104	CompoundStatement		7:12:158:158	6611057	1					
ANR	6611105	ReturnStatement	return i ;	602:2:13972:13980	6611057	0	True				
ANR	6611106	Identifier	i		6611057	0					
ANR	6611107	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 9 )	604:1:13986:14017	6611057	4	True				
ANR	6611108	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 9 )		6611057	0		=			
ANR	6611109	Identifier	indexed		6611057	0					
ANR	6611110	AdditiveExpression	0xDD + 0x20 * ( i - 9 )		6611057	1		+			
ANR	6611111	PrimaryExpression	0xDD		6611057	0					
ANR	6611112	MultiplicativeExpression	0x20 * ( i - 9 )		6611057	1		*			
ANR	6611113	PrimaryExpression	0x20		6611057	0					
ANR	6611114	AdditiveExpression	i - 9		6611057	1		-			
ANR	6611115	Identifier	i		6611057	0					
ANR	6611116	PrimaryExpression	9		6611057	1					
ANR	6611117	ReturnStatement	return 7 ;	605:1:14020:14028	6611057	5	True				
ANR	6611118	PrimaryExpression	7		6611057	0					
ANR	6611119	ReturnType	static int		6611057	1					
ANR	6611120	Identifier	rd_r_		6611057	2					
ANR	6611121	ParameterList	const char * * p		6611057	3					
ANR	6611122	Parameter	const char * * p	595:17:13793:13806	6611057	0	True				
ANR	6611123	ParameterType	const char * *		6611057	0					
ANR	6611124	Identifier	p		6611057	1					
ANR	6611125	CFGEntryNode	ENTRY		6611057		True				
ANR	6611126	CFGExitNode	EXIT		6611057		True				
ANR	6611127	Symbol	p		6611057						
ANR	6611128	Symbol	NULL		6611057						
ANR	6611129	Symbol	indexed		6611057						
ANR	6611130	Symbol	indx		6611057						
ANR	6611131	Symbol	i		6611057						
ANR	6611132	Symbol	list		6611057						
ANR	6611133	Symbol	& indexjmp		6611057						
ANR	6611134	Function	rd_0_7	609:0:14086:14221							
ANR	6611135	FunctionDef	rd_0_7 (const char * * p)		6611134	0					
ANR	6611136	CompoundStatement		609:34:14120:14221	6611134	0					
ANR	6611137	ExpressionStatement	* p = delspc ( * p )	610:1:14123:14139	6611134	0	True				
ANR	6611138	AssignmentExpression	* p = delspc ( * p )		6611134	0		=			
ANR	6611139	UnaryOperationExpression	* p		6611134	0					
ANR	6611140	UnaryOperator	*		6611134	0					
ANR	6611141	Identifier	p		6611134	1					
ANR	6611142	CallExpression	delspc ( * p )		6611134	1					
ANR	6611143	Callee	delspc		6611134	0					
ANR	6611144	Identifier	delspc		6611134	0					
ANR	6611145	ArgumentList	* p		6611134	1					
ANR	6611146	Argument	* p		6611134	0					
ANR	6611147	UnaryOperationExpression	* p		6611134	0					
ANR	6611148	UnaryOperator	*		6611134	0					
ANR	6611149	Identifier	p		6611134	1					
ANR	6611150	IfStatement	if ( * * p == 0 )		6611134	1					
ANR	6611151	Condition	* * p == 0	611:5:14146:14153	6611134	0	True				
ANR	6611152	EqualityExpression	* * p == 0		6611134	0		==			
ANR	6611153	UnaryOperationExpression	* * p		6611134	0					
ANR	6611154	UnaryOperator	*		6611134	0					
ANR	6611155	UnaryOperationExpression	* p		6611134	1					
ANR	6611156	UnaryOperator	*		6611134	0					
ANR	6611157	Identifier	p		6611134	1					
ANR	6611158	PrimaryExpression	0		6611134	1					
ANR	6611159	CompoundStatement		3:15:35:35	6611134	1					
ANR	6611160	ReturnStatement	return 0 ;	612:2:14160:14168	6611134	0	True				
ANR	6611161	PrimaryExpression	0		6611134	0					
ANR	6611162	ExpressionStatement	bitsetres = * p	614:1:14174:14188	6611134	2	True				
ANR	6611163	AssignmentExpression	bitsetres = * p		6611134	0		=			
ANR	6611164	Identifier	bitsetres		6611134	0					
ANR	6611165	UnaryOperationExpression	* p		6611134	1					
ANR	6611166	UnaryOperator	*		6611134	0					
ANR	6611167	Identifier	p		6611134	1					
ANR	6611168	ExpressionStatement	"skipword ( p , ',' )"	615:1:14191:14208	6611134	3	True				
ANR	6611169	CallExpression	"skipword ( p , ',' )"		6611134	0					
ANR	6611170	Callee	skipword		6611134	0					
ANR	6611171	Identifier	skipword		6611134	0					
ANR	6611172	ArgumentList	p		6611134	1					
ANR	6611173	Argument	p		6611134	0					
ANR	6611174	Identifier	p		6611134	0					
ANR	6611175	Argument	"','"		6611134	1					
ANR	6611176	PrimaryExpression	"','"		6611134	0					
ANR	6611177	ReturnStatement	return 1 ;	616:1:14211:14219	6611134	4	True				
ANR	6611178	PrimaryExpression	1		6611134	0					
ANR	6611179	ReturnType	static int		6611134	1					
ANR	6611180	Identifier	rd_0_7		6611134	2					
ANR	6611181	ParameterList	const char * * p		6611134	3					
ANR	6611182	Parameter	const char * * p	609:18:14104:14117	6611134	0	True				
ANR	6611183	ParameterType	const char * *		6611134	0					
ANR	6611184	Identifier	p		6611134	1					
ANR	6611185	CFGEntryNode	ENTRY		6611134		True				
ANR	6611186	CFGExitNode	EXIT		6611134		True				
ANR	6611187	Symbol	p		6611134						
ANR	6611188	Symbol	bitsetres		6611134						
ANR	6611189	Symbol	* p		6611134						
ANR	6611190	Symbol	* * p		6611134						
ANR	6611191	Symbol	delspc		6611134						
ANR	6611192	Function	rd_cc	620:0:14278:14425							
ANR	6611193	FunctionDef	rd_cc (const char * * p)		6611192	0					
ANR	6611194	CompoundStatement		620:33:14311:14425	6611192	0					
ANR	6611195	IdentifierDeclStatement	"const char * list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , NULL } ;"	621:1:14314:14390	6611192	0	True				
ANR	6611196	IdentifierDecl	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , NULL }"		6611192	0					
ANR	6611197	IdentifierDeclType	const char * [ ]		6611192	0					
ANR	6611198	Identifier	list		6611192	1					
ANR	6611199	AssignmentExpression	"* list [ ] = { ""nz"" , ""z"" , ""nc"" , ""c"" , ""po"" , ""pe"" , ""p"" , ""m"" , NULL }"		6611192	2		=			
ANR	6611200	Identifier	list		6611192	0					
ANR	6611201	InitializerList	"""nz"""		6611192	1					
ANR	6611202	PrimaryExpression	"""nz"""		6611192	0					
ANR	6611203	PrimaryExpression	"""z"""		6611192	1					
ANR	6611204	PrimaryExpression	"""nc"""		6611192	2					
ANR	6611205	PrimaryExpression	"""c"""		6611192	3					
ANR	6611206	PrimaryExpression	"""po"""		6611192	4					
ANR	6611207	PrimaryExpression	"""pe"""		6611192	5					
ANR	6611208	PrimaryExpression	"""p"""		6611192	6					
ANR	6611209	PrimaryExpression	"""m"""		6611192	7					
ANR	6611210	Identifier	NULL		6611192	8					
ANR	6611211	ReturnStatement	"return indx ( p , list , 0 , NULL ) ;"	624:1:14393:14423	6611192	1	True				
ANR	6611212	CallExpression	"indx ( p , list , 0 , NULL )"		6611192	0					
ANR	6611213	Callee	indx		6611192	0					
ANR	6611214	Identifier	indx		6611192	0					
ANR	6611215	ArgumentList	p		6611192	1					
ANR	6611216	Argument	p		6611192	0					
ANR	6611217	Identifier	p		6611192	0					
ANR	6611218	Argument	list		6611192	1					
ANR	6611219	Identifier	list		6611192	0					
ANR	6611220	Argument	0		6611192	2					
ANR	6611221	PrimaryExpression	0		6611192	0					
ANR	6611222	Argument	NULL		6611192	3					
ANR	6611223	Identifier	NULL		6611192	0					
ANR	6611224	ReturnType	static int		6611192	1					
ANR	6611225	Identifier	rd_cc		6611192	2					
ANR	6611226	ParameterList	const char * * p		6611192	3					
ANR	6611227	Parameter	const char * * p	620:17:14295:14308	6611192	0	True				
ANR	6611228	ParameterType	const char * *		6611192	0					
ANR	6611229	Identifier	p		6611192	1					
ANR	6611230	CFGEntryNode	ENTRY		6611192		True				
ANR	6611231	CFGExitNode	EXIT		6611192		True				
ANR	6611232	Symbol	p		6611192						
ANR	6611233	Symbol	NULL		6611192						
ANR	6611234	Symbol	indx		6611192						
ANR	6611235	Symbol	list		6611192						
ANR	6611236	Function	rd_r_rr	628:0:14464:14869							
ANR	6611237	FunctionDef	rd_r_rr (const char * * p)		6611236	0					
ANR	6611238	CompoundStatement		628:35:14499:14869	6611236	0					
ANR	6611239	IdentifierDeclStatement	int i ;	629:1:14502:14507	6611236	0	True				
ANR	6611240	IdentifierDecl	i		6611236	0					
ANR	6611241	IdentifierDeclType	int		6611236	0					
ANR	6611242	Identifier	i		6611236	1					
ANR	6611243	IdentifierDeclStatement	"const char * list [ ] = { ""iy"" , ""ix"" , ""sp"" , ""hl"" , ""de"" , ""bc"" , """" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL } ;"	630:1:14510:14651	6611236	1	True				
ANR	6611244	IdentifierDecl	"* list [ ] = { ""iy"" , ""ix"" , ""sp"" , ""hl"" , ""de"" , ""bc"" , """" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL }"		6611236	0					
ANR	6611245	IdentifierDeclType	const char * [ ]		6611236	0					
ANR	6611246	Identifier	list		6611236	1					
ANR	6611247	AssignmentExpression	"* list [ ] = { ""iy"" , ""ix"" , ""sp"" , ""hl"" , ""de"" , ""bc"" , """" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , NULL }"		6611236	2		=			
ANR	6611248	Identifier	list		6611236	0					
ANR	6611249	InitializerList	"""iy"""		6611236	1					
ANR	6611250	PrimaryExpression	"""iy"""		6611236	0					
ANR	6611251	PrimaryExpression	"""ix"""		6611236	1					
ANR	6611252	PrimaryExpression	"""sp"""		6611236	2					
ANR	6611253	PrimaryExpression	"""hl"""		6611236	3					
ANR	6611254	PrimaryExpression	"""de"""		6611236	4					
ANR	6611255	PrimaryExpression	"""bc"""		6611236	5					
ANR	6611256	PrimaryExpression	""""""		6611236	6					
ANR	6611257	PrimaryExpression	"""b"""		6611236	7					
ANR	6611258	PrimaryExpression	"""c"""		6611236	8					
ANR	6611259	PrimaryExpression	"""d"""		6611236	9					
ANR	6611260	PrimaryExpression	"""e"""		6611236	10					
ANR	6611261	PrimaryExpression	"""h"""		6611236	11					
ANR	6611262	PrimaryExpression	"""l"""		6611236	12					
ANR	6611263	PrimaryExpression	"""( hl )"""		6611236	13					
ANR	6611264	PrimaryExpression	"""a"""		6611236	14					
ANR	6611265	PrimaryExpression	"""( ix +)"""		6611236	15					
ANR	6611266	PrimaryExpression	"""( iy +)"""		6611236	16					
ANR	6611267	Identifier	NULL		6611236	17					
ANR	6611268	ExpressionStatement	"i = indx ( p , list , 1 , & indexjmp )"	634:1:14654:14686	6611236	2	True				
ANR	6611269	AssignmentExpression	"i = indx ( p , list , 1 , & indexjmp )"		6611236	0		=			
ANR	6611270	Identifier	i		6611236	0					
ANR	6611271	CallExpression	"indx ( p , list , 1 , & indexjmp )"		6611236	1					
ANR	6611272	Callee	indx		6611236	0					
ANR	6611273	Identifier	indx		6611236	0					
ANR	6611274	ArgumentList	p		6611236	1					
ANR	6611275	Argument	p		6611236	0					
ANR	6611276	Identifier	p		6611236	0					
ANR	6611277	Argument	list		6611236	1					
ANR	6611278	Identifier	list		6611236	0					
ANR	6611279	Argument	1		6611236	2					
ANR	6611280	PrimaryExpression	1		6611236	0					
ANR	6611281	Argument	& indexjmp		6611236	3					
ANR	6611282	UnaryOperationExpression	& indexjmp		6611236	0					
ANR	6611283	UnaryOperator	&		6611236	0					
ANR	6611284	Identifier	indexjmp		6611236	1					
ANR	6611285	IfStatement	if ( ! i )		6611236	3					
ANR	6611286	Condition	! i	635:5:14693:14694	6611236	0	True				
ANR	6611287	UnaryOperationExpression	! i		6611236	0					
ANR	6611288	UnaryOperator	!		6611236	0					
ANR	6611289	Identifier	i		6611236	1					
ANR	6611290	CompoundStatement		8:9:197:197	6611236	1					
ANR	6611291	ReturnStatement	return 0 ;	636:2:14701:14709	6611236	0	True				
ANR	6611292	PrimaryExpression	0		6611236	0					
ANR	6611293	IfStatement	if ( i < 16 && i > 2 )		6611236	4					
ANR	6611294	Condition	i < 16 && i > 2	638:5:14719:14733	6611236	0	True				
ANR	6611295	AndExpression	i < 16 && i > 2		6611236	0		&&			
ANR	6611296	RelationalExpression	i < 16		6611236	0		<			
ANR	6611297	Identifier	i		6611236	0					
ANR	6611298	PrimaryExpression	16		6611236	1					
ANR	6611299	RelationalExpression	i > 2		6611236	1		>			
ANR	6611300	Identifier	i		6611236	0					
ANR	6611301	PrimaryExpression	2		6611236	1					
ANR	6611302	CompoundStatement		11:22:236:236	6611236	1					
ANR	6611303	ReturnStatement	return 7 - i ;	639:2:14740:14752	6611236	0	True				
ANR	6611304	AdditiveExpression	7 - i		6611236	0		-			
ANR	6611305	PrimaryExpression	7		6611236	0					
ANR	6611306	Identifier	i		6611236	1					
ANR	6611307	IfStatement	if ( i > 15 )		6611236	5					
ANR	6611308	Condition	i > 15	641:5:14762:14767	6611236	0	True				
ANR	6611309	RelationalExpression	i > 15		6611236	0		>			
ANR	6611310	Identifier	i		6611236	0					
ANR	6611311	PrimaryExpression	15		6611236	1					
ANR	6611312	CompoundStatement		14:13:270:270	6611236	1					
ANR	6611313	ExpressionStatement	indexed = 0xDD + ( i - 16 ) * 0x20	642:2:14774:14806	6611236	0	True				
ANR	6611314	AssignmentExpression	indexed = 0xDD + ( i - 16 ) * 0x20		6611236	0		=			
ANR	6611315	Identifier	indexed		6611236	0					
ANR	6611316	AdditiveExpression	0xDD + ( i - 16 ) * 0x20		6611236	1		+			
ANR	6611317	PrimaryExpression	0xDD		6611236	0					
ANR	6611318	MultiplicativeExpression	( i - 16 ) * 0x20		6611236	1		*			
ANR	6611319	AdditiveExpression	i - 16		6611236	0		-			
ANR	6611320	Identifier	i		6611236	0					
ANR	6611321	PrimaryExpression	16		6611236	1					
ANR	6611322	PrimaryExpression	0x20		6611236	1					
ANR	6611323	ReturnStatement	return - 7 ;	643:2:14810:14819	6611236	1	True				
ANR	6611324	UnaryOperationExpression	- 7		6611236	0					
ANR	6611325	UnaryOperator	-		6611236	0					
ANR	6611326	PrimaryExpression	7		6611236	1					
ANR	6611327	ExpressionStatement	indexed = 0xDD + ( 2 - i ) * 0x20	645:1:14825:14856	6611236	6	True				
ANR	6611328	AssignmentExpression	indexed = 0xDD + ( 2 - i ) * 0x20		6611236	0		=			
ANR	6611329	Identifier	indexed		6611236	0					
ANR	6611330	AdditiveExpression	0xDD + ( 2 - i ) * 0x20		6611236	1		+			
ANR	6611331	PrimaryExpression	0xDD		6611236	0					
ANR	6611332	MultiplicativeExpression	( 2 - i ) * 0x20		6611236	1		*			
ANR	6611333	AdditiveExpression	2 - i		6611236	0		-			
ANR	6611334	PrimaryExpression	2		6611236	0					
ANR	6611335	Identifier	i		6611236	1					
ANR	6611336	PrimaryExpression	0x20		6611236	1					
ANR	6611337	ReturnStatement	return 3 ;	646:1:14859:14867	6611236	7	True				
ANR	6611338	PrimaryExpression	3		6611236	0					
ANR	6611339	ReturnType	static int		6611236	1					
ANR	6611340	Identifier	rd_r_rr		6611236	2					
ANR	6611341	ParameterList	const char * * p		6611236	3					
ANR	6611342	Parameter	const char * * p	628:19:14483:14496	6611236	0	True				
ANR	6611343	ParameterType	const char * *		6611236	0					
ANR	6611344	Identifier	p		6611236	1					
ANR	6611345	CFGEntryNode	ENTRY		6611236		True				
ANR	6611346	CFGExitNode	EXIT		6611236		True				
ANR	6611347	Symbol	p		6611236						
ANR	6611348	Symbol	NULL		6611236						
ANR	6611349	Symbol	indexed		6611236						
ANR	6611350	Symbol	indx		6611236						
ANR	6611351	Symbol	i		6611236						
ANR	6611352	Symbol	list		6611236						
ANR	6611353	Symbol	& indexjmp		6611236						
ANR	6611354	Function	rd_hl	650:0:14886:14995							
ANR	6611355	FunctionDef	rd_hl (const char * * p)		6611354	0					
ANR	6611356	CompoundStatement		650:33:14919:14995	6611354	0					
ANR	6611357	IdentifierDeclStatement	"const char * list [ ] = { ""hl"" , NULL } ;"	651:1:14922:14960	6611354	0	True				
ANR	6611358	IdentifierDecl	"* list [ ] = { ""hl"" , NULL }"		6611354	0					
ANR	6611359	IdentifierDeclType	const char * [ ]		6611354	0					
ANR	6611360	Identifier	list		6611354	1					
ANR	6611361	AssignmentExpression	"* list [ ] = { ""hl"" , NULL }"		6611354	2		=			
ANR	6611362	Identifier	list		6611354	0					
ANR	6611363	InitializerList	"""hl"""		6611354	1					
ANR	6611364	PrimaryExpression	"""hl"""		6611354	0					
ANR	6611365	Identifier	NULL		6611354	1					
ANR	6611366	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	654:1:14963:14993	6611354	1	True				
ANR	6611367	CallExpression	"indx ( p , list , 1 , NULL )"		6611354	0					
ANR	6611368	Callee	indx		6611354	0					
ANR	6611369	Identifier	indx		6611354	0					
ANR	6611370	ArgumentList	p		6611354	1					
ANR	6611371	Argument	p		6611354	0					
ANR	6611372	Identifier	p		6611354	0					
ANR	6611373	Argument	list		6611354	1					
ANR	6611374	Identifier	list		6611354	0					
ANR	6611375	Argument	1		6611354	2					
ANR	6611376	PrimaryExpression	1		6611354	0					
ANR	6611377	Argument	NULL		6611354	3					
ANR	6611378	Identifier	NULL		6611354	0					
ANR	6611379	ReturnType	static int		6611354	1					
ANR	6611380	Identifier	rd_hl		6611354	2					
ANR	6611381	ParameterList	const char * * p		6611354	3					
ANR	6611382	Parameter	const char * * p	650:17:14903:14916	6611354	0	True				
ANR	6611383	ParameterType	const char * *		6611354	0					
ANR	6611384	Identifier	p		6611354	1					
ANR	6611385	CFGEntryNode	ENTRY		6611354		True				
ANR	6611386	CFGExitNode	EXIT		6611354		True				
ANR	6611387	Symbol	p		6611354						
ANR	6611388	Symbol	NULL		6611354						
ANR	6611389	Symbol	indx		6611354						
ANR	6611390	Symbol	list		6611354						
ANR	6611391	Function	rd_hlx	658:0:15023:15224							
ANR	6611392	FunctionDef	rd_hlx (const char * * p)		6611391	0					
ANR	6611393	CompoundStatement		658:34:15057:15224	6611391	0					
ANR	6611394	IdentifierDeclStatement	int i ;	659:1:15060:15065	6611391	0	True				
ANR	6611395	IdentifierDecl	i		6611391	0					
ANR	6611396	IdentifierDeclType	int		6611391	0					
ANR	6611397	Identifier	i		6611391	1					
ANR	6611398	IdentifierDeclStatement	"const char * list [ ] = { ""hl"" , ""ix"" , ""iy"" , NULL } ;"	660:1:15068:15118	6611391	1	True				
ANR	6611399	IdentifierDecl	"* list [ ] = { ""hl"" , ""ix"" , ""iy"" , NULL }"		6611391	0					
ANR	6611400	IdentifierDeclType	const char * [ ]		6611391	0					
ANR	6611401	Identifier	list		6611391	1					
ANR	6611402	AssignmentExpression	"* list [ ] = { ""hl"" , ""ix"" , ""iy"" , NULL }"		6611391	2		=			
ANR	6611403	Identifier	list		6611391	0					
ANR	6611404	InitializerList	"""hl"""		6611391	1					
ANR	6611405	PrimaryExpression	"""hl"""		6611391	0					
ANR	6611406	PrimaryExpression	"""ix"""		6611391	1					
ANR	6611407	PrimaryExpression	"""iy"""		6611391	2					
ANR	6611408	Identifier	NULL		6611391	3					
ANR	6611409	ExpressionStatement	"i = indx ( p , list , 1 , NULL )"	663:1:15121:15148	6611391	2	True				
ANR	6611410	AssignmentExpression	"i = indx ( p , list , 1 , NULL )"		6611391	0		=			
ANR	6611411	Identifier	i		6611391	0					
ANR	6611412	CallExpression	"indx ( p , list , 1 , NULL )"		6611391	1					
ANR	6611413	Callee	indx		6611391	0					
ANR	6611414	Identifier	indx		6611391	0					
ANR	6611415	ArgumentList	p		6611391	1					
ANR	6611416	Argument	p		6611391	0					
ANR	6611417	Identifier	p		6611391	0					
ANR	6611418	Argument	list		6611391	1					
ANR	6611419	Identifier	list		6611391	0					
ANR	6611420	Argument	1		6611391	2					
ANR	6611421	PrimaryExpression	1		6611391	0					
ANR	6611422	Argument	NULL		6611391	3					
ANR	6611423	Identifier	NULL		6611391	0					
ANR	6611424	IfStatement	if ( i < 2 )		6611391	3					
ANR	6611425	Condition	i < 2	664:5:15155:15159	6611391	0	True				
ANR	6611426	RelationalExpression	i < 2		6611391	0		<			
ANR	6611427	Identifier	i		6611391	0					
ANR	6611428	PrimaryExpression	2		6611391	1					
ANR	6611429	CompoundStatement		7:12:104:104	6611391	1					
ANR	6611430	ReturnStatement	return i ;	665:2:15166:15174	6611391	0	True				
ANR	6611431	Identifier	i		6611391	0					
ANR	6611432	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 2 )	667:1:15180:15211	6611391	4	True				
ANR	6611433	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 2 )		6611391	0		=			
ANR	6611434	Identifier	indexed		6611391	0					
ANR	6611435	AdditiveExpression	0xDD + 0x20 * ( i - 2 )		6611391	1		+			
ANR	6611436	PrimaryExpression	0xDD		6611391	0					
ANR	6611437	MultiplicativeExpression	0x20 * ( i - 2 )		6611391	1		*			
ANR	6611438	PrimaryExpression	0x20		6611391	0					
ANR	6611439	AdditiveExpression	i - 2		6611391	1		-			
ANR	6611440	Identifier	i		6611391	0					
ANR	6611441	PrimaryExpression	2		6611391	1					
ANR	6611442	ReturnStatement	return 1 ;	668:1:15214:15222	6611391	5	True				
ANR	6611443	PrimaryExpression	1		6611391	0					
ANR	6611444	ReturnType	static int		6611391	1					
ANR	6611445	Identifier	rd_hlx		6611391	2					
ANR	6611446	ParameterList	const char * * p		6611391	3					
ANR	6611447	Parameter	const char * * p	658:18:15041:15054	6611391	0	True				
ANR	6611448	ParameterType	const char * *		6611391	0					
ANR	6611449	Identifier	p		6611391	1					
ANR	6611450	CFGEntryNode	ENTRY		6611391		True				
ANR	6611451	CFGExitNode	EXIT		6611391		True				
ANR	6611452	Symbol	p		6611391						
ANR	6611453	Symbol	NULL		6611391						
ANR	6611454	Symbol	indexed		6611391						
ANR	6611455	Symbol	indx		6611391						
ANR	6611456	Symbol	i		6611391						
ANR	6611457	Symbol	list		6611391						
ANR	6611458	Function	rd_af_	672:0:15242:15353							
ANR	6611459	FunctionDef	rd_af_ (const char * * p)		6611458	0					
ANR	6611460	CompoundStatement		672:34:15276:15353	6611458	0					
ANR	6611461	IdentifierDeclStatement	"const char * list [ ] = { ""af'"" , NULL } ;"	673:1:15279:15318	6611458	0	True				
ANR	6611462	IdentifierDecl	"* list [ ] = { ""af'"" , NULL }"		6611458	0					
ANR	6611463	IdentifierDeclType	const char * [ ]		6611458	0					
ANR	6611464	Identifier	list		6611458	1					
ANR	6611465	AssignmentExpression	"* list [ ] = { ""af'"" , NULL }"		6611458	2		=			
ANR	6611466	Identifier	list		6611458	0					
ANR	6611467	InitializerList	"""af'"""		6611458	1					
ANR	6611468	PrimaryExpression	"""af'"""		6611458	0					
ANR	6611469	Identifier	NULL		6611458	1					
ANR	6611470	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	676:1:15321:15351	6611458	1	True				
ANR	6611471	CallExpression	"indx ( p , list , 1 , NULL )"		6611458	0					
ANR	6611472	Callee	indx		6611458	0					
ANR	6611473	Identifier	indx		6611458	0					
ANR	6611474	ArgumentList	p		6611458	1					
ANR	6611475	Argument	p		6611458	0					
ANR	6611476	Identifier	p		6611458	0					
ANR	6611477	Argument	list		6611458	1					
ANR	6611478	Identifier	list		6611458	0					
ANR	6611479	Argument	1		6611458	2					
ANR	6611480	PrimaryExpression	1		6611458	0					
ANR	6611481	Argument	NULL		6611458	3					
ANR	6611482	Identifier	NULL		6611458	0					
ANR	6611483	ReturnType	static int		6611458	1					
ANR	6611484	Identifier	rd_af_		6611458	2					
ANR	6611485	ParameterList	const char * * p		6611458	3					
ANR	6611486	Parameter	const char * * p	672:18:15260:15273	6611458	0	True				
ANR	6611487	ParameterType	const char * *		6611458	0					
ANR	6611488	Identifier	p		6611458	1					
ANR	6611489	CFGEntryNode	ENTRY		6611458		True				
ANR	6611490	CFGExitNode	EXIT		6611458		True				
ANR	6611491	Symbol	p		6611458						
ANR	6611492	Symbol	NULL		6611458						
ANR	6611493	Symbol	indx		6611458						
ANR	6611494	Symbol	list		6611458						
ANR	6611495	Function	rd_0_2	680:0:15387:15510							
ANR	6611496	FunctionDef	rd_0_2 (const char * * p)		6611495	0					
ANR	6611497	CompoundStatement		680:34:15421:15510	6611495	0					
ANR	6611498	IdentifierDeclStatement	"const char * list [ ] = { ""0"" , """" , ""1"" , ""2"" , NULL } ;"	681:1:15424:15475	6611495	0	True				
ANR	6611499	IdentifierDecl	"* list [ ] = { ""0"" , """" , ""1"" , ""2"" , NULL }"		6611495	0					
ANR	6611500	IdentifierDeclType	const char * [ ]		6611495	0					
ANR	6611501	Identifier	list		6611495	1					
ANR	6611502	AssignmentExpression	"* list [ ] = { ""0"" , """" , ""1"" , ""2"" , NULL }"		6611495	2		=			
ANR	6611503	Identifier	list		6611495	0					
ANR	6611504	InitializerList	"""0"""		6611495	1					
ANR	6611505	PrimaryExpression	"""0"""		6611495	0					
ANR	6611506	PrimaryExpression	""""""		6611495	1					
ANR	6611507	PrimaryExpression	"""1"""		6611495	2					
ANR	6611508	PrimaryExpression	"""2"""		6611495	3					
ANR	6611509	Identifier	NULL		6611495	4					
ANR	6611510	ReturnStatement	"return indx ( p , list , 1 , NULL ) ;"	684:1:15478:15508	6611495	1	True				
ANR	6611511	CallExpression	"indx ( p , list , 1 , NULL )"		6611495	0					
ANR	6611512	Callee	indx		6611495	0					
ANR	6611513	Identifier	indx		6611495	0					
ANR	6611514	ArgumentList	p		6611495	1					
ANR	6611515	Argument	p		6611495	0					
ANR	6611516	Identifier	p		6611495	0					
ANR	6611517	Argument	list		6611495	1					
ANR	6611518	Identifier	list		6611495	0					
ANR	6611519	Argument	1		6611495	2					
ANR	6611520	PrimaryExpression	1		6611495	0					
ANR	6611521	Argument	NULL		6611495	3					
ANR	6611522	Identifier	NULL		6611495	0					
ANR	6611523	ReturnType	static int		6611495	1					
ANR	6611524	Identifier	rd_0_2		6611495	2					
ANR	6611525	ParameterList	const char * * p		6611495	3					
ANR	6611526	Parameter	const char * * p	680:18:15405:15418	6611495	0	True				
ANR	6611527	ParameterType	const char * *		6611495	0					
ANR	6611528	Identifier	p		6611495	1					
ANR	6611529	CFGEntryNode	ENTRY		6611495		True				
ANR	6611530	CFGExitNode	EXIT		6611495		True				
ANR	6611531	Symbol	p		6611495						
ANR	6611532	Symbol	NULL		6611495						
ANR	6611533	Symbol	indx		6611495						
ANR	6611534	Symbol	list		6611495						
ANR	6611535	Function	rd_ld_hl	688:0:15545:15761							
ANR	6611536	FunctionDef	rd_ld_hl (const char * * p)		6611535	0					
ANR	6611537	CompoundStatement		688:36:15581:15761	6611535	0					
ANR	6611538	IdentifierDeclStatement	int i ;	689:1:15584:15589	6611535	0	True				
ANR	6611539	IdentifierDecl	i		6611535	0					
ANR	6611540	IdentifierDeclType	int		6611535	0					
ANR	6611541	Identifier	i		6611535	1					
ANR	6611542	IdentifierDeclStatement	"const char * list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , """" , ""a"" , ""*"" , NULL } ;"	690:1:15592:15668	6611535	1	True				
ANR	6611543	IdentifierDecl	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , """" , ""a"" , ""*"" , NULL }"		6611535	0					
ANR	6611544	IdentifierDeclType	const char * [ ]		6611535	0					
ANR	6611545	Identifier	list		6611535	1					
ANR	6611546	AssignmentExpression	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , """" , ""a"" , ""*"" , NULL }"		6611535	2		=			
ANR	6611547	Identifier	list		6611535	0					
ANR	6611548	InitializerList	"""b"""		6611535	1					
ANR	6611549	PrimaryExpression	"""b"""		6611535	0					
ANR	6611550	PrimaryExpression	"""c"""		6611535	1					
ANR	6611551	PrimaryExpression	"""d"""		6611535	2					
ANR	6611552	PrimaryExpression	"""e"""		6611535	3					
ANR	6611553	PrimaryExpression	"""h"""		6611535	4					
ANR	6611554	PrimaryExpression	"""l"""		6611535	5					
ANR	6611555	PrimaryExpression	""""""		6611535	6					
ANR	6611556	PrimaryExpression	"""a"""		6611535	7					
ANR	6611557	PrimaryExpression	"""*"""		6611535	8					
ANR	6611558	Identifier	NULL		6611535	9					
ANR	6611559	ExpressionStatement	"i = indx ( p , list , 0 , & readbyte )"	693:1:15671:15703	6611535	2	True				
ANR	6611560	AssignmentExpression	"i = indx ( p , list , 0 , & readbyte )"		6611535	0		=			
ANR	6611561	Identifier	i		6611535	0					
ANR	6611562	CallExpression	"indx ( p , list , 0 , & readbyte )"		6611535	1					
ANR	6611563	Callee	indx		6611535	0					
ANR	6611564	Identifier	indx		6611535	0					
ANR	6611565	ArgumentList	p		6611535	1					
ANR	6611566	Argument	p		6611535	0					
ANR	6611567	Identifier	p		6611535	0					
ANR	6611568	Argument	list		6611535	1					
ANR	6611569	Identifier	list		6611535	0					
ANR	6611570	Argument	0		6611535	2					
ANR	6611571	PrimaryExpression	0		6611535	0					
ANR	6611572	Argument	& readbyte		6611535	3					
ANR	6611573	UnaryOperationExpression	& readbyte		6611535	0					
ANR	6611574	UnaryOperator	&		6611535	0					
ANR	6611575	Identifier	readbyte		6611535	1					
ANR	6611576	IfStatement	if ( i < 9 )		6611535	3					
ANR	6611577	Condition	i < 9	694:5:15710:15714	6611535	0	True				
ANR	6611578	RelationalExpression	i < 9		6611535	0		<			
ANR	6611579	Identifier	i		6611535	0					
ANR	6611580	PrimaryExpression	9		6611535	1					
ANR	6611581	CompoundStatement		7:12:135:135	6611535	1					
ANR	6611582	ReturnStatement	return i ;	695:2:15721:15729	6611535	0	True				
ANR	6611583	Identifier	i		6611535	0					
ANR	6611584	ExpressionStatement	writebyte = 1	697:1:15735:15748	6611535	4	True				
ANR	6611585	AssignmentExpression	writebyte = 1		6611535	0		=			
ANR	6611586	Identifier	writebyte		6611535	0					
ANR	6611587	PrimaryExpression	1		6611535	1					
ANR	6611588	ReturnStatement	return 7 ;	698:1:15751:15759	6611535	5	True				
ANR	6611589	PrimaryExpression	7		6611535	0					
ANR	6611590	ReturnType	static int		6611535	1					
ANR	6611591	Identifier	rd_ld_hl		6611535	2					
ANR	6611592	ParameterList	const char * * p		6611535	3					
ANR	6611593	Parameter	const char * * p	688:20:15565:15578	6611535	0	True				
ANR	6611594	ParameterType	const char * *		6611535	0					
ANR	6611595	Identifier	p		6611535	1					
ANR	6611596	CFGEntryNode	ENTRY		6611535		True				
ANR	6611597	CFGExitNode	EXIT		6611535		True				
ANR	6611598	Symbol	p		6611535						
ANR	6611599	Symbol	NULL		6611535						
ANR	6611600	Symbol	writebyte		6611535						
ANR	6611601	Symbol	indx		6611535						
ANR	6611602	Symbol	i		6611535						
ANR	6611603	Symbol	list		6611535						
ANR	6611604	Symbol	& readbyte		6611535						
ANR	6611605	Function	rd_ld_nn	702:0:15798:16070							
ANR	6611606	FunctionDef	rd_ld_nn (const char * * p)		6611605	0					
ANR	6611607	CompoundStatement		702:36:15834:16070	6611605	0					
ANR	6611608	Statement	define	703:1:15837:15842	6611605	0	True				
ANR	6611609	Statement	ld_nnHL	703:8:15844:15850	6611605	1	True				
ANR	6611610	Statement	5	703:16:15852:15852	6611605	2	True				
ANR	6611611	Statement	define	704:1:15855:15860	6611605	3	True				
ANR	6611612	Statement	ld_nnA	704:8:15862:15867	6611605	4	True				
ANR	6611613	Statement	6	704:15:15869:15869	6611605	5	True				
ANR	6611614	IdentifierDeclStatement	int i ;	705:1:15872:15877	6611605	6	True				
ANR	6611615	IdentifierDecl	i		6611605	0					
ANR	6611616	IdentifierDeclType	int		6611605	0					
ANR	6611617	Identifier	i		6611605	1					
ANR	6611618	IdentifierDeclStatement	"const char * list [ ] = { ""bc"" , ""de"" , """" , ""sp"" , ""hl"" , ""a"" , ""ix"" , ""iy"" , NULL } ;"	706:1:15880:15957	6611605	7	True				
ANR	6611619	IdentifierDecl	"* list [ ] = { ""bc"" , ""de"" , """" , ""sp"" , ""hl"" , ""a"" , ""ix"" , ""iy"" , NULL }"		6611605	0					
ANR	6611620	IdentifierDeclType	const char * [ ]		6611605	0					
ANR	6611621	Identifier	list		6611605	1					
ANR	6611622	AssignmentExpression	"* list [ ] = { ""bc"" , ""de"" , """" , ""sp"" , ""hl"" , ""a"" , ""ix"" , ""iy"" , NULL }"		6611605	2		=			
ANR	6611623	Identifier	list		6611605	0					
ANR	6611624	InitializerList	"""bc"""		6611605	1					
ANR	6611625	PrimaryExpression	"""bc"""		6611605	0					
ANR	6611626	PrimaryExpression	"""de"""		6611605	1					
ANR	6611627	PrimaryExpression	""""""		6611605	2					
ANR	6611628	PrimaryExpression	"""sp"""		6611605	3					
ANR	6611629	PrimaryExpression	"""hl"""		6611605	4					
ANR	6611630	PrimaryExpression	"""a"""		6611605	5					
ANR	6611631	PrimaryExpression	"""ix"""		6611605	6					
ANR	6611632	PrimaryExpression	"""iy"""		6611605	7					
ANR	6611633	Identifier	NULL		6611605	8					
ANR	6611634	ExpressionStatement	"i = indx ( p , list , 1 , NULL )"	709:1:15960:15987	6611605	8	True				
ANR	6611635	AssignmentExpression	"i = indx ( p , list , 1 , NULL )"		6611605	0		=			
ANR	6611636	Identifier	i		6611605	0					
ANR	6611637	CallExpression	"indx ( p , list , 1 , NULL )"		6611605	1					
ANR	6611638	Callee	indx		6611605	0					
ANR	6611639	Identifier	indx		6611605	0					
ANR	6611640	ArgumentList	p		6611605	1					
ANR	6611641	Argument	p		6611605	0					
ANR	6611642	Identifier	p		6611605	0					
ANR	6611643	Argument	list		6611605	1					
ANR	6611644	Identifier	list		6611605	0					
ANR	6611645	Argument	1		6611605	2					
ANR	6611646	PrimaryExpression	1		6611605	0					
ANR	6611647	Argument	NULL		6611605	3					
ANR	6611648	Identifier	NULL		6611605	0					
ANR	6611649	IfStatement	if ( i < 7 )		6611605	9					
ANR	6611650	Condition	i < 7	710:5:15994:15998	6611605	0	True				
ANR	6611651	RelationalExpression	i < 7		6611605	0		<			
ANR	6611652	Identifier	i		6611605	0					
ANR	6611653	PrimaryExpression	7		6611605	1					
ANR	6611654	CompoundStatement		9:12:166:166	6611605	1					
ANR	6611655	ReturnStatement	return i ;	711:2:16005:16013	6611605	0	True				
ANR	6611656	Identifier	i		6611605	0					
ANR	6611657	ExpressionStatement	indexed = 0xdd + 0x20 * ( i == 8 )	713:1:16019:16051	6611605	10	True				
ANR	6611658	AssignmentExpression	indexed = 0xdd + 0x20 * ( i == 8 )		6611605	0		=			
ANR	6611659	Identifier	indexed		6611605	0					
ANR	6611660	AdditiveExpression	0xdd + 0x20 * ( i == 8 )		6611605	1		+			
ANR	6611661	PrimaryExpression	0xdd		6611605	0					
ANR	6611662	MultiplicativeExpression	0x20 * ( i == 8 )		6611605	1		*			
ANR	6611663	PrimaryExpression	0x20		6611605	0					
ANR	6611664	EqualityExpression	i == 8		6611605	1		==			
ANR	6611665	Identifier	i		6611605	0					
ANR	6611666	PrimaryExpression	8		6611605	1					
ANR	6611667	ReturnStatement	return ld_nnHL ;	714:1:16054:16068	6611605	11	True				
ANR	6611668	Identifier	ld_nnHL		6611605	0					
ANR	6611669	ReturnType	static int		6611605	1					
ANR	6611670	Identifier	rd_ld_nn		6611605	2					
ANR	6611671	ParameterList	const char * * p		6611605	3					
ANR	6611672	Parameter	const char * * p	702:20:15818:15831	6611605	0	True				
ANR	6611673	ParameterType	const char * *		6611605	0					
ANR	6611674	Identifier	p		6611605	1					
ANR	6611675	CFGEntryNode	ENTRY		6611605		True				
ANR	6611676	CFGExitNode	EXIT		6611605		True				
ANR	6611677	Symbol	p		6611605						
ANR	6611678	Symbol	NULL		6611605						
ANR	6611679	Symbol	indexed		6611605						
ANR	6611680	Symbol	indx		6611605						
ANR	6611681	Symbol	ld_nnHL		6611605						
ANR	6611682	Symbol	i		6611605						
ANR	6611683	Symbol	list		6611605						
ANR	6611684	Function	rd_lda	718:0:16102:16600							
ANR	6611685	FunctionDef	rd_lda (const char * * p)		6611684	0					
ANR	6611686	CompoundStatement		718:34:16136:16600	6611684	0					
ANR	6611687	Statement	define	719:1:16139:16144	6611684	0	True				
ANR	6611688	Statement	A_I	719:8:16146:16148	6611684	1	True				
ANR	6611689	Statement	9	719:12:16150:16150	6611684	2	True				
ANR	6611690	Statement	define	720:1:16153:16158	6611684	3	True				
ANR	6611691	Statement	A_R	720:8:16160:16162	6611684	4	True				
ANR	6611692	Statement	10	720:12:16164:16165	6611684	5	True				
ANR	6611693	Statement	define	721:1:16168:16173	6611684	6	True				
ANR	6611694	Statement	A_NN	721:8:16175:16178	6611684	7	True				
ANR	6611695	Statement	11	721:13:16180:16181	6611684	8	True				
ANR	6611696	IdentifierDeclStatement	int i ;	722:1:16184:16189	6611684	9	True				
ANR	6611697	IdentifierDecl	i		6611684	0					
ANR	6611698	IdentifierDeclType	int		6611684	0					
ANR	6611699	Identifier	i		6611684	1					
ANR	6611700	IdentifierDeclStatement	"const char * list [ ] = { ""( sp )"" , ""( iy +)"" , ""( de )"" , ""( bc )"" , ""( ix +)"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""(*)"" , ""*"" , NULL } ;"	723:1:16192:16345	6611684	10	True				
ANR	6611701	IdentifierDecl	"* list [ ] = { ""( sp )"" , ""( iy +)"" , ""( de )"" , ""( bc )"" , ""( ix +)"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""(*)"" , ""*"" , NULL }"		6611684	0					
ANR	6611702	IdentifierDeclType	const char * [ ]		6611684	0					
ANR	6611703	Identifier	list		6611684	1					
ANR	6611704	AssignmentExpression	"* list [ ] = { ""( sp )"" , ""( iy +)"" , ""( de )"" , ""( bc )"" , ""( ix +)"" , ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""i"" , ""r"" , ""(*)"" , ""*"" , NULL }"		6611684	2		=			
ANR	6611705	Identifier	list		6611684	0					
ANR	6611706	InitializerList	"""( sp )"""		6611684	1					
ANR	6611707	PrimaryExpression	"""( sp )"""		6611684	0					
ANR	6611708	PrimaryExpression	"""( iy +)"""		6611684	1					
ANR	6611709	PrimaryExpression	"""( de )"""		6611684	2					
ANR	6611710	PrimaryExpression	"""( bc )"""		6611684	3					
ANR	6611711	PrimaryExpression	"""( ix +)"""		6611684	4					
ANR	6611712	PrimaryExpression	"""b"""		6611684	5					
ANR	6611713	PrimaryExpression	"""c"""		6611684	6					
ANR	6611714	PrimaryExpression	"""d"""		6611684	7					
ANR	6611715	PrimaryExpression	"""e"""		6611684	8					
ANR	6611716	PrimaryExpression	"""h"""		6611684	9					
ANR	6611717	PrimaryExpression	"""l"""		6611684	10					
ANR	6611718	PrimaryExpression	"""( hl )"""		6611684	11					
ANR	6611719	PrimaryExpression	"""a"""		6611684	12					
ANR	6611720	PrimaryExpression	"""i"""		6611684	13					
ANR	6611721	PrimaryExpression	"""r"""		6611684	14					
ANR	6611722	PrimaryExpression	"""(*)"""		6611684	15					
ANR	6611723	PrimaryExpression	"""*"""		6611684	16					
ANR	6611724	Identifier	NULL		6611684	17					
ANR	6611725	IdentifierDeclStatement	const char * nn ;	727:1:16348:16362	6611684	11	True				
ANR	6611726	IdentifierDecl	* nn		6611684	0					
ANR	6611727	IdentifierDeclType	const char *		6611684	0					
ANR	6611728	Identifier	nn		6611684	1					
ANR	6611729	ExpressionStatement	"i = indx ( p , list , 0 , & nn )"	728:1:16365:16391	6611684	12	True				
ANR	6611730	AssignmentExpression	"i = indx ( p , list , 0 , & nn )"		6611684	0		=			
ANR	6611731	Identifier	i		6611684	0					
ANR	6611732	CallExpression	"indx ( p , list , 0 , & nn )"		6611684	1					
ANR	6611733	Callee	indx		6611684	0					
ANR	6611734	Identifier	indx		6611684	0					
ANR	6611735	ArgumentList	p		6611684	1					
ANR	6611736	Argument	p		6611684	0					
ANR	6611737	Identifier	p		6611684	0					
ANR	6611738	Argument	list		6611684	1					
ANR	6611739	Identifier	list		6611684	0					
ANR	6611740	Argument	0		6611684	2					
ANR	6611741	PrimaryExpression	0		6611684	0					
ANR	6611742	Argument	& nn		6611684	3					
ANR	6611743	UnaryOperationExpression	& nn		6611684	0					
ANR	6611744	UnaryOperator	&		6611684	0					
ANR	6611745	Identifier	nn		6611684	1					
ANR	6611746	IfStatement	if ( i == 2 || i == 5 )		6611684	13					
ANR	6611747	Condition	i == 2 || i == 5	729:5:16398:16413	6611684	0	True				
ANR	6611748	OrExpression	i == 2 || i == 5		6611684	0		||			
ANR	6611749	EqualityExpression	i == 2		6611684	0		==			
ANR	6611750	Identifier	i		6611684	0					
ANR	6611751	PrimaryExpression	2		6611684	1					
ANR	6611752	EqualityExpression	i == 5		6611684	1		==			
ANR	6611753	Identifier	i		6611684	0					
ANR	6611754	PrimaryExpression	5		6611684	1					
ANR	6611755	CompoundStatement		12:23:279:279	6611684	1					
ANR	6611756	ExpressionStatement	indexed = ( i == 2 ) ? 0xFD : 0xDD	730:2:16420:16450	6611684	0	True				
ANR	6611757	AssignmentExpression	indexed = ( i == 2 ) ? 0xFD : 0xDD		6611684	0		=			
ANR	6611758	Identifier	indexed		6611684	0					
ANR	6611759	ConditionalExpression	( i == 2 ) ? 0xFD : 0xDD		6611684	1					
ANR	6611760	Condition	i == 2		6611684	0					
ANR	6611761	EqualityExpression	i == 2		6611684	0		==			
ANR	6611762	Identifier	i		6611684	0					
ANR	6611763	PrimaryExpression	2		6611684	1					
ANR	6611764	PrimaryExpression	0xFD		6611684	1					
ANR	6611765	PrimaryExpression	0xDD		6611684	2					
ANR	6611766	ExpressionStatement	indexjmp = nn	731:2:16454:16467	6611684	1	True				
ANR	6611767	AssignmentExpression	indexjmp = nn		6611684	0		=			
ANR	6611768	Identifier	indexjmp		6611684	0					
ANR	6611769	Identifier	nn		6611684	1					
ANR	6611770	ReturnStatement	return 7 ;	732:2:16471:16479	6611684	2	True				
ANR	6611771	PrimaryExpression	7		6611684	0					
ANR	6611772	IfStatement	if ( i == 17 )		6611684	14					
ANR	6611773	Condition	i == 17	734:5:16489:16495	6611684	0	True				
ANR	6611774	EqualityExpression	i == 17		6611684	0		==			
ANR	6611775	Identifier	i		6611684	0					
ANR	6611776	PrimaryExpression	17		6611684	1					
ANR	6611777	CompoundStatement		17:14:361:361	6611684	1					
ANR	6611778	ExpressionStatement	readbyte = nn	735:2:16502:16515	6611684	0	True				
ANR	6611779	AssignmentExpression	readbyte = nn		6611684	0		=			
ANR	6611780	Identifier	readbyte		6611684	0					
ANR	6611781	Identifier	nn		6611684	1					
ANR	6611782	ExpressionStatement	writebyte = 1	736:2:16519:16532	6611684	1	True				
ANR	6611783	AssignmentExpression	writebyte = 1		6611684	0		=			
ANR	6611784	Identifier	writebyte		6611684	0					
ANR	6611785	PrimaryExpression	1		6611684	1					
ANR	6611786	ReturnStatement	return 7 ;	737:2:16536:16544	6611684	2	True				
ANR	6611787	PrimaryExpression	7		6611684	0					
ANR	6611788	IfStatement	if ( i == 16 )		6611684	15					
ANR	6611789	Condition	i == 16	739:5:16554:16560	6611684	0	True				
ANR	6611790	EqualityExpression	i == 16		6611684	0		==			
ANR	6611791	Identifier	i		6611684	0					
ANR	6611792	PrimaryExpression	16		6611684	1					
ANR	6611793	CompoundStatement		22:14:426:426	6611684	1					
ANR	6611794	ExpressionStatement	readword = nn	740:2:16567:16580	6611684	0	True				
ANR	6611795	AssignmentExpression	readword = nn		6611684	0		=			
ANR	6611796	Identifier	readword		6611684	0					
ANR	6611797	Identifier	nn		6611684	1					
ANR	6611798	ReturnStatement	return i - 5 ;	742:1:16586:16598	6611684	16	True				
ANR	6611799	AdditiveExpression	i - 5		6611684	0		-			
ANR	6611800	Identifier	i		6611684	0					
ANR	6611801	PrimaryExpression	5		6611684	1					
ANR	6611802	ReturnType	static int		6611684	1					
ANR	6611803	Identifier	rd_lda		6611684	2					
ANR	6611804	ParameterList	const char * * p		6611684	3					
ANR	6611805	Parameter	const char * * p	718:18:16120:16133	6611684	0	True				
ANR	6611806	ParameterType	const char * *		6611684	0					
ANR	6611807	Identifier	p		6611684	1					
ANR	6611808	CFGEntryNode	ENTRY		6611684		True				
ANR	6611809	CFGExitNode	EXIT		6611684		True				
ANR	6611810	Symbol	p		6611684						
ANR	6611811	Symbol	nn		6611684						
ANR	6611812	Symbol	NULL		6611684						
ANR	6611813	Symbol	writebyte		6611684						
ANR	6611814	Symbol	indexed		6611684						
ANR	6611815	Symbol	indx		6611684						
ANR	6611816	Symbol	i		6611684						
ANR	6611817	Symbol	readword		6611684						
ANR	6611818	Symbol	& nn		6611684						
ANR	6611819	Symbol	list		6611684						
ANR	6611820	Symbol	readbyte		6611684						
ANR	6611821	Symbol	indexjmp		6611684						
ANR	6611822	Function	rd_ldbcdehla	746:0:16641:17309							
ANR	6611823	FunctionDef	rd_ldbcdehla (const char * * p)		6611822	0					
ANR	6611824	CompoundStatement		746:40:16681:17309	6611822	0					
ANR	6611825	IdentifierDeclStatement	int i ;	747:1:16684:16689	6611822	0	True				
ANR	6611826	IdentifierDecl	i		6611822	0					
ANR	6611827	IdentifierDeclType	int		6611822	0					
ANR	6611828	Identifier	i		6611822	1					
ANR	6611829	IdentifierDeclStatement	"const char * list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""*"" , NULL } ;"	748:1:16692:16826	6611822	1	True				
ANR	6611830	IdentifierDecl	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""*"" , NULL }"		6611822	0					
ANR	6611831	IdentifierDeclType	const char * [ ]		6611822	0					
ANR	6611832	Identifier	list		6611822	1					
ANR	6611833	AssignmentExpression	"* list [ ] = { ""b"" , ""c"" , ""d"" , ""e"" , ""h"" , ""l"" , ""( hl )"" , ""a"" , ""( ix +)"" , ""( iy +)"" , ""ixh"" , ""ixl"" , ""iyh"" , ""iyl"" , ""*"" , NULL }"		6611822	2		=			
ANR	6611834	Identifier	list		6611822	0					
ANR	6611835	InitializerList	"""b"""		6611822	1					
ANR	6611836	PrimaryExpression	"""b"""		6611822	0					
ANR	6611837	PrimaryExpression	"""c"""		6611822	1					
ANR	6611838	PrimaryExpression	"""d"""		6611822	2					
ANR	6611839	PrimaryExpression	"""e"""		6611822	3					
ANR	6611840	PrimaryExpression	"""h"""		6611822	4					
ANR	6611841	PrimaryExpression	"""l"""		6611822	5					
ANR	6611842	PrimaryExpression	"""( hl )"""		6611822	6					
ANR	6611843	PrimaryExpression	"""a"""		6611822	7					
ANR	6611844	PrimaryExpression	"""( ix +)"""		6611822	8					
ANR	6611845	PrimaryExpression	"""( iy +)"""		6611822	9					
ANR	6611846	PrimaryExpression	"""ixh"""		6611822	10					
ANR	6611847	PrimaryExpression	"""ixl"""		6611822	11					
ANR	6611848	PrimaryExpression	"""iyh"""		6611822	12					
ANR	6611849	PrimaryExpression	"""iyl"""		6611822	13					
ANR	6611850	PrimaryExpression	"""*"""		6611822	14					
ANR	6611851	Identifier	NULL		6611822	15					
ANR	6611852	IdentifierDeclStatement	const char * nn ;	752:1:16829:16843	6611822	2	True				
ANR	6611853	IdentifierDecl	* nn		6611822	0					
ANR	6611854	IdentifierDeclType	const char *		6611822	0					
ANR	6611855	Identifier	nn		6611822	1					
ANR	6611856	ExpressionStatement	"i = indx ( p , list , 0 , & nn )"	753:1:16846:16872	6611822	3	True				
ANR	6611857	AssignmentExpression	"i = indx ( p , list , 0 , & nn )"		6611822	0		=			
ANR	6611858	Identifier	i		6611822	0					
ANR	6611859	CallExpression	"indx ( p , list , 0 , & nn )"		6611822	1					
ANR	6611860	Callee	indx		6611822	0					
ANR	6611861	Identifier	indx		6611822	0					
ANR	6611862	ArgumentList	p		6611822	1					
ANR	6611863	Argument	p		6611822	0					
ANR	6611864	Identifier	p		6611822	0					
ANR	6611865	Argument	list		6611822	1					
ANR	6611866	Identifier	list		6611822	0					
ANR	6611867	Argument	0		6611822	2					
ANR	6611868	PrimaryExpression	0		6611822	0					
ANR	6611869	Argument	& nn		6611822	3					
ANR	6611870	UnaryOperationExpression	& nn		6611822	0					
ANR	6611871	UnaryOperator	&		6611822	0					
ANR	6611872	Identifier	nn		6611822	1					
ANR	6611873	IfStatement	if ( i == 15 )		6611822	4					
ANR	6611874	Condition	i == 15	754:5:16879:16885	6611822	0	True				
ANR	6611875	EqualityExpression	i == 15		6611822	0		==			
ANR	6611876	Identifier	i		6611822	0					
ANR	6611877	PrimaryExpression	15		6611822	1					
ANR	6611878	CompoundStatement		9:14:206:206	6611822	1					
ANR	6611879	ExpressionStatement	readbyte = nn	755:2:16892:16905	6611822	0	True				
ANR	6611880	AssignmentExpression	readbyte = nn		6611822	0		=			
ANR	6611881	Identifier	readbyte		6611822	0					
ANR	6611882	Identifier	nn		6611822	1					
ANR	6611883	ExpressionStatement	writebyte = 1	756:2:16909:16922	6611822	1	True				
ANR	6611884	AssignmentExpression	writebyte = 1		6611822	0		=			
ANR	6611885	Identifier	writebyte		6611822	0					
ANR	6611886	PrimaryExpression	1		6611822	1					
ANR	6611887	ReturnStatement	return 7 ;	757:2:16926:16934	6611822	2	True				
ANR	6611888	PrimaryExpression	7		6611822	0					
ANR	6611889	IfStatement	if ( i > 10 )		6611822	5					
ANR	6611890	Condition	i > 10	759:5:16944:16949	6611822	0	True				
ANR	6611891	RelationalExpression	i > 10		6611822	0		>			
ANR	6611892	Identifier	i		6611822	0					
ANR	6611893	PrimaryExpression	10		6611822	1					
ANR	6611894	CompoundStatement		15:2:274:279	6611822	1					
ANR	6611895	IdentifierDeclStatement	int x ;	760:2:16956:16961	6611822	0	True				
ANR	6611896	IdentifierDecl	x		6611822	0					
ANR	6611897	IdentifierDeclType	int		6611822	0					
ANR	6611898	Identifier	x		6611822	1					
ANR	6611899	ExpressionStatement	x = 0xdd + 0x20 * ( i > 12 )	761:2:16965:16991	6611822	1	True				
ANR	6611900	AssignmentExpression	x = 0xdd + 0x20 * ( i > 12 )		6611822	0		=			
ANR	6611901	Identifier	x		6611822	0					
ANR	6611902	AdditiveExpression	0xdd + 0x20 * ( i > 12 )		6611822	1		+			
ANR	6611903	PrimaryExpression	0xdd		6611822	0					
ANR	6611904	MultiplicativeExpression	0x20 * ( i > 12 )		6611822	1		*			
ANR	6611905	PrimaryExpression	0x20		6611822	0					
ANR	6611906	RelationalExpression	i > 12		6611822	1		>			
ANR	6611907	Identifier	i		6611822	0					
ANR	6611908	PrimaryExpression	12		6611822	1					
ANR	6611909	IfStatement	if ( indexed && indexed != x )		6611822	2					
ANR	6611910	Condition	indexed && indexed != x	762:6:16999:17021	6611822	0	True				
ANR	6611911	AndExpression	indexed && indexed != x		6611822	0		&&			
ANR	6611912	Identifier	indexed		6611822	0					
ANR	6611913	EqualityExpression	indexed != x		6611822	1		!=			
ANR	6611914	Identifier	indexed		6611822	0					
ANR	6611915	Identifier	x		6611822	1					
ANR	6611916	CompoundStatement		17:31:342:342	6611822	1					
ANR	6611917	ExpressionStatement	"eprintf ( ""illegal use of index registers\\n"" )"	763:3:17029:17073	6611822	0	True				
ANR	6611918	CallExpression	"eprintf ( ""illegal use of index registers\\n"" )"		6611822	0					
ANR	6611919	Callee	eprintf		6611822	0					
ANR	6611920	Identifier	eprintf		6611822	0					
ANR	6611921	ArgumentList	"""illegal use of index registers\\n"""		6611822	1					
ANR	6611922	Argument	"""illegal use of index registers\\n"""		6611822	0					
ANR	6611923	PrimaryExpression	"""illegal use of index registers\\n"""		6611822	0					
ANR	6611924	ReturnStatement	return 0 ;	764:3:17078:17086	6611822	1	True				
ANR	6611925	PrimaryExpression	0		6611822	0					
ANR	6611926	ExpressionStatement	indexed = x	766:2:17094:17105	6611822	3	True				
ANR	6611927	AssignmentExpression	indexed = x		6611822	0		=			
ANR	6611928	Identifier	indexed		6611822	0					
ANR	6611929	Identifier	x		6611822	1					
ANR	6611930	ReturnStatement	return 6 - ( i & 1 ) ;	767:2:17109:17127	6611822	4	True				
ANR	6611931	AdditiveExpression	6 - ( i & 1 )		6611822	0		-			
ANR	6611932	PrimaryExpression	6		6611822	0					
ANR	6611933	BitAndExpression	i & 1		6611822	1		&			
ANR	6611934	Identifier	i		6611822	0					
ANR	6611935	PrimaryExpression	1		6611822	1					
ANR	6611936	IfStatement	if ( i > 8 )		6611822	6					
ANR	6611937	Condition	i > 8	769:5:17137:17141	6611822	0	True				
ANR	6611938	RelationalExpression	i > 8		6611822	0		>			
ANR	6611939	Identifier	i		6611822	0					
ANR	6611940	PrimaryExpression	8		6611822	1					
ANR	6611941	CompoundStatement		24:12:462:462	6611822	1					
ANR	6611942	IfStatement	if ( indexed )		6611822	0					
ANR	6611943	Condition	indexed	770:6:17152:17158	6611822	0	True				
ANR	6611944	Identifier	indexed		6611822	0					
ANR	6611945	CompoundStatement		25:15:479:479	6611822	1					
ANR	6611946	ExpressionStatement	"eprintf ( ""illegal use of index registers\\n"" )"	771:3:17166:17210	6611822	0	True				
ANR	6611947	CallExpression	"eprintf ( ""illegal use of index registers\\n"" )"		6611822	0					
ANR	6611948	Callee	eprintf		6611822	0					
ANR	6611949	Identifier	eprintf		6611822	0					
ANR	6611950	ArgumentList	"""illegal use of index registers\\n"""		6611822	1					
ANR	6611951	Argument	"""illegal use of index registers\\n"""		6611822	0					
ANR	6611952	PrimaryExpression	"""illegal use of index registers\\n"""		6611822	0					
ANR	6611953	ReturnStatement	return 0 ;	772:3:17215:17223	6611822	1	True				
ANR	6611954	PrimaryExpression	0		6611822	0					
ANR	6611955	ExpressionStatement	indexed = 0xDD + 0x20 * ( i == 10 )	774:2:17231:17264	6611822	1	True				
ANR	6611956	AssignmentExpression	indexed = 0xDD + 0x20 * ( i == 10 )		6611822	0		=			
ANR	6611957	Identifier	indexed		6611822	0					
ANR	6611958	AdditiveExpression	0xDD + 0x20 * ( i == 10 )		6611822	1		+			
ANR	6611959	PrimaryExpression	0xDD		6611822	0					
ANR	6611960	MultiplicativeExpression	0x20 * ( i == 10 )		6611822	1		*			
ANR	6611961	PrimaryExpression	0x20		6611822	0					
ANR	6611962	EqualityExpression	i == 10		6611822	1		==			
ANR	6611963	Identifier	i		6611822	0					
ANR	6611964	PrimaryExpression	10		6611822	1					
ANR	6611965	ExpressionStatement	indexjmp = nn	775:2:17268:17281	6611822	2	True				
ANR	6611966	AssignmentExpression	indexjmp = nn		6611822	0		=			
ANR	6611967	Identifier	indexjmp		6611822	0					
ANR	6611968	Identifier	nn		6611822	1					
ANR	6611969	ReturnStatement	return 7 ;	776:2:17285:17293	6611822	3	True				
ANR	6611970	PrimaryExpression	7		6611822	0					
ANR	6611971	ReturnStatement	return i ;	778:1:17299:17307	6611822	7	True				
ANR	6611972	Identifier	i		6611822	0					
ANR	6611973	ReturnType	static int		6611822	1					
ANR	6611974	Identifier	rd_ldbcdehla		6611822	2					
ANR	6611975	ParameterList	const char * * p		6611822	3					
ANR	6611976	Parameter	const char * * p	746:24:16665:16678	6611822	0	True				
ANR	6611977	ParameterType	const char * *		6611822	0					
ANR	6611978	Identifier	p		6611822	1					
ANR	6611979	CFGEntryNode	ENTRY		6611822		True				
ANR	6611980	CFGExitNode	EXIT		6611822		True				
ANR	6611981	Symbol	p		6611822						
ANR	6611982	Symbol	nn		6611822						
ANR	6611983	Symbol	NULL		6611822						
ANR	6611984	Symbol	writebyte		6611822						
ANR	6611985	Symbol	indexed		6611822						
ANR	6611986	Symbol	indx		6611822						
ANR	6611987	Symbol	x		6611822						
ANR	6611988	Symbol	i		6611822						
ANR	6611989	Symbol	& nn		6611822						
ANR	6611990	Symbol	list		6611822						
ANR	6611991	Symbol	readbyte		6611822						
ANR	6611992	Symbol	indexjmp		6611822						
ANR	6611993	Function	rd_nn_nn	782:0:17339:17480							
ANR	6611994	FunctionDef	rd_nn_nn (const char * * p)		6611993	0					
ANR	6611995	CompoundStatement		782:36:17375:17480	6611993	0					
ANR	6611996	Statement	define	783:1:17378:17383	6611993	0	True				
ANR	6611997	Statement	_NN	783:8:17385:17387	6611993	1	True				
ANR	6611998	Statement	1	783:12:17389:17389	6611993	2	True				
ANR	6611999	IdentifierDeclStatement	"const char * list [ ] = { ""(*)"" , ""*"" , NULL } ;"	784:1:17392:17436	6611993	3	True				
ANR	6612000	IdentifierDecl	"* list [ ] = { ""(*)"" , ""*"" , NULL }"		6611993	0					
ANR	6612001	IdentifierDeclType	const char * [ ]		6611993	0					
ANR	6612002	Identifier	list		6611993	1					
ANR	6612003	AssignmentExpression	"* list [ ] = { ""(*)"" , ""*"" , NULL }"		6611993	2		=			
ANR	6612004	Identifier	list		6611993	0					
ANR	6612005	InitializerList	"""(*)"""		6611993	1					
ANR	6612006	PrimaryExpression	"""(*)"""		6611993	0					
ANR	6612007	PrimaryExpression	"""*"""		6611993	1					
ANR	6612008	Identifier	NULL		6611993	2					
ANR	6612009	ReturnStatement	"return 2 - indx ( p , list , 0 , & readword ) ;"	787:1:17439:17478	6611993	4	True				
ANR	6612010	AdditiveExpression	"2 - indx ( p , list , 0 , & readword )"		6611993	0		-			
ANR	6612011	PrimaryExpression	2		6611993	0					
ANR	6612012	CallExpression	"indx ( p , list , 0 , & readword )"		6611993	1					
ANR	6612013	Callee	indx		6611993	0					
ANR	6612014	Identifier	indx		6611993	0					
ANR	6612015	ArgumentList	p		6611993	1					
ANR	6612016	Argument	p		6611993	0					
ANR	6612017	Identifier	p		6611993	0					
ANR	6612018	Argument	list		6611993	1					
ANR	6612019	Identifier	list		6611993	0					
ANR	6612020	Argument	0		6611993	2					
ANR	6612021	PrimaryExpression	0		6611993	0					
ANR	6612022	Argument	& readword		6611993	3					
ANR	6612023	UnaryOperationExpression	& readword		6611993	0					
ANR	6612024	UnaryOperator	&		6611993	0					
ANR	6612025	Identifier	readword		6611993	1					
ANR	6612026	ReturnType	static int		6611993	1					
ANR	6612027	Identifier	rd_nn_nn		6611993	2					
ANR	6612028	ParameterList	const char * * p		6611993	3					
ANR	6612029	Parameter	const char * * p	782:20:17359:17372	6611993	0	True				
ANR	6612030	ParameterType	const char * *		6611993	0					
ANR	6612031	Identifier	p		6611993	1					
ANR	6612032	CFGEntryNode	ENTRY		6611993		True				
ANR	6612033	CFGExitNode	EXIT		6611993		True				
ANR	6612034	Symbol	p		6611993						
ANR	6612035	Symbol	NULL		6611993						
ANR	6612036	Symbol	& readword		6611993						
ANR	6612037	Symbol	indx		6611993						
ANR	6612038	Symbol	list		6611993						
ANR	6612039	Function	rd_sp	791:0:17521:17826							
ANR	6612040	FunctionDef	rd_sp (const char * * p)		6612039	0					
ANR	6612041	CompoundStatement		791:33:17554:17826	6612039	0					
ANR	6612042	Statement	define	792:1:17557:17562	6612039	0	True				
ANR	6612043	Statement	SPNN	792:8:17564:17567	6612039	1	True				
ANR	6612044	Statement	0	792:13:17569:17569	6612039	2	True				
ANR	6612045	Statement	define	793:1:17572:17577	6612039	3	True				
ANR	6612046	Statement	SPHL	793:8:17579:17582	6612039	4	True				
ANR	6612047	Statement	1	793:13:17584:17584	6612039	5	True				
ANR	6612048	IdentifierDeclStatement	int i ;	794:1:17587:17592	6612039	6	True				
ANR	6612049	IdentifierDecl	i		6612039	0					
ANR	6612050	IdentifierDeclType	int		6612039	0					
ANR	6612051	Identifier	i		6612039	1					
ANR	6612052	IdentifierDeclStatement	"const char * list [ ] = { ""hl"" , ""ix"" , ""iy"" , ""(*)"" , ""*"" , NULL } ;"	795:1:17595:17657	6612039	7	True				
ANR	6612053	IdentifierDecl	"* list [ ] = { ""hl"" , ""ix"" , ""iy"" , ""(*)"" , ""*"" , NULL }"		6612039	0					
ANR	6612054	IdentifierDeclType	const char * [ ]		6612039	0					
ANR	6612055	Identifier	list		6612039	1					
ANR	6612056	AssignmentExpression	"* list [ ] = { ""hl"" , ""ix"" , ""iy"" , ""(*)"" , ""*"" , NULL }"		6612039	2		=			
ANR	6612057	Identifier	list		6612039	0					
ANR	6612058	InitializerList	"""hl"""		6612039	1					
ANR	6612059	PrimaryExpression	"""hl"""		6612039	0					
ANR	6612060	PrimaryExpression	"""ix"""		6612039	1					
ANR	6612061	PrimaryExpression	"""iy"""		6612039	2					
ANR	6612062	PrimaryExpression	"""(*)"""		6612039	3					
ANR	6612063	PrimaryExpression	"""*"""		6612039	4					
ANR	6612064	Identifier	NULL		6612039	5					
ANR	6612065	IdentifierDeclStatement	const char * nn ;	798:1:17660:17674	6612039	8	True				
ANR	6612066	IdentifierDecl	* nn		6612039	0					
ANR	6612067	IdentifierDeclType	const char *		6612039	0					
ANR	6612068	Identifier	nn		6612039	1					
ANR	6612069	ExpressionStatement	"i = indx ( p , list , 0 , & nn )"	799:1:17677:17703	6612039	9	True				
ANR	6612070	AssignmentExpression	"i = indx ( p , list , 0 , & nn )"		6612039	0		=			
ANR	6612071	Identifier	i		6612039	0					
ANR	6612072	CallExpression	"indx ( p , list , 0 , & nn )"		6612039	1					
ANR	6612073	Callee	indx		6612039	0					
ANR	6612074	Identifier	indx		6612039	0					
ANR	6612075	ArgumentList	p		6612039	1					
ANR	6612076	Argument	p		6612039	0					
ANR	6612077	Identifier	p		6612039	0					
ANR	6612078	Argument	list		6612039	1					
ANR	6612079	Identifier	list		6612039	0					
ANR	6612080	Argument	0		6612039	2					
ANR	6612081	PrimaryExpression	0		6612039	0					
ANR	6612082	Argument	& nn		6612039	3					
ANR	6612083	UnaryOperationExpression	& nn		6612039	0					
ANR	6612084	UnaryOperator	&		6612039	0					
ANR	6612085	Identifier	nn		6612039	1					
ANR	6612086	IfStatement	if ( i > 3 )		6612039	10					
ANR	6612087	Condition	i > 3	800:5:17710:17714	6612039	0	True				
ANR	6612088	RelationalExpression	i > 3		6612039	0		>			
ANR	6612089	Identifier	i		6612039	0					
ANR	6612090	PrimaryExpression	3		6612039	1					
ANR	6612091	CompoundStatement		10:12:162:162	6612039	1					
ANR	6612092	ExpressionStatement	readword = nn	801:2:17721:17734	6612039	0	True				
ANR	6612093	AssignmentExpression	readword = nn		6612039	0		=			
ANR	6612094	Identifier	readword		6612039	0					
ANR	6612095	Identifier	nn		6612039	1					
ANR	6612096	ReturnStatement	return i == 4 ? 2 : 0 ;	802:2:17738:17757	6612039	1	True				
ANR	6612097	ConditionalExpression	i == 4 ? 2 : 0		6612039	0					
ANR	6612098	Condition	i == 4		6612039	0					
ANR	6612099	EqualityExpression	i == 4		6612039	0		==			
ANR	6612100	Identifier	i		6612039	0					
ANR	6612101	PrimaryExpression	4		6612039	1					
ANR	6612102	PrimaryExpression	2		6612039	1					
ANR	6612103	PrimaryExpression	0		6612039	2					
ANR	6612104	IfStatement	if ( i != 1 )		6612039	11					
ANR	6612105	Condition	i != 1	804:5:17767:17772	6612039	0	True				
ANR	6612106	EqualityExpression	i != 1		6612039	0		!=			
ANR	6612107	Identifier	i		6612039	0					
ANR	6612108	PrimaryExpression	1		6612039	1					
ANR	6612109	CompoundStatement		14:13:220:220	6612039	1					
ANR	6612110	ExpressionStatement	indexed = 0xDD + 0x20 * ( i - 2 )	805:2:17779:17810	6612039	0	True				
ANR	6612111	AssignmentExpression	indexed = 0xDD + 0x20 * ( i - 2 )		6612039	0		=			
ANR	6612112	Identifier	indexed		6612039	0					
ANR	6612113	AdditiveExpression	0xDD + 0x20 * ( i - 2 )		6612039	1		+			
ANR	6612114	PrimaryExpression	0xDD		6612039	0					
ANR	6612115	MultiplicativeExpression	0x20 * ( i - 2 )		6612039	1		*			
ANR	6612116	PrimaryExpression	0x20		6612039	0					
ANR	6612117	AdditiveExpression	i - 2		6612039	1		-			
ANR	6612118	Identifier	i		6612039	0					
ANR	6612119	PrimaryExpression	2		6612039	1					
ANR	6612120	ReturnStatement	return 1 ;	807:1:17816:17824	6612039	12	True				
ANR	6612121	PrimaryExpression	1		6612039	0					
ANR	6612122	ReturnType	static int		6612039	1					
ANR	6612123	Identifier	rd_sp		6612039	2					
ANR	6612124	ParameterList	const char * * p		6612039	3					
ANR	6612125	Parameter	const char * * p	791:17:17538:17551	6612039	0	True				
ANR	6612126	ParameterType	const char * *		6612039	0					
ANR	6612127	Identifier	p		6612039	1					
ANR	6612128	CFGEntryNode	ENTRY		6612039		True				
ANR	6612129	CFGExitNode	EXIT		6612039		True				
ANR	6612130	Symbol	p		6612039						
ANR	6612131	Symbol	nn		6612039						
ANR	6612132	Symbol	NULL		6612039						
ANR	6612133	Symbol	indexed		6612039						
ANR	6612134	Symbol	indx		6612039						
ANR	6612135	Symbol	i		6612039						
ANR	6612136	Symbol	readword		6612039						
ANR	6612137	Symbol	& nn		6612039						
ANR	6612138	Symbol	list		6612039						
ANR	6612139	Function	assemble	811:0:17854:29926							
ANR	6612140	FunctionDef	"assemble (const char * str , unsigned char * _obuf)"		6612139	0					
ANR	6612141	CompoundStatement		811:59:17913:29926	6612139	0					
ANR	6612142	IdentifierDeclStatement	"int ifcount = 0 , noifcount = 0 ;"	812:1:17916:17946	6612139	0	True				
ANR	6612143	IdentifierDecl	ifcount = 0		6612139	0					
ANR	6612144	IdentifierDeclType	int		6612139	0					
ANR	6612145	Identifier	ifcount		6612139	1					
ANR	6612146	AssignmentExpression	ifcount = 0		6612139	2		=			
ANR	6612147	Identifier	ifcount		6612139	0					
ANR	6612148	PrimaryExpression	0		6612139	1					
ANR	6612149	IdentifierDecl	noifcount = 0		6612139	1					
ANR	6612150	IdentifierDeclType	int		6612139	0					
ANR	6612151	Identifier	noifcount		6612139	1					
ANR	6612152	AssignmentExpression	noifcount = 0		6612139	2		=			
ANR	6612153	Identifier	noifcount		6612139	0					
ANR	6612154	PrimaryExpression	0		6612139	1					
ANR	6612155	IdentifierDeclStatement	const char * ptr ;	813:1:17949:17964	6612139	1	True				
ANR	6612156	IdentifierDecl	* ptr		6612139	0					
ANR	6612157	IdentifierDeclType	const char *		6612139	0					
ANR	6612158	Identifier	ptr		6612139	1					
ANR	6612159	IdentifierDeclStatement	char * bufptr ;	814:1:17967:17979	6612139	2	True				
ANR	6612160	IdentifierDecl	* bufptr		6612139	0					
ANR	6612161	IdentifierDeclType	char *		6612139	0					
ANR	6612162	Identifier	bufptr		6612139	1					
ANR	6612163	IdentifierDeclStatement	"int r , s ;"	815:1:17982:17990	6612139	3	True				
ANR	6612164	IdentifierDecl	r		6612139	0					
ANR	6612165	IdentifierDeclType	int		6612139	0					
ANR	6612166	Identifier	r		6612139	1					
ANR	6612167	IdentifierDecl	s		6612139	1					
ANR	6612168	IdentifierDeclType	int		6612139	0					
ANR	6612169	Identifier	s		6612139	1					
ANR	6612170	ExpressionStatement	obuflen = 0	817:1:18012:18023	6612139	4	True				
ANR	6612171	AssignmentExpression	obuflen = 0		6612139	0		=			
ANR	6612172	Identifier	obuflen		6612139	0					
ANR	6612173	PrimaryExpression	0		6612139	1					
ANR	6612174	ExpressionStatement	obuf = _obuf	818:1:18026:18038	6612139	5	True				
ANR	6612175	AssignmentExpression	obuf = _obuf		6612139	0		=			
ANR	6612176	Identifier	obuf		6612139	0					
ANR	6612177	Identifier	_obuf		6612139	1					
ANR	6612178	DoStatement	do		6612139	6					
ANR	6612179	CompoundStatement		50:2:1017:1034	6612139	0					
ANR	6612180	IdentifierDeclStatement	"int cmd , cont = 1 ;"	822:2:18156:18173	6612139	0	True				
ANR	6612181	IdentifierDecl	cmd		6612139	0					
ANR	6612182	IdentifierDeclType	int		6612139	0					
ANR	6612183	Identifier	cmd		6612139	1					
ANR	6612184	IdentifierDecl	cont = 1		6612139	1					
ANR	6612185	IdentifierDeclType	int		6612139	0					
ANR	6612186	Identifier	cont		6612139	1					
ANR	6612187	AssignmentExpression	cont = 1		6612139	2		=			
ANR	6612188	Identifier	cont		6612139	0					
ANR	6612189	PrimaryExpression	1		6612139	1					
ANR	6612190	ExpressionStatement	z80buffer = strdup ( str )	824:2:18197:18221	6612139	1	True				
ANR	6612191	AssignmentExpression	z80buffer = strdup ( str )		6612139	0		=			
ANR	6612192	Identifier	z80buffer		6612139	0					
ANR	6612193	CallExpression	strdup ( str )		6612139	1					
ANR	6612194	Callee	strdup		6612139	0					
ANR	6612195	Identifier	strdup		6612139	0					
ANR	6612196	ArgumentList	str		6612139	1					
ANR	6612197	Argument	str		6612139	0					
ANR	6612198	Identifier	str		6612139	0					
ANR	6612199	IfStatement	if ( ! cont )		6612139	2					
ANR	6612200	Condition	! cont	825:6:18229:18233	6612139	0	True				
ANR	6612201	UnaryOperationExpression	! cont		6612139	0					
ANR	6612202	UnaryOperator	!		6612139	0					
ANR	6612203	Identifier	cont		6612139	1					
ANR	6612204	CompoundStatement		15:13:322:322	6612139	1					
ANR	6612205	BreakStatement	break ;	826:3:18241:18246	6612139	0	True				
ANR	6612206	ForStatement	"for ( bufptr = z80buffer ; ( bufptr = strchr ( bufptr , '\\n' ) ) ; )"		6612139	3					
ANR	6612207	ForInit	bufptr = z80buffer ;	830:7:18350:18368	6612139	0	True				
ANR	6612208	AssignmentExpression	bufptr = z80buffer		6612139	0		=			
ANR	6612209	Identifier	bufptr		6612139	0					
ANR	6612210	Identifier	z80buffer		6612139	1					
ANR	6612211	Condition	"bufptr = strchr ( bufptr , '\\n' )"	830:27:18370:18401	6612139	1	True				
ANR	6612212	AssignmentExpression	"bufptr = strchr ( bufptr , '\\n' )"		6612139	0		=			
ANR	6612213	Identifier	bufptr		6612139	0					
ANR	6612214	CallExpression	"strchr ( bufptr , '\\n' )"		6612139	1					
ANR	6612215	Callee	strchr		6612139	0					
ANR	6612216	Identifier	strchr		6612139	0					
ANR	6612217	ArgumentList	bufptr		6612139	1					
ANR	6612218	Argument	bufptr		6612139	0					
ANR	6612219	Identifier	bufptr		6612139	0					
ANR	6612220	Argument	'\\n'		6612139	1					
ANR	6612221	PrimaryExpression	'\\n'		6612139	0					
ANR	6612222	CompoundStatement		20:62:491:491	6612139	2					
ANR	6612223	ExpressionStatement	* bufptr = ' '	831:3:18410:18423	6612139	0	True				
ANR	6612224	AssignmentExpression	* bufptr = ' '		6612139	0		=			
ANR	6612225	UnaryOperationExpression	* bufptr		6612139	0					
ANR	6612226	UnaryOperator	*		6612139	0					
ANR	6612227	Identifier	bufptr		6612139	1					
ANR	6612228	PrimaryExpression	' '		6612139	1					
ANR	6612229	ForStatement	"for ( bufptr = z80buffer ; ( bufptr = strchr ( bufptr , '\\r' ) ) ; )"		6612139	4					
ANR	6612230	ForInit	bufptr = z80buffer ;	833:7:18436:18454	6612139	0	True				
ANR	6612231	AssignmentExpression	bufptr = z80buffer		6612139	0		=			
ANR	6612232	Identifier	bufptr		6612139	0					
ANR	6612233	Identifier	z80buffer		6612139	1					
ANR	6612234	Condition	"bufptr = strchr ( bufptr , '\\r' )"	833:27:18456:18487	6612139	1	True				
ANR	6612235	AssignmentExpression	"bufptr = strchr ( bufptr , '\\r' )"		6612139	0		=			
ANR	6612236	Identifier	bufptr		6612139	0					
ANR	6612237	CallExpression	"strchr ( bufptr , '\\r' )"		6612139	1					
ANR	6612238	Callee	strchr		6612139	0					
ANR	6612239	Identifier	strchr		6612139	0					
ANR	6612240	ArgumentList	bufptr		6612139	1					
ANR	6612241	Argument	bufptr		6612139	0					
ANR	6612242	Identifier	bufptr		6612139	0					
ANR	6612243	Argument	'\\r'		6612139	1					
ANR	6612244	PrimaryExpression	'\\r'		6612139	0					
ANR	6612245	CompoundStatement		23:62:577:577	6612139	2					
ANR	6612246	ExpressionStatement	* bufptr = ' '	834:3:18496:18509	6612139	0	True				
ANR	6612247	AssignmentExpression	* bufptr = ' '		6612139	0		=			
ANR	6612248	UnaryOperationExpression	* bufptr		6612139	0					
ANR	6612249	UnaryOperator	*		6612139	0					
ANR	6612250	Identifier	bufptr		6612139	1					
ANR	6612251	PrimaryExpression	' '		6612139	1					
ANR	6612252	ExpressionStatement	ptr = z80buffer	836:2:18517:18532	6612139	5	True				
ANR	6612253	AssignmentExpression	ptr = z80buffer		6612139	0		=			
ANR	6612254	Identifier	ptr		6612139	0					
ANR	6612255	Identifier	z80buffer		6612139	1					
ANR	6612256	ExpressionStatement	baseaddr = addr	838:2:18559:18574	6612139	6	True				
ANR	6612257	AssignmentExpression	baseaddr = addr		6612139	0		=			
ANR	6612258	Identifier	baseaddr		6612139	0					
ANR	6612259	Identifier	addr		6612139	1					
ANR	6612260	ExpressionStatement	++ stack [ sp ] . line	839:2:18578:18594	6612139	7	True				
ANR	6612261	UnaryExpression	++ stack [ sp ] . line		6612139	0					
ANR	6612262	IncDec	++		6612139	0					
ANR	6612263	MemberAccess	stack [ sp ] . line		6612139	1					
ANR	6612264	ArrayIndexing	stack [ sp ]		6612139	0					
ANR	6612265	Identifier	stack		6612139	0					
ANR	6612266	Identifier	sp		6612139	1					
ANR	6612267	Identifier	line		6612139	1					
ANR	6612268	ExpressionStatement	ptr = delspc ( ptr )	840:2:18598:18616	6612139	8	True				
ANR	6612269	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6612270	Identifier	ptr		6612139	0					
ANR	6612271	CallExpression	delspc ( ptr )		6612139	1					
ANR	6612272	Callee	delspc		6612139	0					
ANR	6612273	Identifier	delspc		6612139	0					
ANR	6612274	ArgumentList	ptr		6612139	1					
ANR	6612275	Argument	ptr		6612139	0					
ANR	6612276	Identifier	ptr		6612139	0					
ANR	6612277	IfStatement	if ( ! * ptr )		6612139	9					
ANR	6612278	Condition	! * ptr	841:6:18624:18628	6612139	0	True				
ANR	6612279	UnaryOperationExpression	! * ptr		6612139	0					
ANR	6612280	UnaryOperator	!		6612139	0					
ANR	6612281	UnaryOperationExpression	* ptr		6612139	1					
ANR	6612282	UnaryOperator	*		6612139	0					
ANR	6612283	Identifier	ptr		6612139	1					
ANR	6612284	CompoundStatement		31:13:717:717	6612139	1					
ANR	6612285	ContinueStatement	continue ;	842:3:18636:18644	6612139	0	True				
ANR	6612286	IfStatement	if ( ! noifcount && ! define_macro )		6612139	10					
ANR	6612287	Condition	! noifcount && ! define_macro	844:6:18656:18682	6612139	0	True				
ANR	6612288	AndExpression	! noifcount && ! define_macro		6612139	0		&&			
ANR	6612289	UnaryOperationExpression	! noifcount		6612139	0					
ANR	6612290	UnaryOperator	!		6612139	0					
ANR	6612291	Identifier	noifcount		6612139	1					
ANR	6612292	UnaryOperationExpression	! define_macro		6612139	1					
ANR	6612293	UnaryOperator	!		6612139	0					
ANR	6612294	Identifier	define_macro		6612139	1					
ANR	6612295	CompoundStatement		34:35:771:771	6612139	1					
ANR	6612296	ExpressionStatement	"readlabel ( & ptr , 1 )"	845:3:18690:18709	6612139	0	True				
ANR	6612297	CallExpression	"readlabel ( & ptr , 1 )"		6612139	0					
ANR	6612298	Callee	readlabel		6612139	0					
ANR	6612299	Identifier	readlabel		6612139	0					
ANR	6612300	ArgumentList	& ptr		6612139	1					
ANR	6612301	Argument	& ptr		6612139	0					
ANR	6612302	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612303	UnaryOperator	&		6612139	0					
ANR	6612304	Identifier	ptr		6612139	1					
ANR	6612305	Argument	1		6612139	1					
ANR	6612306	PrimaryExpression	1		6612139	0					
ANR	6612307	ElseStatement	else		6612139	0					
ANR	6612308	CompoundStatement		36:9:806:806	6612139	0					
ANR	6612309	ExpressionStatement	"readlabel ( & ptr , 0 )"	847:3:18725:18744	6612139	0	True				
ANR	6612310	CallExpression	"readlabel ( & ptr , 0 )"		6612139	0					
ANR	6612311	Callee	readlabel		6612139	0					
ANR	6612312	Identifier	readlabel		6612139	0					
ANR	6612313	ArgumentList	& ptr		6612139	1					
ANR	6612314	Argument	& ptr		6612139	0					
ANR	6612315	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612316	UnaryOperator	&		6612139	0					
ANR	6612317	Identifier	ptr		6612139	1					
ANR	6612318	Argument	0		6612139	1					
ANR	6612319	PrimaryExpression	0		6612139	0					
ANR	6612320	ExpressionStatement	ptr = delspc ( ptr )	849:2:18752:18770	6612139	11	True				
ANR	6612321	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6612322	Identifier	ptr		6612139	0					
ANR	6612323	CallExpression	delspc ( ptr )		6612139	1					
ANR	6612324	Callee	delspc		6612139	0					
ANR	6612325	Identifier	delspc		6612139	0					
ANR	6612326	ArgumentList	ptr		6612139	1					
ANR	6612327	Argument	ptr		6612139	0					
ANR	6612328	Identifier	ptr		6612139	0					
ANR	6612329	IfStatement	if ( ! * ptr )		6612139	12					
ANR	6612330	Condition	! * ptr	850:6:18778:18782	6612139	0	True				
ANR	6612331	UnaryOperationExpression	! * ptr		6612139	0					
ANR	6612332	UnaryOperator	!		6612139	0					
ANR	6612333	UnaryOperationExpression	* ptr		6612139	1					
ANR	6612334	UnaryOperator	*		6612139	0					
ANR	6612335	Identifier	ptr		6612139	1					
ANR	6612336	CompoundStatement		40:13:871:871	6612139	1					
ANR	6612337	ContinueStatement	continue ;	851:3:18790:18798	6612139	0	True				
ANR	6612338	ExpressionStatement	comma = 0	853:2:18806:18815	6612139	13	True				
ANR	6612339	AssignmentExpression	comma = 0		6612139	0		=			
ANR	6612340	Identifier	comma		6612139	0					
ANR	6612341	PrimaryExpression	0		6612139	1					
ANR	6612342	ExpressionStatement	indexed = 0	854:2:18819:18830	6612139	14	True				
ANR	6612343	AssignmentExpression	indexed = 0		6612139	0		=			
ANR	6612344	Identifier	indexed		6612139	0					
ANR	6612345	PrimaryExpression	0		6612139	1					
ANR	6612346	ExpressionStatement	indexjmp = 0	855:2:18834:18846	6612139	15	True				
ANR	6612347	AssignmentExpression	indexjmp = 0		6612139	0		=			
ANR	6612348	Identifier	indexjmp		6612139	0					
ANR	6612349	PrimaryExpression	0		6612139	1					
ANR	6612350	ExpressionStatement	writebyte = 0	856:2:18850:18863	6612139	16	True				
ANR	6612351	AssignmentExpression	writebyte = 0		6612139	0		=			
ANR	6612352	Identifier	writebyte		6612139	0					
ANR	6612353	PrimaryExpression	0		6612139	1					
ANR	6612354	ExpressionStatement	readbyte = 0	857:2:18867:18879	6612139	17	True				
ANR	6612355	AssignmentExpression	readbyte = 0		6612139	0		=			
ANR	6612356	Identifier	readbyte		6612139	0					
ANR	6612357	PrimaryExpression	0		6612139	1					
ANR	6612358	ExpressionStatement	readword = 0	858:2:18883:18895	6612139	18	True				
ANR	6612359	AssignmentExpression	readword = 0		6612139	0		=			
ANR	6612360	Identifier	readword		6612139	0					
ANR	6612361	PrimaryExpression	0		6612139	1					
ANR	6612362	ExpressionStatement	cmd = readcommand ( & ptr ) - 1	859:2:18899:18927	6612139	19	True				
ANR	6612363	AssignmentExpression	cmd = readcommand ( & ptr ) - 1		6612139	0		=			
ANR	6612364	Identifier	cmd		6612139	0					
ANR	6612365	AdditiveExpression	readcommand ( & ptr ) - 1		6612139	1		-			
ANR	6612366	CallExpression	readcommand ( & ptr )		6612139	0					
ANR	6612367	Callee	readcommand		6612139	0					
ANR	6612368	Identifier	readcommand		6612139	0					
ANR	6612369	ArgumentList	& ptr		6612139	1					
ANR	6612370	Argument	& ptr		6612139	0					
ANR	6612371	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612372	UnaryOperator	&		6612139	0					
ANR	6612373	Identifier	ptr		6612139	1					
ANR	6612374	PrimaryExpression	1		6612139	1					
ANR	6612375	IdentifierDeclStatement	"int i , have_quote ;"	860:2:18931:18948	6612139	20	True				
ANR	6612376	IdentifierDecl	i		6612139	0					
ANR	6612377	IdentifierDeclType	int		6612139	0					
ANR	6612378	Identifier	i		6612139	1					
ANR	6612379	IdentifierDecl	have_quote		6612139	1					
ANR	6612380	IdentifierDeclType	int		6612139	0					
ANR	6612381	Identifier	have_quote		6612139	1					
ANR	6612382	SwitchStatement	switch ( cmd )		6612139	21					
ANR	6612383	Condition	cmd	861:10:18960:18962	6612139	0	True				
ANR	6612384	Identifier	cmd		6612139	0					
ANR	6612385	CompoundStatement		51:15:1051:1051	6612139	1					
ANR	6612386	Label	case Z80_ADC :	862:2:18969:18981	6612139	0	True				
ANR	6612387	Identifier	Z80_ADC		6612139	0					
ANR	6612388	IfStatement	if ( ! ( r = rd_a_hl ( & ptr ) ) )		6612139	1					
ANR	6612389	Condition	! ( r = rd_a_hl ( & ptr ) )	863:7:18990:19010	6612139	0	True				
ANR	6612390	UnaryOperationExpression	! ( r = rd_a_hl ( & ptr ) )		6612139	0					
ANR	6612391	UnaryOperator	!		6612139	0					
ANR	6612392	AssignmentExpression	r = rd_a_hl ( & ptr )		6612139	1		=			
ANR	6612393	Identifier	r		6612139	0					
ANR	6612394	CallExpression	rd_a_hl ( & ptr )		6612139	1					
ANR	6612395	Callee	rd_a_hl		6612139	0					
ANR	6612396	Identifier	rd_a_hl		6612139	0					
ANR	6612397	ArgumentList	& ptr		6612139	1					
ANR	6612398	Argument	& ptr		6612139	0					
ANR	6612399	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612400	UnaryOperator	&		6612139	0					
ANR	6612401	Identifier	ptr		6612139	1					
ANR	6612402	CompoundStatement		53:30:1099:1099	6612139	1					
ANR	6612403	BreakStatement	break ;	864:4:19019:19024	6612139	0	True				
ANR	6612404	IfStatement	if ( r == HL )		6612139	2					
ANR	6612405	Condition	r == HL	866:7:19038:19044	6612139	0	True				
ANR	6612406	EqualityExpression	r == HL		6612139	0		==			
ANR	6612407	Identifier	r		6612139	0					
ANR	6612408	Identifier	HL		6612139	1					
ANR	6612409	CompoundStatement		56:16:1133:1133	6612139	1					
ANR	6612410	IfStatement	if ( ! ( r = rd_rr_ ( & ptr ) ) )		6612139	0					
ANR	6612411	Condition	! ( r = rd_rr_ ( & ptr ) )	867:8:19057:19075	6612139	0	True				
ANR	6612412	UnaryOperationExpression	! ( r = rd_rr_ ( & ptr ) )		6612139	0					
ANR	6612413	UnaryOperator	!		6612139	0					
ANR	6612414	AssignmentExpression	r = rd_rr_ ( & ptr )		6612139	1		=			
ANR	6612415	Identifier	r		6612139	0					
ANR	6612416	CallExpression	rd_rr_ ( & ptr )		6612139	1					
ANR	6612417	Callee	rd_rr_		6612139	0					
ANR	6612418	Identifier	rd_rr_		6612139	0					
ANR	6612419	ArgumentList	& ptr		6612139	1					
ANR	6612420	Argument	& ptr		6612139	0					
ANR	6612421	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612422	UnaryOperator	&		6612139	0					
ANR	6612423	Identifier	ptr		6612139	1					
ANR	6612424	CompoundStatement		57:29:1164:1164	6612139	1					
ANR	6612425	BreakStatement	break ;	868:5:19085:19090	6612139	0	True				
ANR	6612426	ExpressionStatement	wrtb ( 0xED )	870:4:19102:19113	6612139	1	True				
ANR	6612427	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6612428	Callee	wrtb		6612139	0					
ANR	6612429	Identifier	wrtb		6612139	0					
ANR	6612430	ArgumentList	0xED		6612139	1					
ANR	6612431	Argument	0xED		6612139	0					
ANR	6612432	PrimaryExpression	0xED		6612139	0					
ANR	6612433	ExpressionStatement	wrtb ( 0x4A + 0x10 * -- r )	871:4:19119:19143	6612139	2	True				
ANR	6612434	CallExpression	wrtb ( 0x4A + 0x10 * -- r )		6612139	0					
ANR	6612435	Callee	wrtb		6612139	0					
ANR	6612436	Identifier	wrtb		6612139	0					
ANR	6612437	ArgumentList	0x4A + 0x10 * -- r		6612139	1					
ANR	6612438	Argument	0x4A + 0x10 * -- r		6612139	0					
ANR	6612439	AdditiveExpression	0x4A + 0x10 * -- r		6612139	0		+			
ANR	6612440	PrimaryExpression	0x4A		6612139	0					
ANR	6612441	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6612442	PrimaryExpression	0x10		6612139	0					
ANR	6612443	UnaryExpression	-- r		6612139	1					
ANR	6612444	IncDec	--		6612139	0					
ANR	6612445	Identifier	r		6612139	1					
ANR	6612446	BreakStatement	break ;	872:4:19149:19154	6612139	3	True				
ANR	6612447	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	3					
ANR	6612448	Condition	! ( r = rd_r ( & ptr ) )	874:7:19168:19185	6612139	0	True				
ANR	6612449	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6612450	UnaryOperator	!		6612139	0					
ANR	6612451	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6612452	Identifier	r		6612139	0					
ANR	6612453	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6612454	Callee	rd_r		6612139	0					
ANR	6612455	Identifier	rd_r		6612139	0					
ANR	6612456	ArgumentList	& ptr		6612139	1					
ANR	6612457	Argument	& ptr		6612139	0					
ANR	6612458	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612459	UnaryOperator	&		6612139	0					
ANR	6612460	Identifier	ptr		6612139	1					
ANR	6612461	CompoundStatement		64:27:1274:1274	6612139	1					
ANR	6612462	BreakStatement	break ;	875:4:19194:19199	6612139	0	True				
ANR	6612463	ExpressionStatement	wrtb ( 0x88 + -- r )	877:3:19209:19226	6612139	4	True				
ANR	6612464	CallExpression	wrtb ( 0x88 + -- r )		6612139	0					
ANR	6612465	Callee	wrtb		6612139	0					
ANR	6612466	Identifier	wrtb		6612139	0					
ANR	6612467	ArgumentList	0x88 + -- r		6612139	1					
ANR	6612468	Argument	0x88 + -- r		6612139	0					
ANR	6612469	AdditiveExpression	0x88 + -- r		6612139	0		+			
ANR	6612470	PrimaryExpression	0x88		6612139	0					
ANR	6612471	UnaryExpression	-- r		6612139	1					
ANR	6612472	IncDec	--		6612139	0					
ANR	6612473	Identifier	r		6612139	1					
ANR	6612474	BreakStatement	break ;	878:3:19231:19236	6612139	5	True				
ANR	6612475	Label	case Z80_ADD :	879:2:19240:19252	6612139	6	True				
ANR	6612476	Identifier	Z80_ADD		6612139	0					
ANR	6612477	IfStatement	if ( ! ( r = rd_r_add ( & ptr ) ) )		6612139	7					
ANR	6612478	Condition	! ( r = rd_r_add ( & ptr ) )	880:7:19261:19282	6612139	0	True				
ANR	6612479	UnaryOperationExpression	! ( r = rd_r_add ( & ptr ) )		6612139	0					
ANR	6612480	UnaryOperator	!		6612139	0					
ANR	6612481	AssignmentExpression	r = rd_r_add ( & ptr )		6612139	1		=			
ANR	6612482	Identifier	r		6612139	0					
ANR	6612483	CallExpression	rd_r_add ( & ptr )		6612139	1					
ANR	6612484	Callee	rd_r_add		6612139	0					
ANR	6612485	Identifier	rd_r_add		6612139	0					
ANR	6612486	ArgumentList	& ptr		6612139	1					
ANR	6612487	Argument	& ptr		6612139	0					
ANR	6612488	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612489	UnaryOperator	&		6612139	0					
ANR	6612490	Identifier	ptr		6612139	1					
ANR	6612491	CompoundStatement		70:31:1371:1371	6612139	1					
ANR	6612492	BreakStatement	break ;	881:4:19291:19296	6612139	0	True				
ANR	6612493	IfStatement	if ( r == addHL )		6612139	8					
ANR	6612494	Condition	r == addHL	883:7:19310:19319	6612139	0	True				
ANR	6612495	EqualityExpression	r == addHL		6612139	0		==			
ANR	6612496	Identifier	r		6612139	0					
ANR	6612497	Identifier	addHL		6612139	1					
ANR	6612498	CompoundStatement		73:19:1408:1408	6612139	1					
ANR	6612499	IfStatement	if ( ! ( r = rd_rrxx ( & ptr ) ) )		6612139	0					
ANR	6612500	Condition	! ( r = rd_rrxx ( & ptr ) )	884:8:19332:19352	6612139	0	True				
ANR	6612501	UnaryOperationExpression	! ( r = rd_rrxx ( & ptr ) )		6612139	0					
ANR	6612502	UnaryOperator	!		6612139	0					
ANR	6612503	AssignmentExpression	r = rd_rrxx ( & ptr )		6612139	1		=			
ANR	6612504	Identifier	r		6612139	0					
ANR	6612505	CallExpression	rd_rrxx ( & ptr )		6612139	1					
ANR	6612506	Callee	rd_rrxx		6612139	0					
ANR	6612507	Identifier	rd_rrxx		6612139	0					
ANR	6612508	ArgumentList	& ptr		6612139	1					
ANR	6612509	Argument	& ptr		6612139	0					
ANR	6612510	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612511	UnaryOperator	&		6612139	0					
ANR	6612512	Identifier	ptr		6612139	1					
ANR	6612513	CompoundStatement		74:31:1441:1441	6612139	1					
ANR	6612514	BreakStatement	break ;	885:5:19362:19367	6612139	0	True				
ANR	6612515	ExpressionStatement	wrtb ( 0x09 + 0x10 * -- r )	887:4:19379:19403	6612139	1	True				
ANR	6612516	CallExpression	wrtb ( 0x09 + 0x10 * -- r )		6612139	0					
ANR	6612517	Callee	wrtb		6612139	0					
ANR	6612518	Identifier	wrtb		6612139	0					
ANR	6612519	ArgumentList	0x09 + 0x10 * -- r		6612139	1					
ANR	6612520	Argument	0x09 + 0x10 * -- r		6612139	0					
ANR	6612521	AdditiveExpression	0x09 + 0x10 * -- r		6612139	0		+			
ANR	6612522	PrimaryExpression	0x09		6612139	0					
ANR	6612523	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6612524	PrimaryExpression	0x10		6612139	0					
ANR	6612525	UnaryExpression	-- r		6612139	1					
ANR	6612526	IncDec	--		6612139	0					
ANR	6612527	Identifier	r		6612139	1					
ANR	6612528	BreakStatement	break ;	888:4:19434:19439	6612139	2	True				
ANR	6612529	IfStatement	if ( has_argument ( & ptr ) )		6612139	9					
ANR	6612530	Condition	has_argument ( & ptr )	890:7:19453:19471	6612139	0	True				
ANR	6612531	CallExpression	has_argument ( & ptr )		6612139	0					
ANR	6612532	Callee	has_argument		6612139	0					
ANR	6612533	Identifier	has_argument		6612139	0					
ANR	6612534	ArgumentList	& ptr		6612139	1					
ANR	6612535	Argument	& ptr		6612139	0					
ANR	6612536	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612537	UnaryOperator	&		6612139	0					
ANR	6612538	Identifier	ptr		6612139	1					
ANR	6612539	CompoundStatement		80:28:1560:1560	6612139	1					
ANR	6612540	IfStatement	if ( r != A )		6612139	0					
ANR	6612541	Condition	r != A	891:8:19484:19489	6612139	0	True				
ANR	6612542	EqualityExpression	r != A		6612139	0		!=			
ANR	6612543	Identifier	r		6612139	0					
ANR	6612544	Identifier	A		6612139	1					
ANR	6612545	CompoundStatement		81:16:1578:1578	6612139	1					
ANR	6612546	ExpressionStatement	"eprintf ( ""parse error before: %s\\n"" , ptr )"	892:5:19499:19540	6612139	0	True				
ANR	6612547	CallExpression	"eprintf ( ""parse error before: %s\\n"" , ptr )"		6612139	0					
ANR	6612548	Callee	eprintf		6612139	0					
ANR	6612549	Identifier	eprintf		6612139	0					
ANR	6612550	ArgumentList	"""parse error before: %s\\n"""		6612139	1					
ANR	6612551	Argument	"""parse error before: %s\\n"""		6612139	0					
ANR	6612552	PrimaryExpression	"""parse error before: %s\\n"""		6612139	0					
ANR	6612553	Argument	ptr		6612139	1					
ANR	6612554	Identifier	ptr		6612139	0					
ANR	6612555	BreakStatement	break ;	893:5:19547:19552	6612139	1	True				
ANR	6612556	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	1					
ANR	6612557	Condition	! ( r = rd_r ( & ptr ) )	895:8:19568:19585	6612139	0	True				
ANR	6612558	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6612559	UnaryOperator	!		6612139	0					
ANR	6612560	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6612561	Identifier	r		6612139	0					
ANR	6612562	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6612563	Callee	rd_r		6612139	0					
ANR	6612564	Identifier	rd_r		6612139	0					
ANR	6612565	ArgumentList	& ptr		6612139	1					
ANR	6612566	Argument	& ptr		6612139	0					
ANR	6612567	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612568	UnaryOperator	&		6612139	0					
ANR	6612569	Identifier	ptr		6612139	1					
ANR	6612570	CompoundStatement		85:28:1674:1674	6612139	1					
ANR	6612571	BreakStatement	break ;	896:5:19595:19600	6612139	0	True				
ANR	6612572	ExpressionStatement	wrtb ( 0x80 + -- r )	898:4:19612:19629	6612139	2	True				
ANR	6612573	CallExpression	wrtb ( 0x80 + -- r )		6612139	0					
ANR	6612574	Callee	wrtb		6612139	0					
ANR	6612575	Identifier	wrtb		6612139	0					
ANR	6612576	ArgumentList	0x80 + -- r		6612139	1					
ANR	6612577	Argument	0x80 + -- r		6612139	0					
ANR	6612578	AdditiveExpression	0x80 + -- r		6612139	0		+			
ANR	6612579	PrimaryExpression	0x80		6612139	0					
ANR	6612580	UnaryExpression	-- r		6612139	1					
ANR	6612581	IncDec	--		6612139	0					
ANR	6612582	Identifier	r		6612139	1					
ANR	6612583	BreakStatement	break ;	899:4:19651:19656	6612139	3	True				
ANR	6612584	ExpressionStatement	wrtb ( 0x80 + -- r )	901:3:19666:19683	6612139	10	True				
ANR	6612585	CallExpression	wrtb ( 0x80 + -- r )		6612139	0					
ANR	6612586	Callee	wrtb		6612139	0					
ANR	6612587	Identifier	wrtb		6612139	0					
ANR	6612588	ArgumentList	0x80 + -- r		6612139	1					
ANR	6612589	Argument	0x80 + -- r		6612139	0					
ANR	6612590	AdditiveExpression	0x80 + -- r		6612139	0		+			
ANR	6612591	PrimaryExpression	0x80		6612139	0					
ANR	6612592	UnaryExpression	-- r		6612139	1					
ANR	6612593	IncDec	--		6612139	0					
ANR	6612594	Identifier	r		6612139	1					
ANR	6612595	BreakStatement	break ;	902:3:19702:19707	6612139	11	True				
ANR	6612596	Label	case Z80_AND :	903:2:19711:19723	6612139	12	True				
ANR	6612597	Identifier	Z80_AND		6612139	0					
ANR	6612598	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	13					
ANR	6612599	Condition	! ( r = rd_r ( & ptr ) )	904:7:19732:19749	6612139	0	True				
ANR	6612600	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6612601	UnaryOperator	!		6612139	0					
ANR	6612602	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6612603	Identifier	r		6612139	0					
ANR	6612604	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6612605	Callee	rd_r		6612139	0					
ANR	6612606	Identifier	rd_r		6612139	0					
ANR	6612607	ArgumentList	& ptr		6612139	1					
ANR	6612608	Argument	& ptr		6612139	0					
ANR	6612609	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612610	UnaryOperator	&		6612139	0					
ANR	6612611	Identifier	ptr		6612139	1					
ANR	6612612	CompoundStatement		94:27:1838:1838	6612139	1					
ANR	6612613	BreakStatement	break ;	905:4:19758:19763	6612139	0	True				
ANR	6612614	ExpressionStatement	wrtb ( 0xA0 + -- r )	907:3:19773:19790	6612139	14	True				
ANR	6612615	CallExpression	wrtb ( 0xA0 + -- r )		6612139	0					
ANR	6612616	Callee	wrtb		6612139	0					
ANR	6612617	Identifier	wrtb		6612139	0					
ANR	6612618	ArgumentList	0xA0 + -- r		6612139	1					
ANR	6612619	Argument	0xA0 + -- r		6612139	0					
ANR	6612620	AdditiveExpression	0xA0 + -- r		6612139	0		+			
ANR	6612621	PrimaryExpression	0xA0		6612139	0					
ANR	6612622	UnaryExpression	-- r		6612139	1					
ANR	6612623	IncDec	--		6612139	0					
ANR	6612624	Identifier	r		6612139	1					
ANR	6612625	BreakStatement	break ;	908:3:19795:19800	6612139	15	True				
ANR	6612626	Label	case Z80_BIT :	909:2:19804:19816	6612139	16	True				
ANR	6612627	Identifier	Z80_BIT		6612139	0					
ANR	6612628	IfStatement	if ( ! rd_0_7 ( & ptr ) )		6612139	17					
ANR	6612629	Condition	! rd_0_7 ( & ptr )	910:7:19825:19838	6612139	0	True				
ANR	6612630	UnaryOperationExpression	! rd_0_7 ( & ptr )		6612139	0					
ANR	6612631	UnaryOperator	!		6612139	0					
ANR	6612632	CallExpression	rd_0_7 ( & ptr )		6612139	1					
ANR	6612633	Callee	rd_0_7		6612139	0					
ANR	6612634	Identifier	rd_0_7		6612139	0					
ANR	6612635	ArgumentList	& ptr		6612139	1					
ANR	6612636	Argument	& ptr		6612139	0					
ANR	6612637	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612638	UnaryOperator	&		6612139	0					
ANR	6612639	Identifier	ptr		6612139	1					
ANR	6612640	CompoundStatement		100:23:1927:1927	6612139	1					
ANR	6612641	BreakStatement	break ;	911:4:19847:19852	6612139	0	True				
ANR	6612642	ExpressionStatement	rd_comma ( & ptr )	913:3:19862:19877	6612139	18	True				
ANR	6612643	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6612644	Callee	rd_comma		6612139	0					
ANR	6612645	Identifier	rd_comma		6612139	0					
ANR	6612646	ArgumentList	& ptr		6612139	1					
ANR	6612647	Argument	& ptr		6612139	0					
ANR	6612648	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612649	UnaryOperator	&		6612139	0					
ANR	6612650	Identifier	ptr		6612139	1					
ANR	6612651	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	19					
ANR	6612652	Condition	! ( r = rd_r_ ( & ptr ) )	914:7:19886:19903	6612139	0	True				
ANR	6612653	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6612654	UnaryOperator	!		6612139	0					
ANR	6612655	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6612656	Identifier	r		6612139	0					
ANR	6612657	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6612658	Callee	rd_r_		6612139	0					
ANR	6612659	Identifier	rd_r_		6612139	0					
ANR	6612660	ArgumentList	& ptr		6612139	1					
ANR	6612661	Argument	& ptr		6612139	0					
ANR	6612662	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612663	UnaryOperator	&		6612139	0					
ANR	6612664	Identifier	ptr		6612139	1					
ANR	6612665	CompoundStatement		104:27:1992:1992	6612139	1					
ANR	6612666	BreakStatement	break ;	915:4:19912:19917	6612139	0	True				
ANR	6612667	ExpressionStatement	wrtb ( 0xCB )	917:3:19927:19938	6612139	20	True				
ANR	6612668	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6612669	Callee	wrtb		6612139	0					
ANR	6612670	Identifier	wrtb		6612139	0					
ANR	6612671	ArgumentList	0xCB		6612139	1					
ANR	6612672	Argument	0xCB		6612139	0					
ANR	6612673	PrimaryExpression	0xCB		6612139	0					
ANR	6612674	ExpressionStatement	wrtb ( 0x40 + ( r - 1 ) )	918:3:19943:19964	6612139	21	True				
ANR	6612675	CallExpression	wrtb ( 0x40 + ( r - 1 ) )		6612139	0					
ANR	6612676	Callee	wrtb		6612139	0					
ANR	6612677	Identifier	wrtb		6612139	0					
ANR	6612678	ArgumentList	0x40 + ( r - 1 )		6612139	1					
ANR	6612679	Argument	0x40 + ( r - 1 )		6612139	0					
ANR	6612680	AdditiveExpression	0x40 + ( r - 1 )		6612139	0		+			
ANR	6612681	PrimaryExpression	0x40		6612139	0					
ANR	6612682	AdditiveExpression	r - 1		6612139	1		-			
ANR	6612683	Identifier	r		6612139	0					
ANR	6612684	PrimaryExpression	1		6612139	1					
ANR	6612685	BreakStatement	break ;	919:3:19969:19974	6612139	22	True				
ANR	6612686	Label	case Z80_CALL :	920:2:19978:19991	6612139	23	True				
ANR	6612687	Identifier	Z80_CALL		6612139	0					
ANR	6612688	IfStatement	if ( ( r = rd_cc ( & ptr ) ) )		6612139	24					
ANR	6612689	Condition	r = rd_cc ( & ptr )	921:7:20000:20017	6612139	0	True				
ANR	6612690	AssignmentExpression	r = rd_cc ( & ptr )		6612139	0		=			
ANR	6612691	Identifier	r		6612139	0					
ANR	6612692	CallExpression	rd_cc ( & ptr )		6612139	1					
ANR	6612693	Callee	rd_cc		6612139	0					
ANR	6612694	Identifier	rd_cc		6612139	0					
ANR	6612695	ArgumentList	& ptr		6612139	1					
ANR	6612696	Argument	& ptr		6612139	0					
ANR	6612697	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612698	UnaryOperator	&		6612139	0					
ANR	6612699	Identifier	ptr		6612139	1					
ANR	6612700	CompoundStatement		111:27:2106:2106	6612139	1					
ANR	6612701	ExpressionStatement	wrtb ( 0xC4 + 8 * -- r )	922:4:20026:20047	6612139	0	True				
ANR	6612702	CallExpression	wrtb ( 0xC4 + 8 * -- r )		6612139	0					
ANR	6612703	Callee	wrtb		6612139	0					
ANR	6612704	Identifier	wrtb		6612139	0					
ANR	6612705	ArgumentList	0xC4 + 8 * -- r		6612139	1					
ANR	6612706	Argument	0xC4 + 8 * -- r		6612139	0					
ANR	6612707	AdditiveExpression	0xC4 + 8 * -- r		6612139	0		+			
ANR	6612708	PrimaryExpression	0xC4		6612139	0					
ANR	6612709	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6612710	PrimaryExpression	8		6612139	0					
ANR	6612711	UnaryExpression	-- r		6612139	1					
ANR	6612712	IncDec	--		6612139	0					
ANR	6612713	Identifier	r		6612139	1					
ANR	6612714	ExpressionStatement	rd_comma ( & ptr )	923:4:20053:20068	6612139	1	True				
ANR	6612715	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6612716	Callee	rd_comma		6612139	0					
ANR	6612717	Identifier	rd_comma		6612139	0					
ANR	6612718	ArgumentList	& ptr		6612139	1					
ANR	6612719	Argument	& ptr		6612139	0					
ANR	6612720	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612721	UnaryOperator	&		6612139	0					
ANR	6612722	Identifier	ptr		6612139	1					
ANR	6612723	ElseStatement	else		6612139	0					
ANR	6612724	CompoundStatement		114:10:2166:2166	6612139	0					
ANR	6612725	ExpressionStatement	wrtb ( 0xCD )	925:4:20086:20097	6612139	0	True				
ANR	6612726	CallExpression	wrtb ( 0xCD )		6612139	0					
ANR	6612727	Callee	wrtb		6612139	0					
ANR	6612728	Identifier	wrtb		6612139	0					
ANR	6612729	ArgumentList	0xCD		6612139	1					
ANR	6612730	Argument	0xCD		6612139	0					
ANR	6612731	PrimaryExpression	0xCD		6612139	0					
ANR	6612732	BreakStatement	break ;	927:3:20107:20112	6612139	25	True				
ANR	6612733	Label	case Z80_CCF :	928:2:20116:20128	6612139	26	True				
ANR	6612734	Identifier	Z80_CCF		6612139	0					
ANR	6612735	ExpressionStatement	wrtb ( 0x3F )	929:3:20133:20144	6612139	27	True				
ANR	6612736	CallExpression	wrtb ( 0x3F )		6612139	0					
ANR	6612737	Callee	wrtb		6612139	0					
ANR	6612738	Identifier	wrtb		6612139	0					
ANR	6612739	ArgumentList	0x3F		6612139	1					
ANR	6612740	Argument	0x3F		6612139	0					
ANR	6612741	PrimaryExpression	0x3F		6612139	0					
ANR	6612742	BreakStatement	break ;	930:3:20149:20154	6612139	28	True				
ANR	6612743	Label	case Z80_CP :	931:2:20158:20169	6612139	29	True				
ANR	6612744	Identifier	Z80_CP		6612139	0					
ANR	6612745	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	30					
ANR	6612746	Condition	! ( r = rd_r ( & ptr ) )	932:7:20178:20195	6612139	0	True				
ANR	6612747	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6612748	UnaryOperator	!		6612139	0					
ANR	6612749	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6612750	Identifier	r		6612139	0					
ANR	6612751	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6612752	Callee	rd_r		6612139	0					
ANR	6612753	Identifier	rd_r		6612139	0					
ANR	6612754	ArgumentList	& ptr		6612139	1					
ANR	6612755	Argument	& ptr		6612139	0					
ANR	6612756	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612757	UnaryOperator	&		6612139	0					
ANR	6612758	Identifier	ptr		6612139	1					
ANR	6612759	CompoundStatement		122:27:2284:2284	6612139	1					
ANR	6612760	BreakStatement	break ;	933:4:20204:20209	6612139	0	True				
ANR	6612761	ExpressionStatement	wrtb ( 0xB8 + -- r )	935:3:20219:20236	6612139	31	True				
ANR	6612762	CallExpression	wrtb ( 0xB8 + -- r )		6612139	0					
ANR	6612763	Callee	wrtb		6612139	0					
ANR	6612764	Identifier	wrtb		6612139	0					
ANR	6612765	ArgumentList	0xB8 + -- r		6612139	1					
ANR	6612766	Argument	0xB8 + -- r		6612139	0					
ANR	6612767	AdditiveExpression	0xB8 + -- r		6612139	0		+			
ANR	6612768	PrimaryExpression	0xB8		6612139	0					
ANR	6612769	UnaryExpression	-- r		6612139	1					
ANR	6612770	IncDec	--		6612139	0					
ANR	6612771	Identifier	r		6612139	1					
ANR	6612772	BreakStatement	break ;	936:3:20241:20246	6612139	32	True				
ANR	6612773	Label	case Z80_CPD :	937:2:20250:20262	6612139	33	True				
ANR	6612774	Identifier	Z80_CPD		6612139	0					
ANR	6612775	ExpressionStatement	wrtb ( 0xED )	938:3:20267:20278	6612139	34	True				
ANR	6612776	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6612777	Callee	wrtb		6612139	0					
ANR	6612778	Identifier	wrtb		6612139	0					
ANR	6612779	ArgumentList	0xED		6612139	1					
ANR	6612780	Argument	0xED		6612139	0					
ANR	6612781	PrimaryExpression	0xED		6612139	0					
ANR	6612782	ExpressionStatement	wrtb ( 0xA9 )	939:3:20283:20294	6612139	35	True				
ANR	6612783	CallExpression	wrtb ( 0xA9 )		6612139	0					
ANR	6612784	Callee	wrtb		6612139	0					
ANR	6612785	Identifier	wrtb		6612139	0					
ANR	6612786	ArgumentList	0xA9		6612139	1					
ANR	6612787	Argument	0xA9		6612139	0					
ANR	6612788	PrimaryExpression	0xA9		6612139	0					
ANR	6612789	BreakStatement	break ;	940:3:20299:20304	6612139	36	True				
ANR	6612790	Label	case Z80_CPDR :	941:2:20308:20321	6612139	37	True				
ANR	6612791	Identifier	Z80_CPDR		6612139	0					
ANR	6612792	ExpressionStatement	wrtb ( 0xED )	942:3:20326:20337	6612139	38	True				
ANR	6612793	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6612794	Callee	wrtb		6612139	0					
ANR	6612795	Identifier	wrtb		6612139	0					
ANR	6612796	ArgumentList	0xED		6612139	1					
ANR	6612797	Argument	0xED		6612139	0					
ANR	6612798	PrimaryExpression	0xED		6612139	0					
ANR	6612799	ExpressionStatement	wrtb ( 0xB9 )	943:3:20342:20353	6612139	39	True				
ANR	6612800	CallExpression	wrtb ( 0xB9 )		6612139	0					
ANR	6612801	Callee	wrtb		6612139	0					
ANR	6612802	Identifier	wrtb		6612139	0					
ANR	6612803	ArgumentList	0xB9		6612139	1					
ANR	6612804	Argument	0xB9		6612139	0					
ANR	6612805	PrimaryExpression	0xB9		6612139	0					
ANR	6612806	BreakStatement	break ;	944:3:20358:20363	6612139	40	True				
ANR	6612807	Label	case Z80_CPI :	945:2:20367:20379	6612139	41	True				
ANR	6612808	Identifier	Z80_CPI		6612139	0					
ANR	6612809	ExpressionStatement	wrtb ( 0xED )	946:3:20384:20395	6612139	42	True				
ANR	6612810	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6612811	Callee	wrtb		6612139	0					
ANR	6612812	Identifier	wrtb		6612139	0					
ANR	6612813	ArgumentList	0xED		6612139	1					
ANR	6612814	Argument	0xED		6612139	0					
ANR	6612815	PrimaryExpression	0xED		6612139	0					
ANR	6612816	ExpressionStatement	wrtb ( 0xA1 )	947:3:20400:20411	6612139	43	True				
ANR	6612817	CallExpression	wrtb ( 0xA1 )		6612139	0					
ANR	6612818	Callee	wrtb		6612139	0					
ANR	6612819	Identifier	wrtb		6612139	0					
ANR	6612820	ArgumentList	0xA1		6612139	1					
ANR	6612821	Argument	0xA1		6612139	0					
ANR	6612822	PrimaryExpression	0xA1		6612139	0					
ANR	6612823	BreakStatement	break ;	948:3:20416:20421	6612139	44	True				
ANR	6612824	Label	case Z80_CPIR :	949:2:20425:20438	6612139	45	True				
ANR	6612825	Identifier	Z80_CPIR		6612139	0					
ANR	6612826	ExpressionStatement	wrtb ( 0xED )	950:3:20443:20454	6612139	46	True				
ANR	6612827	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6612828	Callee	wrtb		6612139	0					
ANR	6612829	Identifier	wrtb		6612139	0					
ANR	6612830	ArgumentList	0xED		6612139	1					
ANR	6612831	Argument	0xED		6612139	0					
ANR	6612832	PrimaryExpression	0xED		6612139	0					
ANR	6612833	ExpressionStatement	wrtb ( 0xB1 )	951:3:20459:20470	6612139	47	True				
ANR	6612834	CallExpression	wrtb ( 0xB1 )		6612139	0					
ANR	6612835	Callee	wrtb		6612139	0					
ANR	6612836	Identifier	wrtb		6612139	0					
ANR	6612837	ArgumentList	0xB1		6612139	1					
ANR	6612838	Argument	0xB1		6612139	0					
ANR	6612839	PrimaryExpression	0xB1		6612139	0					
ANR	6612840	BreakStatement	break ;	952:3:20475:20480	6612139	48	True				
ANR	6612841	Label	case Z80_CPL :	953:2:20484:20496	6612139	49	True				
ANR	6612842	Identifier	Z80_CPL		6612139	0					
ANR	6612843	ExpressionStatement	wrtb ( 0x2F )	954:3:20501:20512	6612139	50	True				
ANR	6612844	CallExpression	wrtb ( 0x2F )		6612139	0					
ANR	6612845	Callee	wrtb		6612139	0					
ANR	6612846	Identifier	wrtb		6612139	0					
ANR	6612847	ArgumentList	0x2F		6612139	1					
ANR	6612848	Argument	0x2F		6612139	0					
ANR	6612849	PrimaryExpression	0x2F		6612139	0					
ANR	6612850	BreakStatement	break ;	955:3:20517:20522	6612139	51	True				
ANR	6612851	Label	case Z80_DAA :	956:2:20526:20538	6612139	52	True				
ANR	6612852	Identifier	Z80_DAA		6612139	0					
ANR	6612853	ExpressionStatement	wrtb ( 0x27 )	957:3:20543:20554	6612139	53	True				
ANR	6612854	CallExpression	wrtb ( 0x27 )		6612139	0					
ANR	6612855	Callee	wrtb		6612139	0					
ANR	6612856	Identifier	wrtb		6612139	0					
ANR	6612857	ArgumentList	0x27		6612139	1					
ANR	6612858	Argument	0x27		6612139	0					
ANR	6612859	PrimaryExpression	0x27		6612139	0					
ANR	6612860	BreakStatement	break ;	958:3:20559:20564	6612139	54	True				
ANR	6612861	Label	case Z80_DEC :	959:2:20568:20580	6612139	55	True				
ANR	6612862	Identifier	Z80_DEC		6612139	0					
ANR	6612863	IfStatement	if ( ! ( r = rd_r_rr ( & ptr ) ) )		6612139	56					
ANR	6612864	Condition	! ( r = rd_r_rr ( & ptr ) )	960:7:20589:20609	6612139	0	True				
ANR	6612865	UnaryOperationExpression	! ( r = rd_r_rr ( & ptr ) )		6612139	0					
ANR	6612866	UnaryOperator	!		6612139	0					
ANR	6612867	AssignmentExpression	r = rd_r_rr ( & ptr )		6612139	1		=			
ANR	6612868	Identifier	r		6612139	0					
ANR	6612869	CallExpression	rd_r_rr ( & ptr )		6612139	1					
ANR	6612870	Callee	rd_r_rr		6612139	0					
ANR	6612871	Identifier	rd_r_rr		6612139	0					
ANR	6612872	ArgumentList	& ptr		6612139	1					
ANR	6612873	Argument	& ptr		6612139	0					
ANR	6612874	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612875	UnaryOperator	&		6612139	0					
ANR	6612876	Identifier	ptr		6612139	1					
ANR	6612877	CompoundStatement		150:30:2698:2698	6612139	1					
ANR	6612878	BreakStatement	break ;	961:4:20618:20623	6612139	0	True				
ANR	6612879	IfStatement	if ( r < 0 )		6612139	57					
ANR	6612880	Condition	r < 0	963:7:20637:20641	6612139	0	True				
ANR	6612881	RelationalExpression	r < 0		6612139	0		<			
ANR	6612882	Identifier	r		6612139	0					
ANR	6612883	PrimaryExpression	0		6612139	1					
ANR	6612884	CompoundStatement		153:14:2730:2730	6612139	1					
ANR	6612885	ExpressionStatement	wrtb ( 0x05 - 8 * ++ r )	964:4:20650:20671	6612139	0	True				
ANR	6612886	CallExpression	wrtb ( 0x05 - 8 * ++ r )		6612139	0					
ANR	6612887	Callee	wrtb		6612139	0					
ANR	6612888	Identifier	wrtb		6612139	0					
ANR	6612889	ArgumentList	0x05 - 8 * ++ r		6612139	1					
ANR	6612890	Argument	0x05 - 8 * ++ r		6612139	0					
ANR	6612891	AdditiveExpression	0x05 - 8 * ++ r		6612139	0		-			
ANR	6612892	PrimaryExpression	0x05		6612139	0					
ANR	6612893	MultiplicativeExpression	8 * ++ r		6612139	1		*			
ANR	6612894	PrimaryExpression	8		6612139	0					
ANR	6612895	UnaryExpression	++ r		6612139	1					
ANR	6612896	IncDec	++		6612139	0					
ANR	6612897	Identifier	r		6612139	1					
ANR	6612898	BreakStatement	break ;	965:4:20677:20682	6612139	1	True				
ANR	6612899	ExpressionStatement	wrtb ( 0x0B + 0x10 * -- r )	967:3:20692:20716	6612139	58	True				
ANR	6612900	CallExpression	wrtb ( 0x0B + 0x10 * -- r )		6612139	0					
ANR	6612901	Callee	wrtb		6612139	0					
ANR	6612902	Identifier	wrtb		6612139	0					
ANR	6612903	ArgumentList	0x0B + 0x10 * -- r		6612139	1					
ANR	6612904	Argument	0x0B + 0x10 * -- r		6612139	0					
ANR	6612905	AdditiveExpression	0x0B + 0x10 * -- r		6612139	0		+			
ANR	6612906	PrimaryExpression	0x0B		6612139	0					
ANR	6612907	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6612908	PrimaryExpression	0x10		6612139	0					
ANR	6612909	UnaryExpression	-- r		6612139	1					
ANR	6612910	IncDec	--		6612139	0					
ANR	6612911	Identifier	r		6612139	1					
ANR	6612912	BreakStatement	break ;	968:3:20721:20726	6612139	59	True				
ANR	6612913	Label	case Z80_DI :	969:2:20730:20741	6612139	60	True				
ANR	6612914	Identifier	Z80_DI		6612139	0					
ANR	6612915	ExpressionStatement	wrtb ( 0xF3 )	970:3:20746:20757	6612139	61	True				
ANR	6612916	CallExpression	wrtb ( 0xF3 )		6612139	0					
ANR	6612917	Callee	wrtb		6612139	0					
ANR	6612918	Identifier	wrtb		6612139	0					
ANR	6612919	ArgumentList	0xF3		6612139	1					
ANR	6612920	Argument	0xF3		6612139	0					
ANR	6612921	PrimaryExpression	0xF3		6612139	0					
ANR	6612922	BreakStatement	break ;	971:3:20762:20767	6612139	62	True				
ANR	6612923	Label	case Z80_DJNZ :	972:2:20771:20784	6612139	63	True				
ANR	6612924	Identifier	Z80_DJNZ		6612139	0					
ANR	6612925	ExpressionStatement	wrtb ( 0x10 )	973:3:20789:20800	6612139	64	True				
ANR	6612926	CallExpression	wrtb ( 0x10 )		6612139	0					
ANR	6612927	Callee	wrtb		6612139	0					
ANR	6612928	Identifier	wrtb		6612139	0					
ANR	6612929	ArgumentList	0x10		6612139	1					
ANR	6612930	Argument	0x10		6612139	0					
ANR	6612931	PrimaryExpression	0x10		6612139	0					
ANR	6612932	BreakStatement	break ;	975:3:20835:20840	6612139	65	True				
ANR	6612933	Label	case Z80_EI :	976:2:20844:20855	6612139	66	True				
ANR	6612934	Identifier	Z80_EI		6612139	0					
ANR	6612935	ExpressionStatement	wrtb ( 0xFB )	977:3:20860:20871	6612139	67	True				
ANR	6612936	CallExpression	wrtb ( 0xFB )		6612139	0					
ANR	6612937	Callee	wrtb		6612139	0					
ANR	6612938	Identifier	wrtb		6612139	0					
ANR	6612939	ArgumentList	0xFB		6612139	1					
ANR	6612940	Argument	0xFB		6612139	0					
ANR	6612941	PrimaryExpression	0xFB		6612139	0					
ANR	6612942	BreakStatement	break ;	978:3:20876:20881	6612139	68	True				
ANR	6612943	Label	case Z80_EX :	979:2:20885:20896	6612139	69	True				
ANR	6612944	Identifier	Z80_EX		6612139	0					
ANR	6612945	IfStatement	if ( ! ( r = rd_ex1 ( & ptr ) ) )		6612139	70					
ANR	6612946	Condition	! ( r = rd_ex1 ( & ptr ) )	980:7:20905:20924	6612139	0	True				
ANR	6612947	UnaryOperationExpression	! ( r = rd_ex1 ( & ptr ) )		6612139	0					
ANR	6612948	UnaryOperator	!		6612139	0					
ANR	6612949	AssignmentExpression	r = rd_ex1 ( & ptr )		6612139	1		=			
ANR	6612950	Identifier	r		6612139	0					
ANR	6612951	CallExpression	rd_ex1 ( & ptr )		6612139	1					
ANR	6612952	Callee	rd_ex1		6612139	0					
ANR	6612953	Identifier	rd_ex1		6612139	0					
ANR	6612954	ArgumentList	& ptr		6612139	1					
ANR	6612955	Argument	& ptr		6612139	0					
ANR	6612956	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612957	UnaryOperator	&		6612139	0					
ANR	6612958	Identifier	ptr		6612139	1					
ANR	6612959	CompoundStatement		170:29:3013:3013	6612139	1					
ANR	6612960	BreakStatement	break ;	981:4:20933:20938	6612139	0	True				
ANR	6612961	SwitchStatement	switch ( r )		6612139	71					
ANR	6612962	Condition	r	983:11:20956:20956	6612139	0	True				
ANR	6612963	Identifier	r		6612139	0					
ANR	6612964	CompoundStatement		173:14:3045:3045	6612139	1					
ANR	6612965	Label	case DE :	984:3:20964:20971	6612139	0	True				
ANR	6612966	Identifier	DE		6612139	0					
ANR	6612967	IfStatement	if ( ! rd_hl ( & ptr ) )		6612139	1					
ANR	6612968	Condition	! rd_hl ( & ptr )	985:8:20981:20993	6612139	0	True				
ANR	6612969	UnaryOperationExpression	! rd_hl ( & ptr )		6612139	0					
ANR	6612970	UnaryOperator	!		6612139	0					
ANR	6612971	CallExpression	rd_hl ( & ptr )		6612139	1					
ANR	6612972	Callee	rd_hl		6612139	0					
ANR	6612973	Identifier	rd_hl		6612139	0					
ANR	6612974	ArgumentList	& ptr		6612139	1					
ANR	6612975	Argument	& ptr		6612139	0					
ANR	6612976	UnaryOperationExpression	& ptr		6612139	0					
ANR	6612977	UnaryOperator	&		6612139	0					
ANR	6612978	Identifier	ptr		6612139	1					
ANR	6612979	CompoundStatement		175:23:3082:3082	6612139	1					
ANR	6612980	BreakStatement	break ;	986:5:21003:21008	6612139	0	True				
ANR	6612981	ExpressionStatement	wrtb ( 0xEB )	988:4:21020:21031	6612139	2	True				
ANR	6612982	CallExpression	wrtb ( 0xEB )		6612139	0					
ANR	6612983	Callee	wrtb		6612139	0					
ANR	6612984	Identifier	wrtb		6612139	0					
ANR	6612985	ArgumentList	0xEB		6612139	1					
ANR	6612986	Argument	0xEB		6612139	0					
ANR	6612987	PrimaryExpression	0xEB		6612139	0					
ANR	6612988	BreakStatement	break ;	989:4:21037:21042	6612139	3	True				
ANR	6612989	Label	case AF :	990:3:21047:21054	6612139	4	True				
ANR	6612990	Identifier	AF		6612139	0					
ANR	6612991	IfStatement	if ( ! rd_af_ ( & ptr ) )		6612139	5					
ANR	6612992	Condition	! rd_af_ ( & ptr )	991:8:21064:21076	6612139	0	True				
ANR	6612993	UnaryOperationExpression	! rd_af_ ( & ptr )		6612139	0					
ANR	6612994	UnaryOperator	!		6612139	0					
ANR	6612995	CallExpression	rd_af_ ( & ptr )		6612139	1					
ANR	6612996	Callee	rd_af_		6612139	0					
ANR	6612997	Identifier	rd_af_		6612139	0					
ANR	6612998	ArgumentList	& ptr		6612139	1					
ANR	6612999	Argument	& ptr		6612139	0					
ANR	6613000	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613001	UnaryOperator	&		6612139	0					
ANR	6613002	Identifier	ptr		6612139	1					
ANR	6613003	CompoundStatement		181:23:3165:3165	6612139	1					
ANR	6613004	BreakStatement	break ;	992:5:21086:21091	6612139	0	True				
ANR	6613005	ExpressionStatement	wrtb ( 0x08 )	994:4:21103:21114	6612139	6	True				
ANR	6613006	CallExpression	wrtb ( 0x08 )		6612139	0					
ANR	6613007	Callee	wrtb		6612139	0					
ANR	6613008	Identifier	wrtb		6612139	0					
ANR	6613009	ArgumentList	0x08		6612139	1					
ANR	6613010	Argument	0x08		6612139	0					
ANR	6613011	PrimaryExpression	0x08		6612139	0					
ANR	6613012	BreakStatement	break ;	995:4:21120:21125	6612139	7	True				
ANR	6613013	Label	default :	996:3:21130:21137	6612139	8	True				
ANR	6613014	Identifier	default		6612139	0					
ANR	6613015	IfStatement	if ( ! rd_hlx ( & ptr ) )		6612139	9					
ANR	6613016	Condition	! rd_hlx ( & ptr )	997:8:21147:21160	6612139	0	True				
ANR	6613017	UnaryOperationExpression	! rd_hlx ( & ptr )		6612139	0					
ANR	6613018	UnaryOperator	!		6612139	0					
ANR	6613019	CallExpression	rd_hlx ( & ptr )		6612139	1					
ANR	6613020	Callee	rd_hlx		6612139	0					
ANR	6613021	Identifier	rd_hlx		6612139	0					
ANR	6613022	ArgumentList	& ptr		6612139	1					
ANR	6613023	Argument	& ptr		6612139	0					
ANR	6613024	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613025	UnaryOperator	&		6612139	0					
ANR	6613026	Identifier	ptr		6612139	1					
ANR	6613027	CompoundStatement		187:24:3249:3249	6612139	1					
ANR	6613028	BreakStatement	break ;	998:5:21170:21175	6612139	0	True				
ANR	6613029	ExpressionStatement	wrtb ( 0xE3 )	1000:4:21187:21198	6612139	10	True				
ANR	6613030	CallExpression	wrtb ( 0xE3 )		6612139	0					
ANR	6613031	Callee	wrtb		6612139	0					
ANR	6613032	Identifier	wrtb		6612139	0					
ANR	6613033	ArgumentList	0xE3		6612139	1					
ANR	6613034	Argument	0xE3		6612139	0					
ANR	6613035	PrimaryExpression	0xE3		6612139	0					
ANR	6613036	BreakStatement	break ;	1002:3:21208:21213	6612139	72	True				
ANR	6613037	Label	case Z80_EXX :	1003:2:21217:21229	6612139	73	True				
ANR	6613038	Identifier	Z80_EXX		6612139	0					
ANR	6613039	ExpressionStatement	wrtb ( 0xD9 )	1004:3:21234:21245	6612139	74	True				
ANR	6613040	CallExpression	wrtb ( 0xD9 )		6612139	0					
ANR	6613041	Callee	wrtb		6612139	0					
ANR	6613042	Identifier	wrtb		6612139	0					
ANR	6613043	ArgumentList	0xD9		6612139	1					
ANR	6613044	Argument	0xD9		6612139	0					
ANR	6613045	PrimaryExpression	0xD9		6612139	0					
ANR	6613046	BreakStatement	break ;	1005:3:21250:21255	6612139	75	True				
ANR	6613047	Label	case Z80_HALT :	1006:2:21259:21272	6612139	76	True				
ANR	6613048	Identifier	Z80_HALT		6612139	0					
ANR	6613049	ExpressionStatement	wrtb ( 0x76 )	1007:3:21277:21288	6612139	77	True				
ANR	6613050	CallExpression	wrtb ( 0x76 )		6612139	0					
ANR	6613051	Callee	wrtb		6612139	0					
ANR	6613052	Identifier	wrtb		6612139	0					
ANR	6613053	ArgumentList	0x76		6612139	1					
ANR	6613054	Argument	0x76		6612139	0					
ANR	6613055	PrimaryExpression	0x76		6612139	0					
ANR	6613056	BreakStatement	break ;	1008:3:21293:21298	6612139	78	True				
ANR	6613057	Label	case Z80_IM :	1009:2:21302:21313	6612139	79	True				
ANR	6613058	Identifier	Z80_IM		6612139	0					
ANR	6613059	IfStatement	if ( ! ( r = rd_0_2 ( & ptr ) ) )		6612139	80					
ANR	6613060	Condition	! ( r = rd_0_2 ( & ptr ) )	1010:7:21322:21341	6612139	0	True				
ANR	6613061	UnaryOperationExpression	! ( r = rd_0_2 ( & ptr ) )		6612139	0					
ANR	6613062	UnaryOperator	!		6612139	0					
ANR	6613063	AssignmentExpression	r = rd_0_2 ( & ptr )		6612139	1		=			
ANR	6613064	Identifier	r		6612139	0					
ANR	6613065	CallExpression	rd_0_2 ( & ptr )		6612139	1					
ANR	6613066	Callee	rd_0_2		6612139	0					
ANR	6613067	Identifier	rd_0_2		6612139	0					
ANR	6613068	ArgumentList	& ptr		6612139	1					
ANR	6613069	Argument	& ptr		6612139	0					
ANR	6613070	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613071	UnaryOperator	&		6612139	0					
ANR	6613072	Identifier	ptr		6612139	1					
ANR	6613073	CompoundStatement		200:29:3430:3430	6612139	1					
ANR	6613074	BreakStatement	break ;	1011:4:21350:21355	6612139	0	True				
ANR	6613075	ExpressionStatement	wrtb ( 0xED )	1013:3:21365:21376	6612139	81	True				
ANR	6613076	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613077	Callee	wrtb		6612139	0					
ANR	6613078	Identifier	wrtb		6612139	0					
ANR	6613079	ArgumentList	0xED		6612139	1					
ANR	6613080	Argument	0xED		6612139	0					
ANR	6613081	PrimaryExpression	0xED		6612139	0					
ANR	6613082	ExpressionStatement	wrtb ( 0x46 + 8 * -- r )	1014:3:21381:21402	6612139	82	True				
ANR	6613083	CallExpression	wrtb ( 0x46 + 8 * -- r )		6612139	0					
ANR	6613084	Callee	wrtb		6612139	0					
ANR	6613085	Identifier	wrtb		6612139	0					
ANR	6613086	ArgumentList	0x46 + 8 * -- r		6612139	1					
ANR	6613087	Argument	0x46 + 8 * -- r		6612139	0					
ANR	6613088	AdditiveExpression	0x46 + 8 * -- r		6612139	0		+			
ANR	6613089	PrimaryExpression	0x46		6612139	0					
ANR	6613090	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6613091	PrimaryExpression	8		6612139	0					
ANR	6613092	UnaryExpression	-- r		6612139	1					
ANR	6613093	IncDec	--		6612139	0					
ANR	6613094	Identifier	r		6612139	1					
ANR	6613095	BreakStatement	break ;	1015:3:21407:21412	6612139	83	True				
ANR	6613096	Label	case Z80_IN :	1016:2:21416:21427	6612139	84	True				
ANR	6613097	Identifier	Z80_IN		6612139	0					
ANR	6613098	IfStatement	if ( ! ( r = rd_in ( & ptr ) ) )		6612139	85					
ANR	6613099	Condition	! ( r = rd_in ( & ptr ) )	1017:7:21436:21454	6612139	0	True				
ANR	6613100	UnaryOperationExpression	! ( r = rd_in ( & ptr ) )		6612139	0					
ANR	6613101	UnaryOperator	!		6612139	0					
ANR	6613102	AssignmentExpression	r = rd_in ( & ptr )		6612139	1		=			
ANR	6613103	Identifier	r		6612139	0					
ANR	6613104	CallExpression	rd_in ( & ptr )		6612139	1					
ANR	6613105	Callee	rd_in		6612139	0					
ANR	6613106	Identifier	rd_in		6612139	0					
ANR	6613107	ArgumentList	& ptr		6612139	1					
ANR	6613108	Argument	& ptr		6612139	0					
ANR	6613109	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613110	UnaryOperator	&		6612139	0					
ANR	6613111	Identifier	ptr		6612139	1					
ANR	6613112	CompoundStatement		207:28:3543:3543	6612139	1					
ANR	6613113	BreakStatement	break ;	1018:4:21463:21468	6612139	0	True				
ANR	6613114	IfStatement	if ( r == A )		6612139	86					
ANR	6613115	Condition	r == A	1020:7:21482:21487	6612139	0	True				
ANR	6613116	EqualityExpression	r == A		6612139	0		==			
ANR	6613117	Identifier	r		6612139	0					
ANR	6613118	Identifier	A		6612139	1					
ANR	6613119	CompoundStatement		210:15:3576:3576	6612139	1					
ANR	6613120	IfStatement	if ( ! ( r = rd_nnc ( & ptr ) ) )		6612139	0					
ANR	6613121	Condition	! ( r = rd_nnc ( & ptr ) )	1021:8:21500:21519	6612139	0	True				
ANR	6613122	UnaryOperationExpression	! ( r = rd_nnc ( & ptr ) )		6612139	0					
ANR	6613123	UnaryOperator	!		6612139	0					
ANR	6613124	AssignmentExpression	r = rd_nnc ( & ptr )		6612139	1		=			
ANR	6613125	Identifier	r		6612139	0					
ANR	6613126	CallExpression	rd_nnc ( & ptr )		6612139	1					
ANR	6613127	Callee	rd_nnc		6612139	0					
ANR	6613128	Identifier	rd_nnc		6612139	0					
ANR	6613129	ArgumentList	& ptr		6612139	1					
ANR	6613130	Argument	& ptr		6612139	0					
ANR	6613131	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613132	UnaryOperator	&		6612139	0					
ANR	6613133	Identifier	ptr		6612139	1					
ANR	6613134	CompoundStatement		211:30:3608:3608	6612139	1					
ANR	6613135	BreakStatement	break ;	1022:5:21529:21534	6612139	0	True				
ANR	6613136	IfStatement	if ( r == C )		6612139	1					
ANR	6613137	Condition	r == C	1024:8:21550:21555	6612139	0	True				
ANR	6613138	EqualityExpression	r == C		6612139	0		==			
ANR	6613139	Identifier	r		6612139	0					
ANR	6613140	Identifier	C		6612139	1					
ANR	6613141	CompoundStatement		214:16:3644:3644	6612139	1					
ANR	6613142	ExpressionStatement	wrtb ( 0xED )	1025:5:21565:21576	6612139	0	True				
ANR	6613143	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613144	Callee	wrtb		6612139	0					
ANR	6613145	Identifier	wrtb		6612139	0					
ANR	6613146	ArgumentList	0xED		6612139	1					
ANR	6613147	Argument	0xED		6612139	0					
ANR	6613148	PrimaryExpression	0xED		6612139	0					
ANR	6613149	ExpressionStatement	wrtb ( 0x40 + 8 * ( A - 1 ) )	1026:5:21583:21608	6612139	1	True				
ANR	6613150	CallExpression	wrtb ( 0x40 + 8 * ( A - 1 ) )		6612139	0					
ANR	6613151	Callee	wrtb		6612139	0					
ANR	6613152	Identifier	wrtb		6612139	0					
ANR	6613153	ArgumentList	0x40 + 8 * ( A - 1 )		6612139	1					
ANR	6613154	Argument	0x40 + 8 * ( A - 1 )		6612139	0					
ANR	6613155	AdditiveExpression	0x40 + 8 * ( A - 1 )		6612139	0		+			
ANR	6613156	PrimaryExpression	0x40		6612139	0					
ANR	6613157	MultiplicativeExpression	8 * ( A - 1 )		6612139	1		*			
ANR	6613158	PrimaryExpression	8		6612139	0					
ANR	6613159	AdditiveExpression	A - 1		6612139	1		-			
ANR	6613160	Identifier	A		6612139	0					
ANR	6613161	PrimaryExpression	1		6612139	1					
ANR	6613162	BreakStatement	break ;	1027:5:21615:21620	6612139	2	True				
ANR	6613163	ExpressionStatement	wrtb ( 0xDB )	1029:4:21632:21643	6612139	2	True				
ANR	6613164	CallExpression	wrtb ( 0xDB )		6612139	0					
ANR	6613165	Callee	wrtb		6612139	0					
ANR	6613166	Identifier	wrtb		6612139	0					
ANR	6613167	ArgumentList	0xDB		6612139	1					
ANR	6613168	Argument	0xDB		6612139	0					
ANR	6613169	PrimaryExpression	0xDB		6612139	0					
ANR	6613170	BreakStatement	break ;	1030:4:21649:21654	6612139	3	True				
ANR	6613171	IfStatement	if ( ! rd_c ( & ptr ) )		6612139	87					
ANR	6613172	Condition	! rd_c ( & ptr )	1032:7:21668:21679	6612139	0	True				
ANR	6613173	UnaryOperationExpression	! rd_c ( & ptr )		6612139	0					
ANR	6613174	UnaryOperator	!		6612139	0					
ANR	6613175	CallExpression	rd_c ( & ptr )		6612139	1					
ANR	6613176	Callee	rd_c		6612139	0					
ANR	6613177	Identifier	rd_c		6612139	0					
ANR	6613178	ArgumentList	& ptr		6612139	1					
ANR	6613179	Argument	& ptr		6612139	0					
ANR	6613180	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613181	UnaryOperator	&		6612139	0					
ANR	6613182	Identifier	ptr		6612139	1					
ANR	6613183	CompoundStatement		222:21:3768:3768	6612139	1					
ANR	6613184	BreakStatement	break ;	1033:4:21688:21693	6612139	0	True				
ANR	6613185	ExpressionStatement	wrtb ( 0xED )	1035:3:21703:21714	6612139	88	True				
ANR	6613186	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613187	Callee	wrtb		6612139	0					
ANR	6613188	Identifier	wrtb		6612139	0					
ANR	6613189	ArgumentList	0xED		6612139	1					
ANR	6613190	Argument	0xED		6612139	0					
ANR	6613191	PrimaryExpression	0xED		6612139	0					
ANR	6613192	ExpressionStatement	wrtb ( 0x40 + 8 * -- r )	1036:3:21719:21740	6612139	89	True				
ANR	6613193	CallExpression	wrtb ( 0x40 + 8 * -- r )		6612139	0					
ANR	6613194	Callee	wrtb		6612139	0					
ANR	6613195	Identifier	wrtb		6612139	0					
ANR	6613196	ArgumentList	0x40 + 8 * -- r		6612139	1					
ANR	6613197	Argument	0x40 + 8 * -- r		6612139	0					
ANR	6613198	AdditiveExpression	0x40 + 8 * -- r		6612139	0		+			
ANR	6613199	PrimaryExpression	0x40		6612139	0					
ANR	6613200	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6613201	PrimaryExpression	8		6612139	0					
ANR	6613202	UnaryExpression	-- r		6612139	1					
ANR	6613203	IncDec	--		6612139	0					
ANR	6613204	Identifier	r		6612139	1					
ANR	6613205	BreakStatement	break ;	1037:3:21745:21750	6612139	90	True				
ANR	6613206	Label	case Z80_INC :	1038:2:21754:21766	6612139	91	True				
ANR	6613207	Identifier	Z80_INC		6612139	0					
ANR	6613208	IfStatement	if ( ! ( r = rd_r_rr ( & ptr ) ) )		6612139	92					
ANR	6613209	Condition	! ( r = rd_r_rr ( & ptr ) )	1039:7:21775:21795	6612139	0	True				
ANR	6613210	UnaryOperationExpression	! ( r = rd_r_rr ( & ptr ) )		6612139	0					
ANR	6613211	UnaryOperator	!		6612139	0					
ANR	6613212	AssignmentExpression	r = rd_r_rr ( & ptr )		6612139	1		=			
ANR	6613213	Identifier	r		6612139	0					
ANR	6613214	CallExpression	rd_r_rr ( & ptr )		6612139	1					
ANR	6613215	Callee	rd_r_rr		6612139	0					
ANR	6613216	Identifier	rd_r_rr		6612139	0					
ANR	6613217	ArgumentList	& ptr		6612139	1					
ANR	6613218	Argument	& ptr		6612139	0					
ANR	6613219	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613220	UnaryOperator	&		6612139	0					
ANR	6613221	Identifier	ptr		6612139	1					
ANR	6613222	CompoundStatement		229:30:3884:3884	6612139	1					
ANR	6613223	BreakStatement	break ;	1040:4:21804:21809	6612139	0	True				
ANR	6613224	IfStatement	if ( r < 0 )		6612139	93					
ANR	6613225	Condition	r < 0	1042:7:21823:21827	6612139	0	True				
ANR	6613226	RelationalExpression	r < 0		6612139	0		<			
ANR	6613227	Identifier	r		6612139	0					
ANR	6613228	PrimaryExpression	0		6612139	1					
ANR	6613229	CompoundStatement		232:14:3916:3916	6612139	1					
ANR	6613230	ExpressionStatement	wrtb ( 0x04 - 8 * ++ r )	1043:4:21836:21857	6612139	0	True				
ANR	6613231	CallExpression	wrtb ( 0x04 - 8 * ++ r )		6612139	0					
ANR	6613232	Callee	wrtb		6612139	0					
ANR	6613233	Identifier	wrtb		6612139	0					
ANR	6613234	ArgumentList	0x04 - 8 * ++ r		6612139	1					
ANR	6613235	Argument	0x04 - 8 * ++ r		6612139	0					
ANR	6613236	AdditiveExpression	0x04 - 8 * ++ r		6612139	0		-			
ANR	6613237	PrimaryExpression	0x04		6612139	0					
ANR	6613238	MultiplicativeExpression	8 * ++ r		6612139	1		*			
ANR	6613239	PrimaryExpression	8		6612139	0					
ANR	6613240	UnaryExpression	++ r		6612139	1					
ANR	6613241	IncDec	++		6612139	0					
ANR	6613242	Identifier	r		6612139	1					
ANR	6613243	BreakStatement	break ;	1044:4:21863:21868	6612139	1	True				
ANR	6613244	ExpressionStatement	wrtb ( 0x03 + 0x10 * -- r )	1046:3:21878:21902	6612139	94	True				
ANR	6613245	CallExpression	wrtb ( 0x03 + 0x10 * -- r )		6612139	0					
ANR	6613246	Callee	wrtb		6612139	0					
ANR	6613247	Identifier	wrtb		6612139	0					
ANR	6613248	ArgumentList	0x03 + 0x10 * -- r		6612139	1					
ANR	6613249	Argument	0x03 + 0x10 * -- r		6612139	0					
ANR	6613250	AdditiveExpression	0x03 + 0x10 * -- r		6612139	0		+			
ANR	6613251	PrimaryExpression	0x03		6612139	0					
ANR	6613252	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6613253	PrimaryExpression	0x10		6612139	0					
ANR	6613254	UnaryExpression	-- r		6612139	1					
ANR	6613255	IncDec	--		6612139	0					
ANR	6613256	Identifier	r		6612139	1					
ANR	6613257	BreakStatement	break ;	1047:3:21907:21912	6612139	95	True				
ANR	6613258	Label	case Z80_IND :	1048:2:21916:21928	6612139	96	True				
ANR	6613259	Identifier	Z80_IND		6612139	0					
ANR	6613260	ExpressionStatement	wrtb ( 0xED )	1049:3:21933:21944	6612139	97	True				
ANR	6613261	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613262	Callee	wrtb		6612139	0					
ANR	6613263	Identifier	wrtb		6612139	0					
ANR	6613264	ArgumentList	0xED		6612139	1					
ANR	6613265	Argument	0xED		6612139	0					
ANR	6613266	PrimaryExpression	0xED		6612139	0					
ANR	6613267	ExpressionStatement	wrtb ( 0xAA )	1050:3:21949:21960	6612139	98	True				
ANR	6613268	CallExpression	wrtb ( 0xAA )		6612139	0					
ANR	6613269	Callee	wrtb		6612139	0					
ANR	6613270	Identifier	wrtb		6612139	0					
ANR	6613271	ArgumentList	0xAA		6612139	1					
ANR	6613272	Argument	0xAA		6612139	0					
ANR	6613273	PrimaryExpression	0xAA		6612139	0					
ANR	6613274	BreakStatement	break ;	1051:3:21965:21970	6612139	99	True				
ANR	6613275	Label	case Z80_INDR :	1052:2:21974:21987	6612139	100	True				
ANR	6613276	Identifier	Z80_INDR		6612139	0					
ANR	6613277	ExpressionStatement	wrtb ( 0xED )	1053:3:21992:22003	6612139	101	True				
ANR	6613278	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613279	Callee	wrtb		6612139	0					
ANR	6613280	Identifier	wrtb		6612139	0					
ANR	6613281	ArgumentList	0xED		6612139	1					
ANR	6613282	Argument	0xED		6612139	0					
ANR	6613283	PrimaryExpression	0xED		6612139	0					
ANR	6613284	ExpressionStatement	wrtb ( 0xBA )	1054:3:22008:22019	6612139	102	True				
ANR	6613285	CallExpression	wrtb ( 0xBA )		6612139	0					
ANR	6613286	Callee	wrtb		6612139	0					
ANR	6613287	Identifier	wrtb		6612139	0					
ANR	6613288	ArgumentList	0xBA		6612139	1					
ANR	6613289	Argument	0xBA		6612139	0					
ANR	6613290	PrimaryExpression	0xBA		6612139	0					
ANR	6613291	BreakStatement	break ;	1055:3:22024:22029	6612139	103	True				
ANR	6613292	Label	case Z80_INI :	1056:2:22033:22045	6612139	104	True				
ANR	6613293	Identifier	Z80_INI		6612139	0					
ANR	6613294	ExpressionStatement	wrtb ( 0xED )	1057:3:22050:22061	6612139	105	True				
ANR	6613295	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613296	Callee	wrtb		6612139	0					
ANR	6613297	Identifier	wrtb		6612139	0					
ANR	6613298	ArgumentList	0xED		6612139	1					
ANR	6613299	Argument	0xED		6612139	0					
ANR	6613300	PrimaryExpression	0xED		6612139	0					
ANR	6613301	ExpressionStatement	wrtb ( 0xA2 )	1058:3:22066:22077	6612139	106	True				
ANR	6613302	CallExpression	wrtb ( 0xA2 )		6612139	0					
ANR	6613303	Callee	wrtb		6612139	0					
ANR	6613304	Identifier	wrtb		6612139	0					
ANR	6613305	ArgumentList	0xA2		6612139	1					
ANR	6613306	Argument	0xA2		6612139	0					
ANR	6613307	PrimaryExpression	0xA2		6612139	0					
ANR	6613308	BreakStatement	break ;	1059:3:22082:22087	6612139	107	True				
ANR	6613309	Label	case Z80_INIR :	1060:2:22091:22104	6612139	108	True				
ANR	6613310	Identifier	Z80_INIR		6612139	0					
ANR	6613311	ExpressionStatement	wrtb ( 0xED )	1061:3:22109:22120	6612139	109	True				
ANR	6613312	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613313	Callee	wrtb		6612139	0					
ANR	6613314	Identifier	wrtb		6612139	0					
ANR	6613315	ArgumentList	0xED		6612139	1					
ANR	6613316	Argument	0xED		6612139	0					
ANR	6613317	PrimaryExpression	0xED		6612139	0					
ANR	6613318	ExpressionStatement	wrtb ( 0xB2 )	1062:3:22125:22136	6612139	110	True				
ANR	6613319	CallExpression	wrtb ( 0xB2 )		6612139	0					
ANR	6613320	Callee	wrtb		6612139	0					
ANR	6613321	Identifier	wrtb		6612139	0					
ANR	6613322	ArgumentList	0xB2		6612139	1					
ANR	6613323	Argument	0xB2		6612139	0					
ANR	6613324	PrimaryExpression	0xB2		6612139	0					
ANR	6613325	BreakStatement	break ;	1063:3:22141:22146	6612139	111	True				
ANR	6613326	Label	case Z80_JP :	1064:2:22150:22161	6612139	112	True				
ANR	6613327	Identifier	Z80_JP		6612139	0					
ANR	6613328	ExpressionStatement	r = rd_jp ( & ptr )	1065:3:22166:22182	6612139	113	True				
ANR	6613329	AssignmentExpression	r = rd_jp ( & ptr )		6612139	0		=			
ANR	6613330	Identifier	r		6612139	0					
ANR	6613331	CallExpression	rd_jp ( & ptr )		6612139	1					
ANR	6613332	Callee	rd_jp		6612139	0					
ANR	6613333	Identifier	rd_jp		6612139	0					
ANR	6613334	ArgumentList	& ptr		6612139	1					
ANR	6613335	Argument	& ptr		6612139	0					
ANR	6613336	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613337	UnaryOperator	&		6612139	0					
ANR	6613338	Identifier	ptr		6612139	1					
ANR	6613339	IfStatement	if ( r < 0 )		6612139	114					
ANR	6613340	Condition	r < 0	1066:7:22191:22195	6612139	0	True				
ANR	6613341	RelationalExpression	r < 0		6612139	0		<			
ANR	6613342	Identifier	r		6612139	0					
ANR	6613343	PrimaryExpression	0		6612139	1					
ANR	6613344	CompoundStatement		256:14:4284:4284	6612139	1					
ANR	6613345	ExpressionStatement	wrtb ( 0xE9 )	1067:4:22204:22215	6612139	0	True				
ANR	6613346	CallExpression	wrtb ( 0xE9 )		6612139	0					
ANR	6613347	Callee	wrtb		6612139	0					
ANR	6613348	Identifier	wrtb		6612139	0					
ANR	6613349	ArgumentList	0xE9		6612139	1					
ANR	6613350	Argument	0xE9		6612139	0					
ANR	6613351	PrimaryExpression	0xE9		6612139	0					
ANR	6613352	BreakStatement	break ;	1068:4:22221:22226	6612139	1	True				
ANR	6613353	IfStatement	if ( r )		6612139	115					
ANR	6613354	Condition	r	1070:7:22240:22240	6612139	0	True				
ANR	6613355	Identifier	r		6612139	0					
ANR	6613356	CompoundStatement		260:10:4329:4329	6612139	1					
ANR	6613357	ExpressionStatement	wrtb ( 0xC2 + 8 * -- r )	1071:4:22249:22270	6612139	0	True				
ANR	6613358	CallExpression	wrtb ( 0xC2 + 8 * -- r )		6612139	0					
ANR	6613359	Callee	wrtb		6612139	0					
ANR	6613360	Identifier	wrtb		6612139	0					
ANR	6613361	ArgumentList	0xC2 + 8 * -- r		6612139	1					
ANR	6613362	Argument	0xC2 + 8 * -- r		6612139	0					
ANR	6613363	AdditiveExpression	0xC2 + 8 * -- r		6612139	0		+			
ANR	6613364	PrimaryExpression	0xC2		6612139	0					
ANR	6613365	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6613366	PrimaryExpression	8		6612139	0					
ANR	6613367	UnaryExpression	-- r		6612139	1					
ANR	6613368	IncDec	--		6612139	0					
ANR	6613369	Identifier	r		6612139	1					
ANR	6613370	ExpressionStatement	rd_comma ( & ptr )	1072:4:22276:22291	6612139	1	True				
ANR	6613371	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6613372	Callee	rd_comma		6612139	0					
ANR	6613373	Identifier	rd_comma		6612139	0					
ANR	6613374	ArgumentList	& ptr		6612139	1					
ANR	6613375	Argument	& ptr		6612139	0					
ANR	6613376	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613377	UnaryOperator	&		6612139	0					
ANR	6613378	Identifier	ptr		6612139	1					
ANR	6613379	ElseStatement	else		6612139	0					
ANR	6613380	CompoundStatement		263:10:4389:4389	6612139	0					
ANR	6613381	ExpressionStatement	wrtb ( 0xC3 )	1074:4:22309:22320	6612139	0	True				
ANR	6613382	CallExpression	wrtb ( 0xC3 )		6612139	0					
ANR	6613383	Callee	wrtb		6612139	0					
ANR	6613384	Identifier	wrtb		6612139	0					
ANR	6613385	ArgumentList	0xC3		6612139	1					
ANR	6613386	Argument	0xC3		6612139	0					
ANR	6613387	PrimaryExpression	0xC3		6612139	0					
ANR	6613388	BreakStatement	break ;	1076:3:22330:22335	6612139	116	True				
ANR	6613389	Label	case Z80_JR :	1077:2:22339:22350	6612139	117	True				
ANR	6613390	Identifier	Z80_JR		6612139	0					
ANR	6613391	ExpressionStatement	r = rd_jr ( & ptr )	1078:3:22355:22371	6612139	118	True				
ANR	6613392	AssignmentExpression	r = rd_jr ( & ptr )		6612139	0		=			
ANR	6613393	Identifier	r		6612139	0					
ANR	6613394	CallExpression	rd_jr ( & ptr )		6612139	1					
ANR	6613395	Callee	rd_jr		6612139	0					
ANR	6613396	Identifier	rd_jr		6612139	0					
ANR	6613397	ArgumentList	& ptr		6612139	1					
ANR	6613398	Argument	& ptr		6612139	0					
ANR	6613399	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613400	UnaryOperator	&		6612139	0					
ANR	6613401	Identifier	ptr		6612139	1					
ANR	6613402	IfStatement	if ( r )		6612139	119					
ANR	6613403	Condition	r	1079:7:22380:22380	6612139	0	True				
ANR	6613404	Identifier	r		6612139	0					
ANR	6613405	CompoundStatement		269:10:4469:4469	6612139	1					
ANR	6613406	ExpressionStatement	rd_comma ( & ptr )	1080:4:22389:22404	6612139	0	True				
ANR	6613407	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6613408	Callee	rd_comma		6612139	0					
ANR	6613409	Identifier	rd_comma		6612139	0					
ANR	6613410	ArgumentList	& ptr		6612139	1					
ANR	6613411	Argument	& ptr		6612139	0					
ANR	6613412	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613413	UnaryOperator	&		6612139	0					
ANR	6613414	Identifier	ptr		6612139	1					
ANR	6613415	ExpressionStatement	wrtb ( 0x18 + 8 * r )	1082:3:22414:22433	6612139	120	True				
ANR	6613416	CallExpression	wrtb ( 0x18 + 8 * r )		6612139	0					
ANR	6613417	Callee	wrtb		6612139	0					
ANR	6613418	Identifier	wrtb		6612139	0					
ANR	6613419	ArgumentList	0x18 + 8 * r		6612139	1					
ANR	6613420	Argument	0x18 + 8 * r		6612139	0					
ANR	6613421	AdditiveExpression	0x18 + 8 * r		6612139	0		+			
ANR	6613422	PrimaryExpression	0x18		6612139	0					
ANR	6613423	MultiplicativeExpression	8 * r		6612139	1		*			
ANR	6613424	PrimaryExpression	8		6612139	0					
ANR	6613425	Identifier	r		6612139	1					
ANR	6613426	BreakStatement	break ;	1083:3:22438:22443	6612139	121	True				
ANR	6613427	Label	case Z80_LD :	1084:2:22447:22458	6612139	122	True				
ANR	6613428	Identifier	Z80_LD		6612139	0					
ANR	6613429	IfStatement	if ( ! ( r = rd_ld ( & ptr ) ) )		6612139	123					
ANR	6613430	Condition	! ( r = rd_ld ( & ptr ) )	1085:7:22467:22485	6612139	0	True				
ANR	6613431	UnaryOperationExpression	! ( r = rd_ld ( & ptr ) )		6612139	0					
ANR	6613432	UnaryOperator	!		6612139	0					
ANR	6613433	AssignmentExpression	r = rd_ld ( & ptr )		6612139	1		=			
ANR	6613434	Identifier	r		6612139	0					
ANR	6613435	CallExpression	rd_ld ( & ptr )		6612139	1					
ANR	6613436	Callee	rd_ld		6612139	0					
ANR	6613437	Identifier	rd_ld		6612139	0					
ANR	6613438	ArgumentList	& ptr		6612139	1					
ANR	6613439	Argument	& ptr		6612139	0					
ANR	6613440	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613441	UnaryOperator	&		6612139	0					
ANR	6613442	Identifier	ptr		6612139	1					
ANR	6613443	CompoundStatement		275:28:4574:4574	6612139	1					
ANR	6613444	BreakStatement	break ;	1086:4:22494:22499	6612139	0	True				
ANR	6613445	SwitchStatement	switch ( r )		6612139	124					
ANR	6613446	Condition	r	1088:11:22517:22517	6612139	0	True				
ANR	6613447	Identifier	r		6612139	0					
ANR	6613448	CompoundStatement		278:14:4606:4606	6612139	1					
ANR	6613449	Label	case ld_BC :	1089:3:22525:22535	6612139	0	True				
ANR	6613450	Identifier	ld_BC		6612139	0					
ANR	6613451	Label	case ld_DE :	1090:3:22540:22550	6612139	1	True				
ANR	6613452	Identifier	ld_DE		6612139	0					
ANR	6613453	IfStatement	if ( ! rd_a ( & ptr ) )		6612139	2					
ANR	6613454	Condition	! rd_a ( & ptr )	1091:8:22560:22571	6612139	0	True				
ANR	6613455	UnaryOperationExpression	! rd_a ( & ptr )		6612139	0					
ANR	6613456	UnaryOperator	!		6612139	0					
ANR	6613457	CallExpression	rd_a ( & ptr )		6612139	1					
ANR	6613458	Callee	rd_a		6612139	0					
ANR	6613459	Identifier	rd_a		6612139	0					
ANR	6613460	ArgumentList	& ptr		6612139	1					
ANR	6613461	Argument	& ptr		6612139	0					
ANR	6613462	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613463	UnaryOperator	&		6612139	0					
ANR	6613464	Identifier	ptr		6612139	1					
ANR	6613465	CompoundStatement		281:22:4660:4660	6612139	1					
ANR	6613466	BreakStatement	break ;	1092:5:22581:22586	6612139	0	True				
ANR	6613467	ExpressionStatement	wrtb ( 0x02 + 0x10 * ( r == ld_DE ) )	1094:4:22598:22631	6612139	3	True				
ANR	6613468	CallExpression	wrtb ( 0x02 + 0x10 * ( r == ld_DE ) )		6612139	0					
ANR	6613469	Callee	wrtb		6612139	0					
ANR	6613470	Identifier	wrtb		6612139	0					
ANR	6613471	ArgumentList	0x02 + 0x10 * ( r == ld_DE )		6612139	1					
ANR	6613472	Argument	0x02 + 0x10 * ( r == ld_DE )		6612139	0					
ANR	6613473	AdditiveExpression	0x02 + 0x10 * ( r == ld_DE )		6612139	0		+			
ANR	6613474	PrimaryExpression	0x02		6612139	0					
ANR	6613475	MultiplicativeExpression	0x10 * ( r == ld_DE )		6612139	1		*			
ANR	6613476	PrimaryExpression	0x10		6612139	0					
ANR	6613477	EqualityExpression	r == ld_DE		6612139	1		==			
ANR	6613478	Identifier	r		6612139	0					
ANR	6613479	Identifier	ld_DE		6612139	1					
ANR	6613480	BreakStatement	break ;	1095:4:22637:22642	6612139	4	True				
ANR	6613481	Label	case ld_HL :	1096:3:22647:22657	6612139	5	True				
ANR	6613482	Identifier	ld_HL		6612139	0					
ANR	6613483	ExpressionStatement	r = rd_ld_hl ( & ptr )	1097:4:22663:22682	6612139	6	True				
ANR	6613484	AssignmentExpression	r = rd_ld_hl ( & ptr )		6612139	0		=			
ANR	6613485	Identifier	r		6612139	0					
ANR	6613486	CallExpression	rd_ld_hl ( & ptr )		6612139	1					
ANR	6613487	Callee	rd_ld_hl		6612139	0					
ANR	6613488	Identifier	rd_ld_hl		6612139	0					
ANR	6613489	ArgumentList	& ptr		6612139	1					
ANR	6613490	Argument	& ptr		6612139	0					
ANR	6613491	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613492	UnaryOperator	&		6612139	0					
ANR	6613493	Identifier	ptr		6612139	1					
ANR	6613494	ExpressionStatement	wrtb ( 0x70 + -- r )	1098:4:22688:22705	6612139	7	True				
ANR	6613495	CallExpression	wrtb ( 0x70 + -- r )		6612139	0					
ANR	6613496	Callee	wrtb		6612139	0					
ANR	6613497	Identifier	wrtb		6612139	0					
ANR	6613498	ArgumentList	0x70 + -- r		6612139	1					
ANR	6613499	Argument	0x70 + -- r		6612139	0					
ANR	6613500	AdditiveExpression	0x70 + -- r		6612139	0		+			
ANR	6613501	PrimaryExpression	0x70		6612139	0					
ANR	6613502	UnaryExpression	-- r		6612139	1					
ANR	6613503	IncDec	--		6612139	0					
ANR	6613504	Identifier	r		6612139	1					
ANR	6613505	BreakStatement	break ;	1099:4:22711:22716	6612139	8	True				
ANR	6613506	Label	case ld_NN :	1100:3:22721:22731	6612139	9	True				
ANR	6613507	Identifier	ld_NN		6612139	0					
ANR	6613508	IfStatement	if ( ! ( r = rd_ld_nn ( & ptr ) ) )		6612139	10					
ANR	6613509	Condition	! ( r = rd_ld_nn ( & ptr ) )	1101:8:22741:22762	6612139	0	True				
ANR	6613510	UnaryOperationExpression	! ( r = rd_ld_nn ( & ptr ) )		6612139	0					
ANR	6613511	UnaryOperator	!		6612139	0					
ANR	6613512	AssignmentExpression	r = rd_ld_nn ( & ptr )		6612139	1		=			
ANR	6613513	Identifier	r		6612139	0					
ANR	6613514	CallExpression	rd_ld_nn ( & ptr )		6612139	1					
ANR	6613515	Callee	rd_ld_nn		6612139	0					
ANR	6613516	Identifier	rd_ld_nn		6612139	0					
ANR	6613517	ArgumentList	& ptr		6612139	1					
ANR	6613518	Argument	& ptr		6612139	0					
ANR	6613519	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613520	UnaryOperator	&		6612139	0					
ANR	6613521	Identifier	ptr		6612139	1					
ANR	6613522	CompoundStatement		291:32:4851:4851	6612139	1					
ANR	6613523	BreakStatement	break ;	1102:5:22772:22777	6612139	0	True				
ANR	6613524	IfStatement	if ( r == ld_nnA || r == ld_nnHL )		6612139	11					
ANR	6613525	Condition	r == ld_nnA || r == ld_nnHL	1104:8:22793:22819	6612139	0	True				
ANR	6613526	OrExpression	r == ld_nnA || r == ld_nnHL		6612139	0		||			
ANR	6613527	EqualityExpression	r == ld_nnA		6612139	0		==			
ANR	6613528	Identifier	r		6612139	0					
ANR	6613529	Identifier	ld_nnA		6612139	1					
ANR	6613530	EqualityExpression	r == ld_nnHL		6612139	1		==			
ANR	6613531	Identifier	r		6612139	0					
ANR	6613532	Identifier	ld_nnHL		6612139	1					
ANR	6613533	CompoundStatement		294:37:4908:4908	6612139	1					
ANR	6613534	ExpressionStatement	wrtb ( 0x22 + 0x10 * ( r == ld_nnA ) )	1105:5:22829:22863	6612139	0	True				
ANR	6613535	CallExpression	wrtb ( 0x22 + 0x10 * ( r == ld_nnA ) )		6612139	0					
ANR	6613536	Callee	wrtb		6612139	0					
ANR	6613537	Identifier	wrtb		6612139	0					
ANR	6613538	ArgumentList	0x22 + 0x10 * ( r == ld_nnA )		6612139	1					
ANR	6613539	Argument	0x22 + 0x10 * ( r == ld_nnA )		6612139	0					
ANR	6613540	AdditiveExpression	0x22 + 0x10 * ( r == ld_nnA )		6612139	0		+			
ANR	6613541	PrimaryExpression	0x22		6612139	0					
ANR	6613542	MultiplicativeExpression	0x10 * ( r == ld_nnA )		6612139	1		*			
ANR	6613543	PrimaryExpression	0x10		6612139	0					
ANR	6613544	EqualityExpression	r == ld_nnA		6612139	1		==			
ANR	6613545	Identifier	r		6612139	0					
ANR	6613546	Identifier	ld_nnA		6612139	1					
ANR	6613547	BreakStatement	break ;	1106:5:22870:22875	6612139	1	True				
ANR	6613548	ExpressionStatement	wrtb ( 0xED )	1108:4:22887:22898	6612139	12	True				
ANR	6613549	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613550	Callee	wrtb		6612139	0					
ANR	6613551	Identifier	wrtb		6612139	0					
ANR	6613552	ArgumentList	0xED		6612139	1					
ANR	6613553	Argument	0xED		6612139	0					
ANR	6613554	PrimaryExpression	0xED		6612139	0					
ANR	6613555	ExpressionStatement	wrtb ( 0x43 + 0x10 * -- r )	1109:4:22904:22928	6612139	13	True				
ANR	6613556	CallExpression	wrtb ( 0x43 + 0x10 * -- r )		6612139	0					
ANR	6613557	Callee	wrtb		6612139	0					
ANR	6613558	Identifier	wrtb		6612139	0					
ANR	6613559	ArgumentList	0x43 + 0x10 * -- r		6612139	1					
ANR	6613560	Argument	0x43 + 0x10 * -- r		6612139	0					
ANR	6613561	AdditiveExpression	0x43 + 0x10 * -- r		6612139	0		+			
ANR	6613562	PrimaryExpression	0x43		6612139	0					
ANR	6613563	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6613564	PrimaryExpression	0x10		6612139	0					
ANR	6613565	UnaryExpression	-- r		6612139	1					
ANR	6613566	IncDec	--		6612139	0					
ANR	6613567	Identifier	r		6612139	1					
ANR	6613568	BreakStatement	break ;	1110:4:22934:22939	6612139	14	True				
ANR	6613569	Label	case ldA :	1111:3:22944:22952	6612139	15	True				
ANR	6613570	Identifier	ldA		6612139	0					
ANR	6613571	IfStatement	if ( ! ( r = rd_lda ( & ptr ) ) )		6612139	16					
ANR	6613572	Condition	! ( r = rd_lda ( & ptr ) )	1112:8:22962:22981	6612139	0	True				
ANR	6613573	UnaryOperationExpression	! ( r = rd_lda ( & ptr ) )		6612139	0					
ANR	6613574	UnaryOperator	!		6612139	0					
ANR	6613575	AssignmentExpression	r = rd_lda ( & ptr )		6612139	1		=			
ANR	6613576	Identifier	r		6612139	0					
ANR	6613577	CallExpression	rd_lda ( & ptr )		6612139	1					
ANR	6613578	Callee	rd_lda		6612139	0					
ANR	6613579	Identifier	rd_lda		6612139	0					
ANR	6613580	ArgumentList	& ptr		6612139	1					
ANR	6613581	Argument	& ptr		6612139	0					
ANR	6613582	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613583	UnaryOperator	&		6612139	0					
ANR	6613584	Identifier	ptr		6612139	1					
ANR	6613585	CompoundStatement		302:30:5070:5070	6612139	1					
ANR	6613586	BreakStatement	break ;	1113:5:22991:22996	6612139	0	True				
ANR	6613587	IfStatement	if ( r == A_NN )		6612139	17					
ANR	6613588	Condition	r == A_NN	1115:8:23012:23020	6612139	0	True				
ANR	6613589	EqualityExpression	r == A_NN		6612139	0		==			
ANR	6613590	Identifier	r		6612139	0					
ANR	6613591	Identifier	A_NN		6612139	1					
ANR	6613592	CompoundStatement		305:19:5109:5109	6612139	1					
ANR	6613593	ExpressionStatement	wrtb ( 0x3A )	1116:5:23030:23041	6612139	0	True				
ANR	6613594	CallExpression	wrtb ( 0x3A )		6612139	0					
ANR	6613595	Callee	wrtb		6612139	0					
ANR	6613596	Identifier	wrtb		6612139	0					
ANR	6613597	ArgumentList	0x3A		6612139	1					
ANR	6613598	Argument	0x3A		6612139	0					
ANR	6613599	PrimaryExpression	0x3A		6612139	0					
ANR	6613600	BreakStatement	break ;	1117:5:23048:23053	6612139	1	True				
ANR	6613601	IfStatement	if ( r == A_I || r == A_R )		6612139	18					
ANR	6613602	Condition	r == A_I || r == A_R	1119:8:23069:23088	6612139	0	True				
ANR	6613603	OrExpression	r == A_I || r == A_R		6612139	0		||			
ANR	6613604	EqualityExpression	r == A_I		6612139	0		==			
ANR	6613605	Identifier	r		6612139	0					
ANR	6613606	Identifier	A_I		6612139	1					
ANR	6613607	EqualityExpression	r == A_R		6612139	1		==			
ANR	6613608	Identifier	r		6612139	0					
ANR	6613609	Identifier	A_R		6612139	1					
ANR	6613610	CompoundStatement		309:30:5177:5177	6612139	1					
ANR	6613611	ExpressionStatement	wrtb ( 0xED )	1120:5:23098:23109	6612139	0	True				
ANR	6613612	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613613	Callee	wrtb		6612139	0					
ANR	6613614	Identifier	wrtb		6612139	0					
ANR	6613615	ArgumentList	0xED		6612139	1					
ANR	6613616	Argument	0xED		6612139	0					
ANR	6613617	PrimaryExpression	0xED		6612139	0					
ANR	6613618	ExpressionStatement	wrtb ( 0x57 + 8 * ( r == A_R ) )	1121:5:23116:23144	6612139	1	True				
ANR	6613619	CallExpression	wrtb ( 0x57 + 8 * ( r == A_R ) )		6612139	0					
ANR	6613620	Callee	wrtb		6612139	0					
ANR	6613621	Identifier	wrtb		6612139	0					
ANR	6613622	ArgumentList	0x57 + 8 * ( r == A_R )		6612139	1					
ANR	6613623	Argument	0x57 + 8 * ( r == A_R )		6612139	0					
ANR	6613624	AdditiveExpression	0x57 + 8 * ( r == A_R )		6612139	0		+			
ANR	6613625	PrimaryExpression	0x57		6612139	0					
ANR	6613626	MultiplicativeExpression	8 * ( r == A_R )		6612139	1		*			
ANR	6613627	PrimaryExpression	8		6612139	0					
ANR	6613628	EqualityExpression	r == A_R		6612139	1		==			
ANR	6613629	Identifier	r		6612139	0					
ANR	6613630	Identifier	A_R		6612139	1					
ANR	6613631	BreakStatement	break ;	1122:5:23151:23156	6612139	2	True				
ANR	6613632	IfStatement	if ( r < 0 )		6612139	19					
ANR	6613633	Condition	r < 0	1124:8:23172:23176	6612139	0	True				
ANR	6613634	RelationalExpression	r < 0		6612139	0		<			
ANR	6613635	Identifier	r		6612139	0					
ANR	6613636	PrimaryExpression	0		6612139	1					
ANR	6613637	CompoundStatement		314:15:5265:5265	6612139	1					
ANR	6613638	ExpressionStatement	wrtb ( 0x0A - 0x10 * ++ r )	1125:5:23186:23210	6612139	0	True				
ANR	6613639	CallExpression	wrtb ( 0x0A - 0x10 * ++ r )		6612139	0					
ANR	6613640	Callee	wrtb		6612139	0					
ANR	6613641	Identifier	wrtb		6612139	0					
ANR	6613642	ArgumentList	0x0A - 0x10 * ++ r		6612139	1					
ANR	6613643	Argument	0x0A - 0x10 * ++ r		6612139	0					
ANR	6613644	AdditiveExpression	0x0A - 0x10 * ++ r		6612139	0		-			
ANR	6613645	PrimaryExpression	0x0A		6612139	0					
ANR	6613646	MultiplicativeExpression	0x10 * ++ r		6612139	1		*			
ANR	6613647	PrimaryExpression	0x10		6612139	0					
ANR	6613648	UnaryExpression	++ r		6612139	1					
ANR	6613649	IncDec	++		6612139	0					
ANR	6613650	Identifier	r		6612139	1					
ANR	6613651	BreakStatement	break ;	1126:5:23217:23222	6612139	1	True				
ANR	6613652	ExpressionStatement	wrtb ( 0x78 + -- r )	1128:4:23234:23251	6612139	20	True				
ANR	6613653	CallExpression	wrtb ( 0x78 + -- r )		6612139	0					
ANR	6613654	Callee	wrtb		6612139	0					
ANR	6613655	Identifier	wrtb		6612139	0					
ANR	6613656	ArgumentList	0x78 + -- r		6612139	1					
ANR	6613657	Argument	0x78 + -- r		6612139	0					
ANR	6613658	AdditiveExpression	0x78 + -- r		6612139	0		+			
ANR	6613659	PrimaryExpression	0x78		6612139	0					
ANR	6613660	UnaryExpression	-- r		6612139	1					
ANR	6613661	IncDec	--		6612139	0					
ANR	6613662	Identifier	r		6612139	1					
ANR	6613663	BreakStatement	break ;	1129:4:23257:23262	6612139	21	True				
ANR	6613664	Label	case ldB :	1130:3:23267:23275	6612139	22	True				
ANR	6613665	Identifier	ldB		6612139	0					
ANR	6613666	Label	case ldC :	1131:3:23280:23288	6612139	23	True				
ANR	6613667	Identifier	ldC		6612139	0					
ANR	6613668	Label	case ldD :	1132:3:23293:23301	6612139	24	True				
ANR	6613669	Identifier	ldD		6612139	0					
ANR	6613670	Label	case ldE :	1133:3:23306:23314	6612139	25	True				
ANR	6613671	Identifier	ldE		6612139	0					
ANR	6613672	Label	case ldH :	1134:3:23319:23327	6612139	26	True				
ANR	6613673	Identifier	ldH		6612139	0					
ANR	6613674	Label	case ldL :	1135:3:23332:23340	6612139	27	True				
ANR	6613675	Identifier	ldL		6612139	0					
ANR	6613676	IfStatement	if ( ! ( s = rd_ldbcdehla ( & ptr ) ) )		6612139	28					
ANR	6613677	Condition	! ( s = rd_ldbcdehla ( & ptr ) )	1136:8:23350:23375	6612139	0	True				
ANR	6613678	UnaryOperationExpression	! ( s = rd_ldbcdehla ( & ptr ) )		6612139	0					
ANR	6613679	UnaryOperator	!		6612139	0					
ANR	6613680	AssignmentExpression	s = rd_ldbcdehla ( & ptr )		6612139	1		=			
ANR	6613681	Identifier	s		6612139	0					
ANR	6613682	CallExpression	rd_ldbcdehla ( & ptr )		6612139	1					
ANR	6613683	Callee	rd_ldbcdehla		6612139	0					
ANR	6613684	Identifier	rd_ldbcdehla		6612139	0					
ANR	6613685	ArgumentList	& ptr		6612139	1					
ANR	6613686	Argument	& ptr		6612139	0					
ANR	6613687	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613688	UnaryOperator	&		6612139	0					
ANR	6613689	Identifier	ptr		6612139	1					
ANR	6613690	CompoundStatement		326:36:5464:5464	6612139	1					
ANR	6613691	BreakStatement	break ;	1137:5:23385:23390	6612139	0	True				
ANR	6613692	ExpressionStatement	wrtb ( 0x40 + 0x08 * ( r - 7 ) + ( s - 1 ) )	1139:4:23402:23440	6612139	29	True				
ANR	6613693	CallExpression	wrtb ( 0x40 + 0x08 * ( r - 7 ) + ( s - 1 ) )		6612139	0					
ANR	6613694	Callee	wrtb		6612139	0					
ANR	6613695	Identifier	wrtb		6612139	0					
ANR	6613696	ArgumentList	0x40 + 0x08 * ( r - 7 ) + ( s - 1 )		6612139	1					
ANR	6613697	Argument	0x40 + 0x08 * ( r - 7 ) + ( s - 1 )		6612139	0					
ANR	6613698	AdditiveExpression	0x40 + 0x08 * ( r - 7 ) + ( s - 1 )		6612139	0		+			
ANR	6613699	PrimaryExpression	0x40		6612139	0					
ANR	6613700	AdditiveExpression	0x08 * ( r - 7 ) + ( s - 1 )		6612139	1		+			
ANR	6613701	MultiplicativeExpression	0x08 * ( r - 7 )		6612139	0		*			
ANR	6613702	PrimaryExpression	0x08		6612139	0					
ANR	6613703	AdditiveExpression	r - 7		6612139	1		-			
ANR	6613704	Identifier	r		6612139	0					
ANR	6613705	PrimaryExpression	7		6612139	1					
ANR	6613706	AdditiveExpression	s - 1		6612139	1		-			
ANR	6613707	Identifier	s		6612139	0					
ANR	6613708	PrimaryExpression	1		6612139	1					
ANR	6613709	BreakStatement	break ;	1140:4:23446:23451	6612139	30	True				
ANR	6613710	Label	case ldBC :	1141:3:23456:23465	6612139	31	True				
ANR	6613711	Identifier	ldBC		6612139	0					
ANR	6613712	Label	case ldDE :	1142:3:23470:23479	6612139	32	True				
ANR	6613713	Identifier	ldDE		6612139	0					
ANR	6613714	ExpressionStatement	s = rd_nn_nn ( & ptr )	1143:4:23485:23504	6612139	33	True				
ANR	6613715	AssignmentExpression	s = rd_nn_nn ( & ptr )		6612139	0		=			
ANR	6613716	Identifier	s		6612139	0					
ANR	6613717	CallExpression	rd_nn_nn ( & ptr )		6612139	1					
ANR	6613718	Callee	rd_nn_nn		6612139	0					
ANR	6613719	Identifier	rd_nn_nn		6612139	0					
ANR	6613720	ArgumentList	& ptr		6612139	1					
ANR	6613721	Argument	& ptr		6612139	0					
ANR	6613722	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613723	UnaryOperator	&		6612139	0					
ANR	6613724	Identifier	ptr		6612139	1					
ANR	6613725	IfStatement	if ( s == _NN )		6612139	34					
ANR	6613726	Condition	s == _NN	1144:8:23514:23521	6612139	0	True				
ANR	6613727	EqualityExpression	s == _NN		6612139	0		==			
ANR	6613728	Identifier	s		6612139	0					
ANR	6613729	Identifier	_NN		6612139	1					
ANR	6613730	CompoundStatement		334:18:5610:5610	6612139	1					
ANR	6613731	ExpressionStatement	wrtb ( 0xED )	1145:5:23531:23542	6612139	0	True				
ANR	6613732	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613733	Callee	wrtb		6612139	0					
ANR	6613734	Identifier	wrtb		6612139	0					
ANR	6613735	ArgumentList	0xED		6612139	1					
ANR	6613736	Argument	0xED		6612139	0					
ANR	6613737	PrimaryExpression	0xED		6612139	0					
ANR	6613738	ExpressionStatement	wrtb ( 0x4B + 0x10 * ( r == ldDE ) )	1146:5:23549:23581	6612139	1	True				
ANR	6613739	CallExpression	wrtb ( 0x4B + 0x10 * ( r == ldDE ) )		6612139	0					
ANR	6613740	Callee	wrtb		6612139	0					
ANR	6613741	Identifier	wrtb		6612139	0					
ANR	6613742	ArgumentList	0x4B + 0x10 * ( r == ldDE )		6612139	1					
ANR	6613743	Argument	0x4B + 0x10 * ( r == ldDE )		6612139	0					
ANR	6613744	AdditiveExpression	0x4B + 0x10 * ( r == ldDE )		6612139	0		+			
ANR	6613745	PrimaryExpression	0x4B		6612139	0					
ANR	6613746	MultiplicativeExpression	0x10 * ( r == ldDE )		6612139	1		*			
ANR	6613747	PrimaryExpression	0x10		6612139	0					
ANR	6613748	EqualityExpression	r == ldDE		6612139	1		==			
ANR	6613749	Identifier	r		6612139	0					
ANR	6613750	Identifier	ldDE		6612139	1					
ANR	6613751	BreakStatement	break ;	1147:5:23588:23593	6612139	2	True				
ANR	6613752	ExpressionStatement	wrtb ( 0x01 + ( r == ldDE ) * 0x10 )	1149:4:23605:23637	6612139	35	True				
ANR	6613753	CallExpression	wrtb ( 0x01 + ( r == ldDE ) * 0x10 )		6612139	0					
ANR	6613754	Callee	wrtb		6612139	0					
ANR	6613755	Identifier	wrtb		6612139	0					
ANR	6613756	ArgumentList	0x01 + ( r == ldDE ) * 0x10		6612139	1					
ANR	6613757	Argument	0x01 + ( r == ldDE ) * 0x10		6612139	0					
ANR	6613758	AdditiveExpression	0x01 + ( r == ldDE ) * 0x10		6612139	0		+			
ANR	6613759	PrimaryExpression	0x01		6612139	0					
ANR	6613760	MultiplicativeExpression	( r == ldDE ) * 0x10		6612139	1		*			
ANR	6613761	EqualityExpression	r == ldDE		6612139	0		==			
ANR	6613762	Identifier	r		6612139	0					
ANR	6613763	Identifier	ldDE		6612139	1					
ANR	6613764	PrimaryExpression	0x10		6612139	1					
ANR	6613765	BreakStatement	break ;	1150:4:23643:23648	6612139	36	True				
ANR	6613766	Label	case ldHL :	1151:3:23653:23662	6612139	37	True				
ANR	6613767	Identifier	ldHL		6612139	0					
ANR	6613768	ExpressionStatement	r = rd_nn_nn ( & ptr )	1152:4:23668:23687	6612139	38	True				
ANR	6613769	AssignmentExpression	r = rd_nn_nn ( & ptr )		6612139	0		=			
ANR	6613770	Identifier	r		6612139	0					
ANR	6613771	CallExpression	rd_nn_nn ( & ptr )		6612139	1					
ANR	6613772	Callee	rd_nn_nn		6612139	0					
ANR	6613773	Identifier	rd_nn_nn		6612139	0					
ANR	6613774	ArgumentList	& ptr		6612139	1					
ANR	6613775	Argument	& ptr		6612139	0					
ANR	6613776	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613777	UnaryOperator	&		6612139	0					
ANR	6613778	Identifier	ptr		6612139	1					
ANR	6613779	ExpressionStatement	wrtb ( 0x21 + ( r == _NN ) * 9 )	1153:4:23693:23721	6612139	39	True				
ANR	6613780	CallExpression	wrtb ( 0x21 + ( r == _NN ) * 9 )		6612139	0					
ANR	6613781	Callee	wrtb		6612139	0					
ANR	6613782	Identifier	wrtb		6612139	0					
ANR	6613783	ArgumentList	0x21 + ( r == _NN ) * 9		6612139	1					
ANR	6613784	Argument	0x21 + ( r == _NN ) * 9		6612139	0					
ANR	6613785	AdditiveExpression	0x21 + ( r == _NN ) * 9		6612139	0		+			
ANR	6613786	PrimaryExpression	0x21		6612139	0					
ANR	6613787	MultiplicativeExpression	( r == _NN ) * 9		6612139	1		*			
ANR	6613788	EqualityExpression	r == _NN		6612139	0		==			
ANR	6613789	Identifier	r		6612139	0					
ANR	6613790	Identifier	_NN		6612139	1					
ANR	6613791	PrimaryExpression	9		6612139	1					
ANR	6613792	BreakStatement	break ;	1154:4:23727:23732	6612139	40	True				
ANR	6613793	Label	case ldI :	1155:3:23737:23745	6612139	41	True				
ANR	6613794	Identifier	ldI		6612139	0					
ANR	6613795	Label	case ldR :	1156:3:23750:23758	6612139	42	True				
ANR	6613796	Identifier	ldR		6612139	0					
ANR	6613797	IfStatement	if ( ! rd_a ( & ptr ) )		6612139	43					
ANR	6613798	Condition	! rd_a ( & ptr )	1157:8:23768:23779	6612139	0	True				
ANR	6613799	UnaryOperationExpression	! rd_a ( & ptr )		6612139	0					
ANR	6613800	UnaryOperator	!		6612139	0					
ANR	6613801	CallExpression	rd_a ( & ptr )		6612139	1					
ANR	6613802	Callee	rd_a		6612139	0					
ANR	6613803	Identifier	rd_a		6612139	0					
ANR	6613804	ArgumentList	& ptr		6612139	1					
ANR	6613805	Argument	& ptr		6612139	0					
ANR	6613806	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613807	UnaryOperator	&		6612139	0					
ANR	6613808	Identifier	ptr		6612139	1					
ANR	6613809	CompoundStatement		347:22:5868:5868	6612139	1					
ANR	6613810	BreakStatement	break ;	1158:5:23789:23794	6612139	0	True				
ANR	6613811	ExpressionStatement	wrtb ( 0xED )	1160:4:23806:23817	6612139	44	True				
ANR	6613812	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613813	Callee	wrtb		6612139	0					
ANR	6613814	Identifier	wrtb		6612139	0					
ANR	6613815	ArgumentList	0xED		6612139	1					
ANR	6613816	Argument	0xED		6612139	0					
ANR	6613817	PrimaryExpression	0xED		6612139	0					
ANR	6613818	ExpressionStatement	wrtb ( 0x47 + 0x08 * ( r == ldR ) )	1161:4:23823:23854	6612139	45	True				
ANR	6613819	CallExpression	wrtb ( 0x47 + 0x08 * ( r == ldR ) )		6612139	0					
ANR	6613820	Callee	wrtb		6612139	0					
ANR	6613821	Identifier	wrtb		6612139	0					
ANR	6613822	ArgumentList	0x47 + 0x08 * ( r == ldR )		6612139	1					
ANR	6613823	Argument	0x47 + 0x08 * ( r == ldR )		6612139	0					
ANR	6613824	AdditiveExpression	0x47 + 0x08 * ( r == ldR )		6612139	0		+			
ANR	6613825	PrimaryExpression	0x47		6612139	0					
ANR	6613826	MultiplicativeExpression	0x08 * ( r == ldR )		6612139	1		*			
ANR	6613827	PrimaryExpression	0x08		6612139	0					
ANR	6613828	EqualityExpression	r == ldR		6612139	1		==			
ANR	6613829	Identifier	r		6612139	0					
ANR	6613830	Identifier	ldR		6612139	1					
ANR	6613831	BreakStatement	break ;	1162:4:23860:23865	6612139	46	True				
ANR	6613832	Label	case ldSP :	1163:3:23870:23879	6612139	47	True				
ANR	6613833	Identifier	ldSP		6612139	0					
ANR	6613834	ExpressionStatement	r = rd_sp ( & ptr )	1164:4:23885:23901	6612139	48	True				
ANR	6613835	AssignmentExpression	r = rd_sp ( & ptr )		6612139	0		=			
ANR	6613836	Identifier	r		6612139	0					
ANR	6613837	CallExpression	rd_sp ( & ptr )		6612139	1					
ANR	6613838	Callee	rd_sp		6612139	0					
ANR	6613839	Identifier	rd_sp		6612139	0					
ANR	6613840	ArgumentList	& ptr		6612139	1					
ANR	6613841	Argument	& ptr		6612139	0					
ANR	6613842	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613843	UnaryOperator	&		6612139	0					
ANR	6613844	Identifier	ptr		6612139	1					
ANR	6613845	IfStatement	if ( r == SPHL )		6612139	49					
ANR	6613846	Condition	r == SPHL	1165:8:23911:23919	6612139	0	True				
ANR	6613847	EqualityExpression	r == SPHL		6612139	0		==			
ANR	6613848	Identifier	r		6612139	0					
ANR	6613849	Identifier	SPHL		6612139	1					
ANR	6613850	CompoundStatement		355:19:6008:6008	6612139	1					
ANR	6613851	ExpressionStatement	wrtb ( 0xF9 )	1166:5:23929:23940	6612139	0	True				
ANR	6613852	CallExpression	wrtb ( 0xF9 )		6612139	0					
ANR	6613853	Callee	wrtb		6612139	0					
ANR	6613854	Identifier	wrtb		6612139	0					
ANR	6613855	ArgumentList	0xF9		6612139	1					
ANR	6613856	Argument	0xF9		6612139	0					
ANR	6613857	PrimaryExpression	0xF9		6612139	0					
ANR	6613858	BreakStatement	break ;	1167:5:23947:23952	6612139	1	True				
ANR	6613859	IfStatement	if ( r == SPNN )		6612139	50					
ANR	6613860	Condition	r == SPNN	1169:8:23968:23976	6612139	0	True				
ANR	6613861	EqualityExpression	r == SPNN		6612139	0		==			
ANR	6613862	Identifier	r		6612139	0					
ANR	6613863	Identifier	SPNN		6612139	1					
ANR	6613864	CompoundStatement		359:19:6065:6065	6612139	1					
ANR	6613865	ExpressionStatement	wrtb ( 0x31 )	1170:5:23986:23997	6612139	0	True				
ANR	6613866	CallExpression	wrtb ( 0x31 )		6612139	0					
ANR	6613867	Callee	wrtb		6612139	0					
ANR	6613868	Identifier	wrtb		6612139	0					
ANR	6613869	ArgumentList	0x31		6612139	1					
ANR	6613870	Argument	0x31		6612139	0					
ANR	6613871	PrimaryExpression	0x31		6612139	0					
ANR	6613872	BreakStatement	break ;	1171:5:24004:24009	6612139	1	True				
ANR	6613873	ExpressionStatement	wrtb ( 0xED )	1173:4:24021:24032	6612139	51	True				
ANR	6613874	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613875	Callee	wrtb		6612139	0					
ANR	6613876	Identifier	wrtb		6612139	0					
ANR	6613877	ArgumentList	0xED		6612139	1					
ANR	6613878	Argument	0xED		6612139	0					
ANR	6613879	PrimaryExpression	0xED		6612139	0					
ANR	6613880	ExpressionStatement	wrtb ( 0x7B )	1174:4:24038:24049	6612139	52	True				
ANR	6613881	CallExpression	wrtb ( 0x7B )		6612139	0					
ANR	6613882	Callee	wrtb		6612139	0					
ANR	6613883	Identifier	wrtb		6612139	0					
ANR	6613884	ArgumentList	0x7B		6612139	1					
ANR	6613885	Argument	0x7B		6612139	0					
ANR	6613886	PrimaryExpression	0x7B		6612139	0					
ANR	6613887	BreakStatement	break ;	1175:4:24055:24060	6612139	53	True				
ANR	6613888	BreakStatement	break ;	1177:3:24070:24075	6612139	125	True				
ANR	6613889	Label	case Z80_LDD :	1178:2:24079:24091	6612139	126	True				
ANR	6613890	Identifier	Z80_LDD		6612139	0					
ANR	6613891	ExpressionStatement	wrtb ( 0xED )	1179:3:24096:24107	6612139	127	True				
ANR	6613892	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613893	Callee	wrtb		6612139	0					
ANR	6613894	Identifier	wrtb		6612139	0					
ANR	6613895	ArgumentList	0xED		6612139	1					
ANR	6613896	Argument	0xED		6612139	0					
ANR	6613897	PrimaryExpression	0xED		6612139	0					
ANR	6613898	ExpressionStatement	wrtb ( 0xA8 )	1180:3:24112:24123	6612139	128	True				
ANR	6613899	CallExpression	wrtb ( 0xA8 )		6612139	0					
ANR	6613900	Callee	wrtb		6612139	0					
ANR	6613901	Identifier	wrtb		6612139	0					
ANR	6613902	ArgumentList	0xA8		6612139	1					
ANR	6613903	Argument	0xA8		6612139	0					
ANR	6613904	PrimaryExpression	0xA8		6612139	0					
ANR	6613905	BreakStatement	break ;	1181:3:24128:24133	6612139	129	True				
ANR	6613906	Label	case Z80_LDDR :	1182:2:24137:24150	6612139	130	True				
ANR	6613907	Identifier	Z80_LDDR		6612139	0					
ANR	6613908	ExpressionStatement	wrtb ( 0xED )	1183:3:24155:24166	6612139	131	True				
ANR	6613909	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613910	Callee	wrtb		6612139	0					
ANR	6613911	Identifier	wrtb		6612139	0					
ANR	6613912	ArgumentList	0xED		6612139	1					
ANR	6613913	Argument	0xED		6612139	0					
ANR	6613914	PrimaryExpression	0xED		6612139	0					
ANR	6613915	ExpressionStatement	wrtb ( 0xB8 )	1184:3:24171:24182	6612139	132	True				
ANR	6613916	CallExpression	wrtb ( 0xB8 )		6612139	0					
ANR	6613917	Callee	wrtb		6612139	0					
ANR	6613918	Identifier	wrtb		6612139	0					
ANR	6613919	ArgumentList	0xB8		6612139	1					
ANR	6613920	Argument	0xB8		6612139	0					
ANR	6613921	PrimaryExpression	0xB8		6612139	0					
ANR	6613922	BreakStatement	break ;	1185:3:24187:24192	6612139	133	True				
ANR	6613923	Label	case Z80_LDI :	1186:2:24196:24208	6612139	134	True				
ANR	6613924	Identifier	Z80_LDI		6612139	0					
ANR	6613925	ExpressionStatement	wrtb ( 0xED )	1187:3:24213:24224	6612139	135	True				
ANR	6613926	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613927	Callee	wrtb		6612139	0					
ANR	6613928	Identifier	wrtb		6612139	0					
ANR	6613929	ArgumentList	0xED		6612139	1					
ANR	6613930	Argument	0xED		6612139	0					
ANR	6613931	PrimaryExpression	0xED		6612139	0					
ANR	6613932	ExpressionStatement	wrtb ( 0xA0 )	1188:3:24229:24240	6612139	136	True				
ANR	6613933	CallExpression	wrtb ( 0xA0 )		6612139	0					
ANR	6613934	Callee	wrtb		6612139	0					
ANR	6613935	Identifier	wrtb		6612139	0					
ANR	6613936	ArgumentList	0xA0		6612139	1					
ANR	6613937	Argument	0xA0		6612139	0					
ANR	6613938	PrimaryExpression	0xA0		6612139	0					
ANR	6613939	BreakStatement	break ;	1189:3:24245:24250	6612139	137	True				
ANR	6613940	Label	case Z80_LDIR :	1190:2:24254:24267	6612139	138	True				
ANR	6613941	Identifier	Z80_LDIR		6612139	0					
ANR	6613942	ExpressionStatement	wrtb ( 0xED )	1191:3:24272:24283	6612139	139	True				
ANR	6613943	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613944	Callee	wrtb		6612139	0					
ANR	6613945	Identifier	wrtb		6612139	0					
ANR	6613946	ArgumentList	0xED		6612139	1					
ANR	6613947	Argument	0xED		6612139	0					
ANR	6613948	PrimaryExpression	0xED		6612139	0					
ANR	6613949	ExpressionStatement	wrtb ( 0xB0 )	1192:3:24288:24299	6612139	140	True				
ANR	6613950	CallExpression	wrtb ( 0xB0 )		6612139	0					
ANR	6613951	Callee	wrtb		6612139	0					
ANR	6613952	Identifier	wrtb		6612139	0					
ANR	6613953	ArgumentList	0xB0		6612139	1					
ANR	6613954	Argument	0xB0		6612139	0					
ANR	6613955	PrimaryExpression	0xB0		6612139	0					
ANR	6613956	BreakStatement	break ;	1193:3:24304:24309	6612139	141	True				
ANR	6613957	Label	case Z80_NEG :	1194:2:24313:24325	6612139	142	True				
ANR	6613958	Identifier	Z80_NEG		6612139	0					
ANR	6613959	ExpressionStatement	wrtb ( 0xED )	1195:3:24330:24341	6612139	143	True				
ANR	6613960	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6613961	Callee	wrtb		6612139	0					
ANR	6613962	Identifier	wrtb		6612139	0					
ANR	6613963	ArgumentList	0xED		6612139	1					
ANR	6613964	Argument	0xED		6612139	0					
ANR	6613965	PrimaryExpression	0xED		6612139	0					
ANR	6613966	ExpressionStatement	wrtb ( 0x44 )	1196:3:24346:24357	6612139	144	True				
ANR	6613967	CallExpression	wrtb ( 0x44 )		6612139	0					
ANR	6613968	Callee	wrtb		6612139	0					
ANR	6613969	Identifier	wrtb		6612139	0					
ANR	6613970	ArgumentList	0x44		6612139	1					
ANR	6613971	Argument	0x44		6612139	0					
ANR	6613972	PrimaryExpression	0x44		6612139	0					
ANR	6613973	BreakStatement	break ;	1197:3:24362:24367	6612139	145	True				
ANR	6613974	Label	case Z80_NOP :	1198:2:24371:24383	6612139	146	True				
ANR	6613975	Identifier	Z80_NOP		6612139	0					
ANR	6613976	ExpressionStatement	wrtb ( 0x00 )	1199:3:24388:24399	6612139	147	True				
ANR	6613977	CallExpression	wrtb ( 0x00 )		6612139	0					
ANR	6613978	Callee	wrtb		6612139	0					
ANR	6613979	Identifier	wrtb		6612139	0					
ANR	6613980	ArgumentList	0x00		6612139	1					
ANR	6613981	Argument	0x00		6612139	0					
ANR	6613982	PrimaryExpression	0x00		6612139	0					
ANR	6613983	BreakStatement	break ;	1200:3:24404:24409	6612139	148	True				
ANR	6613984	Label	case Z80_OR :	1201:2:24413:24424	6612139	149	True				
ANR	6613985	Identifier	Z80_OR		6612139	0					
ANR	6613986	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	150					
ANR	6613987	Condition	! ( r = rd_r ( & ptr ) )	1202:7:24433:24450	6612139	0	True				
ANR	6613988	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6613989	UnaryOperator	!		6612139	0					
ANR	6613990	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6613991	Identifier	r		6612139	0					
ANR	6613992	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6613993	Callee	rd_r		6612139	0					
ANR	6613994	Identifier	rd_r		6612139	0					
ANR	6613995	ArgumentList	& ptr		6612139	1					
ANR	6613996	Argument	& ptr		6612139	0					
ANR	6613997	UnaryOperationExpression	& ptr		6612139	0					
ANR	6613998	UnaryOperator	&		6612139	0					
ANR	6613999	Identifier	ptr		6612139	1					
ANR	6614000	CompoundStatement		392:27:6539:6539	6612139	1					
ANR	6614001	BreakStatement	break ;	1203:4:24459:24464	6612139	0	True				
ANR	6614002	ExpressionStatement	wrtb ( 0xB0 + -- r )	1205:3:24474:24491	6612139	151	True				
ANR	6614003	CallExpression	wrtb ( 0xB0 + -- r )		6612139	0					
ANR	6614004	Callee	wrtb		6612139	0					
ANR	6614005	Identifier	wrtb		6612139	0					
ANR	6614006	ArgumentList	0xB0 + -- r		6612139	1					
ANR	6614007	Argument	0xB0 + -- r		6612139	0					
ANR	6614008	AdditiveExpression	0xB0 + -- r		6612139	0		+			
ANR	6614009	PrimaryExpression	0xB0		6612139	0					
ANR	6614010	UnaryExpression	-- r		6612139	1					
ANR	6614011	IncDec	--		6612139	0					
ANR	6614012	Identifier	r		6612139	1					
ANR	6614013	BreakStatement	break ;	1206:3:24496:24501	6612139	152	True				
ANR	6614014	Label	case Z80_OTDR :	1207:2:24505:24518	6612139	153	True				
ANR	6614015	Identifier	Z80_OTDR		6612139	0					
ANR	6614016	ExpressionStatement	wrtb ( 0xED )	1208:3:24523:24534	6612139	154	True				
ANR	6614017	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614018	Callee	wrtb		6612139	0					
ANR	6614019	Identifier	wrtb		6612139	0					
ANR	6614020	ArgumentList	0xED		6612139	1					
ANR	6614021	Argument	0xED		6612139	0					
ANR	6614022	PrimaryExpression	0xED		6612139	0					
ANR	6614023	ExpressionStatement	wrtb ( 0xBB )	1209:3:24539:24550	6612139	155	True				
ANR	6614024	CallExpression	wrtb ( 0xBB )		6612139	0					
ANR	6614025	Callee	wrtb		6612139	0					
ANR	6614026	Identifier	wrtb		6612139	0					
ANR	6614027	ArgumentList	0xBB		6612139	1					
ANR	6614028	Argument	0xBB		6612139	0					
ANR	6614029	PrimaryExpression	0xBB		6612139	0					
ANR	6614030	BreakStatement	break ;	1210:3:24555:24560	6612139	156	True				
ANR	6614031	Label	case Z80_OTIR :	1211:2:24564:24577	6612139	157	True				
ANR	6614032	Identifier	Z80_OTIR		6612139	0					
ANR	6614033	ExpressionStatement	wrtb ( 0xED )	1212:3:24582:24593	6612139	158	True				
ANR	6614034	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614035	Callee	wrtb		6612139	0					
ANR	6614036	Identifier	wrtb		6612139	0					
ANR	6614037	ArgumentList	0xED		6612139	1					
ANR	6614038	Argument	0xED		6612139	0					
ANR	6614039	PrimaryExpression	0xED		6612139	0					
ANR	6614040	ExpressionStatement	wrtb ( 0xB3 )	1213:3:24598:24609	6612139	159	True				
ANR	6614041	CallExpression	wrtb ( 0xB3 )		6612139	0					
ANR	6614042	Callee	wrtb		6612139	0					
ANR	6614043	Identifier	wrtb		6612139	0					
ANR	6614044	ArgumentList	0xB3		6612139	1					
ANR	6614045	Argument	0xB3		6612139	0					
ANR	6614046	PrimaryExpression	0xB3		6612139	0					
ANR	6614047	BreakStatement	break ;	1214:3:24614:24619	6612139	160	True				
ANR	6614048	Label	case Z80_OUT :	1215:2:24623:24635	6612139	161	True				
ANR	6614049	Identifier	Z80_OUT		6612139	0					
ANR	6614050	IfStatement	if ( ! ( r = rd_nnc ( & ptr ) ) )		6612139	162					
ANR	6614051	Condition	! ( r = rd_nnc ( & ptr ) )	1216:7:24644:24663	6612139	0	True				
ANR	6614052	UnaryOperationExpression	! ( r = rd_nnc ( & ptr ) )		6612139	0					
ANR	6614053	UnaryOperator	!		6612139	0					
ANR	6614054	AssignmentExpression	r = rd_nnc ( & ptr )		6612139	1		=			
ANR	6614055	Identifier	r		6612139	0					
ANR	6614056	CallExpression	rd_nnc ( & ptr )		6612139	1					
ANR	6614057	Callee	rd_nnc		6612139	0					
ANR	6614058	Identifier	rd_nnc		6612139	0					
ANR	6614059	ArgumentList	& ptr		6612139	1					
ANR	6614060	Argument	& ptr		6612139	0					
ANR	6614061	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614062	UnaryOperator	&		6612139	0					
ANR	6614063	Identifier	ptr		6612139	1					
ANR	6614064	CompoundStatement		406:29:6752:6752	6612139	1					
ANR	6614065	BreakStatement	break ;	1217:4:24672:24677	6612139	0	True				
ANR	6614066	IfStatement	if ( r == C )		6612139	163					
ANR	6614067	Condition	r == C	1219:7:24691:24696	6612139	0	True				
ANR	6614068	EqualityExpression	r == C		6612139	0		==			
ANR	6614069	Identifier	r		6612139	0					
ANR	6614070	Identifier	C		6612139	1					
ANR	6614071	CompoundStatement		409:15:6785:6785	6612139	1					
ANR	6614072	IfStatement	if ( ! ( r = rd_out ( & ptr ) ) )		6612139	0					
ANR	6614073	Condition	! ( r = rd_out ( & ptr ) )	1220:8:24709:24728	6612139	0	True				
ANR	6614074	UnaryOperationExpression	! ( r = rd_out ( & ptr ) )		6612139	0					
ANR	6614075	UnaryOperator	!		6612139	0					
ANR	6614076	AssignmentExpression	r = rd_out ( & ptr )		6612139	1		=			
ANR	6614077	Identifier	r		6612139	0					
ANR	6614078	CallExpression	rd_out ( & ptr )		6612139	1					
ANR	6614079	Callee	rd_out		6612139	0					
ANR	6614080	Identifier	rd_out		6612139	0					
ANR	6614081	ArgumentList	& ptr		6612139	1					
ANR	6614082	Argument	& ptr		6612139	0					
ANR	6614083	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614084	UnaryOperator	&		6612139	0					
ANR	6614085	Identifier	ptr		6612139	1					
ANR	6614086	CompoundStatement		410:30:6817:6817	6612139	1					
ANR	6614087	BreakStatement	break ;	1221:5:24738:24743	6612139	0	True				
ANR	6614088	ExpressionStatement	wrtb ( 0xED )	1223:4:24755:24766	6612139	1	True				
ANR	6614089	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614090	Callee	wrtb		6612139	0					
ANR	6614091	Identifier	wrtb		6612139	0					
ANR	6614092	ArgumentList	0xED		6612139	1					
ANR	6614093	Argument	0xED		6612139	0					
ANR	6614094	PrimaryExpression	0xED		6612139	0					
ANR	6614095	ExpressionStatement	wrtb ( 0x41 + 8 * -- r )	1224:4:24772:24793	6612139	2	True				
ANR	6614096	CallExpression	wrtb ( 0x41 + 8 * -- r )		6612139	0					
ANR	6614097	Callee	wrtb		6612139	0					
ANR	6614098	Identifier	wrtb		6612139	0					
ANR	6614099	ArgumentList	0x41 + 8 * -- r		6612139	1					
ANR	6614100	Argument	0x41 + 8 * -- r		6612139	0					
ANR	6614101	AdditiveExpression	0x41 + 8 * -- r		6612139	0		+			
ANR	6614102	PrimaryExpression	0x41		6612139	0					
ANR	6614103	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6614104	PrimaryExpression	8		6612139	0					
ANR	6614105	UnaryExpression	-- r		6612139	1					
ANR	6614106	IncDec	--		6612139	0					
ANR	6614107	Identifier	r		6612139	1					
ANR	6614108	BreakStatement	break ;	1225:4:24799:24804	6612139	3	True				
ANR	6614109	IfStatement	if ( ! rd_a ( & ptr ) )		6612139	164					
ANR	6614110	Condition	! rd_a ( & ptr )	1227:7:24818:24829	6612139	0	True				
ANR	6614111	UnaryOperationExpression	! rd_a ( & ptr )		6612139	0					
ANR	6614112	UnaryOperator	!		6612139	0					
ANR	6614113	CallExpression	rd_a ( & ptr )		6612139	1					
ANR	6614114	Callee	rd_a		6612139	0					
ANR	6614115	Identifier	rd_a		6612139	0					
ANR	6614116	ArgumentList	& ptr		6612139	1					
ANR	6614117	Argument	& ptr		6612139	0					
ANR	6614118	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614119	UnaryOperator	&		6612139	0					
ANR	6614120	Identifier	ptr		6612139	1					
ANR	6614121	CompoundStatement		417:21:6918:6918	6612139	1					
ANR	6614122	BreakStatement	break ;	1228:4:24838:24843	6612139	0	True				
ANR	6614123	ExpressionStatement	wrtb ( 0xD3 )	1230:3:24853:24864	6612139	165	True				
ANR	6614124	CallExpression	wrtb ( 0xD3 )		6612139	0					
ANR	6614125	Callee	wrtb		6612139	0					
ANR	6614126	Identifier	wrtb		6612139	0					
ANR	6614127	ArgumentList	0xD3		6612139	1					
ANR	6614128	Argument	0xD3		6612139	0					
ANR	6614129	PrimaryExpression	0xD3		6612139	0					
ANR	6614130	BreakStatement	break ;	1231:3:24869:24874	6612139	166	True				
ANR	6614131	Label	case Z80_OUTD :	1232:2:24878:24891	6612139	167	True				
ANR	6614132	Identifier	Z80_OUTD		6612139	0					
ANR	6614133	ExpressionStatement	wrtb ( 0xED )	1233:3:24896:24907	6612139	168	True				
ANR	6614134	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614135	Callee	wrtb		6612139	0					
ANR	6614136	Identifier	wrtb		6612139	0					
ANR	6614137	ArgumentList	0xED		6612139	1					
ANR	6614138	Argument	0xED		6612139	0					
ANR	6614139	PrimaryExpression	0xED		6612139	0					
ANR	6614140	ExpressionStatement	wrtb ( 0xAB )	1234:3:24912:24923	6612139	169	True				
ANR	6614141	CallExpression	wrtb ( 0xAB )		6612139	0					
ANR	6614142	Callee	wrtb		6612139	0					
ANR	6614143	Identifier	wrtb		6612139	0					
ANR	6614144	ArgumentList	0xAB		6612139	1					
ANR	6614145	Argument	0xAB		6612139	0					
ANR	6614146	PrimaryExpression	0xAB		6612139	0					
ANR	6614147	BreakStatement	break ;	1235:3:24928:24933	6612139	170	True				
ANR	6614148	Label	case Z80_OUTI :	1236:2:24937:24950	6612139	171	True				
ANR	6614149	Identifier	Z80_OUTI		6612139	0					
ANR	6614150	ExpressionStatement	wrtb ( 0xED )	1237:3:24955:24966	6612139	172	True				
ANR	6614151	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614152	Callee	wrtb		6612139	0					
ANR	6614153	Identifier	wrtb		6612139	0					
ANR	6614154	ArgumentList	0xED		6612139	1					
ANR	6614155	Argument	0xED		6612139	0					
ANR	6614156	PrimaryExpression	0xED		6612139	0					
ANR	6614157	ExpressionStatement	wrtb ( 0xA3 )	1238:3:24971:24982	6612139	173	True				
ANR	6614158	CallExpression	wrtb ( 0xA3 )		6612139	0					
ANR	6614159	Callee	wrtb		6612139	0					
ANR	6614160	Identifier	wrtb		6612139	0					
ANR	6614161	ArgumentList	0xA3		6612139	1					
ANR	6614162	Argument	0xA3		6612139	0					
ANR	6614163	PrimaryExpression	0xA3		6612139	0					
ANR	6614164	BreakStatement	break ;	1239:3:24987:24992	6612139	174	True				
ANR	6614165	Label	case Z80_POP :	1240:2:24996:25008	6612139	175	True				
ANR	6614166	Identifier	Z80_POP		6612139	0					
ANR	6614167	IfStatement	if ( ! ( r = rd_stack ( & ptr ) ) )		6612139	176					
ANR	6614168	Condition	! ( r = rd_stack ( & ptr ) )	1241:7:25017:25038	6612139	0	True				
ANR	6614169	UnaryOperationExpression	! ( r = rd_stack ( & ptr ) )		6612139	0					
ANR	6614170	UnaryOperator	!		6612139	0					
ANR	6614171	AssignmentExpression	r = rd_stack ( & ptr )		6612139	1		=			
ANR	6614172	Identifier	r		6612139	0					
ANR	6614173	CallExpression	rd_stack ( & ptr )		6612139	1					
ANR	6614174	Callee	rd_stack		6612139	0					
ANR	6614175	Identifier	rd_stack		6612139	0					
ANR	6614176	ArgumentList	& ptr		6612139	1					
ANR	6614177	Argument	& ptr		6612139	0					
ANR	6614178	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614179	UnaryOperator	&		6612139	0					
ANR	6614180	Identifier	ptr		6612139	1					
ANR	6614181	CompoundStatement		431:31:7127:7127	6612139	1					
ANR	6614182	BreakStatement	break ;	1242:4:25047:25052	6612139	0	True				
ANR	6614183	ExpressionStatement	wrtb ( 0xC1 + 0x10 * -- r )	1244:3:25062:25086	6612139	177	True				
ANR	6614184	CallExpression	wrtb ( 0xC1 + 0x10 * -- r )		6612139	0					
ANR	6614185	Callee	wrtb		6612139	0					
ANR	6614186	Identifier	wrtb		6612139	0					
ANR	6614187	ArgumentList	0xC1 + 0x10 * -- r		6612139	1					
ANR	6614188	Argument	0xC1 + 0x10 * -- r		6612139	0					
ANR	6614189	AdditiveExpression	0xC1 + 0x10 * -- r		6612139	0		+			
ANR	6614190	PrimaryExpression	0xC1		6612139	0					
ANR	6614191	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6614192	PrimaryExpression	0x10		6612139	0					
ANR	6614193	UnaryExpression	-- r		6612139	1					
ANR	6614194	IncDec	--		6612139	0					
ANR	6614195	Identifier	r		6612139	1					
ANR	6614196	BreakStatement	break ;	1245:3:25091:25096	6612139	178	True				
ANR	6614197	Label	case Z80_PUSH :	1246:2:25100:25113	6612139	179	True				
ANR	6614198	Identifier	Z80_PUSH		6612139	0					
ANR	6614199	IfStatement	if ( ! ( r = rd_stack ( & ptr ) ) )		6612139	180					
ANR	6614200	Condition	! ( r = rd_stack ( & ptr ) )	1247:7:25122:25143	6612139	0	True				
ANR	6614201	UnaryOperationExpression	! ( r = rd_stack ( & ptr ) )		6612139	0					
ANR	6614202	UnaryOperator	!		6612139	0					
ANR	6614203	AssignmentExpression	r = rd_stack ( & ptr )		6612139	1		=			
ANR	6614204	Identifier	r		6612139	0					
ANR	6614205	CallExpression	rd_stack ( & ptr )		6612139	1					
ANR	6614206	Callee	rd_stack		6612139	0					
ANR	6614207	Identifier	rd_stack		6612139	0					
ANR	6614208	ArgumentList	& ptr		6612139	1					
ANR	6614209	Argument	& ptr		6612139	0					
ANR	6614210	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614211	UnaryOperator	&		6612139	0					
ANR	6614212	Identifier	ptr		6612139	1					
ANR	6614213	CompoundStatement		437:31:7232:7232	6612139	1					
ANR	6614214	BreakStatement	break ;	1248:4:25152:25157	6612139	0	True				
ANR	6614215	ExpressionStatement	wrtb ( 0xC5 + 0x10 * -- r )	1250:3:25167:25191	6612139	181	True				
ANR	6614216	CallExpression	wrtb ( 0xC5 + 0x10 * -- r )		6612139	0					
ANR	6614217	Callee	wrtb		6612139	0					
ANR	6614218	Identifier	wrtb		6612139	0					
ANR	6614219	ArgumentList	0xC5 + 0x10 * -- r		6612139	1					
ANR	6614220	Argument	0xC5 + 0x10 * -- r		6612139	0					
ANR	6614221	AdditiveExpression	0xC5 + 0x10 * -- r		6612139	0		+			
ANR	6614222	PrimaryExpression	0xC5		6612139	0					
ANR	6614223	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6614224	PrimaryExpression	0x10		6612139	0					
ANR	6614225	UnaryExpression	-- r		6612139	1					
ANR	6614226	IncDec	--		6612139	0					
ANR	6614227	Identifier	r		6612139	1					
ANR	6614228	BreakStatement	break ;	1251:3:25196:25201	6612139	182	True				
ANR	6614229	Label	case Z80_RES :	1252:2:25205:25217	6612139	183	True				
ANR	6614230	Identifier	Z80_RES		6612139	0					
ANR	6614231	IfStatement	if ( ! rd_0_7 ( & ptr ) )		6612139	184					
ANR	6614232	Condition	! rd_0_7 ( & ptr )	1253:7:25226:25239	6612139	0	True				
ANR	6614233	UnaryOperationExpression	! rd_0_7 ( & ptr )		6612139	0					
ANR	6614234	UnaryOperator	!		6612139	0					
ANR	6614235	CallExpression	rd_0_7 ( & ptr )		6612139	1					
ANR	6614236	Callee	rd_0_7		6612139	0					
ANR	6614237	Identifier	rd_0_7		6612139	0					
ANR	6614238	ArgumentList	& ptr		6612139	1					
ANR	6614239	Argument	& ptr		6612139	0					
ANR	6614240	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614241	UnaryOperator	&		6612139	0					
ANR	6614242	Identifier	ptr		6612139	1					
ANR	6614243	CompoundStatement		443:23:7328:7328	6612139	1					
ANR	6614244	BreakStatement	break ;	1254:4:25248:25253	6612139	0	True				
ANR	6614245	ExpressionStatement	rd_comma ( & ptr )	1256:3:25263:25278	6612139	185	True				
ANR	6614246	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6614247	Callee	rd_comma		6612139	0					
ANR	6614248	Identifier	rd_comma		6612139	0					
ANR	6614249	ArgumentList	& ptr		6612139	1					
ANR	6614250	Argument	& ptr		6612139	0					
ANR	6614251	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614252	UnaryOperator	&		6612139	0					
ANR	6614253	Identifier	ptr		6612139	1					
ANR	6614254	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	186					
ANR	6614255	Condition	! ( r = rd_r_ ( & ptr ) )	1257:7:25287:25304	6612139	0	True				
ANR	6614256	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614257	UnaryOperator	!		6612139	0					
ANR	6614258	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614259	Identifier	r		6612139	0					
ANR	6614260	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614261	Callee	rd_r_		6612139	0					
ANR	6614262	Identifier	rd_r_		6612139	0					
ANR	6614263	ArgumentList	& ptr		6612139	1					
ANR	6614264	Argument	& ptr		6612139	0					
ANR	6614265	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614266	UnaryOperator	&		6612139	0					
ANR	6614267	Identifier	ptr		6612139	1					
ANR	6614268	CompoundStatement		447:27:7393:7393	6612139	1					
ANR	6614269	BreakStatement	break ;	1258:4:25313:25318	6612139	0	True				
ANR	6614270	ExpressionStatement	wrtb ( 0xCB )	1260:3:25328:25339	6612139	187	True				
ANR	6614271	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614272	Callee	wrtb		6612139	0					
ANR	6614273	Identifier	wrtb		6612139	0					
ANR	6614274	ArgumentList	0xCB		6612139	1					
ANR	6614275	Argument	0xCB		6612139	0					
ANR	6614276	PrimaryExpression	0xCB		6612139	0					
ANR	6614277	ExpressionStatement	wrtb ( 0x80 + -- r )	1261:3:25344:25361	6612139	188	True				
ANR	6614278	CallExpression	wrtb ( 0x80 + -- r )		6612139	0					
ANR	6614279	Callee	wrtb		6612139	0					
ANR	6614280	Identifier	wrtb		6612139	0					
ANR	6614281	ArgumentList	0x80 + -- r		6612139	1					
ANR	6614282	Argument	0x80 + -- r		6612139	0					
ANR	6614283	AdditiveExpression	0x80 + -- r		6612139	0		+			
ANR	6614284	PrimaryExpression	0x80		6612139	0					
ANR	6614285	UnaryExpression	-- r		6612139	1					
ANR	6614286	IncDec	--		6612139	0					
ANR	6614287	Identifier	r		6612139	1					
ANR	6614288	BreakStatement	break ;	1262:3:25366:25371	6612139	189	True				
ANR	6614289	Label	case Z80_RET :	1263:2:25375:25387	6612139	190	True				
ANR	6614290	Identifier	Z80_RET		6612139	0					
ANR	6614291	IfStatement	if ( ! ( r = rd_cc ( & ptr ) ) )		6612139	191					
ANR	6614292	Condition	! ( r = rd_cc ( & ptr ) )	1264:7:25396:25414	6612139	0	True				
ANR	6614293	UnaryOperationExpression	! ( r = rd_cc ( & ptr ) )		6612139	0					
ANR	6614294	UnaryOperator	!		6612139	0					
ANR	6614295	AssignmentExpression	r = rd_cc ( & ptr )		6612139	1		=			
ANR	6614296	Identifier	r		6612139	0					
ANR	6614297	CallExpression	rd_cc ( & ptr )		6612139	1					
ANR	6614298	Callee	rd_cc		6612139	0					
ANR	6614299	Identifier	rd_cc		6612139	0					
ANR	6614300	ArgumentList	& ptr		6612139	1					
ANR	6614301	Argument	& ptr		6612139	0					
ANR	6614302	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614303	UnaryOperator	&		6612139	0					
ANR	6614304	Identifier	ptr		6612139	1					
ANR	6614305	CompoundStatement		454:28:7503:7503	6612139	1					
ANR	6614306	ExpressionStatement	wrtb ( 0xC9 )	1265:4:25423:25434	6612139	0	True				
ANR	6614307	CallExpression	wrtb ( 0xC9 )		6612139	0					
ANR	6614308	Callee	wrtb		6612139	0					
ANR	6614309	Identifier	wrtb		6612139	0					
ANR	6614310	ArgumentList	0xC9		6612139	1					
ANR	6614311	Argument	0xC9		6612139	0					
ANR	6614312	PrimaryExpression	0xC9		6612139	0					
ANR	6614313	BreakStatement	break ;	1266:4:25440:25445	6612139	1	True				
ANR	6614314	ExpressionStatement	wrtb ( 0xC0 + 8 * -- r )	1268:3:25455:25476	6612139	192	True				
ANR	6614315	CallExpression	wrtb ( 0xC0 + 8 * -- r )		6612139	0					
ANR	6614316	Callee	wrtb		6612139	0					
ANR	6614317	Identifier	wrtb		6612139	0					
ANR	6614318	ArgumentList	0xC0 + 8 * -- r		6612139	1					
ANR	6614319	Argument	0xC0 + 8 * -- r		6612139	0					
ANR	6614320	AdditiveExpression	0xC0 + 8 * -- r		6612139	0		+			
ANR	6614321	PrimaryExpression	0xC0		6612139	0					
ANR	6614322	MultiplicativeExpression	8 * -- r		6612139	1		*			
ANR	6614323	PrimaryExpression	8		6612139	0					
ANR	6614324	UnaryExpression	-- r		6612139	1					
ANR	6614325	IncDec	--		6612139	0					
ANR	6614326	Identifier	r		6612139	1					
ANR	6614327	BreakStatement	break ;	1269:3:25481:25486	6612139	193	True				
ANR	6614328	Label	case Z80_RETI :	1270:2:25490:25503	6612139	194	True				
ANR	6614329	Identifier	Z80_RETI		6612139	0					
ANR	6614330	ExpressionStatement	wrtb ( 0xED )	1271:3:25508:25519	6612139	195	True				
ANR	6614331	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614332	Callee	wrtb		6612139	0					
ANR	6614333	Identifier	wrtb		6612139	0					
ANR	6614334	ArgumentList	0xED		6612139	1					
ANR	6614335	Argument	0xED		6612139	0					
ANR	6614336	PrimaryExpression	0xED		6612139	0					
ANR	6614337	ExpressionStatement	wrtb ( 0x4D )	1272:3:25524:25535	6612139	196	True				
ANR	6614338	CallExpression	wrtb ( 0x4D )		6612139	0					
ANR	6614339	Callee	wrtb		6612139	0					
ANR	6614340	Identifier	wrtb		6612139	0					
ANR	6614341	ArgumentList	0x4D		6612139	1					
ANR	6614342	Argument	0x4D		6612139	0					
ANR	6614343	PrimaryExpression	0x4D		6612139	0					
ANR	6614344	BreakStatement	break ;	1273:3:25540:25545	6612139	197	True				
ANR	6614345	Label	case Z80_RETN :	1274:2:25549:25562	6612139	198	True				
ANR	6614346	Identifier	Z80_RETN		6612139	0					
ANR	6614347	ExpressionStatement	wrtb ( 0xED )	1275:3:25567:25578	6612139	199	True				
ANR	6614348	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614349	Callee	wrtb		6612139	0					
ANR	6614350	Identifier	wrtb		6612139	0					
ANR	6614351	ArgumentList	0xED		6612139	1					
ANR	6614352	Argument	0xED		6612139	0					
ANR	6614353	PrimaryExpression	0xED		6612139	0					
ANR	6614354	ExpressionStatement	wrtb ( 0x45 )	1276:3:25583:25594	6612139	200	True				
ANR	6614355	CallExpression	wrtb ( 0x45 )		6612139	0					
ANR	6614356	Callee	wrtb		6612139	0					
ANR	6614357	Identifier	wrtb		6612139	0					
ANR	6614358	ArgumentList	0x45		6612139	1					
ANR	6614359	Argument	0x45		6612139	0					
ANR	6614360	PrimaryExpression	0x45		6612139	0					
ANR	6614361	BreakStatement	break ;	1277:3:25599:25604	6612139	201	True				
ANR	6614362	Label	case Z80_RL :	1278:2:25608:25619	6612139	202	True				
ANR	6614363	Identifier	Z80_RL		6612139	0					
ANR	6614364	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	203					
ANR	6614365	Condition	! ( r = rd_r_ ( & ptr ) )	1279:7:25628:25645	6612139	0	True				
ANR	6614366	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614367	UnaryOperator	!		6612139	0					
ANR	6614368	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614369	Identifier	r		6612139	0					
ANR	6614370	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614371	Callee	rd_r_		6612139	0					
ANR	6614372	Identifier	rd_r_		6612139	0					
ANR	6614373	ArgumentList	& ptr		6612139	1					
ANR	6614374	Argument	& ptr		6612139	0					
ANR	6614375	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614376	UnaryOperator	&		6612139	0					
ANR	6614377	Identifier	ptr		6612139	1					
ANR	6614378	CompoundStatement		469:27:7734:7734	6612139	1					
ANR	6614379	BreakStatement	break ;	1280:4:25654:25659	6612139	0	True				
ANR	6614380	ExpressionStatement	wrtb ( 0xCB )	1282:3:25669:25680	6612139	204	True				
ANR	6614381	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614382	Callee	wrtb		6612139	0					
ANR	6614383	Identifier	wrtb		6612139	0					
ANR	6614384	ArgumentList	0xCB		6612139	1					
ANR	6614385	Argument	0xCB		6612139	0					
ANR	6614386	PrimaryExpression	0xCB		6612139	0					
ANR	6614387	ExpressionStatement	wrtb ( 0x10 + -- r )	1283:3:25685:25702	6612139	205	True				
ANR	6614388	CallExpression	wrtb ( 0x10 + -- r )		6612139	0					
ANR	6614389	Callee	wrtb		6612139	0					
ANR	6614390	Identifier	wrtb		6612139	0					
ANR	6614391	ArgumentList	0x10 + -- r		6612139	1					
ANR	6614392	Argument	0x10 + -- r		6612139	0					
ANR	6614393	AdditiveExpression	0x10 + -- r		6612139	0		+			
ANR	6614394	PrimaryExpression	0x10		6612139	0					
ANR	6614395	UnaryExpression	-- r		6612139	1					
ANR	6614396	IncDec	--		6612139	0					
ANR	6614397	Identifier	r		6612139	1					
ANR	6614398	BreakStatement	break ;	1284:3:25707:25712	6612139	206	True				
ANR	6614399	Label	case Z80_RLA :	1285:2:25716:25728	6612139	207	True				
ANR	6614400	Identifier	Z80_RLA		6612139	0					
ANR	6614401	ExpressionStatement	wrtb ( 0x17 )	1286:3:25733:25744	6612139	208	True				
ANR	6614402	CallExpression	wrtb ( 0x17 )		6612139	0					
ANR	6614403	Callee	wrtb		6612139	0					
ANR	6614404	Identifier	wrtb		6612139	0					
ANR	6614405	ArgumentList	0x17		6612139	1					
ANR	6614406	Argument	0x17		6612139	0					
ANR	6614407	PrimaryExpression	0x17		6612139	0					
ANR	6614408	BreakStatement	break ;	1287:3:25749:25754	6612139	209	True				
ANR	6614409	Label	case Z80_RLC :	1288:2:25758:25770	6612139	210	True				
ANR	6614410	Identifier	Z80_RLC		6612139	0					
ANR	6614411	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	211					
ANR	6614412	Condition	! ( r = rd_r_ ( & ptr ) )	1289:7:25779:25796	6612139	0	True				
ANR	6614413	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614414	UnaryOperator	!		6612139	0					
ANR	6614415	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614416	Identifier	r		6612139	0					
ANR	6614417	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614418	Callee	rd_r_		6612139	0					
ANR	6614419	Identifier	rd_r_		6612139	0					
ANR	6614420	ArgumentList	& ptr		6612139	1					
ANR	6614421	Argument	& ptr		6612139	0					
ANR	6614422	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614423	UnaryOperator	&		6612139	0					
ANR	6614424	Identifier	ptr		6612139	1					
ANR	6614425	CompoundStatement		479:27:7885:7885	6612139	1					
ANR	6614426	BreakStatement	break ;	1290:4:25805:25810	6612139	0	True				
ANR	6614427	ExpressionStatement	wrtb ( 0xCB )	1292:3:25820:25831	6612139	212	True				
ANR	6614428	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614429	Callee	wrtb		6612139	0					
ANR	6614430	Identifier	wrtb		6612139	0					
ANR	6614431	ArgumentList	0xCB		6612139	1					
ANR	6614432	Argument	0xCB		6612139	0					
ANR	6614433	PrimaryExpression	0xCB		6612139	0					
ANR	6614434	ExpressionStatement	wrtb ( 0x00 + -- r )	1293:3:25836:25853	6612139	213	True				
ANR	6614435	CallExpression	wrtb ( 0x00 + -- r )		6612139	0					
ANR	6614436	Callee	wrtb		6612139	0					
ANR	6614437	Identifier	wrtb		6612139	0					
ANR	6614438	ArgumentList	0x00 + -- r		6612139	1					
ANR	6614439	Argument	0x00 + -- r		6612139	0					
ANR	6614440	AdditiveExpression	0x00 + -- r		6612139	0		+			
ANR	6614441	PrimaryExpression	0x00		6612139	0					
ANR	6614442	UnaryExpression	-- r		6612139	1					
ANR	6614443	IncDec	--		6612139	0					
ANR	6614444	Identifier	r		6612139	1					
ANR	6614445	BreakStatement	break ;	1294:3:25858:25863	6612139	214	True				
ANR	6614446	Label	case Z80_RLCA :	1295:2:25867:25880	6612139	215	True				
ANR	6614447	Identifier	Z80_RLCA		6612139	0					
ANR	6614448	ExpressionStatement	wrtb ( 0x07 )	1296:3:25885:25896	6612139	216	True				
ANR	6614449	CallExpression	wrtb ( 0x07 )		6612139	0					
ANR	6614450	Callee	wrtb		6612139	0					
ANR	6614451	Identifier	wrtb		6612139	0					
ANR	6614452	ArgumentList	0x07		6612139	1					
ANR	6614453	Argument	0x07		6612139	0					
ANR	6614454	PrimaryExpression	0x07		6612139	0					
ANR	6614455	BreakStatement	break ;	1297:3:25901:25906	6612139	217	True				
ANR	6614456	Label	case Z80_RLD :	1298:2:25910:25922	6612139	218	True				
ANR	6614457	Identifier	Z80_RLD		6612139	0					
ANR	6614458	ExpressionStatement	wrtb ( 0xED )	1299:3:25927:25938	6612139	219	True				
ANR	6614459	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614460	Callee	wrtb		6612139	0					
ANR	6614461	Identifier	wrtb		6612139	0					
ANR	6614462	ArgumentList	0xED		6612139	1					
ANR	6614463	Argument	0xED		6612139	0					
ANR	6614464	PrimaryExpression	0xED		6612139	0					
ANR	6614465	ExpressionStatement	wrtb ( 0x6F )	1300:3:25943:25954	6612139	220	True				
ANR	6614466	CallExpression	wrtb ( 0x6F )		6612139	0					
ANR	6614467	Callee	wrtb		6612139	0					
ANR	6614468	Identifier	wrtb		6612139	0					
ANR	6614469	ArgumentList	0x6F		6612139	1					
ANR	6614470	Argument	0x6F		6612139	0					
ANR	6614471	PrimaryExpression	0x6F		6612139	0					
ANR	6614472	BreakStatement	break ;	1301:3:25959:25964	6612139	221	True				
ANR	6614473	Label	case Z80_RR :	1302:2:25968:25979	6612139	222	True				
ANR	6614474	Identifier	Z80_RR		6612139	0					
ANR	6614475	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	223					
ANR	6614476	Condition	! ( r = rd_r_ ( & ptr ) )	1303:7:25988:26005	6612139	0	True				
ANR	6614477	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614478	UnaryOperator	!		6612139	0					
ANR	6614479	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614480	Identifier	r		6612139	0					
ANR	6614481	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614482	Callee	rd_r_		6612139	0					
ANR	6614483	Identifier	rd_r_		6612139	0					
ANR	6614484	ArgumentList	& ptr		6612139	1					
ANR	6614485	Argument	& ptr		6612139	0					
ANR	6614486	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614487	UnaryOperator	&		6612139	0					
ANR	6614488	Identifier	ptr		6612139	1					
ANR	6614489	CompoundStatement		493:27:8094:8094	6612139	1					
ANR	6614490	BreakStatement	break ;	1304:4:26014:26019	6612139	0	True				
ANR	6614491	ExpressionStatement	wrtb ( 0xCB )	1306:3:26029:26040	6612139	224	True				
ANR	6614492	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614493	Callee	wrtb		6612139	0					
ANR	6614494	Identifier	wrtb		6612139	0					
ANR	6614495	ArgumentList	0xCB		6612139	1					
ANR	6614496	Argument	0xCB		6612139	0					
ANR	6614497	PrimaryExpression	0xCB		6612139	0					
ANR	6614498	ExpressionStatement	wrtb ( 0x18 + -- r )	1307:3:26045:26062	6612139	225	True				
ANR	6614499	CallExpression	wrtb ( 0x18 + -- r )		6612139	0					
ANR	6614500	Callee	wrtb		6612139	0					
ANR	6614501	Identifier	wrtb		6612139	0					
ANR	6614502	ArgumentList	0x18 + -- r		6612139	1					
ANR	6614503	Argument	0x18 + -- r		6612139	0					
ANR	6614504	AdditiveExpression	0x18 + -- r		6612139	0		+			
ANR	6614505	PrimaryExpression	0x18		6612139	0					
ANR	6614506	UnaryExpression	-- r		6612139	1					
ANR	6614507	IncDec	--		6612139	0					
ANR	6614508	Identifier	r		6612139	1					
ANR	6614509	BreakStatement	break ;	1308:3:26067:26072	6612139	226	True				
ANR	6614510	Label	case Z80_RRA :	1309:2:26076:26088	6612139	227	True				
ANR	6614511	Identifier	Z80_RRA		6612139	0					
ANR	6614512	ExpressionStatement	wrtb ( 0x1F )	1310:3:26093:26104	6612139	228	True				
ANR	6614513	CallExpression	wrtb ( 0x1F )		6612139	0					
ANR	6614514	Callee	wrtb		6612139	0					
ANR	6614515	Identifier	wrtb		6612139	0					
ANR	6614516	ArgumentList	0x1F		6612139	1					
ANR	6614517	Argument	0x1F		6612139	0					
ANR	6614518	PrimaryExpression	0x1F		6612139	0					
ANR	6614519	BreakStatement	break ;	1311:3:26109:26114	6612139	229	True				
ANR	6614520	Label	case Z80_RRC :	1312:2:26118:26130	6612139	230	True				
ANR	6614521	Identifier	Z80_RRC		6612139	0					
ANR	6614522	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	231					
ANR	6614523	Condition	! ( r = rd_r_ ( & ptr ) )	1313:7:26139:26156	6612139	0	True				
ANR	6614524	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614525	UnaryOperator	!		6612139	0					
ANR	6614526	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614527	Identifier	r		6612139	0					
ANR	6614528	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614529	Callee	rd_r_		6612139	0					
ANR	6614530	Identifier	rd_r_		6612139	0					
ANR	6614531	ArgumentList	& ptr		6612139	1					
ANR	6614532	Argument	& ptr		6612139	0					
ANR	6614533	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614534	UnaryOperator	&		6612139	0					
ANR	6614535	Identifier	ptr		6612139	1					
ANR	6614536	CompoundStatement		503:27:8245:8245	6612139	1					
ANR	6614537	BreakStatement	break ;	1314:4:26165:26170	6612139	0	True				
ANR	6614538	ExpressionStatement	wrtb ( 0xCB )	1316:3:26180:26191	6612139	232	True				
ANR	6614539	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614540	Callee	wrtb		6612139	0					
ANR	6614541	Identifier	wrtb		6612139	0					
ANR	6614542	ArgumentList	0xCB		6612139	1					
ANR	6614543	Argument	0xCB		6612139	0					
ANR	6614544	PrimaryExpression	0xCB		6612139	0					
ANR	6614545	ExpressionStatement	wrtb ( 0x08 + -- r )	1317:3:26196:26213	6612139	233	True				
ANR	6614546	CallExpression	wrtb ( 0x08 + -- r )		6612139	0					
ANR	6614547	Callee	wrtb		6612139	0					
ANR	6614548	Identifier	wrtb		6612139	0					
ANR	6614549	ArgumentList	0x08 + -- r		6612139	1					
ANR	6614550	Argument	0x08 + -- r		6612139	0					
ANR	6614551	AdditiveExpression	0x08 + -- r		6612139	0		+			
ANR	6614552	PrimaryExpression	0x08		6612139	0					
ANR	6614553	UnaryExpression	-- r		6612139	1					
ANR	6614554	IncDec	--		6612139	0					
ANR	6614555	Identifier	r		6612139	1					
ANR	6614556	BreakStatement	break ;	1318:3:26218:26223	6612139	234	True				
ANR	6614557	Label	case Z80_RRCA :	1319:2:26227:26240	6612139	235	True				
ANR	6614558	Identifier	Z80_RRCA		6612139	0					
ANR	6614559	ExpressionStatement	wrtb ( 0x0F )	1320:3:26245:26256	6612139	236	True				
ANR	6614560	CallExpression	wrtb ( 0x0F )		6612139	0					
ANR	6614561	Callee	wrtb		6612139	0					
ANR	6614562	Identifier	wrtb		6612139	0					
ANR	6614563	ArgumentList	0x0F		6612139	1					
ANR	6614564	Argument	0x0F		6612139	0					
ANR	6614565	PrimaryExpression	0x0F		6612139	0					
ANR	6614566	BreakStatement	break ;	1321:3:26261:26266	6612139	237	True				
ANR	6614567	Label	case Z80_RRD :	1322:2:26270:26282	6612139	238	True				
ANR	6614568	Identifier	Z80_RRD		6612139	0					
ANR	6614569	ExpressionStatement	wrtb ( 0xED )	1323:3:26287:26298	6612139	239	True				
ANR	6614570	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614571	Callee	wrtb		6612139	0					
ANR	6614572	Identifier	wrtb		6612139	0					
ANR	6614573	ArgumentList	0xED		6612139	1					
ANR	6614574	Argument	0xED		6612139	0					
ANR	6614575	PrimaryExpression	0xED		6612139	0					
ANR	6614576	ExpressionStatement	wrtb ( 0x67 )	1324:3:26303:26314	6612139	240	True				
ANR	6614577	CallExpression	wrtb ( 0x67 )		6612139	0					
ANR	6614578	Callee	wrtb		6612139	0					
ANR	6614579	Identifier	wrtb		6612139	0					
ANR	6614580	ArgumentList	0x67		6612139	1					
ANR	6614581	Argument	0x67		6612139	0					
ANR	6614582	PrimaryExpression	0x67		6612139	0					
ANR	6614583	BreakStatement	break ;	1325:3:26319:26324	6612139	241	True				
ANR	6614584	Label	case Z80_RST :	1326:2:26328:26340	6612139	242	True				
ANR	6614585	Identifier	Z80_RST		6612139	0					
ANR	6614586	ExpressionStatement	"ptr = """""	1327:3:26345:26353	6612139	243	True				
ANR	6614587	AssignmentExpression	"ptr = """""		6612139	0		=			
ANR	6614588	Identifier	ptr		6612139	0					
ANR	6614589	PrimaryExpression	""""""		6612139	1					
ANR	6614590	BreakStatement	break ;	1328:3:26358:26363	6612139	244	True				
ANR	6614591	Label	case Z80_SBC :	1329:2:26367:26379	6612139	245	True				
ANR	6614592	Identifier	Z80_SBC		6612139	0					
ANR	6614593	IfStatement	if ( ! ( r = rd_a_hl ( & ptr ) ) )		6612139	246					
ANR	6614594	Condition	! ( r = rd_a_hl ( & ptr ) )	1330:7:26388:26408	6612139	0	True				
ANR	6614595	UnaryOperationExpression	! ( r = rd_a_hl ( & ptr ) )		6612139	0					
ANR	6614596	UnaryOperator	!		6612139	0					
ANR	6614597	AssignmentExpression	r = rd_a_hl ( & ptr )		6612139	1		=			
ANR	6614598	Identifier	r		6612139	0					
ANR	6614599	CallExpression	rd_a_hl ( & ptr )		6612139	1					
ANR	6614600	Callee	rd_a_hl		6612139	0					
ANR	6614601	Identifier	rd_a_hl		6612139	0					
ANR	6614602	ArgumentList	& ptr		6612139	1					
ANR	6614603	Argument	& ptr		6612139	0					
ANR	6614604	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614605	UnaryOperator	&		6612139	0					
ANR	6614606	Identifier	ptr		6612139	1					
ANR	6614607	CompoundStatement		520:30:8497:8497	6612139	1					
ANR	6614608	BreakStatement	break ;	1331:4:26417:26422	6612139	0	True				
ANR	6614609	IfStatement	if ( r == HL )		6612139	247					
ANR	6614610	Condition	r == HL	1333:7:26436:26442	6612139	0	True				
ANR	6614611	EqualityExpression	r == HL		6612139	0		==			
ANR	6614612	Identifier	r		6612139	0					
ANR	6614613	Identifier	HL		6612139	1					
ANR	6614614	CompoundStatement		523:16:8531:8531	6612139	1					
ANR	6614615	IfStatement	if ( ! ( r = rd_rr_ ( & ptr ) ) )		6612139	0					
ANR	6614616	Condition	! ( r = rd_rr_ ( & ptr ) )	1334:8:26455:26473	6612139	0	True				
ANR	6614617	UnaryOperationExpression	! ( r = rd_rr_ ( & ptr ) )		6612139	0					
ANR	6614618	UnaryOperator	!		6612139	0					
ANR	6614619	AssignmentExpression	r = rd_rr_ ( & ptr )		6612139	1		=			
ANR	6614620	Identifier	r		6612139	0					
ANR	6614621	CallExpression	rd_rr_ ( & ptr )		6612139	1					
ANR	6614622	Callee	rd_rr_		6612139	0					
ANR	6614623	Identifier	rd_rr_		6612139	0					
ANR	6614624	ArgumentList	& ptr		6612139	1					
ANR	6614625	Argument	& ptr		6612139	0					
ANR	6614626	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614627	UnaryOperator	&		6612139	0					
ANR	6614628	Identifier	ptr		6612139	1					
ANR	6614629	CompoundStatement		524:29:8562:8562	6612139	1					
ANR	6614630	BreakStatement	break ;	1335:5:26483:26488	6612139	0	True				
ANR	6614631	ExpressionStatement	wrtb ( 0xED )	1337:4:26500:26511	6612139	1	True				
ANR	6614632	CallExpression	wrtb ( 0xED )		6612139	0					
ANR	6614633	Callee	wrtb		6612139	0					
ANR	6614634	Identifier	wrtb		6612139	0					
ANR	6614635	ArgumentList	0xED		6612139	1					
ANR	6614636	Argument	0xED		6612139	0					
ANR	6614637	PrimaryExpression	0xED		6612139	0					
ANR	6614638	ExpressionStatement	wrtb ( 0x42 + 0x10 * -- r )	1338:4:26517:26541	6612139	2	True				
ANR	6614639	CallExpression	wrtb ( 0x42 + 0x10 * -- r )		6612139	0					
ANR	6614640	Callee	wrtb		6612139	0					
ANR	6614641	Identifier	wrtb		6612139	0					
ANR	6614642	ArgumentList	0x42 + 0x10 * -- r		6612139	1					
ANR	6614643	Argument	0x42 + 0x10 * -- r		6612139	0					
ANR	6614644	AdditiveExpression	0x42 + 0x10 * -- r		6612139	0		+			
ANR	6614645	PrimaryExpression	0x42		6612139	0					
ANR	6614646	MultiplicativeExpression	0x10 * -- r		6612139	1		*			
ANR	6614647	PrimaryExpression	0x10		6612139	0					
ANR	6614648	UnaryExpression	-- r		6612139	1					
ANR	6614649	IncDec	--		6612139	0					
ANR	6614650	Identifier	r		6612139	1					
ANR	6614651	BreakStatement	break ;	1339:4:26547:26552	6612139	3	True				
ANR	6614652	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	248					
ANR	6614653	Condition	! ( r = rd_r ( & ptr ) )	1341:7:26566:26583	6612139	0	True				
ANR	6614654	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6614655	UnaryOperator	!		6612139	0					
ANR	6614656	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6614657	Identifier	r		6612139	0					
ANR	6614658	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6614659	Callee	rd_r		6612139	0					
ANR	6614660	Identifier	rd_r		6612139	0					
ANR	6614661	ArgumentList	& ptr		6612139	1					
ANR	6614662	Argument	& ptr		6612139	0					
ANR	6614663	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614664	UnaryOperator	&		6612139	0					
ANR	6614665	Identifier	ptr		6612139	1					
ANR	6614666	CompoundStatement		531:27:8672:8672	6612139	1					
ANR	6614667	BreakStatement	break ;	1342:4:26592:26597	6612139	0	True				
ANR	6614668	ExpressionStatement	wrtb ( 0x98 + -- r )	1344:3:26607:26624	6612139	249	True				
ANR	6614669	CallExpression	wrtb ( 0x98 + -- r )		6612139	0					
ANR	6614670	Callee	wrtb		6612139	0					
ANR	6614671	Identifier	wrtb		6612139	0					
ANR	6614672	ArgumentList	0x98 + -- r		6612139	1					
ANR	6614673	Argument	0x98 + -- r		6612139	0					
ANR	6614674	AdditiveExpression	0x98 + -- r		6612139	0		+			
ANR	6614675	PrimaryExpression	0x98		6612139	0					
ANR	6614676	UnaryExpression	-- r		6612139	1					
ANR	6614677	IncDec	--		6612139	0					
ANR	6614678	Identifier	r		6612139	1					
ANR	6614679	BreakStatement	break ;	1345:3:26629:26634	6612139	250	True				
ANR	6614680	Label	case Z80_SCF :	1346:2:26638:26650	6612139	251	True				
ANR	6614681	Identifier	Z80_SCF		6612139	0					
ANR	6614682	ExpressionStatement	wrtb ( 0x37 )	1347:3:26655:26666	6612139	252	True				
ANR	6614683	CallExpression	wrtb ( 0x37 )		6612139	0					
ANR	6614684	Callee	wrtb		6612139	0					
ANR	6614685	Identifier	wrtb		6612139	0					
ANR	6614686	ArgumentList	0x37		6612139	1					
ANR	6614687	Argument	0x37		6612139	0					
ANR	6614688	PrimaryExpression	0x37		6612139	0					
ANR	6614689	BreakStatement	break ;	1348:3:26671:26676	6612139	253	True				
ANR	6614690	Label	case Z80_SET :	1349:2:26680:26692	6612139	254	True				
ANR	6614691	Identifier	Z80_SET		6612139	0					
ANR	6614692	IfStatement	if ( ! rd_0_7 ( & ptr ) )		6612139	255					
ANR	6614693	Condition	! rd_0_7 ( & ptr )	1350:7:26701:26714	6612139	0	True				
ANR	6614694	UnaryOperationExpression	! rd_0_7 ( & ptr )		6612139	0					
ANR	6614695	UnaryOperator	!		6612139	0					
ANR	6614696	CallExpression	rd_0_7 ( & ptr )		6612139	1					
ANR	6614697	Callee	rd_0_7		6612139	0					
ANR	6614698	Identifier	rd_0_7		6612139	0					
ANR	6614699	ArgumentList	& ptr		6612139	1					
ANR	6614700	Argument	& ptr		6612139	0					
ANR	6614701	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614702	UnaryOperator	&		6612139	0					
ANR	6614703	Identifier	ptr		6612139	1					
ANR	6614704	CompoundStatement		540:23:8803:8803	6612139	1					
ANR	6614705	BreakStatement	break ;	1351:4:26723:26728	6612139	0	True				
ANR	6614706	ExpressionStatement	rd_comma ( & ptr )	1353:3:26738:26753	6612139	256	True				
ANR	6614707	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6614708	Callee	rd_comma		6612139	0					
ANR	6614709	Identifier	rd_comma		6612139	0					
ANR	6614710	ArgumentList	& ptr		6612139	1					
ANR	6614711	Argument	& ptr		6612139	0					
ANR	6614712	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614713	UnaryOperator	&		6612139	0					
ANR	6614714	Identifier	ptr		6612139	1					
ANR	6614715	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	257					
ANR	6614716	Condition	! ( r = rd_r_ ( & ptr ) )	1354:7:26762:26779	6612139	0	True				
ANR	6614717	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614718	UnaryOperator	!		6612139	0					
ANR	6614719	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614720	Identifier	r		6612139	0					
ANR	6614721	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614722	Callee	rd_r_		6612139	0					
ANR	6614723	Identifier	rd_r_		6612139	0					
ANR	6614724	ArgumentList	& ptr		6612139	1					
ANR	6614725	Argument	& ptr		6612139	0					
ANR	6614726	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614727	UnaryOperator	&		6612139	0					
ANR	6614728	Identifier	ptr		6612139	1					
ANR	6614729	CompoundStatement		544:27:8868:8868	6612139	1					
ANR	6614730	BreakStatement	break ;	1355:4:26788:26793	6612139	0	True				
ANR	6614731	ExpressionStatement	wrtb ( 0xCB )	1357:3:26803:26814	6612139	258	True				
ANR	6614732	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614733	Callee	wrtb		6612139	0					
ANR	6614734	Identifier	wrtb		6612139	0					
ANR	6614735	ArgumentList	0xCB		6612139	1					
ANR	6614736	Argument	0xCB		6612139	0					
ANR	6614737	PrimaryExpression	0xCB		6612139	0					
ANR	6614738	ExpressionStatement	wrtb ( 0xC0 + -- r )	1358:3:26819:26836	6612139	259	True				
ANR	6614739	CallExpression	wrtb ( 0xC0 + -- r )		6612139	0					
ANR	6614740	Callee	wrtb		6612139	0					
ANR	6614741	Identifier	wrtb		6612139	0					
ANR	6614742	ArgumentList	0xC0 + -- r		6612139	1					
ANR	6614743	Argument	0xC0 + -- r		6612139	0					
ANR	6614744	AdditiveExpression	0xC0 + -- r		6612139	0		+			
ANR	6614745	PrimaryExpression	0xC0		6612139	0					
ANR	6614746	UnaryExpression	-- r		6612139	1					
ANR	6614747	IncDec	--		6612139	0					
ANR	6614748	Identifier	r		6612139	1					
ANR	6614749	BreakStatement	break ;	1359:3:26841:26846	6612139	260	True				
ANR	6614750	Label	case Z80_SLA :	1360:2:26850:26862	6612139	261	True				
ANR	6614751	Identifier	Z80_SLA		6612139	0					
ANR	6614752	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	262					
ANR	6614753	Condition	! ( r = rd_r_ ( & ptr ) )	1361:7:26871:26888	6612139	0	True				
ANR	6614754	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614755	UnaryOperator	!		6612139	0					
ANR	6614756	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614757	Identifier	r		6612139	0					
ANR	6614758	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614759	Callee	rd_r_		6612139	0					
ANR	6614760	Identifier	rd_r_		6612139	0					
ANR	6614761	ArgumentList	& ptr		6612139	1					
ANR	6614762	Argument	& ptr		6612139	0					
ANR	6614763	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614764	UnaryOperator	&		6612139	0					
ANR	6614765	Identifier	ptr		6612139	1					
ANR	6614766	CompoundStatement		551:27:8977:8977	6612139	1					
ANR	6614767	BreakStatement	break ;	1362:4:26897:26902	6612139	0	True				
ANR	6614768	ExpressionStatement	wrtb ( 0xCB )	1364:3:26912:26923	6612139	263	True				
ANR	6614769	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614770	Callee	wrtb		6612139	0					
ANR	6614771	Identifier	wrtb		6612139	0					
ANR	6614772	ArgumentList	0xCB		6612139	1					
ANR	6614773	Argument	0xCB		6612139	0					
ANR	6614774	PrimaryExpression	0xCB		6612139	0					
ANR	6614775	ExpressionStatement	wrtb ( 0x20 + -- r )	1365:3:26928:26945	6612139	264	True				
ANR	6614776	CallExpression	wrtb ( 0x20 + -- r )		6612139	0					
ANR	6614777	Callee	wrtb		6612139	0					
ANR	6614778	Identifier	wrtb		6612139	0					
ANR	6614779	ArgumentList	0x20 + -- r		6612139	1					
ANR	6614780	Argument	0x20 + -- r		6612139	0					
ANR	6614781	AdditiveExpression	0x20 + -- r		6612139	0		+			
ANR	6614782	PrimaryExpression	0x20		6612139	0					
ANR	6614783	UnaryExpression	-- r		6612139	1					
ANR	6614784	IncDec	--		6612139	0					
ANR	6614785	Identifier	r		6612139	1					
ANR	6614786	BreakStatement	break ;	1366:3:26950:26955	6612139	265	True				
ANR	6614787	Label	case Z80_SLI :	1367:2:26959:26971	6612139	266	True				
ANR	6614788	Identifier	Z80_SLI		6612139	0					
ANR	6614789	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	267					
ANR	6614790	Condition	! ( r = rd_r_ ( & ptr ) )	1368:7:26980:26997	6612139	0	True				
ANR	6614791	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614792	UnaryOperator	!		6612139	0					
ANR	6614793	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614794	Identifier	r		6612139	0					
ANR	6614795	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614796	Callee	rd_r_		6612139	0					
ANR	6614797	Identifier	rd_r_		6612139	0					
ANR	6614798	ArgumentList	& ptr		6612139	1					
ANR	6614799	Argument	& ptr		6612139	0					
ANR	6614800	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614801	UnaryOperator	&		6612139	0					
ANR	6614802	Identifier	ptr		6612139	1					
ANR	6614803	CompoundStatement		558:27:9086:9086	6612139	1					
ANR	6614804	BreakStatement	break ;	1369:4:27006:27011	6612139	0	True				
ANR	6614805	ExpressionStatement	wrtb ( 0xCB )	1371:3:27021:27032	6612139	268	True				
ANR	6614806	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614807	Callee	wrtb		6612139	0					
ANR	6614808	Identifier	wrtb		6612139	0					
ANR	6614809	ArgumentList	0xCB		6612139	1					
ANR	6614810	Argument	0xCB		6612139	0					
ANR	6614811	PrimaryExpression	0xCB		6612139	0					
ANR	6614812	ExpressionStatement	wrtb ( 0x30 + -- r )	1372:3:27037:27054	6612139	269	True				
ANR	6614813	CallExpression	wrtb ( 0x30 + -- r )		6612139	0					
ANR	6614814	Callee	wrtb		6612139	0					
ANR	6614815	Identifier	wrtb		6612139	0					
ANR	6614816	ArgumentList	0x30 + -- r		6612139	1					
ANR	6614817	Argument	0x30 + -- r		6612139	0					
ANR	6614818	AdditiveExpression	0x30 + -- r		6612139	0		+			
ANR	6614819	PrimaryExpression	0x30		6612139	0					
ANR	6614820	UnaryExpression	-- r		6612139	1					
ANR	6614821	IncDec	--		6612139	0					
ANR	6614822	Identifier	r		6612139	1					
ANR	6614823	BreakStatement	break ;	1373:3:27059:27064	6612139	270	True				
ANR	6614824	Label	case Z80_SRA :	1374:2:27068:27080	6612139	271	True				
ANR	6614825	Identifier	Z80_SRA		6612139	0					
ANR	6614826	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	272					
ANR	6614827	Condition	! ( r = rd_r_ ( & ptr ) )	1375:7:27089:27106	6612139	0	True				
ANR	6614828	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614829	UnaryOperator	!		6612139	0					
ANR	6614830	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614831	Identifier	r		6612139	0					
ANR	6614832	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614833	Callee	rd_r_		6612139	0					
ANR	6614834	Identifier	rd_r_		6612139	0					
ANR	6614835	ArgumentList	& ptr		6612139	1					
ANR	6614836	Argument	& ptr		6612139	0					
ANR	6614837	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614838	UnaryOperator	&		6612139	0					
ANR	6614839	Identifier	ptr		6612139	1					
ANR	6614840	CompoundStatement		565:27:9195:9195	6612139	1					
ANR	6614841	BreakStatement	break ;	1376:4:27115:27120	6612139	0	True				
ANR	6614842	ExpressionStatement	wrtb ( 0xCB )	1378:3:27130:27141	6612139	273	True				
ANR	6614843	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614844	Callee	wrtb		6612139	0					
ANR	6614845	Identifier	wrtb		6612139	0					
ANR	6614846	ArgumentList	0xCB		6612139	1					
ANR	6614847	Argument	0xCB		6612139	0					
ANR	6614848	PrimaryExpression	0xCB		6612139	0					
ANR	6614849	ExpressionStatement	wrtb ( 0x28 + -- r )	1379:3:27146:27163	6612139	274	True				
ANR	6614850	CallExpression	wrtb ( 0x28 + -- r )		6612139	0					
ANR	6614851	Callee	wrtb		6612139	0					
ANR	6614852	Identifier	wrtb		6612139	0					
ANR	6614853	ArgumentList	0x28 + -- r		6612139	1					
ANR	6614854	Argument	0x28 + -- r		6612139	0					
ANR	6614855	AdditiveExpression	0x28 + -- r		6612139	0		+			
ANR	6614856	PrimaryExpression	0x28		6612139	0					
ANR	6614857	UnaryExpression	-- r		6612139	1					
ANR	6614858	IncDec	--		6612139	0					
ANR	6614859	Identifier	r		6612139	1					
ANR	6614860	BreakStatement	break ;	1380:3:27168:27173	6612139	275	True				
ANR	6614861	Label	case Z80_SRL :	1381:2:27177:27189	6612139	276	True				
ANR	6614862	Identifier	Z80_SRL		6612139	0					
ANR	6614863	IfStatement	if ( ! ( r = rd_r_ ( & ptr ) ) )		6612139	277					
ANR	6614864	Condition	! ( r = rd_r_ ( & ptr ) )	1382:7:27198:27215	6612139	0	True				
ANR	6614865	UnaryOperationExpression	! ( r = rd_r_ ( & ptr ) )		6612139	0					
ANR	6614866	UnaryOperator	!		6612139	0					
ANR	6614867	AssignmentExpression	r = rd_r_ ( & ptr )		6612139	1		=			
ANR	6614868	Identifier	r		6612139	0					
ANR	6614869	CallExpression	rd_r_ ( & ptr )		6612139	1					
ANR	6614870	Callee	rd_r_		6612139	0					
ANR	6614871	Identifier	rd_r_		6612139	0					
ANR	6614872	ArgumentList	& ptr		6612139	1					
ANR	6614873	Argument	& ptr		6612139	0					
ANR	6614874	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614875	UnaryOperator	&		6612139	0					
ANR	6614876	Identifier	ptr		6612139	1					
ANR	6614877	CompoundStatement		572:27:9304:9304	6612139	1					
ANR	6614878	BreakStatement	break ;	1383:4:27224:27229	6612139	0	True				
ANR	6614879	ExpressionStatement	wrtb ( 0xCB )	1385:3:27239:27250	6612139	278	True				
ANR	6614880	CallExpression	wrtb ( 0xCB )		6612139	0					
ANR	6614881	Callee	wrtb		6612139	0					
ANR	6614882	Identifier	wrtb		6612139	0					
ANR	6614883	ArgumentList	0xCB		6612139	1					
ANR	6614884	Argument	0xCB		6612139	0					
ANR	6614885	PrimaryExpression	0xCB		6612139	0					
ANR	6614886	ExpressionStatement	wrtb ( 0x38 + -- r )	1386:3:27255:27272	6612139	279	True				
ANR	6614887	CallExpression	wrtb ( 0x38 + -- r )		6612139	0					
ANR	6614888	Callee	wrtb		6612139	0					
ANR	6614889	Identifier	wrtb		6612139	0					
ANR	6614890	ArgumentList	0x38 + -- r		6612139	1					
ANR	6614891	Argument	0x38 + -- r		6612139	0					
ANR	6614892	AdditiveExpression	0x38 + -- r		6612139	0		+			
ANR	6614893	PrimaryExpression	0x38		6612139	0					
ANR	6614894	UnaryExpression	-- r		6612139	1					
ANR	6614895	IncDec	--		6612139	0					
ANR	6614896	Identifier	r		6612139	1					
ANR	6614897	BreakStatement	break ;	1387:3:27277:27282	6612139	280	True				
ANR	6614898	Label	case Z80_SUB :	1388:2:27286:27298	6612139	281	True				
ANR	6614899	Identifier	Z80_SUB		6612139	0					
ANR	6614900	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	282					
ANR	6614901	Condition	! ( r = rd_r ( & ptr ) )	1389:7:27307:27324	6612139	0	True				
ANR	6614902	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6614903	UnaryOperator	!		6612139	0					
ANR	6614904	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6614905	Identifier	r		6612139	0					
ANR	6614906	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6614907	Callee	rd_r		6612139	0					
ANR	6614908	Identifier	rd_r		6612139	0					
ANR	6614909	ArgumentList	& ptr		6612139	1					
ANR	6614910	Argument	& ptr		6612139	0					
ANR	6614911	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614912	UnaryOperator	&		6612139	0					
ANR	6614913	Identifier	ptr		6612139	1					
ANR	6614914	CompoundStatement		579:27:9413:9413	6612139	1					
ANR	6614915	BreakStatement	break ;	1390:4:27333:27338	6612139	0	True				
ANR	6614916	IfStatement	if ( has_argument ( & ptr ) )		6612139	283					
ANR	6614917	Condition	has_argument ( & ptr )	1392:7:27352:27370	6612139	0	True				
ANR	6614918	CallExpression	has_argument ( & ptr )		6612139	0					
ANR	6614919	Callee	has_argument		6612139	0					
ANR	6614920	Identifier	has_argument		6612139	0					
ANR	6614921	ArgumentList	& ptr		6612139	1					
ANR	6614922	Argument	& ptr		6612139	0					
ANR	6614923	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614924	UnaryOperator	&		6612139	0					
ANR	6614925	Identifier	ptr		6612139	1					
ANR	6614926	CompoundStatement		582:28:9459:9459	6612139	1					
ANR	6614927	IfStatement	if ( r != A )		6612139	0					
ANR	6614928	Condition	r != A	1393:8:27401:27406	6612139	0	True				
ANR	6614929	EqualityExpression	r != A		6612139	0		!=			
ANR	6614930	Identifier	r		6612139	0					
ANR	6614931	Identifier	A		6612139	1					
ANR	6614932	CompoundStatement		583:16:9495:9495	6612139	1					
ANR	6614933	ExpressionStatement	"eprintf ( ""parse error before: %s\\n"" , ptr )"	1394:5:27416:27457	6612139	0	True				
ANR	6614934	CallExpression	"eprintf ( ""parse error before: %s\\n"" , ptr )"		6612139	0					
ANR	6614935	Callee	eprintf		6612139	0					
ANR	6614936	Identifier	eprintf		6612139	0					
ANR	6614937	ArgumentList	"""parse error before: %s\\n"""		6612139	1					
ANR	6614938	Argument	"""parse error before: %s\\n"""		6612139	0					
ANR	6614939	PrimaryExpression	"""parse error before: %s\\n"""		6612139	0					
ANR	6614940	Argument	ptr		6612139	1					
ANR	6614941	Identifier	ptr		6612139	0					
ANR	6614942	BreakStatement	break ;	1395:5:27464:27469	6612139	1	True				
ANR	6614943	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	1					
ANR	6614944	Condition	! ( r = rd_r ( & ptr ) )	1397:8:27485:27502	6612139	0	True				
ANR	6614945	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6614946	UnaryOperator	!		6612139	0					
ANR	6614947	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6614948	Identifier	r		6612139	0					
ANR	6614949	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6614950	Callee	rd_r		6612139	0					
ANR	6614951	Identifier	rd_r		6612139	0					
ANR	6614952	ArgumentList	& ptr		6612139	1					
ANR	6614953	Argument	& ptr		6612139	0					
ANR	6614954	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614955	UnaryOperator	&		6612139	0					
ANR	6614956	Identifier	ptr		6612139	1					
ANR	6614957	CompoundStatement		587:28:9591:9591	6612139	1					
ANR	6614958	BreakStatement	break ;	1398:5:27512:27517	6612139	0	True				
ANR	6614959	ExpressionStatement	wrtb ( 0x90 + -- r )	1401:3:27533:27550	6612139	284	True				
ANR	6614960	CallExpression	wrtb ( 0x90 + -- r )		6612139	0					
ANR	6614961	Callee	wrtb		6612139	0					
ANR	6614962	Identifier	wrtb		6612139	0					
ANR	6614963	ArgumentList	0x90 + -- r		6612139	1					
ANR	6614964	Argument	0x90 + -- r		6612139	0					
ANR	6614965	AdditiveExpression	0x90 + -- r		6612139	0		+			
ANR	6614966	PrimaryExpression	0x90		6612139	0					
ANR	6614967	UnaryExpression	-- r		6612139	1					
ANR	6614968	IncDec	--		6612139	0					
ANR	6614969	Identifier	r		6612139	1					
ANR	6614970	BreakStatement	break ;	1402:3:27555:27560	6612139	285	True				
ANR	6614971	Label	case Z80_XOR :	1403:2:27564:27576	6612139	286	True				
ANR	6614972	Identifier	Z80_XOR		6612139	0					
ANR	6614973	IfStatement	if ( ! ( r = rd_r ( & ptr ) ) )		6612139	287					
ANR	6614974	Condition	! ( r = rd_r ( & ptr ) )	1404:7:27585:27602	6612139	0	True				
ANR	6614975	UnaryOperationExpression	! ( r = rd_r ( & ptr ) )		6612139	0					
ANR	6614976	UnaryOperator	!		6612139	0					
ANR	6614977	AssignmentExpression	r = rd_r ( & ptr )		6612139	1		=			
ANR	6614978	Identifier	r		6612139	0					
ANR	6614979	CallExpression	rd_r ( & ptr )		6612139	1					
ANR	6614980	Callee	rd_r		6612139	0					
ANR	6614981	Identifier	rd_r		6612139	0					
ANR	6614982	ArgumentList	& ptr		6612139	1					
ANR	6614983	Argument	& ptr		6612139	0					
ANR	6614984	UnaryOperationExpression	& ptr		6612139	0					
ANR	6614985	UnaryOperator	&		6612139	0					
ANR	6614986	Identifier	ptr		6612139	1					
ANR	6614987	CompoundStatement		594:27:9691:9691	6612139	1					
ANR	6614988	BreakStatement	break ;	1405:4:27611:27616	6612139	0	True				
ANR	6614989	ExpressionStatement	wrtb ( 0xA8 + -- r )	1407:3:27626:27643	6612139	288	True				
ANR	6614990	CallExpression	wrtb ( 0xA8 + -- r )		6612139	0					
ANR	6614991	Callee	wrtb		6612139	0					
ANR	6614992	Identifier	wrtb		6612139	0					
ANR	6614993	ArgumentList	0xA8 + -- r		6612139	1					
ANR	6614994	Argument	0xA8 + -- r		6612139	0					
ANR	6614995	AdditiveExpression	0xA8 + -- r		6612139	0		+			
ANR	6614996	PrimaryExpression	0xA8		6612139	0					
ANR	6614997	UnaryExpression	-- r		6612139	1					
ANR	6614998	IncDec	--		6612139	0					
ANR	6614999	Identifier	r		6612139	1					
ANR	6615000	BreakStatement	break ;	1408:3:27648:27653	6612139	289	True				
ANR	6615001	Label	case Z80_DEFB :	1409:2:27657:27670	6612139	290	True				
ANR	6615002	Identifier	Z80_DEFB		6612139	0					
ANR	6615003	Label	case Z80_DB :	1410:2:27674:27685	6612139	291	True				
ANR	6615004	Identifier	Z80_DB		6612139	0					
ANR	6615005	Label	case Z80_DEFM :	1411:2:27689:27702	6612139	292	True				
ANR	6615006	Identifier	Z80_DEFM		6612139	0					
ANR	6615007	Label	case Z80_DM :	1412:2:27706:27717	6612139	293	True				
ANR	6615008	Identifier	Z80_DM		6612139	0					
ANR	6615009	ExpressionStatement	ptr = delspc ( ptr )	1413:3:27722:27740	6612139	294	True				
ANR	6615010	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6615011	Identifier	ptr		6612139	0					
ANR	6615012	CallExpression	delspc ( ptr )		6612139	1					
ANR	6615013	Callee	delspc		6612139	0					
ANR	6615014	Identifier	delspc		6612139	0					
ANR	6615015	ArgumentList	ptr		6612139	1					
ANR	6615016	Argument	ptr		6612139	0					
ANR	6615017	Identifier	ptr		6612139	0					
ANR	6615018	WhileStatement	while ( 1 )		6612139	295					
ANR	6615019	Condition	1	1414:10:27752:27752	6612139	0	True				
ANR	6615020	PrimaryExpression	1		6612139	0					
ANR	6615021	CompoundStatement		604:13:9841:9841	6612139	1					
ANR	6615022	ExpressionStatement	"have_quote = ( * ptr == '""' || * ptr == '\\'' )"	1415:4:27761:27803	6612139	0	True				
ANR	6615023	AssignmentExpression	"have_quote = ( * ptr == '""' || * ptr == '\\'' )"		6612139	0		=			
ANR	6615024	Identifier	have_quote		6612139	0					
ANR	6615025	OrExpression	"* ptr == '""' || * ptr == '\\''"		6612139	1		||			
ANR	6615026	EqualityExpression	"* ptr == '""'"		6612139	0		==			
ANR	6615027	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615028	UnaryOperator	*		6612139	0					
ANR	6615029	Identifier	ptr		6612139	1					
ANR	6615030	PrimaryExpression	"'""'"		6612139	1					
ANR	6615031	EqualityExpression	* ptr == '\\''		6612139	1		==			
ANR	6615032	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615033	UnaryOperator	*		6612139	0					
ANR	6615034	Identifier	ptr		6612139	1					
ANR	6615035	PrimaryExpression	'\\''		6612139	1					
ANR	6615036	IfStatement	if ( have_quote )		6612139	1					
ANR	6615037	Condition	have_quote	1416:8:27813:27822	6612139	0	True				
ANR	6615038	Identifier	have_quote		6612139	0					
ANR	6615039	CompoundStatement		608:5:9943:9959	6612139	1					
ANR	6615040	IdentifierDeclStatement	int quote = * ptr ;	1418:5:27857:27873	6612139	0	True				
ANR	6615041	IdentifierDecl	quote = * ptr		6612139	0					
ANR	6615042	IdentifierDeclType	int		6612139	0					
ANR	6615043	Identifier	quote		6612139	1					
ANR	6615044	AssignmentExpression	quote = * ptr		6612139	2		=			
ANR	6615045	Identifier	quote		6612139	0					
ANR	6615046	UnaryOperationExpression	* ptr		6612139	1					
ANR	6615047	UnaryOperator	*		6612139	0					
ANR	6615048	Identifier	ptr		6612139	1					
ANR	6615049	ExpressionStatement	++ ptr	1419:5:27880:27885	6612139	1	True				
ANR	6615050	UnaryExpression	++ ptr		6612139	0					
ANR	6615051	IncDec	++		6612139	0					
ANR	6615052	Identifier	ptr		6612139	1					
ANR	6615053	WhileStatement	while ( * ptr != quote )		6612139	2					
ANR	6615054	Condition	* ptr != quote	1420:12:27899:27911	6612139	0	True				
ANR	6615055	EqualityExpression	* ptr != quote		6612139	0		!=			
ANR	6615056	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615057	UnaryOperator	*		6612139	0					
ANR	6615058	Identifier	ptr		6612139	1					
ANR	6615059	Identifier	quote		6612139	1					
ANR	6615060	CompoundStatement		610:27:10000:10000	6612139	1					
ANR	6615061	ExpressionStatement	"write_one_byte ( rd_character ( & ptr , NULL , 1 ) , 0 )"	1421:6:27922:27970	6612139	0	True				
ANR	6615062	CallExpression	"write_one_byte ( rd_character ( & ptr , NULL , 1 ) , 0 )"		6612139	0					
ANR	6615063	Callee	write_one_byte		6612139	0					
ANR	6615064	Identifier	write_one_byte		6612139	0					
ANR	6615065	ArgumentList	"rd_character ( & ptr , NULL , 1 )"		6612139	1					
ANR	6615066	Argument	"rd_character ( & ptr , NULL , 1 )"		6612139	0					
ANR	6615067	CallExpression	"rd_character ( & ptr , NULL , 1 )"		6612139	0					
ANR	6615068	Callee	rd_character		6612139	0					
ANR	6615069	Identifier	rd_character		6612139	0					
ANR	6615070	ArgumentList	& ptr		6612139	1					
ANR	6615071	Argument	& ptr		6612139	0					
ANR	6615072	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615073	UnaryOperator	&		6612139	0					
ANR	6615074	Identifier	ptr		6612139	1					
ANR	6615075	Argument	NULL		6612139	1					
ANR	6615076	Identifier	NULL		6612139	0					
ANR	6615077	Argument	1		6612139	2					
ANR	6615078	PrimaryExpression	1		6612139	0					
ANR	6615079	Argument	0		6612139	1					
ANR	6615080	PrimaryExpression	0		6612139	0					
ANR	6615081	IfStatement	if ( * ptr == 0 )		6612139	1					
ANR	6615082	Condition	* ptr == 0	1422:10:27982:27990	6612139	0	True				
ANR	6615083	EqualityExpression	* ptr == 0		6612139	0		==			
ANR	6615084	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615085	UnaryOperator	*		6612139	0					
ANR	6615086	Identifier	ptr		6612139	1					
ANR	6615087	PrimaryExpression	0		6612139	1					
ANR	6615088	CompoundStatement		612:21:10079:10079	6612139	1					
ANR	6615089	ExpressionStatement	"eprintf ( ""end of line in quoted string\\n"" )"	1423:7:28002:28044	6612139	0	True				
ANR	6615090	CallExpression	"eprintf ( ""end of line in quoted string\\n"" )"		6612139	0					
ANR	6615091	Callee	eprintf		6612139	0					
ANR	6615092	Identifier	eprintf		6612139	0					
ANR	6615093	ArgumentList	"""end of line in quoted string\\n"""		6612139	1					
ANR	6615094	Argument	"""end of line in quoted string\\n"""		6612139	0					
ANR	6615095	PrimaryExpression	"""end of line in quoted string\\n"""		6612139	0					
ANR	6615096	BreakStatement	break ;	1424:7:28053:28058	6612139	1	True				
ANR	6615097	ExpressionStatement	++ ptr	1427:5:28080:28085	6612139	3	True				
ANR	6615098	UnaryExpression	++ ptr		6612139	0					
ANR	6615099	IncDec	++		6612139	0					
ANR	6615100	Identifier	ptr		6612139	1					
ANR	6615101	ElseStatement	else		6612139	0					
ANR	6615102	CompoundStatement		618:11:10184:10184	6612139	0					
ANR	6615103	ExpressionStatement	"skipword ( & ptr , ',' )"	1430:5:28134:28154	6612139	0	True				
ANR	6615104	CallExpression	"skipword ( & ptr , ',' )"		6612139	0					
ANR	6615105	Callee	skipword		6612139	0					
ANR	6615106	Identifier	skipword		6612139	0					
ANR	6615107	ArgumentList	& ptr		6612139	1					
ANR	6615108	Argument	& ptr		6612139	0					
ANR	6615109	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615110	UnaryOperator	&		6612139	0					
ANR	6615111	Identifier	ptr		6612139	1					
ANR	6615112	Argument	"','"		6612139	1					
ANR	6615113	PrimaryExpression	"','"		6612139	0					
ANR	6615114	ExpressionStatement	ptr = delspc ( ptr )	1432:4:28166:28184	6612139	2	True				
ANR	6615115	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6615116	Identifier	ptr		6612139	0					
ANR	6615117	CallExpression	delspc ( ptr )		6612139	1					
ANR	6615118	Callee	delspc		6612139	0					
ANR	6615119	Identifier	delspc		6612139	0					
ANR	6615120	ArgumentList	ptr		6612139	1					
ANR	6615121	Argument	ptr		6612139	0					
ANR	6615122	Identifier	ptr		6612139	0					
ANR	6615123	IfStatement	"if ( * ptr == ',' )"		6612139	3					
ANR	6615124	Condition	"* ptr == ','"	1433:8:28194:28204	6612139	0	True				
ANR	6615125	EqualityExpression	"* ptr == ','"		6612139	0		==			
ANR	6615126	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615127	UnaryOperator	*		6612139	0					
ANR	6615128	Identifier	ptr		6612139	1					
ANR	6615129	PrimaryExpression	"','"		6612139	1					
ANR	6615130	CompoundStatement		623:21:10293:10293	6612139	1					
ANR	6615131	ExpressionStatement	++ ptr	1434:5:28214:28219	6612139	0	True				
ANR	6615132	UnaryExpression	++ ptr		6612139	0					
ANR	6615133	IncDec	++		6612139	0					
ANR	6615134	Identifier	ptr		6612139	1					
ANR	6615135	ContinueStatement	continue ;	1435:5:28226:28234	6612139	1	True				
ANR	6615136	IfStatement	if ( * ptr != 0 )		6612139	4					
ANR	6615137	Condition	* ptr != 0	1437:8:28250:28258	6612139	0	True				
ANR	6615138	EqualityExpression	* ptr != 0		6612139	0		!=			
ANR	6615139	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615140	UnaryOperator	*		6612139	0					
ANR	6615141	Identifier	ptr		6612139	1					
ANR	6615142	PrimaryExpression	0		6612139	1					
ANR	6615143	CompoundStatement		627:19:10347:10347	6612139	1					
ANR	6615144	ExpressionStatement	"eprintf ( ""junk in byte definition: %s\\n"" , ptr )"	1438:5:28268:28314	6612139	0	True				
ANR	6615145	CallExpression	"eprintf ( ""junk in byte definition: %s\\n"" , ptr )"		6612139	0					
ANR	6615146	Callee	eprintf		6612139	0					
ANR	6615147	Identifier	eprintf		6612139	0					
ANR	6615148	ArgumentList	"""junk in byte definition: %s\\n"""		6612139	1					
ANR	6615149	Argument	"""junk in byte definition: %s\\n"""		6612139	0					
ANR	6615150	PrimaryExpression	"""junk in byte definition: %s\\n"""		6612139	0					
ANR	6615151	Argument	ptr		6612139	1					
ANR	6615152	Identifier	ptr		6612139	0					
ANR	6615153	BreakStatement	break ;	1440:4:28326:28331	6612139	5	True				
ANR	6615154	BreakStatement	break ;	1442:3:28341:28346	6612139	296	True				
ANR	6615155	Label	case Z80_DEFW :	1443:2:28350:28363	6612139	297	True				
ANR	6615156	Identifier	Z80_DEFW		6612139	0					
ANR	6615157	Label	case Z80_DW :	1444:2:28367:28378	6612139	298	True				
ANR	6615158	Identifier	Z80_DW		6612139	0					
ANR	6615159	IfStatement	"if ( ! ( r = rd_word ( & ptr , ',' ) ) )"		6612139	299					
ANR	6615160	Condition	"! ( r = rd_word ( & ptr , ',' ) )"	1445:7:28387:28412	6612139	0	True				
ANR	6615161	UnaryOperationExpression	"! ( r = rd_word ( & ptr , ',' ) )"		6612139	0					
ANR	6615162	UnaryOperator	!		6612139	0					
ANR	6615163	AssignmentExpression	"r = rd_word ( & ptr , ',' )"		6612139	1		=			
ANR	6615164	Identifier	r		6612139	0					
ANR	6615165	CallExpression	"rd_word ( & ptr , ',' )"		6612139	1					
ANR	6615166	Callee	rd_word		6612139	0					
ANR	6615167	Identifier	rd_word		6612139	0					
ANR	6615168	ArgumentList	& ptr		6612139	1					
ANR	6615169	Argument	& ptr		6612139	0					
ANR	6615170	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615171	UnaryOperator	&		6612139	0					
ANR	6615172	Identifier	ptr		6612139	1					
ANR	6615173	Argument	"','"		6612139	1					
ANR	6615174	PrimaryExpression	"','"		6612139	0					
ANR	6615175	CompoundStatement		635:35:10501:10501	6612139	1					
ANR	6615176	ExpressionStatement	"eprintf ( ""No data for word definition\\n"" )"	1446:4:28421:28462	6612139	0	True				
ANR	6615177	CallExpression	"eprintf ( ""No data for word definition\\n"" )"		6612139	0					
ANR	6615178	Callee	eprintf		6612139	0					
ANR	6615179	Identifier	eprintf		6612139	0					
ANR	6615180	ArgumentList	"""No data for word definition\\n"""		6612139	1					
ANR	6615181	Argument	"""No data for word definition\\n"""		6612139	0					
ANR	6615182	PrimaryExpression	"""No data for word definition\\n"""		6612139	0					
ANR	6615183	BreakStatement	break ;	1447:4:28468:28473	6612139	1	True				
ANR	6615184	WhileStatement	while ( 1 )		6612139	300					
ANR	6615185	Condition	1	1449:10:28490:28490	6612139	0	True				
ANR	6615186	PrimaryExpression	1		6612139	0					
ANR	6615187	CompoundStatement		639:13:10579:10579	6612139	1					
ANR	6615188	ExpressionStatement	ptr = delspc ( ptr )	1450:4:28499:28517	6612139	0	True				
ANR	6615189	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6615190	Identifier	ptr		6612139	0					
ANR	6615191	CallExpression	delspc ( ptr )		6612139	1					
ANR	6615192	Callee	delspc		6612139	0					
ANR	6615193	Identifier	delspc		6612139	0					
ANR	6615194	ArgumentList	ptr		6612139	1					
ANR	6615195	Argument	ptr		6612139	0					
ANR	6615196	Identifier	ptr		6612139	0					
ANR	6615197	IfStatement	"if ( * ptr != ',' )"		6612139	1					
ANR	6615198	Condition	"* ptr != ','"	1451:8:28527:28537	6612139	0	True				
ANR	6615199	EqualityExpression	"* ptr != ','"		6612139	0		!=			
ANR	6615200	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615201	UnaryOperator	*		6612139	0					
ANR	6615202	Identifier	ptr		6612139	1					
ANR	6615203	PrimaryExpression	"','"		6612139	1					
ANR	6615204	CompoundStatement		641:21:10626:10626	6612139	1					
ANR	6615205	BreakStatement	break ;	1452:5:28547:28552	6612139	0	True				
ANR	6615206	ExpressionStatement	++ ptr	1454:4:28564:28569	6612139	2	True				
ANR	6615207	UnaryExpression	++ ptr		6612139	0					
ANR	6615208	IncDec	++		6612139	0					
ANR	6615209	Identifier	ptr		6612139	1					
ANR	6615210	IfStatement	"if ( ! ( r = rd_word ( & ptr , ',' ) ) )"		6612139	3					
ANR	6615211	Condition	"! ( r = rd_word ( & ptr , ',' ) )"	1455:8:28579:28604	6612139	0	True				
ANR	6615212	UnaryOperationExpression	"! ( r = rd_word ( & ptr , ',' ) )"		6612139	0					
ANR	6615213	UnaryOperator	!		6612139	0					
ANR	6615214	AssignmentExpression	"r = rd_word ( & ptr , ',' )"		6612139	1		=			
ANR	6615215	Identifier	r		6612139	0					
ANR	6615216	CallExpression	"rd_word ( & ptr , ',' )"		6612139	1					
ANR	6615217	Callee	rd_word		6612139	0					
ANR	6615218	Identifier	rd_word		6612139	0					
ANR	6615219	ArgumentList	& ptr		6612139	1					
ANR	6615220	Argument	& ptr		6612139	0					
ANR	6615221	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615222	UnaryOperator	&		6612139	0					
ANR	6615223	Identifier	ptr		6612139	1					
ANR	6615224	Argument	"','"		6612139	1					
ANR	6615225	PrimaryExpression	"','"		6612139	0					
ANR	6615226	CompoundStatement		645:36:10693:10693	6612139	1					
ANR	6615227	ExpressionStatement	"eprintf ( ""Missing expression in defw\\n"" )"	1456:5:28614:28654	6612139	0	True				
ANR	6615228	CallExpression	"eprintf ( ""Missing expression in defw\\n"" )"		6612139	0					
ANR	6615229	Callee	eprintf		6612139	0					
ANR	6615230	Identifier	eprintf		6612139	0					
ANR	6615231	ArgumentList	"""Missing expression in defw\\n"""		6612139	1					
ANR	6615232	Argument	"""Missing expression in defw\\n"""		6612139	0					
ANR	6615233	PrimaryExpression	"""Missing expression in defw\\n"""		6612139	0					
ANR	6615234	BreakStatement	break ;	1459:3:28670:28675	6612139	301	True				
ANR	6615235	Label	case Z80_DEFS :	1460:2:28679:28692	6612139	302	True				
ANR	6615236	Identifier	Z80_DEFS		6612139	0					
ANR	6615237	Label	case Z80_DS :	1461:2:28696:28707	6612139	303	True				
ANR	6615238	Identifier	Z80_DS		6612139	0					
ANR	6615239	ExpressionStatement	"r = rd_expr ( & ptr , ',' , NULL , sp , 1 )"	1462:3:28712:28748	6612139	304	True				
ANR	6615240	AssignmentExpression	"r = rd_expr ( & ptr , ',' , NULL , sp , 1 )"		6612139	0		=			
ANR	6615241	Identifier	r		6612139	0					
ANR	6615242	CallExpression	"rd_expr ( & ptr , ',' , NULL , sp , 1 )"		6612139	1					
ANR	6615243	Callee	rd_expr		6612139	0					
ANR	6615244	Identifier	rd_expr		6612139	0					
ANR	6615245	ArgumentList	& ptr		6612139	1					
ANR	6615246	Argument	& ptr		6612139	0					
ANR	6615247	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615248	UnaryOperator	&		6612139	0					
ANR	6615249	Identifier	ptr		6612139	1					
ANR	6615250	Argument	"','"		6612139	1					
ANR	6615251	PrimaryExpression	"','"		6612139	0					
ANR	6615252	Argument	NULL		6612139	2					
ANR	6615253	Identifier	NULL		6612139	0					
ANR	6615254	Argument	sp		6612139	3					
ANR	6615255	Identifier	sp		6612139	0					
ANR	6615256	Argument	1		6612139	4					
ANR	6615257	PrimaryExpression	1		6612139	0					
ANR	6615258	IfStatement	if ( r < 0 )		6612139	305					
ANR	6615259	Condition	r < 0	1463:7:28757:28761	6612139	0	True				
ANR	6615260	RelationalExpression	r < 0		6612139	0		<			
ANR	6615261	Identifier	r		6612139	0					
ANR	6615262	PrimaryExpression	0		6612139	1					
ANR	6615263	CompoundStatement		653:14:10850:10850	6612139	1					
ANR	6615264	Statement	eprintf	1464:4:28770:28776	6612139	0	True				
ANR	6615265	Statement	(	1464:12:28778:28778	6612139	1	True				
ANR	6615266	Statement	"""ds should have its first argument >=0"""	1464:13:28779:28817	6612139	2	True				
ANR	6615267	Statement	""" (not -0x%x)\\n"""	1465:5:28824:28839	6612139	3	True				
ANR	6615268	Statement	","	1465:21:28840:28840	6612139	4	True				
ANR	6615269	Statement	-	1465:23:28842:28842	6612139	5	True				
ANR	6615270	Statement	r	1465:24:28843:28843	6612139	6	True				
ANR	6615271	Statement	)	1465:25:28844:28844	6612139	7	True				
ANR	6615272	ExpressionStatement		1465:26:28845:28845	6612139	8	True				
ANR	6615273	BreakStatement	break ;	1466:4:28851:28856	6612139	9	True				
ANR	6615274	ExpressionStatement	ptr = delspc ( ptr )	1468:3:28866:28884	6612139	306	True				
ANR	6615275	AssignmentExpression	ptr = delspc ( ptr )		6612139	0		=			
ANR	6615276	Identifier	ptr		6612139	0					
ANR	6615277	CallExpression	delspc ( ptr )		6612139	1					
ANR	6615278	Callee	delspc		6612139	0					
ANR	6615279	Identifier	delspc		6612139	0					
ANR	6615280	ArgumentList	ptr		6612139	1					
ANR	6615281	Argument	ptr		6612139	0					
ANR	6615282	Identifier	ptr		6612139	0					
ANR	6615283	IfStatement	if ( * ptr )		6612139	307					
ANR	6615284	Condition	* ptr	1469:7:28893:28896	6612139	0	True				
ANR	6615285	UnaryOperationExpression	* ptr		6612139	0					
ANR	6615286	UnaryOperator	*		6612139	0					
ANR	6615287	Identifier	ptr		6612139	1					
ANR	6615288	CompoundStatement		659:13:10985:10985	6612139	1					
ANR	6615289	ExpressionStatement	rd_comma ( & ptr )	1470:4:28905:28920	6612139	0	True				
ANR	6615290	CallExpression	rd_comma ( & ptr )		6612139	0					
ANR	6615291	Callee	rd_comma		6612139	0					
ANR	6615292	Identifier	rd_comma		6612139	0					
ANR	6615293	ArgumentList	& ptr		6612139	1					
ANR	6615294	Argument	& ptr		6612139	0					
ANR	6615295	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615296	UnaryOperator	&		6612139	0					
ANR	6615297	Identifier	ptr		6612139	1					
ANR	6615298	ExpressionStatement	readbyte = 0	1471:4:28926:28938	6612139	1	True				
ANR	6615299	AssignmentExpression	readbyte = 0		6612139	0		=			
ANR	6615300	Identifier	readbyte		6612139	0					
ANR	6615301	PrimaryExpression	0		6612139	1					
ANR	6615302	ExpressionStatement	"rd_byte ( & ptr , '\\0' )"	1472:4:28944:28964	6612139	2	True				
ANR	6615303	CallExpression	"rd_byte ( & ptr , '\\0' )"		6612139	0					
ANR	6615304	Callee	rd_byte		6612139	0					
ANR	6615305	Identifier	rd_byte		6612139	0					
ANR	6615306	ArgumentList	& ptr		6612139	1					
ANR	6615307	Argument	& ptr		6612139	0					
ANR	6615308	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615309	UnaryOperator	&		6612139	0					
ANR	6615310	Identifier	ptr		6612139	1					
ANR	6615311	Argument	'\\0'		6612139	1					
ANR	6615312	PrimaryExpression	'\\0'		6612139	0					
ANR	6615313	ExpressionStatement	writebyte = 0	1473:4:28970:28983	6612139	3	True				
ANR	6615314	AssignmentExpression	writebyte = 0		6612139	0		=			
ANR	6615315	Identifier	writebyte		6612139	0					
ANR	6615316	PrimaryExpression	0		6612139	1					
ANR	6615317	BreakStatement	break ;	1474:4:28989:28994	6612139	4	True				
ANR	6615318	ForStatement	for ( i = 0 ; i < r ; i ++ )		6612139	308					
ANR	6615319	ForInit	i = 0 ;	1476:8:29009:29014	6612139	0	True				
ANR	6615320	AssignmentExpression	i = 0		6612139	0		=			
ANR	6615321	Identifier	i		6612139	0					
ANR	6615322	PrimaryExpression	0		6612139	1					
ANR	6615323	Condition	i < r	1476:15:29016:29020	6612139	1	True				
ANR	6615324	RelationalExpression	i < r		6612139	0		<			
ANR	6615325	Identifier	i		6612139	0					
ANR	6615326	Identifier	r		6612139	1					
ANR	6615327	PostIncDecOperationExpression	i ++	1476:22:29023:29025	6612139	2	True				
ANR	6615328	Identifier	i		6612139	0					
ANR	6615329	IncDec	++		6612139	1					
ANR	6615330	CompoundStatement		666:27:11114:11114	6612139	3					
ANR	6615331	ExpressionStatement	"write_one_byte ( 0 , 0 )"	1477:4:29034:29055	6612139	0	True				
ANR	6615332	CallExpression	"write_one_byte ( 0 , 0 )"		6612139	0					
ANR	6615333	Callee	write_one_byte		6612139	0					
ANR	6615334	Identifier	write_one_byte		6612139	0					
ANR	6615335	ArgumentList	0		6612139	1					
ANR	6615336	Argument	0		6612139	0					
ANR	6615337	PrimaryExpression	0		6612139	0					
ANR	6615338	Argument	0		6612139	1					
ANR	6615339	PrimaryExpression	0		6612139	0					
ANR	6615340	BreakStatement	break ;	1479:3:29065:29070	6612139	309	True				
ANR	6615341	Label	case Z80_END :	1480:2:29074:29086	6612139	310	True				
ANR	6615342	Identifier	Z80_END		6612139	0					
ANR	6615343	BreakStatement	break ;	1481:3:29091:29096	6612139	311	True				
ANR	6615344	Label	case Z80_ORG :	1482:2:29100:29112	6612139	312	True				
ANR	6615345	Identifier	Z80_ORG		6612139	0					
ANR	6615346	ExpressionStatement	"addr = rd_expr ( & ptr , '\\0' , NULL , sp , 1 ) & 0xffff"	1483:3:29117:29166	6612139	313	True				
ANR	6615347	AssignmentExpression	"addr = rd_expr ( & ptr , '\\0' , NULL , sp , 1 ) & 0xffff"		6612139	0		=			
ANR	6615348	Identifier	addr		6612139	0					
ANR	6615349	BitAndExpression	"rd_expr ( & ptr , '\\0' , NULL , sp , 1 ) & 0xffff"		6612139	1		&			
ANR	6615350	CallExpression	"rd_expr ( & ptr , '\\0' , NULL , sp , 1 )"		6612139	0					
ANR	6615351	Callee	rd_expr		6612139	0					
ANR	6615352	Identifier	rd_expr		6612139	0					
ANR	6615353	ArgumentList	& ptr		6612139	1					
ANR	6615354	Argument	& ptr		6612139	0					
ANR	6615355	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615356	UnaryOperator	&		6612139	0					
ANR	6615357	Identifier	ptr		6612139	1					
ANR	6615358	Argument	'\\0'		6612139	1					
ANR	6615359	PrimaryExpression	'\\0'		6612139	0					
ANR	6615360	Argument	NULL		6612139	2					
ANR	6615361	Identifier	NULL		6612139	0					
ANR	6615362	Argument	sp		6612139	3					
ANR	6615363	Identifier	sp		6612139	0					
ANR	6615364	Argument	1		6612139	4					
ANR	6615365	PrimaryExpression	1		6612139	0					
ANR	6615366	PrimaryExpression	0xffff		6612139	1					
ANR	6615367	BreakStatement	break ;	1484:3:29171:29176	6612139	314	True				
ANR	6615368	Label	case Z80_IF :	1485:2:29180:29191	6612139	315	True				
ANR	6615369	Identifier	Z80_IF		6612139	0					
ANR	6615370	IfStatement	"if ( rd_expr ( & ptr , '\\0' , NULL , sp , 1 ) )"		6612139	316					
ANR	6615371	Condition	"rd_expr ( & ptr , '\\0' , NULL , sp , 1 )"	1486:7:29200:29232	6612139	0	True				
ANR	6615372	CallExpression	"rd_expr ( & ptr , '\\0' , NULL , sp , 1 )"		6612139	0					
ANR	6615373	Callee	rd_expr		6612139	0					
ANR	6615374	Identifier	rd_expr		6612139	0					
ANR	6615375	ArgumentList	& ptr		6612139	1					
ANR	6615376	Argument	& ptr		6612139	0					
ANR	6615377	UnaryOperationExpression	& ptr		6612139	0					
ANR	6615378	UnaryOperator	&		6612139	0					
ANR	6615379	Identifier	ptr		6612139	1					
ANR	6615380	Argument	'\\0'		6612139	1					
ANR	6615381	PrimaryExpression	'\\0'		6612139	0					
ANR	6615382	Argument	NULL		6612139	2					
ANR	6615383	Identifier	NULL		6612139	0					
ANR	6615384	Argument	sp		6612139	3					
ANR	6615385	Identifier	sp		6612139	0					
ANR	6615386	Argument	1		6612139	4					
ANR	6615387	PrimaryExpression	1		6612139	0					
ANR	6615388	CompoundStatement		676:42:11321:11321	6612139	1					
ANR	6615389	ExpressionStatement	ifcount ++	1487:4:29241:29250	6612139	0	True				
ANR	6615390	PostIncDecOperationExpression	ifcount ++		6612139	0					
ANR	6615391	Identifier	ifcount		6612139	0					
ANR	6615392	IncDec	++		6612139	1					
ANR	6615393	ElseStatement	else		6612139	0					
ANR	6615394	CompoundStatement		678:10:11348:11348	6612139	0					
ANR	6615395	ExpressionStatement	noifcount ++	1489:4:29268:29279	6612139	0	True				
ANR	6615396	PostIncDecOperationExpression	noifcount ++		6612139	0					
ANR	6615397	Identifier	noifcount		6612139	0					
ANR	6615398	IncDec	++		6612139	1					
ANR	6615399	BreakStatement	break ;	1491:3:29289:29294	6612139	317	True				
ANR	6615400	Label	case Z80_ELSE :	1492:2:29298:29311	6612139	318	True				
ANR	6615401	Identifier	Z80_ELSE		6612139	0					
ANR	6615402	IfStatement	if ( ifcount == 0 )		6612139	319					
ANR	6615403	Condition	ifcount == 0	1493:7:29320:29331	6612139	0	True				
ANR	6615404	EqualityExpression	ifcount == 0		6612139	0		==			
ANR	6615405	Identifier	ifcount		6612139	0					
ANR	6615406	PrimaryExpression	0		6612139	1					
ANR	6615407	CompoundStatement		683:21:11420:11420	6612139	1					
ANR	6615408	ExpressionStatement	"eprintf ( ""else without if\\n"" )"	1494:4:29340:29369	6612139	0	True				
ANR	6615409	CallExpression	"eprintf ( ""else without if\\n"" )"		6612139	0					
ANR	6615410	Callee	eprintf		6612139	0					
ANR	6615411	Identifier	eprintf		6612139	0					
ANR	6615412	ArgumentList	"""else without if\\n"""		6612139	1					
ANR	6615413	Argument	"""else without if\\n"""		6612139	0					
ANR	6615414	PrimaryExpression	"""else without if\\n"""		6612139	0					
ANR	6615415	BreakStatement	break ;	1495:4:29375:29380	6612139	1	True				
ANR	6615416	ExpressionStatement	noifcount = 1	1497:3:29390:29403	6612139	320	True				
ANR	6615417	AssignmentExpression	noifcount = 1		6612139	0		=			
ANR	6615418	Identifier	noifcount		6612139	0					
ANR	6615419	PrimaryExpression	1		6612139	1					
ANR	6615420	ExpressionStatement	ifcount --	1498:3:29408:29417	6612139	321	True				
ANR	6615421	PostIncDecOperationExpression	ifcount --		6612139	0					
ANR	6615422	Identifier	ifcount		6612139	0					
ANR	6615423	IncDec	--		6612139	1					
ANR	6615424	BreakStatement	break ;	1499:3:29422:29427	6612139	322	True				
ANR	6615425	Label	case Z80_ENDIF :	1500:2:29431:29445	6612139	323	True				
ANR	6615426	Identifier	Z80_ENDIF		6612139	0					
ANR	6615427	IfStatement	if ( noifcount == 0 && ifcount == 0 )		6612139	324					
ANR	6615428	Condition	noifcount == 0 && ifcount == 0	1501:7:29454:29483	6612139	0	True				
ANR	6615429	AndExpression	noifcount == 0 && ifcount == 0		6612139	0		&&			
ANR	6615430	EqualityExpression	noifcount == 0		6612139	0		==			
ANR	6615431	Identifier	noifcount		6612139	0					
ANR	6615432	PrimaryExpression	0		6612139	1					
ANR	6615433	EqualityExpression	ifcount == 0		6612139	1		==			
ANR	6615434	Identifier	ifcount		6612139	0					
ANR	6615435	PrimaryExpression	0		6612139	1					
ANR	6615436	CompoundStatement		691:39:11572:11572	6612139	1					
ANR	6615437	ExpressionStatement	"eprintf ( ""endif without if\\n"" )"	1502:4:29492:29522	6612139	0	True				
ANR	6615438	CallExpression	"eprintf ( ""endif without if\\n"" )"		6612139	0					
ANR	6615439	Callee	eprintf		6612139	0					
ANR	6615440	Identifier	eprintf		6612139	0					
ANR	6615441	ArgumentList	"""endif without if\\n"""		6612139	1					
ANR	6615442	Argument	"""endif without if\\n"""		6612139	0					
ANR	6615443	PrimaryExpression	"""endif without if\\n"""		6612139	0					
ANR	6615444	BreakStatement	break ;	1503:4:29528:29533	6612139	1	True				
ANR	6615445	IfStatement	if ( noifcount )		6612139	325					
ANR	6615446	Condition	noifcount	1505:7:29547:29555	6612139	0	True				
ANR	6615447	Identifier	noifcount		6612139	0					
ANR	6615448	CompoundStatement		695:18:11644:11644	6612139	1					
ANR	6615449	ExpressionStatement	noifcount --	1506:4:29564:29575	6612139	0	True				
ANR	6615450	PostIncDecOperationExpression	noifcount --		6612139	0					
ANR	6615451	Identifier	noifcount		6612139	0					
ANR	6615452	IncDec	--		6612139	1					
ANR	6615453	ElseStatement	else		6612139	0					
ANR	6615454	CompoundStatement		697:10:11673:11673	6612139	0					
ANR	6615455	ExpressionStatement	ifcount --	1508:4:29593:29602	6612139	0	True				
ANR	6615456	PostIncDecOperationExpression	ifcount --		6612139	0					
ANR	6615457	Identifier	ifcount		6612139	0					
ANR	6615458	IncDec	--		6612139	1					
ANR	6615459	BreakStatement	break ;	1510:3:29612:29617	6612139	326	True				
ANR	6615460	Label	case Z80_ENDM :	1511:2:29621:29634	6612139	327	True				
ANR	6615461	Identifier	Z80_ENDM		6612139	0					
ANR	6615462	IfStatement	if ( stack [ sp ] . file )		6612139	328					
ANR	6615463	Condition	stack [ sp ] . file	1512:7:29643:29656	6612139	0	True				
ANR	6615464	MemberAccess	stack [ sp ] . file		6612139	0					
ANR	6615465	ArrayIndexing	stack [ sp ]		6612139	0					
ANR	6615466	Identifier	stack		6612139	0					
ANR	6615467	Identifier	sp		6612139	1					
ANR	6615468	Identifier	file		6612139	1					
ANR	6615469	CompoundStatement		702:23:11745:11745	6612139	1					
ANR	6615470	ExpressionStatement	"eprintf ( ""endm outside macro definition\\n"" )"	1513:4:29665:29708	6612139	0	True				
ANR	6615471	CallExpression	"eprintf ( ""endm outside macro definition\\n"" )"		6612139	0					
ANR	6615472	Callee	eprintf		6612139	0					
ANR	6615473	Identifier	eprintf		6612139	0					
ANR	6615474	ArgumentList	"""endm outside macro definition\\n"""		6612139	1					
ANR	6615475	Argument	"""endm outside macro definition\\n"""		6612139	0					
ANR	6615476	PrimaryExpression	"""endm outside macro definition\\n"""		6612139	0					
ANR	6615477	BreakStatement	break ;	1515:3:29718:29723	6612139	329	True				
ANR	6615478	Label	case Z80_SEEK :	1516:2:29727:29740	6612139	330	True				
ANR	6615479	Identifier	Z80_SEEK		6612139	0					
ANR	6615480	ExpressionStatement	"eprintf ( ""seek error\\n"" )"	1517:3:29745:29769	6612139	331	True				
ANR	6615481	CallExpression	"eprintf ( ""seek error\\n"" )"		6612139	0					
ANR	6615482	Callee	eprintf		6612139	0					
ANR	6615483	Identifier	eprintf		6612139	0					
ANR	6615484	ArgumentList	"""seek error\\n"""		6612139	1					
ANR	6615485	Argument	"""seek error\\n"""		6612139	0					
ANR	6615486	PrimaryExpression	"""seek error\\n"""		6612139	0					
ANR	6615487	BreakStatement	break ;	1518:3:29774:29779	6612139	332	True				
ANR	6615488	Label	default :	1519:2:29783:29790	6612139	333	True				
ANR	6615489	Identifier	default		6612139	0					
ANR	6615490	ReturnStatement	return 0 ;	1521:3:29858:29866	6612139	334	True				
ANR	6615491	PrimaryExpression	0		6612139	0					
ANR	6615492	Condition	false	1523:10:29882:29886	6612139	1	True				
ANR	6615493	Identifier	false		6612139	0					
ANR	6615494	ReturnStatement	return obuflen ;	1525:1:29910:29924	6612139	7	True				
ANR	6615495	Identifier	obuflen		6612139	0					
ANR	6615496	ReturnType	static int		6612139	1					
ANR	6615497	Identifier	assemble		6612139	2					
ANR	6615498	ParameterList	"const char * str , unsigned char * _obuf"		6612139	3					
ANR	6615499	Parameter	const char * str	811:20:17874:17888	6612139	0	True				
ANR	6615500	ParameterType	const char *		6612139	0					
ANR	6615501	Identifier	str		6612139	1					
ANR	6615502	Parameter	unsigned char * _obuf	811:37:17891:17910	6612139	1	True				
ANR	6615503	ParameterType	unsigned char *		6612139	0					
ANR	6615504	Identifier	_obuf		6612139	1					
ANR	6615505	CFGEntryNode	ENTRY		6612139		True				
ANR	6615506	CFGExitNode	EXIT		6612139		True				
ANR	6615507	Symbol	* sp		6612139						
ANR	6615508	Symbol	rd_r_rr		6612139						
ANR	6615509	Symbol	rd_jr		6612139						
ANR	6615510	Symbol	stack		6612139						
ANR	6615511	Symbol	HL		6612139						
ANR	6615512	Symbol	rd_jp		6612139						
ANR	6615513	Symbol	SPHL		6612139						
ANR	6615514	Symbol	ld_DE		6612139						
ANR	6615515	Symbol	strchr		6612139						
ANR	6615516	Symbol	have_quote		6612139						
ANR	6615517	Symbol	rd_r		6612139						
ANR	6615518	Symbol	quote		6612139						
ANR	6615519	Symbol	obuf		6612139						
ANR	6615520	Symbol	* ptr		6612139						
ANR	6615521	Symbol	ld_nnHL		6612139						
ANR	6615522	Symbol	cont		6612139						
ANR	6615523	Symbol	define_macro		6612139						
ANR	6615524	Symbol	rd_a_hl		6612139						
ANR	6615525	Symbol	noifcount		6612139						
ANR	6615526	Symbol	rd_ldbcdehla		6612139						
ANR	6615527	Symbol	rd_nnc		6612139						
ANR	6615528	Symbol	rd_a		6612139						
ANR	6615529	Symbol	rd_c		6612139						
ANR	6615530	Symbol	NULL		6612139						
ANR	6615531	Symbol	rd_rr_		6612139						
ANR	6615532	Symbol	indexed		6612139						
ANR	6615533	Symbol	rd_in		6612139						
ANR	6615534	Symbol	baseaddr		6612139						
ANR	6615535	Symbol	rd_ld_hl		6612139						
ANR	6615536	Symbol	readcommand		6612139						
ANR	6615537	Symbol	rd_r_		6612139						
ANR	6615538	Symbol	str		6612139						
ANR	6615539	Symbol	ifcount		6612139						
ANR	6615540	Symbol	rd_character		6612139						
ANR	6615541	Symbol	rd_rrxx		6612139						
ANR	6615542	Symbol	has_argument		6612139						
ANR	6615543	Symbol	cmd		6612139						
ANR	6615544	Symbol	bufptr		6612139						
ANR	6615545	Symbol	A		6612139						
ANR	6615546	Symbol	rd_nn_nn		6612139						
ANR	6615547	Symbol	rd_r_add		6612139						
ANR	6615548	Symbol	C		6612139						
ANR	6615549	Symbol	ld_nnA		6612139						
ANR	6615550	Symbol	rd_hl		6612139						
ANR	6615551	Symbol	stack [ sp ] . file		6612139						
ANR	6615552	Symbol	* bufptr		6612139						
ANR	6615553	Symbol	A_I		6612139						
ANR	6615554	Symbol	ldDE		6612139						
ANR	6615555	Symbol	readbyte		6612139						
ANR	6615556	Symbol	indexjmp		6612139						
ANR	6615557	Symbol	rd_ld		6612139						
ANR	6615558	Symbol	rd_hlx		6612139						
ANR	6615559	Symbol	& ptr		6612139						
ANR	6615560	Symbol	writebyte		6612139						
ANR	6615561	Symbol	A_R		6612139						
ANR	6615562	Symbol	z80buffer		6612139						
ANR	6615563	Symbol	ldR		6612139						
ANR	6615564	Symbol	addr		6612139						
ANR	6615565	Symbol	sp		6612139						
ANR	6615566	Symbol	delspc		6612139						
ANR	6615567	Symbol	obuflen		6612139						
ANR	6615568	Symbol	_NN		6612139						
ANR	6615569	Symbol	addHL		6612139						
ANR	6615570	Symbol	A_NN		6612139						
ANR	6615571	Symbol	rd_0_2		6612139						
ANR	6615572	Symbol	rd_ex1		6612139						
ANR	6615573	Symbol	rd_stack		6612139						
ANR	6615574	Symbol	false		6612139						
ANR	6615575	Symbol	rd_ld_nn		6612139						
ANR	6615576	Symbol	i		6612139						
ANR	6615577	Symbol	rd_lda		6612139						
ANR	6615578	Symbol	rd_word		6612139						
ANR	6615579	Symbol	_obuf		6612139						
ANR	6615580	Symbol	rd_0_7		6612139						
ANR	6615581	Symbol	ptr		6612139						
ANR	6615582	Symbol	r		6612139						
ANR	6615583	Symbol	comma		6612139						
ANR	6615584	Symbol	s		6612139						
ANR	6615585	Symbol	rd_out		6612139						
ANR	6615586	Symbol	rd_expr		6612139						
ANR	6615587	Symbol	rd_cc		6612139						
ANR	6615588	Symbol	* stack		6612139						
ANR	6615589	Symbol	readword		6612139						
ANR	6615590	Symbol	strdup		6612139						
ANR	6615591	Symbol	rd_af_		6612139						
ANR	6615592	Symbol	SPNN		6612139						
ANR	6615593	Symbol	rd_sp		6612139						
ANR	6615594	Function	z80asm	1529:0:29936:30025							
ANR	6615595	FunctionDef	"z80asm (unsigned char * outbuf , const char * s)"		6615594	0					
ANR	6615596	CompoundStatement		1529:57:29993:30025	6615594	0					
ANR	6615597	ReturnStatement	"return assemble ( s , outbuf ) ;"	1530:1:29996:30023	6615594	0	True				
ANR	6615598	CallExpression	"assemble ( s , outbuf )"		6615594	0					
ANR	6615599	Callee	assemble		6615594	0					
ANR	6615600	Identifier	assemble		6615594	0					
ANR	6615601	ArgumentList	s		6615594	1					
ANR	6615602	Argument	s		6615594	0					
ANR	6615603	Identifier	s		6615594	0					
ANR	6615604	Argument	outbuf		6615594	1					
ANR	6615605	Identifier	outbuf		6615594	0					
ANR	6615606	ReturnType	R_API_I int		6615594	1					
ANR	6615607	Identifier	z80asm		6615594	2					
ANR	6615608	ParameterList	"unsigned char * outbuf , const char * s"		6615594	3					
ANR	6615609	Parameter	unsigned char * outbuf	1529:19:29955:29975	6615594	0	True				
ANR	6615610	ParameterType	unsigned char *		6615594	0					
ANR	6615611	Identifier	outbuf		6615594	1					
ANR	6615612	Parameter	const char * s	1529:42:29978:29990	6615594	1	True				
ANR	6615613	ParameterType	const char *		6615594	0					
ANR	6615614	Identifier	s		6615594	1					
ANR	6615615	CFGEntryNode	ENTRY		6615594		True				
ANR	6615616	CFGExitNode	EXIT		6615594		True				
ANR	6615617	Symbol	s		6615594						
ANR	6615618	Symbol	outbuf		6615594						
ANR	6615619	Symbol	assemble		6615594						
ANR	6615620	Function	main	1534:0:30044:30531							
ANR	6615621	FunctionDef	"main (int argc , char * * argv)"		6615620	0					
ANR	6615622	CompoundStatement		1534:32:30076:30531	6615620	0					
ANR	6615623	IdentifierDeclStatement	int len ;	1535:1:30079:30086	6615620	0	True				
ANR	6615624	IdentifierDecl	len		6615620	0					
ANR	6615625	IdentifierDeclType	int		6615620	0					
ANR	6615626	Identifier	len		6615620	1					
ANR	6615627	IdentifierDeclStatement	unsigned char buf [ 4 ] ;	1536:1:30089:30109	6615620	1	True				
ANR	6615628	IdentifierDecl	buf [ 4 ]		6615620	0					
ANR	6615629	IdentifierDeclType	unsigned char [ 4 ]		6615620	0					
ANR	6615630	Identifier	buf		6615620	1					
ANR	6615631	PrimaryExpression	4		6615620	2					
ANR	6615632	ExpressionStatement	buf [ 0 ] = buf [ 1 ] = buf [ 2 ] = 0	1538:1:30113:30141	6615620	2	True				
ANR	6615633	AssignmentExpression	buf [ 0 ] = buf [ 1 ] = buf [ 2 ] = 0		6615620	0		=			
ANR	6615634	ArrayIndexing	buf [ 0 ]		6615620	0					
ANR	6615635	Identifier	buf		6615620	0					
ANR	6615636	PrimaryExpression	0		6615620	1					
ANR	6615637	AssignmentExpression	buf [ 1 ] = buf [ 2 ] = 0		6615620	1		=			
ANR	6615638	ArrayIndexing	buf [ 1 ]		6615620	0					
ANR	6615639	Identifier	buf		6615620	0					
ANR	6615640	PrimaryExpression	1		6615620	1					
ANR	6615641	AssignmentExpression	buf [ 2 ] = 0		6615620	1		=			
ANR	6615642	ArrayIndexing	buf [ 2 ]		6615620	0					
ANR	6615643	Identifier	buf		6615620	0					
ANR	6615644	PrimaryExpression	2		6615620	1					
ANR	6615645	PrimaryExpression	0		6615620	1					
ANR	6615646	ExpressionStatement	"len = z80asm ( buf , ""nop"" )"	1539:1:30144:30169	6615620	3	True				
ANR	6615647	AssignmentExpression	"len = z80asm ( buf , ""nop"" )"		6615620	0		=			
ANR	6615648	Identifier	len		6615620	0					
ANR	6615649	CallExpression	"z80asm ( buf , ""nop"" )"		6615620	1					
ANR	6615650	Callee	z80asm		6615620	0					
ANR	6615651	Identifier	z80asm		6615620	0					
ANR	6615652	ArgumentList	buf		6615620	1					
ANR	6615653	Argument	buf		6615620	0					
ANR	6615654	Identifier	buf		6615620	0					
ANR	6615655	Argument	"""nop"""		6615620	1					
ANR	6615656	PrimaryExpression	"""nop"""		6615620	0					
ANR	6615657	ExpressionStatement	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"	1540:1:30172:30231	6615620	4	True				
ANR	6615658	CallExpression	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"		6615620	0					
ANR	6615659	Callee	printf		6615620	0					
ANR	6615660	Identifier	printf		6615620	0					
ANR	6615661	ArgumentList	"""%d   %02x%02x%02x\\n"""		6615620	1					
ANR	6615662	Argument	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615663	PrimaryExpression	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615664	Argument	len		6615620	1					
ANR	6615665	Identifier	len		6615620	0					
ANR	6615666	Argument	buf [ 0 ]		6615620	2					
ANR	6615667	ArrayIndexing	buf [ 0 ]		6615620	0					
ANR	6615668	Identifier	buf		6615620	0					
ANR	6615669	PrimaryExpression	0		6615620	1					
ANR	6615670	Argument	buf [ 1 ]		6615620	3					
ANR	6615671	ArrayIndexing	buf [ 1 ]		6615620	0					
ANR	6615672	Identifier	buf		6615620	0					
ANR	6615673	PrimaryExpression	1		6615620	1					
ANR	6615674	Argument	buf [ 2 ]		6615620	4					
ANR	6615675	ArrayIndexing	buf [ 2 ]		6615620	0					
ANR	6615676	Identifier	buf		6615620	0					
ANR	6615677	PrimaryExpression	2		6615620	1					
ANR	6615678	ExpressionStatement	"len = z80asm ( buf , ""cp b"" )"	1542:1:30235:30261	6615620	5	True				
ANR	6615679	AssignmentExpression	"len = z80asm ( buf , ""cp b"" )"		6615620	0		=			
ANR	6615680	Identifier	len		6615620	0					
ANR	6615681	CallExpression	"z80asm ( buf , ""cp b"" )"		6615620	1					
ANR	6615682	Callee	z80asm		6615620	0					
ANR	6615683	Identifier	z80asm		6615620	0					
ANR	6615684	ArgumentList	buf		6615620	1					
ANR	6615685	Argument	buf		6615620	0					
ANR	6615686	Identifier	buf		6615620	0					
ANR	6615687	Argument	"""cp b"""		6615620	1					
ANR	6615688	PrimaryExpression	"""cp b"""		6615620	0					
ANR	6615689	ExpressionStatement	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"	1543:1:30264:30323	6615620	6	True				
ANR	6615690	CallExpression	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"		6615620	0					
ANR	6615691	Callee	printf		6615620	0					
ANR	6615692	Identifier	printf		6615620	0					
ANR	6615693	ArgumentList	"""%d   %02x%02x%02x\\n"""		6615620	1					
ANR	6615694	Argument	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615695	PrimaryExpression	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615696	Argument	len		6615620	1					
ANR	6615697	Identifier	len		6615620	0					
ANR	6615698	Argument	buf [ 0 ]		6615620	2					
ANR	6615699	ArrayIndexing	buf [ 0 ]		6615620	0					
ANR	6615700	Identifier	buf		6615620	0					
ANR	6615701	PrimaryExpression	0		6615620	1					
ANR	6615702	Argument	buf [ 1 ]		6615620	3					
ANR	6615703	ArrayIndexing	buf [ 1 ]		6615620	0					
ANR	6615704	Identifier	buf		6615620	0					
ANR	6615705	PrimaryExpression	1		6615620	1					
ANR	6615706	Argument	buf [ 2 ]		6615620	4					
ANR	6615707	ArrayIndexing	buf [ 2 ]		6615620	0					
ANR	6615708	Identifier	buf		6615620	0					
ANR	6615709	PrimaryExpression	2		6615620	1					
ANR	6615710	ExpressionStatement	"len = z80asm ( buf , ""call 0x123"" )"	1545:1:30327:30359	6615620	7	True				
ANR	6615711	AssignmentExpression	"len = z80asm ( buf , ""call 0x123"" )"		6615620	0		=			
ANR	6615712	Identifier	len		6615620	0					
ANR	6615713	CallExpression	"z80asm ( buf , ""call 0x123"" )"		6615620	1					
ANR	6615714	Callee	z80asm		6615620	0					
ANR	6615715	Identifier	z80asm		6615620	0					
ANR	6615716	ArgumentList	buf		6615620	1					
ANR	6615717	Argument	buf		6615620	0					
ANR	6615718	Identifier	buf		6615620	0					
ANR	6615719	Argument	"""call 0x123"""		6615620	1					
ANR	6615720	PrimaryExpression	"""call 0x123"""		6615620	0					
ANR	6615721	ExpressionStatement	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"	1546:1:30362:30421	6615620	8	True				
ANR	6615722	CallExpression	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"		6615620	0					
ANR	6615723	Callee	printf		6615620	0					
ANR	6615724	Identifier	printf		6615620	0					
ANR	6615725	ArgumentList	"""%d   %02x%02x%02x\\n"""		6615620	1					
ANR	6615726	Argument	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615727	PrimaryExpression	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615728	Argument	len		6615620	1					
ANR	6615729	Identifier	len		6615620	0					
ANR	6615730	Argument	buf [ 0 ]		6615620	2					
ANR	6615731	ArrayIndexing	buf [ 0 ]		6615620	0					
ANR	6615732	Identifier	buf		6615620	0					
ANR	6615733	PrimaryExpression	0		6615620	1					
ANR	6615734	Argument	buf [ 1 ]		6615620	3					
ANR	6615735	ArrayIndexing	buf [ 1 ]		6615620	0					
ANR	6615736	Identifier	buf		6615620	0					
ANR	6615737	PrimaryExpression	1		6615620	1					
ANR	6615738	Argument	buf [ 2 ]		6615620	4					
ANR	6615739	ArrayIndexing	buf [ 2 ]		6615620	0					
ANR	6615740	Identifier	buf		6615620	0					
ANR	6615741	PrimaryExpression	2		6615620	1					
ANR	6615742	ExpressionStatement	"len = z80asm ( buf , ""call bla"" )"	1548:1:30425:30455	6615620	9	True				
ANR	6615743	AssignmentExpression	"len = z80asm ( buf , ""call bla"" )"		6615620	0		=			
ANR	6615744	Identifier	len		6615620	0					
ANR	6615745	CallExpression	"z80asm ( buf , ""call bla"" )"		6615620	1					
ANR	6615746	Callee	z80asm		6615620	0					
ANR	6615747	Identifier	z80asm		6615620	0					
ANR	6615748	ArgumentList	buf		6615620	1					
ANR	6615749	Argument	buf		6615620	0					
ANR	6615750	Identifier	buf		6615620	0					
ANR	6615751	Argument	"""call bla"""		6615620	1					
ANR	6615752	PrimaryExpression	"""call bla"""		6615620	0					
ANR	6615753	ExpressionStatement	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"	1549:1:30458:30517	6615620	10	True				
ANR	6615754	CallExpression	"printf ( ""%d   %02x%02x%02x\\n"" , len , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] )"		6615620	0					
ANR	6615755	Callee	printf		6615620	0					
ANR	6615756	Identifier	printf		6615620	0					
ANR	6615757	ArgumentList	"""%d   %02x%02x%02x\\n"""		6615620	1					
ANR	6615758	Argument	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615759	PrimaryExpression	"""%d   %02x%02x%02x\\n"""		6615620	0					
ANR	6615760	Argument	len		6615620	1					
ANR	6615761	Identifier	len		6615620	0					
ANR	6615762	Argument	buf [ 0 ]		6615620	2					
ANR	6615763	ArrayIndexing	buf [ 0 ]		6615620	0					
ANR	6615764	Identifier	buf		6615620	0					
ANR	6615765	PrimaryExpression	0		6615620	1					
ANR	6615766	Argument	buf [ 1 ]		6615620	3					
ANR	6615767	ArrayIndexing	buf [ 1 ]		6615620	0					
ANR	6615768	Identifier	buf		6615620	0					
ANR	6615769	PrimaryExpression	1		6615620	1					
ANR	6615770	Argument	buf [ 2 ]		6615620	4					
ANR	6615771	ArrayIndexing	buf [ 2 ]		6615620	0					
ANR	6615772	Identifier	buf		6615620	0					
ANR	6615773	PrimaryExpression	2		6615620	1					
ANR	6615774	ReturnStatement	return 0 ;	1551:1:30521:30529	6615620	11	True				
ANR	6615775	PrimaryExpression	0		6615620	0					
ANR	6615776	ReturnType	int		6615620	1					
ANR	6615777	Identifier	main		6615620	2					
ANR	6615778	ParameterList	"int argc , char * * argv"		6615620	3					
ANR	6615779	Parameter	int argc	1534:9:30053:30060	6615620	0	True				
ANR	6615780	ParameterType	int		6615620	0					
ANR	6615781	Identifier	argc		6615620	1					
ANR	6615782	Parameter	char * * argv	1534:19:30063:30073	6615620	1	True				
ANR	6615783	ParameterType	char * *		6615620	0					
ANR	6615784	Identifier	argv		6615620	1					
ANR	6615785	CFGEntryNode	ENTRY		6615620		True				
ANR	6615786	CFGExitNode	EXIT		6615620		True				
ANR	6615787	Symbol	argc		6615620						
ANR	6615788	Symbol	buf		6615620						
ANR	6615789	Symbol	* buf		6615620						
ANR	6615790	Symbol	z80asm		6615620						
ANR	6615791	Symbol	len		6615620						
ANR	6615792	Symbol	argv		6615620						
