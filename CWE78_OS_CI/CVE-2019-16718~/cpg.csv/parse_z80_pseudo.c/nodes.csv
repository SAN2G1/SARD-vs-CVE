command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5559867	File	data/converged/CVE-2019-16718~_radare2/parse_z80_pseudo.c								
ANR	5559868	Function	replace	13:0:225:1578							
ANR	5559869	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5559868	0					
ANR	5559870	CompoundStatement		13:63:288:1578	5559868	0					
ANR	5559871	IdentifierDeclStatement	"int i , j , k ;"	14:1:291:300	5559868	0	True				
ANR	5559872	IdentifierDecl	i		5559868	0					
ANR	5559873	IdentifierDeclType	int		5559868	0					
ANR	5559874	Identifier	i		5559868	1					
ANR	5559875	IdentifierDecl	j		5559868	1					
ANR	5559876	IdentifierDeclType	int		5559868	0					
ANR	5559877	Identifier	j		5559868	1					
ANR	5559878	IdentifierDecl	k		5559868	2					
ANR	5559879	IdentifierDeclType	int		5559868	0					
ANR	5559880	Identifier	k		5559868	1					
ANR	5559881	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } } ;"	15:1:303:930	5559868	1	True				
ANR	5559882	IdentifierDecl	"ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } }"		5559868	0					
ANR	5559883	IdentifierDeclType	 [ ]		5559868	0					
ANR	5559884	Identifier	ops		5559868	1					
ANR	5559885	AssignmentExpression	"ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } }"		5559868	2		=			
ANR	5559886	Identifier	ops		5559868	0					
ANR	5559887	InitializerList	"""adc"""		5559868	1					
ANR	5559888	InitializerList	"""adc"""		5559868	0					
ANR	5559889	PrimaryExpression	"""adc"""		5559868	0					
ANR	5559890	PrimaryExpression	"""1 = 1 + 2"""		5559868	1					
ANR	5559891	InitializerList	"""add"""		5559868	1					
ANR	5559892	PrimaryExpression	"""add"""		5559868	0					
ANR	5559893	PrimaryExpression	"""1 = 1 + 2"""		5559868	1					
ANR	5559894	InitializerList	"""and"""		5559868	2					
ANR	5559895	PrimaryExpression	"""and"""		5559868	0					
ANR	5559896	PrimaryExpression	"""1 = 1 & 2"""		5559868	1					
ANR	5559897	InitializerList	"""cpl"""		5559868	3					
ANR	5559898	PrimaryExpression	"""cpl"""		5559868	0					
ANR	5559899	PrimaryExpression	"""1 = ~1"""		5559868	1					
ANR	5559900	InitializerList	"""ex"""		5559868	4					
ANR	5559901	PrimaryExpression	"""ex"""		5559868	0					
ANR	5559902	PrimaryExpression	"""swap(1, 2)"""		5559868	1					
ANR	5559903	InitializerList	"""in"""		5559868	5					
ANR	5559904	PrimaryExpression	"""in"""		5559868	0					
ANR	5559905	PrimaryExpression	"""1 = [2]"""		5559868	1					
ANR	5559906	InitializerList	"""jp"""		5559868	6					
ANR	5559907	PrimaryExpression	"""jp"""		5559868	0					
ANR	5559908	PrimaryExpression	"""goto [1]"""		5559868	1					
ANR	5559909	InitializerList	"""jp"""		5559868	7					
ANR	5559910	PrimaryExpression	"""jp"""		5559868	0					
ANR	5559911	PrimaryExpression	"""goto 1"""		5559868	1					
ANR	5559912	InitializerList	"""jr"""		5559868	8					
ANR	5559913	PrimaryExpression	"""jr"""		5559868	0					
ANR	5559914	PrimaryExpression	"""goto +1"""		5559868	1					
ANR	5559915	InitializerList	"""ld"""		5559868	9					
ANR	5559916	PrimaryExpression	"""ld"""		5559868	0					
ANR	5559917	PrimaryExpression	"""1 = 2"""		5559868	1					
ANR	5559918	InitializerList	"""ldd"""		5559868	10					
ANR	5559919	PrimaryExpression	"""ldd"""		5559868	0					
ANR	5559920	PrimaryExpression	"""1 = 2--"""		5559868	1					
ANR	5559921	InitializerList	"""neg"""		5559868	11					
ANR	5559922	PrimaryExpression	"""neg"""		5559868	0					
ANR	5559923	PrimaryExpression	"""1 = -1"""		5559868	1					
ANR	5559924	InitializerList	"""nop"""		5559868	12					
ANR	5559925	PrimaryExpression	"""nop"""		5559868	0					
ANR	5559926	PrimaryExpression	""""""		5559868	1					
ANR	5559927	InitializerList	"""or"""		5559868	13					
ANR	5559928	PrimaryExpression	"""or"""		5559868	0					
ANR	5559929	PrimaryExpression	"""1 = 1 | 2"""		5559868	1					
ANR	5559930	InitializerList	"""pop"""		5559868	14					
ANR	5559931	PrimaryExpression	"""pop"""		5559868	0					
ANR	5559932	PrimaryExpression	"""pop 1"""		5559868	1					
ANR	5559933	InitializerList	"""push"""		5559868	15					
ANR	5559934	PrimaryExpression	"""push"""		5559868	0					
ANR	5559935	PrimaryExpression	"""push 1"""		5559868	1					
ANR	5559936	InitializerList	"""rr"""		5559868	16					
ANR	5559937	PrimaryExpression	"""rr"""		5559868	0					
ANR	5559938	PrimaryExpression	"""1 = 1 << 2"""		5559868	1					
ANR	5559939	InitializerList	"""sbc"""		5559868	17					
ANR	5559940	PrimaryExpression	"""sbc"""		5559868	0					
ANR	5559941	PrimaryExpression	"""1 = 1 - 2"""		5559868	1					
ANR	5559942	InitializerList	"""sla"""		5559868	18					
ANR	5559943	PrimaryExpression	"""sla"""		5559868	0					
ANR	5559944	PrimaryExpression	"""1 = 1 << 2"""		5559868	1					
ANR	5559945	InitializerList	"""sra"""		5559868	19					
ANR	5559946	PrimaryExpression	"""sra"""		5559868	0					
ANR	5559947	PrimaryExpression	"""1 = 1 >> 2"""		5559868	1					
ANR	5559948	InitializerList	"""srl"""		5559868	20					
ANR	5559949	PrimaryExpression	"""srl"""		5559868	0					
ANR	5559950	PrimaryExpression	"""1 = 1 >> 2"""		5559868	1					
ANR	5559951	InitializerList	"""sub"""		5559868	21					
ANR	5559952	PrimaryExpression	"""sub"""		5559868	0					
ANR	5559953	PrimaryExpression	"""1 = 1 - 2"""		5559868	1					
ANR	5559954	InitializerList	"""xor"""		5559868	22					
ANR	5559955	PrimaryExpression	"""xor"""		5559868	0					
ANR	5559956	PrimaryExpression	"""1 = 1 ^ 2"""		5559868	1					
ANR	5559957	InitializerList	NULL		5559868	23					
ANR	5559958	Identifier	NULL		5559868	0					
ANR	5559959	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5559868	2					
ANR	5559960	ForInit	i = 0 ;	45:6:939:942	5559868	0	True				
ANR	5559961	AssignmentExpression	i = 0		5559868	0		=			
ANR	5559962	Identifier	i		5559868	0					
ANR	5559963	PrimaryExpression	0		5559868	1					
ANR	5559964	Condition	ops [ i ] . op != NULL	45:11:944:960	5559868	1	True				
ANR	5559965	EqualityExpression	ops [ i ] . op != NULL		5559868	0		!=			
ANR	5559966	MemberAccess	ops [ i ] . op		5559868	0					
ANR	5559967	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5559968	Identifier	ops		5559868	0					
ANR	5559969	Identifier	i		5559868	1					
ANR	5559970	Identifier	op		5559868	1					
ANR	5559971	Identifier	NULL		5559868	1					
ANR	5559972	PostIncDecOperationExpression	i ++	45:30:963:965	5559868	2	True				
ANR	5559973	Identifier	i		5559868	0					
ANR	5559974	IncDec	++		5559868	1					
ANR	5559975	CompoundStatement		33:35:679:679	5559868	3					
ANR	5559976	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5559868	0					
ANR	5559977	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	46:6:976:1003	5559868	0	True				
ANR	5559978	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5559868	0					
ANR	5559979	UnaryOperator	!		5559868	0					
ANR	5559980	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5559868	1					
ANR	5559981	Callee	strcmp		5559868	0					
ANR	5559982	Identifier	strcmp		5559868	0					
ANR	5559983	ArgumentList	ops [ i ] . op		5559868	1					
ANR	5559984	Argument	ops [ i ] . op		5559868	0					
ANR	5559985	MemberAccess	ops [ i ] . op		5559868	0					
ANR	5559986	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5559987	Identifier	ops		5559868	0					
ANR	5559988	Identifier	i		5559868	1					
ANR	5559989	Identifier	op		5559868	1					
ANR	5559990	Argument	argv [ 0 ]		5559868	1					
ANR	5559991	ArrayIndexing	argv [ 0 ]		5559868	0					
ANR	5559992	Identifier	argv		5559868	0					
ANR	5559993	PrimaryExpression	0		5559868	1					
ANR	5559994	CompoundStatement		34:36:717:717	5559868	1					
ANR	5559995	IfStatement	if ( newstr != NULL )		5559868	0					
ANR	5559996	Condition	newstr != NULL	47:7:1015:1028	5559868	0	True				
ANR	5559997	EqualityExpression	newstr != NULL		5559868	0		!=			
ANR	5559998	Identifier	newstr		5559868	0					
ANR	5559999	Identifier	NULL		5559868	1					
ANR	5560000	CompoundStatement		35:23:742:742	5559868	1					
ANR	5560001	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5559868	0					
ANR	5560002	ForInit	j = k = 0 ;	48:9:1042:1047	5559868	0	True				
ANR	5560003	AssignmentExpression	j = k = 0		5559868	0		=			
ANR	5560004	Identifier	j		5559868	0					
ANR	5560005	AssignmentExpression	k = 0		5559868	1		=			
ANR	5560006	Identifier	k		5559868	0					
ANR	5560007	PrimaryExpression	0		5559868	1					
ANR	5560008	Condition	ops [ i ] . str [ j ] != '\\0'	48:15:1048:1066	5559868	1	True				
ANR	5560009	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5559868	0		!=			
ANR	5560010	ArrayIndexing	ops [ i ] . str [ j ]		5559868	0					
ANR	5560011	MemberAccess	ops [ i ] . str		5559868	0					
ANR	5560012	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5560013	Identifier	ops		5559868	0					
ANR	5560014	Identifier	i		5559868	1					
ANR	5560015	Identifier	str		5559868	1					
ANR	5560016	Identifier	j		5559868	1					
ANR	5560017	PrimaryExpression	'\\0'		5559868	1					
ANR	5560018	Expression	"j ++ , k ++"	48:35:1068:1074	5559868	2	True				
ANR	5560019	PostIncDecOperationExpression	j ++		5559868	0					
ANR	5560020	Identifier	j		5559868	0					
ANR	5560021	IncDec	++		5559868	1					
ANR	5560022	PostIncDecOperationExpression	k ++		5559868	1					
ANR	5560023	Identifier	k		5559868	0					
ANR	5560024	IncDec	++		5559868	1					
ANR	5560025	CompoundStatement		36:44:788:788	5559868	3					
ANR	5560026	IfStatement	if ( ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9' )		5559868	0					
ANR	5560027	Condition	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'	49:9:1088:1127	5559868	0	True				
ANR	5560028	AndExpression	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'		5559868	0		&&			
ANR	5560029	RelationalExpression	ops [ i ] . str [ j ] >= '1'		5559868	0		>=			
ANR	5560030	ArrayIndexing	ops [ i ] . str [ j ]		5559868	0					
ANR	5560031	MemberAccess	ops [ i ] . str		5559868	0					
ANR	5560032	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5560033	Identifier	ops		5559868	0					
ANR	5560034	Identifier	i		5559868	1					
ANR	5560035	Identifier	str		5559868	1					
ANR	5560036	Identifier	j		5559868	1					
ANR	5560037	PrimaryExpression	'1'		5559868	1					
ANR	5560038	RelationalExpression	ops [ i ] . str [ j ] <= '9'		5559868	1		<=			
ANR	5560039	ArrayIndexing	ops [ i ] . str [ j ]		5559868	0					
ANR	5560040	MemberAccess	ops [ i ] . str		5559868	0					
ANR	5560041	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5560042	Identifier	ops		5559868	0					
ANR	5560043	Identifier	i		5559868	1					
ANR	5560044	Identifier	str		5559868	1					
ANR	5560045	Identifier	j		5559868	1					
ANR	5560046	PrimaryExpression	'9'		5559868	1					
ANR	5560047	CompoundStatement		38:6:849:890	5559868	1					
ANR	5560048	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	50:6:1138:1179	5559868	0	True				
ANR	5560049	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5559868	0					
ANR	5560050	IdentifierDeclType	const char *		5559868	0					
ANR	5560051	Identifier	w		5559868	1					
ANR	5560052	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5559868	2		=			
ANR	5560053	Identifier	w		5559868	0					
ANR	5560054	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5559868	1					
ANR	5560055	Identifier	argv		5559868	0					
ANR	5560056	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5559868	1		-			
ANR	5560057	ArrayIndexing	ops [ i ] . str [ j ]		5559868	0					
ANR	5560058	MemberAccess	ops [ i ] . str		5559868	0					
ANR	5560059	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5560060	Identifier	ops		5559868	0					
ANR	5560061	Identifier	i		5559868	1					
ANR	5560062	Identifier	str		5559868	1					
ANR	5560063	Identifier	j		5559868	1					
ANR	5560064	PrimaryExpression	'0'		5559868	1					
ANR	5560065	IfStatement	if ( w != NULL )		5559868	1					
ANR	5560066	Condition	w != NULL	51:10:1191:1199	5559868	0	True				
ANR	5560067	EqualityExpression	w != NULL		5559868	0		!=			
ANR	5560068	Identifier	w		5559868	0					
ANR	5560069	Identifier	NULL		5559868	1					
ANR	5560070	CompoundStatement		39:21:913:913	5559868	1					
ANR	5560071	ExpressionStatement	"strcpy ( newstr + k , w )"	52:7:1211:1231	5559868	0	True				
ANR	5560072	CallExpression	"strcpy ( newstr + k , w )"		5559868	0					
ANR	5560073	Callee	strcpy		5559868	0					
ANR	5560074	Identifier	strcpy		5559868	0					
ANR	5560075	ArgumentList	newstr + k		5559868	1					
ANR	5560076	Argument	newstr + k		5559868	0					
ANR	5560077	AdditiveExpression	newstr + k		5559868	0		+			
ANR	5560078	Identifier	newstr		5559868	0					
ANR	5560079	Identifier	k		5559868	1					
ANR	5560080	Argument	w		5559868	1					
ANR	5560081	Identifier	w		5559868	0					
ANR	5560082	ExpressionStatement	k += strlen ( w ) - 1	53:7:1240:1256	5559868	1	True				
ANR	5560083	AssignmentExpression	k += strlen ( w ) - 1		5559868	0		+=			
ANR	5560084	Identifier	k		5559868	0					
ANR	5560085	AdditiveExpression	strlen ( w ) - 1		5559868	1		-			
ANR	5560086	CallExpression	strlen ( w )		5559868	0					
ANR	5560087	Callee	strlen		5559868	0					
ANR	5560088	Identifier	strlen		5559868	0					
ANR	5560089	ArgumentList	w		5559868	1					
ANR	5560090	Argument	w		5559868	0					
ANR	5560091	Identifier	w		5559868	0					
ANR	5560092	PrimaryExpression	1		5559868	1					
ANR	5560093	ElseStatement	else		5559868	0					
ANR	5560094	CompoundStatement		43:12:989:989	5559868	0					
ANR	5560095	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	56:6:1286:1311	5559868	0	True				
ANR	5560096	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5559868	0		=			
ANR	5560097	ArrayIndexing	newstr [ k ]		5559868	0					
ANR	5560098	Identifier	newstr		5559868	0					
ANR	5560099	Identifier	k		5559868	1					
ANR	5560100	ArrayIndexing	ops [ i ] . str [ j ]		5559868	1					
ANR	5560101	MemberAccess	ops [ i ] . str		5559868	0					
ANR	5560102	ArrayIndexing	ops [ i ]		5559868	0					
ANR	5560103	Identifier	ops		5559868	0					
ANR	5560104	Identifier	i		5559868	1					
ANR	5560105	Identifier	str		5559868	1					
ANR	5560106	Identifier	j		5559868	1					
ANR	5560107	ExpressionStatement	newstr [ k ] = '\\0'	59:4:1330:1344	5559868	1	True				
ANR	5560108	AssignmentExpression	newstr [ k ] = '\\0'		5559868	0		=			
ANR	5560109	ArrayIndexing	newstr [ k ]		5559868	0					
ANR	5560110	Identifier	newstr		5559868	0					
ANR	5560111	Identifier	k		5559868	1					
ANR	5560112	PrimaryExpression	'\\0'		5559868	1					
ANR	5560113	ReturnStatement	return true ;	61:3:1354:1365	5559868	1	True				
ANR	5560114	Identifier	true		5559868	0					
ANR	5560115	IfStatement	if ( newstr != NULL )		5559868	3					
ANR	5560116	Condition	newstr != NULL	66:5:1406:1419	5559868	0	True				
ANR	5560117	EqualityExpression	newstr != NULL		5559868	0		!=			
ANR	5560118	Identifier	newstr		5559868	0					
ANR	5560119	Identifier	NULL		5559868	1					
ANR	5560120	CompoundStatement		54:21:1133:1133	5559868	1					
ANR	5560121	ExpressionStatement	newstr [ 0 ] = '\\0'	67:2:1426:1442	5559868	0	True				
ANR	5560122	AssignmentExpression	newstr [ 0 ] = '\\0'		5559868	0		=			
ANR	5560123	ArrayIndexing	newstr [ 0 ]		5559868	0					
ANR	5560124	Identifier	newstr		5559868	0					
ANR	5560125	PrimaryExpression	0		5559868	1					
ANR	5560126	PrimaryExpression	'\\0'		5559868	1					
ANR	5560127	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5559868	1					
ANR	5560128	ForInit	i = 0 ;	68:7:1451:1454	5559868	0	True				
ANR	5560129	AssignmentExpression	i = 0		5559868	0		=			
ANR	5560130	Identifier	i		5559868	0					
ANR	5560131	PrimaryExpression	0		5559868	1					
ANR	5560132	Condition	i < argc	68:12:1456:1461	5559868	1	True				
ANR	5560133	RelationalExpression	i < argc		5559868	0		<			
ANR	5560134	Identifier	i		5559868	0					
ANR	5560135	Identifier	argc		5559868	1					
ANR	5560136	PostIncDecOperationExpression	i ++	68:20:1464:1466	5559868	2	True				
ANR	5560137	Identifier	i		5559868	0					
ANR	5560138	IncDec	++		5559868	1					
ANR	5560139	CompoundStatement		56:25:1180:1180	5559868	3					
ANR	5560140	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	69:3:1474:1498	5559868	0	True				
ANR	5560141	CallExpression	"strcat ( newstr , argv [ i ] )"		5559868	0					
ANR	5560142	Callee	strcat		5559868	0					
ANR	5560143	Identifier	strcat		5559868	0					
ANR	5560144	ArgumentList	newstr		5559868	1					
ANR	5560145	Argument	newstr		5559868	0					
ANR	5560146	Identifier	newstr		5559868	0					
ANR	5560147	Argument	argv [ i ]		5559868	1					
ANR	5560148	ArrayIndexing	argv [ i ]		5559868	0					
ANR	5560149	Identifier	argv		5559868	0					
ANR	5560150	Identifier	i		5559868	1					
ANR	5560151	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	70:3:1503:1553	5559868	1	True				
ANR	5560152	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5559868	0					
ANR	5560153	Callee	strcat		5559868	0					
ANR	5560154	Identifier	strcat		5559868	0					
ANR	5560155	ArgumentList	newstr		5559868	1					
ANR	5560156	Argument	newstr		5559868	0					
ANR	5560157	Identifier	newstr		5559868	0					
ANR	5560158	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5559868	1					
ANR	5560159	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5559868	0					
ANR	5560160	Condition	i == 0 || i == argc - 1		5559868	0					
ANR	5560161	OrExpression	i == 0 || i == argc - 1		5559868	0		||			
ANR	5560162	EqualityExpression	i == 0		5559868	0		==			
ANR	5560163	Identifier	i		5559868	0					
ANR	5560164	PrimaryExpression	0		5559868	1					
ANR	5560165	EqualityExpression	i == argc - 1		5559868	1		==			
ANR	5560166	Identifier	i		5559868	0					
ANR	5560167	AdditiveExpression	argc - 1		5559868	1		-			
ANR	5560168	Identifier	argc		5559868	0					
ANR	5560169	PrimaryExpression	1		5559868	1					
ANR	5560170	PrimaryExpression	""" """		5559868	1					
ANR	5560171	PrimaryExpression	""", """		5559868	2					
ANR	5560172	ReturnStatement	return false ;	74:1:1564:1576	5559868	4	True				
ANR	5560173	Identifier	false		5559868	0					
ANR	5560174	ReturnType	static int		5559868	1					
ANR	5560175	Identifier	replace		5559868	2					
ANR	5560176	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5559868	3					
ANR	5560177	Parameter	int argc	13:19:244:251	5559868	0	True				
ANR	5560178	ParameterType	int		5559868	0					
ANR	5560179	Identifier	argc		5559868	1					
ANR	5560180	Parameter	const char * argv [ ]	13:29:254:271	5559868	1	True				
ANR	5560181	ParameterType	const char * [ ]		5559868	0					
ANR	5560182	Identifier	argv		5559868	1					
ANR	5560183	Parameter	char * newstr	13:49:274:285	5559868	2	True				
ANR	5560184	ParameterType	char *		5559868	0					
ANR	5560185	Identifier	newstr		5559868	1					
ANR	5560186	CFGEntryNode	ENTRY		5559868		True				
ANR	5560187	CFGExitNode	EXIT		5559868		True				
ANR	5560188	Symbol	* ops [ i ] . str		5559868						
ANR	5560189	Symbol	* * ops		5559868						
ANR	5560190	Symbol	* argv		5559868						
ANR	5560191	Symbol	argv		5559868						
ANR	5560192	Symbol	ops [ i ] . str		5559868						
ANR	5560193	Symbol	strlen		5559868						
ANR	5560194	Symbol	ops [ i ] . op		5559868						
ANR	5560195	Symbol	* ops		5559868						
ANR	5560196	Symbol	argc		5559868						
ANR	5560197	Symbol	strcmp		5559868						
ANR	5560198	Symbol	* * j		5559868						
ANR	5560199	Symbol	* * i		5559868						
ANR	5560200	Symbol	NULL		5559868						
ANR	5560201	Symbol	* * ops [ i ] . str		5559868						
ANR	5560202	Symbol	false		5559868						
ANR	5560203	Symbol	i		5559868						
ANR	5560204	Symbol	j		5559868						
ANR	5560205	Symbol	k		5559868						
ANR	5560206	Symbol	newstr		5559868						
ANR	5560207	Symbol	* * * ops		5559868						
ANR	5560208	Symbol	ops		5559868						
ANR	5560209	Symbol	* i		5559868						
ANR	5560210	Symbol	* newstr		5559868						
ANR	5560211	Symbol	* j		5559868						
ANR	5560212	Symbol	* k		5559868						
ANR	5560213	Symbol	w		5559868						
ANR	5560214	Symbol	* * * i		5559868						
ANR	5560215	Symbol	true		5559868						
ANR	5560216	DeclStmt									
ANR	5560217	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_z80_pseudo
ANR	5560218	DeclStmt									
ANR	5560219	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
