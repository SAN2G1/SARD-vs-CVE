command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6262588	File	data/converged/CVE-2019-16718~_radare2/str_trim.c								
ANR	6262589	Function	r_str_trim_path	14:0:269:1086							
ANR	6262590	FunctionDef	r_str_trim_path (char * s)		6262589	0					
ANR	6262591	CompoundStatement		14:36:305:1086	6262589	0					
ANR	6262592	IdentifierDeclStatement	"char * src , * dst , * p ;"	15:1:308:327	6262589	0	True				
ANR	6262593	IdentifierDecl	* src		6262589	0					
ANR	6262594	IdentifierDeclType	char *		6262589	0					
ANR	6262595	Identifier	src		6262589	1					
ANR	6262596	IdentifierDecl	* dst		6262589	1					
ANR	6262597	IdentifierDeclType	char *		6262589	0					
ANR	6262598	Identifier	dst		6262589	1					
ANR	6262599	IdentifierDecl	* p		6262589	2					
ANR	6262600	IdentifierDeclType	char *		6262589	0					
ANR	6262601	Identifier	p		6262589	1					
ANR	6262602	IdentifierDeclStatement	int i = 0 ;	16:1:330:339	6262589	1	True				
ANR	6262603	IdentifierDecl	i = 0		6262589	0					
ANR	6262604	IdentifierDeclType	int		6262589	0					
ANR	6262605	Identifier	i		6262589	1					
ANR	6262606	AssignmentExpression	i = 0		6262589	2		=			
ANR	6262607	Identifier	i		6262589	0					
ANR	6262608	PrimaryExpression	0		6262589	1					
ANR	6262609	IfStatement	if ( ! s || ! * s )		6262589	2					
ANR	6262610	Condition	! s || ! * s	17:5:346:354	6262589	0	True				
ANR	6262611	OrExpression	! s || ! * s		6262589	0		||			
ANR	6262612	UnaryOperationExpression	! s		6262589	0					
ANR	6262613	UnaryOperator	!		6262589	0					
ANR	6262614	Identifier	s		6262589	1					
ANR	6262615	UnaryOperationExpression	! * s		6262589	1					
ANR	6262616	UnaryOperator	!		6262589	0					
ANR	6262617	UnaryOperationExpression	* s		6262589	1					
ANR	6262618	UnaryOperator	*		6262589	0					
ANR	6262619	Identifier	s		6262589	1					
ANR	6262620	CompoundStatement		4:16:51:51	6262589	1					
ANR	6262621	ReturnStatement	return ;	18:2:361:367	6262589	0	True				
ANR	6262622	ExpressionStatement	dst = src = s + 1	20:1:373:390	6262589	3	True				
ANR	6262623	AssignmentExpression	dst = src = s + 1		6262589	0		=			
ANR	6262624	Identifier	dst		6262589	0					
ANR	6262625	AssignmentExpression	src = s + 1		6262589	1		=			
ANR	6262626	Identifier	src		6262589	0					
ANR	6262627	AdditiveExpression	s + 1		6262589	1		+			
ANR	6262628	Identifier	s		6262589	0					
ANR	6262629	PrimaryExpression	1		6262589	1					
ANR	6262630	WhileStatement	while ( * src )		6262589	4					
ANR	6262631	Condition	* src	21:8:400:403	6262589	0	True				
ANR	6262632	UnaryOperationExpression	* src		6262589	0					
ANR	6262633	UnaryOperator	*		6262589	0					
ANR	6262634	Identifier	src		6262589	1					
ANR	6262635	CompoundStatement		8:14:100:100	6262589	1					
ANR	6262636	IfStatement	if ( * ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.' )		6262589	0					
ANR	6262637	Condition	* ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.'	22:6:414:466	6262589	0	True				
ANR	6262638	AndExpression	* ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.'		6262589	0		&&			
ANR	6262639	EqualityExpression	* ( src - 1 ) == '/'		6262589	0		==			
ANR	6262640	UnaryOperationExpression	* ( src - 1 )		6262589	0					
ANR	6262641	UnaryOperator	*		6262589	0					
ANR	6262642	AdditiveExpression	src - 1		6262589	1		-			
ANR	6262643	Identifier	src		6262589	0					
ANR	6262644	PrimaryExpression	1		6262589	1					
ANR	6262645	PrimaryExpression	'/'		6262589	1					
ANR	6262646	AndExpression	* src == '.' && * ( src + 1 ) == '.'		6262589	1		&&			
ANR	6262647	EqualityExpression	* src == '.'		6262589	0		==			
ANR	6262648	UnaryOperationExpression	* src		6262589	0					
ANR	6262649	UnaryOperator	*		6262589	0					
ANR	6262650	Identifier	src		6262589	1					
ANR	6262651	PrimaryExpression	'.'		6262589	1					
ANR	6262652	EqualityExpression	* ( src + 1 ) == '.'		6262589	1		==			
ANR	6262653	UnaryOperationExpression	* ( src + 1 )		6262589	0					
ANR	6262654	UnaryOperator	*		6262589	0					
ANR	6262655	AdditiveExpression	src + 1		6262589	1		+			
ANR	6262656	Identifier	src		6262589	0					
ANR	6262657	PrimaryExpression	1		6262589	1					
ANR	6262658	PrimaryExpression	'.'		6262589	1					
ANR	6262659	CompoundStatement		9:61:163:163	6262589	1					
ANR	6262660	IfStatement	if ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		6262589	0					
ANR	6262661	Condition	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'	23:7:478:516	6262589	0	True				
ANR	6262662	OrExpression	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'		6262589	0		||			
ANR	6262663	EqualityExpression	* ( src + 2 ) == '/'		6262589	0		==			
ANR	6262664	UnaryOperationExpression	* ( src + 2 )		6262589	0					
ANR	6262665	UnaryOperator	*		6262589	0					
ANR	6262666	AdditiveExpression	src + 2		6262589	1		+			
ANR	6262667	Identifier	src		6262589	0					
ANR	6262668	PrimaryExpression	2		6262589	1					
ANR	6262669	PrimaryExpression	'/'		6262589	1					
ANR	6262670	EqualityExpression	* ( src + 2 ) == '\\0'		6262589	1		==			
ANR	6262671	UnaryOperationExpression	* ( src + 2 )		6262589	0					
ANR	6262672	UnaryOperator	*		6262589	0					
ANR	6262673	AdditiveExpression	src + 2		6262589	1		+			
ANR	6262674	Identifier	src		6262589	0					
ANR	6262675	PrimaryExpression	2		6262589	1					
ANR	6262676	PrimaryExpression	'\\0'		6262589	1					
ANR	6262677	CompoundStatement		10:48:213:213	6262589	1					
ANR	6262678	ExpressionStatement	p = dst - 1	24:4:525:536	6262589	0	True				
ANR	6262679	AssignmentExpression	p = dst - 1		6262589	0		=			
ANR	6262680	Identifier	p		6262589	0					
ANR	6262681	AdditiveExpression	dst - 1		6262589	1		-			
ANR	6262682	Identifier	dst		6262589	0					
ANR	6262683	PrimaryExpression	1		6262589	1					
ANR	6262684	WhileStatement	while ( s != p )		6262589	1					
ANR	6262685	Condition	s != p	25:11:549:554	6262589	0	True				
ANR	6262686	EqualityExpression	s != p		6262589	0		!=			
ANR	6262687	Identifier	s		6262589	0					
ANR	6262688	Identifier	p		6262589	1					
ANR	6262689	CompoundStatement		12:19:251:251	6262589	1					
ANR	6262690	IfStatement	if ( * p == '/' )		6262589	0					
ANR	6262691	Condition	* p == '/'	26:9:568:576	6262589	0	True				
ANR	6262692	EqualityExpression	* p == '/'		6262589	0		==			
ANR	6262693	UnaryOperationExpression	* p		6262589	0					
ANR	6262694	UnaryOperator	*		6262589	0					
ANR	6262695	Identifier	p		6262589	1					
ANR	6262696	PrimaryExpression	'/'		6262589	1					
ANR	6262697	CompoundStatement		13:20:273:273	6262589	1					
ANR	6262698	IfStatement	if ( i )		6262589	0					
ANR	6262699	Condition	i	27:10:591:591	6262589	0	True				
ANR	6262700	Identifier	i		6262589	0					
ANR	6262701	CompoundStatement		14:13:288:288	6262589	1					
ANR	6262702	ExpressionStatement	dst = p + 1	28:7:603:614	6262589	0	True				
ANR	6262703	AssignmentExpression	dst = p + 1		6262589	0		=			
ANR	6262704	Identifier	dst		6262589	0					
ANR	6262705	AdditiveExpression	p + 1		6262589	1		+			
ANR	6262706	Identifier	p		6262589	0					
ANR	6262707	PrimaryExpression	1		6262589	1					
ANR	6262708	ExpressionStatement	i = 0	29:7:623:628	6262589	1	True				
ANR	6262709	AssignmentExpression	i = 0		6262589	0		=			
ANR	6262710	Identifier	i		6262589	0					
ANR	6262711	PrimaryExpression	0		6262589	1					
ANR	6262712	BreakStatement	break ;	30:7:637:642	6262589	2	True				
ANR	6262713	ExpressionStatement	i = 1	32:6:658:663	6262589	1	True				
ANR	6262714	AssignmentExpression	i = 1		6262589	0		=			
ANR	6262715	Identifier	i		6262589	0					
ANR	6262716	PrimaryExpression	1		6262589	1					
ANR	6262717	ExpressionStatement	p --	34:5:677:680	6262589	1	True				
ANR	6262718	PostIncDecOperationExpression	p --		6262589	0					
ANR	6262719	Identifier	p		6262589	0					
ANR	6262720	IncDec	--		6262589	1					
ANR	6262721	IfStatement	if ( s == p && * p == '/' )		6262589	2					
ANR	6262722	Condition	s == p && * p == '/'	36:8:696:714	6262589	0	True				
ANR	6262723	AndExpression	s == p && * p == '/'		6262589	0		&&			
ANR	6262724	EqualityExpression	s == p		6262589	0		==			
ANR	6262725	Identifier	s		6262589	0					
ANR	6262726	Identifier	p		6262589	1					
ANR	6262727	EqualityExpression	* p == '/'		6262589	1		==			
ANR	6262728	UnaryOperationExpression	* p		6262589	0					
ANR	6262729	UnaryOperator	*		6262589	0					
ANR	6262730	Identifier	p		6262589	1					
ANR	6262731	PrimaryExpression	'/'		6262589	1					
ANR	6262732	CompoundStatement		23:29:411:411	6262589	1					
ANR	6262733	ExpressionStatement	dst = p + 1	37:5:724:735	6262589	0	True				
ANR	6262734	AssignmentExpression	dst = p + 1		6262589	0		=			
ANR	6262735	Identifier	dst		6262589	0					
ANR	6262736	AdditiveExpression	p + 1		6262589	1		+			
ANR	6262737	Identifier	p		6262589	0					
ANR	6262738	PrimaryExpression	1		6262589	1					
ANR	6262739	ExpressionStatement	src = src + 2	39:4:747:760	6262589	3	True				
ANR	6262740	AssignmentExpression	src = src + 2		6262589	0		=			
ANR	6262741	Identifier	src		6262589	0					
ANR	6262742	AdditiveExpression	src + 2		6262589	1		+			
ANR	6262743	Identifier	src		6262589	0					
ANR	6262744	PrimaryExpression	2		6262589	1					
ANR	6262745	ElseStatement	else		6262589	0					
ANR	6262746	CompoundStatement		27:10:466:466	6262589	0					
ANR	6262747	ExpressionStatement	* dst = * src	41:4:778:789	6262589	0	True				
ANR	6262748	AssignmentExpression	* dst = * src		6262589	0		=			
ANR	6262749	UnaryOperationExpression	* dst		6262589	0					
ANR	6262750	UnaryOperator	*		6262589	0					
ANR	6262751	Identifier	dst		6262589	1					
ANR	6262752	UnaryOperationExpression	* src		6262589	1					
ANR	6262753	UnaryOperator	*		6262589	0					
ANR	6262754	Identifier	src		6262589	1					
ANR	6262755	ExpressionStatement	dst ++	42:4:795:800	6262589	1	True				
ANR	6262756	PostIncDecOperationExpression	dst ++		6262589	0					
ANR	6262757	Identifier	dst		6262589	0					
ANR	6262758	IncDec	++		6262589	1					
ANR	6262759	ElseStatement	else		6262589	0					
ANR	6262760	IfStatement	if ( * src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' ) )		6262589	0					
ANR	6262761	Condition	* src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )	44:13:820:896	6262589	0	True				
ANR	6262762	AndExpression	* src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		6262589	0		&&			
ANR	6262763	EqualityExpression	* src == '/'		6262589	0		==			
ANR	6262764	UnaryOperationExpression	* src		6262589	0					
ANR	6262765	UnaryOperator	*		6262589	0					
ANR	6262766	Identifier	src		6262589	1					
ANR	6262767	PrimaryExpression	'/'		6262589	1					
ANR	6262768	AndExpression	* ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		6262589	1		&&			
ANR	6262769	EqualityExpression	* ( src + 1 ) == '.'		6262589	0		==			
ANR	6262770	UnaryOperationExpression	* ( src + 1 )		6262589	0					
ANR	6262771	UnaryOperator	*		6262589	0					
ANR	6262772	AdditiveExpression	src + 1		6262589	1		+			
ANR	6262773	Identifier	src		6262589	0					
ANR	6262774	PrimaryExpression	1		6262589	1					
ANR	6262775	PrimaryExpression	'.'		6262589	1					
ANR	6262776	OrExpression	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'		6262589	1		||			
ANR	6262777	EqualityExpression	* ( src + 2 ) == '/'		6262589	0		==			
ANR	6262778	UnaryOperationExpression	* ( src + 2 )		6262589	0					
ANR	6262779	UnaryOperator	*		6262589	0					
ANR	6262780	AdditiveExpression	src + 2		6262589	1		+			
ANR	6262781	Identifier	src		6262589	0					
ANR	6262782	PrimaryExpression	2		6262589	1					
ANR	6262783	PrimaryExpression	'/'		6262589	1					
ANR	6262784	EqualityExpression	* ( src + 2 ) == '\\0'		6262589	1		==			
ANR	6262785	UnaryOperationExpression	* ( src + 2 )		6262589	0					
ANR	6262786	UnaryOperator	*		6262589	0					
ANR	6262787	AdditiveExpression	src + 2		6262589	1		+			
ANR	6262788	Identifier	src		6262589	0					
ANR	6262789	PrimaryExpression	2		6262589	1					
ANR	6262790	PrimaryExpression	'\\0'		6262589	1					
ANR	6262791	CompoundStatement		31:92:593:593	6262589	1					
ANR	6262792	ExpressionStatement	src ++	45:3:904:909	6262589	0	True				
ANR	6262793	PostIncDecOperationExpression	src ++		6262589	0					
ANR	6262794	Identifier	src		6262589	0					
ANR	6262795	IncDec	++		6262589	1					
ANR	6262796	ElseStatement	else		6262589	0					
ANR	6262797	IfStatement	if ( * src != '/' || * ( src - 1 ) != '/' )		6262589	0					
ANR	6262798	Condition	* src != '/' || * ( src - 1 ) != '/'	46:13:924:955	6262589	0	True				
ANR	6262799	OrExpression	* src != '/' || * ( src - 1 ) != '/'		6262589	0		||			
ANR	6262800	EqualityExpression	* src != '/'		6262589	0		!=			
ANR	6262801	UnaryOperationExpression	* src		6262589	0					
ANR	6262802	UnaryOperator	*		6262589	0					
ANR	6262803	Identifier	src		6262589	1					
ANR	6262804	PrimaryExpression	'/'		6262589	1					
ANR	6262805	EqualityExpression	* ( src - 1 ) != '/'		6262589	1		!=			
ANR	6262806	UnaryOperationExpression	* ( src - 1 )		6262589	0					
ANR	6262807	UnaryOperator	*		6262589	0					
ANR	6262808	AdditiveExpression	src - 1		6262589	1		-			
ANR	6262809	Identifier	src		6262589	0					
ANR	6262810	PrimaryExpression	1		6262589	1					
ANR	6262811	PrimaryExpression	'/'		6262589	1					
ANR	6262812	CompoundStatement		33:47:652:652	6262589	1					
ANR	6262813	ExpressionStatement	* dst = * src	47:3:963:974	6262589	0	True				
ANR	6262814	AssignmentExpression	* dst = * src		6262589	0		=			
ANR	6262815	UnaryOperationExpression	* dst		6262589	0					
ANR	6262816	UnaryOperator	*		6262589	0					
ANR	6262817	Identifier	dst		6262589	1					
ANR	6262818	UnaryOperationExpression	* src		6262589	1					
ANR	6262819	UnaryOperator	*		6262589	0					
ANR	6262820	Identifier	src		6262589	1					
ANR	6262821	ExpressionStatement	dst ++	48:3:979:984	6262589	1	True				
ANR	6262822	PostIncDecOperationExpression	dst ++		6262589	0					
ANR	6262823	Identifier	dst		6262589	0					
ANR	6262824	IncDec	++		6262589	1					
ANR	6262825	ExpressionStatement	src ++	50:2:992:997	6262589	1	True				
ANR	6262826	PostIncDecOperationExpression	src ++		6262589	0					
ANR	6262827	Identifier	src		6262589	0					
ANR	6262828	IncDec	++		6262589	1					
ANR	6262829	IfStatement	if ( dst > s + 1 && * ( dst - 1 ) == '/' )		6262589	5					
ANR	6262830	Condition	dst > s + 1 && * ( dst - 1 ) == '/'	52:5:1007:1038	6262589	0	True				
ANR	6262831	AndExpression	dst > s + 1 && * ( dst - 1 ) == '/'		6262589	0		&&			
ANR	6262832	RelationalExpression	dst > s + 1		6262589	0		>			
ANR	6262833	Identifier	dst		6262589	0					
ANR	6262834	AdditiveExpression	s + 1		6262589	1		+			
ANR	6262835	Identifier	s		6262589	0					
ANR	6262836	PrimaryExpression	1		6262589	1					
ANR	6262837	EqualityExpression	* ( dst - 1 ) == '/'		6262589	1		==			
ANR	6262838	UnaryOperationExpression	* ( dst - 1 )		6262589	0					
ANR	6262839	UnaryOperator	*		6262589	0					
ANR	6262840	AdditiveExpression	dst - 1		6262589	1		-			
ANR	6262841	Identifier	dst		6262589	0					
ANR	6262842	PrimaryExpression	1		6262589	1					
ANR	6262843	PrimaryExpression	'/'		6262589	1					
ANR	6262844	CompoundStatement		39:39:735:735	6262589	1					
ANR	6262845	ExpressionStatement	* ( dst - 1 ) = 0	53:2:1045:1059	6262589	0	True				
ANR	6262846	AssignmentExpression	* ( dst - 1 ) = 0		6262589	0		=			
ANR	6262847	UnaryOperationExpression	* ( dst - 1 )		6262589	0					
ANR	6262848	UnaryOperator	*		6262589	0					
ANR	6262849	AdditiveExpression	dst - 1		6262589	1		-			
ANR	6262850	Identifier	dst		6262589	0					
ANR	6262851	PrimaryExpression	1		6262589	1					
ANR	6262852	PrimaryExpression	0		6262589	1					
ANR	6262853	ElseStatement	else		6262589	0					
ANR	6262854	CompoundStatement		41:8:763:763	6262589	0					
ANR	6262855	ExpressionStatement	* dst = 0	55:2:1073:1081	6262589	0	True				
ANR	6262856	AssignmentExpression	* dst = 0		6262589	0		=			
ANR	6262857	UnaryOperationExpression	* dst		6262589	0					
ANR	6262858	UnaryOperator	*		6262589	0					
ANR	6262859	Identifier	dst		6262589	1					
ANR	6262860	PrimaryExpression	0		6262589	1					
ANR	6262861	ReturnType	R_API void		6262589	1					
ANR	6262862	Identifier	r_str_trim_path		6262589	2					
ANR	6262863	ParameterList	char * s		6262589	3					
ANR	6262864	Parameter	char * s	14:27:296:302	6262589	0	True				
ANR	6262865	ParameterType	char *		6262589	0					
ANR	6262866	Identifier	s		6262589	1					
ANR	6262867	CFGEntryNode	ENTRY		6262589		True				
ANR	6262868	CFGExitNode	EXIT		6262589		True				
ANR	6262869	Symbol	dst		6262589						
ANR	6262870	Symbol	src		6262589						
ANR	6262871	Symbol	i		6262589						
ANR	6262872	Symbol	* ( src + 1 )		6262589						
ANR	6262873	Symbol	* ( dst - 1 )		6262589						
ANR	6262874	Symbol	* src		6262589						
ANR	6262875	Symbol	* ( src + 2 )		6262589						
ANR	6262876	Symbol	p		6262589						
ANR	6262877	Symbol	* dst		6262589						
ANR	6262878	Symbol	* ( src - 1 )		6262589						
ANR	6262879	Symbol	s		6262589						
ANR	6262880	Symbol	* p		6262589						
ANR	6262881	Symbol	* s		6262589						
ANR	6262882	Function	r_str_trim_lines	59:0:1089:1489							
ANR	6262883	FunctionDef	r_str_trim_lines (char * str)		6262882	0					
ANR	6262884	CompoundStatement		59:40:1129:1489	6262882	0					
ANR	6262885	IdentifierDeclStatement	"RList * list = r_str_split_list ( str , ""\\n"" , 0 ) ;"	60:1:1132:1177	6262882	0	True				
ANR	6262886	IdentifierDecl	"* list = r_str_split_list ( str , ""\\n"" , 0 )"		6262882	0					
ANR	6262887	IdentifierDeclType	RList *		6262882	0					
ANR	6262888	Identifier	list		6262882	1					
ANR	6262889	AssignmentExpression	"* list = r_str_split_list ( str , ""\\n"" , 0 )"		6262882	2		=			
ANR	6262890	Identifier	list		6262882	0					
ANR	6262891	CallExpression	"r_str_split_list ( str , ""\\n"" , 0 )"		6262882	1					
ANR	6262892	Callee	r_str_split_list		6262882	0					
ANR	6262893	Identifier	r_str_split_list		6262882	0					
ANR	6262894	ArgumentList	str		6262882	1					
ANR	6262895	Argument	str		6262882	0					
ANR	6262896	Identifier	str		6262882	0					
ANR	6262897	Argument	"""\\n"""		6262882	1					
ANR	6262898	PrimaryExpression	"""\\n"""		6262882	0					
ANR	6262899	Argument	0		6262882	2					
ANR	6262900	PrimaryExpression	0		6262882	0					
ANR	6262901	IdentifierDeclStatement	char * s ;	61:1:1180:1187	6262882	1	True				
ANR	6262902	IdentifierDecl	* s		6262882	0					
ANR	6262903	IdentifierDeclType	char *		6262882	0					
ANR	6262904	Identifier	s		6262882	1					
ANR	6262905	IdentifierDeclStatement	RListIter * iter ;	62:1:1190:1205	6262882	2	True				
ANR	6262906	IdentifierDecl	* iter		6262882	0					
ANR	6262907	IdentifierDeclType	RListIter *		6262882	0					
ANR	6262908	Identifier	iter		6262882	1					
ANR	6262909	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	63:1:1208:1239	6262882	3	True				
ANR	6262910	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		6262882	0					
ANR	6262911	IdentifierDeclType	RStrBuf *		6262882	0					
ANR	6262912	Identifier	sb		6262882	1					
ANR	6262913	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		6262882	2		=			
ANR	6262914	Identifier	sb		6262882	0					
ANR	6262915	CallExpression	"r_strbuf_new ( """" )"		6262882	1					
ANR	6262916	Callee	r_strbuf_new		6262882	0					
ANR	6262917	Identifier	r_strbuf_new		6262882	0					
ANR	6262918	ArgumentList	""""""		6262882	1					
ANR	6262919	Argument	""""""		6262882	0					
ANR	6262920	PrimaryExpression	""""""		6262882	0					
ANR	6262921	Statement	r_list_foreach	64:1:1242:1255	6262882	4	True				
ANR	6262922	Statement	(	64:16:1257:1257	6262882	5	True				
ANR	6262923	Statement	list	64:17:1258:1261	6262882	6	True				
ANR	6262924	Statement	","	64:21:1262:1262	6262882	7	True				
ANR	6262925	Statement	iter	64:23:1264:1267	6262882	8	True				
ANR	6262926	Statement	","	64:27:1268:1268	6262882	9	True				
ANR	6262927	Statement	s	64:29:1270:1270	6262882	10	True				
ANR	6262928	Statement	)	64:30:1271:1271	6262882	11	True				
ANR	6262929	CompoundStatement		6:32:143:143	6262882	12					
ANR	6262930	ExpressionStatement	"r_str_ansi_filter ( s , NULL , NULL , - 1 )"	66:2:1313:1350	6262882	0	True				
ANR	6262931	CallExpression	"r_str_ansi_filter ( s , NULL , NULL , - 1 )"		6262882	0					
ANR	6262932	Callee	r_str_ansi_filter		6262882	0					
ANR	6262933	Identifier	r_str_ansi_filter		6262882	0					
ANR	6262934	ArgumentList	s		6262882	1					
ANR	6262935	Argument	s		6262882	0					
ANR	6262936	Identifier	s		6262882	0					
ANR	6262937	Argument	NULL		6262882	1					
ANR	6262938	Identifier	NULL		6262882	0					
ANR	6262939	Argument	NULL		6262882	2					
ANR	6262940	Identifier	NULL		6262882	0					
ANR	6262941	Argument	- 1		6262882	3					
ANR	6262942	UnaryOperationExpression	- 1		6262882	0					
ANR	6262943	UnaryOperator	-		6262882	0					
ANR	6262944	PrimaryExpression	1		6262882	1					
ANR	6262945	ExpressionStatement	r_str_trim ( s )	67:2:1354:1368	6262882	1	True				
ANR	6262946	CallExpression	r_str_trim ( s )		6262882	0					
ANR	6262947	Callee	r_str_trim		6262882	0					
ANR	6262948	Identifier	r_str_trim		6262882	0					
ANR	6262949	ArgumentList	s		6262882	1					
ANR	6262950	Argument	s		6262882	0					
ANR	6262951	Identifier	s		6262882	0					
ANR	6262952	IfStatement	if ( * s )		6262882	2					
ANR	6262953	Condition	* s	68:6:1376:1377	6262882	0	True				
ANR	6262954	UnaryOperationExpression	* s		6262882	0					
ANR	6262955	UnaryOperator	*		6262882	0					
ANR	6262956	Identifier	s		6262882	1					
ANR	6262957	CompoundStatement		10:10:250:250	6262882	1					
ANR	6262958	ExpressionStatement	"r_strbuf_appendf ( sb , ""%s\\n"" , s )"	69:3:1385:1417	6262882	0	True				
ANR	6262959	CallExpression	"r_strbuf_appendf ( sb , ""%s\\n"" , s )"		6262882	0					
ANR	6262960	Callee	r_strbuf_appendf		6262882	0					
ANR	6262961	Identifier	r_strbuf_appendf		6262882	0					
ANR	6262962	ArgumentList	sb		6262882	1					
ANR	6262963	Argument	sb		6262882	0					
ANR	6262964	Identifier	sb		6262882	0					
ANR	6262965	Argument	"""%s\\n"""		6262882	1					
ANR	6262966	PrimaryExpression	"""%s\\n"""		6262882	0					
ANR	6262967	Argument	s		6262882	2					
ANR	6262968	Identifier	s		6262882	0					
ANR	6262969	ExpressionStatement	r_list_free ( list )	72:1:1427:1445	6262882	13	True				
ANR	6262970	CallExpression	r_list_free ( list )		6262882	0					
ANR	6262971	Callee	r_list_free		6262882	0					
ANR	6262972	Identifier	r_list_free		6262882	0					
ANR	6262973	ArgumentList	list		6262882	1					
ANR	6262974	Argument	list		6262882	0					
ANR	6262975	Identifier	list		6262882	0					
ANR	6262976	ExpressionStatement	free ( str )	73:1:1448:1458	6262882	14	True				
ANR	6262977	CallExpression	free ( str )		6262882	0					
ANR	6262978	Callee	free		6262882	0					
ANR	6262979	Identifier	free		6262882	0					
ANR	6262980	ArgumentList	str		6262882	1					
ANR	6262981	Argument	str		6262882	0					
ANR	6262982	Identifier	str		6262882	0					
ANR	6262983	ReturnStatement	return r_strbuf_drain ( sb ) ;	74:1:1461:1487	6262882	15	True				
ANR	6262984	CallExpression	r_strbuf_drain ( sb )		6262882	0					
ANR	6262985	Callee	r_strbuf_drain		6262882	0					
ANR	6262986	Identifier	r_strbuf_drain		6262882	0					
ANR	6262987	ArgumentList	sb		6262882	1					
ANR	6262988	Argument	sb		6262882	0					
ANR	6262989	Identifier	sb		6262882	0					
ANR	6262990	ReturnType	R_API char *		6262882	1					
ANR	6262991	Identifier	r_str_trim_lines		6262882	2					
ANR	6262992	ParameterList	char * str		6262882	3					
ANR	6262993	Parameter	char * str	59:29:1118:1126	6262882	0	True				
ANR	6262994	ParameterType	char *		6262882	0					
ANR	6262995	Identifier	str		6262882	1					
ANR	6262996	CFGEntryNode	ENTRY		6262882		True				
ANR	6262997	CFGExitNode	EXIT		6262882		True				
ANR	6262998	Symbol	str		6262882						
ANR	6262999	Symbol	s		6262882						
ANR	6263000	Symbol	r_strbuf_new		6262882						
ANR	6263001	Symbol	NULL		6262882						
ANR	6263002	Symbol	r_str_split_list		6262882						
ANR	6263003	Symbol	r_strbuf_drain		6262882						
ANR	6263004	Symbol	iter		6262882						
ANR	6263005	Symbol	list		6262882						
ANR	6263006	Symbol	* s		6262882						
ANR	6263007	Symbol	sb		6262882						
ANR	6263008	Function	r_str_trim_dup	77:0:1492:1591							
ANR	6263009	FunctionDef	r_str_trim_dup (const char * str)		6263008	0					
ANR	6263010	CompoundStatement		77:44:1536:1591	6263008	0					
ANR	6263011	IdentifierDeclStatement	char * a = strdup ( str ) ;	78:1:1539:1561	6263008	0	True				
ANR	6263012	IdentifierDecl	* a = strdup ( str )		6263008	0					
ANR	6263013	IdentifierDeclType	char *		6263008	0					
ANR	6263014	Identifier	a		6263008	1					
ANR	6263015	AssignmentExpression	* a = strdup ( str )		6263008	2		=			
ANR	6263016	Identifier	a		6263008	0					
ANR	6263017	CallExpression	strdup ( str )		6263008	1					
ANR	6263018	Callee	strdup		6263008	0					
ANR	6263019	Identifier	strdup		6263008	0					
ANR	6263020	ArgumentList	str		6263008	1					
ANR	6263021	Argument	str		6263008	0					
ANR	6263022	Identifier	str		6263008	0					
ANR	6263023	ExpressionStatement	r_str_trim ( a )	79:1:1564:1578	6263008	1	True				
ANR	6263024	CallExpression	r_str_trim ( a )		6263008	0					
ANR	6263025	Callee	r_str_trim		6263008	0					
ANR	6263026	Identifier	r_str_trim		6263008	0					
ANR	6263027	ArgumentList	a		6263008	1					
ANR	6263028	Argument	a		6263008	0					
ANR	6263029	Identifier	a		6263008	0					
ANR	6263030	ReturnStatement	return a ;	80:1:1581:1589	6263008	2	True				
ANR	6263031	Identifier	a		6263008	0					
ANR	6263032	ReturnType	R_API char *		6263008	1					
ANR	6263033	Identifier	r_str_trim_dup		6263008	2					
ANR	6263034	ParameterList	const char * str		6263008	3					
ANR	6263035	Parameter	const char * str	77:27:1519:1533	6263008	0	True				
ANR	6263036	ParameterType	const char *		6263008	0					
ANR	6263037	Identifier	str		6263008	1					
ANR	6263038	CFGEntryNode	ENTRY		6263008		True				
ANR	6263039	CFGExitNode	EXIT		6263008		True				
ANR	6263040	Symbol	str		6263008						
ANR	6263041	Symbol	a		6263008						
ANR	6263042	Symbol	strdup		6263008						
ANR	6263043	Function	r_str_trim	83:0:1594:2035							
ANR	6263044	FunctionDef	r_str_trim (char * str)		6263043	0					
ANR	6263045	CompoundStatement		83:33:1627:2035	6263043	0					
ANR	6263046	ExpressionStatement	r_return_if_fail ( str )	84:1:1630:1652	6263043	0	True				
ANR	6263047	CallExpression	r_return_if_fail ( str )		6263043	0					
ANR	6263048	Callee	r_return_if_fail		6263043	0					
ANR	6263049	Identifier	r_return_if_fail		6263043	0					
ANR	6263050	ArgumentList	str		6263043	1					
ANR	6263051	Argument	str		6263043	0					
ANR	6263052	Identifier	str		6263043	0					
ANR	6263053	IdentifierDeclStatement	char * nonwhite = str ;	85:1:1655:1675	6263043	1	True				
ANR	6263054	IdentifierDecl	* nonwhite = str		6263043	0					
ANR	6263055	IdentifierDeclType	char *		6263043	0					
ANR	6263056	Identifier	nonwhite		6263043	1					
ANR	6263057	AssignmentExpression	* nonwhite = str		6263043	2		=			
ANR	6263058	Identifier	str		6263043	0					
ANR	6263059	Identifier	str		6263043	1					
ANR	6263060	WhileStatement	while ( * nonwhite && IS_WHITECHAR ( * nonwhite ) )		6263043	2					
ANR	6263061	Condition	* nonwhite && IS_WHITECHAR ( * nonwhite )	86:8:1685:1721	6263043	0	True				
ANR	6263062	AndExpression	* nonwhite && IS_WHITECHAR ( * nonwhite )		6263043	0		&&			
ANR	6263063	UnaryOperationExpression	* nonwhite		6263043	0					
ANR	6263064	UnaryOperator	*		6263043	0					
ANR	6263065	Identifier	nonwhite		6263043	1					
ANR	6263066	CallExpression	IS_WHITECHAR ( * nonwhite )		6263043	1					
ANR	6263067	Callee	IS_WHITECHAR		6263043	0					
ANR	6263068	Identifier	IS_WHITECHAR		6263043	0					
ANR	6263069	ArgumentList	* nonwhite		6263043	1					
ANR	6263070	Argument	* nonwhite		6263043	0					
ANR	6263071	UnaryOperationExpression	* nonwhite		6263043	0					
ANR	6263072	UnaryOperator	*		6263043	0					
ANR	6263073	Identifier	nonwhite		6263043	1					
ANR	6263074	CompoundStatement		4:47:96:96	6263043	1					
ANR	6263075	ExpressionStatement	nonwhite ++	87:2:1728:1738	6263043	0	True				
ANR	6263076	PostIncDecOperationExpression	nonwhite ++		6263043	0					
ANR	6263077	Identifier	nonwhite		6263043	0					
ANR	6263078	IncDec	++		6263043	1					
ANR	6263079	IdentifierDeclStatement	int len = strlen ( str ) ;	89:1:1744:1766	6263043	3	True				
ANR	6263080	IdentifierDecl	len = strlen ( str )		6263043	0					
ANR	6263081	IdentifierDeclType	int		6263043	0					
ANR	6263082	Identifier	len		6263043	1					
ANR	6263083	AssignmentExpression	len = strlen ( str )		6263043	2		=			
ANR	6263084	Identifier	len		6263043	0					
ANR	6263085	CallExpression	strlen ( str )		6263043	1					
ANR	6263086	Callee	strlen		6263043	0					
ANR	6263087	Identifier	strlen		6263043	0					
ANR	6263088	ArgumentList	str		6263043	1					
ANR	6263089	Argument	str		6263043	0					
ANR	6263090	Identifier	str		6263043	0					
ANR	6263091	IfStatement	if ( str != nonwhite )		6263043	4					
ANR	6263092	Condition	str != nonwhite	90:5:1773:1787	6263043	0	True				
ANR	6263093	EqualityExpression	str != nonwhite		6263043	0		!=			
ANR	6263094	Identifier	str		6263043	0					
ANR	6263095	Identifier	nonwhite		6263043	1					
ANR	6263096	CompoundStatement		9:2:166:202	6263043	1					
ANR	6263097	IdentifierDeclStatement	int delta = ( size_t ) ( nonwhite - str ) ;	91:2:1794:1830	6263043	0	True				
ANR	6263098	IdentifierDecl	delta = ( size_t ) ( nonwhite - str )		6263043	0					
ANR	6263099	IdentifierDeclType	int		6263043	0					
ANR	6263100	Identifier	delta		6263043	1					
ANR	6263101	AssignmentExpression	delta = ( size_t ) ( nonwhite - str )		6263043	2		=			
ANR	6263102	Identifier	delta		6263043	0					
ANR	6263103	CastExpression	( size_t ) ( nonwhite - str )		6263043	1					
ANR	6263104	CastTarget	size_t		6263043	0					
ANR	6263105	AdditiveExpression	nonwhite - str		6263043	1		-			
ANR	6263106	Identifier	nonwhite		6263043	0					
ANR	6263107	Identifier	str		6263043	1					
ANR	6263108	ExpressionStatement	len -= delta	92:2:1834:1846	6263043	1	True				
ANR	6263109	AssignmentExpression	len -= delta		6263043	0		-=			
ANR	6263110	Identifier	len		6263043	0					
ANR	6263111	Identifier	delta		6263043	1					
ANR	6263112	ExpressionStatement	"memmove ( str , nonwhite , len + 1 )"	93:2:1850:1882	6263043	2	True				
ANR	6263113	CallExpression	"memmove ( str , nonwhite , len + 1 )"		6263043	0					
ANR	6263114	Callee	memmove		6263043	0					
ANR	6263115	Identifier	memmove		6263043	0					
ANR	6263116	ArgumentList	str		6263043	1					
ANR	6263117	Argument	str		6263043	0					
ANR	6263118	Identifier	str		6263043	0					
ANR	6263119	Argument	nonwhite		6263043	1					
ANR	6263120	Identifier	nonwhite		6263043	0					
ANR	6263121	Argument	len + 1		6263043	2					
ANR	6263122	AdditiveExpression	len + 1		6263043	0		+			
ANR	6263123	Identifier	len		6263043	0					
ANR	6263124	PrimaryExpression	1		6263043	1					
ANR	6263125	IfStatement	if ( len > 0 )		6263043	5					
ANR	6263126	Condition	len > 0	95:5:1892:1898	6263043	0	True				
ANR	6263127	RelationalExpression	len > 0		6263043	0		>			
ANR	6263128	Identifier	len		6263043	0					
ANR	6263129	PrimaryExpression	0		6263043	1					
ANR	6263130	CompoundStatement		14:2:277:286	6263043	1					
ANR	6263131	IdentifierDeclStatement	char * ptr ;	96:2:1905:1914	6263043	0	True				
ANR	6263132	IdentifierDecl	* ptr		6263043	0					
ANR	6263133	IdentifierDeclType	char *		6263043	0					
ANR	6263134	Identifier	ptr		6263043	1					
ANR	6263135	ForStatement	for ( ptr = str + len - 1 ; ptr != str ; ptr -- )		6263043	1					
ANR	6263136	ForInit	ptr = str + len - 1 ;	97:7:1923:1942	6263043	0	True				
ANR	6263137	AssignmentExpression	ptr = str + len - 1		6263043	0		=			
ANR	6263138	Identifier	ptr		6263043	0					
ANR	6263139	AdditiveExpression	str + len - 1		6263043	1		+			
ANR	6263140	Identifier	str		6263043	0					
ANR	6263141	AdditiveExpression	len - 1		6263043	1		-			
ANR	6263142	Identifier	len		6263043	0					
ANR	6263143	PrimaryExpression	1		6263043	1					
ANR	6263144	Condition	ptr != str	97:28:1944:1953	6263043	1	True				
ANR	6263145	EqualityExpression	ptr != str		6263043	0		!=			
ANR	6263146	Identifier	ptr		6263043	0					
ANR	6263147	Identifier	str		6263043	1					
ANR	6263148	PostIncDecOperationExpression	ptr --	97:40:1956:1960	6263043	2	True				
ANR	6263149	Identifier	ptr		6263043	0					
ANR	6263150	IncDec	--		6263043	1					
ANR	6263151	CompoundStatement		15:47:335:335	6263043	3					
ANR	6263152	IfStatement	if ( ! IS_WHITECHAR ( * ptr ) )		6263043	0					
ANR	6263153	Condition	! IS_WHITECHAR ( * ptr )	98:7:1972:1991	6263043	0	True				
ANR	6263154	UnaryOperationExpression	! IS_WHITECHAR ( * ptr )		6263043	0					
ANR	6263155	UnaryOperator	!		6263043	0					
ANR	6263156	CallExpression	IS_WHITECHAR ( * ptr )		6263043	1					
ANR	6263157	Callee	IS_WHITECHAR		6263043	0					
ANR	6263158	Identifier	IS_WHITECHAR		6263043	0					
ANR	6263159	ArgumentList	* ptr		6263043	1					
ANR	6263160	Argument	* ptr		6263043	0					
ANR	6263161	UnaryOperationExpression	* ptr		6263043	0					
ANR	6263162	UnaryOperator	*		6263043	0					
ANR	6263163	Identifier	ptr		6263043	1					
ANR	6263164	CompoundStatement		16:29:366:366	6263043	1					
ANR	6263165	BreakStatement	break ;	99:4:2000:2005	6263043	0	True				
ANR	6263166	ExpressionStatement	* ptr = '\\0'	101:3:2015:2026	6263043	1	True				
ANR	6263167	AssignmentExpression	* ptr = '\\0'		6263043	0		=			
ANR	6263168	UnaryOperationExpression	* ptr		6263043	0					
ANR	6263169	UnaryOperator	*		6263043	0					
ANR	6263170	Identifier	ptr		6263043	1					
ANR	6263171	PrimaryExpression	'\\0'		6263043	1					
ANR	6263172	ReturnType	R_API void		6263043	1					
ANR	6263173	Identifier	r_str_trim		6263043	2					
ANR	6263174	ParameterList	char * str		6263043	3					
ANR	6263175	Parameter	char * str	83:22:1616:1624	6263043	0	True				
ANR	6263176	ParameterType	char *		6263043	0					
ANR	6263177	Identifier	str		6263043	1					
ANR	6263178	CFGEntryNode	ENTRY		6263043		True				
ANR	6263179	CFGExitNode	EXIT		6263043		True				
ANR	6263180	Symbol	str		6263043						
ANR	6263181	Symbol	* nonwhite		6263043						
ANR	6263182	Symbol	strlen		6263043						
ANR	6263183	Symbol	len		6263043						
ANR	6263184	Symbol	IS_WHITECHAR		6263043						
ANR	6263185	Symbol	delta		6263043						
ANR	6263186	Symbol	* ptr		6263043						
ANR	6263187	Symbol	nonwhite		6263043						
ANR	6263188	Symbol	ptr		6263043						
ANR	6263189	Function	r_str_trim_ro	108:6:2151:2280							
ANR	6263190	FunctionDef	r_str_trim_ro (const char * str)		6263189	0					
ANR	6263191	CompoundStatement		108:49:2194:2280	6263189	0					
ANR	6263192	IfStatement	if ( str )		6263189	0					
ANR	6263193	Condition	str	109:5:2201:2203	6263189	0	True				
ANR	6263194	Identifier	str		6263189	0					
ANR	6263195	CompoundStatement		2:10:11:11	6263189	1					
ANR	6263196	ForStatement	for ( ; * str && IS_WHITECHAR ( * str ) ; str ++ )		6263189	0					
ANR	6263197	Condition	* str && IS_WHITECHAR ( * str )	110:9:2217:2243	6263189	0	True				
ANR	6263198	AndExpression	* str && IS_WHITECHAR ( * str )		6263189	0		&&			
ANR	6263199	UnaryOperationExpression	* str		6263189	0					
ANR	6263200	UnaryOperator	*		6263189	0					
ANR	6263201	Identifier	str		6263189	1					
ANR	6263202	CallExpression	IS_WHITECHAR ( * str )		6263189	1					
ANR	6263203	Callee	IS_WHITECHAR		6263189	0					
ANR	6263204	Identifier	IS_WHITECHAR		6263189	0					
ANR	6263205	ArgumentList	* str		6263189	1					
ANR	6263206	Argument	* str		6263189	0					
ANR	6263207	UnaryOperationExpression	* str		6263189	0					
ANR	6263208	UnaryOperator	*		6263189	0					
ANR	6263209	Identifier	str		6263189	1					
ANR	6263210	PostIncDecOperationExpression	str ++	110:38:2246:2250	6263189	1	True				
ANR	6263211	Identifier	str		6263189	0					
ANR	6263212	IncDec	++		6263189	1					
ANR	6263213	CompoundStatement		3:45:58:58	6263189	2					
ANR	6263214	ExpressionStatement		111:3:2258:2258	6263189	0	True				
ANR	6263215	ReturnStatement	return str ;	114:1:2268:2278	6263189	1	True				
ANR	6263216	Identifier	str		6263189	0					
ANR	6263217	ReturnType	const char *		6263189	1					
ANR	6263218	Identifier	r_str_trim_ro		6263189	2					
ANR	6263219	ParameterList	const char * str		6263189	3					
ANR	6263220	Parameter	const char * str	108:32:2177:2191	6263189	0	True				
ANR	6263221	ParameterType	const char *		6263189	0					
ANR	6263222	Identifier	str		6263189	1					
ANR	6263223	CFGEntryNode	ENTRY		6263189		True				
ANR	6263224	CFGExitNode	EXIT		6263189		True				
ANR	6263225	Symbol	str		6263189						
ANR	6263226	Symbol	IS_WHITECHAR		6263189						
ANR	6263227	Symbol	* str		6263189						
ANR	6263228	Function	r_str_trim_wp	119:6:2392:2523							
ANR	6263229	FunctionDef	r_str_trim_wp (const char * str)		6263228	0					
ANR	6263230	CompoundStatement		119:49:2435:2523	6263228	0					
ANR	6263231	IfStatement	if ( str )		6263228	0					
ANR	6263232	Condition	str	120:5:2442:2444	6263228	0	True				
ANR	6263233	Identifier	str		6263228	0					
ANR	6263234	CompoundStatement		2:10:11:11	6263228	1					
ANR	6263235	ForStatement	for ( ; * str && ! IS_WHITESPACE ( * str ) ; str ++ )		6263228	0					
ANR	6263236	Condition	* str && ! IS_WHITESPACE ( * str )	121:9:2458:2486	6263228	0	True				
ANR	6263237	AndExpression	* str && ! IS_WHITESPACE ( * str )		6263228	0		&&			
ANR	6263238	UnaryOperationExpression	* str		6263228	0					
ANR	6263239	UnaryOperator	*		6263228	0					
ANR	6263240	Identifier	str		6263228	1					
ANR	6263241	UnaryOperationExpression	! IS_WHITESPACE ( * str )		6263228	1					
ANR	6263242	UnaryOperator	!		6263228	0					
ANR	6263243	CallExpression	IS_WHITESPACE ( * str )		6263228	1					
ANR	6263244	Callee	IS_WHITESPACE		6263228	0					
ANR	6263245	Identifier	IS_WHITESPACE		6263228	0					
ANR	6263246	ArgumentList	* str		6263228	1					
ANR	6263247	Argument	* str		6263228	0					
ANR	6263248	UnaryOperationExpression	* str		6263228	0					
ANR	6263249	UnaryOperator	*		6263228	0					
ANR	6263250	Identifier	str		6263228	1					
ANR	6263251	PostIncDecOperationExpression	str ++	121:40:2489:2493	6263228	1	True				
ANR	6263252	Identifier	str		6263228	0					
ANR	6263253	IncDec	++		6263228	1					
ANR	6263254	CompoundStatement		3:47:60:60	6263228	2					
ANR	6263255	ExpressionStatement		122:3:2501:2501	6263228	0	True				
ANR	6263256	ReturnStatement	return str ;	125:1:2511:2521	6263228	1	True				
ANR	6263257	Identifier	str		6263228	0					
ANR	6263258	ReturnType	const char *		6263228	1					
ANR	6263259	Identifier	r_str_trim_wp		6263228	2					
ANR	6263260	ParameterList	const char * str		6263228	3					
ANR	6263261	Parameter	const char * str	119:32:2418:2432	6263228	0	True				
ANR	6263262	ParameterType	const char *		6263228	0					
ANR	6263263	Identifier	str		6263228	1					
ANR	6263264	CFGEntryNode	ENTRY		6263228		True				
ANR	6263265	CFGExitNode	EXIT		6263228		True				
ANR	6263266	Symbol	str		6263228						
ANR	6263267	Symbol	* str		6263228						
ANR	6263268	Symbol	IS_WHITESPACE		6263228						
ANR	6263269	Function	r_str_trim_head	130:0:2609:2753							
ANR	6263270	FunctionDef	r_str_trim_head (char * str)		6263269	0					
ANR	6263271	CompoundStatement		130:39:2648:2753	6263269	0					
ANR	6263272	IdentifierDeclStatement	char * p = ( char * ) r_str_trim_ro ( str ) ;	131:1:2651:2688	6263269	0	True				
ANR	6263273	IdentifierDecl	* p = ( char * ) r_str_trim_ro ( str )		6263269	0					
ANR	6263274	IdentifierDeclType	char *		6263269	0					
ANR	6263275	Identifier	p		6263269	1					
ANR	6263276	AssignmentExpression	* p = ( char * ) r_str_trim_ro ( str )		6263269	2		=			
ANR	6263277	Identifier	p		6263269	0					
ANR	6263278	CastExpression	( char * ) r_str_trim_ro ( str )		6263269	1					
ANR	6263279	CastTarget	char *		6263269	0					
ANR	6263280	CallExpression	r_str_trim_ro ( str )		6263269	1					
ANR	6263281	Callee	r_str_trim_ro		6263269	0					
ANR	6263282	Identifier	r_str_trim_ro		6263269	0					
ANR	6263283	ArgumentList	str		6263269	1					
ANR	6263284	Argument	str		6263269	0					
ANR	6263285	Identifier	str		6263269	0					
ANR	6263286	ExpressionStatement		131:39:2689:2689	6263269	1	True				
ANR	6263287	IfStatement	if ( p )		6263269	2					
ANR	6263288	Condition	p	132:5:2696:2696	6263269	0	True				
ANR	6263289	Identifier	p		6263269	0					
ANR	6263290	CompoundStatement		3:8:50:50	6263269	1					
ANR	6263291	ExpressionStatement	"memmove ( str , p , strlen ( p ) + 1 )"	133:2:2703:2735	6263269	0	True				
ANR	6263292	CallExpression	"memmove ( str , p , strlen ( p ) + 1 )"		6263269	0					
ANR	6263293	Callee	memmove		6263269	0					
ANR	6263294	Identifier	memmove		6263269	0					
ANR	6263295	ArgumentList	str		6263269	1					
ANR	6263296	Argument	str		6263269	0					
ANR	6263297	Identifier	str		6263269	0					
ANR	6263298	Argument	p		6263269	1					
ANR	6263299	Identifier	p		6263269	0					
ANR	6263300	Argument	strlen ( p ) + 1		6263269	2					
ANR	6263301	AdditiveExpression	strlen ( p ) + 1		6263269	0		+			
ANR	6263302	CallExpression	strlen ( p )		6263269	0					
ANR	6263303	Callee	strlen		6263269	0					
ANR	6263304	Identifier	strlen		6263269	0					
ANR	6263305	ArgumentList	p		6263269	1					
ANR	6263306	Argument	p		6263269	0					
ANR	6263307	Identifier	p		6263269	0					
ANR	6263308	PrimaryExpression	1		6263269	1					
ANR	6263309	ReturnStatement	return str ;	135:1:2741:2751	6263269	3	True				
ANR	6263310	Identifier	str		6263269	0					
ANR	6263311	ReturnType	R_API char *		6263269	1					
ANR	6263312	Identifier	r_str_trim_head		6263269	2					
ANR	6263313	ParameterList	char * str		6263269	3					
ANR	6263314	Parameter	char * str	130:28:2637:2645	6263269	0	True				
ANR	6263315	ParameterType	char *		6263269	0					
ANR	6263316	Identifier	str		6263269	1					
ANR	6263317	CFGEntryNode	ENTRY		6263269		True				
ANR	6263318	CFGExitNode	EXIT		6263269		True				
ANR	6263319	Symbol	str		6263269						
ANR	6263320	Symbol	p		6263269						
ANR	6263321	Symbol	strlen		6263269						
ANR	6263322	Symbol	r_str_trim_ro		6263269						
ANR	6263323	Function	r_str_trim_tail	140:0:2879:3144							
ANR	6263324	FunctionDef	r_str_trim_tail (char * str)		6263323	0					
ANR	6263325	CompoundStatement		140:39:2918:3144	6263323	0					
ANR	6263326	IdentifierDeclStatement	int length ;	141:1:2921:2931	6263323	0	True				
ANR	6263327	IdentifierDecl	length		6263323	0					
ANR	6263328	IdentifierDeclType	int		6263323	0					
ANR	6263329	Identifier	length		6263323	1					
ANR	6263330	IfStatement	if ( ! str )		6263323	1					
ANR	6263331	Condition	! str	143:5:2939:2942	6263323	0	True				
ANR	6263332	UnaryOperationExpression	! str		6263323	0					
ANR	6263333	UnaryOperator	!		6263323	0					
ANR	6263334	Identifier	str		6263323	1					
ANR	6263335	CompoundStatement		4:11:26:26	6263323	1					
ANR	6263336	ReturnStatement	return NULL ;	144:2:2949:2960	6263323	0	True				
ANR	6263337	Identifier	NULL		6263323	0					
ANR	6263338	ExpressionStatement	length = strlen ( str )	146:1:2966:2987	6263323	2	True				
ANR	6263339	AssignmentExpression	length = strlen ( str )		6263323	0		=			
ANR	6263340	Identifier	length		6263323	0					
ANR	6263341	CallExpression	strlen ( str )		6263323	1					
ANR	6263342	Callee	strlen		6263323	0					
ANR	6263343	Identifier	strlen		6263323	0					
ANR	6263344	ArgumentList	str		6263323	1					
ANR	6263345	Argument	str		6263323	0					
ANR	6263346	Identifier	str		6263323	0					
ANR	6263347	IfStatement	if ( ! length )		6263323	3					
ANR	6263348	Condition	! length	147:5:2994:3000	6263323	0	True				
ANR	6263349	UnaryOperationExpression	! length		6263323	0					
ANR	6263350	UnaryOperator	!		6263323	0					
ANR	6263351	Identifier	length		6263323	1					
ANR	6263352	CompoundStatement		8:14:84:84	6263323	1					
ANR	6263353	ReturnStatement	return str ;	148:2:3007:3017	6263323	0	True				
ANR	6263354	Identifier	str		6263323	0					
ANR	6263355	WhileStatement	while ( length -- )		6263323	4					
ANR	6263356	Condition	length --	151:8:3031:3038	6263323	0	True				
ANR	6263357	PostIncDecOperationExpression	length --		6263323	0					
ANR	6263358	Identifier	length		6263323	0					
ANR	6263359	IncDec	--		6263323	1					
ANR	6263360	CompoundStatement		12:18:122:122	6263323	1					
ANR	6263361	IfStatement	if ( IS_WHITECHAR ( str [ length ] ) )		6263323	0					
ANR	6263362	Condition	IS_WHITECHAR ( str [ length ] )	152:6:3049:3074	6263323	0	True				
ANR	6263363	CallExpression	IS_WHITECHAR ( str [ length ] )		6263323	0					
ANR	6263364	Callee	IS_WHITECHAR		6263323	0					
ANR	6263365	Identifier	IS_WHITECHAR		6263323	0					
ANR	6263366	ArgumentList	str [ length ]		6263323	1					
ANR	6263367	Argument	str [ length ]		6263323	0					
ANR	6263368	ArrayIndexing	str [ length ]		6263323	0					
ANR	6263369	Identifier	str		6263323	0					
ANR	6263370	Identifier	length		6263323	1					
ANR	6263371	CompoundStatement		13:34:158:158	6263323	1					
ANR	6263372	ExpressionStatement	str [ length ] = '\\0'	153:3:3082:3100	6263323	0	True				
ANR	6263373	AssignmentExpression	str [ length ] = '\\0'		6263323	0		=			
ANR	6263374	ArrayIndexing	str [ length ]		6263323	0					
ANR	6263375	Identifier	str		6263323	0					
ANR	6263376	Identifier	length		6263323	1					
ANR	6263377	PrimaryExpression	'\\0'		6263323	1					
ANR	6263378	ElseStatement	else		6263323	0					
ANR	6263379	CompoundStatement		15:9:192:192	6263323	0					
ANR	6263380	BreakStatement	break ;	155:3:3116:3121	6263323	0	True				
ANR	6263381	ReturnStatement	return str ;	159:1:3132:3142	6263323	5	True				
ANR	6263382	Identifier	str		6263323	0					
ANR	6263383	ReturnType	R_API char *		6263323	1					
ANR	6263384	Identifier	r_str_trim_tail		6263323	2					
ANR	6263385	ParameterList	char * str		6263323	3					
ANR	6263386	Parameter	char * str	140:28:2907:2915	6263323	0	True				
ANR	6263387	ParameterType	char *		6263323	0					
ANR	6263388	Identifier	str		6263323	1					
ANR	6263389	CFGEntryNode	ENTRY		6263323		True				
ANR	6263390	CFGExitNode	EXIT		6263323		True				
ANR	6263391	Symbol	str		6263323						
ANR	6263392	Symbol	strlen		6263323						
ANR	6263393	Symbol	NULL		6263323						
ANR	6263394	Symbol	IS_WHITECHAR		6263323						
ANR	6263395	Symbol	length		6263323						
ANR	6263396	Symbol	* length		6263323						
ANR	6263397	Symbol	* str		6263323						
ANR	6263398	Function	r_str_trim_head_tail	164:0:3284:3379							
ANR	6263399	FunctionDef	r_str_trim_head_tail (char * str)		6263398	0					
ANR	6263400	CompoundStatement		164:44:3328:3379	6263398	0					
ANR	6263401	ReturnStatement	return r_str_trim_tail ( r_str_trim_head ( str ) ) ;	165:1:3331:3377	6263398	0	True				
ANR	6263402	CallExpression	r_str_trim_tail ( r_str_trim_head ( str ) )		6263398	0					
ANR	6263403	Callee	r_str_trim_tail		6263398	0					
ANR	6263404	Identifier	r_str_trim_tail		6263398	0					
ANR	6263405	ArgumentList	r_str_trim_head ( str )		6263398	1					
ANR	6263406	Argument	r_str_trim_head ( str )		6263398	0					
ANR	6263407	CallExpression	r_str_trim_head ( str )		6263398	0					
ANR	6263408	Callee	r_str_trim_head		6263398	0					
ANR	6263409	Identifier	r_str_trim_head		6263398	0					
ANR	6263410	ArgumentList	str		6263398	1					
ANR	6263411	Argument	str		6263398	0					
ANR	6263412	Identifier	str		6263398	0					
ANR	6263413	ReturnType	R_API char *		6263398	1					
ANR	6263414	Identifier	r_str_trim_head_tail		6263398	2					
ANR	6263415	ParameterList	char * str		6263398	3					
ANR	6263416	Parameter	char * str	164:33:3317:3325	6263398	0	True				
ANR	6263417	ParameterType	char *		6263398	0					
ANR	6263418	Identifier	str		6263398	1					
ANR	6263419	CFGEntryNode	ENTRY		6263398		True				
ANR	6263420	CFGExitNode	EXIT		6263398		True				
ANR	6263421	Symbol	str		6263398						
ANR	6263422	Symbol	r_str_trim_head		6263398						
ANR	6263423	Symbol	r_str_trim_tail		6263398						
ANR	6263424	Function	r_str_trim_nc	169:0:3436:3544							
ANR	6263425	FunctionDef	r_str_trim_nc (char * str)		6263424	0					
ANR	6263426	CompoundStatement		169:37:3473:3544	6263424	0					
ANR	6263427	IdentifierDeclStatement	char * s = ( char * ) r_str_trim_ro ( str ) ;	170:1:3476:3513	6263424	0	True				
ANR	6263428	IdentifierDecl	* s = ( char * ) r_str_trim_ro ( str )		6263424	0					
ANR	6263429	IdentifierDeclType	char *		6263424	0					
ANR	6263430	Identifier	s		6263424	1					
ANR	6263431	AssignmentExpression	* s = ( char * ) r_str_trim_ro ( str )		6263424	2		=			
ANR	6263432	Identifier	s		6263424	0					
ANR	6263433	CastExpression	( char * ) r_str_trim_ro ( str )		6263424	1					
ANR	6263434	CastTarget	char *		6263424	0					
ANR	6263435	CallExpression	r_str_trim_ro ( str )		6263424	1					
ANR	6263436	Callee	r_str_trim_ro		6263424	0					
ANR	6263437	Identifier	r_str_trim_ro		6263424	0					
ANR	6263438	ArgumentList	str		6263424	1					
ANR	6263439	Argument	str		6263424	0					
ANR	6263440	Identifier	str		6263424	0					
ANR	6263441	ReturnStatement	return r_str_trim_tail ( s ) ;	171:1:3516:3542	6263424	1	True				
ANR	6263442	CallExpression	r_str_trim_tail ( s )		6263424	0					
ANR	6263443	Callee	r_str_trim_tail		6263424	0					
ANR	6263444	Identifier	r_str_trim_tail		6263424	0					
ANR	6263445	ArgumentList	s		6263424	1					
ANR	6263446	Argument	s		6263424	0					
ANR	6263447	Identifier	s		6263424	0					
ANR	6263448	ReturnType	R_API char *		6263424	1					
ANR	6263449	Identifier	r_str_trim_nc		6263424	2					
ANR	6263450	ParameterList	char * str		6263424	3					
ANR	6263451	Parameter	char * str	169:26:3462:3470	6263424	0	True				
ANR	6263452	ParameterType	char *		6263424	0					
ANR	6263453	Identifier	str		6263424	1					
ANR	6263454	CFGEntryNode	ENTRY		6263424		True				
ANR	6263455	CFGExitNode	EXIT		6263424		True				
ANR	6263456	Symbol	str		6263424						
ANR	6263457	Symbol	s		6263424						
ANR	6263458	Symbol	r_str_trim_ro		6263424						
ANR	6263459	Symbol	r_str_trim_tail		6263424						
ANR	6263460	Function	r_str_ansi_trim	175:0:3618:4421							
ANR	6263461	FunctionDef	"r_str_ansi_trim (char * str , int str_len , int n)"		6263460	0					
ANR	6263462	CompoundStatement		175:57:3675:4421	6263460	0					
ANR	6263463	IdentifierDeclStatement	"char ch , ch2 ;"	176:1:3678:3690	6263460	0	True				
ANR	6263464	IdentifierDecl	ch		6263460	0					
ANR	6263465	IdentifierDeclType	char		6263460	0					
ANR	6263466	Identifier	ch		6263460	1					
ANR	6263467	IdentifierDecl	ch2		6263460	1					
ANR	6263468	IdentifierDeclType	char		6263460	0					
ANR	6263469	Identifier	ch2		6263460	1					
ANR	6263470	IdentifierDeclStatement	"int back = 0 , i = 0 , len = 0 ;"	177:1:3693:3721	6263460	1	True				
ANR	6263471	IdentifierDecl	back = 0		6263460	0					
ANR	6263472	IdentifierDeclType	int		6263460	0					
ANR	6263473	Identifier	back		6263460	1					
ANR	6263474	AssignmentExpression	back = 0		6263460	2		=			
ANR	6263475	Identifier	back		6263460	0					
ANR	6263476	PrimaryExpression	0		6263460	1					
ANR	6263477	IdentifierDecl	i = 0		6263460	1					
ANR	6263478	IdentifierDeclType	int		6263460	0					
ANR	6263479	Identifier	i		6263460	1					
ANR	6263480	AssignmentExpression	i = 0		6263460	2		=			
ANR	6263481	Identifier	i		6263460	0					
ANR	6263482	PrimaryExpression	0		6263460	1					
ANR	6263483	IdentifierDecl	len = 0		6263460	2					
ANR	6263484	IdentifierDeclType	int		6263460	0					
ANR	6263485	Identifier	len		6263460	1					
ANR	6263486	AssignmentExpression	len = 0		6263460	2		=			
ANR	6263487	Identifier	len		6263460	0					
ANR	6263488	PrimaryExpression	0		6263460	1					
ANR	6263489	IfStatement	if ( ! str )		6263460	2					
ANR	6263490	Condition	! str	178:5:3728:3731	6263460	0	True				
ANR	6263491	UnaryOperationExpression	! str		6263460	0					
ANR	6263492	UnaryOperator	!		6263460	0					
ANR	6263493	Identifier	str		6263460	1					
ANR	6263494	CompoundStatement		4:11:58:58	6263460	1					
ANR	6263495	ReturnStatement	return 0 ;	179:2:3738:3746	6263460	0	True				
ANR	6263496	PrimaryExpression	0		6263460	0					
ANR	6263497	IfStatement	if ( str_len < 0 )		6263460	3					
ANR	6263498	Condition	str_len < 0	182:5:3792:3802	6263460	0	True				
ANR	6263499	RelationalExpression	str_len < 0		6263460	0		<			
ANR	6263500	Identifier	str_len		6263460	0					
ANR	6263501	PrimaryExpression	0		6263460	1					
ANR	6263502	CompoundStatement		8:18:129:129	6263460	1					
ANR	6263503	ExpressionStatement	str_len = strlen ( str )	183:2:3809:3831	6263460	0	True				
ANR	6263504	AssignmentExpression	str_len = strlen ( str )		6263460	0		=			
ANR	6263505	Identifier	str_len		6263460	0					
ANR	6263506	CallExpression	strlen ( str )		6263460	1					
ANR	6263507	Callee	strlen		6263460	0					
ANR	6263508	Identifier	strlen		6263460	0					
ANR	6263509	ArgumentList	str		6263460	1					
ANR	6263510	Argument	str		6263460	0					
ANR	6263511	Identifier	str		6263460	0					
ANR	6263512	IfStatement	if ( n >= str_len )		6263460	4					
ANR	6263513	Condition	n >= str_len	185:5:3841:3852	6263460	0	True				
ANR	6263514	RelationalExpression	n >= str_len		6263460	0		>=			
ANR	6263515	Identifier	n		6263460	0					
ANR	6263516	Identifier	str_len		6263460	1					
ANR	6263517	CompoundStatement		11:19:179:179	6263460	1					
ANR	6263518	ExpressionStatement	str [ str_len ] = 0	186:2:3859:3875	6263460	0	True				
ANR	6263519	AssignmentExpression	str [ str_len ] = 0		6263460	0		=			
ANR	6263520	ArrayIndexing	str [ str_len ]		6263460	0					
ANR	6263521	Identifier	str		6263460	0					
ANR	6263522	Identifier	str_len		6263460	1					
ANR	6263523	PrimaryExpression	0		6263460	1					
ANR	6263524	ReturnStatement	return str_len ;	187:2:3879:3893	6263460	1	True				
ANR	6263525	Identifier	str_len		6263460	0					
ANR	6263526	WhileStatement	while ( ( i < str_len ) && str [ i ] && len < n && n > 0 )		6263460	5					
ANR	6263527	Condition	( i < str_len ) && str [ i ] && len < n && n > 0	189:8:3906:3948	6263460	0	True				
ANR	6263528	AndExpression	( i < str_len ) && str [ i ] && len < n && n > 0		6263460	0		&&			
ANR	6263529	RelationalExpression	i < str_len		6263460	0		<			
ANR	6263530	Identifier	i		6263460	0					
ANR	6263531	Identifier	str_len		6263460	1					
ANR	6263532	AndExpression	str [ i ] && len < n && n > 0		6263460	1		&&			
ANR	6263533	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263534	Identifier	str		6263460	0					
ANR	6263535	Identifier	i		6263460	1					
ANR	6263536	AndExpression	len < n && n > 0		6263460	1		&&			
ANR	6263537	RelationalExpression	len < n		6263460	0		<			
ANR	6263538	Identifier	len		6263460	0					
ANR	6263539	Identifier	n		6263460	1					
ANR	6263540	RelationalExpression	n > 0		6263460	1		>			
ANR	6263541	Identifier	n		6263460	0					
ANR	6263542	PrimaryExpression	0		6263460	1					
ANR	6263543	CompoundStatement		15:53:275:275	6263460	1					
ANR	6263544	ExpressionStatement	ch = str [ i ]	190:2:3955:3966	6263460	0	True				
ANR	6263545	AssignmentExpression	ch = str [ i ]		6263460	0		=			
ANR	6263546	Identifier	ch		6263460	0					
ANR	6263547	ArrayIndexing	str [ i ]		6263460	1					
ANR	6263548	Identifier	str		6263460	0					
ANR	6263549	Identifier	i		6263460	1					
ANR	6263550	ExpressionStatement	ch2 = str [ i + 1 ]	191:2:3970:3986	6263460	1	True				
ANR	6263551	AssignmentExpression	ch2 = str [ i + 1 ]		6263460	0		=			
ANR	6263552	Identifier	ch2		6263460	0					
ANR	6263553	ArrayIndexing	str [ i + 1 ]		6263460	1					
ANR	6263554	Identifier	str		6263460	0					
ANR	6263555	AdditiveExpression	i + 1		6263460	1		+			
ANR	6263556	Identifier	i		6263460	0					
ANR	6263557	PrimaryExpression	1		6263460	1					
ANR	6263558	IfStatement	if ( ch == 0x1b )		6263460	2					
ANR	6263559	Condition	ch == 0x1b	192:6:3994:4003	6263460	0	True				
ANR	6263560	EqualityExpression	ch == 0x1b		6263460	0		==			
ANR	6263561	Identifier	ch		6263460	0					
ANR	6263562	PrimaryExpression	0x1b		6263460	1					
ANR	6263563	CompoundStatement		18:18:330:330	6263460	1					
ANR	6263564	IfStatement	if ( ch2 == '\\\\' )		6263460	0					
ANR	6263565	Condition	ch2 == '\\\\'	193:7:4015:4025	6263460	0	True				
ANR	6263566	EqualityExpression	ch2 == '\\\\'		6263460	0		==			
ANR	6263567	Identifier	ch2		6263460	0					
ANR	6263568	PrimaryExpression	'\\\\'		6263460	1					
ANR	6263569	CompoundStatement		19:20:352:352	6263460	1					
ANR	6263570	ExpressionStatement	i ++	194:4:4034:4037	6263460	0	True				
ANR	6263571	PostIncDecOperationExpression	i ++		6263460	0					
ANR	6263572	Identifier	i		6263460	0					
ANR	6263573	IncDec	++		6263460	1					
ANR	6263574	ElseStatement	else		6263460	0					
ANR	6263575	IfStatement	if ( ch2 == ']' )		6263460	0					
ANR	6263576	Condition	ch2 == ']'	195:14:4053:4062	6263460	0	True				
ANR	6263577	EqualityExpression	ch2 == ']'		6263460	0		==			
ANR	6263578	Identifier	ch2		6263460	0					
ANR	6263579	PrimaryExpression	']'		6263460	1					
ANR	6263580	CompoundStatement		21:26:389:389	6263460	1					
ANR	6263581	IfStatement	"if ( ! strncmp ( str + 2 + 5 , ""rgb:"" , 4 ) )"		6263460	0					
ANR	6263582	Condition	"! strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"	196:8:4075:4107	6263460	0	True				
ANR	6263583	UnaryOperationExpression	"! strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"		6263460	0					
ANR	6263584	UnaryOperator	!		6263460	0					
ANR	6263585	CallExpression	"strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"		6263460	1					
ANR	6263586	Callee	strncmp		6263460	0					
ANR	6263587	Identifier	strncmp		6263460	0					
ANR	6263588	ArgumentList	str + 2 + 5		6263460	1					
ANR	6263589	Argument	str + 2 + 5		6263460	0					
ANR	6263590	AdditiveExpression	str + 2 + 5		6263460	0		+			
ANR	6263591	Identifier	str		6263460	0					
ANR	6263592	AdditiveExpression	2 + 5		6263460	1		+			
ANR	6263593	PrimaryExpression	2		6263460	0					
ANR	6263594	PrimaryExpression	5		6263460	1					
ANR	6263595	Argument	"""rgb:"""		6263460	1					
ANR	6263596	PrimaryExpression	"""rgb:"""		6263460	0					
ANR	6263597	Argument	4		6263460	2					
ANR	6263598	PrimaryExpression	4		6263460	0					
ANR	6263599	CompoundStatement		22:43:434:434	6263460	1					
ANR	6263600	ExpressionStatement	i += 18	197:5:4117:4124	6263460	0	True				
ANR	6263601	AssignmentExpression	i += 18		6263460	0		+=			
ANR	6263602	Identifier	i		6263460	0					
ANR	6263603	PrimaryExpression	18		6263460	1					
ANR	6263604	ElseStatement	else		6263460	0					
ANR	6263605	IfStatement	if ( ch2 == '[' )		6263460	0					
ANR	6263606	Condition	ch2 == '['	199:14:4146:4155	6263460	0	True				
ANR	6263607	EqualityExpression	ch2 == '['		6263460	0		==			
ANR	6263608	Identifier	ch2		6263460	0					
ANR	6263609	PrimaryExpression	'['		6263460	1					
ANR	6263610	CompoundStatement		25:26:482:482	6263460	1					
ANR	6263611	ForStatement	for ( ++ i ; ( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' ; i ++ )		6263460	0					
ANR	6263612	ForInit	++ i ;	200:9:4169:4172	6263460	0	True				
ANR	6263613	UnaryExpression	++ i		6263460	0					
ANR	6263614	IncDec	++		6263460	0					
ANR	6263615	Identifier	i		6263460	1					
ANR	6263616	Condition	( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'	200:14:4174:4247	6263460	1	True				
ANR	6263617	AndExpression	( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		6263460	0		&&			
ANR	6263618	RelationalExpression	i < str_len		6263460	0		<			
ANR	6263619	Identifier	i		6263460	0					
ANR	6263620	Identifier	str_len		6263460	1					
ANR	6263621	AndExpression	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		6263460	1		&&			
ANR	6263622	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263623	Identifier	str		6263460	0					
ANR	6263624	Identifier	i		6263460	1					
ANR	6263625	AndExpression	str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		6263460	1		&&			
ANR	6263626	EqualityExpression	str [ i ] != 'J'		6263460	0		!=			
ANR	6263627	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263628	Identifier	str		6263460	0					
ANR	6263629	Identifier	i		6263460	1					
ANR	6263630	PrimaryExpression	'J'		6263460	1					
ANR	6263631	AndExpression	str [ i ] != 'm' && str [ i ] != 'H'		6263460	1		&&			
ANR	6263632	EqualityExpression	str [ i ] != 'm'		6263460	0		!=			
ANR	6263633	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263634	Identifier	str		6263460	0					
ANR	6263635	Identifier	i		6263460	1					
ANR	6263636	PrimaryExpression	'm'		6263460	1					
ANR	6263637	EqualityExpression	str [ i ] != 'H'		6263460	1		!=			
ANR	6263638	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263639	Identifier	str		6263460	0					
ANR	6263640	Identifier	i		6263460	1					
ANR	6263641	PrimaryExpression	'H'		6263460	1					
ANR	6263642	PostIncDecOperationExpression	i ++	201:5:4255:4257	6263460	2	True				
ANR	6263643	Identifier	i		6263460	0					
ANR	6263644	IncDec	++		6263460	1					
ANR	6263645	CompoundStatement		27:10:584:584	6263460	3					
ANR	6263646	ExpressionStatement		202:5:4267:4267	6263460	0	True				
ANR	6263647	ElseStatement	else		6263460	0					
ANR	6263648	IfStatement	if ( ( str [ i ] & 0xc0 ) != 0x80 )		6263460	0					
ANR	6263649	Condition	( str [ i ] & 0xc0 ) != 0x80	205:13:4293:4315	6263460	0	True				
ANR	6263650	EqualityExpression	( str [ i ] & 0xc0 ) != 0x80		6263460	0		!=			
ANR	6263651	BitAndExpression	str [ i ] & 0xc0		6263460	0		&			
ANR	6263652	ArrayIndexing	str [ i ]		6263460	0					
ANR	6263653	Identifier	str		6263460	0					
ANR	6263654	Identifier	i		6263460	1					
ANR	6263655	PrimaryExpression	0xc0		6263460	1					
ANR	6263656	PrimaryExpression	0x80		6263460	1					
ANR	6263657	CompoundStatement		31:38:642:642	6263460	1					
ANR	6263658	ExpressionStatement	len ++	206:3:4323:4328	6263460	0	True				
ANR	6263659	PostIncDecOperationExpression	len ++		6263460	0					
ANR	6263660	Identifier	len		6263460	0					
ANR	6263661	IncDec	++		6263460	1					
ANR	6263662	ExpressionStatement	i ++	208:2:4336:4339	6263460	3	True				
ANR	6263663	PostIncDecOperationExpression	i ++		6263460	0					
ANR	6263664	Identifier	i		6263460	0					
ANR	6263665	IncDec	++		6263460	1					
ANR	6263666	ExpressionStatement	back = i	209:2:4343:4351	6263460	4	True				
ANR	6263667	AssignmentExpression	back = i		6263460	0		=			
ANR	6263668	Identifier	back		6263460	0					
ANR	6263669	Identifier	i		6263460	1					
ANR	6263670	ExpressionStatement	str [ back ] = 0	211:1:4392:4405	6263460	6	True				
ANR	6263671	AssignmentExpression	str [ back ] = 0		6263460	0		=			
ANR	6263672	ArrayIndexing	str [ back ]		6263460	0					
ANR	6263673	Identifier	str		6263460	0					
ANR	6263674	Identifier	back		6263460	1					
ANR	6263675	PrimaryExpression	0		6263460	1					
ANR	6263676	ReturnStatement	return back ;	212:1:4408:4419	6263460	7	True				
ANR	6263677	Identifier	back		6263460	0					
ANR	6263678	ReturnType	R_API int		6263460	1					
ANR	6263679	Identifier	r_str_ansi_trim		6263460	2					
ANR	6263680	ParameterList	"char * str , int str_len , int n"		6263460	3					
ANR	6263681	Parameter	char * str	175:26:3644:3652	6263460	0	True				
ANR	6263682	ParameterType	char *		6263460	0					
ANR	6263683	Identifier	str		6263460	1					
ANR	6263684	Parameter	int str_len	175:37:3655:3665	6263460	1	True				
ANR	6263685	ParameterType	int		6263460	0					
ANR	6263686	Identifier	str_len		6263460	1					
ANR	6263687	Parameter	int n	175:50:3668:3672	6263460	2	True				
ANR	6263688	ParameterType	int		6263460	0					
ANR	6263689	Identifier	n		6263460	1					
ANR	6263690	CFGEntryNode	ENTRY		6263460		True				
ANR	6263691	CFGExitNode	EXIT		6263460		True				
ANR	6263692	Symbol	* str_len		6263460						
ANR	6263693	Symbol	* back		6263460						
ANR	6263694	Symbol	ch		6263460						
ANR	6263695	Symbol	i		6263460						
ANR	6263696	Symbol	back		6263460						
ANR	6263697	Symbol	ch2		6263460						
ANR	6263698	Symbol	n		6263460						
ANR	6263699	Symbol	str		6263460						
ANR	6263700	Symbol	strlen		6263460						
ANR	6263701	Symbol	strncmp		6263460						
ANR	6263702	Symbol	* i		6263460						
ANR	6263703	Symbol	len		6263460						
ANR	6263704	Symbol	str_len		6263460						
ANR	6263705	Symbol	* str		6263460						
