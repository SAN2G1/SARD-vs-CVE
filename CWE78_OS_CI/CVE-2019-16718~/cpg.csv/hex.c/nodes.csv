command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1552199	File	data/converged/CVE-2019-16718~_radare2/hex.c								
ANR	1552200	Function	r_hex_to_byte	9:0:174:473							
ANR	1552201	FunctionDef	"r_hex_to_byte (ut8 * val , ut8 c)"		1552200	0					
ANR	1552202	CompoundStatement		9:41:215:473	1552200	0					
ANR	1552203	IfStatement	if ( IS_DIGIT ( c ) )		1552200	0					
ANR	1552204	Condition	IS_DIGIT ( c )	10:5:222:233	1552200	0	True				
ANR	1552205	CallExpression	IS_DIGIT ( c )		1552200	0					
ANR	1552206	Callee	IS_DIGIT		1552200	0					
ANR	1552207	Identifier	IS_DIGIT		1552200	0					
ANR	1552208	ArgumentList	c		1552200	1					
ANR	1552209	Argument	c		1552200	0					
ANR	1552210	Identifier	c		1552200	0					
ANR	1552211	CompoundStatement		2:19:20:20	1552200	1					
ANR	1552212	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - '0' )	11:2:240:275	1552200	0	True				
ANR	1552213	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - '0' )		1552200	0		=			
ANR	1552214	UnaryOperationExpression	* val		1552200	0					
ANR	1552215	UnaryOperator	*		1552200	0					
ANR	1552216	Identifier	val		1552200	1					
ANR	1552217	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - '0' )		1552200	1		+			
ANR	1552218	MultiplicativeExpression	( ut8 ) ( * val ) * 16		1552200	0		*			
ANR	1552219	CastExpression	( ut8 ) ( * val )		1552200	0					
ANR	1552220	CastTarget	ut8		1552200	0					
ANR	1552221	UnaryOperationExpression	* val		1552200	1					
ANR	1552222	UnaryOperator	*		1552200	0					
ANR	1552223	Identifier	val		1552200	1					
ANR	1552224	PrimaryExpression	16		1552200	1					
ANR	1552225	AdditiveExpression	c - '0'		1552200	1		-			
ANR	1552226	Identifier	c		1552200	0					
ANR	1552227	PrimaryExpression	'0'		1552200	1					
ANR	1552228	ElseStatement	else		1552200	0					
ANR	1552229	IfStatement	if ( c >= 'A' && c <= 'F' )		1552200	0					
ANR	1552230	Condition	c >= 'A' && c <= 'F'	12:12:289:308	1552200	0	True				
ANR	1552231	AndExpression	c >= 'A' && c <= 'F'		1552200	0		&&			
ANR	1552232	RelationalExpression	c >= 'A'		1552200	0		>=			
ANR	1552233	Identifier	c		1552200	0					
ANR	1552234	PrimaryExpression	'A'		1552200	1					
ANR	1552235	RelationalExpression	c <= 'F'		1552200	1		<=			
ANR	1552236	Identifier	c		1552200	0					
ANR	1552237	PrimaryExpression	'F'		1552200	1					
ANR	1552238	CompoundStatement		4:34:95:95	1552200	1					
ANR	1552239	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )	13:2:315:355	1552200	0	True				
ANR	1552240	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )		1552200	0		=			
ANR	1552241	UnaryOperationExpression	* val		1552200	0					
ANR	1552242	UnaryOperator	*		1552200	0					
ANR	1552243	Identifier	val		1552200	1					
ANR	1552244	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )		1552200	1		+			
ANR	1552245	MultiplicativeExpression	( ut8 ) ( * val ) * 16		1552200	0		*			
ANR	1552246	CastExpression	( ut8 ) ( * val )		1552200	0					
ANR	1552247	CastTarget	ut8		1552200	0					
ANR	1552248	UnaryOperationExpression	* val		1552200	1					
ANR	1552249	UnaryOperator	*		1552200	0					
ANR	1552250	Identifier	val		1552200	1					
ANR	1552251	PrimaryExpression	16		1552200	1					
ANR	1552252	AdditiveExpression	c - 'A' + 10		1552200	1		-			
ANR	1552253	Identifier	c		1552200	0					
ANR	1552254	AdditiveExpression	'A' + 10		1552200	1		+			
ANR	1552255	PrimaryExpression	'A'		1552200	0					
ANR	1552256	PrimaryExpression	10		1552200	1					
ANR	1552257	ElseStatement	else		1552200	0					
ANR	1552258	IfStatement	if ( c >= 'a' && c <= 'f' )		1552200	0					
ANR	1552259	Condition	c >= 'a' && c <= 'f'	14:12:369:388	1552200	0	True				
ANR	1552260	AndExpression	c >= 'a' && c <= 'f'		1552200	0		&&			
ANR	1552261	RelationalExpression	c >= 'a'		1552200	0		>=			
ANR	1552262	Identifier	c		1552200	0					
ANR	1552263	PrimaryExpression	'a'		1552200	1					
ANR	1552264	RelationalExpression	c <= 'f'		1552200	1		<=			
ANR	1552265	Identifier	c		1552200	0					
ANR	1552266	PrimaryExpression	'f'		1552200	1					
ANR	1552267	CompoundStatement		6:34:175:175	1552200	1					
ANR	1552268	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )	15:2:395:435	1552200	0	True				
ANR	1552269	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )		1552200	0		=			
ANR	1552270	UnaryOperationExpression	* val		1552200	0					
ANR	1552271	UnaryOperator	*		1552200	0					
ANR	1552272	Identifier	val		1552200	1					
ANR	1552273	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )		1552200	1		+			
ANR	1552274	MultiplicativeExpression	( ut8 ) ( * val ) * 16		1552200	0		*			
ANR	1552275	CastExpression	( ut8 ) ( * val )		1552200	0					
ANR	1552276	CastTarget	ut8		1552200	0					
ANR	1552277	UnaryOperationExpression	* val		1552200	1					
ANR	1552278	UnaryOperator	*		1552200	0					
ANR	1552279	Identifier	val		1552200	1					
ANR	1552280	PrimaryExpression	16		1552200	1					
ANR	1552281	AdditiveExpression	c - 'a' + 10		1552200	1		-			
ANR	1552282	Identifier	c		1552200	0					
ANR	1552283	AdditiveExpression	'a' + 10		1552200	1		+			
ANR	1552284	PrimaryExpression	'a'		1552200	0					
ANR	1552285	PrimaryExpression	10		1552200	1					
ANR	1552286	ElseStatement	else		1552200	0					
ANR	1552287	CompoundStatement		8:8:229:229	1552200	0					
ANR	1552288	ReturnStatement	return 1 ;	17:2:449:457	1552200	0	True				
ANR	1552289	PrimaryExpression	1		1552200	0					
ANR	1552290	ReturnStatement	return 0 ;	19:1:463:471	1552200	1	True				
ANR	1552291	PrimaryExpression	0		1552200	0					
ANR	1552292	ReturnType	R_API int		1552200	1					
ANR	1552293	Identifier	r_hex_to_byte		1552200	2					
ANR	1552294	ParameterList	"ut8 * val , ut8 c"		1552200	3					
ANR	1552295	Parameter	ut8 * val	9:24:198:205	1552200	0	True				
ANR	1552296	ParameterType	ut8 *		1552200	0					
ANR	1552297	Identifier	val		1552200	1					
ANR	1552298	Parameter	ut8 c	9:34:208:212	1552200	1	True				
ANR	1552299	ParameterType	ut8		1552200	0					
ANR	1552300	Identifier	c		1552200	1					
ANR	1552301	CFGEntryNode	ENTRY		1552200		True				
ANR	1552302	CFGExitNode	EXIT		1552200		True				
ANR	1552303	Symbol	val		1552200						
ANR	1552304	Symbol	c		1552200						
ANR	1552305	Symbol	* val		1552200						
ANR	1552306	Symbol	IS_DIGIT		1552200						
ANR	1552307	Function	r_hex_from_py_str	22:0:476:678							
ANR	1552308	FunctionDef	"r_hex_from_py_str (char * out , const char * code)"		1552307	0					
ANR	1552309	CompoundStatement		22:59:535:678	1552307	0					
ANR	1552310	IfStatement	"if ( ! strncmp ( code , ""'''"" , 3 ) )"		1552307	0					
ANR	1552311	Condition	"! strncmp ( code , ""'''"" , 3 )"	23:5:542:566	1552307	0	True				
ANR	1552312	UnaryOperationExpression	"! strncmp ( code , ""'''"" , 3 )"		1552307	0					
ANR	1552313	UnaryOperator	!		1552307	0					
ANR	1552314	CallExpression	"strncmp ( code , ""'''"" , 3 )"		1552307	1					
ANR	1552315	Callee	strncmp		1552307	0					
ANR	1552316	Identifier	strncmp		1552307	0					
ANR	1552317	ArgumentList	code		1552307	1					
ANR	1552318	Argument	code		1552307	0					
ANR	1552319	Identifier	code		1552307	0					
ANR	1552320	Argument	"""'''"""		1552307	1					
ANR	1552321	PrimaryExpression	"""'''"""		1552307	0					
ANR	1552322	Argument	3		1552307	2					
ANR	1552323	PrimaryExpression	3		1552307	0					
ANR	1552324	CompoundStatement		3:2:37:61	1552307	1					
ANR	1552325	IdentifierDeclStatement	const char * s = code + 2 ;	24:2:573:597	1552307	0	True				
ANR	1552326	IdentifierDecl	* s = code + 2		1552307	0					
ANR	1552327	IdentifierDeclType	const char *		1552307	0					
ANR	1552328	Identifier	s		1552307	1					
ANR	1552329	AssignmentExpression	* s = code + 2		1552307	2		=			
ANR	1552330	Identifier	s		1552307	0					
ANR	1552331	AdditiveExpression	code + 2		1552307	1		+			
ANR	1552332	Identifier	code		1552307	0					
ANR	1552333	PrimaryExpression	2		1552307	1					
ANR	1552334	ReturnStatement	"return r_hex_from_c_str ( out , & s ) ;"	25:2:601:634	1552307	1	True				
ANR	1552335	CallExpression	"r_hex_from_c_str ( out , & s )"		1552307	0					
ANR	1552336	Callee	r_hex_from_c_str		1552307	0					
ANR	1552337	Identifier	r_hex_from_c_str		1552307	0					
ANR	1552338	ArgumentList	out		1552307	1					
ANR	1552339	Argument	out		1552307	0					
ANR	1552340	Identifier	out		1552307	0					
ANR	1552341	Argument	& s		1552307	1					
ANR	1552342	UnaryOperationExpression	& s		1552307	0					
ANR	1552343	UnaryOperator	&		1552307	0					
ANR	1552344	Identifier	s		1552307	1					
ANR	1552345	ReturnStatement	"return r_hex_from_c_str ( out , & code ) ;"	27:1:640:676	1552307	1	True				
ANR	1552346	CallExpression	"r_hex_from_c_str ( out , & code )"		1552307	0					
ANR	1552347	Callee	r_hex_from_c_str		1552307	0					
ANR	1552348	Identifier	r_hex_from_c_str		1552307	0					
ANR	1552349	ArgumentList	out		1552307	1					
ANR	1552350	Argument	out		1552307	0					
ANR	1552351	Identifier	out		1552307	0					
ANR	1552352	Argument	& code		1552307	1					
ANR	1552353	UnaryOperationExpression	& code		1552307	0					
ANR	1552354	UnaryOperator	&		1552307	0					
ANR	1552355	Identifier	code		1552307	1					
ANR	1552356	ReturnType	R_API char *		1552307	1					
ANR	1552357	Identifier	r_hex_from_py_str		1552307	2					
ANR	1552358	ParameterList	"char * out , const char * code"		1552307	3					
ANR	1552359	Parameter	char * out	22:30:506:514	1552307	0	True				
ANR	1552360	ParameterType	char *		1552307	0					
ANR	1552361	Identifier	out		1552307	1					
ANR	1552362	Parameter	const char * code	22:41:517:532	1552307	1	True				
ANR	1552363	ParameterType	const char *		1552307	0					
ANR	1552364	Identifier	code		1552307	1					
ANR	1552365	CFGEntryNode	ENTRY		1552307		True				
ANR	1552366	CFGExitNode	EXIT		1552307		True				
ANR	1552367	Symbol	strncmp		1552307						
ANR	1552368	Symbol	r_hex_from_c_str		1552307						
ANR	1552369	Symbol	code		1552307						
ANR	1552370	Symbol	s		1552307						
ANR	1552371	Symbol	& s		1552307						
ANR	1552372	Symbol	& code		1552307						
ANR	1552373	Symbol	out		1552307						
ANR	1552374	Function	skip_comment_py	30:0:681:856							
ANR	1552375	FunctionDef	skip_comment_py (const char * code)		1552374	0					
ANR	1552376	CompoundStatement		30:53:734:856	1552374	0					
ANR	1552377	IfStatement	if ( * code != '#' )		1552374	0					
ANR	1552378	Condition	* code != '#'	31:5:741:752	1552374	0	True				
ANR	1552379	EqualityExpression	* code != '#'		1552374	0		!=			
ANR	1552380	UnaryOperationExpression	* code		1552374	0					
ANR	1552381	UnaryOperator	*		1552374	0					
ANR	1552382	Identifier	code		1552374	1					
ANR	1552383	PrimaryExpression	'#'		1552374	1					
ANR	1552384	CompoundStatement		2:19:20:20	1552374	1					
ANR	1552385	ReturnStatement	return code ;	32:2:759:770	1552374	0	True				
ANR	1552386	Identifier	code		1552374	0					
ANR	1552387	IdentifierDeclStatement	"char * end = strchr ( code , '\\n' ) ;"	34:1:776:807	1552374	1	True				
ANR	1552388	IdentifierDecl	"* end = strchr ( code , '\\n' )"		1552374	0					
ANR	1552389	IdentifierDeclType	char *		1552374	0					
ANR	1552390	Identifier	end		1552374	1					
ANR	1552391	AssignmentExpression	"* end = strchr ( code , '\\n' )"		1552374	2		=			
ANR	1552392	Identifier	end		1552374	0					
ANR	1552393	CallExpression	"strchr ( code , '\\n' )"		1552374	1					
ANR	1552394	Callee	strchr		1552374	0					
ANR	1552395	Identifier	strchr		1552374	0					
ANR	1552396	ArgumentList	code		1552374	1					
ANR	1552397	Argument	code		1552374	0					
ANR	1552398	Identifier	code		1552374	0					
ANR	1552399	Argument	'\\n'		1552374	1					
ANR	1552400	PrimaryExpression	'\\n'		1552374	0					
ANR	1552401	IfStatement	if ( end )		1552374	2					
ANR	1552402	Condition	end	35:5:814:816	1552374	0	True				
ANR	1552403	Identifier	end		1552374	0					
ANR	1552404	CompoundStatement		6:10:84:84	1552374	1					
ANR	1552405	ExpressionStatement	code = end	36:2:823:833	1552374	0	True				
ANR	1552406	AssignmentExpression	code = end		1552374	0		=			
ANR	1552407	Identifier	code		1552374	0					
ANR	1552408	Identifier	end		1552374	1					
ANR	1552409	ReturnStatement	return code + 1 ;	38:1:839:854	1552374	3	True				
ANR	1552410	AdditiveExpression	code + 1		1552374	0		+			
ANR	1552411	Identifier	code		1552374	0					
ANR	1552412	PrimaryExpression	1		1552374	1					
ANR	1552413	ReturnType	static const char *		1552374	1					
ANR	1552414	Identifier	skip_comment_py		1552374	2					
ANR	1552415	ParameterList	const char * code		1552374	3					
ANR	1552416	Parameter	const char * code	30:35:716:731	1552374	0	True				
ANR	1552417	ParameterType	const char *		1552374	0					
ANR	1552418	Identifier	code		1552374	1					
ANR	1552419	CFGEntryNode	ENTRY		1552374		True				
ANR	1552420	CFGExitNode	EXIT		1552374		True				
ANR	1552421	Symbol	code		1552374						
ANR	1552422	Symbol	strchr		1552374						
ANR	1552423	Symbol	end		1552374						
ANR	1552424	Symbol	* code		1552374						
ANR	1552425	Function	r_hex_from_py_array	41:0:859:1575							
ANR	1552426	FunctionDef	"r_hex_from_py_array (char * out , const char * code)"		1552425	0					
ANR	1552427	CompoundStatement		41:61:920:1575	1552425	0					
ANR	1552428	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdef"" ;"	42:1:923:960	1552425	0	True				
ANR	1552429	IdentifierDecl	"abc [ ] = ""0123456789abcdef"""		1552425	0					
ANR	1552430	IdentifierDeclType	const char [ ]		1552425	0					
ANR	1552431	Identifier	abc		1552425	1					
ANR	1552432	AssignmentExpression	"abc [ ] = ""0123456789abcdef"""		1552425	2		=			
ANR	1552433	Identifier	abc		1552425	0					
ANR	1552434	PrimaryExpression	"""0123456789abcdef"""		1552425	1					
ANR	1552435	IfStatement	"if ( * code != '[' || ! strchr ( code , ']' ) )"		1552425	1					
ANR	1552436	Condition	"* code != '[' || ! strchr ( code , ']' )"	43:5:967:1001	1552425	0	True				
ANR	1552437	OrExpression	"* code != '[' || ! strchr ( code , ']' )"		1552425	0		||			
ANR	1552438	EqualityExpression	* code != '['		1552425	0		!=			
ANR	1552439	UnaryOperationExpression	* code		1552425	0					
ANR	1552440	UnaryOperator	*		1552425	0					
ANR	1552441	Identifier	code		1552425	1					
ANR	1552442	PrimaryExpression	'['		1552425	1					
ANR	1552443	UnaryOperationExpression	"! strchr ( code , ']' )"		1552425	1					
ANR	1552444	UnaryOperator	!		1552425	0					
ANR	1552445	CallExpression	"strchr ( code , ']' )"		1552425	1					
ANR	1552446	Callee	strchr		1552425	0					
ANR	1552447	Identifier	strchr		1552425	0					
ANR	1552448	ArgumentList	code		1552425	1					
ANR	1552449	Argument	code		1552425	0					
ANR	1552450	Identifier	code		1552425	0					
ANR	1552451	Argument	']'		1552425	1					
ANR	1552452	PrimaryExpression	']'		1552425	0					
ANR	1552453	CompoundStatement		3:42:83:83	1552425	1					
ANR	1552454	ReturnStatement	return NULL ;	44:2:1008:1019	1552425	0	True				
ANR	1552455	Identifier	NULL		1552425	0					
ANR	1552456	ExpressionStatement	code ++	46:1:1025:1031	1552425	2	True				
ANR	1552457	PostIncDecOperationExpression	code ++		1552425	0					
ANR	1552458	Identifier	code		1552425	0					
ANR	1552459	IncDec	++		1552425	1					
ANR	1552460	ForStatement	for ( ; * code ; code ++ )		1552425	3					
ANR	1552461	Condition	* code	47:8:1041:1045	1552425	0	True				
ANR	1552462	UnaryOperationExpression	* code		1552425	0					
ANR	1552463	UnaryOperator	*		1552425	0					
ANR	1552464	Identifier	code		1552425	1					
ANR	1552465	PostIncDecOperationExpression	code ++	47:15:1048:1053	1552425	1	True				
ANR	1552466	Identifier	code		1552425	0					
ANR	1552467	IncDec	++		1552425	1					
ANR	1552468	CompoundStatement		16:2:306:330	1552425	2					
ANR	1552469	IdentifierDeclStatement	"char * comma = strchr ( code , ',' ) ;"	48:2:1060:1092	1552425	0	True				
ANR	1552470	IdentifierDecl	"* comma = strchr ( code , ',' )"		1552425	0					
ANR	1552471	IdentifierDeclType	char *		1552425	0					
ANR	1552472	Identifier	comma		1552425	1					
ANR	1552473	AssignmentExpression	"* comma = strchr ( code , ',' )"		1552425	2		=			
ANR	1552474	Identifier	comma		1552425	0					
ANR	1552475	CallExpression	"strchr ( code , ',' )"		1552425	1					
ANR	1552476	Callee	strchr		1552425	0					
ANR	1552477	Identifier	strchr		1552425	0					
ANR	1552478	ArgumentList	code		1552425	1					
ANR	1552479	Argument	code		1552425	0					
ANR	1552480	Identifier	code		1552425	0					
ANR	1552481	Argument	"','"		1552425	1					
ANR	1552482	PrimaryExpression	"','"		1552425	0					
ANR	1552483	IfStatement	if ( ! comma )		1552425	1					
ANR	1552484	Condition	! comma	49:6:1100:1105	1552425	0	True				
ANR	1552485	UnaryOperationExpression	! comma		1552425	0					
ANR	1552486	UnaryOperator	!		1552425	0					
ANR	1552487	Identifier	comma		1552425	1					
ANR	1552488	CompoundStatement		9:14:187:187	1552425	1					
ANR	1552489	ExpressionStatement	"comma = strchr ( code , ']' )"	50:3:1113:1139	1552425	0	True				
ANR	1552490	AssignmentExpression	"comma = strchr ( code , ']' )"		1552425	0		=			
ANR	1552491	Identifier	comma		1552425	0					
ANR	1552492	CallExpression	"strchr ( code , ']' )"		1552425	1					
ANR	1552493	Callee	strchr		1552425	0					
ANR	1552494	Identifier	strchr		1552425	0					
ANR	1552495	ArgumentList	code		1552425	1					
ANR	1552496	Argument	code		1552425	0					
ANR	1552497	Identifier	code		1552425	0					
ANR	1552498	Argument	']'		1552425	1					
ANR	1552499	PrimaryExpression	']'		1552425	0					
ANR	1552500	IfStatement	if ( ! comma )		1552425	2					
ANR	1552501	Condition	! comma	52:6:1151:1156	1552425	0	True				
ANR	1552502	UnaryOperationExpression	! comma		1552425	0					
ANR	1552503	UnaryOperator	!		1552425	0					
ANR	1552504	Identifier	comma		1552425	1					
ANR	1552505	CompoundStatement		12:14:238:238	1552425	1					
ANR	1552506	BreakStatement	break ;	53:3:1164:1169	1552425	0	True				
ANR	1552507	IdentifierDeclStatement	"char * _word = r_str_ndup ( code , comma - code ) ;"	55:2:1177:1223	1552425	3	True				
ANR	1552508	IdentifierDecl	"* _word = r_str_ndup ( code , comma - code )"		1552425	0					
ANR	1552509	IdentifierDeclType	char *		1552425	0					
ANR	1552510	Identifier	_word		1552425	1					
ANR	1552511	AssignmentExpression	"* _word = r_str_ndup ( code , comma - code )"		1552425	2		=			
ANR	1552512	Identifier	_word		1552425	0					
ANR	1552513	CallExpression	"r_str_ndup ( code , comma - code )"		1552425	1					
ANR	1552514	Callee	r_str_ndup		1552425	0					
ANR	1552515	Identifier	r_str_ndup		1552425	0					
ANR	1552516	ArgumentList	code		1552425	1					
ANR	1552517	Argument	code		1552425	0					
ANR	1552518	Identifier	code		1552425	0					
ANR	1552519	Argument	comma - code		1552425	1					
ANR	1552520	AdditiveExpression	comma - code		1552425	0		-			
ANR	1552521	Identifier	comma		1552425	0					
ANR	1552522	Identifier	code		1552425	1					
ANR	1552523	IdentifierDeclStatement	const char * word = _word ;	56:2:1227:1251	1552425	4	True				
ANR	1552524	IdentifierDecl	* word = _word		1552425	0					
ANR	1552525	IdentifierDeclType	const char *		1552425	0					
ANR	1552526	Identifier	word		1552425	1					
ANR	1552527	AssignmentExpression	* word = _word		1552425	2		=			
ANR	1552528	Identifier	_word		1552425	0					
ANR	1552529	Identifier	_word		1552425	1					
ANR	1552530	WhileStatement	while ( * word == ' ' || * word == '\\t' || * word == '\\n' )		1552425	5					
ANR	1552531	Condition	* word == ' ' || * word == '\\t' || * word == '\\n'	57:9:1262:1307	1552425	0	True				
ANR	1552532	OrExpression	* word == ' ' || * word == '\\t' || * word == '\\n'		1552425	0		||			
ANR	1552533	EqualityExpression	* word == ' '		1552425	0		==			
ANR	1552534	UnaryOperationExpression	* word		1552425	0					
ANR	1552535	UnaryOperator	*		1552425	0					
ANR	1552536	Identifier	word		1552425	1					
ANR	1552537	PrimaryExpression	' '		1552425	1					
ANR	1552538	OrExpression	* word == '\\t' || * word == '\\n'		1552425	1		||			
ANR	1552539	EqualityExpression	* word == '\\t'		1552425	0		==			
ANR	1552540	UnaryOperationExpression	* word		1552425	0					
ANR	1552541	UnaryOperator	*		1552425	0					
ANR	1552542	Identifier	word		1552425	1					
ANR	1552543	PrimaryExpression	'\\t'		1552425	1					
ANR	1552544	EqualityExpression	* word == '\\n'		1552425	1		==			
ANR	1552545	UnaryOperationExpression	* word		1552425	0					
ANR	1552546	UnaryOperator	*		1552425	0					
ANR	1552547	Identifier	word		1552425	1					
ANR	1552548	PrimaryExpression	'\\n'		1552425	1					
ANR	1552549	CompoundStatement		17:57:389:389	1552425	1					
ANR	1552550	ExpressionStatement	word ++	58:3:1315:1321	1552425	0	True				
ANR	1552551	PostIncDecOperationExpression	word ++		1552425	0					
ANR	1552552	Identifier	word		1552425	0					
ANR	1552553	IncDec	++		1552425	1					
ANR	1552554	ExpressionStatement	word = skip_comment_py ( word )	59:3:1326:1355	1552425	1	True				
ANR	1552555	AssignmentExpression	word = skip_comment_py ( word )		1552425	0		=			
ANR	1552556	Identifier	word		1552425	0					
ANR	1552557	CallExpression	skip_comment_py ( word )		1552425	1					
ANR	1552558	Callee	skip_comment_py		1552425	0					
ANR	1552559	Identifier	skip_comment_py		1552425	0					
ANR	1552560	ArgumentList	word		1552425	1					
ANR	1552561	Argument	word		1552425	0					
ANR	1552562	Identifier	word		1552425	0					
ANR	1552563	IfStatement	if ( IS_DIGIT ( * word ) )		1552425	6					
ANR	1552564	Condition	IS_DIGIT ( * word )	61:6:1367:1382	1552425	0	True				
ANR	1552565	CallExpression	IS_DIGIT ( * word )		1552425	0					
ANR	1552566	Callee	IS_DIGIT		1552425	0					
ANR	1552567	Identifier	IS_DIGIT		1552425	0					
ANR	1552568	ArgumentList	* word		1552425	1					
ANR	1552569	Argument	* word		1552425	0					
ANR	1552570	UnaryOperationExpression	* word		1552425	0					
ANR	1552571	UnaryOperator	*		1552425	0					
ANR	1552572	Identifier	word		1552425	1					
ANR	1552573	CompoundStatement		22:3:469:505	1552425	1					
ANR	1552574	IdentifierDeclStatement	"ut8 n = ( ut8 ) r_num_math ( NULL , word ) ;"	62:3:1390:1426	1552425	0	True				
ANR	1552575	IdentifierDecl	"n = ( ut8 ) r_num_math ( NULL , word )"		1552425	0					
ANR	1552576	IdentifierDeclType	ut8		1552425	0					
ANR	1552577	Identifier	n		1552425	1					
ANR	1552578	AssignmentExpression	"n = ( ut8 ) r_num_math ( NULL , word )"		1552425	2		=			
ANR	1552579	Identifier	n		1552425	0					
ANR	1552580	CastExpression	"( ut8 ) r_num_math ( NULL , word )"		1552425	1					
ANR	1552581	CastTarget	ut8		1552425	0					
ANR	1552582	CallExpression	"r_num_math ( NULL , word )"		1552425	1					
ANR	1552583	Callee	r_num_math		1552425	0					
ANR	1552584	Identifier	r_num_math		1552425	0					
ANR	1552585	ArgumentList	NULL		1552425	1					
ANR	1552586	Argument	NULL		1552425	0					
ANR	1552587	Identifier	NULL		1552425	0					
ANR	1552588	Argument	word		1552425	1					
ANR	1552589	Identifier	word		1552425	0					
ANR	1552590	ExpressionStatement	* out ++ = abc [ ( n >> 4 ) & 0xf ]	63:3:1431:1459	1552425	1	True				
ANR	1552591	AssignmentExpression	* out ++ = abc [ ( n >> 4 ) & 0xf ]		1552425	0		=			
ANR	1552592	UnaryOperationExpression	* out ++		1552425	0					
ANR	1552593	UnaryOperator	*		1552425	0					
ANR	1552594	PostIncDecOperationExpression	out ++		1552425	1					
ANR	1552595	Identifier	out		1552425	0					
ANR	1552596	IncDec	++		1552425	1					
ANR	1552597	ArrayIndexing	abc [ ( n >> 4 ) & 0xf ]		1552425	1					
ANR	1552598	Identifier	abc		1552425	0					
ANR	1552599	BitAndExpression	( n >> 4 ) & 0xf		1552425	1		&			
ANR	1552600	ShiftExpression	n >> 4		1552425	0		>>			
ANR	1552601	Identifier	n		1552425	0					
ANR	1552602	PrimaryExpression	4		1552425	1					
ANR	1552603	PrimaryExpression	0xf		1552425	1					
ANR	1552604	ExpressionStatement	* out ++ = abc [ n & 0xf ]	64:3:1464:1485	1552425	2	True				
ANR	1552605	AssignmentExpression	* out ++ = abc [ n & 0xf ]		1552425	0		=			
ANR	1552606	UnaryOperationExpression	* out ++		1552425	0					
ANR	1552607	UnaryOperator	*		1552425	0					
ANR	1552608	PostIncDecOperationExpression	out ++		1552425	1					
ANR	1552609	Identifier	out		1552425	0					
ANR	1552610	IncDec	++		1552425	1					
ANR	1552611	ArrayIndexing	abc [ n & 0xf ]		1552425	1					
ANR	1552612	Identifier	abc		1552425	0					
ANR	1552613	BitAndExpression	n & 0xf		1552425	1		&			
ANR	1552614	Identifier	n		1552425	0					
ANR	1552615	PrimaryExpression	0xf		1552425	1					
ANR	1552616	ExpressionStatement	free ( _word )	66:2:1493:1505	1552425	7	True				
ANR	1552617	CallExpression	free ( _word )		1552425	0					
ANR	1552618	Callee	free		1552425	0					
ANR	1552619	Identifier	free		1552425	0					
ANR	1552620	ArgumentList	_word		1552425	1					
ANR	1552621	Argument	_word		1552425	0					
ANR	1552622	Identifier	_word		1552425	0					
ANR	1552623	ExpressionStatement	code = comma	67:2:1509:1521	1552425	8	True				
ANR	1552624	AssignmentExpression	code = comma		1552425	0		=			
ANR	1552625	Identifier	code		1552425	0					
ANR	1552626	Identifier	comma		1552425	1					
ANR	1552627	IfStatement	if ( * code == ']' )		1552425	9					
ANR	1552628	Condition	* code == ']'	68:6:1529:1540	1552425	0	True				
ANR	1552629	EqualityExpression	* code == ']'		1552425	0		==			
ANR	1552630	UnaryOperationExpression	* code		1552425	0					
ANR	1552631	UnaryOperator	*		1552425	0					
ANR	1552632	Identifier	code		1552425	1					
ANR	1552633	PrimaryExpression	']'		1552425	1					
ANR	1552634	CompoundStatement		28:20:622:622	1552425	1					
ANR	1552635	BreakStatement	break ;	69:3:1548:1553	1552425	0	True				
ANR	1552636	ReturnStatement	return out ;	72:1:1563:1573	1552425	4	True				
ANR	1552637	Identifier	out		1552425	0					
ANR	1552638	ReturnType	R_API char *		1552425	1					
ANR	1552639	Identifier	r_hex_from_py_array		1552425	2					
ANR	1552640	ParameterList	"char * out , const char * code"		1552425	3					
ANR	1552641	Parameter	char * out	41:32:891:899	1552425	0	True				
ANR	1552642	ParameterType	char *		1552425	0					
ANR	1552643	Identifier	out		1552425	1					
ANR	1552644	Parameter	const char * code	41:43:902:917	1552425	1	True				
ANR	1552645	ParameterType	const char *		1552425	0					
ANR	1552646	Identifier	code		1552425	1					
ANR	1552647	CFGEntryNode	ENTRY		1552425		True				
ANR	1552648	CFGExitNode	EXIT		1552425		True				
ANR	1552649	Symbol	* out ++		1552425						
ANR	1552650	Symbol	code		1552425						
ANR	1552651	Symbol	abc		1552425						
ANR	1552652	Symbol	NULL		1552425						
ANR	1552653	Symbol	r_str_ndup		1552425						
ANR	1552654	Symbol	* word		1552425						
ANR	1552655	Symbol	strchr		1552425						
ANR	1552656	Symbol	n		1552425						
ANR	1552657	Symbol	out		1552425						
ANR	1552658	Symbol	IS_DIGIT		1552425						
ANR	1552659	Symbol	r_num_math		1552425						
ANR	1552660	Symbol	comma		1552425						
ANR	1552661	Symbol	* abc		1552425						
ANR	1552662	Symbol	* n		1552425						
ANR	1552663	Symbol	skip_comment_py		1552425						
ANR	1552664	Symbol	_word		1552425						
ANR	1552665	Symbol	word		1552425						
ANR	1552666	Symbol	* code		1552425						
ANR	1552667	Function	r_hex_from_py	75:0:1578:2184							
ANR	1552668	FunctionDef	r_hex_from_py (const char * code)		1552667	0					
ANR	1552669	CompoundStatement		75:44:1622:2184	1552667	0					
ANR	1552670	IfStatement	if ( ! code )		1552667	0					
ANR	1552671	Condition	! code	76:5:1629:1633	1552667	0	True				
ANR	1552672	UnaryOperationExpression	! code		1552667	0					
ANR	1552673	UnaryOperator	!		1552667	0					
ANR	1552674	Identifier	code		1552667	1					
ANR	1552675	CompoundStatement		2:12:13:13	1552667	1					
ANR	1552676	ReturnStatement	return NULL ;	77:2:1640:1651	1552667	0	True				
ANR	1552677	Identifier	NULL		1552667	0					
ANR	1552678	Statement	char	79:1:1657:1660	1552667	1	True				
ANR	1552679	Statement	*	79:6:1662:1662	1552667	2	True				
ANR	1552680	Statement	const	79:8:1664:1668	1552667	3	True				
ANR	1552681	ExpressionStatement	ret = malloc ( strlen ( code ) * 3 )	79:14:1670:1702	1552667	4	True				
ANR	1552682	AssignmentExpression	ret = malloc ( strlen ( code ) * 3 )		1552667	0		=			
ANR	1552683	Identifier	ret		1552667	0					
ANR	1552684	CallExpression	malloc ( strlen ( code ) * 3 )		1552667	1					
ANR	1552685	Callee	malloc		1552667	0					
ANR	1552686	Identifier	malloc		1552667	0					
ANR	1552687	ArgumentList	strlen ( code ) * 3		1552667	1					
ANR	1552688	Argument	strlen ( code ) * 3		1552667	0					
ANR	1552689	MultiplicativeExpression	strlen ( code ) * 3		1552667	0		*			
ANR	1552690	CallExpression	strlen ( code )		1552667	0					
ANR	1552691	Callee	strlen		1552667	0					
ANR	1552692	Identifier	strlen		1552667	0					
ANR	1552693	ArgumentList	code		1552667	1					
ANR	1552694	Argument	code		1552667	0					
ANR	1552695	Identifier	code		1552667	0					
ANR	1552696	PrimaryExpression	3		1552667	1					
ANR	1552697	IfStatement	if ( ! ret )		1552667	5					
ANR	1552698	Condition	! ret	80:5:1709:1712	1552667	0	True				
ANR	1552699	UnaryOperationExpression	! ret		1552667	0					
ANR	1552700	UnaryOperator	!		1552667	0					
ANR	1552701	Identifier	ret		1552667	1					
ANR	1552702	CompoundStatement		6:11:92:92	1552667	1					
ANR	1552703	ReturnStatement	return NULL ;	81:2:1719:1730	1552667	0	True				
ANR	1552704	Identifier	NULL		1552667	0					
ANR	1552705	ExpressionStatement	* ret = '\\0'	83:1:1736:1747	1552667	6	True				
ANR	1552706	AssignmentExpression	* ret = '\\0'		1552667	0		=			
ANR	1552707	UnaryOperationExpression	* ret		1552667	0					
ANR	1552708	UnaryOperator	*		1552667	0					
ANR	1552709	Identifier	ret		1552667	1					
ANR	1552710	PrimaryExpression	'\\0'		1552667	1					
ANR	1552711	IdentifierDeclStatement	char * out = ret ;	84:1:1750:1765	1552667	7	True				
ANR	1552712	IdentifierDecl	* out = ret		1552667	0					
ANR	1552713	IdentifierDeclType	char *		1552667	0					
ANR	1552714	Identifier	out		1552667	1					
ANR	1552715	AssignmentExpression	* out = ret		1552667	2		=			
ANR	1552716	Identifier	ret		1552667	0					
ANR	1552717	Identifier	ret		1552667	1					
ANR	1552718	IdentifierDeclStatement	"const char * tmp_code = strchr ( code , '=' ) ;"	85:1:1768:1809	1552667	8	True				
ANR	1552719	IdentifierDecl	"* tmp_code = strchr ( code , '=' )"		1552667	0					
ANR	1552720	IdentifierDeclType	const char *		1552667	0					
ANR	1552721	Identifier	tmp_code		1552667	1					
ANR	1552722	AssignmentExpression	"* tmp_code = strchr ( code , '=' )"		1552667	2		=			
ANR	1552723	Identifier	tmp_code		1552667	0					
ANR	1552724	CallExpression	"strchr ( code , '=' )"		1552667	1					
ANR	1552725	Callee	strchr		1552667	0					
ANR	1552726	Identifier	strchr		1552667	0					
ANR	1552727	ArgumentList	code		1552667	1					
ANR	1552728	Argument	code		1552667	0					
ANR	1552729	Identifier	code		1552667	0					
ANR	1552730	Argument	'='		1552667	1					
ANR	1552731	PrimaryExpression	'='		1552667	0					
ANR	1552732	IfStatement	if ( tmp_code )		1552667	9					
ANR	1552733	Condition	tmp_code	86:5:1816:1823	1552667	0	True				
ANR	1552734	Identifier	tmp_code		1552667	0					
ANR	1552735	CompoundStatement		12:15:203:203	1552667	1					
ANR	1552736	ExpressionStatement	code = tmp_code	87:2:1830:1845	1552667	0	True				
ANR	1552737	AssignmentExpression	code = tmp_code		1552667	0		=			
ANR	1552738	Identifier	code		1552667	0					
ANR	1552739	Identifier	tmp_code		1552667	1					
ANR	1552740	ForStatement	"for ( ; * code && * code != '[' && * code != '\\'' && * code != '""' ; code ++ )"		1552667	10					
ANR	1552741	Condition	"* code && * code != '[' && * code != '\\'' && * code != '""'"	89:8:1858:1914	1552667	0	True				
ANR	1552742	AndExpression	"* code && * code != '[' && * code != '\\'' && * code != '""'"		1552667	0		&&			
ANR	1552743	UnaryOperationExpression	* code		1552667	0					
ANR	1552744	UnaryOperator	*		1552667	0					
ANR	1552745	Identifier	code		1552667	1					
ANR	1552746	AndExpression	"* code != '[' && * code != '\\'' && * code != '""'"		1552667	1		&&			
ANR	1552747	EqualityExpression	* code != '['		1552667	0		!=			
ANR	1552748	UnaryOperationExpression	* code		1552667	0					
ANR	1552749	UnaryOperator	*		1552667	0					
ANR	1552750	Identifier	code		1552667	1					
ANR	1552751	PrimaryExpression	'['		1552667	1					
ANR	1552752	AndExpression	"* code != '\\'' && * code != '""'"		1552667	1		&&			
ANR	1552753	EqualityExpression	* code != '\\''		1552667	0		!=			
ANR	1552754	UnaryOperationExpression	* code		1552667	0					
ANR	1552755	UnaryOperator	*		1552667	0					
ANR	1552756	Identifier	code		1552667	1					
ANR	1552757	PrimaryExpression	'\\''		1552667	1					
ANR	1552758	EqualityExpression	"* code != '""'"		1552667	1		!=			
ANR	1552759	UnaryOperationExpression	* code		1552667	0					
ANR	1552760	UnaryOperator	*		1552667	0					
ANR	1552761	Identifier	code		1552667	1					
ANR	1552762	PrimaryExpression	"'""'"		1552667	1					
ANR	1552763	PostIncDecOperationExpression	code ++	90:20:1917:1922	1552667	1	True				
ANR	1552764	Identifier	code		1552667	0					
ANR	1552765	IncDec	++		1552667	1					
ANR	1552766	CompoundStatement		16:28:302:302	1552667	2					
ANR	1552767	ExpressionStatement	code = skip_comment_py ( code )	91:2:1929:1958	1552667	0	True				
ANR	1552768	AssignmentExpression	code = skip_comment_py ( code )		1552667	0		=			
ANR	1552769	Identifier	code		1552667	0					
ANR	1552770	CallExpression	skip_comment_py ( code )		1552667	1					
ANR	1552771	Callee	skip_comment_py		1552667	0					
ANR	1552772	Identifier	skip_comment_py		1552667	0					
ANR	1552773	ArgumentList	code		1552667	1					
ANR	1552774	Argument	code		1552667	0					
ANR	1552775	Identifier	code		1552667	0					
ANR	1552776	IfStatement	if ( * code == '[' )		1552667	11					
ANR	1552777	Condition	* code == '['	93:5:1968:1979	1552667	0	True				
ANR	1552778	EqualityExpression	* code == '['		1552667	0		==			
ANR	1552779	UnaryOperationExpression	* code		1552667	0					
ANR	1552780	UnaryOperator	*		1552667	0					
ANR	1552781	Identifier	code		1552667	1					
ANR	1552782	PrimaryExpression	'['		1552667	1					
ANR	1552783	CompoundStatement		19:19:359:359	1552667	1					
ANR	1552784	ExpressionStatement	"out = r_hex_from_py_array ( out , code )"	94:2:1986:2023	1552667	0	True				
ANR	1552785	AssignmentExpression	"out = r_hex_from_py_array ( out , code )"		1552667	0		=			
ANR	1552786	Identifier	out		1552667	0					
ANR	1552787	CallExpression	"r_hex_from_py_array ( out , code )"		1552667	1					
ANR	1552788	Callee	r_hex_from_py_array		1552667	0					
ANR	1552789	Identifier	r_hex_from_py_array		1552667	0					
ANR	1552790	ArgumentList	out		1552667	1					
ANR	1552791	Argument	out		1552667	0					
ANR	1552792	Identifier	out		1552667	0					
ANR	1552793	Argument	code		1552667	1					
ANR	1552794	Identifier	code		1552667	0					
ANR	1552795	ElseStatement	else		1552667	0					
ANR	1552796	IfStatement	"if ( * code == '""' || * code == '\\'' )"		1552667	0					
ANR	1552797	Condition	"* code == '""' || * code == '\\''"	95:12:2037:2065	1552667	0	True				
ANR	1552798	OrExpression	"* code == '""' || * code == '\\''"		1552667	0		||			
ANR	1552799	EqualityExpression	"* code == '""'"		1552667	0		==			
ANR	1552800	UnaryOperationExpression	* code		1552667	0					
ANR	1552801	UnaryOperator	*		1552667	0					
ANR	1552802	Identifier	code		1552667	1					
ANR	1552803	PrimaryExpression	"'""'"		1552667	1					
ANR	1552804	EqualityExpression	* code == '\\''		1552667	1		==			
ANR	1552805	UnaryOperationExpression	* code		1552667	0					
ANR	1552806	UnaryOperator	*		1552667	0					
ANR	1552807	Identifier	code		1552667	1					
ANR	1552808	PrimaryExpression	'\\''		1552667	1					
ANR	1552809	CompoundStatement		21:43:445:445	1552667	1					
ANR	1552810	ExpressionStatement	"out = r_hex_from_py_str ( out , code )"	96:2:2072:2107	1552667	0	True				
ANR	1552811	AssignmentExpression	"out = r_hex_from_py_str ( out , code )"		1552667	0		=			
ANR	1552812	Identifier	out		1552667	0					
ANR	1552813	CallExpression	"r_hex_from_py_str ( out , code )"		1552667	1					
ANR	1552814	Callee	r_hex_from_py_str		1552667	0					
ANR	1552815	Identifier	r_hex_from_py_str		1552667	0					
ANR	1552816	ArgumentList	out		1552667	1					
ANR	1552817	Argument	out		1552667	0					
ANR	1552818	Identifier	out		1552667	0					
ANR	1552819	Argument	code		1552667	1					
ANR	1552820	Identifier	code		1552667	0					
ANR	1552821	IfStatement	if ( ! out )		1552667	12					
ANR	1552822	Condition	! out	98:5:2117:2120	1552667	0	True				
ANR	1552823	UnaryOperationExpression	! out		1552667	0					
ANR	1552824	UnaryOperator	!		1552667	0					
ANR	1552825	Identifier	out		1552667	1					
ANR	1552826	CompoundStatement		24:11:500:500	1552667	1					
ANR	1552827	ExpressionStatement	free ( ret )	99:2:2127:2137	1552667	0	True				
ANR	1552828	CallExpression	free ( ret )		1552667	0					
ANR	1552829	Callee	free		1552667	0					
ANR	1552830	Identifier	free		1552667	0					
ANR	1552831	ArgumentList	ret		1552667	1					
ANR	1552832	Argument	ret		1552667	0					
ANR	1552833	Identifier	ret		1552667	0					
ANR	1552834	ReturnStatement	return NULL ;	100:2:2141:2152	1552667	1	True				
ANR	1552835	Identifier	NULL		1552667	0					
ANR	1552836	ExpressionStatement	* out = '\\0'	102:1:2158:2169	1552667	13	True				
ANR	1552837	AssignmentExpression	* out = '\\0'		1552667	0		=			
ANR	1552838	UnaryOperationExpression	* out		1552667	0					
ANR	1552839	UnaryOperator	*		1552667	0					
ANR	1552840	Identifier	out		1552667	1					
ANR	1552841	PrimaryExpression	'\\0'		1552667	1					
ANR	1552842	ReturnStatement	return ret ;	103:1:2172:2182	1552667	14	True				
ANR	1552843	Identifier	ret		1552667	0					
ANR	1552844	ReturnType	R_API char *		1552667	1					
ANR	1552845	Identifier	r_hex_from_py		1552667	2					
ANR	1552846	ParameterList	const char * code		1552667	3					
ANR	1552847	Parameter	const char * code	75:26:1604:1619	1552667	0	True				
ANR	1552848	ParameterType	const char *		1552667	0					
ANR	1552849	Identifier	code		1552667	1					
ANR	1552850	CFGEntryNode	ENTRY		1552667		True				
ANR	1552851	CFGExitNode	EXIT		1552667		True				
ANR	1552852	Symbol	ret		1552667						
ANR	1552853	Symbol	malloc		1552667						
ANR	1552854	Symbol	tmp_code		1552667						
ANR	1552855	Symbol	code		1552667						
ANR	1552856	Symbol	NULL		1552667						
ANR	1552857	Symbol	strchr		1552667						
ANR	1552858	Symbol	* ret		1552667						
ANR	1552859	Symbol	out		1552667						
ANR	1552860	Symbol	strlen		1552667						
ANR	1552861	Symbol	* out		1552667						
ANR	1552862	Symbol	skip_comment_py		1552667						
ANR	1552863	Symbol	r_hex_from_py_str		1552667						
ANR	1552864	Symbol	r_hex_from_py_array		1552667						
ANR	1552865	Symbol	* code		1552667						
ANR	1552866	Function	r_hex_from_c_str	106:0:2187:3177							
ANR	1552867	FunctionDef	"r_hex_from_c_str (char * out , const char * * code)"		1552866	0					
ANR	1552868	CompoundStatement		106:59:2246:3177	1552866	0					
ANR	1552869	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdefABCDEF"" ;"	107:1:2249:2292	1552866	0	True				
ANR	1552870	IdentifierDecl	"abc [ ] = ""0123456789abcdefABCDEF"""		1552866	0					
ANR	1552871	IdentifierDeclType	const char [ ]		1552866	0					
ANR	1552872	Identifier	abc		1552866	1					
ANR	1552873	AssignmentExpression	"abc [ ] = ""0123456789abcdefABCDEF"""		1552866	2		=			
ANR	1552874	Identifier	abc		1552866	0					
ANR	1552875	PrimaryExpression	"""0123456789abcdefABCDEF"""		1552866	1					
ANR	1552876	IdentifierDeclStatement	const char * iter = * code ;	108:1:2295:2319	1552866	1	True				
ANR	1552877	IdentifierDecl	* iter = * code		1552866	0					
ANR	1552878	IdentifierDeclType	const char *		1552866	0					
ANR	1552879	Identifier	iter		1552866	1					
ANR	1552880	AssignmentExpression	* iter = * code		1552866	2		=			
ANR	1552881	Identifier	iter		1552866	0					
ANR	1552882	UnaryOperationExpression	* code		1552866	1					
ANR	1552883	UnaryOperator	*		1552866	0					
ANR	1552884	Identifier	code		1552866	1					
ANR	1552885	IfStatement	"if ( * iter != '\\'' && * iter != '""' )"		1552866	2					
ANR	1552886	Condition	"* iter != '\\'' && * iter != '""'"	109:5:2326:2354	1552866	0	True				
ANR	1552887	AndExpression	"* iter != '\\'' && * iter != '""'"		1552866	0		&&			
ANR	1552888	EqualityExpression	* iter != '\\''		1552866	0		!=			
ANR	1552889	UnaryOperationExpression	* iter		1552866	0					
ANR	1552890	UnaryOperator	*		1552866	0					
ANR	1552891	Identifier	iter		1552866	1					
ANR	1552892	PrimaryExpression	'\\''		1552866	1					
ANR	1552893	EqualityExpression	"* iter != '""'"		1552866	1		!=			
ANR	1552894	UnaryOperationExpression	* iter		1552866	0					
ANR	1552895	UnaryOperator	*		1552866	0					
ANR	1552896	Identifier	iter		1552866	1					
ANR	1552897	PrimaryExpression	"'""'"		1552866	1					
ANR	1552898	CompoundStatement		4:36:110:110	1552866	1					
ANR	1552899	ReturnStatement	return NULL ;	110:2:2361:2372	1552866	0	True				
ANR	1552900	Identifier	NULL		1552866	0					
ANR	1552901	IdentifierDeclStatement	const char end_char = * iter ;	112:1:2378:2405	1552866	3	True				
ANR	1552902	IdentifierDecl	end_char = * iter		1552866	0					
ANR	1552903	IdentifierDeclType	const char		1552866	0					
ANR	1552904	Identifier	end_char		1552866	1					
ANR	1552905	AssignmentExpression	end_char = * iter		1552866	2		=			
ANR	1552906	Identifier	end_char		1552866	0					
ANR	1552907	UnaryOperationExpression	* iter		1552866	1					
ANR	1552908	UnaryOperator	*		1552866	0					
ANR	1552909	Identifier	iter		1552866	1					
ANR	1552910	ExpressionStatement	iter ++	113:1:2408:2414	1552866	4	True				
ANR	1552911	PostIncDecOperationExpression	iter ++		1552866	0					
ANR	1552912	Identifier	iter		1552866	0					
ANR	1552913	IncDec	++		1552866	1					
ANR	1552914	ForStatement	for ( ; * iter && * iter != end_char ; iter ++ )		1552866	5					
ANR	1552915	Condition	* iter && * iter != end_char	114:8:2424:2449	1552866	0	True				
ANR	1552916	AndExpression	* iter && * iter != end_char		1552866	0		&&			
ANR	1552917	UnaryOperationExpression	* iter		1552866	0					
ANR	1552918	UnaryOperator	*		1552866	0					
ANR	1552919	Identifier	iter		1552866	1					
ANR	1552920	EqualityExpression	* iter != end_char		1552866	1		!=			
ANR	1552921	UnaryOperationExpression	* iter		1552866	0					
ANR	1552922	UnaryOperator	*		1552866	0					
ANR	1552923	Identifier	iter		1552866	1					
ANR	1552924	Identifier	end_char		1552866	1					
ANR	1552925	PostIncDecOperationExpression	iter ++	114:36:2452:2457	1552866	1	True				
ANR	1552926	Identifier	iter		1552866	0					
ANR	1552927	IncDec	++		1552866	1					
ANR	1552928	CompoundStatement		9:44:213:213	1552866	2					
ANR	1552929	IfStatement	if ( * iter == '\\\\' )		1552866	0					
ANR	1552930	Condition	* iter == '\\\\'	115:6:2468:2480	1552866	0	True				
ANR	1552931	EqualityExpression	* iter == '\\\\'		1552866	0		==			
ANR	1552932	UnaryOperationExpression	* iter		1552866	0					
ANR	1552933	UnaryOperator	*		1552866	0					
ANR	1552934	Identifier	iter		1552866	1					
ANR	1552935	PrimaryExpression	'\\\\'		1552866	1					
ANR	1552936	CompoundStatement		10:21:236:236	1552866	1					
ANR	1552937	ExpressionStatement	iter ++	116:3:2488:2494	1552866	0	True				
ANR	1552938	PostIncDecOperationExpression	iter ++		1552866	0					
ANR	1552939	Identifier	iter		1552866	0					
ANR	1552940	IncDec	++		1552866	1					
ANR	1552941	SwitchStatement	switch ( iter [ 0 ] )		1552866	1					
ANR	1552942	Condition	iter [ 0 ]	117:11:2507:2513	1552866	0	True				
ANR	1552943	ArrayIndexing	iter [ 0 ]		1552866	0					
ANR	1552944	Identifier	iter		1552866	0					
ANR	1552945	PrimaryExpression	0		1552866	1					
ANR	1552946	CompoundStatement		12:20:269:269	1552866	1					
ANR	1552947	Label	case 'e' :	118:3:2521:2529	1552866	0	True				
ANR	1552948	ExpressionStatement	* out ++ = '1'	118:13:2531:2541	1552866	1	True				
ANR	1552949	AssignmentExpression	* out ++ = '1'		1552866	0		=			
ANR	1552950	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552951	UnaryOperator	*		1552866	0					
ANR	1552952	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552953	Identifier	out		1552866	0					
ANR	1552954	IncDec	++		1552866	1					
ANR	1552955	PrimaryExpression	'1'		1552866	1					
ANR	1552956	ExpressionStatement	* out ++ = 'b'	118:24:2542:2552	1552866	2	True				
ANR	1552957	AssignmentExpression	* out ++ = 'b'		1552866	0		=			
ANR	1552958	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552959	UnaryOperator	*		1552866	0					
ANR	1552960	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552961	Identifier	out		1552866	0					
ANR	1552962	IncDec	++		1552866	1					
ANR	1552963	PrimaryExpression	'b'		1552866	1					
ANR	1552964	BreakStatement	break ;	118:35:2553:2558	1552866	3	True				
ANR	1552965	Label	case 'r' :	119:3:2563:2571	1552866	4	True				
ANR	1552966	ExpressionStatement	* out ++ = '0'	119:13:2573:2583	1552866	5	True				
ANR	1552967	AssignmentExpression	* out ++ = '0'		1552866	0		=			
ANR	1552968	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552969	UnaryOperator	*		1552866	0					
ANR	1552970	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552971	Identifier	out		1552866	0					
ANR	1552972	IncDec	++		1552866	1					
ANR	1552973	PrimaryExpression	'0'		1552866	1					
ANR	1552974	ExpressionStatement	* out ++ = 'd'	119:24:2584:2594	1552866	6	True				
ANR	1552975	AssignmentExpression	* out ++ = 'd'		1552866	0		=			
ANR	1552976	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552977	UnaryOperator	*		1552866	0					
ANR	1552978	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552979	Identifier	out		1552866	0					
ANR	1552980	IncDec	++		1552866	1					
ANR	1552981	PrimaryExpression	'd'		1552866	1					
ANR	1552982	BreakStatement	break ;	119:35:2595:2600	1552866	7	True				
ANR	1552983	Label	case 'n' :	120:3:2605:2613	1552866	8	True				
ANR	1552984	ExpressionStatement	* out ++ = '0'	120:13:2615:2625	1552866	9	True				
ANR	1552985	AssignmentExpression	* out ++ = '0'		1552866	0		=			
ANR	1552986	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552987	UnaryOperator	*		1552866	0					
ANR	1552988	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552989	Identifier	out		1552866	0					
ANR	1552990	IncDec	++		1552866	1					
ANR	1552991	PrimaryExpression	'0'		1552866	1					
ANR	1552992	ExpressionStatement	* out ++ = 'a'	120:24:2626:2636	1552866	10	True				
ANR	1552993	AssignmentExpression	* out ++ = 'a'		1552866	0		=			
ANR	1552994	UnaryOperationExpression	* out ++		1552866	0					
ANR	1552995	UnaryOperator	*		1552866	0					
ANR	1552996	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1552997	Identifier	out		1552866	0					
ANR	1552998	IncDec	++		1552866	1					
ANR	1552999	PrimaryExpression	'a'		1552866	1					
ANR	1553000	BreakStatement	break ;	120:35:2637:2642	1552866	11	True				
ANR	1553001	Label	case 'x' :	121:3:2647:2655	1552866	12	True				
ANR	1553002	CompoundStatement		18:4:438:454	1552866	13					
ANR	1553003	IdentifierDeclStatement	ut8 c1 = iter [ 1 ] ;	122:4:2663:2679	1552866	0	True				
ANR	1553004	IdentifierDecl	c1 = iter [ 1 ]		1552866	0					
ANR	1553005	IdentifierDeclType	ut8		1552866	0					
ANR	1553006	Identifier	c1		1552866	1					
ANR	1553007	AssignmentExpression	c1 = iter [ 1 ]		1552866	2		=			
ANR	1553008	Identifier	c1		1552866	0					
ANR	1553009	ArrayIndexing	iter [ 1 ]		1552866	1					
ANR	1553010	Identifier	iter		1552866	0					
ANR	1553011	PrimaryExpression	1		1552866	1					
ANR	1553012	IdentifierDeclStatement	ut8 c2 = iter [ 2 ] ;	123:4:2685:2701	1552866	1	True				
ANR	1553013	IdentifierDecl	c2 = iter [ 2 ]		1552866	0					
ANR	1553014	IdentifierDeclType	ut8		1552866	0					
ANR	1553015	Identifier	c2		1552866	1					
ANR	1553016	AssignmentExpression	c2 = iter [ 2 ]		1552866	2		=			
ANR	1553017	Identifier	c2		1552866	0					
ANR	1553018	ArrayIndexing	iter [ 2 ]		1552866	1					
ANR	1553019	Identifier	iter		1552866	0					
ANR	1553020	PrimaryExpression	2		1552866	1					
ANR	1553021	ExpressionStatement	iter += 2	124:4:2707:2716	1552866	2	True				
ANR	1553022	AssignmentExpression	iter += 2		1552866	0		+=			
ANR	1553023	Identifier	iter		1552866	0					
ANR	1553024	PrimaryExpression	2		1552866	1					
ANR	1553025	IfStatement	if ( c1 == '\\0' || c2 == '\\0' )		1552866	3					
ANR	1553026	Condition	c1 == '\\0' || c2 == '\\0'	125:8:2726:2749	1552866	0	True				
ANR	1553027	OrExpression	c1 == '\\0' || c2 == '\\0'		1552866	0		||			
ANR	1553028	EqualityExpression	c1 == '\\0'		1552866	0		==			
ANR	1553029	Identifier	c1		1552866	0					
ANR	1553030	PrimaryExpression	'\\0'		1552866	1					
ANR	1553031	EqualityExpression	c2 == '\\0'		1552866	1		==			
ANR	1553032	Identifier	c2		1552866	0					
ANR	1553033	PrimaryExpression	'\\0'		1552866	1					
ANR	1553034	CompoundStatement		20:34:505:505	1552866	1					
ANR	1553035	ReturnStatement	return NULL ;	126:5:2759:2770	1552866	0	True				
ANR	1553036	Identifier	NULL		1552866	0					
ANR	1553037	ElseStatement	else		1552866	0					
ANR	1553038	IfStatement	"if ( strchr ( abc , c1 ) && strchr ( abc , c2 ) )"		1552866	0					
ANR	1553039	Condition	"strchr ( abc , c1 ) && strchr ( abc , c2 )"	127:15:2787:2822	1552866	0	True				
ANR	1553040	AndExpression	"strchr ( abc , c1 ) && strchr ( abc , c2 )"		1552866	0		&&			
ANR	1553041	CallExpression	"strchr ( abc , c1 )"		1552866	0					
ANR	1553042	Callee	strchr		1552866	0					
ANR	1553043	Identifier	strchr		1552866	0					
ANR	1553044	ArgumentList	abc		1552866	1					
ANR	1553045	Argument	abc		1552866	0					
ANR	1553046	Identifier	abc		1552866	0					
ANR	1553047	Argument	c1		1552866	1					
ANR	1553048	Identifier	c1		1552866	0					
ANR	1553049	CallExpression	"strchr ( abc , c2 )"		1552866	1					
ANR	1553050	Callee	strchr		1552866	0					
ANR	1553051	Identifier	strchr		1552866	0					
ANR	1553052	ArgumentList	abc		1552866	1					
ANR	1553053	Argument	abc		1552866	0					
ANR	1553054	Identifier	abc		1552866	0					
ANR	1553055	Argument	c2		1552866	1					
ANR	1553056	Identifier	c2		1552866	0					
ANR	1553057	CompoundStatement		22:53:578:578	1552866	1					
ANR	1553058	ExpressionStatement	* out ++ = tolower ( c1 )	128:5:2832:2853	1552866	0	True				
ANR	1553059	AssignmentExpression	* out ++ = tolower ( c1 )		1552866	0		=			
ANR	1553060	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553061	UnaryOperator	*		1552866	0					
ANR	1553062	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553063	Identifier	out		1552866	0					
ANR	1553064	IncDec	++		1552866	1					
ANR	1553065	CallExpression	tolower ( c1 )		1552866	1					
ANR	1553066	Callee	tolower		1552866	0					
ANR	1553067	Identifier	tolower		1552866	0					
ANR	1553068	ArgumentList	c1		1552866	1					
ANR	1553069	Argument	c1		1552866	0					
ANR	1553070	Identifier	c1		1552866	0					
ANR	1553071	ExpressionStatement	* out ++ = tolower ( c2 )	129:5:2860:2881	1552866	1	True				
ANR	1553072	AssignmentExpression	* out ++ = tolower ( c2 )		1552866	0		=			
ANR	1553073	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553074	UnaryOperator	*		1552866	0					
ANR	1553075	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553076	Identifier	out		1552866	0					
ANR	1553077	IncDec	++		1552866	1					
ANR	1553078	CallExpression	tolower ( c2 )		1552866	1					
ANR	1553079	Callee	tolower		1552866	0					
ANR	1553080	Identifier	tolower		1552866	0					
ANR	1553081	ArgumentList	c2		1552866	1					
ANR	1553082	Argument	c2		1552866	0					
ANR	1553083	Identifier	c2		1552866	0					
ANR	1553084	ElseStatement	else		1552866	0					
ANR	1553085	CompoundStatement		25:11:647:647	1552866	0					
ANR	1553086	ReturnStatement	return NULL ;	131:5:2901:2912	1552866	0	True				
ANR	1553087	Identifier	NULL		1552866	0					
ANR	1553088	BreakStatement	break ;	133:4:2924:2929	1552866	4	True				
ANR	1553089	Label	default :	135:3:2941:2948	1552866	14	True				
ANR	1553090	Identifier	default		1552866	0					
ANR	1553091	IfStatement	if ( iter [ 0 ] == end_char )		1552866	15					
ANR	1553092	Condition	iter [ 0 ] == end_char	136:8:2958:2976	1552866	0	True				
ANR	1553093	EqualityExpression	iter [ 0 ] == end_char		1552866	0		==			
ANR	1553094	ArrayIndexing	iter [ 0 ]		1552866	0					
ANR	1553095	Identifier	iter		1552866	0					
ANR	1553096	PrimaryExpression	0		1552866	1					
ANR	1553097	Identifier	end_char		1552866	1					
ANR	1553098	CompoundStatement		31:29:732:732	1552866	1					
ANR	1553099	ExpressionStatement	* out ++ = abc [ * iter >> 4 ]	137:5:2986:3010	1552866	0	True				
ANR	1553100	AssignmentExpression	* out ++ = abc [ * iter >> 4 ]		1552866	0		=			
ANR	1553101	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553102	UnaryOperator	*		1552866	0					
ANR	1553103	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553104	Identifier	out		1552866	0					
ANR	1553105	IncDec	++		1552866	1					
ANR	1553106	ArrayIndexing	abc [ * iter >> 4 ]		1552866	1					
ANR	1553107	Identifier	abc		1552866	0					
ANR	1553108	ShiftExpression	* iter >> 4		1552866	1		>>			
ANR	1553109	UnaryOperationExpression	* iter		1552866	0					
ANR	1553110	UnaryOperator	*		1552866	0					
ANR	1553111	Identifier	iter		1552866	1					
ANR	1553112	PrimaryExpression	4		1552866	1					
ANR	1553113	ExpressionStatement	* out ++ = abc [ * iter & 0xf ]	138:5:3017:3042	1552866	1	True				
ANR	1553114	AssignmentExpression	* out ++ = abc [ * iter & 0xf ]		1552866	0		=			
ANR	1553115	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553116	UnaryOperator	*		1552866	0					
ANR	1553117	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553118	Identifier	out		1552866	0					
ANR	1553119	IncDec	++		1552866	1					
ANR	1553120	ArrayIndexing	abc [ * iter & 0xf ]		1552866	1					
ANR	1553121	Identifier	abc		1552866	0					
ANR	1553122	BitAndExpression	* iter & 0xf		1552866	1		&			
ANR	1553123	UnaryOperationExpression	* iter		1552866	0					
ANR	1553124	UnaryOperator	*		1552866	0					
ANR	1553125	Identifier	iter		1552866	1					
ANR	1553126	PrimaryExpression	0xf		1552866	1					
ANR	1553127	ReturnStatement	return NULL ;	140:4:3054:3065	1552866	16	True				
ANR	1553128	Identifier	NULL		1552866	0					
ANR	1553129	ElseStatement	else		1552866	0					
ANR	1553130	CompoundStatement		37:9:834:834	1552866	0					
ANR	1553131	ExpressionStatement	* out ++ = abc [ * iter >> 4 ]	143:3:3086:3110	1552866	0	True				
ANR	1553132	AssignmentExpression	* out ++ = abc [ * iter >> 4 ]		1552866	0		=			
ANR	1553133	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553134	UnaryOperator	*		1552866	0					
ANR	1553135	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553136	Identifier	out		1552866	0					
ANR	1553137	IncDec	++		1552866	1					
ANR	1553138	ArrayIndexing	abc [ * iter >> 4 ]		1552866	1					
ANR	1553139	Identifier	abc		1552866	0					
ANR	1553140	ShiftExpression	* iter >> 4		1552866	1		>>			
ANR	1553141	UnaryOperationExpression	* iter		1552866	0					
ANR	1553142	UnaryOperator	*		1552866	0					
ANR	1553143	Identifier	iter		1552866	1					
ANR	1553144	PrimaryExpression	4		1552866	1					
ANR	1553145	ExpressionStatement	* out ++ = abc [ * iter & 0xf ]	144:3:3115:3140	1552866	1	True				
ANR	1553146	AssignmentExpression	* out ++ = abc [ * iter & 0xf ]		1552866	0		=			
ANR	1553147	UnaryOperationExpression	* out ++		1552866	0					
ANR	1553148	UnaryOperator	*		1552866	0					
ANR	1553149	PostIncDecOperationExpression	out ++		1552866	1					
ANR	1553150	Identifier	out		1552866	0					
ANR	1553151	IncDec	++		1552866	1					
ANR	1553152	ArrayIndexing	abc [ * iter & 0xf ]		1552866	1					
ANR	1553153	Identifier	abc		1552866	0					
ANR	1553154	BitAndExpression	* iter & 0xf		1552866	1		&			
ANR	1553155	UnaryOperationExpression	* iter		1552866	0					
ANR	1553156	UnaryOperator	*		1552866	0					
ANR	1553157	Identifier	iter		1552866	1					
ANR	1553158	PrimaryExpression	0xf		1552866	1					
ANR	1553159	ExpressionStatement	* code = iter	147:1:3150:3162	1552866	6	True				
ANR	1553160	AssignmentExpression	* code = iter		1552866	0		=			
ANR	1553161	UnaryOperationExpression	* code		1552866	0					
ANR	1553162	UnaryOperator	*		1552866	0					
ANR	1553163	Identifier	code		1552866	1					
ANR	1553164	Identifier	iter		1552866	1					
ANR	1553165	ReturnStatement	return out ;	148:1:3165:3175	1552866	7	True				
ANR	1553166	Identifier	out		1552866	0					
ANR	1553167	ReturnType	R_API char *		1552866	1					
ANR	1553168	Identifier	r_hex_from_c_str		1552866	2					
ANR	1553169	ParameterList	"char * out , const char * * code"		1552866	3					
ANR	1553170	Parameter	char * out	106:29:2216:2224	1552866	0	True				
ANR	1553171	ParameterType	char *		1552866	0					
ANR	1553172	Identifier	out		1552866	1					
ANR	1553173	Parameter	const char * * code	106:40:2227:2243	1552866	1	True				
ANR	1553174	ParameterType	const char * *		1552866	0					
ANR	1553175	Identifier	code		1552866	1					
ANR	1553176	CFGEntryNode	ENTRY		1552866		True				
ANR	1553177	CFGExitNode	EXIT		1552866		True				
ANR	1553178	Symbol	* out ++		1552866						
ANR	1553179	Symbol	code		1552866						
ANR	1553180	Symbol	abc		1552866						
ANR	1553181	Symbol	NULL		1552866						
ANR	1553182	Symbol	tolower		1552866						
ANR	1553183	Symbol	end_char		1552866						
ANR	1553184	Symbol	iter		1552866						
ANR	1553185	Symbol	strchr		1552866						
ANR	1553186	Symbol	c1		1552866						
ANR	1553187	Symbol	out		1552866						
ANR	1553188	Symbol	c2		1552866						
ANR	1553189	Symbol	* iter		1552866						
ANR	1553190	Symbol	* abc		1552866						
ANR	1553191	Symbol	* * iter		1552866						
ANR	1553192	Symbol	* code		1552866						
ANR	1553193	Function	skip_comment_c	151:0:3180:3512							
ANR	1553194	FunctionDef	skip_comment_c (const char * code)		1553193	0					
ANR	1553195	CompoundStatement		151:45:3225:3512	1553193	0					
ANR	1553196	IfStatement	"if ( ! strncmp ( code , ""/*"" , 2 ) )"		1553193	0					
ANR	1553197	Condition	"! strncmp ( code , ""/*"" , 2 )"	152:5:3232:3255	1553193	0	True				
ANR	1553198	UnaryOperationExpression	"! strncmp ( code , ""/*"" , 2 )"		1553193	0					
ANR	1553199	UnaryOperator	!		1553193	0					
ANR	1553200	CallExpression	"strncmp ( code , ""/*"" , 2 )"		1553193	1					
ANR	1553201	Callee	strncmp		1553193	0					
ANR	1553202	Identifier	strncmp		1553193	0					
ANR	1553203	ArgumentList	code		1553193	1					
ANR	1553204	Argument	code		1553193	0					
ANR	1553205	Identifier	code		1553193	0					
ANR	1553206	Argument	"""/*"""		1553193	1					
ANR	1553207	PrimaryExpression	"""/*"""		1553193	0					
ANR	1553208	Argument	2		1553193	2					
ANR	1553209	PrimaryExpression	2		1553193	0					
ANR	1553210	CompoundStatement		3:2:36:67	1553193	1					
ANR	1553211	IdentifierDeclStatement	"char * end = strstr ( code , ""*/"" ) ;"	153:2:3262:3293	1553193	0	True				
ANR	1553212	IdentifierDecl	"* end = strstr ( code , ""*/"" )"		1553193	0					
ANR	1553213	IdentifierDeclType	char *		1553193	0					
ANR	1553214	Identifier	end		1553193	1					
ANR	1553215	AssignmentExpression	"* end = strstr ( code , ""*/"" )"		1553193	2		=			
ANR	1553216	Identifier	end		1553193	0					
ANR	1553217	CallExpression	"strstr ( code , ""*/"" )"		1553193	1					
ANR	1553218	Callee	strstr		1553193	0					
ANR	1553219	Identifier	strstr		1553193	0					
ANR	1553220	ArgumentList	code		1553193	1					
ANR	1553221	Argument	code		1553193	0					
ANR	1553222	Identifier	code		1553193	0					
ANR	1553223	Argument	"""*/"""		1553193	1					
ANR	1553224	PrimaryExpression	"""*/"""		1553193	0					
ANR	1553225	IfStatement	if ( end )		1553193	1					
ANR	1553226	Condition	end	154:6:3301:3303	1553193	0	True				
ANR	1553227	Identifier	end		1553193	0					
ANR	1553228	CompoundStatement		4:11:80:80	1553193	1					
ANR	1553229	ExpressionStatement	code = end + 2	155:3:3311:3325	1553193	0	True				
ANR	1553230	AssignmentExpression	code = end + 2		1553193	0		=			
ANR	1553231	Identifier	code		1553193	0					
ANR	1553232	AdditiveExpression	end + 2		1553193	1		+			
ANR	1553233	Identifier	end		1553193	0					
ANR	1553234	PrimaryExpression	2		1553193	1					
ANR	1553235	ElseStatement	else		1553193	0					
ANR	1553236	CompoundStatement		6:9:110:110	1553193	0					
ANR	1553237	ExpressionStatement	"eprintf ( ""Missing closing comment\\n"" )"	157:3:3341:3378	1553193	0	True				
ANR	1553238	CallExpression	"eprintf ( ""Missing closing comment\\n"" )"		1553193	0					
ANR	1553239	Callee	eprintf		1553193	0					
ANR	1553240	Identifier	eprintf		1553193	0					
ANR	1553241	ArgumentList	"""Missing closing comment\\n"""		1553193	1					
ANR	1553242	Argument	"""Missing closing comment\\n"""		1553193	0					
ANR	1553243	PrimaryExpression	"""Missing closing comment\\n"""		1553193	0					
ANR	1553244	ElseStatement	else		1553193	0					
ANR	1553245	IfStatement	"if ( ! strncmp ( code , ""//"" , 2 ) )"		1553193	0					
ANR	1553246	Condition	"! strncmp ( code , ""//"" , 2 )"	159:12:3396:3419	1553193	0	True				
ANR	1553247	UnaryOperationExpression	"! strncmp ( code , ""//"" , 2 )"		1553193	0					
ANR	1553248	UnaryOperator	!		1553193	0					
ANR	1553249	CallExpression	"strncmp ( code , ""//"" , 2 )"		1553193	1					
ANR	1553250	Callee	strncmp		1553193	0					
ANR	1553251	Identifier	strncmp		1553193	0					
ANR	1553252	ArgumentList	code		1553193	1					
ANR	1553253	Argument	code		1553193	0					
ANR	1553254	Identifier	code		1553193	0					
ANR	1553255	Argument	"""//"""		1553193	1					
ANR	1553256	PrimaryExpression	"""//"""		1553193	0					
ANR	1553257	Argument	2		1553193	2					
ANR	1553258	PrimaryExpression	2		1553193	0					
ANR	1553259	CompoundStatement		10:2:200:231	1553193	1					
ANR	1553260	IdentifierDeclStatement	"char * end = strchr ( code , '\\n' ) ;"	160:2:3426:3457	1553193	0	True				
ANR	1553261	IdentifierDecl	"* end = strchr ( code , '\\n' )"		1553193	0					
ANR	1553262	IdentifierDeclType	char *		1553193	0					
ANR	1553263	Identifier	end		1553193	1					
ANR	1553264	AssignmentExpression	"* end = strchr ( code , '\\n' )"		1553193	2		=			
ANR	1553265	Identifier	end		1553193	0					
ANR	1553266	CallExpression	"strchr ( code , '\\n' )"		1553193	1					
ANR	1553267	Callee	strchr		1553193	0					
ANR	1553268	Identifier	strchr		1553193	0					
ANR	1553269	ArgumentList	code		1553193	1					
ANR	1553270	Argument	code		1553193	0					
ANR	1553271	Identifier	code		1553193	0					
ANR	1553272	Argument	'\\n'		1553193	1					
ANR	1553273	PrimaryExpression	'\\n'		1553193	0					
ANR	1553274	IfStatement	if ( end )		1553193	1					
ANR	1553275	Condition	end	161:6:3465:3467	1553193	0	True				
ANR	1553276	Identifier	end		1553193	0					
ANR	1553277	CompoundStatement		11:11:244:244	1553193	1					
ANR	1553278	ExpressionStatement	code = end + 2	162:3:3475:3489	1553193	0	True				
ANR	1553279	AssignmentExpression	code = end + 2		1553193	0		=			
ANR	1553280	Identifier	code		1553193	0					
ANR	1553281	AdditiveExpression	end + 2		1553193	1		+			
ANR	1553282	Identifier	end		1553193	0					
ANR	1553283	PrimaryExpression	2		1553193	1					
ANR	1553284	ReturnStatement	return code ;	165:1:3499:3510	1553193	1	True				
ANR	1553285	Identifier	code		1553193	0					
ANR	1553286	ReturnType	const char *		1553193	1					
ANR	1553287	Identifier	skip_comment_c		1553193	2					
ANR	1553288	ParameterList	const char * code		1553193	3					
ANR	1553289	Parameter	const char * code	151:27:3207:3222	1553193	0	True				
ANR	1553290	ParameterType	const char *		1553193	0					
ANR	1553291	Identifier	code		1553193	1					
ANR	1553292	CFGEntryNode	ENTRY		1553193		True				
ANR	1553293	CFGExitNode	EXIT		1553193		True				
ANR	1553294	Symbol	strncmp		1553193						
ANR	1553295	Symbol	code		1553193						
ANR	1553296	Symbol	strstr		1553193						
ANR	1553297	Symbol	strchr		1553193						
ANR	1553298	Symbol	end		1553193						
ANR	1553299	Function	r_hex_from_c_array	168:0:3515:4236							
ANR	1553300	FunctionDef	"r_hex_from_c_array (char * out , const char * code)"		1553299	0					
ANR	1553301	CompoundStatement		168:60:3575:4236	1553299	0					
ANR	1553302	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdef"" ;"	169:1:3578:3615	1553299	0	True				
ANR	1553303	IdentifierDecl	"abc [ ] = ""0123456789abcdef"""		1553299	0					
ANR	1553304	IdentifierDeclType	const char [ ]		1553299	0					
ANR	1553305	Identifier	abc		1553299	1					
ANR	1553306	AssignmentExpression	"abc [ ] = ""0123456789abcdef"""		1553299	2		=			
ANR	1553307	Identifier	abc		1553299	0					
ANR	1553308	PrimaryExpression	"""0123456789abcdef"""		1553299	1					
ANR	1553309	IfStatement	"if ( * code != '{' || ! strchr ( code , '}' ) )"		1553299	1					
ANR	1553310	Condition	"* code != '{' || ! strchr ( code , '}' )"	170:5:3622:3655	1553299	0	True				
ANR	1553311	OrExpression	"* code != '{' || ! strchr ( code , '}' )"		1553299	0		||			
ANR	1553312	EqualityExpression	* code != '{'		1553299	0		!=			
ANR	1553313	UnaryOperationExpression	* code		1553299	0					
ANR	1553314	UnaryOperator	*		1553299	0					
ANR	1553315	Identifier	code		1553299	1					
ANR	1553316	PrimaryExpression	'{'		1553299	1					
ANR	1553317	UnaryOperationExpression	"! strchr ( code , '}' )"		1553299	1					
ANR	1553318	UnaryOperator	!		1553299	0					
ANR	1553319	CallExpression	"strchr ( code , '}' )"		1553299	1					
ANR	1553320	Callee	strchr		1553299	0					
ANR	1553321	Identifier	strchr		1553299	0					
ANR	1553322	ArgumentList	code		1553299	1					
ANR	1553323	Argument	code		1553299	0					
ANR	1553324	Identifier	code		1553299	0					
ANR	1553325	Argument	'}'		1553299	1					
ANR	1553326	PrimaryExpression	'}'		1553299	0					
ANR	1553327	CompoundStatement		3:41:82:82	1553299	1					
ANR	1553328	ReturnStatement	return NULL ;	171:2:3662:3673	1553299	0	True				
ANR	1553329	Identifier	NULL		1553299	0					
ANR	1553330	ExpressionStatement	code ++	173:1:3679:3685	1553299	2	True				
ANR	1553331	PostIncDecOperationExpression	code ++		1553299	0					
ANR	1553332	Identifier	code		1553299	0					
ANR	1553333	IncDec	++		1553299	1					
ANR	1553334	ForStatement	for ( ; * code ; code ++ )		1553299	3					
ANR	1553335	Condition	* code	174:8:3695:3699	1553299	0	True				
ANR	1553336	UnaryOperationExpression	* code		1553299	0					
ANR	1553337	UnaryOperator	*		1553299	0					
ANR	1553338	Identifier	code		1553299	1					
ANR	1553339	PostIncDecOperationExpression	code ++	174:15:3702:3707	1553299	1	True				
ANR	1553340	Identifier	code		1553299	0					
ANR	1553341	IncDec	++		1553299	1					
ANR	1553342	CompoundStatement		13:2:281:305	1553299	2					
ANR	1553343	IdentifierDeclStatement	"const char * comma = strchr ( code , ',' ) ;"	175:2:3714:3752	1553299	0	True				
ANR	1553344	IdentifierDecl	"* comma = strchr ( code , ',' )"		1553299	0					
ANR	1553345	IdentifierDeclType	const char *		1553299	0					
ANR	1553346	Identifier	comma		1553299	1					
ANR	1553347	AssignmentExpression	"* comma = strchr ( code , ',' )"		1553299	2		=			
ANR	1553348	Identifier	comma		1553299	0					
ANR	1553349	CallExpression	"strchr ( code , ',' )"		1553299	1					
ANR	1553350	Callee	strchr		1553299	0					
ANR	1553351	Identifier	strchr		1553299	0					
ANR	1553352	ArgumentList	code		1553299	1					
ANR	1553353	Argument	code		1553299	0					
ANR	1553354	Identifier	code		1553299	0					
ANR	1553355	Argument	"','"		1553299	1					
ANR	1553356	PrimaryExpression	"','"		1553299	0					
ANR	1553357	IfStatement	if ( ! comma )		1553299	1					
ANR	1553358	Condition	! comma	176:6:3760:3765	1553299	0	True				
ANR	1553359	UnaryOperationExpression	! comma		1553299	0					
ANR	1553360	UnaryOperator	!		1553299	0					
ANR	1553361	Identifier	comma		1553299	1					
ANR	1553362	CompoundStatement		9:14:192:192	1553299	1					
ANR	1553363	ExpressionStatement	"comma = strchr ( code , '}' )"	177:3:3773:3799	1553299	0	True				
ANR	1553364	AssignmentExpression	"comma = strchr ( code , '}' )"		1553299	0		=			
ANR	1553365	Identifier	comma		1553299	0					
ANR	1553366	CallExpression	"strchr ( code , '}' )"		1553299	1					
ANR	1553367	Callee	strchr		1553299	0					
ANR	1553368	Identifier	strchr		1553299	0					
ANR	1553369	ArgumentList	code		1553299	1					
ANR	1553370	Argument	code		1553299	0					
ANR	1553371	Identifier	code		1553299	0					
ANR	1553372	Argument	'}'		1553299	1					
ANR	1553373	PrimaryExpression	'}'		1553299	0					
ANR	1553374	IdentifierDeclStatement	"char * _word = r_str_ndup ( code , comma - code ) ;"	179:2:3807:3853	1553299	2	True				
ANR	1553375	IdentifierDecl	"* _word = r_str_ndup ( code , comma - code )"		1553299	0					
ANR	1553376	IdentifierDeclType	char *		1553299	0					
ANR	1553377	Identifier	_word		1553299	1					
ANR	1553378	AssignmentExpression	"* _word = r_str_ndup ( code , comma - code )"		1553299	2		=			
ANR	1553379	Identifier	_word		1553299	0					
ANR	1553380	CallExpression	"r_str_ndup ( code , comma - code )"		1553299	1					
ANR	1553381	Callee	r_str_ndup		1553299	0					
ANR	1553382	Identifier	r_str_ndup		1553299	0					
ANR	1553383	ArgumentList	code		1553299	1					
ANR	1553384	Argument	code		1553299	0					
ANR	1553385	Identifier	code		1553299	0					
ANR	1553386	Argument	comma - code		1553299	1					
ANR	1553387	AdditiveExpression	comma - code		1553299	0		-			
ANR	1553388	Identifier	comma		1553299	0					
ANR	1553389	Identifier	code		1553299	1					
ANR	1553390	IdentifierDeclStatement	const char * word = _word ;	180:2:3857:3881	1553299	3	True				
ANR	1553391	IdentifierDecl	* word = _word		1553299	0					
ANR	1553392	IdentifierDeclType	const char *		1553299	0					
ANR	1553393	Identifier	word		1553299	1					
ANR	1553394	AssignmentExpression	* word = _word		1553299	2		=			
ANR	1553395	Identifier	_word		1553299	0					
ANR	1553396	Identifier	_word		1553299	1					
ANR	1553397	ExpressionStatement	word = skip_comment_c ( word )	181:2:3885:3913	1553299	4	True				
ANR	1553398	AssignmentExpression	word = skip_comment_c ( word )		1553299	0		=			
ANR	1553399	Identifier	word		1553299	0					
ANR	1553400	CallExpression	skip_comment_c ( word )		1553299	1					
ANR	1553401	Callee	skip_comment_c		1553299	0					
ANR	1553402	Identifier	skip_comment_c		1553299	0					
ANR	1553403	ArgumentList	word		1553299	1					
ANR	1553404	Argument	word		1553299	0					
ANR	1553405	Identifier	word		1553299	0					
ANR	1553406	WhileStatement	while ( * word == ' ' || * word == '\\t' || * word == '\\n' )		1553299	5					
ANR	1553407	Condition	* word == ' ' || * word == '\\t' || * word == '\\n'	182:9:3924:3969	1553299	0	True				
ANR	1553408	OrExpression	* word == ' ' || * word == '\\t' || * word == '\\n'		1553299	0		||			
ANR	1553409	EqualityExpression	* word == ' '		1553299	0		==			
ANR	1553410	UnaryOperationExpression	* word		1553299	0					
ANR	1553411	UnaryOperator	*		1553299	0					
ANR	1553412	Identifier	word		1553299	1					
ANR	1553413	PrimaryExpression	' '		1553299	1					
ANR	1553414	OrExpression	* word == '\\t' || * word == '\\n'		1553299	1		||			
ANR	1553415	EqualityExpression	* word == '\\t'		1553299	0		==			
ANR	1553416	UnaryOperationExpression	* word		1553299	0					
ANR	1553417	UnaryOperator	*		1553299	0					
ANR	1553418	Identifier	word		1553299	1					
ANR	1553419	PrimaryExpression	'\\t'		1553299	1					
ANR	1553420	EqualityExpression	* word == '\\n'		1553299	1		==			
ANR	1553421	UnaryOperationExpression	* word		1553299	0					
ANR	1553422	UnaryOperator	*		1553299	0					
ANR	1553423	Identifier	word		1553299	1					
ANR	1553424	PrimaryExpression	'\\n'		1553299	1					
ANR	1553425	CompoundStatement		15:57:396:396	1553299	1					
ANR	1553426	ExpressionStatement	word ++	183:3:3977:3983	1553299	0	True				
ANR	1553427	PostIncDecOperationExpression	word ++		1553299	0					
ANR	1553428	Identifier	word		1553299	0					
ANR	1553429	IncDec	++		1553299	1					
ANR	1553430	ExpressionStatement	word = skip_comment_c ( word )	184:3:3988:4016	1553299	1	True				
ANR	1553431	AssignmentExpression	word = skip_comment_c ( word )		1553299	0		=			
ANR	1553432	Identifier	word		1553299	0					
ANR	1553433	CallExpression	skip_comment_c ( word )		1553299	1					
ANR	1553434	Callee	skip_comment_c		1553299	0					
ANR	1553435	Identifier	skip_comment_c		1553299	0					
ANR	1553436	ArgumentList	word		1553299	1					
ANR	1553437	Argument	word		1553299	0					
ANR	1553438	Identifier	word		1553299	0					
ANR	1553439	IfStatement	if ( IS_DIGIT ( * word ) )		1553299	6					
ANR	1553440	Condition	IS_DIGIT ( * word )	186:6:4028:4043	1553299	0	True				
ANR	1553441	CallExpression	IS_DIGIT ( * word )		1553299	0					
ANR	1553442	Callee	IS_DIGIT		1553299	0					
ANR	1553443	Identifier	IS_DIGIT		1553299	0					
ANR	1553444	ArgumentList	* word		1553299	1					
ANR	1553445	Argument	* word		1553299	0					
ANR	1553446	UnaryOperationExpression	* word		1553299	0					
ANR	1553447	UnaryOperator	*		1553299	0					
ANR	1553448	Identifier	word		1553299	1					
ANR	1553449	CompoundStatement		20:3:475:511	1553299	1					
ANR	1553450	IdentifierDeclStatement	"ut8 n = ( ut8 ) r_num_math ( NULL , word ) ;"	187:3:4051:4087	1553299	0	True				
ANR	1553451	IdentifierDecl	"n = ( ut8 ) r_num_math ( NULL , word )"		1553299	0					
ANR	1553452	IdentifierDeclType	ut8		1553299	0					
ANR	1553453	Identifier	n		1553299	1					
ANR	1553454	AssignmentExpression	"n = ( ut8 ) r_num_math ( NULL , word )"		1553299	2		=			
ANR	1553455	Identifier	n		1553299	0					
ANR	1553456	CastExpression	"( ut8 ) r_num_math ( NULL , word )"		1553299	1					
ANR	1553457	CastTarget	ut8		1553299	0					
ANR	1553458	CallExpression	"r_num_math ( NULL , word )"		1553299	1					
ANR	1553459	Callee	r_num_math		1553299	0					
ANR	1553460	Identifier	r_num_math		1553299	0					
ANR	1553461	ArgumentList	NULL		1553299	1					
ANR	1553462	Argument	NULL		1553299	0					
ANR	1553463	Identifier	NULL		1553299	0					
ANR	1553464	Argument	word		1553299	1					
ANR	1553465	Identifier	word		1553299	0					
ANR	1553466	ExpressionStatement	* out ++ = abc [ ( n >> 4 ) & 0xf ]	188:3:4092:4120	1553299	1	True				
ANR	1553467	AssignmentExpression	* out ++ = abc [ ( n >> 4 ) & 0xf ]		1553299	0		=			
ANR	1553468	UnaryOperationExpression	* out ++		1553299	0					
ANR	1553469	UnaryOperator	*		1553299	0					
ANR	1553470	PostIncDecOperationExpression	out ++		1553299	1					
ANR	1553471	Identifier	out		1553299	0					
ANR	1553472	IncDec	++		1553299	1					
ANR	1553473	ArrayIndexing	abc [ ( n >> 4 ) & 0xf ]		1553299	1					
ANR	1553474	Identifier	abc		1553299	0					
ANR	1553475	BitAndExpression	( n >> 4 ) & 0xf		1553299	1		&			
ANR	1553476	ShiftExpression	n >> 4		1553299	0		>>			
ANR	1553477	Identifier	n		1553299	0					
ANR	1553478	PrimaryExpression	4		1553299	1					
ANR	1553479	PrimaryExpression	0xf		1553299	1					
ANR	1553480	ExpressionStatement	* out ++ = abc [ n & 0xf ]	189:3:4125:4146	1553299	2	True				
ANR	1553481	AssignmentExpression	* out ++ = abc [ n & 0xf ]		1553299	0		=			
ANR	1553482	UnaryOperationExpression	* out ++		1553299	0					
ANR	1553483	UnaryOperator	*		1553299	0					
ANR	1553484	PostIncDecOperationExpression	out ++		1553299	1					
ANR	1553485	Identifier	out		1553299	0					
ANR	1553486	IncDec	++		1553299	1					
ANR	1553487	ArrayIndexing	abc [ n & 0xf ]		1553299	1					
ANR	1553488	Identifier	abc		1553299	0					
ANR	1553489	BitAndExpression	n & 0xf		1553299	1		&			
ANR	1553490	Identifier	n		1553299	0					
ANR	1553491	PrimaryExpression	0xf		1553299	1					
ANR	1553492	ExpressionStatement	free ( _word )	191:2:4154:4166	1553299	7	True				
ANR	1553493	CallExpression	free ( _word )		1553299	0					
ANR	1553494	Callee	free		1553299	0					
ANR	1553495	Identifier	free		1553299	0					
ANR	1553496	ArgumentList	_word		1553299	1					
ANR	1553497	Argument	_word		1553299	0					
ANR	1553498	Identifier	_word		1553299	0					
ANR	1553499	ExpressionStatement	code = comma	192:2:4170:4182	1553299	8	True				
ANR	1553500	AssignmentExpression	code = comma		1553299	0		=			
ANR	1553501	Identifier	code		1553299	0					
ANR	1553502	Identifier	comma		1553299	1					
ANR	1553503	IfStatement	if ( * code == '}' )		1553299	9					
ANR	1553504	Condition	* code == '}'	193:6:4190:4201	1553299	0	True				
ANR	1553505	EqualityExpression	* code == '}'		1553299	0		==			
ANR	1553506	UnaryOperationExpression	* code		1553299	0					
ANR	1553507	UnaryOperator	*		1553299	0					
ANR	1553508	Identifier	code		1553299	1					
ANR	1553509	PrimaryExpression	'}'		1553299	1					
ANR	1553510	CompoundStatement		26:20:628:628	1553299	1					
ANR	1553511	BreakStatement	break ;	194:3:4209:4214	1553299	0	True				
ANR	1553512	ReturnStatement	return out ;	197:1:4224:4234	1553299	4	True				
ANR	1553513	Identifier	out		1553299	0					
ANR	1553514	ReturnType	R_API char *		1553299	1					
ANR	1553515	Identifier	r_hex_from_c_array		1553299	2					
ANR	1553516	ParameterList	"char * out , const char * code"		1553299	3					
ANR	1553517	Parameter	char * out	168:31:3546:3554	1553299	0	True				
ANR	1553518	ParameterType	char *		1553299	0					
ANR	1553519	Identifier	out		1553299	1					
ANR	1553520	Parameter	const char * code	168:42:3557:3572	1553299	1	True				
ANR	1553521	ParameterType	const char *		1553299	0					
ANR	1553522	Identifier	code		1553299	1					
ANR	1553523	CFGEntryNode	ENTRY		1553299		True				
ANR	1553524	CFGExitNode	EXIT		1553299		True				
ANR	1553525	Symbol	* out ++		1553299						
ANR	1553526	Symbol	code		1553299						
ANR	1553527	Symbol	abc		1553299						
ANR	1553528	Symbol	NULL		1553299						
ANR	1553529	Symbol	r_str_ndup		1553299						
ANR	1553530	Symbol	* word		1553299						
ANR	1553531	Symbol	strchr		1553299						
ANR	1553532	Symbol	n		1553299						
ANR	1553533	Symbol	out		1553299						
ANR	1553534	Symbol	IS_DIGIT		1553299						
ANR	1553535	Symbol	r_num_math		1553299						
ANR	1553536	Symbol	comma		1553299						
ANR	1553537	Symbol	* abc		1553299						
ANR	1553538	Symbol	skip_comment_c		1553299						
ANR	1553539	Symbol	* n		1553299						
ANR	1553540	Symbol	_word		1553299						
ANR	1553541	Symbol	word		1553299						
ANR	1553542	Symbol	* code		1553299						
ANR	1553543	Function	r_hex_from_c	205:0:4317:5080							
ANR	1553544	FunctionDef	r_hex_from_c (const char * code)		1553543	0					
ANR	1553545	CompoundStatement		205:43:4360:5080	1553543	0					
ANR	1553546	IfStatement	if ( ! code )		1553543	0					
ANR	1553547	Condition	! code	206:5:4367:4371	1553543	0	True				
ANR	1553548	UnaryOperationExpression	! code		1553543	0					
ANR	1553549	UnaryOperator	!		1553543	0					
ANR	1553550	Identifier	code		1553543	1					
ANR	1553551	CompoundStatement		2:12:13:13	1553543	1					
ANR	1553552	ReturnStatement	return NULL ;	207:2:4378:4389	1553543	0	True				
ANR	1553553	Identifier	NULL		1553543	0					
ANR	1553554	Statement	char	209:1:4395:4398	1553543	1	True				
ANR	1553555	Statement	*	209:6:4400:4400	1553543	2	True				
ANR	1553556	Statement	const	209:8:4402:4406	1553543	3	True				
ANR	1553557	ExpressionStatement	ret = malloc ( strlen ( code ) * 3 )	209:14:4408:4440	1553543	4	True				
ANR	1553558	AssignmentExpression	ret = malloc ( strlen ( code ) * 3 )		1553543	0		=			
ANR	1553559	Identifier	ret		1553543	0					
ANR	1553560	CallExpression	malloc ( strlen ( code ) * 3 )		1553543	1					
ANR	1553561	Callee	malloc		1553543	0					
ANR	1553562	Identifier	malloc		1553543	0					
ANR	1553563	ArgumentList	strlen ( code ) * 3		1553543	1					
ANR	1553564	Argument	strlen ( code ) * 3		1553543	0					
ANR	1553565	MultiplicativeExpression	strlen ( code ) * 3		1553543	0		*			
ANR	1553566	CallExpression	strlen ( code )		1553543	0					
ANR	1553567	Callee	strlen		1553543	0					
ANR	1553568	Identifier	strlen		1553543	0					
ANR	1553569	ArgumentList	code		1553543	1					
ANR	1553570	Argument	code		1553543	0					
ANR	1553571	Identifier	code		1553543	0					
ANR	1553572	PrimaryExpression	3		1553543	1					
ANR	1553573	IfStatement	if ( ! ret )		1553543	5					
ANR	1553574	Condition	! ret	210:5:4447:4450	1553543	0	True				
ANR	1553575	UnaryOperationExpression	! ret		1553543	0					
ANR	1553576	UnaryOperator	!		1553543	0					
ANR	1553577	Identifier	ret		1553543	1					
ANR	1553578	CompoundStatement		6:11:92:92	1553543	1					
ANR	1553579	ReturnStatement	return NULL ;	211:2:4457:4468	1553543	0	True				
ANR	1553580	Identifier	NULL		1553543	0					
ANR	1553581	ExpressionStatement	* ret = '\\0'	213:1:4474:4485	1553543	6	True				
ANR	1553582	AssignmentExpression	* ret = '\\0'		1553543	0		=			
ANR	1553583	UnaryOperationExpression	* ret		1553543	0					
ANR	1553584	UnaryOperator	*		1553543	0					
ANR	1553585	Identifier	ret		1553543	1					
ANR	1553586	PrimaryExpression	'\\0'		1553543	1					
ANR	1553587	IdentifierDeclStatement	char * out = ret ;	214:1:4488:4503	1553543	7	True				
ANR	1553588	IdentifierDecl	* out = ret		1553543	0					
ANR	1553589	IdentifierDeclType	char *		1553543	0					
ANR	1553590	Identifier	out		1553543	1					
ANR	1553591	AssignmentExpression	* out = ret		1553543	2		=			
ANR	1553592	Identifier	ret		1553543	0					
ANR	1553593	Identifier	ret		1553543	1					
ANR	1553594	IdentifierDeclStatement	"const char * tmp_code = strchr ( code , '=' ) ;"	215:1:4506:4547	1553543	8	True				
ANR	1553595	IdentifierDecl	"* tmp_code = strchr ( code , '=' )"		1553543	0					
ANR	1553596	IdentifierDeclType	const char *		1553543	0					
ANR	1553597	Identifier	tmp_code		1553543	1					
ANR	1553598	AssignmentExpression	"* tmp_code = strchr ( code , '=' )"		1553543	2		=			
ANR	1553599	Identifier	tmp_code		1553543	0					
ANR	1553600	CallExpression	"strchr ( code , '=' )"		1553543	1					
ANR	1553601	Callee	strchr		1553543	0					
ANR	1553602	Identifier	strchr		1553543	0					
ANR	1553603	ArgumentList	code		1553543	1					
ANR	1553604	Argument	code		1553543	0					
ANR	1553605	Identifier	code		1553543	0					
ANR	1553606	Argument	'='		1553543	1					
ANR	1553607	PrimaryExpression	'='		1553543	0					
ANR	1553608	IfStatement	if ( tmp_code )		1553543	9					
ANR	1553609	Condition	tmp_code	216:5:4554:4561	1553543	0	True				
ANR	1553610	Identifier	tmp_code		1553543	0					
ANR	1553611	CompoundStatement		12:15:203:203	1553543	1					
ANR	1553612	ExpressionStatement	code = tmp_code	217:2:4568:4583	1553543	0	True				
ANR	1553613	AssignmentExpression	code = tmp_code		1553543	0		=			
ANR	1553614	Identifier	code		1553543	0					
ANR	1553615	Identifier	tmp_code		1553543	1					
ANR	1553616	ForStatement	"for ( ; * code != '\\0' && * code != '{' && * code != '""' ; code ++ )"		1553543	10					
ANR	1553617	Condition	"* code != '\\0' && * code != '{' && * code != '""'"	219:8:4596:4640	1553543	0	True				
ANR	1553618	AndExpression	"* code != '\\0' && * code != '{' && * code != '""'"		1553543	0		&&			
ANR	1553619	EqualityExpression	* code != '\\0'		1553543	0		!=			
ANR	1553620	UnaryOperationExpression	* code		1553543	0					
ANR	1553621	UnaryOperator	*		1553543	0					
ANR	1553622	Identifier	code		1553543	1					
ANR	1553623	PrimaryExpression	'\\0'		1553543	1					
ANR	1553624	AndExpression	"* code != '{' && * code != '""'"		1553543	1		&&			
ANR	1553625	EqualityExpression	* code != '{'		1553543	0		!=			
ANR	1553626	UnaryOperationExpression	* code		1553543	0					
ANR	1553627	UnaryOperator	*		1553543	0					
ANR	1553628	Identifier	code		1553543	1					
ANR	1553629	PrimaryExpression	'{'		1553543	1					
ANR	1553630	EqualityExpression	"* code != '""'"		1553543	1		!=			
ANR	1553631	UnaryOperationExpression	* code		1553543	0					
ANR	1553632	UnaryOperator	*		1553543	0					
ANR	1553633	Identifier	code		1553543	1					
ANR	1553634	PrimaryExpression	"'""'"		1553543	1					
ANR	1553635	PostIncDecOperationExpression	code ++	219:55:4643:4648	1553543	1	True				
ANR	1553636	Identifier	code		1553543	0					
ANR	1553637	IncDec	++		1553543	1					
ANR	1553638	CompoundStatement		15:63:290:290	1553543	2					
ANR	1553639	ExpressionStatement	code = skip_comment_c ( code )	220:2:4655:4683	1553543	0	True				
ANR	1553640	AssignmentExpression	code = skip_comment_c ( code )		1553543	0		=			
ANR	1553641	Identifier	code		1553543	0					
ANR	1553642	CallExpression	skip_comment_c ( code )		1553543	1					
ANR	1553643	Callee	skip_comment_c		1553543	0					
ANR	1553644	Identifier	skip_comment_c		1553543	0					
ANR	1553645	ArgumentList	code		1553543	1					
ANR	1553646	Argument	code		1553543	0					
ANR	1553647	Identifier	code		1553543	0					
ANR	1553648	IfStatement	if ( * code == '{' )		1553543	11					
ANR	1553649	Condition	* code == '{'	222:5:4693:4704	1553543	0	True				
ANR	1553650	EqualityExpression	* code == '{'		1553543	0		==			
ANR	1553651	UnaryOperationExpression	* code		1553543	0					
ANR	1553652	UnaryOperator	*		1553543	0					
ANR	1553653	Identifier	code		1553543	1					
ANR	1553654	PrimaryExpression	'{'		1553543	1					
ANR	1553655	CompoundStatement		18:19:346:346	1553543	1					
ANR	1553656	ExpressionStatement	"out = r_hex_from_c_array ( out , code )"	223:2:4711:4747	1553543	0	True				
ANR	1553657	AssignmentExpression	"out = r_hex_from_c_array ( out , code )"		1553543	0		=			
ANR	1553658	Identifier	out		1553543	0					
ANR	1553659	CallExpression	"r_hex_from_c_array ( out , code )"		1553543	1					
ANR	1553660	Callee	r_hex_from_c_array		1553543	0					
ANR	1553661	Identifier	r_hex_from_c_array		1553543	0					
ANR	1553662	ArgumentList	out		1553543	1					
ANR	1553663	Argument	out		1553543	0					
ANR	1553664	Identifier	out		1553543	0					
ANR	1553665	Argument	code		1553543	1					
ANR	1553666	Identifier	code		1553543	0					
ANR	1553667	ElseStatement	else		1553543	0					
ANR	1553668	IfStatement	"if ( * code == '""' )"		1553543	0					
ANR	1553669	Condition	"* code == '""'"	224:12:4761:4772	1553543	0	True				
ANR	1553670	EqualityExpression	"* code == '""'"		1553543	0		==			
ANR	1553671	UnaryOperationExpression	* code		1553543	0					
ANR	1553672	UnaryOperator	*		1553543	0					
ANR	1553673	Identifier	code		1553543	1					
ANR	1553674	PrimaryExpression	"'""'"		1553543	1					
ANR	1553675	CompoundStatement		21:2:418:437	1553543	1					
ANR	1553676	IdentifierDeclStatement	"const char * s1 , * s2 ;"	225:2:4779:4798	1553543	0	True				
ANR	1553677	IdentifierDecl	* s1		1553543	0					
ANR	1553678	IdentifierDeclType	const char *		1553543	0					
ANR	1553679	Identifier	s1		1553543	1					
ANR	1553680	IdentifierDecl	* s2		1553543	1					
ANR	1553681	IdentifierDeclType	const char *		1553543	0					
ANR	1553682	Identifier	s2		1553543	1					
ANR	1553683	ExpressionStatement	s1 = code	226:2:4802:4811	1553543	1	True				
ANR	1553684	AssignmentExpression	s1 = code		1553543	0		=			
ANR	1553685	Identifier	s1		1553543	0					
ANR	1553686	Identifier	code		1553543	1					
ANR	1553687	DoStatement	do		1553543	2					
ANR	1553688	CompoundStatement		23:5:457:457	1553543	0					
ANR	1553689	ExpressionStatement	code = s1	228:3:4823:4832	1553543	0	True				
ANR	1553690	AssignmentExpression	code = s1		1553543	0		=			
ANR	1553691	Identifier	code		1553543	0					
ANR	1553692	Identifier	s1		1553543	1					
ANR	1553693	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	229:3:4837:4872	1553543	1	True				
ANR	1553694	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		1553543	0		=			
ANR	1553695	Identifier	out		1553543	0					
ANR	1553696	CallExpression	"r_hex_from_c_str ( out , & code )"		1553543	1					
ANR	1553697	Callee	r_hex_from_c_str		1553543	0					
ANR	1553698	Identifier	r_hex_from_c_str		1553543	0					
ANR	1553699	ArgumentList	out		1553543	1					
ANR	1553700	Argument	out		1553543	0					
ANR	1553701	Identifier	out		1553543	0					
ANR	1553702	Argument	& code		1553543	1					
ANR	1553703	UnaryOperationExpression	& code		1553543	0					
ANR	1553704	UnaryOperator	&		1553543	0					
ANR	1553705	Identifier	code		1553543	1					
ANR	1553706	IfStatement	if ( ! out )		1553543	2					
ANR	1553707	Condition	! out	230:7:4881:4884	1553543	0	True				
ANR	1553708	UnaryOperationExpression	! out		1553543	0					
ANR	1553709	UnaryOperator	!		1553543	0					
ANR	1553710	Identifier	out		1553543	1					
ANR	1553711	CompoundStatement		26:13:526:526	1553543	1					
ANR	1553712	BreakStatement	break ;	231:4:4893:4898	1553543	0	True				
ANR	1553713	ExpressionStatement	"s1 = strchr ( code + 1 , '""' )"	233:3:4908:4935	1553543	3	True				
ANR	1553714	AssignmentExpression	"s1 = strchr ( code + 1 , '""' )"		1553543	0		=			
ANR	1553715	Identifier	s1		1553543	0					
ANR	1553716	CallExpression	"strchr ( code + 1 , '""' )"		1553543	1					
ANR	1553717	Callee	strchr		1553543	0					
ANR	1553718	Identifier	strchr		1553543	0					
ANR	1553719	ArgumentList	code + 1		1553543	1					
ANR	1553720	Argument	code + 1		1553543	0					
ANR	1553721	AdditiveExpression	code + 1		1553543	0		+			
ANR	1553722	Identifier	code		1553543	0					
ANR	1553723	PrimaryExpression	1		1553543	1					
ANR	1553724	Argument	"'""'"		1553543	1					
ANR	1553725	PrimaryExpression	"'""'"		1553543	0					
ANR	1553726	ExpressionStatement	"s2 = strchr ( code + 1 , ';' )"	234:3:4940:4967	1553543	4	True				
ANR	1553727	AssignmentExpression	"s2 = strchr ( code + 1 , ';' )"		1553543	0		=			
ANR	1553728	Identifier	s2		1553543	0					
ANR	1553729	CallExpression	"strchr ( code + 1 , ';' )"		1553543	1					
ANR	1553730	Callee	strchr		1553543	0					
ANR	1553731	Identifier	strchr		1553543	0					
ANR	1553732	ArgumentList	code + 1		1553543	1					
ANR	1553733	Argument	code + 1		1553543	0					
ANR	1553734	AdditiveExpression	code + 1		1553543	0		+			
ANR	1553735	Identifier	code		1553543	0					
ANR	1553736	PrimaryExpression	1		1553543	1					
ANR	1553737	Argument	';'		1553543	1					
ANR	1553738	PrimaryExpression	';'		1553543	0					
ANR	1553739	Condition	s1 && s2 && ( s1 <= s2 )	235:11:4980:5001	1553543	1	True				
ANR	1553740	AndExpression	s1 && s2 && ( s1 <= s2 )		1553543	0		&&			
ANR	1553741	Identifier	s1		1553543	0					
ANR	1553742	AndExpression	s2 && ( s1 <= s2 )		1553543	1		&&			
ANR	1553743	Identifier	s2		1553543	0					
ANR	1553744	RelationalExpression	s1 <= s2		1553543	1		<=			
ANR	1553745	Identifier	s1		1553543	0					
ANR	1553746	Identifier	s2		1553543	1					
ANR	1553747	IfStatement	if ( ! out )		1553543	12					
ANR	1553748	Condition	! out	237:5:5013:5016	1553543	0	True				
ANR	1553749	UnaryOperationExpression	! out		1553543	0					
ANR	1553750	UnaryOperator	!		1553543	0					
ANR	1553751	Identifier	out		1553543	1					
ANR	1553752	CompoundStatement		33:11:658:658	1553543	1					
ANR	1553753	ExpressionStatement	free ( ret )	238:2:5023:5033	1553543	0	True				
ANR	1553754	CallExpression	free ( ret )		1553543	0					
ANR	1553755	Callee	free		1553543	0					
ANR	1553756	Identifier	free		1553543	0					
ANR	1553757	ArgumentList	ret		1553543	1					
ANR	1553758	Argument	ret		1553543	0					
ANR	1553759	Identifier	ret		1553543	0					
ANR	1553760	ReturnStatement	return NULL ;	239:2:5037:5048	1553543	1	True				
ANR	1553761	Identifier	NULL		1553543	0					
ANR	1553762	ExpressionStatement	* out = '\\0'	241:1:5054:5065	1553543	13	True				
ANR	1553763	AssignmentExpression	* out = '\\0'		1553543	0		=			
ANR	1553764	UnaryOperationExpression	* out		1553543	0					
ANR	1553765	UnaryOperator	*		1553543	0					
ANR	1553766	Identifier	out		1553543	1					
ANR	1553767	PrimaryExpression	'\\0'		1553543	1					
ANR	1553768	ReturnStatement	return ret ;	242:1:5068:5078	1553543	14	True				
ANR	1553769	Identifier	ret		1553543	0					
ANR	1553770	ReturnType	R_API char *		1553543	1					
ANR	1553771	Identifier	r_hex_from_c		1553543	2					
ANR	1553772	ParameterList	const char * code		1553543	3					
ANR	1553773	Parameter	const char * code	205:25:4342:4357	1553543	0	True				
ANR	1553774	ParameterType	const char *		1553543	0					
ANR	1553775	Identifier	code		1553543	1					
ANR	1553776	CFGEntryNode	ENTRY		1553543		True				
ANR	1553777	CFGExitNode	EXIT		1553543		True				
ANR	1553778	Symbol	ret		1553543						
ANR	1553779	Symbol	malloc		1553543						
ANR	1553780	Symbol	tmp_code		1553543						
ANR	1553781	Symbol	r_hex_from_c_str		1553543						
ANR	1553782	Symbol	code		1553543						
ANR	1553783	Symbol	NULL		1553543						
ANR	1553784	Symbol	strchr		1553543						
ANR	1553785	Symbol	* ret		1553543						
ANR	1553786	Symbol	& code		1553543						
ANR	1553787	Symbol	out		1553543						
ANR	1553788	Symbol	strlen		1553543						
ANR	1553789	Symbol	skip_comment_c		1553543						
ANR	1553790	Symbol	* out		1553543						
ANR	1553791	Symbol	r_hex_from_c_array		1553543						
ANR	1553792	Symbol	* code		1553543						
ANR	1553793	Symbol	s1		1553543						
ANR	1553794	Symbol	s2		1553543						
ANR	1553795	Function	r_hex_from_js	246:0:5084:6112							
ANR	1553796	FunctionDef	r_hex_from_js (const char * code)		1553795	0					
ANR	1553797	CompoundStatement		246:44:5128:6112	1553795	0					
ANR	1553798	IdentifierDeclStatement	"char * s1 = strchr ( code , '\\'' ) ;"	247:1:5131:5162	1553795	0	True				
ANR	1553799	IdentifierDecl	"* s1 = strchr ( code , '\\'' )"		1553795	0					
ANR	1553800	IdentifierDeclType	char *		1553795	0					
ANR	1553801	Identifier	s1		1553795	1					
ANR	1553802	AssignmentExpression	"* s1 = strchr ( code , '\\'' )"		1553795	2		=			
ANR	1553803	Identifier	s1		1553795	0					
ANR	1553804	CallExpression	"strchr ( code , '\\'' )"		1553795	1					
ANR	1553805	Callee	strchr		1553795	0					
ANR	1553806	Identifier	strchr		1553795	0					
ANR	1553807	ArgumentList	code		1553795	1					
ANR	1553808	Argument	code		1553795	0					
ANR	1553809	Identifier	code		1553795	0					
ANR	1553810	Argument	'\\''		1553795	1					
ANR	1553811	PrimaryExpression	'\\''		1553795	0					
ANR	1553812	IdentifierDeclStatement	"char * s2 = strchr ( code , '""' ) ;"	248:1:5165:5195	1553795	1	True				
ANR	1553813	IdentifierDecl	"* s2 = strchr ( code , '""' )"		1553795	0					
ANR	1553814	IdentifierDeclType	char *		1553795	0					
ANR	1553815	Identifier	s2		1553795	1					
ANR	1553816	AssignmentExpression	"* s2 = strchr ( code , '""' )"		1553795	2		=			
ANR	1553817	Identifier	s2		1553795	0					
ANR	1553818	CallExpression	"strchr ( code , '""' )"		1553795	1					
ANR	1553819	Callee	strchr		1553795	0					
ANR	1553820	Identifier	strchr		1553795	0					
ANR	1553821	ArgumentList	code		1553795	1					
ANR	1553822	Argument	code		1553795	0					
ANR	1553823	Identifier	code		1553795	0					
ANR	1553824	Argument	"'""'"		1553795	1					
ANR	1553825	PrimaryExpression	"'""'"		1553795	0					
ANR	1553826	IfStatement	if ( ! ( s1 || s2 ) )		1553795	2					
ANR	1553827	Condition	! ( s1 || s2 )	251:5:5244:5254	1553795	0	True				
ANR	1553828	UnaryOperationExpression	! ( s1 || s2 )		1553795	0					
ANR	1553829	UnaryOperator	!		1553795	0					
ANR	1553830	OrExpression	s1 || s2		1553795	1		||			
ANR	1553831	Identifier	s1		1553795	0					
ANR	1553832	Identifier	s2		1553795	1					
ANR	1553833	CompoundStatement		6:18:128:128	1553795	1					
ANR	1553834	ReturnStatement	return NULL ;	252:2:5261:5272	1553795	0	True				
ANR	1553835	Identifier	NULL		1553795	0					
ANR	1553836	IdentifierDeclStatement	"char * start , * end ;"	255:1:5279:5298	1553795	3	True				
ANR	1553837	IdentifierDecl	* start		1553795	0					
ANR	1553838	IdentifierDeclType	char *		1553795	0					
ANR	1553839	Identifier	start		1553795	1					
ANR	1553840	IdentifierDecl	* end		1553795	1					
ANR	1553841	IdentifierDeclType	char *		1553795	0					
ANR	1553842	Identifier	end		1553795	1					
ANR	1553843	IfStatement	if ( s1 < s2 )		1553795	4					
ANR	1553844	Condition	s1 < s2	256:5:5305:5311	1553795	0	True				
ANR	1553845	RelationalExpression	s1 < s2		1553795	0		<			
ANR	1553846	Identifier	s1		1553795	0					
ANR	1553847	Identifier	s2		1553795	1					
ANR	1553848	CompoundStatement		11:14:185:185	1553795	1					
ANR	1553849	ExpressionStatement	start = s1	257:2:5318:5328	1553795	0	True				
ANR	1553850	AssignmentExpression	start = s1		1553795	0		=			
ANR	1553851	Identifier	start		1553795	0					
ANR	1553852	Identifier	s1		1553795	1					
ANR	1553853	ExpressionStatement	"end = strchr ( start + 1 , '\\'' )"	258:2:5332:5362	1553795	1	True				
ANR	1553854	AssignmentExpression	"end = strchr ( start + 1 , '\\'' )"		1553795	0		=			
ANR	1553855	Identifier	end		1553795	0					
ANR	1553856	CallExpression	"strchr ( start + 1 , '\\'' )"		1553795	1					
ANR	1553857	Callee	strchr		1553795	0					
ANR	1553858	Identifier	strchr		1553795	0					
ANR	1553859	ArgumentList	start + 1		1553795	1					
ANR	1553860	Argument	start + 1		1553795	0					
ANR	1553861	AdditiveExpression	start + 1		1553795	0		+			
ANR	1553862	Identifier	start		1553795	0					
ANR	1553863	PrimaryExpression	1		1553795	1					
ANR	1553864	Argument	'\\''		1553795	1					
ANR	1553865	PrimaryExpression	'\\''		1553795	0					
ANR	1553866	ElseStatement	else		1553795	0					
ANR	1553867	CompoundStatement		14:8:243:243	1553795	0					
ANR	1553868	ExpressionStatement	start = s2	260:2:5376:5386	1553795	0	True				
ANR	1553869	AssignmentExpression	start = s2		1553795	0		=			
ANR	1553870	Identifier	start		1553795	0					
ANR	1553871	Identifier	s2		1553795	1					
ANR	1553872	ExpressionStatement	"end = strchr ( start + 1 , '""' )"	261:2:5390:5419	1553795	1	True				
ANR	1553873	AssignmentExpression	"end = strchr ( start + 1 , '""' )"		1553795	0		=			
ANR	1553874	Identifier	end		1553795	0					
ANR	1553875	CallExpression	"strchr ( start + 1 , '""' )"		1553795	1					
ANR	1553876	Callee	strchr		1553795	0					
ANR	1553877	Identifier	strchr		1553795	0					
ANR	1553878	ArgumentList	start + 1		1553795	1					
ANR	1553879	Argument	start + 1		1553795	0					
ANR	1553880	AdditiveExpression	start + 1		1553795	0		+			
ANR	1553881	Identifier	start		1553795	0					
ANR	1553882	PrimaryExpression	1		1553795	1					
ANR	1553883	Argument	"'""'"		1553795	1					
ANR	1553884	PrimaryExpression	"'""'"		1553795	0					
ANR	1553885	IfStatement	if ( ! end )		1553795	5					
ANR	1553886	Condition	! end	265:5:5474:5477	1553795	0	True				
ANR	1553887	UnaryOperationExpression	! end		1553795	0					
ANR	1553888	UnaryOperator	!		1553795	0					
ANR	1553889	Identifier	end		1553795	1					
ANR	1553890	CompoundStatement		20:11:351:351	1553795	1					
ANR	1553891	ReturnStatement	return NULL ;	266:2:5484:5495	1553795	0	True				
ANR	1553892	Identifier	NULL		1553795	0					
ANR	1553893	IdentifierDeclStatement	"char * str = r_str_ndup ( start + 1 , end - start - 1 ) ;"	269:1:5502:5554	1553795	6	True				
ANR	1553894	IdentifierDecl	"* str = r_str_ndup ( start + 1 , end - start - 1 )"		1553795	0					
ANR	1553895	IdentifierDeclType	char *		1553795	0					
ANR	1553896	Identifier	str		1553795	1					
ANR	1553897	AssignmentExpression	"* str = r_str_ndup ( start + 1 , end - start - 1 )"		1553795	2		=			
ANR	1553898	Identifier	str		1553795	0					
ANR	1553899	CallExpression	"r_str_ndup ( start + 1 , end - start - 1 )"		1553795	1					
ANR	1553900	Callee	r_str_ndup		1553795	0					
ANR	1553901	Identifier	r_str_ndup		1553795	0					
ANR	1553902	ArgumentList	start + 1		1553795	1					
ANR	1553903	Argument	start + 1		1553795	0					
ANR	1553904	AdditiveExpression	start + 1		1553795	0		+			
ANR	1553905	Identifier	start		1553795	0					
ANR	1553906	PrimaryExpression	1		1553795	1					
ANR	1553907	Argument	end - start - 1		1553795	1					
ANR	1553908	AdditiveExpression	end - start - 1		1553795	0		-			
ANR	1553909	Identifier	end		1553795	0					
ANR	1553910	AdditiveExpression	start - 1		1553795	1		-			
ANR	1553911	Identifier	start		1553795	0					
ANR	1553912	PrimaryExpression	1		1553795	1					
ANR	1553913	IdentifierDeclStatement	ut8 * b64d = malloc ( end - start ) ;	272:1:5618:5650	1553795	7	True				
ANR	1553914	IdentifierDecl	* b64d = malloc ( end - start )		1553795	0					
ANR	1553915	IdentifierDeclType	ut8 *		1553795	0					
ANR	1553916	Identifier	b64d		1553795	1					
ANR	1553917	AssignmentExpression	* b64d = malloc ( end - start )		1553795	2		=			
ANR	1553918	Identifier	b64d		1553795	0					
ANR	1553919	CallExpression	malloc ( end - start )		1553795	1					
ANR	1553920	Callee	malloc		1553795	0					
ANR	1553921	Identifier	malloc		1553795	0					
ANR	1553922	ArgumentList	end - start		1553795	1					
ANR	1553923	Argument	end - start		1553795	0					
ANR	1553924	AdditiveExpression	end - start		1553795	0		-			
ANR	1553925	Identifier	end		1553795	0					
ANR	1553926	Identifier	start		1553795	1					
ANR	1553927	IfStatement	if ( ! b64d )		1553795	8					
ANR	1553928	Condition	! b64d	273:5:5657:5661	1553795	0	True				
ANR	1553929	UnaryOperationExpression	! b64d		1553795	0					
ANR	1553930	UnaryOperator	!		1553795	0					
ANR	1553931	Identifier	b64d		1553795	1					
ANR	1553932	CompoundStatement		28:12:535:535	1553795	1					
ANR	1553933	ExpressionStatement	free ( str )	274:2:5668:5678	1553795	0	True				
ANR	1553934	CallExpression	free ( str )		1553795	0					
ANR	1553935	Callee	free		1553795	0					
ANR	1553936	Identifier	free		1553795	0					
ANR	1553937	ArgumentList	str		1553795	1					
ANR	1553938	Argument	str		1553795	0					
ANR	1553939	Identifier	str		1553795	0					
ANR	1553940	ReturnStatement	return NULL ;	275:2:5682:5693	1553795	1	True				
ANR	1553941	Identifier	NULL		1553795	0					
ANR	1553942	ExpressionStatement	"r_base64_decode ( b64d , str , end - start - 1 )"	278:1:5700:5744	1553795	9	True				
ANR	1553943	CallExpression	"r_base64_decode ( b64d , str , end - start - 1 )"		1553795	0					
ANR	1553944	Callee	r_base64_decode		1553795	0					
ANR	1553945	Identifier	r_base64_decode		1553795	0					
ANR	1553946	ArgumentList	b64d		1553795	1					
ANR	1553947	Argument	b64d		1553795	0					
ANR	1553948	Identifier	b64d		1553795	0					
ANR	1553949	Argument	str		1553795	1					
ANR	1553950	Identifier	str		1553795	0					
ANR	1553951	Argument	end - start - 1		1553795	2					
ANR	1553952	AdditiveExpression	end - start - 1		1553795	0		-			
ANR	1553953	Identifier	end		1553795	0					
ANR	1553954	AdditiveExpression	start - 1		1553795	1		-			
ANR	1553955	Identifier	start		1553795	0					
ANR	1553956	PrimaryExpression	1		1553795	1					
ANR	1553957	IfStatement	if ( ! b64d )		1553795	10					
ANR	1553958	Condition	! b64d	279:5:5751:5755	1553795	0	True				
ANR	1553959	UnaryOperationExpression	! b64d		1553795	0					
ANR	1553960	UnaryOperator	!		1553795	0					
ANR	1553961	Identifier	b64d		1553795	1					
ANR	1553962	CompoundStatement		34:12:629:629	1553795	1					
ANR	1553963	ExpressionStatement	free ( str )	280:2:5762:5772	1553795	0	True				
ANR	1553964	CallExpression	free ( str )		1553795	0					
ANR	1553965	Callee	free		1553795	0					
ANR	1553966	Identifier	free		1553795	0					
ANR	1553967	ArgumentList	str		1553795	1					
ANR	1553968	Argument	str		1553795	0					
ANR	1553969	Identifier	str		1553795	0					
ANR	1553970	ExpressionStatement	free ( b64d )	281:2:5776:5787	1553795	1	True				
ANR	1553971	CallExpression	free ( b64d )		1553795	0					
ANR	1553972	Callee	free		1553795	0					
ANR	1553973	Identifier	free		1553795	0					
ANR	1553974	ArgumentList	b64d		1553795	1					
ANR	1553975	Argument	b64d		1553795	0					
ANR	1553976	Identifier	b64d		1553795	0					
ANR	1553977	ReturnStatement	return NULL ;	282:2:5791:5802	1553795	2	True				
ANR	1553978	Identifier	NULL		1553795	0					
ANR	1553979	IdentifierDeclStatement	"int i , len = strlen ( ( const char * ) b64d ) ;"	286:1:5837:5877	1553795	11	True				
ANR	1553980	IdentifierDecl	i		1553795	0					
ANR	1553981	IdentifierDeclType	int		1553795	0					
ANR	1553982	Identifier	i		1553795	1					
ANR	1553983	IdentifierDecl	len = strlen ( ( const char * ) b64d )		1553795	1					
ANR	1553984	IdentifierDeclType	int		1553795	0					
ANR	1553985	Identifier	len		1553795	1					
ANR	1553986	AssignmentExpression	len = strlen ( ( const char * ) b64d )		1553795	2		=			
ANR	1553987	Identifier	len		1553795	0					
ANR	1553988	CallExpression	strlen ( ( const char * ) b64d )		1553795	1					
ANR	1553989	Callee	strlen		1553795	0					
ANR	1553990	Identifier	strlen		1553795	0					
ANR	1553991	ArgumentList	( const char * ) b64d		1553795	1					
ANR	1553992	Argument	( const char * ) b64d		1553795	0					
ANR	1553993	CastExpression	( const char * ) b64d		1553795	0					
ANR	1553994	CastTarget	const char *		1553795	0					
ANR	1553995	Identifier	b64d		1553795	1					
ANR	1553996	IdentifierDeclStatement	char * out = malloc ( len * 2 + 1 ) ;	287:1:5880:5913	1553795	12	True				
ANR	1553997	IdentifierDecl	* out = malloc ( len * 2 + 1 )		1553795	0					
ANR	1553998	IdentifierDeclType	char *		1553795	0					
ANR	1553999	Identifier	out		1553795	1					
ANR	1554000	AssignmentExpression	* out = malloc ( len * 2 + 1 )		1553795	2		=			
ANR	1554001	Identifier	out		1553795	0					
ANR	1554002	CallExpression	malloc ( len * 2 + 1 )		1553795	1					
ANR	1554003	Callee	malloc		1553795	0					
ANR	1554004	Identifier	malloc		1553795	0					
ANR	1554005	ArgumentList	len * 2 + 1		1553795	1					
ANR	1554006	Argument	len * 2 + 1		1553795	0					
ANR	1554007	AdditiveExpression	len * 2 + 1		1553795	0		+			
ANR	1554008	MultiplicativeExpression	len * 2		1553795	0		*			
ANR	1554009	Identifier	len		1553795	0					
ANR	1554010	PrimaryExpression	2		1553795	1					
ANR	1554011	PrimaryExpression	1		1553795	1					
ANR	1554012	IfStatement	if ( ! out )		1553795	13					
ANR	1554013	Condition	! out	288:5:5920:5923	1553795	0	True				
ANR	1554014	UnaryOperationExpression	! out		1553795	0					
ANR	1554015	UnaryOperator	!		1553795	0					
ANR	1554016	Identifier	out		1553795	1					
ANR	1554017	CompoundStatement		43:11:797:797	1553795	1					
ANR	1554018	ExpressionStatement	free ( str )	289:2:5930:5940	1553795	0	True				
ANR	1554019	CallExpression	free ( str )		1553795	0					
ANR	1554020	Callee	free		1553795	0					
ANR	1554021	Identifier	free		1553795	0					
ANR	1554022	ArgumentList	str		1553795	1					
ANR	1554023	Argument	str		1553795	0					
ANR	1554024	Identifier	str		1553795	0					
ANR	1554025	ExpressionStatement	free ( b64d )	290:2:5944:5955	1553795	1	True				
ANR	1554026	CallExpression	free ( b64d )		1553795	0					
ANR	1554027	Callee	free		1553795	0					
ANR	1554028	Identifier	free		1553795	0					
ANR	1554029	ArgumentList	b64d		1553795	1					
ANR	1554030	Argument	b64d		1553795	0					
ANR	1554031	Identifier	b64d		1553795	0					
ANR	1554032	ReturnStatement	return NULL ;	291:2:5959:5970	1553795	2	True				
ANR	1554033	Identifier	NULL		1553795	0					
ANR	1554034	ForStatement	for ( i = 0 ; i < len ; i ++ )		1553795	14					
ANR	1554035	ForInit	i = 0 ;	293:6:5981:5986	1553795	0	True				
ANR	1554036	AssignmentExpression	i = 0		1553795	0		=			
ANR	1554037	Identifier	i		1553795	0					
ANR	1554038	PrimaryExpression	0		1553795	1					
ANR	1554039	Condition	i < len	293:13:5988:5994	1553795	1	True				
ANR	1554040	RelationalExpression	i < len		1553795	0		<			
ANR	1554041	Identifier	i		1553795	0					
ANR	1554042	Identifier	len		1553795	1					
ANR	1554043	PostIncDecOperationExpression	i ++	293:22:5997:5999	1553795	2	True				
ANR	1554044	Identifier	i		1553795	0					
ANR	1554045	IncDec	++		1553795	1					
ANR	1554046	CompoundStatement		48:27:873:873	1553795	3					
ANR	1554047	ExpressionStatement	"sprintf ( & out [ i * 2 ] , ""%02x"" , b64d [ i ] )"	294:2:6006:6044	1553795	0	True				
ANR	1554048	CallExpression	"sprintf ( & out [ i * 2 ] , ""%02x"" , b64d [ i ] )"		1553795	0					
ANR	1554049	Callee	sprintf		1553795	0					
ANR	1554050	Identifier	sprintf		1553795	0					
ANR	1554051	ArgumentList	& out [ i * 2 ]		1553795	1					
ANR	1554052	Argument	& out [ i * 2 ]		1553795	0					
ANR	1554053	UnaryOperationExpression	& out [ i * 2 ]		1553795	0					
ANR	1554054	UnaryOperator	&		1553795	0					
ANR	1554055	ArrayIndexing	out [ i * 2 ]		1553795	1					
ANR	1554056	Identifier	out		1553795	0					
ANR	1554057	MultiplicativeExpression	i * 2		1553795	1		*			
ANR	1554058	Identifier	i		1553795	0					
ANR	1554059	PrimaryExpression	2		1553795	1					
ANR	1554060	Argument	"""%02x"""		1553795	1					
ANR	1554061	PrimaryExpression	"""%02x"""		1553795	0					
ANR	1554062	Argument	b64d [ i ]		1553795	2					
ANR	1554063	ArrayIndexing	b64d [ i ]		1553795	0					
ANR	1554064	Identifier	b64d		1553795	0					
ANR	1554065	Identifier	i		1553795	1					
ANR	1554066	ExpressionStatement	out [ len * 2 ] = '\\0'	296:1:6050:6069	1553795	15	True				
ANR	1554067	AssignmentExpression	out [ len * 2 ] = '\\0'		1553795	0		=			
ANR	1554068	ArrayIndexing	out [ len * 2 ]		1553795	0					
ANR	1554069	Identifier	out		1553795	0					
ANR	1554070	MultiplicativeExpression	len * 2		1553795	1		*			
ANR	1554071	Identifier	len		1553795	0					
ANR	1554072	PrimaryExpression	2		1553795	1					
ANR	1554073	PrimaryExpression	'\\0'		1553795	1					
ANR	1554074	ExpressionStatement	free ( str )	298:1:6073:6083	1553795	16	True				
ANR	1554075	CallExpression	free ( str )		1553795	0					
ANR	1554076	Callee	free		1553795	0					
ANR	1554077	Identifier	free		1553795	0					
ANR	1554078	ArgumentList	str		1553795	1					
ANR	1554079	Argument	str		1553795	0					
ANR	1554080	Identifier	str		1553795	0					
ANR	1554081	ExpressionStatement	free ( b64d )	299:1:6086:6097	1553795	17	True				
ANR	1554082	CallExpression	free ( b64d )		1553795	0					
ANR	1554083	Callee	free		1553795	0					
ANR	1554084	Identifier	free		1553795	0					
ANR	1554085	ArgumentList	b64d		1553795	1					
ANR	1554086	Argument	b64d		1553795	0					
ANR	1554087	Identifier	b64d		1553795	0					
ANR	1554088	ReturnStatement	return out ;	300:1:6100:6110	1553795	18	True				
ANR	1554089	Identifier	out		1553795	0					
ANR	1554090	ReturnType	R_API char *		1553795	1					
ANR	1554091	Identifier	r_hex_from_js		1553795	2					
ANR	1554092	ParameterList	const char * code		1553795	3					
ANR	1554093	Parameter	const char * code	246:26:5110:5125	1553795	0	True				
ANR	1554094	ParameterType	const char *		1553795	0					
ANR	1554095	Identifier	code		1553795	1					
ANR	1554096	CFGEntryNode	ENTRY		1553795		True				
ANR	1554097	CFGExitNode	EXIT		1553795		True				
ANR	1554098	Symbol	malloc		1553795						
ANR	1554099	Symbol	* b64d		1553795						
ANR	1554100	Symbol	code		1553795						
ANR	1554101	Symbol	NULL		1553795						
ANR	1554102	Symbol	r_str_ndup		1553795						
ANR	1554103	Symbol	start		1553795						
ANR	1554104	Symbol	strchr		1553795						
ANR	1554105	Symbol	b64d		1553795						
ANR	1554106	Symbol	i		1553795						
ANR	1554107	Symbol	out		1553795						
ANR	1554108	Symbol	str		1553795						
ANR	1554109	Symbol	strlen		1553795						
ANR	1554110	Symbol	* i		1553795						
ANR	1554111	Symbol	len		1553795						
ANR	1554112	Symbol	* out		1553795						
ANR	1554113	Symbol	end		1553795						
ANR	1554114	Symbol	s1		1553795						
ANR	1554115	Symbol	s2		1553795						
ANR	1554116	Symbol	* len		1553795						
ANR	1554117	Function	r_hex_no_code	309:0:6202:6649							
ANR	1554118	FunctionDef	r_hex_no_code (const char * code)		1554117	0					
ANR	1554119	CompoundStatement		309:44:6246:6649	1554117	0					
ANR	1554120	IfStatement	if ( ! code )		1554117	0					
ANR	1554121	Condition	! code	310:5:6253:6257	1554117	0	True				
ANR	1554122	UnaryOperationExpression	! code		1554117	0					
ANR	1554123	UnaryOperator	!		1554117	0					
ANR	1554124	Identifier	code		1554117	1					
ANR	1554125	CompoundStatement		2:12:13:13	1554117	1					
ANR	1554126	ReturnStatement	return NULL ;	311:2:6264:6275	1554117	0	True				
ANR	1554127	Identifier	NULL		1554117	0					
ANR	1554128	Statement	char	313:1:6281:6284	1554117	1	True				
ANR	1554129	Statement	*	313:6:6286:6286	1554117	2	True				
ANR	1554130	Statement	const	313:8:6288:6292	1554117	3	True				
ANR	1554131	ExpressionStatement	"ret = calloc ( 1 , strlen ( code ) * 3 )"	313:14:6294:6329	1554117	4	True				
ANR	1554132	AssignmentExpression	"ret = calloc ( 1 , strlen ( code ) * 3 )"		1554117	0		=			
ANR	1554133	Identifier	ret		1554117	0					
ANR	1554134	CallExpression	"calloc ( 1 , strlen ( code ) * 3 )"		1554117	1					
ANR	1554135	Callee	calloc		1554117	0					
ANR	1554136	Identifier	calloc		1554117	0					
ANR	1554137	ArgumentList	1		1554117	1					
ANR	1554138	Argument	1		1554117	0					
ANR	1554139	PrimaryExpression	1		1554117	0					
ANR	1554140	Argument	strlen ( code ) * 3		1554117	1					
ANR	1554141	MultiplicativeExpression	strlen ( code ) * 3		1554117	0		*			
ANR	1554142	CallExpression	strlen ( code )		1554117	0					
ANR	1554143	Callee	strlen		1554117	0					
ANR	1554144	Identifier	strlen		1554117	0					
ANR	1554145	ArgumentList	code		1554117	1					
ANR	1554146	Argument	code		1554117	0					
ANR	1554147	Identifier	code		1554117	0					
ANR	1554148	PrimaryExpression	3		1554117	1					
ANR	1554149	IfStatement	if ( ! ret )		1554117	5					
ANR	1554150	Condition	! ret	314:5:6336:6339	1554117	0	True				
ANR	1554151	UnaryOperationExpression	! ret		1554117	0					
ANR	1554152	UnaryOperator	!		1554117	0					
ANR	1554153	Identifier	ret		1554117	1					
ANR	1554154	CompoundStatement		6:11:95:95	1554117	1					
ANR	1554155	ReturnStatement	return NULL ;	315:2:6346:6357	1554117	0	True				
ANR	1554156	Identifier	NULL		1554117	0					
ANR	1554157	ExpressionStatement	* ret = '\\0'	317:1:6363:6374	1554117	6	True				
ANR	1554158	AssignmentExpression	* ret = '\\0'		1554117	0		=			
ANR	1554159	UnaryOperationExpression	* ret		1554117	0					
ANR	1554160	UnaryOperator	*		1554117	0					
ANR	1554161	Identifier	ret		1554117	1					
ANR	1554162	PrimaryExpression	'\\0'		1554117	1					
ANR	1554163	IdentifierDeclStatement	char * out = ret ;	318:1:6377:6392	1554117	7	True				
ANR	1554164	IdentifierDecl	* out = ret		1554117	0					
ANR	1554165	IdentifierDeclType	char *		1554117	0					
ANR	1554166	Identifier	out		1554117	1					
ANR	1554167	AssignmentExpression	* out = ret		1554117	2		=			
ANR	1554168	Identifier	ret		1554117	0					
ANR	1554169	Identifier	ret		1554117	1					
ANR	1554170	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	319:1:6395:6430	1554117	8	True				
ANR	1554171	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		1554117	0		=			
ANR	1554172	Identifier	out		1554117	0					
ANR	1554173	CallExpression	"r_hex_from_c_str ( out , & code )"		1554117	1					
ANR	1554174	Callee	r_hex_from_c_str		1554117	0					
ANR	1554175	Identifier	r_hex_from_c_str		1554117	0					
ANR	1554176	ArgumentList	out		1554117	1					
ANR	1554177	Argument	out		1554117	0					
ANR	1554178	Identifier	out		1554117	0					
ANR	1554179	Argument	& code		1554117	1					
ANR	1554180	UnaryOperationExpression	& code		1554117	0					
ANR	1554181	UnaryOperator	&		1554117	0					
ANR	1554182	Identifier	code		1554117	1					
ANR	1554183	ExpressionStatement	"code = strchr ( code + 1 , '""' )"	320:1:6433:6462	1554117	9	True				
ANR	1554184	AssignmentExpression	"code = strchr ( code + 1 , '""' )"		1554117	0		=			
ANR	1554185	Identifier	code		1554117	0					
ANR	1554186	CallExpression	"strchr ( code + 1 , '""' )"		1554117	1					
ANR	1554187	Callee	strchr		1554117	0					
ANR	1554188	Identifier	strchr		1554117	0					
ANR	1554189	ArgumentList	code + 1		1554117	1					
ANR	1554190	Argument	code + 1		1554117	0					
ANR	1554191	AdditiveExpression	code + 1		1554117	0		+			
ANR	1554192	Identifier	code		1554117	0					
ANR	1554193	PrimaryExpression	1		1554117	1					
ANR	1554194	Argument	"'""'"		1554117	1					
ANR	1554195	PrimaryExpression	"'""'"		1554117	0					
ANR	1554196	IfStatement	if ( ! out )		1554117	10					
ANR	1554197	Condition	! out	321:5:6469:6472	1554117	0	True				
ANR	1554198	UnaryOperationExpression	! out		1554117	0					
ANR	1554199	UnaryOperator	!		1554117	0					
ANR	1554200	Identifier	out		1554117	1					
ANR	1554201	CompoundStatement		13:11:228:228	1554117	1					
ANR	1554202	ExpressionStatement	free ( ret )	322:2:6479:6489	1554117	0	True				
ANR	1554203	CallExpression	free ( ret )		1554117	0					
ANR	1554204	Callee	free		1554117	0					
ANR	1554205	Identifier	free		1554117	0					
ANR	1554206	ArgumentList	ret		1554117	1					
ANR	1554207	Argument	ret		1554117	0					
ANR	1554208	Identifier	ret		1554117	0					
ANR	1554209	ReturnStatement	return NULL ;	323:2:6493:6504	1554117	1	True				
ANR	1554210	Identifier	NULL		1554117	0					
ANR	1554211	ExpressionStatement	* out = '\\0'	325:1:6510:6521	1554117	11	True				
ANR	1554212	AssignmentExpression	* out = '\\0'		1554117	0		=			
ANR	1554213	UnaryOperationExpression	* out		1554117	0					
ANR	1554214	UnaryOperator	*		1554117	0					
ANR	1554215	Identifier	out		1554117	1					
ANR	1554216	PrimaryExpression	'\\0'		1554117	1					
ANR	1554217	WhileStatement	while ( out && code )		1554117	12					
ANR	1554218	Condition	out && code	326:8:6531:6541	1554117	0	True				
ANR	1554219	AndExpression	out && code		1554117	0		&&			
ANR	1554220	Identifier	out		1554117	0					
ANR	1554221	Identifier	code		1554117	1					
ANR	1554222	CompoundStatement		18:21:297:297	1554117	1					
ANR	1554223	ExpressionStatement	* out = '\\0'	327:2:6548:6559	1554117	0	True				
ANR	1554224	AssignmentExpression	* out = '\\0'		1554117	0		=			
ANR	1554225	UnaryOperationExpression	* out		1554117	0					
ANR	1554226	UnaryOperator	*		1554117	0					
ANR	1554227	Identifier	out		1554117	1					
ANR	1554228	PrimaryExpression	'\\0'		1554117	1					
ANR	1554229	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	328:2:6563:6598	1554117	1	True				
ANR	1554230	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		1554117	0		=			
ANR	1554231	Identifier	out		1554117	0					
ANR	1554232	CallExpression	"r_hex_from_c_str ( out , & code )"		1554117	1					
ANR	1554233	Callee	r_hex_from_c_str		1554117	0					
ANR	1554234	Identifier	r_hex_from_c_str		1554117	0					
ANR	1554235	ArgumentList	out		1554117	1					
ANR	1554236	Argument	out		1554117	0					
ANR	1554237	Identifier	out		1554117	0					
ANR	1554238	Argument	& code		1554117	1					
ANR	1554239	UnaryOperationExpression	& code		1554117	0					
ANR	1554240	UnaryOperator	&		1554117	0					
ANR	1554241	Identifier	code		1554117	1					
ANR	1554242	ExpressionStatement	"code = strchr ( code + 1 , '""' )"	329:2:6602:6631	1554117	2	True				
ANR	1554243	AssignmentExpression	"code = strchr ( code + 1 , '""' )"		1554117	0		=			
ANR	1554244	Identifier	code		1554117	0					
ANR	1554245	CallExpression	"strchr ( code + 1 , '""' )"		1554117	1					
ANR	1554246	Callee	strchr		1554117	0					
ANR	1554247	Identifier	strchr		1554117	0					
ANR	1554248	ArgumentList	code + 1		1554117	1					
ANR	1554249	Argument	code + 1		1554117	0					
ANR	1554250	AdditiveExpression	code + 1		1554117	0		+			
ANR	1554251	Identifier	code		1554117	0					
ANR	1554252	PrimaryExpression	1		1554117	1					
ANR	1554253	Argument	"'""'"		1554117	1					
ANR	1554254	PrimaryExpression	"'""'"		1554117	0					
ANR	1554255	ReturnStatement	return ret ;	331:1:6637:6647	1554117	13	True				
ANR	1554256	Identifier	ret		1554117	0					
ANR	1554257	ReturnType	R_API char *		1554117	1					
ANR	1554258	Identifier	r_hex_no_code		1554117	2					
ANR	1554259	ParameterList	const char * code		1554117	3					
ANR	1554260	Parameter	const char * code	309:26:6228:6243	1554117	0	True				
ANR	1554261	ParameterType	const char *		1554117	0					
ANR	1554262	Identifier	code		1554117	1					
ANR	1554263	CFGEntryNode	ENTRY		1554117		True				
ANR	1554264	CFGExitNode	EXIT		1554117		True				
ANR	1554265	Symbol	ret		1554117						
ANR	1554266	Symbol	strlen		1554117						
ANR	1554267	Symbol	r_hex_from_c_str		1554117						
ANR	1554268	Symbol	code		1554117						
ANR	1554269	Symbol	NULL		1554117						
ANR	1554270	Symbol	* out		1554117						
ANR	1554271	Symbol	strchr		1554117						
ANR	1554272	Symbol	calloc		1554117						
ANR	1554273	Symbol	* ret		1554117						
ANR	1554274	Symbol	& code		1554117						
ANR	1554275	Symbol	out		1554117						
ANR	1554276	Function	r_hex_from_code	334:0:6652:6999							
ANR	1554277	FunctionDef	r_hex_from_code (const char * code)		1554276	0					
ANR	1554278	CompoundStatement		334:46:6698:6999	1554276	0					
ANR	1554279	IfStatement	"if ( ! strchr ( code , '=' ) )"		1554276	0					
ANR	1554280	Condition	"! strchr ( code , '=' )"	335:5:6705:6723	1554276	0	True				
ANR	1554281	UnaryOperationExpression	"! strchr ( code , '=' )"		1554276	0					
ANR	1554282	UnaryOperator	!		1554276	0					
ANR	1554283	CallExpression	"strchr ( code , '=' )"		1554276	1					
ANR	1554284	Callee	strchr		1554276	0					
ANR	1554285	Identifier	strchr		1554276	0					
ANR	1554286	ArgumentList	code		1554276	1					
ANR	1554287	Argument	code		1554276	0					
ANR	1554288	Identifier	code		1554276	0					
ANR	1554289	Argument	'='		1554276	1					
ANR	1554290	PrimaryExpression	'='		1554276	0					
ANR	1554291	CompoundStatement		2:26:27:27	1554276	1					
ANR	1554292	ReturnStatement	return r_hex_no_code ( code ) ;	336:2:6730:6757	1554276	0	True				
ANR	1554293	CallExpression	r_hex_no_code ( code )		1554276	0					
ANR	1554294	Callee	r_hex_no_code		1554276	0					
ANR	1554295	Identifier	r_hex_no_code		1554276	0					
ANR	1554296	ArgumentList	code		1554276	1					
ANR	1554297	Argument	code		1554276	0					
ANR	1554298	Identifier	code		1554276	0					
ANR	1554299	IfStatement	"if ( strstr ( code , ""char"" ) || strstr ( code , ""int"" ) )"		1554276	1					
ANR	1554300	Condition	"strstr ( code , ""char"" ) || strstr ( code , ""int"" )"	339:5:6785:6829	1554276	0	True				
ANR	1554301	OrExpression	"strstr ( code , ""char"" ) || strstr ( code , ""int"" )"		1554276	0		||			
ANR	1554302	CallExpression	"strstr ( code , ""char"" )"		1554276	0					
ANR	1554303	Callee	strstr		1554276	0					
ANR	1554304	Identifier	strstr		1554276	0					
ANR	1554305	ArgumentList	code		1554276	1					
ANR	1554306	Argument	code		1554276	0					
ANR	1554307	Identifier	code		1554276	0					
ANR	1554308	Argument	"""char"""		1554276	1					
ANR	1554309	PrimaryExpression	"""char"""		1554276	0					
ANR	1554310	CallExpression	"strstr ( code , ""int"" )"		1554276	1					
ANR	1554311	Callee	strstr		1554276	0					
ANR	1554312	Identifier	strstr		1554276	0					
ANR	1554313	ArgumentList	code		1554276	1					
ANR	1554314	Argument	code		1554276	0					
ANR	1554315	Identifier	code		1554276	0					
ANR	1554316	Argument	"""int"""		1554276	1					
ANR	1554317	PrimaryExpression	"""int"""		1554276	0					
ANR	1554318	CompoundStatement		6:52:133:133	1554276	1					
ANR	1554319	ReturnStatement	return r_hex_from_c ( code ) ;	340:2:6836:6862	1554276	0	True				
ANR	1554320	CallExpression	r_hex_from_c ( code )		1554276	0					
ANR	1554321	Callee	r_hex_from_c		1554276	0					
ANR	1554322	Identifier	r_hex_from_c		1554276	0					
ANR	1554323	ArgumentList	code		1554276	1					
ANR	1554324	Argument	code		1554276	0					
ANR	1554325	Identifier	code		1554276	0					
ANR	1554326	IfStatement	"if ( strstr ( code , ""var"" ) )"		1554276	2					
ANR	1554327	Condition	"strstr ( code , ""var"" )"	343:5:6890:6909	1554276	0	True				
ANR	1554328	CallExpression	"strstr ( code , ""var"" )"		1554276	0					
ANR	1554329	Callee	strstr		1554276	0					
ANR	1554330	Identifier	strstr		1554276	0					
ANR	1554331	ArgumentList	code		1554276	1					
ANR	1554332	Argument	code		1554276	0					
ANR	1554333	Identifier	code		1554276	0					
ANR	1554334	Argument	"""var"""		1554276	1					
ANR	1554335	PrimaryExpression	"""var"""		1554276	0					
ANR	1554336	CompoundStatement		10:27:213:213	1554276	1					
ANR	1554337	ReturnStatement	return r_hex_from_js ( code ) ;	344:2:6916:6943	1554276	0	True				
ANR	1554338	CallExpression	r_hex_from_js ( code )		1554276	0					
ANR	1554339	Callee	r_hex_from_js		1554276	0					
ANR	1554340	Identifier	r_hex_from_js		1554276	0					
ANR	1554341	ArgumentList	code		1554276	1					
ANR	1554342	Argument	code		1554276	0					
ANR	1554343	Identifier	code		1554276	0					
ANR	1554344	ReturnStatement	return r_hex_from_py ( code ) ;	347:1:6970:6997	1554276	3	True				
ANR	1554345	CallExpression	r_hex_from_py ( code )		1554276	0					
ANR	1554346	Callee	r_hex_from_py		1554276	0					
ANR	1554347	Identifier	r_hex_from_py		1554276	0					
ANR	1554348	ArgumentList	code		1554276	1					
ANR	1554349	Argument	code		1554276	0					
ANR	1554350	Identifier	code		1554276	0					
ANR	1554351	ReturnType	R_API char *		1554276	1					
ANR	1554352	Identifier	r_hex_from_code		1554276	2					
ANR	1554353	ParameterList	const char * code		1554276	3					
ANR	1554354	Parameter	const char * code	334:28:6680:6695	1554276	0	True				
ANR	1554355	ParameterType	const char *		1554276	0					
ANR	1554356	Identifier	code		1554276	1					
ANR	1554357	CFGEntryNode	ENTRY		1554276		True				
ANR	1554358	CFGExitNode	EXIT		1554276		True				
ANR	1554359	Symbol	r_hex_no_code		1554276						
ANR	1554360	Symbol	code		1554276						
ANR	1554361	Symbol	r_hex_from_js		1554276						
ANR	1554362	Symbol	r_hex_from_py		1554276						
ANR	1554363	Symbol	strstr		1554276						
ANR	1554364	Symbol	strchr		1554276						
ANR	1554365	Symbol	r_hex_from_c		1554276						
ANR	1554366	Function	r_hex_pair2bin	352:0:7069:7454							
ANR	1554367	FunctionDef	r_hex_pair2bin (const char * arg)		1554366	0					
ANR	1554368	CompoundStatement		352:42:7111:7454	1554366	0					
ANR	1554369	IdentifierDeclStatement	"ut8 * ptr , c = 0 , d = 0 ;"	353:1:7114:7136	1554366	0	True				
ANR	1554370	IdentifierDecl	* ptr		1554366	0					
ANR	1554371	IdentifierDeclType	ut8 *		1554366	0					
ANR	1554372	Identifier	ptr		1554366	1					
ANR	1554373	IdentifierDecl	c = 0		1554366	1					
ANR	1554374	IdentifierDeclType	ut8		1554366	0					
ANR	1554375	Identifier	c		1554366	1					
ANR	1554376	AssignmentExpression	c = 0		1554366	2		=			
ANR	1554377	Identifier	c		1554366	0					
ANR	1554378	PrimaryExpression	0		1554366	1					
ANR	1554379	IdentifierDecl	d = 0		1554366	2					
ANR	1554380	IdentifierDeclType	ut8		1554366	0					
ANR	1554381	Identifier	d		1554366	1					
ANR	1554382	AssignmentExpression	d = 0		1554366	2		=			
ANR	1554383	Identifier	d		1554366	0					
ANR	1554384	PrimaryExpression	0		1554366	1					
ANR	1554385	IdentifierDeclStatement	ut32 j = 0 ;	354:1:7139:7149	1554366	1	True				
ANR	1554386	IdentifierDecl	j = 0		1554366	0					
ANR	1554387	IdentifierDeclType	ut32		1554366	0					
ANR	1554388	Identifier	j		1554366	1					
ANR	1554389	AssignmentExpression	j = 0		1554366	2		=			
ANR	1554390	Identifier	j		1554366	0					
ANR	1554391	PrimaryExpression	0		1554366	1					
ANR	1554392	ForStatement	for ( ptr = ( ut8 * ) arg ; ; ptr = ptr + 1 )		1554366	2					
ANR	1554393	ForInit	ptr = ( ut8 * ) arg ;	356:6:7158:7173	1554366	0	True				
ANR	1554394	AssignmentExpression	ptr = ( ut8 * ) arg		1554366	0		=			
ANR	1554395	Identifier	ptr		1554366	0					
ANR	1554396	CastExpression	( ut8 * ) arg		1554366	1					
ANR	1554397	CastTarget	ut8 *		1554366	0					
ANR	1554398	Identifier	arg		1554366	1					
ANR	1554399	AssignmentExpression	ptr = ptr + 1	356:24:7176:7188	1554366	1	True	=			
ANR	1554400	Identifier	ptr		1554366	0					
ANR	1554401	AdditiveExpression	ptr + 1		1554366	1		+			
ANR	1554402	Identifier	ptr		1554366	0					
ANR	1554403	PrimaryExpression	1		1554366	1					
ANR	1554404	CompoundStatement		5:39:79:79	1554366	2					
ANR	1554405	IfStatement	if ( ! * ptr || * ptr == ' ' || j == 2 )		1554366	0					
ANR	1554406	Condition	! * ptr || * ptr == ' ' || j == 2	357:6:7199:7224	1554366	0	True				
ANR	1554407	OrExpression	! * ptr || * ptr == ' ' || j == 2		1554366	0		||			
ANR	1554408	UnaryOperationExpression	! * ptr		1554366	0					
ANR	1554409	UnaryOperator	!		1554366	0					
ANR	1554410	UnaryOperationExpression	* ptr		1554366	1					
ANR	1554411	UnaryOperator	*		1554366	0					
ANR	1554412	Identifier	ptr		1554366	1					
ANR	1554413	OrExpression	* ptr == ' ' || j == 2		1554366	1		||			
ANR	1554414	EqualityExpression	* ptr == ' '		1554366	0		==			
ANR	1554415	UnaryOperationExpression	* ptr		1554366	0					
ANR	1554416	UnaryOperator	*		1554366	0					
ANR	1554417	Identifier	ptr		1554366	1					
ANR	1554418	PrimaryExpression	' '		1554366	1					
ANR	1554419	EqualityExpression	j == 2		1554366	1		==			
ANR	1554420	Identifier	j		1554366	0					
ANR	1554421	PrimaryExpression	2		1554366	1					
ANR	1554422	CompoundStatement		6:34:115:115	1554366	1					
ANR	1554423	BreakStatement	break ;	358:3:7232:7237	1554366	0	True				
ANR	1554424	ExpressionStatement	d = c	360:2:7245:7250	1554366	1	True				
ANR	1554425	AssignmentExpression	d = c		1554366	0		=			
ANR	1554426	Identifier	d		1554366	0					
ANR	1554427	Identifier	c		1554366	1					
ANR	1554428	IfStatement	"if ( * ptr != '.' && r_hex_to_byte ( & c , * ptr ) )"		1554366	2					
ANR	1554429	Condition	"* ptr != '.' && r_hex_to_byte ( & c , * ptr )"	361:6:7258:7296	1554366	0	True				
ANR	1554430	AndExpression	"* ptr != '.' && r_hex_to_byte ( & c , * ptr )"		1554366	0		&&			
ANR	1554431	EqualityExpression	* ptr != '.'		1554366	0		!=			
ANR	1554432	UnaryOperationExpression	* ptr		1554366	0					
ANR	1554433	UnaryOperator	*		1554366	0					
ANR	1554434	Identifier	ptr		1554366	1					
ANR	1554435	PrimaryExpression	'.'		1554366	1					
ANR	1554436	CallExpression	"r_hex_to_byte ( & c , * ptr )"		1554366	1					
ANR	1554437	Callee	r_hex_to_byte		1554366	0					
ANR	1554438	Identifier	r_hex_to_byte		1554366	0					
ANR	1554439	ArgumentList	& c		1554366	1					
ANR	1554440	Argument	& c		1554366	0					
ANR	1554441	UnaryOperationExpression	& c		1554366	0					
ANR	1554442	UnaryOperator	&		1554366	0					
ANR	1554443	Identifier	c		1554366	1					
ANR	1554444	Argument	* ptr		1554366	1					
ANR	1554445	UnaryOperationExpression	* ptr		1554366	0					
ANR	1554446	UnaryOperator	*		1554366	0					
ANR	1554447	Identifier	ptr		1554366	1					
ANR	1554448	CompoundStatement		10:47:187:187	1554366	1					
ANR	1554449	ExpressionStatement	"eprintf ( ""Invalid hexa string at char '%c' (%s).\\n"" , * ptr , arg )"	362:3:7304:7371	1554366	0	True				
ANR	1554450	CallExpression	"eprintf ( ""Invalid hexa string at char '%c' (%s).\\n"" , * ptr , arg )"		1554366	0					
ANR	1554451	Callee	eprintf		1554366	0					
ANR	1554452	Identifier	eprintf		1554366	0					
ANR	1554453	ArgumentList	"""Invalid hexa string at char '%c' (%s).\\n"""		1554366	1					
ANR	1554454	Argument	"""Invalid hexa string at char '%c' (%s).\\n"""		1554366	0					
ANR	1554455	PrimaryExpression	"""Invalid hexa string at char '%c' (%s).\\n"""		1554366	0					
ANR	1554456	Argument	* ptr		1554366	1					
ANR	1554457	UnaryOperationExpression	* ptr		1554366	0					
ANR	1554458	UnaryOperator	*		1554366	0					
ANR	1554459	Identifier	ptr		1554366	1					
ANR	1554460	Argument	arg		1554366	2					
ANR	1554461	Identifier	arg		1554366	0					
ANR	1554462	ReturnStatement	return - 1 ;	364:3:7376:7385	1554366	1	True				
ANR	1554463	UnaryOperationExpression	- 1		1554366	0					
ANR	1554464	UnaryOperator	-		1554366	0					
ANR	1554465	PrimaryExpression	1		1554366	1					
ANR	1554466	ExpressionStatement	c |= d	366:2:7393:7399	1554366	3	True				
ANR	1554467	AssignmentExpression	c |= d		1554366	0		|=			
ANR	1554468	Identifier	c		1554366	0					
ANR	1554469	Identifier	d		1554366	1					
ANR	1554470	IfStatement	if ( j ++ == 0 )		1554366	4					
ANR	1554471	Condition	j ++ == 0	367:6:7407:7414	1554366	0	True				
ANR	1554472	EqualityExpression	j ++ == 0		1554366	0		==			
ANR	1554473	PostIncDecOperationExpression	j ++		1554366	0					
ANR	1554474	Identifier	j		1554366	0					
ANR	1554475	IncDec	++		1554366	1					
ANR	1554476	PrimaryExpression	0		1554366	1					
ANR	1554477	CompoundStatement		16:16:305:305	1554366	1					
ANR	1554478	ExpressionStatement	c <<= 4	368:3:7422:7429	1554366	0	True				
ANR	1554479	AssignmentExpression	c <<= 4		1554366	0		<<=			
ANR	1554480	Identifier	c		1554366	0					
ANR	1554481	PrimaryExpression	4		1554366	1					
ANR	1554482	ReturnStatement	return ( int ) c ;	371:1:7439:7452	1554366	3	True				
ANR	1554483	CastExpression	( int ) c		1554366	0					
ANR	1554484	CastTarget	int		1554366	0					
ANR	1554485	Identifier	c		1554366	1					
ANR	1554486	ReturnType	R_API int		1554366	1					
ANR	1554487	Identifier	r_hex_pair2bin		1554366	2					
ANR	1554488	ParameterList	const char * arg		1554366	3					
ANR	1554489	Parameter	const char * arg	352:25:7094:7108	1554366	0	True				
ANR	1554490	ParameterType	const char *		1554366	0					
ANR	1554491	Identifier	arg		1554366	1					
ANR	1554492	CFGEntryNode	ENTRY		1554366		True				
ANR	1554493	CFGExitNode	EXIT		1554366		True				
ANR	1554494	InfiniteForNode	true		1554366		True				
ANR	1554495	Symbol	c		1554366						
ANR	1554496	Symbol	d		1554366						
ANR	1554497	Symbol	arg		1554366						
ANR	1554498	Symbol	* ptr		1554366						
ANR	1554499	Symbol	& c		1554366						
ANR	1554500	Symbol	j		1554366						
ANR	1554501	Symbol	r_hex_to_byte		1554366						
ANR	1554502	Symbol	ptr		1554366						
ANR	1554503	Function	r_hex_bin2str	374:0:7457:7730							
ANR	1554504	FunctionDef	"r_hex_bin2str (const ut8 * in , int len , char * out)"		1554503	0					
ANR	1554505	CompoundStatement		374:59:7516:7730	1554503	0					
ANR	1554506	IdentifierDeclStatement	"int i , idx ;"	375:1:7519:7529	1554503	0	True				
ANR	1554507	IdentifierDecl	i		1554503	0					
ANR	1554508	IdentifierDeclType	int		1554503	0					
ANR	1554509	Identifier	i		1554503	1					
ANR	1554510	IdentifierDecl	idx		1554503	1					
ANR	1554511	IdentifierDeclType	int		1554503	0					
ANR	1554512	Identifier	idx		1554503	1					
ANR	1554513	IdentifierDeclStatement	char tmp [ 8 ] ;	376:1:7532:7543	1554503	1	True				
ANR	1554514	IdentifierDecl	tmp [ 8 ]		1554503	0					
ANR	1554515	IdentifierDeclType	char [ 8 ]		1554503	0					
ANR	1554516	Identifier	tmp		1554503	1					
ANR	1554517	PrimaryExpression	8		1554503	2					
ANR	1554518	IfStatement	if ( len < 0 )		1554503	2					
ANR	1554519	Condition	len < 0	377:5:7550:7556	1554503	0	True				
ANR	1554520	RelationalExpression	len < 0		1554503	0		<			
ANR	1554521	Identifier	len		1554503	0					
ANR	1554522	PrimaryExpression	0		1554503	1					
ANR	1554523	CompoundStatement		4:14:42:42	1554503	1					
ANR	1554524	ReturnStatement	return 0 ;	378:2:7563:7571	1554503	0	True				
ANR	1554525	PrimaryExpression	0		1554503	0					
ANR	1554526	ForStatement	"for ( idx = i = 0 ; i < len ; i ++ , idx += 2 )"		1554503	3					
ANR	1554527	ForInit	idx = i = 0 ;	380:6:7582:7593	1554503	0	True				
ANR	1554528	AssignmentExpression	idx = i = 0		1554503	0		=			
ANR	1554529	Identifier	idx		1554503	0					
ANR	1554530	AssignmentExpression	i = 0		1554503	1		=			
ANR	1554531	Identifier	i		1554503	0					
ANR	1554532	PrimaryExpression	0		1554503	1					
ANR	1554533	Condition	i < len	380:19:7595:7601	1554503	1	True				
ANR	1554534	RelationalExpression	i < len		1554503	0		<			
ANR	1554535	Identifier	i		1554503	0					
ANR	1554536	Identifier	len		1554503	1					
ANR	1554537	Expression	"i ++ , idx += 2"	380:28:7604:7616	1554503	2	True				
ANR	1554538	PostIncDecOperationExpression	i ++		1554503	0					
ANR	1554539	Identifier	i		1554503	0					
ANR	1554540	IncDec	++		1554503	1					
ANR	1554541	AssignmentExpression	idx += 2		1554503	1		+=			
ANR	1554542	Identifier	idx		1554503	0					
ANR	1554543	PrimaryExpression	2		1554503	1					
ANR	1554544	CompoundStatement		7:44:103:103	1554503	3					
ANR	1554545	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"	381:2:7624:7667	1554503	0	True				
ANR	1554546	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"		1554503	0					
ANR	1554547	Callee	snprintf		1554503	0					
ANR	1554548	Identifier	snprintf		1554503	0					
ANR	1554549	ArgumentList	tmp		1554503	1					
ANR	1554550	Argument	tmp		1554503	0					
ANR	1554551	Identifier	tmp		1554503	0					
ANR	1554552	Argument	sizeof ( tmp )		1554503	1					
ANR	1554553	SizeofExpression	sizeof ( tmp )		1554503	0					
ANR	1554554	Sizeof	sizeof		1554503	0					
ANR	1554555	SizeofOperand	tmp		1554503	1					
ANR	1554556	Argument	"""%02x"""		1554503	2					
ANR	1554557	PrimaryExpression	"""%02x"""		1554503	0					
ANR	1554558	Argument	in [ i ]		1554503	3					
ANR	1554559	ArrayIndexing	in [ i ]		1554503	0					
ANR	1554560	Identifier	in		1554503	0					
ANR	1554561	Identifier	i		1554503	1					
ANR	1554562	ExpressionStatement	"memcpy ( out + idx , tmp , 2 )"	382:2:7671:7697	1554503	1	True				
ANR	1554563	CallExpression	"memcpy ( out + idx , tmp , 2 )"		1554503	0					
ANR	1554564	Callee	memcpy		1554503	0					
ANR	1554565	Identifier	memcpy		1554503	0					
ANR	1554566	ArgumentList	out + idx		1554503	1					
ANR	1554567	Argument	out + idx		1554503	0					
ANR	1554568	AdditiveExpression	out + idx		1554503	0		+			
ANR	1554569	Identifier	out		1554503	0					
ANR	1554570	Identifier	idx		1554503	1					
ANR	1554571	Argument	tmp		1554503	1					
ANR	1554572	Identifier	tmp		1554503	0					
ANR	1554573	Argument	2		1554503	2					
ANR	1554574	PrimaryExpression	2		1554503	0					
ANR	1554575	ExpressionStatement	out [ idx ] = 0	384:1:7703:7715	1554503	4	True				
ANR	1554576	AssignmentExpression	out [ idx ] = 0		1554503	0		=			
ANR	1554577	ArrayIndexing	out [ idx ]		1554503	0					
ANR	1554578	Identifier	out		1554503	0					
ANR	1554579	Identifier	idx		1554503	1					
ANR	1554580	PrimaryExpression	0		1554503	1					
ANR	1554581	ReturnStatement	return len ;	385:1:7718:7728	1554503	5	True				
ANR	1554582	Identifier	len		1554503	0					
ANR	1554583	ReturnType	R_API int		1554503	1					
ANR	1554584	Identifier	r_hex_bin2str		1554503	2					
ANR	1554585	ParameterList	"const ut8 * in , int len , char * out"		1554503	3					
ANR	1554586	Parameter	const ut8 * in	374:24:7481:7493	1554503	0	True				
ANR	1554587	ParameterType	const ut8 *		1554503	0					
ANR	1554588	Identifier	in		1554503	1					
ANR	1554589	Parameter	int len	374:39:7496:7502	1554503	1	True				
ANR	1554590	ParameterType	int		1554503	0					
ANR	1554591	Identifier	len		1554503	1					
ANR	1554592	Parameter	char * out	374:48:7505:7513	1554503	2	True				
ANR	1554593	ParameterType	char *		1554503	0					
ANR	1554594	Identifier	out		1554503	1					
ANR	1554595	CFGEntryNode	ENTRY		1554503		True				
ANR	1554596	CFGExitNode	EXIT		1554503		True				
ANR	1554597	Symbol	* i		1554503						
ANR	1554598	Symbol	len		1554503						
ANR	1554599	Symbol	in		1554503						
ANR	1554600	Symbol	tmp		1554503						
ANR	1554601	Symbol	* in		1554503						
ANR	1554602	Symbol	* out		1554503						
ANR	1554603	Symbol	* idx		1554503						
ANR	1554604	Symbol	i		1554503						
ANR	1554605	Symbol	idx		1554503						
ANR	1554606	Symbol	out		1554503						
ANR	1554607	Function	r_hex_bin2strdup	388:0:7733:8082							
ANR	1554608	FunctionDef	"r_hex_bin2strdup (const ut8 * in , int len)"		1554607	0					
ANR	1554609	CompoundStatement		388:53:7786:8082	1554607	0					
ANR	1554610	IdentifierDeclStatement	"int i , idx ;"	389:1:7789:7799	1554607	0	True				
ANR	1554611	IdentifierDecl	i		1554607	0					
ANR	1554612	IdentifierDeclType	int		1554607	0					
ANR	1554613	Identifier	i		1554607	1					
ANR	1554614	IdentifierDecl	idx		1554607	1					
ANR	1554615	IdentifierDeclType	int		1554607	0					
ANR	1554616	Identifier	idx		1554607	1					
ANR	1554617	IdentifierDeclStatement	"char tmp [ 5 ] , * out ;"	390:1:7802:7819	1554607	1	True				
ANR	1554618	IdentifierDecl	tmp [ 5 ]		1554607	0					
ANR	1554619	IdentifierDeclType	char [ 5 ]		1554607	0					
ANR	1554620	Identifier	tmp		1554607	1					
ANR	1554621	PrimaryExpression	5		1554607	2					
ANR	1554622	IdentifierDecl	* out		1554607	1					
ANR	1554623	IdentifierDeclType	char *		1554607	0					
ANR	1554624	Identifier	out		1554607	1					
ANR	1554625	IfStatement	if ( ( len + 1 ) * 2 < len )		1554607	2					
ANR	1554626	Condition	( len + 1 ) * 2 < len	392:5:7827:7845	1554607	0	True				
ANR	1554627	RelationalExpression	( len + 1 ) * 2 < len		1554607	0		<			
ANR	1554628	MultiplicativeExpression	( len + 1 ) * 2		1554607	0		*			
ANR	1554629	AdditiveExpression	len + 1		1554607	0		+			
ANR	1554630	Identifier	len		1554607	0					
ANR	1554631	PrimaryExpression	1		1554607	1					
ANR	1554632	PrimaryExpression	2		1554607	1					
ANR	1554633	Identifier	len		1554607	1					
ANR	1554634	CompoundStatement		5:26:61:61	1554607	1					
ANR	1554635	ReturnStatement	return NULL ;	393:2:7852:7863	1554607	0	True				
ANR	1554636	Identifier	NULL		1554607	0					
ANR	1554637	ExpressionStatement	out = malloc ( ( len + 1 ) * 2 )	395:1:7869:7897	1554607	3	True				
ANR	1554638	AssignmentExpression	out = malloc ( ( len + 1 ) * 2 )		1554607	0		=			
ANR	1554639	Identifier	out		1554607	0					
ANR	1554640	CallExpression	malloc ( ( len + 1 ) * 2 )		1554607	1					
ANR	1554641	Callee	malloc		1554607	0					
ANR	1554642	Identifier	malloc		1554607	0					
ANR	1554643	ArgumentList	( len + 1 ) * 2		1554607	1					
ANR	1554644	Argument	( len + 1 ) * 2		1554607	0					
ANR	1554645	MultiplicativeExpression	( len + 1 ) * 2		1554607	0		*			
ANR	1554646	AdditiveExpression	len + 1		1554607	0		+			
ANR	1554647	Identifier	len		1554607	0					
ANR	1554648	PrimaryExpression	1		1554607	1					
ANR	1554649	PrimaryExpression	2		1554607	1					
ANR	1554650	IfStatement	if ( ! out )		1554607	4					
ANR	1554651	Condition	! out	396:5:7904:7907	1554607	0	True				
ANR	1554652	UnaryOperationExpression	! out		1554607	0					
ANR	1554653	UnaryOperator	!		1554607	0					
ANR	1554654	Identifier	out		1554607	1					
ANR	1554655	CompoundStatement		9:11:123:123	1554607	1					
ANR	1554656	ReturnStatement	return NULL ;	397:2:7914:7925	1554607	0	True				
ANR	1554657	Identifier	NULL		1554607	0					
ANR	1554658	ForStatement	"for ( i = idx = 0 ; i < len ; i ++ , idx += 2 )"		1554607	5					
ANR	1554659	ForInit	i = idx = 0 ;	399:6:7936:7947	1554607	0	True				
ANR	1554660	AssignmentExpression	i = idx = 0		1554607	0		=			
ANR	1554661	Identifier	i		1554607	0					
ANR	1554662	AssignmentExpression	idx = 0		1554607	1		=			
ANR	1554663	Identifier	idx		1554607	0					
ANR	1554664	PrimaryExpression	0		1554607	1					
ANR	1554665	Condition	i < len	399:19:7949:7955	1554607	1	True				
ANR	1554666	RelationalExpression	i < len		1554607	0		<			
ANR	1554667	Identifier	i		1554607	0					
ANR	1554668	Identifier	len		1554607	1					
ANR	1554669	Expression	"i ++ , idx += 2"	399:28:7958:7970	1554607	2	True				
ANR	1554670	PostIncDecOperationExpression	i ++		1554607	0					
ANR	1554671	Identifier	i		1554607	0					
ANR	1554672	IncDec	++		1554607	1					
ANR	1554673	AssignmentExpression	idx += 2		1554607	1		+=			
ANR	1554674	Identifier	idx		1554607	0					
ANR	1554675	PrimaryExpression	2		1554607	1					
ANR	1554676	CompoundStatement		12:44:187:187	1554607	3					
ANR	1554677	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"	400:2:7978:8021	1554607	0	True				
ANR	1554678	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"		1554607	0					
ANR	1554679	Callee	snprintf		1554607	0					
ANR	1554680	Identifier	snprintf		1554607	0					
ANR	1554681	ArgumentList	tmp		1554607	1					
ANR	1554682	Argument	tmp		1554607	0					
ANR	1554683	Identifier	tmp		1554607	0					
ANR	1554684	Argument	sizeof ( tmp )		1554607	1					
ANR	1554685	SizeofExpression	sizeof ( tmp )		1554607	0					
ANR	1554686	Sizeof	sizeof		1554607	0					
ANR	1554687	SizeofOperand	tmp		1554607	1					
ANR	1554688	Argument	"""%02x"""		1554607	2					
ANR	1554689	PrimaryExpression	"""%02x"""		1554607	0					
ANR	1554690	Argument	in [ i ]		1554607	3					
ANR	1554691	ArrayIndexing	in [ i ]		1554607	0					
ANR	1554692	Identifier	in		1554607	0					
ANR	1554693	Identifier	i		1554607	1					
ANR	1554694	ExpressionStatement	"memcpy ( out + idx , tmp , 2 )"	401:2:8025:8049	1554607	1	True				
ANR	1554695	CallExpression	"memcpy ( out + idx , tmp , 2 )"		1554607	0					
ANR	1554696	Callee	memcpy		1554607	0					
ANR	1554697	Identifier	memcpy		1554607	0					
ANR	1554698	ArgumentList	out + idx		1554607	1					
ANR	1554699	Argument	out + idx		1554607	0					
ANR	1554700	AdditiveExpression	out + idx		1554607	0		+			
ANR	1554701	Identifier	out		1554607	0					
ANR	1554702	Identifier	idx		1554607	1					
ANR	1554703	Argument	tmp		1554607	1					
ANR	1554704	Identifier	tmp		1554607	0					
ANR	1554705	Argument	2		1554607	2					
ANR	1554706	PrimaryExpression	2		1554607	0					
ANR	1554707	ExpressionStatement	out [ idx ] = 0	403:1:8055:8067	1554607	6	True				
ANR	1554708	AssignmentExpression	out [ idx ] = 0		1554607	0		=			
ANR	1554709	ArrayIndexing	out [ idx ]		1554607	0					
ANR	1554710	Identifier	out		1554607	0					
ANR	1554711	Identifier	idx		1554607	1					
ANR	1554712	PrimaryExpression	0		1554607	1					
ANR	1554713	ReturnStatement	return out ;	404:1:8070:8080	1554607	7	True				
ANR	1554714	Identifier	out		1554607	0					
ANR	1554715	ReturnType	R_API char *		1554607	1					
ANR	1554716	Identifier	r_hex_bin2strdup		1554607	2					
ANR	1554717	ParameterList	"const ut8 * in , int len"		1554607	3					
ANR	1554718	Parameter	const ut8 * in	388:29:7762:7774	1554607	0	True				
ANR	1554719	ParameterType	const ut8 *		1554607	0					
ANR	1554720	Identifier	in		1554607	1					
ANR	1554721	Parameter	int len	388:44:7777:7783	1554607	1	True				
ANR	1554722	ParameterType	int		1554607	0					
ANR	1554723	Identifier	len		1554607	1					
ANR	1554724	CFGEntryNode	ENTRY		1554607		True				
ANR	1554725	CFGExitNode	EXIT		1554607		True				
ANR	1554726	Symbol	malloc		1554607						
ANR	1554727	Symbol	NULL		1554607						
ANR	1554728	Symbol	* i		1554607						
ANR	1554729	Symbol	len		1554607						
ANR	1554730	Symbol	in		1554607						
ANR	1554731	Symbol	tmp		1554607						
ANR	1554732	Symbol	* in		1554607						
ANR	1554733	Symbol	* out		1554607						
ANR	1554734	Symbol	* idx		1554607						
ANR	1554735	Symbol	i		1554607						
ANR	1554736	Symbol	idx		1554607						
ANR	1554737	Symbol	out		1554607						
ANR	1554738	Function	r_hex_str2bin	407:0:8085:8929							
ANR	1554739	FunctionDef	"r_hex_str2bin (const char * in , ut8 * out)"		1554738	0					
ANR	1554740	CompoundStatement		407:50:8135:8929	1554738	0					
ANR	1554741	IdentifierDeclStatement	long nibbles = 0 ;	408:1:8138:8154	1554738	0	True				
ANR	1554742	IdentifierDecl	nibbles = 0		1554738	0					
ANR	1554743	IdentifierDeclType	long		1554738	0					
ANR	1554744	Identifier	nibbles		1554738	1					
ANR	1554745	AssignmentExpression	nibbles = 0		1554738	2		=			
ANR	1554746	Identifier	nibbles		1554738	0					
ANR	1554747	PrimaryExpression	0		1554738	1					
ANR	1554748	WhileStatement	while ( in && * in )		1554738	1					
ANR	1554749	Condition	in && * in	410:8:8165:8173	1554738	0	True				
ANR	1554750	AndExpression	in && * in		1554738	0		&&			
ANR	1554751	Identifier	in		1554738	0					
ANR	1554752	UnaryOperationExpression	* in		1554738	1					
ANR	1554753	UnaryOperator	*		1554738	0					
ANR	1554754	Identifier	in		1554738	1					
ANR	1554755	CompoundStatement		5:2:44:51	1554738	1					
ANR	1554756	IdentifierDeclStatement	ut8 tmp ;	411:2:8180:8187	1554738	0	True				
ANR	1554757	IdentifierDecl	tmp		1554738	0					
ANR	1554758	IdentifierDeclType	ut8		1554738	0					
ANR	1554759	Identifier	tmp		1554738	1					
ANR	1554760	IfStatement	if ( * in == '0' && in [ 1 ] == 'x' )		1554738	1					
ANR	1554761	Condition	* in == '0' && in [ 1 ] == 'x'	413:6:8219:8244	1554738	0	True				
ANR	1554762	AndExpression	* in == '0' && in [ 1 ] == 'x'		1554738	0		&&			
ANR	1554763	EqualityExpression	* in == '0'		1554738	0		==			
ANR	1554764	UnaryOperationExpression	* in		1554738	0					
ANR	1554765	UnaryOperator	*		1554738	0					
ANR	1554766	Identifier	in		1554738	1					
ANR	1554767	PrimaryExpression	'0'		1554738	1					
ANR	1554768	EqualityExpression	in [ 1 ] == 'x'		1554738	1		==			
ANR	1554769	ArrayIndexing	in [ 1 ]		1554738	0					
ANR	1554770	Identifier	in		1554738	0					
ANR	1554771	PrimaryExpression	1		1554738	1					
ANR	1554772	PrimaryExpression	'x'		1554738	1					
ANR	1554773	CompoundStatement		7:34:111:111	1554738	1					
ANR	1554774	ExpressionStatement	in += 2	414:3:8252:8259	1554738	0	True				
ANR	1554775	AssignmentExpression	in += 2		1554738	0		+=			
ANR	1554776	Identifier	in		1554738	0					
ANR	1554777	PrimaryExpression	2		1554738	1					
ANR	1554778	WhileStatement	"while ( ! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in ) )"		1554738	2					
ANR	1554779	Condition	"! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"	417:9:8298:8347	1554738	0	True				
ANR	1554780	UnaryOperationExpression	"! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"		1554738	0					
ANR	1554781	UnaryOperator	!		1554738	0					
ANR	1554782	CallExpression	"r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"		1554738	1					
ANR	1554783	Callee	r_hex_to_byte		1554738	0					
ANR	1554784	Identifier	r_hex_to_byte		1554738	0					
ANR	1554785	ArgumentList	out ? & out [ nibbles / 2 ] : & tmp		1554738	1					
ANR	1554786	Argument	out ? & out [ nibbles / 2 ] : & tmp		1554738	0					
ANR	1554787	ConditionalExpression	out ? & out [ nibbles / 2 ] : & tmp		1554738	0					
ANR	1554788	Condition	out		1554738	0					
ANR	1554789	Identifier	out		1554738	0					
ANR	1554790	UnaryOperationExpression	& out [ nibbles / 2 ]		1554738	1					
ANR	1554791	UnaryOperator	&		1554738	0					
ANR	1554792	ArrayIndexing	out [ nibbles / 2 ]		1554738	1					
ANR	1554793	Identifier	out		1554738	0					
ANR	1554794	MultiplicativeExpression	nibbles / 2		1554738	1		/			
ANR	1554795	Identifier	nibbles		1554738	0					
ANR	1554796	PrimaryExpression	2		1554738	1					
ANR	1554797	UnaryOperationExpression	& tmp		1554738	2					
ANR	1554798	UnaryOperator	&		1554738	0					
ANR	1554799	Identifier	tmp		1554738	1					
ANR	1554800	Argument	* in		1554738	1					
ANR	1554801	UnaryOperationExpression	* in		1554738	0					
ANR	1554802	UnaryOperator	*		1554738	0					
ANR	1554803	Identifier	in		1554738	1					
ANR	1554804	CompoundStatement		11:61:214:214	1554738	1					
ANR	1554805	ExpressionStatement	nibbles ++	418:3:8355:8364	1554738	0	True				
ANR	1554806	PostIncDecOperationExpression	nibbles ++		1554738	0					
ANR	1554807	Identifier	nibbles		1554738	0					
ANR	1554808	IncDec	++		1554738	1					
ANR	1554809	ExpressionStatement	in ++	419:3:8369:8373	1554738	1	True				
ANR	1554810	PostIncDecOperationExpression	in ++		1554738	0					
ANR	1554811	Identifier	in		1554738	0					
ANR	1554812	IncDec	++		1554738	1					
ANR	1554813	IfStatement	if ( * in == '\\0' )		1554738	3					
ANR	1554814	Condition	* in == '\\0'	421:6:8385:8395	1554738	0	True				
ANR	1554815	EqualityExpression	* in == '\\0'		1554738	0		==			
ANR	1554816	UnaryOperationExpression	* in		1554738	0					
ANR	1554817	UnaryOperator	*		1554738	0					
ANR	1554818	Identifier	in		1554738	1					
ANR	1554819	PrimaryExpression	'\\0'		1554738	1					
ANR	1554820	CompoundStatement		15:19:262:262	1554738	1					
ANR	1554821	BreakStatement	break ;	422:3:8403:8408	1554738	0	True				
ANR	1554822	IfStatement	if ( * in == '#' || ( * in == '/' && in [ 1 ] == '/' ) )		1554738	4					
ANR	1554823	Condition	* in == '#' || ( * in == '/' && in [ 1 ] == '/' )	425:6:8437:8478	1554738	0	True				
ANR	1554824	OrExpression	* in == '#' || ( * in == '/' && in [ 1 ] == '/' )		1554738	0		||			
ANR	1554825	EqualityExpression	* in == '#'		1554738	0		==			
ANR	1554826	UnaryOperationExpression	* in		1554738	0					
ANR	1554827	UnaryOperator	*		1554738	0					
ANR	1554828	Identifier	in		1554738	1					
ANR	1554829	PrimaryExpression	'#'		1554738	1					
ANR	1554830	AndExpression	* in == '/' && in [ 1 ] == '/'		1554738	1		&&			
ANR	1554831	EqualityExpression	* in == '/'		1554738	0		==			
ANR	1554832	UnaryOperationExpression	* in		1554738	0					
ANR	1554833	UnaryOperator	*		1554738	0					
ANR	1554834	Identifier	in		1554738	1					
ANR	1554835	PrimaryExpression	'/'		1554738	1					
ANR	1554836	EqualityExpression	in [ 1 ] == '/'		1554738	1		==			
ANR	1554837	ArrayIndexing	in [ 1 ]		1554738	0					
ANR	1554838	Identifier	in		1554738	0					
ANR	1554839	PrimaryExpression	1		1554738	1					
ANR	1554840	PrimaryExpression	'/'		1554738	1					
ANR	1554841	CompoundStatement		19:50:345:345	1554738	1					
ANR	1554842	IfStatement	"if ( ( in = strchr ( in , '\\n' ) ) )"		1554738	0					
ANR	1554843	Condition	"in = strchr ( in , '\\n' )"	426:7:8490:8513	1554738	0	True				
ANR	1554844	AssignmentExpression	"in = strchr ( in , '\\n' )"		1554738	0		=			
ANR	1554845	Identifier	in		1554738	0					
ANR	1554846	CallExpression	"strchr ( in , '\\n' )"		1554738	1					
ANR	1554847	Callee	strchr		1554738	0					
ANR	1554848	Identifier	strchr		1554738	0					
ANR	1554849	ArgumentList	in		1554738	1					
ANR	1554850	Argument	in		1554738	0					
ANR	1554851	Identifier	in		1554738	0					
ANR	1554852	Argument	'\\n'		1554738	1					
ANR	1554853	PrimaryExpression	'\\n'		1554738	0					
ANR	1554854	CompoundStatement		20:33:380:380	1554738	1					
ANR	1554855	ExpressionStatement	in ++	427:4:8522:8526	1554738	0	True				
ANR	1554856	PostIncDecOperationExpression	in ++		1554738	0					
ANR	1554857	Identifier	in		1554738	0					
ANR	1554858	IncDec	++		1554738	1					
ANR	1554859	ContinueStatement	continue ;	429:3:8536:8544	1554738	1	True				
ANR	1554860	ElseStatement	else		1554738	0					
ANR	1554861	IfStatement	if ( * in == '/' && in [ 1 ] == '*' )		1554738	0					
ANR	1554862	Condition	* in == '/' && in [ 1 ] == '*'	430:13:8559:8584	1554738	0	True				
ANR	1554863	AndExpression	* in == '/' && in [ 1 ] == '*'		1554738	0		&&			
ANR	1554864	EqualityExpression	* in == '/'		1554738	0		==			
ANR	1554865	UnaryOperationExpression	* in		1554738	0					
ANR	1554866	UnaryOperator	*		1554738	0					
ANR	1554867	Identifier	in		1554738	1					
ANR	1554868	PrimaryExpression	'/'		1554738	1					
ANR	1554869	EqualityExpression	in [ 1 ] == '*'		1554738	1		==			
ANR	1554870	ArrayIndexing	in [ 1 ]		1554738	0					
ANR	1554871	Identifier	in		1554738	0					
ANR	1554872	PrimaryExpression	1		1554738	1					
ANR	1554873	PrimaryExpression	'*'		1554738	1					
ANR	1554874	CompoundStatement		24:41:451:451	1554738	1					
ANR	1554875	IfStatement	"if ( ( in = strstr ( in , ""*/"" ) ) )"		1554738	0					
ANR	1554876	Condition	"in = strstr ( in , ""*/"" )"	431:7:8596:8619	1554738	0	True				
ANR	1554877	AssignmentExpression	"in = strstr ( in , ""*/"" )"		1554738	0		=			
ANR	1554878	Identifier	in		1554738	0					
ANR	1554879	CallExpression	"strstr ( in , ""*/"" )"		1554738	1					
ANR	1554880	Callee	strstr		1554738	0					
ANR	1554881	Identifier	strstr		1554738	0					
ANR	1554882	ArgumentList	in		1554738	1					
ANR	1554883	Argument	in		1554738	0					
ANR	1554884	Identifier	in		1554738	0					
ANR	1554885	Argument	"""*/"""		1554738	1					
ANR	1554886	PrimaryExpression	"""*/"""		1554738	0					
ANR	1554887	CompoundStatement		25:33:486:486	1554738	1					
ANR	1554888	ExpressionStatement	in += 2	432:4:8628:8635	1554738	0	True				
ANR	1554889	AssignmentExpression	in += 2		1554738	0		+=			
ANR	1554890	Identifier	in		1554738	0					
ANR	1554891	PrimaryExpression	2		1554738	1					
ANR	1554892	ContinueStatement	continue ;	434:3:8645:8653	1554738	1	True				
ANR	1554893	ElseStatement	else		1554738	0					
ANR	1554894	IfStatement	if ( ! IS_WHITESPACE ( * in ) && * in != '\\n' )		1554738	0					
ANR	1554895	Condition	! IS_WHITESPACE ( * in ) && * in != '\\n'	435:13:8668:8702	1554738	0	True				
ANR	1554896	AndExpression	! IS_WHITESPACE ( * in ) && * in != '\\n'		1554738	0		&&			
ANR	1554897	UnaryOperationExpression	! IS_WHITESPACE ( * in )		1554738	0					
ANR	1554898	UnaryOperator	!		1554738	0					
ANR	1554899	CallExpression	IS_WHITESPACE ( * in )		1554738	1					
ANR	1554900	Callee	IS_WHITESPACE		1554738	0					
ANR	1554901	Identifier	IS_WHITESPACE		1554738	0					
ANR	1554902	ArgumentList	* in		1554738	1					
ANR	1554903	Argument	* in		1554738	0					
ANR	1554904	UnaryOperationExpression	* in		1554738	0					
ANR	1554905	UnaryOperator	*		1554738	0					
ANR	1554906	Identifier	in		1554738	1					
ANR	1554907	EqualityExpression	* in != '\\n'		1554738	1		!=			
ANR	1554908	UnaryOperationExpression	* in		1554738	0					
ANR	1554909	UnaryOperator	*		1554738	0					
ANR	1554910	Identifier	in		1554738	1					
ANR	1554911	PrimaryExpression	'\\n'		1554738	1					
ANR	1554912	CompoundStatement		29:50:569:569	1554738	1					
ANR	1554913	ReturnStatement	return 0 ;	437:3:8746:8754	1554738	0	True				
ANR	1554914	PrimaryExpression	0		1554738	0					
ANR	1554915	ExpressionStatement	in ++	440:2:8787:8791	1554738	5	True				
ANR	1554916	PostIncDecOperationExpression	in ++		1554738	0					
ANR	1554917	Identifier	in		1554738	0					
ANR	1554918	IncDec	++		1554738	1					
ANR	1554919	IfStatement	if ( nibbles % 2 )		1554738	2					
ANR	1554920	Condition	nibbles % 2	443:5:8802:8812	1554738	0	True				
ANR	1554921	MultiplicativeExpression	nibbles % 2		1554738	0		%			
ANR	1554922	Identifier	nibbles		1554738	0					
ANR	1554923	PrimaryExpression	2		1554738	1					
ANR	1554924	CompoundStatement		37:18:679:679	1554738	1					
ANR	1554925	IfStatement	if ( out )		1554738	0					
ANR	1554926	Condition	out	444:6:8823:8825	1554738	0	True				
ANR	1554927	Identifier	out		1554738	0					
ANR	1554928	CompoundStatement		38:11:692:692	1554738	1					
ANR	1554929	ExpressionStatement	"r_hex_to_byte ( & out [ nibbles / 2 ] , '0' )"	445:3:8833:8871	1554738	0	True				
ANR	1554930	CallExpression	"r_hex_to_byte ( & out [ nibbles / 2 ] , '0' )"		1554738	0					
ANR	1554931	Callee	r_hex_to_byte		1554738	0					
ANR	1554932	Identifier	r_hex_to_byte		1554738	0					
ANR	1554933	ArgumentList	& out [ nibbles / 2 ]		1554738	1					
ANR	1554934	Argument	& out [ nibbles / 2 ]		1554738	0					
ANR	1554935	UnaryOperationExpression	& out [ nibbles / 2 ]		1554738	0					
ANR	1554936	UnaryOperator	&		1554738	0					
ANR	1554937	ArrayIndexing	out [ nibbles / 2 ]		1554738	1					
ANR	1554938	Identifier	out		1554738	0					
ANR	1554939	MultiplicativeExpression	nibbles / 2		1554738	1		/			
ANR	1554940	Identifier	nibbles		1554738	0					
ANR	1554941	PrimaryExpression	2		1554738	1					
ANR	1554942	Argument	'0'		1554738	1					
ANR	1554943	PrimaryExpression	'0'		1554738	0					
ANR	1554944	ReturnStatement	return - ( nibbles + 1 ) / 2 ;	447:2:8879:8902	1554738	1	True				
ANR	1554945	MultiplicativeExpression	- ( nibbles + 1 ) / 2		1554738	0		/			
ANR	1554946	UnaryOperationExpression	- ( nibbles + 1 )		1554738	0					
ANR	1554947	UnaryOperator	-		1554738	0					
ANR	1554948	AdditiveExpression	nibbles + 1		1554738	1		+			
ANR	1554949	Identifier	nibbles		1554738	0					
ANR	1554950	PrimaryExpression	1		1554738	1					
ANR	1554951	PrimaryExpression	2		1554738	1					
ANR	1554952	ReturnStatement	return nibbles / 2 ;	450:1:8909:8927	1554738	3	True				
ANR	1554953	MultiplicativeExpression	nibbles / 2		1554738	0		/			
ANR	1554954	Identifier	nibbles		1554738	0					
ANR	1554955	PrimaryExpression	2		1554738	1					
ANR	1554956	ReturnType	R_API int		1554738	1					
ANR	1554957	Identifier	r_hex_str2bin		1554738	2					
ANR	1554958	ParameterList	"const char * in , ut8 * out"		1554738	3					
ANR	1554959	Parameter	const char * in	407:24:8109:8122	1554738	0	True				
ANR	1554960	ParameterType	const char *		1554738	0					
ANR	1554961	Identifier	in		1554738	1					
ANR	1554962	Parameter	ut8 * out	407:40:8125:8132	1554738	1	True				
ANR	1554963	ParameterType	ut8 *		1554738	0					
ANR	1554964	Identifier	out		1554738	1					
ANR	1554965	CFGEntryNode	ENTRY		1554738		True				
ANR	1554966	CFGExitNode	EXIT		1554738		True				
ANR	1554967	Symbol	nibbles		1554738						
ANR	1554968	Symbol	in		1554738						
ANR	1554969	Symbol	strstr		1554738						
ANR	1554970	Symbol	tmp		1554738						
ANR	1554971	Symbol	* in		1554738						
ANR	1554972	Symbol	strchr		1554738						
ANR	1554973	Symbol	& tmp		1554738						
ANR	1554974	Symbol	r_hex_to_byte		1554738						
ANR	1554975	Symbol	IS_WHITESPACE		1554738						
ANR	1554976	Symbol	out		1554738						
ANR	1554977	Function	r_hex_str2binmask	453:0:8932:9576							
ANR	1554978	FunctionDef	"r_hex_str2binmask (const char * in , ut8 * out , ut8 * mask)"		1554977	0					
ANR	1554979	CompoundStatement		453:65:8997:9576	1554977	0					
ANR	1554980	IdentifierDeclStatement	ut8 * ptr ;	454:1:9000:9008	1554977	0	True				
ANR	1554981	IdentifierDecl	* ptr		1554977	0					
ANR	1554982	IdentifierDeclType	ut8 *		1554977	0					
ANR	1554983	Identifier	ptr		1554977	1					
ANR	1554984	IdentifierDeclStatement	"int len , ilen = strlen ( in ) + 1 ;"	455:1:9011:9040	1554977	1	True				
ANR	1554985	IdentifierDecl	len		1554977	0					
ANR	1554986	IdentifierDeclType	int		1554977	0					
ANR	1554987	Identifier	len		1554977	1					
ANR	1554988	IdentifierDecl	ilen = strlen ( in ) + 1		1554977	1					
ANR	1554989	IdentifierDeclType	int		1554977	0					
ANR	1554990	Identifier	ilen		1554977	1					
ANR	1554991	AssignmentExpression	ilen = strlen ( in ) + 1		1554977	2		=			
ANR	1554992	Identifier	ilen		1554977	0					
ANR	1554993	AdditiveExpression	strlen ( in ) + 1		1554977	1		+			
ANR	1554994	CallExpression	strlen ( in )		1554977	0					
ANR	1554995	Callee	strlen		1554977	0					
ANR	1554996	Identifier	strlen		1554977	0					
ANR	1554997	ArgumentList	in		1554977	1					
ANR	1554998	Argument	in		1554977	0					
ANR	1554999	Identifier	in		1554977	0					
ANR	1555000	PrimaryExpression	1		1554977	1					
ANR	1555001	IdentifierDeclStatement	int has_nibble = 0 ;	456:1:9043:9061	1554977	2	True				
ANR	1555002	IdentifierDecl	has_nibble = 0		1554977	0					
ANR	1555003	IdentifierDeclType	int		1554977	0					
ANR	1555004	Identifier	has_nibble		1554977	1					
ANR	1555005	AssignmentExpression	has_nibble = 0		1554977	2		=			
ANR	1555006	Identifier	has_nibble		1554977	0					
ANR	1555007	PrimaryExpression	0		1554977	1					
ANR	1555008	ExpressionStatement	"memcpy ( out , in , ilen )"	457:1:9064:9086	1554977	3	True				
ANR	1555009	CallExpression	"memcpy ( out , in , ilen )"		1554977	0					
ANR	1555010	Callee	memcpy		1554977	0					
ANR	1555011	Identifier	memcpy		1554977	0					
ANR	1555012	ArgumentList	out		1554977	1					
ANR	1555013	Argument	out		1554977	0					
ANR	1555014	Identifier	out		1554977	0					
ANR	1555015	Argument	in		1554977	1					
ANR	1555016	Identifier	in		1554977	0					
ANR	1555017	Argument	ilen		1554977	2					
ANR	1555018	Identifier	ilen		1554977	0					
ANR	1555019	ForStatement	for ( ptr = out ; * ptr ; ptr ++ )		1554977	4					
ANR	1555020	ForInit	ptr = out ;	458:6:9094:9103	1554977	0	True				
ANR	1555021	AssignmentExpression	ptr = out		1554977	0		=			
ANR	1555022	Identifier	ptr		1554977	0					
ANR	1555023	Identifier	out		1554977	1					
ANR	1555024	Condition	* ptr	458:17:9105:9108	1554977	1	True				
ANR	1555025	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555026	UnaryOperator	*		1554977	0					
ANR	1555027	Identifier	ptr		1554977	1					
ANR	1555028	PostIncDecOperationExpression	ptr ++	458:23:9111:9115	1554977	2	True				
ANR	1555029	Identifier	ptr		1554977	0					
ANR	1555030	IncDec	++		1554977	1					
ANR	1555031	CompoundStatement		6:30:120:120	1554977	3					
ANR	1555032	IfStatement	if ( * ptr == '.' )		1554977	0					
ANR	1555033	Condition	* ptr == '.'	459:6:9126:9136	1554977	0	True				
ANR	1555034	EqualityExpression	* ptr == '.'		1554977	0		==			
ANR	1555035	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555036	UnaryOperator	*		1554977	0					
ANR	1555037	Identifier	ptr		1554977	1					
ANR	1555038	PrimaryExpression	'.'		1554977	1					
ANR	1555039	CompoundStatement		7:19:141:141	1554977	1					
ANR	1555040	ExpressionStatement	* ptr = '0'	460:3:9144:9154	1554977	0	True				
ANR	1555041	AssignmentExpression	* ptr = '0'		1554977	0		=			
ANR	1555042	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555043	UnaryOperator	*		1554977	0					
ANR	1555044	Identifier	ptr		1554977	1					
ANR	1555045	PrimaryExpression	'0'		1554977	1					
ANR	1555046	ExpressionStatement	"len = r_hex_str2bin ( ( char * ) out , out )"	463:1:9164:9201	1554977	5	True				
ANR	1555047	AssignmentExpression	"len = r_hex_str2bin ( ( char * ) out , out )"		1554977	0		=			
ANR	1555048	Identifier	len		1554977	0					
ANR	1555049	CallExpression	"r_hex_str2bin ( ( char * ) out , out )"		1554977	1					
ANR	1555050	Callee	r_hex_str2bin		1554977	0					
ANR	1555051	Identifier	r_hex_str2bin		1554977	0					
ANR	1555052	ArgumentList	( char * ) out		1554977	1					
ANR	1555053	Argument	( char * ) out		1554977	0					
ANR	1555054	CastExpression	( char * ) out		1554977	0					
ANR	1555055	CastTarget	char *		1554977	0					
ANR	1555056	Identifier	out		1554977	1					
ANR	1555057	Argument	out		1554977	1					
ANR	1555058	Identifier	out		1554977	0					
ANR	1555059	IfStatement	if ( len < 0 )		1554977	6					
ANR	1555060	Condition	len < 0	464:5:9208:9212	1554977	0	True				
ANR	1555061	RelationalExpression	len < 0		1554977	0		<			
ANR	1555062	Identifier	len		1554977	0					
ANR	1555063	PrimaryExpression	0		1554977	1					
ANR	1555064	CompoundStatement		12:12:217:217	1554977	1					
ANR	1555065	ExpressionStatement	has_nibble = 1	464:14:9217:9231	1554977	0	True				
ANR	1555066	AssignmentExpression	has_nibble = 1		1554977	0		=			
ANR	1555067	Identifier	has_nibble		1554977	0					
ANR	1555068	PrimaryExpression	1		1554977	1					
ANR	1555069	ExpressionStatement	len = - ( len + 1 )	464:30:9233:9247	1554977	1	True				
ANR	1555070	AssignmentExpression	len = - ( len + 1 )		1554977	0		=			
ANR	1555071	Identifier	len		1554977	0					
ANR	1555072	UnaryOperationExpression	- ( len + 1 )		1554977	1					
ANR	1555073	UnaryOperator	-		1554977	0					
ANR	1555074	AdditiveExpression	len + 1		1554977	1		+			
ANR	1555075	Identifier	len		1554977	0					
ANR	1555076	PrimaryExpression	1		1554977	1					
ANR	1555077	IfStatement	if ( len != - 1 )		1554977	7					
ANR	1555078	Condition	len != - 1	465:5:9256:9264	1554977	0	True				
ANR	1555079	EqualityExpression	len != - 1		1554977	0		!=			
ANR	1555080	Identifier	len		1554977	0					
ANR	1555081	UnaryOperationExpression	- 1		1554977	1					
ANR	1555082	UnaryOperator	-		1554977	0					
ANR	1555083	PrimaryExpression	1		1554977	1					
ANR	1555084	CompoundStatement		13:16:269:269	1554977	1					
ANR	1555085	ExpressionStatement	"memcpy ( mask , in , ilen )"	466:2:9271:9294	1554977	0	True				
ANR	1555086	CallExpression	"memcpy ( mask , in , ilen )"		1554977	0					
ANR	1555087	Callee	memcpy		1554977	0					
ANR	1555088	Identifier	memcpy		1554977	0					
ANR	1555089	ArgumentList	mask		1554977	1					
ANR	1555090	Argument	mask		1554977	0					
ANR	1555091	Identifier	mask		1554977	0					
ANR	1555092	Argument	in		1554977	1					
ANR	1555093	Identifier	in		1554977	0					
ANR	1555094	Argument	ilen		1554977	2					
ANR	1555095	Identifier	ilen		1554977	0					
ANR	1555096	IfStatement	if ( has_nibble )		1554977	1					
ANR	1555097	Condition	has_nibble	467:6:9302:9311	1554977	0	True				
ANR	1555098	Identifier	has_nibble		1554977	0					
ANR	1555099	CompoundStatement		15:18:316:316	1554977	1					
ANR	1555100	ExpressionStatement	"memcpy ( mask + ilen , ""f0"" , 3 )"	468:3:9319:9348	1554977	0	True				
ANR	1555101	CallExpression	"memcpy ( mask + ilen , ""f0"" , 3 )"		1554977	0					
ANR	1555102	Callee	memcpy		1554977	0					
ANR	1555103	Identifier	memcpy		1554977	0					
ANR	1555104	ArgumentList	mask + ilen		1554977	1					
ANR	1555105	Argument	mask + ilen		1554977	0					
ANR	1555106	AdditiveExpression	mask + ilen		1554977	0		+			
ANR	1555107	Identifier	mask		1554977	0					
ANR	1555108	Identifier	ilen		1554977	1					
ANR	1555109	Argument	"""f0"""		1554977	1					
ANR	1555110	PrimaryExpression	"""f0"""		1554977	0					
ANR	1555111	Argument	3		1554977	2					
ANR	1555112	PrimaryExpression	3		1554977	0					
ANR	1555113	ForStatement	for ( ptr = mask ; * ptr ; ptr ++ )		1554977	2					
ANR	1555114	ForInit	ptr = mask ;	470:7:9361:9371	1554977	0	True				
ANR	1555115	AssignmentExpression	ptr = mask		1554977	0		=			
ANR	1555116	Identifier	ptr		1554977	0					
ANR	1555117	Identifier	mask		1554977	1					
ANR	1555118	Condition	* ptr	470:19:9373:9376	1554977	1	True				
ANR	1555119	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555120	UnaryOperator	*		1554977	0					
ANR	1555121	Identifier	ptr		1554977	1					
ANR	1555122	PostIncDecOperationExpression	ptr ++	470:25:9379:9383	1554977	2	True				
ANR	1555123	Identifier	ptr		1554977	0					
ANR	1555124	IncDec	++		1554977	1					
ANR	1555125	CompoundStatement		18:32:388:388	1554977	3					
ANR	1555126	IfStatement	if ( IS_HEXCHAR ( * ptr ) )		1554977	0					
ANR	1555127	Condition	IS_HEXCHAR ( * ptr )	471:7:9395:9411	1554977	0	True				
ANR	1555128	CallExpression	IS_HEXCHAR ( * ptr )		1554977	0					
ANR	1555129	Callee	IS_HEXCHAR		1554977	0					
ANR	1555130	Identifier	IS_HEXCHAR		1554977	0					
ANR	1555131	ArgumentList	* ptr		1554977	1					
ANR	1555132	Argument	* ptr		1554977	0					
ANR	1555133	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555134	UnaryOperator	*		1554977	0					
ANR	1555135	Identifier	ptr		1554977	1					
ANR	1555136	CompoundStatement		19:26:416:416	1554977	1					
ANR	1555137	ExpressionStatement	* ptr = 'f'	472:4:9420:9430	1554977	0	True				
ANR	1555138	AssignmentExpression	* ptr = 'f'		1554977	0		=			
ANR	1555139	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555140	UnaryOperator	*		1554977	0					
ANR	1555141	Identifier	ptr		1554977	1					
ANR	1555142	PrimaryExpression	'f'		1554977	1					
ANR	1555143	ElseStatement	else		1554977	0					
ANR	1555144	IfStatement	if ( * ptr == '.' )		1554977	0					
ANR	1555145	Condition	* ptr == '.'	473:14:9446:9456	1554977	0	True				
ANR	1555146	EqualityExpression	* ptr == '.'		1554977	0		==			
ANR	1555147	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555148	UnaryOperator	*		1554977	0					
ANR	1555149	Identifier	ptr		1554977	1					
ANR	1555150	PrimaryExpression	'.'		1554977	1					
ANR	1555151	CompoundStatement		21:27:461:461	1554977	1					
ANR	1555152	ExpressionStatement	* ptr = '0'	474:4:9465:9475	1554977	0	True				
ANR	1555153	AssignmentExpression	* ptr = '0'		1554977	0		=			
ANR	1555154	UnaryOperationExpression	* ptr		1554977	0					
ANR	1555155	UnaryOperator	*		1554977	0					
ANR	1555156	Identifier	ptr		1554977	1					
ANR	1555157	PrimaryExpression	'0'		1554977	1					
ANR	1555158	ExpressionStatement	"len = r_hex_str2bin ( ( char * ) mask , mask )"	477:2:9488:9527	1554977	3	True				
ANR	1555159	AssignmentExpression	"len = r_hex_str2bin ( ( char * ) mask , mask )"		1554977	0		=			
ANR	1555160	Identifier	len		1554977	0					
ANR	1555161	CallExpression	"r_hex_str2bin ( ( char * ) mask , mask )"		1554977	1					
ANR	1555162	Callee	r_hex_str2bin		1554977	0					
ANR	1555163	Identifier	r_hex_str2bin		1554977	0					
ANR	1555164	ArgumentList	( char * ) mask		1554977	1					
ANR	1555165	Argument	( char * ) mask		1554977	0					
ANR	1555166	CastExpression	( char * ) mask		1554977	0					
ANR	1555167	CastTarget	char *		1554977	0					
ANR	1555168	Identifier	mask		1554977	1					
ANR	1555169	Argument	mask		1554977	1					
ANR	1555170	Identifier	mask		1554977	0					
ANR	1555171	IfStatement	if ( len < 0 )		1554977	4					
ANR	1555172	Condition	len < 0	478:6:9535:9541	1554977	0	True				
ANR	1555173	RelationalExpression	len < 0		1554977	0		<			
ANR	1555174	Identifier	len		1554977	0					
ANR	1555175	PrimaryExpression	0		1554977	1					
ANR	1555176	CompoundStatement		26:15:546:546	1554977	1					
ANR	1555177	ExpressionStatement	len ++	479:3:9549:9554	1554977	0	True				
ANR	1555178	PostIncDecOperationExpression	len ++		1554977	0					
ANR	1555179	Identifier	len		1554977	0					
ANR	1555180	IncDec	++		1554977	1					
ANR	1555181	ReturnStatement	return len ;	482:1:9564:9574	1554977	8	True				
ANR	1555182	Identifier	len		1554977	0					
ANR	1555183	ReturnType	R_API int		1554977	1					
ANR	1555184	Identifier	r_hex_str2binmask		1554977	2					
ANR	1555185	ParameterList	"const char * in , ut8 * out , ut8 * mask"		1554977	3					
ANR	1555186	Parameter	const char * in	453:28:8960:8973	1554977	0	True				
ANR	1555187	ParameterType	const char *		1554977	0					
ANR	1555188	Identifier	in		1554977	1					
ANR	1555189	Parameter	ut8 * out	453:44:8976:8983	1554977	1	True				
ANR	1555190	ParameterType	ut8 *		1554977	0					
ANR	1555191	Identifier	out		1554977	1					
ANR	1555192	Parameter	ut8 * mask	453:54:8986:8994	1554977	2	True				
ANR	1555193	ParameterType	ut8 *		1554977	0					
ANR	1555194	Identifier	mask		1554977	1					
ANR	1555195	CFGEntryNode	ENTRY		1554977		True				
ANR	1555196	CFGExitNode	EXIT		1554977		True				
ANR	1555197	Symbol	strlen		1554977						
ANR	1555198	Symbol	len		1554977						
ANR	1555199	Symbol	in		1554977						
ANR	1555200	Symbol	* ptr		1554977						
ANR	1555201	Symbol	IS_HEXCHAR		1554977						
ANR	1555202	Symbol	has_nibble		1554977						
ANR	1555203	Symbol	ilen		1554977						
ANR	1555204	Symbol	r_hex_str2bin		1554977						
ANR	1555205	Symbol	out		1554977						
ANR	1555206	Symbol	mask		1554977						
ANR	1555207	Symbol	ptr		1554977						
ANR	1555208	Function	r_hex_bin_truncate	485:0:9579:9940							
ANR	1555209	FunctionDef	"r_hex_bin_truncate (ut64 in , int n)"		1555208	0					
ANR	1555210	CompoundStatement		485:47:9626:9940	1555208	0					
ANR	1555211	SwitchStatement	switch ( n )		1555208	0					
ANR	1555212	Condition	n	486:9:9637:9637	1555208	0	True				
ANR	1555213	Identifier	n		1555208	0					
ANR	1555214	CompoundStatement		2:12:13:13	1555208	1					
ANR	1555215	Label	case 1 :	487:1:9643:9649	1555208	0	True				
ANR	1555216	IfStatement	if ( ( in & UT8_GT0 ) )		1555208	1					
ANR	1555217	Condition	in & UT8_GT0	488:6:9657:9670	1555208	0	True				
ANR	1555218	BitAndExpression	in & UT8_GT0		1555208	0		&			
ANR	1555219	Identifier	in		1555208	0					
ANR	1555220	Identifier	UT8_GT0		1555208	1					
ANR	1555221	CompoundStatement		4:22:46:46	1555208	1					
ANR	1555222	ReturnStatement	return UT64_8U | in ;	489:3:9678:9697	1555208	0	True				
ANR	1555223	InclusiveOrExpression	UT64_8U | in		1555208	0		|			
ANR	1555224	Identifier	UT64_8U		1555208	0					
ANR	1555225	Identifier	in		1555208	1					
ANR	1555226	ReturnStatement	return in & UT8_MAX ;	491:2:9705:9722	1555208	2	True				
ANR	1555227	BitAndExpression	in & UT8_MAX		1555208	0		&			
ANR	1555228	Identifier	in		1555208	0					
ANR	1555229	Identifier	UT8_MAX		1555208	1					
ANR	1555230	Label	case 2 :	492:1:9725:9731	1555208	3	True				
ANR	1555231	IfStatement	if ( ( in & UT16_GT0 ) )		1555208	4					
ANR	1555232	Condition	in & UT16_GT0	493:6:9739:9753	1555208	0	True				
ANR	1555233	BitAndExpression	in & UT16_GT0		1555208	0		&			
ANR	1555234	Identifier	in		1555208	0					
ANR	1555235	Identifier	UT16_GT0		1555208	1					
ANR	1555236	CompoundStatement		9:23:129:129	1555208	1					
ANR	1555237	ReturnStatement	return UT64_16U | in ;	494:3:9761:9781	1555208	0	True				
ANR	1555238	InclusiveOrExpression	UT64_16U | in		1555208	0		|			
ANR	1555239	Identifier	UT64_16U		1555208	0					
ANR	1555240	Identifier	in		1555208	1					
ANR	1555241	ReturnStatement	return in & UT16_MAX ;	496:2:9789:9807	1555208	5	True				
ANR	1555242	BitAndExpression	in & UT16_MAX		1555208	0		&			
ANR	1555243	Identifier	in		1555208	0					
ANR	1555244	Identifier	UT16_MAX		1555208	1					
ANR	1555245	Label	case 4 :	497:1:9810:9816	1555208	6	True				
ANR	1555246	IfStatement	if ( ( in & UT32_GT0 ) )		1555208	7					
ANR	1555247	Condition	in & UT32_GT0	498:6:9824:9838	1555208	0	True				
ANR	1555248	BitAndExpression	in & UT32_GT0		1555208	0		&			
ANR	1555249	Identifier	in		1555208	0					
ANR	1555250	Identifier	UT32_GT0		1555208	1					
ANR	1555251	CompoundStatement		14:23:214:214	1555208	1					
ANR	1555252	ReturnStatement	return UT64_32U | in ;	499:3:9846:9866	1555208	0	True				
ANR	1555253	InclusiveOrExpression	UT64_32U | in		1555208	0		|			
ANR	1555254	Identifier	UT64_32U		1555208	0					
ANR	1555255	Identifier	in		1555208	1					
ANR	1555256	ReturnStatement	return in & UT32_MAX ;	501:2:9874:9892	1555208	8	True				
ANR	1555257	BitAndExpression	in & UT32_MAX		1555208	0		&			
ANR	1555258	Identifier	in		1555208	0					
ANR	1555259	Identifier	UT32_MAX		1555208	1					
ANR	1555260	Label	case 8 :	502:1:9895:9901	1555208	9	True				
ANR	1555261	ReturnStatement	return in & UT64_MAX ;	503:2:9905:9923	1555208	10	True				
ANR	1555262	BitAndExpression	in & UT64_MAX		1555208	0		&			
ANR	1555263	Identifier	in		1555208	0					
ANR	1555264	Identifier	UT64_MAX		1555208	1					
ANR	1555265	ReturnStatement	return in ;	505:1:9929:9938	1555208	1	True				
ANR	1555266	Identifier	in		1555208	0					
ANR	1555267	ReturnType	R_API st64		1555208	1					
ANR	1555268	Identifier	r_hex_bin_truncate		1555208	2					
ANR	1555269	ParameterList	"ut64 in , int n"		1555208	3					
ANR	1555270	Parameter	ut64 in	485:31:9610:9616	1555208	0	True				
ANR	1555271	ParameterType	ut64		1555208	0					
ANR	1555272	Identifier	in		1555208	1					
ANR	1555273	Parameter	int n	485:40:9619:9623	1555208	1	True				
ANR	1555274	ParameterType	int		1555208	0					
ANR	1555275	Identifier	n		1555208	1					
ANR	1555276	CFGEntryNode	ENTRY		1555208		True				
ANR	1555277	CFGExitNode	EXIT		1555208		True				
ANR	1555278	Symbol	UT32_MAX		1555208						
ANR	1555279	Symbol	UT32_GT0		1555208						
ANR	1555280	Symbol	UT64_16U		1555208						
ANR	1555281	Symbol	UT8_MAX		1555208						
ANR	1555282	Symbol	in		1555208						
ANR	1555283	Symbol	UT64_8U		1555208						
ANR	1555284	Symbol	UT8_GT0		1555208						
ANR	1555285	Symbol	UT64_32U		1555208						
ANR	1555286	Symbol	UT16_GT0		1555208						
ANR	1555287	Symbol	UT16_MAX		1555208						
ANR	1555288	Symbol	UT64_MAX		1555208						
ANR	1555289	Symbol	n		1555208						
ANR	1555290	Function	r_hex_str_is_valid	509:0:10023:10358							
ANR	1555291	FunctionDef	r_hex_str_is_valid (const char * str)		1555290	0					
ANR	1555292	CompoundStatement		509:46:10069:10358	1555290	0					
ANR	1555293	IdentifierDeclStatement	int i ;	510:1:10072:10077	1555290	0	True				
ANR	1555294	IdentifierDecl	i		1555290	0					
ANR	1555295	IdentifierDeclType	int		1555290	0					
ANR	1555296	Identifier	i		1555290	1					
ANR	1555297	IdentifierDeclStatement	int len = 0 ;	511:1:10080:10091	1555290	1	True				
ANR	1555298	IdentifierDecl	len = 0		1555290	0					
ANR	1555299	IdentifierDeclType	int		1555290	0					
ANR	1555300	Identifier	len		1555290	1					
ANR	1555301	AssignmentExpression	len = 0		1555290	2		=			
ANR	1555302	Identifier	len		1555290	0					
ANR	1555303	PrimaryExpression	0		1555290	1					
ANR	1555304	IfStatement	"if ( ! strncmp ( str , ""0x"" , 2 ) )"		1555290	2					
ANR	1555305	Condition	"! strncmp ( str , ""0x"" , 2 )"	512:5:10098:10120	1555290	0	True				
ANR	1555306	UnaryOperationExpression	"! strncmp ( str , ""0x"" , 2 )"		1555290	0					
ANR	1555307	UnaryOperator	!		1555290	0					
ANR	1555308	CallExpression	"strncmp ( str , ""0x"" , 2 )"		1555290	1					
ANR	1555309	Callee	strncmp		1555290	0					
ANR	1555310	Identifier	strncmp		1555290	0					
ANR	1555311	ArgumentList	str		1555290	1					
ANR	1555312	Argument	str		1555290	0					
ANR	1555313	Identifier	str		1555290	0					
ANR	1555314	Argument	"""0x"""		1555290	1					
ANR	1555315	PrimaryExpression	"""0x"""		1555290	0					
ANR	1555316	Argument	2		1555290	2					
ANR	1555317	PrimaryExpression	2		1555290	0					
ANR	1555318	CompoundStatement		4:30:53:53	1555290	1					
ANR	1555319	ExpressionStatement	str += 2	513:2:10127:10135	1555290	0	True				
ANR	1555320	AssignmentExpression	str += 2		1555290	0		+=			
ANR	1555321	Identifier	str		1555290	0					
ANR	1555322	PrimaryExpression	2		1555290	1					
ANR	1555323	ForStatement	for ( i = 0 ; str [ i ] != '\\0' ; i ++ )		1555290	3					
ANR	1555324	ForInit	i = 0 ;	515:6:10146:10151	1555290	0	True				
ANR	1555325	AssignmentExpression	i = 0		1555290	0		=			
ANR	1555326	Identifier	i		1555290	0					
ANR	1555327	PrimaryExpression	0		1555290	1					
ANR	1555328	Condition	str [ i ] != '\\0'	515:13:10153:10166	1555290	1	True				
ANR	1555329	EqualityExpression	str [ i ] != '\\0'		1555290	0		!=			
ANR	1555330	ArrayIndexing	str [ i ]		1555290	0					
ANR	1555331	Identifier	str		1555290	0					
ANR	1555332	Identifier	i		1555290	1					
ANR	1555333	PrimaryExpression	'\\0'		1555290	1					
ANR	1555334	PostIncDecOperationExpression	i ++	515:29:10169:10171	1555290	2	True				
ANR	1555335	Identifier	i		1555290	0					
ANR	1555336	IncDec	++		1555290	1					
ANR	1555337	CompoundStatement		7:34:104:104	1555290	3					
ANR	1555338	IfStatement	if ( IS_HEXCHAR ( str [ i ] ) )		1555290	0					
ANR	1555339	Condition	IS_HEXCHAR ( str [ i ] )	516:6:10182:10200	1555290	0	True				
ANR	1555340	CallExpression	IS_HEXCHAR ( str [ i ] )		1555290	0					
ANR	1555341	Callee	IS_HEXCHAR		1555290	0					
ANR	1555342	Identifier	IS_HEXCHAR		1555290	0					
ANR	1555343	ArgumentList	str [ i ]		1555290	1					
ANR	1555344	Argument	str [ i ]		1555290	0					
ANR	1555345	ArrayIndexing	str [ i ]		1555290	0					
ANR	1555346	Identifier	str		1555290	0					
ANR	1555347	Identifier	i		1555290	1					
ANR	1555348	CompoundStatement		8:27:133:133	1555290	1					
ANR	1555349	ExpressionStatement	len ++	517:3:10208:10213	1555290	0	True				
ANR	1555350	PostIncDecOperationExpression	len ++		1555290	0					
ANR	1555351	Identifier	len		1555290	0					
ANR	1555352	IncDec	++		1555290	1					
ANR	1555353	IfStatement	if ( IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] ) )		1555290	1					
ANR	1555354	Condition	IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] )	519:6:10225:10269	1555290	0	True				
ANR	1555355	OrExpression	IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] )		1555290	0		||			
ANR	1555356	CallExpression	IS_HEXCHAR ( str [ i ] )		1555290	0					
ANR	1555357	Callee	IS_HEXCHAR		1555290	0					
ANR	1555358	Identifier	IS_HEXCHAR		1555290	0					
ANR	1555359	ArgumentList	str [ i ]		1555290	1					
ANR	1555360	Argument	str [ i ]		1555290	0					
ANR	1555361	ArrayIndexing	str [ i ]		1555290	0					
ANR	1555362	Identifier	str		1555290	0					
ANR	1555363	Identifier	i		1555290	1					
ANR	1555364	CallExpression	IS_WHITESPACE ( str [ i ] )		1555290	1					
ANR	1555365	Callee	IS_WHITESPACE		1555290	0					
ANR	1555366	Identifier	IS_WHITESPACE		1555290	0					
ANR	1555367	ArgumentList	str [ i ]		1555290	1					
ANR	1555368	Argument	str [ i ]		1555290	0					
ANR	1555369	ArrayIndexing	str [ i ]		1555290	0					
ANR	1555370	Identifier	str		1555290	0					
ANR	1555371	Identifier	i		1555290	1					
ANR	1555372	CompoundStatement		11:53:202:202	1555290	1					
ANR	1555373	ContinueStatement	continue ;	520:3:10277:10285	1555290	0	True				
ANR	1555374	ReturnStatement	return - 1 ;	522:2:10293:10302	1555290	2	True				
ANR	1555375	UnaryOperationExpression	- 1		1555290	0					
ANR	1555376	UnaryOperator	-		1555290	0					
ANR	1555377	PrimaryExpression	1		1555290	1					
ANR	1555378	ReturnStatement	return len ;	524:1:10346:10356	1555290	4	True				
ANR	1555379	Identifier	len		1555290	0					
ANR	1555380	ReturnType	R_API int		1555290	1					
ANR	1555381	Identifier	r_hex_str_is_valid		1555290	2					
ANR	1555382	ParameterList	const char * str		1555290	3					
ANR	1555383	Parameter	const char * str	509:29:10052:10066	1555290	0	True				
ANR	1555384	ParameterType	const char *		1555290	0					
ANR	1555385	Identifier	str		1555290	1					
ANR	1555386	CFGEntryNode	ENTRY		1555290		True				
ANR	1555387	CFGExitNode	EXIT		1555290		True				
ANR	1555388	Symbol	str		1555290						
ANR	1555389	Symbol	strncmp		1555290						
ANR	1555390	Symbol	* i		1555290						
ANR	1555391	Symbol	len		1555290						
ANR	1555392	Symbol	i		1555290						
ANR	1555393	Symbol	* str		1555290						
ANR	1555394	Symbol	IS_HEXCHAR		1555290						
ANR	1555395	Symbol	IS_WHITESPACE		1555290						
