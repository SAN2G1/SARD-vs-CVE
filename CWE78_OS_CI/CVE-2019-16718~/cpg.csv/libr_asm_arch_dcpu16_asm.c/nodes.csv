command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2707105	File	data/converged/CVE-2019-16718~_radare2/libr_asm_arch_dcpu16_asm.c								
ANR	2707106	Function	get_register_id	38:0:1432:1577							
ANR	2707107	FunctionDef	get_register_id (char reg)		2707106	0					
ANR	2707108	CompoundStatement		38:37:1469:1577	2707106	0					
ANR	2707109	IdentifierDeclStatement	"const char * regs = ""ABCXYZIJ"" ;"	39:1:1472:1501	2707106	0	True				
ANR	2707110	IdentifierDecl	"* regs = ""ABCXYZIJ"""		2707106	0					
ANR	2707111	IdentifierDeclType	const char *		2707106	0					
ANR	2707112	Identifier	regs		2707106	1					
ANR	2707113	AssignmentExpression	"* regs = ""ABCXYZIJ"""		2707106	2		=			
ANR	2707114	Identifier	regs		2707106	0					
ANR	2707115	PrimaryExpression	"""ABCXYZIJ"""		2707106	1					
ANR	2707116	IdentifierDeclStatement	"const char * p = strchr ( regs , reg ) ;"	40:1:1504:1538	2707106	1	True				
ANR	2707117	IdentifierDecl	"* p = strchr ( regs , reg )"		2707106	0					
ANR	2707118	IdentifierDeclType	const char *		2707106	0					
ANR	2707119	Identifier	p		2707106	1					
ANR	2707120	AssignmentExpression	"* p = strchr ( regs , reg )"		2707106	2		=			
ANR	2707121	Identifier	p		2707106	0					
ANR	2707122	CallExpression	"strchr ( regs , reg )"		2707106	1					
ANR	2707123	Callee	strchr		2707106	0					
ANR	2707124	Identifier	strchr		2707106	0					
ANR	2707125	ArgumentList	regs		2707106	1					
ANR	2707126	Argument	regs		2707106	0					
ANR	2707127	Identifier	regs		2707106	0					
ANR	2707128	Argument	reg		2707106	1					
ANR	2707129	Identifier	reg		2707106	0					
ANR	2707130	ReturnStatement	return p ? ( int ) ( size_t ) ( p - regs ) : 0 ;	41:1:1541:1575	2707106	2	True				
ANR	2707131	ConditionalExpression	p ? ( int ) ( size_t ) ( p - regs ) : 0		2707106	0					
ANR	2707132	Condition	p		2707106	0					
ANR	2707133	Identifier	p		2707106	0					
ANR	2707134	CastExpression	( int ) ( size_t ) ( p - regs )		2707106	1					
ANR	2707135	CastTarget	int		2707106	0					
ANR	2707136	CastExpression	( size_t ) ( p - regs )		2707106	1					
ANR	2707137	CastTarget	size_t		2707106	0					
ANR	2707138	AdditiveExpression	p - regs		2707106	1		-			
ANR	2707139	Identifier	p		2707106	0					
ANR	2707140	Identifier	regs		2707106	1					
ANR	2707141	PrimaryExpression	0		2707106	2					
ANR	2707142	ReturnType	static ut8		2707106	1					
ANR	2707143	Identifier	get_register_id		2707106	2					
ANR	2707144	ParameterList	char reg		2707106	3					
ANR	2707145	Parameter	char reg	38:27:1459:1466	2707106	0	True				
ANR	2707146	ParameterType	char		2707106	0					
ANR	2707147	Identifier	reg		2707106	1					
ANR	2707148	CFGEntryNode	ENTRY		2707106		True				
ANR	2707149	CFGExitNode	EXIT		2707106		True				
ANR	2707150	Symbol	p		2707106						
ANR	2707151	Symbol	reg		2707106						
ANR	2707152	Symbol	strchr		2707106						
ANR	2707153	Symbol	regs		2707106						
ANR	2707154	Function	clean_line	44:0:1580:2044							
ANR	2707155	FunctionDef	"clean_line (char * oline , const char * line)"		2707154	0					
ANR	2707156	CompoundStatement		44:54:1634:2044	2707154	0					
ANR	2707157	IdentifierDeclStatement	"int cn = 0 , n = 0 ;"	45:1:1637:1654	2707154	0	True				
ANR	2707158	IdentifierDecl	cn = 0		2707154	0					
ANR	2707159	IdentifierDeclType	int		2707154	0					
ANR	2707160	Identifier	cn		2707154	1					
ANR	2707161	AssignmentExpression	cn = 0		2707154	2		=			
ANR	2707162	Identifier	cn		2707154	0					
ANR	2707163	PrimaryExpression	0		2707154	1					
ANR	2707164	IdentifierDecl	n = 0		2707154	1					
ANR	2707165	IdentifierDeclType	int		2707154	0					
ANR	2707166	Identifier	n		2707154	1					
ANR	2707167	AssignmentExpression	n = 0		2707154	2		=			
ANR	2707168	Identifier	n		2707154	0					
ANR	2707169	PrimaryExpression	0		2707154	1					
ANR	2707170	WhileStatement	while ( line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';' )		2707154	1					
ANR	2707171	Condition	line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';'	47:8:1665:1716	2707154	0	True				
ANR	2707172	AndExpression	line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';'		2707154	0		&&			
ANR	2707173	EqualityExpression	line [ cn ] != 0		2707154	0		!=			
ANR	2707174	ArrayIndexing	line [ cn ]		2707154	0					
ANR	2707175	Identifier	line		2707154	0					
ANR	2707176	Identifier	cn		2707154	1					
ANR	2707177	PrimaryExpression	0		2707154	1					
ANR	2707178	AndExpression	line [ cn ] != '\\n' && line [ cn ] != ';'		2707154	1		&&			
ANR	2707179	EqualityExpression	line [ cn ] != '\\n'		2707154	0		!=			
ANR	2707180	ArrayIndexing	line [ cn ]		2707154	0					
ANR	2707181	Identifier	line		2707154	0					
ANR	2707182	Identifier	cn		2707154	1					
ANR	2707183	PrimaryExpression	'\\n'		2707154	1					
ANR	2707184	EqualityExpression	line [ cn ] != ';'		2707154	1		!=			
ANR	2707185	ArrayIndexing	line [ cn ]		2707154	0					
ANR	2707186	Identifier	line		2707154	0					
ANR	2707187	Identifier	cn		2707154	1					
ANR	2707188	PrimaryExpression	';'		2707154	1					
ANR	2707189	CompoundStatement		4:62:84:84	2707154	1					
ANR	2707190	IfStatement	if ( line [ cn ] >= '!' && line [ cn ] <= '~' )		2707154	0					
ANR	2707191	Condition	line [ cn ] >= '!' && line [ cn ] <= '~'	48:6:1727:1760	2707154	0	True				
ANR	2707192	AndExpression	line [ cn ] >= '!' && line [ cn ] <= '~'		2707154	0		&&			
ANR	2707193	RelationalExpression	line [ cn ] >= '!'		2707154	0		>=			
ANR	2707194	ArrayIndexing	line [ cn ]		2707154	0					
ANR	2707195	Identifier	line		2707154	0					
ANR	2707196	Identifier	cn		2707154	1					
ANR	2707197	PrimaryExpression	'!'		2707154	1					
ANR	2707198	RelationalExpression	line [ cn ] <= '~'		2707154	1		<=			
ANR	2707199	ArrayIndexing	line [ cn ]		2707154	0					
ANR	2707200	Identifier	line		2707154	0					
ANR	2707201	Identifier	cn		2707154	1					
ANR	2707202	PrimaryExpression	'~'		2707154	1					
ANR	2707203	CompoundStatement		6:3:133:161	2707154	1					
ANR	2707204	IdentifierDeclStatement	char current_char = line [ cn ] ;	49:3:1768:1796	2707154	0	True				
ANR	2707205	IdentifierDecl	current_char = line [ cn ]		2707154	0					
ANR	2707206	IdentifierDeclType	char		2707154	0					
ANR	2707207	Identifier	current_char		2707154	1					
ANR	2707208	AssignmentExpression	current_char = line [ cn ]		2707154	2		=			
ANR	2707209	Identifier	current_char		2707154	0					
ANR	2707210	ArrayIndexing	line [ cn ]		2707154	1					
ANR	2707211	Identifier	line		2707154	0					
ANR	2707212	Identifier	cn		2707154	1					
ANR	2707213	IfStatement	if ( current_char >= 'a' && current_char <= 'z' )		2707154	1					
ANR	2707214	Condition	current_char >= 'a' && current_char <= 'z'	52:7:1840:1881	2707154	0	True				
ANR	2707215	AndExpression	current_char >= 'a' && current_char <= 'z'		2707154	0		&&			
ANR	2707216	RelationalExpression	current_char >= 'a'		2707154	0		>=			
ANR	2707217	Identifier	current_char		2707154	0					
ANR	2707218	PrimaryExpression	'a'		2707154	1					
ANR	2707219	RelationalExpression	current_char <= 'z'		2707154	1		<=			
ANR	2707220	Identifier	current_char		2707154	0					
ANR	2707221	PrimaryExpression	'z'		2707154	1					
ANR	2707222	ExpressionStatement	current_char = toupper ( ( unsigned char ) current_char )	53:4:1888:1940	2707154	1	True				
ANR	2707223	AssignmentExpression	current_char = toupper ( ( unsigned char ) current_char )		2707154	0		=			
ANR	2707224	Identifier	current_char		2707154	0					
ANR	2707225	CallExpression	toupper ( ( unsigned char ) current_char )		2707154	1					
ANR	2707226	Callee	toupper		2707154	0					
ANR	2707227	Identifier	toupper		2707154	0					
ANR	2707228	ArgumentList	( unsigned char ) current_char		2707154	1					
ANR	2707229	Argument	( unsigned char ) current_char		2707154	0					
ANR	2707230	CastExpression	( unsigned char ) current_char		2707154	0					
ANR	2707231	CastTarget	unsigned char		2707154	0					
ANR	2707232	Identifier	current_char		2707154	1					
ANR	2707233	ExpressionStatement	oline [ n ] = current_char	56:3:1981:2004	2707154	2	True				
ANR	2707234	AssignmentExpression	oline [ n ] = current_char		2707154	0		=			
ANR	2707235	ArrayIndexing	oline [ n ]		2707154	0					
ANR	2707236	Identifier	oline		2707154	0					
ANR	2707237	Identifier	n		2707154	1					
ANR	2707238	Identifier	current_char		2707154	1					
ANR	2707239	ExpressionStatement	n ++	57:3:2009:2012	2707154	3	True				
ANR	2707240	PostIncDecOperationExpression	n ++		2707154	0					
ANR	2707241	Identifier	n		2707154	0					
ANR	2707242	IncDec	++		2707154	1					
ANR	2707243	ExpressionStatement	cn ++	59:2:2020:2024	2707154	1	True				
ANR	2707244	PostIncDecOperationExpression	cn ++		2707154	0					
ANR	2707245	Identifier	cn		2707154	0					
ANR	2707246	IncDec	++		2707154	1					
ANR	2707247	ExpressionStatement	oline [ n ] = 0	61:1:2030:2042	2707154	2	True				
ANR	2707248	AssignmentExpression	oline [ n ] = 0		2707154	0		=			
ANR	2707249	ArrayIndexing	oline [ n ]		2707154	0					
ANR	2707250	Identifier	oline		2707154	0					
ANR	2707251	Identifier	n		2707154	1					
ANR	2707252	PrimaryExpression	0		2707154	1					
ANR	2707253	ReturnType	static void		2707154	1					
ANR	2707254	Identifier	clean_line		2707154	2					
ANR	2707255	ParameterList	"char * oline , const char * line"		2707154	3					
ANR	2707256	Parameter	char * oline	44:23:1603:1613	2707154	0	True				
ANR	2707257	ParameterType	char *		2707154	0					
ANR	2707258	Identifier	oline		2707154	1					
ANR	2707259	Parameter	const char * line	44:36:1616:1631	2707154	1	True				
ANR	2707260	ParameterType	const char *		2707154	0					
ANR	2707261	Identifier	line		2707154	1					
ANR	2707262	CFGEntryNode	ENTRY		2707154		True				
ANR	2707263	CFGExitNode	EXIT		2707154		True				
ANR	2707264	Symbol	* cn		2707154						
ANR	2707265	Symbol	* oline		2707154						
ANR	2707266	Symbol	toupper		2707154						
ANR	2707267	Symbol	line		2707154						
ANR	2707268	Symbol	* n		2707154						
ANR	2707269	Symbol	current_char		2707154						
ANR	2707270	Symbol	cn		2707154						
ANR	2707271	Symbol	* line		2707154						
ANR	2707272	Symbol	oline		2707154						
ANR	2707273	Symbol	n		2707154						
ANR	2707274	Function	decode_parameter	67:0:2134:5711							
ANR	2707275	FunctionDef	"decode_parameter (char * param , int * extra_word_needed , ut16 * extra_word_value)"		2707274	0					
ANR	2707276	CompoundStatement		67:89:2223:5711	2707274	0					
ANR	2707277	IdentifierDeclStatement	int square_brackets = 0 ;	69:1:2259:2282	2707274	0	True				
ANR	2707278	IdentifierDecl	square_brackets = 0		2707274	0					
ANR	2707279	IdentifierDeclType	int		2707274	0					
ANR	2707280	Identifier	square_brackets		2707274	1					
ANR	2707281	AssignmentExpression	square_brackets = 0		2707274	2		=			
ANR	2707282	Identifier	square_brackets		2707274	0					
ANR	2707283	PrimaryExpression	0		2707274	1					
ANR	2707284	IdentifierDeclStatement	"int first_sqbracket = 0 , last_sqbracket = 0 ;"	70:1:2285:2328	2707274	1	True				
ANR	2707285	IdentifierDecl	first_sqbracket = 0		2707274	0					
ANR	2707286	IdentifierDeclType	int		2707274	0					
ANR	2707287	Identifier	first_sqbracket		2707274	1					
ANR	2707288	AssignmentExpression	first_sqbracket = 0		2707274	2		=			
ANR	2707289	Identifier	first_sqbracket		2707274	0					
ANR	2707290	PrimaryExpression	0		2707274	1					
ANR	2707291	IdentifierDecl	last_sqbracket = 0		2707274	1					
ANR	2707292	IdentifierDeclType	int		2707274	0					
ANR	2707293	Identifier	last_sqbracket		2707274	1					
ANR	2707294	AssignmentExpression	last_sqbracket = 0		2707274	2		=			
ANR	2707295	Identifier	last_sqbracket		2707274	0					
ANR	2707296	PrimaryExpression	0		2707274	1					
ANR	2707297	IfStatement	if ( param [ 0 ] == '[' )		2707274	2					
ANR	2707298	Condition	param [ 0 ] == '['	71:5:2335:2349	2707274	0	True				
ANR	2707299	EqualityExpression	param [ 0 ] == '['		2707274	0		==			
ANR	2707300	ArrayIndexing	param [ 0 ]		2707274	0					
ANR	2707301	Identifier	param		2707274	0					
ANR	2707302	PrimaryExpression	0		2707274	1					
ANR	2707303	PrimaryExpression	'['		2707274	1					
ANR	2707304	CompoundStatement		5:22:128:128	2707274	1					
ANR	2707305	ExpressionStatement	first_sqbracket = 1	72:2:2356:2375	2707274	0	True				
ANR	2707306	AssignmentExpression	first_sqbracket = 1		2707274	0		=			
ANR	2707307	Identifier	first_sqbracket		2707274	0					
ANR	2707308	PrimaryExpression	1		2707274	1					
ANR	2707309	ExpressionStatement	param ++	73:2:2379:2386	2707274	1	True				
ANR	2707310	PostIncDecOperationExpression	param ++		2707274	0					
ANR	2707311	Identifier	param		2707274	0					
ANR	2707312	IncDec	++		2707274	1					
ANR	2707313	IfStatement	if ( param [ strlen ( param ) - 1 ] == ']' )		2707274	3					
ANR	2707314	Condition	param [ strlen ( param ) - 1 ] == ']'	75:5:2396:2426	2707274	0	True				
ANR	2707315	EqualityExpression	param [ strlen ( param ) - 1 ] == ']'		2707274	0		==			
ANR	2707316	ArrayIndexing	param [ strlen ( param ) - 1 ]		2707274	0					
ANR	2707317	Identifier	param		2707274	0					
ANR	2707318	AdditiveExpression	strlen ( param ) - 1		2707274	1		-			
ANR	2707319	CallExpression	strlen ( param )		2707274	0					
ANR	2707320	Callee	strlen		2707274	0					
ANR	2707321	Identifier	strlen		2707274	0					
ANR	2707322	ArgumentList	param		2707274	1					
ANR	2707323	Argument	param		2707274	0					
ANR	2707324	Identifier	param		2707274	0					
ANR	2707325	PrimaryExpression	1		2707274	1					
ANR	2707326	PrimaryExpression	']'		2707274	1					
ANR	2707327	CompoundStatement		9:39:206:206	2707274	1					
ANR	2707328	ExpressionStatement	last_sqbracket = 1	76:2:2434:2452	2707274	0	True				
ANR	2707329	AssignmentExpression	last_sqbracket = 1		2707274	0		=			
ANR	2707330	Identifier	last_sqbracket		2707274	0					
ANR	2707331	PrimaryExpression	1		2707274	1					
ANR	2707332	ExpressionStatement	param [ strlen ( param ) - 1 ] = 0	77:2:2456:2484	2707274	1	True				
ANR	2707333	AssignmentExpression	param [ strlen ( param ) - 1 ] = 0		2707274	0		=			
ANR	2707334	ArrayIndexing	param [ strlen ( param ) - 1 ]		2707274	0					
ANR	2707335	Identifier	param		2707274	0					
ANR	2707336	AdditiveExpression	strlen ( param ) - 1		2707274	1		-			
ANR	2707337	CallExpression	strlen ( param )		2707274	0					
ANR	2707338	Callee	strlen		2707274	0					
ANR	2707339	Identifier	strlen		2707274	0					
ANR	2707340	ArgumentList	param		2707274	1					
ANR	2707341	Argument	param		2707274	0					
ANR	2707342	Identifier	param		2707274	0					
ANR	2707343	PrimaryExpression	1		2707274	1					
ANR	2707344	PrimaryExpression	0		2707274	1					
ANR	2707345	IfStatement	if ( first_sqbracket == 1 )		2707274	4					
ANR	2707346	Condition	first_sqbracket == 1	81:5:2520:2539	2707274	0	True				
ANR	2707347	EqualityExpression	first_sqbracket == 1		2707274	0		==			
ANR	2707348	Identifier	first_sqbracket		2707274	0					
ANR	2707349	PrimaryExpression	1		2707274	1					
ANR	2707350	CompoundStatement		15:27:318:318	2707274	1					
ANR	2707351	ExpressionStatement	square_brackets = 1	82:2:2546:2565	2707274	0	True				
ANR	2707352	AssignmentExpression	square_brackets = 1		2707274	0		=			
ANR	2707353	Identifier	square_brackets		2707274	0					
ANR	2707354	PrimaryExpression	1		2707274	1					
ANR	2707355	IfStatement	if ( last_sqbracket != 1 )		2707274	1					
ANR	2707356	Condition	last_sqbracket != 1	83:6:2573:2591	2707274	0	True				
ANR	2707357	EqualityExpression	last_sqbracket != 1		2707274	0		!=			
ANR	2707358	Identifier	last_sqbracket		2707274	0					
ANR	2707359	PrimaryExpression	1		2707274	1					
ANR	2707360	CompoundStatement		17:27:370:370	2707274	1					
ANR	2707361	ExpressionStatement	"fprintf ( stderr , ""Missing last square bracket\\n"" )"	84:3:2599:2648	2707274	0	True				
ANR	2707362	CallExpression	"fprintf ( stderr , ""Missing last square bracket\\n"" )"		2707274	0					
ANR	2707363	Callee	fprintf		2707274	0					
ANR	2707364	Identifier	fprintf		2707274	0					
ANR	2707365	ArgumentList	stderr		2707274	1					
ANR	2707366	Argument	stderr		2707274	0					
ANR	2707367	Identifier	stderr		2707274	0					
ANR	2707368	Argument	"""Missing last square bracket\\n"""		2707274	1					
ANR	2707369	PrimaryExpression	"""Missing last square bracket\\n"""		2707274	0					
ANR	2707370	ReturnStatement	return 0 ;	85:3:2653:2661	2707274	1	True				
ANR	2707371	PrimaryExpression	0		2707274	0					
ANR	2707372	ElseStatement	else		2707274	0					
ANR	2707373	CompoundStatement		21:8:451:451	2707274	0					
ANR	2707374	IfStatement	if ( last_sqbracket == 1 )		2707274	0					
ANR	2707375	Condition	last_sqbracket == 1	88:6:2683:2701	2707274	0	True				
ANR	2707376	EqualityExpression	last_sqbracket == 1		2707274	0		==			
ANR	2707377	Identifier	last_sqbracket		2707274	0					
ANR	2707378	PrimaryExpression	1		2707274	1					
ANR	2707379	CompoundStatement		22:27:480:480	2707274	1					
ANR	2707380	ExpressionStatement	"fprintf ( stderr , ""Missing first square bracket\\n"" )"	89:3:2709:2759	2707274	0	True				
ANR	2707381	CallExpression	"fprintf ( stderr , ""Missing first square bracket\\n"" )"		2707274	0					
ANR	2707382	Callee	fprintf		2707274	0					
ANR	2707383	Identifier	fprintf		2707274	0					
ANR	2707384	ArgumentList	stderr		2707274	1					
ANR	2707385	Argument	stderr		2707274	0					
ANR	2707386	Identifier	stderr		2707274	0					
ANR	2707387	Argument	"""Missing first square bracket\\n"""		2707274	1					
ANR	2707388	PrimaryExpression	"""Missing first square bracket\\n"""		2707274	0					
ANR	2707389	ReturnStatement	return 0 ;	90:3:2764:2772	2707274	1	True				
ANR	2707390	PrimaryExpression	0		2707274	0					
ANR	2707391	IfStatement	if ( param [ 0 ] == '0' && param [ 1 ] == 'X' )		2707274	5					
ANR	2707392	Condition	param [ 0 ] == '0' && param [ 1 ] == 'X'	95:5:2826:2859	2707274	0	True				
ANR	2707393	AndExpression	param [ 0 ] == '0' && param [ 1 ] == 'X'		2707274	0		&&			
ANR	2707394	EqualityExpression	param [ 0 ] == '0'		2707274	0		==			
ANR	2707395	ArrayIndexing	param [ 0 ]		2707274	0					
ANR	2707396	Identifier	param		2707274	0					
ANR	2707397	PrimaryExpression	0		2707274	1					
ANR	2707398	PrimaryExpression	'0'		2707274	1					
ANR	2707399	EqualityExpression	param [ 1 ] == 'X'		2707274	1		==			
ANR	2707400	ArrayIndexing	param [ 1 ]		2707274	0					
ANR	2707401	Identifier	param		2707274	0					
ANR	2707402	PrimaryExpression	1		2707274	1					
ANR	2707403	PrimaryExpression	'X'		2707274	1					
ANR	2707404	CompoundStatement		35:2:772:784	2707274	1					
ANR	2707405	IdentifierDeclStatement	ut16 value = 0 ;	97:2:2885:2899	2707274	0	True				
ANR	2707406	IdentifierDecl	value = 0		2707274	0					
ANR	2707407	IdentifierDeclType	ut16		2707274	0					
ANR	2707408	Identifier	value		2707274	1					
ANR	2707409	AssignmentExpression	value = 0		2707274	2		=			
ANR	2707410	Identifier	value		2707274	0					
ANR	2707411	PrimaryExpression	0		2707274	1					
ANR	2707412	ExpressionStatement	param = param + 2	98:2:2903:2920	2707274	1	True				
ANR	2707413	AssignmentExpression	param = param + 2		2707274	0		=			
ANR	2707414	Identifier	param		2707274	0					
ANR	2707415	AdditiveExpression	param + 2		2707274	1		+			
ANR	2707416	Identifier	param		2707274	0					
ANR	2707417	PrimaryExpression	2		2707274	1					
ANR	2707418	IdentifierDeclStatement	int digit_count = strlen ( param ) ;	99:2:2940:2971	2707274	2	True				
ANR	2707419	IdentifierDecl	digit_count = strlen ( param )		2707274	0					
ANR	2707420	IdentifierDeclType	int		2707274	0					
ANR	2707421	Identifier	digit_count		2707274	1					
ANR	2707422	AssignmentExpression	digit_count = strlen ( param )		2707274	2		=			
ANR	2707423	Identifier	digit_count		2707274	0					
ANR	2707424	CallExpression	strlen ( param )		2707274	1					
ANR	2707425	Callee	strlen		2707274	0					
ANR	2707426	Identifier	strlen		2707274	0					
ANR	2707427	ArgumentList	param		2707274	1					
ANR	2707428	Argument	param		2707274	0					
ANR	2707429	Identifier	param		2707274	0					
ANR	2707430	IdentifierDeclStatement	int digit_num = 0 ;	100:2:2975:2992	2707274	3	True				
ANR	2707431	IdentifierDecl	digit_num = 0		2707274	0					
ANR	2707432	IdentifierDeclType	int		2707274	0					
ANR	2707433	Identifier	digit_num		2707274	1					
ANR	2707434	AssignmentExpression	digit_num = 0		2707274	2		=			
ANR	2707435	Identifier	digit_num		2707274	0					
ANR	2707436	PrimaryExpression	0		2707274	1					
ANR	2707437	IdentifierDeclStatement	int reg = - 1 ;	101:2:2996:3008	2707274	4	True				
ANR	2707438	IdentifierDecl	reg = - 1		2707274	0					
ANR	2707439	IdentifierDeclType	int		2707274	0					
ANR	2707440	Identifier	reg		2707274	1					
ANR	2707441	AssignmentExpression	reg = - 1		2707274	2		=			
ANR	2707442	Identifier	reg		2707274	0					
ANR	2707443	UnaryOperationExpression	- 1		2707274	1					
ANR	2707444	UnaryOperator	-		2707274	0					
ANR	2707445	PrimaryExpression	1		2707274	1					
ANR	2707446	ForStatement	for ( digit_num = 0 ; digit_num < digit_count ; digit_num ++ )		2707274	5					
ANR	2707447	ForInit	digit_num = 0 ;	102:7:3017:3030	2707274	0	True				
ANR	2707448	AssignmentExpression	digit_num = 0		2707274	0		=			
ANR	2707449	Identifier	digit_num		2707274	0					
ANR	2707450	PrimaryExpression	0		2707274	1					
ANR	2707451	Condition	digit_num < digit_count	102:22:3032:3054	2707274	1	True				
ANR	2707452	RelationalExpression	digit_num < digit_count		2707274	0		<			
ANR	2707453	Identifier	digit_num		2707274	0					
ANR	2707454	Identifier	digit_count		2707274	1					
ANR	2707455	PostIncDecOperationExpression	digit_num ++	102:47:3057:3067	2707274	2	True				
ANR	2707456	Identifier	digit_num		2707274	0					
ANR	2707457	IncDec	++		2707274	1					
ANR	2707458	CompoundStatement		39:3:899:936	2707274	3					
ANR	2707459	IdentifierDeclStatement	int digit_val = - 1 ;	104:3:3100:3118	2707274	0	True				
ANR	2707460	IdentifierDecl	digit_val = - 1		2707274	0					
ANR	2707461	IdentifierDeclType	int		2707274	0					
ANR	2707462	Identifier	digit_val		2707274	1					
ANR	2707463	AssignmentExpression	digit_val = - 1		2707274	2		=			
ANR	2707464	Identifier	digit_val		2707274	0					
ANR	2707465	UnaryOperationExpression	- 1		2707274	1					
ANR	2707466	UnaryOperator	-		2707274	0					
ANR	2707467	PrimaryExpression	1		2707274	1					
ANR	2707468	IdentifierDeclStatement	char current_digit = param [ digit_num ] ;	105:3:3123:3160	2707274	1	True				
ANR	2707469	IdentifierDecl	current_digit = param [ digit_num ]		2707274	0					
ANR	2707470	IdentifierDeclType	char		2707274	0					
ANR	2707471	Identifier	current_digit		2707274	1					
ANR	2707472	AssignmentExpression	current_digit = param [ digit_num ]		2707274	2		=			
ANR	2707473	Identifier	current_digit		2707274	0					
ANR	2707474	ArrayIndexing	param [ digit_num ]		2707274	1					
ANR	2707475	Identifier	param		2707274	0					
ANR	2707476	Identifier	digit_num		2707274	1					
ANR	2707477	IfStatement	if ( current_digit >= '0' && current_digit <= '9' )		2707274	2					
ANR	2707478	Condition	current_digit >= '0' && current_digit <= '9'	106:7:3169:3212	2707274	0	True				
ANR	2707479	AndExpression	current_digit >= '0' && current_digit <= '9'		2707274	0		&&			
ANR	2707480	RelationalExpression	current_digit >= '0'		2707274	0		>=			
ANR	2707481	Identifier	current_digit		2707274	0					
ANR	2707482	PrimaryExpression	'0'		2707274	1					
ANR	2707483	RelationalExpression	current_digit <= '9'		2707274	1		<=			
ANR	2707484	Identifier	current_digit		2707274	0					
ANR	2707485	PrimaryExpression	'9'		2707274	1					
ANR	2707486	ExpressionStatement	digit_val = current_digit - '0'	107:4:3219:3250	2707274	1	True				
ANR	2707487	AssignmentExpression	digit_val = current_digit - '0'		2707274	0		=			
ANR	2707488	Identifier	digit_val		2707274	0					
ANR	2707489	AdditiveExpression	current_digit - '0'		2707274	1		-			
ANR	2707490	Identifier	current_digit		2707274	0					
ANR	2707491	PrimaryExpression	'0'		2707274	1					
ANR	2707492	IfStatement	if ( current_digit >= 'A' && current_digit <= 'F' )		2707274	3					
ANR	2707493	Condition	current_digit >= 'A' && current_digit <= 'F'	108:7:3259:3302	2707274	0	True				
ANR	2707494	AndExpression	current_digit >= 'A' && current_digit <= 'F'		2707274	0		&&			
ANR	2707495	RelationalExpression	current_digit >= 'A'		2707274	0		>=			
ANR	2707496	Identifier	current_digit		2707274	0					
ANR	2707497	PrimaryExpression	'A'		2707274	1					
ANR	2707498	RelationalExpression	current_digit <= 'F'		2707274	1		<=			
ANR	2707499	Identifier	current_digit		2707274	0					
ANR	2707500	PrimaryExpression	'F'		2707274	1					
ANR	2707501	ExpressionStatement	digit_val = current_digit - 'A' + 10	109:4:3309:3345	2707274	1	True				
ANR	2707502	AssignmentExpression	digit_val = current_digit - 'A' + 10		2707274	0		=			
ANR	2707503	Identifier	digit_val		2707274	0					
ANR	2707504	AdditiveExpression	current_digit - 'A' + 10		2707274	1		-			
ANR	2707505	Identifier	current_digit		2707274	0					
ANR	2707506	AdditiveExpression	'A' + 10		2707274	1		+			
ANR	2707507	PrimaryExpression	'A'		2707274	0					
ANR	2707508	PrimaryExpression	10		2707274	1					
ANR	2707509	IfStatement	if ( current_digit == '+' && square_brackets == 1 )		2707274	4					
ANR	2707510	Condition	current_digit == '+' && square_brackets == 1	111:7:3359:3402	2707274	0	True				
ANR	2707511	AndExpression	current_digit == '+' && square_brackets == 1		2707274	0		&&			
ANR	2707512	EqualityExpression	current_digit == '+'		2707274	0		==			
ANR	2707513	Identifier	current_digit		2707274	0					
ANR	2707514	PrimaryExpression	'+'		2707274	1					
ANR	2707515	EqualityExpression	square_brackets == 1		2707274	1		==			
ANR	2707516	Identifier	square_brackets		2707274	0					
ANR	2707517	PrimaryExpression	1		2707274	1					
ANR	2707518	CompoundStatement		45:53:1181:1181	2707274	1					
ANR	2707519	ExpressionStatement	reg = get_register_id ( param [ digit_num + 1 ] )	112:4:3411:3454	2707274	0	True				
ANR	2707520	AssignmentExpression	reg = get_register_id ( param [ digit_num + 1 ] )		2707274	0		=			
ANR	2707521	Identifier	reg		2707274	0					
ANR	2707522	CallExpression	get_register_id ( param [ digit_num + 1 ] )		2707274	1					
ANR	2707523	Callee	get_register_id		2707274	0					
ANR	2707524	Identifier	get_register_id		2707274	0					
ANR	2707525	ArgumentList	param [ digit_num + 1 ]		2707274	1					
ANR	2707526	Argument	param [ digit_num + 1 ]		2707274	0					
ANR	2707527	ArrayIndexing	param [ digit_num + 1 ]		2707274	0					
ANR	2707528	Identifier	param		2707274	0					
ANR	2707529	AdditiveExpression	digit_num + 1		2707274	1		+			
ANR	2707530	Identifier	digit_num		2707274	0					
ANR	2707531	PrimaryExpression	1		2707274	1					
ANR	2707532	ExpressionStatement	digit_num ++	113:4:3460:3471	2707274	1	True				
ANR	2707533	PostIncDecOperationExpression	digit_num ++		2707274	0					
ANR	2707534	Identifier	digit_num		2707274	0					
ANR	2707535	IncDec	++		2707274	1					
ANR	2707536	ElseStatement	else		2707274	0					
ANR	2707537	CompoundStatement		48:10:1259:1259	2707274	0					
ANR	2707538	IfStatement	if ( digit_val == - 1 )		2707274	0					
ANR	2707539	Condition	digit_val == - 1	116:8:3520:3534	2707274	0	True				
ANR	2707540	EqualityExpression	digit_val == - 1		2707274	0		==			
ANR	2707541	Identifier	digit_val		2707274	0					
ANR	2707542	UnaryOperationExpression	- 1		2707274	1					
ANR	2707543	UnaryOperator	-		2707274	0					
ANR	2707544	PrimaryExpression	1		2707274	1					
ANR	2707545	CompoundStatement		50:25:1313:1313	2707274	1					
ANR	2707546	ExpressionStatement	"fprintf ( stderr , ""invalid literal\\n"" )"	117:5:3544:3581	2707274	0	True				
ANR	2707547	CallExpression	"fprintf ( stderr , ""invalid literal\\n"" )"		2707274	0					
ANR	2707548	Callee	fprintf		2707274	0					
ANR	2707549	Identifier	fprintf		2707274	0					
ANR	2707550	ArgumentList	stderr		2707274	1					
ANR	2707551	Argument	stderr		2707274	0					
ANR	2707552	Identifier	stderr		2707274	0					
ANR	2707553	Argument	"""invalid literal\\n"""		2707274	1					
ANR	2707554	PrimaryExpression	"""invalid literal\\n"""		2707274	0					
ANR	2707555	ReturnStatement	return 0 ;	118:5:3588:3596	2707274	1	True				
ANR	2707556	PrimaryExpression	0		2707274	0					
ANR	2707557	ExpressionStatement	value = ( value << 4 ) + digit_val	122:4:3647:3679	2707274	1	True				
ANR	2707558	AssignmentExpression	value = ( value << 4 ) + digit_val		2707274	0		=			
ANR	2707559	Identifier	value		2707274	0					
ANR	2707560	AdditiveExpression	( value << 4 ) + digit_val		2707274	1		+			
ANR	2707561	ShiftExpression	value << 4		2707274	0		<<			
ANR	2707562	Identifier	value		2707274	0					
ANR	2707563	PrimaryExpression	4		2707274	1					
ANR	2707564	Identifier	digit_val		2707274	1					
ANR	2707565	IfStatement	if ( value <= 0x1f && square_brackets == 0 )		2707274	6					
ANR	2707566	Condition	value <= 0x1f && square_brackets == 0	126:6:3699:3735	2707274	0	True				
ANR	2707567	AndExpression	value <= 0x1f && square_brackets == 0		2707274	0		&&			
ANR	2707568	RelationalExpression	value <= 0x1f		2707274	0		<=			
ANR	2707569	Identifier	value		2707274	0					
ANR	2707570	PrimaryExpression	0x1f		2707274	1					
ANR	2707571	EqualityExpression	square_brackets == 0		2707274	1		==			
ANR	2707572	Identifier	square_brackets		2707274	0					
ANR	2707573	PrimaryExpression	0		2707274	1					
ANR	2707574	ReturnStatement	return value + 0x20 ;	127:3:3741:3760	2707274	1	True				
ANR	2707575	AdditiveExpression	value + 0x20		2707274	0		+			
ANR	2707576	Identifier	value		2707274	0					
ANR	2707577	PrimaryExpression	0x20		2707274	1					
ANR	2707578	ExpressionStatement	* extra_word_needed = 1	129:2:3768:3790	2707274	7	True				
ANR	2707579	AssignmentExpression	* extra_word_needed = 1		2707274	0		=			
ANR	2707580	UnaryOperationExpression	* extra_word_needed		2707274	0					
ANR	2707581	UnaryOperator	*		2707274	0					
ANR	2707582	Identifier	extra_word_needed		2707274	1					
ANR	2707583	PrimaryExpression	1		2707274	1					
ANR	2707584	ExpressionStatement	* extra_word_value = value	130:2:3794:3819	2707274	8	True				
ANR	2707585	AssignmentExpression	* extra_word_value = value		2707274	0		=			
ANR	2707586	UnaryOperationExpression	* extra_word_value		2707274	0					
ANR	2707587	UnaryOperator	*		2707274	0					
ANR	2707588	Identifier	extra_word_value		2707274	1					
ANR	2707589	Identifier	value		2707274	1					
ANR	2707590	IfStatement	if ( square_brackets == 1 )		2707274	9					
ANR	2707591	Condition	square_brackets == 1	132:6:3830:3849	2707274	0	True				
ANR	2707592	EqualityExpression	square_brackets == 1		2707274	0		==			
ANR	2707593	Identifier	square_brackets		2707274	0					
ANR	2707594	PrimaryExpression	1		2707274	1					
ANR	2707595	CompoundStatement		66:28:1628:1628	2707274	1					
ANR	2707596	IfStatement	if ( reg != - 1 )		2707274	0					
ANR	2707597	Condition	reg != - 1	133:7:3861:3869	2707274	0	True				
ANR	2707598	EqualityExpression	reg != - 1		2707274	0		!=			
ANR	2707599	Identifier	reg		2707274	0					
ANR	2707600	UnaryOperationExpression	- 1		2707274	1					
ANR	2707601	UnaryOperator	-		2707274	0					
ANR	2707602	PrimaryExpression	1		2707274	1					
ANR	2707603	ReturnStatement	return 0x10 + reg ;	134:4:3876:3893	2707274	1	True				
ANR	2707604	AdditiveExpression	0x10 + reg		2707274	0		+			
ANR	2707605	PrimaryExpression	0x10		2707274	0					
ANR	2707606	Identifier	reg		2707274	1					
ANR	2707607	ReturnStatement	return 0x1e ;	135:3:3898:3909	2707274	1	True				
ANR	2707608	PrimaryExpression	0x1e		2707274	0					
ANR	2707609	ReturnStatement	return 0x1f ;	137:2:3917:3928	2707274	10	True				
ANR	2707610	PrimaryExpression	0x1f		2707274	0					
ANR	2707611	IfStatement	if ( param [ 0 ] >= '0' && param [ 0 ] <= '9' )		2707274	6					
ANR	2707612	Condition	param [ 0 ] >= '0' && param [ 0 ] <= '9'	141:5:3982:4015	2707274	0	True				
ANR	2707613	AndExpression	param [ 0 ] >= '0' && param [ 0 ] <= '9'		2707274	0		&&			
ANR	2707614	RelationalExpression	param [ 0 ] >= '0'		2707274	0		>=			
ANR	2707615	ArrayIndexing	param [ 0 ]		2707274	0					
ANR	2707616	Identifier	param		2707274	0					
ANR	2707617	PrimaryExpression	0		2707274	1					
ANR	2707618	PrimaryExpression	'0'		2707274	1					
ANR	2707619	RelationalExpression	param [ 0 ] <= '9'		2707274	1		<=			
ANR	2707620	ArrayIndexing	param [ 0 ]		2707274	0					
ANR	2707621	Identifier	param		2707274	0					
ANR	2707622	PrimaryExpression	0		2707274	1					
ANR	2707623	PrimaryExpression	'9'		2707274	1					
ANR	2707624	CompoundStatement		80:2:1895:1907	2707274	1					
ANR	2707625	IdentifierDeclStatement	ut16 value = 0 ;	143:2:4045:4059	2707274	0	True				
ANR	2707626	IdentifierDecl	value = 0		2707274	0					
ANR	2707627	IdentifierDeclType	ut16		2707274	0					
ANR	2707628	Identifier	value		2707274	1					
ANR	2707629	AssignmentExpression	value = 0		2707274	2		=			
ANR	2707630	Identifier	value		2707274	0					
ANR	2707631	PrimaryExpression	0		2707274	1					
ANR	2707632	IdentifierDeclStatement	int digit_count = strlen ( param ) ;	144:2:4063:4094	2707274	1	True				
ANR	2707633	IdentifierDecl	digit_count = strlen ( param )		2707274	0					
ANR	2707634	IdentifierDeclType	int		2707274	0					
ANR	2707635	Identifier	digit_count		2707274	1					
ANR	2707636	AssignmentExpression	digit_count = strlen ( param )		2707274	2		=			
ANR	2707637	Identifier	digit_count		2707274	0					
ANR	2707638	CallExpression	strlen ( param )		2707274	1					
ANR	2707639	Callee	strlen		2707274	0					
ANR	2707640	Identifier	strlen		2707274	0					
ANR	2707641	ArgumentList	param		2707274	1					
ANR	2707642	Argument	param		2707274	0					
ANR	2707643	Identifier	param		2707274	0					
ANR	2707644	IdentifierDeclStatement	int digit_num = 0 ;	145:2:4098:4115	2707274	2	True				
ANR	2707645	IdentifierDecl	digit_num = 0		2707274	0					
ANR	2707646	IdentifierDeclType	int		2707274	0					
ANR	2707647	Identifier	digit_num		2707274	1					
ANR	2707648	AssignmentExpression	digit_num = 0		2707274	2		=			
ANR	2707649	Identifier	digit_num		2707274	0					
ANR	2707650	PrimaryExpression	0		2707274	1					
ANR	2707651	IdentifierDeclStatement	int reg = - 1 ;	146:2:4119:4131	2707274	3	True				
ANR	2707652	IdentifierDecl	reg = - 1		2707274	0					
ANR	2707653	IdentifierDeclType	int		2707274	0					
ANR	2707654	Identifier	reg		2707274	1					
ANR	2707655	AssignmentExpression	reg = - 1		2707274	2		=			
ANR	2707656	Identifier	reg		2707274	0					
ANR	2707657	UnaryOperationExpression	- 1		2707274	1					
ANR	2707658	UnaryOperator	-		2707274	0					
ANR	2707659	PrimaryExpression	1		2707274	1					
ANR	2707660	ForStatement	for ( digit_num = 0 ; digit_num < digit_count ; digit_num ++ )		2707274	4					
ANR	2707661	ForInit	digit_num = 0 ;	147:7:4140:4153	2707274	0	True				
ANR	2707662	AssignmentExpression	digit_num = 0		2707274	0		=			
ANR	2707663	Identifier	digit_num		2707274	0					
ANR	2707664	PrimaryExpression	0		2707274	1					
ANR	2707665	Condition	digit_num < digit_count	147:22:4155:4177	2707274	1	True				
ANR	2707666	RelationalExpression	digit_num < digit_count		2707274	0		<			
ANR	2707667	Identifier	digit_num		2707274	0					
ANR	2707668	Identifier	digit_count		2707274	1					
ANR	2707669	PostIncDecOperationExpression	digit_num ++	147:47:4180:4190	2707274	2	True				
ANR	2707670	Identifier	digit_num		2707274	0					
ANR	2707671	IncDec	++		2707274	1					
ANR	2707672	CompoundStatement		84:3:2022:2059	2707274	3					
ANR	2707673	IdentifierDeclStatement	int digit_val = - 1 ;	149:3:4223:4241	2707274	0	True				
ANR	2707674	IdentifierDecl	digit_val = - 1		2707274	0					
ANR	2707675	IdentifierDeclType	int		2707274	0					
ANR	2707676	Identifier	digit_val		2707274	1					
ANR	2707677	AssignmentExpression	digit_val = - 1		2707274	2		=			
ANR	2707678	Identifier	digit_val		2707274	0					
ANR	2707679	UnaryOperationExpression	- 1		2707274	1					
ANR	2707680	UnaryOperator	-		2707274	0					
ANR	2707681	PrimaryExpression	1		2707274	1					
ANR	2707682	IdentifierDeclStatement	char current_digit = param [ digit_num ] ;	150:3:4246:4283	2707274	1	True				
ANR	2707683	IdentifierDecl	current_digit = param [ digit_num ]		2707274	0					
ANR	2707684	IdentifierDeclType	char		2707274	0					
ANR	2707685	Identifier	current_digit		2707274	1					
ANR	2707686	AssignmentExpression	current_digit = param [ digit_num ]		2707274	2		=			
ANR	2707687	Identifier	current_digit		2707274	0					
ANR	2707688	ArrayIndexing	param [ digit_num ]		2707274	1					
ANR	2707689	Identifier	param		2707274	0					
ANR	2707690	Identifier	digit_num		2707274	1					
ANR	2707691	IfStatement	if ( current_digit >= '0' && current_digit <= '9' )		2707274	2					
ANR	2707692	Condition	current_digit >= '0' && current_digit <= '9'	151:7:4292:4335	2707274	0	True				
ANR	2707693	AndExpression	current_digit >= '0' && current_digit <= '9'		2707274	0		&&			
ANR	2707694	RelationalExpression	current_digit >= '0'		2707274	0		>=			
ANR	2707695	Identifier	current_digit		2707274	0					
ANR	2707696	PrimaryExpression	'0'		2707274	1					
ANR	2707697	RelationalExpression	current_digit <= '9'		2707274	1		<=			
ANR	2707698	Identifier	current_digit		2707274	0					
ANR	2707699	PrimaryExpression	'9'		2707274	1					
ANR	2707700	ExpressionStatement	digit_val = current_digit - '0'	152:4:4342:4373	2707274	1	True				
ANR	2707701	AssignmentExpression	digit_val = current_digit - '0'		2707274	0		=			
ANR	2707702	Identifier	digit_val		2707274	0					
ANR	2707703	AdditiveExpression	current_digit - '0'		2707274	1		-			
ANR	2707704	Identifier	current_digit		2707274	0					
ANR	2707705	PrimaryExpression	'0'		2707274	1					
ANR	2707706	IfStatement	if ( current_digit == '+' && square_brackets == 1 )		2707274	3					
ANR	2707707	Condition	current_digit == '+' && square_brackets == 1	154:7:4387:4430	2707274	0	True				
ANR	2707708	AndExpression	current_digit == '+' && square_brackets == 1		2707274	0		&&			
ANR	2707709	EqualityExpression	current_digit == '+'		2707274	0		==			
ANR	2707710	Identifier	current_digit		2707274	0					
ANR	2707711	PrimaryExpression	'+'		2707274	1					
ANR	2707712	EqualityExpression	square_brackets == 1		2707274	1		==			
ANR	2707713	Identifier	square_brackets		2707274	0					
ANR	2707714	PrimaryExpression	1		2707274	1					
ANR	2707715	CompoundStatement		88:53:2209:2209	2707274	1					
ANR	2707716	ExpressionStatement	reg = get_register_id ( param [ digit_num + 1 ] )	155:4:4439:4482	2707274	0	True				
ANR	2707717	AssignmentExpression	reg = get_register_id ( param [ digit_num + 1 ] )		2707274	0		=			
ANR	2707718	Identifier	reg		2707274	0					
ANR	2707719	CallExpression	get_register_id ( param [ digit_num + 1 ] )		2707274	1					
ANR	2707720	Callee	get_register_id		2707274	0					
ANR	2707721	Identifier	get_register_id		2707274	0					
ANR	2707722	ArgumentList	param [ digit_num + 1 ]		2707274	1					
ANR	2707723	Argument	param [ digit_num + 1 ]		2707274	0					
ANR	2707724	ArrayIndexing	param [ digit_num + 1 ]		2707274	0					
ANR	2707725	Identifier	param		2707274	0					
ANR	2707726	AdditiveExpression	digit_num + 1		2707274	1		+			
ANR	2707727	Identifier	digit_num		2707274	0					
ANR	2707728	PrimaryExpression	1		2707274	1					
ANR	2707729	ExpressionStatement	digit_num ++	156:4:4488:4499	2707274	1	True				
ANR	2707730	PostIncDecOperationExpression	digit_num ++		2707274	0					
ANR	2707731	Identifier	digit_num		2707274	0					
ANR	2707732	IncDec	++		2707274	1					
ANR	2707733	ElseStatement	else		2707274	0					
ANR	2707734	CompoundStatement		91:10:2287:2287	2707274	0					
ANR	2707735	IfStatement	if ( digit_val == - 1 )		2707274	0					
ANR	2707736	Condition	digit_val == - 1	159:8:4548:4562	2707274	0	True				
ANR	2707737	EqualityExpression	digit_val == - 1		2707274	0		==			
ANR	2707738	Identifier	digit_val		2707274	0					
ANR	2707739	UnaryOperationExpression	- 1		2707274	1					
ANR	2707740	UnaryOperator	-		2707274	0					
ANR	2707741	PrimaryExpression	1		2707274	1					
ANR	2707742	CompoundStatement		93:25:2341:2341	2707274	1					
ANR	2707743	ExpressionStatement	"fprintf ( stderr , ""invalid literal\\n"" )"	160:5:4572:4609	2707274	0	True				
ANR	2707744	CallExpression	"fprintf ( stderr , ""invalid literal\\n"" )"		2707274	0					
ANR	2707745	Callee	fprintf		2707274	0					
ANR	2707746	Identifier	fprintf		2707274	0					
ANR	2707747	ArgumentList	stderr		2707274	1					
ANR	2707748	Argument	stderr		2707274	0					
ANR	2707749	Identifier	stderr		2707274	0					
ANR	2707750	Argument	"""invalid literal\\n"""		2707274	1					
ANR	2707751	PrimaryExpression	"""invalid literal\\n"""		2707274	0					
ANR	2707752	ReturnStatement	return 0 ;	161:5:4616:4624	2707274	1	True				
ANR	2707753	PrimaryExpression	0		2707274	0					
ANR	2707754	ExpressionStatement	value = ( value * 10 ) + digit_val	165:4:4675:4707	2707274	1	True				
ANR	2707755	AssignmentExpression	value = ( value * 10 ) + digit_val		2707274	0		=			
ANR	2707756	Identifier	value		2707274	0					
ANR	2707757	AdditiveExpression	( value * 10 ) + digit_val		2707274	1		+			
ANR	2707758	MultiplicativeExpression	value * 10		2707274	0		*			
ANR	2707759	Identifier	value		2707274	0					
ANR	2707760	PrimaryExpression	10		2707274	1					
ANR	2707761	Identifier	digit_val		2707274	1					
ANR	2707762	IfStatement	if ( value <= 0x1f && square_brackets == 0 )		2707274	5					
ANR	2707763	Condition	value <= 0x1f && square_brackets == 0	168:6:4724:4760	2707274	0	True				
ANR	2707764	AndExpression	value <= 0x1f && square_brackets == 0		2707274	0		&&			
ANR	2707765	RelationalExpression	value <= 0x1f		2707274	0		<=			
ANR	2707766	Identifier	value		2707274	0					
ANR	2707767	PrimaryExpression	0x1f		2707274	1					
ANR	2707768	EqualityExpression	square_brackets == 0		2707274	1		==			
ANR	2707769	Identifier	square_brackets		2707274	0					
ANR	2707770	PrimaryExpression	0		2707274	1					
ANR	2707771	ReturnStatement	return value + 0x20 ;	169:3:4766:4785	2707274	1	True				
ANR	2707772	AdditiveExpression	value + 0x20		2707274	0		+			
ANR	2707773	Identifier	value		2707274	0					
ANR	2707774	PrimaryExpression	0x20		2707274	1					
ANR	2707775	ExpressionStatement	* extra_word_needed = 1	171:2:4793:4815	2707274	6	True				
ANR	2707776	AssignmentExpression	* extra_word_needed = 1		2707274	0		=			
ANR	2707777	UnaryOperationExpression	* extra_word_needed		2707274	0					
ANR	2707778	UnaryOperator	*		2707274	0					
ANR	2707779	Identifier	extra_word_needed		2707274	1					
ANR	2707780	PrimaryExpression	1		2707274	1					
ANR	2707781	ExpressionStatement	* extra_word_value = value	172:2:4819:4844	2707274	7	True				
ANR	2707782	AssignmentExpression	* extra_word_value = value		2707274	0		=			
ANR	2707783	UnaryOperationExpression	* extra_word_value		2707274	0					
ANR	2707784	UnaryOperator	*		2707274	0					
ANR	2707785	Identifier	extra_word_value		2707274	1					
ANR	2707786	Identifier	value		2707274	1					
ANR	2707787	IfStatement	if ( square_brackets == 1 )		2707274	8					
ANR	2707788	Condition	square_brackets == 1	174:6:4855:4874	2707274	0	True				
ANR	2707789	EqualityExpression	square_brackets == 1		2707274	0		==			
ANR	2707790	Identifier	square_brackets		2707274	0					
ANR	2707791	PrimaryExpression	1		2707274	1					
ANR	2707792	CompoundStatement		108:28:2653:2653	2707274	1					
ANR	2707793	IfStatement	if ( reg != - 1 )		2707274	0					
ANR	2707794	Condition	reg != - 1	175:7:4886:4894	2707274	0	True				
ANR	2707795	EqualityExpression	reg != - 1		2707274	0		!=			
ANR	2707796	Identifier	reg		2707274	0					
ANR	2707797	UnaryOperationExpression	- 1		2707274	1					
ANR	2707798	UnaryOperator	-		2707274	0					
ANR	2707799	PrimaryExpression	1		2707274	1					
ANR	2707800	ReturnStatement	return 0x10 + reg ;	176:4:4901:4918	2707274	1	True				
ANR	2707801	AdditiveExpression	0x10 + reg		2707274	0		+			
ANR	2707802	PrimaryExpression	0x10		2707274	0					
ANR	2707803	Identifier	reg		2707274	1					
ANR	2707804	ReturnStatement	return 0x1e ;	177:3:4923:4934	2707274	1	True				
ANR	2707805	PrimaryExpression	0x1e		2707274	0					
ANR	2707806	ReturnStatement	return 0x1f ;	179:2:4942:4953	2707274	9	True				
ANR	2707807	PrimaryExpression	0x1f		2707274	0					
ANR	2707808	IfStatement	if ( param [ 1 ] == 0 )		2707274	7					
ANR	2707809	Condition	param [ 1 ] == 0	183:5:5000:5012	2707274	0	True				
ANR	2707810	EqualityExpression	param [ 1 ] == 0		2707274	0		==			
ANR	2707811	ArrayIndexing	param [ 1 ]		2707274	0					
ANR	2707812	Identifier	param		2707274	0					
ANR	2707813	PrimaryExpression	1		2707274	1					
ANR	2707814	PrimaryExpression	0		2707274	1					
ANR	2707815	CompoundStatement		118:2:2860:2896	2707274	1					
ANR	2707816	IdentifierDeclStatement	ut8 reg = get_register_id ( param [ 0 ] ) ;	184:2:5084:5120	2707274	0	True				
ANR	2707817	IdentifierDecl	reg = get_register_id ( param [ 0 ] )		2707274	0					
ANR	2707818	IdentifierDeclType	ut8		2707274	0					
ANR	2707819	Identifier	reg		2707274	1					
ANR	2707820	AssignmentExpression	reg = get_register_id ( param [ 0 ] )		2707274	2		=			
ANR	2707821	Identifier	reg		2707274	0					
ANR	2707822	CallExpression	get_register_id ( param [ 0 ] )		2707274	1					
ANR	2707823	Callee	get_register_id		2707274	0					
ANR	2707824	Identifier	get_register_id		2707274	0					
ANR	2707825	ArgumentList	param [ 0 ]		2707274	1					
ANR	2707826	Argument	param [ 0 ]		2707274	0					
ANR	2707827	ArrayIndexing	param [ 0 ]		2707274	0					
ANR	2707828	Identifier	param		2707274	0					
ANR	2707829	PrimaryExpression	0		2707274	1					
ANR	2707830	IfStatement	if ( square_brackets == 1 )		2707274	1					
ANR	2707831	Condition	square_brackets == 1	185:6:5128:5147	2707274	0	True				
ANR	2707832	EqualityExpression	square_brackets == 1		2707274	0		==			
ANR	2707833	Identifier	square_brackets		2707274	0					
ANR	2707834	PrimaryExpression	1		2707274	1					
ANR	2707835	ExpressionStatement	reg += 0x08	186:3:5153:5164	2707274	1	True				
ANR	2707836	AssignmentExpression	reg += 0x08		2707274	0		+=			
ANR	2707837	Identifier	reg		2707274	0					
ANR	2707838	PrimaryExpression	0x08		2707274	1					
ANR	2707839	ReturnStatement	return reg ;	187:2:5168:5178	2707274	2	True				
ANR	2707840	Identifier	reg		2707274	0					
ANR	2707841	IfStatement	"if ( ! strncmp ( ""POP"" , param , 3 ) )"		2707274	8					
ANR	2707842	Condition	"! strncmp ( ""POP"" , param , 3 )"	191:5:5221:5246	2707274	0	True				
ANR	2707843	UnaryOperationExpression	"! strncmp ( ""POP"" , param , 3 )"		2707274	0					
ANR	2707844	UnaryOperator	!		2707274	0					
ANR	2707845	CallExpression	"strncmp ( ""POP"" , param , 3 )"		2707274	1					
ANR	2707846	Callee	strncmp		2707274	0					
ANR	2707847	Identifier	strncmp		2707274	0					
ANR	2707848	ArgumentList	"""POP"""		2707274	1					
ANR	2707849	Argument	"""POP"""		2707274	0					
ANR	2707850	PrimaryExpression	"""POP"""		2707274	0					
ANR	2707851	Argument	param		2707274	1					
ANR	2707852	Identifier	param		2707274	0					
ANR	2707853	Argument	3		2707274	2					
ANR	2707854	PrimaryExpression	3		2707274	0					
ANR	2707855	ReturnStatement	return 0x18 ;	191:33:5249:5260	2707274	1	True				
ANR	2707856	PrimaryExpression	0x18		2707274	0					
ANR	2707857	IfStatement	"if ( ! strncmp ( ""PEEK"" , param , 4 ) )"		2707274	9					
ANR	2707858	Condition	"! strncmp ( ""PEEK"" , param , 4 )"	192:5:5267:5293	2707274	0	True				
ANR	2707859	UnaryOperationExpression	"! strncmp ( ""PEEK"" , param , 4 )"		2707274	0					
ANR	2707860	UnaryOperator	!		2707274	0					
ANR	2707861	CallExpression	"strncmp ( ""PEEK"" , param , 4 )"		2707274	1					
ANR	2707862	Callee	strncmp		2707274	0					
ANR	2707863	Identifier	strncmp		2707274	0					
ANR	2707864	ArgumentList	"""PEEK"""		2707274	1					
ANR	2707865	Argument	"""PEEK"""		2707274	0					
ANR	2707866	PrimaryExpression	"""PEEK"""		2707274	0					
ANR	2707867	Argument	param		2707274	1					
ANR	2707868	Identifier	param		2707274	0					
ANR	2707869	Argument	4		2707274	2					
ANR	2707870	PrimaryExpression	4		2707274	0					
ANR	2707871	ReturnStatement	return 0x19 ;	192:34:5296:5307	2707274	1	True				
ANR	2707872	PrimaryExpression	0x19		2707274	0					
ANR	2707873	IfStatement	"if ( ! strncmp ( ""PUSH"" , param , 4 ) )"		2707274	10					
ANR	2707874	Condition	"! strncmp ( ""PUSH"" , param , 4 )"	193:5:5314:5340	2707274	0	True				
ANR	2707875	UnaryOperationExpression	"! strncmp ( ""PUSH"" , param , 4 )"		2707274	0					
ANR	2707876	UnaryOperator	!		2707274	0					
ANR	2707877	CallExpression	"strncmp ( ""PUSH"" , param , 4 )"		2707274	1					
ANR	2707878	Callee	strncmp		2707274	0					
ANR	2707879	Identifier	strncmp		2707274	0					
ANR	2707880	ArgumentList	"""PUSH"""		2707274	1					
ANR	2707881	Argument	"""PUSH"""		2707274	0					
ANR	2707882	PrimaryExpression	"""PUSH"""		2707274	0					
ANR	2707883	Argument	param		2707274	1					
ANR	2707884	Identifier	param		2707274	0					
ANR	2707885	Argument	4		2707274	2					
ANR	2707886	PrimaryExpression	4		2707274	0					
ANR	2707887	ReturnStatement	return 0x1a ;	193:34:5343:5354	2707274	1	True				
ANR	2707888	PrimaryExpression	0x1a		2707274	0					
ANR	2707889	IfStatement	"if ( ! strncmp ( ""SP"" , param , 2 ) )"		2707274	11					
ANR	2707890	Condition	"! strncmp ( ""SP"" , param , 2 )"	194:5:5361:5385	2707274	0	True				
ANR	2707891	UnaryOperationExpression	"! strncmp ( ""SP"" , param , 2 )"		2707274	0					
ANR	2707892	UnaryOperator	!		2707274	0					
ANR	2707893	CallExpression	"strncmp ( ""SP"" , param , 2 )"		2707274	1					
ANR	2707894	Callee	strncmp		2707274	0					
ANR	2707895	Identifier	strncmp		2707274	0					
ANR	2707896	ArgumentList	"""SP"""		2707274	1					
ANR	2707897	Argument	"""SP"""		2707274	0					
ANR	2707898	PrimaryExpression	"""SP"""		2707274	0					
ANR	2707899	Argument	param		2707274	1					
ANR	2707900	Identifier	param		2707274	0					
ANR	2707901	Argument	2		2707274	2					
ANR	2707902	PrimaryExpression	2		2707274	0					
ANR	2707903	ReturnStatement	return 0x1b ;	194:32:5388:5399	2707274	1	True				
ANR	2707904	PrimaryExpression	0x1b		2707274	0					
ANR	2707905	IfStatement	"if ( ! strncmp ( ""PC"" , param , 2 ) )"		2707274	12					
ANR	2707906	Condition	"! strncmp ( ""PC"" , param , 2 )"	195:5:5406:5430	2707274	0	True				
ANR	2707907	UnaryOperationExpression	"! strncmp ( ""PC"" , param , 2 )"		2707274	0					
ANR	2707908	UnaryOperator	!		2707274	0					
ANR	2707909	CallExpression	"strncmp ( ""PC"" , param , 2 )"		2707274	1					
ANR	2707910	Callee	strncmp		2707274	0					
ANR	2707911	Identifier	strncmp		2707274	0					
ANR	2707912	ArgumentList	"""PC"""		2707274	1					
ANR	2707913	Argument	"""PC"""		2707274	0					
ANR	2707914	PrimaryExpression	"""PC"""		2707274	0					
ANR	2707915	Argument	param		2707274	1					
ANR	2707916	Identifier	param		2707274	0					
ANR	2707917	Argument	2		2707274	2					
ANR	2707918	PrimaryExpression	2		2707274	0					
ANR	2707919	ReturnStatement	return 0x1c ;	195:32:5433:5444	2707274	1	True				
ANR	2707920	PrimaryExpression	0x1c		2707274	0					
ANR	2707921	IfStatement	"if ( ! strncmp ( ""O"" , param , 1 ) )"		2707274	13					
ANR	2707922	Condition	"! strncmp ( ""O"" , param , 1 )"	196:5:5451:5474	2707274	0	True				
ANR	2707923	UnaryOperationExpression	"! strncmp ( ""O"" , param , 1 )"		2707274	0					
ANR	2707924	UnaryOperator	!		2707274	0					
ANR	2707925	CallExpression	"strncmp ( ""O"" , param , 1 )"		2707274	1					
ANR	2707926	Callee	strncmp		2707274	0					
ANR	2707927	Identifier	strncmp		2707274	0					
ANR	2707928	ArgumentList	"""O"""		2707274	1					
ANR	2707929	Argument	"""O"""		2707274	0					
ANR	2707930	PrimaryExpression	"""O"""		2707274	0					
ANR	2707931	Argument	param		2707274	1					
ANR	2707932	Identifier	param		2707274	0					
ANR	2707933	Argument	1		2707274	2					
ANR	2707934	PrimaryExpression	1		2707274	0					
ANR	2707935	ReturnStatement	return 0x1d ;	196:31:5477:5488	2707274	1	True				
ANR	2707936	PrimaryExpression	0x1d		2707274	0					
ANR	2707937	ExpressionStatement	* extra_word_needed = 1	199:1:5534:5556	2707274	14	True				
ANR	2707938	AssignmentExpression	* extra_word_needed = 1		2707274	0		=			
ANR	2707939	UnaryOperationExpression	* extra_word_needed		2707274	0					
ANR	2707940	UnaryOperator	*		2707274	0					
ANR	2707941	Identifier	extra_word_needed		2707274	1					
ANR	2707942	PrimaryExpression	1		2707274	1					
ANR	2707943	ExpressionStatement	* extra_word_value = 0	202:1:5673:5694	2707274	15	True				
ANR	2707944	AssignmentExpression	* extra_word_value = 0		2707274	0		=			
ANR	2707945	UnaryOperationExpression	* extra_word_value		2707274	0					
ANR	2707946	UnaryOperator	*		2707274	0					
ANR	2707947	Identifier	extra_word_value		2707274	1					
ANR	2707948	PrimaryExpression	0		2707274	1					
ANR	2707949	ReturnStatement	return 0x1f ;	203:1:5698:5709	2707274	16	True				
ANR	2707950	PrimaryExpression	0x1f		2707274	0					
ANR	2707951	ReturnType	static ut8		2707274	1					
ANR	2707952	Identifier	decode_parameter		2707274	2					
ANR	2707953	ParameterList	"char * param , int * extra_word_needed , ut16 * extra_word_value"		2707274	3					
ANR	2707954	Parameter	char * param	67:28:2162:2172	2707274	0	True				
ANR	2707955	ParameterType	char *		2707274	0					
ANR	2707956	Identifier	param		2707274	1					
ANR	2707957	Parameter	int * extra_word_needed	67:41:2175:2196	2707274	1	True				
ANR	2707958	ParameterType	int *		2707274	0					
ANR	2707959	Identifier	extra_word_needed		2707274	1					
ANR	2707960	Parameter	ut16 * extra_word_value	67:65:2199:2220	2707274	2	True				
ANR	2707961	ParameterType	ut16 *		2707274	0					
ANR	2707962	Identifier	extra_word_value		2707274	1					
ANR	2707963	CFGEntryNode	ENTRY		2707274		True				
ANR	2707964	CFGExitNode	EXIT		2707274		True				
ANR	2707965	Symbol	digit_num		2707274						
ANR	2707966	Symbol	get_register_id		2707274						
ANR	2707967	Symbol	first_sqbracket		2707274						
ANR	2707968	Symbol	* extra_word_value		2707274						
ANR	2707969	Symbol	stderr		2707274						
ANR	2707970	Symbol	current_digit		2707274						
ANR	2707971	Symbol	square_brackets		2707274						
ANR	2707972	Symbol	* param		2707274						
ANR	2707973	Symbol	extra_word_value		2707274						
ANR	2707974	Symbol	strlen		2707274						
ANR	2707975	Symbol	strncmp		2707274						
ANR	2707976	Symbol	digit_count		2707274						
ANR	2707977	Symbol	* strlen		2707274						
ANR	2707978	Symbol	param		2707274						
ANR	2707979	Symbol	reg		2707274						
ANR	2707980	Symbol	* extra_word_needed		2707274						
ANR	2707981	Symbol	* digit_num		2707274						
ANR	2707982	Symbol	last_sqbracket		2707274						
ANR	2707983	Symbol	digit_val		2707274						
ANR	2707984	Symbol	extra_word_needed		2707274						
ANR	2707985	Symbol	value		2707274						
ANR	2707986	Function	dcpu16_assemble	206:0:5714:9233							
ANR	2707987	FunctionDef	"dcpu16_assemble (ut8 * out , const char * unoline)"		2707986	0					
ANR	2707988	CompoundStatement		206:52:5766:9233	2707986	0					
ANR	2707989	IdentifierDeclStatement	"ut16 wordA = 0 , wordB = 0 ;"	207:1:5769:5794	2707986	0	True				
ANR	2707990	IdentifierDecl	wordA = 0		2707986	0					
ANR	2707991	IdentifierDeclType	ut16		2707986	0					
ANR	2707992	Identifier	wordA		2707986	1					
ANR	2707993	AssignmentExpression	wordA = 0		2707986	2		=			
ANR	2707994	Identifier	wordA		2707986	0					
ANR	2707995	PrimaryExpression	0		2707986	1					
ANR	2707996	IdentifierDecl	wordB = 0		2707986	1					
ANR	2707997	IdentifierDeclType	ut16		2707986	0					
ANR	2707998	Identifier	wordB		2707986	1					
ANR	2707999	AssignmentExpression	wordB = 0		2707986	2		=			
ANR	2708000	Identifier	wordB		2707986	0					
ANR	2708001	PrimaryExpression	0		2707986	1					
ANR	2708002	IdentifierDeclStatement	int basic_opcode = 0 ;	208:1:5797:5817	2707986	1	True				
ANR	2708003	IdentifierDecl	basic_opcode = 0		2707986	0					
ANR	2708004	IdentifierDeclType	int		2707986	0					
ANR	2708005	Identifier	basic_opcode		2707986	1					
ANR	2708006	AssignmentExpression	basic_opcode = 0		2707986	2		=			
ANR	2708007	Identifier	basic_opcode		2707986	0					
ANR	2708008	PrimaryExpression	0		2707986	1					
ANR	2708009	IdentifierDeclStatement	int non_basic_opcode = 0 ;	209:1:5820:5844	2707986	2	True				
ANR	2708010	IdentifierDecl	non_basic_opcode = 0		2707986	0					
ANR	2708011	IdentifierDeclType	int		2707986	0					
ANR	2708012	Identifier	non_basic_opcode		2707986	1					
ANR	2708013	AssignmentExpression	non_basic_opcode = 0		2707986	2		=			
ANR	2708014	Identifier	non_basic_opcode		2707986	0					
ANR	2708015	PrimaryExpression	0		2707986	1					
ANR	2708016	IdentifierDeclStatement	"char line [ 256 ] = { 0 } , * param ;"	210:1:5847:5875	2707986	3	True				
ANR	2708017	IdentifierDecl	line [ 256 ] = { 0 }		2707986	0					
ANR	2708018	IdentifierDeclType	char [ 256 ]		2707986	0					
ANR	2708019	Identifier	line		2707986	1					
ANR	2708020	PrimaryExpression	256		2707986	2					
ANR	2708021	AssignmentExpression	line [ 256 ] = { 0 }		2707986	3		=			
ANR	2708022	Identifier	line		2707986	0					
ANR	2708023	InitializerList	0		2707986	1					
ANR	2708024	PrimaryExpression	0		2707986	0					
ANR	2708025	IdentifierDecl	* param		2707986	1					
ANR	2708026	IdentifierDeclType	char *		2707986	0					
ANR	2708027	Identifier	param		2707986	1					
ANR	2708028	IdentifierDeclStatement	int off = 0 ;	211:1:5878:5889	2707986	4	True				
ANR	2708029	IdentifierDecl	off = 0		2707986	0					
ANR	2708030	IdentifierDeclType	int		2707986	0					
ANR	2708031	Identifier	off		2707986	1					
ANR	2708032	AssignmentExpression	off = 0		2707986	2		=			
ANR	2708033	Identifier	off		2707986	0					
ANR	2708034	PrimaryExpression	0		2707986	1					
ANR	2708035	ExpressionStatement	"clean_line ( line , unoline )"	213:1:5906:5932	2707986	5	True				
ANR	2708036	CallExpression	"clean_line ( line , unoline )"		2707986	0					
ANR	2708037	Callee	clean_line		2707986	0					
ANR	2708038	Identifier	clean_line		2707986	0					
ANR	2708039	ArgumentList	line		2707986	1					
ANR	2708040	Argument	line		2707986	0					
ANR	2708041	Identifier	line		2707986	0					
ANR	2708042	Argument	unoline		2707986	1					
ANR	2708043	Identifier	unoline		2707986	0					
ANR	2708044	IfStatement	if ( ! ( * line ) )		2707986	6					
ANR	2708045	Condition	! ( * line )	215:5:5941:5948	2707986	0	True				
ANR	2708046	UnaryOperationExpression	! ( * line )		2707986	0					
ANR	2708047	UnaryOperator	!		2707986	0					
ANR	2708048	UnaryOperationExpression	* line		2707986	1					
ANR	2708049	UnaryOperator	*		2707986	0					
ANR	2708050	Identifier	line		2707986	1					
ANR	2708051	ReturnStatement	return 0 ;	215:15:5951:5959	2707986	1	True				
ANR	2708052	PrimaryExpression	0		2707986	0					
ANR	2708053	IfStatement	if ( strlen ( line ) < 4 )		2707986	7					
ANR	2708054	Condition	strlen ( line ) < 4	216:5:5966:5980	2707986	0	True				
ANR	2708055	RelationalExpression	strlen ( line ) < 4		2707986	0		<			
ANR	2708056	CallExpression	strlen ( line )		2707986	0					
ANR	2708057	Callee	strlen		2707986	0					
ANR	2708058	Identifier	strlen		2707986	0					
ANR	2708059	ArgumentList	line		2707986	1					
ANR	2708060	Argument	line		2707986	0					
ANR	2708061	Identifier	line		2707986	0					
ANR	2708062	PrimaryExpression	4		2707986	1					
ANR	2708063	ReturnStatement	return 0 ;	216:22:5983:5991	2707986	1	True				
ANR	2708064	PrimaryExpression	0		2707986	0					
ANR	2708065	ExpressionStatement	param = line + 3	217:1:5994:6010	2707986	8	True				
ANR	2708066	AssignmentExpression	param = line + 3		2707986	0		=			
ANR	2708067	Identifier	param		2707986	0					
ANR	2708068	AdditiveExpression	line + 3		2707986	1		+			
ANR	2708069	Identifier	line		2707986	0					
ANR	2708070	PrimaryExpression	3		2707986	1					
ANR	2708071	IfStatement	"if ( ! strncmp ( ""SET"" , line , 3 ) )"		2707986	9					
ANR	2708072	Condition	"! strncmp ( ""SET"" , line , 3 )"	221:5:6101:6125	2707986	0	True				
ANR	2708073	UnaryOperationExpression	"! strncmp ( ""SET"" , line , 3 )"		2707986	0					
ANR	2708074	UnaryOperator	!		2707986	0					
ANR	2708075	CallExpression	"strncmp ( ""SET"" , line , 3 )"		2707986	1					
ANR	2708076	Callee	strncmp		2707986	0					
ANR	2708077	Identifier	strncmp		2707986	0					
ANR	2708078	ArgumentList	"""SET"""		2707986	1					
ANR	2708079	Argument	"""SET"""		2707986	0					
ANR	2708080	PrimaryExpression	"""SET"""		2707986	0					
ANR	2708081	Argument	line		2707986	1					
ANR	2708082	Identifier	line		2707986	0					
ANR	2708083	Argument	3		2707986	2					
ANR	2708084	PrimaryExpression	3		2707986	0					
ANR	2708085	ExpressionStatement	basic_opcode = 0x1	221:32:6128:6146	2707986	1	True				
ANR	2708086	AssignmentExpression	basic_opcode = 0x1		2707986	0		=			
ANR	2708087	Identifier	basic_opcode		2707986	0					
ANR	2708088	PrimaryExpression	0x1		2707986	1					
ANR	2708089	ElseStatement	else		2707986	0					
ANR	2708090	IfStatement	"if ( ! strncmp ( ""ADD"" , line , 3 ) )"		2707986	0					
ANR	2708091	Condition	"! strncmp ( ""ADD"" , line , 3 )"	222:10:6158:6182	2707986	0	True				
ANR	2708092	UnaryOperationExpression	"! strncmp ( ""ADD"" , line , 3 )"		2707986	0					
ANR	2708093	UnaryOperator	!		2707986	0					
ANR	2708094	CallExpression	"strncmp ( ""ADD"" , line , 3 )"		2707986	1					
ANR	2708095	Callee	strncmp		2707986	0					
ANR	2708096	Identifier	strncmp		2707986	0					
ANR	2708097	ArgumentList	"""ADD"""		2707986	1					
ANR	2708098	Argument	"""ADD"""		2707986	0					
ANR	2708099	PrimaryExpression	"""ADD"""		2707986	0					
ANR	2708100	Argument	line		2707986	1					
ANR	2708101	Identifier	line		2707986	0					
ANR	2708102	Argument	3		2707986	2					
ANR	2708103	PrimaryExpression	3		2707986	0					
ANR	2708104	ExpressionStatement	basic_opcode = 0x2	222:37:6185:6203	2707986	1	True				
ANR	2708105	AssignmentExpression	basic_opcode = 0x2		2707986	0		=			
ANR	2708106	Identifier	basic_opcode		2707986	0					
ANR	2708107	PrimaryExpression	0x2		2707986	1					
ANR	2708108	ElseStatement	else		2707986	0					
ANR	2708109	IfStatement	"if ( ! strncmp ( ""SUB"" , line , 3 ) )"		2707986	0					
ANR	2708110	Condition	"! strncmp ( ""SUB"" , line , 3 )"	223:10:6215:6239	2707986	0	True				
ANR	2708111	UnaryOperationExpression	"! strncmp ( ""SUB"" , line , 3 )"		2707986	0					
ANR	2708112	UnaryOperator	!		2707986	0					
ANR	2708113	CallExpression	"strncmp ( ""SUB"" , line , 3 )"		2707986	1					
ANR	2708114	Callee	strncmp		2707986	0					
ANR	2708115	Identifier	strncmp		2707986	0					
ANR	2708116	ArgumentList	"""SUB"""		2707986	1					
ANR	2708117	Argument	"""SUB"""		2707986	0					
ANR	2708118	PrimaryExpression	"""SUB"""		2707986	0					
ANR	2708119	Argument	line		2707986	1					
ANR	2708120	Identifier	line		2707986	0					
ANR	2708121	Argument	3		2707986	2					
ANR	2708122	PrimaryExpression	3		2707986	0					
ANR	2708123	ExpressionStatement	basic_opcode = 0x3	223:37:6242:6260	2707986	1	True				
ANR	2708124	AssignmentExpression	basic_opcode = 0x3		2707986	0		=			
ANR	2708125	Identifier	basic_opcode		2707986	0					
ANR	2708126	PrimaryExpression	0x3		2707986	1					
ANR	2708127	ElseStatement	else		2707986	0					
ANR	2708128	IfStatement	"if ( ! strncmp ( ""MUL"" , line , 3 ) )"		2707986	0					
ANR	2708129	Condition	"! strncmp ( ""MUL"" , line , 3 )"	224:10:6272:6296	2707986	0	True				
ANR	2708130	UnaryOperationExpression	"! strncmp ( ""MUL"" , line , 3 )"		2707986	0					
ANR	2708131	UnaryOperator	!		2707986	0					
ANR	2708132	CallExpression	"strncmp ( ""MUL"" , line , 3 )"		2707986	1					
ANR	2708133	Callee	strncmp		2707986	0					
ANR	2708134	Identifier	strncmp		2707986	0					
ANR	2708135	ArgumentList	"""MUL"""		2707986	1					
ANR	2708136	Argument	"""MUL"""		2707986	0					
ANR	2708137	PrimaryExpression	"""MUL"""		2707986	0					
ANR	2708138	Argument	line		2707986	1					
ANR	2708139	Identifier	line		2707986	0					
ANR	2708140	Argument	3		2707986	2					
ANR	2708141	PrimaryExpression	3		2707986	0					
ANR	2708142	ExpressionStatement	basic_opcode = 0x4	224:37:6299:6317	2707986	1	True				
ANR	2708143	AssignmentExpression	basic_opcode = 0x4		2707986	0		=			
ANR	2708144	Identifier	basic_opcode		2707986	0					
ANR	2708145	PrimaryExpression	0x4		2707986	1					
ANR	2708146	ElseStatement	else		2707986	0					
ANR	2708147	IfStatement	"if ( ! strncmp ( ""DIV"" , line , 3 ) )"		2707986	0					
ANR	2708148	Condition	"! strncmp ( ""DIV"" , line , 3 )"	225:10:6329:6353	2707986	0	True				
ANR	2708149	UnaryOperationExpression	"! strncmp ( ""DIV"" , line , 3 )"		2707986	0					
ANR	2708150	UnaryOperator	!		2707986	0					
ANR	2708151	CallExpression	"strncmp ( ""DIV"" , line , 3 )"		2707986	1					
ANR	2708152	Callee	strncmp		2707986	0					
ANR	2708153	Identifier	strncmp		2707986	0					
ANR	2708154	ArgumentList	"""DIV"""		2707986	1					
ANR	2708155	Argument	"""DIV"""		2707986	0					
ANR	2708156	PrimaryExpression	"""DIV"""		2707986	0					
ANR	2708157	Argument	line		2707986	1					
ANR	2708158	Identifier	line		2707986	0					
ANR	2708159	Argument	3		2707986	2					
ANR	2708160	PrimaryExpression	3		2707986	0					
ANR	2708161	ExpressionStatement	basic_opcode = 0x5	225:37:6356:6374	2707986	1	True				
ANR	2708162	AssignmentExpression	basic_opcode = 0x5		2707986	0		=			
ANR	2708163	Identifier	basic_opcode		2707986	0					
ANR	2708164	PrimaryExpression	0x5		2707986	1					
ANR	2708165	ElseStatement	else		2707986	0					
ANR	2708166	IfStatement	"if ( ! strncmp ( ""MOD"" , line , 3 ) )"		2707986	0					
ANR	2708167	Condition	"! strncmp ( ""MOD"" , line , 3 )"	226:10:6386:6410	2707986	0	True				
ANR	2708168	UnaryOperationExpression	"! strncmp ( ""MOD"" , line , 3 )"		2707986	0					
ANR	2708169	UnaryOperator	!		2707986	0					
ANR	2708170	CallExpression	"strncmp ( ""MOD"" , line , 3 )"		2707986	1					
ANR	2708171	Callee	strncmp		2707986	0					
ANR	2708172	Identifier	strncmp		2707986	0					
ANR	2708173	ArgumentList	"""MOD"""		2707986	1					
ANR	2708174	Argument	"""MOD"""		2707986	0					
ANR	2708175	PrimaryExpression	"""MOD"""		2707986	0					
ANR	2708176	Argument	line		2707986	1					
ANR	2708177	Identifier	line		2707986	0					
ANR	2708178	Argument	3		2707986	2					
ANR	2708179	PrimaryExpression	3		2707986	0					
ANR	2708180	ExpressionStatement	basic_opcode = 0x6	226:37:6413:6431	2707986	1	True				
ANR	2708181	AssignmentExpression	basic_opcode = 0x6		2707986	0		=			
ANR	2708182	Identifier	basic_opcode		2707986	0					
ANR	2708183	PrimaryExpression	0x6		2707986	1					
ANR	2708184	ElseStatement	else		2707986	0					
ANR	2708185	IfStatement	"if ( ! strncmp ( ""SHL"" , line , 3 ) )"		2707986	0					
ANR	2708186	Condition	"! strncmp ( ""SHL"" , line , 3 )"	227:10:6443:6467	2707986	0	True				
ANR	2708187	UnaryOperationExpression	"! strncmp ( ""SHL"" , line , 3 )"		2707986	0					
ANR	2708188	UnaryOperator	!		2707986	0					
ANR	2708189	CallExpression	"strncmp ( ""SHL"" , line , 3 )"		2707986	1					
ANR	2708190	Callee	strncmp		2707986	0					
ANR	2708191	Identifier	strncmp		2707986	0					
ANR	2708192	ArgumentList	"""SHL"""		2707986	1					
ANR	2708193	Argument	"""SHL"""		2707986	0					
ANR	2708194	PrimaryExpression	"""SHL"""		2707986	0					
ANR	2708195	Argument	line		2707986	1					
ANR	2708196	Identifier	line		2707986	0					
ANR	2708197	Argument	3		2707986	2					
ANR	2708198	PrimaryExpression	3		2707986	0					
ANR	2708199	ExpressionStatement	basic_opcode = 0x7	227:37:6470:6488	2707986	1	True				
ANR	2708200	AssignmentExpression	basic_opcode = 0x7		2707986	0		=			
ANR	2708201	Identifier	basic_opcode		2707986	0					
ANR	2708202	PrimaryExpression	0x7		2707986	1					
ANR	2708203	ElseStatement	else		2707986	0					
ANR	2708204	IfStatement	"if ( ! strncmp ( ""SHR"" , line , 3 ) )"		2707986	0					
ANR	2708205	Condition	"! strncmp ( ""SHR"" , line , 3 )"	228:10:6500:6524	2707986	0	True				
ANR	2708206	UnaryOperationExpression	"! strncmp ( ""SHR"" , line , 3 )"		2707986	0					
ANR	2708207	UnaryOperator	!		2707986	0					
ANR	2708208	CallExpression	"strncmp ( ""SHR"" , line , 3 )"		2707986	1					
ANR	2708209	Callee	strncmp		2707986	0					
ANR	2708210	Identifier	strncmp		2707986	0					
ANR	2708211	ArgumentList	"""SHR"""		2707986	1					
ANR	2708212	Argument	"""SHR"""		2707986	0					
ANR	2708213	PrimaryExpression	"""SHR"""		2707986	0					
ANR	2708214	Argument	line		2707986	1					
ANR	2708215	Identifier	line		2707986	0					
ANR	2708216	Argument	3		2707986	2					
ANR	2708217	PrimaryExpression	3		2707986	0					
ANR	2708218	ExpressionStatement	basic_opcode = 0x8	228:37:6527:6545	2707986	1	True				
ANR	2708219	AssignmentExpression	basic_opcode = 0x8		2707986	0		=			
ANR	2708220	Identifier	basic_opcode		2707986	0					
ANR	2708221	PrimaryExpression	0x8		2707986	1					
ANR	2708222	ElseStatement	else		2707986	0					
ANR	2708223	IfStatement	"if ( ! strncmp ( ""AND"" , line , 3 ) )"		2707986	0					
ANR	2708224	Condition	"! strncmp ( ""AND"" , line , 3 )"	229:10:6557:6581	2707986	0	True				
ANR	2708225	UnaryOperationExpression	"! strncmp ( ""AND"" , line , 3 )"		2707986	0					
ANR	2708226	UnaryOperator	!		2707986	0					
ANR	2708227	CallExpression	"strncmp ( ""AND"" , line , 3 )"		2707986	1					
ANR	2708228	Callee	strncmp		2707986	0					
ANR	2708229	Identifier	strncmp		2707986	0					
ANR	2708230	ArgumentList	"""AND"""		2707986	1					
ANR	2708231	Argument	"""AND"""		2707986	0					
ANR	2708232	PrimaryExpression	"""AND"""		2707986	0					
ANR	2708233	Argument	line		2707986	1					
ANR	2708234	Identifier	line		2707986	0					
ANR	2708235	Argument	3		2707986	2					
ANR	2708236	PrimaryExpression	3		2707986	0					
ANR	2708237	ExpressionStatement	basic_opcode = 0x9	229:37:6584:6602	2707986	1	True				
ANR	2708238	AssignmentExpression	basic_opcode = 0x9		2707986	0		=			
ANR	2708239	Identifier	basic_opcode		2707986	0					
ANR	2708240	PrimaryExpression	0x9		2707986	1					
ANR	2708241	ElseStatement	else		2707986	0					
ANR	2708242	IfStatement	"if ( ! strncmp ( ""BOR"" , line , 3 ) )"		2707986	0					
ANR	2708243	Condition	"! strncmp ( ""BOR"" , line , 3 )"	230:10:6614:6638	2707986	0	True				
ANR	2708244	UnaryOperationExpression	"! strncmp ( ""BOR"" , line , 3 )"		2707986	0					
ANR	2708245	UnaryOperator	!		2707986	0					
ANR	2708246	CallExpression	"strncmp ( ""BOR"" , line , 3 )"		2707986	1					
ANR	2708247	Callee	strncmp		2707986	0					
ANR	2708248	Identifier	strncmp		2707986	0					
ANR	2708249	ArgumentList	"""BOR"""		2707986	1					
ANR	2708250	Argument	"""BOR"""		2707986	0					
ANR	2708251	PrimaryExpression	"""BOR"""		2707986	0					
ANR	2708252	Argument	line		2707986	1					
ANR	2708253	Identifier	line		2707986	0					
ANR	2708254	Argument	3		2707986	2					
ANR	2708255	PrimaryExpression	3		2707986	0					
ANR	2708256	ExpressionStatement	basic_opcode = 0xA	230:37:6641:6659	2707986	1	True				
ANR	2708257	AssignmentExpression	basic_opcode = 0xA		2707986	0		=			
ANR	2708258	Identifier	basic_opcode		2707986	0					
ANR	2708259	PrimaryExpression	0xA		2707986	1					
ANR	2708260	ElseStatement	else		2707986	0					
ANR	2708261	IfStatement	"if ( ! strncmp ( ""XOR"" , line , 3 ) )"		2707986	0					
ANR	2708262	Condition	"! strncmp ( ""XOR"" , line , 3 )"	231:10:6671:6695	2707986	0	True				
ANR	2708263	UnaryOperationExpression	"! strncmp ( ""XOR"" , line , 3 )"		2707986	0					
ANR	2708264	UnaryOperator	!		2707986	0					
ANR	2708265	CallExpression	"strncmp ( ""XOR"" , line , 3 )"		2707986	1					
ANR	2708266	Callee	strncmp		2707986	0					
ANR	2708267	Identifier	strncmp		2707986	0					
ANR	2708268	ArgumentList	"""XOR"""		2707986	1					
ANR	2708269	Argument	"""XOR"""		2707986	0					
ANR	2708270	PrimaryExpression	"""XOR"""		2707986	0					
ANR	2708271	Argument	line		2707986	1					
ANR	2708272	Identifier	line		2707986	0					
ANR	2708273	Argument	3		2707986	2					
ANR	2708274	PrimaryExpression	3		2707986	0					
ANR	2708275	ExpressionStatement	basic_opcode = 0xB	231:37:6698:6716	2707986	1	True				
ANR	2708276	AssignmentExpression	basic_opcode = 0xB		2707986	0		=			
ANR	2708277	Identifier	basic_opcode		2707986	0					
ANR	2708278	PrimaryExpression	0xB		2707986	1					
ANR	2708279	ElseStatement	else		2707986	0					
ANR	2708280	IfStatement	"if ( ! strncmp ( ""IFE"" , line , 3 ) )"		2707986	0					
ANR	2708281	Condition	"! strncmp ( ""IFE"" , line , 3 )"	232:10:6728:6752	2707986	0	True				
ANR	2708282	UnaryOperationExpression	"! strncmp ( ""IFE"" , line , 3 )"		2707986	0					
ANR	2708283	UnaryOperator	!		2707986	0					
ANR	2708284	CallExpression	"strncmp ( ""IFE"" , line , 3 )"		2707986	1					
ANR	2708285	Callee	strncmp		2707986	0					
ANR	2708286	Identifier	strncmp		2707986	0					
ANR	2708287	ArgumentList	"""IFE"""		2707986	1					
ANR	2708288	Argument	"""IFE"""		2707986	0					
ANR	2708289	PrimaryExpression	"""IFE"""		2707986	0					
ANR	2708290	Argument	line		2707986	1					
ANR	2708291	Identifier	line		2707986	0					
ANR	2708292	Argument	3		2707986	2					
ANR	2708293	PrimaryExpression	3		2707986	0					
ANR	2708294	ExpressionStatement	basic_opcode = 0xC	232:37:6755:6773	2707986	1	True				
ANR	2708295	AssignmentExpression	basic_opcode = 0xC		2707986	0		=			
ANR	2708296	Identifier	basic_opcode		2707986	0					
ANR	2708297	PrimaryExpression	0xC		2707986	1					
ANR	2708298	ElseStatement	else		2707986	0					
ANR	2708299	IfStatement	"if ( ! strncmp ( ""IFN"" , line , 3 ) )"		2707986	0					
ANR	2708300	Condition	"! strncmp ( ""IFN"" , line , 3 )"	233:10:6785:6809	2707986	0	True				
ANR	2708301	UnaryOperationExpression	"! strncmp ( ""IFN"" , line , 3 )"		2707986	0					
ANR	2708302	UnaryOperator	!		2707986	0					
ANR	2708303	CallExpression	"strncmp ( ""IFN"" , line , 3 )"		2707986	1					
ANR	2708304	Callee	strncmp		2707986	0					
ANR	2708305	Identifier	strncmp		2707986	0					
ANR	2708306	ArgumentList	"""IFN"""		2707986	1					
ANR	2708307	Argument	"""IFN"""		2707986	0					
ANR	2708308	PrimaryExpression	"""IFN"""		2707986	0					
ANR	2708309	Argument	line		2707986	1					
ANR	2708310	Identifier	line		2707986	0					
ANR	2708311	Argument	3		2707986	2					
ANR	2708312	PrimaryExpression	3		2707986	0					
ANR	2708313	ExpressionStatement	basic_opcode = 0xD	233:37:6812:6830	2707986	1	True				
ANR	2708314	AssignmentExpression	basic_opcode = 0xD		2707986	0		=			
ANR	2708315	Identifier	basic_opcode		2707986	0					
ANR	2708316	PrimaryExpression	0xD		2707986	1					
ANR	2708317	ElseStatement	else		2707986	0					
ANR	2708318	IfStatement	"if ( ! strncmp ( ""IFG"" , line , 3 ) )"		2707986	0					
ANR	2708319	Condition	"! strncmp ( ""IFG"" , line , 3 )"	234:10:6842:6866	2707986	0	True				
ANR	2708320	UnaryOperationExpression	"! strncmp ( ""IFG"" , line , 3 )"		2707986	0					
ANR	2708321	UnaryOperator	!		2707986	0					
ANR	2708322	CallExpression	"strncmp ( ""IFG"" , line , 3 )"		2707986	1					
ANR	2708323	Callee	strncmp		2707986	0					
ANR	2708324	Identifier	strncmp		2707986	0					
ANR	2708325	ArgumentList	"""IFG"""		2707986	1					
ANR	2708326	Argument	"""IFG"""		2707986	0					
ANR	2708327	PrimaryExpression	"""IFG"""		2707986	0					
ANR	2708328	Argument	line		2707986	1					
ANR	2708329	Identifier	line		2707986	0					
ANR	2708330	Argument	3		2707986	2					
ANR	2708331	PrimaryExpression	3		2707986	0					
ANR	2708332	ExpressionStatement	basic_opcode = 0xE	234:37:6869:6887	2707986	1	True				
ANR	2708333	AssignmentExpression	basic_opcode = 0xE		2707986	0		=			
ANR	2708334	Identifier	basic_opcode		2707986	0					
ANR	2708335	PrimaryExpression	0xE		2707986	1					
ANR	2708336	ElseStatement	else		2707986	0					
ANR	2708337	IfStatement	"if ( ! strncmp ( ""IFB"" , line , 3 ) )"		2707986	0					
ANR	2708338	Condition	"! strncmp ( ""IFB"" , line , 3 )"	235:10:6899:6923	2707986	0	True				
ANR	2708339	UnaryOperationExpression	"! strncmp ( ""IFB"" , line , 3 )"		2707986	0					
ANR	2708340	UnaryOperator	!		2707986	0					
ANR	2708341	CallExpression	"strncmp ( ""IFB"" , line , 3 )"		2707986	1					
ANR	2708342	Callee	strncmp		2707986	0					
ANR	2708343	Identifier	strncmp		2707986	0					
ANR	2708344	ArgumentList	"""IFB"""		2707986	1					
ANR	2708345	Argument	"""IFB"""		2707986	0					
ANR	2708346	PrimaryExpression	"""IFB"""		2707986	0					
ANR	2708347	Argument	line		2707986	1					
ANR	2708348	Identifier	line		2707986	0					
ANR	2708349	Argument	3		2707986	2					
ANR	2708350	PrimaryExpression	3		2707986	0					
ANR	2708351	ExpressionStatement	basic_opcode = 0xF	235:37:6926:6944	2707986	1	True				
ANR	2708352	AssignmentExpression	basic_opcode = 0xF		2707986	0		=			
ANR	2708353	Identifier	basic_opcode		2707986	0					
ANR	2708354	PrimaryExpression	0xF		2707986	1					
ANR	2708355	IfStatement	if ( basic_opcode == 0 )		2707986	10					
ANR	2708356	Condition	basic_opcode == 0	238:5:6983:6999	2707986	0	True				
ANR	2708357	EqualityExpression	basic_opcode == 0		2707986	0		==			
ANR	2708358	Identifier	basic_opcode		2707986	0					
ANR	2708359	PrimaryExpression	0		2707986	1					
ANR	2708360	CompoundStatement		33:24:1235:1235	2707986	1					
ANR	2708361	IfStatement	"if ( ! strncmp ( ""JSR"" , line , 3 ) )"		2707986	0					
ANR	2708362	Condition	"! strncmp ( ""JSR"" , line , 3 )"	239:6:7010:7034	2707986	0	True				
ANR	2708363	UnaryOperationExpression	"! strncmp ( ""JSR"" , line , 3 )"		2707986	0					
ANR	2708364	UnaryOperator	!		2707986	0					
ANR	2708365	CallExpression	"strncmp ( ""JSR"" , line , 3 )"		2707986	1					
ANR	2708366	Callee	strncmp		2707986	0					
ANR	2708367	Identifier	strncmp		2707986	0					
ANR	2708368	ArgumentList	"""JSR"""		2707986	1					
ANR	2708369	Argument	"""JSR"""		2707986	0					
ANR	2708370	PrimaryExpression	"""JSR"""		2707986	0					
ANR	2708371	Argument	line		2707986	1					
ANR	2708372	Identifier	line		2707986	0					
ANR	2708373	Argument	3		2707986	2					
ANR	2708374	PrimaryExpression	3		2707986	0					
ANR	2708375	CompoundStatement		34:33:1270:1270	2707986	1					
ANR	2708376	ExpressionStatement	non_basic_opcode = 0x1	240:3:7042:7064	2707986	0	True				
ANR	2708377	AssignmentExpression	non_basic_opcode = 0x1		2707986	0		=			
ANR	2708378	Identifier	non_basic_opcode		2707986	0					
ANR	2708379	PrimaryExpression	0x1		2707986	1					
ANR	2708380	ElseStatement	else		2707986	0					
ANR	2708381	CompoundStatement		36:9:1308:1308	2707986	0					
ANR	2708382	ExpressionStatement	"fprintf ( stderr , ""Unknown instruction\\n"" )"	242:3:7080:7121	2707986	0	True				
ANR	2708383	CallExpression	"fprintf ( stderr , ""Unknown instruction\\n"" )"		2707986	0					
ANR	2708384	Callee	fprintf		2707986	0					
ANR	2708385	Identifier	fprintf		2707986	0					
ANR	2708386	ArgumentList	stderr		2707986	1					
ANR	2708387	Argument	stderr		2707986	0					
ANR	2708388	Identifier	stderr		2707986	0					
ANR	2708389	Argument	"""Unknown instruction\\n"""		2707986	1					
ANR	2708390	PrimaryExpression	"""Unknown instruction\\n"""		2707986	0					
ANR	2708391	ReturnStatement	return - 1 ;	243:3:7126:7135	2707986	1	True				
ANR	2708392	UnaryOperationExpression	- 1		2707986	0					
ANR	2708393	UnaryOperator	-		2707986	0					
ANR	2708394	PrimaryExpression	1		2707986	1					
ANR	2708395	IfStatement	if ( basic_opcode != 0 )		2707986	11					
ANR	2708396	Condition	basic_opcode != 0	248:5:7184:7200	2707986	0	True				
ANR	2708397	EqualityExpression	basic_opcode != 0		2707986	0		!=			
ANR	2708398	Identifier	basic_opcode		2707986	0					
ANR	2708399	PrimaryExpression	0		2707986	1					
ANR	2708400	CompoundStatement		47:2:1492:1502	2707986	1					
ANR	2708401	IdentifierDeclStatement	"ut8 paramA = 0 , paramB = 0 ;"	249:2:7207:7233	2707986	0	True				
ANR	2708402	IdentifierDecl	paramA = 0		2707986	0					
ANR	2708403	IdentifierDeclType	ut8		2707986	0					
ANR	2708404	Identifier	paramA		2707986	1					
ANR	2708405	AssignmentExpression	paramA = 0		2707986	2		=			
ANR	2708406	Identifier	paramA		2707986	0					
ANR	2708407	PrimaryExpression	0		2707986	1					
ANR	2708408	IdentifierDecl	paramB = 0		2707986	1					
ANR	2708409	IdentifierDeclType	ut8		2707986	0					
ANR	2708410	Identifier	paramB		2707986	1					
ANR	2708411	AssignmentExpression	paramB = 0		2707986	2		=			
ANR	2708412	Identifier	paramB		2707986	0					
ANR	2708413	PrimaryExpression	0		2707986	1					
ANR	2708414	IdentifierDeclStatement	int cn = 0 ;	252:2:7259:7269	2707986	1	True				
ANR	2708415	IdentifierDecl	cn = 0		2707986	0					
ANR	2708416	IdentifierDeclType	int		2707986	0					
ANR	2708417	Identifier	cn		2707986	1					
ANR	2708418	AssignmentExpression	cn = 0		2707986	2		=			
ANR	2708419	Identifier	cn		2707986	0					
ANR	2708420	PrimaryExpression	0		2707986	1					
ANR	2708421	WhileStatement	"while ( cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0 )"		2707986	2					
ANR	2708422	Condition	"cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"	253:9:7280:7376	2707986	0	True				
ANR	2708423	AndExpression	"cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"		2707986	0		&&			
ANR	2708424	RelationalExpression	cn < 256		2707986	0		<			
ANR	2708425	Identifier	cn		2707986	0					
ANR	2708426	PrimaryExpression	256		2707986	1					
ANR	2708427	AndExpression	"param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"		2707986	1		&&			
ANR	2708428	EqualityExpression	"param [ cn ] != ','"		2707986	0		!=			
ANR	2708429	ArrayIndexing	param [ cn ]		2707986	0					
ANR	2708430	Identifier	param		2707986	0					
ANR	2708431	Identifier	cn		2707986	1					
ANR	2708432	PrimaryExpression	"','"		2707986	1					
ANR	2708433	AndExpression	param [ cn ] != '\\n' && param [ cn ] != 0		2707986	1		&&			
ANR	2708434	EqualityExpression	param [ cn ] != '\\n'		2707986	0		!=			
ANR	2708435	ArrayIndexing	param [ cn ]		2707986	0					
ANR	2708436	Identifier	param		2707986	0					
ANR	2708437	Identifier	cn		2707986	1					
ANR	2708438	PrimaryExpression	'\\n'		2707986	1					
ANR	2708439	EqualityExpression	param [ cn ] != 0		2707986	1		!=			
ANR	2708440	ArrayIndexing	param [ cn ]		2707986	0					
ANR	2708441	Identifier	param		2707986	0					
ANR	2708442	Identifier	cn		2707986	1					
ANR	2708443	PrimaryExpression	0		2707986	1					
ANR	2708444	ExpressionStatement	cn ++	257:3:7382:7386	2707986	1	True				
ANR	2708445	PostIncDecOperationExpression	cn ++		2707986	0					
ANR	2708446	Identifier	cn		2707986	0					
ANR	2708447	IncDec	++		2707986	1					
ANR	2708448	IfStatement	"if ( param [ cn ] == ',' )"		2707986	3					
ANR	2708449	Condition	"param [ cn ] == ','"	259:6:7398:7413	2707986	0	True				
ANR	2708450	EqualityExpression	"param [ cn ] == ','"		2707986	0		==			
ANR	2708451	ArrayIndexing	param [ cn ]		2707986	0					
ANR	2708452	Identifier	param		2707986	0					
ANR	2708453	Identifier	cn		2707986	1					
ANR	2708454	PrimaryExpression	"','"		2707986	1					
ANR	2708455	CompoundStatement		58:3:1712:1725	2707986	1					
ANR	2708456	IdentifierDeclStatement	ut16 first_word ;	260:3:7421:7436	2707986	0	True				
ANR	2708457	IdentifierDecl	first_word		2707986	0					
ANR	2708458	IdentifierDeclType	ut16		2707986	0					
ANR	2708459	Identifier	first_word		2707986	1					
ANR	2708460	IdentifierDeclStatement	int extraA = 0 ;	261:3:7441:7455	2707986	1	True				
ANR	2708461	IdentifierDecl	extraA = 0		2707986	0					
ANR	2708462	IdentifierDeclType	int		2707986	0					
ANR	2708463	Identifier	extraA		2707986	1					
ANR	2708464	AssignmentExpression	extraA = 0		2707986	2		=			
ANR	2708465	Identifier	extraA		2707986	0					
ANR	2708466	PrimaryExpression	0		2707986	1					
ANR	2708467	IdentifierDeclStatement	int extraB = 0 ;	262:3:7460:7474	2707986	2	True				
ANR	2708468	IdentifierDecl	extraB = 0		2707986	0					
ANR	2708469	IdentifierDeclType	int		2707986	0					
ANR	2708470	Identifier	extraB		2707986	1					
ANR	2708471	AssignmentExpression	extraB = 0		2707986	2		=			
ANR	2708472	Identifier	extraB		2707986	0					
ANR	2708473	PrimaryExpression	0		2707986	1					
ANR	2708474	IdentifierDeclStatement	"char * pa , * pb ;"	263:3:7479:7492	2707986	3	True				
ANR	2708475	IdentifierDecl	* pa		2707986	0					
ANR	2708476	IdentifierDeclType	char *		2707986	0					
ANR	2708477	Identifier	pa		2707986	1					
ANR	2708478	IdentifierDecl	* pb		2707986	1					
ANR	2708479	IdentifierDeclType	char *		2707986	0					
ANR	2708480	Identifier	pb		2707986	1					
ANR	2708481	ExpressionStatement	param [ cn ] = 0	265:3:7540:7553	2707986	4	True				
ANR	2708482	AssignmentExpression	param [ cn ] = 0		2707986	0		=			
ANR	2708483	ArrayIndexing	param [ cn ]		2707986	0					
ANR	2708484	Identifier	param		2707986	0					
ANR	2708485	Identifier	cn		2707986	1					
ANR	2708486	PrimaryExpression	0		2707986	1					
ANR	2708487	ExpressionStatement	pa = param	266:3:7558:7568	2707986	5	True				
ANR	2708488	AssignmentExpression	pa = param		2707986	0		=			
ANR	2708489	Identifier	pa		2707986	0					
ANR	2708490	Identifier	param		2707986	1					
ANR	2708491	ExpressionStatement	pb = param + cn + 1	267:3:7573:7592	2707986	6	True				
ANR	2708492	AssignmentExpression	pb = param + cn + 1		2707986	0		=			
ANR	2708493	Identifier	pb		2707986	0					
ANR	2708494	AdditiveExpression	param + cn + 1		2707986	1		+			
ANR	2708495	Identifier	param		2707986	0					
ANR	2708496	AdditiveExpression	cn + 1		2707986	1		+			
ANR	2708497	Identifier	cn		2707986	0					
ANR	2708498	PrimaryExpression	1		2707986	1					
ANR	2708499	ExpressionStatement	"paramA = decode_parameter ( pa , & extraA , & wordA )"	273:3:7696:7743	2707986	7	True				
ANR	2708500	AssignmentExpression	"paramA = decode_parameter ( pa , & extraA , & wordA )"		2707986	0		=			
ANR	2708501	Identifier	paramA		2707986	0					
ANR	2708502	CallExpression	"decode_parameter ( pa , & extraA , & wordA )"		2707986	1					
ANR	2708503	Callee	decode_parameter		2707986	0					
ANR	2708504	Identifier	decode_parameter		2707986	0					
ANR	2708505	ArgumentList	pa		2707986	1					
ANR	2708506	Argument	pa		2707986	0					
ANR	2708507	Identifier	pa		2707986	0					
ANR	2708508	Argument	& extraA		2707986	1					
ANR	2708509	UnaryOperationExpression	& extraA		2707986	0					
ANR	2708510	UnaryOperator	&		2707986	0					
ANR	2708511	Identifier	extraA		2707986	1					
ANR	2708512	Argument	& wordA		2707986	2					
ANR	2708513	UnaryOperationExpression	& wordA		2707986	0					
ANR	2708514	UnaryOperator	&		2707986	0					
ANR	2708515	Identifier	wordA		2707986	1					
ANR	2708516	ExpressionStatement	"paramB = decode_parameter ( pb , & extraB , & wordB )"	277:3:7815:7861	2707986	8	True				
ANR	2708517	AssignmentExpression	"paramB = decode_parameter ( pb , & extraB , & wordB )"		2707986	0		=			
ANR	2708518	Identifier	paramB		2707986	0					
ANR	2708519	CallExpression	"decode_parameter ( pb , & extraB , & wordB )"		2707986	1					
ANR	2708520	Callee	decode_parameter		2707986	0					
ANR	2708521	Identifier	decode_parameter		2707986	0					
ANR	2708522	ArgumentList	pb		2707986	1					
ANR	2708523	Argument	pb		2707986	0					
ANR	2708524	Identifier	pb		2707986	0					
ANR	2708525	Argument	& extraB		2707986	1					
ANR	2708526	UnaryOperationExpression	& extraB		2707986	0					
ANR	2708527	UnaryOperator	&		2707986	0					
ANR	2708528	Identifier	extraB		2707986	1					
ANR	2708529	Argument	& wordB		2707986	2					
ANR	2708530	UnaryOperationExpression	& wordB		2707986	0					
ANR	2708531	UnaryOperator	&		2707986	0					
ANR	2708532	Identifier	wordB		2707986	1					
ANR	2708533	ExpressionStatement	first_word = ( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )	281:3:7945:8029	2707986	9	True				
ANR	2708534	AssignmentExpression	first_word = ( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	0		=			
ANR	2708535	Identifier	first_word		2707986	0					
ANR	2708536	InclusiveOrExpression	( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	1		|			
ANR	2708537	ShiftExpression	( paramB & 0x3F ) << 10		2707986	0		<<			
ANR	2708538	BitAndExpression	paramB & 0x3F		2707986	0		&			
ANR	2708539	Identifier	paramB		2707986	0					
ANR	2708540	PrimaryExpression	0x3F		2707986	1					
ANR	2708541	PrimaryExpression	10		2707986	1					
ANR	2708542	InclusiveOrExpression	( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	1		|			
ANR	2708543	ShiftExpression	( paramA & 0x3F ) << 4		2707986	0		<<			
ANR	2708544	BitAndExpression	paramA & 0x3F		2707986	0		&			
ANR	2708545	Identifier	paramA		2707986	0					
ANR	2708546	PrimaryExpression	0x3F		2707986	1					
ANR	2708547	PrimaryExpression	4		2707986	1					
ANR	2708548	BitAndExpression	basic_opcode & 0xF		2707986	1		&			
ANR	2708549	Identifier	basic_opcode		2707986	0					
ANR	2708550	PrimaryExpression	0xF		2707986	1					
ANR	2708551	ExpressionStatement	"memcpy ( out , & first_word , 2 )"	285:3:8068:8096	2707986	10	True				
ANR	2708552	CallExpression	"memcpy ( out , & first_word , 2 )"		2707986	0					
ANR	2708553	Callee	memcpy		2707986	0					
ANR	2708554	Identifier	memcpy		2707986	0					
ANR	2708555	ArgumentList	out		2707986	1					
ANR	2708556	Argument	out		2707986	0					
ANR	2708557	Identifier	out		2707986	0					
ANR	2708558	Argument	& first_word		2707986	1					
ANR	2708559	UnaryOperationExpression	& first_word		2707986	0					
ANR	2708560	UnaryOperator	&		2707986	0					
ANR	2708561	Identifier	first_word		2707986	1					
ANR	2708562	Argument	2		2707986	2					
ANR	2708563	PrimaryExpression	2		2707986	0					
ANR	2708564	IfStatement	if ( extraA == 1 )		2707986	11					
ANR	2708565	Condition	extraA == 1	286:7:8105:8115	2707986	0	True				
ANR	2708566	EqualityExpression	extraA == 1		2707986	0		==			
ANR	2708567	Identifier	extraA		2707986	0					
ANR	2708568	PrimaryExpression	1		2707986	1					
ANR	2708569	CompoundStatement		81:20:2351:2351	2707986	1					
ANR	2708570	ExpressionStatement	"memcpy ( out + 2 , & wordA , 2 )"	287:4:8124:8149	2707986	0	True				
ANR	2708571	CallExpression	"memcpy ( out + 2 , & wordA , 2 )"		2707986	0					
ANR	2708572	Callee	memcpy		2707986	0					
ANR	2708573	Identifier	memcpy		2707986	0					
ANR	2708574	ArgumentList	out + 2		2707986	1					
ANR	2708575	Argument	out + 2		2707986	0					
ANR	2708576	AdditiveExpression	out + 2		2707986	0		+			
ANR	2708577	Identifier	out		2707986	0					
ANR	2708578	PrimaryExpression	2		2707986	1					
ANR	2708579	Argument	& wordA		2707986	1					
ANR	2708580	UnaryOperationExpression	& wordA		2707986	0					
ANR	2708581	UnaryOperator	&		2707986	0					
ANR	2708582	Identifier	wordA		2707986	1					
ANR	2708583	Argument	2		2707986	2					
ANR	2708584	PrimaryExpression	2		2707986	0					
ANR	2708585	ExpressionStatement	off = 4	288:4:8155:8162	2707986	1	True				
ANR	2708586	AssignmentExpression	off = 4		2707986	0		=			
ANR	2708587	Identifier	off		2707986	0					
ANR	2708588	PrimaryExpression	4		2707986	1					
ANR	2708589	ElseStatement	else		2707986	0					
ANR	2708590	ExpressionStatement	off = 2	289:10:8174:8181	2707986	0	True				
ANR	2708591	AssignmentExpression	off = 2		2707986	0		=			
ANR	2708592	Identifier	off		2707986	0					
ANR	2708593	PrimaryExpression	2		2707986	1					
ANR	2708594	IfStatement	if ( extraB == 1 )		2707986	12					
ANR	2708595	Condition	extraB == 1	290:7:8190:8200	2707986	0	True				
ANR	2708596	EqualityExpression	extraB == 1		2707986	0		==			
ANR	2708597	Identifier	extraB		2707986	0					
ANR	2708598	PrimaryExpression	1		2707986	1					
ANR	2708599	CompoundStatement		85:20:2436:2436	2707986	1					
ANR	2708600	ExpressionStatement	"memcpy ( out + off , & wordB , 2 )"	291:4:8209:8236	2707986	0	True				
ANR	2708601	CallExpression	"memcpy ( out + off , & wordB , 2 )"		2707986	0					
ANR	2708602	Callee	memcpy		2707986	0					
ANR	2708603	Identifier	memcpy		2707986	0					
ANR	2708604	ArgumentList	out + off		2707986	1					
ANR	2708605	Argument	out + off		2707986	0					
ANR	2708606	AdditiveExpression	out + off		2707986	0		+			
ANR	2708607	Identifier	out		2707986	0					
ANR	2708608	Identifier	off		2707986	1					
ANR	2708609	Argument	& wordB		2707986	1					
ANR	2708610	UnaryOperationExpression	& wordB		2707986	0					
ANR	2708611	UnaryOperator	&		2707986	0					
ANR	2708612	Identifier	wordB		2707986	1					
ANR	2708613	Argument	2		2707986	2					
ANR	2708614	PrimaryExpression	2		2707986	0					
ANR	2708615	ExpressionStatement	off += 2	292:4:8242:8250	2707986	1	True				
ANR	2708616	AssignmentExpression	off += 2		2707986	0		+=			
ANR	2708617	Identifier	off		2707986	0					
ANR	2708618	PrimaryExpression	2		2707986	1					
ANR	2708619	ElseStatement	else		2707986	0					
ANR	2708620	CompoundStatement		103:9:2798:2798	2707986	0					
ANR	2708621	ExpressionStatement	"fprintf ( stderr , ""Missing comma\\n"" )"	309:3:8570:8605	2707986	0	True				
ANR	2708622	CallExpression	"fprintf ( stderr , ""Missing comma\\n"" )"		2707986	0					
ANR	2708623	Callee	fprintf		2707986	0					
ANR	2708624	Identifier	fprintf		2707986	0					
ANR	2708625	ArgumentList	stderr		2707986	1					
ANR	2708626	Argument	stderr		2707986	0					
ANR	2708627	Identifier	stderr		2707986	0					
ANR	2708628	Argument	"""Missing comma\\n"""		2707986	1					
ANR	2708629	PrimaryExpression	"""Missing comma\\n"""		2707986	0					
ANR	2708630	ReturnStatement	return - 1 ;	310:3:8610:8619	2707986	1	True				
ANR	2708631	UnaryOperationExpression	- 1		2707986	0					
ANR	2708632	UnaryOperator	-		2707986	0					
ANR	2708633	PrimaryExpression	1		2707986	1					
ANR	2708634	IfStatement	if ( non_basic_opcode == 0x1 )		2707986	12					
ANR	2708635	Condition	non_basic_opcode == 0x1	315:5:8665:8687	2707986	0	True				
ANR	2708636	EqualityExpression	non_basic_opcode == 0x1		2707986	0		==			
ANR	2708637	Identifier	non_basic_opcode		2707986	0					
ANR	2708638	PrimaryExpression	0x1		2707986	1					
ANR	2708639	CompoundStatement		113:2:2985:3034	2707986	1					
ANR	2708640	IdentifierDeclStatement	int extraX = 0 ;	316:2:8704:8718	2707986	0	True				
ANR	2708641	IdentifierDecl	extraX = 0		2707986	0					
ANR	2708642	IdentifierDeclType	int		2707986	0					
ANR	2708643	Identifier	extraX		2707986	1					
ANR	2708644	AssignmentExpression	extraX = 0		2707986	2		=			
ANR	2708645	Identifier	extraX		2707986	0					
ANR	2708646	PrimaryExpression	0		2707986	1					
ANR	2708647	IdentifierDeclStatement	"ut16 first_word , wordX = 0 ;"	317:2:8722:8748	2707986	1	True				
ANR	2708648	IdentifierDecl	first_word		2707986	0					
ANR	2708649	IdentifierDeclType	ut16		2707986	0					
ANR	2708650	Identifier	first_word		2707986	1					
ANR	2708651	IdentifierDecl	wordX = 0		2707986	1					
ANR	2708652	IdentifierDeclType	ut16		2707986	0					
ANR	2708653	Identifier	wordX		2707986	1					
ANR	2708654	AssignmentExpression	wordX = 0		2707986	2		=			
ANR	2708655	Identifier	wordX		2707986	0					
ANR	2708656	PrimaryExpression	0		2707986	1					
ANR	2708657	IdentifierDeclStatement	"ut8 p = decode_parameter ( param , & extraX , & wordX ) ;"	318:2:8752:8801	2707986	2	True				
ANR	2708658	IdentifierDecl	"p = decode_parameter ( param , & extraX , & wordX )"		2707986	0					
ANR	2708659	IdentifierDeclType	ut8		2707986	0					
ANR	2708660	Identifier	p		2707986	1					
ANR	2708661	AssignmentExpression	"p = decode_parameter ( param , & extraX , & wordX )"		2707986	2		=			
ANR	2708662	Identifier	p		2707986	0					
ANR	2708663	CallExpression	"decode_parameter ( param , & extraX , & wordX )"		2707986	1					
ANR	2708664	Callee	decode_parameter		2707986	0					
ANR	2708665	Identifier	decode_parameter		2707986	0					
ANR	2708666	ArgumentList	param		2707986	1					
ANR	2708667	Argument	param		2707986	0					
ANR	2708668	Identifier	param		2707986	0					
ANR	2708669	Argument	& extraX		2707986	1					
ANR	2708670	UnaryOperationExpression	& extraX		2707986	0					
ANR	2708671	UnaryOperator	&		2707986	0					
ANR	2708672	Identifier	extraX		2707986	1					
ANR	2708673	Argument	& wordX		2707986	2					
ANR	2708674	UnaryOperationExpression	& wordX		2707986	0					
ANR	2708675	UnaryOperator	&		2707986	0					
ANR	2708676	Identifier	wordX		2707986	1					
ANR	2708677	ExpressionStatement	first_word = ( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )	320:2:8806:8905	2707986	3	True				
ANR	2708678	AssignmentExpression	first_word = ( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	0		=			
ANR	2708679	Identifier	first_word		2707986	0					
ANR	2708680	InclusiveOrExpression	( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	1		|			
ANR	2708681	ShiftExpression	( p & 0x3F ) << 10		2707986	0		<<			
ANR	2708682	BitAndExpression	p & 0x3F		2707986	0		&			
ANR	2708683	Identifier	p		2707986	0					
ANR	2708684	PrimaryExpression	0x3F		2707986	1					
ANR	2708685	PrimaryExpression	10		2707986	1					
ANR	2708686	InclusiveOrExpression	( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		2707986	1		|			
ANR	2708687	ShiftExpression	( non_basic_opcode & 0x3F ) << 4		2707986	0		<<			
ANR	2708688	BitAndExpression	non_basic_opcode & 0x3F		2707986	0		&			
ANR	2708689	Identifier	non_basic_opcode		2707986	0					
ANR	2708690	PrimaryExpression	0x3F		2707986	1					
ANR	2708691	PrimaryExpression	4		2707986	1					
ANR	2708692	BitAndExpression	basic_opcode & 0xF		2707986	1		&			
ANR	2708693	Identifier	basic_opcode		2707986	0					
ANR	2708694	PrimaryExpression	0xF		2707986	1					
ANR	2708695	ExpressionStatement	"memcpy ( out , & first_word , 2 )"	324:2:8920:8948	2707986	4	True				
ANR	2708696	CallExpression	"memcpy ( out , & first_word , 2 )"		2707986	0					
ANR	2708697	Callee	memcpy		2707986	0					
ANR	2708698	Identifier	memcpy		2707986	0					
ANR	2708699	ArgumentList	out		2707986	1					
ANR	2708700	Argument	out		2707986	0					
ANR	2708701	Identifier	out		2707986	0					
ANR	2708702	Argument	& first_word		2707986	1					
ANR	2708703	UnaryOperationExpression	& first_word		2707986	0					
ANR	2708704	UnaryOperator	&		2707986	0					
ANR	2708705	Identifier	first_word		2707986	1					
ANR	2708706	Argument	2		2707986	2					
ANR	2708707	PrimaryExpression	2		2707986	0					
ANR	2708708	IfStatement	if ( extraX == 1 )		2707986	5					
ANR	2708709	Condition	extraX == 1	325:6:8956:8966	2707986	0	True				
ANR	2708710	EqualityExpression	extraX == 1		2707986	0		==			
ANR	2708711	Identifier	extraX		2707986	0					
ANR	2708712	PrimaryExpression	1		2707986	1					
ANR	2708713	CompoundStatement		120:19:3202:3202	2707986	1					
ANR	2708714	ExpressionStatement	"memcpy ( out + 2 , & wordX , 2 )"	326:3:8974:8999	2707986	0	True				
ANR	2708715	CallExpression	"memcpy ( out + 2 , & wordX , 2 )"		2707986	0					
ANR	2708716	Callee	memcpy		2707986	0					
ANR	2708717	Identifier	memcpy		2707986	0					
ANR	2708718	ArgumentList	out + 2		2707986	1					
ANR	2708719	Argument	out + 2		2707986	0					
ANR	2708720	AdditiveExpression	out + 2		2707986	0		+			
ANR	2708721	Identifier	out		2707986	0					
ANR	2708722	PrimaryExpression	2		2707986	1					
ANR	2708723	Argument	& wordX		2707986	1					
ANR	2708724	UnaryOperationExpression	& wordX		2707986	0					
ANR	2708725	UnaryOperator	&		2707986	0					
ANR	2708726	Identifier	wordX		2707986	1					
ANR	2708727	Argument	2		2707986	2					
ANR	2708728	PrimaryExpression	2		2707986	0					
ANR	2708729	ExpressionStatement	off = 4	327:3:9004:9011	2707986	1	True				
ANR	2708730	AssignmentExpression	off = 4		2707986	0		=			
ANR	2708731	Identifier	off		2707986	0					
ANR	2708732	PrimaryExpression	4		2707986	1					
ANR	2708733	ElseStatement	else		2707986	0					
ANR	2708734	ExpressionStatement	off = 2	328:9:9022:9029	2707986	0	True				
ANR	2708735	AssignmentExpression	off = 2		2707986	0		=			
ANR	2708736	Identifier	off		2707986	0					
ANR	2708737	PrimaryExpression	2		2707986	1					
ANR	2708738	ReturnStatement	return off ;	339:1:9221:9231	2707986	13	True				
ANR	2708739	Identifier	off		2707986	0					
ANR	2708740	ReturnType	int		2707986	1					
ANR	2708741	Identifier	dcpu16_assemble		2707986	2					
ANR	2708742	ParameterList	"ut8 * out , const char * unoline"		2707986	3					
ANR	2708743	Parameter	ut8 * out	206:21:5735:5742	2707986	0	True				
ANR	2708744	ParameterType	ut8 *		2707986	0					
ANR	2708745	Identifier	out		2707986	1					
ANR	2708746	Parameter	const char * unoline	206:31:5745:5763	2707986	1	True				
ANR	2708747	ParameterType	const char *		2707986	0					
ANR	2708748	Identifier	unoline		2707986	1					
ANR	2708749	CFGEntryNode	ENTRY		2707986		True				
ANR	2708750	CFGExitNode	EXIT		2707986		True				
ANR	2708751	Symbol	basic_opcode		2707986						
ANR	2708752	Symbol	line		2707986						
ANR	2708753	Symbol	* line		2707986						
ANR	2708754	Symbol	non_basic_opcode		2707986						
ANR	2708755	Symbol	out		2707986						
ANR	2708756	Symbol	wordX		2707986						
ANR	2708757	Symbol	strlen		2707986						
ANR	2708758	Symbol	strncmp		2707986						
ANR	2708759	Symbol	first_word		2707986						
ANR	2708760	Symbol	& first_word		2707986						
ANR	2708761	Symbol	param		2707986						
ANR	2708762	Symbol	unoline		2707986						
ANR	2708763	Symbol	extraB		2707986						
ANR	2708764	Symbol	extraA		2707986						
ANR	2708765	Symbol	& extraX		2707986						
ANR	2708766	Symbol	& wordX		2707986						
ANR	2708767	Symbol	extraX		2707986						
ANR	2708768	Symbol	decode_parameter		2707986						
ANR	2708769	Symbol	cn		2707986						
ANR	2708770	Symbol	stderr		2707986						
ANR	2708771	Symbol	off		2707986						
ANR	2708772	Symbol	* param		2707986						
ANR	2708773	Symbol	p		2707986						
ANR	2708774	Symbol	pa		2707986						
ANR	2708775	Symbol	* cn		2707986						
ANR	2708776	Symbol	pb		2707986						
ANR	2708777	Symbol	& extraB		2707986						
ANR	2708778	Symbol	& wordA		2707986						
ANR	2708779	Symbol	& extraA		2707986						
ANR	2708780	Symbol	wordA		2707986						
ANR	2708781	Symbol	& wordB		2707986						
ANR	2708782	Symbol	wordB		2707986						
ANR	2708783	Symbol	paramA		2707986						
ANR	2708784	Symbol	paramB		2707986						
