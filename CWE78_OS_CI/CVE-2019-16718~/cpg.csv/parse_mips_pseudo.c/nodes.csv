command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5544034	File	data/converged/CVE-2019-16718~_radare2/parse_mips_pseudo.c								
ANR	5544035	Function	can_replace	13:0:214:523							
ANR	5544036	FunctionDef	"can_replace (const char * str , int idx , int max_operands)"		5544035	0					
ANR	5544037	CompoundStatement		13:67:281:523	5544035	0					
ANR	5544038	IfStatement	if ( str [ idx ] > '9' || str [ idx ] < '1' )		5544035	0					
ANR	5544039	Condition	str [ idx ] > '9' || str [ idx ] < '1'	14:5:288:319	5544035	0	True				
ANR	5544040	OrExpression	str [ idx ] > '9' || str [ idx ] < '1'		5544035	0		||			
ANR	5544041	RelationalExpression	str [ idx ] > '9'		5544035	0		>			
ANR	5544042	ArrayIndexing	str [ idx ]		5544035	0					
ANR	5544043	Identifier	str		5544035	0					
ANR	5544044	Identifier	idx		5544035	1					
ANR	5544045	PrimaryExpression	'9'		5544035	1					
ANR	5544046	RelationalExpression	str [ idx ] < '1'		5544035	1		<			
ANR	5544047	ArrayIndexing	str [ idx ]		5544035	0					
ANR	5544048	Identifier	str		5544035	0					
ANR	5544049	Identifier	idx		5544035	1					
ANR	5544050	PrimaryExpression	'1'		5544035	1					
ANR	5544051	CompoundStatement		2:39:40:40	5544035	1					
ANR	5544052	ReturnStatement	return false ;	15:2:326:338	5544035	0	True				
ANR	5544053	Identifier	false		5544035	0					
ANR	5544054	IfStatement	if ( str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1' )		5544035	1					
ANR	5544055	Condition	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'	17:5:348:415	5544035	0	True				
ANR	5544056	AndExpression	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5544035	0		&&			
ANR	5544057	EqualityExpression	str [ idx + 1 ] != x00		5544035	0		!=			
ANR	5544058	ArrayIndexing	str [ idx + 1 ]		5544035	0					
ANR	5544059	Identifier	str		5544035	0					
ANR	5544060	AdditiveExpression	idx + 1		5544035	1		+			
ANR	5544061	Identifier	idx		5544035	0					
ANR	5544062	PrimaryExpression	1		5544035	1					
ANR	5544063	Identifier	x00		5544035	1					
ANR	5544064	AndExpression	str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5544035	1		&&			
ANR	5544065	RelationalExpression	str [ idx + 1 ] <= '9'		5544035	0		<=			
ANR	5544066	ArrayIndexing	str [ idx + 1 ]		5544035	0					
ANR	5544067	Identifier	str		5544035	0					
ANR	5544068	AdditiveExpression	idx + 1		5544035	1		+			
ANR	5544069	Identifier	idx		5544035	0					
ANR	5544070	PrimaryExpression	1		5544035	1					
ANR	5544071	PrimaryExpression	'9'		5544035	1					
ANR	5544072	RelationalExpression	str [ idx + 1 ] >= '1'		5544035	1		>=			
ANR	5544073	ArrayIndexing	str [ idx + 1 ]		5544035	0					
ANR	5544074	Identifier	str		5544035	0					
ANR	5544075	AdditiveExpression	idx + 1		5544035	1		+			
ANR	5544076	Identifier	idx		5544035	0					
ANR	5544077	PrimaryExpression	1		5544035	1					
ANR	5544078	PrimaryExpression	'1'		5544035	1					
ANR	5544079	CompoundStatement		5:75:136:136	5544035	1					
ANR	5544080	ReturnStatement	return false ;	18:2:422:434	5544035	0	True				
ANR	5544081	Identifier	false		5544035	0					
ANR	5544082	IfStatement	if ( ( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands )		5544035	2					
ANR	5544083	Condition	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands	20:5:444:485	5544035	0	True				
ANR	5544084	RelationalExpression	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands		5544035	0		>			
ANR	5544085	CastExpression	( int ) ( ( int ) str [ idx ] - 0x30 )		5544035	0					
ANR	5544086	CastTarget	int		5544035	0					
ANR	5544087	AdditiveExpression	( int ) str [ idx ] - 0x30		5544035	1		-			
ANR	5544088	CastExpression	( int ) str [ idx ]		5544035	0					
ANR	5544089	CastTarget	int		5544035	0					
ANR	5544090	ArrayIndexing	str [ idx ]		5544035	1					
ANR	5544091	Identifier	str		5544035	0					
ANR	5544092	Identifier	idx		5544035	1					
ANR	5544093	PrimaryExpression	0x30		5544035	1					
ANR	5544094	Identifier	max_operands		5544035	1					
ANR	5544095	CompoundStatement		8:49:206:206	5544035	1					
ANR	5544096	ReturnStatement	return false ;	21:2:492:504	5544035	0	True				
ANR	5544097	Identifier	false		5544035	0					
ANR	5544098	ReturnStatement	return true ;	23:1:510:521	5544035	3	True				
ANR	5544099	Identifier	true		5544035	0					
ANR	5544100	ReturnType	static int		5544035	1					
ANR	5544101	Identifier	can_replace		5544035	2					
ANR	5544102	ParameterList	"const char * str , int idx , int max_operands"		5544035	3					
ANR	5544103	Parameter	const char * str	13:23:237:251	5544035	0	True				
ANR	5544104	ParameterType	const char *		5544035	0					
ANR	5544105	Identifier	str		5544035	1					
ANR	5544106	Parameter	int idx	13:40:254:260	5544035	1	True				
ANR	5544107	ParameterType	int		5544035	0					
ANR	5544108	Identifier	idx		5544035	1					
ANR	5544109	Parameter	int max_operands	13:49:263:278	5544035	2	True				
ANR	5544110	ParameterType	int		5544035	0					
ANR	5544111	Identifier	max_operands		5544035	1					
ANR	5544112	CFGEntryNode	ENTRY		5544035		True				
ANR	5544113	CFGExitNode	EXIT		5544035		True				
ANR	5544114	Symbol	str		5544035						
ANR	5544115	Symbol	max_operands		5544035						
ANR	5544116	Symbol	* idx		5544035						
ANR	5544117	Symbol	false		5544035						
ANR	5544118	Symbol	true		5544035						
ANR	5544119	Symbol	x00		5544035						
ANR	5544120	Symbol	* str		5544035						
ANR	5544121	Symbol	idx		5544035						
ANR	5544122	Function	replace	26:0:526:3353							
ANR	5544123	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5544122	0					
ANR	5544124	CompoundStatement		26:63:589:3353	5544122	0					
ANR	5544125	IdentifierDeclStatement	"int i , j , k ;"	27:1:592:601	5544122	0	True				
ANR	5544126	IdentifierDecl	i		5544122	0					
ANR	5544127	IdentifierDeclType	int		5544122	0					
ANR	5544128	Identifier	i		5544122	1					
ANR	5544129	IdentifierDecl	j		5544122	1					
ANR	5544130	IdentifierDeclType	int		5544122	0					
ANR	5544131	Identifier	j		5544122	1					
ANR	5544132	IdentifierDecl	k		5544122	2					
ANR	5544133	IdentifierDeclType	int		5544122	0					
ANR	5544134	Identifier	k		5544122	1					
ANR	5544135	ClassDefStatement	"struct { char * op ; char * str ; int max_operands ; } ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } } ;"	28:1:604:2694	5544122	1	True				
ANR	5544136	IdentifierDecl	"ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } }"		5544122	0					
ANR	5544137	IdentifierDeclType	 [ ]		5544122	0					
ANR	5544138	Identifier	ops		5544122	1					
ANR	5544139	AssignmentExpression	"ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } }"		5544122	2		=			
ANR	5544140	Identifier	ops		5544122	0					
ANR	5544141	InitializerList	"""add"""		5544122	1					
ANR	5544142	InitializerList	"""add"""		5544122	0					
ANR	5544143	PrimaryExpression	"""add"""		5544122	0					
ANR	5544144	PrimaryExpression	"""1 = 2 + 3"""		5544122	1					
ANR	5544145	PrimaryExpression	3		5544122	2					
ANR	5544146	InitializerList	"""addi"""		5544122	1					
ANR	5544147	PrimaryExpression	"""addi"""		5544122	0					
ANR	5544148	PrimaryExpression	"""1 = 2 + 3"""		5544122	1					
ANR	5544149	PrimaryExpression	3		5544122	2					
ANR	5544150	InitializerList	"""addiu"""		5544122	2					
ANR	5544151	PrimaryExpression	"""addiu"""		5544122	0					
ANR	5544152	PrimaryExpression	"""1 = 2 + 3"""		5544122	1					
ANR	5544153	PrimaryExpression	3		5544122	2					
ANR	5544154	InitializerList	"""addu"""		5544122	3					
ANR	5544155	PrimaryExpression	"""addu"""		5544122	0					
ANR	5544156	PrimaryExpression	"""1 = 2 + 3"""		5544122	1					
ANR	5544157	PrimaryExpression	3		5544122	2					
ANR	5544158	InitializerList	"""and"""		5544122	4					
ANR	5544159	PrimaryExpression	"""and"""		5544122	0					
ANR	5544160	PrimaryExpression	"""1 = 2 & 3"""		5544122	1					
ANR	5544161	PrimaryExpression	3		5544122	2					
ANR	5544162	InitializerList	"""andi"""		5544122	5					
ANR	5544163	PrimaryExpression	"""andi"""		5544122	0					
ANR	5544164	PrimaryExpression	"""1 = 2 & 3"""		5544122	1					
ANR	5544165	PrimaryExpression	3		5544122	2					
ANR	5544166	InitializerList	"""b"""		5544122	6					
ANR	5544167	PrimaryExpression	"""b"""		5544122	0					
ANR	5544168	PrimaryExpression	"""goto 1"""		5544122	1					
ANR	5544169	PrimaryExpression	1		5544122	2					
ANR	5544170	InitializerList	"""bal"""		5544122	7					
ANR	5544171	PrimaryExpression	"""bal"""		5544122	0					
ANR	5544172	PrimaryExpression	"""call 1"""		5544122	1					
ANR	5544173	PrimaryExpression	1		5544122	2					
ANR	5544174	InitializerList	"""begzal"""		5544122	8					
ANR	5544175	PrimaryExpression	"""begzal"""		5544122	0					
ANR	5544176	PrimaryExpression	"""if (1 >= 0) call 2"""		5544122	1					
ANR	5544177	PrimaryExpression	2		5544122	2					
ANR	5544178	InitializerList	"""beq"""		5544122	9					
ANR	5544179	PrimaryExpression	"""beq"""		5544122	0					
ANR	5544180	PrimaryExpression	"""if (1 == 2) goto 3"""		5544122	1					
ANR	5544181	PrimaryExpression	3		5544122	2					
ANR	5544182	InitializerList	"""beqz"""		5544122	10					
ANR	5544183	PrimaryExpression	"""beqz"""		5544122	0					
ANR	5544184	PrimaryExpression	"""if (!1) goto 2"""		5544122	1					
ANR	5544185	PrimaryExpression	2		5544122	2					
ANR	5544186	InitializerList	"""bgez"""		5544122	11					
ANR	5544187	PrimaryExpression	"""bgez"""		5544122	0					
ANR	5544188	PrimaryExpression	"""if (1 >= 0) goto 2"""		5544122	1					
ANR	5544189	PrimaryExpression	2		5544122	2					
ANR	5544190	InitializerList	"""bgtz"""		5544122	12					
ANR	5544191	PrimaryExpression	"""bgtz"""		5544122	0					
ANR	5544192	PrimaryExpression	"""if (1 > 0) goto 2"""		5544122	1					
ANR	5544193	PrimaryExpression	2		5544122	2					
ANR	5544194	InitializerList	"""blez"""		5544122	13					
ANR	5544195	PrimaryExpression	"""blez"""		5544122	0					
ANR	5544196	PrimaryExpression	"""if (1 <= 0) goto 2"""		5544122	1					
ANR	5544197	PrimaryExpression	2		5544122	2					
ANR	5544198	InitializerList	"""bltz"""		5544122	14					
ANR	5544199	PrimaryExpression	"""bltz"""		5544122	0					
ANR	5544200	PrimaryExpression	"""if (1 < 0) goto 2"""		5544122	1					
ANR	5544201	PrimaryExpression	2		5544122	2					
ANR	5544202	InitializerList	"""bltzal"""		5544122	15					
ANR	5544203	PrimaryExpression	"""bltzal"""		5544122	0					
ANR	5544204	PrimaryExpression	"""if (1 < 0) call 2"""		5544122	1					
ANR	5544205	PrimaryExpression	2		5544122	2					
ANR	5544206	InitializerList	"""bne"""		5544122	16					
ANR	5544207	PrimaryExpression	"""bne"""		5544122	0					
ANR	5544208	PrimaryExpression	"""if (1 != 2) goto 3"""		5544122	1					
ANR	5544209	PrimaryExpression	3		5544122	2					
ANR	5544210	InitializerList	"""bnez"""		5544122	17					
ANR	5544211	PrimaryExpression	"""bnez"""		5544122	0					
ANR	5544212	PrimaryExpression	"""if (1) goto 2"""		5544122	1					
ANR	5544213	PrimaryExpression	2		5544122	2					
ANR	5544214	InitializerList	"""j"""		5544122	18					
ANR	5544215	PrimaryExpression	"""j"""		5544122	0					
ANR	5544216	PrimaryExpression	"""goto 1"""		5544122	1					
ANR	5544217	PrimaryExpression	1		5544122	2					
ANR	5544218	InitializerList	"""jal"""		5544122	19					
ANR	5544219	PrimaryExpression	"""jal"""		5544122	0					
ANR	5544220	PrimaryExpression	"""call 1"""		5544122	1					
ANR	5544221	PrimaryExpression	1		5544122	2					
ANR	5544222	InitializerList	"""jalr"""		5544122	20					
ANR	5544223	PrimaryExpression	"""jalr"""		5544122	0					
ANR	5544224	PrimaryExpression	"""call 1"""		5544122	1					
ANR	5544225	PrimaryExpression	1		5544122	2					
ANR	5544226	InitializerList	"""jr"""		5544122	21					
ANR	5544227	PrimaryExpression	"""jr"""		5544122	0					
ANR	5544228	PrimaryExpression	"""goto 1"""		5544122	1					
ANR	5544229	PrimaryExpression	1		5544122	2					
ANR	5544230	InitializerList	"""lb"""		5544122	22					
ANR	5544231	PrimaryExpression	"""lb"""		5544122	0					
ANR	5544232	PrimaryExpression	"""1 = byte [3 + 2]"""		5544122	1					
ANR	5544233	PrimaryExpression	3		5544122	2					
ANR	5544234	InitializerList	"""lbu"""		5544122	23					
ANR	5544235	PrimaryExpression	"""lbu"""		5544122	0					
ANR	5544236	PrimaryExpression	"""1 = (unsigned) byte [3 + 2]"""		5544122	1					
ANR	5544237	PrimaryExpression	3		5544122	2					
ANR	5544238	InitializerList	"""lh"""		5544122	24					
ANR	5544239	PrimaryExpression	"""lh"""		5544122	0					
ANR	5544240	PrimaryExpression	"""1 = halfword [3 + 2]"""		5544122	1					
ANR	5544241	PrimaryExpression	3		5544122	2					
ANR	5544242	InitializerList	"""lhu"""		5544122	25					
ANR	5544243	PrimaryExpression	"""lhu"""		5544122	0					
ANR	5544244	PrimaryExpression	"""1 = (unsigned) halfword [3 + 2]"""		5544122	1					
ANR	5544245	PrimaryExpression	3		5544122	2					
ANR	5544246	InitializerList	"""li"""		5544122	26					
ANR	5544247	PrimaryExpression	"""li"""		5544122	0					
ANR	5544248	PrimaryExpression	"""1 = 2"""		5544122	1					
ANR	5544249	PrimaryExpression	2		5544122	2					
ANR	5544250	InitializerList	"""lui"""		5544122	27					
ANR	5544251	PrimaryExpression	"""lui"""		5544122	0					
ANR	5544252	PrimaryExpression	"""1 = 2 << 16"""		5544122	1					
ANR	5544253	PrimaryExpression	2		5544122	2					
ANR	5544254	InitializerList	"""lw"""		5544122	28					
ANR	5544255	PrimaryExpression	"""lw"""		5544122	0					
ANR	5544256	PrimaryExpression	"""1 = [3 + 2]"""		5544122	1					
ANR	5544257	PrimaryExpression	3		5544122	2					
ANR	5544258	InitializerList	"""mfhi"""		5544122	29					
ANR	5544259	PrimaryExpression	"""mfhi"""		5544122	0					
ANR	5544260	PrimaryExpression	"""1 = hi"""		5544122	1					
ANR	5544261	PrimaryExpression	1		5544122	2					
ANR	5544262	InitializerList	"""mflo"""		5544122	30					
ANR	5544263	PrimaryExpression	"""mflo"""		5544122	0					
ANR	5544264	PrimaryExpression	"""1 = lo"""		5544122	1					
ANR	5544265	PrimaryExpression	1		5544122	2					
ANR	5544266	InitializerList	"""move"""		5544122	31					
ANR	5544267	PrimaryExpression	"""move"""		5544122	0					
ANR	5544268	PrimaryExpression	"""1 = 2"""		5544122	1					
ANR	5544269	PrimaryExpression	2		5544122	2					
ANR	5544270	InitializerList	"""movn"""		5544122	32					
ANR	5544271	PrimaryExpression	"""movn"""		5544122	0					
ANR	5544272	PrimaryExpression	"""if (3) 1 = 2"""		5544122	1					
ANR	5544273	PrimaryExpression	3		5544122	2					
ANR	5544274	InitializerList	"""movz"""		5544122	33					
ANR	5544275	PrimaryExpression	"""movz"""		5544122	0					
ANR	5544276	PrimaryExpression	"""if (!3) 1 = 2"""		5544122	1					
ANR	5544277	PrimaryExpression	3		5544122	2					
ANR	5544278	InitializerList	"""mult"""		5544122	34					
ANR	5544279	PrimaryExpression	"""mult"""		5544122	0					
ANR	5544280	PrimaryExpression	"""(hi,lo) = 1 * 2"""		5544122	1					
ANR	5544281	PrimaryExpression	2		5544122	2					
ANR	5544282	InitializerList	"""multu"""		5544122	35					
ANR	5544283	PrimaryExpression	"""multu"""		5544122	0					
ANR	5544284	PrimaryExpression	"""unsigned (hi,lo) = 1 * 2"""		5544122	1					
ANR	5544285	PrimaryExpression	2		5544122	2					
ANR	5544286	InitializerList	"""mul"""		5544122	36					
ANR	5544287	PrimaryExpression	"""mul"""		5544122	0					
ANR	5544288	PrimaryExpression	"""1 = 2 * 3"""		5544122	1					
ANR	5544289	PrimaryExpression	3		5544122	2					
ANR	5544290	InitializerList	"""mulu"""		5544122	37					
ANR	5544291	PrimaryExpression	"""mulu"""		5544122	0					
ANR	5544292	PrimaryExpression	"""1 = 2 * 3"""		5544122	1					
ANR	5544293	PrimaryExpression	3		5544122	2					
ANR	5544294	InitializerList	"""negu"""		5544122	38					
ANR	5544295	PrimaryExpression	"""negu"""		5544122	0					
ANR	5544296	PrimaryExpression	"""1 = ~2"""		5544122	1					
ANR	5544297	PrimaryExpression	2		5544122	2					
ANR	5544298	InitializerList	"""nop"""		5544122	39					
ANR	5544299	PrimaryExpression	"""nop"""		5544122	0					
ANR	5544300	PrimaryExpression	""""""		5544122	1					
ANR	5544301	PrimaryExpression	0		5544122	2					
ANR	5544302	InitializerList	"""nor"""		5544122	40					
ANR	5544303	PrimaryExpression	"""nor"""		5544122	0					
ANR	5544304	PrimaryExpression	"""1 = ~(2 | 3)"""		5544122	1					
ANR	5544305	PrimaryExpression	3		5544122	2					
ANR	5544306	InitializerList	"""or"""		5544122	41					
ANR	5544307	PrimaryExpression	"""or"""		5544122	0					
ANR	5544308	PrimaryExpression	"""1 = 2 | 3"""		5544122	1					
ANR	5544309	PrimaryExpression	3		5544122	2					
ANR	5544310	InitializerList	"""ori"""		5544122	42					
ANR	5544311	PrimaryExpression	"""ori"""		5544122	0					
ANR	5544312	PrimaryExpression	"""1 = 2 | 3"""		5544122	1					
ANR	5544313	PrimaryExpression	3		5544122	2					
ANR	5544314	InitializerList	"""sb"""		5544122	43					
ANR	5544315	PrimaryExpression	"""sb"""		5544122	0					
ANR	5544316	PrimaryExpression	"""byte [3 + 2] = 1"""		5544122	1					
ANR	5544317	PrimaryExpression	3		5544122	2					
ANR	5544318	InitializerList	"""sh"""		5544122	44					
ANR	5544319	PrimaryExpression	"""sh"""		5544122	0					
ANR	5544320	PrimaryExpression	"""halfword [3 + 2] = 1"""		5544122	1					
ANR	5544321	PrimaryExpression	3		5544122	2					
ANR	5544322	InitializerList	"""sll"""		5544122	45					
ANR	5544323	PrimaryExpression	"""sll"""		5544122	0					
ANR	5544324	PrimaryExpression	"""1 = 2 << 3"""		5544122	1					
ANR	5544325	PrimaryExpression	3		5544122	2					
ANR	5544326	InitializerList	"""sllv"""		5544122	46					
ANR	5544327	PrimaryExpression	"""sllv"""		5544122	0					
ANR	5544328	PrimaryExpression	"""1 = 2 << 3"""		5544122	1					
ANR	5544329	PrimaryExpression	3		5544122	2					
ANR	5544330	InitializerList	"""slr"""		5544122	47					
ANR	5544331	PrimaryExpression	"""slr"""		5544122	0					
ANR	5544332	PrimaryExpression	"""1 = 2 >> 3"""		5544122	1					
ANR	5544333	PrimaryExpression	3		5544122	2					
ANR	5544334	InitializerList	"""slt"""		5544122	48					
ANR	5544335	PrimaryExpression	"""slt"""		5544122	0					
ANR	5544336	PrimaryExpression	"""1 = (2 < 3)"""		5544122	1					
ANR	5544337	PrimaryExpression	3		5544122	2					
ANR	5544338	InitializerList	"""slti"""		5544122	49					
ANR	5544339	PrimaryExpression	"""slti"""		5544122	0					
ANR	5544340	PrimaryExpression	"""1 = (2 < 3)"""		5544122	1					
ANR	5544341	PrimaryExpression	3		5544122	2					
ANR	5544342	InitializerList	"""sltiu"""		5544122	50					
ANR	5544343	PrimaryExpression	"""sltiu"""		5544122	0					
ANR	5544344	PrimaryExpression	"""1 = (unsigned) (2 < 3)"""		5544122	1					
ANR	5544345	PrimaryExpression	3		5544122	2					
ANR	5544346	InitializerList	"""sltu"""		5544122	51					
ANR	5544347	PrimaryExpression	"""sltu"""		5544122	0					
ANR	5544348	PrimaryExpression	"""1 = (unsigned) (2 < 3)"""		5544122	1					
ANR	5544349	PrimaryExpression	3		5544122	2					
ANR	5544350	InitializerList	"""sra"""		5544122	52					
ANR	5544351	PrimaryExpression	"""sra"""		5544122	0					
ANR	5544352	PrimaryExpression	"""1 = (signed) 2 >> 3"""		5544122	1					
ANR	5544353	PrimaryExpression	3		5544122	2					
ANR	5544354	InitializerList	"""srl"""		5544122	53					
ANR	5544355	PrimaryExpression	"""srl"""		5544122	0					
ANR	5544356	PrimaryExpression	"""1 = 2 >> 3"""		5544122	1					
ANR	5544357	PrimaryExpression	3		5544122	2					
ANR	5544358	InitializerList	"""srlv"""		5544122	54					
ANR	5544359	PrimaryExpression	"""srlv"""		5544122	0					
ANR	5544360	PrimaryExpression	"""1 = 2 >> 3"""		5544122	1					
ANR	5544361	PrimaryExpression	3		5544122	2					
ANR	5544362	InitializerList	"""subu"""		5544122	55					
ANR	5544363	PrimaryExpression	"""subu"""		5544122	0					
ANR	5544364	PrimaryExpression	"""1 = 2 - 3"""		5544122	1					
ANR	5544365	PrimaryExpression	3		5544122	2					
ANR	5544366	InitializerList	"""sub"""		5544122	56					
ANR	5544367	PrimaryExpression	"""sub"""		5544122	0					
ANR	5544368	PrimaryExpression	"""1 = 2 - 3"""		5544122	1					
ANR	5544369	PrimaryExpression	3		5544122	2					
ANR	5544370	InitializerList	"""sw"""		5544122	57					
ANR	5544371	PrimaryExpression	"""sw"""		5544122	0					
ANR	5544372	PrimaryExpression	"""[3 + 2] = 1"""		5544122	1					
ANR	5544373	PrimaryExpression	3		5544122	2					
ANR	5544374	InitializerList	"""syscall"""		5544122	58					
ANR	5544375	PrimaryExpression	"""syscall"""		5544122	0					
ANR	5544376	PrimaryExpression	"""syscall"""		5544122	1					
ANR	5544377	PrimaryExpression	0		5544122	2					
ANR	5544378	InitializerList	"""xor"""		5544122	59					
ANR	5544379	PrimaryExpression	"""xor"""		5544122	0					
ANR	5544380	PrimaryExpression	"""1 = 2 ^ 3"""		5544122	1					
ANR	5544381	PrimaryExpression	3		5544122	2					
ANR	5544382	InitializerList	"""xori"""		5544122	60					
ANR	5544383	PrimaryExpression	"""xori"""		5544122	0					
ANR	5544384	PrimaryExpression	"""1 = 2 ^ 3"""		5544122	1					
ANR	5544385	PrimaryExpression	3		5544122	2					
ANR	5544386	InitializerList	NULL		5544122	61					
ANR	5544387	Identifier	NULL		5544122	0					
ANR	5544388	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5544122	2					
ANR	5544389	ForInit	i = 0 ;	97:6:2703:2706	5544122	0	True				
ANR	5544390	AssignmentExpression	i = 0		5544122	0		=			
ANR	5544391	Identifier	i		5544122	0					
ANR	5544392	PrimaryExpression	0		5544122	1					
ANR	5544393	Condition	ops [ i ] . op != NULL	97:11:2708:2724	5544122	1	True				
ANR	5544394	EqualityExpression	ops [ i ] . op != NULL		5544122	0		!=			
ANR	5544395	MemberAccess	ops [ i ] . op		5544122	0					
ANR	5544396	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544397	Identifier	ops		5544122	0					
ANR	5544398	Identifier	i		5544122	1					
ANR	5544399	Identifier	op		5544122	1					
ANR	5544400	Identifier	NULL		5544122	1					
ANR	5544401	PostIncDecOperationExpression	i ++	97:30:2727:2729	5544122	2	True				
ANR	5544402	Identifier	i		5544122	0					
ANR	5544403	IncDec	++		5544122	1					
ANR	5544404	CompoundStatement		72:35:2142:2142	5544122	3					
ANR	5544405	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5544122	0					
ANR	5544406	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	98:6:2740:2767	5544122	0	True				
ANR	5544407	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5544122	0					
ANR	5544408	UnaryOperator	!		5544122	0					
ANR	5544409	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5544122	1					
ANR	5544410	Callee	strcmp		5544122	0					
ANR	5544411	Identifier	strcmp		5544122	0					
ANR	5544412	ArgumentList	ops [ i ] . op		5544122	1					
ANR	5544413	Argument	ops [ i ] . op		5544122	0					
ANR	5544414	MemberAccess	ops [ i ] . op		5544122	0					
ANR	5544415	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544416	Identifier	ops		5544122	0					
ANR	5544417	Identifier	i		5544122	1					
ANR	5544418	Identifier	op		5544122	1					
ANR	5544419	Argument	argv [ 0 ]		5544122	1					
ANR	5544420	ArrayIndexing	argv [ 0 ]		5544122	0					
ANR	5544421	Identifier	argv		5544122	0					
ANR	5544422	PrimaryExpression	0		5544122	1					
ANR	5544423	CompoundStatement		73:36:2180:2180	5544122	1					
ANR	5544424	IfStatement	if ( newstr != NULL )		5544122	0					
ANR	5544425	Condition	newstr != NULL	99:7:2779:2792	5544122	0	True				
ANR	5544426	EqualityExpression	newstr != NULL		5544122	0		!=			
ANR	5544427	Identifier	newstr		5544122	0					
ANR	5544428	Identifier	NULL		5544122	1					
ANR	5544429	CompoundStatement		74:23:2205:2205	5544122	1					
ANR	5544430	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5544122	0					
ANR	5544431	ForInit	j = k = 0 ;	100:9:2806:2811	5544122	0	True				
ANR	5544432	AssignmentExpression	j = k = 0		5544122	0		=			
ANR	5544433	Identifier	j		5544122	0					
ANR	5544434	AssignmentExpression	k = 0		5544122	1		=			
ANR	5544435	Identifier	k		5544122	0					
ANR	5544436	PrimaryExpression	0		5544122	1					
ANR	5544437	Condition	ops [ i ] . str [ j ] != '\\0'	100:15:2812:2830	5544122	1	True				
ANR	5544438	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5544122	0		!=			
ANR	5544439	ArrayIndexing	ops [ i ] . str [ j ]		5544122	0					
ANR	5544440	MemberAccess	ops [ i ] . str		5544122	0					
ANR	5544441	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544442	Identifier	ops		5544122	0					
ANR	5544443	Identifier	i		5544122	1					
ANR	5544444	Identifier	str		5544122	1					
ANR	5544445	Identifier	j		5544122	1					
ANR	5544446	PrimaryExpression	'\\0'		5544122	1					
ANR	5544447	Expression	"j ++ , k ++"	100:35:2832:2838	5544122	2	True				
ANR	5544448	PostIncDecOperationExpression	j ++		5544122	0					
ANR	5544449	Identifier	j		5544122	0					
ANR	5544450	IncDec	++		5544122	1					
ANR	5544451	PostIncDecOperationExpression	k ++		5544122	1					
ANR	5544452	Identifier	k		5544122	0					
ANR	5544453	IncDec	++		5544122	1					
ANR	5544454	CompoundStatement		75:44:2251:2251	5544122	3					
ANR	5544455	IfStatement	"if ( can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands ) )"		5544122	0					
ANR	5544456	Condition	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"	101:9:2852:2899	5544122	0	True				
ANR	5544457	CallExpression	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"		5544122	0					
ANR	5544458	Callee	can_replace		5544122	0					
ANR	5544459	Identifier	can_replace		5544122	0					
ANR	5544460	ArgumentList	ops [ i ] . str		5544122	1					
ANR	5544461	Argument	ops [ i ] . str		5544122	0					
ANR	5544462	MemberAccess	ops [ i ] . str		5544122	0					
ANR	5544463	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544464	Identifier	ops		5544122	0					
ANR	5544465	Identifier	i		5544122	1					
ANR	5544466	Identifier	str		5544122	1					
ANR	5544467	Argument	j		5544122	1					
ANR	5544468	Identifier	j		5544122	0					
ANR	5544469	Argument	ops [ i ] . max_operands		5544122	2					
ANR	5544470	MemberAccess	ops [ i ] . max_operands		5544122	0					
ANR	5544471	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544472	Identifier	ops		5544122	0					
ANR	5544473	Identifier	i		5544122	1					
ANR	5544474	Identifier	max_operands		5544122	1					
ANR	5544475	CompoundStatement		77:6:2320:2361	5544122	1					
ANR	5544476	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	102:6:2910:2951	5544122	0	True				
ANR	5544477	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5544122	0					
ANR	5544478	IdentifierDeclType	const char *		5544122	0					
ANR	5544479	Identifier	w		5544122	1					
ANR	5544480	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5544122	2		=			
ANR	5544481	Identifier	w		5544122	0					
ANR	5544482	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5544122	1					
ANR	5544483	Identifier	argv		5544122	0					
ANR	5544484	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5544122	1		-			
ANR	5544485	ArrayIndexing	ops [ i ] . str [ j ]		5544122	0					
ANR	5544486	MemberAccess	ops [ i ] . str		5544122	0					
ANR	5544487	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544488	Identifier	ops		5544122	0					
ANR	5544489	Identifier	i		5544122	1					
ANR	5544490	Identifier	str		5544122	1					
ANR	5544491	Identifier	j		5544122	1					
ANR	5544492	PrimaryExpression	'0'		5544122	1					
ANR	5544493	IfStatement	if ( w != NULL )		5544122	1					
ANR	5544494	Condition	w != NULL	103:10:2963:2971	5544122	0	True				
ANR	5544495	EqualityExpression	w != NULL		5544122	0		!=			
ANR	5544496	Identifier	w		5544122	0					
ANR	5544497	Identifier	NULL		5544122	1					
ANR	5544498	CompoundStatement		78:21:2384:2384	5544122	1					
ANR	5544499	ExpressionStatement	"strcpy ( newstr + k , w )"	104:7:2983:3003	5544122	0	True				
ANR	5544500	CallExpression	"strcpy ( newstr + k , w )"		5544122	0					
ANR	5544501	Callee	strcpy		5544122	0					
ANR	5544502	Identifier	strcpy		5544122	0					
ANR	5544503	ArgumentList	newstr + k		5544122	1					
ANR	5544504	Argument	newstr + k		5544122	0					
ANR	5544505	AdditiveExpression	newstr + k		5544122	0		+			
ANR	5544506	Identifier	newstr		5544122	0					
ANR	5544507	Identifier	k		5544122	1					
ANR	5544508	Argument	w		5544122	1					
ANR	5544509	Identifier	w		5544122	0					
ANR	5544510	ExpressionStatement	k += strlen ( w ) - 1	105:7:3012:3031	5544122	1	True				
ANR	5544511	AssignmentExpression	k += strlen ( w ) - 1		5544122	0		+=			
ANR	5544512	Identifier	k		5544122	0					
ANR	5544513	AdditiveExpression	strlen ( w ) - 1		5544122	1		-			
ANR	5544514	CallExpression	strlen ( w )		5544122	0					
ANR	5544515	Callee	strlen		5544122	0					
ANR	5544516	Identifier	strlen		5544122	0					
ANR	5544517	ArgumentList	w		5544122	1					
ANR	5544518	Argument	w		5544122	0					
ANR	5544519	Identifier	w		5544122	0					
ANR	5544520	PrimaryExpression	1		5544122	1					
ANR	5544521	ElseStatement	else		5544122	0					
ANR	5544522	CompoundStatement		82:12:2463:2463	5544122	0					
ANR	5544523	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	108:6:3061:3086	5544122	0	True				
ANR	5544524	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5544122	0		=			
ANR	5544525	ArrayIndexing	newstr [ k ]		5544122	0					
ANR	5544526	Identifier	newstr		5544122	0					
ANR	5544527	Identifier	k		5544122	1					
ANR	5544528	ArrayIndexing	ops [ i ] . str [ j ]		5544122	1					
ANR	5544529	MemberAccess	ops [ i ] . str		5544122	0					
ANR	5544530	ArrayIndexing	ops [ i ]		5544122	0					
ANR	5544531	Identifier	ops		5544122	0					
ANR	5544532	Identifier	i		5544122	1					
ANR	5544533	Identifier	str		5544122	1					
ANR	5544534	Identifier	j		5544122	1					
ANR	5544535	ExpressionStatement	newstr [ k ] = '\\0'	111:4:3105:3119	5544122	1	True				
ANR	5544536	AssignmentExpression	newstr [ k ] = '\\0'		5544122	0		=			
ANR	5544537	ArrayIndexing	newstr [ k ]		5544122	0					
ANR	5544538	Identifier	newstr		5544122	0					
ANR	5544539	Identifier	k		5544122	1					
ANR	5544540	PrimaryExpression	'\\0'		5544122	1					
ANR	5544541	ReturnStatement	return true ;	113:3:3129:3140	5544122	1	True				
ANR	5544542	Identifier	true		5544122	0					
ANR	5544543	IfStatement	if ( newstr != NULL )		5544122	3					
ANR	5544544	Condition	newstr != NULL	118:5:3181:3194	5544122	0	True				
ANR	5544545	EqualityExpression	newstr != NULL		5544122	0		!=			
ANR	5544546	Identifier	newstr		5544122	0					
ANR	5544547	Identifier	NULL		5544122	1					
ANR	5544548	CompoundStatement		93:21:2607:2607	5544122	1					
ANR	5544549	ExpressionStatement	newstr [ 0 ] = '\\0'	119:2:3201:3217	5544122	0	True				
ANR	5544550	AssignmentExpression	newstr [ 0 ] = '\\0'		5544122	0		=			
ANR	5544551	ArrayIndexing	newstr [ 0 ]		5544122	0					
ANR	5544552	Identifier	newstr		5544122	0					
ANR	5544553	PrimaryExpression	0		5544122	1					
ANR	5544554	PrimaryExpression	'\\0'		5544122	1					
ANR	5544555	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5544122	1					
ANR	5544556	ForInit	i = 0 ;	120:7:3226:3229	5544122	0	True				
ANR	5544557	AssignmentExpression	i = 0		5544122	0		=			
ANR	5544558	Identifier	i		5544122	0					
ANR	5544559	PrimaryExpression	0		5544122	1					
ANR	5544560	Condition	i < argc	120:12:3231:3236	5544122	1	True				
ANR	5544561	RelationalExpression	i < argc		5544122	0		<			
ANR	5544562	Identifier	i		5544122	0					
ANR	5544563	Identifier	argc		5544122	1					
ANR	5544564	PostIncDecOperationExpression	i ++	120:20:3239:3241	5544122	2	True				
ANR	5544565	Identifier	i		5544122	0					
ANR	5544566	IncDec	++		5544122	1					
ANR	5544567	CompoundStatement		95:25:2654:2654	5544122	3					
ANR	5544568	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	121:3:3249:3273	5544122	0	True				
ANR	5544569	CallExpression	"strcat ( newstr , argv [ i ] )"		5544122	0					
ANR	5544570	Callee	strcat		5544122	0					
ANR	5544571	Identifier	strcat		5544122	0					
ANR	5544572	ArgumentList	newstr		5544122	1					
ANR	5544573	Argument	newstr		5544122	0					
ANR	5544574	Identifier	newstr		5544122	0					
ANR	5544575	Argument	argv [ i ]		5544122	1					
ANR	5544576	ArrayIndexing	argv [ i ]		5544122	0					
ANR	5544577	Identifier	argv		5544122	0					
ANR	5544578	Identifier	i		5544122	1					
ANR	5544579	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	122:3:3278:3328	5544122	1	True				
ANR	5544580	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5544122	0					
ANR	5544581	Callee	strcat		5544122	0					
ANR	5544582	Identifier	strcat		5544122	0					
ANR	5544583	ArgumentList	newstr		5544122	1					
ANR	5544584	Argument	newstr		5544122	0					
ANR	5544585	Identifier	newstr		5544122	0					
ANR	5544586	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5544122	1					
ANR	5544587	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5544122	0					
ANR	5544588	Condition	i == 0 || i == argc - 1		5544122	0					
ANR	5544589	OrExpression	i == 0 || i == argc - 1		5544122	0		||			
ANR	5544590	EqualityExpression	i == 0		5544122	0		==			
ANR	5544591	Identifier	i		5544122	0					
ANR	5544592	PrimaryExpression	0		5544122	1					
ANR	5544593	EqualityExpression	i == argc - 1		5544122	1		==			
ANR	5544594	Identifier	i		5544122	0					
ANR	5544595	AdditiveExpression	argc - 1		5544122	1		-			
ANR	5544596	Identifier	argc		5544122	0					
ANR	5544597	PrimaryExpression	1		5544122	1					
ANR	5544598	PrimaryExpression	""" """		5544122	1					
ANR	5544599	PrimaryExpression	""", """		5544122	2					
ANR	5544600	ReturnStatement	return false ;	126:1:3339:3351	5544122	4	True				
ANR	5544601	Identifier	false		5544122	0					
ANR	5544602	ReturnType	static int		5544122	1					
ANR	5544603	Identifier	replace		5544122	2					
ANR	5544604	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5544122	3					
ANR	5544605	Parameter	int argc	26:19:545:552	5544122	0	True				
ANR	5544606	ParameterType	int		5544122	0					
ANR	5544607	Identifier	argc		5544122	1					
ANR	5544608	Parameter	const char * argv [ ]	26:29:555:572	5544122	1	True				
ANR	5544609	ParameterType	const char * [ ]		5544122	0					
ANR	5544610	Identifier	argv		5544122	1					
ANR	5544611	Parameter	char * newstr	26:49:575:586	5544122	2	True				
ANR	5544612	ParameterType	char *		5544122	0					
ANR	5544613	Identifier	newstr		5544122	1					
ANR	5544614	CFGEntryNode	ENTRY		5544122		True				
ANR	5544615	CFGExitNode	EXIT		5544122		True				
ANR	5544616	Symbol	* ops [ i ] . str		5544122						
ANR	5544617	Symbol	* * ops		5544122						
ANR	5544618	Symbol	* argv		5544122						
ANR	5544619	Symbol	argv		5544122						
ANR	5544620	Symbol	ops [ i ] . str		5544122						
ANR	5544621	Symbol	strlen		5544122						
ANR	5544622	Symbol	ops [ i ] . op		5544122						
ANR	5544623	Symbol	* ops		5544122						
ANR	5544624	Symbol	argc		5544122						
ANR	5544625	Symbol	strcmp		5544122						
ANR	5544626	Symbol	* * j		5544122						
ANR	5544627	Symbol	* * i		5544122						
ANR	5544628	Symbol	NULL		5544122						
ANR	5544629	Symbol	ops [ i ] . max_operands		5544122						
ANR	5544630	Symbol	* * ops [ i ] . str		5544122						
ANR	5544631	Symbol	false		5544122						
ANR	5544632	Symbol	i		5544122						
ANR	5544633	Symbol	j		5544122						
ANR	5544634	Symbol	k		5544122						
ANR	5544635	Symbol	newstr		5544122						
ANR	5544636	Symbol	* * * ops		5544122						
ANR	5544637	Symbol	ops		5544122						
ANR	5544638	Symbol	* i		5544122						
ANR	5544639	Symbol	* newstr		5544122						
ANR	5544640	Symbol	* j		5544122						
ANR	5544641	Symbol	* k		5544122						
ANR	5544642	Symbol	w		5544122						
ANR	5544643	Symbol	* * * i		5544122						
ANR	5544644	Symbol	true		5544122						
ANR	5544645	Symbol	can_replace		5544122						
ANR	5544646	Function	parse	130:0:3371:5831							
ANR	5544647	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5544646	0					
ANR	5544648	CompoundStatement		130:57:3428:5831	5544646	0					
ANR	5544649	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	131:1:3431:3457	5544646	0	True				
ANR	5544650	IdentifierDecl	i		5544646	0					
ANR	5544651	IdentifierDeclType	int		5544646	0					
ANR	5544652	Identifier	i		5544646	1					
ANR	5544653	IdentifierDecl	len = strlen ( data )		5544646	1					
ANR	5544654	IdentifierDeclType	int		5544646	0					
ANR	5544655	Identifier	len		5544646	1					
ANR	5544656	AssignmentExpression	len = strlen ( data )		5544646	2		=			
ANR	5544657	Identifier	len		5544646	0					
ANR	5544658	CallExpression	strlen ( data )		5544646	1					
ANR	5544659	Callee	strlen		5544646	0					
ANR	5544660	Identifier	strlen		5544646	0					
ANR	5544661	ArgumentList	data		5544646	1					
ANR	5544662	Argument	data		5544646	0					
ANR	5544663	Identifier	data		5544646	0					
ANR	5544664	IdentifierDeclStatement	char w0 [ WSZ ] ;	132:1:3460:3472	5544646	1	True				
ANR	5544665	IdentifierDecl	w0 [ WSZ ]		5544646	0					
ANR	5544666	IdentifierDeclType	char [ WSZ ]		5544646	0					
ANR	5544667	Identifier	w0		5544646	1					
ANR	5544668	Identifier	WSZ		5544646	2					
ANR	5544669	IdentifierDeclStatement	char w1 [ WSZ ] ;	133:1:3475:3487	5544646	2	True				
ANR	5544670	IdentifierDecl	w1 [ WSZ ]		5544646	0					
ANR	5544671	IdentifierDeclType	char [ WSZ ]		5544646	0					
ANR	5544672	Identifier	w1		5544646	1					
ANR	5544673	Identifier	WSZ		5544646	2					
ANR	5544674	IdentifierDeclStatement	char w2 [ WSZ ] ;	134:1:3490:3502	5544646	3	True				
ANR	5544675	IdentifierDecl	w2 [ WSZ ]		5544646	0					
ANR	5544676	IdentifierDeclType	char [ WSZ ]		5544646	0					
ANR	5544677	Identifier	w2		5544646	1					
ANR	5544678	Identifier	WSZ		5544646	2					
ANR	5544679	IdentifierDeclStatement	char w3 [ WSZ ] ;	135:1:3505:3517	5544646	4	True				
ANR	5544680	IdentifierDecl	w3 [ WSZ ]		5544646	0					
ANR	5544681	IdentifierDeclType	char [ WSZ ]		5544646	0					
ANR	5544682	Identifier	w3		5544646	1					
ANR	5544683	Identifier	WSZ		5544646	2					
ANR	5544684	IdentifierDeclStatement	char w4 [ WSZ ] ;	136:1:3520:3532	5544646	5	True				
ANR	5544685	IdentifierDecl	w4 [ WSZ ]		5544646	0					
ANR	5544686	IdentifierDeclType	char [ WSZ ]		5544646	0					
ANR	5544687	Identifier	w4		5544646	1					
ANR	5544688	Identifier	WSZ		5544646	2					
ANR	5544689	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	137:1:3535:3557	5544646	6	True				
ANR	5544690	IdentifierDecl	* buf		5544646	0					
ANR	5544691	IdentifierDeclType	char *		5544646	0					
ANR	5544692	Identifier	buf		5544646	1					
ANR	5544693	IdentifierDecl	* ptr		5544646	1					
ANR	5544694	IdentifierDeclType	char *		5544646	0					
ANR	5544695	Identifier	ptr		5544646	1					
ANR	5544696	IdentifierDecl	* optr		5544646	2					
ANR	5544697	IdentifierDeclType	char *		5544646	0					
ANR	5544698	Identifier	optr		5544646	1					
ANR	5544699	IfStatement	"if ( ! strcmp ( data , ""jr ra"" ) )"		5544646	7					
ANR	5544700	Condition	"! strcmp ( data , ""jr ra"" )"	139:5:3565:3587	5544646	0	True				
ANR	5544701	UnaryOperationExpression	"! strcmp ( data , ""jr ra"" )"		5544646	0					
ANR	5544702	UnaryOperator	!		5544646	0					
ANR	5544703	CallExpression	"strcmp ( data , ""jr ra"" )"		5544646	1					
ANR	5544704	Callee	strcmp		5544646	0					
ANR	5544705	Identifier	strcmp		5544646	0					
ANR	5544706	ArgumentList	data		5544646	1					
ANR	5544707	Argument	data		5544646	0					
ANR	5544708	Identifier	data		5544646	0					
ANR	5544709	Argument	"""jr ra"""		5544646	1					
ANR	5544710	PrimaryExpression	"""jr ra"""		5544646	0					
ANR	5544711	CompoundStatement		10:30:161:161	5544646	1					
ANR	5544712	ExpressionStatement	"strcpy ( str , ""ret"" )"	140:2:3594:3613	5544646	0	True				
ANR	5544713	CallExpression	"strcpy ( str , ""ret"" )"		5544646	0					
ANR	5544714	Callee	strcpy		5544646	0					
ANR	5544715	Identifier	strcpy		5544646	0					
ANR	5544716	ArgumentList	str		5544646	1					
ANR	5544717	Argument	str		5544646	0					
ANR	5544718	Identifier	str		5544646	0					
ANR	5544719	Argument	"""ret"""		5544646	1					
ANR	5544720	PrimaryExpression	"""ret"""		5544646	0					
ANR	5544721	ReturnStatement	return true ;	141:2:3617:3628	5544646	1	True				
ANR	5544722	Identifier	true		5544646	0					
ANR	5544723	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5544646	8					
ANR	5544724	Condition	! ( buf = malloc ( len + 1 ) )	145:5:3670:3694	5544646	0	True				
ANR	5544725	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5544646	0					
ANR	5544726	UnaryOperator	!		5544646	0					
ANR	5544727	AssignmentExpression	buf = malloc ( len + 1 )		5544646	1		=			
ANR	5544728	Identifier	buf		5544646	0					
ANR	5544729	CallExpression	malloc ( len + 1 )		5544646	1					
ANR	5544730	Callee	malloc		5544646	0					
ANR	5544731	Identifier	malloc		5544646	0					
ANR	5544732	ArgumentList	len + 1		5544646	1					
ANR	5544733	Argument	len + 1		5544646	0					
ANR	5544734	AdditiveExpression	len + 1		5544646	0		+			
ANR	5544735	Identifier	len		5544646	0					
ANR	5544736	PrimaryExpression	1		5544646	1					
ANR	5544737	CompoundStatement		16:32:268:268	5544646	1					
ANR	5544738	ReturnStatement	return false ;	146:2:3701:3713	5544646	0	True				
ANR	5544739	Identifier	false		5544646	0					
ANR	5544740	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	148:1:3719:3744	5544646	9	True				
ANR	5544741	CallExpression	"memcpy ( buf , data , len + 1 )"		5544646	0					
ANR	5544742	Callee	memcpy		5544646	0					
ANR	5544743	Identifier	memcpy		5544646	0					
ANR	5544744	ArgumentList	buf		5544646	1					
ANR	5544745	Argument	buf		5544646	0					
ANR	5544746	Identifier	buf		5544646	0					
ANR	5544747	Argument	data		5544646	1					
ANR	5544748	Identifier	data		5544646	0					
ANR	5544749	Argument	len + 1		5544646	2					
ANR	5544750	AdditiveExpression	len + 1		5544646	0		+			
ANR	5544751	Identifier	len		5544646	0					
ANR	5544752	PrimaryExpression	1		5544646	1					
ANR	5544753	ExpressionStatement	"r_str_replace_char ( buf , '(' , ',' )"	150:1:3748:3782	5544646	10	True				
ANR	5544754	CallExpression	"r_str_replace_char ( buf , '(' , ',' )"		5544646	0					
ANR	5544755	Callee	r_str_replace_char		5544646	0					
ANR	5544756	Identifier	r_str_replace_char		5544646	0					
ANR	5544757	ArgumentList	buf		5544646	1					
ANR	5544758	Argument	buf		5544646	0					
ANR	5544759	Identifier	buf		5544646	0					
ANR	5544760	Argument	'('		5544646	1					
ANR	5544761	PrimaryExpression	'('		5544646	0					
ANR	5544762	Argument	"','"		5544646	2					
ANR	5544763	PrimaryExpression	"','"		5544646	0					
ANR	5544764	ExpressionStatement	"r_str_replace_char ( buf , ')' , ' ' )"	151:1:3785:3819	5544646	11	True				
ANR	5544765	CallExpression	"r_str_replace_char ( buf , ')' , ' ' )"		5544646	0					
ANR	5544766	Callee	r_str_replace_char		5544646	0					
ANR	5544767	Identifier	r_str_replace_char		5544646	0					
ANR	5544768	ArgumentList	buf		5544646	1					
ANR	5544769	Argument	buf		5544646	0					
ANR	5544770	Identifier	buf		5544646	0					
ANR	5544771	Argument	')'		5544646	1					
ANR	5544772	PrimaryExpression	')'		5544646	0					
ANR	5544773	Argument	' '		5544646	2					
ANR	5544774	PrimaryExpression	' '		5544646	0					
ANR	5544775	ExpressionStatement	r_str_trim ( buf )	152:1:3822:3838	5544646	12	True				
ANR	5544776	CallExpression	r_str_trim ( buf )		5544646	0					
ANR	5544777	Callee	r_str_trim		5544646	0					
ANR	5544778	Identifier	r_str_trim		5544646	0					
ANR	5544779	ArgumentList	buf		5544646	1					
ANR	5544780	Argument	buf		5544646	0					
ANR	5544781	Identifier	buf		5544646	0					
ANR	5544782	IfStatement	if ( * buf )		5544646	13					
ANR	5544783	Condition	* buf	154:5:3846:3849	5544646	0	True				
ANR	5544784	UnaryOperationExpression	* buf		5544646	0					
ANR	5544785	UnaryOperator	*		5544646	0					
ANR	5544786	Identifier	buf		5544646	1					
ANR	5544787	CompoundStatement		25:11:423:423	5544646	1					
ANR	5544788	ExpressionStatement	w0 [ 0 ] = '\\0'	155:2:3856:3866	5544646	0	True				
ANR	5544789	AssignmentExpression	w0 [ 0 ] = '\\0'		5544646	0		=			
ANR	5544790	ArrayIndexing	w0 [ 0 ]		5544646	0					
ANR	5544791	Identifier	w0		5544646	0					
ANR	5544792	PrimaryExpression	0		5544646	1					
ANR	5544793	PrimaryExpression	'\\0'		5544646	1					
ANR	5544794	ExpressionStatement	w1 [ 0 ] = '\\0'	156:2:3870:3880	5544646	1	True				
ANR	5544795	AssignmentExpression	w1 [ 0 ] = '\\0'		5544646	0		=			
ANR	5544796	ArrayIndexing	w1 [ 0 ]		5544646	0					
ANR	5544797	Identifier	w1		5544646	0					
ANR	5544798	PrimaryExpression	0		5544646	1					
ANR	5544799	PrimaryExpression	'\\0'		5544646	1					
ANR	5544800	ExpressionStatement	w2 [ 0 ] = '\\0'	157:2:3884:3894	5544646	2	True				
ANR	5544801	AssignmentExpression	w2 [ 0 ] = '\\0'		5544646	0		=			
ANR	5544802	ArrayIndexing	w2 [ 0 ]		5544646	0					
ANR	5544803	Identifier	w2		5544646	0					
ANR	5544804	PrimaryExpression	0		5544646	1					
ANR	5544805	PrimaryExpression	'\\0'		5544646	1					
ANR	5544806	ExpressionStatement	w3 [ 0 ] = '\\0'	158:2:3898:3908	5544646	3	True				
ANR	5544807	AssignmentExpression	w3 [ 0 ] = '\\0'		5544646	0		=			
ANR	5544808	ArrayIndexing	w3 [ 0 ]		5544646	0					
ANR	5544809	Identifier	w3		5544646	0					
ANR	5544810	PrimaryExpression	0		5544646	1					
ANR	5544811	PrimaryExpression	'\\0'		5544646	1					
ANR	5544812	ExpressionStatement	w4 [ 0 ] = '\\0'	159:2:3912:3922	5544646	4	True				
ANR	5544813	AssignmentExpression	w4 [ 0 ] = '\\0'		5544646	0		=			
ANR	5544814	ArrayIndexing	w4 [ 0 ]		5544646	0					
ANR	5544815	Identifier	w4		5544646	0					
ANR	5544816	PrimaryExpression	0		5544646	1					
ANR	5544817	PrimaryExpression	'\\0'		5544646	1					
ANR	5544818	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	160:2:3926:3949	5544646	5	True				
ANR	5544819	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5544646	0		=			
ANR	5544820	Identifier	ptr		5544646	0					
ANR	5544821	CallExpression	"strchr ( buf , ' ' )"		5544646	1					
ANR	5544822	Callee	strchr		5544646	0					
ANR	5544823	Identifier	strchr		5544646	0					
ANR	5544824	ArgumentList	buf		5544646	1					
ANR	5544825	Argument	buf		5544646	0					
ANR	5544826	Identifier	buf		5544646	0					
ANR	5544827	Argument	' '		5544646	1					
ANR	5544828	PrimaryExpression	' '		5544646	0					
ANR	5544829	IfStatement	if ( ! ptr )		5544646	6					
ANR	5544830	Condition	! ptr	161:6:3957:3960	5544646	0	True				
ANR	5544831	UnaryOperationExpression	! ptr		5544646	0					
ANR	5544832	UnaryOperator	!		5544646	0					
ANR	5544833	Identifier	ptr		5544646	1					
ANR	5544834	CompoundStatement		32:12:534:534	5544646	1					
ANR	5544835	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	162:3:3968:3992	5544646	0	True				
ANR	5544836	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5544646	0		=			
ANR	5544837	Identifier	ptr		5544646	0					
ANR	5544838	CallExpression	"strchr ( buf , '\\t' )"		5544646	1					
ANR	5544839	Callee	strchr		5544646	0					
ANR	5544840	Identifier	strchr		5544646	0					
ANR	5544841	ArgumentList	buf		5544646	1					
ANR	5544842	Argument	buf		5544646	0					
ANR	5544843	Identifier	buf		5544646	0					
ANR	5544844	Argument	'\\t'		5544646	1					
ANR	5544845	PrimaryExpression	'\\t'		5544646	0					
ANR	5544846	IfStatement	if ( ptr )		5544646	7					
ANR	5544847	Condition	ptr	164:6:4004:4006	5544646	0	True				
ANR	5544848	Identifier	ptr		5544646	0					
ANR	5544849	CompoundStatement		35:11:580:580	5544646	1					
ANR	5544850	ExpressionStatement	* ptr = '\\0'	165:3:4014:4025	5544646	0	True				
ANR	5544851	AssignmentExpression	* ptr = '\\0'		5544646	0		=			
ANR	5544852	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544853	UnaryOperator	*		5544646	0					
ANR	5544854	Identifier	ptr		5544646	1					
ANR	5544855	PrimaryExpression	'\\0'		5544646	1					
ANR	5544856	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5544646	1					
ANR	5544857	ForInit	++ ptr ;	166:8:4035:4040	5544646	0	True				
ANR	5544858	UnaryExpression	++ ptr		5544646	0					
ANR	5544859	IncDec	++		5544646	0					
ANR	5544860	Identifier	ptr		5544646	1					
ANR	5544861	Condition	* ptr == ' '	166:15:4042:4052	5544646	1	True				
ANR	5544862	EqualityExpression	* ptr == ' '		5544646	0		==			
ANR	5544863	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544864	UnaryOperator	*		5544646	0					
ANR	5544865	Identifier	ptr		5544646	1					
ANR	5544866	PrimaryExpression	' '		5544646	1					
ANR	5544867	PostIncDecOperationExpression	ptr ++	166:28:4055:4059	5544646	2	True				
ANR	5544868	Identifier	ptr		5544646	0					
ANR	5544869	IncDec	++		5544646	1					
ANR	5544870	CompoundStatement		37:35:633:633	5544646	3					
ANR	5544871	ExpressionStatement		167:4:4068:4068	5544646	0	True				
ANR	5544872	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	169:3:4078:4104	5544646	2	True				
ANR	5544873	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5544646	0					
ANR	5544874	Callee	strncpy		5544646	0					
ANR	5544875	Identifier	strncpy		5544646	0					
ANR	5544876	ArgumentList	w0		5544646	1					
ANR	5544877	Argument	w0		5544646	0					
ANR	5544878	Identifier	w0		5544646	0					
ANR	5544879	Argument	buf		5544646	1					
ANR	5544880	Identifier	buf		5544646	0					
ANR	5544881	Argument	WSZ - 1		5544646	2					
ANR	5544882	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5544883	Identifier	WSZ		5544646	0					
ANR	5544884	PrimaryExpression	1		5544646	1					
ANR	5544885	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	170:3:4109:4135	5544646	3	True				
ANR	5544886	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5544646	0					
ANR	5544887	Callee	strncpy		5544646	0					
ANR	5544888	Identifier	strncpy		5544646	0					
ANR	5544889	ArgumentList	w1		5544646	1					
ANR	5544890	Argument	w1		5544646	0					
ANR	5544891	Identifier	w1		5544646	0					
ANR	5544892	Argument	ptr		5544646	1					
ANR	5544893	Identifier	ptr		5544646	0					
ANR	5544894	Argument	WSZ - 1		5544646	2					
ANR	5544895	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5544896	Identifier	WSZ		5544646	0					
ANR	5544897	PrimaryExpression	1		5544646	1					
ANR	5544898	ExpressionStatement	optr = ptr	172:3:4141:4149	5544646	4	True				
ANR	5544899	AssignmentExpression	optr = ptr		5544646	0		=			
ANR	5544900	Identifier	optr		5544646	0					
ANR	5544901	Identifier	ptr		5544646	1					
ANR	5544902	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	173:3:4154:4177	5544646	5	True				
ANR	5544903	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5544646	0		=			
ANR	5544904	Identifier	ptr		5544646	0					
ANR	5544905	CallExpression	"strchr ( ptr , ',' )"		5544646	1					
ANR	5544906	Callee	strchr		5544646	0					
ANR	5544907	Identifier	strchr		5544646	0					
ANR	5544908	ArgumentList	ptr		5544646	1					
ANR	5544909	Argument	ptr		5544646	0					
ANR	5544910	Identifier	ptr		5544646	0					
ANR	5544911	Argument	"','"		5544646	1					
ANR	5544912	PrimaryExpression	"','"		5544646	0					
ANR	5544913	IfStatement	if ( ptr )		5544646	6					
ANR	5544914	Condition	ptr	174:7:4186:4188	5544646	0	True				
ANR	5544915	Identifier	ptr		5544646	0					
ANR	5544916	CompoundStatement		45:12:762:762	5544646	1					
ANR	5544917	ExpressionStatement	* ptr = '\\0'	175:4:4197:4208	5544646	0	True				
ANR	5544918	AssignmentExpression	* ptr = '\\0'		5544646	0		=			
ANR	5544919	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544920	UnaryOperator	*		5544646	0					
ANR	5544921	Identifier	ptr		5544646	1					
ANR	5544922	PrimaryExpression	'\\0'		5544646	1					
ANR	5544923	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5544646	1					
ANR	5544924	ForInit	++ ptr ;	176:9:4219:4224	5544646	0	True				
ANR	5544925	UnaryExpression	++ ptr		5544646	0					
ANR	5544926	IncDec	++		5544646	0					
ANR	5544927	Identifier	ptr		5544646	1					
ANR	5544928	Condition	* ptr == ' '	176:16:4226:4236	5544646	1	True				
ANR	5544929	EqualityExpression	* ptr == ' '		5544646	0		==			
ANR	5544930	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544931	UnaryOperator	*		5544646	0					
ANR	5544932	Identifier	ptr		5544646	1					
ANR	5544933	PrimaryExpression	' '		5544646	1					
ANR	5544934	PostIncDecOperationExpression	ptr ++	176:29:4239:4243	5544646	2	True				
ANR	5544935	Identifier	ptr		5544646	0					
ANR	5544936	IncDec	++		5544646	1					
ANR	5544937	CompoundStatement		47:36:817:817	5544646	3					
ANR	5544938	ExpressionStatement		177:5:4253:4253	5544646	0	True				
ANR	5544939	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	179:4:4265:4292	5544646	2	True				
ANR	5544940	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5544646	0					
ANR	5544941	Callee	strncpy		5544646	0					
ANR	5544942	Identifier	strncpy		5544646	0					
ANR	5544943	ArgumentList	w1		5544646	1					
ANR	5544944	Argument	w1		5544646	0					
ANR	5544945	Identifier	w1		5544646	0					
ANR	5544946	Argument	optr		5544646	1					
ANR	5544947	Identifier	optr		5544646	0					
ANR	5544948	Argument	WSZ - 1		5544646	2					
ANR	5544949	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5544950	Identifier	WSZ		5544646	0					
ANR	5544951	PrimaryExpression	1		5544646	1					
ANR	5544952	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	180:4:4298:4324	5544646	3	True				
ANR	5544953	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5544646	0					
ANR	5544954	Callee	strncpy		5544646	0					
ANR	5544955	Identifier	strncpy		5544646	0					
ANR	5544956	ArgumentList	w2		5544646	1					
ANR	5544957	Argument	w2		5544646	0					
ANR	5544958	Identifier	w2		5544646	0					
ANR	5544959	Argument	ptr		5544646	1					
ANR	5544960	Identifier	ptr		5544646	0					
ANR	5544961	Argument	WSZ - 1		5544646	2					
ANR	5544962	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5544963	Identifier	WSZ		5544646	0					
ANR	5544964	PrimaryExpression	1		5544646	1					
ANR	5544965	ExpressionStatement	optr = ptr	181:4:4330:4338	5544646	4	True				
ANR	5544966	AssignmentExpression	optr = ptr		5544646	0		=			
ANR	5544967	Identifier	optr		5544646	0					
ANR	5544968	Identifier	ptr		5544646	1					
ANR	5544969	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	182:4:4344:4367	5544646	5	True				
ANR	5544970	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5544646	0		=			
ANR	5544971	Identifier	ptr		5544646	0					
ANR	5544972	CallExpression	"strchr ( ptr , ',' )"		5544646	1					
ANR	5544973	Callee	strchr		5544646	0					
ANR	5544974	Identifier	strchr		5544646	0					
ANR	5544975	ArgumentList	ptr		5544646	1					
ANR	5544976	Argument	ptr		5544646	0					
ANR	5544977	Identifier	ptr		5544646	0					
ANR	5544978	Argument	"','"		5544646	1					
ANR	5544979	PrimaryExpression	"','"		5544646	0					
ANR	5544980	IfStatement	if ( ptr )		5544646	6					
ANR	5544981	Condition	ptr	183:8:4377:4379	5544646	0	True				
ANR	5544982	Identifier	ptr		5544646	0					
ANR	5544983	CompoundStatement		54:13:953:953	5544646	1					
ANR	5544984	ExpressionStatement	* ptr = '\\0'	184:5:4389:4400	5544646	0	True				
ANR	5544985	AssignmentExpression	* ptr = '\\0'		5544646	0		=			
ANR	5544986	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544987	UnaryOperator	*		5544646	0					
ANR	5544988	Identifier	ptr		5544646	1					
ANR	5544989	PrimaryExpression	'\\0'		5544646	1					
ANR	5544990	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5544646	1					
ANR	5544991	ForInit	++ ptr ;	185:10:4412:4417	5544646	0	True				
ANR	5544992	UnaryExpression	++ ptr		5544646	0					
ANR	5544993	IncDec	++		5544646	0					
ANR	5544994	Identifier	ptr		5544646	1					
ANR	5544995	Condition	* ptr == ' '	185:17:4419:4429	5544646	1	True				
ANR	5544996	EqualityExpression	* ptr == ' '		5544646	0		==			
ANR	5544997	UnaryOperationExpression	* ptr		5544646	0					
ANR	5544998	UnaryOperator	*		5544646	0					
ANR	5544999	Identifier	ptr		5544646	1					
ANR	5545000	PrimaryExpression	' '		5544646	1					
ANR	5545001	PostIncDecOperationExpression	ptr ++	185:30:4432:4436	5544646	2	True				
ANR	5545002	Identifier	ptr		5544646	0					
ANR	5545003	IncDec	++		5544646	1					
ANR	5545004	CompoundStatement		56:37:1010:1010	5544646	3					
ANR	5545005	ExpressionStatement		186:6:4447:4447	5544646	0	True				
ANR	5545006	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	188:5:4461:4488	5544646	2	True				
ANR	5545007	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5544646	0					
ANR	5545008	Callee	strncpy		5544646	0					
ANR	5545009	Identifier	strncpy		5544646	0					
ANR	5545010	ArgumentList	w2		5544646	1					
ANR	5545011	Argument	w2		5544646	0					
ANR	5545012	Identifier	w2		5544646	0					
ANR	5545013	Argument	optr		5544646	1					
ANR	5545014	Identifier	optr		5544646	0					
ANR	5545015	Argument	WSZ - 1		5544646	2					
ANR	5545016	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5545017	Identifier	WSZ		5544646	0					
ANR	5545018	PrimaryExpression	1		5544646	1					
ANR	5545019	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	189:5:4495:4521	5544646	3	True				
ANR	5545020	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5544646	0					
ANR	5545021	Callee	strncpy		5544646	0					
ANR	5545022	Identifier	strncpy		5544646	0					
ANR	5545023	ArgumentList	w3		5544646	1					
ANR	5545024	Argument	w3		5544646	0					
ANR	5545025	Identifier	w3		5544646	0					
ANR	5545026	Argument	ptr		5544646	1					
ANR	5545027	Identifier	ptr		5544646	0					
ANR	5545028	Argument	WSZ - 1		5544646	2					
ANR	5545029	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5545030	Identifier	WSZ		5544646	0					
ANR	5545031	PrimaryExpression	1		5544646	1					
ANR	5545032	ExpressionStatement	optr = ptr	190:5:4528:4536	5544646	4	True				
ANR	5545033	AssignmentExpression	optr = ptr		5544646	0		=			
ANR	5545034	Identifier	optr		5544646	0					
ANR	5545035	Identifier	ptr		5544646	1					
ANR	5545036	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	192:5:4552:4575	5544646	5	True				
ANR	5545037	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5544646	0		=			
ANR	5545038	Identifier	ptr		5544646	0					
ANR	5545039	CallExpression	"strchr ( ptr , ',' )"		5544646	1					
ANR	5545040	Callee	strchr		5544646	0					
ANR	5545041	Identifier	strchr		5544646	0					
ANR	5545042	ArgumentList	ptr		5544646	1					
ANR	5545043	Argument	ptr		5544646	0					
ANR	5545044	Identifier	ptr		5544646	0					
ANR	5545045	Argument	"','"		5544646	1					
ANR	5545046	PrimaryExpression	"','"		5544646	0					
ANR	5545047	IfStatement	if ( ptr )		5544646	6					
ANR	5545048	Condition	ptr	193:9:4586:4588	5544646	0	True				
ANR	5545049	Identifier	ptr		5544646	0					
ANR	5545050	CompoundStatement		64:14:1162:1162	5544646	1					
ANR	5545051	ExpressionStatement	* ptr = '\\0'	194:6:4599:4610	5544646	0	True				
ANR	5545052	AssignmentExpression	* ptr = '\\0'		5544646	0		=			
ANR	5545053	UnaryOperationExpression	* ptr		5544646	0					
ANR	5545054	UnaryOperator	*		5544646	0					
ANR	5545055	Identifier	ptr		5544646	1					
ANR	5545056	PrimaryExpression	'\\0'		5544646	1					
ANR	5545057	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5544646	1					
ANR	5545058	ForInit	++ ptr ;	195:11:4623:4628	5544646	0	True				
ANR	5545059	UnaryExpression	++ ptr		5544646	0					
ANR	5545060	IncDec	++		5544646	0					
ANR	5545061	Identifier	ptr		5544646	1					
ANR	5545062	Condition	* ptr == ' '	195:18:4630:4640	5544646	1	True				
ANR	5545063	EqualityExpression	* ptr == ' '		5544646	0		==			
ANR	5545064	UnaryOperationExpression	* ptr		5544646	0					
ANR	5545065	UnaryOperator	*		5544646	0					
ANR	5545066	Identifier	ptr		5544646	1					
ANR	5545067	PrimaryExpression	' '		5544646	1					
ANR	5545068	PostIncDecOperationExpression	ptr ++	195:31:4643:4647	5544646	2	True				
ANR	5545069	Identifier	ptr		5544646	0					
ANR	5545070	IncDec	++		5544646	1					
ANR	5545071	CompoundStatement		66:38:1221:1221	5544646	3					
ANR	5545072	ExpressionStatement		196:7:4659:4659	5544646	0	True				
ANR	5545073	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	198:6:4675:4702	5544646	2	True				
ANR	5545074	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5544646	0					
ANR	5545075	Callee	strncpy		5544646	0					
ANR	5545076	Identifier	strncpy		5544646	0					
ANR	5545077	ArgumentList	w3		5544646	1					
ANR	5545078	Argument	w3		5544646	0					
ANR	5545079	Identifier	w3		5544646	0					
ANR	5545080	Argument	optr		5544646	1					
ANR	5545081	Identifier	optr		5544646	0					
ANR	5545082	Argument	WSZ - 1		5544646	2					
ANR	5545083	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5545084	Identifier	WSZ		5544646	0					
ANR	5545085	PrimaryExpression	1		5544646	1					
ANR	5545086	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	199:6:4710:4736	5544646	3	True				
ANR	5545087	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5544646	0					
ANR	5545088	Callee	strncpy		5544646	0					
ANR	5545089	Identifier	strncpy		5544646	0					
ANR	5545090	ArgumentList	w4		5544646	1					
ANR	5545091	Argument	w4		5544646	0					
ANR	5545092	Identifier	w4		5544646	0					
ANR	5545093	Argument	ptr		5544646	1					
ANR	5545094	Identifier	ptr		5544646	0					
ANR	5545095	Argument	WSZ - 1		5544646	2					
ANR	5545096	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5545097	Identifier	WSZ		5544646	0					
ANR	5545098	PrimaryExpression	1		5544646	1					
ANR	5545099	ElseStatement	else		5544646	0					
ANR	5545100	CompoundStatement		74:9:1336:1336	5544646	0					
ANR	5545101	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	204:3:4770:4796	5544646	0	True				
ANR	5545102	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5544646	0					
ANR	5545103	Callee	strncpy		5544646	0					
ANR	5545104	Identifier	strncpy		5544646	0					
ANR	5545105	ArgumentList	w0		5544646	1					
ANR	5545106	Argument	w0		5544646	0					
ANR	5545107	Identifier	w0		5544646	0					
ANR	5545108	Argument	buf		5544646	1					
ANR	5545109	Identifier	buf		5544646	0					
ANR	5545110	Argument	WSZ - 1		5544646	2					
ANR	5545111	AdditiveExpression	WSZ - 1		5544646	0		-			
ANR	5545112	Identifier	WSZ		5544646	0					
ANR	5545113	PrimaryExpression	1		5544646	1					
ANR	5545114	CompoundStatement		79:3:1426:1436	5544646	8					
ANR	5545115	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	207:3:4809:4850	5544646	0	True				
ANR	5545116	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5544646	0					
ANR	5545117	IdentifierDeclType	const char * [ ]		5544646	0					
ANR	5545118	Identifier	wa		5544646	1					
ANR	5545119	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5544646	2		=			
ANR	5545120	Identifier	wa		5544646	0					
ANR	5545121	InitializerList	w0		5544646	1					
ANR	5545122	Identifier	w0		5544646	0					
ANR	5545123	Identifier	w1		5544646	1					
ANR	5545124	Identifier	w2		5544646	2					
ANR	5545125	Identifier	w3		5544646	3					
ANR	5545126	Identifier	w4		5544646	4					
ANR	5545127	IdentifierDeclStatement	int nw = 0 ;	208:3:4855:4865	5544646	1	True				
ANR	5545128	IdentifierDecl	nw = 0		5544646	0					
ANR	5545129	IdentifierDeclType	int		5544646	0					
ANR	5545130	Identifier	nw		5544646	1					
ANR	5545131	AssignmentExpression	nw = 0		5544646	2		=			
ANR	5545132	Identifier	nw		5544646	0					
ANR	5545133	PrimaryExpression	0		5544646	1					
ANR	5545134	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5544646	2					
ANR	5545135	ForInit	i = 0 ;	209:8:4875:4878	5544646	0	True				
ANR	5545136	AssignmentExpression	i = 0		5544646	0		=			
ANR	5545137	Identifier	i		5544646	0					
ANR	5545138	PrimaryExpression	0		5544646	1					
ANR	5545139	Condition	i < 4	209:13:4880:4882	5544646	1	True				
ANR	5545140	RelationalExpression	i < 4		5544646	0		<			
ANR	5545141	Identifier	i		5544646	0					
ANR	5545142	PrimaryExpression	4		5544646	1					
ANR	5545143	PostIncDecOperationExpression	i ++	209:18:4885:4887	5544646	2	True				
ANR	5545144	Identifier	i		5544646	0					
ANR	5545145	IncDec	++		5544646	1					
ANR	5545146	CompoundStatement		80:23:1461:1461	5544646	3					
ANR	5545147	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5544646	0					
ANR	5545148	Condition	wa [ i ] [ 0 ] != '\\0'	210:8:4900:4915	5544646	0	True				
ANR	5545149	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5544646	0		!=			
ANR	5545150	ArrayIndexing	wa [ i ] [ 0 ]		5544646	0					
ANR	5545151	ArrayIndexing	wa [ i ]		5544646	0					
ANR	5545152	Identifier	wa		5544646	0					
ANR	5545153	Identifier	i		5544646	1					
ANR	5545154	PrimaryExpression	0		5544646	1					
ANR	5545155	PrimaryExpression	'\\0'		5544646	1					
ANR	5545156	CompoundStatement		81:26:1489:1489	5544646	1					
ANR	5545157	ExpressionStatement	nw ++	211:5:4925:4929	5544646	0	True				
ANR	5545158	PostIncDecOperationExpression	nw ++		5544646	0					
ANR	5545159	Identifier	nw		5544646	0					
ANR	5545160	IncDec	++		5544646	1					
ANR	5545161	ExpressionStatement	"replace ( nw , wa , str )"	214:3:4945:4966	5544646	3	True				
ANR	5545162	CallExpression	"replace ( nw , wa , str )"		5544646	0					
ANR	5545163	Callee	replace		5544646	0					
ANR	5545164	Identifier	replace		5544646	0					
ANR	5545165	ArgumentList	nw		5544646	1					
ANR	5545166	Argument	nw		5544646	0					
ANR	5545167	Identifier	nw		5544646	0					
ANR	5545168	Argument	wa		5544646	1					
ANR	5545169	Identifier	wa		5544646	0					
ANR	5545170	Argument	str		5544646	2					
ANR	5545171	Identifier	str		5544646	0					
ANR	5545172	CompoundStatement		87:1:1542:1564	5544646	4					
ANR	5545173	IdentifierDeclStatement	char * p = strdup ( str ) ;	216:1:4971:4993	5544646	0	True				
ANR	5545174	IdentifierDecl	* p = strdup ( str )		5544646	0					
ANR	5545175	IdentifierDeclType	char *		5544646	0					
ANR	5545176	Identifier	p		5544646	1					
ANR	5545177	AssignmentExpression	* p = strdup ( str )		5544646	2		=			
ANR	5545178	Identifier	p		5544646	0					
ANR	5545179	CallExpression	strdup ( str )		5544646	1					
ANR	5545180	Callee	strdup		5544646	0					
ANR	5545181	Identifier	strdup		5544646	0					
ANR	5545182	ArgumentList	str		5544646	1					
ANR	5545183	Argument	str		5544646	0					
ANR	5545184	Identifier	str		5544646	0					
ANR	5545185	ExpressionStatement	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"	217:1:4996:5033	5544646	1	True				
ANR	5545186	AssignmentExpression	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5544646	0		=			
ANR	5545187	Identifier	p		5544646	0					
ANR	5545188	CallExpression	"r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5544646	1					
ANR	5545189	Callee	r_str_replace		5544646	0					
ANR	5545190	Identifier	r_str_replace		5544646	0					
ANR	5545191	ArgumentList	p		5544646	1					
ANR	5545192	Argument	p		5544646	0					
ANR	5545193	Identifier	p		5544646	0					
ANR	5545194	Argument	"""+ -"""		5544646	1					
ANR	5545195	PrimaryExpression	"""+ -"""		5544646	0					
ANR	5545196	Argument	"""- """		5544646	2					
ANR	5545197	PrimaryExpression	"""- """		5544646	0					
ANR	5545198	Argument	0		5544646	3					
ANR	5545199	PrimaryExpression	0		5544646	0					
ANR	5545200	ExpressionStatement	"p = r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"	218:1:5036:5077	5544646	2	True				
ANR	5545201	AssignmentExpression	"p = r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"		5544646	0		=			
ANR	5545202	Identifier	p		5544646	0					
ANR	5545203	CallExpression	"r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"		5544646	1					
ANR	5545204	Callee	r_str_replace		5544646	0					
ANR	5545205	Identifier	r_str_replace		5544646	0					
ANR	5545206	ArgumentList	p		5544646	1					
ANR	5545207	Argument	p		5544646	0					
ANR	5545208	Identifier	p		5544646	0					
ANR	5545209	Argument	""" + ]"""		5544646	1					
ANR	5545210	PrimaryExpression	""" + ]"""		5544646	0					
ANR	5545211	Argument	""" + 0]"""		5544646	2					
ANR	5545212	PrimaryExpression	""" + 0]"""		5544646	0					
ANR	5545213	Argument	0		5544646	3					
ANR	5545214	PrimaryExpression	0		5544646	0					
ANR	5545215	ExpressionStatement	"p = r_str_replace ( p , ""zero"" , ""0"" , 1 )"	220:1:5081:5118	5544646	3	True				
ANR	5545216	AssignmentExpression	"p = r_str_replace ( p , ""zero"" , ""0"" , 1 )"		5544646	0		=			
ANR	5545217	Identifier	p		5544646	0					
ANR	5545218	CallExpression	"r_str_replace ( p , ""zero"" , ""0"" , 1 )"		5544646	1					
ANR	5545219	Callee	r_str_replace		5544646	0					
ANR	5545220	Identifier	r_str_replace		5544646	0					
ANR	5545221	ArgumentList	p		5544646	1					
ANR	5545222	Argument	p		5544646	0					
ANR	5545223	Identifier	p		5544646	0					
ANR	5545224	Argument	"""zero"""		5544646	1					
ANR	5545225	PrimaryExpression	"""zero"""		5544646	0					
ANR	5545226	Argument	"""0"""		5544646	2					
ANR	5545227	PrimaryExpression	"""0"""		5544646	0					
ANR	5545228	Argument	1		5544646	3					
ANR	5545229	PrimaryExpression	1		5544646	0					
ANR	5545230	IfStatement	"if ( ! strncmp ( p , ""0 = "" , 4 ) )"		5544646	4					
ANR	5545231	Condition	"! strncmp ( p , ""0 = "" , 4 )"	221:5:5125:5147	5544646	0	True				
ANR	5545232	UnaryOperationExpression	"! strncmp ( p , ""0 = "" , 4 )"		5544646	0					
ANR	5545233	UnaryOperator	!		5544646	0					
ANR	5545234	CallExpression	"strncmp ( p , ""0 = "" , 4 )"		5544646	1					
ANR	5545235	Callee	strncmp		5544646	0					
ANR	5545236	Identifier	strncmp		5544646	0					
ANR	5545237	ArgumentList	p		5544646	1					
ANR	5545238	Argument	p		5544646	0					
ANR	5545239	Identifier	p		5544646	0					
ANR	5545240	Argument	"""0 = """		5544646	1					
ANR	5545241	PrimaryExpression	"""0 = """		5544646	0					
ANR	5545242	Argument	4		5544646	2					
ANR	5545243	PrimaryExpression	4		5544646	0					
ANR	5545244	CompoundStatement		92:30:1721:1721	5544646	1					
ANR	5545245	ExpressionStatement	* p = 0	222:2:5154:5160	5544646	0	True				
ANR	5545246	AssignmentExpression	* p = 0		5544646	0		=			
ANR	5545247	UnaryOperationExpression	* p		5544646	0					
ANR	5545248	UnaryOperator	*		5544646	0					
ANR	5545249	Identifier	p		5544646	1					
ANR	5545250	PrimaryExpression	0		5544646	1					
ANR	5545251	IfStatement	"if ( ! strcmp ( w1 , w2 ) )"		5544646	5					
ANR	5545252	Condition	"! strcmp ( w1 , w2 )"	224:5:5177:5192	5544646	0	True				
ANR	5545253	UnaryOperationExpression	"! strcmp ( w1 , w2 )"		5544646	0					
ANR	5545254	UnaryOperator	!		5544646	0					
ANR	5545255	CallExpression	"strcmp ( w1 , w2 )"		5544646	1					
ANR	5545256	Callee	strcmp		5544646	0					
ANR	5545257	Identifier	strcmp		5544646	0					
ANR	5545258	ArgumentList	w1		5544646	1					
ANR	5545259	Argument	w1		5544646	0					
ANR	5545260	Identifier	w1		5544646	0					
ANR	5545261	Argument	w2		5544646	1					
ANR	5545262	Identifier	w2		5544646	0					
ANR	5545263	CompoundStatement		96:2:1770:1787	5544646	1					
ANR	5545264	IdentifierDeclStatement	"char a [ 32 ] , b [ 32 ] ;"	225:2:5199:5216	5544646	0	True				
ANR	5545265	IdentifierDecl	a [ 32 ]		5544646	0					
ANR	5545266	IdentifierDeclType	char [ 32 ]		5544646	0					
ANR	5545267	Identifier	a		5544646	1					
ANR	5545268	PrimaryExpression	32		5544646	2					
ANR	5545269	IdentifierDecl	b [ 32 ]		5544646	1					
ANR	5545270	IdentifierDeclType	char [ 32 ]		5544646	0					
ANR	5545271	Identifier	b		5544646	1					
ANR	5545272	PrimaryExpression	32		5544646	2					
ANR	5545273	Statement	define	226:1:5219:5224	5544646	1	True				
ANR	5545274	Statement	REPLACE	226:8:5226:5232	5544646	2	True				
ANR	5545275	Statement	(	226:15:5233:5233	5544646	3	True				
ANR	5545276	Statement	x	226:16:5234:5234	5544646	4	True				
ANR	5545277	Statement	","	226:17:5235:5235	5544646	5	True				
ANR	5545278	Statement	y	226:18:5236:5236	5544646	6	True				
ANR	5545279	Statement	)	226:19:5237:5237	5544646	7	True				
ANR	5545280	DoStatement	do		5544646	8					
ANR	5545281	CompoundStatement		99:2:1873:1917	5544646	0					
ANR	5545282	IdentifierDeclStatement	"int snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 ) ;"	227:2:5248:5296	5544646	0	True				
ANR	5545283	IdentifierDecl	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5544646	0					
ANR	5545284	IdentifierDeclType	int		5544646	0					
ANR	5545285	Identifier	snprintf_len1_		5544646	1					
ANR	5545286	AssignmentExpression	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5544646	2		=			
ANR	5545287	Identifier	snprintf_len1_		5544646	0					
ANR	5545288	CallExpression	"snprintf ( a , 32 , x , w1 , w1 )"		5544646	1					
ANR	5545289	Callee	snprintf		5544646	0					
ANR	5545290	Identifier	snprintf		5544646	0					
ANR	5545291	ArgumentList	a		5544646	1					
ANR	5545292	Argument	a		5544646	0					
ANR	5545293	Identifier	a		5544646	0					
ANR	5545294	Argument	32		5544646	1					
ANR	5545295	PrimaryExpression	32		5544646	0					
ANR	5545296	Argument	x		5544646	2					
ANR	5545297	Identifier	x		5544646	0					
ANR	5545298	Argument	w1		5544646	3					
ANR	5545299	Identifier	w1		5544646	0					
ANR	5545300	Argument	w1		5544646	4					
ANR	5545301	Identifier	w1		5544646	0					
ANR	5545302	IdentifierDeclStatement	"int snprintf_len2_ = snprintf ( b , 32 , y , w1 ) ;"	228:2:5302:5346	5544646	1	True				
ANR	5545303	IdentifierDecl	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5544646	0					
ANR	5545304	IdentifierDeclType	int		5544646	0					
ANR	5545305	Identifier	snprintf_len2_		5544646	1					
ANR	5545306	AssignmentExpression	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5544646	2		=			
ANR	5545307	Identifier	snprintf_len2_		5544646	0					
ANR	5545308	CallExpression	"snprintf ( b , 32 , y , w1 )"		5544646	1					
ANR	5545309	Callee	snprintf		5544646	0					
ANR	5545310	Identifier	snprintf		5544646	0					
ANR	5545311	ArgumentList	b		5544646	1					
ANR	5545312	Argument	b		5544646	0					
ANR	5545313	Identifier	b		5544646	0					
ANR	5545314	Argument	32		5544646	1					
ANR	5545315	PrimaryExpression	32		5544646	0					
ANR	5545316	Argument	y		5544646	2					
ANR	5545317	Identifier	y		5544646	0					
ANR	5545318	Argument	w1		5544646	3					
ANR	5545319	Identifier	w1		5544646	0					
ANR	5545320	IfStatement	if ( snprintf_len1_ < 32 && snprintf_len2_ < 32 )		5544646	2					
ANR	5545321	Condition	snprintf_len1_ < 32 && snprintf_len2_ < 32	229:6:5356:5397	5544646	0	True				
ANR	5545322	AndExpression	snprintf_len1_ < 32 && snprintf_len2_ < 32		5544646	0		&&			
ANR	5545323	RelationalExpression	snprintf_len1_ < 32		5544646	0		<			
ANR	5545324	Identifier	snprintf_len1_		5544646	0					
ANR	5545325	PrimaryExpression	32		5544646	1					
ANR	5545326	RelationalExpression	snprintf_len2_ < 32		5544646	1		<			
ANR	5545327	Identifier	snprintf_len2_		5544646	0					
ANR	5545328	PrimaryExpression	32		5544646	1					
ANR	5545329	CompoundStatement		100:50:1971:1971	5544646	1					
ANR	5545330	ExpressionStatement	"p = r_str_replace ( p , a , b , 0 )"	230:3:5407:5437	5544646	0	True				
ANR	5545331	AssignmentExpression	"p = r_str_replace ( p , a , b , 0 )"		5544646	0		=			
ANR	5545332	Identifier	p		5544646	0					
ANR	5545333	CallExpression	"r_str_replace ( p , a , b , 0 )"		5544646	1					
ANR	5545334	Callee	r_str_replace		5544646	0					
ANR	5545335	Identifier	r_str_replace		5544646	0					
ANR	5545336	ArgumentList	p		5544646	1					
ANR	5545337	Argument	p		5544646	0					
ANR	5545338	Identifier	p		5544646	0					
ANR	5545339	Argument	a		5544646	1					
ANR	5545340	Identifier	a		5544646	0					
ANR	5545341	Argument	b		5544646	2					
ANR	5545342	Identifier	b		5544646	0					
ANR	5545343	Argument	0		5544646	3					
ANR	5545344	PrimaryExpression	0		5544646	0					
ANR	5545345	Condition	0	232:10:5457:5457	5544646	1	True				
ANR	5545346	PrimaryExpression	0		5544646	0					
ANR	5545347	ExpressionStatement	"REPLACE ( ""%s = %s -"" , ""%s -="" )"	236:2:5517:5547	5544646	9	True				
ANR	5545348	CallExpression	"REPLACE ( ""%s = %s -"" , ""%s -="" )"		5544646	0					
ANR	5545349	Callee	REPLACE		5544646	0					
ANR	5545350	Identifier	REPLACE		5544646	0					
ANR	5545351	ArgumentList	"""%s = %s -"""		5544646	1					
ANR	5545352	Argument	"""%s = %s -"""		5544646	0					
ANR	5545353	PrimaryExpression	"""%s = %s -"""		5544646	0					
ANR	5545354	Argument	"""%s -="""		5544646	1					
ANR	5545355	PrimaryExpression	"""%s -="""		5544646	0					
ANR	5545356	ExpressionStatement	"REPLACE ( ""%s = %s &"" , ""%s &="" )"	237:2:5551:5581	5544646	10	True				
ANR	5545357	CallExpression	"REPLACE ( ""%s = %s &"" , ""%s &="" )"		5544646	0					
ANR	5545358	Callee	REPLACE		5544646	0					
ANR	5545359	Identifier	REPLACE		5544646	0					
ANR	5545360	ArgumentList	"""%s = %s &"""		5544646	1					
ANR	5545361	Argument	"""%s = %s &"""		5544646	0					
ANR	5545362	PrimaryExpression	"""%s = %s &"""		5544646	0					
ANR	5545363	Argument	"""%s &="""		5544646	1					
ANR	5545364	PrimaryExpression	"""%s &="""		5544646	0					
ANR	5545365	ExpressionStatement	"REPLACE ( ""%s = %s |"" , ""%s |="" )"	238:2:5585:5615	5544646	11	True				
ANR	5545366	CallExpression	"REPLACE ( ""%s = %s |"" , ""%s |="" )"		5544646	0					
ANR	5545367	Callee	REPLACE		5544646	0					
ANR	5545368	Identifier	REPLACE		5544646	0					
ANR	5545369	ArgumentList	"""%s = %s |"""		5544646	1					
ANR	5545370	Argument	"""%s = %s |"""		5544646	0					
ANR	5545371	PrimaryExpression	"""%s = %s |"""		5544646	0					
ANR	5545372	Argument	"""%s |="""		5544646	1					
ANR	5545373	PrimaryExpression	"""%s |="""		5544646	0					
ANR	5545374	ExpressionStatement	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"	239:2:5619:5649	5544646	12	True				
ANR	5545375	CallExpression	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"		5544646	0					
ANR	5545376	Callee	REPLACE		5544646	0					
ANR	5545377	Identifier	REPLACE		5544646	0					
ANR	5545378	ArgumentList	"""%s = %s ^"""		5544646	1					
ANR	5545379	Argument	"""%s = %s ^"""		5544646	0					
ANR	5545380	PrimaryExpression	"""%s = %s ^"""		5544646	0					
ANR	5545381	Argument	"""%s ^="""		5544646	1					
ANR	5545382	PrimaryExpression	"""%s ^="""		5544646	0					
ANR	5545383	ExpressionStatement	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"	240:2:5653:5685	5544646	13	True				
ANR	5545384	CallExpression	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"		5544646	0					
ANR	5545385	Callee	REPLACE		5544646	0					
ANR	5545386	Identifier	REPLACE		5544646	0					
ANR	5545387	ArgumentList	"""%s = %s >>"""		5544646	1					
ANR	5545388	Argument	"""%s = %s >>"""		5544646	0					
ANR	5545389	PrimaryExpression	"""%s = %s >>"""		5544646	0					
ANR	5545390	Argument	"""%s >>="""		5544646	1					
ANR	5545391	PrimaryExpression	"""%s >>="""		5544646	0					
ANR	5545392	ExpressionStatement	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"	241:2:5689:5721	5544646	14	True				
ANR	5545393	CallExpression	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"		5544646	0					
ANR	5545394	Callee	REPLACE		5544646	0					
ANR	5545395	Identifier	REPLACE		5544646	0					
ANR	5545396	ArgumentList	"""%s = %s <<"""		5544646	1					
ANR	5545397	Argument	"""%s = %s <<"""		5544646	0					
ANR	5545398	PrimaryExpression	"""%s = %s <<"""		5544646	0					
ANR	5545399	Argument	"""%s <<="""		5544646	1					
ANR	5545400	PrimaryExpression	"""%s <<="""		5544646	0					
ANR	5545401	ExpressionStatement	"p = r_str_replace ( p , "":"" , ""0000"" , 0 )"	243:1:5727:5764	5544646	6	True				
ANR	5545402	AssignmentExpression	"p = r_str_replace ( p , "":"" , ""0000"" , 0 )"		5544646	0		=			
ANR	5545403	Identifier	p		5544646	0					
ANR	5545404	CallExpression	"r_str_replace ( p , "":"" , ""0000"" , 0 )"		5544646	1					
ANR	5545405	Callee	r_str_replace		5544646	0					
ANR	5545406	Identifier	r_str_replace		5544646	0					
ANR	5545407	ArgumentList	p		5544646	1					
ANR	5545408	Argument	p		5544646	0					
ANR	5545409	Identifier	p		5544646	0					
ANR	5545410	Argument	""":"""		5544646	1					
ANR	5545411	PrimaryExpression	""":"""		5544646	0					
ANR	5545412	Argument	"""0000"""		5544646	2					
ANR	5545413	PrimaryExpression	"""0000"""		5544646	0					
ANR	5545414	Argument	0		5544646	3					
ANR	5545415	PrimaryExpression	0		5544646	0					
ANR	5545416	ExpressionStatement	"strcpy ( str , p )"	244:1:5767:5782	5544646	7	True				
ANR	5545417	CallExpression	"strcpy ( str , p )"		5544646	0					
ANR	5545418	Callee	strcpy		5544646	0					
ANR	5545419	Identifier	strcpy		5544646	0					
ANR	5545420	ArgumentList	str		5544646	1					
ANR	5545421	Argument	str		5544646	0					
ANR	5545422	Identifier	str		5544646	0					
ANR	5545423	Argument	p		5544646	1					
ANR	5545424	Identifier	p		5544646	0					
ANR	5545425	ExpressionStatement	free ( p )	245:1:5785:5793	5544646	8	True				
ANR	5545426	CallExpression	free ( p )		5544646	0					
ANR	5545427	Callee	free		5544646	0					
ANR	5545428	Identifier	free		5544646	0					
ANR	5545429	ArgumentList	p		5544646	1					
ANR	5545430	Argument	p		5544646	0					
ANR	5545431	Identifier	p		5544646	0					
ANR	5545432	ExpressionStatement	free ( buf )	249:1:5805:5815	5544646	14	True				
ANR	5545433	CallExpression	free ( buf )		5544646	0					
ANR	5545434	Callee	free		5544646	0					
ANR	5545435	Identifier	free		5544646	0					
ANR	5545436	ArgumentList	buf		5544646	1					
ANR	5545437	Argument	buf		5544646	0					
ANR	5545438	Identifier	buf		5544646	0					
ANR	5545439	ReturnStatement	return true ;	250:1:5818:5829	5544646	15	True				
ANR	5545440	Identifier	true		5544646	0					
ANR	5545441	ReturnType	static int		5544646	1					
ANR	5545442	Identifier	parse		5544646	2					
ANR	5545443	ParameterList	"RParse * p , const char * data , char * str"		5544646	3					
ANR	5545444	Parameter	RParse * p	130:17:3388:3396	5544646	0	True				
ANR	5545445	ParameterType	RParse *		5544646	0					
ANR	5545446	Identifier	p		5544646	1					
ANR	5545447	Parameter	const char * data	130:28:3399:3414	5544646	1	True				
ANR	5545448	ParameterType	const char *		5544646	0					
ANR	5545449	Identifier	data		5544646	1					
ANR	5545450	Parameter	char * str	130:46:3417:3425	5544646	2	True				
ANR	5545451	ParameterType	char *		5544646	0					
ANR	5545452	Identifier	str		5544646	1					
ANR	5545453	CFGEntryNode	ENTRY		5544646		True				
ANR	5545454	CFGExitNode	EXIT		5544646		True				
ANR	5545455	Symbol	* w4		5544646						
ANR	5545456	Symbol	* w3		5544646						
ANR	5545457	Symbol	* w2		5544646						
ANR	5545458	Symbol	* w1		5544646						
ANR	5545459	Symbol	data		5544646						
ANR	5545460	Symbol	strchr		5544646						
ANR	5545461	Symbol	nw		5544646						
ANR	5545462	Symbol	wa		5544646						
ANR	5545463	Symbol	strlen		5544646						
ANR	5545464	Symbol	strncmp		5544646						
ANR	5545465	Symbol	* wa		5544646						
ANR	5545466	Symbol	len		5544646						
ANR	5545467	Symbol	r_str_replace		5544646						
ANR	5545468	Symbol	* ptr		5544646						
ANR	5545469	Symbol	w0		5544646						
ANR	5545470	Symbol	w1		5544646						
ANR	5545471	Symbol	w2		5544646						
ANR	5545472	Symbol	w3		5544646						
ANR	5545473	Symbol	* w0		5544646						
ANR	5545474	Symbol	w4		5544646						
ANR	5545475	Symbol	snprintf_len1_		5544646						
ANR	5545476	Symbol	snprintf		5544646						
ANR	5545477	Symbol	strcmp		5544646						
ANR	5545478	Symbol	malloc		5544646						
ANR	5545479	Symbol	a		5544646						
ANR	5545480	Symbol	* buf		5544646						
ANR	5545481	Symbol	* * i		5544646						
ANR	5545482	Symbol	b		5544646						
ANR	5545483	Symbol	false		5544646						
ANR	5545484	Symbol	i		5544646						
ANR	5545485	Symbol	optr		5544646						
ANR	5545486	Symbol	ptr		5544646						
ANR	5545487	Symbol	p		5544646						
ANR	5545488	Symbol	str		5544646						
ANR	5545489	Symbol	snprintf_len2_		5544646						
ANR	5545490	Symbol	buf		5544646						
ANR	5545491	Symbol	* i		5544646						
ANR	5545492	Symbol	* * wa		5544646						
ANR	5545493	Symbol	true		5544646						
ANR	5545494	Symbol	x		5544646						
ANR	5545495	Symbol	y		5544646						
ANR	5545496	Symbol	* p		5544646						
ANR	5545497	Symbol	strdup		5544646						
ANR	5545498	Symbol	WSZ		5544646						
ANR	5545499	Function	varsub	253:0:5834:8573							
ANR	5545500	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5545499	0					
ANR	5545501	CompoundStatement		253:102:5936:8573	5545499	0					
ANR	5545502	IdentifierDeclStatement	RAnalVar * var ;	254:1:5939:5952	5545499	0	True				
ANR	5545503	IdentifierDecl	* var		5545499	0					
ANR	5545504	IdentifierDeclType	RAnalVar *		5545499	0					
ANR	5545505	Identifier	var		5545499	1					
ANR	5545506	IdentifierDeclStatement	RListIter * iter ;	255:1:5955:5970	5545499	1	True				
ANR	5545507	IdentifierDecl	* iter		5545499	0					
ANR	5545508	IdentifierDeclType	RListIter *		5545499	0					
ANR	5545509	Identifier	iter		5545499	1					
ANR	5545510	IdentifierDeclStatement	char * oldstr ;	256:1:5973:5985	5545499	2	True				
ANR	5545511	IdentifierDecl	* oldstr		5545499	0					
ANR	5545512	IdentifierDeclType	char *		5545499	0					
ANR	5545513	Identifier	oldstr		5545499	1					
ANR	5545514	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	257:1:5988:6014	5545499	3	True				
ANR	5545515	IdentifierDecl	* tstr = strdup ( data )		5545499	0					
ANR	5545516	IdentifierDeclType	char *		5545499	0					
ANR	5545517	Identifier	tstr		5545499	1					
ANR	5545518	AssignmentExpression	* tstr = strdup ( data )		5545499	2		=			
ANR	5545519	Identifier	tstr		5545499	0					
ANR	5545520	CallExpression	strdup ( data )		5545499	1					
ANR	5545521	Callee	strdup		5545499	0					
ANR	5545522	Identifier	strdup		5545499	0					
ANR	5545523	ArgumentList	data		5545499	1					
ANR	5545524	Argument	data		5545499	0					
ANR	5545525	Identifier	data		5545499	0					
ANR	5545526	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	258:1:6017:6044	5545499	4	True				
ANR	5545527	IdentifierDecl	* anal = p -> analb . anal		5545499	0					
ANR	5545528	IdentifierDeclType	RAnal *		5545499	0					
ANR	5545529	Identifier	anal		5545499	1					
ANR	5545530	AssignmentExpression	* anal = p -> analb . anal		5545499	2		=			
ANR	5545531	Identifier	anal		5545499	0					
ANR	5545532	MemberAccess	p -> analb . anal		5545499	1					
ANR	5545533	PtrMemberAccess	p -> analb		5545499	0					
ANR	5545534	Identifier	p		5545499	0					
ANR	5545535	Identifier	analb		5545499	1					
ANR	5545536	Identifier	anal		5545499	1					
ANR	5545537	IfStatement	if ( ! p -> varlist )		5545499	5					
ANR	5545538	Condition	! p -> varlist	260:5:6052:6062	5545499	0	True				
ANR	5545539	UnaryOperationExpression	! p -> varlist		5545499	0					
ANR	5545540	UnaryOperator	!		5545499	0					
ANR	5545541	PtrMemberAccess	p -> varlist		5545499	1					
ANR	5545542	Identifier	p		5545499	0					
ANR	5545543	Identifier	varlist		5545499	1					
ANR	5545544	CompoundStatement		8:18:128:128	5545499	1					
ANR	5545545	ExpressionStatement	free ( tstr )	261:2:6069:6080	5545499	0	True				
ANR	5545546	CallExpression	free ( tstr )		5545499	0					
ANR	5545547	Callee	free		5545499	0					
ANR	5545548	Identifier	free		5545499	0					
ANR	5545549	ArgumentList	tstr		5545499	1					
ANR	5545550	Argument	tstr		5545499	0					
ANR	5545551	Identifier	tstr		5545499	0					
ANR	5545552	ReturnStatement	return false ;	262:2:6084:6096	5545499	1	True				
ANR	5545553	Identifier	false		5545499	0					
ANR	5545554	IdentifierDeclStatement	"RList * bpargs = p -> varlist ( anal , f , 'b' ) ;"	264:1:6102:6143	5545499	6	True				
ANR	5545555	IdentifierDecl	"* bpargs = p -> varlist ( anal , f , 'b' )"		5545499	0					
ANR	5545556	IdentifierDeclType	RList *		5545499	0					
ANR	5545557	Identifier	bpargs		5545499	1					
ANR	5545558	AssignmentExpression	"* bpargs = p -> varlist ( anal , f , 'b' )"		5545499	2		=			
ANR	5545559	Identifier	bpargs		5545499	0					
ANR	5545560	CallExpression	"p -> varlist ( anal , f , 'b' )"		5545499	1					
ANR	5545561	Callee	p -> varlist		5545499	0					
ANR	5545562	PtrMemberAccess	p -> varlist		5545499	0					
ANR	5545563	Identifier	p		5545499	0					
ANR	5545564	Identifier	varlist		5545499	1					
ANR	5545565	ArgumentList	anal		5545499	1					
ANR	5545566	Argument	anal		5545499	0					
ANR	5545567	Identifier	anal		5545499	0					
ANR	5545568	Argument	f		5545499	1					
ANR	5545569	Identifier	f		5545499	0					
ANR	5545570	Argument	'b'		5545499	2					
ANR	5545571	PrimaryExpression	'b'		5545499	0					
ANR	5545572	IdentifierDeclStatement	"RList * spargs = p -> varlist ( anal , f , 's' ) ;"	265:1:6146:6187	5545499	7	True				
ANR	5545573	IdentifierDecl	"* spargs = p -> varlist ( anal , f , 's' )"		5545499	0					
ANR	5545574	IdentifierDeclType	RList *		5545499	0					
ANR	5545575	Identifier	spargs		5545499	1					
ANR	5545576	AssignmentExpression	"* spargs = p -> varlist ( anal , f , 's' )"		5545499	2		=			
ANR	5545577	Identifier	spargs		5545499	0					
ANR	5545578	CallExpression	"p -> varlist ( anal , f , 's' )"		5545499	1					
ANR	5545579	Callee	p -> varlist		5545499	0					
ANR	5545580	PtrMemberAccess	p -> varlist		5545499	0					
ANR	5545581	Identifier	p		5545499	0					
ANR	5545582	Identifier	varlist		5545499	1					
ANR	5545583	ArgumentList	anal		5545499	1					
ANR	5545584	Argument	anal		5545499	0					
ANR	5545585	Identifier	anal		5545499	0					
ANR	5545586	Argument	f		5545499	1					
ANR	5545587	Identifier	f		5545499	0					
ANR	5545588	Argument	's'		5545499	2					
ANR	5545589	PrimaryExpression	's'		5545499	0					
ANR	5545590	IdentifierDeclStatement	const bool ucase = IS_UPPER ( * tstr ) ;	266:1:6190:6225	5545499	8	True				
ANR	5545591	IdentifierDecl	ucase = IS_UPPER ( * tstr )		5545499	0					
ANR	5545592	IdentifierDeclType	const bool		5545499	0					
ANR	5545593	Identifier	ucase		5545499	1					
ANR	5545594	AssignmentExpression	ucase = IS_UPPER ( * tstr )		5545499	2		=			
ANR	5545595	Identifier	ucase		5545499	0					
ANR	5545596	CallExpression	IS_UPPER ( * tstr )		5545499	1					
ANR	5545597	Callee	IS_UPPER		5545499	0					
ANR	5545598	Identifier	IS_UPPER		5545499	0					
ANR	5545599	ArgumentList	* tstr		5545499	1					
ANR	5545600	Argument	* tstr		5545499	0					
ANR	5545601	UnaryOperationExpression	* tstr		5545499	0					
ANR	5545602	UnaryOperator	*		5545499	0					
ANR	5545603	Identifier	tstr		5545499	1					
ANR	5545604	Statement	r_list_foreach	267:1:6228:6241	5545499	9	True				
ANR	5545605	Statement	(	267:16:6243:6243	5545499	10	True				
ANR	5545606	Statement	spargs	267:17:6244:6249	5545499	11	True				
ANR	5545607	Statement	","	267:23:6250:6250	5545499	12	True				
ANR	5545608	Statement	iter	267:25:6252:6255	5545499	13	True				
ANR	5545609	Statement	","	267:29:6256:6256	5545499	14	True				
ANR	5545610	Statement	var	267:31:6258:6260	5545499	15	True				
ANR	5545611	Statement	)	267:34:6261:6261	5545499	16	True				
ANR	5545612	CompoundStatement		16:2:330:340	5545499	17					
ANR	5545613	IdentifierDeclStatement	char * tmpf ;	268:2:6267:6277	5545499	0	True				
ANR	5545614	IdentifierDecl	* tmpf		5545499	0					
ANR	5545615	IdentifierDeclType	char *		5545499	0					
ANR	5545616	Identifier	tmpf		5545499	1					
ANR	5545617	IfStatement	if ( var -> delta < 10 )		5545499	1					
ANR	5545618	Condition	var -> delta < 10	270:6:6312:6326	5545499	0	True				
ANR	5545619	RelationalExpression	var -> delta < 10		5545499	0		<			
ANR	5545620	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545621	Identifier	var		5545499	0					
ANR	5545622	Identifier	delta		5545499	1					
ANR	5545623	PrimaryExpression	10		5545499	1					
ANR	5545624	CompoundStatement		18:23:392:392	5545499	1					
ANR	5545625	ExpressionStatement	"tmpf = ""%d(%s)"""	271:3:6334:6349	5545499	0	True				
ANR	5545626	AssignmentExpression	"tmpf = ""%d(%s)"""		5545499	0		=			
ANR	5545627	Identifier	tmpf		5545499	0					
ANR	5545628	PrimaryExpression	"""%d(%s)"""		5545499	1					
ANR	5545629	ElseStatement	else		5545499	0					
ANR	5545630	IfStatement	if ( var -> delta > 0 )		5545499	0					
ANR	5545631	Condition	var -> delta > 0	272:13:6364:6377	5545499	0	True				
ANR	5545632	RelationalExpression	var -> delta > 0		5545499	0		>			
ANR	5545633	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545634	Identifier	var		5545499	0					
ANR	5545635	Identifier	delta		5545499	1					
ANR	5545636	PrimaryExpression	0		5545499	1					
ANR	5545637	CompoundStatement		20:29:443:443	5545499	1					
ANR	5545638	ExpressionStatement	"tmpf = ""0x%x(%s)"""	273:3:6385:6402	5545499	0	True				
ANR	5545639	AssignmentExpression	"tmpf = ""0x%x(%s)"""		5545499	0		=			
ANR	5545640	Identifier	tmpf		5545499	0					
ANR	5545641	PrimaryExpression	"""0x%x(%s)"""		5545499	1					
ANR	5545642	ElseStatement	else		5545499	0					
ANR	5545643	CompoundStatement		22:9:476:476	5545499	0					
ANR	5545644	ExpressionStatement	"tmpf = ""-0x%x(%s)"""	275:3:6418:6436	5545499	0	True				
ANR	5545645	AssignmentExpression	"tmpf = ""-0x%x(%s)"""		5545499	0		=			
ANR	5545646	Identifier	tmpf		5545499	0					
ANR	5545647	PrimaryExpression	"""-0x%x(%s)"""		5545499	1					
ANR	5545648	ExpressionStatement	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"	277:2:6444:6525	5545499	2	True				
ANR	5545649	AssignmentExpression	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	0		=			
ANR	5545650	Identifier	oldstr		5545499	0					
ANR	5545651	CallExpression	"r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	1					
ANR	5545652	Callee	r_str_newf		5545499	0					
ANR	5545653	Identifier	r_str_newf		5545499	0					
ANR	5545654	ArgumentList	tmpf		5545499	1					
ANR	5545655	Argument	tmpf		5545499	0					
ANR	5545656	Identifier	tmpf		5545499	0					
ANR	5545657	Argument	r_num_abs ( var -> delta )		5545499	1					
ANR	5545658	CallExpression	r_num_abs ( var -> delta )		5545499	0					
ANR	5545659	Callee	r_num_abs		5545499	0					
ANR	5545660	Identifier	r_num_abs		5545499	0					
ANR	5545661	ArgumentList	var -> delta		5545499	1					
ANR	5545662	Argument	var -> delta		5545499	0					
ANR	5545663	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545664	Identifier	var		5545499	0					
ANR	5545665	Identifier	delta		5545499	1					
ANR	5545666	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	2					
ANR	5545667	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	0					
ANR	5545668	PtrMemberAccess	anal -> reg -> name		5545499	0					
ANR	5545669	PtrMemberAccess	anal -> reg		5545499	0					
ANR	5545670	Identifier	anal		5545499	0					
ANR	5545671	Identifier	reg		5545499	1					
ANR	5545672	Identifier	name		5545499	1					
ANR	5545673	Identifier	R_REG_NAME_SP		5545499	1					
ANR	5545674	IfStatement	if ( ucase )		5545499	3					
ANR	5545675	Condition	ucase	278:6:6533:6537	5545499	0	True				
ANR	5545676	Identifier	ucase		5545499	0					
ANR	5545677	CompoundStatement		27:3:608:642	5545499	1					
ANR	5545678	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	279:3:6545:6579	5545499	0	True				
ANR	5545679	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5545499	0					
ANR	5545680	IdentifierDeclType	char *		5545499	0					
ANR	5545681	Identifier	comma		5545499	1					
ANR	5545682	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5545499	2		=			
ANR	5545683	Identifier	comma		5545499	0					
ANR	5545684	CallExpression	"strchr ( oldstr , ',' )"		5545499	1					
ANR	5545685	Callee	strchr		5545499	0					
ANR	5545686	Identifier	strchr		5545499	0					
ANR	5545687	ArgumentList	oldstr		5545499	1					
ANR	5545688	Argument	oldstr		5545499	0					
ANR	5545689	Identifier	oldstr		5545499	0					
ANR	5545690	Argument	"','"		5545499	1					
ANR	5545691	PrimaryExpression	"','"		5545499	0					
ANR	5545692	IfStatement	if ( comma )		5545499	1					
ANR	5545693	Condition	comma	280:28:6609:6613	5545499	0	True				
ANR	5545694	Identifier	comma		5545499	0					
ANR	5545695	CompoundStatement		28:35:679:679	5545499	1					
ANR	5545696	ExpressionStatement	* comma = 0	281:32:6650:6660	5545499	0	True				
ANR	5545697	AssignmentExpression	* comma = 0		5545499	0		=			
ANR	5545698	UnaryOperationExpression	* comma		5545499	0					
ANR	5545699	UnaryOperator	*		5545499	0					
ANR	5545700	Identifier	comma		5545499	1					
ANR	5545701	PrimaryExpression	0		5545499	1					
ANR	5545702	ExpressionStatement	"r_str_case ( oldstr , true )"	282:32:6694:6719	5545499	1	True				
ANR	5545703	CallExpression	"r_str_case ( oldstr , true )"		5545499	0					
ANR	5545704	Callee	r_str_case		5545499	0					
ANR	5545705	Identifier	r_str_case		5545499	0					
ANR	5545706	ArgumentList	oldstr		5545499	1					
ANR	5545707	Argument	oldstr		5545499	0					
ANR	5545708	Identifier	oldstr		5545499	0					
ANR	5545709	Argument	true		5545499	1					
ANR	5545710	Identifier	true		5545499	0					
ANR	5545711	ExpressionStatement	"* comma = ','"	283:32:6753:6765	5545499	2	True				
ANR	5545712	AssignmentExpression	"* comma = ','"		5545499	0		=			
ANR	5545713	UnaryOperationExpression	* comma		5545499	0					
ANR	5545714	UnaryOperator	*		5545499	0					
ANR	5545715	Identifier	comma		5545499	1					
ANR	5545716	PrimaryExpression	"','"		5545499	1					
ANR	5545717	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5545499	4					
ANR	5545718	Condition	"strstr ( tstr , oldstr )"	286:6:6817:6837	5545499	0	True				
ANR	5545719	CallExpression	"strstr ( tstr , oldstr )"		5545499	0					
ANR	5545720	Callee	strstr		5545499	0					
ANR	5545721	Identifier	strstr		5545499	0					
ANR	5545722	ArgumentList	tstr		5545499	1					
ANR	5545723	Argument	tstr		5545499	0					
ANR	5545724	Identifier	tstr		5545499	0					
ANR	5545725	Argument	oldstr		5545499	1					
ANR	5545726	Identifier	oldstr		5545499	0					
ANR	5545727	CompoundStatement		35:3:908:1079	5545499	1					
ANR	5545728	IdentifierDeclStatement	"char * newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] ) ;"	287:3:6845:7016	5545499	0	True				
ANR	5545729	IdentifierDecl	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	0					
ANR	5545730	IdentifierDeclType	char *		5545499	0					
ANR	5545731	Identifier	newstr		5545499	1					
ANR	5545732	AssignmentExpression	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	2		=			
ANR	5545733	Identifier	newstr		5545499	0					
ANR	5545734	ConditionalExpression	"( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	1					
ANR	5545735	Condition	p -> localvar_only		5545499	0					
ANR	5545736	PtrMemberAccess	p -> localvar_only		5545499	0					
ANR	5545737	Identifier	p		5545499	0					
ANR	5545738	Identifier	localvar_only		5545499	1					
ANR	5545739	CallExpression	"r_str_newf ( ""(%s)"" , var -> name )"		5545499	1					
ANR	5545740	Callee	r_str_newf		5545499	0					
ANR	5545741	Identifier	r_str_newf		5545499	0					
ANR	5545742	ArgumentList	"""(%s)"""		5545499	1					
ANR	5545743	Argument	"""(%s)"""		5545499	0					
ANR	5545744	PrimaryExpression	"""(%s)"""		5545499	0					
ANR	5545745	Argument	var -> name		5545499	1					
ANR	5545746	PtrMemberAccess	var -> name		5545499	0					
ANR	5545747	Identifier	var		5545499	0					
ANR	5545748	Identifier	name		5545499	1					
ANR	5545749	CallExpression	"r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	2					
ANR	5545750	Callee	r_str_newf		5545499	0					
ANR	5545751	Identifier	r_str_newf		5545499	0					
ANR	5545752	ArgumentList	"""%s%s(%s)"""		5545499	1					
ANR	5545753	Argument	"""%s%s(%s)"""		5545499	0					
ANR	5545754	PrimaryExpression	"""%s%s(%s)"""		5545499	0					
ANR	5545755	Argument	"var -> delta > 0 ? """" : ""-"""		5545499	1					
ANR	5545756	ConditionalExpression	"var -> delta > 0 ? """" : ""-"""		5545499	0					
ANR	5545757	Condition	var -> delta > 0		5545499	0					
ANR	5545758	RelationalExpression	var -> delta > 0		5545499	0		>			
ANR	5545759	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545760	Identifier	var		5545499	0					
ANR	5545761	Identifier	delta		5545499	1					
ANR	5545762	PrimaryExpression	0		5545499	1					
ANR	5545763	PrimaryExpression	""""""		5545499	1					
ANR	5545764	PrimaryExpression	"""-"""		5545499	2					
ANR	5545765	Argument	var -> name		5545499	2					
ANR	5545766	PtrMemberAccess	var -> name		5545499	0					
ANR	5545767	Identifier	var		5545499	0					
ANR	5545768	Identifier	name		5545499	1					
ANR	5545769	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	3					
ANR	5545770	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	0					
ANR	5545771	PtrMemberAccess	anal -> reg -> name		5545499	0					
ANR	5545772	PtrMemberAccess	anal -> reg		5545499	0					
ANR	5545773	Identifier	anal		5545499	0					
ANR	5545774	Identifier	reg		5545499	1					
ANR	5545775	Identifier	name		5545499	1					
ANR	5545776	Identifier	R_REG_NAME_SP		5545499	1					
ANR	5545777	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	290:3:7021:7067	5545499	1	True				
ANR	5545778	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5545499	0		=			
ANR	5545779	Identifier	tstr		5545499	0					
ANR	5545780	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5545499	1					
ANR	5545781	Callee	r_str_replace		5545499	0					
ANR	5545782	Identifier	r_str_replace		5545499	0					
ANR	5545783	ArgumentList	tstr		5545499	1					
ANR	5545784	Argument	tstr		5545499	0					
ANR	5545785	Identifier	tstr		5545499	0					
ANR	5545786	Argument	oldstr		5545499	1					
ANR	5545787	Identifier	oldstr		5545499	0					
ANR	5545788	Argument	newstr		5545499	2					
ANR	5545789	Identifier	newstr		5545499	0					
ANR	5545790	Argument	1		5545499	3					
ANR	5545791	PrimaryExpression	1		5545499	0					
ANR	5545792	ExpressionStatement	free ( newstr )	291:3:7072:7085	5545499	2	True				
ANR	5545793	CallExpression	free ( newstr )		5545499	0					
ANR	5545794	Callee	free		5545499	0					
ANR	5545795	Identifier	free		5545499	0					
ANR	5545796	ArgumentList	newstr		5545499	1					
ANR	5545797	Argument	newstr		5545499	0					
ANR	5545798	Identifier	newstr		5545499	0					
ANR	5545799	ExpressionStatement	free ( oldstr )	292:3:7090:7103	5545499	3	True				
ANR	5545800	CallExpression	free ( oldstr )		5545499	0					
ANR	5545801	Callee	free		5545499	0					
ANR	5545802	Identifier	free		5545499	0					
ANR	5545803	ArgumentList	oldstr		5545499	1					
ANR	5545804	Argument	oldstr		5545499	0					
ANR	5545805	Identifier	oldstr		5545499	0					
ANR	5545806	BreakStatement	break ;	293:3:7108:7113	5545499	4	True				
ANR	5545807	ExpressionStatement	free ( oldstr )	295:2:7121:7134	5545499	5	True				
ANR	5545808	CallExpression	free ( oldstr )		5545499	0					
ANR	5545809	Callee	free		5545499	0					
ANR	5545810	Identifier	free		5545499	0					
ANR	5545811	ArgumentList	oldstr		5545499	1					
ANR	5545812	Argument	oldstr		5545499	0					
ANR	5545813	Identifier	oldstr		5545499	0					
ANR	5545814	Statement	r_list_foreach	297:1:7140:7153	5545499	18	True				
ANR	5545815	Statement	(	297:16:7155:7155	5545499	19	True				
ANR	5545816	Statement	bpargs	297:17:7156:7161	5545499	20	True				
ANR	5545817	Statement	","	297:23:7162:7162	5545499	21	True				
ANR	5545818	Statement	iter	297:25:7164:7167	5545499	22	True				
ANR	5545819	Statement	","	297:29:7168:7168	5545499	23	True				
ANR	5545820	Statement	var	297:31:7170:7172	5545499	24	True				
ANR	5545821	Statement	)	297:34:7173:7173	5545499	25	True				
ANR	5545822	CompoundStatement		46:16:1256:1273	5545499	26					
ANR	5545823	IdentifierDeclStatement	char * tmpf = NULL ;	298:16:7193:7210	5545499	0	True				
ANR	5545824	IdentifierDecl	* tmpf = NULL		5545499	0					
ANR	5545825	IdentifierDeclType	char *		5545499	0					
ANR	5545826	Identifier	tmpf		5545499	1					
ANR	5545827	AssignmentExpression	* tmpf = NULL		5545499	2		=			
ANR	5545828	Identifier	NULL		5545499	0					
ANR	5545829	Identifier	NULL		5545499	1					
ANR	5545830	IfStatement	if ( var -> delta < 10 )		5545499	1					
ANR	5545831	Condition	var -> delta < 10	299:20:7232:7246	5545499	0	True				
ANR	5545832	RelationalExpression	var -> delta < 10		5545499	0		<			
ANR	5545833	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545834	Identifier	var		5545499	0					
ANR	5545835	Identifier	delta		5545499	1					
ANR	5545836	PrimaryExpression	10		5545499	1					
ANR	5545837	CompoundStatement		47:37:1312:1312	5545499	1					
ANR	5545838	ExpressionStatement	"tmpf = ""%d(%s)"""	300:24:7275:7290	5545499	0	True				
ANR	5545839	AssignmentExpression	"tmpf = ""%d(%s)"""		5545499	0		=			
ANR	5545840	Identifier	tmpf		5545499	0					
ANR	5545841	PrimaryExpression	"""%d(%s)"""		5545499	1					
ANR	5545842	ElseStatement	else		5545499	0					
ANR	5545843	IfStatement	if ( var -> delta > 0 )		5545499	0					
ANR	5545844	Condition	var -> delta > 0	301:27:7319:7332	5545499	0	True				
ANR	5545845	RelationalExpression	var -> delta > 0		5545499	0		>			
ANR	5545846	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545847	Identifier	var		5545499	0					
ANR	5545848	Identifier	delta		5545499	1					
ANR	5545849	PrimaryExpression	0		5545499	1					
ANR	5545850	CompoundStatement		49:43:1398:1398	5545499	1					
ANR	5545851	ExpressionStatement	"tmpf = ""0x%x(%s)"""	302:24:7361:7378	5545499	0	True				
ANR	5545852	AssignmentExpression	"tmpf = ""0x%x(%s)"""		5545499	0		=			
ANR	5545853	Identifier	tmpf		5545499	0					
ANR	5545854	PrimaryExpression	"""0x%x(%s)"""		5545499	1					
ANR	5545855	ElseStatement	else		5545499	0					
ANR	5545856	CompoundStatement		51:23:1466:1466	5545499	0					
ANR	5545857	ExpressionStatement	"tmpf = ""-0x%x(%s)"""	304:24:7429:7447	5545499	0	True				
ANR	5545858	AssignmentExpression	"tmpf = ""-0x%x(%s)"""		5545499	0		=			
ANR	5545859	Identifier	tmpf		5545499	0					
ANR	5545860	PrimaryExpression	"""-0x%x(%s)"""		5545499	1					
ANR	5545861	ExpressionStatement	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"	306:16:7483:7568	5545499	2	True				
ANR	5545862	AssignmentExpression	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"		5545499	0		=			
ANR	5545863	Identifier	oldstr		5545499	0					
ANR	5545864	CallExpression	"r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"		5545499	1					
ANR	5545865	Callee	r_str_newf		5545499	0					
ANR	5545866	Identifier	r_str_newf		5545499	0					
ANR	5545867	ArgumentList	tmpf		5545499	1					
ANR	5545868	Argument	tmpf		5545499	0					
ANR	5545869	Identifier	tmpf		5545499	0					
ANR	5545870	Argument	r_num_abs ( var -> delta )		5545499	1					
ANR	5545871	CallExpression	r_num_abs ( var -> delta )		5545499	0					
ANR	5545872	Callee	r_num_abs		5545499	0					
ANR	5545873	Identifier	r_num_abs		5545499	0					
ANR	5545874	ArgumentList	var -> delta		5545499	1					
ANR	5545875	Argument	var -> delta		5545499	0					
ANR	5545876	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545877	Identifier	var		5545499	0					
ANR	5545878	Identifier	delta		5545499	1					
ANR	5545879	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5545499	2					
ANR	5545880	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5545499	0					
ANR	5545881	PtrMemberAccess	anal -> reg -> name		5545499	0					
ANR	5545882	PtrMemberAccess	anal -> reg		5545499	0					
ANR	5545883	Identifier	anal		5545499	0					
ANR	5545884	Identifier	reg		5545499	1					
ANR	5545885	Identifier	name		5545499	1					
ANR	5545886	Identifier	R_REG_NAME_BP		5545499	1					
ANR	5545887	IfStatement	if ( ucase )		5545499	3					
ANR	5545888	Condition	ucase	308:20:7590:7594	5545499	0	True				
ANR	5545889	Identifier	ucase		5545499	0					
ANR	5545890	CompoundStatement		57:24:1686:1720	5545499	1					
ANR	5545891	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	309:24:7623:7657	5545499	0	True				
ANR	5545892	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5545499	0					
ANR	5545893	IdentifierDeclType	char *		5545499	0					
ANR	5545894	Identifier	comma		5545499	1					
ANR	5545895	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5545499	2		=			
ANR	5545896	Identifier	comma		5545499	0					
ANR	5545897	CallExpression	"strchr ( oldstr , ',' )"		5545499	1					
ANR	5545898	Callee	strchr		5545499	0					
ANR	5545899	Identifier	strchr		5545499	0					
ANR	5545900	ArgumentList	oldstr		5545499	1					
ANR	5545901	Argument	oldstr		5545499	0					
ANR	5545902	Identifier	oldstr		5545499	0					
ANR	5545903	Argument	"','"		5545499	1					
ANR	5545904	PrimaryExpression	"','"		5545499	0					
ANR	5545905	IfStatement	if ( comma )		5545499	1					
ANR	5545906	Condition	comma	310:28:7687:7691	5545499	0	True				
ANR	5545907	Identifier	comma		5545499	0					
ANR	5545908	CompoundStatement		58:35:1757:1757	5545499	1					
ANR	5545909	ExpressionStatement	* comma = 0	311:32:7728:7738	5545499	0	True				
ANR	5545910	AssignmentExpression	* comma = 0		5545499	0		=			
ANR	5545911	UnaryOperationExpression	* comma		5545499	0					
ANR	5545912	UnaryOperator	*		5545499	0					
ANR	5545913	Identifier	comma		5545499	1					
ANR	5545914	PrimaryExpression	0		5545499	1					
ANR	5545915	ExpressionStatement	"r_str_case ( oldstr , true )"	312:32:7772:7797	5545499	1	True				
ANR	5545916	CallExpression	"r_str_case ( oldstr , true )"		5545499	0					
ANR	5545917	Callee	r_str_case		5545499	0					
ANR	5545918	Identifier	r_str_case		5545499	0					
ANR	5545919	ArgumentList	oldstr		5545499	1					
ANR	5545920	Argument	oldstr		5545499	0					
ANR	5545921	Identifier	oldstr		5545499	0					
ANR	5545922	Argument	true		5545499	1					
ANR	5545923	Identifier	true		5545499	0					
ANR	5545924	ExpressionStatement	"* comma = ','"	313:32:7831:7843	5545499	2	True				
ANR	5545925	AssignmentExpression	"* comma = ','"		5545499	0		=			
ANR	5545926	UnaryOperationExpression	* comma		5545499	0					
ANR	5545927	UnaryOperator	*		5545499	0					
ANR	5545928	Identifier	comma		5545499	1					
ANR	5545929	PrimaryExpression	"','"		5545499	1					
ANR	5545930	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5545499	4					
ANR	5545931	Condition	"strstr ( tstr , oldstr )"	316:20:7909:7929	5545499	0	True				
ANR	5545932	CallExpression	"strstr ( tstr , oldstr )"		5545499	0					
ANR	5545933	Callee	strstr		5545499	0					
ANR	5545934	Identifier	strstr		5545499	0					
ANR	5545935	ArgumentList	tstr		5545499	1					
ANR	5545936	Argument	tstr		5545499	0					
ANR	5545937	Identifier	tstr		5545499	0					
ANR	5545938	Argument	oldstr		5545499	1					
ANR	5545939	Identifier	oldstr		5545499	0					
ANR	5545940	CompoundStatement		65:24:2021:2192	5545499	1					
ANR	5545941	IdentifierDeclStatement	"char * newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] ) ;"	317:24:7958:8129	5545499	0	True				
ANR	5545942	IdentifierDecl	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	0					
ANR	5545943	IdentifierDeclType	char *		5545499	0					
ANR	5545944	Identifier	newstr		5545499	1					
ANR	5545945	AssignmentExpression	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	2		=			
ANR	5545946	Identifier	newstr		5545499	0					
ANR	5545947	ConditionalExpression	"( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	1					
ANR	5545948	Condition	p -> localvar_only		5545499	0					
ANR	5545949	PtrMemberAccess	p -> localvar_only		5545499	0					
ANR	5545950	Identifier	p		5545499	0					
ANR	5545951	Identifier	localvar_only		5545499	1					
ANR	5545952	CallExpression	"r_str_newf ( ""(%s)"" , var -> name )"		5545499	1					
ANR	5545953	Callee	r_str_newf		5545499	0					
ANR	5545954	Identifier	r_str_newf		5545499	0					
ANR	5545955	ArgumentList	"""(%s)"""		5545499	1					
ANR	5545956	Argument	"""(%s)"""		5545499	0					
ANR	5545957	PrimaryExpression	"""(%s)"""		5545499	0					
ANR	5545958	Argument	var -> name		5545499	1					
ANR	5545959	PtrMemberAccess	var -> name		5545499	0					
ANR	5545960	Identifier	var		5545499	0					
ANR	5545961	Identifier	name		5545499	1					
ANR	5545962	CallExpression	"r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5545499	2					
ANR	5545963	Callee	r_str_newf		5545499	0					
ANR	5545964	Identifier	r_str_newf		5545499	0					
ANR	5545965	ArgumentList	"""%s%s(%s)"""		5545499	1					
ANR	5545966	Argument	"""%s%s(%s)"""		5545499	0					
ANR	5545967	PrimaryExpression	"""%s%s(%s)"""		5545499	0					
ANR	5545968	Argument	"var -> delta > 0 ? """" : ""-"""		5545499	1					
ANR	5545969	ConditionalExpression	"var -> delta > 0 ? """" : ""-"""		5545499	0					
ANR	5545970	Condition	var -> delta > 0		5545499	0					
ANR	5545971	RelationalExpression	var -> delta > 0		5545499	0		>			
ANR	5545972	PtrMemberAccess	var -> delta		5545499	0					
ANR	5545973	Identifier	var		5545499	0					
ANR	5545974	Identifier	delta		5545499	1					
ANR	5545975	PrimaryExpression	0		5545499	1					
ANR	5545976	PrimaryExpression	""""""		5545499	1					
ANR	5545977	PrimaryExpression	"""-"""		5545499	2					
ANR	5545978	Argument	var -> name		5545499	2					
ANR	5545979	PtrMemberAccess	var -> name		5545499	0					
ANR	5545980	Identifier	var		5545499	0					
ANR	5545981	Identifier	name		5545499	1					
ANR	5545982	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	3					
ANR	5545983	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5545499	0					
ANR	5545984	PtrMemberAccess	anal -> reg -> name		5545499	0					
ANR	5545985	PtrMemberAccess	anal -> reg		5545499	0					
ANR	5545986	Identifier	anal		5545499	0					
ANR	5545987	Identifier	reg		5545499	1					
ANR	5545988	Identifier	name		5545499	1					
ANR	5545989	Identifier	R_REG_NAME_SP		5545499	1					
ANR	5545990	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	320:24:8155:8201	5545499	1	True				
ANR	5545991	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5545499	0		=			
ANR	5545992	Identifier	tstr		5545499	0					
ANR	5545993	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5545499	1					
ANR	5545994	Callee	r_str_replace		5545499	0					
ANR	5545995	Identifier	r_str_replace		5545499	0					
ANR	5545996	ArgumentList	tstr		5545499	1					
ANR	5545997	Argument	tstr		5545499	0					
ANR	5545998	Identifier	tstr		5545499	0					
ANR	5545999	Argument	oldstr		5545499	1					
ANR	5546000	Identifier	oldstr		5545499	0					
ANR	5546001	Argument	newstr		5545499	2					
ANR	5546002	Identifier	newstr		5545499	0					
ANR	5546003	Argument	1		5545499	3					
ANR	5546004	PrimaryExpression	1		5545499	0					
ANR	5546005	ExpressionStatement	free ( newstr )	321:24:8227:8240	5545499	2	True				
ANR	5546006	CallExpression	free ( newstr )		5545499	0					
ANR	5546007	Callee	free		5545499	0					
ANR	5546008	Identifier	free		5545499	0					
ANR	5546009	ArgumentList	newstr		5545499	1					
ANR	5546010	Argument	newstr		5545499	0					
ANR	5546011	Identifier	newstr		5545499	0					
ANR	5546012	ExpressionStatement	free ( oldstr )	322:24:8266:8279	5545499	3	True				
ANR	5546013	CallExpression	free ( oldstr )		5545499	0					
ANR	5546014	Callee	free		5545499	0					
ANR	5546015	Identifier	free		5545499	0					
ANR	5546016	ArgumentList	oldstr		5545499	1					
ANR	5546017	Argument	oldstr		5545499	0					
ANR	5546018	Identifier	oldstr		5545499	0					
ANR	5546019	BreakStatement	break ;	323:24:8305:8310	5545499	4	True				
ANR	5546020	ExpressionStatement	free ( oldstr )	325:16:8346:8359	5545499	5	True				
ANR	5546021	CallExpression	free ( oldstr )		5545499	0					
ANR	5546022	Callee	free		5545499	0					
ANR	5546023	Identifier	free		5545499	0					
ANR	5546024	ArgumentList	oldstr		5545499	1					
ANR	5546025	Argument	oldstr		5545499	0					
ANR	5546026	Identifier	oldstr		5545499	0					
ANR	5546027	IdentifierDeclStatement	bool ret = true ;	327:1:8365:8380	5545499	27	True				
ANR	5546028	IdentifierDecl	ret = true		5545499	0					
ANR	5546029	IdentifierDeclType	bool		5545499	0					
ANR	5546030	Identifier	ret		5545499	1					
ANR	5546031	AssignmentExpression	ret = true		5545499	2		=			
ANR	5546032	Identifier	true		5545499	0					
ANR	5546033	Identifier	true		5545499	1					
ANR	5546034	IfStatement	if ( len > strlen ( tstr ) )		5545499	28					
ANR	5546035	Condition	len > strlen ( tstr )	328:5:8387:8405	5545499	0	True				
ANR	5546036	RelationalExpression	len > strlen ( tstr )		5545499	0		>			
ANR	5546037	Identifier	len		5545499	0					
ANR	5546038	CallExpression	strlen ( tstr )		5545499	1					
ANR	5546039	Callee	strlen		5545499	0					
ANR	5546040	Identifier	strlen		5545499	0					
ANR	5546041	ArgumentList	tstr		5545499	1					
ANR	5546042	Argument	tstr		5545499	0					
ANR	5546043	Identifier	tstr		5545499	0					
ANR	5546044	CompoundStatement		76:26:2471:2471	5545499	1					
ANR	5546045	ExpressionStatement	"strcpy ( str , tstr )"	329:2:8412:8430	5545499	0	True				
ANR	5546046	CallExpression	"strcpy ( str , tstr )"		5545499	0					
ANR	5546047	Callee	strcpy		5545499	0					
ANR	5546048	Identifier	strcpy		5545499	0					
ANR	5546049	ArgumentList	str		5545499	1					
ANR	5546050	Argument	str		5545499	0					
ANR	5546051	Identifier	str		5545499	0					
ANR	5546052	Argument	tstr		5545499	1					
ANR	5546053	Identifier	tstr		5545499	0					
ANR	5546054	ElseStatement	else		5545499	0					
ANR	5546055	CompoundStatement		78:8:2503:2503	5545499	0					
ANR	5546056	ExpressionStatement	ret = false	332:2:8484:8495	5545499	0	True				
ANR	5546057	AssignmentExpression	ret = false		5545499	0		=			
ANR	5546058	Identifier	ret		5545499	0					
ANR	5546059	Identifier	false		5545499	1					
ANR	5546060	ExpressionStatement	free ( tstr )	334:1:8501:8512	5545499	29	True				
ANR	5546061	CallExpression	free ( tstr )		5545499	0					
ANR	5546062	Callee	free		5545499	0					
ANR	5546063	Identifier	free		5545499	0					
ANR	5546064	ArgumentList	tstr		5545499	1					
ANR	5546065	Argument	tstr		5545499	0					
ANR	5546066	Identifier	tstr		5545499	0					
ANR	5546067	ExpressionStatement	r_list_free ( bpargs )	335:1:8515:8535	5545499	30	True				
ANR	5546068	CallExpression	r_list_free ( bpargs )		5545499	0					
ANR	5546069	Callee	r_list_free		5545499	0					
ANR	5546070	Identifier	r_list_free		5545499	0					
ANR	5546071	ArgumentList	bpargs		5545499	1					
ANR	5546072	Argument	bpargs		5545499	0					
ANR	5546073	Identifier	bpargs		5545499	0					
ANR	5546074	ExpressionStatement	r_list_free ( spargs )	336:1:8538:8558	5545499	31	True				
ANR	5546075	CallExpression	r_list_free ( spargs )		5545499	0					
ANR	5546076	Callee	r_list_free		5545499	0					
ANR	5546077	Identifier	r_list_free		5545499	0					
ANR	5546078	ArgumentList	spargs		5545499	1					
ANR	5546079	Argument	spargs		5545499	0					
ANR	5546080	Identifier	spargs		5545499	0					
ANR	5546081	ReturnStatement	return ret ;	337:1:8561:8571	5545499	32	True				
ANR	5546082	Identifier	ret		5545499	0					
ANR	5546083	ReturnType	static bool		5545499	1					
ANR	5546084	Identifier	varsub		5545499	2					
ANR	5546085	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5545499	3					
ANR	5546086	Parameter	RParse * p	253:19:5853:5861	5545499	0	True				
ANR	5546087	ParameterType	RParse *		5545499	0					
ANR	5546088	Identifier	p		5545499	1					
ANR	5546089	Parameter	RAnalFunction * f	253:30:5864:5879	5545499	1	True				
ANR	5546090	ParameterType	RAnalFunction *		5545499	0					
ANR	5546091	Identifier	f		5545499	1					
ANR	5546092	Parameter	ut64 addr	253:48:5882:5890	5545499	2	True				
ANR	5546093	ParameterType	ut64		5545499	0					
ANR	5546094	Identifier	addr		5545499	1					
ANR	5546095	Parameter	int oplen	253:59:5893:5901	5545499	3	True				
ANR	5546096	ParameterType	int		5545499	0					
ANR	5546097	Identifier	oplen		5545499	1					
ANR	5546098	Parameter	char * data	253:70:5904:5913	5545499	4	True				
ANR	5546099	ParameterType	char *		5545499	0					
ANR	5546100	Identifier	data		5545499	1					
ANR	5546101	Parameter	char * str	253:82:5916:5924	5545499	5	True				
ANR	5546102	ParameterType	char *		5545499	0					
ANR	5546103	Identifier	str		5545499	1					
ANR	5546104	Parameter	int len	253:93:5927:5933	5545499	6	True				
ANR	5546105	ParameterType	int		5545499	0					
ANR	5546106	Identifier	len		5545499	1					
ANR	5546107	CFGEntryNode	ENTRY		5545499		True				
ANR	5546108	CFGExitNode	EXIT		5545499		True				
ANR	5546109	CFGErrorNode	ERROR		5545499		True				
ANR	5546110	Symbol	anal -> reg		5545499						
ANR	5546111	Symbol	data		5545499						
ANR	5546112	Symbol	p -> varlist		5545499						
ANR	5546113	Symbol	strchr		5545499						
ANR	5546114	Symbol	tstr		5545499						
ANR	5546115	Symbol	var -> delta		5545499						
ANR	5546116	Symbol	strlen		5545499						
ANR	5546117	Symbol	len		5545499						
ANR	5546118	Symbol	tmpf		5545499						
ANR	5546119	Symbol	anal -> reg -> name		5545499						
ANR	5546120	Symbol	R_REG_NAME_BP		5545499						
ANR	5546121	Symbol	ret		5545499						
ANR	5546122	Symbol	oldstr		5545499						
ANR	5546123	Symbol	NULL		5545499						
ANR	5546124	Symbol	var		5545499						
ANR	5546125	Symbol	r_num_abs		5545499						
ANR	5546126	Symbol	iter		5545499						
ANR	5546127	Symbol	spargs		5545499						
ANR	5546128	Symbol	str		5545499						
ANR	5546129	Symbol	R_REG_NAME_SP		5545499						
ANR	5546130	Symbol	anal		5545499						
ANR	5546131	Symbol	strstr		5545499						
ANR	5546132	Symbol	bpargs		5545499						
ANR	5546133	Symbol	true		5545499						
ANR	5546134	Symbol	var -> name		5545499						
ANR	5546135	Symbol	ucase		5545499						
ANR	5546136	Symbol	* anal -> reg -> name		5545499						
ANR	5546137	Symbol	* R_REG_NAME_SP		5545499						
ANR	5546138	Symbol	oplen		5545499						
ANR	5546139	Symbol	r_str_newf		5545499						
ANR	5546140	Symbol	p -> localvar_only		5545499						
ANR	5546141	Symbol	* var		5545499						
ANR	5546142	Symbol	* * anal		5545499						
ANR	5546143	Symbol	* anal		5545499						
ANR	5546144	Symbol	* anal -> reg		5545499						
ANR	5546145	Symbol	* * * anal		5545499						
ANR	5546146	Symbol	* tstr		5545499						
ANR	5546147	Symbol	r_str_replace		5545499						
ANR	5546148	Symbol	p -> analb . anal		5545499						
ANR	5546149	Symbol	* comma		5545499						
ANR	5546150	Symbol	* * anal -> reg		5545499						
ANR	5546151	Symbol	addr		5545499						
ANR	5546152	Symbol	f		5545499						
ANR	5546153	Symbol	p -> analb		5545499						
ANR	5546154	Symbol	IS_UPPER		5545499						
ANR	5546155	Symbol	false		5545499						
ANR	5546156	Symbol	newstr		5545499						
ANR	5546157	Symbol	p		5545499						
ANR	5546158	Symbol	comma		5545499						
ANR	5546159	Symbol	* R_REG_NAME_BP		5545499						
ANR	5546160	Symbol	* p		5545499						
ANR	5546161	Symbol	strdup		5545499						
ANR	5546162	DeclStmt									
ANR	5546163	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_mips_pseudo
ANR	5546164	DeclStmt									
ANR	5546165	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
