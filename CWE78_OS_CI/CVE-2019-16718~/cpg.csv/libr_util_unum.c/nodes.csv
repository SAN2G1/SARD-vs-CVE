command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5262398	File	data/converged/CVE-2019-16718~_radare2/libr_util_unum.c								
ANR	5262399	DeclStmt									
ANR	5262400	Decl							ut64	"ut64 ( RNum * num , const char * hex )"	r_num_tailff
ANR	5262401	Function	r_srand	14:0:266:377							
ANR	5262402	FunctionDef	r_srand (int seed)		5262401	0					
ANR	5262403	CompoundStatement		14:30:296:377	5262401	0					
ANR	5262404	ExpressionStatement	( void ) seed	17:1:337:347	5262401	0	True				
ANR	5262405	CastExpression	( void ) seed		5262401	0					
ANR	5262406	CastTarget	void		5262401	0					
ANR	5262407	Identifier	seed		5262401	1					
ANR	5262408	ReturnType	static void		5262401	1					
ANR	5262409	Identifier	r_srand		5262401	2					
ANR	5262410	ParameterList	int seed		5262401	3					
ANR	5262411	Parameter	int seed	14:20:286:293	5262401	0	True				
ANR	5262412	ParameterType	int		5262401	0					
ANR	5262413	Identifier	seed		5262401	1					
ANR	5262414	CFGEntryNode	ENTRY		5262401		True				
ANR	5262415	CFGExitNode	EXIT		5262401		True				
ANR	5262416	Symbol	seed		5262401						
ANR	5262417	Function	r_rand	23:0:380:512							
ANR	5262418	FunctionDef	r_rand (int mod)		5262417	0					
ANR	5262419	CompoundStatement		23:27:407:512	5262417	0					
ANR	5262420	ReturnStatement	return ( int ) arc4random_uniform ( mod ) ;	25:1:438:474	5262417	0	True				
ANR	5262421	CastExpression	( int ) arc4random_uniform ( mod )		5262417	0					
ANR	5262422	CastTarget	int		5262417	0					
ANR	5262423	CallExpression	arc4random_uniform ( mod )		5262417	1					
ANR	5262424	Callee	arc4random_uniform		5262417	0					
ANR	5262425	Identifier	arc4random_uniform		5262417	0					
ANR	5262426	ArgumentList	mod		5262417	1					
ANR	5262427	Argument	mod		5262417	0					
ANR	5262428	Identifier	mod		5262417	0					
ANR	5262429	ReturnType	static int		5262417	1					
ANR	5262430	Identifier	r_rand		5262417	2					
ANR	5262431	ParameterList	int mod		5262417	3					
ANR	5262432	Parameter	int mod	23:18:398:404	5262417	0	True				
ANR	5262433	ParameterType	int		5262417	0					
ANR	5262434	Identifier	mod		5262417	1					
ANR	5262435	CFGEntryNode	ENTRY		5262417		True				
ANR	5262436	CFGExitNode	EXIT		5262417		True				
ANR	5262437	Symbol	arc4random_uniform		5262417						
ANR	5262438	Symbol	mod		5262417						
ANR	5262439	Function	r_num_irand	31:0:515:567							
ANR	5262440	FunctionDef	r_num_irand ()		5262439	0					
ANR	5262441	CompoundStatement		31:25:540:567	5262439	0					
ANR	5262442	ExpressionStatement	r_srand ( r_sys_now ( ) )	32:1:543:565	5262439	0	True				
ANR	5262443	CallExpression	r_srand ( r_sys_now ( ) )		5262439	0					
ANR	5262444	Callee	r_srand		5262439	0					
ANR	5262445	Identifier	r_srand		5262439	0					
ANR	5262446	ArgumentList	r_sys_now ( )		5262439	1					
ANR	5262447	Argument	r_sys_now ( )		5262439	0					
ANR	5262448	CallExpression	r_sys_now ( )		5262439	0					
ANR	5262449	Callee	r_sys_now		5262439	0					
ANR	5262450	Identifier	r_sys_now		5262439	0					
ANR	5262451	ArgumentList			5262439	1					
ANR	5262452	ReturnType	R_API void		5262439	1					
ANR	5262453	Identifier	r_num_irand		5262439	2					
ANR	5262454	ParameterList			5262439	3					
ANR	5262455	CFGEntryNode	ENTRY		5262439		True				
ANR	5262456	CFGExitNode	EXIT		5262439		True				
ANR	5262457	Symbol	r_sys_now		5262439						
ANR	5262458	Function	r_num_rand	35:0:570:764							
ANR	5262459	FunctionDef	r_num_rand (int max)		5262458	0					
ANR	5262460	CompoundStatement		35:30:600:764	5262458	0					
ANR	5262461	Statement	static	36:1:603:608	5262458	0	True				
ANR	5262462	IdentifierDeclStatement	bool rand_initialized = false ;	36:8:610:639	5262458	1	True				
ANR	5262463	IdentifierDecl	rand_initialized = false		5262458	0					
ANR	5262464	IdentifierDeclType	bool		5262458	0					
ANR	5262465	Identifier	rand_initialized		5262458	1					
ANR	5262466	AssignmentExpression	rand_initialized = false		5262458	2		=			
ANR	5262467	Identifier	false		5262458	0					
ANR	5262468	Identifier	false		5262458	1					
ANR	5262469	IfStatement	if ( ! rand_initialized )		5262458	2					
ANR	5262470	Condition	! rand_initialized	37:5:646:662	5262458	0	True				
ANR	5262471	UnaryOperationExpression	! rand_initialized		5262458	0					
ANR	5262472	UnaryOperator	!		5262458	0					
ANR	5262473	Identifier	rand_initialized		5262458	1					
ANR	5262474	CompoundStatement		3:24:64:64	5262458	1					
ANR	5262475	ExpressionStatement	r_num_irand ( )	38:2:669:683	5262458	0	True				
ANR	5262476	CallExpression	r_num_irand ( )		5262458	0					
ANR	5262477	Callee	r_num_irand		5262458	0					
ANR	5262478	Identifier	r_num_irand		5262458	0					
ANR	5262479	ArgumentList			5262458	1					
ANR	5262480	ExpressionStatement	rand_initialized = true	39:2:687:710	5262458	1	True				
ANR	5262481	AssignmentExpression	rand_initialized = true		5262458	0		=			
ANR	5262482	Identifier	rand_initialized		5262458	0					
ANR	5262483	Identifier	true		5262458	1					
ANR	5262484	IfStatement	if ( ! max )		5262458	3					
ANR	5262485	Condition	! max	41:5:720:723	5262458	0	True				
ANR	5262486	UnaryOperationExpression	! max		5262458	0					
ANR	5262487	UnaryOperator	!		5262458	0					
ANR	5262488	Identifier	max		5262458	1					
ANR	5262489	CompoundStatement		7:11:125:125	5262458	1					
ANR	5262490	ExpressionStatement	max = 1	42:2:730:737	5262458	0	True				
ANR	5262491	AssignmentExpression	max = 1		5262458	0		=			
ANR	5262492	Identifier	max		5262458	0					
ANR	5262493	PrimaryExpression	1		5262458	1					
ANR	5262494	ReturnStatement	return r_rand ( max ) ;	44:1:743:762	5262458	4	True				
ANR	5262495	CallExpression	r_rand ( max )		5262458	0					
ANR	5262496	Callee	r_rand		5262458	0					
ANR	5262497	Identifier	r_rand		5262458	0					
ANR	5262498	ArgumentList	max		5262458	1					
ANR	5262499	Argument	max		5262458	0					
ANR	5262500	Identifier	max		5262458	0					
ANR	5262501	ReturnType	R_API int		5262458	1					
ANR	5262502	Identifier	r_num_rand		5262458	2					
ANR	5262503	ParameterList	int max		5262458	3					
ANR	5262504	Parameter	int max	35:21:591:597	5262458	0	True				
ANR	5262505	ParameterType	int		5262458	0					
ANR	5262506	Identifier	max		5262458	1					
ANR	5262507	CFGEntryNode	ENTRY		5262458		True				
ANR	5262508	CFGExitNode	EXIT		5262458		True				
ANR	5262509	Symbol	max		5262458						
ANR	5262510	Symbol	rand_initialized		5262458						
ANR	5262511	Symbol	false		5262458						
ANR	5262512	Symbol	true		5262458						
ANR	5262513	Symbol	r_rand		5262458						
ANR	5262514	Function	r_num_minmax_swap	47:0:767:875							
ANR	5262515	FunctionDef	"r_num_minmax_swap (ut64 * a , ut64 * b)"		5262514	0					
ANR	5262516	CompoundStatement		47:47:814:875	5262514	0					
ANR	5262517	IfStatement	if ( * a > * b )		5262514	0					
ANR	5262518	Condition	* a > * b	48:5:821:827	5262514	0	True				
ANR	5262519	RelationalExpression	* a > * b		5262514	0		>			
ANR	5262520	UnaryOperationExpression	* a		5262514	0					
ANR	5262521	UnaryOperator	*		5262514	0					
ANR	5262522	Identifier	a		5262514	1					
ANR	5262523	UnaryOperationExpression	* b		5262514	1					
ANR	5262524	UnaryOperator	*		5262514	0					
ANR	5262525	Identifier	b		5262514	1					
ANR	5262526	CompoundStatement		3:2:19:32	5262514	1					
ANR	5262527	IdentifierDeclStatement	ut64 tmp = * a ;	49:2:834:847	5262514	0	True				
ANR	5262528	IdentifierDecl	tmp = * a		5262514	0					
ANR	5262529	IdentifierDeclType	ut64		5262514	0					
ANR	5262530	Identifier	tmp		5262514	1					
ANR	5262531	AssignmentExpression	tmp = * a		5262514	2		=			
ANR	5262532	Identifier	tmp		5262514	0					
ANR	5262533	UnaryOperationExpression	* a		5262514	1					
ANR	5262534	UnaryOperator	*		5262514	0					
ANR	5262535	Identifier	a		5262514	1					
ANR	5262536	ExpressionStatement	* a = * b	50:2:851:858	5262514	1	True				
ANR	5262537	AssignmentExpression	* a = * b		5262514	0		=			
ANR	5262538	UnaryOperationExpression	* a		5262514	0					
ANR	5262539	UnaryOperator	*		5262514	0					
ANR	5262540	Identifier	a		5262514	1					
ANR	5262541	UnaryOperationExpression	* b		5262514	1					
ANR	5262542	UnaryOperator	*		5262514	0					
ANR	5262543	Identifier	b		5262514	1					
ANR	5262544	ExpressionStatement	* b = tmp	51:2:862:870	5262514	2	True				
ANR	5262545	AssignmentExpression	* b = tmp		5262514	0		=			
ANR	5262546	UnaryOperationExpression	* b		5262514	0					
ANR	5262547	UnaryOperator	*		5262514	0					
ANR	5262548	Identifier	b		5262514	1					
ANR	5262549	Identifier	tmp		5262514	1					
ANR	5262550	ReturnType	R_API void		5262514	1					
ANR	5262551	Identifier	r_num_minmax_swap		5262514	2					
ANR	5262552	ParameterList	"ut64 * a , ut64 * b"		5262514	3					
ANR	5262553	Parameter	ut64 * a	47:29:796:802	5262514	0	True				
ANR	5262554	ParameterType	ut64 *		5262514	0					
ANR	5262555	Identifier	a		5262514	1					
ANR	5262556	Parameter	ut64 * b	47:38:805:811	5262514	1	True				
ANR	5262557	ParameterType	ut64 *		5262514	0					
ANR	5262558	Identifier	b		5262514	1					
ANR	5262559	CFGEntryNode	ENTRY		5262514		True				
ANR	5262560	CFGExitNode	EXIT		5262514		True				
ANR	5262561	Symbol	a		5262514						
ANR	5262562	Symbol	b		5262514						
ANR	5262563	Symbol	tmp		5262514						
ANR	5262564	Symbol	* a		5262514						
ANR	5262565	Symbol	* b		5262514						
ANR	5262566	Function	r_num_minmax_swap_i	55:0:878:986							
ANR	5262567	FunctionDef	"r_num_minmax_swap_i (int * a , int * b)"		5262566	0					
ANR	5262568	CompoundStatement		55:47:925:986	5262566	0					
ANR	5262569	IfStatement	if ( * a > * b )		5262566	0					
ANR	5262570	Condition	* a > * b	56:5:932:938	5262566	0	True				
ANR	5262571	RelationalExpression	* a > * b		5262566	0		>			
ANR	5262572	UnaryOperationExpression	* a		5262566	0					
ANR	5262573	UnaryOperator	*		5262566	0					
ANR	5262574	Identifier	a		5262566	1					
ANR	5262575	UnaryOperationExpression	* b		5262566	1					
ANR	5262576	UnaryOperator	*		5262566	0					
ANR	5262577	Identifier	b		5262566	1					
ANR	5262578	CompoundStatement		3:2:19:32	5262566	1					
ANR	5262579	IdentifierDeclStatement	ut64 tmp = * a ;	57:2:945:958	5262566	0	True				
ANR	5262580	IdentifierDecl	tmp = * a		5262566	0					
ANR	5262581	IdentifierDeclType	ut64		5262566	0					
ANR	5262582	Identifier	tmp		5262566	1					
ANR	5262583	AssignmentExpression	tmp = * a		5262566	2		=			
ANR	5262584	Identifier	tmp		5262566	0					
ANR	5262585	UnaryOperationExpression	* a		5262566	1					
ANR	5262586	UnaryOperator	*		5262566	0					
ANR	5262587	Identifier	a		5262566	1					
ANR	5262588	ExpressionStatement	* a = * b	58:2:962:969	5262566	1	True				
ANR	5262589	AssignmentExpression	* a = * b		5262566	0		=			
ANR	5262590	UnaryOperationExpression	* a		5262566	0					
ANR	5262591	UnaryOperator	*		5262566	0					
ANR	5262592	Identifier	a		5262566	1					
ANR	5262593	UnaryOperationExpression	* b		5262566	1					
ANR	5262594	UnaryOperator	*		5262566	0					
ANR	5262595	Identifier	b		5262566	1					
ANR	5262596	ExpressionStatement	* b = tmp	59:2:973:981	5262566	2	True				
ANR	5262597	AssignmentExpression	* b = tmp		5262566	0		=			
ANR	5262598	UnaryOperationExpression	* b		5262566	0					
ANR	5262599	UnaryOperator	*		5262566	0					
ANR	5262600	Identifier	b		5262566	1					
ANR	5262601	Identifier	tmp		5262566	1					
ANR	5262602	ReturnType	R_API void		5262566	1					
ANR	5262603	Identifier	r_num_minmax_swap_i		5262566	2					
ANR	5262604	ParameterList	"int * a , int * b"		5262566	3					
ANR	5262605	Parameter	int * a	55:31:909:914	5262566	0	True				
ANR	5262606	ParameterType	int *		5262566	0					
ANR	5262607	Identifier	a		5262566	1					
ANR	5262608	Parameter	int * b	55:39:917:922	5262566	1	True				
ANR	5262609	ParameterType	int *		5262566	0					
ANR	5262610	Identifier	b		5262566	1					
ANR	5262611	CFGEntryNode	ENTRY		5262566		True				
ANR	5262612	CFGExitNode	EXIT		5262566		True				
ANR	5262613	Symbol	a		5262566						
ANR	5262614	Symbol	b		5262566						
ANR	5262615	Symbol	tmp		5262566						
ANR	5262616	Symbol	* a		5262566						
ANR	5262617	Symbol	* b		5262566						
ANR	5262618	Function	r_num_new	63:0:989:1220							
ANR	5262619	FunctionDef	"r_num_new (RNumCallback cb , RNumCallback2 cb2 , void * ptr)"		5262618	0					
ANR	5262620	CompoundStatement		63:69:1058:1220	5262618	0					
ANR	5262621	IdentifierDeclStatement	RNum * num = R_NEW0 ( RNum ) ;	64:1:1061:1086	5262618	0	True				
ANR	5262622	IdentifierDecl	* num = R_NEW0 ( RNum )		5262618	0					
ANR	5262623	IdentifierDeclType	RNum *		5262618	0					
ANR	5262624	Identifier	num		5262618	1					
ANR	5262625	AssignmentExpression	* num = R_NEW0 ( RNum )		5262618	2		=			
ANR	5262626	Identifier	num		5262618	0					
ANR	5262627	CallExpression	R_NEW0 ( RNum )		5262618	1					
ANR	5262628	Callee	R_NEW0		5262618	0					
ANR	5262629	Identifier	R_NEW0		5262618	0					
ANR	5262630	ArgumentList	RNum		5262618	1					
ANR	5262631	Argument	RNum		5262618	0					
ANR	5262632	Identifier	RNum		5262618	0					
ANR	5262633	IfStatement	if ( ! num )		5262618	1					
ANR	5262634	Condition	! num	65:5:1093:1096	5262618	0	True				
ANR	5262635	UnaryOperationExpression	! num		5262618	0					
ANR	5262636	UnaryOperator	!		5262618	0					
ANR	5262637	Identifier	num		5262618	1					
ANR	5262638	CompoundStatement		3:11:40:40	5262618	1					
ANR	5262639	ReturnStatement	return NULL ;	66:2:1103:1114	5262618	0	True				
ANR	5262640	Identifier	NULL		5262618	0					
ANR	5262641	Statement	num	68:1:1120:1122	5262618	2	True				
ANR	5262642	Statement	->	68:4:1123:1124	5262618	3	True				
ANR	5262643	Statement	value	68:6:1125:1129	5262618	4	True				
ANR	5262644	Statement	=	68:12:1131:1131	5262618	5	True				
ANR	5262645	Statement	0L	68:14:1133:1134	5262618	6	True				
ANR	5262646	ExpressionStatement	L	68:16:1135:1136	5262618	7	True				
ANR	5262647	Identifier	L		5262618	0					
ANR	5262648	ExpressionStatement	num -> callback = cb	69:1:1139:1157	5262618	8	True				
ANR	5262649	AssignmentExpression	num -> callback = cb		5262618	0		=			
ANR	5262650	PtrMemberAccess	num -> callback		5262618	0					
ANR	5262651	Identifier	num		5262618	0					
ANR	5262652	Identifier	callback		5262618	1					
ANR	5262653	Identifier	cb		5262618	1					
ANR	5262654	ExpressionStatement	num -> cb_from_value = cb2	70:1:1160:1184	5262618	9	True				
ANR	5262655	AssignmentExpression	num -> cb_from_value = cb2		5262618	0		=			
ANR	5262656	PtrMemberAccess	num -> cb_from_value		5262618	0					
ANR	5262657	Identifier	num		5262618	0					
ANR	5262658	Identifier	cb_from_value		5262618	1					
ANR	5262659	Identifier	cb2		5262618	1					
ANR	5262660	ExpressionStatement	num -> userptr = ptr	71:1:1187:1205	5262618	10	True				
ANR	5262661	AssignmentExpression	num -> userptr = ptr		5262618	0		=			
ANR	5262662	PtrMemberAccess	num -> userptr		5262618	0					
ANR	5262663	Identifier	num		5262618	0					
ANR	5262664	Identifier	userptr		5262618	1					
ANR	5262665	Identifier	ptr		5262618	1					
ANR	5262666	ReturnStatement	return num ;	72:1:1208:1218	5262618	11	True				
ANR	5262667	Identifier	num		5262618	0					
ANR	5262668	ReturnType	R_API RNum *		5262618	1					
ANR	5262669	Identifier	r_num_new		5262618	2					
ANR	5262670	ParameterList	"RNumCallback cb , RNumCallback2 cb2 , void * ptr"		5262618	3					
ANR	5262671	Parameter	RNumCallback cb	63:22:1011:1025	5262618	0	True				
ANR	5262672	ParameterType	RNumCallback		5262618	0					
ANR	5262673	Identifier	cb		5262618	1					
ANR	5262674	Parameter	RNumCallback2 cb2	63:39:1028:1044	5262618	1	True				
ANR	5262675	ParameterType	RNumCallback2		5262618	0					
ANR	5262676	Identifier	cb2		5262618	1					
ANR	5262677	Parameter	void * ptr	63:58:1047:1055	5262618	2	True				
ANR	5262678	ParameterType	void *		5262618	0					
ANR	5262679	Identifier	ptr		5262618	1					
ANR	5262680	CFGEntryNode	ENTRY		5262618		True				
ANR	5262681	CFGExitNode	EXIT		5262618		True				
ANR	5262682	Symbol	* num		5262618						
ANR	5262683	Symbol	num -> callback		5262618						
ANR	5262684	Symbol	R_NEW0		5262618						
ANR	5262685	Symbol	cb2		5262618						
ANR	5262686	Symbol	RNum		5262618						
ANR	5262687	Symbol	NULL		5262618						
ANR	5262688	Symbol	num		5262618						
ANR	5262689	Symbol	num -> cb_from_value		5262618						
ANR	5262690	Symbol	num -> userptr		5262618						
ANR	5262691	Symbol	cb		5262618						
ANR	5262692	Symbol	ptr		5262618						
ANR	5262693	Function	r_num_free	75:0:1223:1273							
ANR	5262694	FunctionDef	r_num_free (RNum * num)		5262693	0					
ANR	5262695	CompoundStatement		75:33:1256:1273	5262693	0					
ANR	5262696	ExpressionStatement	R_FREE ( num )	76:1:1259:1271	5262693	0	True				
ANR	5262697	CallExpression	R_FREE ( num )		5262693	0					
ANR	5262698	Callee	R_FREE		5262693	0					
ANR	5262699	Identifier	R_FREE		5262693	0					
ANR	5262700	ArgumentList	num		5262693	1					
ANR	5262701	Argument	num		5262693	0					
ANR	5262702	Identifier	num		5262693	0					
ANR	5262703	ReturnType	R_API void		5262693	1					
ANR	5262704	Identifier	r_num_free		5262693	2					
ANR	5262705	ParameterList	RNum * num		5262693	3					
ANR	5262706	Parameter	RNum * num	75:22:1245:1253	5262693	0	True				
ANR	5262707	ParameterType	RNum *		5262693	0					
ANR	5262708	Identifier	num		5262693	1					
ANR	5262709	CFGEntryNode	ENTRY		5262693		True				
ANR	5262710	CFGExitNode	EXIT		5262693		True				
ANR	5262711	Symbol	num		5262693						
ANR	5262712	Function	r_num_units	96:0:1759:2427							
ANR	5262713	FunctionDef	"r_num_units (char * buf , size_t len , ut64 num)"		5262712	0					
ANR	5262714	CompoundStatement		96:57:1816:2427	5262712	0					
ANR	5262715	IdentifierDeclStatement	long double fnum ;	97:1:1819:1835	5262712	0	True				
ANR	5262716	IdentifierDecl	fnum		5262712	0					
ANR	5262717	IdentifierDeclType	long double		5262712	0					
ANR	5262718	Identifier	fnum		5262712	1					
ANR	5262719	IdentifierDeclStatement	char unit ;	98:1:1838:1847	5262712	1	True				
ANR	5262720	IdentifierDecl	unit		5262712	0					
ANR	5262721	IdentifierDeclType	char		5262712	0					
ANR	5262722	Identifier	unit		5262712	1					
ANR	5262723	IdentifierDeclStatement	const char * fmt_str ;	99:1:1850:1869	5262712	2	True				
ANR	5262724	IdentifierDecl	* fmt_str		5262712	0					
ANR	5262725	IdentifierDeclType	const char *		5262712	0					
ANR	5262726	Identifier	fmt_str		5262712	1					
ANR	5262727	IfStatement	if ( ! buf )		5262712	3					
ANR	5262728	Condition	! buf	100:5:1876:1879	5262712	0	True				
ANR	5262729	UnaryOperationExpression	! buf		5262712	0					
ANR	5262730	UnaryOperator	!		5262712	0					
ANR	5262731	Identifier	buf		5262712	1					
ANR	5262732	CompoundStatement		5:11:65:65	5262712	1					
ANR	5262733	ExpressionStatement	buf = malloc ( len + 1 )	101:2:1886:1908	5262712	0	True				
ANR	5262734	AssignmentExpression	buf = malloc ( len + 1 )		5262712	0		=			
ANR	5262735	Identifier	buf		5262712	0					
ANR	5262736	CallExpression	malloc ( len + 1 )		5262712	1					
ANR	5262737	Callee	malloc		5262712	0					
ANR	5262738	Identifier	malloc		5262712	0					
ANR	5262739	ArgumentList	len + 1		5262712	1					
ANR	5262740	Argument	len + 1		5262712	0					
ANR	5262741	AdditiveExpression	len + 1		5262712	0		+			
ANR	5262742	Identifier	len		5262712	0					
ANR	5262743	PrimaryExpression	1		5262712	1					
ANR	5262744	IfStatement	if ( ! buf )		5262712	1					
ANR	5262745	Condition	! buf	102:6:1916:1919	5262712	0	True				
ANR	5262746	UnaryOperationExpression	! buf		5262712	0					
ANR	5262747	UnaryOperator	!		5262712	0					
ANR	5262748	Identifier	buf		5262712	1					
ANR	5262749	CompoundStatement		7:12:105:105	5262712	1					
ANR	5262750	ReturnStatement	return NULL ;	103:3:1927:1938	5262712	0	True				
ANR	5262751	Identifier	NULL		5262712	0					
ANR	5262752	ExpressionStatement	fnum = num	106:1:1948:1958	5262712	4	True				
ANR	5262753	AssignmentExpression	fnum = num		5262712	0		=			
ANR	5262754	Identifier	fnum		5262712	0					
ANR	5262755	Identifier	num		5262712	1					
ANR	5262756	IfStatement	if ( num >= EB )		5262712	5					
ANR	5262757	Condition	num >= EB	107:5:1965:1973	5262712	0	True				
ANR	5262758	RelationalExpression	num >= EB		5262712	0		>=			
ANR	5262759	Identifier	num		5262712	0					
ANR	5262760	Identifier	EB		5262712	1					
ANR	5262761	CompoundStatement		12:16:159:159	5262712	1					
ANR	5262762	ExpressionStatement	unit = 'E'	107:18:1978:1988	5262712	0	True				
ANR	5262763	AssignmentExpression	unit = 'E'		5262712	0		=			
ANR	5262764	Identifier	unit		5262712	0					
ANR	5262765	PrimaryExpression	'E'		5262712	1					
ANR	5262766	ExpressionStatement	fnum /= EB	107:30:1990:2000	5262712	1	True				
ANR	5262767	AssignmentExpression	fnum /= EB		5262712	0		/=			
ANR	5262768	Identifier	fnum		5262712	0					
ANR	5262769	Identifier	EB		5262712	1					
ANR	5262770	ElseStatement	else		5262712	0					
ANR	5262771	IfStatement	if ( num >= PB )		5262712	0					
ANR	5262772	Condition	num >= PB	108:5:2014:2022	5262712	0	True				
ANR	5262773	RelationalExpression	num >= PB		5262712	0		>=			
ANR	5262774	Identifier	num		5262712	0					
ANR	5262775	Identifier	PB		5262712	1					
ANR	5262776	CompoundStatement		13:16:208:208	5262712	1					
ANR	5262777	ExpressionStatement	unit = 'P'	108:18:2027:2037	5262712	0	True				
ANR	5262778	AssignmentExpression	unit = 'P'		5262712	0		=			
ANR	5262779	Identifier	unit		5262712	0					
ANR	5262780	PrimaryExpression	'P'		5262712	1					
ANR	5262781	ExpressionStatement	fnum /= PB	108:30:2039:2049	5262712	1	True				
ANR	5262782	AssignmentExpression	fnum /= PB		5262712	0		/=			
ANR	5262783	Identifier	fnum		5262712	0					
ANR	5262784	Identifier	PB		5262712	1					
ANR	5262785	ElseStatement	else		5262712	0					
ANR	5262786	IfStatement	if ( num >= TB )		5262712	0					
ANR	5262787	Condition	num >= TB	109:5:2063:2071	5262712	0	True				
ANR	5262788	RelationalExpression	num >= TB		5262712	0		>=			
ANR	5262789	Identifier	num		5262712	0					
ANR	5262790	Identifier	TB		5262712	1					
ANR	5262791	CompoundStatement		14:16:257:257	5262712	1					
ANR	5262792	ExpressionStatement	unit = 'T'	109:18:2076:2086	5262712	0	True				
ANR	5262793	AssignmentExpression	unit = 'T'		5262712	0		=			
ANR	5262794	Identifier	unit		5262712	0					
ANR	5262795	PrimaryExpression	'T'		5262712	1					
ANR	5262796	ExpressionStatement	fnum /= TB	109:30:2088:2098	5262712	1	True				
ANR	5262797	AssignmentExpression	fnum /= TB		5262712	0		/=			
ANR	5262798	Identifier	fnum		5262712	0					
ANR	5262799	Identifier	TB		5262712	1					
ANR	5262800	ElseStatement	else		5262712	0					
ANR	5262801	IfStatement	if ( num >= GB )		5262712	0					
ANR	5262802	Condition	num >= GB	110:5:2112:2120	5262712	0	True				
ANR	5262803	RelationalExpression	num >= GB		5262712	0		>=			
ANR	5262804	Identifier	num		5262712	0					
ANR	5262805	Identifier	GB		5262712	1					
ANR	5262806	CompoundStatement		15:16:306:306	5262712	1					
ANR	5262807	ExpressionStatement	unit = 'G'	110:18:2125:2135	5262712	0	True				
ANR	5262808	AssignmentExpression	unit = 'G'		5262712	0		=			
ANR	5262809	Identifier	unit		5262712	0					
ANR	5262810	PrimaryExpression	'G'		5262712	1					
ANR	5262811	ExpressionStatement	fnum /= GB	110:30:2137:2147	5262712	1	True				
ANR	5262812	AssignmentExpression	fnum /= GB		5262712	0		/=			
ANR	5262813	Identifier	fnum		5262712	0					
ANR	5262814	Identifier	GB		5262712	1					
ANR	5262815	ElseStatement	else		5262712	0					
ANR	5262816	IfStatement	if ( num >= MB )		5262712	0					
ANR	5262817	Condition	num >= MB	111:5:2161:2169	5262712	0	True				
ANR	5262818	RelationalExpression	num >= MB		5262712	0		>=			
ANR	5262819	Identifier	num		5262712	0					
ANR	5262820	Identifier	MB		5262712	1					
ANR	5262821	CompoundStatement		16:16:355:355	5262712	1					
ANR	5262822	ExpressionStatement	unit = 'M'	111:18:2174:2184	5262712	0	True				
ANR	5262823	AssignmentExpression	unit = 'M'		5262712	0		=			
ANR	5262824	Identifier	unit		5262712	0					
ANR	5262825	PrimaryExpression	'M'		5262712	1					
ANR	5262826	ExpressionStatement	fnum /= MB	111:30:2186:2196	5262712	1	True				
ANR	5262827	AssignmentExpression	fnum /= MB		5262712	0		/=			
ANR	5262828	Identifier	fnum		5262712	0					
ANR	5262829	Identifier	MB		5262712	1					
ANR	5262830	ElseStatement	else		5262712	0					
ANR	5262831	IfStatement	if ( num >= KB )		5262712	0					
ANR	5262832	Condition	num >= KB	112:5:2210:2218	5262712	0	True				
ANR	5262833	RelationalExpression	num >= KB		5262712	0		>=			
ANR	5262834	Identifier	num		5262712	0					
ANR	5262835	Identifier	KB		5262712	1					
ANR	5262836	CompoundStatement		17:16:404:404	5262712	1					
ANR	5262837	ExpressionStatement	unit = 'K'	112:18:2223:2233	5262712	0	True				
ANR	5262838	AssignmentExpression	unit = 'K'		5262712	0		=			
ANR	5262839	Identifier	unit		5262712	0					
ANR	5262840	PrimaryExpression	'K'		5262712	1					
ANR	5262841	ExpressionStatement	fnum /= KB	112:30:2235:2245	5262712	1	True				
ANR	5262842	AssignmentExpression	fnum /= KB		5262712	0		/=			
ANR	5262843	Identifier	fnum		5262712	0					
ANR	5262844	Identifier	KB		5262712	1					
ANR	5262845	ElseStatement	else		5262712	0					
ANR	5262846	CompoundStatement		17:49:437:437	5262712	0					
ANR	5262847	ExpressionStatement	unit = '\\0'	113:2:2258:2269	5262712	0	True				
ANR	5262848	AssignmentExpression	unit = '\\0'		5262712	0		=			
ANR	5262849	Identifier	unit		5262712	0					
ANR	5262850	PrimaryExpression	'\\0'		5262712	1					
ANR	5262851	Statement	fmt_str	115:1:2275:2281	5262712	6	True				
ANR	5262852	Statement	=	115:9:2283:2283	5262712	7	True				
ANR	5262853	Statement	(	115:11:2285:2285	5262712	8	True				
ANR	5262854	Statement	(	115:12:2286:2286	5262712	9	True				
ANR	5262855	Statement	double	115:13:2287:2292	5262712	10	True				
ANR	5262856	Statement	)	115:19:2293:2293	5262712	11	True				
ANR	5262857	Statement	ceill	115:20:2294:2298	5262712	12	True				
ANR	5262858	Statement	(	115:26:2300:2300	5262712	13	True				
ANR	5262859	Statement	fnum	115:27:2301:2304	5262712	14	True				
ANR	5262860	Statement	)	115:31:2305:2305	5262712	15	True				
ANR	5262861	Statement	==	115:33:2307:2308	5262712	16	True				
ANR	5262862	Statement	(	115:36:2310:2310	5262712	17	True				
ANR	5262863	Statement	double	115:37:2311:2316	5262712	18	True				
ANR	5262864	Statement	)	115:43:2317:2317	5262712	19	True				
ANR	5262865	Statement	fnum	115:44:2318:2321	5262712	20	True				
ANR	5262866	Statement	)	115:48:2322:2322	5262712	21	True				
ANR	5262867	Statement	?	116:2:2326:2326	5262712	22	True				
ANR	5262868	Statement	"""%.0"""	116:4:2328:2332	5262712	23	True				
ANR	5262869	Statement	LDBLFMT	116:10:2334:2340	5262712	24	True				
ANR	5262870	Statement	"""%c"""	116:18:2342:2345	5262712	25	True				
ANR	5262871	Statement	:	117:2:2349:2349	5262712	26	True				
ANR	5262872	Statement	"""%.1"""	117:4:2351:2355	5262712	27	True				
ANR	5262873	Statement	LDBLFMT	117:10:2357:2363	5262712	28	True				
ANR	5262874	ExpressionStatement	"""%c"""	117:18:2365:2369	5262712	29	True				
ANR	5262875	PrimaryExpression	"""%c"""		5262712	0					
ANR	5262876	ExpressionStatement	"snprintf ( buf , len , fmt_str , fnum , unit )"	118:1:2372:2412	5262712	30	True				
ANR	5262877	CallExpression	"snprintf ( buf , len , fmt_str , fnum , unit )"		5262712	0					
ANR	5262878	Callee	snprintf		5262712	0					
ANR	5262879	Identifier	snprintf		5262712	0					
ANR	5262880	ArgumentList	buf		5262712	1					
ANR	5262881	Argument	buf		5262712	0					
ANR	5262882	Identifier	buf		5262712	0					
ANR	5262883	Argument	len		5262712	1					
ANR	5262884	Identifier	len		5262712	0					
ANR	5262885	Argument	fmt_str		5262712	2					
ANR	5262886	Identifier	fmt_str		5262712	0					
ANR	5262887	Argument	fnum		5262712	3					
ANR	5262888	Identifier	fnum		5262712	0					
ANR	5262889	Argument	unit		5262712	4					
ANR	5262890	Identifier	unit		5262712	0					
ANR	5262891	ReturnStatement	return buf ;	119:1:2415:2425	5262712	31	True				
ANR	5262892	Identifier	buf		5262712	0					
ANR	5262893	ReturnType	R_API char *		5262712	1					
ANR	5262894	Identifier	r_num_units		5262712	2					
ANR	5262895	ParameterList	"char * buf , size_t len , ut64 num"		5262712	3					
ANR	5262896	Parameter	char * buf	96:24:1783:1791	5262712	0	True				
ANR	5262897	ParameterType	char *		5262712	0					
ANR	5262898	Identifier	buf		5262712	1					
ANR	5262899	Parameter	size_t len	96:35:1794:1803	5262712	1	True				
ANR	5262900	ParameterType	size_t		5262712	0					
ANR	5262901	Identifier	len		5262712	1					
ANR	5262902	Parameter	ut64 num	96:47:1806:1813	5262712	2	True				
ANR	5262903	ParameterType	ut64		5262712	0					
ANR	5262904	Identifier	num		5262712	1					
ANR	5262905	CFGEntryNode	ENTRY		5262712		True				
ANR	5262906	CFGExitNode	EXIT		5262712		True				
ANR	5262907	Symbol	malloc		5262712						
ANR	5262908	Symbol	NULL		5262712						
ANR	5262909	Symbol	num		5262712						
ANR	5262910	Symbol	TB		5262712						
ANR	5262911	Symbol	fnum		5262712						
ANR	5262912	Symbol	buf		5262712						
ANR	5262913	Symbol	unit		5262712						
ANR	5262914	Symbol	PB		5262712						
ANR	5262915	Symbol	len		5262712						
ANR	5262916	Symbol	fmt_str		5262712						
ANR	5262917	Symbol	MB		5262712						
ANR	5262918	Symbol	KB		5262712						
ANR	5262919	Symbol	GB		5262712						
ANR	5262920	Symbol	EB		5262712						
ANR	5262921	Function	r_num_get_name	122:6:2436:2667							
ANR	5262922	FunctionDef	"r_num_get_name (RNum * num , ut64 n)"		5262921	0					
ANR	5262923	CompoundStatement		122:52:2482:2667	5262921	0					
ANR	5262924	IfStatement	if ( num -> cb_from_value )		5262921	0					
ANR	5262925	Condition	num -> cb_from_value	123:5:2489:2506	5262921	0	True				
ANR	5262926	PtrMemberAccess	num -> cb_from_value		5262921	0					
ANR	5262927	Identifier	num		5262921	0					
ANR	5262928	Identifier	cb_from_value		5262921	1					
ANR	5262929	CompoundStatement		4:2:44:94	5262921	1					
ANR	5262930	IdentifierDeclStatement	int ok = 0 ;	124:2:2513:2523	5262921	0	True				
ANR	5262931	IdentifierDecl	ok = 0		5262921	0					
ANR	5262932	IdentifierDeclType	int		5262921	0					
ANR	5262933	Identifier	ok		5262921	1					
ANR	5262934	AssignmentExpression	ok = 0		5262921	2		=			
ANR	5262935	Identifier	ok		5262921	0					
ANR	5262936	PrimaryExpression	0		5262921	1					
ANR	5262937	IdentifierDeclStatement	"const char * msg = num -> cb_from_value ( num , n , & ok ) ;"	125:2:2527:2577	5262921	1	True				
ANR	5262938	IdentifierDecl	"* msg = num -> cb_from_value ( num , n , & ok )"		5262921	0					
ANR	5262939	IdentifierDeclType	const char *		5262921	0					
ANR	5262940	Identifier	msg		5262921	1					
ANR	5262941	AssignmentExpression	"* msg = num -> cb_from_value ( num , n , & ok )"		5262921	2		=			
ANR	5262942	Identifier	msg		5262921	0					
ANR	5262943	CallExpression	"num -> cb_from_value ( num , n , & ok )"		5262921	1					
ANR	5262944	Callee	num -> cb_from_value		5262921	0					
ANR	5262945	PtrMemberAccess	num -> cb_from_value		5262921	0					
ANR	5262946	Identifier	num		5262921	0					
ANR	5262947	Identifier	cb_from_value		5262921	1					
ANR	5262948	ArgumentList	num		5262921	1					
ANR	5262949	Argument	num		5262921	0					
ANR	5262950	Identifier	num		5262921	0					
ANR	5262951	Argument	n		5262921	1					
ANR	5262952	Identifier	n		5262921	0					
ANR	5262953	Argument	& ok		5262921	2					
ANR	5262954	UnaryOperationExpression	& ok		5262921	0					
ANR	5262955	UnaryOperator	&		5262921	0					
ANR	5262956	Identifier	ok		5262921	1					
ANR	5262957	IfStatement	if ( msg && * msg )		5262921	2					
ANR	5262958	Condition	msg && * msg	126:6:2585:2595	5262921	0	True				
ANR	5262959	AndExpression	msg && * msg		5262921	0		&&			
ANR	5262960	Identifier	msg		5262921	0					
ANR	5262961	UnaryOperationExpression	* msg		5262921	1					
ANR	5262962	UnaryOperator	*		5262921	0					
ANR	5262963	Identifier	msg		5262921	1					
ANR	5262964	CompoundStatement		5:19:115:115	5262921	1					
ANR	5262965	ReturnStatement	return msg ;	127:3:2603:2613	5262921	0	True				
ANR	5262966	Identifier	msg		5262921	0					
ANR	5262967	IfStatement	if ( ok )		5262921	3					
ANR	5262968	Condition	ok	129:6:2625:2626	5262921	0	True				
ANR	5262969	Identifier	ok		5262921	0					
ANR	5262970	CompoundStatement		8:10:146:146	5262921	1					
ANR	5262971	ReturnStatement	return msg ;	130:3:2634:2644	5262921	0	True				
ANR	5262972	Identifier	msg		5262921	0					
ANR	5262973	ReturnStatement	return NULL ;	133:1:2654:2665	5262921	1	True				
ANR	5262974	Identifier	NULL		5262921	0					
ANR	5262975	ReturnType	const char *		5262921	1					
ANR	5262976	Identifier	r_num_get_name		5262921	2					
ANR	5262977	ParameterList	"RNum * num , ut64 n"		5262921	3					
ANR	5262978	Parameter	RNum * num	122:33:2463:2471	5262921	0	True				
ANR	5262979	ParameterType	RNum *		5262921	0					
ANR	5262980	Identifier	num		5262921	1					
ANR	5262981	Parameter	ut64 n	122:44:2474:2479	5262921	1	True				
ANR	5262982	ParameterType	ut64		5262921	0					
ANR	5262983	Identifier	n		5262921	1					
ANR	5262984	CFGEntryNode	ENTRY		5262921		True				
ANR	5262985	CFGExitNode	EXIT		5262921		True				
ANR	5262986	Symbol	* num		5262921						
ANR	5262987	Symbol	msg		5262921						
ANR	5262988	Symbol	NULL		5262921						
ANR	5262989	Symbol	num		5262921						
ANR	5262990	Symbol	& ok		5262921						
ANR	5262991	Symbol	num -> cb_from_value		5262921						
ANR	5262992	Symbol	* msg		5262921						
ANR	5262993	Symbol	ok		5262921						
ANR	5262994	Symbol	n		5262921						
ANR	5262995	Function	error	136:0:2670:2800							
ANR	5262996	FunctionDef	"error (RNum * num , const char * err_str)"		5262995	0					
ANR	5262997	CompoundStatement		136:50:2720:2800	5262995	0					
ANR	5262998	IfStatement	if ( num )		5262995	0					
ANR	5262999	Condition	num	137:5:2727:2729	5262995	0	True				
ANR	5263000	Identifier	num		5262995	0					
ANR	5263001	CompoundStatement		2:10:11:11	5262995	1					
ANR	5263002	ExpressionStatement	num -> nc . errors ++	138:2:2736:2752	5262995	0	True				
ANR	5263003	PostIncDecOperationExpression	num -> nc . errors ++		5262995	0					
ANR	5263004	MemberAccess	num -> nc . errors		5262995	0					
ANR	5263005	PtrMemberAccess	num -> nc		5262995	0					
ANR	5263006	Identifier	num		5262995	0					
ANR	5263007	Identifier	nc		5262995	1					
ANR	5263008	Identifier	errors		5262995	1					
ANR	5263009	IncDec	++		5262995	1					
ANR	5263010	ExpressionStatement	num -> nc . calc_err = err_str	140:2:2762:2788	5262995	1	True				
ANR	5263011	AssignmentExpression	num -> nc . calc_err = err_str		5262995	0		=			
ANR	5263012	MemberAccess	num -> nc . calc_err		5262995	0					
ANR	5263013	PtrMemberAccess	num -> nc		5262995	0					
ANR	5263014	Identifier	num		5262995	0					
ANR	5263015	Identifier	nc		5262995	1					
ANR	5263016	Identifier	calc_err		5262995	1					
ANR	5263017	Identifier	err_str		5262995	1					
ANR	5263018	ReturnType	static void		5262995	1					
ANR	5263019	Identifier	error		5262995	2					
ANR	5263020	ParameterList	"RNum * num , const char * err_str"		5262995	3					
ANR	5263021	Parameter	RNum * num	136:18:2688:2696	5262995	0	True				
ANR	5263022	ParameterType	RNum *		5262995	0					
ANR	5263023	Identifier	num		5262995	1					
ANR	5263024	Parameter	const char * err_str	136:29:2699:2717	5262995	1	True				
ANR	5263025	ParameterType	const char *		5262995	0					
ANR	5263026	Identifier	err_str		5262995	1					
ANR	5263027	CFGEntryNode	ENTRY		5262995		True				
ANR	5263028	CFGExitNode	EXIT		5262995		True				
ANR	5263029	Symbol	* num		5262995						
ANR	5263030	Symbol	num -> nc		5262995						
ANR	5263031	Symbol	num -> nc . errors		5262995						
ANR	5263032	Symbol	err_str		5262995						
ANR	5263033	Symbol	num -> nc . calc_err		5262995						
ANR	5263034	Symbol	num		5262995						
ANR	5263035	Function	r_num_get	147:0:2864:8197							
ANR	5263036	FunctionDef	"r_num_get (RNum * num , const char * str)"		5263035	0					
ANR	5263037	CompoundStatement		147:49:2913:8197	5263035	0					
ANR	5263038	IdentifierDeclStatement	"int i , j , ok ;"	148:1:2916:2928	5263035	0	True				
ANR	5263039	IdentifierDecl	i		5263035	0					
ANR	5263040	IdentifierDeclType	int		5263035	0					
ANR	5263041	Identifier	i		5263035	1					
ANR	5263042	IdentifierDecl	j		5263035	1					
ANR	5263043	IdentifierDeclType	int		5263035	0					
ANR	5263044	Identifier	j		5263035	1					
ANR	5263045	IdentifierDecl	ok		5263035	2					
ANR	5263046	IdentifierDeclType	int		5263035	0					
ANR	5263047	Identifier	ok		5263035	1					
ANR	5263048	IdentifierDeclStatement	"char lch , len ;"	149:1:2931:2944	5263035	1	True				
ANR	5263049	IdentifierDecl	lch		5263035	0					
ANR	5263050	IdentifierDeclType	char		5263035	0					
ANR	5263051	Identifier	lch		5263035	1					
ANR	5263052	IdentifierDecl	len		5263035	1					
ANR	5263053	IdentifierDeclType	char		5263035	0					
ANR	5263054	Identifier	len		5263035	1					
ANR	5263055	Statement	ut64	150:1:2947:2950	5263035	2	True				
ANR	5263056	Statement	ret	150:6:2952:2954	5263035	3	True				
ANR	5263057	Statement	=	150:10:2956:2956	5263035	4	True				
ANR	5263058	Statement	0L	150:12:2958:2959	5263035	5	True				
ANR	5263059	ExpressionStatement	L	150:14:2960:2961	5263035	6	True				
ANR	5263060	Identifier	L		5263035	0					
ANR	5263061	IdentifierDeclStatement	"ut32 s , a ;"	151:1:2964:2973	5263035	7	True				
ANR	5263062	IdentifierDecl	s		5263035	0					
ANR	5263063	IdentifierDeclType	ut32		5263035	0					
ANR	5263064	Identifier	s		5263035	1					
ANR	5263065	IdentifierDecl	a		5263035	1					
ANR	5263066	IdentifierDeclType	ut32		5263035	0					
ANR	5263067	Identifier	a		5263035	1					
ANR	5263068	IfStatement	if ( num && ! num -> nc . under_calc )		5263035	8					
ANR	5263069	Condition	num && ! num -> nc . under_calc	153:5:2981:3006	5263035	0	True				
ANR	5263070	AndExpression	num && ! num -> nc . under_calc		5263035	0		&&			
ANR	5263071	Identifier	num		5263035	0					
ANR	5263072	UnaryOperationExpression	! num -> nc . under_calc		5263035	1					
ANR	5263073	UnaryOperator	!		5263035	0					
ANR	5263074	MemberAccess	num -> nc . under_calc		5263035	1					
ANR	5263075	PtrMemberAccess	num -> nc		5263035	0					
ANR	5263076	Identifier	num		5263035	0					
ANR	5263077	Identifier	nc		5263035	1					
ANR	5263078	Identifier	under_calc		5263035	1					
ANR	5263079	CompoundStatement		7:33:95:95	5263035	1					
ANR	5263080	ExpressionStatement	num -> nc . errors = 0	154:2:3013:3031	5263035	0	True				
ANR	5263081	AssignmentExpression	num -> nc . errors = 0		5263035	0		=			
ANR	5263082	MemberAccess	num -> nc . errors		5263035	0					
ANR	5263083	PtrMemberAccess	num -> nc		5263035	0					
ANR	5263084	Identifier	num		5263035	0					
ANR	5263085	Identifier	nc		5263035	1					
ANR	5263086	Identifier	errors		5263035	1					
ANR	5263087	PrimaryExpression	0		5263035	1					
ANR	5263088	IfStatement	if ( ! str )		5263035	9					
ANR	5263089	Condition	! str	156:5:3041:3044	5263035	0	True				
ANR	5263090	UnaryOperationExpression	! str		5263035	0					
ANR	5263091	UnaryOperator	!		5263035	0					
ANR	5263092	Identifier	str		5263035	1					
ANR	5263093	CompoundStatement		10:11:133:133	5263035	1					
ANR	5263094	ReturnStatement	return 0 ;	157:2:3051:3059	5263035	0	True				
ANR	5263095	PrimaryExpression	0		5263035	0					
ANR	5263096	ForStatement	for ( ; * str == ' ' ; )		5263035	10					
ANR	5263097	Condition	* str == ' '	159:8:3072:3082	5263035	0	True				
ANR	5263098	EqualityExpression	* str == ' '		5263035	0		==			
ANR	5263099	UnaryOperationExpression	* str		5263035	0					
ANR	5263100	UnaryOperator	*		5263035	0					
ANR	5263101	Identifier	str		5263035	1					
ANR	5263102	PrimaryExpression	' '		5263035	1					
ANR	5263103	CompoundStatement		13:23:173:173	5263035	1					
ANR	5263104	ExpressionStatement	str ++	160:2:3091:3096	5263035	0	True				
ANR	5263105	PostIncDecOperationExpression	str ++		5263035	0					
ANR	5263106	Identifier	str		5263035	0					
ANR	5263107	IncDec	++		5263035	1					
ANR	5263108	IfStatement	if ( ! * str )		5263035	11					
ANR	5263109	Condition	! * str	162:5:3106:3110	5263035	0	True				
ANR	5263110	UnaryOperationExpression	! * str		5263035	0					
ANR	5263111	UnaryOperator	!		5263035	0					
ANR	5263112	UnaryOperationExpression	* str		5263035	1					
ANR	5263113	UnaryOperator	*		5263035	0					
ANR	5263114	Identifier	str		5263035	1					
ANR	5263115	CompoundStatement		16:12:199:199	5263035	1					
ANR	5263116	ReturnStatement	return 0 ;	163:2:3117:3125	5263035	0	True				
ANR	5263117	PrimaryExpression	0		5263035	0					
ANR	5263118	IfStatement	"if ( ! strncmp ( str , ""1u"" , 2 ) )"		5263035	12					
ANR	5263119	Condition	"! strncmp ( str , ""1u"" , 2 )"	165:5:3135:3157	5263035	0	True				
ANR	5263120	UnaryOperationExpression	"! strncmp ( str , ""1u"" , 2 )"		5263035	0					
ANR	5263121	UnaryOperator	!		5263035	0					
ANR	5263122	CallExpression	"strncmp ( str , ""1u"" , 2 )"		5263035	1					
ANR	5263123	Callee	strncmp		5263035	0					
ANR	5263124	Identifier	strncmp		5263035	0					
ANR	5263125	ArgumentList	str		5263035	1					
ANR	5263126	Argument	str		5263035	0					
ANR	5263127	Identifier	str		5263035	0					
ANR	5263128	Argument	"""1u"""		5263035	1					
ANR	5263129	PrimaryExpression	"""1u"""		5263035	0					
ANR	5263130	Argument	2		5263035	2					
ANR	5263131	PrimaryExpression	2		5263035	0					
ANR	5263132	CompoundStatement		19:30:246:246	5263035	1					
ANR	5263133	IfStatement	if ( num && num -> value == UT64_MAX )		5263035	0					
ANR	5263134	Condition	num && num -> value == UT64_MAX	166:6:3196:3224	5263035	0	True				
ANR	5263135	AndExpression	num && num -> value == UT64_MAX		5263035	0		&&			
ANR	5263136	Identifier	num		5263035	0					
ANR	5263137	EqualityExpression	num -> value == UT64_MAX		5263035	1		==			
ANR	5263138	PtrMemberAccess	num -> value		5263035	0					
ANR	5263139	Identifier	num		5263035	0					
ANR	5263140	Identifier	value		5263035	1					
ANR	5263141	Identifier	UT64_MAX		5263035	1					
ANR	5263142	CompoundStatement		20:37:313:313	5263035	1					
ANR	5263143	ExpressionStatement	num -> value = 0	167:3:3232:3246	5263035	0	True				
ANR	5263144	AssignmentExpression	num -> value = 0		5263035	0		=			
ANR	5263145	PtrMemberAccess	num -> value		5263035	0					
ANR	5263146	Identifier	num		5263035	0					
ANR	5263147	Identifier	value		5263035	1					
ANR	5263148	PrimaryExpression	0		5263035	1					
ANR	5263149	SwitchStatement	switch ( atoi ( str + 2 ) )		5263035	1					
ANR	5263150	Condition	atoi ( str + 2 )	169:10:3262:3275	5263035	0	True				
ANR	5263151	CallExpression	atoi ( str + 2 )		5263035	0					
ANR	5263152	Callee	atoi		5263035	0					
ANR	5263153	Identifier	atoi		5263035	0					
ANR	5263154	ArgumentList	str + 2		5263035	1					
ANR	5263155	Argument	str + 2		5263035	0					
ANR	5263156	AdditiveExpression	str + 2		5263035	0		+			
ANR	5263157	Identifier	str		5263035	0					
ANR	5263158	PrimaryExpression	2		5263035	1					
ANR	5263159	CompoundStatement		23:26:364:364	5263035	1					
ANR	5263160	Label	case 64 :	170:2:3282:3289	5263035	0	True				
ANR	5263161	ReturnStatement	return ( ut64 ) UT64_MAX ;	170:11:3291:3312	5263035	1	True				
ANR	5263162	CastExpression	( ut64 ) UT64_MAX		5263035	0					
ANR	5263163	CastTarget	ut64		5263035	0					
ANR	5263164	Identifier	UT64_MAX		5263035	1					
ANR	5263165	Label	case 32 :	171:2:3316:3323	5263035	2	True				
ANR	5263166	ReturnStatement	return ( ut64 ) UT32_MAX ;	171:11:3325:3346	5263035	3	True				
ANR	5263167	CastExpression	( ut64 ) UT32_MAX		5263035	0					
ANR	5263168	CastTarget	ut64		5263035	0					
ANR	5263169	Identifier	UT32_MAX		5263035	1					
ANR	5263170	Label	case 16 :	172:2:3350:3357	5263035	4	True				
ANR	5263171	ReturnStatement	return ( ut64 ) UT16_MAX ;	172:11:3359:3380	5263035	5	True				
ANR	5263172	CastExpression	( ut64 ) UT16_MAX		5263035	0					
ANR	5263173	CastTarget	ut64		5263035	0					
ANR	5263174	Identifier	UT16_MAX		5263035	1					
ANR	5263175	Label	case 8 :	173:2:3384:3390	5263035	6	True				
ANR	5263176	ReturnStatement	return ( ut64 ) UT8_MAX ;	173:10:3392:3412	5263035	7	True				
ANR	5263177	CastExpression	( ut64 ) UT8_MAX		5263035	0					
ANR	5263178	CastTarget	ut64		5263035	0					
ANR	5263179	Identifier	UT8_MAX		5263035	1					
ANR	5263180	IfStatement	if ( num && num -> callback )		5263035	13					
ANR	5263181	Condition	num && num -> callback	177:5:3474:3493	5263035	0	True				
ANR	5263182	AndExpression	num && num -> callback		5263035	0		&&			
ANR	5263183	Identifier	num		5263035	0					
ANR	5263184	PtrMemberAccess	num -> callback		5263035	1					
ANR	5263185	Identifier	num		5263035	0					
ANR	5263186	Identifier	callback		5263035	1					
ANR	5263187	CompoundStatement		31:27:582:582	5263035	1					
ANR	5263188	ExpressionStatement	ok = 0	178:2:3500:3506	5263035	0	True				
ANR	5263189	AssignmentExpression	ok = 0		5263035	0		=			
ANR	5263190	Identifier	ok		5263035	0					
ANR	5263191	PrimaryExpression	0		5263035	1					
ANR	5263192	ExpressionStatement	"ret = num -> callback ( num -> userptr , str , & ok )"	179:2:3510:3554	5263035	1	True				
ANR	5263193	AssignmentExpression	"ret = num -> callback ( num -> userptr , str , & ok )"		5263035	0		=			
ANR	5263194	Identifier	ret		5263035	0					
ANR	5263195	CallExpression	"num -> callback ( num -> userptr , str , & ok )"		5263035	1					
ANR	5263196	Callee	num -> callback		5263035	0					
ANR	5263197	PtrMemberAccess	num -> callback		5263035	0					
ANR	5263198	Identifier	num		5263035	0					
ANR	5263199	Identifier	callback		5263035	1					
ANR	5263200	ArgumentList	num -> userptr		5263035	1					
ANR	5263201	Argument	num -> userptr		5263035	0					
ANR	5263202	PtrMemberAccess	num -> userptr		5263035	0					
ANR	5263203	Identifier	num		5263035	0					
ANR	5263204	Identifier	userptr		5263035	1					
ANR	5263205	Argument	str		5263035	1					
ANR	5263206	Identifier	str		5263035	0					
ANR	5263207	Argument	& ok		5263035	2					
ANR	5263208	UnaryOperationExpression	& ok		5263035	0					
ANR	5263209	UnaryOperator	&		5263035	0					
ANR	5263210	Identifier	ok		5263035	1					
ANR	5263211	IfStatement	if ( ok )		5263035	2					
ANR	5263212	Condition	ok	180:6:3562:3563	5263035	0	True				
ANR	5263213	Identifier	ok		5263035	0					
ANR	5263214	CompoundStatement		34:10:652:652	5263035	1					
ANR	5263215	ReturnStatement	return ret ;	181:3:3571:3581	5263035	0	True				
ANR	5263216	Identifier	ret		5263035	0					
ANR	5263217	IfStatement	if ( str [ 0 ] && str [ 1 ] && str [ 2 ] )		5263035	14					
ANR	5263218	Condition	str [ 0 ] && str [ 1 ] && str [ 2 ]	185:5:3596:3621	5263035	0	True				
ANR	5263219	AndExpression	str [ 0 ] && str [ 1 ] && str [ 2 ]		5263035	0		&&			
ANR	5263220	ArrayIndexing	str [ 0 ]		5263035	0					
ANR	5263221	Identifier	str		5263035	0					
ANR	5263222	PrimaryExpression	0		5263035	1					
ANR	5263223	AndExpression	str [ 1 ] && str [ 2 ]		5263035	1		&&			
ANR	5263224	ArrayIndexing	str [ 1 ]		5263035	0					
ANR	5263225	Identifier	str		5263035	0					
ANR	5263226	PrimaryExpression	1		5263035	1					
ANR	5263227	ArrayIndexing	str [ 2 ]		5263035	1					
ANR	5263228	Identifier	str		5263035	0					
ANR	5263229	PrimaryExpression	2		5263035	1					
ANR	5263230	CompoundStatement		39:33:710:710	5263035	1					
ANR	5263231	IfStatement	if ( str [ 0 ] == '\\'' && str [ 2 ] == '\\'' )		5263035	0					
ANR	5263232	Condition	str [ 0 ] == '\\'' && str [ 2 ] == '\\''	186:6:3632:3663	5263035	0	True				
ANR	5263233	AndExpression	str [ 0 ] == '\\'' && str [ 2 ] == '\\''		5263035	0		&&			
ANR	5263234	EqualityExpression	str [ 0 ] == '\\''		5263035	0		==			
ANR	5263235	ArrayIndexing	str [ 0 ]		5263035	0					
ANR	5263236	Identifier	str		5263035	0					
ANR	5263237	PrimaryExpression	0		5263035	1					
ANR	5263238	PrimaryExpression	'\\''		5263035	1					
ANR	5263239	EqualityExpression	str [ 2 ] == '\\''		5263035	1		==			
ANR	5263240	ArrayIndexing	str [ 2 ]		5263035	0					
ANR	5263241	Identifier	str		5263035	0					
ANR	5263242	PrimaryExpression	2		5263035	1					
ANR	5263243	PrimaryExpression	'\\''		5263035	1					
ANR	5263244	CompoundStatement		40:40:752:752	5263035	1					
ANR	5263245	ReturnStatement	return ( ut64 ) str [ 1 ] ;	187:3:3671:3690	5263035	0	True				
ANR	5263246	CastExpression	( ut64 ) str [ 1 ]		5263035	0					
ANR	5263247	CastTarget	ut64		5263035	0					
ANR	5263248	ArrayIndexing	str [ 1 ]		5263035	1					
ANR	5263249	Identifier	str		5263035	0					
ANR	5263250	PrimaryExpression	1		5263035	1					
ANR	5263251	ExpressionStatement	len = strlen ( str )	191:1:3701:3719	5263035	15	True				
ANR	5263252	AssignmentExpression	len = strlen ( str )		5263035	0		=			
ANR	5263253	Identifier	len		5263035	0					
ANR	5263254	CallExpression	strlen ( str )		5263035	1					
ANR	5263255	Callee	strlen		5263035	0					
ANR	5263256	Identifier	strlen		5263035	0					
ANR	5263257	ArgumentList	str		5263035	1					
ANR	5263258	Argument	str		5263035	0					
ANR	5263259	Identifier	str		5263035	0					
ANR	5263260	IfStatement	if ( len > 3 && str [ 4 ] == ':' )		5263035	16					
ANR	5263261	Condition	len > 3 && str [ 4 ] == ':'	192:5:3726:3749	5263035	0	True				
ANR	5263262	AndExpression	len > 3 && str [ 4 ] == ':'		5263035	0		&&			
ANR	5263263	RelationalExpression	len > 3		5263035	0		>			
ANR	5263264	Identifier	len		5263035	0					
ANR	5263265	PrimaryExpression	3		5263035	1					
ANR	5263266	EqualityExpression	str [ 4 ] == ':'		5263035	1		==			
ANR	5263267	ArrayIndexing	str [ 4 ]		5263035	0					
ANR	5263268	Identifier	str		5263035	0					
ANR	5263269	PrimaryExpression	4		5263035	1					
ANR	5263270	PrimaryExpression	':'		5263035	1					
ANR	5263271	CompoundStatement		46:31:838:838	5263035	1					
ANR	5263272	IfStatement	"if ( sscanf ( str , ""%04x"" , & s ) == 1 )"		5263035	0					
ANR	5263273	Condition	"sscanf ( str , ""%04x"" , & s ) == 1"	193:6:3760:3788	5263035	0	True				
ANR	5263274	EqualityExpression	"sscanf ( str , ""%04x"" , & s ) == 1"		5263035	0		==			
ANR	5263275	CallExpression	"sscanf ( str , ""%04x"" , & s )"		5263035	0					
ANR	5263276	Callee	sscanf		5263035	0					
ANR	5263277	Identifier	sscanf		5263035	0					
ANR	5263278	ArgumentList	str		5263035	1					
ANR	5263279	Argument	str		5263035	0					
ANR	5263280	Identifier	str		5263035	0					
ANR	5263281	Argument	"""%04x"""		5263035	1					
ANR	5263282	PrimaryExpression	"""%04x"""		5263035	0					
ANR	5263283	Argument	& s		5263035	2					
ANR	5263284	UnaryOperationExpression	& s		5263035	0					
ANR	5263285	UnaryOperator	&		5263035	0					
ANR	5263286	Identifier	s		5263035	1					
ANR	5263287	PrimaryExpression	1		5263035	1					
ANR	5263288	CompoundStatement		47:37:877:877	5263035	1					
ANR	5263289	IfStatement	"if ( sscanf ( str + 5 , ""%04x"" , & a ) == 1 )"		5263035	0					
ANR	5263290	Condition	"sscanf ( str + 5 , ""%04x"" , & a ) == 1"	194:7:3800:3832	5263035	0	True				
ANR	5263291	EqualityExpression	"sscanf ( str + 5 , ""%04x"" , & a ) == 1"		5263035	0		==			
ANR	5263292	CallExpression	"sscanf ( str + 5 , ""%04x"" , & a )"		5263035	0					
ANR	5263293	Callee	sscanf		5263035	0					
ANR	5263294	Identifier	sscanf		5263035	0					
ANR	5263295	ArgumentList	str + 5		5263035	1					
ANR	5263296	Argument	str + 5		5263035	0					
ANR	5263297	AdditiveExpression	str + 5		5263035	0		+			
ANR	5263298	Identifier	str		5263035	0					
ANR	5263299	PrimaryExpression	5		5263035	1					
ANR	5263300	Argument	"""%04x"""		5263035	1					
ANR	5263301	PrimaryExpression	"""%04x"""		5263035	0					
ANR	5263302	Argument	& a		5263035	2					
ANR	5263303	UnaryOperationExpression	& a		5263035	0					
ANR	5263304	UnaryOperator	&		5263035	0					
ANR	5263305	Identifier	a		5263035	1					
ANR	5263306	PrimaryExpression	1		5263035	1					
ANR	5263307	CompoundStatement		48:42:921:921	5263035	1					
ANR	5263308	ReturnStatement	return ( ut64 ) ( ( s << 4 ) + a ) ;	195:4:3841:3867	5263035	0	True				
ANR	5263309	CastExpression	( ut64 ) ( ( s << 4 ) + a )		5263035	0					
ANR	5263310	CastTarget	ut64		5263035	0					
ANR	5263311	AdditiveExpression	( s << 4 ) + a		5263035	1		+			
ANR	5263312	ShiftExpression	s << 4		5263035	0		<<			
ANR	5263313	Identifier	s		5263035	0					
ANR	5263314	PrimaryExpression	4		5263035	1					
ANR	5263315	Identifier	a		5263035	1					
ANR	5263316	ElseStatement	else		5263035	0					
ANR	5263317	IfStatement	if ( len > 6 && str [ 6 ] == ':' )		5263035	0					
ANR	5263318	Condition	len > 6 && str [ 6 ] == ':'	198:12:3890:3913	5263035	0	True				
ANR	5263319	AndExpression	len > 6 && str [ 6 ] == ':'		5263035	0		&&			
ANR	5263320	RelationalExpression	len > 6		5263035	0		>			
ANR	5263321	Identifier	len		5263035	0					
ANR	5263322	PrimaryExpression	6		5263035	1					
ANR	5263323	EqualityExpression	str [ 6 ] == ':'		5263035	1		==			
ANR	5263324	ArrayIndexing	str [ 6 ]		5263035	0					
ANR	5263325	Identifier	str		5263035	0					
ANR	5263326	PrimaryExpression	6		5263035	1					
ANR	5263327	PrimaryExpression	':'		5263035	1					
ANR	5263328	CompoundStatement		52:38:1002:1002	5263035	1					
ANR	5263329	IfStatement	"if ( sscanf ( str , ""0x%04x:0x%04x"" , & s , & a ) == 2 )"		5263035	0					
ANR	5263330	Condition	"sscanf ( str , ""0x%04x:0x%04x"" , & s , & a ) == 2"	199:6:3924:3965	5263035	0	True				
ANR	5263331	EqualityExpression	"sscanf ( str , ""0x%04x:0x%04x"" , & s , & a ) == 2"		5263035	0		==			
ANR	5263332	CallExpression	"sscanf ( str , ""0x%04x:0x%04x"" , & s , & a )"		5263035	0					
ANR	5263333	Callee	sscanf		5263035	0					
ANR	5263334	Identifier	sscanf		5263035	0					
ANR	5263335	ArgumentList	str		5263035	1					
ANR	5263336	Argument	str		5263035	0					
ANR	5263337	Identifier	str		5263035	0					
ANR	5263338	Argument	"""0x%04x:0x%04x"""		5263035	1					
ANR	5263339	PrimaryExpression	"""0x%04x:0x%04x"""		5263035	0					
ANR	5263340	Argument	& s		5263035	2					
ANR	5263341	UnaryOperationExpression	& s		5263035	0					
ANR	5263342	UnaryOperator	&		5263035	0					
ANR	5263343	Identifier	s		5263035	1					
ANR	5263344	Argument	& a		5263035	3					
ANR	5263345	UnaryOperationExpression	& a		5263035	0					
ANR	5263346	UnaryOperator	&		5263035	0					
ANR	5263347	Identifier	a		5263035	1					
ANR	5263348	PrimaryExpression	2		5263035	1					
ANR	5263349	CompoundStatement		53:50:1054:1054	5263035	1					
ANR	5263350	ReturnStatement	return ( ut64 ) ( ( s << 4 ) + a ) ;	200:3:3973:4001	5263035	0	True				
ANR	5263351	CastExpression	( ut64 ) ( ( s << 4 ) + a )		5263035	0					
ANR	5263352	CastTarget	ut64		5263035	0					
ANR	5263353	AdditiveExpression	( s << 4 ) + a		5263035	1		+			
ANR	5263354	ShiftExpression	s << 4		5263035	0		<<			
ANR	5263355	Identifier	s		5263035	0					
ANR	5263356	PrimaryExpression	4		5263035	1					
ANR	5263357	Identifier	a		5263035	1					
ANR	5263358	IfStatement	"if ( sscanf ( str , ""0x%04x:%04x"" , & s , & a ) == 2 )"		5263035	1					
ANR	5263359	Condition	"sscanf ( str , ""0x%04x:%04x"" , & s , & a ) == 2"	202:6:4013:4052	5263035	0	True				
ANR	5263360	EqualityExpression	"sscanf ( str , ""0x%04x:%04x"" , & s , & a ) == 2"		5263035	0		==			
ANR	5263361	CallExpression	"sscanf ( str , ""0x%04x:%04x"" , & s , & a )"		5263035	0					
ANR	5263362	Callee	sscanf		5263035	0					
ANR	5263363	Identifier	sscanf		5263035	0					
ANR	5263364	ArgumentList	str		5263035	1					
ANR	5263365	Argument	str		5263035	0					
ANR	5263366	Identifier	str		5263035	0					
ANR	5263367	Argument	"""0x%04x:%04x"""		5263035	1					
ANR	5263368	PrimaryExpression	"""0x%04x:%04x"""		5263035	0					
ANR	5263369	Argument	& s		5263035	2					
ANR	5263370	UnaryOperationExpression	& s		5263035	0					
ANR	5263371	UnaryOperator	&		5263035	0					
ANR	5263372	Identifier	s		5263035	1					
ANR	5263373	Argument	& a		5263035	3					
ANR	5263374	UnaryOperationExpression	& a		5263035	0					
ANR	5263375	UnaryOperator	&		5263035	0					
ANR	5263376	Identifier	a		5263035	1					
ANR	5263377	PrimaryExpression	2		5263035	1					
ANR	5263378	CompoundStatement		56:48:1141:1141	5263035	1					
ANR	5263379	ReturnStatement	return ( ut64 ) ( ( s << 4 ) + a ) ;	203:3:4060:4088	5263035	0	True				
ANR	5263380	CastExpression	( ut64 ) ( ( s << 4 ) + a )		5263035	0					
ANR	5263381	CastTarget	ut64		5263035	0					
ANR	5263382	AdditiveExpression	( s << 4 ) + a		5263035	1		+			
ANR	5263383	ShiftExpression	s << 4		5263035	0		<<			
ANR	5263384	Identifier	s		5263035	0					
ANR	5263385	PrimaryExpression	4		5263035	1					
ANR	5263386	Identifier	a		5263035	1					
ANR	5263387	IfStatement	if ( str [ 0 ] == '0' && str [ 1 ] == 'b' )		5263035	17					
ANR	5263388	Condition	str [ 0 ] == '0' && str [ 1 ] == 'b'	206:5:4102:4131	5263035	0	True				
ANR	5263389	AndExpression	str [ 0 ] == '0' && str [ 1 ] == 'b'		5263035	0		&&			
ANR	5263390	EqualityExpression	str [ 0 ] == '0'		5263035	0		==			
ANR	5263391	ArrayIndexing	str [ 0 ]		5263035	0					
ANR	5263392	Identifier	str		5263035	0					
ANR	5263393	PrimaryExpression	0		5263035	1					
ANR	5263394	PrimaryExpression	'0'		5263035	1					
ANR	5263395	EqualityExpression	str [ 1 ] == 'b'		5263035	1		==			
ANR	5263396	ArrayIndexing	str [ 1 ]		5263035	0					
ANR	5263397	Identifier	str		5263035	0					
ANR	5263398	PrimaryExpression	1		5263035	1					
ANR	5263399	PrimaryExpression	'b'		5263035	1					
ANR	5263400	CompoundStatement		60:37:1220:1220	5263035	1					
ANR	5263401	ExpressionStatement	ret = 0	207:2:4138:4145	5263035	0	True				
ANR	5263402	AssignmentExpression	ret = 0		5263035	0		=			
ANR	5263403	Identifier	ret		5263035	0					
ANR	5263404	PrimaryExpression	0		5263035	1					
ANR	5263405	ForStatement	"for ( j = 0 , i = strlen ( str ) - 1 ; i > 0 ; i -- , j ++ )"		5263035	1					
ANR	5263406	ForInit	"j = 0 , i = strlen ( str ) - 1 ;"	208:7:4154:4181	5263035	0	True				
ANR	5263407	Expression	"j = 0 , i = strlen ( str ) - 1"		5263035	0					
ANR	5263408	AssignmentExpression	j = 0		5263035	0		=			
ANR	5263409	Identifier	j		5263035	0					
ANR	5263410	PrimaryExpression	0		5263035	1					
ANR	5263411	AssignmentExpression	i = strlen ( str ) - 1		5263035	1		=			
ANR	5263412	Identifier	i		5263035	0					
ANR	5263413	AdditiveExpression	strlen ( str ) - 1		5263035	1		-			
ANR	5263414	CallExpression	strlen ( str )		5263035	0					
ANR	5263415	Callee	strlen		5263035	0					
ANR	5263416	Identifier	strlen		5263035	0					
ANR	5263417	ArgumentList	str		5263035	1					
ANR	5263418	Argument	str		5263035	0					
ANR	5263419	Identifier	str		5263035	0					
ANR	5263420	PrimaryExpression	1		5263035	1					
ANR	5263421	Condition	i > 0	208:36:4183:4187	5263035	1	True				
ANR	5263422	RelationalExpression	i > 0		5263035	0		>			
ANR	5263423	Identifier	i		5263035	0					
ANR	5263424	PrimaryExpression	0		5263035	1					
ANR	5263425	Expression	"i -- , j ++"	208:43:4190:4197	5263035	2	True				
ANR	5263426	PostIncDecOperationExpression	i --		5263035	0					
ANR	5263427	Identifier	i		5263035	0					
ANR	5263428	IncDec	--		5263035	1					
ANR	5263429	PostIncDecOperationExpression	j ++		5263035	1					
ANR	5263430	Identifier	j		5263035	0					
ANR	5263431	IncDec	++		5263035	1					
ANR	5263432	CompoundStatement		62:53:1286:1286	5263035	3					
ANR	5263433	IfStatement	if ( str [ i ] == '1' )		5263035	0					
ANR	5263434	Condition	str [ i ] == '1'	209:7:4209:4221	5263035	0	True				
ANR	5263435	EqualityExpression	str [ i ] == '1'		5263035	0		==			
ANR	5263436	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263437	Identifier	str		5263035	0					
ANR	5263438	Identifier	i		5263035	1					
ANR	5263439	PrimaryExpression	'1'		5263035	1					
ANR	5263440	CompoundStatement		63:22:1310:1310	5263035	1					
ANR	5263441	ExpressionStatement	ret |= 1 << j	210:4:4230:4241	5263035	0	True				
ANR	5263442	AssignmentExpression	ret |= 1 << j		5263035	0		|=			
ANR	5263443	Identifier	ret		5263035	0					
ANR	5263444	ShiftExpression	1 << j		5263035	1		<<			
ANR	5263445	PrimaryExpression	1		5263035	0					
ANR	5263446	Identifier	j		5263035	1					
ANR	5263447	ElseStatement	else		5263035	0					
ANR	5263448	IfStatement	if ( str [ i ] != '0' )		5263035	0					
ANR	5263449	Condition	str [ i ] != '0'	211:14:4257:4269	5263035	0	True				
ANR	5263450	EqualityExpression	str [ i ] != '0'		5263035	0		!=			
ANR	5263451	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263452	Identifier	str		5263035	0					
ANR	5263453	Identifier	i		5263035	1					
ANR	5263454	PrimaryExpression	'0'		5263035	1					
ANR	5263455	CompoundStatement		65:29:1358:1358	5263035	1					
ANR	5263456	BreakStatement	break ;	212:4:4278:4283	5263035	0	True				
ANR	5263457	Statement	sscanf	215:2:4296:4301	5263035	2	True				
ANR	5263458	Statement	(	215:9:4303:4303	5263035	3	True				
ANR	5263459	Statement	str	215:10:4304:4306	5263035	4	True				
ANR	5263460	Statement	","	215:13:4307:4307	5263035	5	True				
ANR	5263461	Statement	"""0x%"""	215:15:4309:4313	5263035	6	True				
ANR	5263462	Statement	PFMT64x	215:20:4314:4320	5263035	7	True				
ANR	5263463	Statement	","	215:27:4321:4321	5263035	8	True				
ANR	5263464	Statement	&	215:29:4323:4323	5263035	9	True				
ANR	5263465	Statement	ret	215:30:4324:4326	5263035	10	True				
ANR	5263466	Statement	)	215:33:4327:4327	5263035	11	True				
ANR	5263467	ExpressionStatement		215:34:4328:4328	5263035	12	True				
ANR	5263468	ElseStatement	else		5263035	0					
ANR	5263469	IfStatement	if ( str [ 0 ] == '\\'' )		5263035	0					
ANR	5263470	Condition	str [ 0 ] == '\\''	216:12:4342:4355	5263035	0	True				
ANR	5263471	EqualityExpression	str [ 0 ] == '\\''		5263035	0		==			
ANR	5263472	ArrayIndexing	str [ 0 ]		5263035	0					
ANR	5263473	Identifier	str		5263035	0					
ANR	5263474	PrimaryExpression	0		5263035	1					
ANR	5263475	PrimaryExpression	'\\''		5263035	1					
ANR	5263476	CompoundStatement		70:28:1444:1444	5263035	1					
ANR	5263477	ExpressionStatement	ret = str [ 1 ] & 0xff	217:2:4362:4381	5263035	0	True				
ANR	5263478	AssignmentExpression	ret = str [ 1 ] & 0xff		5263035	0		=			
ANR	5263479	Identifier	ret		5263035	0					
ANR	5263480	BitAndExpression	str [ 1 ] & 0xff		5263035	1		&			
ANR	5263481	ArrayIndexing	str [ 1 ]		5263035	0					
ANR	5263482	Identifier	str		5263035	0					
ANR	5263483	PrimaryExpression	1		5263035	1					
ANR	5263484	PrimaryExpression	0xff		5263035	1					
ANR	5263485	ElseStatement	else		5263035	0					
ANR	5263486	IfStatement	"if ( ! strncmp ( str , ""0xff.."" , 6 ) || ! strncmp ( str , ""0xFF.."" , 6 ) )"		5263035	0					
ANR	5263487	Condition	"! strncmp ( str , ""0xff.."" , 6 ) || ! strncmp ( str , ""0xFF.."" , 6 )"	219:12:4412:4469	5263035	0	True				
ANR	5263488	OrExpression	"! strncmp ( str , ""0xff.."" , 6 ) || ! strncmp ( str , ""0xFF.."" , 6 )"		5263035	0		||			
ANR	5263489	UnaryOperationExpression	"! strncmp ( str , ""0xff.."" , 6 )"		5263035	0					
ANR	5263490	UnaryOperator	!		5263035	0					
ANR	5263491	CallExpression	"strncmp ( str , ""0xff.."" , 6 )"		5263035	1					
ANR	5263492	Callee	strncmp		5263035	0					
ANR	5263493	Identifier	strncmp		5263035	0					
ANR	5263494	ArgumentList	str		5263035	1					
ANR	5263495	Argument	str		5263035	0					
ANR	5263496	Identifier	str		5263035	0					
ANR	5263497	Argument	"""0xff.."""		5263035	1					
ANR	5263498	PrimaryExpression	"""0xff.."""		5263035	0					
ANR	5263499	Argument	6		5263035	2					
ANR	5263500	PrimaryExpression	6		5263035	0					
ANR	5263501	UnaryOperationExpression	"! strncmp ( str , ""0xFF.."" , 6 )"		5263035	1					
ANR	5263502	UnaryOperator	!		5263035	0					
ANR	5263503	CallExpression	"strncmp ( str , ""0xFF.."" , 6 )"		5263035	1					
ANR	5263504	Callee	strncmp		5263035	0					
ANR	5263505	Identifier	strncmp		5263035	0					
ANR	5263506	ArgumentList	str		5263035	1					
ANR	5263507	Argument	str		5263035	0					
ANR	5263508	Identifier	str		5263035	0					
ANR	5263509	Argument	"""0xFF.."""		5263035	1					
ANR	5263510	PrimaryExpression	"""0xFF.."""		5263035	0					
ANR	5263511	Argument	6		5263035	2					
ANR	5263512	PrimaryExpression	6		5263035	0					
ANR	5263513	CompoundStatement		73:72:1558:1558	5263035	1					
ANR	5263514	ExpressionStatement	"ret = r_num_tailff ( num , str + 6 )"	220:2:4476:4509	5263035	0	True				
ANR	5263515	AssignmentExpression	"ret = r_num_tailff ( num , str + 6 )"		5263035	0		=			
ANR	5263516	Identifier	ret		5263035	0					
ANR	5263517	CallExpression	"r_num_tailff ( num , str + 6 )"		5263035	1					
ANR	5263518	Callee	r_num_tailff		5263035	0					
ANR	5263519	Identifier	r_num_tailff		5263035	0					
ANR	5263520	ArgumentList	num		5263035	1					
ANR	5263521	Argument	num		5263035	0					
ANR	5263522	Identifier	num		5263035	0					
ANR	5263523	Argument	str + 6		5263035	1					
ANR	5263524	AdditiveExpression	str + 6		5263035	0		+			
ANR	5263525	Identifier	str		5263035	0					
ANR	5263526	PrimaryExpression	6		5263035	1					
ANR	5263527	ElseStatement	else		5263035	0					
ANR	5263528	IfStatement	"if ( ! strncmp ( str , ""0xf.."" , 5 ) || ! strncmp ( str , ""0xF.."" , 5 ) )"		5263035	0					
ANR	5263529	Condition	"! strncmp ( str , ""0xf.."" , 5 ) || ! strncmp ( str , ""0xF.."" , 5 )"	222:12:4540:4595	5263035	0	True				
ANR	5263530	OrExpression	"! strncmp ( str , ""0xf.."" , 5 ) || ! strncmp ( str , ""0xF.."" , 5 )"		5263035	0		||			
ANR	5263531	UnaryOperationExpression	"! strncmp ( str , ""0xf.."" , 5 )"		5263035	0					
ANR	5263532	UnaryOperator	!		5263035	0					
ANR	5263533	CallExpression	"strncmp ( str , ""0xf.."" , 5 )"		5263035	1					
ANR	5263534	Callee	strncmp		5263035	0					
ANR	5263535	Identifier	strncmp		5263035	0					
ANR	5263536	ArgumentList	str		5263035	1					
ANR	5263537	Argument	str		5263035	0					
ANR	5263538	Identifier	str		5263035	0					
ANR	5263539	Argument	"""0xf.."""		5263035	1					
ANR	5263540	PrimaryExpression	"""0xf.."""		5263035	0					
ANR	5263541	Argument	5		5263035	2					
ANR	5263542	PrimaryExpression	5		5263035	0					
ANR	5263543	UnaryOperationExpression	"! strncmp ( str , ""0xF.."" , 5 )"		5263035	1					
ANR	5263544	UnaryOperator	!		5263035	0					
ANR	5263545	CallExpression	"strncmp ( str , ""0xF.."" , 5 )"		5263035	1					
ANR	5263546	Callee	strncmp		5263035	0					
ANR	5263547	Identifier	strncmp		5263035	0					
ANR	5263548	ArgumentList	str		5263035	1					
ANR	5263549	Argument	str		5263035	0					
ANR	5263550	Identifier	str		5263035	0					
ANR	5263551	Argument	"""0xF.."""		5263035	1					
ANR	5263552	PrimaryExpression	"""0xF.."""		5263035	0					
ANR	5263553	Argument	5		5263035	2					
ANR	5263554	PrimaryExpression	5		5263035	0					
ANR	5263555	CompoundStatement		76:70:1684:1684	5263035	1					
ANR	5263556	ExpressionStatement	"ret = r_num_tailff ( num , str + 5 )"	223:2:4602:4635	5263035	0	True				
ANR	5263557	AssignmentExpression	"ret = r_num_tailff ( num , str + 5 )"		5263035	0		=			
ANR	5263558	Identifier	ret		5263035	0					
ANR	5263559	CallExpression	"r_num_tailff ( num , str + 5 )"		5263035	1					
ANR	5263560	Callee	r_num_tailff		5263035	0					
ANR	5263561	Identifier	r_num_tailff		5263035	0					
ANR	5263562	ArgumentList	num		5263035	1					
ANR	5263563	Argument	num		5263035	0					
ANR	5263564	Identifier	num		5263035	0					
ANR	5263565	Argument	str + 5		5263035	1					
ANR	5263566	AdditiveExpression	str + 5		5263035	0		+			
ANR	5263567	Identifier	str		5263035	0					
ANR	5263568	PrimaryExpression	5		5263035	1					
ANR	5263569	ElseStatement	else		5263035	0					
ANR	5263570	IfStatement	if ( str [ 0 ] == '0' && tolower ( str [ 1 ] ) == 'x' )		5263035	0					
ANR	5263571	Condition	str [ 0 ] == '0' && tolower ( str [ 1 ] ) == 'x'	224:12:4649:4688	5263035	0	True				
ANR	5263572	AndExpression	str [ 0 ] == '0' && tolower ( str [ 1 ] ) == 'x'		5263035	0		&&			
ANR	5263573	EqualityExpression	str [ 0 ] == '0'		5263035	0		==			
ANR	5263574	ArrayIndexing	str [ 0 ]		5263035	0					
ANR	5263575	Identifier	str		5263035	0					
ANR	5263576	PrimaryExpression	0		5263035	1					
ANR	5263577	PrimaryExpression	'0'		5263035	1					
ANR	5263578	EqualityExpression	tolower ( str [ 1 ] ) == 'x'		5263035	1		==			
ANR	5263579	CallExpression	tolower ( str [ 1 ] )		5263035	0					
ANR	5263580	Callee	tolower		5263035	0					
ANR	5263581	Identifier	tolower		5263035	0					
ANR	5263582	ArgumentList	str [ 1 ]		5263035	1					
ANR	5263583	Argument	str [ 1 ]		5263035	0					
ANR	5263584	ArrayIndexing	str [ 1 ]		5263035	0					
ANR	5263585	Identifier	str		5263035	0					
ANR	5263586	PrimaryExpression	1		5263035	1					
ANR	5263587	PrimaryExpression	'x'		5263035	1					
ANR	5263588	CompoundStatement		79:2:1781:1823	5263035	1					
ANR	5263589	IdentifierDeclStatement	"const char * lodash = strchr ( str + 2 , '_' ) ;"	225:2:4695:4737	5263035	0	True				
ANR	5263590	IdentifierDecl	"* lodash = strchr ( str + 2 , '_' )"		5263035	0					
ANR	5263591	IdentifierDeclType	const char *		5263035	0					
ANR	5263592	Identifier	lodash		5263035	1					
ANR	5263593	AssignmentExpression	"* lodash = strchr ( str + 2 , '_' )"		5263035	2		=			
ANR	5263594	Identifier	lodash		5263035	0					
ANR	5263595	CallExpression	"strchr ( str + 2 , '_' )"		5263035	1					
ANR	5263596	Callee	strchr		5263035	0					
ANR	5263597	Identifier	strchr		5263035	0					
ANR	5263598	ArgumentList	str + 2		5263035	1					
ANR	5263599	Argument	str + 2		5263035	0					
ANR	5263600	AdditiveExpression	str + 2		5263035	0		+			
ANR	5263601	Identifier	str		5263035	0					
ANR	5263602	PrimaryExpression	2		5263035	1					
ANR	5263603	Argument	'_'		5263035	1					
ANR	5263604	PrimaryExpression	'_'		5263035	0					
ANR	5263605	IfStatement	if ( lodash )		5263035	1					
ANR	5263606	Condition	lodash	226:6:4745:4750	5263035	0	True				
ANR	5263607	Identifier	lodash		5263035	0					
ANR	5263608	CompoundStatement		83:3:1953:1979	5263035	1					
ANR	5263609	IdentifierDeclStatement	char * s = strdup ( str + 2 ) ;	229:3:4867:4893	5263035	0	True				
ANR	5263610	IdentifierDecl	* s = strdup ( str + 2 )		5263035	0					
ANR	5263611	IdentifierDeclType	char *		5263035	0					
ANR	5263612	Identifier	s		5263035	1					
ANR	5263613	AssignmentExpression	* s = strdup ( str + 2 )		5263035	2		=			
ANR	5263614	Identifier	s		5263035	0					
ANR	5263615	CallExpression	strdup ( str + 2 )		5263035	1					
ANR	5263616	Callee	strdup		5263035	0					
ANR	5263617	Identifier	strdup		5263035	0					
ANR	5263618	ArgumentList	str + 2		5263035	1					
ANR	5263619	Argument	str + 2		5263035	0					
ANR	5263620	AdditiveExpression	str + 2		5263035	0		+			
ANR	5263621	Identifier	str		5263035	0					
ANR	5263622	PrimaryExpression	2		5263035	1					
ANR	5263623	IfStatement	if ( s )		5263035	1					
ANR	5263624	Condition	s	230:7:4902:4902	5263035	0	True				
ANR	5263625	Identifier	s		5263035	0					
ANR	5263626	CompoundStatement		84:10:1991:1991	5263035	1					
ANR	5263627	ExpressionStatement	"r_str_replace_char ( s , '_' , 0 )"	231:4:4911:4941	5263035	0	True				
ANR	5263628	CallExpression	"r_str_replace_char ( s , '_' , 0 )"		5263035	0					
ANR	5263629	Callee	r_str_replace_char		5263035	0					
ANR	5263630	Identifier	r_str_replace_char		5263035	0					
ANR	5263631	ArgumentList	s		5263035	1					
ANR	5263632	Argument	s		5263035	0					
ANR	5263633	Identifier	s		5263035	0					
ANR	5263634	Argument	'_'		5263035	1					
ANR	5263635	PrimaryExpression	'_'		5263035	0					
ANR	5263636	Argument	0		5263035	2					
ANR	5263637	PrimaryExpression	0		5263035	0					
ANR	5263638	ExpressionStatement	"ret = strtoull ( s , NULL , 16 )"	232:4:4947:4975	5263035	1	True				
ANR	5263639	AssignmentExpression	"ret = strtoull ( s , NULL , 16 )"		5263035	0		=			
ANR	5263640	Identifier	ret		5263035	0					
ANR	5263641	CallExpression	"strtoull ( s , NULL , 16 )"		5263035	1					
ANR	5263642	Callee	strtoull		5263035	0					
ANR	5263643	Identifier	strtoull		5263035	0					
ANR	5263644	ArgumentList	s		5263035	1					
ANR	5263645	Argument	s		5263035	0					
ANR	5263646	Identifier	s		5263035	0					
ANR	5263647	Argument	NULL		5263035	1					
ANR	5263648	Identifier	NULL		5263035	0					
ANR	5263649	Argument	16		5263035	2					
ANR	5263650	PrimaryExpression	16		5263035	0					
ANR	5263651	ExpressionStatement	free ( s )	233:4:4981:4989	5263035	2	True				
ANR	5263652	CallExpression	free ( s )		5263035	0					
ANR	5263653	Callee	free		5263035	0					
ANR	5263654	Identifier	free		5263035	0					
ANR	5263655	ArgumentList	s		5263035	1					
ANR	5263656	Argument	s		5263035	0					
ANR	5263657	Identifier	s		5263035	0					
ANR	5263658	ElseStatement	else		5263035	0					
ANR	5263659	CompoundStatement		89:9:2091:2091	5263035	0					
ANR	5263660	ExpressionStatement	"ret = strtoull ( str + 2 , NULL , 16 )"	236:3:5010:5044	5263035	0	True				
ANR	5263661	AssignmentExpression	"ret = strtoull ( str + 2 , NULL , 16 )"		5263035	0		=			
ANR	5263662	Identifier	ret		5263035	0					
ANR	5263663	CallExpression	"strtoull ( str + 2 , NULL , 16 )"		5263035	1					
ANR	5263664	Callee	strtoull		5263035	0					
ANR	5263665	Identifier	strtoull		5263035	0					
ANR	5263666	ArgumentList	str + 2		5263035	1					
ANR	5263667	Argument	str + 2		5263035	0					
ANR	5263668	AdditiveExpression	str + 2		5263035	0		+			
ANR	5263669	Identifier	str		5263035	0					
ANR	5263670	PrimaryExpression	2		5263035	1					
ANR	5263671	Argument	NULL		5263035	1					
ANR	5263672	Identifier	NULL		5263035	0					
ANR	5263673	Argument	16		5263035	2					
ANR	5263674	PrimaryExpression	16		5263035	0					
ANR	5263675	ElseStatement	else		5263035	0					
ANR	5263676	CompoundStatement		97:2:2271:2293	5263035	0					
ANR	5263677	IdentifierDeclStatement	char * endptr ;	240:2:5102:5114	5263035	0	True				
ANR	5263678	IdentifierDecl	* endptr		5263035	0					
ANR	5263679	IdentifierDeclType	char *		5263035	0					
ANR	5263680	Identifier	endptr		5263035	1					
ANR	5263681	IdentifierDeclStatement	int len_num = len > 0 ? len - 1 : 0 ;	241:2:5118:5153	5263035	1	True				
ANR	5263682	IdentifierDecl	len_num = len > 0 ? len - 1 : 0		5263035	0					
ANR	5263683	IdentifierDeclType	int		5263035	0					
ANR	5263684	Identifier	len_num		5263035	1					
ANR	5263685	AssignmentExpression	len_num = len > 0 ? len - 1 : 0		5263035	2		=			
ANR	5263686	Identifier	len_num		5263035	0					
ANR	5263687	ConditionalExpression	len > 0 ? len - 1 : 0		5263035	1					
ANR	5263688	Condition	len > 0		5263035	0					
ANR	5263689	RelationalExpression	len > 0		5263035	0		>			
ANR	5263690	Identifier	len		5263035	0					
ANR	5263691	PrimaryExpression	0		5263035	1					
ANR	5263692	AdditiveExpression	len - 1		5263035	1		-			
ANR	5263693	Identifier	len		5263035	0					
ANR	5263694	PrimaryExpression	1		5263035	1					
ANR	5263695	PrimaryExpression	0		5263035	2					
ANR	5263696	IdentifierDeclStatement	int chars_read = len_num ;	242:2:5157:5181	5263035	2	True				
ANR	5263697	IdentifierDecl	chars_read = len_num		5263035	0					
ANR	5263698	IdentifierDeclType	int		5263035	0					
ANR	5263699	Identifier	chars_read		5263035	1					
ANR	5263700	AssignmentExpression	chars_read = len_num		5263035	2		=			
ANR	5263701	Identifier	len_num		5263035	0					
ANR	5263702	Identifier	len_num		5263035	1					
ANR	5263703	IdentifierDeclStatement	bool zero_read = false ;	243:2:5185:5207	5263035	3	True				
ANR	5263704	IdentifierDecl	zero_read = false		5263035	0					
ANR	5263705	IdentifierDeclType	bool		5263035	0					
ANR	5263706	Identifier	zero_read		5263035	1					
ANR	5263707	AssignmentExpression	zero_read = false		5263035	2		=			
ANR	5263708	Identifier	false		5263035	0					
ANR	5263709	Identifier	false		5263035	1					
ANR	5263710	ExpressionStatement	lch = str [ len > 0 ? len - 1 : 0 ]	244:2:5211:5243	5263035	4	True				
ANR	5263711	AssignmentExpression	lch = str [ len > 0 ? len - 1 : 0 ]		5263035	0		=			
ANR	5263712	Identifier	lch		5263035	0					
ANR	5263713	ArrayIndexing	str [ len > 0 ? len - 1 : 0 ]		5263035	1					
ANR	5263714	Identifier	str		5263035	0					
ANR	5263715	ConditionalExpression	len > 0 ? len - 1 : 0		5263035	1					
ANR	5263716	Condition	len > 0		5263035	0					
ANR	5263717	RelationalExpression	len > 0		5263035	0		>			
ANR	5263718	Identifier	len		5263035	0					
ANR	5263719	PrimaryExpression	0		5263035	1					
ANR	5263720	AdditiveExpression	len - 1		5263035	1		-			
ANR	5263721	Identifier	len		5263035	0					
ANR	5263722	PrimaryExpression	1		5263035	1					
ANR	5263723	PrimaryExpression	0		5263035	2					
ANR	5263724	IfStatement	if ( * str == '0' && IS_DIGIT ( * ( str + 1 ) ) && lch != 'b' && lch != 'h' )		5263035	5					
ANR	5263725	Condition	* str == '0' && IS_DIGIT ( * ( str + 1 ) ) && lch != 'b' && lch != 'h'	245:6:5251:5314	5263035	0	True				
ANR	5263726	AndExpression	* str == '0' && IS_DIGIT ( * ( str + 1 ) ) && lch != 'b' && lch != 'h'		5263035	0		&&			
ANR	5263727	EqualityExpression	* str == '0'		5263035	0		==			
ANR	5263728	UnaryOperationExpression	* str		5263035	0					
ANR	5263729	UnaryOperator	*		5263035	0					
ANR	5263730	Identifier	str		5263035	1					
ANR	5263731	PrimaryExpression	'0'		5263035	1					
ANR	5263732	AndExpression	IS_DIGIT ( * ( str + 1 ) ) && lch != 'b' && lch != 'h'		5263035	1		&&			
ANR	5263733	CallExpression	IS_DIGIT ( * ( str + 1 ) )		5263035	0					
ANR	5263734	Callee	IS_DIGIT		5263035	0					
ANR	5263735	Identifier	IS_DIGIT		5263035	0					
ANR	5263736	ArgumentList	* ( str + 1 )		5263035	1					
ANR	5263737	Argument	* ( str + 1 )		5263035	0					
ANR	5263738	UnaryOperationExpression	* ( str + 1 )		5263035	0					
ANR	5263739	UnaryOperator	*		5263035	0					
ANR	5263740	AdditiveExpression	str + 1		5263035	1		+			
ANR	5263741	Identifier	str		5263035	0					
ANR	5263742	PrimaryExpression	1		5263035	1					
ANR	5263743	AndExpression	lch != 'b' && lch != 'h'		5263035	1		&&			
ANR	5263744	EqualityExpression	lch != 'b'		5263035	0		!=			
ANR	5263745	Identifier	lch		5263035	0					
ANR	5263746	PrimaryExpression	'b'		5263035	1					
ANR	5263747	EqualityExpression	lch != 'h'		5263035	1		!=			
ANR	5263748	Identifier	lch		5263035	0					
ANR	5263749	PrimaryExpression	'h'		5263035	1					
ANR	5263750	CompoundStatement		99:72:2403:2403	5263035	1					
ANR	5263751	ExpressionStatement	lch = 'o'	246:3:5322:5331	5263035	0	True				
ANR	5263752	AssignmentExpression	lch = 'o'		5263035	0		=			
ANR	5263753	Identifier	lch		5263035	0					
ANR	5263754	PrimaryExpression	'o'		5263035	1					
ANR	5263755	ExpressionStatement	len_num ++	247:3:5336:5345	5263035	1	True				
ANR	5263756	PostIncDecOperationExpression	len_num ++		5263035	0					
ANR	5263757	Identifier	len_num		5263035	0					
ANR	5263758	IncDec	++		5263035	1					
ANR	5263759	SwitchStatement	switch ( lch )		5263035	6					
ANR	5263760	Condition	lch	249:10:5361:5363	5263035	0	True				
ANR	5263761	Identifier	lch		5263035	0					
ANR	5263762	CompoundStatement		140:3:3387:3397	5263035	1					
ANR	5263763	Label	case 'h' :	250:2:5370:5378	5263035	0	True				
ANR	5263764	Statement	if	251:3:5391:5392	5263035	1	True				
ANR	5263765	Statement	(	251:6:5394:5394	5263035	2	True				
ANR	5263766	Statement	!	251:7:5395:5395	5263035	3	True				
ANR	5263767	Statement	sscanf	251:8:5396:5401	5263035	4	True				
ANR	5263768	Statement	(	251:15:5403:5403	5263035	5	True				
ANR	5263769	Statement	str	251:16:5404:5406	5263035	6	True				
ANR	5263770	Statement	","	251:19:5407:5407	5263035	7	True				
ANR	5263771	Statement	"""%"""	251:21:5409:5411	5263035	8	True				
ANR	5263772	Statement	PFMT64x	251:24:5412:5418	5263035	9	True				
ANR	5263773	Statement	"""%n"""	251:31:5419:5422	5263035	10	True				
ANR	5263774	Statement	","	251:35:5423:5423	5263035	11	True				
ANR	5263775	Statement	&	251:37:5425:5425	5263035	12	True				
ANR	5263776	Statement	ret	251:38:5426:5428	5263035	13	True				
ANR	5263777	Statement	","	251:41:5429:5429	5263035	14	True				
ANR	5263778	Statement	&	251:43:5431:5431	5263035	15	True				
ANR	5263779	Statement	chars_read	251:44:5432:5441	5263035	16	True				
ANR	5263780	Statement	)	251:54:5442:5442	5263035	17	True				
ANR	5263781	Statement	||	252:7:5451:5452	5263035	18	True				
ANR	5263782	Statement	chars_read	252:10:5454:5463	5263035	19	True				
ANR	5263783	Statement	!=	252:21:5465:5466	5263035	20	True				
ANR	5263784	Statement	len_num	252:24:5468:5474	5263035	21	True				
ANR	5263785	Statement	)	252:31:5475:5475	5263035	22	True				
ANR	5263786	CompoundStatement		106:33:2563:2563	5263035	23					
ANR	5263787	ExpressionStatement	"error ( num , ""invalid hex number"" )"	253:4:5483:5516	5263035	0	True				
ANR	5263788	CallExpression	"error ( num , ""invalid hex number"" )"		5263035	0					
ANR	5263789	Callee	error		5263035	0					
ANR	5263790	Identifier	error		5263035	0					
ANR	5263791	ArgumentList	num		5263035	1					
ANR	5263792	Argument	num		5263035	0					
ANR	5263793	Identifier	num		5263035	0					
ANR	5263794	Argument	"""invalid hex number"""		5263035	1					
ANR	5263795	PrimaryExpression	"""invalid hex number"""		5263035	0					
ANR	5263796	BreakStatement	break ;	255:3:5526:5531	5263035	24	True				
ANR	5263797	Label	case 'o' :	256:2:5535:5543	5263035	25	True				
ANR	5263798	Statement	if	257:3:5557:5558	5263035	26	True				
ANR	5263799	Statement	(	257:6:5560:5560	5263035	27	True				
ANR	5263800	Statement	!	257:7:5561:5561	5263035	28	True				
ANR	5263801	Statement	sscanf	257:8:5562:5567	5263035	29	True				
ANR	5263802	Statement	(	257:15:5569:5569	5263035	30	True				
ANR	5263803	Statement	str	257:16:5570:5572	5263035	31	True				
ANR	5263804	Statement	","	257:19:5573:5573	5263035	32	True				
ANR	5263805	Statement	"""%"""	257:21:5575:5577	5263035	33	True				
ANR	5263806	Statement	PFMT64o	257:24:5578:5584	5263035	34	True				
ANR	5263807	Statement	"""%n"""	257:31:5585:5588	5263035	35	True				
ANR	5263808	Statement	","	257:35:5589:5589	5263035	36	True				
ANR	5263809	Statement	&	257:37:5591:5591	5263035	37	True				
ANR	5263810	Statement	ret	257:38:5592:5594	5263035	38	True				
ANR	5263811	Statement	","	257:41:5595:5595	5263035	39	True				
ANR	5263812	Statement	&	257:43:5597:5597	5263035	40	True				
ANR	5263813	Statement	chars_read	257:44:5598:5607	5263035	41	True				
ANR	5263814	Statement	)	257:54:5608:5608	5263035	42	True				
ANR	5263815	Statement	||	258:7:5617:5618	5263035	43	True				
ANR	5263816	Statement	chars_read	258:10:5620:5629	5263035	44	True				
ANR	5263817	Statement	!=	258:21:5631:5632	5263035	45	True				
ANR	5263818	Statement	len_num	258:24:5634:5640	5263035	46	True				
ANR	5263819	Statement	)	258:31:5641:5641	5263035	47	True				
ANR	5263820	CompoundStatement		112:33:2729:2729	5263035	48					
ANR	5263821	ExpressionStatement	"error ( num , ""invalid octal number"" )"	259:4:5649:5684	5263035	0	True				
ANR	5263822	CallExpression	"error ( num , ""invalid octal number"" )"		5263035	0					
ANR	5263823	Callee	error		5263035	0					
ANR	5263824	Identifier	error		5263035	0					
ANR	5263825	ArgumentList	num		5263035	1					
ANR	5263826	Argument	num		5263035	0					
ANR	5263827	Identifier	num		5263035	0					
ANR	5263828	Argument	"""invalid octal number"""		5263035	1					
ANR	5263829	PrimaryExpression	"""invalid octal number"""		5263035	0					
ANR	5263830	BreakStatement	break ;	261:3:5694:5699	5263035	49	True				
ANR	5263831	Label	case 'b' :	262:2:5703:5711	5263035	50	True				
ANR	5263832	ExpressionStatement	ret = 0	263:3:5726:5733	5263035	51	True				
ANR	5263833	AssignmentExpression	ret = 0		5263035	0		=			
ANR	5263834	Identifier	ret		5263035	0					
ANR	5263835	PrimaryExpression	0		5263035	1					
ANR	5263836	ExpressionStatement	ok = true	264:3:5738:5747	5263035	52	True				
ANR	5263837	AssignmentExpression	ok = true		5263035	0		=			
ANR	5263838	Identifier	ok		5263035	0					
ANR	5263839	Identifier	true		5263035	1					
ANR	5263840	IfStatement	if ( strlen ( str ) <= 65 )		5263035	53					
ANR	5263841	Condition	strlen ( str ) <= 65	265:7:5756:5773	5263035	0	True				
ANR	5263842	RelationalExpression	strlen ( str ) <= 65		5263035	0		<=			
ANR	5263843	CallExpression	strlen ( str )		5263035	0					
ANR	5263844	Callee	strlen		5263035	0					
ANR	5263845	Identifier	strlen		5263035	0					
ANR	5263846	ArgumentList	str		5263035	1					
ANR	5263847	Argument	str		5263035	0					
ANR	5263848	Identifier	str		5263035	0					
ANR	5263849	PrimaryExpression	65		5263035	1					
ANR	5263850	CompoundStatement		119:27:2862:2862	5263035	1					
ANR	5263851	ForStatement	"for ( j = 0 , i = strlen ( str ) - 2 ; i >= 0 ; i -- , j ++ )"		5263035	0					
ANR	5263852	ForInit	"j = 0 , i = strlen ( str ) - 2 ;"	266:9:5814:5841	5263035	0	True				
ANR	5263853	Expression	"j = 0 , i = strlen ( str ) - 2"		5263035	0					
ANR	5263854	AssignmentExpression	j = 0		5263035	0		=			
ANR	5263855	Identifier	j		5263035	0					
ANR	5263856	PrimaryExpression	0		5263035	1					
ANR	5263857	AssignmentExpression	i = strlen ( str ) - 2		5263035	1		=			
ANR	5263858	Identifier	i		5263035	0					
ANR	5263859	AdditiveExpression	strlen ( str ) - 2		5263035	1		-			
ANR	5263860	CallExpression	strlen ( str )		5263035	0					
ANR	5263861	Callee	strlen		5263035	0					
ANR	5263862	Identifier	strlen		5263035	0					
ANR	5263863	ArgumentList	str		5263035	1					
ANR	5263864	Argument	str		5263035	0					
ANR	5263865	Identifier	str		5263035	0					
ANR	5263866	PrimaryExpression	2		5263035	1					
ANR	5263867	Condition	i >= 0	266:38:5843:5848	5263035	1	True				
ANR	5263868	RelationalExpression	i >= 0		5263035	0		>=			
ANR	5263869	Identifier	i		5263035	0					
ANR	5263870	PrimaryExpression	0		5263035	1					
ANR	5263871	Expression	"i -- , j ++"	266:46:5851:5858	5263035	2	True				
ANR	5263872	PostIncDecOperationExpression	i --		5263035	0					
ANR	5263873	Identifier	i		5263035	0					
ANR	5263874	IncDec	--		5263035	1					
ANR	5263875	PostIncDecOperationExpression	j ++		5263035	1					
ANR	5263876	Identifier	j		5263035	0					
ANR	5263877	IncDec	++		5263035	1					
ANR	5263878	CompoundStatement		120:56:2947:2947	5263035	3					
ANR	5263879	IfStatement	if ( str [ i ] == '1' )		5263035	0					
ANR	5263880	Condition	str [ i ] == '1'	267:9:5872:5884	5263035	0	True				
ANR	5263881	EqualityExpression	str [ i ] == '1'		5263035	0		==			
ANR	5263882	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263883	Identifier	str		5263035	0					
ANR	5263884	Identifier	i		5263035	1					
ANR	5263885	PrimaryExpression	'1'		5263035	1					
ANR	5263886	CompoundStatement		121:24:2973:2973	5263035	1					
ANR	5263887	Statement	ret	268:6:5895:5897	5263035	0	True				
ANR	5263888	Statement	|=	268:10:5899:5900	5263035	1	True				
ANR	5263889	Statement	(	268:13:5902:5902	5263035	2	True				
ANR	5263890	Statement	1UL	268:14:5903:5905	5263035	3	True				
ANR	5263891	Statement	L	268:17:5906:5906	5263035	4	True				
ANR	5263892	Statement	<<	268:19:5908:5909	5263035	5	True				
ANR	5263893	Statement	j	268:22:5911:5911	5263035	6	True				
ANR	5263894	Statement	)	268:23:5912:5912	5263035	7	True				
ANR	5263895	ExpressionStatement		268:24:5913:5913	5263035	8	True				
ANR	5263896	ElseStatement	else		5263035	0					
ANR	5263897	IfStatement	if ( str [ i ] != '0' )		5263035	0					
ANR	5263898	Condition	str [ i ] != '0'	269:16:5931:5943	5263035	0	True				
ANR	5263899	EqualityExpression	str [ i ] != '0'		5263035	0		!=			
ANR	5263900	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263901	Identifier	str		5263035	0					
ANR	5263902	Identifier	i		5263035	1					
ANR	5263903	PrimaryExpression	'0'		5263035	1					
ANR	5263904	CompoundStatement		123:31:3032:3032	5263035	1					
ANR	5263905	ExpressionStatement	ok = false	271:6:6031:6041	5263035	0	True				
ANR	5263906	AssignmentExpression	ok = false		5263035	0		=			
ANR	5263907	Identifier	ok		5263035	0					
ANR	5263908	Identifier	false		5263035	1					
ANR	5263909	BreakStatement	break ;	272:6:6049:6054	5263035	1	True				
ANR	5263910	ElseStatement	else		5263035	0					
ANR	5263911	CompoundStatement		129:10:3165:3165	5263035	0					
ANR	5263912	ExpressionStatement	ok = false	276:4:6085:6095	5263035	0	True				
ANR	5263913	AssignmentExpression	ok = false		5263035	0		=			
ANR	5263914	Identifier	ok		5263035	0					
ANR	5263915	Identifier	false		5263035	1					
ANR	5263916	IfStatement	if ( ! ok || ! len_num )		5263035	54					
ANR	5263917	Condition	! ok || ! len_num	279:7:6173:6187	5263035	0	True				
ANR	5263918	OrExpression	! ok || ! len_num		5263035	0		||			
ANR	5263919	UnaryOperationExpression	! ok		5263035	0					
ANR	5263920	UnaryOperator	!		5263035	0					
ANR	5263921	Identifier	ok		5263035	1					
ANR	5263922	UnaryOperationExpression	! len_num		5263035	1					
ANR	5263923	UnaryOperator	!		5263035	0					
ANR	5263924	Identifier	len_num		5263035	1					
ANR	5263925	CompoundStatement		133:24:3276:3276	5263035	1					
ANR	5263926	ExpressionStatement	"error ( num , ""invalid binary number"" )"	280:4:6196:6232	5263035	0	True				
ANR	5263927	CallExpression	"error ( num , ""invalid binary number"" )"		5263035	0					
ANR	5263928	Callee	error		5263035	0					
ANR	5263929	Identifier	error		5263035	0					
ANR	5263930	ArgumentList	num		5263035	1					
ANR	5263931	Argument	num		5263035	0					
ANR	5263932	Identifier	num		5263035	0					
ANR	5263933	Argument	"""invalid binary number"""		5263035	1					
ANR	5263934	PrimaryExpression	"""invalid binary number"""		5263035	0					
ANR	5263935	BreakStatement	break ;	282:3:6242:6247	5263035	55	True				
ANR	5263936	Label	case 't' :	283:2:6251:6259	5263035	56	True				
ANR	5263937	ExpressionStatement	ret = 0	284:3:6275:6282	5263035	57	True				
ANR	5263938	AssignmentExpression	ret = 0		5263035	0		=			
ANR	5263939	Identifier	ret		5263035	0					
ANR	5263940	PrimaryExpression	0		5263035	1					
ANR	5263941	ExpressionStatement	ok = true	285:3:6287:6296	5263035	58	True				
ANR	5263942	AssignmentExpression	ok = true		5263035	0		=			
ANR	5263943	Identifier	ok		5263035	0					
ANR	5263944	Identifier	true		5263035	1					
ANR	5263945	IdentifierDeclStatement	ut64 x = 1 ;	286:3:6301:6311	5263035	59	True				
ANR	5263946	IdentifierDecl	x = 1		5263035	0					
ANR	5263947	IdentifierDeclType	ut64		5263035	0					
ANR	5263948	Identifier	x		5263035	1					
ANR	5263949	AssignmentExpression	x = 1		5263035	2		=			
ANR	5263950	Identifier	x		5263035	0					
ANR	5263951	PrimaryExpression	1		5263035	1					
ANR	5263952	ForStatement	for ( i = strlen ( str ) - 2 ; i >= 0 ; i -- )		5263035	60					
ANR	5263953	ForInit	i = strlen ( str ) - 2 ;	287:8:6321:6341	5263035	0	True				
ANR	5263954	AssignmentExpression	i = strlen ( str ) - 2		5263035	0		=			
ANR	5263955	Identifier	i		5263035	0					
ANR	5263956	AdditiveExpression	strlen ( str ) - 2		5263035	1		-			
ANR	5263957	CallExpression	strlen ( str )		5263035	0					
ANR	5263958	Callee	strlen		5263035	0					
ANR	5263959	Identifier	strlen		5263035	0					
ANR	5263960	ArgumentList	str		5263035	1					
ANR	5263961	Argument	str		5263035	0					
ANR	5263962	Identifier	str		5263035	0					
ANR	5263963	PrimaryExpression	2		5263035	1					
ANR	5263964	Condition	i >= 0	287:30:6343:6348	5263035	1	True				
ANR	5263965	RelationalExpression	i >= 0		5263035	0		>=			
ANR	5263966	Identifier	i		5263035	0					
ANR	5263967	PrimaryExpression	0		5263035	1					
ANR	5263968	PostIncDecOperationExpression	i --	287:38:6351:6353	5263035	2	True				
ANR	5263969	Identifier	i		5263035	0					
ANR	5263970	IncDec	--		5263035	1					
ANR	5263971	CompoundStatement		141:43:3442:3442	5263035	3					
ANR	5263972	IfStatement	if ( str [ i ] < '0' || '2' < str [ i ] )		5263035	0					
ANR	5263973	Condition	str [ i ] < '0' || '2' < str [ i ]	288:8:6366:6393	5263035	0	True				
ANR	5263974	OrExpression	str [ i ] < '0' || '2' < str [ i ]		5263035	0		||			
ANR	5263975	RelationalExpression	str [ i ] < '0'		5263035	0		<			
ANR	5263976	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263977	Identifier	str		5263035	0					
ANR	5263978	Identifier	i		5263035	1					
ANR	5263979	PrimaryExpression	'0'		5263035	1					
ANR	5263980	RelationalExpression	'2' < str [ i ]		5263035	1		<			
ANR	5263981	PrimaryExpression	'2'		5263035	0					
ANR	5263982	ArrayIndexing	str [ i ]		5263035	1					
ANR	5263983	Identifier	str		5263035	0					
ANR	5263984	Identifier	i		5263035	1					
ANR	5263985	CompoundStatement		142:38:3482:3482	5263035	1					
ANR	5263986	ExpressionStatement	ok = false	289:5:6403:6413	5263035	0	True				
ANR	5263987	AssignmentExpression	ok = false		5263035	0		=			
ANR	5263988	Identifier	ok		5263035	0					
ANR	5263989	Identifier	false		5263035	1					
ANR	5263990	BreakStatement	break ;	290:5:6420:6425	5263035	1	True				
ANR	5263991	ExpressionStatement	ret += x * ( str [ i ] - '0' )	292:4:6437:6462	5263035	1	True				
ANR	5263992	AssignmentExpression	ret += x * ( str [ i ] - '0' )		5263035	0		+=			
ANR	5263993	Identifier	ret		5263035	0					
ANR	5263994	MultiplicativeExpression	x * ( str [ i ] - '0' )		5263035	1		*			
ANR	5263995	Identifier	x		5263035	0					
ANR	5263996	AdditiveExpression	str [ i ] - '0'		5263035	1		-			
ANR	5263997	ArrayIndexing	str [ i ]		5263035	0					
ANR	5263998	Identifier	str		5263035	0					
ANR	5263999	Identifier	i		5263035	1					
ANR	5264000	PrimaryExpression	'0'		5263035	1					
ANR	5264001	ExpressionStatement	x *= 3	293:4:6468:6474	5263035	2	True				
ANR	5264002	AssignmentExpression	x *= 3		5263035	0		*=			
ANR	5264003	Identifier	x		5263035	0					
ANR	5264004	PrimaryExpression	3		5263035	1					
ANR	5264005	IfStatement	if ( ! ok || ! len_num )		5263035	61					
ANR	5264006	Condition	! ok || ! len_num	295:7:6488:6502	5263035	0	True				
ANR	5264007	OrExpression	! ok || ! len_num		5263035	0		||			
ANR	5264008	UnaryOperationExpression	! ok		5263035	0					
ANR	5264009	UnaryOperator	!		5263035	0					
ANR	5264010	Identifier	ok		5263035	1					
ANR	5264011	UnaryOperationExpression	! len_num		5263035	1					
ANR	5264012	UnaryOperator	!		5263035	0					
ANR	5264013	Identifier	len_num		5263035	1					
ANR	5264014	CompoundStatement		149:24:3591:3591	5263035	1					
ANR	5264015	ExpressionStatement	"error ( num , ""invalid ternary number"" )"	296:4:6511:6548	5263035	0	True				
ANR	5264016	CallExpression	"error ( num , ""invalid ternary number"" )"		5263035	0					
ANR	5264017	Callee	error		5263035	0					
ANR	5264018	Identifier	error		5263035	0					
ANR	5264019	ArgumentList	num		5263035	1					
ANR	5264020	Argument	num		5263035	0					
ANR	5264021	Identifier	num		5263035	0					
ANR	5264022	Argument	"""invalid ternary number"""		5263035	1					
ANR	5264023	PrimaryExpression	"""invalid ternary number"""		5263035	0					
ANR	5264024	ElseStatement	else		5263035	0					
ANR	5264025	CompoundStatement		161:10:3848:3848	5263035	0					
ANR	5264026	Statement	if	308:4:6768:6769	5263035	0	True				
ANR	5264027	Statement	(	308:7:6771:6771	5263035	1	True				
ANR	5264028	Statement	sscanf	308:8:6772:6777	5263035	2	True				
ANR	5264029	Statement	(	308:15:6779:6779	5263035	3	True				
ANR	5264030	Statement	str	308:16:6780:6782	5263035	4	True				
ANR	5264031	Statement	","	308:19:6783:6783	5263035	5	True				
ANR	5264032	Statement	"""%"""	308:21:6785:6787	5263035	6	True				
ANR	5264033	Statement	PFMT64d	308:24:6788:6794	5263035	7	True				
ANR	5264034	Statement	"""%n"""	308:31:6795:6798	5263035	8	True				
ANR	5264035	Statement	","	308:35:6799:6799	5263035	9	True				
ANR	5264036	Statement	&	308:37:6801:6801	5263035	10	True				
ANR	5264037	Statement	ret	308:38:6802:6804	5263035	11	True				
ANR	5264038	Statement	","	308:41:6805:6805	5263035	12	True				
ANR	5264039	Statement	&	308:43:6807:6807	5263035	13	True				
ANR	5264040	Statement	chars_read	308:44:6808:6817	5263035	14	True				
ANR	5264041	Statement	)	308:54:6818:6818	5263035	15	True				
ANR	5264042	Statement	)	308:55:6819:6819	5263035	16	True				
ANR	5264043	CompoundStatement		162:57:3907:3907	5263035	17					
ANR	5264044	ExpressionStatement	ret *= KB	309:5:6828:6837	5263035	0	True				
ANR	5264045	AssignmentExpression	ret *= KB		5263035	0		*=			
ANR	5264046	Identifier	ret		5263035	0					
ANR	5264047	Identifier	KB		5263035	1					
ANR	5264048	BreakStatement	break ;	298:3:6558:6563	5263035	62	True				
ANR	5264049	Label	case 'K' :	299:2:6567:6575	5263035	63	True				
ANR	5264050	Label	case 'k' :	299:12:6577:6585	5263035	64	True				
ANR	5264051	IfStatement	"if ( strchr ( str , '.' ) )"		5263035	65					
ANR	5264052	Condition	"strchr ( str , '.' )"	300:7:6594:6610	5263035	0	True				
ANR	5264053	CallExpression	"strchr ( str , '.' )"		5263035	0					
ANR	5264054	Callee	strchr		5263035	0					
ANR	5264055	Identifier	strchr		5263035	0					
ANR	5264056	ArgumentList	str		5263035	1					
ANR	5264057	Argument	str		5263035	0					
ANR	5264058	Identifier	str		5263035	0					
ANR	5264059	Argument	'.'		5263035	1					
ANR	5264060	PrimaryExpression	'.'		5263035	0					
ANR	5264061	CompoundStatement		155:4:3705:3717	5263035	1					
ANR	5264062	IdentifierDeclStatement	double d = 0 ;	301:4:6619:6631	5263035	0	True				
ANR	5264063	IdentifierDecl	d = 0		5263035	0					
ANR	5264064	IdentifierDeclType	double		5263035	0					
ANR	5264065	Identifier	d		5263035	1					
ANR	5264066	AssignmentExpression	d = 0		5263035	2		=			
ANR	5264067	Identifier	d		5263035	0					
ANR	5264068	PrimaryExpression	0		5263035	1					
ANR	5264069	IfStatement	"if ( sscanf ( str , ""%lf%n"" , & d , & chars_read ) )"		5263035	1					
ANR	5264070	Condition	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"	302:8:6641:6678	5263035	0	True				
ANR	5264071	CallExpression	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"		5263035	0					
ANR	5264072	Callee	sscanf		5263035	0					
ANR	5264073	Identifier	sscanf		5263035	0					
ANR	5264074	ArgumentList	str		5263035	1					
ANR	5264075	Argument	str		5263035	0					
ANR	5264076	Identifier	str		5263035	0					
ANR	5264077	Argument	"""%lf%n"""		5263035	1					
ANR	5264078	PrimaryExpression	"""%lf%n"""		5263035	0					
ANR	5264079	Argument	& d		5263035	2					
ANR	5264080	UnaryOperationExpression	& d		5263035	0					
ANR	5264081	UnaryOperator	&		5263035	0					
ANR	5264082	Identifier	d		5263035	1					
ANR	5264083	Argument	& chars_read		5263035	3					
ANR	5264084	UnaryOperationExpression	& chars_read		5263035	0					
ANR	5264085	UnaryOperator	&		5263035	0					
ANR	5264086	Identifier	chars_read		5263035	1					
ANR	5264087	CompoundStatement		156:48:3767:3767	5263035	1					
ANR	5264088	ExpressionStatement	ret = ( ut64 ) ( d * KB )	303:5:6688:6708	5263035	0	True				
ANR	5264089	AssignmentExpression	ret = ( ut64 ) ( d * KB )		5263035	0		=			
ANR	5264090	Identifier	ret		5263035	0					
ANR	5264091	CastExpression	( ut64 ) ( d * KB )		5263035	1					
ANR	5264092	CastTarget	ut64		5263035	0					
ANR	5264093	MultiplicativeExpression	d * KB		5263035	1		*			
ANR	5264094	Identifier	d		5263035	0					
ANR	5264095	Identifier	KB		5263035	1					
ANR	5264096	ElseStatement	else		5263035	0					
ANR	5264097	CompoundStatement		158:11:3807:3807	5263035	0					
ANR	5264098	ExpressionStatement	zero_read = true	305:5:6728:6744	5263035	0	True				
ANR	5264099	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264100	Identifier	zero_read		5263035	0					
ANR	5264101	Identifier	true		5263035	1					
ANR	5264102	ElseStatement	else		5263035	0					
ANR	5264103	CompoundStatement		164:11:3936:3936	5263035	0					
ANR	5264104	ExpressionStatement	zero_read = true	311:5:6857:6873	5263035	0	True				
ANR	5264105	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264106	Identifier	zero_read		5263035	0					
ANR	5264107	Identifier	true		5263035	1					
ANR	5264108	IfStatement	if ( zero_read || chars_read != len_num )		5263035	66					
ANR	5264109	Condition	zero_read || chars_read != len_num	314:7:6893:6926	5263035	0	True				
ANR	5264110	OrExpression	zero_read || chars_read != len_num		5263035	0		||			
ANR	5264111	Identifier	zero_read		5263035	0					
ANR	5264112	EqualityExpression	chars_read != len_num		5263035	1		!=			
ANR	5264113	Identifier	chars_read		5263035	0					
ANR	5264114	Identifier	len_num		5263035	1					
ANR	5264115	CompoundStatement		168:43:4015:4015	5263035	1					
ANR	5264116	ExpressionStatement	"error ( num , ""invalid kilobyte number"" )"	315:4:6935:6973	5263035	0	True				
ANR	5264117	CallExpression	"error ( num , ""invalid kilobyte number"" )"		5263035	0					
ANR	5264118	Callee	error		5263035	0					
ANR	5264119	Identifier	error		5263035	0					
ANR	5264120	ArgumentList	num		5263035	1					
ANR	5264121	Argument	num		5263035	0					
ANR	5264122	Identifier	num		5263035	0					
ANR	5264123	Argument	"""invalid kilobyte number"""		5263035	1					
ANR	5264124	PrimaryExpression	"""invalid kilobyte number"""		5263035	0					
ANR	5264125	ElseStatement	else		5263035	0					
ANR	5264126	CompoundStatement		180:10:4273:4273	5263035	0					
ANR	5264127	Statement	if	327:4:7193:7194	5263035	0	True				
ANR	5264128	Statement	(	327:7:7196:7196	5263035	1	True				
ANR	5264129	Statement	sscanf	327:8:7197:7202	5263035	2	True				
ANR	5264130	Statement	(	327:15:7204:7204	5263035	3	True				
ANR	5264131	Statement	str	327:16:7205:7207	5263035	4	True				
ANR	5264132	Statement	","	327:19:7208:7208	5263035	5	True				
ANR	5264133	Statement	"""%"""	327:21:7210:7212	5263035	6	True				
ANR	5264134	Statement	PFMT64d	327:24:7213:7219	5263035	7	True				
ANR	5264135	Statement	"""%n"""	327:31:7220:7223	5263035	8	True				
ANR	5264136	Statement	","	327:35:7224:7224	5263035	9	True				
ANR	5264137	Statement	&	327:37:7226:7226	5263035	10	True				
ANR	5264138	Statement	ret	327:38:7227:7229	5263035	11	True				
ANR	5264139	Statement	","	327:41:7230:7230	5263035	12	True				
ANR	5264140	Statement	&	327:43:7232:7232	5263035	13	True				
ANR	5264141	Statement	chars_read	327:44:7233:7242	5263035	14	True				
ANR	5264142	Statement	)	327:54:7243:7243	5263035	15	True				
ANR	5264143	Statement	)	327:55:7244:7244	5263035	16	True				
ANR	5264144	CompoundStatement		181:57:4332:4332	5263035	17					
ANR	5264145	ExpressionStatement	ret *= MB	328:5:7253:7262	5263035	0	True				
ANR	5264146	AssignmentExpression	ret *= MB		5263035	0		*=			
ANR	5264147	Identifier	ret		5263035	0					
ANR	5264148	Identifier	MB		5263035	1					
ANR	5264149	BreakStatement	break ;	317:3:6983:6988	5263035	67	True				
ANR	5264150	Label	case 'M' :	318:2:6992:7000	5263035	68	True				
ANR	5264151	Label	case 'm' :	318:12:7002:7010	5263035	69	True				
ANR	5264152	IfStatement	"if ( strchr ( str , '.' ) )"		5263035	70					
ANR	5264153	Condition	"strchr ( str , '.' )"	319:7:7019:7035	5263035	0	True				
ANR	5264154	CallExpression	"strchr ( str , '.' )"		5263035	0					
ANR	5264155	Callee	strchr		5263035	0					
ANR	5264156	Identifier	strchr		5263035	0					
ANR	5264157	ArgumentList	str		5263035	1					
ANR	5264158	Argument	str		5263035	0					
ANR	5264159	Identifier	str		5263035	0					
ANR	5264160	Argument	'.'		5263035	1					
ANR	5264161	PrimaryExpression	'.'		5263035	0					
ANR	5264162	CompoundStatement		174:4:4130:4142	5263035	1					
ANR	5264163	IdentifierDeclStatement	double d = 0 ;	320:4:7044:7056	5263035	0	True				
ANR	5264164	IdentifierDecl	d = 0		5263035	0					
ANR	5264165	IdentifierDeclType	double		5263035	0					
ANR	5264166	Identifier	d		5263035	1					
ANR	5264167	AssignmentExpression	d = 0		5263035	2		=			
ANR	5264168	Identifier	d		5263035	0					
ANR	5264169	PrimaryExpression	0		5263035	1					
ANR	5264170	IfStatement	"if ( sscanf ( str , ""%lf%n"" , & d , & chars_read ) )"		5263035	1					
ANR	5264171	Condition	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"	321:8:7066:7103	5263035	0	True				
ANR	5264172	CallExpression	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"		5263035	0					
ANR	5264173	Callee	sscanf		5263035	0					
ANR	5264174	Identifier	sscanf		5263035	0					
ANR	5264175	ArgumentList	str		5263035	1					
ANR	5264176	Argument	str		5263035	0					
ANR	5264177	Identifier	str		5263035	0					
ANR	5264178	Argument	"""%lf%n"""		5263035	1					
ANR	5264179	PrimaryExpression	"""%lf%n"""		5263035	0					
ANR	5264180	Argument	& d		5263035	2					
ANR	5264181	UnaryOperationExpression	& d		5263035	0					
ANR	5264182	UnaryOperator	&		5263035	0					
ANR	5264183	Identifier	d		5263035	1					
ANR	5264184	Argument	& chars_read		5263035	3					
ANR	5264185	UnaryOperationExpression	& chars_read		5263035	0					
ANR	5264186	UnaryOperator	&		5263035	0					
ANR	5264187	Identifier	chars_read		5263035	1					
ANR	5264188	CompoundStatement		175:48:4192:4192	5263035	1					
ANR	5264189	ExpressionStatement	ret = ( ut64 ) ( d * MB )	322:5:7113:7133	5263035	0	True				
ANR	5264190	AssignmentExpression	ret = ( ut64 ) ( d * MB )		5263035	0		=			
ANR	5264191	Identifier	ret		5263035	0					
ANR	5264192	CastExpression	( ut64 ) ( d * MB )		5263035	1					
ANR	5264193	CastTarget	ut64		5263035	0					
ANR	5264194	MultiplicativeExpression	d * MB		5263035	1		*			
ANR	5264195	Identifier	d		5263035	0					
ANR	5264196	Identifier	MB		5263035	1					
ANR	5264197	ElseStatement	else		5263035	0					
ANR	5264198	CompoundStatement		177:11:4232:4232	5263035	0					
ANR	5264199	ExpressionStatement	zero_read = true	324:5:7153:7169	5263035	0	True				
ANR	5264200	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264201	Identifier	zero_read		5263035	0					
ANR	5264202	Identifier	true		5263035	1					
ANR	5264203	ElseStatement	else		5263035	0					
ANR	5264204	CompoundStatement		183:11:4361:4361	5263035	0					
ANR	5264205	ExpressionStatement	zero_read = true	330:5:7282:7298	5263035	0	True				
ANR	5264206	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264207	Identifier	zero_read		5263035	0					
ANR	5264208	Identifier	true		5263035	1					
ANR	5264209	IfStatement	if ( zero_read || chars_read != len_num )		5263035	71					
ANR	5264210	Condition	zero_read || chars_read != len_num	333:7:7318:7351	5263035	0	True				
ANR	5264211	OrExpression	zero_read || chars_read != len_num		5263035	0		||			
ANR	5264212	Identifier	zero_read		5263035	0					
ANR	5264213	EqualityExpression	chars_read != len_num		5263035	1		!=			
ANR	5264214	Identifier	chars_read		5263035	0					
ANR	5264215	Identifier	len_num		5263035	1					
ANR	5264216	CompoundStatement		187:43:4440:4440	5263035	1					
ANR	5264217	ExpressionStatement	"error ( num , ""invalid megabyte number"" )"	334:4:7360:7398	5263035	0	True				
ANR	5264218	CallExpression	"error ( num , ""invalid megabyte number"" )"		5263035	0					
ANR	5264219	Callee	error		5263035	0					
ANR	5264220	Identifier	error		5263035	0					
ANR	5264221	ArgumentList	num		5263035	1					
ANR	5264222	Argument	num		5263035	0					
ANR	5264223	Identifier	num		5263035	0					
ANR	5264224	Argument	"""invalid megabyte number"""		5263035	1					
ANR	5264225	PrimaryExpression	"""invalid megabyte number"""		5263035	0					
ANR	5264226	ElseStatement	else		5263035	0					
ANR	5264227	CompoundStatement		199:10:4698:4698	5263035	0					
ANR	5264228	Statement	if	346:4:7618:7619	5263035	0	True				
ANR	5264229	Statement	(	346:7:7621:7621	5263035	1	True				
ANR	5264230	Statement	sscanf	346:8:7622:7627	5263035	2	True				
ANR	5264231	Statement	(	346:15:7629:7629	5263035	3	True				
ANR	5264232	Statement	str	346:16:7630:7632	5263035	4	True				
ANR	5264233	Statement	","	346:19:7633:7633	5263035	5	True				
ANR	5264234	Statement	"""%"""	346:21:7635:7637	5263035	6	True				
ANR	5264235	Statement	PFMT64d	346:24:7638:7644	5263035	7	True				
ANR	5264236	Statement	"""%n"""	346:31:7645:7648	5263035	8	True				
ANR	5264237	Statement	","	346:35:7649:7649	5263035	9	True				
ANR	5264238	Statement	&	346:37:7651:7651	5263035	10	True				
ANR	5264239	Statement	ret	346:38:7652:7654	5263035	11	True				
ANR	5264240	Statement	","	346:41:7655:7655	5263035	12	True				
ANR	5264241	Statement	&	346:43:7657:7657	5263035	13	True				
ANR	5264242	Statement	chars_read	346:44:7658:7667	5263035	14	True				
ANR	5264243	Statement	)	346:54:7668:7668	5263035	15	True				
ANR	5264244	Statement	)	346:55:7669:7669	5263035	16	True				
ANR	5264245	CompoundStatement		200:57:4757:4757	5263035	17					
ANR	5264246	ExpressionStatement	ret *= GB	347:5:7678:7687	5263035	0	True				
ANR	5264247	AssignmentExpression	ret *= GB		5263035	0		*=			
ANR	5264248	Identifier	ret		5263035	0					
ANR	5264249	Identifier	GB		5263035	1					
ANR	5264250	BreakStatement	break ;	336:3:7408:7413	5263035	72	True				
ANR	5264251	Label	case 'G' :	337:2:7417:7425	5263035	73	True				
ANR	5264252	Label	case 'g' :	337:12:7427:7435	5263035	74	True				
ANR	5264253	IfStatement	"if ( strchr ( str , '.' ) )"		5263035	75					
ANR	5264254	Condition	"strchr ( str , '.' )"	338:7:7444:7460	5263035	0	True				
ANR	5264255	CallExpression	"strchr ( str , '.' )"		5263035	0					
ANR	5264256	Callee	strchr		5263035	0					
ANR	5264257	Identifier	strchr		5263035	0					
ANR	5264258	ArgumentList	str		5263035	1					
ANR	5264259	Argument	str		5263035	0					
ANR	5264260	Identifier	str		5263035	0					
ANR	5264261	Argument	'.'		5263035	1					
ANR	5264262	PrimaryExpression	'.'		5263035	0					
ANR	5264263	CompoundStatement		193:4:4555:4567	5263035	1					
ANR	5264264	IdentifierDeclStatement	double d = 0 ;	339:4:7469:7481	5263035	0	True				
ANR	5264265	IdentifierDecl	d = 0		5263035	0					
ANR	5264266	IdentifierDeclType	double		5263035	0					
ANR	5264267	Identifier	d		5263035	1					
ANR	5264268	AssignmentExpression	d = 0		5263035	2		=			
ANR	5264269	Identifier	d		5263035	0					
ANR	5264270	PrimaryExpression	0		5263035	1					
ANR	5264271	IfStatement	"if ( sscanf ( str , ""%lf%n"" , & d , & chars_read ) )"		5263035	1					
ANR	5264272	Condition	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"	340:8:7491:7528	5263035	0	True				
ANR	5264273	CallExpression	"sscanf ( str , ""%lf%n"" , & d , & chars_read )"		5263035	0					
ANR	5264274	Callee	sscanf		5263035	0					
ANR	5264275	Identifier	sscanf		5263035	0					
ANR	5264276	ArgumentList	str		5263035	1					
ANR	5264277	Argument	str		5263035	0					
ANR	5264278	Identifier	str		5263035	0					
ANR	5264279	Argument	"""%lf%n"""		5263035	1					
ANR	5264280	PrimaryExpression	"""%lf%n"""		5263035	0					
ANR	5264281	Argument	& d		5263035	2					
ANR	5264282	UnaryOperationExpression	& d		5263035	0					
ANR	5264283	UnaryOperator	&		5263035	0					
ANR	5264284	Identifier	d		5263035	1					
ANR	5264285	Argument	& chars_read		5263035	3					
ANR	5264286	UnaryOperationExpression	& chars_read		5263035	0					
ANR	5264287	UnaryOperator	&		5263035	0					
ANR	5264288	Identifier	chars_read		5263035	1					
ANR	5264289	CompoundStatement		194:48:4617:4617	5263035	1					
ANR	5264290	ExpressionStatement	ret = ( ut64 ) ( d * GB )	341:5:7538:7558	5263035	0	True				
ANR	5264291	AssignmentExpression	ret = ( ut64 ) ( d * GB )		5263035	0		=			
ANR	5264292	Identifier	ret		5263035	0					
ANR	5264293	CastExpression	( ut64 ) ( d * GB )		5263035	1					
ANR	5264294	CastTarget	ut64		5263035	0					
ANR	5264295	MultiplicativeExpression	d * GB		5263035	1		*			
ANR	5264296	Identifier	d		5263035	0					
ANR	5264297	Identifier	GB		5263035	1					
ANR	5264298	ElseStatement	else		5263035	0					
ANR	5264299	CompoundStatement		196:11:4657:4657	5263035	0					
ANR	5264300	ExpressionStatement	zero_read = true	343:5:7578:7594	5263035	0	True				
ANR	5264301	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264302	Identifier	zero_read		5263035	0					
ANR	5264303	Identifier	true		5263035	1					
ANR	5264304	ElseStatement	else		5263035	0					
ANR	5264305	CompoundStatement		202:11:4786:4786	5263035	0					
ANR	5264306	ExpressionStatement	zero_read = true	349:5:7707:7723	5263035	0	True				
ANR	5264307	AssignmentExpression	zero_read = true		5263035	0		=			
ANR	5264308	Identifier	zero_read		5263035	0					
ANR	5264309	Identifier	true		5263035	1					
ANR	5264310	IfStatement	if ( zero_read || chars_read != len_num )		5263035	76					
ANR	5264311	Condition	zero_read || chars_read != len_num	352:7:7743:7776	5263035	0	True				
ANR	5264312	OrExpression	zero_read || chars_read != len_num		5263035	0		||			
ANR	5264313	Identifier	zero_read		5263035	0					
ANR	5264314	EqualityExpression	chars_read != len_num		5263035	1		!=			
ANR	5264315	Identifier	chars_read		5263035	0					
ANR	5264316	Identifier	len_num		5263035	1					
ANR	5264317	CompoundStatement		206:43:4865:4865	5263035	1					
ANR	5264318	ExpressionStatement	"error ( num , ""invalid gigabyte number"" )"	353:4:7785:7823	5263035	0	True				
ANR	5264319	CallExpression	"error ( num , ""invalid gigabyte number"" )"		5263035	0					
ANR	5264320	Callee	error		5263035	0					
ANR	5264321	Identifier	error		5263035	0					
ANR	5264322	ArgumentList	num		5263035	1					
ANR	5264323	Argument	num		5263035	0					
ANR	5264324	Identifier	num		5263035	0					
ANR	5264325	Argument	"""invalid gigabyte number"""		5263035	1					
ANR	5264326	PrimaryExpression	"""invalid gigabyte number"""		5263035	0					
ANR	5264327	BreakStatement	break ;	355:3:7833:7838	5263035	77	True				
ANR	5264328	Label	default :	356:2:7842:7849	5263035	78	True				
ANR	5264329	Identifier	default		5263035	0					
ANR	5264330	ExpressionStatement	"ret = _strtoui64 ( str , & endptr , 10 )"	361:3:7945:7980	5263035	79	True				
ANR	5264331	AssignmentExpression	"ret = _strtoui64 ( str , & endptr , 10 )"		5263035	0		=			
ANR	5264332	Identifier	ret		5263035	0					
ANR	5264333	CallExpression	"_strtoui64 ( str , & endptr , 10 )"		5263035	1					
ANR	5264334	Callee	_strtoui64		5263035	0					
ANR	5264335	Identifier	_strtoui64		5263035	0					
ANR	5264336	ArgumentList	str		5263035	1					
ANR	5264337	Argument	str		5263035	0					
ANR	5264338	Identifier	str		5263035	0					
ANR	5264339	Argument	& endptr		5263035	1					
ANR	5264340	UnaryOperationExpression	& endptr		5263035	0					
ANR	5264341	UnaryOperator	&		5263035	0					
ANR	5264342	Identifier	endptr		5263035	1					
ANR	5264343	Argument	10		5263035	2					
ANR	5264344	PrimaryExpression	10		5263035	0					
ANR	5264345	ExpressionStatement	"ret = strtoull ( str , & endptr , 10 )"	364:3:7999:8032	5263035	80	True				
ANR	5264346	AssignmentExpression	"ret = strtoull ( str , & endptr , 10 )"		5263035	0		=			
ANR	5264347	Identifier	ret		5263035	0					
ANR	5264348	CallExpression	"strtoull ( str , & endptr , 10 )"		5263035	1					
ANR	5264349	Callee	strtoull		5263035	0					
ANR	5264350	Identifier	strtoull		5263035	0					
ANR	5264351	ArgumentList	str		5263035	1					
ANR	5264352	Argument	str		5263035	0					
ANR	5264353	Identifier	str		5263035	0					
ANR	5264354	Argument	& endptr		5263035	1					
ANR	5264355	UnaryOperationExpression	& endptr		5263035	0					
ANR	5264356	UnaryOperator	&		5263035	0					
ANR	5264357	Identifier	endptr		5263035	1					
ANR	5264358	Argument	10		5263035	2					
ANR	5264359	PrimaryExpression	10		5263035	0					
ANR	5264360	IfStatement	if ( ! IS_DIGIT ( * str ) || ( * endptr && * endptr != lch ) )		5263035	81					
ANR	5264361	Condition	! IS_DIGIT ( * str ) || ( * endptr && * endptr != lch )	365:7:8041:8087	5263035	0	True				
ANR	5264362	OrExpression	! IS_DIGIT ( * str ) || ( * endptr && * endptr != lch )		5263035	0		||			
ANR	5264363	UnaryOperationExpression	! IS_DIGIT ( * str )		5263035	0					
ANR	5264364	UnaryOperator	!		5263035	0					
ANR	5264365	CallExpression	IS_DIGIT ( * str )		5263035	1					
ANR	5264366	Callee	IS_DIGIT		5263035	0					
ANR	5264367	Identifier	IS_DIGIT		5263035	0					
ANR	5264368	ArgumentList	* str		5263035	1					
ANR	5264369	Argument	* str		5263035	0					
ANR	5264370	UnaryOperationExpression	* str		5263035	0					
ANR	5264371	UnaryOperator	*		5263035	0					
ANR	5264372	Identifier	str		5263035	1					
ANR	5264373	AndExpression	* endptr && * endptr != lch		5263035	1		&&			
ANR	5264374	UnaryOperationExpression	* endptr		5263035	0					
ANR	5264375	UnaryOperator	*		5263035	0					
ANR	5264376	Identifier	endptr		5263035	1					
ANR	5264377	EqualityExpression	* endptr != lch		5263035	1		!=			
ANR	5264378	UnaryOperationExpression	* endptr		5263035	0					
ANR	5264379	UnaryOperator	*		5263035	0					
ANR	5264380	Identifier	endptr		5263035	1					
ANR	5264381	Identifier	lch		5263035	1					
ANR	5264382	CompoundStatement		219:56:5176:5176	5263035	1					
ANR	5264383	ExpressionStatement	"error ( num , ""unknown symbol"" )"	366:4:8096:8125	5263035	0	True				
ANR	5264384	CallExpression	"error ( num , ""unknown symbol"" )"		5263035	0					
ANR	5264385	Callee	error		5263035	0					
ANR	5264386	Identifier	error		5263035	0					
ANR	5264387	ArgumentList	num		5263035	1					
ANR	5264388	Argument	num		5263035	0					
ANR	5264389	Identifier	num		5263035	0					
ANR	5264390	Argument	"""unknown symbol"""		5263035	1					
ANR	5264391	PrimaryExpression	"""unknown symbol"""		5263035	0					
ANR	5264392	BreakStatement	break ;	368:3:8135:8140	5263035	82	True				
ANR	5264393	IfStatement	if ( num )		5263035	18					
ANR	5264394	Condition	num	371:5:8154:8156	5263035	0	True				
ANR	5264395	Identifier	num		5263035	0					
ANR	5264396	CompoundStatement		225:10:5245:5245	5263035	1					
ANR	5264397	ExpressionStatement	num -> value = ret	372:2:8163:8179	5263035	0	True				
ANR	5264398	AssignmentExpression	num -> value = ret		5263035	0		=			
ANR	5264399	PtrMemberAccess	num -> value		5263035	0					
ANR	5264400	Identifier	num		5263035	0					
ANR	5264401	Identifier	value		5263035	1					
ANR	5264402	Identifier	ret		5263035	1					
ANR	5264403	ReturnStatement	return ret ;	374:1:8185:8195	5263035	19	True				
ANR	5264404	Identifier	ret		5263035	0					
ANR	5264405	ReturnType	R_API ut64		5263035	1					
ANR	5264406	Identifier	r_num_get		5263035	2					
ANR	5264407	ParameterList	"RNum * num , const char * str"		5263035	3					
ANR	5264408	Parameter	RNum * num	147:21:2885:2893	5263035	0	True				
ANR	5264409	ParameterType	RNum *		5263035	0					
ANR	5264410	Identifier	num		5263035	1					
ANR	5264411	Parameter	const char * str	147:32:2896:2910	5263035	1	True				
ANR	5264412	ParameterType	const char *		5263035	0					
ANR	5264413	Identifier	str		5263035	1					
ANR	5264414	CFGEntryNode	ENTRY		5263035		True				
ANR	5264415	CFGExitNode	EXIT		5263035		True				
ANR	5264416	Symbol	num -> nc . errors		5263035						
ANR	5264417	Symbol	UT32_MAX		5263035						
ANR	5264418	Symbol	chars_read		5263035						
ANR	5264419	Symbol	lodash		5263035						
ANR	5264420	Symbol	tolower		5263035						
ANR	5264421	Symbol	num		5263035						
ANR	5264422	Symbol	& ok		5263035						
ANR	5264423	Symbol	strchr		5263035						
ANR	5264424	Symbol	strncmp		5263035						
ANR	5264425	Symbol	strlen		5263035						
ANR	5264426	Symbol	len		5263035						
ANR	5264427	Symbol	MB		5263035						
ANR	5264428	Symbol	* ( str + 1 )		5263035						
ANR	5264429	Symbol	UT16_MAX		5263035						
ANR	5264430	Symbol	zero_read		5263035						
ANR	5264431	Symbol	ret		5263035						
ANR	5264432	Symbol	NULL		5263035						
ANR	5264433	Symbol	endptr		5263035						
ANR	5264434	Symbol	* endptr		5263035						
ANR	5264435	Symbol	& endptr		5263035						
ANR	5264436	Symbol	str		5263035						
ANR	5264437	Symbol	sscanf		5263035						
ANR	5264438	Symbol	true		5263035						
ANR	5264439	Symbol	num -> nc . under_calc		5263035						
ANR	5264440	Symbol	r_num_tailff		5263035						
ANR	5264441	Symbol	lch		5263035						
ANR	5264442	Symbol	num -> value		5263035						
ANR	5264443	Symbol	num -> callback		5263035						
ANR	5264444	Symbol	strtoull		5263035						
ANR	5264445	Symbol	KB		5263035						
ANR	5264446	Symbol	* str		5263035						
ANR	5264447	Symbol	GB		5263035						
ANR	5264448	Symbol	ok		5263035						
ANR	5264449	Symbol	UT64_MAX		5263035						
ANR	5264450	Symbol	& chars_read		5263035						
ANR	5264451	Symbol	num -> nc		5263035						
ANR	5264452	Symbol	atoi		5263035						
ANR	5264453	Symbol	a		5263035						
ANR	5264454	Symbol	d		5263035						
ANR	5264455	Symbol	& a		5263035						
ANR	5264456	Symbol	false		5263035						
ANR	5264457	Symbol	i		5263035						
ANR	5264458	Symbol	len_num		5263035						
ANR	5264459	Symbol	j		5263035						
ANR	5264460	Symbol	num -> userptr		5263035						
ANR	5264461	Symbol	& d		5263035						
ANR	5264462	Symbol	_strtoui64		5263035						
ANR	5264463	Symbol	IS_DIGIT		5263035						
ANR	5264464	Symbol	* num		5263035						
ANR	5264465	Symbol	s		5263035						
ANR	5264466	Symbol	* i		5263035						
ANR	5264467	Symbol	UT8_MAX		5263035						
ANR	5264468	Symbol	x		5263035						
ANR	5264469	Symbol	& s		5263035						
ANR	5264470	Symbol	strdup		5263035						
ANR	5264471	Symbol	* len		5263035						
ANR	5264472	Function	r_num_op	378:0:8220:8524							
ANR	5264473	FunctionDef	"r_num_op (RNum * num , char op , ut64 a , ut64 b)"		5264472	0					
ANR	5264474	CompoundStatement		378:57:8277:8524	5264472	0					
ANR	5264475	SwitchStatement	switch ( op )		5264472	0					
ANR	5264476	Condition	op	379:9:8288:8289	5264472	0	True				
ANR	5264477	Identifier	op		5264472	0					
ANR	5264478	CompoundStatement		2:13:14:14	5264472	1					
ANR	5264479	Label	case '+' :	380:1:8295:8303	5264472	0	True				
ANR	5264480	ReturnStatement	return a + b ;	380:11:8305:8317	5264472	1	True				
ANR	5264481	AdditiveExpression	a + b		5264472	0		+			
ANR	5264482	Identifier	a		5264472	0					
ANR	5264483	Identifier	b		5264472	1					
ANR	5264484	Label	case '-' :	381:1:8320:8328	5264472	2	True				
ANR	5264485	ReturnStatement	return a - b ;	381:11:8330:8342	5264472	3	True				
ANR	5264486	AdditiveExpression	a - b		5264472	0		-			
ANR	5264487	Identifier	a		5264472	0					
ANR	5264488	Identifier	b		5264472	1					
ANR	5264489	Label	case '*' :	382:1:8345:8353	5264472	4	True				
ANR	5264490	ReturnStatement	return a * b ;	382:11:8355:8367	5264472	5	True				
ANR	5264491	MultiplicativeExpression	a * b		5264472	0		*			
ANR	5264492	Identifier	a		5264472	0					
ANR	5264493	Identifier	b		5264472	1					
ANR	5264494	Label	case '/' :	383:1:8370:8378	5264472	6	True				
ANR	5264495	IfStatement	if ( ! b && num )		5264472	7					
ANR	5264496	Condition	! b && num	384:6:8386:8394	5264472	0	True				
ANR	5264497	AndExpression	! b && num		5264472	0		&&			
ANR	5264498	UnaryOperationExpression	! b		5264472	0					
ANR	5264499	UnaryOperator	!		5264472	0					
ANR	5264500	Identifier	b		5264472	1					
ANR	5264501	Identifier	num		5264472	1					
ANR	5264502	ExpressionStatement	num -> dbz = 1	384:17:8397:8409	5264472	1	True				
ANR	5264503	AssignmentExpression	num -> dbz = 1		5264472	0		=			
ANR	5264504	PtrMemberAccess	num -> dbz		5264472	0					
ANR	5264505	Identifier	num		5264472	0					
ANR	5264506	Identifier	dbz		5264472	1					
ANR	5264507	PrimaryExpression	1		5264472	1					
ANR	5264508	ReturnStatement	return b ? a / b : 0 ;	385:2:8413:8433	5264472	8	True				
ANR	5264509	ConditionalExpression	b ? a / b : 0		5264472	0					
ANR	5264510	Condition	b		5264472	0					
ANR	5264511	Identifier	b		5264472	0					
ANR	5264512	MultiplicativeExpression	a / b		5264472	1		/			
ANR	5264513	Identifier	a		5264472	0					
ANR	5264514	Identifier	b		5264472	1					
ANR	5264515	PrimaryExpression	0		5264472	2					
ANR	5264516	Label	case '&' :	386:1:8436:8444	5264472	9	True				
ANR	5264517	ReturnStatement	return a & b ;	386:11:8446:8458	5264472	10	True				
ANR	5264518	BitAndExpression	a & b		5264472	0		&			
ANR	5264519	Identifier	a		5264472	0					
ANR	5264520	Identifier	b		5264472	1					
ANR	5264521	Label	case '|' :	387:1:8461:8469	5264472	11	True				
ANR	5264522	ReturnStatement	return a | b ;	387:11:8471:8483	5264472	12	True				
ANR	5264523	InclusiveOrExpression	a | b		5264472	0		|			
ANR	5264524	Identifier	a		5264472	0					
ANR	5264525	Identifier	b		5264472	1					
ANR	5264526	Label	case '^' :	388:1:8486:8494	5264472	13	True				
ANR	5264527	ReturnStatement	return a ^ b ;	388:11:8496:8508	5264472	14	True				
ANR	5264528	ExclusiveOrExpression	a ^ b		5264472	0		^			
ANR	5264529	Identifier	a		5264472	0					
ANR	5264530	Identifier	b		5264472	1					
ANR	5264531	ReturnStatement	return b ;	390:1:8514:8522	5264472	1	True				
ANR	5264532	Identifier	b		5264472	0					
ANR	5264533	ReturnType	static ut64		5264472	1					
ANR	5264534	Identifier	r_num_op		5264472	2					
ANR	5264535	ParameterList	"RNum * num , char op , ut64 a , ut64 b"		5264472	3					
ANR	5264536	Parameter	RNum * num	378:21:8241:8249	5264472	0	True				
ANR	5264537	ParameterType	RNum *		5264472	0					
ANR	5264538	Identifier	num		5264472	1					
ANR	5264539	Parameter	char op	378:32:8252:8258	5264472	1	True				
ANR	5264540	ParameterType	char		5264472	0					
ANR	5264541	Identifier	op		5264472	1					
ANR	5264542	Parameter	ut64 a	378:41:8261:8266	5264472	2	True				
ANR	5264543	ParameterType	ut64		5264472	0					
ANR	5264544	Identifier	a		5264472	1					
ANR	5264545	Parameter	ut64 b	378:49:8269:8274	5264472	3	True				
ANR	5264546	ParameterType	ut64		5264472	0					
ANR	5264547	Identifier	b		5264472	1					
ANR	5264548	CFGEntryNode	ENTRY		5264472		True				
ANR	5264549	CFGExitNode	EXIT		5264472		True				
ANR	5264550	Symbol	* num		5264472						
ANR	5264551	Symbol	op		5264472						
ANR	5264552	Symbol	a		5264472						
ANR	5264553	Symbol	b		5264472						
ANR	5264554	Symbol	num		5264472						
ANR	5264555	Symbol	num -> dbz		5264472						
ANR	5264556	Function	r_num_math_internal	393:6:8533:8873							
ANR	5264557	FunctionDef	"r_num_math_internal (RNum * num , char * s)"		5264556	0					
ANR	5264558	CompoundStatement		393:58:8585:8873	5264556	0					
ANR	5264559	Statement	ut64	394:1:8588:8591	5264556	0	True				
ANR	5264560	Statement	ret	394:6:8593:8595	5264556	1	True				
ANR	5264561	Statement	=	394:10:8597:8597	5264556	2	True				
ANR	5264562	Statement	0L	394:12:8599:8600	5264556	3	True				
ANR	5264563	ExpressionStatement	L	394:14:8601:8602	5264556	4	True				
ANR	5264564	Identifier	L		5264556	0					
ANR	5264565	IdentifierDeclStatement	char * p = s ;	395:1:8605:8616	5264556	5	True				
ANR	5264566	IdentifierDecl	* p = s		5264556	0					
ANR	5264567	IdentifierDeclType	char *		5264556	0					
ANR	5264568	Identifier	p		5264556	1					
ANR	5264569	AssignmentExpression	* p = s		5264556	2		=			
ANR	5264570	Identifier	s		5264556	0					
ANR	5264571	Identifier	s		5264556	1					
ANR	5264572	IdentifierDeclStatement	"int i , nop , op = 0 ;"	396:1:8619:8637	5264556	6	True				
ANR	5264573	IdentifierDecl	i		5264556	0					
ANR	5264574	IdentifierDeclType	int		5264556	0					
ANR	5264575	Identifier	i		5264556	1					
ANR	5264576	IdentifierDecl	nop		5264556	1					
ANR	5264577	IdentifierDeclType	int		5264556	0					
ANR	5264578	Identifier	nop		5264556	1					
ANR	5264579	IdentifierDecl	op = 0		5264556	2					
ANR	5264580	IdentifierDeclType	int		5264556	0					
ANR	5264581	Identifier	op		5264556	1					
ANR	5264582	AssignmentExpression	op = 0		5264556	2		=			
ANR	5264583	Identifier	op		5264556	0					
ANR	5264584	PrimaryExpression	0		5264556	1					
ANR	5264585	ForStatement	for ( i = 0 ; s [ i ] ; i ++ )		5264556	7					
ANR	5264586	ForInit	i = 0 ;	397:6:8645:8648	5264556	0	True				
ANR	5264587	AssignmentExpression	i = 0		5264556	0		=			
ANR	5264588	Identifier	i		5264556	0					
ANR	5264589	PrimaryExpression	0		5264556	1					
ANR	5264590	Condition	s [ i ]	397:11:8650:8653	5264556	1	True				
ANR	5264591	ArrayIndexing	s [ i ]		5264556	0					
ANR	5264592	Identifier	s		5264556	0					
ANR	5264593	Identifier	i		5264556	1					
ANR	5264594	PostIncDecOperationExpression	i ++	397:17:8656:8658	5264556	2	True				
ANR	5264595	Identifier	i		5264556	0					
ANR	5264596	IncDec	++		5264556	1					
ANR	5264597	CompoundStatement		5:22:75:75	5264556	3					
ANR	5264598	IfStatement	if ( r_num_is_op ( s [ i ] ) )		5264556	0					
ANR	5264599	Condition	r_num_is_op ( s [ i ] )	398:6:8669:8686	5264556	0	True				
ANR	5264600	CallExpression	r_num_is_op ( s [ i ] )		5264556	0					
ANR	5264601	Callee	r_num_is_op		5264556	0					
ANR	5264602	Identifier	r_num_is_op		5264556	0					
ANR	5264603	ArgumentList	s [ i ]		5264556	1					
ANR	5264604	Argument	s [ i ]		5264556	0					
ANR	5264605	ArrayIndexing	s [ i ]		5264556	0					
ANR	5264606	Identifier	s		5264556	0					
ANR	5264607	Identifier	i		5264556	1					
ANR	5264608	CompoundStatement		6:26:103:103	5264556	1					
ANR	5264609	ExpressionStatement	nop = s [ i ]	399:3:8694:8704	5264556	0	True				
ANR	5264610	AssignmentExpression	nop = s [ i ]		5264556	0		=			
ANR	5264611	Identifier	nop		5264556	0					
ANR	5264612	ArrayIndexing	s [ i ]		5264556	1					
ANR	5264613	Identifier	s		5264556	0					
ANR	5264614	Identifier	i		5264556	1					
ANR	5264615	ExpressionStatement	s [ i ] = '\\0'	399:15:8706:8717	5264556	1	True				
ANR	5264616	AssignmentExpression	s [ i ] = '\\0'		5264556	0		=			
ANR	5264617	ArrayIndexing	s [ i ]		5264556	0					
ANR	5264618	Identifier	s		5264556	0					
ANR	5264619	Identifier	i		5264556	1					
ANR	5264620	PrimaryExpression	'\\0'		5264556	1					
ANR	5264621	ExpressionStatement	"ret = r_num_op ( num , op , ret , r_num_get ( num , p ) )"	400:3:8722:8771	5264556	2	True				
ANR	5264622	AssignmentExpression	"ret = r_num_op ( num , op , ret , r_num_get ( num , p ) )"		5264556	0		=			
ANR	5264623	Identifier	ret		5264556	0					
ANR	5264624	CallExpression	"r_num_op ( num , op , ret , r_num_get ( num , p ) )"		5264556	1					
ANR	5264625	Callee	r_num_op		5264556	0					
ANR	5264626	Identifier	r_num_op		5264556	0					
ANR	5264627	ArgumentList	num		5264556	1					
ANR	5264628	Argument	num		5264556	0					
ANR	5264629	Identifier	num		5264556	0					
ANR	5264630	Argument	op		5264556	1					
ANR	5264631	Identifier	op		5264556	0					
ANR	5264632	Argument	ret		5264556	2					
ANR	5264633	Identifier	ret		5264556	0					
ANR	5264634	Argument	"r_num_get ( num , p )"		5264556	3					
ANR	5264635	CallExpression	"r_num_get ( num , p )"		5264556	0					
ANR	5264636	Callee	r_num_get		5264556	0					
ANR	5264637	Identifier	r_num_get		5264556	0					
ANR	5264638	ArgumentList	num		5264556	1					
ANR	5264639	Argument	num		5264556	0					
ANR	5264640	Identifier	num		5264556	0					
ANR	5264641	Argument	p		5264556	1					
ANR	5264642	Identifier	p		5264556	0					
ANR	5264643	ExpressionStatement	op = s [ i ] = nop	401:3:8776:8791	5264556	3	True				
ANR	5264644	AssignmentExpression	op = s [ i ] = nop		5264556	0		=			
ANR	5264645	Identifier	op		5264556	0					
ANR	5264646	AssignmentExpression	s [ i ] = nop		5264556	1		=			
ANR	5264647	ArrayIndexing	s [ i ]		5264556	0					
ANR	5264648	Identifier	s		5264556	0					
ANR	5264649	Identifier	i		5264556	1					
ANR	5264650	Identifier	nop		5264556	1					
ANR	5264651	ExpressionStatement	p = s + i + 1	401:20:8793:8806	5264556	4	True				
ANR	5264652	AssignmentExpression	p = s + i + 1		5264556	0		=			
ANR	5264653	Identifier	p		5264556	0					
ANR	5264654	AdditiveExpression	s + i + 1		5264556	1		+			
ANR	5264655	Identifier	s		5264556	0					
ANR	5264656	AdditiveExpression	i + 1		5264556	1		+			
ANR	5264657	Identifier	i		5264556	0					
ANR	5264658	PrimaryExpression	1		5264556	1					
ANR	5264659	BreakStatement	break ;	402:3:8811:8816	5264556	5	True				
ANR	5264660	ReturnStatement	"return r_num_op ( op , ret , r_num_get ( num , p ) ) ;"	405:1:8826:8871	5264556	8	True				
ANR	5264661	CallExpression	"r_num_op ( op , ret , r_num_get ( num , p ) )"		5264556	0					
ANR	5264662	Callee	r_num_op		5264556	0					
ANR	5264663	Identifier	r_num_op		5264556	0					
ANR	5264664	ArgumentList	op		5264556	1					
ANR	5264665	Argument	op		5264556	0					
ANR	5264666	Identifier	op		5264556	0					
ANR	5264667	Argument	ret		5264556	1					
ANR	5264668	Identifier	ret		5264556	0					
ANR	5264669	Argument	"r_num_get ( num , p )"		5264556	2					
ANR	5264670	CallExpression	"r_num_get ( num , p )"		5264556	0					
ANR	5264671	Callee	r_num_get		5264556	0					
ANR	5264672	Identifier	r_num_get		5264556	0					
ANR	5264673	ArgumentList	num		5264556	1					
ANR	5264674	Argument	num		5264556	0					
ANR	5264675	Identifier	num		5264556	0					
ANR	5264676	Argument	p		5264556	1					
ANR	5264677	Identifier	p		5264556	0					
ANR	5264678	ReturnType	static ut64		5264556	1					
ANR	5264679	Identifier	r_num_math_internal		5264556	2					
ANR	5264680	ParameterList	"RNum * num , char * s"		5264556	3					
ANR	5264681	Parameter	RNum * num	393:38:8565:8573	5264556	0	True				
ANR	5264682	ParameterType	RNum *		5264556	0					
ANR	5264683	Identifier	num		5264556	1					
ANR	5264684	Parameter	char * s	393:49:8576:8582	5264556	1	True				
ANR	5264685	ParameterType	char *		5264556	0					
ANR	5264686	Identifier	s		5264556	1					
ANR	5264687	CFGEntryNode	ENTRY		5264556		True				
ANR	5264688	CFGExitNode	EXIT		5264556		True				
ANR	5264689	Symbol	p		5264556						
ANR	5264690	Symbol	ret		5264556						
ANR	5264691	Symbol	op		5264556						
ANR	5264692	Symbol	s		5264556						
ANR	5264693	Symbol	* i		5264556						
ANR	5264694	Symbol	num		5264556						
ANR	5264695	Symbol	i		5264556						
ANR	5264696	Symbol	r_num_op		5264556						
ANR	5264697	Symbol	r_num_is_op		5264556						
ANR	5264698	Symbol	r_num_get		5264556						
ANR	5264699	Symbol	* s		5264556						
ANR	5264700	Symbol	nop		5264556						
ANR	5264701	Function	r_num_math	409:0:8905:10278							
ANR	5264702	FunctionDef	"r_num_math (RNum * num , const char * str)"		5264701	0					
ANR	5264703	CompoundStatement		409:50:8955:10278	5264701	0					
ANR	5264704	IdentifierDeclStatement	ut64 ret ;	411:1:8977:8985	5264701	0	True				
ANR	5264705	IdentifierDecl	ret		5264701	0					
ANR	5264706	IdentifierDeclType	ut64		5264701	0					
ANR	5264707	Identifier	ret		5264701	1					
ANR	5264708	IdentifierDeclStatement	const char * err = NULL ;	412:1:8988:9010	5264701	1	True				
ANR	5264709	IdentifierDecl	* err = NULL		5264701	0					
ANR	5264710	IdentifierDeclType	const char *		5264701	0					
ANR	5264711	Identifier	err		5264701	1					
ANR	5264712	AssignmentExpression	* err = NULL		5264701	2		=			
ANR	5264713	Identifier	NULL		5264701	0					
ANR	5264714	Identifier	NULL		5264701	1					
ANR	5264715	IfStatement	if ( ! str || ! * str )		5264701	2					
ANR	5264716	Condition	! str || ! * str	413:5:9017:9029	5264701	0	True				
ANR	5264717	OrExpression	! str || ! * str		5264701	0		||			
ANR	5264718	UnaryOperationExpression	! str		5264701	0					
ANR	5264719	UnaryOperator	!		5264701	0					
ANR	5264720	Identifier	str		5264701	1					
ANR	5264721	UnaryOperationExpression	! * str		5264701	1					
ANR	5264722	UnaryOperator	!		5264701	0					
ANR	5264723	UnaryOperationExpression	* str		5264701	1					
ANR	5264724	UnaryOperator	*		5264701	0					
ANR	5264725	Identifier	str		5264701	1					
ANR	5264726	CompoundStatement		5:20:76:76	5264701	1					
ANR	5264727	Statement	return	414:2:9036:9041	5264701	0	True				
ANR	5264728	Statement	0L	414:9:9043:9044	5264701	1	True				
ANR	5264729	ExpressionStatement	L	414:11:9045:9046	5264701	2	True				
ANR	5264730	Identifier	L		5264701	0					
ANR	5264731	IfStatement	if ( num )		5264701	3					
ANR	5264732	Condition	num	417:5:9091:9093	5264701	0	True				
ANR	5264733	Identifier	num		5264701	0					
ANR	5264734	CompoundStatement		9:10:140:140	5264701	1					
ANR	5264735	ExpressionStatement	num -> dbz = 0	418:2:9100:9112	5264701	0	True				
ANR	5264736	AssignmentExpression	num -> dbz = 0		5264701	0		=			
ANR	5264737	PtrMemberAccess	num -> dbz		5264701	0					
ANR	5264738	Identifier	num		5264701	0					
ANR	5264739	Identifier	dbz		5264701	1					
ANR	5264740	PrimaryExpression	0		5264701	1					
ANR	5264741	ExpressionStatement	"ret = r_num_calc ( num , str , & err )"	420:1:9118:9151	5264701	4	True				
ANR	5264742	AssignmentExpression	"ret = r_num_calc ( num , str , & err )"		5264701	0		=			
ANR	5264743	Identifier	ret		5264701	0					
ANR	5264744	CallExpression	"r_num_calc ( num , str , & err )"		5264701	1					
ANR	5264745	Callee	r_num_calc		5264701	0					
ANR	5264746	Identifier	r_num_calc		5264701	0					
ANR	5264747	ArgumentList	num		5264701	1					
ANR	5264748	Argument	num		5264701	0					
ANR	5264749	Identifier	num		5264701	0					
ANR	5264750	Argument	str		5264701	1					
ANR	5264751	Identifier	str		5264701	0					
ANR	5264752	Argument	& err		5264701	2					
ANR	5264753	UnaryOperationExpression	& err		5264701	0					
ANR	5264754	UnaryOperator	&		5264701	0					
ANR	5264755	Identifier	err		5264701	1					
ANR	5264756	IfStatement	if ( err )		5264701	5					
ANR	5264757	Condition	err	421:5:9158:9160	5264701	0	True				
ANR	5264758	Identifier	err		5264701	0					
ANR	5264759	CompoundStatement		13:10:207:207	5264701	1					
ANR	5264760	ExpressionStatement	"eprintf ( ""r_num_calc error: (%s) in (%s)\\n"" , err , str )"	422:2:9167:9221	5264701	0	True				
ANR	5264761	CallExpression	"eprintf ( ""r_num_calc error: (%s) in (%s)\\n"" , err , str )"		5264701	0					
ANR	5264762	Callee	eprintf		5264701	0					
ANR	5264763	Identifier	eprintf		5264701	0					
ANR	5264764	ArgumentList	"""r_num_calc error: (%s) in (%s)\\n"""		5264701	1					
ANR	5264765	Argument	"""r_num_calc error: (%s) in (%s)\\n"""		5264701	0					
ANR	5264766	PrimaryExpression	"""r_num_calc error: (%s) in (%s)\\n"""		5264701	0					
ANR	5264767	Argument	err		5264701	1					
ANR	5264768	Identifier	err		5264701	0					
ANR	5264769	Argument	str		5264701	2					
ANR	5264770	Identifier	str		5264701	0					
ANR	5264771	IfStatement	if ( num )		5264701	6					
ANR	5264772	Condition	num	424:5:9231:9233	5264701	0	True				
ANR	5264773	Identifier	num		5264701	0					
ANR	5264774	CompoundStatement		16:10:280:280	5264701	1					
ANR	5264775	ExpressionStatement	num -> value = ret	425:2:9240:9256	5264701	0	True				
ANR	5264776	AssignmentExpression	num -> value = ret		5264701	0		=			
ANR	5264777	PtrMemberAccess	num -> value		5264701	0					
ANR	5264778	Identifier	num		5264701	0					
ANR	5264779	Identifier	value		5264701	1					
ANR	5264780	Identifier	ret		5264701	1					
ANR	5264781	ReturnStatement	return ret ;	427:1:9262:9272	5264701	7	True				
ANR	5264782	Identifier	ret		5264701	0					
ANR	5264783	ReturnType	R_API ut64		5264701	1					
ANR	5264784	Identifier	r_num_math		5264701	2					
ANR	5264785	ParameterList	"RNum * num , const char * str"		5264701	3					
ANR	5264786	Parameter	RNum * num	409:22:8927:8935	5264701	0	True				
ANR	5264787	ParameterType	RNum *		5264701	0					
ANR	5264788	Identifier	num		5264701	1					
ANR	5264789	Parameter	const char * str	409:33:8938:8952	5264701	1	True				
ANR	5264790	ParameterType	const char *		5264701	0					
ANR	5264791	Identifier	str		5264701	1					
ANR	5264792	CFGEntryNode	ENTRY		5264701		True				
ANR	5264793	CFGExitNode	EXIT		5264701		True				
ANR	5264794	Symbol	str		5264701						
ANR	5264795	Symbol	ret		5264701						
ANR	5264796	Symbol	* num		5264701						
ANR	5264797	Symbol	num -> value		5264701						
ANR	5264798	Symbol	NULL		5264701						
ANR	5264799	Symbol	err		5264701						
ANR	5264800	Symbol	r_num_calc		5264701						
ANR	5264801	Symbol	num		5264701						
ANR	5264802	Symbol	num -> dbz		5264701						
ANR	5264803	Symbol	* str		5264701						
ANR	5264804	Symbol	& err		5264701						
ANR	5264805	Function	r_num_is_float	483:0:10281:10418							
ANR	5264806	FunctionDef	"r_num_is_float (RNum * num , const char * str)"		5264805	0					
ANR	5264807	CompoundStatement		483:53:10334:10418	5264805	0					
ANR	5264808	ReturnStatement	"return ( IS_DIGIT ( * str ) && ( strchr ( str , '.' ) || str [ strlen ( str ) - 1 ] == 'f' ) ) ;"	484:1:10337:10416	5264805	0	True				
ANR	5264809	AndExpression	"IS_DIGIT ( * str ) && ( strchr ( str , '.' ) || str [ strlen ( str ) - 1 ] == 'f' )"		5264805	0		&&			
ANR	5264810	CallExpression	IS_DIGIT ( * str )		5264805	0					
ANR	5264811	Callee	IS_DIGIT		5264805	0					
ANR	5264812	Identifier	IS_DIGIT		5264805	0					
ANR	5264813	ArgumentList	* str		5264805	1					
ANR	5264814	Argument	* str		5264805	0					
ANR	5264815	UnaryOperationExpression	* str		5264805	0					
ANR	5264816	UnaryOperator	*		5264805	0					
ANR	5264817	Identifier	str		5264805	1					
ANR	5264818	OrExpression	"strchr ( str , '.' ) || str [ strlen ( str ) - 1 ] == 'f'"		5264805	1		||			
ANR	5264819	CallExpression	"strchr ( str , '.' )"		5264805	0					
ANR	5264820	Callee	strchr		5264805	0					
ANR	5264821	Identifier	strchr		5264805	0					
ANR	5264822	ArgumentList	str		5264805	1					
ANR	5264823	Argument	str		5264805	0					
ANR	5264824	Identifier	str		5264805	0					
ANR	5264825	Argument	'.'		5264805	1					
ANR	5264826	PrimaryExpression	'.'		5264805	0					
ANR	5264827	EqualityExpression	str [ strlen ( str ) - 1 ] == 'f'		5264805	1		==			
ANR	5264828	ArrayIndexing	str [ strlen ( str ) - 1 ]		5264805	0					
ANR	5264829	Identifier	str		5264805	0					
ANR	5264830	AdditiveExpression	strlen ( str ) - 1		5264805	1		-			
ANR	5264831	CallExpression	strlen ( str )		5264805	0					
ANR	5264832	Callee	strlen		5264805	0					
ANR	5264833	Identifier	strlen		5264805	0					
ANR	5264834	ArgumentList	str		5264805	1					
ANR	5264835	Argument	str		5264805	0					
ANR	5264836	Identifier	str		5264805	0					
ANR	5264837	PrimaryExpression	1		5264805	1					
ANR	5264838	PrimaryExpression	'f'		5264805	1					
ANR	5264839	ReturnType	R_API int		5264805	1					
ANR	5264840	Identifier	r_num_is_float		5264805	2					
ANR	5264841	ParameterList	"RNum * num , const char * str"		5264805	3					
ANR	5264842	Parameter	RNum * num	483:25:10306:10314	5264805	0	True				
ANR	5264843	ParameterType	RNum *		5264805	0					
ANR	5264844	Identifier	num		5264805	1					
ANR	5264845	Parameter	const char * str	483:36:10317:10331	5264805	1	True				
ANR	5264846	ParameterType	const char *		5264805	0					
ANR	5264847	Identifier	str		5264805	1					
ANR	5264848	CFGEntryNode	ENTRY		5264805		True				
ANR	5264849	CFGExitNode	EXIT		5264805		True				
ANR	5264850	Symbol	str		5264805						
ANR	5264851	Symbol	strlen		5264805						
ANR	5264852	Symbol	* strlen		5264805						
ANR	5264853	Symbol	num		5264805						
ANR	5264854	Symbol	strchr		5264805						
ANR	5264855	Symbol	* str		5264805						
ANR	5264856	Symbol	IS_DIGIT		5264805						
ANR	5264857	Function	r_num_get_float	487:0:10421:10542							
ANR	5264858	FunctionDef	"r_num_get_float (RNum * num , const char * str)"		5264857	0					
ANR	5264859	CompoundStatement		487:57:10478:10542	5264857	0					
ANR	5264860	IdentifierDeclStatement	double d = 0.0f ;	488:1:10481:10496	5264857	0	True				
ANR	5264861	IdentifierDecl	d = 0.0f		5264857	0					
ANR	5264862	IdentifierDeclType	double		5264857	0					
ANR	5264863	Identifier	d		5264857	1					
ANR	5264864	AssignmentExpression	d = 0.0f		5264857	2		=			
ANR	5264865	Identifier	d		5264857	0					
ANR	5264866	PrimaryExpression	0.0f		5264857	1					
ANR	5264867	ExpressionStatement	"( void ) sscanf ( str , ""%lf"" , & d )"	489:1:10499:10529	5264857	1	True				
ANR	5264868	CastExpression	"( void ) sscanf ( str , ""%lf"" , & d )"		5264857	0					
ANR	5264869	CastTarget	void		5264857	0					
ANR	5264870	CallExpression	"sscanf ( str , ""%lf"" , & d )"		5264857	1					
ANR	5264871	Callee	sscanf		5264857	0					
ANR	5264872	Identifier	sscanf		5264857	0					
ANR	5264873	ArgumentList	str		5264857	1					
ANR	5264874	Argument	str		5264857	0					
ANR	5264875	Identifier	str		5264857	0					
ANR	5264876	Argument	"""%lf"""		5264857	1					
ANR	5264877	PrimaryExpression	"""%lf"""		5264857	0					
ANR	5264878	Argument	& d		5264857	2					
ANR	5264879	UnaryOperationExpression	& d		5264857	0					
ANR	5264880	UnaryOperator	&		5264857	0					
ANR	5264881	Identifier	d		5264857	1					
ANR	5264882	ReturnStatement	return d ;	490:1:10532:10540	5264857	2	True				
ANR	5264883	Identifier	d		5264857	0					
ANR	5264884	ReturnType	R_API double		5264857	1					
ANR	5264885	Identifier	r_num_get_float		5264857	2					
ANR	5264886	ParameterList	"RNum * num , const char * str"		5264857	3					
ANR	5264887	Parameter	RNum * num	487:29:10450:10458	5264857	0	True				
ANR	5264888	ParameterType	RNum *		5264857	0					
ANR	5264889	Identifier	num		5264857	1					
ANR	5264890	Parameter	const char * str	487:40:10461:10475	5264857	1	True				
ANR	5264891	ParameterType	const char *		5264857	0					
ANR	5264892	Identifier	str		5264857	1					
ANR	5264893	CFGEntryNode	ENTRY		5264857		True				
ANR	5264894	CFGExitNode	EXIT		5264857		True				
ANR	5264895	Symbol	str		5264857						
ANR	5264896	Symbol	d		5264857						
ANR	5264897	Symbol	num		5264857						
ANR	5264898	Symbol	& d		5264857						
ANR	5264899	Function	r_num_to_bits	493:0:10545:11246							
ANR	5264900	FunctionDef	"r_num_to_bits (char * out , ut64 num)"		5264899	0					
ANR	5264901	CompoundStatement		493:45:10590:11246	5264899	0					
ANR	5264902	IdentifierDeclStatement	"int size = 64 , i ;"	494:1:10593:10609	5264899	0	True				
ANR	5264903	IdentifierDecl	size = 64		5264899	0					
ANR	5264904	IdentifierDeclType	int		5264899	0					
ANR	5264905	Identifier	size		5264899	1					
ANR	5264906	AssignmentExpression	size = 64		5264899	2		=			
ANR	5264907	Identifier	size		5264899	0					
ANR	5264908	PrimaryExpression	64		5264899	1					
ANR	5264909	IdentifierDecl	i		5264899	1					
ANR	5264910	IdentifierDeclType	int		5264899	0					
ANR	5264911	Identifier	i		5264899	1					
ANR	5264912	IfStatement	if ( num >> 32 )		5264899	1					
ANR	5264913	Condition	num >> 32	496:5:10617:10625	5264899	0	True				
ANR	5264914	ShiftExpression	num >> 32		5264899	0		>>			
ANR	5264915	Identifier	num		5264899	0					
ANR	5264916	PrimaryExpression	32		5264899	1					
ANR	5264917	CompoundStatement		4:16:37:37	5264899	1					
ANR	5264918	ExpressionStatement	size = 64	497:2:10632:10641	5264899	0	True				
ANR	5264919	AssignmentExpression	size = 64		5264899	0		=			
ANR	5264920	Identifier	size		5264899	0					
ANR	5264921	PrimaryExpression	64		5264899	1					
ANR	5264922	ElseStatement	else		5264899	0					
ANR	5264923	IfStatement	if ( num & 0xff000000 )		5264899	0					
ANR	5264924	Condition	num & 0xff000000	498:12:10655:10670	5264899	0	True				
ANR	5264925	BitAndExpression	num & 0xff000000		5264899	0		&			
ANR	5264926	Identifier	num		5264899	0					
ANR	5264927	PrimaryExpression	0xff000000		5264899	1					
ANR	5264928	CompoundStatement		6:30:82:82	5264899	1					
ANR	5264929	ExpressionStatement	size = 32	499:2:10677:10686	5264899	0	True				
ANR	5264930	AssignmentExpression	size = 32		5264899	0		=			
ANR	5264931	Identifier	size		5264899	0					
ANR	5264932	PrimaryExpression	32		5264899	1					
ANR	5264933	ElseStatement	else		5264899	0					
ANR	5264934	IfStatement	if ( num & 0xff0000 )		5264899	0					
ANR	5264935	Condition	num & 0xff0000	500:12:10700:10713	5264899	0	True				
ANR	5264936	BitAndExpression	num & 0xff0000		5264899	0		&			
ANR	5264937	Identifier	num		5264899	0					
ANR	5264938	PrimaryExpression	0xff0000		5264899	1					
ANR	5264939	CompoundStatement		8:28:125:125	5264899	1					
ANR	5264940	ExpressionStatement	size = 24	501:2:10720:10729	5264899	0	True				
ANR	5264941	AssignmentExpression	size = 24		5264899	0		=			
ANR	5264942	Identifier	size		5264899	0					
ANR	5264943	PrimaryExpression	24		5264899	1					
ANR	5264944	ElseStatement	else		5264899	0					
ANR	5264945	IfStatement	if ( num & 0xff00 )		5264899	0					
ANR	5264946	Condition	num & 0xff00	502:12:10743:10754	5264899	0	True				
ANR	5264947	BitAndExpression	num & 0xff00		5264899	0		&			
ANR	5264948	Identifier	num		5264899	0					
ANR	5264949	PrimaryExpression	0xff00		5264899	1					
ANR	5264950	CompoundStatement		10:26:166:166	5264899	1					
ANR	5264951	ExpressionStatement	size = 16	503:2:10761:10770	5264899	0	True				
ANR	5264952	AssignmentExpression	size = 16		5264899	0		=			
ANR	5264953	Identifier	size		5264899	0					
ANR	5264954	PrimaryExpression	16		5264899	1					
ANR	5264955	ElseStatement	else		5264899	0					
ANR	5264956	IfStatement	if ( num & 0xff )		5264899	0					
ANR	5264957	Condition	num & 0xff	504:12:10784:10793	5264899	0	True				
ANR	5264958	BitAndExpression	num & 0xff		5264899	0		&			
ANR	5264959	Identifier	num		5264899	0					
ANR	5264960	PrimaryExpression	0xff		5264899	1					
ANR	5264961	CompoundStatement		12:24:205:205	5264899	1					
ANR	5264962	ExpressionStatement	size = 8	505:2:10800:10808	5264899	0	True				
ANR	5264963	AssignmentExpression	size = 8		5264899	0		=			
ANR	5264964	Identifier	size		5264899	0					
ANR	5264965	PrimaryExpression	8		5264899	1					
ANR	5264966	IfStatement	if ( out )		5264899	2					
ANR	5264967	Condition	out	507:5:10818:10820	5264899	0	True				
ANR	5264968	Identifier	out		5264899	0					
ANR	5264969	CompoundStatement		18:2:271:285	5264899	1					
ANR	5264970	IdentifierDeclStatement	int pos = 0 ;	508:2:10827:10838	5264899	0	True				
ANR	5264971	IdentifierDecl	pos = 0		5264899	0					
ANR	5264972	IdentifierDeclType	int		5264899	0					
ANR	5264973	Identifier	pos		5264899	1					
ANR	5264974	AssignmentExpression	pos = 0		5264899	2		=			
ANR	5264975	Identifier	pos		5264899	0					
ANR	5264976	PrimaryExpression	0		5264899	1					
ANR	5264977	IdentifierDeclStatement	int realsize = 0 ;	509:2:10842:10858	5264899	1	True				
ANR	5264978	IdentifierDecl	realsize = 0		5264899	0					
ANR	5264979	IdentifierDeclType	int		5264899	0					
ANR	5264980	Identifier	realsize		5264899	1					
ANR	5264981	AssignmentExpression	realsize = 0		5264899	2		=			
ANR	5264982	Identifier	realsize		5264899	0					
ANR	5264983	PrimaryExpression	0		5264899	1					
ANR	5264984	IdentifierDeclStatement	int hasbit = 0 ;	510:2:10862:10876	5264899	2	True				
ANR	5264985	IdentifierDecl	hasbit = 0		5264899	0					
ANR	5264986	IdentifierDeclType	int		5264899	0					
ANR	5264987	Identifier	hasbit		5264899	1					
ANR	5264988	AssignmentExpression	hasbit = 0		5264899	2		=			
ANR	5264989	Identifier	hasbit		5264899	0					
ANR	5264990	PrimaryExpression	0		5264899	1					
ANR	5264991	ForStatement	for ( i = 0 ; i < size ; i ++ )		5264899	3					
ANR	5264992	ForInit	i = 0 ;	511:7:10885:10890	5264899	0	True				
ANR	5264993	AssignmentExpression	i = 0		5264899	0		=			
ANR	5264994	Identifier	i		5264899	0					
ANR	5264995	PrimaryExpression	0		5264899	1					
ANR	5264996	Condition	i < size	511:14:10892:10899	5264899	1	True				
ANR	5264997	RelationalExpression	i < size		5264899	0		<			
ANR	5264998	Identifier	i		5264899	0					
ANR	5264999	Identifier	size		5264899	1					
ANR	5265000	PostIncDecOperationExpression	i ++	511:24:10902:10904	5264899	2	True				
ANR	5265001	Identifier	i		5264899	0					
ANR	5265002	IncDec	++		5264899	1					
ANR	5265003	CompoundStatement		20:3:321:372	5264899	3					
ANR	5265004	IdentifierDeclStatement	char bit = ( ( num >> ( size - i - 1 ) ) & 1 ) ? '1' : '0' ;	512:3:10912:10963	5264899	0	True				
ANR	5265005	IdentifierDecl	bit = ( ( num >> ( size - i - 1 ) ) & 1 ) ? '1' : '0'		5264899	0					
ANR	5265006	IdentifierDeclType	char		5264899	0					
ANR	5265007	Identifier	bit		5264899	1					
ANR	5265008	AssignmentExpression	bit = ( ( num >> ( size - i - 1 ) ) & 1 ) ? '1' : '0'		5264899	2		=			
ANR	5265009	Identifier	bit		5264899	0					
ANR	5265010	ConditionalExpression	( ( num >> ( size - i - 1 ) ) & 1 ) ? '1' : '0'		5264899	1					
ANR	5265011	Condition	( num >> ( size - i - 1 ) ) & 1		5264899	0					
ANR	5265012	BitAndExpression	( num >> ( size - i - 1 ) ) & 1		5264899	0		&			
ANR	5265013	ShiftExpression	num >> ( size - i - 1 )		5264899	0		>>			
ANR	5265014	Identifier	num		5264899	0					
ANR	5265015	AdditiveExpression	size - i - 1		5264899	1		-			
ANR	5265016	Identifier	size		5264899	0					
ANR	5265017	AdditiveExpression	i - 1		5264899	1		-			
ANR	5265018	Identifier	i		5264899	0					
ANR	5265019	PrimaryExpression	1		5264899	1					
ANR	5265020	PrimaryExpression	1		5264899	1					
ANR	5265021	PrimaryExpression	'1'		5264899	1					
ANR	5265022	PrimaryExpression	'0'		5264899	2					
ANR	5265023	IfStatement	if ( hasbit || bit == '1' )		5264899	1					
ANR	5265024	Condition	hasbit || bit == '1'	513:7:10972:10991	5264899	0	True				
ANR	5265025	OrExpression	hasbit || bit == '1'		5264899	0		||			
ANR	5265026	Identifier	hasbit		5264899	0					
ANR	5265027	EqualityExpression	bit == '1'		5264899	1		==			
ANR	5265028	Identifier	bit		5264899	0					
ANR	5265029	PrimaryExpression	'1'		5264899	1					
ANR	5265030	CompoundStatement		21:29:403:403	5264899	1					
ANR	5265031	ExpressionStatement	out [ pos ++ ] = bit	514:4:11000:11016	5264899	0	True				
ANR	5265032	AssignmentExpression	out [ pos ++ ] = bit		5264899	0		=			
ANR	5265033	ArrayIndexing	out [ pos ++ ]		5264899	0					
ANR	5265034	Identifier	out		5264899	0					
ANR	5265035	PostIncDecOperationExpression	pos ++		5264899	1					
ANR	5265036	Identifier	pos		5264899	0					
ANR	5265037	IncDec	++		5264899	1					
ANR	5265038	Identifier	bit		5264899	1					
ANR	5265039	IfStatement	if ( ! hasbit && bit == '1' )		5264899	2					
ANR	5265040	Condition	! hasbit && bit == '1'	516:7:11054:11074	5264899	0	True				
ANR	5265041	AndExpression	! hasbit && bit == '1'		5264899	0		&&			
ANR	5265042	UnaryOperationExpression	! hasbit		5264899	0					
ANR	5265043	UnaryOperator	!		5264899	0					
ANR	5265044	Identifier	hasbit		5264899	1					
ANR	5265045	EqualityExpression	bit == '1'		5264899	1		==			
ANR	5265046	Identifier	bit		5264899	0					
ANR	5265047	PrimaryExpression	'1'		5264899	1					
ANR	5265048	CompoundStatement		24:30:486:486	5264899	1					
ANR	5265049	ExpressionStatement	hasbit = 1	517:4:11083:11093	5264899	0	True				
ANR	5265050	AssignmentExpression	hasbit = 1		5264899	0		=			
ANR	5265051	Identifier	hasbit		5264899	0					
ANR	5265052	PrimaryExpression	1		5264899	1					
ANR	5265053	ExpressionStatement	realsize = size - i	518:4:11099:11118	5264899	1	True				
ANR	5265054	AssignmentExpression	realsize = size - i		5264899	0		=			
ANR	5265055	Identifier	realsize		5264899	0					
ANR	5265056	AdditiveExpression	size - i		5264899	1		-			
ANR	5265057	Identifier	size		5264899	0					
ANR	5265058	Identifier	i		5264899	1					
ANR	5265059	IfStatement	if ( realsize == 0 )		5264899	4					
ANR	5265060	Condition	realsize == 0	521:6:11135:11147	5264899	0	True				
ANR	5265061	EqualityExpression	realsize == 0		5264899	0		==			
ANR	5265062	Identifier	realsize		5264899	0					
ANR	5265063	PrimaryExpression	0		5264899	1					
ANR	5265064	CompoundStatement		29:21:559:559	5264899	1					
ANR	5265065	ExpressionStatement	out [ realsize ++ ] = '0'	522:3:11155:11176	5264899	0	True				
ANR	5265066	AssignmentExpression	out [ realsize ++ ] = '0'		5264899	0		=			
ANR	5265067	ArrayIndexing	out [ realsize ++ ]		5264899	0					
ANR	5265068	Identifier	out		5264899	0					
ANR	5265069	PostIncDecOperationExpression	realsize ++		5264899	1					
ANR	5265070	Identifier	realsize		5264899	0					
ANR	5265071	IncDec	++		5264899	1					
ANR	5265072	PrimaryExpression	'0'		5264899	1					
ANR	5265073	ExpressionStatement	out [ realsize ] = '\\0'	524:2:11184:11204	5264899	5	True				
ANR	5265074	AssignmentExpression	out [ realsize ] = '\\0'		5264899	0		=			
ANR	5265075	ArrayIndexing	out [ realsize ]		5264899	0					
ANR	5265076	Identifier	out		5264899	0					
ANR	5265077	Identifier	realsize		5264899	1					
ANR	5265078	PrimaryExpression	'\\0'		5264899	1					
ANR	5265079	ReturnStatement	return size ;	526:1:11233:11244	5264899	3	True				
ANR	5265080	Identifier	size		5264899	0					
ANR	5265081	ReturnType	R_API int		5264899	1					
ANR	5265082	Identifier	r_num_to_bits		5264899	2					
ANR	5265083	ParameterList	"char * out , ut64 num"		5264899	3					
ANR	5265084	Parameter	char * out	493:24:10569:10577	5264899	0	True				
ANR	5265085	ParameterType	char *		5264899	0					
ANR	5265086	Identifier	out		5264899	1					
ANR	5265087	Parameter	ut64 num	493:35:10580:10587	5264899	1	True				
ANR	5265088	ParameterType	ut64		5264899	0					
ANR	5265089	Identifier	num		5264899	1					
ANR	5265090	CFGEntryNode	ENTRY		5264899		True				
ANR	5265091	CFGExitNode	EXIT		5264899		True				
ANR	5265092	Symbol	size		5264899						
ANR	5265093	Symbol	pos		5264899						
ANR	5265094	Symbol	realsize		5264899						
ANR	5265095	Symbol	* realsize		5264899						
ANR	5265096	Symbol	num		5264899						
ANR	5265097	Symbol	hasbit		5264899						
ANR	5265098	Symbol	* out		5264899						
ANR	5265099	Symbol	i		5264899						
ANR	5265100	Symbol	bit		5264899						
ANR	5265101	Symbol	out		5264899						
ANR	5265102	Function	r_num_to_trits	529:0:11249:11511							
ANR	5265103	FunctionDef	"r_num_to_trits (char * out , ut64 num)"		5265102	0					
ANR	5265104	CompoundStatement		529:46:11295:11511	5265102	0					
ANR	5265105	IfStatement	if ( out == NULL )		5265102	0					
ANR	5265106	Condition	out == NULL	530:5:11302:11312	5265102	0	True				
ANR	5265107	EqualityExpression	out == NULL		5265102	0		==			
ANR	5265108	Identifier	out		5265102	0					
ANR	5265109	Identifier	NULL		5265102	1					
ANR	5265110	CompoundStatement		2:18:19:19	5265102	1					
ANR	5265111	ReturnStatement	return false ;	531:2:11319:11331	5265102	0	True				
ANR	5265112	Identifier	false		5265102	0					
ANR	5265113	IdentifierDeclStatement	int i ;	533:1:11337:11342	5265102	1	True				
ANR	5265114	IdentifierDecl	i		5265102	0					
ANR	5265115	IdentifierDeclType	int		5265102	0					
ANR	5265116	Identifier	i		5265102	1					
ANR	5265117	ForStatement	"for ( i = 0 ; num ; i ++ , num /= 3 )"		5265102	2					
ANR	5265118	ForInit	i = 0 ;	534:6:11350:11355	5265102	0	True				
ANR	5265119	AssignmentExpression	i = 0		5265102	0		=			
ANR	5265120	Identifier	i		5265102	0					
ANR	5265121	PrimaryExpression	0		5265102	1					
ANR	5265122	Condition	num	534:13:11357:11359	5265102	1	True				
ANR	5265123	Identifier	num		5265102	0					
ANR	5265124	Expression	"i ++ , num /= 3"	534:18:11362:11374	5265102	2	True				
ANR	5265125	PostIncDecOperationExpression	i ++		5265102	0					
ANR	5265126	Identifier	i		5265102	0					
ANR	5265127	IncDec	++		5265102	1					
ANR	5265128	AssignmentExpression	num /= 3		5265102	1		/=			
ANR	5265129	Identifier	num		5265102	0					
ANR	5265130	PrimaryExpression	3		5265102	1					
ANR	5265131	CompoundStatement		6:33:81:81	5265102	3					
ANR	5265132	ExpressionStatement	out [ i ] = ( char ) ( '0' + num % 3 )	535:2:11381:11412	5265102	0	True				
ANR	5265133	AssignmentExpression	out [ i ] = ( char ) ( '0' + num % 3 )		5265102	0		=			
ANR	5265134	ArrayIndexing	out [ i ]		5265102	0					
ANR	5265135	Identifier	out		5265102	0					
ANR	5265136	Identifier	i		5265102	1					
ANR	5265137	CastExpression	( char ) ( '0' + num % 3 )		5265102	1					
ANR	5265138	CastTarget	char		5265102	0					
ANR	5265139	AdditiveExpression	'0' + num % 3		5265102	1		+			
ANR	5265140	PrimaryExpression	'0'		5265102	0					
ANR	5265141	MultiplicativeExpression	num % 3		5265102	1		%			
ANR	5265142	Identifier	num		5265102	0					
ANR	5265143	PrimaryExpression	3		5265102	1					
ANR	5265144	IfStatement	if ( i == 0 )		5265102	3					
ANR	5265145	Condition	i == 0	537:5:11422:11427	5265102	0	True				
ANR	5265146	EqualityExpression	i == 0		5265102	0		==			
ANR	5265147	Identifier	i		5265102	0					
ANR	5265148	PrimaryExpression	0		5265102	1					
ANR	5265149	CompoundStatement		9:13:134:134	5265102	1					
ANR	5265150	ExpressionStatement	out [ 0 ] = '0'	538:2:11434:11446	5265102	0	True				
ANR	5265151	AssignmentExpression	out [ 0 ] = '0'		5265102	0		=			
ANR	5265152	ArrayIndexing	out [ 0 ]		5265102	0					
ANR	5265153	Identifier	out		5265102	0					
ANR	5265154	PrimaryExpression	0		5265102	1					
ANR	5265155	PrimaryExpression	'0'		5265102	1					
ANR	5265156	ExpressionStatement	i ++	539:2:11450:11453	5265102	1	True				
ANR	5265157	PostIncDecOperationExpression	i ++		5265102	0					
ANR	5265158	Identifier	i		5265102	0					
ANR	5265159	IncDec	++		5265102	1					
ANR	5265160	ExpressionStatement	out [ i ] = '\\0'	541:1:11459:11472	5265102	4	True				
ANR	5265161	AssignmentExpression	out [ i ] = '\\0'		5265102	0		=			
ANR	5265162	ArrayIndexing	out [ i ]		5265102	0					
ANR	5265163	Identifier	out		5265102	0					
ANR	5265164	Identifier	i		5265102	1					
ANR	5265165	PrimaryExpression	'\\0'		5265102	1					
ANR	5265166	ExpressionStatement	r_str_reverse ( out )	543:1:11476:11495	5265102	5	True				
ANR	5265167	CallExpression	r_str_reverse ( out )		5265102	0					
ANR	5265168	Callee	r_str_reverse		5265102	0					
ANR	5265169	Identifier	r_str_reverse		5265102	0					
ANR	5265170	ArgumentList	out		5265102	1					
ANR	5265171	Argument	out		5265102	0					
ANR	5265172	Identifier	out		5265102	0					
ANR	5265173	ReturnStatement	return true ;	544:1:11498:11509	5265102	6	True				
ANR	5265174	Identifier	true		5265102	0					
ANR	5265175	ReturnType	R_API int		5265102	1					
ANR	5265176	Identifier	r_num_to_trits		5265102	2					
ANR	5265177	ParameterList	"char * out , ut64 num"		5265102	3					
ANR	5265178	Parameter	char * out	529:25:11274:11282	5265102	0	True				
ANR	5265179	ParameterType	char *		5265102	0					
ANR	5265180	Identifier	out		5265102	1					
ANR	5265181	Parameter	ut64 num	529:36:11285:11292	5265102	1	True				
ANR	5265182	ParameterType	ut64		5265102	0					
ANR	5265183	Identifier	num		5265102	1					
ANR	5265184	CFGEntryNode	ENTRY		5265102		True				
ANR	5265185	CFGExitNode	EXIT		5265102		True				
ANR	5265186	Symbol	NULL		5265102						
ANR	5265187	Symbol	* i		5265102						
ANR	5265188	Symbol	num		5265102						
ANR	5265189	Symbol	false		5265102						
ANR	5265190	Symbol	* out		5265102						
ANR	5265191	Symbol	true		5265102						
ANR	5265192	Symbol	i		5265102						
ANR	5265193	Symbol	out		5265102						
ANR	5265194	Function	r_num_chs	547:0:11514:11706							
ANR	5265195	FunctionDef	"r_num_chs (int cylinder , int head , int sector , int sectorsize)"		5265194	0					
ANR	5265196	CompoundStatement		547:73:11587:11706	5265194	0					
ANR	5265197	IfStatement	if ( sectorsize < 1 )		5265194	0					
ANR	5265198	Condition	sectorsize < 1	548:5:11594:11607	5265194	0	True				
ANR	5265199	RelationalExpression	sectorsize < 1		5265194	0		<			
ANR	5265200	Identifier	sectorsize		5265194	0					
ANR	5265201	PrimaryExpression	1		5265194	1					
ANR	5265202	CompoundStatement		2:21:22:22	5265194	1					
ANR	5265203	ExpressionStatement	sectorsize = 512	549:2:11614:11630	5265194	0	True				
ANR	5265204	AssignmentExpression	sectorsize = 512		5265194	0		=			
ANR	5265205	Identifier	sectorsize		5265194	0					
ANR	5265206	PrimaryExpression	512		5265194	1					
ANR	5265207	ReturnStatement	return ( ut64 ) cylinder * ( ut64 ) head * ( ut64 ) sector * ( ut64 ) sectorsize ;	551:1:11636:11704	5265194	1	True				
ANR	5265208	MultiplicativeExpression	( ut64 ) cylinder * ( ut64 ) head * ( ut64 ) sector * ( ut64 ) sectorsize		5265194	0		*			
ANR	5265209	CastExpression	( ut64 ) cylinder		5265194	0					
ANR	5265210	CastTarget	ut64		5265194	0					
ANR	5265211	Identifier	cylinder		5265194	1					
ANR	5265212	MultiplicativeExpression	( ut64 ) head * ( ut64 ) sector * ( ut64 ) sectorsize		5265194	1		*			
ANR	5265213	CastExpression	( ut64 ) head		5265194	0					
ANR	5265214	CastTarget	ut64		5265194	0					
ANR	5265215	Identifier	head		5265194	1					
ANR	5265216	MultiplicativeExpression	( ut64 ) sector * ( ut64 ) sectorsize		5265194	1		*			
ANR	5265217	CastExpression	( ut64 ) sector		5265194	0					
ANR	5265218	CastTarget	ut64		5265194	0					
ANR	5265219	Identifier	sector		5265194	1					
ANR	5265220	CastExpression	( ut64 ) sectorsize		5265194	1					
ANR	5265221	CastTarget	ut64		5265194	0					
ANR	5265222	Identifier	sectorsize		5265194	1					
ANR	5265223	ReturnType	R_API ut64		5265194	1					
ANR	5265224	Identifier	r_num_chs		5265194	2					
ANR	5265225	ParameterList	"int cylinder , int head , int sector , int sectorsize"		5265194	3					
ANR	5265226	Parameter	int cylinder	547:21:11535:11546	5265194	0	True				
ANR	5265227	ParameterType	int		5265194	0					
ANR	5265228	Identifier	cylinder		5265194	1					
ANR	5265229	Parameter	int head	547:35:11549:11556	5265194	1	True				
ANR	5265230	ParameterType	int		5265194	0					
ANR	5265231	Identifier	head		5265194	1					
ANR	5265232	Parameter	int sector	547:45:11559:11568	5265194	2	True				
ANR	5265233	ParameterType	int		5265194	0					
ANR	5265234	Identifier	sector		5265194	1					
ANR	5265235	Parameter	int sectorsize	547:57:11571:11584	5265194	3	True				
ANR	5265236	ParameterType	int		5265194	0					
ANR	5265237	Identifier	sectorsize		5265194	1					
ANR	5265238	CFGEntryNode	ENTRY		5265194		True				
ANR	5265239	CFGExitNode	EXIT		5265194		True				
ANR	5265240	Symbol	head		5265194						
ANR	5265241	Symbol	cylinder		5265194						
ANR	5265242	Symbol	sectorsize		5265194						
ANR	5265243	Symbol	sector		5265194						
ANR	5265244	Function	r_num_conditional	554:0:11709:12973							
ANR	5265245	FunctionDef	"r_num_conditional (RNum * num , const char * str)"		5265244	0					
ANR	5265246	CompoundStatement		554:56:11765:12973	5265244	0					
ANR	5265247	IdentifierDeclStatement	"char * lgt , * t , * p , * s = strdup ( str ) ;"	555:1:11768:11804	5265244	0	True				
ANR	5265248	IdentifierDecl	* lgt		5265244	0					
ANR	5265249	IdentifierDeclType	char *		5265244	0					
ANR	5265250	Identifier	lgt		5265244	1					
ANR	5265251	IdentifierDecl	* t		5265244	1					
ANR	5265252	IdentifierDeclType	char *		5265244	0					
ANR	5265253	Identifier	t		5265244	1					
ANR	5265254	IdentifierDecl	* p		5265244	2					
ANR	5265255	IdentifierDeclType	char *		5265244	0					
ANR	5265256	Identifier	p		5265244	1					
ANR	5265257	IdentifierDecl	* s = strdup ( str )		5265244	3					
ANR	5265258	IdentifierDeclType	char *		5265244	0					
ANR	5265259	Identifier	s		5265244	1					
ANR	5265260	AssignmentExpression	* s = strdup ( str )		5265244	2		=			
ANR	5265261	Identifier	s		5265244	0					
ANR	5265262	CallExpression	strdup ( str )		5265244	1					
ANR	5265263	Callee	strdup		5265244	0					
ANR	5265264	Identifier	strdup		5265244	0					
ANR	5265265	ArgumentList	str		5265244	1					
ANR	5265266	Argument	str		5265244	0					
ANR	5265267	Identifier	str		5265244	0					
ANR	5265268	IdentifierDeclStatement	int res = 0 ;	556:1:11807:11818	5265244	1	True				
ANR	5265269	IdentifierDecl	res = 0		5265244	0					
ANR	5265270	IdentifierDeclType	int		5265244	0					
ANR	5265271	Identifier	res		5265244	1					
ANR	5265272	AssignmentExpression	res = 0		5265244	2		=			
ANR	5265273	Identifier	res		5265244	0					
ANR	5265274	PrimaryExpression	0		5265244	1					
ANR	5265275	IdentifierDeclStatement	"ut64 n , a , b ;"	557:1:11821:11833	5265244	2	True				
ANR	5265276	IdentifierDecl	n		5265244	0					
ANR	5265277	IdentifierDeclType	ut64		5265244	0					
ANR	5265278	Identifier	n		5265244	1					
ANR	5265279	IdentifierDecl	a		5265244	1					
ANR	5265280	IdentifierDeclType	ut64		5265244	0					
ANR	5265281	Identifier	a		5265244	1					
ANR	5265282	IdentifierDecl	b		5265244	2					
ANR	5265283	IdentifierDeclType	ut64		5265244	0					
ANR	5265284	Identifier	b		5265244	1					
ANR	5265285	ExpressionStatement	p = s	558:1:11836:11841	5265244	3	True				
ANR	5265286	AssignmentExpression	p = s		5265244	0		=			
ANR	5265287	Identifier	p		5265244	0					
ANR	5265288	Identifier	s		5265244	1					
ANR	5265289	DoStatement	do		5265244	4					
ANR	5265290	CompoundStatement		6:4:81:81	5265244	0					
ANR	5265291	ExpressionStatement	"t = strchr ( p , ',' )"	560:2:11851:11870	5265244	0	True				
ANR	5265292	AssignmentExpression	"t = strchr ( p , ',' )"		5265244	0		=			
ANR	5265293	Identifier	t		5265244	0					
ANR	5265294	CallExpression	"strchr ( p , ',' )"		5265244	1					
ANR	5265295	Callee	strchr		5265244	0					
ANR	5265296	Identifier	strchr		5265244	0					
ANR	5265297	ArgumentList	p		5265244	1					
ANR	5265298	Argument	p		5265244	0					
ANR	5265299	Identifier	p		5265244	0					
ANR	5265300	Argument	"','"		5265244	1					
ANR	5265301	PrimaryExpression	"','"		5265244	0					
ANR	5265302	IfStatement	if ( t )		5265244	1					
ANR	5265303	Condition	t	561:6:11878:11878	5265244	0	True				
ANR	5265304	Identifier	t		5265244	0					
ANR	5265305	CompoundStatement		8:9:115:115	5265244	1					
ANR	5265306	ExpressionStatement	* t = 0	562:3:11886:11892	5265244	0	True				
ANR	5265307	AssignmentExpression	* t = 0		5265244	0		=			
ANR	5265308	UnaryOperationExpression	* t		5265244	0					
ANR	5265309	UnaryOperator	*		5265244	0					
ANR	5265310	Identifier	t		5265244	1					
ANR	5265311	PrimaryExpression	0		5265244	1					
ANR	5265312	ExpressionStatement	"lgt = strchr ( p , '<' )"	564:2:11900:11921	5265244	2	True				
ANR	5265313	AssignmentExpression	"lgt = strchr ( p , '<' )"		5265244	0		=			
ANR	5265314	Identifier	lgt		5265244	0					
ANR	5265315	CallExpression	"strchr ( p , '<' )"		5265244	1					
ANR	5265316	Callee	strchr		5265244	0					
ANR	5265317	Identifier	strchr		5265244	0					
ANR	5265318	ArgumentList	p		5265244	1					
ANR	5265319	Argument	p		5265244	0					
ANR	5265320	Identifier	p		5265244	0					
ANR	5265321	Argument	'<'		5265244	1					
ANR	5265322	PrimaryExpression	'<'		5265244	0					
ANR	5265323	IfStatement	if ( lgt )		5265244	3					
ANR	5265324	Condition	lgt	565:6:11929:11931	5265244	0	True				
ANR	5265325	Identifier	lgt		5265244	0					
ANR	5265326	CompoundStatement		12:11:168:168	5265244	1					
ANR	5265327	ExpressionStatement	* lgt = 0	566:3:11939:11947	5265244	0	True				
ANR	5265328	AssignmentExpression	* lgt = 0		5265244	0		=			
ANR	5265329	UnaryOperationExpression	* lgt		5265244	0					
ANR	5265330	UnaryOperator	*		5265244	0					
ANR	5265331	Identifier	lgt		5265244	1					
ANR	5265332	PrimaryExpression	0		5265244	1					
ANR	5265333	ExpressionStatement	"a = r_num_math ( num , p )"	567:3:11952:11975	5265244	1	True				
ANR	5265334	AssignmentExpression	"a = r_num_math ( num , p )"		5265244	0		=			
ANR	5265335	Identifier	a		5265244	0					
ANR	5265336	CallExpression	"r_num_math ( num , p )"		5265244	1					
ANR	5265337	Callee	r_num_math		5265244	0					
ANR	5265338	Identifier	r_num_math		5265244	0					
ANR	5265339	ArgumentList	num		5265244	1					
ANR	5265340	Argument	num		5265244	0					
ANR	5265341	Identifier	num		5265244	0					
ANR	5265342	Argument	p		5265244	1					
ANR	5265343	Identifier	p		5265244	0					
ANR	5265344	IfStatement	if ( lgt [ 1 ] == '=' )		5265244	2					
ANR	5265345	Condition	lgt [ 1 ] == '='	568:7:11984:11996	5265244	0	True				
ANR	5265346	EqualityExpression	lgt [ 1 ] == '='		5265244	0		==			
ANR	5265347	ArrayIndexing	lgt [ 1 ]		5265244	0					
ANR	5265348	Identifier	lgt		5265244	0					
ANR	5265349	PrimaryExpression	1		5265244	1					
ANR	5265350	PrimaryExpression	'='		5265244	1					
ANR	5265351	CompoundStatement		15:22:233:233	5265244	1					
ANR	5265352	ExpressionStatement	"b = r_num_math ( num , lgt + 2 )"	569:4:12005:12034	5265244	0	True				
ANR	5265353	AssignmentExpression	"b = r_num_math ( num , lgt + 2 )"		5265244	0		=			
ANR	5265354	Identifier	b		5265244	0					
ANR	5265355	CallExpression	"r_num_math ( num , lgt + 2 )"		5265244	1					
ANR	5265356	Callee	r_num_math		5265244	0					
ANR	5265357	Identifier	r_num_math		5265244	0					
ANR	5265358	ArgumentList	num		5265244	1					
ANR	5265359	Argument	num		5265244	0					
ANR	5265360	Identifier	num		5265244	0					
ANR	5265361	Argument	lgt + 2		5265244	1					
ANR	5265362	AdditiveExpression	lgt + 2		5265244	0		+			
ANR	5265363	Identifier	lgt		5265244	0					
ANR	5265364	PrimaryExpression	2		5265244	1					
ANR	5265365	IfStatement	if ( a > b )		5265244	1					
ANR	5265366	Condition	a > b	570:8:12044:12048	5265244	0	True				
ANR	5265367	RelationalExpression	a > b		5265244	0		>			
ANR	5265368	Identifier	a		5265244	0					
ANR	5265369	Identifier	b		5265244	1					
ANR	5265370	CompoundStatement		17:15:285:285	5265244	1					
ANR	5265371	GotoStatement	goto fail ;	571:5:12058:12067	5265244	0	True				
ANR	5265372	Identifier	fail		5265244	0					
ANR	5265373	ElseStatement	else		5265244	0					
ANR	5265374	CompoundStatement		20:10:319:319	5265244	0					
ANR	5265375	ExpressionStatement	"b = r_num_math ( num , lgt + 1 )"	574:4:12091:12120	5265244	0	True				
ANR	5265376	AssignmentExpression	"b = r_num_math ( num , lgt + 1 )"		5265244	0		=			
ANR	5265377	Identifier	b		5265244	0					
ANR	5265378	CallExpression	"r_num_math ( num , lgt + 1 )"		5265244	1					
ANR	5265379	Callee	r_num_math		5265244	0					
ANR	5265380	Identifier	r_num_math		5265244	0					
ANR	5265381	ArgumentList	num		5265244	1					
ANR	5265382	Argument	num		5265244	0					
ANR	5265383	Identifier	num		5265244	0					
ANR	5265384	Argument	lgt + 1		5265244	1					
ANR	5265385	AdditiveExpression	lgt + 1		5265244	0		+			
ANR	5265386	Identifier	lgt		5265244	0					
ANR	5265387	PrimaryExpression	1		5265244	1					
ANR	5265388	IfStatement	if ( a >= b )		5265244	1					
ANR	5265389	Condition	a >= b	575:8:12130:12135	5265244	0	True				
ANR	5265390	RelationalExpression	a >= b		5265244	0		>=			
ANR	5265391	Identifier	a		5265244	0					
ANR	5265392	Identifier	b		5265244	1					
ANR	5265393	CompoundStatement		22:16:372:372	5265244	1					
ANR	5265394	GotoStatement	goto fail ;	576:5:12145:12154	5265244	0	True				
ANR	5265395	Identifier	fail		5265244	0					
ANR	5265396	ElseStatement	else		5265244	0					
ANR	5265397	CompoundStatement		26:9:410:410	5265244	0					
ANR	5265398	ExpressionStatement	"lgt = strchr ( p , '>' )"	580:3:12181:12202	5265244	0	True				
ANR	5265399	AssignmentExpression	"lgt = strchr ( p , '>' )"		5265244	0		=			
ANR	5265400	Identifier	lgt		5265244	0					
ANR	5265401	CallExpression	"strchr ( p , '>' )"		5265244	1					
ANR	5265402	Callee	strchr		5265244	0					
ANR	5265403	Identifier	strchr		5265244	0					
ANR	5265404	ArgumentList	p		5265244	1					
ANR	5265405	Argument	p		5265244	0					
ANR	5265406	Identifier	p		5265244	0					
ANR	5265407	Argument	'>'		5265244	1					
ANR	5265408	PrimaryExpression	'>'		5265244	0					
ANR	5265409	IfStatement	if ( lgt )		5265244	1					
ANR	5265410	Condition	lgt	581:7:12211:12213	5265244	0	True				
ANR	5265411	Identifier	lgt		5265244	0					
ANR	5265412	CompoundStatement		28:12:450:450	5265244	1					
ANR	5265413	ExpressionStatement	* lgt = 0	582:4:12222:12230	5265244	0	True				
ANR	5265414	AssignmentExpression	* lgt = 0		5265244	0		=			
ANR	5265415	UnaryOperationExpression	* lgt		5265244	0					
ANR	5265416	UnaryOperator	*		5265244	0					
ANR	5265417	Identifier	lgt		5265244	1					
ANR	5265418	PrimaryExpression	0		5265244	1					
ANR	5265419	ExpressionStatement	"a = r_num_math ( num , p )"	583:4:12236:12259	5265244	1	True				
ANR	5265420	AssignmentExpression	"a = r_num_math ( num , p )"		5265244	0		=			
ANR	5265421	Identifier	a		5265244	0					
ANR	5265422	CallExpression	"r_num_math ( num , p )"		5265244	1					
ANR	5265423	Callee	r_num_math		5265244	0					
ANR	5265424	Identifier	r_num_math		5265244	0					
ANR	5265425	ArgumentList	num		5265244	1					
ANR	5265426	Argument	num		5265244	0					
ANR	5265427	Identifier	num		5265244	0					
ANR	5265428	Argument	p		5265244	1					
ANR	5265429	Identifier	p		5265244	0					
ANR	5265430	IfStatement	if ( lgt [ 1 ] == '=' )		5265244	2					
ANR	5265431	Condition	lgt [ 1 ] == '='	584:8:12269:12281	5265244	0	True				
ANR	5265432	EqualityExpression	lgt [ 1 ] == '='		5265244	0		==			
ANR	5265433	ArrayIndexing	lgt [ 1 ]		5265244	0					
ANR	5265434	Identifier	lgt		5265244	0					
ANR	5265435	PrimaryExpression	1		5265244	1					
ANR	5265436	PrimaryExpression	'='		5265244	1					
ANR	5265437	CompoundStatement		31:23:518:518	5265244	1					
ANR	5265438	ExpressionStatement	"b = r_num_math ( num , lgt + 2 )"	585:5:12291:12320	5265244	0	True				
ANR	5265439	AssignmentExpression	"b = r_num_math ( num , lgt + 2 )"		5265244	0		=			
ANR	5265440	Identifier	b		5265244	0					
ANR	5265441	CallExpression	"r_num_math ( num , lgt + 2 )"		5265244	1					
ANR	5265442	Callee	r_num_math		5265244	0					
ANR	5265443	Identifier	r_num_math		5265244	0					
ANR	5265444	ArgumentList	num		5265244	1					
ANR	5265445	Argument	num		5265244	0					
ANR	5265446	Identifier	num		5265244	0					
ANR	5265447	Argument	lgt + 2		5265244	1					
ANR	5265448	AdditiveExpression	lgt + 2		5265244	0		+			
ANR	5265449	Identifier	lgt		5265244	0					
ANR	5265450	PrimaryExpression	2		5265244	1					
ANR	5265451	IfStatement	if ( a < b )		5265244	1					
ANR	5265452	Condition	a < b	586:9:12331:12335	5265244	0	True				
ANR	5265453	RelationalExpression	a < b		5265244	0		<			
ANR	5265454	Identifier	a		5265244	0					
ANR	5265455	Identifier	b		5265244	1					
ANR	5265456	CompoundStatement		33:16:572:572	5265244	1					
ANR	5265457	GotoStatement	goto fail ;	587:6:12346:12355	5265244	0	True				
ANR	5265458	Identifier	fail		5265244	0					
ANR	5265459	ElseStatement	else		5265244	0					
ANR	5265460	CompoundStatement		36:11:609:609	5265244	0					
ANR	5265461	ExpressionStatement	"b = r_num_math ( num , lgt + 1 )"	590:5:12382:12411	5265244	0	True				
ANR	5265462	AssignmentExpression	"b = r_num_math ( num , lgt + 1 )"		5265244	0		=			
ANR	5265463	Identifier	b		5265244	0					
ANR	5265464	CallExpression	"r_num_math ( num , lgt + 1 )"		5265244	1					
ANR	5265465	Callee	r_num_math		5265244	0					
ANR	5265466	Identifier	r_num_math		5265244	0					
ANR	5265467	ArgumentList	num		5265244	1					
ANR	5265468	Argument	num		5265244	0					
ANR	5265469	Identifier	num		5265244	0					
ANR	5265470	Argument	lgt + 1		5265244	1					
ANR	5265471	AdditiveExpression	lgt + 1		5265244	0		+			
ANR	5265472	Identifier	lgt		5265244	0					
ANR	5265473	PrimaryExpression	1		5265244	1					
ANR	5265474	IfStatement	if ( a <= b )		5265244	1					
ANR	5265475	Condition	a <= b	591:9:12422:12427	5265244	0	True				
ANR	5265476	RelationalExpression	a <= b		5265244	0		<=			
ANR	5265477	Identifier	a		5265244	0					
ANR	5265478	Identifier	b		5265244	1					
ANR	5265479	CompoundStatement		38:17:664:664	5265244	1					
ANR	5265480	GotoStatement	goto fail ;	592:6:12438:12447	5265244	0	True				
ANR	5265481	Identifier	fail		5265244	0					
ANR	5265482	ElseStatement	else		5265244	0					
ANR	5265483	CompoundStatement		42:10:706:706	5265244	0					
ANR	5265484	ExpressionStatement	"lgt = strchr ( p , '=' )"	596:4:12478:12499	5265244	0	True				
ANR	5265485	AssignmentExpression	"lgt = strchr ( p , '=' )"		5265244	0		=			
ANR	5265486	Identifier	lgt		5265244	0					
ANR	5265487	CallExpression	"strchr ( p , '=' )"		5265244	1					
ANR	5265488	Callee	strchr		5265244	0					
ANR	5265489	Identifier	strchr		5265244	0					
ANR	5265490	ArgumentList	p		5265244	1					
ANR	5265491	Argument	p		5265244	0					
ANR	5265492	Identifier	p		5265244	0					
ANR	5265493	Argument	'='		5265244	1					
ANR	5265494	PrimaryExpression	'='		5265244	0					
ANR	5265495	IfStatement	if ( lgt && lgt > p )		5265244	1					
ANR	5265496	Condition	lgt && lgt > p	597:8:12509:12522	5265244	0	True				
ANR	5265497	AndExpression	lgt && lgt > p		5265244	0		&&			
ANR	5265498	Identifier	lgt		5265244	0					
ANR	5265499	RelationalExpression	lgt > p		5265244	1		>			
ANR	5265500	Identifier	lgt		5265244	0					
ANR	5265501	Identifier	p		5265244	1					
ANR	5265502	CompoundStatement		44:24:759:759	5265244	1					
ANR	5265503	ExpressionStatement	lgt --	598:5:12532:12537	5265244	0	True				
ANR	5265504	PostIncDecOperationExpression	lgt --		5265244	0					
ANR	5265505	Identifier	lgt		5265244	0					
ANR	5265506	IncDec	--		5265244	1					
ANR	5265507	IfStatement	if ( * lgt == '!' )		5265244	1					
ANR	5265508	Condition	* lgt == '!'	599:9:12548:12558	5265244	0	True				
ANR	5265509	EqualityExpression	* lgt == '!'		5265244	0		==			
ANR	5265510	UnaryOperationExpression	* lgt		5265244	0					
ANR	5265511	UnaryOperator	*		5265244	0					
ANR	5265512	Identifier	lgt		5265244	1					
ANR	5265513	PrimaryExpression	'!'		5265244	1					
ANR	5265514	CompoundStatement		46:22:795:795	5265244	1					
ANR	5265515	ExpressionStatement	"r_str_replace_char ( p , '!' , ' ' )"	600:6:12569:12601	5265244	0	True				
ANR	5265516	CallExpression	"r_str_replace_char ( p , '!' , ' ' )"		5265244	0					
ANR	5265517	Callee	r_str_replace_char		5265244	0					
ANR	5265518	Identifier	r_str_replace_char		5265244	0					
ANR	5265519	ArgumentList	p		5265244	1					
ANR	5265520	Argument	p		5265244	0					
ANR	5265521	Identifier	p		5265244	0					
ANR	5265522	Argument	'!'		5265244	1					
ANR	5265523	PrimaryExpression	'!'		5265244	0					
ANR	5265524	Argument	' '		5265244	2					
ANR	5265525	PrimaryExpression	' '		5265244	0					
ANR	5265526	ExpressionStatement	"r_str_replace_char ( p , '=' , '-' )"	601:6:12609:12641	5265244	1	True				
ANR	5265527	CallExpression	"r_str_replace_char ( p , '=' , '-' )"		5265244	0					
ANR	5265528	Callee	r_str_replace_char		5265244	0					
ANR	5265529	Identifier	r_str_replace_char		5265244	0					
ANR	5265530	ArgumentList	p		5265244	1					
ANR	5265531	Argument	p		5265244	0					
ANR	5265532	Identifier	p		5265244	0					
ANR	5265533	Argument	'='		5265244	1					
ANR	5265534	PrimaryExpression	'='		5265244	0					
ANR	5265535	Argument	'-'		5265244	2					
ANR	5265536	PrimaryExpression	'-'		5265244	0					
ANR	5265537	ExpressionStatement	"n = r_num_math ( num , p )"	602:6:12649:12672	5265244	2	True				
ANR	5265538	AssignmentExpression	"n = r_num_math ( num , p )"		5265244	0		=			
ANR	5265539	Identifier	n		5265244	0					
ANR	5265540	CallExpression	"r_num_math ( num , p )"		5265244	1					
ANR	5265541	Callee	r_num_math		5265244	0					
ANR	5265542	Identifier	r_num_math		5265244	0					
ANR	5265543	ArgumentList	num		5265244	1					
ANR	5265544	Argument	num		5265244	0					
ANR	5265545	Identifier	num		5265244	0					
ANR	5265546	Argument	p		5265244	1					
ANR	5265547	Identifier	p		5265244	0					
ANR	5265548	IfStatement	if ( ! n )		5265244	3					
ANR	5265549	Condition	! n	603:10:12684:12685	5265244	0	True				
ANR	5265550	UnaryOperationExpression	! n		5265244	0					
ANR	5265551	UnaryOperator	!		5265244	0					
ANR	5265552	Identifier	n		5265244	1					
ANR	5265553	CompoundStatement		50:14:922:922	5265244	1					
ANR	5265554	GotoStatement	goto fail ;	604:7:12697:12706	5265244	0	True				
ANR	5265555	Identifier	fail		5265244	0					
ANR	5265556	ExpressionStatement	"lgt = strstr ( p , ""=="" )"	608:4:12733:12755	5265244	2	True				
ANR	5265557	AssignmentExpression	"lgt = strstr ( p , ""=="" )"		5265244	0		=			
ANR	5265558	Identifier	lgt		5265244	0					
ANR	5265559	CallExpression	"strstr ( p , ""=="" )"		5265244	1					
ANR	5265560	Callee	strstr		5265244	0					
ANR	5265561	Identifier	strstr		5265244	0					
ANR	5265562	ArgumentList	p		5265244	1					
ANR	5265563	Argument	p		5265244	0					
ANR	5265564	Identifier	p		5265244	0					
ANR	5265565	Argument	"""=="""		5265244	1					
ANR	5265566	PrimaryExpression	"""=="""		5265244	0					
ANR	5265567	IfStatement	if ( lgt )		5265244	3					
ANR	5265568	Condition	lgt	609:8:12765:12767	5265244	0	True				
ANR	5265569	Identifier	lgt		5265244	0					
ANR	5265570	CompoundStatement		56:13:1004:1004	5265244	1					
ANR	5265571	ExpressionStatement	* lgt = ' '	610:5:12777:12787	5265244	0	True				
ANR	5265572	AssignmentExpression	* lgt = ' '		5265244	0		=			
ANR	5265573	UnaryOperationExpression	* lgt		5265244	0					
ANR	5265574	UnaryOperator	*		5265244	0					
ANR	5265575	Identifier	lgt		5265244	1					
ANR	5265576	PrimaryExpression	' '		5265244	1					
ANR	5265577	ExpressionStatement	"r_str_replace_char ( p , '=' , '-' )"	612:4:12799:12831	5265244	4	True				
ANR	5265578	CallExpression	"r_str_replace_char ( p , '=' , '-' )"		5265244	0					
ANR	5265579	Callee	r_str_replace_char		5265244	0					
ANR	5265580	Identifier	r_str_replace_char		5265244	0					
ANR	5265581	ArgumentList	p		5265244	1					
ANR	5265582	Argument	p		5265244	0					
ANR	5265583	Identifier	p		5265244	0					
ANR	5265584	Argument	'='		5265244	1					
ANR	5265585	PrimaryExpression	'='		5265244	0					
ANR	5265586	Argument	'-'		5265244	2					
ANR	5265587	PrimaryExpression	'-'		5265244	0					
ANR	5265588	ExpressionStatement	"n = r_num_math ( num , p )"	613:4:12837:12860	5265244	5	True				
ANR	5265589	AssignmentExpression	"n = r_num_math ( num , p )"		5265244	0		=			
ANR	5265590	Identifier	n		5265244	0					
ANR	5265591	CallExpression	"r_num_math ( num , p )"		5265244	1					
ANR	5265592	Callee	r_num_math		5265244	0					
ANR	5265593	Identifier	r_num_math		5265244	0					
ANR	5265594	ArgumentList	num		5265244	1					
ANR	5265595	Argument	num		5265244	0					
ANR	5265596	Identifier	num		5265244	0					
ANR	5265597	Argument	p		5265244	1					
ANR	5265598	Identifier	p		5265244	0					
ANR	5265599	IfStatement	if ( n )		5265244	6					
ANR	5265600	Condition	n	614:8:12870:12870	5265244	0	True				
ANR	5265601	Identifier	n		5265244	0					
ANR	5265602	CompoundStatement		61:11:1107:1107	5265244	1					
ANR	5265603	GotoStatement	goto fail ;	615:5:12880:12889	5265244	0	True				
ANR	5265604	Identifier	fail		5265244	0					
ANR	5265605	ExpressionStatement	p = t + 1	619:2:12908:12917	5265244	4	True				
ANR	5265606	AssignmentExpression	p = t + 1		5265244	0		=			
ANR	5265607	Identifier	p		5265244	0					
ANR	5265608	AdditiveExpression	t + 1		5265244	1		+			
ANR	5265609	Identifier	t		5265244	0					
ANR	5265610	PrimaryExpression	1		5265244	1					
ANR	5265611	Condition	t	620:10:12929:12929	5265244	1	True				
ANR	5265612	Identifier	t		5265244	0					
ANR	5265613	ExpressionStatement	res = 1	621:1:12934:12941	5265244	5	True				
ANR	5265614	AssignmentExpression	res = 1		5265244	0		=			
ANR	5265615	Identifier	res		5265244	0					
ANR	5265616	PrimaryExpression	1		5265244	1					
ANR	5265617	Label	fail :	622:0:12943:12947	5265244	6	True				
ANR	5265618	Identifier	fail		5265244	0					
ANR	5265619	ExpressionStatement	free ( s )	623:1:12950:12958	5265244	7	True				
ANR	5265620	CallExpression	free ( s )		5265244	0					
ANR	5265621	Callee	free		5265244	0					
ANR	5265622	Identifier	free		5265244	0					
ANR	5265623	ArgumentList	s		5265244	1					
ANR	5265624	Argument	s		5265244	0					
ANR	5265625	Identifier	s		5265244	0					
ANR	5265626	ReturnStatement	return res ;	624:1:12961:12971	5265244	8	True				
ANR	5265627	Identifier	res		5265244	0					
ANR	5265628	ReturnType	R_API int		5265244	1					
ANR	5265629	Identifier	r_num_conditional		5265244	2					
ANR	5265630	ParameterList	"RNum * num , const char * str"		5265244	3					
ANR	5265631	Parameter	RNum * num	554:28:11737:11745	5265244	0	True				
ANR	5265632	ParameterType	RNum *		5265244	0					
ANR	5265633	Identifier	num		5265244	1					
ANR	5265634	Parameter	const char * str	554:39:11748:11762	5265244	1	True				
ANR	5265635	ParameterType	const char *		5265244	0					
ANR	5265636	Identifier	str		5265244	1					
ANR	5265637	CFGEntryNode	ENTRY		5265244		True				
ANR	5265638	CFGExitNode	EXIT		5265244		True				
ANR	5265639	Symbol	res		5265244						
ANR	5265640	Symbol	a		5265244						
ANR	5265641	Symbol	b		5265244						
ANR	5265642	Symbol	* lgt		5265244						
ANR	5265643	Symbol	num		5265244						
ANR	5265644	Symbol	strchr		5265244						
ANR	5265645	Symbol	n		5265244						
ANR	5265646	Symbol	r_num_math		5265244						
ANR	5265647	Symbol	str		5265244						
ANR	5265648	Symbol	p		5265244						
ANR	5265649	Symbol	s		5265244						
ANR	5265650	Symbol	t		5265244						
ANR	5265651	Symbol	strstr		5265244						
ANR	5265652	Symbol	lgt		5265244						
ANR	5265653	Symbol	strdup		5265244						
ANR	5265654	Symbol	* t		5265244						
ANR	5265655	Function	r_num_is_valid_input	627:0:12976:13224							
ANR	5265656	FunctionDef	"r_num_is_valid_input (RNum * num , const char * input_value)"		5265655	0					
ANR	5265657	CompoundStatement		627:67:13043:13224	5265655	0					
ANR	5265658	IdentifierDeclStatement	"ut64 value = input_value ? r_num_math ( num , input_value ) : 0 ;"	628:1:13046:13106	5265655	0	True				
ANR	5265659	IdentifierDecl	"value = input_value ? r_num_math ( num , input_value ) : 0"		5265655	0					
ANR	5265660	IdentifierDeclType	ut64		5265655	0					
ANR	5265661	Identifier	value		5265655	1					
ANR	5265662	AssignmentExpression	"value = input_value ? r_num_math ( num , input_value ) : 0"		5265655	2		=			
ANR	5265663	Identifier	value		5265655	0					
ANR	5265664	ConditionalExpression	"input_value ? r_num_math ( num , input_value ) : 0"		5265655	1					
ANR	5265665	Condition	input_value		5265655	0					
ANR	5265666	Identifier	input_value		5265655	0					
ANR	5265667	CallExpression	"r_num_math ( num , input_value )"		5265655	1					
ANR	5265668	Callee	r_num_math		5265655	0					
ANR	5265669	Identifier	r_num_math		5265655	0					
ANR	5265670	ArgumentList	num		5265655	1					
ANR	5265671	Argument	num		5265655	0					
ANR	5265672	Identifier	num		5265655	0					
ANR	5265673	Argument	input_value		5265655	1					
ANR	5265674	Identifier	input_value		5265655	0					
ANR	5265675	PrimaryExpression	0		5265655	2					
ANR	5265676	ReturnStatement	return ! ( value == 0 && input_value && * input_value != '0' ) || ! ( value == 0 && input_value && * input_value != '@' ) ;	629:1:13109:13222	5265655	1	True				
ANR	5265677	OrExpression	! ( value == 0 && input_value && * input_value != '0' ) || ! ( value == 0 && input_value && * input_value != '@' )		5265655	0		||			
ANR	5265678	UnaryOperationExpression	! ( value == 0 && input_value && * input_value != '0' )		5265655	0					
ANR	5265679	UnaryOperator	!		5265655	0					
ANR	5265680	AndExpression	value == 0 && input_value && * input_value != '0'		5265655	1		&&			
ANR	5265681	EqualityExpression	value == 0		5265655	0		==			
ANR	5265682	Identifier	value		5265655	0					
ANR	5265683	PrimaryExpression	0		5265655	1					
ANR	5265684	AndExpression	input_value && * input_value != '0'		5265655	1		&&			
ANR	5265685	Identifier	input_value		5265655	0					
ANR	5265686	EqualityExpression	* input_value != '0'		5265655	1		!=			
ANR	5265687	UnaryOperationExpression	* input_value		5265655	0					
ANR	5265688	UnaryOperator	*		5265655	0					
ANR	5265689	Identifier	input_value		5265655	1					
ANR	5265690	PrimaryExpression	'0'		5265655	1					
ANR	5265691	UnaryOperationExpression	! ( value == 0 && input_value && * input_value != '@' )		5265655	1					
ANR	5265692	UnaryOperator	!		5265655	0					
ANR	5265693	AndExpression	value == 0 && input_value && * input_value != '@'		5265655	1		&&			
ANR	5265694	EqualityExpression	value == 0		5265655	0		==			
ANR	5265695	Identifier	value		5265655	0					
ANR	5265696	PrimaryExpression	0		5265655	1					
ANR	5265697	AndExpression	input_value && * input_value != '@'		5265655	1		&&			
ANR	5265698	Identifier	input_value		5265655	0					
ANR	5265699	EqualityExpression	* input_value != '@'		5265655	1		!=			
ANR	5265700	UnaryOperationExpression	* input_value		5265655	0					
ANR	5265701	UnaryOperator	*		5265655	0					
ANR	5265702	Identifier	input_value		5265655	1					
ANR	5265703	PrimaryExpression	'@'		5265655	1					
ANR	5265704	ReturnType	R_API int		5265655	1					
ANR	5265705	Identifier	r_num_is_valid_input		5265655	2					
ANR	5265706	ParameterList	"RNum * num , const char * input_value"		5265655	3					
ANR	5265707	Parameter	RNum * num	627:31:13007:13015	5265655	0	True				
ANR	5265708	ParameterType	RNum *		5265655	0					
ANR	5265709	Identifier	num		5265655	1					
ANR	5265710	Parameter	const char * input_value	627:42:13018:13040	5265655	1	True				
ANR	5265711	ParameterType	const char *		5265655	0					
ANR	5265712	Identifier	input_value		5265655	1					
ANR	5265713	CFGEntryNode	ENTRY		5265655		True				
ANR	5265714	CFGExitNode	EXIT		5265655		True				
ANR	5265715	Symbol	* input_value		5265655						
ANR	5265716	Symbol	num		5265655						
ANR	5265717	Symbol	input_value		5265655						
ANR	5265718	Symbol	value		5265655						
ANR	5265719	Symbol	r_num_math		5265655						
ANR	5265720	Function	r_num_get_input_value	632:0:13227:13376							
ANR	5265721	FunctionDef	"r_num_get_input_value (RNum * num , const char * input_value)"		5265720	0					
ANR	5265722	CompoundStatement		632:69:13296:13376	5265720	0					
ANR	5265723	IdentifierDeclStatement	"ut64 value = input_value ? r_num_math ( num , input_value ) : 0 ;"	633:1:13299:13359	5265720	0	True				
ANR	5265724	IdentifierDecl	"value = input_value ? r_num_math ( num , input_value ) : 0"		5265720	0					
ANR	5265725	IdentifierDeclType	ut64		5265720	0					
ANR	5265726	Identifier	value		5265720	1					
ANR	5265727	AssignmentExpression	"value = input_value ? r_num_math ( num , input_value ) : 0"		5265720	2		=			
ANR	5265728	Identifier	value		5265720	0					
ANR	5265729	ConditionalExpression	"input_value ? r_num_math ( num , input_value ) : 0"		5265720	1					
ANR	5265730	Condition	input_value		5265720	0					
ANR	5265731	Identifier	input_value		5265720	0					
ANR	5265732	CallExpression	"r_num_math ( num , input_value )"		5265720	1					
ANR	5265733	Callee	r_num_math		5265720	0					
ANR	5265734	Identifier	r_num_math		5265720	0					
ANR	5265735	ArgumentList	num		5265720	1					
ANR	5265736	Argument	num		5265720	0					
ANR	5265737	Identifier	num		5265720	0					
ANR	5265738	Argument	input_value		5265720	1					
ANR	5265739	Identifier	input_value		5265720	0					
ANR	5265740	PrimaryExpression	0		5265720	2					
ANR	5265741	ReturnStatement	return value ;	634:1:13362:13374	5265720	1	True				
ANR	5265742	Identifier	value		5265720	0					
ANR	5265743	ReturnType	R_API ut64		5265720	1					
ANR	5265744	Identifier	r_num_get_input_value		5265720	2					
ANR	5265745	ParameterList	"RNum * num , const char * input_value"		5265720	3					
ANR	5265746	Parameter	RNum * num	632:33:13260:13268	5265720	0	True				
ANR	5265747	ParameterType	RNum *		5265720	0					
ANR	5265748	Identifier	num		5265720	1					
ANR	5265749	Parameter	const char * input_value	632:44:13271:13293	5265720	1	True				
ANR	5265750	ParameterType	const char *		5265720	0					
ANR	5265751	Identifier	input_value		5265720	1					
ANR	5265752	CFGEntryNode	ENTRY		5265720		True				
ANR	5265753	CFGExitNode	EXIT		5265720		True				
ANR	5265754	Symbol	num		5265720						
ANR	5265755	Symbol	input_value		5265720						
ANR	5265756	Symbol	value		5265720						
ANR	5265757	Symbol	r_num_math		5265720						
ANR	5265758	Function	escape_char	638:0:13467:13833							
ANR	5265759	FunctionDef	"escape_char (char * dst , char byte)"		5265758	0					
ANR	5265760	CompoundStatement		638:45:13512:13833	5265758	0					
ANR	5265761	IdentifierDeclStatement	"const char escape_map [ ] = ""abtnvfr"" ;"	639:1:13515:13550	5265758	0	True				
ANR	5265762	IdentifierDecl	"escape_map [ ] = ""abtnvfr"""		5265758	0					
ANR	5265763	IdentifierDeclType	const char [ ]		5265758	0					
ANR	5265764	Identifier	escape_map		5265758	1					
ANR	5265765	AssignmentExpression	"escape_map [ ] = ""abtnvfr"""		5265758	2		=			
ANR	5265766	Identifier	escape_map		5265758	0					
ANR	5265767	PrimaryExpression	"""abtnvfr"""		5265758	1					
ANR	5265768	IfStatement	if ( byte >= 7 && byte <= 13 )		5265758	1					
ANR	5265769	Condition	byte >= 7 && byte <= 13	640:5:13557:13579	5265758	0	True				
ANR	5265770	AndExpression	byte >= 7 && byte <= 13		5265758	0		&&			
ANR	5265771	RelationalExpression	byte >= 7		5265758	0		>=			
ANR	5265772	Identifier	byte		5265758	0					
ANR	5265773	PrimaryExpression	7		5265758	1					
ANR	5265774	RelationalExpression	byte <= 13		5265758	1		<=			
ANR	5265775	Identifier	byte		5265758	0					
ANR	5265776	PrimaryExpression	13		5265758	1					
ANR	5265777	CompoundStatement		3:30:69:69	5265758	1					
ANR	5265778	ExpressionStatement	* ( dst ++ ) = '\\\\'	641:2:13586:13601	5265758	0	True				
ANR	5265779	AssignmentExpression	* ( dst ++ ) = '\\\\'		5265758	0		=			
ANR	5265780	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265781	UnaryOperator	*		5265758	0					
ANR	5265782	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265783	Identifier	dst		5265758	0					
ANR	5265784	IncDec	++		5265758	1					
ANR	5265785	PrimaryExpression	'\\\\'		5265758	1					
ANR	5265786	ExpressionStatement	* ( dst ++ ) = escape_map [ byte - 7 ]	642:2:13605:13637	5265758	1	True				
ANR	5265787	AssignmentExpression	* ( dst ++ ) = escape_map [ byte - 7 ]		5265758	0		=			
ANR	5265788	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265789	UnaryOperator	*		5265758	0					
ANR	5265790	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265791	Identifier	dst		5265758	0					
ANR	5265792	IncDec	++		5265758	1					
ANR	5265793	ArrayIndexing	escape_map [ byte - 7 ]		5265758	1					
ANR	5265794	Identifier	escape_map		5265758	0					
ANR	5265795	AdditiveExpression	byte - 7		5265758	1		-			
ANR	5265796	Identifier	byte		5265758	0					
ANR	5265797	PrimaryExpression	7		5265758	1					
ANR	5265798	ExpressionStatement	* dst = 0	643:2:13641:13649	5265758	2	True				
ANR	5265799	AssignmentExpression	* dst = 0		5265758	0		=			
ANR	5265800	UnaryOperationExpression	* dst		5265758	0					
ANR	5265801	UnaryOperator	*		5265758	0					
ANR	5265802	Identifier	dst		5265758	1					
ANR	5265803	PrimaryExpression	0		5265758	1					
ANR	5265804	ReturnStatement	return 2 ;	644:2:13653:13661	5265758	3	True				
ANR	5265805	PrimaryExpression	2		5265758	0					
ANR	5265806	ElseStatement	else		5265758	0					
ANR	5265807	IfStatement	if ( byte )		5265758	0					
ANR	5265808	Condition	byte	645:12:13675:13678	5265758	0	True				
ANR	5265809	Identifier	byte		5265758	0					
ANR	5265810	CompoundStatement		8:18:168:168	5265758	1					
ANR	5265811	ExpressionStatement	* ( dst ++ ) = '\\\\'	646:2:13685:13700	5265758	0	True				
ANR	5265812	AssignmentExpression	* ( dst ++ ) = '\\\\'		5265758	0		=			
ANR	5265813	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265814	UnaryOperator	*		5265758	0					
ANR	5265815	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265816	Identifier	dst		5265758	0					
ANR	5265817	IncDec	++		5265758	1					
ANR	5265818	PrimaryExpression	'\\\\'		5265758	1					
ANR	5265819	ExpressionStatement	* ( dst ++ ) = 'x'	647:2:13704:13718	5265758	1	True				
ANR	5265820	AssignmentExpression	* ( dst ++ ) = 'x'		5265758	0		=			
ANR	5265821	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265822	UnaryOperator	*		5265758	0					
ANR	5265823	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265824	Identifier	dst		5265758	0					
ANR	5265825	IncDec	++		5265758	1					
ANR	5265826	PrimaryExpression	'x'		5265758	1					
ANR	5265827	ExpressionStatement	* ( dst ++ ) = NIBBLE_TO_HEX ( byte >> 4 )	648:2:13722:13758	5265758	2	True				
ANR	5265828	AssignmentExpression	* ( dst ++ ) = NIBBLE_TO_HEX ( byte >> 4 )		5265758	0		=			
ANR	5265829	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265830	UnaryOperator	*		5265758	0					
ANR	5265831	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265832	Identifier	dst		5265758	0					
ANR	5265833	IncDec	++		5265758	1					
ANR	5265834	CallExpression	NIBBLE_TO_HEX ( byte >> 4 )		5265758	1					
ANR	5265835	Callee	NIBBLE_TO_HEX		5265758	0					
ANR	5265836	Identifier	NIBBLE_TO_HEX		5265758	0					
ANR	5265837	ArgumentList	byte >> 4		5265758	1					
ANR	5265838	Argument	byte >> 4		5265758	0					
ANR	5265839	ShiftExpression	byte >> 4		5265758	0		>>			
ANR	5265840	Identifier	byte		5265758	0					
ANR	5265841	PrimaryExpression	4		5265758	1					
ANR	5265842	ExpressionStatement	* ( dst ++ ) = NIBBLE_TO_HEX ( byte )	649:2:13762:13793	5265758	3	True				
ANR	5265843	AssignmentExpression	* ( dst ++ ) = NIBBLE_TO_HEX ( byte )		5265758	0		=			
ANR	5265844	UnaryOperationExpression	* ( dst ++ )		5265758	0					
ANR	5265845	UnaryOperator	*		5265758	0					
ANR	5265846	PostIncDecOperationExpression	dst ++		5265758	1					
ANR	5265847	Identifier	dst		5265758	0					
ANR	5265848	IncDec	++		5265758	1					
ANR	5265849	CallExpression	NIBBLE_TO_HEX ( byte )		5265758	1					
ANR	5265850	Callee	NIBBLE_TO_HEX		5265758	0					
ANR	5265851	Identifier	NIBBLE_TO_HEX		5265758	0					
ANR	5265852	ArgumentList	byte		5265758	1					
ANR	5265853	Argument	byte		5265758	0					
ANR	5265854	Identifier	byte		5265758	0					
ANR	5265855	ExpressionStatement	* dst = 0	650:2:13797:13805	5265758	4	True				
ANR	5265856	AssignmentExpression	* dst = 0		5265758	0		=			
ANR	5265857	UnaryOperationExpression	* dst		5265758	0					
ANR	5265858	UnaryOperator	*		5265758	0					
ANR	5265859	Identifier	dst		5265758	1					
ANR	5265860	PrimaryExpression	0		5265758	1					
ANR	5265861	ReturnStatement	return 4 ;	651:2:13809:13817	5265758	5	True				
ANR	5265862	PrimaryExpression	4		5265758	0					
ANR	5265863	ReturnStatement	return 0 ;	653:1:13823:13831	5265758	2	True				
ANR	5265864	PrimaryExpression	0		5265758	0					
ANR	5265865	ReturnType	static int		5265758	1					
ANR	5265866	Identifier	escape_char		5265758	2					
ANR	5265867	ParameterList	"char * dst , char byte"		5265758	3					
ANR	5265868	Parameter	char * dst	638:23:13490:13498	5265758	0	True				
ANR	5265869	ParameterType	char *		5265758	0					
ANR	5265870	Identifier	dst		5265758	1					
ANR	5265871	Parameter	char byte	638:34:13501:13509	5265758	1	True				
ANR	5265872	ParameterType	char		5265758	0					
ANR	5265873	Identifier	byte		5265758	1					
ANR	5265874	CFGEntryNode	ENTRY		5265758		True				
ANR	5265875	CFGExitNode	EXIT		5265758		True				
ANR	5265876	Symbol	* dst		5265758						
ANR	5265877	Symbol	* byte		5265758						
ANR	5265878	Symbol	dst		5265758						
ANR	5265879	Symbol	byte		5265758						
ANR	5265880	Symbol	* escape_map		5265758						
ANR	5265881	Symbol	NIBBLE_TO_HEX		5265758						
ANR	5265882	Symbol	* ( dst ++ )		5265758						
ANR	5265883	Symbol	escape_map		5265758						
ANR	5265884	Function	r_num_as_string	656:0:13836:14442							
ANR	5265885	FunctionDef	"r_num_as_string (RNum * ___ , ut64 n , bool printable_only)"		5265884	0					
ANR	5265886	CompoundStatement		656:68:13904:14442	5265884	0					
ANR	5265887	IdentifierDeclStatement	char str [ 34 ] ;	657:1:13907:13919	5265884	0	True				
ANR	5265888	IdentifierDecl	str [ 34 ]		5265884	0					
ANR	5265889	IdentifierDeclType	char [ 34 ]		5265884	0					
ANR	5265890	Identifier	str		5265884	1					
ANR	5265891	PrimaryExpression	34		5265884	2					
ANR	5265892	IdentifierDeclStatement	"int stri , ret = 0 , off = 0 ;"	658:1:13957:13983	5265884	1	True				
ANR	5265893	IdentifierDecl	stri		5265884	0					
ANR	5265894	IdentifierDeclType	int		5265884	0					
ANR	5265895	Identifier	stri		5265884	1					
ANR	5265896	IdentifierDecl	ret = 0		5265884	1					
ANR	5265897	IdentifierDeclType	int		5265884	0					
ANR	5265898	Identifier	ret		5265884	1					
ANR	5265899	AssignmentExpression	ret = 0		5265884	2		=			
ANR	5265900	Identifier	ret		5265884	0					
ANR	5265901	PrimaryExpression	0		5265884	1					
ANR	5265902	IdentifierDecl	off = 0		5265884	2					
ANR	5265903	IdentifierDeclType	int		5265884	0					
ANR	5265904	Identifier	off		5265884	1					
ANR	5265905	AssignmentExpression	off = 0		5265884	2		=			
ANR	5265906	Identifier	off		5265884	0					
ANR	5265907	PrimaryExpression	0		5265884	1					
ANR	5265908	IdentifierDeclStatement	int len = sizeof ( ut64 ) ;	659:1:13986:14009	5265884	2	True				
ANR	5265909	IdentifierDecl	len = sizeof ( ut64 )		5265884	0					
ANR	5265910	IdentifierDeclType	int		5265884	0					
ANR	5265911	Identifier	len		5265884	1					
ANR	5265912	AssignmentExpression	len = sizeof ( ut64 )		5265884	2		=			
ANR	5265913	Identifier	len		5265884	0					
ANR	5265914	SizeofExpression	sizeof ( ut64 )		5265884	1					
ANR	5265915	Sizeof	sizeof		5265884	0					
ANR	5265916	SizeofOperand	ut64		5265884	1					
ANR	5265917	IdentifierDeclStatement	ut64 num = n ;	660:1:14012:14024	5265884	3	True				
ANR	5265918	IdentifierDecl	num = n		5265884	0					
ANR	5265919	IdentifierDeclType	ut64		5265884	0					
ANR	5265920	Identifier	num		5265884	1					
ANR	5265921	AssignmentExpression	num = n		5265884	2		=			
ANR	5265922	Identifier	n		5265884	0					
ANR	5265923	Identifier	n		5265884	1					
ANR	5265924	ExpressionStatement	str [ stri = 0 ] = 0	661:1:14027:14042	5265884	4	True				
ANR	5265925	AssignmentExpression	str [ stri = 0 ] = 0		5265884	0		=			
ANR	5265926	ArrayIndexing	str [ stri = 0 ]		5265884	0					
ANR	5265927	Identifier	str		5265884	0					
ANR	5265928	AssignmentExpression	stri = 0		5265884	1		=			
ANR	5265929	Identifier	stri		5265884	0					
ANR	5265930	PrimaryExpression	0		5265884	1					
ANR	5265931	PrimaryExpression	0		5265884	1					
ANR	5265932	WhileStatement	while ( len -- )		5265884	5					
ANR	5265933	Condition	len --	662:8:14052:14056	5265884	0	True				
ANR	5265934	PostIncDecOperationExpression	len --		5265884	0					
ANR	5265935	Identifier	len		5265884	0					
ANR	5265936	IncDec	--		5265884	1					
ANR	5265937	CompoundStatement		8:2:158:180	5265884	1					
ANR	5265938	IdentifierDeclStatement	char ch = ( num & 0xff ) ;	663:2:14063:14085	5265884	0	True				
ANR	5265939	IdentifierDecl	ch = ( num & 0xff )		5265884	0					
ANR	5265940	IdentifierDeclType	char		5265884	0					
ANR	5265941	Identifier	ch		5265884	1					
ANR	5265942	AssignmentExpression	ch = ( num & 0xff )		5265884	2		=			
ANR	5265943	Identifier	ch		5265884	0					
ANR	5265944	BitAndExpression	num & 0xff		5265884	1		&			
ANR	5265945	Identifier	num		5265884	0					
ANR	5265946	PrimaryExpression	0xff		5265884	1					
ANR	5265947	IfStatement	if ( ch >= 32 && ch < 127 )		5265884	1					
ANR	5265948	Condition	ch >= 32 && ch < 127	664:6:14093:14112	5265884	0	True				
ANR	5265949	AndExpression	ch >= 32 && ch < 127		5265884	0		&&			
ANR	5265950	RelationalExpression	ch >= 32		5265884	0		>=			
ANR	5265951	Identifier	ch		5265884	0					
ANR	5265952	PrimaryExpression	32		5265884	1					
ANR	5265953	RelationalExpression	ch < 127		5265884	1		<			
ANR	5265954	Identifier	ch		5265884	0					
ANR	5265955	PrimaryExpression	127		5265884	1					
ANR	5265956	CompoundStatement		9:28:210:210	5265884	1					
ANR	5265957	ExpressionStatement	str [ stri ++ ] = ch	665:3:14120:14136	5265884	0	True				
ANR	5265958	AssignmentExpression	str [ stri ++ ] = ch		5265884	0		=			
ANR	5265959	ArrayIndexing	str [ stri ++ ]		5265884	0					
ANR	5265960	Identifier	str		5265884	0					
ANR	5265961	PostIncDecOperationExpression	stri ++		5265884	1					
ANR	5265962	Identifier	stri		5265884	0					
ANR	5265963	IncDec	++		5265884	1					
ANR	5265964	Identifier	ch		5265884	1					
ANR	5265965	ExpressionStatement	str [ stri ] = 0	666:3:14141:14154	5265884	1	True				
ANR	5265966	AssignmentExpression	str [ stri ] = 0		5265884	0		=			
ANR	5265967	ArrayIndexing	str [ stri ]		5265884	0					
ANR	5265968	Identifier	str		5265884	0					
ANR	5265969	Identifier	stri		5265884	1					
ANR	5265970	PrimaryExpression	0		5265884	1					
ANR	5265971	ElseStatement	else		5265884	0					
ANR	5265972	IfStatement	"if ( ! printable_only && ( off = escape_char ( str + stri , ch ) ) != 0 )"		5265884	0					
ANR	5265973	Condition	"! printable_only && ( off = escape_char ( str + stri , ch ) ) != 0"	667:13:14169:14228	5265884	0	True				
ANR	5265974	AndExpression	"! printable_only && ( off = escape_char ( str + stri , ch ) ) != 0"		5265884	0		&&			
ANR	5265975	UnaryOperationExpression	! printable_only		5265884	0					
ANR	5265976	UnaryOperator	!		5265884	0					
ANR	5265977	Identifier	printable_only		5265884	1					
ANR	5265978	EqualityExpression	"( off = escape_char ( str + stri , ch ) ) != 0"		5265884	1		!=			
ANR	5265979	AssignmentExpression	"off = escape_char ( str + stri , ch )"		5265884	0		=			
ANR	5265980	Identifier	off		5265884	0					
ANR	5265981	CallExpression	"escape_char ( str + stri , ch )"		5265884	1					
ANR	5265982	Callee	escape_char		5265884	0					
ANR	5265983	Identifier	escape_char		5265884	0					
ANR	5265984	ArgumentList	str + stri		5265884	1					
ANR	5265985	Argument	str + stri		5265884	0					
ANR	5265986	AdditiveExpression	str + stri		5265884	0		+			
ANR	5265987	Identifier	str		5265884	0					
ANR	5265988	Identifier	stri		5265884	1					
ANR	5265989	Argument	ch		5265884	1					
ANR	5265990	Identifier	ch		5265884	0					
ANR	5265991	PrimaryExpression	0		5265884	1					
ANR	5265992	CompoundStatement		12:75:326:326	5265884	1					
ANR	5265993	ExpressionStatement	stri += off	668:3:14236:14247	5265884	0	True				
ANR	5265994	AssignmentExpression	stri += off		5265884	0		+=			
ANR	5265995	Identifier	stri		5265884	0					
ANR	5265996	Identifier	off		5265884	1					
ANR	5265997	ElseStatement	else		5265884	0					
ANR	5265998	CompoundStatement		14:9:353:353	5265884	0					
ANR	5265999	IfStatement	if ( ch )		5265884	0					
ANR	5266000	Condition	ch	670:7:14267:14268	5265884	0	True				
ANR	5266001	Identifier	ch		5265884	0					
ANR	5266002	CompoundStatement		15:11:366:366	5265884	1					
ANR	5266003	ReturnStatement	return NULL ;	671:4:14277:14288	5265884	0	True				
ANR	5266004	Identifier	NULL		5265884	0					
ANR	5266005	ExpressionStatement	ret |= ( num & 0xff )	674:2:14301:14320	5265884	2	True				
ANR	5266006	AssignmentExpression	ret |= ( num & 0xff )		5265884	0		|=			
ANR	5266007	Identifier	ret		5265884	0					
ANR	5266008	BitAndExpression	num & 0xff		5265884	1		&			
ANR	5266009	Identifier	num		5265884	0					
ANR	5266010	PrimaryExpression	0xff		5265884	1					
ANR	5266011	ExpressionStatement	num >>= 8	675:2:14324:14333	5265884	3	True				
ANR	5266012	AssignmentExpression	num >>= 8		5265884	0		>>=			
ANR	5266013	Identifier	num		5265884	0					
ANR	5266014	PrimaryExpression	8		5265884	1					
ANR	5266015	IfStatement	if ( ret )		5265884	6					
ANR	5266016	Condition	ret	677:5:14343:14345	5265884	0	True				
ANR	5266017	Identifier	ret		5265884	0					
ANR	5266018	CompoundStatement		22:10:443:443	5265884	1					
ANR	5266019	ReturnStatement	return strdup ( str ) ;	678:2:14352:14371	5265884	0	True				
ANR	5266020	CallExpression	strdup ( str )		5265884	0					
ANR	5266021	Callee	strdup		5265884	0					
ANR	5266022	Identifier	strdup		5265884	0					
ANR	5266023	ArgumentList	str		5265884	1					
ANR	5266024	Argument	str		5265884	0					
ANR	5266025	Identifier	str		5265884	0					
ANR	5266026	IfStatement	if ( ! printable_only )		5265884	7					
ANR	5266027	Condition	! printable_only	680:5:14381:14395	5265884	0	True				
ANR	5266028	UnaryOperationExpression	! printable_only		5265884	0					
ANR	5266029	UnaryOperator	!		5265884	0					
ANR	5266030	Identifier	printable_only		5265884	1					
ANR	5266031	CompoundStatement		25:22:493:493	5265884	1					
ANR	5266032	ReturnStatement	"return strdup ( ""\\\\0"" ) ;"	681:2:14402:14423	5265884	0	True				
ANR	5266033	CallExpression	"strdup ( ""\\\\0"" )"		5265884	0					
ANR	5266034	Callee	strdup		5265884	0					
ANR	5266035	Identifier	strdup		5265884	0					
ANR	5266036	ArgumentList	"""\\\\0"""		5265884	1					
ANR	5266037	Argument	"""\\\\0"""		5265884	0					
ANR	5266038	PrimaryExpression	"""\\\\0"""		5265884	0					
ANR	5266039	ReturnStatement	return NULL ;	683:1:14429:14440	5265884	8	True				
ANR	5266040	Identifier	NULL		5265884	0					
ANR	5266041	ReturnType	R_API char *		5265884	1					
ANR	5266042	Identifier	r_num_as_string		5265884	2					
ANR	5266043	ParameterList	"RNum * ___ , ut64 n , bool printable_only"		5265884	3					
ANR	5266044	Parameter	RNum * ___	656:28:13864:13872	5265884	0	True				
ANR	5266045	ParameterType	RNum *		5265884	0					
ANR	5266046	Identifier	___		5265884	1					
ANR	5266047	Parameter	ut64 n	656:39:13875:13880	5265884	1	True				
ANR	5266048	ParameterType	ut64		5265884	0					
ANR	5266049	Identifier	n		5265884	1					
ANR	5266050	Parameter	bool printable_only	656:47:13883:13901	5265884	2	True				
ANR	5266051	ParameterType	bool		5265884	0					
ANR	5266052	Identifier	printable_only		5265884	1					
ANR	5266053	CFGEntryNode	ENTRY		5265884		True				
ANR	5266054	CFGExitNode	EXIT		5265884		True				
ANR	5266055	Symbol	ret		5265884						
ANR	5266056	Symbol	NULL		5265884						
ANR	5266057	Symbol	ch		5265884						
ANR	5266058	Symbol	num		5265884						
ANR	5266059	Symbol	escape_char		5265884						
ANR	5266060	Symbol	* stri		5265884						
ANR	5266061	Symbol	n		5265884						
ANR	5266062	Symbol	off		5265884						
ANR	5266063	Symbol	stri		5265884						
ANR	5266064	Symbol	printable_only		5265884						
ANR	5266065	Symbol	str		5265884						
ANR	5266066	Symbol	len		5265884						
ANR	5266067	Symbol	* str		5265884						
ANR	5266068	Symbol	strdup		5265884						
ANR	5266069	Symbol	___		5265884						
ANR	5266070	Function	r_is_valid_input_num_value	687:0:14459:14657							
ANR	5266071	FunctionDef	"r_is_valid_input_num_value (RNum * num , const char * input_value)"		5266070	0					
ANR	5266072	CompoundStatement		687:72:14531:14657	5266070	0					
ANR	5266073	IdentifierDeclStatement	"ut64 value = input_value ? r_num_math ( num , input_value ) : 0 ;"	688:1:14534:14594	5266070	0	True				
ANR	5266074	IdentifierDecl	"value = input_value ? r_num_math ( num , input_value ) : 0"		5266070	0					
ANR	5266075	IdentifierDeclType	ut64		5266070	0					
ANR	5266076	Identifier	value		5266070	1					
ANR	5266077	AssignmentExpression	"value = input_value ? r_num_math ( num , input_value ) : 0"		5266070	2		=			
ANR	5266078	Identifier	value		5266070	0					
ANR	5266079	ConditionalExpression	"input_value ? r_num_math ( num , input_value ) : 0"		5266070	1					
ANR	5266080	Condition	input_value		5266070	0					
ANR	5266081	Identifier	input_value		5266070	0					
ANR	5266082	CallExpression	"r_num_math ( num , input_value )"		5266070	1					
ANR	5266083	Callee	r_num_math		5266070	0					
ANR	5266084	Identifier	r_num_math		5266070	0					
ANR	5266085	ArgumentList	num		5266070	1					
ANR	5266086	Argument	num		5266070	0					
ANR	5266087	Identifier	num		5266070	0					
ANR	5266088	Argument	input_value		5266070	1					
ANR	5266089	Identifier	input_value		5266070	0					
ANR	5266090	PrimaryExpression	0		5266070	2					
ANR	5266091	ReturnStatement	return ! ( value == 0 && input_value && * input_value == '0' ) ;	689:1:14597:14655	5266070	1	True				
ANR	5266092	UnaryOperationExpression	! ( value == 0 && input_value && * input_value == '0' )		5266070	0					
ANR	5266093	UnaryOperator	!		5266070	0					
ANR	5266094	AndExpression	value == 0 && input_value && * input_value == '0'		5266070	1		&&			
ANR	5266095	EqualityExpression	value == 0		5266070	0		==			
ANR	5266096	Identifier	value		5266070	0					
ANR	5266097	PrimaryExpression	0		5266070	1					
ANR	5266098	AndExpression	input_value && * input_value == '0'		5266070	1		&&			
ANR	5266099	Identifier	input_value		5266070	0					
ANR	5266100	EqualityExpression	* input_value == '0'		5266070	1		==			
ANR	5266101	UnaryOperationExpression	* input_value		5266070	0					
ANR	5266102	UnaryOperator	*		5266070	0					
ANR	5266103	Identifier	input_value		5266070	1					
ANR	5266104	PrimaryExpression	'0'		5266070	1					
ANR	5266105	ReturnType	R_API int		5266070	1					
ANR	5266106	Identifier	r_is_valid_input_num_value		5266070	2					
ANR	5266107	ParameterList	"RNum * num , const char * input_value"		5266070	3					
ANR	5266108	Parameter	RNum * num	687:37:14496:14504	5266070	0	True				
ANR	5266109	ParameterType	RNum *		5266070	0					
ANR	5266110	Identifier	num		5266070	1					
ANR	5266111	Parameter	const char * input_value	687:48:14507:14529	5266070	1	True				
ANR	5266112	ParameterType	const char *		5266070	0					
ANR	5266113	Identifier	input_value		5266070	1					
ANR	5266114	CFGEntryNode	ENTRY		5266070		True				
ANR	5266115	CFGExitNode	EXIT		5266070		True				
ANR	5266116	Symbol	* input_value		5266070						
ANR	5266117	Symbol	num		5266070						
ANR	5266118	Symbol	input_value		5266070						
ANR	5266119	Symbol	value		5266070						
ANR	5266120	Symbol	r_num_math		5266070						
ANR	5266121	Function	r_get_input_num_value	693:0:14674:14787							
ANR	5266122	FunctionDef	"r_get_input_num_value (RNum * num , const char * str)"		5266121	0					
ANR	5266123	CompoundStatement		693:61:14735:14787	5266121	0					
ANR	5266124	ReturnStatement	"return ( str && * str ) ? r_num_math ( num , str ) : 0 ;"	694:1:14738:14785	5266121	0	True				
ANR	5266125	ConditionalExpression	"( str && * str ) ? r_num_math ( num , str ) : 0"		5266121	0					
ANR	5266126	Condition	str && * str		5266121	0					
ANR	5266127	AndExpression	str && * str		5266121	0		&&			
ANR	5266128	Identifier	str		5266121	0					
ANR	5266129	UnaryOperationExpression	* str		5266121	1					
ANR	5266130	UnaryOperator	*		5266121	0					
ANR	5266131	Identifier	str		5266121	1					
ANR	5266132	CallExpression	"r_num_math ( num , str )"		5266121	1					
ANR	5266133	Callee	r_num_math		5266121	0					
ANR	5266134	Identifier	r_num_math		5266121	0					
ANR	5266135	ArgumentList	num		5266121	1					
ANR	5266136	Argument	num		5266121	0					
ANR	5266137	Identifier	num		5266121	0					
ANR	5266138	Argument	str		5266121	1					
ANR	5266139	Identifier	str		5266121	0					
ANR	5266140	PrimaryExpression	0		5266121	2					
ANR	5266141	ReturnType	R_API ut64		5266121	1					
ANR	5266142	Identifier	r_get_input_num_value		5266121	2					
ANR	5266143	ParameterList	"RNum * num , const char * str"		5266121	3					
ANR	5266144	Parameter	RNum * num	693:33:14707:14715	5266121	0	True				
ANR	5266145	ParameterType	RNum *		5266121	0					
ANR	5266146	Identifier	num		5266121	1					
ANR	5266147	Parameter	const char * str	693:44:14718:14732	5266121	1	True				
ANR	5266148	ParameterType	const char *		5266121	0					
ANR	5266149	Identifier	str		5266121	1					
ANR	5266150	CFGEntryNode	ENTRY		5266121		True				
ANR	5266151	CFGExitNode	EXIT		5266121		True				
ANR	5266152	Symbol	str		5266121						
ANR	5266153	Symbol	num		5266121						
ANR	5266154	Symbol	* str		5266121						
ANR	5266155	Symbol	r_num_math		5266121						
ANR	5266156	Function	__nth_nibble	698:0:14804:14934							
ANR	5266157	FunctionDef	"__nth_nibble (ut64 n , ut32 i)"		5266156	0					
ANR	5266158	CompoundStatement		698:48:14852:14934	5266156	0					
ANR	5266159	IdentifierDeclStatement	int sz = ( sizeof ( n ) << 1 ) - 1 ;	699:1:14855:14885	5266156	0	True				
ANR	5266160	IdentifierDecl	sz = ( sizeof ( n ) << 1 ) - 1		5266156	0					
ANR	5266161	IdentifierDeclType	int		5266156	0					
ANR	5266162	Identifier	sz		5266156	1					
ANR	5266163	AssignmentExpression	sz = ( sizeof ( n ) << 1 ) - 1		5266156	2		=			
ANR	5266164	Identifier	sz		5266156	0					
ANR	5266165	AdditiveExpression	( sizeof ( n ) << 1 ) - 1		5266156	1		-			
ANR	5266166	ShiftExpression	sizeof ( n ) << 1		5266156	0		<<			
ANR	5266167	SizeofExpression	sizeof ( n )		5266156	0					
ANR	5266168	Sizeof	sizeof		5266156	0					
ANR	5266169	SizeofOperand	n		5266156	1					
ANR	5266170	PrimaryExpression	1		5266156	1					
ANR	5266171	PrimaryExpression	1		5266156	1					
ANR	5266172	IdentifierDeclStatement	int s = ( sz - i ) * 4 ;	700:1:14888:14908	5266156	1	True				
ANR	5266173	IdentifierDecl	s = ( sz - i ) * 4		5266156	0					
ANR	5266174	IdentifierDeclType	int		5266156	0					
ANR	5266175	Identifier	s		5266156	1					
ANR	5266176	AssignmentExpression	s = ( sz - i ) * 4		5266156	2		=			
ANR	5266177	Identifier	s		5266156	0					
ANR	5266178	MultiplicativeExpression	( sz - i ) * 4		5266156	1		*			
ANR	5266179	AdditiveExpression	sz - i		5266156	0		-			
ANR	5266180	Identifier	sz		5266156	0					
ANR	5266181	Identifier	i		5266156	1					
ANR	5266182	PrimaryExpression	4		5266156	1					
ANR	5266183	ReturnStatement	return ( n >> s ) & 0xf ;	701:1:14911:14932	5266156	2	True				
ANR	5266184	BitAndExpression	( n >> s ) & 0xf		5266156	0		&			
ANR	5266185	ShiftExpression	n >> s		5266156	0		>>			
ANR	5266186	Identifier	n		5266156	0					
ANR	5266187	Identifier	s		5266156	1					
ANR	5266188	PrimaryExpression	0xf		5266156	1					
ANR	5266189	ReturnType	static inline ut64		5266156	1					
ANR	5266190	Identifier	__nth_nibble		5266156	2					
ANR	5266191	ParameterList	"ut64 n , ut32 i"		5266156	3					
ANR	5266192	Parameter	ut64 n	698:32:14836:14841	5266156	0	True				
ANR	5266193	ParameterType	ut64		5266156	0					
ANR	5266194	Identifier	n		5266156	1					
ANR	5266195	Parameter	ut32 i	698:40:14844:14849	5266156	1	True				
ANR	5266196	ParameterType	ut32		5266156	0					
ANR	5266197	Identifier	i		5266156	1					
ANR	5266198	CFGEntryNode	ENTRY		5266156		True				
ANR	5266199	CFGExitNode	EXIT		5266156		True				
ANR	5266200	Symbol	s		5266156						
ANR	5266201	Symbol	sz		5266156						
ANR	5266202	Symbol	i		5266156						
ANR	5266203	Symbol	n		5266156						
ANR	5266204	Function	r_num_tail_base	704:0:14937:15333							
ANR	5266205	FunctionDef	"r_num_tail_base (RNum * num , ut64 addr , ut64 off)"		5266204	0					
ANR	5266206	CompoundStatement		704:59:14996:15333	5266204	0					
ANR	5266207	IdentifierDeclStatement	int i ;	705:1:14999:15004	5266204	0	True				
ANR	5266208	IdentifierDecl	i		5266204	0					
ANR	5266209	IdentifierDeclType	int		5266204	0					
ANR	5266210	Identifier	i		5266204	1					
ANR	5266211	IdentifierDeclStatement	bool ready = false ;	706:1:15007:15025	5266204	1	True				
ANR	5266212	IdentifierDecl	ready = false		5266204	0					
ANR	5266213	IdentifierDeclType	bool		5266204	0					
ANR	5266214	Identifier	ready		5266204	1					
ANR	5266215	AssignmentExpression	ready = false		5266204	2		=			
ANR	5266216	Identifier	false		5266204	0					
ANR	5266217	Identifier	false		5266204	1					
ANR	5266218	IdentifierDeclStatement	ut64 res = 0 ;	707:1:15028:15040	5266204	2	True				
ANR	5266219	IdentifierDecl	res = 0		5266204	0					
ANR	5266220	IdentifierDeclType	ut64		5266204	0					
ANR	5266221	Identifier	res		5266204	1					
ANR	5266222	AssignmentExpression	res = 0		5266204	2		=			
ANR	5266223	Identifier	res		5266204	0					
ANR	5266224	PrimaryExpression	0		5266204	1					
ANR	5266225	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		5266204	3					
ANR	5266226	ForInit	i = 0 ;	708:6:15048:15053	5266204	0	True				
ANR	5266227	AssignmentExpression	i = 0		5266204	0		=			
ANR	5266228	Identifier	i		5266204	0					
ANR	5266229	PrimaryExpression	0		5266204	1					
ANR	5266230	Condition	i < 16	708:13:15055:15060	5266204	1	True				
ANR	5266231	RelationalExpression	i < 16		5266204	0		<			
ANR	5266232	Identifier	i		5266204	0					
ANR	5266233	PrimaryExpression	16		5266204	1					
ANR	5266234	PostIncDecOperationExpression	i ++	708:21:15063:15065	5266204	2	True				
ANR	5266235	Identifier	i		5266204	0					
ANR	5266236	IncDec	++		5266204	1					
ANR	5266237	CompoundStatement		17:2:275:297	5266204	3					
ANR	5266238	IdentifierDeclStatement	"ut64 o = __nth_nibble ( off , i ) ;"	709:2:15072:15102	5266204	0	True				
ANR	5266239	IdentifierDecl	"o = __nth_nibble ( off , i )"		5266204	0					
ANR	5266240	IdentifierDeclType	ut64		5266204	0					
ANR	5266241	Identifier	o		5266204	1					
ANR	5266242	AssignmentExpression	"o = __nth_nibble ( off , i )"		5266204	2		=			
ANR	5266243	Identifier	o		5266204	0					
ANR	5266244	CallExpression	"__nth_nibble ( off , i )"		5266204	1					
ANR	5266245	Callee	__nth_nibble		5266204	0					
ANR	5266246	Identifier	__nth_nibble		5266204	0					
ANR	5266247	ArgumentList	off		5266204	1					
ANR	5266248	Argument	off		5266204	0					
ANR	5266249	Identifier	off		5266204	0					
ANR	5266250	Argument	i		5266204	1					
ANR	5266251	Identifier	i		5266204	0					
ANR	5266252	IfStatement	if ( ! ready )		5266204	1					
ANR	5266253	Condition	! ready	710:6:15110:15115	5266204	0	True				
ANR	5266254	UnaryOperationExpression	! ready		5266204	0					
ANR	5266255	UnaryOperator	!		5266204	0					
ANR	5266256	Identifier	ready		5266204	1					
ANR	5266257	CompoundStatement		8:3:126:165	5266204	1					
ANR	5266258	IdentifierDeclStatement	"bool iseq = __nth_nibble ( addr , i ) == o ;"	711:3:15123:15162	5266204	0	True				
ANR	5266259	IdentifierDecl	"iseq = __nth_nibble ( addr , i ) == o"		5266204	0					
ANR	5266260	IdentifierDeclType	bool		5266204	0					
ANR	5266261	Identifier	iseq		5266204	1					
ANR	5266262	AssignmentExpression	"iseq = __nth_nibble ( addr , i ) == o"		5266204	2		=			
ANR	5266263	Identifier	iseq		5266204	0					
ANR	5266264	EqualityExpression	"__nth_nibble ( addr , i ) == o"		5266204	1		==			
ANR	5266265	CallExpression	"__nth_nibble ( addr , i )"		5266204	0					
ANR	5266266	Callee	__nth_nibble		5266204	0					
ANR	5266267	Identifier	__nth_nibble		5266204	0					
ANR	5266268	ArgumentList	addr		5266204	1					
ANR	5266269	Argument	addr		5266204	0					
ANR	5266270	Identifier	addr		5266204	0					
ANR	5266271	Argument	i		5266204	1					
ANR	5266272	Identifier	i		5266204	0					
ANR	5266273	Identifier	o		5266204	1					
ANR	5266274	IfStatement	if ( i == 0 && ! iseq )		5266204	1					
ANR	5266275	Condition	i == 0 && ! iseq	712:7:15171:15185	5266204	0	True				
ANR	5266276	AndExpression	i == 0 && ! iseq		5266204	0		&&			
ANR	5266277	EqualityExpression	i == 0		5266204	0		==			
ANR	5266278	Identifier	i		5266204	0					
ANR	5266279	PrimaryExpression	0		5266204	1					
ANR	5266280	UnaryOperationExpression	! iseq		5266204	1					
ANR	5266281	UnaryOperator	!		5266204	0					
ANR	5266282	Identifier	iseq		5266204	1					
ANR	5266283	CompoundStatement		9:24:191:191	5266204	1					
ANR	5266284	ReturnStatement	return UT64_MAX ;	713:4:15194:15209	5266204	0	True				
ANR	5266285	Identifier	UT64_MAX		5266204	0					
ANR	5266286	IfStatement	if ( iseq )		5266204	2					
ANR	5266287	Condition	iseq	715:7:15223:15226	5266204	0	True				
ANR	5266288	Identifier	iseq		5266204	0					
ANR	5266289	CompoundStatement		12:13:232:232	5266204	1					
ANR	5266290	ContinueStatement	continue ;	716:4:15235:15243	5266204	0	True				
ANR	5266291	ExpressionStatement	ready = true	719:2:15256:15268	5266204	2	True				
ANR	5266292	AssignmentExpression	ready = true		5266204	0		=			
ANR	5266293	Identifier	ready		5266204	0					
ANR	5266294	Identifier	true		5266204	1					
ANR	5266295	IdentifierDeclStatement	ut8 pos = ( 15 - i ) * 4 ;	720:2:15272:15294	5266204	3	True				
ANR	5266296	IdentifierDecl	pos = ( 15 - i ) * 4		5266204	0					
ANR	5266297	IdentifierDeclType	ut8		5266204	0					
ANR	5266298	Identifier	pos		5266204	1					
ANR	5266299	AssignmentExpression	pos = ( 15 - i ) * 4		5266204	2		=			
ANR	5266300	Identifier	pos		5266204	0					
ANR	5266301	MultiplicativeExpression	( 15 - i ) * 4		5266204	1		*			
ANR	5266302	AdditiveExpression	15 - i		5266204	0		-			
ANR	5266303	PrimaryExpression	15		5266204	0					
ANR	5266304	Identifier	i		5266204	1					
ANR	5266305	PrimaryExpression	4		5266204	1					
ANR	5266306	ExpressionStatement	res |= ( o << pos )	721:2:15298:15315	5266204	4	True				
ANR	5266307	AssignmentExpression	res |= ( o << pos )		5266204	0		|=			
ANR	5266308	Identifier	res		5266204	0					
ANR	5266309	ShiftExpression	o << pos		5266204	1		<<			
ANR	5266310	Identifier	o		5266204	0					
ANR	5266311	Identifier	pos		5266204	1					
ANR	5266312	ReturnStatement	return res ;	723:1:15321:15331	5266204	4	True				
ANR	5266313	Identifier	res		5266204	0					
ANR	5266314	ReturnType	R_API ut64		5266204	1					
ANR	5266315	Identifier	r_num_tail_base		5266204	2					
ANR	5266316	ParameterList	"RNum * num , ut64 addr , ut64 off"		5266204	3					
ANR	5266317	Parameter	RNum * num	704:27:14964:14972	5266204	0	True				
ANR	5266318	ParameterType	RNum *		5266204	0					
ANR	5266319	Identifier	num		5266204	1					
ANR	5266320	Parameter	ut64 addr	704:38:14975:14983	5266204	1	True				
ANR	5266321	ParameterType	ut64		5266204	0					
ANR	5266322	Identifier	addr		5266204	1					
ANR	5266323	Parameter	ut64 off	704:49:14986:14993	5266204	2	True				
ANR	5266324	ParameterType	ut64		5266204	0					
ANR	5266325	Identifier	off		5266204	1					
ANR	5266326	CFGEntryNode	ENTRY		5266204		True				
ANR	5266327	CFGExitNode	EXIT		5266204		True				
ANR	5266328	Symbol	res		5266204						
ANR	5266329	Symbol	__nth_nibble		5266204						
ANR	5266330	Symbol	num		5266204						
ANR	5266331	Symbol	iseq		5266204						
ANR	5266332	Symbol	false		5266204						
ANR	5266333	Symbol	i		5266204						
ANR	5266334	Symbol	off		5266204						
ANR	5266335	Symbol	o		5266204						
ANR	5266336	Symbol	pos		5266204						
ANR	5266337	Symbol	ready		5266204						
ANR	5266338	Symbol	true		5266204						
ANR	5266339	Symbol	addr		5266204						
ANR	5266340	Symbol	UT64_MAX		5266204						
ANR	5266341	Function	r_num_tail	726:0:15336:15822							
ANR	5266342	FunctionDef	"r_num_tail (RNum * num , ut64 addr , const char * hex)"		5266341	0					
ANR	5266343	CompoundStatement		726:61:15397:15822	5266341	0					
ANR	5266344	Statement	ut64	727:1:15400:15403	5266341	0	True				
ANR	5266345	Statement	mask	727:6:15405:15408	5266341	1	True				
ANR	5266346	Statement	=	727:11:15410:15410	5266341	2	True				
ANR	5266347	Statement	0L	727:13:15412:15413	5266341	3	True				
ANR	5266348	ExpressionStatement	L	727:15:15414:15415	5266341	4	True				
ANR	5266349	Identifier	L		5266341	0					
ANR	5266350	IdentifierDeclStatement	ut64 n = 0 ;	728:1:15418:15428	5266341	5	True				
ANR	5266351	IdentifierDecl	n = 0		5266341	0					
ANR	5266352	IdentifierDeclType	ut64		5266341	0					
ANR	5266353	Identifier	n		5266341	1					
ANR	5266354	AssignmentExpression	n = 0		5266341	2		=			
ANR	5266355	Identifier	n		5266341	0					
ANR	5266356	PrimaryExpression	0		5266341	1					
ANR	5266357	IdentifierDeclStatement	char * p ;	729:1:15431:15438	5266341	6	True				
ANR	5266358	IdentifierDecl	* p		5266341	0					
ANR	5266359	IdentifierDeclType	char *		5266341	0					
ANR	5266360	Identifier	p		5266341	1					
ANR	5266361	IdentifierDeclStatement	int i ;	730:1:15441:15446	5266341	7	True				
ANR	5266362	IdentifierDecl	i		5266341	0					
ANR	5266363	IdentifierDeclType	int		5266341	0					
ANR	5266364	Identifier	i		5266341	1					
ANR	5266365	WhileStatement	while ( * hex && ( * hex == ' ' || * hex == '.' ) )		5266341	8					
ANR	5266366	Condition	* hex && ( * hex == ' ' || * hex == '.' )	732:8:15457:15492	5266341	0	True				
ANR	5266367	AndExpression	* hex && ( * hex == ' ' || * hex == '.' )		5266341	0		&&			
ANR	5266368	UnaryOperationExpression	* hex		5266341	0					
ANR	5266369	UnaryOperator	*		5266341	0					
ANR	5266370	Identifier	hex		5266341	1					
ANR	5266371	OrExpression	* hex == ' ' || * hex == '.'		5266341	1		||			
ANR	5266372	EqualityExpression	* hex == ' '		5266341	0		==			
ANR	5266373	UnaryOperationExpression	* hex		5266341	0					
ANR	5266374	UnaryOperator	*		5266341	0					
ANR	5266375	Identifier	hex		5266341	1					
ANR	5266376	PrimaryExpression	' '		5266341	1					
ANR	5266377	EqualityExpression	* hex == '.'		5266341	1		==			
ANR	5266378	UnaryOperationExpression	* hex		5266341	0					
ANR	5266379	UnaryOperator	*		5266341	0					
ANR	5266380	Identifier	hex		5266341	1					
ANR	5266381	PrimaryExpression	'.'		5266341	1					
ANR	5266382	CompoundStatement		7:46:97:97	5266341	1					
ANR	5266383	ExpressionStatement	hex ++	733:2:15499:15504	5266341	0	True				
ANR	5266384	PostIncDecOperationExpression	hex ++		5266341	0					
ANR	5266385	Identifier	hex		5266341	0					
ANR	5266386	IncDec	++		5266341	1					
ANR	5266387	ExpressionStatement	i = strlen ( hex ) * 4	735:1:15510:15530	5266341	9	True				
ANR	5266388	AssignmentExpression	i = strlen ( hex ) * 4		5266341	0		=			
ANR	5266389	Identifier	i		5266341	0					
ANR	5266390	MultiplicativeExpression	strlen ( hex ) * 4		5266341	1		*			
ANR	5266391	CallExpression	strlen ( hex )		5266341	0					
ANR	5266392	Callee	strlen		5266341	0					
ANR	5266393	Identifier	strlen		5266341	0					
ANR	5266394	ArgumentList	hex		5266341	1					
ANR	5266395	Argument	hex		5266341	0					
ANR	5266396	Identifier	hex		5266341	0					
ANR	5266397	PrimaryExpression	4		5266341	1					
ANR	5266398	ExpressionStatement	p = malloc ( strlen ( hex ) + 10 )	736:1:15533:15563	5266341	10	True				
ANR	5266399	AssignmentExpression	p = malloc ( strlen ( hex ) + 10 )		5266341	0		=			
ANR	5266400	Identifier	p		5266341	0					
ANR	5266401	CallExpression	malloc ( strlen ( hex ) + 10 )		5266341	1					
ANR	5266402	Callee	malloc		5266341	0					
ANR	5266403	Identifier	malloc		5266341	0					
ANR	5266404	ArgumentList	strlen ( hex ) + 10		5266341	1					
ANR	5266405	Argument	strlen ( hex ) + 10		5266341	0					
ANR	5266406	AdditiveExpression	strlen ( hex ) + 10		5266341	0		+			
ANR	5266407	CallExpression	strlen ( hex )		5266341	0					
ANR	5266408	Callee	strlen		5266341	0					
ANR	5266409	Identifier	strlen		5266341	0					
ANR	5266410	ArgumentList	hex		5266341	1					
ANR	5266411	Argument	hex		5266341	0					
ANR	5266412	Identifier	hex		5266341	0					
ANR	5266413	PrimaryExpression	10		5266341	1					
ANR	5266414	IfStatement	if ( p )		5266341	11					
ANR	5266415	Condition	p	737:5:15570:15570	5266341	0	True				
ANR	5266416	Identifier	p		5266341	0					
ANR	5266417	CompoundStatement		12:8:175:175	5266341	1					
ANR	5266418	ExpressionStatement	"strcpy ( p , ""0x"" )"	738:2:15577:15593	5266341	0	True				
ANR	5266419	CallExpression	"strcpy ( p , ""0x"" )"		5266341	0					
ANR	5266420	Callee	strcpy		5266341	0					
ANR	5266421	Identifier	strcpy		5266341	0					
ANR	5266422	ArgumentList	p		5266341	1					
ANR	5266423	Argument	p		5266341	0					
ANR	5266424	Identifier	p		5266341	0					
ANR	5266425	Argument	"""0x"""		5266341	1					
ANR	5266426	PrimaryExpression	"""0x"""		5266341	0					
ANR	5266427	ExpressionStatement	"strcpy ( p + 2 , hex )"	739:2:15597:15616	5266341	1	True				
ANR	5266428	CallExpression	"strcpy ( p + 2 , hex )"		5266341	0					
ANR	5266429	Callee	strcpy		5266341	0					
ANR	5266430	Identifier	strcpy		5266341	0					
ANR	5266431	ArgumentList	p + 2		5266341	1					
ANR	5266432	Argument	p + 2		5266341	0					
ANR	5266433	AdditiveExpression	p + 2		5266341	0		+			
ANR	5266434	Identifier	p		5266341	0					
ANR	5266435	PrimaryExpression	2		5266341	1					
ANR	5266436	Argument	hex		5266341	1					
ANR	5266437	Identifier	hex		5266341	0					
ANR	5266438	IfStatement	if ( isxdigit ( ( ut8 ) hex [ 0 ] ) )		5266341	2					
ANR	5266439	Condition	isxdigit ( ( ut8 ) hex [ 0 ] )	740:6:15624:15645	5266341	0	True				
ANR	5266440	CallExpression	isxdigit ( ( ut8 ) hex [ 0 ] )		5266341	0					
ANR	5266441	Callee	isxdigit		5266341	0					
ANR	5266442	Identifier	isxdigit		5266341	0					
ANR	5266443	ArgumentList	( ut8 ) hex [ 0 ]		5266341	1					
ANR	5266444	Argument	( ut8 ) hex [ 0 ]		5266341	0					
ANR	5266445	CastExpression	( ut8 ) hex [ 0 ]		5266341	0					
ANR	5266446	CastTarget	ut8		5266341	0					
ANR	5266447	ArrayIndexing	hex [ 0 ]		5266341	1					
ANR	5266448	Identifier	hex		5266341	0					
ANR	5266449	PrimaryExpression	0		5266341	1					
ANR	5266450	CompoundStatement		15:30:250:250	5266341	1					
ANR	5266451	ExpressionStatement	"n = r_num_math ( num , p )"	741:3:15653:15676	5266341	0	True				
ANR	5266452	AssignmentExpression	"n = r_num_math ( num , p )"		5266341	0		=			
ANR	5266453	Identifier	n		5266341	0					
ANR	5266454	CallExpression	"r_num_math ( num , p )"		5266341	1					
ANR	5266455	Callee	r_num_math		5266341	0					
ANR	5266456	Identifier	r_num_math		5266341	0					
ANR	5266457	ArgumentList	num		5266341	1					
ANR	5266458	Argument	num		5266341	0					
ANR	5266459	Identifier	num		5266341	0					
ANR	5266460	Argument	p		5266341	1					
ANR	5266461	Identifier	p		5266341	0					
ANR	5266462	ElseStatement	else		5266341	0					
ANR	5266463	CompoundStatement		17:9:289:289	5266341	0					
ANR	5266464	ExpressionStatement	"eprintf ( ""Invalid argument\\n"" )"	743:3:15692:15722	5266341	0	True				
ANR	5266465	CallExpression	"eprintf ( ""Invalid argument\\n"" )"		5266341	0					
ANR	5266466	Callee	eprintf		5266341	0					
ANR	5266467	Identifier	eprintf		5266341	0					
ANR	5266468	ArgumentList	"""Invalid argument\\n"""		5266341	1					
ANR	5266469	Argument	"""Invalid argument\\n"""		5266341	0					
ANR	5266470	PrimaryExpression	"""Invalid argument\\n"""		5266341	0					
ANR	5266471	ExpressionStatement	free ( p )	744:3:15727:15735	5266341	1	True				
ANR	5266472	CallExpression	free ( p )		5266341	0					
ANR	5266473	Callee	free		5266341	0					
ANR	5266474	Identifier	free		5266341	0					
ANR	5266475	ArgumentList	p		5266341	1					
ANR	5266476	Argument	p		5266341	0					
ANR	5266477	Identifier	p		5266341	0					
ANR	5266478	ReturnStatement	return addr ;	745:3:15740:15751	5266341	2	True				
ANR	5266479	Identifier	addr		5266341	0					
ANR	5266480	ExpressionStatement	free ( p )	747:2:15759:15767	5266341	3	True				
ANR	5266481	CallExpression	free ( p )		5266341	0					
ANR	5266482	Callee	free		5266341	0					
ANR	5266483	Identifier	free		5266341	0					
ANR	5266484	ArgumentList	p		5266341	1					
ANR	5266485	Argument	p		5266341	0					
ANR	5266486	Identifier	p		5266341	0					
ANR	5266487	ExpressionStatement	mask = UT64_MAX << i	749:1:15773:15793	5266341	12	True				
ANR	5266488	AssignmentExpression	mask = UT64_MAX << i		5266341	0		=			
ANR	5266489	Identifier	mask		5266341	0					
ANR	5266490	ShiftExpression	UT64_MAX << i		5266341	1		<<			
ANR	5266491	Identifier	UT64_MAX		5266341	0					
ANR	5266492	Identifier	i		5266341	1					
ANR	5266493	ReturnStatement	return ( addr & mask ) | n ;	750:1:15796:15820	5266341	13	True				
ANR	5266494	InclusiveOrExpression	( addr & mask ) | n		5266341	0		|			
ANR	5266495	BitAndExpression	addr & mask		5266341	0		&			
ANR	5266496	Identifier	addr		5266341	0					
ANR	5266497	Identifier	mask		5266341	1					
ANR	5266498	Identifier	n		5266341	1					
ANR	5266499	ReturnType	R_API ut64		5266341	1					
ANR	5266500	Identifier	r_num_tail		5266341	2					
ANR	5266501	ParameterList	"RNum * num , ut64 addr , const char * hex"		5266341	3					
ANR	5266502	Parameter	RNum * num	726:22:15358:15366	5266341	0	True				
ANR	5266503	ParameterType	RNum *		5266341	0					
ANR	5266504	Identifier	num		5266341	1					
ANR	5266505	Parameter	ut64 addr	726:33:15369:15377	5266341	1	True				
ANR	5266506	ParameterType	ut64		5266341	0					
ANR	5266507	Identifier	addr		5266341	1					
ANR	5266508	Parameter	const char * hex	726:44:15380:15394	5266341	2	True				
ANR	5266509	ParameterType	const char *		5266341	0					
ANR	5266510	Identifier	hex		5266341	1					
ANR	5266511	CFGEntryNode	ENTRY		5266341		True				
ANR	5266512	CFGExitNode	EXIT		5266341		True				
ANR	5266513	Symbol	malloc		5266341						
ANR	5266514	Symbol	num		5266341						
ANR	5266515	Symbol	i		5266341						
ANR	5266516	Symbol	n		5266341						
ANR	5266517	Symbol	r_num_math		5266341						
ANR	5266518	Symbol	p		5266341						
ANR	5266519	Symbol	strlen		5266341						
ANR	5266520	Symbol	hex		5266341						
ANR	5266521	Symbol	* hex		5266341						
ANR	5266522	Symbol	addr		5266341						
ANR	5266523	Symbol	UT64_MAX		5266341						
ANR	5266524	Symbol	isxdigit		5266341						
ANR	5266525	Symbol	mask		5266341						
ANR	5266526	Function	r_num_tailff	753:0:15825:16284							
ANR	5266527	FunctionDef	"r_num_tailff (RNum * num , const char * hex)"		5266526	0					
ANR	5266528	CompoundStatement		753:53:15878:16284	5266526	0					
ANR	5266529	IdentifierDeclStatement	ut64 n = 0 ;	754:1:15881:15891	5266526	0	True				
ANR	5266530	IdentifierDecl	n = 0		5266526	0					
ANR	5266531	IdentifierDeclType	ut64		5266526	0					
ANR	5266532	Identifier	n		5266526	1					
ANR	5266533	AssignmentExpression	n = 0		5266526	2		=			
ANR	5266534	Identifier	n		5266526	0					
ANR	5266535	PrimaryExpression	0		5266526	1					
ANR	5266536	WhileStatement	while ( * hex && ( * hex == ' ' || * hex == '.' ) )		5266526	1					
ANR	5266537	Condition	* hex && ( * hex == ' ' || * hex == '.' )	756:8:15902:15937	5266526	0	True				
ANR	5266538	AndExpression	* hex && ( * hex == ' ' || * hex == '.' )		5266526	0		&&			
ANR	5266539	UnaryOperationExpression	* hex		5266526	0					
ANR	5266540	UnaryOperator	*		5266526	0					
ANR	5266541	Identifier	hex		5266526	1					
ANR	5266542	OrExpression	* hex == ' ' || * hex == '.'		5266526	1		||			
ANR	5266543	EqualityExpression	* hex == ' '		5266526	0		==			
ANR	5266544	UnaryOperationExpression	* hex		5266526	0					
ANR	5266545	UnaryOperator	*		5266526	0					
ANR	5266546	Identifier	hex		5266526	1					
ANR	5266547	PrimaryExpression	' '		5266526	1					
ANR	5266548	EqualityExpression	* hex == '.'		5266526	1		==			
ANR	5266549	UnaryOperationExpression	* hex		5266526	0					
ANR	5266550	UnaryOperator	*		5266526	0					
ANR	5266551	Identifier	hex		5266526	1					
ANR	5266552	PrimaryExpression	'.'		5266526	1					
ANR	5266553	CompoundStatement		4:46:61:61	5266526	1					
ANR	5266554	ExpressionStatement	hex ++	757:2:15944:15949	5266526	0	True				
ANR	5266555	PostIncDecOperationExpression	hex ++		5266526	0					
ANR	5266556	Identifier	hex		5266526	0					
ANR	5266557	IncDec	++		5266526	1					
ANR	5266558	IdentifierDeclStatement	int i = strlen ( hex ) * 4 ;	759:1:15955:15979	5266526	2	True				
ANR	5266559	IdentifierDecl	i = strlen ( hex ) * 4		5266526	0					
ANR	5266560	IdentifierDeclType	int		5266526	0					
ANR	5266561	Identifier	i		5266526	1					
ANR	5266562	AssignmentExpression	i = strlen ( hex ) * 4		5266526	2		=			
ANR	5266563	Identifier	i		5266526	0					
ANR	5266564	MultiplicativeExpression	strlen ( hex ) * 4		5266526	1		*			
ANR	5266565	CallExpression	strlen ( hex )		5266526	0					
ANR	5266566	Callee	strlen		5266526	0					
ANR	5266567	Identifier	strlen		5266526	0					
ANR	5266568	ArgumentList	hex		5266526	1					
ANR	5266569	Argument	hex		5266526	0					
ANR	5266570	Identifier	hex		5266526	0					
ANR	5266571	PrimaryExpression	4		5266526	1					
ANR	5266572	IdentifierDeclStatement	char * p = malloc ( strlen ( hex ) + 10 ) ;	760:1:15982:16018	5266526	3	True				
ANR	5266573	IdentifierDecl	* p = malloc ( strlen ( hex ) + 10 )		5266526	0					
ANR	5266574	IdentifierDeclType	char *		5266526	0					
ANR	5266575	Identifier	p		5266526	1					
ANR	5266576	AssignmentExpression	* p = malloc ( strlen ( hex ) + 10 )		5266526	2		=			
ANR	5266577	Identifier	p		5266526	0					
ANR	5266578	CallExpression	malloc ( strlen ( hex ) + 10 )		5266526	1					
ANR	5266579	Callee	malloc		5266526	0					
ANR	5266580	Identifier	malloc		5266526	0					
ANR	5266581	ArgumentList	strlen ( hex ) + 10		5266526	1					
ANR	5266582	Argument	strlen ( hex ) + 10		5266526	0					
ANR	5266583	AdditiveExpression	strlen ( hex ) + 10		5266526	0		+			
ANR	5266584	CallExpression	strlen ( hex )		5266526	0					
ANR	5266585	Callee	strlen		5266526	0					
ANR	5266586	Identifier	strlen		5266526	0					
ANR	5266587	ArgumentList	hex		5266526	1					
ANR	5266588	Argument	hex		5266526	0					
ANR	5266589	Identifier	hex		5266526	0					
ANR	5266590	PrimaryExpression	10		5266526	1					
ANR	5266591	IfStatement	if ( p )		5266526	4					
ANR	5266592	Condition	p	761:5:16025:16025	5266526	0	True				
ANR	5266593	Identifier	p		5266526	0					
ANR	5266594	CompoundStatement		9:8:149:149	5266526	1					
ANR	5266595	ExpressionStatement	"strcpy ( p , ""0x"" )"	762:2:16032:16048	5266526	0	True				
ANR	5266596	CallExpression	"strcpy ( p , ""0x"" )"		5266526	0					
ANR	5266597	Callee	strcpy		5266526	0					
ANR	5266598	Identifier	strcpy		5266526	0					
ANR	5266599	ArgumentList	p		5266526	1					
ANR	5266600	Argument	p		5266526	0					
ANR	5266601	Identifier	p		5266526	0					
ANR	5266602	Argument	"""0x"""		5266526	1					
ANR	5266603	PrimaryExpression	"""0x"""		5266526	0					
ANR	5266604	ExpressionStatement	"strcpy ( p + 2 , hex )"	763:2:16052:16071	5266526	1	True				
ANR	5266605	CallExpression	"strcpy ( p + 2 , hex )"		5266526	0					
ANR	5266606	Callee	strcpy		5266526	0					
ANR	5266607	Identifier	strcpy		5266526	0					
ANR	5266608	ArgumentList	p + 2		5266526	1					
ANR	5266609	Argument	p + 2		5266526	0					
ANR	5266610	AdditiveExpression	p + 2		5266526	0		+			
ANR	5266611	Identifier	p		5266526	0					
ANR	5266612	PrimaryExpression	2		5266526	1					
ANR	5266613	Argument	hex		5266526	1					
ANR	5266614	Identifier	hex		5266526	0					
ANR	5266615	IfStatement	if ( isxdigit ( ( ut8 ) hex [ 0 ] ) )		5266526	2					
ANR	5266616	Condition	isxdigit ( ( ut8 ) hex [ 0 ] )	764:6:16079:16100	5266526	0	True				
ANR	5266617	CallExpression	isxdigit ( ( ut8 ) hex [ 0 ] )		5266526	0					
ANR	5266618	Callee	isxdigit		5266526	0					
ANR	5266619	Identifier	isxdigit		5266526	0					
ANR	5266620	ArgumentList	( ut8 ) hex [ 0 ]		5266526	1					
ANR	5266621	Argument	( ut8 ) hex [ 0 ]		5266526	0					
ANR	5266622	CastExpression	( ut8 ) hex [ 0 ]		5266526	0					
ANR	5266623	CastTarget	ut8		5266526	0					
ANR	5266624	ArrayIndexing	hex [ 0 ]		5266526	1					
ANR	5266625	Identifier	hex		5266526	0					
ANR	5266626	PrimaryExpression	0		5266526	1					
ANR	5266627	CompoundStatement		12:30:224:224	5266526	1					
ANR	5266628	ExpressionStatement	"n = r_num_get ( num , p )"	765:3:16108:16130	5266526	0	True				
ANR	5266629	AssignmentExpression	"n = r_num_get ( num , p )"		5266526	0		=			
ANR	5266630	Identifier	n		5266526	0					
ANR	5266631	CallExpression	"r_num_get ( num , p )"		5266526	1					
ANR	5266632	Callee	r_num_get		5266526	0					
ANR	5266633	Identifier	r_num_get		5266526	0					
ANR	5266634	ArgumentList	num		5266526	1					
ANR	5266635	Argument	num		5266526	0					
ANR	5266636	Identifier	num		5266526	0					
ANR	5266637	Argument	p		5266526	1					
ANR	5266638	Identifier	p		5266526	0					
ANR	5266639	ElseStatement	else		5266526	0					
ANR	5266640	CompoundStatement		14:9:262:262	5266526	0					
ANR	5266641	ExpressionStatement	"eprintf ( ""Invalid argument\\n"" )"	767:3:16146:16176	5266526	0	True				
ANR	5266642	CallExpression	"eprintf ( ""Invalid argument\\n"" )"		5266526	0					
ANR	5266643	Callee	eprintf		5266526	0					
ANR	5266644	Identifier	eprintf		5266526	0					
ANR	5266645	ArgumentList	"""Invalid argument\\n"""		5266526	1					
ANR	5266646	Argument	"""Invalid argument\\n"""		5266526	0					
ANR	5266647	PrimaryExpression	"""Invalid argument\\n"""		5266526	0					
ANR	5266648	ExpressionStatement	free ( p )	768:3:16181:16189	5266526	1	True				
ANR	5266649	CallExpression	free ( p )		5266526	0					
ANR	5266650	Callee	free		5266526	0					
ANR	5266651	Identifier	free		5266526	0					
ANR	5266652	ArgumentList	p		5266526	1					
ANR	5266653	Argument	p		5266526	0					
ANR	5266654	Identifier	p		5266526	0					
ANR	5266655	ReturnStatement	return UT64_MAX ;	769:3:16194:16209	5266526	2	True				
ANR	5266656	Identifier	UT64_MAX		5266526	0					
ANR	5266657	ExpressionStatement	free ( p )	771:2:16217:16225	5266526	3	True				
ANR	5266658	CallExpression	free ( p )		5266526	0					
ANR	5266659	Callee	free		5266526	0					
ANR	5266660	Identifier	free		5266526	0					
ANR	5266661	ArgumentList	p		5266526	1					
ANR	5266662	Argument	p		5266526	0					
ANR	5266663	Identifier	p		5266526	0					
ANR	5266664	IdentifierDeclStatement	ut64 left = ( ( UT64_MAX >> i ) << i ) ;	773:1:16231:16264	5266526	5	True				
ANR	5266665	IdentifierDecl	left = ( ( UT64_MAX >> i ) << i )		5266526	0					
ANR	5266666	IdentifierDeclType	ut64		5266526	0					
ANR	5266667	Identifier	left		5266526	1					
ANR	5266668	AssignmentExpression	left = ( ( UT64_MAX >> i ) << i )		5266526	2		=			
ANR	5266669	Identifier	left		5266526	0					
ANR	5266670	ShiftExpression	( UT64_MAX >> i ) << i		5266526	1		<<			
ANR	5266671	ShiftExpression	UT64_MAX >> i		5266526	0		>>			
ANR	5266672	Identifier	UT64_MAX		5266526	0					
ANR	5266673	Identifier	i		5266526	1					
ANR	5266674	Identifier	i		5266526	1					
ANR	5266675	ReturnStatement	return left | n ;	774:1:16267:16282	5266526	6	True				
ANR	5266676	InclusiveOrExpression	left | n		5266526	0		|			
ANR	5266677	Identifier	left		5266526	0					
ANR	5266678	Identifier	n		5266526	1					
ANR	5266679	ReturnType	static ut64		5266526	1					
ANR	5266680	Identifier	r_num_tailff		5266526	2					
ANR	5266681	ParameterList	"RNum * num , const char * hex"		5266526	3					
ANR	5266682	Parameter	RNum * num	753:25:15850:15858	5266526	0	True				
ANR	5266683	ParameterType	RNum *		5266526	0					
ANR	5266684	Identifier	num		5266526	1					
ANR	5266685	Parameter	const char * hex	753:36:15861:15875	5266526	1	True				
ANR	5266686	ParameterType	const char *		5266526	0					
ANR	5266687	Identifier	hex		5266526	1					
ANR	5266688	CFGEntryNode	ENTRY		5266526		True				
ANR	5266689	CFGExitNode	EXIT		5266526		True				
ANR	5266690	Symbol	p		5266526						
ANR	5266691	Symbol	strlen		5266526						
ANR	5266692	Symbol	malloc		5266526						
ANR	5266693	Symbol	left		5266526						
ANR	5266694	Symbol	num		5266526						
ANR	5266695	Symbol	i		5266526						
ANR	5266696	Symbol	hex		5266526						
ANR	5266697	Symbol	* hex		5266526						
ANR	5266698	Symbol	r_num_get		5266526						
ANR	5266699	Symbol	UT64_MAX		5266526						
ANR	5266700	Symbol	n		5266526						
ANR	5266701	Symbol	isxdigit		5266526						
ANR	5266702	Function	r_num_between	777:0:16287:16758							
ANR	5266703	FunctionDef	"r_num_between (RNum * num , const char * input_value)"		5266702	0					
ANR	5266704	CompoundStatement		777:60:16347:16758	5266702	0					
ANR	5266705	IdentifierDeclStatement	int i ;	778:1:16350:16355	5266702	0	True				
ANR	5266706	IdentifierDecl	i		5266702	0					
ANR	5266707	IdentifierDeclType	int		5266702	0					
ANR	5266708	Identifier	i		5266702	1					
ANR	5266709	IdentifierDeclStatement	ut64 ns [ 3 ] ;	779:1:16358:16368	5266702	1	True				
ANR	5266710	IdentifierDecl	ns [ 3 ]		5266702	0					
ANR	5266711	IdentifierDeclType	ut64 [ 3 ]		5266702	0					
ANR	5266712	Identifier	ns		5266702	1					
ANR	5266713	PrimaryExpression	3		5266702	2					
ANR	5266714	Statement	char	780:1:16371:16374	5266702	2	True				
ANR	5266715	Statement	*	780:6:16376:16376	5266702	3	True				
ANR	5266716	Statement	const	780:8:16378:16382	5266702	4	True				
ANR	5266717	ExpressionStatement	str = strdup ( input_value )	780:14:16384:16410	5266702	5	True				
ANR	5266718	AssignmentExpression	str = strdup ( input_value )		5266702	0		=			
ANR	5266719	Identifier	str		5266702	0					
ANR	5266720	CallExpression	strdup ( input_value )		5266702	1					
ANR	5266721	Callee	strdup		5266702	0					
ANR	5266722	Identifier	strdup		5266702	0					
ANR	5266723	ArgumentList	input_value		5266702	1					
ANR	5266724	Argument	input_value		5266702	0					
ANR	5266725	Identifier	input_value		5266702	0					
ANR	5266726	IdentifierDeclStatement	RList * nums = r_num_str_split_list ( str ) ;	781:1:16413:16453	5266702	6	True				
ANR	5266727	IdentifierDecl	* nums = r_num_str_split_list ( str )		5266702	0					
ANR	5266728	IdentifierDeclType	RList *		5266702	0					
ANR	5266729	Identifier	nums		5266702	1					
ANR	5266730	AssignmentExpression	* nums = r_num_str_split_list ( str )		5266702	2		=			
ANR	5266731	Identifier	nums		5266702	0					
ANR	5266732	CallExpression	r_num_str_split_list ( str )		5266702	1					
ANR	5266733	Callee	r_num_str_split_list		5266702	0					
ANR	5266734	Identifier	r_num_str_split_list		5266702	0					
ANR	5266735	ArgumentList	str		5266702	1					
ANR	5266736	Argument	str		5266702	0					
ANR	5266737	Identifier	str		5266702	0					
ANR	5266738	IdentifierDeclStatement	int len = r_list_length ( nums ) ;	782:1:16456:16486	5266702	7	True				
ANR	5266739	IdentifierDecl	len = r_list_length ( nums )		5266702	0					
ANR	5266740	IdentifierDeclType	int		5266702	0					
ANR	5266741	Identifier	len		5266702	1					
ANR	5266742	AssignmentExpression	len = r_list_length ( nums )		5266702	2		=			
ANR	5266743	Identifier	len		5266702	0					
ANR	5266744	CallExpression	r_list_length ( nums )		5266702	1					
ANR	5266745	Callee	r_list_length		5266702	0					
ANR	5266746	Identifier	r_list_length		5266702	0					
ANR	5266747	ArgumentList	nums		5266702	1					
ANR	5266748	Argument	nums		5266702	0					
ANR	5266749	Identifier	nums		5266702	0					
ANR	5266750	IfStatement	if ( len < 3 )		5266702	8					
ANR	5266751	Condition	len < 3	783:5:16493:16499	5266702	0	True				
ANR	5266752	RelationalExpression	len < 3		5266702	0		<			
ANR	5266753	Identifier	len		5266702	0					
ANR	5266754	PrimaryExpression	3		5266702	1					
ANR	5266755	CompoundStatement		7:14:154:154	5266702	1					
ANR	5266756	ExpressionStatement	free ( str )	784:2:16506:16516	5266702	0	True				
ANR	5266757	CallExpression	free ( str )		5266702	0					
ANR	5266758	Callee	free		5266702	0					
ANR	5266759	Identifier	free		5266702	0					
ANR	5266760	ArgumentList	str		5266702	1					
ANR	5266761	Argument	str		5266702	0					
ANR	5266762	Identifier	str		5266702	0					
ANR	5266763	ExpressionStatement	r_list_free ( nums )	785:2:16520:16538	5266702	1	True				
ANR	5266764	CallExpression	r_list_free ( nums )		5266702	0					
ANR	5266765	Callee	r_list_free		5266702	0					
ANR	5266766	Identifier	r_list_free		5266702	0					
ANR	5266767	ArgumentList	nums		5266702	1					
ANR	5266768	Argument	nums		5266702	0					
ANR	5266769	Identifier	nums		5266702	0					
ANR	5266770	ReturnStatement	return - 1 ;	786:2:16542:16551	5266702	2	True				
ANR	5266771	UnaryOperationExpression	- 1		5266702	0					
ANR	5266772	UnaryOperator	-		5266702	0					
ANR	5266773	PrimaryExpression	1		5266702	1					
ANR	5266774	IfStatement	if ( len > 3 )		5266702	9					
ANR	5266775	Condition	len > 3	788:5:16561:16567	5266702	0	True				
ANR	5266776	RelationalExpression	len > 3		5266702	0		>			
ANR	5266777	Identifier	len		5266702	0					
ANR	5266778	PrimaryExpression	3		5266702	1					
ANR	5266779	CompoundStatement		12:14:222:222	5266702	1					
ANR	5266780	ExpressionStatement	len = 3	789:2:16574:16581	5266702	0	True				
ANR	5266781	AssignmentExpression	len = 3		5266702	0		=			
ANR	5266782	Identifier	len		5266702	0					
ANR	5266783	PrimaryExpression	3		5266702	1					
ANR	5266784	ForStatement	for ( i = 0 ; i < len ; i ++ )		5266702	10					
ANR	5266785	ForInit	i = 0 ;	791:6:16592:16597	5266702	0	True				
ANR	5266786	AssignmentExpression	i = 0		5266702	0		=			
ANR	5266787	Identifier	i		5266702	0					
ANR	5266788	PrimaryExpression	0		5266702	1					
ANR	5266789	Condition	i < len	791:13:16599:16605	5266702	1	True				
ANR	5266790	RelationalExpression	i < len		5266702	0		<			
ANR	5266791	Identifier	i		5266702	0					
ANR	5266792	Identifier	len		5266702	1					
ANR	5266793	PostIncDecOperationExpression	i ++	791:22:16608:16610	5266702	2	True				
ANR	5266794	Identifier	i		5266702	0					
ANR	5266795	IncDec	++		5266702	1					
ANR	5266796	CompoundStatement		15:27:265:265	5266702	3					
ANR	5266797	ExpressionStatement	"ns [ i ] = r_num_math ( num , r_list_pop_head ( nums ) )"	792:2:16617:16665	5266702	0	True				
ANR	5266798	AssignmentExpression	"ns [ i ] = r_num_math ( num , r_list_pop_head ( nums ) )"		5266702	0		=			
ANR	5266799	ArrayIndexing	ns [ i ]		5266702	0					
ANR	5266800	Identifier	ns		5266702	0					
ANR	5266801	Identifier	i		5266702	1					
ANR	5266802	CallExpression	"r_num_math ( num , r_list_pop_head ( nums ) )"		5266702	1					
ANR	5266803	Callee	r_num_math		5266702	0					
ANR	5266804	Identifier	r_num_math		5266702	0					
ANR	5266805	ArgumentList	num		5266702	1					
ANR	5266806	Argument	num		5266702	0					
ANR	5266807	Identifier	num		5266702	0					
ANR	5266808	Argument	r_list_pop_head ( nums )		5266702	1					
ANR	5266809	CallExpression	r_list_pop_head ( nums )		5266702	0					
ANR	5266810	Callee	r_list_pop_head		5266702	0					
ANR	5266811	Identifier	r_list_pop_head		5266702	0					
ANR	5266812	ArgumentList	nums		5266702	1					
ANR	5266813	Argument	nums		5266702	0					
ANR	5266814	Identifier	nums		5266702	0					
ANR	5266815	ExpressionStatement	free ( str )	794:1:16671:16681	5266702	11	True				
ANR	5266816	CallExpression	free ( str )		5266702	0					
ANR	5266817	Callee	free		5266702	0					
ANR	5266818	Identifier	free		5266702	0					
ANR	5266819	ArgumentList	str		5266702	1					
ANR	5266820	Argument	str		5266702	0					
ANR	5266821	Identifier	str		5266702	0					
ANR	5266822	ExpressionStatement	r_list_free ( nums )	795:1:16684:16702	5266702	12	True				
ANR	5266823	CallExpression	r_list_free ( nums )		5266702	0					
ANR	5266824	Callee	r_list_free		5266702	0					
ANR	5266825	Identifier	r_list_free		5266702	0					
ANR	5266826	ArgumentList	nums		5266702	1					
ANR	5266827	Argument	nums		5266702	0					
ANR	5266828	Identifier	nums		5266702	0					
ANR	5266829	ReturnStatement	"return num -> value = R_BETWEEN ( ns [ 0 ] , ns [ 1 ] , ns [ 2 ] ) ;"	796:1:16705:16756	5266702	13	True				
ANR	5266830	AssignmentExpression	"num -> value = R_BETWEEN ( ns [ 0 ] , ns [ 1 ] , ns [ 2 ] )"		5266702	0		=			
ANR	5266831	PtrMemberAccess	num -> value		5266702	0					
ANR	5266832	Identifier	num		5266702	0					
ANR	5266833	Identifier	value		5266702	1					
ANR	5266834	CallExpression	"R_BETWEEN ( ns [ 0 ] , ns [ 1 ] , ns [ 2 ] )"		5266702	1					
ANR	5266835	Callee	R_BETWEEN		5266702	0					
ANR	5266836	Identifier	R_BETWEEN		5266702	0					
ANR	5266837	ArgumentList	ns [ 0 ]		5266702	1					
ANR	5266838	Argument	ns [ 0 ]		5266702	0					
ANR	5266839	ArrayIndexing	ns [ 0 ]		5266702	0					
ANR	5266840	Identifier	ns		5266702	0					
ANR	5266841	PrimaryExpression	0		5266702	1					
ANR	5266842	Argument	ns [ 1 ]		5266702	1					
ANR	5266843	ArrayIndexing	ns [ 1 ]		5266702	0					
ANR	5266844	Identifier	ns		5266702	0					
ANR	5266845	PrimaryExpression	1		5266702	1					
ANR	5266846	Argument	ns [ 2 ]		5266702	2					
ANR	5266847	ArrayIndexing	ns [ 2 ]		5266702	0					
ANR	5266848	Identifier	ns		5266702	0					
ANR	5266849	PrimaryExpression	2		5266702	1					
ANR	5266850	ReturnType	R_API int		5266702	1					
ANR	5266851	Identifier	r_num_between		5266702	2					
ANR	5266852	ParameterList	"RNum * num , const char * input_value"		5266702	3					
ANR	5266853	Parameter	RNum * num	777:24:16311:16319	5266702	0	True				
ANR	5266854	ParameterType	RNum *		5266702	0					
ANR	5266855	Identifier	num		5266702	1					
ANR	5266856	Parameter	const char * input_value	777:35:16322:16344	5266702	1	True				
ANR	5266857	ParameterType	const char *		5266702	0					
ANR	5266858	Identifier	input_value		5266702	1					
ANR	5266859	CFGEntryNode	ENTRY		5266702		True				
ANR	5266860	CFGExitNode	EXIT		5266702		True				
ANR	5266861	Symbol	ns		5266702						
ANR	5266862	Symbol	R_BETWEEN		5266702						
ANR	5266863	Symbol	num		5266702						
ANR	5266864	Symbol	* ns		5266702						
ANR	5266865	Symbol	i		5266702						
ANR	5266866	Symbol	input_value		5266702						
ANR	5266867	Symbol	r_num_str_split_list		5266702						
ANR	5266868	Symbol	r_num_math		5266702						
ANR	5266869	Symbol	str		5266702						
ANR	5266870	Symbol	* num		5266702						
ANR	5266871	Symbol	num -> value		5266702						
ANR	5266872	Symbol	* i		5266702						
ANR	5266873	Symbol	r_list_pop_head		5266702						
ANR	5266874	Symbol	len		5266702						
ANR	5266875	Symbol	strdup		5266702						
ANR	5266876	Symbol	nums		5266702						
ANR	5266877	Symbol	r_list_length		5266702						
ANR	5266878	Function	r_num_is_op	799:0:16761:16904							
ANR	5266879	FunctionDef	r_num_is_op (const char c)		5266878	0					
ANR	5266880	CompoundStatement		799:37:16798:16904	5266878	0					
ANR	5266881	ReturnStatement	return c == '/' || c == '+' || c == '-' || c == '*' || c == '%' || c == '&' || c == '^' || c == '|' ;	800:1:16801:16902	5266878	0	True				
ANR	5266882	OrExpression	c == '/' || c == '+' || c == '-' || c == '*' || c == '%' || c == '&' || c == '^' || c == '|'		5266878	0		||			
ANR	5266883	EqualityExpression	c == '/'		5266878	0		==			
ANR	5266884	Identifier	c		5266878	0					
ANR	5266885	PrimaryExpression	'/'		5266878	1					
ANR	5266886	OrExpression	c == '+' || c == '-' || c == '*' || c == '%' || c == '&' || c == '^' || c == '|'		5266878	1		||			
ANR	5266887	EqualityExpression	c == '+'		5266878	0		==			
ANR	5266888	Identifier	c		5266878	0					
ANR	5266889	PrimaryExpression	'+'		5266878	1					
ANR	5266890	OrExpression	c == '-' || c == '*' || c == '%' || c == '&' || c == '^' || c == '|'		5266878	1		||			
ANR	5266891	EqualityExpression	c == '-'		5266878	0		==			
ANR	5266892	Identifier	c		5266878	0					
ANR	5266893	PrimaryExpression	'-'		5266878	1					
ANR	5266894	OrExpression	c == '*' || c == '%' || c == '&' || c == '^' || c == '|'		5266878	1		||			
ANR	5266895	EqualityExpression	c == '*'		5266878	0		==			
ANR	5266896	Identifier	c		5266878	0					
ANR	5266897	PrimaryExpression	'*'		5266878	1					
ANR	5266898	OrExpression	c == '%' || c == '&' || c == '^' || c == '|'		5266878	1		||			
ANR	5266899	EqualityExpression	c == '%'		5266878	0		==			
ANR	5266900	Identifier	c		5266878	0					
ANR	5266901	PrimaryExpression	'%'		5266878	1					
ANR	5266902	OrExpression	c == '&' || c == '^' || c == '|'		5266878	1		||			
ANR	5266903	EqualityExpression	c == '&'		5266878	0		==			
ANR	5266904	Identifier	c		5266878	0					
ANR	5266905	PrimaryExpression	'&'		5266878	1					
ANR	5266906	OrExpression	c == '^' || c == '|'		5266878	1		||			
ANR	5266907	EqualityExpression	c == '^'		5266878	0		==			
ANR	5266908	Identifier	c		5266878	0					
ANR	5266909	PrimaryExpression	'^'		5266878	1					
ANR	5266910	EqualityExpression	c == '|'		5266878	1		==			
ANR	5266911	Identifier	c		5266878	0					
ANR	5266912	PrimaryExpression	'|'		5266878	1					
ANR	5266913	ReturnType	R_API bool		5266878	1					
ANR	5266914	Identifier	r_num_is_op		5266878	2					
ANR	5266915	ParameterList	const char c		5266878	3					
ANR	5266916	Parameter	const char c	799:23:16784:16795	5266878	0	True				
ANR	5266917	ParameterType	const char		5266878	0					
ANR	5266918	Identifier	c		5266878	1					
ANR	5266919	CFGEntryNode	ENTRY		5266878		True				
ANR	5266920	CFGExitNode	EXIT		5266878		True				
ANR	5266921	Symbol	c		5266878						
ANR	5266922	Function	r_num_str_len	805:0:16960:17621							
ANR	5266923	FunctionDef	r_num_str_len (const char * str)		5266922	0					
ANR	5266924	CompoundStatement		805:41:17001:17621	5266922	0					
ANR	5266925	IdentifierDeclStatement	"int i = 0 , len = 0 , st ;"	806:1:17004:17026	5266922	0	True				
ANR	5266926	IdentifierDecl	i = 0		5266922	0					
ANR	5266927	IdentifierDeclType	int		5266922	0					
ANR	5266928	Identifier	i		5266922	1					
ANR	5266929	AssignmentExpression	i = 0		5266922	2		=			
ANR	5266930	Identifier	i		5266922	0					
ANR	5266931	PrimaryExpression	0		5266922	1					
ANR	5266932	IdentifierDecl	len = 0		5266922	1					
ANR	5266933	IdentifierDeclType	int		5266922	0					
ANR	5266934	Identifier	len		5266922	1					
ANR	5266935	AssignmentExpression	len = 0		5266922	2		=			
ANR	5266936	Identifier	len		5266922	0					
ANR	5266937	PrimaryExpression	0		5266922	1					
ANR	5266938	IdentifierDecl	st		5266922	2					
ANR	5266939	IdentifierDeclType	int		5266922	0					
ANR	5266940	Identifier	st		5266922	1					
ANR	5266941	ExpressionStatement	st = 0	807:1:17029:17035	5266922	1	True				
ANR	5266942	AssignmentExpression	st = 0		5266922	0		=			
ANR	5266943	Identifier	st		5266922	0					
ANR	5266944	PrimaryExpression	0		5266922	1					
ANR	5266945	IfStatement	if ( str [ 0 ] == '(' )		5266922	2					
ANR	5266946	Condition	str [ 0 ] == '('	808:5:17062:17074	5266922	0	True				
ANR	5266947	EqualityExpression	str [ 0 ] == '('		5266922	0		==			
ANR	5266948	ArrayIndexing	str [ 0 ]		5266922	0					
ANR	5266949	Identifier	str		5266922	0					
ANR	5266950	PrimaryExpression	0		5266922	1					
ANR	5266951	PrimaryExpression	'('		5266922	1					
ANR	5266952	CompoundStatement		4:20:75:75	5266922	1					
ANR	5266953	ExpressionStatement	i ++	809:2:17081:17084	5266922	0	True				
ANR	5266954	PostIncDecOperationExpression	i ++		5266922	0					
ANR	5266955	Identifier	i		5266922	0					
ANR	5266956	IncDec	++		5266922	1					
ANR	5266957	WhileStatement	while ( str [ i ] != '\\0' )		5266922	3					
ANR	5266958	Condition	str [ i ] != '\\0'	811:8:17097:17110	5266922	0	True				
ANR	5266959	EqualityExpression	str [ i ] != '\\0'		5266922	0		!=			
ANR	5266960	ArrayIndexing	str [ i ]		5266922	0					
ANR	5266961	Identifier	str		5266922	0					
ANR	5266962	Identifier	i		5266922	1					
ANR	5266963	PrimaryExpression	'\\0'		5266922	1					
ANR	5266964	CompoundStatement		7:24:111:111	5266922	1					
ANR	5266965	SwitchStatement	switch ( st )		5266922	0					
ANR	5266966	Condition	st	812:10:17125:17126	5266922	0	True				
ANR	5266967	Identifier	st		5266922	0					
ANR	5266968	CompoundStatement		8:14:127:127	5266922	1					
ANR	5266969	Label	case 0 :	813:2:17133:17139	5266922	0	True				
ANR	5266970	WhileStatement	while ( ! r_num_is_op ( str [ i ] ) && str [ i ] != ' ' && str [ i ] != '\\0' )		5266922	1					
ANR	5266971	Condition	! r_num_is_op ( str [ i ] ) && str [ i ] != ' ' && str [ i ] != '\\0'	814:10:17161:17221	5266922	0	True				
ANR	5266972	AndExpression	! r_num_is_op ( str [ i ] ) && str [ i ] != ' ' && str [ i ] != '\\0'		5266922	0		&&			
ANR	5266973	UnaryOperationExpression	! r_num_is_op ( str [ i ] )		5266922	0					
ANR	5266974	UnaryOperator	!		5266922	0					
ANR	5266975	CallExpression	r_num_is_op ( str [ i ] )		5266922	1					
ANR	5266976	Callee	r_num_is_op		5266922	0					
ANR	5266977	Identifier	r_num_is_op		5266922	0					
ANR	5266978	ArgumentList	str [ i ]		5266922	1					
ANR	5266979	Argument	str [ i ]		5266922	0					
ANR	5266980	ArrayIndexing	str [ i ]		5266922	0					
ANR	5266981	Identifier	str		5266922	0					
ANR	5266982	Identifier	i		5266922	1					
ANR	5266983	AndExpression	str [ i ] != ' ' && str [ i ] != '\\0'		5266922	1		&&			
ANR	5266984	EqualityExpression	str [ i ] != ' '		5266922	0		!=			
ANR	5266985	ArrayIndexing	str [ i ]		5266922	0					
ANR	5266986	Identifier	str		5266922	0					
ANR	5266987	Identifier	i		5266922	1					
ANR	5266988	PrimaryExpression	' '		5266922	1					
ANR	5266989	EqualityExpression	str [ i ] != '\\0'		5266922	1		!=			
ANR	5266990	ArrayIndexing	str [ i ]		5266922	0					
ANR	5266991	Identifier	str		5266922	0					
ANR	5266992	Identifier	i		5266922	1					
ANR	5266993	PrimaryExpression	'\\0'		5266922	1					
ANR	5266994	CompoundStatement		11:24:222:222	5266922	1					
ANR	5266995	ExpressionStatement	i ++	816:4:17230:17233	5266922	0	True				
ANR	5266996	PostIncDecOperationExpression	i ++		5266922	0					
ANR	5266997	Identifier	i		5266922	0					
ANR	5266998	IncDec	++		5266922	1					
ANR	5266999	IfStatement	if ( str [ i ] == '(' )		5266922	1					
ANR	5267000	Condition	str [ i ] == '('	817:8:17243:17255	5266922	0	True				
ANR	5267001	EqualityExpression	str [ i ] == '('		5266922	0		==			
ANR	5267002	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267003	Identifier	str		5266922	0					
ANR	5267004	Identifier	i		5266922	1					
ANR	5267005	PrimaryExpression	'('		5266922	1					
ANR	5267006	CompoundStatement		13:23:256:256	5266922	1					
ANR	5267007	ExpressionStatement	i += r_num_str_len ( str + i )	818:6:17266:17292	5266922	0	True				
ANR	5267008	AssignmentExpression	i += r_num_str_len ( str + i )		5266922	0		+=			
ANR	5267009	Identifier	i		5266922	0					
ANR	5267010	CallExpression	r_num_str_len ( str + i )		5266922	1					
ANR	5267011	Callee	r_num_str_len		5266922	0					
ANR	5267012	Identifier	r_num_str_len		5266922	0					
ANR	5267013	ArgumentList	str + i		5266922	1					
ANR	5267014	Argument	str + i		5266922	0					
ANR	5267015	AdditiveExpression	str + i		5266922	0		+			
ANR	5267016	Identifier	str		5266922	0					
ANR	5267017	Identifier	i		5266922	1					
ANR	5267018	ExpressionStatement	len = i	821:3:17308:17315	5266922	2	True				
ANR	5267019	AssignmentExpression	len = i		5266922	0		=			
ANR	5267020	Identifier	len		5266922	0					
ANR	5267021	Identifier	i		5266922	1					
ANR	5267022	ExpressionStatement	st = 1	822:3:17320:17326	5266922	3	True				
ANR	5267023	AssignmentExpression	st = 1		5266922	0		=			
ANR	5267024	Identifier	st		5266922	0					
ANR	5267025	PrimaryExpression	1		5266922	1					
ANR	5267026	BreakStatement	break ;	823:3:17331:17336	5266922	4	True				
ANR	5267027	Label	case 1 :	824:2:17340:17346	5266922	5	True				
ANR	5267028	WhileStatement	while ( str [ i ] != '\\0' && str [ i ] == ' ' )		5266922	6					
ANR	5267029	Condition	str [ i ] != '\\0' && str [ i ] == ' '	825:10:17364:17394	5266922	0	True				
ANR	5267030	AndExpression	str [ i ] != '\\0' && str [ i ] == ' '		5266922	0		&&			
ANR	5267031	EqualityExpression	str [ i ] != '\\0'		5266922	0		!=			
ANR	5267032	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267033	Identifier	str		5266922	0					
ANR	5267034	Identifier	i		5266922	1					
ANR	5267035	PrimaryExpression	'\\0'		5266922	1					
ANR	5267036	EqualityExpression	str [ i ] == ' '		5266922	1		==			
ANR	5267037	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267038	Identifier	str		5266922	0					
ANR	5267039	Identifier	i		5266922	1					
ANR	5267040	PrimaryExpression	' '		5266922	1					
ANR	5267041	CompoundStatement		21:43:395:395	5266922	1					
ANR	5267042	ExpressionStatement	i ++	826:4:17403:17406	5266922	0	True				
ANR	5267043	PostIncDecOperationExpression	i ++		5266922	0					
ANR	5267044	Identifier	i		5266922	0					
ANR	5267045	IncDec	++		5266922	1					
ANR	5267046	IfStatement	if ( ! r_num_is_op ( str [ i ] ) )		5266922	7					
ANR	5267047	Condition	! r_num_is_op ( str [ i ] )	828:7:17420:17440	5266922	0	True				
ANR	5267048	UnaryOperationExpression	! r_num_is_op ( str [ i ] )		5266922	0					
ANR	5267049	UnaryOperator	!		5266922	0					
ANR	5267050	CallExpression	r_num_is_op ( str [ i ] )		5266922	1					
ANR	5267051	Callee	r_num_is_op		5266922	0					
ANR	5267052	Identifier	r_num_is_op		5266922	0					
ANR	5267053	ArgumentList	str [ i ]		5266922	1					
ANR	5267054	Argument	str [ i ]		5266922	0					
ANR	5267055	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267056	Identifier	str		5266922	0					
ANR	5267057	Identifier	i		5266922	1					
ANR	5267058	CompoundStatement		24:30:441:441	5266922	1					
ANR	5267059	ReturnStatement	return len ;	829:4:17449:17459	5266922	0	True				
ANR	5267060	Identifier	len		5266922	0					
ANR	5267061	IfStatement	if ( str [ i ] == ')' )		5266922	8					
ANR	5267062	Condition	str [ i ] == ')'	831:7:17473:17485	5266922	0	True				
ANR	5267063	EqualityExpression	str [ i ] == ')'		5266922	0		==			
ANR	5267064	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267065	Identifier	str		5266922	0					
ANR	5267066	Identifier	i		5266922	1					
ANR	5267067	PrimaryExpression	')'		5266922	1					
ANR	5267068	CompoundStatement		27:22:486:486	5266922	1					
ANR	5267069	ReturnStatement	return i + 1 ;	832:4:17494:17506	5266922	0	True				
ANR	5267070	AdditiveExpression	i + 1		5266922	0		+			
ANR	5267071	Identifier	i		5266922	0					
ANR	5267072	PrimaryExpression	1		5266922	1					
ANR	5267073	ExpressionStatement	i ++	834:3:17516:17519	5266922	9	True				
ANR	5267074	PostIncDecOperationExpression	i ++		5266922	0					
ANR	5267075	Identifier	i		5266922	0					
ANR	5267076	IncDec	++		5266922	1					
ANR	5267077	WhileStatement	while ( str [ i ] != '\\0' && str [ i ] == ' ' )		5266922	10					
ANR	5267078	Condition	str [ i ] != '\\0' && str [ i ] == ' '	835:10:17531:17561	5266922	0	True				
ANR	5267079	AndExpression	str [ i ] != '\\0' && str [ i ] == ' '		5266922	0		&&			
ANR	5267080	EqualityExpression	str [ i ] != '\\0'		5266922	0		!=			
ANR	5267081	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267082	Identifier	str		5266922	0					
ANR	5267083	Identifier	i		5266922	1					
ANR	5267084	PrimaryExpression	'\\0'		5266922	1					
ANR	5267085	EqualityExpression	str [ i ] == ' '		5266922	1		==			
ANR	5267086	ArrayIndexing	str [ i ]		5266922	0					
ANR	5267087	Identifier	str		5266922	0					
ANR	5267088	Identifier	i		5266922	1					
ANR	5267089	PrimaryExpression	' '		5266922	1					
ANR	5267090	CompoundStatement		31:43:562:562	5266922	1					
ANR	5267091	ExpressionStatement	i ++	836:4:17570:17573	5266922	0	True				
ANR	5267092	PostIncDecOperationExpression	i ++		5266922	0					
ANR	5267093	Identifier	i		5266922	0					
ANR	5267094	IncDec	++		5266922	1					
ANR	5267095	ExpressionStatement	st = 0	838:3:17583:17589	5266922	11	True				
ANR	5267096	AssignmentExpression	st = 0		5266922	0		=			
ANR	5267097	Identifier	st		5266922	0					
ANR	5267098	PrimaryExpression	0		5266922	1					
ANR	5267099	BreakStatement	break ;	839:3:17594:17599	5266922	12	True				
ANR	5267100	ReturnStatement	return len ;	842:1:17609:17619	5266922	4	True				
ANR	5267101	Identifier	len		5266922	0					
ANR	5267102	ReturnType	R_API int		5266922	1					
ANR	5267103	Identifier	r_num_str_len		5266922	2					
ANR	5267104	ParameterList	const char * str		5266922	3					
ANR	5267105	Parameter	const char * str	805:24:16984:16998	5266922	0	True				
ANR	5267106	ParameterType	const char *		5266922	0					
ANR	5267107	Identifier	str		5266922	1					
ANR	5267108	CFGEntryNode	ENTRY		5266922		True				
ANR	5267109	CFGExitNode	EXIT		5266922		True				
ANR	5267110	Symbol	str		5266922						
ANR	5267111	Symbol	st		5266922						
ANR	5267112	Symbol	* i		5266922						
ANR	5267113	Symbol	len		5266922						
ANR	5267114	Symbol	i		5266922						
ANR	5267115	Symbol	r_num_is_op		5266922						
ANR	5267116	Symbol	* str		5266922						
ANR	5267117	Symbol	r_num_str_len		5266922						
ANR	5267118	Function	r_num_str_split	845:0:17624:17821							
ANR	5267119	FunctionDef	r_num_str_split (char * str)		5267118	0					
ANR	5267120	CompoundStatement		845:37:17661:17821	5267118	0					
ANR	5267121	IdentifierDeclStatement	"int i = 0 , count = 0 ;"	846:1:17664:17684	5267118	0	True				
ANR	5267122	IdentifierDecl	i = 0		5267118	0					
ANR	5267123	IdentifierDeclType	int		5267118	0					
ANR	5267124	Identifier	i		5267118	1					
ANR	5267125	AssignmentExpression	i = 0		5267118	2		=			
ANR	5267126	Identifier	i		5267118	0					
ANR	5267127	PrimaryExpression	0		5267118	1					
ANR	5267128	IdentifierDecl	count = 0		5267118	1					
ANR	5267129	IdentifierDeclType	int		5267118	0					
ANR	5267130	Identifier	count		5267118	1					
ANR	5267131	AssignmentExpression	count = 0		5267118	2		=			
ANR	5267132	Identifier	count		5267118	0					
ANR	5267133	PrimaryExpression	0		5267118	1					
ANR	5267134	IdentifierDeclStatement	const int len = strlen ( str ) ;	847:1:17687:17715	5267118	1	True				
ANR	5267135	IdentifierDecl	len = strlen ( str )		5267118	0					
ANR	5267136	IdentifierDeclType	const int		5267118	0					
ANR	5267137	Identifier	len		5267118	1					
ANR	5267138	AssignmentExpression	len = strlen ( str )		5267118	2		=			
ANR	5267139	Identifier	len		5267118	0					
ANR	5267140	CallExpression	strlen ( str )		5267118	1					
ANR	5267141	Callee	strlen		5267118	0					
ANR	5267142	Identifier	strlen		5267118	0					
ANR	5267143	ArgumentList	str		5267118	1					
ANR	5267144	Argument	str		5267118	0					
ANR	5267145	Identifier	str		5267118	0					
ANR	5267146	WhileStatement	while ( i < len )		5267118	2					
ANR	5267147	Condition	i < len	848:8:17725:17731	5267118	0	True				
ANR	5267148	RelationalExpression	i < len		5267118	0		<			
ANR	5267149	Identifier	i		5267118	0					
ANR	5267150	Identifier	len		5267118	1					
ANR	5267151	CompoundStatement		4:17:72:72	5267118	1					
ANR	5267152	ExpressionStatement	i += r_num_str_len ( str + i )	849:2:17738:17766	5267118	0	True				
ANR	5267153	AssignmentExpression	i += r_num_str_len ( str + i )		5267118	0		+=			
ANR	5267154	Identifier	i		5267118	0					
ANR	5267155	CallExpression	r_num_str_len ( str + i )		5267118	1					
ANR	5267156	Callee	r_num_str_len		5267118	0					
ANR	5267157	Identifier	r_num_str_len		5267118	0					
ANR	5267158	ArgumentList	str + i		5267118	1					
ANR	5267159	Argument	str + i		5267118	0					
ANR	5267160	AdditiveExpression	str + i		5267118	0		+			
ANR	5267161	Identifier	str		5267118	0					
ANR	5267162	Identifier	i		5267118	1					
ANR	5267163	ExpressionStatement	str [ i ] = '\\0'	850:2:17770:17783	5267118	1	True				
ANR	5267164	AssignmentExpression	str [ i ] = '\\0'		5267118	0		=			
ANR	5267165	ArrayIndexing	str [ i ]		5267118	0					
ANR	5267166	Identifier	str		5267118	0					
ANR	5267167	Identifier	i		5267118	1					
ANR	5267168	PrimaryExpression	'\\0'		5267118	1					
ANR	5267169	ExpressionStatement	i ++	851:2:17787:17790	5267118	2	True				
ANR	5267170	PostIncDecOperationExpression	i ++		5267118	0					
ANR	5267171	Identifier	i		5267118	0					
ANR	5267172	IncDec	++		5267118	1					
ANR	5267173	ExpressionStatement	count ++	852:2:17794:17801	5267118	3	True				
ANR	5267174	PostIncDecOperationExpression	count ++		5267118	0					
ANR	5267175	Identifier	count		5267118	0					
ANR	5267176	IncDec	++		5267118	1					
ANR	5267177	ReturnStatement	return count ;	854:1:17807:17819	5267118	3	True				
ANR	5267178	Identifier	count		5267118	0					
ANR	5267179	ReturnType	R_API int		5267118	1					
ANR	5267180	Identifier	r_num_str_split		5267118	2					
ANR	5267181	ParameterList	char * str		5267118	3					
ANR	5267182	Parameter	char * str	845:26:17650:17658	5267118	0	True				
ANR	5267183	ParameterType	char *		5267118	0					
ANR	5267184	Identifier	str		5267118	1					
ANR	5267185	CFGEntryNode	ENTRY		5267118		True				
ANR	5267186	CFGExitNode	EXIT		5267118		True				
ANR	5267187	Symbol	str		5267118						
ANR	5267188	Symbol	strlen		5267118						
ANR	5267189	Symbol	* i		5267118						
ANR	5267190	Symbol	len		5267118						
ANR	5267191	Symbol	count		5267118						
ANR	5267192	Symbol	i		5267118						
ANR	5267193	Symbol	* str		5267118						
ANR	5267194	Symbol	r_num_str_len		5267118						
ANR	5267195	Function	r_num_str_split_list	857:0:17824:18044							
ANR	5267196	FunctionDef	r_num_str_split_list (char * str)		5267195	0					
ANR	5267197	CompoundStatement		857:45:17869:18044	5267195	0					
ANR	5267198	IdentifierDeclStatement	"int i , count = r_num_str_split ( str ) ;"	858:1:17872:17908	5267195	0	True				
ANR	5267199	IdentifierDecl	i		5267195	0					
ANR	5267200	IdentifierDeclType	int		5267195	0					
ANR	5267201	Identifier	i		5267195	1					
ANR	5267202	IdentifierDecl	count = r_num_str_split ( str )		5267195	1					
ANR	5267203	IdentifierDeclType	int		5267195	0					
ANR	5267204	Identifier	count		5267195	1					
ANR	5267205	AssignmentExpression	count = r_num_str_split ( str )		5267195	2		=			
ANR	5267206	Identifier	count		5267195	0					
ANR	5267207	CallExpression	r_num_str_split ( str )		5267195	1					
ANR	5267208	Callee	r_num_str_split		5267195	0					
ANR	5267209	Identifier	r_num_str_split		5267195	0					
ANR	5267210	ArgumentList	str		5267195	1					
ANR	5267211	Argument	str		5267195	0					
ANR	5267212	Identifier	str		5267195	0					
ANR	5267213	IdentifierDeclStatement	RList * list = r_list_new ( ) ;	859:1:17911:17938	5267195	1	True				
ANR	5267214	IdentifierDecl	* list = r_list_new ( )		5267195	0					
ANR	5267215	IdentifierDeclType	RList *		5267195	0					
ANR	5267216	Identifier	list		5267195	1					
ANR	5267217	AssignmentExpression	* list = r_list_new ( )		5267195	2		=			
ANR	5267218	Identifier	list		5267195	0					
ANR	5267219	CallExpression	r_list_new ( )		5267195	1					
ANR	5267220	Callee	r_list_new		5267195	0					
ANR	5267221	Identifier	r_list_new		5267195	0					
ANR	5267222	ArgumentList			5267195	1					
ANR	5267223	ForStatement	for ( i = 0 ; i < count ; i ++ )		5267195	2					
ANR	5267224	ForInit	i = 0 ;	860:6:17946:17951	5267195	0	True				
ANR	5267225	AssignmentExpression	i = 0		5267195	0		=			
ANR	5267226	Identifier	i		5267195	0					
ANR	5267227	PrimaryExpression	0		5267195	1					
ANR	5267228	Condition	i < count	860:13:17953:17961	5267195	1	True				
ANR	5267229	RelationalExpression	i < count		5267195	0		<			
ANR	5267230	Identifier	i		5267195	0					
ANR	5267231	Identifier	count		5267195	1					
ANR	5267232	PostIncDecOperationExpression	i ++	860:24:17964:17966	5267195	2	True				
ANR	5267233	Identifier	i		5267195	0					
ANR	5267234	IncDec	++		5267195	1					
ANR	5267235	CompoundStatement		4:29:99:99	5267195	3					
ANR	5267236	ExpressionStatement	"r_list_append ( list , str )"	861:2:17973:17998	5267195	0	True				
ANR	5267237	CallExpression	"r_list_append ( list , str )"		5267195	0					
ANR	5267238	Callee	r_list_append		5267195	0					
ANR	5267239	Identifier	r_list_append		5267195	0					
ANR	5267240	ArgumentList	list		5267195	1					
ANR	5267241	Argument	list		5267195	0					
ANR	5267242	Identifier	list		5267195	0					
ANR	5267243	Argument	str		5267195	1					
ANR	5267244	Identifier	str		5267195	0					
ANR	5267245	ExpressionStatement	str += strlen ( str ) + 1	862:2:18002:18025	5267195	1	True				
ANR	5267246	AssignmentExpression	str += strlen ( str ) + 1		5267195	0		+=			
ANR	5267247	Identifier	str		5267195	0					
ANR	5267248	AdditiveExpression	strlen ( str ) + 1		5267195	1		+			
ANR	5267249	CallExpression	strlen ( str )		5267195	0					
ANR	5267250	Callee	strlen		5267195	0					
ANR	5267251	Identifier	strlen		5267195	0					
ANR	5267252	ArgumentList	str		5267195	1					
ANR	5267253	Argument	str		5267195	0					
ANR	5267254	Identifier	str		5267195	0					
ANR	5267255	PrimaryExpression	1		5267195	1					
ANR	5267256	ReturnStatement	return list ;	864:1:18031:18042	5267195	3	True				
ANR	5267257	Identifier	list		5267195	0					
ANR	5267258	ReturnType	R_API RList *		5267195	1					
ANR	5267259	Identifier	r_num_str_split_list		5267195	2					
ANR	5267260	ParameterList	char * str		5267195	3					
ANR	5267261	Parameter	char * str	857:34:17858:17866	5267195	0	True				
ANR	5267262	ParameterType	char *		5267195	0					
ANR	5267263	Identifier	str		5267195	1					
ANR	5267264	CFGEntryNode	ENTRY		5267195		True				
ANR	5267265	CFGExitNode	EXIT		5267195		True				
ANR	5267266	Symbol	str		5267195						
ANR	5267267	Symbol	strlen		5267195						
ANR	5267268	Symbol	r_num_str_split		5267195						
ANR	5267269	Symbol	count		5267195						
ANR	5267270	Symbol	i		5267195						
ANR	5267271	Symbol	list		5267195						
ANR	5267272	Symbol	r_list_new		5267195						
ANR	5267273	Function	r_num_dup	867:0:18047:18174							
ANR	5267274	FunctionDef	r_num_dup (ut64 n)		5267273	0					
ANR	5267275	CompoundStatement		867:30:18077:18174	5267273	0					
ANR	5267276	IdentifierDeclStatement	ut64 * hn = malloc ( sizeof ( ut64 ) ) ;	868:1:18080:18113	5267273	0	True				
ANR	5267277	IdentifierDecl	* hn = malloc ( sizeof ( ut64 ) )		5267273	0					
ANR	5267278	IdentifierDeclType	ut64 *		5267273	0					
ANR	5267279	Identifier	hn		5267273	1					
ANR	5267280	AssignmentExpression	* hn = malloc ( sizeof ( ut64 ) )		5267273	2		=			
ANR	5267281	Identifier	hn		5267273	0					
ANR	5267282	CallExpression	malloc ( sizeof ( ut64 ) )		5267273	1					
ANR	5267283	Callee	malloc		5267273	0					
ANR	5267284	Identifier	malloc		5267273	0					
ANR	5267285	ArgumentList	sizeof ( ut64 )		5267273	1					
ANR	5267286	Argument	sizeof ( ut64 )		5267273	0					
ANR	5267287	SizeofExpression	sizeof ( ut64 )		5267273	0					
ANR	5267288	Sizeof	sizeof		5267273	0					
ANR	5267289	SizeofOperand	ut64		5267273	1					
ANR	5267290	IfStatement	if ( ! hn )		5267273	1					
ANR	5267291	Condition	! hn	869:5:18120:18122	5267273	0	True				
ANR	5267292	UnaryOperationExpression	! hn		5267273	0					
ANR	5267293	UnaryOperator	!		5267273	0					
ANR	5267294	Identifier	hn		5267273	1					
ANR	5267295	CompoundStatement		3:10:47:47	5267273	1					
ANR	5267296	ReturnStatement	return NULL ;	870:2:18129:18140	5267273	0	True				
ANR	5267297	Identifier	NULL		5267273	0					
ANR	5267298	ExpressionStatement	* hn = n	872:1:18146:18153	5267273	2	True				
ANR	5267299	AssignmentExpression	* hn = n		5267273	0		=			
ANR	5267300	UnaryOperationExpression	* hn		5267273	0					
ANR	5267301	UnaryOperator	*		5267273	0					
ANR	5267302	Identifier	hn		5267273	1					
ANR	5267303	Identifier	n		5267273	1					
ANR	5267304	ReturnStatement	return ( void * ) hn ;	873:1:18156:18172	5267273	3	True				
ANR	5267305	CastExpression	( void * ) hn		5267273	0					
ANR	5267306	CastTarget	void *		5267273	0					
ANR	5267307	Identifier	hn		5267273	1					
ANR	5267308	ReturnType	R_API void *		5267273	1					
ANR	5267309	Identifier	r_num_dup		5267273	2					
ANR	5267310	ParameterList	ut64 n		5267273	3					
ANR	5267311	Parameter	ut64 n	867:22:18069:18074	5267273	0	True				
ANR	5267312	ParameterType	ut64		5267273	0					
ANR	5267313	Identifier	n		5267273	1					
ANR	5267314	CFGEntryNode	ENTRY		5267273		True				
ANR	5267315	CFGExitNode	EXIT		5267273		True				
ANR	5267316	Symbol	malloc		5267273						
ANR	5267317	Symbol	NULL		5267273						
ANR	5267318	Symbol	hn		5267273						
ANR	5267319	Symbol	n		5267273						
ANR	5267320	Symbol	* hn		5267273						
ANR	5267321	Function	r_num_cos	876:0:18177:18229							
ANR	5267322	FunctionDef	r_num_cos (double a)		5267321	0					
ANR	5267323	CompoundStatement		876:33:18210:18229	5267321	0					
ANR	5267324	ReturnStatement	return cos ( a ) ;	877:1:18213:18227	5267321	0	True				
ANR	5267325	CallExpression	cos ( a )		5267321	0					
ANR	5267326	Callee	cos		5267321	0					
ANR	5267327	Identifier	cos		5267321	0					
ANR	5267328	ArgumentList	a		5267321	1					
ANR	5267329	Argument	a		5267321	0					
ANR	5267330	Identifier	a		5267321	0					
ANR	5267331	ReturnType	R_API double		5267321	1					
ANR	5267332	Identifier	r_num_cos		5267321	2					
ANR	5267333	ParameterList	double a		5267321	3					
ANR	5267334	Parameter	double a	876:23:18200:18207	5267321	0	True				
ANR	5267335	ParameterType	double		5267321	0					
ANR	5267336	Identifier	a		5267321	1					
ANR	5267337	CFGEntryNode	ENTRY		5267321		True				
ANR	5267338	CFGExitNode	EXIT		5267321		True				
ANR	5267339	Symbol	a		5267321						
ANR	5267340	Symbol	cos		5267321						
ANR	5267341	Function	r_num_sin	880:0:18232:18284							
ANR	5267342	FunctionDef	r_num_sin (double a)		5267341	0					
ANR	5267343	CompoundStatement		880:33:18265:18284	5267341	0					
ANR	5267344	ReturnStatement	return sin ( a ) ;	881:1:18268:18282	5267341	0	True				
ANR	5267345	CallExpression	sin ( a )		5267341	0					
ANR	5267346	Callee	sin		5267341	0					
ANR	5267347	Identifier	sin		5267341	0					
ANR	5267348	ArgumentList	a		5267341	1					
ANR	5267349	Argument	a		5267341	0					
ANR	5267350	Identifier	a		5267341	0					
ANR	5267351	ReturnType	R_API double		5267341	1					
ANR	5267352	Identifier	r_num_sin		5267341	2					
ANR	5267353	ParameterList	double a		5267341	3					
ANR	5267354	Parameter	double a	880:23:18255:18262	5267341	0	True				
ANR	5267355	ParameterType	double		5267341	0					
ANR	5267356	Identifier	a		5267341	1					
ANR	5267357	CFGEntryNode	ENTRY		5267341		True				
ANR	5267358	CFGExitNode	EXIT		5267341		True				
ANR	5267359	Symbol	a		5267341						
ANR	5267360	Symbol	sin		5267341						
