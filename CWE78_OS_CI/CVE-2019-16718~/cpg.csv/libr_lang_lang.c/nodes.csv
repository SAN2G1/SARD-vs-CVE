command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4931288	File	data/converged/CVE-2019-16718~_radare2/libr_lang_lang.c								
ANR	4931289	DeclStmt									
ANR	4931290	Decl							include < r_util . h >	include < r_util . h > ( r_lang )	R_LIB_VERSION
ANR	4931291	DeclStmt									
ANR	4931292	Decl							RLang	RLang *	__lang
ANR	4931293	Function	r_lang_plugin_free	20:0:392:485							
ANR	4931294	FunctionDef	r_lang_plugin_free (RLangPlugin * p)		4931293	0					
ANR	4931295	CompoundStatement		20:47:439:485	4931293	0					
ANR	4931296	IfStatement	if ( p && p -> fini )		4931293	0					
ANR	4931297	Condition	p && p -> fini	21:5:446:457	4931293	0	True				
ANR	4931298	AndExpression	p && p -> fini		4931293	0		&&			
ANR	4931299	Identifier	p		4931293	0					
ANR	4931300	PtrMemberAccess	p -> fini		4931293	1					
ANR	4931301	Identifier	p		4931293	0					
ANR	4931302	Identifier	fini		4931293	1					
ANR	4931303	CompoundStatement		2:19:20:20	4931293	1					
ANR	4931304	ExpressionStatement	p -> fini ( __lang )	22:2:464:480	4931293	0	True				
ANR	4931305	CallExpression	p -> fini ( __lang )		4931293	0					
ANR	4931306	Callee	p -> fini		4931293	0					
ANR	4931307	PtrMemberAccess	p -> fini		4931293	0					
ANR	4931308	Identifier	p		4931293	0					
ANR	4931309	Identifier	fini		4931293	1					
ANR	4931310	ArgumentList	__lang		4931293	1					
ANR	4931311	Argument	__lang		4931293	0					
ANR	4931312	Identifier	__lang		4931293	0					
ANR	4931313	ReturnType	R_API void		4931293	1					
ANR	4931314	Identifier	r_lang_plugin_free		4931293	2					
ANR	4931315	ParameterList	RLangPlugin * p		4931293	3					
ANR	4931316	Parameter	RLangPlugin * p	20:31:423:436	4931293	0	True				
ANR	4931317	ParameterType	RLangPlugin *		4931293	0					
ANR	4931318	Identifier	p		4931293	1					
ANR	4931319	CFGEntryNode	ENTRY		4931293		True				
ANR	4931320	CFGExitNode	EXIT		4931293		True				
ANR	4931321	Symbol	p		4931293						
ANR	4931322	Symbol	p -> fini		4931293						
ANR	4931323	Symbol	__lang		4931293						
ANR	4931324	Symbol	* p		4931293						
ANR	4931325	Function	r_lang_new	26:0:488:1240							
ANR	4931326	FunctionDef	r_lang_new ()		4931325	0					
ANR	4931327	CompoundStatement		26:26:514:1240	4931325	0					
ANR	4931328	IdentifierDeclStatement	RLang * lang = R_NEW0 ( RLang ) ;	27:1:517:545	4931325	0	True				
ANR	4931329	IdentifierDecl	* lang = R_NEW0 ( RLang )		4931325	0					
ANR	4931330	IdentifierDeclType	RLang *		4931325	0					
ANR	4931331	Identifier	lang		4931325	1					
ANR	4931332	AssignmentExpression	* lang = R_NEW0 ( RLang )		4931325	2		=			
ANR	4931333	Identifier	lang		4931325	0					
ANR	4931334	CallExpression	R_NEW0 ( RLang )		4931325	1					
ANR	4931335	Callee	R_NEW0		4931325	0					
ANR	4931336	Identifier	R_NEW0		4931325	0					
ANR	4931337	ArgumentList	RLang		4931325	1					
ANR	4931338	Argument	RLang		4931325	0					
ANR	4931339	Identifier	RLang		4931325	0					
ANR	4931340	IfStatement	if ( ! lang )		4931325	1					
ANR	4931341	Condition	! lang	28:5:552:556	4931325	0	True				
ANR	4931342	UnaryOperationExpression	! lang		4931325	0					
ANR	4931343	UnaryOperator	!		4931325	0					
ANR	4931344	Identifier	lang		4931325	1					
ANR	4931345	CompoundStatement		3:12:44:44	4931325	1					
ANR	4931346	ReturnStatement	return NULL ;	29:2:563:574	4931325	0	True				
ANR	4931347	Identifier	NULL		4931325	0					
ANR	4931348	ExpressionStatement	lang -> user = NULL	31:1:580:597	4931325	2	True				
ANR	4931349	AssignmentExpression	lang -> user = NULL		4931325	0		=			
ANR	4931350	PtrMemberAccess	lang -> user		4931325	0					
ANR	4931351	Identifier	lang		4931325	0					
ANR	4931352	Identifier	user		4931325	1					
ANR	4931353	Identifier	NULL		4931325	1					
ANR	4931354	ExpressionStatement	lang -> langs = r_list_new ( )	32:1:600:627	4931325	3	True				
ANR	4931355	AssignmentExpression	lang -> langs = r_list_new ( )		4931325	0		=			
ANR	4931356	PtrMemberAccess	lang -> langs		4931325	0					
ANR	4931357	Identifier	lang		4931325	0					
ANR	4931358	Identifier	langs		4931325	1					
ANR	4931359	CallExpression	r_list_new ( )		4931325	1					
ANR	4931360	Callee	r_list_new		4931325	0					
ANR	4931361	Identifier	r_list_new		4931325	0					
ANR	4931362	ArgumentList			4931325	1					
ANR	4931363	IfStatement	if ( ! lang -> langs )		4931325	4					
ANR	4931364	Condition	! lang -> langs	33:5:634:645	4931325	0	True				
ANR	4931365	UnaryOperationExpression	! lang -> langs		4931325	0					
ANR	4931366	UnaryOperator	!		4931325	0					
ANR	4931367	PtrMemberAccess	lang -> langs		4931325	1					
ANR	4931368	Identifier	lang		4931325	0					
ANR	4931369	Identifier	langs		4931325	1					
ANR	4931370	CompoundStatement		8:19:133:133	4931325	1					
ANR	4931371	ExpressionStatement	r_lang_free ( lang )	34:2:652:670	4931325	0	True				
ANR	4931372	CallExpression	r_lang_free ( lang )		4931325	0					
ANR	4931373	Callee	r_lang_free		4931325	0					
ANR	4931374	Identifier	r_lang_free		4931325	0					
ANR	4931375	ArgumentList	lang		4931325	1					
ANR	4931376	Argument	lang		4931325	0					
ANR	4931377	Identifier	lang		4931325	0					
ANR	4931378	ReturnStatement	return NULL ;	35:2:674:685	4931325	1	True				
ANR	4931379	Identifier	NULL		4931325	0					
ANR	4931380	ExpressionStatement	lang -> langs -> free = ( RListFree ) r_lang_plugin_free	37:1:691:740	4931325	5	True				
ANR	4931381	AssignmentExpression	lang -> langs -> free = ( RListFree ) r_lang_plugin_free		4931325	0		=			
ANR	4931382	PtrMemberAccess	lang -> langs -> free		4931325	0					
ANR	4931383	PtrMemberAccess	lang -> langs		4931325	0					
ANR	4931384	Identifier	lang		4931325	0					
ANR	4931385	Identifier	langs		4931325	1					
ANR	4931386	Identifier	free		4931325	1					
ANR	4931387	CastExpression	( RListFree ) r_lang_plugin_free		4931325	1					
ANR	4931388	CastTarget	RListFree		4931325	0					
ANR	4931389	Identifier	r_lang_plugin_free		4931325	1					
ANR	4931390	ExpressionStatement	lang -> defs = r_list_new ( )	38:1:743:769	4931325	6	True				
ANR	4931391	AssignmentExpression	lang -> defs = r_list_new ( )		4931325	0		=			
ANR	4931392	PtrMemberAccess	lang -> defs		4931325	0					
ANR	4931393	Identifier	lang		4931325	0					
ANR	4931394	Identifier	defs		4931325	1					
ANR	4931395	CallExpression	r_list_new ( )		4931325	1					
ANR	4931396	Callee	r_list_new		4931325	0					
ANR	4931397	Identifier	r_list_new		4931325	0					
ANR	4931398	ArgumentList			4931325	1					
ANR	4931399	IfStatement	if ( ! lang -> defs )		4931325	7					
ANR	4931400	Condition	! lang -> defs	39:5:776:786	4931325	0	True				
ANR	4931401	UnaryOperationExpression	! lang -> defs		4931325	0					
ANR	4931402	UnaryOperator	!		4931325	0					
ANR	4931403	PtrMemberAccess	lang -> defs		4931325	1					
ANR	4931404	Identifier	lang		4931325	0					
ANR	4931405	Identifier	defs		4931325	1					
ANR	4931406	CompoundStatement		14:18:274:274	4931325	1					
ANR	4931407	ExpressionStatement	r_lang_free ( lang )	40:2:793:811	4931325	0	True				
ANR	4931408	CallExpression	r_lang_free ( lang )		4931325	0					
ANR	4931409	Callee	r_lang_free		4931325	0					
ANR	4931410	Identifier	r_lang_free		4931325	0					
ANR	4931411	ArgumentList	lang		4931325	1					
ANR	4931412	Argument	lang		4931325	0					
ANR	4931413	Identifier	lang		4931325	0					
ANR	4931414	ReturnStatement	return NULL ;	41:2:815:826	4931325	1	True				
ANR	4931415	Identifier	NULL		4931325	0					
ANR	4931416	ExpressionStatement	lang -> defs -> free = ( RListFree ) r_lang_def_free	43:1:832:877	4931325	8	True				
ANR	4931417	AssignmentExpression	lang -> defs -> free = ( RListFree ) r_lang_def_free		4931325	0		=			
ANR	4931418	PtrMemberAccess	lang -> defs -> free		4931325	0					
ANR	4931419	PtrMemberAccess	lang -> defs		4931325	0					
ANR	4931420	Identifier	lang		4931325	0					
ANR	4931421	Identifier	defs		4931325	1					
ANR	4931422	Identifier	free		4931325	1					
ANR	4931423	CastExpression	( RListFree ) r_lang_def_free		4931325	1					
ANR	4931424	CastTarget	RListFree		4931325	0					
ANR	4931425	Identifier	r_lang_def_free		4931325	1					
ANR	4931426	ExpressionStatement	lang -> cb_printf = ( PrintfCallback ) printf	44:1:880:920	4931325	9	True				
ANR	4931427	AssignmentExpression	lang -> cb_printf = ( PrintfCallback ) printf		4931325	0		=			
ANR	4931428	PtrMemberAccess	lang -> cb_printf		4931325	0					
ANR	4931429	Identifier	lang		4931325	0					
ANR	4931430	Identifier	cb_printf		4931325	1					
ANR	4931431	CastExpression	( PrintfCallback ) printf		4931325	1					
ANR	4931432	CastTarget	PrintfCallback		4931325	0					
ANR	4931433	Identifier	printf		4931325	1					
ANR	4931434	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_c )"	45:1:923:958	4931325	10	True				
ANR	4931435	CallExpression	"r_lang_add ( lang , & r_lang_plugin_c )"		4931325	0					
ANR	4931436	Callee	r_lang_add		4931325	0					
ANR	4931437	Identifier	r_lang_add		4931325	0					
ANR	4931438	ArgumentList	lang		4931325	1					
ANR	4931439	Argument	lang		4931325	0					
ANR	4931440	Identifier	lang		4931325	0					
ANR	4931441	Argument	& r_lang_plugin_c		4931325	1					
ANR	4931442	UnaryOperationExpression	& r_lang_plugin_c		4931325	0					
ANR	4931443	UnaryOperator	&		4931325	0					
ANR	4931444	Identifier	r_lang_plugin_c		4931325	1					
ANR	4931445	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_cpipe )"	47:1:974:1013	4931325	11	True				
ANR	4931446	CallExpression	"r_lang_add ( lang , & r_lang_plugin_cpipe )"		4931325	0					
ANR	4931447	Callee	r_lang_add		4931325	0					
ANR	4931448	Identifier	r_lang_add		4931325	0					
ANR	4931449	ArgumentList	lang		4931325	1					
ANR	4931450	Argument	lang		4931325	0					
ANR	4931451	Identifier	lang		4931325	0					
ANR	4931452	Argument	& r_lang_plugin_cpipe		4931325	1					
ANR	4931453	UnaryOperationExpression	& r_lang_plugin_cpipe		4931325	0					
ANR	4931454	UnaryOperator	&		4931325	0					
ANR	4931455	Identifier	r_lang_plugin_cpipe		4931325	1					
ANR	4931456	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_vala )"	49:1:1023:1061	4931325	12	True				
ANR	4931457	CallExpression	"r_lang_add ( lang , & r_lang_plugin_vala )"		4931325	0					
ANR	4931458	Callee	r_lang_add		4931325	0					
ANR	4931459	Identifier	r_lang_add		4931325	0					
ANR	4931460	ArgumentList	lang		4931325	1					
ANR	4931461	Argument	lang		4931325	0					
ANR	4931462	Identifier	lang		4931325	0					
ANR	4931463	Argument	& r_lang_plugin_vala		4931325	1					
ANR	4931464	UnaryOperationExpression	& r_lang_plugin_vala		4931325	0					
ANR	4931465	UnaryOperator	&		4931325	0					
ANR	4931466	Identifier	r_lang_plugin_vala		4931325	1					
ANR	4931467	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_rust )"	50:1:1064:1102	4931325	13	True				
ANR	4931468	CallExpression	"r_lang_add ( lang , & r_lang_plugin_rust )"		4931325	0					
ANR	4931469	Callee	r_lang_add		4931325	0					
ANR	4931470	Identifier	r_lang_add		4931325	0					
ANR	4931471	ArgumentList	lang		4931325	1					
ANR	4931472	Argument	lang		4931325	0					
ANR	4931473	Identifier	lang		4931325	0					
ANR	4931474	Argument	& r_lang_plugin_rust		4931325	1					
ANR	4931475	UnaryOperationExpression	& r_lang_plugin_rust		4931325	0					
ANR	4931476	UnaryOperator	&		4931325	0					
ANR	4931477	Identifier	r_lang_plugin_rust		4931325	1					
ANR	4931478	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_zig )"	51:1:1105:1142	4931325	14	True				
ANR	4931479	CallExpression	"r_lang_add ( lang , & r_lang_plugin_zig )"		4931325	0					
ANR	4931480	Callee	r_lang_add		4931325	0					
ANR	4931481	Identifier	r_lang_add		4931325	0					
ANR	4931482	ArgumentList	lang		4931325	1					
ANR	4931483	Argument	lang		4931325	0					
ANR	4931484	Identifier	lang		4931325	0					
ANR	4931485	Argument	& r_lang_plugin_zig		4931325	1					
ANR	4931486	UnaryOperationExpression	& r_lang_plugin_zig		4931325	0					
ANR	4931487	UnaryOperator	&		4931325	0					
ANR	4931488	Identifier	r_lang_plugin_zig		4931325	1					
ANR	4931489	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_pipe )"	52:1:1145:1183	4931325	15	True				
ANR	4931490	CallExpression	"r_lang_add ( lang , & r_lang_plugin_pipe )"		4931325	0					
ANR	4931491	Callee	r_lang_add		4931325	0					
ANR	4931492	Identifier	r_lang_add		4931325	0					
ANR	4931493	ArgumentList	lang		4931325	1					
ANR	4931494	Argument	lang		4931325	0					
ANR	4931495	Identifier	lang		4931325	0					
ANR	4931496	Argument	& r_lang_plugin_pipe		4931325	1					
ANR	4931497	UnaryOperationExpression	& r_lang_plugin_pipe		4931325	0					
ANR	4931498	UnaryOperator	&		4931325	0					
ANR	4931499	Identifier	r_lang_plugin_pipe		4931325	1					
ANR	4931500	ExpressionStatement	"r_lang_add ( lang , & r_lang_plugin_lib )"	53:1:1186:1223	4931325	16	True				
ANR	4931501	CallExpression	"r_lang_add ( lang , & r_lang_plugin_lib )"		4931325	0					
ANR	4931502	Callee	r_lang_add		4931325	0					
ANR	4931503	Identifier	r_lang_add		4931325	0					
ANR	4931504	ArgumentList	lang		4931325	1					
ANR	4931505	Argument	lang		4931325	0					
ANR	4931506	Identifier	lang		4931325	0					
ANR	4931507	Argument	& r_lang_plugin_lib		4931325	1					
ANR	4931508	UnaryOperationExpression	& r_lang_plugin_lib		4931325	0					
ANR	4931509	UnaryOperator	&		4931325	0					
ANR	4931510	Identifier	r_lang_plugin_lib		4931325	1					
ANR	4931511	ReturnStatement	return lang ;	55:1:1227:1238	4931325	17	True				
ANR	4931512	Identifier	lang		4931325	0					
ANR	4931513	ReturnType	R_API RLang *		4931325	1					
ANR	4931514	Identifier	r_lang_new		4931325	2					
ANR	4931515	ParameterList			4931325	3					
ANR	4931516	CFGEntryNode	ENTRY		4931325		True				
ANR	4931517	CFGExitNode	EXIT		4931325		True				
ANR	4931518	Symbol	r_lang_plugin_free		4931325						
ANR	4931519	Symbol	* * lang		4931325						
ANR	4931520	Symbol	* lang		4931325						
ANR	4931521	Symbol	RLang		4931325						
ANR	4931522	Symbol	& r_lang_plugin_zig		4931325						
ANR	4931523	Symbol	lang -> langs		4931325						
ANR	4931524	Symbol	printf		4931325						
ANR	4931525	Symbol	* lang -> langs		4931325						
ANR	4931526	Symbol	lang		4931325						
ANR	4931527	Symbol	& r_lang_plugin_lib		4931325						
ANR	4931528	Symbol	r_lang_def_free		4931325						
ANR	4931529	Symbol	lang -> langs -> free		4931325						
ANR	4931530	Symbol	NULL		4931325						
ANR	4931531	Symbol	lang -> defs		4931325						
ANR	4931532	Symbol	& r_lang_plugin_c		4931325						
ANR	4931533	Symbol	& r_lang_plugin_rust		4931325						
ANR	4931534	Symbol	& r_lang_plugin_vala		4931325						
ANR	4931535	Symbol	* lang -> defs		4931325						
ANR	4931536	Symbol	R_NEW0		4931325						
ANR	4931537	Symbol	& r_lang_plugin_cpipe		4931325						
ANR	4931538	Symbol	lang -> cb_printf		4931325						
ANR	4931539	Symbol	lang -> defs -> free		4931325						
ANR	4931540	Symbol	& r_lang_plugin_pipe		4931325						
ANR	4931541	Symbol	lang -> user		4931325						
ANR	4931542	Symbol	r_list_new		4931325						
ANR	4931543	Function	r_lang_free	58:0:1243:1447							
ANR	4931544	FunctionDef	r_lang_free (RLang * lang)		4931543	0					
ANR	4931545	CompoundStatement		58:36:1279:1447	4931543	0					
ANR	4931546	IfStatement	if ( lang )		4931543	0					
ANR	4931547	Condition	lang	59:5:1286:1289	4931543	0	True				
ANR	4931548	Identifier	lang		4931543	0					
ANR	4931549	CompoundStatement		2:11:12:12	4931543	1					
ANR	4931550	ExpressionStatement	__lang = NULL	60:2:1296:1309	4931543	0	True				
ANR	4931551	AssignmentExpression	__lang = NULL		4931543	0		=			
ANR	4931552	Identifier	__lang		4931543	0					
ANR	4931553	Identifier	NULL		4931543	1					
ANR	4931554	ExpressionStatement	"r_lang_undef ( lang , NULL )"	61:2:1313:1338	4931543	1	True				
ANR	4931555	CallExpression	"r_lang_undef ( lang , NULL )"		4931543	0					
ANR	4931556	Callee	r_lang_undef		4931543	0					
ANR	4931557	Identifier	r_lang_undef		4931543	0					
ANR	4931558	ArgumentList	lang		4931543	1					
ANR	4931559	Argument	lang		4931543	0					
ANR	4931560	Identifier	lang		4931543	0					
ANR	4931561	Argument	NULL		4931543	1					
ANR	4931562	Identifier	NULL		4931543	0					
ANR	4931563	ExpressionStatement	r_list_free ( lang -> langs )	62:2:1342:1367	4931543	2	True				
ANR	4931564	CallExpression	r_list_free ( lang -> langs )		4931543	0					
ANR	4931565	Callee	r_list_free		4931543	0					
ANR	4931566	Identifier	r_list_free		4931543	0					
ANR	4931567	ArgumentList	lang -> langs		4931543	1					
ANR	4931568	Argument	lang -> langs		4931543	0					
ANR	4931569	PtrMemberAccess	lang -> langs		4931543	0					
ANR	4931570	Identifier	lang		4931543	0					
ANR	4931571	Identifier	langs		4931543	1					
ANR	4931572	ExpressionStatement	r_list_free ( lang -> defs )	63:2:1371:1395	4931543	3	True				
ANR	4931573	CallExpression	r_list_free ( lang -> defs )		4931543	0					
ANR	4931574	Callee	r_list_free		4931543	0					
ANR	4931575	Identifier	r_list_free		4931543	0					
ANR	4931576	ArgumentList	lang -> defs		4931543	1					
ANR	4931577	Argument	lang -> defs		4931543	0					
ANR	4931578	PtrMemberAccess	lang -> defs		4931543	0					
ANR	4931579	Identifier	lang		4931543	0					
ANR	4931580	Identifier	defs		4931543	1					
ANR	4931581	ExpressionStatement	free ( lang )	65:2:1431:1442	4931543	4	True				
ANR	4931582	CallExpression	free ( lang )		4931543	0					
ANR	4931583	Callee	free		4931543	0					
ANR	4931584	Identifier	free		4931543	0					
ANR	4931585	ArgumentList	lang		4931543	1					
ANR	4931586	Argument	lang		4931543	0					
ANR	4931587	Identifier	lang		4931543	0					
ANR	4931588	ReturnType	R_API void		4931543	1					
ANR	4931589	Identifier	r_lang_free		4931543	2					
ANR	4931590	ParameterList	RLang * lang		4931543	3					
ANR	4931591	Parameter	RLang * lang	58:23:1266:1276	4931543	0	True				
ANR	4931592	ParameterType	RLang *		4931543	0					
ANR	4931593	Identifier	lang		4931543	1					
ANR	4931594	CFGEntryNode	ENTRY		4931543		True				
ANR	4931595	CFGExitNode	EXIT		4931543		True				
ANR	4931596	Symbol	NULL		4931543						
ANR	4931597	Symbol	* lang		4931543						
ANR	4931598	Symbol	lang -> defs		4931543						
ANR	4931599	Symbol	__lang		4931543						
ANR	4931600	Symbol	lang		4931543						
ANR	4931601	Symbol	lang -> langs		4931543						
ANR	4931602	Function	r_lang_set_user_ptr	73:0:1645:1723							
ANR	4931603	FunctionDef	"r_lang_set_user_ptr (RLang * lang , void * user)"		4931602	0					
ANR	4931604	CompoundStatement		73:56:1701:1723	4931602	0					
ANR	4931605	ExpressionStatement	lang -> user = user	74:1:1704:1721	4931602	0	True				
ANR	4931606	AssignmentExpression	lang -> user = user		4931602	0		=			
ANR	4931607	PtrMemberAccess	lang -> user		4931602	0					
ANR	4931608	Identifier	lang		4931602	0					
ANR	4931609	Identifier	user		4931602	1					
ANR	4931610	Identifier	user		4931602	1					
ANR	4931611	ReturnType	R_API void		4931602	1					
ANR	4931612	Identifier	r_lang_set_user_ptr		4931602	2					
ANR	4931613	ParameterList	"RLang * lang , void * user"		4931602	3					
ANR	4931614	Parameter	RLang * lang	73:31:1676:1686	4931602	0	True				
ANR	4931615	ParameterType	RLang *		4931602	0					
ANR	4931616	Identifier	lang		4931602	1					
ANR	4931617	Parameter	void * user	73:44:1689:1698	4931602	1	True				
ANR	4931618	ParameterType	void *		4931602	0					
ANR	4931619	Identifier	user		4931602	1					
ANR	4931620	CFGEntryNode	ENTRY		4931602		True				
ANR	4931621	CFGExitNode	EXIT		4931602		True				
ANR	4931622	Symbol	* lang		4931602						
ANR	4931623	Symbol	lang		4931602						
ANR	4931624	Symbol	user		4931602						
ANR	4931625	Symbol	lang -> user		4931602						
ANR	4931626	Function	r_lang_define	77:0:1726:2163							
ANR	4931627	FunctionDef	"r_lang_define (RLang * lang , const char * type , const char * name , void * value)"		4931626	0					
ANR	4931628	CompoundStatement		77:87:1813:2163	4931626	0					
ANR	4931629	IdentifierDeclStatement	RLangDef * def ;	78:1:1816:1829	4931626	0	True				
ANR	4931630	IdentifierDecl	* def		4931626	0					
ANR	4931631	IdentifierDeclType	RLangDef *		4931626	0					
ANR	4931632	Identifier	def		4931626	1					
ANR	4931633	IdentifierDeclStatement	RListIter * iter ;	79:1:1832:1847	4931626	1	True				
ANR	4931634	IdentifierDecl	* iter		4931626	0					
ANR	4931635	IdentifierDeclType	RListIter *		4931626	0					
ANR	4931636	Identifier	iter		4931626	1					
ANR	4931637	Statement	r_list_foreach	80:1:1850:1863	4931626	2	True				
ANR	4931638	Statement	(	80:16:1865:1865	4931626	3	True				
ANR	4931639	Statement	lang	80:17:1866:1869	4931626	4	True				
ANR	4931640	Statement	->	80:21:1870:1871	4931626	5	True				
ANR	4931641	Statement	defs	80:23:1872:1875	4931626	6	True				
ANR	4931642	Statement	","	80:27:1876:1876	4931626	7	True				
ANR	4931643	Statement	iter	80:29:1878:1881	4931626	8	True				
ANR	4931644	Statement	","	80:33:1882:1882	4931626	9	True				
ANR	4931645	Statement	def	80:35:1884:1886	4931626	10	True				
ANR	4931646	Statement	)	80:38:1887:1887	4931626	11	True				
ANR	4931647	CompoundStatement		4:40:75:75	4931626	12					
ANR	4931648	IfStatement	"if ( ! r_str_casecmp ( name , def -> name ) )"		4931626	0					
ANR	4931649	Condition	"! r_str_casecmp ( name , def -> name )"	81:6:1897:1928	4931626	0	True				
ANR	4931650	UnaryOperationExpression	"! r_str_casecmp ( name , def -> name )"		4931626	0					
ANR	4931651	UnaryOperator	!		4931626	0					
ANR	4931652	CallExpression	"r_str_casecmp ( name , def -> name )"		4931626	1					
ANR	4931653	Callee	r_str_casecmp		4931626	0					
ANR	4931654	Identifier	r_str_casecmp		4931626	0					
ANR	4931655	ArgumentList	name		4931626	1					
ANR	4931656	Argument	name		4931626	0					
ANR	4931657	Identifier	name		4931626	0					
ANR	4931658	Argument	def -> name		4931626	1					
ANR	4931659	PtrMemberAccess	def -> name		4931626	0					
ANR	4931660	Identifier	def		4931626	0					
ANR	4931661	Identifier	name		4931626	1					
ANR	4931662	CompoundStatement		5:40:117:117	4931626	1					
ANR	4931663	ExpressionStatement	def -> value = value	82:3:1936:1954	4931626	0	True				
ANR	4931664	AssignmentExpression	def -> value = value		4931626	0		=			
ANR	4931665	PtrMemberAccess	def -> value		4931626	0					
ANR	4931666	Identifier	def		4931626	0					
ANR	4931667	Identifier	value		4931626	1					
ANR	4931668	Identifier	value		4931626	1					
ANR	4931669	ReturnStatement	return true ;	83:3:1959:1971	4931626	1	True				
ANR	4931670	Identifier	true		4931626	0					
ANR	4931671	ExpressionStatement	def = R_NEW0 ( RLangDef )	86:1:1981:2004	4931626	13	True				
ANR	4931672	AssignmentExpression	def = R_NEW0 ( RLangDef )		4931626	0		=			
ANR	4931673	Identifier	def		4931626	0					
ANR	4931674	CallExpression	R_NEW0 ( RLangDef )		4931626	1					
ANR	4931675	Callee	R_NEW0		4931626	0					
ANR	4931676	Identifier	R_NEW0		4931626	0					
ANR	4931677	ArgumentList	RLangDef		4931626	1					
ANR	4931678	Argument	RLangDef		4931626	0					
ANR	4931679	Identifier	RLangDef		4931626	0					
ANR	4931680	IfStatement	if ( ! def )		4931626	14					
ANR	4931681	Condition	! def	87:5:2011:2014	4931626	0	True				
ANR	4931682	UnaryOperationExpression	! def		4931626	0					
ANR	4931683	UnaryOperator	!		4931626	0					
ANR	4931684	Identifier	def		4931626	1					
ANR	4931685	CompoundStatement		11:11:203:203	4931626	1					
ANR	4931686	ReturnStatement	return false ;	88:2:2021:2033	4931626	0	True				
ANR	4931687	Identifier	false		4931626	0					
ANR	4931688	ExpressionStatement	def -> type = strdup ( type )	90:1:2039:2064	4931626	15	True				
ANR	4931689	AssignmentExpression	def -> type = strdup ( type )		4931626	0		=			
ANR	4931690	PtrMemberAccess	def -> type		4931626	0					
ANR	4931691	Identifier	def		4931626	0					
ANR	4931692	Identifier	type		4931626	1					
ANR	4931693	CallExpression	strdup ( type )		4931626	1					
ANR	4931694	Callee	strdup		4931626	0					
ANR	4931695	Identifier	strdup		4931626	0					
ANR	4931696	ArgumentList	type		4931626	1					
ANR	4931697	Argument	type		4931626	0					
ANR	4931698	Identifier	type		4931626	0					
ANR	4931699	ExpressionStatement	def -> name = strdup ( name )	91:1:2067:2092	4931626	16	True				
ANR	4931700	AssignmentExpression	def -> name = strdup ( name )		4931626	0		=			
ANR	4931701	PtrMemberAccess	def -> name		4931626	0					
ANR	4931702	Identifier	def		4931626	0					
ANR	4931703	Identifier	name		4931626	1					
ANR	4931704	CallExpression	strdup ( name )		4931626	1					
ANR	4931705	Callee	strdup		4931626	0					
ANR	4931706	Identifier	strdup		4931626	0					
ANR	4931707	ArgumentList	name		4931626	1					
ANR	4931708	Argument	name		4931626	0					
ANR	4931709	Identifier	name		4931626	0					
ANR	4931710	ExpressionStatement	def -> value = value	92:1:2095:2113	4931626	17	True				
ANR	4931711	AssignmentExpression	def -> value = value		4931626	0		=			
ANR	4931712	PtrMemberAccess	def -> value		4931626	0					
ANR	4931713	Identifier	def		4931626	0					
ANR	4931714	Identifier	value		4931626	1					
ANR	4931715	Identifier	value		4931626	1					
ANR	4931716	ExpressionStatement	"r_list_append ( lang -> defs , def )"	93:1:2116:2147	4931626	18	True				
ANR	4931717	CallExpression	"r_list_append ( lang -> defs , def )"		4931626	0					
ANR	4931718	Callee	r_list_append		4931626	0					
ANR	4931719	Identifier	r_list_append		4931626	0					
ANR	4931720	ArgumentList	lang -> defs		4931626	1					
ANR	4931721	Argument	lang -> defs		4931626	0					
ANR	4931722	PtrMemberAccess	lang -> defs		4931626	0					
ANR	4931723	Identifier	lang		4931626	0					
ANR	4931724	Identifier	defs		4931626	1					
ANR	4931725	Argument	def		4931626	1					
ANR	4931726	Identifier	def		4931626	0					
ANR	4931727	ReturnStatement	return true ;	94:1:2150:2161	4931626	19	True				
ANR	4931728	Identifier	true		4931626	0					
ANR	4931729	ReturnType	R_API bool		4931626	1					
ANR	4931730	Identifier	r_lang_define		4931626	2					
ANR	4931731	ParameterList	"RLang * lang , const char * type , const char * name , void * value"		4931626	3					
ANR	4931732	Parameter	RLang * lang	77:25:1751:1761	4931626	0	True				
ANR	4931733	ParameterType	RLang *		4931626	0					
ANR	4931734	Identifier	lang		4931626	1					
ANR	4931735	Parameter	const char * type	77:38:1764:1779	4931626	1	True				
ANR	4931736	ParameterType	const char *		4931626	0					
ANR	4931737	Identifier	type		4931626	1					
ANR	4931738	Parameter	const char * name	77:56:1782:1797	4931626	2	True				
ANR	4931739	ParameterType	const char *		4931626	0					
ANR	4931740	Identifier	name		4931626	1					
ANR	4931741	Parameter	void * value	77:74:1800:1810	4931626	3	True				
ANR	4931742	ParameterType	void *		4931626	0					
ANR	4931743	Identifier	value		4931626	1					
ANR	4931744	CFGEntryNode	ENTRY		4931626		True				
ANR	4931745	CFGExitNode	EXIT		4931626		True				
ANR	4931746	Symbol	def		4931626						
ANR	4931747	Symbol	* lang		4931626						
ANR	4931748	Symbol	lang -> defs		4931626						
ANR	4931749	Symbol	false		4931626						
ANR	4931750	Symbol	iter		4931626						
ANR	4931751	Symbol	def -> name		4931626						
ANR	4931752	Symbol	type		4931626						
ANR	4931753	Symbol	* def		4931626						
ANR	4931754	Symbol	R_NEW0		4931626						
ANR	4931755	Symbol	def -> value		4931626						
ANR	4931756	Symbol	name		4931626						
ANR	4931757	Symbol	true		4931626						
ANR	4931758	Symbol	def -> type		4931626						
ANR	4931759	Symbol	RLangDef		4931626						
ANR	4931760	Symbol	strdup		4931626						
ANR	4931761	Symbol	lang		4931626						
ANR	4931762	Symbol	value		4931626						
ANR	4931763	Symbol	r_str_casecmp		4931626						
ANR	4931764	Function	r_lang_def_free	97:0:2166:2262							
ANR	4931765	FunctionDef	r_lang_def_free (RLangDef * def)		4931764	0					
ANR	4931766	CompoundStatement		97:43:2209:2262	4931764	0					
ANR	4931767	ExpressionStatement	free ( def -> name )	98:1:2212:2228	4931764	0	True				
ANR	4931768	CallExpression	free ( def -> name )		4931764	0					
ANR	4931769	Callee	free		4931764	0					
ANR	4931770	Identifier	free		4931764	0					
ANR	4931771	ArgumentList	def -> name		4931764	1					
ANR	4931772	Argument	def -> name		4931764	0					
ANR	4931773	PtrMemberAccess	def -> name		4931764	0					
ANR	4931774	Identifier	def		4931764	0					
ANR	4931775	Identifier	name		4931764	1					
ANR	4931776	ExpressionStatement	free ( def -> type )	99:1:2231:2247	4931764	1	True				
ANR	4931777	CallExpression	free ( def -> type )		4931764	0					
ANR	4931778	Callee	free		4931764	0					
ANR	4931779	Identifier	free		4931764	0					
ANR	4931780	ArgumentList	def -> type		4931764	1					
ANR	4931781	Argument	def -> type		4931764	0					
ANR	4931782	PtrMemberAccess	def -> type		4931764	0					
ANR	4931783	Identifier	def		4931764	0					
ANR	4931784	Identifier	type		4931764	1					
ANR	4931785	ExpressionStatement	free ( def )	100:1:2250:2260	4931764	2	True				
ANR	4931786	CallExpression	free ( def )		4931764	0					
ANR	4931787	Callee	free		4931764	0					
ANR	4931788	Identifier	free		4931764	0					
ANR	4931789	ArgumentList	def		4931764	1					
ANR	4931790	Argument	def		4931764	0					
ANR	4931791	Identifier	def		4931764	0					
ANR	4931792	ReturnType	R_API void		4931764	1					
ANR	4931793	Identifier	r_lang_def_free		4931764	2					
ANR	4931794	ParameterList	RLangDef * def		4931764	3					
ANR	4931795	Parameter	RLangDef * def	97:28:2194:2206	4931764	0	True				
ANR	4931796	ParameterType	RLangDef *		4931764	0					
ANR	4931797	Identifier	def		4931764	1					
ANR	4931798	CFGEntryNode	ENTRY		4931764		True				
ANR	4931799	CFGExitNode	EXIT		4931764		True				
ANR	4931800	Symbol	* def		4931764						
ANR	4931801	Symbol	def		4931764						
ANR	4931802	Symbol	def -> type		4931764						
ANR	4931803	Symbol	def -> name		4931764						
ANR	4931804	Function	r_lang_undef	103:0:2265:2675							
ANR	4931805	FunctionDef	"r_lang_undef (RLang * lang , const char * name)"		4931804	0					
ANR	4931806	CompoundStatement		103:55:2320:2675	4931804	0					
ANR	4931807	IfStatement	if ( name && * name )		4931804	0					
ANR	4931808	Condition	name && * name	104:5:2327:2339	4931804	0	True				
ANR	4931809	AndExpression	name && * name		4931804	0		&&			
ANR	4931810	Identifier	name		4931804	0					
ANR	4931811	UnaryOperationExpression	* name		4931804	1					
ANR	4931812	UnaryOperator	*		4931804	0					
ANR	4931813	Identifier	name		4931804	1					
ANR	4931814	CompoundStatement		4:2:42:57	4931804	1					
ANR	4931815	IdentifierDeclStatement	RLangDef * def ;	105:2:2346:2359	4931804	0	True				
ANR	4931816	IdentifierDecl	* def		4931804	0					
ANR	4931817	IdentifierDeclType	RLangDef *		4931804	0					
ANR	4931818	Identifier	def		4931804	1					
ANR	4931819	IdentifierDeclStatement	RListIter * iter ;	106:2:2363:2378	4931804	1	True				
ANR	4931820	IdentifierDecl	* iter		4931804	0					
ANR	4931821	IdentifierDeclType	RListIter *		4931804	0					
ANR	4931822	Identifier	iter		4931804	1					
ANR	4931823	Statement	r_list_foreach	108:2:2462:2475	4931804	2	True				
ANR	4931824	Statement	(	108:17:2477:2477	4931804	3	True				
ANR	4931825	Statement	lang	108:18:2478:2481	4931804	4	True				
ANR	4931826	Statement	->	108:22:2482:2483	4931804	5	True				
ANR	4931827	Statement	defs	108:24:2484:2487	4931804	6	True				
ANR	4931828	Statement	","	108:28:2488:2488	4931804	7	True				
ANR	4931829	Statement	iter	108:30:2490:2493	4931804	8	True				
ANR	4931830	Statement	","	108:34:2494:2494	4931804	9	True				
ANR	4931831	Statement	def	108:36:2496:2498	4931804	10	True				
ANR	4931832	Statement	)	108:39:2499:2499	4931804	11	True				
ANR	4931833	CompoundStatement		6:41:180:180	4931804	12					
ANR	4931834	IfStatement	"if ( ! name || ! r_str_casecmp ( name , def -> name ) )"		4931804	0					
ANR	4931835	Condition	"! name || ! r_str_casecmp ( name , def -> name )"	109:7:2510:2550	4931804	0	True				
ANR	4931836	OrExpression	"! name || ! r_str_casecmp ( name , def -> name )"		4931804	0		||			
ANR	4931837	UnaryOperationExpression	! name		4931804	0					
ANR	4931838	UnaryOperator	!		4931804	0					
ANR	4931839	Identifier	name		4931804	1					
ANR	4931840	UnaryOperationExpression	"! r_str_casecmp ( name , def -> name )"		4931804	1					
ANR	4931841	UnaryOperator	!		4931804	0					
ANR	4931842	CallExpression	"r_str_casecmp ( name , def -> name )"		4931804	1					
ANR	4931843	Callee	r_str_casecmp		4931804	0					
ANR	4931844	Identifier	r_str_casecmp		4931804	0					
ANR	4931845	ArgumentList	name		4931804	1					
ANR	4931846	Argument	name		4931804	0					
ANR	4931847	Identifier	name		4931804	0					
ANR	4931848	Argument	def -> name		4931804	1					
ANR	4931849	PtrMemberAccess	def -> name		4931804	0					
ANR	4931850	Identifier	def		4931804	0					
ANR	4931851	Identifier	name		4931804	1					
ANR	4931852	CompoundStatement		7:50:232:232	4931804	1					
ANR	4931853	ExpressionStatement	"r_list_delete ( lang -> defs , iter )"	110:4:2559:2591	4931804	0	True				
ANR	4931854	CallExpression	"r_list_delete ( lang -> defs , iter )"		4931804	0					
ANR	4931855	Callee	r_list_delete		4931804	0					
ANR	4931856	Identifier	r_list_delete		4931804	0					
ANR	4931857	ArgumentList	lang -> defs		4931804	1					
ANR	4931858	Argument	lang -> defs		4931804	0					
ANR	4931859	PtrMemberAccess	lang -> defs		4931804	0					
ANR	4931860	Identifier	lang		4931804	0					
ANR	4931861	Identifier	defs		4931804	1					
ANR	4931862	Argument	iter		4931804	1					
ANR	4931863	Identifier	iter		4931804	0					
ANR	4931864	BreakStatement	break ;	111:4:2597:2602	4931804	1	True				
ANR	4931865	ElseStatement	else		4931804	0					
ANR	4931866	CompoundStatement		12:8:300:300	4931804	0					
ANR	4931867	ExpressionStatement	r_list_free ( lang -> defs )	115:2:2625:2649	4931804	0	True				
ANR	4931868	CallExpression	r_list_free ( lang -> defs )		4931804	0					
ANR	4931869	Callee	r_list_free		4931804	0					
ANR	4931870	Identifier	r_list_free		4931804	0					
ANR	4931871	ArgumentList	lang -> defs		4931804	1					
ANR	4931872	Argument	lang -> defs		4931804	0					
ANR	4931873	PtrMemberAccess	lang -> defs		4931804	0					
ANR	4931874	Identifier	lang		4931804	0					
ANR	4931875	Identifier	defs		4931804	1					
ANR	4931876	ExpressionStatement	lang -> defs = NULL	116:2:2653:2670	4931804	1	True				
ANR	4931877	AssignmentExpression	lang -> defs = NULL		4931804	0		=			
ANR	4931878	PtrMemberAccess	lang -> defs		4931804	0					
ANR	4931879	Identifier	lang		4931804	0					
ANR	4931880	Identifier	defs		4931804	1					
ANR	4931881	Identifier	NULL		4931804	1					
ANR	4931882	ReturnType	R_API void		4931804	1					
ANR	4931883	Identifier	r_lang_undef		4931804	2					
ANR	4931884	ParameterList	"RLang * lang , const char * name"		4931804	3					
ANR	4931885	Parameter	RLang * lang	103:24:2289:2299	4931804	0	True				
ANR	4931886	ParameterType	RLang *		4931804	0					
ANR	4931887	Identifier	lang		4931804	1					
ANR	4931888	Parameter	const char * name	103:37:2302:2317	4931804	1	True				
ANR	4931889	ParameterType	const char *		4931804	0					
ANR	4931890	Identifier	name		4931804	1					
ANR	4931891	CFGEntryNode	ENTRY		4931804		True				
ANR	4931892	CFGExitNode	EXIT		4931804		True				
ANR	4931893	CFGErrorNode	ERROR		4931804		True				
ANR	4931894	Symbol	* name		4931804						
ANR	4931895	Symbol	* def		4931804						
ANR	4931896	Symbol	NULL		4931804						
ANR	4931897	Symbol	def		4931804						
ANR	4931898	Symbol	* lang		4931804						
ANR	4931899	Symbol	lang -> defs		4931804						
ANR	4931900	Symbol	name		4931804						
ANR	4931901	Symbol	iter		4931804						
ANR	4931902	Symbol	def -> name		4931804						
ANR	4931903	Symbol	lang		4931804						
ANR	4931904	Symbol	r_str_casecmp		4931804						
ANR	4931905	Function	r_lang_setup	120:0:2678:2815							
ANR	4931906	FunctionDef	r_lang_setup (RLang * lang)		4931905	0					
ANR	4931907	CompoundStatement		120:37:2715:2815	4931905	0					
ANR	4931908	IfStatement	if ( lang && lang -> cur && lang -> cur -> setup )		4931905	0					
ANR	4931909	Condition	lang && lang -> cur && lang -> cur -> setup	121:5:2722:2758	4931905	0	True				
ANR	4931910	AndExpression	lang && lang -> cur && lang -> cur -> setup		4931905	0		&&			
ANR	4931911	Identifier	lang		4931905	0					
ANR	4931912	AndExpression	lang -> cur && lang -> cur -> setup		4931905	1		&&			
ANR	4931913	PtrMemberAccess	lang -> cur		4931905	0					
ANR	4931914	Identifier	lang		4931905	0					
ANR	4931915	Identifier	cur		4931905	1					
ANR	4931916	PtrMemberAccess	lang -> cur -> setup		4931905	1					
ANR	4931917	PtrMemberAccess	lang -> cur		4931905	0					
ANR	4931918	Identifier	lang		4931905	0					
ANR	4931919	Identifier	cur		4931905	1					
ANR	4931920	Identifier	setup		4931905	1					
ANR	4931921	CompoundStatement		2:44:45:45	4931905	1					
ANR	4931922	ReturnStatement	return lang -> cur -> setup ( lang ) ;	122:2:2765:2795	4931905	0	True				
ANR	4931923	CallExpression	lang -> cur -> setup ( lang )		4931905	0					
ANR	4931924	Callee	lang -> cur -> setup		4931905	0					
ANR	4931925	PtrMemberAccess	lang -> cur -> setup		4931905	0					
ANR	4931926	PtrMemberAccess	lang -> cur		4931905	0					
ANR	4931927	Identifier	lang		4931905	0					
ANR	4931928	Identifier	cur		4931905	1					
ANR	4931929	Identifier	setup		4931905	1					
ANR	4931930	ArgumentList	lang		4931905	1					
ANR	4931931	Argument	lang		4931905	0					
ANR	4931932	Identifier	lang		4931905	0					
ANR	4931933	ReturnStatement	return false ;	124:1:2801:2813	4931905	1	True				
ANR	4931934	Identifier	false		4931905	0					
ANR	4931935	ReturnType	R_API bool		4931905	1					
ANR	4931936	Identifier	r_lang_setup		4931905	2					
ANR	4931937	ParameterList	RLang * lang		4931905	3					
ANR	4931938	Parameter	RLang * lang	120:24:2702:2712	4931905	0	True				
ANR	4931939	ParameterType	RLang *		4931905	0					
ANR	4931940	Identifier	lang		4931905	1					
ANR	4931941	CFGEntryNode	ENTRY		4931905		True				
ANR	4931942	CFGExitNode	EXIT		4931905		True				
ANR	4931943	Symbol	* lang -> cur		4931905						
ANR	4931944	Symbol	* * lang		4931905						
ANR	4931945	Symbol	* lang		4931905						
ANR	4931946	Symbol	lang -> cur -> setup		4931905						
ANR	4931947	Symbol	lang -> cur		4931905						
ANR	4931948	Symbol	false		4931905						
ANR	4931949	Symbol	lang		4931905						
ANR	4931950	Function	r_lang_add	127:0:2818:3041							
ANR	4931951	FunctionDef	"r_lang_add (RLang * lang , RLangPlugin * foo)"		4931950	0					
ANR	4931952	CompoundStatement		127:53:2871:3041	4931950	0					
ANR	4931953	IfStatement	"if ( foo && ( ! r_lang_get_by_name ( lang , foo -> name ) ) )"		4931950	0					
ANR	4931954	Condition	"foo && ( ! r_lang_get_by_name ( lang , foo -> name ) )"	128:5:2878:2923	4931950	0	True				
ANR	4931955	AndExpression	"foo && ( ! r_lang_get_by_name ( lang , foo -> name ) )"		4931950	0		&&			
ANR	4931956	Identifier	foo		4931950	0					
ANR	4931957	UnaryOperationExpression	"! r_lang_get_by_name ( lang , foo -> name )"		4931950	1					
ANR	4931958	UnaryOperator	!		4931950	0					
ANR	4931959	CallExpression	"r_lang_get_by_name ( lang , foo -> name )"		4931950	1					
ANR	4931960	Callee	r_lang_get_by_name		4931950	0					
ANR	4931961	Identifier	r_lang_get_by_name		4931950	0					
ANR	4931962	ArgumentList	lang		4931950	1					
ANR	4931963	Argument	lang		4931950	0					
ANR	4931964	Identifier	lang		4931950	0					
ANR	4931965	Argument	foo -> name		4931950	1					
ANR	4931966	PtrMemberAccess	foo -> name		4931950	0					
ANR	4931967	Identifier	foo		4931950	0					
ANR	4931968	Identifier	name		4931950	1					
ANR	4931969	CompoundStatement		2:53:54:54	4931950	1					
ANR	4931970	IfStatement	if ( foo -> init )		4931950	0					
ANR	4931971	Condition	foo -> init	129:6:2934:2942	4931950	0	True				
ANR	4931972	PtrMemberAccess	foo -> init		4931950	0					
ANR	4931973	Identifier	foo		4931950	0					
ANR	4931974	Identifier	init		4931950	1					
ANR	4931975	CompoundStatement		3:17:73:73	4931950	1					
ANR	4931976	ExpressionStatement	foo -> init ( lang )	130:3:2950:2966	4931950	0	True				
ANR	4931977	CallExpression	foo -> init ( lang )		4931950	0					
ANR	4931978	Callee	foo -> init		4931950	0					
ANR	4931979	PtrMemberAccess	foo -> init		4931950	0					
ANR	4931980	Identifier	foo		4931950	0					
ANR	4931981	Identifier	init		4931950	1					
ANR	4931982	ArgumentList	lang		4931950	1					
ANR	4931983	Argument	lang		4931950	0					
ANR	4931984	Identifier	lang		4931950	0					
ANR	4931985	ExpressionStatement	"r_list_append ( lang -> langs , foo )"	132:2:2974:3006	4931950	1	True				
ANR	4931986	CallExpression	"r_list_append ( lang -> langs , foo )"		4931950	0					
ANR	4931987	Callee	r_list_append		4931950	0					
ANR	4931988	Identifier	r_list_append		4931950	0					
ANR	4931989	ArgumentList	lang -> langs		4931950	1					
ANR	4931990	Argument	lang -> langs		4931950	0					
ANR	4931991	PtrMemberAccess	lang -> langs		4931950	0					
ANR	4931992	Identifier	lang		4931950	0					
ANR	4931993	Identifier	langs		4931950	1					
ANR	4931994	Argument	foo		4931950	1					
ANR	4931995	Identifier	foo		4931950	0					
ANR	4931996	ReturnStatement	return true ;	133:2:3010:3021	4931950	2	True				
ANR	4931997	Identifier	true		4931950	0					
ANR	4931998	ReturnStatement	return false ;	135:1:3027:3039	4931950	1	True				
ANR	4931999	Identifier	false		4931950	0					
ANR	4932000	ReturnType	R_API bool		4931950	1					
ANR	4932001	Identifier	r_lang_add		4931950	2					
ANR	4932002	ParameterList	"RLang * lang , RLangPlugin * foo"		4931950	3					
ANR	4932003	Parameter	RLang * lang	127:22:2840:2850	4931950	0	True				
ANR	4932004	ParameterType	RLang *		4931950	0					
ANR	4932005	Identifier	lang		4931950	1					
ANR	4932006	Parameter	RLangPlugin * foo	127:35:2853:2868	4931950	1	True				
ANR	4932007	ParameterType	RLangPlugin *		4931950	0					
ANR	4932008	Identifier	foo		4931950	1					
ANR	4932009	CFGEntryNode	ENTRY		4931950		True				
ANR	4932010	CFGExitNode	EXIT		4931950		True				
ANR	4932011	Symbol	foo -> name		4931950						
ANR	4932012	Symbol	* lang		4931950						
ANR	4932013	Symbol	foo		4931950						
ANR	4932014	Symbol	foo -> init		4931950						
ANR	4932015	Symbol	true		4931950						
ANR	4932016	Symbol	false		4931950						
ANR	4932017	Symbol	lang		4931950						
ANR	4932018	Symbol	r_lang_get_by_name		4931950						
ANR	4932019	Symbol	* foo		4931950						
ANR	4932020	Symbol	lang -> langs		4931950						
ANR	4932021	Function	r_lang_list	139:0:3083:3374							
ANR	4932022	FunctionDef	r_lang_list (RLang * lang)		4932021	0					
ANR	4932023	CompoundStatement		139:36:3119:3374	4932021	0					
ANR	4932024	IdentifierDeclStatement	RListIter * iter ;	140:1:3122:3137	4932021	0	True				
ANR	4932025	IdentifierDecl	* iter		4932021	0					
ANR	4932026	IdentifierDeclType	RListIter *		4932021	0					
ANR	4932027	Identifier	iter		4932021	1					
ANR	4932028	IdentifierDeclStatement	RLangPlugin * h ;	141:1:3140:3154	4932021	1	True				
ANR	4932029	IdentifierDecl	* h		4932021	0					
ANR	4932030	IdentifierDeclType	RLangPlugin *		4932021	0					
ANR	4932031	Identifier	h		4932021	1					
ANR	4932032	IfStatement	if ( ! lang )		4932021	2					
ANR	4932033	Condition	! lang	142:5:3161:3165	4932021	0	True				
ANR	4932034	UnaryOperationExpression	! lang		4932021	0					
ANR	4932035	UnaryOperator	!		4932021	0					
ANR	4932036	Identifier	lang		4932021	1					
ANR	4932037	CompoundStatement		4:12:48:48	4932021	1					
ANR	4932038	ReturnStatement	return false ;	143:2:3172:3184	4932021	0	True				
ANR	4932039	Identifier	false		4932021	0					
ANR	4932040	Statement	r_list_foreach	145:1:3190:3203	4932021	3	True				
ANR	4932041	Statement	(	145:16:3205:3205	4932021	4	True				
ANR	4932042	Statement	lang	145:17:3206:3209	4932021	5	True				
ANR	4932043	Statement	->	145:21:3210:3211	4932021	6	True				
ANR	4932044	Statement	langs	145:23:3212:3216	4932021	7	True				
ANR	4932045	Statement	","	145:28:3217:3217	4932021	8	True				
ANR	4932046	Statement	iter	145:30:3219:3222	4932021	9	True				
ANR	4932047	Statement	","	145:34:3223:3223	4932021	10	True				
ANR	4932048	Statement	h	145:36:3225:3225	4932021	11	True				
ANR	4932049	Statement	)	145:37:3226:3226	4932021	12	True				
ANR	4932050	CompoundStatement		8:2:112:168	4932021	13					
ANR	4932051	IdentifierDeclStatement	"const char * license = h -> license ? h -> license : ""???"" ;"	146:2:3232:3288	4932021	0	True				
ANR	4932052	IdentifierDecl	"* license = h -> license ? h -> license : ""???"""		4932021	0					
ANR	4932053	IdentifierDeclType	const char *		4932021	0					
ANR	4932054	Identifier	license		4932021	1					
ANR	4932055	AssignmentExpression	"* license = h -> license ? h -> license : ""???"""		4932021	2		=			
ANR	4932056	Identifier	license		4932021	0					
ANR	4932057	ConditionalExpression	"h -> license ? h -> license : ""???"""		4932021	1					
ANR	4932058	Condition	h -> license		4932021	0					
ANR	4932059	PtrMemberAccess	h -> license		4932021	0					
ANR	4932060	Identifier	h		4932021	0					
ANR	4932061	Identifier	license		4932021	1					
ANR	4932062	PtrMemberAccess	h -> license		4932021	1					
ANR	4932063	Identifier	h		4932021	0					
ANR	4932064	Identifier	license		4932021	1					
ANR	4932065	PrimaryExpression	"""???"""		4932021	2					
ANR	4932066	ExpressionStatement	"lang -> cb_printf ( ""%s: (%s) %s\\n"" , h -> name , license , h -> desc )"	148:2:3292:3355	4932021	1	True				
ANR	4932067	CallExpression	"lang -> cb_printf ( ""%s: (%s) %s\\n"" , h -> name , license , h -> desc )"		4932021	0					
ANR	4932068	Callee	lang -> cb_printf		4932021	0					
ANR	4932069	PtrMemberAccess	lang -> cb_printf		4932021	0					
ANR	4932070	Identifier	lang		4932021	0					
ANR	4932071	Identifier	cb_printf		4932021	1					
ANR	4932072	ArgumentList	"""%s: (%s) %s\\n"""		4932021	1					
ANR	4932073	Argument	"""%s: (%s) %s\\n"""		4932021	0					
ANR	4932074	PrimaryExpression	"""%s: (%s) %s\\n"""		4932021	0					
ANR	4932075	Argument	h -> name		4932021	1					
ANR	4932076	PtrMemberAccess	h -> name		4932021	0					
ANR	4932077	Identifier	h		4932021	0					
ANR	4932078	Identifier	name		4932021	1					
ANR	4932079	Argument	license		4932021	2					
ANR	4932080	Identifier	license		4932021	0					
ANR	4932081	Argument	h -> desc		4932021	3					
ANR	4932082	PtrMemberAccess	h -> desc		4932021	0					
ANR	4932083	Identifier	h		4932021	0					
ANR	4932084	Identifier	desc		4932021	1					
ANR	4932085	ReturnStatement	return true ;	151:1:3361:3372	4932021	14	True				
ANR	4932086	Identifier	true		4932021	0					
ANR	4932087	ReturnType	R_API bool		4932021	1					
ANR	4932088	Identifier	r_lang_list		4932021	2					
ANR	4932089	ParameterList	RLang * lang		4932021	3					
ANR	4932090	Parameter	RLang * lang	139:23:3106:3116	4932021	0	True				
ANR	4932091	ParameterType	RLang *		4932021	0					
ANR	4932092	Identifier	lang		4932021	1					
ANR	4932093	CFGEntryNode	ENTRY		4932021		True				
ANR	4932094	CFGExitNode	EXIT		4932021		True				
ANR	4932095	Symbol	license		4932021						
ANR	4932096	Symbol	h -> desc		4932021						
ANR	4932097	Symbol	* h		4932021						
ANR	4932098	Symbol	h		4932021						
ANR	4932099	Symbol	false		4932021						
ANR	4932100	Symbol	true		4932021						
ANR	4932101	Symbol	iter		4932021						
ANR	4932102	Symbol	h -> license		4932021						
ANR	4932103	Symbol	lang		4932021						
ANR	4932104	Symbol	h -> name		4932021						
ANR	4932105	Function	r_lang_get_by_extension	154:0:3377:3669							
ANR	4932106	FunctionDef	"r_lang_get_by_extension (RLang * lang , const char * ext)"		4932105	0					
ANR	4932107	CompoundStatement		154:74:3451:3669	4932105	0					
ANR	4932108	IdentifierDeclStatement	RListIter * iter ;	155:1:3454:3469	4932105	0	True				
ANR	4932109	IdentifierDecl	* iter		4932105	0					
ANR	4932110	IdentifierDeclType	RListIter *		4932105	0					
ANR	4932111	Identifier	iter		4932105	1					
ANR	4932112	IdentifierDeclStatement	RLangPlugin * h ;	156:1:3472:3486	4932105	1	True				
ANR	4932113	IdentifierDecl	* h		4932105	0					
ANR	4932114	IdentifierDeclType	RLangPlugin *		4932105	0					
ANR	4932115	Identifier	h		4932105	1					
ANR	4932116	IdentifierDeclStatement	"const char * p = r_str_lchr ( ext , '.' ) ;"	157:1:3489:3526	4932105	2	True				
ANR	4932117	IdentifierDecl	"* p = r_str_lchr ( ext , '.' )"		4932105	0					
ANR	4932118	IdentifierDeclType	const char *		4932105	0					
ANR	4932119	Identifier	p		4932105	1					
ANR	4932120	AssignmentExpression	"* p = r_str_lchr ( ext , '.' )"		4932105	2		=			
ANR	4932121	Identifier	p		4932105	0					
ANR	4932122	CallExpression	"r_str_lchr ( ext , '.' )"		4932105	1					
ANR	4932123	Callee	r_str_lchr		4932105	0					
ANR	4932124	Identifier	r_str_lchr		4932105	0					
ANR	4932125	ArgumentList	ext		4932105	1					
ANR	4932126	Argument	ext		4932105	0					
ANR	4932127	Identifier	ext		4932105	0					
ANR	4932128	Argument	'.'		4932105	1					
ANR	4932129	PrimaryExpression	'.'		4932105	0					
ANR	4932130	IfStatement	if ( p )		4932105	3					
ANR	4932131	Condition	p	158:5:3533:3533	4932105	0	True				
ANR	4932132	Identifier	p		4932105	0					
ANR	4932133	CompoundStatement		5:8:84:84	4932105	1					
ANR	4932134	ExpressionStatement	ext = p + 1	159:2:3540:3551	4932105	0	True				
ANR	4932135	AssignmentExpression	ext = p + 1		4932105	0		=			
ANR	4932136	Identifier	ext		4932105	0					
ANR	4932137	AdditiveExpression	p + 1		4932105	1		+			
ANR	4932138	Identifier	p		4932105	0					
ANR	4932139	PrimaryExpression	1		4932105	1					
ANR	4932140	Statement	r_list_foreach	161:1:3557:3570	4932105	4	True				
ANR	4932141	Statement	(	161:16:3572:3572	4932105	5	True				
ANR	4932142	Statement	lang	161:17:3573:3576	4932105	6	True				
ANR	4932143	Statement	->	161:21:3577:3578	4932105	7	True				
ANR	4932144	Statement	langs	161:23:3579:3583	4932105	8	True				
ANR	4932145	Statement	","	161:28:3584:3584	4932105	9	True				
ANR	4932146	Statement	iter	161:30:3586:3589	4932105	10	True				
ANR	4932147	Statement	","	161:34:3590:3590	4932105	11	True				
ANR	4932148	Statement	h	161:36:3592:3592	4932105	12	True				
ANR	4932149	Statement	)	161:37:3593:3593	4932105	13	True				
ANR	4932150	CompoundStatement		8:39:143:143	4932105	14					
ANR	4932151	IfStatement	"if ( ! r_str_casecmp ( h -> ext , ext ) )"		4932105	0					
ANR	4932152	Condition	"! r_str_casecmp ( h -> ext , ext )"	162:6:3603:3630	4932105	0	True				
ANR	4932153	UnaryOperationExpression	"! r_str_casecmp ( h -> ext , ext )"		4932105	0					
ANR	4932154	UnaryOperator	!		4932105	0					
ANR	4932155	CallExpression	"r_str_casecmp ( h -> ext , ext )"		4932105	1					
ANR	4932156	Callee	r_str_casecmp		4932105	0					
ANR	4932157	Identifier	r_str_casecmp		4932105	0					
ANR	4932158	ArgumentList	h -> ext		4932105	1					
ANR	4932159	Argument	h -> ext		4932105	0					
ANR	4932160	PtrMemberAccess	h -> ext		4932105	0					
ANR	4932161	Identifier	h		4932105	0					
ANR	4932162	Identifier	ext		4932105	1					
ANR	4932163	Argument	ext		4932105	1					
ANR	4932164	Identifier	ext		4932105	0					
ANR	4932165	CompoundStatement		9:36:181:181	4932105	1					
ANR	4932166	ReturnStatement	return h ;	163:3:3638:3646	4932105	0	True				
ANR	4932167	Identifier	h		4932105	0					
ANR	4932168	ReturnStatement	return NULL ;	166:1:3656:3667	4932105	15	True				
ANR	4932169	Identifier	NULL		4932105	0					
ANR	4932170	ReturnType	R_API RLangPlugin *		4932105	1					
ANR	4932171	Identifier	r_lang_get_by_extension		4932105	2					
ANR	4932172	ParameterList	"RLang * lang , const char * ext"		4932105	3					
ANR	4932173	Parameter	RLang * lang	154:44:3421:3431	4932105	0	True				
ANR	4932174	ParameterType	RLang *		4932105	0					
ANR	4932175	Identifier	lang		4932105	1					
ANR	4932176	Parameter	const char * ext	154:57:3434:3448	4932105	1	True				
ANR	4932177	ParameterType	const char *		4932105	0					
ANR	4932178	Identifier	ext		4932105	1					
ANR	4932179	CFGEntryNode	ENTRY		4932105		True				
ANR	4932180	CFGExitNode	EXIT		4932105		True				
ANR	4932181	Symbol	ext		4932105						
ANR	4932182	Symbol	p		4932105						
ANR	4932183	Symbol	* h		4932105						
ANR	4932184	Symbol	NULL		4932105						
ANR	4932185	Symbol	r_str_lchr		4932105						
ANR	4932186	Symbol	h		4932105						
ANR	4932187	Symbol	iter		4932105						
ANR	4932188	Symbol	lang		4932105						
ANR	4932189	Symbol	h -> ext		4932105						
ANR	4932190	Symbol	r_str_casecmp		4932105						
ANR	4932191	Function	r_lang_get_by_name	169:0:3672:3964							
ANR	4932192	FunctionDef	"r_lang_get_by_name (RLang * lang , const char * name)"		4932191	0					
ANR	4932193	CompoundStatement		169:70:3742:3964	4932191	0					
ANR	4932194	IdentifierDeclStatement	RListIter * iter ;	170:1:3745:3760	4932191	0	True				
ANR	4932195	IdentifierDecl	* iter		4932191	0					
ANR	4932196	IdentifierDeclType	RListIter *		4932191	0					
ANR	4932197	Identifier	iter		4932191	1					
ANR	4932198	IdentifierDeclStatement	RLangPlugin * h ;	171:1:3763:3777	4932191	1	True				
ANR	4932199	IdentifierDecl	* h		4932191	0					
ANR	4932200	IdentifierDeclType	RLangPlugin *		4932191	0					
ANR	4932201	Identifier	h		4932191	1					
ANR	4932202	Statement	r_list_foreach	172:1:3780:3793	4932191	2	True				
ANR	4932203	Statement	(	172:16:3795:3795	4932191	3	True				
ANR	4932204	Statement	lang	172:17:3796:3799	4932191	4	True				
ANR	4932205	Statement	->	172:21:3800:3801	4932191	5	True				
ANR	4932206	Statement	langs	172:23:3802:3806	4932191	6	True				
ANR	4932207	Statement	","	172:28:3807:3807	4932191	7	True				
ANR	4932208	Statement	iter	172:30:3809:3812	4932191	8	True				
ANR	4932209	Statement	","	172:34:3813:3813	4932191	9	True				
ANR	4932210	Statement	h	172:36:3815:3815	4932191	10	True				
ANR	4932211	Statement	)	172:37:3816:3816	4932191	11	True				
ANR	4932212	CompoundStatement		4:39:75:75	4932191	12					
ANR	4932213	IfStatement	"if ( ! r_str_casecmp ( h -> name , name ) )"		4932191	0					
ANR	4932214	Condition	"! r_str_casecmp ( h -> name , name )"	173:6:3826:3855	4932191	0	True				
ANR	4932215	UnaryOperationExpression	"! r_str_casecmp ( h -> name , name )"		4932191	0					
ANR	4932216	UnaryOperator	!		4932191	0					
ANR	4932217	CallExpression	"r_str_casecmp ( h -> name , name )"		4932191	1					
ANR	4932218	Callee	r_str_casecmp		4932191	0					
ANR	4932219	Identifier	r_str_casecmp		4932191	0					
ANR	4932220	ArgumentList	h -> name		4932191	1					
ANR	4932221	Argument	h -> name		4932191	0					
ANR	4932222	PtrMemberAccess	h -> name		4932191	0					
ANR	4932223	Identifier	h		4932191	0					
ANR	4932224	Identifier	name		4932191	1					
ANR	4932225	Argument	name		4932191	1					
ANR	4932226	Identifier	name		4932191	0					
ANR	4932227	CompoundStatement		5:38:115:115	4932191	1					
ANR	4932228	ReturnStatement	return h ;	174:3:3863:3871	4932191	0	True				
ANR	4932229	Identifier	h		4932191	0					
ANR	4932230	IfStatement	"if ( h -> alias && ! r_str_casecmp ( h -> alias , name ) )"		4932191	1					
ANR	4932231	Condition	"h -> alias && ! r_str_casecmp ( h -> alias , name )"	176:6:3883:3925	4932191	0	True				
ANR	4932232	AndExpression	"h -> alias && ! r_str_casecmp ( h -> alias , name )"		4932191	0		&&			
ANR	4932233	PtrMemberAccess	h -> alias		4932191	0					
ANR	4932234	Identifier	h		4932191	0					
ANR	4932235	Identifier	alias		4932191	1					
ANR	4932236	UnaryOperationExpression	"! r_str_casecmp ( h -> alias , name )"		4932191	1					
ANR	4932237	UnaryOperator	!		4932191	0					
ANR	4932238	CallExpression	"r_str_casecmp ( h -> alias , name )"		4932191	1					
ANR	4932239	Callee	r_str_casecmp		4932191	0					
ANR	4932240	Identifier	r_str_casecmp		4932191	0					
ANR	4932241	ArgumentList	h -> alias		4932191	1					
ANR	4932242	Argument	h -> alias		4932191	0					
ANR	4932243	PtrMemberAccess	h -> alias		4932191	0					
ANR	4932244	Identifier	h		4932191	0					
ANR	4932245	Identifier	alias		4932191	1					
ANR	4932246	Argument	name		4932191	1					
ANR	4932247	Identifier	name		4932191	0					
ANR	4932248	CompoundStatement		8:51:185:185	4932191	1					
ANR	4932249	ReturnStatement	return h ;	177:3:3933:3941	4932191	0	True				
ANR	4932250	Identifier	h		4932191	0					
ANR	4932251	ReturnStatement	return NULL ;	180:1:3951:3962	4932191	13	True				
ANR	4932252	Identifier	NULL		4932191	0					
ANR	4932253	ReturnType	R_API RLangPlugin *		4932191	1					
ANR	4932254	Identifier	r_lang_get_by_name		4932191	2					
ANR	4932255	ParameterList	"RLang * lang , const char * name"		4932191	3					
ANR	4932256	Parameter	RLang * lang	169:39:3711:3721	4932191	0	True				
ANR	4932257	ParameterType	RLang *		4932191	0					
ANR	4932258	Identifier	lang		4932191	1					
ANR	4932259	Parameter	const char * name	169:52:3724:3739	4932191	1	True				
ANR	4932260	ParameterType	const char *		4932191	0					
ANR	4932261	Identifier	name		4932191	1					
ANR	4932262	CFGEntryNode	ENTRY		4932191		True				
ANR	4932263	CFGExitNode	EXIT		4932191		True				
ANR	4932264	Symbol	* h		4932191						
ANR	4932265	Symbol	NULL		4932191						
ANR	4932266	Symbol	h -> alias		4932191						
ANR	4932267	Symbol	name		4932191						
ANR	4932268	Symbol	h		4932191						
ANR	4932269	Symbol	iter		4932191						
ANR	4932270	Symbol	lang		4932191						
ANR	4932271	Symbol	h -> name		4932191						
ANR	4932272	Symbol	r_str_casecmp		4932191						
ANR	4932273	Function	r_lang_use	183:0:3967:4133							
ANR	4932274	FunctionDef	"r_lang_use (RLang * lang , const char * name)"		4932273	0					
ANR	4932275	CompoundStatement		183:53:4020:4133	4932273	0					
ANR	4932276	IdentifierDeclStatement	"RLangPlugin * h = r_lang_get_by_name ( lang , name ) ;"	184:1:4023:4071	4932273	0	True				
ANR	4932277	IdentifierDecl	"* h = r_lang_get_by_name ( lang , name )"		4932273	0					
ANR	4932278	IdentifierDeclType	RLangPlugin *		4932273	0					
ANR	4932279	Identifier	h		4932273	1					
ANR	4932280	AssignmentExpression	"* h = r_lang_get_by_name ( lang , name )"		4932273	2		=			
ANR	4932281	Identifier	h		4932273	0					
ANR	4932282	CallExpression	"r_lang_get_by_name ( lang , name )"		4932273	1					
ANR	4932283	Callee	r_lang_get_by_name		4932273	0					
ANR	4932284	Identifier	r_lang_get_by_name		4932273	0					
ANR	4932285	ArgumentList	lang		4932273	1					
ANR	4932286	Argument	lang		4932273	0					
ANR	4932287	Identifier	lang		4932273	0					
ANR	4932288	Argument	name		4932273	1					
ANR	4932289	Identifier	name		4932273	0					
ANR	4932290	IfStatement	if ( h )		4932273	1					
ANR	4932291	Condition	h	185:5:4078:4078	4932273	0	True				
ANR	4932292	Identifier	h		4932273	0					
ANR	4932293	CompoundStatement		3:8:60:60	4932273	1					
ANR	4932294	ExpressionStatement	lang -> cur = h	186:2:4085:4098	4932273	0	True				
ANR	4932295	AssignmentExpression	lang -> cur = h		4932273	0		=			
ANR	4932296	PtrMemberAccess	lang -> cur		4932273	0					
ANR	4932297	Identifier	lang		4932273	0					
ANR	4932298	Identifier	cur		4932273	1					
ANR	4932299	Identifier	h		4932273	1					
ANR	4932300	ReturnStatement	return true ;	187:2:4102:4113	4932273	1	True				
ANR	4932301	Identifier	true		4932273	0					
ANR	4932302	ReturnStatement	return false ;	189:1:4119:4131	4932273	2	True				
ANR	4932303	Identifier	false		4932273	0					
ANR	4932304	ReturnType	R_API bool		4932273	1					
ANR	4932305	Identifier	r_lang_use		4932273	2					
ANR	4932306	ParameterList	"RLang * lang , const char * name"		4932273	3					
ANR	4932307	Parameter	RLang * lang	183:22:3989:3999	4932273	0	True				
ANR	4932308	ParameterType	RLang *		4932273	0					
ANR	4932309	Identifier	lang		4932273	1					
ANR	4932310	Parameter	const char * name	183:35:4002:4017	4932273	1	True				
ANR	4932311	ParameterType	const char *		4932273	0					
ANR	4932312	Identifier	name		4932273	1					
ANR	4932313	CFGEntryNode	ENTRY		4932273		True				
ANR	4932314	CFGExitNode	EXIT		4932273		True				
ANR	4932315	Symbol	* lang		4932273						
ANR	4932316	Symbol	name		4932273						
ANR	4932317	Symbol	h		4932273						
ANR	4932318	Symbol	lang -> cur		4932273						
ANR	4932319	Symbol	true		4932273						
ANR	4932320	Symbol	false		4932273						
ANR	4932321	Symbol	lang		4932273						
ANR	4932322	Symbol	r_lang_get_by_name		4932273						
ANR	4932323	Function	r_lang_set_argv	193:0:4189:4362							
ANR	4932324	FunctionDef	"r_lang_set_argv (RLang * lang , int argc , char * * argv)"		4932323	0					
ANR	4932325	CompoundStatement		193:63:4252:4362	4932323	0					
ANR	4932326	IfStatement	if ( lang -> cur && lang -> cur -> set_argv )		4932323	0					
ANR	4932327	Condition	lang -> cur && lang -> cur -> set_argv	194:5:4259:4290	4932323	0	True				
ANR	4932328	AndExpression	lang -> cur && lang -> cur -> set_argv		4932323	0		&&			
ANR	4932329	PtrMemberAccess	lang -> cur		4932323	0					
ANR	4932330	Identifier	lang		4932323	0					
ANR	4932331	Identifier	cur		4932323	1					
ANR	4932332	PtrMemberAccess	lang -> cur -> set_argv		4932323	1					
ANR	4932333	PtrMemberAccess	lang -> cur		4932323	0					
ANR	4932334	Identifier	lang		4932323	0					
ANR	4932335	Identifier	cur		4932323	1					
ANR	4932336	Identifier	set_argv		4932323	1					
ANR	4932337	CompoundStatement		2:39:40:40	4932323	1					
ANR	4932338	ReturnStatement	"return lang -> cur -> set_argv ( lang , argc , argv ) ;"	195:2:4297:4342	4932323	0	True				
ANR	4932339	CallExpression	"lang -> cur -> set_argv ( lang , argc , argv )"		4932323	0					
ANR	4932340	Callee	lang -> cur -> set_argv		4932323	0					
ANR	4932341	PtrMemberAccess	lang -> cur -> set_argv		4932323	0					
ANR	4932342	PtrMemberAccess	lang -> cur		4932323	0					
ANR	4932343	Identifier	lang		4932323	0					
ANR	4932344	Identifier	cur		4932323	1					
ANR	4932345	Identifier	set_argv		4932323	1					
ANR	4932346	ArgumentList	lang		4932323	1					
ANR	4932347	Argument	lang		4932323	0					
ANR	4932348	Identifier	lang		4932323	0					
ANR	4932349	Argument	argc		4932323	1					
ANR	4932350	Identifier	argc		4932323	0					
ANR	4932351	Argument	argv		4932323	2					
ANR	4932352	Identifier	argv		4932323	0					
ANR	4932353	ReturnStatement	return false ;	197:1:4348:4360	4932323	1	True				
ANR	4932354	Identifier	false		4932323	0					
ANR	4932355	ReturnType	R_API bool		4932323	1					
ANR	4932356	Identifier	r_lang_set_argv		4932323	2					
ANR	4932357	ParameterList	"RLang * lang , int argc , char * * argv"		4932323	3					
ANR	4932358	Parameter	RLang * lang	193:27:4216:4226	4932323	0	True				
ANR	4932359	ParameterType	RLang *		4932323	0					
ANR	4932360	Identifier	lang		4932323	1					
ANR	4932361	Parameter	int argc	193:40:4229:4236	4932323	1	True				
ANR	4932362	ParameterType	int		4932323	0					
ANR	4932363	Identifier	argc		4932323	1					
ANR	4932364	Parameter	char * * argv	193:50:4239:4249	4932323	2	True				
ANR	4932365	ParameterType	char * *		4932323	0					
ANR	4932366	Identifier	argv		4932323	1					
ANR	4932367	CFGEntryNode	ENTRY		4932323		True				
ANR	4932368	CFGExitNode	EXIT		4932323		True				
ANR	4932369	Symbol	argc		4932323						
ANR	4932370	Symbol	* * lang		4932323						
ANR	4932371	Symbol	* lang -> cur		4932323						
ANR	4932372	Symbol	* lang		4932323						
ANR	4932373	Symbol	lang -> cur		4932323						
ANR	4932374	Symbol	false		4932323						
ANR	4932375	Symbol	lang -> cur -> set_argv		4932323						
ANR	4932376	Symbol	lang		4932323						
ANR	4932377	Symbol	argv		4932323						
ANR	4932378	Function	r_lang_run	200:0:4365:4526							
ANR	4932379	FunctionDef	"r_lang_run (RLang * lang , const char * code , int len)"		4932378	0					
ANR	4932380	CompoundStatement		200:61:4426:4526	4932378	0					
ANR	4932381	IfStatement	if ( lang -> cur && lang -> cur -> run )		4932378	0					
ANR	4932382	Condition	lang -> cur && lang -> cur -> run	201:5:4434:4460	4932378	0	True				
ANR	4932383	AndExpression	lang -> cur && lang -> cur -> run		4932378	0		&&			
ANR	4932384	PtrMemberAccess	lang -> cur		4932378	0					
ANR	4932385	Identifier	lang		4932378	0					
ANR	4932386	Identifier	cur		4932378	1					
ANR	4932387	PtrMemberAccess	lang -> cur -> run		4932378	1					
ANR	4932388	PtrMemberAccess	lang -> cur		4932378	0					
ANR	4932389	Identifier	lang		4932378	0					
ANR	4932390	Identifier	cur		4932378	1					
ANR	4932391	Identifier	run		4932378	1					
ANR	4932392	CompoundStatement		2:34:36:36	4932378	1					
ANR	4932393	ReturnStatement	"return lang -> cur -> run ( lang , code , len ) ;"	202:2:4467:4506	4932378	0	True				
ANR	4932394	CallExpression	"lang -> cur -> run ( lang , code , len )"		4932378	0					
ANR	4932395	Callee	lang -> cur -> run		4932378	0					
ANR	4932396	PtrMemberAccess	lang -> cur -> run		4932378	0					
ANR	4932397	PtrMemberAccess	lang -> cur		4932378	0					
ANR	4932398	Identifier	lang		4932378	0					
ANR	4932399	Identifier	cur		4932378	1					
ANR	4932400	Identifier	run		4932378	1					
ANR	4932401	ArgumentList	lang		4932378	1					
ANR	4932402	Argument	lang		4932378	0					
ANR	4932403	Identifier	lang		4932378	0					
ANR	4932404	Argument	code		4932378	1					
ANR	4932405	Identifier	code		4932378	0					
ANR	4932406	Argument	len		4932378	2					
ANR	4932407	Identifier	len		4932378	0					
ANR	4932408	ReturnStatement	return false ;	204:1:4512:4524	4932378	1	True				
ANR	4932409	Identifier	false		4932378	0					
ANR	4932410	ReturnType	R_API int		4932378	1					
ANR	4932411	Identifier	r_lang_run		4932378	2					
ANR	4932412	ParameterList	"RLang * lang , const char * code , int len"		4932378	3					
ANR	4932413	Parameter	RLang * lang	200:21:4386:4396	4932378	0	True				
ANR	4932414	ParameterType	RLang *		4932378	0					
ANR	4932415	Identifier	lang		4932378	1					
ANR	4932416	Parameter	const char * code	200:34:4399:4414	4932378	1	True				
ANR	4932417	ParameterType	const char *		4932378	0					
ANR	4932418	Identifier	code		4932378	1					
ANR	4932419	Parameter	int len	200:52:4417:4423	4932378	2	True				
ANR	4932420	ParameterType	int		4932378	0					
ANR	4932421	Identifier	len		4932378	1					
ANR	4932422	CFGEntryNode	ENTRY		4932378		True				
ANR	4932423	CFGExitNode	EXIT		4932378		True				
ANR	4932424	Symbol	code		4932378						
ANR	4932425	Symbol	* lang -> cur		4932378						
ANR	4932426	Symbol	lang -> cur -> run		4932378						
ANR	4932427	Symbol	* * lang		4932378						
ANR	4932428	Symbol	len		4932378						
ANR	4932429	Symbol	* lang		4932378						
ANR	4932430	Symbol	lang -> cur		4932378						
ANR	4932431	Symbol	false		4932378						
ANR	4932432	Symbol	lang		4932378						
ANR	4932433	Function	r_lang_run_string	207:0:4529:4638							
ANR	4932434	FunctionDef	"r_lang_run_string (RLang * lang , const char * code)"		4932433	0					
ANR	4932435	CompoundStatement		207:59:4588:4638	4932433	0					
ANR	4932436	ReturnStatement	"return r_lang_run ( lang , code , strlen ( code ) ) ;"	208:1:4591:4636	4932433	0	True				
ANR	4932437	CallExpression	"r_lang_run ( lang , code , strlen ( code ) )"		4932433	0					
ANR	4932438	Callee	r_lang_run		4932433	0					
ANR	4932439	Identifier	r_lang_run		4932433	0					
ANR	4932440	ArgumentList	lang		4932433	1					
ANR	4932441	Argument	lang		4932433	0					
ANR	4932442	Identifier	lang		4932433	0					
ANR	4932443	Argument	code		4932433	1					
ANR	4932444	Identifier	code		4932433	0					
ANR	4932445	Argument	strlen ( code )		4932433	2					
ANR	4932446	CallExpression	strlen ( code )		4932433	0					
ANR	4932447	Callee	strlen		4932433	0					
ANR	4932448	Identifier	strlen		4932433	0					
ANR	4932449	ArgumentList	code		4932433	1					
ANR	4932450	Argument	code		4932433	0					
ANR	4932451	Identifier	code		4932433	0					
ANR	4932452	ReturnType	R_API int		4932433	1					
ANR	4932453	Identifier	r_lang_run_string		4932433	2					
ANR	4932454	ParameterList	"RLang * lang , const char * code"		4932433	3					
ANR	4932455	Parameter	RLang * lang	207:28:4557:4567	4932433	0	True				
ANR	4932456	ParameterType	RLang *		4932433	0					
ANR	4932457	Identifier	lang		4932433	1					
ANR	4932458	Parameter	const char * code	207:41:4570:4585	4932433	1	True				
ANR	4932459	ParameterType	const char *		4932433	0					
ANR	4932460	Identifier	code		4932433	1					
ANR	4932461	CFGEntryNode	ENTRY		4932433		True				
ANR	4932462	CFGExitNode	EXIT		4932433		True				
ANR	4932463	Symbol	strlen		4932433						
ANR	4932464	Symbol	code		4932433						
ANR	4932465	Symbol	r_lang_run		4932433						
ANR	4932466	Symbol	lang		4932433						
ANR	4932467	Function	r_lang_run_file	211:0:4641:4980							
ANR	4932468	FunctionDef	"r_lang_run_file (RLang * lang , const char * file)"		4932467	0					
ANR	4932469	CompoundStatement		211:57:4698:4980	4932467	0					
ANR	4932470	IdentifierDeclStatement	"int len , ret = false ;"	212:1:4701:4721	4932467	0	True				
ANR	4932471	IdentifierDecl	len		4932467	0					
ANR	4932472	IdentifierDeclType	int		4932467	0					
ANR	4932473	Identifier	len		4932467	1					
ANR	4932474	IdentifierDecl	ret = false		4932467	1					
ANR	4932475	IdentifierDeclType	int		4932467	0					
ANR	4932476	Identifier	ret		4932467	1					
ANR	4932477	AssignmentExpression	ret = false		4932467	2		=			
ANR	4932478	Identifier	false		4932467	0					
ANR	4932479	Identifier	false		4932467	1					
ANR	4932480	IfStatement	if ( lang -> cur )		4932467	1					
ANR	4932481	Condition	lang -> cur	213:5:4728:4736	4932467	0	True				
ANR	4932482	PtrMemberAccess	lang -> cur		4932467	0					
ANR	4932483	Identifier	lang		4932467	0					
ANR	4932484	Identifier	cur		4932467	1					
ANR	4932485	CompoundStatement		3:16:40:40	4932467	1					
ANR	4932486	IfStatement	if ( ! lang -> cur -> run_file )		4932467	0					
ANR	4932487	Condition	! lang -> cur -> run_file	214:6:4747:4766	4932467	0	True				
ANR	4932488	UnaryOperationExpression	! lang -> cur -> run_file		4932467	0					
ANR	4932489	UnaryOperator	!		4932467	0					
ANR	4932490	PtrMemberAccess	lang -> cur -> run_file		4932467	1					
ANR	4932491	PtrMemberAccess	lang -> cur		4932467	0					
ANR	4932492	Identifier	lang		4932467	0					
ANR	4932493	Identifier	cur		4932467	1					
ANR	4932494	Identifier	run_file		4932467	1					
ANR	4932495	CompoundStatement		4:28:70:70	4932467	1					
ANR	4932496	IfStatement	if ( lang -> cur -> run )		4932467	0					
ANR	4932497	Condition	lang -> cur -> run	215:7:4778:4791	4932467	0	True				
ANR	4932498	PtrMemberAccess	lang -> cur -> run		4932467	0					
ANR	4932499	PtrMemberAccess	lang -> cur		4932467	0					
ANR	4932500	Identifier	lang		4932467	0					
ANR	4932501	Identifier	cur		4932467	1					
ANR	4932502	Identifier	run		4932467	1					
ANR	4932503	CompoundStatement		6:4:101:139	4932467	1					
ANR	4932504	IdentifierDeclStatement	"char * code = r_file_slurp ( file , & len ) ;"	216:4:4800:4838	4932467	0	True				
ANR	4932505	IdentifierDecl	"* code = r_file_slurp ( file , & len )"		4932467	0					
ANR	4932506	IdentifierDeclType	char *		4932467	0					
ANR	4932507	Identifier	code		4932467	1					
ANR	4932508	AssignmentExpression	"* code = r_file_slurp ( file , & len )"		4932467	2		=			
ANR	4932509	Identifier	code		4932467	0					
ANR	4932510	CallExpression	"r_file_slurp ( file , & len )"		4932467	1					
ANR	4932511	Callee	r_file_slurp		4932467	0					
ANR	4932512	Identifier	r_file_slurp		4932467	0					
ANR	4932513	ArgumentList	file		4932467	1					
ANR	4932514	Argument	file		4932467	0					
ANR	4932515	Identifier	file		4932467	0					
ANR	4932516	Argument	& len		4932467	1					
ANR	4932517	UnaryOperationExpression	& len		4932467	0					
ANR	4932518	UnaryOperator	&		4932467	0					
ANR	4932519	Identifier	len		4932467	1					
ANR	4932520	ExpressionStatement	"ret = lang -> cur -> run ( lang , code , len )"	217:4:4844:4882	4932467	1	True				
ANR	4932521	AssignmentExpression	"ret = lang -> cur -> run ( lang , code , len )"		4932467	0		=			
ANR	4932522	Identifier	ret		4932467	0					
ANR	4932523	CallExpression	"lang -> cur -> run ( lang , code , len )"		4932467	1					
ANR	4932524	Callee	lang -> cur -> run		4932467	0					
ANR	4932525	PtrMemberAccess	lang -> cur -> run		4932467	0					
ANR	4932526	PtrMemberAccess	lang -> cur		4932467	0					
ANR	4932527	Identifier	lang		4932467	0					
ANR	4932528	Identifier	cur		4932467	1					
ANR	4932529	Identifier	run		4932467	1					
ANR	4932530	ArgumentList	lang		4932467	1					
ANR	4932531	Argument	lang		4932467	0					
ANR	4932532	Identifier	lang		4932467	0					
ANR	4932533	Argument	code		4932467	1					
ANR	4932534	Identifier	code		4932467	0					
ANR	4932535	Argument	len		4932467	2					
ANR	4932536	Identifier	len		4932467	0					
ANR	4932537	ExpressionStatement	free ( code )	218:4:4888:4899	4932467	2	True				
ANR	4932538	CallExpression	free ( code )		4932467	0					
ANR	4932539	Callee	free		4932467	0					
ANR	4932540	Identifier	free		4932467	0					
ANR	4932541	ArgumentList	code		4932467	1					
ANR	4932542	Argument	code		4932467	0					
ANR	4932543	Identifier	code		4932467	0					
ANR	4932544	ElseStatement	else		4932467	0					
ANR	4932545	CompoundStatement		10:9:216:216	4932467	0					
ANR	4932546	ExpressionStatement	"ret = lang -> cur -> run_file ( lang , file )"	221:3:4920:4958	4932467	0	True				
ANR	4932547	AssignmentExpression	"ret = lang -> cur -> run_file ( lang , file )"		4932467	0		=			
ANR	4932548	Identifier	ret		4932467	0					
ANR	4932549	CallExpression	"lang -> cur -> run_file ( lang , file )"		4932467	1					
ANR	4932550	Callee	lang -> cur -> run_file		4932467	0					
ANR	4932551	PtrMemberAccess	lang -> cur -> run_file		4932467	0					
ANR	4932552	PtrMemberAccess	lang -> cur		4932467	0					
ANR	4932553	Identifier	lang		4932467	0					
ANR	4932554	Identifier	cur		4932467	1					
ANR	4932555	Identifier	run_file		4932467	1					
ANR	4932556	ArgumentList	lang		4932467	1					
ANR	4932557	Argument	lang		4932467	0					
ANR	4932558	Identifier	lang		4932467	0					
ANR	4932559	Argument	file		4932467	1					
ANR	4932560	Identifier	file		4932467	0					
ANR	4932561	ReturnStatement	return ret ;	224:1:4968:4978	4932467	2	True				
ANR	4932562	Identifier	ret		4932467	0					
ANR	4932563	ReturnType	R_API int		4932467	1					
ANR	4932564	Identifier	r_lang_run_file		4932467	2					
ANR	4932565	ParameterList	"RLang * lang , const char * file"		4932467	3					
ANR	4932566	Parameter	RLang * lang	211:26:4667:4677	4932467	0	True				
ANR	4932567	ParameterType	RLang *		4932467	0					
ANR	4932568	Identifier	lang		4932467	1					
ANR	4932569	Parameter	const char * file	211:39:4680:4695	4932467	1	True				
ANR	4932570	ParameterType	const char *		4932467	0					
ANR	4932571	Identifier	file		4932467	1					
ANR	4932572	CFGEntryNode	ENTRY		4932467		True				
ANR	4932573	CFGExitNode	EXIT		4932467		True				
ANR	4932574	Symbol	ret		4932467						
ANR	4932575	Symbol	r_file_slurp		4932467						
ANR	4932576	Symbol	* * lang		4932467						
ANR	4932577	Symbol	* lang -> cur		4932467						
ANR	4932578	Symbol	lang -> cur -> run		4932467						
ANR	4932579	Symbol	code		4932467						
ANR	4932580	Symbol	* lang		4932467						
ANR	4932581	Symbol	false		4932467						
ANR	4932582	Symbol	lang -> cur -> run_file		4932467						
ANR	4932583	Symbol	file		4932467						
ANR	4932584	Symbol	len		4932467						
ANR	4932585	Symbol	lang -> cur		4932467						
ANR	4932586	Symbol	lang		4932467						
ANR	4932587	Symbol	& len		4932467						
ANR	4932588	Function	r_lang_prompt	228:0:5067:7271							
ANR	4932589	FunctionDef	r_lang_prompt (RLang * lang)		4932588	0					
ANR	4932590	CompoundStatement		228:37:5104:7271	4932588	0					
ANR	4932591	IdentifierDeclStatement	char buf [ 1024 ] ;	229:1:5107:5121	4932588	0	True				
ANR	4932592	IdentifierDecl	buf [ 1024 ]		4932588	0					
ANR	4932593	IdentifierDeclType	char [ 1024 ]		4932588	0					
ANR	4932594	Identifier	buf		4932588	1					
ANR	4932595	PrimaryExpression	1024		4932588	2					
ANR	4932596	IdentifierDeclStatement	const char * p ;	230:1:5124:5137	4932588	1	True				
ANR	4932597	IdentifierDecl	* p		4932588	0					
ANR	4932598	IdentifierDeclType	const char *		4932588	0					
ANR	4932599	Identifier	p		4932588	1					
ANR	4932600	IfStatement	if ( ! lang || ! lang -> cur )		4932588	2					
ANR	4932601	Condition	! lang || ! lang -> cur	232:5:5145:5163	4932588	0	True				
ANR	4932602	OrExpression	! lang || ! lang -> cur		4932588	0		||			
ANR	4932603	UnaryOperationExpression	! lang		4932588	0					
ANR	4932604	UnaryOperator	!		4932588	0					
ANR	4932605	Identifier	lang		4932588	1					
ANR	4932606	UnaryOperationExpression	! lang -> cur		4932588	1					
ANR	4932607	UnaryOperator	!		4932588	0					
ANR	4932608	PtrMemberAccess	lang -> cur		4932588	1					
ANR	4932609	Identifier	lang		4932588	0					
ANR	4932610	Identifier	cur		4932588	1					
ANR	4932611	CompoundStatement		5:26:61:61	4932588	1					
ANR	4932612	ReturnStatement	return false ;	233:2:5170:5182	4932588	0	True				
ANR	4932613	Identifier	false		4932588	0					
ANR	4932614	IfStatement	if ( lang -> cur -> prompt )		4932588	3					
ANR	4932615	Condition	lang -> cur -> prompt	236:5:5193:5209	4932588	0	True				
ANR	4932616	PtrMemberAccess	lang -> cur -> prompt		4932588	0					
ANR	4932617	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4932618	Identifier	lang		4932588	0					
ANR	4932619	Identifier	cur		4932588	1					
ANR	4932620	Identifier	prompt		4932588	1					
ANR	4932621	CompoundStatement		9:24:107:107	4932588	1					
ANR	4932622	IfStatement	if ( lang -> cur -> prompt ( lang ) )		4932588	0					
ANR	4932623	Condition	lang -> cur -> prompt ( lang )	237:6:5220:5243	4932588	0	True				
ANR	4932624	CallExpression	lang -> cur -> prompt ( lang )		4932588	0					
ANR	4932625	Callee	lang -> cur -> prompt		4932588	0					
ANR	4932626	PtrMemberAccess	lang -> cur -> prompt		4932588	0					
ANR	4932627	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4932628	Identifier	lang		4932588	0					
ANR	4932629	Identifier	cur		4932588	1					
ANR	4932630	Identifier	prompt		4932588	1					
ANR	4932631	ArgumentList	lang		4932588	1					
ANR	4932632	Argument	lang		4932588	0					
ANR	4932633	Identifier	lang		4932588	0					
ANR	4932634	CompoundStatement		10:32:141:141	4932588	1					
ANR	4932635	ReturnStatement	return true ;	238:3:5251:5262	4932588	0	True				
ANR	4932636	Identifier	true		4932588	0					
ANR	4932637	IdentifierDeclStatement	RLine * line = r_line_singleton ( ) ;	242:1:5289:5322	4932588	4	True				
ANR	4932638	IdentifierDecl	* line = r_line_singleton ( )		4932588	0					
ANR	4932639	IdentifierDeclType	RLine *		4932588	0					
ANR	4932640	Identifier	line		4932588	1					
ANR	4932641	AssignmentExpression	* line = r_line_singleton ( )		4932588	2		=			
ANR	4932642	Identifier	line		4932588	0					
ANR	4932643	CallExpression	r_line_singleton ( )		4932588	1					
ANR	4932644	Callee	r_line_singleton		4932588	0					
ANR	4932645	Identifier	r_line_singleton		4932588	0					
ANR	4932646	ArgumentList			4932588	1					
ANR	4932647	IdentifierDeclStatement	RLineHistory hist = line -> history ;	243:1:5325:5358	4932588	5	True				
ANR	4932648	IdentifierDecl	hist = line -> history		4932588	0					
ANR	4932649	IdentifierDeclType	RLineHistory		4932588	0					
ANR	4932650	Identifier	hist		4932588	1					
ANR	4932651	AssignmentExpression	hist = line -> history		4932588	2		=			
ANR	4932652	Identifier	hist		4932588	0					
ANR	4932653	PtrMemberAccess	line -> history		4932588	1					
ANR	4932654	Identifier	line		4932588	0					
ANR	4932655	Identifier	history		4932588	1					
ANR	4932656	IdentifierDeclStatement	RLineHistory histnull = { 0 } ;	244:1:5361:5388	4932588	6	True				
ANR	4932657	IdentifierDecl	histnull = { 0 }		4932588	0					
ANR	4932658	IdentifierDeclType	RLineHistory		4932588	0					
ANR	4932659	Identifier	histnull		4932588	1					
ANR	4932660	AssignmentExpression	histnull = { 0 }		4932588	2		=			
ANR	4932661	Identifier	histnull		4932588	0					
ANR	4932662	InitializerList	0		4932588	1					
ANR	4932663	PrimaryExpression	0		4932588	0					
ANR	4932664	IdentifierDeclStatement	RLineCompletion oc = line -> completion ;	245:1:5391:5428	4932588	7	True				
ANR	4932665	IdentifierDecl	oc = line -> completion		4932588	0					
ANR	4932666	IdentifierDeclType	RLineCompletion		4932588	0					
ANR	4932667	Identifier	oc		4932588	1					
ANR	4932668	AssignmentExpression	oc = line -> completion		4932588	2		=			
ANR	4932669	Identifier	oc		4932588	0					
ANR	4932670	PtrMemberAccess	line -> completion		4932588	1					
ANR	4932671	Identifier	line		4932588	0					
ANR	4932672	Identifier	completion		4932588	1					
ANR	4932673	IdentifierDeclStatement	RLineCompletion ocnull = { 0 } ;	246:1:5431:5459	4932588	8	True				
ANR	4932674	IdentifierDecl	ocnull = { 0 }		4932588	0					
ANR	4932675	IdentifierDeclType	RLineCompletion		4932588	0					
ANR	4932676	Identifier	ocnull		4932588	1					
ANR	4932677	AssignmentExpression	ocnull = { 0 }		4932588	2		=			
ANR	4932678	Identifier	ocnull		4932588	0					
ANR	4932679	InitializerList	0		4932588	1					
ANR	4932680	PrimaryExpression	0		4932588	0					
ANR	4932681	IdentifierDeclStatement	char * prompt = strdup ( line -> prompt ) ;	247:1:5462:5498	4932588	9	True				
ANR	4932682	IdentifierDecl	* prompt = strdup ( line -> prompt )		4932588	0					
ANR	4932683	IdentifierDeclType	char *		4932588	0					
ANR	4932684	Identifier	prompt		4932588	1					
ANR	4932685	AssignmentExpression	* prompt = strdup ( line -> prompt )		4932588	2		=			
ANR	4932686	Identifier	prompt		4932588	0					
ANR	4932687	CallExpression	strdup ( line -> prompt )		4932588	1					
ANR	4932688	Callee	strdup		4932588	0					
ANR	4932689	Identifier	strdup		4932588	0					
ANR	4932690	ArgumentList	line -> prompt		4932588	1					
ANR	4932691	Argument	line -> prompt		4932588	0					
ANR	4932692	PtrMemberAccess	line -> prompt		4932588	0					
ANR	4932693	Identifier	line		4932588	0					
ANR	4932694	Identifier	prompt		4932588	1					
ANR	4932695	ExpressionStatement	line -> completion = ocnull	248:1:5503:5528	4932588	10	True				
ANR	4932696	AssignmentExpression	line -> completion = ocnull		4932588	0		=			
ANR	4932697	PtrMemberAccess	line -> completion		4932588	0					
ANR	4932698	Identifier	line		4932588	0					
ANR	4932699	Identifier	completion		4932588	1					
ANR	4932700	Identifier	ocnull		4932588	1					
ANR	4932701	ExpressionStatement	line -> history = histnull	249:1:5531:5555	4932588	11	True				
ANR	4932702	AssignmentExpression	line -> history = histnull		4932588	0		=			
ANR	4932703	PtrMemberAccess	line -> history		4932588	0					
ANR	4932704	Identifier	line		4932588	0					
ANR	4932705	Identifier	history		4932588	1					
ANR	4932706	Identifier	histnull		4932588	1					
ANR	4932707	ForStatement	for ( ; ; )		4932588	12					
ANR	4932708	CompoundStatement		25:10:474:474	4932588	0					
ANR	4932709	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) - 1 , ""%s> "" , lang -> cur -> name )"	253:2:5583:5638	4932588	0	True				
ANR	4932710	CallExpression	"snprintf ( buf , sizeof ( buf ) - 1 , ""%s> "" , lang -> cur -> name )"		4932588	0					
ANR	4932711	Callee	snprintf		4932588	0					
ANR	4932712	Identifier	snprintf		4932588	0					
ANR	4932713	ArgumentList	buf		4932588	1					
ANR	4932714	Argument	buf		4932588	0					
ANR	4932715	Identifier	buf		4932588	0					
ANR	4932716	Argument	sizeof ( buf ) - 1		4932588	1					
ANR	4932717	AdditiveExpression	sizeof ( buf ) - 1		4932588	0		-			
ANR	4932718	SizeofExpression	sizeof ( buf )		4932588	0					
ANR	4932719	Sizeof	sizeof		4932588	0					
ANR	4932720	SizeofOperand	buf		4932588	1					
ANR	4932721	PrimaryExpression	1		4932588	1					
ANR	4932722	Argument	"""%s> """		4932588	2					
ANR	4932723	PrimaryExpression	"""%s> """		4932588	0					
ANR	4932724	Argument	lang -> cur -> name		4932588	3					
ANR	4932725	PtrMemberAccess	lang -> cur -> name		4932588	0					
ANR	4932726	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4932727	Identifier	lang		4932588	0					
ANR	4932728	Identifier	cur		4932588	1					
ANR	4932729	Identifier	name		4932588	1					
ANR	4932730	ExpressionStatement	r_line_set_prompt ( buf )	254:2:5642:5665	4932588	1	True				
ANR	4932731	CallExpression	r_line_set_prompt ( buf )		4932588	0					
ANR	4932732	Callee	r_line_set_prompt		4932588	0					
ANR	4932733	Identifier	r_line_set_prompt		4932588	0					
ANR	4932734	ArgumentList	buf		4932588	1					
ANR	4932735	Argument	buf		4932588	0					
ANR	4932736	Identifier	buf		4932588	0					
ANR	4932737	ExpressionStatement	"printf ( ""%s> "" , lang -> cur -> name )"	256:2:5675:5707	4932588	2	True				
ANR	4932738	CallExpression	"printf ( ""%s> "" , lang -> cur -> name )"		4932588	0					
ANR	4932739	Callee	printf		4932588	0					
ANR	4932740	Identifier	printf		4932588	0					
ANR	4932741	ArgumentList	"""%s> """		4932588	1					
ANR	4932742	Argument	"""%s> """		4932588	0					
ANR	4932743	PrimaryExpression	"""%s> """		4932588	0					
ANR	4932744	Argument	lang -> cur -> name		4932588	1					
ANR	4932745	PtrMemberAccess	lang -> cur -> name		4932588	0					
ANR	4932746	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4932747	Identifier	lang		4932588	0					
ANR	4932748	Identifier	cur		4932588	1					
ANR	4932749	Identifier	name		4932588	1					
ANR	4932750	ExpressionStatement	fflush ( stdout )	257:2:5711:5726	4932588	3	True				
ANR	4932751	CallExpression	fflush ( stdout )		4932588	0					
ANR	4932752	Callee	fflush		4932588	0					
ANR	4932753	Identifier	fflush		4932588	0					
ANR	4932754	ArgumentList	stdout		4932588	1					
ANR	4932755	Argument	stdout		4932588	0					
ANR	4932756	Identifier	stdout		4932588	0					
ANR	4932757	ExpressionStatement	"fgets ( buf , sizeof ( buf ) - 1 , stdin )"	258:2:5730:5764	4932588	4	True				
ANR	4932758	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , stdin )"		4932588	0					
ANR	4932759	Callee	fgets		4932588	0					
ANR	4932760	Identifier	fgets		4932588	0					
ANR	4932761	ArgumentList	buf		4932588	1					
ANR	4932762	Argument	buf		4932588	0					
ANR	4932763	Identifier	buf		4932588	0					
ANR	4932764	Argument	sizeof ( buf ) - 1		4932588	1					
ANR	4932765	AdditiveExpression	sizeof ( buf ) - 1		4932588	0		-			
ANR	4932766	SizeofExpression	sizeof ( buf )		4932588	0					
ANR	4932767	Sizeof	sizeof		4932588	0					
ANR	4932768	SizeofOperand	buf		4932588	1					
ANR	4932769	PrimaryExpression	1		4932588	1					
ANR	4932770	Argument	stdin		4932588	2					
ANR	4932771	Identifier	stdin		4932588	0					
ANR	4932772	IfStatement	if ( feof ( stdin ) )		4932588	5					
ANR	4932773	Condition	feof ( stdin )	259:6:5772:5783	4932588	0	True				
ANR	4932774	CallExpression	feof ( stdin )		4932588	0					
ANR	4932775	Callee	feof		4932588	0					
ANR	4932776	Identifier	feof		4932588	0					
ANR	4932777	ArgumentList	stdin		4932588	1					
ANR	4932778	Argument	stdin		4932588	0					
ANR	4932779	Identifier	stdin		4932588	0					
ANR	4932780	BreakStatement	break ;	259:20:5786:5791	4932588	1	True				
ANR	4932781	IfStatement	if ( * buf )		4932588	6					
ANR	4932782	Condition	* buf	260:6:5799:5802	4932588	0	True				
ANR	4932783	UnaryOperationExpression	* buf		4932588	0					
ANR	4932784	UnaryOperator	*		4932588	0					
ANR	4932785	Identifier	buf		4932588	1					
ANR	4932786	ExpressionStatement	buf [ strlen ( buf ) - 1 ] = '\\0'	260:12:5805:5829	4932588	1	True				
ANR	4932787	AssignmentExpression	buf [ strlen ( buf ) - 1 ] = '\\0'		4932588	0		=			
ANR	4932788	ArrayIndexing	buf [ strlen ( buf ) - 1 ]		4932588	0					
ANR	4932789	Identifier	buf		4932588	0					
ANR	4932790	AdditiveExpression	strlen ( buf ) - 1		4932588	1		-			
ANR	4932791	CallExpression	strlen ( buf )		4932588	0					
ANR	4932792	Callee	strlen		4932588	0					
ANR	4932793	Identifier	strlen		4932588	0					
ANR	4932794	ArgumentList	buf		4932588	1					
ANR	4932795	Argument	buf		4932588	0					
ANR	4932796	Identifier	buf		4932588	0					
ANR	4932797	PrimaryExpression	1		4932588	1					
ANR	4932798	PrimaryExpression	'\\0'		4932588	1					
ANR	4932799	ExpressionStatement	p = r_line_readline ( )	262:2:5840:5862	4932588	7	True				
ANR	4932800	AssignmentExpression	p = r_line_readline ( )		4932588	0		=			
ANR	4932801	Identifier	p		4932588	0					
ANR	4932802	CallExpression	r_line_readline ( )		4932588	1					
ANR	4932803	Callee	r_line_readline		4932588	0					
ANR	4932804	Identifier	r_line_readline		4932588	0					
ANR	4932805	ArgumentList			4932588	1					
ANR	4932806	IfStatement	if ( ! p )		4932588	8					
ANR	4932807	Condition	! p	263:6:5870:5871	4932588	0	True				
ANR	4932808	UnaryOperationExpression	! p		4932588	0					
ANR	4932809	UnaryOperator	!		4932588	0					
ANR	4932810	Identifier	p		4932588	1					
ANR	4932811	CompoundStatement		36:10:769:769	4932588	1					
ANR	4932812	BreakStatement	break ;	264:3:5879:5884	4932588	0	True				
ANR	4932813	ExpressionStatement	r_line_hist_add ( p )	266:2:5892:5911	4932588	9	True				
ANR	4932814	CallExpression	r_line_hist_add ( p )		4932588	0					
ANR	4932815	Callee	r_line_hist_add		4932588	0					
ANR	4932816	Identifier	r_line_hist_add		4932588	0					
ANR	4932817	ArgumentList	p		4932588	1					
ANR	4932818	Argument	p		4932588	0					
ANR	4932819	Identifier	p		4932588	0					
ANR	4932820	ExpressionStatement	"strncpy ( buf , p , sizeof ( buf ) - 1 )"	267:2:5915:5949	4932588	10	True				
ANR	4932821	CallExpression	"strncpy ( buf , p , sizeof ( buf ) - 1 )"		4932588	0					
ANR	4932822	Callee	strncpy		4932588	0					
ANR	4932823	Identifier	strncpy		4932588	0					
ANR	4932824	ArgumentList	buf		4932588	1					
ANR	4932825	Argument	buf		4932588	0					
ANR	4932826	Identifier	buf		4932588	0					
ANR	4932827	Argument	p		4932588	1					
ANR	4932828	Identifier	p		4932588	0					
ANR	4932829	Argument	sizeof ( buf ) - 1		4932588	2					
ANR	4932830	AdditiveExpression	sizeof ( buf ) - 1		4932588	0		-			
ANR	4932831	SizeofExpression	sizeof ( buf )		4932588	0					
ANR	4932832	Sizeof	sizeof		4932588	0					
ANR	4932833	SizeofOperand	buf		4932588	1					
ANR	4932834	PrimaryExpression	1		4932588	1					
ANR	4932835	IfStatement	if ( * buf == '!' )		4932588	11					
ANR	4932836	Condition	* buf == '!'	268:6:5957:5967	4932588	0	True				
ANR	4932837	EqualityExpression	* buf == '!'		4932588	0		==			
ANR	4932838	UnaryOperationExpression	* buf		4932588	0					
ANR	4932839	UnaryOperator	*		4932588	0					
ANR	4932840	Identifier	buf		4932588	1					
ANR	4932841	PrimaryExpression	'!'		4932588	1					
ANR	4932842	CompoundStatement		41:19:865:865	4932588	1					
ANR	4932843	IfStatement	if ( buf [ 1 ] )		4932588	0					
ANR	4932844	Condition	buf [ 1 ]	269:7:5979:5984	4932588	0	True				
ANR	4932845	ArrayIndexing	buf [ 1 ]		4932588	0					
ANR	4932846	Identifier	buf		4932588	0					
ANR	4932847	PrimaryExpression	1		4932588	1					
ANR	4932848	CompoundStatement		42:15:882:882	4932588	1					
ANR	4932849	ExpressionStatement	"r_sandbox_system ( buf + 1 , 1 )"	270:4:5993:6022	4932588	0	True				
ANR	4932850	CallExpression	"r_sandbox_system ( buf + 1 , 1 )"		4932588	0					
ANR	4932851	Callee	r_sandbox_system		4932588	0					
ANR	4932852	Identifier	r_sandbox_system		4932588	0					
ANR	4932853	ArgumentList	buf + 1		4932588	1					
ANR	4932854	Argument	buf + 1		4932588	0					
ANR	4932855	AdditiveExpression	buf + 1		4932588	0		+			
ANR	4932856	Identifier	buf		4932588	0					
ANR	4932857	PrimaryExpression	1		4932588	1					
ANR	4932858	Argument	1		4932588	1					
ANR	4932859	PrimaryExpression	1		4932588	0					
ANR	4932860	ElseStatement	else		4932588	0					
ANR	4932861	CompoundStatement		45:4:935:958	4932588	0					
ANR	4932862	IdentifierDeclStatement	"char * foo , * code = NULL ;"	272:4:6040:6063	4932588	0	True				
ANR	4932863	IdentifierDecl	* foo		4932588	0					
ANR	4932864	IdentifierDeclType	char *		4932588	0					
ANR	4932865	Identifier	foo		4932588	1					
ANR	4932866	IdentifierDecl	* code = NULL		4932588	1					
ANR	4932867	IdentifierDeclType	char *		4932588	0					
ANR	4932868	Identifier	code		4932588	1					
ANR	4932869	AssignmentExpression	* code = NULL		4932588	2		=			
ANR	4932870	Identifier	NULL		4932588	0					
ANR	4932871	Identifier	NULL		4932588	1					
ANR	4932872	DoStatement	do		4932588	1					
ANR	4932873	CompoundStatement		46:7:967:967	4932588	0					
ANR	4932874	ExpressionStatement	"foo = r_cons_editor ( NULL , code )"	274:5:6079:6111	4932588	0	True				
ANR	4932875	AssignmentExpression	"foo = r_cons_editor ( NULL , code )"		4932588	0		=			
ANR	4932876	Identifier	foo		4932588	0					
ANR	4932877	CallExpression	"r_cons_editor ( NULL , code )"		4932588	1					
ANR	4932878	Callee	r_cons_editor		4932588	0					
ANR	4932879	Identifier	r_cons_editor		4932588	0					
ANR	4932880	ArgumentList	NULL		4932588	1					
ANR	4932881	Argument	NULL		4932588	0					
ANR	4932882	Identifier	NULL		4932588	0					
ANR	4932883	Argument	code		4932588	1					
ANR	4932884	Identifier	code		4932588	0					
ANR	4932885	ExpressionStatement	"r_lang_run ( lang , foo , 0 )"	275:5:6118:6143	4932588	1	True				
ANR	4932886	CallExpression	"r_lang_run ( lang , foo , 0 )"		4932588	0					
ANR	4932887	Callee	r_lang_run		4932588	0					
ANR	4932888	Identifier	r_lang_run		4932588	0					
ANR	4932889	ArgumentList	lang		4932588	1					
ANR	4932890	Argument	lang		4932588	0					
ANR	4932891	Identifier	lang		4932588	0					
ANR	4932892	Argument	foo		4932588	1					
ANR	4932893	Identifier	foo		4932588	0					
ANR	4932894	Argument	0		4932588	2					
ANR	4932895	PrimaryExpression	0		4932588	0					
ANR	4932896	ExpressionStatement	free ( code )	276:5:6150:6161	4932588	2	True				
ANR	4932897	CallExpression	free ( code )		4932588	0					
ANR	4932898	Callee	free		4932588	0					
ANR	4932899	Identifier	free		4932588	0					
ANR	4932900	ArgumentList	code		4932588	1					
ANR	4932901	Argument	code		4932588	0					
ANR	4932902	Identifier	code		4932588	0					
ANR	4932903	ExpressionStatement	code = foo	277:5:6168:6178	4932588	3	True				
ANR	4932904	AssignmentExpression	code = foo		4932588	0		=			
ANR	4932905	Identifier	code		4932588	0					
ANR	4932906	Identifier	foo		4932588	1					
ANR	4932907	Condition	"r_cons_yesno ( 'y' , ""Edit again? (Y/n)"" )"	278:13:6193:6231	4932588	1	True				
ANR	4932908	CallExpression	"r_cons_yesno ( 'y' , ""Edit again? (Y/n)"" )"		4932588	0					
ANR	4932909	Callee	r_cons_yesno		4932588	0					
ANR	4932910	Identifier	r_cons_yesno		4932588	0					
ANR	4932911	ArgumentList	'y'		4932588	1					
ANR	4932912	Argument	'y'		4932588	0					
ANR	4932913	PrimaryExpression	'y'		4932588	0					
ANR	4932914	Argument	"""Edit again? (Y/n)"""		4932588	1					
ANR	4932915	PrimaryExpression	"""Edit again? (Y/n)"""		4932588	0					
ANR	4932916	ExpressionStatement	free ( foo )	279:4:6239:6249	4932588	2	True				
ANR	4932917	CallExpression	free ( foo )		4932588	0					
ANR	4932918	Callee	free		4932588	0					
ANR	4932919	Identifier	free		4932588	0					
ANR	4932920	ArgumentList	foo		4932588	1					
ANR	4932921	Argument	foo		4932588	0					
ANR	4932922	Identifier	foo		4932588	0					
ANR	4932923	ContinueStatement	continue ;	281:3:6259:6267	4932588	1	True				
ANR	4932924	IfStatement	"if ( ! memcmp ( buf , "". "" , 2 ) )"		4932588	12					
ANR	4932925	Condition	"! memcmp ( buf , "". "" , 2 )"	283:6:6279:6300	4932588	0	True				
ANR	4932926	UnaryOperationExpression	"! memcmp ( buf , "". "" , 2 )"		4932588	0					
ANR	4932927	UnaryOperator	!		4932588	0					
ANR	4932928	CallExpression	"memcmp ( buf , "". "" , 2 )"		4932588	1					
ANR	4932929	Callee	memcmp		4932588	0					
ANR	4932930	Identifier	memcmp		4932588	0					
ANR	4932931	ArgumentList	buf		4932588	1					
ANR	4932932	Argument	buf		4932588	0					
ANR	4932933	Identifier	buf		4932588	0					
ANR	4932934	Argument	""". """		4932588	1					
ANR	4932935	PrimaryExpression	""". """		4932588	0					
ANR	4932936	Argument	2		4932588	2					
ANR	4932937	PrimaryExpression	2		4932588	0					
ANR	4932938	CompoundStatement		57:3:1203:1238	4932588	1					
ANR	4932939	IdentifierDeclStatement	char * file = r_file_abspath ( buf + 2 ) ;	284:3:6308:6343	4932588	0	True				
ANR	4932940	IdentifierDecl	* file = r_file_abspath ( buf + 2 )		4932588	0					
ANR	4932941	IdentifierDeclType	char *		4932588	0					
ANR	4932942	Identifier	file		4932588	1					
ANR	4932943	AssignmentExpression	* file = r_file_abspath ( buf + 2 )		4932588	2		=			
ANR	4932944	Identifier	file		4932588	0					
ANR	4932945	CallExpression	r_file_abspath ( buf + 2 )		4932588	1					
ANR	4932946	Callee	r_file_abspath		4932588	0					
ANR	4932947	Identifier	r_file_abspath		4932588	0					
ANR	4932948	ArgumentList	buf + 2		4932588	1					
ANR	4932949	Argument	buf + 2		4932588	0					
ANR	4932950	AdditiveExpression	buf + 2		4932588	0		+			
ANR	4932951	Identifier	buf		4932588	0					
ANR	4932952	PrimaryExpression	2		4932588	1					
ANR	4932953	IfStatement	if ( file )		4932588	1					
ANR	4932954	Condition	file	285:7:6352:6355	4932588	0	True				
ANR	4932955	Identifier	file		4932588	0					
ANR	4932956	CompoundStatement		58:13:1253:1253	4932588	1					
ANR	4932957	ExpressionStatement	"r_lang_run_file ( lang , file )"	286:4:6364:6392	4932588	0	True				
ANR	4932958	CallExpression	"r_lang_run_file ( lang , file )"		4932588	0					
ANR	4932959	Callee	r_lang_run_file		4932588	0					
ANR	4932960	Identifier	r_lang_run_file		4932588	0					
ANR	4932961	ArgumentList	lang		4932588	1					
ANR	4932962	Argument	lang		4932588	0					
ANR	4932963	Identifier	lang		4932588	0					
ANR	4932964	Argument	file		4932588	1					
ANR	4932965	Identifier	file		4932588	0					
ANR	4932966	ExpressionStatement	free ( file )	287:4:6398:6409	4932588	1	True				
ANR	4932967	CallExpression	free ( file )		4932588	0					
ANR	4932968	Callee	free		4932588	0					
ANR	4932969	Identifier	free		4932588	0					
ANR	4932970	ArgumentList	file		4932588	1					
ANR	4932971	Argument	file		4932588	0					
ANR	4932972	Identifier	file		4932588	0					
ANR	4932973	ContinueStatement	continue ;	289:3:6419:6427	4932588	2	True				
ANR	4932974	IfStatement	"if ( ! strcmp ( buf , ""q"" ) )"		4932588	13					
ANR	4932975	Condition	"! strcmp ( buf , ""q"" )"	291:6:6439:6456	4932588	0	True				
ANR	4932976	UnaryOperationExpression	"! strcmp ( buf , ""q"" )"		4932588	0					
ANR	4932977	UnaryOperator	!		4932588	0					
ANR	4932978	CallExpression	"strcmp ( buf , ""q"" )"		4932588	1					
ANR	4932979	Callee	strcmp		4932588	0					
ANR	4932980	Identifier	strcmp		4932588	0					
ANR	4932981	ArgumentList	buf		4932588	1					
ANR	4932982	Argument	buf		4932588	0					
ANR	4932983	Identifier	buf		4932588	0					
ANR	4932984	Argument	"""q"""		4932588	1					
ANR	4932985	PrimaryExpression	"""q"""		4932588	0					
ANR	4932986	CompoundStatement		64:26:1354:1354	4932588	1					
ANR	4932987	ExpressionStatement	free ( prompt )	292:3:6464:6477	4932588	0	True				
ANR	4932988	CallExpression	free ( prompt )		4932588	0					
ANR	4932989	Callee	free		4932588	0					
ANR	4932990	Identifier	free		4932588	0					
ANR	4932991	ArgumentList	prompt		4932588	1					
ANR	4932992	Argument	prompt		4932588	0					
ANR	4932993	Identifier	prompt		4932588	0					
ANR	4932994	ReturnStatement	return true ;	293:3:6482:6493	4932588	1	True				
ANR	4932995	Identifier	true		4932588	0					
ANR	4932996	IfStatement	"if ( ! strcmp ( buf , ""?"" ) )"		4932588	14					
ANR	4932997	Condition	"! strcmp ( buf , ""?"" )"	295:6:6505:6522	4932588	0	True				
ANR	4932998	UnaryOperationExpression	"! strcmp ( buf , ""?"" )"		4932588	0					
ANR	4932999	UnaryOperator	!		4932588	0					
ANR	4933000	CallExpression	"strcmp ( buf , ""?"" )"		4932588	1					
ANR	4933001	Callee	strcmp		4932588	0					
ANR	4933002	Identifier	strcmp		4932588	0					
ANR	4933003	ArgumentList	buf		4932588	1					
ANR	4933004	Argument	buf		4932588	0					
ANR	4933005	Identifier	buf		4932588	0					
ANR	4933006	Argument	"""?"""		4932588	1					
ANR	4933007	PrimaryExpression	"""?"""		4932588	0					
ANR	4933008	CompoundStatement		70:3:1443:1458	4932588	1					
ANR	4933009	IdentifierDeclStatement	RLangDef * def ;	296:3:6530:6543	4932588	0	True				
ANR	4933010	IdentifierDecl	* def		4932588	0					
ANR	4933011	IdentifierDeclType	RLangDef *		4932588	0					
ANR	4933012	Identifier	def		4932588	1					
ANR	4933013	IdentifierDeclStatement	RListIter * iter ;	297:3:6548:6563	4932588	1	True				
ANR	4933014	IdentifierDecl	* iter		4932588	0					
ANR	4933015	IdentifierDeclType	RListIter *		4932588	0					
ANR	4933016	Identifier	iter		4932588	1					
ANR	4933017	Statement	eprintf	298:3:6568:6574	4932588	2	True				
ANR	4933018	Statement	(	298:10:6575:6575	4932588	3	True				
ANR	4933019	Statement	"""  ?        - show this help message\\n"""	298:11:6576:6614	4932588	4	True				
ANR	4933020	Statement	"""  !        - run $EDITOR\\n"""	299:4:6620:6647	4932588	5	True				
ANR	4933021	Statement	"""  !command - run system command\\n"""	300:4:6653:6687	4932588	6	True				
ANR	4933022	Statement	"""  . file   - interpret file\\n"""	301:4:6693:6723	4932588	7	True				
ANR	4933023	Statement	"""  q        - quit prompt\\n"""	302:4:6729:6756	4932588	8	True				
ANR	4933024	Statement	)	302:32:6757:6757	4932588	9	True				
ANR	4933025	ExpressionStatement		302:33:6758:6758	4932588	10	True				
ANR	4933026	ExpressionStatement	"eprintf ( ""%s example:\\n"" , lang -> cur -> name )"	303:3:6763:6805	4932588	11	True				
ANR	4933027	CallExpression	"eprintf ( ""%s example:\\n"" , lang -> cur -> name )"		4932588	0					
ANR	4933028	Callee	eprintf		4932588	0					
ANR	4933029	Identifier	eprintf		4932588	0					
ANR	4933030	ArgumentList	"""%s example:\\n"""		4932588	1					
ANR	4933031	Argument	"""%s example:\\n"""		4932588	0					
ANR	4933032	PrimaryExpression	"""%s example:\\n"""		4932588	0					
ANR	4933033	Argument	lang -> cur -> name		4932588	1					
ANR	4933034	PtrMemberAccess	lang -> cur -> name		4932588	0					
ANR	4933035	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4933036	Identifier	lang		4932588	0					
ANR	4933037	Identifier	cur		4932588	1					
ANR	4933038	Identifier	name		4932588	1					
ANR	4933039	IfStatement	if ( lang -> cur -> help )		4932588	12					
ANR	4933040	Condition	lang -> cur -> help	304:7:6814:6828	4932588	0	True				
ANR	4933041	PtrMemberAccess	lang -> cur -> help		4932588	0					
ANR	4933042	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4933043	Identifier	lang		4932588	0					
ANR	4933044	Identifier	cur		4932588	1					
ANR	4933045	Identifier	help		4932588	1					
ANR	4933046	CompoundStatement		77:24:1726:1726	4932588	1					
ANR	4933047	ExpressionStatement	"eprintf ( ""%s"" , * lang -> cur -> help )"	305:4:6837:6869	4932588	0	True				
ANR	4933048	CallExpression	"eprintf ( ""%s"" , * lang -> cur -> help )"		4932588	0					
ANR	4933049	Callee	eprintf		4932588	0					
ANR	4933050	Identifier	eprintf		4932588	0					
ANR	4933051	ArgumentList	"""%s"""		4932588	1					
ANR	4933052	Argument	"""%s"""		4932588	0					
ANR	4933053	PrimaryExpression	"""%s"""		4932588	0					
ANR	4933054	Argument	* lang -> cur -> help		4932588	1					
ANR	4933055	UnaryOperationExpression	* lang -> cur -> help		4932588	0					
ANR	4933056	UnaryOperator	*		4932588	0					
ANR	4933057	PtrMemberAccess	lang -> cur -> help		4932588	1					
ANR	4933058	PtrMemberAccess	lang -> cur		4932588	0					
ANR	4933059	Identifier	lang		4932588	0					
ANR	4933060	Identifier	cur		4932588	1					
ANR	4933061	Identifier	help		4932588	1					
ANR	4933062	IfStatement	if ( ! r_list_empty ( lang -> defs ) )		4932588	13					
ANR	4933063	Condition	! r_list_empty ( lang -> defs )	307:7:6883:6908	4932588	0	True				
ANR	4933064	UnaryOperationExpression	! r_list_empty ( lang -> defs )		4932588	0					
ANR	4933065	UnaryOperator	!		4932588	0					
ANR	4933066	CallExpression	r_list_empty ( lang -> defs )		4932588	1					
ANR	4933067	Callee	r_list_empty		4932588	0					
ANR	4933068	Identifier	r_list_empty		4932588	0					
ANR	4933069	ArgumentList	lang -> defs		4932588	1					
ANR	4933070	Argument	lang -> defs		4932588	0					
ANR	4933071	PtrMemberAccess	lang -> defs		4932588	0					
ANR	4933072	Identifier	lang		4932588	0					
ANR	4933073	Identifier	defs		4932588	1					
ANR	4933074	CompoundStatement		80:35:1806:1806	4932588	1					
ANR	4933075	ExpressionStatement	"eprintf ( ""variables:\\n"" )"	308:4:6917:6941	4932588	0	True				
ANR	4933076	CallExpression	"eprintf ( ""variables:\\n"" )"		4932588	0					
ANR	4933077	Callee	eprintf		4932588	0					
ANR	4933078	Identifier	eprintf		4932588	0					
ANR	4933079	ArgumentList	"""variables:\\n"""		4932588	1					
ANR	4933080	Argument	"""variables:\\n"""		4932588	0					
ANR	4933081	PrimaryExpression	"""variables:\\n"""		4932588	0					
ANR	4933082	Statement	r_list_foreach	310:3:6951:6964	4932588	14	True				
ANR	4933083	Statement	(	310:18:6966:6966	4932588	15	True				
ANR	4933084	Statement	lang	310:19:6967:6970	4932588	16	True				
ANR	4933085	Statement	->	310:23:6971:6972	4932588	17	True				
ANR	4933086	Statement	defs	310:25:6973:6976	4932588	18	True				
ANR	4933087	Statement	","	310:29:6977:6977	4932588	19	True				
ANR	4933088	Statement	iter	310:31:6979:6982	4932588	20	True				
ANR	4933089	Statement	","	310:35:6983:6983	4932588	21	True				
ANR	4933090	Statement	def	310:37:6985:6987	4932588	22	True				
ANR	4933091	Statement	)	310:40:6988:6988	4932588	23	True				
ANR	4933092	CompoundStatement		83:42:1885:1885	4932588	24					
ANR	4933093	ExpressionStatement	"eprintf ( ""  %s %s\\n"" , def -> type , def -> name )"	311:4:6996:7039	4932588	0	True				
ANR	4933094	CallExpression	"eprintf ( ""  %s %s\\n"" , def -> type , def -> name )"		4932588	0					
ANR	4933095	Callee	eprintf		4932588	0					
ANR	4933096	Identifier	eprintf		4932588	0					
ANR	4933097	ArgumentList	"""  %s %s\\n"""		4932588	1					
ANR	4933098	Argument	"""  %s %s\\n"""		4932588	0					
ANR	4933099	PrimaryExpression	"""  %s %s\\n"""		4932588	0					
ANR	4933100	Argument	def -> type		4932588	1					
ANR	4933101	PtrMemberAccess	def -> type		4932588	0					
ANR	4933102	Identifier	def		4932588	0					
ANR	4933103	Identifier	type		4932588	1					
ANR	4933104	Argument	def -> name		4932588	2					
ANR	4933105	PtrMemberAccess	def -> name		4932588	0					
ANR	4933106	Identifier	def		4932588	0					
ANR	4933107	Identifier	name		4932588	1					
ANR	4933108	ElseStatement	else		4932588	0					
ANR	4933109	CompoundStatement		86:9:1950:1950	4932588	0					
ANR	4933110	ExpressionStatement	"r_lang_run ( lang , buf , strlen ( buf ) )"	314:3:7060:7096	4932588	0	True				
ANR	4933111	CallExpression	"r_lang_run ( lang , buf , strlen ( buf ) )"		4932588	0					
ANR	4933112	Callee	r_lang_run		4932588	0					
ANR	4933113	Identifier	r_lang_run		4932588	0					
ANR	4933114	ArgumentList	lang		4932588	1					
ANR	4933115	Argument	lang		4932588	0					
ANR	4933116	Identifier	lang		4932588	0					
ANR	4933117	Argument	buf		4932588	1					
ANR	4933118	Identifier	buf		4932588	0					
ANR	4933119	Argument	strlen ( buf )		4932588	2					
ANR	4933120	CallExpression	strlen ( buf )		4932588	0					
ANR	4933121	Callee	strlen		4932588	0					
ANR	4933122	Identifier	strlen		4932588	0					
ANR	4933123	ArgumentList	buf		4932588	1					
ANR	4933124	Argument	buf		4932588	0					
ANR	4933125	Identifier	buf		4932588	0					
ANR	4933126	ExpressionStatement	r_line_set_prompt ( prompt )	318:1:7131:7157	4932588	13	True				
ANR	4933127	CallExpression	r_line_set_prompt ( prompt )		4932588	0					
ANR	4933128	Callee	r_line_set_prompt		4932588	0					
ANR	4933129	Identifier	r_line_set_prompt		4932588	0					
ANR	4933130	ArgumentList	prompt		4932588	1					
ANR	4933131	Argument	prompt		4932588	0					
ANR	4933132	Identifier	prompt		4932588	0					
ANR	4933133	ExpressionStatement	line -> completion = oc	319:1:7160:7181	4932588	14	True				
ANR	4933134	AssignmentExpression	line -> completion = oc		4932588	0		=			
ANR	4933135	PtrMemberAccess	line -> completion		4932588	0					
ANR	4933136	Identifier	line		4932588	0					
ANR	4933137	Identifier	completion		4932588	1					
ANR	4933138	Identifier	oc		4932588	1					
ANR	4933139	ExpressionStatement	line -> history = hist	320:1:7184:7204	4932588	15	True				
ANR	4933140	AssignmentExpression	line -> history = hist		4932588	0		=			
ANR	4933141	PtrMemberAccess	line -> history		4932588	0					
ANR	4933142	Identifier	line		4932588	0					
ANR	4933143	Identifier	history		4932588	1					
ANR	4933144	Identifier	hist		4932588	1					
ANR	4933145	ExpressionStatement	clearerr ( stdin )	321:1:7207:7223	4932588	16	True				
ANR	4933146	CallExpression	clearerr ( stdin )		4932588	0					
ANR	4933147	Callee	clearerr		4932588	0					
ANR	4933148	Identifier	clearerr		4932588	0					
ANR	4933149	ArgumentList	stdin		4932588	1					
ANR	4933150	Argument	stdin		4932588	0					
ANR	4933151	Identifier	stdin		4932588	0					
ANR	4933152	ExpressionStatement	"printf ( ""\\n"" )"	322:1:7226:7239	4932588	17	True				
ANR	4933153	CallExpression	"printf ( ""\\n"" )"		4932588	0					
ANR	4933154	Callee	printf		4932588	0					
ANR	4933155	Identifier	printf		4932588	0					
ANR	4933156	ArgumentList	"""\\n"""		4932588	1					
ANR	4933157	Argument	"""\\n"""		4932588	0					
ANR	4933158	PrimaryExpression	"""\\n"""		4932588	0					
ANR	4933159	ExpressionStatement	free ( prompt )	323:1:7242:7255	4932588	18	True				
ANR	4933160	CallExpression	free ( prompt )		4932588	0					
ANR	4933161	Callee	free		4932588	0					
ANR	4933162	Identifier	free		4932588	0					
ANR	4933163	ArgumentList	prompt		4932588	1					
ANR	4933164	Argument	prompt		4932588	0					
ANR	4933165	Identifier	prompt		4932588	0					
ANR	4933166	ReturnStatement	return true ;	324:1:7258:7269	4932588	19	True				
ANR	4933167	Identifier	true		4932588	0					
ANR	4933168	ReturnType	R_API int		4932588	1					
ANR	4933169	Identifier	r_lang_prompt		4932588	2					
ANR	4933170	ParameterList	RLang * lang		4932588	3					
ANR	4933171	Parameter	RLang * lang	228:24:5091:5101	4932588	0	True				
ANR	4933172	ParameterType	RLang *		4932588	0					
ANR	4933173	Identifier	lang		4932588	1					
ANR	4933174	CFGEntryNode	ENTRY		4932588		True				
ANR	4933175	CFGExitNode	EXIT		4932588		True				
ANR	4933176	InfiniteForNode	true		4932588		True				
ANR	4933177	Symbol	stdin		4932588						
ANR	4933178	Symbol	r_file_abspath		4932588						
ANR	4933179	Symbol	* * lang		4932588						
ANR	4933180	Symbol	stdout		4932588						
ANR	4933181	Symbol	def		4932588						
ANR	4933182	Symbol	* lang		4932588						
ANR	4933183	Symbol	r_line_singleton		4932588						
ANR	4933184	Symbol	* line		4932588						
ANR	4933185	Symbol	def -> name		4932588						
ANR	4933186	Symbol	* * lang -> cur		4932588						
ANR	4933187	Symbol	strlen		4932588						
ANR	4933188	Symbol	hist		4932588						
ANR	4933189	Symbol	memcmp		4932588						
ANR	4933190	Symbol	histnull		4932588						
ANR	4933191	Symbol	lang -> cur		4932588						
ANR	4933192	Symbol	strcmp		4932588						
ANR	4933193	Symbol	* lang -> cur -> help		4932588						
ANR	4933194	Symbol	* buf		4932588						
ANR	4933195	Symbol	NULL		4932588						
ANR	4933196	Symbol	iter		4932588						
ANR	4933197	Symbol	line -> history		4932588						
ANR	4933198	Symbol	lang -> cur -> name		4932588						
ANR	4933199	Symbol	true		4932588						
ANR	4933200	Symbol	r_list_empty		4932588						
ANR	4933201	Symbol	* lang -> cur		4932588						
ANR	4933202	Symbol	code		4932588						
ANR	4933203	Symbol	line		4932588						
ANR	4933204	Symbol	lang -> cur -> prompt		4932588						
ANR	4933205	Symbol	foo		4932588						
ANR	4933206	Symbol	ocnull		4932588						
ANR	4933207	Symbol	* def		4932588						
ANR	4933208	Symbol	file		4932588						
ANR	4933209	Symbol	oc		4932588						
ANR	4933210	Symbol	def -> type		4932588						
ANR	4933211	Symbol	lang		4932588						
ANR	4933212	Symbol	* * * lang		4932588						
ANR	4933213	Symbol	lang -> defs		4932588						
ANR	4933214	Symbol	false		4932588						
ANR	4933215	Symbol	r_cons_yesno		4932588						
ANR	4933216	Symbol	line -> completion		4932588						
ANR	4933217	Symbol	p		4932588						
ANR	4933218	Symbol	buf		4932588						
ANR	4933219	Symbol	* strlen		4932588						
ANR	4933220	Symbol	r_line_readline		4932588						
ANR	4933221	Symbol	r_cons_editor		4932588						
ANR	4933222	Symbol	feof		4932588						
ANR	4933223	Symbol	line -> prompt		4932588						
ANR	4933224	Symbol	lang -> cur -> help		4932588						
ANR	4933225	Symbol	strdup		4932588						
ANR	4933226	Symbol	prompt		4932588						
