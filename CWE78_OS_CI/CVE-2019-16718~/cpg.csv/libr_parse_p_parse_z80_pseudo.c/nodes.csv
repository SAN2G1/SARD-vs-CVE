command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5038908	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_z80_pseudo.c								
ANR	5038909	Function	replace	13:0:225:1578							
ANR	5038910	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5038909	0					
ANR	5038911	CompoundStatement		13:63:288:1578	5038909	0					
ANR	5038912	IdentifierDeclStatement	"int i , j , k ;"	14:1:291:300	5038909	0	True				
ANR	5038913	IdentifierDecl	i		5038909	0					
ANR	5038914	IdentifierDeclType	int		5038909	0					
ANR	5038915	Identifier	i		5038909	1					
ANR	5038916	IdentifierDecl	j		5038909	1					
ANR	5038917	IdentifierDeclType	int		5038909	0					
ANR	5038918	Identifier	j		5038909	1					
ANR	5038919	IdentifierDecl	k		5038909	2					
ANR	5038920	IdentifierDeclType	int		5038909	0					
ANR	5038921	Identifier	k		5038909	1					
ANR	5038922	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } } ;"	15:1:303:930	5038909	1	True				
ANR	5038923	IdentifierDecl	"ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } }"		5038909	0					
ANR	5038924	IdentifierDeclType	 [ ]		5038909	0					
ANR	5038925	Identifier	ops		5038909	1					
ANR	5038926	AssignmentExpression	"ops [ ] = { { ""adc"" , ""1 = 1 + 2"" } , { ""add"" , ""1 = 1 + 2"" } , { ""and"" , ""1 = 1 & 2"" } , { ""cpl"" , ""1 = ~1"" } , { ""ex"" , ""swap(1, 2)"" } , { ""in"" , ""1 = [2]"" } , { ""jp"" , ""goto [1]"" } , { ""jp"" , ""goto 1"" } , { ""jr"" , ""goto +1"" } , { ""ld"" , ""1 = 2"" } , { ""ldd"" , ""1 = 2--"" } , { ""neg"" , ""1 = -1"" } , { ""nop"" , """" } , { ""or"" , ""1 = 1 | 2"" } , { ""pop"" , ""pop 1"" } , { ""push"" , ""push 1"" } , { ""rr"" , ""1 = 1 << 2"" } , { ""sbc"" , ""1 = 1 - 2"" } , { ""sla"" , ""1 = 1 << 2"" } , { ""sra"" , ""1 = 1 >> 2"" } , { ""srl"" , ""1 = 1 >> 2"" } , { ""sub"" , ""1 = 1 - 2"" } , { ""xor"" , ""1 = 1 ^ 2"" } , { NULL } }"		5038909	2		=			
ANR	5038927	Identifier	ops		5038909	0					
ANR	5038928	InitializerList	"""adc"""		5038909	1					
ANR	5038929	InitializerList	"""adc"""		5038909	0					
ANR	5038930	PrimaryExpression	"""adc"""		5038909	0					
ANR	5038931	PrimaryExpression	"""1 = 1 + 2"""		5038909	1					
ANR	5038932	InitializerList	"""add"""		5038909	1					
ANR	5038933	PrimaryExpression	"""add"""		5038909	0					
ANR	5038934	PrimaryExpression	"""1 = 1 + 2"""		5038909	1					
ANR	5038935	InitializerList	"""and"""		5038909	2					
ANR	5038936	PrimaryExpression	"""and"""		5038909	0					
ANR	5038937	PrimaryExpression	"""1 = 1 & 2"""		5038909	1					
ANR	5038938	InitializerList	"""cpl"""		5038909	3					
ANR	5038939	PrimaryExpression	"""cpl"""		5038909	0					
ANR	5038940	PrimaryExpression	"""1 = ~1"""		5038909	1					
ANR	5038941	InitializerList	"""ex"""		5038909	4					
ANR	5038942	PrimaryExpression	"""ex"""		5038909	0					
ANR	5038943	PrimaryExpression	"""swap(1, 2)"""		5038909	1					
ANR	5038944	InitializerList	"""in"""		5038909	5					
ANR	5038945	PrimaryExpression	"""in"""		5038909	0					
ANR	5038946	PrimaryExpression	"""1 = [2]"""		5038909	1					
ANR	5038947	InitializerList	"""jp"""		5038909	6					
ANR	5038948	PrimaryExpression	"""jp"""		5038909	0					
ANR	5038949	PrimaryExpression	"""goto [1]"""		5038909	1					
ANR	5038950	InitializerList	"""jp"""		5038909	7					
ANR	5038951	PrimaryExpression	"""jp"""		5038909	0					
ANR	5038952	PrimaryExpression	"""goto 1"""		5038909	1					
ANR	5038953	InitializerList	"""jr"""		5038909	8					
ANR	5038954	PrimaryExpression	"""jr"""		5038909	0					
ANR	5038955	PrimaryExpression	"""goto +1"""		5038909	1					
ANR	5038956	InitializerList	"""ld"""		5038909	9					
ANR	5038957	PrimaryExpression	"""ld"""		5038909	0					
ANR	5038958	PrimaryExpression	"""1 = 2"""		5038909	1					
ANR	5038959	InitializerList	"""ldd"""		5038909	10					
ANR	5038960	PrimaryExpression	"""ldd"""		5038909	0					
ANR	5038961	PrimaryExpression	"""1 = 2--"""		5038909	1					
ANR	5038962	InitializerList	"""neg"""		5038909	11					
ANR	5038963	PrimaryExpression	"""neg"""		5038909	0					
ANR	5038964	PrimaryExpression	"""1 = -1"""		5038909	1					
ANR	5038965	InitializerList	"""nop"""		5038909	12					
ANR	5038966	PrimaryExpression	"""nop"""		5038909	0					
ANR	5038967	PrimaryExpression	""""""		5038909	1					
ANR	5038968	InitializerList	"""or"""		5038909	13					
ANR	5038969	PrimaryExpression	"""or"""		5038909	0					
ANR	5038970	PrimaryExpression	"""1 = 1 | 2"""		5038909	1					
ANR	5038971	InitializerList	"""pop"""		5038909	14					
ANR	5038972	PrimaryExpression	"""pop"""		5038909	0					
ANR	5038973	PrimaryExpression	"""pop 1"""		5038909	1					
ANR	5038974	InitializerList	"""push"""		5038909	15					
ANR	5038975	PrimaryExpression	"""push"""		5038909	0					
ANR	5038976	PrimaryExpression	"""push 1"""		5038909	1					
ANR	5038977	InitializerList	"""rr"""		5038909	16					
ANR	5038978	PrimaryExpression	"""rr"""		5038909	0					
ANR	5038979	PrimaryExpression	"""1 = 1 << 2"""		5038909	1					
ANR	5038980	InitializerList	"""sbc"""		5038909	17					
ANR	5038981	PrimaryExpression	"""sbc"""		5038909	0					
ANR	5038982	PrimaryExpression	"""1 = 1 - 2"""		5038909	1					
ANR	5038983	InitializerList	"""sla"""		5038909	18					
ANR	5038984	PrimaryExpression	"""sla"""		5038909	0					
ANR	5038985	PrimaryExpression	"""1 = 1 << 2"""		5038909	1					
ANR	5038986	InitializerList	"""sra"""		5038909	19					
ANR	5038987	PrimaryExpression	"""sra"""		5038909	0					
ANR	5038988	PrimaryExpression	"""1 = 1 >> 2"""		5038909	1					
ANR	5038989	InitializerList	"""srl"""		5038909	20					
ANR	5038990	PrimaryExpression	"""srl"""		5038909	0					
ANR	5038991	PrimaryExpression	"""1 = 1 >> 2"""		5038909	1					
ANR	5038992	InitializerList	"""sub"""		5038909	21					
ANR	5038993	PrimaryExpression	"""sub"""		5038909	0					
ANR	5038994	PrimaryExpression	"""1 = 1 - 2"""		5038909	1					
ANR	5038995	InitializerList	"""xor"""		5038909	22					
ANR	5038996	PrimaryExpression	"""xor"""		5038909	0					
ANR	5038997	PrimaryExpression	"""1 = 1 ^ 2"""		5038909	1					
ANR	5038998	InitializerList	NULL		5038909	23					
ANR	5038999	Identifier	NULL		5038909	0					
ANR	5039000	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5038909	2					
ANR	5039001	ForInit	i = 0 ;	45:6:939:942	5038909	0	True				
ANR	5039002	AssignmentExpression	i = 0		5038909	0		=			
ANR	5039003	Identifier	i		5038909	0					
ANR	5039004	PrimaryExpression	0		5038909	1					
ANR	5039005	Condition	ops [ i ] . op != NULL	45:11:944:960	5038909	1	True				
ANR	5039006	EqualityExpression	ops [ i ] . op != NULL		5038909	0		!=			
ANR	5039007	MemberAccess	ops [ i ] . op		5038909	0					
ANR	5039008	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039009	Identifier	ops		5038909	0					
ANR	5039010	Identifier	i		5038909	1					
ANR	5039011	Identifier	op		5038909	1					
ANR	5039012	Identifier	NULL		5038909	1					
ANR	5039013	PostIncDecOperationExpression	i ++	45:30:963:965	5038909	2	True				
ANR	5039014	Identifier	i		5038909	0					
ANR	5039015	IncDec	++		5038909	1					
ANR	5039016	CompoundStatement		33:35:679:679	5038909	3					
ANR	5039017	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5038909	0					
ANR	5039018	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	46:6:976:1003	5038909	0	True				
ANR	5039019	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5038909	0					
ANR	5039020	UnaryOperator	!		5038909	0					
ANR	5039021	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5038909	1					
ANR	5039022	Callee	strcmp		5038909	0					
ANR	5039023	Identifier	strcmp		5038909	0					
ANR	5039024	ArgumentList	ops [ i ] . op		5038909	1					
ANR	5039025	Argument	ops [ i ] . op		5038909	0					
ANR	5039026	MemberAccess	ops [ i ] . op		5038909	0					
ANR	5039027	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039028	Identifier	ops		5038909	0					
ANR	5039029	Identifier	i		5038909	1					
ANR	5039030	Identifier	op		5038909	1					
ANR	5039031	Argument	argv [ 0 ]		5038909	1					
ANR	5039032	ArrayIndexing	argv [ 0 ]		5038909	0					
ANR	5039033	Identifier	argv		5038909	0					
ANR	5039034	PrimaryExpression	0		5038909	1					
ANR	5039035	CompoundStatement		34:36:717:717	5038909	1					
ANR	5039036	IfStatement	if ( newstr != NULL )		5038909	0					
ANR	5039037	Condition	newstr != NULL	47:7:1015:1028	5038909	0	True				
ANR	5039038	EqualityExpression	newstr != NULL		5038909	0		!=			
ANR	5039039	Identifier	newstr		5038909	0					
ANR	5039040	Identifier	NULL		5038909	1					
ANR	5039041	CompoundStatement		35:23:742:742	5038909	1					
ANR	5039042	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5038909	0					
ANR	5039043	ForInit	j = k = 0 ;	48:9:1042:1047	5038909	0	True				
ANR	5039044	AssignmentExpression	j = k = 0		5038909	0		=			
ANR	5039045	Identifier	j		5038909	0					
ANR	5039046	AssignmentExpression	k = 0		5038909	1		=			
ANR	5039047	Identifier	k		5038909	0					
ANR	5039048	PrimaryExpression	0		5038909	1					
ANR	5039049	Condition	ops [ i ] . str [ j ] != '\\0'	48:15:1048:1066	5038909	1	True				
ANR	5039050	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5038909	0		!=			
ANR	5039051	ArrayIndexing	ops [ i ] . str [ j ]		5038909	0					
ANR	5039052	MemberAccess	ops [ i ] . str		5038909	0					
ANR	5039053	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039054	Identifier	ops		5038909	0					
ANR	5039055	Identifier	i		5038909	1					
ANR	5039056	Identifier	str		5038909	1					
ANR	5039057	Identifier	j		5038909	1					
ANR	5039058	PrimaryExpression	'\\0'		5038909	1					
ANR	5039059	Expression	"j ++ , k ++"	48:35:1068:1074	5038909	2	True				
ANR	5039060	PostIncDecOperationExpression	j ++		5038909	0					
ANR	5039061	Identifier	j		5038909	0					
ANR	5039062	IncDec	++		5038909	1					
ANR	5039063	PostIncDecOperationExpression	k ++		5038909	1					
ANR	5039064	Identifier	k		5038909	0					
ANR	5039065	IncDec	++		5038909	1					
ANR	5039066	CompoundStatement		36:44:788:788	5038909	3					
ANR	5039067	IfStatement	if ( ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9' )		5038909	0					
ANR	5039068	Condition	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'	49:9:1088:1127	5038909	0	True				
ANR	5039069	AndExpression	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'		5038909	0		&&			
ANR	5039070	RelationalExpression	ops [ i ] . str [ j ] >= '1'		5038909	0		>=			
ANR	5039071	ArrayIndexing	ops [ i ] . str [ j ]		5038909	0					
ANR	5039072	MemberAccess	ops [ i ] . str		5038909	0					
ANR	5039073	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039074	Identifier	ops		5038909	0					
ANR	5039075	Identifier	i		5038909	1					
ANR	5039076	Identifier	str		5038909	1					
ANR	5039077	Identifier	j		5038909	1					
ANR	5039078	PrimaryExpression	'1'		5038909	1					
ANR	5039079	RelationalExpression	ops [ i ] . str [ j ] <= '9'		5038909	1		<=			
ANR	5039080	ArrayIndexing	ops [ i ] . str [ j ]		5038909	0					
ANR	5039081	MemberAccess	ops [ i ] . str		5038909	0					
ANR	5039082	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039083	Identifier	ops		5038909	0					
ANR	5039084	Identifier	i		5038909	1					
ANR	5039085	Identifier	str		5038909	1					
ANR	5039086	Identifier	j		5038909	1					
ANR	5039087	PrimaryExpression	'9'		5038909	1					
ANR	5039088	CompoundStatement		38:6:849:890	5038909	1					
ANR	5039089	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	50:6:1138:1179	5038909	0	True				
ANR	5039090	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5038909	0					
ANR	5039091	IdentifierDeclType	const char *		5038909	0					
ANR	5039092	Identifier	w		5038909	1					
ANR	5039093	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5038909	2		=			
ANR	5039094	Identifier	w		5038909	0					
ANR	5039095	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5038909	1					
ANR	5039096	Identifier	argv		5038909	0					
ANR	5039097	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5038909	1		-			
ANR	5039098	ArrayIndexing	ops [ i ] . str [ j ]		5038909	0					
ANR	5039099	MemberAccess	ops [ i ] . str		5038909	0					
ANR	5039100	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039101	Identifier	ops		5038909	0					
ANR	5039102	Identifier	i		5038909	1					
ANR	5039103	Identifier	str		5038909	1					
ANR	5039104	Identifier	j		5038909	1					
ANR	5039105	PrimaryExpression	'0'		5038909	1					
ANR	5039106	IfStatement	if ( w != NULL )		5038909	1					
ANR	5039107	Condition	w != NULL	51:10:1191:1199	5038909	0	True				
ANR	5039108	EqualityExpression	w != NULL		5038909	0		!=			
ANR	5039109	Identifier	w		5038909	0					
ANR	5039110	Identifier	NULL		5038909	1					
ANR	5039111	CompoundStatement		39:21:913:913	5038909	1					
ANR	5039112	ExpressionStatement	"strcpy ( newstr + k , w )"	52:7:1211:1231	5038909	0	True				
ANR	5039113	CallExpression	"strcpy ( newstr + k , w )"		5038909	0					
ANR	5039114	Callee	strcpy		5038909	0					
ANR	5039115	Identifier	strcpy		5038909	0					
ANR	5039116	ArgumentList	newstr + k		5038909	1					
ANR	5039117	Argument	newstr + k		5038909	0					
ANR	5039118	AdditiveExpression	newstr + k		5038909	0		+			
ANR	5039119	Identifier	newstr		5038909	0					
ANR	5039120	Identifier	k		5038909	1					
ANR	5039121	Argument	w		5038909	1					
ANR	5039122	Identifier	w		5038909	0					
ANR	5039123	ExpressionStatement	k += strlen ( w ) - 1	53:7:1240:1256	5038909	1	True				
ANR	5039124	AssignmentExpression	k += strlen ( w ) - 1		5038909	0		+=			
ANR	5039125	Identifier	k		5038909	0					
ANR	5039126	AdditiveExpression	strlen ( w ) - 1		5038909	1		-			
ANR	5039127	CallExpression	strlen ( w )		5038909	0					
ANR	5039128	Callee	strlen		5038909	0					
ANR	5039129	Identifier	strlen		5038909	0					
ANR	5039130	ArgumentList	w		5038909	1					
ANR	5039131	Argument	w		5038909	0					
ANR	5039132	Identifier	w		5038909	0					
ANR	5039133	PrimaryExpression	1		5038909	1					
ANR	5039134	ElseStatement	else		5038909	0					
ANR	5039135	CompoundStatement		43:12:989:989	5038909	0					
ANR	5039136	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	56:6:1286:1311	5038909	0	True				
ANR	5039137	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5038909	0		=			
ANR	5039138	ArrayIndexing	newstr [ k ]		5038909	0					
ANR	5039139	Identifier	newstr		5038909	0					
ANR	5039140	Identifier	k		5038909	1					
ANR	5039141	ArrayIndexing	ops [ i ] . str [ j ]		5038909	1					
ANR	5039142	MemberAccess	ops [ i ] . str		5038909	0					
ANR	5039143	ArrayIndexing	ops [ i ]		5038909	0					
ANR	5039144	Identifier	ops		5038909	0					
ANR	5039145	Identifier	i		5038909	1					
ANR	5039146	Identifier	str		5038909	1					
ANR	5039147	Identifier	j		5038909	1					
ANR	5039148	ExpressionStatement	newstr [ k ] = '\\0'	59:4:1330:1344	5038909	1	True				
ANR	5039149	AssignmentExpression	newstr [ k ] = '\\0'		5038909	0		=			
ANR	5039150	ArrayIndexing	newstr [ k ]		5038909	0					
ANR	5039151	Identifier	newstr		5038909	0					
ANR	5039152	Identifier	k		5038909	1					
ANR	5039153	PrimaryExpression	'\\0'		5038909	1					
ANR	5039154	ReturnStatement	return true ;	61:3:1354:1365	5038909	1	True				
ANR	5039155	Identifier	true		5038909	0					
ANR	5039156	IfStatement	if ( newstr != NULL )		5038909	3					
ANR	5039157	Condition	newstr != NULL	66:5:1406:1419	5038909	0	True				
ANR	5039158	EqualityExpression	newstr != NULL		5038909	0		!=			
ANR	5039159	Identifier	newstr		5038909	0					
ANR	5039160	Identifier	NULL		5038909	1					
ANR	5039161	CompoundStatement		54:21:1133:1133	5038909	1					
ANR	5039162	ExpressionStatement	newstr [ 0 ] = '\\0'	67:2:1426:1442	5038909	0	True				
ANR	5039163	AssignmentExpression	newstr [ 0 ] = '\\0'		5038909	0		=			
ANR	5039164	ArrayIndexing	newstr [ 0 ]		5038909	0					
ANR	5039165	Identifier	newstr		5038909	0					
ANR	5039166	PrimaryExpression	0		5038909	1					
ANR	5039167	PrimaryExpression	'\\0'		5038909	1					
ANR	5039168	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5038909	1					
ANR	5039169	ForInit	i = 0 ;	68:7:1451:1454	5038909	0	True				
ANR	5039170	AssignmentExpression	i = 0		5038909	0		=			
ANR	5039171	Identifier	i		5038909	0					
ANR	5039172	PrimaryExpression	0		5038909	1					
ANR	5039173	Condition	i < argc	68:12:1456:1461	5038909	1	True				
ANR	5039174	RelationalExpression	i < argc		5038909	0		<			
ANR	5039175	Identifier	i		5038909	0					
ANR	5039176	Identifier	argc		5038909	1					
ANR	5039177	PostIncDecOperationExpression	i ++	68:20:1464:1466	5038909	2	True				
ANR	5039178	Identifier	i		5038909	0					
ANR	5039179	IncDec	++		5038909	1					
ANR	5039180	CompoundStatement		56:25:1180:1180	5038909	3					
ANR	5039181	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	69:3:1474:1498	5038909	0	True				
ANR	5039182	CallExpression	"strcat ( newstr , argv [ i ] )"		5038909	0					
ANR	5039183	Callee	strcat		5038909	0					
ANR	5039184	Identifier	strcat		5038909	0					
ANR	5039185	ArgumentList	newstr		5038909	1					
ANR	5039186	Argument	newstr		5038909	0					
ANR	5039187	Identifier	newstr		5038909	0					
ANR	5039188	Argument	argv [ i ]		5038909	1					
ANR	5039189	ArrayIndexing	argv [ i ]		5038909	0					
ANR	5039190	Identifier	argv		5038909	0					
ANR	5039191	Identifier	i		5038909	1					
ANR	5039192	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	70:3:1503:1553	5038909	1	True				
ANR	5039193	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5038909	0					
ANR	5039194	Callee	strcat		5038909	0					
ANR	5039195	Identifier	strcat		5038909	0					
ANR	5039196	ArgumentList	newstr		5038909	1					
ANR	5039197	Argument	newstr		5038909	0					
ANR	5039198	Identifier	newstr		5038909	0					
ANR	5039199	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5038909	1					
ANR	5039200	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5038909	0					
ANR	5039201	Condition	i == 0 || i == argc - 1		5038909	0					
ANR	5039202	OrExpression	i == 0 || i == argc - 1		5038909	0		||			
ANR	5039203	EqualityExpression	i == 0		5038909	0		==			
ANR	5039204	Identifier	i		5038909	0					
ANR	5039205	PrimaryExpression	0		5038909	1					
ANR	5039206	EqualityExpression	i == argc - 1		5038909	1		==			
ANR	5039207	Identifier	i		5038909	0					
ANR	5039208	AdditiveExpression	argc - 1		5038909	1		-			
ANR	5039209	Identifier	argc		5038909	0					
ANR	5039210	PrimaryExpression	1		5038909	1					
ANR	5039211	PrimaryExpression	""" """		5038909	1					
ANR	5039212	PrimaryExpression	""", """		5038909	2					
ANR	5039213	ReturnStatement	return false ;	74:1:1564:1576	5038909	4	True				
ANR	5039214	Identifier	false		5038909	0					
ANR	5039215	ReturnType	static int		5038909	1					
ANR	5039216	Identifier	replace		5038909	2					
ANR	5039217	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5038909	3					
ANR	5039218	Parameter	int argc	13:19:244:251	5038909	0	True				
ANR	5039219	ParameterType	int		5038909	0					
ANR	5039220	Identifier	argc		5038909	1					
ANR	5039221	Parameter	const char * argv [ ]	13:29:254:271	5038909	1	True				
ANR	5039222	ParameterType	const char * [ ]		5038909	0					
ANR	5039223	Identifier	argv		5038909	1					
ANR	5039224	Parameter	char * newstr	13:49:274:285	5038909	2	True				
ANR	5039225	ParameterType	char *		5038909	0					
ANR	5039226	Identifier	newstr		5038909	1					
ANR	5039227	CFGEntryNode	ENTRY		5038909		True				
ANR	5039228	CFGExitNode	EXIT		5038909		True				
ANR	5039229	Symbol	* ops [ i ] . str		5038909						
ANR	5039230	Symbol	* * ops		5038909						
ANR	5039231	Symbol	* argv		5038909						
ANR	5039232	Symbol	argv		5038909						
ANR	5039233	Symbol	ops [ i ] . str		5038909						
ANR	5039234	Symbol	strlen		5038909						
ANR	5039235	Symbol	ops [ i ] . op		5038909						
ANR	5039236	Symbol	* ops		5038909						
ANR	5039237	Symbol	argc		5038909						
ANR	5039238	Symbol	strcmp		5038909						
ANR	5039239	Symbol	* * j		5038909						
ANR	5039240	Symbol	* * i		5038909						
ANR	5039241	Symbol	NULL		5038909						
ANR	5039242	Symbol	* * ops [ i ] . str		5038909						
ANR	5039243	Symbol	false		5038909						
ANR	5039244	Symbol	i		5038909						
ANR	5039245	Symbol	j		5038909						
ANR	5039246	Symbol	k		5038909						
ANR	5039247	Symbol	newstr		5038909						
ANR	5039248	Symbol	* * * ops		5038909						
ANR	5039249	Symbol	ops		5038909						
ANR	5039250	Symbol	* i		5038909						
ANR	5039251	Symbol	* newstr		5038909						
ANR	5039252	Symbol	* j		5038909						
ANR	5039253	Symbol	* k		5038909						
ANR	5039254	Symbol	w		5038909						
ANR	5039255	Symbol	* * * i		5038909						
ANR	5039256	Symbol	true		5038909						
ANR	5039257	DeclStmt									
ANR	5039258	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_z80_pseudo
ANR	5039259	DeclStmt									
ANR	5039260	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
