command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4964736	File	data/converged/CVE-2019-16718~_radare2/libr_main_main.c								
ANR	4964737	DeclStmt									
ANR	4964738	Decl							include < r_util . h >	include < r_util . h > ( r_main )	R_LIB_VERSION
ANR	4964739	DeclStmt									
ANR	4964740	Decl							RMain	RMain [ ]	foo
ANR	4964741	Function	r_main_new	23:0:465:733							
ANR	4964742	FunctionDef	r_main_new (const char * name)		4964741	0					
ANR	4964743	CompoundStatement		23:43:508:733	4964741	0					
ANR	4964744	IdentifierDeclStatement	int i = 0 ;	24:1:511:520	4964741	0	True				
ANR	4964745	IdentifierDecl	i = 0		4964741	0					
ANR	4964746	IdentifierDeclType	int		4964741	0					
ANR	4964747	Identifier	i		4964741	1					
ANR	4964748	AssignmentExpression	i = 0		4964741	2		=			
ANR	4964749	Identifier	i		4964741	0					
ANR	4964750	PrimaryExpression	0		4964741	1					
ANR	4964751	WhileStatement	while ( foo [ i ] . name )		4964741	1					
ANR	4964752	Condition	foo [ i ] . name	25:8:530:540	4964741	0	True				
ANR	4964753	MemberAccess	foo [ i ] . name		4964741	0					
ANR	4964754	ArrayIndexing	foo [ i ]		4964741	0					
ANR	4964755	Identifier	foo		4964741	0					
ANR	4964756	Identifier	i		4964741	1					
ANR	4964757	Identifier	name		4964741	1					
ANR	4964758	CompoundStatement		3:21:34:34	4964741	1					
ANR	4964759	IfStatement	"if ( ! strcmp ( name , foo [ i ] . name ) )"		4964741	0					
ANR	4964760	Condition	"! strcmp ( name , foo [ i ] . name )"	26:6:551:577	4964741	0	True				
ANR	4964761	UnaryOperationExpression	"! strcmp ( name , foo [ i ] . name )"		4964741	0					
ANR	4964762	UnaryOperator	!		4964741	0					
ANR	4964763	CallExpression	"strcmp ( name , foo [ i ] . name )"		4964741	1					
ANR	4964764	Callee	strcmp		4964741	0					
ANR	4964765	Identifier	strcmp		4964741	0					
ANR	4964766	ArgumentList	name		4964741	1					
ANR	4964767	Argument	name		4964741	0					
ANR	4964768	Identifier	name		4964741	0					
ANR	4964769	Argument	foo [ i ] . name		4964741	1					
ANR	4964770	MemberAccess	foo [ i ] . name		4964741	0					
ANR	4964771	ArrayIndexing	foo [ i ]		4964741	0					
ANR	4964772	Identifier	foo		4964741	0					
ANR	4964773	Identifier	i		4964741	1					
ANR	4964774	Identifier	name		4964741	1					
ANR	4964775	CompoundStatement		5:3:76:101	4964741	1					
ANR	4964776	IdentifierDeclStatement	RMain * m = R_NEW0 ( RMain ) ;	27:3:585:610	4964741	0	True				
ANR	4964777	IdentifierDecl	* m = R_NEW0 ( RMain )		4964741	0					
ANR	4964778	IdentifierDeclType	RMain *		4964741	0					
ANR	4964779	Identifier	m		4964741	1					
ANR	4964780	AssignmentExpression	* m = R_NEW0 ( RMain )		4964741	2		=			
ANR	4964781	Identifier	m		4964741	0					
ANR	4964782	CallExpression	R_NEW0 ( RMain )		4964741	1					
ANR	4964783	Callee	R_NEW0		4964741	0					
ANR	4964784	Identifier	R_NEW0		4964741	0					
ANR	4964785	ArgumentList	RMain		4964741	1					
ANR	4964786	Argument	RMain		4964741	0					
ANR	4964787	Identifier	RMain		4964741	0					
ANR	4964788	IfStatement	if ( m )		4964741	1					
ANR	4964789	Condition	m	28:7:619:619	4964741	0	True				
ANR	4964790	Identifier	m		4964741	0					
ANR	4964791	CompoundStatement		6:10:113:113	4964741	1					
ANR	4964792	ExpressionStatement	m -> name = strdup ( foo [ i ] . name )	29:4:628:658	4964741	0	True				
ANR	4964793	AssignmentExpression	m -> name = strdup ( foo [ i ] . name )		4964741	0		=			
ANR	4964794	PtrMemberAccess	m -> name		4964741	0					
ANR	4964795	Identifier	m		4964741	0					
ANR	4964796	Identifier	name		4964741	1					
ANR	4964797	CallExpression	strdup ( foo [ i ] . name )		4964741	1					
ANR	4964798	Callee	strdup		4964741	0					
ANR	4964799	Identifier	strdup		4964741	0					
ANR	4964800	ArgumentList	foo [ i ] . name		4964741	1					
ANR	4964801	Argument	foo [ i ] . name		4964741	0					
ANR	4964802	MemberAccess	foo [ i ] . name		4964741	0					
ANR	4964803	ArrayIndexing	foo [ i ]		4964741	0					
ANR	4964804	Identifier	foo		4964741	0					
ANR	4964805	Identifier	i		4964741	1					
ANR	4964806	Identifier	name		4964741	1					
ANR	4964807	ExpressionStatement	m -> main = foo [ i ] . main	30:4:664:685	4964741	1	True				
ANR	4964808	AssignmentExpression	m -> main = foo [ i ] . main		4964741	0		=			
ANR	4964809	PtrMemberAccess	m -> main		4964741	0					
ANR	4964810	Identifier	m		4964741	0					
ANR	4964811	Identifier	main		4964741	1					
ANR	4964812	MemberAccess	foo [ i ] . main		4964741	1					
ANR	4964813	ArrayIndexing	foo [ i ]		4964741	0					
ANR	4964814	Identifier	foo		4964741	0					
ANR	4964815	Identifier	i		4964741	1					
ANR	4964816	Identifier	main		4964741	1					
ANR	4964817	ReturnStatement	return m ;	32:3:695:703	4964741	2	True				
ANR	4964818	Identifier	m		4964741	0					
ANR	4964819	ExpressionStatement	i ++	34:2:711:714	4964741	1	True				
ANR	4964820	PostIncDecOperationExpression	i ++		4964741	0					
ANR	4964821	Identifier	i		4964741	0					
ANR	4964822	IncDec	++		4964741	1					
ANR	4964823	ReturnStatement	return NULL ;	36:1:720:731	4964741	2	True				
ANR	4964824	Identifier	NULL		4964741	0					
ANR	4964825	ReturnType	R_API RMain *		4964741	1					
ANR	4964826	Identifier	r_main_new		4964741	2					
ANR	4964827	ParameterList	const char * name		4964741	3					
ANR	4964828	Parameter	const char * name	23:25:490:505	4964741	0	True				
ANR	4964829	ParameterType	const char *		4964741	0					
ANR	4964830	Identifier	name		4964741	1					
ANR	4964831	CFGEntryNode	ENTRY		4964741		True				
ANR	4964832	CFGExitNode	EXIT		4964741		True				
ANR	4964833	Symbol	strcmp		4964741						
ANR	4964834	Symbol	RMain		4964741						
ANR	4964835	Symbol	m -> name		4964741						
ANR	4964836	Symbol	NULL		4964741						
ANR	4964837	Symbol	foo		4964741						
ANR	4964838	Symbol	i		4964741						
ANR	4964839	Symbol	m		4964741						
ANR	4964840	Symbol	* foo		4964741						
ANR	4964841	Symbol	R_NEW0		4964741						
ANR	4964842	Symbol	* i		4964741						
ANR	4964843	Symbol	foo [ i ] . name		4964741						
ANR	4964844	Symbol	m -> main		4964741						
ANR	4964845	Symbol	* m		4964741						
ANR	4964846	Symbol	name		4964741						
ANR	4964847	Symbol	strdup		4964741						
ANR	4964848	Symbol	foo [ i ] . main		4964741						
ANR	4964849	Function	r_main_free	39:0:736:799							
ANR	4964850	FunctionDef	r_main_free (RMain * m)		4964849	0					
ANR	4964851	CompoundStatement		39:33:769:799	4964849	0					
ANR	4964852	ExpressionStatement	free ( m -> name )	40:1:772:786	4964849	0	True				
ANR	4964853	CallExpression	free ( m -> name )		4964849	0					
ANR	4964854	Callee	free		4964849	0					
ANR	4964855	Identifier	free		4964849	0					
ANR	4964856	ArgumentList	m -> name		4964849	1					
ANR	4964857	Argument	m -> name		4964849	0					
ANR	4964858	PtrMemberAccess	m -> name		4964849	0					
ANR	4964859	Identifier	m		4964849	0					
ANR	4964860	Identifier	name		4964849	1					
ANR	4964861	ExpressionStatement	free ( m )	41:1:789:797	4964849	1	True				
ANR	4964862	CallExpression	free ( m )		4964849	0					
ANR	4964863	Callee	free		4964849	0					
ANR	4964864	Identifier	free		4964849	0					
ANR	4964865	ArgumentList	m		4964849	1					
ANR	4964866	Argument	m		4964849	0					
ANR	4964867	Identifier	m		4964849	0					
ANR	4964868	ReturnType	R_API void		4964849	1					
ANR	4964869	Identifier	r_main_free		4964849	2					
ANR	4964870	ParameterList	RMain * m		4964849	3					
ANR	4964871	Parameter	RMain * m	39:23:759:766	4964849	0	True				
ANR	4964872	ParameterType	RMain *		4964849	0					
ANR	4964873	Identifier	m		4964849	1					
ANR	4964874	CFGEntryNode	ENTRY		4964849		True				
ANR	4964875	CFGExitNode	EXIT		4964849		True				
ANR	4964876	Symbol	m -> name		4964849						
ANR	4964877	Symbol	* m		4964849						
ANR	4964878	Symbol	m		4964849						
ANR	4964879	Function	r_main_run	44:0:802:930							
ANR	4964880	FunctionDef	"r_main_run (RMain * m , int argc , char * * argv)"		4964879	0					
ANR	4964881	CompoundStatement		44:54:856:930	4964879	0					
ANR	4964882	ExpressionStatement	"r_return_val_if_fail ( m && m -> main , - 1 )"	45:1:859:898	4964879	0	True				
ANR	4964883	CallExpression	"r_return_val_if_fail ( m && m -> main , - 1 )"		4964879	0					
ANR	4964884	Callee	r_return_val_if_fail		4964879	0					
ANR	4964885	Identifier	r_return_val_if_fail		4964879	0					
ANR	4964886	ArgumentList	m && m -> main		4964879	1					
ANR	4964887	Argument	m && m -> main		4964879	0					
ANR	4964888	AndExpression	m && m -> main		4964879	0		&&			
ANR	4964889	Identifier	m		4964879	0					
ANR	4964890	PtrMemberAccess	m -> main		4964879	1					
ANR	4964891	Identifier	m		4964879	0					
ANR	4964892	Identifier	main		4964879	1					
ANR	4964893	Argument	- 1		4964879	1					
ANR	4964894	UnaryOperationExpression	- 1		4964879	0					
ANR	4964895	UnaryOperator	-		4964879	0					
ANR	4964896	PrimaryExpression	1		4964879	1					
ANR	4964897	ReturnStatement	"return m -> main ( argc , argv ) ;"	46:1:901:928	4964879	1	True				
ANR	4964898	CallExpression	"m -> main ( argc , argv )"		4964879	0					
ANR	4964899	Callee	m -> main		4964879	0					
ANR	4964900	PtrMemberAccess	m -> main		4964879	0					
ANR	4964901	Identifier	m		4964879	0					
ANR	4964902	Identifier	main		4964879	1					
ANR	4964903	ArgumentList	argc		4964879	1					
ANR	4964904	Argument	argc		4964879	0					
ANR	4964905	Identifier	argc		4964879	0					
ANR	4964906	Argument	argv		4964879	1					
ANR	4964907	Identifier	argv		4964879	0					
ANR	4964908	ReturnType	R_API int		4964879	1					
ANR	4964909	Identifier	r_main_run		4964879	2					
ANR	4964910	ParameterList	"RMain * m , int argc , char * * argv"		4964879	3					
ANR	4964911	Parameter	RMain * m	44:21:823:830	4964879	0	True				
ANR	4964912	ParameterType	RMain *		4964879	0					
ANR	4964913	Identifier	m		4964879	1					
ANR	4964914	Parameter	int argc	44:31:833:840	4964879	1	True				
ANR	4964915	ParameterType	int		4964879	0					
ANR	4964916	Identifier	argc		4964879	1					
ANR	4964917	Parameter	char * * argv	44:41:843:853	4964879	2	True				
ANR	4964918	ParameterType	char * *		4964879	0					
ANR	4964919	Identifier	argv		4964879	1					
ANR	4964920	CFGEntryNode	ENTRY		4964879		True				
ANR	4964921	CFGExitNode	EXIT		4964879		True				
ANR	4964922	Symbol	argc		4964879						
ANR	4964923	Symbol	m -> main		4964879						
ANR	4964924	Symbol	* m		4964879						
ANR	4964925	Symbol	m		4964879						
ANR	4964926	Symbol	argv		4964879						
