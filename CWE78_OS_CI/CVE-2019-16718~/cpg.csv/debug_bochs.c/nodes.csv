command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1210034	File	data/converged/CVE-2019-16718~_radare2/debug_bochs.c								
ANR	1210035	DeclStmt									
ANR	1210036	Decl							bool	bool	bCapturaRegs
ANR	1210037	DeclStmt									
ANR	1210038	Decl							bool	bool	bStep
ANR	1210039	DeclStmt									
ANR	1210040	Decl							bool	bool	bBreak
ANR	1210041	DeclStmt									
ANR	1210042	Decl							bool	bool	bAjusta
ANR	1210043	DeclStmt									
ANR	1210044	Decl							char	char *	saveRegs
ANR	1210045	DeclStmt									
ANR	1210046	Decl							ut64	ut64	ripStop
ANR	1210047	ClassDef	<unnamed>	14:8:291:328							
ANR	1210048	DeclStmt									
ANR	1210049	Decl							libbochs_t	libbochs_t	desc
ANR	1210050	DeclStmt									
ANR	1210051	Decl									RIOBochs
ANR	1210052	DeclStmt									
ANR	1210053	Decl							libbochs_t	libbochs_t *	desc
ANR	1210054	Function	isBochs	20:0:364:617							
ANR	1210055	FunctionDef	isBochs (RDebug * dbg)		1210054	0					
ANR	1210056	CompoundStatement		20:33:397:617	1210054	0					
ANR	1210057	IdentifierDeclStatement	RIODesc * d = dbg -> iob . io -> desc ;	21:1:400:430	1210054	0	True				
ANR	1210058	IdentifierDecl	* d = dbg -> iob . io -> desc		1210054	0					
ANR	1210059	IdentifierDeclType	RIODesc *		1210054	0					
ANR	1210060	Identifier	d		1210054	1					
ANR	1210061	AssignmentExpression	* d = dbg -> iob . io -> desc		1210054	2		=			
ANR	1210062	Identifier	d		1210054	0					
ANR	1210063	PtrMemberAccess	dbg -> iob . io -> desc		1210054	1					
ANR	1210064	MemberAccess	dbg -> iob . io		1210054	0					
ANR	1210065	PtrMemberAccess	dbg -> iob		1210054	0					
ANR	1210066	Identifier	dbg		1210054	0					
ANR	1210067	Identifier	iob		1210054	1					
ANR	1210068	Identifier	io		1210054	1					
ANR	1210069	Identifier	desc		1210054	1					
ANR	1210070	IfStatement	if ( d && d -> plugin && d -> plugin -> name )		1210054	1					
ANR	1210071	Condition	d && d -> plugin && d -> plugin -> name	22:5:437:469	1210054	0	True				
ANR	1210072	AndExpression	d && d -> plugin && d -> plugin -> name		1210054	0		&&			
ANR	1210073	Identifier	d		1210054	0					
ANR	1210074	AndExpression	d -> plugin && d -> plugin -> name		1210054	1		&&			
ANR	1210075	PtrMemberAccess	d -> plugin		1210054	0					
ANR	1210076	Identifier	d		1210054	0					
ANR	1210077	Identifier	plugin		1210054	1					
ANR	1210078	PtrMemberAccess	d -> plugin -> name		1210054	1					
ANR	1210079	PtrMemberAccess	d -> plugin		1210054	0					
ANR	1210080	Identifier	d		1210054	0					
ANR	1210081	Identifier	plugin		1210054	1					
ANR	1210082	Identifier	name		1210054	1					
ANR	1210083	CompoundStatement		3:40:74:74	1210054	1					
ANR	1210084	IfStatement	"if ( ! strcmp ( ""bochs"" , d -> plugin -> name ) )"		1210054	0					
ANR	1210085	Condition	"! strcmp ( ""bochs"" , d -> plugin -> name )"	23:6:480:513	1210054	0	True				
ANR	1210086	UnaryOperationExpression	"! strcmp ( ""bochs"" , d -> plugin -> name )"		1210054	0					
ANR	1210087	UnaryOperator	!		1210054	0					
ANR	1210088	CallExpression	"strcmp ( ""bochs"" , d -> plugin -> name )"		1210054	1					
ANR	1210089	Callee	strcmp		1210054	0					
ANR	1210090	Identifier	strcmp		1210054	0					
ANR	1210091	ArgumentList	"""bochs"""		1210054	1					
ANR	1210092	Argument	"""bochs"""		1210054	0					
ANR	1210093	PrimaryExpression	"""bochs"""		1210054	0					
ANR	1210094	Argument	d -> plugin -> name		1210054	1					
ANR	1210095	PtrMemberAccess	d -> plugin -> name		1210054	0					
ANR	1210096	PtrMemberAccess	d -> plugin		1210054	0					
ANR	1210097	Identifier	d		1210054	0					
ANR	1210098	Identifier	plugin		1210054	1					
ANR	1210099	Identifier	name		1210054	1					
ANR	1210100	CompoundStatement		4:42:118:118	1210054	1					
ANR	1210101	ReturnStatement	return true ;	24:3:521:532	1210054	0	True				
ANR	1210102	Identifier	true		1210054	0					
ANR	1210103	ExpressionStatement	"eprintf ( ""error: the iodesc data is not bochs friendly\\n"" )"	27:1:542:600	1210054	2	True				
ANR	1210104	CallExpression	"eprintf ( ""error: the iodesc data is not bochs friendly\\n"" )"		1210054	0					
ANR	1210105	Callee	eprintf		1210054	0					
ANR	1210106	Identifier	eprintf		1210054	0					
ANR	1210107	ArgumentList	"""error: the iodesc data is not bochs friendly\\n"""		1210054	1					
ANR	1210108	Argument	"""error: the iodesc data is not bochs friendly\\n"""		1210054	0					
ANR	1210109	PrimaryExpression	"""error: the iodesc data is not bochs friendly\\n"""		1210054	0					
ANR	1210110	ReturnStatement	return false ;	28:1:603:615	1210054	3	True				
ANR	1210111	Identifier	false		1210054	0					
ANR	1210112	ReturnType	static bool		1210054	1					
ANR	1210113	Identifier	isBochs		1210054	2					
ANR	1210114	ParameterList	RDebug * dbg		1210054	3					
ANR	1210115	Parameter	RDebug * dbg	20:20:384:394	1210054	0	True				
ANR	1210116	ParameterType	RDebug *		1210054	0					
ANR	1210117	Identifier	dbg		1210054	1					
ANR	1210118	CFGEntryNode	ENTRY		1210054		True				
ANR	1210119	CFGExitNode	EXIT		1210054		True				
ANR	1210120	Symbol	strcmp		1210054						
ANR	1210121	Symbol	dbg -> iob . io		1210054						
ANR	1210122	Symbol	dbg -> iob		1210054						
ANR	1210123	Symbol	d		1210054						
ANR	1210124	Symbol	d -> plugin		1210054						
ANR	1210125	Symbol	* d -> plugin		1210054						
ANR	1210126	Symbol	* * d		1210054						
ANR	1210127	Symbol	dbg		1210054						
ANR	1210128	Symbol	false		1210054						
ANR	1210129	Symbol	* dbg		1210054						
ANR	1210130	Symbol	* dbg -> iob . io		1210054						
ANR	1210131	Symbol	* d		1210054						
ANR	1210132	Symbol	d -> plugin -> name		1210054						
ANR	1210133	Symbol	dbg -> iob . io -> desc		1210054						
ANR	1210134	Symbol	* dbg -> iob		1210054						
ANR	1210135	Symbol	true		1210054						
ANR	1210136	Symbol	* * dbg		1210054						
ANR	1210137	Function	r_debug_bochs_breakpoint	31:0:620:2039							
ANR	1210138	FunctionDef	"r_debug_bochs_breakpoint (RBreakpoint * bp , RBreakpointItem * b , bool set)"		1210137	0					
ANR	1210139	CompoundStatement		31:84:704:2039	1210137	0					
ANR	1210140	IdentifierDeclStatement	char cmd [ 64 ] ;	32:1:707:719	1210137	0	True				
ANR	1210141	IdentifierDecl	cmd [ 64 ]		1210137	0					
ANR	1210142	IdentifierDeclType	char [ 64 ]		1210137	0					
ANR	1210143	Identifier	cmd		1210137	1					
ANR	1210144	PrimaryExpression	64		1210137	2					
ANR	1210145	IdentifierDeclStatement	char num [ 4 ] ;	33:1:722:733	1210137	1	True				
ANR	1210146	IdentifierDecl	num [ 4 ]		1210137	0					
ANR	1210147	IdentifierDeclType	char [ 4 ]		1210137	0					
ANR	1210148	Identifier	num		1210137	1					
ANR	1210149	PrimaryExpression	4		1210137	2					
ANR	1210150	IdentifierDeclStatement	char addr [ 19 ] ;	34:1:736:749	1210137	2	True				
ANR	1210151	IdentifierDecl	addr [ 19 ]		1210137	0					
ANR	1210152	IdentifierDeclType	char [ 19 ]		1210137	0					
ANR	1210153	Identifier	addr		1210137	1					
ANR	1210154	PrimaryExpression	19		1210137	2					
ANR	1210155	IdentifierDeclStatement	char bufcmd [ 100 ] ;	35:1:752:768	1210137	3	True				
ANR	1210156	IdentifierDecl	bufcmd [ 100 ]		1210137	0					
ANR	1210157	IdentifierDeclType	char [ 100 ]		1210137	0					
ANR	1210158	Identifier	bufcmd		1210137	1					
ANR	1210159	PrimaryExpression	100		1210137	2					
ANR	1210160	IdentifierDeclStatement	ut64 a ;	36:1:771:777	1210137	4	True				
ANR	1210161	IdentifierDecl	a		1210137	0					
ANR	1210162	IdentifierDeclType	ut64		1210137	0					
ANR	1210163	Identifier	a		1210137	1					
ANR	1210164	IdentifierDeclStatement	"int n , i , lenRec ;"	37:1:780:795	1210137	5	True				
ANR	1210165	IdentifierDecl	n		1210137	0					
ANR	1210166	IdentifierDeclType	int		1210137	0					
ANR	1210167	Identifier	n		1210137	1					
ANR	1210168	IdentifierDecl	i		1210137	1					
ANR	1210169	IdentifierDeclType	int		1210137	0					
ANR	1210170	Identifier	i		1210137	1					
ANR	1210171	IdentifierDecl	lenRec		1210137	2					
ANR	1210172	IdentifierDeclType	int		1210137	0					
ANR	1210173	Identifier	lenRec		1210137	1					
ANR	1210174	IfStatement	if ( ! b )		1210137	6					
ANR	1210175	Condition	! b	39:5:837:838	1210137	0	True				
ANR	1210176	UnaryOperationExpression	! b		1210137	0					
ANR	1210177	UnaryOperator	!		1210137	0					
ANR	1210178	Identifier	b		1210137	1					
ANR	1210179	CompoundStatement		9:9:136:136	1210137	1					
ANR	1210180	ReturnStatement	return false ;	40:2:845:857	1210137	0	True				
ANR	1210181	Identifier	false		1210137	0					
ANR	1210182	IfStatement	if ( set )		1210137	7					
ANR	1210183	Condition	set	42:5:867:869	1210137	0	True				
ANR	1210184	Identifier	set		1210137	0					
ANR	1210185	CompoundStatement		12:10:167:167	1210137	1					
ANR	1210186	ExpressionStatement	"sprintf ( cmd , ""lb 0x%x"" , ( ut32 ) b -> addr )"	44:2:940:979	1210137	0	True				
ANR	1210187	CallExpression	"sprintf ( cmd , ""lb 0x%x"" , ( ut32 ) b -> addr )"		1210137	0					
ANR	1210188	Callee	sprintf		1210137	0					
ANR	1210189	Identifier	sprintf		1210137	0					
ANR	1210190	ArgumentList	cmd		1210137	1					
ANR	1210191	Argument	cmd		1210137	0					
ANR	1210192	Identifier	cmd		1210137	0					
ANR	1210193	Argument	"""lb 0x%x"""		1210137	1					
ANR	1210194	PrimaryExpression	"""lb 0x%x"""		1210137	0					
ANR	1210195	Argument	( ut32 ) b -> addr		1210137	2					
ANR	1210196	CastExpression	( ut32 ) b -> addr		1210137	0					
ANR	1210197	CastTarget	ut32		1210137	0					
ANR	1210198	PtrMemberAccess	b -> addr		1210137	1					
ANR	1210199	Identifier	b		1210137	0					
ANR	1210200	Identifier	addr		1210137	1					
ANR	1210201	ExpressionStatement	"bochs_send_cmd ( desc , cmd , true )"	45:2:983:1015	1210137	1	True				
ANR	1210202	CallExpression	"bochs_send_cmd ( desc , cmd , true )"		1210137	0					
ANR	1210203	Callee	bochs_send_cmd		1210137	0					
ANR	1210204	Identifier	bochs_send_cmd		1210137	0					
ANR	1210205	ArgumentList	desc		1210137	1					
ANR	1210206	Argument	desc		1210137	0					
ANR	1210207	Identifier	desc		1210137	0					
ANR	1210208	Argument	cmd		1210137	1					
ANR	1210209	Identifier	cmd		1210137	0					
ANR	1210210	Argument	true		1210137	2					
ANR	1210211	Identifier	true		1210137	0					
ANR	1210212	ExpressionStatement	bCapturaRegs = true	46:2:1019:1038	1210137	2	True				
ANR	1210213	AssignmentExpression	bCapturaRegs = true		1210137	0		=			
ANR	1210214	Identifier	bCapturaRegs		1210137	0					
ANR	1210215	Identifier	true		1210137	1					
ANR	1210216	ElseStatement	else		1210137	0					
ANR	1210217	CompoundStatement		17:8:343:343	1210137	0					
ANR	1210218	ExpressionStatement	"bochs_send_cmd ( desc , ""blist"" , true )"	55:2:1277:1311	1210137	0	True				
ANR	1210219	CallExpression	"bochs_send_cmd ( desc , ""blist"" , true )"		1210137	0					
ANR	1210220	Callee	bochs_send_cmd		1210137	0					
ANR	1210221	Identifier	bochs_send_cmd		1210137	0					
ANR	1210222	ArgumentList	desc		1210137	1					
ANR	1210223	Argument	desc		1210137	0					
ANR	1210224	Identifier	desc		1210137	0					
ANR	1210225	Argument	"""blist"""		1210137	1					
ANR	1210226	PrimaryExpression	"""blist"""		1210137	0					
ANR	1210227	Argument	true		1210137	2					
ANR	1210228	Identifier	true		1210137	0					
ANR	1210229	ExpressionStatement	lenRec = strlen ( desc -> data )	56:2:1315:1343	1210137	1	True				
ANR	1210230	AssignmentExpression	lenRec = strlen ( desc -> data )		1210137	0		=			
ANR	1210231	Identifier	lenRec		1210137	0					
ANR	1210232	CallExpression	strlen ( desc -> data )		1210137	1					
ANR	1210233	Callee	strlen		1210137	0					
ANR	1210234	Identifier	strlen		1210137	0					
ANR	1210235	ArgumentList	desc -> data		1210137	1					
ANR	1210236	Argument	desc -> data		1210137	0					
ANR	1210237	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210238	Identifier	desc		1210137	0					
ANR	1210239	Identifier	data		1210137	1					
ANR	1210240	ExpressionStatement	a = - 1	57:2:1347:1353	1210137	2	True				
ANR	1210241	AssignmentExpression	a = - 1		1210137	0		=			
ANR	1210242	Identifier	a		1210137	0					
ANR	1210243	UnaryOperationExpression	- 1		1210137	1					
ANR	1210244	UnaryOperator	-		1210137	0					
ANR	1210245	PrimaryExpression	1		1210137	1					
ANR	1210246	ExpressionStatement	n = 0	58:2:1357:1362	1210137	3	True				
ANR	1210247	AssignmentExpression	n = 0		1210137	0		=			
ANR	1210248	Identifier	n		1210137	0					
ANR	1210249	PrimaryExpression	0		1210137	1					
ANR	1210250	IfStatement	"if ( ! strncmp ( desc -> data , ""Num Type"" , 8 ) )"		1210137	4					
ANR	1210251	Condition	"! strncmp ( desc -> data , ""Num Type"" , 8 )"	59:6:1370:1405	1210137	0	True				
ANR	1210252	UnaryOperationExpression	"! strncmp ( desc -> data , ""Num Type"" , 8 )"		1210137	0					
ANR	1210253	UnaryOperator	!		1210137	0					
ANR	1210254	CallExpression	"strncmp ( desc -> data , ""Num Type"" , 8 )"		1210137	1					
ANR	1210255	Callee	strncmp		1210137	0					
ANR	1210256	Identifier	strncmp		1210137	0					
ANR	1210257	ArgumentList	desc -> data		1210137	1					
ANR	1210258	Argument	desc -> data		1210137	0					
ANR	1210259	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210260	Identifier	desc		1210137	0					
ANR	1210261	Identifier	data		1210137	1					
ANR	1210262	Argument	"""Num Type"""		1210137	1					
ANR	1210263	PrimaryExpression	"""Num Type"""		1210137	0					
ANR	1210264	Argument	8		1210137	2					
ANR	1210265	PrimaryExpression	8		1210137	0					
ANR	1210266	CompoundStatement		29:44:703:703	1210137	1					
ANR	1210267	ExpressionStatement	i = 37	60:3:1413:1419	1210137	0	True				
ANR	1210268	AssignmentExpression	i = 37		1210137	0		=			
ANR	1210269	Identifier	i		1210137	0					
ANR	1210270	PrimaryExpression	37		1210137	1					
ANR	1210271	DoStatement	do		1210137	1					
ANR	1210272	CompoundStatement		31:6:722:722	1210137	0					
ANR	1210273	IfStatement	if ( desc -> data [ i + 24 ] == 'y' )		1210137	0					
ANR	1210274	Condition	desc -> data [ i + 24 ] == 'y'	62:8:1437:1461	1210137	0	True				
ANR	1210275	EqualityExpression	desc -> data [ i + 24 ] == 'y'		1210137	0		==			
ANR	1210276	ArrayIndexing	desc -> data [ i + 24 ]		1210137	0					
ANR	1210277	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210278	Identifier	desc		1210137	0					
ANR	1210279	Identifier	data		1210137	1					
ANR	1210280	AdditiveExpression	i + 24		1210137	1		+			
ANR	1210281	Identifier	i		1210137	0					
ANR	1210282	PrimaryExpression	24		1210137	1					
ANR	1210283	PrimaryExpression	'y'		1210137	1					
ANR	1210284	CompoundStatement		32:35:759:759	1210137	1					
ANR	1210285	ExpressionStatement	"strncpy ( num , & desc -> data [ i ] , 3 )"	63:5:1471:1502	1210137	0	True				
ANR	1210286	CallExpression	"strncpy ( num , & desc -> data [ i ] , 3 )"		1210137	0					
ANR	1210287	Callee	strncpy		1210137	0					
ANR	1210288	Identifier	strncpy		1210137	0					
ANR	1210289	ArgumentList	num		1210137	1					
ANR	1210290	Argument	num		1210137	0					
ANR	1210291	Identifier	num		1210137	0					
ANR	1210292	Argument	& desc -> data [ i ]		1210137	1					
ANR	1210293	UnaryOperationExpression	& desc -> data [ i ]		1210137	0					
ANR	1210294	UnaryOperator	&		1210137	0					
ANR	1210295	ArrayIndexing	desc -> data [ i ]		1210137	1					
ANR	1210296	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210297	Identifier	desc		1210137	0					
ANR	1210298	Identifier	data		1210137	1					
ANR	1210299	Identifier	i		1210137	1					
ANR	1210300	Argument	3		1210137	2					
ANR	1210301	PrimaryExpression	3		1210137	0					
ANR	1210302	ExpressionStatement	num [ 3 ] = 0	64:5:1509:1519	1210137	1	True				
ANR	1210303	AssignmentExpression	num [ 3 ] = 0		1210137	0		=			
ANR	1210304	ArrayIndexing	num [ 3 ]		1210137	0					
ANR	1210305	Identifier	num		1210137	0					
ANR	1210306	PrimaryExpression	3		1210137	1					
ANR	1210307	PrimaryExpression	0		1210137	1					
ANR	1210308	ExpressionStatement	"strncpy ( addr , & desc -> data [ i + 28 ] , 18 )"	65:5:1526:1564	1210137	2	True				
ANR	1210309	CallExpression	"strncpy ( addr , & desc -> data [ i + 28 ] , 18 )"		1210137	0					
ANR	1210310	Callee	strncpy		1210137	0					
ANR	1210311	Identifier	strncpy		1210137	0					
ANR	1210312	ArgumentList	addr		1210137	1					
ANR	1210313	Argument	addr		1210137	0					
ANR	1210314	Identifier	addr		1210137	0					
ANR	1210315	Argument	& desc -> data [ i + 28 ]		1210137	1					
ANR	1210316	UnaryOperationExpression	& desc -> data [ i + 28 ]		1210137	0					
ANR	1210317	UnaryOperator	&		1210137	0					
ANR	1210318	ArrayIndexing	desc -> data [ i + 28 ]		1210137	1					
ANR	1210319	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210320	Identifier	desc		1210137	0					
ANR	1210321	Identifier	data		1210137	1					
ANR	1210322	AdditiveExpression	i + 28		1210137	1		+			
ANR	1210323	Identifier	i		1210137	0					
ANR	1210324	PrimaryExpression	28		1210137	1					
ANR	1210325	Argument	18		1210137	2					
ANR	1210326	PrimaryExpression	18		1210137	0					
ANR	1210327	ExpressionStatement	addr [ 18 ] = 0	66:5:1571:1583	1210137	3	True				
ANR	1210328	AssignmentExpression	addr [ 18 ] = 0		1210137	0		=			
ANR	1210329	ArrayIndexing	addr [ 18 ]		1210137	0					
ANR	1210330	Identifier	addr		1210137	0					
ANR	1210331	PrimaryExpression	18		1210137	1					
ANR	1210332	PrimaryExpression	0		1210137	1					
ANR	1210333	ExpressionStatement	"n = r_num_get ( NULL , num )"	67:5:1590:1614	1210137	4	True				
ANR	1210334	AssignmentExpression	"n = r_num_get ( NULL , num )"		1210137	0		=			
ANR	1210335	Identifier	n		1210137	0					
ANR	1210336	CallExpression	"r_num_get ( NULL , num )"		1210137	1					
ANR	1210337	Callee	r_num_get		1210137	0					
ANR	1210338	Identifier	r_num_get		1210137	0					
ANR	1210339	ArgumentList	NULL		1210137	1					
ANR	1210340	Argument	NULL		1210137	0					
ANR	1210341	Identifier	NULL		1210137	0					
ANR	1210342	Argument	num		1210137	1					
ANR	1210343	Identifier	num		1210137	0					
ANR	1210344	ExpressionStatement	"a = r_num_get ( NULL , addr )"	68:5:1621:1646	1210137	5	True				
ANR	1210345	AssignmentExpression	"a = r_num_get ( NULL , addr )"		1210137	0		=			
ANR	1210346	Identifier	a		1210137	0					
ANR	1210347	CallExpression	"r_num_get ( NULL , addr )"		1210137	1					
ANR	1210348	Callee	r_num_get		1210137	0					
ANR	1210349	Identifier	r_num_get		1210137	0					
ANR	1210350	ArgumentList	NULL		1210137	1					
ANR	1210351	Argument	NULL		1210137	0					
ANR	1210352	Identifier	NULL		1210137	0					
ANR	1210353	Argument	addr		1210137	1					
ANR	1210354	Identifier	addr		1210137	0					
ANR	1210355	IfStatement	if ( a == b -> addr )		1210137	6					
ANR	1210356	Condition	a == b -> addr	70:9:1708:1719	1210137	0	True				
ANR	1210357	EqualityExpression	a == b -> addr		1210137	0		==			
ANR	1210358	Identifier	a		1210137	0					
ANR	1210359	PtrMemberAccess	b -> addr		1210137	1					
ANR	1210360	Identifier	b		1210137	0					
ANR	1210361	Identifier	addr		1210137	1					
ANR	1210362	CompoundStatement		40:23:1017:1017	1210137	1					
ANR	1210363	BreakStatement	break ;	71:6:1730:1735	1210137	0	True				
ANR	1210364	ExpressionStatement	i += 48	74:4:1754:1761	1210137	1	True				
ANR	1210365	AssignmentExpression	i += 48		1210137	0		+=			
ANR	1210366	Identifier	i		1210137	0					
ANR	1210367	PrimaryExpression	48		1210137	1					
ANR	1210368	Condition	desc -> data [ i ] != '<' && i < lenRec - 4	75:12:1775:1808	1210137	1	True				
ANR	1210369	AndExpression	desc -> data [ i ] != '<' && i < lenRec - 4		1210137	0		&&			
ANR	1210370	EqualityExpression	desc -> data [ i ] != '<'		1210137	0		!=			
ANR	1210371	ArrayIndexing	desc -> data [ i ]		1210137	0					
ANR	1210372	PtrMemberAccess	desc -> data		1210137	0					
ANR	1210373	Identifier	desc		1210137	0					
ANR	1210374	Identifier	data		1210137	1					
ANR	1210375	Identifier	i		1210137	1					
ANR	1210376	PrimaryExpression	'<'		1210137	1					
ANR	1210377	RelationalExpression	i < lenRec - 4		1210137	1		<			
ANR	1210378	Identifier	i		1210137	0					
ANR	1210379	AdditiveExpression	lenRec - 4		1210137	1		-			
ANR	1210380	Identifier	lenRec		1210137	0					
ANR	1210381	PrimaryExpression	4		1210137	1					
ANR	1210382	IfStatement	if ( a == b -> addr )		1210137	5					
ANR	1210383	Condition	a == b -> addr	77:6:1822:1833	1210137	0	True				
ANR	1210384	EqualityExpression	a == b -> addr		1210137	0		==			
ANR	1210385	Identifier	a		1210137	0					
ANR	1210386	PtrMemberAccess	b -> addr		1210137	1					
ANR	1210387	Identifier	b		1210137	0					
ANR	1210388	Identifier	addr		1210137	1					
ANR	1210389	CompoundStatement		47:20:1131:1131	1210137	1					
ANR	1210390	ExpressionStatement	"snprintf ( bufcmd , sizeof ( bufcmd ) , ""d %i"" , n )"	78:3:1841:1886	1210137	0	True				
ANR	1210391	CallExpression	"snprintf ( bufcmd , sizeof ( bufcmd ) , ""d %i"" , n )"		1210137	0					
ANR	1210392	Callee	snprintf		1210137	0					
ANR	1210393	Identifier	snprintf		1210137	0					
ANR	1210394	ArgumentList	bufcmd		1210137	1					
ANR	1210395	Argument	bufcmd		1210137	0					
ANR	1210396	Identifier	bufcmd		1210137	0					
ANR	1210397	Argument	sizeof ( bufcmd )		1210137	1					
ANR	1210398	SizeofExpression	sizeof ( bufcmd )		1210137	0					
ANR	1210399	Sizeof	sizeof		1210137	0					
ANR	1210400	SizeofOperand	bufcmd		1210137	1					
ANR	1210401	Argument	"""d %i"""		1210137	2					
ANR	1210402	PrimaryExpression	"""d %i"""		1210137	0					
ANR	1210403	Argument	n		1210137	3					
ANR	1210404	Identifier	n		1210137	0					
ANR	1210405	ExpressionStatement	"bochs_send_cmd ( desc , bufcmd , true )"	80:3:1980:2015	1210137	1	True				
ANR	1210406	CallExpression	"bochs_send_cmd ( desc , bufcmd , true )"		1210137	0					
ANR	1210407	Callee	bochs_send_cmd		1210137	0					
ANR	1210408	Identifier	bochs_send_cmd		1210137	0					
ANR	1210409	ArgumentList	desc		1210137	1					
ANR	1210410	Argument	desc		1210137	0					
ANR	1210411	Identifier	desc		1210137	0					
ANR	1210412	Argument	bufcmd		1210137	1					
ANR	1210413	Identifier	bufcmd		1210137	0					
ANR	1210414	Argument	true		1210137	2					
ANR	1210415	Identifier	true		1210137	0					
ANR	1210416	ReturnStatement	return true ;	84:1:2026:2037	1210137	8	True				
ANR	1210417	Identifier	true		1210137	0					
ANR	1210418	ReturnType	static int		1210137	1					
ANR	1210419	Identifier	r_debug_bochs_breakpoint		1210137	2					
ANR	1210420	ParameterList	"RBreakpoint * bp , RBreakpointItem * b , bool set"		1210137	3					
ANR	1210421	Parameter	RBreakpoint * bp	31:37:657:671	1210137	0	True				
ANR	1210422	ParameterType	RBreakpoint *		1210137	0					
ANR	1210423	Identifier	bp		1210137	1					
ANR	1210424	Parameter	RBreakpointItem * b	31:54:674:691	1210137	1	True				
ANR	1210425	ParameterType	RBreakpointItem *		1210137	0					
ANR	1210426	Identifier	b		1210137	1					
ANR	1210427	Parameter	bool set	31:74:694:701	1210137	2	True				
ANR	1210428	ParameterType	bool		1210137	0					
ANR	1210429	Identifier	set		1210137	1					
ANR	1210430	CFGEntryNode	ENTRY		1210137		True				
ANR	1210431	CFGExitNode	EXIT		1210137		True				
ANR	1210432	Symbol	num		1210137						
ANR	1210433	Symbol	bp		1210137						
ANR	1210434	Symbol	b -> addr		1210137						
ANR	1210435	Symbol	strlen		1210137						
ANR	1210436	Symbol	strncmp		1210137						
ANR	1210437	Symbol	* desc -> data		1210137						
ANR	1210438	Symbol	bCapturaRegs		1210137						
ANR	1210439	Symbol	desc -> data		1210137						
ANR	1210440	Symbol	* desc		1210137						
ANR	1210441	Symbol	r_num_get		1210137						
ANR	1210442	Symbol	addr		1210137						
ANR	1210443	Symbol	a		1210137						
ANR	1210444	Symbol	b		1210137						
ANR	1210445	Symbol	set		1210137						
ANR	1210446	Symbol	NULL		1210137						
ANR	1210447	Symbol	false		1210137						
ANR	1210448	Symbol	i		1210137						
ANR	1210449	Symbol	* * desc		1210137						
ANR	1210450	Symbol	* b		1210137						
ANR	1210451	Symbol	n		1210137						
ANR	1210452	Symbol	* num		1210137						
ANR	1210453	Symbol	* i		1210137						
ANR	1210454	Symbol	lenRec		1210137						
ANR	1210455	Symbol	true		1210137						
ANR	1210456	Symbol	cmd		1210137						
ANR	1210457	Symbol	* addr		1210137						
ANR	1210458	Symbol	bufcmd		1210137						
ANR	1210459	Symbol	desc		1210137						
ANR	1210460	Function	r_debug_bochs_reg_read	87:0:2042:6103							
ANR	1210461	FunctionDef	"r_debug_bochs_reg_read (RDebug * dbg , int type , ut8 * buf , int size)"		1210460	0					
ANR	1210462	CompoundStatement		87:77:2119:6103	1210460	0					
ANR	1210463	IdentifierDeclStatement	char strReg [ 19 ] ;	88:1:2122:2137	1210460	0	True				
ANR	1210464	IdentifierDecl	strReg [ 19 ]		1210460	0					
ANR	1210465	IdentifierDeclType	char [ 19 ]		1210460	0					
ANR	1210466	Identifier	strReg		1210460	1					
ANR	1210467	PrimaryExpression	19		1210460	2					
ANR	1210468	IdentifierDeclStatement	char regname [ 4 ] ;	89:1:2140:2155	1210460	1	True				
ANR	1210469	IdentifierDecl	regname [ 4 ]		1210460	0					
ANR	1210470	IdentifierDeclType	char [ 4 ]		1210460	0					
ANR	1210471	Identifier	regname		1210460	1					
ANR	1210472	PrimaryExpression	4		1210460	2					
ANR	1210473	IdentifierDeclStatement	char strBase [ 19 ] ;	90:1:2158:2174	1210460	2	True				
ANR	1210474	IdentifierDecl	strBase [ 19 ]		1210460	0					
ANR	1210475	IdentifierDeclType	char [ 19 ]		1210460	0					
ANR	1210476	Identifier	strBase		1210460	1					
ANR	1210477	PrimaryExpression	19		1210460	2					
ANR	1210478	IdentifierDeclStatement	char strLimit [ 19 ] ;	91:1:2177:2194	1210460	3	True				
ANR	1210479	IdentifierDecl	strLimit [ 19 ]		1210460	0					
ANR	1210480	IdentifierDeclType	char [ 19 ]		1210460	0					
ANR	1210481	Identifier	strLimit		1210460	1					
ANR	1210482	PrimaryExpression	19		1210460	2					
ANR	1210483	IdentifierDeclStatement	"int i = 0 , pos = 0 , lenRec = 0 ;"	92:1:2197:2227	1210460	4	True				
ANR	1210484	IdentifierDecl	i = 0		1210460	0					
ANR	1210485	IdentifierDeclType	int		1210460	0					
ANR	1210486	Identifier	i		1210460	1					
ANR	1210487	AssignmentExpression	i = 0		1210460	2		=			
ANR	1210488	Identifier	i		1210460	0					
ANR	1210489	PrimaryExpression	0		1210460	1					
ANR	1210490	IdentifierDecl	pos = 0		1210460	1					
ANR	1210491	IdentifierDeclType	int		1210460	0					
ANR	1210492	Identifier	pos		1210460	1					
ANR	1210493	AssignmentExpression	pos = 0		1210460	2		=			
ANR	1210494	Identifier	pos		1210460	0					
ANR	1210495	PrimaryExpression	0		1210460	1					
ANR	1210496	IdentifierDecl	lenRec = 0		1210460	2					
ANR	1210497	IdentifierDeclType	int		1210460	0					
ANR	1210498	Identifier	lenRec		1210460	1					
ANR	1210499	AssignmentExpression	lenRec = 0		1210460	2		=			
ANR	1210500	Identifier	lenRec		1210460	0					
ANR	1210501	PrimaryExpression	0		1210460	1					
ANR	1210502	IdentifierDeclStatement	"ut64 val = 0 , valRIP = 0 ;"	93:1:2230:2254	1210460	5	True				
ANR	1210503	IdentifierDecl	val = 0		1210460	0					
ANR	1210504	IdentifierDeclType	ut64		1210460	0					
ANR	1210505	Identifier	val		1210460	1					
ANR	1210506	AssignmentExpression	val = 0		1210460	2		=			
ANR	1210507	Identifier	val		1210460	0					
ANR	1210508	PrimaryExpression	0		1210460	1					
ANR	1210509	IdentifierDecl	valRIP = 0		1210460	1					
ANR	1210510	IdentifierDeclType	ut64		1210460	0					
ANR	1210511	Identifier	valRIP		1210460	1					
ANR	1210512	AssignmentExpression	valRIP = 0		1210460	2		=			
ANR	1210513	Identifier	valRIP		1210460	0					
ANR	1210514	PrimaryExpression	0		1210460	1					
ANR	1210515	IfStatement	if ( ! isBochs ( dbg ) )		1210460	6					
ANR	1210516	Condition	! isBochs ( dbg )	94:5:2277:2290	1210460	0	True				
ANR	1210517	UnaryOperationExpression	! isBochs ( dbg )		1210460	0					
ANR	1210518	UnaryOperator	!		1210460	0					
ANR	1210519	CallExpression	isBochs ( dbg )		1210460	1					
ANR	1210520	Callee	isBochs		1210460	0					
ANR	1210521	Identifier	isBochs		1210460	0					
ANR	1210522	ArgumentList	dbg		1210460	1					
ANR	1210523	Argument	dbg		1210460	0					
ANR	1210524	Identifier	dbg		1210460	0					
ANR	1210525	CompoundStatement		8:21:173:173	1210460	1					
ANR	1210526	ReturnStatement	return 0 ;	95:2:2297:2305	1210460	0	True				
ANR	1210527	PrimaryExpression	0		1210460	0					
ANR	1210528	IfStatement	if ( bCapturaRegs == true )		1210460	7					
ANR	1210529	Condition	bCapturaRegs == true	99:5:2349:2368	1210460	0	True				
ANR	1210530	EqualityExpression	bCapturaRegs == true		1210460	0		==			
ANR	1210531	Identifier	bCapturaRegs		1210460	0					
ANR	1210532	Identifier	true		1210460	1					
ANR	1210533	CompoundStatement		82:2:2765:2770	1210460	1					
ANR	1210534	ExpressionStatement	"bochs_send_cmd ( desc , ""regs"" , true )"	100:2:2375:2410	1210460	0	True				
ANR	1210535	CallExpression	"bochs_send_cmd ( desc , ""regs"" , true )"		1210460	0					
ANR	1210536	Callee	bochs_send_cmd		1210460	0					
ANR	1210537	Identifier	bochs_send_cmd		1210460	0					
ANR	1210538	ArgumentList	desc		1210460	1					
ANR	1210539	Argument	desc		1210460	0					
ANR	1210540	Identifier	desc		1210460	0					
ANR	1210541	Argument	"""regs"""		1210460	1					
ANR	1210542	PrimaryExpression	"""regs"""		1210460	0					
ANR	1210543	Argument	true		1210460	2					
ANR	1210544	Identifier	true		1210460	0					
ANR	1210545	ExpressionStatement	pos = 0x78	105:2:2597:2607	1210460	1	True				
ANR	1210546	AssignmentExpression	pos = 0x78		1210460	0		=			
ANR	1210547	Identifier	pos		1210460	0					
ANR	1210548	PrimaryExpression	0x78		1210460	1					
ANR	1210549	ExpressionStatement	lenRec = strlen ( desc -> data )	106:2:2611:2639	1210460	2	True				
ANR	1210550	AssignmentExpression	lenRec = strlen ( desc -> data )		1210460	0		=			
ANR	1210551	Identifier	lenRec		1210460	0					
ANR	1210552	CallExpression	strlen ( desc -> data )		1210460	1					
ANR	1210553	Callee	strlen		1210460	0					
ANR	1210554	Identifier	strlen		1210460	0					
ANR	1210555	ArgumentList	desc -> data		1210460	1					
ANR	1210556	Argument	desc -> data		1210460	0					
ANR	1210557	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210558	Identifier	desc		1210460	0					
ANR	1210559	Identifier	data		1210460	1					
ANR	1210560	WhileStatement	while ( desc -> data [ i ] != 0 && i < lenRec - 4 )		1210460	3					
ANR	1210561	Condition	desc -> data [ i ] != 0 && i < lenRec - 4	107:9:2650:2684	1210460	0	True				
ANR	1210562	AndExpression	desc -> data [ i ] != 0 && i < lenRec - 4		1210460	0		&&			
ANR	1210563	EqualityExpression	desc -> data [ i ] != 0		1210460	0		!=			
ANR	1210564	ArrayIndexing	desc -> data [ i ]		1210460	0					
ANR	1210565	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210566	Identifier	desc		1210460	0					
ANR	1210567	Identifier	data		1210460	1					
ANR	1210568	Identifier	i		1210460	1					
ANR	1210569	PrimaryExpression	0		1210460	1					
ANR	1210570	RelationalExpression	i < lenRec - 4		1210460	1		<			
ANR	1210571	Identifier	i		1210460	0					
ANR	1210572	AdditiveExpression	lenRec - 4		1210460	1		-			
ANR	1210573	Identifier	lenRec		1210460	0					
ANR	1210574	PrimaryExpression	4		1210460	1					
ANR	1210575	CompoundStatement		21:47:568:568	1210460	1					
ANR	1210576	IfStatement	if ( ( desc -> data [ i ] == ( ut8 ) 'r' && desc -> data [ i + 3 ] == ( ut8 ) ':' ) )		1210460	0					
ANR	1210577	Condition	desc -> data [ i ] == ( ut8 ) 'r' && desc -> data [ i + 3 ] == ( ut8 ) ':'	108:8:2698:2757	1210460	0	True				
ANR	1210578	AndExpression	desc -> data [ i ] == ( ut8 ) 'r' && desc -> data [ i + 3 ] == ( ut8 ) ':'		1210460	0		&&			
ANR	1210579	EqualityExpression	desc -> data [ i ] == ( ut8 ) 'r'		1210460	0		==			
ANR	1210580	ArrayIndexing	desc -> data [ i ]		1210460	0					
ANR	1210581	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210582	Identifier	desc		1210460	0					
ANR	1210583	Identifier	data		1210460	1					
ANR	1210584	Identifier	i		1210460	1					
ANR	1210585	CastExpression	( ut8 ) 'r'		1210460	1					
ANR	1210586	CastTarget	ut8		1210460	0					
ANR	1210587	PrimaryExpression	'r'		1210460	1					
ANR	1210588	EqualityExpression	desc -> data [ i + 3 ] == ( ut8 ) ':'		1210460	1		==			
ANR	1210589	ArrayIndexing	desc -> data [ i + 3 ]		1210460	0					
ANR	1210590	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210591	Identifier	desc		1210460	0					
ANR	1210592	Identifier	data		1210460	1					
ANR	1210593	AdditiveExpression	i + 3		1210460	1		+			
ANR	1210594	Identifier	i		1210460	0					
ANR	1210595	PrimaryExpression	3		1210460	1					
ANR	1210596	CastExpression	( ut8 ) ':'		1210460	1					
ANR	1210597	CastTarget	ut8		1210460	0					
ANR	1210598	PrimaryExpression	':'		1210460	1					
ANR	1210599	CompoundStatement		22:70:640:640	1210460	1					
ANR	1210600	ExpressionStatement	"strncpy ( regname , & desc -> data [ i ] , 3 )"	109:4:2766:2802	1210460	0	True				
ANR	1210601	CallExpression	"strncpy ( regname , & desc -> data [ i ] , 3 )"		1210460	0					
ANR	1210602	Callee	strncpy		1210460	0					
ANR	1210603	Identifier	strncpy		1210460	0					
ANR	1210604	ArgumentList	regname		1210460	1					
ANR	1210605	Argument	regname		1210460	0					
ANR	1210606	Identifier	regname		1210460	0					
ANR	1210607	Argument	& desc -> data [ i ]		1210460	1					
ANR	1210608	UnaryOperationExpression	& desc -> data [ i ]		1210460	0					
ANR	1210609	UnaryOperator	&		1210460	0					
ANR	1210610	ArrayIndexing	desc -> data [ i ]		1210460	1					
ANR	1210611	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210612	Identifier	desc		1210460	0					
ANR	1210613	Identifier	data		1210460	1					
ANR	1210614	Identifier	i		1210460	1					
ANR	1210615	Argument	3		1210460	2					
ANR	1210616	PrimaryExpression	3		1210460	0					
ANR	1210617	ExpressionStatement	regname [ 3 ] = 0	110:4:2808:2822	1210460	1	True				
ANR	1210618	AssignmentExpression	regname [ 3 ] = 0		1210460	0		=			
ANR	1210619	ArrayIndexing	regname [ 3 ]		1210460	0					
ANR	1210620	Identifier	regname		1210460	0					
ANR	1210621	PrimaryExpression	3		1210460	1					
ANR	1210622	PrimaryExpression	0		1210460	1					
ANR	1210623	ExpressionStatement	"strncpy ( & strReg [ 2 ] , & desc -> data [ i + 5 ] , 8 )"	111:4:2828:2871	1210460	2	True				
ANR	1210624	CallExpression	"strncpy ( & strReg [ 2 ] , & desc -> data [ i + 5 ] , 8 )"		1210460	0					
ANR	1210625	Callee	strncpy		1210460	0					
ANR	1210626	Identifier	strncpy		1210460	0					
ANR	1210627	ArgumentList	& strReg [ 2 ]		1210460	1					
ANR	1210628	Argument	& strReg [ 2 ]		1210460	0					
ANR	1210629	UnaryOperationExpression	& strReg [ 2 ]		1210460	0					
ANR	1210630	UnaryOperator	&		1210460	0					
ANR	1210631	ArrayIndexing	strReg [ 2 ]		1210460	1					
ANR	1210632	Identifier	strReg		1210460	0					
ANR	1210633	PrimaryExpression	2		1210460	1					
ANR	1210634	Argument	& desc -> data [ i + 5 ]		1210460	1					
ANR	1210635	UnaryOperationExpression	& desc -> data [ i + 5 ]		1210460	0					
ANR	1210636	UnaryOperator	&		1210460	0					
ANR	1210637	ArrayIndexing	desc -> data [ i + 5 ]		1210460	1					
ANR	1210638	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210639	Identifier	desc		1210460	0					
ANR	1210640	Identifier	data		1210460	1					
ANR	1210641	AdditiveExpression	i + 5		1210460	1		+			
ANR	1210642	Identifier	i		1210460	0					
ANR	1210643	PrimaryExpression	5		1210460	1					
ANR	1210644	Argument	8		1210460	2					
ANR	1210645	PrimaryExpression	8		1210460	0					
ANR	1210646	ExpressionStatement	"strncpy ( & strReg [ 10 ] , & desc -> data [ i + 14 ] , 8 )"	112:4:2877:2922	1210460	3	True				
ANR	1210647	CallExpression	"strncpy ( & strReg [ 10 ] , & desc -> data [ i + 14 ] , 8 )"		1210460	0					
ANR	1210648	Callee	strncpy		1210460	0					
ANR	1210649	Identifier	strncpy		1210460	0					
ANR	1210650	ArgumentList	& strReg [ 10 ]		1210460	1					
ANR	1210651	Argument	& strReg [ 10 ]		1210460	0					
ANR	1210652	UnaryOperationExpression	& strReg [ 10 ]		1210460	0					
ANR	1210653	UnaryOperator	&		1210460	0					
ANR	1210654	ArrayIndexing	strReg [ 10 ]		1210460	1					
ANR	1210655	Identifier	strReg		1210460	0					
ANR	1210656	PrimaryExpression	10		1210460	1					
ANR	1210657	Argument	& desc -> data [ i + 14 ]		1210460	1					
ANR	1210658	UnaryOperationExpression	& desc -> data [ i + 14 ]		1210460	0					
ANR	1210659	UnaryOperator	&		1210460	0					
ANR	1210660	ArrayIndexing	desc -> data [ i + 14 ]		1210460	1					
ANR	1210661	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210662	Identifier	desc		1210460	0					
ANR	1210663	Identifier	data		1210460	1					
ANR	1210664	AdditiveExpression	i + 14		1210460	1		+			
ANR	1210665	Identifier	i		1210460	0					
ANR	1210666	PrimaryExpression	14		1210460	1					
ANR	1210667	Argument	8		1210460	2					
ANR	1210668	PrimaryExpression	8		1210460	0					
ANR	1210669	ExpressionStatement	strReg [ 0 ] = '0'	113:4:2928:2941	1210460	4	True				
ANR	1210670	AssignmentExpression	strReg [ 0 ] = '0'		1210460	0		=			
ANR	1210671	ArrayIndexing	strReg [ 0 ]		1210460	0					
ANR	1210672	Identifier	strReg		1210460	0					
ANR	1210673	PrimaryExpression	0		1210460	1					
ANR	1210674	PrimaryExpression	'0'		1210460	1					
ANR	1210675	ExpressionStatement	strReg [ 1 ] = 'x'	114:4:2947:2960	1210460	5	True				
ANR	1210676	AssignmentExpression	strReg [ 1 ] = 'x'		1210460	0		=			
ANR	1210677	ArrayIndexing	strReg [ 1 ]		1210460	0					
ANR	1210678	Identifier	strReg		1210460	0					
ANR	1210679	PrimaryExpression	1		1210460	1					
ANR	1210680	PrimaryExpression	'x'		1210460	1					
ANR	1210681	ExpressionStatement	strReg [ 18 ] = 0	115:4:2966:2980	1210460	6	True				
ANR	1210682	AssignmentExpression	strReg [ 18 ] = 0		1210460	0		=			
ANR	1210683	ArrayIndexing	strReg [ 18 ]		1210460	0					
ANR	1210684	Identifier	strReg		1210460	0					
ANR	1210685	PrimaryExpression	18		1210460	1					
ANR	1210686	PrimaryExpression	0		1210460	1					
ANR	1210687	ExpressionStatement	i += 22	116:4:2986:2993	1210460	7	True				
ANR	1210688	AssignmentExpression	i += 22		1210460	0		+=			
ANR	1210689	Identifier	i		1210460	0					
ANR	1210690	PrimaryExpression	22		1210460	1					
ANR	1210691	ExpressionStatement	"val = r_num_get ( NULL , strReg )"	117:4:2999:3029	1210460	8	True				
ANR	1210692	AssignmentExpression	"val = r_num_get ( NULL , strReg )"		1210460	0		=			
ANR	1210693	Identifier	val		1210460	0					
ANR	1210694	CallExpression	"r_num_get ( NULL , strReg )"		1210460	1					
ANR	1210695	Callee	r_num_get		1210460	0					
ANR	1210696	Identifier	r_num_get		1210460	0					
ANR	1210697	ArgumentList	NULL		1210460	1					
ANR	1210698	Argument	NULL		1210460	0					
ANR	1210699	Identifier	NULL		1210460	0					
ANR	1210700	Argument	strReg		1210460	1					
ANR	1210701	Identifier	strReg		1210460	0					
ANR	1210702	ExpressionStatement	"memcpy ( & buf [ pos ] , & val , 8 )"	119:4:3117:3144	1210460	9	True				
ANR	1210703	CallExpression	"memcpy ( & buf [ pos ] , & val , 8 )"		1210460	0					
ANR	1210704	Callee	memcpy		1210460	0					
ANR	1210705	Identifier	memcpy		1210460	0					
ANR	1210706	ArgumentList	& buf [ pos ]		1210460	1					
ANR	1210707	Argument	& buf [ pos ]		1210460	0					
ANR	1210708	UnaryOperationExpression	& buf [ pos ]		1210460	0					
ANR	1210709	UnaryOperator	&		1210460	0					
ANR	1210710	ArrayIndexing	buf [ pos ]		1210460	1					
ANR	1210711	Identifier	buf		1210460	0					
ANR	1210712	Identifier	pos		1210460	1					
ANR	1210713	Argument	& val		1210460	1					
ANR	1210714	UnaryOperationExpression	& val		1210460	0					
ANR	1210715	UnaryOperator	&		1210460	0					
ANR	1210716	Identifier	val		1210460	1					
ANR	1210717	Argument	8		1210460	2					
ANR	1210718	PrimaryExpression	8		1210460	0					
ANR	1210719	IfStatement	"if ( ! strncmp ( regname , ""rip"" , 3 ) )"		1210460	10					
ANR	1210720	Condition	"! strncmp ( regname , ""rip"" , 3 )"	121:8:3234:3261	1210460	0	True				
ANR	1210721	UnaryOperationExpression	"! strncmp ( regname , ""rip"" , 3 )"		1210460	0					
ANR	1210722	UnaryOperator	!		1210460	0					
ANR	1210723	CallExpression	"strncmp ( regname , ""rip"" , 3 )"		1210460	1					
ANR	1210724	Callee	strncmp		1210460	0					
ANR	1210725	Identifier	strncmp		1210460	0					
ANR	1210726	ArgumentList	regname		1210460	1					
ANR	1210727	Argument	regname		1210460	0					
ANR	1210728	Identifier	regname		1210460	0					
ANR	1210729	Argument	"""rip"""		1210460	1					
ANR	1210730	PrimaryExpression	"""rip"""		1210460	0					
ANR	1210731	Argument	3		1210460	2					
ANR	1210732	PrimaryExpression	3		1210460	0					
ANR	1210733	CompoundStatement		35:38:1144:1144	1210460	1					
ANR	1210734	ExpressionStatement	valRIP = val	123:5:3299:3311	1210460	0	True				
ANR	1210735	AssignmentExpression	valRIP = val		1210460	0		=			
ANR	1210736	Identifier	valRIP		1210460	0					
ANR	1210737	Identifier	val		1210460	1					
ANR	1210738	ExpressionStatement	pos += 8	125:4:3323:3330	1210460	11	True				
ANR	1210739	AssignmentExpression	pos += 8		1210460	0		+=			
ANR	1210740	Identifier	pos		1210460	0					
ANR	1210741	PrimaryExpression	8		1210460	1					
ANR	1210742	ElseStatement	else		1210460	0					
ANR	1210743	CompoundStatement		41:10:1223:1223	1210460	0					
ANR	1210744	ExpressionStatement	i ++	128:4:3349:3352	1210460	0	True				
ANR	1210745	PostIncDecOperationExpression	i ++		1210460	0					
ANR	1210746	Identifier	i		1210460	0					
ANR	1210747	IncDec	++		1210460	1					
ANR	1210748	ExpressionStatement	"bochs_send_cmd ( desc , ""info cpu"" , true )"	132:2:3366:3405	1210460	4	True				
ANR	1210749	CallExpression	"bochs_send_cmd ( desc , ""info cpu"" , true )"		1210460	0					
ANR	1210750	Callee	bochs_send_cmd		1210460	0					
ANR	1210751	Identifier	bochs_send_cmd		1210460	0					
ANR	1210752	ArgumentList	desc		1210460	1					
ANR	1210753	Argument	desc		1210460	0					
ANR	1210754	Identifier	desc		1210460	0					
ANR	1210755	Argument	"""info cpu"""		1210460	1					
ANR	1210756	PrimaryExpression	"""info cpu"""		1210460	0					
ANR	1210757	Argument	true		1210460	2					
ANR	1210758	Identifier	true		1210460	0					
ANR	1210759	IfStatement	"if ( strstr ( desc -> data , ""PC_32"" ) )"		1210460	5					
ANR	1210760	Condition	"strstr ( desc -> data , ""PC_32"" )"	133:6:3413:3439	1210460	0	True				
ANR	1210761	CallExpression	"strstr ( desc -> data , ""PC_32"" )"		1210460	0					
ANR	1210762	Callee	strstr		1210460	0					
ANR	1210763	Identifier	strstr		1210460	0					
ANR	1210764	ArgumentList	desc -> data		1210460	1					
ANR	1210765	Argument	desc -> data		1210460	0					
ANR	1210766	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210767	Identifier	desc		1210460	0					
ANR	1210768	Identifier	data		1210460	1					
ANR	1210769	Argument	"""PC_32"""		1210460	1					
ANR	1210770	PrimaryExpression	"""PC_32"""		1210460	0					
ANR	1210771	CompoundStatement		47:35:1322:1322	1210460	1					
ANR	1210772	ExpressionStatement	bAjusta = true	134:3:3447:3461	1210460	0	True				
ANR	1210773	AssignmentExpression	bAjusta = true		1210460	0		=			
ANR	1210774	Identifier	bAjusta		1210460	0					
ANR	1210775	Identifier	true		1210460	1					
ANR	1210776	ElseStatement	else		1210460	0					
ANR	1210777	IfStatement	"if ( strstr ( desc -> data , ""PC_80"" ) )"		1210460	0					
ANR	1210778	Condition	"strstr ( desc -> data , ""PC_80"" )"	136:13:3508:3534	1210460	0	True				
ANR	1210779	CallExpression	"strstr ( desc -> data , ""PC_80"" )"		1210460	0					
ANR	1210780	Callee	strstr		1210460	0					
ANR	1210781	Identifier	strstr		1210460	0					
ANR	1210782	ArgumentList	desc -> data		1210460	1					
ANR	1210783	Argument	desc -> data		1210460	0					
ANR	1210784	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210785	Identifier	desc		1210460	0					
ANR	1210786	Identifier	data		1210460	1					
ANR	1210787	Argument	"""PC_80"""		1210460	1					
ANR	1210788	PrimaryExpression	"""PC_80"""		1210460	0					
ANR	1210789	CompoundStatement		50:42:1417:1417	1210460	1					
ANR	1210790	ExpressionStatement	bAjusta = false	137:3:3542:3557	1210460	0	True				
ANR	1210791	AssignmentExpression	bAjusta = false		1210460	0		=			
ANR	1210792	Identifier	bAjusta		1210460	0					
ANR	1210793	Identifier	false		1210460	1					
ANR	1210794	ElseStatement	else		1210460	0					
ANR	1210795	IfStatement	"if ( strstr ( desc -> data , ""PC_64"" ) )"		1210460	0					
ANR	1210796	Condition	"strstr ( desc -> data , ""PC_64"" )"	139:13:3604:3630	1210460	0	True				
ANR	1210797	CallExpression	"strstr ( desc -> data , ""PC_64"" )"		1210460	0					
ANR	1210798	Callee	strstr		1210460	0					
ANR	1210799	Identifier	strstr		1210460	0					
ANR	1210800	ArgumentList	desc -> data		1210460	1					
ANR	1210801	Argument	desc -> data		1210460	0					
ANR	1210802	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210803	Identifier	desc		1210460	0					
ANR	1210804	Identifier	data		1210460	1					
ANR	1210805	Argument	"""PC_64"""		1210460	1					
ANR	1210806	PrimaryExpression	"""PC_64"""		1210460	0					
ANR	1210807	CompoundStatement		53:42:1513:1513	1210460	1					
ANR	1210808	ExpressionStatement	bAjusta = false	140:3:3638:3653	1210460	0	True				
ANR	1210809	AssignmentExpression	bAjusta = false		1210460	0		=			
ANR	1210810	Identifier	bAjusta		1210460	0					
ANR	1210811	Identifier	false		1210460	1					
ANR	1210812	ElseStatement	else		1210460	0					
ANR	1210813	CompoundStatement		56:9:1576:1576	1210460	0					
ANR	1210814	ExpressionStatement	"eprintf ( ""[unknown mode]\\n%s\\n"" , desc -> data )"	143:3:3701:3745	1210460	0	True				
ANR	1210815	CallExpression	"eprintf ( ""[unknown mode]\\n%s\\n"" , desc -> data )"		1210460	0					
ANR	1210816	Callee	eprintf		1210460	0					
ANR	1210817	Identifier	eprintf		1210460	0					
ANR	1210818	ArgumentList	"""[unknown mode]\\n%s\\n"""		1210460	1					
ANR	1210819	Argument	"""[unknown mode]\\n%s\\n"""		1210460	0					
ANR	1210820	PrimaryExpression	"""[unknown mode]\\n%s\\n"""		1210460	0					
ANR	1210821	Argument	desc -> data		1210460	1					
ANR	1210822	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210823	Identifier	desc		1210460	0					
ANR	1210824	Identifier	data		1210460	1					
ANR	1210825	ExpressionStatement	"bochs_send_cmd ( desc , ""sreg"" , true )"	163:2:4743:4778	1210460	6	True				
ANR	1210826	CallExpression	"bochs_send_cmd ( desc , ""sreg"" , true )"		1210460	0					
ANR	1210827	Callee	bochs_send_cmd		1210460	0					
ANR	1210828	Identifier	bochs_send_cmd		1210460	0					
ANR	1210829	ArgumentList	desc		1210460	1					
ANR	1210830	Argument	desc		1210460	0					
ANR	1210831	Identifier	desc		1210460	0					
ANR	1210832	Argument	"""sreg"""		1210460	1					
ANR	1210833	PrimaryExpression	"""sreg"""		1210460	0					
ANR	1210834	Argument	true		1210460	2					
ANR	1210835	Identifier	true		1210460	0					
ANR	1210836	ExpressionStatement	pos = 0x38	165:2:4783:4793	1210460	7	True				
ANR	1210837	AssignmentExpression	pos = 0x38		1210460	0		=			
ANR	1210838	Identifier	pos		1210460	0					
ANR	1210839	PrimaryExpression	0x38		1210460	1					
ANR	1210840	IdentifierDeclStatement	"char * s [ ] = { ""es:0x"" , ""cs:0x"" , ""ss:0x"" , ""ds:0x"" , ""fs:0x"" , ""gs:0x"" , 0 } ;"	166:2:4797:4864	1210460	8	True				
ANR	1210841	IdentifierDecl	"* s [ ] = { ""es:0x"" , ""cs:0x"" , ""ss:0x"" , ""ds:0x"" , ""fs:0x"" , ""gs:0x"" , 0 }"		1210460	0					
ANR	1210842	IdentifierDeclType	char * [ ]		1210460	0					
ANR	1210843	Identifier	s		1210460	1					
ANR	1210844	AssignmentExpression	"* s [ ] = { ""es:0x"" , ""cs:0x"" , ""ss:0x"" , ""ds:0x"" , ""fs:0x"" , ""gs:0x"" , 0 }"		1210460	2		=			
ANR	1210845	Identifier	s		1210460	0					
ANR	1210846	InitializerList	"""es:0x"""		1210460	1					
ANR	1210847	PrimaryExpression	"""es:0x"""		1210460	0					
ANR	1210848	PrimaryExpression	"""cs:0x"""		1210460	1					
ANR	1210849	PrimaryExpression	"""ss:0x"""		1210460	2					
ANR	1210850	PrimaryExpression	"""ds:0x"""		1210460	3					
ANR	1210851	PrimaryExpression	"""fs:0x"""		1210460	4					
ANR	1210852	PrimaryExpression	"""gs:0x"""		1210460	5					
ANR	1210853	PrimaryExpression	0		1210460	6					
ANR	1210854	IdentifierDeclStatement	const char * x ;	167:2:4868:4881	1210460	9	True				
ANR	1210855	IdentifierDecl	* x		1210460	0					
ANR	1210856	IdentifierDeclType	const char *		1210460	0					
ANR	1210857	Identifier	x		1210460	1					
ANR	1210858	IdentifierDeclStatement	int n ;	168:2:4885:4890	1210460	10	True				
ANR	1210859	IdentifierDecl	n		1210460	0					
ANR	1210860	IdentifierDeclType	int		1210460	0					
ANR	1210861	Identifier	n		1210460	1					
ANR	1210862	ForStatement	for ( n = 0 ; s [ n ] != 0 ; n ++ )		1210460	11					
ANR	1210863	ForInit	n = 0 ;	169:7:4899:4904	1210460	0	True				
ANR	1210864	AssignmentExpression	n = 0		1210460	0		=			
ANR	1210865	Identifier	n		1210460	0					
ANR	1210866	PrimaryExpression	0		1210460	1					
ANR	1210867	Condition	s [ n ] != 0	169:14:4906:4914	1210460	1	True				
ANR	1210868	EqualityExpression	s [ n ] != 0		1210460	0		!=			
ANR	1210869	ArrayIndexing	s [ n ]		1210460	0					
ANR	1210870	Identifier	s		1210460	0					
ANR	1210871	Identifier	n		1210460	1					
ANR	1210872	PrimaryExpression	0		1210460	1					
ANR	1210873	PostIncDecOperationExpression	n ++	169:25:4917:4919	1210460	2	True				
ANR	1210874	Identifier	n		1210460	0					
ANR	1210875	IncDec	++		1210460	1					
ANR	1210876	CompoundStatement		83:30:2802:2802	1210460	3					
ANR	1210877	IfStatement	"if ( ( x = strstr ( desc -> data , s [ n ] ) ) )"		1210460	0					
ANR	1210878	Condition	"x = strstr ( desc -> data , s [ n ] )"	170:7:4931:4960	1210460	0	True				
ANR	1210879	AssignmentExpression	"x = strstr ( desc -> data , s [ n ] )"		1210460	0		=			
ANR	1210880	Identifier	x		1210460	0					
ANR	1210881	CallExpression	"strstr ( desc -> data , s [ n ] )"		1210460	1					
ANR	1210882	Callee	strstr		1210460	0					
ANR	1210883	Identifier	strstr		1210460	0					
ANR	1210884	ArgumentList	desc -> data		1210460	1					
ANR	1210885	Argument	desc -> data		1210460	0					
ANR	1210886	PtrMemberAccess	desc -> data		1210460	0					
ANR	1210887	Identifier	desc		1210460	0					
ANR	1210888	Identifier	data		1210460	1					
ANR	1210889	Argument	s [ n ]		1210460	1					
ANR	1210890	ArrayIndexing	s [ n ]		1210460	0					
ANR	1210891	Identifier	s		1210460	0					
ANR	1210892	Identifier	n		1210460	1					
ANR	1210893	CompoundStatement		84:39:2843:2843	1210460	1					
ANR	1210894	ExpressionStatement	"strncpy ( & strReg [ 0 ] , x + 3 , 7 )"	171:4:4969:4997	1210460	0	True				
ANR	1210895	CallExpression	"strncpy ( & strReg [ 0 ] , x + 3 , 7 )"		1210460	0					
ANR	1210896	Callee	strncpy		1210460	0					
ANR	1210897	Identifier	strncpy		1210460	0					
ANR	1210898	ArgumentList	& strReg [ 0 ]		1210460	1					
ANR	1210899	Argument	& strReg [ 0 ]		1210460	0					
ANR	1210900	UnaryOperationExpression	& strReg [ 0 ]		1210460	0					
ANR	1210901	UnaryOperator	&		1210460	0					
ANR	1210902	ArrayIndexing	strReg [ 0 ]		1210460	1					
ANR	1210903	Identifier	strReg		1210460	0					
ANR	1210904	PrimaryExpression	0		1210460	1					
ANR	1210905	Argument	x + 3		1210460	1					
ANR	1210906	AdditiveExpression	x + 3		1210460	0		+			
ANR	1210907	Identifier	x		1210460	0					
ANR	1210908	PrimaryExpression	3		1210460	1					
ANR	1210909	Argument	7		1210460	2					
ANR	1210910	PrimaryExpression	7		1210460	0					
ANR	1210911	ExpressionStatement	strReg [ 6 ] = 0	172:4:5003:5016	1210460	1	True				
ANR	1210912	AssignmentExpression	strReg [ 6 ] = 0		1210460	0		=			
ANR	1210913	ArrayIndexing	strReg [ 6 ]		1210460	0					
ANR	1210914	Identifier	strReg		1210460	0					
ANR	1210915	PrimaryExpression	6		1210460	1					
ANR	1210916	PrimaryExpression	0		1210460	1					
ANR	1210917	ExpressionStatement	"val = r_num_get ( NULL , strReg )"	173:4:5022:5052	1210460	2	True				
ANR	1210918	AssignmentExpression	"val = r_num_get ( NULL , strReg )"		1210460	0		=			
ANR	1210919	Identifier	val		1210460	0					
ANR	1210920	CallExpression	"r_num_get ( NULL , strReg )"		1210460	1					
ANR	1210921	Callee	r_num_get		1210460	0					
ANR	1210922	Identifier	r_num_get		1210460	0					
ANR	1210923	ArgumentList	NULL		1210460	1					
ANR	1210924	Argument	NULL		1210460	0					
ANR	1210925	Identifier	NULL		1210460	0					
ANR	1210926	Argument	strReg		1210460	1					
ANR	1210927	Identifier	strReg		1210460	0					
ANR	1210928	ExpressionStatement	"strncpy ( regname , s [ n ] , 2 )"	174:4:5058:5084	1210460	3	True				
ANR	1210929	CallExpression	"strncpy ( regname , s [ n ] , 2 )"		1210460	0					
ANR	1210930	Callee	strncpy		1210460	0					
ANR	1210931	Identifier	strncpy		1210460	0					
ANR	1210932	ArgumentList	regname		1210460	1					
ANR	1210933	Argument	regname		1210460	0					
ANR	1210934	Identifier	regname		1210460	0					
ANR	1210935	Argument	s [ n ]		1210460	1					
ANR	1210936	ArrayIndexing	s [ n ]		1210460	0					
ANR	1210937	Identifier	s		1210460	0					
ANR	1210938	Identifier	n		1210460	1					
ANR	1210939	Argument	2		1210460	2					
ANR	1210940	PrimaryExpression	2		1210460	0					
ANR	1210941	ExpressionStatement	regname [ 2 ] = 0	175:4:5090:5104	1210460	4	True				
ANR	1210942	AssignmentExpression	regname [ 2 ] = 0		1210460	0		=			
ANR	1210943	ArrayIndexing	regname [ 2 ]		1210460	0					
ANR	1210944	Identifier	regname		1210460	0					
ANR	1210945	PrimaryExpression	2		1210460	1					
ANR	1210946	PrimaryExpression	0		1210460	1					
ANR	1210947	IfStatement	"if ( ( x = strstr ( x , ""base="" ) ) )"		1210460	5					
ANR	1210948	Condition	"x = strstr ( x , ""base="" )"	176:8:5114:5138	1210460	0	True				
ANR	1210949	AssignmentExpression	"x = strstr ( x , ""base="" )"		1210460	0		=			
ANR	1210950	Identifier	x		1210460	0					
ANR	1210951	CallExpression	"strstr ( x , ""base="" )"		1210460	1					
ANR	1210952	Callee	strstr		1210460	0					
ANR	1210953	Identifier	strstr		1210460	0					
ANR	1210954	ArgumentList	x		1210460	1					
ANR	1210955	Argument	x		1210460	0					
ANR	1210956	Identifier	x		1210460	0					
ANR	1210957	Argument	"""base="""		1210460	1					
ANR	1210958	PrimaryExpression	"""base="""		1210460	0					
ANR	1210959	CompoundStatement		90:35:3021:3021	1210460	1					
ANR	1210960	ExpressionStatement	"strncpy ( strBase , x + 5 , 10 )"	177:5:5148:5176	1210460	0	True				
ANR	1210961	CallExpression	"strncpy ( strBase , x + 5 , 10 )"		1210460	0					
ANR	1210962	Callee	strncpy		1210460	0					
ANR	1210963	Identifier	strncpy		1210460	0					
ANR	1210964	ArgumentList	strBase		1210460	1					
ANR	1210965	Argument	strBase		1210460	0					
ANR	1210966	Identifier	strBase		1210460	0					
ANR	1210967	Argument	x + 5		1210460	1					
ANR	1210968	AdditiveExpression	x + 5		1210460	0		+			
ANR	1210969	Identifier	x		1210460	0					
ANR	1210970	PrimaryExpression	5		1210460	1					
ANR	1210971	Argument	10		1210460	2					
ANR	1210972	PrimaryExpression	10		1210460	0					
ANR	1210973	ExpressionStatement	strBase [ 10 ] = 0	178:5:5183:5198	1210460	1	True				
ANR	1210974	AssignmentExpression	strBase [ 10 ] = 0		1210460	0		=			
ANR	1210975	ArrayIndexing	strBase [ 10 ]		1210460	0					
ANR	1210976	Identifier	strBase		1210460	0					
ANR	1210977	PrimaryExpression	10		1210460	1					
ANR	1210978	PrimaryExpression	0		1210460	1					
ANR	1210979	IfStatement	"if ( ( x = strstr ( x , ""limit="" ) ) )"		1210460	2					
ANR	1210980	Condition	"x = strstr ( x , ""limit="" )"	179:9:5209:5234	1210460	0	True				
ANR	1210981	AssignmentExpression	"x = strstr ( x , ""limit="" )"		1210460	0		=			
ANR	1210982	Identifier	x		1210460	0					
ANR	1210983	CallExpression	"strstr ( x , ""limit="" )"		1210460	1					
ANR	1210984	Callee	strstr		1210460	0					
ANR	1210985	Identifier	strstr		1210460	0					
ANR	1210986	ArgumentList	x		1210460	1					
ANR	1210987	Argument	x		1210460	0					
ANR	1210988	Identifier	x		1210460	0					
ANR	1210989	Argument	"""limit="""		1210460	1					
ANR	1210990	PrimaryExpression	"""limit="""		1210460	0					
ANR	1210991	CompoundStatement		93:37:3117:3117	1210460	1					
ANR	1210992	ExpressionStatement	"strncpy ( strLimit , x + 6 , 10 )"	180:6:5245:5274	1210460	0	True				
ANR	1210993	CallExpression	"strncpy ( strLimit , x + 6 , 10 )"		1210460	0					
ANR	1210994	Callee	strncpy		1210460	0					
ANR	1210995	Identifier	strncpy		1210460	0					
ANR	1210996	ArgumentList	strLimit		1210460	1					
ANR	1210997	Argument	strLimit		1210460	0					
ANR	1210998	Identifier	strLimit		1210460	0					
ANR	1210999	Argument	x + 6		1210460	1					
ANR	1211000	AdditiveExpression	x + 6		1210460	0		+			
ANR	1211001	Identifier	x		1210460	0					
ANR	1211002	PrimaryExpression	6		1210460	1					
ANR	1211003	Argument	10		1210460	2					
ANR	1211004	PrimaryExpression	10		1210460	0					
ANR	1211005	ExpressionStatement	strLimit [ 10 ] = 0	181:6:5282:5298	1210460	1	True				
ANR	1211006	AssignmentExpression	strLimit [ 10 ] = 0		1210460	0		=			
ANR	1211007	ArrayIndexing	strLimit [ 10 ]		1210460	0					
ANR	1211008	Identifier	strLimit		1210460	0					
ANR	1211009	PrimaryExpression	10		1210460	1					
ANR	1211010	PrimaryExpression	0		1210460	1					
ANR	1211011	ExpressionStatement	"memcpy ( & buf [ pos ] , & val , 2 )"	185:4:5422:5449	1210460	6	True				
ANR	1211012	CallExpression	"memcpy ( & buf [ pos ] , & val , 2 )"		1210460	0					
ANR	1211013	Callee	memcpy		1210460	0					
ANR	1211014	Identifier	memcpy		1210460	0					
ANR	1211015	ArgumentList	& buf [ pos ]		1210460	1					
ANR	1211016	Argument	& buf [ pos ]		1210460	0					
ANR	1211017	UnaryOperationExpression	& buf [ pos ]		1210460	0					
ANR	1211018	UnaryOperator	&		1210460	0					
ANR	1211019	ArrayIndexing	buf [ pos ]		1210460	1					
ANR	1211020	Identifier	buf		1210460	0					
ANR	1211021	Identifier	pos		1210460	1					
ANR	1211022	Argument	& val		1210460	1					
ANR	1211023	UnaryOperationExpression	& val		1210460	0					
ANR	1211024	UnaryOperator	&		1210460	0					
ANR	1211025	Identifier	val		1210460	1					
ANR	1211026	Argument	2		1210460	2					
ANR	1211027	PrimaryExpression	2		1210460	0					
ANR	1211028	ExpressionStatement	pos += 2	186:4:5455:5463	1210460	7	True				
ANR	1211029	AssignmentExpression	pos += 2		1210460	0		+=			
ANR	1211030	Identifier	pos		1210460	0					
ANR	1211031	PrimaryExpression	2		1210460	1					
ANR	1211032	IfStatement	if ( bAjusta )		1210460	8					
ANR	1211033	Condition	bAjusta	187:8:5473:5479	1210460	0	True				
ANR	1211034	Identifier	bAjusta		1210460	0					
ANR	1211035	CompoundStatement		101:17:3362:3362	1210460	1					
ANR	1211036	IfStatement	"if ( ! strncmp ( regname , ""cs"" , 2 ) )"		1210460	0					
ANR	1211037	Condition	"! strncmp ( regname , ""cs"" , 2 )"	188:9:5493:5517	1210460	0	True				
ANR	1211038	UnaryOperationExpression	"! strncmp ( regname , ""cs"" , 2 )"		1210460	0					
ANR	1211039	UnaryOperator	!		1210460	0					
ANR	1211040	CallExpression	"strncmp ( regname , ""cs"" , 2 )"		1210460	1					
ANR	1211041	Callee	strncmp		1210460	0					
ANR	1211042	Identifier	strncmp		1210460	0					
ANR	1211043	ArgumentList	regname		1210460	1					
ANR	1211044	Argument	regname		1210460	0					
ANR	1211045	Identifier	regname		1210460	0					
ANR	1211046	Argument	"""cs"""		1210460	1					
ANR	1211047	PrimaryExpression	"""cs"""		1210460	0					
ANR	1211048	Argument	2		1210460	2					
ANR	1211049	PrimaryExpression	2		1210460	0					
ANR	1211050	CompoundStatement		102:36:3400:3400	1210460	1					
ANR	1211051	ExpressionStatement	valRIP += ( val * 0x10 )	189:6:5528:5548	1210460	0	True				
ANR	1211052	AssignmentExpression	valRIP += ( val * 0x10 )		1210460	0		+=			
ANR	1211053	Identifier	valRIP		1210460	0					
ANR	1211054	MultiplicativeExpression	val * 0x10		1210460	1		*			
ANR	1211055	Identifier	val		1210460	0					
ANR	1211056	PrimaryExpression	0x10		1210460	1					
ANR	1211057	IfStatement	if ( ripStop != 0 )		1210460	12					
ANR	1211058	Condition	ripStop != 0	196:6:5710:5721	1210460	0	True				
ANR	1211059	EqualityExpression	ripStop != 0		1210460	0		!=			
ANR	1211060	Identifier	ripStop		1210460	0					
ANR	1211061	PrimaryExpression	0		1210460	1					
ANR	1211062	CompoundStatement		110:20:3604:3604	1210460	1					
ANR	1211063	ExpressionStatement	"memcpy ( & buf [ 0 ] , & ripStop , 8 )"	197:3:5729:5758	1210460	0	True				
ANR	1211064	CallExpression	"memcpy ( & buf [ 0 ] , & ripStop , 8 )"		1210460	0					
ANR	1211065	Callee	memcpy		1210460	0					
ANR	1211066	Identifier	memcpy		1210460	0					
ANR	1211067	ArgumentList	& buf [ 0 ]		1210460	1					
ANR	1211068	Argument	& buf [ 0 ]		1210460	0					
ANR	1211069	UnaryOperationExpression	& buf [ 0 ]		1210460	0					
ANR	1211070	UnaryOperator	&		1210460	0					
ANR	1211071	ArrayIndexing	buf [ 0 ]		1210460	1					
ANR	1211072	Identifier	buf		1210460	0					
ANR	1211073	PrimaryExpression	0		1210460	1					
ANR	1211074	Argument	& ripStop		1210460	1					
ANR	1211075	UnaryOperationExpression	& ripStop		1210460	0					
ANR	1211076	UnaryOperator	&		1210460	0					
ANR	1211077	Identifier	ripStop		1210460	1					
ANR	1211078	Argument	8		1210460	2					
ANR	1211079	PrimaryExpression	8		1210460	0					
ANR	1211080	ElseStatement	else		1210460	0					
ANR	1211081	CompoundStatement		112:9:3649:3649	1210460	0					
ANR	1211082	ExpressionStatement	"memcpy ( & buf [ 0 ] , & valRIP , 8 )"	199:3:5774:5802	1210460	0	True				
ANR	1211083	CallExpression	"memcpy ( & buf [ 0 ] , & valRIP , 8 )"		1210460	0					
ANR	1211084	Callee	memcpy		1210460	0					
ANR	1211085	Identifier	memcpy		1210460	0					
ANR	1211086	ArgumentList	& buf [ 0 ]		1210460	1					
ANR	1211087	Argument	& buf [ 0 ]		1210460	0					
ANR	1211088	UnaryOperationExpression	& buf [ 0 ]		1210460	0					
ANR	1211089	UnaryOperator	&		1210460	0					
ANR	1211090	ArrayIndexing	buf [ 0 ]		1210460	1					
ANR	1211091	Identifier	buf		1210460	0					
ANR	1211092	PrimaryExpression	0		1210460	1					
ANR	1211093	Argument	& valRIP		1210460	1					
ANR	1211094	UnaryOperationExpression	& valRIP		1210460	0					
ANR	1211095	UnaryOperator	&		1210460	0					
ANR	1211096	Identifier	valRIP		1210460	1					
ANR	1211097	Argument	8		1210460	2					
ANR	1211098	PrimaryExpression	8		1210460	0					
ANR	1211099	ExpressionStatement	"memcpy ( saveRegs , buf , size )"	202:2:5918:5944	1210460	13	True				
ANR	1211100	CallExpression	"memcpy ( saveRegs , buf , size )"		1210460	0					
ANR	1211101	Callee	memcpy		1210460	0					
ANR	1211102	Identifier	memcpy		1210460	0					
ANR	1211103	ArgumentList	saveRegs		1210460	1					
ANR	1211104	Argument	saveRegs		1210460	0					
ANR	1211105	Identifier	saveRegs		1210460	0					
ANR	1211106	Argument	buf		1210460	1					
ANR	1211107	Identifier	buf		1210460	0					
ANR	1211108	Argument	size		1210460	2					
ANR	1211109	Identifier	size		1210460	0					
ANR	1211110	ExpressionStatement	bCapturaRegs = false	203:2:5948:5968	1210460	14	True				
ANR	1211111	AssignmentExpression	bCapturaRegs = false		1210460	0		=			
ANR	1211112	Identifier	bCapturaRegs		1210460	0					
ANR	1211113	Identifier	false		1210460	1					
ANR	1211114	ElseStatement	else		1210460	0					
ANR	1211115	CompoundStatement		119:8:3891:3891	1210460	0					
ANR	1211116	ExpressionStatement	"memcpy ( buf , saveRegs , size )"	206:2:6015:6043	1210460	0	True				
ANR	1211117	CallExpression	"memcpy ( buf , saveRegs , size )"		1210460	0					
ANR	1211118	Callee	memcpy		1210460	0					
ANR	1211119	Identifier	memcpy		1210460	0					
ANR	1211120	ArgumentList	buf		1210460	1					
ANR	1211121	Argument	buf		1210460	0					
ANR	1211122	Identifier	buf		1210460	0					
ANR	1211123	Argument	saveRegs		1210460	1					
ANR	1211124	Identifier	saveRegs		1210460	0					
ANR	1211125	Argument	size		1210460	2					
ANR	1211126	Identifier	size		1210460	0					
ANR	1211127	ReturnStatement	return size ;	209:1:6090:6101	1210460	8	True				
ANR	1211128	Identifier	size		1210460	0					
ANR	1211129	ReturnType	static int		1210460	1					
ANR	1211130	Identifier	r_debug_bochs_reg_read		1210460	2					
ANR	1211131	ParameterList	"RDebug * dbg , int type , ut8 * buf , int size"		1210460	3					
ANR	1211132	Parameter	RDebug * dbg	87:34:2076:2086	1210460	0	True				
ANR	1211133	ParameterType	RDebug *		1210460	0					
ANR	1211134	Identifier	dbg		1210460	1					
ANR	1211135	Parameter	int type	87:47:2089:2096	1210460	1	True				
ANR	1211136	ParameterType	int		1210460	0					
ANR	1211137	Identifier	type		1210460	1					
ANR	1211138	Parameter	ut8 * buf	87:57:2099:2106	1210460	2	True				
ANR	1211139	ParameterType	ut8 *		1210460	0					
ANR	1211140	Identifier	buf		1210460	1					
ANR	1211141	Parameter	int size	87:67:2109:2116	1210460	3	True				
ANR	1211142	ParameterType	int		1210460	0					
ANR	1211143	Identifier	size		1210460	1					
ANR	1211144	CFGEntryNode	ENTRY		1210460		True				
ANR	1211145	CFGExitNode	EXIT		1210460		True				
ANR	1211146	Symbol	& val		1210460						
ANR	1211147	Symbol	* strBase		1210460						
ANR	1211148	Symbol	saveRegs		1210460						
ANR	1211149	Symbol	type		1210460						
ANR	1211150	Symbol	strlen		1210460						
ANR	1211151	Symbol	strncmp		1210460						
ANR	1211152	Symbol	& ripStop		1210460						
ANR	1211153	Symbol	* desc -> data		1210460						
ANR	1211154	Symbol	* strReg		1210460						
ANR	1211155	Symbol	pos		1210460						
ANR	1211156	Symbol	bCapturaRegs		1210460						
ANR	1211157	Symbol	* desc		1210460						
ANR	1211158	Symbol	desc -> data		1210460						
ANR	1211159	Symbol	r_num_get		1210460						
ANR	1211160	Symbol	valRIP		1210460						
ANR	1211161	Symbol	val		1210460						
ANR	1211162	Symbol	regname		1210460						
ANR	1211163	Symbol	NULL		1210460						
ANR	1211164	Symbol	strBase		1210460						
ANR	1211165	Symbol	dbg		1210460						
ANR	1211166	Symbol	strLimit		1210460						
ANR	1211167	Symbol	false		1210460						
ANR	1211168	Symbol	i		1210460						
ANR	1211169	Symbol	* * desc		1210460						
ANR	1211170	Symbol	& valRIP		1210460						
ANR	1211171	Symbol	bAjusta		1210460						
ANR	1211172	Symbol	n		1210460						
ANR	1211173	Symbol	buf		1210460						
ANR	1211174	Symbol	* i		1210460						
ANR	1211175	Symbol	s		1210460						
ANR	1211176	Symbol	size		1210460						
ANR	1211177	Symbol	strstr		1210460						
ANR	1211178	Symbol	strReg		1210460						
ANR	1211179	Symbol	lenRec		1210460						
ANR	1211180	Symbol	isBochs		1210460						
ANR	1211181	Symbol	* regname		1210460						
ANR	1211182	Symbol	true		1210460						
ANR	1211183	Symbol	x		1210460						
ANR	1211184	Symbol	* n		1210460						
ANR	1211185	Symbol	* s		1210460						
ANR	1211186	Symbol	* strLimit		1210460						
ANR	1211187	Symbol	ripStop		1210460						
ANR	1211188	Symbol	desc		1210460						
ANR	1211189	Function	r_debug_bochs_reg_write	212:0:6106:6237							
ANR	1211190	FunctionDef	"r_debug_bochs_reg_write (RDebug * dbg , int type , const ut8 * buf , int size)"		1211189	0					
ANR	1211191	CompoundStatement		212:84:6190:6237	1211189	0					
ANR	1211192	ReturnStatement	return - 1 ;	214:1:6226:6235	1211189	0	True				
ANR	1211193	UnaryOperationExpression	- 1		1211189	0					
ANR	1211194	UnaryOperator	-		1211189	0					
ANR	1211195	PrimaryExpression	1		1211189	1					
ANR	1211196	ReturnType	static int		1211189	1					
ANR	1211197	Identifier	r_debug_bochs_reg_write		1211189	2					
ANR	1211198	ParameterList	"RDebug * dbg , int type , const ut8 * buf , int size"		1211189	3					
ANR	1211199	Parameter	RDebug * dbg	212:35:6141:6151	1211189	0	True				
ANR	1211200	ParameterType	RDebug *		1211189	0					
ANR	1211201	Identifier	dbg		1211189	1					
ANR	1211202	Parameter	int type	212:48:6154:6161	1211189	1	True				
ANR	1211203	ParameterType	int		1211189	0					
ANR	1211204	Identifier	type		1211189	1					
ANR	1211205	Parameter	const ut8 * buf	212:58:6164:6177	1211189	2	True				
ANR	1211206	ParameterType	const ut8 *		1211189	0					
ANR	1211207	Identifier	buf		1211189	1					
ANR	1211208	Parameter	int size	212:74:6180:6187	1211189	3	True				
ANR	1211209	ParameterType	int		1211189	0					
ANR	1211210	Identifier	size		1211189	1					
ANR	1211211	CFGEntryNode	ENTRY		1211189		True				
ANR	1211212	CFGExitNode	EXIT		1211189		True				
ANR	1211213	Symbol	buf		1211189						
ANR	1211214	Symbol	size		1211189						
ANR	1211215	Symbol	dbg		1211189						
ANR	1211216	Symbol	type		1211189						
ANR	1211217	Function	map_free	217:0:6240:6304							
ANR	1211218	FunctionDef	map_free (RDebugMap * map)		1211217	0					
ANR	1211219	CompoundStatement		217:30:6270:6304	1211217	0					
ANR	1211220	ExpressionStatement	free ( map -> name )	218:1:6273:6289	1211217	0	True				
ANR	1211221	CallExpression	free ( map -> name )		1211217	0					
ANR	1211222	Callee	free		1211217	0					
ANR	1211223	Identifier	free		1211217	0					
ANR	1211224	ArgumentList	map -> name		1211217	1					
ANR	1211225	Argument	map -> name		1211217	0					
ANR	1211226	PtrMemberAccess	map -> name		1211217	0					
ANR	1211227	Identifier	map		1211217	0					
ANR	1211228	Identifier	name		1211217	1					
ANR	1211229	ExpressionStatement	free ( map )	219:1:6292:6302	1211217	1	True				
ANR	1211230	CallExpression	free ( map )		1211217	0					
ANR	1211231	Callee	free		1211217	0					
ANR	1211232	Identifier	free		1211217	0					
ANR	1211233	ArgumentList	map		1211217	1					
ANR	1211234	Argument	map		1211217	0					
ANR	1211235	Identifier	map		1211217	0					
ANR	1211236	ReturnType	void		1211217	1					
ANR	1211237	Identifier	map_free		1211217	2					
ANR	1211238	ParameterList	RDebugMap * map		1211217	3					
ANR	1211239	Parameter	RDebugMap * map	217:14:6254:6267	1211217	0	True				
ANR	1211240	ParameterType	RDebugMap *		1211217	0					
ANR	1211241	Identifier	map		1211217	1					
ANR	1211242	CFGEntryNode	ENTRY		1211217		True				
ANR	1211243	CFGExitNode	EXIT		1211217		True				
ANR	1211244	Symbol	map -> name		1211217						
ANR	1211245	Symbol	* map		1211217						
ANR	1211246	Symbol	map		1211217						
ANR	1211247	Function	r_debug_bochs_map_get	222:0:6307:6782							
ANR	1211248	FunctionDef	r_debug_bochs_map_get (RDebug * dbg)		1211247	0					
ANR	1211249	CompoundStatement		222:49:6356:6782	1211247	0					
ANR	1211250	IfStatement	if ( ! isBochs ( dbg ) )		1211247	0					
ANR	1211251	Condition	! isBochs ( dbg )	223:5:6370:6383	1211247	0	True				
ANR	1211252	UnaryOperationExpression	! isBochs ( dbg )		1211247	0					
ANR	1211253	UnaryOperator	!		1211247	0					
ANR	1211254	CallExpression	isBochs ( dbg )		1211247	1					
ANR	1211255	Callee	isBochs		1211247	0					
ANR	1211256	Identifier	isBochs		1211247	0					
ANR	1211257	ArgumentList	dbg		1211247	1					
ANR	1211258	Argument	dbg		1211247	0					
ANR	1211259	Identifier	dbg		1211247	0					
ANR	1211260	CompoundStatement		2:21:29:29	1211247	1					
ANR	1211261	ReturnStatement	return NULL ;	224:2:6390:6401	1211247	0	True				
ANR	1211262	Identifier	NULL		1211247	0					
ANR	1211263	IdentifierDeclStatement	RDebugMap * mr ;	227:1:6444:6457	1211247	1	True				
ANR	1211264	IdentifierDecl	* mr		1211247	0					
ANR	1211265	IdentifierDeclType	RDebugMap *		1211247	0					
ANR	1211266	Identifier	mr		1211247	1					
ANR	1211267	IdentifierDeclStatement	RList * list = r_list_newf ( ( RListFree ) map_free ) ;	228:1:6460:6507	1211247	2	True				
ANR	1211268	IdentifierDecl	* list = r_list_newf ( ( RListFree ) map_free )		1211247	0					
ANR	1211269	IdentifierDeclType	RList *		1211247	0					
ANR	1211270	Identifier	list		1211247	1					
ANR	1211271	AssignmentExpression	* list = r_list_newf ( ( RListFree ) map_free )		1211247	2		=			
ANR	1211272	Identifier	list		1211247	0					
ANR	1211273	CallExpression	r_list_newf ( ( RListFree ) map_free )		1211247	1					
ANR	1211274	Callee	r_list_newf		1211247	0					
ANR	1211275	Identifier	r_list_newf		1211247	0					
ANR	1211276	ArgumentList	( RListFree ) map_free		1211247	1					
ANR	1211277	Argument	( RListFree ) map_free		1211247	0					
ANR	1211278	CastExpression	( RListFree ) map_free		1211247	0					
ANR	1211279	CastTarget	RListFree		1211247	0					
ANR	1211280	Identifier	map_free		1211247	1					
ANR	1211281	IfStatement	if ( ! list )		1211247	3					
ANR	1211282	Condition	! list	229:5:6514:6518	1211247	0	True				
ANR	1211283	UnaryOperationExpression	! list		1211247	0					
ANR	1211284	UnaryOperator	!		1211247	0					
ANR	1211285	Identifier	list		1211247	1					
ANR	1211286	CompoundStatement		8:12:164:164	1211247	1					
ANR	1211287	ReturnStatement	return NULL ;	230:2:6525:6536	1211247	0	True				
ANR	1211288	Identifier	NULL		1211247	0					
ANR	1211289	ExpressionStatement	mr = R_NEW0 ( RDebugMap )	232:1:6542:6565	1211247	4	True				
ANR	1211290	AssignmentExpression	mr = R_NEW0 ( RDebugMap )		1211247	0		=			
ANR	1211291	Identifier	mr		1211247	0					
ANR	1211292	CallExpression	R_NEW0 ( RDebugMap )		1211247	1					
ANR	1211293	Callee	R_NEW0		1211247	0					
ANR	1211294	Identifier	R_NEW0		1211247	0					
ANR	1211295	ArgumentList	RDebugMap		1211247	1					
ANR	1211296	Argument	RDebugMap		1211247	0					
ANR	1211297	Identifier	RDebugMap		1211247	0					
ANR	1211298	IfStatement	if ( ! mr )		1211247	5					
ANR	1211299	Condition	! mr	233:5:6572:6574	1211247	0	True				
ANR	1211300	UnaryOperationExpression	! mr		1211247	0					
ANR	1211301	UnaryOperator	!		1211247	0					
ANR	1211302	Identifier	mr		1211247	1					
ANR	1211303	CompoundStatement		12:10:220:220	1211247	1					
ANR	1211304	ExpressionStatement	r_list_free ( list )	234:2:6581:6599	1211247	0	True				
ANR	1211305	CallExpression	r_list_free ( list )		1211247	0					
ANR	1211306	Callee	r_list_free		1211247	0					
ANR	1211307	Identifier	r_list_free		1211247	0					
ANR	1211308	ArgumentList	list		1211247	1					
ANR	1211309	Argument	list		1211247	0					
ANR	1211310	Identifier	list		1211247	0					
ANR	1211311	ReturnStatement	return NULL ;	235:2:6603:6614	1211247	1	True				
ANR	1211312	Identifier	NULL		1211247	0					
ANR	1211313	ExpressionStatement	"mr -> name = strdup ( ""fake"" )"	237:1:6620:6646	1211247	6	True				
ANR	1211314	AssignmentExpression	"mr -> name = strdup ( ""fake"" )"		1211247	0		=			
ANR	1211315	PtrMemberAccess	mr -> name		1211247	0					
ANR	1211316	Identifier	mr		1211247	0					
ANR	1211317	Identifier	name		1211247	1					
ANR	1211318	CallExpression	"strdup ( ""fake"" )"		1211247	1					
ANR	1211319	Callee	strdup		1211247	0					
ANR	1211320	Identifier	strdup		1211247	0					
ANR	1211321	ArgumentList	"""fake"""		1211247	1					
ANR	1211322	Argument	"""fake"""		1211247	0					
ANR	1211323	PrimaryExpression	"""fake"""		1211247	0					
ANR	1211324	ExpressionStatement	mr -> addr = 0	238:1:6649:6661	1211247	7	True				
ANR	1211325	AssignmentExpression	mr -> addr = 0		1211247	0		=			
ANR	1211326	PtrMemberAccess	mr -> addr		1211247	0					
ANR	1211327	Identifier	mr		1211247	0					
ANR	1211328	Identifier	addr		1211247	1					
ANR	1211329	PrimaryExpression	0		1211247	1					
ANR	1211330	ExpressionStatement	mr -> addr_end = UT32_MAX	239:1:6664:6687	1211247	8	True				
ANR	1211331	AssignmentExpression	mr -> addr_end = UT32_MAX		1211247	0		=			
ANR	1211332	PtrMemberAccess	mr -> addr_end		1211247	0					
ANR	1211333	Identifier	mr		1211247	0					
ANR	1211334	Identifier	addr_end		1211247	1					
ANR	1211335	Identifier	UT32_MAX		1211247	1					
ANR	1211336	ExpressionStatement	mr -> size = UT32_MAX	240:1:6690:6709	1211247	9	True				
ANR	1211337	AssignmentExpression	mr -> size = UT32_MAX		1211247	0		=			
ANR	1211338	PtrMemberAccess	mr -> size		1211247	0					
ANR	1211339	Identifier	mr		1211247	0					
ANR	1211340	Identifier	size		1211247	1					
ANR	1211341	Identifier	UT32_MAX		1211247	1					
ANR	1211342	ExpressionStatement	mr -> perm = 0	241:1:6712:6724	1211247	10	True				
ANR	1211343	AssignmentExpression	mr -> perm = 0		1211247	0		=			
ANR	1211344	PtrMemberAccess	mr -> perm		1211247	0					
ANR	1211345	Identifier	mr		1211247	0					
ANR	1211346	Identifier	perm		1211247	1					
ANR	1211347	PrimaryExpression	0		1211247	1					
ANR	1211348	ExpressionStatement	mr -> user = 0	242:1:6727:6739	1211247	11	True				
ANR	1211349	AssignmentExpression	mr -> user = 0		1211247	0		=			
ANR	1211350	PtrMemberAccess	mr -> user		1211247	0					
ANR	1211351	Identifier	mr		1211247	0					
ANR	1211352	Identifier	user		1211247	1					
ANR	1211353	PrimaryExpression	0		1211247	1					
ANR	1211354	ExpressionStatement	"r_list_append ( list , mr )"	243:1:6742:6766	1211247	12	True				
ANR	1211355	CallExpression	"r_list_append ( list , mr )"		1211247	0					
ANR	1211356	Callee	r_list_append		1211247	0					
ANR	1211357	Identifier	r_list_append		1211247	0					
ANR	1211358	ArgumentList	list		1211247	1					
ANR	1211359	Argument	list		1211247	0					
ANR	1211360	Identifier	list		1211247	0					
ANR	1211361	Argument	mr		1211247	1					
ANR	1211362	Identifier	mr		1211247	0					
ANR	1211363	ReturnStatement	return list ;	244:1:6769:6780	1211247	13	True				
ANR	1211364	Identifier	list		1211247	0					
ANR	1211365	ReturnType	static RList *		1211247	1					
ANR	1211366	Identifier	r_debug_bochs_map_get		1211247	2					
ANR	1211367	ParameterList	RDebug * dbg		1211247	3					
ANR	1211368	Parameter	RDebug * dbg	222:36:6343:6353	1211247	0	True				
ANR	1211369	ParameterType	RDebug *		1211247	0					
ANR	1211370	Identifier	dbg		1211247	1					
ANR	1211371	CFGEntryNode	ENTRY		1211247		True				
ANR	1211372	CFGExitNode	EXIT		1211247		True				
ANR	1211373	Symbol	mr -> name		1211247						
ANR	1211374	Symbol	UT32_MAX		1211247						
ANR	1211375	Symbol	mr -> addr_end		1211247						
ANR	1211376	Symbol	NULL		1211247						
ANR	1211377	Symbol	mr -> perm		1211247						
ANR	1211378	Symbol	mr		1211247						
ANR	1211379	Symbol	r_list_newf		1211247						
ANR	1211380	Symbol	dbg		1211247						
ANR	1211381	Symbol	* mr		1211247						
ANR	1211382	Symbol	map_free		1211247						
ANR	1211383	Symbol	list		1211247						
ANR	1211384	Symbol	R_NEW0		1211247						
ANR	1211385	Symbol	mr -> size		1211247						
ANR	1211386	Symbol	isBochs		1211247						
ANR	1211387	Symbol	RDebugMap		1211247						
ANR	1211388	Symbol	strdup		1211247						
ANR	1211389	Symbol	mr -> addr		1211247						
ANR	1211390	Symbol	mr -> user		1211247						
ANR	1211391	Function	r_debug_bochs_step	247:0:6785:6985							
ANR	1211392	FunctionDef	r_debug_bochs_step (RDebug * dbg)		1211391	0					
ANR	1211393	CompoundStatement		247:43:6828:6985	1211391	0					
ANR	1211394	IfStatement	if ( ! isBochs ( dbg ) )		1211391	0					
ANR	1211395	Condition	! isBochs ( dbg )	248:5:6835:6848	1211391	0	True				
ANR	1211396	UnaryOperationExpression	! isBochs ( dbg )		1211391	0					
ANR	1211397	UnaryOperator	!		1211391	0					
ANR	1211398	CallExpression	isBochs ( dbg )		1211391	1					
ANR	1211399	Callee	isBochs		1211391	0					
ANR	1211400	Identifier	isBochs		1211391	0					
ANR	1211401	ArgumentList	dbg		1211391	1					
ANR	1211402	Argument	dbg		1211391	0					
ANR	1211403	Identifier	dbg		1211391	0					
ANR	1211404	CompoundStatement		2:21:22:22	1211391	1					
ANR	1211405	ReturnStatement	return false ;	249:2:6855:6867	1211391	0	True				
ANR	1211406	Identifier	false		1211391	0					
ANR	1211407	ExpressionStatement	"bochs_send_cmd ( desc , ""s"" , true )"	252:1:6902:6932	1211391	1	True				
ANR	1211408	CallExpression	"bochs_send_cmd ( desc , ""s"" , true )"		1211391	0					
ANR	1211409	Callee	bochs_send_cmd		1211391	0					
ANR	1211410	Identifier	bochs_send_cmd		1211391	0					
ANR	1211411	ArgumentList	desc		1211391	1					
ANR	1211412	Argument	desc		1211391	0					
ANR	1211413	Identifier	desc		1211391	0					
ANR	1211414	Argument	"""s"""		1211391	1					
ANR	1211415	PrimaryExpression	"""s"""		1211391	0					
ANR	1211416	Argument	true		1211391	2					
ANR	1211417	Identifier	true		1211391	0					
ANR	1211418	ExpressionStatement	bCapturaRegs = true	253:1:6935:6954	1211391	2	True				
ANR	1211419	AssignmentExpression	bCapturaRegs = true		1211391	0		=			
ANR	1211420	Identifier	bCapturaRegs		1211391	0					
ANR	1211421	Identifier	true		1211391	1					
ANR	1211422	ExpressionStatement	bStep = true	254:1:6957:6969	1211391	3	True				
ANR	1211423	AssignmentExpression	bStep = true		1211391	0		=			
ANR	1211424	Identifier	bStep		1211391	0					
ANR	1211425	Identifier	true		1211391	1					
ANR	1211426	ReturnStatement	return true ;	255:1:6972:6983	1211391	4	True				
ANR	1211427	Identifier	true		1211391	0					
ANR	1211428	ReturnType	static int		1211391	1					
ANR	1211429	Identifier	r_debug_bochs_step		1211391	2					
ANR	1211430	ParameterList	RDebug * dbg		1211391	3					
ANR	1211431	Parameter	RDebug * dbg	247:30:6815:6825	1211391	0	True				
ANR	1211432	ParameterType	RDebug *		1211391	0					
ANR	1211433	Identifier	dbg		1211391	1					
ANR	1211434	CFGEntryNode	ENTRY		1211391		True				
ANR	1211435	CFGExitNode	EXIT		1211391		True				
ANR	1211436	Symbol	bStep		1211391						
ANR	1211437	Symbol	isBochs		1211391						
ANR	1211438	Symbol	bCapturaRegs		1211391						
ANR	1211439	Symbol	dbg		1211391						
ANR	1211440	Symbol	false		1211391						
ANR	1211441	Symbol	true		1211391						
ANR	1211442	Symbol	desc		1211391						
ANR	1211443	Function	r_debug_bochs_continue	258:0:6988:7187							
ANR	1211444	FunctionDef	"r_debug_bochs_continue (RDebug * dbg , int pid , int tid , int sig)"		1211443	0					
ANR	1211445	CompoundStatement		258:74:7062:7187	1211443	0					
ANR	1211446	ExpressionStatement	"bochs_send_cmd ( desc , ""c"" , false )"	260:1:7099:7132	1211443	0	True				
ANR	1211447	CallExpression	"bochs_send_cmd ( desc , ""c"" , false )"		1211443	0					
ANR	1211448	Callee	bochs_send_cmd		1211443	0					
ANR	1211449	Identifier	bochs_send_cmd		1211443	0					
ANR	1211450	ArgumentList	desc		1211443	1					
ANR	1211451	Argument	desc		1211443	0					
ANR	1211452	Identifier	desc		1211443	0					
ANR	1211453	Argument	"""c"""		1211443	1					
ANR	1211454	PrimaryExpression	"""c"""		1211443	0					
ANR	1211455	Argument	false		1211443	2					
ANR	1211456	Identifier	false		1211443	0					
ANR	1211457	ExpressionStatement	bCapturaRegs = true	261:1:7135:7154	1211443	1	True				
ANR	1211458	AssignmentExpression	bCapturaRegs = true		1211443	0		=			
ANR	1211459	Identifier	bCapturaRegs		1211443	0					
ANR	1211460	Identifier	true		1211443	1					
ANR	1211461	ExpressionStatement	bBreak = false	262:1:7157:7171	1211443	2	True				
ANR	1211462	AssignmentExpression	bBreak = false		1211443	0		=			
ANR	1211463	Identifier	bBreak		1211443	0					
ANR	1211464	Identifier	false		1211443	1					
ANR	1211465	ReturnStatement	return true ;	263:1:7174:7185	1211443	3	True				
ANR	1211466	Identifier	true		1211443	0					
ANR	1211467	ReturnType	static int		1211443	1					
ANR	1211468	Identifier	r_debug_bochs_continue		1211443	2					
ANR	1211469	ParameterList	"RDebug * dbg , int pid , int tid , int sig"		1211443	3					
ANR	1211470	Parameter	RDebug * dbg	258:34:7022:7032	1211443	0	True				
ANR	1211471	ParameterType	RDebug *		1211443	0					
ANR	1211472	Identifier	dbg		1211443	1					
ANR	1211473	Parameter	int pid	258:47:7035:7041	1211443	1	True				
ANR	1211474	ParameterType	int		1211443	0					
ANR	1211475	Identifier	pid		1211443	1					
ANR	1211476	Parameter	int tid	258:56:7044:7050	1211443	2	True				
ANR	1211477	ParameterType	int		1211443	0					
ANR	1211478	Identifier	tid		1211443	1					
ANR	1211479	Parameter	int sig	258:65:7053:7059	1211443	3	True				
ANR	1211480	ParameterType	int		1211443	0					
ANR	1211481	Identifier	sig		1211443	1					
ANR	1211482	CFGEntryNode	ENTRY		1211443		True				
ANR	1211483	CFGExitNode	EXIT		1211443		True				
ANR	1211484	Symbol	sig		1211443						
ANR	1211485	Symbol	bCapturaRegs		1211443						
ANR	1211486	Symbol	dbg		1211443						
ANR	1211487	Symbol	false		1211443						
ANR	1211488	Symbol	true		1211443						
ANR	1211489	Symbol	pid		1211443						
ANR	1211490	Symbol	tid		1211443						
ANR	1211491	Symbol	desc		1211443						
ANR	1211492	Symbol	bBreak		1211443						
ANR	1211493	Function	bochs_debug_break	266:0:7190:7322							
ANR	1211494	FunctionDef	bochs_debug_break (void * u)		1211493	0					
ANR	1211495	CompoundStatement		266:39:7229:7322	1211493	0					
ANR	1211496	ExpressionStatement	"eprintf ( ""bochs_debug_break: Sending break...\\n"" )"	267:1:7232:7280	1211493	0	True				
ANR	1211497	CallExpression	"eprintf ( ""bochs_debug_break: Sending break...\\n"" )"		1211493	0					
ANR	1211498	Callee	eprintf		1211493	0					
ANR	1211499	Identifier	eprintf		1211493	0					
ANR	1211500	ArgumentList	"""bochs_debug_break: Sending break...\\n"""		1211493	1					
ANR	1211501	Argument	"""bochs_debug_break: Sending break...\\n"""		1211493	0					
ANR	1211502	PrimaryExpression	"""bochs_debug_break: Sending break...\\n"""		1211493	0					
ANR	1211503	ExpressionStatement	bochs_cmd_stop ( desc )	268:1:7283:7304	1211493	1	True				
ANR	1211504	CallExpression	bochs_cmd_stop ( desc )		1211493	0					
ANR	1211505	Callee	bochs_cmd_stop		1211493	0					
ANR	1211506	Identifier	bochs_cmd_stop		1211493	0					
ANR	1211507	ArgumentList	desc		1211493	1					
ANR	1211508	Argument	desc		1211493	0					
ANR	1211509	Identifier	desc		1211493	0					
ANR	1211510	ExpressionStatement	bBreak = true	269:1:7307:7320	1211493	2	True				
ANR	1211511	AssignmentExpression	bBreak = true		1211493	0		=			
ANR	1211512	Identifier	bBreak		1211493	0					
ANR	1211513	Identifier	true		1211493	1					
ANR	1211514	ReturnType	static void		1211493	1					
ANR	1211515	Identifier	bochs_debug_break		1211493	2					
ANR	1211516	ParameterList	void * u		1211493	3					
ANR	1211517	Parameter	void * u	266:30:7220:7226	1211493	0	True				
ANR	1211518	ParameterType	void *		1211493	0					
ANR	1211519	Identifier	u		1211493	1					
ANR	1211520	CFGEntryNode	ENTRY		1211493		True				
ANR	1211521	CFGExitNode	EXIT		1211493		True				
ANR	1211522	Symbol	u		1211493						
ANR	1211523	Symbol	true		1211493						
ANR	1211524	Symbol	desc		1211493						
ANR	1211525	Symbol	bBreak		1211493						
ANR	1211526	Function	r_debug_bochs_wait	272:0:7325:8506							
ANR	1211527	FunctionDef	"r_debug_bochs_wait (RDebug * dbg , int pid)"		1211526	0					
ANR	1211528	CompoundStatement		272:52:7377:8506	1211526	0					
ANR	1211529	IfStatement	if ( ! isBochs ( dbg ) )		1211526	0					
ANR	1211530	Condition	! isBochs ( dbg )	273:5:7384:7397	1211526	0	True				
ANR	1211531	UnaryOperationExpression	! isBochs ( dbg )		1211526	0					
ANR	1211532	UnaryOperator	!		1211526	0					
ANR	1211533	CallExpression	isBochs ( dbg )		1211526	1					
ANR	1211534	Callee	isBochs		1211526	0					
ANR	1211535	Identifier	isBochs		1211526	0					
ANR	1211536	ArgumentList	dbg		1211526	1					
ANR	1211537	Argument	dbg		1211526	0					
ANR	1211538	Identifier	dbg		1211526	0					
ANR	1211539	CompoundStatement		2:21:22:22	1211526	1					
ANR	1211540	ReturnStatement	return false ;	274:2:7404:7416	1211526	0	True				
ANR	1211541	Identifier	false		1211526	0					
ANR	1211542	IdentifierDeclStatement	char strIP [ 19 ] ;	276:1:7422:7436	1211526	1	True				
ANR	1211543	IdentifierDecl	strIP [ 19 ]		1211526	0					
ANR	1211544	IdentifierDeclType	char [ 19 ]		1211526	0					
ANR	1211545	Identifier	strIP		1211526	1					
ANR	1211546	PrimaryExpression	19		1211526	2					
ANR	1211547	IdentifierDeclStatement	int i = 0 ;	277:1:7439:7448	1211526	2	True				
ANR	1211548	IdentifierDecl	i = 0		1211526	0					
ANR	1211549	IdentifierDeclType	int		1211526	0					
ANR	1211550	Identifier	i		1211526	1					
ANR	1211551	AssignmentExpression	i = 0		1211526	2		=			
ANR	1211552	Identifier	i		1211526	0					
ANR	1211553	PrimaryExpression	0		1211526	1					
ANR	1211554	IdentifierDeclStatement	const char * x ;	278:1:7451:7464	1211526	3	True				
ANR	1211555	IdentifierDecl	* x		1211526	0					
ANR	1211556	IdentifierDeclType	const char *		1211526	0					
ANR	1211557	Identifier	x		1211526	1					
ANR	1211558	IdentifierDeclStatement	"char * ini = 0 , * fin = 0 ;"	279:1:7467:7490	1211526	4	True				
ANR	1211559	IdentifierDecl	* ini = 0		1211526	0					
ANR	1211560	IdentifierDeclType	char *		1211526	0					
ANR	1211561	Identifier	ini		1211526	1					
ANR	1211562	AssignmentExpression	* ini = 0		1211526	2		=			
ANR	1211563	Identifier	ini		1211526	0					
ANR	1211564	PrimaryExpression	0		1211526	1					
ANR	1211565	IdentifierDecl	* fin = 0		1211526	1					
ANR	1211566	IdentifierDeclType	char *		1211526	0					
ANR	1211567	Identifier	fin		1211526	1					
ANR	1211568	AssignmentExpression	* fin = 0		1211526	2		=			
ANR	1211569	Identifier	fin		1211526	0					
ANR	1211570	PrimaryExpression	0		1211526	1					
ANR	1211571	IfStatement	if ( bStep )		1211526	5					
ANR	1211572	Condition	bStep	283:5:7529:7533	1211526	0	True				
ANR	1211573	Identifier	bStep		1211526	0					
ANR	1211574	CompoundStatement		12:12:158:158	1211526	1					
ANR	1211575	ExpressionStatement	bStep = false	284:2:7540:7553	1211526	0	True				
ANR	1211576	AssignmentExpression	bStep = false		1211526	0		=			
ANR	1211577	Identifier	bStep		1211526	0					
ANR	1211578	Identifier	false		1211526	1					
ANR	1211579	ElseStatement	else		1211526	0					
ANR	1211580	CompoundStatement		14:8:185:185	1211526	0					
ANR	1211581	ExpressionStatement	"r_cons_break_push ( bochs_debug_break , dbg )"	286:2:7567:7609	1211526	0	True				
ANR	1211582	CallExpression	"r_cons_break_push ( bochs_debug_break , dbg )"		1211526	0					
ANR	1211583	Callee	r_cons_break_push		1211526	0					
ANR	1211584	Identifier	r_cons_break_push		1211526	0					
ANR	1211585	ArgumentList	bochs_debug_break		1211526	1					
ANR	1211586	Argument	bochs_debug_break		1211526	0					
ANR	1211587	Identifier	bochs_debug_break		1211526	0					
ANR	1211588	Argument	dbg		1211526	1					
ANR	1211589	Identifier	dbg		1211526	0					
ANR	1211590	ExpressionStatement	i = 500	287:2:7613:7620	1211526	1	True				
ANR	1211591	AssignmentExpression	i = 500		1211526	0		=			
ANR	1211592	Identifier	i		1211526	0					
ANR	1211593	PrimaryExpression	500		1211526	1					
ANR	1211594	DoStatement	do		1211526	2					
ANR	1211595	CompoundStatement		17:5:249:249	1211526	0					
ANR	1211596	ExpressionStatement	bochs_wait ( desc )	289:3:7632:7649	1211526	0	True				
ANR	1211597	CallExpression	bochs_wait ( desc )		1211526	0					
ANR	1211598	Callee	bochs_wait		1211526	0					
ANR	1211599	Identifier	bochs_wait		1211526	0					
ANR	1211600	ArgumentList	desc		1211526	1					
ANR	1211601	Argument	desc		1211526	0					
ANR	1211602	Identifier	desc		1211526	0					
ANR	1211603	IfStatement	if ( bBreak )		1211526	1					
ANR	1211604	Condition	bBreak	290:7:7658:7663	1211526	0	True				
ANR	1211605	Identifier	bBreak		1211526	0					
ANR	1211606	CompoundStatement		19:15:288:288	1211526	1					
ANR	1211607	IfStatement	if ( desc -> data [ 0 ] )		1211526	0					
ANR	1211608	Condition	desc -> data [ 0 ]	291:8:7676:7688	1211526	0	True				
ANR	1211609	ArrayIndexing	desc -> data [ 0 ]		1211526	0					
ANR	1211610	PtrMemberAccess	desc -> data		1211526	0					
ANR	1211611	Identifier	desc		1211526	0					
ANR	1211612	Identifier	data		1211526	1					
ANR	1211613	PrimaryExpression	0		1211526	1					
ANR	1211614	CompoundStatement		20:23:313:313	1211526	1					
ANR	1211615	ExpressionStatement	"eprintf ( ""ctrl+c %s\\n"" , desc -> data )"	292:5:7698:7733	1211526	0	True				
ANR	1211616	CallExpression	"eprintf ( ""ctrl+c %s\\n"" , desc -> data )"		1211526	0					
ANR	1211617	Callee	eprintf		1211526	0					
ANR	1211618	Identifier	eprintf		1211526	0					
ANR	1211619	ArgumentList	"""ctrl+c %s\\n"""		1211526	1					
ANR	1211620	Argument	"""ctrl+c %s\\n"""		1211526	0					
ANR	1211621	PrimaryExpression	"""ctrl+c %s\\n"""		1211526	0					
ANR	1211622	Argument	desc -> data		1211526	1					
ANR	1211623	PtrMemberAccess	desc -> data		1211526	0					
ANR	1211624	Identifier	desc		1211526	0					
ANR	1211625	Identifier	data		1211526	1					
ANR	1211626	ExpressionStatement	bBreak = false	293:5:7740:7754	1211526	1	True				
ANR	1211627	AssignmentExpression	bBreak = false		1211526	0		=			
ANR	1211628	Identifier	bBreak		1211526	0					
ANR	1211629	Identifier	false		1211526	1					
ANR	1211630	BreakStatement	break ;	294:5:7761:7766	1211526	2	True				
ANR	1211631	ExpressionStatement	i --	296:4:7778:7781	1211526	1	True				
ANR	1211632	PostIncDecOperationExpression	i --		1211526	0					
ANR	1211633	Identifier	i		1211526	0					
ANR	1211634	IncDec	--		1211526	1					
ANR	1211635	IfStatement	if ( ! i )		1211526	2					
ANR	1211636	Condition	! i	297:8:7791:7792	1211526	0	True				
ANR	1211637	UnaryOperationExpression	! i		1211526	0					
ANR	1211638	UnaryOperator	!		1211526	0					
ANR	1211639	Identifier	i		1211526	1					
ANR	1211640	CompoundStatement		26:12:417:417	1211526	1					
ANR	1211641	ExpressionStatement	bBreak = false	298:5:7802:7816	1211526	0	True				
ANR	1211642	AssignmentExpression	bBreak = false		1211526	0		=			
ANR	1211643	Identifier	bBreak		1211526	0					
ANR	1211644	Identifier	false		1211526	1					
ANR	1211645	ExpressionStatement	"eprintf ( ""empty ctrl+c.\\n"" )"	299:5:7823:7850	1211526	1	True				
ANR	1211646	CallExpression	"eprintf ( ""empty ctrl+c.\\n"" )"		1211526	0					
ANR	1211647	Callee	eprintf		1211526	0					
ANR	1211648	Identifier	eprintf		1211526	0					
ANR	1211649	ArgumentList	"""empty ctrl+c.\\n"""		1211526	1					
ANR	1211650	Argument	"""empty ctrl+c.\\n"""		1211526	0					
ANR	1211651	PrimaryExpression	"""empty ctrl+c.\\n"""		1211526	0					
ANR	1211652	BreakStatement	break ;	300:5:7857:7862	1211526	2	True				
ANR	1211653	ElseStatement	else		1211526	0					
ANR	1211654	IfStatement	if ( desc -> data [ 0 ] )		1211526	0					
ANR	1211655	Condition	desc -> data [ 0 ]	302:14:7884:7896	1211526	0	True				
ANR	1211656	ArrayIndexing	desc -> data [ 0 ]		1211526	0					
ANR	1211657	PtrMemberAccess	desc -> data		1211526	0					
ANR	1211658	Identifier	desc		1211526	0					
ANR	1211659	Identifier	data		1211526	1					
ANR	1211660	PrimaryExpression	0		1211526	1					
ANR	1211661	CompoundStatement		31:29:521:521	1211526	1					
ANR	1211662	BreakStatement	break ;	304:4:7957:7962	1211526	0	True				
ANR	1211663	Condition	1	306:10:7979:7979	1211526	1	True				
ANR	1211664	PrimaryExpression	1		1211526	0					
ANR	1211665	ExpressionStatement	r_cons_break_pop ( )	307:2:7985:8004	1211526	3	True				
ANR	1211666	CallExpression	r_cons_break_pop ( )		1211526	0					
ANR	1211667	Callee	r_cons_break_pop		1211526	0					
ANR	1211668	Identifier	r_cons_break_pop		1211526	0					
ANR	1211669	ArgumentList			1211526	1					
ANR	1211670	ExpressionStatement	ripStop = 0	312:1:8167:8178	1211526	6	True				
ANR	1211671	AssignmentExpression	ripStop = 0		1211526	0		=			
ANR	1211672	Identifier	ripStop		1211526	0					
ANR	1211673	PrimaryExpression	0		1211526	1					
ANR	1211674	IfStatement	"if ( ( x = strstr ( desc -> data , ""Next at"" ) ) )"		1211526	7					
ANR	1211675	Condition	"x = strstr ( desc -> data , ""Next at"" )"	313:5:8185:8220	1211526	0	True				
ANR	1211676	AssignmentExpression	"x = strstr ( desc -> data , ""Next at"" )"		1211526	0		=			
ANR	1211677	Identifier	x		1211526	0					
ANR	1211678	CallExpression	"strstr ( desc -> data , ""Next at"" )"		1211526	1					
ANR	1211679	Callee	strstr		1211526	0					
ANR	1211680	Identifier	strstr		1211526	0					
ANR	1211681	ArgumentList	desc -> data		1211526	1					
ANR	1211682	Argument	desc -> data		1211526	0					
ANR	1211683	PtrMemberAccess	desc -> data		1211526	0					
ANR	1211684	Identifier	desc		1211526	0					
ANR	1211685	Identifier	data		1211526	1					
ANR	1211686	Argument	"""Next at"""		1211526	1					
ANR	1211687	PrimaryExpression	"""Next at"""		1211526	0					
ANR	1211688	CompoundStatement		42:43:845:845	1211526	1					
ANR	1211689	IfStatement	"if ( ( ini = strstr ( x , ""[0x"" ) ) )"		1211526	0					
ANR	1211690	Condition	"ini = strstr ( x , ""[0x"" )"	314:6:8231:8255	1211526	0	True				
ANR	1211691	AssignmentExpression	"ini = strstr ( x , ""[0x"" )"		1211526	0		=			
ANR	1211692	Identifier	ini		1211526	0					
ANR	1211693	CallExpression	"strstr ( x , ""[0x"" )"		1211526	1					
ANR	1211694	Callee	strstr		1211526	0					
ANR	1211695	Identifier	strstr		1211526	0					
ANR	1211696	ArgumentList	x		1211526	1					
ANR	1211697	Argument	x		1211526	0					
ANR	1211698	Identifier	x		1211526	0					
ANR	1211699	Argument	"""[0x"""		1211526	1					
ANR	1211700	PrimaryExpression	"""[0x"""		1211526	0					
ANR	1211701	CompoundStatement		43:33:880:880	1211526	1					
ANR	1211702	IfStatement	"if ( ( fin = strstr ( ini , ""]"" ) ) )"		1211526	0					
ANR	1211703	Condition	"fin = strstr ( ini , ""]"" )"	315:7:8267:8290	1211526	0	True				
ANR	1211704	AssignmentExpression	"fin = strstr ( ini , ""]"" )"		1211526	0		=			
ANR	1211705	Identifier	fin		1211526	0					
ANR	1211706	CallExpression	"strstr ( ini , ""]"" )"		1211526	1					
ANR	1211707	Callee	strstr		1211526	0					
ANR	1211708	Identifier	strstr		1211526	0					
ANR	1211709	ArgumentList	ini		1211526	1					
ANR	1211710	Argument	ini		1211526	0					
ANR	1211711	Identifier	ini		1211526	0					
ANR	1211712	Argument	"""]"""		1211526	1					
ANR	1211713	PrimaryExpression	"""]"""		1211526	0					
ANR	1211714	CompoundStatement		45:4:921:944	1211526	1					
ANR	1211715	IdentifierDeclStatement	int len = fin - ini - 1 ;	316:4:8299:8322	1211526	0	True				
ANR	1211716	IdentifierDecl	len = fin - ini - 1		1211526	0					
ANR	1211717	IdentifierDeclType	int		1211526	0					
ANR	1211718	Identifier	len		1211526	1					
ANR	1211719	AssignmentExpression	len = fin - ini - 1		1211526	2		=			
ANR	1211720	Identifier	len		1211526	0					
ANR	1211721	AdditiveExpression	fin - ini - 1		1211526	1		-			
ANR	1211722	Identifier	fin		1211526	0					
ANR	1211723	AdditiveExpression	ini - 1		1211526	1		-			
ANR	1211724	Identifier	ini		1211526	0					
ANR	1211725	PrimaryExpression	1		1211526	1					
ANR	1211726	ExpressionStatement	"strncpy ( strIP , ini + 1 , len )"	317:4:8328:8355	1211526	1	True				
ANR	1211727	CallExpression	"strncpy ( strIP , ini + 1 , len )"		1211526	0					
ANR	1211728	Callee	strncpy		1211526	0					
ANR	1211729	Identifier	strncpy		1211526	0					
ANR	1211730	ArgumentList	strIP		1211526	1					
ANR	1211731	Argument	strIP		1211526	0					
ANR	1211732	Identifier	strIP		1211526	0					
ANR	1211733	Argument	ini + 1		1211526	1					
ANR	1211734	AdditiveExpression	ini + 1		1211526	0		+			
ANR	1211735	Identifier	ini		1211526	0					
ANR	1211736	PrimaryExpression	1		1211526	1					
ANR	1211737	Argument	len		1211526	2					
ANR	1211738	Identifier	len		1211526	0					
ANR	1211739	ExpressionStatement	strIP [ len ] = 0	318:4:8361:8375	1211526	2	True				
ANR	1211740	AssignmentExpression	strIP [ len ] = 0		1211526	0		=			
ANR	1211741	ArrayIndexing	strIP [ len ]		1211526	0					
ANR	1211742	Identifier	strIP		1211526	0					
ANR	1211743	Identifier	len		1211526	1					
ANR	1211744	PrimaryExpression	0		1211526	1					
ANR	1211745	ExpressionStatement	"ripStop = r_num_get ( NULL , strIP )"	320:4:8424:8457	1211526	3	True				
ANR	1211746	AssignmentExpression	"ripStop = r_num_get ( NULL , strIP )"		1211526	0		=			
ANR	1211747	Identifier	ripStop		1211526	0					
ANR	1211748	CallExpression	"r_num_get ( NULL , strIP )"		1211526	1					
ANR	1211749	Callee	r_num_get		1211526	0					
ANR	1211750	Identifier	r_num_get		1211526	0					
ANR	1211751	ArgumentList	NULL		1211526	1					
ANR	1211752	Argument	NULL		1211526	0					
ANR	1211753	Identifier	NULL		1211526	0					
ANR	1211754	Argument	strIP		1211526	1					
ANR	1211755	Identifier	strIP		1211526	0					
ANR	1211756	ExpressionStatement	desc -> data [ 0 ] = 0	324:1:8472:8489	1211526	8	True				
ANR	1211757	AssignmentExpression	desc -> data [ 0 ] = 0		1211526	0		=			
ANR	1211758	ArrayIndexing	desc -> data [ 0 ]		1211526	0					
ANR	1211759	PtrMemberAccess	desc -> data		1211526	0					
ANR	1211760	Identifier	desc		1211526	0					
ANR	1211761	Identifier	data		1211526	1					
ANR	1211762	PrimaryExpression	0		1211526	1					
ANR	1211763	PrimaryExpression	0		1211526	1					
ANR	1211764	ReturnStatement	return true ;	326:1:8493:8504	1211526	9	True				
ANR	1211765	Identifier	true		1211526	0					
ANR	1211766	ReturnType	static int		1211526	1					
ANR	1211767	Identifier	r_debug_bochs_wait		1211526	2					
ANR	1211768	ParameterList	"RDebug * dbg , int pid"		1211526	3					
ANR	1211769	Parameter	RDebug * dbg	272:30:7355:7365	1211526	0	True				
ANR	1211770	ParameterType	RDebug *		1211526	0					
ANR	1211771	Identifier	dbg		1211526	1					
ANR	1211772	Parameter	int pid	272:43:7368:7374	1211526	1	True				
ANR	1211773	ParameterType	int		1211526	0					
ANR	1211774	Identifier	pid		1211526	1					
ANR	1211775	CFGEntryNode	ENTRY		1211526		True				
ANR	1211776	CFGExitNode	EXIT		1211526		True				
ANR	1211777	Symbol	bStep		1211526						
ANR	1211778	Symbol	* strIP		1211526						
ANR	1211779	Symbol	pid		1211526						
ANR	1211780	Symbol	fin		1211526						
ANR	1211781	Symbol	strIP		1211526						
ANR	1211782	Symbol	bochs_debug_break		1211526						
ANR	1211783	Symbol	* desc -> data		1211526						
ANR	1211784	Symbol	len		1211526						
ANR	1211785	Symbol	* desc		1211526						
ANR	1211786	Symbol	desc -> data		1211526						
ANR	1211787	Symbol	r_num_get		1211526						
ANR	1211788	Symbol	NULL		1211526						
ANR	1211789	Symbol	ini		1211526						
ANR	1211790	Symbol	dbg		1211526						
ANR	1211791	Symbol	false		1211526						
ANR	1211792	Symbol	i		1211526						
ANR	1211793	Symbol	* * desc		1211526						
ANR	1211794	Symbol	bBreak		1211526						
ANR	1211795	Symbol	strstr		1211526						
ANR	1211796	Symbol	isBochs		1211526						
ANR	1211797	Symbol	x		1211526						
ANR	1211798	Symbol	true		1211526						
ANR	1211799	Symbol	ripStop		1211526						
ANR	1211800	Symbol	desc		1211526						
ANR	1211801	Symbol	* len		1211526						
ANR	1211802	Function	r_debug_bochs_stop	329:0:8509:8688							
ANR	1211803	FunctionDef	r_debug_bochs_stop (RDebug * dbg)		1211802	0					
ANR	1211804	CompoundStatement		329:43:8552:8688	1211802	0					
ANR	1211805	ReturnStatement	return true ;	334:1:8675:8686	1211802	0	True				
ANR	1211806	Identifier	true		1211802	0					
ANR	1211807	ReturnType	static int		1211802	1					
ANR	1211808	Identifier	r_debug_bochs_stop		1211802	2					
ANR	1211809	ParameterList	RDebug * dbg		1211802	3					
ANR	1211810	Parameter	RDebug * dbg	329:30:8539:8549	1211802	0	True				
ANR	1211811	ParameterType	RDebug *		1211802	0					
ANR	1211812	Identifier	dbg		1211802	1					
ANR	1211813	CFGEntryNode	ENTRY		1211802		True				
ANR	1211814	CFGExitNode	EXIT		1211802		True				
ANR	1211815	Symbol	dbg		1211802						
ANR	1211816	Symbol	true		1211802						
ANR	1211817	Function	r_debug_bochs_attach	337:0:8691:9218							
ANR	1211818	FunctionDef	"r_debug_bochs_attach (RDebug * dbg , int pid)"		1211817	0					
ANR	1211819	CompoundStatement		337:54:8745:9218	1211817	0					
ANR	1211820	IdentifierDeclStatement	RIODesc * d = dbg -> iob . io -> desc ;	338:1:8748:8778	1211817	0	True				
ANR	1211821	IdentifierDecl	* d = dbg -> iob . io -> desc		1211817	0					
ANR	1211822	IdentifierDeclType	RIODesc *		1211817	0					
ANR	1211823	Identifier	d		1211817	1					
ANR	1211824	AssignmentExpression	* d = dbg -> iob . io -> desc		1211817	2		=			
ANR	1211825	Identifier	d		1211817	0					
ANR	1211826	PtrMemberAccess	dbg -> iob . io -> desc		1211817	1					
ANR	1211827	MemberAccess	dbg -> iob . io		1211817	0					
ANR	1211828	PtrMemberAccess	dbg -> iob		1211817	0					
ANR	1211829	Identifier	dbg		1211817	0					
ANR	1211830	Identifier	iob		1211817	1					
ANR	1211831	Identifier	io		1211817	1					
ANR	1211832	Identifier	desc		1211817	1					
ANR	1211833	ExpressionStatement	dbg -> swstep = false	340:1:8813:8832	1211817	1	True				
ANR	1211834	AssignmentExpression	dbg -> swstep = false		1211817	0		=			
ANR	1211835	PtrMemberAccess	dbg -> swstep		1211817	0					
ANR	1211836	Identifier	dbg		1211817	0					
ANR	1211837	Identifier	swstep		1211817	1					
ANR	1211838	Identifier	false		1211817	1					
ANR	1211839	IfStatement	if ( d && d -> plugin && d -> plugin -> name && d -> data )		1211817	2					
ANR	1211840	Condition	d && d -> plugin && d -> plugin -> name && d -> data	341:5:8839:8882	1211817	0	True				
ANR	1211841	AndExpression	d && d -> plugin && d -> plugin -> name && d -> data		1211817	0		&&			
ANR	1211842	Identifier	d		1211817	0					
ANR	1211843	AndExpression	d -> plugin && d -> plugin -> name && d -> data		1211817	1		&&			
ANR	1211844	PtrMemberAccess	d -> plugin		1211817	0					
ANR	1211845	Identifier	d		1211817	0					
ANR	1211846	Identifier	plugin		1211817	1					
ANR	1211847	AndExpression	d -> plugin -> name && d -> data		1211817	1		&&			
ANR	1211848	PtrMemberAccess	d -> plugin -> name		1211817	0					
ANR	1211849	PtrMemberAccess	d -> plugin		1211817	0					
ANR	1211850	Identifier	d		1211817	0					
ANR	1211851	Identifier	plugin		1211817	1					
ANR	1211852	Identifier	name		1211817	1					
ANR	1211853	PtrMemberAccess	d -> data		1211817	1					
ANR	1211854	Identifier	d		1211817	0					
ANR	1211855	Identifier	data		1211817	1					
ANR	1211856	CompoundStatement		5:51:139:139	1211817	1					
ANR	1211857	IfStatement	"if ( ! strcmp ( ""bochs"" , d -> plugin -> name ) )"		1211817	0					
ANR	1211858	Condition	"! strcmp ( ""bochs"" , d -> plugin -> name )"	342:6:8893:8926	1211817	0	True				
ANR	1211859	UnaryOperationExpression	"! strcmp ( ""bochs"" , d -> plugin -> name )"		1211817	0					
ANR	1211860	UnaryOperator	!		1211817	0					
ANR	1211861	CallExpression	"strcmp ( ""bochs"" , d -> plugin -> name )"		1211817	1					
ANR	1211862	Callee	strcmp		1211817	0					
ANR	1211863	Identifier	strcmp		1211817	0					
ANR	1211864	ArgumentList	"""bochs"""		1211817	1					
ANR	1211865	Argument	"""bochs"""		1211817	0					
ANR	1211866	PrimaryExpression	"""bochs"""		1211817	0					
ANR	1211867	Argument	d -> plugin -> name		1211817	1					
ANR	1211868	PtrMemberAccess	d -> plugin -> name		1211817	0					
ANR	1211869	PtrMemberAccess	d -> plugin		1211817	0					
ANR	1211870	Identifier	d		1211817	0					
ANR	1211871	Identifier	plugin		1211817	1					
ANR	1211872	Identifier	name		1211817	1					
ANR	1211873	CompoundStatement		7:3:188:209	1211817	1					
ANR	1211874	IdentifierDeclStatement	RIOBochs * g = d -> data ;	343:3:8934:8955	1211817	0	True				
ANR	1211875	IdentifierDecl	* g = d -> data		1211817	0					
ANR	1211876	IdentifierDeclType	RIOBochs *		1211817	0					
ANR	1211877	Identifier	g		1211817	1					
ANR	1211878	AssignmentExpression	* g = d -> data		1211817	2		=			
ANR	1211879	Identifier	g		1211817	0					
ANR	1211880	PtrMemberAccess	d -> data		1211817	1					
ANR	1211881	Identifier	d		1211817	0					
ANR	1211882	Identifier	data		1211817	1					
ANR	1211883	IfStatement	if ( ( desc = & g -> desc ) )		1211817	1					
ANR	1211884	Condition	desc = & g -> desc	346:7:9041:9059	1211817	0	True				
ANR	1211885	AssignmentExpression	desc = & g -> desc		1211817	0		=			
ANR	1211886	Identifier	desc		1211817	0					
ANR	1211887	UnaryOperationExpression	& g -> desc		1211817	1					
ANR	1211888	UnaryOperator	&		1211817	0					
ANR	1211889	PtrMemberAccess	g -> desc		1211817	1					
ANR	1211890	Identifier	g		1211817	0					
ANR	1211891	Identifier	desc		1211817	1					
ANR	1211892	CompoundStatement		10:28:316:316	1211817	1					
ANR	1211893	ExpressionStatement	"eprintf ( ""bochs attach: ok\\n"" )"	347:4:9068:9097	1211817	0	True				
ANR	1211894	CallExpression	"eprintf ( ""bochs attach: ok\\n"" )"		1211817	0					
ANR	1211895	Callee	eprintf		1211817	0					
ANR	1211896	Identifier	eprintf		1211817	0					
ANR	1211897	ArgumentList	"""bochs attach: ok\\n"""		1211817	1					
ANR	1211898	Argument	"""bochs attach: ok\\n"""		1211817	0					
ANR	1211899	PrimaryExpression	"""bochs attach: ok\\n"""		1211817	0					
ANR	1211900	ExpressionStatement	saveRegs = malloc ( 1024 )	348:4:9103:9126	1211817	1	True				
ANR	1211901	AssignmentExpression	saveRegs = malloc ( 1024 )		1211817	0		=			
ANR	1211902	Identifier	saveRegs		1211817	0					
ANR	1211903	CallExpression	malloc ( 1024 )		1211817	1					
ANR	1211904	Callee	malloc		1211817	0					
ANR	1211905	Identifier	malloc		1211817	0					
ANR	1211906	ArgumentList	1024		1211817	1					
ANR	1211907	Argument	1024		1211817	0					
ANR	1211908	PrimaryExpression	1024		1211817	0					
ANR	1211909	ExpressionStatement	bCapturaRegs = true	349:4:9132:9151	1211817	2	True				
ANR	1211910	AssignmentExpression	bCapturaRegs = true		1211817	0		=			
ANR	1211911	Identifier	bCapturaRegs		1211817	0					
ANR	1211912	Identifier	true		1211817	1					
ANR	1211913	ExpressionStatement	bStep = false	350:4:9157:9170	1211817	3	True				
ANR	1211914	AssignmentExpression	bStep = false		1211817	0		=			
ANR	1211915	Identifier	bStep		1211817	0					
ANR	1211916	Identifier	false		1211817	1					
ANR	1211917	ExpressionStatement	bBreak = false	351:4:9176:9190	1211817	4	True				
ANR	1211918	AssignmentExpression	bBreak = false		1211817	0		=			
ANR	1211919	Identifier	bBreak		1211817	0					
ANR	1211920	Identifier	false		1211817	1					
ANR	1211921	ReturnStatement	return true ;	355:1:9205:9216	1211817	3	True				
ANR	1211922	Identifier	true		1211817	0					
ANR	1211923	ReturnType	static int		1211817	1					
ANR	1211924	Identifier	r_debug_bochs_attach		1211817	2					
ANR	1211925	ParameterList	"RDebug * dbg , int pid"		1211817	3					
ANR	1211926	Parameter	RDebug * dbg	337:32:8723:8733	1211817	0	True				
ANR	1211927	ParameterType	RDebug *		1211817	0					
ANR	1211928	Identifier	dbg		1211817	1					
ANR	1211929	Parameter	int pid	337:45:8736:8742	1211817	1	True				
ANR	1211930	ParameterType	int		1211817	0					
ANR	1211931	Identifier	pid		1211817	1					
ANR	1211932	CFGEntryNode	ENTRY		1211817		True				
ANR	1211933	CFGExitNode	EXIT		1211817		True				
ANR	1211934	Symbol	dbg -> iob . io		1211817						
ANR	1211935	Symbol	bStep		1211817						
ANR	1211936	Symbol	* d -> plugin		1211817						
ANR	1211937	Symbol	saveRegs		1211817						
ANR	1211938	Symbol	pid		1211817						
ANR	1211939	Symbol	d -> plugin -> name		1211817						
ANR	1211940	Symbol	dbg -> iob . io -> desc		1211817						
ANR	1211941	Symbol	bCapturaRegs		1211817						
ANR	1211942	Symbol	* dbg -> iob		1211817						
ANR	1211943	Symbol	strcmp		1211817						
ANR	1211944	Symbol	malloc		1211817						
ANR	1211945	Symbol	dbg -> iob		1211817						
ANR	1211946	Symbol	d		1211817						
ANR	1211947	Symbol	d -> plugin		1211817						
ANR	1211948	Symbol	* * d		1211817						
ANR	1211949	Symbol	g		1211817						
ANR	1211950	Symbol	dbg		1211817						
ANR	1211951	Symbol	false		1211817						
ANR	1211952	Symbol	& g -> desc		1211817						
ANR	1211953	Symbol	d -> data		1211817						
ANR	1211954	Symbol	* dbg		1211817						
ANR	1211955	Symbol	* dbg -> iob . io		1211817						
ANR	1211956	Symbol	* d		1211817						
ANR	1211957	Symbol	bBreak		1211817						
ANR	1211958	Symbol	dbg -> swstep		1211817						
ANR	1211959	Symbol	true		1211817						
ANR	1211960	Symbol	* * dbg		1211817						
ANR	1211961	Symbol	desc		1211817						
ANR	1211962	Function	r_debug_bochs_detach	358:0:9221:9341							
ANR	1211963	FunctionDef	"r_debug_bochs_detach (RDebug * dbg , int pid)"		1211962	0					
ANR	1211964	CompoundStatement		358:54:9275:9341	1211962	0					
ANR	1211965	ExpressionStatement	free ( saveRegs )	360:1:9310:9325	1211962	0	True				
ANR	1211966	CallExpression	free ( saveRegs )		1211962	0					
ANR	1211967	Callee	free		1211962	0					
ANR	1211968	Identifier	free		1211962	0					
ANR	1211969	ArgumentList	saveRegs		1211962	1					
ANR	1211970	Argument	saveRegs		1211962	0					
ANR	1211971	Identifier	saveRegs		1211962	0					
ANR	1211972	ReturnStatement	return true ;	361:1:9328:9339	1211962	1	True				
ANR	1211973	Identifier	true		1211962	0					
ANR	1211974	ReturnType	static int		1211962	1					
ANR	1211975	Identifier	r_debug_bochs_detach		1211962	2					
ANR	1211976	ParameterList	"RDebug * dbg , int pid"		1211962	3					
ANR	1211977	Parameter	RDebug * dbg	358:32:9253:9263	1211962	0	True				
ANR	1211978	ParameterType	RDebug *		1211962	0					
ANR	1211979	Identifier	dbg		1211962	1					
ANR	1211980	Parameter	int pid	358:45:9266:9272	1211962	1	True				
ANR	1211981	ParameterType	int		1211962	0					
ANR	1211982	Identifier	pid		1211962	1					
ANR	1211983	CFGEntryNode	ENTRY		1211962		True				
ANR	1211984	CFGExitNode	EXIT		1211962		True				
ANR	1211985	Symbol	dbg		1211962						
ANR	1211986	Symbol	true		1211962						
ANR	1211987	Symbol	saveRegs		1211962						
ANR	1211988	Symbol	pid		1211962						
ANR	1211989	Function	r_debug_bochs_reg_profile	364:0:9344:14047							
ANR	1211990	FunctionDef	r_debug_bochs_reg_profile (RDebug * dbg)		1211989	0					
ANR	1211991	CompoundStatement		364:58:9402:14047	1211989	0					
ANR	1211992	IdentifierDeclStatement	int bits = dbg -> anal -> bits ;	365:1:9405:9431	1211989	0	True				
ANR	1211993	IdentifierDecl	bits = dbg -> anal -> bits		1211989	0					
ANR	1211994	IdentifierDeclType	int		1211989	0					
ANR	1211995	Identifier	bits		1211989	1					
ANR	1211996	AssignmentExpression	bits = dbg -> anal -> bits		1211989	2		=			
ANR	1211997	Identifier	bits		1211989	0					
ANR	1211998	PtrMemberAccess	dbg -> anal -> bits		1211989	1					
ANR	1211999	PtrMemberAccess	dbg -> anal		1211989	0					
ANR	1212000	Identifier	dbg		1211989	0					
ANR	1212001	Identifier	anal		1211989	1					
ANR	1212002	Identifier	bits		1211989	1					
ANR	1212003	IfStatement	if ( bits == 16 || bits == 32 || bits == 64 )		1211989	1					
ANR	1212004	Condition	bits == 16 || bits == 32 || bits == 64	367:5:9439:9476	1211989	0	True				
ANR	1212005	OrExpression	bits == 16 || bits == 32 || bits == 64		1211989	0		||			
ANR	1212006	EqualityExpression	bits == 16		1211989	0		==			
ANR	1212007	Identifier	bits		1211989	0					
ANR	1212008	PrimaryExpression	16		1211989	1					
ANR	1212009	OrExpression	bits == 32 || bits == 64		1211989	1		||			
ANR	1212010	EqualityExpression	bits == 32		1211989	0		==			
ANR	1212011	Identifier	bits		1211989	0					
ANR	1212012	PrimaryExpression	32		1211989	1					
ANR	1212013	EqualityExpression	bits == 64		1211989	1		==			
ANR	1212014	Identifier	bits		1211989	0					
ANR	1212015	PrimaryExpression	64		1211989	1					
ANR	1212016	CompoundStatement		4:45:76:76	1211989	1					
ANR	1212017	Statement	return	368:2:9483:9488	1211989	0	True				
ANR	1212018	Statement	strdup	368:9:9490:9495	1211989	1	True				
ANR	1212019	Statement	(	368:16:9497:9497	1211989	2	True				
ANR	1212020	Statement	"""=PC\\tcsip\\n"""	369:4:9503:9514	1211989	3	True				
ANR	1212021	Statement	"""=SP\\trsp\\n"""	370:4:9520:9530	1211989	4	True				
ANR	1212022	Statement	"""=BP\\trbp\\n"""	371:4:9536:9546	1211989	5	True				
ANR	1212023	Statement	"""=A0\\trax\\n"""	372:4:9552:9562	1211989	6	True				
ANR	1212024	Statement	"""=A1\\trbx\\n"""	373:4:9568:9578	1211989	7	True				
ANR	1212025	Statement	"""=A2\\trcx\\n"""	374:4:9584:9594	1211989	8	True				
ANR	1212026	Statement	"""=A3\\trdi\\n"""	375:4:9600:9610	1211989	9	True				
ANR	1212027	Statement	"""seg\\tes\\t2\\t0x038\\t0\\t\\n"""	377:4:9617:9637	1211989	10	True				
ANR	1212028	Statement	"""seg\\tcs\\t2\\t0x03A\\t0\\t\\n"""	378:4:9643:9663	1211989	11	True				
ANR	1212029	Statement	"""seg\\tss\\t2\\t0x03C\\t0\\t\\n"""	379:4:9669:9689	1211989	12	True				
ANR	1212030	Statement	"""seg\\tds\\t2\\t0x03E\\t0\\t\\n"""	380:4:9695:9715	1211989	13	True				
ANR	1212031	Statement	"""seg\\tfs\\t2\\t0x040\\t0\\t\\n"""	381:4:9721:9741	1211989	14	True				
ANR	1212032	Statement	"""seg\\tgs\\t2\\t0x042\\t0\\t\\n"""	382:4:9747:9767	1211989	15	True				
ANR	1212033	Statement	"""gpr\\trax\\t8\\t0x078\\t0\\t\\n"""	384:4:9774:9795	1211989	16	True				
ANR	1212034	Statement	"""gpr\\teax\\t4\\t0x078\\t0\\t\\n"""	385:4:9801:9822	1211989	17	True				
ANR	1212035	Statement	"""gpr\\tax\\t2\\t0x078\\t0\\t\\n"""	386:4:9828:9848	1211989	18	True				
ANR	1212036	Statement	"""gpr\\tal\\t1\\t0x078\\t0\\t\\n"""	387:4:9854:9874	1211989	19	True				
ANR	1212037	Statement	"""gpr\\trcx\\t8\\t0x080\\t0\\t\\n"""	388:4:9880:9901	1211989	20	True				
ANR	1212038	Statement	"""gpr\\tecx\\t4\\t0x080\\t0\\t\\n"""	389:4:9907:9928	1211989	21	True				
ANR	1212039	Statement	"""gpr\\tcx\\t2\\t0x080\\t0\\t\\n"""	390:4:9934:9954	1211989	22	True				
ANR	1212040	Statement	"""gpr\\tcl\\t1\\t0x078\\t0\\t\\n"""	391:4:9960:9980	1211989	23	True				
ANR	1212041	Statement	"""gpr\\trdx\\t8\\t0x088\\t0\\t\\n"""	392:4:9986:10007	1211989	24	True				
ANR	1212042	Statement	"""gpr\\tedx\\t4\\t0x088\\t0\\t\\n"""	393:4:10013:10034	1211989	25	True				
ANR	1212043	Statement	"""gpr\\tdx\\t2\\t0x088\\t0\\t\\n"""	394:4:10040:10060	1211989	26	True				
ANR	1212044	Statement	"""gpr\\tdl\\t1\\t0x088\\t0\\t\\n"""	395:4:10066:10086	1211989	27	True				
ANR	1212045	Statement	"""gpr\\trbx\\t8\\t0x090\\t0\\t\\n"""	396:4:10092:10113	1211989	28	True				
ANR	1212046	Statement	"""gpr\\tebx\\t4\\t0x090\\t0\\t\\n"""	397:4:10119:10140	1211989	29	True				
ANR	1212047	Statement	"""gpr\\tbx\\t2\\t0x090\\t0\\t\\n"""	398:4:10146:10166	1211989	30	True				
ANR	1212048	Statement	"""gpr\\tbl\\t1\\t0x090\\t0\\t\\n"""	399:4:10172:10192	1211989	31	True				
ANR	1212049	Statement	"""gpr\\trsp\\t8\\t0x098\\t0\\t\\n"""	400:4:10198:10219	1211989	32	True				
ANR	1212050	Statement	"""gpr\\tesp\\t4\\t0x098\\t0\\t\\n"""	401:4:10225:10246	1211989	33	True				
ANR	1212051	Statement	"""gpr\\tsp\\t2\\t0x098\\t0\\t\\n"""	402:4:10252:10272	1211989	34	True				
ANR	1212052	Statement	"""gpr\\tspl\\t1\\t0x098\\t0\\t\\n"""	403:4:10278:10299	1211989	35	True				
ANR	1212053	Statement	"""gpr\\trbp\\t8\\t0x0A0\\t0\\t\\n"""	404:4:10305:10326	1211989	36	True				
ANR	1212054	Statement	"""gpr\\tebp\\t4\\t0x0A0\\t0\\t\\n"""	405:4:10332:10353	1211989	37	True				
ANR	1212055	Statement	"""gpr\\tbp\\t2\\t0x0A0\\t0\\t\\n"""	406:4:10359:10379	1211989	38	True				
ANR	1212056	Statement	"""gpr\\tbpl\\t1\\t0x0A0\\t0\\t\\n"""	407:4:10385:10406	1211989	39	True				
ANR	1212057	Statement	"""gpr\\trsi\\t8\\t0x0A8\\t0\\t\\n"""	408:4:10412:10433	1211989	40	True				
ANR	1212058	Statement	"""gpr\\tesi\\t4\\t0x0A8\\t0\\t\\n"""	409:4:10439:10460	1211989	41	True				
ANR	1212059	Statement	"""gpr\\tsi\\t2\\t0x0A8\\t0\\t\\n"""	410:4:10466:10486	1211989	42	True				
ANR	1212060	Statement	"""gpr\\tsil\\t1\\t0x0A8\\t0\\t\\n"""	411:4:10492:10513	1211989	43	True				
ANR	1212061	Statement	"""gpr\\trdi\\t8\\t0x0B0\\t0\\t\\n"""	412:4:10519:10540	1211989	44	True				
ANR	1212062	Statement	"""gpr\\tedi\\t4\\t0x0B0\\t0\\t\\n"""	413:4:10546:10567	1211989	45	True				
ANR	1212063	Statement	"""gpr\\tdi\\t2\\t0x0B0\\t0\\t\\n"""	414:4:10573:10593	1211989	46	True				
ANR	1212064	Statement	"""gpr\\tdil\\t1\\t0x0B0\\t0\\t\\n"""	415:4:10599:10620	1211989	47	True				
ANR	1212065	Statement	"""gpr\\tr8\\t8\\t0x0B8\\t0\\t\\n"""	416:4:10626:10646	1211989	48	True				
ANR	1212066	Statement	"""gpr\\tr8d\\t4\\t0x0B8\\t0\\t\\n"""	417:4:10652:10673	1211989	49	True				
ANR	1212067	Statement	"""gpr\\tr8w\\t2\\t0x0B8\\t0\\t\\n"""	418:4:10679:10700	1211989	50	True				
ANR	1212068	Statement	"""gpr\\tr8b\\t1\\t0x0B8\\t0\\t\\n"""	419:4:10706:10727	1211989	51	True				
ANR	1212069	Statement	"""gpr\\tr9\\t8\\t0x0C0\\t0\\t\\n"""	420:4:10733:10753	1211989	52	True				
ANR	1212070	Statement	"""gpr\\tr9d\\t4\\t0x0C0\\t0\\t\\n"""	421:4:10759:10780	1211989	53	True				
ANR	1212071	Statement	"""gpr\\tr9w\\t2\\t0x0C0\\t0\\t\\n"""	422:4:10786:10807	1211989	54	True				
ANR	1212072	Statement	"""gpr\\tr9b\\t1\\t0x0C0\\t0\\t\\n"""	423:4:10813:10834	1211989	55	True				
ANR	1212073	Statement	"""gpr\\tr10\\t8\\t0x0C8\\t0\\t\\n"""	424:4:10840:10861	1211989	56	True				
ANR	1212074	Statement	"""gpr\\tr10d\\t4\\t0x0C8\\t0\\t\\n"""	425:4:10867:10889	1211989	57	True				
ANR	1212075	Statement	"""gpr\\tr10w\\t2\\t0x0C8\\t0\\t\\n"""	426:4:10895:10917	1211989	58	True				
ANR	1212076	Statement	"""gpr\\tr10b\\t1\\t0x0C8\\t0\\t\\n"""	427:4:10923:10945	1211989	59	True				
ANR	1212077	Statement	"""gpr\\tr11\\t8\\t0x0D0\\t0\\t\\n"""	428:4:10951:10972	1211989	60	True				
ANR	1212078	Statement	"""gpr\\tr11d\\t4\\t0x0D0\\t0\\t\\n"""	429:4:10978:11000	1211989	61	True				
ANR	1212079	Statement	"""gpr\\tr11w\\t2\\t0x0D0\\t0\\t\\n"""	430:4:11006:11028	1211989	62	True				
ANR	1212080	Statement	"""gpr\\tr11b\\t1\\t0x0D0\\t0\\t\\n"""	431:4:11034:11056	1211989	63	True				
ANR	1212081	Statement	"""gpr\\tr12\\t8\\t0x0D8\\t0\\t\\n"""	432:4:11062:11083	1211989	64	True				
ANR	1212082	Statement	"""gpr\\tr12d\\t4\\t0x0D8\\t0\\t\\n"""	433:4:11089:11111	1211989	65	True				
ANR	1212083	Statement	"""gpr\\tr12w\\t2\\t0x0D8\\t0\\t\\n"""	434:4:11117:11139	1211989	66	True				
ANR	1212084	Statement	"""gpr\\tr12b\\t1\\t0x0D8\\t0\\t\\n"""	435:4:11145:11167	1211989	67	True				
ANR	1212085	Statement	"""gpr\\tr13\\t8\\t0x0E0\\t0\\t\\n"""	436:4:11173:11194	1211989	68	True				
ANR	1212086	Statement	"""gpr\\tr13d\\t4\\t0x0E0\\t0\\t\\n"""	437:4:11200:11222	1211989	69	True				
ANR	1212087	Statement	"""gpr\\tr13w\\t2\\t0x0E0\\t0\\t\\n"""	438:4:11228:11250	1211989	70	True				
ANR	1212088	Statement	"""gpr\\tr13b\\t1\\t0x0E0\\t0\\t\\n"""	439:4:11256:11278	1211989	71	True				
ANR	1212089	Statement	"""gpr\\tr14\\t8\\t0x0E8\\t0\\t\\n"""	440:4:11284:11305	1211989	72	True				
ANR	1212090	Statement	"""gpr\\tr14d\\t4\\t0x0E8\\t0\\t\\n"""	441:4:11311:11333	1211989	73	True				
ANR	1212091	Statement	"""gpr\\tr14w\\t2\\t0x0E8\\t0\\t\\n"""	442:4:11339:11361	1211989	74	True				
ANR	1212092	Statement	"""gpr\\tr14b\\t1\\t0x0E8\\t0\\t\\n"""	443:4:11367:11389	1211989	75	True				
ANR	1212093	Statement	"""gpr\\tr15\\t8\\t0x0F0\\t0\\t\\n"""	444:4:11395:11416	1211989	76	True				
ANR	1212094	Statement	"""gpr\\tr15d\\t4\\t0x0F0\\t0\\t\\n"""	445:4:11422:11444	1211989	77	True				
ANR	1212095	Statement	"""gpr\\tr15w\\t2\\t0x0F0\\t0\\t\\n"""	446:4:11450:11472	1211989	78	True				
ANR	1212096	Statement	"""gpr\\tr15b\\t1\\t0x0F0\\t0\\t\\n"""	447:4:11478:11500	1211989	79	True				
ANR	1212097	Statement	"""gpr\\trip\\t8\\t0x0F8\\t0\\t\\n"""	448:4:11506:11527	1211989	80	True				
ANR	1212098	Statement	"""gpr\\teip\\t4\\t0x0F8\\t0\\t\\n"""	449:4:11533:11554	1211989	81	True				
ANR	1212099	Statement	"""gpr\\tcsip\\t8\\t0x000\\t0\\t\\n"""	450:4:11560:11582	1211989	82	True				
ANR	1212100	Statement	)	541:4:14027:14027	1211989	83	True				
ANR	1212101	ExpressionStatement		541:5:14028:14028	1211989	84	True				
ANR	1212102	ReturnStatement	return NULL ;	543:1:14034:14045	1211989	2	True				
ANR	1212103	Identifier	NULL		1211989	0					
ANR	1212104	ReturnType	static const char *		1211989	1					
ANR	1212105	Identifier	r_debug_bochs_reg_profile		1211989	2					
ANR	1212106	ParameterList	RDebug * dbg		1211989	3					
ANR	1212107	Parameter	RDebug * dbg	364:45:9389:9399	1211989	0	True				
ANR	1212108	ParameterType	RDebug *		1211989	0					
ANR	1212109	Identifier	dbg		1211989	1					
ANR	1212110	CFGEntryNode	ENTRY		1211989		True				
ANR	1212111	CFGExitNode	EXIT		1211989		True				
ANR	1212112	Symbol	* dbg -> anal		1211989						
ANR	1212113	Symbol	dbg -> anal -> bits		1211989						
ANR	1212114	Symbol	NULL		1211989						
ANR	1212115	Symbol	dbg -> anal		1211989						
ANR	1212116	Symbol	dbg		1211989						
ANR	1212117	Symbol	bits		1211989						
ANR	1212118	Symbol	* dbg		1211989						
ANR	1212119	Symbol	* * dbg		1211989						
ANR	1212120	DeclStmt									
ANR	1212121	Decl							RDebugPlugin	RDebugPlugin	r_debug_plugin_bochs
ANR	1212122	DeclStmt									
ANR	1212123	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
