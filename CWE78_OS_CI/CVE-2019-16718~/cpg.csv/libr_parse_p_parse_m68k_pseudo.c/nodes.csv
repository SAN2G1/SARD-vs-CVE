command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5021931	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_m68k_pseudo.c								
ANR	5021932	Function	can_replace	13:0:209:519							
ANR	5021933	FunctionDef	"can_replace (const char * str , int idx , int max_operands)"		5021932	0					
ANR	5021934	CompoundStatement		13:68:277:519	5021932	0					
ANR	5021935	IfStatement	if ( str [ idx ] > '9' || str [ idx ] < '1' )		5021932	0					
ANR	5021936	Condition	str [ idx ] > '9' || str [ idx ] < '1'	14:5:284:315	5021932	0	True				
ANR	5021937	OrExpression	str [ idx ] > '9' || str [ idx ] < '1'		5021932	0		||			
ANR	5021938	RelationalExpression	str [ idx ] > '9'		5021932	0		>			
ANR	5021939	ArrayIndexing	str [ idx ]		5021932	0					
ANR	5021940	Identifier	str		5021932	0					
ANR	5021941	Identifier	idx		5021932	1					
ANR	5021942	PrimaryExpression	'9'		5021932	1					
ANR	5021943	RelationalExpression	str [ idx ] < '1'		5021932	1		<			
ANR	5021944	ArrayIndexing	str [ idx ]		5021932	0					
ANR	5021945	Identifier	str		5021932	0					
ANR	5021946	Identifier	idx		5021932	1					
ANR	5021947	PrimaryExpression	'1'		5021932	1					
ANR	5021948	CompoundStatement		2:39:40:40	5021932	1					
ANR	5021949	ReturnStatement	return false ;	15:2:322:334	5021932	0	True				
ANR	5021950	Identifier	false		5021932	0					
ANR	5021951	IfStatement	if ( str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1' )		5021932	1					
ANR	5021952	Condition	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'	17:5:344:411	5021932	0	True				
ANR	5021953	AndExpression	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5021932	0		&&			
ANR	5021954	EqualityExpression	str [ idx + 1 ] != x00		5021932	0		!=			
ANR	5021955	ArrayIndexing	str [ idx + 1 ]		5021932	0					
ANR	5021956	Identifier	str		5021932	0					
ANR	5021957	AdditiveExpression	idx + 1		5021932	1		+			
ANR	5021958	Identifier	idx		5021932	0					
ANR	5021959	PrimaryExpression	1		5021932	1					
ANR	5021960	Identifier	x00		5021932	1					
ANR	5021961	AndExpression	str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5021932	1		&&			
ANR	5021962	RelationalExpression	str [ idx + 1 ] <= '9'		5021932	0		<=			
ANR	5021963	ArrayIndexing	str [ idx + 1 ]		5021932	0					
ANR	5021964	Identifier	str		5021932	0					
ANR	5021965	AdditiveExpression	idx + 1		5021932	1		+			
ANR	5021966	Identifier	idx		5021932	0					
ANR	5021967	PrimaryExpression	1		5021932	1					
ANR	5021968	PrimaryExpression	'9'		5021932	1					
ANR	5021969	RelationalExpression	str [ idx + 1 ] >= '1'		5021932	1		>=			
ANR	5021970	ArrayIndexing	str [ idx + 1 ]		5021932	0					
ANR	5021971	Identifier	str		5021932	0					
ANR	5021972	AdditiveExpression	idx + 1		5021932	1		+			
ANR	5021973	Identifier	idx		5021932	0					
ANR	5021974	PrimaryExpression	1		5021932	1					
ANR	5021975	PrimaryExpression	'1'		5021932	1					
ANR	5021976	CompoundStatement		5:75:136:136	5021932	1					
ANR	5021977	ReturnStatement	return false ;	18:2:418:430	5021932	0	True				
ANR	5021978	Identifier	false		5021932	0					
ANR	5021979	IfStatement	if ( ( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands )		5021932	2					
ANR	5021980	Condition	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands	20:5:440:481	5021932	0	True				
ANR	5021981	RelationalExpression	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands		5021932	0		>			
ANR	5021982	CastExpression	( int ) ( ( int ) str [ idx ] - 0x30 )		5021932	0					
ANR	5021983	CastTarget	int		5021932	0					
ANR	5021984	AdditiveExpression	( int ) str [ idx ] - 0x30		5021932	1		-			
ANR	5021985	CastExpression	( int ) str [ idx ]		5021932	0					
ANR	5021986	CastTarget	int		5021932	0					
ANR	5021987	ArrayIndexing	str [ idx ]		5021932	1					
ANR	5021988	Identifier	str		5021932	0					
ANR	5021989	Identifier	idx		5021932	1					
ANR	5021990	PrimaryExpression	0x30		5021932	1					
ANR	5021991	Identifier	max_operands		5021932	1					
ANR	5021992	CompoundStatement		8:49:206:206	5021932	1					
ANR	5021993	ReturnStatement	return false ;	21:2:488:500	5021932	0	True				
ANR	5021994	Identifier	false		5021932	0					
ANR	5021995	ReturnStatement	return true ;	23:1:506:517	5021932	3	True				
ANR	5021996	Identifier	true		5021932	0					
ANR	5021997	ReturnType	static bool		5021932	1					
ANR	5021998	Identifier	can_replace		5021932	2					
ANR	5021999	ParameterList	"const char * str , int idx , int max_operands"		5021932	3					
ANR	5022000	Parameter	const char * str	13:24:233:247	5021932	0	True				
ANR	5022001	ParameterType	const char *		5021932	0					
ANR	5022002	Identifier	str		5021932	1					
ANR	5022003	Parameter	int idx	13:41:250:256	5021932	1	True				
ANR	5022004	ParameterType	int		5021932	0					
ANR	5022005	Identifier	idx		5021932	1					
ANR	5022006	Parameter	int max_operands	13:50:259:274	5021932	2	True				
ANR	5022007	ParameterType	int		5021932	0					
ANR	5022008	Identifier	max_operands		5021932	1					
ANR	5022009	CFGEntryNode	ENTRY		5021932		True				
ANR	5022010	CFGExitNode	EXIT		5021932		True				
ANR	5022011	Symbol	str		5021932						
ANR	5022012	Symbol	max_operands		5021932						
ANR	5022013	Symbol	* idx		5021932						
ANR	5022014	Symbol	false		5021932						
ANR	5022015	Symbol	true		5021932						
ANR	5022016	Symbol	x00		5021932						
ANR	5022017	Symbol	* str		5021932						
ANR	5022018	Symbol	idx		5021932						
ANR	5022019	Function	replace	26:0:522:2206							
ANR	5022020	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5022019	0					
ANR	5022021	CompoundStatement		26:63:585:2206	5022019	0					
ANR	5022022	IdentifierDeclStatement	"int i , j , k ;"	27:1:588:597	5022019	0	True				
ANR	5022023	IdentifierDecl	i		5022019	0					
ANR	5022024	IdentifierDeclType	int		5022019	0					
ANR	5022025	Identifier	i		5022019	1					
ANR	5022026	IdentifierDecl	j		5022019	1					
ANR	5022027	IdentifierDeclType	int		5022019	0					
ANR	5022028	Identifier	j		5022019	1					
ANR	5022029	IdentifierDecl	k		5022019	2					
ANR	5022030	IdentifierDeclType	int		5022019	0					
ANR	5022031	Identifier	k		5022019	1					
ANR	5022032	ClassDefStatement	"struct { char * op ; char * str ; int max_operands ; } ops [ ] = { { ""move"" , ""2 = 1"" , 2 } , { ""movea"" , ""2 = 1"" , 2 } , { ""moveq"" , ""2 = 1"" , 2 } , { ""movem"" , ""2 = 1"" , 2 } , { ""lea"" , ""2 = 1"" , 2 } , { ""bsr"" , ""1()"" , 1 } , { ""jsr"" , ""1()"" , 1 } , { ""beq"" , ""if (==) jmp 1"" , 1 } , { ""blt"" , ""if (<) jmp 1"" , 1 } , { ""ble"" , ""if (<=) jmp 1"" , 1 } , { ""bgt"" , ""if (>) jmp 1"" , 1 } , { ""bge"" , ""if (>=) jmp 1"" , 1 } , { ""bcs"" , ""if (cs) jmp 1"" , 1 } , { ""bcc"" , ""if (cc) jmp 1"" , 1 } , { ""bra"" , ""jmp 1"" , 1 } , { ""jmp"" , ""jmp 1"" , 1 } , { ""rts"" , ""ret"" , 2 } , { ""btst"" , ""1 == 2"" , 2 } , { ""cmp"" , ""1 == 2"" , 2 } , { ""cmpi"" , ""2 == 1"" , 2 } , { ""add"" , ""1 += 2"" , 2 } , { ""addi"" , ""1 += 2"" , 2 } , { ""adda"" , ""1 += 2"" , 2 } , { ""sub"" , ""1 += 2"" , 2 } , { ""subq"" , ""1 += 2"" , 2 } , { ""tst"" , ""1 == 2"" , 2 } , { ""ori"" , ""2 |= 1"" , 2 } , { ""or"" , ""2 |= 1"" , 2 } , { ""lsr"" , ""2 >>= 1"" , 2 } , { ""lsl"" , ""2 <<= 1"" , 2 } , { ""andi"" , ""2 &= 1"" , 2 } , { ""nop"" , """" } , { NULL } } ;"	28:1:600:1551	5022019	1	True				
ANR	5022033	IdentifierDecl	"ops [ ] = { { ""move"" , ""2 = 1"" , 2 } , { ""movea"" , ""2 = 1"" , 2 } , { ""moveq"" , ""2 = 1"" , 2 } , { ""movem"" , ""2 = 1"" , 2 } , { ""lea"" , ""2 = 1"" , 2 } , { ""bsr"" , ""1()"" , 1 } , { ""jsr"" , ""1()"" , 1 } , { ""beq"" , ""if (==) jmp 1"" , 1 } , { ""blt"" , ""if (<) jmp 1"" , 1 } , { ""ble"" , ""if (<=) jmp 1"" , 1 } , { ""bgt"" , ""if (>) jmp 1"" , 1 } , { ""bge"" , ""if (>=) jmp 1"" , 1 } , { ""bcs"" , ""if (cs) jmp 1"" , 1 } , { ""bcc"" , ""if (cc) jmp 1"" , 1 } , { ""bra"" , ""jmp 1"" , 1 } , { ""jmp"" , ""jmp 1"" , 1 } , { ""rts"" , ""ret"" , 2 } , { ""btst"" , ""1 == 2"" , 2 } , { ""cmp"" , ""1 == 2"" , 2 } , { ""cmpi"" , ""2 == 1"" , 2 } , { ""add"" , ""1 += 2"" , 2 } , { ""addi"" , ""1 += 2"" , 2 } , { ""adda"" , ""1 += 2"" , 2 } , { ""sub"" , ""1 += 2"" , 2 } , { ""subq"" , ""1 += 2"" , 2 } , { ""tst"" , ""1 == 2"" , 2 } , { ""ori"" , ""2 |= 1"" , 2 } , { ""or"" , ""2 |= 1"" , 2 } , { ""lsr"" , ""2 >>= 1"" , 2 } , { ""lsl"" , ""2 <<= 1"" , 2 } , { ""andi"" , ""2 &= 1"" , 2 } , { ""nop"" , """" } , { NULL } }"		5022019	0					
ANR	5022034	IdentifierDeclType	 [ ]		5022019	0					
ANR	5022035	Identifier	ops		5022019	1					
ANR	5022036	AssignmentExpression	"ops [ ] = { { ""move"" , ""2 = 1"" , 2 } , { ""movea"" , ""2 = 1"" , 2 } , { ""moveq"" , ""2 = 1"" , 2 } , { ""movem"" , ""2 = 1"" , 2 } , { ""lea"" , ""2 = 1"" , 2 } , { ""bsr"" , ""1()"" , 1 } , { ""jsr"" , ""1()"" , 1 } , { ""beq"" , ""if (==) jmp 1"" , 1 } , { ""blt"" , ""if (<) jmp 1"" , 1 } , { ""ble"" , ""if (<=) jmp 1"" , 1 } , { ""bgt"" , ""if (>) jmp 1"" , 1 } , { ""bge"" , ""if (>=) jmp 1"" , 1 } , { ""bcs"" , ""if (cs) jmp 1"" , 1 } , { ""bcc"" , ""if (cc) jmp 1"" , 1 } , { ""bra"" , ""jmp 1"" , 1 } , { ""jmp"" , ""jmp 1"" , 1 } , { ""rts"" , ""ret"" , 2 } , { ""btst"" , ""1 == 2"" , 2 } , { ""cmp"" , ""1 == 2"" , 2 } , { ""cmpi"" , ""2 == 1"" , 2 } , { ""add"" , ""1 += 2"" , 2 } , { ""addi"" , ""1 += 2"" , 2 } , { ""adda"" , ""1 += 2"" , 2 } , { ""sub"" , ""1 += 2"" , 2 } , { ""subq"" , ""1 += 2"" , 2 } , { ""tst"" , ""1 == 2"" , 2 } , { ""ori"" , ""2 |= 1"" , 2 } , { ""or"" , ""2 |= 1"" , 2 } , { ""lsr"" , ""2 >>= 1"" , 2 } , { ""lsl"" , ""2 <<= 1"" , 2 } , { ""andi"" , ""2 &= 1"" , 2 } , { ""nop"" , """" } , { NULL } }"		5022019	2		=			
ANR	5022037	Identifier	ops		5022019	0					
ANR	5022038	InitializerList	"""move"""		5022019	1					
ANR	5022039	InitializerList	"""move"""		5022019	0					
ANR	5022040	PrimaryExpression	"""move"""		5022019	0					
ANR	5022041	PrimaryExpression	"""2 = 1"""		5022019	1					
ANR	5022042	PrimaryExpression	2		5022019	2					
ANR	5022043	InitializerList	"""movea"""		5022019	1					
ANR	5022044	PrimaryExpression	"""movea"""		5022019	0					
ANR	5022045	PrimaryExpression	"""2 = 1"""		5022019	1					
ANR	5022046	PrimaryExpression	2		5022019	2					
ANR	5022047	InitializerList	"""moveq"""		5022019	2					
ANR	5022048	PrimaryExpression	"""moveq"""		5022019	0					
ANR	5022049	PrimaryExpression	"""2 = 1"""		5022019	1					
ANR	5022050	PrimaryExpression	2		5022019	2					
ANR	5022051	InitializerList	"""movem"""		5022019	3					
ANR	5022052	PrimaryExpression	"""movem"""		5022019	0					
ANR	5022053	PrimaryExpression	"""2 = 1"""		5022019	1					
ANR	5022054	PrimaryExpression	2		5022019	2					
ANR	5022055	InitializerList	"""lea"""		5022019	4					
ANR	5022056	PrimaryExpression	"""lea"""		5022019	0					
ANR	5022057	PrimaryExpression	"""2 = 1"""		5022019	1					
ANR	5022058	PrimaryExpression	2		5022019	2					
ANR	5022059	InitializerList	"""bsr"""		5022019	5					
ANR	5022060	PrimaryExpression	"""bsr"""		5022019	0					
ANR	5022061	PrimaryExpression	"""1()"""		5022019	1					
ANR	5022062	PrimaryExpression	1		5022019	2					
ANR	5022063	InitializerList	"""jsr"""		5022019	6					
ANR	5022064	PrimaryExpression	"""jsr"""		5022019	0					
ANR	5022065	PrimaryExpression	"""1()"""		5022019	1					
ANR	5022066	PrimaryExpression	1		5022019	2					
ANR	5022067	InitializerList	"""beq"""		5022019	7					
ANR	5022068	PrimaryExpression	"""beq"""		5022019	0					
ANR	5022069	PrimaryExpression	"""if (==) jmp 1"""		5022019	1					
ANR	5022070	PrimaryExpression	1		5022019	2					
ANR	5022071	InitializerList	"""blt"""		5022019	8					
ANR	5022072	PrimaryExpression	"""blt"""		5022019	0					
ANR	5022073	PrimaryExpression	"""if (<) jmp 1"""		5022019	1					
ANR	5022074	PrimaryExpression	1		5022019	2					
ANR	5022075	InitializerList	"""ble"""		5022019	9					
ANR	5022076	PrimaryExpression	"""ble"""		5022019	0					
ANR	5022077	PrimaryExpression	"""if (<=) jmp 1"""		5022019	1					
ANR	5022078	PrimaryExpression	1		5022019	2					
ANR	5022079	InitializerList	"""bgt"""		5022019	10					
ANR	5022080	PrimaryExpression	"""bgt"""		5022019	0					
ANR	5022081	PrimaryExpression	"""if (>) jmp 1"""		5022019	1					
ANR	5022082	PrimaryExpression	1		5022019	2					
ANR	5022083	InitializerList	"""bge"""		5022019	11					
ANR	5022084	PrimaryExpression	"""bge"""		5022019	0					
ANR	5022085	PrimaryExpression	"""if (>=) jmp 1"""		5022019	1					
ANR	5022086	PrimaryExpression	1		5022019	2					
ANR	5022087	InitializerList	"""bcs"""		5022019	12					
ANR	5022088	PrimaryExpression	"""bcs"""		5022019	0					
ANR	5022089	PrimaryExpression	"""if (cs) jmp 1"""		5022019	1					
ANR	5022090	PrimaryExpression	1		5022019	2					
ANR	5022091	InitializerList	"""bcc"""		5022019	13					
ANR	5022092	PrimaryExpression	"""bcc"""		5022019	0					
ANR	5022093	PrimaryExpression	"""if (cc) jmp 1"""		5022019	1					
ANR	5022094	PrimaryExpression	1		5022019	2					
ANR	5022095	InitializerList	"""bra"""		5022019	14					
ANR	5022096	PrimaryExpression	"""bra"""		5022019	0					
ANR	5022097	PrimaryExpression	"""jmp 1"""		5022019	1					
ANR	5022098	PrimaryExpression	1		5022019	2					
ANR	5022099	InitializerList	"""jmp"""		5022019	15					
ANR	5022100	PrimaryExpression	"""jmp"""		5022019	0					
ANR	5022101	PrimaryExpression	"""jmp 1"""		5022019	1					
ANR	5022102	PrimaryExpression	1		5022019	2					
ANR	5022103	InitializerList	"""rts"""		5022019	16					
ANR	5022104	PrimaryExpression	"""rts"""		5022019	0					
ANR	5022105	PrimaryExpression	"""ret"""		5022019	1					
ANR	5022106	PrimaryExpression	2		5022019	2					
ANR	5022107	InitializerList	"""btst"""		5022019	17					
ANR	5022108	PrimaryExpression	"""btst"""		5022019	0					
ANR	5022109	PrimaryExpression	"""1 == 2"""		5022019	1					
ANR	5022110	PrimaryExpression	2		5022019	2					
ANR	5022111	InitializerList	"""cmp"""		5022019	18					
ANR	5022112	PrimaryExpression	"""cmp"""		5022019	0					
ANR	5022113	PrimaryExpression	"""1 == 2"""		5022019	1					
ANR	5022114	PrimaryExpression	2		5022019	2					
ANR	5022115	InitializerList	"""cmpi"""		5022019	19					
ANR	5022116	PrimaryExpression	"""cmpi"""		5022019	0					
ANR	5022117	PrimaryExpression	"""2 == 1"""		5022019	1					
ANR	5022118	PrimaryExpression	2		5022019	2					
ANR	5022119	InitializerList	"""add"""		5022019	20					
ANR	5022120	PrimaryExpression	"""add"""		5022019	0					
ANR	5022121	PrimaryExpression	"""1 += 2"""		5022019	1					
ANR	5022122	PrimaryExpression	2		5022019	2					
ANR	5022123	InitializerList	"""addi"""		5022019	21					
ANR	5022124	PrimaryExpression	"""addi"""		5022019	0					
ANR	5022125	PrimaryExpression	"""1 += 2"""		5022019	1					
ANR	5022126	PrimaryExpression	2		5022019	2					
ANR	5022127	InitializerList	"""adda"""		5022019	22					
ANR	5022128	PrimaryExpression	"""adda"""		5022019	0					
ANR	5022129	PrimaryExpression	"""1 += 2"""		5022019	1					
ANR	5022130	PrimaryExpression	2		5022019	2					
ANR	5022131	InitializerList	"""sub"""		5022019	23					
ANR	5022132	PrimaryExpression	"""sub"""		5022019	0					
ANR	5022133	PrimaryExpression	"""1 += 2"""		5022019	1					
ANR	5022134	PrimaryExpression	2		5022019	2					
ANR	5022135	InitializerList	"""subq"""		5022019	24					
ANR	5022136	PrimaryExpression	"""subq"""		5022019	0					
ANR	5022137	PrimaryExpression	"""1 += 2"""		5022019	1					
ANR	5022138	PrimaryExpression	2		5022019	2					
ANR	5022139	InitializerList	"""tst"""		5022019	25					
ANR	5022140	PrimaryExpression	"""tst"""		5022019	0					
ANR	5022141	PrimaryExpression	"""1 == 2"""		5022019	1					
ANR	5022142	PrimaryExpression	2		5022019	2					
ANR	5022143	InitializerList	"""ori"""		5022019	26					
ANR	5022144	PrimaryExpression	"""ori"""		5022019	0					
ANR	5022145	PrimaryExpression	"""2 |= 1"""		5022019	1					
ANR	5022146	PrimaryExpression	2		5022019	2					
ANR	5022147	InitializerList	"""or"""		5022019	27					
ANR	5022148	PrimaryExpression	"""or"""		5022019	0					
ANR	5022149	PrimaryExpression	"""2 |= 1"""		5022019	1					
ANR	5022150	PrimaryExpression	2		5022019	2					
ANR	5022151	InitializerList	"""lsr"""		5022019	28					
ANR	5022152	PrimaryExpression	"""lsr"""		5022019	0					
ANR	5022153	PrimaryExpression	"""2 >>= 1"""		5022019	1					
ANR	5022154	PrimaryExpression	2		5022019	2					
ANR	5022155	InitializerList	"""lsl"""		5022019	29					
ANR	5022156	PrimaryExpression	"""lsl"""		5022019	0					
ANR	5022157	PrimaryExpression	"""2 <<= 1"""		5022019	1					
ANR	5022158	PrimaryExpression	2		5022019	2					
ANR	5022159	InitializerList	"""andi"""		5022019	30					
ANR	5022160	PrimaryExpression	"""andi"""		5022019	0					
ANR	5022161	PrimaryExpression	"""2 &= 1"""		5022019	1					
ANR	5022162	PrimaryExpression	2		5022019	2					
ANR	5022163	InitializerList	"""nop"""		5022019	31					
ANR	5022164	PrimaryExpression	"""nop"""		5022019	0					
ANR	5022165	PrimaryExpression	""""""		5022019	1					
ANR	5022166	InitializerList	NULL		5022019	32					
ANR	5022167	Identifier	NULL		5022019	0					
ANR	5022168	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5022019	2					
ANR	5022169	ForInit	i = 0 ;	69:6:1560:1563	5022019	0	True				
ANR	5022170	AssignmentExpression	i = 0		5022019	0		=			
ANR	5022171	Identifier	i		5022019	0					
ANR	5022172	PrimaryExpression	0		5022019	1					
ANR	5022173	Condition	ops [ i ] . op != NULL	69:11:1565:1581	5022019	1	True				
ANR	5022174	EqualityExpression	ops [ i ] . op != NULL		5022019	0		!=			
ANR	5022175	MemberAccess	ops [ i ] . op		5022019	0					
ANR	5022176	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022177	Identifier	ops		5022019	0					
ANR	5022178	Identifier	i		5022019	1					
ANR	5022179	Identifier	op		5022019	1					
ANR	5022180	Identifier	NULL		5022019	1					
ANR	5022181	PostIncDecOperationExpression	i ++	69:30:1584:1586	5022019	2	True				
ANR	5022182	Identifier	i		5022019	0					
ANR	5022183	IncDec	++		5022019	1					
ANR	5022184	CompoundStatement		44:35:1003:1003	5022019	3					
ANR	5022185	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5022019	0					
ANR	5022186	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	70:6:1597:1624	5022019	0	True				
ANR	5022187	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5022019	0					
ANR	5022188	UnaryOperator	!		5022019	0					
ANR	5022189	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5022019	1					
ANR	5022190	Callee	strcmp		5022019	0					
ANR	5022191	Identifier	strcmp		5022019	0					
ANR	5022192	ArgumentList	ops [ i ] . op		5022019	1					
ANR	5022193	Argument	ops [ i ] . op		5022019	0					
ANR	5022194	MemberAccess	ops [ i ] . op		5022019	0					
ANR	5022195	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022196	Identifier	ops		5022019	0					
ANR	5022197	Identifier	i		5022019	1					
ANR	5022198	Identifier	op		5022019	1					
ANR	5022199	Argument	argv [ 0 ]		5022019	1					
ANR	5022200	ArrayIndexing	argv [ 0 ]		5022019	0					
ANR	5022201	Identifier	argv		5022019	0					
ANR	5022202	PrimaryExpression	0		5022019	1					
ANR	5022203	CompoundStatement		45:36:1041:1041	5022019	1					
ANR	5022204	IfStatement	if ( newstr != NULL )		5022019	0					
ANR	5022205	Condition	newstr != NULL	71:7:1636:1649	5022019	0	True				
ANR	5022206	EqualityExpression	newstr != NULL		5022019	0		!=			
ANR	5022207	Identifier	newstr		5022019	0					
ANR	5022208	Identifier	NULL		5022019	1					
ANR	5022209	CompoundStatement		46:23:1066:1066	5022019	1					
ANR	5022210	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5022019	0					
ANR	5022211	ForInit	j = k = 0 ;	72:9:1663:1668	5022019	0	True				
ANR	5022212	AssignmentExpression	j = k = 0		5022019	0		=			
ANR	5022213	Identifier	j		5022019	0					
ANR	5022214	AssignmentExpression	k = 0		5022019	1		=			
ANR	5022215	Identifier	k		5022019	0					
ANR	5022216	PrimaryExpression	0		5022019	1					
ANR	5022217	Condition	ops [ i ] . str [ j ] != '\\0'	72:15:1669:1687	5022019	1	True				
ANR	5022218	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5022019	0		!=			
ANR	5022219	ArrayIndexing	ops [ i ] . str [ j ]		5022019	0					
ANR	5022220	MemberAccess	ops [ i ] . str		5022019	0					
ANR	5022221	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022222	Identifier	ops		5022019	0					
ANR	5022223	Identifier	i		5022019	1					
ANR	5022224	Identifier	str		5022019	1					
ANR	5022225	Identifier	j		5022019	1					
ANR	5022226	PrimaryExpression	'\\0'		5022019	1					
ANR	5022227	Expression	"j ++ , k ++"	72:35:1689:1695	5022019	2	True				
ANR	5022228	PostIncDecOperationExpression	j ++		5022019	0					
ANR	5022229	Identifier	j		5022019	0					
ANR	5022230	IncDec	++		5022019	1					
ANR	5022231	PostIncDecOperationExpression	k ++		5022019	1					
ANR	5022232	Identifier	k		5022019	0					
ANR	5022233	IncDec	++		5022019	1					
ANR	5022234	CompoundStatement		47:44:1112:1112	5022019	3					
ANR	5022235	IfStatement	"if ( can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands ) )"		5022019	0					
ANR	5022236	Condition	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"	73:9:1709:1755	5022019	0	True				
ANR	5022237	CallExpression	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"		5022019	0					
ANR	5022238	Callee	can_replace		5022019	0					
ANR	5022239	Identifier	can_replace		5022019	0					
ANR	5022240	ArgumentList	ops [ i ] . str		5022019	1					
ANR	5022241	Argument	ops [ i ] . str		5022019	0					
ANR	5022242	MemberAccess	ops [ i ] . str		5022019	0					
ANR	5022243	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022244	Identifier	ops		5022019	0					
ANR	5022245	Identifier	i		5022019	1					
ANR	5022246	Identifier	str		5022019	1					
ANR	5022247	Argument	j		5022019	1					
ANR	5022248	Identifier	j		5022019	0					
ANR	5022249	Argument	ops [ i ] . max_operands		5022019	2					
ANR	5022250	MemberAccess	ops [ i ] . max_operands		5022019	0					
ANR	5022251	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022252	Identifier	ops		5022019	0					
ANR	5022253	Identifier	i		5022019	1					
ANR	5022254	Identifier	max_operands		5022019	1					
ANR	5022255	CompoundStatement		49:6:1180:1221	5022019	1					
ANR	5022256	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	74:6:1766:1807	5022019	0	True				
ANR	5022257	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5022019	0					
ANR	5022258	IdentifierDeclType	const char *		5022019	0					
ANR	5022259	Identifier	w		5022019	1					
ANR	5022260	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5022019	2		=			
ANR	5022261	Identifier	w		5022019	0					
ANR	5022262	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5022019	1					
ANR	5022263	Identifier	argv		5022019	0					
ANR	5022264	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5022019	1		-			
ANR	5022265	ArrayIndexing	ops [ i ] . str [ j ]		5022019	0					
ANR	5022266	MemberAccess	ops [ i ] . str		5022019	0					
ANR	5022267	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022268	Identifier	ops		5022019	0					
ANR	5022269	Identifier	i		5022019	1					
ANR	5022270	Identifier	str		5022019	1					
ANR	5022271	Identifier	j		5022019	1					
ANR	5022272	PrimaryExpression	'0'		5022019	1					
ANR	5022273	IfStatement	if ( w != NULL )		5022019	1					
ANR	5022274	Condition	w != NULL	75:10:1819:1827	5022019	0	True				
ANR	5022275	EqualityExpression	w != NULL		5022019	0		!=			
ANR	5022276	Identifier	w		5022019	0					
ANR	5022277	Identifier	NULL		5022019	1					
ANR	5022278	CompoundStatement		50:21:1244:1244	5022019	1					
ANR	5022279	ExpressionStatement	"strcpy ( newstr + k , w )"	76:7:1839:1859	5022019	0	True				
ANR	5022280	CallExpression	"strcpy ( newstr + k , w )"		5022019	0					
ANR	5022281	Callee	strcpy		5022019	0					
ANR	5022282	Identifier	strcpy		5022019	0					
ANR	5022283	ArgumentList	newstr + k		5022019	1					
ANR	5022284	Argument	newstr + k		5022019	0					
ANR	5022285	AdditiveExpression	newstr + k		5022019	0		+			
ANR	5022286	Identifier	newstr		5022019	0					
ANR	5022287	Identifier	k		5022019	1					
ANR	5022288	Argument	w		5022019	1					
ANR	5022289	Identifier	w		5022019	0					
ANR	5022290	ExpressionStatement	k += strlen ( w ) - 1	77:7:1868:1884	5022019	1	True				
ANR	5022291	AssignmentExpression	k += strlen ( w ) - 1		5022019	0		+=			
ANR	5022292	Identifier	k		5022019	0					
ANR	5022293	AdditiveExpression	strlen ( w ) - 1		5022019	1		-			
ANR	5022294	CallExpression	strlen ( w )		5022019	0					
ANR	5022295	Callee	strlen		5022019	0					
ANR	5022296	Identifier	strlen		5022019	0					
ANR	5022297	ArgumentList	w		5022019	1					
ANR	5022298	Argument	w		5022019	0					
ANR	5022299	Identifier	w		5022019	0					
ANR	5022300	PrimaryExpression	1		5022019	1					
ANR	5022301	ElseStatement	else		5022019	0					
ANR	5022302	CompoundStatement		54:12:1320:1320	5022019	0					
ANR	5022303	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	80:6:1914:1939	5022019	0	True				
ANR	5022304	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5022019	0		=			
ANR	5022305	ArrayIndexing	newstr [ k ]		5022019	0					
ANR	5022306	Identifier	newstr		5022019	0					
ANR	5022307	Identifier	k		5022019	1					
ANR	5022308	ArrayIndexing	ops [ i ] . str [ j ]		5022019	1					
ANR	5022309	MemberAccess	ops [ i ] . str		5022019	0					
ANR	5022310	ArrayIndexing	ops [ i ]		5022019	0					
ANR	5022311	Identifier	ops		5022019	0					
ANR	5022312	Identifier	i		5022019	1					
ANR	5022313	Identifier	str		5022019	1					
ANR	5022314	Identifier	j		5022019	1					
ANR	5022315	ExpressionStatement	newstr [ k ] = '\\0'	83:4:1958:1972	5022019	1	True				
ANR	5022316	AssignmentExpression	newstr [ k ] = '\\0'		5022019	0		=			
ANR	5022317	ArrayIndexing	newstr [ k ]		5022019	0					
ANR	5022318	Identifier	newstr		5022019	0					
ANR	5022319	Identifier	k		5022019	1					
ANR	5022320	PrimaryExpression	'\\0'		5022019	1					
ANR	5022321	ReturnStatement	return true ;	85:3:1982:1993	5022019	1	True				
ANR	5022322	Identifier	true		5022019	0					
ANR	5022323	IfStatement	if ( newstr != NULL )		5022019	3					
ANR	5022324	Condition	newstr != NULL	90:5:2034:2047	5022019	0	True				
ANR	5022325	EqualityExpression	newstr != NULL		5022019	0		!=			
ANR	5022326	Identifier	newstr		5022019	0					
ANR	5022327	Identifier	NULL		5022019	1					
ANR	5022328	CompoundStatement		65:21:1464:1464	5022019	1					
ANR	5022329	ExpressionStatement	newstr [ 0 ] = '\\0'	91:2:2054:2070	5022019	0	True				
ANR	5022330	AssignmentExpression	newstr [ 0 ] = '\\0'		5022019	0		=			
ANR	5022331	ArrayIndexing	newstr [ 0 ]		5022019	0					
ANR	5022332	Identifier	newstr		5022019	0					
ANR	5022333	PrimaryExpression	0		5022019	1					
ANR	5022334	PrimaryExpression	'\\0'		5022019	1					
ANR	5022335	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5022019	1					
ANR	5022336	ForInit	i = 0 ;	92:7:2079:2082	5022019	0	True				
ANR	5022337	AssignmentExpression	i = 0		5022019	0		=			
ANR	5022338	Identifier	i		5022019	0					
ANR	5022339	PrimaryExpression	0		5022019	1					
ANR	5022340	Condition	i < argc	92:12:2084:2089	5022019	1	True				
ANR	5022341	RelationalExpression	i < argc		5022019	0		<			
ANR	5022342	Identifier	i		5022019	0					
ANR	5022343	Identifier	argc		5022019	1					
ANR	5022344	PostIncDecOperationExpression	i ++	92:20:2092:2094	5022019	2	True				
ANR	5022345	Identifier	i		5022019	0					
ANR	5022346	IncDec	++		5022019	1					
ANR	5022347	CompoundStatement		67:25:1511:1511	5022019	3					
ANR	5022348	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	93:3:2102:2126	5022019	0	True				
ANR	5022349	CallExpression	"strcat ( newstr , argv [ i ] )"		5022019	0					
ANR	5022350	Callee	strcat		5022019	0					
ANR	5022351	Identifier	strcat		5022019	0					
ANR	5022352	ArgumentList	newstr		5022019	1					
ANR	5022353	Argument	newstr		5022019	0					
ANR	5022354	Identifier	newstr		5022019	0					
ANR	5022355	Argument	argv [ i ]		5022019	1					
ANR	5022356	ArrayIndexing	argv [ i ]		5022019	0					
ANR	5022357	Identifier	argv		5022019	0					
ANR	5022358	Identifier	i		5022019	1					
ANR	5022359	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	94:3:2131:2181	5022019	1	True				
ANR	5022360	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5022019	0					
ANR	5022361	Callee	strcat		5022019	0					
ANR	5022362	Identifier	strcat		5022019	0					
ANR	5022363	ArgumentList	newstr		5022019	1					
ANR	5022364	Argument	newstr		5022019	0					
ANR	5022365	Identifier	newstr		5022019	0					
ANR	5022366	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5022019	1					
ANR	5022367	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5022019	0					
ANR	5022368	Condition	i == 0 || i == argc - 1		5022019	0					
ANR	5022369	OrExpression	i == 0 || i == argc - 1		5022019	0		||			
ANR	5022370	EqualityExpression	i == 0		5022019	0		==			
ANR	5022371	Identifier	i		5022019	0					
ANR	5022372	PrimaryExpression	0		5022019	1					
ANR	5022373	EqualityExpression	i == argc - 1		5022019	1		==			
ANR	5022374	Identifier	i		5022019	0					
ANR	5022375	AdditiveExpression	argc - 1		5022019	1		-			
ANR	5022376	Identifier	argc		5022019	0					
ANR	5022377	PrimaryExpression	1		5022019	1					
ANR	5022378	PrimaryExpression	""" """		5022019	1					
ANR	5022379	PrimaryExpression	""", """		5022019	2					
ANR	5022380	ReturnStatement	return false ;	98:1:2192:2204	5022019	4	True				
ANR	5022381	Identifier	false		5022019	0					
ANR	5022382	ReturnType	static int		5022019	1					
ANR	5022383	Identifier	replace		5022019	2					
ANR	5022384	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5022019	3					
ANR	5022385	Parameter	int argc	26:19:541:548	5022019	0	True				
ANR	5022386	ParameterType	int		5022019	0					
ANR	5022387	Identifier	argc		5022019	1					
ANR	5022388	Parameter	const char * argv [ ]	26:29:551:568	5022019	1	True				
ANR	5022389	ParameterType	const char * [ ]		5022019	0					
ANR	5022390	Identifier	argv		5022019	1					
ANR	5022391	Parameter	char * newstr	26:49:571:582	5022019	2	True				
ANR	5022392	ParameterType	char *		5022019	0					
ANR	5022393	Identifier	newstr		5022019	1					
ANR	5022394	CFGEntryNode	ENTRY		5022019		True				
ANR	5022395	CFGExitNode	EXIT		5022019		True				
ANR	5022396	Symbol	* ops [ i ] . str		5022019						
ANR	5022397	Symbol	* * ops		5022019						
ANR	5022398	Symbol	* argv		5022019						
ANR	5022399	Symbol	argv		5022019						
ANR	5022400	Symbol	ops [ i ] . str		5022019						
ANR	5022401	Symbol	strlen		5022019						
ANR	5022402	Symbol	ops [ i ] . op		5022019						
ANR	5022403	Symbol	* ops		5022019						
ANR	5022404	Symbol	argc		5022019						
ANR	5022405	Symbol	strcmp		5022019						
ANR	5022406	Symbol	* * j		5022019						
ANR	5022407	Symbol	* * i		5022019						
ANR	5022408	Symbol	NULL		5022019						
ANR	5022409	Symbol	ops [ i ] . max_operands		5022019						
ANR	5022410	Symbol	* * ops [ i ] . str		5022019						
ANR	5022411	Symbol	false		5022019						
ANR	5022412	Symbol	i		5022019						
ANR	5022413	Symbol	j		5022019						
ANR	5022414	Symbol	k		5022019						
ANR	5022415	Symbol	newstr		5022019						
ANR	5022416	Symbol	* * * ops		5022019						
ANR	5022417	Symbol	ops		5022019						
ANR	5022418	Symbol	* i		5022019						
ANR	5022419	Symbol	* newstr		5022019						
ANR	5022420	Symbol	* j		5022019						
ANR	5022421	Symbol	* k		5022019						
ANR	5022422	Symbol	w		5022019						
ANR	5022423	Symbol	* * * i		5022019						
ANR	5022424	Symbol	true		5022019						
ANR	5022425	Symbol	can_replace		5022019						
ANR	5022426	Function	parse	102:0:2224:4029							
ANR	5022427	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5022426	0					
ANR	5022428	CompoundStatement		102:57:2281:4029	5022426	0					
ANR	5022429	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	103:1:2284:2310	5022426	0	True				
ANR	5022430	IdentifierDecl	i		5022426	0					
ANR	5022431	IdentifierDeclType	int		5022426	0					
ANR	5022432	Identifier	i		5022426	1					
ANR	5022433	IdentifierDecl	len = strlen ( data )		5022426	1					
ANR	5022434	IdentifierDeclType	int		5022426	0					
ANR	5022435	Identifier	len		5022426	1					
ANR	5022436	AssignmentExpression	len = strlen ( data )		5022426	2		=			
ANR	5022437	Identifier	len		5022426	0					
ANR	5022438	CallExpression	strlen ( data )		5022426	1					
ANR	5022439	Callee	strlen		5022426	0					
ANR	5022440	Identifier	strlen		5022426	0					
ANR	5022441	ArgumentList	data		5022426	1					
ANR	5022442	Argument	data		5022426	0					
ANR	5022443	Identifier	data		5022426	0					
ANR	5022444	IdentifierDeclStatement	char w0 [ WSZ ] ;	104:1:2313:2325	5022426	1	True				
ANR	5022445	IdentifierDecl	w0 [ WSZ ]		5022426	0					
ANR	5022446	IdentifierDeclType	char [ WSZ ]		5022426	0					
ANR	5022447	Identifier	w0		5022426	1					
ANR	5022448	Identifier	WSZ		5022426	2					
ANR	5022449	IdentifierDeclStatement	char w1 [ WSZ ] ;	105:1:2328:2340	5022426	2	True				
ANR	5022450	IdentifierDecl	w1 [ WSZ ]		5022426	0					
ANR	5022451	IdentifierDeclType	char [ WSZ ]		5022426	0					
ANR	5022452	Identifier	w1		5022426	1					
ANR	5022453	Identifier	WSZ		5022426	2					
ANR	5022454	IdentifierDeclStatement	char w2 [ WSZ ] ;	106:1:2343:2355	5022426	3	True				
ANR	5022455	IdentifierDecl	w2 [ WSZ ]		5022426	0					
ANR	5022456	IdentifierDeclType	char [ WSZ ]		5022426	0					
ANR	5022457	Identifier	w2		5022426	1					
ANR	5022458	Identifier	WSZ		5022426	2					
ANR	5022459	IdentifierDeclStatement	char w3 [ WSZ ] ;	107:1:2358:2370	5022426	4	True				
ANR	5022460	IdentifierDecl	w3 [ WSZ ]		5022426	0					
ANR	5022461	IdentifierDeclType	char [ WSZ ]		5022426	0					
ANR	5022462	Identifier	w3		5022426	1					
ANR	5022463	Identifier	WSZ		5022426	2					
ANR	5022464	IdentifierDeclStatement	char w4 [ WSZ ] ;	108:1:2373:2385	5022426	5	True				
ANR	5022465	IdentifierDecl	w4 [ WSZ ]		5022426	0					
ANR	5022466	IdentifierDeclType	char [ WSZ ]		5022426	0					
ANR	5022467	Identifier	w4		5022426	1					
ANR	5022468	Identifier	WSZ		5022426	2					
ANR	5022469	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	109:1:2388:2410	5022426	6	True				
ANR	5022470	IdentifierDecl	* buf		5022426	0					
ANR	5022471	IdentifierDeclType	char *		5022426	0					
ANR	5022472	Identifier	buf		5022426	1					
ANR	5022473	IdentifierDecl	* ptr		5022426	1					
ANR	5022474	IdentifierDeclType	char *		5022426	0					
ANR	5022475	Identifier	ptr		5022426	1					
ANR	5022476	IdentifierDecl	* optr		5022426	2					
ANR	5022477	IdentifierDeclType	char *		5022426	0					
ANR	5022478	Identifier	optr		5022426	1					
ANR	5022479	IfStatement	"if ( ! strcmp ( data , ""jr ra"" ) )"		5022426	7					
ANR	5022480	Condition	"! strcmp ( data , ""jr ra"" )"	111:5:2418:2440	5022426	0	True				
ANR	5022481	UnaryOperationExpression	"! strcmp ( data , ""jr ra"" )"		5022426	0					
ANR	5022482	UnaryOperator	!		5022426	0					
ANR	5022483	CallExpression	"strcmp ( data , ""jr ra"" )"		5022426	1					
ANR	5022484	Callee	strcmp		5022426	0					
ANR	5022485	Identifier	strcmp		5022426	0					
ANR	5022486	ArgumentList	data		5022426	1					
ANR	5022487	Argument	data		5022426	0					
ANR	5022488	Identifier	data		5022426	0					
ANR	5022489	Argument	"""jr ra"""		5022426	1					
ANR	5022490	PrimaryExpression	"""jr ra"""		5022426	0					
ANR	5022491	CompoundStatement		10:30:161:161	5022426	1					
ANR	5022492	ExpressionStatement	"strcpy ( str , ""ret"" )"	112:2:2447:2466	5022426	0	True				
ANR	5022493	CallExpression	"strcpy ( str , ""ret"" )"		5022426	0					
ANR	5022494	Callee	strcpy		5022426	0					
ANR	5022495	Identifier	strcpy		5022426	0					
ANR	5022496	ArgumentList	str		5022426	1					
ANR	5022497	Argument	str		5022426	0					
ANR	5022498	Identifier	str		5022426	0					
ANR	5022499	Argument	"""ret"""		5022426	1					
ANR	5022500	PrimaryExpression	"""ret"""		5022426	0					
ANR	5022501	ReturnStatement	return true ;	113:2:2470:2481	5022426	1	True				
ANR	5022502	Identifier	true		5022426	0					
ANR	5022503	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5022426	8					
ANR	5022504	Condition	! ( buf = malloc ( len + 1 ) )	117:5:2523:2547	5022426	0	True				
ANR	5022505	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5022426	0					
ANR	5022506	UnaryOperator	!		5022426	0					
ANR	5022507	AssignmentExpression	buf = malloc ( len + 1 )		5022426	1		=			
ANR	5022508	Identifier	buf		5022426	0					
ANR	5022509	CallExpression	malloc ( len + 1 )		5022426	1					
ANR	5022510	Callee	malloc		5022426	0					
ANR	5022511	Identifier	malloc		5022426	0					
ANR	5022512	ArgumentList	len + 1		5022426	1					
ANR	5022513	Argument	len + 1		5022426	0					
ANR	5022514	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022515	Identifier	len		5022426	0					
ANR	5022516	PrimaryExpression	1		5022426	1					
ANR	5022517	CompoundStatement		16:32:268:268	5022426	1					
ANR	5022518	ReturnStatement	return false ;	118:2:2554:2566	5022426	0	True				
ANR	5022519	Identifier	false		5022426	0					
ANR	5022520	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	120:1:2572:2597	5022426	9	True				
ANR	5022521	CallExpression	"memcpy ( buf , data , len + 1 )"		5022426	0					
ANR	5022522	Callee	memcpy		5022426	0					
ANR	5022523	Identifier	memcpy		5022426	0					
ANR	5022524	ArgumentList	buf		5022426	1					
ANR	5022525	Argument	buf		5022426	0					
ANR	5022526	Identifier	buf		5022426	0					
ANR	5022527	Argument	data		5022426	1					
ANR	5022528	Identifier	data		5022426	0					
ANR	5022529	Argument	len + 1		5022426	2					
ANR	5022530	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022531	Identifier	len		5022426	0					
ANR	5022532	PrimaryExpression	1		5022426	1					
ANR	5022533	ExpressionStatement	"r_str_replace_in ( buf , len + 1 , "".l"" , """" , 1 )"	122:1:2601:2643	5022426	10	True				
ANR	5022534	CallExpression	"r_str_replace_in ( buf , len + 1 , "".l"" , """" , 1 )"		5022426	0					
ANR	5022535	Callee	r_str_replace_in		5022426	0					
ANR	5022536	Identifier	r_str_replace_in		5022426	0					
ANR	5022537	ArgumentList	buf		5022426	1					
ANR	5022538	Argument	buf		5022426	0					
ANR	5022539	Identifier	buf		5022426	0					
ANR	5022540	Argument	len + 1		5022426	1					
ANR	5022541	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022542	Identifier	len		5022426	0					
ANR	5022543	PrimaryExpression	1		5022426	1					
ANR	5022544	Argument	""".l"""		5022426	2					
ANR	5022545	PrimaryExpression	""".l"""		5022426	0					
ANR	5022546	Argument	""""""		5022426	3					
ANR	5022547	PrimaryExpression	""""""		5022426	0					
ANR	5022548	Argument	1		5022426	4					
ANR	5022549	PrimaryExpression	1		5022426	0					
ANR	5022550	ExpressionStatement	"r_str_replace_in ( buf , len + 1 , "".w"" , """" , 1 )"	123:1:2646:2688	5022426	11	True				
ANR	5022551	CallExpression	"r_str_replace_in ( buf , len + 1 , "".w"" , """" , 1 )"		5022426	0					
ANR	5022552	Callee	r_str_replace_in		5022426	0					
ANR	5022553	Identifier	r_str_replace_in		5022426	0					
ANR	5022554	ArgumentList	buf		5022426	1					
ANR	5022555	Argument	buf		5022426	0					
ANR	5022556	Identifier	buf		5022426	0					
ANR	5022557	Argument	len + 1		5022426	1					
ANR	5022558	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022559	Identifier	len		5022426	0					
ANR	5022560	PrimaryExpression	1		5022426	1					
ANR	5022561	Argument	""".w"""		5022426	2					
ANR	5022562	PrimaryExpression	""".w"""		5022426	0					
ANR	5022563	Argument	""""""		5022426	3					
ANR	5022564	PrimaryExpression	""""""		5022426	0					
ANR	5022565	Argument	1		5022426	4					
ANR	5022566	PrimaryExpression	1		5022426	0					
ANR	5022567	ExpressionStatement	"r_str_replace_in ( buf , len + 1 , "".d"" , """" , 1 )"	124:1:2691:2733	5022426	12	True				
ANR	5022568	CallExpression	"r_str_replace_in ( buf , len + 1 , "".d"" , """" , 1 )"		5022426	0					
ANR	5022569	Callee	r_str_replace_in		5022426	0					
ANR	5022570	Identifier	r_str_replace_in		5022426	0					
ANR	5022571	ArgumentList	buf		5022426	1					
ANR	5022572	Argument	buf		5022426	0					
ANR	5022573	Identifier	buf		5022426	0					
ANR	5022574	Argument	len + 1		5022426	1					
ANR	5022575	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022576	Identifier	len		5022426	0					
ANR	5022577	PrimaryExpression	1		5022426	1					
ANR	5022578	Argument	""".d"""		5022426	2					
ANR	5022579	PrimaryExpression	""".d"""		5022426	0					
ANR	5022580	Argument	""""""		5022426	3					
ANR	5022581	PrimaryExpression	""""""		5022426	0					
ANR	5022582	Argument	1		5022426	4					
ANR	5022583	PrimaryExpression	1		5022426	0					
ANR	5022584	ExpressionStatement	"r_str_replace_in ( buf , len + 1 , "".b"" , """" , 1 )"	125:1:2736:2778	5022426	13	True				
ANR	5022585	CallExpression	"r_str_replace_in ( buf , len + 1 , "".b"" , """" , 1 )"		5022426	0					
ANR	5022586	Callee	r_str_replace_in		5022426	0					
ANR	5022587	Identifier	r_str_replace_in		5022426	0					
ANR	5022588	ArgumentList	buf		5022426	1					
ANR	5022589	Argument	buf		5022426	0					
ANR	5022590	Identifier	buf		5022426	0					
ANR	5022591	Argument	len + 1		5022426	1					
ANR	5022592	AdditiveExpression	len + 1		5022426	0		+			
ANR	5022593	Identifier	len		5022426	0					
ANR	5022594	PrimaryExpression	1		5022426	1					
ANR	5022595	Argument	""".b"""		5022426	2					
ANR	5022596	PrimaryExpression	""".b"""		5022426	0					
ANR	5022597	Argument	""""""		5022426	3					
ANR	5022598	PrimaryExpression	""""""		5022426	0					
ANR	5022599	Argument	1		5022426	4					
ANR	5022600	PrimaryExpression	1		5022426	0					
ANR	5022601	ExpressionStatement	r_str_trim ( buf )	126:1:2781:2797	5022426	14	True				
ANR	5022602	CallExpression	r_str_trim ( buf )		5022426	0					
ANR	5022603	Callee	r_str_trim		5022426	0					
ANR	5022604	Identifier	r_str_trim		5022426	0					
ANR	5022605	ArgumentList	buf		5022426	1					
ANR	5022606	Argument	buf		5022426	0					
ANR	5022607	Identifier	buf		5022426	0					
ANR	5022608	IfStatement	if ( * buf )		5022426	15					
ANR	5022609	Condition	* buf	128:5:2805:2808	5022426	0	True				
ANR	5022610	UnaryOperationExpression	* buf		5022426	0					
ANR	5022611	UnaryOperator	*		5022426	0					
ANR	5022612	Identifier	buf		5022426	1					
ANR	5022613	CompoundStatement		27:11:529:529	5022426	1					
ANR	5022614	ExpressionStatement	w0 [ 0 ] = '\\0'	129:2:2815:2825	5022426	0	True				
ANR	5022615	AssignmentExpression	w0 [ 0 ] = '\\0'		5022426	0		=			
ANR	5022616	ArrayIndexing	w0 [ 0 ]		5022426	0					
ANR	5022617	Identifier	w0		5022426	0					
ANR	5022618	PrimaryExpression	0		5022426	1					
ANR	5022619	PrimaryExpression	'\\0'		5022426	1					
ANR	5022620	ExpressionStatement	w1 [ 0 ] = '\\0'	130:2:2829:2839	5022426	1	True				
ANR	5022621	AssignmentExpression	w1 [ 0 ] = '\\0'		5022426	0		=			
ANR	5022622	ArrayIndexing	w1 [ 0 ]		5022426	0					
ANR	5022623	Identifier	w1		5022426	0					
ANR	5022624	PrimaryExpression	0		5022426	1					
ANR	5022625	PrimaryExpression	'\\0'		5022426	1					
ANR	5022626	ExpressionStatement	w2 [ 0 ] = '\\0'	131:2:2843:2853	5022426	2	True				
ANR	5022627	AssignmentExpression	w2 [ 0 ] = '\\0'		5022426	0		=			
ANR	5022628	ArrayIndexing	w2 [ 0 ]		5022426	0					
ANR	5022629	Identifier	w2		5022426	0					
ANR	5022630	PrimaryExpression	0		5022426	1					
ANR	5022631	PrimaryExpression	'\\0'		5022426	1					
ANR	5022632	ExpressionStatement	w3 [ 0 ] = '\\0'	132:2:2857:2867	5022426	3	True				
ANR	5022633	AssignmentExpression	w3 [ 0 ] = '\\0'		5022426	0		=			
ANR	5022634	ArrayIndexing	w3 [ 0 ]		5022426	0					
ANR	5022635	Identifier	w3		5022426	0					
ANR	5022636	PrimaryExpression	0		5022426	1					
ANR	5022637	PrimaryExpression	'\\0'		5022426	1					
ANR	5022638	ExpressionStatement	w4 [ 0 ] = '\\0'	133:2:2871:2881	5022426	4	True				
ANR	5022639	AssignmentExpression	w4 [ 0 ] = '\\0'		5022426	0		=			
ANR	5022640	ArrayIndexing	w4 [ 0 ]		5022426	0					
ANR	5022641	Identifier	w4		5022426	0					
ANR	5022642	PrimaryExpression	0		5022426	1					
ANR	5022643	PrimaryExpression	'\\0'		5022426	1					
ANR	5022644	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	134:2:2885:2908	5022426	5	True				
ANR	5022645	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5022426	0		=			
ANR	5022646	Identifier	ptr		5022426	0					
ANR	5022647	CallExpression	"strchr ( buf , ' ' )"		5022426	1					
ANR	5022648	Callee	strchr		5022426	0					
ANR	5022649	Identifier	strchr		5022426	0					
ANR	5022650	ArgumentList	buf		5022426	1					
ANR	5022651	Argument	buf		5022426	0					
ANR	5022652	Identifier	buf		5022426	0					
ANR	5022653	Argument	' '		5022426	1					
ANR	5022654	PrimaryExpression	' '		5022426	0					
ANR	5022655	IfStatement	if ( ! ptr )		5022426	6					
ANR	5022656	Condition	! ptr	135:6:2916:2919	5022426	0	True				
ANR	5022657	UnaryOperationExpression	! ptr		5022426	0					
ANR	5022658	UnaryOperator	!		5022426	0					
ANR	5022659	Identifier	ptr		5022426	1					
ANR	5022660	CompoundStatement		34:12:640:640	5022426	1					
ANR	5022661	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	136:3:2927:2951	5022426	0	True				
ANR	5022662	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5022426	0		=			
ANR	5022663	Identifier	ptr		5022426	0					
ANR	5022664	CallExpression	"strchr ( buf , '\\t' )"		5022426	1					
ANR	5022665	Callee	strchr		5022426	0					
ANR	5022666	Identifier	strchr		5022426	0					
ANR	5022667	ArgumentList	buf		5022426	1					
ANR	5022668	Argument	buf		5022426	0					
ANR	5022669	Identifier	buf		5022426	0					
ANR	5022670	Argument	'\\t'		5022426	1					
ANR	5022671	PrimaryExpression	'\\t'		5022426	0					
ANR	5022672	IfStatement	if ( ptr )		5022426	7					
ANR	5022673	Condition	ptr	138:6:2963:2965	5022426	0	True				
ANR	5022674	Identifier	ptr		5022426	0					
ANR	5022675	CompoundStatement		37:11:686:686	5022426	1					
ANR	5022676	ExpressionStatement	* ptr = '\\0'	139:3:2973:2984	5022426	0	True				
ANR	5022677	AssignmentExpression	* ptr = '\\0'		5022426	0		=			
ANR	5022678	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022679	UnaryOperator	*		5022426	0					
ANR	5022680	Identifier	ptr		5022426	1					
ANR	5022681	PrimaryExpression	'\\0'		5022426	1					
ANR	5022682	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5022426	1					
ANR	5022683	ForInit	++ ptr ;	140:8:2994:2999	5022426	0	True				
ANR	5022684	UnaryExpression	++ ptr		5022426	0					
ANR	5022685	IncDec	++		5022426	0					
ANR	5022686	Identifier	ptr		5022426	1					
ANR	5022687	Condition	* ptr == ' '	140:15:3001:3011	5022426	1	True				
ANR	5022688	EqualityExpression	* ptr == ' '		5022426	0		==			
ANR	5022689	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022690	UnaryOperator	*		5022426	0					
ANR	5022691	Identifier	ptr		5022426	1					
ANR	5022692	PrimaryExpression	' '		5022426	1					
ANR	5022693	PostIncDecOperationExpression	ptr ++	140:28:3014:3018	5022426	2	True				
ANR	5022694	Identifier	ptr		5022426	0					
ANR	5022695	IncDec	++		5022426	1					
ANR	5022696	CompoundStatement		39:35:739:739	5022426	3					
ANR	5022697	ExpressionStatement		141:4:3027:3027	5022426	0	True				
ANR	5022698	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	143:3:3037:3063	5022426	2	True				
ANR	5022699	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5022426	0					
ANR	5022700	Callee	strncpy		5022426	0					
ANR	5022701	Identifier	strncpy		5022426	0					
ANR	5022702	ArgumentList	w0		5022426	1					
ANR	5022703	Argument	w0		5022426	0					
ANR	5022704	Identifier	w0		5022426	0					
ANR	5022705	Argument	buf		5022426	1					
ANR	5022706	Identifier	buf		5022426	0					
ANR	5022707	Argument	WSZ - 1		5022426	2					
ANR	5022708	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022709	Identifier	WSZ		5022426	0					
ANR	5022710	PrimaryExpression	1		5022426	1					
ANR	5022711	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	144:3:3068:3094	5022426	3	True				
ANR	5022712	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5022426	0					
ANR	5022713	Callee	strncpy		5022426	0					
ANR	5022714	Identifier	strncpy		5022426	0					
ANR	5022715	ArgumentList	w1		5022426	1					
ANR	5022716	Argument	w1		5022426	0					
ANR	5022717	Identifier	w1		5022426	0					
ANR	5022718	Argument	ptr		5022426	1					
ANR	5022719	Identifier	ptr		5022426	0					
ANR	5022720	Argument	WSZ - 1		5022426	2					
ANR	5022721	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022722	Identifier	WSZ		5022426	0					
ANR	5022723	PrimaryExpression	1		5022426	1					
ANR	5022724	ExpressionStatement	optr = ptr	146:3:3100:3108	5022426	4	True				
ANR	5022725	AssignmentExpression	optr = ptr		5022426	0		=			
ANR	5022726	Identifier	optr		5022426	0					
ANR	5022727	Identifier	ptr		5022426	1					
ANR	5022728	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	147:3:3113:3136	5022426	5	True				
ANR	5022729	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5022426	0		=			
ANR	5022730	Identifier	ptr		5022426	0					
ANR	5022731	CallExpression	"strchr ( ptr , ',' )"		5022426	1					
ANR	5022732	Callee	strchr		5022426	0					
ANR	5022733	Identifier	strchr		5022426	0					
ANR	5022734	ArgumentList	ptr		5022426	1					
ANR	5022735	Argument	ptr		5022426	0					
ANR	5022736	Identifier	ptr		5022426	0					
ANR	5022737	Argument	"','"		5022426	1					
ANR	5022738	PrimaryExpression	"','"		5022426	0					
ANR	5022739	IfStatement	if ( ptr )		5022426	6					
ANR	5022740	Condition	ptr	148:7:3145:3147	5022426	0	True				
ANR	5022741	Identifier	ptr		5022426	0					
ANR	5022742	CompoundStatement		47:12:868:868	5022426	1					
ANR	5022743	ExpressionStatement	* ptr = '\\0'	149:4:3156:3167	5022426	0	True				
ANR	5022744	AssignmentExpression	* ptr = '\\0'		5022426	0		=			
ANR	5022745	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022746	UnaryOperator	*		5022426	0					
ANR	5022747	Identifier	ptr		5022426	1					
ANR	5022748	PrimaryExpression	'\\0'		5022426	1					
ANR	5022749	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5022426	1					
ANR	5022750	ForInit	++ ptr ;	150:9:3178:3183	5022426	0	True				
ANR	5022751	UnaryExpression	++ ptr		5022426	0					
ANR	5022752	IncDec	++		5022426	0					
ANR	5022753	Identifier	ptr		5022426	1					
ANR	5022754	Condition	* ptr == ' '	150:16:3185:3195	5022426	1	True				
ANR	5022755	EqualityExpression	* ptr == ' '		5022426	0		==			
ANR	5022756	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022757	UnaryOperator	*		5022426	0					
ANR	5022758	Identifier	ptr		5022426	1					
ANR	5022759	PrimaryExpression	' '		5022426	1					
ANR	5022760	PostIncDecOperationExpression	ptr ++	150:29:3198:3202	5022426	2	True				
ANR	5022761	Identifier	ptr		5022426	0					
ANR	5022762	IncDec	++		5022426	1					
ANR	5022763	CompoundStatement		49:36:923:923	5022426	3					
ANR	5022764	ExpressionStatement		151:5:3212:3212	5022426	0	True				
ANR	5022765	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	153:4:3224:3251	5022426	2	True				
ANR	5022766	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5022426	0					
ANR	5022767	Callee	strncpy		5022426	0					
ANR	5022768	Identifier	strncpy		5022426	0					
ANR	5022769	ArgumentList	w1		5022426	1					
ANR	5022770	Argument	w1		5022426	0					
ANR	5022771	Identifier	w1		5022426	0					
ANR	5022772	Argument	optr		5022426	1					
ANR	5022773	Identifier	optr		5022426	0					
ANR	5022774	Argument	WSZ - 1		5022426	2					
ANR	5022775	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022776	Identifier	WSZ		5022426	0					
ANR	5022777	PrimaryExpression	1		5022426	1					
ANR	5022778	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	154:4:3257:3283	5022426	3	True				
ANR	5022779	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5022426	0					
ANR	5022780	Callee	strncpy		5022426	0					
ANR	5022781	Identifier	strncpy		5022426	0					
ANR	5022782	ArgumentList	w2		5022426	1					
ANR	5022783	Argument	w2		5022426	0					
ANR	5022784	Identifier	w2		5022426	0					
ANR	5022785	Argument	ptr		5022426	1					
ANR	5022786	Identifier	ptr		5022426	0					
ANR	5022787	Argument	WSZ - 1		5022426	2					
ANR	5022788	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022789	Identifier	WSZ		5022426	0					
ANR	5022790	PrimaryExpression	1		5022426	1					
ANR	5022791	ExpressionStatement	optr = ptr	155:4:3289:3297	5022426	4	True				
ANR	5022792	AssignmentExpression	optr = ptr		5022426	0		=			
ANR	5022793	Identifier	optr		5022426	0					
ANR	5022794	Identifier	ptr		5022426	1					
ANR	5022795	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	156:4:3303:3326	5022426	5	True				
ANR	5022796	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5022426	0		=			
ANR	5022797	Identifier	ptr		5022426	0					
ANR	5022798	CallExpression	"strchr ( ptr , ',' )"		5022426	1					
ANR	5022799	Callee	strchr		5022426	0					
ANR	5022800	Identifier	strchr		5022426	0					
ANR	5022801	ArgumentList	ptr		5022426	1					
ANR	5022802	Argument	ptr		5022426	0					
ANR	5022803	Identifier	ptr		5022426	0					
ANR	5022804	Argument	"','"		5022426	1					
ANR	5022805	PrimaryExpression	"','"		5022426	0					
ANR	5022806	IfStatement	if ( ptr )		5022426	6					
ANR	5022807	Condition	ptr	157:8:3336:3338	5022426	0	True				
ANR	5022808	Identifier	ptr		5022426	0					
ANR	5022809	CompoundStatement		56:13:1059:1059	5022426	1					
ANR	5022810	ExpressionStatement	* ptr = '\\0'	158:5:3348:3359	5022426	0	True				
ANR	5022811	AssignmentExpression	* ptr = '\\0'		5022426	0		=			
ANR	5022812	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022813	UnaryOperator	*		5022426	0					
ANR	5022814	Identifier	ptr		5022426	1					
ANR	5022815	PrimaryExpression	'\\0'		5022426	1					
ANR	5022816	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5022426	1					
ANR	5022817	ForInit	++ ptr ;	159:10:3371:3376	5022426	0	True				
ANR	5022818	UnaryExpression	++ ptr		5022426	0					
ANR	5022819	IncDec	++		5022426	0					
ANR	5022820	Identifier	ptr		5022426	1					
ANR	5022821	Condition	* ptr == ' '	159:17:3378:3388	5022426	1	True				
ANR	5022822	EqualityExpression	* ptr == ' '		5022426	0		==			
ANR	5022823	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022824	UnaryOperator	*		5022426	0					
ANR	5022825	Identifier	ptr		5022426	1					
ANR	5022826	PrimaryExpression	' '		5022426	1					
ANR	5022827	PostIncDecOperationExpression	ptr ++	159:30:3391:3395	5022426	2	True				
ANR	5022828	Identifier	ptr		5022426	0					
ANR	5022829	IncDec	++		5022426	1					
ANR	5022830	CompoundStatement		58:37:1116:1116	5022426	3					
ANR	5022831	ExpressionStatement		160:6:3406:3406	5022426	0	True				
ANR	5022832	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	162:5:3420:3447	5022426	2	True				
ANR	5022833	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5022426	0					
ANR	5022834	Callee	strncpy		5022426	0					
ANR	5022835	Identifier	strncpy		5022426	0					
ANR	5022836	ArgumentList	w2		5022426	1					
ANR	5022837	Argument	w2		5022426	0					
ANR	5022838	Identifier	w2		5022426	0					
ANR	5022839	Argument	optr		5022426	1					
ANR	5022840	Identifier	optr		5022426	0					
ANR	5022841	Argument	WSZ - 1		5022426	2					
ANR	5022842	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022843	Identifier	WSZ		5022426	0					
ANR	5022844	PrimaryExpression	1		5022426	1					
ANR	5022845	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	163:5:3454:3480	5022426	3	True				
ANR	5022846	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5022426	0					
ANR	5022847	Callee	strncpy		5022426	0					
ANR	5022848	Identifier	strncpy		5022426	0					
ANR	5022849	ArgumentList	w3		5022426	1					
ANR	5022850	Argument	w3		5022426	0					
ANR	5022851	Identifier	w3		5022426	0					
ANR	5022852	Argument	ptr		5022426	1					
ANR	5022853	Identifier	ptr		5022426	0					
ANR	5022854	Argument	WSZ - 1		5022426	2					
ANR	5022855	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022856	Identifier	WSZ		5022426	0					
ANR	5022857	PrimaryExpression	1		5022426	1					
ANR	5022858	ExpressionStatement	optr = ptr	164:5:3487:3495	5022426	4	True				
ANR	5022859	AssignmentExpression	optr = ptr		5022426	0		=			
ANR	5022860	Identifier	optr		5022426	0					
ANR	5022861	Identifier	ptr		5022426	1					
ANR	5022862	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	166:5:3511:3534	5022426	5	True				
ANR	5022863	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5022426	0		=			
ANR	5022864	Identifier	ptr		5022426	0					
ANR	5022865	CallExpression	"strchr ( ptr , ',' )"		5022426	1					
ANR	5022866	Callee	strchr		5022426	0					
ANR	5022867	Identifier	strchr		5022426	0					
ANR	5022868	ArgumentList	ptr		5022426	1					
ANR	5022869	Argument	ptr		5022426	0					
ANR	5022870	Identifier	ptr		5022426	0					
ANR	5022871	Argument	"','"		5022426	1					
ANR	5022872	PrimaryExpression	"','"		5022426	0					
ANR	5022873	IfStatement	if ( ptr )		5022426	6					
ANR	5022874	Condition	ptr	167:9:3545:3547	5022426	0	True				
ANR	5022875	Identifier	ptr		5022426	0					
ANR	5022876	CompoundStatement		66:14:1268:1268	5022426	1					
ANR	5022877	ExpressionStatement	* ptr = '\\0'	168:6:3558:3569	5022426	0	True				
ANR	5022878	AssignmentExpression	* ptr = '\\0'		5022426	0		=			
ANR	5022879	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022880	UnaryOperator	*		5022426	0					
ANR	5022881	Identifier	ptr		5022426	1					
ANR	5022882	PrimaryExpression	'\\0'		5022426	1					
ANR	5022883	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5022426	1					
ANR	5022884	ForInit	++ ptr ;	169:11:3582:3587	5022426	0	True				
ANR	5022885	UnaryExpression	++ ptr		5022426	0					
ANR	5022886	IncDec	++		5022426	0					
ANR	5022887	Identifier	ptr		5022426	1					
ANR	5022888	Condition	* ptr == ' '	169:18:3589:3599	5022426	1	True				
ANR	5022889	EqualityExpression	* ptr == ' '		5022426	0		==			
ANR	5022890	UnaryOperationExpression	* ptr		5022426	0					
ANR	5022891	UnaryOperator	*		5022426	0					
ANR	5022892	Identifier	ptr		5022426	1					
ANR	5022893	PrimaryExpression	' '		5022426	1					
ANR	5022894	PostIncDecOperationExpression	ptr ++	169:31:3602:3606	5022426	2	True				
ANR	5022895	Identifier	ptr		5022426	0					
ANR	5022896	IncDec	++		5022426	1					
ANR	5022897	CompoundStatement		68:38:1327:1327	5022426	3					
ANR	5022898	ExpressionStatement		170:7:3618:3618	5022426	0	True				
ANR	5022899	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	172:6:3634:3661	5022426	2	True				
ANR	5022900	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5022426	0					
ANR	5022901	Callee	strncpy		5022426	0					
ANR	5022902	Identifier	strncpy		5022426	0					
ANR	5022903	ArgumentList	w3		5022426	1					
ANR	5022904	Argument	w3		5022426	0					
ANR	5022905	Identifier	w3		5022426	0					
ANR	5022906	Argument	optr		5022426	1					
ANR	5022907	Identifier	optr		5022426	0					
ANR	5022908	Argument	WSZ - 1		5022426	2					
ANR	5022909	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022910	Identifier	WSZ		5022426	0					
ANR	5022911	PrimaryExpression	1		5022426	1					
ANR	5022912	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	173:6:3669:3695	5022426	3	True				
ANR	5022913	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5022426	0					
ANR	5022914	Callee	strncpy		5022426	0					
ANR	5022915	Identifier	strncpy		5022426	0					
ANR	5022916	ArgumentList	w4		5022426	1					
ANR	5022917	Argument	w4		5022426	0					
ANR	5022918	Identifier	w4		5022426	0					
ANR	5022919	Argument	ptr		5022426	1					
ANR	5022920	Identifier	ptr		5022426	0					
ANR	5022921	Argument	WSZ - 1		5022426	2					
ANR	5022922	AdditiveExpression	WSZ - 1		5022426	0		-			
ANR	5022923	Identifier	WSZ		5022426	0					
ANR	5022924	PrimaryExpression	1		5022426	1					
ANR	5022925	CompoundStatement		79:3:1490:1500	5022426	8					
ANR	5022926	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	179:3:3726:3767	5022426	0	True				
ANR	5022927	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5022426	0					
ANR	5022928	IdentifierDeclType	const char * [ ]		5022426	0					
ANR	5022929	Identifier	wa		5022426	1					
ANR	5022930	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5022426	2		=			
ANR	5022931	Identifier	wa		5022426	0					
ANR	5022932	InitializerList	w0		5022426	1					
ANR	5022933	Identifier	w0		5022426	0					
ANR	5022934	Identifier	w1		5022426	1					
ANR	5022935	Identifier	w2		5022426	2					
ANR	5022936	Identifier	w3		5022426	3					
ANR	5022937	Identifier	w4		5022426	4					
ANR	5022938	IdentifierDeclStatement	int nw = 0 ;	180:3:3772:3782	5022426	1	True				
ANR	5022939	IdentifierDecl	nw = 0		5022426	0					
ANR	5022940	IdentifierDeclType	int		5022426	0					
ANR	5022941	Identifier	nw		5022426	1					
ANR	5022942	AssignmentExpression	nw = 0		5022426	2		=			
ANR	5022943	Identifier	nw		5022426	0					
ANR	5022944	PrimaryExpression	0		5022426	1					
ANR	5022945	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5022426	2					
ANR	5022946	ForInit	i = 0 ;	181:8:3792:3797	5022426	0	True				
ANR	5022947	AssignmentExpression	i = 0		5022426	0		=			
ANR	5022948	Identifier	i		5022426	0					
ANR	5022949	PrimaryExpression	0		5022426	1					
ANR	5022950	Condition	i < 5	181:15:3799:3803	5022426	1	True				
ANR	5022951	RelationalExpression	i < 5		5022426	0		<			
ANR	5022952	Identifier	i		5022426	0					
ANR	5022953	PrimaryExpression	5		5022426	1					
ANR	5022954	PostIncDecOperationExpression	i ++	181:22:3806:3808	5022426	2	True				
ANR	5022955	Identifier	i		5022426	0					
ANR	5022956	IncDec	++		5022426	1					
ANR	5022957	CompoundStatement		80:27:1529:1529	5022426	3					
ANR	5022958	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5022426	0					
ANR	5022959	Condition	wa [ i ] [ 0 ] != '\\0'	182:8:3821:3836	5022426	0	True				
ANR	5022960	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5022426	0		!=			
ANR	5022961	ArrayIndexing	wa [ i ] [ 0 ]		5022426	0					
ANR	5022962	ArrayIndexing	wa [ i ]		5022426	0					
ANR	5022963	Identifier	wa		5022426	0					
ANR	5022964	Identifier	i		5022426	1					
ANR	5022965	PrimaryExpression	0		5022426	1					
ANR	5022966	PrimaryExpression	'\\0'		5022426	1					
ANR	5022967	CompoundStatement		81:26:1557:1557	5022426	1					
ANR	5022968	ExpressionStatement	nw ++	183:5:3846:3850	5022426	0	True				
ANR	5022969	PostIncDecOperationExpression	nw ++		5022426	0					
ANR	5022970	Identifier	nw		5022426	0					
ANR	5022971	IncDec	++		5022426	1					
ANR	5022972	ExpressionStatement	"replace ( nw , wa , str )"	186:3:3866:3887	5022426	3	True				
ANR	5022973	CallExpression	"replace ( nw , wa , str )"		5022426	0					
ANR	5022974	Callee	replace		5022426	0					
ANR	5022975	Identifier	replace		5022426	0					
ANR	5022976	ArgumentList	nw		5022426	1					
ANR	5022977	Argument	nw		5022426	0					
ANR	5022978	Identifier	nw		5022426	0					
ANR	5022979	Argument	wa		5022426	1					
ANR	5022980	Identifier	wa		5022426	0					
ANR	5022981	Argument	str		5022426	2					
ANR	5022982	Identifier	str		5022426	0					
ANR	5022983	CompoundStatement		87:4:1616:1650	5022426	4					
ANR	5022984	IdentifierDeclStatement	"char * pluseq = strstr ( str , ""+ ="" ) ;"	188:4:3898:3932	5022426	0	True				
ANR	5022985	IdentifierDecl	"* pluseq = strstr ( str , ""+ ="" )"		5022426	0					
ANR	5022986	IdentifierDeclType	char *		5022426	0					
ANR	5022987	Identifier	pluseq		5022426	1					
ANR	5022988	AssignmentExpression	"* pluseq = strstr ( str , ""+ ="" )"		5022426	2		=			
ANR	5022989	Identifier	pluseq		5022426	0					
ANR	5022990	CallExpression	"strstr ( str , ""+ ="" )"		5022426	1					
ANR	5022991	Callee	strstr		5022426	0					
ANR	5022992	Identifier	strstr		5022426	0					
ANR	5022993	ArgumentList	str		5022426	1					
ANR	5022994	Argument	str		5022426	0					
ANR	5022995	Identifier	str		5022426	0					
ANR	5022996	Argument	"""+ ="""		5022426	1					
ANR	5022997	PrimaryExpression	"""+ ="""		5022426	0					
ANR	5022998	IfStatement	if ( pluseq )		5022426	1					
ANR	5022999	Condition	pluseq	189:8:3942:3947	5022426	0	True				
ANR	5023000	Identifier	pluseq		5022426	0					
ANR	5023001	CompoundStatement		88:16:1668:1668	5022426	1					
ANR	5023002	ExpressionStatement	"memcpy ( pluseq , "" +="" , 3 )"	190:5:3957:3982	5022426	0	True				
ANR	5023003	CallExpression	"memcpy ( pluseq , "" +="" , 3 )"		5022426	0					
ANR	5023004	Callee	memcpy		5022426	0					
ANR	5023005	Identifier	memcpy		5022426	0					
ANR	5023006	ArgumentList	pluseq		5022426	1					
ANR	5023007	Argument	pluseq		5022426	0					
ANR	5023008	Identifier	pluseq		5022426	0					
ANR	5023009	Argument	""" +="""		5022426	1					
ANR	5023010	PrimaryExpression	""" +="""		5022426	0					
ANR	5023011	Argument	3		5022426	2					
ANR	5023012	PrimaryExpression	3		5022426	0					
ANR	5023013	ExpressionStatement	free ( buf )	195:1:4003:4013	5022426	16	True				
ANR	5023014	CallExpression	free ( buf )		5022426	0					
ANR	5023015	Callee	free		5022426	0					
ANR	5023016	Identifier	free		5022426	0					
ANR	5023017	ArgumentList	buf		5022426	1					
ANR	5023018	Argument	buf		5022426	0					
ANR	5023019	Identifier	buf		5022426	0					
ANR	5023020	ReturnStatement	return true ;	196:1:4016:4027	5022426	17	True				
ANR	5023021	Identifier	true		5022426	0					
ANR	5023022	ReturnType	static int		5022426	1					
ANR	5023023	Identifier	parse		5022426	2					
ANR	5023024	ParameterList	"RParse * p , const char * data , char * str"		5022426	3					
ANR	5023025	Parameter	RParse * p	102:17:2241:2249	5022426	0	True				
ANR	5023026	ParameterType	RParse *		5022426	0					
ANR	5023027	Identifier	p		5022426	1					
ANR	5023028	Parameter	const char * data	102:28:2252:2267	5022426	1	True				
ANR	5023029	ParameterType	const char *		5022426	0					
ANR	5023030	Identifier	data		5022426	1					
ANR	5023031	Parameter	char * str	102:46:2270:2278	5022426	2	True				
ANR	5023032	ParameterType	char *		5022426	0					
ANR	5023033	Identifier	str		5022426	1					
ANR	5023034	CFGEntryNode	ENTRY		5022426		True				
ANR	5023035	CFGExitNode	EXIT		5022426		True				
ANR	5023036	Symbol	* w4		5022426						
ANR	5023037	Symbol	* w3		5022426						
ANR	5023038	Symbol	pluseq		5022426						
ANR	5023039	Symbol	* w2		5022426						
ANR	5023040	Symbol	* w1		5022426						
ANR	5023041	Symbol	data		5022426						
ANR	5023042	Symbol	strchr		5022426						
ANR	5023043	Symbol	nw		5022426						
ANR	5023044	Symbol	wa		5022426						
ANR	5023045	Symbol	strlen		5022426						
ANR	5023046	Symbol	* wa		5022426						
ANR	5023047	Symbol	len		5022426						
ANR	5023048	Symbol	* ptr		5022426						
ANR	5023049	Symbol	w0		5022426						
ANR	5023050	Symbol	w1		5022426						
ANR	5023051	Symbol	w2		5022426						
ANR	5023052	Symbol	w3		5022426						
ANR	5023053	Symbol	* w0		5022426						
ANR	5023054	Symbol	w4		5022426						
ANR	5023055	Symbol	strcmp		5022426						
ANR	5023056	Symbol	malloc		5022426						
ANR	5023057	Symbol	* buf		5022426						
ANR	5023058	Symbol	* * i		5022426						
ANR	5023059	Symbol	false		5022426						
ANR	5023060	Symbol	i		5022426						
ANR	5023061	Symbol	optr		5022426						
ANR	5023062	Symbol	ptr		5022426						
ANR	5023063	Symbol	p		5022426						
ANR	5023064	Symbol	str		5022426						
ANR	5023065	Symbol	buf		5022426						
ANR	5023066	Symbol	* i		5022426						
ANR	5023067	Symbol	* * wa		5022426						
ANR	5023068	Symbol	strstr		5022426						
ANR	5023069	Symbol	true		5022426						
ANR	5023070	Symbol	WSZ		5022426						
ANR	5023071	DeclStmt									
ANR	5023072	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_m68k_pseudo
ANR	5023073	DeclStmt									
ANR	5023074	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
