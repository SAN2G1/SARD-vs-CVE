command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5023075	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_mips_pseudo.c								
ANR	5023076	Function	can_replace	13:0:214:523							
ANR	5023077	FunctionDef	"can_replace (const char * str , int idx , int max_operands)"		5023076	0					
ANR	5023078	CompoundStatement		13:67:281:523	5023076	0					
ANR	5023079	IfStatement	if ( str [ idx ] > '9' || str [ idx ] < '1' )		5023076	0					
ANR	5023080	Condition	str [ idx ] > '9' || str [ idx ] < '1'	14:5:288:319	5023076	0	True				
ANR	5023081	OrExpression	str [ idx ] > '9' || str [ idx ] < '1'		5023076	0		||			
ANR	5023082	RelationalExpression	str [ idx ] > '9'		5023076	0		>			
ANR	5023083	ArrayIndexing	str [ idx ]		5023076	0					
ANR	5023084	Identifier	str		5023076	0					
ANR	5023085	Identifier	idx		5023076	1					
ANR	5023086	PrimaryExpression	'9'		5023076	1					
ANR	5023087	RelationalExpression	str [ idx ] < '1'		5023076	1		<			
ANR	5023088	ArrayIndexing	str [ idx ]		5023076	0					
ANR	5023089	Identifier	str		5023076	0					
ANR	5023090	Identifier	idx		5023076	1					
ANR	5023091	PrimaryExpression	'1'		5023076	1					
ANR	5023092	CompoundStatement		2:39:40:40	5023076	1					
ANR	5023093	ReturnStatement	return false ;	15:2:326:338	5023076	0	True				
ANR	5023094	Identifier	false		5023076	0					
ANR	5023095	IfStatement	if ( str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1' )		5023076	1					
ANR	5023096	Condition	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'	17:5:348:415	5023076	0	True				
ANR	5023097	AndExpression	str [ idx + 1 ] != x00 && str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5023076	0		&&			
ANR	5023098	EqualityExpression	str [ idx + 1 ] != x00		5023076	0		!=			
ANR	5023099	ArrayIndexing	str [ idx + 1 ]		5023076	0					
ANR	5023100	Identifier	str		5023076	0					
ANR	5023101	AdditiveExpression	idx + 1		5023076	1		+			
ANR	5023102	Identifier	idx		5023076	0					
ANR	5023103	PrimaryExpression	1		5023076	1					
ANR	5023104	Identifier	x00		5023076	1					
ANR	5023105	AndExpression	str [ idx + 1 ] <= '9' && str [ idx + 1 ] >= '1'		5023076	1		&&			
ANR	5023106	RelationalExpression	str [ idx + 1 ] <= '9'		5023076	0		<=			
ANR	5023107	ArrayIndexing	str [ idx + 1 ]		5023076	0					
ANR	5023108	Identifier	str		5023076	0					
ANR	5023109	AdditiveExpression	idx + 1		5023076	1		+			
ANR	5023110	Identifier	idx		5023076	0					
ANR	5023111	PrimaryExpression	1		5023076	1					
ANR	5023112	PrimaryExpression	'9'		5023076	1					
ANR	5023113	RelationalExpression	str [ idx + 1 ] >= '1'		5023076	1		>=			
ANR	5023114	ArrayIndexing	str [ idx + 1 ]		5023076	0					
ANR	5023115	Identifier	str		5023076	0					
ANR	5023116	AdditiveExpression	idx + 1		5023076	1		+			
ANR	5023117	Identifier	idx		5023076	0					
ANR	5023118	PrimaryExpression	1		5023076	1					
ANR	5023119	PrimaryExpression	'1'		5023076	1					
ANR	5023120	CompoundStatement		5:75:136:136	5023076	1					
ANR	5023121	ReturnStatement	return false ;	18:2:422:434	5023076	0	True				
ANR	5023122	Identifier	false		5023076	0					
ANR	5023123	IfStatement	if ( ( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands )		5023076	2					
ANR	5023124	Condition	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands	20:5:444:485	5023076	0	True				
ANR	5023125	RelationalExpression	( int ) ( ( int ) str [ idx ] - 0x30 ) > max_operands		5023076	0		>			
ANR	5023126	CastExpression	( int ) ( ( int ) str [ idx ] - 0x30 )		5023076	0					
ANR	5023127	CastTarget	int		5023076	0					
ANR	5023128	AdditiveExpression	( int ) str [ idx ] - 0x30		5023076	1		-			
ANR	5023129	CastExpression	( int ) str [ idx ]		5023076	0					
ANR	5023130	CastTarget	int		5023076	0					
ANR	5023131	ArrayIndexing	str [ idx ]		5023076	1					
ANR	5023132	Identifier	str		5023076	0					
ANR	5023133	Identifier	idx		5023076	1					
ANR	5023134	PrimaryExpression	0x30		5023076	1					
ANR	5023135	Identifier	max_operands		5023076	1					
ANR	5023136	CompoundStatement		8:49:206:206	5023076	1					
ANR	5023137	ReturnStatement	return false ;	21:2:492:504	5023076	0	True				
ANR	5023138	Identifier	false		5023076	0					
ANR	5023139	ReturnStatement	return true ;	23:1:510:521	5023076	3	True				
ANR	5023140	Identifier	true		5023076	0					
ANR	5023141	ReturnType	static int		5023076	1					
ANR	5023142	Identifier	can_replace		5023076	2					
ANR	5023143	ParameterList	"const char * str , int idx , int max_operands"		5023076	3					
ANR	5023144	Parameter	const char * str	13:23:237:251	5023076	0	True				
ANR	5023145	ParameterType	const char *		5023076	0					
ANR	5023146	Identifier	str		5023076	1					
ANR	5023147	Parameter	int idx	13:40:254:260	5023076	1	True				
ANR	5023148	ParameterType	int		5023076	0					
ANR	5023149	Identifier	idx		5023076	1					
ANR	5023150	Parameter	int max_operands	13:49:263:278	5023076	2	True				
ANR	5023151	ParameterType	int		5023076	0					
ANR	5023152	Identifier	max_operands		5023076	1					
ANR	5023153	CFGEntryNode	ENTRY		5023076		True				
ANR	5023154	CFGExitNode	EXIT		5023076		True				
ANR	5023155	Symbol	str		5023076						
ANR	5023156	Symbol	max_operands		5023076						
ANR	5023157	Symbol	* idx		5023076						
ANR	5023158	Symbol	false		5023076						
ANR	5023159	Symbol	true		5023076						
ANR	5023160	Symbol	x00		5023076						
ANR	5023161	Symbol	* str		5023076						
ANR	5023162	Symbol	idx		5023076						
ANR	5023163	Function	replace	26:0:526:3353							
ANR	5023164	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5023163	0					
ANR	5023165	CompoundStatement		26:63:589:3353	5023163	0					
ANR	5023166	IdentifierDeclStatement	"int i , j , k ;"	27:1:592:601	5023163	0	True				
ANR	5023167	IdentifierDecl	i		5023163	0					
ANR	5023168	IdentifierDeclType	int		5023163	0					
ANR	5023169	Identifier	i		5023163	1					
ANR	5023170	IdentifierDecl	j		5023163	1					
ANR	5023171	IdentifierDeclType	int		5023163	0					
ANR	5023172	Identifier	j		5023163	1					
ANR	5023173	IdentifierDecl	k		5023163	2					
ANR	5023174	IdentifierDeclType	int		5023163	0					
ANR	5023175	Identifier	k		5023163	1					
ANR	5023176	ClassDefStatement	"struct { char * op ; char * str ; int max_operands ; } ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } } ;"	28:1:604:2694	5023163	1	True				
ANR	5023177	IdentifierDecl	"ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } }"		5023163	0					
ANR	5023178	IdentifierDeclType	 [ ]		5023163	0					
ANR	5023179	Identifier	ops		5023163	1					
ANR	5023180	AssignmentExpression	"ops [ ] = { { ""add"" , ""1 = 2 + 3"" , 3 } , { ""addi"" , ""1 = 2 + 3"" , 3 } , { ""addiu"" , ""1 = 2 + 3"" , 3 } , { ""addu"" , ""1 = 2 + 3"" , 3 } , { ""and"" , ""1 = 2 & 3"" , 3 } , { ""andi"" , ""1 = 2 & 3"" , 3 } , { ""b"" , ""goto 1"" , 1 } , { ""bal"" , ""call 1"" , 1 } , { ""begzal"" , ""if (1 >= 0) call 2"" , 2 } , { ""beq"" , ""if (1 == 2) goto 3"" , 3 } , { ""beqz"" , ""if (!1) goto 2"" , 2 } , { ""bgez"" , ""if (1 >= 0) goto 2"" , 2 } , { ""bgtz"" , ""if (1 > 0) goto 2"" , 2 } , { ""blez"" , ""if (1 <= 0) goto 2"" , 2 } , { ""bltz"" , ""if (1 < 0) goto 2"" , 2 } , { ""bltzal"" , ""if (1 < 0) call 2"" , 2 } , { ""bne"" , ""if (1 != 2) goto 3"" , 3 } , { ""bnez"" , ""if (1) goto 2"" , 2 } , { ""j"" , ""goto 1"" , 1 } , { ""jal"" , ""call 1"" , 1 } , { ""jalr"" , ""call 1"" , 1 } , { ""jr"" , ""goto 1"" , 1 } , { ""lb"" , ""1 = byte [3 + 2]"" , 3 } , { ""lbu"" , ""1 = (unsigned) byte [3 + 2]"" , 3 } , { ""lh"" , ""1 = halfword [3 + 2]"" , 3 } , { ""lhu"" , ""1 = (unsigned) halfword [3 + 2]"" , 3 } , { ""li"" , ""1 = 2"" , 2 } , { ""lui"" , ""1 = 2 << 16"" , 2 } , { ""lw"" , ""1 = [3 + 2]"" , 3 } , { ""mfhi"" , ""1 = hi"" , 1 } , { ""mflo"" , ""1 = lo"" , 1 } , { ""move"" , ""1 = 2"" , 2 } , { ""movn"" , ""if (3) 1 = 2"" , 3 } , { ""movz"" , ""if (!3) 1 = 2"" , 3 } , { ""mult"" , ""(hi,lo) = 1 * 2"" , 2 } , { ""multu"" , ""unsigned (hi,lo) = 1 * 2"" , 2 } , { ""mul"" , ""1 = 2 * 3"" , 3 } , { ""mulu"" , ""1 = 2 * 3"" , 3 } , { ""negu"" , ""1 = ~2"" , 2 } , { ""nop"" , """" , 0 } , { ""nor"" , ""1 = ~(2 | 3)"" , 3 } , { ""or"" , ""1 = 2 | 3"" , 3 } , { ""ori"" , ""1 = 2 | 3"" , 3 } , { ""sb"" , ""byte [3 + 2] = 1"" , 3 } , { ""sh"" , ""halfword [3 + 2] = 1"" , 3 } , { ""sll"" , ""1 = 2 << 3"" , 3 } , { ""sllv"" , ""1 = 2 << 3"" , 3 } , { ""slr"" , ""1 = 2 >> 3"" , 3 } , { ""slt"" , ""1 = (2 < 3)"" , 3 } , { ""slti"" , ""1 = (2 < 3)"" , 3 } , { ""sltiu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sltu"" , ""1 = (unsigned) (2 < 3)"" , 3 } , { ""sra"" , ""1 = (signed) 2 >> 3"" , 3 } , { ""srl"" , ""1 = 2 >> 3"" , 3 } , { ""srlv"" , ""1 = 2 >> 3"" , 3 } , { ""subu"" , ""1 = 2 - 3"" , 3 } , { ""sub"" , ""1 = 2 - 3"" , 3 } , { ""sw"" , ""[3 + 2] = 1"" , 3 } , { ""syscall"" , ""syscall"" , 0 } , { ""xor"" , ""1 = 2 ^ 3"" , 3 } , { ""xori"" , ""1 = 2 ^ 3"" , 3 } , { NULL } }"		5023163	2		=			
ANR	5023181	Identifier	ops		5023163	0					
ANR	5023182	InitializerList	"""add"""		5023163	1					
ANR	5023183	InitializerList	"""add"""		5023163	0					
ANR	5023184	PrimaryExpression	"""add"""		5023163	0					
ANR	5023185	PrimaryExpression	"""1 = 2 + 3"""		5023163	1					
ANR	5023186	PrimaryExpression	3		5023163	2					
ANR	5023187	InitializerList	"""addi"""		5023163	1					
ANR	5023188	PrimaryExpression	"""addi"""		5023163	0					
ANR	5023189	PrimaryExpression	"""1 = 2 + 3"""		5023163	1					
ANR	5023190	PrimaryExpression	3		5023163	2					
ANR	5023191	InitializerList	"""addiu"""		5023163	2					
ANR	5023192	PrimaryExpression	"""addiu"""		5023163	0					
ANR	5023193	PrimaryExpression	"""1 = 2 + 3"""		5023163	1					
ANR	5023194	PrimaryExpression	3		5023163	2					
ANR	5023195	InitializerList	"""addu"""		5023163	3					
ANR	5023196	PrimaryExpression	"""addu"""		5023163	0					
ANR	5023197	PrimaryExpression	"""1 = 2 + 3"""		5023163	1					
ANR	5023198	PrimaryExpression	3		5023163	2					
ANR	5023199	InitializerList	"""and"""		5023163	4					
ANR	5023200	PrimaryExpression	"""and"""		5023163	0					
ANR	5023201	PrimaryExpression	"""1 = 2 & 3"""		5023163	1					
ANR	5023202	PrimaryExpression	3		5023163	2					
ANR	5023203	InitializerList	"""andi"""		5023163	5					
ANR	5023204	PrimaryExpression	"""andi"""		5023163	0					
ANR	5023205	PrimaryExpression	"""1 = 2 & 3"""		5023163	1					
ANR	5023206	PrimaryExpression	3		5023163	2					
ANR	5023207	InitializerList	"""b"""		5023163	6					
ANR	5023208	PrimaryExpression	"""b"""		5023163	0					
ANR	5023209	PrimaryExpression	"""goto 1"""		5023163	1					
ANR	5023210	PrimaryExpression	1		5023163	2					
ANR	5023211	InitializerList	"""bal"""		5023163	7					
ANR	5023212	PrimaryExpression	"""bal"""		5023163	0					
ANR	5023213	PrimaryExpression	"""call 1"""		5023163	1					
ANR	5023214	PrimaryExpression	1		5023163	2					
ANR	5023215	InitializerList	"""begzal"""		5023163	8					
ANR	5023216	PrimaryExpression	"""begzal"""		5023163	0					
ANR	5023217	PrimaryExpression	"""if (1 >= 0) call 2"""		5023163	1					
ANR	5023218	PrimaryExpression	2		5023163	2					
ANR	5023219	InitializerList	"""beq"""		5023163	9					
ANR	5023220	PrimaryExpression	"""beq"""		5023163	0					
ANR	5023221	PrimaryExpression	"""if (1 == 2) goto 3"""		5023163	1					
ANR	5023222	PrimaryExpression	3		5023163	2					
ANR	5023223	InitializerList	"""beqz"""		5023163	10					
ANR	5023224	PrimaryExpression	"""beqz"""		5023163	0					
ANR	5023225	PrimaryExpression	"""if (!1) goto 2"""		5023163	1					
ANR	5023226	PrimaryExpression	2		5023163	2					
ANR	5023227	InitializerList	"""bgez"""		5023163	11					
ANR	5023228	PrimaryExpression	"""bgez"""		5023163	0					
ANR	5023229	PrimaryExpression	"""if (1 >= 0) goto 2"""		5023163	1					
ANR	5023230	PrimaryExpression	2		5023163	2					
ANR	5023231	InitializerList	"""bgtz"""		5023163	12					
ANR	5023232	PrimaryExpression	"""bgtz"""		5023163	0					
ANR	5023233	PrimaryExpression	"""if (1 > 0) goto 2"""		5023163	1					
ANR	5023234	PrimaryExpression	2		5023163	2					
ANR	5023235	InitializerList	"""blez"""		5023163	13					
ANR	5023236	PrimaryExpression	"""blez"""		5023163	0					
ANR	5023237	PrimaryExpression	"""if (1 <= 0) goto 2"""		5023163	1					
ANR	5023238	PrimaryExpression	2		5023163	2					
ANR	5023239	InitializerList	"""bltz"""		5023163	14					
ANR	5023240	PrimaryExpression	"""bltz"""		5023163	0					
ANR	5023241	PrimaryExpression	"""if (1 < 0) goto 2"""		5023163	1					
ANR	5023242	PrimaryExpression	2		5023163	2					
ANR	5023243	InitializerList	"""bltzal"""		5023163	15					
ANR	5023244	PrimaryExpression	"""bltzal"""		5023163	0					
ANR	5023245	PrimaryExpression	"""if (1 < 0) call 2"""		5023163	1					
ANR	5023246	PrimaryExpression	2		5023163	2					
ANR	5023247	InitializerList	"""bne"""		5023163	16					
ANR	5023248	PrimaryExpression	"""bne"""		5023163	0					
ANR	5023249	PrimaryExpression	"""if (1 != 2) goto 3"""		5023163	1					
ANR	5023250	PrimaryExpression	3		5023163	2					
ANR	5023251	InitializerList	"""bnez"""		5023163	17					
ANR	5023252	PrimaryExpression	"""bnez"""		5023163	0					
ANR	5023253	PrimaryExpression	"""if (1) goto 2"""		5023163	1					
ANR	5023254	PrimaryExpression	2		5023163	2					
ANR	5023255	InitializerList	"""j"""		5023163	18					
ANR	5023256	PrimaryExpression	"""j"""		5023163	0					
ANR	5023257	PrimaryExpression	"""goto 1"""		5023163	1					
ANR	5023258	PrimaryExpression	1		5023163	2					
ANR	5023259	InitializerList	"""jal"""		5023163	19					
ANR	5023260	PrimaryExpression	"""jal"""		5023163	0					
ANR	5023261	PrimaryExpression	"""call 1"""		5023163	1					
ANR	5023262	PrimaryExpression	1		5023163	2					
ANR	5023263	InitializerList	"""jalr"""		5023163	20					
ANR	5023264	PrimaryExpression	"""jalr"""		5023163	0					
ANR	5023265	PrimaryExpression	"""call 1"""		5023163	1					
ANR	5023266	PrimaryExpression	1		5023163	2					
ANR	5023267	InitializerList	"""jr"""		5023163	21					
ANR	5023268	PrimaryExpression	"""jr"""		5023163	0					
ANR	5023269	PrimaryExpression	"""goto 1"""		5023163	1					
ANR	5023270	PrimaryExpression	1		5023163	2					
ANR	5023271	InitializerList	"""lb"""		5023163	22					
ANR	5023272	PrimaryExpression	"""lb"""		5023163	0					
ANR	5023273	PrimaryExpression	"""1 = byte [3 + 2]"""		5023163	1					
ANR	5023274	PrimaryExpression	3		5023163	2					
ANR	5023275	InitializerList	"""lbu"""		5023163	23					
ANR	5023276	PrimaryExpression	"""lbu"""		5023163	0					
ANR	5023277	PrimaryExpression	"""1 = (unsigned) byte [3 + 2]"""		5023163	1					
ANR	5023278	PrimaryExpression	3		5023163	2					
ANR	5023279	InitializerList	"""lh"""		5023163	24					
ANR	5023280	PrimaryExpression	"""lh"""		5023163	0					
ANR	5023281	PrimaryExpression	"""1 = halfword [3 + 2]"""		5023163	1					
ANR	5023282	PrimaryExpression	3		5023163	2					
ANR	5023283	InitializerList	"""lhu"""		5023163	25					
ANR	5023284	PrimaryExpression	"""lhu"""		5023163	0					
ANR	5023285	PrimaryExpression	"""1 = (unsigned) halfword [3 + 2]"""		5023163	1					
ANR	5023286	PrimaryExpression	3		5023163	2					
ANR	5023287	InitializerList	"""li"""		5023163	26					
ANR	5023288	PrimaryExpression	"""li"""		5023163	0					
ANR	5023289	PrimaryExpression	"""1 = 2"""		5023163	1					
ANR	5023290	PrimaryExpression	2		5023163	2					
ANR	5023291	InitializerList	"""lui"""		5023163	27					
ANR	5023292	PrimaryExpression	"""lui"""		5023163	0					
ANR	5023293	PrimaryExpression	"""1 = 2 << 16"""		5023163	1					
ANR	5023294	PrimaryExpression	2		5023163	2					
ANR	5023295	InitializerList	"""lw"""		5023163	28					
ANR	5023296	PrimaryExpression	"""lw"""		5023163	0					
ANR	5023297	PrimaryExpression	"""1 = [3 + 2]"""		5023163	1					
ANR	5023298	PrimaryExpression	3		5023163	2					
ANR	5023299	InitializerList	"""mfhi"""		5023163	29					
ANR	5023300	PrimaryExpression	"""mfhi"""		5023163	0					
ANR	5023301	PrimaryExpression	"""1 = hi"""		5023163	1					
ANR	5023302	PrimaryExpression	1		5023163	2					
ANR	5023303	InitializerList	"""mflo"""		5023163	30					
ANR	5023304	PrimaryExpression	"""mflo"""		5023163	0					
ANR	5023305	PrimaryExpression	"""1 = lo"""		5023163	1					
ANR	5023306	PrimaryExpression	1		5023163	2					
ANR	5023307	InitializerList	"""move"""		5023163	31					
ANR	5023308	PrimaryExpression	"""move"""		5023163	0					
ANR	5023309	PrimaryExpression	"""1 = 2"""		5023163	1					
ANR	5023310	PrimaryExpression	2		5023163	2					
ANR	5023311	InitializerList	"""movn"""		5023163	32					
ANR	5023312	PrimaryExpression	"""movn"""		5023163	0					
ANR	5023313	PrimaryExpression	"""if (3) 1 = 2"""		5023163	1					
ANR	5023314	PrimaryExpression	3		5023163	2					
ANR	5023315	InitializerList	"""movz"""		5023163	33					
ANR	5023316	PrimaryExpression	"""movz"""		5023163	0					
ANR	5023317	PrimaryExpression	"""if (!3) 1 = 2"""		5023163	1					
ANR	5023318	PrimaryExpression	3		5023163	2					
ANR	5023319	InitializerList	"""mult"""		5023163	34					
ANR	5023320	PrimaryExpression	"""mult"""		5023163	0					
ANR	5023321	PrimaryExpression	"""(hi,lo) = 1 * 2"""		5023163	1					
ANR	5023322	PrimaryExpression	2		5023163	2					
ANR	5023323	InitializerList	"""multu"""		5023163	35					
ANR	5023324	PrimaryExpression	"""multu"""		5023163	0					
ANR	5023325	PrimaryExpression	"""unsigned (hi,lo) = 1 * 2"""		5023163	1					
ANR	5023326	PrimaryExpression	2		5023163	2					
ANR	5023327	InitializerList	"""mul"""		5023163	36					
ANR	5023328	PrimaryExpression	"""mul"""		5023163	0					
ANR	5023329	PrimaryExpression	"""1 = 2 * 3"""		5023163	1					
ANR	5023330	PrimaryExpression	3		5023163	2					
ANR	5023331	InitializerList	"""mulu"""		5023163	37					
ANR	5023332	PrimaryExpression	"""mulu"""		5023163	0					
ANR	5023333	PrimaryExpression	"""1 = 2 * 3"""		5023163	1					
ANR	5023334	PrimaryExpression	3		5023163	2					
ANR	5023335	InitializerList	"""negu"""		5023163	38					
ANR	5023336	PrimaryExpression	"""negu"""		5023163	0					
ANR	5023337	PrimaryExpression	"""1 = ~2"""		5023163	1					
ANR	5023338	PrimaryExpression	2		5023163	2					
ANR	5023339	InitializerList	"""nop"""		5023163	39					
ANR	5023340	PrimaryExpression	"""nop"""		5023163	0					
ANR	5023341	PrimaryExpression	""""""		5023163	1					
ANR	5023342	PrimaryExpression	0		5023163	2					
ANR	5023343	InitializerList	"""nor"""		5023163	40					
ANR	5023344	PrimaryExpression	"""nor"""		5023163	0					
ANR	5023345	PrimaryExpression	"""1 = ~(2 | 3)"""		5023163	1					
ANR	5023346	PrimaryExpression	3		5023163	2					
ANR	5023347	InitializerList	"""or"""		5023163	41					
ANR	5023348	PrimaryExpression	"""or"""		5023163	0					
ANR	5023349	PrimaryExpression	"""1 = 2 | 3"""		5023163	1					
ANR	5023350	PrimaryExpression	3		5023163	2					
ANR	5023351	InitializerList	"""ori"""		5023163	42					
ANR	5023352	PrimaryExpression	"""ori"""		5023163	0					
ANR	5023353	PrimaryExpression	"""1 = 2 | 3"""		5023163	1					
ANR	5023354	PrimaryExpression	3		5023163	2					
ANR	5023355	InitializerList	"""sb"""		5023163	43					
ANR	5023356	PrimaryExpression	"""sb"""		5023163	0					
ANR	5023357	PrimaryExpression	"""byte [3 + 2] = 1"""		5023163	1					
ANR	5023358	PrimaryExpression	3		5023163	2					
ANR	5023359	InitializerList	"""sh"""		5023163	44					
ANR	5023360	PrimaryExpression	"""sh"""		5023163	0					
ANR	5023361	PrimaryExpression	"""halfword [3 + 2] = 1"""		5023163	1					
ANR	5023362	PrimaryExpression	3		5023163	2					
ANR	5023363	InitializerList	"""sll"""		5023163	45					
ANR	5023364	PrimaryExpression	"""sll"""		5023163	0					
ANR	5023365	PrimaryExpression	"""1 = 2 << 3"""		5023163	1					
ANR	5023366	PrimaryExpression	3		5023163	2					
ANR	5023367	InitializerList	"""sllv"""		5023163	46					
ANR	5023368	PrimaryExpression	"""sllv"""		5023163	0					
ANR	5023369	PrimaryExpression	"""1 = 2 << 3"""		5023163	1					
ANR	5023370	PrimaryExpression	3		5023163	2					
ANR	5023371	InitializerList	"""slr"""		5023163	47					
ANR	5023372	PrimaryExpression	"""slr"""		5023163	0					
ANR	5023373	PrimaryExpression	"""1 = 2 >> 3"""		5023163	1					
ANR	5023374	PrimaryExpression	3		5023163	2					
ANR	5023375	InitializerList	"""slt"""		5023163	48					
ANR	5023376	PrimaryExpression	"""slt"""		5023163	0					
ANR	5023377	PrimaryExpression	"""1 = (2 < 3)"""		5023163	1					
ANR	5023378	PrimaryExpression	3		5023163	2					
ANR	5023379	InitializerList	"""slti"""		5023163	49					
ANR	5023380	PrimaryExpression	"""slti"""		5023163	0					
ANR	5023381	PrimaryExpression	"""1 = (2 < 3)"""		5023163	1					
ANR	5023382	PrimaryExpression	3		5023163	2					
ANR	5023383	InitializerList	"""sltiu"""		5023163	50					
ANR	5023384	PrimaryExpression	"""sltiu"""		5023163	0					
ANR	5023385	PrimaryExpression	"""1 = (unsigned) (2 < 3)"""		5023163	1					
ANR	5023386	PrimaryExpression	3		5023163	2					
ANR	5023387	InitializerList	"""sltu"""		5023163	51					
ANR	5023388	PrimaryExpression	"""sltu"""		5023163	0					
ANR	5023389	PrimaryExpression	"""1 = (unsigned) (2 < 3)"""		5023163	1					
ANR	5023390	PrimaryExpression	3		5023163	2					
ANR	5023391	InitializerList	"""sra"""		5023163	52					
ANR	5023392	PrimaryExpression	"""sra"""		5023163	0					
ANR	5023393	PrimaryExpression	"""1 = (signed) 2 >> 3"""		5023163	1					
ANR	5023394	PrimaryExpression	3		5023163	2					
ANR	5023395	InitializerList	"""srl"""		5023163	53					
ANR	5023396	PrimaryExpression	"""srl"""		5023163	0					
ANR	5023397	PrimaryExpression	"""1 = 2 >> 3"""		5023163	1					
ANR	5023398	PrimaryExpression	3		5023163	2					
ANR	5023399	InitializerList	"""srlv"""		5023163	54					
ANR	5023400	PrimaryExpression	"""srlv"""		5023163	0					
ANR	5023401	PrimaryExpression	"""1 = 2 >> 3"""		5023163	1					
ANR	5023402	PrimaryExpression	3		5023163	2					
ANR	5023403	InitializerList	"""subu"""		5023163	55					
ANR	5023404	PrimaryExpression	"""subu"""		5023163	0					
ANR	5023405	PrimaryExpression	"""1 = 2 - 3"""		5023163	1					
ANR	5023406	PrimaryExpression	3		5023163	2					
ANR	5023407	InitializerList	"""sub"""		5023163	56					
ANR	5023408	PrimaryExpression	"""sub"""		5023163	0					
ANR	5023409	PrimaryExpression	"""1 = 2 - 3"""		5023163	1					
ANR	5023410	PrimaryExpression	3		5023163	2					
ANR	5023411	InitializerList	"""sw"""		5023163	57					
ANR	5023412	PrimaryExpression	"""sw"""		5023163	0					
ANR	5023413	PrimaryExpression	"""[3 + 2] = 1"""		5023163	1					
ANR	5023414	PrimaryExpression	3		5023163	2					
ANR	5023415	InitializerList	"""syscall"""		5023163	58					
ANR	5023416	PrimaryExpression	"""syscall"""		5023163	0					
ANR	5023417	PrimaryExpression	"""syscall"""		5023163	1					
ANR	5023418	PrimaryExpression	0		5023163	2					
ANR	5023419	InitializerList	"""xor"""		5023163	59					
ANR	5023420	PrimaryExpression	"""xor"""		5023163	0					
ANR	5023421	PrimaryExpression	"""1 = 2 ^ 3"""		5023163	1					
ANR	5023422	PrimaryExpression	3		5023163	2					
ANR	5023423	InitializerList	"""xori"""		5023163	60					
ANR	5023424	PrimaryExpression	"""xori"""		5023163	0					
ANR	5023425	PrimaryExpression	"""1 = 2 ^ 3"""		5023163	1					
ANR	5023426	PrimaryExpression	3		5023163	2					
ANR	5023427	InitializerList	NULL		5023163	61					
ANR	5023428	Identifier	NULL		5023163	0					
ANR	5023429	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5023163	2					
ANR	5023430	ForInit	i = 0 ;	97:6:2703:2706	5023163	0	True				
ANR	5023431	AssignmentExpression	i = 0		5023163	0		=			
ANR	5023432	Identifier	i		5023163	0					
ANR	5023433	PrimaryExpression	0		5023163	1					
ANR	5023434	Condition	ops [ i ] . op != NULL	97:11:2708:2724	5023163	1	True				
ANR	5023435	EqualityExpression	ops [ i ] . op != NULL		5023163	0		!=			
ANR	5023436	MemberAccess	ops [ i ] . op		5023163	0					
ANR	5023437	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023438	Identifier	ops		5023163	0					
ANR	5023439	Identifier	i		5023163	1					
ANR	5023440	Identifier	op		5023163	1					
ANR	5023441	Identifier	NULL		5023163	1					
ANR	5023442	PostIncDecOperationExpression	i ++	97:30:2727:2729	5023163	2	True				
ANR	5023443	Identifier	i		5023163	0					
ANR	5023444	IncDec	++		5023163	1					
ANR	5023445	CompoundStatement		72:35:2142:2142	5023163	3					
ANR	5023446	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5023163	0					
ANR	5023447	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	98:6:2740:2767	5023163	0	True				
ANR	5023448	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5023163	0					
ANR	5023449	UnaryOperator	!		5023163	0					
ANR	5023450	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5023163	1					
ANR	5023451	Callee	strcmp		5023163	0					
ANR	5023452	Identifier	strcmp		5023163	0					
ANR	5023453	ArgumentList	ops [ i ] . op		5023163	1					
ANR	5023454	Argument	ops [ i ] . op		5023163	0					
ANR	5023455	MemberAccess	ops [ i ] . op		5023163	0					
ANR	5023456	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023457	Identifier	ops		5023163	0					
ANR	5023458	Identifier	i		5023163	1					
ANR	5023459	Identifier	op		5023163	1					
ANR	5023460	Argument	argv [ 0 ]		5023163	1					
ANR	5023461	ArrayIndexing	argv [ 0 ]		5023163	0					
ANR	5023462	Identifier	argv		5023163	0					
ANR	5023463	PrimaryExpression	0		5023163	1					
ANR	5023464	CompoundStatement		73:36:2180:2180	5023163	1					
ANR	5023465	IfStatement	if ( newstr != NULL )		5023163	0					
ANR	5023466	Condition	newstr != NULL	99:7:2779:2792	5023163	0	True				
ANR	5023467	EqualityExpression	newstr != NULL		5023163	0		!=			
ANR	5023468	Identifier	newstr		5023163	0					
ANR	5023469	Identifier	NULL		5023163	1					
ANR	5023470	CompoundStatement		74:23:2205:2205	5023163	1					
ANR	5023471	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5023163	0					
ANR	5023472	ForInit	j = k = 0 ;	100:9:2806:2811	5023163	0	True				
ANR	5023473	AssignmentExpression	j = k = 0		5023163	0		=			
ANR	5023474	Identifier	j		5023163	0					
ANR	5023475	AssignmentExpression	k = 0		5023163	1		=			
ANR	5023476	Identifier	k		5023163	0					
ANR	5023477	PrimaryExpression	0		5023163	1					
ANR	5023478	Condition	ops [ i ] . str [ j ] != '\\0'	100:15:2812:2830	5023163	1	True				
ANR	5023479	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5023163	0		!=			
ANR	5023480	ArrayIndexing	ops [ i ] . str [ j ]		5023163	0					
ANR	5023481	MemberAccess	ops [ i ] . str		5023163	0					
ANR	5023482	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023483	Identifier	ops		5023163	0					
ANR	5023484	Identifier	i		5023163	1					
ANR	5023485	Identifier	str		5023163	1					
ANR	5023486	Identifier	j		5023163	1					
ANR	5023487	PrimaryExpression	'\\0'		5023163	1					
ANR	5023488	Expression	"j ++ , k ++"	100:35:2832:2838	5023163	2	True				
ANR	5023489	PostIncDecOperationExpression	j ++		5023163	0					
ANR	5023490	Identifier	j		5023163	0					
ANR	5023491	IncDec	++		5023163	1					
ANR	5023492	PostIncDecOperationExpression	k ++		5023163	1					
ANR	5023493	Identifier	k		5023163	0					
ANR	5023494	IncDec	++		5023163	1					
ANR	5023495	CompoundStatement		75:44:2251:2251	5023163	3					
ANR	5023496	IfStatement	"if ( can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands ) )"		5023163	0					
ANR	5023497	Condition	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"	101:9:2852:2899	5023163	0	True				
ANR	5023498	CallExpression	"can_replace ( ops [ i ] . str , j , ops [ i ] . max_operands )"		5023163	0					
ANR	5023499	Callee	can_replace		5023163	0					
ANR	5023500	Identifier	can_replace		5023163	0					
ANR	5023501	ArgumentList	ops [ i ] . str		5023163	1					
ANR	5023502	Argument	ops [ i ] . str		5023163	0					
ANR	5023503	MemberAccess	ops [ i ] . str		5023163	0					
ANR	5023504	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023505	Identifier	ops		5023163	0					
ANR	5023506	Identifier	i		5023163	1					
ANR	5023507	Identifier	str		5023163	1					
ANR	5023508	Argument	j		5023163	1					
ANR	5023509	Identifier	j		5023163	0					
ANR	5023510	Argument	ops [ i ] . max_operands		5023163	2					
ANR	5023511	MemberAccess	ops [ i ] . max_operands		5023163	0					
ANR	5023512	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023513	Identifier	ops		5023163	0					
ANR	5023514	Identifier	i		5023163	1					
ANR	5023515	Identifier	max_operands		5023163	1					
ANR	5023516	CompoundStatement		77:6:2320:2361	5023163	1					
ANR	5023517	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	102:6:2910:2951	5023163	0	True				
ANR	5023518	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5023163	0					
ANR	5023519	IdentifierDeclType	const char *		5023163	0					
ANR	5023520	Identifier	w		5023163	1					
ANR	5023521	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5023163	2		=			
ANR	5023522	Identifier	w		5023163	0					
ANR	5023523	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5023163	1					
ANR	5023524	Identifier	argv		5023163	0					
ANR	5023525	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5023163	1		-			
ANR	5023526	ArrayIndexing	ops [ i ] . str [ j ]		5023163	0					
ANR	5023527	MemberAccess	ops [ i ] . str		5023163	0					
ANR	5023528	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023529	Identifier	ops		5023163	0					
ANR	5023530	Identifier	i		5023163	1					
ANR	5023531	Identifier	str		5023163	1					
ANR	5023532	Identifier	j		5023163	1					
ANR	5023533	PrimaryExpression	'0'		5023163	1					
ANR	5023534	IfStatement	if ( w != NULL )		5023163	1					
ANR	5023535	Condition	w != NULL	103:10:2963:2971	5023163	0	True				
ANR	5023536	EqualityExpression	w != NULL		5023163	0		!=			
ANR	5023537	Identifier	w		5023163	0					
ANR	5023538	Identifier	NULL		5023163	1					
ANR	5023539	CompoundStatement		78:21:2384:2384	5023163	1					
ANR	5023540	ExpressionStatement	"strcpy ( newstr + k , w )"	104:7:2983:3003	5023163	0	True				
ANR	5023541	CallExpression	"strcpy ( newstr + k , w )"		5023163	0					
ANR	5023542	Callee	strcpy		5023163	0					
ANR	5023543	Identifier	strcpy		5023163	0					
ANR	5023544	ArgumentList	newstr + k		5023163	1					
ANR	5023545	Argument	newstr + k		5023163	0					
ANR	5023546	AdditiveExpression	newstr + k		5023163	0		+			
ANR	5023547	Identifier	newstr		5023163	0					
ANR	5023548	Identifier	k		5023163	1					
ANR	5023549	Argument	w		5023163	1					
ANR	5023550	Identifier	w		5023163	0					
ANR	5023551	ExpressionStatement	k += strlen ( w ) - 1	105:7:3012:3031	5023163	1	True				
ANR	5023552	AssignmentExpression	k += strlen ( w ) - 1		5023163	0		+=			
ANR	5023553	Identifier	k		5023163	0					
ANR	5023554	AdditiveExpression	strlen ( w ) - 1		5023163	1		-			
ANR	5023555	CallExpression	strlen ( w )		5023163	0					
ANR	5023556	Callee	strlen		5023163	0					
ANR	5023557	Identifier	strlen		5023163	0					
ANR	5023558	ArgumentList	w		5023163	1					
ANR	5023559	Argument	w		5023163	0					
ANR	5023560	Identifier	w		5023163	0					
ANR	5023561	PrimaryExpression	1		5023163	1					
ANR	5023562	ElseStatement	else		5023163	0					
ANR	5023563	CompoundStatement		82:12:2463:2463	5023163	0					
ANR	5023564	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	108:6:3061:3086	5023163	0	True				
ANR	5023565	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5023163	0		=			
ANR	5023566	ArrayIndexing	newstr [ k ]		5023163	0					
ANR	5023567	Identifier	newstr		5023163	0					
ANR	5023568	Identifier	k		5023163	1					
ANR	5023569	ArrayIndexing	ops [ i ] . str [ j ]		5023163	1					
ANR	5023570	MemberAccess	ops [ i ] . str		5023163	0					
ANR	5023571	ArrayIndexing	ops [ i ]		5023163	0					
ANR	5023572	Identifier	ops		5023163	0					
ANR	5023573	Identifier	i		5023163	1					
ANR	5023574	Identifier	str		5023163	1					
ANR	5023575	Identifier	j		5023163	1					
ANR	5023576	ExpressionStatement	newstr [ k ] = '\\0'	111:4:3105:3119	5023163	1	True				
ANR	5023577	AssignmentExpression	newstr [ k ] = '\\0'		5023163	0		=			
ANR	5023578	ArrayIndexing	newstr [ k ]		5023163	0					
ANR	5023579	Identifier	newstr		5023163	0					
ANR	5023580	Identifier	k		5023163	1					
ANR	5023581	PrimaryExpression	'\\0'		5023163	1					
ANR	5023582	ReturnStatement	return true ;	113:3:3129:3140	5023163	1	True				
ANR	5023583	Identifier	true		5023163	0					
ANR	5023584	IfStatement	if ( newstr != NULL )		5023163	3					
ANR	5023585	Condition	newstr != NULL	118:5:3181:3194	5023163	0	True				
ANR	5023586	EqualityExpression	newstr != NULL		5023163	0		!=			
ANR	5023587	Identifier	newstr		5023163	0					
ANR	5023588	Identifier	NULL		5023163	1					
ANR	5023589	CompoundStatement		93:21:2607:2607	5023163	1					
ANR	5023590	ExpressionStatement	newstr [ 0 ] = '\\0'	119:2:3201:3217	5023163	0	True				
ANR	5023591	AssignmentExpression	newstr [ 0 ] = '\\0'		5023163	0		=			
ANR	5023592	ArrayIndexing	newstr [ 0 ]		5023163	0					
ANR	5023593	Identifier	newstr		5023163	0					
ANR	5023594	PrimaryExpression	0		5023163	1					
ANR	5023595	PrimaryExpression	'\\0'		5023163	1					
ANR	5023596	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5023163	1					
ANR	5023597	ForInit	i = 0 ;	120:7:3226:3229	5023163	0	True				
ANR	5023598	AssignmentExpression	i = 0		5023163	0		=			
ANR	5023599	Identifier	i		5023163	0					
ANR	5023600	PrimaryExpression	0		5023163	1					
ANR	5023601	Condition	i < argc	120:12:3231:3236	5023163	1	True				
ANR	5023602	RelationalExpression	i < argc		5023163	0		<			
ANR	5023603	Identifier	i		5023163	0					
ANR	5023604	Identifier	argc		5023163	1					
ANR	5023605	PostIncDecOperationExpression	i ++	120:20:3239:3241	5023163	2	True				
ANR	5023606	Identifier	i		5023163	0					
ANR	5023607	IncDec	++		5023163	1					
ANR	5023608	CompoundStatement		95:25:2654:2654	5023163	3					
ANR	5023609	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	121:3:3249:3273	5023163	0	True				
ANR	5023610	CallExpression	"strcat ( newstr , argv [ i ] )"		5023163	0					
ANR	5023611	Callee	strcat		5023163	0					
ANR	5023612	Identifier	strcat		5023163	0					
ANR	5023613	ArgumentList	newstr		5023163	1					
ANR	5023614	Argument	newstr		5023163	0					
ANR	5023615	Identifier	newstr		5023163	0					
ANR	5023616	Argument	argv [ i ]		5023163	1					
ANR	5023617	ArrayIndexing	argv [ i ]		5023163	0					
ANR	5023618	Identifier	argv		5023163	0					
ANR	5023619	Identifier	i		5023163	1					
ANR	5023620	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	122:3:3278:3328	5023163	1	True				
ANR	5023621	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5023163	0					
ANR	5023622	Callee	strcat		5023163	0					
ANR	5023623	Identifier	strcat		5023163	0					
ANR	5023624	ArgumentList	newstr		5023163	1					
ANR	5023625	Argument	newstr		5023163	0					
ANR	5023626	Identifier	newstr		5023163	0					
ANR	5023627	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5023163	1					
ANR	5023628	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5023163	0					
ANR	5023629	Condition	i == 0 || i == argc - 1		5023163	0					
ANR	5023630	OrExpression	i == 0 || i == argc - 1		5023163	0		||			
ANR	5023631	EqualityExpression	i == 0		5023163	0		==			
ANR	5023632	Identifier	i		5023163	0					
ANR	5023633	PrimaryExpression	0		5023163	1					
ANR	5023634	EqualityExpression	i == argc - 1		5023163	1		==			
ANR	5023635	Identifier	i		5023163	0					
ANR	5023636	AdditiveExpression	argc - 1		5023163	1		-			
ANR	5023637	Identifier	argc		5023163	0					
ANR	5023638	PrimaryExpression	1		5023163	1					
ANR	5023639	PrimaryExpression	""" """		5023163	1					
ANR	5023640	PrimaryExpression	""", """		5023163	2					
ANR	5023641	ReturnStatement	return false ;	126:1:3339:3351	5023163	4	True				
ANR	5023642	Identifier	false		5023163	0					
ANR	5023643	ReturnType	static int		5023163	1					
ANR	5023644	Identifier	replace		5023163	2					
ANR	5023645	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5023163	3					
ANR	5023646	Parameter	int argc	26:19:545:552	5023163	0	True				
ANR	5023647	ParameterType	int		5023163	0					
ANR	5023648	Identifier	argc		5023163	1					
ANR	5023649	Parameter	const char * argv [ ]	26:29:555:572	5023163	1	True				
ANR	5023650	ParameterType	const char * [ ]		5023163	0					
ANR	5023651	Identifier	argv		5023163	1					
ANR	5023652	Parameter	char * newstr	26:49:575:586	5023163	2	True				
ANR	5023653	ParameterType	char *		5023163	0					
ANR	5023654	Identifier	newstr		5023163	1					
ANR	5023655	CFGEntryNode	ENTRY		5023163		True				
ANR	5023656	CFGExitNode	EXIT		5023163		True				
ANR	5023657	Symbol	* ops [ i ] . str		5023163						
ANR	5023658	Symbol	* * ops		5023163						
ANR	5023659	Symbol	* argv		5023163						
ANR	5023660	Symbol	argv		5023163						
ANR	5023661	Symbol	ops [ i ] . str		5023163						
ANR	5023662	Symbol	strlen		5023163						
ANR	5023663	Symbol	ops [ i ] . op		5023163						
ANR	5023664	Symbol	* ops		5023163						
ANR	5023665	Symbol	argc		5023163						
ANR	5023666	Symbol	strcmp		5023163						
ANR	5023667	Symbol	* * j		5023163						
ANR	5023668	Symbol	* * i		5023163						
ANR	5023669	Symbol	NULL		5023163						
ANR	5023670	Symbol	ops [ i ] . max_operands		5023163						
ANR	5023671	Symbol	* * ops [ i ] . str		5023163						
ANR	5023672	Symbol	false		5023163						
ANR	5023673	Symbol	i		5023163						
ANR	5023674	Symbol	j		5023163						
ANR	5023675	Symbol	k		5023163						
ANR	5023676	Symbol	newstr		5023163						
ANR	5023677	Symbol	* * * ops		5023163						
ANR	5023678	Symbol	ops		5023163						
ANR	5023679	Symbol	* i		5023163						
ANR	5023680	Symbol	* newstr		5023163						
ANR	5023681	Symbol	* j		5023163						
ANR	5023682	Symbol	* k		5023163						
ANR	5023683	Symbol	w		5023163						
ANR	5023684	Symbol	* * * i		5023163						
ANR	5023685	Symbol	true		5023163						
ANR	5023686	Symbol	can_replace		5023163						
ANR	5023687	Function	parse	130:0:3371:5831							
ANR	5023688	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5023687	0					
ANR	5023689	CompoundStatement		130:57:3428:5831	5023687	0					
ANR	5023690	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	131:1:3431:3457	5023687	0	True				
ANR	5023691	IdentifierDecl	i		5023687	0					
ANR	5023692	IdentifierDeclType	int		5023687	0					
ANR	5023693	Identifier	i		5023687	1					
ANR	5023694	IdentifierDecl	len = strlen ( data )		5023687	1					
ANR	5023695	IdentifierDeclType	int		5023687	0					
ANR	5023696	Identifier	len		5023687	1					
ANR	5023697	AssignmentExpression	len = strlen ( data )		5023687	2		=			
ANR	5023698	Identifier	len		5023687	0					
ANR	5023699	CallExpression	strlen ( data )		5023687	1					
ANR	5023700	Callee	strlen		5023687	0					
ANR	5023701	Identifier	strlen		5023687	0					
ANR	5023702	ArgumentList	data		5023687	1					
ANR	5023703	Argument	data		5023687	0					
ANR	5023704	Identifier	data		5023687	0					
ANR	5023705	IdentifierDeclStatement	char w0 [ WSZ ] ;	132:1:3460:3472	5023687	1	True				
ANR	5023706	IdentifierDecl	w0 [ WSZ ]		5023687	0					
ANR	5023707	IdentifierDeclType	char [ WSZ ]		5023687	0					
ANR	5023708	Identifier	w0		5023687	1					
ANR	5023709	Identifier	WSZ		5023687	2					
ANR	5023710	IdentifierDeclStatement	char w1 [ WSZ ] ;	133:1:3475:3487	5023687	2	True				
ANR	5023711	IdentifierDecl	w1 [ WSZ ]		5023687	0					
ANR	5023712	IdentifierDeclType	char [ WSZ ]		5023687	0					
ANR	5023713	Identifier	w1		5023687	1					
ANR	5023714	Identifier	WSZ		5023687	2					
ANR	5023715	IdentifierDeclStatement	char w2 [ WSZ ] ;	134:1:3490:3502	5023687	3	True				
ANR	5023716	IdentifierDecl	w2 [ WSZ ]		5023687	0					
ANR	5023717	IdentifierDeclType	char [ WSZ ]		5023687	0					
ANR	5023718	Identifier	w2		5023687	1					
ANR	5023719	Identifier	WSZ		5023687	2					
ANR	5023720	IdentifierDeclStatement	char w3 [ WSZ ] ;	135:1:3505:3517	5023687	4	True				
ANR	5023721	IdentifierDecl	w3 [ WSZ ]		5023687	0					
ANR	5023722	IdentifierDeclType	char [ WSZ ]		5023687	0					
ANR	5023723	Identifier	w3		5023687	1					
ANR	5023724	Identifier	WSZ		5023687	2					
ANR	5023725	IdentifierDeclStatement	char w4 [ WSZ ] ;	136:1:3520:3532	5023687	5	True				
ANR	5023726	IdentifierDecl	w4 [ WSZ ]		5023687	0					
ANR	5023727	IdentifierDeclType	char [ WSZ ]		5023687	0					
ANR	5023728	Identifier	w4		5023687	1					
ANR	5023729	Identifier	WSZ		5023687	2					
ANR	5023730	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	137:1:3535:3557	5023687	6	True				
ANR	5023731	IdentifierDecl	* buf		5023687	0					
ANR	5023732	IdentifierDeclType	char *		5023687	0					
ANR	5023733	Identifier	buf		5023687	1					
ANR	5023734	IdentifierDecl	* ptr		5023687	1					
ANR	5023735	IdentifierDeclType	char *		5023687	0					
ANR	5023736	Identifier	ptr		5023687	1					
ANR	5023737	IdentifierDecl	* optr		5023687	2					
ANR	5023738	IdentifierDeclType	char *		5023687	0					
ANR	5023739	Identifier	optr		5023687	1					
ANR	5023740	IfStatement	"if ( ! strcmp ( data , ""jr ra"" ) )"		5023687	7					
ANR	5023741	Condition	"! strcmp ( data , ""jr ra"" )"	139:5:3565:3587	5023687	0	True				
ANR	5023742	UnaryOperationExpression	"! strcmp ( data , ""jr ra"" )"		5023687	0					
ANR	5023743	UnaryOperator	!		5023687	0					
ANR	5023744	CallExpression	"strcmp ( data , ""jr ra"" )"		5023687	1					
ANR	5023745	Callee	strcmp		5023687	0					
ANR	5023746	Identifier	strcmp		5023687	0					
ANR	5023747	ArgumentList	data		5023687	1					
ANR	5023748	Argument	data		5023687	0					
ANR	5023749	Identifier	data		5023687	0					
ANR	5023750	Argument	"""jr ra"""		5023687	1					
ANR	5023751	PrimaryExpression	"""jr ra"""		5023687	0					
ANR	5023752	CompoundStatement		10:30:161:161	5023687	1					
ANR	5023753	ExpressionStatement	"strcpy ( str , ""ret"" )"	140:2:3594:3613	5023687	0	True				
ANR	5023754	CallExpression	"strcpy ( str , ""ret"" )"		5023687	0					
ANR	5023755	Callee	strcpy		5023687	0					
ANR	5023756	Identifier	strcpy		5023687	0					
ANR	5023757	ArgumentList	str		5023687	1					
ANR	5023758	Argument	str		5023687	0					
ANR	5023759	Identifier	str		5023687	0					
ANR	5023760	Argument	"""ret"""		5023687	1					
ANR	5023761	PrimaryExpression	"""ret"""		5023687	0					
ANR	5023762	ReturnStatement	return true ;	141:2:3617:3628	5023687	1	True				
ANR	5023763	Identifier	true		5023687	0					
ANR	5023764	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5023687	8					
ANR	5023765	Condition	! ( buf = malloc ( len + 1 ) )	145:5:3670:3694	5023687	0	True				
ANR	5023766	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5023687	0					
ANR	5023767	UnaryOperator	!		5023687	0					
ANR	5023768	AssignmentExpression	buf = malloc ( len + 1 )		5023687	1		=			
ANR	5023769	Identifier	buf		5023687	0					
ANR	5023770	CallExpression	malloc ( len + 1 )		5023687	1					
ANR	5023771	Callee	malloc		5023687	0					
ANR	5023772	Identifier	malloc		5023687	0					
ANR	5023773	ArgumentList	len + 1		5023687	1					
ANR	5023774	Argument	len + 1		5023687	0					
ANR	5023775	AdditiveExpression	len + 1		5023687	0		+			
ANR	5023776	Identifier	len		5023687	0					
ANR	5023777	PrimaryExpression	1		5023687	1					
ANR	5023778	CompoundStatement		16:32:268:268	5023687	1					
ANR	5023779	ReturnStatement	return false ;	146:2:3701:3713	5023687	0	True				
ANR	5023780	Identifier	false		5023687	0					
ANR	5023781	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	148:1:3719:3744	5023687	9	True				
ANR	5023782	CallExpression	"memcpy ( buf , data , len + 1 )"		5023687	0					
ANR	5023783	Callee	memcpy		5023687	0					
ANR	5023784	Identifier	memcpy		5023687	0					
ANR	5023785	ArgumentList	buf		5023687	1					
ANR	5023786	Argument	buf		5023687	0					
ANR	5023787	Identifier	buf		5023687	0					
ANR	5023788	Argument	data		5023687	1					
ANR	5023789	Identifier	data		5023687	0					
ANR	5023790	Argument	len + 1		5023687	2					
ANR	5023791	AdditiveExpression	len + 1		5023687	0		+			
ANR	5023792	Identifier	len		5023687	0					
ANR	5023793	PrimaryExpression	1		5023687	1					
ANR	5023794	ExpressionStatement	"r_str_replace_char ( buf , '(' , ',' )"	150:1:3748:3782	5023687	10	True				
ANR	5023795	CallExpression	"r_str_replace_char ( buf , '(' , ',' )"		5023687	0					
ANR	5023796	Callee	r_str_replace_char		5023687	0					
ANR	5023797	Identifier	r_str_replace_char		5023687	0					
ANR	5023798	ArgumentList	buf		5023687	1					
ANR	5023799	Argument	buf		5023687	0					
ANR	5023800	Identifier	buf		5023687	0					
ANR	5023801	Argument	'('		5023687	1					
ANR	5023802	PrimaryExpression	'('		5023687	0					
ANR	5023803	Argument	"','"		5023687	2					
ANR	5023804	PrimaryExpression	"','"		5023687	0					
ANR	5023805	ExpressionStatement	"r_str_replace_char ( buf , ')' , ' ' )"	151:1:3785:3819	5023687	11	True				
ANR	5023806	CallExpression	"r_str_replace_char ( buf , ')' , ' ' )"		5023687	0					
ANR	5023807	Callee	r_str_replace_char		5023687	0					
ANR	5023808	Identifier	r_str_replace_char		5023687	0					
ANR	5023809	ArgumentList	buf		5023687	1					
ANR	5023810	Argument	buf		5023687	0					
ANR	5023811	Identifier	buf		5023687	0					
ANR	5023812	Argument	')'		5023687	1					
ANR	5023813	PrimaryExpression	')'		5023687	0					
ANR	5023814	Argument	' '		5023687	2					
ANR	5023815	PrimaryExpression	' '		5023687	0					
ANR	5023816	ExpressionStatement	r_str_trim ( buf )	152:1:3822:3838	5023687	12	True				
ANR	5023817	CallExpression	r_str_trim ( buf )		5023687	0					
ANR	5023818	Callee	r_str_trim		5023687	0					
ANR	5023819	Identifier	r_str_trim		5023687	0					
ANR	5023820	ArgumentList	buf		5023687	1					
ANR	5023821	Argument	buf		5023687	0					
ANR	5023822	Identifier	buf		5023687	0					
ANR	5023823	IfStatement	if ( * buf )		5023687	13					
ANR	5023824	Condition	* buf	154:5:3846:3849	5023687	0	True				
ANR	5023825	UnaryOperationExpression	* buf		5023687	0					
ANR	5023826	UnaryOperator	*		5023687	0					
ANR	5023827	Identifier	buf		5023687	1					
ANR	5023828	CompoundStatement		25:11:423:423	5023687	1					
ANR	5023829	ExpressionStatement	w0 [ 0 ] = '\\0'	155:2:3856:3866	5023687	0	True				
ANR	5023830	AssignmentExpression	w0 [ 0 ] = '\\0'		5023687	0		=			
ANR	5023831	ArrayIndexing	w0 [ 0 ]		5023687	0					
ANR	5023832	Identifier	w0		5023687	0					
ANR	5023833	PrimaryExpression	0		5023687	1					
ANR	5023834	PrimaryExpression	'\\0'		5023687	1					
ANR	5023835	ExpressionStatement	w1 [ 0 ] = '\\0'	156:2:3870:3880	5023687	1	True				
ANR	5023836	AssignmentExpression	w1 [ 0 ] = '\\0'		5023687	0		=			
ANR	5023837	ArrayIndexing	w1 [ 0 ]		5023687	0					
ANR	5023838	Identifier	w1		5023687	0					
ANR	5023839	PrimaryExpression	0		5023687	1					
ANR	5023840	PrimaryExpression	'\\0'		5023687	1					
ANR	5023841	ExpressionStatement	w2 [ 0 ] = '\\0'	157:2:3884:3894	5023687	2	True				
ANR	5023842	AssignmentExpression	w2 [ 0 ] = '\\0'		5023687	0		=			
ANR	5023843	ArrayIndexing	w2 [ 0 ]		5023687	0					
ANR	5023844	Identifier	w2		5023687	0					
ANR	5023845	PrimaryExpression	0		5023687	1					
ANR	5023846	PrimaryExpression	'\\0'		5023687	1					
ANR	5023847	ExpressionStatement	w3 [ 0 ] = '\\0'	158:2:3898:3908	5023687	3	True				
ANR	5023848	AssignmentExpression	w3 [ 0 ] = '\\0'		5023687	0		=			
ANR	5023849	ArrayIndexing	w3 [ 0 ]		5023687	0					
ANR	5023850	Identifier	w3		5023687	0					
ANR	5023851	PrimaryExpression	0		5023687	1					
ANR	5023852	PrimaryExpression	'\\0'		5023687	1					
ANR	5023853	ExpressionStatement	w4 [ 0 ] = '\\0'	159:2:3912:3922	5023687	4	True				
ANR	5023854	AssignmentExpression	w4 [ 0 ] = '\\0'		5023687	0		=			
ANR	5023855	ArrayIndexing	w4 [ 0 ]		5023687	0					
ANR	5023856	Identifier	w4		5023687	0					
ANR	5023857	PrimaryExpression	0		5023687	1					
ANR	5023858	PrimaryExpression	'\\0'		5023687	1					
ANR	5023859	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	160:2:3926:3949	5023687	5	True				
ANR	5023860	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5023687	0		=			
ANR	5023861	Identifier	ptr		5023687	0					
ANR	5023862	CallExpression	"strchr ( buf , ' ' )"		5023687	1					
ANR	5023863	Callee	strchr		5023687	0					
ANR	5023864	Identifier	strchr		5023687	0					
ANR	5023865	ArgumentList	buf		5023687	1					
ANR	5023866	Argument	buf		5023687	0					
ANR	5023867	Identifier	buf		5023687	0					
ANR	5023868	Argument	' '		5023687	1					
ANR	5023869	PrimaryExpression	' '		5023687	0					
ANR	5023870	IfStatement	if ( ! ptr )		5023687	6					
ANR	5023871	Condition	! ptr	161:6:3957:3960	5023687	0	True				
ANR	5023872	UnaryOperationExpression	! ptr		5023687	0					
ANR	5023873	UnaryOperator	!		5023687	0					
ANR	5023874	Identifier	ptr		5023687	1					
ANR	5023875	CompoundStatement		32:12:534:534	5023687	1					
ANR	5023876	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	162:3:3968:3992	5023687	0	True				
ANR	5023877	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5023687	0		=			
ANR	5023878	Identifier	ptr		5023687	0					
ANR	5023879	CallExpression	"strchr ( buf , '\\t' )"		5023687	1					
ANR	5023880	Callee	strchr		5023687	0					
ANR	5023881	Identifier	strchr		5023687	0					
ANR	5023882	ArgumentList	buf		5023687	1					
ANR	5023883	Argument	buf		5023687	0					
ANR	5023884	Identifier	buf		5023687	0					
ANR	5023885	Argument	'\\t'		5023687	1					
ANR	5023886	PrimaryExpression	'\\t'		5023687	0					
ANR	5023887	IfStatement	if ( ptr )		5023687	7					
ANR	5023888	Condition	ptr	164:6:4004:4006	5023687	0	True				
ANR	5023889	Identifier	ptr		5023687	0					
ANR	5023890	CompoundStatement		35:11:580:580	5023687	1					
ANR	5023891	ExpressionStatement	* ptr = '\\0'	165:3:4014:4025	5023687	0	True				
ANR	5023892	AssignmentExpression	* ptr = '\\0'		5023687	0		=			
ANR	5023893	UnaryOperationExpression	* ptr		5023687	0					
ANR	5023894	UnaryOperator	*		5023687	0					
ANR	5023895	Identifier	ptr		5023687	1					
ANR	5023896	PrimaryExpression	'\\0'		5023687	1					
ANR	5023897	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5023687	1					
ANR	5023898	ForInit	++ ptr ;	166:8:4035:4040	5023687	0	True				
ANR	5023899	UnaryExpression	++ ptr		5023687	0					
ANR	5023900	IncDec	++		5023687	0					
ANR	5023901	Identifier	ptr		5023687	1					
ANR	5023902	Condition	* ptr == ' '	166:15:4042:4052	5023687	1	True				
ANR	5023903	EqualityExpression	* ptr == ' '		5023687	0		==			
ANR	5023904	UnaryOperationExpression	* ptr		5023687	0					
ANR	5023905	UnaryOperator	*		5023687	0					
ANR	5023906	Identifier	ptr		5023687	1					
ANR	5023907	PrimaryExpression	' '		5023687	1					
ANR	5023908	PostIncDecOperationExpression	ptr ++	166:28:4055:4059	5023687	2	True				
ANR	5023909	Identifier	ptr		5023687	0					
ANR	5023910	IncDec	++		5023687	1					
ANR	5023911	CompoundStatement		37:35:633:633	5023687	3					
ANR	5023912	ExpressionStatement		167:4:4068:4068	5023687	0	True				
ANR	5023913	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	169:3:4078:4104	5023687	2	True				
ANR	5023914	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5023687	0					
ANR	5023915	Callee	strncpy		5023687	0					
ANR	5023916	Identifier	strncpy		5023687	0					
ANR	5023917	ArgumentList	w0		5023687	1					
ANR	5023918	Argument	w0		5023687	0					
ANR	5023919	Identifier	w0		5023687	0					
ANR	5023920	Argument	buf		5023687	1					
ANR	5023921	Identifier	buf		5023687	0					
ANR	5023922	Argument	WSZ - 1		5023687	2					
ANR	5023923	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5023924	Identifier	WSZ		5023687	0					
ANR	5023925	PrimaryExpression	1		5023687	1					
ANR	5023926	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	170:3:4109:4135	5023687	3	True				
ANR	5023927	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5023687	0					
ANR	5023928	Callee	strncpy		5023687	0					
ANR	5023929	Identifier	strncpy		5023687	0					
ANR	5023930	ArgumentList	w1		5023687	1					
ANR	5023931	Argument	w1		5023687	0					
ANR	5023932	Identifier	w1		5023687	0					
ANR	5023933	Argument	ptr		5023687	1					
ANR	5023934	Identifier	ptr		5023687	0					
ANR	5023935	Argument	WSZ - 1		5023687	2					
ANR	5023936	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5023937	Identifier	WSZ		5023687	0					
ANR	5023938	PrimaryExpression	1		5023687	1					
ANR	5023939	ExpressionStatement	optr = ptr	172:3:4141:4149	5023687	4	True				
ANR	5023940	AssignmentExpression	optr = ptr		5023687	0		=			
ANR	5023941	Identifier	optr		5023687	0					
ANR	5023942	Identifier	ptr		5023687	1					
ANR	5023943	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	173:3:4154:4177	5023687	5	True				
ANR	5023944	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5023687	0		=			
ANR	5023945	Identifier	ptr		5023687	0					
ANR	5023946	CallExpression	"strchr ( ptr , ',' )"		5023687	1					
ANR	5023947	Callee	strchr		5023687	0					
ANR	5023948	Identifier	strchr		5023687	0					
ANR	5023949	ArgumentList	ptr		5023687	1					
ANR	5023950	Argument	ptr		5023687	0					
ANR	5023951	Identifier	ptr		5023687	0					
ANR	5023952	Argument	"','"		5023687	1					
ANR	5023953	PrimaryExpression	"','"		5023687	0					
ANR	5023954	IfStatement	if ( ptr )		5023687	6					
ANR	5023955	Condition	ptr	174:7:4186:4188	5023687	0	True				
ANR	5023956	Identifier	ptr		5023687	0					
ANR	5023957	CompoundStatement		45:12:762:762	5023687	1					
ANR	5023958	ExpressionStatement	* ptr = '\\0'	175:4:4197:4208	5023687	0	True				
ANR	5023959	AssignmentExpression	* ptr = '\\0'		5023687	0		=			
ANR	5023960	UnaryOperationExpression	* ptr		5023687	0					
ANR	5023961	UnaryOperator	*		5023687	0					
ANR	5023962	Identifier	ptr		5023687	1					
ANR	5023963	PrimaryExpression	'\\0'		5023687	1					
ANR	5023964	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5023687	1					
ANR	5023965	ForInit	++ ptr ;	176:9:4219:4224	5023687	0	True				
ANR	5023966	UnaryExpression	++ ptr		5023687	0					
ANR	5023967	IncDec	++		5023687	0					
ANR	5023968	Identifier	ptr		5023687	1					
ANR	5023969	Condition	* ptr == ' '	176:16:4226:4236	5023687	1	True				
ANR	5023970	EqualityExpression	* ptr == ' '		5023687	0		==			
ANR	5023971	UnaryOperationExpression	* ptr		5023687	0					
ANR	5023972	UnaryOperator	*		5023687	0					
ANR	5023973	Identifier	ptr		5023687	1					
ANR	5023974	PrimaryExpression	' '		5023687	1					
ANR	5023975	PostIncDecOperationExpression	ptr ++	176:29:4239:4243	5023687	2	True				
ANR	5023976	Identifier	ptr		5023687	0					
ANR	5023977	IncDec	++		5023687	1					
ANR	5023978	CompoundStatement		47:36:817:817	5023687	3					
ANR	5023979	ExpressionStatement		177:5:4253:4253	5023687	0	True				
ANR	5023980	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	179:4:4265:4292	5023687	2	True				
ANR	5023981	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5023687	0					
ANR	5023982	Callee	strncpy		5023687	0					
ANR	5023983	Identifier	strncpy		5023687	0					
ANR	5023984	ArgumentList	w1		5023687	1					
ANR	5023985	Argument	w1		5023687	0					
ANR	5023986	Identifier	w1		5023687	0					
ANR	5023987	Argument	optr		5023687	1					
ANR	5023988	Identifier	optr		5023687	0					
ANR	5023989	Argument	WSZ - 1		5023687	2					
ANR	5023990	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5023991	Identifier	WSZ		5023687	0					
ANR	5023992	PrimaryExpression	1		5023687	1					
ANR	5023993	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	180:4:4298:4324	5023687	3	True				
ANR	5023994	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5023687	0					
ANR	5023995	Callee	strncpy		5023687	0					
ANR	5023996	Identifier	strncpy		5023687	0					
ANR	5023997	ArgumentList	w2		5023687	1					
ANR	5023998	Argument	w2		5023687	0					
ANR	5023999	Identifier	w2		5023687	0					
ANR	5024000	Argument	ptr		5023687	1					
ANR	5024001	Identifier	ptr		5023687	0					
ANR	5024002	Argument	WSZ - 1		5023687	2					
ANR	5024003	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024004	Identifier	WSZ		5023687	0					
ANR	5024005	PrimaryExpression	1		5023687	1					
ANR	5024006	ExpressionStatement	optr = ptr	181:4:4330:4338	5023687	4	True				
ANR	5024007	AssignmentExpression	optr = ptr		5023687	0		=			
ANR	5024008	Identifier	optr		5023687	0					
ANR	5024009	Identifier	ptr		5023687	1					
ANR	5024010	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	182:4:4344:4367	5023687	5	True				
ANR	5024011	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5023687	0		=			
ANR	5024012	Identifier	ptr		5023687	0					
ANR	5024013	CallExpression	"strchr ( ptr , ',' )"		5023687	1					
ANR	5024014	Callee	strchr		5023687	0					
ANR	5024015	Identifier	strchr		5023687	0					
ANR	5024016	ArgumentList	ptr		5023687	1					
ANR	5024017	Argument	ptr		5023687	0					
ANR	5024018	Identifier	ptr		5023687	0					
ANR	5024019	Argument	"','"		5023687	1					
ANR	5024020	PrimaryExpression	"','"		5023687	0					
ANR	5024021	IfStatement	if ( ptr )		5023687	6					
ANR	5024022	Condition	ptr	183:8:4377:4379	5023687	0	True				
ANR	5024023	Identifier	ptr		5023687	0					
ANR	5024024	CompoundStatement		54:13:953:953	5023687	1					
ANR	5024025	ExpressionStatement	* ptr = '\\0'	184:5:4389:4400	5023687	0	True				
ANR	5024026	AssignmentExpression	* ptr = '\\0'		5023687	0		=			
ANR	5024027	UnaryOperationExpression	* ptr		5023687	0					
ANR	5024028	UnaryOperator	*		5023687	0					
ANR	5024029	Identifier	ptr		5023687	1					
ANR	5024030	PrimaryExpression	'\\0'		5023687	1					
ANR	5024031	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5023687	1					
ANR	5024032	ForInit	++ ptr ;	185:10:4412:4417	5023687	0	True				
ANR	5024033	UnaryExpression	++ ptr		5023687	0					
ANR	5024034	IncDec	++		5023687	0					
ANR	5024035	Identifier	ptr		5023687	1					
ANR	5024036	Condition	* ptr == ' '	185:17:4419:4429	5023687	1	True				
ANR	5024037	EqualityExpression	* ptr == ' '		5023687	0		==			
ANR	5024038	UnaryOperationExpression	* ptr		5023687	0					
ANR	5024039	UnaryOperator	*		5023687	0					
ANR	5024040	Identifier	ptr		5023687	1					
ANR	5024041	PrimaryExpression	' '		5023687	1					
ANR	5024042	PostIncDecOperationExpression	ptr ++	185:30:4432:4436	5023687	2	True				
ANR	5024043	Identifier	ptr		5023687	0					
ANR	5024044	IncDec	++		5023687	1					
ANR	5024045	CompoundStatement		56:37:1010:1010	5023687	3					
ANR	5024046	ExpressionStatement		186:6:4447:4447	5023687	0	True				
ANR	5024047	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	188:5:4461:4488	5023687	2	True				
ANR	5024048	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5023687	0					
ANR	5024049	Callee	strncpy		5023687	0					
ANR	5024050	Identifier	strncpy		5023687	0					
ANR	5024051	ArgumentList	w2		5023687	1					
ANR	5024052	Argument	w2		5023687	0					
ANR	5024053	Identifier	w2		5023687	0					
ANR	5024054	Argument	optr		5023687	1					
ANR	5024055	Identifier	optr		5023687	0					
ANR	5024056	Argument	WSZ - 1		5023687	2					
ANR	5024057	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024058	Identifier	WSZ		5023687	0					
ANR	5024059	PrimaryExpression	1		5023687	1					
ANR	5024060	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	189:5:4495:4521	5023687	3	True				
ANR	5024061	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5023687	0					
ANR	5024062	Callee	strncpy		5023687	0					
ANR	5024063	Identifier	strncpy		5023687	0					
ANR	5024064	ArgumentList	w3		5023687	1					
ANR	5024065	Argument	w3		5023687	0					
ANR	5024066	Identifier	w3		5023687	0					
ANR	5024067	Argument	ptr		5023687	1					
ANR	5024068	Identifier	ptr		5023687	0					
ANR	5024069	Argument	WSZ - 1		5023687	2					
ANR	5024070	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024071	Identifier	WSZ		5023687	0					
ANR	5024072	PrimaryExpression	1		5023687	1					
ANR	5024073	ExpressionStatement	optr = ptr	190:5:4528:4536	5023687	4	True				
ANR	5024074	AssignmentExpression	optr = ptr		5023687	0		=			
ANR	5024075	Identifier	optr		5023687	0					
ANR	5024076	Identifier	ptr		5023687	1					
ANR	5024077	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	192:5:4552:4575	5023687	5	True				
ANR	5024078	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5023687	0		=			
ANR	5024079	Identifier	ptr		5023687	0					
ANR	5024080	CallExpression	"strchr ( ptr , ',' )"		5023687	1					
ANR	5024081	Callee	strchr		5023687	0					
ANR	5024082	Identifier	strchr		5023687	0					
ANR	5024083	ArgumentList	ptr		5023687	1					
ANR	5024084	Argument	ptr		5023687	0					
ANR	5024085	Identifier	ptr		5023687	0					
ANR	5024086	Argument	"','"		5023687	1					
ANR	5024087	PrimaryExpression	"','"		5023687	0					
ANR	5024088	IfStatement	if ( ptr )		5023687	6					
ANR	5024089	Condition	ptr	193:9:4586:4588	5023687	0	True				
ANR	5024090	Identifier	ptr		5023687	0					
ANR	5024091	CompoundStatement		64:14:1162:1162	5023687	1					
ANR	5024092	ExpressionStatement	* ptr = '\\0'	194:6:4599:4610	5023687	0	True				
ANR	5024093	AssignmentExpression	* ptr = '\\0'		5023687	0		=			
ANR	5024094	UnaryOperationExpression	* ptr		5023687	0					
ANR	5024095	UnaryOperator	*		5023687	0					
ANR	5024096	Identifier	ptr		5023687	1					
ANR	5024097	PrimaryExpression	'\\0'		5023687	1					
ANR	5024098	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5023687	1					
ANR	5024099	ForInit	++ ptr ;	195:11:4623:4628	5023687	0	True				
ANR	5024100	UnaryExpression	++ ptr		5023687	0					
ANR	5024101	IncDec	++		5023687	0					
ANR	5024102	Identifier	ptr		5023687	1					
ANR	5024103	Condition	* ptr == ' '	195:18:4630:4640	5023687	1	True				
ANR	5024104	EqualityExpression	* ptr == ' '		5023687	0		==			
ANR	5024105	UnaryOperationExpression	* ptr		5023687	0					
ANR	5024106	UnaryOperator	*		5023687	0					
ANR	5024107	Identifier	ptr		5023687	1					
ANR	5024108	PrimaryExpression	' '		5023687	1					
ANR	5024109	PostIncDecOperationExpression	ptr ++	195:31:4643:4647	5023687	2	True				
ANR	5024110	Identifier	ptr		5023687	0					
ANR	5024111	IncDec	++		5023687	1					
ANR	5024112	CompoundStatement		66:38:1221:1221	5023687	3					
ANR	5024113	ExpressionStatement		196:7:4659:4659	5023687	0	True				
ANR	5024114	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	198:6:4675:4702	5023687	2	True				
ANR	5024115	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5023687	0					
ANR	5024116	Callee	strncpy		5023687	0					
ANR	5024117	Identifier	strncpy		5023687	0					
ANR	5024118	ArgumentList	w3		5023687	1					
ANR	5024119	Argument	w3		5023687	0					
ANR	5024120	Identifier	w3		5023687	0					
ANR	5024121	Argument	optr		5023687	1					
ANR	5024122	Identifier	optr		5023687	0					
ANR	5024123	Argument	WSZ - 1		5023687	2					
ANR	5024124	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024125	Identifier	WSZ		5023687	0					
ANR	5024126	PrimaryExpression	1		5023687	1					
ANR	5024127	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	199:6:4710:4736	5023687	3	True				
ANR	5024128	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5023687	0					
ANR	5024129	Callee	strncpy		5023687	0					
ANR	5024130	Identifier	strncpy		5023687	0					
ANR	5024131	ArgumentList	w4		5023687	1					
ANR	5024132	Argument	w4		5023687	0					
ANR	5024133	Identifier	w4		5023687	0					
ANR	5024134	Argument	ptr		5023687	1					
ANR	5024135	Identifier	ptr		5023687	0					
ANR	5024136	Argument	WSZ - 1		5023687	2					
ANR	5024137	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024138	Identifier	WSZ		5023687	0					
ANR	5024139	PrimaryExpression	1		5023687	1					
ANR	5024140	ElseStatement	else		5023687	0					
ANR	5024141	CompoundStatement		74:9:1336:1336	5023687	0					
ANR	5024142	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	204:3:4770:4796	5023687	0	True				
ANR	5024143	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5023687	0					
ANR	5024144	Callee	strncpy		5023687	0					
ANR	5024145	Identifier	strncpy		5023687	0					
ANR	5024146	ArgumentList	w0		5023687	1					
ANR	5024147	Argument	w0		5023687	0					
ANR	5024148	Identifier	w0		5023687	0					
ANR	5024149	Argument	buf		5023687	1					
ANR	5024150	Identifier	buf		5023687	0					
ANR	5024151	Argument	WSZ - 1		5023687	2					
ANR	5024152	AdditiveExpression	WSZ - 1		5023687	0		-			
ANR	5024153	Identifier	WSZ		5023687	0					
ANR	5024154	PrimaryExpression	1		5023687	1					
ANR	5024155	CompoundStatement		79:3:1426:1436	5023687	8					
ANR	5024156	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	207:3:4809:4850	5023687	0	True				
ANR	5024157	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5023687	0					
ANR	5024158	IdentifierDeclType	const char * [ ]		5023687	0					
ANR	5024159	Identifier	wa		5023687	1					
ANR	5024160	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5023687	2		=			
ANR	5024161	Identifier	wa		5023687	0					
ANR	5024162	InitializerList	w0		5023687	1					
ANR	5024163	Identifier	w0		5023687	0					
ANR	5024164	Identifier	w1		5023687	1					
ANR	5024165	Identifier	w2		5023687	2					
ANR	5024166	Identifier	w3		5023687	3					
ANR	5024167	Identifier	w4		5023687	4					
ANR	5024168	IdentifierDeclStatement	int nw = 0 ;	208:3:4855:4865	5023687	1	True				
ANR	5024169	IdentifierDecl	nw = 0		5023687	0					
ANR	5024170	IdentifierDeclType	int		5023687	0					
ANR	5024171	Identifier	nw		5023687	1					
ANR	5024172	AssignmentExpression	nw = 0		5023687	2		=			
ANR	5024173	Identifier	nw		5023687	0					
ANR	5024174	PrimaryExpression	0		5023687	1					
ANR	5024175	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5023687	2					
ANR	5024176	ForInit	i = 0 ;	209:8:4875:4878	5023687	0	True				
ANR	5024177	AssignmentExpression	i = 0		5023687	0		=			
ANR	5024178	Identifier	i		5023687	0					
ANR	5024179	PrimaryExpression	0		5023687	1					
ANR	5024180	Condition	i < 4	209:13:4880:4882	5023687	1	True				
ANR	5024181	RelationalExpression	i < 4		5023687	0		<			
ANR	5024182	Identifier	i		5023687	0					
ANR	5024183	PrimaryExpression	4		5023687	1					
ANR	5024184	PostIncDecOperationExpression	i ++	209:18:4885:4887	5023687	2	True				
ANR	5024185	Identifier	i		5023687	0					
ANR	5024186	IncDec	++		5023687	1					
ANR	5024187	CompoundStatement		80:23:1461:1461	5023687	3					
ANR	5024188	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5023687	0					
ANR	5024189	Condition	wa [ i ] [ 0 ] != '\\0'	210:8:4900:4915	5023687	0	True				
ANR	5024190	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5023687	0		!=			
ANR	5024191	ArrayIndexing	wa [ i ] [ 0 ]		5023687	0					
ANR	5024192	ArrayIndexing	wa [ i ]		5023687	0					
ANR	5024193	Identifier	wa		5023687	0					
ANR	5024194	Identifier	i		5023687	1					
ANR	5024195	PrimaryExpression	0		5023687	1					
ANR	5024196	PrimaryExpression	'\\0'		5023687	1					
ANR	5024197	CompoundStatement		81:26:1489:1489	5023687	1					
ANR	5024198	ExpressionStatement	nw ++	211:5:4925:4929	5023687	0	True				
ANR	5024199	PostIncDecOperationExpression	nw ++		5023687	0					
ANR	5024200	Identifier	nw		5023687	0					
ANR	5024201	IncDec	++		5023687	1					
ANR	5024202	ExpressionStatement	"replace ( nw , wa , str )"	214:3:4945:4966	5023687	3	True				
ANR	5024203	CallExpression	"replace ( nw , wa , str )"		5023687	0					
ANR	5024204	Callee	replace		5023687	0					
ANR	5024205	Identifier	replace		5023687	0					
ANR	5024206	ArgumentList	nw		5023687	1					
ANR	5024207	Argument	nw		5023687	0					
ANR	5024208	Identifier	nw		5023687	0					
ANR	5024209	Argument	wa		5023687	1					
ANR	5024210	Identifier	wa		5023687	0					
ANR	5024211	Argument	str		5023687	2					
ANR	5024212	Identifier	str		5023687	0					
ANR	5024213	CompoundStatement		87:1:1542:1564	5023687	4					
ANR	5024214	IdentifierDeclStatement	char * p = strdup ( str ) ;	216:1:4971:4993	5023687	0	True				
ANR	5024215	IdentifierDecl	* p = strdup ( str )		5023687	0					
ANR	5024216	IdentifierDeclType	char *		5023687	0					
ANR	5024217	Identifier	p		5023687	1					
ANR	5024218	AssignmentExpression	* p = strdup ( str )		5023687	2		=			
ANR	5024219	Identifier	p		5023687	0					
ANR	5024220	CallExpression	strdup ( str )		5023687	1					
ANR	5024221	Callee	strdup		5023687	0					
ANR	5024222	Identifier	strdup		5023687	0					
ANR	5024223	ArgumentList	str		5023687	1					
ANR	5024224	Argument	str		5023687	0					
ANR	5024225	Identifier	str		5023687	0					
ANR	5024226	ExpressionStatement	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"	217:1:4996:5033	5023687	1	True				
ANR	5024227	AssignmentExpression	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5023687	0		=			
ANR	5024228	Identifier	p		5023687	0					
ANR	5024229	CallExpression	"r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5023687	1					
ANR	5024230	Callee	r_str_replace		5023687	0					
ANR	5024231	Identifier	r_str_replace		5023687	0					
ANR	5024232	ArgumentList	p		5023687	1					
ANR	5024233	Argument	p		5023687	0					
ANR	5024234	Identifier	p		5023687	0					
ANR	5024235	Argument	"""+ -"""		5023687	1					
ANR	5024236	PrimaryExpression	"""+ -"""		5023687	0					
ANR	5024237	Argument	"""- """		5023687	2					
ANR	5024238	PrimaryExpression	"""- """		5023687	0					
ANR	5024239	Argument	0		5023687	3					
ANR	5024240	PrimaryExpression	0		5023687	0					
ANR	5024241	ExpressionStatement	"p = r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"	218:1:5036:5077	5023687	2	True				
ANR	5024242	AssignmentExpression	"p = r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"		5023687	0		=			
ANR	5024243	Identifier	p		5023687	0					
ANR	5024244	CallExpression	"r_str_replace ( p , "" + ]"" , "" + 0]"" , 0 )"		5023687	1					
ANR	5024245	Callee	r_str_replace		5023687	0					
ANR	5024246	Identifier	r_str_replace		5023687	0					
ANR	5024247	ArgumentList	p		5023687	1					
ANR	5024248	Argument	p		5023687	0					
ANR	5024249	Identifier	p		5023687	0					
ANR	5024250	Argument	""" + ]"""		5023687	1					
ANR	5024251	PrimaryExpression	""" + ]"""		5023687	0					
ANR	5024252	Argument	""" + 0]"""		5023687	2					
ANR	5024253	PrimaryExpression	""" + 0]"""		5023687	0					
ANR	5024254	Argument	0		5023687	3					
ANR	5024255	PrimaryExpression	0		5023687	0					
ANR	5024256	ExpressionStatement	"p = r_str_replace ( p , ""zero"" , ""0"" , 1 )"	220:1:5081:5118	5023687	3	True				
ANR	5024257	AssignmentExpression	"p = r_str_replace ( p , ""zero"" , ""0"" , 1 )"		5023687	0		=			
ANR	5024258	Identifier	p		5023687	0					
ANR	5024259	CallExpression	"r_str_replace ( p , ""zero"" , ""0"" , 1 )"		5023687	1					
ANR	5024260	Callee	r_str_replace		5023687	0					
ANR	5024261	Identifier	r_str_replace		5023687	0					
ANR	5024262	ArgumentList	p		5023687	1					
ANR	5024263	Argument	p		5023687	0					
ANR	5024264	Identifier	p		5023687	0					
ANR	5024265	Argument	"""zero"""		5023687	1					
ANR	5024266	PrimaryExpression	"""zero"""		5023687	0					
ANR	5024267	Argument	"""0"""		5023687	2					
ANR	5024268	PrimaryExpression	"""0"""		5023687	0					
ANR	5024269	Argument	1		5023687	3					
ANR	5024270	PrimaryExpression	1		5023687	0					
ANR	5024271	IfStatement	"if ( ! strncmp ( p , ""0 = "" , 4 ) )"		5023687	4					
ANR	5024272	Condition	"! strncmp ( p , ""0 = "" , 4 )"	221:5:5125:5147	5023687	0	True				
ANR	5024273	UnaryOperationExpression	"! strncmp ( p , ""0 = "" , 4 )"		5023687	0					
ANR	5024274	UnaryOperator	!		5023687	0					
ANR	5024275	CallExpression	"strncmp ( p , ""0 = "" , 4 )"		5023687	1					
ANR	5024276	Callee	strncmp		5023687	0					
ANR	5024277	Identifier	strncmp		5023687	0					
ANR	5024278	ArgumentList	p		5023687	1					
ANR	5024279	Argument	p		5023687	0					
ANR	5024280	Identifier	p		5023687	0					
ANR	5024281	Argument	"""0 = """		5023687	1					
ANR	5024282	PrimaryExpression	"""0 = """		5023687	0					
ANR	5024283	Argument	4		5023687	2					
ANR	5024284	PrimaryExpression	4		5023687	0					
ANR	5024285	CompoundStatement		92:30:1721:1721	5023687	1					
ANR	5024286	ExpressionStatement	* p = 0	222:2:5154:5160	5023687	0	True				
ANR	5024287	AssignmentExpression	* p = 0		5023687	0		=			
ANR	5024288	UnaryOperationExpression	* p		5023687	0					
ANR	5024289	UnaryOperator	*		5023687	0					
ANR	5024290	Identifier	p		5023687	1					
ANR	5024291	PrimaryExpression	0		5023687	1					
ANR	5024292	IfStatement	"if ( ! strcmp ( w1 , w2 ) )"		5023687	5					
ANR	5024293	Condition	"! strcmp ( w1 , w2 )"	224:5:5177:5192	5023687	0	True				
ANR	5024294	UnaryOperationExpression	"! strcmp ( w1 , w2 )"		5023687	0					
ANR	5024295	UnaryOperator	!		5023687	0					
ANR	5024296	CallExpression	"strcmp ( w1 , w2 )"		5023687	1					
ANR	5024297	Callee	strcmp		5023687	0					
ANR	5024298	Identifier	strcmp		5023687	0					
ANR	5024299	ArgumentList	w1		5023687	1					
ANR	5024300	Argument	w1		5023687	0					
ANR	5024301	Identifier	w1		5023687	0					
ANR	5024302	Argument	w2		5023687	1					
ANR	5024303	Identifier	w2		5023687	0					
ANR	5024304	CompoundStatement		96:2:1770:1787	5023687	1					
ANR	5024305	IdentifierDeclStatement	"char a [ 32 ] , b [ 32 ] ;"	225:2:5199:5216	5023687	0	True				
ANR	5024306	IdentifierDecl	a [ 32 ]		5023687	0					
ANR	5024307	IdentifierDeclType	char [ 32 ]		5023687	0					
ANR	5024308	Identifier	a		5023687	1					
ANR	5024309	PrimaryExpression	32		5023687	2					
ANR	5024310	IdentifierDecl	b [ 32 ]		5023687	1					
ANR	5024311	IdentifierDeclType	char [ 32 ]		5023687	0					
ANR	5024312	Identifier	b		5023687	1					
ANR	5024313	PrimaryExpression	32		5023687	2					
ANR	5024314	Statement	define	226:1:5219:5224	5023687	1	True				
ANR	5024315	Statement	REPLACE	226:8:5226:5232	5023687	2	True				
ANR	5024316	Statement	(	226:15:5233:5233	5023687	3	True				
ANR	5024317	Statement	x	226:16:5234:5234	5023687	4	True				
ANR	5024318	Statement	","	226:17:5235:5235	5023687	5	True				
ANR	5024319	Statement	y	226:18:5236:5236	5023687	6	True				
ANR	5024320	Statement	)	226:19:5237:5237	5023687	7	True				
ANR	5024321	DoStatement	do		5023687	8					
ANR	5024322	CompoundStatement		99:2:1873:1917	5023687	0					
ANR	5024323	IdentifierDeclStatement	"int snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 ) ;"	227:2:5248:5296	5023687	0	True				
ANR	5024324	IdentifierDecl	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5023687	0					
ANR	5024325	IdentifierDeclType	int		5023687	0					
ANR	5024326	Identifier	snprintf_len1_		5023687	1					
ANR	5024327	AssignmentExpression	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5023687	2		=			
ANR	5024328	Identifier	snprintf_len1_		5023687	0					
ANR	5024329	CallExpression	"snprintf ( a , 32 , x , w1 , w1 )"		5023687	1					
ANR	5024330	Callee	snprintf		5023687	0					
ANR	5024331	Identifier	snprintf		5023687	0					
ANR	5024332	ArgumentList	a		5023687	1					
ANR	5024333	Argument	a		5023687	0					
ANR	5024334	Identifier	a		5023687	0					
ANR	5024335	Argument	32		5023687	1					
ANR	5024336	PrimaryExpression	32		5023687	0					
ANR	5024337	Argument	x		5023687	2					
ANR	5024338	Identifier	x		5023687	0					
ANR	5024339	Argument	w1		5023687	3					
ANR	5024340	Identifier	w1		5023687	0					
ANR	5024341	Argument	w1		5023687	4					
ANR	5024342	Identifier	w1		5023687	0					
ANR	5024343	IdentifierDeclStatement	"int snprintf_len2_ = snprintf ( b , 32 , y , w1 ) ;"	228:2:5302:5346	5023687	1	True				
ANR	5024344	IdentifierDecl	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5023687	0					
ANR	5024345	IdentifierDeclType	int		5023687	0					
ANR	5024346	Identifier	snprintf_len2_		5023687	1					
ANR	5024347	AssignmentExpression	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5023687	2		=			
ANR	5024348	Identifier	snprintf_len2_		5023687	0					
ANR	5024349	CallExpression	"snprintf ( b , 32 , y , w1 )"		5023687	1					
ANR	5024350	Callee	snprintf		5023687	0					
ANR	5024351	Identifier	snprintf		5023687	0					
ANR	5024352	ArgumentList	b		5023687	1					
ANR	5024353	Argument	b		5023687	0					
ANR	5024354	Identifier	b		5023687	0					
ANR	5024355	Argument	32		5023687	1					
ANR	5024356	PrimaryExpression	32		5023687	0					
ANR	5024357	Argument	y		5023687	2					
ANR	5024358	Identifier	y		5023687	0					
ANR	5024359	Argument	w1		5023687	3					
ANR	5024360	Identifier	w1		5023687	0					
ANR	5024361	IfStatement	if ( snprintf_len1_ < 32 && snprintf_len2_ < 32 )		5023687	2					
ANR	5024362	Condition	snprintf_len1_ < 32 && snprintf_len2_ < 32	229:6:5356:5397	5023687	0	True				
ANR	5024363	AndExpression	snprintf_len1_ < 32 && snprintf_len2_ < 32		5023687	0		&&			
ANR	5024364	RelationalExpression	snprintf_len1_ < 32		5023687	0		<			
ANR	5024365	Identifier	snprintf_len1_		5023687	0					
ANR	5024366	PrimaryExpression	32		5023687	1					
ANR	5024367	RelationalExpression	snprintf_len2_ < 32		5023687	1		<			
ANR	5024368	Identifier	snprintf_len2_		5023687	0					
ANR	5024369	PrimaryExpression	32		5023687	1					
ANR	5024370	CompoundStatement		100:50:1971:1971	5023687	1					
ANR	5024371	ExpressionStatement	"p = r_str_replace ( p , a , b , 0 )"	230:3:5407:5437	5023687	0	True				
ANR	5024372	AssignmentExpression	"p = r_str_replace ( p , a , b , 0 )"		5023687	0		=			
ANR	5024373	Identifier	p		5023687	0					
ANR	5024374	CallExpression	"r_str_replace ( p , a , b , 0 )"		5023687	1					
ANR	5024375	Callee	r_str_replace		5023687	0					
ANR	5024376	Identifier	r_str_replace		5023687	0					
ANR	5024377	ArgumentList	p		5023687	1					
ANR	5024378	Argument	p		5023687	0					
ANR	5024379	Identifier	p		5023687	0					
ANR	5024380	Argument	a		5023687	1					
ANR	5024381	Identifier	a		5023687	0					
ANR	5024382	Argument	b		5023687	2					
ANR	5024383	Identifier	b		5023687	0					
ANR	5024384	Argument	0		5023687	3					
ANR	5024385	PrimaryExpression	0		5023687	0					
ANR	5024386	Condition	0	232:10:5457:5457	5023687	1	True				
ANR	5024387	PrimaryExpression	0		5023687	0					
ANR	5024388	ExpressionStatement	"REPLACE ( ""%s = %s -"" , ""%s -="" )"	236:2:5517:5547	5023687	9	True				
ANR	5024389	CallExpression	"REPLACE ( ""%s = %s -"" , ""%s -="" )"		5023687	0					
ANR	5024390	Callee	REPLACE		5023687	0					
ANR	5024391	Identifier	REPLACE		5023687	0					
ANR	5024392	ArgumentList	"""%s = %s -"""		5023687	1					
ANR	5024393	Argument	"""%s = %s -"""		5023687	0					
ANR	5024394	PrimaryExpression	"""%s = %s -"""		5023687	0					
ANR	5024395	Argument	"""%s -="""		5023687	1					
ANR	5024396	PrimaryExpression	"""%s -="""		5023687	0					
ANR	5024397	ExpressionStatement	"REPLACE ( ""%s = %s &"" , ""%s &="" )"	237:2:5551:5581	5023687	10	True				
ANR	5024398	CallExpression	"REPLACE ( ""%s = %s &"" , ""%s &="" )"		5023687	0					
ANR	5024399	Callee	REPLACE		5023687	0					
ANR	5024400	Identifier	REPLACE		5023687	0					
ANR	5024401	ArgumentList	"""%s = %s &"""		5023687	1					
ANR	5024402	Argument	"""%s = %s &"""		5023687	0					
ANR	5024403	PrimaryExpression	"""%s = %s &"""		5023687	0					
ANR	5024404	Argument	"""%s &="""		5023687	1					
ANR	5024405	PrimaryExpression	"""%s &="""		5023687	0					
ANR	5024406	ExpressionStatement	"REPLACE ( ""%s = %s |"" , ""%s |="" )"	238:2:5585:5615	5023687	11	True				
ANR	5024407	CallExpression	"REPLACE ( ""%s = %s |"" , ""%s |="" )"		5023687	0					
ANR	5024408	Callee	REPLACE		5023687	0					
ANR	5024409	Identifier	REPLACE		5023687	0					
ANR	5024410	ArgumentList	"""%s = %s |"""		5023687	1					
ANR	5024411	Argument	"""%s = %s |"""		5023687	0					
ANR	5024412	PrimaryExpression	"""%s = %s |"""		5023687	0					
ANR	5024413	Argument	"""%s |="""		5023687	1					
ANR	5024414	PrimaryExpression	"""%s |="""		5023687	0					
ANR	5024415	ExpressionStatement	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"	239:2:5619:5649	5023687	12	True				
ANR	5024416	CallExpression	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"		5023687	0					
ANR	5024417	Callee	REPLACE		5023687	0					
ANR	5024418	Identifier	REPLACE		5023687	0					
ANR	5024419	ArgumentList	"""%s = %s ^"""		5023687	1					
ANR	5024420	Argument	"""%s = %s ^"""		5023687	0					
ANR	5024421	PrimaryExpression	"""%s = %s ^"""		5023687	0					
ANR	5024422	Argument	"""%s ^="""		5023687	1					
ANR	5024423	PrimaryExpression	"""%s ^="""		5023687	0					
ANR	5024424	ExpressionStatement	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"	240:2:5653:5685	5023687	13	True				
ANR	5024425	CallExpression	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"		5023687	0					
ANR	5024426	Callee	REPLACE		5023687	0					
ANR	5024427	Identifier	REPLACE		5023687	0					
ANR	5024428	ArgumentList	"""%s = %s >>"""		5023687	1					
ANR	5024429	Argument	"""%s = %s >>"""		5023687	0					
ANR	5024430	PrimaryExpression	"""%s = %s >>"""		5023687	0					
ANR	5024431	Argument	"""%s >>="""		5023687	1					
ANR	5024432	PrimaryExpression	"""%s >>="""		5023687	0					
ANR	5024433	ExpressionStatement	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"	241:2:5689:5721	5023687	14	True				
ANR	5024434	CallExpression	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"		5023687	0					
ANR	5024435	Callee	REPLACE		5023687	0					
ANR	5024436	Identifier	REPLACE		5023687	0					
ANR	5024437	ArgumentList	"""%s = %s <<"""		5023687	1					
ANR	5024438	Argument	"""%s = %s <<"""		5023687	0					
ANR	5024439	PrimaryExpression	"""%s = %s <<"""		5023687	0					
ANR	5024440	Argument	"""%s <<="""		5023687	1					
ANR	5024441	PrimaryExpression	"""%s <<="""		5023687	0					
ANR	5024442	ExpressionStatement	"p = r_str_replace ( p , "":"" , ""0000"" , 0 )"	243:1:5727:5764	5023687	6	True				
ANR	5024443	AssignmentExpression	"p = r_str_replace ( p , "":"" , ""0000"" , 0 )"		5023687	0		=			
ANR	5024444	Identifier	p		5023687	0					
ANR	5024445	CallExpression	"r_str_replace ( p , "":"" , ""0000"" , 0 )"		5023687	1					
ANR	5024446	Callee	r_str_replace		5023687	0					
ANR	5024447	Identifier	r_str_replace		5023687	0					
ANR	5024448	ArgumentList	p		5023687	1					
ANR	5024449	Argument	p		5023687	0					
ANR	5024450	Identifier	p		5023687	0					
ANR	5024451	Argument	""":"""		5023687	1					
ANR	5024452	PrimaryExpression	""":"""		5023687	0					
ANR	5024453	Argument	"""0000"""		5023687	2					
ANR	5024454	PrimaryExpression	"""0000"""		5023687	0					
ANR	5024455	Argument	0		5023687	3					
ANR	5024456	PrimaryExpression	0		5023687	0					
ANR	5024457	ExpressionStatement	"strcpy ( str , p )"	244:1:5767:5782	5023687	7	True				
ANR	5024458	CallExpression	"strcpy ( str , p )"		5023687	0					
ANR	5024459	Callee	strcpy		5023687	0					
ANR	5024460	Identifier	strcpy		5023687	0					
ANR	5024461	ArgumentList	str		5023687	1					
ANR	5024462	Argument	str		5023687	0					
ANR	5024463	Identifier	str		5023687	0					
ANR	5024464	Argument	p		5023687	1					
ANR	5024465	Identifier	p		5023687	0					
ANR	5024466	ExpressionStatement	free ( p )	245:1:5785:5793	5023687	8	True				
ANR	5024467	CallExpression	free ( p )		5023687	0					
ANR	5024468	Callee	free		5023687	0					
ANR	5024469	Identifier	free		5023687	0					
ANR	5024470	ArgumentList	p		5023687	1					
ANR	5024471	Argument	p		5023687	0					
ANR	5024472	Identifier	p		5023687	0					
ANR	5024473	ExpressionStatement	free ( buf )	249:1:5805:5815	5023687	14	True				
ANR	5024474	CallExpression	free ( buf )		5023687	0					
ANR	5024475	Callee	free		5023687	0					
ANR	5024476	Identifier	free		5023687	0					
ANR	5024477	ArgumentList	buf		5023687	1					
ANR	5024478	Argument	buf		5023687	0					
ANR	5024479	Identifier	buf		5023687	0					
ANR	5024480	ReturnStatement	return true ;	250:1:5818:5829	5023687	15	True				
ANR	5024481	Identifier	true		5023687	0					
ANR	5024482	ReturnType	static int		5023687	1					
ANR	5024483	Identifier	parse		5023687	2					
ANR	5024484	ParameterList	"RParse * p , const char * data , char * str"		5023687	3					
ANR	5024485	Parameter	RParse * p	130:17:3388:3396	5023687	0	True				
ANR	5024486	ParameterType	RParse *		5023687	0					
ANR	5024487	Identifier	p		5023687	1					
ANR	5024488	Parameter	const char * data	130:28:3399:3414	5023687	1	True				
ANR	5024489	ParameterType	const char *		5023687	0					
ANR	5024490	Identifier	data		5023687	1					
ANR	5024491	Parameter	char * str	130:46:3417:3425	5023687	2	True				
ANR	5024492	ParameterType	char *		5023687	0					
ANR	5024493	Identifier	str		5023687	1					
ANR	5024494	CFGEntryNode	ENTRY		5023687		True				
ANR	5024495	CFGExitNode	EXIT		5023687		True				
ANR	5024496	Symbol	* w4		5023687						
ANR	5024497	Symbol	* w3		5023687						
ANR	5024498	Symbol	* w2		5023687						
ANR	5024499	Symbol	* w1		5023687						
ANR	5024500	Symbol	data		5023687						
ANR	5024501	Symbol	strchr		5023687						
ANR	5024502	Symbol	nw		5023687						
ANR	5024503	Symbol	wa		5023687						
ANR	5024504	Symbol	strlen		5023687						
ANR	5024505	Symbol	strncmp		5023687						
ANR	5024506	Symbol	* wa		5023687						
ANR	5024507	Symbol	len		5023687						
ANR	5024508	Symbol	r_str_replace		5023687						
ANR	5024509	Symbol	* ptr		5023687						
ANR	5024510	Symbol	w0		5023687						
ANR	5024511	Symbol	w1		5023687						
ANR	5024512	Symbol	w2		5023687						
ANR	5024513	Symbol	w3		5023687						
ANR	5024514	Symbol	* w0		5023687						
ANR	5024515	Symbol	w4		5023687						
ANR	5024516	Symbol	snprintf_len1_		5023687						
ANR	5024517	Symbol	snprintf		5023687						
ANR	5024518	Symbol	strcmp		5023687						
ANR	5024519	Symbol	malloc		5023687						
ANR	5024520	Symbol	a		5023687						
ANR	5024521	Symbol	* buf		5023687						
ANR	5024522	Symbol	* * i		5023687						
ANR	5024523	Symbol	b		5023687						
ANR	5024524	Symbol	false		5023687						
ANR	5024525	Symbol	i		5023687						
ANR	5024526	Symbol	optr		5023687						
ANR	5024527	Symbol	ptr		5023687						
ANR	5024528	Symbol	p		5023687						
ANR	5024529	Symbol	str		5023687						
ANR	5024530	Symbol	snprintf_len2_		5023687						
ANR	5024531	Symbol	buf		5023687						
ANR	5024532	Symbol	* i		5023687						
ANR	5024533	Symbol	* * wa		5023687						
ANR	5024534	Symbol	true		5023687						
ANR	5024535	Symbol	x		5023687						
ANR	5024536	Symbol	y		5023687						
ANR	5024537	Symbol	* p		5023687						
ANR	5024538	Symbol	strdup		5023687						
ANR	5024539	Symbol	WSZ		5023687						
ANR	5024540	Function	varsub	253:0:5834:8573							
ANR	5024541	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5024540	0					
ANR	5024542	CompoundStatement		253:102:5936:8573	5024540	0					
ANR	5024543	IdentifierDeclStatement	RAnalVar * var ;	254:1:5939:5952	5024540	0	True				
ANR	5024544	IdentifierDecl	* var		5024540	0					
ANR	5024545	IdentifierDeclType	RAnalVar *		5024540	0					
ANR	5024546	Identifier	var		5024540	1					
ANR	5024547	IdentifierDeclStatement	RListIter * iter ;	255:1:5955:5970	5024540	1	True				
ANR	5024548	IdentifierDecl	* iter		5024540	0					
ANR	5024549	IdentifierDeclType	RListIter *		5024540	0					
ANR	5024550	Identifier	iter		5024540	1					
ANR	5024551	IdentifierDeclStatement	char * oldstr ;	256:1:5973:5985	5024540	2	True				
ANR	5024552	IdentifierDecl	* oldstr		5024540	0					
ANR	5024553	IdentifierDeclType	char *		5024540	0					
ANR	5024554	Identifier	oldstr		5024540	1					
ANR	5024555	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	257:1:5988:6014	5024540	3	True				
ANR	5024556	IdentifierDecl	* tstr = strdup ( data )		5024540	0					
ANR	5024557	IdentifierDeclType	char *		5024540	0					
ANR	5024558	Identifier	tstr		5024540	1					
ANR	5024559	AssignmentExpression	* tstr = strdup ( data )		5024540	2		=			
ANR	5024560	Identifier	tstr		5024540	0					
ANR	5024561	CallExpression	strdup ( data )		5024540	1					
ANR	5024562	Callee	strdup		5024540	0					
ANR	5024563	Identifier	strdup		5024540	0					
ANR	5024564	ArgumentList	data		5024540	1					
ANR	5024565	Argument	data		5024540	0					
ANR	5024566	Identifier	data		5024540	0					
ANR	5024567	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	258:1:6017:6044	5024540	4	True				
ANR	5024568	IdentifierDecl	* anal = p -> analb . anal		5024540	0					
ANR	5024569	IdentifierDeclType	RAnal *		5024540	0					
ANR	5024570	Identifier	anal		5024540	1					
ANR	5024571	AssignmentExpression	* anal = p -> analb . anal		5024540	2		=			
ANR	5024572	Identifier	anal		5024540	0					
ANR	5024573	MemberAccess	p -> analb . anal		5024540	1					
ANR	5024574	PtrMemberAccess	p -> analb		5024540	0					
ANR	5024575	Identifier	p		5024540	0					
ANR	5024576	Identifier	analb		5024540	1					
ANR	5024577	Identifier	anal		5024540	1					
ANR	5024578	IfStatement	if ( ! p -> varlist )		5024540	5					
ANR	5024579	Condition	! p -> varlist	260:5:6052:6062	5024540	0	True				
ANR	5024580	UnaryOperationExpression	! p -> varlist		5024540	0					
ANR	5024581	UnaryOperator	!		5024540	0					
ANR	5024582	PtrMemberAccess	p -> varlist		5024540	1					
ANR	5024583	Identifier	p		5024540	0					
ANR	5024584	Identifier	varlist		5024540	1					
ANR	5024585	CompoundStatement		8:18:128:128	5024540	1					
ANR	5024586	ExpressionStatement	free ( tstr )	261:2:6069:6080	5024540	0	True				
ANR	5024587	CallExpression	free ( tstr )		5024540	0					
ANR	5024588	Callee	free		5024540	0					
ANR	5024589	Identifier	free		5024540	0					
ANR	5024590	ArgumentList	tstr		5024540	1					
ANR	5024591	Argument	tstr		5024540	0					
ANR	5024592	Identifier	tstr		5024540	0					
ANR	5024593	ReturnStatement	return false ;	262:2:6084:6096	5024540	1	True				
ANR	5024594	Identifier	false		5024540	0					
ANR	5024595	IdentifierDeclStatement	"RList * bpargs = p -> varlist ( anal , f , 'b' ) ;"	264:1:6102:6143	5024540	6	True				
ANR	5024596	IdentifierDecl	"* bpargs = p -> varlist ( anal , f , 'b' )"		5024540	0					
ANR	5024597	IdentifierDeclType	RList *		5024540	0					
ANR	5024598	Identifier	bpargs		5024540	1					
ANR	5024599	AssignmentExpression	"* bpargs = p -> varlist ( anal , f , 'b' )"		5024540	2		=			
ANR	5024600	Identifier	bpargs		5024540	0					
ANR	5024601	CallExpression	"p -> varlist ( anal , f , 'b' )"		5024540	1					
ANR	5024602	Callee	p -> varlist		5024540	0					
ANR	5024603	PtrMemberAccess	p -> varlist		5024540	0					
ANR	5024604	Identifier	p		5024540	0					
ANR	5024605	Identifier	varlist		5024540	1					
ANR	5024606	ArgumentList	anal		5024540	1					
ANR	5024607	Argument	anal		5024540	0					
ANR	5024608	Identifier	anal		5024540	0					
ANR	5024609	Argument	f		5024540	1					
ANR	5024610	Identifier	f		5024540	0					
ANR	5024611	Argument	'b'		5024540	2					
ANR	5024612	PrimaryExpression	'b'		5024540	0					
ANR	5024613	IdentifierDeclStatement	"RList * spargs = p -> varlist ( anal , f , 's' ) ;"	265:1:6146:6187	5024540	7	True				
ANR	5024614	IdentifierDecl	"* spargs = p -> varlist ( anal , f , 's' )"		5024540	0					
ANR	5024615	IdentifierDeclType	RList *		5024540	0					
ANR	5024616	Identifier	spargs		5024540	1					
ANR	5024617	AssignmentExpression	"* spargs = p -> varlist ( anal , f , 's' )"		5024540	2		=			
ANR	5024618	Identifier	spargs		5024540	0					
ANR	5024619	CallExpression	"p -> varlist ( anal , f , 's' )"		5024540	1					
ANR	5024620	Callee	p -> varlist		5024540	0					
ANR	5024621	PtrMemberAccess	p -> varlist		5024540	0					
ANR	5024622	Identifier	p		5024540	0					
ANR	5024623	Identifier	varlist		5024540	1					
ANR	5024624	ArgumentList	anal		5024540	1					
ANR	5024625	Argument	anal		5024540	0					
ANR	5024626	Identifier	anal		5024540	0					
ANR	5024627	Argument	f		5024540	1					
ANR	5024628	Identifier	f		5024540	0					
ANR	5024629	Argument	's'		5024540	2					
ANR	5024630	PrimaryExpression	's'		5024540	0					
ANR	5024631	IdentifierDeclStatement	const bool ucase = IS_UPPER ( * tstr ) ;	266:1:6190:6225	5024540	8	True				
ANR	5024632	IdentifierDecl	ucase = IS_UPPER ( * tstr )		5024540	0					
ANR	5024633	IdentifierDeclType	const bool		5024540	0					
ANR	5024634	Identifier	ucase		5024540	1					
ANR	5024635	AssignmentExpression	ucase = IS_UPPER ( * tstr )		5024540	2		=			
ANR	5024636	Identifier	ucase		5024540	0					
ANR	5024637	CallExpression	IS_UPPER ( * tstr )		5024540	1					
ANR	5024638	Callee	IS_UPPER		5024540	0					
ANR	5024639	Identifier	IS_UPPER		5024540	0					
ANR	5024640	ArgumentList	* tstr		5024540	1					
ANR	5024641	Argument	* tstr		5024540	0					
ANR	5024642	UnaryOperationExpression	* tstr		5024540	0					
ANR	5024643	UnaryOperator	*		5024540	0					
ANR	5024644	Identifier	tstr		5024540	1					
ANR	5024645	Statement	r_list_foreach	267:1:6228:6241	5024540	9	True				
ANR	5024646	Statement	(	267:16:6243:6243	5024540	10	True				
ANR	5024647	Statement	spargs	267:17:6244:6249	5024540	11	True				
ANR	5024648	Statement	","	267:23:6250:6250	5024540	12	True				
ANR	5024649	Statement	iter	267:25:6252:6255	5024540	13	True				
ANR	5024650	Statement	","	267:29:6256:6256	5024540	14	True				
ANR	5024651	Statement	var	267:31:6258:6260	5024540	15	True				
ANR	5024652	Statement	)	267:34:6261:6261	5024540	16	True				
ANR	5024653	CompoundStatement		16:2:330:340	5024540	17					
ANR	5024654	IdentifierDeclStatement	char * tmpf ;	268:2:6267:6277	5024540	0	True				
ANR	5024655	IdentifierDecl	* tmpf		5024540	0					
ANR	5024656	IdentifierDeclType	char *		5024540	0					
ANR	5024657	Identifier	tmpf		5024540	1					
ANR	5024658	IfStatement	if ( var -> delta < 10 )		5024540	1					
ANR	5024659	Condition	var -> delta < 10	270:6:6312:6326	5024540	0	True				
ANR	5024660	RelationalExpression	var -> delta < 10		5024540	0		<			
ANR	5024661	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024662	Identifier	var		5024540	0					
ANR	5024663	Identifier	delta		5024540	1					
ANR	5024664	PrimaryExpression	10		5024540	1					
ANR	5024665	CompoundStatement		18:23:392:392	5024540	1					
ANR	5024666	ExpressionStatement	"tmpf = ""%d(%s)"""	271:3:6334:6349	5024540	0	True				
ANR	5024667	AssignmentExpression	"tmpf = ""%d(%s)"""		5024540	0		=			
ANR	5024668	Identifier	tmpf		5024540	0					
ANR	5024669	PrimaryExpression	"""%d(%s)"""		5024540	1					
ANR	5024670	ElseStatement	else		5024540	0					
ANR	5024671	IfStatement	if ( var -> delta > 0 )		5024540	0					
ANR	5024672	Condition	var -> delta > 0	272:13:6364:6377	5024540	0	True				
ANR	5024673	RelationalExpression	var -> delta > 0		5024540	0		>			
ANR	5024674	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024675	Identifier	var		5024540	0					
ANR	5024676	Identifier	delta		5024540	1					
ANR	5024677	PrimaryExpression	0		5024540	1					
ANR	5024678	CompoundStatement		20:29:443:443	5024540	1					
ANR	5024679	ExpressionStatement	"tmpf = ""0x%x(%s)"""	273:3:6385:6402	5024540	0	True				
ANR	5024680	AssignmentExpression	"tmpf = ""0x%x(%s)"""		5024540	0		=			
ANR	5024681	Identifier	tmpf		5024540	0					
ANR	5024682	PrimaryExpression	"""0x%x(%s)"""		5024540	1					
ANR	5024683	ElseStatement	else		5024540	0					
ANR	5024684	CompoundStatement		22:9:476:476	5024540	0					
ANR	5024685	ExpressionStatement	"tmpf = ""-0x%x(%s)"""	275:3:6418:6436	5024540	0	True				
ANR	5024686	AssignmentExpression	"tmpf = ""-0x%x(%s)"""		5024540	0		=			
ANR	5024687	Identifier	tmpf		5024540	0					
ANR	5024688	PrimaryExpression	"""-0x%x(%s)"""		5024540	1					
ANR	5024689	ExpressionStatement	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"	277:2:6444:6525	5024540	2	True				
ANR	5024690	AssignmentExpression	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	0		=			
ANR	5024691	Identifier	oldstr		5024540	0					
ANR	5024692	CallExpression	"r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	1					
ANR	5024693	Callee	r_str_newf		5024540	0					
ANR	5024694	Identifier	r_str_newf		5024540	0					
ANR	5024695	ArgumentList	tmpf		5024540	1					
ANR	5024696	Argument	tmpf		5024540	0					
ANR	5024697	Identifier	tmpf		5024540	0					
ANR	5024698	Argument	r_num_abs ( var -> delta )		5024540	1					
ANR	5024699	CallExpression	r_num_abs ( var -> delta )		5024540	0					
ANR	5024700	Callee	r_num_abs		5024540	0					
ANR	5024701	Identifier	r_num_abs		5024540	0					
ANR	5024702	ArgumentList	var -> delta		5024540	1					
ANR	5024703	Argument	var -> delta		5024540	0					
ANR	5024704	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024705	Identifier	var		5024540	0					
ANR	5024706	Identifier	delta		5024540	1					
ANR	5024707	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	2					
ANR	5024708	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	0					
ANR	5024709	PtrMemberAccess	anal -> reg -> name		5024540	0					
ANR	5024710	PtrMemberAccess	anal -> reg		5024540	0					
ANR	5024711	Identifier	anal		5024540	0					
ANR	5024712	Identifier	reg		5024540	1					
ANR	5024713	Identifier	name		5024540	1					
ANR	5024714	Identifier	R_REG_NAME_SP		5024540	1					
ANR	5024715	IfStatement	if ( ucase )		5024540	3					
ANR	5024716	Condition	ucase	278:6:6533:6537	5024540	0	True				
ANR	5024717	Identifier	ucase		5024540	0					
ANR	5024718	CompoundStatement		27:3:608:642	5024540	1					
ANR	5024719	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	279:3:6545:6579	5024540	0	True				
ANR	5024720	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5024540	0					
ANR	5024721	IdentifierDeclType	char *		5024540	0					
ANR	5024722	Identifier	comma		5024540	1					
ANR	5024723	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5024540	2		=			
ANR	5024724	Identifier	comma		5024540	0					
ANR	5024725	CallExpression	"strchr ( oldstr , ',' )"		5024540	1					
ANR	5024726	Callee	strchr		5024540	0					
ANR	5024727	Identifier	strchr		5024540	0					
ANR	5024728	ArgumentList	oldstr		5024540	1					
ANR	5024729	Argument	oldstr		5024540	0					
ANR	5024730	Identifier	oldstr		5024540	0					
ANR	5024731	Argument	"','"		5024540	1					
ANR	5024732	PrimaryExpression	"','"		5024540	0					
ANR	5024733	IfStatement	if ( comma )		5024540	1					
ANR	5024734	Condition	comma	280:28:6609:6613	5024540	0	True				
ANR	5024735	Identifier	comma		5024540	0					
ANR	5024736	CompoundStatement		28:35:679:679	5024540	1					
ANR	5024737	ExpressionStatement	* comma = 0	281:32:6650:6660	5024540	0	True				
ANR	5024738	AssignmentExpression	* comma = 0		5024540	0		=			
ANR	5024739	UnaryOperationExpression	* comma		5024540	0					
ANR	5024740	UnaryOperator	*		5024540	0					
ANR	5024741	Identifier	comma		5024540	1					
ANR	5024742	PrimaryExpression	0		5024540	1					
ANR	5024743	ExpressionStatement	"r_str_case ( oldstr , true )"	282:32:6694:6719	5024540	1	True				
ANR	5024744	CallExpression	"r_str_case ( oldstr , true )"		5024540	0					
ANR	5024745	Callee	r_str_case		5024540	0					
ANR	5024746	Identifier	r_str_case		5024540	0					
ANR	5024747	ArgumentList	oldstr		5024540	1					
ANR	5024748	Argument	oldstr		5024540	0					
ANR	5024749	Identifier	oldstr		5024540	0					
ANR	5024750	Argument	true		5024540	1					
ANR	5024751	Identifier	true		5024540	0					
ANR	5024752	ExpressionStatement	"* comma = ','"	283:32:6753:6765	5024540	2	True				
ANR	5024753	AssignmentExpression	"* comma = ','"		5024540	0		=			
ANR	5024754	UnaryOperationExpression	* comma		5024540	0					
ANR	5024755	UnaryOperator	*		5024540	0					
ANR	5024756	Identifier	comma		5024540	1					
ANR	5024757	PrimaryExpression	"','"		5024540	1					
ANR	5024758	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5024540	4					
ANR	5024759	Condition	"strstr ( tstr , oldstr )"	286:6:6817:6837	5024540	0	True				
ANR	5024760	CallExpression	"strstr ( tstr , oldstr )"		5024540	0					
ANR	5024761	Callee	strstr		5024540	0					
ANR	5024762	Identifier	strstr		5024540	0					
ANR	5024763	ArgumentList	tstr		5024540	1					
ANR	5024764	Argument	tstr		5024540	0					
ANR	5024765	Identifier	tstr		5024540	0					
ANR	5024766	Argument	oldstr		5024540	1					
ANR	5024767	Identifier	oldstr		5024540	0					
ANR	5024768	CompoundStatement		35:3:908:1079	5024540	1					
ANR	5024769	IdentifierDeclStatement	"char * newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] ) ;"	287:3:6845:7016	5024540	0	True				
ANR	5024770	IdentifierDecl	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	0					
ANR	5024771	IdentifierDeclType	char *		5024540	0					
ANR	5024772	Identifier	newstr		5024540	1					
ANR	5024773	AssignmentExpression	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	2		=			
ANR	5024774	Identifier	newstr		5024540	0					
ANR	5024775	ConditionalExpression	"( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	1					
ANR	5024776	Condition	p -> localvar_only		5024540	0					
ANR	5024777	PtrMemberAccess	p -> localvar_only		5024540	0					
ANR	5024778	Identifier	p		5024540	0					
ANR	5024779	Identifier	localvar_only		5024540	1					
ANR	5024780	CallExpression	"r_str_newf ( ""(%s)"" , var -> name )"		5024540	1					
ANR	5024781	Callee	r_str_newf		5024540	0					
ANR	5024782	Identifier	r_str_newf		5024540	0					
ANR	5024783	ArgumentList	"""(%s)"""		5024540	1					
ANR	5024784	Argument	"""(%s)"""		5024540	0					
ANR	5024785	PrimaryExpression	"""(%s)"""		5024540	0					
ANR	5024786	Argument	var -> name		5024540	1					
ANR	5024787	PtrMemberAccess	var -> name		5024540	0					
ANR	5024788	Identifier	var		5024540	0					
ANR	5024789	Identifier	name		5024540	1					
ANR	5024790	CallExpression	"r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	2					
ANR	5024791	Callee	r_str_newf		5024540	0					
ANR	5024792	Identifier	r_str_newf		5024540	0					
ANR	5024793	ArgumentList	"""%s%s(%s)"""		5024540	1					
ANR	5024794	Argument	"""%s%s(%s)"""		5024540	0					
ANR	5024795	PrimaryExpression	"""%s%s(%s)"""		5024540	0					
ANR	5024796	Argument	"var -> delta > 0 ? """" : ""-"""		5024540	1					
ANR	5024797	ConditionalExpression	"var -> delta > 0 ? """" : ""-"""		5024540	0					
ANR	5024798	Condition	var -> delta > 0		5024540	0					
ANR	5024799	RelationalExpression	var -> delta > 0		5024540	0		>			
ANR	5024800	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024801	Identifier	var		5024540	0					
ANR	5024802	Identifier	delta		5024540	1					
ANR	5024803	PrimaryExpression	0		5024540	1					
ANR	5024804	PrimaryExpression	""""""		5024540	1					
ANR	5024805	PrimaryExpression	"""-"""		5024540	2					
ANR	5024806	Argument	var -> name		5024540	2					
ANR	5024807	PtrMemberAccess	var -> name		5024540	0					
ANR	5024808	Identifier	var		5024540	0					
ANR	5024809	Identifier	name		5024540	1					
ANR	5024810	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	3					
ANR	5024811	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	0					
ANR	5024812	PtrMemberAccess	anal -> reg -> name		5024540	0					
ANR	5024813	PtrMemberAccess	anal -> reg		5024540	0					
ANR	5024814	Identifier	anal		5024540	0					
ANR	5024815	Identifier	reg		5024540	1					
ANR	5024816	Identifier	name		5024540	1					
ANR	5024817	Identifier	R_REG_NAME_SP		5024540	1					
ANR	5024818	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	290:3:7021:7067	5024540	1	True				
ANR	5024819	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5024540	0		=			
ANR	5024820	Identifier	tstr		5024540	0					
ANR	5024821	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5024540	1					
ANR	5024822	Callee	r_str_replace		5024540	0					
ANR	5024823	Identifier	r_str_replace		5024540	0					
ANR	5024824	ArgumentList	tstr		5024540	1					
ANR	5024825	Argument	tstr		5024540	0					
ANR	5024826	Identifier	tstr		5024540	0					
ANR	5024827	Argument	oldstr		5024540	1					
ANR	5024828	Identifier	oldstr		5024540	0					
ANR	5024829	Argument	newstr		5024540	2					
ANR	5024830	Identifier	newstr		5024540	0					
ANR	5024831	Argument	1		5024540	3					
ANR	5024832	PrimaryExpression	1		5024540	0					
ANR	5024833	ExpressionStatement	free ( newstr )	291:3:7072:7085	5024540	2	True				
ANR	5024834	CallExpression	free ( newstr )		5024540	0					
ANR	5024835	Callee	free		5024540	0					
ANR	5024836	Identifier	free		5024540	0					
ANR	5024837	ArgumentList	newstr		5024540	1					
ANR	5024838	Argument	newstr		5024540	0					
ANR	5024839	Identifier	newstr		5024540	0					
ANR	5024840	ExpressionStatement	free ( oldstr )	292:3:7090:7103	5024540	3	True				
ANR	5024841	CallExpression	free ( oldstr )		5024540	0					
ANR	5024842	Callee	free		5024540	0					
ANR	5024843	Identifier	free		5024540	0					
ANR	5024844	ArgumentList	oldstr		5024540	1					
ANR	5024845	Argument	oldstr		5024540	0					
ANR	5024846	Identifier	oldstr		5024540	0					
ANR	5024847	BreakStatement	break ;	293:3:7108:7113	5024540	4	True				
ANR	5024848	ExpressionStatement	free ( oldstr )	295:2:7121:7134	5024540	5	True				
ANR	5024849	CallExpression	free ( oldstr )		5024540	0					
ANR	5024850	Callee	free		5024540	0					
ANR	5024851	Identifier	free		5024540	0					
ANR	5024852	ArgumentList	oldstr		5024540	1					
ANR	5024853	Argument	oldstr		5024540	0					
ANR	5024854	Identifier	oldstr		5024540	0					
ANR	5024855	Statement	r_list_foreach	297:1:7140:7153	5024540	18	True				
ANR	5024856	Statement	(	297:16:7155:7155	5024540	19	True				
ANR	5024857	Statement	bpargs	297:17:7156:7161	5024540	20	True				
ANR	5024858	Statement	","	297:23:7162:7162	5024540	21	True				
ANR	5024859	Statement	iter	297:25:7164:7167	5024540	22	True				
ANR	5024860	Statement	","	297:29:7168:7168	5024540	23	True				
ANR	5024861	Statement	var	297:31:7170:7172	5024540	24	True				
ANR	5024862	Statement	)	297:34:7173:7173	5024540	25	True				
ANR	5024863	CompoundStatement		46:16:1256:1273	5024540	26					
ANR	5024864	IdentifierDeclStatement	char * tmpf = NULL ;	298:16:7193:7210	5024540	0	True				
ANR	5024865	IdentifierDecl	* tmpf = NULL		5024540	0					
ANR	5024866	IdentifierDeclType	char *		5024540	0					
ANR	5024867	Identifier	tmpf		5024540	1					
ANR	5024868	AssignmentExpression	* tmpf = NULL		5024540	2		=			
ANR	5024869	Identifier	NULL		5024540	0					
ANR	5024870	Identifier	NULL		5024540	1					
ANR	5024871	IfStatement	if ( var -> delta < 10 )		5024540	1					
ANR	5024872	Condition	var -> delta < 10	299:20:7232:7246	5024540	0	True				
ANR	5024873	RelationalExpression	var -> delta < 10		5024540	0		<			
ANR	5024874	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024875	Identifier	var		5024540	0					
ANR	5024876	Identifier	delta		5024540	1					
ANR	5024877	PrimaryExpression	10		5024540	1					
ANR	5024878	CompoundStatement		47:37:1312:1312	5024540	1					
ANR	5024879	ExpressionStatement	"tmpf = ""%d(%s)"""	300:24:7275:7290	5024540	0	True				
ANR	5024880	AssignmentExpression	"tmpf = ""%d(%s)"""		5024540	0		=			
ANR	5024881	Identifier	tmpf		5024540	0					
ANR	5024882	PrimaryExpression	"""%d(%s)"""		5024540	1					
ANR	5024883	ElseStatement	else		5024540	0					
ANR	5024884	IfStatement	if ( var -> delta > 0 )		5024540	0					
ANR	5024885	Condition	var -> delta > 0	301:27:7319:7332	5024540	0	True				
ANR	5024886	RelationalExpression	var -> delta > 0		5024540	0		>			
ANR	5024887	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024888	Identifier	var		5024540	0					
ANR	5024889	Identifier	delta		5024540	1					
ANR	5024890	PrimaryExpression	0		5024540	1					
ANR	5024891	CompoundStatement		49:43:1398:1398	5024540	1					
ANR	5024892	ExpressionStatement	"tmpf = ""0x%x(%s)"""	302:24:7361:7378	5024540	0	True				
ANR	5024893	AssignmentExpression	"tmpf = ""0x%x(%s)"""		5024540	0		=			
ANR	5024894	Identifier	tmpf		5024540	0					
ANR	5024895	PrimaryExpression	"""0x%x(%s)"""		5024540	1					
ANR	5024896	ElseStatement	else		5024540	0					
ANR	5024897	CompoundStatement		51:23:1466:1466	5024540	0					
ANR	5024898	ExpressionStatement	"tmpf = ""-0x%x(%s)"""	304:24:7429:7447	5024540	0	True				
ANR	5024899	AssignmentExpression	"tmpf = ""-0x%x(%s)"""		5024540	0		=			
ANR	5024900	Identifier	tmpf		5024540	0					
ANR	5024901	PrimaryExpression	"""-0x%x(%s)"""		5024540	1					
ANR	5024902	ExpressionStatement	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"	306:16:7483:7568	5024540	2	True				
ANR	5024903	AssignmentExpression	"oldstr = r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"		5024540	0		=			
ANR	5024904	Identifier	oldstr		5024540	0					
ANR	5024905	CallExpression	"r_str_newf ( tmpf , r_num_abs ( var -> delta ) , anal -> reg -> name [ R_REG_NAME_BP ] )"		5024540	1					
ANR	5024906	Callee	r_str_newf		5024540	0					
ANR	5024907	Identifier	r_str_newf		5024540	0					
ANR	5024908	ArgumentList	tmpf		5024540	1					
ANR	5024909	Argument	tmpf		5024540	0					
ANR	5024910	Identifier	tmpf		5024540	0					
ANR	5024911	Argument	r_num_abs ( var -> delta )		5024540	1					
ANR	5024912	CallExpression	r_num_abs ( var -> delta )		5024540	0					
ANR	5024913	Callee	r_num_abs		5024540	0					
ANR	5024914	Identifier	r_num_abs		5024540	0					
ANR	5024915	ArgumentList	var -> delta		5024540	1					
ANR	5024916	Argument	var -> delta		5024540	0					
ANR	5024917	PtrMemberAccess	var -> delta		5024540	0					
ANR	5024918	Identifier	var		5024540	0					
ANR	5024919	Identifier	delta		5024540	1					
ANR	5024920	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5024540	2					
ANR	5024921	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5024540	0					
ANR	5024922	PtrMemberAccess	anal -> reg -> name		5024540	0					
ANR	5024923	PtrMemberAccess	anal -> reg		5024540	0					
ANR	5024924	Identifier	anal		5024540	0					
ANR	5024925	Identifier	reg		5024540	1					
ANR	5024926	Identifier	name		5024540	1					
ANR	5024927	Identifier	R_REG_NAME_BP		5024540	1					
ANR	5024928	IfStatement	if ( ucase )		5024540	3					
ANR	5024929	Condition	ucase	308:20:7590:7594	5024540	0	True				
ANR	5024930	Identifier	ucase		5024540	0					
ANR	5024931	CompoundStatement		57:24:1686:1720	5024540	1					
ANR	5024932	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	309:24:7623:7657	5024540	0	True				
ANR	5024933	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5024540	0					
ANR	5024934	IdentifierDeclType	char *		5024540	0					
ANR	5024935	Identifier	comma		5024540	1					
ANR	5024936	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5024540	2		=			
ANR	5024937	Identifier	comma		5024540	0					
ANR	5024938	CallExpression	"strchr ( oldstr , ',' )"		5024540	1					
ANR	5024939	Callee	strchr		5024540	0					
ANR	5024940	Identifier	strchr		5024540	0					
ANR	5024941	ArgumentList	oldstr		5024540	1					
ANR	5024942	Argument	oldstr		5024540	0					
ANR	5024943	Identifier	oldstr		5024540	0					
ANR	5024944	Argument	"','"		5024540	1					
ANR	5024945	PrimaryExpression	"','"		5024540	0					
ANR	5024946	IfStatement	if ( comma )		5024540	1					
ANR	5024947	Condition	comma	310:28:7687:7691	5024540	0	True				
ANR	5024948	Identifier	comma		5024540	0					
ANR	5024949	CompoundStatement		58:35:1757:1757	5024540	1					
ANR	5024950	ExpressionStatement	* comma = 0	311:32:7728:7738	5024540	0	True				
ANR	5024951	AssignmentExpression	* comma = 0		5024540	0		=			
ANR	5024952	UnaryOperationExpression	* comma		5024540	0					
ANR	5024953	UnaryOperator	*		5024540	0					
ANR	5024954	Identifier	comma		5024540	1					
ANR	5024955	PrimaryExpression	0		5024540	1					
ANR	5024956	ExpressionStatement	"r_str_case ( oldstr , true )"	312:32:7772:7797	5024540	1	True				
ANR	5024957	CallExpression	"r_str_case ( oldstr , true )"		5024540	0					
ANR	5024958	Callee	r_str_case		5024540	0					
ANR	5024959	Identifier	r_str_case		5024540	0					
ANR	5024960	ArgumentList	oldstr		5024540	1					
ANR	5024961	Argument	oldstr		5024540	0					
ANR	5024962	Identifier	oldstr		5024540	0					
ANR	5024963	Argument	true		5024540	1					
ANR	5024964	Identifier	true		5024540	0					
ANR	5024965	ExpressionStatement	"* comma = ','"	313:32:7831:7843	5024540	2	True				
ANR	5024966	AssignmentExpression	"* comma = ','"		5024540	0		=			
ANR	5024967	UnaryOperationExpression	* comma		5024540	0					
ANR	5024968	UnaryOperator	*		5024540	0					
ANR	5024969	Identifier	comma		5024540	1					
ANR	5024970	PrimaryExpression	"','"		5024540	1					
ANR	5024971	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5024540	4					
ANR	5024972	Condition	"strstr ( tstr , oldstr )"	316:20:7909:7929	5024540	0	True				
ANR	5024973	CallExpression	"strstr ( tstr , oldstr )"		5024540	0					
ANR	5024974	Callee	strstr		5024540	0					
ANR	5024975	Identifier	strstr		5024540	0					
ANR	5024976	ArgumentList	tstr		5024540	1					
ANR	5024977	Argument	tstr		5024540	0					
ANR	5024978	Identifier	tstr		5024540	0					
ANR	5024979	Argument	oldstr		5024540	1					
ANR	5024980	Identifier	oldstr		5024540	0					
ANR	5024981	CompoundStatement		65:24:2021:2192	5024540	1					
ANR	5024982	IdentifierDeclStatement	"char * newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] ) ;"	317:24:7958:8129	5024540	0	True				
ANR	5024983	IdentifierDecl	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	0					
ANR	5024984	IdentifierDeclType	char *		5024540	0					
ANR	5024985	Identifier	newstr		5024540	1					
ANR	5024986	AssignmentExpression	"* newstr = ( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	2		=			
ANR	5024987	Identifier	newstr		5024540	0					
ANR	5024988	ConditionalExpression	"( p -> localvar_only ) ? r_str_newf ( ""(%s)"" , var -> name ) : r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	1					
ANR	5024989	Condition	p -> localvar_only		5024540	0					
ANR	5024990	PtrMemberAccess	p -> localvar_only		5024540	0					
ANR	5024991	Identifier	p		5024540	0					
ANR	5024992	Identifier	localvar_only		5024540	1					
ANR	5024993	CallExpression	"r_str_newf ( ""(%s)"" , var -> name )"		5024540	1					
ANR	5024994	Callee	r_str_newf		5024540	0					
ANR	5024995	Identifier	r_str_newf		5024540	0					
ANR	5024996	ArgumentList	"""(%s)"""		5024540	1					
ANR	5024997	Argument	"""(%s)"""		5024540	0					
ANR	5024998	PrimaryExpression	"""(%s)"""		5024540	0					
ANR	5024999	Argument	var -> name		5024540	1					
ANR	5025000	PtrMemberAccess	var -> name		5024540	0					
ANR	5025001	Identifier	var		5024540	0					
ANR	5025002	Identifier	name		5024540	1					
ANR	5025003	CallExpression	"r_str_newf ( ""%s%s(%s)"" , var -> delta > 0 ? """" : ""-"" , var -> name , anal -> reg -> name [ R_REG_NAME_SP ] )"		5024540	2					
ANR	5025004	Callee	r_str_newf		5024540	0					
ANR	5025005	Identifier	r_str_newf		5024540	0					
ANR	5025006	ArgumentList	"""%s%s(%s)"""		5024540	1					
ANR	5025007	Argument	"""%s%s(%s)"""		5024540	0					
ANR	5025008	PrimaryExpression	"""%s%s(%s)"""		5024540	0					
ANR	5025009	Argument	"var -> delta > 0 ? """" : ""-"""		5024540	1					
ANR	5025010	ConditionalExpression	"var -> delta > 0 ? """" : ""-"""		5024540	0					
ANR	5025011	Condition	var -> delta > 0		5024540	0					
ANR	5025012	RelationalExpression	var -> delta > 0		5024540	0		>			
ANR	5025013	PtrMemberAccess	var -> delta		5024540	0					
ANR	5025014	Identifier	var		5024540	0					
ANR	5025015	Identifier	delta		5024540	1					
ANR	5025016	PrimaryExpression	0		5024540	1					
ANR	5025017	PrimaryExpression	""""""		5024540	1					
ANR	5025018	PrimaryExpression	"""-"""		5024540	2					
ANR	5025019	Argument	var -> name		5024540	2					
ANR	5025020	PtrMemberAccess	var -> name		5024540	0					
ANR	5025021	Identifier	var		5024540	0					
ANR	5025022	Identifier	name		5024540	1					
ANR	5025023	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	3					
ANR	5025024	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5024540	0					
ANR	5025025	PtrMemberAccess	anal -> reg -> name		5024540	0					
ANR	5025026	PtrMemberAccess	anal -> reg		5024540	0					
ANR	5025027	Identifier	anal		5024540	0					
ANR	5025028	Identifier	reg		5024540	1					
ANR	5025029	Identifier	name		5024540	1					
ANR	5025030	Identifier	R_REG_NAME_SP		5024540	1					
ANR	5025031	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	320:24:8155:8201	5024540	1	True				
ANR	5025032	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5024540	0		=			
ANR	5025033	Identifier	tstr		5024540	0					
ANR	5025034	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5024540	1					
ANR	5025035	Callee	r_str_replace		5024540	0					
ANR	5025036	Identifier	r_str_replace		5024540	0					
ANR	5025037	ArgumentList	tstr		5024540	1					
ANR	5025038	Argument	tstr		5024540	0					
ANR	5025039	Identifier	tstr		5024540	0					
ANR	5025040	Argument	oldstr		5024540	1					
ANR	5025041	Identifier	oldstr		5024540	0					
ANR	5025042	Argument	newstr		5024540	2					
ANR	5025043	Identifier	newstr		5024540	0					
ANR	5025044	Argument	1		5024540	3					
ANR	5025045	PrimaryExpression	1		5024540	0					
ANR	5025046	ExpressionStatement	free ( newstr )	321:24:8227:8240	5024540	2	True				
ANR	5025047	CallExpression	free ( newstr )		5024540	0					
ANR	5025048	Callee	free		5024540	0					
ANR	5025049	Identifier	free		5024540	0					
ANR	5025050	ArgumentList	newstr		5024540	1					
ANR	5025051	Argument	newstr		5024540	0					
ANR	5025052	Identifier	newstr		5024540	0					
ANR	5025053	ExpressionStatement	free ( oldstr )	322:24:8266:8279	5024540	3	True				
ANR	5025054	CallExpression	free ( oldstr )		5024540	0					
ANR	5025055	Callee	free		5024540	0					
ANR	5025056	Identifier	free		5024540	0					
ANR	5025057	ArgumentList	oldstr		5024540	1					
ANR	5025058	Argument	oldstr		5024540	0					
ANR	5025059	Identifier	oldstr		5024540	0					
ANR	5025060	BreakStatement	break ;	323:24:8305:8310	5024540	4	True				
ANR	5025061	ExpressionStatement	free ( oldstr )	325:16:8346:8359	5024540	5	True				
ANR	5025062	CallExpression	free ( oldstr )		5024540	0					
ANR	5025063	Callee	free		5024540	0					
ANR	5025064	Identifier	free		5024540	0					
ANR	5025065	ArgumentList	oldstr		5024540	1					
ANR	5025066	Argument	oldstr		5024540	0					
ANR	5025067	Identifier	oldstr		5024540	0					
ANR	5025068	IdentifierDeclStatement	bool ret = true ;	327:1:8365:8380	5024540	27	True				
ANR	5025069	IdentifierDecl	ret = true		5024540	0					
ANR	5025070	IdentifierDeclType	bool		5024540	0					
ANR	5025071	Identifier	ret		5024540	1					
ANR	5025072	AssignmentExpression	ret = true		5024540	2		=			
ANR	5025073	Identifier	true		5024540	0					
ANR	5025074	Identifier	true		5024540	1					
ANR	5025075	IfStatement	if ( len > strlen ( tstr ) )		5024540	28					
ANR	5025076	Condition	len > strlen ( tstr )	328:5:8387:8405	5024540	0	True				
ANR	5025077	RelationalExpression	len > strlen ( tstr )		5024540	0		>			
ANR	5025078	Identifier	len		5024540	0					
ANR	5025079	CallExpression	strlen ( tstr )		5024540	1					
ANR	5025080	Callee	strlen		5024540	0					
ANR	5025081	Identifier	strlen		5024540	0					
ANR	5025082	ArgumentList	tstr		5024540	1					
ANR	5025083	Argument	tstr		5024540	0					
ANR	5025084	Identifier	tstr		5024540	0					
ANR	5025085	CompoundStatement		76:26:2471:2471	5024540	1					
ANR	5025086	ExpressionStatement	"strcpy ( str , tstr )"	329:2:8412:8430	5024540	0	True				
ANR	5025087	CallExpression	"strcpy ( str , tstr )"		5024540	0					
ANR	5025088	Callee	strcpy		5024540	0					
ANR	5025089	Identifier	strcpy		5024540	0					
ANR	5025090	ArgumentList	str		5024540	1					
ANR	5025091	Argument	str		5024540	0					
ANR	5025092	Identifier	str		5024540	0					
ANR	5025093	Argument	tstr		5024540	1					
ANR	5025094	Identifier	tstr		5024540	0					
ANR	5025095	ElseStatement	else		5024540	0					
ANR	5025096	CompoundStatement		78:8:2503:2503	5024540	0					
ANR	5025097	ExpressionStatement	ret = false	332:2:8484:8495	5024540	0	True				
ANR	5025098	AssignmentExpression	ret = false		5024540	0		=			
ANR	5025099	Identifier	ret		5024540	0					
ANR	5025100	Identifier	false		5024540	1					
ANR	5025101	ExpressionStatement	free ( tstr )	334:1:8501:8512	5024540	29	True				
ANR	5025102	CallExpression	free ( tstr )		5024540	0					
ANR	5025103	Callee	free		5024540	0					
ANR	5025104	Identifier	free		5024540	0					
ANR	5025105	ArgumentList	tstr		5024540	1					
ANR	5025106	Argument	tstr		5024540	0					
ANR	5025107	Identifier	tstr		5024540	0					
ANR	5025108	ExpressionStatement	r_list_free ( bpargs )	335:1:8515:8535	5024540	30	True				
ANR	5025109	CallExpression	r_list_free ( bpargs )		5024540	0					
ANR	5025110	Callee	r_list_free		5024540	0					
ANR	5025111	Identifier	r_list_free		5024540	0					
ANR	5025112	ArgumentList	bpargs		5024540	1					
ANR	5025113	Argument	bpargs		5024540	0					
ANR	5025114	Identifier	bpargs		5024540	0					
ANR	5025115	ExpressionStatement	r_list_free ( spargs )	336:1:8538:8558	5024540	31	True				
ANR	5025116	CallExpression	r_list_free ( spargs )		5024540	0					
ANR	5025117	Callee	r_list_free		5024540	0					
ANR	5025118	Identifier	r_list_free		5024540	0					
ANR	5025119	ArgumentList	spargs		5024540	1					
ANR	5025120	Argument	spargs		5024540	0					
ANR	5025121	Identifier	spargs		5024540	0					
ANR	5025122	ReturnStatement	return ret ;	337:1:8561:8571	5024540	32	True				
ANR	5025123	Identifier	ret		5024540	0					
ANR	5025124	ReturnType	static bool		5024540	1					
ANR	5025125	Identifier	varsub		5024540	2					
ANR	5025126	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5024540	3					
ANR	5025127	Parameter	RParse * p	253:19:5853:5861	5024540	0	True				
ANR	5025128	ParameterType	RParse *		5024540	0					
ANR	5025129	Identifier	p		5024540	1					
ANR	5025130	Parameter	RAnalFunction * f	253:30:5864:5879	5024540	1	True				
ANR	5025131	ParameterType	RAnalFunction *		5024540	0					
ANR	5025132	Identifier	f		5024540	1					
ANR	5025133	Parameter	ut64 addr	253:48:5882:5890	5024540	2	True				
ANR	5025134	ParameterType	ut64		5024540	0					
ANR	5025135	Identifier	addr		5024540	1					
ANR	5025136	Parameter	int oplen	253:59:5893:5901	5024540	3	True				
ANR	5025137	ParameterType	int		5024540	0					
ANR	5025138	Identifier	oplen		5024540	1					
ANR	5025139	Parameter	char * data	253:70:5904:5913	5024540	4	True				
ANR	5025140	ParameterType	char *		5024540	0					
ANR	5025141	Identifier	data		5024540	1					
ANR	5025142	Parameter	char * str	253:82:5916:5924	5024540	5	True				
ANR	5025143	ParameterType	char *		5024540	0					
ANR	5025144	Identifier	str		5024540	1					
ANR	5025145	Parameter	int len	253:93:5927:5933	5024540	6	True				
ANR	5025146	ParameterType	int		5024540	0					
ANR	5025147	Identifier	len		5024540	1					
ANR	5025148	CFGEntryNode	ENTRY		5024540		True				
ANR	5025149	CFGExitNode	EXIT		5024540		True				
ANR	5025150	CFGErrorNode	ERROR		5024540		True				
ANR	5025151	Symbol	anal -> reg		5024540						
ANR	5025152	Symbol	data		5024540						
ANR	5025153	Symbol	p -> varlist		5024540						
ANR	5025154	Symbol	strchr		5024540						
ANR	5025155	Symbol	tstr		5024540						
ANR	5025156	Symbol	var -> delta		5024540						
ANR	5025157	Symbol	strlen		5024540						
ANR	5025158	Symbol	len		5024540						
ANR	5025159	Symbol	tmpf		5024540						
ANR	5025160	Symbol	anal -> reg -> name		5024540						
ANR	5025161	Symbol	R_REG_NAME_BP		5024540						
ANR	5025162	Symbol	ret		5024540						
ANR	5025163	Symbol	oldstr		5024540						
ANR	5025164	Symbol	NULL		5024540						
ANR	5025165	Symbol	var		5024540						
ANR	5025166	Symbol	r_num_abs		5024540						
ANR	5025167	Symbol	iter		5024540						
ANR	5025168	Symbol	spargs		5024540						
ANR	5025169	Symbol	str		5024540						
ANR	5025170	Symbol	R_REG_NAME_SP		5024540						
ANR	5025171	Symbol	anal		5024540						
ANR	5025172	Symbol	strstr		5024540						
ANR	5025173	Symbol	bpargs		5024540						
ANR	5025174	Symbol	true		5024540						
ANR	5025175	Symbol	var -> name		5024540						
ANR	5025176	Symbol	ucase		5024540						
ANR	5025177	Symbol	* anal -> reg -> name		5024540						
ANR	5025178	Symbol	* R_REG_NAME_SP		5024540						
ANR	5025179	Symbol	oplen		5024540						
ANR	5025180	Symbol	r_str_newf		5024540						
ANR	5025181	Symbol	p -> localvar_only		5024540						
ANR	5025182	Symbol	* var		5024540						
ANR	5025183	Symbol	* * anal		5024540						
ANR	5025184	Symbol	* anal		5024540						
ANR	5025185	Symbol	* anal -> reg		5024540						
ANR	5025186	Symbol	* * * anal		5024540						
ANR	5025187	Symbol	* tstr		5024540						
ANR	5025188	Symbol	r_str_replace		5024540						
ANR	5025189	Symbol	p -> analb . anal		5024540						
ANR	5025190	Symbol	* comma		5024540						
ANR	5025191	Symbol	* * anal -> reg		5024540						
ANR	5025192	Symbol	addr		5024540						
ANR	5025193	Symbol	f		5024540						
ANR	5025194	Symbol	p -> analb		5024540						
ANR	5025195	Symbol	IS_UPPER		5024540						
ANR	5025196	Symbol	false		5024540						
ANR	5025197	Symbol	newstr		5024540						
ANR	5025198	Symbol	p		5024540						
ANR	5025199	Symbol	comma		5024540						
ANR	5025200	Symbol	* R_REG_NAME_BP		5024540						
ANR	5025201	Symbol	* p		5024540						
ANR	5025202	Symbol	strdup		5024540						
ANR	5025203	DeclStmt									
ANR	5025204	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_mips_pseudo
ANR	5025205	DeclStmt									
ANR	5025206	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
