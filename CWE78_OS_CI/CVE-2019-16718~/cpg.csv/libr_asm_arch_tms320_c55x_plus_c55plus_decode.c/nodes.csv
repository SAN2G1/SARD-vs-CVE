command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3316235	File	data/converged/CVE-2019-16718~_radare2/libr_asm_arch_tms320_c55x_plus_c55plus_decode.c								
ANR	3316236	DeclStmt									
ANR	3316237	Decl							extern char	extern char * [ ]	ins_str
ANR	3316238	DeclStmt									
ANR	3316239	Decl							extern ut32	extern ut32	ins_buff_len
ANR	3316240	Function	get_q_bits	19:0:326:1339							
ANR	3316241	FunctionDef	"get_q_bits (ut32 val , char * ins , ut32 ins_len , int * err_code)"		3316240	0					
ANR	3316242	CompoundStatement		19:73:399:1339	3316240	0					
ANR	3316243	IdentifierDeclStatement	ut32 res = 0 ;	20:1:402:414	3316240	0	True				
ANR	3316244	IdentifierDecl	res = 0		3316240	0					
ANR	3316245	IdentifierDeclType	ut32		3316240	0					
ANR	3316246	Identifier	res		3316240	1					
ANR	3316247	AssignmentExpression	res = 0		3316240	2		=			
ANR	3316248	Identifier	res		3316240	0					
ANR	3316249	PrimaryExpression	0		3316240	1					
ANR	3316250	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_MMAP"" , 6 ) )"		3316240	1					
ANR	3316251	Condition	"! r_str_ncasecmp ( ins , ""q_MMAP"" , 6 )"	22:5:422:454	3316240	0	True				
ANR	3316252	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_MMAP"" , 6 )"		3316240	0					
ANR	3316253	UnaryOperator	!		3316240	0					
ANR	3316254	CallExpression	"r_str_ncasecmp ( ins , ""q_MMAP"" , 6 )"		3316240	1					
ANR	3316255	Callee	r_str_ncasecmp		3316240	0					
ANR	3316256	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316257	ArgumentList	ins		3316240	1					
ANR	3316258	Argument	ins		3316240	0					
ANR	3316259	Identifier	ins		3316240	0					
ANR	3316260	Argument	"""q_MMAP"""		3316240	1					
ANR	3316261	PrimaryExpression	"""q_MMAP"""		3316240	0					
ANR	3316262	Argument	6		3316240	2					
ANR	3316263	PrimaryExpression	6		3316240	0					
ANR	3316264	CompoundStatement		4:40:57:57	3316240	1					
ANR	3316265	ExpressionStatement	res = val & 1	23:2:461:474	3316240	0	True				
ANR	3316266	AssignmentExpression	res = val & 1		3316240	0		=			
ANR	3316267	Identifier	res		3316240	0					
ANR	3316268	BitAndExpression	val & 1		3316240	1		&			
ANR	3316269	Identifier	val		3316240	0					
ANR	3316270	PrimaryExpression	1		3316240	1					
ANR	3316271	ElseStatement	else		3316240	0					
ANR	3316272	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_LOCK"" , 6 ) )"		3316240	0					
ANR	3316273	Condition	"! r_str_ncasecmp ( ins , ""q_LOCK"" , 6 )"	24:12:488:520	3316240	0	True				
ANR	3316274	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_LOCK"" , 6 )"		3316240	0					
ANR	3316275	UnaryOperator	!		3316240	0					
ANR	3316276	CallExpression	"r_str_ncasecmp ( ins , ""q_LOCK"" , 6 )"		3316240	1					
ANR	3316277	Callee	r_str_ncasecmp		3316240	0					
ANR	3316278	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316279	ArgumentList	ins		3316240	1					
ANR	3316280	Argument	ins		3316240	0					
ANR	3316281	Identifier	ins		3316240	0					
ANR	3316282	Argument	"""q_LOCK"""		3316240	1					
ANR	3316283	PrimaryExpression	"""q_LOCK"""		3316240	0					
ANR	3316284	Argument	6		3316240	2					
ANR	3316285	PrimaryExpression	6		3316240	0					
ANR	3316286	CompoundStatement		6:47:123:123	3316240	1					
ANR	3316287	ExpressionStatement	res = val & 1	25:2:527:540	3316240	0	True				
ANR	3316288	AssignmentExpression	res = val & 1		3316240	0		=			
ANR	3316289	Identifier	res		3316240	0					
ANR	3316290	BitAndExpression	val & 1		3316240	1		&			
ANR	3316291	Identifier	val		3316240	0					
ANR	3316292	PrimaryExpression	1		3316240	1					
ANR	3316293	ElseStatement	else		3316240	0					
ANR	3316294	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_LINR"" , 6 ) )"		3316240	0					
ANR	3316295	Condition	"! r_str_ncasecmp ( ins , ""q_LINR"" , 6 )"	26:12:554:586	3316240	0	True				
ANR	3316296	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_LINR"" , 6 )"		3316240	0					
ANR	3316297	UnaryOperator	!		3316240	0					
ANR	3316298	CallExpression	"r_str_ncasecmp ( ins , ""q_LINR"" , 6 )"		3316240	1					
ANR	3316299	Callee	r_str_ncasecmp		3316240	0					
ANR	3316300	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316301	ArgumentList	ins		3316240	1					
ANR	3316302	Argument	ins		3316240	0					
ANR	3316303	Identifier	ins		3316240	0					
ANR	3316304	Argument	"""q_LINR"""		3316240	1					
ANR	3316305	PrimaryExpression	"""q_LINR"""		3316240	0					
ANR	3316306	Argument	6		3316240	2					
ANR	3316307	PrimaryExpression	6		3316240	0					
ANR	3316308	CompoundStatement		8:47:189:189	3316240	1					
ANR	3316309	ExpressionStatement	res = ( val >> 2 ) & 1	27:2:593:613	3316240	0	True				
ANR	3316310	AssignmentExpression	res = ( val >> 2 ) & 1		3316240	0		=			
ANR	3316311	Identifier	res		3316240	0					
ANR	3316312	BitAndExpression	( val >> 2 ) & 1		3316240	1		&			
ANR	3316313	ShiftExpression	val >> 2		3316240	0		>>			
ANR	3316314	Identifier	val		3316240	0					
ANR	3316315	PrimaryExpression	2		3316240	1					
ANR	3316316	PrimaryExpression	1		3316240	1					
ANR	3316317	ElseStatement	else		3316240	0					
ANR	3316318	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_CIRC"" , 6 ) )"		3316240	0					
ANR	3316319	Condition	"! r_str_ncasecmp ( ins , ""q_CIRC"" , 6 )"	28:12:627:659	3316240	0	True				
ANR	3316320	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_CIRC"" , 6 )"		3316240	0					
ANR	3316321	UnaryOperator	!		3316240	0					
ANR	3316322	CallExpression	"r_str_ncasecmp ( ins , ""q_CIRC"" , 6 )"		3316240	1					
ANR	3316323	Callee	r_str_ncasecmp		3316240	0					
ANR	3316324	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316325	ArgumentList	ins		3316240	1					
ANR	3316326	Argument	ins		3316240	0					
ANR	3316327	Identifier	ins		3316240	0					
ANR	3316328	Argument	"""q_CIRC"""		3316240	1					
ANR	3316329	PrimaryExpression	"""q_CIRC"""		3316240	0					
ANR	3316330	Argument	6		3316240	2					
ANR	3316331	PrimaryExpression	6		3316240	0					
ANR	3316332	CompoundStatement		10:47:262:262	3316240	1					
ANR	3316333	ExpressionStatement	res = ( val >> 3 ) & 1	29:2:666:686	3316240	0	True				
ANR	3316334	AssignmentExpression	res = ( val >> 3 ) & 1		3316240	0		=			
ANR	3316335	Identifier	res		3316240	0					
ANR	3316336	BitAndExpression	( val >> 3 ) & 1		3316240	1		&			
ANR	3316337	ShiftExpression	val >> 3		3316240	0		>>			
ANR	3316338	Identifier	val		3316240	0					
ANR	3316339	PrimaryExpression	3		3316240	1					
ANR	3316340	PrimaryExpression	1		3316240	1					
ANR	3316341	ElseStatement	else		3316240	0					
ANR	3316342	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_PORT_READ"" , 11 ) )"		3316240	0					
ANR	3316343	Condition	"! r_str_ncasecmp ( ins , ""q_PORT_READ"" , 11 )"	30:12:700:738	3316240	0	True				
ANR	3316344	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_PORT_READ"" , 11 )"		3316240	0					
ANR	3316345	UnaryOperator	!		3316240	0					
ANR	3316346	CallExpression	"r_str_ncasecmp ( ins , ""q_PORT_READ"" , 11 )"		3316240	1					
ANR	3316347	Callee	r_str_ncasecmp		3316240	0					
ANR	3316348	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316349	ArgumentList	ins		3316240	1					
ANR	3316350	Argument	ins		3316240	0					
ANR	3316351	Identifier	ins		3316240	0					
ANR	3316352	Argument	"""q_PORT_READ"""		3316240	1					
ANR	3316353	PrimaryExpression	"""q_PORT_READ"""		3316240	0					
ANR	3316354	Argument	11		3316240	2					
ANR	3316355	PrimaryExpression	11		3316240	0					
ANR	3316356	CompoundStatement		12:53:341:341	3316240	1					
ANR	3316357	ExpressionStatement	res = ( val >> 4 ) & 1	31:2:745:765	3316240	0	True				
ANR	3316358	AssignmentExpression	res = ( val >> 4 ) & 1		3316240	0		=			
ANR	3316359	Identifier	res		3316240	0					
ANR	3316360	BitAndExpression	( val >> 4 ) & 1		3316240	1		&			
ANR	3316361	ShiftExpression	val >> 4		3316240	0		>>			
ANR	3316362	Identifier	val		3316240	0					
ANR	3316363	PrimaryExpression	4		3316240	1					
ANR	3316364	PrimaryExpression	1		3316240	1					
ANR	3316365	ElseStatement	else		3316240	0					
ANR	3316366	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_PORT_WRITE"" , 12 ) )"		3316240	0					
ANR	3316367	Condition	"! r_str_ncasecmp ( ins , ""q_PORT_WRITE"" , 12 )"	32:12:779:818	3316240	0	True				
ANR	3316368	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_PORT_WRITE"" , 12 )"		3316240	0					
ANR	3316369	UnaryOperator	!		3316240	0					
ANR	3316370	CallExpression	"r_str_ncasecmp ( ins , ""q_PORT_WRITE"" , 12 )"		3316240	1					
ANR	3316371	Callee	r_str_ncasecmp		3316240	0					
ANR	3316372	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316373	ArgumentList	ins		3316240	1					
ANR	3316374	Argument	ins		3316240	0					
ANR	3316375	Identifier	ins		3316240	0					
ANR	3316376	Argument	"""q_PORT_WRITE"""		3316240	1					
ANR	3316377	PrimaryExpression	"""q_PORT_WRITE"""		3316240	0					
ANR	3316378	Argument	12		3316240	2					
ANR	3316379	PrimaryExpression	12		3316240	0					
ANR	3316380	CompoundStatement		14:54:421:421	3316240	1					
ANR	3316381	ExpressionStatement	res = ( val >> 5 ) & 1	33:2:825:845	3316240	0	True				
ANR	3316382	AssignmentExpression	res = ( val >> 5 ) & 1		3316240	0		=			
ANR	3316383	Identifier	res		3316240	0					
ANR	3316384	BitAndExpression	( val >> 5 ) & 1		3316240	1		&			
ANR	3316385	ShiftExpression	val >> 5		3316240	0		>>			
ANR	3316386	Identifier	val		3316240	0					
ANR	3316387	PrimaryExpression	5		3316240	1					
ANR	3316388	PrimaryExpression	1		3316240	1					
ANR	3316389	ElseStatement	else		3316240	0					
ANR	3316390	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_XPORT_READ"" , 12 ) )"		3316240	0					
ANR	3316391	Condition	"! r_str_ncasecmp ( ins , ""q_XPORT_READ"" , 12 )"	34:12:859:898	3316240	0	True				
ANR	3316392	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_XPORT_READ"" , 12 )"		3316240	0					
ANR	3316393	UnaryOperator	!		3316240	0					
ANR	3316394	CallExpression	"r_str_ncasecmp ( ins , ""q_XPORT_READ"" , 12 )"		3316240	1					
ANR	3316395	Callee	r_str_ncasecmp		3316240	0					
ANR	3316396	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316397	ArgumentList	ins		3316240	1					
ANR	3316398	Argument	ins		3316240	0					
ANR	3316399	Identifier	ins		3316240	0					
ANR	3316400	Argument	"""q_XPORT_READ"""		3316240	1					
ANR	3316401	PrimaryExpression	"""q_XPORT_READ"""		3316240	0					
ANR	3316402	Argument	12		3316240	2					
ANR	3316403	PrimaryExpression	12		3316240	0					
ANR	3316404	CompoundStatement		16:54:501:501	3316240	1					
ANR	3316405	ExpressionStatement	res = ( val >> 6 ) & 1	35:2:905:925	3316240	0	True				
ANR	3316406	AssignmentExpression	res = ( val >> 6 ) & 1		3316240	0		=			
ANR	3316407	Identifier	res		3316240	0					
ANR	3316408	BitAndExpression	( val >> 6 ) & 1		3316240	1		&			
ANR	3316409	ShiftExpression	val >> 6		3316240	0		>>			
ANR	3316410	Identifier	val		3316240	0					
ANR	3316411	PrimaryExpression	6		3316240	1					
ANR	3316412	PrimaryExpression	1		3316240	1					
ANR	3316413	ElseStatement	else		3316240	0					
ANR	3316414	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_XPORT_WRITE"" , 13 ) )"		3316240	0					
ANR	3316415	Condition	"! r_str_ncasecmp ( ins , ""q_XPORT_WRITE"" , 13 )"	36:12:939:979	3316240	0	True				
ANR	3316416	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_XPORT_WRITE"" , 13 )"		3316240	0					
ANR	3316417	UnaryOperator	!		3316240	0					
ANR	3316418	CallExpression	"r_str_ncasecmp ( ins , ""q_XPORT_WRITE"" , 13 )"		3316240	1					
ANR	3316419	Callee	r_str_ncasecmp		3316240	0					
ANR	3316420	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316421	ArgumentList	ins		3316240	1					
ANR	3316422	Argument	ins		3316240	0					
ANR	3316423	Identifier	ins		3316240	0					
ANR	3316424	Argument	"""q_XPORT_WRITE"""		3316240	1					
ANR	3316425	PrimaryExpression	"""q_XPORT_WRITE"""		3316240	0					
ANR	3316426	Argument	13		3316240	2					
ANR	3316427	PrimaryExpression	13		3316240	0					
ANR	3316428	CompoundStatement		18:55:582:582	3316240	1					
ANR	3316429	ExpressionStatement	res = ( val >> 7 ) & 1	37:2:986:1006	3316240	0	True				
ANR	3316430	AssignmentExpression	res = ( val >> 7 ) & 1		3316240	0		=			
ANR	3316431	Identifier	res		3316240	0					
ANR	3316432	BitAndExpression	( val >> 7 ) & 1		3316240	1		&			
ANR	3316433	ShiftExpression	val >> 7		3316240	0		>>			
ANR	3316434	Identifier	val		3316240	0					
ANR	3316435	PrimaryExpression	7		3316240	1					
ANR	3316436	PrimaryExpression	1		3316240	1					
ANR	3316437	ElseStatement	else		3316240	0					
ANR	3316438	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_SAT"" , 5 ) )"		3316240	0					
ANR	3316439	Condition	"! r_str_ncasecmp ( ins , ""q_SAT"" , 5 )"	38:12:1020:1051	3316240	0	True				
ANR	3316440	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_SAT"" , 5 )"		3316240	0					
ANR	3316441	UnaryOperator	!		3316240	0					
ANR	3316442	CallExpression	"r_str_ncasecmp ( ins , ""q_SAT"" , 5 )"		3316240	1					
ANR	3316443	Callee	r_str_ncasecmp		3316240	0					
ANR	3316444	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316445	ArgumentList	ins		3316240	1					
ANR	3316446	Argument	ins		3316240	0					
ANR	3316447	Identifier	ins		3316240	0					
ANR	3316448	Argument	"""q_SAT"""		3316240	1					
ANR	3316449	PrimaryExpression	"""q_SAT"""		3316240	0					
ANR	3316450	Argument	5		3316240	2					
ANR	3316451	PrimaryExpression	5		3316240	0					
ANR	3316452	CompoundStatement		20:46:654:654	3316240	1					
ANR	3316453	ExpressionStatement	res = ( val >> 8 ) & 1	39:2:1058:1078	3316240	0	True				
ANR	3316454	AssignmentExpression	res = ( val >> 8 ) & 1		3316240	0		=			
ANR	3316455	Identifier	res		3316240	0					
ANR	3316456	BitAndExpression	( val >> 8 ) & 1		3316240	1		&			
ANR	3316457	ShiftExpression	val >> 8		3316240	0		>>			
ANR	3316458	Identifier	val		3316240	0					
ANR	3316459	PrimaryExpression	8		3316240	1					
ANR	3316460	PrimaryExpression	1		3316240	1					
ANR	3316461	ElseStatement	else		3316240	0					
ANR	3316462	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_XC0"" , 5 ) )"		3316240	0					
ANR	3316463	Condition	"! r_str_ncasecmp ( ins , ""q_XC0"" , 5 )"	40:12:1092:1123	3316240	0	True				
ANR	3316464	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_XC0"" , 5 )"		3316240	0					
ANR	3316465	UnaryOperator	!		3316240	0					
ANR	3316466	CallExpression	"r_str_ncasecmp ( ins , ""q_XC0"" , 5 )"		3316240	1					
ANR	3316467	Callee	r_str_ncasecmp		3316240	0					
ANR	3316468	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316469	ArgumentList	ins		3316240	1					
ANR	3316470	Argument	ins		3316240	0					
ANR	3316471	Identifier	ins		3316240	0					
ANR	3316472	Argument	"""q_XC0"""		3316240	1					
ANR	3316473	PrimaryExpression	"""q_XC0"""		3316240	0					
ANR	3316474	Argument	5		3316240	2					
ANR	3316475	PrimaryExpression	5		3316240	0					
ANR	3316476	CompoundStatement		22:46:726:726	3316240	1					
ANR	3316477	ExpressionStatement	res = ( val >> 9 ) & 1	41:2:1130:1150	3316240	0	True				
ANR	3316478	AssignmentExpression	res = ( val >> 9 ) & 1		3316240	0		=			
ANR	3316479	Identifier	res		3316240	0					
ANR	3316480	BitAndExpression	( val >> 9 ) & 1		3316240	1		&			
ANR	3316481	ShiftExpression	val >> 9		3316240	0		>>			
ANR	3316482	Identifier	val		3316240	0					
ANR	3316483	PrimaryExpression	9		3316240	1					
ANR	3316484	PrimaryExpression	1		3316240	1					
ANR	3316485	ElseStatement	else		3316240	0					
ANR	3316486	IfStatement	"if ( ! r_str_ncasecmp ( ins , ""q_XC1"" , 5 ) )"		3316240	0					
ANR	3316487	Condition	"! r_str_ncasecmp ( ins , ""q_XC1"" , 5 )"	42:12:1164:1195	3316240	0	True				
ANR	3316488	UnaryOperationExpression	"! r_str_ncasecmp ( ins , ""q_XC1"" , 5 )"		3316240	0					
ANR	3316489	UnaryOperator	!		3316240	0					
ANR	3316490	CallExpression	"r_str_ncasecmp ( ins , ""q_XC1"" , 5 )"		3316240	1					
ANR	3316491	Callee	r_str_ncasecmp		3316240	0					
ANR	3316492	Identifier	r_str_ncasecmp		3316240	0					
ANR	3316493	ArgumentList	ins		3316240	1					
ANR	3316494	Argument	ins		3316240	0					
ANR	3316495	Identifier	ins		3316240	0					
ANR	3316496	Argument	"""q_XC1"""		3316240	1					
ANR	3316497	PrimaryExpression	"""q_XC1"""		3316240	0					
ANR	3316498	Argument	5		3316240	2					
ANR	3316499	PrimaryExpression	5		3316240	0					
ANR	3316500	CompoundStatement		24:46:798:798	3316240	1					
ANR	3316501	ExpressionStatement	res = ( val >> 10 ) & 1	43:2:1202:1223	3316240	0	True				
ANR	3316502	AssignmentExpression	res = ( val >> 10 ) & 1		3316240	0		=			
ANR	3316503	Identifier	res		3316240	0					
ANR	3316504	BitAndExpression	( val >> 10 ) & 1		3316240	1		&			
ANR	3316505	ShiftExpression	val >> 10		3316240	0		>>			
ANR	3316506	Identifier	val		3316240	0					
ANR	3316507	PrimaryExpression	10		3316240	1					
ANR	3316508	PrimaryExpression	1		3316240	1					
ANR	3316509	ElseStatement	else		3316240	0					
ANR	3316510	CompoundStatement		26:8:833:833	3316240	0					
ANR	3316511	ExpressionStatement	"fprintf ( stderr , ""Invalid token %s\\n"" , ins )"	46:2:1263:1305	3316240	0	True				
ANR	3316512	CallExpression	"fprintf ( stderr , ""Invalid token %s\\n"" , ins )"		3316240	0					
ANR	3316513	Callee	fprintf		3316240	0					
ANR	3316514	Identifier	fprintf		3316240	0					
ANR	3316515	ArgumentList	stderr		3316240	1					
ANR	3316516	Argument	stderr		3316240	0					
ANR	3316517	Identifier	stderr		3316240	0					
ANR	3316518	Argument	"""Invalid token %s\\n"""		3316240	1					
ANR	3316519	PrimaryExpression	"""Invalid token %s\\n"""		3316240	0					
ANR	3316520	Argument	ins		3316240	2					
ANR	3316521	Identifier	ins		3316240	0					
ANR	3316522	ExpressionStatement	* err_code = - 1	46:46:1307:1321	3316240	1	True				
ANR	3316523	AssignmentExpression	* err_code = - 1		3316240	0		=			
ANR	3316524	UnaryOperationExpression	* err_code		3316240	0					
ANR	3316525	UnaryOperator	*		3316240	0					
ANR	3316526	Identifier	err_code		3316240	1					
ANR	3316527	UnaryOperationExpression	- 1		3316240	1					
ANR	3316528	UnaryOperator	-		3316240	0					
ANR	3316529	PrimaryExpression	1		3316240	1					
ANR	3316530	ReturnStatement	return res ;	48:1:1327:1337	3316240	2	True				
ANR	3316531	Identifier	res		3316240	0					
ANR	3316532	ReturnType	static ut32		3316240	1					
ANR	3316533	Identifier	get_q_bits		3316240	2					
ANR	3316534	ParameterList	"ut32 val , char * ins , ut32 ins_len , int * err_code"		3316240	3					
ANR	3316535	Parameter	ut32 val	19:23:349:356	3316240	0	True				
ANR	3316536	ParameterType	ut32		3316240	0					
ANR	3316537	Identifier	val		3316240	1					
ANR	3316538	Parameter	char * ins	19:33:359:367	3316240	1	True				
ANR	3316539	ParameterType	char *		3316240	0					
ANR	3316540	Identifier	ins		3316240	1					
ANR	3316541	Parameter	ut32 ins_len	19:44:370:381	3316240	2	True				
ANR	3316542	ParameterType	ut32		3316240	0					
ANR	3316543	Identifier	ins_len		3316240	1					
ANR	3316544	Parameter	int * err_code	19:58:384:396	3316240	3	True				
ANR	3316545	ParameterType	int *		3316240	0					
ANR	3316546	Identifier	err_code		3316240	1					
ANR	3316547	CFGEntryNode	ENTRY		3316240		True				
ANR	3316548	CFGExitNode	EXIT		3316240		True				
ANR	3316549	Symbol	val		3316240						
ANR	3316550	Symbol	ins_len		3316240						
ANR	3316551	Symbol	res		3316240						
ANR	3316552	Symbol	* err_code		3316240						
ANR	3316553	Symbol	err_code		3316240						
ANR	3316554	Symbol	r_str_ncasecmp		3316240						
ANR	3316555	Symbol	stderr		3316240						
ANR	3316556	Symbol	ins		3316240						
ANR	3316557	Function	get_ins_bits	55:0:1423:2365							
ANR	3316558	FunctionDef	"get_ins_bits (ut32 hash_code , ut32 ins_pos , char * ins , ut32 ins_len , ut32 magic_value , int * err_code)"		3316557	0					
ANR	3316559	CompoundStatement		57:0:1537:2365	3316557	0					
ANR	3316560	IdentifierDeclStatement	ut32 res = 0 ;	58:1:1540:1552	3316557	0	True				
ANR	3316561	IdentifierDecl	res = 0		3316557	0					
ANR	3316562	IdentifierDeclType	ut32		3316557	0					
ANR	3316563	Identifier	res		3316557	1					
ANR	3316564	AssignmentExpression	res = 0		3316557	2		=			
ANR	3316565	Identifier	res		3316557	0					
ANR	3316566	PrimaryExpression	0		3316557	1					
ANR	3316567	IdentifierDeclStatement	ut8 op_b ;	59:1:1555:1563	3316557	1	True				
ANR	3316568	IdentifierDecl	op_b		3316557	0					
ANR	3316569	IdentifierDeclType	ut8		3316557	0					
ANR	3316570	Identifier	op_b		3316557	1					
ANR	3316571	IdentifierDeclStatement	"ut32 len , x , i ;"	60:1:1566:1580	3316557	2	True				
ANR	3316572	IdentifierDecl	len		3316557	0					
ANR	3316573	IdentifierDeclType	ut32		3316557	0					
ANR	3316574	Identifier	len		3316557	1					
ANR	3316575	IdentifierDecl	x		3316557	1					
ANR	3316576	IdentifierDeclType	ut32		3316557	0					
ANR	3316577	Identifier	x		3316557	1					
ANR	3316578	IdentifierDecl	i		3316557	2					
ANR	3316579	IdentifierDeclType	ut32		3316557	0					
ANR	3316580	Identifier	i		3316557	1					
ANR	3316581	IdentifierDeclStatement	"char * op_str , * aux ;"	61:1:1583:1601	3316557	3	True				
ANR	3316582	IdentifierDecl	* op_str		3316557	0					
ANR	3316583	IdentifierDeclType	char *		3316557	0					
ANR	3316584	Identifier	op_str		3316557	1					
ANR	3316585	IdentifierDecl	* aux		3316557	1					
ANR	3316586	IdentifierDeclType	char *		3316557	0					
ANR	3316587	Identifier	aux		3316557	1					
ANR	3316588	IfStatement	if ( ins [ 0 ] == 'q' )		3316557	4					
ANR	3316589	Condition	ins [ 0 ] == 'q'	63:5:1609:1621	3316557	0	True				
ANR	3316590	EqualityExpression	ins [ 0 ] == 'q'		3316557	0		==			
ANR	3316591	ArrayIndexing	ins [ 0 ]		3316557	0					
ANR	3316592	Identifier	ins		3316557	0					
ANR	3316593	PrimaryExpression	0		3316557	1					
ANR	3316594	PrimaryExpression	'q'		3316557	1					
ANR	3316595	CompoundStatement		7:20:86:86	3316557	1					
ANR	3316596	ReturnStatement	"return get_q_bits ( magic_value , ins , ins_len , err_code ) ;"	64:2:1628:1683	3316557	0	True				
ANR	3316597	CallExpression	"get_q_bits ( magic_value , ins , ins_len , err_code )"		3316557	0					
ANR	3316598	Callee	get_q_bits		3316557	0					
ANR	3316599	Identifier	get_q_bits		3316557	0					
ANR	3316600	ArgumentList	magic_value		3316557	1					
ANR	3316601	Argument	magic_value		3316557	0					
ANR	3316602	Identifier	magic_value		3316557	0					
ANR	3316603	Argument	ins		3316557	1					
ANR	3316604	Identifier	ins		3316557	0					
ANR	3316605	Argument	ins_len		3316557	2					
ANR	3316606	Identifier	ins_len		3316557	0					
ANR	3316607	Argument	err_code		3316557	3					
ANR	3316608	Identifier	err_code		3316557	0					
ANR	3316609	ExpressionStatement	op_str = ins_str [ 1 + hash_code * 4 ]	67:1:1690:1725	3316557	5	True				
ANR	3316610	AssignmentExpression	op_str = ins_str [ 1 + hash_code * 4 ]		3316557	0		=			
ANR	3316611	Identifier	op_str		3316557	0					
ANR	3316612	ArrayIndexing	ins_str [ 1 + hash_code * 4 ]		3316557	1					
ANR	3316613	Identifier	ins_str		3316557	0					
ANR	3316614	AdditiveExpression	1 + hash_code * 4		3316557	1		+			
ANR	3316615	PrimaryExpression	1		3316557	0					
ANR	3316616	MultiplicativeExpression	hash_code * 4		3316557	1		*			
ANR	3316617	Identifier	hash_code		3316557	0					
ANR	3316618	PrimaryExpression	4		3316557	1					
ANR	3316619	ExpressionStatement	x = 0	70:1:1774:1779	3316557	6	True				
ANR	3316620	AssignmentExpression	x = 0		3316557	0		=			
ANR	3316621	Identifier	x		3316557	0					
ANR	3316622	PrimaryExpression	0		3316557	1					
ANR	3316623	ForStatement	for ( i = 0 ; i < ins_len ; i ++ )		3316557	7					
ANR	3316624	ForInit	i = 0 ;	71:6:1787:1792	3316557	0	True				
ANR	3316625	AssignmentExpression	i = 0		3316557	0		=			
ANR	3316626	Identifier	i		3316557	0					
ANR	3316627	PrimaryExpression	0		3316557	1					
ANR	3316628	Condition	i < ins_len	71:13:1794:1804	3316557	1	True				
ANR	3316629	RelationalExpression	i < ins_len		3316557	0		<			
ANR	3316630	Identifier	i		3316557	0					
ANR	3316631	Identifier	ins_len		3316557	1					
ANR	3316632	PostIncDecOperationExpression	i ++	71:26:1807:1809	3316557	2	True				
ANR	3316633	Identifier	i		3316557	0					
ANR	3316634	IncDec	++		3316557	1					
ANR	3316635	CompoundStatement		15:31:274:274	3316557	3					
ANR	3316636	ExpressionStatement	"aux = strchr ( & op_str [ x ] , ins [ i ] )"	72:2:1816:1848	3316557	0	True				
ANR	3316637	AssignmentExpression	"aux = strchr ( & op_str [ x ] , ins [ i ] )"		3316557	0		=			
ANR	3316638	Identifier	aux		3316557	0					
ANR	3316639	CallExpression	"strchr ( & op_str [ x ] , ins [ i ] )"		3316557	1					
ANR	3316640	Callee	strchr		3316557	0					
ANR	3316641	Identifier	strchr		3316557	0					
ANR	3316642	ArgumentList	& op_str [ x ]		3316557	1					
ANR	3316643	Argument	& op_str [ x ]		3316557	0					
ANR	3316644	UnaryOperationExpression	& op_str [ x ]		3316557	0					
ANR	3316645	UnaryOperator	&		3316557	0					
ANR	3316646	ArrayIndexing	op_str [ x ]		3316557	1					
ANR	3316647	Identifier	op_str		3316557	0					
ANR	3316648	Identifier	x		3316557	1					
ANR	3316649	Argument	ins [ i ]		3316557	1					
ANR	3316650	ArrayIndexing	ins [ i ]		3316557	0					
ANR	3316651	Identifier	ins		3316557	0					
ANR	3316652	Identifier	i		3316557	1					
ANR	3316653	IfStatement	if ( ! aux )		3316557	1					
ANR	3316654	Condition	! aux	73:6:1856:1859	3316557	0	True				
ANR	3316655	UnaryOperationExpression	! aux		3316557	0					
ANR	3316656	UnaryOperator	!		3316557	0					
ANR	3316657	Identifier	aux		3316557	1					
ANR	3316658	CompoundStatement		17:12:324:324	3316557	1					
ANR	3316659	ExpressionStatement	"aux = strchr ( op_str , ins [ i ] )"	74:3:1867:1895	3316557	0	True				
ANR	3316660	AssignmentExpression	"aux = strchr ( op_str , ins [ i ] )"		3316557	0		=			
ANR	3316661	Identifier	aux		3316557	0					
ANR	3316662	CallExpression	"strchr ( op_str , ins [ i ] )"		3316557	1					
ANR	3316663	Callee	strchr		3316557	0					
ANR	3316664	Identifier	strchr		3316557	0					
ANR	3316665	ArgumentList	op_str		3316557	1					
ANR	3316666	Argument	op_str		3316557	0					
ANR	3316667	Identifier	op_str		3316557	0					
ANR	3316668	Argument	ins [ i ]		3316557	1					
ANR	3316669	ArrayIndexing	ins [ i ]		3316557	0					
ANR	3316670	Identifier	ins		3316557	0					
ANR	3316671	Identifier	i		3316557	1					
ANR	3316672	IfStatement	if ( ! aux )		3316557	1					
ANR	3316673	Condition	! aux	75:7:1904:1907	3316557	0	True				
ANR	3316674	UnaryOperationExpression	! aux		3316557	0					
ANR	3316675	UnaryOperator	!		3316557	0					
ANR	3316676	Identifier	aux		3316557	1					
ANR	3316677	CompoundStatement		19:13:372:372	3316557	1					
ANR	3316678	ExpressionStatement	"fprintf ( stderr , ""Invalid token %s\\n"" , ins )"	76:4:1916:1958	3316557	0	True				
ANR	3316679	CallExpression	"fprintf ( stderr , ""Invalid token %s\\n"" , ins )"		3316557	0					
ANR	3316680	Callee	fprintf		3316557	0					
ANR	3316681	Identifier	fprintf		3316557	0					
ANR	3316682	ArgumentList	stderr		3316557	1					
ANR	3316683	Argument	stderr		3316557	0					
ANR	3316684	Identifier	stderr		3316557	0					
ANR	3316685	Argument	"""Invalid token %s\\n"""		3316557	1					
ANR	3316686	PrimaryExpression	"""Invalid token %s\\n"""		3316557	0					
ANR	3316687	Argument	ins		3316557	2					
ANR	3316688	Identifier	ins		3316557	0					
ANR	3316689	ExpressionStatement	* err_code = - 1	76:48:1960:1974	3316557	1	True				
ANR	3316690	AssignmentExpression	* err_code = - 1		3316557	0		=			
ANR	3316691	UnaryOperationExpression	* err_code		3316557	0					
ANR	3316692	UnaryOperator	*		3316557	0					
ANR	3316693	Identifier	err_code		3316557	1					
ANR	3316694	UnaryOperationExpression	- 1		3316557	1					
ANR	3316695	UnaryOperator	-		3316557	0					
ANR	3316696	PrimaryExpression	1		3316557	1					
ANR	3316697	ReturnStatement	return 0 ;	76:64:1976:1984	3316557	2	True				
ANR	3316698	PrimaryExpression	0		3316557	0					
ANR	3316699	ExpressionStatement	len = ( unsigned int ) ( aux - op_str )	80:2:1998:2032	3316557	2	True				
ANR	3316700	AssignmentExpression	len = ( unsigned int ) ( aux - op_str )		3316557	0		=			
ANR	3316701	Identifier	len		3316557	0					
ANR	3316702	CastExpression	( unsigned int ) ( aux - op_str )		3316557	1					
ANR	3316703	CastTarget	unsigned int		3316557	0					
ANR	3316704	AdditiveExpression	aux - op_str		3316557	1		-			
ANR	3316705	Identifier	aux		3316557	0					
ANR	3316706	Identifier	op_str		3316557	1					
ANR	3316707	ExpressionStatement	"op_b = get_ins_part ( ins_pos + len / 8 , 1 )"	82:2:2092:2133	3316557	3	True				
ANR	3316708	AssignmentExpression	"op_b = get_ins_part ( ins_pos + len / 8 , 1 )"		3316557	0		=			
ANR	3316709	Identifier	op_b		3316557	0					
ANR	3316710	CallExpression	"get_ins_part ( ins_pos + len / 8 , 1 )"		3316557	1					
ANR	3316711	Callee	get_ins_part		3316557	0					
ANR	3316712	Identifier	get_ins_part		3316557	0					
ANR	3316713	ArgumentList	ins_pos + len / 8		3316557	1					
ANR	3316714	Argument	ins_pos + len / 8		3316557	0					
ANR	3316715	AdditiveExpression	ins_pos + len / 8		3316557	0		+			
ANR	3316716	Identifier	ins_pos		3316557	0					
ANR	3316717	MultiplicativeExpression	len / 8		3316557	1		/			
ANR	3316718	Identifier	len		3316557	0					
ANR	3316719	PrimaryExpression	8		3316557	1					
ANR	3316720	Argument	1		3316557	1					
ANR	3316721	PrimaryExpression	1		3316557	0					
ANR	3316722	ExpressionStatement	x = len + 1	85:2:2169:2180	3316557	4	True				
ANR	3316723	AssignmentExpression	x = len + 1		3316557	0		=			
ANR	3316724	Identifier	x		3316557	0					
ANR	3316725	AdditiveExpression	len + 1		3316557	1		+			
ANR	3316726	Identifier	len		3316557	0					
ANR	3316727	PrimaryExpression	1		3316557	1					
ANR	3316728	ExpressionStatement	res = ( res * 2 ) | ( ( op_b >> ( ( 1023 - len ) % 8 ) ) & 1 )	86:2:2184:2236	3316557	5	True				
ANR	3316729	AssignmentExpression	res = ( res * 2 ) | ( ( op_b >> ( ( 1023 - len ) % 8 ) ) & 1 )		3316557	0		=			
ANR	3316730	Identifier	res		3316557	0					
ANR	3316731	InclusiveOrExpression	( res * 2 ) | ( ( op_b >> ( ( 1023 - len ) % 8 ) ) & 1 )		3316557	1		|			
ANR	3316732	MultiplicativeExpression	res * 2		3316557	0		*			
ANR	3316733	Identifier	res		3316557	0					
ANR	3316734	PrimaryExpression	2		3316557	1					
ANR	3316735	BitAndExpression	( op_b >> ( ( 1023 - len ) % 8 ) ) & 1		3316557	1		&			
ANR	3316736	ShiftExpression	op_b >> ( ( 1023 - len ) % 8 )		3316557	0		>>			
ANR	3316737	Identifier	op_b		3316557	0					
ANR	3316738	MultiplicativeExpression	( 1023 - len ) % 8		3316557	1		%			
ANR	3316739	AdditiveExpression	1023 - len		3316557	0		-			
ANR	3316740	PrimaryExpression	1023		3316557	0					
ANR	3316741	Identifier	len		3316557	1					
ANR	3316742	PrimaryExpression	8		3316557	1					
ANR	3316743	PrimaryExpression	1		3316557	1					
ANR	3316744	IfStatement	if ( ! op_str [ x ] )		3316557	6					
ANR	3316745	Condition	! op_str [ x ]	87:6:2244:2253	3316557	0	True				
ANR	3316746	UnaryOperationExpression	! op_str [ x ]		3316557	0					
ANR	3316747	UnaryOperator	!		3316557	0					
ANR	3316748	ArrayIndexing	op_str [ x ]		3316557	1					
ANR	3316749	Identifier	op_str		3316557	0					
ANR	3316750	Identifier	x		3316557	1					
ANR	3316751	CompoundStatement		31:18:718:718	3316557	1					
ANR	3316752	ExpressionStatement	x = 0	88:3:2261:2266	3316557	0	True				
ANR	3316753	AssignmentExpression	x = 0		3316557	0		=			
ANR	3316754	Identifier	x		3316557	0					
ANR	3316755	PrimaryExpression	0		3316557	1					
ANR	3316756	IfStatement	if ( C55PLUS_DEBUG )		3316557	8					
ANR	3316757	Condition	C55PLUS_DEBUG	92:5:2281:2293	3316557	0	True				
ANR	3316758	Identifier	C55PLUS_DEBUG		3316557	0					
ANR	3316759	CompoundStatement		36:20:758:758	3316557	1					
ANR	3316760	ExpressionStatement	"printf ( ""INS_BITS => 0x%x\\n"" , res )"	93:2:2300:2333	3316557	0	True				
ANR	3316761	CallExpression	"printf ( ""INS_BITS => 0x%x\\n"" , res )"		3316557	0					
ANR	3316762	Callee	printf		3316557	0					
ANR	3316763	Identifier	printf		3316557	0					
ANR	3316764	ArgumentList	"""INS_BITS => 0x%x\\n"""		3316557	1					
ANR	3316765	Argument	"""INS_BITS => 0x%x\\n"""		3316557	0					
ANR	3316766	PrimaryExpression	"""INS_BITS => 0x%x\\n"""		3316557	0					
ANR	3316767	Argument	res		3316557	1					
ANR	3316768	Identifier	res		3316557	0					
ANR	3316769	ExpressionStatement	getchar ( )	94:2:2337:2346	3316557	1	True				
ANR	3316770	CallExpression	getchar ( )		3316557	0					
ANR	3316771	Callee	getchar		3316557	0					
ANR	3316772	Identifier	getchar		3316557	0					
ANR	3316773	ArgumentList			3316557	1					
ANR	3316774	ReturnStatement	return res ;	97:1:2353:2363	3316557	9	True				
ANR	3316775	Identifier	res		3316557	0					
ANR	3316776	ReturnType	static ut32		3316557	1					
ANR	3316777	Identifier	get_ins_bits		3316557	2					
ANR	3316778	ParameterList	"ut32 hash_code , ut32 ins_pos , char * ins , ut32 ins_len , ut32 magic_value , int * err_code"		3316557	3					
ANR	3316779	Parameter	ut32 hash_code	55:25:1448:1461	3316557	0	True				
ANR	3316780	ParameterType	ut32		3316557	0					
ANR	3316781	Identifier	hash_code		3316557	1					
ANR	3316782	Parameter	ut32 ins_pos	55:41:1464:1475	3316557	1	True				
ANR	3316783	ParameterType	ut32		3316557	0					
ANR	3316784	Identifier	ins_pos		3316557	1					
ANR	3316785	Parameter	char * ins	55:55:1478:1486	3316557	2	True				
ANR	3316786	ParameterType	char *		3316557	0					
ANR	3316787	Identifier	ins		3316557	1					
ANR	3316788	Parameter	ut32 ins_len	56:1:1490:1501	3316557	3	True				
ANR	3316789	ParameterType	ut32		3316557	0					
ANR	3316790	Identifier	ins_len		3316557	1					
ANR	3316791	Parameter	ut32 magic_value	56:15:1504:1519	3316557	4	True				
ANR	3316792	ParameterType	ut32		3316557	0					
ANR	3316793	Identifier	magic_value		3316557	1					
ANR	3316794	Parameter	int * err_code	56:33:1522:1534	3316557	5	True				
ANR	3316795	ParameterType	int *		3316557	0					
ANR	3316796	Identifier	err_code		3316557	1					
ANR	3316797	CFGEntryNode	ENTRY		3316557		True				
ANR	3316798	CFGExitNode	EXIT		3316557		True				
ANR	3316799	Symbol	* x		3316557						
ANR	3316800	Symbol	ins_str		3316557						
ANR	3316801	Symbol	aux		3316557						
ANR	3316802	Symbol	err_code		3316557						
ANR	3316803	Symbol	strchr		3316557						
ANR	3316804	Symbol	op_str		3316557						
ANR	3316805	Symbol	hash_code		3316557						
ANR	3316806	Symbol	len		3316557						
ANR	3316807	Symbol	* err_code		3316557						
ANR	3316808	Symbol	get_q_bits		3316557						
ANR	3316809	Symbol	ins_len		3316557						
ANR	3316810	Symbol	res		3316557						
ANR	3316811	Symbol	C55PLUS_DEBUG		3316557						
ANR	3316812	Symbol	ins_pos		3316557						
ANR	3316813	Symbol	* ins		3316557						
ANR	3316814	Symbol	* hash_code		3316557						
ANR	3316815	Symbol	i		3316557						
ANR	3316816	Symbol	stderr		3316557						
ANR	3316817	Symbol	* ins_str		3316557						
ANR	3316818	Symbol	ins		3316557						
ANR	3316819	Symbol	op_b		3316557						
ANR	3316820	Symbol	* op_str		3316557						
ANR	3316821	Symbol	* i		3316557						
ANR	3316822	Symbol	magic_value		3316557						
ANR	3316823	Symbol	x		3316557						
ANR	3316824	Symbol	get_ins_part		3316557						
ANR	3316825	Function	check_arg	100:0:2368:2678							
ANR	3316826	FunctionDef	"check_arg (ut32 ins_bits , int * err_code)"		3316825	0					
ANR	3316827	CompoundStatement		100:52:2420:2678	3316825	0					
ANR	3316828	IdentifierDeclStatement	bool res = false ;	101:1:2423:2439	3316825	0	True				
ANR	3316829	IdentifierDecl	res = false		3316825	0					
ANR	3316830	IdentifierDeclType	bool		3316825	0					
ANR	3316831	Identifier	res		3316825	1					
ANR	3316832	AssignmentExpression	res = false		3316825	2		=			
ANR	3316833	Identifier	false		3316825	0					
ANR	3316834	Identifier	false		3316825	1					
ANR	3316835	IfStatement	if ( ( ins_bits <= 31 ) | ( ins_bits >= 128 && ins_bits < 160 ) )		3316825	1					
ANR	3316836	Condition	( ins_bits <= 31 ) | ( ins_bits >= 128 && ins_bits < 160 )	103:5:2447:2500	3316825	0	True				
ANR	3316837	InclusiveOrExpression	( ins_bits <= 31 ) | ( ins_bits >= 128 && ins_bits < 160 )		3316825	0		|			
ANR	3316838	RelationalExpression	ins_bits <= 31		3316825	0		<=			
ANR	3316839	Identifier	ins_bits		3316825	0					
ANR	3316840	PrimaryExpression	31		3316825	1					
ANR	3316841	AndExpression	ins_bits >= 128 && ins_bits < 160		3316825	1		&&			
ANR	3316842	RelationalExpression	ins_bits >= 128		3316825	0		>=			
ANR	3316843	Identifier	ins_bits		3316825	0					
ANR	3316844	PrimaryExpression	128		3316825	1					
ANR	3316845	RelationalExpression	ins_bits < 160		3316825	1		<			
ANR	3316846	Identifier	ins_bits		3316825	0					
ANR	3316847	PrimaryExpression	160		3316825	1					
ANR	3316848	CompoundStatement		4:61:82:82	3316825	1					
ANR	3316849	ExpressionStatement	res = true	104:2:2507:2517	3316825	0	True				
ANR	3316850	AssignmentExpression	res = true		3316825	0		=			
ANR	3316851	Identifier	res		3316825	0					
ANR	3316852	Identifier	true		3316825	1					
ANR	3316853	ElseStatement	else		3316825	0					
ANR	3316854	IfStatement	if ( ins_bits >= 32 && ins_bits <= 252 )		3316825	0					
ANR	3316855	Condition	ins_bits >= 32 && ins_bits <= 252	105:12:2531:2563	3316825	0	True				
ANR	3316856	AndExpression	ins_bits >= 32 && ins_bits <= 252		3316825	0		&&			
ANR	3316857	RelationalExpression	ins_bits >= 32		3316825	0		>=			
ANR	3316858	Identifier	ins_bits		3316825	0					
ANR	3316859	PrimaryExpression	32		3316825	1					
ANR	3316860	RelationalExpression	ins_bits <= 252		3316825	1		<=			
ANR	3316861	Identifier	ins_bits		3316825	0					
ANR	3316862	PrimaryExpression	252		3316825	1					
ANR	3316863	CompoundStatement		6:47:145:145	3316825	1					
ANR	3316864	ExpressionStatement	res = false	106:2:2570:2581	3316825	0	True				
ANR	3316865	AssignmentExpression	res = false		3316825	0		=			
ANR	3316866	Identifier	res		3316825	0					
ANR	3316867	Identifier	false		3316825	1					
ANR	3316868	ElseStatement	else		3316825	0					
ANR	3316869	CompoundStatement		8:8:170:170	3316825	0					
ANR	3316870	ExpressionStatement	"fprintf ( stderr , ""Invalid arg: %u\\n"" , ins_bits )"	108:2:2595:2641	3316825	0	True				
ANR	3316871	CallExpression	"fprintf ( stderr , ""Invalid arg: %u\\n"" , ins_bits )"		3316825	0					
ANR	3316872	Callee	fprintf		3316825	0					
ANR	3316873	Identifier	fprintf		3316825	0					
ANR	3316874	ArgumentList	stderr		3316825	1					
ANR	3316875	Argument	stderr		3316825	0					
ANR	3316876	Identifier	stderr		3316825	0					
ANR	3316877	Argument	"""Invalid arg: %u\\n"""		3316825	1					
ANR	3316878	PrimaryExpression	"""Invalid arg: %u\\n"""		3316825	0					
ANR	3316879	Argument	ins_bits		3316825	2					
ANR	3316880	Identifier	ins_bits		3316825	0					
ANR	3316881	ExpressionStatement	* err_code = - 1	109:2:2645:2659	3316825	1	True				
ANR	3316882	AssignmentExpression	* err_code = - 1		3316825	0		=			
ANR	3316883	UnaryOperationExpression	* err_code		3316825	0					
ANR	3316884	UnaryOperator	*		3316825	0					
ANR	3316885	Identifier	err_code		3316825	1					
ANR	3316886	UnaryOperationExpression	- 1		3316825	1					
ANR	3316887	UnaryOperator	-		3316825	0					
ANR	3316888	PrimaryExpression	1		3316825	1					
ANR	3316889	ReturnStatement	return res ;	112:1:2666:2676	3316825	2	True				
ANR	3316890	Identifier	res		3316825	0					
ANR	3316891	ReturnType	static bool		3316825	1					
ANR	3316892	Identifier	check_arg		3316825	2					
ANR	3316893	ParameterList	"ut32 ins_bits , int * err_code"		3316825	3					
ANR	3316894	Parameter	ut32 ins_bits	100:22:2390:2402	3316825	0	True				
ANR	3316895	ParameterType	ut32		3316825	0					
ANR	3316896	Identifier	ins_bits		3316825	1					
ANR	3316897	Parameter	int * err_code	100:37:2405:2417	3316825	1	True				
ANR	3316898	ParameterType	int *		3316825	0					
ANR	3316899	Identifier	err_code		3316825	1					
ANR	3316900	CFGEntryNode	ENTRY		3316825		True				
ANR	3316901	CFGExitNode	EXIT		3316825		True				
ANR	3316902	Symbol	res		3316825						
ANR	3316903	Symbol	* err_code		3316825						
ANR	3316904	Symbol	ins_bits		3316825						
ANR	3316905	Symbol	false		3316825						
ANR	3316906	Symbol	true		3316825						
ANR	3316907	Symbol	err_code		3316825						
ANR	3316908	Symbol	stderr		3316825						
ANR	3316909	Function	decode_regis	115:0:2681:5381							
ANR	3316910	FunctionDef	"decode_regis (char * reg_arg , st32 hash_code , ut32 ins_bits , ut32 * ret_ins_bits , int * err_code)"		3316909	0					
ANR	3316911	CompoundStatement		116:36:2789:5381	3316909	0					
ANR	3316912	IdentifierDeclStatement	char reg_type ;	117:1:2792:2805	3316909	0	True				
ANR	3316913	IdentifierDecl	reg_type		3316909	0					
ANR	3316914	IdentifierDeclType	char		3316909	0					
ANR	3316915	Identifier	reg_type		3316909	1					
ANR	3316916	IdentifierDeclStatement	char * res ;	118:1:2808:2817	3316909	1	True				
ANR	3316917	IdentifierDecl	* res		3316909	0					
ANR	3316918	IdentifierDeclType	char *		3316909	0					
ANR	3316919	Identifier	res		3316909	1					
ANR	3316920	ExpressionStatement	reg_type = * reg_arg	120:1:2821:2840	3316909	2	True				
ANR	3316921	AssignmentExpression	reg_type = * reg_arg		3316909	0		=			
ANR	3316922	Identifier	reg_type		3316909	0					
ANR	3316923	UnaryOperationExpression	* reg_arg		3316909	1					
ANR	3316924	UnaryOperator	*		3316909	0					
ANR	3316925	Identifier	reg_arg		3316909	1					
ANR	3316926	ExpressionStatement	res = NULL	121:1:2843:2853	3316909	3	True				
ANR	3316927	AssignmentExpression	res = NULL		3316909	0		=			
ANR	3316928	Identifier	res		3316909	0					
ANR	3316929	Identifier	NULL		3316909	1					
ANR	3316930	SwitchStatement	switch ( reg_type )		3316909	4					
ANR	3316931	Condition	reg_type	125:9:2917:2924	3316909	0	True				
ANR	3316932	Identifier	reg_type		3316909	0					
ANR	3316933	CompoundStatement		10:19:137:137	3316909	1					
ANR	3316934	Label	case 33 :	126:2:2931:2938	3316909	0	True				
ANR	3316935	ExpressionStatement	res = get_reg_name_1 ( ( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 ) )	127:3:2943:3015	3316909	1	True				
ANR	3316936	AssignmentExpression	res = get_reg_name_1 ( ( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 ) )		3316909	0		=			
ANR	3316937	Identifier	res		3316909	0					
ANR	3316938	CallExpression	get_reg_name_1 ( ( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 ) )		3316909	1					
ANR	3316939	Callee	get_reg_name_1		3316909	0					
ANR	3316940	Identifier	get_reg_name_1		3316909	0					
ANR	3316941	ArgumentList	( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 )		3316909	1					
ANR	3316942	Argument	( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 )		3316909	0					
ANR	3316943	InclusiveOrExpression	( ins_bits >> 1 ) | ( ( ins_bits & 1 ) << 6 )		3316909	0		|			
ANR	3316944	ShiftExpression	ins_bits >> 1		3316909	0		>>			
ANR	3316945	Identifier	ins_bits		3316909	0					
ANR	3316946	PrimaryExpression	1		3316909	1					
ANR	3316947	ShiftExpression	( ins_bits & 1 ) << 6		3316909	1		<<			
ANR	3316948	BitAndExpression	ins_bits & 1		3316909	0		&			
ANR	3316949	Identifier	ins_bits		3316909	0					
ANR	3316950	PrimaryExpression	1		3316909	1					
ANR	3316951	PrimaryExpression	6		3316909	1					
ANR	3316952	BreakStatement	break ;	129:3:3020:3025	3316909	2	True				
ANR	3316953	Label	case 100 :	130:2:3029:3037	3316909	3	True				
ANR	3316954	IfStatement	"if ( r_str_ncasecmp ( reg_arg , ""d(ALLx"" , 6 ) )"		3316909	4					
ANR	3316955	Condition	"r_str_ncasecmp ( reg_arg , ""d(ALLx"" , 6 )"	131:7:3046:3081	3316909	0	True				
ANR	3316956	CallExpression	"r_str_ncasecmp ( reg_arg , ""d(ALLx"" , 6 )"		3316909	0					
ANR	3316957	Callee	r_str_ncasecmp		3316909	0					
ANR	3316958	Identifier	r_str_ncasecmp		3316909	0					
ANR	3316959	ArgumentList	reg_arg		3316909	1					
ANR	3316960	Argument	reg_arg		3316909	0					
ANR	3316961	Identifier	reg_arg		3316909	0					
ANR	3316962	Argument	"""d(ALLx"""		3316909	1					
ANR	3316963	PrimaryExpression	"""d(ALLx"""		3316909	0					
ANR	3316964	Argument	6		3316909	2					
ANR	3316965	PrimaryExpression	6		3316909	0					
ANR	3316966	CompoundStatement		16:45:294:294	3316909	1					
ANR	3316967	ExpressionStatement	"fprintf ( stderr , ""invalid register! %s\\n"" , reg_arg )"	132:4:3090:3140	3316909	0	True				
ANR	3316968	CallExpression	"fprintf ( stderr , ""invalid register! %s\\n"" , reg_arg )"		3316909	0					
ANR	3316969	Callee	fprintf		3316909	0					
ANR	3316970	Identifier	fprintf		3316909	0					
ANR	3316971	ArgumentList	stderr		3316909	1					
ANR	3316972	Argument	stderr		3316909	0					
ANR	3316973	Identifier	stderr		3316909	0					
ANR	3316974	Argument	"""invalid register! %s\\n"""		3316909	1					
ANR	3316975	PrimaryExpression	"""invalid register! %s\\n"""		3316909	0					
ANR	3316976	Argument	reg_arg		3316909	2					
ANR	3316977	Identifier	reg_arg		3316909	0					
ANR	3316978	ExpressionStatement	* err_code = - 1	133:4:3146:3160	3316909	1	True				
ANR	3316979	AssignmentExpression	* err_code = - 1		3316909	0		=			
ANR	3316980	UnaryOperationExpression	* err_code		3316909	0					
ANR	3316981	UnaryOperator	*		3316909	0					
ANR	3316982	Identifier	err_code		3316909	1					
ANR	3316983	UnaryOperationExpression	- 1		3316909	1					
ANR	3316984	UnaryOperator	-		3316909	0					
ANR	3316985	PrimaryExpression	1		3316909	1					
ANR	3316986	ReturnStatement	return NULL ;	134:4:3166:3177	3316909	2	True				
ANR	3316987	Identifier	NULL		3316909	0					
ANR	3316988	ExpressionStatement	"res = ( check_arg ( ins_bits , err_code ) != 0 && * err_code == 0 ) ? strdup ( ""dbl("" ) : NULL"	136:3:3187:3270	3316909	5	True				
ANR	3316989	AssignmentExpression	"res = ( check_arg ( ins_bits , err_code ) != 0 && * err_code == 0 ) ? strdup ( ""dbl("" ) : NULL"		3316909	0		=			
ANR	3316990	Identifier	res		3316909	0					
ANR	3316991	ConditionalExpression	"( check_arg ( ins_bits , err_code ) != 0 && * err_code == 0 ) ? strdup ( ""dbl("" ) : NULL"		3316909	1					
ANR	3316992	Condition	"check_arg ( ins_bits , err_code ) != 0 && * err_code == 0"		3316909	0					
ANR	3316993	AndExpression	"check_arg ( ins_bits , err_code ) != 0 && * err_code == 0"		3316909	0		&&			
ANR	3316994	EqualityExpression	"check_arg ( ins_bits , err_code ) != 0"		3316909	0		!=			
ANR	3316995	CallExpression	"check_arg ( ins_bits , err_code )"		3316909	0					
ANR	3316996	Callee	check_arg		3316909	0					
ANR	3316997	Identifier	check_arg		3316909	0					
ANR	3316998	ArgumentList	ins_bits		3316909	1					
ANR	3316999	Argument	ins_bits		3316909	0					
ANR	3317000	Identifier	ins_bits		3316909	0					
ANR	3317001	Argument	err_code		3316909	1					
ANR	3317002	Identifier	err_code		3316909	0					
ANR	3317003	PrimaryExpression	0		3316909	1					
ANR	3317004	EqualityExpression	* err_code == 0		3316909	1		==			
ANR	3317005	UnaryOperationExpression	* err_code		3316909	0					
ANR	3317006	UnaryOperator	*		3316909	0					
ANR	3317007	Identifier	err_code		3316909	1					
ANR	3317008	PrimaryExpression	0		3316909	1					
ANR	3317009	CallExpression	"strdup ( ""dbl("" )"		3316909	1					
ANR	3317010	Callee	strdup		3316909	0					
ANR	3317011	Identifier	strdup		3316909	0					
ANR	3317012	ArgumentList	"""dbl("""		3316909	1					
ANR	3317013	Argument	"""dbl("""		3316909	0					
ANR	3317014	PrimaryExpression	"""dbl("""		3316909	0					
ANR	3317015	Identifier	NULL		3316909	2					
ANR	3317016	IfStatement	if ( * err_code < 0 )		3316909	6					
ANR	3317017	Condition	* err_code < 0	137:7:3279:3291	3316909	0	True				
ANR	3317018	RelationalExpression	* err_code < 0		3316909	0		<			
ANR	3317019	UnaryOperationExpression	* err_code		3316909	0					
ANR	3317020	UnaryOperator	*		3316909	0					
ANR	3317021	Identifier	err_code		3316909	1					
ANR	3317022	PrimaryExpression	0		3316909	1					
ANR	3317023	CompoundStatement		22:22:504:504	3316909	1					
ANR	3317024	ReturnStatement	return NULL ;	138:4:3300:3311	3316909	0	True				
ANR	3317025	Identifier	NULL		3316909	0					
ANR	3317026	BreakStatement	break ;	140:3:3321:3326	3316909	7	True				
ANR	3317027	Label	case 41 :	141:2:3330:3337	3316909	8	True				
ANR	3317028	IfStatement	"if ( r_str_ncasecmp ( reg_arg , "")ALLx"" , 5 ) )"		3316909	9					
ANR	3317029	Condition	"r_str_ncasecmp ( reg_arg , "")ALLx"" , 5 )"	142:7:3346:3380	3316909	0	True				
ANR	3317030	CallExpression	"r_str_ncasecmp ( reg_arg , "")ALLx"" , 5 )"		3316909	0					
ANR	3317031	Callee	r_str_ncasecmp		3316909	0					
ANR	3317032	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317033	ArgumentList	reg_arg		3316909	1					
ANR	3317034	Argument	reg_arg		3316909	0					
ANR	3317035	Identifier	reg_arg		3316909	0					
ANR	3317036	Argument	""")ALLx"""		3316909	1					
ANR	3317037	PrimaryExpression	""")ALLx"""		3316909	0					
ANR	3317038	Argument	5		3316909	2					
ANR	3317039	PrimaryExpression	5		3316909	0					
ANR	3317040	CompoundStatement		27:44:593:593	3316909	1					
ANR	3317041	ExpressionStatement	"fprintf ( stderr , ""invalid register! %s\\n"" , reg_arg )"	143:4:3389:3439	3316909	0	True				
ANR	3317042	CallExpression	"fprintf ( stderr , ""invalid register! %s\\n"" , reg_arg )"		3316909	0					
ANR	3317043	Callee	fprintf		3316909	0					
ANR	3317044	Identifier	fprintf		3316909	0					
ANR	3317045	ArgumentList	stderr		3316909	1					
ANR	3317046	Argument	stderr		3316909	0					
ANR	3317047	Identifier	stderr		3316909	0					
ANR	3317048	Argument	"""invalid register! %s\\n"""		3316909	1					
ANR	3317049	PrimaryExpression	"""invalid register! %s\\n"""		3316909	0					
ANR	3317050	Argument	reg_arg		3316909	2					
ANR	3317051	Identifier	reg_arg		3316909	0					
ANR	3317052	ExpressionStatement	* err_code = - 1	144:4:3445:3459	3316909	1	True				
ANR	3317053	AssignmentExpression	* err_code = - 1		3316909	0		=			
ANR	3317054	UnaryOperationExpression	* err_code		3316909	0					
ANR	3317055	UnaryOperator	*		3316909	0					
ANR	3317056	Identifier	err_code		3316909	1					
ANR	3317057	UnaryOperationExpression	- 1		3316909	1					
ANR	3317058	UnaryOperator	-		3316909	0					
ANR	3317059	PrimaryExpression	1		3316909	1					
ANR	3317060	ReturnStatement	return NULL ;	145:4:3465:3476	3316909	2	True				
ANR	3317061	Identifier	NULL		3316909	0					
ANR	3317062	ExpressionStatement	"res = ( check_arg ( ins_bits , err_code ) && * err_code == 0 ) ? strdup ( "")"" ) : NULL"	147:3:3486:3561	3316909	10	True				
ANR	3317063	AssignmentExpression	"res = ( check_arg ( ins_bits , err_code ) && * err_code == 0 ) ? strdup ( "")"" ) : NULL"		3316909	0		=			
ANR	3317064	Identifier	res		3316909	0					
ANR	3317065	ConditionalExpression	"( check_arg ( ins_bits , err_code ) && * err_code == 0 ) ? strdup ( "")"" ) : NULL"		3316909	1					
ANR	3317066	Condition	"check_arg ( ins_bits , err_code ) && * err_code == 0"		3316909	0					
ANR	3317067	AndExpression	"check_arg ( ins_bits , err_code ) && * err_code == 0"		3316909	0		&&			
ANR	3317068	CallExpression	"check_arg ( ins_bits , err_code )"		3316909	0					
ANR	3317069	Callee	check_arg		3316909	0					
ANR	3317070	Identifier	check_arg		3316909	0					
ANR	3317071	ArgumentList	ins_bits		3316909	1					
ANR	3317072	Argument	ins_bits		3316909	0					
ANR	3317073	Identifier	ins_bits		3316909	0					
ANR	3317074	Argument	err_code		3316909	1					
ANR	3317075	Identifier	err_code		3316909	0					
ANR	3317076	EqualityExpression	* err_code == 0		3316909	1		==			
ANR	3317077	UnaryOperationExpression	* err_code		3316909	0					
ANR	3317078	UnaryOperator	*		3316909	0					
ANR	3317079	Identifier	err_code		3316909	1					
ANR	3317080	PrimaryExpression	0		3316909	1					
ANR	3317081	CallExpression	"strdup ( "")"" )"		3316909	1					
ANR	3317082	Callee	strdup		3316909	0					
ANR	3317083	Identifier	strdup		3316909	0					
ANR	3317084	ArgumentList	""")"""		3316909	1					
ANR	3317085	Argument	""")"""		3316909	0					
ANR	3317086	PrimaryExpression	""")"""		3316909	0					
ANR	3317087	Identifier	NULL		3316909	2					
ANR	3317088	IfStatement	if ( * err_code < 0 )		3316909	11					
ANR	3317089	Condition	* err_code < 0	148:7:3570:3582	3316909	0	True				
ANR	3317090	RelationalExpression	* err_code < 0		3316909	0		<			
ANR	3317091	UnaryOperationExpression	* err_code		3316909	0					
ANR	3317092	UnaryOperator	*		3316909	0					
ANR	3317093	Identifier	err_code		3316909	1					
ANR	3317094	PrimaryExpression	0		3316909	1					
ANR	3317095	CompoundStatement		33:22:795:795	3316909	1					
ANR	3317096	ReturnStatement	return NULL ;	149:4:3591:3602	3316909	0	True				
ANR	3317097	Identifier	NULL		3316909	0					
ANR	3317098	BreakStatement	break ;	151:3:3612:3617	3316909	12	True				
ANR	3317099	Label	case 65 :	152:2:3621:3628	3316909	13	True				
ANR	3317100	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""ACLH"" , 4 ) )"		3316909	14					
ANR	3317101	Condition	"! r_str_ncasecmp ( reg_arg , ""ACLH"" , 4 )"	153:7:3637:3671	3316909	0	True				
ANR	3317102	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ACLH"" , 4 )"		3316909	0					
ANR	3317103	UnaryOperator	!		3316909	0					
ANR	3317104	CallExpression	"r_str_ncasecmp ( reg_arg , ""ACLH"" , 4 )"		3316909	1					
ANR	3317105	Callee	r_str_ncasecmp		3316909	0					
ANR	3317106	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317107	ArgumentList	reg_arg		3316909	1					
ANR	3317108	Argument	reg_arg		3316909	0					
ANR	3317109	Identifier	reg_arg		3316909	0					
ANR	3317110	Argument	"""ACLH"""		3316909	1					
ANR	3317111	PrimaryExpression	"""ACLH"""		3316909	0					
ANR	3317112	Argument	4		3316909	2					
ANR	3317113	PrimaryExpression	4		3316909	0					
ANR	3317114	CompoundStatement		38:44:884:884	3316909	1					
ANR	3317115	ExpressionStatement	res = get_reg_name_1 ( ins_bits + 64 )	154:4:3680:3715	3316909	0	True				
ANR	3317116	AssignmentExpression	res = get_reg_name_1 ( ins_bits + 64 )		3316909	0		=			
ANR	3317117	Identifier	res		3316909	0					
ANR	3317118	CallExpression	get_reg_name_1 ( ins_bits + 64 )		3316909	1					
ANR	3317119	Callee	get_reg_name_1		3316909	0					
ANR	3317120	Identifier	get_reg_name_1		3316909	0					
ANR	3317121	ArgumentList	ins_bits + 64		3316909	1					
ANR	3317122	Argument	ins_bits + 64		3316909	0					
ANR	3317123	AdditiveExpression	ins_bits + 64		3316909	0		+			
ANR	3317124	Identifier	ins_bits		3316909	0					
ANR	3317125	PrimaryExpression	64		3316909	1					
ANR	3317126	ElseStatement	else		3316909	0					
ANR	3317127	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""ACxP"" , 4 ) )"		3316909	0					
ANR	3317128	Condition	"! r_str_ncasecmp ( reg_arg , ""ACxP"" , 4 )"	155:14:3731:3765	3316909	0	True				
ANR	3317129	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ACxP"" , 4 )"		3316909	0					
ANR	3317130	UnaryOperator	!		3316909	0					
ANR	3317131	CallExpression	"r_str_ncasecmp ( reg_arg , ""ACxP"" , 4 )"		3316909	1					
ANR	3317132	Callee	r_str_ncasecmp		3316909	0					
ANR	3317133	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317134	ArgumentList	reg_arg		3316909	1					
ANR	3317135	Argument	reg_arg		3316909	0					
ANR	3317136	Identifier	reg_arg		3316909	0					
ANR	3317137	Argument	"""ACxP"""		3316909	1					
ANR	3317138	PrimaryExpression	"""ACxP"""		3316909	0					
ANR	3317139	Argument	4		3316909	2					
ANR	3317140	PrimaryExpression	4		3316909	0					
ANR	3317141	CompoundStatement		40:51:978:978	3316909	1					
ANR	3317142	ExpressionStatement	res = get_reg_name_1 ( ins_bits + 1 )	156:4:3774:3808	3316909	0	True				
ANR	3317143	AssignmentExpression	res = get_reg_name_1 ( ins_bits + 1 )		3316909	0		=			
ANR	3317144	Identifier	res		3316909	0					
ANR	3317145	CallExpression	get_reg_name_1 ( ins_bits + 1 )		3316909	1					
ANR	3317146	Callee	get_reg_name_1		3316909	0					
ANR	3317147	Identifier	get_reg_name_1		3316909	0					
ANR	3317148	ArgumentList	ins_bits + 1		3316909	1					
ANR	3317149	Argument	ins_bits + 1		3316909	0					
ANR	3317150	AdditiveExpression	ins_bits + 1		3316909	0		+			
ANR	3317151	Identifier	ins_bits		3316909	0					
ANR	3317152	PrimaryExpression	1		3316909	1					
ANR	3317153	ElseStatement	else		3316909	0					
ANR	3317154	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""ACx"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ADR"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ALL"" , 3 ) )"		3316909	0					
ANR	3317155	Condition	"! r_str_ncasecmp ( reg_arg , ""ACx"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ADR"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ALL"" , 3 )"	157:14:3824:3945	3316909	0	True				
ANR	3317156	OrExpression	"! r_str_ncasecmp ( reg_arg , ""ACx"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ADR"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ALL"" , 3 )"		3316909	0		||			
ANR	3317157	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ACx"" , 3 )"		3316909	0					
ANR	3317158	UnaryOperator	!		3316909	0					
ANR	3317159	CallExpression	"r_str_ncasecmp ( reg_arg , ""ACx"" , 3 )"		3316909	1					
ANR	3317160	Callee	r_str_ncasecmp		3316909	0					
ANR	3317161	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317162	ArgumentList	reg_arg		3316909	1					
ANR	3317163	Argument	reg_arg		3316909	0					
ANR	3317164	Identifier	reg_arg		3316909	0					
ANR	3317165	Argument	"""ACx"""		3316909	1					
ANR	3317166	PrimaryExpression	"""ACx"""		3316909	0					
ANR	3317167	Argument	3		3316909	2					
ANR	3317168	PrimaryExpression	3		3316909	0					
ANR	3317169	OrExpression	"! r_str_ncasecmp ( reg_arg , ""ADR"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""ALL"" , 3 )"		3316909	1		||			
ANR	3317170	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ADR"" , 3 )"		3316909	0					
ANR	3317171	UnaryOperator	!		3316909	0					
ANR	3317172	CallExpression	"r_str_ncasecmp ( reg_arg , ""ADR"" , 3 )"		3316909	1					
ANR	3317173	Callee	r_str_ncasecmp		3316909	0					
ANR	3317174	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317175	ArgumentList	reg_arg		3316909	1					
ANR	3317176	Argument	reg_arg		3316909	0					
ANR	3317177	Identifier	reg_arg		3316909	0					
ANR	3317178	Argument	"""ADR"""		3316909	1					
ANR	3317179	PrimaryExpression	"""ADR"""		3316909	0					
ANR	3317180	Argument	3		3316909	2					
ANR	3317181	PrimaryExpression	3		3316909	0					
ANR	3317182	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ALL"" , 3 )"		3316909	1					
ANR	3317183	UnaryOperator	!		3316909	0					
ANR	3317184	CallExpression	"r_str_ncasecmp ( reg_arg , ""ALL"" , 3 )"		3316909	1					
ANR	3317185	Callee	r_str_ncasecmp		3316909	0					
ANR	3317186	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317187	ArgumentList	reg_arg		3316909	1					
ANR	3317188	Argument	reg_arg		3316909	0					
ANR	3317189	Identifier	reg_arg		3316909	0					
ANR	3317190	Argument	"""ALL"""		3316909	1					
ANR	3317191	PrimaryExpression	"""ALL"""		3316909	0					
ANR	3317192	Argument	3		3316909	2					
ANR	3317193	PrimaryExpression	3		3316909	0					
ANR	3317194	CompoundStatement		45:7:1177:1177	3316909	1					
ANR	3317195	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	161:4:3973:4003	3316909	0	True				
ANR	3317196	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317197	Identifier	res		3316909	0					
ANR	3317198	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317199	Callee	get_reg_name_1		3316909	0					
ANR	3317200	Identifier	get_reg_name_1		3316909	0					
ANR	3317201	ArgumentList	ins_bits		3316909	1					
ANR	3317202	Argument	ins_bits		3316909	0					
ANR	3317203	Identifier	ins_bits		3316909	0					
ANR	3317204	IfStatement	if ( hash_code == 0xDF || hash_code == 0xE0 )		3316909	15					
ANR	3317205	Condition	hash_code == 0xDF || hash_code == 0xE0	163:7:4017:4054	3316909	0	True				
ANR	3317206	OrExpression	hash_code == 0xDF || hash_code == 0xE0		3316909	0		||			
ANR	3317207	EqualityExpression	hash_code == 0xDF		3316909	0		==			
ANR	3317208	Identifier	hash_code		3316909	0					
ANR	3317209	PrimaryExpression	0xDF		3316909	1					
ANR	3317210	EqualityExpression	hash_code == 0xE0		3316909	1		==			
ANR	3317211	Identifier	hash_code		3316909	0					
ANR	3317212	PrimaryExpression	0xE0		3316909	1					
ANR	3317213	CompoundStatement		48:47:1267:1267	3316909	1					
ANR	3317214	ExpressionStatement	* ret_ins_bits = ins_bits	164:4:4063:4087	3316909	0	True				
ANR	3317215	AssignmentExpression	* ret_ins_bits = ins_bits		3316909	0		=			
ANR	3317216	UnaryOperationExpression	* ret_ins_bits		3316909	0					
ANR	3317217	UnaryOperator	*		3316909	0					
ANR	3317218	Identifier	ret_ins_bits		3316909	1					
ANR	3317219	Identifier	ins_bits		3316909	1					
ANR	3317220	BreakStatement	break ;	166:3:4097:4102	3316909	16	True				
ANR	3317221	Label	case 68 :	167:2:4106:4113	3316909	17	True				
ANR	3317222	ExpressionStatement	res = get_reg_name_1 ( ins_bits + 32 )	168:3:4118:4153	3316909	18	True				
ANR	3317223	AssignmentExpression	res = get_reg_name_1 ( ins_bits + 32 )		3316909	0		=			
ANR	3317224	Identifier	res		3316909	0					
ANR	3317225	CallExpression	get_reg_name_1 ( ins_bits + 32 )		3316909	1					
ANR	3317226	Callee	get_reg_name_1		3316909	0					
ANR	3317227	Identifier	get_reg_name_1		3316909	0					
ANR	3317228	ArgumentList	ins_bits + 32		3316909	1					
ANR	3317229	Argument	ins_bits + 32		3316909	0					
ANR	3317230	AdditiveExpression	ins_bits + 32		3316909	0		+			
ANR	3317231	Identifier	ins_bits		3316909	0					
ANR	3317232	PrimaryExpression	32		3316909	1					
ANR	3317233	BreakStatement	break ;	169:3:4158:4163	3316909	19	True				
ANR	3317234	Label	case 77 :	170:2:4167:4174	3316909	20	True				
ANR	3317235	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""MA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""MR"" , 2 ) )"		3316909	21					
ANR	3317236	Condition	"! r_str_ncasecmp ( reg_arg , ""MA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""MR"" , 2 )"	171:7:4183:4252	3316909	0	True				
ANR	3317237	OrExpression	"! r_str_ncasecmp ( reg_arg , ""MA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""MR"" , 2 )"		3316909	0		||			
ANR	3317238	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""MA"" , 2 )"		3316909	0					
ANR	3317239	UnaryOperator	!		3316909	0					
ANR	3317240	CallExpression	"r_str_ncasecmp ( reg_arg , ""MA"" , 2 )"		3316909	1					
ANR	3317241	Callee	r_str_ncasecmp		3316909	0					
ANR	3317242	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317243	ArgumentList	reg_arg		3316909	1					
ANR	3317244	Argument	reg_arg		3316909	0					
ANR	3317245	Identifier	reg_arg		3316909	0					
ANR	3317246	Argument	"""MA"""		3316909	1					
ANR	3317247	PrimaryExpression	"""MA"""		3316909	0					
ANR	3317248	Argument	2		3316909	2					
ANR	3317249	PrimaryExpression	2		3316909	0					
ANR	3317250	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""MR"" , 2 )"		3316909	1					
ANR	3317251	UnaryOperator	!		3316909	0					
ANR	3317252	CallExpression	"r_str_ncasecmp ( reg_arg , ""MR"" , 2 )"		3316909	1					
ANR	3317253	Callee	r_str_ncasecmp		3316909	0					
ANR	3317254	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317255	ArgumentList	reg_arg		3316909	1					
ANR	3317256	Argument	reg_arg		3316909	0					
ANR	3317257	Identifier	reg_arg		3316909	0					
ANR	3317258	Argument	"""MR"""		3316909	1					
ANR	3317259	PrimaryExpression	"""MR"""		3316909	0					
ANR	3317260	Argument	2		3316909	2					
ANR	3317261	PrimaryExpression	2		3316909	0					
ANR	3317262	CompoundStatement		56:79:1465:1465	3316909	1					
ANR	3317263	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	172:4:4261:4291	3316909	0	True				
ANR	3317264	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317265	Identifier	res		3316909	0					
ANR	3317266	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317267	Callee	get_reg_name_1		3316909	0					
ANR	3317268	Identifier	get_reg_name_1		3316909	0					
ANR	3317269	ArgumentList	ins_bits		3316909	1					
ANR	3317270	Argument	ins_bits		3316909	0					
ANR	3317271	Identifier	ins_bits		3316909	0					
ANR	3317272	ElseStatement	else		3316909	0					
ANR	3317273	CompoundStatement		58:10:1513:1513	3316909	0					
ANR	3317274	ExpressionStatement	res = get_reg_name_2 ( ins_bits )	174:4:4309:4339	3316909	0	True				
ANR	3317275	AssignmentExpression	res = get_reg_name_2 ( ins_bits )		3316909	0		=			
ANR	3317276	Identifier	res		3316909	0					
ANR	3317277	CallExpression	get_reg_name_2 ( ins_bits )		3316909	1					
ANR	3317278	Callee	get_reg_name_2		3316909	0					
ANR	3317279	Identifier	get_reg_name_2		3316909	0					
ANR	3317280	ArgumentList	ins_bits		3316909	1					
ANR	3317281	Argument	ins_bits		3316909	0					
ANR	3317282	Identifier	ins_bits		3316909	0					
ANR	3317283	BreakStatement	break ;	176:3:4349:4354	3316909	22	True				
ANR	3317284	Label	case 83 :	177:2:4358:4365	3316909	23	True				
ANR	3317285	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	178:3:4370:4400	3316909	24	True				
ANR	3317286	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317287	Identifier	res		3316909	0					
ANR	3317288	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317289	Callee	get_reg_name_1		3316909	0					
ANR	3317290	Identifier	get_reg_name_1		3316909	0					
ANR	3317291	ArgumentList	ins_bits		3316909	1					
ANR	3317292	Argument	ins_bits		3316909	0					
ANR	3317293	Identifier	ins_bits		3316909	0					
ANR	3317294	BreakStatement	break ;	179:3:4405:4410	3316909	25	True				
ANR	3317295	Label	case 82 :	180:2:4414:4421	3316909	26	True				
ANR	3317296	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""RA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""RL"" , 2 ) )"		3316909	27					
ANR	3317297	Condition	"! r_str_ncasecmp ( reg_arg , ""RA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""RL"" , 2 )"	181:7:4430:4499	3316909	0	True				
ANR	3317298	OrExpression	"! r_str_ncasecmp ( reg_arg , ""RA"" , 2 ) || ! r_str_ncasecmp ( reg_arg , ""RL"" , 2 )"		3316909	0		||			
ANR	3317299	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""RA"" , 2 )"		3316909	0					
ANR	3317300	UnaryOperator	!		3316909	0					
ANR	3317301	CallExpression	"r_str_ncasecmp ( reg_arg , ""RA"" , 2 )"		3316909	1					
ANR	3317302	Callee	r_str_ncasecmp		3316909	0					
ANR	3317303	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317304	ArgumentList	reg_arg		3316909	1					
ANR	3317305	Argument	reg_arg		3316909	0					
ANR	3317306	Identifier	reg_arg		3316909	0					
ANR	3317307	Argument	"""RA"""		3316909	1					
ANR	3317308	PrimaryExpression	"""RA"""		3316909	0					
ANR	3317309	Argument	2		3316909	2					
ANR	3317310	PrimaryExpression	2		3316909	0					
ANR	3317311	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""RL"" , 2 )"		3316909	1					
ANR	3317312	UnaryOperator	!		3316909	0					
ANR	3317313	CallExpression	"r_str_ncasecmp ( reg_arg , ""RL"" , 2 )"		3316909	1					
ANR	3317314	Callee	r_str_ncasecmp		3316909	0					
ANR	3317315	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317316	ArgumentList	reg_arg		3316909	1					
ANR	3317317	Argument	reg_arg		3316909	0					
ANR	3317318	Identifier	reg_arg		3316909	0					
ANR	3317319	Argument	"""RL"""		3316909	1					
ANR	3317320	PrimaryExpression	"""RL"""		3316909	0					
ANR	3317321	Argument	2		3316909	2					
ANR	3317322	PrimaryExpression	2		3316909	0					
ANR	3317323	CompoundStatement		66:79:1712:1712	3316909	1					
ANR	3317324	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	182:4:4508:4538	3316909	0	True				
ANR	3317325	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317326	Identifier	res		3316909	0					
ANR	3317327	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317328	Callee	get_reg_name_1		3316909	0					
ANR	3317329	Identifier	get_reg_name_1		3316909	0					
ANR	3317330	ArgumentList	ins_bits		3316909	1					
ANR	3317331	Argument	ins_bits		3316909	0					
ANR	3317332	Identifier	ins_bits		3316909	0					
ANR	3317333	ElseStatement	else		3316909	0					
ANR	3317334	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""RLP"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""RxP"" , 3 ) )"		3316909	0					
ANR	3317335	Condition	"! r_str_ncasecmp ( reg_arg , ""RLP"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""RxP"" , 3 )"	183:14:4554:4625	3316909	0	True				
ANR	3317336	OrExpression	"! r_str_ncasecmp ( reg_arg , ""RLP"" , 3 ) || ! r_str_ncasecmp ( reg_arg , ""RxP"" , 3 )"		3316909	0		||			
ANR	3317337	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""RLP"" , 3 )"		3316909	0					
ANR	3317338	UnaryOperator	!		3316909	0					
ANR	3317339	CallExpression	"r_str_ncasecmp ( reg_arg , ""RLP"" , 3 )"		3316909	1					
ANR	3317340	Callee	r_str_ncasecmp		3316909	0					
ANR	3317341	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317342	ArgumentList	reg_arg		3316909	1					
ANR	3317343	Argument	reg_arg		3316909	0					
ANR	3317344	Identifier	reg_arg		3316909	0					
ANR	3317345	Argument	"""RLP"""		3316909	1					
ANR	3317346	PrimaryExpression	"""RLP"""		3316909	0					
ANR	3317347	Argument	3		3316909	2					
ANR	3317348	PrimaryExpression	3		3316909	0					
ANR	3317349	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""RxP"" , 3 )"		3316909	1					
ANR	3317350	UnaryOperator	!		3316909	0					
ANR	3317351	CallExpression	"r_str_ncasecmp ( reg_arg , ""RxP"" , 3 )"		3316909	1					
ANR	3317352	Callee	r_str_ncasecmp		3316909	0					
ANR	3317353	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317354	ArgumentList	reg_arg		3316909	1					
ANR	3317355	Argument	reg_arg		3316909	0					
ANR	3317356	Identifier	reg_arg		3316909	0					
ANR	3317357	Argument	"""RxP"""		3316909	1					
ANR	3317358	PrimaryExpression	"""RxP"""		3316909	0					
ANR	3317359	Argument	3		3316909	2					
ANR	3317360	PrimaryExpression	3		3316909	0					
ANR	3317361	CompoundStatement		68:88:1838:1838	3316909	1					
ANR	3317362	ExpressionStatement	res = get_reg_name_1 ( ins_bits + 1 )	184:4:4634:4668	3316909	0	True				
ANR	3317363	AssignmentExpression	res = get_reg_name_1 ( ins_bits + 1 )		3316909	0		=			
ANR	3317364	Identifier	res		3316909	0					
ANR	3317365	CallExpression	get_reg_name_1 ( ins_bits + 1 )		3316909	1					
ANR	3317366	Callee	get_reg_name_1		3316909	0					
ANR	3317367	Identifier	get_reg_name_1		3316909	0					
ANR	3317368	ArgumentList	ins_bits + 1		3316909	1					
ANR	3317369	Argument	ins_bits + 1		3316909	0					
ANR	3317370	AdditiveExpression	ins_bits + 1		3316909	0		+			
ANR	3317371	Identifier	ins_bits		3316909	0					
ANR	3317372	PrimaryExpression	1		3316909	1					
ANR	3317373	ElseStatement	else		3316909	0					
ANR	3317374	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""RX"" , 2 ) )"		3316909	0					
ANR	3317375	Condition	"! r_str_ncasecmp ( reg_arg , ""RX"" , 2 )"	185:14:4684:4716	3316909	0	True				
ANR	3317376	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""RX"" , 2 )"		3316909	0					
ANR	3317377	UnaryOperator	!		3316909	0					
ANR	3317378	CallExpression	"r_str_ncasecmp ( reg_arg , ""RX"" , 2 )"		3316909	1					
ANR	3317379	Callee	r_str_ncasecmp		3316909	0					
ANR	3317380	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317381	ArgumentList	reg_arg		3316909	1					
ANR	3317382	Argument	reg_arg		3316909	0					
ANR	3317383	Identifier	reg_arg		3316909	0					
ANR	3317384	Argument	"""RX"""		3316909	1					
ANR	3317385	PrimaryExpression	"""RX"""		3316909	0					
ANR	3317386	Argument	2		3316909	2					
ANR	3317387	PrimaryExpression	2		3316909	0					
ANR	3317388	CompoundStatement		70:49:1929:1929	3316909	1					
ANR	3317389	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	186:4:4725:4755	3316909	0	True				
ANR	3317390	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317391	Identifier	res		3316909	0					
ANR	3317392	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317393	Callee	get_reg_name_1		3316909	0					
ANR	3317394	Identifier	get_reg_name_1		3316909	0					
ANR	3317395	ArgumentList	ins_bits		3316909	1					
ANR	3317396	Argument	ins_bits		3316909	0					
ANR	3317397	Identifier	ins_bits		3316909	0					
ANR	3317398	ElseStatement	else		3316909	0					
ANR	3317399	CompoundStatement		72:10:1977:1977	3316909	0					
ANR	3317400	ExpressionStatement	res = get_reg_name_2 ( ins_bits )	188:4:4773:4803	3316909	0	True				
ANR	3317401	AssignmentExpression	res = get_reg_name_2 ( ins_bits )		3316909	0		=			
ANR	3317402	Identifier	res		3316909	0					
ANR	3317403	CallExpression	get_reg_name_2 ( ins_bits )		3316909	1					
ANR	3317404	Callee	get_reg_name_2		3316909	0					
ANR	3317405	Identifier	get_reg_name_2		3316909	0					
ANR	3317406	ArgumentList	ins_bits		3316909	1					
ANR	3317407	Argument	ins_bits		3316909	0					
ANR	3317408	Identifier	ins_bits		3316909	0					
ANR	3317409	BreakStatement	break ;	190:3:4813:4818	3316909	28	True				
ANR	3317410	Label	case 84 :	191:2:4822:4829	3316909	29	True				
ANR	3317411	ExpressionStatement	res = get_reg_name_1 ( ins_bits + 48 )	192:3:4834:4869	3316909	30	True				
ANR	3317412	AssignmentExpression	res = get_reg_name_1 ( ins_bits + 48 )		3316909	0		=			
ANR	3317413	Identifier	res		3316909	0					
ANR	3317414	CallExpression	get_reg_name_1 ( ins_bits + 48 )		3316909	1					
ANR	3317415	Callee	get_reg_name_1		3316909	0					
ANR	3317416	Identifier	get_reg_name_1		3316909	0					
ANR	3317417	ArgumentList	ins_bits + 48		3316909	1					
ANR	3317418	Argument	ins_bits + 48		3316909	0					
ANR	3317419	AdditiveExpression	ins_bits + 48		3316909	0		+			
ANR	3317420	Identifier	ins_bits		3316909	0					
ANR	3317421	PrimaryExpression	48		3316909	1					
ANR	3317422	BreakStatement	break ;	193:3:4874:4879	3316909	31	True				
ANR	3317423	Label	case 87 :	194:2:4883:4890	3316909	32	True				
ANR	3317424	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""WD"" , 2 ) )"		3316909	33					
ANR	3317425	Condition	"! r_str_ncasecmp ( reg_arg , ""WD"" , 2 )"	195:7:4899:4931	3316909	0	True				
ANR	3317426	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""WD"" , 2 )"		3316909	0					
ANR	3317427	UnaryOperator	!		3316909	0					
ANR	3317428	CallExpression	"r_str_ncasecmp ( reg_arg , ""WD"" , 2 )"		3316909	1					
ANR	3317429	Callee	r_str_ncasecmp		3316909	0					
ANR	3317430	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317431	ArgumentList	reg_arg		3316909	1					
ANR	3317432	Argument	reg_arg		3316909	0					
ANR	3317433	Identifier	reg_arg		3316909	0					
ANR	3317434	Argument	"""WD"""		3316909	1					
ANR	3317435	PrimaryExpression	"""WD"""		3316909	0					
ANR	3317436	Argument	2		3316909	2					
ANR	3317437	PrimaryExpression	2		3316909	0					
ANR	3317438	CompoundStatement		80:42:2144:2144	3316909	1					
ANR	3317439	ExpressionStatement	res = get_reg_name_2 ( ins_bits )	196:4:4940:4970	3316909	0	True				
ANR	3317440	AssignmentExpression	res = get_reg_name_2 ( ins_bits )		3316909	0		=			
ANR	3317441	Identifier	res		3316909	0					
ANR	3317442	CallExpression	get_reg_name_2 ( ins_bits )		3316909	1					
ANR	3317443	Callee	get_reg_name_2		3316909	0					
ANR	3317444	Identifier	get_reg_name_2		3316909	0					
ANR	3317445	ArgumentList	ins_bits		3316909	1					
ANR	3317446	Argument	ins_bits		3316909	0					
ANR	3317447	Identifier	ins_bits		3316909	0					
ANR	3317448	ElseStatement	else		3316909	0					
ANR	3317449	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""WA"" , 2 ) )"		3316909	0					
ANR	3317450	Condition	"! r_str_ncasecmp ( reg_arg , ""WA"" , 2 )"	197:14:4986:5018	3316909	0	True				
ANR	3317451	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""WA"" , 2 )"		3316909	0					
ANR	3317452	UnaryOperator	!		3316909	0					
ANR	3317453	CallExpression	"r_str_ncasecmp ( reg_arg , ""WA"" , 2 )"		3316909	1					
ANR	3317454	Callee	r_str_ncasecmp		3316909	0					
ANR	3317455	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317456	ArgumentList	reg_arg		3316909	1					
ANR	3317457	Argument	reg_arg		3316909	0					
ANR	3317458	Identifier	reg_arg		3316909	0					
ANR	3317459	Argument	"""WA"""		3316909	1					
ANR	3317460	PrimaryExpression	"""WA"""		3316909	0					
ANR	3317461	Argument	2		3316909	2					
ANR	3317462	PrimaryExpression	2		3316909	0					
ANR	3317463	CompoundStatement		82:49:2231:2231	3316909	1					
ANR	3317464	ExpressionStatement	res = get_reg_name_1 ( ins_bits )	198:4:5027:5057	3316909	0	True				
ANR	3317465	AssignmentExpression	res = get_reg_name_1 ( ins_bits )		3316909	0		=			
ANR	3317466	Identifier	res		3316909	0					
ANR	3317467	CallExpression	get_reg_name_1 ( ins_bits )		3316909	1					
ANR	3317468	Callee	get_reg_name_1		3316909	0					
ANR	3317469	Identifier	get_reg_name_1		3316909	0					
ANR	3317470	ArgumentList	ins_bits		3316909	1					
ANR	3317471	Argument	ins_bits		3316909	0					
ANR	3317472	Identifier	ins_bits		3316909	0					
ANR	3317473	ElseStatement	else		3316909	0					
ANR	3317474	CompoundStatement		84:10:2279:2279	3316909	0					
ANR	3317475	ExpressionStatement	res = NULL	200:4:5075:5085	3316909	0	True				
ANR	3317476	AssignmentExpression	res = NULL		3316909	0		=			
ANR	3317477	Identifier	res		3316909	0					
ANR	3317478	Identifier	NULL		3316909	1					
ANR	3317479	BreakStatement	break ;	202:3:5095:5100	3316909	34	True				
ANR	3317480	Label	case 88 :	203:2:5104:5111	3316909	35	True				
ANR	3317481	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""XR"" , 2 ) )"		3316909	36					
ANR	3317482	Condition	"! r_str_ncasecmp ( reg_arg , ""XR"" , 2 )"	204:7:5120:5152	3316909	0	True				
ANR	3317483	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""XR"" , 2 )"		3316909	0					
ANR	3317484	UnaryOperator	!		3316909	0					
ANR	3317485	CallExpression	"r_str_ncasecmp ( reg_arg , ""XR"" , 2 )"		3316909	1					
ANR	3317486	Callee	r_str_ncasecmp		3316909	0					
ANR	3317487	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317488	ArgumentList	reg_arg		3316909	1					
ANR	3317489	Argument	reg_arg		3316909	0					
ANR	3317490	Identifier	reg_arg		3316909	0					
ANR	3317491	Argument	"""XR"""		3316909	1					
ANR	3317492	PrimaryExpression	"""XR"""		3316909	0					
ANR	3317493	Argument	2		3316909	2					
ANR	3317494	PrimaryExpression	2		3316909	0					
ANR	3317495	CompoundStatement		89:42:2365:2365	3316909	1					
ANR	3317496	ExpressionStatement	res = get_reg_name_3 ( ins_bits )	205:4:5161:5191	3316909	0	True				
ANR	3317497	AssignmentExpression	res = get_reg_name_3 ( ins_bits )		3316909	0		=			
ANR	3317498	Identifier	res		3316909	0					
ANR	3317499	CallExpression	get_reg_name_3 ( ins_bits )		3316909	1					
ANR	3317500	Callee	get_reg_name_3		3316909	0					
ANR	3317501	Identifier	get_reg_name_3		3316909	0					
ANR	3317502	ArgumentList	ins_bits		3316909	1					
ANR	3317503	Argument	ins_bits		3316909	0					
ANR	3317504	Identifier	ins_bits		3316909	0					
ANR	3317505	ElseStatement	else		3316909	0					
ANR	3317506	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""XD"" , 2 ) )"		3316909	0					
ANR	3317507	Condition	"! r_str_ncasecmp ( reg_arg , ""XD"" , 2 )"	206:14:5207:5239	3316909	0	True				
ANR	3317508	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""XD"" , 2 )"		3316909	0					
ANR	3317509	UnaryOperator	!		3316909	0					
ANR	3317510	CallExpression	"r_str_ncasecmp ( reg_arg , ""XD"" , 2 )"		3316909	1					
ANR	3317511	Callee	r_str_ncasecmp		3316909	0					
ANR	3317512	Identifier	r_str_ncasecmp		3316909	0					
ANR	3317513	ArgumentList	reg_arg		3316909	1					
ANR	3317514	Argument	reg_arg		3316909	0					
ANR	3317515	Identifier	reg_arg		3316909	0					
ANR	3317516	Argument	"""XD"""		3316909	1					
ANR	3317517	PrimaryExpression	"""XD"""		3316909	0					
ANR	3317518	Argument	2		3316909	2					
ANR	3317519	PrimaryExpression	2		3316909	0					
ANR	3317520	CompoundStatement		91:49:2452:2452	3316909	1					
ANR	3317521	ExpressionStatement	res = get_reg_name_2 ( ins_bits + 32 )	207:4:5248:5283	3316909	0	True				
ANR	3317522	AssignmentExpression	res = get_reg_name_2 ( ins_bits + 32 )		3316909	0		=			
ANR	3317523	Identifier	res		3316909	0					
ANR	3317524	CallExpression	get_reg_name_2 ( ins_bits + 32 )		3316909	1					
ANR	3317525	Callee	get_reg_name_2		3316909	0					
ANR	3317526	Identifier	get_reg_name_2		3316909	0					
ANR	3317527	ArgumentList	ins_bits + 32		3316909	1					
ANR	3317528	Argument	ins_bits + 32		3316909	0					
ANR	3317529	AdditiveExpression	ins_bits + 32		3316909	0		+			
ANR	3317530	Identifier	ins_bits		3316909	0					
ANR	3317531	PrimaryExpression	32		3316909	1					
ANR	3317532	ElseStatement	else		3316909	0					
ANR	3317533	CompoundStatement		93:10:2505:2505	3316909	0					
ANR	3317534	ExpressionStatement	res = NULL	209:4:5301:5311	3316909	0	True				
ANR	3317535	AssignmentExpression	res = NULL		3316909	0		=			
ANR	3317536	Identifier	res		3316909	0					
ANR	3317537	Identifier	NULL		3316909	1					
ANR	3317538	BreakStatement	break ;	211:3:5321:5326	3316909	37	True				
ANR	3317539	Label	default :	212:2:5330:5337	3316909	38	True				
ANR	3317540	Identifier	default		3316909	0					
ANR	3317541	ExpressionStatement	res = NULL	213:3:5342:5352	3316909	39	True				
ANR	3317542	AssignmentExpression	res = NULL		3316909	0		=			
ANR	3317543	Identifier	res		3316909	0					
ANR	3317544	Identifier	NULL		3316909	1					
ANR	3317545	BreakStatement	break ;	214:3:5357:5362	3316909	40	True				
ANR	3317546	ReturnStatement	return res ;	217:1:5369:5379	3316909	5	True				
ANR	3317547	Identifier	res		3316909	0					
ANR	3317548	ReturnType	static char *		3316909	1					
ANR	3317549	Identifier	decode_regis		3316909	2					
ANR	3317550	ParameterList	"char * reg_arg , st32 hash_code , ut32 ins_bits , ut32 * ret_ins_bits , int * err_code"		3316909	3					
ANR	3317551	Parameter	char * reg_arg	115:26:2707:2719	3316909	0	True				
ANR	3317552	ParameterType	char *		3316909	0					
ANR	3317553	Identifier	reg_arg		3316909	1					
ANR	3317554	Parameter	st32 hash_code	115:41:2722:2735	3316909	1	True				
ANR	3317555	ParameterType	st32		3316909	0					
ANR	3317556	Identifier	hash_code		3316909	1					
ANR	3317557	Parameter	ut32 ins_bits	115:57:2738:2750	3316909	2	True				
ANR	3317558	ParameterType	ut32		3316909	0					
ANR	3317559	Identifier	ins_bits		3316909	1					
ANR	3317560	Parameter	ut32 * ret_ins_bits	116:1:2754:2771	3316909	3	True				
ANR	3317561	ParameterType	ut32 *		3316909	0					
ANR	3317562	Identifier	ret_ins_bits		3316909	1					
ANR	3317563	Parameter	int * err_code	116:21:2774:2786	3316909	4	True				
ANR	3317564	ParameterType	int *		3316909	0					
ANR	3317565	Identifier	err_code		3316909	1					
ANR	3317566	CFGEntryNode	ENTRY		3316909		True				
ANR	3317567	CFGExitNode	EXIT		3316909		True				
ANR	3317568	Symbol	res		3316909						
ANR	3317569	Symbol	* reg_arg		3316909						
ANR	3317570	Symbol	NULL		3316909						
ANR	3317571	Symbol	ret_ins_bits		3316909						
ANR	3317572	Symbol	err_code		3316909						
ANR	3317573	Symbol	reg_type		3316909						
ANR	3317574	Symbol	stderr		3316909						
ANR	3317575	Symbol	hash_code		3316909						
ANR	3317576	Symbol	* err_code		3316909						
ANR	3317577	Symbol	get_reg_name_3		3316909						
ANR	3317578	Symbol	get_reg_name_2		3316909						
ANR	3317579	Symbol	get_reg_name_1		3316909						
ANR	3317580	Symbol	ins_bits		3316909						
ANR	3317581	Symbol	check_arg		3316909						
ANR	3317582	Symbol	strdup		3316909						
ANR	3317583	Symbol	reg_arg		3316909						
ANR	3317584	Symbol	r_str_ncasecmp		3316909						
ANR	3317585	Symbol	* ret_ins_bits		3316909						
ANR	3317586	Function	decode_ins	222:0:5386:7700							
ANR	3317587	FunctionDef	"decode_ins (st32 hash_code , ut32 ins_pos , ut32 ins_off , ut32 * ins_len_dec , ut32 * reg_len_dec , ut32 * ret_ins_bits , ut32 magic_value , ut8 two_ins , int * err_code)"		3317586	0					
ANR	3317588	CompoundStatement		224:0:5559:7700	3317586	0					
ANR	3317589	IdentifierDeclStatement	ut32 ins_len ;	225:1:5562:5574	3317586	0	True				
ANR	3317590	IdentifierDecl	ins_len		3317586	0					
ANR	3317591	IdentifierDeclType	ut32		3317586	0					
ANR	3317592	Identifier	ins_len		3317586	1					
ANR	3317593	IdentifierDeclStatement	"char * ins , * pos ;"	226:1:5577:5592	3317586	1	True				
ANR	3317594	IdentifierDecl	* ins		3317586	0					
ANR	3317595	IdentifierDeclType	char *		3317586	0					
ANR	3317596	Identifier	ins		3317586	1					
ANR	3317597	IdentifierDecl	* pos		3317586	1					
ANR	3317598	IdentifierDeclType	char *		3317586	0					
ANR	3317599	Identifier	pos		3317586	1					
ANR	3317600	IdentifierDeclStatement	char token_aux [ 80 ] ;	227:1:5595:5613	3317586	2	True				
ANR	3317601	IdentifierDecl	token_aux [ 80 ]		3317586	0					
ANR	3317602	IdentifierDeclType	char [ 80 ]		3317586	0					
ANR	3317603	Identifier	token_aux		3317586	1					
ANR	3317604	PrimaryExpression	80		3317586	2					
ANR	3317605	IdentifierDeclStatement	"ut32 i , len ;"	228:1:5616:5627	3317586	3	True				
ANR	3317606	IdentifierDecl	i		3317586	0					
ANR	3317607	IdentifierDeclType	ut32		3317586	0					
ANR	3317608	Identifier	i		3317586	1					
ANR	3317609	IdentifierDecl	len		3317586	1					
ANR	3317610	IdentifierDeclType	ut32		3317586	0					
ANR	3317611	Identifier	len		3317586	1					
ANR	3317612	IdentifierDeclStatement	char * reg = NULL ;	229:1:5630:5646	3317586	4	True				
ANR	3317613	IdentifierDecl	* reg = NULL		3317586	0					
ANR	3317614	IdentifierDeclType	char *		3317586	0					
ANR	3317615	Identifier	reg		3317586	1					
ANR	3317616	AssignmentExpression	* reg = NULL		3317586	2		=			
ANR	3317617	Identifier	NULL		3317586	0					
ANR	3317618	Identifier	NULL		3317586	1					
ANR	3317619	IdentifierDeclStatement	char * res_decode = NULL ;	230:1:5649:5672	3317586	5	True				
ANR	3317620	IdentifierDecl	* res_decode = NULL		3317586	0					
ANR	3317621	IdentifierDeclType	char *		3317586	0					
ANR	3317622	Identifier	res_decode		3317586	1					
ANR	3317623	AssignmentExpression	* res_decode = NULL		3317586	2		=			
ANR	3317624	Identifier	NULL		3317586	0					
ANR	3317625	Identifier	NULL		3317586	1					
ANR	3317626	IdentifierDeclStatement	char * aux = NULL ;	231:1:5675:5691	3317586	6	True				
ANR	3317627	IdentifierDecl	* aux = NULL		3317586	0					
ANR	3317628	IdentifierDeclType	char *		3317586	0					
ANR	3317629	Identifier	aux		3317586	1					
ANR	3317630	AssignmentExpression	* aux = NULL		3317586	2		=			
ANR	3317631	Identifier	NULL		3317586	0					
ANR	3317632	Identifier	NULL		3317586	1					
ANR	3317633	ExpressionStatement	"ins_len = get_ins_len ( get_ins_part ( ins_pos + ins_off , 1 ) )"	234:1:5722:5779	3317586	7	True				
ANR	3317634	AssignmentExpression	"ins_len = get_ins_len ( get_ins_part ( ins_pos + ins_off , 1 ) )"		3317586	0		=			
ANR	3317635	Identifier	ins_len		3317586	0					
ANR	3317636	CallExpression	"get_ins_len ( get_ins_part ( ins_pos + ins_off , 1 ) )"		3317586	1					
ANR	3317637	Callee	get_ins_len		3317586	0					
ANR	3317638	Identifier	get_ins_len		3317586	0					
ANR	3317639	ArgumentList	"get_ins_part ( ins_pos + ins_off , 1 )"		3317586	1					
ANR	3317640	Argument	"get_ins_part ( ins_pos + ins_off , 1 )"		3317586	0					
ANR	3317641	CallExpression	"get_ins_part ( ins_pos + ins_off , 1 )"		3317586	0					
ANR	3317642	Callee	get_ins_part		3317586	0					
ANR	3317643	Identifier	get_ins_part		3317586	0					
ANR	3317644	ArgumentList	ins_pos + ins_off		3317586	1					
ANR	3317645	Argument	ins_pos + ins_off		3317586	0					
ANR	3317646	AdditiveExpression	ins_pos + ins_off		3317586	0		+			
ANR	3317647	Identifier	ins_pos		3317586	0					
ANR	3317648	Identifier	ins_off		3317586	1					
ANR	3317649	Argument	1		3317586	1					
ANR	3317650	PrimaryExpression	1		3317586	0					
ANR	3317651	ExpressionStatement	ins = ins_str [ 1 + 2 + hash_code * 4 ]	236:1:5809:5845	3317586	8	True				
ANR	3317652	AssignmentExpression	ins = ins_str [ 1 + 2 + hash_code * 4 ]		3317586	0		=			
ANR	3317653	Identifier	ins		3317586	0					
ANR	3317654	ArrayIndexing	ins_str [ 1 + 2 + hash_code * 4 ]		3317586	1					
ANR	3317655	Identifier	ins_str		3317586	0					
ANR	3317656	AdditiveExpression	1 + 2 + hash_code * 4		3317586	1		+			
ANR	3317657	PrimaryExpression	1		3317586	0					
ANR	3317658	AdditiveExpression	2 + hash_code * 4		3317586	1		+			
ANR	3317659	PrimaryExpression	2		3317586	0					
ANR	3317660	MultiplicativeExpression	hash_code * 4		3317586	1		*			
ANR	3317661	Identifier	hash_code		3317586	0					
ANR	3317662	PrimaryExpression	4		3317586	1					
ANR	3317663	IfStatement	if ( ! ins )		3317586	9					
ANR	3317664	Condition	! ins	237:5:5852:5855	3317586	0	True				
ANR	3317665	UnaryOperationExpression	! ins		3317586	0					
ANR	3317666	UnaryOperator	!		3317586	0					
ANR	3317667	Identifier	ins		3317586	1					
ANR	3317668	CompoundStatement		14:46:333:333	3317586	1					
ANR	3317669	ExpressionStatement	"fprintf ( stderr , ""Invalid instruction %s /hash %x\\n"" , ins , hash_code )"	238:2:5897:5965	3317586	0	True				
ANR	3317670	CallExpression	"fprintf ( stderr , ""Invalid instruction %s /hash %x\\n"" , ins , hash_code )"		3317586	0					
ANR	3317671	Callee	fprintf		3317586	0					
ANR	3317672	Identifier	fprintf		3317586	0					
ANR	3317673	ArgumentList	stderr		3317586	1					
ANR	3317674	Argument	stderr		3317586	0					
ANR	3317675	Identifier	stderr		3317586	0					
ANR	3317676	Argument	"""Invalid instruction %s /hash %x\\n"""		3317586	1					
ANR	3317677	PrimaryExpression	"""Invalid instruction %s /hash %x\\n"""		3317586	0					
ANR	3317678	Argument	ins		3317586	2					
ANR	3317679	Identifier	ins		3317586	0					
ANR	3317680	Argument	hash_code		3317586	3					
ANR	3317681	Identifier	hash_code		3317586	0					
ANR	3317682	ExpressionStatement	* err_code = - 1	239:2:5969:5983	3317586	1	True				
ANR	3317683	AssignmentExpression	* err_code = - 1		3317586	0		=			
ANR	3317684	UnaryOperationExpression	* err_code		3317586	0					
ANR	3317685	UnaryOperator	*		3317586	0					
ANR	3317686	Identifier	err_code		3317586	1					
ANR	3317687	UnaryOperationExpression	- 1		3317586	1					
ANR	3317688	UnaryOperator	-		3317586	0					
ANR	3317689	PrimaryExpression	1		3317586	1					
ANR	3317690	ReturnStatement	return NULL ;	240:2:5987:5998	3317586	2	True				
ANR	3317691	Identifier	NULL		3317586	0					
ANR	3317692	IfStatement	if ( hash_code == 0x19C )		3317586	10					
ANR	3317693	Condition	hash_code == 0x19C	242:5:6008:6025	3317586	0	True				
ANR	3317694	EqualityExpression	hash_code == 0x19C		3317586	0		==			
ANR	3317695	Identifier	hash_code		3317586	0					
ANR	3317696	PrimaryExpression	0x19C		3317586	1					
ANR	3317697	CompoundStatement		19:25:468:468	3317586	1					
ANR	3317698	ExpressionStatement	"res_decode = get_token_decoded ( hash_code , ""MMMMxxxxmm"" , 10 , NULL , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"	243:2:6032:6187	3317586	0	True				
ANR	3317699	AssignmentExpression	"res_decode = get_token_decoded ( hash_code , ""MMMMxxxxmm"" , 10 , NULL , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"		3317586	0		=			
ANR	3317700	Identifier	res_decode		3317586	0					
ANR	3317701	CallExpression	"get_token_decoded ( hash_code , ""MMMMxxxxmm"" , 10 , NULL , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"		3317586	1					
ANR	3317702	Callee	get_token_decoded		3317586	0					
ANR	3317703	Identifier	get_token_decoded		3317586	0					
ANR	3317704	ArgumentList	hash_code		3317586	1					
ANR	3317705	Argument	hash_code		3317586	0					
ANR	3317706	Identifier	hash_code		3317586	0					
ANR	3317707	Argument	"""MMMMxxxxmm"""		3317586	1					
ANR	3317708	PrimaryExpression	"""MMMMxxxxmm"""		3317586	0					
ANR	3317709	Argument	10		3317586	2					
ANR	3317710	PrimaryExpression	10		3317586	0					
ANR	3317711	Argument	NULL		3317586	3					
ANR	3317712	Identifier	NULL		3317586	0					
ANR	3317713	Argument	ret_ins_bits		3317586	4					
ANR	3317714	Identifier	ret_ins_bits		3317586	0					
ANR	3317715	Argument	reg_len_dec		3317586	5					
ANR	3317716	Identifier	reg_len_dec		3317586	0					
ANR	3317717	Argument	magic_value		3317586	6					
ANR	3317718	Identifier	magic_value		3317586	0					
ANR	3317719	Argument	ins_pos + ins_off		3317586	7					
ANR	3317720	AdditiveExpression	ins_pos + ins_off		3317586	0		+			
ANR	3317721	Identifier	ins_pos		3317586	0					
ANR	3317722	Identifier	ins_off		3317586	1					
ANR	3317723	Argument	ins_len		3317586	8					
ANR	3317724	Identifier	ins_len		3317586	0					
ANR	3317725	Argument	two_ins		3317586	9					
ANR	3317726	Identifier	two_ins		3317586	0					
ANR	3317727	Argument	err_code		3317586	10					
ANR	3317728	Identifier	err_code		3317586	0					
ANR	3317729	IfStatement	if ( * err_code < 0 )		3317586	1					
ANR	3317730	Condition	* err_code < 0	245:6:6195:6207	3317586	0	True				
ANR	3317731	RelationalExpression	* err_code < 0		3317586	0		<			
ANR	3317732	UnaryOperationExpression	* err_code		3317586	0					
ANR	3317733	UnaryOperator	*		3317586	0					
ANR	3317734	Identifier	err_code		3317586	1					
ANR	3317735	PrimaryExpression	0		3317586	1					
ANR	3317736	CompoundStatement		22:21:650:650	3317586	1					
ANR	3317737	ReturnStatement	return NULL ;	246:3:6215:6226	3317586	0	True				
ANR	3317738	Identifier	NULL		3317586	0					
ANR	3317739	IfStatement	if ( C55PLUS_DEBUG )		3317586	11					
ANR	3317740	Condition	C55PLUS_DEBUG	250:5:6241:6253	3317586	0	True				
ANR	3317741	Identifier	C55PLUS_DEBUG		3317586	0					
ANR	3317742	CompoundStatement		27:20:696:696	3317586	1					
ANR	3317743	ExpressionStatement	"printf ( ""PSEUDO INS %s\\n"" , ins )"	251:2:6260:6291	3317586	0	True				
ANR	3317744	CallExpression	"printf ( ""PSEUDO INS %s\\n"" , ins )"		3317586	0					
ANR	3317745	Callee	printf		3317586	0					
ANR	3317746	Identifier	printf		3317586	0					
ANR	3317747	ArgumentList	"""PSEUDO INS %s\\n"""		3317586	1					
ANR	3317748	Argument	"""PSEUDO INS %s\\n"""		3317586	0					
ANR	3317749	PrimaryExpression	"""PSEUDO INS %s\\n"""		3317586	0					
ANR	3317750	Argument	ins		3317586	1					
ANR	3317751	Identifier	ins		3317586	0					
ANR	3317752	ExpressionStatement	pos = ins	254:1:6298:6307	3317586	12	True				
ANR	3317753	AssignmentExpression	pos = ins		3317586	0		=			
ANR	3317754	Identifier	pos		3317586	0					
ANR	3317755	Identifier	ins		3317586	1					
ANR	3317756	ExpressionStatement	* ins_len_dec = ins_len	256:1:6333:6355	3317586	13	True				
ANR	3317757	AssignmentExpression	* ins_len_dec = ins_len		3317586	0		=			
ANR	3317758	UnaryOperationExpression	* ins_len_dec		3317586	0					
ANR	3317759	UnaryOperator	*		3317586	0					
ANR	3317760	Identifier	ins_len_dec		3317586	1					
ANR	3317761	Identifier	ins_len		3317586	1					
ANR	3317762	WhileStatement	while ( * pos )		3317586	14					
ANR	3317763	Condition	* pos	258:8:6366:6369	3317586	0	True				
ANR	3317764	UnaryOperationExpression	* pos		3317586	0					
ANR	3317765	UnaryOperator	*		3317586	0					
ANR	3317766	Identifier	pos		3317586	1					
ANR	3317767	CompoundStatement		35:14:812:812	3317586	1					
ANR	3317768	IfStatement	if ( * pos == '`' )		3317586	0					
ANR	3317769	Condition	* pos == '`'	259:6:6380:6390	3317586	0	True				
ANR	3317770	EqualityExpression	* pos == '`'		3317586	0		==			
ANR	3317771	UnaryOperationExpression	* pos		3317586	0					
ANR	3317772	UnaryOperator	*		3317586	0					
ANR	3317773	Identifier	pos		3317586	1					
ANR	3317774	PrimaryExpression	'`'		3317586	1					
ANR	3317775	CompoundStatement		36:19:833:833	3317586	1					
ANR	3317776	ExpressionStatement	pos ++	260:3:6398:6403	3317586	0	True				
ANR	3317777	PostIncDecOperationExpression	pos ++		3317586	0					
ANR	3317778	Identifier	pos		3317586	0					
ANR	3317779	IncDec	++		3317586	1					
ANR	3317780	ExpressionStatement	"aux = strchr ( pos , '`' )"	261:3:6408:6430	3317586	1	True				
ANR	3317781	AssignmentExpression	"aux = strchr ( pos , '`' )"		3317586	0		=			
ANR	3317782	Identifier	aux		3317586	0					
ANR	3317783	CallExpression	"strchr ( pos , '`' )"		3317586	1					
ANR	3317784	Callee	strchr		3317586	0					
ANR	3317785	Identifier	strchr		3317586	0					
ANR	3317786	ArgumentList	pos		3317586	1					
ANR	3317787	Argument	pos		3317586	0					
ANR	3317788	Identifier	pos		3317586	0					
ANR	3317789	Argument	'`'		3317586	1					
ANR	3317790	PrimaryExpression	'`'		3317586	0					
ANR	3317791	IfStatement	if ( ! aux || pos == aux )		3317586	2					
ANR	3317792	Condition	! aux || pos == aux	262:7:6439:6456	3317586	0	True				
ANR	3317793	OrExpression	! aux || pos == aux		3317586	0		||			
ANR	3317794	UnaryOperationExpression	! aux		3317586	0					
ANR	3317795	UnaryOperator	!		3317586	0					
ANR	3317796	Identifier	aux		3317586	1					
ANR	3317797	EqualityExpression	pos == aux		3317586	1		==			
ANR	3317798	Identifier	pos		3317586	0					
ANR	3317799	Identifier	aux		3317586	1					
ANR	3317800	CompoundStatement		39:27:899:899	3317586	1					
ANR	3317801	ExpressionStatement	"fprintf ( stderr , ""Invalid instruction %s\\n"" , ins )"	263:4:6465:6513	3317586	0	True				
ANR	3317802	CallExpression	"fprintf ( stderr , ""Invalid instruction %s\\n"" , ins )"		3317586	0					
ANR	3317803	Callee	fprintf		3317586	0					
ANR	3317804	Identifier	fprintf		3317586	0					
ANR	3317805	ArgumentList	stderr		3317586	1					
ANR	3317806	Argument	stderr		3317586	0					
ANR	3317807	Identifier	stderr		3317586	0					
ANR	3317808	Argument	"""Invalid instruction %s\\n"""		3317586	1					
ANR	3317809	PrimaryExpression	"""Invalid instruction %s\\n"""		3317586	0					
ANR	3317810	Argument	ins		3317586	2					
ANR	3317811	Identifier	ins		3317586	0					
ANR	3317812	ExpressionStatement	free ( res_decode )	264:4:6519:6536	3317586	1	True				
ANR	3317813	CallExpression	free ( res_decode )		3317586	0					
ANR	3317814	Callee	free		3317586	0					
ANR	3317815	Identifier	free		3317586	0					
ANR	3317816	ArgumentList	res_decode		3317586	1					
ANR	3317817	Argument	res_decode		3317586	0					
ANR	3317818	Identifier	res_decode		3317586	0					
ANR	3317819	ExpressionStatement	* err_code = - 1	265:4:6542:6556	3317586	2	True				
ANR	3317820	AssignmentExpression	* err_code = - 1		3317586	0		=			
ANR	3317821	UnaryOperationExpression	* err_code		3317586	0					
ANR	3317822	UnaryOperator	*		3317586	0					
ANR	3317823	Identifier	err_code		3317586	1					
ANR	3317824	UnaryOperationExpression	- 1		3317586	1					
ANR	3317825	UnaryOperator	-		3317586	0					
ANR	3317826	PrimaryExpression	1		3317586	1					
ANR	3317827	ReturnStatement	return NULL ;	266:4:6562:6573	3317586	3	True				
ANR	3317828	Identifier	NULL		3317586	0					
ANR	3317829	ExpressionStatement	len = ( ut32 ) ( size_t ) ( aux - pos )	268:3:6583:6612	3317586	3	True				
ANR	3317830	AssignmentExpression	len = ( ut32 ) ( size_t ) ( aux - pos )		3317586	0		=			
ANR	3317831	Identifier	len		3317586	0					
ANR	3317832	CastExpression	( ut32 ) ( size_t ) ( aux - pos )		3317586	1					
ANR	3317833	CastTarget	ut32		3317586	0					
ANR	3317834	CastExpression	( size_t ) ( aux - pos )		3317586	1					
ANR	3317835	CastTarget	size_t		3317586	0					
ANR	3317836	AdditiveExpression	aux - pos		3317586	1		-			
ANR	3317837	Identifier	aux		3317586	0					
ANR	3317838	Identifier	pos		3317586	1					
ANR	3317839	IfStatement	if ( len >= 80 )		3317586	4					
ANR	3317840	Condition	len >= 80	269:7:6621:6629	3317586	0	True				
ANR	3317841	RelationalExpression	len >= 80		3317586	0		>=			
ANR	3317842	Identifier	len		3317586	0					
ANR	3317843	PrimaryExpression	80		3317586	1					
ANR	3317844	CompoundStatement		46:18:1072:1072	3317586	1					
ANR	3317845	ExpressionStatement	"fprintf ( stderr , ""Invalid length token %d\\n"" , len )"	270:4:6638:6687	3317586	0	True				
ANR	3317846	CallExpression	"fprintf ( stderr , ""Invalid length token %d\\n"" , len )"		3317586	0					
ANR	3317847	Callee	fprintf		3317586	0					
ANR	3317848	Identifier	fprintf		3317586	0					
ANR	3317849	ArgumentList	stderr		3317586	1					
ANR	3317850	Argument	stderr		3317586	0					
ANR	3317851	Identifier	stderr		3317586	0					
ANR	3317852	Argument	"""Invalid length token %d\\n"""		3317586	1					
ANR	3317853	PrimaryExpression	"""Invalid length token %d\\n"""		3317586	0					
ANR	3317854	Argument	len		3317586	2					
ANR	3317855	Identifier	len		3317586	0					
ANR	3317856	ExpressionStatement	free ( res_decode )	271:4:6693:6710	3317586	1	True				
ANR	3317857	CallExpression	free ( res_decode )		3317586	0					
ANR	3317858	Callee	free		3317586	0					
ANR	3317859	Identifier	free		3317586	0					
ANR	3317860	ArgumentList	res_decode		3317586	1					
ANR	3317861	Argument	res_decode		3317586	0					
ANR	3317862	Identifier	res_decode		3317586	0					
ANR	3317863	ExpressionStatement	* err_code = - 1	272:4:6716:6730	3317586	2	True				
ANR	3317864	AssignmentExpression	* err_code = - 1		3317586	0		=			
ANR	3317865	UnaryOperationExpression	* err_code		3317586	0					
ANR	3317866	UnaryOperator	*		3317586	0					
ANR	3317867	Identifier	err_code		3317586	1					
ANR	3317868	UnaryOperationExpression	- 1		3317586	1					
ANR	3317869	UnaryOperator	-		3317586	0					
ANR	3317870	PrimaryExpression	1		3317586	1					
ANR	3317871	ReturnStatement	return NULL ;	273:4:6736:6747	3317586	3	True				
ANR	3317872	Identifier	NULL		3317586	0					
ANR	3317873	ExpressionStatement	"memcpy ( token_aux , pos , len )"	276:3:6758:6785	3317586	5	True				
ANR	3317874	CallExpression	"memcpy ( token_aux , pos , len )"		3317586	0					
ANR	3317875	Callee	memcpy		3317586	0					
ANR	3317876	Identifier	memcpy		3317586	0					
ANR	3317877	ArgumentList	token_aux		3317586	1					
ANR	3317878	Argument	token_aux		3317586	0					
ANR	3317879	Identifier	token_aux		3317586	0					
ANR	3317880	Argument	pos		3317586	1					
ANR	3317881	Identifier	pos		3317586	0					
ANR	3317882	Argument	len		3317586	2					
ANR	3317883	Identifier	len		3317586	0					
ANR	3317884	ExpressionStatement	token_aux [ len ] = '\\0'	277:3:6790:6811	3317586	6	True				
ANR	3317885	AssignmentExpression	token_aux [ len ] = '\\0'		3317586	0		=			
ANR	3317886	ArrayIndexing	token_aux [ len ]		3317586	0					
ANR	3317887	Identifier	token_aux		3317586	0					
ANR	3317888	Identifier	len		3317586	1					
ANR	3317889	PrimaryExpression	'\\0'		3317586	1					
ANR	3317890	ExpressionStatement	pos = aux	278:3:6816:6825	3317586	7	True				
ANR	3317891	AssignmentExpression	pos = aux		3317586	0		=			
ANR	3317892	Identifier	pos		3317586	0					
ANR	3317893	Identifier	aux		3317586	1					
ANR	3317894	IfStatement	if ( C55PLUS_DEBUG )		3317586	8					
ANR	3317895	Condition	C55PLUS_DEBUG	280:7:6835:6847	3317586	0	True				
ANR	3317896	Identifier	C55PLUS_DEBUG		3317586	0					
ANR	3317897	CompoundStatement		57:22:1290:1290	3317586	1					
ANR	3317898	ExpressionStatement	"printf ( ""TOKEN AUX: %s\\n"" , token_aux )"	281:4:6856:6893	3317586	0	True				
ANR	3317899	CallExpression	"printf ( ""TOKEN AUX: %s\\n"" , token_aux )"		3317586	0					
ANR	3317900	Callee	printf		3317586	0					
ANR	3317901	Identifier	printf		3317586	0					
ANR	3317902	ArgumentList	"""TOKEN AUX: %s\\n"""		3317586	1					
ANR	3317903	Argument	"""TOKEN AUX: %s\\n"""		3317586	0					
ANR	3317904	PrimaryExpression	"""TOKEN AUX: %s\\n"""		3317586	0					
ANR	3317905	Argument	token_aux		3317586	1					
ANR	3317906	Identifier	token_aux		3317586	0					
ANR	3317907	ExpressionStatement	reg = NULL	284:3:6904:6914	3317586	9	True				
ANR	3317908	AssignmentExpression	reg = NULL		3317586	0		=			
ANR	3317909	Identifier	reg		3317586	0					
ANR	3317910	Identifier	NULL		3317586	1					
ANR	3317911	ForStatement	for ( i = 0 ; i < len ; i ++ )		3317586	10					
ANR	3317912	ForInit	i = 0 ;	285:8:6924:6929	3317586	0	True				
ANR	3317913	AssignmentExpression	i = 0		3317586	0		=			
ANR	3317914	Identifier	i		3317586	0					
ANR	3317915	PrimaryExpression	0		3317586	1					
ANR	3317916	Condition	i < len	285:15:6931:6937	3317586	1	True				
ANR	3317917	RelationalExpression	i < len		3317586	0		<			
ANR	3317918	Identifier	i		3317586	0					
ANR	3317919	Identifier	len		3317586	1					
ANR	3317920	PostIncDecOperationExpression	i ++	285:24:6940:6942	3317586	2	True				
ANR	3317921	Identifier	i		3317586	0					
ANR	3317922	IncDec	++		3317586	1					
ANR	3317923	CompoundStatement		62:29:1385:1385	3317586	3					
ANR	3317924	IfStatement	"if ( token_aux [ i ] == ',' )"		3317586	0					
ANR	3317925	Condition	"token_aux [ i ] == ','"	286:8:6955:6973	3317586	0	True				
ANR	3317926	EqualityExpression	"token_aux [ i ] == ','"		3317586	0		==			
ANR	3317927	ArrayIndexing	token_aux [ i ]		3317586	0					
ANR	3317928	Identifier	token_aux		3317586	0					
ANR	3317929	Identifier	i		3317586	1					
ANR	3317930	PrimaryExpression	"','"		3317586	1					
ANR	3317931	CompoundStatement		63:29:1416:1416	3317586	1					
ANR	3317932	ExpressionStatement	len = ( unsigned int ) ( size_t ) ( & token_aux [ i ] - token_aux )	287:5:6983:7038	3317586	0	True				
ANR	3317933	AssignmentExpression	len = ( unsigned int ) ( size_t ) ( & token_aux [ i ] - token_aux )		3317586	0		=			
ANR	3317934	Identifier	len		3317586	0					
ANR	3317935	CastExpression	( unsigned int ) ( size_t ) ( & token_aux [ i ] - token_aux )		3317586	1					
ANR	3317936	CastTarget	unsigned int		3317586	0					
ANR	3317937	CastExpression	( size_t ) ( & token_aux [ i ] - token_aux )		3317586	1					
ANR	3317938	CastTarget	size_t		3317586	0					
ANR	3317939	AdditiveExpression	& token_aux [ i ] - token_aux		3317586	1		-			
ANR	3317940	UnaryOperationExpression	& token_aux [ i ]		3317586	0					
ANR	3317941	UnaryOperator	&		3317586	0					
ANR	3317942	ArrayIndexing	token_aux [ i ]		3317586	1					
ANR	3317943	Identifier	token_aux		3317586	0					
ANR	3317944	Identifier	i		3317586	1					
ANR	3317945	Identifier	token_aux		3317586	1					
ANR	3317946	ExpressionStatement	reg = & token_aux [ i + 1 ]	288:5:7045:7068	3317586	1	True				
ANR	3317947	AssignmentExpression	reg = & token_aux [ i + 1 ]		3317586	0		=			
ANR	3317948	Identifier	reg		3317586	0					
ANR	3317949	UnaryOperationExpression	& token_aux [ i + 1 ]		3317586	1					
ANR	3317950	UnaryOperator	&		3317586	0					
ANR	3317951	ArrayIndexing	token_aux [ i + 1 ]		3317586	1					
ANR	3317952	Identifier	token_aux		3317586	0					
ANR	3317953	AdditiveExpression	i + 1		3317586	1		+			
ANR	3317954	Identifier	i		3317586	0					
ANR	3317955	PrimaryExpression	1		3317586	1					
ANR	3317956	IfStatement	if ( C55PLUS_DEBUG )		3317586	2					
ANR	3317957	Condition	C55PLUS_DEBUG	290:9:7080:7092	3317586	0	True				
ANR	3317958	Identifier	C55PLUS_DEBUG		3317586	0					
ANR	3317959	CompoundStatement		67:24:1535:1535	3317586	1					
ANR	3317960	ExpressionStatement	"printf ( ""REG : %s\\n"" , reg )"	291:6:7103:7129	3317586	0	True				
ANR	3317961	CallExpression	"printf ( ""REG : %s\\n"" , reg )"		3317586	0					
ANR	3317962	Callee	printf		3317586	0					
ANR	3317963	Identifier	printf		3317586	0					
ANR	3317964	ArgumentList	"""REG : %s\\n"""		3317586	1					
ANR	3317965	Argument	"""REG : %s\\n"""		3317586	0					
ANR	3317966	PrimaryExpression	"""REG : %s\\n"""		3317586	0					
ANR	3317967	Argument	reg		3317586	1					
ANR	3317968	Identifier	reg		3317586	0					
ANR	3317969	BreakStatement	break ;	293:5:7143:7148	3317586	3	True				
ANR	3317970	ExpressionStatement	"aux = get_token_decoded ( hash_code , token_aux , len , reg , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"	297:3:7165:7311	3317586	11	True				
ANR	3317971	AssignmentExpression	"aux = get_token_decoded ( hash_code , token_aux , len , reg , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"		3317586	0		=			
ANR	3317972	Identifier	aux		3317586	0					
ANR	3317973	CallExpression	"get_token_decoded ( hash_code , token_aux , len , reg , ret_ins_bits , reg_len_dec , magic_value , ins_pos + ins_off , ins_len , two_ins , err_code )"		3317586	1					
ANR	3317974	Callee	get_token_decoded		3317586	0					
ANR	3317975	Identifier	get_token_decoded		3317586	0					
ANR	3317976	ArgumentList	hash_code		3317586	1					
ANR	3317977	Argument	hash_code		3317586	0					
ANR	3317978	Identifier	hash_code		3317586	0					
ANR	3317979	Argument	token_aux		3317586	1					
ANR	3317980	Identifier	token_aux		3317586	0					
ANR	3317981	Argument	len		3317586	2					
ANR	3317982	Identifier	len		3317586	0					
ANR	3317983	Argument	reg		3317586	3					
ANR	3317984	Identifier	reg		3317586	0					
ANR	3317985	Argument	ret_ins_bits		3317586	4					
ANR	3317986	Identifier	ret_ins_bits		3317586	0					
ANR	3317987	Argument	reg_len_dec		3317586	5					
ANR	3317988	Identifier	reg_len_dec		3317586	0					
ANR	3317989	Argument	magic_value		3317586	6					
ANR	3317990	Identifier	magic_value		3317586	0					
ANR	3317991	Argument	ins_pos + ins_off		3317586	7					
ANR	3317992	AdditiveExpression	ins_pos + ins_off		3317586	0		+			
ANR	3317993	Identifier	ins_pos		3317586	0					
ANR	3317994	Identifier	ins_off		3317586	1					
ANR	3317995	Argument	ins_len		3317586	8					
ANR	3317996	Identifier	ins_len		3317586	0					
ANR	3317997	Argument	two_ins		3317586	9					
ANR	3317998	Identifier	two_ins		3317586	0					
ANR	3317999	Argument	err_code		3317586	10					
ANR	3318000	Identifier	err_code		3317586	0					
ANR	3318001	IfStatement	if ( * err_code < 0 )		3317586	12					
ANR	3318002	Condition	* err_code < 0	299:7:7320:7332	3317586	0	True				
ANR	3318003	RelationalExpression	* err_code < 0		3317586	0		<			
ANR	3318004	UnaryOperationExpression	* err_code		3317586	0					
ANR	3318005	UnaryOperator	*		3317586	0					
ANR	3318006	Identifier	err_code		3317586	1					
ANR	3318007	PrimaryExpression	0		3317586	1					
ANR	3318008	CompoundStatement		76:22:1775:1775	3317586	1					
ANR	3318009	ReturnStatement	return NULL ;	300:4:7341:7352	3317586	0	True				
ANR	3318010	Identifier	NULL		3317586	0					
ANR	3318011	ExpressionStatement	"res_decode = strcat_dup ( res_decode , aux , 3 )"	302:3:7362:7405	3317586	13	True				
ANR	3318012	AssignmentExpression	"res_decode = strcat_dup ( res_decode , aux , 3 )"		3317586	0		=			
ANR	3318013	Identifier	res_decode		3317586	0					
ANR	3318014	CallExpression	"strcat_dup ( res_decode , aux , 3 )"		3317586	1					
ANR	3318015	Callee	strcat_dup		3317586	0					
ANR	3318016	Identifier	strcat_dup		3317586	0					
ANR	3318017	ArgumentList	res_decode		3317586	1					
ANR	3318018	Argument	res_decode		3317586	0					
ANR	3318019	Identifier	res_decode		3317586	0					
ANR	3318020	Argument	aux		3317586	1					
ANR	3318021	Identifier	aux		3317586	0					
ANR	3318022	Argument	3		3317586	2					
ANR	3318023	PrimaryExpression	3		3317586	0					
ANR	3318024	IfStatement	if ( C55PLUS_DEBUG )		3317586	14					
ANR	3318025	Condition	C55PLUS_DEBUG	303:7:7414:7426	3317586	0	True				
ANR	3318026	Identifier	C55PLUS_DEBUG		3317586	0					
ANR	3318027	CompoundStatement		80:22:1869:1869	3317586	1					
ANR	3318028	ExpressionStatement	"printf ( ""RET TOKEN %s\\n"" , res_decode )"	304:4:7435:7471	3317586	0	True				
ANR	3318029	CallExpression	"printf ( ""RET TOKEN %s\\n"" , res_decode )"		3317586	0					
ANR	3318030	Callee	printf		3317586	0					
ANR	3318031	Identifier	printf		3317586	0					
ANR	3318032	ArgumentList	"""RET TOKEN %s\\n"""		3317586	1					
ANR	3318033	Argument	"""RET TOKEN %s\\n"""		3317586	0					
ANR	3318034	PrimaryExpression	"""RET TOKEN %s\\n"""		3317586	0					
ANR	3318035	Argument	res_decode		3317586	1					
ANR	3318036	Identifier	res_decode		3317586	0					
ANR	3318037	ElseStatement	else		3317586	0					
ANR	3318038	CompoundStatement		83:9:1927:1927	3317586	0					
ANR	3318039	ExpressionStatement	token_aux [ 0 ] = * pos	307:3:7492:7511	3317586	0	True				
ANR	3318040	AssignmentExpression	token_aux [ 0 ] = * pos		3317586	0		=			
ANR	3318041	ArrayIndexing	token_aux [ 0 ]		3317586	0					
ANR	3318042	Identifier	token_aux		3317586	0					
ANR	3318043	PrimaryExpression	0		3317586	1					
ANR	3318044	UnaryOperationExpression	* pos		3317586	1					
ANR	3318045	UnaryOperator	*		3317586	0					
ANR	3318046	Identifier	pos		3317586	1					
ANR	3318047	ExpressionStatement	token_aux [ 1 ] = '\\0'	308:3:7516:7535	3317586	1	True				
ANR	3318048	AssignmentExpression	token_aux [ 1 ] = '\\0'		3317586	0		=			
ANR	3318049	ArrayIndexing	token_aux [ 1 ]		3317586	0					
ANR	3318050	Identifier	token_aux		3317586	0					
ANR	3318051	PrimaryExpression	1		3317586	1					
ANR	3318052	PrimaryExpression	'\\0'		3317586	1					
ANR	3318053	ExpressionStatement	"res_decode = strcat_dup ( res_decode , token_aux , 1 )"	309:3:7540:7589	3317586	2	True				
ANR	3318054	AssignmentExpression	"res_decode = strcat_dup ( res_decode , token_aux , 1 )"		3317586	0		=			
ANR	3318055	Identifier	res_decode		3317586	0					
ANR	3318056	CallExpression	"strcat_dup ( res_decode , token_aux , 1 )"		3317586	1					
ANR	3318057	Callee	strcat_dup		3317586	0					
ANR	3318058	Identifier	strcat_dup		3317586	0					
ANR	3318059	ArgumentList	res_decode		3317586	1					
ANR	3318060	Argument	res_decode		3317586	0					
ANR	3318061	Identifier	res_decode		3317586	0					
ANR	3318062	Argument	token_aux		3317586	1					
ANR	3318063	Identifier	token_aux		3317586	0					
ANR	3318064	Argument	1		3317586	2					
ANR	3318065	PrimaryExpression	1		3317586	0					
ANR	3318066	ExpressionStatement	pos ++	311:2:7597:7602	3317586	1	True				
ANR	3318067	PostIncDecOperationExpression	pos ++		3317586	0					
ANR	3318068	Identifier	pos		3317586	0					
ANR	3318069	IncDec	++		3317586	1					
ANR	3318070	IfStatement	if ( C55PLUS_DEBUG )		3317586	15					
ANR	3318071	Condition	C55PLUS_DEBUG	314:5:7613:7625	3317586	0	True				
ANR	3318072	Identifier	C55PLUS_DEBUG		3317586	0					
ANR	3318073	CompoundStatement		91:20:2068:2068	3317586	1					
ANR	3318074	ExpressionStatement	"printf ( ""RESULT DECODE: %s\\n"" , res_decode )"	315:2:7632:7674	3317586	0	True				
ANR	3318075	CallExpression	"printf ( ""RESULT DECODE: %s\\n"" , res_decode )"		3317586	0					
ANR	3318076	Callee	printf		3317586	0					
ANR	3318077	Identifier	printf		3317586	0					
ANR	3318078	ArgumentList	"""RESULT DECODE: %s\\n"""		3317586	1					
ANR	3318079	Argument	"""RESULT DECODE: %s\\n"""		3317586	0					
ANR	3318080	PrimaryExpression	"""RESULT DECODE: %s\\n"""		3317586	0					
ANR	3318081	Argument	res_decode		3317586	1					
ANR	3318082	Identifier	res_decode		3317586	0					
ANR	3318083	ReturnStatement	return res_decode ;	318:1:7681:7698	3317586	16	True				
ANR	3318084	Identifier	res_decode		3317586	0					
ANR	3318085	ReturnType	static char *		3317586	1					
ANR	3318086	Identifier	decode_ins		3317586	2					
ANR	3318087	ParameterList	"st32 hash_code , ut32 ins_pos , ut32 ins_off , ut32 * ins_len_dec , ut32 * reg_len_dec , ut32 * ret_ins_bits , ut32 magic_value , ut8 two_ins , int * err_code"		3317586	3					
ANR	3318088	Parameter	st32 hash_code	222:24:5410:5423	3317586	0	True				
ANR	3318089	ParameterType	st32		3317586	0					
ANR	3318090	Identifier	hash_code		3317586	1					
ANR	3318091	Parameter	ut32 ins_pos	222:40:5426:5437	3317586	1	True				
ANR	3318092	ParameterType	ut32		3317586	0					
ANR	3318093	Identifier	ins_pos		3317586	1					
ANR	3318094	Parameter	ut32 ins_off	222:54:5440:5451	3317586	2	True				
ANR	3318095	ParameterType	ut32		3317586	0					
ANR	3318096	Identifier	ins_off		3317586	1					
ANR	3318097	Parameter	ut32 * ins_len_dec	222:68:5454:5470	3317586	3	True				
ANR	3318098	ParameterType	ut32 *		3317586	0					
ANR	3318099	Identifier	ins_len_dec		3317586	1					
ANR	3318100	Parameter	ut32 * reg_len_dec	223:1:5474:5490	3317586	4	True				
ANR	3318101	ParameterType	ut32 *		3317586	0					
ANR	3318102	Identifier	reg_len_dec		3317586	1					
ANR	3318103	Parameter	ut32 * ret_ins_bits	223:20:5493:5510	3317586	5	True				
ANR	3318104	ParameterType	ut32 *		3317586	0					
ANR	3318105	Identifier	ret_ins_bits		3317586	1					
ANR	3318106	Parameter	ut32 magic_value	223:40:5513:5528	3317586	6	True				
ANR	3318107	ParameterType	ut32		3317586	0					
ANR	3318108	Identifier	magic_value		3317586	1					
ANR	3318109	Parameter	ut8 two_ins	223:58:5531:5541	3317586	7	True				
ANR	3318110	ParameterType	ut8		3317586	0					
ANR	3318111	Identifier	two_ins		3317586	1					
ANR	3318112	Parameter	int * err_code	223:71:5544:5556	3317586	8	True				
ANR	3318113	ParameterType	int *		3317586	0					
ANR	3318114	Identifier	err_code		3317586	1					
ANR	3318115	CFGEntryNode	ENTRY		3317586		True				
ANR	3318116	CFGExitNode	EXIT		3317586		True				
ANR	3318117	Symbol	res_decode		3317586						
ANR	3318118	Symbol	* ins_len_dec		3317586						
ANR	3318119	Symbol	ins_str		3317586						
ANR	3318120	Symbol	aux		3317586						
ANR	3318121	Symbol	err_code		3317586						
ANR	3318122	Symbol	strchr		3317586						
ANR	3318123	Symbol	token_aux		3317586						
ANR	3318124	Symbol	hash_code		3317586						
ANR	3318125	Symbol	len		3317586						
ANR	3318126	Symbol	* err_code		3317586						
ANR	3318127	Symbol	pos		3317586						
ANR	3318128	Symbol	reg		3317586						
ANR	3318129	Symbol	two_ins		3317586						
ANR	3318130	Symbol	ins_len_dec		3317586						
ANR	3318131	Symbol	ins_len		3317586						
ANR	3318132	Symbol	strcat_dup		3317586						
ANR	3318133	Symbol	C55PLUS_DEBUG		3317586						
ANR	3318134	Symbol	NULL		3317586						
ANR	3318135	Symbol	ret_ins_bits		3317586						
ANR	3318136	Symbol	ins_pos		3317586						
ANR	3318137	Symbol	* hash_code		3317586						
ANR	3318138	Symbol	i		3317586						
ANR	3318139	Symbol	stderr		3317586						
ANR	3318140	Symbol	* ins_str		3317586						
ANR	3318141	Symbol	ins		3317586						
ANR	3318142	Symbol	get_ins_len		3317586						
ANR	3318143	Symbol	* token_aux		3317586						
ANR	3318144	Symbol	reg_len_dec		3317586						
ANR	3318145	Symbol	* i		3317586						
ANR	3318146	Symbol	magic_value		3317586						
ANR	3318147	Symbol	get_ins_part		3317586						
ANR	3318148	Symbol	ins_off		3317586						
ANR	3318149	Symbol	get_token_decoded		3317586						
ANR	3318150	Symbol	* pos		3317586						
ANR	3318151	Symbol	* len		3317586						
ANR	3318152	Function	is_hash	321:0:7703:7971							
ANR	3318153	FunctionDef	is_hash (st32 hash_code)		3318152	0					
ANR	3318154	CompoundStatement		322:0:7739:7971	3318152	0					
ANR	3318155	IdentifierDeclStatement	bool ret ;	323:1:7742:7750	3318152	0	True				
ANR	3318156	IdentifierDecl	ret		3318152	0					
ANR	3318157	IdentifierDeclType	bool		3318152	0					
ANR	3318158	Identifier	ret		3318152	1					
ANR	3318159	SwitchStatement	switch ( hash_code )		3318152	1					
ANR	3318160	Condition	hash_code	325:8:7761:7769	3318152	0	True				
ANR	3318161	Identifier	hash_code		3318152	0					
ANR	3318162	CompoundStatement		4:19:32:32	3318152	1					
ANR	3318163	Label	case 0xE8 :	326:2:7776:7785	3318152	0	True				
ANR	3318164	Label	case 0xE9 :	327:2:7789:7798	3318152	1	True				
ANR	3318165	Label	case 0xEA :	328:2:7802:7811	3318152	2	True				
ANR	3318166	Label	case 0xEC :	329:2:7815:7824	3318152	3	True				
ANR	3318167	Label	case 0x1A8 :	330:2:7828:7838	3318152	4	True				
ANR	3318168	Label	case 0x1DC :	331:2:7842:7852	3318152	5	True				
ANR	3318169	Label	case 0x1E1 :	332:2:7856:7866	3318152	6	True				
ANR	3318170	Label	case 0x1E2 :	333:2:7870:7880	3318152	7	True				
ANR	3318171	Label	case 0x1E3 :	334:2:7884:7894	3318152	8	True				
ANR	3318172	Label	case 0x1E4 :	335:2:7898:7908	3318152	9	True				
ANR	3318173	ExpressionStatement	ret = 1	336:3:7913:7920	3318152	10	True				
ANR	3318174	AssignmentExpression	ret = 1		3318152	0		=			
ANR	3318175	Identifier	ret		3318152	0					
ANR	3318176	PrimaryExpression	1		3318152	1					
ANR	3318177	BreakStatement	break ;	337:3:7925:7930	3318152	11	True				
ANR	3318178	Label	default :	338:2:7934:7941	3318152	12	True				
ANR	3318179	Identifier	default		3318152	0					
ANR	3318180	ExpressionStatement	ret = 0	339:2:7945:7952	3318152	13	True				
ANR	3318181	AssignmentExpression	ret = 0		3318152	0		=			
ANR	3318182	Identifier	ret		3318152	0					
ANR	3318183	PrimaryExpression	0		3318152	1					
ANR	3318184	ReturnStatement	return ret ;	342:1:7959:7969	3318152	2	True				
ANR	3318185	Identifier	ret		3318152	0					
ANR	3318186	ReturnType	static bool		3318152	1					
ANR	3318187	Identifier	is_hash		3318152	2					
ANR	3318188	ParameterList	st32 hash_code		3318152	3					
ANR	3318189	Parameter	st32 hash_code	321:20:7723:7736	3318152	0	True				
ANR	3318190	ParameterType	st32		3318152	0					
ANR	3318191	Identifier	hash_code		3318152	1					
ANR	3318192	CFGEntryNode	ENTRY		3318152		True				
ANR	3318193	CFGExitNode	EXIT		3318152		True				
ANR	3318194	Symbol	ret		3318152						
ANR	3318195	Symbol	hash_code		3318152						
ANR	3318196	Function	set_magic_value	345:0:7974:8659							
ANR	3318197	FunctionDef	"set_magic_value (ut32 * magic_value , st32 hash_code , int * err_code)"		3318196	0					
ANR	3318198	CompoundStatement		346:0:8045:8659	3318196	0					
ANR	3318199	SwitchStatement	switch ( hash_code )		3318196	0					
ANR	3318200	Condition	hash_code	347:8:8055:8063	3318196	0	True				
ANR	3318201	Identifier	hash_code		3318196	0					
ANR	3318202	CompoundStatement		2:19:20:20	3318196	1					
ANR	3318203	Label	case 232 :	348:2:8070:8078	3318196	0	True				
ANR	3318204	ExpressionStatement	* magic_value |= 1	349:3:8083:8100	3318196	1	True				
ANR	3318205	AssignmentExpression	* magic_value |= 1		3318196	0		|=			
ANR	3318206	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318207	UnaryOperator	*		3318196	0					
ANR	3318208	Identifier	magic_value		3318196	1					
ANR	3318209	PrimaryExpression	1		3318196	1					
ANR	3318210	BreakStatement	break ;	350:3:8105:8110	3318196	2	True				
ANR	3318211	Label	case 424 :	351:2:8114:8122	3318196	3	True				
ANR	3318212	ExpressionStatement	* magic_value |= 2	352:3:8127:8144	3318196	4	True				
ANR	3318213	AssignmentExpression	* magic_value |= 2		3318196	0		|=			
ANR	3318214	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318215	UnaryOperator	*		3318196	0					
ANR	3318216	Identifier	magic_value		3318196	1					
ANR	3318217	PrimaryExpression	2		3318196	1					
ANR	3318218	BreakStatement	break ;	353:3:8149:8154	3318196	5	True				
ANR	3318219	Label	case 236 :	354:2:8158:8166	3318196	6	True				
ANR	3318220	ExpressionStatement	* magic_value |= 4	355:3:8171:8188	3318196	7	True				
ANR	3318221	AssignmentExpression	* magic_value |= 4		3318196	0		|=			
ANR	3318222	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318223	UnaryOperator	*		3318196	0					
ANR	3318224	Identifier	magic_value		3318196	1					
ANR	3318225	PrimaryExpression	4		3318196	1					
ANR	3318226	BreakStatement	break ;	356:3:8193:8198	3318196	8	True				
ANR	3318227	Label	case 233 :	357:2:8202:8210	3318196	9	True				
ANR	3318228	ExpressionStatement	* magic_value |= 0x10	358:3:8215:8235	3318196	10	True				
ANR	3318229	AssignmentExpression	* magic_value |= 0x10		3318196	0		|=			
ANR	3318230	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318231	UnaryOperator	*		3318196	0					
ANR	3318232	Identifier	magic_value		3318196	1					
ANR	3318233	PrimaryExpression	0x10		3318196	1					
ANR	3318234	BreakStatement	break ;	359:3:8240:8245	3318196	11	True				
ANR	3318235	Label	case 234 :	360:2:8249:8257	3318196	12	True				
ANR	3318236	ExpressionStatement	* magic_value |= 0x20	361:3:8262:8282	3318196	13	True				
ANR	3318237	AssignmentExpression	* magic_value |= 0x20		3318196	0		|=			
ANR	3318238	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318239	UnaryOperator	*		3318196	0					
ANR	3318240	Identifier	magic_value		3318196	1					
ANR	3318241	PrimaryExpression	0x20		3318196	1					
ANR	3318242	BreakStatement	break ;	362:3:8287:8292	3318196	14	True				
ANR	3318243	Label	case 483 :	363:2:8296:8304	3318196	15	True				
ANR	3318244	ExpressionStatement	* magic_value |= 0x40	364:3:8309:8329	3318196	16	True				
ANR	3318245	AssignmentExpression	* magic_value |= 0x40		3318196	0		|=			
ANR	3318246	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318247	UnaryOperator	*		3318196	0					
ANR	3318248	Identifier	magic_value		3318196	1					
ANR	3318249	PrimaryExpression	0x40		3318196	1					
ANR	3318250	BreakStatement	break ;	365:3:8334:8339	3318196	17	True				
ANR	3318251	Label	case 484 :	366:2:8343:8351	3318196	18	True				
ANR	3318252	ExpressionStatement	* magic_value |= 0x80	367:3:8356:8376	3318196	19	True				
ANR	3318253	AssignmentExpression	* magic_value |= 0x80		3318196	0		|=			
ANR	3318254	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318255	UnaryOperator	*		3318196	0					
ANR	3318256	Identifier	magic_value		3318196	1					
ANR	3318257	PrimaryExpression	0x80		3318196	1					
ANR	3318258	BreakStatement	break ;	368:3:8381:8386	3318196	20	True				
ANR	3318259	Label	case 476 :	369:2:8390:8398	3318196	21	True				
ANR	3318260	ExpressionStatement	* magic_value |= 0x100	370:3:8403:8424	3318196	22	True				
ANR	3318261	AssignmentExpression	* magic_value |= 0x100		3318196	0		|=			
ANR	3318262	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318263	UnaryOperator	*		3318196	0					
ANR	3318264	Identifier	magic_value		3318196	1					
ANR	3318265	PrimaryExpression	0x100		3318196	1					
ANR	3318266	BreakStatement	break ;	371:3:8429:8434	3318196	23	True				
ANR	3318267	Label	case 481 :	372:2:8438:8446	3318196	24	True				
ANR	3318268	ExpressionStatement	* magic_value |= 0x200	373:3:8451:8472	3318196	25	True				
ANR	3318269	AssignmentExpression	* magic_value |= 0x200		3318196	0		|=			
ANR	3318270	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318271	UnaryOperator	*		3318196	0					
ANR	3318272	Identifier	magic_value		3318196	1					
ANR	3318273	PrimaryExpression	0x200		3318196	1					
ANR	3318274	BreakStatement	break ;	374:3:8477:8482	3318196	26	True				
ANR	3318275	Label	case 482 :	375:2:8486:8494	3318196	27	True				
ANR	3318276	ExpressionStatement	* magic_value |= 0x400	376:3:8499:8520	3318196	28	True				
ANR	3318277	AssignmentExpression	* magic_value |= 0x400		3318196	0		|=			
ANR	3318278	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318279	UnaryOperator	*		3318196	0					
ANR	3318280	Identifier	magic_value		3318196	1					
ANR	3318281	PrimaryExpression	0x400		3318196	1					
ANR	3318282	BreakStatement	break ;	377:3:8525:8530	3318196	29	True				
ANR	3318283	Label	default :	378:2:8534:8541	3318196	30	True				
ANR	3318284	Identifier	default		3318196	0					
ANR	3318285	ExpressionStatement	"fprintf ( stderr , ""invalid hash code 0x%x for magic value 0x%x\\n"" , hash_code , * magic_value )"	379:3:8546:8635	3318196	31	True				
ANR	3318286	CallExpression	"fprintf ( stderr , ""invalid hash code 0x%x for magic value 0x%x\\n"" , hash_code , * magic_value )"		3318196	0					
ANR	3318287	Callee	fprintf		3318196	0					
ANR	3318288	Identifier	fprintf		3318196	0					
ANR	3318289	ArgumentList	stderr		3318196	1					
ANR	3318290	Argument	stderr		3318196	0					
ANR	3318291	Identifier	stderr		3318196	0					
ANR	3318292	Argument	"""invalid hash code 0x%x for magic value 0x%x\\n"""		3318196	1					
ANR	3318293	PrimaryExpression	"""invalid hash code 0x%x for magic value 0x%x\\n"""		3318196	0					
ANR	3318294	Argument	hash_code		3318196	2					
ANR	3318295	Identifier	hash_code		3318196	0					
ANR	3318296	Argument	* magic_value		3318196	3					
ANR	3318297	UnaryOperationExpression	* magic_value		3318196	0					
ANR	3318298	UnaryOperator	*		3318196	0					
ANR	3318299	Identifier	magic_value		3318196	1					
ANR	3318300	ExpressionStatement	* err_code = - 1	380:3:8640:8654	3318196	32	True				
ANR	3318301	AssignmentExpression	* err_code = - 1		3318196	0		=			
ANR	3318302	UnaryOperationExpression	* err_code		3318196	0					
ANR	3318303	UnaryOperator	*		3318196	0					
ANR	3318304	Identifier	err_code		3318196	1					
ANR	3318305	UnaryOperationExpression	- 1		3318196	1					
ANR	3318306	UnaryOperator	-		3318196	0					
ANR	3318307	PrimaryExpression	1		3318196	1					
ANR	3318308	ReturnType	void		3318196	1					
ANR	3318309	Identifier	set_magic_value		3318196	2					
ANR	3318310	ParameterList	"ut32 * magic_value , st32 hash_code , int * err_code"		3318196	3					
ANR	3318311	Parameter	ut32 * magic_value	345:21:7995:8011	3318196	0	True				
ANR	3318312	ParameterType	ut32 *		3318196	0					
ANR	3318313	Identifier	magic_value		3318196	1					
ANR	3318314	Parameter	st32 hash_code	345:40:8014:8027	3318196	1	True				
ANR	3318315	ParameterType	st32		3318196	0					
ANR	3318316	Identifier	hash_code		3318196	1					
ANR	3318317	Parameter	int * err_code	345:56:8030:8042	3318196	2	True				
ANR	3318318	ParameterType	int *		3318196	0					
ANR	3318319	Identifier	err_code		3318196	1					
ANR	3318320	CFGEntryNode	ENTRY		3318196		True				
ANR	3318321	CFGExitNode	EXIT		3318196		True				
ANR	3318322	Symbol	hash_code		3318196						
ANR	3318323	Symbol	* magic_value		3318196						
ANR	3318324	Symbol	* err_code		3318196						
ANR	3318325	Symbol	magic_value		3318196						
ANR	3318326	Symbol	err_code		3318196						
ANR	3318327	Symbol	stderr		3318196						
ANR	3318328	Function	do_decode	385:0:8663:10325							
ANR	3318329	FunctionDef	"do_decode (ut32 ins_off , ut32 ins_pos , ut32 two_ins , ut32 * next_ins_pos , st32 * ins_hash_code , int * err_code)"		3318328	0					
ANR	3318330	CompoundStatement		387:0:8785:10325	3318328	0					
ANR	3318331	IdentifierDeclStatement	"st32 hash_code , hash_aux ;"	388:1:8788:8812	3318328	0	True				
ANR	3318332	IdentifierDecl	hash_code		3318328	0					
ANR	3318333	IdentifierDeclType	st32		3318328	0					
ANR	3318334	Identifier	hash_code		3318328	1					
ANR	3318335	IdentifierDecl	hash_aux		3318328	1					
ANR	3318336	IdentifierDeclType	st32		3318328	0					
ANR	3318337	Identifier	hash_aux		3318328	1					
ANR	3318338	IdentifierDeclStatement	"ut32 reg_len_dec , ins_len_dec , ret_ins_bits ;"	389:1:8815:8858	3318328	1	True				
ANR	3318339	IdentifierDecl	reg_len_dec		3318328	0					
ANR	3318340	IdentifierDeclType	ut32		3318328	0					
ANR	3318341	Identifier	reg_len_dec		3318328	1					
ANR	3318342	IdentifierDecl	ins_len_dec		3318328	1					
ANR	3318343	IdentifierDeclType	ut32		3318328	0					
ANR	3318344	Identifier	ins_len_dec		3318328	1					
ANR	3318345	IdentifierDecl	ret_ins_bits		3318328	2					
ANR	3318346	IdentifierDeclType	ut32		3318328	0					
ANR	3318347	Identifier	ret_ins_bits		3318328	1					
ANR	3318348	IdentifierDeclStatement	"char * ins_res = NULL , * ins_aux = NULL ;"	390:1:8861:8898	3318328	2	True				
ANR	3318349	IdentifierDecl	* ins_res = NULL		3318328	0					
ANR	3318350	IdentifierDeclType	char *		3318328	0					
ANR	3318351	Identifier	ins_res		3318328	1					
ANR	3318352	AssignmentExpression	* ins_res = NULL		3318328	2		=			
ANR	3318353	Identifier	NULL		3318328	0					
ANR	3318354	Identifier	NULL		3318328	1					
ANR	3318355	IdentifierDecl	* ins_aux = NULL		3318328	1					
ANR	3318356	IdentifierDeclType	char *		3318328	0					
ANR	3318357	Identifier	ins_aux		3318328	1					
ANR	3318358	AssignmentExpression	* ins_aux = NULL		3318328	2		=			
ANR	3318359	Identifier	NULL		3318328	0					
ANR	3318360	Identifier	NULL		3318328	1					
ANR	3318361	IdentifierDeclStatement	ut32 magic_value = 0x800 ;	391:1:8901:8925	3318328	3	True				
ANR	3318362	IdentifierDecl	magic_value = 0x800		3318328	0					
ANR	3318363	IdentifierDeclType	ut32		3318328	0					
ANR	3318364	Identifier	magic_value		3318328	1					
ANR	3318365	AssignmentExpression	magic_value = 0x800		3318328	2		=			
ANR	3318366	Identifier	magic_value		3318328	0					
ANR	3318367	PrimaryExpression	0x800		3318328	1					
ANR	3318368	ExpressionStatement	* next_ins_pos = 0	393:1:8929:8946	3318328	4	True				
ANR	3318369	AssignmentExpression	* next_ins_pos = 0		3318328	0		=			
ANR	3318370	UnaryOperationExpression	* next_ins_pos		3318328	0					
ANR	3318371	UnaryOperator	*		3318328	0					
ANR	3318372	Identifier	next_ins_pos		3318328	1					
ANR	3318373	PrimaryExpression	0		3318328	1					
ANR	3318374	ExpressionStatement	reg_len_dec = 0	395:1:8950:8965	3318328	5	True				
ANR	3318375	AssignmentExpression	reg_len_dec = 0		3318328	0		=			
ANR	3318376	Identifier	reg_len_dec		3318328	0					
ANR	3318377	PrimaryExpression	0		3318328	1					
ANR	3318378	ExpressionStatement	ret_ins_bits = 0	396:1:8968:8984	3318328	6	True				
ANR	3318379	AssignmentExpression	ret_ins_bits = 0		3318328	0		=			
ANR	3318380	Identifier	ret_ins_bits		3318328	0					
ANR	3318381	PrimaryExpression	0		3318328	1					
ANR	3318382	ExpressionStatement	ins_len_dec = 0	397:1:8987:9002	3318328	7	True				
ANR	3318383	AssignmentExpression	ins_len_dec = 0		3318328	0		=			
ANR	3318384	Identifier	ins_len_dec		3318328	0					
ANR	3318385	PrimaryExpression	0		3318328	1					
ANR	3318386	ExpressionStatement	hash_code = get_hash_code ( ins_pos + ins_off )	399:1:9006:9050	3318328	8	True				
ANR	3318387	AssignmentExpression	hash_code = get_hash_code ( ins_pos + ins_off )		3318328	0		=			
ANR	3318388	Identifier	hash_code		3318328	0					
ANR	3318389	CallExpression	get_hash_code ( ins_pos + ins_off )		3318328	1					
ANR	3318390	Callee	get_hash_code		3318328	0					
ANR	3318391	Identifier	get_hash_code		3318328	0					
ANR	3318392	ArgumentList	ins_pos + ins_off		3318328	1					
ANR	3318393	Argument	ins_pos + ins_off		3318328	0					
ANR	3318394	AdditiveExpression	ins_pos + ins_off		3318328	0		+			
ANR	3318395	Identifier	ins_pos		3318328	0					
ANR	3318396	Identifier	ins_off		3318328	1					
ANR	3318397	IfStatement	if ( is_hash ( hash_code ) )		3318328	9					
ANR	3318398	Condition	is_hash ( hash_code )	400:5:9057:9074	3318328	0	True				
ANR	3318399	CallExpression	is_hash ( hash_code )		3318328	0					
ANR	3318400	Callee	is_hash		3318328	0					
ANR	3318401	Identifier	is_hash		3318328	0					
ANR	3318402	ArgumentList	hash_code		3318328	1					
ANR	3318403	Argument	hash_code		3318328	0					
ANR	3318404	Identifier	hash_code		3318328	0					
ANR	3318405	CompoundStatement		14:25:291:291	3318328	1					
ANR	3318406	ExpressionStatement	hash_aux = hash_code	401:2:9081:9101	3318328	0	True				
ANR	3318407	AssignmentExpression	hash_aux = hash_code		3318328	0		=			
ANR	3318408	Identifier	hash_aux		3318328	0					
ANR	3318409	Identifier	hash_code		3318328	1					
ANR	3318410	ExpressionStatement	ins_off ++	402:2:9105:9114	3318328	1	True				
ANR	3318411	PostIncDecOperationExpression	ins_off ++		3318328	0					
ANR	3318412	Identifier	ins_off		3318328	0					
ANR	3318413	IncDec	++		3318328	1					
ANR	3318414	ExpressionStatement	"set_magic_value ( & magic_value , hash_code , err_code )"	403:2:9118:9168	3318328	2	True				
ANR	3318415	CallExpression	"set_magic_value ( & magic_value , hash_code , err_code )"		3318328	0					
ANR	3318416	Callee	set_magic_value		3318328	0					
ANR	3318417	Identifier	set_magic_value		3318328	0					
ANR	3318418	ArgumentList	& magic_value		3318328	1					
ANR	3318419	Argument	& magic_value		3318328	0					
ANR	3318420	UnaryOperationExpression	& magic_value		3318328	0					
ANR	3318421	UnaryOperator	&		3318328	0					
ANR	3318422	Identifier	magic_value		3318328	1					
ANR	3318423	Argument	hash_code		3318328	1					
ANR	3318424	Identifier	hash_code		3318328	0					
ANR	3318425	Argument	err_code		3318328	2					
ANR	3318426	Identifier	err_code		3318328	0					
ANR	3318427	IfStatement	if ( * err_code < 0 )		3318328	3					
ANR	3318428	Condition	* err_code < 0	404:6:9176:9188	3318328	0	True				
ANR	3318429	RelationalExpression	* err_code < 0		3318328	0		<			
ANR	3318430	UnaryOperationExpression	* err_code		3318328	0					
ANR	3318431	UnaryOperator	*		3318328	0					
ANR	3318432	Identifier	err_code		3318328	1					
ANR	3318433	PrimaryExpression	0		3318328	1					
ANR	3318434	CompoundStatement		18:21:405:405	3318328	1					
ANR	3318435	ReturnStatement	return NULL ;	405:3:9196:9207	3318328	0	True				
ANR	3318436	Identifier	NULL		3318328	0					
ANR	3318437	ExpressionStatement	hash_code = get_hash_code ( ins_pos + ins_off )	407:2:9215:9259	3318328	4	True				
ANR	3318438	AssignmentExpression	hash_code = get_hash_code ( ins_pos + ins_off )		3318328	0		=			
ANR	3318439	Identifier	hash_code		3318328	0					
ANR	3318440	CallExpression	get_hash_code ( ins_pos + ins_off )		3318328	1					
ANR	3318441	Callee	get_hash_code		3318328	0					
ANR	3318442	Identifier	get_hash_code		3318328	0					
ANR	3318443	ArgumentList	ins_pos + ins_off		3318328	1					
ANR	3318444	Argument	ins_pos + ins_off		3318328	0					
ANR	3318445	AdditiveExpression	ins_pos + ins_off		3318328	0		+			
ANR	3318446	Identifier	ins_pos		3318328	0					
ANR	3318447	Identifier	ins_off		3318328	1					
ANR	3318448	ExpressionStatement	* next_ins_pos = 1	408:2:9263:9280	3318328	5	True				
ANR	3318449	AssignmentExpression	* next_ins_pos = 1		3318328	0		=			
ANR	3318450	UnaryOperationExpression	* next_ins_pos		3318328	0					
ANR	3318451	UnaryOperator	*		3318328	0					
ANR	3318452	Identifier	next_ins_pos		3318328	1					
ANR	3318453	PrimaryExpression	1		3318328	1					
ANR	3318454	ElseStatement	else		3318328	0					
ANR	3318455	CompoundStatement		23:8:504:504	3318328	0					
ANR	3318456	ExpressionStatement	hash_aux = 0x223	410:2:9294:9310	3318328	0	True				
ANR	3318457	AssignmentExpression	hash_aux = 0x223		3318328	0		=			
ANR	3318458	Identifier	hash_aux		3318328	0					
ANR	3318459	PrimaryExpression	0x223		3318328	1					
ANR	3318460	IfStatement	if ( ins_hash_code != NULL )		3318328	10					
ANR	3318461	Condition	ins_hash_code != NULL	413:5:9321:9341	3318328	0	True				
ANR	3318462	EqualityExpression	ins_hash_code != NULL		3318328	0		!=			
ANR	3318463	Identifier	ins_hash_code		3318328	0					
ANR	3318464	Identifier	NULL		3318328	1					
ANR	3318465	CompoundStatement		27:28:558:558	3318328	1					
ANR	3318466	ExpressionStatement	* ins_hash_code = hash_code	414:2:9348:9374	3318328	0	True				
ANR	3318467	AssignmentExpression	* ins_hash_code = hash_code		3318328	0		=			
ANR	3318468	UnaryOperationExpression	* ins_hash_code		3318328	0					
ANR	3318469	UnaryOperator	*		3318328	0					
ANR	3318470	Identifier	ins_hash_code		3318328	1					
ANR	3318471	Identifier	hash_code		3318328	1					
ANR	3318472	IfStatement	if ( C55PLUS_DEBUG )		3318328	11					
ANR	3318473	Condition	C55PLUS_DEBUG	417:5:9385:9397	3318328	0	True				
ANR	3318474	Identifier	C55PLUS_DEBUG		3318328	0					
ANR	3318475	CompoundStatement		31:20:614:614	3318328	1					
ANR	3318476	ExpressionStatement	"printf ( ""MAGIC VALUE 0x%x\\n"" , 0x800 )"	418:2:9404:9439	3318328	0	True				
ANR	3318477	CallExpression	"printf ( ""MAGIC VALUE 0x%x\\n"" , 0x800 )"		3318328	0					
ANR	3318478	Callee	printf		3318328	0					
ANR	3318479	Identifier	printf		3318328	0					
ANR	3318480	ArgumentList	"""MAGIC VALUE 0x%x\\n"""		3318328	1					
ANR	3318481	Argument	"""MAGIC VALUE 0x%x\\n"""		3318328	0					
ANR	3318482	PrimaryExpression	"""MAGIC VALUE 0x%x\\n"""		3318328	0					
ANR	3318483	Argument	0x800		3318328	1					
ANR	3318484	PrimaryExpression	0x800		3318328	0					
ANR	3318485	IfStatement	if ( hash_aux == 0x1E1 || hash_aux == 0x1E2 )		3318328	12					
ANR	3318486	Condition	hash_aux == 0x1E1 || hash_aux == 0x1E2	421:5:9450:9487	3318328	0	True				
ANR	3318487	OrExpression	hash_aux == 0x1E1 || hash_aux == 0x1E2		3318328	0		||			
ANR	3318488	EqualityExpression	hash_aux == 0x1E1		3318328	0		==			
ANR	3318489	Identifier	hash_aux		3318328	0					
ANR	3318490	PrimaryExpression	0x1E1		3318328	1					
ANR	3318491	EqualityExpression	hash_aux == 0x1E2		3318328	1		==			
ANR	3318492	Identifier	hash_aux		3318328	0					
ANR	3318493	PrimaryExpression	0x1E2		3318328	1					
ANR	3318494	CompoundStatement		35:45:704:704	3318328	1					
ANR	3318495	ExpressionStatement	"ins_aux = decode_ins ( hash_aux , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"	422:2:9494:9620	3318328	0	True				
ANR	3318496	AssignmentExpression	"ins_aux = decode_ins ( hash_aux , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"		3318328	0		=			
ANR	3318497	Identifier	ins_aux		3318328	0					
ANR	3318498	CallExpression	"decode_ins ( hash_aux , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"		3318328	1					
ANR	3318499	Callee	decode_ins		3318328	0					
ANR	3318500	Identifier	decode_ins		3318328	0					
ANR	3318501	ArgumentList	hash_aux		3318328	1					
ANR	3318502	Argument	hash_aux		3318328	0					
ANR	3318503	Identifier	hash_aux		3318328	0					
ANR	3318504	Argument	ins_pos		3318328	1					
ANR	3318505	Identifier	ins_pos		3318328	0					
ANR	3318506	Argument	ins_off		3318328	2					
ANR	3318507	Identifier	ins_off		3318328	0					
ANR	3318508	Argument	& ins_len_dec		3318328	3					
ANR	3318509	UnaryOperationExpression	& ins_len_dec		3318328	0					
ANR	3318510	UnaryOperator	&		3318328	0					
ANR	3318511	Identifier	ins_len_dec		3318328	1					
ANR	3318512	Argument	& reg_len_dec		3318328	4					
ANR	3318513	UnaryOperationExpression	& reg_len_dec		3318328	0					
ANR	3318514	UnaryOperator	&		3318328	0					
ANR	3318515	Identifier	reg_len_dec		3318328	1					
ANR	3318516	Argument	& ret_ins_bits		3318328	5					
ANR	3318517	UnaryOperationExpression	& ret_ins_bits		3318328	0					
ANR	3318518	UnaryOperator	&		3318328	0					
ANR	3318519	Identifier	ret_ins_bits		3318328	1					
ANR	3318520	Argument	magic_value		3318328	6					
ANR	3318521	Identifier	magic_value		3318328	0					
ANR	3318522	Argument	two_ins		3318328	7					
ANR	3318523	Identifier	two_ins		3318328	0					
ANR	3318524	Argument	err_code		3318328	8					
ANR	3318525	Identifier	err_code		3318328	0					
ANR	3318526	IfStatement	if ( * err_code < 0 )		3318328	1					
ANR	3318527	Condition	* err_code < 0	424:5:9627:9639	3318328	0	True				
ANR	3318528	RelationalExpression	* err_code < 0		3318328	0		<			
ANR	3318529	UnaryOperationExpression	* err_code		3318328	0					
ANR	3318530	UnaryOperator	*		3318328	0					
ANR	3318531	Identifier	err_code		3318328	1					
ANR	3318532	PrimaryExpression	0		3318328	1					
ANR	3318533	CompoundStatement		38:20:856:856	3318328	1					
ANR	3318534	ReturnStatement	return NULL ;	425:3:9647:9658	3318328	0	True				
ANR	3318535	Identifier	NULL		3318328	0					
ANR	3318536	ExpressionStatement	"ins_aux = strcat_dup ( ins_aux , "" "" , 1 )"	427:2:9666:9703	3318328	2	True				
ANR	3318537	AssignmentExpression	"ins_aux = strcat_dup ( ins_aux , "" "" , 1 )"		3318328	0		=			
ANR	3318538	Identifier	ins_aux		3318328	0					
ANR	3318539	CallExpression	"strcat_dup ( ins_aux , "" "" , 1 )"		3318328	1					
ANR	3318540	Callee	strcat_dup		3318328	0					
ANR	3318541	Identifier	strcat_dup		3318328	0					
ANR	3318542	ArgumentList	ins_aux		3318328	1					
ANR	3318543	Argument	ins_aux		3318328	0					
ANR	3318544	Identifier	ins_aux		3318328	0					
ANR	3318545	Argument	""" """		3318328	1					
ANR	3318546	PrimaryExpression	""" """		3318328	0					
ANR	3318547	Argument	1		3318328	2					
ANR	3318548	PrimaryExpression	1		3318328	0					
ANR	3318549	IfStatement	if ( hash_code == 0x223 )		3318328	13					
ANR	3318550	Condition	hash_code == 0x223	430:5:9714:9731	3318328	0	True				
ANR	3318551	EqualityExpression	hash_code == 0x223		3318328	0		==			
ANR	3318552	Identifier	hash_code		3318328	0					
ANR	3318553	PrimaryExpression	0x223		3318328	1					
ANR	3318554	CompoundStatement		44:25:948:948	3318328	1					
ANR	3318555	ExpressionStatement	"ins_res = strcat_dup ( ins_aux , "".byte 0x"" , 1 )"	431:2:9738:9782	3318328	0	True				
ANR	3318556	AssignmentExpression	"ins_res = strcat_dup ( ins_aux , "".byte 0x"" , 1 )"		3318328	0		=			
ANR	3318557	Identifier	ins_res		3318328	0					
ANR	3318558	CallExpression	"strcat_dup ( ins_aux , "".byte 0x"" , 1 )"		3318328	1					
ANR	3318559	Callee	strcat_dup		3318328	0					
ANR	3318560	Identifier	strcat_dup		3318328	0					
ANR	3318561	ArgumentList	ins_aux		3318328	1					
ANR	3318562	Argument	ins_aux		3318328	0					
ANR	3318563	Identifier	ins_aux		3318328	0					
ANR	3318564	Argument	""".byte 0x"""		3318328	1					
ANR	3318565	PrimaryExpression	""".byte 0x"""		3318328	0					
ANR	3318566	Argument	1		3318328	2					
ANR	3318567	PrimaryExpression	1		3318328	0					
ANR	3318568	ExpressionStatement	"ins_aux = get_hex_str ( get_ins_part ( ins_pos , 1 ) )"	432:2:9786:9833	3318328	1	True				
ANR	3318569	AssignmentExpression	"ins_aux = get_hex_str ( get_ins_part ( ins_pos , 1 ) )"		3318328	0		=			
ANR	3318570	Identifier	ins_aux		3318328	0					
ANR	3318571	CallExpression	"get_hex_str ( get_ins_part ( ins_pos , 1 ) )"		3318328	1					
ANR	3318572	Callee	get_hex_str		3318328	0					
ANR	3318573	Identifier	get_hex_str		3318328	0					
ANR	3318574	ArgumentList	"get_ins_part ( ins_pos , 1 )"		3318328	1					
ANR	3318575	Argument	"get_ins_part ( ins_pos , 1 )"		3318328	0					
ANR	3318576	CallExpression	"get_ins_part ( ins_pos , 1 )"		3318328	0					
ANR	3318577	Callee	get_ins_part		3318328	0					
ANR	3318578	Identifier	get_ins_part		3318328	0					
ANR	3318579	ArgumentList	ins_pos		3318328	1					
ANR	3318580	Argument	ins_pos		3318328	0					
ANR	3318581	Identifier	ins_pos		3318328	0					
ANR	3318582	Argument	1		3318328	1					
ANR	3318583	PrimaryExpression	1		3318328	0					
ANR	3318584	ExpressionStatement	"ins_res = strcat_dup ( ins_res , ins_aux , 2 )"	433:2:9837:9878	3318328	2	True				
ANR	3318585	AssignmentExpression	"ins_res = strcat_dup ( ins_res , ins_aux , 2 )"		3318328	0		=			
ANR	3318586	Identifier	ins_res		3318328	0					
ANR	3318587	CallExpression	"strcat_dup ( ins_res , ins_aux , 2 )"		3318328	1					
ANR	3318588	Callee	strcat_dup		3318328	0					
ANR	3318589	Identifier	strcat_dup		3318328	0					
ANR	3318590	ArgumentList	ins_res		3318328	1					
ANR	3318591	Argument	ins_res		3318328	0					
ANR	3318592	Identifier	ins_res		3318328	0					
ANR	3318593	Argument	ins_aux		3318328	1					
ANR	3318594	Identifier	ins_aux		3318328	0					
ANR	3318595	Argument	2		3318328	2					
ANR	3318596	PrimaryExpression	2		3318328	0					
ANR	3318597	ExpressionStatement	* next_ins_pos = * next_ins_pos + 1	434:2:9882:9915	3318328	3	True				
ANR	3318598	AssignmentExpression	* next_ins_pos = * next_ins_pos + 1		3318328	0		=			
ANR	3318599	UnaryOperationExpression	* next_ins_pos		3318328	0					
ANR	3318600	UnaryOperator	*		3318328	0					
ANR	3318601	Identifier	next_ins_pos		3318328	1					
ANR	3318602	AdditiveExpression	* next_ins_pos + 1		3318328	1		+			
ANR	3318603	UnaryOperationExpression	* next_ins_pos		3318328	0					
ANR	3318604	UnaryOperator	*		3318328	0					
ANR	3318605	Identifier	next_ins_pos		3318328	1					
ANR	3318606	PrimaryExpression	1		3318328	1					
ANR	3318607	ElseStatement	else		3318328	0					
ANR	3318608	CompoundStatement		49:8:1139:1139	3318328	0					
ANR	3318609	ExpressionStatement	free ( ins_aux )	436:2:9929:9943	3318328	0	True				
ANR	3318610	CallExpression	free ( ins_aux )		3318328	0					
ANR	3318611	Callee	free		3318328	0					
ANR	3318612	Identifier	free		3318328	0					
ANR	3318613	ArgumentList	ins_aux		3318328	1					
ANR	3318614	Argument	ins_aux		3318328	0					
ANR	3318615	Identifier	ins_aux		3318328	0					
ANR	3318616	ExpressionStatement	"ins_aux = decode_ins ( hash_code , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"	437:2:9947:10074	3318328	1	True				
ANR	3318617	AssignmentExpression	"ins_aux = decode_ins ( hash_code , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"		3318328	0		=			
ANR	3318618	Identifier	ins_aux		3318328	0					
ANR	3318619	CallExpression	"decode_ins ( hash_code , ins_pos , ins_off , & ins_len_dec , & reg_len_dec , & ret_ins_bits , magic_value , two_ins , err_code )"		3318328	1					
ANR	3318620	Callee	decode_ins		3318328	0					
ANR	3318621	Identifier	decode_ins		3318328	0					
ANR	3318622	ArgumentList	hash_code		3318328	1					
ANR	3318623	Argument	hash_code		3318328	0					
ANR	3318624	Identifier	hash_code		3318328	0					
ANR	3318625	Argument	ins_pos		3318328	1					
ANR	3318626	Identifier	ins_pos		3318328	0					
ANR	3318627	Argument	ins_off		3318328	2					
ANR	3318628	Identifier	ins_off		3318328	0					
ANR	3318629	Argument	& ins_len_dec		3318328	3					
ANR	3318630	UnaryOperationExpression	& ins_len_dec		3318328	0					
ANR	3318631	UnaryOperator	&		3318328	0					
ANR	3318632	Identifier	ins_len_dec		3318328	1					
ANR	3318633	Argument	& reg_len_dec		3318328	4					
ANR	3318634	UnaryOperationExpression	& reg_len_dec		3318328	0					
ANR	3318635	UnaryOperator	&		3318328	0					
ANR	3318636	Identifier	reg_len_dec		3318328	1					
ANR	3318637	Argument	& ret_ins_bits		3318328	5					
ANR	3318638	UnaryOperationExpression	& ret_ins_bits		3318328	0					
ANR	3318639	UnaryOperator	&		3318328	0					
ANR	3318640	Identifier	ret_ins_bits		3318328	1					
ANR	3318641	Argument	magic_value		3318328	6					
ANR	3318642	Identifier	magic_value		3318328	0					
ANR	3318643	Argument	two_ins		3318328	7					
ANR	3318644	Identifier	two_ins		3318328	0					
ANR	3318645	Argument	err_code		3318328	8					
ANR	3318646	Identifier	err_code		3318328	0					
ANR	3318647	IfStatement	if ( * err_code < 0 )		3318328	2					
ANR	3318648	Condition	* err_code < 0	439:6:10082:10094	3318328	0	True				
ANR	3318649	RelationalExpression	* err_code < 0		3318328	0		<			
ANR	3318650	UnaryOperationExpression	* err_code		3318328	0					
ANR	3318651	UnaryOperator	*		3318328	0					
ANR	3318652	Identifier	err_code		3318328	1					
ANR	3318653	PrimaryExpression	0		3318328	1					
ANR	3318654	CompoundStatement		53:21:1311:1311	3318328	1					
ANR	3318655	ExpressionStatement	free ( ins_aux )	440:3:10102:10116	3318328	0	True				
ANR	3318656	CallExpression	free ( ins_aux )		3318328	0					
ANR	3318657	Callee	free		3318328	0					
ANR	3318658	Identifier	free		3318328	0					
ANR	3318659	ArgumentList	ins_aux		3318328	1					
ANR	3318660	Argument	ins_aux		3318328	0					
ANR	3318661	Identifier	ins_aux		3318328	0					
ANR	3318662	ReturnStatement	return NULL ;	441:3:10121:10132	3318328	1	True				
ANR	3318663	Identifier	NULL		3318328	0					
ANR	3318664	ExpressionStatement	"ins_res = strcat_dup ( ins_aux , ins_res , 1 )"	443:2:10140:10181	3318328	3	True				
ANR	3318665	AssignmentExpression	"ins_res = strcat_dup ( ins_aux , ins_res , 1 )"		3318328	0		=			
ANR	3318666	Identifier	ins_res		3318328	0					
ANR	3318667	CallExpression	"strcat_dup ( ins_aux , ins_res , 1 )"		3318328	1					
ANR	3318668	Callee	strcat_dup		3318328	0					
ANR	3318669	Identifier	strcat_dup		3318328	0					
ANR	3318670	ArgumentList	ins_aux		3318328	1					
ANR	3318671	Argument	ins_aux		3318328	0					
ANR	3318672	Identifier	ins_aux		3318328	0					
ANR	3318673	Argument	ins_res		3318328	1					
ANR	3318674	Identifier	ins_res		3318328	0					
ANR	3318675	Argument	1		3318328	2					
ANR	3318676	PrimaryExpression	1		3318328	0					
ANR	3318677	ExpressionStatement	* next_ins_pos += ins_len_dec	446:2:10258:10286	3318328	4	True				
ANR	3318678	AssignmentExpression	* next_ins_pos += ins_len_dec		3318328	0		+=			
ANR	3318679	UnaryOperationExpression	* next_ins_pos		3318328	0					
ANR	3318680	UnaryOperator	*		3318328	0					
ANR	3318681	Identifier	next_ins_pos		3318328	1					
ANR	3318682	Identifier	ins_len_dec		3318328	1					
ANR	3318683	ReturnStatement	return ins_res ;	449:1:10309:10323	3318328	14	True				
ANR	3318684	Identifier	ins_res		3318328	0					
ANR	3318685	ReturnType	static char *		3318328	1					
ANR	3318686	Identifier	do_decode		3318328	2					
ANR	3318687	ParameterList	"ut32 ins_off , ut32 ins_pos , ut32 two_ins , ut32 * next_ins_pos , st32 * ins_hash_code , int * err_code"		3318328	3					
ANR	3318688	Parameter	ut32 ins_off	385:23:8686:8697	3318328	0	True				
ANR	3318689	ParameterType	ut32		3318328	0					
ANR	3318690	Identifier	ins_off		3318328	1					
ANR	3318691	Parameter	ut32 ins_pos	385:37:8700:8711	3318328	1	True				
ANR	3318692	ParameterType	ut32		3318328	0					
ANR	3318693	Identifier	ins_pos		3318328	1					
ANR	3318694	Parameter	ut32 two_ins	385:51:8714:8725	3318328	2	True				
ANR	3318695	ParameterType	ut32		3318328	0					
ANR	3318696	Identifier	two_ins		3318328	1					
ANR	3318697	Parameter	ut32 * next_ins_pos	385:65:8728:8745	3318328	3	True				
ANR	3318698	ParameterType	ut32 *		3318328	0					
ANR	3318699	Identifier	next_ins_pos		3318328	1					
ANR	3318700	Parameter	st32 * ins_hash_code	386:1:8749:8767	3318328	4	True				
ANR	3318701	ParameterType	st32 *		3318328	0					
ANR	3318702	Identifier	ins_hash_code		3318328	1					
ANR	3318703	Parameter	int * err_code	386:22:8770:8782	3318328	5	True				
ANR	3318704	ParameterType	int *		3318328	0					
ANR	3318705	Identifier	err_code		3318328	1					
ANR	3318706	CFGEntryNode	ENTRY		3318328		True				
ANR	3318707	CFGExitNode	EXIT		3318328		True				
ANR	3318708	Symbol	* ins_hash_code		3318328						
ANR	3318709	Symbol	next_ins_pos		3318328						
ANR	3318710	Symbol	err_code		3318328						
ANR	3318711	Symbol	hash_aux		3318328						
ANR	3318712	Symbol	get_hash_code		3318328						
ANR	3318713	Symbol	& ins_len_dec		3318328						
ANR	3318714	Symbol	ins_hash_code		3318328						
ANR	3318715	Symbol	hash_code		3318328						
ANR	3318716	Symbol	is_hash		3318328						
ANR	3318717	Symbol	* err_code		3318328						
ANR	3318718	Symbol	two_ins		3318328						
ANR	3318719	Symbol	ins_aux		3318328						
ANR	3318720	Symbol	ins_len_dec		3318328						
ANR	3318721	Symbol	* next_ins_pos		3318328						
ANR	3318722	Symbol	get_hex_str		3318328						
ANR	3318723	Symbol	strcat_dup		3318328						
ANR	3318724	Symbol	C55PLUS_DEBUG		3318328						
ANR	3318725	Symbol	NULL		3318328						
ANR	3318726	Symbol	ret_ins_bits		3318328						
ANR	3318727	Symbol	decode_ins		3318328						
ANR	3318728	Symbol	ins_pos		3318328						
ANR	3318729	Symbol	ins_res		3318328						
ANR	3318730	Symbol	& ret_ins_bits		3318328						
ANR	3318731	Symbol	reg_len_dec		3318328						
ANR	3318732	Symbol	& magic_value		3318328						
ANR	3318733	Symbol	& reg_len_dec		3318328						
ANR	3318734	Symbol	magic_value		3318328						
ANR	3318735	Symbol	get_ins_part		3318328						
ANR	3318736	Symbol	ins_off		3318328						
ANR	3318737	Function	c55plus_decode	452:0:10328:11804							
ANR	3318738	FunctionDef	"c55plus_decode (ut32 ins_pos , ut32 * next_ins_pos)"		3318737	0					
ANR	3318739	CompoundStatement		452:55:10383:11804	3318737	0					
ANR	3318740	IdentifierDeclStatement	"ut8 opcode , two_ins = 0 ;"	453:1:10386:10409	3318737	0	True				
ANR	3318741	IdentifierDecl	opcode		3318737	0					
ANR	3318742	IdentifierDeclType	ut8		3318737	0					
ANR	3318743	Identifier	opcode		3318737	1					
ANR	3318744	IdentifierDecl	two_ins = 0		3318737	1					
ANR	3318745	IdentifierDeclType	ut8		3318737	0					
ANR	3318746	Identifier	two_ins		3318737	1					
ANR	3318747	AssignmentExpression	two_ins = 0		3318737	2		=			
ANR	3318748	Identifier	two_ins		3318737	0					
ANR	3318749	PrimaryExpression	0		3318737	1					
ANR	3318750	IdentifierDeclStatement	"ut32 next_ins1_pos , next_ins2_pos ;"	454:1:10412:10445	3318737	1	True				
ANR	3318751	IdentifierDecl	next_ins1_pos		3318737	0					
ANR	3318752	IdentifierDeclType	ut32		3318737	0					
ANR	3318753	Identifier	next_ins1_pos		3318737	1					
ANR	3318754	IdentifierDecl	next_ins2_pos		3318737	1					
ANR	3318755	IdentifierDeclType	ut32		3318737	0					
ANR	3318756	Identifier	next_ins2_pos		3318737	1					
ANR	3318757	IdentifierDeclStatement	st32 hash_code ;	455:1:10448:10462	3318737	2	True				
ANR	3318758	IdentifierDecl	hash_code		3318737	0					
ANR	3318759	IdentifierDeclType	st32		3318737	0					
ANR	3318760	Identifier	hash_code		3318737	1					
ANR	3318761	IdentifierDeclStatement	"char * ins1 , * ins2 , * aux , * ins_res ;"	456:1:10465:10498	3318737	3	True				
ANR	3318762	IdentifierDecl	* ins1		3318737	0					
ANR	3318763	IdentifierDeclType	char *		3318737	0					
ANR	3318764	Identifier	ins1		3318737	1					
ANR	3318765	IdentifierDecl	* ins2		3318737	1					
ANR	3318766	IdentifierDeclType	char *		3318737	0					
ANR	3318767	Identifier	ins2		3318737	1					
ANR	3318768	IdentifierDecl	* aux		3318737	2					
ANR	3318769	IdentifierDeclType	char *		3318737	0					
ANR	3318770	Identifier	aux		3318737	1					
ANR	3318771	IdentifierDecl	* ins_res		3318737	3					
ANR	3318772	IdentifierDeclType	char *		3318737	0					
ANR	3318773	Identifier	ins_res		3318737	1					
ANR	3318774	IdentifierDeclStatement	int err_code ;	457:1:10501:10513	3318737	4	True				
ANR	3318775	IdentifierDecl	err_code		3318737	0					
ANR	3318776	IdentifierDeclType	int		3318737	0					
ANR	3318777	Identifier	err_code		3318737	1					
ANR	3318778	IfStatement	if ( ins_pos >= ins_buff_len )		3318737	5					
ANR	3318779	Condition	ins_pos >= ins_buff_len	459:5:10521:10543	3318737	0	True				
ANR	3318780	RelationalExpression	ins_pos >= ins_buff_len		3318737	0		>=			
ANR	3318781	Identifier	ins_pos		3318737	0					
ANR	3318782	Identifier	ins_buff_len		3318737	1					
ANR	3318783	CompoundStatement		8:30:162:162	3318737	1					
ANR	3318784	ReturnStatement	return NULL ;	460:2:10550:10561	3318737	0	True				
ANR	3318785	Identifier	NULL		3318737	0					
ANR	3318786	ExpressionStatement	ins_res = NULL	462:1:10567:10581	3318737	6	True				
ANR	3318787	AssignmentExpression	ins_res = NULL		3318737	0		=			
ANR	3318788	Identifier	ins_res		3318737	0					
ANR	3318789	Identifier	NULL		3318737	1					
ANR	3318790	ExpressionStatement	err_code = 0	463:1:10584:10596	3318737	7	True				
ANR	3318791	AssignmentExpression	err_code = 0		3318737	0		=			
ANR	3318792	Identifier	err_code		3318737	0					
ANR	3318793	PrimaryExpression	0		3318737	1					
ANR	3318794	ExpressionStatement	"opcode = get_ins_part ( ins_pos , 1 )"	465:1:10600:10633	3318737	8	True				
ANR	3318795	AssignmentExpression	"opcode = get_ins_part ( ins_pos , 1 )"		3318737	0		=			
ANR	3318796	Identifier	opcode		3318737	0					
ANR	3318797	CallExpression	"get_ins_part ( ins_pos , 1 )"		3318737	1					
ANR	3318798	Callee	get_ins_part		3318737	0					
ANR	3318799	Identifier	get_ins_part		3318737	0					
ANR	3318800	ArgumentList	ins_pos		3318737	1					
ANR	3318801	Argument	ins_pos		3318737	0					
ANR	3318802	Identifier	ins_pos		3318737	0					
ANR	3318803	Argument	1		3318737	1					
ANR	3318804	PrimaryExpression	1		3318737	0					
ANR	3318805	IfStatement	if ( ( opcode & 0xF0 ) == 0x30 )		3318737	9					
ANR	3318806	Condition	( opcode & 0xF0 ) == 0x30	466:5:10640:10662	3318737	0	True				
ANR	3318807	EqualityExpression	( opcode & 0xF0 ) == 0x30		3318737	0		==			
ANR	3318808	BitAndExpression	opcode & 0xF0		3318737	0		&			
ANR	3318809	Identifier	opcode		3318737	0					
ANR	3318810	PrimaryExpression	0xF0		3318737	1					
ANR	3318811	PrimaryExpression	0x30		3318737	1					
ANR	3318812	CompoundStatement		15:30:281:281	3318737	1					
ANR	3318813	ExpressionStatement	two_ins = opcode & 0x0F	467:2:10669:10692	3318737	0	True				
ANR	3318814	AssignmentExpression	two_ins = opcode & 0x0F		3318737	0		=			
ANR	3318815	Identifier	two_ins		3318737	0					
ANR	3318816	BitAndExpression	opcode & 0x0F		3318737	1		&			
ANR	3318817	Identifier	opcode		3318737	0					
ANR	3318818	PrimaryExpression	0x0F		3318737	1					
ANR	3318819	IfStatement	if ( two_ins < 4 )		3318737	1					
ANR	3318820	Condition	two_ins < 4	468:5:10699:10709	3318737	0	True				
ANR	3318821	RelationalExpression	two_ins < 4		3318737	0		<			
ANR	3318822	Identifier	two_ins		3318737	0					
ANR	3318823	PrimaryExpression	4		3318737	1					
ANR	3318824	CompoundStatement		17:18:328:328	3318737	1					
ANR	3318825	ExpressionStatement	two_ins += 0xF	469:3:10717:10731	3318737	0	True				
ANR	3318826	AssignmentExpression	two_ins += 0xF		3318737	0		+=			
ANR	3318827	Identifier	two_ins		3318737	0					
ANR	3318828	PrimaryExpression	0xF		3318737	1					
ANR	3318829	ElseStatement	else		3318737	0					
ANR	3318830	CompoundStatement		20:8:361:361	3318737	0					
ANR	3318831	ExpressionStatement	two_ins = 0	472:2:10749:10760	3318737	0	True				
ANR	3318832	AssignmentExpression	two_ins = 0		3318737	0		=			
ANR	3318833	Identifier	two_ins		3318737	0					
ANR	3318834	PrimaryExpression	0		3318737	1					
ANR	3318835	IfStatement	if ( two_ins )		3318737	10					
ANR	3318836	Condition	two_ins	476:5:10802:10808	3318737	0	True				
ANR	3318837	Identifier	two_ins		3318737	0					
ANR	3318838	CompoundStatement		25:14:427:427	3318737	1					
ANR	3318839	ExpressionStatement	"ins1 = do_decode ( 1 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"	477:2:10815:10891	3318737	0	True				
ANR	3318840	AssignmentExpression	"ins1 = do_decode ( 1 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"		3318737	0		=			
ANR	3318841	Identifier	ins1		3318737	0					
ANR	3318842	CallExpression	"do_decode ( 1 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"		3318737	1					
ANR	3318843	Callee	do_decode		3318737	0					
ANR	3318844	Identifier	do_decode		3318737	0					
ANR	3318845	ArgumentList	1		3318737	1					
ANR	3318846	Argument	1		3318737	0					
ANR	3318847	PrimaryExpression	1		3318737	0					
ANR	3318848	Argument	ins_pos		3318737	1					
ANR	3318849	Identifier	ins_pos		3318737	0					
ANR	3318850	Argument	two_ins		3318737	2					
ANR	3318851	Identifier	two_ins		3318737	0					
ANR	3318852	Argument	& next_ins1_pos		3318737	3					
ANR	3318853	UnaryOperationExpression	& next_ins1_pos		3318737	0					
ANR	3318854	UnaryOperator	&		3318737	0					
ANR	3318855	Identifier	next_ins1_pos		3318737	1					
ANR	3318856	Argument	& hash_code		3318737	4					
ANR	3318857	UnaryOperationExpression	& hash_code		3318737	0					
ANR	3318858	UnaryOperator	&		3318737	0					
ANR	3318859	Identifier	hash_code		3318737	1					
ANR	3318860	Argument	& err_code		3318737	5					
ANR	3318861	UnaryOperationExpression	& err_code		3318737	0					
ANR	3318862	UnaryOperator	&		3318737	0					
ANR	3318863	Identifier	err_code		3318737	1					
ANR	3318864	IfStatement	if ( err_code < 0 )		3318737	1					
ANR	3318865	Condition	err_code < 0	478:6:10899:10910	3318737	0	True				
ANR	3318866	RelationalExpression	err_code < 0		3318737	0		<			
ANR	3318867	Identifier	err_code		3318737	0					
ANR	3318868	PrimaryExpression	0		3318737	1					
ANR	3318869	CompoundStatement		27:20:529:529	3318737	1					
ANR	3318870	ExpressionStatement	free ( ins1 )	479:3:10918:10929	3318737	0	True				
ANR	3318871	CallExpression	free ( ins1 )		3318737	0					
ANR	3318872	Callee	free		3318737	0					
ANR	3318873	Identifier	free		3318737	0					
ANR	3318874	ArgumentList	ins1		3318737	1					
ANR	3318875	Argument	ins1		3318737	0					
ANR	3318876	Identifier	ins1		3318737	0					
ANR	3318877	ReturnStatement	return NULL ;	480:3:10934:10945	3318737	1	True				
ANR	3318878	Identifier	NULL		3318737	0					
ANR	3318879	ExpressionStatement	"ins2 = do_decode ( next_ins1_pos + 1 , ins_pos , two_ins , & next_ins2_pos , NULL , & err_code )"	482:2:10953:11039	3318737	2	True				
ANR	3318880	AssignmentExpression	"ins2 = do_decode ( next_ins1_pos + 1 , ins_pos , two_ins , & next_ins2_pos , NULL , & err_code )"		3318737	0		=			
ANR	3318881	Identifier	ins2		3318737	0					
ANR	3318882	CallExpression	"do_decode ( next_ins1_pos + 1 , ins_pos , two_ins , & next_ins2_pos , NULL , & err_code )"		3318737	1					
ANR	3318883	Callee	do_decode		3318737	0					
ANR	3318884	Identifier	do_decode		3318737	0					
ANR	3318885	ArgumentList	next_ins1_pos + 1		3318737	1					
ANR	3318886	Argument	next_ins1_pos + 1		3318737	0					
ANR	3318887	AdditiveExpression	next_ins1_pos + 1		3318737	0		+			
ANR	3318888	Identifier	next_ins1_pos		3318737	0					
ANR	3318889	PrimaryExpression	1		3318737	1					
ANR	3318890	Argument	ins_pos		3318737	1					
ANR	3318891	Identifier	ins_pos		3318737	0					
ANR	3318892	Argument	two_ins		3318737	2					
ANR	3318893	Identifier	two_ins		3318737	0					
ANR	3318894	Argument	& next_ins2_pos		3318737	3					
ANR	3318895	UnaryOperationExpression	& next_ins2_pos		3318737	0					
ANR	3318896	UnaryOperator	&		3318737	0					
ANR	3318897	Identifier	next_ins2_pos		3318737	1					
ANR	3318898	Argument	NULL		3318737	4					
ANR	3318899	Identifier	NULL		3318737	0					
ANR	3318900	Argument	& err_code		3318737	5					
ANR	3318901	UnaryOperationExpression	& err_code		3318737	0					
ANR	3318902	UnaryOperator	&		3318737	0					
ANR	3318903	Identifier	err_code		3318737	1					
ANR	3318904	IfStatement	if ( err_code < 0 )		3318737	3					
ANR	3318905	Condition	err_code < 0	483:6:11047:11058	3318737	0	True				
ANR	3318906	RelationalExpression	err_code < 0		3318737	0		<			
ANR	3318907	Identifier	err_code		3318737	0					
ANR	3318908	PrimaryExpression	0		3318737	1					
ANR	3318909	CompoundStatement		32:20:677:677	3318737	1					
ANR	3318910	ExpressionStatement	free ( ins1 )	484:3:11066:11077	3318737	0	True				
ANR	3318911	CallExpression	free ( ins1 )		3318737	0					
ANR	3318912	Callee	free		3318737	0					
ANR	3318913	Identifier	free		3318737	0					
ANR	3318914	ArgumentList	ins1		3318737	1					
ANR	3318915	Argument	ins1		3318737	0					
ANR	3318916	Identifier	ins1		3318737	0					
ANR	3318917	ExpressionStatement	free ( ins2 )	485:3:11082:11093	3318737	1	True				
ANR	3318918	CallExpression	free ( ins2 )		3318737	0					
ANR	3318919	Callee	free		3318737	0					
ANR	3318920	Identifier	free		3318737	0					
ANR	3318921	ArgumentList	ins2		3318737	1					
ANR	3318922	Argument	ins2		3318737	0					
ANR	3318923	Identifier	ins2		3318737	0					
ANR	3318924	ReturnStatement	return NULL ;	486:3:11098:11109	3318737	2	True				
ANR	3318925	Identifier	NULL		3318737	0					
ANR	3318926	ExpressionStatement	* next_ins_pos = next_ins2_pos	488:2:11117:11146	3318737	4	True				
ANR	3318927	AssignmentExpression	* next_ins_pos = next_ins2_pos		3318737	0		=			
ANR	3318928	UnaryOperationExpression	* next_ins_pos		3318737	0					
ANR	3318929	UnaryOperator	*		3318737	0					
ANR	3318930	Identifier	next_ins_pos		3318737	1					
ANR	3318931	Identifier	next_ins2_pos		3318737	1					
ANR	3318932	IfStatement	if ( hash_code == 0xF0 || hash_code == 0xF1 )		3318737	5					
ANR	3318933	Condition	hash_code == 0xF0 || hash_code == 0xF1	490:6:11155:11192	3318737	0	True				
ANR	3318934	OrExpression	hash_code == 0xF0 || hash_code == 0xF1		3318737	0		||			
ANR	3318935	EqualityExpression	hash_code == 0xF0		3318737	0		==			
ANR	3318936	Identifier	hash_code		3318737	0					
ANR	3318937	PrimaryExpression	0xF0		3318737	1					
ANR	3318938	EqualityExpression	hash_code == 0xF1		3318737	1		==			
ANR	3318939	Identifier	hash_code		3318737	0					
ANR	3318940	PrimaryExpression	0xF1		3318737	1					
ANR	3318941	CompoundStatement		39:46:811:811	3318737	1					
ANR	3318942	ExpressionStatement	"aux = strcat_dup ( ins2 , "" || "" , 1 )"	491:3:11200:11233	3318737	0	True				
ANR	3318943	AssignmentExpression	"aux = strcat_dup ( ins2 , "" || "" , 1 )"		3318737	0		=			
ANR	3318944	Identifier	aux		3318737	0					
ANR	3318945	CallExpression	"strcat_dup ( ins2 , "" || "" , 1 )"		3318737	1					
ANR	3318946	Callee	strcat_dup		3318737	0					
ANR	3318947	Identifier	strcat_dup		3318737	0					
ANR	3318948	ArgumentList	ins2		3318737	1					
ANR	3318949	Argument	ins2		3318737	0					
ANR	3318950	Identifier	ins2		3318737	0					
ANR	3318951	Argument	""" || """		3318737	1					
ANR	3318952	PrimaryExpression	""" || """		3318737	0					
ANR	3318953	Argument	1		3318737	2					
ANR	3318954	PrimaryExpression	1		3318737	0					
ANR	3318955	ExpressionStatement	"ins_res = strcat_dup ( aux , ins1 , 1 )"	492:3:11238:11272	3318737	1	True				
ANR	3318956	AssignmentExpression	"ins_res = strcat_dup ( aux , ins1 , 1 )"		3318737	0		=			
ANR	3318957	Identifier	ins_res		3318737	0					
ANR	3318958	CallExpression	"strcat_dup ( aux , ins1 , 1 )"		3318737	1					
ANR	3318959	Callee	strcat_dup		3318737	0					
ANR	3318960	Identifier	strcat_dup		3318737	0					
ANR	3318961	ArgumentList	aux		3318737	1					
ANR	3318962	Argument	aux		3318737	0					
ANR	3318963	Identifier	aux		3318737	0					
ANR	3318964	Argument	ins1		3318737	1					
ANR	3318965	Identifier	ins1		3318737	0					
ANR	3318966	Argument	1		3318737	2					
ANR	3318967	PrimaryExpression	1		3318737	0					
ANR	3318968	ExpressionStatement	free ( ins1 )	493:3:11277:11287	3318737	2	True				
ANR	3318969	CallExpression	free ( ins1 )		3318737	0					
ANR	3318970	Callee	free		3318737	0					
ANR	3318971	Identifier	free		3318737	0					
ANR	3318972	ArgumentList	ins1		3318737	1					
ANR	3318973	Argument	ins1		3318737	0					
ANR	3318974	Identifier	ins1		3318737	0					
ANR	3318975	ElseStatement	else		3318737	0					
ANR	3318976	CompoundStatement		43:9:914:914	3318737	0					
ANR	3318977	ExpressionStatement	"aux = strcat_dup ( ins1 , "" || "" , 1 )"	495:3:11303:11336	3318737	0	True				
ANR	3318978	AssignmentExpression	"aux = strcat_dup ( ins1 , "" || "" , 1 )"		3318737	0		=			
ANR	3318979	Identifier	aux		3318737	0					
ANR	3318980	CallExpression	"strcat_dup ( ins1 , "" || "" , 1 )"		3318737	1					
ANR	3318981	Callee	strcat_dup		3318737	0					
ANR	3318982	Identifier	strcat_dup		3318737	0					
ANR	3318983	ArgumentList	ins1		3318737	1					
ANR	3318984	Argument	ins1		3318737	0					
ANR	3318985	Identifier	ins1		3318737	0					
ANR	3318986	Argument	""" || """		3318737	1					
ANR	3318987	PrimaryExpression	""" || """		3318737	0					
ANR	3318988	Argument	1		3318737	2					
ANR	3318989	PrimaryExpression	1		3318737	0					
ANR	3318990	ExpressionStatement	"ins_res = strcat_dup ( aux , ins2 , 1 )"	496:3:11341:11375	3318737	1	True				
ANR	3318991	AssignmentExpression	"ins_res = strcat_dup ( aux , ins2 , 1 )"		3318737	0		=			
ANR	3318992	Identifier	ins_res		3318737	0					
ANR	3318993	CallExpression	"strcat_dup ( aux , ins2 , 1 )"		3318737	1					
ANR	3318994	Callee	strcat_dup		3318737	0					
ANR	3318995	Identifier	strcat_dup		3318737	0					
ANR	3318996	ArgumentList	aux		3318737	1					
ANR	3318997	Argument	aux		3318737	0					
ANR	3318998	Identifier	aux		3318737	0					
ANR	3318999	Argument	ins2		3318737	1					
ANR	3319000	Identifier	ins2		3318737	0					
ANR	3319001	Argument	1		3318737	2					
ANR	3319002	PrimaryExpression	1		3318737	0					
ANR	3319003	ExpressionStatement	free ( ins2 )	497:3:11380:11390	3318737	2	True				
ANR	3319004	CallExpression	free ( ins2 )		3318737	0					
ANR	3319005	Callee	free		3318737	0					
ANR	3319006	Identifier	free		3318737	0					
ANR	3319007	ArgumentList	ins2		3318737	1					
ANR	3319008	Argument	ins2		3318737	0					
ANR	3319009	Identifier	ins2		3318737	0					
ANR	3319010	ExpressionStatement	* next_ins_pos = next_ins1_pos + next_ins2_pos + 1	499:2:11398:11447	3318737	6	True				
ANR	3319011	AssignmentExpression	* next_ins_pos = next_ins1_pos + next_ins2_pos + 1		3318737	0		=			
ANR	3319012	UnaryOperationExpression	* next_ins_pos		3318737	0					
ANR	3319013	UnaryOperator	*		3318737	0					
ANR	3319014	Identifier	next_ins_pos		3318737	1					
ANR	3319015	AdditiveExpression	next_ins1_pos + next_ins2_pos + 1		3318737	1		+			
ANR	3319016	Identifier	next_ins1_pos		3318737	0					
ANR	3319017	AdditiveExpression	next_ins2_pos + 1		3318737	1		+			
ANR	3319018	Identifier	next_ins2_pos		3318737	0					
ANR	3319019	PrimaryExpression	1		3318737	1					
ANR	3319020	IfStatement	if ( * next_ins_pos != two_ins )		3318737	7					
ANR	3319021	Condition	* next_ins_pos != two_ins	500:5:11454:11477	3318737	0	True				
ANR	3319022	EqualityExpression	* next_ins_pos != two_ins		3318737	0		!=			
ANR	3319023	UnaryOperationExpression	* next_ins_pos		3318737	0					
ANR	3319024	UnaryOperator	*		3318737	0					
ANR	3319025	Identifier	next_ins_pos		3318737	1					
ANR	3319026	Identifier	two_ins		3318737	1					
ANR	3319027	CompoundStatement		49:31:1096:1096	3318737	1					
ANR	3319028	ExpressionStatement	err_code = - 1	502:3:11542:11555	3318737	0	True				
ANR	3319029	AssignmentExpression	err_code = - 1		3318737	0		=			
ANR	3319030	Identifier	err_code		3318737	0					
ANR	3319031	UnaryOperationExpression	- 1		3318737	1					
ANR	3319032	UnaryOperator	-		3318737	0					
ANR	3319033	PrimaryExpression	1		3318737	1					
ANR	3319034	ExpressionStatement	free ( ins_res )	503:3:11560:11574	3318737	1	True				
ANR	3319035	CallExpression	free ( ins_res )		3318737	0					
ANR	3319036	Callee	free		3318737	0					
ANR	3319037	Identifier	free		3318737	0					
ANR	3319038	ArgumentList	ins_res		3318737	1					
ANR	3319039	Argument	ins_res		3318737	0					
ANR	3319040	Identifier	ins_res		3318737	0					
ANR	3319041	ReturnStatement	return NULL ;	504:3:11579:11590	3318737	2	True				
ANR	3319042	Identifier	NULL		3318737	0					
ANR	3319043	ElseStatement	else		3318737	0					
ANR	3319044	CompoundStatement		55:8:1220:1220	3318737	0					
ANR	3319045	ExpressionStatement	"ins_res = do_decode ( 0 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"	507:2:11608:11687	3318737	0	True				
ANR	3319046	AssignmentExpression	"ins_res = do_decode ( 0 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"		3318737	0		=			
ANR	3319047	Identifier	ins_res		3318737	0					
ANR	3319048	CallExpression	"do_decode ( 0 , ins_pos , two_ins , & next_ins1_pos , & hash_code , & err_code )"		3318737	1					
ANR	3319049	Callee	do_decode		3318737	0					
ANR	3319050	Identifier	do_decode		3318737	0					
ANR	3319051	ArgumentList	0		3318737	1					
ANR	3319052	Argument	0		3318737	0					
ANR	3319053	PrimaryExpression	0		3318737	0					
ANR	3319054	Argument	ins_pos		3318737	1					
ANR	3319055	Identifier	ins_pos		3318737	0					
ANR	3319056	Argument	two_ins		3318737	2					
ANR	3319057	Identifier	two_ins		3318737	0					
ANR	3319058	Argument	& next_ins1_pos		3318737	3					
ANR	3319059	UnaryOperationExpression	& next_ins1_pos		3318737	0					
ANR	3319060	UnaryOperator	&		3318737	0					
ANR	3319061	Identifier	next_ins1_pos		3318737	1					
ANR	3319062	Argument	& hash_code		3318737	4					
ANR	3319063	UnaryOperationExpression	& hash_code		3318737	0					
ANR	3319064	UnaryOperator	&		3318737	0					
ANR	3319065	Identifier	hash_code		3318737	1					
ANR	3319066	Argument	& err_code		3318737	5					
ANR	3319067	UnaryOperationExpression	& err_code		3318737	0					
ANR	3319068	UnaryOperator	&		3318737	0					
ANR	3319069	Identifier	err_code		3318737	1					
ANR	3319070	IfStatement	if ( err_code < 0 )		3318737	1					
ANR	3319071	Condition	err_code < 0	508:6:11695:11706	3318737	0	True				
ANR	3319072	RelationalExpression	err_code < 0		3318737	0		<			
ANR	3319073	Identifier	err_code		3318737	0					
ANR	3319074	PrimaryExpression	0		3318737	1					
ANR	3319075	CompoundStatement		57:20:1325:1325	3318737	1					
ANR	3319076	ExpressionStatement	free ( ins_res )	509:3:11714:11728	3318737	0	True				
ANR	3319077	CallExpression	free ( ins_res )		3318737	0					
ANR	3319078	Callee	free		3318737	0					
ANR	3319079	Identifier	free		3318737	0					
ANR	3319080	ArgumentList	ins_res		3318737	1					
ANR	3319081	Argument	ins_res		3318737	0					
ANR	3319082	Identifier	ins_res		3318737	0					
ANR	3319083	ReturnStatement	return NULL ;	510:3:11733:11744	3318737	1	True				
ANR	3319084	Identifier	NULL		3318737	0					
ANR	3319085	ExpressionStatement	* next_ins_pos = next_ins1_pos	512:2:11752:11781	3318737	2	True				
ANR	3319086	AssignmentExpression	* next_ins_pos = next_ins1_pos		3318737	0		=			
ANR	3319087	UnaryOperationExpression	* next_ins_pos		3318737	0					
ANR	3319088	UnaryOperator	*		3318737	0					
ANR	3319089	Identifier	next_ins_pos		3318737	1					
ANR	3319090	Identifier	next_ins1_pos		3318737	1					
ANR	3319091	ReturnStatement	return ins_res ;	515:1:11788:11802	3318737	11	True				
ANR	3319092	Identifier	ins_res		3318737	0					
ANR	3319093	ReturnType	char *		3318737	1					
ANR	3319094	Identifier	c55plus_decode		3318737	2					
ANR	3319095	ParameterList	"ut32 ins_pos , ut32 * next_ins_pos"		3318737	3					
ANR	3319096	Parameter	ut32 ins_pos	452:21:10349:10360	3318737	0	True				
ANR	3319097	ParameterType	ut32		3318737	0					
ANR	3319098	Identifier	ins_pos		3318737	1					
ANR	3319099	Parameter	ut32 * next_ins_pos	452:35:10363:10380	3318737	1	True				
ANR	3319100	ParameterType	ut32 *		3318737	0					
ANR	3319101	Identifier	next_ins_pos		3318737	1					
ANR	3319102	CFGEntryNode	ENTRY		3318737		True				
ANR	3319103	CFGExitNode	EXIT		3318737		True				
ANR	3319104	Symbol	strcat_dup		3318737						
ANR	3319105	Symbol	& err_code		3318737						
ANR	3319106	Symbol	NULL		3318737						
ANR	3319107	Symbol	next_ins_pos		3318737						
ANR	3319108	Symbol	aux		3318737						
ANR	3319109	Symbol	ins_pos		3318737						
ANR	3319110	Symbol	err_code		3318737						
ANR	3319111	Symbol	& hash_code		3318737						
ANR	3319112	Symbol	& next_ins2_pos		3318737						
ANR	3319113	Symbol	ins_res		3318737						
ANR	3319114	Symbol	opcode		3318737						
ANR	3319115	Symbol	next_ins1_pos		3318737						
ANR	3319116	Symbol	ins1		3318737						
ANR	3319117	Symbol	do_decode		3318737						
ANR	3319118	Symbol	next_ins2_pos		3318737						
ANR	3319119	Symbol	hash_code		3318737						
ANR	3319120	Symbol	ins_buff_len		3318737						
ANR	3319121	Symbol	ins2		3318737						
ANR	3319122	Symbol	two_ins		3318737						
ANR	3319123	Symbol	get_ins_part		3318737						
ANR	3319124	Symbol	& next_ins1_pos		3318737						
ANR	3319125	Symbol	* next_ins_pos		3318737						
ANR	3319126	Function	is_linear_circular	518:0:11807:12025							
ANR	3319127	FunctionDef	is_linear_circular (ut32 ins_bits)		3319126	0					
ANR	3319128	CompoundStatement		518:46:11853:12025	3319126	0					
ANR	3319129	IdentifierDeclStatement	"ut8 op , op2 , op3 ;"	519:1:11856:11872	3319126	0	True				
ANR	3319130	IdentifierDecl	op		3319126	0					
ANR	3319131	IdentifierDeclType	ut8		3319126	0					
ANR	3319132	Identifier	op		3319126	1					
ANR	3319133	IdentifierDecl	op2		3319126	1					
ANR	3319134	IdentifierDeclType	ut8		3319126	0					
ANR	3319135	Identifier	op2		3319126	1					
ANR	3319136	IdentifierDecl	op3		3319126	2					
ANR	3319137	IdentifierDeclType	ut8		3319126	0					
ANR	3319138	Identifier	op3		3319126	1					
ANR	3319139	ExpressionStatement	op = ( ins_bits >> 6 ) | 16 * ( ins_bits & 3 )	520:1:11875:11917	3319126	1	True				
ANR	3319140	AssignmentExpression	op = ( ins_bits >> 6 ) | 16 * ( ins_bits & 3 )		3319126	0		=			
ANR	3319141	Identifier	op		3319126	0					
ANR	3319142	InclusiveOrExpression	( ins_bits >> 6 ) | 16 * ( ins_bits & 3 )		3319126	1		|			
ANR	3319143	ShiftExpression	ins_bits >> 6		3319126	0		>>			
ANR	3319144	Identifier	ins_bits		3319126	0					
ANR	3319145	PrimaryExpression	6		3319126	1					
ANR	3319146	MultiplicativeExpression	16 * ( ins_bits & 3 )		3319126	1		*			
ANR	3319147	PrimaryExpression	16		3319126	0					
ANR	3319148	BitAndExpression	ins_bits & 3		3319126	1		&			
ANR	3319149	Identifier	ins_bits		3319126	0					
ANR	3319150	PrimaryExpression	3		3319126	1					
ANR	3319151	ExpressionStatement	op2 = ( ins_bits >> 2 ) & 0xF	521:1:11920:11947	3319126	2	True				
ANR	3319152	AssignmentExpression	op2 = ( ins_bits >> 2 ) & 0xF		3319126	0		=			
ANR	3319153	Identifier	op2		3319126	0					
ANR	3319154	BitAndExpression	( ins_bits >> 2 ) & 0xF		3319126	1		&			
ANR	3319155	ShiftExpression	ins_bits >> 2		3319126	0		>>			
ANR	3319156	Identifier	ins_bits		3319126	0					
ANR	3319157	PrimaryExpression	2		3319126	1					
ANR	3319158	PrimaryExpression	0xF		3319126	1					
ANR	3319159	ExpressionStatement	op3 = op2 & 0xF	522:1:11950:11965	3319126	3	True				
ANR	3319160	AssignmentExpression	op3 = op2 & 0xF		3319126	0		=			
ANR	3319161	Identifier	op3		3319126	0					
ANR	3319162	BitAndExpression	op2 & 0xF		3319126	1		&			
ANR	3319163	Identifier	op2		3319126	0					
ANR	3319164	PrimaryExpression	0xF		3319126	1					
ANR	3319165	ReturnStatement	return ( op == 26 || op == 30 || ( op3 > 7 && op3 != 15 ) ) ;	523:1:11968:12023	3319126	4	True				
ANR	3319166	OrExpression	op == 26 || op == 30 || ( op3 > 7 && op3 != 15 )		3319126	0		||			
ANR	3319167	EqualityExpression	op == 26		3319126	0		==			
ANR	3319168	Identifier	op		3319126	0					
ANR	3319169	PrimaryExpression	26		3319126	1					
ANR	3319170	OrExpression	op == 30 || ( op3 > 7 && op3 != 15 )		3319126	1		||			
ANR	3319171	EqualityExpression	op == 30		3319126	0		==			
ANR	3319172	Identifier	op		3319126	0					
ANR	3319173	PrimaryExpression	30		3319126	1					
ANR	3319174	AndExpression	op3 > 7 && op3 != 15		3319126	1		&&			
ANR	3319175	RelationalExpression	op3 > 7		3319126	0		>			
ANR	3319176	Identifier	op3		3319126	0					
ANR	3319177	PrimaryExpression	7		3319126	1					
ANR	3319178	EqualityExpression	op3 != 15		3319126	1		!=			
ANR	3319179	Identifier	op3		3319126	0					
ANR	3319180	PrimaryExpression	15		3319126	1					
ANR	3319181	ReturnType	static bool		3319126	1					
ANR	3319182	Identifier	is_linear_circular		3319126	2					
ANR	3319183	ParameterList	ut32 ins_bits		3319126	3					
ANR	3319184	Parameter	ut32 ins_bits	518:31:11838:11850	3319126	0	True				
ANR	3319185	ParameterType	ut32		3319126	0					
ANR	3319186	Identifier	ins_bits		3319126	1					
ANR	3319187	CFGEntryNode	ENTRY		3319126		True				
ANR	3319188	CFGExitNode	EXIT		3319126		True				
ANR	3319189	Symbol	op2		3319126						
ANR	3319190	Symbol	op		3319126						
ANR	3319191	Symbol	op3		3319126						
ANR	3319192	Symbol	ins_bits		3319126						
ANR	3319193	Function	get_token_decoded	526:0:12028:20292							
ANR	3319194	FunctionDef	"get_token_decoded (st32 hash_code , char * ins_token , ut32 ins_token_len , char * reg_arg , ut32 * ret_ins_bits , ut32 * ret_reg_len , ut32 magic_value , ut32 ins_pos , ut32 ins_len , ut8 two_ins , int * err_code)"		3319193	0					
ANR	3319195	CompoundStatement		528:57:12242:20292	3319193	0					
ANR	3319196	IdentifierDeclStatement	"ut32 tok_op , ins_bits ;"	529:1:12245:12266	3319193	0	True				
ANR	3319197	IdentifierDecl	tok_op		3319193	0					
ANR	3319198	IdentifierDeclType	ut32		3319193	0					
ANR	3319199	Identifier	tok_op		3319193	1					
ANR	3319200	IdentifierDecl	ins_bits		3319193	1					
ANR	3319201	IdentifierDeclType	ut32		3319193	0					
ANR	3319202	Identifier	ins_bits		3319193	1					
ANR	3319203	IdentifierDeclStatement	char * res = NULL ;	530:1:12269:12285	3319193	1	True				
ANR	3319204	IdentifierDecl	* res = NULL		3319193	0					
ANR	3319205	IdentifierDeclType	char *		3319193	0					
ANR	3319206	Identifier	res		3319193	1					
ANR	3319207	AssignmentExpression	* res = NULL		3319193	2		=			
ANR	3319208	Identifier	NULL		3319193	0					
ANR	3319209	Identifier	NULL		3319193	1					
ANR	3319210	IdentifierDeclStatement	char buff_aux [ 512 ] ;	531:1:12288:12306	3319193	2	True				
ANR	3319211	IdentifierDecl	buff_aux [ 512 ]		3319193	0					
ANR	3319212	IdentifierDeclType	char [ 512 ]		3319193	0					
ANR	3319213	Identifier	buff_aux		3319193	1					
ANR	3319214	PrimaryExpression	512		3319193	2					
ANR	3319215	IdentifierDeclStatement	char * aux = NULL ;	532:1:12309:12325	3319193	3	True				
ANR	3319216	IdentifierDecl	* aux = NULL		3319193	0					
ANR	3319217	IdentifierDeclType	char *		3319193	0					
ANR	3319218	Identifier	aux		3319193	1					
ANR	3319219	AssignmentExpression	* aux = NULL		3319193	2		=			
ANR	3319220	Identifier	NULL		3319193	0					
ANR	3319221	Identifier	NULL		3319193	1					
ANR	3319222	IdentifierDeclStatement	"ut32 ret_len = 0 , flag ;"	533:1:12328:12350	3319193	4	True				
ANR	3319223	IdentifierDecl	ret_len = 0		3319193	0					
ANR	3319224	IdentifierDeclType	ut32		3319193	0					
ANR	3319225	Identifier	ret_len		3319193	1					
ANR	3319226	AssignmentExpression	ret_len = 0		3319193	2		=			
ANR	3319227	Identifier	ret_len		3319193	0					
ANR	3319228	PrimaryExpression	0		3319193	1					
ANR	3319229	IdentifierDecl	flag		3319193	1					
ANR	3319230	IdentifierDeclType	ut32		3319193	0					
ANR	3319231	Identifier	flag		3319193	1					
ANR	3319232	ExpressionStatement	* ret_ins_bits = 0	535:1:12354:12371	3319193	5	True				
ANR	3319233	AssignmentExpression	* ret_ins_bits = 0		3319193	0		=			
ANR	3319234	UnaryOperationExpression	* ret_ins_bits		3319193	0					
ANR	3319235	UnaryOperator	*		3319193	0					
ANR	3319236	Identifier	ret_ins_bits		3319193	1					
ANR	3319237	PrimaryExpression	0		3319193	1					
ANR	3319238	ExpressionStatement	* ret_reg_len = 0	536:1:12374:12390	3319193	6	True				
ANR	3319239	AssignmentExpression	* ret_reg_len = 0		3319193	0		=			
ANR	3319240	UnaryOperationExpression	* ret_reg_len		3319193	0					
ANR	3319241	UnaryOperator	*		3319193	0					
ANR	3319242	Identifier	ret_reg_len		3319193	1					
ANR	3319243	PrimaryExpression	0		3319193	1					
ANR	3319244	ExpressionStatement	"ins_bits = get_ins_bits ( hash_code , ins_pos , ins_token , ins_token_len , magic_value , err_code )"	538:1:12394:12486	3319193	7	True				
ANR	3319245	AssignmentExpression	"ins_bits = get_ins_bits ( hash_code , ins_pos , ins_token , ins_token_len , magic_value , err_code )"		3319193	0		=			
ANR	3319246	Identifier	ins_bits		3319193	0					
ANR	3319247	CallExpression	"get_ins_bits ( hash_code , ins_pos , ins_token , ins_token_len , magic_value , err_code )"		3319193	1					
ANR	3319248	Callee	get_ins_bits		3319193	0					
ANR	3319249	Identifier	get_ins_bits		3319193	0					
ANR	3319250	ArgumentList	hash_code		3319193	1					
ANR	3319251	Argument	hash_code		3319193	0					
ANR	3319252	Identifier	hash_code		3319193	0					
ANR	3319253	Argument	ins_pos		3319193	1					
ANR	3319254	Identifier	ins_pos		3319193	0					
ANR	3319255	Argument	ins_token		3319193	2					
ANR	3319256	Identifier	ins_token		3319193	0					
ANR	3319257	Argument	ins_token_len		3319193	3					
ANR	3319258	Identifier	ins_token_len		3319193	0					
ANR	3319259	Argument	magic_value		3319193	4					
ANR	3319260	Identifier	magic_value		3319193	0					
ANR	3319261	Argument	err_code		3319193	5					
ANR	3319262	Identifier	err_code		3319193	0					
ANR	3319263	IfStatement	if ( * err_code < 0 )		3319193	8					
ANR	3319264	Condition	* err_code < 0	539:5:12493:12505	3319193	0	True				
ANR	3319265	RelationalExpression	* err_code < 0		3319193	0		<			
ANR	3319266	UnaryOperationExpression	* err_code		3319193	0					
ANR	3319267	UnaryOperator	*		3319193	0					
ANR	3319268	Identifier	err_code		3319193	1					
ANR	3319269	PrimaryExpression	0		3319193	1					
ANR	3319270	CompoundStatement		12:20:265:265	3319193	1					
ANR	3319271	ReturnStatement	return NULL ;	540:2:12512:12523	3319193	0	True				
ANR	3319272	Identifier	NULL		3319193	0					
ANR	3319273	ExpressionStatement	tok_op = * ins_token - 0x23	542:1:12529:12555	3319193	9	True				
ANR	3319274	AssignmentExpression	tok_op = * ins_token - 0x23		3319193	0		=			
ANR	3319275	Identifier	tok_op		3319193	0					
ANR	3319276	AdditiveExpression	* ins_token - 0x23		3319193	1		-			
ANR	3319277	UnaryOperationExpression	* ins_token		3319193	0					
ANR	3319278	UnaryOperator	*		3319193	0					
ANR	3319279	Identifier	ins_token		3319193	1					
ANR	3319280	PrimaryExpression	0x23		3319193	1					
ANR	3319281	IfStatement	if ( C55PLUS_DEBUG )		3319193	10					
ANR	3319282	Condition	C55PLUS_DEBUG	544:5:12563:12575	3319193	0	True				
ANR	3319283	Identifier	C55PLUS_DEBUG		3319193	0					
ANR	3319284	CompoundStatement		17:20:335:335	3319193	1					
ANR	3319285	ExpressionStatement	"printf ( ""WAY ins_bits: OP = %d 0x%x %s %d %d\\n"" , tok_op , ins_bits , ins_token , ins_token_len , ins_pos )"	545:2:12582:12682	3319193	0	True				
ANR	3319286	CallExpression	"printf ( ""WAY ins_bits: OP = %d 0x%x %s %d %d\\n"" , tok_op , ins_bits , ins_token , ins_token_len , ins_pos )"		3319193	0					
ANR	3319287	Callee	printf		3319193	0					
ANR	3319288	Identifier	printf		3319193	0					
ANR	3319289	ArgumentList	"""WAY ins_bits: OP = %d 0x%x %s %d %d\\n"""		3319193	1					
ANR	3319290	Argument	"""WAY ins_bits: OP = %d 0x%x %s %d %d\\n"""		3319193	0					
ANR	3319291	PrimaryExpression	"""WAY ins_bits: OP = %d 0x%x %s %d %d\\n"""		3319193	0					
ANR	3319292	Argument	tok_op		3319193	1					
ANR	3319293	Identifier	tok_op		3319193	0					
ANR	3319294	Argument	ins_bits		3319193	2					
ANR	3319295	Identifier	ins_bits		3319193	0					
ANR	3319296	Argument	ins_token		3319193	3					
ANR	3319297	Identifier	ins_token		3319193	0					
ANR	3319298	Argument	ins_token_len		3319193	4					
ANR	3319299	Identifier	ins_token_len		3319193	0					
ANR	3319300	Argument	ins_pos		3319193	5					
ANR	3319301	Identifier	ins_pos		3319193	0					
ANR	3319302	ExpressionStatement	getchar ( )	546:2:12686:12695	3319193	1	True				
ANR	3319303	CallExpression	getchar ( )		3319193	0					
ANR	3319304	Callee	getchar		3319193	0					
ANR	3319305	Identifier	getchar		3319193	0					
ANR	3319306	ArgumentList			3319193	1					
ANR	3319307	SwitchStatement	switch ( tok_op )		3319193	11					
ANR	3319308	Condition	tok_op	549:9:12710:12715	3319193	0	True				
ANR	3319309	Identifier	tok_op		3319193	0					
ANR	3319310	CompoundStatement		22:17:475:475	3319193	1					
ANR	3319311	Label	case 30 :	550:1:12721:12728	3319193	0	True				
ANR	3319312	Label	case 31 :	551:1:12731:12738	3319193	1	True				
ANR	3319313	Label	case 32 :	552:1:12741:12748	3319193	2	True				
ANR	3319314	Label	case 33 :	553:1:12751:12758	3319193	3	True				
ANR	3319315	Label	case 43 :	554:1:12761:12768	3319193	4	True				
ANR	3319316	Label	case 62 :	555:1:12771:12778	3319193	5	True				
ANR	3319317	Label	case 63 :	556:1:12781:12788	3319193	6	True				
ANR	3319318	Label	case 64 :	557:1:12791:12798	3319193	7	True				
ANR	3319319	Label	case 65 :	558:1:12801:12808	3319193	8	True				
ANR	3319320	IfStatement	if ( ! reg_arg || * reg_arg == '\\0' )		3319193	9					
ANR	3319321	Condition	! reg_arg || * reg_arg == '\\0'	559:6:12816:12843	3319193	0	True				
ANR	3319322	OrExpression	! reg_arg || * reg_arg == '\\0'		3319193	0		||			
ANR	3319323	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3319324	UnaryOperator	!		3319193	0					
ANR	3319325	Identifier	reg_arg		3319193	1					
ANR	3319326	EqualityExpression	* reg_arg == '\\0'		3319193	1		==			
ANR	3319327	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319328	UnaryOperator	*		3319193	0					
ANR	3319329	Identifier	reg_arg		3319193	1					
ANR	3319330	PrimaryExpression	'\\0'		3319193	1					
ANR	3319331	CompoundStatement		32:36:603:603	3319193	1					
ANR	3319332	ExpressionStatement	"res = strdup ( ""<register>"" )"	560:3:12851:12877	3319193	0	True				
ANR	3319333	AssignmentExpression	"res = strdup ( ""<register>"" )"		3319193	0		=			
ANR	3319334	Identifier	res		3319193	0					
ANR	3319335	CallExpression	"strdup ( ""<register>"" )"		3319193	1					
ANR	3319336	Callee	strdup		3319193	0					
ANR	3319337	Identifier	strdup		3319193	0					
ANR	3319338	ArgumentList	"""<register>"""		3319193	1					
ANR	3319339	Argument	"""<register>"""		3319193	0					
ANR	3319340	PrimaryExpression	"""<register>"""		3319193	0					
ANR	3319341	GotoStatement	goto ret_decode ;	561:3:12882:12897	3319193	1	True				
ANR	3319342	Identifier	ret_decode		3319193	0					
ANR	3319343	ExpressionStatement	"res = decode_regis ( reg_arg , hash_code , ins_bits , ret_ins_bits , err_code )"	563:2:12905:12977	3319193	10	True				
ANR	3319344	AssignmentExpression	"res = decode_regis ( reg_arg , hash_code , ins_bits , ret_ins_bits , err_code )"		3319193	0		=			
ANR	3319345	Identifier	res		3319193	0					
ANR	3319346	CallExpression	"decode_regis ( reg_arg , hash_code , ins_bits , ret_ins_bits , err_code )"		3319193	1					
ANR	3319347	Callee	decode_regis		3319193	0					
ANR	3319348	Identifier	decode_regis		3319193	0					
ANR	3319349	ArgumentList	reg_arg		3319193	1					
ANR	3319350	Argument	reg_arg		3319193	0					
ANR	3319351	Identifier	reg_arg		3319193	0					
ANR	3319352	Argument	hash_code		3319193	1					
ANR	3319353	Identifier	hash_code		3319193	0					
ANR	3319354	Argument	ins_bits		3319193	2					
ANR	3319355	Identifier	ins_bits		3319193	0					
ANR	3319356	Argument	ret_ins_bits		3319193	3					
ANR	3319357	Identifier	ret_ins_bits		3319193	0					
ANR	3319358	Argument	err_code		3319193	4					
ANR	3319359	Identifier	err_code		3319193	0					
ANR	3319360	IfStatement	if ( * err_code < 0 )		3319193	11					
ANR	3319361	Condition	* err_code < 0	564:6:12985:12997	3319193	0	True				
ANR	3319362	RelationalExpression	* err_code < 0		3319193	0		<			
ANR	3319363	UnaryOperationExpression	* err_code		3319193	0					
ANR	3319364	UnaryOperator	*		3319193	0					
ANR	3319365	Identifier	err_code		3319193	1					
ANR	3319366	PrimaryExpression	0		3319193	1					
ANR	3319367	CompoundStatement		37:21:757:757	3319193	1					
ANR	3319368	ReturnStatement	return NULL ;	565:3:13005:13016	3319193	0	True				
ANR	3319369	Identifier	NULL		3319193	0					
ANR	3319370	BreakStatement	break ;	567:2:13024:13029	3319193	12	True				
ANR	3319371	Label	case 35 :	568:1:13032:13039	3319193	13	True				
ANR	3319372	ExpressionStatement	"res = ins_bits ? strdup ( "" || far()"" ) : NULL"	568:10:13041:13083	3319193	14	True				
ANR	3319373	AssignmentExpression	"res = ins_bits ? strdup ( "" || far()"" ) : NULL"		3319193	0		=			
ANR	3319374	Identifier	res		3319193	0					
ANR	3319375	ConditionalExpression	"ins_bits ? strdup ( "" || far()"" ) : NULL"		3319193	1					
ANR	3319376	Condition	ins_bits		3319193	0					
ANR	3319377	Identifier	ins_bits		3319193	0					
ANR	3319378	CallExpression	"strdup ( "" || far()"" )"		3319193	1					
ANR	3319379	Callee	strdup		3319193	0					
ANR	3319380	Identifier	strdup		3319193	0					
ANR	3319381	ArgumentList	""" || far()"""		3319193	1					
ANR	3319382	Argument	""" || far()"""		3319193	0					
ANR	3319383	PrimaryExpression	""" || far()"""		3319193	0					
ANR	3319384	Identifier	NULL		3319193	2					
ANR	3319385	BreakStatement	break ;	568:54:13085:13090	3319193	15	True				
ANR	3319386	Label	case 36 :	569:1:13093:13100	3319193	16	True				
ANR	3319387	ExpressionStatement	"res = ins_bits ? strdup ( "" || local()"" ) : NULL"	569:10:13102:13146	3319193	17	True				
ANR	3319388	AssignmentExpression	"res = ins_bits ? strdup ( "" || local()"" ) : NULL"		3319193	0		=			
ANR	3319389	Identifier	res		3319193	0					
ANR	3319390	ConditionalExpression	"ins_bits ? strdup ( "" || local()"" ) : NULL"		3319193	1					
ANR	3319391	Condition	ins_bits		3319193	0					
ANR	3319392	Identifier	ins_bits		3319193	0					
ANR	3319393	CallExpression	"strdup ( "" || local()"" )"		3319193	1					
ANR	3319394	Callee	strdup		3319193	0					
ANR	3319395	Identifier	strdup		3319193	0					
ANR	3319396	ArgumentList	""" || local()"""		3319193	1					
ANR	3319397	Argument	""" || local()"""		3319193	0					
ANR	3319398	PrimaryExpression	""" || local()"""		3319193	0					
ANR	3319399	Identifier	NULL		3319193	2					
ANR	3319400	BreakStatement	break ;	569:56:13148:13153	3319193	18	True				
ANR	3319401	Label	case 37 :	570:1:13156:13163	3319193	19	True				
ANR	3319402	ExpressionStatement	res = get_opers ( ins_bits )	570:10:13165:13190	3319193	20	True				
ANR	3319403	AssignmentExpression	res = get_opers ( ins_bits )		3319193	0		=			
ANR	3319404	Identifier	res		3319193	0					
ANR	3319405	CallExpression	get_opers ( ins_bits )		3319193	1					
ANR	3319406	Callee	get_opers		3319193	0					
ANR	3319407	Identifier	get_opers		3319193	0					
ANR	3319408	ArgumentList	ins_bits		3319193	1					
ANR	3319409	Argument	ins_bits		3319193	0					
ANR	3319410	Identifier	ins_bits		3319193	0					
ANR	3319411	BreakStatement	break ;	570:37:13192:13197	3319193	21	True				
ANR	3319412	Label	case 38 :	571:1:13200:13207	3319193	22	True				
ANR	3319413	ExpressionStatement	"res = ins_bits ? ""lo"" : ""hi"""	572:2:13211:13238	3319193	23	True				
ANR	3319414	AssignmentExpression	"res = ins_bits ? ""lo"" : ""hi"""		3319193	0		=			
ANR	3319415	Identifier	res		3319193	0					
ANR	3319416	ConditionalExpression	"ins_bits ? ""lo"" : ""hi"""		3319193	1					
ANR	3319417	Condition	ins_bits		3319193	0					
ANR	3319418	Identifier	ins_bits		3319193	0					
ANR	3319419	PrimaryExpression	"""lo"""		3319193	1					
ANR	3319420	PrimaryExpression	"""hi"""		3319193	2					
ANR	3319421	ExpressionStatement	res = strdup ( res )	573:2:13242:13259	3319193	24	True				
ANR	3319422	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3319423	Identifier	res		3319193	0					
ANR	3319424	CallExpression	strdup ( res )		3319193	1					
ANR	3319425	Callee	strdup		3319193	0					
ANR	3319426	Identifier	strdup		3319193	0					
ANR	3319427	ArgumentList	res		3319193	1					
ANR	3319428	Argument	res		3319193	0					
ANR	3319429	Identifier	res		3319193	0					
ANR	3319430	BreakStatement	break ;	574:2:13263:13268	3319193	25	True				
ANR	3319431	Label	case 39 :	575:1:13271:13278	3319193	26	True				
ANR	3319432	ExpressionStatement	res = get_cmp_op ( ins_bits )	575:10:13280:13306	3319193	27	True				
ANR	3319433	AssignmentExpression	res = get_cmp_op ( ins_bits )		3319193	0		=			
ANR	3319434	Identifier	res		3319193	0					
ANR	3319435	CallExpression	get_cmp_op ( ins_bits )		3319193	1					
ANR	3319436	Callee	get_cmp_op		3319193	0					
ANR	3319437	Identifier	get_cmp_op		3319193	0					
ANR	3319438	ArgumentList	ins_bits		3319193	1					
ANR	3319439	Argument	ins_bits		3319193	0					
ANR	3319440	Identifier	ins_bits		3319193	0					
ANR	3319441	BreakStatement	break ;	575:38:13308:13313	3319193	28	True				
ANR	3319442	Label	case 40 :	576:1:13316:13323	3319193	29	True				
ANR	3319443	Label	case 48 :	577:1:13326:13333	3319193	30	True				
ANR	3319444	ExpressionStatement	"sprintf ( buff_aux , ""#0x%x"" , ( ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len ) ) )"	578:2:13337:13423	3319193	31	True				
ANR	3319445	CallExpression	"sprintf ( buff_aux , ""#0x%x"" , ( ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len ) ) )"		3319193	0					
ANR	3319446	Callee	sprintf		3319193	0					
ANR	3319447	Identifier	sprintf		3319193	0					
ANR	3319448	ArgumentList	buff_aux		3319193	1					
ANR	3319449	Argument	buff_aux		3319193	0					
ANR	3319450	Identifier	buff_aux		3319193	0					
ANR	3319451	Argument	"""#0x%x"""		3319193	1					
ANR	3319452	PrimaryExpression	"""#0x%x"""		3319193	0					
ANR	3319453	Argument	ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	2					
ANR	3319454	ShiftExpression	ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	0		<<			
ANR	3319455	Identifier	ins_bits		3319193	0					
ANR	3319456	ShiftExpression	( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	1		>>			
ANR	3319457	AdditiveExpression	32 - ins_token_len		3319193	0		-			
ANR	3319458	PrimaryExpression	32		3319193	0					
ANR	3319459	Identifier	ins_token_len		3319193	1					
ANR	3319460	AdditiveExpression	32 - ins_token_len		3319193	1		-			
ANR	3319461	PrimaryExpression	32		3319193	0					
ANR	3319462	Identifier	ins_token_len		3319193	1					
ANR	3319463	ExpressionStatement	res = strdup ( buff_aux )	579:2:13427:13449	3319193	32	True				
ANR	3319464	AssignmentExpression	res = strdup ( buff_aux )		3319193	0		=			
ANR	3319465	Identifier	res		3319193	0					
ANR	3319466	CallExpression	strdup ( buff_aux )		3319193	1					
ANR	3319467	Callee	strdup		3319193	0					
ANR	3319468	Identifier	strdup		3319193	0					
ANR	3319469	ArgumentList	buff_aux		3319193	1					
ANR	3319470	Argument	buff_aux		3319193	0					
ANR	3319471	Identifier	buff_aux		3319193	0					
ANR	3319472	BreakStatement	break ;	580:2:13453:13458	3319193	33	True				
ANR	3319473	Label	case 70 :	581:1:13461:13468	3319193	34	True				
ANR	3319474	Label	case 72 :	582:1:13471:13478	3319193	35	True				
ANR	3319475	Label	case 80 :	583:1:13481:13488	3319193	36	True				
ANR	3319476	IfStatement	if ( reg_arg )		3319193	37					
ANR	3319477	Condition	reg_arg	584:6:13496:13502	3319193	0	True				
ANR	3319478	Identifier	reg_arg		3319193	0					
ANR	3319479	CompoundStatement		57:15:1262:1262	3319193	1					
ANR	3319480	IfStatement	if ( * reg_arg == '!' )		3319193	0					
ANR	3319481	Condition	* reg_arg == '!'	585:7:13514:13528	3319193	0	True				
ANR	3319482	EqualityExpression	* reg_arg == '!'		3319193	0		==			
ANR	3319483	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319484	UnaryOperator	*		3319193	0					
ANR	3319485	Identifier	reg_arg		3319193	1					
ANR	3319486	PrimaryExpression	'!'		3319193	1					
ANR	3319487	CompoundStatement		58:24:1288:1288	3319193	1					
ANR	3319488	ExpressionStatement	res = get_reg_pair ( ins_bits )	586:4:13537:13565	3319193	0	True				
ANR	3319489	AssignmentExpression	res = get_reg_pair ( ins_bits )		3319193	0		=			
ANR	3319490	Identifier	res		3319193	0					
ANR	3319491	CallExpression	get_reg_pair ( ins_bits )		3319193	1					
ANR	3319492	Callee	get_reg_pair		3319193	0					
ANR	3319493	Identifier	get_reg_pair		3319193	0					
ANR	3319494	ArgumentList	ins_bits		3319193	1					
ANR	3319495	Argument	ins_bits		3319193	0					
ANR	3319496	Identifier	ins_bits		3319193	0					
ANR	3319497	BreakStatement	break ;	587:4:13571:13576	3319193	1	True				
ANR	3319498	ElseStatement	else		3319193	0					
ANR	3319499	IfStatement	"if ( ! r_str_ncasecmp ( reg_arg , ""ST"" , 2 ) )"		3319193	0					
ANR	3319500	Condition	"! r_str_ncasecmp ( reg_arg , ""ST"" , 2 )"	588:14:13592:13624	3319193	0	True				
ANR	3319501	UnaryOperationExpression	"! r_str_ncasecmp ( reg_arg , ""ST"" , 2 )"		3319193	0					
ANR	3319502	UnaryOperator	!		3319193	0					
ANR	3319503	CallExpression	"r_str_ncasecmp ( reg_arg , ""ST"" , 2 )"		3319193	1					
ANR	3319504	Callee	r_str_ncasecmp		3319193	0					
ANR	3319505	Identifier	r_str_ncasecmp		3319193	0					
ANR	3319506	ArgumentList	reg_arg		3319193	1					
ANR	3319507	Argument	reg_arg		3319193	0					
ANR	3319508	Identifier	reg_arg		3319193	0					
ANR	3319509	Argument	"""ST"""		3319193	1					
ANR	3319510	PrimaryExpression	"""ST"""		3319193	0					
ANR	3319511	Argument	2		3319193	2					
ANR	3319512	PrimaryExpression	2		3319193	0					
ANR	3319513	CompoundStatement		61:49:1384:1384	3319193	1					
ANR	3319514	ExpressionStatement	"res = get_status_regs_and_bits ( reg_arg , ins_bits )"	589:4:13633:13682	3319193	0	True				
ANR	3319515	AssignmentExpression	"res = get_status_regs_and_bits ( reg_arg , ins_bits )"		3319193	0		=			
ANR	3319516	Identifier	res		3319193	0					
ANR	3319517	CallExpression	"get_status_regs_and_bits ( reg_arg , ins_bits )"		3319193	1					
ANR	3319518	Callee	get_status_regs_and_bits		3319193	0					
ANR	3319519	Identifier	get_status_regs_and_bits		3319193	0					
ANR	3319520	ArgumentList	reg_arg		3319193	1					
ANR	3319521	Argument	reg_arg		3319193	0					
ANR	3319522	Identifier	reg_arg		3319193	0					
ANR	3319523	Argument	ins_bits		3319193	1					
ANR	3319524	Identifier	ins_bits		3319193	0					
ANR	3319525	BreakStatement	break ;	590:4:13688:13693	3319193	1	True				
ANR	3319526	IfStatement	if ( hash_code == 0xDF || hash_code == 0xE0 )		3319193	38					
ANR	3319527	Condition	hash_code == 0xDF || hash_code == 0xE0	593:6:13710:13747	3319193	0	True				
ANR	3319528	OrExpression	hash_code == 0xDF || hash_code == 0xE0		3319193	0		||			
ANR	3319529	EqualityExpression	hash_code == 0xDF		3319193	0		==			
ANR	3319530	Identifier	hash_code		3319193	0					
ANR	3319531	PrimaryExpression	0xDF		3319193	1					
ANR	3319532	EqualityExpression	hash_code == 0xE0		3319193	1		==			
ANR	3319533	Identifier	hash_code		3319193	0					
ANR	3319534	PrimaryExpression	0xE0		3319193	1					
ANR	3319535	CompoundStatement		66:46:1507:1507	3319193	1					
ANR	3319536	ExpressionStatement	* ret_ins_bits = ins_bits	594:3:13755:13779	3319193	0	True				
ANR	3319537	AssignmentExpression	* ret_ins_bits = ins_bits		3319193	0		=			
ANR	3319538	UnaryOperationExpression	* ret_ins_bits		3319193	0					
ANR	3319539	UnaryOperator	*		3319193	0					
ANR	3319540	Identifier	ret_ins_bits		3319193	1					
ANR	3319541	Identifier	ins_bits		3319193	1					
ANR	3319542	IfStatement	if ( ! reg_arg || * reg_arg != '-' )		3319193	39					
ANR	3319543	Condition	! reg_arg || * reg_arg != '-'	596:6:13791:13817	3319193	0	True				
ANR	3319544	OrExpression	! reg_arg || * reg_arg != '-'		3319193	0		||			
ANR	3319545	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3319546	UnaryOperator	!		3319193	0					
ANR	3319547	Identifier	reg_arg		3319193	1					
ANR	3319548	EqualityExpression	* reg_arg != '-'		3319193	1		!=			
ANR	3319549	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319550	UnaryOperator	*		3319193	0					
ANR	3319551	Identifier	reg_arg		3319193	1					
ANR	3319552	PrimaryExpression	'-'		3319193	1					
ANR	3319553	CompoundStatement		69:35:1577:1577	3319193	1					
ANR	3319554	Statement	sprintf	597:3:13825:13831	3319193	0	True				
ANR	3319555	Statement	(	597:10:13832:13832	3319193	1	True				
ANR	3319556	Statement	buff_aux	597:11:13833:13840	3319193	2	True				
ANR	3319557	Statement	","	597:19:13841:13841	3319193	3	True				
ANR	3319558	Statement	"""#0x%lx"""	597:21:13843:13850	3319193	4	True				
ANR	3319559	Statement	","	597:29:13851:13851	3319193	5	True				
ANR	3319560	Statement	(	597:31:13853:13853	3319193	6	True				
ANR	3319561	Statement	long	597:32:13854:13857	3319193	7	True				
ANR	3319562	Statement	unsigned	597:37:13859:13866	3319193	8	True				
ANR	3319563	Statement	int	597:46:13868:13870	3319193	9	True				
ANR	3319564	Statement	)	597:49:13871:13871	3319193	10	True				
ANR	3319565	Statement	ins_bits	597:50:13872:13879	3319193	11	True				
ANR	3319566	Statement	)	597:58:13880:13880	3319193	12	True				
ANR	3319567	ExpressionStatement		597:59:13881:13881	3319193	13	True				
ANR	3319568	ElseStatement	else		3319193	0					
ANR	3319569	CompoundStatement		71:9:1649:1649	3319193	0					
ANR	3319570	Statement	sprintf	599:3:13897:13903	3319193	0	True				
ANR	3319571	Statement	(	599:10:13904:13904	3319193	1	True				
ANR	3319572	Statement	buff_aux	599:11:13905:13912	3319193	2	True				
ANR	3319573	Statement	","	599:19:13913:13913	3319193	3	True				
ANR	3319574	Statement	"""-#0x%lx"""	599:21:13915:13923	3319193	4	True				
ANR	3319575	Statement	","	599:30:13924:13924	3319193	5	True				
ANR	3319576	Statement	(	599:32:13926:13926	3319193	6	True				
ANR	3319577	Statement	long	599:33:13927:13930	3319193	7	True				
ANR	3319578	Statement	unsigned	599:38:13932:13939	3319193	8	True				
ANR	3319579	Statement	int	599:47:13941:13943	3319193	9	True				
ANR	3319580	Statement	)	599:50:13944:13944	3319193	10	True				
ANR	3319581	Statement	ins_bits	599:51:13945:13952	3319193	11	True				
ANR	3319582	Statement	)	599:59:13953:13953	3319193	12	True				
ANR	3319583	ExpressionStatement		599:60:13954:13954	3319193	13	True				
ANR	3319584	ExpressionStatement	res = strdup ( buff_aux )	601:2:13962:13984	3319193	40	True				
ANR	3319585	AssignmentExpression	res = strdup ( buff_aux )		3319193	0		=			
ANR	3319586	Identifier	res		3319193	0					
ANR	3319587	CallExpression	strdup ( buff_aux )		3319193	1					
ANR	3319588	Callee	strdup		3319193	0					
ANR	3319589	Identifier	strdup		3319193	0					
ANR	3319590	ArgumentList	buff_aux		3319193	1					
ANR	3319591	Argument	buff_aux		3319193	0					
ANR	3319592	Identifier	buff_aux		3319193	0					
ANR	3319593	IfStatement	if ( ! reg_arg || * reg_arg != 'm' )		3319193	41					
ANR	3319594	Condition	! reg_arg || * reg_arg != 'm'	602:6:13992:14018	3319193	0	True				
ANR	3319595	OrExpression	! reg_arg || * reg_arg != 'm'		3319193	0		||			
ANR	3319596	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3319597	UnaryOperator	!		3319193	0					
ANR	3319598	Identifier	reg_arg		3319193	1					
ANR	3319599	EqualityExpression	* reg_arg != 'm'		3319193	1		!=			
ANR	3319600	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319601	UnaryOperator	*		3319193	0					
ANR	3319602	Identifier	reg_arg		3319193	1					
ANR	3319603	PrimaryExpression	'm'		3319193	1					
ANR	3319604	CompoundStatement		75:35:1778:1778	3319193	1					
ANR	3319605	BreakStatement	break ;	603:3:14026:14031	3319193	0	True				
ANR	3319606	ExpressionStatement	"res = strcat_dup ( res , "")"" , 1 )"	606:2:14040:14069	3319193	42	True				
ANR	3319607	AssignmentExpression	"res = strcat_dup ( res , "")"" , 1 )"		3319193	0		=			
ANR	3319608	Identifier	res		3319193	0					
ANR	3319609	CallExpression	"strcat_dup ( res , "")"" , 1 )"		3319193	1					
ANR	3319610	Callee	strcat_dup		3319193	0					
ANR	3319611	Identifier	strcat_dup		3319193	0					
ANR	3319612	ArgumentList	res		3319193	1					
ANR	3319613	Argument	res		3319193	0					
ANR	3319614	Identifier	res		3319193	0					
ANR	3319615	Argument	""")"""		3319193	1					
ANR	3319616	PrimaryExpression	""")"""		3319193	0					
ANR	3319617	Argument	1		3319193	2					
ANR	3319618	PrimaryExpression	1		3319193	0					
ANR	3319619	ExpressionStatement	"res = strcat_dup ( ""*("" , res , 2 )"	607:2:14073:14103	3319193	43	True				
ANR	3319620	AssignmentExpression	"res = strcat_dup ( ""*("" , res , 2 )"		3319193	0		=			
ANR	3319621	Identifier	res		3319193	0					
ANR	3319622	CallExpression	"strcat_dup ( ""*("" , res , 2 )"		3319193	1					
ANR	3319623	Callee	strcat_dup		3319193	0					
ANR	3319624	Identifier	strcat_dup		3319193	0					
ANR	3319625	ArgumentList	"""*("""		3319193	1					
ANR	3319626	Argument	"""*("""		3319193	0					
ANR	3319627	PrimaryExpression	"""*("""		3319193	0					
ANR	3319628	Argument	res		3319193	1					
ANR	3319629	Identifier	res		3319193	0					
ANR	3319630	Argument	2		3319193	2					
ANR	3319631	PrimaryExpression	2		3319193	0					
ANR	3319632	IfStatement	if ( magic_value & 0xC0 )		3319193	44					
ANR	3319633	Condition	magic_value & 0xC0	609:6:14112:14129	3319193	0	True				
ANR	3319634	BitAndExpression	magic_value & 0xC0		3319193	0		&			
ANR	3319635	Identifier	magic_value		3319193	0					
ANR	3319636	PrimaryExpression	0xC0		3319193	1					
ANR	3319637	CompoundStatement		82:26:1889:1889	3319193	1					
ANR	3319638	ExpressionStatement	"res = strcat_dup ( res , "")"" , 1 )"	610:3:14137:14166	3319193	0	True				
ANR	3319639	AssignmentExpression	"res = strcat_dup ( res , "")"" , 1 )"		3319193	0		=			
ANR	3319640	Identifier	res		3319193	0					
ANR	3319641	CallExpression	"strcat_dup ( res , "")"" , 1 )"		3319193	1					
ANR	3319642	Callee	strcat_dup		3319193	0					
ANR	3319643	Identifier	strcat_dup		3319193	0					
ANR	3319644	ArgumentList	res		3319193	1					
ANR	3319645	Argument	res		3319193	0					
ANR	3319646	Identifier	res		3319193	0					
ANR	3319647	Argument	""")"""		3319193	1					
ANR	3319648	PrimaryExpression	""")"""		3319193	0					
ANR	3319649	Argument	1		3319193	2					
ANR	3319650	PrimaryExpression	1		3319193	0					
ANR	3319651	ExpressionStatement	"res = strcat_dup ( ""volatile("" , res , 2 )"	611:3:14171:14208	3319193	1	True				
ANR	3319652	AssignmentExpression	"res = strcat_dup ( ""volatile("" , res , 2 )"		3319193	0		=			
ANR	3319653	Identifier	res		3319193	0					
ANR	3319654	CallExpression	"strcat_dup ( ""volatile("" , res , 2 )"		3319193	1					
ANR	3319655	Callee	strcat_dup		3319193	0					
ANR	3319656	Identifier	strcat_dup		3319193	0					
ANR	3319657	ArgumentList	"""volatile("""		3319193	1					
ANR	3319658	Argument	"""volatile("""		3319193	0					
ANR	3319659	PrimaryExpression	"""volatile("""		3319193	0					
ANR	3319660	Argument	res		3319193	1					
ANR	3319661	Identifier	res		3319193	0					
ANR	3319662	Argument	2		3319193	2					
ANR	3319663	PrimaryExpression	2		3319193	0					
ANR	3319664	ElseStatement	else		3319193	0					
ANR	3319665	IfStatement	if ( magic_value & 0x30 )		3319193	0					
ANR	3319666	Condition	magic_value & 0x30	612:13:14223:14240	3319193	0	True				
ANR	3319667	BitAndExpression	magic_value & 0x30		3319193	0		&			
ANR	3319668	Identifier	magic_value		3319193	0					
ANR	3319669	PrimaryExpression	0x30		3319193	1					
ANR	3319670	CompoundStatement		85:33:2000:2000	3319193	1					
ANR	3319671	ExpressionStatement	"res = strcat_dup ( res , "")"" , 1 )"	613:3:14248:14277	3319193	0	True				
ANR	3319672	AssignmentExpression	"res = strcat_dup ( res , "")"" , 1 )"		3319193	0		=			
ANR	3319673	Identifier	res		3319193	0					
ANR	3319674	CallExpression	"strcat_dup ( res , "")"" , 1 )"		3319193	1					
ANR	3319675	Callee	strcat_dup		3319193	0					
ANR	3319676	Identifier	strcat_dup		3319193	0					
ANR	3319677	ArgumentList	res		3319193	1					
ANR	3319678	Argument	res		3319193	0					
ANR	3319679	Identifier	res		3319193	0					
ANR	3319680	Argument	""")"""		3319193	1					
ANR	3319681	PrimaryExpression	""")"""		3319193	0					
ANR	3319682	Argument	1		3319193	2					
ANR	3319683	PrimaryExpression	1		3319193	0					
ANR	3319684	ExpressionStatement	"res = strcat_dup ( ""port("" , res , 2 )"	614:3:14282:14315	3319193	1	True				
ANR	3319685	AssignmentExpression	"res = strcat_dup ( ""port("" , res , 2 )"		3319193	0		=			
ANR	3319686	Identifier	res		3319193	0					
ANR	3319687	CallExpression	"strcat_dup ( ""port("" , res , 2 )"		3319193	1					
ANR	3319688	Callee	strcat_dup		3319193	0					
ANR	3319689	Identifier	strcat_dup		3319193	0					
ANR	3319690	ArgumentList	"""port("""		3319193	1					
ANR	3319691	Argument	"""port("""		3319193	0					
ANR	3319692	PrimaryExpression	"""port("""		3319193	0					
ANR	3319693	Argument	res		3319193	1					
ANR	3319694	Identifier	res		3319193	0					
ANR	3319695	Argument	2		3319193	2					
ANR	3319696	PrimaryExpression	2		3319193	0					
ANR	3319697	BreakStatement	break ;	616:2:14323:14328	3319193	45	True				
ANR	3319698	Label	case 41 :	617:1:14331:14338	3319193	46	True				
ANR	3319699	Label	case 73 :	618:1:14341:14348	3319193	47	True				
ANR	3319700	IfStatement	if ( ( reg_arg && * reg_arg == 'L' ) || hash_code == 105 || hash_code == 7 )		3319193	48					
ANR	3319701	Condition	( reg_arg && * reg_arg == 'L' ) || hash_code == 105 || hash_code == 7	619:6:14356:14421	3319193	0	True				
ANR	3319702	OrExpression	( reg_arg && * reg_arg == 'L' ) || hash_code == 105 || hash_code == 7		3319193	0		||			
ANR	3319703	AndExpression	reg_arg && * reg_arg == 'L'		3319193	0		&&			
ANR	3319704	Identifier	reg_arg		3319193	0					
ANR	3319705	EqualityExpression	* reg_arg == 'L'		3319193	1		==			
ANR	3319706	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319707	UnaryOperator	*		3319193	0					
ANR	3319708	Identifier	reg_arg		3319193	1					
ANR	3319709	PrimaryExpression	'L'		3319193	1					
ANR	3319710	OrExpression	hash_code == 105 || hash_code == 7		3319193	1		||			
ANR	3319711	EqualityExpression	hash_code == 105		3319193	0		==			
ANR	3319712	Identifier	hash_code		3319193	0					
ANR	3319713	PrimaryExpression	105		3319193	1					
ANR	3319714	EqualityExpression	hash_code == 7		3319193	1		==			
ANR	3319715	Identifier	hash_code		3319193	0					
ANR	3319716	PrimaryExpression	7		3319193	1					
ANR	3319717	CompoundStatement		92:74:2181:2181	3319193	1					
ANR	3319718	IfStatement	if ( C55PLUS_DEBUG )		3319193	0					
ANR	3319719	Condition	C55PLUS_DEBUG	620:7:14433:14445	3319193	0	True				
ANR	3319720	Identifier	C55PLUS_DEBUG		3319193	0					
ANR	3319721	CompoundStatement		93:22:2205:2205	3319193	1					
ANR	3319722	ExpressionStatement	"fprintf ( stderr , ""Ooops!!! look up address in sections!! %d"" , hash_code )"	621:4:14454:14526	3319193	0	True				
ANR	3319723	CallExpression	"fprintf ( stderr , ""Ooops!!! look up address in sections!! %d"" , hash_code )"		3319193	0					
ANR	3319724	Callee	fprintf		3319193	0					
ANR	3319725	Identifier	fprintf		3319193	0					
ANR	3319726	ArgumentList	stderr		3319193	1					
ANR	3319727	Argument	stderr		3319193	0					
ANR	3319728	Identifier	stderr		3319193	0					
ANR	3319729	Argument	"""Ooops!!! look up address in sections!! %d"""		3319193	1					
ANR	3319730	PrimaryExpression	"""Ooops!!! look up address in sections!! %d"""		3319193	0					
ANR	3319731	Argument	hash_code		3319193	2					
ANR	3319732	Identifier	hash_code		3319193	0					
ANR	3319733	IfStatement	if ( reg_arg && * reg_arg == 'L' )		3319193	49					
ANR	3319734	Condition	reg_arg && * reg_arg == 'L'	624:6:14543:14568	3319193	0	True				
ANR	3319735	AndExpression	reg_arg && * reg_arg == 'L'		3319193	0		&&			
ANR	3319736	Identifier	reg_arg		3319193	0					
ANR	3319737	EqualityExpression	* reg_arg == 'L'		3319193	1		==			
ANR	3319738	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319739	UnaryOperator	*		3319193	0					
ANR	3319740	Identifier	reg_arg		3319193	1					
ANR	3319741	PrimaryExpression	'L'		3319193	1					
ANR	3319742	CompoundStatement		97:34:2328:2328	3319193	1					
ANR	3319743	ExpressionStatement	ins_bits = ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len )	625:3:14576:14643	3319193	0	True				
ANR	3319744	AssignmentExpression	ins_bits = ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	0		=			
ANR	3319745	Identifier	ins_bits		3319193	0					
ANR	3319746	ShiftExpression	ins_bits << ( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	1		<<			
ANR	3319747	Identifier	ins_bits		3319193	0					
ANR	3319748	ShiftExpression	( 32 - ins_token_len ) >> ( 32 - ins_token_len )		3319193	1		>>			
ANR	3319749	AdditiveExpression	32 - ins_token_len		3319193	0		-			
ANR	3319750	PrimaryExpression	32		3319193	0					
ANR	3319751	Identifier	ins_token_len		3319193	1					
ANR	3319752	AdditiveExpression	32 - ins_token_len		3319193	1		-			
ANR	3319753	PrimaryExpression	32		3319193	0					
ANR	3319754	Identifier	ins_token_len		3319193	1					
ANR	3319755	IfStatement	if ( reg_arg && * reg_arg == 'i' )		3319193	50					
ANR	3319756	Condition	reg_arg && * reg_arg == 'i'	627:6:14655:14680	3319193	0	True				
ANR	3319757	AndExpression	reg_arg && * reg_arg == 'i'		3319193	0		&&			
ANR	3319758	Identifier	reg_arg		3319193	0					
ANR	3319759	EqualityExpression	* reg_arg == 'i'		3319193	1		==			
ANR	3319760	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319761	UnaryOperator	*		3319193	0					
ANR	3319762	Identifier	reg_arg		3319193	1					
ANR	3319763	PrimaryExpression	'i'		3319193	1					
ANR	3319764	CompoundStatement		100:34:2440:2440	3319193	1					
ANR	3319765	ExpressionStatement	"res = strdup ( """" )"	628:3:14688:14705	3319193	0	True				
ANR	3319766	AssignmentExpression	"res = strdup ( """" )"		3319193	0		=			
ANR	3319767	Identifier	res		3319193	0					
ANR	3319768	CallExpression	"strdup ( """" )"		3319193	1					
ANR	3319769	Callee	strdup		3319193	0					
ANR	3319770	Identifier	strdup		3319193	0					
ANR	3319771	ArgumentList	""""""		3319193	1					
ANR	3319772	Argument	""""""		3319193	0					
ANR	3319773	PrimaryExpression	""""""		3319193	0					
ANR	3319774	ElseStatement	else		3319193	0					
ANR	3319775	CompoundStatement		102:9:2473:2473	3319193	0					
ANR	3319776	Statement	sprintf	630:3:14721:14727	3319193	0	True				
ANR	3319777	Statement	(	630:10:14728:14728	3319193	1	True				
ANR	3319778	Statement	buff_aux	630:11:14729:14736	3319193	2	True				
ANR	3319779	Statement	","	630:19:14737:14737	3319193	3	True				
ANR	3319780	Statement	"""#0x%06lx"""	630:21:14739:14748	3319193	4	True				
ANR	3319781	Statement	","	630:31:14749:14749	3319193	5	True				
ANR	3319782	Statement	(	630:33:14751:14751	3319193	6	True				
ANR	3319783	Statement	long	630:34:14752:14755	3319193	7	True				
ANR	3319784	Statement	unsigned	630:39:14757:14764	3319193	8	True				
ANR	3319785	Statement	int	630:48:14766:14768	3319193	9	True				
ANR	3319786	Statement	)	630:51:14769:14769	3319193	10	True				
ANR	3319787	Statement	ins_bits	630:52:14770:14777	3319193	11	True				
ANR	3319788	Statement	)	630:60:14778:14778	3319193	12	True				
ANR	3319789	ExpressionStatement		630:61:14779:14779	3319193	13	True				
ANR	3319790	ExpressionStatement	res = strdup ( buff_aux )	631:3:14784:14806	3319193	14	True				
ANR	3319791	AssignmentExpression	res = strdup ( buff_aux )		3319193	0		=			
ANR	3319792	Identifier	res		3319193	0					
ANR	3319793	CallExpression	strdup ( buff_aux )		3319193	1					
ANR	3319794	Callee	strdup		3319193	0					
ANR	3319795	Identifier	strdup		3319193	0					
ANR	3319796	ArgumentList	buff_aux		3319193	1					
ANR	3319797	Argument	buff_aux		3319193	0					
ANR	3319798	Identifier	buff_aux		3319193	0					
ANR	3319799	BreakStatement	break ;	633:2:14814:14819	3319193	51	True				
ANR	3319800	Label	case 42 :	634:1:14822:14829	3319193	52	True				
ANR	3319801	ExpressionStatement	flag = 0	635:2:14833:14841	3319193	53	True				
ANR	3319802	AssignmentExpression	flag = 0		3319193	0		=			
ANR	3319803	Identifier	flag		3319193	0					
ANR	3319804	PrimaryExpression	0		3319193	1					
ANR	3319805	IfStatement	if ( reg_arg && * reg_arg == '3' )		3319193	54					
ANR	3319806	Condition	reg_arg && * reg_arg == '3'	636:6:14849:14874	3319193	0	True				
ANR	3319807	AndExpression	reg_arg && * reg_arg == '3'		3319193	0		&&			
ANR	3319808	Identifier	reg_arg		3319193	0					
ANR	3319809	EqualityExpression	* reg_arg == '3'		3319193	1		==			
ANR	3319810	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319811	UnaryOperator	*		3319193	0					
ANR	3319812	Identifier	reg_arg		3319193	1					
ANR	3319813	PrimaryExpression	'3'		3319193	1					
ANR	3319814	CompoundStatement		109:34:2634:2634	3319193	1					
ANR	3319815	ExpressionStatement	flag = ins_bits & 1	637:3:14882:14901	3319193	0	True				
ANR	3319816	AssignmentExpression	flag = ins_bits & 1		3319193	0		=			
ANR	3319817	Identifier	flag		3319193	0					
ANR	3319818	BitAndExpression	ins_bits & 1		3319193	1		&			
ANR	3319819	Identifier	ins_bits		3319193	0					
ANR	3319820	PrimaryExpression	1		3319193	1					
ANR	3319821	ExpressionStatement	ins_bits = ins_bits >> 1	638:3:14906:14930	3319193	1	True				
ANR	3319822	AssignmentExpression	ins_bits = ins_bits >> 1		3319193	0		=			
ANR	3319823	Identifier	ins_bits		3319193	0					
ANR	3319824	ShiftExpression	ins_bits >> 1		3319193	1		>>			
ANR	3319825	Identifier	ins_bits		3319193	0					
ANR	3319826	PrimaryExpression	1		3319193	1					
ANR	3319827	ExpressionStatement	reg_arg ++	639:3:14935:14944	3319193	2	True				
ANR	3319828	PostIncDecOperationExpression	reg_arg ++		3319193	0					
ANR	3319829	Identifier	reg_arg		3319193	0					
ANR	3319830	IncDec	++		3319193	1					
ANR	3319831	IfStatement	if ( magic_value & 1 )		3319193	55					
ANR	3319832	Condition	magic_value & 1	641:6:14956:14970	3319193	0	True				
ANR	3319833	BitAndExpression	magic_value & 1		3319193	0		&			
ANR	3319834	Identifier	magic_value		3319193	0					
ANR	3319835	PrimaryExpression	1		3319193	1					
ANR	3319836	CompoundStatement		114:23:2730:2730	3319193	1					
ANR	3319837	ExpressionStatement	"aux = get_sim_reg ( reg_arg , ins_bits )"	642:3:14978:15014	3319193	0	True				
ANR	3319838	AssignmentExpression	"aux = get_sim_reg ( reg_arg , ins_bits )"		3319193	0		=			
ANR	3319839	Identifier	aux		3319193	0					
ANR	3319840	CallExpression	"get_sim_reg ( reg_arg , ins_bits )"		3319193	1					
ANR	3319841	Callee	get_sim_reg		3319193	0					
ANR	3319842	Identifier	get_sim_reg		3319193	0					
ANR	3319843	ArgumentList	reg_arg		3319193	1					
ANR	3319844	Argument	reg_arg		3319193	0					
ANR	3319845	Identifier	reg_arg		3319193	0					
ANR	3319846	Argument	ins_bits		3319193	1					
ANR	3319847	Identifier	ins_bits		3319193	0					
ANR	3319848	ElseStatement	else		3319193	0					
ANR	3319849	IfStatement	if ( reg_arg )		3319193	0					
ANR	3319850	Condition	reg_arg	643:13:15029:15035	3319193	0	True				
ANR	3319851	Identifier	reg_arg		3319193	0					
ANR	3319852	CompoundStatement		116:22:2795:2795	3319193	1					
ANR	3319853	SwitchStatement	switch ( * reg_arg )		3319193	0					
ANR	3319854	Condition	* reg_arg	644:11:15051:15058	3319193	0	True				
ANR	3319855	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3319856	UnaryOperator	*		3319193	0					
ANR	3319857	Identifier	reg_arg		3319193	1					
ANR	3319858	CompoundStatement		117:21:2818:2818	3319193	1					
ANR	3319859	Label	case 'b' :	645:3:15066:15074	3319193	0	True				
ANR	3319860	Label	case 'd' :	646:3:15079:15087	3319193	1	True				
ANR	3319861	ExpressionStatement	reg_arg ++	647:4:15093:15102	3319193	2	True				
ANR	3319862	PostIncDecOperationExpression	reg_arg ++		3319193	0					
ANR	3319863	Identifier	reg_arg		3319193	0					
ANR	3319864	IncDec	++		3319193	1					
ANR	3319865	BreakStatement	break ;	648:4:15108:15113	3319193	3	True				
ANR	3319866	Label	case '!' :	649:3:15118:15126	3319193	4	True				
ANR	3319867	ExpressionStatement	reg_arg += 10	651:4:15173:15184	3319193	5	True				
ANR	3319868	AssignmentExpression	reg_arg += 10		3319193	0		+=			
ANR	3319869	Identifier	reg_arg		3319193	0					
ANR	3319870	PrimaryExpression	10		3319193	1					
ANR	3319871	BreakStatement	break ;	653:4:15255:15260	3319193	6	True				
ANR	3319872	ExpressionStatement	"aux = get_AR_regs_class2 ( ins_bits , & ret_len , ins_len + ins_pos , 1 )"	655:3:15270:15336	3319193	1	True				
ANR	3319873	AssignmentExpression	"aux = get_AR_regs_class2 ( ins_bits , & ret_len , ins_len + ins_pos , 1 )"		3319193	0		=			
ANR	3319874	Identifier	aux		3319193	0					
ANR	3319875	CallExpression	"get_AR_regs_class2 ( ins_bits , & ret_len , ins_len + ins_pos , 1 )"		3319193	1					
ANR	3319876	Callee	get_AR_regs_class2		3319193	0					
ANR	3319877	Identifier	get_AR_regs_class2		3319193	0					
ANR	3319878	ArgumentList	ins_bits		3319193	1					
ANR	3319879	Argument	ins_bits		3319193	0					
ANR	3319880	Identifier	ins_bits		3319193	0					
ANR	3319881	Argument	& ret_len		3319193	1					
ANR	3319882	UnaryOperationExpression	& ret_len		3319193	0					
ANR	3319883	UnaryOperator	&		3319193	0					
ANR	3319884	Identifier	ret_len		3319193	1					
ANR	3319885	Argument	ins_len + ins_pos		3319193	2					
ANR	3319886	AdditiveExpression	ins_len + ins_pos		3319193	0		+			
ANR	3319887	Identifier	ins_len		3319193	0					
ANR	3319888	Identifier	ins_pos		3319193	1					
ANR	3319889	Argument	1		3319193	3					
ANR	3319890	PrimaryExpression	1		3319193	0					
ANR	3319891	IfStatement	if ( magic_value & 1 )		3319193	56					
ANR	3319892	Condition	magic_value & 1	657:6:15348:15362	3319193	0	True				
ANR	3319893	BitAndExpression	magic_value & 1		3319193	0		&			
ANR	3319894	Identifier	magic_value		3319193	0					
ANR	3319895	PrimaryExpression	1		3319193	1					
ANR	3319896	CompoundStatement		130:23:3122:3122	3319193	1					
ANR	3319897	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	658:3:15370:15399	3319193	0	True				
ANR	3319898	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3319899	Identifier	aux		3319193	0					
ANR	3319900	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3319901	Callee	strcat_dup		3319193	0					
ANR	3319902	Identifier	strcat_dup		3319193	0					
ANR	3319903	ArgumentList	aux		3319193	1					
ANR	3319904	Argument	aux		3319193	0					
ANR	3319905	Identifier	aux		3319193	0					
ANR	3319906	Argument	""")"""		3319193	1					
ANR	3319907	PrimaryExpression	""")"""		3319193	0					
ANR	3319908	Argument	1		3319193	2					
ANR	3319909	PrimaryExpression	1		3319193	0					
ANR	3319910	ExpressionStatement	"aux = strcat_dup ( ""mmap("" , aux , 2 )"	659:3:15404:15437	3319193	1	True				
ANR	3319911	AssignmentExpression	"aux = strcat_dup ( ""mmap("" , aux , 2 )"		3319193	0		=			
ANR	3319912	Identifier	aux		3319193	0					
ANR	3319913	CallExpression	"strcat_dup ( ""mmap("" , aux , 2 )"		3319193	1					
ANR	3319914	Callee	strcat_dup		3319193	0					
ANR	3319915	Identifier	strcat_dup		3319193	0					
ANR	3319916	ArgumentList	"""mmap("""		3319193	1					
ANR	3319917	Argument	"""mmap("""		3319193	0					
ANR	3319918	PrimaryExpression	"""mmap("""		3319193	0					
ANR	3319919	Argument	aux		3319193	1					
ANR	3319920	Identifier	aux		3319193	0					
ANR	3319921	Argument	2		3319193	2					
ANR	3319922	PrimaryExpression	2		3319193	0					
ANR	3319923	ElseStatement	else		3319193	0					
ANR	3319924	IfStatement	if ( ( magic_value & 4 ) && is_linear_circular ( ins_bits ) )		3319193	0					
ANR	3319925	Condition	( magic_value & 4 ) && is_linear_circular ( ins_bits )	660:13:15452:15500	3319193	0	True				
ANR	3319926	AndExpression	( magic_value & 4 ) && is_linear_circular ( ins_bits )		3319193	0		&&			
ANR	3319927	BitAndExpression	magic_value & 4		3319193	0		&			
ANR	3319928	Identifier	magic_value		3319193	0					
ANR	3319929	PrimaryExpression	4		3319193	1					
ANR	3319930	CallExpression	is_linear_circular ( ins_bits )		3319193	1					
ANR	3319931	Callee	is_linear_circular		3319193	0					
ANR	3319932	Identifier	is_linear_circular		3319193	0					
ANR	3319933	ArgumentList	ins_bits		3319193	1					
ANR	3319934	Argument	ins_bits		3319193	0					
ANR	3319935	Identifier	ins_bits		3319193	0					
ANR	3319936	CompoundStatement		133:64:3260:3260	3319193	1					
ANR	3319937	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	661:3:15508:15537	3319193	0	True				
ANR	3319938	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3319939	Identifier	aux		3319193	0					
ANR	3319940	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3319941	Callee	strcat_dup		3319193	0					
ANR	3319942	Identifier	strcat_dup		3319193	0					
ANR	3319943	ArgumentList	aux		3319193	1					
ANR	3319944	Argument	aux		3319193	0					
ANR	3319945	Identifier	aux		3319193	0					
ANR	3319946	Argument	""")"""		3319193	1					
ANR	3319947	PrimaryExpression	""")"""		3319193	0					
ANR	3319948	Argument	1		3319193	2					
ANR	3319949	PrimaryExpression	1		3319193	0					
ANR	3319950	ExpressionStatement	"aux = strcat_dup ( ""linear("" , aux , 2 )"	662:3:15542:15577	3319193	1	True				
ANR	3319951	AssignmentExpression	"aux = strcat_dup ( ""linear("" , aux , 2 )"		3319193	0		=			
ANR	3319952	Identifier	aux		3319193	0					
ANR	3319953	CallExpression	"strcat_dup ( ""linear("" , aux , 2 )"		3319193	1					
ANR	3319954	Callee	strcat_dup		3319193	0					
ANR	3319955	Identifier	strcat_dup		3319193	0					
ANR	3319956	ArgumentList	"""linear("""		3319193	1					
ANR	3319957	Argument	"""linear("""		3319193	0					
ANR	3319958	PrimaryExpression	"""linear("""		3319193	0					
ANR	3319959	Argument	aux		3319193	1					
ANR	3319960	Identifier	aux		3319193	0					
ANR	3319961	Argument	2		3319193	2					
ANR	3319962	PrimaryExpression	2		3319193	0					
ANR	3319963	ElseStatement	else		3319193	0					
ANR	3319964	IfStatement	if ( ( magic_value & 8 ) && is_linear_circular ( ins_bits ) )		3319193	0					
ANR	3319965	Condition	( magic_value & 8 ) && is_linear_circular ( ins_bits )	663:13:15592:15640	3319193	0	True				
ANR	3319966	AndExpression	( magic_value & 8 ) && is_linear_circular ( ins_bits )		3319193	0		&&			
ANR	3319967	BitAndExpression	magic_value & 8		3319193	0		&			
ANR	3319968	Identifier	magic_value		3319193	0					
ANR	3319969	PrimaryExpression	8		3319193	1					
ANR	3319970	CallExpression	is_linear_circular ( ins_bits )		3319193	1					
ANR	3319971	Callee	is_linear_circular		3319193	0					
ANR	3319972	Identifier	is_linear_circular		3319193	0					
ANR	3319973	ArgumentList	ins_bits		3319193	1					
ANR	3319974	Argument	ins_bits		3319193	0					
ANR	3319975	Identifier	ins_bits		3319193	0					
ANR	3319976	CompoundStatement		136:64:3400:3400	3319193	1					
ANR	3319977	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	664:3:15648:15677	3319193	0	True				
ANR	3319978	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3319979	Identifier	aux		3319193	0					
ANR	3319980	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3319981	Callee	strcat_dup		3319193	0					
ANR	3319982	Identifier	strcat_dup		3319193	0					
ANR	3319983	ArgumentList	aux		3319193	1					
ANR	3319984	Argument	aux		3319193	0					
ANR	3319985	Identifier	aux		3319193	0					
ANR	3319986	Argument	""")"""		3319193	1					
ANR	3319987	PrimaryExpression	""")"""		3319193	0					
ANR	3319988	Argument	1		3319193	2					
ANR	3319989	PrimaryExpression	1		3319193	0					
ANR	3319990	ExpressionStatement	"aux = strcat_dup ( ""circular("" , aux , 2 )"	665:3:15682:15719	3319193	1	True				
ANR	3319991	AssignmentExpression	"aux = strcat_dup ( ""circular("" , aux , 2 )"		3319193	0		=			
ANR	3319992	Identifier	aux		3319193	0					
ANR	3319993	CallExpression	"strcat_dup ( ""circular("" , aux , 2 )"		3319193	1					
ANR	3319994	Callee	strcat_dup		3319193	0					
ANR	3319995	Identifier	strcat_dup		3319193	0					
ANR	3319996	ArgumentList	"""circular("""		3319193	1					
ANR	3319997	Argument	"""circular("""		3319193	0					
ANR	3319998	PrimaryExpression	"""circular("""		3319193	0					
ANR	3319999	Argument	aux		3319193	1					
ANR	3320000	Identifier	aux		3319193	0					
ANR	3320001	Argument	2		3319193	2					
ANR	3320002	PrimaryExpression	2		3319193	0					
ANR	3320003	ElseStatement	else		3319193	0					
ANR	3320004	IfStatement	if ( magic_value & 2 )		3319193	0					
ANR	3320005	Condition	magic_value & 2	666:13:15734:15748	3319193	0	True				
ANR	3320006	BitAndExpression	magic_value & 2		3319193	0		&			
ANR	3320007	Identifier	magic_value		3319193	0					
ANR	3320008	PrimaryExpression	2		3319193	1					
ANR	3320009	CompoundStatement		139:30:3508:3508	3319193	1					
ANR	3320010	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	667:3:15756:15785	3319193	0	True				
ANR	3320011	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320012	Identifier	aux		3319193	0					
ANR	3320013	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320014	Callee	strcat_dup		3319193	0					
ANR	3320015	Identifier	strcat_dup		3319193	0					
ANR	3320016	ArgumentList	aux		3319193	1					
ANR	3320017	Argument	aux		3319193	0					
ANR	3320018	Identifier	aux		3319193	0					
ANR	3320019	Argument	""")"""		3319193	1					
ANR	3320020	PrimaryExpression	""")"""		3319193	0					
ANR	3320021	Argument	1		3319193	2					
ANR	3320022	PrimaryExpression	1		3319193	0					
ANR	3320023	ExpressionStatement	"aux = strcat_dup ( ""lock("" , aux , 2 )"	668:3:15790:15823	3319193	1	True				
ANR	3320024	AssignmentExpression	"aux = strcat_dup ( ""lock("" , aux , 2 )"		3319193	0		=			
ANR	3320025	Identifier	aux		3319193	0					
ANR	3320026	CallExpression	"strcat_dup ( ""lock("" , aux , 2 )"		3319193	1					
ANR	3320027	Callee	strcat_dup		3319193	0					
ANR	3320028	Identifier	strcat_dup		3319193	0					
ANR	3320029	ArgumentList	"""lock("""		3319193	1					
ANR	3320030	Argument	"""lock("""		3319193	0					
ANR	3320031	PrimaryExpression	"""lock("""		3319193	0					
ANR	3320032	Argument	aux		3319193	1					
ANR	3320033	Identifier	aux		3319193	0					
ANR	3320034	Argument	2		3319193	2					
ANR	3320035	PrimaryExpression	2		3319193	0					
ANR	3320036	ElseStatement	else		3319193	0					
ANR	3320037	IfStatement	if ( reg_arg )		3319193	0					
ANR	3320038	Condition	reg_arg	669:13:15838:15844	3319193	0	True				
ANR	3320039	Identifier	reg_arg		3319193	0					
ANR	3320040	CompoundStatement		142:22:3604:3604	3319193	1					
ANR	3320041	IfStatement	"if ( ( ( magic_value & 0x10 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && strchr ( reg_arg , 'w' ) ) )"		3319193	0					
ANR	3320042	Condition	"( ( magic_value & 0x10 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && strchr ( reg_arg , 'w' ) )"	670:7:15856:15957	3319193	0	True				
ANR	3320043	OrExpression	"( ( magic_value & 0x10 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && strchr ( reg_arg , 'w' ) )"		3319193	0		||			
ANR	3320044	AndExpression	"( magic_value & 0x10 ) && strchr ( reg_arg , 'r' )"		3319193	0		&&			
ANR	3320045	BitAndExpression	magic_value & 0x10		3319193	0		&			
ANR	3320046	Identifier	magic_value		3319193	0					
ANR	3320047	PrimaryExpression	0x10		3319193	1					
ANR	3320048	CallExpression	"strchr ( reg_arg , 'r' )"		3319193	1					
ANR	3320049	Callee	strchr		3319193	0					
ANR	3320050	Identifier	strchr		3319193	0					
ANR	3320051	ArgumentList	reg_arg		3319193	1					
ANR	3320052	Argument	reg_arg		3319193	0					
ANR	3320053	Identifier	reg_arg		3319193	0					
ANR	3320054	Argument	'r'		3319193	1					
ANR	3320055	PrimaryExpression	'r'		3319193	0					
ANR	3320056	AndExpression	"( magic_value & 0x20 ) && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320057	BitAndExpression	magic_value & 0x20		3319193	0		&			
ANR	3320058	Identifier	magic_value		3319193	0					
ANR	3320059	PrimaryExpression	0x20		3319193	1					
ANR	3320060	CallExpression	"strchr ( reg_arg , 'w' )"		3319193	1					
ANR	3320061	Callee	strchr		3319193	0					
ANR	3320062	Identifier	strchr		3319193	0					
ANR	3320063	ArgumentList	reg_arg		3319193	1					
ANR	3320064	Argument	reg_arg		3319193	0					
ANR	3320065	Identifier	reg_arg		3319193	0					
ANR	3320066	Argument	'w'		3319193	1					
ANR	3320067	PrimaryExpression	'w'		3319193	0					
ANR	3320068	CompoundStatement		144:54:3717:3717	3319193	1					
ANR	3320069	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	673:4:15967:15996	3319193	0	True				
ANR	3320070	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320071	Identifier	aux		3319193	0					
ANR	3320072	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320073	Callee	strcat_dup		3319193	0					
ANR	3320074	Identifier	strcat_dup		3319193	0					
ANR	3320075	ArgumentList	aux		3319193	1					
ANR	3320076	Argument	aux		3319193	0					
ANR	3320077	Identifier	aux		3319193	0					
ANR	3320078	Argument	""")"""		3319193	1					
ANR	3320079	PrimaryExpression	""")"""		3319193	0					
ANR	3320080	Argument	1		3319193	2					
ANR	3320081	PrimaryExpression	1		3319193	0					
ANR	3320082	ExpressionStatement	"aux = strcat_dup ( ""port("" , aux , 2 )"	674:4:16002:16035	3319193	1	True				
ANR	3320083	AssignmentExpression	"aux = strcat_dup ( ""port("" , aux , 2 )"		3319193	0		=			
ANR	3320084	Identifier	aux		3319193	0					
ANR	3320085	CallExpression	"strcat_dup ( ""port("" , aux , 2 )"		3319193	1					
ANR	3320086	Callee	strcat_dup		3319193	0					
ANR	3320087	Identifier	strcat_dup		3319193	0					
ANR	3320088	ArgumentList	"""port("""		3319193	1					
ANR	3320089	Argument	"""port("""		3319193	0					
ANR	3320090	PrimaryExpression	"""port("""		3319193	0					
ANR	3320091	Argument	aux		3319193	1					
ANR	3320092	Identifier	aux		3319193	0					
ANR	3320093	Argument	2		3319193	2					
ANR	3320094	PrimaryExpression	2		3319193	0					
ANR	3320095	ElseStatement	else		3319193	0					
ANR	3320096	IfStatement	"if ( ( ( magic_value & 0x40 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && strchr ( reg_arg , 'w' ) ) )"		3319193	0					
ANR	3320097	Condition	"( ( magic_value & 0x40 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && strchr ( reg_arg , 'w' ) )"	676:3:16055:16159	3319193	0	True				
ANR	3320098	OrExpression	"( ( magic_value & 0x40 ) && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && strchr ( reg_arg , 'w' ) )"		3319193	0		||			
ANR	3320099	AndExpression	"( magic_value & 0x40 ) && strchr ( reg_arg , 'r' )"		3319193	0		&&			
ANR	3320100	BitAndExpression	magic_value & 0x40		3319193	0		&			
ANR	3320101	Identifier	magic_value		3319193	0					
ANR	3320102	PrimaryExpression	0x40		3319193	1					
ANR	3320103	CallExpression	"strchr ( reg_arg , 'r' )"		3319193	1					
ANR	3320104	Callee	strchr		3319193	0					
ANR	3320105	Identifier	strchr		3319193	0					
ANR	3320106	ArgumentList	reg_arg		3319193	1					
ANR	3320107	Argument	reg_arg		3319193	0					
ANR	3320108	Identifier	reg_arg		3319193	0					
ANR	3320109	Argument	'r'		3319193	1					
ANR	3320110	PrimaryExpression	'r'		3319193	0					
ANR	3320111	AndExpression	"( magic_value & 0x80000000 ) && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320112	BitAndExpression	magic_value & 0x80000000		3319193	0		&			
ANR	3320113	Identifier	magic_value		3319193	0					
ANR	3320114	PrimaryExpression	0x80000000		3319193	1					
ANR	3320115	CallExpression	"strchr ( reg_arg , 'w' )"		3319193	1					
ANR	3320116	Callee	strchr		3319193	0					
ANR	3320117	Identifier	strchr		3319193	0					
ANR	3320118	ArgumentList	reg_arg		3319193	1					
ANR	3320119	Argument	reg_arg		3319193	0					
ANR	3320120	Identifier	reg_arg		3319193	0					
ANR	3320121	Argument	'w'		3319193	1					
ANR	3320122	PrimaryExpression	'w'		3319193	0					
ANR	3320123	CompoundStatement		150:57:3919:3919	3319193	1					
ANR	3320124	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	679:4:16169:16198	3319193	0	True				
ANR	3320125	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320126	Identifier	aux		3319193	0					
ANR	3320127	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320128	Callee	strcat_dup		3319193	0					
ANR	3320129	Identifier	strcat_dup		3319193	0					
ANR	3320130	ArgumentList	aux		3319193	1					
ANR	3320131	Argument	aux		3319193	0					
ANR	3320132	Identifier	aux		3319193	0					
ANR	3320133	Argument	""")"""		3319193	1					
ANR	3320134	PrimaryExpression	""")"""		3319193	0					
ANR	3320135	Argument	1		3319193	2					
ANR	3320136	PrimaryExpression	1		3319193	0					
ANR	3320137	ExpressionStatement	"aux = strcat_dup ( ""volatile("" , aux , 2 )"	680:4:16204:16241	3319193	1	True				
ANR	3320138	AssignmentExpression	"aux = strcat_dup ( ""volatile("" , aux , 2 )"		3319193	0		=			
ANR	3320139	Identifier	aux		3319193	0					
ANR	3320140	CallExpression	"strcat_dup ( ""volatile("" , aux , 2 )"		3319193	1					
ANR	3320141	Callee	strcat_dup		3319193	0					
ANR	3320142	Identifier	strcat_dup		3319193	0					
ANR	3320143	ArgumentList	"""volatile("""		3319193	1					
ANR	3320144	Argument	"""volatile("""		3319193	0					
ANR	3320145	PrimaryExpression	"""volatile("""		3319193	0					
ANR	3320146	Argument	aux		3319193	1					
ANR	3320147	Identifier	aux		3319193	0					
ANR	3320148	Argument	2		3319193	2					
ANR	3320149	PrimaryExpression	2		3319193	0					
ANR	3320150	IfStatement	if ( flag )		3319193	57					
ANR	3320151	Condition	flag	684:6:16259:16262	3319193	0	True				
ANR	3320152	Identifier	flag		3319193	0					
ANR	3320153	CompoundStatement		157:12:4022:4022	3319193	1					
ANR	3320154	ExpressionStatement	"res = strcat_dup ( ""t3 = "" , aux , 2 )"	685:3:16270:16303	3319193	0	True				
ANR	3320155	AssignmentExpression	"res = strcat_dup ( ""t3 = "" , aux , 2 )"		3319193	0		=			
ANR	3320156	Identifier	res		3319193	0					
ANR	3320157	CallExpression	"strcat_dup ( ""t3 = "" , aux , 2 )"		3319193	1					
ANR	3320158	Callee	strcat_dup		3319193	0					
ANR	3320159	Identifier	strcat_dup		3319193	0					
ANR	3320160	ArgumentList	"""t3 = """		3319193	1					
ANR	3320161	Argument	"""t3 = """		3319193	0					
ANR	3320162	PrimaryExpression	"""t3 = """		3319193	0					
ANR	3320163	Argument	aux		3319193	1					
ANR	3320164	Identifier	aux		3319193	0					
ANR	3320165	Argument	2		3319193	2					
ANR	3320166	PrimaryExpression	2		3319193	0					
ANR	3320167	ElseStatement	else		3319193	0					
ANR	3320168	CompoundStatement		159:9:4071:4071	3319193	0					
ANR	3320169	ExpressionStatement	res = aux	687:3:16319:16328	3319193	0	True				
ANR	3320170	AssignmentExpression	res = aux		3319193	0		=			
ANR	3320171	Identifier	res		3319193	0					
ANR	3320172	Identifier	aux		3319193	1					
ANR	3320173	ExpressionStatement	* ret_reg_len = ret_len	688:3:16333:16355	3319193	1	True				
ANR	3320174	AssignmentExpression	* ret_reg_len = ret_len		3319193	0		=			
ANR	3320175	UnaryOperationExpression	* ret_reg_len		3319193	0					
ANR	3320176	UnaryOperator	*		3319193	0					
ANR	3320177	Identifier	ret_reg_len		3319193	1					
ANR	3320178	Identifier	ret_len		3319193	1					
ANR	3320179	BreakStatement	break ;	690:2:16363:16368	3319193	58	True				
ANR	3320180	Label	case 79 :	691:1:16371:16378	3319193	59	True				
ANR	3320181	ExpressionStatement	res = get_trans_reg ( ins_bits )	692:2:16382:16411	3319193	60	True				
ANR	3320182	AssignmentExpression	res = get_trans_reg ( ins_bits )		3319193	0		=			
ANR	3320183	Identifier	res		3319193	0					
ANR	3320184	CallExpression	get_trans_reg ( ins_bits )		3319193	1					
ANR	3320185	Callee	get_trans_reg		3319193	0					
ANR	3320186	Identifier	get_trans_reg		3319193	0					
ANR	3320187	ArgumentList	ins_bits		3319193	1					
ANR	3320188	Argument	ins_bits		3319193	0					
ANR	3320189	Identifier	ins_bits		3319193	0					
ANR	3320190	IfStatement	if ( ! res )		3319193	61					
ANR	3320191	Condition	! res	693:6:16419:16422	3319193	0	True				
ANR	3320192	UnaryOperationExpression	! res		3319193	0					
ANR	3320193	UnaryOperator	!		3319193	0					
ANR	3320194	Identifier	res		3319193	1					
ANR	3320195	CompoundStatement		166:12:4182:4182	3319193	1					
ANR	3320196	ExpressionStatement	* err_code = - 1	694:3:16430:16444	3319193	0	True				
ANR	3320197	AssignmentExpression	* err_code = - 1		3319193	0		=			
ANR	3320198	UnaryOperationExpression	* err_code		3319193	0					
ANR	3320199	UnaryOperator	*		3319193	0					
ANR	3320200	Identifier	err_code		3319193	1					
ANR	3320201	UnaryOperationExpression	- 1		3319193	1					
ANR	3320202	UnaryOperator	-		3319193	0					
ANR	3320203	PrimaryExpression	1		3319193	1					
ANR	3320204	BreakStatement	break ;	696:2:16452:16457	3319193	62	True				
ANR	3320205	Label	case 49 :	697:1:16460:16467	3319193	63	True				
ANR	3320206	IfStatement	if ( reg_arg )		3319193	64					
ANR	3320207	Condition	reg_arg	698:6:16475:16481	3319193	0	True				
ANR	3320208	Identifier	reg_arg		3319193	0					
ANR	3320209	CompoundStatement		171:15:4241:4241	3319193	1					
ANR	3320210	IfStatement	if ( * reg_arg == '1' )		3319193	0					
ANR	3320211	Condition	* reg_arg == '1'	699:7:16493:16507	3319193	0	True				
ANR	3320212	EqualityExpression	* reg_arg == '1'		3319193	0		==			
ANR	3320213	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320214	UnaryOperator	*		3319193	0					
ANR	3320215	Identifier	reg_arg		3319193	1					
ANR	3320216	PrimaryExpression	'1'		3319193	1					
ANR	3320217	CompoundStatement		172:24:4267:4267	3319193	1					
ANR	3320218	ExpressionStatement	res = get_tc2_tc1 ( ins_bits >> 1 )	700:4:16516:16548	3319193	0	True				
ANR	3320219	AssignmentExpression	res = get_tc2_tc1 ( ins_bits >> 1 )		3319193	0		=			
ANR	3320220	Identifier	res		3319193	0					
ANR	3320221	CallExpression	get_tc2_tc1 ( ins_bits >> 1 )		3319193	1					
ANR	3320222	Callee	get_tc2_tc1		3319193	0					
ANR	3320223	Identifier	get_tc2_tc1		3319193	0					
ANR	3320224	ArgumentList	ins_bits >> 1		3319193	1					
ANR	3320225	Argument	ins_bits >> 1		3319193	0					
ANR	3320226	ShiftExpression	ins_bits >> 1		3319193	0		>>			
ANR	3320227	Identifier	ins_bits		3319193	0					
ANR	3320228	PrimaryExpression	1		3319193	1					
ANR	3320229	ElseStatement	else		3319193	0					
ANR	3320230	IfStatement	if ( * reg_arg == '2' )		3319193	0					
ANR	3320231	Condition	* reg_arg == '2'	701:14:16564:16578	3319193	0	True				
ANR	3320232	EqualityExpression	* reg_arg == '2'		3319193	0		==			
ANR	3320233	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320234	UnaryOperator	*		3319193	0					
ANR	3320235	Identifier	reg_arg		3319193	1					
ANR	3320236	PrimaryExpression	'2'		3319193	1					
ANR	3320237	CompoundStatement		174:31:4338:4338	3319193	1					
ANR	3320238	ExpressionStatement	res = get_tc2_tc1 ( ins_bits & 1 )	702:4:16587:16619	3319193	0	True				
ANR	3320239	AssignmentExpression	res = get_tc2_tc1 ( ins_bits & 1 )		3319193	0		=			
ANR	3320240	Identifier	res		3319193	0					
ANR	3320241	CallExpression	get_tc2_tc1 ( ins_bits & 1 )		3319193	1					
ANR	3320242	Callee	get_tc2_tc1		3319193	0					
ANR	3320243	Identifier	get_tc2_tc1		3319193	0					
ANR	3320244	ArgumentList	ins_bits & 1		3319193	1					
ANR	3320245	Argument	ins_bits & 1		3319193	0					
ANR	3320246	BitAndExpression	ins_bits & 1		3319193	0		&			
ANR	3320247	Identifier	ins_bits		3319193	0					
ANR	3320248	PrimaryExpression	1		3319193	1					
ANR	3320249	ElseStatement	else		3319193	0					
ANR	3320250	CompoundStatement		177:9:4392:4392	3319193	0					
ANR	3320251	ExpressionStatement	res = get_tc2_tc1 ( ins_bits )	705:3:16640:16668	3319193	0	True				
ANR	3320252	AssignmentExpression	res = get_tc2_tc1 ( ins_bits )		3319193	0		=			
ANR	3320253	Identifier	res		3319193	0					
ANR	3320254	CallExpression	get_tc2_tc1 ( ins_bits )		3319193	1					
ANR	3320255	Callee	get_tc2_tc1		3319193	0					
ANR	3320256	Identifier	get_tc2_tc1		3319193	0					
ANR	3320257	ArgumentList	ins_bits		3319193	1					
ANR	3320258	Argument	ins_bits		3319193	0					
ANR	3320259	Identifier	ins_bits		3319193	0					
ANR	3320260	IfStatement	if ( ! res )		3319193	65					
ANR	3320261	Condition	! res	707:6:16680:16683	3319193	0	True				
ANR	3320262	UnaryOperationExpression	! res		3319193	0					
ANR	3320263	UnaryOperator	!		3319193	0					
ANR	3320264	Identifier	res		3319193	1					
ANR	3320265	CompoundStatement		180:12:4443:4443	3319193	1					
ANR	3320266	ExpressionStatement	* err_code = - 1	708:3:16691:16705	3319193	0	True				
ANR	3320267	AssignmentExpression	* err_code = - 1		3319193	0		=			
ANR	3320268	UnaryOperationExpression	* err_code		3319193	0					
ANR	3320269	UnaryOperator	*		3319193	0					
ANR	3320270	Identifier	err_code		3319193	1					
ANR	3320271	UnaryOperationExpression	- 1		3319193	1					
ANR	3320272	UnaryOperator	-		3319193	0					
ANR	3320273	PrimaryExpression	1		3319193	1					
ANR	3320274	ReturnStatement	return NULL ;	709:3:16710:16721	3319193	1	True				
ANR	3320275	Identifier	NULL		3319193	0					
ANR	3320276	BreakStatement	break ;	711:2:16729:16734	3319193	66	True				
ANR	3320277	Label	case 52 :	712:1:16737:16744	3319193	67	True				
ANR	3320278	IfStatement	if ( ins_bits == 0 )		3319193	68					
ANR	3320279	Condition	ins_bits == 0	713:6:16752:16764	3319193	0	True				
ANR	3320280	EqualityExpression	ins_bits == 0		3319193	0		==			
ANR	3320281	Identifier	ins_bits		3319193	0					
ANR	3320282	PrimaryExpression	0		3319193	1					
ANR	3320283	CompoundStatement		186:21:4524:4524	3319193	1					
ANR	3320284	BreakStatement	break ;	714:3:16772:16777	3319193	0	True				
ANR	3320285	IfStatement	if ( reg_arg )		3319193	69					
ANR	3320286	Condition	reg_arg	716:6:16789:16795	3319193	0	True				
ANR	3320287	Identifier	reg_arg		3319193	0					
ANR	3320288	CompoundStatement		189:15:4555:4555	3319193	1					
ANR	3320289	IfStatement	if ( * reg_arg == 'H' )		3319193	0					
ANR	3320290	Condition	* reg_arg == 'H'	717:7:16807:16821	3319193	0	True				
ANR	3320291	EqualityExpression	* reg_arg == 'H'		3319193	0		==			
ANR	3320292	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320293	UnaryOperator	*		3319193	0					
ANR	3320294	Identifier	reg_arg		3319193	1					
ANR	3320295	PrimaryExpression	'H'		3319193	1					
ANR	3320296	CompoundStatement		190:24:4581:4581	3319193	1					
ANR	3320297	ExpressionStatement	"res = ""hi("""	718:4:16830:16841	3319193	0	True				
ANR	3320298	AssignmentExpression	"res = ""hi("""		3319193	0		=			
ANR	3320299	Identifier	res		3319193	0					
ANR	3320300	PrimaryExpression	"""hi("""		3319193	1					
ANR	3320301	ElseStatement	else		3319193	0					
ANR	3320302	IfStatement	if ( * reg_arg == 'L' )		3319193	0					
ANR	3320303	Condition	* reg_arg == 'L'	719:14:16857:16871	3319193	0	True				
ANR	3320304	EqualityExpression	* reg_arg == 'L'		3319193	0		==			
ANR	3320305	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320306	UnaryOperator	*		3319193	0					
ANR	3320307	Identifier	reg_arg		3319193	1					
ANR	3320308	PrimaryExpression	'L'		3319193	1					
ANR	3320309	CompoundStatement		192:31:4631:4631	3319193	1					
ANR	3320310	ExpressionStatement	"res = ""lo("""	720:4:16880:16891	3319193	0	True				
ANR	3320311	AssignmentExpression	"res = ""lo("""		3319193	0		=			
ANR	3320312	Identifier	res		3319193	0					
ANR	3320313	PrimaryExpression	"""lo("""		3319193	1					
ANR	3320314	ElseStatement	else		3319193	0					
ANR	3320315	IfStatement	if ( * reg_arg == 'd' )		3319193	0					
ANR	3320316	Condition	* reg_arg == 'd'	721:14:16907:16921	3319193	0	True				
ANR	3320317	EqualityExpression	* reg_arg == 'd'		3319193	0		==			
ANR	3320318	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320319	UnaryOperator	*		3319193	0					
ANR	3320320	Identifier	reg_arg		3319193	1					
ANR	3320321	PrimaryExpression	'd'		3319193	1					
ANR	3320322	CompoundStatement		194:31:4681:4681	3319193	1					
ANR	3320323	ExpressionStatement	"res = ""dbl("""	722:4:16930:16942	3319193	0	True				
ANR	3320324	AssignmentExpression	"res = ""dbl("""		3319193	0		=			
ANR	3320325	Identifier	res		3319193	0					
ANR	3320326	PrimaryExpression	"""dbl("""		3319193	1					
ANR	3320327	ElseStatement	else		3319193	0					
ANR	3320328	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320329	Condition	* reg_arg == ')'	723:14:16958:16972	3319193	0	True				
ANR	3320330	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320331	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320332	UnaryOperator	*		3319193	0					
ANR	3320333	Identifier	reg_arg		3319193	1					
ANR	3320334	PrimaryExpression	')'		3319193	1					
ANR	3320335	CompoundStatement		196:31:4732:4732	3319193	1					
ANR	3320336	ExpressionStatement	"res = "")"""	724:4:16981:16990	3319193	0	True				
ANR	3320337	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3320338	Identifier	res		3319193	0					
ANR	3320339	PrimaryExpression	""")"""		3319193	1					
ANR	3320340	ElseStatement	else		3319193	0					
ANR	3320341	CompoundStatement		198:10:4759:4759	3319193	0					
ANR	3320342	ExpressionStatement	"res = ""<W>"""	726:4:17008:17019	3319193	0	True				
ANR	3320343	AssignmentExpression	"res = ""<W>"""		3319193	0		=			
ANR	3320344	Identifier	res		3319193	0					
ANR	3320345	PrimaryExpression	"""<W>"""		3319193	1					
ANR	3320346	ElseStatement	else		3319193	0					
ANR	3320347	CompoundStatement		201:9:4792:4792	3319193	0					
ANR	3320348	ExpressionStatement	"res = ""<W !flags>"""	729:3:17040:17058	3319193	0	True				
ANR	3320349	AssignmentExpression	"res = ""<W !flags>"""		3319193	0		=			
ANR	3320350	Identifier	res		3319193	0					
ANR	3320351	PrimaryExpression	"""<W !flags>"""		3319193	1					
ANR	3320352	ExpressionStatement	res = strdup ( res )	731:2:17066:17083	3319193	70	True				
ANR	3320353	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3320354	Identifier	res		3319193	0					
ANR	3320355	CallExpression	strdup ( res )		3319193	1					
ANR	3320356	Callee	strdup		3319193	0					
ANR	3320357	Identifier	strdup		3319193	0					
ANR	3320358	ArgumentList	res		3319193	1					
ANR	3320359	Argument	res		3319193	0					
ANR	3320360	Identifier	res		3319193	0					
ANR	3320361	BreakStatement	break ;	732:2:17087:17092	3319193	71	True				
ANR	3320362	Label	case 53 :	733:1:17095:17102	3319193	72	True				
ANR	3320363	Label	case 54 :	734:1:17105:17112	3319193	73	True				
ANR	3320364	Label	case 55 :	735:1:17115:17122	3319193	74	True				
ANR	3320365	ExpressionStatement	flag = 0	736:2:17126:17134	3319193	75	True				
ANR	3320366	AssignmentExpression	flag = 0		3319193	0		=			
ANR	3320367	Identifier	flag		3319193	0					
ANR	3320368	PrimaryExpression	0		3319193	1					
ANR	3320369	IfStatement	if ( reg_arg && * reg_arg == '3' )		3319193	76					
ANR	3320370	Condition	reg_arg && * reg_arg == '3'	737:6:17142:17167	3319193	0	True				
ANR	3320371	AndExpression	reg_arg && * reg_arg == '3'		3319193	0		&&			
ANR	3320372	Identifier	reg_arg		3319193	0					
ANR	3320373	EqualityExpression	* reg_arg == '3'		3319193	1		==			
ANR	3320374	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320375	UnaryOperator	*		3319193	0					
ANR	3320376	Identifier	reg_arg		3319193	1					
ANR	3320377	PrimaryExpression	'3'		3319193	1					
ANR	3320378	CompoundStatement		210:34:4927:4927	3319193	1					
ANR	3320379	ExpressionStatement	flag = ins_bits & 1	738:3:17175:17194	3319193	0	True				
ANR	3320380	AssignmentExpression	flag = ins_bits & 1		3319193	0		=			
ANR	3320381	Identifier	flag		3319193	0					
ANR	3320382	BitAndExpression	ins_bits & 1		3319193	1		&			
ANR	3320383	Identifier	ins_bits		3319193	0					
ANR	3320384	PrimaryExpression	1		3319193	1					
ANR	3320385	ExpressionStatement	ins_bits = ins_bits >> 1	739:3:17199:17223	3319193	1	True				
ANR	3320386	AssignmentExpression	ins_bits = ins_bits >> 1		3319193	0		=			
ANR	3320387	Identifier	ins_bits		3319193	0					
ANR	3320388	ShiftExpression	ins_bits >> 1		3319193	1		>>			
ANR	3320389	Identifier	ins_bits		3319193	0					
ANR	3320390	PrimaryExpression	1		3319193	1					
ANR	3320391	ExpressionStatement	reg_arg ++	740:3:17228:17237	3319193	2	True				
ANR	3320392	PostIncDecOperationExpression	reg_arg ++		3319193	0					
ANR	3320393	Identifier	reg_arg		3319193	0					
ANR	3320394	IncDec	++		3319193	1					
ANR	3320395	ExpressionStatement	aux = get_AR_regs_class1 ( ins_bits )	742:2:17245:17279	3319193	77	True				
ANR	3320396	AssignmentExpression	aux = get_AR_regs_class1 ( ins_bits )		3319193	0		=			
ANR	3320397	Identifier	aux		3319193	0					
ANR	3320398	CallExpression	get_AR_regs_class1 ( ins_bits )		3319193	1					
ANR	3320399	Callee	get_AR_regs_class1		3319193	0					
ANR	3320400	Identifier	get_AR_regs_class1		3319193	0					
ANR	3320401	ArgumentList	ins_bits		3319193	1					
ANR	3320402	Argument	ins_bits		3319193	0					
ANR	3320403	Identifier	ins_bits		3319193	0					
ANR	3320404	ExpressionStatement	tok_op = ins_bits & 0xF	743:2:17283:17306	3319193	78	True				
ANR	3320405	AssignmentExpression	tok_op = ins_bits & 0xF		3319193	0		=			
ANR	3320406	Identifier	tok_op		3319193	0					
ANR	3320407	BitAndExpression	ins_bits & 0xF		3319193	1		&			
ANR	3320408	Identifier	ins_bits		3319193	0					
ANR	3320409	PrimaryExpression	0xF		3319193	1					
ANR	3320410	IfStatement	if ( magic_value & 4 )		3319193	79					
ANR	3320411	Condition	magic_value & 4	744:6:17314:17328	3319193	0	True				
ANR	3320412	BitAndExpression	magic_value & 4		3319193	0		&			
ANR	3320413	Identifier	magic_value		3319193	0					
ANR	3320414	PrimaryExpression	4		3319193	1					
ANR	3320415	CompoundStatement		217:23:5088:5088	3319193	1					
ANR	3320416	IfStatement	if ( tok_op <= 7 || tok_op == 0xF )		3319193	0					
ANR	3320417	Condition	tok_op <= 7 || tok_op == 0xF	745:7:17340:17367	3319193	0	True				
ANR	3320418	OrExpression	tok_op <= 7 || tok_op == 0xF		3319193	0		||			
ANR	3320419	RelationalExpression	tok_op <= 7		3319193	0		<=			
ANR	3320420	Identifier	tok_op		3319193	0					
ANR	3320421	PrimaryExpression	7		3319193	1					
ANR	3320422	EqualityExpression	tok_op == 0xF		3319193	1		==			
ANR	3320423	Identifier	tok_op		3319193	0					
ANR	3320424	PrimaryExpression	0xF		3319193	1					
ANR	3320425	CompoundStatement		218:37:5127:5127	3319193	1					
ANR	3320426	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	746:4:17376:17405	3319193	0	True				
ANR	3320427	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320428	Identifier	aux		3319193	0					
ANR	3320429	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320430	Callee	strcat_dup		3319193	0					
ANR	3320431	Identifier	strcat_dup		3319193	0					
ANR	3320432	ArgumentList	aux		3319193	1					
ANR	3320433	Argument	aux		3319193	0					
ANR	3320434	Identifier	aux		3319193	0					
ANR	3320435	Argument	""")"""		3319193	1					
ANR	3320436	PrimaryExpression	""")"""		3319193	0					
ANR	3320437	Argument	1		3319193	2					
ANR	3320438	PrimaryExpression	1		3319193	0					
ANR	3320439	ExpressionStatement	"aux = strcat_dup ( ""linear("" , aux , 2 )"	747:4:17411:17446	3319193	1	True				
ANR	3320440	AssignmentExpression	"aux = strcat_dup ( ""linear("" , aux , 2 )"		3319193	0		=			
ANR	3320441	Identifier	aux		3319193	0					
ANR	3320442	CallExpression	"strcat_dup ( ""linear("" , aux , 2 )"		3319193	1					
ANR	3320443	Callee	strcat_dup		3319193	0					
ANR	3320444	Identifier	strcat_dup		3319193	0					
ANR	3320445	ArgumentList	"""linear("""		3319193	1					
ANR	3320446	Argument	"""linear("""		3319193	0					
ANR	3320447	PrimaryExpression	"""linear("""		3319193	0					
ANR	3320448	Argument	aux		3319193	1					
ANR	3320449	Identifier	aux		3319193	0					
ANR	3320450	Argument	2		3319193	2					
ANR	3320451	PrimaryExpression	2		3319193	0					
ANR	3320452	ElseStatement	else		3319193	0					
ANR	3320453	IfStatement	if ( magic_value & 8 )		3319193	0					
ANR	3320454	Condition	magic_value & 8	749:13:17466:17480	3319193	0	True				
ANR	3320455	BitAndExpression	magic_value & 8		3319193	0		&			
ANR	3320456	Identifier	magic_value		3319193	0					
ANR	3320457	PrimaryExpression	8		3319193	1					
ANR	3320458	CompoundStatement		222:30:5240:5240	3319193	1					
ANR	3320459	IfStatement	if ( tok_op <= 7 || tok_op == 0xF )		3319193	0					
ANR	3320460	Condition	tok_op <= 7 || tok_op == 0xF	750:7:17492:17519	3319193	0	True				
ANR	3320461	OrExpression	tok_op <= 7 || tok_op == 0xF		3319193	0		||			
ANR	3320462	RelationalExpression	tok_op <= 7		3319193	0		<=			
ANR	3320463	Identifier	tok_op		3319193	0					
ANR	3320464	PrimaryExpression	7		3319193	1					
ANR	3320465	EqualityExpression	tok_op == 0xF		3319193	1		==			
ANR	3320466	Identifier	tok_op		3319193	0					
ANR	3320467	PrimaryExpression	0xF		3319193	1					
ANR	3320468	CompoundStatement		223:37:5279:5279	3319193	1					
ANR	3320469	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	751:4:17528:17557	3319193	0	True				
ANR	3320470	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320471	Identifier	aux		3319193	0					
ANR	3320472	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320473	Callee	strcat_dup		3319193	0					
ANR	3320474	Identifier	strcat_dup		3319193	0					
ANR	3320475	ArgumentList	aux		3319193	1					
ANR	3320476	Argument	aux		3319193	0					
ANR	3320477	Identifier	aux		3319193	0					
ANR	3320478	Argument	""")"""		3319193	1					
ANR	3320479	PrimaryExpression	""")"""		3319193	0					
ANR	3320480	Argument	1		3319193	2					
ANR	3320481	PrimaryExpression	1		3319193	0					
ANR	3320482	ExpressionStatement	"aux = strcat_dup ( ""circular("" , aux , 2 )"	752:4:17563:17600	3319193	1	True				
ANR	3320483	AssignmentExpression	"aux = strcat_dup ( ""circular("" , aux , 2 )"		3319193	0		=			
ANR	3320484	Identifier	aux		3319193	0					
ANR	3320485	CallExpression	"strcat_dup ( ""circular("" , aux , 2 )"		3319193	1					
ANR	3320486	Callee	strcat_dup		3319193	0					
ANR	3320487	Identifier	strcat_dup		3319193	0					
ANR	3320488	ArgumentList	"""circular("""		3319193	1					
ANR	3320489	Argument	"""circular("""		3319193	0					
ANR	3320490	PrimaryExpression	"""circular("""		3319193	0					
ANR	3320491	Argument	aux		3319193	1					
ANR	3320492	Identifier	aux		3319193	0					
ANR	3320493	Argument	2		3319193	2					
ANR	3320494	PrimaryExpression	2		3319193	0					
ANR	3320495	ElseStatement	else		3319193	0					
ANR	3320496	IfStatement	if ( magic_value & 2 )		3319193	0					
ANR	3320497	Condition	magic_value & 2	754:13:17620:17634	3319193	0	True				
ANR	3320498	BitAndExpression	magic_value & 2		3319193	0		&			
ANR	3320499	Identifier	magic_value		3319193	0					
ANR	3320500	PrimaryExpression	2		3319193	1					
ANR	3320501	CompoundStatement		227:30:5394:5394	3319193	1					
ANR	3320502	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	755:3:17642:17671	3319193	0	True				
ANR	3320503	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320504	Identifier	aux		3319193	0					
ANR	3320505	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320506	Callee	strcat_dup		3319193	0					
ANR	3320507	Identifier	strcat_dup		3319193	0					
ANR	3320508	ArgumentList	aux		3319193	1					
ANR	3320509	Argument	aux		3319193	0					
ANR	3320510	Identifier	aux		3319193	0					
ANR	3320511	Argument	""")"""		3319193	1					
ANR	3320512	PrimaryExpression	""")"""		3319193	0					
ANR	3320513	Argument	1		3319193	2					
ANR	3320514	PrimaryExpression	1		3319193	0					
ANR	3320515	ExpressionStatement	"aux = strcat_dup ( ""lock("" , aux , 2 )"	756:3:17676:17709	3319193	1	True				
ANR	3320516	AssignmentExpression	"aux = strcat_dup ( ""lock("" , aux , 2 )"		3319193	0		=			
ANR	3320517	Identifier	aux		3319193	0					
ANR	3320518	CallExpression	"strcat_dup ( ""lock("" , aux , 2 )"		3319193	1					
ANR	3320519	Callee	strcat_dup		3319193	0					
ANR	3320520	Identifier	strcat_dup		3319193	0					
ANR	3320521	ArgumentList	"""lock("""		3319193	1					
ANR	3320522	Argument	"""lock("""		3319193	0					
ANR	3320523	PrimaryExpression	"""lock("""		3319193	0					
ANR	3320524	Argument	aux		3319193	1					
ANR	3320525	Identifier	aux		3319193	0					
ANR	3320526	Argument	2		3319193	2					
ANR	3320527	PrimaryExpression	2		3319193	0					
ANR	3320528	ElseStatement	else		3319193	0					
ANR	3320529	IfStatement	if ( reg_arg )		3319193	0					
ANR	3320530	Condition	reg_arg	757:13:17724:17730	3319193	0	True				
ANR	3320531	Identifier	reg_arg		3319193	0					
ANR	3320532	CompoundStatement		230:22:5490:5490	3319193	1					
ANR	3320533	IfStatement	"if ( ( ( magic_value & 0x10 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) ) )"		3319193	0					
ANR	3320534	Condition	"( ( magic_value & 0x10 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) )"	759:6:17749:17899	3319193	0	True				
ANR	3320535	OrExpression	"( ( magic_value & 0x10 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x20 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) )"		3319193	0		||			
ANR	3320536	AndExpression	"( magic_value & 0x10 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' )"		3319193	0		&&			
ANR	3320537	BitAndExpression	magic_value & 0x10		3319193	0		&			
ANR	3320538	Identifier	magic_value		3319193	0					
ANR	3320539	PrimaryExpression	0x10		3319193	1					
ANR	3320540	AndExpression	"* ins_token == 'X' && strchr ( reg_arg , 'r' )"		3319193	1		&&			
ANR	3320541	EqualityExpression	* ins_token == 'X'		3319193	0		==			
ANR	3320542	UnaryOperationExpression	* ins_token		3319193	0					
ANR	3320543	UnaryOperator	*		3319193	0					
ANR	3320544	Identifier	ins_token		3319193	1					
ANR	3320545	PrimaryExpression	'X'		3319193	1					
ANR	3320546	CallExpression	"strchr ( reg_arg , 'r' )"		3319193	1					
ANR	3320547	Callee	strchr		3319193	0					
ANR	3320548	Identifier	strchr		3319193	0					
ANR	3320549	ArgumentList	reg_arg		3319193	1					
ANR	3320550	Argument	reg_arg		3319193	0					
ANR	3320551	Identifier	reg_arg		3319193	0					
ANR	3320552	Argument	'r'		3319193	1					
ANR	3320553	PrimaryExpression	'r'		3319193	0					
ANR	3320554	AndExpression	"( magic_value & 0x20 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320555	BitAndExpression	magic_value & 0x20		3319193	0		&			
ANR	3320556	Identifier	magic_value		3319193	0					
ANR	3320557	PrimaryExpression	0x20		3319193	1					
ANR	3320558	AndExpression	"* ins_token == 'Y' && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320559	EqualityExpression	* ins_token == 'Y'		3319193	0		==			
ANR	3320560	UnaryOperationExpression	* ins_token		3319193	0					
ANR	3320561	UnaryOperator	*		3319193	0					
ANR	3320562	Identifier	ins_token		3319193	1					
ANR	3320563	PrimaryExpression	'Y'		3319193	1					
ANR	3320564	CallExpression	"strchr ( reg_arg , 'w' )"		3319193	1					
ANR	3320565	Callee	strchr		3319193	0					
ANR	3320566	Identifier	strchr		3319193	0					
ANR	3320567	ArgumentList	reg_arg		3319193	1					
ANR	3320568	Argument	reg_arg		3319193	0					
ANR	3320569	Identifier	reg_arg		3319193	0					
ANR	3320570	Argument	'w'		3319193	1					
ANR	3320571	PrimaryExpression	'w'		3319193	0					
ANR	3320572	CompoundStatement		235:7:5665:5665	3319193	1					
ANR	3320573	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	764:4:17915:17944	3319193	0	True				
ANR	3320574	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320575	Identifier	aux		3319193	0					
ANR	3320576	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320577	Callee	strcat_dup		3319193	0					
ANR	3320578	Identifier	strcat_dup		3319193	0					
ANR	3320579	ArgumentList	aux		3319193	1					
ANR	3320580	Argument	aux		3319193	0					
ANR	3320581	Identifier	aux		3319193	0					
ANR	3320582	Argument	""")"""		3319193	1					
ANR	3320583	PrimaryExpression	""")"""		3319193	0					
ANR	3320584	Argument	1		3319193	2					
ANR	3320585	PrimaryExpression	1		3319193	0					
ANR	3320586	ExpressionStatement	"aux = strcat_dup ( ""port("" , aux , 2 )"	765:4:17950:17983	3319193	1	True				
ANR	3320587	AssignmentExpression	"aux = strcat_dup ( ""port("" , aux , 2 )"		3319193	0		=			
ANR	3320588	Identifier	aux		3319193	0					
ANR	3320589	CallExpression	"strcat_dup ( ""port("" , aux , 2 )"		3319193	1					
ANR	3320590	Callee	strcat_dup		3319193	0					
ANR	3320591	Identifier	strcat_dup		3319193	0					
ANR	3320592	ArgumentList	"""port("""		3319193	1					
ANR	3320593	Argument	"""port("""		3319193	0					
ANR	3320594	PrimaryExpression	"""port("""		3319193	0					
ANR	3320595	Argument	aux		3319193	1					
ANR	3320596	Identifier	aux		3319193	0					
ANR	3320597	Argument	2		3319193	2					
ANR	3320598	PrimaryExpression	2		3319193	0					
ANR	3320599	ElseStatement	else		3319193	0					
ANR	3320600	IfStatement	"if ( ( ( magic_value & 0x40 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) ) )"		3319193	0					
ANR	3320601	Condition	"( ( magic_value & 0x40 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) )"	767:3:18003:18159	3319193	0	True				
ANR	3320602	OrExpression	"( ( magic_value & 0x40 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' ) ) || ( ( magic_value & 0x80000000 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' ) )"		3319193	0		||			
ANR	3320603	AndExpression	"( magic_value & 0x40 ) && * ins_token == 'X' && strchr ( reg_arg , 'r' )"		3319193	0		&&			
ANR	3320604	BitAndExpression	magic_value & 0x40		3319193	0		&			
ANR	3320605	Identifier	magic_value		3319193	0					
ANR	3320606	PrimaryExpression	0x40		3319193	1					
ANR	3320607	AndExpression	"* ins_token == 'X' && strchr ( reg_arg , 'r' )"		3319193	1		&&			
ANR	3320608	EqualityExpression	* ins_token == 'X'		3319193	0		==			
ANR	3320609	UnaryOperationExpression	* ins_token		3319193	0					
ANR	3320610	UnaryOperator	*		3319193	0					
ANR	3320611	Identifier	ins_token		3319193	1					
ANR	3320612	PrimaryExpression	'X'		3319193	1					
ANR	3320613	CallExpression	"strchr ( reg_arg , 'r' )"		3319193	1					
ANR	3320614	Callee	strchr		3319193	0					
ANR	3320615	Identifier	strchr		3319193	0					
ANR	3320616	ArgumentList	reg_arg		3319193	1					
ANR	3320617	Argument	reg_arg		3319193	0					
ANR	3320618	Identifier	reg_arg		3319193	0					
ANR	3320619	Argument	'r'		3319193	1					
ANR	3320620	PrimaryExpression	'r'		3319193	0					
ANR	3320621	AndExpression	"( magic_value & 0x80000000 ) && * ins_token == 'Y' && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320622	BitAndExpression	magic_value & 0x80000000		3319193	0		&			
ANR	3320623	Identifier	magic_value		3319193	0					
ANR	3320624	PrimaryExpression	0x80000000		3319193	1					
ANR	3320625	AndExpression	"* ins_token == 'Y' && strchr ( reg_arg , 'w' )"		3319193	1		&&			
ANR	3320626	EqualityExpression	* ins_token == 'Y'		3319193	0		==			
ANR	3320627	UnaryOperationExpression	* ins_token		3319193	0					
ANR	3320628	UnaryOperator	*		3319193	0					
ANR	3320629	Identifier	ins_token		3319193	1					
ANR	3320630	PrimaryExpression	'Y'		3319193	1					
ANR	3320631	CallExpression	"strchr ( reg_arg , 'w' )"		3319193	1					
ANR	3320632	Callee	strchr		3319193	0					
ANR	3320633	Identifier	strchr		3319193	0					
ANR	3320634	ArgumentList	reg_arg		3319193	1					
ANR	3320635	Argument	reg_arg		3319193	0					
ANR	3320636	Identifier	reg_arg		3319193	0					
ANR	3320637	Argument	'w'		3319193	1					
ANR	3320638	PrimaryExpression	'w'		3319193	0					
ANR	3320639	CompoundStatement		244:5:5924:5924	3319193	1					
ANR	3320640	ExpressionStatement	"aux = strcat_dup ( aux , "")"" , 1 )"	772:4:18173:18202	3319193	0	True				
ANR	3320641	AssignmentExpression	"aux = strcat_dup ( aux , "")"" , 1 )"		3319193	0		=			
ANR	3320642	Identifier	aux		3319193	0					
ANR	3320643	CallExpression	"strcat_dup ( aux , "")"" , 1 )"		3319193	1					
ANR	3320644	Callee	strcat_dup		3319193	0					
ANR	3320645	Identifier	strcat_dup		3319193	0					
ANR	3320646	ArgumentList	aux		3319193	1					
ANR	3320647	Argument	aux		3319193	0					
ANR	3320648	Identifier	aux		3319193	0					
ANR	3320649	Argument	""")"""		3319193	1					
ANR	3320650	PrimaryExpression	""")"""		3319193	0					
ANR	3320651	Argument	1		3319193	2					
ANR	3320652	PrimaryExpression	1		3319193	0					
ANR	3320653	ExpressionStatement	"aux = strcat_dup ( ""volatile("" , aux , 2 )"	773:4:18208:18245	3319193	1	True				
ANR	3320654	AssignmentExpression	"aux = strcat_dup ( ""volatile("" , aux , 2 )"		3319193	0		=			
ANR	3320655	Identifier	aux		3319193	0					
ANR	3320656	CallExpression	"strcat_dup ( ""volatile("" , aux , 2 )"		3319193	1					
ANR	3320657	Callee	strcat_dup		3319193	0					
ANR	3320658	Identifier	strcat_dup		3319193	0					
ANR	3320659	ArgumentList	"""volatile("""		3319193	1					
ANR	3320660	Argument	"""volatile("""		3319193	0					
ANR	3320661	PrimaryExpression	"""volatile("""		3319193	0					
ANR	3320662	Argument	aux		3319193	1					
ANR	3320663	Identifier	aux		3319193	0					
ANR	3320664	Argument	2		3319193	2					
ANR	3320665	PrimaryExpression	2		3319193	0					
ANR	3320666	ExpressionStatement	"res = flag ? strcat_dup ( ""t3 = "" , aux , 2 ) : aux"	776:2:18258:18303	3319193	80	True				
ANR	3320667	AssignmentExpression	"res = flag ? strcat_dup ( ""t3 = "" , aux , 2 ) : aux"		3319193	0		=			
ANR	3320668	Identifier	res		3319193	0					
ANR	3320669	ConditionalExpression	"flag ? strcat_dup ( ""t3 = "" , aux , 2 ) : aux"		3319193	1					
ANR	3320670	Condition	flag		3319193	0					
ANR	3320671	Identifier	flag		3319193	0					
ANR	3320672	CallExpression	"strcat_dup ( ""t3 = "" , aux , 2 )"		3319193	1					
ANR	3320673	Callee	strcat_dup		3319193	0					
ANR	3320674	Identifier	strcat_dup		3319193	0					
ANR	3320675	ArgumentList	"""t3 = """		3319193	1					
ANR	3320676	Argument	"""t3 = """		3319193	0					
ANR	3320677	PrimaryExpression	"""t3 = """		3319193	0					
ANR	3320678	Argument	aux		3319193	1					
ANR	3320679	Identifier	aux		3319193	0					
ANR	3320680	Argument	2		3319193	2					
ANR	3320681	PrimaryExpression	2		3319193	0					
ANR	3320682	Identifier	aux		3319193	2					
ANR	3320683	BreakStatement	break ;	777:2:18307:18312	3319193	81	True				
ANR	3320684	Label	case 0 :	778:1:18315:18321	3319193	82	True				
ANR	3320685	Label	case 1 :	779:1:18324:18330	3319193	83	True				
ANR	3320686	IfStatement	if ( ! ins_bits )		3319193	84					
ANR	3320687	Condition	! ins_bits	780:6:18338:18346	3319193	0	True				
ANR	3320688	UnaryOperationExpression	! ins_bits		3319193	0					
ANR	3320689	UnaryOperator	!		3319193	0					
ANR	3320690	Identifier	ins_bits		3319193	1					
ANR	3320691	CompoundStatement		253:17:6106:6106	3319193	1					
ANR	3320692	BreakStatement	break ;	781:3:18354:18359	3319193	0	True				
ANR	3320693	IfStatement	if ( ! reg_arg )		3319193	85					
ANR	3320694	Condition	! reg_arg	783:6:18371:18378	3319193	0	True				
ANR	3320695	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3320696	UnaryOperator	!		3319193	0					
ANR	3320697	Identifier	reg_arg		3319193	1					
ANR	3320698	CompoundStatement		256:16:6138:6138	3319193	1					
ANR	3320699	ExpressionStatement	"res = ""U"""	784:3:18386:18395	3319193	0	True				
ANR	3320700	AssignmentExpression	"res = ""U"""		3319193	0		=			
ANR	3320701	Identifier	res		3319193	0					
ANR	3320702	PrimaryExpression	"""U"""		3319193	1					
ANR	3320703	ElseStatement	else		3319193	0					
ANR	3320704	CompoundStatement		258:9:6163:6163	3319193	0					
ANR	3320705	IfStatement	if ( * reg_arg == '(' )		3319193	0					
ANR	3320706	Condition	* reg_arg == '('	786:7:18415:18429	3319193	0	True				
ANR	3320707	EqualityExpression	* reg_arg == '('		3319193	0		==			
ANR	3320708	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320709	UnaryOperator	*		3319193	0					
ANR	3320710	Identifier	reg_arg		3319193	1					
ANR	3320711	PrimaryExpression	'('		3319193	1					
ANR	3320712	CompoundStatement		259:24:6189:6189	3319193	1					
ANR	3320713	ExpressionStatement	"res = ""uns("""	787:4:18438:18450	3319193	0	True				
ANR	3320714	AssignmentExpression	"res = ""uns("""		3319193	0		=			
ANR	3320715	Identifier	res		3319193	0					
ANR	3320716	PrimaryExpression	"""uns("""		3319193	1					
ANR	3320717	ElseStatement	else		3319193	0					
ANR	3320718	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320719	Condition	* reg_arg == ')'	788:14:18466:18480	3319193	0	True				
ANR	3320720	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320721	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320722	UnaryOperator	*		3319193	0					
ANR	3320723	Identifier	reg_arg		3319193	1					
ANR	3320724	PrimaryExpression	')'		3319193	1					
ANR	3320725	CompoundStatement		261:31:6240:6240	3319193	1					
ANR	3320726	ExpressionStatement	"res = "")"""	789:4:18489:18498	3319193	0	True				
ANR	3320727	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3320728	Identifier	res		3319193	0					
ANR	3320729	PrimaryExpression	""")"""		3319193	1					
ANR	3320730	ElseStatement	else		3319193	0					
ANR	3320731	CompoundStatement		263:10:6267:6267	3319193	0					
ANR	3320732	ExpressionStatement	"res = ""<$/#>"""	791:4:18516:18529	3319193	0	True				
ANR	3320733	AssignmentExpression	"res = ""<$/#>"""		3319193	0		=			
ANR	3320734	Identifier	res		3319193	0					
ANR	3320735	PrimaryExpression	"""<$/#>"""		3319193	1					
ANR	3320736	ExpressionStatement	res = strdup ( res )	794:2:18542:18559	3319193	86	True				
ANR	3320737	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3320738	Identifier	res		3319193	0					
ANR	3320739	CallExpression	strdup ( res )		3319193	1					
ANR	3320740	Callee	strdup		3319193	0					
ANR	3320741	Identifier	strdup		3319193	0					
ANR	3320742	ArgumentList	res		3319193	1					
ANR	3320743	Argument	res		3319193	0					
ANR	3320744	Identifier	res		3319193	0					
ANR	3320745	BreakStatement	break ;	795:2:18563:18568	3319193	87	True				
ANR	3320746	Label	case 2 :	796:1:18571:18577	3319193	88	True				
ANR	3320747	IfStatement	if ( ! ins_bits )		3319193	89					
ANR	3320748	Condition	! ins_bits	797:6:18585:18593	3319193	0	True				
ANR	3320749	UnaryOperationExpression	! ins_bits		3319193	0					
ANR	3320750	UnaryOperator	!		3319193	0					
ANR	3320751	Identifier	ins_bits		3319193	1					
ANR	3320752	CompoundStatement		270:17:6353:6353	3319193	1					
ANR	3320753	BreakStatement	break ;	798:3:18601:18606	3319193	0	True				
ANR	3320754	IfStatement	if ( ! reg_arg )		3319193	90					
ANR	3320755	Condition	! reg_arg	800:6:18618:18625	3319193	0	True				
ANR	3320756	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3320757	UnaryOperator	!		3319193	0					
ANR	3320758	Identifier	reg_arg		3319193	1					
ANR	3320759	CompoundStatement		273:16:6385:6385	3319193	1					
ANR	3320760	ExpressionStatement	"res = ""R"""	801:3:18633:18642	3319193	0	True				
ANR	3320761	AssignmentExpression	"res = ""R"""		3319193	0		=			
ANR	3320762	Identifier	res		3319193	0					
ANR	3320763	PrimaryExpression	"""R"""		3319193	1					
ANR	3320764	ElseStatement	else		3319193	0					
ANR	3320765	CompoundStatement		275:9:6410:6410	3319193	0					
ANR	3320766	IfStatement	if ( * reg_arg == '(' )		3319193	0					
ANR	3320767	Condition	* reg_arg == '('	803:7:18662:18676	3319193	0	True				
ANR	3320768	EqualityExpression	* reg_arg == '('		3319193	0		==			
ANR	3320769	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320770	UnaryOperator	*		3319193	0					
ANR	3320771	Identifier	reg_arg		3319193	1					
ANR	3320772	PrimaryExpression	'('		3319193	1					
ANR	3320773	CompoundStatement		276:24:6436:6436	3319193	1					
ANR	3320774	ExpressionStatement	"res = ""rnd("""	804:4:18685:18697	3319193	0	True				
ANR	3320775	AssignmentExpression	"res = ""rnd("""		3319193	0		=			
ANR	3320776	Identifier	res		3319193	0					
ANR	3320777	PrimaryExpression	"""rnd("""		3319193	1					
ANR	3320778	ElseStatement	else		3319193	0					
ANR	3320779	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320780	Condition	* reg_arg == ')'	805:14:18713:18727	3319193	0	True				
ANR	3320781	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320782	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320783	UnaryOperator	*		3319193	0					
ANR	3320784	Identifier	reg_arg		3319193	1					
ANR	3320785	PrimaryExpression	')'		3319193	1					
ANR	3320786	CompoundStatement		278:31:6487:6487	3319193	1					
ANR	3320787	ExpressionStatement	"res = "")"""	806:4:18736:18745	3319193	0	True				
ANR	3320788	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3320789	Identifier	res		3319193	0					
ANR	3320790	PrimaryExpression	""")"""		3319193	1					
ANR	3320791	ElseStatement	else		3319193	0					
ANR	3320792	CompoundStatement		280:10:6514:6514	3319193	0					
ANR	3320793	ExpressionStatement	"res = ""<%>"""	808:4:18763:18774	3319193	0	True				
ANR	3320794	AssignmentExpression	"res = ""<%>"""		3319193	0		=			
ANR	3320795	Identifier	res		3319193	0					
ANR	3320796	PrimaryExpression	"""<%>"""		3319193	1					
ANR	3320797	ExpressionStatement	res = strdup ( res )	811:2:18787:18804	3319193	91	True				
ANR	3320798	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3320799	Identifier	res		3319193	0					
ANR	3320800	CallExpression	strdup ( res )		3319193	1					
ANR	3320801	Callee	strdup		3319193	0					
ANR	3320802	Identifier	strdup		3319193	0					
ANR	3320803	ArgumentList	res		3319193	1					
ANR	3320804	Argument	res		3319193	0					
ANR	3320805	Identifier	res		3319193	0					
ANR	3320806	BreakStatement	break ;	812:2:18808:18813	3319193	92	True				
ANR	3320807	Label	case 12 :	813:1:18816:18823	3319193	93	True				
ANR	3320808	IfStatement	if ( ! ins_bits )		3319193	94					
ANR	3320809	Condition	! ins_bits	814:6:18831:18839	3319193	0	True				
ANR	3320810	UnaryOperationExpression	! ins_bits		3319193	0					
ANR	3320811	UnaryOperator	!		3319193	0					
ANR	3320812	Identifier	ins_bits		3319193	1					
ANR	3320813	CompoundStatement		287:17:6599:6599	3319193	1					
ANR	3320814	BreakStatement	break ;	815:3:18847:18852	3319193	0	True				
ANR	3320815	IfStatement	if ( ! reg_arg )		3319193	95					
ANR	3320816	Condition	! reg_arg	817:5:18863:18870	3319193	0	True				
ANR	3320817	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3320818	UnaryOperator	!		3319193	0					
ANR	3320819	Identifier	reg_arg		3319193	1					
ANR	3320820	CompoundStatement		290:15:6630:6630	3319193	1					
ANR	3320821	ExpressionStatement	"res = ""F"""	818:3:18878:18887	3319193	0	True				
ANR	3320822	AssignmentExpression	"res = ""F"""		3319193	0		=			
ANR	3320823	Identifier	res		3319193	0					
ANR	3320824	PrimaryExpression	"""F"""		3319193	1					
ANR	3320825	ElseStatement	else		3319193	0					
ANR	3320826	CompoundStatement		292:9:6655:6655	3319193	0					
ANR	3320827	IfStatement	if ( * reg_arg == '(' )		3319193	0					
ANR	3320828	Condition	* reg_arg == '('	820:7:18907:18921	3319193	0	True				
ANR	3320829	EqualityExpression	* reg_arg == '('		3319193	0		==			
ANR	3320830	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320831	UnaryOperator	*		3319193	0					
ANR	3320832	Identifier	reg_arg		3319193	1					
ANR	3320833	PrimaryExpression	'('		3319193	1					
ANR	3320834	CompoundStatement		293:24:6681:6681	3319193	1					
ANR	3320835	ExpressionStatement	"res = ""frct("""	821:4:18930:18943	3319193	0	True				
ANR	3320836	AssignmentExpression	"res = ""frct("""		3319193	0		=			
ANR	3320837	Identifier	res		3319193	0					
ANR	3320838	PrimaryExpression	"""frct("""		3319193	1					
ANR	3320839	ElseStatement	else		3319193	0					
ANR	3320840	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320841	Condition	* reg_arg == ')'	822:14:18959:18973	3319193	0	True				
ANR	3320842	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320843	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320844	UnaryOperator	*		3319193	0					
ANR	3320845	Identifier	reg_arg		3319193	1					
ANR	3320846	PrimaryExpression	')'		3319193	1					
ANR	3320847	CompoundStatement		295:31:6733:6733	3319193	1					
ANR	3320848	ExpressionStatement	"res = "")"""	823:4:18982:18991	3319193	0	True				
ANR	3320849	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3320850	Identifier	res		3319193	0					
ANR	3320851	PrimaryExpression	""")"""		3319193	1					
ANR	3320852	ElseStatement	else		3319193	0					
ANR	3320853	IfStatement	if ( * reg_arg == 'a' )		3319193	0					
ANR	3320854	Condition	* reg_arg == 'a'	824:14:19007:19021	3319193	0	True				
ANR	3320855	EqualityExpression	* reg_arg == 'a'		3319193	0		==			
ANR	3320856	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320857	UnaryOperator	*		3319193	0					
ANR	3320858	Identifier	reg_arg		3319193	1					
ANR	3320859	PrimaryExpression	'a'		3319193	1					
ANR	3320860	CompoundStatement		297:31:6781:6781	3319193	1					
ANR	3320861	ExpressionStatement	"res = ""<%>"""	825:4:19030:19041	3319193	0	True				
ANR	3320862	AssignmentExpression	"res = ""<%>"""		3319193	0		=			
ANR	3320863	Identifier	res		3319193	0					
ANR	3320864	PrimaryExpression	"""<%>"""		3319193	1					
ANR	3320865	ElseStatement	else		3319193	0					
ANR	3320866	CompoundStatement		299:10:6810:6810	3319193	0					
ANR	3320867	ExpressionStatement	"res = ""</>"""	827:4:19059:19070	3319193	0	True				
ANR	3320868	AssignmentExpression	"res = ""</>"""		3319193	0		=			
ANR	3320869	Identifier	res		3319193	0					
ANR	3320870	PrimaryExpression	"""</>"""		3319193	1					
ANR	3320871	ExpressionStatement	res = strdup ( res )	830:2:19083:19100	3319193	96	True				
ANR	3320872	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3320873	Identifier	res		3319193	0					
ANR	3320874	CallExpression	strdup ( res )		3319193	1					
ANR	3320875	Callee	strdup		3319193	0					
ANR	3320876	Identifier	strdup		3319193	0					
ANR	3320877	ArgumentList	res		3319193	1					
ANR	3320878	Argument	res		3319193	0					
ANR	3320879	Identifier	res		3319193	0					
ANR	3320880	BreakStatement	break ;	831:2:19104:19109	3319193	97	True				
ANR	3320881	Label	case 29 :	832:1:19112:19119	3319193	98	True				
ANR	3320882	IfStatement	if ( ! ins_bits )		3319193	99					
ANR	3320883	Condition	! ins_bits	833:6:19127:19135	3319193	0	True				
ANR	3320884	UnaryOperationExpression	! ins_bits		3319193	0					
ANR	3320885	UnaryOperator	!		3319193	0					
ANR	3320886	Identifier	ins_bits		3319193	1					
ANR	3320887	CompoundStatement		306:17:6895:6895	3319193	1					
ANR	3320888	BreakStatement	break ;	834:3:19143:19148	3319193	0	True				
ANR	3320889	IfStatement	if ( ! reg_arg )		3319193	100					
ANR	3320890	Condition	! reg_arg	836:6:19160:19167	3319193	0	True				
ANR	3320891	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3320892	UnaryOperator	!		3319193	0					
ANR	3320893	Identifier	reg_arg		3319193	1					
ANR	3320894	CompoundStatement		309:16:6927:6927	3319193	1					
ANR	3320895	ExpressionStatement	"res = ""saturate"""	837:3:19175:19191	3319193	0	True				
ANR	3320896	AssignmentExpression	"res = ""saturate"""		3319193	0		=			
ANR	3320897	Identifier	res		3319193	0					
ANR	3320898	PrimaryExpression	"""saturate"""		3319193	1					
ANR	3320899	ElseStatement	else		3319193	0					
ANR	3320900	CompoundStatement		311:9:6959:6959	3319193	0					
ANR	3320901	IfStatement	if ( * reg_arg == '(' )		3319193	0					
ANR	3320902	Condition	* reg_arg == '('	839:7:19211:19225	3319193	0	True				
ANR	3320903	EqualityExpression	* reg_arg == '('		3319193	0		==			
ANR	3320904	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320905	UnaryOperator	*		3319193	0					
ANR	3320906	Identifier	reg_arg		3319193	1					
ANR	3320907	PrimaryExpression	'('		3319193	1					
ANR	3320908	CompoundStatement		312:25:6986:6986	3319193	1					
ANR	3320909	ExpressionStatement	"res = ""saturate("""	840:4:19235:19252	3319193	0	True				
ANR	3320910	AssignmentExpression	"res = ""saturate("""		3319193	0		=			
ANR	3320911	Identifier	res		3319193	0					
ANR	3320912	PrimaryExpression	"""saturate("""		3319193	1					
ANR	3320913	ElseStatement	else		3319193	0					
ANR	3320914	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320915	Condition	* reg_arg == ')'	841:14:19268:19282	3319193	0	True				
ANR	3320916	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320917	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320918	UnaryOperator	*		3319193	0					
ANR	3320919	Identifier	reg_arg		3319193	1					
ANR	3320920	PrimaryExpression	')'		3319193	1					
ANR	3320921	CompoundStatement		314:31:7042:7042	3319193	1					
ANR	3320922	ExpressionStatement	"res = "")"""	842:4:19291:19300	3319193	0	True				
ANR	3320923	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3320924	Identifier	res		3319193	0					
ANR	3320925	PrimaryExpression	""")"""		3319193	1					
ANR	3320926	ElseStatement	else		3319193	0					
ANR	3320927	CompoundStatement		316:10:7069:7069	3319193	0					
ANR	3320928	ExpressionStatement	"res = ""<saturate>"""	844:4:19318:19336	3319193	0	True				
ANR	3320929	AssignmentExpression	"res = ""<saturate>"""		3319193	0		=			
ANR	3320930	Identifier	res		3319193	0					
ANR	3320931	PrimaryExpression	"""<saturate>"""		3319193	1					
ANR	3320932	ExpressionStatement	res = strdup ( res )	847:2:19349:19366	3319193	101	True				
ANR	3320933	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3320934	Identifier	res		3319193	0					
ANR	3320935	CallExpression	strdup ( res )		3319193	1					
ANR	3320936	Callee	strdup		3319193	0					
ANR	3320937	Identifier	strdup		3319193	0					
ANR	3320938	ArgumentList	res		3319193	1					
ANR	3320939	Argument	res		3319193	0					
ANR	3320940	Identifier	res		3319193	0					
ANR	3320941	BreakStatement	break ;	848:2:19370:19375	3319193	102	True				
ANR	3320942	Label	case 16 :	849:1:19378:19385	3319193	103	True				
ANR	3320943	ExpressionStatement	"res = ( ins_bits != 0 ) ? strdup ( ""t3 = "" ) : NULL"	850:2:19389:19434	3319193	104	True				
ANR	3320944	AssignmentExpression	"res = ( ins_bits != 0 ) ? strdup ( ""t3 = "" ) : NULL"		3319193	0		=			
ANR	3320945	Identifier	res		3319193	0					
ANR	3320946	ConditionalExpression	"( ins_bits != 0 ) ? strdup ( ""t3 = "" ) : NULL"		3319193	1					
ANR	3320947	Condition	ins_bits != 0		3319193	0					
ANR	3320948	EqualityExpression	ins_bits != 0		3319193	0		!=			
ANR	3320949	Identifier	ins_bits		3319193	0					
ANR	3320950	PrimaryExpression	0		3319193	1					
ANR	3320951	CallExpression	"strdup ( ""t3 = "" )"		3319193	1					
ANR	3320952	Callee	strdup		3319193	0					
ANR	3320953	Identifier	strdup		3319193	0					
ANR	3320954	ArgumentList	"""t3 = """		3319193	1					
ANR	3320955	Argument	"""t3 = """		3319193	0					
ANR	3320956	PrimaryExpression	"""t3 = """		3319193	0					
ANR	3320957	Identifier	NULL		3319193	2					
ANR	3320958	BreakStatement	break ;	851:2:19438:19443	3319193	105	True				
ANR	3320959	Label	case 17 :	852:1:19446:19453	3319193	106	True				
ANR	3320960	IfStatement	if ( ! ins_bits )		3319193	107					
ANR	3320961	Condition	! ins_bits	853:6:19461:19469	3319193	0	True				
ANR	3320962	UnaryOperationExpression	! ins_bits		3319193	0					
ANR	3320963	UnaryOperator	!		3319193	0					
ANR	3320964	Identifier	ins_bits		3319193	1					
ANR	3320965	CompoundStatement		326:17:7229:7229	3319193	1					
ANR	3320966	BreakStatement	break ;	854:3:19477:19482	3319193	0	True				
ANR	3320967	IfStatement	if ( ! reg_arg )		3319193	108					
ANR	3320968	Condition	! reg_arg	856:6:19494:19501	3319193	0	True				
ANR	3320969	UnaryOperationExpression	! reg_arg		3319193	0					
ANR	3320970	UnaryOperator	!		3319193	0					
ANR	3320971	Identifier	reg_arg		3319193	1					
ANR	3320972	CompoundStatement		329:16:7261:7261	3319193	1					
ANR	3320973	ExpressionStatement	"res = ""40"""	857:3:19509:19519	3319193	0	True				
ANR	3320974	AssignmentExpression	"res = ""40"""		3319193	0		=			
ANR	3320975	Identifier	res		3319193	0					
ANR	3320976	PrimaryExpression	"""40"""		3319193	1					
ANR	3320977	ElseStatement	else		3319193	0					
ANR	3320978	CompoundStatement		331:9:7287:7287	3319193	0					
ANR	3320979	IfStatement	if ( * reg_arg == '(' )		3319193	0					
ANR	3320980	Condition	* reg_arg == '('	859:7:19539:19553	3319193	0	True				
ANR	3320981	EqualityExpression	* reg_arg == '('		3319193	0		==			
ANR	3320982	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320983	UnaryOperator	*		3319193	0					
ANR	3320984	Identifier	reg_arg		3319193	1					
ANR	3320985	PrimaryExpression	'('		3319193	1					
ANR	3320986	CompoundStatement		332:24:7313:7313	3319193	1					
ANR	3320987	ExpressionStatement	"res = ""m40("""	860:4:19562:19574	3319193	0	True				
ANR	3320988	AssignmentExpression	"res = ""m40("""		3319193	0		=			
ANR	3320989	Identifier	res		3319193	0					
ANR	3320990	PrimaryExpression	"""m40("""		3319193	1					
ANR	3320991	ElseStatement	else		3319193	0					
ANR	3320992	IfStatement	if ( * reg_arg == ')' )		3319193	0					
ANR	3320993	Condition	* reg_arg == ')'	861:14:19590:19604	3319193	0	True				
ANR	3320994	EqualityExpression	* reg_arg == ')'		3319193	0		==			
ANR	3320995	UnaryOperationExpression	* reg_arg		3319193	0					
ANR	3320996	UnaryOperator	*		3319193	0					
ANR	3320997	Identifier	reg_arg		3319193	1					
ANR	3320998	PrimaryExpression	')'		3319193	1					
ANR	3320999	CompoundStatement		334:31:7364:7364	3319193	1					
ANR	3321000	ExpressionStatement	"res = "")"""	862:4:19613:19622	3319193	0	True				
ANR	3321001	AssignmentExpression	"res = "")"""		3319193	0		=			
ANR	3321002	Identifier	res		3319193	0					
ANR	3321003	PrimaryExpression	""")"""		3319193	1					
ANR	3321004	ElseStatement	else		3319193	0					
ANR	3321005	CompoundStatement		336:10:7391:7391	3319193	0					
ANR	3321006	ExpressionStatement	"res = ""<4>"""	864:4:19640:19651	3319193	0	True				
ANR	3321007	AssignmentExpression	"res = ""<4>"""		3319193	0		=			
ANR	3321008	Identifier	res		3319193	0					
ANR	3321009	PrimaryExpression	"""<4>"""		3319193	1					
ANR	3321010	ExpressionStatement	res = strdup ( res )	867:2:19664:19681	3319193	109	True				
ANR	3321011	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3321012	Identifier	res		3319193	0					
ANR	3321013	CallExpression	strdup ( res )		3319193	1					
ANR	3321014	Callee	strdup		3319193	0					
ANR	3321015	Identifier	strdup		3319193	0					
ANR	3321016	ArgumentList	res		3319193	1					
ANR	3321017	Argument	res		3319193	0					
ANR	3321018	Identifier	res		3319193	0					
ANR	3321019	BreakStatement	break ;	868:2:19685:19690	3319193	110	True				
ANR	3321020	Label	case 78 :	869:1:19693:19700	3319193	111	True				
ANR	3321021	IfStatement	"if ( ! r_str_ncasecmp ( ins_token , ""q_SAT"" , 5 ) )"		3319193	112					
ANR	3321022	Condition	"! r_str_ncasecmp ( ins_token , ""q_SAT"" , 5 )"	870:6:19708:19746	3319193	0	True				
ANR	3321023	UnaryOperationExpression	"! r_str_ncasecmp ( ins_token , ""q_SAT"" , 5 )"		3319193	0					
ANR	3321024	UnaryOperator	!		3319193	0					
ANR	3321025	CallExpression	"r_str_ncasecmp ( ins_token , ""q_SAT"" , 5 )"		3319193	1					
ANR	3321026	Callee	r_str_ncasecmp		3319193	0					
ANR	3321027	Identifier	r_str_ncasecmp		3319193	0					
ANR	3321028	ArgumentList	ins_token		3319193	1					
ANR	3321029	Argument	ins_token		3319193	0					
ANR	3321030	Identifier	ins_token		3319193	0					
ANR	3321031	Argument	"""q_SAT"""		3319193	1					
ANR	3321032	PrimaryExpression	"""q_SAT"""		3319193	0					
ANR	3321033	Argument	5		3319193	2					
ANR	3321034	PrimaryExpression	5		3319193	0					
ANR	3321035	CompoundStatement		343:47:7506:7506	3319193	1					
ANR	3321036	ExpressionStatement	"res = ins_bits ? ""s"" : NULL"	871:3:19754:19779	3319193	0	True				
ANR	3321037	AssignmentExpression	"res = ins_bits ? ""s"" : NULL"		3319193	0		=			
ANR	3321038	Identifier	res		3319193	0					
ANR	3321039	ConditionalExpression	"ins_bits ? ""s"" : NULL"		3319193	1					
ANR	3321040	Condition	ins_bits		3319193	0					
ANR	3321041	Identifier	ins_bits		3319193	0					
ANR	3321042	PrimaryExpression	"""s"""		3319193	1					
ANR	3321043	Identifier	NULL		3319193	2					
ANR	3321044	ElseStatement	else		3319193	0					
ANR	3321045	IfStatement	"if ( ! r_str_ncasecmp ( ins_token , ""q_CIRC"" , 6 ) )"		3319193	0					
ANR	3321046	Condition	"! r_str_ncasecmp ( ins_token , ""q_CIRC"" , 6 )"	872:13:19794:19832	3319193	0	True				
ANR	3321047	UnaryOperationExpression	"! r_str_ncasecmp ( ins_token , ""q_CIRC"" , 6 )"		3319193	0					
ANR	3321048	UnaryOperator	!		3319193	0					
ANR	3321049	CallExpression	"r_str_ncasecmp ( ins_token , ""q_CIRC"" , 6 )"		3319193	1					
ANR	3321050	Callee	r_str_ncasecmp		3319193	0					
ANR	3321051	Identifier	r_str_ncasecmp		3319193	0					
ANR	3321052	ArgumentList	ins_token		3319193	1					
ANR	3321053	Argument	ins_token		3319193	0					
ANR	3321054	Identifier	ins_token		3319193	0					
ANR	3321055	Argument	"""q_CIRC"""		3319193	1					
ANR	3321056	PrimaryExpression	"""q_CIRC"""		3319193	0					
ANR	3321057	Argument	6		3319193	2					
ANR	3321058	PrimaryExpression	6		3319193	0					
ANR	3321059	CompoundStatement		345:54:7592:7592	3319193	1					
ANR	3321060	ExpressionStatement	"res = ins_bits ? "".cr"" : NULL"	873:3:19840:19867	3319193	0	True				
ANR	3321061	AssignmentExpression	"res = ins_bits ? "".cr"" : NULL"		3319193	0		=			
ANR	3321062	Identifier	res		3319193	0					
ANR	3321063	ConditionalExpression	"ins_bits ? "".cr"" : NULL"		3319193	1					
ANR	3321064	Condition	ins_bits		3319193	0					
ANR	3321065	Identifier	ins_bits		3319193	0					
ANR	3321066	PrimaryExpression	""".cr"""		3319193	1					
ANR	3321067	Identifier	NULL		3319193	2					
ANR	3321068	ElseStatement	else		3319193	0					
ANR	3321069	IfStatement	"if ( ! r_str_ncasecmp ( ins_token , ""q_LINR"" , 6 ) )"		3319193	0					
ANR	3321070	Condition	"! r_str_ncasecmp ( ins_token , ""q_LINR"" , 6 )"	874:13:19882:19920	3319193	0	True				
ANR	3321071	UnaryOperationExpression	"! r_str_ncasecmp ( ins_token , ""q_LINR"" , 6 )"		3319193	0					
ANR	3321072	UnaryOperator	!		3319193	0					
ANR	3321073	CallExpression	"r_str_ncasecmp ( ins_token , ""q_LINR"" , 6 )"		3319193	1					
ANR	3321074	Callee	r_str_ncasecmp		3319193	0					
ANR	3321075	Identifier	r_str_ncasecmp		3319193	0					
ANR	3321076	ArgumentList	ins_token		3319193	1					
ANR	3321077	Argument	ins_token		3319193	0					
ANR	3321078	Identifier	ins_token		3319193	0					
ANR	3321079	Argument	"""q_LINR"""		3319193	1					
ANR	3321080	PrimaryExpression	"""q_LINR"""		3319193	0					
ANR	3321081	Argument	6		3319193	2					
ANR	3321082	PrimaryExpression	6		3319193	0					
ANR	3321083	CompoundStatement		347:54:7680:7680	3319193	1					
ANR	3321084	ExpressionStatement	"res = ins_bits ? "".lr"" : NULL"	875:3:19928:19955	3319193	0	True				
ANR	3321085	AssignmentExpression	"res = ins_bits ? "".lr"" : NULL"		3319193	0		=			
ANR	3321086	Identifier	res		3319193	0					
ANR	3321087	ConditionalExpression	"ins_bits ? "".lr"" : NULL"		3319193	1					
ANR	3321088	Condition	ins_bits		3319193	0					
ANR	3321089	Identifier	ins_bits		3319193	0					
ANR	3321090	PrimaryExpression	""".lr"""		3319193	1					
ANR	3321091	Identifier	NULL		3319193	2					
ANR	3321092	ElseStatement	else		3319193	0					
ANR	3321093	CompoundStatement		349:9:7723:7723	3319193	0					
ANR	3321094	ExpressionStatement	"fprintf ( stderr , ""Invalid instruction %s\\n!"" , ins_token )"	877:3:19971:20027	3319193	0	True				
ANR	3321095	CallExpression	"fprintf ( stderr , ""Invalid instruction %s\\n!"" , ins_token )"		3319193	0					
ANR	3321096	Callee	fprintf		3319193	0					
ANR	3321097	Identifier	fprintf		3319193	0					
ANR	3321098	ArgumentList	stderr		3319193	1					
ANR	3321099	Argument	stderr		3319193	0					
ANR	3321100	Identifier	stderr		3319193	0					
ANR	3321101	Argument	"""Invalid instruction %s\\n!"""		3319193	1					
ANR	3321102	PrimaryExpression	"""Invalid instruction %s\\n!"""		3319193	0					
ANR	3321103	Argument	ins_token		3319193	2					
ANR	3321104	Identifier	ins_token		3319193	0					
ANR	3321105	ExpressionStatement	* err_code = - 1	878:3:20032:20046	3319193	1	True				
ANR	3321106	AssignmentExpression	* err_code = - 1		3319193	0		=			
ANR	3321107	UnaryOperationExpression	* err_code		3319193	0					
ANR	3321108	UnaryOperator	*		3319193	0					
ANR	3321109	Identifier	err_code		3319193	1					
ANR	3321110	UnaryOperationExpression	- 1		3319193	1					
ANR	3321111	UnaryOperator	-		3319193	0					
ANR	3321112	PrimaryExpression	1		3319193	1					
ANR	3321113	ReturnStatement	return NULL ;	879:3:20051:20062	3319193	2	True				
ANR	3321114	Identifier	NULL		3319193	0					
ANR	3321115	IfStatement	if ( res != NULL )		3319193	113					
ANR	3321116	Condition	res != NULL	881:6:20074:20084	3319193	0	True				
ANR	3321117	EqualityExpression	res != NULL		3319193	0		!=			
ANR	3321118	Identifier	res		3319193	0					
ANR	3321119	Identifier	NULL		3319193	1					
ANR	3321120	CompoundStatement		354:19:7844:7844	3319193	1					
ANR	3321121	IfStatement	if ( C55PLUS_DEBUG )		3319193	0					
ANR	3321122	Condition	C55PLUS_DEBUG	882:7:20096:20108	3319193	0	True				
ANR	3321123	Identifier	C55PLUS_DEBUG		3319193	0					
ANR	3321124	CompoundStatement		355:22:7868:7868	3319193	1					
ANR	3321125	ExpressionStatement	"printf ( ""OP(78): TOKEN=%s\\n"" , res )"	883:4:20117:20150	3319193	0	True				
ANR	3321126	CallExpression	"printf ( ""OP(78): TOKEN=%s\\n"" , res )"		3319193	0					
ANR	3321127	Callee	printf		3319193	0					
ANR	3321128	Identifier	printf		3319193	0					
ANR	3321129	ArgumentList	"""OP(78): TOKEN=%s\\n"""		3319193	1					
ANR	3321130	Argument	"""OP(78): TOKEN=%s\\n"""		3319193	0					
ANR	3321131	PrimaryExpression	"""OP(78): TOKEN=%s\\n"""		3319193	0					
ANR	3321132	Argument	res		3319193	1					
ANR	3321133	Identifier	res		3319193	0					
ANR	3321134	ExpressionStatement	res = strdup ( res )	885:3:20160:20177	3319193	1	True				
ANR	3321135	AssignmentExpression	res = strdup ( res )		3319193	0		=			
ANR	3321136	Identifier	res		3319193	0					
ANR	3321137	CallExpression	strdup ( res )		3319193	1					
ANR	3321138	Callee	strdup		3319193	0					
ANR	3321139	Identifier	strdup		3319193	0					
ANR	3321140	ArgumentList	res		3319193	1					
ANR	3321141	Argument	res		3319193	0					
ANR	3321142	Identifier	res		3319193	0					
ANR	3321143	BreakStatement	break ;	887:2:20185:20190	3319193	114	True				
ANR	3321144	Label	ret_decode :	890:0:20196:20206	3319193	12	True				
ANR	3321145	Identifier	ret_decode		3319193	0					
ANR	3321146	IfStatement	if ( C55PLUS_DEBUG )		3319193	13					
ANR	3321147	Condition	C55PLUS_DEBUG	891:5:20213:20225	3319193	0	True				
ANR	3321148	Identifier	C55PLUS_DEBUG		3319193	0					
ANR	3321149	CompoundStatement		364:20:7985:7985	3319193	1					
ANR	3321150	ExpressionStatement	"printf ( ""RES = %s\\n"" , ( res ) ? res : ""NULL"" )"	892:2:20232:20274	3319193	0	True				
ANR	3321151	CallExpression	"printf ( ""RES = %s\\n"" , ( res ) ? res : ""NULL"" )"		3319193	0					
ANR	3321152	Callee	printf		3319193	0					
ANR	3321153	Identifier	printf		3319193	0					
ANR	3321154	ArgumentList	"""RES = %s\\n"""		3319193	1					
ANR	3321155	Argument	"""RES = %s\\n"""		3319193	0					
ANR	3321156	PrimaryExpression	"""RES = %s\\n"""		3319193	0					
ANR	3321157	Argument	"( res ) ? res : ""NULL"""		3319193	1					
ANR	3321158	ConditionalExpression	"( res ) ? res : ""NULL"""		3319193	0					
ANR	3321159	Condition	res		3319193	0					
ANR	3321160	Identifier	res		3319193	0					
ANR	3321161	Identifier	res		3319193	1					
ANR	3321162	PrimaryExpression	"""NULL"""		3319193	2					
ANR	3321163	ReturnStatement	return res ;	894:1:20280:20290	3319193	14	True				
ANR	3321164	Identifier	res		3319193	0					
ANR	3321165	ReturnType	static char *		3319193	1					
ANR	3321166	Identifier	get_token_decoded		3319193	2					
ANR	3321167	ParameterList	"st32 hash_code , char * ins_token , ut32 ins_token_len , char * reg_arg , ut32 * ret_ins_bits , ut32 * ret_reg_len , ut32 magic_value , ut32 ins_pos , ut32 ins_len , ut8 two_ins , int * err_code"		3319193	3					
ANR	3321168	Parameter	st32 hash_code	526:31:12059:12072	3319193	0	True				
ANR	3321169	ParameterType	st32		3319193	0					
ANR	3321170	Identifier	hash_code		3319193	1					
ANR	3321171	Parameter	char * ins_token	526:47:12075:12089	3319193	1	True				
ANR	3321172	ParameterType	char *		3319193	0					
ANR	3321173	Identifier	ins_token		3319193	1					
ANR	3321174	Parameter	ut32 ins_token_len	526:64:12092:12109	3319193	2	True				
ANR	3321175	ParameterType	ut32		3319193	0					
ANR	3321176	Identifier	ins_token_len		3319193	1					
ANR	3321177	Parameter	char * reg_arg	527:1:12113:12125	3319193	3	True				
ANR	3321178	ParameterType	char *		3319193	0					
ANR	3321179	Identifier	reg_arg		3319193	1					
ANR	3321180	Parameter	ut32 * ret_ins_bits	527:16:12128:12145	3319193	4	True				
ANR	3321181	ParameterType	ut32 *		3319193	0					
ANR	3321182	Identifier	ret_ins_bits		3319193	1					
ANR	3321183	Parameter	ut32 * ret_reg_len	527:36:12148:12164	3319193	5	True				
ANR	3321184	ParameterType	ut32 *		3319193	0					
ANR	3321185	Identifier	ret_reg_len		3319193	1					
ANR	3321186	Parameter	ut32 magic_value	527:55:12167:12182	3319193	6	True				
ANR	3321187	ParameterType	ut32		3319193	0					
ANR	3321188	Identifier	magic_value		3319193	1					
ANR	3321189	Parameter	ut32 ins_pos	528:1:12186:12197	3319193	7	True				
ANR	3321190	ParameterType	ut32		3319193	0					
ANR	3321191	Identifier	ins_pos		3319193	1					
ANR	3321192	Parameter	ut32 ins_len	528:15:12200:12211	3319193	8	True				
ANR	3321193	ParameterType	ut32		3319193	0					
ANR	3321194	Identifier	ins_len		3319193	1					
ANR	3321195	Parameter	ut8 two_ins	528:29:12214:12224	3319193	9	True				
ANR	3321196	ParameterType	ut8		3319193	0					
ANR	3321197	Identifier	two_ins		3319193	1					
ANR	3321198	Parameter	int * err_code	528:42:12227:12239	3319193	10	True				
ANR	3321199	ParameterType	int *		3319193	0					
ANR	3321200	Identifier	err_code		3319193	1					
ANR	3321201	CFGEntryNode	ENTRY		3319193		True				
ANR	3321202	CFGExitNode	EXIT		3319193		True				
ANR	3321203	Symbol	get_reg_pair		3319193						
ANR	3321204	Symbol	& ret_len		3319193						
ANR	3321205	Symbol	flag		3319193						
ANR	3321206	Symbol	is_linear_circular		3319193						
ANR	3321207	Symbol	aux		3319193						
ANR	3321208	Symbol	err_code		3319193						
ANR	3321209	Symbol	strchr		3319193						
ANR	3321210	Symbol	get_ins_bits		3319193						
ANR	3321211	Symbol	hash_code		3319193						
ANR	3321212	Symbol	* err_code		3319193						
ANR	3321213	Symbol	* ins_token		3319193						
ANR	3321214	Symbol	get_sim_reg		3319193						
ANR	3321215	Symbol	ret_reg_len		3319193						
ANR	3321216	Symbol	two_ins		3319193						
ANR	3321217	Symbol	ins_bits		3319193						
ANR	3321218	Symbol	ret_len		3319193						
ANR	3321219	Symbol	* ret_reg_len		3319193						
ANR	3321220	Symbol	ins_token		3319193						
ANR	3321221	Symbol	reg_arg		3319193						
ANR	3321222	Symbol	buff_aux		3319193						
ANR	3321223	Symbol	r_str_ncasecmp		3319193						
ANR	3321224	Symbol	ins_len		3319193						
ANR	3321225	Symbol	res		3319193						
ANR	3321226	Symbol	strcat_dup		3319193						
ANR	3321227	Symbol	C55PLUS_DEBUG		3319193						
ANR	3321228	Symbol	* reg_arg		3319193						
ANR	3321229	Symbol	decode_regis		3319193						
ANR	3321230	Symbol	get_tc2_tc1		3319193						
ANR	3321231	Symbol	NULL		3319193						
ANR	3321232	Symbol	get_opers		3319193						
ANR	3321233	Symbol	ret_ins_bits		3319193						
ANR	3321234	Symbol	get_AR_regs_class1		3319193						
ANR	3321235	Symbol	get_AR_regs_class2		3319193						
ANR	3321236	Symbol	ins_pos		3319193						
ANR	3321237	Symbol	get_status_regs_and_bits		3319193						
ANR	3321238	Symbol	get_cmp_op		3319193						
ANR	3321239	Symbol	stderr		3319193						
ANR	3321240	Symbol	tok_op		3319193						
ANR	3321241	Symbol	magic_value		3319193						
ANR	3321242	Symbol	strdup		3319193						
ANR	3321243	Symbol	ins_token_len		3319193						
ANR	3321244	Symbol	* ret_ins_bits		3319193						
ANR	3321245	Symbol	get_trans_reg		3319193						
