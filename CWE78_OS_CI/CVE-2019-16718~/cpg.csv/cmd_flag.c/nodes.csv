command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	913271	File	data/converged/CVE-2019-16718~_radare2/cmd_flag.c								
ANR	913272	DeclStmt									
ANR	913273	Decl							const char	const char * [ ]	help_msg_f
ANR	913274	DeclStmt									
ANR	913275	Decl							const char	const char * [ ]	help_msg_fc
ANR	913276	DeclStmt									
ANR	913277	Decl							const char	const char * [ ]	help_msg_fd
ANR	913278	DeclStmt									
ANR	913279	Decl							const char	const char * [ ]	help_msg_fs
ANR	913280	DeclStmt									
ANR	913281	Decl							const char	const char * [ ]	help_msg_fz
ANR	913282	Function	cmd_flag_init	104:0:4797:5012							
ANR	913283	FunctionDef	cmd_flag_init (RCore * core)		913282	0					
ANR	913284	CompoundStatement		104:39:4836:5012	913282	0					
ANR	913285	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , f )"	105:1:4839:4870	913282	0	True				
ANR	913286	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , f )"		913282	0					
ANR	913287	Callee	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913288	Identifier	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913289	ArgumentList	core		913282	1					
ANR	913290	Argument	core		913282	0					
ANR	913291	Identifier	core		913282	0					
ANR	913292	Argument	f		913282	1					
ANR	913293	Identifier	f		913282	0					
ANR	913294	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , fc )"	106:1:4873:4905	913282	1	True				
ANR	913295	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , fc )"		913282	0					
ANR	913296	Callee	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913297	Identifier	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913298	ArgumentList	core		913282	1					
ANR	913299	Argument	core		913282	0					
ANR	913300	Identifier	core		913282	0					
ANR	913301	Argument	fc		913282	1					
ANR	913302	Identifier	fc		913282	0					
ANR	913303	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , fd )"	107:1:4908:4940	913282	2	True				
ANR	913304	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , fd )"		913282	0					
ANR	913305	Callee	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913306	Identifier	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913307	ArgumentList	core		913282	1					
ANR	913308	Argument	core		913282	0					
ANR	913309	Identifier	core		913282	0					
ANR	913310	Argument	fd		913282	1					
ANR	913311	Identifier	fd		913282	0					
ANR	913312	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , fs )"	108:1:4943:4975	913282	3	True				
ANR	913313	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , fs )"		913282	0					
ANR	913314	Callee	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913315	Identifier	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913316	ArgumentList	core		913282	1					
ANR	913317	Argument	core		913282	0					
ANR	913318	Identifier	core		913282	0					
ANR	913319	Argument	fs		913282	1					
ANR	913320	Identifier	fs		913282	0					
ANR	913321	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , fz )"	109:1:4978:5010	913282	4	True				
ANR	913322	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , fz )"		913282	0					
ANR	913323	Callee	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913324	Identifier	DEFINE_CMD_DESCRIPTOR		913282	0					
ANR	913325	ArgumentList	core		913282	1					
ANR	913326	Argument	core		913282	0					
ANR	913327	Identifier	core		913282	0					
ANR	913328	Argument	fz		913282	1					
ANR	913329	Identifier	fz		913282	0					
ANR	913330	ReturnType	static void		913282	1					
ANR	913331	Identifier	cmd_flag_init		913282	2					
ANR	913332	ParameterList	RCore * core		913282	3					
ANR	913333	Parameter	RCore * core	104:26:4823:4833	913282	0	True				
ANR	913334	ParameterType	RCore *		913282	0					
ANR	913335	Identifier	core		913282	1					
ANR	913336	CFGEntryNode	ENTRY		913282		True				
ANR	913337	CFGExitNode	EXIT		913282		True				
ANR	913338	Symbol	core		913282						
ANR	913339	Symbol	fz		913282						
ANR	913340	Symbol	f		913282						
ANR	913341	Symbol	fc		913282						
ANR	913342	Symbol	fs		913282						
ANR	913343	Symbol	fd		913282						
ANR	913344	Function	listFlag	112:0:5015:5110							
ANR	913345	FunctionDef	"listFlag (RFlagItem * flag , void * user)"		913344	0					
ANR	913346	CompoundStatement		112:50:5065:5110	913344	0					
ANR	913347	ExpressionStatement	"r_list_append ( user , flag )"	113:1:5068:5094	913344	0	True				
ANR	913348	CallExpression	"r_list_append ( user , flag )"		913344	0					
ANR	913349	Callee	r_list_append		913344	0					
ANR	913350	Identifier	r_list_append		913344	0					
ANR	913351	ArgumentList	user		913344	1					
ANR	913352	Argument	user		913344	0					
ANR	913353	Identifier	user		913344	0					
ANR	913354	Argument	flag		913344	1					
ANR	913355	Identifier	flag		913344	0					
ANR	913356	ReturnStatement	return true ;	114:1:5097:5108	913344	1	True				
ANR	913357	Identifier	true		913344	0					
ANR	913358	ReturnType	static bool		913344	1					
ANR	913359	Identifier	listFlag		913344	2					
ANR	913360	ParameterList	"RFlagItem * flag , void * user"		913344	3					
ANR	913361	Parameter	RFlagItem * flag	112:21:5036:5050	913344	0	True				
ANR	913362	ParameterType	RFlagItem *		913344	0					
ANR	913363	Identifier	flag		913344	1					
ANR	913364	Parameter	void * user	112:38:5053:5062	913344	1	True				
ANR	913365	ParameterType	void *		913344	0					
ANR	913366	Identifier	user		913344	1					
ANR	913367	CFGEntryNode	ENTRY		913344		True				
ANR	913368	CFGExitNode	EXIT		913344		True				
ANR	913369	Symbol	flag		913344						
ANR	913370	Symbol	true		913344						
ANR	913371	Symbol	user		913344						
ANR	913372	Function	countMatching	117:0:5113:5290							
ANR	913373	FunctionDef	"countMatching (const char * a , const char * b)"		913372	0					
ANR	913374	CompoundStatement		117:59:5172:5290	913372	0					
ANR	913375	IdentifierDeclStatement	size_t matches = 0 ;	118:1:5175:5193	913372	0	True				
ANR	913376	IdentifierDecl	matches = 0		913372	0					
ANR	913377	IdentifierDeclType	size_t		913372	0					
ANR	913378	Identifier	matches		913372	1					
ANR	913379	AssignmentExpression	matches = 0		913372	2		=			
ANR	913380	Identifier	matches		913372	0					
ANR	913381	PrimaryExpression	0		913372	1					
ANR	913382	ForStatement	"for ( ; * a && * b ; a ++ , b ++ )"		913372	1					
ANR	913383	Condition	* a && * b	119:8:5203:5210	913372	0	True				
ANR	913384	AndExpression	* a && * b		913372	0		&&			
ANR	913385	UnaryOperationExpression	* a		913372	0					
ANR	913386	UnaryOperator	*		913372	0					
ANR	913387	Identifier	a		913372	1					
ANR	913388	UnaryOperationExpression	* b		913372	1					
ANR	913389	UnaryOperator	*		913372	0					
ANR	913390	Identifier	b		913372	1					
ANR	913391	Expression	"a ++ , b ++"	119:18:5213:5220	913372	1	True				
ANR	913392	PostIncDecOperationExpression	a ++		913372	0					
ANR	913393	Identifier	a		913372	0					
ANR	913394	IncDec	++		913372	1					
ANR	913395	PostIncDecOperationExpression	b ++		913372	1					
ANR	913396	Identifier	b		913372	0					
ANR	913397	IncDec	++		913372	1					
ANR	913398	CompoundStatement		3:28:50:50	913372	2					
ANR	913399	IfStatement	if ( * a != * b )		913372	0					
ANR	913400	Condition	* a != * b	120:6:5231:5238	913372	0	True				
ANR	913401	EqualityExpression	* a != * b		913372	0		!=			
ANR	913402	UnaryOperationExpression	* a		913372	0					
ANR	913403	UnaryOperator	*		913372	0					
ANR	913404	Identifier	a		913372	1					
ANR	913405	UnaryOperationExpression	* b		913372	1					
ANR	913406	UnaryOperator	*		913372	0					
ANR	913407	Identifier	b		913372	1					
ANR	913408	CompoundStatement		4:16:68:68	913372	1					
ANR	913409	BreakStatement	break ;	121:3:5246:5251	913372	0	True				
ANR	913410	ExpressionStatement	matches ++	123:2:5259:5268	913372	1	True				
ANR	913411	PostIncDecOperationExpression	matches ++		913372	0					
ANR	913412	Identifier	matches		913372	0					
ANR	913413	IncDec	++		913372	1					
ANR	913414	ReturnStatement	return matches ;	125:1:5274:5288	913372	2	True				
ANR	913415	Identifier	matches		913372	0					
ANR	913416	ReturnType	static size_t		913372	1					
ANR	913417	Identifier	countMatching		913372	2					
ANR	913418	ParameterList	"const char * a , const char * b"		913372	3					
ANR	913419	Parameter	const char * a	117:29:5142:5154	913372	0	True				
ANR	913420	ParameterType	const char *		913372	0					
ANR	913421	Identifier	a		913372	1					
ANR	913422	Parameter	const char * b	117:44:5157:5169	913372	1	True				
ANR	913423	ParameterType	const char *		913372	0					
ANR	913424	Identifier	b		913372	1					
ANR	913425	CFGEntryNode	ENTRY		913372		True				
ANR	913426	CFGExitNode	EXIT		913372		True				
ANR	913427	Symbol	a		913372						
ANR	913428	Symbol	b		913372						
ANR	913429	Symbol	* a		913372						
ANR	913430	Symbol	* b		913372						
ANR	913431	Symbol	matches		913372						
ANR	913432	Function	__isOnlySon	128:0:5293:5808							
ANR	913433	FunctionDef	"__isOnlySon (RCore * core , RList * flags , const char * kw)"		913432	0					
ANR	913434	CompoundStatement		128:74:5367:5808	913432	0					
ANR	913435	IdentifierDeclStatement	RListIter * iter ;	129:8:5377:5392	913432	0	True				
ANR	913436	IdentifierDecl	* iter		913432	0					
ANR	913437	IdentifierDeclType	RListIter *		913432	0					
ANR	913438	Identifier	iter		913432	1					
ANR	913439	IdentifierDeclStatement	RFlagItem * f ;	130:8:5402:5414	913432	1	True				
ANR	913440	IdentifierDecl	* f		913432	0					
ANR	913441	IdentifierDeclType	RFlagItem *		913432	0					
ANR	913442	Identifier	f		913432	1					
ANR	913443	IdentifierDeclStatement	size_t count = 0 ;	132:8:5425:5441	913432	2	True				
ANR	913444	IdentifierDecl	count = 0		913432	0					
ANR	913445	IdentifierDeclType	size_t		913432	0					
ANR	913446	Identifier	count		913432	1					
ANR	913447	AssignmentExpression	count = 0		913432	2		=			
ANR	913448	Identifier	count		913432	0					
ANR	913449	PrimaryExpression	0		913432	1					
ANR	913450	IdentifierDeclStatement	char * fname = NULL ;	133:8:5451:5469	913432	3	True				
ANR	913451	IdentifierDecl	* fname = NULL		913432	0					
ANR	913452	IdentifierDeclType	char *		913432	0					
ANR	913453	Identifier	fname		913432	1					
ANR	913454	AssignmentExpression	* fname = NULL		913432	2		=			
ANR	913455	Identifier	NULL		913432	0					
ANR	913456	Identifier	NULL		913432	1					
ANR	913457	Statement	r_list_foreach	134:8:5479:5492	913432	4	True				
ANR	913458	Statement	(	134:23:5494:5494	913432	5	True				
ANR	913459	Statement	flags	134:24:5495:5499	913432	6	True				
ANR	913460	Statement	","	134:29:5500:5500	913432	7	True				
ANR	913461	Statement	iter	134:31:5502:5505	913432	8	True				
ANR	913462	Statement	","	134:35:5506:5506	913432	9	True				
ANR	913463	Statement	f	134:37:5508:5508	913432	10	True				
ANR	913464	Statement	)	134:38:5509:5509	913432	11	True				
ANR	913465	CompoundStatement		7:40:143:143	913432	12					
ANR	913466	IfStatement	"if ( ! strncmp ( f -> name , kw , strlen ( kw ) ) )"		913432	0					
ANR	913467	Condition	"! strncmp ( f -> name , kw , strlen ( kw ) )"	135:20:5533:5567	913432	0	True				
ANR	913468	UnaryOperationExpression	"! strncmp ( f -> name , kw , strlen ( kw ) )"		913432	0					
ANR	913469	UnaryOperator	!		913432	0					
ANR	913470	CallExpression	"strncmp ( f -> name , kw , strlen ( kw ) )"		913432	1					
ANR	913471	Callee	strncmp		913432	0					
ANR	913472	Identifier	strncmp		913432	0					
ANR	913473	ArgumentList	f -> name		913432	1					
ANR	913474	Argument	f -> name		913432	0					
ANR	913475	PtrMemberAccess	f -> name		913432	0					
ANR	913476	Identifier	f		913432	0					
ANR	913477	Identifier	name		913432	1					
ANR	913478	Argument	kw		913432	1					
ANR	913479	Identifier	kw		913432	0					
ANR	913480	Argument	strlen ( kw )		913432	2					
ANR	913481	CallExpression	strlen ( kw )		913432	0					
ANR	913482	Callee	strlen		913432	0					
ANR	913483	Identifier	strlen		913432	0					
ANR	913484	ArgumentList	kw		913432	1					
ANR	913485	Argument	kw		913432	0					
ANR	913486	Identifier	kw		913432	0					
ANR	913487	CompoundStatement		8:57:202:202	913432	1					
ANR	913488	ExpressionStatement	count ++	136:24:5596:5603	913432	0	True				
ANR	913489	PostIncDecOperationExpression	count ++		913432	0					
ANR	913490	Identifier	count		913432	0					
ANR	913491	IncDec	++		913432	1					
ANR	913492	IfStatement	if ( count > 1 )		913432	1					
ANR	913493	Condition	count > 1	137:28:5633:5641	913432	0	True				
ANR	913494	RelationalExpression	count > 1		913432	0		>			
ANR	913495	Identifier	count		913432	0					
ANR	913496	PrimaryExpression	1		913432	1					
ANR	913497	CompoundStatement		10:39:276:276	913432	1					
ANR	913498	ReturnStatement	return NULL ;	138:32:5678:5689	913432	0	True				
ANR	913499	Identifier	NULL		913432	0					
ANR	913500	ExpressionStatement	fname = f -> name	140:24:5741:5756	913432	2	True				
ANR	913501	AssignmentExpression	fname = f -> name		913432	0		=			
ANR	913502	Identifier	fname		913432	0					
ANR	913503	PtrMemberAccess	f -> name		913432	1					
ANR	913504	Identifier	f		913432	0					
ANR	913505	Identifier	name		913432	1					
ANR	913506	ReturnStatement	return fname ;	143:8:5794:5806	913432	13	True				
ANR	913507	Identifier	fname		913432	0					
ANR	913508	ReturnType	static const char *		913432	1					
ANR	913509	Identifier	__isOnlySon		913432	2					
ANR	913510	ParameterList	"RCore * core , RList * flags , const char * kw"		913432	3					
ANR	913511	Parameter	RCore * core	128:31:5324:5334	913432	0	True				
ANR	913512	ParameterType	RCore *		913432	0					
ANR	913513	Identifier	core		913432	1					
ANR	913514	Parameter	RList * flags	128:44:5337:5348	913432	1	True				
ANR	913515	ParameterType	RList *		913432	0					
ANR	913516	Identifier	flags		913432	1					
ANR	913517	Parameter	const char * kw	128:58:5351:5364	913432	2	True				
ANR	913518	ParameterType	const char *		913432	0					
ANR	913519	Identifier	kw		913432	1					
ANR	913520	CFGEntryNode	ENTRY		913432		True				
ANR	913521	CFGExitNode	EXIT		913432		True				
ANR	913522	Symbol	* f		913432						
ANR	913523	Symbol	core		913432						
ANR	913524	Symbol	fname		913432						
ANR	913525	Symbol	strncmp		913432						
ANR	913526	Symbol	strlen		913432						
ANR	913527	Symbol	NULL		913432						
ANR	913528	Symbol	f -> name		913432						
ANR	913529	Symbol	f		913432						
ANR	913530	Symbol	flags		913432						
ANR	913531	Symbol	count		913432						
ANR	913532	Symbol	iter		913432						
ANR	913533	Symbol	kw		913432						
ANR	913534	Function	__childrenFlagsOf	146:0:5811:7704							
ANR	913535	FunctionDef	"__childrenFlagsOf (RCore * core , RList * flags , const char * prefix)"		913534	0					
ANR	913536	CompoundStatement		146:79:5890:7704	913534	0					
ANR	913537	IdentifierDeclStatement	RList * list = r_list_newf ( free ) ;	147:1:5893:5925	913534	0	True				
ANR	913538	IdentifierDecl	* list = r_list_newf ( free )		913534	0					
ANR	913539	IdentifierDeclType	RList *		913534	0					
ANR	913540	Identifier	list		913534	1					
ANR	913541	AssignmentExpression	* list = r_list_newf ( free )		913534	2		=			
ANR	913542	Identifier	list		913534	0					
ANR	913543	CallExpression	r_list_newf ( free )		913534	1					
ANR	913544	Callee	r_list_newf		913534	0					
ANR	913545	Identifier	r_list_newf		913534	0					
ANR	913546	ArgumentList	free		913534	1					
ANR	913547	Argument	free		913534	0					
ANR	913548	Identifier	free		913534	0					
ANR	913549	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	148:1:5928:5951	913534	1	True				
ANR	913550	IdentifierDecl	* iter		913534	0					
ANR	913551	IdentifierDeclType	RListIter *		913534	0					
ANR	913552	Identifier	iter		913534	1					
ANR	913553	IdentifierDecl	* iter2		913534	1					
ANR	913554	IdentifierDeclType	RListIter *		913534	0					
ANR	913555	Identifier	iter2		913534	1					
ANR	913556	IdentifierDeclStatement	"RFlagItem * f , * f2 ;"	149:1:5954:5971	913534	2	True				
ANR	913557	IdentifierDecl	* f		913534	0					
ANR	913558	IdentifierDeclType	RFlagItem *		913534	0					
ANR	913559	Identifier	f		913534	1					
ANR	913560	IdentifierDecl	* f2		913534	1					
ANR	913561	IdentifierDeclType	RFlagItem *		913534	0					
ANR	913562	Identifier	f2		913534	1					
ANR	913563	IdentifierDeclStatement	char * fn ;	150:1:5974:5982	913534	3	True				
ANR	913564	IdentifierDecl	* fn		913534	0					
ANR	913565	IdentifierDeclType	char *		913534	0					
ANR	913566	Identifier	fn		913534	1					
ANR	913567	IdentifierDeclStatement	const size_t prefix_len = strlen ( prefix ) ;	152:1:5986:6027	913534	4	True				
ANR	913568	IdentifierDecl	prefix_len = strlen ( prefix )		913534	0					
ANR	913569	IdentifierDeclType	const size_t		913534	0					
ANR	913570	Identifier	prefix_len		913534	1					
ANR	913571	AssignmentExpression	prefix_len = strlen ( prefix )		913534	2		=			
ANR	913572	Identifier	prefix_len		913534	0					
ANR	913573	CallExpression	strlen ( prefix )		913534	1					
ANR	913574	Callee	strlen		913534	0					
ANR	913575	Identifier	strlen		913534	0					
ANR	913576	ArgumentList	prefix		913534	1					
ANR	913577	Argument	prefix		913534	0					
ANR	913578	Identifier	prefix		913534	0					
ANR	913579	Statement	r_list_foreach	153:1:6030:6043	913534	5	True				
ANR	913580	Statement	(	153:16:6045:6045	913534	6	True				
ANR	913581	Statement	flags	153:17:6046:6050	913534	7	True				
ANR	913582	Statement	","	153:22:6051:6051	913534	8	True				
ANR	913583	Statement	iter	153:24:6053:6056	913534	9	True				
ANR	913584	Statement	","	153:28:6057:6057	913534	10	True				
ANR	913585	Statement	f	153:30:6059:6059	913534	11	True				
ANR	913586	Statement	)	153:31:6060:6060	913534	12	True				
ANR	913587	CompoundStatement		70:2:1538:1556	913534	13					
ANR	913588	IfStatement	"if ( prefix_len > 0 && strncmp ( f -> name , prefix , prefix_len ) )"		913534	0					
ANR	913589	Condition	"prefix_len > 0 && strncmp ( f -> name , prefix , prefix_len )"	154:6:6070:6124	913534	0	True				
ANR	913590	AndExpression	"prefix_len > 0 && strncmp ( f -> name , prefix , prefix_len )"		913534	0		&&			
ANR	913591	RelationalExpression	prefix_len > 0		913534	0		>			
ANR	913592	Identifier	prefix_len		913534	0					
ANR	913593	PrimaryExpression	0		913534	1					
ANR	913594	CallExpression	"strncmp ( f -> name , prefix , prefix_len )"		913534	1					
ANR	913595	Callee	strncmp		913534	0					
ANR	913596	Identifier	strncmp		913534	0					
ANR	913597	ArgumentList	f -> name		913534	1					
ANR	913598	Argument	f -> name		913534	0					
ANR	913599	PtrMemberAccess	f -> name		913534	0					
ANR	913600	Identifier	f		913534	0					
ANR	913601	Identifier	name		913534	1					
ANR	913602	Argument	prefix		913534	1					
ANR	913603	Identifier	prefix		913534	0					
ANR	913604	Argument	prefix_len		913534	2					
ANR	913605	Identifier	prefix_len		913534	0					
ANR	913606	CompoundStatement		9:63:236:236	913534	1					
ANR	913607	ContinueStatement	continue ;	155:3:6132:6140	913534	0	True				
ANR	913608	IfStatement	if ( prefix_len > strlen ( f -> name ) )		913534	1					
ANR	913609	Condition	prefix_len > strlen ( f -> name )	157:6:6152:6180	913534	0	True				
ANR	913610	RelationalExpression	prefix_len > strlen ( f -> name )		913534	0		>			
ANR	913611	Identifier	prefix_len		913534	0					
ANR	913612	CallExpression	strlen ( f -> name )		913534	1					
ANR	913613	Callee	strlen		913534	0					
ANR	913614	Identifier	strlen		913534	0					
ANR	913615	ArgumentList	f -> name		913534	1					
ANR	913616	Argument	f -> name		913534	0					
ANR	913617	PtrMemberAccess	f -> name		913534	0					
ANR	913618	Identifier	f		913534	0					
ANR	913619	Identifier	name		913534	1					
ANR	913620	CompoundStatement		12:37:292:292	913534	1					
ANR	913621	ContinueStatement	continue ;	158:3:6188:6196	913534	0	True				
ANR	913622	IfStatement	if ( r_cons_is_breaked ( ) )		913534	2					
ANR	913623	Condition	r_cons_is_breaked ( )	160:6:6208:6227	913534	0	True				
ANR	913624	CallExpression	r_cons_is_breaked ( )		913534	0					
ANR	913625	Callee	r_cons_is_breaked		913534	0					
ANR	913626	Identifier	r_cons_is_breaked		913534	0					
ANR	913627	ArgumentList			913534	1					
ANR	913628	CompoundStatement		15:28:339:339	913534	1					
ANR	913629	BreakStatement	break ;	161:3:6235:6240	913534	0	True				
ANR	913630	IdentifierDeclStatement	const char * name = f -> name ;	163:2:6248:6274	913534	3	True				
ANR	913631	IdentifierDecl	* name = f -> name		913534	0					
ANR	913632	IdentifierDeclType	const char *		913534	0					
ANR	913633	Identifier	name		913534	1					
ANR	913634	AssignmentExpression	* name = f -> name		913534	2		=			
ANR	913635	Identifier	name		913534	0					
ANR	913636	PtrMemberAccess	f -> name		913534	1					
ANR	913637	Identifier	f		913534	0					
ANR	913638	Identifier	name		913534	1					
ANR	913639	IdentifierDeclStatement	int name_len = strlen ( name ) ;	164:2:6278:6306	913534	4	True				
ANR	913640	IdentifierDecl	name_len = strlen ( name )		913534	0					
ANR	913641	IdentifierDeclType	int		913534	0					
ANR	913642	Identifier	name_len		913534	1					
ANR	913643	AssignmentExpression	name_len = strlen ( name )		913534	2		=			
ANR	913644	Identifier	name_len		913534	0					
ANR	913645	CallExpression	strlen ( name )		913534	1					
ANR	913646	Callee	strlen		913534	0					
ANR	913647	Identifier	strlen		913534	0					
ANR	913648	ArgumentList	name		913534	1					
ANR	913649	Argument	name		913534	0					
ANR	913650	Identifier	name		913534	0					
ANR	913651	Statement	r_list_foreach	165:2:6310:6323	913534	5	True				
ANR	913652	Statement	(	165:17:6325:6325	913534	6	True				
ANR	913653	Statement	flags	165:18:6326:6330	913534	7	True				
ANR	913654	Statement	","	165:23:6331:6331	913534	8	True				
ANR	913655	Statement	iter2	165:25:6333:6337	913534	9	True				
ANR	913656	Statement	","	165:30:6338:6338	913534	10	True				
ANR	913657	Statement	f2	165:32:6340:6341	913534	11	True				
ANR	913658	Statement	)	165:34:6342:6342	913534	12	True				
ANR	913659	CompoundStatement		27:3:604:649	913534	13					
ANR	913660	IfStatement	if ( prefix_len > strlen ( f2 -> name ) )		913534	0					
ANR	913661	Condition	prefix_len > strlen ( f2 -> name )	166:7:6353:6382	913534	0	True				
ANR	913662	RelationalExpression	prefix_len > strlen ( f2 -> name )		913534	0		>			
ANR	913663	Identifier	prefix_len		913534	0					
ANR	913664	CallExpression	strlen ( f2 -> name )		913534	1					
ANR	913665	Callee	strlen		913534	0					
ANR	913666	Identifier	strlen		913534	0					
ANR	913667	ArgumentList	f2 -> name		913534	1					
ANR	913668	Argument	f2 -> name		913534	0					
ANR	913669	PtrMemberAccess	f2 -> name		913534	0					
ANR	913670	Identifier	f2		913534	0					
ANR	913671	Identifier	name		913534	1					
ANR	913672	CompoundStatement		21:39:494:494	913534	1					
ANR	913673	ContinueStatement	continue ;	167:4:6391:6399	913534	0	True				
ANR	913674	IfStatement	"if ( prefix_len > 0 && strncmp ( f2 -> name , prefix , prefix_len ) )"		913534	1					
ANR	913675	Condition	"prefix_len > 0 && strncmp ( f2 -> name , prefix , prefix_len )"	169:7:6413:6468	913534	0	True				
ANR	913676	AndExpression	"prefix_len > 0 && strncmp ( f2 -> name , prefix , prefix_len )"		913534	0		&&			
ANR	913677	RelationalExpression	prefix_len > 0		913534	0		>			
ANR	913678	Identifier	prefix_len		913534	0					
ANR	913679	PrimaryExpression	0		913534	1					
ANR	913680	CallExpression	"strncmp ( f2 -> name , prefix , prefix_len )"		913534	1					
ANR	913681	Callee	strncmp		913534	0					
ANR	913682	Identifier	strncmp		913534	0					
ANR	913683	ArgumentList	f2 -> name		913534	1					
ANR	913684	Argument	f2 -> name		913534	0					
ANR	913685	PtrMemberAccess	f2 -> name		913534	0					
ANR	913686	Identifier	f2		913534	0					
ANR	913687	Identifier	name		913534	1					
ANR	913688	Argument	prefix		913534	1					
ANR	913689	Identifier	prefix		913534	0					
ANR	913690	Argument	prefix_len		913534	2					
ANR	913691	Identifier	prefix_len		913534	0					
ANR	913692	CompoundStatement		24:65:580:580	913534	1					
ANR	913693	ContinueStatement	continue ;	170:4:6477:6485	913534	0	True				
ANR	913694	IdentifierDeclStatement	"int matching = countMatching ( name , f2 -> name ) ;"	172:3:6495:6540	913534	2	True				
ANR	913695	IdentifierDecl	"matching = countMatching ( name , f2 -> name )"		913534	0					
ANR	913696	IdentifierDeclType	int		913534	0					
ANR	913697	Identifier	matching		913534	1					
ANR	913698	AssignmentExpression	"matching = countMatching ( name , f2 -> name )"		913534	2		=			
ANR	913699	Identifier	matching		913534	0					
ANR	913700	CallExpression	"countMatching ( name , f2 -> name )"		913534	1					
ANR	913701	Callee	countMatching		913534	0					
ANR	913702	Identifier	countMatching		913534	0					
ANR	913703	ArgumentList	name		913534	1					
ANR	913704	Argument	name		913534	0					
ANR	913705	Identifier	name		913534	0					
ANR	913706	Argument	f2 -> name		913534	1					
ANR	913707	PtrMemberAccess	f2 -> name		913534	0					
ANR	913708	Identifier	f2		913534	0					
ANR	913709	Identifier	name		913534	1					
ANR	913710	IfStatement	if ( matching < prefix_len || matching == name_len )		913534	3					
ANR	913711	Condition	matching < prefix_len || matching == name_len	173:7:6549:6593	913534	0	True				
ANR	913712	OrExpression	matching < prefix_len || matching == name_len		913534	0		||			
ANR	913713	RelationalExpression	matching < prefix_len		913534	0		<			
ANR	913714	Identifier	matching		913534	0					
ANR	913715	Identifier	prefix_len		913534	1					
ANR	913716	EqualityExpression	matching == name_len		913534	1		==			
ANR	913717	Identifier	matching		913534	0					
ANR	913718	Identifier	name_len		913534	1					
ANR	913719	CompoundStatement		28:54:705:705	913534	1					
ANR	913720	ContinueStatement	continue ;	174:4:6602:6610	913534	0	True				
ANR	913721	IfStatement	if ( matching > name_len )		913534	4					
ANR	913722	Condition	matching > name_len	176:7:6624:6642	913534	0	True				
ANR	913723	RelationalExpression	matching > name_len		913534	0		>			
ANR	913724	Identifier	matching		913534	0					
ANR	913725	Identifier	name_len		913534	1					
ANR	913726	CompoundStatement		31:28:754:754	913534	1					
ANR	913727	BreakStatement	break ;	177:4:6651:6656	913534	0	True				
ANR	913728	IfStatement	if ( matching < name_len )		913534	5					
ANR	913729	Condition	matching < name_len	179:7:6670:6688	913534	0	True				
ANR	913730	RelationalExpression	matching < name_len		913534	0		<			
ANR	913731	Identifier	matching		913534	0					
ANR	913732	Identifier	name_len		913534	1					
ANR	913733	CompoundStatement		34:28:800:800	913534	1					
ANR	913734	ExpressionStatement	name_len = matching	180:4:6697:6716	913534	0	True				
ANR	913735	AssignmentExpression	name_len = matching		913534	0		=			
ANR	913736	Identifier	name_len		913534	0					
ANR	913737	Identifier	matching		913534	1					
ANR	913738	IdentifierDeclStatement	"char * kw = r_str_ndup ( name , name_len + 1 ) ;"	183:2:6729:6771	913534	14	True				
ANR	913739	IdentifierDecl	"* kw = r_str_ndup ( name , name_len + 1 )"		913534	0					
ANR	913740	IdentifierDeclType	char *		913534	0					
ANR	913741	Identifier	kw		913534	1					
ANR	913742	AssignmentExpression	"* kw = r_str_ndup ( name , name_len + 1 )"		913534	2		=			
ANR	913743	Identifier	kw		913534	0					
ANR	913744	CallExpression	"r_str_ndup ( name , name_len + 1 )"		913534	1					
ANR	913745	Callee	r_str_ndup		913534	0					
ANR	913746	Identifier	r_str_ndup		913534	0					
ANR	913747	ArgumentList	name		913534	1					
ANR	913748	Argument	name		913534	0					
ANR	913749	Identifier	name		913534	0					
ANR	913750	Argument	name_len + 1		913534	1					
ANR	913751	AdditiveExpression	name_len + 1		913534	0		+			
ANR	913752	Identifier	name_len		913534	0					
ANR	913753	PrimaryExpression	1		913534	1					
ANR	913754	IdentifierDeclStatement	const int kw_len = strlen ( kw ) ;	184:2:6775:6805	913534	15	True				
ANR	913755	IdentifierDecl	kw_len = strlen ( kw )		913534	0					
ANR	913756	IdentifierDeclType	const int		913534	0					
ANR	913757	Identifier	kw_len		913534	1					
ANR	913758	AssignmentExpression	kw_len = strlen ( kw )		913534	2		=			
ANR	913759	Identifier	kw_len		913534	0					
ANR	913760	CallExpression	strlen ( kw )		913534	1					
ANR	913761	Callee	strlen		913534	0					
ANR	913762	Identifier	strlen		913534	0					
ANR	913763	ArgumentList	kw		913534	1					
ANR	913764	Argument	kw		913534	0					
ANR	913765	Identifier	kw		913534	0					
ANR	913766	IdentifierDeclStatement	"const char * only = __isOnlySon ( core , flags , kw ) ;"	185:2:6809:6857	913534	16	True				
ANR	913767	IdentifierDecl	"* only = __isOnlySon ( core , flags , kw )"		913534	0					
ANR	913768	IdentifierDeclType	const char *		913534	0					
ANR	913769	Identifier	only		913534	1					
ANR	913770	AssignmentExpression	"* only = __isOnlySon ( core , flags , kw )"		913534	2		=			
ANR	913771	Identifier	only		913534	0					
ANR	913772	CallExpression	"__isOnlySon ( core , flags , kw )"		913534	1					
ANR	913773	Callee	__isOnlySon		913534	0					
ANR	913774	Identifier	__isOnlySon		913534	0					
ANR	913775	ArgumentList	core		913534	1					
ANR	913776	Argument	core		913534	0					
ANR	913777	Identifier	core		913534	0					
ANR	913778	Argument	flags		913534	1					
ANR	913779	Identifier	flags		913534	0					
ANR	913780	Argument	kw		913534	2					
ANR	913781	Identifier	kw		913534	0					
ANR	913782	IfStatement	if ( only )		913534	17					
ANR	913783	Condition	only	186:6:6865:6868	913534	0	True				
ANR	913784	Identifier	only		913534	0					
ANR	913785	CompoundStatement		41:12:980:980	913534	1					
ANR	913786	ExpressionStatement	free ( kw )	187:3:6876:6885	913534	0	True				
ANR	913787	CallExpression	free ( kw )		913534	0					
ANR	913788	Callee	free		913534	0					
ANR	913789	Identifier	free		913534	0					
ANR	913790	ArgumentList	kw		913534	1					
ANR	913791	Argument	kw		913534	0					
ANR	913792	Identifier	kw		913534	0					
ANR	913793	ExpressionStatement	kw = strdup ( only )	188:3:6890:6908	913534	1	True				
ANR	913794	AssignmentExpression	kw = strdup ( only )		913534	0		=			
ANR	913795	Identifier	kw		913534	0					
ANR	913796	CallExpression	strdup ( only )		913534	1					
ANR	913797	Callee	strdup		913534	0					
ANR	913798	Identifier	strdup		913534	0					
ANR	913799	ArgumentList	only		913534	1					
ANR	913800	Argument	only		913534	0					
ANR	913801	Identifier	only		913534	0					
ANR	913802	ElseStatement	else		913534	0					
ANR	913803	CompoundStatement		46:3:1062:1082	913534	0					
ANR	913804	IdentifierDeclStatement	const char * fname = NULL ;	190:3:6924:6948	913534	0	True				
ANR	913805	IdentifierDecl	* fname = NULL		913534	0					
ANR	913806	IdentifierDeclType	const char *		913534	0					
ANR	913807	Identifier	fname		913534	1					
ANR	913808	AssignmentExpression	* fname = NULL		913534	2		=			
ANR	913809	Identifier	NULL		913534	0					
ANR	913810	Identifier	NULL		913534	1					
ANR	913811	IdentifierDeclStatement	size_t fname_len = 0 ;	191:3:6953:6973	913534	1	True				
ANR	913812	IdentifierDecl	fname_len = 0		913534	0					
ANR	913813	IdentifierDeclType	size_t		913534	0					
ANR	913814	Identifier	fname_len		913534	1					
ANR	913815	AssignmentExpression	fname_len = 0		913534	2		=			
ANR	913816	Identifier	fname_len		913534	0					
ANR	913817	PrimaryExpression	0		913534	1					
ANR	913818	Statement	r_list_foreach	192:3:6978:6991	913534	2	True				
ANR	913819	Statement	(	192:18:6993:6993	913534	3	True				
ANR	913820	Statement	flags	192:19:6994:6998	913534	4	True				
ANR	913821	Statement	","	192:24:6999:6999	913534	5	True				
ANR	913822	Statement	iter2	192:26:7001:7005	913534	6	True				
ANR	913823	Statement	","	192:31:7006:7006	913534	7	True				
ANR	913824	Statement	f2	192:33:7008:7009	913534	8	True				
ANR	913825	Statement	)	192:35:7010:7010	913534	9	True				
ANR	913826	CompoundStatement		47:37:1121:1121	913534	10					
ANR	913827	IfStatement	"if ( strncmp ( f2 -> name , kw , kw_len ) )"		913534	0					
ANR	913828	Condition	"strncmp ( f2 -> name , kw , kw_len )"	193:8:7022:7051	913534	0	True				
ANR	913829	CallExpression	"strncmp ( f2 -> name , kw , kw_len )"		913534	0					
ANR	913830	Callee	strncmp		913534	0					
ANR	913831	Identifier	strncmp		913534	0					
ANR	913832	ArgumentList	f2 -> name		913534	1					
ANR	913833	Argument	f2 -> name		913534	0					
ANR	913834	PtrMemberAccess	f2 -> name		913534	0					
ANR	913835	Identifier	f2		913534	0					
ANR	913836	Identifier	name		913534	1					
ANR	913837	Argument	kw		913534	1					
ANR	913838	Identifier	kw		913534	0					
ANR	913839	Argument	kw_len		913534	2					
ANR	913840	Identifier	kw_len		913534	0					
ANR	913841	CompoundStatement		48:40:1163:1163	913534	1					
ANR	913842	ContinueStatement	continue ;	194:5:7061:7069	913534	0	True				
ANR	913843	IfStatement	if ( fname )		913534	1					
ANR	913844	Condition	fname	196:8:7085:7089	913534	0	True				
ANR	913845	Identifier	fname		913534	0					
ANR	913846	CompoundStatement		52:5:1208:1254	913534	1					
ANR	913847	IdentifierDeclStatement	"int matching = countMatching ( fname , f2 -> name ) ;"	197:5:7099:7145	913534	0	True				
ANR	913848	IdentifierDecl	"matching = countMatching ( fname , f2 -> name )"		913534	0					
ANR	913849	IdentifierDeclType	int		913534	0					
ANR	913850	Identifier	matching		913534	1					
ANR	913851	AssignmentExpression	"matching = countMatching ( fname , f2 -> name )"		913534	2		=			
ANR	913852	Identifier	matching		913534	0					
ANR	913853	CallExpression	"countMatching ( fname , f2 -> name )"		913534	1					
ANR	913854	Callee	countMatching		913534	0					
ANR	913855	Identifier	countMatching		913534	0					
ANR	913856	ArgumentList	fname		913534	1					
ANR	913857	Argument	fname		913534	0					
ANR	913858	Identifier	fname		913534	0					
ANR	913859	Argument	f2 -> name		913534	1					
ANR	913860	PtrMemberAccess	f2 -> name		913534	0					
ANR	913861	Identifier	f2		913534	0					
ANR	913862	Identifier	name		913534	1					
ANR	913863	IfStatement	if ( fname_len )		913534	1					
ANR	913864	Condition	fname_len	198:9:7156:7164	913534	0	True				
ANR	913865	Identifier	fname_len		913534	0					
ANR	913866	CompoundStatement		53:20:1276:1276	913534	1					
ANR	913867	IfStatement	if ( matching < fname_len )		913534	0					
ANR	913868	Condition	matching < fname_len	199:10:7179:7198	913534	0	True				
ANR	913869	RelationalExpression	matching < fname_len		913534	0		<			
ANR	913870	Identifier	matching		913534	0					
ANR	913871	Identifier	fname_len		913534	1					
ANR	913872	CompoundStatement		54:32:1310:1310	913534	1					
ANR	913873	ExpressionStatement	fname_len = matching	200:7:7210:7230	913534	0	True				
ANR	913874	AssignmentExpression	fname_len = matching		913534	0		=			
ANR	913875	Identifier	fname_len		913534	0					
ANR	913876	Identifier	matching		913534	1					
ANR	913877	ElseStatement	else		913534	0					
ANR	913878	CompoundStatement		57:12:1361:1361	913534	0					
ANR	913879	ExpressionStatement	fname_len = matching	203:6:7260:7280	913534	0	True				
ANR	913880	AssignmentExpression	fname_len = matching		913534	0		=			
ANR	913881	Identifier	fname_len		913534	0					
ANR	913882	Identifier	matching		913534	1					
ANR	913883	ElseStatement	else		913534	0					
ANR	913884	CompoundStatement		60:11:1409:1409	913534	0					
ANR	913885	ExpressionStatement	fname = f2 -> name	206:5:7307:7323	913534	0	True				
ANR	913886	AssignmentExpression	fname = f2 -> name		913534	0		=			
ANR	913887	Identifier	fname		913534	0					
ANR	913888	PtrMemberAccess	f2 -> name		913534	1					
ANR	913889	Identifier	f2		913534	0					
ANR	913890	Identifier	name		913534	1					
ANR	913891	IfStatement	if ( fname_len > 0 )		913534	11					
ANR	913892	Condition	fname_len > 0	209:7:7343:7355	913534	0	True				
ANR	913893	RelationalExpression	fname_len > 0		913534	0		>			
ANR	913894	Identifier	fname_len		913534	0					
ANR	913895	PrimaryExpression	0		913534	1					
ANR	913896	CompoundStatement		64:22:1467:1467	913534	1					
ANR	913897	ExpressionStatement	free ( kw )	210:4:7364:7373	913534	0	True				
ANR	913898	CallExpression	free ( kw )		913534	0					
ANR	913899	Callee	free		913534	0					
ANR	913900	Identifier	free		913534	0					
ANR	913901	ArgumentList	kw		913534	1					
ANR	913902	Argument	kw		913534	0					
ANR	913903	Identifier	kw		913534	0					
ANR	913904	ExpressionStatement	"kw = r_str_ndup ( fname , fname_len )"	211:4:7379:7413	913534	1	True				
ANR	913905	AssignmentExpression	"kw = r_str_ndup ( fname , fname_len )"		913534	0		=			
ANR	913906	Identifier	kw		913534	0					
ANR	913907	CallExpression	"r_str_ndup ( fname , fname_len )"		913534	1					
ANR	913908	Callee	r_str_ndup		913534	0					
ANR	913909	Identifier	r_str_ndup		913534	0					
ANR	913910	ArgumentList	fname		913534	1					
ANR	913911	Argument	fname		913534	0					
ANR	913912	Identifier	fname		913534	0					
ANR	913913	Argument	fname_len		913534	1					
ANR	913914	Identifier	fname_len		913534	0					
ANR	913915	IdentifierDeclStatement	bool found = false ;	215:2:7429:7447	913534	18	True				
ANR	913916	IdentifierDecl	found = false		913534	0					
ANR	913917	IdentifierDeclType	bool		913534	0					
ANR	913918	Identifier	found		913534	1					
ANR	913919	AssignmentExpression	found = false		913534	2		=			
ANR	913920	Identifier	false		913534	0					
ANR	913921	Identifier	false		913534	1					
ANR	913922	Statement	r_list_foreach	216:2:7451:7464	913534	19	True				
ANR	913923	Statement	(	216:17:7466:7466	913534	20	True				
ANR	913924	Statement	list	216:18:7467:7470	913534	21	True				
ANR	913925	Statement	","	216:22:7471:7471	913534	22	True				
ANR	913926	Statement	iter2	216:24:7473:7477	913534	23	True				
ANR	913927	Statement	","	216:29:7478:7478	913534	24	True				
ANR	913928	Statement	fn	216:31:7480:7481	913534	25	True				
ANR	913929	Statement	)	216:33:7482:7482	913534	26	True				
ANR	913930	CompoundStatement		71:35:1593:1593	913534	27					
ANR	913931	IfStatement	"if ( ! strcmp ( fn , kw ) )"		913534	0					
ANR	913932	Condition	"! strcmp ( fn , kw )"	217:7:7493:7508	913534	0	True				
ANR	913933	UnaryOperationExpression	"! strcmp ( fn , kw )"		913534	0					
ANR	913934	UnaryOperator	!		913534	0					
ANR	913935	CallExpression	"strcmp ( fn , kw )"		913534	1					
ANR	913936	Callee	strcmp		913534	0					
ANR	913937	Identifier	strcmp		913534	0					
ANR	913938	ArgumentList	fn		913534	1					
ANR	913939	Argument	fn		913534	0					
ANR	913940	Identifier	fn		913534	0					
ANR	913941	Argument	kw		913534	1					
ANR	913942	Identifier	kw		913534	0					
ANR	913943	CompoundStatement		72:25:1620:1620	913534	1					
ANR	913944	ExpressionStatement	found = true	218:4:7517:7529	913534	0	True				
ANR	913945	AssignmentExpression	found = true		913534	0		=			
ANR	913946	Identifier	found		913534	0					
ANR	913947	Identifier	true		913534	1					
ANR	913948	BreakStatement	break ;	219:4:7535:7540	913534	1	True				
ANR	913949	IfStatement	if ( found )		913534	28					
ANR	913950	Condition	found	222:6:7557:7561	913534	0	True				
ANR	913951	Identifier	found		913534	0					
ANR	913952	CompoundStatement		77:13:1673:1673	913534	1					
ANR	913953	ExpressionStatement	free ( kw )	223:3:7569:7578	913534	0	True				
ANR	913954	CallExpression	free ( kw )		913534	0					
ANR	913955	Callee	free		913534	0					
ANR	913956	Identifier	free		913534	0					
ANR	913957	ArgumentList	kw		913534	1					
ANR	913958	Argument	kw		913534	0					
ANR	913959	Identifier	kw		913534	0					
ANR	913960	ElseStatement	else		913534	0					
ANR	913961	CompoundStatement		79:9:1698:1698	913534	0					
ANR	913962	IfStatement	"if ( strcmp ( prefix , kw ) )"		913534	0					
ANR	913963	Condition	"strcmp ( prefix , kw )"	225:7:7598:7616	913534	0	True				
ANR	913964	CallExpression	"strcmp ( prefix , kw )"		913534	0					
ANR	913965	Callee	strcmp		913534	0					
ANR	913966	Identifier	strcmp		913534	0					
ANR	913967	ArgumentList	prefix		913534	1					
ANR	913968	Argument	prefix		913534	0					
ANR	913969	Identifier	prefix		913534	0					
ANR	913970	Argument	kw		913534	1					
ANR	913971	Identifier	kw		913534	0					
ANR	913972	CompoundStatement		80:28:1728:1728	913534	1					
ANR	913973	ExpressionStatement	"r_list_append ( list , kw )"	226:4:7625:7649	913534	0	True				
ANR	913974	CallExpression	"r_list_append ( list , kw )"		913534	0					
ANR	913975	Callee	r_list_append		913534	0					
ANR	913976	Identifier	r_list_append		913534	0					
ANR	913977	ArgumentList	list		913534	1					
ANR	913978	Argument	list		913534	0					
ANR	913979	Identifier	list		913534	0					
ANR	913980	Argument	kw		913534	1					
ANR	913981	Identifier	kw		913534	0					
ANR	913982	ElseStatement	else		913534	0					
ANR	913983	CompoundStatement		82:10:1770:1770	913534	0					
ANR	913984	ExpressionStatement	free ( kw )	228:4:7667:7676	913534	0	True				
ANR	913985	CallExpression	free ( kw )		913534	0					
ANR	913986	Callee	free		913534	0					
ANR	913987	Identifier	free		913534	0					
ANR	913988	ArgumentList	kw		913534	1					
ANR	913989	Argument	kw		913534	0					
ANR	913990	Identifier	kw		913534	0					
ANR	913991	ReturnStatement	return list ;	232:1:7691:7702	913534	14	True				
ANR	913992	Identifier	list		913534	0					
ANR	913993	ReturnType	static RList *		913534	1					
ANR	913994	Identifier	__childrenFlagsOf		913534	2					
ANR	913995	ParameterList	"RCore * core , RList * flags , const char * prefix"		913534	3					
ANR	913996	Parameter	RCore * core	146:32:5843:5853	913534	0	True				
ANR	913997	ParameterType	RCore *		913534	0					
ANR	913998	Identifier	core		913534	1					
ANR	913999	Parameter	RList * flags	146:45:5856:5867	913534	1	True				
ANR	914000	ParameterType	RList *		913534	0					
ANR	914001	Identifier	flags		913534	1					
ANR	914002	Parameter	const char * prefix	146:59:5870:5887	913534	2	True				
ANR	914003	ParameterType	const char *		913534	0					
ANR	914004	Identifier	prefix		913534	1					
ANR	914005	CFGEntryNode	ENTRY		913534		True				
ANR	914006	CFGExitNode	EXIT		913534		True				
ANR	914007	CFGErrorNode	ERROR		913534		True				
ANR	914008	Symbol	f -> name		913534						
ANR	914009	Symbol	prefix		913534						
ANR	914010	Symbol	r_str_ndup		913534						
ANR	914011	Symbol	f2 -> name		913534						
ANR	914012	Symbol	flags		913534						
ANR	914013	Symbol	fn		913534						
ANR	914014	Symbol	prefix_len		913534						
ANR	914015	Symbol	f2		913534						
ANR	914016	Symbol	matching		913534						
ANR	914017	Symbol	strlen		913534						
ANR	914018	Symbol	strncmp		913534						
ANR	914019	Symbol	* f2		913534						
ANR	914020	Symbol	r_cons_is_breaked		913534						
ANR	914021	Symbol	kw_len		913534						
ANR	914022	Symbol	found		913534						
ANR	914023	Symbol	only		913534						
ANR	914024	Symbol	name_len		913534						
ANR	914025	Symbol	free		913534						
ANR	914026	Symbol	__isOnlySon		913534						
ANR	914027	Symbol	strcmp		913534						
ANR	914028	Symbol	fname		913534						
ANR	914029	Symbol	NULL		913534						
ANR	914030	Symbol	r_list_newf		913534						
ANR	914031	Symbol	f		913534						
ANR	914032	Symbol	iter2		913534						
ANR	914033	Symbol	false		913534						
ANR	914034	Symbol	iter		913534						
ANR	914035	Symbol	list		913534						
ANR	914036	Symbol	kw		913534						
ANR	914037	Symbol	* f		913534						
ANR	914038	Symbol	core		913534						
ANR	914039	Symbol	name		913534						
ANR	914040	Symbol	true		913534						
ANR	914041	Symbol	countMatching		913534						
ANR	914042	Symbol	fname_len		913534						
ANR	914043	Symbol	strdup		913534						
ANR	914044	DeclStmt									
ANR	914045	Decl							void	"void ( RCore * core , RList * list , const char * prefix , int mode , int depth )"	__printRecursive
ANR	914046	Function	__printRecursive	237:0:7806:8625							
ANR	914047	FunctionDef	"__printRecursive (RCore * core , RList * flags , const char * prefix , int mode , int depth)"		914046	0					
ANR	914048	CompoundStatement		237:98:7904:8625	914046	0					
ANR	914049	IdentifierDeclStatement	char * fn ;	238:1:7907:7915	914046	0	True				
ANR	914050	IdentifierDecl	* fn		914046	0					
ANR	914051	IdentifierDeclType	char *		914046	0					
ANR	914052	Identifier	fn		914046	1					
ANR	914053	IdentifierDeclStatement	RListIter * iter ;	239:1:7918:7933	914046	1	True				
ANR	914054	IdentifierDecl	* iter		914046	0					
ANR	914055	IdentifierDeclType	RListIter *		914046	0					
ANR	914056	Identifier	iter		914046	1					
ANR	914057	IdentifierDeclStatement	const int prefix_len = strlen ( prefix ) ;	240:1:7936:7974	914046	2	True				
ANR	914058	IdentifierDecl	prefix_len = strlen ( prefix )		914046	0					
ANR	914059	IdentifierDeclType	const int		914046	0					
ANR	914060	Identifier	prefix_len		914046	1					
ANR	914061	AssignmentExpression	prefix_len = strlen ( prefix )		914046	2		=			
ANR	914062	Identifier	prefix_len		914046	0					
ANR	914063	CallExpression	strlen ( prefix )		914046	1					
ANR	914064	Callee	strlen		914046	0					
ANR	914065	Identifier	strlen		914046	0					
ANR	914066	ArgumentList	prefix		914046	1					
ANR	914067	Argument	prefix		914046	0					
ANR	914068	Identifier	prefix		914046	0					
ANR	914069	IfStatement	if ( mode == '*' && ! * prefix )		914046	3					
ANR	914070	Condition	mode == '*' && ! * prefix	242:5:8016:8038	914046	0	True				
ANR	914071	AndExpression	mode == '*' && ! * prefix		914046	0		&&			
ANR	914072	EqualityExpression	mode == '*'		914046	0		==			
ANR	914073	Identifier	mode		914046	0					
ANR	914074	PrimaryExpression	'*'		914046	1					
ANR	914075	UnaryOperationExpression	! * prefix		914046	1					
ANR	914076	UnaryOperator	!		914046	0					
ANR	914077	UnaryOperationExpression	* prefix		914046	1					
ANR	914078	UnaryOperator	*		914046	0					
ANR	914079	Identifier	prefix		914046	1					
ANR	914080	CompoundStatement		6:30:136:136	914046	1					
ANR	914081	ExpressionStatement	"r_cons_printf ( ""agn root\\n"" )"	243:2:8045:8073	914046	0	True				
ANR	914082	CallExpression	"r_cons_printf ( ""agn root\\n"" )"		914046	0					
ANR	914083	Callee	r_cons_printf		914046	0					
ANR	914084	Identifier	r_cons_printf		914046	0					
ANR	914085	ArgumentList	"""agn root\\n"""		914046	1					
ANR	914086	Argument	"""agn root\\n"""		914046	0					
ANR	914087	PrimaryExpression	"""agn root\\n"""		914046	0					
ANR	914088	IfStatement	"if ( r_flag_get ( core -> flags , prefix ) )"		914046	4					
ANR	914089	Condition	"r_flag_get ( core -> flags , prefix )"	245:5:8083:8114	914046	0	True				
ANR	914090	CallExpression	"r_flag_get ( core -> flags , prefix )"		914046	0					
ANR	914091	Callee	r_flag_get		914046	0					
ANR	914092	Identifier	r_flag_get		914046	0					
ANR	914093	ArgumentList	core -> flags		914046	1					
ANR	914094	Argument	core -> flags		914046	0					
ANR	914095	PtrMemberAccess	core -> flags		914046	0					
ANR	914096	Identifier	core		914046	0					
ANR	914097	Identifier	flags		914046	1					
ANR	914098	Argument	prefix		914046	1					
ANR	914099	Identifier	prefix		914046	0					
ANR	914100	CompoundStatement		9:39:212:212	914046	1					
ANR	914101	ReturnStatement	return ;	246:2:8121:8127	914046	0	True				
ANR	914102	IdentifierDeclStatement	"RList * children = __childrenFlagsOf ( core , flags , prefix ) ;"	248:1:8133:8190	914046	5	True				
ANR	914103	IdentifierDecl	"* children = __childrenFlagsOf ( core , flags , prefix )"		914046	0					
ANR	914104	IdentifierDeclType	RList *		914046	0					
ANR	914105	Identifier	children		914046	1					
ANR	914106	AssignmentExpression	"* children = __childrenFlagsOf ( core , flags , prefix )"		914046	2		=			
ANR	914107	Identifier	children		914046	0					
ANR	914108	CallExpression	"__childrenFlagsOf ( core , flags , prefix )"		914046	1					
ANR	914109	Callee	__childrenFlagsOf		914046	0					
ANR	914110	Identifier	__childrenFlagsOf		914046	0					
ANR	914111	ArgumentList	core		914046	1					
ANR	914112	Argument	core		914046	0					
ANR	914113	Identifier	core		914046	0					
ANR	914114	Argument	flags		914046	1					
ANR	914115	Identifier	flags		914046	0					
ANR	914116	Argument	prefix		914046	2					
ANR	914117	Identifier	prefix		914046	0					
ANR	914118	Statement	r_list_foreach	249:1:8193:8206	914046	6	True				
ANR	914119	Statement	(	249:16:8208:8208	914046	7	True				
ANR	914120	Statement	children	249:17:8209:8216	914046	8	True				
ANR	914121	Statement	","	249:25:8217:8217	914046	9	True				
ANR	914122	Statement	iter	249:27:8219:8222	914046	10	True				
ANR	914123	Statement	","	249:31:8223:8223	914046	11	True				
ANR	914124	Statement	fn	249:33:8225:8226	914046	12	True				
ANR	914125	Statement	)	249:35:8227:8227	914046	13	True				
ANR	914126	CompoundStatement		13:37:324:324	914046	14					
ANR	914127	IfStatement	"if ( ! strcmp ( fn , prefix ) )"		914046	0					
ANR	914128	Condition	"! strcmp ( fn , prefix )"	250:6:8237:8256	914046	0	True				
ANR	914129	UnaryOperationExpression	"! strcmp ( fn , prefix )"		914046	0					
ANR	914130	UnaryOperator	!		914046	0					
ANR	914131	CallExpression	"strcmp ( fn , prefix )"		914046	1					
ANR	914132	Callee	strcmp		914046	0					
ANR	914133	Identifier	strcmp		914046	0					
ANR	914134	ArgumentList	fn		914046	1					
ANR	914135	Argument	fn		914046	0					
ANR	914136	Identifier	fn		914046	0					
ANR	914137	Argument	prefix		914046	1					
ANR	914138	Identifier	prefix		914046	0					
ANR	914139	CompoundStatement		14:28:354:354	914046	1					
ANR	914140	ContinueStatement	continue ;	251:3:8264:8272	914046	0	True				
ANR	914141	IfStatement	if ( mode == '*' )		914046	1					
ANR	914142	Condition	mode == '*'	253:6:8284:8294	914046	0	True				
ANR	914143	EqualityExpression	mode == '*'		914046	0		==			
ANR	914144	Identifier	mode		914046	0					
ANR	914145	PrimaryExpression	'*'		914046	1					
ANR	914146	CompoundStatement		17:19:392:392	914046	1					
ANR	914147	ExpressionStatement	"r_cons_printf ( ""agn %s %s\\n"" , fn , fn + prefix_len )"	254:3:8302:8352	914046	0	True				
ANR	914148	CallExpression	"r_cons_printf ( ""agn %s %s\\n"" , fn , fn + prefix_len )"		914046	0					
ANR	914149	Callee	r_cons_printf		914046	0					
ANR	914150	Identifier	r_cons_printf		914046	0					
ANR	914151	ArgumentList	"""agn %s %s\\n"""		914046	1					
ANR	914152	Argument	"""agn %s %s\\n"""		914046	0					
ANR	914153	PrimaryExpression	"""agn %s %s\\n"""		914046	0					
ANR	914154	Argument	fn		914046	1					
ANR	914155	Identifier	fn		914046	0					
ANR	914156	Argument	fn + prefix_len		914046	2					
ANR	914157	AdditiveExpression	fn + prefix_len		914046	0		+			
ANR	914158	Identifier	fn		914046	0					
ANR	914159	Identifier	prefix_len		914046	1					
ANR	914160	ExpressionStatement	"r_cons_printf ( ""age %s %s\\n"" , * prefix ? prefix : ""root"" , fn )"	255:3:8357:8415	914046	1	True				
ANR	914161	CallExpression	"r_cons_printf ( ""age %s %s\\n"" , * prefix ? prefix : ""root"" , fn )"		914046	0					
ANR	914162	Callee	r_cons_printf		914046	0					
ANR	914163	Identifier	r_cons_printf		914046	0					
ANR	914164	ArgumentList	"""age %s %s\\n"""		914046	1					
ANR	914165	Argument	"""age %s %s\\n"""		914046	0					
ANR	914166	PrimaryExpression	"""age %s %s\\n"""		914046	0					
ANR	914167	Argument	"* prefix ? prefix : ""root"""		914046	1					
ANR	914168	ConditionalExpression	"* prefix ? prefix : ""root"""		914046	0					
ANR	914169	Condition	* prefix		914046	0					
ANR	914170	UnaryOperationExpression	* prefix		914046	0					
ANR	914171	UnaryOperator	*		914046	0					
ANR	914172	Identifier	prefix		914046	1					
ANR	914173	Identifier	prefix		914046	1					
ANR	914174	PrimaryExpression	"""root"""		914046	2					
ANR	914175	Argument	fn		914046	2					
ANR	914176	Identifier	fn		914046	0					
ANR	914177	ElseStatement	else		914046	0					
ANR	914178	CompoundStatement		20:9:521:521	914046	0					
ANR	914179	ExpressionStatement	"r_cons_printf ( ""%s %s\\n"" , r_str_pad ( ' ' , prefix_len ) , fn + prefix_len )"	257:3:8431:8502	914046	0	True				
ANR	914180	CallExpression	"r_cons_printf ( ""%s %s\\n"" , r_str_pad ( ' ' , prefix_len ) , fn + prefix_len )"		914046	0					
ANR	914181	Callee	r_cons_printf		914046	0					
ANR	914182	Identifier	r_cons_printf		914046	0					
ANR	914183	ArgumentList	"""%s %s\\n"""		914046	1					
ANR	914184	Argument	"""%s %s\\n"""		914046	0					
ANR	914185	PrimaryExpression	"""%s %s\\n"""		914046	0					
ANR	914186	Argument	"r_str_pad ( ' ' , prefix_len )"		914046	1					
ANR	914187	CallExpression	"r_str_pad ( ' ' , prefix_len )"		914046	0					
ANR	914188	Callee	r_str_pad		914046	0					
ANR	914189	Identifier	r_str_pad		914046	0					
ANR	914190	ArgumentList	' '		914046	1					
ANR	914191	Argument	' '		914046	0					
ANR	914192	PrimaryExpression	' '		914046	0					
ANR	914193	Argument	prefix_len		914046	1					
ANR	914194	Identifier	prefix_len		914046	0					
ANR	914195	Argument	fn + prefix_len		914046	2					
ANR	914196	AdditiveExpression	fn + prefix_len		914046	0		+			
ANR	914197	Identifier	fn		914046	0					
ANR	914198	Identifier	prefix_len		914046	1					
ANR	914199	ExpressionStatement	"__printRecursive ( core , flags , fn , mode , depth + 1 )"	260:2:8546:8595	914046	2	True				
ANR	914200	CallExpression	"__printRecursive ( core , flags , fn , mode , depth + 1 )"		914046	0					
ANR	914201	Callee	__printRecursive		914046	0					
ANR	914202	Identifier	__printRecursive		914046	0					
ANR	914203	ArgumentList	core		914046	1					
ANR	914204	Argument	core		914046	0					
ANR	914205	Identifier	core		914046	0					
ANR	914206	Argument	flags		914046	1					
ANR	914207	Identifier	flags		914046	0					
ANR	914208	Argument	fn		914046	2					
ANR	914209	Identifier	fn		914046	0					
ANR	914210	Argument	mode		914046	3					
ANR	914211	Identifier	mode		914046	0					
ANR	914212	Argument	depth + 1		914046	4					
ANR	914213	AdditiveExpression	depth + 1		914046	0		+			
ANR	914214	Identifier	depth		914046	0					
ANR	914215	PrimaryExpression	1		914046	1					
ANR	914216	ExpressionStatement	r_list_free ( children )	262:1:8601:8623	914046	15	True				
ANR	914217	CallExpression	r_list_free ( children )		914046	0					
ANR	914218	Callee	r_list_free		914046	0					
ANR	914219	Identifier	r_list_free		914046	0					
ANR	914220	ArgumentList	children		914046	1					
ANR	914221	Argument	children		914046	0					
ANR	914222	Identifier	children		914046	0					
ANR	914223	ReturnType	static void		914046	1					
ANR	914224	Identifier	__printRecursive		914046	2					
ANR	914225	ParameterList	"RCore * core , RList * flags , const char * prefix , int mode , int depth"		914046	3					
ANR	914226	Parameter	RCore * core	237:30:7836:7846	914046	0	True				
ANR	914227	ParameterType	RCore *		914046	0					
ANR	914228	Identifier	core		914046	1					
ANR	914229	Parameter	RList * flags	237:43:7849:7860	914046	1	True				
ANR	914230	ParameterType	RList *		914046	0					
ANR	914231	Identifier	flags		914046	1					
ANR	914232	Parameter	const char * prefix	237:57:7863:7880	914046	2	True				
ANR	914233	ParameterType	const char *		914046	0					
ANR	914234	Identifier	prefix		914046	1					
ANR	914235	Parameter	int mode	237:77:7883:7890	914046	3	True				
ANR	914236	ParameterType	int		914046	0					
ANR	914237	Identifier	mode		914046	1					
ANR	914238	Parameter	int depth	237:87:7893:7901	914046	4	True				
ANR	914239	ParameterType	int		914046	0					
ANR	914240	Identifier	depth		914046	1					
ANR	914241	CFGEntryNode	ENTRY		914046		True				
ANR	914242	CFGExitNode	EXIT		914046		True				
ANR	914243	CFGErrorNode	ERROR		914046		True				
ANR	914244	Symbol	r_flag_get		914046						
ANR	914245	Symbol	strcmp		914046						
ANR	914246	Symbol	r_str_pad		914046						
ANR	914247	Symbol	* prefix		914046						
ANR	914248	Symbol	prefix		914046						
ANR	914249	Symbol	flags		914046						
ANR	914250	Symbol	fn		914046						
ANR	914251	Symbol	* core		914046						
ANR	914252	Symbol	iter		914046						
ANR	914253	Symbol	prefix_len		914046						
ANR	914254	Symbol	core -> flags		914046						
ANR	914255	Symbol	mode		914046						
ANR	914256	Symbol	core		914046						
ANR	914257	Symbol	strlen		914046						
ANR	914258	Symbol	depth		914046						
ANR	914259	Symbol	children		914046						
ANR	914260	Symbol	__childrenFlagsOf		914046						
ANR	914261	Function	__flag_graph	265:0:8628:8891							
ANR	914262	FunctionDef	"__flag_graph (RCore * core , const char * input , int mode)"		914261	0					
ANR	914263	CompoundStatement		265:68:8696:8891	914261	0					
ANR	914264	IdentifierDeclStatement	RList * flags = r_list_newf ( NULL ) ;	266:1:8699:8732	914261	0	True				
ANR	914265	IdentifierDecl	* flags = r_list_newf ( NULL )		914261	0					
ANR	914266	IdentifierDeclType	RList *		914261	0					
ANR	914267	Identifier	flags		914261	1					
ANR	914268	AssignmentExpression	* flags = r_list_newf ( NULL )		914261	2		=			
ANR	914269	Identifier	flags		914261	0					
ANR	914270	CallExpression	r_list_newf ( NULL )		914261	1					
ANR	914271	Callee	r_list_newf		914261	0					
ANR	914272	Identifier	r_list_newf		914261	0					
ANR	914273	ArgumentList	NULL		914261	1					
ANR	914274	Argument	NULL		914261	0					
ANR	914275	Identifier	NULL		914261	0					
ANR	914276	ExpressionStatement	"r_flag_foreach_space ( core -> flags , r_flag_space_cur ( core -> flags ) , listFlag , flags )"	267:1:8735:8818	914261	1	True				
ANR	914277	CallExpression	"r_flag_foreach_space ( core -> flags , r_flag_space_cur ( core -> flags ) , listFlag , flags )"		914261	0					
ANR	914278	Callee	r_flag_foreach_space		914261	0					
ANR	914279	Identifier	r_flag_foreach_space		914261	0					
ANR	914280	ArgumentList	core -> flags		914261	1					
ANR	914281	Argument	core -> flags		914261	0					
ANR	914282	PtrMemberAccess	core -> flags		914261	0					
ANR	914283	Identifier	core		914261	0					
ANR	914284	Identifier	flags		914261	1					
ANR	914285	Argument	r_flag_space_cur ( core -> flags )		914261	1					
ANR	914286	CallExpression	r_flag_space_cur ( core -> flags )		914261	0					
ANR	914287	Callee	r_flag_space_cur		914261	0					
ANR	914288	Identifier	r_flag_space_cur		914261	0					
ANR	914289	ArgumentList	core -> flags		914261	1					
ANR	914290	Argument	core -> flags		914261	0					
ANR	914291	PtrMemberAccess	core -> flags		914261	0					
ANR	914292	Identifier	core		914261	0					
ANR	914293	Identifier	flags		914261	1					
ANR	914294	Argument	listFlag		914261	2					
ANR	914295	Identifier	listFlag		914261	0					
ANR	914296	Argument	flags		914261	3					
ANR	914297	Identifier	flags		914261	0					
ANR	914298	ExpressionStatement	"__printRecursive ( core , flags , input , mode , 0 )"	268:1:8821:8867	914261	2	True				
ANR	914299	CallExpression	"__printRecursive ( core , flags , input , mode , 0 )"		914261	0					
ANR	914300	Callee	__printRecursive		914261	0					
ANR	914301	Identifier	__printRecursive		914261	0					
ANR	914302	ArgumentList	core		914261	1					
ANR	914303	Argument	core		914261	0					
ANR	914304	Identifier	core		914261	0					
ANR	914305	Argument	flags		914261	1					
ANR	914306	Identifier	flags		914261	0					
ANR	914307	Argument	input		914261	2					
ANR	914308	Identifier	input		914261	0					
ANR	914309	Argument	mode		914261	3					
ANR	914310	Identifier	mode		914261	0					
ANR	914311	Argument	0		914261	4					
ANR	914312	PrimaryExpression	0		914261	0					
ANR	914313	ExpressionStatement	r_list_free ( flags )	269:1:8870:8889	914261	3	True				
ANR	914314	CallExpression	r_list_free ( flags )		914261	0					
ANR	914315	Callee	r_list_free		914261	0					
ANR	914316	Identifier	r_list_free		914261	0					
ANR	914317	ArgumentList	flags		914261	1					
ANR	914318	Argument	flags		914261	0					
ANR	914319	Identifier	flags		914261	0					
ANR	914320	ReturnType	static void		914261	1					
ANR	914321	Identifier	__flag_graph		914261	2					
ANR	914322	ParameterList	"RCore * core , const char * input , int mode"		914261	3					
ANR	914323	Parameter	RCore * core	265:26:8654:8664	914261	0	True				
ANR	914324	ParameterType	RCore *		914261	0					
ANR	914325	Identifier	core		914261	1					
ANR	914326	Parameter	const char * input	265:39:8667:8683	914261	1	True				
ANR	914327	ParameterType	const char *		914261	0					
ANR	914328	Identifier	input		914261	1					
ANR	914329	Parameter	int mode	265:58:8686:8693	914261	2	True				
ANR	914330	ParameterType	int		914261	0					
ANR	914331	Identifier	mode		914261	1					
ANR	914332	CFGEntryNode	ENTRY		914261		True				
ANR	914333	CFGExitNode	EXIT		914261		True				
ANR	914334	Symbol	mode		914261						
ANR	914335	Symbol	core		914261						
ANR	914336	Symbol	input		914261						
ANR	914337	Symbol	NULL		914261						
ANR	914338	Symbol	listFlag		914261						
ANR	914339	Symbol	r_list_newf		914261						
ANR	914340	Symbol	r_flag_space_cur		914261						
ANR	914341	Symbol	flags		914261						
ANR	914342	Symbol	* core		914261						
ANR	914343	Symbol	core -> flags		914261						
ANR	914344	Function	spaces_list	272:0:8894:9776							
ANR	914345	FunctionDef	"spaces_list (RSpaces * sp , int mode)"		914344	0					
ANR	914346	CompoundStatement		272:47:8941:9776	914344	0					
ANR	914347	IdentifierDeclStatement	RSpaceIter it ;	273:1:8944:8957	914344	0	True				
ANR	914348	IdentifierDecl	it		914344	0					
ANR	914349	IdentifierDeclType	RSpaceIter		914344	0					
ANR	914350	Identifier	it		914344	1					
ANR	914351	IdentifierDeclStatement	RSpace * s ;	274:1:8960:8969	914344	1	True				
ANR	914352	IdentifierDecl	* s		914344	0					
ANR	914353	IdentifierDeclType	RSpace *		914344	0					
ANR	914354	Identifier	s		914344	1					
ANR	914355	IdentifierDeclStatement	const RSpace * cur = r_spaces_current ( sp ) ;	275:1:8972:9013	914344	2	True				
ANR	914356	IdentifierDecl	* cur = r_spaces_current ( sp )		914344	0					
ANR	914357	IdentifierDeclType	const RSpace *		914344	0					
ANR	914358	Identifier	cur		914344	1					
ANR	914359	AssignmentExpression	* cur = r_spaces_current ( sp )		914344	2		=			
ANR	914360	Identifier	cur		914344	0					
ANR	914361	CallExpression	r_spaces_current ( sp )		914344	1					
ANR	914362	Callee	r_spaces_current		914344	0					
ANR	914363	Identifier	r_spaces_current		914344	0					
ANR	914364	ArgumentList	sp		914344	1					
ANR	914365	Argument	sp		914344	0					
ANR	914366	Identifier	sp		914344	0					
ANR	914367	IdentifierDeclStatement	PJ * pj = NULL ;	276:1:9016:9029	914344	3	True				
ANR	914368	IdentifierDecl	* pj = NULL		914344	0					
ANR	914369	IdentifierDeclType	PJ *		914344	0					
ANR	914370	Identifier	pj		914344	1					
ANR	914371	AssignmentExpression	* pj = NULL		914344	2		=			
ANR	914372	Identifier	NULL		914344	0					
ANR	914373	Identifier	NULL		914344	1					
ANR	914374	IfStatement	if ( mode == 'j' )		914344	4					
ANR	914375	Condition	mode == 'j'	277:5:9036:9046	914344	0	True				
ANR	914376	EqualityExpression	mode == 'j'		914344	0		==			
ANR	914377	Identifier	mode		914344	0					
ANR	914378	PrimaryExpression	'j'		914344	1					
ANR	914379	CompoundStatement		6:18:107:107	914344	1					
ANR	914380	ExpressionStatement	pj = pj_new ( )	278:2:9053:9067	914344	0	True				
ANR	914381	AssignmentExpression	pj = pj_new ( )		914344	0		=			
ANR	914382	Identifier	pj		914344	0					
ANR	914383	CallExpression	pj_new ( )		914344	1					
ANR	914384	Callee	pj_new		914344	0					
ANR	914385	Identifier	pj_new		914344	0					
ANR	914386	ArgumentList			914344	1					
ANR	914387	ExpressionStatement	pj_a ( pj )	279:2:9071:9080	914344	1	True				
ANR	914388	CallExpression	pj_a ( pj )		914344	0					
ANR	914389	Callee	pj_a		914344	0					
ANR	914390	Identifier	pj_a		914344	0					
ANR	914391	ArgumentList	pj		914344	1					
ANR	914392	Argument	pj		914344	0					
ANR	914393	Identifier	pj		914344	0					
ANR	914394	Statement	r_spaces_foreach	281:1:9086:9101	914344	5	True				
ANR	914395	Statement	(	281:18:9103:9103	914344	6	True				
ANR	914396	Statement	sp	281:19:9104:9105	914344	7	True				
ANR	914397	Statement	","	281:21:9106:9106	914344	8	True				
ANR	914398	Statement	it	281:23:9108:9109	914344	9	True				
ANR	914399	Statement	","	281:25:9110:9110	914344	10	True				
ANR	914400	Statement	s	281:27:9112:9112	914344	11	True				
ANR	914401	Statement	)	281:28:9113:9113	914344	12	True				
ANR	914402	CompoundStatement		11:2:177:217	914344	13					
ANR	914403	IdentifierDeclStatement	"int count = r_spaces_count ( sp , s -> name ) ;"	282:2:9119:9159	914344	0	True				
ANR	914404	IdentifierDecl	"count = r_spaces_count ( sp , s -> name )"		914344	0					
ANR	914405	IdentifierDeclType	int		914344	0					
ANR	914406	Identifier	count		914344	1					
ANR	914407	AssignmentExpression	"count = r_spaces_count ( sp , s -> name )"		914344	2		=			
ANR	914408	Identifier	count		914344	0					
ANR	914409	CallExpression	"r_spaces_count ( sp , s -> name )"		914344	1					
ANR	914410	Callee	r_spaces_count		914344	0					
ANR	914411	Identifier	r_spaces_count		914344	0					
ANR	914412	ArgumentList	sp		914344	1					
ANR	914413	Argument	sp		914344	0					
ANR	914414	Identifier	sp		914344	0					
ANR	914415	Argument	s -> name		914344	1					
ANR	914416	PtrMemberAccess	s -> name		914344	0					
ANR	914417	Identifier	s		914344	0					
ANR	914418	Identifier	name		914344	1					
ANR	914419	IfStatement	if ( mode == 'j' )		914344	1					
ANR	914420	Condition	mode == 'j'	283:6:9167:9177	914344	0	True				
ANR	914421	EqualityExpression	mode == 'j'		914344	0		==			
ANR	914422	Identifier	mode		914344	0					
ANR	914423	PrimaryExpression	'j'		914344	1					
ANR	914424	CompoundStatement		12:19:238:238	914344	1					
ANR	914425	ExpressionStatement	pj_o ( pj )	284:3:9185:9194	914344	0	True				
ANR	914426	CallExpression	pj_o ( pj )		914344	0					
ANR	914427	Callee	pj_o		914344	0					
ANR	914428	Identifier	pj_o		914344	0					
ANR	914429	ArgumentList	pj		914344	1					
ANR	914430	Argument	pj		914344	0					
ANR	914431	Identifier	pj		914344	0					
ANR	914432	ExpressionStatement	"pj_ks ( pj , ""name"" , s -> name )"	285:3:9199:9226	914344	1	True				
ANR	914433	CallExpression	"pj_ks ( pj , ""name"" , s -> name )"		914344	0					
ANR	914434	Callee	pj_ks		914344	0					
ANR	914435	Identifier	pj_ks		914344	0					
ANR	914436	ArgumentList	pj		914344	1					
ANR	914437	Argument	pj		914344	0					
ANR	914438	Identifier	pj		914344	0					
ANR	914439	Argument	"""name"""		914344	1					
ANR	914440	PrimaryExpression	"""name"""		914344	0					
ANR	914441	Argument	s -> name		914344	2					
ANR	914442	PtrMemberAccess	s -> name		914344	0					
ANR	914443	Identifier	s		914344	0					
ANR	914444	Identifier	name		914344	1					
ANR	914445	ExpressionStatement	"pj_ki ( pj , ""count"" , count )"	286:3:9231:9257	914344	2	True				
ANR	914446	CallExpression	"pj_ki ( pj , ""count"" , count )"		914344	0					
ANR	914447	Callee	pj_ki		914344	0					
ANR	914448	Identifier	pj_ki		914344	0					
ANR	914449	ArgumentList	pj		914344	1					
ANR	914450	Argument	pj		914344	0					
ANR	914451	Identifier	pj		914344	0					
ANR	914452	Argument	"""count"""		914344	1					
ANR	914453	PrimaryExpression	"""count"""		914344	0					
ANR	914454	Argument	count		914344	2					
ANR	914455	Identifier	count		914344	0					
ANR	914456	ExpressionStatement	"pj_kb ( pj , ""selected"" , cur == s )"	287:3:9262:9294	914344	3	True				
ANR	914457	CallExpression	"pj_kb ( pj , ""selected"" , cur == s )"		914344	0					
ANR	914458	Callee	pj_kb		914344	0					
ANR	914459	Identifier	pj_kb		914344	0					
ANR	914460	ArgumentList	pj		914344	1					
ANR	914461	Argument	pj		914344	0					
ANR	914462	Identifier	pj		914344	0					
ANR	914463	Argument	"""selected"""		914344	1					
ANR	914464	PrimaryExpression	"""selected"""		914344	0					
ANR	914465	Argument	cur == s		914344	2					
ANR	914466	EqualityExpression	cur == s		914344	0		==			
ANR	914467	Identifier	cur		914344	0					
ANR	914468	Identifier	s		914344	1					
ANR	914469	ExpressionStatement	pj_end ( pj )	288:3:9299:9310	914344	4	True				
ANR	914470	CallExpression	pj_end ( pj )		914344	0					
ANR	914471	Callee	pj_end		914344	0					
ANR	914472	Identifier	pj_end		914344	0					
ANR	914473	ArgumentList	pj		914344	1					
ANR	914474	Argument	pj		914344	0					
ANR	914475	Identifier	pj		914344	0					
ANR	914476	ElseStatement	else		914344	0					
ANR	914477	IfStatement	if ( mode == 'q' )		914344	0					
ANR	914478	Condition	mode == 'q'	289:13:9325:9335	914344	0	True				
ANR	914479	EqualityExpression	mode == 'q'		914344	0		==			
ANR	914480	Identifier	mode		914344	0					
ANR	914481	PrimaryExpression	'q'		914344	1					
ANR	914482	CompoundStatement		18:26:396:396	914344	1					
ANR	914483	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , s -> name )"	290:3:9343:9374	914344	0	True				
ANR	914484	CallExpression	"r_cons_printf ( ""%s\\n"" , s -> name )"		914344	0					
ANR	914485	Callee	r_cons_printf		914344	0					
ANR	914486	Identifier	r_cons_printf		914344	0					
ANR	914487	ArgumentList	"""%s\\n"""		914344	1					
ANR	914488	Argument	"""%s\\n"""		914344	0					
ANR	914489	PrimaryExpression	"""%s\\n"""		914344	0					
ANR	914490	Argument	s -> name		914344	1					
ANR	914491	PtrMemberAccess	s -> name		914344	0					
ANR	914492	Identifier	s		914344	0					
ANR	914493	Identifier	name		914344	1					
ANR	914494	ElseStatement	else		914344	0					
ANR	914495	IfStatement	if ( mode == '*' )		914344	0					
ANR	914496	Condition	mode == '*'	291:13:9389:9399	914344	0	True				
ANR	914497	EqualityExpression	mode == '*'		914344	0		==			
ANR	914498	Identifier	mode		914344	0					
ANR	914499	PrimaryExpression	'*'		914344	1					
ANR	914500	CompoundStatement		20:26:460:460	914344	1					
ANR	914501	ExpressionStatement	"r_cons_printf ( ""%s %s\\n"" , sp -> name , s -> name )"	292:3:9407:9451	914344	0	True				
ANR	914502	CallExpression	"r_cons_printf ( ""%s %s\\n"" , sp -> name , s -> name )"		914344	0					
ANR	914503	Callee	r_cons_printf		914344	0					
ANR	914504	Identifier	r_cons_printf		914344	0					
ANR	914505	ArgumentList	"""%s %s\\n"""		914344	1					
ANR	914506	Argument	"""%s %s\\n"""		914344	0					
ANR	914507	PrimaryExpression	"""%s %s\\n"""		914344	0					
ANR	914508	Argument	sp -> name		914344	1					
ANR	914509	PtrMemberAccess	sp -> name		914344	0					
ANR	914510	Identifier	sp		914344	0					
ANR	914511	Identifier	name		914344	1					
ANR	914512	Argument	s -> name		914344	2					
ANR	914513	PtrMemberAccess	s -> name		914344	0					
ANR	914514	Identifier	s		914344	0					
ANR	914515	Identifier	name		914344	1					
ANR	914516	ElseStatement	else		914344	0					
ANR	914517	CompoundStatement		22:9:520:520	914344	0					
ANR	914518	ExpressionStatement	"r_cons_printf ( ""%5d %c %s\\n"" , count , ( ! cur || cur == s ) ? '*' : '.' , s -> name )"	294:3:9467:9546	914344	0	True				
ANR	914519	CallExpression	"r_cons_printf ( ""%5d %c %s\\n"" , count , ( ! cur || cur == s ) ? '*' : '.' , s -> name )"		914344	0					
ANR	914520	Callee	r_cons_printf		914344	0					
ANR	914521	Identifier	r_cons_printf		914344	0					
ANR	914522	ArgumentList	"""%5d %c %s\\n"""		914344	1					
ANR	914523	Argument	"""%5d %c %s\\n"""		914344	0					
ANR	914524	PrimaryExpression	"""%5d %c %s\\n"""		914344	0					
ANR	914525	Argument	count		914344	1					
ANR	914526	Identifier	count		914344	0					
ANR	914527	Argument	( ! cur || cur == s ) ? '*' : '.'		914344	2					
ANR	914528	ConditionalExpression	( ! cur || cur == s ) ? '*' : '.'		914344	0					
ANR	914529	Condition	! cur || cur == s		914344	0					
ANR	914530	OrExpression	! cur || cur == s		914344	0		||			
ANR	914531	UnaryOperationExpression	! cur		914344	0					
ANR	914532	UnaryOperator	!		914344	0					
ANR	914533	Identifier	cur		914344	1					
ANR	914534	EqualityExpression	cur == s		914344	1		==			
ANR	914535	Identifier	cur		914344	0					
ANR	914536	Identifier	s		914344	1					
ANR	914537	PrimaryExpression	'*'		914344	1					
ANR	914538	PrimaryExpression	'.'		914344	2					
ANR	914539	Argument	s -> name		914344	3					
ANR	914540	PtrMemberAccess	s -> name		914344	0					
ANR	914541	Identifier	s		914344	0					
ANR	914542	Identifier	name		914344	1					
ANR	914543	IfStatement	if ( mode == '*' && r_spaces_current ( sp ) )		914344	14					
ANR	914544	Condition	mode == '*' && r_spaces_current ( sp )	298:5:9560:9595	914344	0	True				
ANR	914545	AndExpression	mode == '*' && r_spaces_current ( sp )		914344	0		&&			
ANR	914546	EqualityExpression	mode == '*'		914344	0		==			
ANR	914547	Identifier	mode		914344	0					
ANR	914548	PrimaryExpression	'*'		914344	1					
ANR	914549	CallExpression	r_spaces_current ( sp )		914344	1					
ANR	914550	Callee	r_spaces_current		914344	0					
ANR	914551	Identifier	r_spaces_current		914344	0					
ANR	914552	ArgumentList	sp		914344	1					
ANR	914553	Argument	sp		914344	0					
ANR	914554	Identifier	sp		914344	0					
ANR	914555	CompoundStatement		27:43:656:656	914344	1					
ANR	914556	ExpressionStatement	"r_cons_printf ( ""%s %s # current\\n"" , sp -> name , r_spaces_current_name ( sp ) )"	299:2:9602:9675	914344	0	True				
ANR	914557	CallExpression	"r_cons_printf ( ""%s %s # current\\n"" , sp -> name , r_spaces_current_name ( sp ) )"		914344	0					
ANR	914558	Callee	r_cons_printf		914344	0					
ANR	914559	Identifier	r_cons_printf		914344	0					
ANR	914560	ArgumentList	"""%s %s # current\\n"""		914344	1					
ANR	914561	Argument	"""%s %s # current\\n"""		914344	0					
ANR	914562	PrimaryExpression	"""%s %s # current\\n"""		914344	0					
ANR	914563	Argument	sp -> name		914344	1					
ANR	914564	PtrMemberAccess	sp -> name		914344	0					
ANR	914565	Identifier	sp		914344	0					
ANR	914566	Identifier	name		914344	1					
ANR	914567	Argument	r_spaces_current_name ( sp )		914344	2					
ANR	914568	CallExpression	r_spaces_current_name ( sp )		914344	0					
ANR	914569	Callee	r_spaces_current_name		914344	0					
ANR	914570	Identifier	r_spaces_current_name		914344	0					
ANR	914571	ArgumentList	sp		914344	1					
ANR	914572	Argument	sp		914344	0					
ANR	914573	Identifier	sp		914344	0					
ANR	914574	IfStatement	if ( mode == 'j' )		914344	15					
ANR	914575	Condition	mode == 'j'	301:5:9685:9695	914344	0	True				
ANR	914576	EqualityExpression	mode == 'j'		914344	0		==			
ANR	914577	Identifier	mode		914344	0					
ANR	914578	PrimaryExpression	'j'		914344	1					
ANR	914579	CompoundStatement		30:18:756:756	914344	1					
ANR	914580	ExpressionStatement	pj_end ( pj )	302:2:9702:9713	914344	0	True				
ANR	914581	CallExpression	pj_end ( pj )		914344	0					
ANR	914582	Callee	pj_end		914344	0					
ANR	914583	Identifier	pj_end		914344	0					
ANR	914584	ArgumentList	pj		914344	1					
ANR	914585	Argument	pj		914344	0					
ANR	914586	Identifier	pj		914344	0					
ANR	914587	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"	303:2:9717:9755	914344	1	True				
ANR	914588	CallExpression	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"		914344	0					
ANR	914589	Callee	r_cons_printf		914344	0					
ANR	914590	Identifier	r_cons_printf		914344	0					
ANR	914591	ArgumentList	"""%s\\n"""		914344	1					
ANR	914592	Argument	"""%s\\n"""		914344	0					
ANR	914593	PrimaryExpression	"""%s\\n"""		914344	0					
ANR	914594	Argument	pj_string ( pj )		914344	1					
ANR	914595	CallExpression	pj_string ( pj )		914344	0					
ANR	914596	Callee	pj_string		914344	0					
ANR	914597	Identifier	pj_string		914344	0					
ANR	914598	ArgumentList	pj		914344	1					
ANR	914599	Argument	pj		914344	0					
ANR	914600	Identifier	pj		914344	0					
ANR	914601	ExpressionStatement	pj_free ( pj )	304:2:9759:9771	914344	2	True				
ANR	914602	CallExpression	pj_free ( pj )		914344	0					
ANR	914603	Callee	pj_free		914344	0					
ANR	914604	Identifier	pj_free		914344	0					
ANR	914605	ArgumentList	pj		914344	1					
ANR	914606	Argument	pj		914344	0					
ANR	914607	Identifier	pj		914344	0					
ANR	914608	ReturnType	static void		914344	1					
ANR	914609	Identifier	spaces_list		914344	2					
ANR	914610	ParameterList	"RSpaces * sp , int mode"		914344	3					
ANR	914611	Parameter	RSpaces * sp	272:24:8918:8928	914344	0	True				
ANR	914612	ParameterType	RSpaces *		914344	0					
ANR	914613	Identifier	sp		914344	1					
ANR	914614	Parameter	int mode	272:37:8931:8938	914344	1	True				
ANR	914615	ParameterType	int		914344	0					
ANR	914616	Identifier	mode		914344	1					
ANR	914617	CFGEntryNode	ENTRY		914344		True				
ANR	914618	CFGExitNode	EXIT		914344		True				
ANR	914619	Symbol	* sp		914344						
ANR	914620	Symbol	cur		914344						
ANR	914621	Symbol	NULL		914344						
ANR	914622	Symbol	pj_string		914344						
ANR	914623	Symbol	count		914344						
ANR	914624	Symbol	it		914344						
ANR	914625	Symbol	mode		914344						
ANR	914626	Symbol	s		914344						
ANR	914627	Symbol	s -> name		914344						
ANR	914628	Symbol	sp -> name		914344						
ANR	914629	Symbol	pj		914344						
ANR	914630	Symbol	pj_new		914344						
ANR	914631	Symbol	r_spaces_count		914344						
ANR	914632	Symbol	sp		914344						
ANR	914633	Symbol	r_spaces_current		914344						
ANR	914634	Symbol	* s		914344						
ANR	914635	Symbol	r_spaces_current_name		914344						
ANR	914636	Function	cmd_fz	308:0:9779:11259							
ANR	914637	FunctionDef	"cmd_fz (RCore * core , const char * input)"		914636	0					
ANR	914638	CompoundStatement		308:51:9830:11259	914636	0					
ANR	914639	SwitchStatement	switch ( * input )		914636	0					
ANR	914640	Condition	* input	309:9:9841:9846	914636	0	True				
ANR	914641	UnaryOperationExpression	* input		914636	0					
ANR	914642	UnaryOperator	*		914636	0					
ANR	914643	Identifier	input		914636	1					
ANR	914644	CompoundStatement		2:17:18:18	914636	1					
ANR	914645	Label	case '?' :	310:1:9852:9860	914636	0	True				
ANR	914646	ExpressionStatement	"r_core_cmd_help ( core , help_msg_fz )"	311:2:9873:9908	914636	1	True				
ANR	914647	CallExpression	"r_core_cmd_help ( core , help_msg_fz )"		914636	0					
ANR	914648	Callee	r_core_cmd_help		914636	0					
ANR	914649	Identifier	r_core_cmd_help		914636	0					
ANR	914650	ArgumentList	core		914636	1					
ANR	914651	Argument	core		914636	0					
ANR	914652	Identifier	core		914636	0					
ANR	914653	Argument	help_msg_fz		914636	1					
ANR	914654	Identifier	help_msg_fz		914636	0					
ANR	914655	BreakStatement	break ;	312:2:9912:9917	914636	2	True				
ANR	914656	Label	case '.' :	313:1:9920:9928	914636	3	True				
ANR	914657	CompoundStatement		8:3:115:146	914636	4					
ANR	914658	IdentifierDeclStatement	"const char * a = NULL , * b = NULL ;"	315:3:9946:9977	914636	0	True				
ANR	914659	IdentifierDecl	* a = NULL		914636	0					
ANR	914660	IdentifierDeclType	const char *		914636	0					
ANR	914661	Identifier	a		914636	1					
ANR	914662	AssignmentExpression	* a = NULL		914636	2		=			
ANR	914663	Identifier	NULL		914636	0					
ANR	914664	Identifier	NULL		914636	1					
ANR	914665	IdentifierDecl	* b = NULL		914636	1					
ANR	914666	IdentifierDeclType	const char *		914636	0					
ANR	914667	Identifier	b		914636	1					
ANR	914668	AssignmentExpression	* b = NULL		914636	2		=			
ANR	914669	Identifier	NULL		914636	0					
ANR	914670	Identifier	NULL		914636	1					
ANR	914671	ExpressionStatement	"r_flag_zone_around ( core -> flags , core -> offset , & a , & b )"	316:3:9982:10036	914636	1	True				
ANR	914672	CallExpression	"r_flag_zone_around ( core -> flags , core -> offset , & a , & b )"		914636	0					
ANR	914673	Callee	r_flag_zone_around		914636	0					
ANR	914674	Identifier	r_flag_zone_around		914636	0					
ANR	914675	ArgumentList	core -> flags		914636	1					
ANR	914676	Argument	core -> flags		914636	0					
ANR	914677	PtrMemberAccess	core -> flags		914636	0					
ANR	914678	Identifier	core		914636	0					
ANR	914679	Identifier	flags		914636	1					
ANR	914680	Argument	core -> offset		914636	1					
ANR	914681	PtrMemberAccess	core -> offset		914636	0					
ANR	914682	Identifier	core		914636	0					
ANR	914683	Identifier	offset		914636	1					
ANR	914684	Argument	& a		914636	2					
ANR	914685	UnaryOperationExpression	& a		914636	0					
ANR	914686	UnaryOperator	&		914636	0					
ANR	914687	Identifier	a		914636	1					
ANR	914688	Argument	& b		914636	3					
ANR	914689	UnaryOperationExpression	& b		914636	0					
ANR	914690	UnaryOperator	&		914636	0					
ANR	914691	Identifier	b		914636	1					
ANR	914692	ExpressionStatement	"r_cons_printf ( ""%s %s\\n"" , a ? a : ""~"" , b ? b : ""~"" )"	317:3:10041:10084	914636	2	True				
ANR	914693	CallExpression	"r_cons_printf ( ""%s %s\\n"" , a ? a : ""~"" , b ? b : ""~"" )"		914636	0					
ANR	914694	Callee	r_cons_printf		914636	0					
ANR	914695	Identifier	r_cons_printf		914636	0					
ANR	914696	ArgumentList	"""%s %s\\n"""		914636	1					
ANR	914697	Argument	"""%s %s\\n"""		914636	0					
ANR	914698	PrimaryExpression	"""%s %s\\n"""		914636	0					
ANR	914699	Argument	"a ? a : ""~"""		914636	1					
ANR	914700	ConditionalExpression	"a ? a : ""~"""		914636	0					
ANR	914701	Condition	a		914636	0					
ANR	914702	Identifier	a		914636	0					
ANR	914703	Identifier	a		914636	1					
ANR	914704	PrimaryExpression	"""~"""		914636	2					
ANR	914705	Argument	"b ? b : ""~"""		914636	2					
ANR	914706	ConditionalExpression	"b ? b : ""~"""		914636	0					
ANR	914707	Condition	b		914636	0					
ANR	914708	Identifier	b		914636	0					
ANR	914709	Identifier	b		914636	1					
ANR	914710	PrimaryExpression	"""~"""		914636	2					
ANR	914711	BreakStatement	break ;	319:2:10092:10097	914636	5	True				
ANR	914712	Label	case ':' :	320:1:10100:10108	914636	6	True				
ANR	914713	CompoundStatement		24:3:543:562	914636	7					
ANR	914714	IdentifierDeclStatement	"const char * a , * b ;"	322:3:10126:10143	914636	0	True				
ANR	914715	IdentifierDecl	* a		914636	0					
ANR	914716	IdentifierDeclType	const char *		914636	0					
ANR	914717	Identifier	a		914636	1					
ANR	914718	IdentifierDecl	* b		914636	1					
ANR	914719	IdentifierDeclType	const char *		914636	0					
ANR	914720	Identifier	b		914636	1					
ANR	914721	IdentifierDeclStatement	int a_len = 0 ;	323:3:10148:10161	914636	1	True				
ANR	914722	IdentifierDecl	a_len = 0		914636	0					
ANR	914723	IdentifierDeclType	int		914636	0					
ANR	914724	Identifier	a_len		914636	1					
ANR	914725	AssignmentExpression	a_len = 0		914636	2		=			
ANR	914726	Identifier	a_len		914636	0					
ANR	914727	PrimaryExpression	0		914636	1					
ANR	914728	IdentifierDeclStatement	int w = r_cons_get_size ( NULL ) ;	324:3:10166:10196	914636	2	True				
ANR	914729	IdentifierDecl	w = r_cons_get_size ( NULL )		914636	0					
ANR	914730	IdentifierDeclType	int		914636	0					
ANR	914731	Identifier	w		914636	1					
ANR	914732	AssignmentExpression	w = r_cons_get_size ( NULL )		914636	2		=			
ANR	914733	Identifier	w		914636	0					
ANR	914734	CallExpression	r_cons_get_size ( NULL )		914636	1					
ANR	914735	Callee	r_cons_get_size		914636	0					
ANR	914736	Identifier	r_cons_get_size		914636	0					
ANR	914737	ArgumentList	NULL		914636	1					
ANR	914738	Argument	NULL		914636	0					
ANR	914739	Identifier	NULL		914636	0					
ANR	914740	ExpressionStatement	"r_flag_zone_around ( core -> flags , core -> offset , & a , & b )"	325:3:10201:10255	914636	3	True				
ANR	914741	CallExpression	"r_flag_zone_around ( core -> flags , core -> offset , & a , & b )"		914636	0					
ANR	914742	Callee	r_flag_zone_around		914636	0					
ANR	914743	Identifier	r_flag_zone_around		914636	0					
ANR	914744	ArgumentList	core -> flags		914636	1					
ANR	914745	Argument	core -> flags		914636	0					
ANR	914746	PtrMemberAccess	core -> flags		914636	0					
ANR	914747	Identifier	core		914636	0					
ANR	914748	Identifier	flags		914636	1					
ANR	914749	Argument	core -> offset		914636	1					
ANR	914750	PtrMemberAccess	core -> offset		914636	0					
ANR	914751	Identifier	core		914636	0					
ANR	914752	Identifier	offset		914636	1					
ANR	914753	Argument	& a		914636	2					
ANR	914754	UnaryOperationExpression	& a		914636	0					
ANR	914755	UnaryOperator	&		914636	0					
ANR	914756	Identifier	a		914636	1					
ANR	914757	Argument	& b		914636	3					
ANR	914758	UnaryOperationExpression	& b		914636	0					
ANR	914759	UnaryOperator	&		914636	0					
ANR	914760	Identifier	b		914636	1					
ANR	914761	IfStatement	if ( a )		914636	4					
ANR	914762	Condition	a	326:7:10264:10264	914636	0	True				
ANR	914763	Identifier	a		914636	0					
ANR	914764	CompoundStatement		19:10:436:436	914636	1					
ANR	914765	ExpressionStatement	"r_cons_printf ( ""[<< %s]"" , a )"	327:4:10273:10301	914636	0	True				
ANR	914766	CallExpression	"r_cons_printf ( ""[<< %s]"" , a )"		914636	0					
ANR	914767	Callee	r_cons_printf		914636	0					
ANR	914768	Identifier	r_cons_printf		914636	0					
ANR	914769	ArgumentList	"""[<< %s]"""		914636	1					
ANR	914770	Argument	"""[<< %s]"""		914636	0					
ANR	914771	PrimaryExpression	"""[<< %s]"""		914636	0					
ANR	914772	Argument	a		914636	1					
ANR	914773	Identifier	a		914636	0					
ANR	914774	ExpressionStatement	a_len = strlen ( a ) + 4	328:4:10307:10329	914636	1	True				
ANR	914775	AssignmentExpression	a_len = strlen ( a ) + 4		914636	0		=			
ANR	914776	Identifier	a_len		914636	0					
ANR	914777	AdditiveExpression	strlen ( a ) + 4		914636	1		+			
ANR	914778	CallExpression	strlen ( a )		914636	0					
ANR	914779	Callee	strlen		914636	0					
ANR	914780	Identifier	strlen		914636	0					
ANR	914781	ArgumentList	a		914636	1					
ANR	914782	Argument	a		914636	0					
ANR	914783	Identifier	a		914636	0					
ANR	914784	PrimaryExpression	4		914636	1					
ANR	914785	IdentifierDeclStatement	int padsize = ( w / 2 ) - a_len ;	330:3:10339:10369	914636	5	True				
ANR	914786	IdentifierDecl	padsize = ( w / 2 ) - a_len		914636	0					
ANR	914787	IdentifierDeclType	int		914636	0					
ANR	914788	Identifier	padsize		914636	1					
ANR	914789	AssignmentExpression	padsize = ( w / 2 ) - a_len		914636	2		=			
ANR	914790	Identifier	padsize		914636	0					
ANR	914791	AdditiveExpression	( w / 2 ) - a_len		914636	1		-			
ANR	914792	MultiplicativeExpression	w / 2		914636	0		/			
ANR	914793	Identifier	w		914636	0					
ANR	914794	PrimaryExpression	2		914636	1					
ANR	914795	Identifier	a_len		914636	1					
ANR	914796	IdentifierDeclStatement	int title_size = 12 ;	331:3:10374:10393	914636	6	True				
ANR	914797	IdentifierDecl	title_size = 12		914636	0					
ANR	914798	IdentifierDeclType	int		914636	0					
ANR	914799	Identifier	title_size		914636	1					
ANR	914800	AssignmentExpression	title_size = 12		914636	2		=			
ANR	914801	Identifier	title_size		914636	0					
ANR	914802	PrimaryExpression	12		914636	1					
ANR	914803	IfStatement	if ( a || b )		914636	7					
ANR	914804	Condition	a || b	332:7:10402:10407	914636	0	True				
ANR	914805	OrExpression	a || b		914636	0		||			
ANR	914806	Identifier	a		914636	0					
ANR	914807	Identifier	b		914636	1					
ANR	914808	CompoundStatement		29:4:720:766	914636	1					
ANR	914809	Statement	char	333:4:10416:10419	914636	0	True				
ANR	914810	Statement	*	333:9:10421:10421	914636	1	True				
ANR	914811	Statement	title	333:10:10422:10426	914636	2	True				
ANR	914812	Statement	=	333:16:10428:10428	914636	3	True				
ANR	914813	Statement	r_str_newf	333:18:10430:10439	914636	4	True				
ANR	914814	Statement	(	333:29:10441:10441	914636	5	True				
ANR	914815	Statement	"""[ 0x%08"""	333:30:10442:10450	914636	6	True				
ANR	914816	Statement	PFMT64x	333:39:10451:10457	914636	7	True				
ANR	914817	Statement	""" ]"""	333:46:10458:10461	914636	8	True				
ANR	914818	Statement	","	333:50:10462:10462	914636	9	True				
ANR	914819	Statement	core	333:52:10464:10467	914636	10	True				
ANR	914820	Statement	->	333:56:10468:10469	914636	11	True				
ANR	914821	Statement	offset	333:58:10470:10475	914636	12	True				
ANR	914822	Statement	)	333:64:10476:10476	914636	13	True				
ANR	914823	ExpressionStatement		333:65:10477:10477	914636	14	True				
ANR	914824	ExpressionStatement	title_size = strlen ( title )	334:4:10483:10510	914636	15	True				
ANR	914825	AssignmentExpression	title_size = strlen ( title )		914636	0		=			
ANR	914826	Identifier	title_size		914636	0					
ANR	914827	CallExpression	strlen ( title )		914636	1					
ANR	914828	Callee	strlen		914636	0					
ANR	914829	Identifier	strlen		914636	0					
ANR	914830	ArgumentList	title		914636	1					
ANR	914831	Argument	title		914636	0					
ANR	914832	Identifier	title		914636	0					
ANR	914833	ExpressionStatement	padsize -= strlen ( title ) / 2	335:4:10516:10545	914636	16	True				
ANR	914834	AssignmentExpression	padsize -= strlen ( title ) / 2		914636	0		-=			
ANR	914835	Identifier	padsize		914636	0					
ANR	914836	MultiplicativeExpression	strlen ( title ) / 2		914636	1		/			
ANR	914837	CallExpression	strlen ( title )		914636	0					
ANR	914838	Callee	strlen		914636	0					
ANR	914839	Identifier	strlen		914636	0					
ANR	914840	ArgumentList	title		914636	1					
ANR	914841	Argument	title		914636	0					
ANR	914842	Identifier	title		914636	0					
ANR	914843	PrimaryExpression	2		914636	1					
ANR	914844	IdentifierDeclStatement	"const char * halfpad = r_str_pad ( ' ' , padsize ) ;"	336:4:10551:10597	914636	17	True				
ANR	914845	IdentifierDecl	"* halfpad = r_str_pad ( ' ' , padsize )"		914636	0					
ANR	914846	IdentifierDeclType	const char *		914636	0					
ANR	914847	Identifier	halfpad		914636	1					
ANR	914848	AssignmentExpression	"* halfpad = r_str_pad ( ' ' , padsize )"		914636	2		=			
ANR	914849	Identifier	halfpad		914636	0					
ANR	914850	CallExpression	"r_str_pad ( ' ' , padsize )"		914636	1					
ANR	914851	Callee	r_str_pad		914636	0					
ANR	914852	Identifier	r_str_pad		914636	0					
ANR	914853	ArgumentList	' '		914636	1					
ANR	914854	Argument	' '		914636	0					
ANR	914855	PrimaryExpression	' '		914636	0					
ANR	914856	Argument	padsize		914636	1					
ANR	914857	Identifier	padsize		914636	0					
ANR	914858	ExpressionStatement	"r_cons_printf ( ""%s%s"" , halfpad , title )"	337:4:10603:10641	914636	18	True				
ANR	914859	CallExpression	"r_cons_printf ( ""%s%s"" , halfpad , title )"		914636	0					
ANR	914860	Callee	r_cons_printf		914636	0					
ANR	914861	Identifier	r_cons_printf		914636	0					
ANR	914862	ArgumentList	"""%s%s"""		914636	1					
ANR	914863	Argument	"""%s%s"""		914636	0					
ANR	914864	PrimaryExpression	"""%s%s"""		914636	0					
ANR	914865	Argument	halfpad		914636	1					
ANR	914866	Identifier	halfpad		914636	0					
ANR	914867	Argument	title		914636	2					
ANR	914868	Identifier	title		914636	0					
ANR	914869	ExpressionStatement	free ( title )	338:4:10647:10659	914636	19	True				
ANR	914870	CallExpression	free ( title )		914636	0					
ANR	914871	Callee	free		914636	0					
ANR	914872	Identifier	free		914636	0					
ANR	914873	ArgumentList	title		914636	1					
ANR	914874	Argument	title		914636	0					
ANR	914875	Identifier	title		914636	0					
ANR	914876	IfStatement	if ( b )		914636	8					
ANR	914877	Condition	b	340:7:10673:10673	914636	0	True				
ANR	914878	Identifier	b		914636	0					
ANR	914879	CompoundStatement		35:4:904:967	914636	1					
ANR	914880	ExpressionStatement	padsize = ( w / 2 ) - title_size - strlen ( b ) - 4	341:4:10682:10729	914636	0	True				
ANR	914881	AssignmentExpression	padsize = ( w / 2 ) - title_size - strlen ( b ) - 4		914636	0		=			
ANR	914882	Identifier	padsize		914636	0					
ANR	914883	AdditiveExpression	( w / 2 ) - title_size - strlen ( b ) - 4		914636	1		-			
ANR	914884	MultiplicativeExpression	w / 2		914636	0		/			
ANR	914885	Identifier	w		914636	0					
ANR	914886	PrimaryExpression	2		914636	1					
ANR	914887	AdditiveExpression	title_size - strlen ( b ) - 4		914636	1		-			
ANR	914888	Identifier	title_size		914636	0					
ANR	914889	AdditiveExpression	strlen ( b ) - 4		914636	1		-			
ANR	914890	CallExpression	strlen ( b )		914636	0					
ANR	914891	Callee	strlen		914636	0					
ANR	914892	Identifier	strlen		914636	0					
ANR	914893	ArgumentList	b		914636	1					
ANR	914894	Argument	b		914636	0					
ANR	914895	Identifier	b		914636	0					
ANR	914896	PrimaryExpression	4		914636	1					
ANR	914897	IdentifierDeclStatement	"const char * halfpad = padsize > 1 ? r_str_pad ( ' ' , padsize ) : """" ;"	342:4:10735:10798	914636	1	True				
ANR	914898	IdentifierDecl	"* halfpad = padsize > 1 ? r_str_pad ( ' ' , padsize ) : """""		914636	0					
ANR	914899	IdentifierDeclType	const char *		914636	0					
ANR	914900	Identifier	halfpad		914636	1					
ANR	914901	AssignmentExpression	"* halfpad = padsize > 1 ? r_str_pad ( ' ' , padsize ) : """""		914636	2		=			
ANR	914902	Identifier	halfpad		914636	0					
ANR	914903	ConditionalExpression	"padsize > 1 ? r_str_pad ( ' ' , padsize ) : """""		914636	1					
ANR	914904	Condition	padsize > 1		914636	0					
ANR	914905	RelationalExpression	padsize > 1		914636	0		>			
ANR	914906	Identifier	padsize		914636	0					
ANR	914907	PrimaryExpression	1		914636	1					
ANR	914908	CallExpression	"r_str_pad ( ' ' , padsize )"		914636	1					
ANR	914909	Callee	r_str_pad		914636	0					
ANR	914910	Identifier	r_str_pad		914636	0					
ANR	914911	ArgumentList	' '		914636	1					
ANR	914912	Argument	' '		914636	0					
ANR	914913	PrimaryExpression	' '		914636	0					
ANR	914914	Argument	padsize		914636	1					
ANR	914915	Identifier	padsize		914636	0					
ANR	914916	PrimaryExpression	""""""		914636	2					
ANR	914917	ExpressionStatement	"r_cons_printf ( ""%s[%s >>]"" , halfpad , b )"	343:4:10804:10843	914636	2	True				
ANR	914918	CallExpression	"r_cons_printf ( ""%s[%s >>]"" , halfpad , b )"		914636	0					
ANR	914919	Callee	r_cons_printf		914636	0					
ANR	914920	Identifier	r_cons_printf		914636	0					
ANR	914921	ArgumentList	"""%s[%s >>]"""		914636	1					
ANR	914922	Argument	"""%s[%s >>]"""		914636	0					
ANR	914923	PrimaryExpression	"""%s[%s >>]"""		914636	0					
ANR	914924	Argument	halfpad		914636	1					
ANR	914925	Identifier	halfpad		914636	0					
ANR	914926	Argument	b		914636	2					
ANR	914927	Identifier	b		914636	0					
ANR	914928	IfStatement	if ( a || b )		914636	9					
ANR	914929	Condition	a || b	345:7:10857:10862	914636	0	True				
ANR	914930	OrExpression	a || b		914636	0		||			
ANR	914931	Identifier	a		914636	0					
ANR	914932	Identifier	b		914636	1					
ANR	914933	CompoundStatement		38:15:1034:1034	914636	1					
ANR	914934	ExpressionStatement	r_cons_newline ( )	346:4:10871:10887	914636	0	True				
ANR	914935	CallExpression	r_cons_newline ( )		914636	0					
ANR	914936	Callee	r_cons_newline		914636	0					
ANR	914937	Identifier	r_cons_newline		914636	0					
ANR	914938	ArgumentList			914636	1					
ANR	914939	BreakStatement	break ;	349:2:10900:10905	914636	8	True				
ANR	914940	Label	case ' ' :	350:1:10908:10916	914636	9	True				
ANR	914941	ExpressionStatement	"r_flag_zone_add ( core -> flags , r_str_trim_ro ( input + 1 ) , core -> offset )"	351:2:10920:10990	914636	10	True				
ANR	914942	CallExpression	"r_flag_zone_add ( core -> flags , r_str_trim_ro ( input + 1 ) , core -> offset )"		914636	0					
ANR	914943	Callee	r_flag_zone_add		914636	0					
ANR	914944	Identifier	r_flag_zone_add		914636	0					
ANR	914945	ArgumentList	core -> flags		914636	1					
ANR	914946	Argument	core -> flags		914636	0					
ANR	914947	PtrMemberAccess	core -> flags		914636	0					
ANR	914948	Identifier	core		914636	0					
ANR	914949	Identifier	flags		914636	1					
ANR	914950	Argument	r_str_trim_ro ( input + 1 )		914636	1					
ANR	914951	CallExpression	r_str_trim_ro ( input + 1 )		914636	0					
ANR	914952	Callee	r_str_trim_ro		914636	0					
ANR	914953	Identifier	r_str_trim_ro		914636	0					
ANR	914954	ArgumentList	input + 1		914636	1					
ANR	914955	Argument	input + 1		914636	0					
ANR	914956	AdditiveExpression	input + 1		914636	0		+			
ANR	914957	Identifier	input		914636	0					
ANR	914958	PrimaryExpression	1		914636	1					
ANR	914959	Argument	core -> offset		914636	2					
ANR	914960	PtrMemberAccess	core -> offset		914636	0					
ANR	914961	Identifier	core		914636	0					
ANR	914962	Identifier	offset		914636	1					
ANR	914963	BreakStatement	break ;	352:2:10994:10999	914636	11	True				
ANR	914964	Label	case '-' :	353:1:11002:11010	914636	12	True				
ANR	914965	IfStatement	if ( input [ 1 ] == '*' )		914636	13					
ANR	914966	Condition	input [ 1 ] == '*'	354:6:11018:11032	914636	0	True				
ANR	914967	EqualityExpression	input [ 1 ] == '*'		914636	0		==			
ANR	914968	ArrayIndexing	input [ 1 ]		914636	0					
ANR	914969	Identifier	input		914636	0					
ANR	914970	PrimaryExpression	1		914636	1					
ANR	914971	PrimaryExpression	'*'		914636	1					
ANR	914972	CompoundStatement		47:23:1204:1204	914636	1					
ANR	914973	ExpressionStatement	r_flag_zone_reset ( core -> flags )	355:3:11040:11071	914636	0	True				
ANR	914974	CallExpression	r_flag_zone_reset ( core -> flags )		914636	0					
ANR	914975	Callee	r_flag_zone_reset		914636	0					
ANR	914976	Identifier	r_flag_zone_reset		914636	0					
ANR	914977	ArgumentList	core -> flags		914636	1					
ANR	914978	Argument	core -> flags		914636	0					
ANR	914979	PtrMemberAccess	core -> flags		914636	0					
ANR	914980	Identifier	core		914636	0					
ANR	914981	Identifier	flags		914636	1					
ANR	914982	ElseStatement	else		914636	0					
ANR	914983	CompoundStatement		49:9:1251:1251	914636	0					
ANR	914984	ExpressionStatement	"r_flag_zone_del ( core -> flags , input + 1 )"	357:3:11087:11127	914636	0	True				
ANR	914985	CallExpression	"r_flag_zone_del ( core -> flags , input + 1 )"		914636	0					
ANR	914986	Callee	r_flag_zone_del		914636	0					
ANR	914987	Identifier	r_flag_zone_del		914636	0					
ANR	914988	ArgumentList	core -> flags		914636	1					
ANR	914989	Argument	core -> flags		914636	0					
ANR	914990	PtrMemberAccess	core -> flags		914636	0					
ANR	914991	Identifier	core		914636	0					
ANR	914992	Identifier	flags		914636	1					
ANR	914993	Argument	input + 1		914636	1					
ANR	914994	AdditiveExpression	input + 1		914636	0		+			
ANR	914995	Identifier	input		914636	0					
ANR	914996	PrimaryExpression	1		914636	1					
ANR	914997	BreakStatement	break ;	359:2:11135:11140	914636	14	True				
ANR	914998	Label	case '*' :	360:1:11143:11151	914636	15	True				
ANR	914999	ExpressionStatement	"r_flag_zone_list ( core -> flags , '*' )"	361:2:11155:11190	914636	16	True				
ANR	915000	CallExpression	"r_flag_zone_list ( core -> flags , '*' )"		914636	0					
ANR	915001	Callee	r_flag_zone_list		914636	0					
ANR	915002	Identifier	r_flag_zone_list		914636	0					
ANR	915003	ArgumentList	core -> flags		914636	1					
ANR	915004	Argument	core -> flags		914636	0					
ANR	915005	PtrMemberAccess	core -> flags		914636	0					
ANR	915006	Identifier	core		914636	0					
ANR	915007	Identifier	flags		914636	1					
ANR	915008	Argument	'*'		914636	1					
ANR	915009	PrimaryExpression	'*'		914636	0					
ANR	915010	BreakStatement	break ;	362:2:11194:11199	914636	17	True				
ANR	915011	Label	case 0 :	363:1:11202:11208	914636	18	True				
ANR	915012	ExpressionStatement	"r_flag_zone_list ( core -> flags , 0 )"	364:2:11212:11245	914636	19	True				
ANR	915013	CallExpression	"r_flag_zone_list ( core -> flags , 0 )"		914636	0					
ANR	915014	Callee	r_flag_zone_list		914636	0					
ANR	915015	Identifier	r_flag_zone_list		914636	0					
ANR	915016	ArgumentList	core -> flags		914636	1					
ANR	915017	Argument	core -> flags		914636	0					
ANR	915018	PtrMemberAccess	core -> flags		914636	0					
ANR	915019	Identifier	core		914636	0					
ANR	915020	Identifier	flags		914636	1					
ANR	915021	Argument	0		914636	1					
ANR	915022	PrimaryExpression	0		914636	0					
ANR	915023	BreakStatement	break ;	365:2:11249:11254	914636	20	True				
ANR	915024	ReturnType	static void		914636	1					
ANR	915025	Identifier	cmd_fz		914636	2					
ANR	915026	ParameterList	"RCore * core , const char * input"		914636	3					
ANR	915027	Parameter	RCore * core	308:19:9798:9808	914636	0	True				
ANR	915028	ParameterType	RCore *		914636	0					
ANR	915029	Identifier	core		914636	1					
ANR	915030	Parameter	const char * input	308:32:9811:9827	914636	1	True				
ANR	915031	ParameterType	const char *		914636	0					
ANR	915032	Identifier	input		914636	1					
ANR	915033	CFGEntryNode	ENTRY		914636		True				
ANR	915034	CFGExitNode	EXIT		914636		True				
ANR	915035	Symbol	a		914636						
ANR	915036	Symbol	b		914636						
ANR	915037	Symbol	NULL		914636						
ANR	915038	Symbol	padsize		914636						
ANR	915039	Symbol	r_str_pad		914636						
ANR	915040	Symbol	title_size		914636						
ANR	915041	Symbol	r_cons_get_size		914636						
ANR	915042	Symbol	& a		914636						
ANR	915043	Symbol	* input		914636						
ANR	915044	Symbol	* core		914636						
ANR	915045	Symbol	& b		914636						
ANR	915046	Symbol	help_msg_fz		914636						
ANR	915047	Symbol	core -> offset		914636						
ANR	915048	Symbol	core -> flags		914636						
ANR	915049	Symbol	title		914636						
ANR	915050	Symbol	halfpad		914636						
ANR	915051	Symbol	core		914636						
ANR	915052	Symbol	input		914636						
ANR	915053	Symbol	strlen		914636						
ANR	915054	Symbol	a_len		914636						
ANR	915055	Symbol	w		914636						
ANR	915056	Symbol	r_str_trim_ro		914636						
ANR	915057	ClassDef	flagbar_t	369:0:11262:11306							
ANR	915058	DeclStmt									
ANR	915059	Decl							RCore	RCore *	core
ANR	915060	DeclStmt									
ANR	915061	Decl							int	int	cols
ANR	915062	Function	flagbar_foreach	374:0:11310:11773							
ANR	915063	FunctionDef	"flagbar_foreach (RFlagItem * fi , void * user)"		915062	0					
ANR	915064	CompoundStatement		374:55:11365:11773	915062	0					
ANR	915065	IdentifierDeclStatement	struct flagbar_t * u = ( struct flagbar_t * ) user ;	375:1:11368:11414	915062	0	True				
ANR	915066	IdentifierDecl	* u = ( struct flagbar_t * ) user		915062	0					
ANR	915067	IdentifierDeclType	struct flagbar_t *		915062	0					
ANR	915068	Identifier	u		915062	1					
ANR	915069	AssignmentExpression	* u = ( struct flagbar_t * ) user		915062	2		=			
ANR	915070	Identifier	u		915062	0					
ANR	915071	CastExpression	( struct flagbar_t * ) user		915062	1					
ANR	915072	CastTarget	struct flagbar_t *		915062	0					
ANR	915073	Identifier	user		915062	1					
ANR	915074	IdentifierDeclStatement	"ut64 min = 0 , max = r_io_size ( u -> core -> io ) ;"	376:1:11417:11460	915062	1	True				
ANR	915075	IdentifierDecl	min = 0		915062	0					
ANR	915076	IdentifierDeclType	ut64		915062	0					
ANR	915077	Identifier	min		915062	1					
ANR	915078	AssignmentExpression	min = 0		915062	2		=			
ANR	915079	Identifier	min		915062	0					
ANR	915080	PrimaryExpression	0		915062	1					
ANR	915081	IdentifierDecl	max = r_io_size ( u -> core -> io )		915062	1					
ANR	915082	IdentifierDeclType	ut64		915062	0					
ANR	915083	Identifier	max		915062	1					
ANR	915084	AssignmentExpression	max = r_io_size ( u -> core -> io )		915062	2		=			
ANR	915085	Identifier	max		915062	0					
ANR	915086	CallExpression	r_io_size ( u -> core -> io )		915062	1					
ANR	915087	Callee	r_io_size		915062	0					
ANR	915088	Identifier	r_io_size		915062	0					
ANR	915089	ArgumentList	u -> core -> io		915062	1					
ANR	915090	Argument	u -> core -> io		915062	0					
ANR	915091	PtrMemberAccess	u -> core -> io		915062	0					
ANR	915092	PtrMemberAccess	u -> core		915062	0					
ANR	915093	Identifier	u		915062	0					
ANR	915094	Identifier	core		915062	1					
ANR	915095	Identifier	io		915062	1					
ANR	915096	IdentifierDeclStatement	"RIOMap * m = r_io_map_get ( u -> core -> io , fi -> offset ) ;"	377:1:11463:11513	915062	2	True				
ANR	915097	IdentifierDecl	"* m = r_io_map_get ( u -> core -> io , fi -> offset )"		915062	0					
ANR	915098	IdentifierDeclType	RIOMap *		915062	0					
ANR	915099	Identifier	m		915062	1					
ANR	915100	AssignmentExpression	"* m = r_io_map_get ( u -> core -> io , fi -> offset )"		915062	2		=			
ANR	915101	Identifier	m		915062	0					
ANR	915102	CallExpression	"r_io_map_get ( u -> core -> io , fi -> offset )"		915062	1					
ANR	915103	Callee	r_io_map_get		915062	0					
ANR	915104	Identifier	r_io_map_get		915062	0					
ANR	915105	ArgumentList	u -> core -> io		915062	1					
ANR	915106	Argument	u -> core -> io		915062	0					
ANR	915107	PtrMemberAccess	u -> core -> io		915062	0					
ANR	915108	PtrMemberAccess	u -> core		915062	0					
ANR	915109	Identifier	u		915062	0					
ANR	915110	Identifier	core		915062	1					
ANR	915111	Identifier	io		915062	1					
ANR	915112	Argument	fi -> offset		915062	1					
ANR	915113	PtrMemberAccess	fi -> offset		915062	0					
ANR	915114	Identifier	fi		915062	0					
ANR	915115	Identifier	offset		915062	1					
ANR	915116	IfStatement	if ( m )		915062	3					
ANR	915117	Condition	m	378:5:11520:11520	915062	0	True				
ANR	915118	Identifier	m		915062	0					
ANR	915119	CompoundStatement		5:8:157:157	915062	1					
ANR	915120	ExpressionStatement	min = m -> itv . addr	379:2:11527:11544	915062	0	True				
ANR	915121	AssignmentExpression	min = m -> itv . addr		915062	0		=			
ANR	915122	Identifier	min		915062	0					
ANR	915123	MemberAccess	m -> itv . addr		915062	1					
ANR	915124	PtrMemberAccess	m -> itv		915062	0					
ANR	915125	Identifier	m		915062	0					
ANR	915126	Identifier	itv		915062	1					
ANR	915127	Identifier	addr		915062	1					
ANR	915128	ExpressionStatement	max = m -> itv . addr + m -> itv . size	380:2:11548:11579	915062	1	True				
ANR	915129	AssignmentExpression	max = m -> itv . addr + m -> itv . size		915062	0		=			
ANR	915130	Identifier	max		915062	0					
ANR	915131	AdditiveExpression	m -> itv . addr + m -> itv . size		915062	1		+			
ANR	915132	MemberAccess	m -> itv . addr		915062	0					
ANR	915133	PtrMemberAccess	m -> itv		915062	0					
ANR	915134	Identifier	m		915062	0					
ANR	915135	Identifier	itv		915062	1					
ANR	915136	Identifier	addr		915062	1					
ANR	915137	MemberAccess	m -> itv . size		915062	1					
ANR	915138	PtrMemberAccess	m -> itv		915062	0					
ANR	915139	Identifier	m		915062	0					
ANR	915140	Identifier	itv		915062	1					
ANR	915141	Identifier	size		915062	1					
ANR	915142	Statement	r_cons_printf	382:1:11585:11597	915062	4	True				
ANR	915143	Statement	(	382:15:11599:11599	915062	5	True				
ANR	915144	Statement	"""0x%08"""	382:16:11600:11606	915062	6	True				
ANR	915145	Statement	PFMT64x	382:23:11607:11613	915062	7	True				
ANR	915146	Statement	""" """	382:30:11614:11616	915062	8	True				
ANR	915147	Statement	","	382:33:11617:11617	915062	9	True				
ANR	915148	Statement	fi	382:35:11619:11620	915062	10	True				
ANR	915149	Statement	->	382:37:11621:11622	915062	11	True				
ANR	915150	Statement	offset	382:39:11623:11628	915062	12	True				
ANR	915151	Statement	)	382:45:11629:11629	915062	13	True				
ANR	915152	ExpressionStatement		382:46:11630:11630	915062	14	True				
ANR	915153	ExpressionStatement	"r_print_rangebar ( u -> core -> print , fi -> offset , fi -> offset + fi -> size , min , max , u -> cols )"	383:1:11633:11720	915062	15	True				
ANR	915154	CallExpression	"r_print_rangebar ( u -> core -> print , fi -> offset , fi -> offset + fi -> size , min , max , u -> cols )"		915062	0					
ANR	915155	Callee	r_print_rangebar		915062	0					
ANR	915156	Identifier	r_print_rangebar		915062	0					
ANR	915157	ArgumentList	u -> core -> print		915062	1					
ANR	915158	Argument	u -> core -> print		915062	0					
ANR	915159	PtrMemberAccess	u -> core -> print		915062	0					
ANR	915160	PtrMemberAccess	u -> core		915062	0					
ANR	915161	Identifier	u		915062	0					
ANR	915162	Identifier	core		915062	1					
ANR	915163	Identifier	print		915062	1					
ANR	915164	Argument	fi -> offset		915062	1					
ANR	915165	PtrMemberAccess	fi -> offset		915062	0					
ANR	915166	Identifier	fi		915062	0					
ANR	915167	Identifier	offset		915062	1					
ANR	915168	Argument	fi -> offset + fi -> size		915062	2					
ANR	915169	AdditiveExpression	fi -> offset + fi -> size		915062	0		+			
ANR	915170	PtrMemberAccess	fi -> offset		915062	0					
ANR	915171	Identifier	fi		915062	0					
ANR	915172	Identifier	offset		915062	1					
ANR	915173	PtrMemberAccess	fi -> size		915062	1					
ANR	915174	Identifier	fi		915062	0					
ANR	915175	Identifier	size		915062	1					
ANR	915176	Argument	min		915062	3					
ANR	915177	Identifier	min		915062	0					
ANR	915178	Argument	max		915062	4					
ANR	915179	Identifier	max		915062	0					
ANR	915180	Argument	u -> cols		915062	5					
ANR	915181	PtrMemberAccess	u -> cols		915062	0					
ANR	915182	Identifier	u		915062	0					
ANR	915183	Identifier	cols		915062	1					
ANR	915184	ExpressionStatement	"r_cons_printf ( ""  %s\\n"" , fi -> name )"	384:1:11723:11757	915062	16	True				
ANR	915185	CallExpression	"r_cons_printf ( ""  %s\\n"" , fi -> name )"		915062	0					
ANR	915186	Callee	r_cons_printf		915062	0					
ANR	915187	Identifier	r_cons_printf		915062	0					
ANR	915188	ArgumentList	"""  %s\\n"""		915062	1					
ANR	915189	Argument	"""  %s\\n"""		915062	0					
ANR	915190	PrimaryExpression	"""  %s\\n"""		915062	0					
ANR	915191	Argument	fi -> name		915062	1					
ANR	915192	PtrMemberAccess	fi -> name		915062	0					
ANR	915193	Identifier	fi		915062	0					
ANR	915194	Identifier	name		915062	1					
ANR	915195	ReturnStatement	return true ;	385:1:11760:11771	915062	17	True				
ANR	915196	Identifier	true		915062	0					
ANR	915197	ReturnType	static bool		915062	1					
ANR	915198	Identifier	flagbar_foreach		915062	2					
ANR	915199	ParameterList	"RFlagItem * fi , void * user"		915062	3					
ANR	915200	Parameter	RFlagItem * fi	374:28:11338:11350	915062	0	True				
ANR	915201	ParameterType	RFlagItem *		915062	0					
ANR	915202	Identifier	fi		915062	1					
ANR	915203	Parameter	void * user	374:43:11353:11362	915062	1	True				
ANR	915204	ParameterType	void *		915062	0					
ANR	915205	Identifier	user		915062	1					
ANR	915206	CFGEntryNode	ENTRY		915062		True				
ANR	915207	CFGExitNode	EXIT		915062		True				
ANR	915208	Symbol	u -> core		915062						
ANR	915209	Symbol	fi		915062						
ANR	915210	Symbol	m -> itv		915062						
ANR	915211	Symbol	fi -> size		915062						
ANR	915212	Symbol	max		915062						
ANR	915213	Symbol	fi -> name		915062						
ANR	915214	Symbol	* fi		915062						
ANR	915215	Symbol	m		915062						
ANR	915216	Symbol	m -> itv . size		915062						
ANR	915217	Symbol	min		915062						
ANR	915218	Symbol	u		915062						
ANR	915219	Symbol	u -> cols		915062						
ANR	915220	Symbol	* * u		915062						
ANR	915221	Symbol	fi -> offset		915062						
ANR	915222	Symbol	* m		915062						
ANR	915223	Symbol	u -> core -> print		915062						
ANR	915224	Symbol	true		915062						
ANR	915225	Symbol	m -> itv . addr		915062						
ANR	915226	Symbol	* u -> core		915062						
ANR	915227	Symbol	r_io_size		915062						
ANR	915228	Symbol	user		915062						
ANR	915229	Symbol	u -> core -> io		915062						
ANR	915230	Symbol	r_io_map_get		915062						
ANR	915231	Symbol	* u		915062						
ANR	915232	Function	flagbars	388:0:11776:12069							
ANR	915233	FunctionDef	"flagbars (RCore * core , const char * glob)"		915232	0					
ANR	915234	CompoundStatement		388:52:11828:12069	915232	0					
ANR	915235	IdentifierDeclStatement	int cols = r_cons_get_size ( NULL ) ;	389:1:11831:11864	915232	0	True				
ANR	915236	IdentifierDecl	cols = r_cons_get_size ( NULL )		915232	0					
ANR	915237	IdentifierDeclType	int		915232	0					
ANR	915238	Identifier	cols		915232	1					
ANR	915239	AssignmentExpression	cols = r_cons_get_size ( NULL )		915232	2		=			
ANR	915240	Identifier	cols		915232	0					
ANR	915241	CallExpression	r_cons_get_size ( NULL )		915232	1					
ANR	915242	Callee	r_cons_get_size		915232	0					
ANR	915243	Identifier	r_cons_get_size		915232	0					
ANR	915244	ArgumentList	NULL		915232	1					
ANR	915245	Argument	NULL		915232	0					
ANR	915246	Identifier	NULL		915232	0					
ANR	915247	ExpressionStatement	cols -= 80	390:1:11867:11877	915232	1	True				
ANR	915248	AssignmentExpression	cols -= 80		915232	0		-=			
ANR	915249	Identifier	cols		915232	0					
ANR	915250	PrimaryExpression	80		915232	1					
ANR	915251	IfStatement	if ( cols < 0 )		915232	2					
ANR	915252	Condition	cols < 0	391:5:11884:11891	915232	0	True				
ANR	915253	RelationalExpression	cols < 0		915232	0		<			
ANR	915254	Identifier	cols		915232	0					
ANR	915255	PrimaryExpression	0		915232	1					
ANR	915256	CompoundStatement		4:15:65:65	915232	1					
ANR	915257	ExpressionStatement	cols += 80	392:2:11898:11908	915232	0	True				
ANR	915258	AssignmentExpression	cols += 80		915232	0		+=			
ANR	915259	Identifier	cols		915232	0					
ANR	915260	PrimaryExpression	80		915232	1					
ANR	915261	Statement	struct	395:1:11915:11920	915232	3	True				
ANR	915262	Statement	flagbar_t	395:8:11922:11930	915232	4	True				
ANR	915263	Statement	u	395:18:11932:11932	915232	5	True				
ANR	915264	Statement	=	395:20:11934:11934	915232	6	True				
ANR	915265	CompoundStatement		8:22:107:107	915232	7					
ANR	915266	Statement	.	395:24:11938:11938	915232	0	True				
ANR	915267	Statement	core	395:25:11939:11942	915232	1	True				
ANR	915268	Statement	=	395:30:11944:11944	915232	2	True				
ANR	915269	Statement	core	395:32:11946:11949	915232	3	True				
ANR	915270	Statement	","	395:36:11950:11950	915232	4	True				
ANR	915271	Statement	.	395:38:11952:11952	915232	5	True				
ANR	915272	Statement	cols	395:39:11953:11956	915232	6	True				
ANR	915273	Statement	=	395:44:11958:11958	915232	7	True				
ANR	915274	Statement	cols	395:46:11960:11963	915232	8	True				
ANR	915275	ExpressionStatement		395:52:11966:11966	915232	8	True				
ANR	915276	ExpressionStatement	"r_flag_foreach_space_glob ( core -> flags , glob , r_flag_space_cur ( core -> flags ) , flagbar_foreach , & u )"	396:1:11969:12067	915232	9	True				
ANR	915277	CallExpression	"r_flag_foreach_space_glob ( core -> flags , glob , r_flag_space_cur ( core -> flags ) , flagbar_foreach , & u )"		915232	0					
ANR	915278	Callee	r_flag_foreach_space_glob		915232	0					
ANR	915279	Identifier	r_flag_foreach_space_glob		915232	0					
ANR	915280	ArgumentList	core -> flags		915232	1					
ANR	915281	Argument	core -> flags		915232	0					
ANR	915282	PtrMemberAccess	core -> flags		915232	0					
ANR	915283	Identifier	core		915232	0					
ANR	915284	Identifier	flags		915232	1					
ANR	915285	Argument	glob		915232	1					
ANR	915286	Identifier	glob		915232	0					
ANR	915287	Argument	r_flag_space_cur ( core -> flags )		915232	2					
ANR	915288	CallExpression	r_flag_space_cur ( core -> flags )		915232	0					
ANR	915289	Callee	r_flag_space_cur		915232	0					
ANR	915290	Identifier	r_flag_space_cur		915232	0					
ANR	915291	ArgumentList	core -> flags		915232	1					
ANR	915292	Argument	core -> flags		915232	0					
ANR	915293	PtrMemberAccess	core -> flags		915232	0					
ANR	915294	Identifier	core		915232	0					
ANR	915295	Identifier	flags		915232	1					
ANR	915296	Argument	flagbar_foreach		915232	3					
ANR	915297	Identifier	flagbar_foreach		915232	0					
ANR	915298	Argument	& u		915232	4					
ANR	915299	UnaryOperationExpression	& u		915232	0					
ANR	915300	UnaryOperator	&		915232	0					
ANR	915301	Identifier	u		915232	1					
ANR	915302	ReturnType	static void		915232	1					
ANR	915303	Identifier	flagbars		915232	2					
ANR	915304	ParameterList	"RCore * core , const char * glob"		915232	3					
ANR	915305	Parameter	RCore * core	388:21:11797:11807	915232	0	True				
ANR	915306	ParameterType	RCore *		915232	0					
ANR	915307	Identifier	core		915232	1					
ANR	915308	Parameter	const char * glob	388:34:11810:11825	915232	1	True				
ANR	915309	ParameterType	const char *		915232	0					
ANR	915310	Identifier	glob		915232	1					
ANR	915311	CFGEntryNode	ENTRY		915232		True				
ANR	915312	CFGExitNode	EXIT		915232		True				
ANR	915313	Symbol	core		915232						
ANR	915314	Symbol	NULL		915232						
ANR	915315	Symbol	flagbar_foreach		915232						
ANR	915316	Symbol	r_cons_get_size		915232						
ANR	915317	Symbol	r_flag_space_cur		915232						
ANR	915318	Symbol	glob		915232						
ANR	915319	Symbol	* core		915232						
ANR	915320	Symbol	core -> flags		915232						
ANR	915321	Symbol	& u		915232						
ANR	915322	Symbol	cols		915232						
ANR	915323	ClassDef	flag_to_flag_t	399:0:12072:12122							
ANR	915324	DeclStmt									
ANR	915325	Decl							ut64	ut64	next
ANR	915326	DeclStmt									
ANR	915327	Decl							ut64	ut64	offset
ANR	915328	Function	flag_to_flag_foreach	404:0:12126:12343							
ANR	915329	FunctionDef	"flag_to_flag_foreach (RFlagItem * fi , void * user)"		915328	0					
ANR	915330	CompoundStatement		404:60:12186:12343	915328	0					
ANR	915331	IdentifierDeclStatement	struct flag_to_flag_t * u = ( struct flag_to_flag_t * ) user ;	405:1:12189:12245	915328	0	True				
ANR	915332	IdentifierDecl	* u = ( struct flag_to_flag_t * ) user		915328	0					
ANR	915333	IdentifierDeclType	struct flag_to_flag_t *		915328	0					
ANR	915334	Identifier	u		915328	1					
ANR	915335	AssignmentExpression	* u = ( struct flag_to_flag_t * ) user		915328	2		=			
ANR	915336	Identifier	u		915328	0					
ANR	915337	CastExpression	( struct flag_to_flag_t * ) user		915328	1					
ANR	915338	CastTarget	struct flag_to_flag_t *		915328	0					
ANR	915339	Identifier	user		915328	1					
ANR	915340	IfStatement	if ( fi -> offset < u -> next && fi -> offset > u -> offset )		915328	1					
ANR	915341	Condition	fi -> offset < u -> next && fi -> offset > u -> offset	406:5:12252:12297	915328	0	True				
ANR	915342	AndExpression	fi -> offset < u -> next && fi -> offset > u -> offset		915328	0		&&			
ANR	915343	RelationalExpression	fi -> offset < u -> next		915328	0		<			
ANR	915344	PtrMemberAccess	fi -> offset		915328	0					
ANR	915345	Identifier	fi		915328	0					
ANR	915346	Identifier	offset		915328	1					
ANR	915347	PtrMemberAccess	u -> next		915328	1					
ANR	915348	Identifier	u		915328	0					
ANR	915349	Identifier	next		915328	1					
ANR	915350	RelationalExpression	fi -> offset > u -> offset		915328	1		>			
ANR	915351	PtrMemberAccess	fi -> offset		915328	0					
ANR	915352	Identifier	fi		915328	0					
ANR	915353	Identifier	offset		915328	1					
ANR	915354	PtrMemberAccess	u -> offset		915328	1					
ANR	915355	Identifier	u		915328	0					
ANR	915356	Identifier	offset		915328	1					
ANR	915357	CompoundStatement		3:53:113:113	915328	1					
ANR	915358	ExpressionStatement	u -> next = fi -> offset	407:2:12304:12324	915328	0	True				
ANR	915359	AssignmentExpression	u -> next = fi -> offset		915328	0		=			
ANR	915360	PtrMemberAccess	u -> next		915328	0					
ANR	915361	Identifier	u		915328	0					
ANR	915362	Identifier	next		915328	1					
ANR	915363	PtrMemberAccess	fi -> offset		915328	1					
ANR	915364	Identifier	fi		915328	0					
ANR	915365	Identifier	offset		915328	1					
ANR	915366	ReturnStatement	return true ;	409:1:12330:12341	915328	2	True				
ANR	915367	Identifier	true		915328	0					
ANR	915368	ReturnType	static bool		915328	1					
ANR	915369	Identifier	flag_to_flag_foreach		915328	2					
ANR	915370	ParameterList	"RFlagItem * fi , void * user"		915328	3					
ANR	915371	Parameter	RFlagItem * fi	404:33:12159:12171	915328	0	True				
ANR	915372	ParameterType	RFlagItem *		915328	0					
ANR	915373	Identifier	fi		915328	1					
ANR	915374	Parameter	void * user	404:48:12174:12183	915328	1	True				
ANR	915375	ParameterType	void *		915328	0					
ANR	915376	Identifier	user		915328	1					
ANR	915377	CFGEntryNode	ENTRY		915328		True				
ANR	915378	CFGExitNode	EXIT		915328		True				
ANR	915379	Symbol	u -> next		915328						
ANR	915380	Symbol	fi		915328						
ANR	915381	Symbol	u -> offset		915328						
ANR	915382	Symbol	u		915328						
ANR	915383	Symbol	fi -> offset		915328						
ANR	915384	Symbol	true		915328						
ANR	915385	Symbol	* fi		915328						
ANR	915386	Symbol	user		915328						
ANR	915387	Symbol	* u		915328						
ANR	915388	Function	flag_to_flag	412:0:12346:12705							
ANR	915389	FunctionDef	"flag_to_flag (RCore * core , const char * glob)"		915388	0					
ANR	915390	CompoundStatement		412:55:12401:12705	915388	0					
ANR	915391	ExpressionStatement	"r_return_val_if_fail ( glob , 0 )"	413:1:12404:12434	915388	0	True				
ANR	915392	CallExpression	"r_return_val_if_fail ( glob , 0 )"		915388	0					
ANR	915393	Callee	r_return_val_if_fail		915388	0					
ANR	915394	Identifier	r_return_val_if_fail		915388	0					
ANR	915395	ArgumentList	glob		915388	1					
ANR	915396	Argument	glob		915388	0					
ANR	915397	Identifier	glob		915388	0					
ANR	915398	Argument	0		915388	1					
ANR	915399	PrimaryExpression	0		915388	0					
ANR	915400	ExpressionStatement	glob = r_str_trim_ro ( glob )	414:1:12437:12464	915388	1	True				
ANR	915401	AssignmentExpression	glob = r_str_trim_ro ( glob )		915388	0		=			
ANR	915402	Identifier	glob		915388	0					
ANR	915403	CallExpression	r_str_trim_ro ( glob )		915388	1					
ANR	915404	Callee	r_str_trim_ro		915388	0					
ANR	915405	Identifier	r_str_trim_ro		915388	0					
ANR	915406	ArgumentList	glob		915388	1					
ANR	915407	Argument	glob		915388	0					
ANR	915408	Identifier	glob		915388	0					
ANR	915409	Statement	struct	415:1:12467:12472	915388	2	True				
ANR	915410	Statement	flag_to_flag_t	415:8:12474:12487	915388	3	True				
ANR	915411	Statement	u	415:23:12489:12489	915388	4	True				
ANR	915412	Statement	=	415:25:12491:12491	915388	5	True				
ANR	915413	CompoundStatement		4:27:91:91	915388	6					
ANR	915414	Statement	.	415:29:12495:12495	915388	0	True				
ANR	915415	Statement	next	415:30:12496:12499	915388	1	True				
ANR	915416	Statement	=	415:35:12501:12501	915388	2	True				
ANR	915417	Statement	UT64_MAX	415:37:12503:12510	915388	3	True				
ANR	915418	Statement	","	415:45:12511:12511	915388	4	True				
ANR	915419	Statement	.	415:47:12513:12513	915388	5	True				
ANR	915420	Statement	offset	415:48:12514:12519	915388	6	True				
ANR	915421	Statement	=	415:55:12521:12521	915388	7	True				
ANR	915422	Statement	core	415:57:12523:12526	915388	8	True				
ANR	915423	Statement	->	415:61:12527:12528	915388	9	True				
ANR	915424	Statement	offset	415:63:12529:12534	915388	10	True				
ANR	915425	ExpressionStatement		415:71:12537:12537	915388	7	True				
ANR	915426	ExpressionStatement	"r_flag_foreach_glob ( core -> flags , glob , flag_to_flag_foreach , & u )"	416:1:12540:12605	915388	8	True				
ANR	915427	CallExpression	"r_flag_foreach_glob ( core -> flags , glob , flag_to_flag_foreach , & u )"		915388	0					
ANR	915428	Callee	r_flag_foreach_glob		915388	0					
ANR	915429	Identifier	r_flag_foreach_glob		915388	0					
ANR	915430	ArgumentList	core -> flags		915388	1					
ANR	915431	Argument	core -> flags		915388	0					
ANR	915432	PtrMemberAccess	core -> flags		915388	0					
ANR	915433	Identifier	core		915388	0					
ANR	915434	Identifier	flags		915388	1					
ANR	915435	Argument	glob		915388	1					
ANR	915436	Identifier	glob		915388	0					
ANR	915437	Argument	flag_to_flag_foreach		915388	2					
ANR	915438	Identifier	flag_to_flag_foreach		915388	0					
ANR	915439	Argument	& u		915388	3					
ANR	915440	UnaryOperationExpression	& u		915388	0					
ANR	915441	UnaryOperator	&		915388	0					
ANR	915442	Identifier	u		915388	1					
ANR	915443	IfStatement	if ( u . next != UT64_MAX && u . next > core -> offset )		915388	9					
ANR	915444	Condition	u . next != UT64_MAX && u . next > core -> offset	417:5:12612:12654	915388	0	True				
ANR	915445	AndExpression	u . next != UT64_MAX && u . next > core -> offset		915388	0		&&			
ANR	915446	EqualityExpression	u . next != UT64_MAX		915388	0		!=			
ANR	915447	MemberAccess	u . next		915388	0					
ANR	915448	Identifier	u		915388	0					
ANR	915449	Identifier	next		915388	1					
ANR	915450	Identifier	UT64_MAX		915388	1					
ANR	915451	RelationalExpression	u . next > core -> offset		915388	1		>			
ANR	915452	MemberAccess	u . next		915388	0					
ANR	915453	Identifier	u		915388	0					
ANR	915454	Identifier	next		915388	1					
ANR	915455	PtrMemberAccess	core -> offset		915388	1					
ANR	915456	Identifier	core		915388	0					
ANR	915457	Identifier	offset		915388	1					
ANR	915458	CompoundStatement		6:50:255:255	915388	1					
ANR	915459	ReturnStatement	return u . next - core -> offset ;	418:2:12661:12689	915388	0	True				
ANR	915460	AdditiveExpression	u . next - core -> offset		915388	0		-			
ANR	915461	MemberAccess	u . next		915388	0					
ANR	915462	Identifier	u		915388	0					
ANR	915463	Identifier	next		915388	1					
ANR	915464	PtrMemberAccess	core -> offset		915388	1					
ANR	915465	Identifier	core		915388	0					
ANR	915466	Identifier	offset		915388	1					
ANR	915467	ReturnStatement	return 0 ;	420:1:12695:12703	915388	10	True				
ANR	915468	PrimaryExpression	0		915388	0					
ANR	915469	ReturnType	static int		915388	1					
ANR	915470	Identifier	flag_to_flag		915388	2					
ANR	915471	ParameterList	"RCore * core , const char * glob"		915388	3					
ANR	915472	Parameter	RCore * core	412:24:12370:12380	915388	0	True				
ANR	915473	ParameterType	RCore *		915388	0					
ANR	915474	Identifier	core		915388	1					
ANR	915475	Parameter	const char * glob	412:37:12383:12398	915388	1	True				
ANR	915476	ParameterType	const char *		915388	0					
ANR	915477	Identifier	glob		915388	1					
ANR	915478	CFGEntryNode	ENTRY		915388		True				
ANR	915479	CFGExitNode	EXIT		915388		True				
ANR	915480	Symbol	core		915388						
ANR	915481	Symbol	flag_to_flag_foreach		915388						
ANR	915482	Symbol	u		915388						
ANR	915483	Symbol	u . next		915388						
ANR	915484	Symbol	glob		915388						
ANR	915485	Symbol	r_str_trim_ro		915388						
ANR	915486	Symbol	* core		915388						
ANR	915487	Symbol	core -> offset		915388						
ANR	915488	Symbol	core -> flags		915388						
ANR	915489	Symbol	& u		915388						
ANR	915490	Symbol	UT64_MAX		915388						
ANR	915491	Function	cmd_flag_tags	423:0:12708:15449							
ANR	915492	FunctionDef	"cmd_flag_tags (RCore * core , const char * input)"		915491	0					
ANR	915493	CompoundStatement		423:58:12766:15449	915491	0					
ANR	915494	IdentifierDeclStatement	char mode = input [ 1 ] ;	424:1:12769:12789	915491	0	True				
ANR	915495	IdentifierDecl	mode = input [ 1 ]		915491	0					
ANR	915496	IdentifierDeclType	char		915491	0					
ANR	915497	Identifier	mode		915491	1					
ANR	915498	AssignmentExpression	mode = input [ 1 ]		915491	2		=			
ANR	915499	Identifier	mode		915491	0					
ANR	915500	ArrayIndexing	input [ 1 ]		915491	1					
ANR	915501	Identifier	input		915491	0					
ANR	915502	PrimaryExpression	1		915491	1					
ANR	915503	ForStatement	for ( ; * input && ! IS_WHITESPACE ( * input ) ; input ++ )		915491	1					
ANR	915504	Condition	* input && ! IS_WHITESPACE ( * input )	425:8:12799:12831	915491	0	True				
ANR	915505	AndExpression	* input && ! IS_WHITESPACE ( * input )		915491	0		&&			
ANR	915506	UnaryOperationExpression	* input		915491	0					
ANR	915507	UnaryOperator	*		915491	0					
ANR	915508	Identifier	input		915491	1					
ANR	915509	UnaryOperationExpression	! IS_WHITESPACE ( * input )		915491	1					
ANR	915510	UnaryOperator	!		915491	0					
ANR	915511	CallExpression	IS_WHITESPACE ( * input )		915491	1					
ANR	915512	Callee	IS_WHITESPACE		915491	0					
ANR	915513	Identifier	IS_WHITESPACE		915491	0					
ANR	915514	ArgumentList	* input		915491	1					
ANR	915515	Argument	* input		915491	0					
ANR	915516	UnaryOperationExpression	* input		915491	0					
ANR	915517	UnaryOperator	*		915491	0					
ANR	915518	Identifier	input		915491	1					
ANR	915519	PostIncDecOperationExpression	input ++	425:43:12834:12840	915491	1	True				
ANR	915520	Identifier	input		915491	0					
ANR	915521	IncDec	++		915491	1					
ANR	915522	CompoundStatement		3:52:76:76	915491	2					
ANR	915523	IdentifierDeclStatement	char * inp = strdup ( input ) ;	426:1:12847:12873	915491	2	True				
ANR	915524	IdentifierDecl	* inp = strdup ( input )		915491	0					
ANR	915525	IdentifierDeclType	char *		915491	0					
ANR	915526	Identifier	inp		915491	1					
ANR	915527	AssignmentExpression	* inp = strdup ( input )		915491	2		=			
ANR	915528	Identifier	inp		915491	0					
ANR	915529	CallExpression	strdup ( input )		915491	1					
ANR	915530	Callee	strdup		915491	0					
ANR	915531	Identifier	strdup		915491	0					
ANR	915532	ArgumentList	input		915491	1					
ANR	915533	Argument	input		915491	0					
ANR	915534	Identifier	input		915491	0					
ANR	915535	IdentifierDeclStatement	char * arg = inp ;	427:1:12876:12891	915491	3	True				
ANR	915536	IdentifierDecl	* arg = inp		915491	0					
ANR	915537	IdentifierDeclType	char *		915491	0					
ANR	915538	Identifier	arg		915491	1					
ANR	915539	AssignmentExpression	* arg = inp		915491	2		=			
ANR	915540	Identifier	inp		915491	0					
ANR	915541	Identifier	inp		915491	1					
ANR	915542	ExpressionStatement	r_str_trim ( arg )	428:1:12894:12910	915491	4	True				
ANR	915543	CallExpression	r_str_trim ( arg )		915491	0					
ANR	915544	Callee	r_str_trim		915491	0					
ANR	915545	Identifier	r_str_trim		915491	0					
ANR	915546	ArgumentList	arg		915491	1					
ANR	915547	Argument	arg		915491	0					
ANR	915548	Identifier	arg		915491	0					
ANR	915549	IfStatement	if ( ! * arg && ! mode )		915491	5					
ANR	915550	Condition	! * arg && ! mode	429:5:12917:12930	915491	0	True				
ANR	915551	AndExpression	! * arg && ! mode		915491	0		&&			
ANR	915552	UnaryOperationExpression	! * arg		915491	0					
ANR	915553	UnaryOperator	!		915491	0					
ANR	915554	UnaryOperationExpression	* arg		915491	1					
ANR	915555	UnaryOperator	*		915491	0					
ANR	915556	Identifier	arg		915491	1					
ANR	915557	UnaryOperationExpression	! mode		915491	1					
ANR	915558	UnaryOperator	!		915491	0					
ANR	915559	Identifier	mode		915491	1					
ANR	915560	CompoundStatement		10:2:208:258	915491	1					
ANR	915561	IdentifierDeclStatement	const char * tag ;	430:2:12937:12952	915491	0	True				
ANR	915562	IdentifierDecl	* tag		915491	0					
ANR	915563	IdentifierDeclType	const char *		915491	0					
ANR	915564	Identifier	tag		915491	1					
ANR	915565	IdentifierDeclStatement	RListIter * iter ;	431:2:12956:12971	915491	1	True				
ANR	915566	IdentifierDecl	* iter		915491	0					
ANR	915567	IdentifierDeclType	RListIter *		915491	0					
ANR	915568	Identifier	iter		915491	1					
ANR	915569	IdentifierDeclStatement	"RList * list = r_flag_tags_list ( core -> flags , NULL ) ;"	432:2:12975:13025	915491	2	True				
ANR	915570	IdentifierDecl	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	0					
ANR	915571	IdentifierDeclType	RList *		915491	0					
ANR	915572	Identifier	list		915491	1					
ANR	915573	AssignmentExpression	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	2		=			
ANR	915574	Identifier	list		915491	0					
ANR	915575	CallExpression	"r_flag_tags_list ( core -> flags , NULL )"		915491	1					
ANR	915576	Callee	r_flag_tags_list		915491	0					
ANR	915577	Identifier	r_flag_tags_list		915491	0					
ANR	915578	ArgumentList	core -> flags		915491	1					
ANR	915579	Argument	core -> flags		915491	0					
ANR	915580	PtrMemberAccess	core -> flags		915491	0					
ANR	915581	Identifier	core		915491	0					
ANR	915582	Identifier	flags		915491	1					
ANR	915583	Argument	NULL		915491	1					
ANR	915584	Identifier	NULL		915491	0					
ANR	915585	Statement	r_list_foreach	433:2:13029:13042	915491	3	True				
ANR	915586	Statement	(	433:17:13044:13044	915491	4	True				
ANR	915587	Statement	list	433:18:13045:13048	915491	5	True				
ANR	915588	Statement	","	433:22:13049:13049	915491	6	True				
ANR	915589	Statement	iter	433:24:13051:13054	915491	7	True				
ANR	915590	Statement	","	433:28:13055:13055	915491	8	True				
ANR	915591	Statement	tag	433:30:13057:13059	915491	9	True				
ANR	915592	Statement	)	433:33:13060:13060	915491	10	True				
ANR	915593	CompoundStatement		11:35:295:295	915491	11					
ANR	915594	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , tag )"	434:3:13067:13094	915491	0	True				
ANR	915595	CallExpression	"r_cons_printf ( ""%s\\n"" , tag )"		915491	0					
ANR	915596	Callee	r_cons_printf		915491	0					
ANR	915597	Identifier	r_cons_printf		915491	0					
ANR	915598	ArgumentList	"""%s\\n"""		915491	1					
ANR	915599	Argument	"""%s\\n"""		915491	0					
ANR	915600	PrimaryExpression	"""%s\\n"""		915491	0					
ANR	915601	Argument	tag		915491	1					
ANR	915602	Identifier	tag		915491	0					
ANR	915603	ExpressionStatement	r_list_free ( list )	436:2:13102:13120	915491	12	True				
ANR	915604	CallExpression	r_list_free ( list )		915491	0					
ANR	915605	Callee	r_list_free		915491	0					
ANR	915606	Identifier	r_list_free		915491	0					
ANR	915607	ArgumentList	list		915491	1					
ANR	915608	Argument	list		915491	0					
ANR	915609	Identifier	list		915491	0					
ANR	915610	ExpressionStatement	free ( inp )	437:2:13124:13134	915491	13	True				
ANR	915611	CallExpression	free ( inp )		915491	0					
ANR	915612	Callee	free		915491	0					
ANR	915613	Identifier	free		915491	0					
ANR	915614	ArgumentList	inp		915491	1					
ANR	915615	Argument	inp		915491	0					
ANR	915616	Identifier	inp		915491	0					
ANR	915617	ReturnStatement	return ;	438:2:13138:13144	915491	14	True				
ANR	915618	IfStatement	if ( mode == '?' )		915491	6					
ANR	915619	Condition	mode == '?'	440:5:13154:13164	915491	0	True				
ANR	915620	EqualityExpression	mode == '?'		915491	0		==			
ANR	915621	Identifier	mode		915491	0					
ANR	915622	PrimaryExpression	'?'		915491	1					
ANR	915623	CompoundStatement		18:18:400:400	915491	1					
ANR	915624	ExpressionStatement	"eprintf ( ""Usage: ft[?ln] [k] [v ...]\\n"" )"	441:2:13171:13211	915491	0	True				
ANR	915625	CallExpression	"eprintf ( ""Usage: ft[?ln] [k] [v ...]\\n"" )"		915491	0					
ANR	915626	Callee	eprintf		915491	0					
ANR	915627	Identifier	eprintf		915491	0					
ANR	915628	ArgumentList	"""Usage: ft[?ln] [k] [v ...]\\n"""		915491	1					
ANR	915629	Argument	"""Usage: ft[?ln] [k] [v ...]\\n"""		915491	0					
ANR	915630	PrimaryExpression	"""Usage: ft[?ln] [k] [v ...]\\n"""		915491	0					
ANR	915631	ExpressionStatement	"eprintf ( "" ft tag strcpy strlen ... # set words for the 'string' tag\\n"" )"	442:2:13215:13287	915491	1	True				
ANR	915632	CallExpression	"eprintf ( "" ft tag strcpy strlen ... # set words for the 'string' tag\\n"" )"		915491	0					
ANR	915633	Callee	eprintf		915491	0					
ANR	915634	Identifier	eprintf		915491	0					
ANR	915635	ArgumentList	""" ft tag strcpy strlen ... # set words for the 'string' tag\\n"""		915491	1					
ANR	915636	Argument	""" ft tag strcpy strlen ... # set words for the 'string' tag\\n"""		915491	0					
ANR	915637	PrimaryExpression	""" ft tag strcpy strlen ... # set words for the 'string' tag\\n"""		915491	0					
ANR	915638	ExpressionStatement	"eprintf ( "" ft tag                   # get offsets of all matching flags\\n"" )"	443:2:13291:13366	915491	2	True				
ANR	915639	CallExpression	"eprintf ( "" ft tag                   # get offsets of all matching flags\\n"" )"		915491	0					
ANR	915640	Callee	eprintf		915491	0					
ANR	915641	Identifier	eprintf		915491	0					
ANR	915642	ArgumentList	""" ft tag                   # get offsets of all matching flags\\n"""		915491	1					
ANR	915643	Argument	""" ft tag                   # get offsets of all matching flags\\n"""		915491	0					
ANR	915644	PrimaryExpression	""" ft tag                   # get offsets of all matching flags\\n"""		915491	0					
ANR	915645	ExpressionStatement	"eprintf ( "" ft                       # list all tags\\n"" )"	444:2:13370:13425	915491	3	True				
ANR	915646	CallExpression	"eprintf ( "" ft                       # list all tags\\n"" )"		915491	0					
ANR	915647	Callee	eprintf		915491	0					
ANR	915648	Identifier	eprintf		915491	0					
ANR	915649	ArgumentList	""" ft                       # list all tags\\n"""		915491	1					
ANR	915650	Argument	""" ft                       # list all tags\\n"""		915491	0					
ANR	915651	PrimaryExpression	""" ft                       # list all tags\\n"""		915491	0					
ANR	915652	ExpressionStatement	"eprintf ( "" ftn tag                  # get matching flagnames fot given tag\\n"" )"	445:2:13429:13507	915491	4	True				
ANR	915653	CallExpression	"eprintf ( "" ftn tag                  # get matching flagnames fot given tag\\n"" )"		915491	0					
ANR	915654	Callee	eprintf		915491	0					
ANR	915655	Identifier	eprintf		915491	0					
ANR	915656	ArgumentList	""" ftn tag                  # get matching flagnames fot given tag\\n"""		915491	1					
ANR	915657	Argument	""" ftn tag                  # get matching flagnames fot given tag\\n"""		915491	0					
ANR	915658	PrimaryExpression	""" ftn tag                  # get matching flagnames fot given tag\\n"""		915491	0					
ANR	915659	ExpressionStatement	"eprintf ( "" ftw                      # flag tags within this file\\n"" )"	446:2:13511:13579	915491	5	True				
ANR	915660	CallExpression	"eprintf ( "" ftw                      # flag tags within this file\\n"" )"		915491	0					
ANR	915661	Callee	eprintf		915491	0					
ANR	915662	Identifier	eprintf		915491	0					
ANR	915663	ArgumentList	""" ftw                      # flag tags within this file\\n"""		915491	1					
ANR	915664	Argument	""" ftw                      # flag tags within this file\\n"""		915491	0					
ANR	915665	PrimaryExpression	""" ftw                      # flag tags within this file\\n"""		915491	0					
ANR	915666	ExpressionStatement	"eprintf ( "" ftj                      # list all flagtags in JSON format\\n"" )"	447:2:13583:13657	915491	6	True				
ANR	915667	CallExpression	"eprintf ( "" ftj                      # list all flagtags in JSON format\\n"" )"		915491	0					
ANR	915668	Callee	eprintf		915491	0					
ANR	915669	Identifier	eprintf		915491	0					
ANR	915670	ArgumentList	""" ftj                      # list all flagtags in JSON format\\n"""		915491	1					
ANR	915671	Argument	""" ftj                      # list all flagtags in JSON format\\n"""		915491	0					
ANR	915672	PrimaryExpression	""" ftj                      # list all flagtags in JSON format\\n"""		915491	0					
ANR	915673	ExpressionStatement	"eprintf ( "" ft*                      # list all flagtags in r2 commands\\n"" )"	448:2:13661:13735	915491	7	True				
ANR	915674	CallExpression	"eprintf ( "" ft*                      # list all flagtags in r2 commands\\n"" )"		915491	0					
ANR	915675	Callee	eprintf		915491	0					
ANR	915676	Identifier	eprintf		915491	0					
ANR	915677	ArgumentList	""" ft*                      # list all flagtags in r2 commands\\n"""		915491	1					
ANR	915678	Argument	""" ft*                      # list all flagtags in r2 commands\\n"""		915491	0					
ANR	915679	PrimaryExpression	""" ft*                      # list all flagtags in r2 commands\\n"""		915491	0					
ANR	915680	ExpressionStatement	free ( inp )	449:2:13739:13749	915491	8	True				
ANR	915681	CallExpression	free ( inp )		915491	0					
ANR	915682	Callee	free		915491	0					
ANR	915683	Identifier	free		915491	0					
ANR	915684	ArgumentList	inp		915491	1					
ANR	915685	Argument	inp		915491	0					
ANR	915686	Identifier	inp		915491	0					
ANR	915687	ReturnStatement	return ;	450:2:13753:13759	915491	9	True				
ANR	915688	IfStatement	if ( mode == 'w' )		915491	7					
ANR	915689	Condition	mode == 'w'	452:5:13769:13779	915491	0	True				
ANR	915690	EqualityExpression	mode == 'w'		915491	0		==			
ANR	915691	Identifier	mode		915491	0					
ANR	915692	PrimaryExpression	'w'		915491	1					
ANR	915693	CompoundStatement		33:2:1066:1116	915491	1					
ANR	915694	IdentifierDeclStatement	const char * tag ;	453:2:13795:13810	915491	0	True				
ANR	915695	IdentifierDecl	* tag		915491	0					
ANR	915696	IdentifierDeclType	const char *		915491	0					
ANR	915697	Identifier	tag		915491	1					
ANR	915698	IdentifierDeclStatement	RListIter * iter ;	454:2:13814:13829	915491	1	True				
ANR	915699	IdentifierDecl	* iter		915491	0					
ANR	915700	IdentifierDeclType	RListIter *		915491	0					
ANR	915701	Identifier	iter		915491	1					
ANR	915702	IdentifierDeclStatement	"RList * list = r_flag_tags_list ( core -> flags , NULL ) ;"	455:2:13833:13883	915491	2	True				
ANR	915703	IdentifierDecl	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	0					
ANR	915704	IdentifierDeclType	RList *		915491	0					
ANR	915705	Identifier	list		915491	1					
ANR	915706	AssignmentExpression	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	2		=			
ANR	915707	Identifier	list		915491	0					
ANR	915708	CallExpression	"r_flag_tags_list ( core -> flags , NULL )"		915491	1					
ANR	915709	Callee	r_flag_tags_list		915491	0					
ANR	915710	Identifier	r_flag_tags_list		915491	0					
ANR	915711	ArgumentList	core -> flags		915491	1					
ANR	915712	Argument	core -> flags		915491	0					
ANR	915713	PtrMemberAccess	core -> flags		915491	0					
ANR	915714	Identifier	core		915491	0					
ANR	915715	Identifier	flags		915491	1					
ANR	915716	Argument	NULL		915491	1					
ANR	915717	Identifier	NULL		915491	0					
ANR	915718	Statement	r_list_foreach	456:2:13887:13900	915491	3	True				
ANR	915719	Statement	(	456:17:13902:13902	915491	4	True				
ANR	915720	Statement	list	456:18:13903:13906	915491	5	True				
ANR	915721	Statement	","	456:22:13907:13907	915491	6	True				
ANR	915722	Statement	iter	456:24:13909:13912	915491	7	True				
ANR	915723	Statement	","	456:28:13913:13913	915491	8	True				
ANR	915724	Statement	tag	456:30:13915:13917	915491	9	True				
ANR	915725	Statement	)	456:33:13918:13918	915491	10	True				
ANR	915726	CompoundStatement		34:35:1153:1153	915491	11					
ANR	915727	ExpressionStatement	"r_cons_printf ( ""%s:\\n"" , tag )"	457:3:13925:13953	915491	0	True				
ANR	915728	CallExpression	"r_cons_printf ( ""%s:\\n"" , tag )"		915491	0					
ANR	915729	Callee	r_cons_printf		915491	0					
ANR	915730	Identifier	r_cons_printf		915491	0					
ANR	915731	ArgumentList	"""%s:\\n"""		915491	1					
ANR	915732	Argument	"""%s:\\n"""		915491	0					
ANR	915733	PrimaryExpression	"""%s:\\n"""		915491	0					
ANR	915734	Argument	tag		915491	1					
ANR	915735	Identifier	tag		915491	0					
ANR	915736	ExpressionStatement	"r_core_cmdf ( core , ""ftn %s"" , tag )"	458:3:13958:13991	915491	1	True				
ANR	915737	CallExpression	"r_core_cmdf ( core , ""ftn %s"" , tag )"		915491	0					
ANR	915738	Callee	r_core_cmdf		915491	0					
ANR	915739	Identifier	r_core_cmdf		915491	0					
ANR	915740	ArgumentList	core		915491	1					
ANR	915741	Argument	core		915491	0					
ANR	915742	Identifier	core		915491	0					
ANR	915743	Argument	"""ftn %s"""		915491	1					
ANR	915744	PrimaryExpression	"""ftn %s"""		915491	0					
ANR	915745	Argument	tag		915491	2					
ANR	915746	Identifier	tag		915491	0					
ANR	915747	ExpressionStatement	r_list_free ( list )	460:2:13999:14017	915491	12	True				
ANR	915748	CallExpression	r_list_free ( list )		915491	0					
ANR	915749	Callee	r_list_free		915491	0					
ANR	915750	Identifier	r_list_free		915491	0					
ANR	915751	ArgumentList	list		915491	1					
ANR	915752	Argument	list		915491	0					
ANR	915753	Identifier	list		915491	0					
ANR	915754	ExpressionStatement	free ( inp )	461:2:14021:14031	915491	13	True				
ANR	915755	CallExpression	free ( inp )		915491	0					
ANR	915756	Callee	free		915491	0					
ANR	915757	Identifier	free		915491	0					
ANR	915758	ArgumentList	inp		915491	1					
ANR	915759	Argument	inp		915491	0					
ANR	915760	Identifier	inp		915491	0					
ANR	915761	ReturnStatement	return ;	462:2:14035:14041	915491	14	True				
ANR	915762	IfStatement	if ( mode == '*' )		915491	8					
ANR	915763	Condition	mode == '*'	464:5:14051:14061	915491	0	True				
ANR	915764	EqualityExpression	mode == '*'		915491	0		==			
ANR	915765	Identifier	mode		915491	0					
ANR	915766	PrimaryExpression	'*'		915491	1					
ANR	915767	CompoundStatement		45:2:1339:1389	915491	1					
ANR	915768	IdentifierDeclStatement	RListIter * iter ;	465:2:14068:14083	915491	0	True				
ANR	915769	IdentifierDecl	* iter		915491	0					
ANR	915770	IdentifierDeclType	RListIter *		915491	0					
ANR	915771	Identifier	iter		915491	1					
ANR	915772	IdentifierDeclStatement	const char * tag ;	466:2:14087:14102	915491	1	True				
ANR	915773	IdentifierDecl	* tag		915491	0					
ANR	915774	IdentifierDeclType	const char *		915491	0					
ANR	915775	Identifier	tag		915491	1					
ANR	915776	IdentifierDeclStatement	"RList * list = r_flag_tags_list ( core -> flags , NULL ) ;"	467:2:14106:14156	915491	2	True				
ANR	915777	IdentifierDecl	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	0					
ANR	915778	IdentifierDeclType	RList *		915491	0					
ANR	915779	Identifier	list		915491	1					
ANR	915780	AssignmentExpression	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	2		=			
ANR	915781	Identifier	list		915491	0					
ANR	915782	CallExpression	"r_flag_tags_list ( core -> flags , NULL )"		915491	1					
ANR	915783	Callee	r_flag_tags_list		915491	0					
ANR	915784	Identifier	r_flag_tags_list		915491	0					
ANR	915785	ArgumentList	core -> flags		915491	1					
ANR	915786	Argument	core -> flags		915491	0					
ANR	915787	PtrMemberAccess	core -> flags		915491	0					
ANR	915788	Identifier	core		915491	0					
ANR	915789	Identifier	flags		915491	1					
ANR	915790	Argument	NULL		915491	1					
ANR	915791	Identifier	NULL		915491	0					
ANR	915792	Statement	r_list_foreach	468:2:14160:14173	915491	3	True				
ANR	915793	Statement	(	468:17:14175:14175	915491	4	True				
ANR	915794	Statement	list	468:18:14176:14179	915491	5	True				
ANR	915795	Statement	","	468:22:14180:14180	915491	6	True				
ANR	915796	Statement	iter	468:24:14182:14185	915491	7	True				
ANR	915797	Statement	","	468:28:14186:14186	915491	8	True				
ANR	915798	Statement	tag	468:30:14188:14190	915491	9	True				
ANR	915799	Statement	)	468:33:14191:14191	915491	10	True				
ANR	915800	CompoundStatement		47:3:1431:1509	915491	11					
ANR	915801	IdentifierDeclStatement	"const char * flags = sdb_get ( core -> flags -> tags , sdb_fmt ( ""tag.%s"" , tag ) , NULL ) ;"	469:3:14198:14276	915491	0	True				
ANR	915802	IdentifierDecl	"* flags = sdb_get ( core -> flags -> tags , sdb_fmt ( ""tag.%s"" , tag ) , NULL )"		915491	0					
ANR	915803	IdentifierDeclType	const char *		915491	0					
ANR	915804	Identifier	flags		915491	1					
ANR	915805	AssignmentExpression	"* flags = sdb_get ( core -> flags -> tags , sdb_fmt ( ""tag.%s"" , tag ) , NULL )"		915491	2		=			
ANR	915806	Identifier	flags		915491	0					
ANR	915807	CallExpression	"sdb_get ( core -> flags -> tags , sdb_fmt ( ""tag.%s"" , tag ) , NULL )"		915491	1					
ANR	915808	Callee	sdb_get		915491	0					
ANR	915809	Identifier	sdb_get		915491	0					
ANR	915810	ArgumentList	core -> flags -> tags		915491	1					
ANR	915811	Argument	core -> flags -> tags		915491	0					
ANR	915812	PtrMemberAccess	core -> flags -> tags		915491	0					
ANR	915813	PtrMemberAccess	core -> flags		915491	0					
ANR	915814	Identifier	core		915491	0					
ANR	915815	Identifier	flags		915491	1					
ANR	915816	Identifier	tags		915491	1					
ANR	915817	Argument	"sdb_fmt ( ""tag.%s"" , tag )"		915491	1					
ANR	915818	CallExpression	"sdb_fmt ( ""tag.%s"" , tag )"		915491	0					
ANR	915819	Callee	sdb_fmt		915491	0					
ANR	915820	Identifier	sdb_fmt		915491	0					
ANR	915821	ArgumentList	"""tag.%s"""		915491	1					
ANR	915822	Argument	"""tag.%s"""		915491	0					
ANR	915823	PrimaryExpression	"""tag.%s"""		915491	0					
ANR	915824	Argument	tag		915491	1					
ANR	915825	Identifier	tag		915491	0					
ANR	915826	Argument	NULL		915491	2					
ANR	915827	Identifier	NULL		915491	0					
ANR	915828	ExpressionStatement	"r_cons_printf ( ""ft %s %s\\n"" , tag , flags )"	470:3:14281:14321	915491	1	True				
ANR	915829	CallExpression	"r_cons_printf ( ""ft %s %s\\n"" , tag , flags )"		915491	0					
ANR	915830	Callee	r_cons_printf		915491	0					
ANR	915831	Identifier	r_cons_printf		915491	0					
ANR	915832	ArgumentList	"""ft %s %s\\n"""		915491	1					
ANR	915833	Argument	"""ft %s %s\\n"""		915491	0					
ANR	915834	PrimaryExpression	"""ft %s %s\\n"""		915491	0					
ANR	915835	Argument	tag		915491	1					
ANR	915836	Identifier	tag		915491	0					
ANR	915837	Argument	flags		915491	2					
ANR	915838	Identifier	flags		915491	0					
ANR	915839	ExpressionStatement	r_list_free ( list )	472:2:14329:14347	915491	12	True				
ANR	915840	CallExpression	r_list_free ( list )		915491	0					
ANR	915841	Callee	r_list_free		915491	0					
ANR	915842	Identifier	r_list_free		915491	0					
ANR	915843	ArgumentList	list		915491	1					
ANR	915844	Argument	list		915491	0					
ANR	915845	Identifier	list		915491	0					
ANR	915846	ReturnStatement	return ;	473:2:14351:14357	915491	13	True				
ANR	915847	IfStatement	if ( mode == 'j' )		915491	9					
ANR	915848	Condition	mode == 'j'	475:5:14367:14377	915491	0	True				
ANR	915849	EqualityExpression	mode == 'j'		915491	0		==			
ANR	915850	Identifier	mode		915491	0					
ANR	915851	PrimaryExpression	'j'		915491	1					
ANR	915852	CompoundStatement		58:2:1713:1763	915491	1					
ANR	915853	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	476:2:14393:14416	915491	0	True				
ANR	915854	IdentifierDecl	* iter		915491	0					
ANR	915855	IdentifierDeclType	RListIter *		915491	0					
ANR	915856	Identifier	iter		915491	1					
ANR	915857	IdentifierDecl	* iter2		915491	1					
ANR	915858	IdentifierDeclType	RListIter *		915491	0					
ANR	915859	Identifier	iter2		915491	1					
ANR	915860	IdentifierDeclStatement	"const char * tag , * flg ;"	477:2:14420:14441	915491	1	True				
ANR	915861	IdentifierDecl	* tag		915491	0					
ANR	915862	IdentifierDeclType	const char *		915491	0					
ANR	915863	Identifier	tag		915491	1					
ANR	915864	IdentifierDecl	* flg		915491	1					
ANR	915865	IdentifierDeclType	const char *		915491	0					
ANR	915866	Identifier	flg		915491	1					
ANR	915867	IdentifierDeclStatement	PJ * pj = pj_new ( ) ;	478:2:14445:14463	915491	2	True				
ANR	915868	IdentifierDecl	* pj = pj_new ( )		915491	0					
ANR	915869	IdentifierDeclType	PJ *		915491	0					
ANR	915870	Identifier	pj		915491	1					
ANR	915871	AssignmentExpression	* pj = pj_new ( )		915491	2		=			
ANR	915872	Identifier	pj		915491	0					
ANR	915873	CallExpression	pj_new ( )		915491	1					
ANR	915874	Callee	pj_new		915491	0					
ANR	915875	Identifier	pj_new		915491	0					
ANR	915876	ArgumentList			915491	1					
ANR	915877	ExpressionStatement	pj_o ( pj )	479:2:14467:14476	915491	3	True				
ANR	915878	CallExpression	pj_o ( pj )		915491	0					
ANR	915879	Callee	pj_o		915491	0					
ANR	915880	Identifier	pj_o		915491	0					
ANR	915881	ArgumentList	pj		915491	1					
ANR	915882	Argument	pj		915491	0					
ANR	915883	Identifier	pj		915491	0					
ANR	915884	IdentifierDeclStatement	"RList * list = r_flag_tags_list ( core -> flags , NULL ) ;"	480:2:14480:14530	915491	4	True				
ANR	915885	IdentifierDecl	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	0					
ANR	915886	IdentifierDeclType	RList *		915491	0					
ANR	915887	Identifier	list		915491	1					
ANR	915888	AssignmentExpression	"* list = r_flag_tags_list ( core -> flags , NULL )"		915491	2		=			
ANR	915889	Identifier	list		915491	0					
ANR	915890	CallExpression	"r_flag_tags_list ( core -> flags , NULL )"		915491	1					
ANR	915891	Callee	r_flag_tags_list		915491	0					
ANR	915892	Identifier	r_flag_tags_list		915491	0					
ANR	915893	ArgumentList	core -> flags		915491	1					
ANR	915894	Argument	core -> flags		915491	0					
ANR	915895	PtrMemberAccess	core -> flags		915491	0					
ANR	915896	Identifier	core		915491	0					
ANR	915897	Identifier	flags		915491	1					
ANR	915898	Argument	NULL		915491	1					
ANR	915899	Identifier	NULL		915491	0					
ANR	915900	Statement	r_list_foreach	481:2:14534:14547	915491	5	True				
ANR	915901	Statement	(	481:17:14549:14549	915491	6	True				
ANR	915902	Statement	list	481:18:14550:14553	915491	7	True				
ANR	915903	Statement	","	481:22:14554:14554	915491	8	True				
ANR	915904	Statement	iter	481:24:14556:14559	915491	9	True				
ANR	915905	Statement	","	481:28:14560:14560	915491	10	True				
ANR	915906	Statement	tag	481:30:14562:14564	915491	11	True				
ANR	915907	Statement	)	481:33:14565:14565	915491	12	True				
ANR	915908	CompoundStatement		62:3:1838:1888	915491	13					
ANR	915909	ExpressionStatement	"pj_k ( pj , tag )"	482:3:14572:14586	915491	0	True				
ANR	915910	CallExpression	"pj_k ( pj , tag )"		915491	0					
ANR	915911	Callee	pj_k		915491	0					
ANR	915912	Identifier	pj_k		915491	0					
ANR	915913	ArgumentList	pj		915491	1					
ANR	915914	Argument	pj		915491	0					
ANR	915915	Identifier	pj		915491	0					
ANR	915916	Argument	tag		915491	1					
ANR	915917	Identifier	tag		915491	0					
ANR	915918	ExpressionStatement	pj_a ( pj )	483:3:14591:14600	915491	1	True				
ANR	915919	CallExpression	pj_a ( pj )		915491	0					
ANR	915920	Callee	pj_a		915491	0					
ANR	915921	Identifier	pj_a		915491	0					
ANR	915922	ArgumentList	pj		915491	1					
ANR	915923	Argument	pj		915491	0					
ANR	915924	Identifier	pj		915491	0					
ANR	915925	IdentifierDeclStatement	"RList * flags = r_flag_tags_list ( core -> flags , tag ) ;"	484:3:14605:14655	915491	2	True				
ANR	915926	IdentifierDecl	"* flags = r_flag_tags_list ( core -> flags , tag )"		915491	0					
ANR	915927	IdentifierDeclType	RList *		915491	0					
ANR	915928	Identifier	flags		915491	1					
ANR	915929	AssignmentExpression	"* flags = r_flag_tags_list ( core -> flags , tag )"		915491	2		=			
ANR	915930	Identifier	flags		915491	0					
ANR	915931	CallExpression	"r_flag_tags_list ( core -> flags , tag )"		915491	1					
ANR	915932	Callee	r_flag_tags_list		915491	0					
ANR	915933	Identifier	r_flag_tags_list		915491	0					
ANR	915934	ArgumentList	core -> flags		915491	1					
ANR	915935	Argument	core -> flags		915491	0					
ANR	915936	PtrMemberAccess	core -> flags		915491	0					
ANR	915937	Identifier	core		915491	0					
ANR	915938	Identifier	flags		915491	1					
ANR	915939	Argument	tag		915491	1					
ANR	915940	Identifier	tag		915491	0					
ANR	915941	Statement	r_list_foreach	485:3:14660:14673	915491	3	True				
ANR	915942	Statement	(	485:18:14675:14675	915491	4	True				
ANR	915943	Statement	flags	485:19:14676:14680	915491	5	True				
ANR	915944	Statement	","	485:24:14681:14681	915491	6	True				
ANR	915945	Statement	iter2	485:26:14683:14687	915491	7	True				
ANR	915946	Statement	","	485:31:14688:14688	915491	8	True				
ANR	915947	Statement	flg	485:33:14690:14692	915491	9	True				
ANR	915948	Statement	)	485:36:14693:14693	915491	10	True				
ANR	915949	CompoundStatement		63:38:1928:1928	915491	11					
ANR	915950	ExpressionStatement	"pj_s ( pj , flg )"	486:4:14701:14715	915491	0	True				
ANR	915951	CallExpression	"pj_s ( pj , flg )"		915491	0					
ANR	915952	Callee	pj_s		915491	0					
ANR	915953	Identifier	pj_s		915491	0					
ANR	915954	ArgumentList	pj		915491	1					
ANR	915955	Argument	pj		915491	0					
ANR	915956	Identifier	pj		915491	0					
ANR	915957	Argument	flg		915491	1					
ANR	915958	Identifier	flg		915491	0					
ANR	915959	ExpressionStatement	pj_end ( pj )	488:3:14725:14736	915491	12	True				
ANR	915960	CallExpression	pj_end ( pj )		915491	0					
ANR	915961	Callee	pj_end		915491	0					
ANR	915962	Identifier	pj_end		915491	0					
ANR	915963	ArgumentList	pj		915491	1					
ANR	915964	Argument	pj		915491	0					
ANR	915965	Identifier	pj		915491	0					
ANR	915966	ExpressionStatement	pj_end ( pj )	490:2:14744:14755	915491	14	True				
ANR	915967	CallExpression	pj_end ( pj )		915491	0					
ANR	915968	Callee	pj_end		915491	0					
ANR	915969	Identifier	pj_end		915491	0					
ANR	915970	ArgumentList	pj		915491	1					
ANR	915971	Argument	pj		915491	0					
ANR	915972	Identifier	pj		915491	0					
ANR	915973	ExpressionStatement	r_list_free ( list )	491:2:14759:14777	915491	15	True				
ANR	915974	CallExpression	r_list_free ( list )		915491	0					
ANR	915975	Callee	r_list_free		915491	0					
ANR	915976	Identifier	r_list_free		915491	0					
ANR	915977	ArgumentList	list		915491	1					
ANR	915978	Argument	list		915491	0					
ANR	915979	Identifier	list		915491	0					
ANR	915980	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"	492:2:14781:14819	915491	16	True				
ANR	915981	CallExpression	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"		915491	0					
ANR	915982	Callee	r_cons_printf		915491	0					
ANR	915983	Identifier	r_cons_printf		915491	0					
ANR	915984	ArgumentList	"""%s\\n"""		915491	1					
ANR	915985	Argument	"""%s\\n"""		915491	0					
ANR	915986	PrimaryExpression	"""%s\\n"""		915491	0					
ANR	915987	Argument	pj_string ( pj )		915491	1					
ANR	915988	CallExpression	pj_string ( pj )		915491	0					
ANR	915989	Callee	pj_string		915491	0					
ANR	915990	Identifier	pj_string		915491	0					
ANR	915991	ArgumentList	pj		915491	1					
ANR	915992	Argument	pj		915491	0					
ANR	915993	Identifier	pj		915491	0					
ANR	915994	ExpressionStatement	pj_free ( pj )	493:2:14823:14835	915491	17	True				
ANR	915995	CallExpression	pj_free ( pj )		915491	0					
ANR	915996	Callee	pj_free		915491	0					
ANR	915997	Identifier	pj_free		915491	0					
ANR	915998	ArgumentList	pj		915491	1					
ANR	915999	Argument	pj		915491	0					
ANR	916000	Identifier	pj		915491	0					
ANR	916001	ReturnStatement	return ;	494:2:14839:14845	915491	18	True				
ANR	916002	IdentifierDeclStatement	"char * arg1 = strchr ( arg , ' ' ) ;"	496:1:14851:14881	915491	10	True				
ANR	916003	IdentifierDecl	"* arg1 = strchr ( arg , ' ' )"		915491	0					
ANR	916004	IdentifierDeclType	char *		915491	0					
ANR	916005	Identifier	arg1		915491	1					
ANR	916006	AssignmentExpression	"* arg1 = strchr ( arg , ' ' )"		915491	2		=			
ANR	916007	Identifier	arg1		915491	0					
ANR	916008	CallExpression	"strchr ( arg , ' ' )"		915491	1					
ANR	916009	Callee	strchr		915491	0					
ANR	916010	Identifier	strchr		915491	0					
ANR	916011	ArgumentList	arg		915491	1					
ANR	916012	Argument	arg		915491	0					
ANR	916013	Identifier	arg		915491	0					
ANR	916014	Argument	' '		915491	1					
ANR	916015	PrimaryExpression	' '		915491	0					
ANR	916016	IfStatement	if ( arg1 )		915491	11					
ANR	916017	Condition	arg1	497:5:14888:14891	915491	0	True				
ANR	916018	Identifier	arg1		915491	0					
ANR	916019	CompoundStatement		77:2:2144:2185	915491	1					
ANR	916020	ExpressionStatement	* arg1 = 0	498:2:14898:14907	915491	0	True				
ANR	916021	AssignmentExpression	* arg1 = 0		915491	0		=			
ANR	916022	UnaryOperationExpression	* arg1		915491	0					
ANR	916023	UnaryOperator	*		915491	0					
ANR	916024	Identifier	arg1		915491	1					
ANR	916025	PrimaryExpression	0		915491	1					
ANR	916026	IdentifierDeclStatement	const char * a1 = r_str_trim_ro ( arg1 + 1 ) ;	499:2:14911:14952	915491	1	True				
ANR	916027	IdentifierDecl	* a1 = r_str_trim_ro ( arg1 + 1 )		915491	0					
ANR	916028	IdentifierDeclType	const char *		915491	0					
ANR	916029	Identifier	a1		915491	1					
ANR	916030	AssignmentExpression	* a1 = r_str_trim_ro ( arg1 + 1 )		915491	2		=			
ANR	916031	Identifier	a1		915491	0					
ANR	916032	CallExpression	r_str_trim_ro ( arg1 + 1 )		915491	1					
ANR	916033	Callee	r_str_trim_ro		915491	0					
ANR	916034	Identifier	r_str_trim_ro		915491	0					
ANR	916035	ArgumentList	arg1 + 1		915491	1					
ANR	916036	Argument	arg1 + 1		915491	0					
ANR	916037	AdditiveExpression	arg1 + 1		915491	0		+			
ANR	916038	Identifier	arg1		915491	0					
ANR	916039	PrimaryExpression	1		915491	1					
ANR	916040	ExpressionStatement	"r_flag_tags_set ( core -> flags , arg , a1 )"	500:2:14956:14994	915491	2	True				
ANR	916041	CallExpression	"r_flag_tags_set ( core -> flags , arg , a1 )"		915491	0					
ANR	916042	Callee	r_flag_tags_set		915491	0					
ANR	916043	Identifier	r_flag_tags_set		915491	0					
ANR	916044	ArgumentList	core -> flags		915491	1					
ANR	916045	Argument	core -> flags		915491	0					
ANR	916046	PtrMemberAccess	core -> flags		915491	0					
ANR	916047	Identifier	core		915491	0					
ANR	916048	Identifier	flags		915491	1					
ANR	916049	Argument	arg		915491	1					
ANR	916050	Identifier	arg		915491	0					
ANR	916051	Argument	a1		915491	2					
ANR	916052	Identifier	a1		915491	0					
ANR	916053	ElseStatement	else		915491	0					
ANR	916054	CompoundStatement		82:2:2279:2328	915491	0					
ANR	916055	IdentifierDeclStatement	RListIter * iter ;	502:2:15008:15023	915491	0	True				
ANR	916056	IdentifierDecl	* iter		915491	0					
ANR	916057	IdentifierDeclType	RListIter *		915491	0					
ANR	916058	Identifier	iter		915491	1					
ANR	916059	IdentifierDeclStatement	RFlagItem * flag ;	503:2:15027:15042	915491	1	True				
ANR	916060	IdentifierDecl	* flag		915491	0					
ANR	916061	IdentifierDeclType	RFlagItem *		915491	0					
ANR	916062	Identifier	flag		915491	1					
ANR	916063	IdentifierDeclStatement	"RList * flags = r_flag_tags_get ( core -> flags , arg ) ;"	504:2:15046:15095	915491	2	True				
ANR	916064	IdentifierDecl	"* flags = r_flag_tags_get ( core -> flags , arg )"		915491	0					
ANR	916065	IdentifierDeclType	RList *		915491	0					
ANR	916066	Identifier	flags		915491	1					
ANR	916067	AssignmentExpression	"* flags = r_flag_tags_get ( core -> flags , arg )"		915491	2		=			
ANR	916068	Identifier	flags		915491	0					
ANR	916069	CallExpression	"r_flag_tags_get ( core -> flags , arg )"		915491	1					
ANR	916070	Callee	r_flag_tags_get		915491	0					
ANR	916071	Identifier	r_flag_tags_get		915491	0					
ANR	916072	ArgumentList	core -> flags		915491	1					
ANR	916073	Argument	core -> flags		915491	0					
ANR	916074	PtrMemberAccess	core -> flags		915491	0					
ANR	916075	Identifier	core		915491	0					
ANR	916076	Identifier	flags		915491	1					
ANR	916077	Argument	arg		915491	1					
ANR	916078	Identifier	arg		915491	0					
ANR	916079	SwitchStatement	switch ( mode )		915491	3					
ANR	916080	Condition	mode	505:10:15107:15110	915491	0	True				
ANR	916081	Identifier	mode		915491	0					
ANR	916082	CompoundStatement		83:16:2346:2346	915491	1					
ANR	916083	Label	case 'n' :	506:2:15117:15125	915491	0	True				
ANR	916084	Statement	r_list_foreach	507:3:15130:15143	915491	1	True				
ANR	916085	Statement	(	507:18:15145:15145	915491	2	True				
ANR	916086	Statement	flags	507:19:15146:15150	915491	3	True				
ANR	916087	Statement	","	507:24:15151:15151	915491	4	True				
ANR	916088	Statement	iter	507:26:15153:15156	915491	5	True				
ANR	916089	Statement	","	507:30:15157:15157	915491	6	True				
ANR	916090	Statement	flag	507:32:15159:15162	915491	7	True				
ANR	916091	Statement	)	507:36:15163:15163	915491	8	True				
ANR	916092	CompoundStatement		85:38:2398:2398	915491	9					
ANR	916093	Statement	r_cons_printf	509:4:15228:15240	915491	0	True				
ANR	916094	Statement	(	509:18:15242:15242	915491	1	True				
ANR	916095	Statement	"""0x%08"""	509:19:15243:15249	915491	2	True				
ANR	916096	Statement	PFMT64x	509:26:15250:15256	915491	3	True				
ANR	916097	Statement	"""  %s\\n"""	509:33:15257:15264	915491	4	True				
ANR	916098	Statement	","	509:41:15265:15265	915491	5	True				
ANR	916099	Statement	flag	509:43:15267:15270	915491	6	True				
ANR	916100	Statement	->	509:47:15271:15272	915491	7	True				
ANR	916101	Statement	offset	509:49:15273:15278	915491	8	True				
ANR	916102	Statement	","	509:55:15279:15279	915491	9	True				
ANR	916103	Statement	flag	509:57:15281:15284	915491	10	True				
ANR	916104	Statement	->	509:61:15285:15286	915491	11	True				
ANR	916105	Statement	name	509:63:15287:15290	915491	12	True				
ANR	916106	Statement	)	509:67:15291:15291	915491	13	True				
ANR	916107	ExpressionStatement		509:68:15292:15292	915491	14	True				
ANR	916108	BreakStatement	break ;	511:3:15302:15307	915491	10	True				
ANR	916109	Label	default :	512:2:15311:15318	915491	11	True				
ANR	916110	Identifier	default		915491	0					
ANR	916111	Statement	r_list_foreach	513:3:15323:15336	915491	12	True				
ANR	916112	Statement	(	513:18:15338:15338	915491	13	True				
ANR	916113	Statement	flags	513:19:15339:15343	915491	14	True				
ANR	916114	Statement	","	513:24:15344:15344	915491	15	True				
ANR	916115	Statement	iter	513:26:15346:15349	915491	16	True				
ANR	916116	Statement	","	513:30:15350:15350	915491	17	True				
ANR	916117	Statement	flag	513:32:15352:15355	915491	18	True				
ANR	916118	Statement	)	513:36:15356:15356	915491	19	True				
ANR	916119	CompoundStatement		91:38:2591:2591	915491	20					
ANR	916120	Statement	r_cons_printf	514:4:15364:15376	915491	0	True				
ANR	916121	Statement	(	514:18:15378:15378	915491	1	True				
ANR	916122	Statement	"""0x%08"""	514:19:15379:15385	915491	2	True				
ANR	916123	Statement	PFMT64x	514:26:15386:15392	915491	3	True				
ANR	916124	Statement	"""\\n"""	514:33:15393:15396	915491	4	True				
ANR	916125	Statement	","	514:37:15397:15397	915491	5	True				
ANR	916126	Statement	flag	514:39:15399:15402	915491	6	True				
ANR	916127	Statement	->	514:43:15403:15404	915491	7	True				
ANR	916128	Statement	offset	514:45:15405:15410	915491	8	True				
ANR	916129	Statement	)	514:51:15411:15411	915491	9	True				
ANR	916130	ExpressionStatement		514:52:15412:15412	915491	10	True				
ANR	916131	BreakStatement	break ;	516:3:15422:15427	915491	21	True				
ANR	916132	ExpressionStatement	free ( inp )	519:1:15437:15447	915491	12	True				
ANR	916133	CallExpression	free ( inp )		915491	0					
ANR	916134	Callee	free		915491	0					
ANR	916135	Identifier	free		915491	0					
ANR	916136	ArgumentList	inp		915491	1					
ANR	916137	Argument	inp		915491	0					
ANR	916138	Identifier	inp		915491	0					
ANR	916139	ReturnType	static void		915491	1					
ANR	916140	Identifier	cmd_flag_tags		915491	2					
ANR	916141	ParameterList	"RCore * core , const char * input"		915491	3					
ANR	916142	Parameter	RCore * core	423:26:12734:12744	915491	0	True				
ANR	916143	ParameterType	RCore *		915491	0					
ANR	916144	Identifier	core		915491	1					
ANR	916145	Parameter	const char * input	423:39:12747:12763	915491	1	True				
ANR	916146	ParameterType	const char *		915491	0					
ANR	916147	Identifier	input		915491	1					
ANR	916148	CFGEntryNode	ENTRY		915491		True				
ANR	916149	CFGExitNode	EXIT		915491		True				
ANR	916150	Symbol	flag		915491						
ANR	916151	Symbol	pj_string		915491						
ANR	916152	Symbol	* input		915491						
ANR	916153	Symbol	* core		915491						
ANR	916154	Symbol	flags		915491						
ANR	916155	Symbol	strchr		915491						
ANR	916156	Symbol	IS_WHITESPACE		915491						
ANR	916157	Symbol	* arg1		915491						
ANR	916158	Symbol	* core -> flags		915491						
ANR	916159	Symbol	mode		915491						
ANR	916160	Symbol	arg		915491						
ANR	916161	Symbol	r_flag_tags_get		915491						
ANR	916162	Symbol	tag		915491						
ANR	916163	Symbol	sdb_fmt		915491						
ANR	916164	Symbol	* * core		915491						
ANR	916165	Symbol	flg		915491						
ANR	916166	Symbol	NULL		915491						
ANR	916167	Symbol	r_flag_tags_list		915491						
ANR	916168	Symbol	iter2		915491						
ANR	916169	Symbol	iter		915491						
ANR	916170	Symbol	inp		915491						
ANR	916171	Symbol	core -> flags		915491						
ANR	916172	Symbol	sdb_get		915491						
ANR	916173	Symbol	list		915491						
ANR	916174	Symbol	a1		915491						
ANR	916175	Symbol	core		915491						
ANR	916176	Symbol	input		915491						
ANR	916177	Symbol	arg1		915491						
ANR	916178	Symbol	core -> flags -> tags		915491						
ANR	916179	Symbol	r_str_trim_ro		915491						
ANR	916180	Symbol	pj_new		915491						
ANR	916181	Symbol	pj		915491						
ANR	916182	Symbol	strdup		915491						
ANR	916183	Symbol	* arg		915491						
ANR	916184	ClassDef	rename_flag_t	522:0:15452:15519							
ANR	916185	DeclStmt									
ANR	916186	Decl							RCore	RCore *	core
ANR	916187	DeclStmt									
ANR	916188	Decl							const char	const char *	pfx
ANR	916189	DeclStmt									
ANR	916190	Decl							int	int	count
ANR	916191	Function	rename_flag_ordinal	528:0:15523:15812							
ANR	916192	FunctionDef	"rename_flag_ordinal (RFlagItem * fi , void * user)"		916191	0					
ANR	916193	CompoundStatement		528:59:15582:15812	916191	0					
ANR	916194	IdentifierDeclStatement	struct rename_flag_t * u = ( struct rename_flag_t * ) user ;	529:1:15585:15639	916191	0	True				
ANR	916195	IdentifierDecl	* u = ( struct rename_flag_t * ) user		916191	0					
ANR	916196	IdentifierDeclType	struct rename_flag_t *		916191	0					
ANR	916197	Identifier	u		916191	1					
ANR	916198	AssignmentExpression	* u = ( struct rename_flag_t * ) user		916191	2		=			
ANR	916199	Identifier	u		916191	0					
ANR	916200	CastExpression	( struct rename_flag_t * ) user		916191	1					
ANR	916201	CastTarget	struct rename_flag_t *		916191	0					
ANR	916202	Identifier	user		916191	1					
ANR	916203	IdentifierDeclStatement	"char * newName = r_str_newf ( ""%s%d"" , u -> pfx , u -> count ++ ) ;"	530:1:15642:15697	916191	1	True				
ANR	916204	IdentifierDecl	"* newName = r_str_newf ( ""%s%d"" , u -> pfx , u -> count ++ )"		916191	0					
ANR	916205	IdentifierDeclType	char *		916191	0					
ANR	916206	Identifier	newName		916191	1					
ANR	916207	AssignmentExpression	"* newName = r_str_newf ( ""%s%d"" , u -> pfx , u -> count ++ )"		916191	2		=			
ANR	916208	Identifier	newName		916191	0					
ANR	916209	CallExpression	"r_str_newf ( ""%s%d"" , u -> pfx , u -> count ++ )"		916191	1					
ANR	916210	Callee	r_str_newf		916191	0					
ANR	916211	Identifier	r_str_newf		916191	0					
ANR	916212	ArgumentList	"""%s%d"""		916191	1					
ANR	916213	Argument	"""%s%d"""		916191	0					
ANR	916214	PrimaryExpression	"""%s%d"""		916191	0					
ANR	916215	Argument	u -> pfx		916191	1					
ANR	916216	PtrMemberAccess	u -> pfx		916191	0					
ANR	916217	Identifier	u		916191	0					
ANR	916218	Identifier	pfx		916191	1					
ANR	916219	Argument	u -> count ++		916191	2					
ANR	916220	PostIncDecOperationExpression	u -> count ++		916191	0					
ANR	916221	PtrMemberAccess	u -> count		916191	0					
ANR	916222	Identifier	u		916191	0					
ANR	916223	Identifier	count		916191	1					
ANR	916224	IncDec	++		916191	1					
ANR	916225	IfStatement	if ( ! newName )		916191	2					
ANR	916226	Condition	! newName	531:5:15704:15711	916191	0	True				
ANR	916227	UnaryOperationExpression	! newName		916191	0					
ANR	916228	UnaryOperator	!		916191	0					
ANR	916229	Identifier	newName		916191	1					
ANR	916230	CompoundStatement		4:15:131:131	916191	1					
ANR	916231	ReturnStatement	return false ;	532:2:15718:15730	916191	0	True				
ANR	916232	Identifier	false		916191	0					
ANR	916233	ExpressionStatement	"r_flag_rename ( u -> core -> flags , fi , newName )"	534:1:15736:15779	916191	3	True				
ANR	916234	CallExpression	"r_flag_rename ( u -> core -> flags , fi , newName )"		916191	0					
ANR	916235	Callee	r_flag_rename		916191	0					
ANR	916236	Identifier	r_flag_rename		916191	0					
ANR	916237	ArgumentList	u -> core -> flags		916191	1					
ANR	916238	Argument	u -> core -> flags		916191	0					
ANR	916239	PtrMemberAccess	u -> core -> flags		916191	0					
ANR	916240	PtrMemberAccess	u -> core		916191	0					
ANR	916241	Identifier	u		916191	0					
ANR	916242	Identifier	core		916191	1					
ANR	916243	Identifier	flags		916191	1					
ANR	916244	Argument	fi		916191	1					
ANR	916245	Identifier	fi		916191	0					
ANR	916246	Argument	newName		916191	2					
ANR	916247	Identifier	newName		916191	0					
ANR	916248	ExpressionStatement	free ( newName )	535:1:15782:15796	916191	4	True				
ANR	916249	CallExpression	free ( newName )		916191	0					
ANR	916250	Callee	free		916191	0					
ANR	916251	Identifier	free		916191	0					
ANR	916252	ArgumentList	newName		916191	1					
ANR	916253	Argument	newName		916191	0					
ANR	916254	Identifier	newName		916191	0					
ANR	916255	ReturnStatement	return true ;	536:1:15799:15810	916191	5	True				
ANR	916256	Identifier	true		916191	0					
ANR	916257	ReturnType	static bool		916191	1					
ANR	916258	Identifier	rename_flag_ordinal		916191	2					
ANR	916259	ParameterList	"RFlagItem * fi , void * user"		916191	3					
ANR	916260	Parameter	RFlagItem * fi	528:32:15555:15567	916191	0	True				
ANR	916261	ParameterType	RFlagItem *		916191	0					
ANR	916262	Identifier	fi		916191	1					
ANR	916263	Parameter	void * user	528:47:15570:15579	916191	1	True				
ANR	916264	ParameterType	void *		916191	0					
ANR	916265	Identifier	user		916191	1					
ANR	916266	CFGEntryNode	ENTRY		916191		True				
ANR	916267	CFGExitNode	EXIT		916191		True				
ANR	916268	Symbol	u -> core		916191						
ANR	916269	Symbol	fi		916191						
ANR	916270	Symbol	false		916191						
ANR	916271	Symbol	u -> core -> flags		916191						
ANR	916272	Symbol	u -> pfx		916191						
ANR	916273	Symbol	r_str_newf		916191						
ANR	916274	Symbol	u -> count		916191						
ANR	916275	Symbol	newName		916191						
ANR	916276	Symbol	u		916191						
ANR	916277	Symbol	* * u		916191						
ANR	916278	Symbol	true		916191						
ANR	916279	Symbol	* u -> core		916191						
ANR	916280	Symbol	user		916191						
ANR	916281	Symbol	* u		916191						
ANR	916282	Function	flag_ordinals	539:0:15815:16144							
ANR	916283	FunctionDef	"flag_ordinals (RCore * core , const char * str)"		916282	0					
ANR	916284	CompoundStatement		539:56:15871:16144	916282	0					
ANR	916285	IdentifierDeclStatement	const char * glob = r_str_trim_ro ( str ) ;	540:1:15874:15912	916282	0	True				
ANR	916286	IdentifierDecl	* glob = r_str_trim_ro ( str )		916282	0					
ANR	916287	IdentifierDeclType	const char *		916282	0					
ANR	916288	Identifier	glob		916282	1					
ANR	916289	AssignmentExpression	* glob = r_str_trim_ro ( str )		916282	2		=			
ANR	916290	Identifier	glob		916282	0					
ANR	916291	CallExpression	r_str_trim_ro ( str )		916282	1					
ANR	916292	Callee	r_str_trim_ro		916282	0					
ANR	916293	Identifier	r_str_trim_ro		916282	0					
ANR	916294	ArgumentList	str		916282	1					
ANR	916295	Argument	str		916282	0					
ANR	916296	Identifier	str		916282	0					
ANR	916297	IdentifierDeclStatement	char * pfx = strdup ( glob ) ;	541:1:15915:15940	916282	1	True				
ANR	916298	IdentifierDecl	* pfx = strdup ( glob )		916282	0					
ANR	916299	IdentifierDeclType	char *		916282	0					
ANR	916300	Identifier	pfx		916282	1					
ANR	916301	AssignmentExpression	* pfx = strdup ( glob )		916282	2		=			
ANR	916302	Identifier	pfx		916282	0					
ANR	916303	CallExpression	strdup ( glob )		916282	1					
ANR	916304	Callee	strdup		916282	0					
ANR	916305	Identifier	strdup		916282	0					
ANR	916306	ArgumentList	glob		916282	1					
ANR	916307	Argument	glob		916282	0					
ANR	916308	Identifier	glob		916282	0					
ANR	916309	IdentifierDeclStatement	"char * p = strchr ( pfx , '*' ) ;"	542:1:15943:15970	916282	2	True				
ANR	916310	IdentifierDecl	"* p = strchr ( pfx , '*' )"		916282	0					
ANR	916311	IdentifierDeclType	char *		916282	0					
ANR	916312	Identifier	p		916282	1					
ANR	916313	AssignmentExpression	"* p = strchr ( pfx , '*' )"		916282	2		=			
ANR	916314	Identifier	p		916282	0					
ANR	916315	CallExpression	"strchr ( pfx , '*' )"		916282	1					
ANR	916316	Callee	strchr		916282	0					
ANR	916317	Identifier	strchr		916282	0					
ANR	916318	ArgumentList	pfx		916282	1					
ANR	916319	Argument	pfx		916282	0					
ANR	916320	Identifier	pfx		916282	0					
ANR	916321	Argument	'*'		916282	1					
ANR	916322	PrimaryExpression	'*'		916282	0					
ANR	916323	IfStatement	if ( p )		916282	3					
ANR	916324	Condition	p	543:5:15977:15977	916282	0	True				
ANR	916325	Identifier	p		916282	0					
ANR	916326	CompoundStatement		5:8:108:108	916282	1					
ANR	916327	ExpressionStatement	* p = 0	544:2:15984:15990	916282	0	True				
ANR	916328	AssignmentExpression	* p = 0		916282	0		=			
ANR	916329	UnaryOperationExpression	* p		916282	0					
ANR	916330	UnaryOperator	*		916282	0					
ANR	916331	Identifier	p		916282	1					
ANR	916332	PrimaryExpression	0		916282	1					
ANR	916333	Statement	struct	547:1:15997:16002	916282	4	True				
ANR	916334	Statement	rename_flag_t	547:8:16004:16016	916282	5	True				
ANR	916335	Statement	u	547:22:16018:16018	916282	6	True				
ANR	916336	Statement	=	547:24:16020:16020	916282	7	True				
ANR	916337	CompoundStatement		9:26:150:150	916282	8					
ANR	916338	Statement	.	547:28:16024:16024	916282	0	True				
ANR	916339	Statement	core	547:29:16025:16028	916282	1	True				
ANR	916340	Statement	=	547:34:16030:16030	916282	2	True				
ANR	916341	Statement	core	547:36:16032:16035	916282	3	True				
ANR	916342	Statement	","	547:40:16036:16036	916282	4	True				
ANR	916343	Statement	.	547:42:16038:16038	916282	5	True				
ANR	916344	Statement	pfx	547:43:16039:16041	916282	6	True				
ANR	916345	Statement	=	547:47:16043:16043	916282	7	True				
ANR	916346	Statement	pfx	547:49:16045:16047	916282	8	True				
ANR	916347	Statement	","	547:52:16048:16048	916282	9	True				
ANR	916348	Statement	.	547:54:16050:16050	916282	10	True				
ANR	916349	Statement	count	547:55:16051:16055	916282	11	True				
ANR	916350	Statement	=	547:61:16057:16057	916282	12	True				
ANR	916351	Statement	0	547:63:16059:16059	916282	13	True				
ANR	916352	ExpressionStatement		547:66:16062:16062	916282	9	True				
ANR	916353	ExpressionStatement	"r_flag_foreach_glob ( core -> flags , glob , rename_flag_ordinal , & u )"	548:1:16065:16129	916282	10	True				
ANR	916354	CallExpression	"r_flag_foreach_glob ( core -> flags , glob , rename_flag_ordinal , & u )"		916282	0					
ANR	916355	Callee	r_flag_foreach_glob		916282	0					
ANR	916356	Identifier	r_flag_foreach_glob		916282	0					
ANR	916357	ArgumentList	core -> flags		916282	1					
ANR	916358	Argument	core -> flags		916282	0					
ANR	916359	PtrMemberAccess	core -> flags		916282	0					
ANR	916360	Identifier	core		916282	0					
ANR	916361	Identifier	flags		916282	1					
ANR	916362	Argument	glob		916282	1					
ANR	916363	Identifier	glob		916282	0					
ANR	916364	Argument	rename_flag_ordinal		916282	2					
ANR	916365	Identifier	rename_flag_ordinal		916282	0					
ANR	916366	Argument	& u		916282	3					
ANR	916367	UnaryOperationExpression	& u		916282	0					
ANR	916368	UnaryOperator	&		916282	0					
ANR	916369	Identifier	u		916282	1					
ANR	916370	ExpressionStatement	free ( pfx )	549:1:16132:16142	916282	11	True				
ANR	916371	CallExpression	free ( pfx )		916282	0					
ANR	916372	Callee	free		916282	0					
ANR	916373	Identifier	free		916282	0					
ANR	916374	ArgumentList	pfx		916282	1					
ANR	916375	Argument	pfx		916282	0					
ANR	916376	Identifier	pfx		916282	0					
ANR	916377	ReturnType	static void		916282	1					
ANR	916378	Identifier	flag_ordinals		916282	2					
ANR	916379	ParameterList	"RCore * core , const char * str"		916282	3					
ANR	916380	Parameter	RCore * core	539:26:15841:15851	916282	0	True				
ANR	916381	ParameterType	RCore *		916282	0					
ANR	916382	Identifier	core		916282	1					
ANR	916383	Parameter	const char * str	539:39:15854:15868	916282	1	True				
ANR	916384	ParameterType	const char *		916282	0					
ANR	916385	Identifier	str		916282	1					
ANR	916386	CFGEntryNode	ENTRY		916282		True				
ANR	916387	CFGExitNode	EXIT		916282		True				
ANR	916388	Symbol	pfx		916282						
ANR	916389	Symbol	rename_flag_ordinal		916282						
ANR	916390	Symbol	glob		916282						
ANR	916391	Symbol	* core		916282						
ANR	916392	Symbol	strchr		916282						
ANR	916393	Symbol	core -> flags		916282						
ANR	916394	Symbol	str		916282						
ANR	916395	Symbol	p		916282						
ANR	916396	Symbol	core		916282						
ANR	916397	Symbol	r_str_trim_ro		916282						
ANR	916398	Symbol	* p		916282						
ANR	916399	Symbol	strdup		916282						
ANR	916400	Symbol	& u		916282						
ANR	916401	Function	cmpflag	552:0:16147:16285							
ANR	916402	FunctionDef	"cmpflag (const void * _a , const void * _b)"		916401	0					
ANR	916403	CompoundStatement		552:51:16198:16285	916401	0					
ANR	916404	IdentifierDeclStatement	"const RFlagItem * flag1 = _a , * flag2 = _b ;"	553:1:16201:16242	916401	0	True				
ANR	916405	IdentifierDecl	* flag1 = _a		916401	0					
ANR	916406	IdentifierDeclType	const RFlagItem *		916401	0					
ANR	916407	Identifier	flag1		916401	1					
ANR	916408	AssignmentExpression	* flag1 = _a		916401	2		=			
ANR	916409	Identifier	_a		916401	0					
ANR	916410	Identifier	_a		916401	1					
ANR	916411	IdentifierDecl	* flag2 = _b		916401	1					
ANR	916412	IdentifierDeclType	const RFlagItem *		916401	0					
ANR	916413	Identifier	flag2		916401	1					
ANR	916414	AssignmentExpression	* flag2 = _b		916401	2		=			
ANR	916415	Identifier	_b		916401	0					
ANR	916416	Identifier	_b		916401	1					
ANR	916417	ReturnStatement	return ( flag1 -> offset - flag2 -> offset ) ;	554:1:16245:16283	916401	1	True				
ANR	916418	AdditiveExpression	flag1 -> offset - flag2 -> offset		916401	0		-			
ANR	916419	PtrMemberAccess	flag1 -> offset		916401	0					
ANR	916420	Identifier	flag1		916401	0					
ANR	916421	Identifier	offset		916401	1					
ANR	916422	PtrMemberAccess	flag2 -> offset		916401	1					
ANR	916423	Identifier	flag2		916401	0					
ANR	916424	Identifier	offset		916401	1					
ANR	916425	ReturnType	static int		916401	1					
ANR	916426	Identifier	cmpflag		916401	2					
ANR	916427	ParameterList	"const void * _a , const void * _b"		916401	3					
ANR	916428	Parameter	const void * _a	552:19:16166:16179	916401	0	True				
ANR	916429	ParameterType	const void *		916401	0					
ANR	916430	Identifier	_a		916401	1					
ANR	916431	Parameter	const void * _b	552:35:16182:16195	916401	1	True				
ANR	916432	ParameterType	const void *		916401	0					
ANR	916433	Identifier	_b		916401	1					
ANR	916434	CFGEntryNode	ENTRY		916401		True				
ANR	916435	CFGExitNode	EXIT		916401		True				
ANR	916436	Symbol	* flag2		916401						
ANR	916437	Symbol	_a		916401						
ANR	916438	Symbol	_b		916401						
ANR	916439	Symbol	flag1 -> offset		916401						
ANR	916440	Symbol	flag2		916401						
ANR	916441	Symbol	flag1		916401						
ANR	916442	Symbol	flag2 -> offset		916401						
ANR	916443	Symbol	* flag1		916401						
ANR	916444	ClassDef	find_flag_t	557:0:16288:16336							
ANR	916445	DeclStmt									
ANR	916446	Decl							RFlagItem	RFlagItem *	win
ANR	916447	DeclStmt									
ANR	916448	Decl							ut64	ut64	at
ANR	916449	Function	find_flag_after	562:0:16340:16561							
ANR	916450	FunctionDef	"find_flag_after (RFlagItem * flag , void * user)"		916449	0					
ANR	916451	CompoundStatement		562:57:16397:16561	916449	0					
ANR	916452	IdentifierDeclStatement	struct find_flag_t * u = ( struct find_flag_t * ) user ;	563:1:16400:16450	916449	0	True				
ANR	916453	IdentifierDecl	* u = ( struct find_flag_t * ) user		916449	0					
ANR	916454	IdentifierDeclType	struct find_flag_t *		916449	0					
ANR	916455	Identifier	u		916449	1					
ANR	916456	AssignmentExpression	* u = ( struct find_flag_t * ) user		916449	2		=			
ANR	916457	Identifier	u		916449	0					
ANR	916458	CastExpression	( struct find_flag_t * ) user		916449	1					
ANR	916459	CastTarget	struct find_flag_t *		916449	0					
ANR	916460	Identifier	user		916449	1					
ANR	916461	IfStatement	if ( flag -> offset > u -> at && ( ! u -> win || flag -> offset < u -> win -> offset ) )		916449	1					
ANR	916462	Condition	flag -> offset > u -> at && ( ! u -> win || flag -> offset < u -> win -> offset )	564:5:16457:16522	916449	0	True				
ANR	916463	AndExpression	flag -> offset > u -> at && ( ! u -> win || flag -> offset < u -> win -> offset )		916449	0		&&			
ANR	916464	RelationalExpression	flag -> offset > u -> at		916449	0		>			
ANR	916465	PtrMemberAccess	flag -> offset		916449	0					
ANR	916466	Identifier	flag		916449	0					
ANR	916467	Identifier	offset		916449	1					
ANR	916468	PtrMemberAccess	u -> at		916449	1					
ANR	916469	Identifier	u		916449	0					
ANR	916470	Identifier	at		916449	1					
ANR	916471	OrExpression	! u -> win || flag -> offset < u -> win -> offset		916449	1		||			
ANR	916472	UnaryOperationExpression	! u -> win		916449	0					
ANR	916473	UnaryOperator	!		916449	0					
ANR	916474	PtrMemberAccess	u -> win		916449	1					
ANR	916475	Identifier	u		916449	0					
ANR	916476	Identifier	win		916449	1					
ANR	916477	RelationalExpression	flag -> offset < u -> win -> offset		916449	1		<			
ANR	916478	PtrMemberAccess	flag -> offset		916449	0					
ANR	916479	Identifier	flag		916449	0					
ANR	916480	Identifier	offset		916449	1					
ANR	916481	PtrMemberAccess	u -> win -> offset		916449	1					
ANR	916482	PtrMemberAccess	u -> win		916449	0					
ANR	916483	Identifier	u		916449	0					
ANR	916484	Identifier	win		916449	1					
ANR	916485	Identifier	offset		916449	1					
ANR	916486	CompoundStatement		3:73:127:127	916449	1					
ANR	916487	ExpressionStatement	u -> win = flag	565:2:16529:16542	916449	0	True				
ANR	916488	AssignmentExpression	u -> win = flag		916449	0		=			
ANR	916489	PtrMemberAccess	u -> win		916449	0					
ANR	916490	Identifier	u		916449	0					
ANR	916491	Identifier	win		916449	1					
ANR	916492	Identifier	flag		916449	1					
ANR	916493	ReturnStatement	return true ;	567:1:16548:16559	916449	2	True				
ANR	916494	Identifier	true		916449	0					
ANR	916495	ReturnType	static bool		916449	1					
ANR	916496	Identifier	find_flag_after		916449	2					
ANR	916497	ParameterList	"RFlagItem * flag , void * user"		916449	3					
ANR	916498	Parameter	RFlagItem * flag	562:28:16368:16382	916449	0	True				
ANR	916499	ParameterType	RFlagItem *		916449	0					
ANR	916500	Identifier	flag		916449	1					
ANR	916501	Parameter	void * user	562:45:16385:16394	916449	1	True				
ANR	916502	ParameterType	void *		916449	0					
ANR	916503	Identifier	user		916449	1					
ANR	916504	CFGEntryNode	ENTRY		916449		True				
ANR	916505	CFGExitNode	EXIT		916449		True				
ANR	916506	Symbol	* u -> win		916449						
ANR	916507	Symbol	flag		916449						
ANR	916508	Symbol	u		916449						
ANR	916509	Symbol	* * u		916449						
ANR	916510	Symbol	true		916449						
ANR	916511	Symbol	u -> win -> offset		916449						
ANR	916512	Symbol	flag -> offset		916449						
ANR	916513	Symbol	* flag		916449						
ANR	916514	Symbol	user		916449						
ANR	916515	Symbol	u -> win		916449						
ANR	916516	Symbol	u -> at		916449						
ANR	916517	Symbol	* u		916449						
ANR	916518	Function	find_flag_after_foreach	570:0:16564:16888							
ANR	916519	FunctionDef	"find_flag_after_foreach (RFlagItem * flag , void * user)"		916518	0					
ANR	916520	CompoundStatement		570:65:16629:16888	916518	0					
ANR	916521	IfStatement	if ( flag -> size != 0 )		916518	0					
ANR	916522	Condition	flag -> size != 0	571:5:16636:16650	916518	0	True				
ANR	916523	EqualityExpression	flag -> size != 0		916518	0		!=			
ANR	916524	PtrMemberAccess	flag -> size		916518	0					
ANR	916525	Identifier	flag		916518	0					
ANR	916526	Identifier	size		916518	1					
ANR	916527	PrimaryExpression	0		916518	1					
ANR	916528	CompoundStatement		2:22:23:23	916518	1					
ANR	916529	ReturnStatement	return true ;	572:2:16657:16668	916518	0	True				
ANR	916530	Identifier	true		916518	0					
ANR	916531	IdentifierDeclStatement	RFlag * flags = ( RFlag * ) user ;	575:1:16675:16703	916518	1	True				
ANR	916532	IdentifierDecl	* flags = ( RFlag * ) user		916518	0					
ANR	916533	IdentifierDeclType	RFlag *		916518	0					
ANR	916534	Identifier	flags		916518	1					
ANR	916535	AssignmentExpression	* flags = ( RFlag * ) user		916518	2		=			
ANR	916536	Identifier	flags		916518	0					
ANR	916537	CastExpression	( RFlag * ) user		916518	1					
ANR	916538	CastTarget	RFlag *		916518	0					
ANR	916539	Identifier	user		916518	1					
ANR	916540	Statement	struct	576:1:16706:16711	916518	2	True				
ANR	916541	Statement	find_flag_t	576:8:16713:16723	916518	3	True				
ANR	916542	Statement	u	576:20:16725:16725	916518	4	True				
ANR	916543	Statement	=	576:22:16727:16727	916518	5	True				
ANR	916544	CompoundStatement		7:24:99:99	916518	6					
ANR	916545	Statement	.	576:26:16731:16731	916518	0	True				
ANR	916546	Statement	win	576:27:16732:16734	916518	1	True				
ANR	916547	Statement	=	576:31:16736:16736	916518	2	True				
ANR	916548	Statement	NULL	576:33:16738:16741	916518	3	True				
ANR	916549	Statement	","	576:37:16742:16742	916518	4	True				
ANR	916550	Statement	.	576:39:16744:16744	916518	5	True				
ANR	916551	Statement	at	576:40:16745:16746	916518	6	True				
ANR	916552	Statement	=	576:43:16748:16748	916518	7	True				
ANR	916553	Statement	flag	576:45:16750:16753	916518	8	True				
ANR	916554	Statement	->	576:49:16754:16755	916518	9	True				
ANR	916555	Statement	offset	576:51:16756:16761	916518	10	True				
ANR	916556	ExpressionStatement		576:59:16764:16764	916518	7	True				
ANR	916557	ExpressionStatement	"r_flag_foreach ( flags , find_flag_after , & u )"	577:1:16767:16810	916518	8	True				
ANR	916558	CallExpression	"r_flag_foreach ( flags , find_flag_after , & u )"		916518	0					
ANR	916559	Callee	r_flag_foreach		916518	0					
ANR	916560	Identifier	r_flag_foreach		916518	0					
ANR	916561	ArgumentList	flags		916518	1					
ANR	916562	Argument	flags		916518	0					
ANR	916563	Identifier	flags		916518	0					
ANR	916564	Argument	find_flag_after		916518	1					
ANR	916565	Identifier	find_flag_after		916518	0					
ANR	916566	Argument	& u		916518	2					
ANR	916567	UnaryOperationExpression	& u		916518	0					
ANR	916568	UnaryOperator	&		916518	0					
ANR	916569	Identifier	u		916518	1					
ANR	916570	IfStatement	if ( u . win )		916518	9					
ANR	916571	Condition	u . win	578:5:16817:16821	916518	0	True				
ANR	916572	MemberAccess	u . win		916518	0					
ANR	916573	Identifier	u		916518	0					
ANR	916574	Identifier	win		916518	1					
ANR	916575	CompoundStatement		9:12:194:194	916518	1					
ANR	916576	ExpressionStatement	flag -> size = u . win -> offset - flag -> offset	579:2:16828:16869	916518	0	True				
ANR	916577	AssignmentExpression	flag -> size = u . win -> offset - flag -> offset		916518	0		=			
ANR	916578	PtrMemberAccess	flag -> size		916518	0					
ANR	916579	Identifier	flag		916518	0					
ANR	916580	Identifier	size		916518	1					
ANR	916581	AdditiveExpression	u . win -> offset - flag -> offset		916518	1		-			
ANR	916582	PtrMemberAccess	u . win -> offset		916518	0					
ANR	916583	MemberAccess	u . win		916518	0					
ANR	916584	Identifier	u		916518	0					
ANR	916585	Identifier	win		916518	1					
ANR	916586	Identifier	offset		916518	1					
ANR	916587	PtrMemberAccess	flag -> offset		916518	1					
ANR	916588	Identifier	flag		916518	0					
ANR	916589	Identifier	offset		916518	1					
ANR	916590	ReturnStatement	return true ;	581:1:16875:16886	916518	10	True				
ANR	916591	Identifier	true		916518	0					
ANR	916592	ReturnType	static bool		916518	1					
ANR	916593	Identifier	find_flag_after_foreach		916518	2					
ANR	916594	ParameterList	"RFlagItem * flag , void * user"		916518	3					
ANR	916595	Parameter	RFlagItem * flag	570:36:16600:16614	916518	0	True				
ANR	916596	ParameterType	RFlagItem *		916518	0					
ANR	916597	Identifier	flag		916518	1					
ANR	916598	Parameter	void * user	570:53:16617:16626	916518	1	True				
ANR	916599	ParameterType	void *		916518	0					
ANR	916600	Identifier	user		916518	1					
ANR	916601	CFGEntryNode	ENTRY		916518		True				
ANR	916602	CFGExitNode	EXIT		916518		True				
ANR	916603	Symbol	flag		916518						
ANR	916604	Symbol	find_flag_after		916518						
ANR	916605	Symbol	* u . win		916518						
ANR	916606	Symbol	flags		916518						
ANR	916607	Symbol	u . win -> offset		916518						
ANR	916608	Symbol	u . win		916518						
ANR	916609	Symbol	u		916518						
ANR	916610	Symbol	true		916518						
ANR	916611	Symbol	& u		916518						
ANR	916612	Symbol	flag -> offset		916518						
ANR	916613	Symbol	* flag		916518						
ANR	916614	Symbol	user		916518						
ANR	916615	Symbol	flag -> size		916518						
ANR	916616	Symbol	* u		916518						
ANR	916617	Function	adjust_offset	584:0:16891:17013							
ANR	916618	FunctionDef	"adjust_offset (RFlagItem * flag , void * user)"		916617	0					
ANR	916619	CompoundStatement		584:55:16946:17013	916617	0					
ANR	916620	IdentifierDeclStatement	st64 base = * ( st64 * ) user ;	585:1:16949:16974	916617	0	True				
ANR	916621	IdentifierDecl	base = * ( st64 * ) user		916617	0					
ANR	916622	IdentifierDeclType	st64		916617	0					
ANR	916623	Identifier	base		916617	1					
ANR	916624	AssignmentExpression	base = * ( st64 * ) user		916617	2		=			
ANR	916625	Identifier	base		916617	0					
ANR	916626	UnaryOperationExpression	* ( st64 * ) user		916617	1					
ANR	916627	UnaryOperator	*		916617	0					
ANR	916628	CastExpression	( st64 * ) user		916617	1					
ANR	916629	CastTarget	st64 *		916617	0					
ANR	916630	Identifier	user		916617	1					
ANR	916631	ExpressionStatement	flag -> offset += base	586:1:16977:16997	916617	1	True				
ANR	916632	AssignmentExpression	flag -> offset += base		916617	0		+=			
ANR	916633	PtrMemberAccess	flag -> offset		916617	0					
ANR	916634	Identifier	flag		916617	0					
ANR	916635	Identifier	offset		916617	1					
ANR	916636	Identifier	base		916617	1					
ANR	916637	ReturnStatement	return true ;	587:1:17000:17011	916617	2	True				
ANR	916638	Identifier	true		916617	0					
ANR	916639	ReturnType	static bool		916617	1					
ANR	916640	Identifier	adjust_offset		916617	2					
ANR	916641	ParameterList	"RFlagItem * flag , void * user"		916617	3					
ANR	916642	Parameter	RFlagItem * flag	584:26:16917:16931	916617	0	True				
ANR	916643	ParameterType	RFlagItem *		916617	0					
ANR	916644	Identifier	flag		916617	1					
ANR	916645	Parameter	void * user	584:43:16934:16943	916617	1	True				
ANR	916646	ParameterType	void *		916617	0					
ANR	916647	Identifier	user		916617	1					
ANR	916648	CFGEntryNode	ENTRY		916617		True				
ANR	916649	CFGExitNode	EXIT		916617		True				
ANR	916650	Symbol	flag		916617						
ANR	916651	Symbol	* user		916617						
ANR	916652	Symbol	true		916617						
ANR	916653	Symbol	flag -> offset		916617						
ANR	916654	Symbol	* flag		916617						
ANR	916655	Symbol	user		916617						
ANR	916656	Symbol	* ( st64 * ) user		916617						
ANR	916657	Symbol	base		916617						
ANR	916658	Function	print_space_stack	590:0:17016:17606							
ANR	916659	FunctionDef	"print_space_stack (RFlag * f , int ordinal , const char * name , bool selected , PJ * pj , int mode)"		916658	0					
ANR	916660	CompoundStatement		590:104:17120:17606	916658	0					
ANR	916661	IdentifierDeclStatement	bool first = ordinal == 0 ;	591:1:17123:17148	916658	0	True				
ANR	916662	IdentifierDecl	first = ordinal == 0		916658	0					
ANR	916663	IdentifierDeclType	bool		916658	0					
ANR	916664	Identifier	first		916658	1					
ANR	916665	AssignmentExpression	first = ordinal == 0		916658	2		=			
ANR	916666	Identifier	first		916658	0					
ANR	916667	EqualityExpression	ordinal == 0		916658	1		==			
ANR	916668	Identifier	ordinal		916658	0					
ANR	916669	PrimaryExpression	0		916658	1					
ANR	916670	SwitchStatement	switch ( mode )		916658	1					
ANR	916671	Condition	mode	592:9:17159:17162	916658	0	True				
ANR	916672	Identifier	mode		916658	0					
ANR	916673	CompoundStatement		3:15:44:44	916658	1					
ANR	916674	Label	case 'j' :	593:1:17168:17176	916658	0	True				
ANR	916675	CompoundStatement		5:2:61:94	916658	1					
ANR	916676	IdentifierDeclStatement	char * ename = r_str_escape ( name ) ;	594:2:17182:17215	916658	0	True				
ANR	916677	IdentifierDecl	* ename = r_str_escape ( name )		916658	0					
ANR	916678	IdentifierDeclType	char *		916658	0					
ANR	916679	Identifier	ename		916658	1					
ANR	916680	AssignmentExpression	* ename = r_str_escape ( name )		916658	2		=			
ANR	916681	Identifier	ename		916658	0					
ANR	916682	CallExpression	r_str_escape ( name )		916658	1					
ANR	916683	Callee	r_str_escape		916658	0					
ANR	916684	Identifier	r_str_escape		916658	0					
ANR	916685	ArgumentList	name		916658	1					
ANR	916686	Argument	name		916658	0					
ANR	916687	Identifier	name		916658	0					
ANR	916688	IfStatement	if ( ! ename )		916658	1					
ANR	916689	Condition	! ename	595:6:17223:17228	916658	0	True				
ANR	916690	UnaryOperationExpression	! ename		916658	0					
ANR	916691	UnaryOperator	!		916658	0					
ANR	916692	Identifier	ename		916658	1					
ANR	916693	CompoundStatement		6:14:110:110	916658	1					
ANR	916694	ReturnStatement	return ;	596:3:17236:17242	916658	0	True				
ANR	916695	ExpressionStatement	pj_o ( pj )	599:2:17251:17260	916658	2	True				
ANR	916696	CallExpression	pj_o ( pj )		916658	0					
ANR	916697	Callee	pj_o		916658	0					
ANR	916698	Identifier	pj_o		916658	0					
ANR	916699	ArgumentList	pj		916658	1					
ANR	916700	Argument	pj		916658	0					
ANR	916701	Identifier	pj		916658	0					
ANR	916702	ExpressionStatement	"pj_ki ( pj , ""ordinal"" , ordinal )"	600:2:17264:17294	916658	3	True				
ANR	916703	CallExpression	"pj_ki ( pj , ""ordinal"" , ordinal )"		916658	0					
ANR	916704	Callee	pj_ki		916658	0					
ANR	916705	Identifier	pj_ki		916658	0					
ANR	916706	ArgumentList	pj		916658	1					
ANR	916707	Argument	pj		916658	0					
ANR	916708	Identifier	pj		916658	0					
ANR	916709	Argument	"""ordinal"""		916658	1					
ANR	916710	PrimaryExpression	"""ordinal"""		916658	0					
ANR	916711	Argument	ordinal		916658	2					
ANR	916712	Identifier	ordinal		916658	0					
ANR	916713	ExpressionStatement	"pj_ks ( pj , ""name"" , ename )"	601:2:17298:17323	916658	4	True				
ANR	916714	CallExpression	"pj_ks ( pj , ""name"" , ename )"		916658	0					
ANR	916715	Callee	pj_ks		916658	0					
ANR	916716	Identifier	pj_ks		916658	0					
ANR	916717	ArgumentList	pj		916658	1					
ANR	916718	Argument	pj		916658	0					
ANR	916719	Identifier	pj		916658	0					
ANR	916720	Argument	"""name"""		916658	1					
ANR	916721	PrimaryExpression	"""name"""		916658	0					
ANR	916722	Argument	ename		916658	2					
ANR	916723	Identifier	ename		916658	0					
ANR	916724	ExpressionStatement	"pj_kb ( pj , ""selected"" , selected )"	602:2:17327:17359	916658	5	True				
ANR	916725	CallExpression	"pj_kb ( pj , ""selected"" , selected )"		916658	0					
ANR	916726	Callee	pj_kb		916658	0					
ANR	916727	Identifier	pj_kb		916658	0					
ANR	916728	ArgumentList	pj		916658	1					
ANR	916729	Argument	pj		916658	0					
ANR	916730	Identifier	pj		916658	0					
ANR	916731	Argument	"""selected"""		916658	1					
ANR	916732	PrimaryExpression	"""selected"""		916658	0					
ANR	916733	Argument	selected		916658	2					
ANR	916734	Identifier	selected		916658	0					
ANR	916735	ExpressionStatement	pj_end ( pj )	603:2:17363:17374	916658	6	True				
ANR	916736	CallExpression	pj_end ( pj )		916658	0					
ANR	916737	Callee	pj_end		916658	0					
ANR	916738	Identifier	pj_end		916658	0					
ANR	916739	ArgumentList	pj		916658	1					
ANR	916740	Argument	pj		916658	0					
ANR	916741	Identifier	pj		916658	0					
ANR	916742	ExpressionStatement	free ( ename )	604:2:17378:17390	916658	7	True				
ANR	916743	CallExpression	free ( ename )		916658	0					
ANR	916744	Callee	free		916658	0					
ANR	916745	Identifier	free		916658	0					
ANR	916746	ArgumentList	ename		916658	1					
ANR	916747	Argument	ename		916658	0					
ANR	916748	Identifier	ename		916658	0					
ANR	916749	BreakStatement	break ;	605:2:17394:17399	916658	8	True				
ANR	916750	Label	case '*' :	607:1:17405:17413	916658	2	True				
ANR	916751	CompoundStatement		19:2:298:343	916658	3					
ANR	916752	IdentifierDeclStatement	"const char * fmt = first ? ""fs %s\\n"" : ""fs+%s\\n"" ;"	608:2:17419:17464	916658	0	True				
ANR	916753	IdentifierDecl	"* fmt = first ? ""fs %s\\n"" : ""fs+%s\\n"""		916658	0					
ANR	916754	IdentifierDeclType	const char *		916658	0					
ANR	916755	Identifier	fmt		916658	1					
ANR	916756	AssignmentExpression	"* fmt = first ? ""fs %s\\n"" : ""fs+%s\\n"""		916658	2		=			
ANR	916757	Identifier	fmt		916658	0					
ANR	916758	ConditionalExpression	"first ? ""fs %s\\n"" : ""fs+%s\\n"""		916658	1					
ANR	916759	Condition	first		916658	0					
ANR	916760	Identifier	first		916658	0					
ANR	916761	PrimaryExpression	"""fs %s\\n"""		916658	1					
ANR	916762	PrimaryExpression	"""fs+%s\\n"""		916658	2					
ANR	916763	ExpressionStatement	"r_cons_printf ( fmt , name )"	609:2:17468:17493	916658	1	True				
ANR	916764	CallExpression	"r_cons_printf ( fmt , name )"		916658	0					
ANR	916765	Callee	r_cons_printf		916658	0					
ANR	916766	Identifier	r_cons_printf		916658	0					
ANR	916767	ArgumentList	fmt		916658	1					
ANR	916768	Argument	fmt		916658	0					
ANR	916769	Identifier	fmt		916658	0					
ANR	916770	Argument	name		916658	1					
ANR	916771	Identifier	name		916658	0					
ANR	916772	BreakStatement	break ;	610:2:17497:17502	916658	2	True				
ANR	916773	Label	default :	612:1:17508:17515	916658	4	True				
ANR	916774	Identifier	default		916658	0					
ANR	916775	ExpressionStatement	"r_cons_printf ( ""%-2d %s%s\\n"" , ordinal , name , selected ? "" (selected)"" : """" )"	613:2:17519:17592	916658	5	True				
ANR	916776	CallExpression	"r_cons_printf ( ""%-2d %s%s\\n"" , ordinal , name , selected ? "" (selected)"" : """" )"		916658	0					
ANR	916777	Callee	r_cons_printf		916658	0					
ANR	916778	Identifier	r_cons_printf		916658	0					
ANR	916779	ArgumentList	"""%-2d %s%s\\n"""		916658	1					
ANR	916780	Argument	"""%-2d %s%s\\n"""		916658	0					
ANR	916781	PrimaryExpression	"""%-2d %s%s\\n"""		916658	0					
ANR	916782	Argument	ordinal		916658	1					
ANR	916783	Identifier	ordinal		916658	0					
ANR	916784	Argument	name		916658	2					
ANR	916785	Identifier	name		916658	0					
ANR	916786	Argument	"selected ? "" (selected)"" : """""		916658	3					
ANR	916787	ConditionalExpression	"selected ? "" (selected)"" : """""		916658	0					
ANR	916788	Condition	selected		916658	0					
ANR	916789	Identifier	selected		916658	0					
ANR	916790	PrimaryExpression	""" (selected)"""		916658	1					
ANR	916791	PrimaryExpression	""""""		916658	2					
ANR	916792	BreakStatement	break ;	614:2:17596:17601	916658	6	True				
ANR	916793	ReturnType	static void		916658	1					
ANR	916794	Identifier	print_space_stack		916658	2					
ANR	916795	ParameterList	"RFlag * f , int ordinal , const char * name , bool selected , PJ * pj , int mode"		916658	3					
ANR	916796	Parameter	RFlag * f	590:30:17046:17053	916658	0	True				
ANR	916797	ParameterType	RFlag *		916658	0					
ANR	916798	Identifier	f		916658	1					
ANR	916799	Parameter	int ordinal	590:40:17056:17066	916658	1	True				
ANR	916800	ParameterType	int		916658	0					
ANR	916801	Identifier	ordinal		916658	1					
ANR	916802	Parameter	const char * name	590:53:17069:17084	916658	2	True				
ANR	916803	ParameterType	const char *		916658	0					
ANR	916804	Identifier	name		916658	1					
ANR	916805	Parameter	bool selected	590:71:17087:17099	916658	3	True				
ANR	916806	ParameterType	bool		916658	0					
ANR	916807	Identifier	selected		916658	1					
ANR	916808	Parameter	PJ * pj	590:86:17102:17107	916658	4	True				
ANR	916809	ParameterType	PJ *		916658	0					
ANR	916810	Identifier	pj		916658	1					
ANR	916811	Parameter	int mode	590:94:17110:17117	916658	5	True				
ANR	916812	ParameterType	int		916658	0					
ANR	916813	Identifier	mode		916658	1					
ANR	916814	CFGEntryNode	ENTRY		916658		True				
ANR	916815	CFGExitNode	EXIT		916658		True				
ANR	916816	Symbol	mode		916658						
ANR	916817	Symbol	r_str_escape		916658						
ANR	916818	Symbol	ename		916658						
ANR	916819	Symbol	f		916658						
ANR	916820	Symbol	name		916658						
ANR	916821	Symbol	pj		916658						
ANR	916822	Symbol	fmt		916658						
ANR	916823	Symbol	selected		916658						
ANR	916824	Symbol	first		916658						
ANR	916825	Symbol	ordinal		916658						
ANR	916826	Function	flag_space_stack_list	618:0:17609:18102							
ANR	916827	FunctionDef	"flag_space_stack_list (RFlag * f , int mode)"		916826	0					
ANR	916828	CompoundStatement		618:53:17662:18102	916826	0					
ANR	916829	IdentifierDeclStatement	RListIter * iter ;	619:1:17665:17680	916826	0	True				
ANR	916830	IdentifierDecl	* iter		916826	0					
ANR	916831	IdentifierDeclType	RListIter *		916826	0					
ANR	916832	Identifier	iter		916826	1					
ANR	916833	IdentifierDeclStatement	char * space ;	620:1:17683:17694	916826	1	True				
ANR	916834	IdentifierDecl	* space		916826	0					
ANR	916835	IdentifierDeclType	char *		916826	0					
ANR	916836	Identifier	space		916826	1					
ANR	916837	IdentifierDeclStatement	int i = 0 ;	621:1:17697:17706	916826	2	True				
ANR	916838	IdentifierDecl	i = 0		916826	0					
ANR	916839	IdentifierDeclType	int		916826	0					
ANR	916840	Identifier	i		916826	1					
ANR	916841	AssignmentExpression	i = 0		916826	2		=			
ANR	916842	Identifier	i		916826	0					
ANR	916843	PrimaryExpression	0		916826	1					
ANR	916844	IdentifierDeclStatement	PJ * pj = NULL ;	622:1:17709:17722	916826	3	True				
ANR	916845	IdentifierDecl	* pj = NULL		916826	0					
ANR	916846	IdentifierDeclType	PJ *		916826	0					
ANR	916847	Identifier	pj		916826	1					
ANR	916848	AssignmentExpression	* pj = NULL		916826	2		=			
ANR	916849	Identifier	NULL		916826	0					
ANR	916850	Identifier	NULL		916826	1					
ANR	916851	IfStatement	if ( mode == 'j' )		916826	4					
ANR	916852	Condition	mode == 'j'	623:5:17729:17739	916826	0	True				
ANR	916853	EqualityExpression	mode == 'j'		916826	0		==			
ANR	916854	Identifier	mode		916826	0					
ANR	916855	PrimaryExpression	'j'		916826	1					
ANR	916856	CompoundStatement		6:18:79:79	916826	1					
ANR	916857	ExpressionStatement	pj = pj_new ( )	624:2:17746:17760	916826	0	True				
ANR	916858	AssignmentExpression	pj = pj_new ( )		916826	0		=			
ANR	916859	Identifier	pj		916826	0					
ANR	916860	CallExpression	pj_new ( )		916826	1					
ANR	916861	Callee	pj_new		916826	0					
ANR	916862	Identifier	pj_new		916826	0					
ANR	916863	ArgumentList			916826	1					
ANR	916864	ExpressionStatement	pj_a ( pj )	625:2:17764:17773	916826	1	True				
ANR	916865	CallExpression	pj_a ( pj )		916826	0					
ANR	916866	Callee	pj_a		916826	0					
ANR	916867	Identifier	pj_a		916826	0					
ANR	916868	ArgumentList	pj		916826	1					
ANR	916869	Argument	pj		916826	0					
ANR	916870	Identifier	pj		916826	0					
ANR	916871	Statement	r_list_foreach	627:1:17779:17792	916826	5	True				
ANR	916872	Statement	(	627:16:17794:17794	916826	6	True				
ANR	916873	Statement	f	627:17:17795:17795	916826	7	True				
ANR	916874	Statement	->	627:18:17796:17797	916826	8	True				
ANR	916875	Statement	spaces	627:20:17798:17803	916826	9	True				
ANR	916876	Statement	.	627:26:17804:17804	916826	10	True				
ANR	916877	Statement	spacestack	627:27:17805:17814	916826	11	True				
ANR	916878	Statement	","	627:37:17815:17815	916826	12	True				
ANR	916879	Statement	iter	627:39:17817:17820	916826	13	True				
ANR	916880	Statement	","	627:43:17821:17821	916826	14	True				
ANR	916881	Statement	space	627:45:17823:17827	916826	15	True				
ANR	916882	Statement	)	627:50:17828:17828	916826	16	True				
ANR	916883	CompoundStatement		10:52:167:167	916826	17					
ANR	916884	ExpressionStatement	"print_space_stack ( f , i ++ , space , false , pj , mode )"	628:2:17834:17884	916826	0	True				
ANR	916885	CallExpression	"print_space_stack ( f , i ++ , space , false , pj , mode )"		916826	0					
ANR	916886	Callee	print_space_stack		916826	0					
ANR	916887	Identifier	print_space_stack		916826	0					
ANR	916888	ArgumentList	f		916826	1					
ANR	916889	Argument	f		916826	0					
ANR	916890	Identifier	f		916826	0					
ANR	916891	Argument	i ++		916826	1					
ANR	916892	PostIncDecOperationExpression	i ++		916826	0					
ANR	916893	Identifier	i		916826	0					
ANR	916894	IncDec	++		916826	1					
ANR	916895	Argument	space		916826	2					
ANR	916896	Identifier	space		916826	0					
ANR	916897	Argument	false		916826	3					
ANR	916898	Identifier	false		916826	0					
ANR	916899	Argument	pj		916826	4					
ANR	916900	Identifier	pj		916826	0					
ANR	916901	Argument	mode		916826	5					
ANR	916902	Identifier	mode		916826	0					
ANR	916903	IdentifierDeclStatement	const char * cur_name = r_flag_space_cur_name ( f ) ;	630:1:17890:17938	916826	18	True				
ANR	916904	IdentifierDecl	* cur_name = r_flag_space_cur_name ( f )		916826	0					
ANR	916905	IdentifierDeclType	const char *		916826	0					
ANR	916906	Identifier	cur_name		916826	1					
ANR	916907	AssignmentExpression	* cur_name = r_flag_space_cur_name ( f )		916826	2		=			
ANR	916908	Identifier	cur_name		916826	0					
ANR	916909	CallExpression	r_flag_space_cur_name ( f )		916826	1					
ANR	916910	Callee	r_flag_space_cur_name		916826	0					
ANR	916911	Identifier	r_flag_space_cur_name		916826	0					
ANR	916912	ArgumentList	f		916826	1					
ANR	916913	Argument	f		916826	0					
ANR	916914	Identifier	f		916826	0					
ANR	916915	ExpressionStatement	"print_space_stack ( f , i ++ , cur_name , true , pj , mode )"	631:1:17941:17993	916826	19	True				
ANR	916916	CallExpression	"print_space_stack ( f , i ++ , cur_name , true , pj , mode )"		916826	0					
ANR	916917	Callee	print_space_stack		916826	0					
ANR	916918	Identifier	print_space_stack		916826	0					
ANR	916919	ArgumentList	f		916826	1					
ANR	916920	Argument	f		916826	0					
ANR	916921	Identifier	f		916826	0					
ANR	916922	Argument	i ++		916826	1					
ANR	916923	PostIncDecOperationExpression	i ++		916826	0					
ANR	916924	Identifier	i		916826	0					
ANR	916925	IncDec	++		916826	1					
ANR	916926	Argument	cur_name		916826	2					
ANR	916927	Identifier	cur_name		916826	0					
ANR	916928	Argument	true		916826	3					
ANR	916929	Identifier	true		916826	0					
ANR	916930	Argument	pj		916826	4					
ANR	916931	Identifier	pj		916826	0					
ANR	916932	Argument	mode		916826	5					
ANR	916933	Identifier	mode		916826	0					
ANR	916934	IfStatement	if ( mode == 'j' )		916826	20					
ANR	916935	Condition	mode == 'j'	632:5:18000:18010	916826	0	True				
ANR	916936	EqualityExpression	mode == 'j'		916826	0		==			
ANR	916937	Identifier	mode		916826	0					
ANR	916938	PrimaryExpression	'j'		916826	1					
ANR	916939	CompoundStatement		15:18:350:350	916826	1					
ANR	916940	ExpressionStatement	pj_end ( pj )	633:2:18017:18028	916826	0	True				
ANR	916941	CallExpression	pj_end ( pj )		916826	0					
ANR	916942	Callee	pj_end		916826	0					
ANR	916943	Identifier	pj_end		916826	0					
ANR	916944	ArgumentList	pj		916826	1					
ANR	916945	Argument	pj		916826	0					
ANR	916946	Identifier	pj		916826	0					
ANR	916947	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"	634:2:18032:18070	916826	1	True				
ANR	916948	CallExpression	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"		916826	0					
ANR	916949	Callee	r_cons_printf		916826	0					
ANR	916950	Identifier	r_cons_printf		916826	0					
ANR	916951	ArgumentList	"""%s\\n"""		916826	1					
ANR	916952	Argument	"""%s\\n"""		916826	0					
ANR	916953	PrimaryExpression	"""%s\\n"""		916826	0					
ANR	916954	Argument	pj_string ( pj )		916826	1					
ANR	916955	CallExpression	pj_string ( pj )		916826	0					
ANR	916956	Callee	pj_string		916826	0					
ANR	916957	Identifier	pj_string		916826	0					
ANR	916958	ArgumentList	pj		916826	1					
ANR	916959	Argument	pj		916826	0					
ANR	916960	Identifier	pj		916826	0					
ANR	916961	ExpressionStatement	pj_free ( pj )	635:2:18074:18086	916826	2	True				
ANR	916962	CallExpression	pj_free ( pj )		916826	0					
ANR	916963	Callee	pj_free		916826	0					
ANR	916964	Identifier	pj_free		916826	0					
ANR	916965	ArgumentList	pj		916826	1					
ANR	916966	Argument	pj		916826	0					
ANR	916967	Identifier	pj		916826	0					
ANR	916968	ReturnStatement	return i ;	637:1:18092:18100	916826	21	True				
ANR	916969	Identifier	i		916826	0					
ANR	916970	ReturnType	static int		916826	1					
ANR	916971	Identifier	flag_space_stack_list		916826	2					
ANR	916972	ParameterList	"RFlag * f , int mode"		916826	3					
ANR	916973	Parameter	RFlag * f	618:33:17642:17649	916826	0	True				
ANR	916974	ParameterType	RFlag *		916826	0					
ANR	916975	Identifier	f		916826	1					
ANR	916976	Parameter	int mode	618:43:17652:17659	916826	1	True				
ANR	916977	ParameterType	int		916826	0					
ANR	916978	Identifier	mode		916826	1					
ANR	916979	CFGEntryNode	ENTRY		916826		True				
ANR	916980	CFGExitNode	EXIT		916826		True				
ANR	916981	Symbol	NULL		916826						
ANR	916982	Symbol	pj_string		916826						
ANR	916983	Symbol	r_flag_space_cur_name		916826						
ANR	916984	Symbol	f		916826						
ANR	916985	Symbol	false		916826						
ANR	916986	Symbol	iter		916826						
ANR	916987	Symbol	i		916826						
ANR	916988	Symbol	space		916826						
ANR	916989	Symbol	cur_name		916826						
ANR	916990	Symbol	mode		916826						
ANR	916991	Symbol	true		916826						
ANR	916992	Symbol	pj		916826						
ANR	916993	Symbol	pj_new		916826						
ANR	916994	Function	cmd_flag	640:0:18105:37002							
ANR	916995	FunctionDef	"cmd_flag (void * data , const char * input)"		916994	0					
ANR	916996	CompoundStatement		640:51:18156:37002	916994	0					
ANR	916997	Statement	static	641:1:18159:18164	916994	0	True				
ANR	916998	IdentifierDeclStatement	int flagenum = 0 ;	641:8:18166:18182	916994	1	True				
ANR	916999	IdentifierDecl	flagenum = 0		916994	0					
ANR	917000	IdentifierDeclType	int		916994	0					
ANR	917001	Identifier	flagenum		916994	1					
ANR	917002	AssignmentExpression	flagenum = 0		916994	2		=			
ANR	917003	Identifier	flagenum		916994	0					
ANR	917004	PrimaryExpression	0		916994	1					
ANR	917005	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	642:1:18185:18212	916994	2	True				
ANR	917006	IdentifierDecl	* core = ( RCore * ) data		916994	0					
ANR	917007	IdentifierDeclType	RCore *		916994	0					
ANR	917008	Identifier	core		916994	1					
ANR	917009	AssignmentExpression	* core = ( RCore * ) data		916994	2		=			
ANR	917010	Identifier	core		916994	0					
ANR	917011	CastExpression	( RCore * ) data		916994	1					
ANR	917012	CastTarget	RCore *		916994	0					
ANR	917013	Identifier	data		916994	1					
ANR	917014	IdentifierDeclStatement	ut64 off = core -> offset ;	643:1:18215:18238	916994	3	True				
ANR	917015	IdentifierDecl	off = core -> offset		916994	0					
ANR	917016	IdentifierDeclType	ut64		916994	0					
ANR	917017	Identifier	off		916994	1					
ANR	917018	AssignmentExpression	off = core -> offset		916994	2		=			
ANR	917019	Identifier	off		916994	0					
ANR	917020	PtrMemberAccess	core -> offset		916994	1					
ANR	917021	Identifier	core		916994	0					
ANR	917022	Identifier	offset		916994	1					
ANR	917023	IdentifierDeclStatement	"char * ptr , * str = NULL ;"	644:1:18241:18263	916994	4	True				
ANR	917024	IdentifierDecl	* ptr		916994	0					
ANR	917025	IdentifierDeclType	char *		916994	0					
ANR	917026	Identifier	ptr		916994	1					
ANR	917027	IdentifierDecl	* str = NULL		916994	1					
ANR	917028	IdentifierDeclType	char *		916994	0					
ANR	917029	Identifier	str		916994	1					
ANR	917030	AssignmentExpression	* str = NULL		916994	2		=			
ANR	917031	Identifier	NULL		916994	0					
ANR	917032	Identifier	NULL		916994	1					
ANR	917033	IdentifierDeclStatement	RFlagItem * item ;	645:1:18266:18281	916994	5	True				
ANR	917034	IdentifierDecl	* item		916994	0					
ANR	917035	IdentifierDeclType	RFlagItem *		916994	0					
ANR	917036	Identifier	item		916994	1					
ANR	917037	IdentifierDeclStatement	char * name = NULL ;	646:1:18284:18301	916994	6	True				
ANR	917038	IdentifierDecl	* name = NULL		916994	0					
ANR	917039	IdentifierDeclType	char *		916994	0					
ANR	917040	Identifier	name		916994	1					
ANR	917041	AssignmentExpression	* name = NULL		916994	2		=			
ANR	917042	Identifier	NULL		916994	0					
ANR	917043	Identifier	NULL		916994	1					
ANR	917044	IdentifierDeclStatement	st64 base ;	647:1:18304:18313	916994	7	True				
ANR	917045	IdentifierDecl	base		916994	0					
ANR	917046	IdentifierDeclType	st64		916994	0					
ANR	917047	Identifier	base		916994	1					
ANR	917048	IfStatement	if ( * input )		916994	8					
ANR	917049	Condition	* input	650:5:18343:18348	916994	0	True				
ANR	917050	UnaryOperationExpression	* input		916994	0					
ANR	917051	UnaryOperator	*		916994	0					
ANR	917052	Identifier	input		916994	1					
ANR	917053	CompoundStatement		11:13:194:194	916994	1					
ANR	917054	ExpressionStatement	str = strdup ( input + 1 )	651:2:18355:18379	916994	0	True				
ANR	917055	AssignmentExpression	str = strdup ( input + 1 )		916994	0		=			
ANR	917056	Identifier	str		916994	0					
ANR	917057	CallExpression	strdup ( input + 1 )		916994	1					
ANR	917058	Callee	strdup		916994	0					
ANR	917059	Identifier	strdup		916994	0					
ANR	917060	ArgumentList	input + 1		916994	1					
ANR	917061	Argument	input + 1		916994	0					
ANR	917062	AdditiveExpression	input + 1		916994	0		+			
ANR	917063	Identifier	input		916994	0					
ANR	917064	PrimaryExpression	1		916994	1					
ANR	917065	Label	rep :	653:0:18384:18387	916994	9	True				
ANR	917066	Identifier	rep		916994	0					
ANR	917067	SwitchStatement	switch ( * input )		916994	10					
ANR	917068	Condition	* input	654:9:18398:18403	916994	0	True				
ANR	917069	UnaryOperationExpression	* input		916994	0					
ANR	917070	UnaryOperator	*		916994	0					
ANR	917071	Identifier	input		916994	1					
ANR	917072	CompoundStatement		15:17:249:249	916994	1					
ANR	917073	Label	case 'f' :	655:1:18409:18417	916994	0	True				
ANR	917074	IfStatement	if ( input [ 1 ] == 's' )		916994	1					
ANR	917075	Condition	input [ 1 ] == 's'	656:6:18433:18447	916994	0	True				
ANR	917076	EqualityExpression	input [ 1 ] == 's'		916994	0		==			
ANR	917077	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917078	Identifier	input		916994	0					
ANR	917079	PrimaryExpression	1		916994	1					
ANR	917080	PrimaryExpression	's'		916994	1					
ANR	917081	CompoundStatement		18:3:307:349	916994	1					
ANR	917082	IdentifierDeclStatement	"int delta = flag_to_flag ( core , input + 2 ) ;"	657:3:18464:18506	916994	0	True				
ANR	917083	IdentifierDecl	"delta = flag_to_flag ( core , input + 2 )"		916994	0					
ANR	917084	IdentifierDeclType	int		916994	0					
ANR	917085	Identifier	delta		916994	1					
ANR	917086	AssignmentExpression	"delta = flag_to_flag ( core , input + 2 )"		916994	2		=			
ANR	917087	Identifier	delta		916994	0					
ANR	917088	CallExpression	"flag_to_flag ( core , input + 2 )"		916994	1					
ANR	917089	Callee	flag_to_flag		916994	0					
ANR	917090	Identifier	flag_to_flag		916994	0					
ANR	917091	ArgumentList	core		916994	1					
ANR	917092	Argument	core		916994	0					
ANR	917093	Identifier	core		916994	0					
ANR	917094	Argument	input + 2		916994	1					
ANR	917095	AdditiveExpression	input + 2		916994	0		+			
ANR	917096	Identifier	input		916994	0					
ANR	917097	PrimaryExpression	2		916994	1					
ANR	917098	IfStatement	if ( delta > 0 )		916994	1					
ANR	917099	Condition	delta > 0	658:7:18515:18523	916994	0	True				
ANR	917100	RelationalExpression	delta > 0		916994	0		>			
ANR	917101	Identifier	delta		916994	0					
ANR	917102	PrimaryExpression	0		916994	1					
ANR	917103	CompoundStatement		19:18:369:369	916994	1					
ANR	917104	Statement	r_cons_printf	659:4:18532:18544	916994	0	True				
ANR	917105	Statement	(	659:18:18546:18546	916994	1	True				
ANR	917106	Statement	"""0x%08"""	659:19:18547:18553	916994	2	True				
ANR	917107	Statement	PFMT64x	659:26:18554:18560	916994	3	True				
ANR	917108	Statement	"""\\n"""	659:33:18561:18564	916994	4	True				
ANR	917109	Statement	","	659:37:18565:18565	916994	5	True				
ANR	917110	Statement	core	659:39:18567:18570	916994	6	True				
ANR	917111	Statement	->	659:43:18571:18572	916994	7	True				
ANR	917112	Statement	offset	659:45:18573:18578	916994	8	True				
ANR	917113	Statement	+	659:52:18580:18580	916994	9	True				
ANR	917114	Statement	delta	659:54:18582:18586	916994	10	True				
ANR	917115	Statement	)	659:59:18587:18587	916994	11	True				
ANR	917116	ExpressionStatement		659:60:18588:18588	916994	12	True				
ANR	917117	ElseStatement	else		916994	0					
ANR	917118	CompoundStatement		22:9:447:447	916994	0					
ANR	917119	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , flag_to_flag ( core , input + 1 ) )"	662:3:18609:18663	916994	0	True				
ANR	917120	CallExpression	"r_cons_printf ( ""%d\\n"" , flag_to_flag ( core , input + 1 ) )"		916994	0					
ANR	917121	Callee	r_cons_printf		916994	0					
ANR	917122	Identifier	r_cons_printf		916994	0					
ANR	917123	ArgumentList	"""%d\\n"""		916994	1					
ANR	917124	Argument	"""%d\\n"""		916994	0					
ANR	917125	PrimaryExpression	"""%d\\n"""		916994	0					
ANR	917126	Argument	"flag_to_flag ( core , input + 1 )"		916994	1					
ANR	917127	CallExpression	"flag_to_flag ( core , input + 1 )"		916994	0					
ANR	917128	Callee	flag_to_flag		916994	0					
ANR	917129	Identifier	flag_to_flag		916994	0					
ANR	917130	ArgumentList	core		916994	1					
ANR	917131	Argument	core		916994	0					
ANR	917132	Identifier	core		916994	0					
ANR	917133	Argument	input + 1		916994	1					
ANR	917134	AdditiveExpression	input + 1		916994	0		+			
ANR	917135	Identifier	input		916994	0					
ANR	917136	PrimaryExpression	1		916994	1					
ANR	917137	BreakStatement	break ;	664:2:18671:18676	916994	2	True				
ANR	917138	Label	case 'e' :	665:1:18679:18687	916994	3	True				
ANR	917139	SwitchStatement	switch ( input [ 1 ] )		916994	4					
ANR	917140	Condition	input [ 1 ]	666:10:18707:18714	916994	0	True				
ANR	917141	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917142	Identifier	input		916994	0					
ANR	917143	PrimaryExpression	1		916994	1					
ANR	917144	CompoundStatement		27:20:560:560	916994	1					
ANR	917145	Label	case ' ' :	667:2:18721:18729	916994	0	True				
ANR	917146	ExpressionStatement	"ptr = r_str_newf ( ""%s.%d"" , input + 2 , flagenum )"	668:3:18734:18781	916994	1	True				
ANR	917147	AssignmentExpression	"ptr = r_str_newf ( ""%s.%d"" , input + 2 , flagenum )"		916994	0		=			
ANR	917148	Identifier	ptr		916994	0					
ANR	917149	CallExpression	"r_str_newf ( ""%s.%d"" , input + 2 , flagenum )"		916994	1					
ANR	917150	Callee	r_str_newf		916994	0					
ANR	917151	Identifier	r_str_newf		916994	0					
ANR	917152	ArgumentList	"""%s.%d"""		916994	1					
ANR	917153	Argument	"""%s.%d"""		916994	0					
ANR	917154	PrimaryExpression	"""%s.%d"""		916994	0					
ANR	917155	Argument	input + 2		916994	1					
ANR	917156	AdditiveExpression	input + 2		916994	0		+			
ANR	917157	Identifier	input		916994	0					
ANR	917158	PrimaryExpression	2		916994	1					
ANR	917159	Argument	flagenum		916994	2					
ANR	917160	Identifier	flagenum		916994	0					
ANR	917161	ExpressionStatement	"( void ) r_flag_set ( core -> flags , ptr , core -> offset , 1 )"	669:3:18786:18838	916994	2	True				
ANR	917162	CastExpression	"( void ) r_flag_set ( core -> flags , ptr , core -> offset , 1 )"		916994	0					
ANR	917163	CastTarget	void		916994	0					
ANR	917164	CallExpression	"r_flag_set ( core -> flags , ptr , core -> offset , 1 )"		916994	1					
ANR	917165	Callee	r_flag_set		916994	0					
ANR	917166	Identifier	r_flag_set		916994	0					
ANR	917167	ArgumentList	core -> flags		916994	1					
ANR	917168	Argument	core -> flags		916994	0					
ANR	917169	PtrMemberAccess	core -> flags		916994	0					
ANR	917170	Identifier	core		916994	0					
ANR	917171	Identifier	flags		916994	1					
ANR	917172	Argument	ptr		916994	1					
ANR	917173	Identifier	ptr		916994	0					
ANR	917174	Argument	core -> offset		916994	2					
ANR	917175	PtrMemberAccess	core -> offset		916994	0					
ANR	917176	Identifier	core		916994	0					
ANR	917177	Identifier	offset		916994	1					
ANR	917178	Argument	1		916994	3					
ANR	917179	PrimaryExpression	1		916994	0					
ANR	917180	ExpressionStatement	flagenum ++	670:3:18843:18853	916994	3	True				
ANR	917181	PostIncDecOperationExpression	flagenum ++		916994	0					
ANR	917182	Identifier	flagenum		916994	0					
ANR	917183	IncDec	++		916994	1					
ANR	917184	ExpressionStatement	free ( ptr )	671:3:18858:18868	916994	4	True				
ANR	917185	CallExpression	free ( ptr )		916994	0					
ANR	917186	Callee	free		916994	0					
ANR	917187	Identifier	free		916994	0					
ANR	917188	ArgumentList	ptr		916994	1					
ANR	917189	Argument	ptr		916994	0					
ANR	917190	Identifier	ptr		916994	0					
ANR	917191	BreakStatement	break ;	672:3:18873:18878	916994	5	True				
ANR	917192	Label	case '-' :	673:2:18882:18890	916994	6	True				
ANR	917193	ExpressionStatement	flagenum = 0	674:3:18895:18907	916994	7	True				
ANR	917194	AssignmentExpression	flagenum = 0		916994	0		=			
ANR	917195	Identifier	flagenum		916994	0					
ANR	917196	PrimaryExpression	0		916994	1					
ANR	917197	BreakStatement	break ;	675:3:18912:18917	916994	8	True				
ANR	917198	Label	default :	676:2:18921:18928	916994	9	True				
ANR	917199	Identifier	default		916994	0					
ANR	917200	ExpressionStatement	"eprintf ( ""|Usage: fe[-| name] @@= 1 2 3 4\\n"" )"	677:3:18933:18978	916994	10	True				
ANR	917201	CallExpression	"eprintf ( ""|Usage: fe[-| name] @@= 1 2 3 4\\n"" )"		916994	0					
ANR	917202	Callee	eprintf		916994	0					
ANR	917203	Identifier	eprintf		916994	0					
ANR	917204	ArgumentList	"""|Usage: fe[-| name] @@= 1 2 3 4\\n"""		916994	1					
ANR	917205	Argument	"""|Usage: fe[-| name] @@= 1 2 3 4\\n"""		916994	0					
ANR	917206	PrimaryExpression	"""|Usage: fe[-| name] @@= 1 2 3 4\\n"""		916994	0					
ANR	917207	BreakStatement	break ;	678:3:18983:18988	916994	11	True				
ANR	917208	BreakStatement	break ;	680:2:18996:19001	916994	5	True				
ANR	917209	Label	case '=' :	681:1:19004:19012	916994	6	True				
ANR	917210	SwitchStatement	switch ( input [ 1 ] )		916994	7					
ANR	917211	Condition	input [ 1 ]	682:10:19032:19039	916994	0	True				
ANR	917212	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917213	Identifier	input		916994	0					
ANR	917214	PrimaryExpression	1		916994	1					
ANR	917215	CompoundStatement		43:20:885:885	916994	1					
ANR	917216	Label	case ' ' :	683:2:19046:19054	916994	0	True				
ANR	917217	ExpressionStatement	"flagbars ( core , input + 2 )"	684:3:19059:19085	916994	1	True				
ANR	917218	CallExpression	"flagbars ( core , input + 2 )"		916994	0					
ANR	917219	Callee	flagbars		916994	0					
ANR	917220	Identifier	flagbars		916994	0					
ANR	917221	ArgumentList	core		916994	1					
ANR	917222	Argument	core		916994	0					
ANR	917223	Identifier	core		916994	0					
ANR	917224	Argument	input + 2		916994	1					
ANR	917225	AdditiveExpression	input + 2		916994	0		+			
ANR	917226	Identifier	input		916994	0					
ANR	917227	PrimaryExpression	2		916994	1					
ANR	917228	BreakStatement	break ;	685:3:19090:19095	916994	2	True				
ANR	917229	Label	case 0 :	686:2:19099:19105	916994	3	True				
ANR	917230	ExpressionStatement	"flagbars ( core , NULL )"	687:3:19110:19131	916994	4	True				
ANR	917231	CallExpression	"flagbars ( core , NULL )"		916994	0					
ANR	917232	Callee	flagbars		916994	0					
ANR	917233	Identifier	flagbars		916994	0					
ANR	917234	ArgumentList	core		916994	1					
ANR	917235	Argument	core		916994	0					
ANR	917236	Identifier	core		916994	0					
ANR	917237	Argument	NULL		916994	1					
ANR	917238	Identifier	NULL		916994	0					
ANR	917239	BreakStatement	break ;	688:3:19136:19141	916994	5	True				
ANR	917240	Label	default :	689:2:19145:19152	916994	6	True				
ANR	917241	Identifier	default		916994	0					
ANR	917242	Label	case '?' :	690:2:19156:19164	916994	7	True				
ANR	917243	ExpressionStatement	"eprintf ( ""Usage: f= [glob] to grep for matching flag names\\n"" )"	691:3:19169:19231	916994	8	True				
ANR	917244	CallExpression	"eprintf ( ""Usage: f= [glob] to grep for matching flag names\\n"" )"		916994	0					
ANR	917245	Callee	eprintf		916994	0					
ANR	917246	Identifier	eprintf		916994	0					
ANR	917247	ArgumentList	"""Usage: f= [glob] to grep for matching flag names\\n"""		916994	1					
ANR	917248	Argument	"""Usage: f= [glob] to grep for matching flag names\\n"""		916994	0					
ANR	917249	PrimaryExpression	"""Usage: f= [glob] to grep for matching flag names\\n"""		916994	0					
ANR	917250	BreakStatement	break ;	692:3:19236:19241	916994	9	True				
ANR	917251	BreakStatement	break ;	694:2:19249:19254	916994	8	True				
ANR	917252	Label	case 'a' :	695:1:19257:19265	916994	9	True				
ANR	917253	IfStatement	if ( input [ 1 ] == ' ' )		916994	10					
ANR	917254	Condition	input [ 1 ] == ' '	696:6:19273:19287	916994	0	True				
ANR	917255	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	917256	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917257	Identifier	input		916994	0					
ANR	917258	PrimaryExpression	1		916994	1					
ANR	917259	PrimaryExpression	' '		916994	1					
ANR	917260	CompoundStatement		58:3:1137:1150	916994	1					
ANR	917261	IdentifierDeclStatement	RFlagItem * fi ;	697:3:19294:19307	916994	0	True				
ANR	917262	IdentifierDecl	* fi		916994	0					
ANR	917263	IdentifierDeclType	RFlagItem *		916994	0					
ANR	917264	Identifier	fi		916994	1					
ANR	917265	ExpressionStatement	R_FREE ( str )	698:3:19312:19324	916994	1	True				
ANR	917266	CallExpression	R_FREE ( str )		916994	0					
ANR	917267	Callee	R_FREE		916994	0					
ANR	917268	Identifier	R_FREE		916994	0					
ANR	917269	ArgumentList	str		916994	1					
ANR	917270	Argument	str		916994	0					
ANR	917271	Identifier	str		916994	0					
ANR	917272	ExpressionStatement	str = strdup ( input + 2 )	699:3:19329:19351	916994	2	True				
ANR	917273	AssignmentExpression	str = strdup ( input + 2 )		916994	0		=			
ANR	917274	Identifier	str		916994	0					
ANR	917275	CallExpression	strdup ( input + 2 )		916994	1					
ANR	917276	Callee	strdup		916994	0					
ANR	917277	Identifier	strdup		916994	0					
ANR	917278	ArgumentList	input + 2		916994	1					
ANR	917279	Argument	input + 2		916994	0					
ANR	917280	AdditiveExpression	input + 2		916994	0		+			
ANR	917281	Identifier	input		916994	0					
ANR	917282	PrimaryExpression	2		916994	1					
ANR	917283	ExpressionStatement	"ptr = strchr ( str , '=' )"	700:3:19356:19379	916994	3	True				
ANR	917284	AssignmentExpression	"ptr = strchr ( str , '=' )"		916994	0		=			
ANR	917285	Identifier	ptr		916994	0					
ANR	917286	CallExpression	"strchr ( str , '=' )"		916994	1					
ANR	917287	Callee	strchr		916994	0					
ANR	917288	Identifier	strchr		916994	0					
ANR	917289	ArgumentList	str		916994	1					
ANR	917290	Argument	str		916994	0					
ANR	917291	Identifier	str		916994	0					
ANR	917292	Argument	'='		916994	1					
ANR	917293	PrimaryExpression	'='		916994	0					
ANR	917294	IfStatement	if ( ! ptr )		916994	4					
ANR	917295	Condition	! ptr	701:7:19388:19391	916994	0	True				
ANR	917296	UnaryOperationExpression	! ptr		916994	0					
ANR	917297	UnaryOperator	!		916994	0					
ANR	917298	Identifier	ptr		916994	1					
ANR	917299	ExpressionStatement	"ptr = strchr ( str , ' ' )"	702:4:19398:19421	916994	1	True				
ANR	917300	AssignmentExpression	"ptr = strchr ( str , ' ' )"		916994	0		=			
ANR	917301	Identifier	ptr		916994	0					
ANR	917302	CallExpression	"strchr ( str , ' ' )"		916994	1					
ANR	917303	Callee	strchr		916994	0					
ANR	917304	Identifier	strchr		916994	0					
ANR	917305	ArgumentList	str		916994	1					
ANR	917306	Argument	str		916994	0					
ANR	917307	Identifier	str		916994	0					
ANR	917308	Argument	' '		916994	1					
ANR	917309	PrimaryExpression	' '		916994	0					
ANR	917310	IfStatement	if ( ptr )		916994	5					
ANR	917311	Condition	ptr	703:7:19430:19432	916994	0	True				
ANR	917312	Identifier	ptr		916994	0					
ANR	917313	ExpressionStatement	* ptr ++ = 0	703:12:19435:19445	916994	1	True				
ANR	917314	AssignmentExpression	* ptr ++ = 0		916994	0		=			
ANR	917315	UnaryOperationExpression	* ptr ++		916994	0					
ANR	917316	UnaryOperator	*		916994	0					
ANR	917317	PostIncDecOperationExpression	ptr ++		916994	1					
ANR	917318	Identifier	ptr		916994	0					
ANR	917319	IncDec	++		916994	1					
ANR	917320	PrimaryExpression	0		916994	1					
ANR	917321	ExpressionStatement	name = ( char * ) r_str_trim_ro ( str )	704:3:19450:19484	916994	6	True				
ANR	917322	AssignmentExpression	name = ( char * ) r_str_trim_ro ( str )		916994	0		=			
ANR	917323	Identifier	name		916994	0					
ANR	917324	CastExpression	( char * ) r_str_trim_ro ( str )		916994	1					
ANR	917325	CastTarget	char *		916994	0					
ANR	917326	CallExpression	r_str_trim_ro ( str )		916994	1					
ANR	917327	Callee	r_str_trim_ro		916994	0					
ANR	917328	Identifier	r_str_trim_ro		916994	0					
ANR	917329	ArgumentList	str		916994	1					
ANR	917330	Argument	str		916994	0					
ANR	917331	Identifier	str		916994	0					
ANR	917332	ExpressionStatement	ptr = ( char * ) r_str_trim_ro ( ptr )	705:3:19489:19522	916994	7	True				
ANR	917333	AssignmentExpression	ptr = ( char * ) r_str_trim_ro ( ptr )		916994	0		=			
ANR	917334	Identifier	ptr		916994	0					
ANR	917335	CastExpression	( char * ) r_str_trim_ro ( ptr )		916994	1					
ANR	917336	CastTarget	char *		916994	0					
ANR	917337	CallExpression	r_str_trim_ro ( ptr )		916994	1					
ANR	917338	Callee	r_str_trim_ro		916994	0					
ANR	917339	Identifier	r_str_trim_ro		916994	0					
ANR	917340	ArgumentList	ptr		916994	1					
ANR	917341	Argument	ptr		916994	0					
ANR	917342	Identifier	ptr		916994	0					
ANR	917343	ExpressionStatement	"fi = r_flag_get ( core -> flags , name )"	706:3:19527:19562	916994	8	True				
ANR	917344	AssignmentExpression	"fi = r_flag_get ( core -> flags , name )"		916994	0		=			
ANR	917345	Identifier	fi		916994	0					
ANR	917346	CallExpression	"r_flag_get ( core -> flags , name )"		916994	1					
ANR	917347	Callee	r_flag_get		916994	0					
ANR	917348	Identifier	r_flag_get		916994	0					
ANR	917349	ArgumentList	core -> flags		916994	1					
ANR	917350	Argument	core -> flags		916994	0					
ANR	917351	PtrMemberAccess	core -> flags		916994	0					
ANR	917352	Identifier	core		916994	0					
ANR	917353	Identifier	flags		916994	1					
ANR	917354	Argument	name		916994	1					
ANR	917355	Identifier	name		916994	0					
ANR	917356	IfStatement	if ( ! fi )		916994	9					
ANR	917357	Condition	! fi	707:7:19571:19573	916994	0	True				
ANR	917358	UnaryOperationExpression	! fi		916994	0					
ANR	917359	UnaryOperator	!		916994	0					
ANR	917360	Identifier	fi		916994	1					
ANR	917361	ExpressionStatement	"fi = r_flag_set ( core -> flags , name , core -> offset , 1 )"	708:4:19580:19637	916994	1	True				
ANR	917362	AssignmentExpression	"fi = r_flag_set ( core -> flags , name , core -> offset , 1 )"		916994	0		=			
ANR	917363	Identifier	fi		916994	0					
ANR	917364	CallExpression	"r_flag_set ( core -> flags , name , core -> offset , 1 )"		916994	1					
ANR	917365	Callee	r_flag_set		916994	0					
ANR	917366	Identifier	r_flag_set		916994	0					
ANR	917367	ArgumentList	core -> flags		916994	1					
ANR	917368	Argument	core -> flags		916994	0					
ANR	917369	PtrMemberAccess	core -> flags		916994	0					
ANR	917370	Identifier	core		916994	0					
ANR	917371	Identifier	flags		916994	1					
ANR	917372	Argument	name		916994	1					
ANR	917373	Identifier	name		916994	0					
ANR	917374	Argument	core -> offset		916994	2					
ANR	917375	PtrMemberAccess	core -> offset		916994	0					
ANR	917376	Identifier	core		916994	0					
ANR	917377	Identifier	offset		916994	1					
ANR	917378	Argument	1		916994	3					
ANR	917379	PrimaryExpression	1		916994	0					
ANR	917380	IfStatement	if ( fi )		916994	10					
ANR	917381	Condition	fi	710:7:19646:19647	916994	0	True				
ANR	917382	Identifier	fi		916994	0					
ANR	917383	CompoundStatement		71:11:1493:1493	916994	1					
ANR	917384	ExpressionStatement	"r_flag_item_set_alias ( fi , ptr )"	711:4:19656:19687	916994	0	True				
ANR	917385	CallExpression	"r_flag_item_set_alias ( fi , ptr )"		916994	0					
ANR	917386	Callee	r_flag_item_set_alias		916994	0					
ANR	917387	Identifier	r_flag_item_set_alias		916994	0					
ANR	917388	ArgumentList	fi		916994	1					
ANR	917389	Argument	fi		916994	0					
ANR	917390	Identifier	fi		916994	0					
ANR	917391	Argument	ptr		916994	1					
ANR	917392	Identifier	ptr		916994	0					
ANR	917393	ElseStatement	else		916994	0					
ANR	917394	CompoundStatement		73:10:1542:1542	916994	0					
ANR	917395	ExpressionStatement	"eprintf ( ""Cannot find flag '%s'\\n"" , name )"	713:4:19705:19746	916994	0	True				
ANR	917396	CallExpression	"eprintf ( ""Cannot find flag '%s'\\n"" , name )"		916994	0					
ANR	917397	Callee	eprintf		916994	0					
ANR	917398	Identifier	eprintf		916994	0					
ANR	917399	ArgumentList	"""Cannot find flag '%s'\\n"""		916994	1					
ANR	917400	Argument	"""Cannot find flag '%s'\\n"""		916994	0					
ANR	917401	PrimaryExpression	"""Cannot find flag '%s'\\n"""		916994	0					
ANR	917402	Argument	name		916994	1					
ANR	917403	Identifier	name		916994	0					
ANR	917404	ElseStatement	else		916994	0					
ANR	917405	CompoundStatement		76:9:1605:1605	916994	0					
ANR	917406	ExpressionStatement	"eprintf ( ""Usage: fa flagname flagalias\\n"" )"	716:3:19767:19809	916994	0	True				
ANR	917407	CallExpression	"eprintf ( ""Usage: fa flagname flagalias\\n"" )"		916994	0					
ANR	917408	Callee	eprintf		916994	0					
ANR	917409	Identifier	eprintf		916994	0					
ANR	917410	ArgumentList	"""Usage: fa flagname flagalias\\n"""		916994	1					
ANR	917411	Argument	"""Usage: fa flagname flagalias\\n"""		916994	0					
ANR	917412	PrimaryExpression	"""Usage: fa flagname flagalias\\n"""		916994	0					
ANR	917413	BreakStatement	break ;	718:2:19817:19822	916994	11	True				
ANR	917414	Label	case 'V' :	719:1:19825:19833	916994	12	True				
ANR	917415	SwitchStatement	switch ( input [ 1 ] )		916994	13					
ANR	917416	Condition	input [ 1 ]	720:9:19860:19867	916994	0	True				
ANR	917417	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917418	Identifier	input		916994	0					
ANR	917419	PrimaryExpression	1		916994	1					
ANR	917420	CompoundStatement		81:19:1713:1713	916994	1					
ANR	917421	Label	case '-' :	721:2:19874:19882	916994	0	True				
ANR	917422	ExpressionStatement	r_core_visual_mark_reset ( core )	722:3:19887:19918	916994	1	True				
ANR	917423	CallExpression	r_core_visual_mark_reset ( core )		916994	0					
ANR	917424	Callee	r_core_visual_mark_reset		916994	0					
ANR	917425	Identifier	r_core_visual_mark_reset		916994	0					
ANR	917426	ArgumentList	core		916994	1					
ANR	917427	Argument	core		916994	0					
ANR	917428	Identifier	core		916994	0					
ANR	917429	BreakStatement	break ;	723:3:19923:19928	916994	2	True				
ANR	917430	Label	case ' ' :	724:2:19932:19940	916994	3	True				
ANR	917431	CompoundStatement		87:4:1794:1819	916994	4					
ANR	917432	IdentifierDeclStatement	const int ASCII_MAX = 127 ;	726:4:19951:19976	916994	0	True				
ANR	917433	IdentifierDecl	ASCII_MAX = 127		916994	0					
ANR	917434	IdentifierDeclType	const int		916994	0					
ANR	917435	Identifier	ASCII_MAX		916994	1					
ANR	917436	AssignmentExpression	ASCII_MAX = 127		916994	2		=			
ANR	917437	Identifier	ASCII_MAX		916994	0					
ANR	917438	PrimaryExpression	127		916994	1					
ANR	917439	IfStatement	if ( atoi ( input + 1 ) + ASCII_MAX + 1 < UT8_MAX )		916994	1					
ANR	917440	Condition	atoi ( input + 1 ) + ASCII_MAX + 1 < UT8_MAX	727:8:19986:20025	916994	0	True				
ANR	917441	RelationalExpression	atoi ( input + 1 ) + ASCII_MAX + 1 < UT8_MAX		916994	0		<			
ANR	917442	AdditiveExpression	atoi ( input + 1 ) + ASCII_MAX + 1		916994	0		+			
ANR	917443	CallExpression	atoi ( input + 1 )		916994	0					
ANR	917444	Callee	atoi		916994	0					
ANR	917445	Identifier	atoi		916994	0					
ANR	917446	ArgumentList	input + 1		916994	1					
ANR	917447	Argument	input + 1		916994	0					
ANR	917448	AdditiveExpression	input + 1		916994	0		+			
ANR	917449	Identifier	input		916994	0					
ANR	917450	PrimaryExpression	1		916994	1					
ANR	917451	AdditiveExpression	ASCII_MAX + 1		916994	1		+			
ANR	917452	Identifier	ASCII_MAX		916994	0					
ANR	917453	PrimaryExpression	1		916994	1					
ANR	917454	Identifier	UT8_MAX		916994	1					
ANR	917455	CompoundStatement		90:5:1924:1982	916994	1					
ANR	917456	IdentifierDeclStatement	"const char * arg = strchr ( input + 2 , ' ' ) ;"	728:5:20035:20074	916994	0	True				
ANR	917457	IdentifierDecl	"* arg = strchr ( input + 2 , ' ' )"		916994	0					
ANR	917458	IdentifierDeclType	const char *		916994	0					
ANR	917459	Identifier	arg		916994	1					
ANR	917460	AssignmentExpression	"* arg = strchr ( input + 2 , ' ' )"		916994	2		=			
ANR	917461	Identifier	arg		916994	0					
ANR	917462	CallExpression	"strchr ( input + 2 , ' ' )"		916994	1					
ANR	917463	Callee	strchr		916994	0					
ANR	917464	Identifier	strchr		916994	0					
ANR	917465	ArgumentList	input + 2		916994	1					
ANR	917466	Argument	input + 2		916994	0					
ANR	917467	AdditiveExpression	input + 2		916994	0		+			
ANR	917468	Identifier	input		916994	0					
ANR	917469	PrimaryExpression	2		916994	1					
ANR	917470	Argument	' '		916994	1					
ANR	917471	PrimaryExpression	' '		916994	0					
ANR	917472	IdentifierDeclStatement	"ut64 addr = arg ? r_num_math ( core -> num , arg ) : core -> offset ;"	729:5:20081:20139	916994	1	True				
ANR	917473	IdentifierDecl	"addr = arg ? r_num_math ( core -> num , arg ) : core -> offset"		916994	0					
ANR	917474	IdentifierDeclType	ut64		916994	0					
ANR	917475	Identifier	addr		916994	1					
ANR	917476	AssignmentExpression	"addr = arg ? r_num_math ( core -> num , arg ) : core -> offset"		916994	2		=			
ANR	917477	Identifier	addr		916994	0					
ANR	917478	ConditionalExpression	"arg ? r_num_math ( core -> num , arg ) : core -> offset"		916994	1					
ANR	917479	Condition	arg		916994	0					
ANR	917480	Identifier	arg		916994	0					
ANR	917481	CallExpression	"r_num_math ( core -> num , arg )"		916994	1					
ANR	917482	Callee	r_num_math		916994	0					
ANR	917483	Identifier	r_num_math		916994	0					
ANR	917484	ArgumentList	core -> num		916994	1					
ANR	917485	Argument	core -> num		916994	0					
ANR	917486	PtrMemberAccess	core -> num		916994	0					
ANR	917487	Identifier	core		916994	0					
ANR	917488	Identifier	num		916994	1					
ANR	917489	Argument	arg		916994	1					
ANR	917490	Identifier	arg		916994	0					
ANR	917491	PtrMemberAccess	core -> offset		916994	2					
ANR	917492	Identifier	core		916994	0					
ANR	917493	Identifier	offset		916994	1					
ANR	917494	ExpressionStatement	"r_core_visual_mark_set ( core , atoi ( input + 1 ) + ASCII_MAX + 1 , addr )"	730:5:20146:20213	916994	2	True				
ANR	917495	CallExpression	"r_core_visual_mark_set ( core , atoi ( input + 1 ) + ASCII_MAX + 1 , addr )"		916994	0					
ANR	917496	Callee	r_core_visual_mark_set		916994	0					
ANR	917497	Identifier	r_core_visual_mark_set		916994	0					
ANR	917498	ArgumentList	core		916994	1					
ANR	917499	Argument	core		916994	0					
ANR	917500	Identifier	core		916994	0					
ANR	917501	Argument	atoi ( input + 1 ) + ASCII_MAX + 1		916994	1					
ANR	917502	AdditiveExpression	atoi ( input + 1 ) + ASCII_MAX + 1		916994	0		+			
ANR	917503	CallExpression	atoi ( input + 1 )		916994	0					
ANR	917504	Callee	atoi		916994	0					
ANR	917505	Identifier	atoi		916994	0					
ANR	917506	ArgumentList	input + 1		916994	1					
ANR	917507	Argument	input + 1		916994	0					
ANR	917508	AdditiveExpression	input + 1		916994	0		+			
ANR	917509	Identifier	input		916994	0					
ANR	917510	PrimaryExpression	1		916994	1					
ANR	917511	AdditiveExpression	ASCII_MAX + 1		916994	1		+			
ANR	917512	Identifier	ASCII_MAX		916994	0					
ANR	917513	PrimaryExpression	1		916994	1					
ANR	917514	Argument	addr		916994	2					
ANR	917515	Identifier	addr		916994	0					
ANR	917516	BreakStatement	break ;	733:3:20229:20234	916994	5	True				
ANR	917517	Label	case '?' :	734:2:20238:20246	916994	6	True				
ANR	917518	ExpressionStatement	"eprintf ( ""Usage: fV[*-] [nkey] [offset]\\n"" )"	735:3:20251:20294	916994	7	True				
ANR	917519	CallExpression	"eprintf ( ""Usage: fV[*-] [nkey] [offset]\\n"" )"		916994	0					
ANR	917520	Callee	eprintf		916994	0					
ANR	917521	Identifier	eprintf		916994	0					
ANR	917522	ArgumentList	"""Usage: fV[*-] [nkey] [offset]\\n"""		916994	1					
ANR	917523	Argument	"""Usage: fV[*-] [nkey] [offset]\\n"""		916994	0					
ANR	917524	PrimaryExpression	"""Usage: fV[*-] [nkey] [offset]\\n"""		916994	0					
ANR	917525	ExpressionStatement	"eprintf ( ""Dump/Restore visual marks (mK/'K)\\n"" )"	736:3:20299:20346	916994	8	True				
ANR	917526	CallExpression	"eprintf ( ""Dump/Restore visual marks (mK/'K)\\n"" )"		916994	0					
ANR	917527	Callee	eprintf		916994	0					
ANR	917528	Identifier	eprintf		916994	0					
ANR	917529	ArgumentList	"""Dump/Restore visual marks (mK/'K)\\n"""		916994	1					
ANR	917530	Argument	"""Dump/Restore visual marks (mK/'K)\\n"""		916994	0					
ANR	917531	PrimaryExpression	"""Dump/Restore visual marks (mK/'K)\\n"""		916994	0					
ANR	917532	BreakStatement	break ;	737:3:20351:20356	916994	9	True				
ANR	917533	Label	default :	738:2:20360:20367	916994	10	True				
ANR	917534	Identifier	default		916994	0					
ANR	917535	ExpressionStatement	r_core_visual_mark_dump ( core )	739:3:20372:20402	916994	11	True				
ANR	917536	CallExpression	r_core_visual_mark_dump ( core )		916994	0					
ANR	917537	Callee	r_core_visual_mark_dump		916994	0					
ANR	917538	Identifier	r_core_visual_mark_dump		916994	0					
ANR	917539	ArgumentList	core		916994	1					
ANR	917540	Argument	core		916994	0					
ANR	917541	Identifier	core		916994	0					
ANR	917542	BreakStatement	break ;	740:3:20407:20412	916994	12	True				
ANR	917543	BreakStatement	break ;	742:2:20420:20425	916994	14	True				
ANR	917544	Label	case 'm' :	743:1:20428:20436	916994	15	True				
ANR	917545	ExpressionStatement	"r_flag_move ( core -> flags , core -> offset , r_num_math ( core -> num , input + 1 ) )"	744:2:20448:20520	916994	16	True				
ANR	917546	CallExpression	"r_flag_move ( core -> flags , core -> offset , r_num_math ( core -> num , input + 1 ) )"		916994	0					
ANR	917547	Callee	r_flag_move		916994	0					
ANR	917548	Identifier	r_flag_move		916994	0					
ANR	917549	ArgumentList	core -> flags		916994	1					
ANR	917550	Argument	core -> flags		916994	0					
ANR	917551	PtrMemberAccess	core -> flags		916994	0					
ANR	917552	Identifier	core		916994	0					
ANR	917553	Identifier	flags		916994	1					
ANR	917554	Argument	core -> offset		916994	1					
ANR	917555	PtrMemberAccess	core -> offset		916994	0					
ANR	917556	Identifier	core		916994	0					
ANR	917557	Identifier	offset		916994	1					
ANR	917558	Argument	"r_num_math ( core -> num , input + 1 )"		916994	2					
ANR	917559	CallExpression	"r_num_math ( core -> num , input + 1 )"		916994	0					
ANR	917560	Callee	r_num_math		916994	0					
ANR	917561	Identifier	r_num_math		916994	0					
ANR	917562	ArgumentList	core -> num		916994	1					
ANR	917563	Argument	core -> num		916994	0					
ANR	917564	PtrMemberAccess	core -> num		916994	0					
ANR	917565	Identifier	core		916994	0					
ANR	917566	Identifier	num		916994	1					
ANR	917567	Argument	input + 1		916994	1					
ANR	917568	AdditiveExpression	input + 1		916994	0		+			
ANR	917569	Identifier	input		916994	0					
ANR	917570	PrimaryExpression	1		916994	1					
ANR	917571	BreakStatement	break ;	745:2:20524:20529	916994	17	True				
ANR	917572	Label	case 'R' :	746:1:20532:20540	916994	18	True				
ANR	917573	SwitchStatement	switch ( * str )		916994	19					
ANR	917574	Condition	* str	747:9:20559:20562	916994	0	True				
ANR	917575	UnaryOperationExpression	* str		916994	0					
ANR	917576	UnaryOperator	*		916994	0					
ANR	917577	Identifier	str		916994	1					
ANR	917578	CompoundStatement		108:15:2408:2408	916994	1					
ANR	917579	Label	case '\\0' :	748:2:20569:20578	916994	0	True				
ANR	917580	ExpressionStatement	"eprintf ( ""Usage: fR [from] [to] ([mask])\\n"" )"	749:3:20583:20627	916994	1	True				
ANR	917581	CallExpression	"eprintf ( ""Usage: fR [from] [to] ([mask])\\n"" )"		916994	0					
ANR	917582	Callee	eprintf		916994	0					
ANR	917583	Identifier	eprintf		916994	0					
ANR	917584	ArgumentList	"""Usage: fR [from] [to] ([mask])\\n"""		916994	1					
ANR	917585	Argument	"""Usage: fR [from] [to] ([mask])\\n"""		916994	0					
ANR	917586	PrimaryExpression	"""Usage: fR [from] [to] ([mask])\\n"""		916994	0					
ANR	917587	Statement	eprintf	750:3:20632:20638	916994	2	True				
ANR	917588	Statement	(	750:11:20640:20640	916994	3	True				
ANR	917589	Statement	"""Example to relocate PIE flags on debugger:\\n"""	750:12:20641:20686	916994	4	True				
ANR	917590	Statement	""" > fR entry0 `dm~:1[1]`\\n"""	751:4:20692:20718	916994	5	True				
ANR	917591	Statement	)	751:31:20719:20719	916994	6	True				
ANR	917592	ExpressionStatement		751:32:20720:20720	916994	7	True				
ANR	917593	BreakStatement	break ;	752:3:20725:20730	916994	8	True				
ANR	917594	Label	case '?' :	753:2:20734:20742	916994	9	True				
ANR	917595	ExpressionStatement	"r_cons_println ( ""Usage: fR [from] [to] ([mask])"" )"	754:3:20747:20796	916994	10	True				
ANR	917596	CallExpression	"r_cons_println ( ""Usage: fR [from] [to] ([mask])"" )"		916994	0					
ANR	917597	Callee	r_cons_println		916994	0					
ANR	917598	Identifier	r_cons_println		916994	0					
ANR	917599	ArgumentList	"""Usage: fR [from] [to] ([mask])"""		916994	1					
ANR	917600	Argument	"""Usage: fR [from] [to] ([mask])"""		916994	0					
ANR	917601	PrimaryExpression	"""Usage: fR [from] [to] ([mask])"""		916994	0					
ANR	917602	Statement	r_cons_println	755:3:20801:20814	916994	11	True				
ANR	917603	Statement	(	755:18:20816:20816	916994	12	True				
ANR	917604	Statement	"""Example to relocate PIE flags on debugger:\\n"""	755:19:20817:20862	916994	13	True				
ANR	917605	Statement	""" > fR entry0 `dm~:1[1]`"""	756:4:20868:20892	916994	14	True				
ANR	917606	Statement	)	756:29:20893:20893	916994	15	True				
ANR	917607	ExpressionStatement		756:30:20894:20894	916994	16	True				
ANR	917608	BreakStatement	break ;	757:3:20899:20904	916994	17	True				
ANR	917609	Label	default :	758:2:20908:20915	916994	18	True				
ANR	917610	Identifier	default		916994	0					
ANR	917611	CompoundStatement		123:4:2847:2854	916994	19					
ANR	917612	IdentifierDeclStatement	"char * p = strchr ( str + 1 , ' ' ) ;"	760:4:20935:20964	916994	0	True				
ANR	917613	IdentifierDecl	"* p = strchr ( str + 1 , ' ' )"		916994	0					
ANR	917614	IdentifierDeclType	char *		916994	0					
ANR	917615	Identifier	p		916994	1					
ANR	917616	AssignmentExpression	"* p = strchr ( str + 1 , ' ' )"		916994	2		=			
ANR	917617	Identifier	p		916994	0					
ANR	917618	CallExpression	"strchr ( str + 1 , ' ' )"		916994	1					
ANR	917619	Callee	strchr		916994	0					
ANR	917620	Identifier	strchr		916994	0					
ANR	917621	ArgumentList	str + 1		916994	1					
ANR	917622	Argument	str + 1		916994	0					
ANR	917623	AdditiveExpression	str + 1		916994	0		+			
ANR	917624	Identifier	str		916994	0					
ANR	917625	PrimaryExpression	1		916994	1					
ANR	917626	Argument	' '		916994	1					
ANR	917627	PrimaryExpression	' '		916994	0					
ANR	917628	IdentifierDeclStatement	"ut64 from , to , mask = 0xffff ;"	761:4:20970:20998	916994	1	True				
ANR	917629	IdentifierDecl	from		916994	0					
ANR	917630	IdentifierDeclType	ut64		916994	0					
ANR	917631	Identifier	from		916994	1					
ANR	917632	IdentifierDecl	to		916994	1					
ANR	917633	IdentifierDeclType	ut64		916994	0					
ANR	917634	Identifier	to		916994	1					
ANR	917635	IdentifierDecl	mask = 0xffff		916994	2					
ANR	917636	IdentifierDeclType	ut64		916994	0					
ANR	917637	Identifier	mask		916994	1					
ANR	917638	AssignmentExpression	mask = 0xffff		916994	2		=			
ANR	917639	Identifier	mask		916994	0					
ANR	917640	PrimaryExpression	0xffff		916994	1					
ANR	917641	IdentifierDeclStatement	int ret ;	762:4:21004:21011	916994	2	True				
ANR	917642	IdentifierDecl	ret		916994	0					
ANR	917643	IdentifierDeclType	int		916994	0					
ANR	917644	Identifier	ret		916994	1					
ANR	917645	IfStatement	if ( p )		916994	3					
ANR	917646	Condition	p	763:8:21021:21021	916994	0	True				
ANR	917647	Identifier	p		916994	0					
ANR	917648	CompoundStatement		125:5:2874:2901	916994	1					
ANR	917649	IdentifierDeclStatement	"char * q = strchr ( p + 1 , ' ' ) ;"	764:5:21031:21058	916994	0	True				
ANR	917650	IdentifierDecl	"* q = strchr ( p + 1 , ' ' )"		916994	0					
ANR	917651	IdentifierDeclType	char *		916994	0					
ANR	917652	Identifier	q		916994	1					
ANR	917653	AssignmentExpression	"* q = strchr ( p + 1 , ' ' )"		916994	2		=			
ANR	917654	Identifier	q		916994	0					
ANR	917655	CallExpression	"strchr ( p + 1 , ' ' )"		916994	1					
ANR	917656	Callee	strchr		916994	0					
ANR	917657	Identifier	strchr		916994	0					
ANR	917658	ArgumentList	p + 1		916994	1					
ANR	917659	Argument	p + 1		916994	0					
ANR	917660	AdditiveExpression	p + 1		916994	0		+			
ANR	917661	Identifier	p		916994	0					
ANR	917662	PrimaryExpression	1		916994	1					
ANR	917663	Argument	' '		916994	1					
ANR	917664	PrimaryExpression	' '		916994	0					
ANR	917665	ExpressionStatement	* p = 0	765:5:21065:21071	916994	1	True				
ANR	917666	AssignmentExpression	* p = 0		916994	0		=			
ANR	917667	UnaryOperationExpression	* p		916994	0					
ANR	917668	UnaryOperator	*		916994	0					
ANR	917669	Identifier	p		916994	1					
ANR	917670	PrimaryExpression	0		916994	1					
ANR	917671	IfStatement	if ( q )		916994	2					
ANR	917672	Condition	q	766:9:21082:21082	916994	0	True				
ANR	917673	Identifier	q		916994	0					
ANR	917674	CompoundStatement		127:12:2928:2928	916994	1					
ANR	917675	ExpressionStatement	* q = 0	767:6:21093:21099	916994	0	True				
ANR	917676	AssignmentExpression	* q = 0		916994	0		=			
ANR	917677	UnaryOperationExpression	* q		916994	0					
ANR	917678	UnaryOperator	*		916994	0					
ANR	917679	Identifier	q		916994	1					
ANR	917680	PrimaryExpression	0		916994	1					
ANR	917681	ExpressionStatement	"mask = r_num_math ( core -> num , q + 1 )"	768:6:21107:21141	916994	1	True				
ANR	917682	AssignmentExpression	"mask = r_num_math ( core -> num , q + 1 )"		916994	0		=			
ANR	917683	Identifier	mask		916994	0					
ANR	917684	CallExpression	"r_num_math ( core -> num , q + 1 )"		916994	1					
ANR	917685	Callee	r_num_math		916994	0					
ANR	917686	Identifier	r_num_math		916994	0					
ANR	917687	ArgumentList	core -> num		916994	1					
ANR	917688	Argument	core -> num		916994	0					
ANR	917689	PtrMemberAccess	core -> num		916994	0					
ANR	917690	Identifier	core		916994	0					
ANR	917691	Identifier	num		916994	1					
ANR	917692	Argument	q + 1		916994	1					
ANR	917693	AdditiveExpression	q + 1		916994	0		+			
ANR	917694	Identifier	q		916994	0					
ANR	917695	PrimaryExpression	1		916994	1					
ANR	917696	ExpressionStatement	"from = r_num_math ( core -> num , str + 1 )"	770:5:21155:21191	916994	3	True				
ANR	917697	AssignmentExpression	"from = r_num_math ( core -> num , str + 1 )"		916994	0		=			
ANR	917698	Identifier	from		916994	0					
ANR	917699	CallExpression	"r_num_math ( core -> num , str + 1 )"		916994	1					
ANR	917700	Callee	r_num_math		916994	0					
ANR	917701	Identifier	r_num_math		916994	0					
ANR	917702	ArgumentList	core -> num		916994	1					
ANR	917703	Argument	core -> num		916994	0					
ANR	917704	PtrMemberAccess	core -> num		916994	0					
ANR	917705	Identifier	core		916994	0					
ANR	917706	Identifier	num		916994	1					
ANR	917707	Argument	str + 1		916994	1					
ANR	917708	AdditiveExpression	str + 1		916994	0		+			
ANR	917709	Identifier	str		916994	0					
ANR	917710	PrimaryExpression	1		916994	1					
ANR	917711	ExpressionStatement	"to = r_num_math ( core -> num , p + 1 )"	771:5:21198:21230	916994	4	True				
ANR	917712	AssignmentExpression	"to = r_num_math ( core -> num , p + 1 )"		916994	0		=			
ANR	917713	Identifier	to		916994	0					
ANR	917714	CallExpression	"r_num_math ( core -> num , p + 1 )"		916994	1					
ANR	917715	Callee	r_num_math		916994	0					
ANR	917716	Identifier	r_num_math		916994	0					
ANR	917717	ArgumentList	core -> num		916994	1					
ANR	917718	Argument	core -> num		916994	0					
ANR	917719	PtrMemberAccess	core -> num		916994	0					
ANR	917720	Identifier	core		916994	0					
ANR	917721	Identifier	num		916994	1					
ANR	917722	Argument	p + 1		916994	1					
ANR	917723	AdditiveExpression	p + 1		916994	0		+			
ANR	917724	Identifier	p		916994	0					
ANR	917725	PrimaryExpression	1		916994	1					
ANR	917726	ExpressionStatement	"ret = r_flag_relocate ( core -> flags , from , mask , to )"	772:5:21237:21288	916994	5	True				
ANR	917727	AssignmentExpression	"ret = r_flag_relocate ( core -> flags , from , mask , to )"		916994	0		=			
ANR	917728	Identifier	ret		916994	0					
ANR	917729	CallExpression	"r_flag_relocate ( core -> flags , from , mask , to )"		916994	1					
ANR	917730	Callee	r_flag_relocate		916994	0					
ANR	917731	Identifier	r_flag_relocate		916994	0					
ANR	917732	ArgumentList	core -> flags		916994	1					
ANR	917733	Argument	core -> flags		916994	0					
ANR	917734	PtrMemberAccess	core -> flags		916994	0					
ANR	917735	Identifier	core		916994	0					
ANR	917736	Identifier	flags		916994	1					
ANR	917737	Argument	from		916994	1					
ANR	917738	Identifier	from		916994	0					
ANR	917739	Argument	mask		916994	2					
ANR	917740	Identifier	mask		916994	0					
ANR	917741	Argument	to		916994	3					
ANR	917742	Identifier	to		916994	0					
ANR	917743	ExpressionStatement	"eprintf ( ""Relocated %d flags\\n"" , ret )"	773:5:21295:21332	916994	6	True				
ANR	917744	CallExpression	"eprintf ( ""Relocated %d flags\\n"" , ret )"		916994	0					
ANR	917745	Callee	eprintf		916994	0					
ANR	917746	Identifier	eprintf		916994	0					
ANR	917747	ArgumentList	"""Relocated %d flags\\n"""		916994	1					
ANR	917748	Argument	"""Relocated %d flags\\n"""		916994	0					
ANR	917749	PrimaryExpression	"""Relocated %d flags\\n"""		916994	0					
ANR	917750	Argument	ret		916994	1					
ANR	917751	Identifier	ret		916994	0					
ANR	917752	ElseStatement	else		916994	0					
ANR	917753	CompoundStatement		135:11:3188:3188	916994	0					
ANR	917754	ExpressionStatement	"eprintf ( ""Usage: fR [from] [to] ([mask])\\n"" )"	775:5:21352:21396	916994	0	True				
ANR	917755	CallExpression	"eprintf ( ""Usage: fR [from] [to] ([mask])\\n"" )"		916994	0					
ANR	917756	Callee	eprintf		916994	0					
ANR	917757	Identifier	eprintf		916994	0					
ANR	917758	ArgumentList	"""Usage: fR [from] [to] ([mask])\\n"""		916994	1					
ANR	917759	Argument	"""Usage: fR [from] [to] ([mask])\\n"""		916994	0					
ANR	917760	PrimaryExpression	"""Usage: fR [from] [to] ([mask])\\n"""		916994	0					
ANR	917761	Statement	eprintf	776:5:21403:21409	916994	1	True				
ANR	917762	Statement	(	776:13:21411:21411	916994	2	True				
ANR	917763	Statement	"""Example to relocate PIE flags on debugger:\\n"""	776:14:21412:21457	916994	3	True				
ANR	917764	Statement	""" > fR entry0 `dm~:1[1]`\\n"""	777:6:21465:21491	916994	4	True				
ANR	917765	Statement	)	777:33:21492:21492	916994	5	True				
ANR	917766	ExpressionStatement		777:34:21493:21493	916994	6	True				
ANR	917767	BreakStatement	break ;	781:2:21512:21517	916994	20	True				
ANR	917768	Label	case 'b' :	782:1:21520:21528	916994	21	True				
ANR	917769	SwitchStatement	switch ( input [ 1 ] )		916994	22					
ANR	917770	Condition	input [ 1 ]	783:10:21548:21555	916994	0	True				
ANR	917771	ArrayIndexing	input [ 1 ]		916994	0					
ANR	917772	Identifier	input		916994	0					
ANR	917773	PrimaryExpression	1		916994	1					
ANR	917774	CompoundStatement		144:20:3401:3401	916994	1					
ANR	917775	Label	case ' ' :	784:2:21562:21570	916994	0	True				
ANR	917776	ExpressionStatement	free ( str )	785:3:21575:21585	916994	1	True				
ANR	917777	CallExpression	free ( str )		916994	0					
ANR	917778	Callee	free		916994	0					
ANR	917779	Identifier	free		916994	0					
ANR	917780	ArgumentList	str		916994	1					
ANR	917781	Argument	str		916994	0					
ANR	917782	Identifier	str		916994	0					
ANR	917783	ExpressionStatement	str = strdup ( input + 2 )	786:3:21590:21614	916994	2	True				
ANR	917784	AssignmentExpression	str = strdup ( input + 2 )		916994	0		=			
ANR	917785	Identifier	str		916994	0					
ANR	917786	CallExpression	strdup ( input + 2 )		916994	1					
ANR	917787	Callee	strdup		916994	0					
ANR	917788	Identifier	strdup		916994	0					
ANR	917789	ArgumentList	input + 2		916994	1					
ANR	917790	Argument	input + 2		916994	0					
ANR	917791	AdditiveExpression	input + 2		916994	0		+			
ANR	917792	Identifier	input		916994	0					
ANR	917793	PrimaryExpression	2		916994	1					
ANR	917794	ExpressionStatement	"ptr = strchr ( str , ' ' )"	787:3:21619:21642	916994	3	True				
ANR	917795	AssignmentExpression	"ptr = strchr ( str , ' ' )"		916994	0		=			
ANR	917796	Identifier	ptr		916994	0					
ANR	917797	CallExpression	"strchr ( str , ' ' )"		916994	1					
ANR	917798	Callee	strchr		916994	0					
ANR	917799	Identifier	strchr		916994	0					
ANR	917800	ArgumentList	str		916994	1					
ANR	917801	Argument	str		916994	0					
ANR	917802	Identifier	str		916994	0					
ANR	917803	Argument	' '		916994	1					
ANR	917804	PrimaryExpression	' '		916994	0					
ANR	917805	IfStatement	if ( ptr )		916994	4					
ANR	917806	Condition	ptr	788:7:21651:21653	916994	0	True				
ANR	917807	Identifier	ptr		916994	0					
ANR	917808	CompoundStatement		150:4:3505:3527	916994	1					
ANR	917809	IdentifierDeclStatement	RFlag * f = core -> flags ;	789:4:21662:21684	916994	0	True				
ANR	917810	IdentifierDecl	* f = core -> flags		916994	0					
ANR	917811	IdentifierDeclType	RFlag *		916994	0					
ANR	917812	Identifier	f		916994	1					
ANR	917813	AssignmentExpression	* f = core -> flags		916994	2		=			
ANR	917814	Identifier	f		916994	0					
ANR	917815	PtrMemberAccess	core -> flags		916994	1					
ANR	917816	Identifier	core		916994	0					
ANR	917817	Identifier	flags		916994	1					
ANR	917818	ExpressionStatement	* ptr = 0	790:4:21690:21698	916994	1	True				
ANR	917819	AssignmentExpression	* ptr = 0		916994	0		=			
ANR	917820	UnaryOperationExpression	* ptr		916994	0					
ANR	917821	UnaryOperator	*		916994	0					
ANR	917822	Identifier	ptr		916994	1					
ANR	917823	PrimaryExpression	0		916994	1					
ANR	917824	ExpressionStatement	"base = r_num_math ( core -> num , str )"	791:4:21704:21738	916994	2	True				
ANR	917825	AssignmentExpression	"base = r_num_math ( core -> num , str )"		916994	0		=			
ANR	917826	Identifier	base		916994	0					
ANR	917827	CallExpression	"r_num_math ( core -> num , str )"		916994	1					
ANR	917828	Callee	r_num_math		916994	0					
ANR	917829	Identifier	r_num_math		916994	0					
ANR	917830	ArgumentList	core -> num		916994	1					
ANR	917831	Argument	core -> num		916994	0					
ANR	917832	PtrMemberAccess	core -> num		916994	0					
ANR	917833	Identifier	core		916994	0					
ANR	917834	Identifier	num		916994	1					
ANR	917835	Argument	str		916994	1					
ANR	917836	Identifier	str		916994	0					
ANR	917837	ExpressionStatement	"r_flag_foreach_glob ( f , ptr + 1 , adjust_offset , & base )"	792:4:21744:21798	916994	3	True				
ANR	917838	CallExpression	"r_flag_foreach_glob ( f , ptr + 1 , adjust_offset , & base )"		916994	0					
ANR	917839	Callee	r_flag_foreach_glob		916994	0					
ANR	917840	Identifier	r_flag_foreach_glob		916994	0					
ANR	917841	ArgumentList	f		916994	1					
ANR	917842	Argument	f		916994	0					
ANR	917843	Identifier	f		916994	0					
ANR	917844	Argument	ptr + 1		916994	1					
ANR	917845	AdditiveExpression	ptr + 1		916994	0		+			
ANR	917846	Identifier	ptr		916994	0					
ANR	917847	PrimaryExpression	1		916994	1					
ANR	917848	Argument	adjust_offset		916994	2					
ANR	917849	Identifier	adjust_offset		916994	0					
ANR	917850	Argument	& base		916994	3					
ANR	917851	UnaryOperationExpression	& base		916994	0					
ANR	917852	UnaryOperator	&		916994	0					
ANR	917853	Identifier	base		916994	1					
ANR	917854	ElseStatement	else		916994	0					
ANR	917855	CompoundStatement		154:10:3653:3653	916994	0					
ANR	917856	ExpressionStatement	"core -> flags -> base = r_num_math ( core -> num , input + 1 )"	794:4:21816:21867	916994	0	True				
ANR	917857	AssignmentExpression	"core -> flags -> base = r_num_math ( core -> num , input + 1 )"		916994	0		=			
ANR	917858	PtrMemberAccess	core -> flags -> base		916994	0					
ANR	917859	PtrMemberAccess	core -> flags		916994	0					
ANR	917860	Identifier	core		916994	0					
ANR	917861	Identifier	flags		916994	1					
ANR	917862	Identifier	base		916994	1					
ANR	917863	CallExpression	"r_num_math ( core -> num , input + 1 )"		916994	1					
ANR	917864	Callee	r_num_math		916994	0					
ANR	917865	Identifier	r_num_math		916994	0					
ANR	917866	ArgumentList	core -> num		916994	1					
ANR	917867	Argument	core -> num		916994	0					
ANR	917868	PtrMemberAccess	core -> num		916994	0					
ANR	917869	Identifier	core		916994	0					
ANR	917870	Identifier	num		916994	1					
ANR	917871	Argument	input + 1		916994	1					
ANR	917872	AdditiveExpression	input + 1		916994	0		+			
ANR	917873	Identifier	input		916994	0					
ANR	917874	PrimaryExpression	1		916994	1					
ANR	917875	ExpressionStatement	R_FREE ( str )	796:3:21877:21889	916994	5	True				
ANR	917876	CallExpression	R_FREE ( str )		916994	0					
ANR	917877	Callee	R_FREE		916994	0					
ANR	917878	Identifier	R_FREE		916994	0					
ANR	917879	ArgumentList	str		916994	1					
ANR	917880	Argument	str		916994	0					
ANR	917881	Identifier	str		916994	0					
ANR	917882	BreakStatement	break ;	797:3:21894:21899	916994	6	True				
ANR	917883	Label	case '\\0' :	798:2:21903:21912	916994	7	True				
ANR	917884	Statement	r_cons_printf	799:3:21917:21929	916994	8	True				
ANR	917885	Statement	(	799:17:21931:21931	916994	9	True				
ANR	917886	Statement	"""%"""	799:18:21932:21934	916994	10	True				
ANR	917887	Statement	PFMT64d	799:21:21935:21941	916994	11	True				
ANR	917888	Statement	""" 0x%"""	799:28:21942:21947	916994	12	True				
ANR	917889	Statement	PFMT64x	799:34:21948:21954	916994	13	True				
ANR	917890	Statement	"""\\n"""	799:41:21955:21958	916994	14	True				
ANR	917891	Statement	","	799:45:21959:21959	916994	15	True				
ANR	917892	Statement	core	800:4:21965:21968	916994	16	True				
ANR	917893	Statement	->	800:8:21969:21970	916994	17	True				
ANR	917894	Statement	flags	800:10:21971:21975	916994	18	True				
ANR	917895	Statement	->	800:15:21976:21977	916994	19	True				
ANR	917896	Statement	base	800:17:21978:21981	916994	20	True				
ANR	917897	Statement	","	800:21:21982:21982	916994	21	True				
ANR	917898	Statement	core	801:4:21988:21991	916994	22	True				
ANR	917899	Statement	->	801:8:21992:21993	916994	23	True				
ANR	917900	Statement	flags	801:10:21994:21998	916994	24	True				
ANR	917901	Statement	->	801:15:21999:22000	916994	25	True				
ANR	917902	Statement	base	801:17:22001:22004	916994	26	True				
ANR	917903	Statement	)	801:21:22005:22005	916994	27	True				
ANR	917904	ExpressionStatement		801:22:22006:22006	916994	28	True				
ANR	917905	BreakStatement	break ;	802:3:22011:22016	916994	29	True				
ANR	917906	Label	default :	803:2:22020:22027	916994	30	True				
ANR	917907	Identifier	default		916994	0					
ANR	917908	ExpressionStatement	"eprintf ( ""Usage: fb [addr] [[flags*]]\\n"" )"	804:3:22032:22073	916994	31	True				
ANR	917909	CallExpression	"eprintf ( ""Usage: fb [addr] [[flags*]]\\n"" )"		916994	0					
ANR	917910	Callee	eprintf		916994	0					
ANR	917911	Identifier	eprintf		916994	0					
ANR	917912	ArgumentList	"""Usage: fb [addr] [[flags*]]\\n"""		916994	1					
ANR	917913	Argument	"""Usage: fb [addr] [[flags*]]\\n"""		916994	0					
ANR	917914	PrimaryExpression	"""Usage: fb [addr] [[flags*]]\\n"""		916994	0					
ANR	917915	BreakStatement	break ;	805:3:22078:22083	916994	32	True				
ANR	917916	BreakStatement	break ;	807:2:22091:22096	916994	23	True				
ANR	917917	Label	case '+' :	808:1:22099:22107	916994	24	True				
ANR	917918	Label	case ' ' :	809:1:22118:22126	916994	25	True				
ANR	917919	CompoundStatement		224:2:5312:5331	916994	26					
ANR	917920	IdentifierDeclStatement	const char * cstr = r_str_trim_ro ( str ) ;	810:2:22132:22170	916994	0	True				
ANR	917921	IdentifierDecl	* cstr = r_str_trim_ro ( str )		916994	0					
ANR	917922	IdentifierDeclType	const char *		916994	0					
ANR	917923	Identifier	cstr		916994	1					
ANR	917924	AssignmentExpression	* cstr = r_str_trim_ro ( str )		916994	2		=			
ANR	917925	Identifier	cstr		916994	0					
ANR	917926	CallExpression	r_str_trim_ro ( str )		916994	1					
ANR	917927	Callee	r_str_trim_ro		916994	0					
ANR	917928	Identifier	r_str_trim_ro		916994	0					
ANR	917929	ArgumentList	str		916994	1					
ANR	917930	Argument	str		916994	0					
ANR	917931	Identifier	str		916994	0					
ANR	917932	IdentifierDeclStatement	"char * eq = strchr ( cstr , '=' ) ;"	811:2:22174:22203	916994	1	True				
ANR	917933	IdentifierDecl	"* eq = strchr ( cstr , '=' )"		916994	0					
ANR	917934	IdentifierDeclType	char *		916994	0					
ANR	917935	Identifier	eq		916994	1					
ANR	917936	AssignmentExpression	"* eq = strchr ( cstr , '=' )"		916994	2		=			
ANR	917937	Identifier	eq		916994	0					
ANR	917938	CallExpression	"strchr ( cstr , '=' )"		916994	1					
ANR	917939	Callee	strchr		916994	0					
ANR	917940	Identifier	strchr		916994	0					
ANR	917941	ArgumentList	cstr		916994	1					
ANR	917942	Argument	cstr		916994	0					
ANR	917943	Identifier	cstr		916994	0					
ANR	917944	Argument	'='		916994	1					
ANR	917945	PrimaryExpression	'='		916994	0					
ANR	917946	IdentifierDeclStatement	"char * b64 = strstr ( cstr , ""base64:"" ) ;"	812:2:22207:22243	916994	2	True				
ANR	917947	IdentifierDecl	"* b64 = strstr ( cstr , ""base64:"" )"		916994	0					
ANR	917948	IdentifierDeclType	char *		916994	0					
ANR	917949	Identifier	b64		916994	1					
ANR	917950	AssignmentExpression	"* b64 = strstr ( cstr , ""base64:"" )"		916994	2		=			
ANR	917951	Identifier	b64		916994	0					
ANR	917952	CallExpression	"strstr ( cstr , ""base64:"" )"		916994	1					
ANR	917953	Callee	strstr		916994	0					
ANR	917954	Identifier	strstr		916994	0					
ANR	917955	ArgumentList	cstr		916994	1					
ANR	917956	Argument	cstr		916994	0					
ANR	917957	Identifier	cstr		916994	0					
ANR	917958	Argument	"""base64:"""		916994	1					
ANR	917959	PrimaryExpression	"""base64:"""		916994	0					
ANR	917960	IdentifierDeclStatement	"char * s = strchr ( cstr , ' ' ) ;"	813:2:22247:22275	916994	3	True				
ANR	917961	IdentifierDecl	"* s = strchr ( cstr , ' ' )"		916994	0					
ANR	917962	IdentifierDeclType	char *		916994	0					
ANR	917963	Identifier	s		916994	1					
ANR	917964	AssignmentExpression	"* s = strchr ( cstr , ' ' )"		916994	2		=			
ANR	917965	Identifier	s		916994	0					
ANR	917966	CallExpression	"strchr ( cstr , ' ' )"		916994	1					
ANR	917967	Callee	strchr		916994	0					
ANR	917968	Identifier	strchr		916994	0					
ANR	917969	ArgumentList	cstr		916994	1					
ANR	917970	Argument	cstr		916994	0					
ANR	917971	Identifier	cstr		916994	0					
ANR	917972	Argument	' '		916994	1					
ANR	917973	PrimaryExpression	' '		916994	0					
ANR	917974	IdentifierDeclStatement	"char * s2 = NULL , * s3 = NULL ;"	814:2:22279:22306	916994	4	True				
ANR	917975	IdentifierDecl	* s2 = NULL		916994	0					
ANR	917976	IdentifierDeclType	char *		916994	0					
ANR	917977	Identifier	s2		916994	1					
ANR	917978	AssignmentExpression	* s2 = NULL		916994	2		=			
ANR	917979	Identifier	NULL		916994	0					
ANR	917980	Identifier	NULL		916994	1					
ANR	917981	IdentifierDecl	* s3 = NULL		916994	1					
ANR	917982	IdentifierDeclType	char *		916994	0					
ANR	917983	Identifier	s3		916994	1					
ANR	917984	AssignmentExpression	* s3 = NULL		916994	2		=			
ANR	917985	Identifier	NULL		916994	0					
ANR	917986	Identifier	NULL		916994	1					
ANR	917987	IdentifierDeclStatement	char * comment = NULL ;	815:2:22310:22330	916994	5	True				
ANR	917988	IdentifierDecl	* comment = NULL		916994	0					
ANR	917989	IdentifierDeclType	char *		916994	0					
ANR	917990	Identifier	comment		916994	1					
ANR	917991	AssignmentExpression	* comment = NULL		916994	2		=			
ANR	917992	Identifier	NULL		916994	0					
ANR	917993	Identifier	NULL		916994	1					
ANR	917994	IdentifierDeclStatement	bool comment_needs_free = false ;	816:2:22334:22365	916994	6	True				
ANR	917995	IdentifierDecl	comment_needs_free = false		916994	0					
ANR	917996	IdentifierDeclType	bool		916994	0					
ANR	917997	Identifier	comment_needs_free		916994	1					
ANR	917998	AssignmentExpression	comment_needs_free = false		916994	2		=			
ANR	917999	Identifier	false		916994	0					
ANR	918000	Identifier	false		916994	1					
ANR	918001	IdentifierDeclStatement	ut32 bsze = 1 ;	817:2:22369:22382	916994	7	True				
ANR	918002	IdentifierDecl	bsze = 1		916994	0					
ANR	918003	IdentifierDeclType	ut32		916994	0					
ANR	918004	Identifier	bsze		916994	1					
ANR	918005	AssignmentExpression	bsze = 1		916994	2		=			
ANR	918006	Identifier	bsze		916994	0					
ANR	918007	PrimaryExpression	1		916994	1					
ANR	918008	IfStatement	if ( * cstr == '.' )		916994	8					
ANR	918009	Condition	* cstr == '.'	821:6:22552:22563	916994	0	True				
ANR	918010	EqualityExpression	* cstr == '.'		916994	0		==			
ANR	918011	UnaryOperationExpression	* cstr		916994	0					
ANR	918012	UnaryOperator	*		916994	0					
ANR	918013	Identifier	cstr		916994	1					
ANR	918014	PrimaryExpression	'.'		916994	1					
ANR	918015	CompoundStatement		182:20:4409:4409	916994	1					
ANR	918016	ExpressionStatement	input ++	822:3:22571:22578	916994	0	True				
ANR	918017	PostIncDecOperationExpression	input ++		916994	0					
ANR	918018	Identifier	input		916994	0					
ANR	918019	IncDec	++		916994	1					
ANR	918020	GotoStatement	goto rep ;	823:3:22583:22591	916994	1	True				
ANR	918021	Identifier	rep		916994	0					
ANR	918022	IfStatement	if ( eq && ! ( b64 && eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) ) ) )		916994	9					
ANR	918023	Condition	eq && ! ( b64 && eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) ) )	826:6:22629:22706	916994	0	True				
ANR	918024	AndExpression	eq && ! ( b64 && eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) ) )		916994	0		&&			
ANR	918025	Identifier	eq		916994	0					
ANR	918026	UnaryOperationExpression	! ( b64 && eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) ) )		916994	1					
ANR	918027	UnaryOperator	!		916994	0					
ANR	918028	AndExpression	b64 && eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) )		916994	1		&&			
ANR	918029	Identifier	b64		916994	0					
ANR	918030	AndExpression	eq > b64 && ( eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' ) )		916994	1		&&			
ANR	918031	RelationalExpression	eq > b64		916994	0		>			
ANR	918032	Identifier	eq		916994	0					
ANR	918033	Identifier	b64		916994	1					
ANR	918034	OrExpression	eq [ 1 ] == '\\0' || ( eq [ 1 ] == '=' && eq [ 2 ] == '\\0' )		916994	1		||			
ANR	918035	EqualityExpression	eq [ 1 ] == '\\0'		916994	0		==			
ANR	918036	ArrayIndexing	eq [ 1 ]		916994	0					
ANR	918037	Identifier	eq		916994	0					
ANR	918038	PrimaryExpression	1		916994	1					
ANR	918039	PrimaryExpression	'\\0'		916994	1					
ANR	918040	AndExpression	eq [ 1 ] == '=' && eq [ 2 ] == '\\0'		916994	1		&&			
ANR	918041	EqualityExpression	eq [ 1 ] == '='		916994	0		==			
ANR	918042	ArrayIndexing	eq [ 1 ]		916994	0					
ANR	918043	Identifier	eq		916994	0					
ANR	918044	PrimaryExpression	1		916994	1					
ANR	918045	PrimaryExpression	'='		916994	1					
ANR	918046	EqualityExpression	eq [ 2 ] == '\\0'		916994	1		==			
ANR	918047	ArrayIndexing	eq [ 2 ]		916994	0					
ANR	918048	Identifier	eq		916994	0					
ANR	918049	PrimaryExpression	2		916994	1					
ANR	918050	PrimaryExpression	'\\0'		916994	1					
ANR	918051	CompoundStatement		187:86:4552:4552	916994	1					
ANR	918052	ExpressionStatement	* eq = 0	828:3:22779:22786	916994	0	True				
ANR	918053	AssignmentExpression	* eq = 0		916994	0		=			
ANR	918054	UnaryOperationExpression	* eq		916994	0					
ANR	918055	UnaryOperator	*		916994	0					
ANR	918056	Identifier	eq		916994	1					
ANR	918057	PrimaryExpression	0		916994	1					
ANR	918058	ExpressionStatement	"off = r_num_math ( core -> num , eq + 1 )"	829:3:22791:22827	916994	1	True				
ANR	918059	AssignmentExpression	"off = r_num_math ( core -> num , eq + 1 )"		916994	0		=			
ANR	918060	Identifier	off		916994	0					
ANR	918061	CallExpression	"r_num_math ( core -> num , eq + 1 )"		916994	1					
ANR	918062	Callee	r_num_math		916994	0					
ANR	918063	Identifier	r_num_math		916994	0					
ANR	918064	ArgumentList	core -> num		916994	1					
ANR	918065	Argument	core -> num		916994	0					
ANR	918066	PtrMemberAccess	core -> num		916994	0					
ANR	918067	Identifier	core		916994	0					
ANR	918068	Identifier	num		916994	1					
ANR	918069	Argument	eq + 1		916994	1					
ANR	918070	AdditiveExpression	eq + 1		916994	0		+			
ANR	918071	Identifier	eq		916994	0					
ANR	918072	PrimaryExpression	1		916994	1					
ANR	918073	IfStatement	if ( s )		916994	10					
ANR	918074	Condition	s	831:6:22839:22839	916994	0	True				
ANR	918075	Identifier	s		916994	0					
ANR	918076	CompoundStatement		192:9:4685:4685	916994	1					
ANR	918077	ExpressionStatement	* s = '\\0'	832:3:22847:22856	916994	0	True				
ANR	918078	AssignmentExpression	* s = '\\0'		916994	0		=			
ANR	918079	UnaryOperationExpression	* s		916994	0					
ANR	918080	UnaryOperator	*		916994	0					
ANR	918081	Identifier	s		916994	1					
ANR	918082	PrimaryExpression	'\\0'		916994	1					
ANR	918083	ExpressionStatement	"s2 = strchr ( s + 1 , ' ' )"	833:3:22861:22885	916994	1	True				
ANR	918084	AssignmentExpression	"s2 = strchr ( s + 1 , ' ' )"		916994	0		=			
ANR	918085	Identifier	s2		916994	0					
ANR	918086	CallExpression	"strchr ( s + 1 , ' ' )"		916994	1					
ANR	918087	Callee	strchr		916994	0					
ANR	918088	Identifier	strchr		916994	0					
ANR	918089	ArgumentList	s + 1		916994	1					
ANR	918090	Argument	s + 1		916994	0					
ANR	918091	AdditiveExpression	s + 1		916994	0		+			
ANR	918092	Identifier	s		916994	0					
ANR	918093	PrimaryExpression	1		916994	1					
ANR	918094	Argument	' '		916994	1					
ANR	918095	PrimaryExpression	' '		916994	0					
ANR	918096	IfStatement	if ( s2 )		916994	2					
ANR	918097	Condition	s2	834:7:22894:22895	916994	0	True				
ANR	918098	Identifier	s2		916994	0					
ANR	918099	CompoundStatement		195:11:4741:4741	916994	1					
ANR	918100	ExpressionStatement	* s2 = '\\0'	835:4:22904:22914	916994	0	True				
ANR	918101	AssignmentExpression	* s2 = '\\0'		916994	0		=			
ANR	918102	UnaryOperationExpression	* s2		916994	0					
ANR	918103	UnaryOperator	*		916994	0					
ANR	918104	Identifier	s2		916994	1					
ANR	918105	PrimaryExpression	'\\0'		916994	1					
ANR	918106	IfStatement	if ( s2 [ 1 ] && s2 [ 2 ] )		916994	1					
ANR	918107	Condition	s2 [ 1 ] && s2 [ 2 ]	836:8:22924:22937	916994	0	True				
ANR	918108	AndExpression	s2 [ 1 ] && s2 [ 2 ]		916994	0		&&			
ANR	918109	ArrayIndexing	s2 [ 1 ]		916994	0					
ANR	918110	Identifier	s2		916994	0					
ANR	918111	PrimaryExpression	1		916994	1					
ANR	918112	ArrayIndexing	s2 [ 2 ]		916994	1					
ANR	918113	Identifier	s2		916994	0					
ANR	918114	PrimaryExpression	2		916994	1					
ANR	918115	CompoundStatement		197:24:4783:4783	916994	1					
ANR	918116	ExpressionStatement	"off = r_num_math ( core -> num , s2 + 1 )"	837:5:22947:22983	916994	0	True				
ANR	918117	AssignmentExpression	"off = r_num_math ( core -> num , s2 + 1 )"		916994	0		=			
ANR	918118	Identifier	off		916994	0					
ANR	918119	CallExpression	"r_num_math ( core -> num , s2 + 1 )"		916994	1					
ANR	918120	Callee	r_num_math		916994	0					
ANR	918121	Identifier	r_num_math		916994	0					
ANR	918122	ArgumentList	core -> num		916994	1					
ANR	918123	Argument	core -> num		916994	0					
ANR	918124	PtrMemberAccess	core -> num		916994	0					
ANR	918125	Identifier	core		916994	0					
ANR	918126	Identifier	num		916994	1					
ANR	918127	Argument	s2 + 1		916994	1					
ANR	918128	AdditiveExpression	s2 + 1		916994	0		+			
ANR	918129	Identifier	s2		916994	0					
ANR	918130	PrimaryExpression	1		916994	1					
ANR	918131	ExpressionStatement	"s3 = strchr ( s2 + 1 , ' ' )"	839:4:22995:23020	916994	2	True				
ANR	918132	AssignmentExpression	"s3 = strchr ( s2 + 1 , ' ' )"		916994	0		=			
ANR	918133	Identifier	s3		916994	0					
ANR	918134	CallExpression	"strchr ( s2 + 1 , ' ' )"		916994	1					
ANR	918135	Callee	strchr		916994	0					
ANR	918136	Identifier	strchr		916994	0					
ANR	918137	ArgumentList	s2 + 1		916994	1					
ANR	918138	Argument	s2 + 1		916994	0					
ANR	918139	AdditiveExpression	s2 + 1		916994	0		+			
ANR	918140	Identifier	s2		916994	0					
ANR	918141	PrimaryExpression	1		916994	1					
ANR	918142	Argument	' '		916994	1					
ANR	918143	PrimaryExpression	' '		916994	0					
ANR	918144	IfStatement	if ( s3 )		916994	3					
ANR	918145	Condition	s3	840:8:23030:23031	916994	0	True				
ANR	918146	Identifier	s3		916994	0					
ANR	918147	CompoundStatement		201:12:4877:4877	916994	1					
ANR	918148	ExpressionStatement	* s3 = '\\0'	841:5:23041:23051	916994	0	True				
ANR	918149	AssignmentExpression	* s3 = '\\0'		916994	0		=			
ANR	918150	UnaryOperationExpression	* s3		916994	0					
ANR	918151	UnaryOperator	*		916994	0					
ANR	918152	Identifier	s3		916994	1					
ANR	918153	PrimaryExpression	'\\0'		916994	1					
ANR	918154	IfStatement	"if ( ! strncmp ( s3 + 1 , ""base64:"" , 7 ) )"		916994	1					
ANR	918155	Condition	"! strncmp ( s3 + 1 , ""base64:"" , 7 )"	842:9:23062:23092	916994	0	True				
ANR	918156	UnaryOperationExpression	"! strncmp ( s3 + 1 , ""base64:"" , 7 )"		916994	0					
ANR	918157	UnaryOperator	!		916994	0					
ANR	918158	CallExpression	"strncmp ( s3 + 1 , ""base64:"" , 7 )"		916994	1					
ANR	918159	Callee	strncmp		916994	0					
ANR	918160	Identifier	strncmp		916994	0					
ANR	918161	ArgumentList	s3 + 1		916994	1					
ANR	918162	Argument	s3 + 1		916994	0					
ANR	918163	AdditiveExpression	s3 + 1		916994	0		+			
ANR	918164	Identifier	s3		916994	0					
ANR	918165	PrimaryExpression	1		916994	1					
ANR	918166	Argument	"""base64:"""		916994	1					
ANR	918167	PrimaryExpression	"""base64:"""		916994	0					
ANR	918168	Argument	7		916994	2					
ANR	918169	PrimaryExpression	7		916994	0					
ANR	918170	CompoundStatement		203:42:4938:4938	916994	1					
ANR	918171	ExpressionStatement	"comment = ( char * ) r_base64_decode_dyn ( s3 + 8 , - 1 )"	843:6:23103:23154	916994	0	True				
ANR	918172	AssignmentExpression	"comment = ( char * ) r_base64_decode_dyn ( s3 + 8 , - 1 )"		916994	0		=			
ANR	918173	Identifier	comment		916994	0					
ANR	918174	CastExpression	"( char * ) r_base64_decode_dyn ( s3 + 8 , - 1 )"		916994	1					
ANR	918175	CastTarget	char *		916994	0					
ANR	918176	CallExpression	"r_base64_decode_dyn ( s3 + 8 , - 1 )"		916994	1					
ANR	918177	Callee	r_base64_decode_dyn		916994	0					
ANR	918178	Identifier	r_base64_decode_dyn		916994	0					
ANR	918179	ArgumentList	s3 + 8		916994	1					
ANR	918180	Argument	s3 + 8		916994	0					
ANR	918181	AdditiveExpression	s3 + 8		916994	0		+			
ANR	918182	Identifier	s3		916994	0					
ANR	918183	PrimaryExpression	8		916994	1					
ANR	918184	Argument	- 1		916994	1					
ANR	918185	UnaryOperationExpression	- 1		916994	0					
ANR	918186	UnaryOperator	-		916994	0					
ANR	918187	PrimaryExpression	1		916994	1					
ANR	918188	ExpressionStatement	comment_needs_free = true	844:6:23162:23187	916994	1	True				
ANR	918189	AssignmentExpression	comment_needs_free = true		916994	0		=			
ANR	918190	Identifier	comment_needs_free		916994	0					
ANR	918191	Identifier	true		916994	1					
ANR	918192	ElseStatement	else		916994	0					
ANR	918193	IfStatement	if ( s3 [ 1 ] )		916994	0					
ANR	918194	Condition	s3 [ 1 ]	845:16:23205:23209	916994	0	True				
ANR	918195	ArrayIndexing	s3 [ 1 ]		916994	0					
ANR	918196	Identifier	s3		916994	0					
ANR	918197	PrimaryExpression	1		916994	1					
ANR	918198	CompoundStatement		206:23:5055:5055	916994	1					
ANR	918199	ExpressionStatement	comment = s3 + 1	846:6:23220:23236	916994	0	True				
ANR	918200	AssignmentExpression	comment = s3 + 1		916994	0		=			
ANR	918201	Identifier	comment		916994	0					
ANR	918202	AdditiveExpression	s3 + 1		916994	1		+			
ANR	918203	Identifier	s3		916994	0					
ANR	918204	PrimaryExpression	1		916994	1					
ANR	918205	ExpressionStatement	"bsze = ( s [ 1 ] == '=' ) ? 1 : r_num_math ( core -> num , s + 1 )"	851:3:23265:23321	916994	3	True				
ANR	918206	AssignmentExpression	"bsze = ( s [ 1 ] == '=' ) ? 1 : r_num_math ( core -> num , s + 1 )"		916994	0		=			
ANR	918207	Identifier	bsze		916994	0					
ANR	918208	ConditionalExpression	"( s [ 1 ] == '=' ) ? 1 : r_num_math ( core -> num , s + 1 )"		916994	1					
ANR	918209	Condition	s [ 1 ] == '='		916994	0					
ANR	918210	EqualityExpression	s [ 1 ] == '='		916994	0		==			
ANR	918211	ArrayIndexing	s [ 1 ]		916994	0					
ANR	918212	Identifier	s		916994	0					
ANR	918213	PrimaryExpression	1		916994	1					
ANR	918214	PrimaryExpression	'='		916994	1					
ANR	918215	PrimaryExpression	1		916994	1					
ANR	918216	CallExpression	"r_num_math ( core -> num , s + 1 )"		916994	2					
ANR	918217	Callee	r_num_math		916994	0					
ANR	918218	Identifier	r_num_math		916994	0					
ANR	918219	ArgumentList	core -> num		916994	1					
ANR	918220	Argument	core -> num		916994	0					
ANR	918221	PtrMemberAccess	core -> num		916994	0					
ANR	918222	Identifier	core		916994	0					
ANR	918223	Identifier	num		916994	1					
ANR	918224	Argument	s + 1		916994	1					
ANR	918225	AdditiveExpression	s + 1		916994	0		+			
ANR	918226	Identifier	s		916994	0					
ANR	918227	PrimaryExpression	1		916994	1					
ANR	918228	IdentifierDeclStatement	bool addFlag = true ;	863:2:23469:23488	916994	11	True				
ANR	918229	IdentifierDecl	addFlag = true		916994	0					
ANR	918230	IdentifierDeclType	bool		916994	0					
ANR	918231	Identifier	addFlag		916994	1					
ANR	918232	AssignmentExpression	addFlag = true		916994	2		=			
ANR	918233	Identifier	true		916994	0					
ANR	918234	Identifier	true		916994	1					
ANR	918235	IfStatement	if ( input [ 0 ] == '+' )		916994	12					
ANR	918236	Condition	input [ 0 ] == '+'	864:6:23496:23510	916994	0	True				
ANR	918237	EqualityExpression	input [ 0 ] == '+'		916994	0		==			
ANR	918238	ArrayIndexing	input [ 0 ]		916994	0					
ANR	918239	Identifier	input		916994	0					
ANR	918240	PrimaryExpression	0		916994	1					
ANR	918241	PrimaryExpression	'+'		916994	1					
ANR	918242	CompoundStatement		225:23:5356:5356	916994	1					
ANR	918243	IfStatement	"if ( ( item = r_flag_get_at ( core -> flags , off , false ) ) )"		916994	0					
ANR	918244	Condition	"item = r_flag_get_at ( core -> flags , off , false )"	865:7:23522:23569	916994	0	True				
ANR	918245	AssignmentExpression	"item = r_flag_get_at ( core -> flags , off , false )"		916994	0		=			
ANR	918246	Identifier	item		916994	0					
ANR	918247	CallExpression	"r_flag_get_at ( core -> flags , off , false )"		916994	1					
ANR	918248	Callee	r_flag_get_at		916994	0					
ANR	918249	Identifier	r_flag_get_at		916994	0					
ANR	918250	ArgumentList	core -> flags		916994	1					
ANR	918251	Argument	core -> flags		916994	0					
ANR	918252	PtrMemberAccess	core -> flags		916994	0					
ANR	918253	Identifier	core		916994	0					
ANR	918254	Identifier	flags		916994	1					
ANR	918255	Argument	off		916994	1					
ANR	918256	Identifier	off		916994	0					
ANR	918257	Argument	false		916994	2					
ANR	918258	Identifier	false		916994	0					
ANR	918259	CompoundStatement		226:57:5415:5415	916994	1					
ANR	918260	ExpressionStatement	addFlag = false	866:4:23578:23593	916994	0	True				
ANR	918261	AssignmentExpression	addFlag = false		916994	0		=			
ANR	918262	Identifier	addFlag		916994	0					
ANR	918263	Identifier	false		916994	1					
ANR	918264	IfStatement	if ( addFlag )		916994	13					
ANR	918265	Condition	addFlag	869:6:23610:23616	916994	0	True				
ANR	918266	Identifier	addFlag		916994	0					
ANR	918267	CompoundStatement		230:15:5462:5462	916994	1					
ANR	918268	ExpressionStatement	"item = r_flag_set ( core -> flags , cstr , off , bsze )"	870:3:23624:23672	916994	0	True				
ANR	918269	AssignmentExpression	"item = r_flag_set ( core -> flags , cstr , off , bsze )"		916994	0		=			
ANR	918270	Identifier	item		916994	0					
ANR	918271	CallExpression	"r_flag_set ( core -> flags , cstr , off , bsze )"		916994	1					
ANR	918272	Callee	r_flag_set		916994	0					
ANR	918273	Identifier	r_flag_set		916994	0					
ANR	918274	ArgumentList	core -> flags		916994	1					
ANR	918275	Argument	core -> flags		916994	0					
ANR	918276	PtrMemberAccess	core -> flags		916994	0					
ANR	918277	Identifier	core		916994	0					
ANR	918278	Identifier	flags		916994	1					
ANR	918279	Argument	cstr		916994	1					
ANR	918280	Identifier	cstr		916994	0					
ANR	918281	Argument	off		916994	2					
ANR	918282	Identifier	off		916994	0					
ANR	918283	Argument	bsze		916994	3					
ANR	918284	Identifier	bsze		916994	0					
ANR	918285	IfStatement	if ( item && comment )		916994	14					
ANR	918286	Condition	item && comment	872:6:23684:23698	916994	0	True				
ANR	918287	AndExpression	item && comment		916994	0		&&			
ANR	918288	Identifier	item		916994	0					
ANR	918289	Identifier	comment		916994	1					
ANR	918290	CompoundStatement		233:23:5544:5544	916994	1					
ANR	918291	ExpressionStatement	"r_flag_item_set_comment ( item , comment )"	873:3:23706:23745	916994	0	True				
ANR	918292	CallExpression	"r_flag_item_set_comment ( item , comment )"		916994	0					
ANR	918293	Callee	r_flag_item_set_comment		916994	0					
ANR	918294	Identifier	r_flag_item_set_comment		916994	0					
ANR	918295	ArgumentList	item		916994	1					
ANR	918296	Argument	item		916994	0					
ANR	918297	Identifier	item		916994	0					
ANR	918298	Argument	comment		916994	1					
ANR	918299	Identifier	comment		916994	0					
ANR	918300	IfStatement	if ( comment_needs_free )		916994	1					
ANR	918301	Condition	comment_needs_free	874:7:23754:23771	916994	0	True				
ANR	918302	Identifier	comment_needs_free		916994	0					
ANR	918303	CompoundStatement		235:27:5617:5617	916994	1					
ANR	918304	ExpressionStatement	free ( comment )	875:4:23780:23794	916994	0	True				
ANR	918305	CallExpression	free ( comment )		916994	0					
ANR	918306	Callee	free		916994	0					
ANR	918307	Identifier	free		916994	0					
ANR	918308	ArgumentList	comment		916994	1					
ANR	918309	Argument	comment		916994	0					
ANR	918310	Identifier	comment		916994	0					
ANR	918311	BreakStatement	break ;	879:2:23811:23816	916994	27	True				
ANR	918312	Label	case '-' :	880:1:23819:23827	916994	28	True				
ANR	918313	IfStatement	if ( input [ 1 ] == '-' )		916994	29					
ANR	918314	Condition	input [ 1 ] == '-'	881:6:23835:23849	916994	0	True				
ANR	918315	EqualityExpression	input [ 1 ] == '-'		916994	0		==			
ANR	918316	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918317	Identifier	input		916994	0					
ANR	918318	PrimaryExpression	1		916994	1					
ANR	918319	PrimaryExpression	'-'		916994	1					
ANR	918320	CompoundStatement		242:23:5695:5695	916994	1					
ANR	918321	ExpressionStatement	r_flag_unset_all ( core -> flags )	882:3:23857:23887	916994	0	True				
ANR	918322	CallExpression	r_flag_unset_all ( core -> flags )		916994	0					
ANR	918323	Callee	r_flag_unset_all		916994	0					
ANR	918324	Identifier	r_flag_unset_all		916994	0					
ANR	918325	ArgumentList	core -> flags		916994	1					
ANR	918326	Argument	core -> flags		916994	0					
ANR	918327	PtrMemberAccess	core -> flags		916994	0					
ANR	918328	Identifier	core		916994	0					
ANR	918329	Identifier	flags		916994	1					
ANR	918330	ElseStatement	else		916994	0					
ANR	918331	IfStatement	if ( input [ 1 ] )		916994	0					
ANR	918332	Condition	input [ 1 ]	883:13:23902:23909	916994	0	True				
ANR	918333	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918334	Identifier	input		916994	0					
ANR	918335	PrimaryExpression	1		916994	1					
ANR	918336	CompoundStatement		245:3:5760:5808	916994	1					
ANR	918337	IdentifierDeclStatement	const char * flagname = r_str_trim_ro ( input + 1 ) ;	884:3:23917:23965	916994	0	True				
ANR	918338	IdentifierDecl	* flagname = r_str_trim_ro ( input + 1 )		916994	0					
ANR	918339	IdentifierDeclType	const char *		916994	0					
ANR	918340	Identifier	flagname		916994	1					
ANR	918341	AssignmentExpression	* flagname = r_str_trim_ro ( input + 1 )		916994	2		=			
ANR	918342	Identifier	flagname		916994	0					
ANR	918343	CallExpression	r_str_trim_ro ( input + 1 )		916994	1					
ANR	918344	Callee	r_str_trim_ro		916994	0					
ANR	918345	Identifier	r_str_trim_ro		916994	0					
ANR	918346	ArgumentList	input + 1		916994	1					
ANR	918347	Argument	input + 1		916994	0					
ANR	918348	AdditiveExpression	input + 1		916994	0		+			
ANR	918349	Identifier	input		916994	0					
ANR	918350	PrimaryExpression	1		916994	1					
ANR	918351	WhileStatement	while ( * flagname == ' ' )		916994	1					
ANR	918352	Condition	* flagname == ' '	885:10:23977:23990	916994	0	True				
ANR	918353	EqualityExpression	* flagname == ' '		916994	0		==			
ANR	918354	UnaryOperationExpression	* flagname		916994	0					
ANR	918355	UnaryOperator	*		916994	0					
ANR	918356	Identifier	flagname		916994	1					
ANR	918357	PrimaryExpression	' '		916994	1					
ANR	918358	CompoundStatement		246:26:5836:5836	916994	1					
ANR	918359	ExpressionStatement	flagname ++	886:4:23999:24009	916994	0	True				
ANR	918360	PostIncDecOperationExpression	flagname ++		916994	0					
ANR	918361	Identifier	flagname		916994	0					
ANR	918362	IncDec	++		916994	1					
ANR	918363	IfStatement	if ( * flagname == '.' )		916994	2					
ANR	918364	Condition	* flagname == '.'	888:7:24023:24038	916994	0	True				
ANR	918365	EqualityExpression	* flagname == '.'		916994	0		==			
ANR	918366	UnaryOperationExpression	* flagname		916994	0					
ANR	918367	UnaryOperator	*		916994	0					
ANR	918368	Identifier	flagname		916994	1					
ANR	918369	PrimaryExpression	'.'		916994	1					
ANR	918370	CompoundStatement		250:4:5890:5949	916994	1					
ANR	918371	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , off , 0 ) ;"	889:4:24047:24106	916994	0	True				
ANR	918372	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	0					
ANR	918373	IdentifierDeclType	RAnalFunction *		916994	0					
ANR	918374	Identifier	fcn		916994	1					
ANR	918375	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	2		=			
ANR	918376	Identifier	fcn		916994	0					
ANR	918377	CallExpression	"r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	1					
ANR	918378	Callee	r_anal_get_fcn_in		916994	0					
ANR	918379	Identifier	r_anal_get_fcn_in		916994	0					
ANR	918380	ArgumentList	core -> anal		916994	1					
ANR	918381	Argument	core -> anal		916994	0					
ANR	918382	PtrMemberAccess	core -> anal		916994	0					
ANR	918383	Identifier	core		916994	0					
ANR	918384	Identifier	anal		916994	1					
ANR	918385	Argument	off		916994	1					
ANR	918386	Identifier	off		916994	0					
ANR	918387	Argument	0		916994	2					
ANR	918388	PrimaryExpression	0		916994	0					
ANR	918389	IfStatement	if ( fcn )		916994	1					
ANR	918390	Condition	fcn	890:8:24116:24118	916994	0	True				
ANR	918391	Identifier	fcn		916994	0					
ANR	918392	CompoundStatement		251:13:5964:5964	916994	1					
ANR	918393	ExpressionStatement	"r_anal_fcn_label_del ( core -> anal , fcn , flagname + 1 , off )"	891:5:24128:24187	916994	0	True				
ANR	918394	CallExpression	"r_anal_fcn_label_del ( core -> anal , fcn , flagname + 1 , off )"		916994	0					
ANR	918395	Callee	r_anal_fcn_label_del		916994	0					
ANR	918396	Identifier	r_anal_fcn_label_del		916994	0					
ANR	918397	ArgumentList	core -> anal		916994	1					
ANR	918398	Argument	core -> anal		916994	0					
ANR	918399	PtrMemberAccess	core -> anal		916994	0					
ANR	918400	Identifier	core		916994	0					
ANR	918401	Identifier	anal		916994	1					
ANR	918402	Argument	fcn		916994	1					
ANR	918403	Identifier	fcn		916994	0					
ANR	918404	Argument	flagname + 1		916994	2					
ANR	918405	AdditiveExpression	flagname + 1		916994	0		+			
ANR	918406	Identifier	flagname		916994	0					
ANR	918407	PrimaryExpression	1		916994	1					
ANR	918408	Argument	off		916994	3					
ANR	918409	Identifier	off		916994	0					
ANR	918410	ElseStatement	else		916994	0					
ANR	918411	CompoundStatement		253:11:6043:6043	916994	0					
ANR	918412	Statement	eprintf	893:5:24207:24213	916994	0	True				
ANR	918413	Statement	(	893:13:24215:24215	916994	1	True				
ANR	918414	Statement	"""Cannot find function at 0x%08"""	893:14:24216:24246	916994	2	True				
ANR	918415	Statement	PFMT64x	893:45:24247:24253	916994	3	True				
ANR	918416	Statement	"""\\n"""	893:52:24254:24257	916994	4	True				
ANR	918417	Statement	","	893:56:24258:24258	916994	5	True				
ANR	918418	Statement	off	893:58:24260:24262	916994	6	True				
ANR	918419	Statement	)	893:61:24263:24263	916994	7	True				
ANR	918420	ExpressionStatement		893:62:24264:24264	916994	8	True				
ANR	918421	ElseStatement	else		916994	0					
ANR	918422	CompoundStatement		256:10:6125:6125	916994	0					
ANR	918423	IfStatement	"if ( strchr ( flagname , '*' ) )"		916994	0					
ANR	918424	Condition	"strchr ( flagname , '*' )"	896:8:24292:24313	916994	0	True				
ANR	918425	CallExpression	"strchr ( flagname , '*' )"		916994	0					
ANR	918426	Callee	strchr		916994	0					
ANR	918427	Identifier	strchr		916994	0					
ANR	918428	ArgumentList	flagname		916994	1					
ANR	918429	Argument	flagname		916994	0					
ANR	918430	Identifier	flagname		916994	0					
ANR	918431	Argument	'*'		916994	1					
ANR	918432	PrimaryExpression	'*'		916994	0					
ANR	918433	CompoundStatement		257:32:6159:6159	916994	1					
ANR	918434	ExpressionStatement	"r_flag_unset_glob ( core -> flags , flagname )"	897:5:24323:24364	916994	0	True				
ANR	918435	CallExpression	"r_flag_unset_glob ( core -> flags , flagname )"		916994	0					
ANR	918436	Callee	r_flag_unset_glob		916994	0					
ANR	918437	Identifier	r_flag_unset_glob		916994	0					
ANR	918438	ArgumentList	core -> flags		916994	1					
ANR	918439	Argument	core -> flags		916994	0					
ANR	918440	PtrMemberAccess	core -> flags		916994	0					
ANR	918441	Identifier	core		916994	0					
ANR	918442	Identifier	flags		916994	1					
ANR	918443	Argument	flagname		916994	1					
ANR	918444	Identifier	flagname		916994	0					
ANR	918445	ElseStatement	else		916994	0					
ANR	918446	CompoundStatement		259:11:6220:6220	916994	0					
ANR	918447	ExpressionStatement	"r_flag_unset_name ( core -> flags , flagname )"	899:5:24384:24425	916994	0	True				
ANR	918448	CallExpression	"r_flag_unset_name ( core -> flags , flagname )"		916994	0					
ANR	918449	Callee	r_flag_unset_name		916994	0					
ANR	918450	Identifier	r_flag_unset_name		916994	0					
ANR	918451	ArgumentList	core -> flags		916994	1					
ANR	918452	Argument	core -> flags		916994	0					
ANR	918453	PtrMemberAccess	core -> flags		916994	0					
ANR	918454	Identifier	core		916994	0					
ANR	918455	Identifier	flags		916994	1					
ANR	918456	Argument	flagname		916994	1					
ANR	918457	Identifier	flagname		916994	0					
ANR	918458	ElseStatement	else		916994	0					
ANR	918459	CompoundStatement		263:9:6290:6290	916994	0					
ANR	918460	ExpressionStatement	"r_flag_unset_off ( core -> flags , off )"	903:3:24452:24487	916994	0	True				
ANR	918461	CallExpression	"r_flag_unset_off ( core -> flags , off )"		916994	0					
ANR	918462	Callee	r_flag_unset_off		916994	0					
ANR	918463	Identifier	r_flag_unset_off		916994	0					
ANR	918464	ArgumentList	core -> flags		916994	1					
ANR	918465	Argument	core -> flags		916994	0					
ANR	918466	PtrMemberAccess	core -> flags		916994	0					
ANR	918467	Identifier	core		916994	0					
ANR	918468	Identifier	flags		916994	1					
ANR	918469	Argument	off		916994	1					
ANR	918470	Identifier	off		916994	0					
ANR	918471	BreakStatement	break ;	905:2:24495:24500	916994	30	True				
ANR	918472	Label	case '.' :	906:1:24503:24511	916994	31	True				
ANR	918473	ExpressionStatement	input = r_str_trim_ro ( input + 1 ) - 1	907:2:24515:24552	916994	32	True				
ANR	918474	AssignmentExpression	input = r_str_trim_ro ( input + 1 ) - 1		916994	0		=			
ANR	918475	Identifier	input		916994	0					
ANR	918476	AdditiveExpression	r_str_trim_ro ( input + 1 ) - 1		916994	1		-			
ANR	918477	CallExpression	r_str_trim_ro ( input + 1 )		916994	0					
ANR	918478	Callee	r_str_trim_ro		916994	0					
ANR	918479	Identifier	r_str_trim_ro		916994	0					
ANR	918480	ArgumentList	input + 1		916994	1					
ANR	918481	Argument	input + 1		916994	0					
ANR	918482	AdditiveExpression	input + 1		916994	0		+			
ANR	918483	Identifier	input		916994	0					
ANR	918484	PrimaryExpression	1		916994	1					
ANR	918485	PrimaryExpression	1		916994	1					
ANR	918486	IfStatement	if ( input [ 1 ] )		916994	33					
ANR	918487	Condition	input [ 1 ]	908:6:24560:24567	916994	0	True				
ANR	918488	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918489	Identifier	input		916994	0					
ANR	918490	PrimaryExpression	1		916994	1					
ANR	918491	CompoundStatement		269:16:6413:6413	916994	1					
ANR	918492	IfStatement	if ( input [ 1 ] == '*' )		916994	0					
ANR	918493	Condition	input [ 1 ] == '*'	909:7:24579:24593	916994	0	True				
ANR	918494	EqualityExpression	input [ 1 ] == '*'		916994	0		==			
ANR	918495	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918496	Identifier	input		916994	0					
ANR	918497	PrimaryExpression	1		916994	1					
ANR	918498	PrimaryExpression	'*'		916994	1					
ANR	918499	CompoundStatement		270:24:6439:6439	916994	1					
ANR	918500	IfStatement	if ( input [ 2 ] == '*' )		916994	0					
ANR	918501	Condition	input [ 2 ] == '*'	910:8:24606:24620	916994	0	True				
ANR	918502	EqualityExpression	input [ 2 ] == '*'		916994	0		==			
ANR	918503	ArrayIndexing	input [ 2 ]		916994	0					
ANR	918504	Identifier	input		916994	0					
ANR	918505	PrimaryExpression	2		916994	1					
ANR	918506	PrimaryExpression	'*'		916994	1					
ANR	918507	CompoundStatement		271:25:6466:6466	916994	1					
ANR	918508	ExpressionStatement	"r_anal_fcn_labels ( core -> anal , NULL , 1 )"	911:5:24630:24669	916994	0	True				
ANR	918509	CallExpression	"r_anal_fcn_labels ( core -> anal , NULL , 1 )"		916994	0					
ANR	918510	Callee	r_anal_fcn_labels		916994	0					
ANR	918511	Identifier	r_anal_fcn_labels		916994	0					
ANR	918512	ArgumentList	core -> anal		916994	1					
ANR	918513	Argument	core -> anal		916994	0					
ANR	918514	PtrMemberAccess	core -> anal		916994	0					
ANR	918515	Identifier	core		916994	0					
ANR	918516	Identifier	anal		916994	1					
ANR	918517	Argument	NULL		916994	1					
ANR	918518	Identifier	NULL		916994	0					
ANR	918519	Argument	1		916994	2					
ANR	918520	PrimaryExpression	1		916994	0					
ANR	918521	ElseStatement	else		916994	0					
ANR	918522	CompoundStatement		274:5:6532:6591	916994	0					
ANR	918523	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , off , 0 ) ;"	913:5:24689:24748	916994	0	True				
ANR	918524	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	0					
ANR	918525	IdentifierDeclType	RAnalFunction *		916994	0					
ANR	918526	Identifier	fcn		916994	1					
ANR	918527	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	2		=			
ANR	918528	Identifier	fcn		916994	0					
ANR	918529	CallExpression	"r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	1					
ANR	918530	Callee	r_anal_get_fcn_in		916994	0					
ANR	918531	Identifier	r_anal_get_fcn_in		916994	0					
ANR	918532	ArgumentList	core -> anal		916994	1					
ANR	918533	Argument	core -> anal		916994	0					
ANR	918534	PtrMemberAccess	core -> anal		916994	0					
ANR	918535	Identifier	core		916994	0					
ANR	918536	Identifier	anal		916994	1					
ANR	918537	Argument	off		916994	1					
ANR	918538	Identifier	off		916994	0					
ANR	918539	Argument	0		916994	2					
ANR	918540	PrimaryExpression	0		916994	0					
ANR	918541	IfStatement	if ( fcn )		916994	1					
ANR	918542	Condition	fcn	914:9:24759:24761	916994	0	True				
ANR	918543	Identifier	fcn		916994	0					
ANR	918544	CompoundStatement		275:14:6607:6607	916994	1					
ANR	918545	ExpressionStatement	"r_anal_fcn_labels ( core -> anal , fcn , 1 )"	915:6:24772:24810	916994	0	True				
ANR	918546	CallExpression	"r_anal_fcn_labels ( core -> anal , fcn , 1 )"		916994	0					
ANR	918547	Callee	r_anal_fcn_labels		916994	0					
ANR	918548	Identifier	r_anal_fcn_labels		916994	0					
ANR	918549	ArgumentList	core -> anal		916994	1					
ANR	918550	Argument	core -> anal		916994	0					
ANR	918551	PtrMemberAccess	core -> anal		916994	0					
ANR	918552	Identifier	core		916994	0					
ANR	918553	Identifier	anal		916994	1					
ANR	918554	Argument	fcn		916994	1					
ANR	918555	Identifier	fcn		916994	0					
ANR	918556	Argument	1		916994	2					
ANR	918557	PrimaryExpression	1		916994	0					
ANR	918558	ElseStatement	else		916994	0					
ANR	918559	CompoundStatement		277:12:6667:6667	916994	0					
ANR	918560	Statement	eprintf	917:6:24832:24838	916994	0	True				
ANR	918561	Statement	(	917:14:24840:24840	916994	1	True				
ANR	918562	Statement	"""Cannot find function at 0x%08"""	917:15:24841:24871	916994	2	True				
ANR	918563	Statement	PFMT64x	917:46:24872:24878	916994	3	True				
ANR	918564	Statement	"""\\n"""	917:53:24879:24882	916994	4	True				
ANR	918565	Statement	","	917:57:24883:24883	916994	5	True				
ANR	918566	Statement	off	917:59:24885:24887	916994	6	True				
ANR	918567	Statement	)	917:62:24888:24888	916994	7	True				
ANR	918568	ExpressionStatement		917:63:24889:24889	916994	8	True				
ANR	918569	ElseStatement	else		916994	0					
ANR	918570	CompoundStatement		283:4:6824:6883	916994	0					
ANR	918571	IdentifierDeclStatement	char * name = strdup ( input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 ) ) ;	921:4:24920:24975	916994	0	True				
ANR	918572	IdentifierDecl	* name = strdup ( input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 ) )		916994	0					
ANR	918573	IdentifierDeclType	char *		916994	0					
ANR	918574	Identifier	name		916994	1					
ANR	918575	AssignmentExpression	* name = strdup ( input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 ) )		916994	2		=			
ANR	918576	Identifier	name		916994	0					
ANR	918577	CallExpression	strdup ( input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 ) )		916994	1					
ANR	918578	Callee	strdup		916994	0					
ANR	918579	Identifier	strdup		916994	0					
ANR	918580	ArgumentList	input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 )		916994	1					
ANR	918581	Argument	input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 )		916994	0					
ANR	918582	AdditiveExpression	input + ( ( input [ 2 ] == ' ' ) ? 2 : 1 )		916994	0		+			
ANR	918583	Identifier	input		916994	0					
ANR	918584	ConditionalExpression	( input [ 2 ] == ' ' ) ? 2 : 1		916994	1					
ANR	918585	Condition	input [ 2 ] == ' '		916994	0					
ANR	918586	EqualityExpression	input [ 2 ] == ' '		916994	0		==			
ANR	918587	ArrayIndexing	input [ 2 ]		916994	0					
ANR	918588	Identifier	input		916994	0					
ANR	918589	PrimaryExpression	2		916994	1					
ANR	918590	PrimaryExpression	' '		916994	1					
ANR	918591	PrimaryExpression	2		916994	1					
ANR	918592	PrimaryExpression	1		916994	2					
ANR	918593	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , off , 0 ) ;"	922:4:24981:25040	916994	1	True				
ANR	918594	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	0					
ANR	918595	IdentifierDeclType	RAnalFunction *		916994	0					
ANR	918596	Identifier	fcn		916994	1					
ANR	918597	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	2		=			
ANR	918598	Identifier	fcn		916994	0					
ANR	918599	CallExpression	"r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	1					
ANR	918600	Callee	r_anal_get_fcn_in		916994	0					
ANR	918601	Identifier	r_anal_get_fcn_in		916994	0					
ANR	918602	ArgumentList	core -> anal		916994	1					
ANR	918603	Argument	core -> anal		916994	0					
ANR	918604	PtrMemberAccess	core -> anal		916994	0					
ANR	918605	Identifier	core		916994	0					
ANR	918606	Identifier	anal		916994	1					
ANR	918607	Argument	off		916994	1					
ANR	918608	Identifier	off		916994	0					
ANR	918609	Argument	0		916994	2					
ANR	918610	PrimaryExpression	0		916994	0					
ANR	918611	IfStatement	if ( name )		916994	2					
ANR	918612	Condition	name	923:8:25050:25053	916994	0	True				
ANR	918613	Identifier	name		916994	0					
ANR	918614	CompoundStatement		285:5:6906:6935	916994	1					
ANR	918615	IdentifierDeclStatement	"char * eq = strchr ( name , '=' ) ;"	924:5:25063:25092	916994	0	True				
ANR	918616	IdentifierDecl	"* eq = strchr ( name , '=' )"		916994	0					
ANR	918617	IdentifierDeclType	char *		916994	0					
ANR	918618	Identifier	eq		916994	1					
ANR	918619	AssignmentExpression	"* eq = strchr ( name , '=' )"		916994	2		=			
ANR	918620	Identifier	eq		916994	0					
ANR	918621	CallExpression	"strchr ( name , '=' )"		916994	1					
ANR	918622	Callee	strchr		916994	0					
ANR	918623	Identifier	strchr		916994	0					
ANR	918624	ArgumentList	name		916994	1					
ANR	918625	Argument	name		916994	0					
ANR	918626	Identifier	name		916994	0					
ANR	918627	Argument	'='		916994	1					
ANR	918628	PrimaryExpression	'='		916994	0					
ANR	918629	IfStatement	if ( eq )		916994	1					
ANR	918630	Condition	eq	925:9:25103:25104	916994	0	True				
ANR	918631	Identifier	eq		916994	0					
ANR	918632	CompoundStatement		286:13:6950:6950	916994	1					
ANR	918633	ExpressionStatement	* eq ++ = 0	926:6:25115:25125	916994	0	True				
ANR	918634	AssignmentExpression	* eq ++ = 0		916994	0		=			
ANR	918635	UnaryOperationExpression	* eq ++		916994	0					
ANR	918636	UnaryOperator	*		916994	0					
ANR	918637	PostIncDecOperationExpression	eq ++		916994	1					
ANR	918638	Identifier	eq		916994	0					
ANR	918639	IncDec	++		916994	1					
ANR	918640	PrimaryExpression	0		916994	1					
ANR	918641	ExpressionStatement	"off = r_num_math ( core -> num , eq )"	927:6:25133:25165	916994	1	True				
ANR	918642	AssignmentExpression	"off = r_num_math ( core -> num , eq )"		916994	0		=			
ANR	918643	Identifier	off		916994	0					
ANR	918644	CallExpression	"r_num_math ( core -> num , eq )"		916994	1					
ANR	918645	Callee	r_num_math		916994	0					
ANR	918646	Identifier	r_num_math		916994	0					
ANR	918647	ArgumentList	core -> num		916994	1					
ANR	918648	Argument	core -> num		916994	0					
ANR	918649	PtrMemberAccess	core -> num		916994	0					
ANR	918650	Identifier	core		916994	0					
ANR	918651	Identifier	num		916994	1					
ANR	918652	Argument	eq		916994	1					
ANR	918653	Identifier	eq		916994	0					
ANR	918654	ExpressionStatement	r_str_trim ( name )	929:5:25179:25196	916994	2	True				
ANR	918655	CallExpression	r_str_trim ( name )		916994	0					
ANR	918656	Callee	r_str_trim		916994	0					
ANR	918657	Identifier	r_str_trim		916994	0					
ANR	918658	ArgumentList	name		916994	1					
ANR	918659	Argument	name		916994	0					
ANR	918660	Identifier	name		916994	0					
ANR	918661	IfStatement	if ( fcn )		916994	3					
ANR	918662	Condition	fcn	930:9:25207:25209	916994	0	True				
ANR	918663	Identifier	fcn		916994	0					
ANR	918664	CompoundStatement		291:14:7055:7055	916994	1					
ANR	918665	IfStatement	if ( * name == '-' )		916994	0					
ANR	918666	Condition	* name == '-'	931:10:25224:25233	916994	0	True				
ANR	918667	EqualityExpression	* name == '-'		916994	0		==			
ANR	918668	UnaryOperationExpression	* name		916994	0					
ANR	918669	UnaryOperator	*		916994	0					
ANR	918670	Identifier	name		916994	1					
ANR	918671	PrimaryExpression	'-'		916994	1					
ANR	918672	CompoundStatement		292:22:7079:7079	916994	1					
ANR	918673	ExpressionStatement	"r_anal_fcn_label_del ( core -> anal , fcn , name + 1 , off )"	932:7:25245:25298	916994	0	True				
ANR	918674	CallExpression	"r_anal_fcn_label_del ( core -> anal , fcn , name + 1 , off )"		916994	0					
ANR	918675	Callee	r_anal_fcn_label_del		916994	0					
ANR	918676	Identifier	r_anal_fcn_label_del		916994	0					
ANR	918677	ArgumentList	core -> anal		916994	1					
ANR	918678	Argument	core -> anal		916994	0					
ANR	918679	PtrMemberAccess	core -> anal		916994	0					
ANR	918680	Identifier	core		916994	0					
ANR	918681	Identifier	anal		916994	1					
ANR	918682	Argument	fcn		916994	1					
ANR	918683	Identifier	fcn		916994	0					
ANR	918684	Argument	name + 1		916994	2					
ANR	918685	AdditiveExpression	name + 1		916994	0		+			
ANR	918686	Identifier	name		916994	0					
ANR	918687	PrimaryExpression	1		916994	1					
ANR	918688	Argument	off		916994	3					
ANR	918689	Identifier	off		916994	0					
ANR	918690	ElseStatement	else		916994	0					
ANR	918691	CompoundStatement		294:13:7156:7156	916994	0					
ANR	918692	ExpressionStatement	"r_anal_fcn_label_set ( core -> anal , fcn , name , off )"	934:7:25322:25371	916994	0	True				
ANR	918693	CallExpression	"r_anal_fcn_label_set ( core -> anal , fcn , name , off )"		916994	0					
ANR	918694	Callee	r_anal_fcn_label_set		916994	0					
ANR	918695	Identifier	r_anal_fcn_label_set		916994	0					
ANR	918696	ArgumentList	core -> anal		916994	1					
ANR	918697	Argument	core -> anal		916994	0					
ANR	918698	PtrMemberAccess	core -> anal		916994	0					
ANR	918699	Identifier	core		916994	0					
ANR	918700	Identifier	anal		916994	1					
ANR	918701	Argument	fcn		916994	1					
ANR	918702	Identifier	fcn		916994	0					
ANR	918703	Argument	name		916994	2					
ANR	918704	Identifier	name		916994	0					
ANR	918705	Argument	off		916994	3					
ANR	918706	Identifier	off		916994	0					
ANR	918707	ElseStatement	else		916994	0					
ANR	918708	CompoundStatement		297:12:7236:7236	916994	0					
ANR	918709	Statement	eprintf	937:6:25401:25407	916994	0	True				
ANR	918710	Statement	(	937:14:25409:25409	916994	1	True				
ANR	918711	Statement	"""Cannot find function at 0x%08"""	937:15:25410:25440	916994	2	True				
ANR	918712	Statement	PFMT64x	937:46:25441:25447	916994	3	True				
ANR	918713	Statement	"""\\n"""	937:53:25448:25451	916994	4	True				
ANR	918714	Statement	","	937:57:25452:25452	916994	5	True				
ANR	918715	Statement	off	937:59:25454:25456	916994	6	True				
ANR	918716	Statement	)	937:62:25457:25457	916994	7	True				
ANR	918717	ExpressionStatement		937:63:25458:25458	916994	8	True				
ANR	918718	ExpressionStatement	free ( name )	939:5:25472:25483	916994	4	True				
ANR	918719	CallExpression	free ( name )		916994	0					
ANR	918720	Callee	free		916994	0					
ANR	918721	Identifier	free		916994	0					
ANR	918722	ArgumentList	name		916994	1					
ANR	918723	Argument	name		916994	0					
ANR	918724	Identifier	name		916994	0					
ANR	918725	ElseStatement	else		916994	0					
ANR	918726	CompoundStatement		304:3:7353:7412	916994	0					
ANR	918727	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , off , 0 ) ;"	943:3:25510:25569	916994	0	True				
ANR	918728	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	0					
ANR	918729	IdentifierDeclType	RAnalFunction *		916994	0					
ANR	918730	Identifier	fcn		916994	1					
ANR	918731	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	2		=			
ANR	918732	Identifier	fcn		916994	0					
ANR	918733	CallExpression	"r_anal_get_fcn_in ( core -> anal , off , 0 )"		916994	1					
ANR	918734	Callee	r_anal_get_fcn_in		916994	0					
ANR	918735	Identifier	r_anal_get_fcn_in		916994	0					
ANR	918736	ArgumentList	core -> anal		916994	1					
ANR	918737	Argument	core -> anal		916994	0					
ANR	918738	PtrMemberAccess	core -> anal		916994	0					
ANR	918739	Identifier	core		916994	0					
ANR	918740	Identifier	anal		916994	1					
ANR	918741	Argument	off		916994	1					
ANR	918742	Identifier	off		916994	0					
ANR	918743	Argument	0		916994	2					
ANR	918744	PrimaryExpression	0		916994	0					
ANR	918745	IfStatement	if ( fcn )		916994	1					
ANR	918746	Condition	fcn	944:7:25578:25580	916994	0	True				
ANR	918747	Identifier	fcn		916994	0					
ANR	918748	CompoundStatement		305:12:7426:7426	916994	1					
ANR	918749	ExpressionStatement	"r_anal_fcn_labels ( core -> anal , fcn , 0 )"	945:4:25589:25627	916994	0	True				
ANR	918750	CallExpression	"r_anal_fcn_labels ( core -> anal , fcn , 0 )"		916994	0					
ANR	918751	Callee	r_anal_fcn_labels		916994	0					
ANR	918752	Identifier	r_anal_fcn_labels		916994	0					
ANR	918753	ArgumentList	core -> anal		916994	1					
ANR	918754	Argument	core -> anal		916994	0					
ANR	918755	PtrMemberAccess	core -> anal		916994	0					
ANR	918756	Identifier	core		916994	0					
ANR	918757	Identifier	anal		916994	1					
ANR	918758	Argument	fcn		916994	1					
ANR	918759	Identifier	fcn		916994	0					
ANR	918760	Argument	0		916994	2					
ANR	918761	PrimaryExpression	0		916994	0					
ANR	918762	ElseStatement	else		916994	0					
ANR	918763	CompoundStatement		307:10:7482:7482	916994	0					
ANR	918764	ExpressionStatement	"eprintf ( ""Local flags require a function to work."" )"	947:4:25645:25696	916994	0	True				
ANR	918765	CallExpression	"eprintf ( ""Local flags require a function to work."" )"		916994	0					
ANR	918766	Callee	eprintf		916994	0					
ANR	918767	Identifier	eprintf		916994	0					
ANR	918768	ArgumentList	"""Local flags require a function to work."""		916994	1					
ANR	918769	Argument	"""Local flags require a function to work."""		916994	0					
ANR	918770	PrimaryExpression	"""Local flags require a function to work."""		916994	0					
ANR	918771	BreakStatement	break ;	950:2:25709:25714	916994	34	True				
ANR	918772	Label	case 'l' :	951:1:25717:25725	916994	35	True				
ANR	918773	IfStatement	if ( input [ 1 ] == '?' )		916994	36					
ANR	918774	Condition	input [ 1 ] == '?'	952:6:25741:25755	916994	0	True				
ANR	918775	EqualityExpression	input [ 1 ] == '?'		916994	0		==			
ANR	918776	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918777	Identifier	input		916994	0					
ANR	918778	PrimaryExpression	1		916994	1					
ANR	918779	PrimaryExpression	'?'		916994	1					
ANR	918780	CompoundStatement		313:23:7601:7601	916994	1					
ANR	918781	ExpressionStatement	"eprintf ( ""Usage: fl[a] [flagname]??[flagsize]\\n"" )"	953:3:25772:25821	916994	0	True				
ANR	918782	CallExpression	"eprintf ( ""Usage: fl[a] [flagname]??[flagsize]\\n"" )"		916994	0					
ANR	918783	Callee	eprintf		916994	0					
ANR	918784	Identifier	eprintf		916994	0					
ANR	918785	ArgumentList	"""Usage: fl[a] [flagname]??[flagsize]\\n"""		916994	1					
ANR	918786	Argument	"""Usage: fl[a] [flagname]??[flagsize]\\n"""		916994	0					
ANR	918787	PrimaryExpression	"""Usage: fl[a] [flagname]??[flagsize]\\n"""		916994	0					
ANR	918788	ElseStatement	else		916994	0					
ANR	918789	IfStatement	if ( input [ 1 ] == 'a' )		916994	0					
ANR	918790	Condition	input [ 1 ] == 'a'	954:13:25836:25850	916994	0	True				
ANR	918791	EqualityExpression	input [ 1 ] == 'a'		916994	0		==			
ANR	918792	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918793	Identifier	input		916994	0					
ANR	918794	PrimaryExpression	1		916994	1					
ANR	918795	PrimaryExpression	'a'		916994	1					
ANR	918796	CompoundStatement		317:3:7795:7827	916994	1					
ANR	918797	IdentifierDeclStatement	"char * glob = strchr ( input , ' ' ) ;"	956:3:25952:25984	916994	0	True				
ANR	918798	IdentifierDecl	"* glob = strchr ( input , ' ' )"		916994	0					
ANR	918799	IdentifierDeclType	char *		916994	0					
ANR	918800	Identifier	glob		916994	1					
ANR	918801	AssignmentExpression	"* glob = strchr ( input , ' ' )"		916994	2		=			
ANR	918802	Identifier	glob		916994	0					
ANR	918803	CallExpression	"strchr ( input , ' ' )"		916994	1					
ANR	918804	Callee	strchr		916994	0					
ANR	918805	Identifier	strchr		916994	0					
ANR	918806	ArgumentList	input		916994	1					
ANR	918807	Argument	input		916994	0					
ANR	918808	Identifier	input		916994	0					
ANR	918809	Argument	' '		916994	1					
ANR	918810	PrimaryExpression	' '		916994	0					
ANR	918811	IfStatement	if ( glob )		916994	1					
ANR	918812	Condition	glob	957:7:25993:25996	916994	0	True				
ANR	918813	Identifier	glob		916994	0					
ANR	918814	CompoundStatement		318:13:7842:7842	916994	1					
ANR	918815	ExpressionStatement	glob ++	958:4:26005:26011	916994	0	True				
ANR	918816	PostIncDecOperationExpression	glob ++		916994	0					
ANR	918817	Identifier	glob		916994	0					
ANR	918818	IncDec	++		916994	1					
ANR	918819	ExpressionStatement	"r_flag_foreach_glob ( core -> flags , glob , find_flag_after_foreach , core -> flags )"	960:3:26021:26098	916994	2	True				
ANR	918820	CallExpression	"r_flag_foreach_glob ( core -> flags , glob , find_flag_after_foreach , core -> flags )"		916994	0					
ANR	918821	Callee	r_flag_foreach_glob		916994	0					
ANR	918822	Identifier	r_flag_foreach_glob		916994	0					
ANR	918823	ArgumentList	core -> flags		916994	1					
ANR	918824	Argument	core -> flags		916994	0					
ANR	918825	PtrMemberAccess	core -> flags		916994	0					
ANR	918826	Identifier	core		916994	0					
ANR	918827	Identifier	flags		916994	1					
ANR	918828	Argument	glob		916994	1					
ANR	918829	Identifier	glob		916994	0					
ANR	918830	Argument	find_flag_after_foreach		916994	2					
ANR	918831	Identifier	find_flag_after_foreach		916994	0					
ANR	918832	Argument	core -> flags		916994	3					
ANR	918833	PtrMemberAccess	core -> flags		916994	0					
ANR	918834	Identifier	core		916994	0					
ANR	918835	Identifier	flags		916994	1					
ANR	918836	ElseStatement	else		916994	0					
ANR	918837	IfStatement	if ( input [ 1 ] == ' ' )		916994	0					
ANR	918838	Condition	input [ 1 ] == ' '	961:13:26113:26127	916994	0	True				
ANR	918839	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	918840	ArrayIndexing	input [ 1 ]		916994	0					
ANR	918841	Identifier	input		916994	0					
ANR	918842	PrimaryExpression	1		916994	1					
ANR	918843	PrimaryExpression	' '		916994	1					
ANR	918844	CompoundStatement		323:3:7990:8024	916994	1					
ANR	918845	IdentifierDeclStatement	"char * p , * arg = strdup ( input + 2 ) ;"	962:3:26147:26181	916994	0	True				
ANR	918846	IdentifierDecl	* p		916994	0					
ANR	918847	IdentifierDeclType	char *		916994	0					
ANR	918848	Identifier	p		916994	1					
ANR	918849	IdentifierDecl	* arg = strdup ( input + 2 )		916994	1					
ANR	918850	IdentifierDeclType	char *		916994	0					
ANR	918851	Identifier	arg		916994	1					
ANR	918852	AssignmentExpression	* arg = strdup ( input + 2 )		916994	2		=			
ANR	918853	Identifier	arg		916994	0					
ANR	918854	CallExpression	strdup ( input + 2 )		916994	1					
ANR	918855	Callee	strdup		916994	0					
ANR	918856	Identifier	strdup		916994	0					
ANR	918857	ArgumentList	input + 2		916994	1					
ANR	918858	Argument	input + 2		916994	0					
ANR	918859	AdditiveExpression	input + 2		916994	0		+			
ANR	918860	Identifier	input		916994	0					
ANR	918861	PrimaryExpression	2		916994	1					
ANR	918862	ExpressionStatement	r_str_trim_head_tail ( arg )	963:3:26186:26212	916994	1	True				
ANR	918863	CallExpression	r_str_trim_head_tail ( arg )		916994	0					
ANR	918864	Callee	r_str_trim_head_tail		916994	0					
ANR	918865	Identifier	r_str_trim_head_tail		916994	0					
ANR	918866	ArgumentList	arg		916994	1					
ANR	918867	Argument	arg		916994	0					
ANR	918868	Identifier	arg		916994	0					
ANR	918869	ExpressionStatement	"p = strchr ( arg , ' ' )"	964:3:26217:26238	916994	2	True				
ANR	918870	AssignmentExpression	"p = strchr ( arg , ' ' )"		916994	0		=			
ANR	918871	Identifier	p		916994	0					
ANR	918872	CallExpression	"strchr ( arg , ' ' )"		916994	1					
ANR	918873	Callee	strchr		916994	0					
ANR	918874	Identifier	strchr		916994	0					
ANR	918875	ArgumentList	arg		916994	1					
ANR	918876	Argument	arg		916994	0					
ANR	918877	Identifier	arg		916994	0					
ANR	918878	Argument	' '		916994	1					
ANR	918879	PrimaryExpression	' '		916994	0					
ANR	918880	IfStatement	if ( p )		916994	3					
ANR	918881	Condition	p	965:7:26247:26247	916994	0	True				
ANR	918882	Identifier	p		916994	0					
ANR	918883	CompoundStatement		326:10:8093:8093	916994	1					
ANR	918884	ExpressionStatement	* p ++ = 0	966:4:26256:26264	916994	0	True				
ANR	918885	AssignmentExpression	* p ++ = 0		916994	0		=			
ANR	918886	UnaryOperationExpression	* p ++		916994	0					
ANR	918887	UnaryOperator	*		916994	0					
ANR	918888	PostIncDecOperationExpression	p ++		916994	1					
ANR	918889	Identifier	p		916994	0					
ANR	918890	IncDec	++		916994	1					
ANR	918891	PrimaryExpression	0		916994	1					
ANR	918892	ExpressionStatement	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"	967:4:26270:26337	916994	1	True				
ANR	918893	AssignmentExpression	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"		916994	0		=			
ANR	918894	Identifier	item		916994	0					
ANR	918895	CallExpression	"r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"		916994	1					
ANR	918896	Callee	r_flag_get_i		916994	0					
ANR	918897	Identifier	r_flag_get_i		916994	0					
ANR	918898	ArgumentList	core -> flags		916994	1					
ANR	918899	Argument	core -> flags		916994	0					
ANR	918900	PtrMemberAccess	core -> flags		916994	0					
ANR	918901	Identifier	core		916994	0					
ANR	918902	Identifier	flags		916994	1					
ANR	918903	Argument	"r_num_math ( core -> num , arg )"		916994	1					
ANR	918904	CallExpression	"r_num_math ( core -> num , arg )"		916994	0					
ANR	918905	Callee	r_num_math		916994	0					
ANR	918906	Identifier	r_num_math		916994	0					
ANR	918907	ArgumentList	core -> num		916994	1					
ANR	918908	Argument	core -> num		916994	0					
ANR	918909	PtrMemberAccess	core -> num		916994	0					
ANR	918910	Identifier	core		916994	0					
ANR	918911	Identifier	num		916994	1					
ANR	918912	Argument	arg		916994	1					
ANR	918913	Identifier	arg		916994	0					
ANR	918914	IfStatement	if ( item )		916994	2					
ANR	918915	Condition	item	969:8:26347:26350	916994	0	True				
ANR	918916	Identifier	item		916994	0					
ANR	918917	ExpressionStatement	"item -> size = r_num_math ( core -> num , p )"	970:5:26358:26396	916994	1	True				
ANR	918918	AssignmentExpression	"item -> size = r_num_math ( core -> num , p )"		916994	0		=			
ANR	918919	PtrMemberAccess	item -> size		916994	0					
ANR	918920	Identifier	item		916994	0					
ANR	918921	Identifier	size		916994	1					
ANR	918922	CallExpression	"r_num_math ( core -> num , p )"		916994	1					
ANR	918923	Callee	r_num_math		916994	0					
ANR	918924	Identifier	r_num_math		916994	0					
ANR	918925	ArgumentList	core -> num		916994	1					
ANR	918926	Argument	core -> num		916994	0					
ANR	918927	PtrMemberAccess	core -> num		916994	0					
ANR	918928	Identifier	core		916994	0					
ANR	918929	Identifier	num		916994	1					
ANR	918930	Argument	p		916994	1					
ANR	918931	Identifier	p		916994	0					
ANR	918932	ElseStatement	else		916994	0					
ANR	918933	CompoundStatement		332:10:8251:8251	916994	0					
ANR	918934	IfStatement	if ( * arg )		916994	0					
ANR	918935	Condition	* arg	972:8:26418:26421	916994	0	True				
ANR	918936	UnaryOperationExpression	* arg		916994	0					
ANR	918937	UnaryOperator	*		916994	0					
ANR	918938	Identifier	arg		916994	1					
ANR	918939	CompoundStatement		333:14:8267:8267	916994	1					
ANR	918940	ExpressionStatement	"item = r_flag_get_i ( core -> flags , core -> offset )"	973:5:26431:26478	916994	0	True				
ANR	918941	AssignmentExpression	"item = r_flag_get_i ( core -> flags , core -> offset )"		916994	0		=			
ANR	918942	Identifier	item		916994	0					
ANR	918943	CallExpression	"r_flag_get_i ( core -> flags , core -> offset )"		916994	1					
ANR	918944	Callee	r_flag_get_i		916994	0					
ANR	918945	Identifier	r_flag_get_i		916994	0					
ANR	918946	ArgumentList	core -> flags		916994	1					
ANR	918947	Argument	core -> flags		916994	0					
ANR	918948	PtrMemberAccess	core -> flags		916994	0					
ANR	918949	Identifier	core		916994	0					
ANR	918950	Identifier	flags		916994	1					
ANR	918951	Argument	core -> offset		916994	1					
ANR	918952	PtrMemberAccess	core -> offset		916994	0					
ANR	918953	Identifier	core		916994	0					
ANR	918954	Identifier	offset		916994	1					
ANR	918955	IfStatement	if ( item )		916994	1					
ANR	918956	Condition	item	974:9:26489:26492	916994	0	True				
ANR	918957	Identifier	item		916994	0					
ANR	918958	CompoundStatement		335:15:8338:8338	916994	1					
ANR	918959	ExpressionStatement	"item -> size = r_num_math ( core -> num , arg )"	975:6:26503:26543	916994	0	True				
ANR	918960	AssignmentExpression	"item -> size = r_num_math ( core -> num , arg )"		916994	0		=			
ANR	918961	PtrMemberAccess	item -> size		916994	0					
ANR	918962	Identifier	item		916994	0					
ANR	918963	Identifier	size		916994	1					
ANR	918964	CallExpression	"r_num_math ( core -> num , arg )"		916994	1					
ANR	918965	Callee	r_num_math		916994	0					
ANR	918966	Identifier	r_num_math		916994	0					
ANR	918967	ArgumentList	core -> num		916994	1					
ANR	918968	Argument	core -> num		916994	0					
ANR	918969	PtrMemberAccess	core -> num		916994	0					
ANR	918970	Identifier	core		916994	0					
ANR	918971	Identifier	num		916994	1					
ANR	918972	Argument	arg		916994	1					
ANR	918973	Identifier	arg		916994	0					
ANR	918974	ElseStatement	else		916994	0					
ANR	918975	CompoundStatement		338:11:8406:8406	916994	0					
ANR	918976	ExpressionStatement	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"	978:5:26570:26632	916994	0	True				
ANR	918977	AssignmentExpression	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"		916994	0		=			
ANR	918978	Identifier	item		916994	0					
ANR	918979	CallExpression	"r_flag_get_i ( core -> flags , r_num_math ( core -> num , arg ) )"		916994	1					
ANR	918980	Callee	r_flag_get_i		916994	0					
ANR	918981	Identifier	r_flag_get_i		916994	0					
ANR	918982	ArgumentList	core -> flags		916994	1					
ANR	918983	Argument	core -> flags		916994	0					
ANR	918984	PtrMemberAccess	core -> flags		916994	0					
ANR	918985	Identifier	core		916994	0					
ANR	918986	Identifier	flags		916994	1					
ANR	918987	Argument	"r_num_math ( core -> num , arg )"		916994	1					
ANR	918988	CallExpression	"r_num_math ( core -> num , arg )"		916994	0					
ANR	918989	Callee	r_num_math		916994	0					
ANR	918990	Identifier	r_num_math		916994	0					
ANR	918991	ArgumentList	core -> num		916994	1					
ANR	918992	Argument	core -> num		916994	0					
ANR	918993	PtrMemberAccess	core -> num		916994	0					
ANR	918994	Identifier	core		916994	0					
ANR	918995	Identifier	num		916994	1					
ANR	918996	Argument	arg		916994	1					
ANR	918997	Identifier	arg		916994	0					
ANR	918998	IfStatement	if ( item )		916994	1					
ANR	918999	Condition	item	979:9:26643:26646	916994	0	True				
ANR	919000	Identifier	item		916994	0					
ANR	919001	CompoundStatement		340:15:8492:8492	916994	1					
ANR	919002	Statement	r_cons_printf	980:6:26657:26669	916994	0	True				
ANR	919003	Statement	(	980:20:26671:26671	916994	1	True				
ANR	919004	Statement	"""0x%08"""	980:21:26672:26678	916994	2	True				
ANR	919005	Statement	PFMT64x	980:28:26679:26685	916994	3	True				
ANR	919006	Statement	"""\\n"""	980:35:26686:26689	916994	4	True				
ANR	919007	Statement	","	980:39:26690:26690	916994	5	True				
ANR	919008	Statement	item	980:41:26692:26695	916994	6	True				
ANR	919009	Statement	->	980:45:26696:26697	916994	7	True				
ANR	919010	Statement	size	980:47:26698:26701	916994	8	True				
ANR	919011	Statement	)	980:51:26702:26702	916994	9	True				
ANR	919012	ExpressionStatement		980:52:26703:26703	916994	10	True				
ANR	919013	ExpressionStatement	free ( arg )	984:3:26726:26736	916994	4	True				
ANR	919014	CallExpression	free ( arg )		916994	0					
ANR	919015	Callee	free		916994	0					
ANR	919016	Identifier	free		916994	0					
ANR	919017	ArgumentList	arg		916994	1					
ANR	919018	Argument	arg		916994	0					
ANR	919019	Identifier	arg		916994	0					
ANR	919020	ElseStatement	else		916994	0					
ANR	919021	CompoundStatement		346:9:8590:8590	916994	0					
ANR	919022	ExpressionStatement	"item = r_flag_get_i ( core -> flags , core -> offset )"	986:3:26760:26807	916994	0	True				
ANR	919023	AssignmentExpression	"item = r_flag_get_i ( core -> flags , core -> offset )"		916994	0		=			
ANR	919024	Identifier	item		916994	0					
ANR	919025	CallExpression	"r_flag_get_i ( core -> flags , core -> offset )"		916994	1					
ANR	919026	Callee	r_flag_get_i		916994	0					
ANR	919027	Identifier	r_flag_get_i		916994	0					
ANR	919028	ArgumentList	core -> flags		916994	1					
ANR	919029	Argument	core -> flags		916994	0					
ANR	919030	PtrMemberAccess	core -> flags		916994	0					
ANR	919031	Identifier	core		916994	0					
ANR	919032	Identifier	flags		916994	1					
ANR	919033	Argument	core -> offset		916994	1					
ANR	919034	PtrMemberAccess	core -> offset		916994	0					
ANR	919035	Identifier	core		916994	0					
ANR	919036	Identifier	offset		916994	1					
ANR	919037	IfStatement	if ( item )		916994	1					
ANR	919038	Condition	item	987:7:26816:26819	916994	0	True				
ANR	919039	Identifier	item		916994	0					
ANR	919040	Statement	r_cons_printf	988:4:26826:26838	916994	1	True				
ANR	919041	Statement	(	988:18:26840:26840	916994	2	True				
ANR	919042	Statement	"""0x%08"""	988:19:26841:26847	916994	3	True				
ANR	919043	Statement	PFMT64x	988:26:26848:26854	916994	4	True				
ANR	919044	Statement	"""\\n"""	988:33:26855:26858	916994	5	True				
ANR	919045	Statement	","	988:37:26859:26859	916994	6	True				
ANR	919046	Statement	item	988:39:26861:26864	916994	7	True				
ANR	919047	Statement	->	988:43:26865:26866	916994	8	True				
ANR	919048	Statement	size	988:45:26867:26870	916994	9	True				
ANR	919049	Statement	)	988:49:26871:26871	916994	10	True				
ANR	919050	ExpressionStatement		988:50:26872:26872	916994	11	True				
ANR	919051	BreakStatement	break ;	990:2:26880:26885	916994	37	True				
ANR	919052	Label	case 'd' :	992:1:26894:26902	916994	38	True				
ANR	919053	IfStatement	if ( input [ 1 ] == ' ' )		916994	39					
ANR	919054	Condition	input [ 1 ] == ' '	993:6:26910:26924	916994	0	True				
ANR	919055	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	919056	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919057	Identifier	input		916994	0					
ANR	919058	PrimaryExpression	1		916994	1					
ANR	919059	PrimaryExpression	' '		916994	1					
ANR	919060	CompoundStatement		356:3:8793:8874	916994	1					
ANR	919061	IdentifierDeclStatement	char cmd [ 128 ] ;	994:3:26932:26945	916994	0	True				
ANR	919062	IdentifierDecl	cmd [ 128 ]		916994	0					
ANR	919063	IdentifierDeclType	char [ 128 ]		916994	0					
ANR	919064	Identifier	cmd		916994	1					
ANR	919065	PrimaryExpression	128		916994	2					
ANR	919066	IdentifierDeclStatement	"RFlagItem * item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) ) ;"	995:3:26950:27031	916994	1	True				
ANR	919067	IdentifierDecl	"* item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	0					
ANR	919068	IdentifierDeclType	RFlagItem *		916994	0					
ANR	919069	Identifier	item		916994	1					
ANR	919070	AssignmentExpression	"* item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	2		=			
ANR	919071	Identifier	item		916994	0					
ANR	919072	CallExpression	"r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	1					
ANR	919073	Callee	r_flag_get_i		916994	0					
ANR	919074	Identifier	r_flag_get_i		916994	0					
ANR	919075	ArgumentList	core -> flags		916994	1					
ANR	919076	Argument	core -> flags		916994	0					
ANR	919077	PtrMemberAccess	core -> flags		916994	0					
ANR	919078	Identifier	core		916994	0					
ANR	919079	Identifier	flags		916994	1					
ANR	919080	Argument	"r_num_math ( core -> num , input + 2 )"		916994	1					
ANR	919081	CallExpression	"r_num_math ( core -> num , input + 2 )"		916994	0					
ANR	919082	Callee	r_num_math		916994	0					
ANR	919083	Identifier	r_num_math		916994	0					
ANR	919084	ArgumentList	core -> num		916994	1					
ANR	919085	Argument	core -> num		916994	0					
ANR	919086	PtrMemberAccess	core -> num		916994	0					
ANR	919087	Identifier	core		916994	0					
ANR	919088	Identifier	num		916994	1					
ANR	919089	Argument	input + 2		916994	1					
ANR	919090	AdditiveExpression	input + 2		916994	0		+			
ANR	919091	Identifier	input		916994	0					
ANR	919092	PrimaryExpression	2		916994	1					
ANR	919093	IfStatement	if ( item )		916994	2					
ANR	919094	Condition	item	997:7:27040:27043	916994	0	True				
ANR	919095	Identifier	item		916994	0					
ANR	919096	CompoundStatement		358:13:8889:8889	916994	1					
ANR	919097	Statement	r_cons_printf	998:4:27052:27064	916994	0	True				
ANR	919098	Statement	(	998:18:27066:27066	916994	1	True				
ANR	919099	Statement	"""0x%08"""	998:19:27067:27073	916994	2	True				
ANR	919100	Statement	PFMT64x	998:26:27074:27080	916994	3	True				
ANR	919101	Statement	"""\\n"""	998:33:27081:27084	916994	4	True				
ANR	919102	Statement	","	998:37:27085:27085	916994	5	True				
ANR	919103	Statement	item	998:39:27087:27090	916994	6	True				
ANR	919104	Statement	->	998:43:27091:27092	916994	7	True				
ANR	919105	Statement	offset	998:45:27093:27098	916994	8	True				
ANR	919106	Statement	)	998:51:27099:27099	916994	9	True				
ANR	919107	ExpressionStatement		998:52:27100:27100	916994	10	True				
ANR	919108	Statement	snprintf	999:4:27106:27113	916994	11	True				
ANR	919109	Statement	(	999:13:27115:27115	916994	12	True				
ANR	919110	Statement	cmd	999:14:27116:27118	916994	13	True				
ANR	919111	Statement	","	999:17:27119:27119	916994	14	True				
ANR	919112	Statement	sizeof	999:19:27121:27126	916994	15	True				
ANR	919113	Statement	(	999:26:27128:27128	916994	16	True				
ANR	919114	Statement	cmd	999:27:27129:27131	916994	17	True				
ANR	919115	Statement	)	999:30:27132:27132	916994	18	True				
ANR	919116	Statement	","	999:31:27133:27133	916994	19	True				
ANR	919117	Statement	"""pD@%"""	999:33:27135:27140	916994	20	True				
ANR	919118	Statement	PFMT64d	999:39:27141:27147	916994	21	True				
ANR	919119	Statement	""":%"""	999:46:27148:27151	916994	22	True				
ANR	919120	Statement	PFMT64d	999:50:27152:27158	916994	23	True				
ANR	919121	Statement	","	999:57:27159:27159	916994	24	True				
ANR	919122	Statement	item	1000:6:27167:27170	916994	25	True				
ANR	919123	Statement	->	1000:10:27171:27172	916994	26	True				
ANR	919124	Statement	offset	1000:12:27173:27178	916994	27	True				
ANR	919125	Statement	","	1000:18:27179:27179	916994	28	True				
ANR	919126	Statement	item	1000:20:27181:27184	916994	29	True				
ANR	919127	Statement	->	1000:24:27185:27186	916994	30	True				
ANR	919128	Statement	size	1000:26:27187:27190	916994	31	True				
ANR	919129	Statement	)	1000:30:27191:27191	916994	32	True				
ANR	919130	ExpressionStatement		1000:31:27192:27192	916994	33	True				
ANR	919131	ExpressionStatement	"r_core_cmd0 ( core , cmd )"	1001:4:27198:27221	916994	34	True				
ANR	919132	CallExpression	"r_core_cmd0 ( core , cmd )"		916994	0					
ANR	919133	Callee	r_core_cmd0		916994	0					
ANR	919134	Identifier	r_core_cmd0		916994	0					
ANR	919135	ArgumentList	core		916994	1					
ANR	919136	Argument	core		916994	0					
ANR	919137	Identifier	core		916994	0					
ANR	919138	Argument	cmd		916994	1					
ANR	919139	Identifier	cmd		916994	0					
ANR	919140	ElseStatement	else		916994	0					
ANR	919141	ExpressionStatement	"eprintf ( ""Missing arguments\\n"" )"	1003:9:27237:27268	916994	0	True				
ANR	919142	CallExpression	"eprintf ( ""Missing arguments\\n"" )"		916994	0					
ANR	919143	Callee	eprintf		916994	0					
ANR	919144	Identifier	eprintf		916994	0					
ANR	919145	ArgumentList	"""Missing arguments\\n"""		916994	1					
ANR	919146	Argument	"""Missing arguments\\n"""		916994	0					
ANR	919147	PrimaryExpression	"""Missing arguments\\n"""		916994	0					
ANR	919148	BreakStatement	break ;	1004:2:27272:27277	916994	40	True				
ANR	919149	Label	case 'z' :	1006:1:27287:27295	916994	41	True				
ANR	919150	ExpressionStatement	"cmd_fz ( core , input + 1 )"	1007:2:27307:27331	916994	42	True				
ANR	919151	CallExpression	"cmd_fz ( core , input + 1 )"		916994	0					
ANR	919152	Callee	cmd_fz		916994	0					
ANR	919153	Identifier	cmd_fz		916994	0					
ANR	919154	ArgumentList	core		916994	1					
ANR	919155	Argument	core		916994	0					
ANR	919156	Identifier	core		916994	0					
ANR	919157	Argument	input + 1		916994	1					
ANR	919158	AdditiveExpression	input + 1		916994	0		+			
ANR	919159	Identifier	input		916994	0					
ANR	919160	PrimaryExpression	1		916994	1					
ANR	919161	BreakStatement	break ;	1008:2:27335:27340	916994	43	True				
ANR	919162	Label	case 'x' :	1009:1:27343:27351	916994	44	True				
ANR	919163	IfStatement	if ( input [ 1 ] == ' ' )		916994	45					
ANR	919164	Condition	input [ 1 ] == ' '	1010:6:27359:27373	916994	0	True				
ANR	919165	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	919166	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919167	Identifier	input		916994	0					
ANR	919168	PrimaryExpression	1		916994	1					
ANR	919169	PrimaryExpression	' '		916994	1					
ANR	919170	CompoundStatement		373:3:9242:9323	916994	1					
ANR	919171	IdentifierDeclStatement	char cmd [ 128 ] ;	1011:3:27381:27394	916994	0	True				
ANR	919172	IdentifierDecl	cmd [ 128 ]		916994	0					
ANR	919173	IdentifierDeclType	char [ 128 ]		916994	0					
ANR	919174	Identifier	cmd		916994	1					
ANR	919175	PrimaryExpression	128		916994	2					
ANR	919176	IdentifierDeclStatement	"RFlagItem * item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) ) ;"	1012:3:27399:27480	916994	1	True				
ANR	919177	IdentifierDecl	"* item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	0					
ANR	919178	IdentifierDeclType	RFlagItem *		916994	0					
ANR	919179	Identifier	item		916994	1					
ANR	919180	AssignmentExpression	"* item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	2		=			
ANR	919181	Identifier	item		916994	0					
ANR	919182	CallExpression	"r_flag_get_i ( core -> flags , r_num_math ( core -> num , input + 2 ) )"		916994	1					
ANR	919183	Callee	r_flag_get_i		916994	0					
ANR	919184	Identifier	r_flag_get_i		916994	0					
ANR	919185	ArgumentList	core -> flags		916994	1					
ANR	919186	Argument	core -> flags		916994	0					
ANR	919187	PtrMemberAccess	core -> flags		916994	0					
ANR	919188	Identifier	core		916994	0					
ANR	919189	Identifier	flags		916994	1					
ANR	919190	Argument	"r_num_math ( core -> num , input + 2 )"		916994	1					
ANR	919191	CallExpression	"r_num_math ( core -> num , input + 2 )"		916994	0					
ANR	919192	Callee	r_num_math		916994	0					
ANR	919193	Identifier	r_num_math		916994	0					
ANR	919194	ArgumentList	core -> num		916994	1					
ANR	919195	Argument	core -> num		916994	0					
ANR	919196	PtrMemberAccess	core -> num		916994	0					
ANR	919197	Identifier	core		916994	0					
ANR	919198	Identifier	num		916994	1					
ANR	919199	Argument	input + 2		916994	1					
ANR	919200	AdditiveExpression	input + 2		916994	0		+			
ANR	919201	Identifier	input		916994	0					
ANR	919202	PrimaryExpression	2		916994	1					
ANR	919203	IfStatement	if ( item )		916994	2					
ANR	919204	Condition	item	1014:7:27489:27492	916994	0	True				
ANR	919205	Identifier	item		916994	0					
ANR	919206	CompoundStatement		375:13:9338:9338	916994	1					
ANR	919207	Statement	r_cons_printf	1015:4:27501:27513	916994	0	True				
ANR	919208	Statement	(	1015:18:27515:27515	916994	1	True				
ANR	919209	Statement	"""0x%08"""	1015:19:27516:27522	916994	2	True				
ANR	919210	Statement	PFMT64x	1015:26:27523:27529	916994	3	True				
ANR	919211	Statement	"""\\n"""	1015:33:27530:27533	916994	4	True				
ANR	919212	Statement	","	1015:37:27534:27534	916994	5	True				
ANR	919213	Statement	item	1015:39:27536:27539	916994	6	True				
ANR	919214	Statement	->	1015:43:27540:27541	916994	7	True				
ANR	919215	Statement	offset	1015:45:27542:27547	916994	8	True				
ANR	919216	Statement	)	1015:51:27548:27548	916994	9	True				
ANR	919217	ExpressionStatement		1015:52:27549:27549	916994	10	True				
ANR	919218	Statement	snprintf	1016:4:27555:27562	916994	11	True				
ANR	919219	Statement	(	1016:13:27564:27564	916994	12	True				
ANR	919220	Statement	cmd	1016:14:27565:27567	916994	13	True				
ANR	919221	Statement	","	1016:17:27568:27568	916994	14	True				
ANR	919222	Statement	sizeof	1016:19:27570:27575	916994	15	True				
ANR	919223	Statement	(	1016:26:27577:27577	916994	16	True				
ANR	919224	Statement	cmd	1016:27:27578:27580	916994	17	True				
ANR	919225	Statement	)	1016:30:27581:27581	916994	18	True				
ANR	919226	Statement	","	1016:31:27582:27582	916994	19	True				
ANR	919227	Statement	"""px@%"""	1016:33:27584:27589	916994	20	True				
ANR	919228	Statement	PFMT64d	1016:39:27590:27596	916994	21	True				
ANR	919229	Statement	""":%"""	1016:46:27597:27600	916994	22	True				
ANR	919230	Statement	PFMT64d	1016:50:27601:27607	916994	23	True				
ANR	919231	Statement	","	1016:57:27608:27608	916994	24	True				
ANR	919232	Statement	item	1017:6:27616:27619	916994	25	True				
ANR	919233	Statement	->	1017:10:27620:27621	916994	26	True				
ANR	919234	Statement	offset	1017:12:27622:27627	916994	27	True				
ANR	919235	Statement	","	1017:18:27628:27628	916994	28	True				
ANR	919236	Statement	item	1017:20:27630:27633	916994	29	True				
ANR	919237	Statement	->	1017:24:27634:27635	916994	30	True				
ANR	919238	Statement	size	1017:26:27636:27639	916994	31	True				
ANR	919239	Statement	)	1017:30:27640:27640	916994	32	True				
ANR	919240	ExpressionStatement		1017:31:27641:27641	916994	33	True				
ANR	919241	ExpressionStatement	"r_core_cmd0 ( core , cmd )"	1018:4:27647:27670	916994	34	True				
ANR	919242	CallExpression	"r_core_cmd0 ( core , cmd )"		916994	0					
ANR	919243	Callee	r_core_cmd0		916994	0					
ANR	919244	Identifier	r_core_cmd0		916994	0					
ANR	919245	ArgumentList	core		916994	1					
ANR	919246	Argument	core		916994	0					
ANR	919247	Identifier	core		916994	0					
ANR	919248	Argument	cmd		916994	1					
ANR	919249	Identifier	cmd		916994	0					
ANR	919250	ElseStatement	else		916994	0					
ANR	919251	CompoundStatement		381:9:9529:9529	916994	0					
ANR	919252	ExpressionStatement	"eprintf ( ""Missing arguments\\n"" )"	1021:3:27691:27722	916994	0	True				
ANR	919253	CallExpression	"eprintf ( ""Missing arguments\\n"" )"		916994	0					
ANR	919254	Callee	eprintf		916994	0					
ANR	919255	Identifier	eprintf		916994	0					
ANR	919256	ArgumentList	"""Missing arguments\\n"""		916994	1					
ANR	919257	Argument	"""Missing arguments\\n"""		916994	0					
ANR	919258	PrimaryExpression	"""Missing arguments\\n"""		916994	0					
ANR	919259	BreakStatement	break ;	1023:2:27730:27735	916994	46	True				
ANR	919260	Label	case 't' :	1024:1:27738:27746	916994	47	True				
ANR	919261	ExpressionStatement	"cmd_flag_tags ( core , input )"	1025:2:27758:27785	916994	48	True				
ANR	919262	CallExpression	"cmd_flag_tags ( core , input )"		916994	0					
ANR	919263	Callee	cmd_flag_tags		916994	0					
ANR	919264	Identifier	cmd_flag_tags		916994	0					
ANR	919265	ArgumentList	core		916994	1					
ANR	919266	Argument	core		916994	0					
ANR	919267	Identifier	core		916994	0					
ANR	919268	Argument	input		916994	1					
ANR	919269	Identifier	input		916994	0					
ANR	919270	BreakStatement	break ;	1026:2:27789:27794	916994	49	True				
ANR	919271	Label	case 's' :	1027:1:27797:27805	916994	50	True				
ANR	919272	SwitchStatement	switch ( input [ 1 ] )		916994	51					
ANR	919273	Condition	input [ 1 ]	1028:10:27825:27832	916994	0	True				
ANR	919274	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919275	Identifier	input		916994	0					
ANR	919276	PrimaryExpression	1		916994	1					
ANR	919277	CompoundStatement		389:20:9678:9678	916994	1					
ANR	919278	Label	case '?' :	1029:2:27839:27847	916994	0	True				
ANR	919279	ExpressionStatement	"r_core_cmd_help ( core , help_msg_fs )"	1030:3:27852:27887	916994	1	True				
ANR	919280	CallExpression	"r_core_cmd_help ( core , help_msg_fs )"		916994	0					
ANR	919281	Callee	r_core_cmd_help		916994	0					
ANR	919282	Identifier	r_core_cmd_help		916994	0					
ANR	919283	ArgumentList	core		916994	1					
ANR	919284	Argument	core		916994	0					
ANR	919285	Identifier	core		916994	0					
ANR	919286	Argument	help_msg_fs		916994	1					
ANR	919287	Identifier	help_msg_fs		916994	0					
ANR	919288	BreakStatement	break ;	1031:3:27892:27897	916994	2	True				
ANR	919289	Label	case '+' :	1032:2:27901:27909	916994	3	True				
ANR	919290	ExpressionStatement	"r_flag_space_push ( core -> flags , input + 2 )"	1033:3:27914:27954	916994	4	True				
ANR	919291	CallExpression	"r_flag_space_push ( core -> flags , input + 2 )"		916994	0					
ANR	919292	Callee	r_flag_space_push		916994	0					
ANR	919293	Identifier	r_flag_space_push		916994	0					
ANR	919294	ArgumentList	core -> flags		916994	1					
ANR	919295	Argument	core -> flags		916994	0					
ANR	919296	PtrMemberAccess	core -> flags		916994	0					
ANR	919297	Identifier	core		916994	0					
ANR	919298	Identifier	flags		916994	1					
ANR	919299	Argument	input + 2		916994	1					
ANR	919300	AdditiveExpression	input + 2		916994	0		+			
ANR	919301	Identifier	input		916994	0					
ANR	919302	PrimaryExpression	2		916994	1					
ANR	919303	BreakStatement	break ;	1034:3:27959:27964	916994	5	True				
ANR	919304	Label	case 'r' :	1035:2:27968:27976	916994	6	True				
ANR	919305	IfStatement	if ( input [ 2 ] == ' ' )		916994	7					
ANR	919306	Condition	input [ 2 ] == ' '	1036:7:27985:27998	916994	0	True				
ANR	919307	EqualityExpression	input [ 2 ] == ' '		916994	0		==			
ANR	919308	ArrayIndexing	input [ 2 ]		916994	0					
ANR	919309	Identifier	input		916994	0					
ANR	919310	PrimaryExpression	2		916994	1					
ANR	919311	PrimaryExpression	' '		916994	1					
ANR	919312	CompoundStatement		397:23:9844:9844	916994	1					
ANR	919313	ExpressionStatement	"r_flag_space_rename ( core -> flags , NULL , input + 2 )"	1037:4:28007:28057	916994	0	True				
ANR	919314	CallExpression	"r_flag_space_rename ( core -> flags , NULL , input + 2 )"		916994	0					
ANR	919315	Callee	r_flag_space_rename		916994	0					
ANR	919316	Identifier	r_flag_space_rename		916994	0					
ANR	919317	ArgumentList	core -> flags		916994	1					
ANR	919318	Argument	core -> flags		916994	0					
ANR	919319	PtrMemberAccess	core -> flags		916994	0					
ANR	919320	Identifier	core		916994	0					
ANR	919321	Identifier	flags		916994	1					
ANR	919322	Argument	NULL		916994	1					
ANR	919323	Identifier	NULL		916994	0					
ANR	919324	Argument	input + 2		916994	2					
ANR	919325	AdditiveExpression	input + 2		916994	0		+			
ANR	919326	Identifier	input		916994	0					
ANR	919327	PrimaryExpression	2		916994	1					
ANR	919328	ElseStatement	else		916994	0					
ANR	919329	CompoundStatement		399:10:9912:9912	916994	0					
ANR	919330	ExpressionStatement	"eprintf ( ""Usage: fsr [newname]\\n"" )"	1039:4:28075:28109	916994	0	True				
ANR	919331	CallExpression	"eprintf ( ""Usage: fsr [newname]\\n"" )"		916994	0					
ANR	919332	Callee	eprintf		916994	0					
ANR	919333	Identifier	eprintf		916994	0					
ANR	919334	ArgumentList	"""Usage: fsr [newname]\\n"""		916994	1					
ANR	919335	Argument	"""Usage: fsr [newname]\\n"""		916994	0					
ANR	919336	PrimaryExpression	"""Usage: fsr [newname]\\n"""		916994	0					
ANR	919337	BreakStatement	break ;	1041:3:28119:28124	916994	8	True				
ANR	919338	Label	case 's' :	1042:2:28128:28136	916994	9	True				
ANR	919339	ExpressionStatement	"flag_space_stack_list ( core -> flags , input [ 2 ] )"	1043:3:28141:28186	916994	10	True				
ANR	919340	CallExpression	"flag_space_stack_list ( core -> flags , input [ 2 ] )"		916994	0					
ANR	919341	Callee	flag_space_stack_list		916994	0					
ANR	919342	Identifier	flag_space_stack_list		916994	0					
ANR	919343	ArgumentList	core -> flags		916994	1					
ANR	919344	Argument	core -> flags		916994	0					
ANR	919345	PtrMemberAccess	core -> flags		916994	0					
ANR	919346	Identifier	core		916994	0					
ANR	919347	Identifier	flags		916994	1					
ANR	919348	Argument	input [ 2 ]		916994	1					
ANR	919349	ArrayIndexing	input [ 2 ]		916994	0					
ANR	919350	Identifier	input		916994	0					
ANR	919351	PrimaryExpression	2		916994	1					
ANR	919352	BreakStatement	break ;	1044:3:28191:28196	916994	11	True				
ANR	919353	Label	case '-' :	1045:2:28200:28208	916994	12	True				
ANR	919354	SwitchStatement	switch ( input [ 2 ] )		916994	13					
ANR	919355	Condition	input [ 2 ]	1046:11:28221:28228	916994	0	True				
ANR	919356	ArrayIndexing	input [ 2 ]		916994	0					
ANR	919357	Identifier	input		916994	0					
ANR	919358	PrimaryExpression	2		916994	1					
ANR	919359	CompoundStatement		407:21:10074:10074	916994	1					
ANR	919360	Label	case '*' :	1047:3:28236:28244	916994	0	True				
ANR	919361	ExpressionStatement	"r_flag_space_unset ( core -> flags , NULL )"	1048:4:28250:28288	916994	1	True				
ANR	919362	CallExpression	"r_flag_space_unset ( core -> flags , NULL )"		916994	0					
ANR	919363	Callee	r_flag_space_unset		916994	0					
ANR	919364	Identifier	r_flag_space_unset		916994	0					
ANR	919365	ArgumentList	core -> flags		916994	1					
ANR	919366	Argument	core -> flags		916994	0					
ANR	919367	PtrMemberAccess	core -> flags		916994	0					
ANR	919368	Identifier	core		916994	0					
ANR	919369	Identifier	flags		916994	1					
ANR	919370	Argument	NULL		916994	1					
ANR	919371	Identifier	NULL		916994	0					
ANR	919372	BreakStatement	break ;	1049:4:28294:28299	916994	2	True				
ANR	919373	Label	case '.' :	1050:3:28304:28312	916994	3	True				
ANR	919374	CompoundStatement		412:4:10163:10212	916994	4					
ANR	919375	IdentifierDeclStatement	const RSpace * sp = r_flag_space_cur ( core -> flags ) ;	1051:4:28320:28369	916994	0	True				
ANR	919376	IdentifierDecl	* sp = r_flag_space_cur ( core -> flags )		916994	0					
ANR	919377	IdentifierDeclType	const RSpace *		916994	0					
ANR	919378	Identifier	sp		916994	1					
ANR	919379	AssignmentExpression	* sp = r_flag_space_cur ( core -> flags )		916994	2		=			
ANR	919380	Identifier	sp		916994	0					
ANR	919381	CallExpression	r_flag_space_cur ( core -> flags )		916994	1					
ANR	919382	Callee	r_flag_space_cur		916994	0					
ANR	919383	Identifier	r_flag_space_cur		916994	0					
ANR	919384	ArgumentList	core -> flags		916994	1					
ANR	919385	Argument	core -> flags		916994	0					
ANR	919386	PtrMemberAccess	core -> flags		916994	0					
ANR	919387	Identifier	core		916994	0					
ANR	919388	Identifier	flags		916994	1					
ANR	919389	IfStatement	if ( sp )		916994	1					
ANR	919390	Condition	sp	1052:8:28379:28380	916994	0	True				
ANR	919391	Identifier	sp		916994	0					
ANR	919392	CompoundStatement		413:12:10226:10226	916994	1					
ANR	919393	ExpressionStatement	"r_flag_space_unset ( core -> flags , sp -> name )"	1053:5:28390:28432	916994	0	True				
ANR	919394	CallExpression	"r_flag_space_unset ( core -> flags , sp -> name )"		916994	0					
ANR	919395	Callee	r_flag_space_unset		916994	0					
ANR	919396	Identifier	r_flag_space_unset		916994	0					
ANR	919397	ArgumentList	core -> flags		916994	1					
ANR	919398	Argument	core -> flags		916994	0					
ANR	919399	PtrMemberAccess	core -> flags		916994	0					
ANR	919400	Identifier	core		916994	0					
ANR	919401	Identifier	flags		916994	1					
ANR	919402	Argument	sp -> name		916994	1					
ANR	919403	PtrMemberAccess	sp -> name		916994	0					
ANR	919404	Identifier	sp		916994	0					
ANR	919405	Identifier	name		916994	1					
ANR	919406	BreakStatement	break ;	1055:4:28444:28449	916994	2	True				
ANR	919407	Label	case 0 :	1057:3:28459:28465	916994	5	True				
ANR	919408	ExpressionStatement	r_flag_space_pop ( core -> flags )	1058:4:28471:28501	916994	6	True				
ANR	919409	CallExpression	r_flag_space_pop ( core -> flags )		916994	0					
ANR	919410	Callee	r_flag_space_pop		916994	0					
ANR	919411	Identifier	r_flag_space_pop		916994	0					
ANR	919412	ArgumentList	core -> flags		916994	1					
ANR	919413	Argument	core -> flags		916994	0					
ANR	919414	PtrMemberAccess	core -> flags		916994	0					
ANR	919415	Identifier	core		916994	0					
ANR	919416	Identifier	flags		916994	1					
ANR	919417	BreakStatement	break ;	1059:4:28507:28512	916994	7	True				
ANR	919418	Label	default :	1060:3:28517:28524	916994	8	True				
ANR	919419	Identifier	default		916994	0					
ANR	919420	ExpressionStatement	"r_flag_space_unset ( core -> flags , input + 2 )"	1061:4:28530:28571	916994	9	True				
ANR	919421	CallExpression	"r_flag_space_unset ( core -> flags , input + 2 )"		916994	0					
ANR	919422	Callee	r_flag_space_unset		916994	0					
ANR	919423	Identifier	r_flag_space_unset		916994	0					
ANR	919424	ArgumentList	core -> flags		916994	1					
ANR	919425	Argument	core -> flags		916994	0					
ANR	919426	PtrMemberAccess	core -> flags		916994	0					
ANR	919427	Identifier	core		916994	0					
ANR	919428	Identifier	flags		916994	1					
ANR	919429	Argument	input + 2		916994	1					
ANR	919430	AdditiveExpression	input + 2		916994	0		+			
ANR	919431	Identifier	input		916994	0					
ANR	919432	PrimaryExpression	2		916994	1					
ANR	919433	BreakStatement	break ;	1062:4:28577:28582	916994	10	True				
ANR	919434	BreakStatement	break ;	1064:3:28592:28597	916994	14	True				
ANR	919435	Label	case ' ' :	1065:2:28601:28609	916994	15	True				
ANR	919436	ExpressionStatement	"r_flag_space_set ( core -> flags , input + 2 )"	1066:3:28614:28653	916994	16	True				
ANR	919437	CallExpression	"r_flag_space_set ( core -> flags , input + 2 )"		916994	0					
ANR	919438	Callee	r_flag_space_set		916994	0					
ANR	919439	Identifier	r_flag_space_set		916994	0					
ANR	919440	ArgumentList	core -> flags		916994	1					
ANR	919441	Argument	core -> flags		916994	0					
ANR	919442	PtrMemberAccess	core -> flags		916994	0					
ANR	919443	Identifier	core		916994	0					
ANR	919444	Identifier	flags		916994	1					
ANR	919445	Argument	input + 2		916994	1					
ANR	919446	AdditiveExpression	input + 2		916994	0		+			
ANR	919447	Identifier	input		916994	0					
ANR	919448	PrimaryExpression	2		916994	1					
ANR	919449	BreakStatement	break ;	1067:3:28658:28663	916994	17	True				
ANR	919450	Label	case 'm' :	1068:2:28667:28675	916994	18	True				
ANR	919451	CompoundStatement		431:3:10542:10565	916994	19					
ANR	919452	IdentifierDeclStatement	RFlagItem * f ;	1069:5:28682:28694	916994	0	True				
ANR	919453	IdentifierDecl	* f		916994	0					
ANR	919454	IdentifierDeclType	RFlagItem *		916994	0					
ANR	919455	Identifier	f		916994	1					
ANR	919456	IdentifierDeclStatement	ut64 off = core -> offset ;	1070:3:28699:28722	916994	1	True				
ANR	919457	IdentifierDecl	off = core -> offset		916994	0					
ANR	919458	IdentifierDeclType	ut64		916994	0					
ANR	919459	Identifier	off		916994	1					
ANR	919460	AssignmentExpression	off = core -> offset		916994	2		=			
ANR	919461	Identifier	off		916994	0					
ANR	919462	PtrMemberAccess	core -> offset		916994	1					
ANR	919463	Identifier	core		916994	0					
ANR	919464	Identifier	offset		916994	1					
ANR	919465	IfStatement	if ( input [ 2 ] == ' ' )		916994	2					
ANR	919466	Condition	input [ 2 ] == ' '	1071:7:28731:28745	916994	0	True				
ANR	919467	EqualityExpression	input [ 2 ] == ' '		916994	0		==			
ANR	919468	ArrayIndexing	input [ 2 ]		916994	0					
ANR	919469	Identifier	input		916994	0					
ANR	919470	PrimaryExpression	2		916994	1					
ANR	919471	PrimaryExpression	' '		916994	1					
ANR	919472	CompoundStatement		432:24:10591:10591	916994	1					
ANR	919473	ExpressionStatement	"off = r_num_math ( core -> num , input + 2 )"	1072:4:28754:28791	916994	0	True				
ANR	919474	AssignmentExpression	"off = r_num_math ( core -> num , input + 2 )"		916994	0		=			
ANR	919475	Identifier	off		916994	0					
ANR	919476	CallExpression	"r_num_math ( core -> num , input + 2 )"		916994	1					
ANR	919477	Callee	r_num_math		916994	0					
ANR	919478	Identifier	r_num_math		916994	0					
ANR	919479	ArgumentList	core -> num		916994	1					
ANR	919480	Argument	core -> num		916994	0					
ANR	919481	PtrMemberAccess	core -> num		916994	0					
ANR	919482	Identifier	core		916994	0					
ANR	919483	Identifier	num		916994	1					
ANR	919484	Argument	input + 2		916994	1					
ANR	919485	AdditiveExpression	input + 2		916994	0		+			
ANR	919486	Identifier	input		916994	0					
ANR	919487	PrimaryExpression	2		916994	1					
ANR	919488	ExpressionStatement	"f = r_flag_get_i ( core -> flags , off )"	1074:3:28801:28836	916994	3	True				
ANR	919489	AssignmentExpression	"f = r_flag_get_i ( core -> flags , off )"		916994	0		=			
ANR	919490	Identifier	f		916994	0					
ANR	919491	CallExpression	"r_flag_get_i ( core -> flags , off )"		916994	1					
ANR	919492	Callee	r_flag_get_i		916994	0					
ANR	919493	Identifier	r_flag_get_i		916994	0					
ANR	919494	ArgumentList	core -> flags		916994	1					
ANR	919495	Argument	core -> flags		916994	0					
ANR	919496	PtrMemberAccess	core -> flags		916994	0					
ANR	919497	Identifier	core		916994	0					
ANR	919498	Identifier	flags		916994	1					
ANR	919499	Argument	off		916994	1					
ANR	919500	Identifier	off		916994	0					
ANR	919501	IfStatement	if ( f )		916994	4					
ANR	919502	Condition	f	1075:7:28845:28845	916994	0	True				
ANR	919503	Identifier	f		916994	0					
ANR	919504	CompoundStatement		436:10:10691:10691	916994	1					
ANR	919505	ExpressionStatement	f -> space = r_flag_space_cur ( core -> flags )	1076:4:28854:28895	916994	0	True				
ANR	919506	AssignmentExpression	f -> space = r_flag_space_cur ( core -> flags )		916994	0		=			
ANR	919507	PtrMemberAccess	f -> space		916994	0					
ANR	919508	Identifier	f		916994	0					
ANR	919509	Identifier	space		916994	1					
ANR	919510	CallExpression	r_flag_space_cur ( core -> flags )		916994	1					
ANR	919511	Callee	r_flag_space_cur		916994	0					
ANR	919512	Identifier	r_flag_space_cur		916994	0					
ANR	919513	ArgumentList	core -> flags		916994	1					
ANR	919514	Argument	core -> flags		916994	0					
ANR	919515	PtrMemberAccess	core -> flags		916994	0					
ANR	919516	Identifier	core		916994	0					
ANR	919517	Identifier	flags		916994	1					
ANR	919518	ElseStatement	else		916994	0					
ANR	919519	CompoundStatement		438:10:10750:10750	916994	0					
ANR	919520	Statement	eprintf	1078:4:28913:28919	916994	0	True				
ANR	919521	Statement	(	1078:12:28921:28921	916994	1	True				
ANR	919522	Statement	"""Cannot find any flag at 0x%"""	1078:13:28922:28950	916994	2	True				
ANR	919523	Statement	PFMT64x	1078:42:28951:28957	916994	3	True				
ANR	919524	Statement	""".\\n"""	1078:49:28958:28962	916994	4	True				
ANR	919525	Statement	","	1078:54:28963:28963	916994	5	True				
ANR	919526	Statement	off	1078:56:28965:28967	916994	6	True				
ANR	919527	Statement	)	1078:59:28968:28968	916994	7	True				
ANR	919528	ExpressionStatement		1078:60:28969:28969	916994	8	True				
ANR	919529	BreakStatement	break ;	1081:3:28984:28989	916994	20	True				
ANR	919530	Label	case 'j' :	1082:2:28993:29001	916994	21	True				
ANR	919531	Label	case '\\0' :	1083:2:29005:29014	916994	22	True				
ANR	919532	Label	case '*' :	1084:2:29018:29026	916994	23	True				
ANR	919533	Label	case 'q' :	1085:2:29030:29038	916994	24	True				
ANR	919534	ExpressionStatement	"spaces_list ( & core -> flags -> spaces , input [ 1 ] )"	1086:3:29043:29087	916994	25	True				
ANR	919535	CallExpression	"spaces_list ( & core -> flags -> spaces , input [ 1 ] )"		916994	0					
ANR	919536	Callee	spaces_list		916994	0					
ANR	919537	Identifier	spaces_list		916994	0					
ANR	919538	ArgumentList	& core -> flags -> spaces		916994	1					
ANR	919539	Argument	& core -> flags -> spaces		916994	0					
ANR	919540	UnaryOperationExpression	& core -> flags -> spaces		916994	0					
ANR	919541	UnaryOperator	&		916994	0					
ANR	919542	PtrMemberAccess	core -> flags -> spaces		916994	1					
ANR	919543	PtrMemberAccess	core -> flags		916994	0					
ANR	919544	Identifier	core		916994	0					
ANR	919545	Identifier	flags		916994	1					
ANR	919546	Identifier	spaces		916994	1					
ANR	919547	Argument	input [ 1 ]		916994	1					
ANR	919548	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919549	Identifier	input		916994	0					
ANR	919550	PrimaryExpression	1		916994	1					
ANR	919551	BreakStatement	break ;	1087:3:29092:29097	916994	26	True				
ANR	919552	Label	default :	1088:2:29101:29108	916994	27	True				
ANR	919553	Identifier	default		916994	0					
ANR	919554	ExpressionStatement	"spaces_list ( & core -> flags -> spaces , 0 )"	1089:3:29113:29150	916994	28	True				
ANR	919555	CallExpression	"spaces_list ( & core -> flags -> spaces , 0 )"		916994	0					
ANR	919556	Callee	spaces_list		916994	0					
ANR	919557	Identifier	spaces_list		916994	0					
ANR	919558	ArgumentList	& core -> flags -> spaces		916994	1					
ANR	919559	Argument	& core -> flags -> spaces		916994	0					
ANR	919560	UnaryOperationExpression	& core -> flags -> spaces		916994	0					
ANR	919561	UnaryOperator	&		916994	0					
ANR	919562	PtrMemberAccess	core -> flags -> spaces		916994	1					
ANR	919563	PtrMemberAccess	core -> flags		916994	0					
ANR	919564	Identifier	core		916994	0					
ANR	919565	Identifier	flags		916994	1					
ANR	919566	Identifier	spaces		916994	1					
ANR	919567	Argument	0		916994	1					
ANR	919568	PrimaryExpression	0		916994	0					
ANR	919569	BreakStatement	break ;	1090:3:29155:29160	916994	29	True				
ANR	919570	BreakStatement	break ;	1092:2:29168:29173	916994	52	True				
ANR	919571	Label	case 'g' :	1093:1:29176:29184	916994	53	True				
ANR	919572	SwitchStatement	switch ( input [ 1 ] )		916994	54					
ANR	919573	Condition	input [ 1 ]	1094:10:29204:29211	916994	0	True				
ANR	919574	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919575	Identifier	input		916994	0					
ANR	919576	PrimaryExpression	1		916994	1					
ANR	919577	CompoundStatement		455:20:11057:11057	916994	1					
ANR	919578	Label	case '*' :	1095:2:29218:29226	916994	0	True				
ANR	919579	ExpressionStatement	"__flag_graph ( core , r_str_trim_ro ( input + 2 ) , '*' )"	1096:3:29231:29282	916994	1	True				
ANR	919580	CallExpression	"__flag_graph ( core , r_str_trim_ro ( input + 2 ) , '*' )"		916994	0					
ANR	919581	Callee	__flag_graph		916994	0					
ANR	919582	Identifier	__flag_graph		916994	0					
ANR	919583	ArgumentList	core		916994	1					
ANR	919584	Argument	core		916994	0					
ANR	919585	Identifier	core		916994	0					
ANR	919586	Argument	r_str_trim_ro ( input + 2 )		916994	1					
ANR	919587	CallExpression	r_str_trim_ro ( input + 2 )		916994	0					
ANR	919588	Callee	r_str_trim_ro		916994	0					
ANR	919589	Identifier	r_str_trim_ro		916994	0					
ANR	919590	ArgumentList	input + 2		916994	1					
ANR	919591	Argument	input + 2		916994	0					
ANR	919592	AdditiveExpression	input + 2		916994	0		+			
ANR	919593	Identifier	input		916994	0					
ANR	919594	PrimaryExpression	2		916994	1					
ANR	919595	Argument	'*'		916994	2					
ANR	919596	PrimaryExpression	'*'		916994	0					
ANR	919597	BreakStatement	break ;	1097:3:29287:29292	916994	2	True				
ANR	919598	Label	case ' ' :	1098:2:29296:29304	916994	3	True				
ANR	919599	ExpressionStatement	"__flag_graph ( core , r_str_trim_ro ( input + 2 ) , ' ' )"	1099:3:29309:29360	916994	4	True				
ANR	919600	CallExpression	"__flag_graph ( core , r_str_trim_ro ( input + 2 ) , ' ' )"		916994	0					
ANR	919601	Callee	__flag_graph		916994	0					
ANR	919602	Identifier	__flag_graph		916994	0					
ANR	919603	ArgumentList	core		916994	1					
ANR	919604	Argument	core		916994	0					
ANR	919605	Identifier	core		916994	0					
ANR	919606	Argument	r_str_trim_ro ( input + 2 )		916994	1					
ANR	919607	CallExpression	r_str_trim_ro ( input + 2 )		916994	0					
ANR	919608	Callee	r_str_trim_ro		916994	0					
ANR	919609	Identifier	r_str_trim_ro		916994	0					
ANR	919610	ArgumentList	input + 2		916994	1					
ANR	919611	Argument	input + 2		916994	0					
ANR	919612	AdditiveExpression	input + 2		916994	0		+			
ANR	919613	Identifier	input		916994	0					
ANR	919614	PrimaryExpression	2		916994	1					
ANR	919615	Argument	' '		916994	2					
ANR	919616	PrimaryExpression	' '		916994	0					
ANR	919617	BreakStatement	break ;	1100:3:29365:29370	916994	5	True				
ANR	919618	Label	case 0 :	1101:2:29374:29380	916994	6	True				
ANR	919619	ExpressionStatement	"__flag_graph ( core , r_str_trim_ro ( input + 1 ) , 0 )"	1102:3:29385:29434	916994	7	True				
ANR	919620	CallExpression	"__flag_graph ( core , r_str_trim_ro ( input + 1 ) , 0 )"		916994	0					
ANR	919621	Callee	__flag_graph		916994	0					
ANR	919622	Identifier	__flag_graph		916994	0					
ANR	919623	ArgumentList	core		916994	1					
ANR	919624	Argument	core		916994	0					
ANR	919625	Identifier	core		916994	0					
ANR	919626	Argument	r_str_trim_ro ( input + 1 )		916994	1					
ANR	919627	CallExpression	r_str_trim_ro ( input + 1 )		916994	0					
ANR	919628	Callee	r_str_trim_ro		916994	0					
ANR	919629	Identifier	r_str_trim_ro		916994	0					
ANR	919630	ArgumentList	input + 1		916994	1					
ANR	919631	Argument	input + 1		916994	0					
ANR	919632	AdditiveExpression	input + 1		916994	0		+			
ANR	919633	Identifier	input		916994	0					
ANR	919634	PrimaryExpression	1		916994	1					
ANR	919635	Argument	0		916994	2					
ANR	919636	PrimaryExpression	0		916994	0					
ANR	919637	BreakStatement	break ;	1103:3:29439:29444	916994	8	True				
ANR	919638	Label	default :	1104:2:29448:29455	916994	9	True				
ANR	919639	Identifier	default		916994	0					
ANR	919640	ExpressionStatement	"eprintf ( ""Usage: fg[*] ([prefix])\\n"" )"	1105:3:29460:29497	916994	10	True				
ANR	919641	CallExpression	"eprintf ( ""Usage: fg[*] ([prefix])\\n"" )"		916994	0					
ANR	919642	Callee	eprintf		916994	0					
ANR	919643	Identifier	eprintf		916994	0					
ANR	919644	ArgumentList	"""Usage: fg[*] ([prefix])\\n"""		916994	1					
ANR	919645	Argument	"""Usage: fg[*] ([prefix])\\n"""		916994	0					
ANR	919646	PrimaryExpression	"""Usage: fg[*] ([prefix])\\n"""		916994	0					
ANR	919647	BreakStatement	break ;	1106:3:29502:29507	916994	11	True				
ANR	919648	BreakStatement	break ;	1108:2:29515:29520	916994	55	True				
ANR	919649	Label	case 'c' :	1109:1:29523:29531	916994	56	True				
ANR	919650	IfStatement	if ( input [ 1 ] == '?' || input [ 1 ] != ' ' )		916994	57					
ANR	919651	Condition	input [ 1 ] == '?' || input [ 1 ] != ' '	1110:6:29547:29578	916994	0	True				
ANR	919652	OrExpression	input [ 1 ] == '?' || input [ 1 ] != ' '		916994	0		||			
ANR	919653	EqualityExpression	input [ 1 ] == '?'		916994	0		==			
ANR	919654	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919655	Identifier	input		916994	0					
ANR	919656	PrimaryExpression	1		916994	1					
ANR	919657	PrimaryExpression	'?'		916994	1					
ANR	919658	EqualityExpression	input [ 1 ] != ' '		916994	1		!=			
ANR	919659	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919660	Identifier	input		916994	0					
ANR	919661	PrimaryExpression	1		916994	1					
ANR	919662	PrimaryExpression	' '		916994	1					
ANR	919663	CompoundStatement		471:40:11424:11424	916994	1					
ANR	919664	ExpressionStatement	"r_core_cmd_help ( core , help_msg_fc )"	1111:3:29586:29621	916994	0	True				
ANR	919665	CallExpression	"r_core_cmd_help ( core , help_msg_fc )"		916994	0					
ANR	919666	Callee	r_core_cmd_help		916994	0					
ANR	919667	Identifier	r_core_cmd_help		916994	0					
ANR	919668	ArgumentList	core		916994	1					
ANR	919669	Argument	core		916994	0					
ANR	919670	Identifier	core		916994	0					
ANR	919671	Argument	help_msg_fc		916994	1					
ANR	919672	Identifier	help_msg_fc		916994	0					
ANR	919673	ElseStatement	else		916994	0					
ANR	919674	CompoundStatement		477:3:11561:11592	916994	0					
ANR	919675	IdentifierDeclStatement	RFlagItem * fi ;	1113:3:29637:29650	916994	0	True				
ANR	919676	IdentifierDecl	* fi		916994	0					
ANR	919677	IdentifierDeclType	RFlagItem *		916994	0					
ANR	919678	Identifier	fi		916994	1					
ANR	919679	IdentifierDeclStatement	const char * ret ;	1114:3:29655:29670	916994	1	True				
ANR	919680	IdentifierDecl	* ret		916994	0					
ANR	919681	IdentifierDeclType	const char *		916994	0					
ANR	919682	Identifier	ret		916994	1					
ANR	919683	IdentifierDeclStatement	char * arg = r_str_trim_dup ( input + 2 ) ;	1115:3:29675:29713	916994	2	True				
ANR	919684	IdentifierDecl	* arg = r_str_trim_dup ( input + 2 )		916994	0					
ANR	919685	IdentifierDeclType	char *		916994	0					
ANR	919686	Identifier	arg		916994	1					
ANR	919687	AssignmentExpression	* arg = r_str_trim_dup ( input + 2 )		916994	2		=			
ANR	919688	Identifier	arg		916994	0					
ANR	919689	CallExpression	r_str_trim_dup ( input + 2 )		916994	1					
ANR	919690	Callee	r_str_trim_dup		916994	0					
ANR	919691	Identifier	r_str_trim_dup		916994	0					
ANR	919692	ArgumentList	input + 2		916994	1					
ANR	919693	Argument	input + 2		916994	0					
ANR	919694	AdditiveExpression	input + 2		916994	0		+			
ANR	919695	Identifier	input		916994	0					
ANR	919696	PrimaryExpression	2		916994	1					
ANR	919697	IdentifierDeclStatement	"char * color = strchr ( arg , ' ' ) ;"	1116:3:29718:29749	916994	3	True				
ANR	919698	IdentifierDecl	"* color = strchr ( arg , ' ' )"		916994	0					
ANR	919699	IdentifierDeclType	char *		916994	0					
ANR	919700	Identifier	color		916994	1					
ANR	919701	AssignmentExpression	"* color = strchr ( arg , ' ' )"		916994	2		=			
ANR	919702	Identifier	color		916994	0					
ANR	919703	CallExpression	"strchr ( arg , ' ' )"		916994	1					
ANR	919704	Callee	strchr		916994	0					
ANR	919705	Identifier	strchr		916994	0					
ANR	919706	ArgumentList	arg		916994	1					
ANR	919707	Argument	arg		916994	0					
ANR	919708	Identifier	arg		916994	0					
ANR	919709	Argument	' '		916994	1					
ANR	919710	PrimaryExpression	' '		916994	0					
ANR	919711	IfStatement	if ( color && color [ 1 ] )		916994	4					
ANR	919712	Condition	color && color [ 1 ]	1117:7:29758:29774	916994	0	True				
ANR	919713	AndExpression	color && color [ 1 ]		916994	0		&&			
ANR	919714	Identifier	color		916994	0					
ANR	919715	ArrayIndexing	color [ 1 ]		916994	1					
ANR	919716	Identifier	color		916994	0					
ANR	919717	PrimaryExpression	1		916994	1					
ANR	919718	CompoundStatement		478:26:11620:11620	916994	1					
ANR	919719	ExpressionStatement	* color ++ = 0	1118:4:29783:29795	916994	0	True				
ANR	919720	AssignmentExpression	* color ++ = 0		916994	0		=			
ANR	919721	UnaryOperationExpression	* color ++		916994	0					
ANR	919722	UnaryOperator	*		916994	0					
ANR	919723	PostIncDecOperationExpression	color ++		916994	1					
ANR	919724	Identifier	color		916994	0					
ANR	919725	IncDec	++		916994	1					
ANR	919726	PrimaryExpression	0		916994	1					
ANR	919727	ExpressionStatement	"fi = r_flag_get ( core -> flags , arg )"	1120:3:29805:29839	916994	5	True				
ANR	919728	AssignmentExpression	"fi = r_flag_get ( core -> flags , arg )"		916994	0		=			
ANR	919729	Identifier	fi		916994	0					
ANR	919730	CallExpression	"r_flag_get ( core -> flags , arg )"		916994	1					
ANR	919731	Callee	r_flag_get		916994	0					
ANR	919732	Identifier	r_flag_get		916994	0					
ANR	919733	ArgumentList	core -> flags		916994	1					
ANR	919734	Argument	core -> flags		916994	0					
ANR	919735	PtrMemberAccess	core -> flags		916994	0					
ANR	919736	Identifier	core		916994	0					
ANR	919737	Identifier	flags		916994	1					
ANR	919738	Argument	arg		916994	1					
ANR	919739	Identifier	arg		916994	0					
ANR	919740	IfStatement	if ( fi )		916994	6					
ANR	919741	Condition	fi	1121:7:29848:29849	916994	0	True				
ANR	919742	Identifier	fi		916994	0					
ANR	919743	CompoundStatement		482:11:11695:11695	916994	1					
ANR	919744	ExpressionStatement	"ret = r_flag_color ( core -> flags , fi , color )"	1122:4:29858:29901	916994	0	True				
ANR	919745	AssignmentExpression	"ret = r_flag_color ( core -> flags , fi , color )"		916994	0		=			
ANR	919746	Identifier	ret		916994	0					
ANR	919747	CallExpression	"r_flag_color ( core -> flags , fi , color )"		916994	1					
ANR	919748	Callee	r_flag_color		916994	0					
ANR	919749	Identifier	r_flag_color		916994	0					
ANR	919750	ArgumentList	core -> flags		916994	1					
ANR	919751	Argument	core -> flags		916994	0					
ANR	919752	PtrMemberAccess	core -> flags		916994	0					
ANR	919753	Identifier	core		916994	0					
ANR	919754	Identifier	flags		916994	1					
ANR	919755	Argument	fi		916994	1					
ANR	919756	Identifier	fi		916994	0					
ANR	919757	Argument	color		916994	2					
ANR	919758	Identifier	color		916994	0					
ANR	919759	IfStatement	if ( ! color && ret )		916994	1					
ANR	919760	Condition	! color && ret	1123:8:29911:29923	916994	0	True				
ANR	919761	AndExpression	! color && ret		916994	0		&&			
ANR	919762	UnaryOperationExpression	! color		916994	0					
ANR	919763	UnaryOperator	!		916994	0					
ANR	919764	Identifier	color		916994	1					
ANR	919765	Identifier	ret		916994	1					
ANR	919766	ExpressionStatement	r_cons_println ( ret )	1124:5:29931:29951	916994	1	True				
ANR	919767	CallExpression	r_cons_println ( ret )		916994	0					
ANR	919768	Callee	r_cons_println		916994	0					
ANR	919769	Identifier	r_cons_println		916994	0					
ANR	919770	ArgumentList	ret		916994	1					
ANR	919771	Argument	ret		916994	0					
ANR	919772	Identifier	ret		916994	0					
ANR	919773	ElseStatement	else		916994	0					
ANR	919774	CompoundStatement		486:10:11806:11806	916994	0					
ANR	919775	ExpressionStatement	"eprintf ( ""Unknown flag '%s'\\n"" , arg )"	1126:4:29969:30005	916994	0	True				
ANR	919776	CallExpression	"eprintf ( ""Unknown flag '%s'\\n"" , arg )"		916994	0					
ANR	919777	Callee	eprintf		916994	0					
ANR	919778	Identifier	eprintf		916994	0					
ANR	919779	ArgumentList	"""Unknown flag '%s'\\n"""		916994	1					
ANR	919780	Argument	"""Unknown flag '%s'\\n"""		916994	0					
ANR	919781	PrimaryExpression	"""Unknown flag '%s'\\n"""		916994	0					
ANR	919782	Argument	arg		916994	1					
ANR	919783	Identifier	arg		916994	0					
ANR	919784	ExpressionStatement	free ( arg )	1128:3:30015:30025	916994	7	True				
ANR	919785	CallExpression	free ( arg )		916994	0					
ANR	919786	Callee	free		916994	0					
ANR	919787	Identifier	free		916994	0					
ANR	919788	ArgumentList	arg		916994	1					
ANR	919789	Argument	arg		916994	0					
ANR	919790	Identifier	arg		916994	0					
ANR	919791	BreakStatement	break ;	1130:2:30033:30038	916994	58	True				
ANR	919792	Label	case 'C' :	1131:1:30041:30049	916994	59	True				
ANR	919793	IfStatement	if ( input [ 1 ] == ' ' )		916994	60					
ANR	919794	Condition	input [ 1 ] == ' '	1132:6:30065:30079	916994	0	True				
ANR	919795	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	919796	ArrayIndexing	input [ 1 ]		916994	0					
ANR	919797	Identifier	input		916994	0					
ANR	919798	PrimaryExpression	1		916994	1					
ANR	919799	PrimaryExpression	' '		916994	1					
ANR	919800	CompoundStatement		495:3:11950:11995	916994	1					
ANR	919801	IdentifierDeclStatement	RFlagItem * item ;	1133:3:30087:30102	916994	0	True				
ANR	919802	IdentifierDecl	* item		916994	0					
ANR	919803	IdentifierDeclType	RFlagItem *		916994	0					
ANR	919804	Identifier	item		916994	1					
ANR	919805	IdentifierDeclStatement	"char * q , * p = strdup ( input + 2 ) , * dec = NULL ;"	1134:3:30107:30152	916994	1	True				
ANR	919806	IdentifierDecl	* q		916994	0					
ANR	919807	IdentifierDeclType	char *		916994	0					
ANR	919808	Identifier	q		916994	1					
ANR	919809	IdentifierDecl	* p = strdup ( input + 2 )		916994	1					
ANR	919810	IdentifierDeclType	char *		916994	0					
ANR	919811	Identifier	p		916994	1					
ANR	919812	AssignmentExpression	* p = strdup ( input + 2 )		916994	2		=			
ANR	919813	Identifier	p		916994	0					
ANR	919814	CallExpression	strdup ( input + 2 )		916994	1					
ANR	919815	Callee	strdup		916994	0					
ANR	919816	Identifier	strdup		916994	0					
ANR	919817	ArgumentList	input + 2		916994	1					
ANR	919818	Argument	input + 2		916994	0					
ANR	919819	AdditiveExpression	input + 2		916994	0		+			
ANR	919820	Identifier	input		916994	0					
ANR	919821	PrimaryExpression	2		916994	1					
ANR	919822	IdentifierDecl	* dec = NULL		916994	2					
ANR	919823	IdentifierDeclType	char *		916994	0					
ANR	919824	Identifier	dec		916994	1					
ANR	919825	AssignmentExpression	* dec = NULL		916994	2		=			
ANR	919826	Identifier	NULL		916994	0					
ANR	919827	Identifier	NULL		916994	1					
ANR	919828	ExpressionStatement	"q = strchr ( p , ' ' )"	1135:3:30157:30176	916994	2	True				
ANR	919829	AssignmentExpression	"q = strchr ( p , ' ' )"		916994	0		=			
ANR	919830	Identifier	q		916994	0					
ANR	919831	CallExpression	"strchr ( p , ' ' )"		916994	1					
ANR	919832	Callee	strchr		916994	0					
ANR	919833	Identifier	strchr		916994	0					
ANR	919834	ArgumentList	p		916994	1					
ANR	919835	Argument	p		916994	0					
ANR	919836	Identifier	p		916994	0					
ANR	919837	Argument	' '		916994	1					
ANR	919838	PrimaryExpression	' '		916994	0					
ANR	919839	IfStatement	if ( q )		916994	3					
ANR	919840	Condition	q	1136:7:30185:30185	916994	0	True				
ANR	919841	Identifier	q		916994	0					
ANR	919842	CompoundStatement		497:10:12031:12031	916994	1					
ANR	919843	ExpressionStatement	* q = 0	1137:4:30194:30200	916994	0	True				
ANR	919844	AssignmentExpression	* q = 0		916994	0		=			
ANR	919845	UnaryOperationExpression	* q		916994	0					
ANR	919846	UnaryOperator	*		916994	0					
ANR	919847	Identifier	q		916994	1					
ANR	919848	PrimaryExpression	0		916994	1					
ANR	919849	ExpressionStatement	"item = r_flag_get ( core -> flags , p )"	1138:4:30206:30240	916994	1	True				
ANR	919850	AssignmentExpression	"item = r_flag_get ( core -> flags , p )"		916994	0		=			
ANR	919851	Identifier	item		916994	0					
ANR	919852	CallExpression	"r_flag_get ( core -> flags , p )"		916994	1					
ANR	919853	Callee	r_flag_get		916994	0					
ANR	919854	Identifier	r_flag_get		916994	0					
ANR	919855	ArgumentList	core -> flags		916994	1					
ANR	919856	Argument	core -> flags		916994	0					
ANR	919857	PtrMemberAccess	core -> flags		916994	0					
ANR	919858	Identifier	core		916994	0					
ANR	919859	Identifier	flags		916994	1					
ANR	919860	Argument	p		916994	1					
ANR	919861	Identifier	p		916994	0					
ANR	919862	IfStatement	if ( item )		916994	2					
ANR	919863	Condition	item	1139:8:30250:30253	916994	0	True				
ANR	919864	Identifier	item		916994	0					
ANR	919865	CompoundStatement		500:14:12099:12099	916994	1					
ANR	919866	IfStatement	"if ( ! strncmp ( q + 1 , ""base64:"" , 7 ) )"		916994	0					
ANR	919867	Condition	"! strncmp ( q + 1 , ""base64:"" , 7 )"	1140:9:30267:30296	916994	0	True				
ANR	919868	UnaryOperationExpression	"! strncmp ( q + 1 , ""base64:"" , 7 )"		916994	0					
ANR	919869	UnaryOperator	!		916994	0					
ANR	919870	CallExpression	"strncmp ( q + 1 , ""base64:"" , 7 )"		916994	1					
ANR	919871	Callee	strncmp		916994	0					
ANR	919872	Identifier	strncmp		916994	0					
ANR	919873	ArgumentList	q + 1		916994	1					
ANR	919874	Argument	q + 1		916994	0					
ANR	919875	AdditiveExpression	q + 1		916994	0		+			
ANR	919876	Identifier	q		916994	0					
ANR	919877	PrimaryExpression	1		916994	1					
ANR	919878	Argument	"""base64:"""		916994	1					
ANR	919879	PrimaryExpression	"""base64:"""		916994	0					
ANR	919880	Argument	7		916994	2					
ANR	919881	PrimaryExpression	7		916994	0					
ANR	919882	CompoundStatement		501:41:12142:12142	916994	1					
ANR	919883	ExpressionStatement	"dec = ( char * ) r_base64_decode_dyn ( q + 8 , - 1 )"	1141:6:30307:30353	916994	0	True				
ANR	919884	AssignmentExpression	"dec = ( char * ) r_base64_decode_dyn ( q + 8 , - 1 )"		916994	0		=			
ANR	919885	Identifier	dec		916994	0					
ANR	919886	CastExpression	"( char * ) r_base64_decode_dyn ( q + 8 , - 1 )"		916994	1					
ANR	919887	CastTarget	char *		916994	0					
ANR	919888	CallExpression	"r_base64_decode_dyn ( q + 8 , - 1 )"		916994	1					
ANR	919889	Callee	r_base64_decode_dyn		916994	0					
ANR	919890	Identifier	r_base64_decode_dyn		916994	0					
ANR	919891	ArgumentList	q + 8		916994	1					
ANR	919892	Argument	q + 8		916994	0					
ANR	919893	AdditiveExpression	q + 8		916994	0		+			
ANR	919894	Identifier	q		916994	0					
ANR	919895	PrimaryExpression	8		916994	1					
ANR	919896	Argument	- 1		916994	1					
ANR	919897	UnaryOperationExpression	- 1		916994	0					
ANR	919898	UnaryOperator	-		916994	0					
ANR	919899	PrimaryExpression	1		916994	1					
ANR	919900	IfStatement	if ( dec )		916994	1					
ANR	919901	Condition	dec	1142:10:30365:30367	916994	0	True				
ANR	919902	Identifier	dec		916994	0					
ANR	919903	CompoundStatement		503:15:12213:12213	916994	1					
ANR	919904	ExpressionStatement	"r_flag_item_set_comment ( item , dec )"	1143:7:30379:30414	916994	0	True				
ANR	919905	CallExpression	"r_flag_item_set_comment ( item , dec )"		916994	0					
ANR	919906	Callee	r_flag_item_set_comment		916994	0					
ANR	919907	Identifier	r_flag_item_set_comment		916994	0					
ANR	919908	ArgumentList	item		916994	1					
ANR	919909	Argument	item		916994	0					
ANR	919910	Identifier	item		916994	0					
ANR	919911	Argument	dec		916994	1					
ANR	919912	Identifier	dec		916994	0					
ANR	919913	ExpressionStatement	free ( dec )	1144:7:30423:30433	916994	1	True				
ANR	919914	CallExpression	free ( dec )		916994	0					
ANR	919915	Callee	free		916994	0					
ANR	919916	Identifier	free		916994	0					
ANR	919917	ArgumentList	dec		916994	1					
ANR	919918	Argument	dec		916994	0					
ANR	919919	Identifier	dec		916994	0					
ANR	919920	ElseStatement	else		916994	0					
ANR	919921	CompoundStatement		506:13:12291:12291	916994	0					
ANR	919922	ExpressionStatement	"eprintf ( ""Failed to decode base64-encoded string\\n"" )"	1146:7:30457:30509	916994	0	True				
ANR	919923	CallExpression	"eprintf ( ""Failed to decode base64-encoded string\\n"" )"		916994	0					
ANR	919924	Callee	eprintf		916994	0					
ANR	919925	Identifier	eprintf		916994	0					
ANR	919926	ArgumentList	"""Failed to decode base64-encoded string\\n"""		916994	1					
ANR	919927	Argument	"""Failed to decode base64-encoded string\\n"""		916994	0					
ANR	919928	PrimaryExpression	"""Failed to decode base64-encoded string\\n"""		916994	0					
ANR	919929	ElseStatement	else		916994	0					
ANR	919930	CompoundStatement		509:12:12374:12374	916994	0					
ANR	919931	ExpressionStatement	"r_flag_item_set_comment ( item , q + 1 )"	1149:6:30539:30576	916994	0	True				
ANR	919932	CallExpression	"r_flag_item_set_comment ( item , q + 1 )"		916994	0					
ANR	919933	Callee	r_flag_item_set_comment		916994	0					
ANR	919934	Identifier	r_flag_item_set_comment		916994	0					
ANR	919935	ArgumentList	item		916994	1					
ANR	919936	Argument	item		916994	0					
ANR	919937	Identifier	item		916994	0					
ANR	919938	Argument	q + 1		916994	1					
ANR	919939	AdditiveExpression	q + 1		916994	0		+			
ANR	919940	Identifier	q		916994	0					
ANR	919941	PrimaryExpression	1		916994	1					
ANR	919942	ElseStatement	else		916994	0					
ANR	919943	CompoundStatement		512:11:12439:12439	916994	0					
ANR	919944	ExpressionStatement	"eprintf ( ""Cannot find flag with name '%s'\\n"" , p )"	1152:5:30603:30651	916994	0	True				
ANR	919945	CallExpression	"eprintf ( ""Cannot find flag with name '%s'\\n"" , p )"		916994	0					
ANR	919946	Callee	eprintf		916994	0					
ANR	919947	Identifier	eprintf		916994	0					
ANR	919948	ArgumentList	"""Cannot find flag with name '%s'\\n"""		916994	1					
ANR	919949	Argument	"""Cannot find flag with name '%s'\\n"""		916994	0					
ANR	919950	PrimaryExpression	"""Cannot find flag with name '%s'\\n"""		916994	0					
ANR	919951	Argument	p		916994	1					
ANR	919952	Identifier	p		916994	0					
ANR	919953	ElseStatement	else		916994	0					
ANR	919954	CompoundStatement		515:10:12512:12512	916994	0					
ANR	919955	ExpressionStatement	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , p ) )"	1155:4:30675:30735	916994	0	True				
ANR	919956	AssignmentExpression	"item = r_flag_get_i ( core -> flags , r_num_math ( core -> num , p ) )"		916994	0		=			
ANR	919957	Identifier	item		916994	0					
ANR	919958	CallExpression	"r_flag_get_i ( core -> flags , r_num_math ( core -> num , p ) )"		916994	1					
ANR	919959	Callee	r_flag_get_i		916994	0					
ANR	919960	Identifier	r_flag_get_i		916994	0					
ANR	919961	ArgumentList	core -> flags		916994	1					
ANR	919962	Argument	core -> flags		916994	0					
ANR	919963	PtrMemberAccess	core -> flags		916994	0					
ANR	919964	Identifier	core		916994	0					
ANR	919965	Identifier	flags		916994	1					
ANR	919966	Argument	"r_num_math ( core -> num , p )"		916994	1					
ANR	919967	CallExpression	"r_num_math ( core -> num , p )"		916994	0					
ANR	919968	Callee	r_num_math		916994	0					
ANR	919969	Identifier	r_num_math		916994	0					
ANR	919970	ArgumentList	core -> num		916994	1					
ANR	919971	Argument	core -> num		916994	0					
ANR	919972	PtrMemberAccess	core -> num		916994	0					
ANR	919973	Identifier	core		916994	0					
ANR	919974	Identifier	num		916994	1					
ANR	919975	Argument	p		916994	1					
ANR	919976	Identifier	p		916994	0					
ANR	919977	IfStatement	if ( item && item -> comment )		916994	1					
ANR	919978	Condition	item && item -> comment	1156:8:30745:30765	916994	0	True				
ANR	919979	AndExpression	item && item -> comment		916994	0		&&			
ANR	919980	Identifier	item		916994	0					
ANR	919981	PtrMemberAccess	item -> comment		916994	1					
ANR	919982	Identifier	item		916994	0					
ANR	919983	Identifier	comment		916994	1					
ANR	919984	CompoundStatement		517:31:12611:12611	916994	1					
ANR	919985	ExpressionStatement	r_cons_println ( item -> comment )	1157:5:30775:30805	916994	0	True				
ANR	919986	CallExpression	r_cons_println ( item -> comment )		916994	0					
ANR	919987	Callee	r_cons_println		916994	0					
ANR	919988	Identifier	r_cons_println		916994	0					
ANR	919989	ArgumentList	item -> comment		916994	1					
ANR	919990	Argument	item -> comment		916994	0					
ANR	919991	PtrMemberAccess	item -> comment		916994	0					
ANR	919992	Identifier	item		916994	0					
ANR	919993	Identifier	comment		916994	1					
ANR	919994	ElseStatement	else		916994	0					
ANR	919995	CompoundStatement		519:11:12661:12661	916994	0					
ANR	919996	ExpressionStatement	"eprintf ( ""Cannot find item\\n"" )"	1159:5:30825:30855	916994	0	True				
ANR	919997	CallExpression	"eprintf ( ""Cannot find item\\n"" )"		916994	0					
ANR	919998	Callee	eprintf		916994	0					
ANR	919999	Identifier	eprintf		916994	0					
ANR	920000	ArgumentList	"""Cannot find item\\n"""		916994	1					
ANR	920001	Argument	"""Cannot find item\\n"""		916994	0					
ANR	920002	PrimaryExpression	"""Cannot find item\\n"""		916994	0					
ANR	920003	ExpressionStatement	free ( p )	1162:3:30871:30879	916994	4	True				
ANR	920004	CallExpression	free ( p )		916994	0					
ANR	920005	Callee	free		916994	0					
ANR	920006	Identifier	free		916994	0					
ANR	920007	ArgumentList	p		916994	1					
ANR	920008	Argument	p		916994	0					
ANR	920009	Identifier	p		916994	0					
ANR	920010	ElseStatement	else		916994	0					
ANR	920011	ExpressionStatement	"eprintf ( ""Usage: fC [name] [comment]\\n"" )"	1163:9:30890:30930	916994	0	True				
ANR	920012	CallExpression	"eprintf ( ""Usage: fC [name] [comment]\\n"" )"		916994	0					
ANR	920013	Callee	eprintf		916994	0					
ANR	920014	Identifier	eprintf		916994	0					
ANR	920015	ArgumentList	"""Usage: fC [name] [comment]\\n"""		916994	1					
ANR	920016	Argument	"""Usage: fC [name] [comment]\\n"""		916994	0					
ANR	920017	PrimaryExpression	"""Usage: fC [name] [comment]\\n"""		916994	0					
ANR	920018	BreakStatement	break ;	1164:2:30934:30939	916994	61	True				
ANR	920019	Label	case 'o' :	1165:1:30942:30950	916994	62	True				
ANR	920020	ExpressionStatement	r_core_fortune_print_random ( core )	1166:2:30962:30996	916994	63	True				
ANR	920021	CallExpression	r_core_fortune_print_random ( core )		916994	0					
ANR	920022	Callee	r_core_fortune_print_random		916994	0					
ANR	920023	Identifier	r_core_fortune_print_random		916994	0					
ANR	920024	ArgumentList	core		916994	1					
ANR	920025	Argument	core		916994	0					
ANR	920026	Identifier	core		916994	0					
ANR	920027	BreakStatement	break ;	1167:2:31000:31005	916994	64	True				
ANR	920028	Label	case 'O' :	1168:1:31008:31016	916994	65	True				
ANR	920029	ExpressionStatement	"flag_ordinals ( core , input + 1 )"	1169:2:31028:31059	916994	66	True				
ANR	920030	CallExpression	"flag_ordinals ( core , input + 1 )"		916994	0					
ANR	920031	Callee	flag_ordinals		916994	0					
ANR	920032	Identifier	flag_ordinals		916994	0					
ANR	920033	ArgumentList	core		916994	1					
ANR	920034	Argument	core		916994	0					
ANR	920035	Identifier	core		916994	0					
ANR	920036	Argument	input + 1		916994	1					
ANR	920037	AdditiveExpression	input + 1		916994	0		+			
ANR	920038	Identifier	input		916994	0					
ANR	920039	PrimaryExpression	1		916994	1					
ANR	920040	BreakStatement	break ;	1170:2:31063:31068	916994	67	True				
ANR	920041	Label	case 'r' :	1171:1:31071:31079	916994	68	True				
ANR	920042	IfStatement	if ( input [ 1 ] == ' ' && input [ 2 ] )		916994	69					
ANR	920043	Condition	input [ 1 ] == ' ' && input [ 2 ]	1172:6:31087:31113	916994	0	True				
ANR	920044	AndExpression	input [ 1 ] == ' ' && input [ 2 ]		916994	0		&&			
ANR	920045	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	920046	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920047	Identifier	input		916994	0					
ANR	920048	PrimaryExpression	1		916994	1					
ANR	920049	PrimaryExpression	' '		916994	1					
ANR	920050	ArrayIndexing	input [ 2 ]		916994	1					
ANR	920051	Identifier	input		916994	0					
ANR	920052	PrimaryExpression	2		916994	1					
ANR	920053	CompoundStatement		535:3:12984:13003	916994	1					
ANR	920054	IdentifierDeclStatement	RFlagItem * item ;	1173:3:31121:31136	916994	0	True				
ANR	920055	IdentifierDecl	* item		916994	0					
ANR	920056	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920057	Identifier	item		916994	1					
ANR	920058	IdentifierDeclStatement	char * old = str + 1 ;	1174:3:31141:31160	916994	1	True				
ANR	920059	IdentifierDecl	* old = str + 1		916994	0					
ANR	920060	IdentifierDeclType	char *		916994	0					
ANR	920061	Identifier	old		916994	1					
ANR	920062	AssignmentExpression	* old = str + 1		916994	2		=			
ANR	920063	Identifier	old		916994	0					
ANR	920064	AdditiveExpression	str + 1		916994	1		+			
ANR	920065	Identifier	str		916994	0					
ANR	920066	PrimaryExpression	1		916994	1					
ANR	920067	Statement	char	1175:3:31165:31168	916994	2	True				
ANR	920068	Statement	*	1175:8:31170:31170	916994	3	True				
ANR	920069	Statement	new	1175:9:31171:31173	916994	4	True				
ANR	920070	Statement	=	1175:13:31175:31175	916994	5	True				
ANR	920071	ExpressionStatement	"strchr ( old , ' ' )"	1175:15:31177:31194	916994	6	True				
ANR	920072	CallExpression	"strchr ( old , ' ' )"		916994	0					
ANR	920073	Callee	strchr		916994	0					
ANR	920074	Identifier	strchr		916994	0					
ANR	920075	ArgumentList	old		916994	1					
ANR	920076	Argument	old		916994	0					
ANR	920077	Identifier	old		916994	0					
ANR	920078	Argument	' '		916994	1					
ANR	920079	PrimaryExpression	' '		916994	0					
ANR	920080	Statement	if	1176:3:31199:31200	916994	7	True				
ANR	920081	Statement	(	1176:6:31202:31202	916994	8	True				
ANR	920082	Statement	new	1176:7:31203:31205	916994	9	True				
ANR	920083	Statement	)	1176:10:31206:31206	916994	10	True				
ANR	920084	CompoundStatement		537:12:13051:13051	916994	11					
ANR	920085	Statement	*	1177:4:31214:31214	916994	0	True				
ANR	920086	Statement	new	1177:5:31215:31217	916994	1	True				
ANR	920087	Statement	=	1177:9:31219:31219	916994	2	True				
ANR	920088	ExpressionStatement	0	1177:11:31221:31222	916994	3	True				
ANR	920089	PrimaryExpression	0		916994	0					
ANR	920090	Statement	new	1178:4:31228:31230	916994	4	True				
ANR	920091	Statement	++	1178:7:31231:31232	916994	5	True				
ANR	920092	ExpressionStatement		1178:9:31233:31233	916994	6	True				
ANR	920093	ExpressionStatement	"item = r_flag_get ( core -> flags , old )"	1179:4:31239:31275	916994	7	True				
ANR	920094	AssignmentExpression	"item = r_flag_get ( core -> flags , old )"		916994	0		=			
ANR	920095	Identifier	item		916994	0					
ANR	920096	CallExpression	"r_flag_get ( core -> flags , old )"		916994	1					
ANR	920097	Callee	r_flag_get		916994	0					
ANR	920098	Identifier	r_flag_get		916994	0					
ANR	920099	ArgumentList	core -> flags		916994	1					
ANR	920100	Argument	core -> flags		916994	0					
ANR	920101	PtrMemberAccess	core -> flags		916994	0					
ANR	920102	Identifier	core		916994	0					
ANR	920103	Identifier	flags		916994	1					
ANR	920104	Argument	old		916994	1					
ANR	920105	Identifier	old		916994	0					
ANR	920106	IfStatement	"if ( ! item && ! strncmp ( old , ""fcn."" , 4 ) )"		916994	8					
ANR	920107	Condition	"! item && ! strncmp ( old , ""fcn."" , 4 )"	1180:8:31285:31318	916994	0	True				
ANR	920108	AndExpression	"! item && ! strncmp ( old , ""fcn."" , 4 )"		916994	0		&&			
ANR	920109	UnaryOperationExpression	! item		916994	0					
ANR	920110	UnaryOperator	!		916994	0					
ANR	920111	Identifier	item		916994	1					
ANR	920112	UnaryOperationExpression	"! strncmp ( old , ""fcn."" , 4 )"		916994	1					
ANR	920113	UnaryOperator	!		916994	0					
ANR	920114	CallExpression	"strncmp ( old , ""fcn."" , 4 )"		916994	1					
ANR	920115	Callee	strncmp		916994	0					
ANR	920116	Identifier	strncmp		916994	0					
ANR	920117	ArgumentList	old		916994	1					
ANR	920118	Argument	old		916994	0					
ANR	920119	Identifier	old		916994	0					
ANR	920120	Argument	"""fcn."""		916994	1					
ANR	920121	PrimaryExpression	"""fcn."""		916994	0					
ANR	920122	Argument	4		916994	2					
ANR	920123	PrimaryExpression	4		916994	0					
ANR	920124	CompoundStatement		541:44:13164:13164	916994	1					
ANR	920125	ExpressionStatement	"item = r_flag_get ( core -> flags , old + 4 )"	1181:5:31328:31366	916994	0	True				
ANR	920126	AssignmentExpression	"item = r_flag_get ( core -> flags , old + 4 )"		916994	0		=			
ANR	920127	Identifier	item		916994	0					
ANR	920128	CallExpression	"r_flag_get ( core -> flags , old + 4 )"		916994	1					
ANR	920129	Callee	r_flag_get		916994	0					
ANR	920130	Identifier	r_flag_get		916994	0					
ANR	920131	ArgumentList	core -> flags		916994	1					
ANR	920132	Argument	core -> flags		916994	0					
ANR	920133	PtrMemberAccess	core -> flags		916994	0					
ANR	920134	Identifier	core		916994	0					
ANR	920135	Identifier	flags		916994	1					
ANR	920136	Argument	old + 4		916994	1					
ANR	920137	AdditiveExpression	old + 4		916994	0		+			
ANR	920138	Identifier	old		916994	0					
ANR	920139	PrimaryExpression	4		916994	1					
ANR	920140	IfStatement	if ( item )		916994	12					
ANR	920141	Condition	item	1187:7:31466:31469	916994	0	True				
ANR	920142	Identifier	item		916994	0					
ANR	920143	CompoundStatement		548:13:13315:13315	916994	1					
ANR	920144	Statement	if	1188:4:31478:31479	916994	0	True				
ANR	920145	Statement	(	1188:7:31481:31481	916994	1	True				
ANR	920146	Statement	!	1188:8:31482:31482	916994	2	True				
ANR	920147	Statement	r_flag_rename	1188:9:31483:31495	916994	3	True				
ANR	920148	Statement	(	1188:23:31497:31497	916994	4	True				
ANR	920149	Statement	core	1188:24:31498:31501	916994	5	True				
ANR	920150	Statement	->	1188:28:31502:31503	916994	6	True				
ANR	920151	Statement	flags	1188:30:31504:31508	916994	7	True				
ANR	920152	Statement	","	1188:35:31509:31509	916994	8	True				
ANR	920153	Statement	item	1188:37:31511:31514	916994	9	True				
ANR	920154	Statement	","	1188:41:31515:31515	916994	10	True				
ANR	920155	Statement	new	1188:43:31517:31519	916994	11	True				
ANR	920156	Statement	)	1188:46:31520:31520	916994	12	True				
ANR	920157	Statement	)	1188:47:31521:31521	916994	13	True				
ANR	920158	CompoundStatement		549:49:13366:13366	916994	14					
ANR	920159	ExpressionStatement	"eprintf ( ""Invalid name\\n"" )"	1189:5:31530:31556	916994	0	True				
ANR	920160	CallExpression	"eprintf ( ""Invalid name\\n"" )"		916994	0					
ANR	920161	Callee	eprintf		916994	0					
ANR	920162	Identifier	eprintf		916994	0					
ANR	920163	ArgumentList	"""Invalid name\\n"""		916994	1					
ANR	920164	Argument	"""Invalid name\\n"""		916994	0					
ANR	920165	PrimaryExpression	"""Invalid name\\n"""		916994	0					
ANR	920166	ElseStatement	else		916994	0					
ANR	920167	CompoundStatement		552:10:13417:13417	916994	0					
ANR	920168	ExpressionStatement	"eprintf ( ""Usage: fr [[old]] [new]\\n"" )"	1192:4:31580:31617	916994	0	True				
ANR	920169	CallExpression	"eprintf ( ""Usage: fr [[old]] [new]\\n"" )"		916994	0					
ANR	920170	Callee	eprintf		916994	0					
ANR	920171	Identifier	eprintf		916994	0					
ANR	920172	ArgumentList	"""Usage: fr [[old]] [new]\\n"""		916994	1					
ANR	920173	Argument	"""Usage: fr [[old]] [new]\\n"""		916994	0					
ANR	920174	PrimaryExpression	"""Usage: fr [[old]] [new]\\n"""		916994	0					
ANR	920175	ElseStatement	else		916994	0					
ANR	920176	CompoundStatement		544:10:13227:13227	916994	0					
ANR	920177	Statement	new	1184:4:31390:31392	916994	0	True				
ANR	920178	Statement	=	1184:8:31394:31394	916994	1	True				
ANR	920179	ExpressionStatement	old	1184:10:31396:31399	916994	2	True				
ANR	920180	Identifier	old		916994	0					
ANR	920181	ExpressionStatement	"item = r_flag_get_i ( core -> flags , core -> offset )"	1185:4:31405:31452	916994	3	True				
ANR	920182	AssignmentExpression	"item = r_flag_get_i ( core -> flags , core -> offset )"		916994	0		=			
ANR	920183	Identifier	item		916994	0					
ANR	920184	CallExpression	"r_flag_get_i ( core -> flags , core -> offset )"		916994	1					
ANR	920185	Callee	r_flag_get_i		916994	0					
ANR	920186	Identifier	r_flag_get_i		916994	0					
ANR	920187	ArgumentList	core -> flags		916994	1					
ANR	920188	Argument	core -> flags		916994	0					
ANR	920189	PtrMemberAccess	core -> flags		916994	0					
ANR	920190	Identifier	core		916994	0					
ANR	920191	Identifier	flags		916994	1					
ANR	920192	Argument	core -> offset		916994	1					
ANR	920193	PtrMemberAccess	core -> offset		916994	0					
ANR	920194	Identifier	core		916994	0					
ANR	920195	Identifier	offset		916994	1					
ANR	920196	BreakStatement	break ;	1195:2:31630:31635	916994	70	True				
ANR	920197	Label	case 'N' :	1196:1:31638:31646	916994	71	True				
ANR	920198	IfStatement	if ( ! input [ 1 ] )		916994	72					
ANR	920199	Condition	! input [ 1 ]	1197:6:31654:31662	916994	0	True				
ANR	920200	UnaryOperationExpression	! input [ 1 ]		916994	0					
ANR	920201	UnaryOperator	!		916994	0					
ANR	920202	ArrayIndexing	input [ 1 ]		916994	1					
ANR	920203	Identifier	input		916994	0					
ANR	920204	PrimaryExpression	1		916994	1					
ANR	920205	CompoundStatement		559:3:13513:13571	916994	1					
ANR	920206	IdentifierDeclStatement	"RFlagItem * item = r_flag_get_i ( core -> flags , core -> offset ) ;"	1198:3:31670:31728	916994	0	True				
ANR	920207	IdentifierDecl	"* item = r_flag_get_i ( core -> flags , core -> offset )"		916994	0					
ANR	920208	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920209	Identifier	item		916994	1					
ANR	920210	AssignmentExpression	"* item = r_flag_get_i ( core -> flags , core -> offset )"		916994	2		=			
ANR	920211	Identifier	item		916994	0					
ANR	920212	CallExpression	"r_flag_get_i ( core -> flags , core -> offset )"		916994	1					
ANR	920213	Callee	r_flag_get_i		916994	0					
ANR	920214	Identifier	r_flag_get_i		916994	0					
ANR	920215	ArgumentList	core -> flags		916994	1					
ANR	920216	Argument	core -> flags		916994	0					
ANR	920217	PtrMemberAccess	core -> flags		916994	0					
ANR	920218	Identifier	core		916994	0					
ANR	920219	Identifier	flags		916994	1					
ANR	920220	Argument	core -> offset		916994	1					
ANR	920221	PtrMemberAccess	core -> offset		916994	0					
ANR	920222	Identifier	core		916994	0					
ANR	920223	Identifier	offset		916994	1					
ANR	920224	IfStatement	if ( item )		916994	1					
ANR	920225	Condition	item	1199:7:31737:31740	916994	0	True				
ANR	920226	Identifier	item		916994	0					
ANR	920227	CompoundStatement		560:13:13586:13586	916994	1					
ANR	920228	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , item -> realname )"	1200:4:31749:31787	916994	0	True				
ANR	920229	CallExpression	"r_cons_printf ( ""%s\\n"" , item -> realname )"		916994	0					
ANR	920230	Callee	r_cons_printf		916994	0					
ANR	920231	Identifier	r_cons_printf		916994	0					
ANR	920232	ArgumentList	"""%s\\n"""		916994	1					
ANR	920233	Argument	"""%s\\n"""		916994	0					
ANR	920234	PrimaryExpression	"""%s\\n"""		916994	0					
ANR	920235	Argument	item -> realname		916994	1					
ANR	920236	PtrMemberAccess	item -> realname		916994	0					
ANR	920237	Identifier	item		916994	0					
ANR	920238	Identifier	realname		916994	1					
ANR	920239	BreakStatement	break ;	1202:3:31797:31802	916994	2	True				
ANR	920240	ElseStatement	else		916994	0					
ANR	920241	IfStatement	if ( input [ 1 ] == ' ' && input [ 2 ] )		916994	0					
ANR	920242	Condition	input [ 1 ] == ' ' && input [ 2 ]	1203:13:31817:31843	916994	0	True				
ANR	920243	AndExpression	input [ 1 ] == ' ' && input [ 2 ]		916994	0		&&			
ANR	920244	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	920245	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920246	Identifier	input		916994	0					
ANR	920247	PrimaryExpression	1		916994	1					
ANR	920248	PrimaryExpression	' '		916994	1					
ANR	920249	ArrayIndexing	input [ 2 ]		916994	1					
ANR	920250	Identifier	input		916994	0					
ANR	920251	PrimaryExpression	2		916994	1					
ANR	920252	CompoundStatement		567:3:13739:13774	916994	1					
ANR	920253	IdentifierDeclStatement	RFlagItem * item ;	1204:3:31851:31866	916994	0	True				
ANR	920254	IdentifierDecl	* item		916994	0					
ANR	920255	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920256	Identifier	item		916994	1					
ANR	920257	IdentifierDeclStatement	char * name = str + 1 ;	1205:3:31871:31891	916994	1	True				
ANR	920258	IdentifierDecl	* name = str + 1		916994	0					
ANR	920259	IdentifierDeclType	char *		916994	0					
ANR	920260	Identifier	name		916994	1					
ANR	920261	AssignmentExpression	* name = str + 1		916994	2		=			
ANR	920262	Identifier	name		916994	0					
ANR	920263	AdditiveExpression	str + 1		916994	1		+			
ANR	920264	Identifier	str		916994	0					
ANR	920265	PrimaryExpression	1		916994	1					
ANR	920266	IdentifierDeclStatement	"char * realname = strchr ( name , ' ' ) ;"	1206:3:31896:31931	916994	2	True				
ANR	920267	IdentifierDecl	"* realname = strchr ( name , ' ' )"		916994	0					
ANR	920268	IdentifierDeclType	char *		916994	0					
ANR	920269	Identifier	realname		916994	1					
ANR	920270	AssignmentExpression	"* realname = strchr ( name , ' ' )"		916994	2		=			
ANR	920271	Identifier	realname		916994	0					
ANR	920272	CallExpression	"strchr ( name , ' ' )"		916994	1					
ANR	920273	Callee	strchr		916994	0					
ANR	920274	Identifier	strchr		916994	0					
ANR	920275	ArgumentList	name		916994	1					
ANR	920276	Argument	name		916994	0					
ANR	920277	Identifier	name		916994	0					
ANR	920278	Argument	' '		916994	1					
ANR	920279	PrimaryExpression	' '		916994	0					
ANR	920280	IfStatement	if ( realname )		916994	3					
ANR	920281	Condition	realname	1207:7:31940:31947	916994	0	True				
ANR	920282	Identifier	realname		916994	0					
ANR	920283	CompoundStatement		568:17:13793:13793	916994	1					
ANR	920284	ExpressionStatement	* realname = 0	1208:4:31956:31969	916994	0	True				
ANR	920285	AssignmentExpression	* realname = 0		916994	0		=			
ANR	920286	UnaryOperationExpression	* realname		916994	0					
ANR	920287	UnaryOperator	*		916994	0					
ANR	920288	Identifier	realname		916994	1					
ANR	920289	PrimaryExpression	0		916994	1					
ANR	920290	ExpressionStatement	realname ++	1209:4:31975:31985	916994	1	True				
ANR	920291	PostIncDecOperationExpression	realname ++		916994	0					
ANR	920292	Identifier	realname		916994	0					
ANR	920293	IncDec	++		916994	1					
ANR	920294	ExpressionStatement	"item = r_flag_get ( core -> flags , name )"	1210:4:31991:32028	916994	2	True				
ANR	920295	AssignmentExpression	"item = r_flag_get ( core -> flags , name )"		916994	0		=			
ANR	920296	Identifier	item		916994	0					
ANR	920297	CallExpression	"r_flag_get ( core -> flags , name )"		916994	1					
ANR	920298	Callee	r_flag_get		916994	0					
ANR	920299	Identifier	r_flag_get		916994	0					
ANR	920300	ArgumentList	core -> flags		916994	1					
ANR	920301	Argument	core -> flags		916994	0					
ANR	920302	PtrMemberAccess	core -> flags		916994	0					
ANR	920303	Identifier	core		916994	0					
ANR	920304	Identifier	flags		916994	1					
ANR	920305	Argument	name		916994	1					
ANR	920306	Identifier	name		916994	0					
ANR	920307	IfStatement	"if ( ! item && ! strncmp ( name , ""fcn."" , 4 ) )"		916994	3					
ANR	920308	Condition	"! item && ! strncmp ( name , ""fcn."" , 4 )"	1211:8:32038:32072	916994	0	True				
ANR	920309	AndExpression	"! item && ! strncmp ( name , ""fcn."" , 4 )"		916994	0		&&			
ANR	920310	UnaryOperationExpression	! item		916994	0					
ANR	920311	UnaryOperator	!		916994	0					
ANR	920312	Identifier	item		916994	1					
ANR	920313	UnaryOperationExpression	"! strncmp ( name , ""fcn."" , 4 )"		916994	1					
ANR	920314	UnaryOperator	!		916994	0					
ANR	920315	CallExpression	"strncmp ( name , ""fcn."" , 4 )"		916994	1					
ANR	920316	Callee	strncmp		916994	0					
ANR	920317	Identifier	strncmp		916994	0					
ANR	920318	ArgumentList	name		916994	1					
ANR	920319	Argument	name		916994	0					
ANR	920320	Identifier	name		916994	0					
ANR	920321	Argument	"""fcn."""		916994	1					
ANR	920322	PrimaryExpression	"""fcn."""		916994	0					
ANR	920323	Argument	4		916994	2					
ANR	920324	PrimaryExpression	4		916994	0					
ANR	920325	CompoundStatement		572:45:13918:13918	916994	1					
ANR	920326	ExpressionStatement	"item = r_flag_get ( core -> flags , name + 4 )"	1212:5:32082:32121	916994	0	True				
ANR	920327	AssignmentExpression	"item = r_flag_get ( core -> flags , name + 4 )"		916994	0		=			
ANR	920328	Identifier	item		916994	0					
ANR	920329	CallExpression	"r_flag_get ( core -> flags , name + 4 )"		916994	1					
ANR	920330	Callee	r_flag_get		916994	0					
ANR	920331	Identifier	r_flag_get		916994	0					
ANR	920332	ArgumentList	core -> flags		916994	1					
ANR	920333	Argument	core -> flags		916994	0					
ANR	920334	PtrMemberAccess	core -> flags		916994	0					
ANR	920335	Identifier	core		916994	0					
ANR	920336	Identifier	flags		916994	1					
ANR	920337	Argument	name + 4		916994	1					
ANR	920338	AdditiveExpression	name + 4		916994	0		+			
ANR	920339	Identifier	name		916994	0					
ANR	920340	PrimaryExpression	4		916994	1					
ANR	920341	ElseStatement	else		916994	0					
ANR	920342	CompoundStatement		575:10:13982:13982	916994	0					
ANR	920343	ExpressionStatement	realname = name	1215:4:32145:32160	916994	0	True				
ANR	920344	AssignmentExpression	realname = name		916994	0		=			
ANR	920345	Identifier	realname		916994	0					
ANR	920346	Identifier	name		916994	1					
ANR	920347	ExpressionStatement	"item = r_flag_get_i ( core -> flags , core -> offset )"	1216:4:32166:32213	916994	1	True				
ANR	920348	AssignmentExpression	"item = r_flag_get_i ( core -> flags , core -> offset )"		916994	0		=			
ANR	920349	Identifier	item		916994	0					
ANR	920350	CallExpression	"r_flag_get_i ( core -> flags , core -> offset )"		916994	1					
ANR	920351	Callee	r_flag_get_i		916994	0					
ANR	920352	Identifier	r_flag_get_i		916994	0					
ANR	920353	ArgumentList	core -> flags		916994	1					
ANR	920354	Argument	core -> flags		916994	0					
ANR	920355	PtrMemberAccess	core -> flags		916994	0					
ANR	920356	Identifier	core		916994	0					
ANR	920357	Identifier	flags		916994	1					
ANR	920358	Argument	core -> offset		916994	1					
ANR	920359	PtrMemberAccess	core -> offset		916994	0					
ANR	920360	Identifier	core		916994	0					
ANR	920361	Identifier	offset		916994	1					
ANR	920362	IfStatement	if ( item )		916994	4					
ANR	920363	Condition	item	1218:7:32227:32230	916994	0	True				
ANR	920364	Identifier	item		916994	0					
ANR	920365	CompoundStatement		579:13:14076:14076	916994	1					
ANR	920366	ExpressionStatement	"r_flag_item_set_realname ( item , realname )"	1219:4:32239:32280	916994	0	True				
ANR	920367	CallExpression	"r_flag_item_set_realname ( item , realname )"		916994	0					
ANR	920368	Callee	r_flag_item_set_realname		916994	0					
ANR	920369	Identifier	r_flag_item_set_realname		916994	0					
ANR	920370	ArgumentList	item		916994	1					
ANR	920371	Argument	item		916994	0					
ANR	920372	Identifier	item		916994	0					
ANR	920373	Argument	realname		916994	1					
ANR	920374	Identifier	realname		916994	0					
ANR	920375	BreakStatement	break ;	1221:3:32290:32295	916994	5	True				
ANR	920376	ExpressionStatement	"eprintf ( ""Usage: fN [[name]] [[realname]]\\n"" )"	1223:2:32303:32348	916994	73	True				
ANR	920377	CallExpression	"eprintf ( ""Usage: fN [[name]] [[realname]]\\n"" )"		916994	0					
ANR	920378	Callee	eprintf		916994	0					
ANR	920379	Identifier	eprintf		916994	0					
ANR	920380	ArgumentList	"""Usage: fN [[name]] [[realname]]\\n"""		916994	1					
ANR	920381	Argument	"""Usage: fN [[name]] [[realname]]\\n"""		916994	0					
ANR	920382	PrimaryExpression	"""Usage: fN [[name]] [[realname]]\\n"""		916994	0					
ANR	920383	BreakStatement	break ;	1224:2:32352:32357	916994	74	True				
ANR	920384	Label	case '\\0' :	1225:1:32360:32369	916994	75	True				
ANR	920385	Label	case 'n' :	1226:1:32372:32380	916994	76	True				
ANR	920386	Label	case '*' :	1227:1:32397:32405	916994	77	True				
ANR	920387	Label	case 'j' :	1228:1:32416:32424	916994	78	True				
ANR	920388	Label	case 'q' :	1229:1:32435:32443	916994	79	True				
ANR	920389	IfStatement	if ( input [ 0 ] && input [ 1 ] == '.' && ! input [ 2 ] )		916994	80					
ANR	920390	Condition	input [ 0 ] && input [ 1 ] == '.' && ! input [ 2 ]	1230:6:32459:32498	916994	0	True				
ANR	920391	AndExpression	input [ 0 ] && input [ 1 ] == '.' && ! input [ 2 ]		916994	0		&&			
ANR	920392	ArrayIndexing	input [ 0 ]		916994	0					
ANR	920393	Identifier	input		916994	0					
ANR	920394	PrimaryExpression	0		916994	1					
ANR	920395	AndExpression	input [ 1 ] == '.' && ! input [ 2 ]		916994	1		&&			
ANR	920396	EqualityExpression	input [ 1 ] == '.'		916994	0		==			
ANR	920397	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920398	Identifier	input		916994	0					
ANR	920399	PrimaryExpression	1		916994	1					
ANR	920400	PrimaryExpression	'.'		916994	1					
ANR	920401	UnaryOperationExpression	! input [ 2 ]		916994	1					
ANR	920402	UnaryOperator	!		916994	0					
ANR	920403	ArrayIndexing	input [ 2 ]		916994	1					
ANR	920404	Identifier	input		916994	0					
ANR	920405	PrimaryExpression	2		916994	1					
ANR	920406	CompoundStatement		592:3:14349:14415	916994	1					
ANR	920407	IdentifierDeclStatement	"RFlagItem * item = r_flag_get_at ( core -> flags , core -> offset , false ) ;"	1231:3:32506:32572	916994	0	True				
ANR	920408	IdentifierDecl	"* item = r_flag_get_at ( core -> flags , core -> offset , false )"		916994	0					
ANR	920409	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920410	Identifier	item		916994	1					
ANR	920411	AssignmentExpression	"* item = r_flag_get_at ( core -> flags , core -> offset , false )"		916994	2		=			
ANR	920412	Identifier	item		916994	0					
ANR	920413	CallExpression	"r_flag_get_at ( core -> flags , core -> offset , false )"		916994	1					
ANR	920414	Callee	r_flag_get_at		916994	0					
ANR	920415	Identifier	r_flag_get_at		916994	0					
ANR	920416	ArgumentList	core -> flags		916994	1					
ANR	920417	Argument	core -> flags		916994	0					
ANR	920418	PtrMemberAccess	core -> flags		916994	0					
ANR	920419	Identifier	core		916994	0					
ANR	920420	Identifier	flags		916994	1					
ANR	920421	Argument	core -> offset		916994	1					
ANR	920422	PtrMemberAccess	core -> offset		916994	0					
ANR	920423	Identifier	core		916994	0					
ANR	920424	Identifier	offset		916994	1					
ANR	920425	Argument	false		916994	2					
ANR	920426	Identifier	false		916994	0					
ANR	920427	IfStatement	if ( item )		916994	1					
ANR	920428	Condition	item	1232:7:32581:32584	916994	0	True				
ANR	920429	Identifier	item		916994	0					
ANR	920430	CompoundStatement		593:13:14430:14430	916994	1					
ANR	920431	SwitchStatement	switch ( input [ 0 ] )		916994	0					
ANR	920432	Condition	input [ 0 ]	1233:12:32601:32608	916994	0	True				
ANR	920433	ArrayIndexing	input [ 0 ]		916994	0					
ANR	920434	Identifier	input		916994	0					
ANR	920435	PrimaryExpression	0		916994	1					
ANR	920436	CompoundStatement		594:22:14454:14454	916994	1					
ANR	920437	Label	case '*' :	1234:4:32617:32625	916994	0	True				
ANR	920438	Statement	r_cons_printf	1235:5:32632:32644	916994	1	True				
ANR	920439	Statement	(	1235:19:32646:32646	916994	2	True				
ANR	920440	Statement	"""f %s = 0x%08"""	1235:20:32647:32660	916994	3	True				
ANR	920441	Statement	PFMT64x	1235:34:32661:32667	916994	4	True				
ANR	920442	Statement	"""\\n"""	1235:41:32668:32671	916994	5	True				
ANR	920443	Statement	","	1235:45:32672:32672	916994	6	True				
ANR	920444	Statement	item	1235:47:32674:32677	916994	7	True				
ANR	920445	Statement	->	1235:51:32678:32679	916994	8	True				
ANR	920446	Statement	name	1235:53:32680:32683	916994	9	True				
ANR	920447	Statement	","	1235:57:32684:32684	916994	10	True				
ANR	920448	Statement	item	1235:59:32686:32689	916994	11	True				
ANR	920449	Statement	->	1235:63:32690:32691	916994	12	True				
ANR	920450	Statement	offset	1235:65:32692:32697	916994	13	True				
ANR	920451	Statement	)	1235:71:32698:32698	916994	14	True				
ANR	920452	ExpressionStatement		1235:72:32699:32699	916994	15	True				
ANR	920453	BreakStatement	break ;	1236:5:32706:32711	916994	16	True				
ANR	920454	Label	case 'j' :	1237:4:32717:32725	916994	17	True				
ANR	920455	CompoundStatement		606:6:14763:14786	916994	18					
ANR	920456	IdentifierDeclStatement	PJ * pj = pj_new ( ) ;	1239:6:32740:32758	916994	0	True				
ANR	920457	IdentifierDecl	* pj = pj_new ( )		916994	0					
ANR	920458	IdentifierDeclType	PJ *		916994	0					
ANR	920459	Identifier	pj		916994	1					
ANR	920460	AssignmentExpression	* pj = pj_new ( )		916994	2		=			
ANR	920461	Identifier	pj		916994	0					
ANR	920462	CallExpression	pj_new ( )		916994	1					
ANR	920463	Callee	pj_new		916994	0					
ANR	920464	Identifier	pj_new		916994	0					
ANR	920465	ArgumentList			916994	1					
ANR	920466	ExpressionStatement	pj_o ( pj )	1240:6:32766:32775	916994	1	True				
ANR	920467	CallExpression	pj_o ( pj )		916994	0					
ANR	920468	Callee	pj_o		916994	0					
ANR	920469	Identifier	pj_o		916994	0					
ANR	920470	ArgumentList	pj		916994	1					
ANR	920471	Argument	pj		916994	0					
ANR	920472	Identifier	pj		916994	0					
ANR	920473	ExpressionStatement	"pj_ks ( pj , ""name"" , item -> name )"	1241:6:32783:32813	916994	2	True				
ANR	920474	CallExpression	"pj_ks ( pj , ""name"" , item -> name )"		916994	0					
ANR	920475	Callee	pj_ks		916994	0					
ANR	920476	Identifier	pj_ks		916994	0					
ANR	920477	ArgumentList	pj		916994	1					
ANR	920478	Argument	pj		916994	0					
ANR	920479	Identifier	pj		916994	0					
ANR	920480	Argument	"""name"""		916994	1					
ANR	920481	PrimaryExpression	"""name"""		916994	0					
ANR	920482	Argument	item -> name		916994	2					
ANR	920483	PtrMemberAccess	item -> name		916994	0					
ANR	920484	Identifier	item		916994	0					
ANR	920485	Identifier	name		916994	1					
ANR	920486	ExpressionStatement	"pj_kn ( pj , ""offset"" , item -> offset )"	1242:6:32821:32855	916994	3	True				
ANR	920487	CallExpression	"pj_kn ( pj , ""offset"" , item -> offset )"		916994	0					
ANR	920488	Callee	pj_kn		916994	0					
ANR	920489	Identifier	pj_kn		916994	0					
ANR	920490	ArgumentList	pj		916994	1					
ANR	920491	Argument	pj		916994	0					
ANR	920492	Identifier	pj		916994	0					
ANR	920493	Argument	"""offset"""		916994	1					
ANR	920494	PrimaryExpression	"""offset"""		916994	0					
ANR	920495	Argument	item -> offset		916994	2					
ANR	920496	PtrMemberAccess	item -> offset		916994	0					
ANR	920497	Identifier	item		916994	0					
ANR	920498	Identifier	offset		916994	1					
ANR	920499	ExpressionStatement	"pj_kn ( pj , ""size"" , item -> size )"	1243:6:32863:32893	916994	4	True				
ANR	920500	CallExpression	"pj_kn ( pj , ""size"" , item -> size )"		916994	0					
ANR	920501	Callee	pj_kn		916994	0					
ANR	920502	Identifier	pj_kn		916994	0					
ANR	920503	ArgumentList	pj		916994	1					
ANR	920504	Argument	pj		916994	0					
ANR	920505	Identifier	pj		916994	0					
ANR	920506	Argument	"""size"""		916994	1					
ANR	920507	PrimaryExpression	"""size"""		916994	0					
ANR	920508	Argument	item -> size		916994	2					
ANR	920509	PtrMemberAccess	item -> size		916994	0					
ANR	920510	Identifier	item		916994	0					
ANR	920511	Identifier	size		916994	1					
ANR	920512	ExpressionStatement	pj_end ( pj )	1244:6:32901:32912	916994	5	True				
ANR	920513	CallExpression	pj_end ( pj )		916994	0					
ANR	920514	Callee	pj_end		916994	0					
ANR	920515	Identifier	pj_end		916994	0					
ANR	920516	ArgumentList	pj		916994	1					
ANR	920517	Argument	pj		916994	0					
ANR	920518	Identifier	pj		916994	0					
ANR	920519	IdentifierDeclStatement	char * s = pj_drain ( pj ) ;	1245:6:32920:32943	916994	6	True				
ANR	920520	IdentifierDecl	* s = pj_drain ( pj )		916994	0					
ANR	920521	IdentifierDeclType	char *		916994	0					
ANR	920522	Identifier	s		916994	1					
ANR	920523	AssignmentExpression	* s = pj_drain ( pj )		916994	2		=			
ANR	920524	Identifier	s		916994	0					
ANR	920525	CallExpression	pj_drain ( pj )		916994	1					
ANR	920526	Callee	pj_drain		916994	0					
ANR	920527	Identifier	pj_drain		916994	0					
ANR	920528	ArgumentList	pj		916994	1					
ANR	920529	Argument	pj		916994	0					
ANR	920530	Identifier	pj		916994	0					
ANR	920531	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , s )"	1246:6:32951:32976	916994	7	True				
ANR	920532	CallExpression	"r_cons_printf ( ""%s\\n"" , s )"		916994	0					
ANR	920533	Callee	r_cons_printf		916994	0					
ANR	920534	Identifier	r_cons_printf		916994	0					
ANR	920535	ArgumentList	"""%s\\n"""		916994	1					
ANR	920536	Argument	"""%s\\n"""		916994	0					
ANR	920537	PrimaryExpression	"""%s\\n"""		916994	0					
ANR	920538	Argument	s		916994	1					
ANR	920539	Identifier	s		916994	0					
ANR	920540	ExpressionStatement	free ( s )	1247:6:32984:32992	916994	8	True				
ANR	920541	CallExpression	free ( s )		916994	0					
ANR	920542	Callee	free		916994	0					
ANR	920543	Identifier	free		916994	0					
ANR	920544	ArgumentList	s		916994	1					
ANR	920545	Argument	s		916994	0					
ANR	920546	Identifier	s		916994	0					
ANR	920547	BreakStatement	break ;	1249:5:33006:33011	916994	19	True				
ANR	920548	Label	default :	1250:4:33017:33024	916994	20	True				
ANR	920549	Identifier	default		916994	0					
ANR	920550	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , item -> name )"	1251:5:33031:33065	916994	21	True				
ANR	920551	CallExpression	"r_cons_printf ( ""%s\\n"" , item -> name )"		916994	0					
ANR	920552	Callee	r_cons_printf		916994	0					
ANR	920553	Identifier	r_cons_printf		916994	0					
ANR	920554	ArgumentList	"""%s\\n"""		916994	1					
ANR	920555	Argument	"""%s\\n"""		916994	0					
ANR	920556	PrimaryExpression	"""%s\\n"""		916994	0					
ANR	920557	Argument	item -> name		916994	1					
ANR	920558	PtrMemberAccess	item -> name		916994	0					
ANR	920559	Identifier	item		916994	0					
ANR	920560	Identifier	name		916994	1					
ANR	920561	BreakStatement	break ;	1252:5:33072:33077	916994	22	True				
ANR	920562	ElseStatement	else		916994	0					
ANR	920563	CompoundStatement		616:9:14942:14942	916994	0					
ANR	920564	ExpressionStatement	"r_flag_list ( core -> flags , * input , input [ 0 ] ? input + 1 : """" )"	1256:3:33104:33162	916994	0	True				
ANR	920565	CallExpression	"r_flag_list ( core -> flags , * input , input [ 0 ] ? input + 1 : """" )"		916994	0					
ANR	920566	Callee	r_flag_list		916994	0					
ANR	920567	Identifier	r_flag_list		916994	0					
ANR	920568	ArgumentList	core -> flags		916994	1					
ANR	920569	Argument	core -> flags		916994	0					
ANR	920570	PtrMemberAccess	core -> flags		916994	0					
ANR	920571	Identifier	core		916994	0					
ANR	920572	Identifier	flags		916994	1					
ANR	920573	Argument	* input		916994	1					
ANR	920574	UnaryOperationExpression	* input		916994	0					
ANR	920575	UnaryOperator	*		916994	0					
ANR	920576	Identifier	input		916994	1					
ANR	920577	Argument	"input [ 0 ] ? input + 1 : """""		916994	2					
ANR	920578	ConditionalExpression	"input [ 0 ] ? input + 1 : """""		916994	0					
ANR	920579	Condition	input [ 0 ]		916994	0					
ANR	920580	ArrayIndexing	input [ 0 ]		916994	0					
ANR	920581	Identifier	input		916994	0					
ANR	920582	PrimaryExpression	0		916994	1					
ANR	920583	AdditiveExpression	input + 1		916994	1		+			
ANR	920584	Identifier	input		916994	0					
ANR	920585	PrimaryExpression	1		916994	1					
ANR	920586	PrimaryExpression	""""""		916994	2					
ANR	920587	BreakStatement	break ;	1258:2:33170:33175	916994	81	True				
ANR	920588	Label	case 'i' :	1259:1:33178:33186	916994	82	True				
ANR	920589	IfStatement	if ( input [ 1 ] == ' ' || ( input [ 1 ] && input [ 2 ] == ' ' ) )		916994	83					
ANR	920590	Condition	input [ 1 ] == ' ' || ( input [ 1 ] && input [ 2 ] == ' ' )	1260:6:33202:33249	916994	0	True				
ANR	920591	OrExpression	input [ 1 ] == ' ' || ( input [ 1 ] && input [ 2 ] == ' ' )		916994	0		||			
ANR	920592	EqualityExpression	input [ 1 ] == ' '		916994	0		==			
ANR	920593	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920594	Identifier	input		916994	0					
ANR	920595	PrimaryExpression	1		916994	1					
ANR	920596	PrimaryExpression	' '		916994	1					
ANR	920597	AndExpression	input [ 1 ] && input [ 2 ] == ' '		916994	1		&&			
ANR	920598	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920599	Identifier	input		916994	0					
ANR	920600	PrimaryExpression	1		916994	1					
ANR	920601	EqualityExpression	input [ 2 ] == ' '		916994	1		==			
ANR	920602	ArrayIndexing	input [ 2 ]		916994	0					
ANR	920603	Identifier	input		916994	0					
ANR	920604	PrimaryExpression	2		916994	1					
ANR	920605	PrimaryExpression	' '		916994	1					
ANR	920606	CompoundStatement		622:3:15100:15146	916994	1					
ANR	920607	IdentifierDeclStatement	char * arg = strdup ( r_str_trim_ro ( input + 2 ) ) ;	1261:3:33257:33303	916994	0	True				
ANR	920608	IdentifierDecl	* arg = strdup ( r_str_trim_ro ( input + 2 ) )		916994	0					
ANR	920609	IdentifierDeclType	char *		916994	0					
ANR	920610	Identifier	arg		916994	1					
ANR	920611	AssignmentExpression	* arg = strdup ( r_str_trim_ro ( input + 2 ) )		916994	2		=			
ANR	920612	Identifier	arg		916994	0					
ANR	920613	CallExpression	strdup ( r_str_trim_ro ( input + 2 ) )		916994	1					
ANR	920614	Callee	strdup		916994	0					
ANR	920615	Identifier	strdup		916994	0					
ANR	920616	ArgumentList	r_str_trim_ro ( input + 2 )		916994	1					
ANR	920617	Argument	r_str_trim_ro ( input + 2 )		916994	0					
ANR	920618	CallExpression	r_str_trim_ro ( input + 2 )		916994	0					
ANR	920619	Callee	r_str_trim_ro		916994	0					
ANR	920620	Identifier	r_str_trim_ro		916994	0					
ANR	920621	ArgumentList	input + 2		916994	1					
ANR	920622	Argument	input + 2		916994	0					
ANR	920623	AdditiveExpression	input + 2		916994	0		+			
ANR	920624	Identifier	input		916994	0					
ANR	920625	PrimaryExpression	2		916994	1					
ANR	920626	IfStatement	if ( * arg )		916994	1					
ANR	920627	Condition	* arg	1262:7:33312:33315	916994	0	True				
ANR	920628	UnaryOperationExpression	* arg		916994	0					
ANR	920629	UnaryOperator	*		916994	0					
ANR	920630	Identifier	arg		916994	1					
ANR	920631	CompoundStatement		625:4:15213:15241	916994	1					
ANR	920632	ExpressionStatement	arg = strdup ( r_str_trim_ro ( input + 2 ) )	1263:4:33324:33364	916994	0	True				
ANR	920633	AssignmentExpression	arg = strdup ( r_str_trim_ro ( input + 2 ) )		916994	0		=			
ANR	920634	Identifier	arg		916994	0					
ANR	920635	CallExpression	strdup ( r_str_trim_ro ( input + 2 ) )		916994	1					
ANR	920636	Callee	strdup		916994	0					
ANR	920637	Identifier	strdup		916994	0					
ANR	920638	ArgumentList	r_str_trim_ro ( input + 2 )		916994	1					
ANR	920639	Argument	r_str_trim_ro ( input + 2 )		916994	0					
ANR	920640	CallExpression	r_str_trim_ro ( input + 2 )		916994	0					
ANR	920641	Callee	r_str_trim_ro		916994	0					
ANR	920642	Identifier	r_str_trim_ro		916994	0					
ANR	920643	ArgumentList	input + 2		916994	1					
ANR	920644	Argument	input + 2		916994	0					
ANR	920645	AdditiveExpression	input + 2		916994	0		+			
ANR	920646	Identifier	input		916994	0					
ANR	920647	PrimaryExpression	2		916994	1					
ANR	920648	IdentifierDeclStatement	"char * sp = strchr ( arg , ' ' ) ;"	1264:4:33370:33398	916994	1	True				
ANR	920649	IdentifierDecl	"* sp = strchr ( arg , ' ' )"		916994	0					
ANR	920650	IdentifierDeclType	char *		916994	0					
ANR	920651	Identifier	sp		916994	1					
ANR	920652	AssignmentExpression	"* sp = strchr ( arg , ' ' )"		916994	2		=			
ANR	920653	Identifier	sp		916994	0					
ANR	920654	CallExpression	"strchr ( arg , ' ' )"		916994	1					
ANR	920655	Callee	strchr		916994	0					
ANR	920656	Identifier	strchr		916994	0					
ANR	920657	ArgumentList	arg		916994	1					
ANR	920658	Argument	arg		916994	0					
ANR	920659	Identifier	arg		916994	0					
ANR	920660	Argument	' '		916994	1					
ANR	920661	PrimaryExpression	' '		916994	0					
ANR	920662	IfStatement	if ( ! sp )		916994	2					
ANR	920663	Condition	! sp	1265:8:33408:33410	916994	0	True				
ANR	920664	UnaryOperationExpression	! sp		916994	0					
ANR	920665	UnaryOperator	!		916994	0					
ANR	920666	Identifier	sp		916994	1					
ANR	920667	CompoundStatement		626:13:15256:15256	916994	1					
ANR	920668	Statement	char	1266:5:33420:33423	916994	0	True				
ANR	920669	Statement	*	1266:10:33425:33425	916994	1	True				
ANR	920670	Statement	newarg	1266:11:33426:33431	916994	2	True				
ANR	920671	Statement	=	1266:18:33433:33433	916994	3	True				
ANR	920672	Statement	r_str_newf	1266:20:33435:33444	916994	4	True				
ANR	920673	Statement	(	1266:31:33446:33446	916994	5	True				
ANR	920674	Statement	"""%c0x%"""	1266:32:33447:33453	916994	6	True				
ANR	920675	Statement	PFMT64x	1266:39:33454:33460	916994	7	True				
ANR	920676	Statement	""" %s+0x%"""	1266:46:33461:33469	916994	8	True				
ANR	920677	Statement	PFMT64x	1266:55:33470:33476	916994	9	True				
ANR	920678	Statement	","	1266:62:33477:33477	916994	10	True				
ANR	920679	Statement	input	1267:6:33485:33489	916994	11	True				
ANR	920680	Statement	[	1267:11:33490:33490	916994	12	True				
ANR	920681	Statement	1	1267:12:33491:33491	916994	13	True				
ANR	920682	Statement	]	1267:13:33492:33492	916994	14	True				
ANR	920683	Statement	","	1267:14:33493:33493	916994	15	True				
ANR	920684	Statement	core	1267:16:33495:33498	916994	16	True				
ANR	920685	Statement	->	1267:20:33499:33500	916994	17	True				
ANR	920686	Statement	offset	1267:22:33501:33506	916994	18	True				
ANR	920687	Statement	","	1267:28:33507:33507	916994	19	True				
ANR	920688	Statement	arg	1267:30:33509:33511	916994	20	True				
ANR	920689	Statement	","	1267:33:33512:33512	916994	21	True				
ANR	920690	Statement	core	1267:35:33514:33517	916994	22	True				
ANR	920691	Statement	->	1267:39:33518:33519	916994	23	True				
ANR	920692	Statement	offset	1267:41:33520:33525	916994	24	True				
ANR	920693	Statement	)	1267:47:33526:33526	916994	25	True				
ANR	920694	ExpressionStatement		1267:48:33527:33527	916994	26	True				
ANR	920695	ExpressionStatement	free ( arg )	1268:5:33534:33544	916994	27	True				
ANR	920696	CallExpression	free ( arg )		916994	0					
ANR	920697	Callee	free		916994	0					
ANR	920698	Identifier	free		916994	0					
ANR	920699	ArgumentList	arg		916994	1					
ANR	920700	Argument	arg		916994	0					
ANR	920701	Identifier	arg		916994	0					
ANR	920702	ExpressionStatement	arg = newarg	1269:5:33551:33563	916994	28	True				
ANR	920703	AssignmentExpression	arg = newarg		916994	0		=			
ANR	920704	Identifier	arg		916994	0					
ANR	920705	Identifier	newarg		916994	1					
ANR	920706	ElseStatement	else		916994	0					
ANR	920707	CompoundStatement		632:5:15426:15475	916994	0					
ANR	920708	IdentifierDeclStatement	"char * newarg = r_str_newf ( ""%c%s"" , input [ 1 ] , arg ) ;"	1271:5:33583:33632	916994	0	True				
ANR	920709	IdentifierDecl	"* newarg = r_str_newf ( ""%c%s"" , input [ 1 ] , arg )"		916994	0					
ANR	920710	IdentifierDeclType	char *		916994	0					
ANR	920711	Identifier	newarg		916994	1					
ANR	920712	AssignmentExpression	"* newarg = r_str_newf ( ""%c%s"" , input [ 1 ] , arg )"		916994	2		=			
ANR	920713	Identifier	newarg		916994	0					
ANR	920714	CallExpression	"r_str_newf ( ""%c%s"" , input [ 1 ] , arg )"		916994	1					
ANR	920715	Callee	r_str_newf		916994	0					
ANR	920716	Identifier	r_str_newf		916994	0					
ANR	920717	ArgumentList	"""%c%s"""		916994	1					
ANR	920718	Argument	"""%c%s"""		916994	0					
ANR	920719	PrimaryExpression	"""%c%s"""		916994	0					
ANR	920720	Argument	input [ 1 ]		916994	1					
ANR	920721	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920722	Identifier	input		916994	0					
ANR	920723	PrimaryExpression	1		916994	1					
ANR	920724	Argument	arg		916994	2					
ANR	920725	Identifier	arg		916994	0					
ANR	920726	ExpressionStatement	free ( arg )	1272:5:33639:33649	916994	1	True				
ANR	920727	CallExpression	free ( arg )		916994	0					
ANR	920728	Callee	free		916994	0					
ANR	920729	Identifier	free		916994	0					
ANR	920730	ArgumentList	arg		916994	1					
ANR	920731	Argument	arg		916994	0					
ANR	920732	Identifier	arg		916994	0					
ANR	920733	ExpressionStatement	arg = newarg	1273:5:33656:33668	916994	2	True				
ANR	920734	AssignmentExpression	arg = newarg		916994	0		=			
ANR	920735	Identifier	arg		916994	0					
ANR	920736	Identifier	newarg		916994	1					
ANR	920737	ElseStatement	else		916994	0					
ANR	920738	CompoundStatement		636:10:15529:15529	916994	0					
ANR	920739	ExpressionStatement	free ( arg )	1276:4:33692:33702	916994	0	True				
ANR	920740	CallExpression	free ( arg )		916994	0					
ANR	920741	Callee	free		916994	0					
ANR	920742	Identifier	free		916994	0					
ANR	920743	ArgumentList	arg		916994	1					
ANR	920744	Argument	arg		916994	0					
ANR	920745	Identifier	arg		916994	0					
ANR	920746	Statement	arg	1277:4:33708:33710	916994	1	True				
ANR	920747	Statement	=	1277:8:33712:33712	916994	2	True				
ANR	920748	Statement	r_str_newf	1277:10:33714:33723	916994	3	True				
ANR	920749	Statement	(	1277:21:33725:33725	916994	4	True				
ANR	920750	Statement	""" 0x%"""	1277:22:33726:33731	916994	5	True				
ANR	920751	Statement	PFMT64x	1277:28:33732:33738	916994	6	True				
ANR	920752	Statement	""" 0x%"""	1277:35:33739:33744	916994	7	True				
ANR	920753	Statement	PFMT64x	1277:41:33745:33751	916994	8	True				
ANR	920754	Statement	","	1277:48:33752:33752	916994	9	True				
ANR	920755	Statement	core	1278:5:33759:33762	916994	10	True				
ANR	920756	Statement	->	1278:9:33763:33764	916994	11	True				
ANR	920757	Statement	offset	1278:11:33765:33770	916994	12	True				
ANR	920758	Statement	","	1278:17:33771:33771	916994	13	True				
ANR	920759	Statement	core	1278:19:33773:33776	916994	14	True				
ANR	920760	Statement	->	1278:23:33777:33778	916994	15	True				
ANR	920761	Statement	offset	1278:25:33779:33784	916994	16	True				
ANR	920762	Statement	+	1278:32:33786:33786	916994	17	True				
ANR	920763	Statement	core	1278:34:33788:33791	916994	18	True				
ANR	920764	Statement	->	1278:38:33792:33793	916994	19	True				
ANR	920765	Statement	blocksize	1278:40:33794:33802	916994	20	True				
ANR	920766	Statement	)	1278:49:33803:33803	916994	21	True				
ANR	920767	ExpressionStatement		1278:50:33804:33804	916994	22	True				
ANR	920768	ExpressionStatement	"r_flag_list ( core -> flags , 'i' , arg )"	1280:3:33814:33849	916994	2	True				
ANR	920769	CallExpression	"r_flag_list ( core -> flags , 'i' , arg )"		916994	0					
ANR	920770	Callee	r_flag_list		916994	0					
ANR	920771	Identifier	r_flag_list		916994	0					
ANR	920772	ArgumentList	core -> flags		916994	1					
ANR	920773	Argument	core -> flags		916994	0					
ANR	920774	PtrMemberAccess	core -> flags		916994	0					
ANR	920775	Identifier	core		916994	0					
ANR	920776	Identifier	flags		916994	1					
ANR	920777	Argument	'i'		916994	1					
ANR	920778	PrimaryExpression	'i'		916994	0					
ANR	920779	Argument	arg		916994	2					
ANR	920780	Identifier	arg		916994	0					
ANR	920781	ExpressionStatement	free ( arg )	1281:3:33854:33864	916994	3	True				
ANR	920782	CallExpression	free ( arg )		916994	0					
ANR	920783	Callee	free		916994	0					
ANR	920784	Identifier	free		916994	0					
ANR	920785	ArgumentList	arg		916994	1					
ANR	920786	Argument	arg		916994	0					
ANR	920787	Identifier	arg		916994	0					
ANR	920788	ElseStatement	else		916994	0					
ANR	920789	CompoundStatement		643:9:15718:15718	916994	0					
ANR	920790	Statement	char	1284:3:33909:33912	916994	0	True				
ANR	920791	Statement	*	1284:8:33914:33914	916994	1	True				
ANR	920792	Statement	arg	1284:9:33915:33917	916994	2	True				
ANR	920793	Statement	=	1284:13:33919:33919	916994	3	True				
ANR	920794	Statement	r_str_newf	1284:15:33921:33930	916994	4	True				
ANR	920795	Statement	(	1284:26:33932:33932	916994	5	True				
ANR	920796	Statement	""" 0x%"""	1284:27:33933:33938	916994	6	True				
ANR	920797	Statement	PFMT64x	1284:33:33939:33945	916994	7	True				
ANR	920798	Statement	""" 0x%"""	1284:40:33946:33951	916994	8	True				
ANR	920799	Statement	PFMT64x	1284:46:33952:33958	916994	9	True				
ANR	920800	Statement	","	1284:53:33959:33959	916994	10	True				
ANR	920801	Statement	core	1285:4:33965:33968	916994	11	True				
ANR	920802	Statement	->	1285:8:33969:33970	916994	12	True				
ANR	920803	Statement	offset	1285:10:33971:33976	916994	13	True				
ANR	920804	Statement	","	1285:16:33977:33977	916994	14	True				
ANR	920805	Statement	core	1285:18:33979:33982	916994	15	True				
ANR	920806	Statement	->	1285:22:33983:33984	916994	16	True				
ANR	920807	Statement	offset	1285:24:33985:33990	916994	17	True				
ANR	920808	Statement	+	1285:31:33992:33992	916994	18	True				
ANR	920809	Statement	core	1285:33:33994:33997	916994	19	True				
ANR	920810	Statement	->	1285:37:33998:33999	916994	20	True				
ANR	920811	Statement	blocksize	1285:39:34000:34008	916994	21	True				
ANR	920812	Statement	)	1285:48:34009:34009	916994	22	True				
ANR	920813	ExpressionStatement		1285:49:34010:34010	916994	23	True				
ANR	920814	ExpressionStatement	"r_flag_list ( core -> flags , 'i' , arg )"	1286:3:34015:34050	916994	24	True				
ANR	920815	CallExpression	"r_flag_list ( core -> flags , 'i' , arg )"		916994	0					
ANR	920816	Callee	r_flag_list		916994	0					
ANR	920817	Identifier	r_flag_list		916994	0					
ANR	920818	ArgumentList	core -> flags		916994	1					
ANR	920819	Argument	core -> flags		916994	0					
ANR	920820	PtrMemberAccess	core -> flags		916994	0					
ANR	920821	Identifier	core		916994	0					
ANR	920822	Identifier	flags		916994	1					
ANR	920823	Argument	'i'		916994	1					
ANR	920824	PrimaryExpression	'i'		916994	0					
ANR	920825	Argument	arg		916994	2					
ANR	920826	Identifier	arg		916994	0					
ANR	920827	ExpressionStatement	free ( arg )	1287:3:34055:34065	916994	25	True				
ANR	920828	CallExpression	free ( arg )		916994	0					
ANR	920829	Callee	free		916994	0					
ANR	920830	Identifier	free		916994	0					
ANR	920831	ArgumentList	arg		916994	1					
ANR	920832	Argument	arg		916994	0					
ANR	920833	Identifier	arg		916994	0					
ANR	920834	BreakStatement	break ;	1289:2:34073:34078	916994	84	True				
ANR	920835	Label	case 'd' :	1290:1:34081:34089	916994	85	True				
ANR	920836	CompoundStatement		656:3:16023:16049	916994	86					
ANR	920837	IdentifierDeclStatement	ut64 addr = core -> offset ;	1292:3:34106:34130	916994	0	True				
ANR	920838	IdentifierDecl	addr = core -> offset		916994	0					
ANR	920839	IdentifierDeclType	ut64		916994	0					
ANR	920840	Identifier	addr		916994	1					
ANR	920841	AssignmentExpression	addr = core -> offset		916994	2		=			
ANR	920842	Identifier	addr		916994	0					
ANR	920843	PtrMemberAccess	core -> offset		916994	1					
ANR	920844	Identifier	core		916994	0					
ANR	920845	Identifier	offset		916994	1					
ANR	920846	IdentifierDeclStatement	char * arg = NULL ;	1293:3:34135:34151	916994	1	True				
ANR	920847	IdentifierDecl	* arg = NULL		916994	0					
ANR	920848	IdentifierDeclType	char *		916994	0					
ANR	920849	Identifier	arg		916994	1					
ANR	920850	AssignmentExpression	* arg = NULL		916994	2		=			
ANR	920851	Identifier	NULL		916994	0					
ANR	920852	Identifier	NULL		916994	1					
ANR	920853	IdentifierDeclStatement	RFlagItem * f = NULL ;	1294:3:34156:34175	916994	2	True				
ANR	920854	IdentifierDecl	* f = NULL		916994	0					
ANR	920855	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920856	Identifier	f		916994	1					
ANR	920857	AssignmentExpression	* f = NULL		916994	2		=			
ANR	920858	Identifier	NULL		916994	0					
ANR	920859	Identifier	NULL		916994	1					
ANR	920860	IdentifierDeclStatement	bool strict_offset = false ;	1295:3:34180:34206	916994	3	True				
ANR	920861	IdentifierDecl	strict_offset = false		916994	0					
ANR	920862	IdentifierDeclType	bool		916994	0					
ANR	920863	Identifier	strict_offset		916994	1					
ANR	920864	AssignmentExpression	strict_offset = false		916994	2		=			
ANR	920865	Identifier	false		916994	0					
ANR	920866	Identifier	false		916994	1					
ANR	920867	SwitchStatement	switch ( input [ 1 ] )		916994	4					
ANR	920868	Condition	input [ 1 ]	1296:11:34219:34226	916994	0	True				
ANR	920869	ArrayIndexing	input [ 1 ]		916994	0					
ANR	920870	Identifier	input		916994	0					
ANR	920871	PrimaryExpression	1		916994	1					
ANR	920872	CompoundStatement		657:21:16072:16072	916994	1					
ANR	920873	Label	case '?' :	1297:3:34234:34242	916994	0	True				
ANR	920874	ExpressionStatement	"r_core_cmd_help ( core , help_msg_fd )"	1298:4:34248:34283	916994	1	True				
ANR	920875	CallExpression	"r_core_cmd_help ( core , help_msg_fd )"		916994	0					
ANR	920876	Callee	r_core_cmd_help		916994	0					
ANR	920877	Identifier	r_core_cmd_help		916994	0					
ANR	920878	ArgumentList	core		916994	1					
ANR	920879	Argument	core		916994	0					
ANR	920880	Identifier	core		916994	0					
ANR	920881	Argument	help_msg_fd		916994	1					
ANR	920882	Identifier	help_msg_fd		916994	0					
ANR	920883	IfStatement	if ( str )		916994	2					
ANR	920884	Condition	str	1299:8:34293:34295	916994	0	True				
ANR	920885	Identifier	str		916994	0					
ANR	920886	CompoundStatement		660:13:16141:16141	916994	1					
ANR	920887	ExpressionStatement	free ( str )	1300:5:34305:34315	916994	0	True				
ANR	920888	CallExpression	free ( str )		916994	0					
ANR	920889	Callee	free		916994	0					
ANR	920890	Identifier	free		916994	0					
ANR	920891	ArgumentList	str		916994	1					
ANR	920892	Argument	str		916994	0					
ANR	920893	Identifier	str		916994	0					
ANR	920894	ReturnStatement	return false ;	1302:4:34327:34339	916994	3	True				
ANR	920895	Identifier	false		916994	0					
ANR	920896	Label	case '\\0' :	1303:3:34344:34353	916994	4	True				
ANR	920897	ExpressionStatement	addr = core -> offset	1304:4:34359:34378	916994	5	True				
ANR	920898	AssignmentExpression	addr = core -> offset		916994	0		=			
ANR	920899	Identifier	addr		916994	0					
ANR	920900	PtrMemberAccess	core -> offset		916994	1					
ANR	920901	Identifier	core		916994	0					
ANR	920902	Identifier	offset		916994	1					
ANR	920903	BreakStatement	break ;	1305:4:34384:34389	916994	6	True				
ANR	920904	Label	case 'd' :	1306:3:34394:34402	916994	7	True				
ANR	920905	ExpressionStatement	"arg = strchr ( input , ' ' )"	1307:4:34408:34433	916994	8	True				
ANR	920906	AssignmentExpression	"arg = strchr ( input , ' ' )"		916994	0		=			
ANR	920907	Identifier	arg		916994	0					
ANR	920908	CallExpression	"strchr ( input , ' ' )"		916994	1					
ANR	920909	Callee	strchr		916994	0					
ANR	920910	Identifier	strchr		916994	0					
ANR	920911	ArgumentList	input		916994	1					
ANR	920912	Argument	input		916994	0					
ANR	920913	Identifier	input		916994	0					
ANR	920914	Argument	' '		916994	1					
ANR	920915	PrimaryExpression	' '		916994	0					
ANR	920916	IfStatement	if ( arg )		916994	9					
ANR	920917	Condition	arg	1308:8:34443:34445	916994	0	True				
ANR	920918	Identifier	arg		916994	0					
ANR	920919	CompoundStatement		669:13:16291:16291	916994	1					
ANR	920920	ExpressionStatement	"addr = r_num_math ( core -> num , arg + 1 )"	1309:5:34455:34493	916994	0	True				
ANR	920921	AssignmentExpression	"addr = r_num_math ( core -> num , arg + 1 )"		916994	0		=			
ANR	920922	Identifier	addr		916994	0					
ANR	920923	CallExpression	"r_num_math ( core -> num , arg + 1 )"		916994	1					
ANR	920924	Callee	r_num_math		916994	0					
ANR	920925	Identifier	r_num_math		916994	0					
ANR	920926	ArgumentList	core -> num		916994	1					
ANR	920927	Argument	core -> num		916994	0					
ANR	920928	PtrMemberAccess	core -> num		916994	0					
ANR	920929	Identifier	core		916994	0					
ANR	920930	Identifier	num		916994	1					
ANR	920931	Argument	arg + 1		916994	1					
ANR	920932	AdditiveExpression	arg + 1		916994	0		+			
ANR	920933	Identifier	arg		916994	0					
ANR	920934	PrimaryExpression	1		916994	1					
ANR	920935	BreakStatement	break ;	1311:4:34505:34510	916994	10	True				
ANR	920936	Label	case '.' :	1312:3:34515:34523	916994	11	True				
ANR	920937	CompoundStatement		685:4:16695:16713	916994	12					
ANR	920938	IdentifierDeclStatement	RFlagItem * flag ;	1314:4:34575:34590	916994	0	True				
ANR	920939	IdentifierDecl	* flag		916994	0					
ANR	920940	IdentifierDeclType	RFlagItem *		916994	0					
ANR	920941	Identifier	flag		916994	1					
ANR	920942	IdentifierDeclStatement	RListIter * iter ;	1315:4:34596:34611	916994	1	True				
ANR	920943	IdentifierDecl	* iter		916994	0					
ANR	920944	IdentifierDeclType	RListIter *		916994	0					
ANR	920945	Identifier	iter		916994	1					
ANR	920946	IdentifierDeclStatement	bool isJson = false ;	1316:4:34617:34636	916994	2	True				
ANR	920947	IdentifierDecl	isJson = false		916994	0					
ANR	920948	IdentifierDeclType	bool		916994	0					
ANR	920949	Identifier	isJson		916994	1					
ANR	920950	AssignmentExpression	isJson = false		916994	2		=			
ANR	920951	Identifier	false		916994	0					
ANR	920952	Identifier	false		916994	1					
ANR	920953	IdentifierDeclStatement	const RList * flaglist ;	1317:4:34642:34663	916994	3	True				
ANR	920954	IdentifierDecl	* flaglist		916994	0					
ANR	920955	IdentifierDeclType	const RList *		916994	0					
ANR	920956	Identifier	flaglist		916994	1					
ANR	920957	ExpressionStatement	"arg = strchr ( input , ' ' )"	1318:4:34669:34694	916994	4	True				
ANR	920958	AssignmentExpression	"arg = strchr ( input , ' ' )"		916994	0		=			
ANR	920959	Identifier	arg		916994	0					
ANR	920960	CallExpression	"strchr ( input , ' ' )"		916994	1					
ANR	920961	Callee	strchr		916994	0					
ANR	920962	Identifier	strchr		916994	0					
ANR	920963	ArgumentList	input		916994	1					
ANR	920964	Argument	input		916994	0					
ANR	920965	Identifier	input		916994	0					
ANR	920966	Argument	' '		916994	1					
ANR	920967	PrimaryExpression	' '		916994	0					
ANR	920968	IfStatement	if ( arg )		916994	5					
ANR	920969	Condition	arg	1319:8:34704:34706	916994	0	True				
ANR	920970	Identifier	arg		916994	0					
ANR	920971	CompoundStatement		680:13:16552:16552	916994	1					
ANR	920972	ExpressionStatement	"addr = r_num_math ( core -> num , arg + 1 )"	1320:5:34716:34754	916994	0	True				
ANR	920973	AssignmentExpression	"addr = r_num_math ( core -> num , arg + 1 )"		916994	0		=			
ANR	920974	Identifier	addr		916994	0					
ANR	920975	CallExpression	"r_num_math ( core -> num , arg + 1 )"		916994	1					
ANR	920976	Callee	r_num_math		916994	0					
ANR	920977	Identifier	r_num_math		916994	0					
ANR	920978	ArgumentList	core -> num		916994	1					
ANR	920979	Argument	core -> num		916994	0					
ANR	920980	PtrMemberAccess	core -> num		916994	0					
ANR	920981	Identifier	core		916994	0					
ANR	920982	Identifier	num		916994	1					
ANR	920983	Argument	arg + 1		916994	1					
ANR	920984	AdditiveExpression	arg + 1		916994	0		+			
ANR	920985	Identifier	arg		916994	0					
ANR	920986	PrimaryExpression	1		916994	1					
ANR	920987	ExpressionStatement	"flaglist = r_flag_get_list ( core -> flags , addr )"	1322:4:34766:34812	916994	6	True				
ANR	920988	AssignmentExpression	"flaglist = r_flag_get_list ( core -> flags , addr )"		916994	0		=			
ANR	920989	Identifier	flaglist		916994	0					
ANR	920990	CallExpression	"r_flag_get_list ( core -> flags , addr )"		916994	1					
ANR	920991	Callee	r_flag_get_list		916994	0					
ANR	920992	Identifier	r_flag_get_list		916994	0					
ANR	920993	ArgumentList	core -> flags		916994	1					
ANR	920994	Argument	core -> flags		916994	0					
ANR	920995	PtrMemberAccess	core -> flags		916994	0					
ANR	920996	Identifier	core		916994	0					
ANR	920997	Identifier	flags		916994	1					
ANR	920998	Argument	addr		916994	1					
ANR	920999	Identifier	addr		916994	0					
ANR	921000	ExpressionStatement	"isJson = strchr ( input , 'j' )"	1323:4:34818:34846	916994	7	True				
ANR	921001	AssignmentExpression	"isJson = strchr ( input , 'j' )"		916994	0		=			
ANR	921002	Identifier	isJson		916994	0					
ANR	921003	CallExpression	"strchr ( input , 'j' )"		916994	1					
ANR	921004	Callee	strchr		916994	0					
ANR	921005	Identifier	strchr		916994	0					
ANR	921006	ArgumentList	input		916994	1					
ANR	921007	Argument	input		916994	0					
ANR	921008	Identifier	input		916994	0					
ANR	921009	Argument	'j'		916994	1					
ANR	921010	PrimaryExpression	'j'		916994	0					
ANR	921011	IdentifierDeclStatement	PJ * pj = pj_new ( ) ;	1324:4:34852:34870	916994	8	True				
ANR	921012	IdentifierDecl	* pj = pj_new ( )		916994	0					
ANR	921013	IdentifierDeclType	PJ *		916994	0					
ANR	921014	Identifier	pj		916994	1					
ANR	921015	AssignmentExpression	* pj = pj_new ( )		916994	2		=			
ANR	921016	Identifier	pj		916994	0					
ANR	921017	CallExpression	pj_new ( )		916994	1					
ANR	921018	Callee	pj_new		916994	0					
ANR	921019	Identifier	pj_new		916994	0					
ANR	921020	ArgumentList			916994	1					
ANR	921021	IfStatement	if ( isJson )		916994	9					
ANR	921022	Condition	isJson	1325:8:34881:34886	916994	0	True				
ANR	921023	Identifier	isJson		916994	0					
ANR	921024	CompoundStatement		686:16:16732:16732	916994	1					
ANR	921025	ExpressionStatement	pj_a ( pj )	1326:5:34896:34905	916994	0	True				
ANR	921026	CallExpression	pj_a ( pj )		916994	0					
ANR	921027	Callee	pj_a		916994	0					
ANR	921028	Identifier	pj_a		916994	0					
ANR	921029	ArgumentList	pj		916994	1					
ANR	921030	Argument	pj		916994	0					
ANR	921031	Identifier	pj		916994	0					
ANR	921032	Statement	r_list_foreach	1328:4:34917:34930	916994	10	True				
ANR	921033	Statement	(	1328:19:34932:34932	916994	11	True				
ANR	921034	Statement	flaglist	1328:20:34933:34940	916994	12	True				
ANR	921035	Statement	","	1328:28:34941:34941	916994	13	True				
ANR	921036	Statement	iter	1328:30:34943:34946	916994	14	True				
ANR	921037	Statement	","	1328:34:34947:34947	916994	15	True				
ANR	921038	Statement	flag	1328:36:34949:34952	916994	16	True				
ANR	921039	Statement	)	1328:40:34953:34953	916994	17	True				
ANR	921040	CompoundStatement		689:42:16798:16798	916994	18					
ANR	921041	IfStatement	if ( flag )		916994	0					
ANR	921042	Condition	flag	1329:9:34966:34969	916994	0	True				
ANR	921043	Identifier	flag		916994	0					
ANR	921044	CompoundStatement		690:15:16815:16815	916994	1					
ANR	921045	IfStatement	if ( isJson )		916994	0					
ANR	921046	Condition	isJson	1330:10:34984:34989	916994	0	True				
ANR	921047	Identifier	isJson		916994	0					
ANR	921048	CompoundStatement		691:18:16835:16835	916994	1					
ANR	921049	ExpressionStatement	"pj_s ( pj , flag -> name )"	1331:7:35001:35022	916994	0	True				
ANR	921050	CallExpression	"pj_s ( pj , flag -> name )"		916994	0					
ANR	921051	Callee	pj_s		916994	0					
ANR	921052	Identifier	pj_s		916994	0					
ANR	921053	ArgumentList	pj		916994	1					
ANR	921054	Argument	pj		916994	0					
ANR	921055	Identifier	pj		916994	0					
ANR	921056	Argument	flag -> name		916994	1					
ANR	921057	PtrMemberAccess	flag -> name		916994	0					
ANR	921058	Identifier	flag		916994	0					
ANR	921059	Identifier	name		916994	1					
ANR	921060	ElseStatement	else		916994	0					
ANR	921061	CompoundStatement		693:13:16880:16880	916994	0					
ANR	921062	ExpressionStatement	r_cons_println ( flag -> name )	1333:7:35046:35073	916994	0	True				
ANR	921063	CallExpression	r_cons_println ( flag -> name )		916994	0					
ANR	921064	Callee	r_cons_println		916994	0					
ANR	921065	Identifier	r_cons_println		916994	0					
ANR	921066	ArgumentList	flag -> name		916994	1					
ANR	921067	Argument	flag -> name		916994	0					
ANR	921068	PtrMemberAccess	flag -> name		916994	0					
ANR	921069	Identifier	flag		916994	0					
ANR	921070	Identifier	name		916994	1					
ANR	921071	IfStatement	if ( isJson )		916994	19					
ANR	921072	Condition	isJson	1338:8:35105:35110	916994	0	True				
ANR	921073	Identifier	isJson		916994	0					
ANR	921074	CompoundStatement		699:16:16956:16956	916994	1					
ANR	921075	ExpressionStatement	pj_end ( pj )	1339:5:35120:35131	916994	0	True				
ANR	921076	CallExpression	pj_end ( pj )		916994	0					
ANR	921077	Callee	pj_end		916994	0					
ANR	921078	Identifier	pj_end		916994	0					
ANR	921079	ArgumentList	pj		916994	1					
ANR	921080	Argument	pj		916994	0					
ANR	921081	Identifier	pj		916994	0					
ANR	921082	ExpressionStatement	r_cons_println ( pj_string ( pj ) )	1340:5:35138:35169	916994	1	True				
ANR	921083	CallExpression	r_cons_println ( pj_string ( pj ) )		916994	0					
ANR	921084	Callee	r_cons_println		916994	0					
ANR	921085	Identifier	r_cons_println		916994	0					
ANR	921086	ArgumentList	pj_string ( pj )		916994	1					
ANR	921087	Argument	pj_string ( pj )		916994	0					
ANR	921088	CallExpression	pj_string ( pj )		916994	0					
ANR	921089	Callee	pj_string		916994	0					
ANR	921090	Identifier	pj_string		916994	0					
ANR	921091	ArgumentList	pj		916994	1					
ANR	921092	Argument	pj		916994	0					
ANR	921093	Identifier	pj		916994	0					
ANR	921094	IfStatement	if ( pj )		916994	20					
ANR	921095	Condition	pj	1343:8:35186:35187	916994	0	True				
ANR	921096	Identifier	pj		916994	0					
ANR	921097	CompoundStatement		704:12:17033:17033	916994	1					
ANR	921098	ExpressionStatement	pj_free ( pj )	1344:5:35197:35209	916994	0	True				
ANR	921099	CallExpression	pj_free ( pj )		916994	0					
ANR	921100	Callee	pj_free		916994	0					
ANR	921101	Identifier	pj_free		916994	0					
ANR	921102	ArgumentList	pj		916994	1					
ANR	921103	Argument	pj		916994	0					
ANR	921104	Identifier	pj		916994	0					
ANR	921105	ReturnStatement	return 0 ;	1347:4:35222:35230	916994	21	True				
ANR	921106	PrimaryExpression	0		916994	0					
ANR	921107	Label	case 'w' :	1349:3:35241:35249	916994	13	True				
ANR	921108	CompoundStatement		741:4:17768:17836	916994	14					
ANR	921109	ExpressionStatement	"arg = strchr ( input , ' ' )"	1350:4:35257:35282	916994	0	True				
ANR	921110	AssignmentExpression	"arg = strchr ( input , ' ' )"		916994	0		=			
ANR	921111	Identifier	arg		916994	0					
ANR	921112	CallExpression	"strchr ( input , ' ' )"		916994	1					
ANR	921113	Callee	strchr		916994	0					
ANR	921114	Identifier	strchr		916994	0					
ANR	921115	ArgumentList	input		916994	1					
ANR	921116	Argument	input		916994	0					
ANR	921117	Identifier	input		916994	0					
ANR	921118	Argument	' '		916994	1					
ANR	921119	PrimaryExpression	' '		916994	0					
ANR	921120	IfStatement	if ( ! arg )		916994	1					
ANR	921121	Condition	! arg	1351:8:35292:35295	916994	0	True				
ANR	921122	UnaryOperationExpression	! arg		916994	0					
ANR	921123	UnaryOperator	!		916994	0					
ANR	921124	Identifier	arg		916994	1					
ANR	921125	CompoundStatement		712:14:17141:17141	916994	1					
ANR	921126	ReturnStatement	return 0 ;	1352:5:35305:35313	916994	0	True				
ANR	921127	PrimaryExpression	0		916994	0					
ANR	921128	ExpressionStatement	arg ++	1354:4:35325:35330	916994	2	True				
ANR	921129	PostIncDecOperationExpression	arg ++		916994	0					
ANR	921130	Identifier	arg		916994	0					
ANR	921131	IncDec	++		916994	1					
ANR	921132	IfStatement	if ( ! * arg )		916994	3					
ANR	921133	Condition	! * arg	1355:8:35340:35344	916994	0	True				
ANR	921134	UnaryOperationExpression	! * arg		916994	0					
ANR	921135	UnaryOperator	!		916994	0					
ANR	921136	UnaryOperationExpression	* arg		916994	1					
ANR	921137	UnaryOperator	*		916994	0					
ANR	921138	Identifier	arg		916994	1					
ANR	921139	CompoundStatement		716:15:17190:17190	916994	1					
ANR	921140	ReturnStatement	return 0 ;	1356:5:35354:35362	916994	0	True				
ANR	921141	PrimaryExpression	0		916994	0					
ANR	921142	IdentifierDeclStatement	RFlag * f = core -> flags ;	1359:4:35375:35397	916994	4	True				
ANR	921143	IdentifierDecl	* f = core -> flags		916994	0					
ANR	921144	IdentifierDeclType	RFlag *		916994	0					
ANR	921145	Identifier	f		916994	1					
ANR	921146	AssignmentExpression	* f = core -> flags		916994	2		=			
ANR	921147	Identifier	f		916994	0					
ANR	921148	PtrMemberAccess	core -> flags		916994	1					
ANR	921149	Identifier	core		916994	0					
ANR	921150	Identifier	flags		916994	1					
ANR	921151	IdentifierDeclStatement	"RList * temp = r_flag_all_list ( f , true ) ;"	1360:4:35403:35442	916994	5	True				
ANR	921152	IdentifierDecl	"* temp = r_flag_all_list ( f , true )"		916994	0					
ANR	921153	IdentifierDeclType	RList *		916994	0					
ANR	921154	Identifier	temp		916994	1					
ANR	921155	AssignmentExpression	"* temp = r_flag_all_list ( f , true )"		916994	2		=			
ANR	921156	Identifier	temp		916994	0					
ANR	921157	CallExpression	"r_flag_all_list ( f , true )"		916994	1					
ANR	921158	Callee	r_flag_all_list		916994	0					
ANR	921159	Identifier	r_flag_all_list		916994	0					
ANR	921160	ArgumentList	f		916994	1					
ANR	921161	Argument	f		916994	0					
ANR	921162	Identifier	f		916994	0					
ANR	921163	Argument	true		916994	1					
ANR	921164	Identifier	true		916994	0					
ANR	921165	IdentifierDeclStatement	ut64 loff = 0 ;	1361:4:35448:35461	916994	6	True				
ANR	921166	IdentifierDecl	loff = 0		916994	0					
ANR	921167	IdentifierDeclType	ut64		916994	0					
ANR	921168	Identifier	loff		916994	1					
ANR	921169	AssignmentExpression	loff = 0		916994	2		=			
ANR	921170	Identifier	loff		916994	0					
ANR	921171	PrimaryExpression	0		916994	1					
ANR	921172	IdentifierDeclStatement	ut64 uoff = 0 ;	1362:4:35467:35480	916994	7	True				
ANR	921173	IdentifierDecl	uoff = 0		916994	0					
ANR	921174	IdentifierDeclType	ut64		916994	0					
ANR	921175	Identifier	uoff		916994	1					
ANR	921176	AssignmentExpression	uoff = 0		916994	2		=			
ANR	921177	Identifier	uoff		916994	0					
ANR	921178	PrimaryExpression	0		916994	1					
ANR	921179	IdentifierDeclStatement	ut64 curseek = core -> offset ;	1363:4:35486:35513	916994	8	True				
ANR	921180	IdentifierDecl	curseek = core -> offset		916994	0					
ANR	921181	IdentifierDeclType	ut64		916994	0					
ANR	921182	Identifier	curseek		916994	1					
ANR	921183	AssignmentExpression	curseek = core -> offset		916994	2		=			
ANR	921184	Identifier	curseek		916994	0					
ANR	921185	PtrMemberAccess	core -> offset		916994	1					
ANR	921186	Identifier	core		916994	0					
ANR	921187	Identifier	offset		916994	1					
ANR	921188	IdentifierDeclStatement	"char * lmatch = NULL , * umatch = NULL ;"	1364:4:35519:35555	916994	9	True				
ANR	921189	IdentifierDecl	* lmatch = NULL		916994	0					
ANR	921190	IdentifierDeclType	char *		916994	0					
ANR	921191	Identifier	lmatch		916994	1					
ANR	921192	AssignmentExpression	* lmatch = NULL		916994	2		=			
ANR	921193	Identifier	NULL		916994	0					
ANR	921194	Identifier	NULL		916994	1					
ANR	921195	IdentifierDecl	* umatch = NULL		916994	1					
ANR	921196	IdentifierDeclType	char *		916994	0					
ANR	921197	Identifier	umatch		916994	1					
ANR	921198	AssignmentExpression	* umatch = NULL		916994	2		=			
ANR	921199	Identifier	NULL		916994	0					
ANR	921200	Identifier	NULL		916994	1					
ANR	921201	IdentifierDeclStatement	RFlagItem * flag ;	1365:4:35561:35576	916994	10	True				
ANR	921202	IdentifierDecl	* flag		916994	0					
ANR	921203	IdentifierDeclType	RFlagItem *		916994	0					
ANR	921204	Identifier	flag		916994	1					
ANR	921205	IdentifierDeclStatement	RListIter * iter ;	1366:4:35582:35597	916994	11	True				
ANR	921206	IdentifierDecl	* iter		916994	0					
ANR	921207	IdentifierDeclType	RListIter *		916994	0					
ANR	921208	Identifier	iter		916994	1					
ANR	921209	ExpressionStatement	"r_list_sort ( temp , & cmpflag )"	1367:4:35603:35631	916994	12	True				
ANR	921210	CallExpression	"r_list_sort ( temp , & cmpflag )"		916994	0					
ANR	921211	Callee	r_list_sort		916994	0					
ANR	921212	Identifier	r_list_sort		916994	0					
ANR	921213	ArgumentList	temp		916994	1					
ANR	921214	Argument	temp		916994	0					
ANR	921215	Identifier	temp		916994	0					
ANR	921216	Argument	& cmpflag		916994	1					
ANR	921217	UnaryOperationExpression	& cmpflag		916994	0					
ANR	921218	UnaryOperator	&		916994	0					
ANR	921219	Identifier	cmpflag		916994	1					
ANR	921220	Statement	r_list_foreach	1368:4:35637:35650	916994	13	True				
ANR	921221	Statement	(	1368:19:35652:35652	916994	14	True				
ANR	921222	Statement	temp	1368:20:35653:35656	916994	15	True				
ANR	921223	Statement	","	1368:24:35657:35657	916994	16	True				
ANR	921224	Statement	iter	1368:26:35659:35662	916994	17	True				
ANR	921225	Statement	","	1368:30:35663:35663	916994	18	True				
ANR	921226	Statement	flag	1368:32:35665:35668	916994	19	True				
ANR	921227	Statement	)	1368:36:35669:35669	916994	20	True				
ANR	921228	CompoundStatement		729:38:17514:17514	916994	21					
ANR	921229	IfStatement	"if ( strstr ( flag -> name , arg ) != NULL )"		916994	0					
ANR	921230	Condition	"strstr ( flag -> name , arg ) != NULL"	1369:9:35682:35714	916994	0	True				
ANR	921231	EqualityExpression	"strstr ( flag -> name , arg ) != NULL"		916994	0		!=			
ANR	921232	CallExpression	"strstr ( flag -> name , arg )"		916994	0					
ANR	921233	Callee	strstr		916994	0					
ANR	921234	Identifier	strstr		916994	0					
ANR	921235	ArgumentList	flag -> name		916994	1					
ANR	921236	Argument	flag -> name		916994	0					
ANR	921237	PtrMemberAccess	flag -> name		916994	0					
ANR	921238	Identifier	flag		916994	0					
ANR	921239	Identifier	name		916994	1					
ANR	921240	Argument	arg		916994	1					
ANR	921241	Identifier	arg		916994	0					
ANR	921242	Identifier	NULL		916994	1					
ANR	921243	CompoundStatement		730:44:17560:17560	916994	1					
ANR	921244	IfStatement	if ( flag -> offset < core -> offset )		916994	0					
ANR	921245	Condition	flag -> offset < core -> offset	1370:10:35729:35755	916994	0	True				
ANR	921246	RelationalExpression	flag -> offset < core -> offset		916994	0		<			
ANR	921247	PtrMemberAccess	flag -> offset		916994	0					
ANR	921248	Identifier	flag		916994	0					
ANR	921249	Identifier	offset		916994	1					
ANR	921250	PtrMemberAccess	core -> offset		916994	1					
ANR	921251	Identifier	core		916994	0					
ANR	921252	Identifier	offset		916994	1					
ANR	921253	CompoundStatement		731:39:17601:17601	916994	1					
ANR	921254	ExpressionStatement	loff = flag -> offset	1371:7:35767:35786	916994	0	True				
ANR	921255	AssignmentExpression	loff = flag -> offset		916994	0		=			
ANR	921256	Identifier	loff		916994	0					
ANR	921257	PtrMemberAccess	flag -> offset		916994	1					
ANR	921258	Identifier	flag		916994	0					
ANR	921259	Identifier	offset		916994	1					
ANR	921260	ExpressionStatement	lmatch = flag -> name	1372:7:35795:35814	916994	1	True				
ANR	921261	AssignmentExpression	lmatch = flag -> name		916994	0		=			
ANR	921262	Identifier	lmatch		916994	0					
ANR	921263	PtrMemberAccess	flag -> name		916994	1					
ANR	921264	Identifier	flag		916994	0					
ANR	921265	Identifier	name		916994	1					
ANR	921266	ContinueStatement	continue ;	1373:7:35823:35831	916994	2	True				
ANR	921267	ExpressionStatement	uoff = flag -> offset	1375:6:35847:35866	916994	1	True				
ANR	921268	AssignmentExpression	uoff = flag -> offset		916994	0		=			
ANR	921269	Identifier	uoff		916994	0					
ANR	921270	PtrMemberAccess	flag -> offset		916994	1					
ANR	921271	Identifier	flag		916994	0					
ANR	921272	Identifier	offset		916994	1					
ANR	921273	ExpressionStatement	umatch = flag -> name	1376:6:35874:35893	916994	2	True				
ANR	921274	AssignmentExpression	umatch = flag -> name		916994	0		=			
ANR	921275	Identifier	umatch		916994	0					
ANR	921276	PtrMemberAccess	flag -> name		916994	1					
ANR	921277	Identifier	flag		916994	0					
ANR	921278	Identifier	name		916994	1					
ANR	921279	BreakStatement	break ;	1377:6:35901:35906	916994	3	True				
ANR	921280	IdentifierDeclStatement	char * match = ( curseek - loff ) < ( uoff - curseek ) ? lmatch : umatch ;	1380:4:35925:35993	916994	22	True				
ANR	921281	IdentifierDecl	* match = ( curseek - loff ) < ( uoff - curseek ) ? lmatch : umatch		916994	0					
ANR	921282	IdentifierDeclType	char *		916994	0					
ANR	921283	Identifier	match		916994	1					
ANR	921284	AssignmentExpression	* match = ( curseek - loff ) < ( uoff - curseek ) ? lmatch : umatch		916994	2		=			
ANR	921285	Identifier	match		916994	0					
ANR	921286	ConditionalExpression	( curseek - loff ) < ( uoff - curseek ) ? lmatch : umatch		916994	1					
ANR	921287	Condition	( curseek - loff ) < ( uoff - curseek )		916994	0					
ANR	921288	RelationalExpression	( curseek - loff ) < ( uoff - curseek )		916994	0		<			
ANR	921289	AdditiveExpression	curseek - loff		916994	0		-			
ANR	921290	Identifier	curseek		916994	0					
ANR	921291	Identifier	loff		916994	1					
ANR	921292	AdditiveExpression	uoff - curseek		916994	1		-			
ANR	921293	Identifier	uoff		916994	0					
ANR	921294	Identifier	curseek		916994	1					
ANR	921295	Identifier	lmatch		916994	1					
ANR	921296	Identifier	umatch		916994	2					
ANR	921297	IfStatement	if ( match )		916994	23					
ANR	921298	Condition	match	1381:8:36003:36007	916994	0	True				
ANR	921299	Identifier	match		916994	0					
ANR	921300	CompoundStatement		742:15:17853:17853	916994	1					
ANR	921301	IfStatement	if ( * match )		916994	0					
ANR	921302	Condition	* match	1382:9:36021:36026	916994	0	True				
ANR	921303	UnaryOperationExpression	* match		916994	0					
ANR	921304	UnaryOperator	*		916994	0					
ANR	921305	Identifier	match		916994	1					
ANR	921306	CompoundStatement		743:17:17872:17872	916994	1					
ANR	921307	ExpressionStatement	r_cons_println ( match )	1383:6:36037:36059	916994	0	True				
ANR	921308	CallExpression	r_cons_println ( match )		916994	0					
ANR	921309	Callee	r_cons_println		916994	0					
ANR	921310	Identifier	r_cons_println		916994	0					
ANR	921311	ArgumentList	match		916994	1					
ANR	921312	Argument	match		916994	0					
ANR	921313	Identifier	match		916994	0					
ANR	921314	ExpressionStatement	r_list_free ( temp )	1386:4:36078:36096	916994	24	True				
ANR	921315	CallExpression	r_list_free ( temp )		916994	0					
ANR	921316	Callee	r_list_free		916994	0					
ANR	921317	Identifier	r_list_free		916994	0					
ANR	921318	ArgumentList	temp		916994	1					
ANR	921319	Argument	temp		916994	0					
ANR	921320	Identifier	temp		916994	0					
ANR	921321	ReturnStatement	return 0 ;	1387:4:36102:36110	916994	25	True				
ANR	921322	PrimaryExpression	0		916994	0					
ANR	921323	Label	default :	1389:3:36120:36127	916994	15	True				
ANR	921324	Identifier	default		916994	0					
ANR	921325	ExpressionStatement	"arg = strchr ( input , ' ' )"	1390:4:36133:36158	916994	16	True				
ANR	921326	AssignmentExpression	"arg = strchr ( input , ' ' )"		916994	0		=			
ANR	921327	Identifier	arg		916994	0					
ANR	921328	CallExpression	"strchr ( input , ' ' )"		916994	1					
ANR	921329	Callee	strchr		916994	0					
ANR	921330	Identifier	strchr		916994	0					
ANR	921331	ArgumentList	input		916994	1					
ANR	921332	Argument	input		916994	0					
ANR	921333	Identifier	input		916994	0					
ANR	921334	Argument	' '		916994	1					
ANR	921335	PrimaryExpression	' '		916994	0					
ANR	921336	IfStatement	if ( arg )		916994	17					
ANR	921337	Condition	arg	1391:8:36168:36170	916994	0	True				
ANR	921338	Identifier	arg		916994	0					
ANR	921339	CompoundStatement		752:13:18016:18016	916994	1					
ANR	921340	ExpressionStatement	"addr = r_num_math ( core -> num , arg + 1 )"	1392:5:36180:36218	916994	0	True				
ANR	921341	AssignmentExpression	"addr = r_num_math ( core -> num , arg + 1 )"		916994	0		=			
ANR	921342	Identifier	addr		916994	0					
ANR	921343	CallExpression	"r_num_math ( core -> num , arg + 1 )"		916994	1					
ANR	921344	Callee	r_num_math		916994	0					
ANR	921345	Identifier	r_num_math		916994	0					
ANR	921346	ArgumentList	core -> num		916994	1					
ANR	921347	Argument	core -> num		916994	0					
ANR	921348	PtrMemberAccess	core -> num		916994	0					
ANR	921349	Identifier	core		916994	0					
ANR	921350	Identifier	num		916994	1					
ANR	921351	Argument	arg + 1		916994	1					
ANR	921352	AdditiveExpression	arg + 1		916994	0		+			
ANR	921353	Identifier	arg		916994	0					
ANR	921354	PrimaryExpression	1		916994	1					
ANR	921355	BreakStatement	break ;	1394:4:36230:36235	916994	18	True				
ANR	921356	ExpressionStatement	"f = r_flag_get_at ( core -> flags , addr , ! strict_offset )"	1396:3:36245:36298	916994	5	True				
ANR	921357	AssignmentExpression	"f = r_flag_get_at ( core -> flags , addr , ! strict_offset )"		916994	0		=			
ANR	921358	Identifier	f		916994	0					
ANR	921359	CallExpression	"r_flag_get_at ( core -> flags , addr , ! strict_offset )"		916994	1					
ANR	921360	Callee	r_flag_get_at		916994	0					
ANR	921361	Identifier	r_flag_get_at		916994	0					
ANR	921362	ArgumentList	core -> flags		916994	1					
ANR	921363	Argument	core -> flags		916994	0					
ANR	921364	PtrMemberAccess	core -> flags		916994	0					
ANR	921365	Identifier	core		916994	0					
ANR	921366	Identifier	flags		916994	1					
ANR	921367	Argument	addr		916994	1					
ANR	921368	Identifier	addr		916994	0					
ANR	921369	Argument	! strict_offset		916994	2					
ANR	921370	UnaryOperationExpression	! strict_offset		916994	0					
ANR	921371	UnaryOperator	!		916994	0					
ANR	921372	Identifier	strict_offset		916994	1					
ANR	921373	IfStatement	if ( f )		916994	6					
ANR	921374	Condition	f	1397:7:36307:36307	916994	0	True				
ANR	921375	Identifier	f		916994	0					
ANR	921376	CompoundStatement		758:10:18153:18153	916994	1					
ANR	921377	IfStatement	if ( f -> offset != addr )		916994	0					
ANR	921378	Condition	f -> offset != addr	1398:8:36320:36336	916994	0	True				
ANR	921379	EqualityExpression	f -> offset != addr		916994	0		!=			
ANR	921380	PtrMemberAccess	f -> offset		916994	0					
ANR	921381	Identifier	f		916994	0					
ANR	921382	Identifier	offset		916994	1					
ANR	921383	Identifier	addr		916994	1					
ANR	921384	CompoundStatement		759:27:18182:18182	916994	1					
ANR	921385	IfStatement	"if ( strchr ( input , 'j' ) )"		916994	0					
ANR	921386	Condition	"strchr ( input , 'j' )"	1400:9:36391:36409	916994	0	True				
ANR	921387	CallExpression	"strchr ( input , 'j' )"		916994	0					
ANR	921388	Callee	strchr		916994	0					
ANR	921389	Identifier	strchr		916994	0					
ANR	921390	ArgumentList	input		916994	1					
ANR	921391	Argument	input		916994	0					
ANR	921392	Identifier	input		916994	0					
ANR	921393	Argument	'j'		916994	1					
ANR	921394	PrimaryExpression	'j'		916994	0					
ANR	921395	CompoundStatement		761:30:18255:18255	916994	1					
ANR	921396	ExpressionStatement	"r_cons_printf ( ""{\\""name\\"":\\""%s\\"",\\""offset\\"":%d}\\n"" , f -> name , ( int ) ( addr - f -> offset ) )"	1401:6:36420:36517	916994	0	True				
ANR	921397	CallExpression	"r_cons_printf ( ""{\\""name\\"":\\""%s\\"",\\""offset\\"":%d}\\n"" , f -> name , ( int ) ( addr - f -> offset ) )"		916994	0					
ANR	921398	Callee	r_cons_printf		916994	0					
ANR	921399	Identifier	r_cons_printf		916994	0					
ANR	921400	ArgumentList	"""{\\""name\\"":\\""%s\\"",\\""offset\\"":%d}\\n"""		916994	1					
ANR	921401	Argument	"""{\\""name\\"":\\""%s\\"",\\""offset\\"":%d}\\n"""		916994	0					
ANR	921402	PrimaryExpression	"""{\\""name\\"":\\""%s\\"",\\""offset\\"":%d}\\n"""		916994	0					
ANR	921403	Argument	f -> name		916994	1					
ANR	921404	PtrMemberAccess	f -> name		916994	0					
ANR	921405	Identifier	f		916994	0					
ANR	921406	Identifier	name		916994	1					
ANR	921407	Argument	( int ) ( addr - f -> offset )		916994	2					
ANR	921408	CastExpression	( int ) ( addr - f -> offset )		916994	0					
ANR	921409	CastTarget	int		916994	0					
ANR	921410	AdditiveExpression	addr - f -> offset		916994	1		-			
ANR	921411	Identifier	addr		916994	0					
ANR	921412	PtrMemberAccess	f -> offset		916994	1					
ANR	921413	Identifier	f		916994	0					
ANR	921414	Identifier	offset		916994	1					
ANR	921415	ElseStatement	else		916994	0					
ANR	921416	CompoundStatement		764:12:18374:18374	916994	0					
ANR	921417	ExpressionStatement	"r_cons_printf ( ""%s + %d\\n"" , f -> name , ( int ) ( addr - f -> offset ) )"	1404:6:36539:36612	916994	0	True				
ANR	921418	CallExpression	"r_cons_printf ( ""%s + %d\\n"" , f -> name , ( int ) ( addr - f -> offset ) )"		916994	0					
ANR	921419	Callee	r_cons_printf		916994	0					
ANR	921420	Identifier	r_cons_printf		916994	0					
ANR	921421	ArgumentList	"""%s + %d\\n"""		916994	1					
ANR	921422	Argument	"""%s + %d\\n"""		916994	0					
ANR	921423	PrimaryExpression	"""%s + %d\\n"""		916994	0					
ANR	921424	Argument	f -> name		916994	1					
ANR	921425	PtrMemberAccess	f -> name		916994	0					
ANR	921426	Identifier	f		916994	0					
ANR	921427	Identifier	name		916994	1					
ANR	921428	Argument	( int ) ( addr - f -> offset )		916994	2					
ANR	921429	CastExpression	( int ) ( addr - f -> offset )		916994	0					
ANR	921430	CastTarget	int		916994	0					
ANR	921431	AdditiveExpression	addr - f -> offset		916994	1		-			
ANR	921432	Identifier	addr		916994	0					
ANR	921433	PtrMemberAccess	f -> offset		916994	1					
ANR	921434	Identifier	f		916994	0					
ANR	921435	Identifier	offset		916994	1					
ANR	921436	ElseStatement	else		916994	0					
ANR	921437	CompoundStatement		768:11:18475:18475	916994	0					
ANR	921438	IfStatement	"if ( strchr ( input , 'j' ) )"		916994	0					
ANR	921439	Condition	"strchr ( input , 'j' )"	1408:9:36643:36661	916994	0	True				
ANR	921440	CallExpression	"strchr ( input , 'j' )"		916994	0					
ANR	921441	Callee	strchr		916994	0					
ANR	921442	Identifier	strchr		916994	0					
ANR	921443	ArgumentList	input		916994	1					
ANR	921444	Argument	input		916994	0					
ANR	921445	Identifier	input		916994	0					
ANR	921446	Argument	'j'		916994	1					
ANR	921447	PrimaryExpression	'j'		916994	0					
ANR	921448	CompoundStatement		769:30:18507:18507	916994	1					
ANR	921449	ExpressionStatement	"r_cons_printf ( ""{\\""name\\"":\\""%s\\""}\\n"" , f -> name )"	1409:6:36672:36728	916994	0	True				
ANR	921450	CallExpression	"r_cons_printf ( ""{\\""name\\"":\\""%s\\""}\\n"" , f -> name )"		916994	0					
ANR	921451	Callee	r_cons_printf		916994	0					
ANR	921452	Identifier	r_cons_printf		916994	0					
ANR	921453	ArgumentList	"""{\\""name\\"":\\""%s\\""}\\n"""		916994	1					
ANR	921454	Argument	"""{\\""name\\"":\\""%s\\""}\\n"""		916994	0					
ANR	921455	PrimaryExpression	"""{\\""name\\"":\\""%s\\""}\\n"""		916994	0					
ANR	921456	Argument	f -> name		916994	1					
ANR	921457	PtrMemberAccess	f -> name		916994	0					
ANR	921458	Identifier	f		916994	0					
ANR	921459	Identifier	name		916994	1					
ANR	921460	ElseStatement	else		916994	0					
ANR	921461	CompoundStatement		772:12:18585:18585	916994	0					
ANR	921462	ExpressionStatement	r_cons_println ( f -> name )	1412:6:36750:36774	916994	0	True				
ANR	921463	CallExpression	r_cons_println ( f -> name )		916994	0					
ANR	921464	Callee	r_cons_println		916994	0					
ANR	921465	Identifier	r_cons_println		916994	0					
ANR	921466	ArgumentList	f -> name		916994	1					
ANR	921467	Argument	f -> name		916994	0					
ANR	921468	PtrMemberAccess	f -> name		916994	0					
ANR	921469	Identifier	f		916994	0					
ANR	921470	Identifier	name		916994	1					
ANR	921471	BreakStatement	break ;	1417:2:36800:36805	916994	87	True				
ANR	921472	Label	case '?' :	1418:1:36808:36816	916994	88	True				
ANR	921473	Label	default :	1419:1:36819:36826	916994	89	True				
ANR	921474	Identifier	default		916994	0					
ANR	921475	IfStatement	if ( input [ 1 ] )		916994	90					
ANR	921476	Condition	input [ 1 ]	1420:6:36834:36841	916994	0	True				
ANR	921477	ArrayIndexing	input [ 1 ]		916994	0					
ANR	921478	Identifier	input		916994	0					
ANR	921479	PrimaryExpression	1		916994	1					
ANR	921480	CompoundStatement		781:16:18687:18687	916994	1					
ANR	921481	ExpressionStatement	"core -> num -> value = r_flag_get ( core -> flags , input + 1 ) ? 1 : 0"	1421:3:36849:36909	916994	0	True				
ANR	921482	AssignmentExpression	"core -> num -> value = r_flag_get ( core -> flags , input + 1 ) ? 1 : 0"		916994	0		=			
ANR	921483	PtrMemberAccess	core -> num -> value		916994	0					
ANR	921484	PtrMemberAccess	core -> num		916994	0					
ANR	921485	Identifier	core		916994	0					
ANR	921486	Identifier	num		916994	1					
ANR	921487	Identifier	value		916994	1					
ANR	921488	ConditionalExpression	"r_flag_get ( core -> flags , input + 1 ) ? 1 : 0"		916994	1					
ANR	921489	Condition	"r_flag_get ( core -> flags , input + 1 )"		916994	0					
ANR	921490	CallExpression	"r_flag_get ( core -> flags , input + 1 )"		916994	0					
ANR	921491	Callee	r_flag_get		916994	0					
ANR	921492	Identifier	r_flag_get		916994	0					
ANR	921493	ArgumentList	core -> flags		916994	1					
ANR	921494	Argument	core -> flags		916994	0					
ANR	921495	PtrMemberAccess	core -> flags		916994	0					
ANR	921496	Identifier	core		916994	0					
ANR	921497	Identifier	flags		916994	1					
ANR	921498	Argument	input + 1		916994	1					
ANR	921499	AdditiveExpression	input + 1		916994	0		+			
ANR	921500	Identifier	input		916994	0					
ANR	921501	PrimaryExpression	1		916994	1					
ANR	921502	PrimaryExpression	1		916994	1					
ANR	921503	PrimaryExpression	0		916994	2					
ANR	921504	ElseStatement	else		916994	0					
ANR	921505	CompoundStatement		783:9:18763:18763	916994	0					
ANR	921506	ExpressionStatement	"r_core_cmd_help ( core , help_msg_f )"	1423:3:36925:36959	916994	0	True				
ANR	921507	CallExpression	"r_core_cmd_help ( core , help_msg_f )"		916994	0					
ANR	921508	Callee	r_core_cmd_help		916994	0					
ANR	921509	Identifier	r_core_cmd_help		916994	0					
ANR	921510	ArgumentList	core		916994	1					
ANR	921511	Argument	core		916994	0					
ANR	921512	Identifier	core		916994	0					
ANR	921513	Argument	help_msg_f		916994	1					
ANR	921514	Identifier	help_msg_f		916994	0					
ANR	921515	BreakStatement	break ;	1424:3:36964:36969	916994	1	True				
ANR	921516	ExpressionStatement	free ( str )	1427:1:36979:36989	916994	11	True				
ANR	921517	CallExpression	free ( str )		916994	0					
ANR	921518	Callee	free		916994	0					
ANR	921519	Identifier	free		916994	0					
ANR	921520	ArgumentList	str		916994	1					
ANR	921521	Argument	str		916994	0					
ANR	921522	Identifier	str		916994	0					
ANR	921523	ReturnStatement	return 0 ;	1428:1:36992:37000	916994	12	True				
ANR	921524	PrimaryExpression	0		916994	0					
ANR	921525	ReturnType	static int		916994	1					
ANR	921526	Identifier	cmd_flag		916994	2					
ANR	921527	ParameterList	"void * data , const char * input"		916994	3					
ANR	921528	Parameter	void * data	640:20:18125:18134	916994	0	True				
ANR	921529	ParameterType	void *		916994	0					
ANR	921530	Identifier	data		916994	1					
ANR	921531	Parameter	const char * input	640:32:18137:18153	916994	1	True				
ANR	921532	ParameterType	const char *		916994	0					
ANR	921533	Identifier	input		916994	1					
ANR	921534	CFGEntryNode	ENTRY		916994		True				
ANR	921535	CFGExitNode	EXIT		916994		True				
ANR	921536	CFGErrorNode	ERROR		916994		True				
ANR	921537	Symbol	* sp		916994						
ANR	921538	Symbol	dec		916994						
ANR	921539	Symbol	* input		916994						
ANR	921540	Symbol	delta		916994						
ANR	921541	Symbol	core -> offset		916994						
ANR	921542	Symbol	strchr		916994						
ANR	921543	Symbol	& cmpflag		916994						
ANR	921544	Symbol	r_flag_all_list		916994						
ANR	921545	Symbol	strncmp		916994						
ANR	921546	Symbol	bsze		916994						
ANR	921547	Symbol	& core -> flags -> spaces		916994						
ANR	921548	Symbol	* core -> num		916994						
ANR	921549	Symbol	r_flag_get_i		916994						
ANR	921550	Symbol	f -> space		916994						
ANR	921551	Symbol	s2		916994						
ANR	921552	Symbol	s3		916994						
ANR	921553	Symbol	item		916994						
ANR	921554	Symbol	r_flag_space_cur		916994						
ANR	921555	Symbol	old		916994						
ANR	921556	Symbol	iter		916994						
ANR	921557	Symbol	addFlag		916994						
ANR	921558	Symbol	str		916994						
ANR	921559	Symbol	help_msg_fs		916994						
ANR	921560	Symbol	input		916994						
ANR	921561	Symbol	flaglist		916994						
ANR	921562	Symbol	r_str_trim_ro		916994						
ANR	921563	Symbol	cmd		916994						
ANR	921564	Symbol	item -> realname		916994						
ANR	921565	Symbol	* flag		916994						
ANR	921566	Symbol	* realname		916994						
ANR	921567	Symbol	* arg		916994						
ANR	921568	Symbol	& base		916994						
ANR	921569	Symbol	flag		916994						
ANR	921570	Symbol	f -> name		916994						
ANR	921571	Symbol	* core		916994						
ANR	921572	Symbol	glob		916994						
ANR	921573	Symbol	help_msg_f		916994						
ANR	921574	Symbol	core -> anal		916994						
ANR	921575	Symbol	ASCII_MAX		916994						
ANR	921576	Symbol	fcn		916994						
ANR	921577	Symbol	flagenum		916994						
ANR	921578	Symbol	arg		916994						
ANR	921579	Symbol	* str		916994						
ANR	921580	Symbol	sp		916994						
ANR	921581	Symbol	r_flag_get		916994						
ANR	921582	Symbol	atoi		916994						
ANR	921583	Symbol	* name		916994						
ANR	921584	Symbol	f		916994						
ANR	921585	Symbol	core -> flags		916994						
ANR	921586	Symbol	r_flag_set		916994						
ANR	921587	Symbol	* color ++		916994						
ANR	921588	Symbol	off		916994						
ANR	921589	Symbol	comment_needs_free		916994						
ANR	921590	Symbol	r_flag_color		916994						
ANR	921591	Symbol	p		916994						
ANR	921592	Symbol	q		916994						
ANR	921593	Symbol	* eq		916994						
ANR	921594	Symbol	s		916994						
ANR	921595	Symbol	UT8_MAX		916994						
ANR	921596	Symbol	f -> offset		916994						
ANR	921597	Symbol	item -> name		916994						
ANR	921598	Symbol	to		916994						
ANR	921599	Symbol	r_flag_get_at		916994						
ANR	921600	Symbol	find_flag_after_foreach		916994						
ANR	921601	Symbol	data		916994						
ANR	921602	Symbol	pj_string		916994						
ANR	921603	Symbol	core -> flags -> base		916994						
ANR	921604	Symbol	core -> num -> value		916994						
ANR	921605	Symbol	flag_to_flag		916994						
ANR	921606	Symbol	r_str_trim_dup		916994						
ANR	921607	Symbol	curseek		916994						
ANR	921608	Symbol	isJson		916994						
ANR	921609	Symbol	* ptr		916994						
ANR	921610	Symbol	sp -> name		916994						
ANR	921611	Symbol	from		916994						
ANR	921612	Symbol	flag -> offset		916994						
ANR	921613	Symbol	core -> num		916994						
ANR	921614	Symbol	item -> offset		916994						
ANR	921615	Symbol	ret		916994						
ANR	921616	Symbol	lmatch		916994						
ANR	921617	Symbol	b64		916994						
ANR	921618	Symbol	NULL		916994						
ANR	921619	Symbol	umatch		916994						
ANR	921620	Symbol	eq		916994						
ANR	921621	Symbol	item -> comment		916994						
ANR	921622	Symbol	core		916994						
ANR	921623	Symbol	strict_offset		916994						
ANR	921624	Symbol	loff		916994						
ANR	921625	Symbol	strstr		916994						
ANR	921626	Symbol	name		916994						
ANR	921627	Symbol	true		916994						
ANR	921628	Symbol	* cstr		916994						
ANR	921629	Symbol	cstr		916994						
ANR	921630	Symbol	help_msg_fc		916994						
ANR	921631	Symbol	* match		916994						
ANR	921632	Symbol	fi		916994						
ANR	921633	Symbol	help_msg_fd		916994						
ANR	921634	Symbol	color		916994						
ANR	921635	Symbol	* s3		916994						
ANR	921636	Symbol	* s2		916994						
ANR	921637	Symbol	flagname		916994						
ANR	921638	Symbol	r_str_newf		916994						
ANR	921639	Symbol	newarg		916994						
ANR	921640	Symbol	r_num_math		916994						
ANR	921641	Symbol	* core -> flags		916994						
ANR	921642	Symbol	* item		916994						
ANR	921643	Symbol	pj_drain		916994						
ANR	921644	Symbol	addr		916994						
ANR	921645	Symbol	r_flag_get_list		916994						
ANR	921646	Symbol	* * core		916994						
ANR	921647	Symbol	mask		916994						
ANR	921648	Symbol	r_flag_relocate		916994						
ANR	921649	Symbol	temp		916994						
ANR	921650	Symbol	r_base64_decode_dyn		916994						
ANR	921651	Symbol	* ptr ++		916994						
ANR	921652	Symbol	flag -> name		916994						
ANR	921653	Symbol	* p ++		916994						
ANR	921654	Symbol	false		916994						
ANR	921655	Symbol	match		916994						
ANR	921656	Symbol	* color		916994						
ANR	921657	Symbol	uoff		916994						
ANR	921658	Symbol	ptr		916994						
ANR	921659	Symbol	realname		916994						
ANR	921660	Symbol	* f		916994						
ANR	921661	Symbol	r_anal_get_fcn_in		916994						
ANR	921662	Symbol	* flagname		916994						
ANR	921663	Symbol	adjust_offset		916994						
ANR	921664	Symbol	* p		916994						
ANR	921665	Symbol	comment		916994						
ANR	921666	Symbol	pj_new		916994						
ANR	921667	Symbol	pj		916994						
ANR	921668	Symbol	strdup		916994						
ANR	921669	Symbol	* q		916994						
ANR	921670	Symbol	* s		916994						
ANR	921671	Symbol	* eq ++		916994						
ANR	921672	Symbol	item -> size		916994						
ANR	921673	Symbol	base		916994						
