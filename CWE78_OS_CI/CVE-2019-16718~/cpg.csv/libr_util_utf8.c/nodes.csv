command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5267789	File	data/converged/CVE-2019-16718~_radare2/libr_util_utf8.c								
ANR	5267790	ClassDef	<unnamed>	6:13:128:11691							
ANR	5267791	DeclStmt									
ANR	5267792	Decl							ut32	ut32	from
ANR	5267793	Decl							ut32	ut32	to
ANR	5267794	DeclStmt									
ANR	5267795	Decl								 [ ]	nonprintable_ranges
ANR	5267796	DeclStmt									
ANR	5267797	Decl							const int	const int	nonprintable_ranges_count
ANR	5267798	DeclStmt									
ANR	5267799	Decl							const int	const int	lastUtfBlock
ANR	5267800	DeclStmt									
ANR	5267801	Decl							const RUtfBlock	const RUtfBlock [ ]	r_utf_blocks
ANR	5267802	Function	r_utf_block_name	479:6:23532:23661							
ANR	5267803	FunctionDef	r_utf_block_name (int idx)		5267802	0					
ANR	5267804	CompoundStatement		479:44:23570:23661	5267802	0					
ANR	5267805	IfStatement	if ( idx < 0 || idx >= lastUtfBlock )		5267802	0					
ANR	5267806	Condition	idx < 0 || idx >= lastUtfBlock	480:5:23577:23606	5267802	0	True				
ANR	5267807	OrExpression	idx < 0 || idx >= lastUtfBlock		5267802	0		||			
ANR	5267808	RelationalExpression	idx < 0		5267802	0		<			
ANR	5267809	Identifier	idx		5267802	0					
ANR	5267810	PrimaryExpression	0		5267802	1					
ANR	5267811	RelationalExpression	idx >= lastUtfBlock		5267802	1		>=			
ANR	5267812	Identifier	idx		5267802	0					
ANR	5267813	Identifier	lastUtfBlock		5267802	1					
ANR	5267814	CompoundStatement		2:37:38:38	5267802	1					
ANR	5267815	ReturnStatement	return NULL ;	481:2:23613:23624	5267802	0	True				
ANR	5267816	Identifier	NULL		5267802	0					
ANR	5267817	ReturnStatement	return r_utf_blocks [ idx ] . name ;	483:1:23630:23659	5267802	1	True				
ANR	5267818	MemberAccess	r_utf_blocks [ idx ] . name		5267802	0					
ANR	5267819	ArrayIndexing	r_utf_blocks [ idx ]		5267802	0					
ANR	5267820	Identifier	r_utf_blocks		5267802	0					
ANR	5267821	Identifier	idx		5267802	1					
ANR	5267822	Identifier	name		5267802	1					
ANR	5267823	ReturnType	const char *		5267802	1					
ANR	5267824	Identifier	r_utf_block_name		5267802	2					
ANR	5267825	ParameterList	int idx		5267802	3					
ANR	5267826	Parameter	int idx	479:35:23561:23567	5267802	0	True				
ANR	5267827	ParameterType	int		5267802	0					
ANR	5267828	Identifier	idx		5267802	1					
ANR	5267829	CFGEntryNode	ENTRY		5267802		True				
ANR	5267830	CFGExitNode	EXIT		5267802		True				
ANR	5267831	Symbol	r_utf_blocks [ idx ] . name		5267802						
ANR	5267832	Symbol	NULL		5267802						
ANR	5267833	Symbol	* idx		5267802						
ANR	5267834	Symbol	* r_utf_blocks		5267802						
ANR	5267835	Symbol	idx		5267802						
ANR	5267836	Symbol	r_utf_blocks		5267802						
ANR	5267837	Symbol	lastUtfBlock		5267802						
ANR	5267838	Function	r_utf8_decode	489:0:23791:24587							
ANR	5267839	FunctionDef	"r_utf8_decode (const ut8 * ptr , int ptrlen , RRune * ch)"		5267838	0					
ANR	5267840	CompoundStatement		489:63:23854:24587	5267838	0					
ANR	5267841	IfStatement	if ( ptrlen < 1 )		5267838	0					
ANR	5267842	Condition	ptrlen < 1	490:5:23861:23870	5267838	0	True				
ANR	5267843	RelationalExpression	ptrlen < 1		5267838	0		<			
ANR	5267844	Identifier	ptrlen		5267838	0					
ANR	5267845	PrimaryExpression	1		5267838	1					
ANR	5267846	CompoundStatement		2:17:18:18	5267838	1					
ANR	5267847	ReturnStatement	return 0 ;	491:2:23877:23885	5267838	0	True				
ANR	5267848	PrimaryExpression	0		5267838	0					
ANR	5267849	IfStatement	if ( ptrlen > 0 && ptr [ 0 ] < 0x80 )		5267838	1					
ANR	5267850	Condition	ptrlen > 0 && ptr [ 0 ] < 0x80	493:5:23895:23921	5267838	0	True				
ANR	5267851	AndExpression	ptrlen > 0 && ptr [ 0 ] < 0x80		5267838	0		&&			
ANR	5267852	RelationalExpression	ptrlen > 0		5267838	0		>			
ANR	5267853	Identifier	ptrlen		5267838	0					
ANR	5267854	PrimaryExpression	0		5267838	1					
ANR	5267855	RelationalExpression	ptr [ 0 ] < 0x80		5267838	1		<			
ANR	5267856	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267857	Identifier	ptr		5267838	0					
ANR	5267858	PrimaryExpression	0		5267838	1					
ANR	5267859	PrimaryExpression	0x80		5267838	1					
ANR	5267860	CompoundStatement		5:34:69:69	5267838	1					
ANR	5267861	IfStatement	if ( ch )		5267838	0					
ANR	5267862	Condition	ch	494:6:23932:23933	5267838	0	True				
ANR	5267863	Identifier	ch		5267838	0					
ANR	5267864	CompoundStatement		6:10:81:81	5267838	1					
ANR	5267865	ExpressionStatement	* ch = ( ut32 ) ptr [ 0 ]	495:3:23941:23959	5267838	0	True				
ANR	5267866	AssignmentExpression	* ch = ( ut32 ) ptr [ 0 ]		5267838	0		=			
ANR	5267867	UnaryOperationExpression	* ch		5267838	0					
ANR	5267868	UnaryOperator	*		5267838	0					
ANR	5267869	Identifier	ch		5267838	1					
ANR	5267870	CastExpression	( ut32 ) ptr [ 0 ]		5267838	1					
ANR	5267871	CastTarget	ut32		5267838	0					
ANR	5267872	ArrayIndexing	ptr [ 0 ]		5267838	1					
ANR	5267873	Identifier	ptr		5267838	0					
ANR	5267874	PrimaryExpression	0		5267838	1					
ANR	5267875	ReturnStatement	return 1 ;	497:2:23967:23975	5267838	1	True				
ANR	5267876	PrimaryExpression	1		5267838	0					
ANR	5267877	ElseStatement	else		5267838	0					
ANR	5267878	IfStatement	if ( ptrlen > 1 && ( ptr [ 0 ] & 0xe0 ) == 0xc0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 )		5267838	0					
ANR	5267879	Condition	ptrlen > 1 && ( ptr [ 0 ] & 0xe0 ) == 0xc0 && ( ptr [ 1 ] & 0xc0 ) == 0x80	498:12:23989:24046	5267838	0	True				
ANR	5267880	AndExpression	ptrlen > 1 && ( ptr [ 0 ] & 0xe0 ) == 0xc0 && ( ptr [ 1 ] & 0xc0 ) == 0x80		5267838	0		&&			
ANR	5267881	RelationalExpression	ptrlen > 1		5267838	0		>			
ANR	5267882	Identifier	ptrlen		5267838	0					
ANR	5267883	PrimaryExpression	1		5267838	1					
ANR	5267884	AndExpression	( ptr [ 0 ] & 0xe0 ) == 0xc0 && ( ptr [ 1 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5267885	EqualityExpression	( ptr [ 0 ] & 0xe0 ) == 0xc0		5267838	0		==			
ANR	5267886	BitAndExpression	ptr [ 0 ] & 0xe0		5267838	0		&			
ANR	5267887	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267888	Identifier	ptr		5267838	0					
ANR	5267889	PrimaryExpression	0		5267838	1					
ANR	5267890	PrimaryExpression	0xe0		5267838	1					
ANR	5267891	PrimaryExpression	0xc0		5267838	1					
ANR	5267892	EqualityExpression	( ptr [ 1 ] & 0xc0 ) == 0x80		5267838	1		==			
ANR	5267893	BitAndExpression	ptr [ 1 ] & 0xc0		5267838	0		&			
ANR	5267894	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5267895	Identifier	ptr		5267838	0					
ANR	5267896	PrimaryExpression	1		5267838	1					
ANR	5267897	PrimaryExpression	0xc0		5267838	1					
ANR	5267898	PrimaryExpression	0x80		5267838	1					
ANR	5267899	CompoundStatement		10:72:194:194	5267838	1					
ANR	5267900	IfStatement	if ( ch )		5267838	0					
ANR	5267901	Condition	ch	499:6:24057:24058	5267838	0	True				
ANR	5267902	Identifier	ch		5267838	0					
ANR	5267903	CompoundStatement		11:10:206:206	5267838	1					
ANR	5267904	ExpressionStatement	* ch = ( ptr [ 0 ] & 0x1f ) << 6 | ( ptr [ 1 ] & 0x3f )	500:3:24066:24110	5267838	0	True				
ANR	5267905	AssignmentExpression	* ch = ( ptr [ 0 ] & 0x1f ) << 6 | ( ptr [ 1 ] & 0x3f )		5267838	0		=			
ANR	5267906	UnaryOperationExpression	* ch		5267838	0					
ANR	5267907	UnaryOperator	*		5267838	0					
ANR	5267908	Identifier	ch		5267838	1					
ANR	5267909	InclusiveOrExpression	( ptr [ 0 ] & 0x1f ) << 6 | ( ptr [ 1 ] & 0x3f )		5267838	1		|			
ANR	5267910	ShiftExpression	( ptr [ 0 ] & 0x1f ) << 6		5267838	0		<<			
ANR	5267911	BitAndExpression	ptr [ 0 ] & 0x1f		5267838	0		&			
ANR	5267912	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267913	Identifier	ptr		5267838	0					
ANR	5267914	PrimaryExpression	0		5267838	1					
ANR	5267915	PrimaryExpression	0x1f		5267838	1					
ANR	5267916	PrimaryExpression	6		5267838	1					
ANR	5267917	BitAndExpression	ptr [ 1 ] & 0x3f		5267838	1		&			
ANR	5267918	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5267919	Identifier	ptr		5267838	0					
ANR	5267920	PrimaryExpression	1		5267838	1					
ANR	5267921	PrimaryExpression	0x3f		5267838	1					
ANR	5267922	ReturnStatement	return 2 ;	502:2:24118:24126	5267838	1	True				
ANR	5267923	PrimaryExpression	2		5267838	0					
ANR	5267924	ElseStatement	else		5267838	0					
ANR	5267925	IfStatement	if ( ptrlen > 2 && ( ptr [ 0 ] & 0xf0 ) == 0xe0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 )		5267838	0					
ANR	5267926	Condition	ptrlen > 2 && ( ptr [ 0 ] & 0xf0 ) == 0xe0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80	503:12:24140:24222	5267838	0	True				
ANR	5267927	AndExpression	ptrlen > 2 && ( ptr [ 0 ] & 0xf0 ) == 0xe0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80		5267838	0		&&			
ANR	5267928	RelationalExpression	ptrlen > 2		5267838	0		>			
ANR	5267929	Identifier	ptrlen		5267838	0					
ANR	5267930	PrimaryExpression	2		5267838	1					
ANR	5267931	AndExpression	( ptr [ 0 ] & 0xf0 ) == 0xe0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5267932	EqualityExpression	( ptr [ 0 ] & 0xf0 ) == 0xe0		5267838	0		==			
ANR	5267933	BitAndExpression	ptr [ 0 ] & 0xf0		5267838	0		&			
ANR	5267934	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267935	Identifier	ptr		5267838	0					
ANR	5267936	PrimaryExpression	0		5267838	1					
ANR	5267937	PrimaryExpression	0xf0		5267838	1					
ANR	5267938	PrimaryExpression	0xe0		5267838	1					
ANR	5267939	AndExpression	( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5267940	EqualityExpression	( ptr [ 1 ] & 0xc0 ) == 0x80		5267838	0		==			
ANR	5267941	BitAndExpression	ptr [ 1 ] & 0xc0		5267838	0		&			
ANR	5267942	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5267943	Identifier	ptr		5267838	0					
ANR	5267944	PrimaryExpression	1		5267838	1					
ANR	5267945	PrimaryExpression	0xc0		5267838	1					
ANR	5267946	PrimaryExpression	0x80		5267838	1					
ANR	5267947	EqualityExpression	( ptr [ 2 ] & 0xc0 ) == 0x80		5267838	1		==			
ANR	5267948	BitAndExpression	ptr [ 2 ] & 0xc0		5267838	0		&			
ANR	5267949	ArrayIndexing	ptr [ 2 ]		5267838	0					
ANR	5267950	Identifier	ptr		5267838	0					
ANR	5267951	PrimaryExpression	2		5267838	1					
ANR	5267952	PrimaryExpression	0xc0		5267838	1					
ANR	5267953	PrimaryExpression	0x80		5267838	1					
ANR	5267954	CompoundStatement		15:97:370:370	5267838	1					
ANR	5267955	IfStatement	if ( ch )		5267838	0					
ANR	5267956	Condition	ch	504:6:24233:24234	5267838	0	True				
ANR	5267957	Identifier	ch		5267838	0					
ANR	5267958	CompoundStatement		16:10:382:382	5267838	1					
ANR	5267959	ExpressionStatement	* ch = ( ptr [ 0 ] & 0xf ) << 12 | ( ptr [ 1 ] & 0x3f ) << 6 | ( ptr [ 2 ] & 0x3f )	505:3:24242:24309	5267838	0	True				
ANR	5267960	AssignmentExpression	* ch = ( ptr [ 0 ] & 0xf ) << 12 | ( ptr [ 1 ] & 0x3f ) << 6 | ( ptr [ 2 ] & 0x3f )		5267838	0		=			
ANR	5267961	UnaryOperationExpression	* ch		5267838	0					
ANR	5267962	UnaryOperator	*		5267838	0					
ANR	5267963	Identifier	ch		5267838	1					
ANR	5267964	InclusiveOrExpression	( ptr [ 0 ] & 0xf ) << 12 | ( ptr [ 1 ] & 0x3f ) << 6 | ( ptr [ 2 ] & 0x3f )		5267838	1		|			
ANR	5267965	ShiftExpression	( ptr [ 0 ] & 0xf ) << 12		5267838	0		<<			
ANR	5267966	BitAndExpression	ptr [ 0 ] & 0xf		5267838	0		&			
ANR	5267967	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267968	Identifier	ptr		5267838	0					
ANR	5267969	PrimaryExpression	0		5267838	1					
ANR	5267970	PrimaryExpression	0xf		5267838	1					
ANR	5267971	PrimaryExpression	12		5267838	1					
ANR	5267972	InclusiveOrExpression	( ptr [ 1 ] & 0x3f ) << 6 | ( ptr [ 2 ] & 0x3f )		5267838	1		|			
ANR	5267973	ShiftExpression	( ptr [ 1 ] & 0x3f ) << 6		5267838	0		<<			
ANR	5267974	BitAndExpression	ptr [ 1 ] & 0x3f		5267838	0		&			
ANR	5267975	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5267976	Identifier	ptr		5267838	0					
ANR	5267977	PrimaryExpression	1		5267838	1					
ANR	5267978	PrimaryExpression	0x3f		5267838	1					
ANR	5267979	PrimaryExpression	6		5267838	1					
ANR	5267980	BitAndExpression	ptr [ 2 ] & 0x3f		5267838	1		&			
ANR	5267981	ArrayIndexing	ptr [ 2 ]		5267838	0					
ANR	5267982	Identifier	ptr		5267838	0					
ANR	5267983	PrimaryExpression	2		5267838	1					
ANR	5267984	PrimaryExpression	0x3f		5267838	1					
ANR	5267985	ReturnStatement	return 3 ;	507:2:24317:24325	5267838	1	True				
ANR	5267986	PrimaryExpression	3		5267838	0					
ANR	5267987	ElseStatement	else		5267838	0					
ANR	5267988	IfStatement	if ( ptrlen > 3 && ( ptr [ 0 ] & 0xf8 ) == 0xf0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80 )		5267838	0					
ANR	5267989	Condition	ptrlen > 3 && ( ptr [ 0 ] & 0xf8 ) == 0xf0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80	508:12:24339:24446	5267838	0	True				
ANR	5267990	AndExpression	ptrlen > 3 && ( ptr [ 0 ] & 0xf8 ) == 0xf0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80		5267838	0		&&			
ANR	5267991	RelationalExpression	ptrlen > 3		5267838	0		>			
ANR	5267992	Identifier	ptrlen		5267838	0					
ANR	5267993	PrimaryExpression	3		5267838	1					
ANR	5267994	AndExpression	( ptr [ 0 ] & 0xf8 ) == 0xf0 && ( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5267995	EqualityExpression	( ptr [ 0 ] & 0xf8 ) == 0xf0		5267838	0		==			
ANR	5267996	BitAndExpression	ptr [ 0 ] & 0xf8		5267838	0		&			
ANR	5267997	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5267998	Identifier	ptr		5267838	0					
ANR	5267999	PrimaryExpression	0		5267838	1					
ANR	5268000	PrimaryExpression	0xf8		5267838	1					
ANR	5268001	PrimaryExpression	0xf0		5267838	1					
ANR	5268002	AndExpression	( ptr [ 1 ] & 0xc0 ) == 0x80 && ( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5268003	EqualityExpression	( ptr [ 1 ] & 0xc0 ) == 0x80		5267838	0		==			
ANR	5268004	BitAndExpression	ptr [ 1 ] & 0xc0		5267838	0		&			
ANR	5268005	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5268006	Identifier	ptr		5267838	0					
ANR	5268007	PrimaryExpression	1		5267838	1					
ANR	5268008	PrimaryExpression	0xc0		5267838	1					
ANR	5268009	PrimaryExpression	0x80		5267838	1					
ANR	5268010	AndExpression	( ptr [ 2 ] & 0xc0 ) == 0x80 && ( ptr [ 3 ] & 0xc0 ) == 0x80		5267838	1		&&			
ANR	5268011	EqualityExpression	( ptr [ 2 ] & 0xc0 ) == 0x80		5267838	0		==			
ANR	5268012	BitAndExpression	ptr [ 2 ] & 0xc0		5267838	0		&			
ANR	5268013	ArrayIndexing	ptr [ 2 ]		5267838	0					
ANR	5268014	Identifier	ptr		5267838	0					
ANR	5268015	PrimaryExpression	2		5267838	1					
ANR	5268016	PrimaryExpression	0xc0		5267838	1					
ANR	5268017	PrimaryExpression	0x80		5267838	1					
ANR	5268018	EqualityExpression	( ptr [ 3 ] & 0xc0 ) == 0x80		5267838	1		==			
ANR	5268019	BitAndExpression	ptr [ 3 ] & 0xc0		5267838	0		&			
ANR	5268020	ArrayIndexing	ptr [ 3 ]		5267838	0					
ANR	5268021	Identifier	ptr		5267838	0					
ANR	5268022	PrimaryExpression	3		5267838	1					
ANR	5268023	PrimaryExpression	0xc0		5267838	1					
ANR	5268024	PrimaryExpression	0x80		5267838	1					
ANR	5268025	CompoundStatement		20:122:594:594	5267838	1					
ANR	5268026	IfStatement	if ( ch )		5267838	0					
ANR	5268027	Condition	ch	509:6:24457:24458	5267838	0	True				
ANR	5268028	Identifier	ch		5267838	0					
ANR	5268029	CompoundStatement		21:10:606:606	5267838	1					
ANR	5268030	ExpressionStatement	* ch = ( ptr [ 0 ] & 7 ) << 18 | ( ptr [ 1 ] & 0x3f ) << 12 | ( ptr [ 2 ] & 0x3f ) << 6 | ( ptr [ 3 ] & 0x3f )	510:3:24466:24555	5267838	0	True				
ANR	5268031	AssignmentExpression	* ch = ( ptr [ 0 ] & 7 ) << 18 | ( ptr [ 1 ] & 0x3f ) << 12 | ( ptr [ 2 ] & 0x3f ) << 6 | ( ptr [ 3 ] & 0x3f )		5267838	0		=			
ANR	5268032	UnaryOperationExpression	* ch		5267838	0					
ANR	5268033	UnaryOperator	*		5267838	0					
ANR	5268034	Identifier	ch		5267838	1					
ANR	5268035	InclusiveOrExpression	( ptr [ 0 ] & 7 ) << 18 | ( ptr [ 1 ] & 0x3f ) << 12 | ( ptr [ 2 ] & 0x3f ) << 6 | ( ptr [ 3 ] & 0x3f )		5267838	1		|			
ANR	5268036	ShiftExpression	( ptr [ 0 ] & 7 ) << 18		5267838	0		<<			
ANR	5268037	BitAndExpression	ptr [ 0 ] & 7		5267838	0		&			
ANR	5268038	ArrayIndexing	ptr [ 0 ]		5267838	0					
ANR	5268039	Identifier	ptr		5267838	0					
ANR	5268040	PrimaryExpression	0		5267838	1					
ANR	5268041	PrimaryExpression	7		5267838	1					
ANR	5268042	PrimaryExpression	18		5267838	1					
ANR	5268043	InclusiveOrExpression	( ptr [ 1 ] & 0x3f ) << 12 | ( ptr [ 2 ] & 0x3f ) << 6 | ( ptr [ 3 ] & 0x3f )		5267838	1		|			
ANR	5268044	ShiftExpression	( ptr [ 1 ] & 0x3f ) << 12		5267838	0		<<			
ANR	5268045	BitAndExpression	ptr [ 1 ] & 0x3f		5267838	0		&			
ANR	5268046	ArrayIndexing	ptr [ 1 ]		5267838	0					
ANR	5268047	Identifier	ptr		5267838	0					
ANR	5268048	PrimaryExpression	1		5267838	1					
ANR	5268049	PrimaryExpression	0x3f		5267838	1					
ANR	5268050	PrimaryExpression	12		5267838	1					
ANR	5268051	InclusiveOrExpression	( ptr [ 2 ] & 0x3f ) << 6 | ( ptr [ 3 ] & 0x3f )		5267838	1		|			
ANR	5268052	ShiftExpression	( ptr [ 2 ] & 0x3f ) << 6		5267838	0		<<			
ANR	5268053	BitAndExpression	ptr [ 2 ] & 0x3f		5267838	0		&			
ANR	5268054	ArrayIndexing	ptr [ 2 ]		5267838	0					
ANR	5268055	Identifier	ptr		5267838	0					
ANR	5268056	PrimaryExpression	2		5267838	1					
ANR	5268057	PrimaryExpression	0x3f		5267838	1					
ANR	5268058	PrimaryExpression	6		5267838	1					
ANR	5268059	BitAndExpression	ptr [ 3 ] & 0x3f		5267838	1		&			
ANR	5268060	ArrayIndexing	ptr [ 3 ]		5267838	0					
ANR	5268061	Identifier	ptr		5267838	0					
ANR	5268062	PrimaryExpression	3		5267838	1					
ANR	5268063	PrimaryExpression	0x3f		5267838	1					
ANR	5268064	ReturnStatement	return 4 ;	512:2:24563:24571	5267838	1	True				
ANR	5268065	PrimaryExpression	4		5267838	0					
ANR	5268066	ReturnStatement	return 0 ;	514:1:24577:24585	5267838	2	True				
ANR	5268067	PrimaryExpression	0		5267838	0					
ANR	5268068	ReturnType	R_API int		5267838	1					
ANR	5268069	Identifier	r_utf8_decode		5267838	2					
ANR	5268070	ParameterList	"const ut8 * ptr , int ptrlen , RRune * ch"		5267838	3					
ANR	5268071	Parameter	const ut8 * ptr	489:24:23815:23828	5267838	0	True				
ANR	5268072	ParameterType	const ut8 *		5267838	0					
ANR	5268073	Identifier	ptr		5267838	1					
ANR	5268074	Parameter	int ptrlen	489:40:23831:23840	5267838	1	True				
ANR	5268075	ParameterType	int		5267838	0					
ANR	5268076	Identifier	ptrlen		5267838	1					
ANR	5268077	Parameter	RRune * ch	489:52:23843:23851	5267838	2	True				
ANR	5268078	ParameterType	RRune *		5267838	0					
ANR	5268079	Identifier	ch		5267838	1					
ANR	5268080	CFGEntryNode	ENTRY		5267838		True				
ANR	5268081	CFGExitNode	EXIT		5267838		True				
ANR	5268082	Symbol	ptrlen		5267838						
ANR	5268083	Symbol	ch		5267838						
ANR	5268084	Symbol	* ptr		5267838						
ANR	5268085	Symbol	* ch		5267838						
ANR	5268086	Symbol	ptr		5267838						
ANR	5268087	Function	r_utf8_encode	518:0:24638:25174							
ANR	5268088	FunctionDef	"r_utf8_encode (ut8 * ptr , const RRune ch)"		5268087	0					
ANR	5268089	CompoundStatement		518:50:24688:25174	5268087	0					
ANR	5268090	IfStatement	if ( ch < 0x80 )		5268087	0					
ANR	5268091	Condition	ch < 0x80	519:5:24695:24703	5268087	0	True				
ANR	5268092	RelationalExpression	ch < 0x80		5268087	0		<			
ANR	5268093	Identifier	ch		5268087	0					
ANR	5268094	PrimaryExpression	0x80		5268087	1					
ANR	5268095	CompoundStatement		2:16:17:17	5268087	1					
ANR	5268096	ExpressionStatement	ptr [ 0 ] = ( ut8 ) ch	520:2:24710:24726	5268087	0	True				
ANR	5268097	AssignmentExpression	ptr [ 0 ] = ( ut8 ) ch		5268087	0		=			
ANR	5268098	ArrayIndexing	ptr [ 0 ]		5268087	0					
ANR	5268099	Identifier	ptr		5268087	0					
ANR	5268100	PrimaryExpression	0		5268087	1					
ANR	5268101	CastExpression	( ut8 ) ch		5268087	1					
ANR	5268102	CastTarget	ut8		5268087	0					
ANR	5268103	Identifier	ch		5268087	1					
ANR	5268104	ReturnStatement	return 1 ;	521:2:24730:24738	5268087	1	True				
ANR	5268105	PrimaryExpression	1		5268087	0					
ANR	5268106	ElseStatement	else		5268087	0					
ANR	5268107	IfStatement	if ( ch < 0x800 )		5268087	0					
ANR	5268108	Condition	ch < 0x800	523:10:24753:24762	5268087	0	True				
ANR	5268109	RelationalExpression	ch < 0x800		5268087	0		<			
ANR	5268110	Identifier	ch		5268087	0					
ANR	5268111	PrimaryExpression	0x800		5268087	1					
ANR	5268112	CompoundStatement		6:22:76:76	5268087	1					
ANR	5268113	ExpressionStatement	ptr [ 0 ] = 0xc0 | ( ch >> 6 )	524:2:24769:24794	5268087	0	True				
ANR	5268114	AssignmentExpression	ptr [ 0 ] = 0xc0 | ( ch >> 6 )		5268087	0		=			
ANR	5268115	ArrayIndexing	ptr [ 0 ]		5268087	0					
ANR	5268116	Identifier	ptr		5268087	0					
ANR	5268117	PrimaryExpression	0		5268087	1					
ANR	5268118	InclusiveOrExpression	0xc0 | ( ch >> 6 )		5268087	1		|			
ANR	5268119	PrimaryExpression	0xc0		5268087	0					
ANR	5268120	ShiftExpression	ch >> 6		5268087	1		>>			
ANR	5268121	Identifier	ch		5268087	0					
ANR	5268122	PrimaryExpression	6		5268087	1					
ANR	5268123	ExpressionStatement	ptr [ 1 ] = 0x80 | ( ch & 0x3f )	525:2:24798:24825	5268087	1	True				
ANR	5268124	AssignmentExpression	ptr [ 1 ] = 0x80 | ( ch & 0x3f )		5268087	0		=			
ANR	5268125	ArrayIndexing	ptr [ 1 ]		5268087	0					
ANR	5268126	Identifier	ptr		5268087	0					
ANR	5268127	PrimaryExpression	1		5268087	1					
ANR	5268128	InclusiveOrExpression	0x80 | ( ch & 0x3f )		5268087	1		|			
ANR	5268129	PrimaryExpression	0x80		5268087	0					
ANR	5268130	BitAndExpression	ch & 0x3f		5268087	1		&			
ANR	5268131	Identifier	ch		5268087	0					
ANR	5268132	PrimaryExpression	0x3f		5268087	1					
ANR	5268133	ReturnStatement	return 2 ;	526:2:24829:24837	5268087	2	True				
ANR	5268134	PrimaryExpression	2		5268087	0					
ANR	5268135	ElseStatement	else		5268087	0					
ANR	5268136	IfStatement	if ( ch < 0x10000 )		5268087	0					
ANR	5268137	Condition	ch < 0x10000	528:10:24852:24863	5268087	0	True				
ANR	5268138	RelationalExpression	ch < 0x10000		5268087	0		<			
ANR	5268139	Identifier	ch		5268087	0					
ANR	5268140	PrimaryExpression	0x10000		5268087	1					
ANR	5268141	CompoundStatement		11:24:177:177	5268087	1					
ANR	5268142	ExpressionStatement	ptr [ 0 ] = 0xe0 | ( ch >> 12 )	529:2:24870:24896	5268087	0	True				
ANR	5268143	AssignmentExpression	ptr [ 0 ] = 0xe0 | ( ch >> 12 )		5268087	0		=			
ANR	5268144	ArrayIndexing	ptr [ 0 ]		5268087	0					
ANR	5268145	Identifier	ptr		5268087	0					
ANR	5268146	PrimaryExpression	0		5268087	1					
ANR	5268147	InclusiveOrExpression	0xe0 | ( ch >> 12 )		5268087	1		|			
ANR	5268148	PrimaryExpression	0xe0		5268087	0					
ANR	5268149	ShiftExpression	ch >> 12		5268087	1		>>			
ANR	5268150	Identifier	ch		5268087	0					
ANR	5268151	PrimaryExpression	12		5268087	1					
ANR	5268152	ExpressionStatement	ptr [ 1 ] = 0x80 | ( ( ch >> 6 ) & 0x3f )	530:2:24900:24934	5268087	1	True				
ANR	5268153	AssignmentExpression	ptr [ 1 ] = 0x80 | ( ( ch >> 6 ) & 0x3f )		5268087	0		=			
ANR	5268154	ArrayIndexing	ptr [ 1 ]		5268087	0					
ANR	5268155	Identifier	ptr		5268087	0					
ANR	5268156	PrimaryExpression	1		5268087	1					
ANR	5268157	InclusiveOrExpression	0x80 | ( ( ch >> 6 ) & 0x3f )		5268087	1		|			
ANR	5268158	PrimaryExpression	0x80		5268087	0					
ANR	5268159	BitAndExpression	( ch >> 6 ) & 0x3f		5268087	1		&			
ANR	5268160	ShiftExpression	ch >> 6		5268087	0		>>			
ANR	5268161	Identifier	ch		5268087	0					
ANR	5268162	PrimaryExpression	6		5268087	1					
ANR	5268163	PrimaryExpression	0x3f		5268087	1					
ANR	5268164	ExpressionStatement	ptr [ 2 ] = 0x80 | ( ch & 0x3f )	531:2:24938:24965	5268087	2	True				
ANR	5268165	AssignmentExpression	ptr [ 2 ] = 0x80 | ( ch & 0x3f )		5268087	0		=			
ANR	5268166	ArrayIndexing	ptr [ 2 ]		5268087	0					
ANR	5268167	Identifier	ptr		5268087	0					
ANR	5268168	PrimaryExpression	2		5268087	1					
ANR	5268169	InclusiveOrExpression	0x80 | ( ch & 0x3f )		5268087	1		|			
ANR	5268170	PrimaryExpression	0x80		5268087	0					
ANR	5268171	BitAndExpression	ch & 0x3f		5268087	1		&			
ANR	5268172	Identifier	ch		5268087	0					
ANR	5268173	PrimaryExpression	0x3f		5268087	1					
ANR	5268174	ReturnStatement	return 3 ;	532:2:24969:24977	5268087	3	True				
ANR	5268175	PrimaryExpression	3		5268087	0					
ANR	5268176	ElseStatement	else		5268087	0					
ANR	5268177	IfStatement	if ( ch < 0x200000 )		5268087	0					
ANR	5268178	Condition	ch < 0x200000	534:10:24992:25004	5268087	0	True				
ANR	5268179	RelationalExpression	ch < 0x200000		5268087	0		<			
ANR	5268180	Identifier	ch		5268087	0					
ANR	5268181	PrimaryExpression	0x200000		5268087	1					
ANR	5268182	CompoundStatement		17:25:318:318	5268087	1					
ANR	5268183	ExpressionStatement	ptr [ 0 ] = 0xf0 | ( ch >> 18 )	535:2:25011:25037	5268087	0	True				
ANR	5268184	AssignmentExpression	ptr [ 0 ] = 0xf0 | ( ch >> 18 )		5268087	0		=			
ANR	5268185	ArrayIndexing	ptr [ 0 ]		5268087	0					
ANR	5268186	Identifier	ptr		5268087	0					
ANR	5268187	PrimaryExpression	0		5268087	1					
ANR	5268188	InclusiveOrExpression	0xf0 | ( ch >> 18 )		5268087	1		|			
ANR	5268189	PrimaryExpression	0xf0		5268087	0					
ANR	5268190	ShiftExpression	ch >> 18		5268087	1		>>			
ANR	5268191	Identifier	ch		5268087	0					
ANR	5268192	PrimaryExpression	18		5268087	1					
ANR	5268193	ExpressionStatement	ptr [ 1 ] = 0x80 | ( ( ch >> 12 ) & 0x3f )	536:2:25041:25076	5268087	1	True				
ANR	5268194	AssignmentExpression	ptr [ 1 ] = 0x80 | ( ( ch >> 12 ) & 0x3f )		5268087	0		=			
ANR	5268195	ArrayIndexing	ptr [ 1 ]		5268087	0					
ANR	5268196	Identifier	ptr		5268087	0					
ANR	5268197	PrimaryExpression	1		5268087	1					
ANR	5268198	InclusiveOrExpression	0x80 | ( ( ch >> 12 ) & 0x3f )		5268087	1		|			
ANR	5268199	PrimaryExpression	0x80		5268087	0					
ANR	5268200	BitAndExpression	( ch >> 12 ) & 0x3f		5268087	1		&			
ANR	5268201	ShiftExpression	ch >> 12		5268087	0		>>			
ANR	5268202	Identifier	ch		5268087	0					
ANR	5268203	PrimaryExpression	12		5268087	1					
ANR	5268204	PrimaryExpression	0x3f		5268087	1					
ANR	5268205	ExpressionStatement	ptr [ 2 ] = 0x80 | ( ( ch >> 6 ) & 0x3f )	537:2:25080:25114	5268087	2	True				
ANR	5268206	AssignmentExpression	ptr [ 2 ] = 0x80 | ( ( ch >> 6 ) & 0x3f )		5268087	0		=			
ANR	5268207	ArrayIndexing	ptr [ 2 ]		5268087	0					
ANR	5268208	Identifier	ptr		5268087	0					
ANR	5268209	PrimaryExpression	2		5268087	1					
ANR	5268210	InclusiveOrExpression	0x80 | ( ( ch >> 6 ) & 0x3f )		5268087	1		|			
ANR	5268211	PrimaryExpression	0x80		5268087	0					
ANR	5268212	BitAndExpression	( ch >> 6 ) & 0x3f		5268087	1		&			
ANR	5268213	ShiftExpression	ch >> 6		5268087	0		>>			
ANR	5268214	Identifier	ch		5268087	0					
ANR	5268215	PrimaryExpression	6		5268087	1					
ANR	5268216	PrimaryExpression	0x3f		5268087	1					
ANR	5268217	ExpressionStatement	ptr [ 3 ] = 0x80 | ( ch & 0x3f )	538:2:25118:25146	5268087	3	True				
ANR	5268218	AssignmentExpression	ptr [ 3 ] = 0x80 | ( ch & 0x3f )		5268087	0		=			
ANR	5268219	ArrayIndexing	ptr [ 3 ]		5268087	0					
ANR	5268220	Identifier	ptr		5268087	0					
ANR	5268221	PrimaryExpression	3		5268087	1					
ANR	5268222	InclusiveOrExpression	0x80 | ( ch & 0x3f )		5268087	1		|			
ANR	5268223	PrimaryExpression	0x80		5268087	0					
ANR	5268224	BitAndExpression	ch & 0x3f		5268087	1		&			
ANR	5268225	Identifier	ch		5268087	0					
ANR	5268226	PrimaryExpression	0x3f		5268087	1					
ANR	5268227	ReturnStatement	return 4 ;	539:2:25150:25158	5268087	4	True				
ANR	5268228	PrimaryExpression	4		5268087	0					
ANR	5268229	ReturnStatement	return 0 ;	541:1:25164:25172	5268087	1	True				
ANR	5268230	PrimaryExpression	0		5268087	0					
ANR	5268231	ReturnType	R_API int		5268087	1					
ANR	5268232	Identifier	r_utf8_encode		5268087	2					
ANR	5268233	ParameterList	"ut8 * ptr , const RRune ch"		5268087	3					
ANR	5268234	Parameter	ut8 * ptr	518:24:24662:24669	5268087	0	True				
ANR	5268235	ParameterType	ut8 *		5268087	0					
ANR	5268236	Identifier	ptr		5268087	1					
ANR	5268237	Parameter	const RRune ch	518:34:24672:24685	5268087	1	True				
ANR	5268238	ParameterType	const RRune		5268087	0					
ANR	5268239	Identifier	ch		5268087	1					
ANR	5268240	CFGEntryNode	ENTRY		5268087		True				
ANR	5268241	CFGExitNode	EXIT		5268087		True				
ANR	5268242	Symbol	ch		5268087						
ANR	5268243	Symbol	* ptr		5268087						
ANR	5268244	Symbol	ptr		5268087						
ANR	5268245	Function	r_utf8_encode_str	545:0:25232:25525							
ANR	5268246	FunctionDef	"r_utf8_encode_str (const RRune * str , ut8 * dst , const int dst_length)"		5268245	0					
ANR	5268247	CompoundStatement		545:78:25310:25525	5268245	0					
ANR	5268248	IdentifierDeclStatement	"int i , pos = 0 ;"	546:1:25313:25327	5268245	0	True				
ANR	5268249	IdentifierDecl	i		5268245	0					
ANR	5268250	IdentifierDeclType	int		5268245	0					
ANR	5268251	Identifier	i		5268245	1					
ANR	5268252	IdentifierDecl	pos = 0		5268245	1					
ANR	5268253	IdentifierDeclType	int		5268245	0					
ANR	5268254	Identifier	pos		5268245	1					
ANR	5268255	AssignmentExpression	pos = 0		5268245	2		=			
ANR	5268256	Identifier	pos		5268245	0					
ANR	5268257	PrimaryExpression	0		5268245	1					
ANR	5268258	IfStatement	if ( ! str || ! dst )		5268245	1					
ANR	5268259	Condition	! str || ! dst	548:5:25335:25346	5268245	0	True				
ANR	5268260	OrExpression	! str || ! dst		5268245	0		||			
ANR	5268261	UnaryOperationExpression	! str		5268245	0					
ANR	5268262	UnaryOperator	!		5268245	0					
ANR	5268263	Identifier	str		5268245	1					
ANR	5268264	UnaryOperationExpression	! dst		5268245	1					
ANR	5268265	UnaryOperator	!		5268245	0					
ANR	5268266	Identifier	dst		5268245	1					
ANR	5268267	CompoundStatement		4:19:38:38	5268245	1					
ANR	5268268	ReturnStatement	return - 1 ;	549:2:25353:25362	5268245	0	True				
ANR	5268269	UnaryOperationExpression	- 1		5268245	0					
ANR	5268270	UnaryOperator	-		5268245	0					
ANR	5268271	PrimaryExpression	1		5268245	1					
ANR	5268272	ForStatement	for ( i = 0 ; i < sizeof ( str ) - 1 && str [ i ] && pos < dst_length - 1 ; i ++ )		5268245	2					
ANR	5268273	ForInit	i = 0 ;	552:6:25374:25379	5268245	0	True				
ANR	5268274	AssignmentExpression	i = 0		5268245	0		=			
ANR	5268275	Identifier	i		5268245	0					
ANR	5268276	PrimaryExpression	0		5268245	1					
ANR	5268277	Condition	i < sizeof ( str ) - 1 && str [ i ] && pos < dst_length - 1	552:13:25381:25434	5268245	1	True				
ANR	5268278	AndExpression	i < sizeof ( str ) - 1 && str [ i ] && pos < dst_length - 1		5268245	0		&&			
ANR	5268279	RelationalExpression	i < sizeof ( str ) - 1		5268245	0		<			
ANR	5268280	Identifier	i		5268245	0					
ANR	5268281	AdditiveExpression	sizeof ( str ) - 1		5268245	1		-			
ANR	5268282	SizeofExpression	sizeof ( str )		5268245	0					
ANR	5268283	Sizeof	sizeof		5268245	0					
ANR	5268284	SizeofOperand	str		5268245	1					
ANR	5268285	PrimaryExpression	1		5268245	1					
ANR	5268286	AndExpression	str [ i ] && pos < dst_length - 1		5268245	1		&&			
ANR	5268287	ArrayIndexing	str [ i ]		5268245	0					
ANR	5268288	Identifier	str		5268245	0					
ANR	5268289	Identifier	i		5268245	1					
ANR	5268290	RelationalExpression	pos < dst_length - 1		5268245	1		<			
ANR	5268291	Identifier	pos		5268245	0					
ANR	5268292	AdditiveExpression	dst_length - 1		5268245	1		-			
ANR	5268293	Identifier	dst_length		5268245	0					
ANR	5268294	PrimaryExpression	1		5268245	1					
ANR	5268295	PostIncDecOperationExpression	i ++	552:69:25437:25439	5268245	2	True				
ANR	5268296	Identifier	i		5268245	0					
ANR	5268297	IncDec	++		5268245	1					
ANR	5268298	CompoundStatement		8:74:131:131	5268245	3					
ANR	5268299	ExpressionStatement	"pos += r_utf8_encode ( & dst [ pos ] , str [ i ] )"	553:2:25446:25486	5268245	0	True				
ANR	5268300	AssignmentExpression	"pos += r_utf8_encode ( & dst [ pos ] , str [ i ] )"		5268245	0		+=			
ANR	5268301	Identifier	pos		5268245	0					
ANR	5268302	CallExpression	"r_utf8_encode ( & dst [ pos ] , str [ i ] )"		5268245	1					
ANR	5268303	Callee	r_utf8_encode		5268245	0					
ANR	5268304	Identifier	r_utf8_encode		5268245	0					
ANR	5268305	ArgumentList	& dst [ pos ]		5268245	1					
ANR	5268306	Argument	& dst [ pos ]		5268245	0					
ANR	5268307	UnaryOperationExpression	& dst [ pos ]		5268245	0					
ANR	5268308	UnaryOperator	&		5268245	0					
ANR	5268309	ArrayIndexing	dst [ pos ]		5268245	1					
ANR	5268310	Identifier	dst		5268245	0					
ANR	5268311	Identifier	pos		5268245	1					
ANR	5268312	Argument	str [ i ]		5268245	1					
ANR	5268313	ArrayIndexing	str [ i ]		5268245	0					
ANR	5268314	Identifier	str		5268245	0					
ANR	5268315	Identifier	i		5268245	1					
ANR	5268316	ExpressionStatement	dst [ pos ++ ] = '\\0'	556:1:25493:25510	5268245	3	True				
ANR	5268317	AssignmentExpression	dst [ pos ++ ] = '\\0'		5268245	0		=			
ANR	5268318	ArrayIndexing	dst [ pos ++ ]		5268245	0					
ANR	5268319	Identifier	dst		5268245	0					
ANR	5268320	PostIncDecOperationExpression	pos ++		5268245	1					
ANR	5268321	Identifier	pos		5268245	0					
ANR	5268322	IncDec	++		5268245	1					
ANR	5268323	PrimaryExpression	'\\0'		5268245	1					
ANR	5268324	ReturnStatement	return pos ;	557:1:25513:25523	5268245	4	True				
ANR	5268325	Identifier	pos		5268245	0					
ANR	5268326	ReturnType	R_API int		5268245	1					
ANR	5268327	Identifier	r_utf8_encode_str		5268245	2					
ANR	5268328	ParameterList	"const RRune * str , ut8 * dst , const int dst_length"		5268245	3					
ANR	5268329	Parameter	const RRune * str	545:28:25260:25275	5268245	0	True				
ANR	5268330	ParameterType	const RRune *		5268245	0					
ANR	5268331	Identifier	str		5268245	1					
ANR	5268332	Parameter	ut8 * dst	545:46:25278:25285	5268245	1	True				
ANR	5268333	ParameterType	ut8 *		5268245	0					
ANR	5268334	Identifier	dst		5268245	1					
ANR	5268335	Parameter	const int dst_length	545:56:25288:25307	5268245	2	True				
ANR	5268336	ParameterType	const int		5268245	0					
ANR	5268337	Identifier	dst_length		5268245	1					
ANR	5268338	CFGEntryNode	ENTRY		5268245		True				
ANR	5268339	CFGExitNode	EXIT		5268245		True				
ANR	5268340	Symbol	str		5268245						
ANR	5268341	Symbol	* dst		5268245						
ANR	5268342	Symbol	* i		5268245						
ANR	5268343	Symbol	dst		5268245						
ANR	5268344	Symbol	dst_length		5268245						
ANR	5268345	Symbol	pos		5268245						
ANR	5268346	Symbol	i		5268245						
ANR	5268347	Symbol	r_utf8_encode		5268245						
ANR	5268348	Symbol	* str		5268245						
ANR	5268349	Function	r_utf8_size	561:0:25586:26161							
ANR	5268350	FunctionDef	r_utf8_size (const ut8 * ptr)		5268349	0					
ANR	5268351	CompoundStatement		561:38:25624:26161	5268349	0					
ANR	5268352	Statement	const	562:1:25627:25631	5268349	0	True				
ANR	5268353	Statement	int	562:7:25633:25635	5268349	1	True				
ANR	5268354	Statement	utf8_size	562:11:25637:25645	5268349	2	True				
ANR	5268355	Statement	[	562:20:25646:25646	5268349	3	True				
ANR	5268356	Statement	]	562:21:25647:25647	5268349	4	True				
ANR	5268357	Statement	=	562:23:25649:25649	5268349	5	True				
ANR	5268358	CompoundStatement		2:25:26:26	5268349	6					
ANR	5268359	Statement	0	563:2:25655:25655	5268349	0	True				
ANR	5268360	Statement	","	563:3:25656:25656	5268349	1	True				
ANR	5268361	Statement	0	563:5:25658:25658	5268349	2	True				
ANR	5268362	Statement	","	563:6:25659:25659	5268349	3	True				
ANR	5268363	Statement	0	563:8:25661:25661	5268349	4	True				
ANR	5268364	Statement	","	563:9:25662:25662	5268349	5	True				
ANR	5268365	Statement	0	563:11:25664:25664	5268349	6	True				
ANR	5268366	Statement	","	563:12:25665:25665	5268349	7	True				
ANR	5268367	Statement	0	563:14:25667:25667	5268349	8	True				
ANR	5268368	Statement	","	563:15:25668:25668	5268349	9	True				
ANR	5268369	Statement	0	563:17:25670:25670	5268349	10	True				
ANR	5268370	Statement	","	563:18:25671:25671	5268349	11	True				
ANR	5268371	Statement	0	563:20:25673:25673	5268349	12	True				
ANR	5268372	Statement	","	563:21:25674:25674	5268349	13	True				
ANR	5268373	Statement	0	563:23:25676:25676	5268349	14	True				
ANR	5268374	Statement	","	563:24:25677:25677	5268349	15	True				
ANR	5268375	Statement	0	563:26:25679:25679	5268349	16	True				
ANR	5268376	Statement	","	563:27:25680:25680	5268349	17	True				
ANR	5268377	Statement	0	563:29:25682:25682	5268349	18	True				
ANR	5268378	Statement	","	563:30:25683:25683	5268349	19	True				
ANR	5268379	Statement	0	563:32:25685:25685	5268349	20	True				
ANR	5268380	Statement	","	563:33:25686:25686	5268349	21	True				
ANR	5268381	Statement	0	563:35:25688:25688	5268349	22	True				
ANR	5268382	Statement	","	563:36:25689:25689	5268349	23	True				
ANR	5268383	Statement	0	563:38:25691:25691	5268349	24	True				
ANR	5268384	Statement	","	563:39:25692:25692	5268349	25	True				
ANR	5268385	Statement	0	563:41:25694:25694	5268349	26	True				
ANR	5268386	Statement	","	563:42:25695:25695	5268349	27	True				
ANR	5268387	Statement	0	563:44:25697:25697	5268349	28	True				
ANR	5268388	Statement	","	563:45:25698:25698	5268349	29	True				
ANR	5268389	Statement	0	563:47:25700:25700	5268349	30	True				
ANR	5268390	Statement	","	563:48:25701:25701	5268349	31	True				
ANR	5268391	Statement	0	564:2:25705:25705	5268349	32	True				
ANR	5268392	Statement	","	564:3:25706:25706	5268349	33	True				
ANR	5268393	Statement	0	564:5:25708:25708	5268349	34	True				
ANR	5268394	Statement	","	564:6:25709:25709	5268349	35	True				
ANR	5268395	Statement	0	564:8:25711:25711	5268349	36	True				
ANR	5268396	Statement	","	564:9:25712:25712	5268349	37	True				
ANR	5268397	Statement	0	564:11:25714:25714	5268349	38	True				
ANR	5268398	Statement	","	564:12:25715:25715	5268349	39	True				
ANR	5268399	Statement	0	564:14:25717:25717	5268349	40	True				
ANR	5268400	Statement	","	564:15:25718:25718	5268349	41	True				
ANR	5268401	Statement	0	564:17:25720:25720	5268349	42	True				
ANR	5268402	Statement	","	564:18:25721:25721	5268349	43	True				
ANR	5268403	Statement	0	564:20:25723:25723	5268349	44	True				
ANR	5268404	Statement	","	564:21:25724:25724	5268349	45	True				
ANR	5268405	Statement	0	564:23:25726:25726	5268349	46	True				
ANR	5268406	Statement	","	564:24:25727:25727	5268349	47	True				
ANR	5268407	Statement	0	564:26:25729:25729	5268349	48	True				
ANR	5268408	Statement	","	564:27:25730:25730	5268349	49	True				
ANR	5268409	Statement	0	564:29:25732:25732	5268349	50	True				
ANR	5268410	Statement	","	564:30:25733:25733	5268349	51	True				
ANR	5268411	Statement	0	564:32:25735:25735	5268349	52	True				
ANR	5268412	Statement	","	564:33:25736:25736	5268349	53	True				
ANR	5268413	Statement	0	564:35:25738:25738	5268349	54	True				
ANR	5268414	Statement	","	564:36:25739:25739	5268349	55	True				
ANR	5268415	Statement	0	564:38:25741:25741	5268349	56	True				
ANR	5268416	Statement	","	564:39:25742:25742	5268349	57	True				
ANR	5268417	Statement	0	564:41:25744:25744	5268349	58	True				
ANR	5268418	Statement	","	564:42:25745:25745	5268349	59	True				
ANR	5268419	Statement	0	564:44:25747:25747	5268349	60	True				
ANR	5268420	Statement	","	564:45:25748:25748	5268349	61	True				
ANR	5268421	Statement	0	564:47:25750:25750	5268349	62	True				
ANR	5268422	Statement	","	564:48:25751:25751	5268349	63	True				
ANR	5268423	Statement	0	565:2:25755:25755	5268349	64	True				
ANR	5268424	Statement	","	565:3:25756:25756	5268349	65	True				
ANR	5268425	Statement	0	565:5:25758:25758	5268349	66	True				
ANR	5268426	Statement	","	565:6:25759:25759	5268349	67	True				
ANR	5268427	Statement	0	565:8:25761:25761	5268349	68	True				
ANR	5268428	Statement	","	565:9:25762:25762	5268349	69	True				
ANR	5268429	Statement	0	565:11:25764:25764	5268349	70	True				
ANR	5268430	Statement	","	565:12:25765:25765	5268349	71	True				
ANR	5268431	Statement	0	565:14:25767:25767	5268349	72	True				
ANR	5268432	Statement	","	565:15:25768:25768	5268349	73	True				
ANR	5268433	Statement	0	565:17:25770:25770	5268349	74	True				
ANR	5268434	Statement	","	565:18:25771:25771	5268349	75	True				
ANR	5268435	Statement	0	565:20:25773:25773	5268349	76	True				
ANR	5268436	Statement	","	565:21:25774:25774	5268349	77	True				
ANR	5268437	Statement	0	565:23:25776:25776	5268349	78	True				
ANR	5268438	Statement	","	565:24:25777:25777	5268349	79	True				
ANR	5268439	Statement	0	565:26:25779:25779	5268349	80	True				
ANR	5268440	Statement	","	565:27:25780:25780	5268349	81	True				
ANR	5268441	Statement	0	565:29:25782:25782	5268349	82	True				
ANR	5268442	Statement	","	565:30:25783:25783	5268349	83	True				
ANR	5268443	Statement	0	565:32:25785:25785	5268349	84	True				
ANR	5268444	Statement	","	565:33:25786:25786	5268349	85	True				
ANR	5268445	Statement	0	565:35:25788:25788	5268349	86	True				
ANR	5268446	Statement	","	565:36:25789:25789	5268349	87	True				
ANR	5268447	Statement	0	565:38:25791:25791	5268349	88	True				
ANR	5268448	Statement	","	565:39:25792:25792	5268349	89	True				
ANR	5268449	Statement	0	565:41:25794:25794	5268349	90	True				
ANR	5268450	Statement	","	565:42:25795:25795	5268349	91	True				
ANR	5268451	Statement	0	565:44:25797:25797	5268349	92	True				
ANR	5268452	Statement	","	565:45:25798:25798	5268349	93	True				
ANR	5268453	Statement	0	565:47:25800:25800	5268349	94	True				
ANR	5268454	Statement	","	565:48:25801:25801	5268349	95	True				
ANR	5268455	Statement	0	566:2:25805:25805	5268349	96	True				
ANR	5268456	Statement	","	566:3:25806:25806	5268349	97	True				
ANR	5268457	Statement	0	566:5:25808:25808	5268349	98	True				
ANR	5268458	Statement	","	566:6:25809:25809	5268349	99	True				
ANR	5268459	Statement	0	566:8:25811:25811	5268349	100	True				
ANR	5268460	Statement	","	566:9:25812:25812	5268349	101	True				
ANR	5268461	Statement	0	566:11:25814:25814	5268349	102	True				
ANR	5268462	Statement	","	566:12:25815:25815	5268349	103	True				
ANR	5268463	Statement	0	566:14:25817:25817	5268349	104	True				
ANR	5268464	Statement	","	566:15:25818:25818	5268349	105	True				
ANR	5268465	Statement	0	566:17:25820:25820	5268349	106	True				
ANR	5268466	Statement	","	566:18:25821:25821	5268349	107	True				
ANR	5268467	Statement	0	566:20:25823:25823	5268349	108	True				
ANR	5268468	Statement	","	566:21:25824:25824	5268349	109	True				
ANR	5268469	Statement	0	566:23:25826:25826	5268349	110	True				
ANR	5268470	Statement	","	566:24:25827:25827	5268349	111	True				
ANR	5268471	Statement	0	566:26:25829:25829	5268349	112	True				
ANR	5268472	Statement	","	566:27:25830:25830	5268349	113	True				
ANR	5268473	Statement	0	566:29:25832:25832	5268349	114	True				
ANR	5268474	Statement	","	566:30:25833:25833	5268349	115	True				
ANR	5268475	Statement	0	566:32:25835:25835	5268349	116	True				
ANR	5268476	Statement	","	566:33:25836:25836	5268349	117	True				
ANR	5268477	Statement	0	566:35:25838:25838	5268349	118	True				
ANR	5268478	Statement	","	566:36:25839:25839	5268349	119	True				
ANR	5268479	Statement	0	566:38:25841:25841	5268349	120	True				
ANR	5268480	Statement	","	566:39:25842:25842	5268349	121	True				
ANR	5268481	Statement	0	566:41:25844:25844	5268349	122	True				
ANR	5268482	Statement	","	566:42:25845:25845	5268349	123	True				
ANR	5268483	Statement	0	566:44:25847:25847	5268349	124	True				
ANR	5268484	Statement	","	566:45:25848:25848	5268349	125	True				
ANR	5268485	Statement	0	566:47:25850:25850	5268349	126	True				
ANR	5268486	Statement	","	566:48:25851:25851	5268349	127	True				
ANR	5268487	Statement	2	567:2:25855:25855	5268349	128	True				
ANR	5268488	Statement	","	567:3:25856:25856	5268349	129	True				
ANR	5268489	Statement	2	567:5:25858:25858	5268349	130	True				
ANR	5268490	Statement	","	567:6:25859:25859	5268349	131	True				
ANR	5268491	Statement	2	567:8:25861:25861	5268349	132	True				
ANR	5268492	Statement	","	567:9:25862:25862	5268349	133	True				
ANR	5268493	Statement	2	567:11:25864:25864	5268349	134	True				
ANR	5268494	Statement	","	567:12:25865:25865	5268349	135	True				
ANR	5268495	Statement	2	567:14:25867:25867	5268349	136	True				
ANR	5268496	Statement	","	567:15:25868:25868	5268349	137	True				
ANR	5268497	Statement	2	567:17:25870:25870	5268349	138	True				
ANR	5268498	Statement	","	567:18:25871:25871	5268349	139	True				
ANR	5268499	Statement	2	567:20:25873:25873	5268349	140	True				
ANR	5268500	Statement	","	567:21:25874:25874	5268349	141	True				
ANR	5268501	Statement	2	567:23:25876:25876	5268349	142	True				
ANR	5268502	Statement	","	567:24:25877:25877	5268349	143	True				
ANR	5268503	Statement	2	567:26:25879:25879	5268349	144	True				
ANR	5268504	Statement	","	567:27:25880:25880	5268349	145	True				
ANR	5268505	Statement	2	567:29:25882:25882	5268349	146	True				
ANR	5268506	Statement	","	567:30:25883:25883	5268349	147	True				
ANR	5268507	Statement	2	567:32:25885:25885	5268349	148	True				
ANR	5268508	Statement	","	567:33:25886:25886	5268349	149	True				
ANR	5268509	Statement	2	567:35:25888:25888	5268349	150	True				
ANR	5268510	Statement	","	567:36:25889:25889	5268349	151	True				
ANR	5268511	Statement	2	567:38:25891:25891	5268349	152	True				
ANR	5268512	Statement	","	567:39:25892:25892	5268349	153	True				
ANR	5268513	Statement	2	567:41:25894:25894	5268349	154	True				
ANR	5268514	Statement	","	567:42:25895:25895	5268349	155	True				
ANR	5268515	Statement	2	567:44:25897:25897	5268349	156	True				
ANR	5268516	Statement	","	567:45:25898:25898	5268349	157	True				
ANR	5268517	Statement	2	567:47:25900:25900	5268349	158	True				
ANR	5268518	Statement	","	567:48:25901:25901	5268349	159	True				
ANR	5268519	Statement	2	568:2:25918:25918	5268349	160	True				
ANR	5268520	Statement	","	568:3:25919:25919	5268349	161	True				
ANR	5268521	Statement	2	568:5:25921:25921	5268349	162	True				
ANR	5268522	Statement	","	568:6:25922:25922	5268349	163	True				
ANR	5268523	Statement	2	568:8:25924:25924	5268349	164	True				
ANR	5268524	Statement	","	568:9:25925:25925	5268349	165	True				
ANR	5268525	Statement	2	568:11:25927:25927	5268349	166	True				
ANR	5268526	Statement	","	568:12:25928:25928	5268349	167	True				
ANR	5268527	Statement	2	568:14:25930:25930	5268349	168	True				
ANR	5268528	Statement	","	568:15:25931:25931	5268349	169	True				
ANR	5268529	Statement	2	568:17:25933:25933	5268349	170	True				
ANR	5268530	Statement	","	568:18:25934:25934	5268349	171	True				
ANR	5268531	Statement	2	568:20:25936:25936	5268349	172	True				
ANR	5268532	Statement	","	568:21:25937:25937	5268349	173	True				
ANR	5268533	Statement	2	568:23:25939:25939	5268349	174	True				
ANR	5268534	Statement	","	568:24:25940:25940	5268349	175	True				
ANR	5268535	Statement	2	568:26:25942:25942	5268349	176	True				
ANR	5268536	Statement	","	568:27:25943:25943	5268349	177	True				
ANR	5268537	Statement	2	568:29:25945:25945	5268349	178	True				
ANR	5268538	Statement	","	568:30:25946:25946	5268349	179	True				
ANR	5268539	Statement	2	568:32:25948:25948	5268349	180	True				
ANR	5268540	Statement	","	568:33:25949:25949	5268349	181	True				
ANR	5268541	Statement	2	568:35:25951:25951	5268349	182	True				
ANR	5268542	Statement	","	568:36:25952:25952	5268349	183	True				
ANR	5268543	Statement	2	568:38:25954:25954	5268349	184	True				
ANR	5268544	Statement	","	568:39:25955:25955	5268349	185	True				
ANR	5268545	Statement	2	568:41:25957:25957	5268349	186	True				
ANR	5268546	Statement	","	568:42:25958:25958	5268349	187	True				
ANR	5268547	Statement	2	568:44:25960:25960	5268349	188	True				
ANR	5268548	Statement	","	568:45:25961:25961	5268349	189	True				
ANR	5268549	Statement	2	568:47:25963:25963	5268349	190	True				
ANR	5268550	Statement	","	568:48:25964:25964	5268349	191	True				
ANR	5268551	Statement	3	569:2:25981:25981	5268349	192	True				
ANR	5268552	Statement	","	569:3:25982:25982	5268349	193	True				
ANR	5268553	Statement	3	569:5:25984:25984	5268349	194	True				
ANR	5268554	Statement	","	569:6:25985:25985	5268349	195	True				
ANR	5268555	Statement	3	569:8:25987:25987	5268349	196	True				
ANR	5268556	Statement	","	569:9:25988:25988	5268349	197	True				
ANR	5268557	Statement	3	569:11:25990:25990	5268349	198	True				
ANR	5268558	Statement	","	569:12:25991:25991	5268349	199	True				
ANR	5268559	Statement	3	569:14:25993:25993	5268349	200	True				
ANR	5268560	Statement	","	569:15:25994:25994	5268349	201	True				
ANR	5268561	Statement	3	569:17:25996:25996	5268349	202	True				
ANR	5268562	Statement	","	569:18:25997:25997	5268349	203	True				
ANR	5268563	Statement	3	569:20:25999:25999	5268349	204	True				
ANR	5268564	Statement	","	569:21:26000:26000	5268349	205	True				
ANR	5268565	Statement	3	569:23:26002:26002	5268349	206	True				
ANR	5268566	Statement	","	569:24:26003:26003	5268349	207	True				
ANR	5268567	Statement	3	569:26:26005:26005	5268349	208	True				
ANR	5268568	Statement	","	569:27:26006:26006	5268349	209	True				
ANR	5268569	Statement	3	569:29:26008:26008	5268349	210	True				
ANR	5268570	Statement	","	569:30:26009:26009	5268349	211	True				
ANR	5268571	Statement	3	569:32:26011:26011	5268349	212	True				
ANR	5268572	Statement	","	569:33:26012:26012	5268349	213	True				
ANR	5268573	Statement	3	569:35:26014:26014	5268349	214	True				
ANR	5268574	Statement	","	569:36:26015:26015	5268349	215	True				
ANR	5268575	Statement	3	569:38:26017:26017	5268349	216	True				
ANR	5268576	Statement	","	569:39:26018:26018	5268349	217	True				
ANR	5268577	Statement	3	569:41:26020:26020	5268349	218	True				
ANR	5268578	Statement	","	569:42:26021:26021	5268349	219	True				
ANR	5268579	Statement	3	569:44:26023:26023	5268349	220	True				
ANR	5268580	Statement	","	569:45:26024:26024	5268349	221	True				
ANR	5268581	Statement	3	569:47:26026:26026	5268349	222	True				
ANR	5268582	Statement	","	569:48:26027:26027	5268349	223	True				
ANR	5268583	Statement	4	570:2:26044:26044	5268349	224	True				
ANR	5268584	Statement	","	570:3:26045:26045	5268349	225	True				
ANR	5268585	Statement	4	570:5:26047:26047	5268349	226	True				
ANR	5268586	Statement	","	570:6:26048:26048	5268349	227	True				
ANR	5268587	Statement	4	570:8:26050:26050	5268349	228	True				
ANR	5268588	Statement	","	570:9:26051:26051	5268349	229	True				
ANR	5268589	Statement	4	570:11:26053:26053	5268349	230	True				
ANR	5268590	Statement	","	570:12:26054:26054	5268349	231	True				
ANR	5268591	Statement	4	570:14:26056:26056	5268349	232	True				
ANR	5268592	Statement	","	570:15:26057:26057	5268349	233	True				
ANR	5268593	Statement	4	570:17:26059:26059	5268349	234	True				
ANR	5268594	Statement	","	570:18:26060:26060	5268349	235	True				
ANR	5268595	Statement	4	570:20:26062:26062	5268349	236	True				
ANR	5268596	Statement	","	570:21:26063:26063	5268349	237	True				
ANR	5268597	Statement	4	570:23:26065:26065	5268349	238	True				
ANR	5268598	Statement	","	570:24:26066:26066	5268349	239	True				
ANR	5268599	Statement	4	570:26:26068:26068	5268349	240	True				
ANR	5268600	Statement	","	570:27:26069:26069	5268349	241	True				
ANR	5268601	Statement	4	570:29:26071:26071	5268349	242	True				
ANR	5268602	Statement	","	570:30:26072:26072	5268349	243	True				
ANR	5268603	Statement	4	570:32:26074:26074	5268349	244	True				
ANR	5268604	Statement	","	570:33:26075:26075	5268349	245	True				
ANR	5268605	Statement	4	570:35:26077:26077	5268349	246	True				
ANR	5268606	Statement	","	570:36:26078:26078	5268349	247	True				
ANR	5268607	Statement	4	570:38:26080:26080	5268349	248	True				
ANR	5268608	Statement	","	570:39:26081:26081	5268349	249	True				
ANR	5268609	Statement	4	570:41:26083:26083	5268349	250	True				
ANR	5268610	Statement	","	570:42:26084:26084	5268349	251	True				
ANR	5268611	Statement	4	570:44:26086:26086	5268349	252	True				
ANR	5268612	Statement	","	570:45:26087:26087	5268349	253	True				
ANR	5268613	Statement	4	570:47:26089:26089	5268349	254	True				
ANR	5268614	Statement	","	570:48:26090:26090	5268349	255	True				
ANR	5268615	ExpressionStatement		571:2:26107:26107	5268349	7	True				
ANR	5268616	ReturnStatement	return ( ptr [ 0 ] & 0x80 ) ? utf8_size [ ptr [ 0 ] ^ 0x80 ] : 1 ;	572:1:26110:26159	5268349	8	True				
ANR	5268617	ConditionalExpression	( ptr [ 0 ] & 0x80 ) ? utf8_size [ ptr [ 0 ] ^ 0x80 ] : 1		5268349	0					
ANR	5268618	Condition	ptr [ 0 ] & 0x80		5268349	0					
ANR	5268619	BitAndExpression	ptr [ 0 ] & 0x80		5268349	0		&			
ANR	5268620	ArrayIndexing	ptr [ 0 ]		5268349	0					
ANR	5268621	Identifier	ptr		5268349	0					
ANR	5268622	PrimaryExpression	0		5268349	1					
ANR	5268623	PrimaryExpression	0x80		5268349	1					
ANR	5268624	ArrayIndexing	utf8_size [ ptr [ 0 ] ^ 0x80 ]		5268349	1					
ANR	5268625	Identifier	utf8_size		5268349	0					
ANR	5268626	ExclusiveOrExpression	ptr [ 0 ] ^ 0x80		5268349	1		^			
ANR	5268627	ArrayIndexing	ptr [ 0 ]		5268349	0					
ANR	5268628	Identifier	ptr		5268349	0					
ANR	5268629	PrimaryExpression	0		5268349	1					
ANR	5268630	PrimaryExpression	0x80		5268349	1					
ANR	5268631	PrimaryExpression	1		5268349	2					
ANR	5268632	ReturnType	R_API int		5268349	1					
ANR	5268633	Identifier	r_utf8_size		5268349	2					
ANR	5268634	ParameterList	const ut8 * ptr		5268349	3					
ANR	5268635	Parameter	const ut8 * ptr	561:22:25608:25621	5268349	0	True				
ANR	5268636	ParameterType	const ut8 *		5268349	0					
ANR	5268637	Identifier	ptr		5268349	1					
ANR	5268638	CFGEntryNode	ENTRY		5268349		True				
ANR	5268639	CFGExitNode	EXIT		5268349		True				
ANR	5268640	Symbol	* * ptr		5268349						
ANR	5268641	Symbol	utf8_size		5268349						
ANR	5268642	Symbol	* utf8_size		5268349						
ANR	5268643	Symbol	* ptr		5268349						
ANR	5268644	Symbol	ptr		5268349						
ANR	5268645	Function	r_utf8_strlen	575:0:26164:26316							
ANR	5268646	FunctionDef	r_utf8_strlen (const ut8 * str)		5268645	0					
ANR	5268647	CompoundStatement		575:40:26204:26316	5268645	0					
ANR	5268648	IdentifierDeclStatement	"int i , len = 0 ;"	576:1:26207:26221	5268645	0	True				
ANR	5268649	IdentifierDecl	i		5268645	0					
ANR	5268650	IdentifierDeclType	int		5268645	0					
ANR	5268651	Identifier	i		5268645	1					
ANR	5268652	IdentifierDecl	len = 0		5268645	1					
ANR	5268653	IdentifierDeclType	int		5268645	0					
ANR	5268654	Identifier	len		5268645	1					
ANR	5268655	AssignmentExpression	len = 0		5268645	2		=			
ANR	5268656	Identifier	len		5268645	0					
ANR	5268657	PrimaryExpression	0		5268645	1					
ANR	5268658	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		5268645	1					
ANR	5268659	ForInit	i = 0 ;	578:6:26230:26235	5268645	0	True				
ANR	5268660	AssignmentExpression	i = 0		5268645	0		=			
ANR	5268661	Identifier	i		5268645	0					
ANR	5268662	PrimaryExpression	0		5268645	1					
ANR	5268663	Condition	str [ i ]	578:13:26237:26242	5268645	1	True				
ANR	5268664	ArrayIndexing	str [ i ]		5268645	0					
ANR	5268665	Identifier	str		5268645	0					
ANR	5268666	Identifier	i		5268645	1					
ANR	5268667	PostIncDecOperationExpression	i ++	578:21:26245:26247	5268645	2	True				
ANR	5268668	Identifier	i		5268645	0					
ANR	5268669	IncDec	++		5268645	1					
ANR	5268670	CompoundStatement		4:26:45:45	5268645	3					
ANR	5268671	IfStatement	if ( ( str [ i ] & 0xc0 ) != 0x80 )		5268645	0					
ANR	5268672	Condition	( str [ i ] & 0xc0 ) != 0x80	579:6:26258:26280	5268645	0	True				
ANR	5268673	EqualityExpression	( str [ i ] & 0xc0 ) != 0x80		5268645	0		!=			
ANR	5268674	BitAndExpression	str [ i ] & 0xc0		5268645	0		&			
ANR	5268675	ArrayIndexing	str [ i ]		5268645	0					
ANR	5268676	Identifier	str		5268645	0					
ANR	5268677	Identifier	i		5268645	1					
ANR	5268678	PrimaryExpression	0xc0		5268645	1					
ANR	5268679	PrimaryExpression	0x80		5268645	1					
ANR	5268680	CompoundStatement		5:31:78:78	5268645	1					
ANR	5268681	ExpressionStatement	len ++	580:3:26288:26293	5268645	0	True				
ANR	5268682	PostIncDecOperationExpression	len ++		5268645	0					
ANR	5268683	Identifier	len		5268645	0					
ANR	5268684	IncDec	++		5268645	1					
ANR	5268685	ReturnStatement	return len ;	584:1:26304:26314	5268645	2	True				
ANR	5268686	Identifier	len		5268645	0					
ANR	5268687	ReturnType	R_API int		5268645	1					
ANR	5268688	Identifier	r_utf8_strlen		5268645	2					
ANR	5268689	ParameterList	const ut8 * str		5268645	3					
ANR	5268690	Parameter	const ut8 * str	575:24:26188:26201	5268645	0	True				
ANR	5268691	ParameterType	const ut8 *		5268645	0					
ANR	5268692	Identifier	str		5268645	1					
ANR	5268693	CFGEntryNode	ENTRY		5268645		True				
ANR	5268694	CFGExitNode	EXIT		5268645		True				
ANR	5268695	Symbol	str		5268645						
ANR	5268696	Symbol	* i		5268645						
ANR	5268697	Symbol	len		5268645						
ANR	5268698	Symbol	i		5268645						
ANR	5268699	Symbol	* str		5268645						
ANR	5268700	Function	r_isprint	587:0:26319:27130							
ANR	5268701	FunctionDef	r_isprint (const RRune c)		5268700	0					
ANR	5268702	CompoundStatement		587:35:26354:27130	5268700	0					
ANR	5268703	IfStatement	if ( c < 0x34F )		5268700	0					
ANR	5268704	Condition	c < 0x34F	589:5:26445:26453	5268700	0	True				
ANR	5268705	RelationalExpression	c < 0x34F		5268700	0		<			
ANR	5268706	Identifier	c		5268700	0					
ANR	5268707	PrimaryExpression	0x34F		5268700	1					
ANR	5268708	CompoundStatement		3:16:101:101	5268700	1					
ANR	5268709	ReturnStatement	return ! ( c <= 0x1F || ( c >= 0x7F && c <= 0x9F ) ) ;	595:2:26666:26715	5268700	0	True				
ANR	5268710	UnaryOperationExpression	! ( c <= 0x1F || ( c >= 0x7F && c <= 0x9F ) )		5268700	0					
ANR	5268711	UnaryOperator	!		5268700	0					
ANR	5268712	OrExpression	c <= 0x1F || ( c >= 0x7F && c <= 0x9F )		5268700	1		||			
ANR	5268713	RelationalExpression	c <= 0x1F		5268700	0		<=			
ANR	5268714	Identifier	c		5268700	0					
ANR	5268715	PrimaryExpression	0x1F		5268700	1					
ANR	5268716	AndExpression	c >= 0x7F && c <= 0x9F		5268700	1		&&			
ANR	5268717	RelationalExpression	c >= 0x7F		5268700	0		>=			
ANR	5268718	Identifier	c		5268700	0					
ANR	5268719	PrimaryExpression	0x7F		5268700	1					
ANR	5268720	RelationalExpression	c <= 0x9F		5268700	1		<=			
ANR	5268721	Identifier	c		5268700	0					
ANR	5268722	PrimaryExpression	0x9F		5268700	1					
ANR	5268723	IdentifierDeclStatement	const int last = nonprintable_ranges_count ;	598:1:26722:26764	5268700	1	True				
ANR	5268724	IdentifierDecl	last = nonprintable_ranges_count		5268700	0					
ANR	5268725	IdentifierDeclType	const int		5268700	0					
ANR	5268726	Identifier	last		5268700	1					
ANR	5268727	AssignmentExpression	last = nonprintable_ranges_count		5268700	2		=			
ANR	5268728	Identifier	nonprintable_ranges_count		5268700	0					
ANR	5268729	Identifier	nonprintable_ranges_count		5268700	1					
ANR	5268730	IdentifierDeclStatement	int low = 0 ;	600:1:26768:26779	5268700	2	True				
ANR	5268731	IdentifierDecl	low = 0		5268700	0					
ANR	5268732	IdentifierDeclType	int		5268700	0					
ANR	5268733	Identifier	low		5268700	1					
ANR	5268734	AssignmentExpression	low = 0		5268700	2		=			
ANR	5268735	Identifier	low		5268700	0					
ANR	5268736	PrimaryExpression	0		5268700	1					
ANR	5268737	IdentifierDeclStatement	int hi = last - 1 ;	601:1:26782:26799	5268700	3	True				
ANR	5268738	IdentifierDecl	hi = last - 1		5268700	0					
ANR	5268739	IdentifierDeclType	int		5268700	0					
ANR	5268740	Identifier	hi		5268700	1					
ANR	5268741	AssignmentExpression	hi = last - 1		5268700	2		=			
ANR	5268742	Identifier	hi		5268700	0					
ANR	5268743	AdditiveExpression	last - 1		5268700	1		-			
ANR	5268744	Identifier	last		5268700	0					
ANR	5268745	PrimaryExpression	1		5268700	1					
ANR	5268746	DoStatement	do		5268700	4					
ANR	5268747	CompoundStatement		18:2:455:480	5268700	0					
ANR	5268748	IdentifierDeclStatement	int mid = ( low + hi ) >> 1 ;	604:2:26810:26835	5268700	0	True				
ANR	5268749	IdentifierDecl	mid = ( low + hi ) >> 1		5268700	0					
ANR	5268750	IdentifierDeclType	int		5268700	0					
ANR	5268751	Identifier	mid		5268700	1					
ANR	5268752	AssignmentExpression	mid = ( low + hi ) >> 1		5268700	2		=			
ANR	5268753	Identifier	mid		5268700	0					
ANR	5268754	ShiftExpression	( low + hi ) >> 1		5268700	1		>>			
ANR	5268755	AdditiveExpression	low + hi		5268700	0		+			
ANR	5268756	Identifier	low		5268700	0					
ANR	5268757	Identifier	hi		5268700	1					
ANR	5268758	PrimaryExpression	1		5268700	1					
ANR	5268759	IfStatement	if ( c >= nonprintable_ranges [ mid ] . from && c <= nonprintable_ranges [ mid ] . to )		5268700	1					
ANR	5268760	Condition	c >= nonprintable_ranges [ mid ] . from && c <= nonprintable_ranges [ mid ] . to	605:6:26843:26912	5268700	0	True				
ANR	5268761	AndExpression	c >= nonprintable_ranges [ mid ] . from && c <= nonprintable_ranges [ mid ] . to		5268700	0		&&			
ANR	5268762	RelationalExpression	c >= nonprintable_ranges [ mid ] . from		5268700	0		>=			
ANR	5268763	Identifier	c		5268700	0					
ANR	5268764	MemberAccess	nonprintable_ranges [ mid ] . from		5268700	1					
ANR	5268765	ArrayIndexing	nonprintable_ranges [ mid ]		5268700	0					
ANR	5268766	Identifier	nonprintable_ranges		5268700	0					
ANR	5268767	Identifier	mid		5268700	1					
ANR	5268768	Identifier	from		5268700	1					
ANR	5268769	RelationalExpression	c <= nonprintable_ranges [ mid ] . to		5268700	1		<=			
ANR	5268770	Identifier	c		5268700	0					
ANR	5268771	MemberAccess	nonprintable_ranges [ mid ] . to		5268700	1					
ANR	5268772	ArrayIndexing	nonprintable_ranges [ mid ]		5268700	0					
ANR	5268773	Identifier	nonprintable_ranges		5268700	0					
ANR	5268774	Identifier	mid		5268700	1					
ANR	5268775	Identifier	to		5268700	1					
ANR	5268776	CompoundStatement		19:78:560:560	5268700	1					
ANR	5268777	ReturnStatement	return false ;	606:3:26920:26932	5268700	0	True				
ANR	5268778	Identifier	false		5268700	0					
ANR	5268779	IfStatement	if ( mid < last && c > nonprintable_ranges [ mid ] . to )		5268700	2					
ANR	5268780	Condition	mid < last && c > nonprintable_ranges [ mid ] . to	608:6:26944:26988	5268700	0	True				
ANR	5268781	AndExpression	mid < last && c > nonprintable_ranges [ mid ] . to		5268700	0		&&			
ANR	5268782	RelationalExpression	mid < last		5268700	0		<			
ANR	5268783	Identifier	mid		5268700	0					
ANR	5268784	Identifier	last		5268700	1					
ANR	5268785	RelationalExpression	c > nonprintable_ranges [ mid ] . to		5268700	1		>			
ANR	5268786	Identifier	c		5268700	0					
ANR	5268787	MemberAccess	nonprintable_ranges [ mid ] . to		5268700	1					
ANR	5268788	ArrayIndexing	nonprintable_ranges [ mid ]		5268700	0					
ANR	5268789	Identifier	nonprintable_ranges		5268700	0					
ANR	5268790	Identifier	mid		5268700	1					
ANR	5268791	Identifier	to		5268700	1					
ANR	5268792	CompoundStatement		22:53:636:636	5268700	1					
ANR	5268793	ExpressionStatement	low = mid + 1	609:3:26996:27009	5268700	0	True				
ANR	5268794	AssignmentExpression	low = mid + 1		5268700	0		=			
ANR	5268795	Identifier	low		5268700	0					
ANR	5268796	AdditiveExpression	mid + 1		5268700	1		+			
ANR	5268797	Identifier	mid		5268700	0					
ANR	5268798	PrimaryExpression	1		5268700	1					
ANR	5268799	IfStatement	if ( mid < last && c < nonprintable_ranges [ mid ] . from )		5268700	3					
ANR	5268800	Condition	mid < last && c < nonprintable_ranges [ mid ] . from	611:6:27021:27067	5268700	0	True				
ANR	5268801	AndExpression	mid < last && c < nonprintable_ranges [ mid ] . from		5268700	0		&&			
ANR	5268802	RelationalExpression	mid < last		5268700	0		<			
ANR	5268803	Identifier	mid		5268700	0					
ANR	5268804	Identifier	last		5268700	1					
ANR	5268805	RelationalExpression	c < nonprintable_ranges [ mid ] . from		5268700	1		<			
ANR	5268806	Identifier	c		5268700	0					
ANR	5268807	MemberAccess	nonprintable_ranges [ mid ] . from		5268700	1					
ANR	5268808	ArrayIndexing	nonprintable_ranges [ mid ]		5268700	0					
ANR	5268809	Identifier	nonprintable_ranges		5268700	0					
ANR	5268810	Identifier	mid		5268700	1					
ANR	5268811	Identifier	from		5268700	1					
ANR	5268812	CompoundStatement		25:55:715:715	5268700	1					
ANR	5268813	ExpressionStatement	hi = mid - 1	612:3:27075:27087	5268700	0	True				
ANR	5268814	AssignmentExpression	hi = mid - 1		5268700	0		=			
ANR	5268815	Identifier	hi		5268700	0					
ANR	5268816	AdditiveExpression	mid - 1		5268700	1		-			
ANR	5268817	Identifier	mid		5268700	0					
ANR	5268818	PrimaryExpression	1		5268700	1					
ANR	5268819	Condition	low <= hi	614:10:27103:27111	5268700	1	True				
ANR	5268820	RelationalExpression	low <= hi		5268700	0		<=			
ANR	5268821	Identifier	low		5268700	0					
ANR	5268822	Identifier	hi		5268700	1					
ANR	5268823	ReturnStatement	return true ;	616:1:27117:27128	5268700	5	True				
ANR	5268824	Identifier	true		5268700	0					
ANR	5268825	ReturnType	R_API int		5268700	1					
ANR	5268826	Identifier	r_isprint		5268700	2					
ANR	5268827	ParameterList	const RRune c		5268700	3					
ANR	5268828	Parameter	const RRune c	587:20:26339:26351	5268700	0	True				
ANR	5268829	ParameterType	const RRune		5268700	0					
ANR	5268830	Identifier	c		5268700	1					
ANR	5268831	CFGEntryNode	ENTRY		5268700		True				
ANR	5268832	CFGExitNode	EXIT		5268700		True				
ANR	5268833	Symbol	nonprintable_ranges		5268700						
ANR	5268834	Symbol	hi		5268700						
ANR	5268835	Symbol	c		5268700						
ANR	5268836	Symbol	nonprintable_ranges [ mid ] . to		5268700						
ANR	5268837	Symbol	last		5268700						
ANR	5268838	Symbol	nonprintable_ranges [ mid ] . from		5268700						
ANR	5268839	Symbol	false		5268700						
ANR	5268840	Symbol	mid		5268700						
ANR	5268841	Symbol	* nonprintable_ranges		5268700						
ANR	5268842	Symbol	* mid		5268700						
ANR	5268843	Symbol	low		5268700						
ANR	5268844	Symbol	true		5268700						
ANR	5268845	Symbol	nonprintable_ranges_count		5268700						
ANR	5268846	Function	r_utf16_to_utf8_l	620:0:27149:27567							
ANR	5268847	FunctionDef	"r_utf16_to_utf8_l (const wchar_t * wc , int len)"		5268846	0					
ANR	5268848	CompoundStatement		620:58:27207:27567	5268846	0					
ANR	5268849	IfStatement	if ( ! wc || ! len || len < - 1 )		5268846	0					
ANR	5268850	Condition	! wc || ! len || len < - 1	621:5:27214:27236	5268846	0	True				
ANR	5268851	OrExpression	! wc || ! len || len < - 1		5268846	0		||			
ANR	5268852	UnaryOperationExpression	! wc		5268846	0					
ANR	5268853	UnaryOperator	!		5268846	0					
ANR	5268854	Identifier	wc		5268846	1					
ANR	5268855	OrExpression	! len || len < - 1		5268846	1		||			
ANR	5268856	UnaryOperationExpression	! len		5268846	0					
ANR	5268857	UnaryOperator	!		5268846	0					
ANR	5268858	Identifier	len		5268846	1					
ANR	5268859	RelationalExpression	len < - 1		5268846	1		<			
ANR	5268860	Identifier	len		5268846	0					
ANR	5268861	UnaryOperationExpression	- 1		5268846	1					
ANR	5268862	UnaryOperator	-		5268846	0					
ANR	5268863	PrimaryExpression	1		5268846	1					
ANR	5268864	CompoundStatement		2:30:31:31	5268846	1					
ANR	5268865	ReturnStatement	return NULL ;	622:2:27243:27254	5268846	0	True				
ANR	5268866	Identifier	NULL		5268846	0					
ANR	5268867	IdentifierDeclStatement	char * rutf8 = NULL ;	624:1:27260:27278	5268846	1	True				
ANR	5268868	IdentifierDecl	* rutf8 = NULL		5268846	0					
ANR	5268869	IdentifierDeclType	char *		5268846	0					
ANR	5268870	Identifier	rutf8		5268846	1					
ANR	5268871	AssignmentExpression	* rutf8 = NULL		5268846	2		=			
ANR	5268872	Identifier	NULL		5268846	0					
ANR	5268873	Identifier	NULL		5268846	1					
ANR	5268874	IdentifierDeclStatement	int csize ;	625:1:27281:27290	5268846	2	True				
ANR	5268875	IdentifierDecl	csize		5268846	0					
ANR	5268876	IdentifierDeclType	int		5268846	0					
ANR	5268877	Identifier	csize		5268846	1					
ANR	5268878	IfStatement	"if ( ( csize = WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , NULL , 0 , NULL , NULL ) ) )"		5268846	3					
ANR	5268879	Condition	"csize = WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , NULL , 0 , NULL , NULL )"	627:5:27298:27369	5268846	0	True				
ANR	5268880	AssignmentExpression	"csize = WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , NULL , 0 , NULL , NULL )"		5268846	0		=			
ANR	5268881	Identifier	csize		5268846	0					
ANR	5268882	CallExpression	"WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , NULL , 0 , NULL , NULL )"		5268846	1					
ANR	5268883	Callee	WideCharToMultiByte		5268846	0					
ANR	5268884	Identifier	WideCharToMultiByte		5268846	0					
ANR	5268885	ArgumentList	CP_UTF8		5268846	1					
ANR	5268886	Argument	CP_UTF8		5268846	0					
ANR	5268887	Identifier	CP_UTF8		5268846	0					
ANR	5268888	Argument	0		5268846	1					
ANR	5268889	PrimaryExpression	0		5268846	0					
ANR	5268890	Argument	wc		5268846	2					
ANR	5268891	Identifier	wc		5268846	0					
ANR	5268892	Argument	len		5268846	3					
ANR	5268893	Identifier	len		5268846	0					
ANR	5268894	Argument	NULL		5268846	4					
ANR	5268895	Identifier	NULL		5268846	0					
ANR	5268896	Argument	0		5268846	5					
ANR	5268897	PrimaryExpression	0		5268846	0					
ANR	5268898	Argument	NULL		5268846	6					
ANR	5268899	Identifier	NULL		5268846	0					
ANR	5268900	Argument	NULL		5268846	7					
ANR	5268901	Identifier	NULL		5268846	0					
ANR	5268902	CompoundStatement		8:79:164:164	5268846	1					
ANR	5268903	ExpressionStatement	++ csize	628:2:27376:27383	5268846	0	True				
ANR	5268904	UnaryExpression	++ csize		5268846	0					
ANR	5268905	IncDec	++		5268846	0					
ANR	5268906	Identifier	csize		5268846	1					
ANR	5268907	IfStatement	if ( ( rutf8 = malloc ( csize ) ) )		5268846	1					
ANR	5268908	Condition	rutf8 = malloc ( csize )	629:6:27391:27414	5268846	0	True				
ANR	5268909	AssignmentExpression	rutf8 = malloc ( csize )		5268846	0		=			
ANR	5268910	Identifier	rutf8		5268846	0					
ANR	5268911	CallExpression	malloc ( csize )		5268846	1					
ANR	5268912	Callee	malloc		5268846	0					
ANR	5268913	Identifier	malloc		5268846	0					
ANR	5268914	ArgumentList	csize		5268846	1					
ANR	5268915	Argument	csize		5268846	0					
ANR	5268916	Identifier	csize		5268846	0					
ANR	5268917	CompoundStatement		10:32:209:209	5268846	1					
ANR	5268918	ExpressionStatement	"WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , rutf8 , csize , NULL , NULL )"	630:3:27422:27489	5268846	0	True				
ANR	5268919	CallExpression	"WideCharToMultiByte ( CP_UTF8 , 0 , wc , len , rutf8 , csize , NULL , NULL )"		5268846	0					
ANR	5268920	Callee	WideCharToMultiByte		5268846	0					
ANR	5268921	Identifier	WideCharToMultiByte		5268846	0					
ANR	5268922	ArgumentList	CP_UTF8		5268846	1					
ANR	5268923	Argument	CP_UTF8		5268846	0					
ANR	5268924	Identifier	CP_UTF8		5268846	0					
ANR	5268925	Argument	0		5268846	1					
ANR	5268926	PrimaryExpression	0		5268846	0					
ANR	5268927	Argument	wc		5268846	2					
ANR	5268928	Identifier	wc		5268846	0					
ANR	5268929	Argument	len		5268846	3					
ANR	5268930	Identifier	len		5268846	0					
ANR	5268931	Argument	rutf8		5268846	4					
ANR	5268932	Identifier	rutf8		5268846	0					
ANR	5268933	Argument	csize		5268846	5					
ANR	5268934	Identifier	csize		5268846	0					
ANR	5268935	Argument	NULL		5268846	6					
ANR	5268936	Identifier	NULL		5268846	0					
ANR	5268937	Argument	NULL		5268846	7					
ANR	5268938	Identifier	NULL		5268846	0					
ANR	5268939	IfStatement	if ( len != - 1 )		5268846	1					
ANR	5268940	Condition	len != - 1	631:7:27498:27506	5268846	0	True				
ANR	5268941	EqualityExpression	len != - 1		5268846	0		!=			
ANR	5268942	Identifier	len		5268846	0					
ANR	5268943	UnaryOperationExpression	- 1		5268846	1					
ANR	5268944	UnaryOperator	-		5268846	0					
ANR	5268945	PrimaryExpression	1		5268846	1					
ANR	5268946	CompoundStatement		12:18:301:301	5268846	1					
ANR	5268947	ExpressionStatement	rutf8 [ csize - 1 ] = '\\0'	632:4:27515:27538	5268846	0	True				
ANR	5268948	AssignmentExpression	rutf8 [ csize - 1 ] = '\\0'		5268846	0		=			
ANR	5268949	ArrayIndexing	rutf8 [ csize - 1 ]		5268846	0					
ANR	5268950	Identifier	rutf8		5268846	0					
ANR	5268951	AdditiveExpression	csize - 1		5268846	1		-			
ANR	5268952	Identifier	csize		5268846	0					
ANR	5268953	PrimaryExpression	1		5268846	1					
ANR	5268954	PrimaryExpression	'\\0'		5268846	1					
ANR	5268955	ReturnStatement	return rutf8 ;	636:1:27553:27565	5268846	4	True				
ANR	5268956	Identifier	rutf8		5268846	0					
ANR	5268957	ReturnType	R_API char *		5268846	1					
ANR	5268958	Identifier	r_utf16_to_utf8_l		5268846	2					
ANR	5268959	ParameterList	"const wchar_t * wc , int len"		5268846	3					
ANR	5268960	Parameter	const wchar_t * wc	620:30:27179:27195	5268846	0	True				
ANR	5268961	ParameterType	const wchar_t *		5268846	0					
ANR	5268962	Identifier	wc		5268846	1					
ANR	5268963	Parameter	int len	620:49:27198:27204	5268846	1	True				
ANR	5268964	ParameterType	int		5268846	0					
ANR	5268965	Identifier	len		5268846	1					
ANR	5268966	CFGEntryNode	ENTRY		5268846		True				
ANR	5268967	CFGExitNode	EXIT		5268846		True				
ANR	5268968	Symbol	malloc		5268846						
ANR	5268969	Symbol	NULL		5268846						
ANR	5268970	Symbol	* rutf8		5268846						
ANR	5268971	Symbol	len		5268846						
ANR	5268972	Symbol	CP_UTF8		5268846						
ANR	5268973	Symbol	WideCharToMultiByte		5268846						
ANR	5268974	Symbol	* csize		5268846						
ANR	5268975	Symbol	wc		5268846						
ANR	5268976	Symbol	csize		5268846						
ANR	5268977	Symbol	rutf8		5268846						
ANR	5268978	Function	r_utf8_to_utf16_l	639:0:27570:28029							
ANR	5268979	FunctionDef	"r_utf8_to_utf16_l (const char * cstring , int len)"		5268978	0					
ANR	5268980	CompoundStatement		639:63:27633:28029	5268978	0					
ANR	5268981	IfStatement	if ( ! cstring || ! len || len < - 1 )		5268978	0					
ANR	5268982	Condition	! cstring || ! len || len < - 1	640:5:27640:27667	5268978	0	True				
ANR	5268983	OrExpression	! cstring || ! len || len < - 1		5268978	0		||			
ANR	5268984	UnaryOperationExpression	! cstring		5268978	0					
ANR	5268985	UnaryOperator	!		5268978	0					
ANR	5268986	Identifier	cstring		5268978	1					
ANR	5268987	OrExpression	! len || len < - 1		5268978	1		||			
ANR	5268988	UnaryOperationExpression	! len		5268978	0					
ANR	5268989	UnaryOperator	!		5268978	0					
ANR	5268990	Identifier	len		5268978	1					
ANR	5268991	RelationalExpression	len < - 1		5268978	1		<			
ANR	5268992	Identifier	len		5268978	0					
ANR	5268993	UnaryOperationExpression	- 1		5268978	1					
ANR	5268994	UnaryOperator	-		5268978	0					
ANR	5268995	PrimaryExpression	1		5268978	1					
ANR	5268996	CompoundStatement		2:35:36:36	5268978	1					
ANR	5268997	ReturnStatement	return NULL ;	641:2:27674:27685	5268978	0	True				
ANR	5268998	Identifier	NULL		5268978	0					
ANR	5268999	IdentifierDeclStatement	wchar_t * rutf16 = NULL ;	643:1:27691:27713	5268978	1	True				
ANR	5269000	IdentifierDecl	* rutf16 = NULL		5268978	0					
ANR	5269001	IdentifierDeclType	wchar_t *		5268978	0					
ANR	5269002	Identifier	rutf16		5268978	1					
ANR	5269003	AssignmentExpression	* rutf16 = NULL		5268978	2		=			
ANR	5269004	Identifier	NULL		5268978	0					
ANR	5269005	Identifier	NULL		5268978	1					
ANR	5269006	IdentifierDeclStatement	int wcsize ;	644:1:27716:27726	5268978	2	True				
ANR	5269007	IdentifierDecl	wcsize		5268978	0					
ANR	5269008	IdentifierDeclType	int		5268978	0					
ANR	5269009	Identifier	wcsize		5268978	1					
ANR	5269010	IfStatement	"if ( ( wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , NULL , 0 ) ) )"		5268978	3					
ANR	5269011	Condition	"wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , NULL , 0 )"	646:5:27734:27799	5268978	0	True				
ANR	5269012	AssignmentExpression	"wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , NULL , 0 )"		5268978	0		=			
ANR	5269013	Identifier	wcsize		5268978	0					
ANR	5269014	CallExpression	"MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , NULL , 0 )"		5268978	1					
ANR	5269015	Callee	MultiByteToWideChar		5268978	0					
ANR	5269016	Identifier	MultiByteToWideChar		5268978	0					
ANR	5269017	ArgumentList	CP_UTF8		5268978	1					
ANR	5269018	Argument	CP_UTF8		5268978	0					
ANR	5269019	Identifier	CP_UTF8		5268978	0					
ANR	5269020	Argument	0		5268978	1					
ANR	5269021	PrimaryExpression	0		5268978	0					
ANR	5269022	Argument	cstring		5268978	2					
ANR	5269023	Identifier	cstring		5268978	0					
ANR	5269024	Argument	len		5268978	3					
ANR	5269025	Identifier	len		5268978	0					
ANR	5269026	Argument	NULL		5268978	4					
ANR	5269027	Identifier	NULL		5268978	0					
ANR	5269028	Argument	0		5268978	5					
ANR	5269029	PrimaryExpression	0		5268978	0					
ANR	5269030	CompoundStatement		8:73:168:168	5268978	1					
ANR	5269031	ExpressionStatement	++ wcsize	647:2:27806:27814	5268978	0	True				
ANR	5269032	UnaryExpression	++ wcsize		5268978	0					
ANR	5269033	IncDec	++		5268978	0					
ANR	5269034	Identifier	wcsize		5268978	1					
ANR	5269035	IfStatement	"if ( ( rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) ) ) )"		5268978	1					
ANR	5269036	Condition	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"	648:6:27822:27877	5268978	0	True				
ANR	5269037	AssignmentExpression	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5268978	0		=			
ANR	5269038	Identifier	rutf16		5268978	0					
ANR	5269039	CastExpression	"( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5268978	1					
ANR	5269040	CastTarget	wchar_t *		5268978	0					
ANR	5269041	CallExpression	"calloc ( wcsize , sizeof ( wchar_t ) )"		5268978	1					
ANR	5269042	Callee	calloc		5268978	0					
ANR	5269043	Identifier	calloc		5268978	0					
ANR	5269044	ArgumentList	wcsize		5268978	1					
ANR	5269045	Argument	wcsize		5268978	0					
ANR	5269046	Identifier	wcsize		5268978	0					
ANR	5269047	Argument	sizeof ( wchar_t )		5268978	1					
ANR	5269048	SizeofExpression	sizeof ( wchar_t )		5268978	0					
ANR	5269049	Sizeof	sizeof		5268978	0					
ANR	5269050	SizeofOperand	wchar_t		5268978	1					
ANR	5269051	CompoundStatement		10:64:246:246	5268978	1					
ANR	5269052	ExpressionStatement	"MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , rutf16 , wcsize )"	649:3:27885:27947	5268978	0	True				
ANR	5269053	CallExpression	"MultiByteToWideChar ( CP_UTF8 , 0 , cstring , len , rutf16 , wcsize )"		5268978	0					
ANR	5269054	Callee	MultiByteToWideChar		5268978	0					
ANR	5269055	Identifier	MultiByteToWideChar		5268978	0					
ANR	5269056	ArgumentList	CP_UTF8		5268978	1					
ANR	5269057	Argument	CP_UTF8		5268978	0					
ANR	5269058	Identifier	CP_UTF8		5268978	0					
ANR	5269059	Argument	0		5268978	1					
ANR	5269060	PrimaryExpression	0		5268978	0					
ANR	5269061	Argument	cstring		5268978	2					
ANR	5269062	Identifier	cstring		5268978	0					
ANR	5269063	Argument	len		5268978	3					
ANR	5269064	Identifier	len		5268978	0					
ANR	5269065	Argument	rutf16		5268978	4					
ANR	5269066	Identifier	rutf16		5268978	0					
ANR	5269067	Argument	wcsize		5268978	5					
ANR	5269068	Identifier	wcsize		5268978	0					
ANR	5269069	IfStatement	if ( len != - 1 )		5268978	1					
ANR	5269070	Condition	len != - 1	650:7:27956:27964	5268978	0	True				
ANR	5269071	EqualityExpression	len != - 1		5268978	0		!=			
ANR	5269072	Identifier	len		5268978	0					
ANR	5269073	UnaryOperationExpression	- 1		5268978	1					
ANR	5269074	UnaryOperator	-		5268978	0					
ANR	5269075	PrimaryExpression	1		5268978	1					
ANR	5269076	CompoundStatement		12:18:333:333	5268978	1					
ANR	5269077	Statement	rutf16	651:4:27973:27978	5268978	0	True				
ANR	5269078	Statement	[	651:10:27979:27979	5268978	1	True				
ANR	5269079	Statement	wcsize	651:11:27980:27985	5268978	2	True				
ANR	5269080	Statement	-	651:18:27987:27987	5268978	3	True				
ANR	5269081	Statement	1	651:20:27989:27989	5268978	4	True				
ANR	5269082	Statement	]	651:21:27990:27990	5268978	5	True				
ANR	5269083	Statement	=	651:23:27992:27992	5268978	6	True				
ANR	5269084	Statement	L	651:25:27994:27994	5268978	7	True				
ANR	5269085	ExpressionStatement	'\\0'	651:26:27995:27999	5268978	8	True				
ANR	5269086	PrimaryExpression	'\\0'		5268978	0					
ANR	5269087	ReturnStatement	return rutf16 ;	655:1:28014:28027	5268978	4	True				
ANR	5269088	Identifier	rutf16		5268978	0					
ANR	5269089	ReturnType	R_API wchar_t *		5268978	1					
ANR	5269090	Identifier	r_utf8_to_utf16_l		5268978	2					
ANR	5269091	ParameterList	"const char * cstring , int len"		5268978	3					
ANR	5269092	Parameter	const char * cstring	639:33:27603:27621	5268978	0	True				
ANR	5269093	ParameterType	const char *		5268978	0					
ANR	5269094	Identifier	cstring		5268978	1					
ANR	5269095	Parameter	int len	639:54:27624:27630	5268978	1	True				
ANR	5269096	ParameterType	int		5268978	0					
ANR	5269097	Identifier	len		5268978	1					
ANR	5269098	CFGEntryNode	ENTRY		5268978		True				
ANR	5269099	CFGExitNode	EXIT		5268978		True				
ANR	5269100	Symbol	NULL		5268978						
ANR	5269101	Symbol	len		5268978						
ANR	5269102	Symbol	wcsize		5268978						
ANR	5269103	Symbol	CP_UTF8		5268978						
ANR	5269104	Symbol	rutf16		5268978						
ANR	5269105	Symbol	cstring		5268978						
ANR	5269106	Symbol	MultiByteToWideChar		5268978						
ANR	5269107	Symbol	calloc		5268978						
ANR	5269108	Function	r_utf8_to_acp_l	658:0:28032:28785							
ANR	5269109	FunctionDef	"r_utf8_to_acp_l (const ut8 * str , int len)"		5269108	0					
ANR	5269110	CompoundStatement		658:53:28085:28785	5269108	0					
ANR	5269111	IfStatement	if ( ! str || ! len || len < - 1 )		5269108	0					
ANR	5269112	Condition	! str || ! len || len < - 1	659:5:28092:28115	5269108	0	True				
ANR	5269113	OrExpression	! str || ! len || len < - 1		5269108	0		||			
ANR	5269114	UnaryOperationExpression	! str		5269108	0					
ANR	5269115	UnaryOperator	!		5269108	0					
ANR	5269116	Identifier	str		5269108	1					
ANR	5269117	OrExpression	! len || len < - 1		5269108	1		||			
ANR	5269118	UnaryOperationExpression	! len		5269108	0					
ANR	5269119	UnaryOperator	!		5269108	0					
ANR	5269120	Identifier	len		5269108	1					
ANR	5269121	RelationalExpression	len < - 1		5269108	1		<			
ANR	5269122	Identifier	len		5269108	0					
ANR	5269123	UnaryOperationExpression	- 1		5269108	1					
ANR	5269124	UnaryOperator	-		5269108	0					
ANR	5269125	PrimaryExpression	1		5269108	1					
ANR	5269126	CompoundStatement		2:31:32:32	5269108	1					
ANR	5269127	ReturnStatement	return NULL ;	660:2:28122:28133	5269108	0	True				
ANR	5269128	Identifier	NULL		5269108	0					
ANR	5269129	IdentifierDeclStatement	char * acp = NULL ;	662:1:28139:28155	5269108	1	True				
ANR	5269130	IdentifierDecl	* acp = NULL		5269108	0					
ANR	5269131	IdentifierDeclType	char *		5269108	0					
ANR	5269132	Identifier	acp		5269108	1					
ANR	5269133	AssignmentExpression	* acp = NULL		5269108	2		=			
ANR	5269134	Identifier	NULL		5269108	0					
ANR	5269135	Identifier	NULL		5269108	1					
ANR	5269136	IdentifierDeclStatement	"int wcsize , csize ;"	663:1:28158:28175	5269108	2	True				
ANR	5269137	IdentifierDecl	wcsize		5269108	0					
ANR	5269138	IdentifierDeclType	int		5269108	0					
ANR	5269139	Identifier	wcsize		5269108	1					
ANR	5269140	IdentifierDecl	csize		5269108	1					
ANR	5269141	IdentifierDeclType	int		5269108	0					
ANR	5269142	Identifier	csize		5269108	1					
ANR	5269143	IfStatement	"if ( ( wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , str , len , NULL , 0 ) ) )"		5269108	3					
ANR	5269144	Condition	"wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , str , len , NULL , 0 )"	664:5:28182:28243	5269108	0	True				
ANR	5269145	AssignmentExpression	"wcsize = MultiByteToWideChar ( CP_UTF8 , 0 , str , len , NULL , 0 )"		5269108	0		=			
ANR	5269146	Identifier	wcsize		5269108	0					
ANR	5269147	CallExpression	"MultiByteToWideChar ( CP_UTF8 , 0 , str , len , NULL , 0 )"		5269108	1					
ANR	5269148	Callee	MultiByteToWideChar		5269108	0					
ANR	5269149	Identifier	MultiByteToWideChar		5269108	0					
ANR	5269150	ArgumentList	CP_UTF8		5269108	1					
ANR	5269151	Argument	CP_UTF8		5269108	0					
ANR	5269152	Identifier	CP_UTF8		5269108	0					
ANR	5269153	Argument	0		5269108	1					
ANR	5269154	PrimaryExpression	0		5269108	0					
ANR	5269155	Argument	str		5269108	2					
ANR	5269156	Identifier	str		5269108	0					
ANR	5269157	Argument	len		5269108	3					
ANR	5269158	Identifier	len		5269108	0					
ANR	5269159	Argument	NULL		5269108	4					
ANR	5269160	Identifier	NULL		5269108	0					
ANR	5269161	Argument	0		5269108	5					
ANR	5269162	PrimaryExpression	0		5269108	0					
ANR	5269163	CompoundStatement		8:2:164:179	5269108	1					
ANR	5269164	IdentifierDeclStatement	wchar_t * rutf16 ;	665:2:28250:28265	5269108	0	True				
ANR	5269165	IdentifierDecl	* rutf16		5269108	0					
ANR	5269166	IdentifierDeclType	wchar_t *		5269108	0					
ANR	5269167	Identifier	rutf16		5269108	1					
ANR	5269168	ExpressionStatement	++ wcsize	666:2:28269:28277	5269108	1	True				
ANR	5269169	UnaryExpression	++ wcsize		5269108	0					
ANR	5269170	IncDec	++		5269108	0					
ANR	5269171	Identifier	wcsize		5269108	1					
ANR	5269172	IfStatement	"if ( ( rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) ) ) )"		5269108	2					
ANR	5269173	Condition	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"	667:6:28285:28339	5269108	0	True				
ANR	5269174	AssignmentExpression	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5269108	0		=			
ANR	5269175	Identifier	rutf16		5269108	0					
ANR	5269176	CastExpression	"( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5269108	1					
ANR	5269177	CastTarget	wchar_t *		5269108	0					
ANR	5269178	CallExpression	"calloc ( wcsize , sizeof ( wchar_t ) )"		5269108	1					
ANR	5269179	Callee	calloc		5269108	0					
ANR	5269180	Identifier	calloc		5269108	0					
ANR	5269181	ArgumentList	wcsize		5269108	1					
ANR	5269182	Argument	wcsize		5269108	0					
ANR	5269183	Identifier	wcsize		5269108	0					
ANR	5269184	Argument	sizeof ( wchar_t )		5269108	1					
ANR	5269185	SizeofExpression	sizeof ( wchar_t )		5269108	0					
ANR	5269186	Sizeof	sizeof		5269108	0					
ANR	5269187	SizeofOperand	wchar_t		5269108	1					
ANR	5269188	CompoundStatement		10:63:256:256	5269108	1					
ANR	5269189	ExpressionStatement	"MultiByteToWideChar ( CP_UTF8 , 0 , str , len , rutf16 , wcsize )"	668:3:28347:28405	5269108	0	True				
ANR	5269190	CallExpression	"MultiByteToWideChar ( CP_UTF8 , 0 , str , len , rutf16 , wcsize )"		5269108	0					
ANR	5269191	Callee	MultiByteToWideChar		5269108	0					
ANR	5269192	Identifier	MultiByteToWideChar		5269108	0					
ANR	5269193	ArgumentList	CP_UTF8		5269108	1					
ANR	5269194	Argument	CP_UTF8		5269108	0					
ANR	5269195	Identifier	CP_UTF8		5269108	0					
ANR	5269196	Argument	0		5269108	1					
ANR	5269197	PrimaryExpression	0		5269108	0					
ANR	5269198	Argument	str		5269108	2					
ANR	5269199	Identifier	str		5269108	0					
ANR	5269200	Argument	len		5269108	3					
ANR	5269201	Identifier	len		5269108	0					
ANR	5269202	Argument	rutf16		5269108	4					
ANR	5269203	Identifier	rutf16		5269108	0					
ANR	5269204	Argument	wcsize		5269108	5					
ANR	5269205	Identifier	wcsize		5269108	0					
ANR	5269206	IfStatement	if ( len != - 1 )		5269108	1					
ANR	5269207	Condition	len != - 1	669:7:28414:28422	5269108	0	True				
ANR	5269208	EqualityExpression	len != - 1		5269108	0		!=			
ANR	5269209	Identifier	len		5269108	0					
ANR	5269210	UnaryOperationExpression	- 1		5269108	1					
ANR	5269211	UnaryOperator	-		5269108	0					
ANR	5269212	PrimaryExpression	1		5269108	1					
ANR	5269213	CompoundStatement		12:18:339:339	5269108	1					
ANR	5269214	Statement	rutf16	670:4:28431:28436	5269108	0	True				
ANR	5269215	Statement	[	670:10:28437:28437	5269108	1	True				
ANR	5269216	Statement	wcsize	670:11:28438:28443	5269108	2	True				
ANR	5269217	Statement	-	670:18:28445:28445	5269108	3	True				
ANR	5269218	Statement	1	670:20:28447:28447	5269108	4	True				
ANR	5269219	Statement	]	670:21:28448:28448	5269108	5	True				
ANR	5269220	Statement	=	670:23:28450:28450	5269108	6	True				
ANR	5269221	Statement	L	670:25:28452:28452	5269108	7	True				
ANR	5269222	ExpressionStatement	'\\0'	670:26:28453:28457	5269108	8	True				
ANR	5269223	PrimaryExpression	'\\0'		5269108	0					
ANR	5269224	IfStatement	"if ( ( csize = WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , NULL , 0 , NULL , NULL ) ) )"		5269108	2					
ANR	5269225	Condition	"csize = WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , NULL , 0 , NULL , NULL )"	672:7:28471:28548	5269108	0	True				
ANR	5269226	AssignmentExpression	"csize = WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , NULL , 0 , NULL , NULL )"		5269108	0		=			
ANR	5269227	Identifier	csize		5269108	0					
ANR	5269228	CallExpression	"WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , NULL , 0 , NULL , NULL )"		5269108	1					
ANR	5269229	Callee	WideCharToMultiByte		5269108	0					
ANR	5269230	Identifier	WideCharToMultiByte		5269108	0					
ANR	5269231	ArgumentList	CP_ACP		5269108	1					
ANR	5269232	Argument	CP_ACP		5269108	0					
ANR	5269233	Identifier	CP_ACP		5269108	0					
ANR	5269234	Argument	0		5269108	1					
ANR	5269235	PrimaryExpression	0		5269108	0					
ANR	5269236	Argument	rutf16		5269108	2					
ANR	5269237	Identifier	rutf16		5269108	0					
ANR	5269238	Argument	wcsize		5269108	3					
ANR	5269239	Identifier	wcsize		5269108	0					
ANR	5269240	Argument	NULL		5269108	4					
ANR	5269241	Identifier	NULL		5269108	0					
ANR	5269242	Argument	0		5269108	5					
ANR	5269243	PrimaryExpression	0		5269108	0					
ANR	5269244	Argument	NULL		5269108	6					
ANR	5269245	Identifier	NULL		5269108	0					
ANR	5269246	Argument	NULL		5269108	7					
ANR	5269247	Identifier	NULL		5269108	0					
ANR	5269248	CompoundStatement		15:87:465:465	5269108	1					
ANR	5269249	ExpressionStatement	++ csize	673:4:28557:28564	5269108	0	True				
ANR	5269250	UnaryExpression	++ csize		5269108	0					
ANR	5269251	IncDec	++		5269108	0					
ANR	5269252	Identifier	csize		5269108	1					
ANR	5269253	IfStatement	if ( ( acp = malloc ( csize ) ) )		5269108	1					
ANR	5269254	Condition	acp = malloc ( csize )	674:8:28574:28595	5269108	0	True				
ANR	5269255	AssignmentExpression	acp = malloc ( csize )		5269108	0		=			
ANR	5269256	Identifier	acp		5269108	0					
ANR	5269257	CallExpression	malloc ( csize )		5269108	1					
ANR	5269258	Callee	malloc		5269108	0					
ANR	5269259	Identifier	malloc		5269108	0					
ANR	5269260	ArgumentList	csize		5269108	1					
ANR	5269261	Argument	csize		5269108	0					
ANR	5269262	Identifier	csize		5269108	0					
ANR	5269263	CompoundStatement		17:32:512:512	5269108	1					
ANR	5269264	ExpressionStatement	"WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , acp , csize , NULL , NULL )"	675:5:28605:28676	5269108	0	True				
ANR	5269265	CallExpression	"WideCharToMultiByte ( CP_ACP , 0 , rutf16 , wcsize , acp , csize , NULL , NULL )"		5269108	0					
ANR	5269266	Callee	WideCharToMultiByte		5269108	0					
ANR	5269267	Identifier	WideCharToMultiByte		5269108	0					
ANR	5269268	ArgumentList	CP_ACP		5269108	1					
ANR	5269269	Argument	CP_ACP		5269108	0					
ANR	5269270	Identifier	CP_ACP		5269108	0					
ANR	5269271	Argument	0		5269108	1					
ANR	5269272	PrimaryExpression	0		5269108	0					
ANR	5269273	Argument	rutf16		5269108	2					
ANR	5269274	Identifier	rutf16		5269108	0					
ANR	5269275	Argument	wcsize		5269108	3					
ANR	5269276	Identifier	wcsize		5269108	0					
ANR	5269277	Argument	acp		5269108	4					
ANR	5269278	Identifier	acp		5269108	0					
ANR	5269279	Argument	csize		5269108	5					
ANR	5269280	Identifier	csize		5269108	0					
ANR	5269281	Argument	NULL		5269108	6					
ANR	5269282	Identifier	NULL		5269108	0					
ANR	5269283	Argument	NULL		5269108	7					
ANR	5269284	Identifier	NULL		5269108	0					
ANR	5269285	IfStatement	if ( len != - 1 )		5269108	1					
ANR	5269286	Condition	len != - 1	676:9:28687:28695	5269108	0	True				
ANR	5269287	EqualityExpression	len != - 1		5269108	0		!=			
ANR	5269288	Identifier	len		5269108	0					
ANR	5269289	UnaryOperationExpression	- 1		5269108	1					
ANR	5269290	UnaryOperator	-		5269108	0					
ANR	5269291	PrimaryExpression	1		5269108	1					
ANR	5269292	CompoundStatement		19:20:612:612	5269108	1					
ANR	5269293	ExpressionStatement	acp [ csize - 1 ] = '\\0'	677:6:28706:28727	5269108	0	True				
ANR	5269294	AssignmentExpression	acp [ csize - 1 ] = '\\0'		5269108	0		=			
ANR	5269295	ArrayIndexing	acp [ csize - 1 ]		5269108	0					
ANR	5269296	Identifier	acp		5269108	0					
ANR	5269297	AdditiveExpression	csize - 1		5269108	1		-			
ANR	5269298	Identifier	csize		5269108	0					
ANR	5269299	PrimaryExpression	1		5269108	1					
ANR	5269300	PrimaryExpression	'\\0'		5269108	1					
ANR	5269301	ExpressionStatement	free ( rutf16 )	681:3:28750:28763	5269108	3	True				
ANR	5269302	CallExpression	free ( rutf16 )		5269108	0					
ANR	5269303	Callee	free		5269108	0					
ANR	5269304	Identifier	free		5269108	0					
ANR	5269305	ArgumentList	rutf16		5269108	1					
ANR	5269306	Argument	rutf16		5269108	0					
ANR	5269307	Identifier	rutf16		5269108	0					
ANR	5269308	ReturnStatement	return acp ;	684:1:28773:28783	5269108	4	True				
ANR	5269309	Identifier	acp		5269108	0					
ANR	5269310	ReturnType	R_API char *		5269108	1					
ANR	5269311	Identifier	r_utf8_to_acp_l		5269108	2					
ANR	5269312	ParameterList	"const ut8 * str , int len"		5269108	3					
ANR	5269313	Parameter	const ut8 * str	658:28:28060:28073	5269108	0	True				
ANR	5269314	ParameterType	const ut8 *		5269108	0					
ANR	5269315	Identifier	str		5269108	1					
ANR	5269316	Parameter	int len	658:44:28076:28082	5269108	1	True				
ANR	5269317	ParameterType	int		5269108	0					
ANR	5269318	Identifier	len		5269108	1					
ANR	5269319	CFGEntryNode	ENTRY		5269108		True				
ANR	5269320	CFGExitNode	EXIT		5269108		True				
ANR	5269321	Symbol	malloc		5269108						
ANR	5269322	Symbol	NULL		5269108						
ANR	5269323	Symbol	CP_UTF8		5269108						
ANR	5269324	Symbol	* csize		5269108						
ANR	5269325	Symbol	* acp		5269108						
ANR	5269326	Symbol	MultiByteToWideChar		5269108						
ANR	5269327	Symbol	calloc		5269108						
ANR	5269328	Symbol	csize		5269108						
ANR	5269329	Symbol	acp		5269108						
ANR	5269330	Symbol	str		5269108						
ANR	5269331	Symbol	len		5269108						
ANR	5269332	Symbol	wcsize		5269108						
ANR	5269333	Symbol	CP_ACP		5269108						
ANR	5269334	Symbol	rutf16		5269108						
ANR	5269335	Symbol	WideCharToMultiByte		5269108						
ANR	5269336	Function	r_acp_to_utf8_l	687:6:28794:29310							
ANR	5269337	FunctionDef	"r_acp_to_utf8_l (const ut8 * str , int len)"		5269336	0					
ANR	5269338	CompoundStatement		687:59:28847:29310	5269336	0					
ANR	5269339	IfStatement	if ( ! str || ! len || len < - 1 )		5269336	0					
ANR	5269340	Condition	! str || ! len || len < - 1	688:5:28854:28877	5269336	0	True				
ANR	5269341	OrExpression	! str || ! len || len < - 1		5269336	0		||			
ANR	5269342	UnaryOperationExpression	! str		5269336	0					
ANR	5269343	UnaryOperator	!		5269336	0					
ANR	5269344	Identifier	str		5269336	1					
ANR	5269345	OrExpression	! len || len < - 1		5269336	1		||			
ANR	5269346	UnaryOperationExpression	! len		5269336	0					
ANR	5269347	UnaryOperator	!		5269336	0					
ANR	5269348	Identifier	len		5269336	1					
ANR	5269349	RelationalExpression	len < - 1		5269336	1		<			
ANR	5269350	Identifier	len		5269336	0					
ANR	5269351	UnaryOperationExpression	- 1		5269336	1					
ANR	5269352	UnaryOperator	-		5269336	0					
ANR	5269353	PrimaryExpression	1		5269336	1					
ANR	5269354	CompoundStatement		2:31:32:32	5269336	1					
ANR	5269355	ReturnStatement	return NULL ;	689:2:28884:28895	5269336	0	True				
ANR	5269356	Identifier	NULL		5269336	0					
ANR	5269357	IdentifierDeclStatement	int wcsize ;	691:1:28901:28911	5269336	1	True				
ANR	5269358	IdentifierDecl	wcsize		5269336	0					
ANR	5269359	IdentifierDeclType	int		5269336	0					
ANR	5269360	Identifier	wcsize		5269336	1					
ANR	5269361	IfStatement	"if ( ( wcsize = MultiByteToWideChar ( CP_ACP , 0 , str , len , NULL , 0 ) ) )"		5269336	2					
ANR	5269362	Condition	"wcsize = MultiByteToWideChar ( CP_ACP , 0 , str , len , NULL , 0 )"	692:5:28918:28978	5269336	0	True				
ANR	5269363	AssignmentExpression	"wcsize = MultiByteToWideChar ( CP_ACP , 0 , str , len , NULL , 0 )"		5269336	0		=			
ANR	5269364	Identifier	wcsize		5269336	0					
ANR	5269365	CallExpression	"MultiByteToWideChar ( CP_ACP , 0 , str , len , NULL , 0 )"		5269336	1					
ANR	5269366	Callee	MultiByteToWideChar		5269336	0					
ANR	5269367	Identifier	MultiByteToWideChar		5269336	0					
ANR	5269368	ArgumentList	CP_ACP		5269336	1					
ANR	5269369	Argument	CP_ACP		5269336	0					
ANR	5269370	Identifier	CP_ACP		5269336	0					
ANR	5269371	Argument	0		5269336	1					
ANR	5269372	PrimaryExpression	0		5269336	0					
ANR	5269373	Argument	str		5269336	2					
ANR	5269374	Identifier	str		5269336	0					
ANR	5269375	Argument	len		5269336	3					
ANR	5269376	Identifier	len		5269336	0					
ANR	5269377	Argument	NULL		5269336	4					
ANR	5269378	Identifier	NULL		5269336	0					
ANR	5269379	Argument	0		5269336	5					
ANR	5269380	PrimaryExpression	0		5269336	0					
ANR	5269381	CompoundStatement		7:2:137:152	5269336	1					
ANR	5269382	IdentifierDeclStatement	wchar_t * rutf16 ;	693:2:28985:29000	5269336	0	True				
ANR	5269383	IdentifierDecl	* rutf16		5269336	0					
ANR	5269384	IdentifierDeclType	wchar_t *		5269336	0					
ANR	5269385	Identifier	rutf16		5269336	1					
ANR	5269386	ExpressionStatement	++ wcsize	694:2:29004:29012	5269336	1	True				
ANR	5269387	UnaryExpression	++ wcsize		5269336	0					
ANR	5269388	IncDec	++		5269336	0					
ANR	5269389	Identifier	wcsize		5269336	1					
ANR	5269390	IfStatement	"if ( ( rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) ) ) )"		5269336	2					
ANR	5269391	Condition	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"	695:6:29020:29075	5269336	0	True				
ANR	5269392	AssignmentExpression	"rutf16 = ( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5269336	0		=			
ANR	5269393	Identifier	rutf16		5269336	0					
ANR	5269394	CastExpression	"( wchar_t * ) calloc ( wcsize , sizeof ( wchar_t ) )"		5269336	1					
ANR	5269395	CastTarget	wchar_t *		5269336	0					
ANR	5269396	CallExpression	"calloc ( wcsize , sizeof ( wchar_t ) )"		5269336	1					
ANR	5269397	Callee	calloc		5269336	0					
ANR	5269398	Identifier	calloc		5269336	0					
ANR	5269399	ArgumentList	wcsize		5269336	1					
ANR	5269400	Argument	wcsize		5269336	0					
ANR	5269401	Identifier	wcsize		5269336	0					
ANR	5269402	Argument	sizeof ( wchar_t )		5269336	1					
ANR	5269403	SizeofExpression	sizeof ( wchar_t )		5269336	0					
ANR	5269404	Sizeof	sizeof		5269336	0					
ANR	5269405	SizeofOperand	wchar_t		5269336	1					
ANR	5269406	CompoundStatement		14:3:354:406	5269336	1					
ANR	5269407	ExpressionStatement	"MultiByteToWideChar ( CP_ACP , 0 , str , len , rutf16 , wcsize )"	696:3:29083:29140	5269336	0	True				
ANR	5269408	CallExpression	"MultiByteToWideChar ( CP_ACP , 0 , str , len , rutf16 , wcsize )"		5269336	0					
ANR	5269409	Callee	MultiByteToWideChar		5269336	0					
ANR	5269410	Identifier	MultiByteToWideChar		5269336	0					
ANR	5269411	ArgumentList	CP_ACP		5269336	1					
ANR	5269412	Argument	CP_ACP		5269336	0					
ANR	5269413	Identifier	CP_ACP		5269336	0					
ANR	5269414	Argument	0		5269336	1					
ANR	5269415	PrimaryExpression	0		5269336	0					
ANR	5269416	Argument	str		5269336	2					
ANR	5269417	Identifier	str		5269336	0					
ANR	5269418	Argument	len		5269336	3					
ANR	5269419	Identifier	len		5269336	0					
ANR	5269420	Argument	rutf16		5269336	4					
ANR	5269421	Identifier	rutf16		5269336	0					
ANR	5269422	Argument	wcsize		5269336	5					
ANR	5269423	Identifier	wcsize		5269336	0					
ANR	5269424	IfStatement	if ( len != - 1 )		5269336	1					
ANR	5269425	Condition	len != - 1	697:7:29149:29157	5269336	0	True				
ANR	5269426	EqualityExpression	len != - 1		5269336	0		!=			
ANR	5269427	Identifier	len		5269336	0					
ANR	5269428	UnaryOperationExpression	- 1		5269336	1					
ANR	5269429	UnaryOperator	-		5269336	0					
ANR	5269430	PrimaryExpression	1		5269336	1					
ANR	5269431	CompoundStatement		11:18:312:312	5269336	1					
ANR	5269432	Statement	rutf16	698:4:29166:29171	5269336	0	True				
ANR	5269433	Statement	[	698:10:29172:29172	5269336	1	True				
ANR	5269434	Statement	wcsize	698:11:29173:29178	5269336	2	True				
ANR	5269435	Statement	-	698:18:29180:29180	5269336	3	True				
ANR	5269436	Statement	1	698:20:29182:29182	5269336	4	True				
ANR	5269437	Statement	]	698:21:29183:29183	5269336	5	True				
ANR	5269438	Statement	=	698:23:29185:29185	5269336	6	True				
ANR	5269439	Statement	L	698:25:29187:29187	5269336	7	True				
ANR	5269440	ExpressionStatement	'\\0'	698:26:29188:29192	5269336	8	True				
ANR	5269441	PrimaryExpression	'\\0'		5269336	0					
ANR	5269442	IdentifierDeclStatement	"const char * ret = r_utf16_to_utf8_l ( rutf16 , wcsize ) ;"	700:3:29202:29254	5269336	2	True				
ANR	5269443	IdentifierDecl	"* ret = r_utf16_to_utf8_l ( rutf16 , wcsize )"		5269336	0					
ANR	5269444	IdentifierDeclType	const char *		5269336	0					
ANR	5269445	Identifier	ret		5269336	1					
ANR	5269446	AssignmentExpression	"* ret = r_utf16_to_utf8_l ( rutf16 , wcsize )"		5269336	2		=			
ANR	5269447	Identifier	ret		5269336	0					
ANR	5269448	CallExpression	"r_utf16_to_utf8_l ( rutf16 , wcsize )"		5269336	1					
ANR	5269449	Callee	r_utf16_to_utf8_l		5269336	0					
ANR	5269450	Identifier	r_utf16_to_utf8_l		5269336	0					
ANR	5269451	ArgumentList	rutf16		5269336	1					
ANR	5269452	Argument	rutf16		5269336	0					
ANR	5269453	Identifier	rutf16		5269336	0					
ANR	5269454	Argument	wcsize		5269336	1					
ANR	5269455	Identifier	wcsize		5269336	0					
ANR	5269456	ExpressionStatement	free ( rutf16 )	701:3:29259:29272	5269336	3	True				
ANR	5269457	CallExpression	free ( rutf16 )		5269336	0					
ANR	5269458	Callee	free		5269336	0					
ANR	5269459	Identifier	free		5269336	0					
ANR	5269460	ArgumentList	rutf16		5269336	1					
ANR	5269461	Argument	rutf16		5269336	0					
ANR	5269462	Identifier	rutf16		5269336	0					
ANR	5269463	ReturnStatement	return ret ;	702:3:29277:29287	5269336	4	True				
ANR	5269464	Identifier	ret		5269336	0					
ANR	5269465	ReturnStatement	return NULL ;	705:1:29297:29308	5269336	3	True				
ANR	5269466	Identifier	NULL		5269336	0					
ANR	5269467	ReturnType	const char *		5269336	1					
ANR	5269468	Identifier	r_acp_to_utf8_l		5269336	2					
ANR	5269469	ParameterList	"const ut8 * str , int len"		5269336	3					
ANR	5269470	Parameter	const ut8 * str	687:34:28822:28835	5269336	0	True				
ANR	5269471	ParameterType	const ut8 *		5269336	0					
ANR	5269472	Identifier	str		5269336	1					
ANR	5269473	Parameter	int len	687:50:28838:28844	5269336	1	True				
ANR	5269474	ParameterType	int		5269336	0					
ANR	5269475	Identifier	len		5269336	1					
ANR	5269476	CFGEntryNode	ENTRY		5269336		True				
ANR	5269477	CFGExitNode	EXIT		5269336		True				
ANR	5269478	Symbol	str		5269336						
ANR	5269479	Symbol	ret		5269336						
ANR	5269480	Symbol	NULL		5269336						
ANR	5269481	Symbol	len		5269336						
ANR	5269482	Symbol	wcsize		5269336						
ANR	5269483	Symbol	CP_ACP		5269336						
ANR	5269484	Symbol	rutf16		5269336						
ANR	5269485	Symbol	MultiByteToWideChar		5269336						
ANR	5269486	Symbol	calloc		5269336						
ANR	5269487	Symbol	r_utf16_to_utf8_l		5269336						
ANR	5269488	Function	r_utf_block_idx	710:0:29336:29802							
ANR	5269489	FunctionDef	r_utf_block_idx (RRune ch)		5269488	0					
ANR	5269490	CompoundStatement		710:36:29372:29802	5269488	0					
ANR	5269491	IdentifierDeclStatement	const int last = r_utf_blocks_count ;	711:1:29375:29410	5269488	0	True				
ANR	5269492	IdentifierDecl	last = r_utf_blocks_count		5269488	0					
ANR	5269493	IdentifierDeclType	const int		5269488	0					
ANR	5269494	Identifier	last		5269488	1					
ANR	5269495	AssignmentExpression	last = r_utf_blocks_count		5269488	2		=			
ANR	5269496	Identifier	r_utf_blocks_count		5269488	0					
ANR	5269497	Identifier	r_utf_blocks_count		5269488	1					
ANR	5269498	IdentifierDeclStatement	"int low , hi , mid ;"	712:1:29413:29429	5269488	1	True				
ANR	5269499	IdentifierDecl	low		5269488	0					
ANR	5269500	IdentifierDeclType	int		5269488	0					
ANR	5269501	Identifier	low		5269488	1					
ANR	5269502	IdentifierDecl	hi		5269488	1					
ANR	5269503	IdentifierDeclType	int		5269488	0					
ANR	5269504	Identifier	hi		5269488	1					
ANR	5269505	IdentifierDecl	mid		5269488	2					
ANR	5269506	IdentifierDeclType	int		5269488	0					
ANR	5269507	Identifier	mid		5269488	1					
ANR	5269508	ExpressionStatement	low = 0	714:1:29433:29440	5269488	2	True				
ANR	5269509	AssignmentExpression	low = 0		5269488	0		=			
ANR	5269510	Identifier	low		5269488	0					
ANR	5269511	PrimaryExpression	0		5269488	1					
ANR	5269512	ExpressionStatement	hi = last - 1	715:1:29443:29456	5269488	3	True				
ANR	5269513	AssignmentExpression	hi = last - 1		5269488	0		=			
ANR	5269514	Identifier	hi		5269488	0					
ANR	5269515	AdditiveExpression	last - 1		5269488	1		-			
ANR	5269516	Identifier	last		5269488	0					
ANR	5269517	PrimaryExpression	1		5269488	1					
ANR	5269518	DoStatement	do		5269488	4					
ANR	5269519	CompoundStatement		8:4:90:90	5269488	0					
ANR	5269520	ExpressionStatement	mid = ( low + hi ) >> 1	718:2:29467:29488	5269488	0	True				
ANR	5269521	AssignmentExpression	mid = ( low + hi ) >> 1		5269488	0		=			
ANR	5269522	Identifier	mid		5269488	0					
ANR	5269523	ShiftExpression	( low + hi ) >> 1		5269488	1		>>			
ANR	5269524	AdditiveExpression	low + hi		5269488	0		+			
ANR	5269525	Identifier	low		5269488	0					
ANR	5269526	Identifier	hi		5269488	1					
ANR	5269527	PrimaryExpression	1		5269488	1					
ANR	5269528	IfStatement	if ( ch >= r_utf_blocks [ mid ] . from && ch <= r_utf_blocks [ mid ] . to )		5269488	1					
ANR	5269529	Condition	ch >= r_utf_blocks [ mid ] . from && ch <= r_utf_blocks [ mid ] . to	719:6:29496:29553	5269488	0	True				
ANR	5269530	AndExpression	ch >= r_utf_blocks [ mid ] . from && ch <= r_utf_blocks [ mid ] . to		5269488	0		&&			
ANR	5269531	RelationalExpression	ch >= r_utf_blocks [ mid ] . from		5269488	0		>=			
ANR	5269532	Identifier	ch		5269488	0					
ANR	5269533	MemberAccess	r_utf_blocks [ mid ] . from		5269488	1					
ANR	5269534	ArrayIndexing	r_utf_blocks [ mid ]		5269488	0					
ANR	5269535	Identifier	r_utf_blocks		5269488	0					
ANR	5269536	Identifier	mid		5269488	1					
ANR	5269537	Identifier	from		5269488	1					
ANR	5269538	RelationalExpression	ch <= r_utf_blocks [ mid ] . to		5269488	1		<=			
ANR	5269539	Identifier	ch		5269488	0					
ANR	5269540	MemberAccess	r_utf_blocks [ mid ] . to		5269488	1					
ANR	5269541	ArrayIndexing	r_utf_blocks [ mid ]		5269488	0					
ANR	5269542	Identifier	r_utf_blocks		5269488	0					
ANR	5269543	Identifier	mid		5269488	1					
ANR	5269544	Identifier	to		5269488	1					
ANR	5269545	CompoundStatement		10:66:183:183	5269488	1					
ANR	5269546	ReturnStatement	return mid ;	720:3:29561:29571	5269488	0	True				
ANR	5269547	Identifier	mid		5269488	0					
ANR	5269548	IfStatement	if ( mid < last && ch > r_utf_blocks [ mid ] . to )		5269488	2					
ANR	5269549	Condition	mid < last && ch > r_utf_blocks [ mid ] . to	722:6:29583:29621	5269488	0	True				
ANR	5269550	AndExpression	mid < last && ch > r_utf_blocks [ mid ] . to		5269488	0		&&			
ANR	5269551	RelationalExpression	mid < last		5269488	0		<			
ANR	5269552	Identifier	mid		5269488	0					
ANR	5269553	Identifier	last		5269488	1					
ANR	5269554	RelationalExpression	ch > r_utf_blocks [ mid ] . to		5269488	1		>			
ANR	5269555	Identifier	ch		5269488	0					
ANR	5269556	MemberAccess	r_utf_blocks [ mid ] . to		5269488	1					
ANR	5269557	ArrayIndexing	r_utf_blocks [ mid ]		5269488	0					
ANR	5269558	Identifier	r_utf_blocks		5269488	0					
ANR	5269559	Identifier	mid		5269488	1					
ANR	5269560	Identifier	to		5269488	1					
ANR	5269561	CompoundStatement		13:47:251:251	5269488	1					
ANR	5269562	ExpressionStatement	low = mid + 1	723:3:29629:29642	5269488	0	True				
ANR	5269563	AssignmentExpression	low = mid + 1		5269488	0		=			
ANR	5269564	Identifier	low		5269488	0					
ANR	5269565	AdditiveExpression	mid + 1		5269488	1		+			
ANR	5269566	Identifier	mid		5269488	0					
ANR	5269567	PrimaryExpression	1		5269488	1					
ANR	5269568	IfStatement	if ( mid < last && ch < r_utf_blocks [ mid ] . from )		5269488	3					
ANR	5269569	Condition	mid < last && ch < r_utf_blocks [ mid ] . from	725:6:29654:29694	5269488	0	True				
ANR	5269570	AndExpression	mid < last && ch < r_utf_blocks [ mid ] . from		5269488	0		&&			
ANR	5269571	RelationalExpression	mid < last		5269488	0		<			
ANR	5269572	Identifier	mid		5269488	0					
ANR	5269573	Identifier	last		5269488	1					
ANR	5269574	RelationalExpression	ch < r_utf_blocks [ mid ] . from		5269488	1		<			
ANR	5269575	Identifier	ch		5269488	0					
ANR	5269576	MemberAccess	r_utf_blocks [ mid ] . from		5269488	1					
ANR	5269577	ArrayIndexing	r_utf_blocks [ mid ]		5269488	0					
ANR	5269578	Identifier	r_utf_blocks		5269488	0					
ANR	5269579	Identifier	mid		5269488	1					
ANR	5269580	Identifier	from		5269488	1					
ANR	5269581	CompoundStatement		16:49:324:324	5269488	1					
ANR	5269582	ExpressionStatement	hi = mid - 1	726:3:29702:29714	5269488	0	True				
ANR	5269583	AssignmentExpression	hi = mid - 1		5269488	0		=			
ANR	5269584	Identifier	hi		5269488	0					
ANR	5269585	AdditiveExpression	mid - 1		5269488	1		-			
ANR	5269586	Identifier	mid		5269488	0					
ANR	5269587	PrimaryExpression	1		5269488	1					
ANR	5269588	Condition	low <= hi	728:10:29730:29738	5269488	1	True				
ANR	5269589	RelationalExpression	low <= hi		5269488	0		<=			
ANR	5269590	Identifier	low		5269488	0					
ANR	5269591	Identifier	hi		5269488	1					
ANR	5269592	ReturnStatement	return r_utf_blocks_count - 1 ;	730:1:29744:29773	5269488	5	True				
ANR	5269593	AdditiveExpression	r_utf_blocks_count - 1		5269488	0		-			
ANR	5269594	Identifier	r_utf_blocks_count		5269488	0					
ANR	5269595	PrimaryExpression	1		5269488	1					
ANR	5269596	ReturnType	R_API int		5269488	1					
ANR	5269597	Identifier	r_utf_block_idx		5269488	2					
ANR	5269598	ParameterList	RRune ch		5269488	3					
ANR	5269599	Parameter	RRune ch	710:26:29362:29369	5269488	0	True				
ANR	5269600	ParameterType	RRune		5269488	0					
ANR	5269601	Identifier	ch		5269488	1					
ANR	5269602	CFGEntryNode	ENTRY		5269488		True				
ANR	5269603	CFGExitNode	EXIT		5269488		True				
ANR	5269604	Symbol	hi		5269488						
ANR	5269605	Symbol	* mid		5269488						
ANR	5269606	Symbol	r_utf_blocks [ mid ] . to		5269488						
ANR	5269607	Symbol	last		5269488						
ANR	5269608	Symbol	ch		5269488						
ANR	5269609	Symbol	r_utf_blocks_count		5269488						
ANR	5269610	Symbol	low		5269488						
ANR	5269611	Symbol	* r_utf_blocks		5269488						
ANR	5269612	Symbol	mid		5269488						
ANR	5269613	Symbol	r_utf_blocks [ mid ] . from		5269488						
ANR	5269614	Symbol	r_utf_blocks		5269488						
ANR	5269615	Function	r_utf_block_list	734:0:29836:31020							
ANR	5269616	FunctionDef	"r_utf_block_list (const ut8 * str , int len , int * * freq_list)"		5269615	0					
ANR	5269617	CompoundStatement		734:70:29906:31020	5269615	0					
ANR	5269618	IfStatement	if ( ! str )		5269615	0					
ANR	5269619	Condition	! str	735:5:29913:29916	5269615	0	True				
ANR	5269620	UnaryOperationExpression	! str		5269615	0					
ANR	5269621	UnaryOperator	!		5269615	0					
ANR	5269622	Identifier	str		5269615	1					
ANR	5269623	CompoundStatement		2:11:12:12	5269615	1					
ANR	5269624	ReturnStatement	return NULL ;	736:2:29923:29934	5269615	0	True				
ANR	5269625	Identifier	NULL		5269615	0					
ANR	5269626	IfStatement	if ( len < 0 )		5269615	1					
ANR	5269627	Condition	len < 0	738:5:29944:29950	5269615	0	True				
ANR	5269628	RelationalExpression	len < 0		5269615	0		<			
ANR	5269629	Identifier	len		5269615	0					
ANR	5269630	PrimaryExpression	0		5269615	1					
ANR	5269631	CompoundStatement		5:14:46:46	5269615	1					
ANR	5269632	ExpressionStatement	len = strlen ( ( const char * ) str )	739:2:29957:29989	5269615	0	True				
ANR	5269633	AssignmentExpression	len = strlen ( ( const char * ) str )		5269615	0		=			
ANR	5269634	Identifier	len		5269615	0					
ANR	5269635	CallExpression	strlen ( ( const char * ) str )		5269615	1					
ANR	5269636	Callee	strlen		5269615	0					
ANR	5269637	Identifier	strlen		5269615	0					
ANR	5269638	ArgumentList	( const char * ) str		5269615	1					
ANR	5269639	Argument	( const char * ) str		5269615	0					
ANR	5269640	CastExpression	( const char * ) str		5269615	0					
ANR	5269641	CastTarget	const char *		5269615	0					
ANR	5269642	Identifier	str		5269615	1					
ANR	5269643	Statement	static	741:1:29995:30000	5269615	2	True				
ANR	5269644	IdentifierDeclStatement	int block_freq [ r_utf_blocks_count ] = { 0 } ;	741:8:30002:30042	5269615	3	True				
ANR	5269645	IdentifierDecl	block_freq [ r_utf_blocks_count ] = { 0 }		5269615	0					
ANR	5269646	IdentifierDeclType	int [ r_utf_blocks_count ]		5269615	0					
ANR	5269647	Identifier	block_freq		5269615	1					
ANR	5269648	Identifier	r_utf_blocks_count		5269615	2					
ANR	5269649	AssignmentExpression	block_freq [ r_utf_blocks_count ] = { 0 }		5269615	3		=			
ANR	5269650	Identifier	r_utf_blocks_count		5269615	0					
ANR	5269651	InitializerList	0		5269615	1					
ANR	5269652	PrimaryExpression	0		5269615	0					
ANR	5269653	IdentifierDeclStatement	"int * list = R_NEWS ( int , len + 1 ) ;"	742:1:30045:30078	5269615	4	True				
ANR	5269654	IdentifierDecl	"* list = R_NEWS ( int , len + 1 )"		5269615	0					
ANR	5269655	IdentifierDeclType	int *		5269615	0					
ANR	5269656	Identifier	list		5269615	1					
ANR	5269657	AssignmentExpression	"* list = R_NEWS ( int , len + 1 )"		5269615	2		=			
ANR	5269658	Identifier	list		5269615	0					
ANR	5269659	CallExpression	"R_NEWS ( int , len + 1 )"		5269615	1					
ANR	5269660	Callee	R_NEWS		5269615	0					
ANR	5269661	Identifier	R_NEWS		5269615	0					
ANR	5269662	ArgumentList	int		5269615	1					
ANR	5269663	Argument	int		5269615	0					
ANR	5269664	Identifier	int		5269615	0					
ANR	5269665	Argument	len + 1		5269615	1					
ANR	5269666	AdditiveExpression	len + 1		5269615	0		+			
ANR	5269667	Identifier	len		5269615	0					
ANR	5269668	PrimaryExpression	1		5269615	1					
ANR	5269669	IfStatement	if ( ! list )		5269615	5					
ANR	5269670	Condition	! list	743:5:30085:30089	5269615	0	True				
ANR	5269671	UnaryOperationExpression	! list		5269615	0					
ANR	5269672	UnaryOperator	!		5269615	0					
ANR	5269673	Identifier	list		5269615	1					
ANR	5269674	CompoundStatement		10:12:185:185	5269615	1					
ANR	5269675	ReturnStatement	return NULL ;	744:2:30096:30107	5269615	0	True				
ANR	5269676	Identifier	NULL		5269615	0					
ANR	5269677	IdentifierDeclStatement	int * freq_list_ptr = NULL ;	746:1:30113:30138	5269615	6	True				
ANR	5269678	IdentifierDecl	* freq_list_ptr = NULL		5269615	0					
ANR	5269679	IdentifierDeclType	int *		5269615	0					
ANR	5269680	Identifier	freq_list_ptr		5269615	1					
ANR	5269681	AssignmentExpression	* freq_list_ptr = NULL		5269615	2		=			
ANR	5269682	Identifier	NULL		5269615	0					
ANR	5269683	Identifier	NULL		5269615	1					
ANR	5269684	IfStatement	if ( freq_list )		5269615	7					
ANR	5269685	Condition	freq_list	747:5:30145:30153	5269615	0	True				
ANR	5269686	Identifier	freq_list		5269615	0					
ANR	5269687	CompoundStatement		14:16:249:249	5269615	1					
ANR	5269688	ExpressionStatement	"* freq_list = R_NEWS ( int , len + 1 )"	748:2:30160:30194	5269615	0	True				
ANR	5269689	AssignmentExpression	"* freq_list = R_NEWS ( int , len + 1 )"		5269615	0		=			
ANR	5269690	UnaryOperationExpression	* freq_list		5269615	0					
ANR	5269691	UnaryOperator	*		5269615	0					
ANR	5269692	Identifier	freq_list		5269615	1					
ANR	5269693	CallExpression	"R_NEWS ( int , len + 1 )"		5269615	1					
ANR	5269694	Callee	R_NEWS		5269615	0					
ANR	5269695	Identifier	R_NEWS		5269615	0					
ANR	5269696	ArgumentList	int		5269615	1					
ANR	5269697	Argument	int		5269615	0					
ANR	5269698	Identifier	int		5269615	0					
ANR	5269699	Argument	len + 1		5269615	1					
ANR	5269700	AdditiveExpression	len + 1		5269615	0		+			
ANR	5269701	Identifier	len		5269615	0					
ANR	5269702	PrimaryExpression	1		5269615	1					
ANR	5269703	IfStatement	if ( ! * freq_list )		5269615	1					
ANR	5269704	Condition	! * freq_list	749:6:30202:30212	5269615	0	True				
ANR	5269705	UnaryOperationExpression	! * freq_list		5269615	0					
ANR	5269706	UnaryOperator	!		5269615	0					
ANR	5269707	UnaryOperationExpression	* freq_list		5269615	1					
ANR	5269708	UnaryOperator	*		5269615	0					
ANR	5269709	Identifier	freq_list		5269615	1					
ANR	5269710	CompoundStatement		16:19:308:308	5269615	1					
ANR	5269711	ReturnStatement	return NULL ;	750:3:30220:30231	5269615	0	True				
ANR	5269712	Identifier	NULL		5269615	0					
ANR	5269713	ExpressionStatement	freq_list_ptr = * freq_list	752:2:30239:30265	5269615	2	True				
ANR	5269714	AssignmentExpression	freq_list_ptr = * freq_list		5269615	0		=			
ANR	5269715	Identifier	freq_list_ptr		5269615	0					
ANR	5269716	UnaryOperationExpression	* freq_list		5269615	1					
ANR	5269717	UnaryOperator	*		5269615	0					
ANR	5269718	Identifier	freq_list		5269615	1					
ANR	5269719	IdentifierDeclStatement	int * list_ptr = list ;	754:1:30271:30291	5269615	8	True				
ANR	5269720	IdentifierDecl	* list_ptr = list		5269615	0					
ANR	5269721	IdentifierDeclType	int *		5269615	0					
ANR	5269722	Identifier	list_ptr		5269615	1					
ANR	5269723	AssignmentExpression	* list_ptr = list		5269615	2		=			
ANR	5269724	Identifier	list		5269615	0					
ANR	5269725	Identifier	list		5269615	1					
ANR	5269726	IdentifierDeclStatement	const ut8 * str_ptr = str ;	755:1:30294:30318	5269615	9	True				
ANR	5269727	IdentifierDecl	* str_ptr = str		5269615	0					
ANR	5269728	IdentifierDeclType	const ut8 *		5269615	0					
ANR	5269729	Identifier	str_ptr		5269615	1					
ANR	5269730	AssignmentExpression	* str_ptr = str		5269615	2		=			
ANR	5269731	Identifier	str		5269615	0					
ANR	5269732	Identifier	str		5269615	1					
ANR	5269733	IdentifierDeclStatement	const ut8 * str_end = str + len ;	756:1:30321:30351	5269615	10	True				
ANR	5269734	IdentifierDecl	* str_end = str + len		5269615	0					
ANR	5269735	IdentifierDeclType	const ut8 *		5269615	0					
ANR	5269736	Identifier	str_end		5269615	1					
ANR	5269737	AssignmentExpression	* str_end = str + len		5269615	2		=			
ANR	5269738	Identifier	str_end		5269615	0					
ANR	5269739	AdditiveExpression	str + len		5269615	1		+			
ANR	5269740	Identifier	str		5269615	0					
ANR	5269741	Identifier	len		5269615	1					
ANR	5269742	IdentifierDeclStatement	RRune ch ;	757:1:30354:30362	5269615	11	True				
ANR	5269743	IdentifierDecl	ch		5269615	0					
ANR	5269744	IdentifierDeclType	RRune		5269615	0					
ANR	5269745	Identifier	ch		5269615	1					
ANR	5269746	WhileStatement	while ( str_ptr < str_end )		5269615	12					
ANR	5269747	Condition	str_ptr < str_end	758:8:30372:30388	5269615	0	True				
ANR	5269748	RelationalExpression	str_ptr < str_end		5269615	0		<			
ANR	5269749	Identifier	str_ptr		5269615	0					
ANR	5269750	Identifier	str_end		5269615	1					
ANR	5269751	CompoundStatement		27:2:505:567	5269615	1					
ANR	5269752	IdentifierDeclStatement	int block_idx ;	759:2:30395:30408	5269615	0	True				
ANR	5269753	IdentifierDecl	block_idx		5269615	0					
ANR	5269754	IdentifierDeclType	int		5269615	0					
ANR	5269755	Identifier	block_idx		5269615	1					
ANR	5269756	IdentifierDeclStatement	"int ch_bytes = r_utf8_decode ( str_ptr , str_end - str_ptr , & ch ) ;"	760:2:30412:30474	5269615	1	True				
ANR	5269757	IdentifierDecl	"ch_bytes = r_utf8_decode ( str_ptr , str_end - str_ptr , & ch )"		5269615	0					
ANR	5269758	IdentifierDeclType	int		5269615	0					
ANR	5269759	Identifier	ch_bytes		5269615	1					
ANR	5269760	AssignmentExpression	"ch_bytes = r_utf8_decode ( str_ptr , str_end - str_ptr , & ch )"		5269615	2		=			
ANR	5269761	Identifier	ch_bytes		5269615	0					
ANR	5269762	CallExpression	"r_utf8_decode ( str_ptr , str_end - str_ptr , & ch )"		5269615	1					
ANR	5269763	Callee	r_utf8_decode		5269615	0					
ANR	5269764	Identifier	r_utf8_decode		5269615	0					
ANR	5269765	ArgumentList	str_ptr		5269615	1					
ANR	5269766	Argument	str_ptr		5269615	0					
ANR	5269767	Identifier	str_ptr		5269615	0					
ANR	5269768	Argument	str_end - str_ptr		5269615	1					
ANR	5269769	AdditiveExpression	str_end - str_ptr		5269615	0		-			
ANR	5269770	Identifier	str_end		5269615	0					
ANR	5269771	Identifier	str_ptr		5269615	1					
ANR	5269772	Argument	& ch		5269615	2					
ANR	5269773	UnaryOperationExpression	& ch		5269615	0					
ANR	5269774	UnaryOperator	&		5269615	0					
ANR	5269775	Identifier	ch		5269615	1					
ANR	5269776	IfStatement	if ( ! ch_bytes )		5269615	2					
ANR	5269777	Condition	! ch_bytes	761:6:30482:30490	5269615	0	True				
ANR	5269778	UnaryOperationExpression	! ch_bytes		5269615	0					
ANR	5269779	UnaryOperator	!		5269615	0					
ANR	5269780	Identifier	ch_bytes		5269615	1					
ANR	5269781	CompoundStatement		28:17:586:586	5269615	1					
ANR	5269782	ExpressionStatement	block_idx = r_utf_blocks_count - 1	762:3:30498:30532	5269615	0	True				
ANR	5269783	AssignmentExpression	block_idx = r_utf_blocks_count - 1		5269615	0		=			
ANR	5269784	Identifier	block_idx		5269615	0					
ANR	5269785	AdditiveExpression	r_utf_blocks_count - 1		5269615	1		-			
ANR	5269786	Identifier	r_utf_blocks_count		5269615	0					
ANR	5269787	PrimaryExpression	1		5269615	1					
ANR	5269788	ExpressionStatement	ch_bytes = 1	763:3:30537:30549	5269615	1	True				
ANR	5269789	AssignmentExpression	ch_bytes = 1		5269615	0		=			
ANR	5269790	Identifier	ch_bytes		5269615	0					
ANR	5269791	PrimaryExpression	1		5269615	1					
ANR	5269792	ElseStatement	else		5269615	0					
ANR	5269793	CompoundStatement		31:9:653:653	5269615	0					
ANR	5269794	ExpressionStatement	block_idx = r_utf_block_idx ( ch )	765:3:30565:30597	5269615	0	True				
ANR	5269795	AssignmentExpression	block_idx = r_utf_block_idx ( ch )		5269615	0		=			
ANR	5269796	Identifier	block_idx		5269615	0					
ANR	5269797	CallExpression	r_utf_block_idx ( ch )		5269615	1					
ANR	5269798	Callee	r_utf_block_idx		5269615	0					
ANR	5269799	Identifier	r_utf_block_idx		5269615	0					
ANR	5269800	ArgumentList	ch		5269615	1					
ANR	5269801	Argument	ch		5269615	0					
ANR	5269802	Identifier	ch		5269615	0					
ANR	5269803	IfStatement	if ( ! block_freq [ block_idx ] )		5269615	3					
ANR	5269804	Condition	! block_freq [ block_idx ]	767:6:30609:30630	5269615	0	True				
ANR	5269805	UnaryOperationExpression	! block_freq [ block_idx ]		5269615	0					
ANR	5269806	UnaryOperator	!		5269615	0					
ANR	5269807	ArrayIndexing	block_freq [ block_idx ]		5269615	1					
ANR	5269808	Identifier	block_freq		5269615	0					
ANR	5269809	Identifier	block_idx		5269615	1					
ANR	5269810	CompoundStatement		34:30:726:726	5269615	1					
ANR	5269811	ExpressionStatement	* list_ptr = block_idx	768:3:30638:30659	5269615	0	True				
ANR	5269812	AssignmentExpression	* list_ptr = block_idx		5269615	0		=			
ANR	5269813	UnaryOperationExpression	* list_ptr		5269615	0					
ANR	5269814	UnaryOperator	*		5269615	0					
ANR	5269815	Identifier	list_ptr		5269615	1					
ANR	5269816	Identifier	block_idx		5269615	1					
ANR	5269817	ExpressionStatement	list_ptr ++	769:3:30664:30674	5269615	1	True				
ANR	5269818	PostIncDecOperationExpression	list_ptr ++		5269615	0					
ANR	5269819	Identifier	list_ptr		5269615	0					
ANR	5269820	IncDec	++		5269615	1					
ANR	5269821	ExpressionStatement	block_freq [ block_idx ] ++	771:2:30682:30705	5269615	4	True				
ANR	5269822	PostIncDecOperationExpression	block_freq [ block_idx ] ++		5269615	0					
ANR	5269823	ArrayIndexing	block_freq [ block_idx ]		5269615	0					
ANR	5269824	Identifier	block_freq		5269615	0					
ANR	5269825	Identifier	block_idx		5269615	1					
ANR	5269826	IncDec	++		5269615	1					
ANR	5269827	ExpressionStatement	str_ptr += ch_bytes	772:2:30709:30728	5269615	5	True				
ANR	5269828	AssignmentExpression	str_ptr += ch_bytes		5269615	0		+=			
ANR	5269829	Identifier	str_ptr		5269615	0					
ANR	5269830	Identifier	ch_bytes		5269615	1					
ANR	5269831	ExpressionStatement	* list_ptr = - 1	774:1:30734:30748	5269615	13	True				
ANR	5269832	AssignmentExpression	* list_ptr = - 1		5269615	0		=			
ANR	5269833	UnaryOperationExpression	* list_ptr		5269615	0					
ANR	5269834	UnaryOperator	*		5269615	0					
ANR	5269835	Identifier	list_ptr		5269615	1					
ANR	5269836	UnaryOperationExpression	- 1		5269615	1					
ANR	5269837	UnaryOperator	-		5269615	0					
ANR	5269838	PrimaryExpression	1		5269615	1					
ANR	5269839	IfStatement	if ( freq_list_ptr )		5269615	14					
ANR	5269840	Condition	freq_list_ptr	775:5:30755:30767	5269615	0	True				
ANR	5269841	Identifier	freq_list_ptr		5269615	0					
ANR	5269842	CompoundStatement		42:20:863:863	5269615	1					
ANR	5269843	ForStatement	for ( list_ptr = list ; * list_ptr != - 1 ; list_ptr ++ )		5269615	0					
ANR	5269844	ForInit	list_ptr = list ;	776:7:30779:30794	5269615	0	True				
ANR	5269845	AssignmentExpression	list_ptr = list		5269615	0		=			
ANR	5269846	Identifier	list_ptr		5269615	0					
ANR	5269847	Identifier	list		5269615	1					
ANR	5269848	Condition	* list_ptr != - 1	776:24:30796:30810	5269615	1	True				
ANR	5269849	EqualityExpression	* list_ptr != - 1		5269615	0		!=			
ANR	5269850	UnaryOperationExpression	* list_ptr		5269615	0					
ANR	5269851	UnaryOperator	*		5269615	0					
ANR	5269852	Identifier	list_ptr		5269615	1					
ANR	5269853	UnaryOperationExpression	- 1		5269615	1					
ANR	5269854	UnaryOperator	-		5269615	0					
ANR	5269855	PrimaryExpression	1		5269615	1					
ANR	5269856	PostIncDecOperationExpression	list_ptr ++	776:41:30813:30822	5269615	2	True				
ANR	5269857	Identifier	list_ptr		5269615	0					
ANR	5269858	IncDec	++		5269615	1					
ANR	5269859	CompoundStatement		43:53:918:918	5269615	3					
ANR	5269860	ExpressionStatement	* freq_list_ptr = block_freq [ * list_ptr ]	777:3:30830:30868	5269615	0	True				
ANR	5269861	AssignmentExpression	* freq_list_ptr = block_freq [ * list_ptr ]		5269615	0		=			
ANR	5269862	UnaryOperationExpression	* freq_list_ptr		5269615	0					
ANR	5269863	UnaryOperator	*		5269615	0					
ANR	5269864	Identifier	freq_list_ptr		5269615	1					
ANR	5269865	ArrayIndexing	block_freq [ * list_ptr ]		5269615	1					
ANR	5269866	Identifier	block_freq		5269615	0					
ANR	5269867	UnaryOperationExpression	* list_ptr		5269615	1					
ANR	5269868	UnaryOperator	*		5269615	0					
ANR	5269869	Identifier	list_ptr		5269615	1					
ANR	5269870	ExpressionStatement	freq_list_ptr ++	778:3:30873:30888	5269615	1	True				
ANR	5269871	PostIncDecOperationExpression	freq_list_ptr ++		5269615	0					
ANR	5269872	Identifier	freq_list_ptr		5269615	0					
ANR	5269873	IncDec	++		5269615	1					
ANR	5269874	ExpressionStatement	* freq_list_ptr = - 1	780:2:30896:30915	5269615	1	True				
ANR	5269875	AssignmentExpression	* freq_list_ptr = - 1		5269615	0		=			
ANR	5269876	UnaryOperationExpression	* freq_list_ptr		5269615	0					
ANR	5269877	UnaryOperator	*		5269615	0					
ANR	5269878	Identifier	freq_list_ptr		5269615	1					
ANR	5269879	UnaryOperationExpression	- 1		5269615	1					
ANR	5269880	UnaryOperator	-		5269615	0					
ANR	5269881	PrimaryExpression	1		5269615	1					
ANR	5269882	ForStatement	for ( list_ptr = list ; * list_ptr != - 1 ; list_ptr ++ )		5269615	15					
ANR	5269883	ForInit	list_ptr = list ;	782:6:30926:30941	5269615	0	True				
ANR	5269884	AssignmentExpression	list_ptr = list		5269615	0		=			
ANR	5269885	Identifier	list_ptr		5269615	0					
ANR	5269886	Identifier	list		5269615	1					
ANR	5269887	Condition	* list_ptr != - 1	782:23:30943:30957	5269615	1	True				
ANR	5269888	EqualityExpression	* list_ptr != - 1		5269615	0		!=			
ANR	5269889	UnaryOperationExpression	* list_ptr		5269615	0					
ANR	5269890	UnaryOperator	*		5269615	0					
ANR	5269891	Identifier	list_ptr		5269615	1					
ANR	5269892	UnaryOperationExpression	- 1		5269615	1					
ANR	5269893	UnaryOperator	-		5269615	0					
ANR	5269894	PrimaryExpression	1		5269615	1					
ANR	5269895	PostIncDecOperationExpression	list_ptr ++	782:40:30960:30969	5269615	2	True				
ANR	5269896	Identifier	list_ptr		5269615	0					
ANR	5269897	IncDec	++		5269615	1					
ANR	5269898	CompoundStatement		49:52:1065:1065	5269615	3					
ANR	5269899	ExpressionStatement	block_freq [ * list_ptr ] = 0	783:2:30976:31001	5269615	0	True				
ANR	5269900	AssignmentExpression	block_freq [ * list_ptr ] = 0		5269615	0		=			
ANR	5269901	ArrayIndexing	block_freq [ * list_ptr ]		5269615	0					
ANR	5269902	Identifier	block_freq		5269615	0					
ANR	5269903	UnaryOperationExpression	* list_ptr		5269615	1					
ANR	5269904	UnaryOperator	*		5269615	0					
ANR	5269905	Identifier	list_ptr		5269615	1					
ANR	5269906	PrimaryExpression	0		5269615	1					
ANR	5269907	ReturnStatement	return list ;	785:1:31007:31018	5269615	16	True				
ANR	5269908	Identifier	list		5269615	0					
ANR	5269909	ReturnType	R_API int *		5269615	1					
ANR	5269910	Identifier	r_utf_block_list		5269615	2					
ANR	5269911	ParameterList	"const ut8 * str , int len , int * * freq_list"		5269615	3					
ANR	5269912	Parameter	const ut8 * str	734:28:29864:29877	5269615	0	True				
ANR	5269913	ParameterType	const ut8 *		5269615	0					
ANR	5269914	Identifier	str		5269615	1					
ANR	5269915	Parameter	int len	734:44:29880:29886	5269615	1	True				
ANR	5269916	ParameterType	int		5269615	0					
ANR	5269917	Identifier	len		5269615	1					
ANR	5269918	Parameter	int * * freq_list	734:53:29889:29903	5269615	2	True				
ANR	5269919	ParameterType	int * *		5269615	0					
ANR	5269920	Identifier	freq_list		5269615	1					
ANR	5269921	CFGEntryNode	ENTRY		5269615		True				
ANR	5269922	CFGExitNode	EXIT		5269615		True				
ANR	5269923	Symbol	block_freq		5269615						
ANR	5269924	Symbol	* block_freq		5269615						
ANR	5269925	Symbol	r_utf8_decode		5269615						
ANR	5269926	Symbol	ch_bytes		5269615						
ANR	5269927	Symbol	block_idx		5269615						
ANR	5269928	Symbol	& ch		5269615						
ANR	5269929	Symbol	strlen		5269615						
ANR	5269930	Symbol	len		5269615						
ANR	5269931	Symbol	* list_ptr		5269615						
ANR	5269932	Symbol	* freq_list		5269615						
ANR	5269933	Symbol	str_end		5269615						
ANR	5269934	Symbol	freq_list_ptr		5269615						
ANR	5269935	Symbol	NULL		5269615						
ANR	5269936	Symbol	freq_list		5269615						
ANR	5269937	Symbol	ch		5269615						
ANR	5269938	Symbol	list		5269615						
ANR	5269939	Symbol	R_NEWS		5269615						
ANR	5269940	Symbol	* block_idx		5269615						
ANR	5269941	Symbol	int		5269615						
ANR	5269942	Symbol	r_utf_block_idx		5269615						
ANR	5269943	Symbol	str		5269615						
ANR	5269944	Symbol	str_ptr		5269615						
ANR	5269945	Symbol	* freq_list_ptr		5269615						
ANR	5269946	Symbol	r_utf_blocks_count		5269615						
ANR	5269947	Symbol	* * list_ptr		5269615						
ANR	5269948	Symbol	list_ptr		5269615						
