command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5672134	File	data/converged/CVE-2019-16718~_radare2/radiff2.c								
ANR	5672135	ClassDef	<unnamed>	14:0:240:385							
ANR	5672136	ClassDef	<unnamed>	26:0:389:631							
ANR	5672137	DeclStmt									
ANR	5672138	Decl							bool	bool	zignatures
ANR	5672139	DeclStmt									
ANR	5672140	Decl							char	char *	file
ANR	5672141	DeclStmt									
ANR	5672142	Decl							char	char *	file2
ANR	5672143	DeclStmt									
ANR	5672144	Decl							ut32	ut32	count
ANR	5672145	DeclStmt									
ANR	5672146	Decl							int	int	showcount
ANR	5672147	DeclStmt									
ANR	5672148	Decl							int	int	useva
ANR	5672149	DeclStmt									
ANR	5672150	Decl							int	int	delta
ANR	5672151	DeclStmt									
ANR	5672152	Decl							int	int	showbare
ANR	5672153	DeclStmt									
ANR	5672154	Decl							int	int	json_started
ANR	5672155	DeclStmt									
ANR	5672156	Decl							int	int	diffmode
ANR	5672157	DeclStmt									
ANR	5672158	Decl							bool	bool	disasm
ANR	5672159	DeclStmt									
ANR	5672160	Decl							bool	bool	pdc
ANR	5672161	DeclStmt									
ANR	5672162	Decl							bool	bool	quiet
ANR	5672163	DeclStmt									
ANR	5672164	Decl							RCore	RCore *	core
ANR	5672165	DeclStmt									
ANR	5672166	Decl							const char	const char *	arch
ANR	5672167	DeclStmt									
ANR	5672168	Decl							const char	const char *	runcmd
ANR	5672169	DeclStmt									
ANR	5672170	Decl							int	int	bits
ANR	5672171	DeclStmt									
ANR	5672172	Decl							int	int	anal_all
ANR	5672173	DeclStmt									
ANR	5672174	Decl							bool	bool	verbose
ANR	5672175	DeclStmt									
ANR	5672176	Decl							RList	RList *	evals
ANR	5672177	Function	opencore	59:0:1169:2339							
ANR	5672178	FunctionDef	opencore (const char * f)		5672177	0					
ANR	5672179	CompoundStatement		59:38:1207:2339	5672177	0					
ANR	5672180	IdentifierDeclStatement	RListIter * iter ;	60:1:1210:1225	5672177	0	True				
ANR	5672181	IdentifierDecl	* iter		5672177	0					
ANR	5672182	IdentifierDeclType	RListIter *		5672177	0					
ANR	5672183	Identifier	iter		5672177	1					
ANR	5672184	IdentifierDeclStatement	const ut64 baddr = UT64_MAX ;	61:1:1228:1255	5672177	1	True				
ANR	5672185	IdentifierDecl	baddr = UT64_MAX		5672177	0					
ANR	5672186	IdentifierDeclType	const ut64		5672177	0					
ANR	5672187	Identifier	baddr		5672177	1					
ANR	5672188	AssignmentExpression	baddr = UT64_MAX		5672177	2		=			
ANR	5672189	Identifier	UT64_MAX		5672177	0					
ANR	5672190	Identifier	UT64_MAX		5672177	1					
ANR	5672191	IdentifierDeclStatement	const char * e ;	62:1:1258:1271	5672177	2	True				
ANR	5672192	IdentifierDecl	* e		5672177	0					
ANR	5672193	IdentifierDeclType	const char *		5672177	0					
ANR	5672194	Identifier	e		5672177	1					
ANR	5672195	IdentifierDeclStatement	RCore * c = r_core_new ( ) ;	63:1:1274:1298	5672177	3	True				
ANR	5672196	IdentifierDecl	* c = r_core_new ( )		5672177	0					
ANR	5672197	IdentifierDeclType	RCore *		5672177	0					
ANR	5672198	Identifier	c		5672177	1					
ANR	5672199	AssignmentExpression	* c = r_core_new ( )		5672177	2		=			
ANR	5672200	Identifier	c		5672177	0					
ANR	5672201	CallExpression	r_core_new ( )		5672177	1					
ANR	5672202	Callee	r_core_new		5672177	0					
ANR	5672203	Identifier	r_core_new		5672177	0					
ANR	5672204	ArgumentList			5672177	1					
ANR	5672205	IfStatement	if ( ! c )		5672177	4					
ANR	5672206	Condition	! c	64:5:1305:1306	5672177	0	True				
ANR	5672207	UnaryOperationExpression	! c		5672177	0					
ANR	5672208	UnaryOperator	!		5672177	0					
ANR	5672209	Identifier	c		5672177	1					
ANR	5672210	CompoundStatement		6:9:101:101	5672177	1					
ANR	5672211	ReturnStatement	return NULL ;	65:2:1313:1324	5672177	0	True				
ANR	5672212	Identifier	NULL		5672177	0					
ANR	5672213	ExpressionStatement	"r_core_loadlibs ( c , R_CORE_LOADLIBS_ALL , NULL )"	67:1:1330:1376	5672177	5	True				
ANR	5672214	CallExpression	"r_core_loadlibs ( c , R_CORE_LOADLIBS_ALL , NULL )"		5672177	0					
ANR	5672215	Callee	r_core_loadlibs		5672177	0					
ANR	5672216	Identifier	r_core_loadlibs		5672177	0					
ANR	5672217	ArgumentList	c		5672177	1					
ANR	5672218	Argument	c		5672177	0					
ANR	5672219	Identifier	c		5672177	0					
ANR	5672220	Argument	R_CORE_LOADLIBS_ALL		5672177	1					
ANR	5672221	Identifier	R_CORE_LOADLIBS_ALL		5672177	0					
ANR	5672222	Argument	NULL		5672177	2					
ANR	5672223	Identifier	NULL		5672177	0					
ANR	5672224	ExpressionStatement	"r_config_set_i ( c -> config , ""io.va"" , useva )"	68:1:1379:1421	5672177	6	True				
ANR	5672225	CallExpression	"r_config_set_i ( c -> config , ""io.va"" , useva )"		5672177	0					
ANR	5672226	Callee	r_config_set_i		5672177	0					
ANR	5672227	Identifier	r_config_set_i		5672177	0					
ANR	5672228	ArgumentList	c -> config		5672177	1					
ANR	5672229	Argument	c -> config		5672177	0					
ANR	5672230	PtrMemberAccess	c -> config		5672177	0					
ANR	5672231	Identifier	c		5672177	0					
ANR	5672232	Identifier	config		5672177	1					
ANR	5672233	Argument	"""io.va"""		5672177	1					
ANR	5672234	PrimaryExpression	"""io.va"""		5672177	0					
ANR	5672235	Argument	useva		5672177	2					
ANR	5672236	Identifier	useva		5672177	0					
ANR	5672237	ExpressionStatement	"r_config_set_i ( c -> config , ""scr.interactive"" , false )"	69:1:1424:1476	5672177	7	True				
ANR	5672238	CallExpression	"r_config_set_i ( c -> config , ""scr.interactive"" , false )"		5672177	0					
ANR	5672239	Callee	r_config_set_i		5672177	0					
ANR	5672240	Identifier	r_config_set_i		5672177	0					
ANR	5672241	ArgumentList	c -> config		5672177	1					
ANR	5672242	Argument	c -> config		5672177	0					
ANR	5672243	PtrMemberAccess	c -> config		5672177	0					
ANR	5672244	Identifier	c		5672177	0					
ANR	5672245	Identifier	config		5672177	1					
ANR	5672246	Argument	"""scr.interactive"""		5672177	1					
ANR	5672247	PrimaryExpression	"""scr.interactive"""		5672177	0					
ANR	5672248	Argument	false		5672177	2					
ANR	5672249	Identifier	false		5672177	0					
ANR	5672250	Statement	r_list_foreach	70:1:1479:1492	5672177	8	True				
ANR	5672251	Statement	(	70:16:1494:1494	5672177	9	True				
ANR	5672252	Statement	evals	70:17:1495:1499	5672177	10	True				
ANR	5672253	Statement	","	70:22:1500:1500	5672177	11	True				
ANR	5672254	Statement	iter	70:24:1502:1505	5672177	12	True				
ANR	5672255	Statement	","	70:28:1506:1506	5672177	13	True				
ANR	5672256	Statement	e	70:30:1508:1508	5672177	14	True				
ANR	5672257	Statement	)	70:31:1509:1509	5672177	15	True				
ANR	5672258	CompoundStatement		12:33:303:303	5672177	16					
ANR	5672259	ExpressionStatement	"r_config_eval ( c -> config , e , false )"	71:2:1515:1550	5672177	0	True				
ANR	5672260	CallExpression	"r_config_eval ( c -> config , e , false )"		5672177	0					
ANR	5672261	Callee	r_config_eval		5672177	0					
ANR	5672262	Identifier	r_config_eval		5672177	0					
ANR	5672263	ArgumentList	c -> config		5672177	1					
ANR	5672264	Argument	c -> config		5672177	0					
ANR	5672265	PtrMemberAccess	c -> config		5672177	0					
ANR	5672266	Identifier	c		5672177	0					
ANR	5672267	Identifier	config		5672177	1					
ANR	5672268	Argument	e		5672177	1					
ANR	5672269	Identifier	e		5672177	0					
ANR	5672270	Argument	false		5672177	2					
ANR	5672271	Identifier	false		5672177	0					
ANR	5672272	IfStatement	if ( f )		5672177	17					
ANR	5672273	Condition	f	73:5:1560:1560	5672177	0	True				
ANR	5672274	Identifier	f		5672177	0					
ANR	5672275	CompoundStatement		15:8:355:355	5672177	1					
ANR	5672276	ExpressionStatement	f = r_acp_to_utf8 ( f )	75:2:1583:1604	5672177	0	True				
ANR	5672277	AssignmentExpression	f = r_acp_to_utf8 ( f )		5672177	0		=			
ANR	5672278	Identifier	f		5672177	0					
ANR	5672279	CallExpression	r_acp_to_utf8 ( f )		5672177	1					
ANR	5672280	Callee	r_acp_to_utf8		5672177	0					
ANR	5672281	Identifier	r_acp_to_utf8		5672177	0					
ANR	5672282	ArgumentList	f		5672177	1					
ANR	5672283	Argument	f		5672177	0					
ANR	5672284	Identifier	f		5672177	0					
ANR	5672285	IfStatement	"if ( ! r_core_file_open ( c , f , 0 , 0 ) )"		5672177	1					
ANR	5672286	Condition	"! r_core_file_open ( c , f , 0 , 0 )"	77:6:1619:1648	5672177	0	True				
ANR	5672287	UnaryOperationExpression	"! r_core_file_open ( c , f , 0 , 0 )"		5672177	0					
ANR	5672288	UnaryOperator	!		5672177	0					
ANR	5672289	CallExpression	"r_core_file_open ( c , f , 0 , 0 )"		5672177	1					
ANR	5672290	Callee	r_core_file_open		5672177	0					
ANR	5672291	Identifier	r_core_file_open		5672177	0					
ANR	5672292	ArgumentList	c		5672177	1					
ANR	5672293	Argument	c		5672177	0					
ANR	5672294	Identifier	c		5672177	0					
ANR	5672295	Argument	f		5672177	1					
ANR	5672296	Identifier	f		5672177	0					
ANR	5672297	Argument	0		5672177	2					
ANR	5672298	PrimaryExpression	0		5672177	0					
ANR	5672299	Argument	0		5672177	3					
ANR	5672300	PrimaryExpression	0		5672177	0					
ANR	5672301	CompoundStatement		19:38:443:443	5672177	1					
ANR	5672302	ExpressionStatement	r_core_free ( c )	78:3:1656:1671	5672177	0	True				
ANR	5672303	CallExpression	r_core_free ( c )		5672177	0					
ANR	5672304	Callee	r_core_free		5672177	0					
ANR	5672305	Identifier	r_core_free		5672177	0					
ANR	5672306	ArgumentList	c		5672177	1					
ANR	5672307	Argument	c		5672177	0					
ANR	5672308	Identifier	c		5672177	0					
ANR	5672309	ReturnStatement	return NULL ;	79:3:1676:1687	5672177	1	True				
ANR	5672310	Identifier	NULL		5672177	0					
ANR	5672311	ExpressionStatement	"( void ) r_core_bin_load ( c , NULL , baddr )"	81:2:1695:1734	5672177	2	True				
ANR	5672312	CastExpression	"( void ) r_core_bin_load ( c , NULL , baddr )"		5672177	0					
ANR	5672313	CastTarget	void		5672177	0					
ANR	5672314	CallExpression	"r_core_bin_load ( c , NULL , baddr )"		5672177	1					
ANR	5672315	Callee	r_core_bin_load		5672177	0					
ANR	5672316	Identifier	r_core_bin_load		5672177	0					
ANR	5672317	ArgumentList	c		5672177	1					
ANR	5672318	Argument	c		5672177	0					
ANR	5672319	Identifier	c		5672177	0					
ANR	5672320	Argument	NULL		5672177	1					
ANR	5672321	Identifier	NULL		5672177	0					
ANR	5672322	Argument	baddr		5672177	2					
ANR	5672323	Identifier	baddr		5672177	0					
ANR	5672324	ExpressionStatement	( void ) r_core_bin_update_arch_bits ( c )	82:2:1738:1776	5672177	3	True				
ANR	5672325	CastExpression	( void ) r_core_bin_update_arch_bits ( c )		5672177	0					
ANR	5672326	CastTarget	void		5672177	0					
ANR	5672327	CallExpression	r_core_bin_update_arch_bits ( c )		5672177	1					
ANR	5672328	Callee	r_core_bin_update_arch_bits		5672177	0					
ANR	5672329	Identifier	r_core_bin_update_arch_bits		5672177	0					
ANR	5672330	ArgumentList	c		5672177	1					
ANR	5672331	Argument	c		5672177	0					
ANR	5672332	Identifier	c		5672177	0					
ANR	5672333	IfStatement	if ( r_list_empty ( r_bin_get_sections ( c -> bin ) ) )		5672177	4					
ANR	5672334	Condition	r_list_empty ( r_bin_get_sections ( c -> bin ) )	85:6:1831:1872	5672177	0	True				
ANR	5672335	CallExpression	r_list_empty ( r_bin_get_sections ( c -> bin ) )		5672177	0					
ANR	5672336	Callee	r_list_empty		5672177	0					
ANR	5672337	Identifier	r_list_empty		5672177	0					
ANR	5672338	ArgumentList	r_bin_get_sections ( c -> bin )		5672177	1					
ANR	5672339	Argument	r_bin_get_sections ( c -> bin )		5672177	0					
ANR	5672340	CallExpression	r_bin_get_sections ( c -> bin )		5672177	0					
ANR	5672341	Callee	r_bin_get_sections		5672177	0					
ANR	5672342	Identifier	r_bin_get_sections		5672177	0					
ANR	5672343	ArgumentList	c -> bin		5672177	1					
ANR	5672344	Argument	c -> bin		5672177	0					
ANR	5672345	PtrMemberAccess	c -> bin		5672177	0					
ANR	5672346	Identifier	c		5672177	0					
ANR	5672347	Identifier	bin		5672177	1					
ANR	5672348	CompoundStatement		27:50:667:667	5672177	1					
ANR	5672349	ExpressionStatement	"r_config_set_i ( c -> config , ""io.va"" , false )"	86:3:1880:1922	5672177	0	True				
ANR	5672350	CallExpression	"r_config_set_i ( c -> config , ""io.va"" , false )"		5672177	0					
ANR	5672351	Callee	r_config_set_i		5672177	0					
ANR	5672352	Identifier	r_config_set_i		5672177	0					
ANR	5672353	ArgumentList	c -> config		5672177	1					
ANR	5672354	Argument	c -> config		5672177	0					
ANR	5672355	PtrMemberAccess	c -> config		5672177	0					
ANR	5672356	Identifier	c		5672177	0					
ANR	5672357	Identifier	config		5672177	1					
ANR	5672358	Argument	"""io.va"""		5672177	1					
ANR	5672359	PrimaryExpression	"""io.va"""		5672177	0					
ANR	5672360	Argument	false		5672177	2					
ANR	5672361	Identifier	false		5672177	0					
ANR	5672362	IfStatement	if ( anal_all )		5672177	5					
ANR	5672363	Condition	anal_all	89:6:1935:1942	5672177	0	True				
ANR	5672364	Identifier	anal_all		5672177	0					
ANR	5672365	CompoundStatement		32:3:742:765	5672177	1					
ANR	5672366	IdentifierDeclStatement	"const char * cmd = ""aac"" ;"	90:3:1950:1973	5672177	0	True				
ANR	5672367	IdentifierDecl	"* cmd = ""aac"""		5672177	0					
ANR	5672368	IdentifierDeclType	const char *		5672177	0					
ANR	5672369	Identifier	cmd		5672177	1					
ANR	5672370	AssignmentExpression	"* cmd = ""aac"""		5672177	2		=			
ANR	5672371	Identifier	cmd		5672177	0					
ANR	5672372	PrimaryExpression	"""aac"""		5672177	1					
ANR	5672373	SwitchStatement	switch ( anal_all )		5672177	1					
ANR	5672374	Condition	anal_all	91:11:1986:1993	5672177	0	True				
ANR	5672375	Identifier	anal_all		5672177	0					
ANR	5672376	CompoundStatement		33:21:788:788	5672177	1					
ANR	5672377	Label	case 1 :	92:3:2001:2007	5672177	0	True				
ANR	5672378	ExpressionStatement	"cmd = ""aaa"""	92:11:2009:2020	5672177	1	True				
ANR	5672379	AssignmentExpression	"cmd = ""aaa"""		5672177	0		=			
ANR	5672380	Identifier	cmd		5672177	0					
ANR	5672381	PrimaryExpression	"""aaa"""		5672177	1					
ANR	5672382	BreakStatement	break ;	92:24:2022:2027	5672177	2	True				
ANR	5672383	Label	case 2 :	93:3:2032:2038	5672177	3	True				
ANR	5672384	ExpressionStatement	"cmd = ""aaaa"""	93:11:2040:2052	5672177	4	True				
ANR	5672385	AssignmentExpression	"cmd = ""aaaa"""		5672177	0		=			
ANR	5672386	Identifier	cmd		5672177	0					
ANR	5672387	PrimaryExpression	"""aaaa"""		5672177	1					
ANR	5672388	BreakStatement	break ;	93:25:2054:2059	5672177	5	True				
ANR	5672389	ExpressionStatement	"r_core_cmd0 ( c , cmd )"	95:3:2069:2089	5672177	2	True				
ANR	5672390	CallExpression	"r_core_cmd0 ( c , cmd )"		5672177	0					
ANR	5672391	Callee	r_core_cmd0		5672177	0					
ANR	5672392	Identifier	r_core_cmd0		5672177	0					
ANR	5672393	ArgumentList	c		5672177	1					
ANR	5672394	Argument	c		5672177	0					
ANR	5672395	Identifier	c		5672177	0					
ANR	5672396	Argument	cmd		5672177	1					
ANR	5672397	Identifier	cmd		5672177	0					
ANR	5672398	IfStatement	if ( runcmd )		5672177	6					
ANR	5672399	Condition	runcmd	97:6:2101:2106	5672177	0	True				
ANR	5672400	Identifier	runcmd		5672177	0					
ANR	5672401	CompoundStatement		39:14:901:901	5672177	1					
ANR	5672402	ExpressionStatement	"r_core_cmd0 ( c , runcmd )"	98:3:2114:2137	5672177	0	True				
ANR	5672403	CallExpression	"r_core_cmd0 ( c , runcmd )"		5672177	0					
ANR	5672404	Callee	r_core_cmd0		5672177	0					
ANR	5672405	Identifier	r_core_cmd0		5672177	0					
ANR	5672406	ArgumentList	c		5672177	1					
ANR	5672407	Argument	c		5672177	0					
ANR	5672408	Identifier	c		5672177	0					
ANR	5672409	Argument	runcmd		5672177	1					
ANR	5672410	Identifier	runcmd		5672177	0					
ANR	5672411	IfStatement	if ( zignatures )		5672177	7					
ANR	5672412	Condition	zignatures	101:6:2175:2184	5672177	0	True				
ANR	5672413	Identifier	zignatures		5672177	0					
ANR	5672414	CompoundStatement		43:18:979:979	5672177	1					
ANR	5672415	ExpressionStatement	"r_core_cmd0 ( c , ""zg"" )"	102:3:2192:2213	5672177	0	True				
ANR	5672416	CallExpression	"r_core_cmd0 ( c , ""zg"" )"		5672177	0					
ANR	5672417	Callee	r_core_cmd0		5672177	0					
ANR	5672418	Identifier	r_core_cmd0		5672177	0					
ANR	5672419	ArgumentList	c		5672177	1					
ANR	5672420	Argument	c		5672177	0					
ANR	5672421	Identifier	c		5672177	0					
ANR	5672422	Argument	"""zg"""		5672177	1					
ANR	5672423	PrimaryExpression	"""zg"""		5672177	0					
ANR	5672424	ExpressionStatement	r_cons_flush ( )	104:2:2221:2236	5672177	8	True				
ANR	5672425	CallExpression	r_cons_flush ( )		5672177	0					
ANR	5672426	Callee	r_cons_flush		5672177	0					
ANR	5672427	Identifier	r_cons_flush		5672177	0					
ANR	5672428	ArgumentList			5672177	1					
ANR	5672429	ReturnStatement	return c ;	107:1:2329:2337	5672177	18	True				
ANR	5672430	Identifier	c		5672177	0					
ANR	5672431	ReturnType	static RCore *		5672177	1					
ANR	5672432	Identifier	opencore		5672177	2					
ANR	5672433	ParameterList	const char * f		5672177	3					
ANR	5672434	Parameter	const char * f	59:23:1192:1204	5672177	0	True				
ANR	5672435	ParameterType	const char *		5672177	0					
ANR	5672436	Identifier	f		5672177	1					
ANR	5672437	CFGEntryNode	ENTRY		5672177		True				
ANR	5672438	CFGExitNode	EXIT		5672177		True				
ANR	5672439	Symbol	baddr		5672177						
ANR	5672440	Symbol	c -> config		5672177						
ANR	5672441	Symbol	c		5672177						
ANR	5672442	Symbol	NULL		5672177						
ANR	5672443	Symbol	runcmd		5672177						
ANR	5672444	Symbol	zignatures		5672177						
ANR	5672445	Symbol	e		5672177						
ANR	5672446	Symbol	f		5672177						
ANR	5672447	Symbol	false		5672177						
ANR	5672448	Symbol	iter		5672177						
ANR	5672449	Symbol	c -> bin		5672177						
ANR	5672450	Symbol	r_core_new		5672177						
ANR	5672451	Symbol	r_core_file_open		5672177						
ANR	5672452	Symbol	* c		5672177						
ANR	5672453	Symbol	useva		5672177						
ANR	5672454	Symbol	r_acp_to_utf8		5672177						
ANR	5672455	Symbol	R_CORE_LOADLIBS_ALL		5672177						
ANR	5672456	Symbol	r_list_empty		5672177						
ANR	5672457	Symbol	cmd		5672177						
ANR	5672458	Symbol	UT64_MAX		5672177						
ANR	5672459	Symbol	r_bin_get_sections		5672177						
ANR	5672460	Symbol	anal_all		5672177						
ANR	5672461	Function	readstr	110:0:2342:2562							
ANR	5672462	FunctionDef	"readstr (char * s , int sz , const ut8 * buf , int len)"		5672461	0					
ANR	5672463	CompoundStatement		110:62:2404:2562	5672461	0					
ANR	5672464	ExpressionStatement	* s = 0	111:1:2407:2413	5672461	0	True				
ANR	5672465	AssignmentExpression	* s = 0		5672461	0		=			
ANR	5672466	UnaryOperationExpression	* s		5672461	0					
ANR	5672467	UnaryOperator	*		5672461	0					
ANR	5672468	Identifier	s		5672461	1					
ANR	5672469	PrimaryExpression	0		5672461	1					
ANR	5672470	IdentifierDeclStatement	"int last = R_MIN ( len , sz ) ;"	112:1:2416:2442	5672461	1	True				
ANR	5672471	IdentifierDecl	"last = R_MIN ( len , sz )"		5672461	0					
ANR	5672472	IdentifierDeclType	int		5672461	0					
ANR	5672473	Identifier	last		5672461	1					
ANR	5672474	AssignmentExpression	"last = R_MIN ( len , sz )"		5672461	2		=			
ANR	5672475	Identifier	last		5672461	0					
ANR	5672476	CallExpression	"R_MIN ( len , sz )"		5672461	1					
ANR	5672477	Callee	R_MIN		5672461	0					
ANR	5672478	Identifier	R_MIN		5672461	0					
ANR	5672479	ArgumentList	len		5672461	1					
ANR	5672480	Argument	len		5672461	0					
ANR	5672481	Identifier	len		5672461	0					
ANR	5672482	Argument	sz		5672461	1					
ANR	5672483	Identifier	sz		5672461	0					
ANR	5672484	IfStatement	if ( last < 1 )		5672461	2					
ANR	5672485	Condition	last < 1	113:5:2449:2456	5672461	0	True				
ANR	5672486	RelationalExpression	last < 1		5672461	0		<			
ANR	5672487	Identifier	last		5672461	0					
ANR	5672488	PrimaryExpression	1		5672461	1					
ANR	5672489	CompoundStatement		4:15:54:54	5672461	1					
ANR	5672490	ReturnStatement	return ;	114:2:2463:2469	5672461	0	True				
ANR	5672491	ExpressionStatement	s [ sz - 1 ] = 0	116:1:2475:2488	5672461	3	True				
ANR	5672492	AssignmentExpression	s [ sz - 1 ] = 0		5672461	0		=			
ANR	5672493	ArrayIndexing	s [ sz - 1 ]		5672461	0					
ANR	5672494	Identifier	s		5672461	0					
ANR	5672495	AdditiveExpression	sz - 1		5672461	1		-			
ANR	5672496	Identifier	sz		5672461	0					
ANR	5672497	PrimaryExpression	1		5672461	1					
ANR	5672498	PrimaryExpression	0		5672461	1					
ANR	5672499	WhileStatement	while ( * s && * s == '\\n' )		5672461	4					
ANR	5672500	Condition	* s && * s == '\\n'	117:8:2498:2513	5672461	0	True				
ANR	5672501	AndExpression	* s && * s == '\\n'		5672461	0		&&			
ANR	5672502	UnaryOperationExpression	* s		5672461	0					
ANR	5672503	UnaryOperator	*		5672461	0					
ANR	5672504	Identifier	s		5672461	1					
ANR	5672505	EqualityExpression	* s == '\\n'		5672461	1		==			
ANR	5672506	UnaryOperationExpression	* s		5672461	0					
ANR	5672507	UnaryOperator	*		5672461	0					
ANR	5672508	Identifier	s		5672461	1					
ANR	5672509	PrimaryExpression	'\\n'		5672461	1					
ANR	5672510	CompoundStatement		8:26:111:111	5672461	1					
ANR	5672511	ExpressionStatement	s ++	118:2:2520:2523	5672461	0	True				
ANR	5672512	PostIncDecOperationExpression	s ++		5672461	0					
ANR	5672513	Identifier	s		5672461	0					
ANR	5672514	IncDec	++		5672461	1					
ANR	5672515	ExpressionStatement	"strncpy ( s , ( char * ) buf , last )"	120:1:2529:2560	5672461	5	True				
ANR	5672516	CallExpression	"strncpy ( s , ( char * ) buf , last )"		5672461	0					
ANR	5672517	Callee	strncpy		5672461	0					
ANR	5672518	Identifier	strncpy		5672461	0					
ANR	5672519	ArgumentList	s		5672461	1					
ANR	5672520	Argument	s		5672461	0					
ANR	5672521	Identifier	s		5672461	0					
ANR	5672522	Argument	( char * ) buf		5672461	1					
ANR	5672523	CastExpression	( char * ) buf		5672461	0					
ANR	5672524	CastTarget	char *		5672461	0					
ANR	5672525	Identifier	buf		5672461	1					
ANR	5672526	Argument	last		5672461	2					
ANR	5672527	Identifier	last		5672461	0					
ANR	5672528	ReturnType	static void		5672461	1					
ANR	5672529	Identifier	readstr		5672461	2					
ANR	5672530	ParameterList	"char * s , int sz , const ut8 * buf , int len"		5672461	3					
ANR	5672531	Parameter	char * s	110:20:2362:2368	5672461	0	True				
ANR	5672532	ParameterType	char *		5672461	0					
ANR	5672533	Identifier	s		5672461	1					
ANR	5672534	Parameter	int sz	110:29:2371:2376	5672461	1	True				
ANR	5672535	ParameterType	int		5672461	0					
ANR	5672536	Identifier	sz		5672461	1					
ANR	5672537	Parameter	const ut8 * buf	110:37:2379:2392	5672461	2	True				
ANR	5672538	ParameterType	const ut8 *		5672461	0					
ANR	5672539	Identifier	buf		5672461	1					
ANR	5672540	Parameter	int len	110:53:2395:2401	5672461	3	True				
ANR	5672541	ParameterType	int		5672461	0					
ANR	5672542	Identifier	len		5672461	1					
ANR	5672543	CFGEntryNode	ENTRY		5672461		True				
ANR	5672544	CFGExitNode	EXIT		5672461		True				
ANR	5672545	Symbol	buf		5672461						
ANR	5672546	Symbol	s		5672461						
ANR	5672547	Symbol	len		5672461						
ANR	5672548	Symbol	last		5672461						
ANR	5672549	Symbol	sz		5672461						
ANR	5672550	Symbol	R_MIN		5672461						
ANR	5672551	Symbol	* s		5672461						
ANR	5672552	Symbol	* sz		5672461						
ANR	5672553	Function	cb	123:0:2565:6837							
ANR	5672554	FunctionDef	"cb (RDiff * d , void * user , RDiffOp * op)"		5672553	0					
ANR	5672555	CompoundStatement		123:49:2614:6837	5672553	0					
ANR	5672556	IdentifierDeclStatement	int i ;	124:1:2617:2622	5672553	0	True				
ANR	5672557	IdentifierDecl	i		5672553	0					
ANR	5672558	IdentifierDeclType	int		5672553	0					
ANR	5672559	Identifier	i		5672553	1					
ANR	5672560	IdentifierDeclStatement	char s [ 256 ] = { 0 } ;	125:1:2660:2677	5672553	1	True				
ANR	5672561	IdentifierDecl	s [ 256 ] = { 0 }		5672553	0					
ANR	5672562	IdentifierDeclType	char [ 256 ]		5672553	0					
ANR	5672563	Identifier	s		5672553	1					
ANR	5672564	PrimaryExpression	256		5672553	2					
ANR	5672565	AssignmentExpression	s [ 256 ] = { 0 }		5672553	3		=			
ANR	5672566	Identifier	s		5672553	0					
ANR	5672567	InitializerList	0		5672553	1					
ANR	5672568	PrimaryExpression	0		5672553	0					
ANR	5672569	IfStatement	if ( showcount )		5672553	2					
ANR	5672570	Condition	showcount	126:5:2684:2692	5672553	0	True				
ANR	5672571	Identifier	showcount		5672553	0					
ANR	5672572	CompoundStatement		4:16:80:80	5672553	1					
ANR	5672573	ExpressionStatement	count ++	127:2:2699:2706	5672553	0	True				
ANR	5672574	PostIncDecOperationExpression	count ++		5672553	0					
ANR	5672575	Identifier	count		5672553	0					
ANR	5672576	IncDec	++		5672553	1					
ANR	5672577	ReturnStatement	return 1 ;	128:2:2710:2718	5672553	1	True				
ANR	5672578	PrimaryExpression	1		5672553	0					
ANR	5672579	SwitchStatement	switch ( diffmode )		5672553	3					
ANR	5672580	Condition	diffmode	130:9:2732:2739	5672553	0	True				
ANR	5672581	Identifier	diffmode		5672553	0					
ANR	5672582	CompoundStatement		8:19:127:127	5672553	1					
ANR	5672583	Label	case 'U' :	131:1:2745:2753	5672553	0	True				
ANR	5672584	Label	case 'u' :	132:1:2792:2800	5672553	1	True				
ANR	5672585	IfStatement	if ( op -> a_len > 0 )		5672553	2					
ANR	5672586	Condition	op -> a_len > 0	133:6:2808:2820	5672553	0	True				
ANR	5672587	RelationalExpression	op -> a_len > 0		5672553	0		>			
ANR	5672588	PtrMemberAccess	op -> a_len		5672553	0					
ANR	5672589	Identifier	op		5672553	0					
ANR	5672590	Identifier	a_len		5672553	1					
ANR	5672591	PrimaryExpression	0		5672553	1					
ANR	5672592	CompoundStatement		11:21:208:208	5672553	1					
ANR	5672593	ExpressionStatement	"readstr ( s , sizeof ( s ) , op -> a_buf , op -> a_len )"	134:3:2828:2873	5672553	0	True				
ANR	5672594	CallExpression	"readstr ( s , sizeof ( s ) , op -> a_buf , op -> a_len )"		5672553	0					
ANR	5672595	Callee	readstr		5672553	0					
ANR	5672596	Identifier	readstr		5672553	0					
ANR	5672597	ArgumentList	s		5672553	1					
ANR	5672598	Argument	s		5672553	0					
ANR	5672599	Identifier	s		5672553	0					
ANR	5672600	Argument	sizeof ( s )		5672553	1					
ANR	5672601	SizeofExpression	sizeof ( s )		5672553	0					
ANR	5672602	Sizeof	sizeof		5672553	0					
ANR	5672603	SizeofOperand	s		5672553	1					
ANR	5672604	Argument	op -> a_buf		5672553	2					
ANR	5672605	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5672606	Identifier	op		5672553	0					
ANR	5672607	Identifier	a_buf		5672553	1					
ANR	5672608	Argument	op -> a_len		5672553	3					
ANR	5672609	PtrMemberAccess	op -> a_len		5672553	0					
ANR	5672610	Identifier	op		5672553	0					
ANR	5672611	Identifier	a_len		5672553	1					
ANR	5672612	IfStatement	if ( * s )		5672553	1					
ANR	5672613	Condition	* s	135:7:2882:2883	5672553	0	True				
ANR	5672614	UnaryOperationExpression	* s		5672553	0					
ANR	5672615	UnaryOperator	*		5672553	0					
ANR	5672616	Identifier	s		5672553	1					
ANR	5672617	CompoundStatement		22:4:511:558	5672553	1					
ANR	5672618	IfStatement	if ( ! quiet )		5672553	0					
ANR	5672619	Condition	! quiet	136:8:2896:2901	5672553	0	True				
ANR	5672620	UnaryOperationExpression	! quiet		5672553	0					
ANR	5672621	UnaryOperator	!		5672553	0					
ANR	5672622	Identifier	quiet		5672553	1					
ANR	5672623	CompoundStatement		14:16:289:289	5672553	1					
ANR	5672624	ExpressionStatement	printf ( Color_RED )	137:5:2911:2929	5672553	0	True				
ANR	5672625	CallExpression	printf ( Color_RED )		5672553	0					
ANR	5672626	Callee	printf		5672553	0					
ANR	5672627	Identifier	printf		5672553	0					
ANR	5672628	ArgumentList	Color_RED		5672553	1					
ANR	5672629	Argument	Color_RED		5672553	0					
ANR	5672630	Identifier	Color_RED		5672553	0					
ANR	5672631	Statement	printf	139:4:2941:2946	5672553	1	True				
ANR	5672632	Statement	(	139:11:2948:2948	5672553	2	True				
ANR	5672633	Statement	"""-0x%08"""	139:12:2949:2956	5672553	3	True				
ANR	5672634	Statement	PFMT64x	139:20:2957:2963	5672553	4	True				
ANR	5672635	Statement	""":"""	139:27:2964:2966	5672553	5	True				
ANR	5672636	Statement	","	139:30:2967:2967	5672553	6	True				
ANR	5672637	Statement	op	139:32:2969:2970	5672553	7	True				
ANR	5672638	Statement	->	139:34:2971:2972	5672553	8	True				
ANR	5672639	Statement	a_off	139:36:2973:2977	5672553	9	True				
ANR	5672640	Statement	)	139:41:2978:2978	5672553	10	True				
ANR	5672641	ExpressionStatement		139:42:2979:2979	5672553	11	True				
ANR	5672642	IdentifierDeclStatement	int len = op -> a_len ;	140:4:2985:3004	5672553	12	True				
ANR	5672643	IdentifierDecl	len = op -> a_len		5672553	0					
ANR	5672644	IdentifierDeclType	int		5672553	0					
ANR	5672645	Identifier	len		5672553	1					
ANR	5672646	AssignmentExpression	len = op -> a_len		5672553	2		=			
ANR	5672647	Identifier	len		5672553	0					
ANR	5672648	PtrMemberAccess	op -> a_len		5672553	1					
ANR	5672649	Identifier	op		5672553	0					
ANR	5672650	Identifier	a_len		5672553	1					
ANR	5672651	ForStatement	for ( i = 0 ; i < len ; i ++ )		5672553	13					
ANR	5672652	ForInit	i = 0 ;	141:9:3057:3062	5672553	0	True				
ANR	5672653	AssignmentExpression	i = 0		5672553	0		=			
ANR	5672654	Identifier	i		5672553	0					
ANR	5672655	PrimaryExpression	0		5672553	1					
ANR	5672656	Condition	i < len	141:16:3064:3070	5672553	1	True				
ANR	5672657	RelationalExpression	i < len		5672553	0		<			
ANR	5672658	Identifier	i		5672553	0					
ANR	5672659	Identifier	len		5672553	1					
ANR	5672660	PostIncDecOperationExpression	i ++	141:25:3073:3075	5672553	2	True				
ANR	5672661	Identifier	i		5672553	0					
ANR	5672662	IncDec	++		5672553	1					
ANR	5672663	CompoundStatement		19:30:463:463	5672553	3					
ANR	5672664	ExpressionStatement	"printf ( ""%02x"" , op -> a_buf [ i ] )"	142:5:3085:3114	5672553	0	True				
ANR	5672665	CallExpression	"printf ( ""%02x"" , op -> a_buf [ i ] )"		5672553	0					
ANR	5672666	Callee	printf		5672553	0					
ANR	5672667	Identifier	printf		5672553	0					
ANR	5672668	ArgumentList	"""%02x"""		5672553	1					
ANR	5672669	Argument	"""%02x"""		5672553	0					
ANR	5672670	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5672671	Argument	op -> a_buf [ i ]		5672553	1					
ANR	5672672	ArrayIndexing	op -> a_buf [ i ]		5672553	0					
ANR	5672673	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5672674	Identifier	op		5672553	0					
ANR	5672675	Identifier	a_buf		5672553	1					
ANR	5672676	Identifier	i		5672553	1					
ANR	5672677	IdentifierDeclStatement	char * p = r_str_escape ( ( const char * ) op -> a_buf ) ;	144:4:3126:3173	5672553	14	True				
ANR	5672678	IdentifierDecl	* p = r_str_escape ( ( const char * ) op -> a_buf )		5672553	0					
ANR	5672679	IdentifierDeclType	char *		5672553	0					
ANR	5672680	Identifier	p		5672553	1					
ANR	5672681	AssignmentExpression	* p = r_str_escape ( ( const char * ) op -> a_buf )		5672553	2		=			
ANR	5672682	Identifier	p		5672553	0					
ANR	5672683	CallExpression	r_str_escape ( ( const char * ) op -> a_buf )		5672553	1					
ANR	5672684	Callee	r_str_escape		5672553	0					
ANR	5672685	Identifier	r_str_escape		5672553	0					
ANR	5672686	ArgumentList	( const char * ) op -> a_buf		5672553	1					
ANR	5672687	Argument	( const char * ) op -> a_buf		5672553	0					
ANR	5672688	CastExpression	( const char * ) op -> a_buf		5672553	0					
ANR	5672689	CastTarget	const char *		5672553	0					
ANR	5672690	PtrMemberAccess	op -> a_buf		5672553	1					
ANR	5672691	Identifier	op		5672553	0					
ANR	5672692	Identifier	a_buf		5672553	1					
ANR	5672693	ExpressionStatement	"printf ( "" \\""%s\\""\\n"" , p )"	145:4:3179:3202	5672553	15	True				
ANR	5672694	CallExpression	"printf ( "" \\""%s\\""\\n"" , p )"		5672553	0					
ANR	5672695	Callee	printf		5672553	0					
ANR	5672696	Identifier	printf		5672553	0					
ANR	5672697	ArgumentList	""" \\""%s\\""\\n"""		5672553	1					
ANR	5672698	Argument	""" \\""%s\\""\\n"""		5672553	0					
ANR	5672699	PrimaryExpression	""" \\""%s\\""\\n"""		5672553	0					
ANR	5672700	Argument	p		5672553	1					
ANR	5672701	Identifier	p		5672553	0					
ANR	5672702	ExpressionStatement	free ( p )	146:4:3208:3216	5672553	16	True				
ANR	5672703	CallExpression	free ( p )		5672553	0					
ANR	5672704	Callee	free		5672553	0					
ANR	5672705	Identifier	free		5672553	0					
ANR	5672706	ArgumentList	p		5672553	1					
ANR	5672707	Argument	p		5672553	0					
ANR	5672708	Identifier	p		5672553	0					
ANR	5672709	IfStatement	if ( ! quiet )		5672553	17					
ANR	5672710	Condition	! quiet	147:8:3226:3231	5672553	0	True				
ANR	5672711	UnaryOperationExpression	! quiet		5672553	0					
ANR	5672712	UnaryOperator	!		5672553	0					
ANR	5672713	Identifier	quiet		5672553	1					
ANR	5672714	CompoundStatement		25:16:619:619	5672553	1					
ANR	5672715	ExpressionStatement	printf ( Color_RESET )	148:5:3241:3261	5672553	0	True				
ANR	5672716	CallExpression	printf ( Color_RESET )		5672553	0					
ANR	5672717	Callee	printf		5672553	0					
ANR	5672718	Identifier	printf		5672553	0					
ANR	5672719	ArgumentList	Color_RESET		5672553	1					
ANR	5672720	Argument	Color_RESET		5672553	0					
ANR	5672721	Identifier	Color_RESET		5672553	0					
ANR	5672722	IfStatement	if ( op -> b_len > 0 )		5672553	3					
ANR	5672723	Condition	op -> b_len > 0	152:6:3284:3296	5672553	0	True				
ANR	5672724	RelationalExpression	op -> b_len > 0		5672553	0		>			
ANR	5672725	PtrMemberAccess	op -> b_len		5672553	0					
ANR	5672726	Identifier	op		5672553	0					
ANR	5672727	Identifier	b_len		5672553	1					
ANR	5672728	PrimaryExpression	0		5672553	1					
ANR	5672729	CompoundStatement		30:21:684:684	5672553	1					
ANR	5672730	ExpressionStatement	"readstr ( s , sizeof ( s ) , op -> b_buf , op -> b_len )"	153:3:3304:3349	5672553	0	True				
ANR	5672731	CallExpression	"readstr ( s , sizeof ( s ) , op -> b_buf , op -> b_len )"		5672553	0					
ANR	5672732	Callee	readstr		5672553	0					
ANR	5672733	Identifier	readstr		5672553	0					
ANR	5672734	ArgumentList	s		5672553	1					
ANR	5672735	Argument	s		5672553	0					
ANR	5672736	Identifier	s		5672553	0					
ANR	5672737	Argument	sizeof ( s )		5672553	1					
ANR	5672738	SizeofExpression	sizeof ( s )		5672553	0					
ANR	5672739	Sizeof	sizeof		5672553	0					
ANR	5672740	SizeofOperand	s		5672553	1					
ANR	5672741	Argument	op -> b_buf		5672553	2					
ANR	5672742	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5672743	Identifier	op		5672553	0					
ANR	5672744	Identifier	b_buf		5672553	1					
ANR	5672745	Argument	op -> b_len		5672553	3					
ANR	5672746	PtrMemberAccess	op -> b_len		5672553	0					
ANR	5672747	Identifier	op		5672553	0					
ANR	5672748	Identifier	b_len		5672553	1					
ANR	5672749	IfStatement	if ( * s )		5672553	1					
ANR	5672750	Condition	* s	154:7:3358:3359	5672553	0	True				
ANR	5672751	UnaryOperationExpression	* s		5672553	0					
ANR	5672752	UnaryOperator	*		5672553	0					
ANR	5672753	Identifier	s		5672553	1					
ANR	5672754	CompoundStatement		32:11:747:747	5672553	1					
ANR	5672755	IfStatement	if ( ! quiet )		5672553	0					
ANR	5672756	Condition	! quiet	155:8:3372:3377	5672553	0	True				
ANR	5672757	UnaryOperationExpression	! quiet		5672553	0					
ANR	5672758	UnaryOperator	!		5672553	0					
ANR	5672759	Identifier	quiet		5672553	1					
ANR	5672760	CompoundStatement		33:16:765:765	5672553	1					
ANR	5672761	ExpressionStatement	printf ( Color_GREEN )	156:5:3387:3407	5672553	0	True				
ANR	5672762	CallExpression	printf ( Color_GREEN )		5672553	0					
ANR	5672763	Callee	printf		5672553	0					
ANR	5672764	Identifier	printf		5672553	0					
ANR	5672765	ArgumentList	Color_GREEN		5672553	1					
ANR	5672766	Argument	Color_GREEN		5672553	0					
ANR	5672767	Identifier	Color_GREEN		5672553	0					
ANR	5672768	Statement	printf	158:4:3419:3424	5672553	1	True				
ANR	5672769	Statement	(	158:11:3426:3426	5672553	2	True				
ANR	5672770	Statement	"""+0x%08"""	158:12:3427:3434	5672553	3	True				
ANR	5672771	Statement	PFMT64x	158:20:3435:3441	5672553	4	True				
ANR	5672772	Statement	""":"""	158:27:3442:3444	5672553	5	True				
ANR	5672773	Statement	","	158:30:3445:3445	5672553	6	True				
ANR	5672774	Statement	op	158:32:3447:3448	5672553	7	True				
ANR	5672775	Statement	->	158:34:3449:3450	5672553	8	True				
ANR	5672776	Statement	b_off	158:36:3451:3455	5672553	9	True				
ANR	5672777	Statement	)	158:41:3456:3456	5672553	10	True				
ANR	5672778	ExpressionStatement		158:42:3457:3457	5672553	11	True				
ANR	5672779	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	12					
ANR	5672780	ForInit	i = 0 ;	159:9:3468:3473	5672553	0	True				
ANR	5672781	AssignmentExpression	i = 0		5672553	0		=			
ANR	5672782	Identifier	i		5672553	0					
ANR	5672783	PrimaryExpression	0		5672553	1					
ANR	5672784	Condition	i < op -> b_len	159:16:3475:3487	5672553	1	True				
ANR	5672785	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5672786	Identifier	i		5672553	0					
ANR	5672787	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5672788	Identifier	op		5672553	0					
ANR	5672789	Identifier	b_len		5672553	1					
ANR	5672790	PostIncDecOperationExpression	i ++	159:31:3490:3492	5672553	2	True				
ANR	5672791	Identifier	i		5672553	0					
ANR	5672792	IncDec	++		5672553	1					
ANR	5672793	CompoundStatement		37:36:880:880	5672553	3					
ANR	5672794	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	160:5:3502:3531	5672553	0	True				
ANR	5672795	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5672796	Callee	printf		5672553	0					
ANR	5672797	Identifier	printf		5672553	0					
ANR	5672798	ArgumentList	"""%02x"""		5672553	1					
ANR	5672799	Argument	"""%02x"""		5672553	0					
ANR	5672800	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5672801	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5672802	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5672803	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5672804	Identifier	op		5672553	0					
ANR	5672805	Identifier	b_buf		5672553	1					
ANR	5672806	Identifier	i		5672553	1					
ANR	5672807	IfStatement	if ( ! quiet )		5672553	13					
ANR	5672808	Condition	! quiet	162:8:3547:3552	5672553	0	True				
ANR	5672809	UnaryOperationExpression	! quiet		5672553	0					
ANR	5672810	UnaryOperator	!		5672553	0					
ANR	5672811	Identifier	quiet		5672553	1					
ANR	5672812	CompoundStatement		41:5:947:993	5672553	1					
ANR	5672813	IdentifierDeclStatement	char * p = r_str_escape ( ( const char * ) op -> b_buf ) ;	163:5:3562:3608	5672553	0	True				
ANR	5672814	IdentifierDecl	* p = r_str_escape ( ( const char * ) op -> b_buf )		5672553	0					
ANR	5672815	IdentifierDeclType	char *		5672553	0					
ANR	5672816	Identifier	p		5672553	1					
ANR	5672817	AssignmentExpression	* p = r_str_escape ( ( const char * ) op -> b_buf )		5672553	2		=			
ANR	5672818	Identifier	p		5672553	0					
ANR	5672819	CallExpression	r_str_escape ( ( const char * ) op -> b_buf )		5672553	1					
ANR	5672820	Callee	r_str_escape		5672553	0					
ANR	5672821	Identifier	r_str_escape		5672553	0					
ANR	5672822	ArgumentList	( const char * ) op -> b_buf		5672553	1					
ANR	5672823	Argument	( const char * ) op -> b_buf		5672553	0					
ANR	5672824	CastExpression	( const char * ) op -> b_buf		5672553	0					
ANR	5672825	CastTarget	const char *		5672553	0					
ANR	5672826	PtrMemberAccess	op -> b_buf		5672553	1					
ANR	5672827	Identifier	op		5672553	0					
ANR	5672828	Identifier	b_buf		5672553	1					
ANR	5672829	ExpressionStatement	"printf ( "" \\""%s\\""\\n"" , p )"	164:5:3615:3638	5672553	1	True				
ANR	5672830	CallExpression	"printf ( "" \\""%s\\""\\n"" , p )"		5672553	0					
ANR	5672831	Callee	printf		5672553	0					
ANR	5672832	Identifier	printf		5672553	0					
ANR	5672833	ArgumentList	""" \\""%s\\""\\n"""		5672553	1					
ANR	5672834	Argument	""" \\""%s\\""\\n"""		5672553	0					
ANR	5672835	PrimaryExpression	""" \\""%s\\""\\n"""		5672553	0					
ANR	5672836	Argument	p		5672553	1					
ANR	5672837	Identifier	p		5672553	0					
ANR	5672838	ExpressionStatement	free ( p )	165:5:3645:3653	5672553	2	True				
ANR	5672839	CallExpression	free ( p )		5672553	0					
ANR	5672840	Callee	free		5672553	0					
ANR	5672841	Identifier	free		5672553	0					
ANR	5672842	ArgumentList	p		5672553	1					
ANR	5672843	Argument	p		5672553	0					
ANR	5672844	Identifier	p		5672553	0					
ANR	5672845	ExpressionStatement	printf ( Color_RESET )	166:5:3660:3680	5672553	3	True				
ANR	5672846	CallExpression	printf ( Color_RESET )		5672553	0					
ANR	5672847	Callee	printf		5672553	0					
ANR	5672848	Identifier	printf		5672553	0					
ANR	5672849	ArgumentList	Color_RESET		5672553	1					
ANR	5672850	Argument	Color_RESET		5672553	0					
ANR	5672851	Identifier	Color_RESET		5672553	0					
ANR	5672852	ElseStatement	else		5672553	0					
ANR	5672853	CompoundStatement		45:11:1078:1078	5672553	0					
ANR	5672854	ExpressionStatement	"printf ( ""\\n"" )"	168:5:3700:3713	5672553	0	True				
ANR	5672855	CallExpression	"printf ( ""\\n"" )"		5672553	0					
ANR	5672856	Callee	printf		5672553	0					
ANR	5672857	Identifier	printf		5672553	0					
ANR	5672858	ArgumentList	"""\\n"""		5672553	1					
ANR	5672859	Argument	"""\\n"""		5672553	0					
ANR	5672860	PrimaryExpression	"""\\n"""		5672553	0					
ANR	5672861	BreakStatement	break ;	172:2:3732:3737	5672553	4	True				
ANR	5672862	Label	case 'r' :	173:1:3740:3748	5672553	5	True				
ANR	5672863	IfStatement	if ( disasm )		5672553	6					
ANR	5672864	Condition	disasm	174:6:3756:3761	5672553	0	True				
ANR	5672865	Identifier	disasm		5672553	0					
ANR	5672866	CompoundStatement		52:14:1149:1149	5672553	1					
ANR	5672867	ExpressionStatement	"eprintf ( ""r2cmds (-r) + disasm (-D) not yet implemented\\n"" )"	175:3:3769:3828	5672553	0	True				
ANR	5672868	CallExpression	"eprintf ( ""r2cmds (-r) + disasm (-D) not yet implemented\\n"" )"		5672553	0					
ANR	5672869	Callee	eprintf		5672553	0					
ANR	5672870	Identifier	eprintf		5672553	0					
ANR	5672871	ArgumentList	"""r2cmds (-r) + disasm (-D) not yet implemented\\n"""		5672553	1					
ANR	5672872	Argument	"""r2cmds (-r) + disasm (-D) not yet implemented\\n"""		5672553	0					
ANR	5672873	PrimaryExpression	"""r2cmds (-r) + disasm (-D) not yet implemented\\n"""		5672553	0					
ANR	5672874	IfStatement	if ( op -> a_len == op -> b_len )		5672553	7					
ANR	5672875	Condition	op -> a_len == op -> b_len	177:6:3840:3861	5672553	0	True				
ANR	5672876	EqualityExpression	op -> a_len == op -> b_len		5672553	0		==			
ANR	5672877	PtrMemberAccess	op -> a_len		5672553	0					
ANR	5672878	Identifier	op		5672553	0					
ANR	5672879	Identifier	a_len		5672553	1					
ANR	5672880	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5672881	Identifier	op		5672553	0					
ANR	5672882	Identifier	b_len		5672553	1					
ANR	5672883	CompoundStatement		55:30:1249:1249	5672553	1					
ANR	5672884	ExpressionStatement	"printf ( ""wx "" )"	178:3:3869:3883	5672553	0	True				
ANR	5672885	CallExpression	"printf ( ""wx "" )"		5672553	0					
ANR	5672886	Callee	printf		5672553	0					
ANR	5672887	Identifier	printf		5672553	0					
ANR	5672888	ArgumentList	"""wx """		5672553	1					
ANR	5672889	Argument	"""wx """		5672553	0					
ANR	5672890	PrimaryExpression	"""wx """		5672553	0					
ANR	5672891	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	1					
ANR	5672892	ForInit	i = 0 ;	179:8:3893:3898	5672553	0	True				
ANR	5672893	AssignmentExpression	i = 0		5672553	0		=			
ANR	5672894	Identifier	i		5672553	0					
ANR	5672895	PrimaryExpression	0		5672553	1					
ANR	5672896	Condition	i < op -> b_len	179:15:3900:3912	5672553	1	True				
ANR	5672897	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5672898	Identifier	i		5672553	0					
ANR	5672899	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5672900	Identifier	op		5672553	0					
ANR	5672901	Identifier	b_len		5672553	1					
ANR	5672902	PostIncDecOperationExpression	i ++	179:30:3915:3917	5672553	2	True				
ANR	5672903	Identifier	i		5672553	0					
ANR	5672904	IncDec	++		5672553	1					
ANR	5672905	CompoundStatement		57:35:1305:1305	5672553	3					
ANR	5672906	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	180:4:3926:3955	5672553	0	True				
ANR	5672907	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5672908	Callee	printf		5672553	0					
ANR	5672909	Identifier	printf		5672553	0					
ANR	5672910	ArgumentList	"""%02x"""		5672553	1					
ANR	5672911	Argument	"""%02x"""		5672553	0					
ANR	5672912	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5672913	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5672914	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5672915	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5672916	Identifier	op		5672553	0					
ANR	5672917	Identifier	b_buf		5672553	1					
ANR	5672918	Identifier	i		5672553	1					
ANR	5672919	Statement	printf	182:3:3965:3970	5672553	2	True				
ANR	5672920	Statement	(	182:10:3972:3972	5672553	3	True				
ANR	5672921	Statement	""" @ 0x%08"""	182:11:3973:3982	5672553	4	True				
ANR	5672922	Statement	PFMT64x	182:21:3983:3989	5672553	5	True				
ANR	5672923	Statement	"""\\n"""	182:29:3991:3994	5672553	6	True				
ANR	5672924	Statement	","	182:33:3995:3995	5672553	7	True				
ANR	5672925	Statement	op	182:35:3997:3998	5672553	8	True				
ANR	5672926	Statement	->	182:37:3999:4000	5672553	9	True				
ANR	5672927	Statement	b_off	182:39:4001:4005	5672553	10	True				
ANR	5672928	Statement	)	182:44:4006:4006	5672553	11	True				
ANR	5672929	ExpressionStatement		182:45:4007:4007	5672553	12	True				
ANR	5672930	ElseStatement	else		5672553	0					
ANR	5672931	CompoundStatement		61:9:1403:1403	5672553	0					
ANR	5672932	IfStatement	if ( op -> a_len > 0 )		5672553	0					
ANR	5672933	Condition	op -> a_len > 0	184:7:4027:4039	5672553	0	True				
ANR	5672934	RelationalExpression	op -> a_len > 0		5672553	0		>			
ANR	5672935	PtrMemberAccess	op -> a_len		5672553	0					
ANR	5672936	Identifier	op		5672553	0					
ANR	5672937	Identifier	a_len		5672553	1					
ANR	5672938	PrimaryExpression	0		5672553	1					
ANR	5672939	CompoundStatement		62:22:1427:1427	5672553	1					
ANR	5672940	Statement	printf	185:4:4048:4053	5672553	0	True				
ANR	5672941	Statement	(	185:11:4055:4055	5672553	1	True				
ANR	5672942	Statement	"""r-%d @ 0x%08"""	185:12:4056:4069	5672553	2	True				
ANR	5672943	Statement	PFMT64x	185:26:4070:4076	5672553	3	True				
ANR	5672944	Statement	"""\\n"""	185:34:4078:4081	5672553	4	True				
ANR	5672945	Statement	","	185:38:4082:4082	5672553	5	True				
ANR	5672946	Statement	op	186:5:4089:4090	5672553	6	True				
ANR	5672947	Statement	->	186:7:4091:4092	5672553	7	True				
ANR	5672948	Statement	a_len	186:9:4093:4097	5672553	8	True				
ANR	5672949	Statement	","	186:14:4098:4098	5672553	9	True				
ANR	5672950	Statement	op	186:16:4100:4101	5672553	10	True				
ANR	5672951	Statement	->	186:18:4102:4103	5672553	11	True				
ANR	5672952	Statement	a_off	186:20:4104:4108	5672553	12	True				
ANR	5672953	Statement	+	186:26:4110:4110	5672553	13	True				
ANR	5672954	Statement	delta	186:28:4112:4116	5672553	14	True				
ANR	5672955	Statement	)	186:33:4117:4117	5672553	15	True				
ANR	5672956	ExpressionStatement		186:34:4118:4118	5672553	16	True				
ANR	5672957	IfStatement	if ( op -> b_len > 0 )		5672553	1					
ANR	5672958	Condition	op -> b_len > 0	188:7:4132:4144	5672553	0	True				
ANR	5672959	RelationalExpression	op -> b_len > 0		5672553	0		>			
ANR	5672960	PtrMemberAccess	op -> b_len		5672553	0					
ANR	5672961	Identifier	op		5672553	0					
ANR	5672962	Identifier	b_len		5672553	1					
ANR	5672963	PrimaryExpression	0		5672553	1					
ANR	5672964	CompoundStatement		66:22:1532:1532	5672553	1					
ANR	5672965	Statement	printf	189:4:4153:4158	5672553	0	True				
ANR	5672966	Statement	(	189:11:4160:4160	5672553	1	True				
ANR	5672967	Statement	"""r+%d @ 0x%08"""	189:12:4161:4174	5672553	2	True				
ANR	5672968	Statement	PFMT64x	189:26:4175:4181	5672553	3	True				
ANR	5672969	Statement	"""\\n"""	189:34:4183:4186	5672553	4	True				
ANR	5672970	Statement	","	189:38:4187:4187	5672553	5	True				
ANR	5672971	Statement	op	190:5:4194:4195	5672553	6	True				
ANR	5672972	Statement	->	190:7:4196:4197	5672553	7	True				
ANR	5672973	Statement	b_len	190:9:4198:4202	5672553	8	True				
ANR	5672974	Statement	","	190:14:4203:4203	5672553	9	True				
ANR	5672975	Statement	op	190:16:4205:4206	5672553	10	True				
ANR	5672976	Statement	->	190:18:4207:4208	5672553	11	True				
ANR	5672977	Statement	b_off	190:20:4209:4213	5672553	12	True				
ANR	5672978	Statement	+	190:26:4215:4215	5672553	13	True				
ANR	5672979	Statement	delta	190:28:4217:4221	5672553	14	True				
ANR	5672980	Statement	)	190:33:4222:4222	5672553	15	True				
ANR	5672981	ExpressionStatement		190:34:4223:4223	5672553	16	True				
ANR	5672982	ExpressionStatement	"printf ( ""wx "" )"	191:4:4229:4243	5672553	17	True				
ANR	5672983	CallExpression	"printf ( ""wx "" )"		5672553	0					
ANR	5672984	Callee	printf		5672553	0					
ANR	5672985	Identifier	printf		5672553	0					
ANR	5672986	ArgumentList	"""wx """		5672553	1					
ANR	5672987	Argument	"""wx """		5672553	0					
ANR	5672988	PrimaryExpression	"""wx """		5672553	0					
ANR	5672989	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	18					
ANR	5672990	ForInit	i = 0 ;	192:9:4254:4259	5672553	0	True				
ANR	5672991	AssignmentExpression	i = 0		5672553	0		=			
ANR	5672992	Identifier	i		5672553	0					
ANR	5672993	PrimaryExpression	0		5672553	1					
ANR	5672994	Condition	i < op -> b_len	192:16:4261:4273	5672553	1	True				
ANR	5672995	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5672996	Identifier	i		5672553	0					
ANR	5672997	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5672998	Identifier	op		5672553	0					
ANR	5672999	Identifier	b_len		5672553	1					
ANR	5673000	PostIncDecOperationExpression	i ++	192:31:4276:4278	5672553	2	True				
ANR	5673001	Identifier	i		5672553	0					
ANR	5673002	IncDec	++		5672553	1					
ANR	5673003	CompoundStatement		70:36:1666:1666	5672553	3					
ANR	5673004	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	193:5:4288:4317	5672553	0	True				
ANR	5673005	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5673006	Callee	printf		5672553	0					
ANR	5673007	Identifier	printf		5672553	0					
ANR	5673008	ArgumentList	"""%02x"""		5672553	1					
ANR	5673009	Argument	"""%02x"""		5672553	0					
ANR	5673010	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673011	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5673012	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5673013	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5673014	Identifier	op		5672553	0					
ANR	5673015	Identifier	b_buf		5672553	1					
ANR	5673016	Identifier	i		5672553	1					
ANR	5673017	Statement	printf	195:4:4329:4334	5672553	19	True				
ANR	5673018	Statement	(	195:11:4336:4336	5672553	20	True				
ANR	5673019	Statement	""" @ 0x%08"""	195:12:4337:4346	5672553	21	True				
ANR	5673020	Statement	PFMT64x	195:22:4347:4353	5672553	22	True				
ANR	5673021	Statement	"""\\n"""	195:30:4355:4358	5672553	23	True				
ANR	5673022	Statement	","	195:34:4359:4359	5672553	24	True				
ANR	5673023	Statement	op	195:36:4361:4362	5672553	25	True				
ANR	5673024	Statement	->	195:38:4363:4364	5672553	26	True				
ANR	5673025	Statement	b_off	195:40:4365:4369	5672553	27	True				
ANR	5673026	Statement	+	195:46:4371:4371	5672553	28	True				
ANR	5673027	Statement	delta	195:48:4373:4377	5672553	29	True				
ANR	5673028	Statement	)	195:53:4378:4378	5672553	30	True				
ANR	5673029	ExpressionStatement		195:54:4379:4379	5672553	31	True				
ANR	5673030	ExpressionStatement	delta += ( op -> b_off - op -> a_off )	197:3:4389:4421	5672553	2	True				
ANR	5673031	AssignmentExpression	delta += ( op -> b_off - op -> a_off )		5672553	0		+=			
ANR	5673032	Identifier	delta		5672553	0					
ANR	5673033	AdditiveExpression	op -> b_off - op -> a_off		5672553	1		-			
ANR	5673034	PtrMemberAccess	op -> b_off		5672553	0					
ANR	5673035	Identifier	op		5672553	0					
ANR	5673036	Identifier	b_off		5672553	1					
ANR	5673037	PtrMemberAccess	op -> a_off		5672553	1					
ANR	5673038	Identifier	op		5672553	0					
ANR	5673039	Identifier	a_off		5672553	1					
ANR	5673040	ReturnStatement	return 1 ;	199:2:4429:4437	5672553	8	True				
ANR	5673041	PrimaryExpression	1		5672553	0					
ANR	5673042	Label	case 'j' :	200:1:4440:4448	5672553	9	True				
ANR	5673043	IfStatement	if ( disasm )		5672553	10					
ANR	5673044	Condition	disasm	201:6:4456:4461	5672553	0	True				
ANR	5673045	Identifier	disasm		5672553	0					
ANR	5673046	CompoundStatement		79:14:1849:1849	5672553	1					
ANR	5673047	ExpressionStatement	"eprintf ( ""JSON (-j) + disasm (-D) not yet implemented\\n"" )"	202:3:4469:4526	5672553	0	True				
ANR	5673048	CallExpression	"eprintf ( ""JSON (-j) + disasm (-D) not yet implemented\\n"" )"		5672553	0					
ANR	5673049	Callee	eprintf		5672553	0					
ANR	5673050	Identifier	eprintf		5672553	0					
ANR	5673051	ArgumentList	"""JSON (-j) + disasm (-D) not yet implemented\\n"""		5672553	1					
ANR	5673052	Argument	"""JSON (-j) + disasm (-D) not yet implemented\\n"""		5672553	0					
ANR	5673053	PrimaryExpression	"""JSON (-j) + disasm (-D) not yet implemented\\n"""		5672553	0					
ANR	5673054	IfStatement	if ( json_started )		5672553	11					
ANR	5673055	Condition	json_started	204:6:4538:4549	5672553	0	True				
ANR	5673056	Identifier	json_started		5672553	0					
ANR	5673057	CompoundStatement		82:20:1937:1937	5672553	1					
ANR	5673058	ExpressionStatement	"printf ( "",\\n"" )"	205:3:4557:4571	5672553	0	True				
ANR	5673059	CallExpression	"printf ( "",\\n"" )"		5672553	0					
ANR	5673060	Callee	printf		5672553	0					
ANR	5673061	Identifier	printf		5672553	0					
ANR	5673062	ArgumentList	""",\\n"""		5672553	1					
ANR	5673063	Argument	""",\\n"""		5672553	0					
ANR	5673064	PrimaryExpression	""",\\n"""		5672553	0					
ANR	5673065	ExpressionStatement	json_started = 1	207:2:4579:4595	5672553	12	True				
ANR	5673066	AssignmentExpression	json_started = 1		5672553	0		=			
ANR	5673067	Identifier	json_started		5672553	0					
ANR	5673068	PrimaryExpression	1		5672553	1					
ANR	5673069	Statement	printf	208:2:4599:4604	5672553	13	True				
ANR	5673070	Statement	(	208:9:4606:4606	5672553	14	True				
ANR	5673071	Statement	"""{\\""offset\\"":%"""	208:10:4607:4621	5672553	15	True				
ANR	5673072	Statement	PFMT64d	208:25:4622:4628	5672553	16	True				
ANR	5673073	Statement	""","""	208:33:4630:4632	5672553	17	True				
ANR	5673074	Statement	","	208:36:4633:4633	5672553	18	True				
ANR	5673075	Statement	op	208:38:4635:4636	5672553	19	True				
ANR	5673076	Statement	->	208:40:4637:4638	5672553	20	True				
ANR	5673077	Statement	a_off	208:42:4639:4643	5672553	21	True				
ANR	5673078	Statement	)	208:47:4644:4644	5672553	22	True				
ANR	5673079	ExpressionStatement		208:48:4645:4645	5672553	23	True				
ANR	5673080	ExpressionStatement	"printf ( ""\\""from\\"":\\"""" )"	209:2:4649:4671	5672553	24	True				
ANR	5673081	CallExpression	"printf ( ""\\""from\\"":\\"""" )"		5672553	0					
ANR	5673082	Callee	printf		5672553	0					
ANR	5673083	Identifier	printf		5672553	0					
ANR	5673084	ArgumentList	"""\\""from\\"":\\"""""		5672553	1					
ANR	5673085	Argument	"""\\""from\\"":\\"""""		5672553	0					
ANR	5673086	PrimaryExpression	"""\\""from\\"":\\"""""		5672553	0					
ANR	5673087	ForStatement	for ( i = 0 ; i < op -> a_len ; i ++ )		5672553	25					
ANR	5673088	ForInit	i = 0 ;	210:7:4680:4685	5672553	0	True				
ANR	5673089	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673090	Identifier	i		5672553	0					
ANR	5673091	PrimaryExpression	0		5672553	1					
ANR	5673092	Condition	i < op -> a_len	210:14:4687:4699	5672553	1	True				
ANR	5673093	RelationalExpression	i < op -> a_len		5672553	0		<			
ANR	5673094	Identifier	i		5672553	0					
ANR	5673095	PtrMemberAccess	op -> a_len		5672553	1					
ANR	5673096	Identifier	op		5672553	0					
ANR	5673097	Identifier	a_len		5672553	1					
ANR	5673098	PostIncDecOperationExpression	i ++	210:29:4702:4704	5672553	2	True				
ANR	5673099	Identifier	i		5672553	0					
ANR	5673100	IncDec	++		5672553	1					
ANR	5673101	CompoundStatement		88:34:2092:2092	5672553	3					
ANR	5673102	ExpressionStatement	"printf ( ""%02x"" , op -> a_buf [ i ] )"	211:3:4712:4741	5672553	0	True				
ANR	5673103	CallExpression	"printf ( ""%02x"" , op -> a_buf [ i ] )"		5672553	0					
ANR	5673104	Callee	printf		5672553	0					
ANR	5673105	Identifier	printf		5672553	0					
ANR	5673106	ArgumentList	"""%02x"""		5672553	1					
ANR	5673107	Argument	"""%02x"""		5672553	0					
ANR	5673108	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673109	Argument	op -> a_buf [ i ]		5672553	1					
ANR	5673110	ArrayIndexing	op -> a_buf [ i ]		5672553	0					
ANR	5673111	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5673112	Identifier	op		5672553	0					
ANR	5673113	Identifier	a_buf		5672553	1					
ANR	5673114	Identifier	i		5672553	1					
ANR	5673115	ExpressionStatement	"printf ( ""\\"", \\""to\\"":\\"""" )"	213:2:4749:4773	5672553	26	True				
ANR	5673116	CallExpression	"printf ( ""\\"", \\""to\\"":\\"""" )"		5672553	0					
ANR	5673117	Callee	printf		5672553	0					
ANR	5673118	Identifier	printf		5672553	0					
ANR	5673119	ArgumentList	"""\\"", \\""to\\"":\\"""""		5672553	1					
ANR	5673120	Argument	"""\\"", \\""to\\"":\\"""""		5672553	0					
ANR	5673121	PrimaryExpression	"""\\"", \\""to\\"":\\"""""		5672553	0					
ANR	5673122	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	27					
ANR	5673123	ForInit	i = 0 ;	214:7:4782:4787	5672553	0	True				
ANR	5673124	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673125	Identifier	i		5672553	0					
ANR	5673126	PrimaryExpression	0		5672553	1					
ANR	5673127	Condition	i < op -> b_len	214:14:4789:4801	5672553	1	True				
ANR	5673128	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5673129	Identifier	i		5672553	0					
ANR	5673130	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5673131	Identifier	op		5672553	0					
ANR	5673132	Identifier	b_len		5672553	1					
ANR	5673133	PostIncDecOperationExpression	i ++	214:29:4804:4806	5672553	2	True				
ANR	5673134	Identifier	i		5672553	0					
ANR	5673135	IncDec	++		5672553	1					
ANR	5673136	CompoundStatement		92:34:2194:2194	5672553	3					
ANR	5673137	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	215:3:4814:4843	5672553	0	True				
ANR	5673138	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5673139	Callee	printf		5672553	0					
ANR	5673140	Identifier	printf		5672553	0					
ANR	5673141	ArgumentList	"""%02x"""		5672553	1					
ANR	5673142	Argument	"""%02x"""		5672553	0					
ANR	5673143	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673144	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5673145	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5673146	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5673147	Identifier	op		5672553	0					
ANR	5673148	Identifier	b_buf		5672553	1					
ANR	5673149	Identifier	i		5672553	1					
ANR	5673150	ExpressionStatement	"printf ( ""\\""}"" )"	217:2:4851:4865	5672553	28	True				
ANR	5673151	CallExpression	"printf ( ""\\""}"" )"		5672553	0					
ANR	5673152	Callee	printf		5672553	0					
ANR	5673153	Identifier	printf		5672553	0					
ANR	5673154	ArgumentList	"""\\""}"""		5672553	1					
ANR	5673155	Argument	"""\\""}"""		5672553	0					
ANR	5673156	PrimaryExpression	"""\\""}"""		5672553	0					
ANR	5673157	ReturnStatement	return 1 ;	218:2:4879:4887	5672553	29	True				
ANR	5673158	PrimaryExpression	1		5672553	0					
ANR	5673159	Label	case 0 :	219:1:4890:4896	5672553	30	True				
ANR	5673160	Label	default :	220:1:4899:4906	5672553	31	True				
ANR	5673161	Identifier	default		5672553	0					
ANR	5673162	IfStatement	if ( disasm )		5672553	32					
ANR	5673163	Condition	disasm	221:6:4914:4919	5672553	0	True				
ANR	5673164	Identifier	disasm		5672553	0					
ANR	5673165	CompoundStatement		100:3:2312:2317	5672553	1					
ANR	5673166	IdentifierDeclStatement	int i ;	222:3:4927:4932	5672553	0	True				
ANR	5673167	IdentifierDecl	i		5672553	0					
ANR	5673168	IdentifierDeclType	int		5672553	0					
ANR	5673169	Identifier	i		5672553	1					
ANR	5673170	Statement	printf	223:3:4937:4942	5672553	1	True				
ANR	5673171	Statement	(	223:10:4944:4944	5672553	2	True				
ANR	5673172	Statement	"""--- 0x%08"""	223:11:4945:4955	5672553	3	True				
ANR	5673173	Statement	PFMT64x	223:22:4956:4962	5672553	4	True				
ANR	5673174	Statement	"""  """	223:30:4964:4967	5672553	5	True				
ANR	5673175	Statement	","	223:34:4968:4968	5672553	6	True				
ANR	5673176	Statement	op	223:36:4970:4971	5672553	7	True				
ANR	5673177	Statement	->	223:38:4972:4973	5672553	8	True				
ANR	5673178	Statement	a_off	223:40:4974:4978	5672553	9	True				
ANR	5673179	Statement	)	223:45:4979:4979	5672553	10	True				
ANR	5673180	ExpressionStatement		223:46:4980:4980	5672553	11	True				
ANR	5673181	IfStatement	if ( ! core )		5672553	12					
ANR	5673182	Condition	! core	224:7:4989:4993	5672553	0	True				
ANR	5673183	UnaryOperationExpression	! core		5672553	0					
ANR	5673184	UnaryOperator	!		5672553	0					
ANR	5673185	Identifier	core		5672553	1					
ANR	5673186	CompoundStatement		102:14:2381:2381	5672553	1					
ANR	5673187	ExpressionStatement	core = opencore ( file )	225:4:5002:5024	5672553	0	True				
ANR	5673188	AssignmentExpression	core = opencore ( file )		5672553	0		=			
ANR	5673189	Identifier	core		5672553	0					
ANR	5673190	CallExpression	opencore ( file )		5672553	1					
ANR	5673191	Callee	opencore		5672553	0					
ANR	5673192	Identifier	opencore		5672553	0					
ANR	5673193	ArgumentList	file		5672553	1					
ANR	5673194	Argument	file		5672553	0					
ANR	5673195	Identifier	file		5672553	0					
ANR	5673196	IfStatement	if ( arch )		5672553	1					
ANR	5673197	Condition	arch	226:8:5034:5037	5672553	0	True				
ANR	5673198	Identifier	arch		5672553	0					
ANR	5673199	CompoundStatement		104:14:2425:2425	5672553	1					
ANR	5673200	ExpressionStatement	"r_config_set ( core -> config , ""asm.arch"" , arch )"	227:5:5047:5092	5672553	0	True				
ANR	5673201	CallExpression	"r_config_set ( core -> config , ""asm.arch"" , arch )"		5672553	0					
ANR	5673202	Callee	r_config_set		5672553	0					
ANR	5673203	Identifier	r_config_set		5672553	0					
ANR	5673204	ArgumentList	core -> config		5672553	1					
ANR	5673205	Argument	core -> config		5672553	0					
ANR	5673206	PtrMemberAccess	core -> config		5672553	0					
ANR	5673207	Identifier	core		5672553	0					
ANR	5673208	Identifier	config		5672553	1					
ANR	5673209	Argument	"""asm.arch"""		5672553	1					
ANR	5673210	PrimaryExpression	"""asm.arch"""		5672553	0					
ANR	5673211	Argument	arch		5672553	2					
ANR	5673212	Identifier	arch		5672553	0					
ANR	5673213	IfStatement	if ( bits )		5672553	2					
ANR	5673214	Condition	bits	229:8:5108:5111	5672553	0	True				
ANR	5673215	Identifier	bits		5672553	0					
ANR	5673216	CompoundStatement		107:14:2499:2499	5672553	1					
ANR	5673217	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bits"" , bits )"	230:5:5121:5168	5672553	0	True				
ANR	5673218	CallExpression	"r_config_set_i ( core -> config , ""asm.bits"" , bits )"		5672553	0					
ANR	5673219	Callee	r_config_set_i		5672553	0					
ANR	5673220	Identifier	r_config_set_i		5672553	0					
ANR	5673221	ArgumentList	core -> config		5672553	1					
ANR	5673222	Argument	core -> config		5672553	0					
ANR	5673223	PtrMemberAccess	core -> config		5672553	0					
ANR	5673224	Identifier	core		5672553	0					
ANR	5673225	Identifier	config		5672553	1					
ANR	5673226	Argument	"""asm.bits"""		5672553	1					
ANR	5673227	PrimaryExpression	"""asm.bits"""		5672553	0					
ANR	5673228	Argument	bits		5672553	2					
ANR	5673229	Identifier	bits		5672553	0					
ANR	5673230	ForStatement	for ( i = 0 ; i < op -> a_len ; i ++ )		5672553	13					
ANR	5673231	ForInit	i = 0 ;	233:8:5189:5194	5672553	0	True				
ANR	5673232	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673233	Identifier	i		5672553	0					
ANR	5673234	PrimaryExpression	0		5672553	1					
ANR	5673235	Condition	i < op -> a_len	233:15:5196:5208	5672553	1	True				
ANR	5673236	RelationalExpression	i < op -> a_len		5672553	0		<			
ANR	5673237	Identifier	i		5672553	0					
ANR	5673238	PtrMemberAccess	op -> a_len		5672553	1					
ANR	5673239	Identifier	op		5672553	0					
ANR	5673240	Identifier	a_len		5672553	1					
ANR	5673241	PostIncDecOperationExpression	i ++	233:30:5211:5213	5672553	2	True				
ANR	5673242	Identifier	i		5672553	0					
ANR	5673243	IncDec	++		5672553	1					
ANR	5673244	CompoundStatement		111:35:2601:2601	5672553	3					
ANR	5673245	ExpressionStatement	"printf ( ""%02x"" , op -> a_buf [ i ] )"	234:4:5222:5251	5672553	0	True				
ANR	5673246	CallExpression	"printf ( ""%02x"" , op -> a_buf [ i ] )"		5672553	0					
ANR	5673247	Callee	printf		5672553	0					
ANR	5673248	Identifier	printf		5672553	0					
ANR	5673249	ArgumentList	"""%02x"""		5672553	1					
ANR	5673250	Argument	"""%02x"""		5672553	0					
ANR	5673251	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673252	Argument	op -> a_buf [ i ]		5672553	1					
ANR	5673253	ArrayIndexing	op -> a_buf [ i ]		5672553	0					
ANR	5673254	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5673255	Identifier	op		5672553	0					
ANR	5673256	Identifier	a_buf		5672553	1					
ANR	5673257	Identifier	i		5672553	1					
ANR	5673258	ExpressionStatement	"printf ( ""\\n"" )"	236:3:5261:5274	5672553	14	True				
ANR	5673259	CallExpression	"printf ( ""\\n"" )"		5672553	0					
ANR	5673260	Callee	printf		5672553	0					
ANR	5673261	Identifier	printf		5672553	0					
ANR	5673262	ArgumentList	"""\\n"""		5672553	1					
ANR	5673263	Argument	"""\\n"""		5672553	0					
ANR	5673264	PrimaryExpression	"""\\n"""		5672553	0					
ANR	5673265	IfStatement	if ( core )		5672553	15					
ANR	5673266	Condition	core	237:7:5283:5286	5672553	0	True				
ANR	5673267	Identifier	core		5672553	0					
ANR	5673268	CompoundStatement		118:4:2789:2827	5672553	1					
ANR	5673269	IdentifierDeclStatement	"int len = R_MAX ( 4 , op -> a_len ) ;"	238:4:5295:5325	5672553	0	True				
ANR	5673270	IdentifierDecl	"len = R_MAX ( 4 , op -> a_len )"		5672553	0					
ANR	5673271	IdentifierDeclType	int		5672553	0					
ANR	5673272	Identifier	len		5672553	1					
ANR	5673273	AssignmentExpression	"len = R_MAX ( 4 , op -> a_len )"		5672553	2		=			
ANR	5673274	Identifier	len		5672553	0					
ANR	5673275	CallExpression	"R_MAX ( 4 , op -> a_len )"		5672553	1					
ANR	5673276	Callee	R_MAX		5672553	0					
ANR	5673277	Identifier	R_MAX		5672553	0					
ANR	5673278	ArgumentList	4		5672553	1					
ANR	5673279	Argument	4		5672553	0					
ANR	5673280	PrimaryExpression	4		5672553	0					
ANR	5673281	Argument	op -> a_len		5672553	1					
ANR	5673282	PtrMemberAccess	op -> a_len		5672553	0					
ANR	5673283	Identifier	op		5672553	0					
ANR	5673284	Identifier	a_len		5672553	1					
ANR	5673285	IdentifierDeclStatement	"RAsmCode * ac = r_asm_mdisassemble ( core -> assembler , op -> a_buf , len ) ;"	239:4:5331:5398	5672553	1	True				
ANR	5673286	IdentifierDecl	"* ac = r_asm_mdisassemble ( core -> assembler , op -> a_buf , len )"		5672553	0					
ANR	5673287	IdentifierDeclType	RAsmCode *		5672553	0					
ANR	5673288	Identifier	ac		5672553	1					
ANR	5673289	AssignmentExpression	"* ac = r_asm_mdisassemble ( core -> assembler , op -> a_buf , len )"		5672553	2		=			
ANR	5673290	Identifier	ac		5672553	0					
ANR	5673291	CallExpression	"r_asm_mdisassemble ( core -> assembler , op -> a_buf , len )"		5672553	1					
ANR	5673292	Callee	r_asm_mdisassemble		5672553	0					
ANR	5673293	Identifier	r_asm_mdisassemble		5672553	0					
ANR	5673294	ArgumentList	core -> assembler		5672553	1					
ANR	5673295	Argument	core -> assembler		5672553	0					
ANR	5673296	PtrMemberAccess	core -> assembler		5672553	0					
ANR	5673297	Identifier	core		5672553	0					
ANR	5673298	Identifier	assembler		5672553	1					
ANR	5673299	Argument	op -> a_buf		5672553	1					
ANR	5673300	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5673301	Identifier	op		5672553	0					
ANR	5673302	Identifier	a_buf		5672553	1					
ANR	5673303	Argument	len		5672553	2					
ANR	5673304	Identifier	len		5672553	0					
ANR	5673305	IdentifierDeclStatement	char * acbufasm = strdup ( ac -> assembly ) ;	240:4:5404:5442	5672553	2	True				
ANR	5673306	IdentifierDecl	* acbufasm = strdup ( ac -> assembly )		5672553	0					
ANR	5673307	IdentifierDeclType	char *		5672553	0					
ANR	5673308	Identifier	acbufasm		5672553	1					
ANR	5673309	AssignmentExpression	* acbufasm = strdup ( ac -> assembly )		5672553	2		=			
ANR	5673310	Identifier	acbufasm		5672553	0					
ANR	5673311	CallExpression	strdup ( ac -> assembly )		5672553	1					
ANR	5673312	Callee	strdup		5672553	0					
ANR	5673313	Identifier	strdup		5672553	0					
ANR	5673314	ArgumentList	ac -> assembly		5672553	1					
ANR	5673315	Argument	ac -> assembly		5672553	0					
ANR	5673316	PtrMemberAccess	ac -> assembly		5672553	0					
ANR	5673317	Identifier	ac		5672553	0					
ANR	5673318	Identifier	assembly		5672553	1					
ANR	5673319	IfStatement	if ( quiet )		5672553	3					
ANR	5673320	Condition	quiet	241:8:5452:5456	5672553	0	True				
ANR	5673321	Identifier	quiet		5672553	0					
ANR	5673322	CompoundStatement		120:5:2851:2899	5672553	1					
ANR	5673323	IdentifierDeclStatement	"char * bufasm = r_str_prefix_all ( acbufasm , ""- "" ) ;"	242:5:5466:5514	5672553	0	True				
ANR	5673324	IdentifierDecl	"* bufasm = r_str_prefix_all ( acbufasm , ""- "" )"		5672553	0					
ANR	5673325	IdentifierDeclType	char *		5672553	0					
ANR	5673326	Identifier	bufasm		5672553	1					
ANR	5673327	AssignmentExpression	"* bufasm = r_str_prefix_all ( acbufasm , ""- "" )"		5672553	2		=			
ANR	5673328	Identifier	bufasm		5672553	0					
ANR	5673329	CallExpression	"r_str_prefix_all ( acbufasm , ""- "" )"		5672553	1					
ANR	5673330	Callee	r_str_prefix_all		5672553	0					
ANR	5673331	Identifier	r_str_prefix_all		5672553	0					
ANR	5673332	ArgumentList	acbufasm		5672553	1					
ANR	5673333	Argument	acbufasm		5672553	0					
ANR	5673334	Identifier	acbufasm		5672553	0					
ANR	5673335	Argument	"""- """		5672553	1					
ANR	5673336	PrimaryExpression	"""- """		5672553	0					
ANR	5673337	ExpressionStatement	"printf ( ""%s\\n"" , bufasm )"	243:5:5521:5544	5672553	1	True				
ANR	5673338	CallExpression	"printf ( ""%s\\n"" , bufasm )"		5672553	0					
ANR	5673339	Callee	printf		5672553	0					
ANR	5673340	Identifier	printf		5672553	0					
ANR	5673341	ArgumentList	"""%s\\n"""		5672553	1					
ANR	5673342	Argument	"""%s\\n"""		5672553	0					
ANR	5673343	PrimaryExpression	"""%s\\n"""		5672553	0					
ANR	5673344	Argument	bufasm		5672553	1					
ANR	5673345	Identifier	bufasm		5672553	0					
ANR	5673346	ExpressionStatement	free ( bufasm )	244:5:5551:5564	5672553	2	True				
ANR	5673347	CallExpression	free ( bufasm )		5672553	0					
ANR	5673348	Callee	free		5672553	0					
ANR	5673349	Identifier	free		5672553	0					
ANR	5673350	ArgumentList	bufasm		5672553	1					
ANR	5673351	Argument	bufasm		5672553	0					
ANR	5673352	Identifier	bufasm		5672553	0					
ANR	5673353	ExpressionStatement	free ( acbufasm )	245:5:5571:5586	5672553	3	True				
ANR	5673354	CallExpression	free ( acbufasm )		5672553	0					
ANR	5673355	Callee	free		5672553	0					
ANR	5673356	Identifier	free		5672553	0					
ANR	5673357	ArgumentList	acbufasm		5672553	1					
ANR	5673358	Argument	acbufasm		5672553	0					
ANR	5673359	Identifier	acbufasm		5672553	0					
ANR	5673360	ElseStatement	else		5672553	0					
ANR	5673361	CompoundStatement		124:11:2984:2984	5672553	0					
ANR	5673362	Statement	char	247:5:5606:5609	5672553	0	True				
ANR	5673363	Statement	*	247:10:5611:5611	5672553	1	True				
ANR	5673364	Statement	bufasm	247:11:5612:5617	5672553	2	True				
ANR	5673365	Statement	=	247:18:5619:5619	5672553	3	True				
ANR	5673366	Statement	r_str_prefix_all	247:20:5621:5636	5672553	4	True				
ANR	5673367	Statement	(	247:37:5638:5638	5672553	5	True				
ANR	5673368	Statement	acbufasm	247:38:5639:5646	5672553	6	True				
ANR	5673369	Statement	","	247:46:5647:5647	5672553	7	True				
ANR	5673370	Statement	Color_RED	247:48:5649:5657	5672553	8	True				
ANR	5673371	Statement	"""- """	247:57:5658:5661	5672553	9	True				
ANR	5673372	Statement	)	247:61:5662:5662	5672553	10	True				
ANR	5673373	ExpressionStatement		247:62:5663:5663	5672553	11	True				
ANR	5673374	Statement	printf	248:5:5670:5675	5672553	12	True				
ANR	5673375	Statement	(	248:12:5677:5677	5672553	13	True				
ANR	5673376	Statement	"""%s"""	248:13:5678:5681	5672553	14	True				
ANR	5673377	Statement	Color_RESET	248:17:5682:5692	5672553	15	True				
ANR	5673378	Statement	","	248:28:5693:5693	5672553	16	True				
ANR	5673379	Statement	bufasm	248:30:5695:5700	5672553	17	True				
ANR	5673380	Statement	)	248:36:5701:5701	5672553	18	True				
ANR	5673381	ExpressionStatement		248:37:5702:5702	5672553	19	True				
ANR	5673382	ExpressionStatement	free ( bufasm )	249:5:5709:5722	5672553	20	True				
ANR	5673383	CallExpression	free ( bufasm )		5672553	0					
ANR	5673384	Callee	free		5672553	0					
ANR	5673385	Identifier	free		5672553	0					
ANR	5673386	ArgumentList	bufasm		5672553	1					
ANR	5673387	Argument	bufasm		5672553	0					
ANR	5673388	Identifier	bufasm		5672553	0					
ANR	5673389	ExpressionStatement	free ( acbufasm )	250:5:5729:5744	5672553	21	True				
ANR	5673390	CallExpression	free ( acbufasm )		5672553	0					
ANR	5673391	Callee	free		5672553	0					
ANR	5673392	Identifier	free		5672553	0					
ANR	5673393	ArgumentList	acbufasm		5672553	1					
ANR	5673394	Argument	acbufasm		5672553	0					
ANR	5673395	Identifier	acbufasm		5672553	0					
ANR	5673396	ElseStatement	else		5672553	0					
ANR	5673397	CompoundStatement		132:9:3180:3180	5672553	0					
ANR	5673398	Statement	printf	255:3:5800:5805	5672553	0	True				
ANR	5673399	Statement	(	255:10:5807:5807	5672553	1	True				
ANR	5673400	Statement	"""0x%08"""	255:11:5808:5814	5672553	2	True				
ANR	5673401	Statement	PFMT64x	255:18:5815:5821	5672553	3	True				
ANR	5673402	Statement	""" """	255:26:5823:5825	5672553	4	True				
ANR	5673403	Statement	","	255:29:5826:5826	5672553	5	True				
ANR	5673404	Statement	op	255:31:5828:5829	5672553	6	True				
ANR	5673405	Statement	->	255:33:5830:5831	5672553	7	True				
ANR	5673406	Statement	a_off	255:35:5832:5836	5672553	8	True				
ANR	5673407	Statement	)	255:40:5837:5837	5672553	9	True				
ANR	5673408	ExpressionStatement		255:41:5838:5838	5672553	10	True				
ANR	5673409	ForStatement	for ( i = 0 ; i < op -> a_len ; i ++ )		5672553	11					
ANR	5673410	ForInit	i = 0 ;	256:8:5848:5853	5672553	0	True				
ANR	5673411	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673412	Identifier	i		5672553	0					
ANR	5673413	PrimaryExpression	0		5672553	1					
ANR	5673414	Condition	i < op -> a_len	256:15:5855:5867	5672553	1	True				
ANR	5673415	RelationalExpression	i < op -> a_len		5672553	0		<			
ANR	5673416	Identifier	i		5672553	0					
ANR	5673417	PtrMemberAccess	op -> a_len		5672553	1					
ANR	5673418	Identifier	op		5672553	0					
ANR	5673419	Identifier	a_len		5672553	1					
ANR	5673420	PostIncDecOperationExpression	i ++	256:30:5870:5872	5672553	2	True				
ANR	5673421	Identifier	i		5672553	0					
ANR	5673422	IncDec	++		5672553	1					
ANR	5673423	CompoundStatement		134:35:3260:3260	5672553	3					
ANR	5673424	ExpressionStatement	"printf ( ""%02x"" , op -> a_buf [ i ] )"	257:4:5881:5910	5672553	0	True				
ANR	5673425	CallExpression	"printf ( ""%02x"" , op -> a_buf [ i ] )"		5672553	0					
ANR	5673426	Callee	printf		5672553	0					
ANR	5673427	Identifier	printf		5672553	0					
ANR	5673428	ArgumentList	"""%02x"""		5672553	1					
ANR	5673429	Argument	"""%02x"""		5672553	0					
ANR	5673430	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673431	Argument	op -> a_buf [ i ]		5672553	1					
ANR	5673432	ArrayIndexing	op -> a_buf [ i ]		5672553	0					
ANR	5673433	PtrMemberAccess	op -> a_buf		5672553	0					
ANR	5673434	Identifier	op		5672553	0					
ANR	5673435	Identifier	a_buf		5672553	1					
ANR	5673436	Identifier	i		5672553	1					
ANR	5673437	IfStatement	if ( disasm )		5672553	33					
ANR	5673438	Condition	disasm	260:6:5927:5932	5672553	0	True				
ANR	5673439	Identifier	disasm		5672553	0					
ANR	5673440	CompoundStatement		139:3:3325:3330	5672553	1					
ANR	5673441	IdentifierDeclStatement	int i ;	261:3:5940:5945	5672553	0	True				
ANR	5673442	IdentifierDecl	i		5672553	0					
ANR	5673443	IdentifierDeclType	int		5672553	0					
ANR	5673444	Identifier	i		5672553	1					
ANR	5673445	Statement	printf	262:3:5950:5955	5672553	1	True				
ANR	5673446	Statement	(	262:10:5957:5957	5672553	2	True				
ANR	5673447	Statement	"""+++ 0x%08"""	262:11:5958:5968	5672553	3	True				
ANR	5673448	Statement	PFMT64x	262:22:5969:5975	5672553	4	True				
ANR	5673449	Statement	"""  """	262:30:5977:5980	5672553	5	True				
ANR	5673450	Statement	","	262:34:5981:5981	5672553	6	True				
ANR	5673451	Statement	op	262:36:5983:5984	5672553	7	True				
ANR	5673452	Statement	->	262:38:5985:5986	5672553	8	True				
ANR	5673453	Statement	b_off	262:40:5987:5991	5672553	9	True				
ANR	5673454	Statement	)	262:45:5992:5992	5672553	10	True				
ANR	5673455	ExpressionStatement		262:46:5993:5993	5672553	11	True				
ANR	5673456	IfStatement	if ( ! core )		5672553	12					
ANR	5673457	Condition	! core	263:7:6002:6006	5672553	0	True				
ANR	5673458	UnaryOperationExpression	! core		5672553	0					
ANR	5673459	UnaryOperator	!		5672553	0					
ANR	5673460	Identifier	core		5672553	1					
ANR	5673461	CompoundStatement		141:14:3394:3394	5672553	1					
ANR	5673462	ExpressionStatement	core = opencore ( NULL )	264:4:6015:6037	5672553	0	True				
ANR	5673463	AssignmentExpression	core = opencore ( NULL )		5672553	0		=			
ANR	5673464	Identifier	core		5672553	0					
ANR	5673465	CallExpression	opencore ( NULL )		5672553	1					
ANR	5673466	Callee	opencore		5672553	0					
ANR	5673467	Identifier	opencore		5672553	0					
ANR	5673468	ArgumentList	NULL		5672553	1					
ANR	5673469	Argument	NULL		5672553	0					
ANR	5673470	Identifier	NULL		5672553	0					
ANR	5673471	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	13					
ANR	5673472	ForInit	i = 0 ;	266:8:6052:6057	5672553	0	True				
ANR	5673473	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673474	Identifier	i		5672553	0					
ANR	5673475	PrimaryExpression	0		5672553	1					
ANR	5673476	Condition	i < op -> b_len	266:15:6059:6071	5672553	1	True				
ANR	5673477	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5673478	Identifier	i		5672553	0					
ANR	5673479	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5673480	Identifier	op		5672553	0					
ANR	5673481	Identifier	b_len		5672553	1					
ANR	5673482	PostIncDecOperationExpression	i ++	266:30:6074:6076	5672553	2	True				
ANR	5673483	Identifier	i		5672553	0					
ANR	5673484	IncDec	++		5672553	1					
ANR	5673485	CompoundStatement		144:35:3464:3464	5672553	3					
ANR	5673486	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	267:4:6085:6114	5672553	0	True				
ANR	5673487	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5673488	Callee	printf		5672553	0					
ANR	5673489	Identifier	printf		5672553	0					
ANR	5673490	ArgumentList	"""%02x"""		5672553	1					
ANR	5673491	Argument	"""%02x"""		5672553	0					
ANR	5673492	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673493	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5673494	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5673495	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5673496	Identifier	op		5672553	0					
ANR	5673497	Identifier	b_buf		5672553	1					
ANR	5673498	Identifier	i		5672553	1					
ANR	5673499	ExpressionStatement	"printf ( ""\\n"" )"	269:3:6124:6137	5672553	14	True				
ANR	5673500	CallExpression	"printf ( ""\\n"" )"		5672553	0					
ANR	5673501	Callee	printf		5672553	0					
ANR	5673502	Identifier	printf		5672553	0					
ANR	5673503	ArgumentList	"""\\n"""		5672553	1					
ANR	5673504	Argument	"""\\n"""		5672553	0					
ANR	5673505	PrimaryExpression	"""\\n"""		5672553	0					
ANR	5673506	IfStatement	if ( core )		5672553	15					
ANR	5673507	Condition	core	270:7:6146:6149	5672553	0	True				
ANR	5673508	Identifier	core		5672553	0					
ANR	5673509	CompoundStatement		151:4:3652:3690	5672553	1					
ANR	5673510	IdentifierDeclStatement	"int len = R_MAX ( 4 , op -> b_len ) ;"	271:4:6158:6188	5672553	0	True				
ANR	5673511	IdentifierDecl	"len = R_MAX ( 4 , op -> b_len )"		5672553	0					
ANR	5673512	IdentifierDeclType	int		5672553	0					
ANR	5673513	Identifier	len		5672553	1					
ANR	5673514	AssignmentExpression	"len = R_MAX ( 4 , op -> b_len )"		5672553	2		=			
ANR	5673515	Identifier	len		5672553	0					
ANR	5673516	CallExpression	"R_MAX ( 4 , op -> b_len )"		5672553	1					
ANR	5673517	Callee	R_MAX		5672553	0					
ANR	5673518	Identifier	R_MAX		5672553	0					
ANR	5673519	ArgumentList	4		5672553	1					
ANR	5673520	Argument	4		5672553	0					
ANR	5673521	PrimaryExpression	4		5672553	0					
ANR	5673522	Argument	op -> b_len		5672553	1					
ANR	5673523	PtrMemberAccess	op -> b_len		5672553	0					
ANR	5673524	Identifier	op		5672553	0					
ANR	5673525	Identifier	b_len		5672553	1					
ANR	5673526	IdentifierDeclStatement	"RAsmCode * ac = r_asm_mdisassemble ( core -> assembler , op -> b_buf , len ) ;"	272:4:6194:6261	5672553	1	True				
ANR	5673527	IdentifierDecl	"* ac = r_asm_mdisassemble ( core -> assembler , op -> b_buf , len )"		5672553	0					
ANR	5673528	IdentifierDeclType	RAsmCode *		5672553	0					
ANR	5673529	Identifier	ac		5672553	1					
ANR	5673530	AssignmentExpression	"* ac = r_asm_mdisassemble ( core -> assembler , op -> b_buf , len )"		5672553	2		=			
ANR	5673531	Identifier	ac		5672553	0					
ANR	5673532	CallExpression	"r_asm_mdisassemble ( core -> assembler , op -> b_buf , len )"		5672553	1					
ANR	5673533	Callee	r_asm_mdisassemble		5672553	0					
ANR	5673534	Identifier	r_asm_mdisassemble		5672553	0					
ANR	5673535	ArgumentList	core -> assembler		5672553	1					
ANR	5673536	Argument	core -> assembler		5672553	0					
ANR	5673537	PtrMemberAccess	core -> assembler		5672553	0					
ANR	5673538	Identifier	core		5672553	0					
ANR	5673539	Identifier	assembler		5672553	1					
ANR	5673540	Argument	op -> b_buf		5672553	1					
ANR	5673541	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5673542	Identifier	op		5672553	0					
ANR	5673543	Identifier	b_buf		5672553	1					
ANR	5673544	Argument	len		5672553	2					
ANR	5673545	Identifier	len		5672553	0					
ANR	5673546	IdentifierDeclStatement	char * acbufasm = strdup ( ac -> assembly ) ;	273:4:6267:6305	5672553	2	True				
ANR	5673547	IdentifierDecl	* acbufasm = strdup ( ac -> assembly )		5672553	0					
ANR	5673548	IdentifierDeclType	char *		5672553	0					
ANR	5673549	Identifier	acbufasm		5672553	1					
ANR	5673550	AssignmentExpression	* acbufasm = strdup ( ac -> assembly )		5672553	2		=			
ANR	5673551	Identifier	acbufasm		5672553	0					
ANR	5673552	CallExpression	strdup ( ac -> assembly )		5672553	1					
ANR	5673553	Callee	strdup		5672553	0					
ANR	5673554	Identifier	strdup		5672553	0					
ANR	5673555	ArgumentList	ac -> assembly		5672553	1					
ANR	5673556	Argument	ac -> assembly		5672553	0					
ANR	5673557	PtrMemberAccess	ac -> assembly		5672553	0					
ANR	5673558	Identifier	ac		5672553	0					
ANR	5673559	Identifier	assembly		5672553	1					
ANR	5673560	IfStatement	if ( quiet )		5672553	3					
ANR	5673561	Condition	quiet	274:8:6315:6319	5672553	0	True				
ANR	5673562	Identifier	quiet		5672553	0					
ANR	5673563	CompoundStatement		153:5:3714:3762	5672553	1					
ANR	5673564	IdentifierDeclStatement	"char * bufasm = r_str_prefix_all ( acbufasm , ""+ "" ) ;"	275:5:6329:6377	5672553	0	True				
ANR	5673565	IdentifierDecl	"* bufasm = r_str_prefix_all ( acbufasm , ""+ "" )"		5672553	0					
ANR	5673566	IdentifierDeclType	char *		5672553	0					
ANR	5673567	Identifier	bufasm		5672553	1					
ANR	5673568	AssignmentExpression	"* bufasm = r_str_prefix_all ( acbufasm , ""+ "" )"		5672553	2		=			
ANR	5673569	Identifier	bufasm		5672553	0					
ANR	5673570	CallExpression	"r_str_prefix_all ( acbufasm , ""+ "" )"		5672553	1					
ANR	5673571	Callee	r_str_prefix_all		5672553	0					
ANR	5673572	Identifier	r_str_prefix_all		5672553	0					
ANR	5673573	ArgumentList	acbufasm		5672553	1					
ANR	5673574	Argument	acbufasm		5672553	0					
ANR	5673575	Identifier	acbufasm		5672553	0					
ANR	5673576	Argument	"""+ """		5672553	1					
ANR	5673577	PrimaryExpression	"""+ """		5672553	0					
ANR	5673578	ExpressionStatement	"printf ( ""%s\\n"" , bufasm )"	276:5:6384:6407	5672553	1	True				
ANR	5673579	CallExpression	"printf ( ""%s\\n"" , bufasm )"		5672553	0					
ANR	5673580	Callee	printf		5672553	0					
ANR	5673581	Identifier	printf		5672553	0					
ANR	5673582	ArgumentList	"""%s\\n"""		5672553	1					
ANR	5673583	Argument	"""%s\\n"""		5672553	0					
ANR	5673584	PrimaryExpression	"""%s\\n"""		5672553	0					
ANR	5673585	Argument	bufasm		5672553	1					
ANR	5673586	Identifier	bufasm		5672553	0					
ANR	5673587	ExpressionStatement	free ( bufasm )	277:5:6414:6427	5672553	2	True				
ANR	5673588	CallExpression	free ( bufasm )		5672553	0					
ANR	5673589	Callee	free		5672553	0					
ANR	5673590	Identifier	free		5672553	0					
ANR	5673591	ArgumentList	bufasm		5672553	1					
ANR	5673592	Argument	bufasm		5672553	0					
ANR	5673593	Identifier	bufasm		5672553	0					
ANR	5673594	ExpressionStatement	free ( acbufasm )	278:5:6434:6449	5672553	3	True				
ANR	5673595	CallExpression	free ( acbufasm )		5672553	0					
ANR	5673596	Callee	free		5672553	0					
ANR	5673597	Identifier	free		5672553	0					
ANR	5673598	ArgumentList	acbufasm		5672553	1					
ANR	5673599	Argument	acbufasm		5672553	0					
ANR	5673600	Identifier	acbufasm		5672553	0					
ANR	5673601	ElseStatement	else		5672553	0					
ANR	5673602	CompoundStatement		157:11:3847:3847	5672553	0					
ANR	5673603	Statement	char	280:5:6469:6472	5672553	0	True				
ANR	5673604	Statement	*	280:10:6474:6474	5672553	1	True				
ANR	5673605	Statement	bufasm	280:11:6475:6480	5672553	2	True				
ANR	5673606	Statement	=	280:18:6482:6482	5672553	3	True				
ANR	5673607	Statement	r_str_prefix_all	280:20:6484:6499	5672553	4	True				
ANR	5673608	Statement	(	280:37:6501:6501	5672553	5	True				
ANR	5673609	Statement	acbufasm	280:38:6502:6509	5672553	6	True				
ANR	5673610	Statement	","	280:46:6510:6510	5672553	7	True				
ANR	5673611	Statement	Color_GREEN	280:48:6512:6522	5672553	8	True				
ANR	5673612	Statement	"""+ """	280:59:6523:6526	5672553	9	True				
ANR	5673613	Statement	)	280:63:6527:6527	5672553	10	True				
ANR	5673614	ExpressionStatement		280:64:6528:6528	5672553	11	True				
ANR	5673615	Statement	printf	281:5:6535:6540	5672553	12	True				
ANR	5673616	Statement	(	281:12:6542:6542	5672553	13	True				
ANR	5673617	Statement	"""%s\\n"""	281:13:6543:6548	5672553	14	True				
ANR	5673618	Statement	Color_RESET	281:20:6550:6560	5672553	15	True				
ANR	5673619	Statement	","	281:31:6561:6561	5672553	16	True				
ANR	5673620	Statement	bufasm	281:33:6563:6568	5672553	17	True				
ANR	5673621	Statement	)	281:39:6569:6569	5672553	18	True				
ANR	5673622	ExpressionStatement		281:40:6570:6570	5672553	19	True				
ANR	5673623	ExpressionStatement	free ( bufasm )	282:5:6577:6590	5672553	20	True				
ANR	5673624	CallExpression	free ( bufasm )		5672553	0					
ANR	5673625	Callee	free		5672553	0					
ANR	5673626	Identifier	free		5672553	0					
ANR	5673627	ArgumentList	bufasm		5672553	1					
ANR	5673628	Argument	bufasm		5672553	0					
ANR	5673629	Identifier	bufasm		5672553	0					
ANR	5673630	ExpressionStatement	free ( acbufasm )	283:5:6597:6612	5672553	21	True				
ANR	5673631	CallExpression	free ( acbufasm )		5672553	0					
ANR	5673632	Callee	free		5672553	0					
ANR	5673633	Identifier	free		5672553	0					
ANR	5673634	ArgumentList	acbufasm		5672553	1					
ANR	5673635	Argument	acbufasm		5672553	0					
ANR	5673636	Identifier	acbufasm		5672553	0					
ANR	5673637	ElseStatement	else		5672553	0					
ANR	5673638	CompoundStatement		165:9:4048:4048	5672553	0					
ANR	5673639	ExpressionStatement	"printf ( "" => "" )"	288:3:6668:6683	5672553	0	True				
ANR	5673640	CallExpression	"printf ( "" => "" )"		5672553	0					
ANR	5673641	Callee	printf		5672553	0					
ANR	5673642	Identifier	printf		5672553	0					
ANR	5673643	ArgumentList	""" => """		5672553	1					
ANR	5673644	Argument	""" => """		5672553	0					
ANR	5673645	PrimaryExpression	""" => """		5672553	0					
ANR	5673646	ForStatement	for ( i = 0 ; i < op -> b_len ; i ++ )		5672553	1					
ANR	5673647	ForInit	i = 0 ;	289:8:6693:6698	5672553	0	True				
ANR	5673648	AssignmentExpression	i = 0		5672553	0		=			
ANR	5673649	Identifier	i		5672553	0					
ANR	5673650	PrimaryExpression	0		5672553	1					
ANR	5673651	Condition	i < op -> b_len	289:15:6700:6712	5672553	1	True				
ANR	5673652	RelationalExpression	i < op -> b_len		5672553	0		<			
ANR	5673653	Identifier	i		5672553	0					
ANR	5673654	PtrMemberAccess	op -> b_len		5672553	1					
ANR	5673655	Identifier	op		5672553	0					
ANR	5673656	Identifier	b_len		5672553	1					
ANR	5673657	PostIncDecOperationExpression	i ++	289:30:6715:6717	5672553	2	True				
ANR	5673658	Identifier	i		5672553	0					
ANR	5673659	IncDec	++		5672553	1					
ANR	5673660	CompoundStatement		167:35:4105:4105	5672553	3					
ANR	5673661	ExpressionStatement	"printf ( ""%02x"" , op -> b_buf [ i ] )"	290:4:6726:6755	5672553	0	True				
ANR	5673662	CallExpression	"printf ( ""%02x"" , op -> b_buf [ i ] )"		5672553	0					
ANR	5673663	Callee	printf		5672553	0					
ANR	5673664	Identifier	printf		5672553	0					
ANR	5673665	ArgumentList	"""%02x"""		5672553	1					
ANR	5673666	Argument	"""%02x"""		5672553	0					
ANR	5673667	PrimaryExpression	"""%02x"""		5672553	0					
ANR	5673668	Argument	op -> b_buf [ i ]		5672553	1					
ANR	5673669	ArrayIndexing	op -> b_buf [ i ]		5672553	0					
ANR	5673670	PtrMemberAccess	op -> b_buf		5672553	0					
ANR	5673671	Identifier	op		5672553	0					
ANR	5673672	Identifier	b_buf		5672553	1					
ANR	5673673	Identifier	i		5672553	1					
ANR	5673674	Statement	printf	292:3:6765:6770	5672553	2	True				
ANR	5673675	Statement	(	292:10:6772:6772	5672553	3	True				
ANR	5673676	Statement	""" 0x%08"""	292:11:6773:6780	5672553	4	True				
ANR	5673677	Statement	PFMT64x	292:19:6781:6787	5672553	5	True				
ANR	5673678	Statement	"""\\n"""	292:27:6789:6792	5672553	6	True				
ANR	5673679	Statement	","	292:31:6793:6793	5672553	7	True				
ANR	5673680	Statement	op	292:33:6795:6796	5672553	8	True				
ANR	5673681	Statement	->	292:35:6797:6798	5672553	9	True				
ANR	5673682	Statement	b_off	292:37:6799:6803	5672553	10	True				
ANR	5673683	Statement	)	292:42:6804:6804	5672553	11	True				
ANR	5673684	ExpressionStatement		292:43:6805:6805	5672553	12	True				
ANR	5673685	ReturnStatement	return 1 ;	294:2:6813:6821	5672553	34	True				
ANR	5673686	PrimaryExpression	1		5672553	0					
ANR	5673687	ReturnStatement	return 0 ;	296:1:6827:6835	5672553	4	True				
ANR	5673688	PrimaryExpression	0		5672553	0					
ANR	5673689	ReturnType	static int		5672553	1					
ANR	5673690	Identifier	cb		5672553	2					
ANR	5673691	ParameterList	"RDiff * d , void * user , RDiffOp * op"		5672553	3					
ANR	5673692	Parameter	RDiff * d	123:14:2579:2586	5672553	0	True				
ANR	5673693	ParameterType	RDiff *		5672553	0					
ANR	5673694	Identifier	d		5672553	1					
ANR	5673695	Parameter	void * user	123:24:2589:2598	5672553	1	True				
ANR	5673696	ParameterType	void *		5672553	0					
ANR	5673697	Identifier	user		5672553	1					
ANR	5673698	Parameter	RDiffOp * op	123:36:2601:2611	5672553	2	True				
ANR	5673699	ParameterType	RDiffOp *		5672553	0					
ANR	5673700	Identifier	op		5672553	1					
ANR	5673701	CFGEntryNode	ENTRY		5672553		True				
ANR	5673702	CFGExitNode	EXIT		5672553		True				
ANR	5673703	Symbol	* op -> b_buf		5672553						
ANR	5673704	Symbol	Color_GREEN		5672553						
ANR	5673705	Symbol	* op		5672553						
ANR	5673706	Symbol	ac -> assembly		5672553						
ANR	5673707	Symbol	Color_RESET		5672553						
ANR	5673708	Symbol	delta		5672553						
ANR	5673709	Symbol	* core		5672553						
ANR	5673710	Symbol	core -> assembler		5672553						
ANR	5673711	Symbol	op -> a_buf		5672553						
ANR	5673712	Symbol	* ac		5672553						
ANR	5673713	Symbol	* op -> a_buf		5672553						
ANR	5673714	Symbol	* * op		5672553						
ANR	5673715	Symbol	disasm		5672553						
ANR	5673716	Symbol	op -> a_off		5672553						
ANR	5673717	Symbol	r_str_prefix_all		5672553						
ANR	5673718	Symbol	file		5672553						
ANR	5673719	Symbol	len		5672553						
ANR	5673720	Symbol	op -> b_buf		5672553						
ANR	5673721	Symbol	quiet		5672553						
ANR	5673722	Symbol	opencore		5672553						
ANR	5673723	Symbol	op -> b_off		5672553						
ANR	5673724	Symbol	core -> config		5672553						
ANR	5673725	Symbol	op		5672553						
ANR	5673726	Symbol	ac		5672553						
ANR	5673727	Symbol	NULL		5672553						
ANR	5673728	Symbol	d		5672553						
ANR	5673729	Symbol	count		5672553						
ANR	5673730	Symbol	bits		5672553						
ANR	5673731	Symbol	i		5672553						
ANR	5673732	Symbol	op -> a_len		5672553						
ANR	5673733	Symbol	diffmode		5672553						
ANR	5673734	Symbol	json_started		5672553						
ANR	5673735	Symbol	p		5672553						
ANR	5673736	Symbol	r_str_escape		5672553						
ANR	5673737	Symbol	showcount		5672553						
ANR	5673738	Symbol	core		5672553						
ANR	5673739	Symbol	s		5672553						
ANR	5673740	Symbol	* i		5672553						
ANR	5673741	Symbol	bufasm		5672553						
ANR	5673742	Symbol	op -> b_len		5672553						
ANR	5673743	Symbol	R_MAX		5672553						
ANR	5673744	Symbol	arch		5672553						
ANR	5673745	Symbol	strdup		5672553						
ANR	5673746	Symbol	Color_RED		5672553						
ANR	5673747	Symbol	r_asm_mdisassemble		5672553						
ANR	5673748	Symbol	acbufasm		5672553						
ANR	5673749	Symbol	user		5672553						
ANR	5673750	Symbol	* s		5672553						
ANR	5673751	DeclStmt									
ANR	5673752	Decl							ut64	ut64	gdiff_start
ANR	5673753	Function	print_bytes	301:0:6870:7052							
ANR	5673754	FunctionDef	"print_bytes (const void * p , size_t len , bool big_endian)"		5673753	0					
ANR	5673755	CompoundStatement		301:61:6931:7052	5673753	0					
ANR	5673756	IdentifierDeclStatement	size_t i ;	302:1:6934:6942	5673753	0	True				
ANR	5673757	IdentifierDecl	i		5673753	0					
ANR	5673758	IdentifierDeclType	size_t		5673753	0					
ANR	5673759	Identifier	i		5673753	1					
ANR	5673760	ForStatement	for ( i = 0 ; i < len ; ++ i )		5673753	1					
ANR	5673761	ForInit	i = 0 ;	303:6:6950:6955	5673753	0	True				
ANR	5673762	AssignmentExpression	i = 0		5673753	0		=			
ANR	5673763	Identifier	i		5673753	0					
ANR	5673764	PrimaryExpression	0		5673753	1					
ANR	5673765	Condition	i < len	303:13:6957:6963	5673753	1	True				
ANR	5673766	RelationalExpression	i < len		5673753	0		<			
ANR	5673767	Identifier	i		5673753	0					
ANR	5673768	Identifier	len		5673753	1					
ANR	5673769	UnaryExpression	++ i	303:22:6966:6968	5673753	2	True				
ANR	5673770	IncDec	++		5673753	0					
ANR	5673771	Identifier	i		5673753	1					
ANR	5673772	CompoundStatement		4:2:43:94	5673753	3					
ANR	5673773	IdentifierDeclStatement	ut8 ch = ( ( ut8 * ) p ) [ big_endian ? ( len - i - 1 ) : i ] ;	304:2:6975:7026	5673753	0	True				
ANR	5673774	IdentifierDecl	ch = ( ( ut8 * ) p ) [ big_endian ? ( len - i - 1 ) : i ]		5673753	0					
ANR	5673775	IdentifierDeclType	ut8		5673753	0					
ANR	5673776	Identifier	ch		5673753	1					
ANR	5673777	AssignmentExpression	ch = ( ( ut8 * ) p ) [ big_endian ? ( len - i - 1 ) : i ]		5673753	2		=			
ANR	5673778	Identifier	ch		5673753	0					
ANR	5673779	ArrayIndexing	( ( ut8 * ) p ) [ big_endian ? ( len - i - 1 ) : i ]		5673753	1					
ANR	5673780	CastExpression	( ut8 * ) p		5673753	0					
ANR	5673781	CastTarget	ut8 *		5673753	0					
ANR	5673782	Identifier	p		5673753	1					
ANR	5673783	ConditionalExpression	big_endian ? ( len - i - 1 ) : i		5673753	1					
ANR	5673784	Condition	big_endian		5673753	0					
ANR	5673785	Identifier	big_endian		5673753	0					
ANR	5673786	AdditiveExpression	len - i - 1		5673753	1		-			
ANR	5673787	Identifier	len		5673753	0					
ANR	5673788	AdditiveExpression	i - 1		5673753	1		-			
ANR	5673789	Identifier	i		5673753	0					
ANR	5673790	PrimaryExpression	1		5673753	1					
ANR	5673791	Identifier	i		5673753	2					
ANR	5673792	ExpressionStatement	"write ( 1 , & ch , 1 )"	305:2:7030:7047	5673753	1	True				
ANR	5673793	CallExpression	"write ( 1 , & ch , 1 )"		5673753	0					
ANR	5673794	Callee	write		5673753	0					
ANR	5673795	Identifier	write		5673753	0					
ANR	5673796	ArgumentList	1		5673753	1					
ANR	5673797	Argument	1		5673753	0					
ANR	5673798	PrimaryExpression	1		5673753	0					
ANR	5673799	Argument	& ch		5673753	1					
ANR	5673800	UnaryOperationExpression	& ch		5673753	0					
ANR	5673801	UnaryOperator	&		5673753	0					
ANR	5673802	Identifier	ch		5673753	1					
ANR	5673803	Argument	1		5673753	2					
ANR	5673804	PrimaryExpression	1		5673753	0					
ANR	5673805	ReturnType	void		5673753	1					
ANR	5673806	Identifier	print_bytes		5673753	2					
ANR	5673807	ParameterList	"const void * p , size_t len , bool big_endian"		5673753	3					
ANR	5673808	Parameter	const void * p	301:17:6887:6899	5673753	0	True				
ANR	5673809	ParameterType	const void *		5673753	0					
ANR	5673810	Identifier	p		5673753	1					
ANR	5673811	Parameter	size_t len	301:32:6902:6911	5673753	1	True				
ANR	5673812	ParameterType	size_t		5673753	0					
ANR	5673813	Identifier	len		5673753	1					
ANR	5673814	Parameter	bool big_endian	301:44:6914:6928	5673753	2	True				
ANR	5673815	ParameterType	bool		5673753	0					
ANR	5673816	Identifier	big_endian		5673753	1					
ANR	5673817	CFGEntryNode	ENTRY		5673753		True				
ANR	5673818	CFGExitNode	EXIT		5673753		True				
ANR	5673819	Symbol	p		5673753						
ANR	5673820	Symbol	* i		5673753						
ANR	5673821	Symbol	len		5673753						
ANR	5673822	Symbol	big_endian		5673753						
ANR	5673823	Symbol	ch		5673753						
ANR	5673824	Symbol	i		5673753						
ANR	5673825	Symbol	* big_endian		5673753						
ANR	5673826	Symbol	* p		5673753						
ANR	5673827	Symbol	& ch		5673753						
ANR	5673828	Symbol	* len		5673753						
ANR	5673829	Function	bcb	309:0:7055:9889							
ANR	5673830	FunctionDef	"bcb (RDiff * d , void * user , RDiffOp * op)"		5673829	0					
ANR	5673831	CompoundStatement		309:50:7105:9889	5673829	0					
ANR	5673832	IdentifierDeclStatement	ut64 offset_diff = op -> a_off - gdiff_start ;	310:1:7108:7150	5673829	0	True				
ANR	5673833	IdentifierDecl	offset_diff = op -> a_off - gdiff_start		5673829	0					
ANR	5673834	IdentifierDeclType	ut64		5673829	0					
ANR	5673835	Identifier	offset_diff		5673829	1					
ANR	5673836	AssignmentExpression	offset_diff = op -> a_off - gdiff_start		5673829	2		=			
ANR	5673837	Identifier	offset_diff		5673829	0					
ANR	5673838	AdditiveExpression	op -> a_off - gdiff_start		5673829	1		-			
ANR	5673839	PtrMemberAccess	op -> a_off		5673829	0					
ANR	5673840	Identifier	op		5673829	0					
ANR	5673841	Identifier	a_off		5673829	1					
ANR	5673842	Identifier	gdiff_start		5673829	1					
ANR	5673843	IdentifierDeclStatement	unsigned char opcode ;	311:1:7153:7173	5673829	1	True				
ANR	5673844	IdentifierDecl	opcode		5673829	0					
ANR	5673845	IdentifierDeclType	unsigned char		5673829	0					
ANR	5673846	Identifier	opcode		5673829	1					
ANR	5673847	IdentifierDeclStatement	unsigned short USAddr = 0 ;	312:1:7176:7201	5673829	2	True				
ANR	5673848	IdentifierDecl	USAddr = 0		5673829	0					
ANR	5673849	IdentifierDeclType	unsigned short		5673829	0					
ANR	5673850	Identifier	USAddr		5673829	1					
ANR	5673851	AssignmentExpression	USAddr = 0		5673829	2		=			
ANR	5673852	Identifier	USAddr		5673829	0					
ANR	5673853	PrimaryExpression	0		5673829	1					
ANR	5673854	IdentifierDeclStatement	int IAddr = 0 ;	313:1:7204:7217	5673829	3	True				
ANR	5673855	IdentifierDecl	IAddr = 0		5673829	0					
ANR	5673856	IdentifierDeclType	int		5673829	0					
ANR	5673857	Identifier	IAddr		5673829	1					
ANR	5673858	AssignmentExpression	IAddr = 0		5673829	2		=			
ANR	5673859	Identifier	IAddr		5673829	0					
ANR	5673860	PrimaryExpression	0		5673829	1					
ANR	5673861	IdentifierDeclStatement	unsigned char UCLen = 0 ;	314:1:7220:7243	5673829	4	True				
ANR	5673862	IdentifierDecl	UCLen = 0		5673829	0					
ANR	5673863	IdentifierDeclType	unsigned char		5673829	0					
ANR	5673864	Identifier	UCLen		5673829	1					
ANR	5673865	AssignmentExpression	UCLen = 0		5673829	2		=			
ANR	5673866	Identifier	UCLen		5673829	0					
ANR	5673867	PrimaryExpression	0		5673829	1					
ANR	5673868	IdentifierDeclStatement	unsigned short USLen = 0 ;	315:1:7246:7270	5673829	5	True				
ANR	5673869	IdentifierDecl	USLen = 0		5673829	0					
ANR	5673870	IdentifierDeclType	unsigned short		5673829	0					
ANR	5673871	Identifier	USLen		5673829	1					
ANR	5673872	AssignmentExpression	USLen = 0		5673829	2		=			
ANR	5673873	Identifier	USLen		5673829	0					
ANR	5673874	PrimaryExpression	0		5673829	1					
ANR	5673875	IdentifierDeclStatement	int ILen = 0 ;	316:1:7273:7285	5673829	6	True				
ANR	5673876	IdentifierDecl	ILen = 0		5673829	0					
ANR	5673877	IdentifierDeclType	int		5673829	0					
ANR	5673878	Identifier	ILen		5673829	1					
ANR	5673879	AssignmentExpression	ILen = 0		5673829	2		=			
ANR	5673880	Identifier	ILen		5673829	0					
ANR	5673881	PrimaryExpression	0		5673829	1					
ANR	5673882	IfStatement	if ( offset_diff > 0 )		5673829	7					
ANR	5673883	Condition	offset_diff > 0	319:5:7331:7345	5673829	0	True				
ANR	5673884	RelationalExpression	offset_diff > 0		5673829	0		>			
ANR	5673885	Identifier	offset_diff		5673829	0					
ANR	5673886	PrimaryExpression	0		5673829	1					
ANR	5673887	CompoundStatement		11:22:242:242	5673829	1					
ANR	5673888	IfStatement	if ( gdiff_start <= USHRT_MAX )		5673829	0					
ANR	5673889	Condition	gdiff_start <= USHRT_MAX	322:6:7384:7407	5673829	0	True				
ANR	5673890	RelationalExpression	gdiff_start <= USHRT_MAX		5673829	0		<=			
ANR	5673891	Identifier	gdiff_start		5673829	0					
ANR	5673892	Identifier	USHRT_MAX		5673829	1					
ANR	5673893	CompoundStatement		14:32:304:304	5673829	1					
ANR	5673894	ExpressionStatement	opcode = 249	323:3:7415:7427	5673829	0	True				
ANR	5673895	AssignmentExpression	opcode = 249		5673829	0		=			
ANR	5673896	Identifier	opcode		5673829	0					
ANR	5673897	PrimaryExpression	249		5673829	1					
ANR	5673898	ExpressionStatement	USAddr = ( unsigned short ) gdiff_start	324:3:7432:7469	5673829	1	True				
ANR	5673899	AssignmentExpression	USAddr = ( unsigned short ) gdiff_start		5673829	0		=			
ANR	5673900	Identifier	USAddr		5673829	0					
ANR	5673901	CastExpression	( unsigned short ) gdiff_start		5673829	1					
ANR	5673902	CastTarget	unsigned short		5673829	0					
ANR	5673903	Identifier	gdiff_start		5673829	1					
ANR	5673904	ElseStatement	else		5673829	0					
ANR	5673905	IfStatement	if ( gdiff_start <= INT_MAX )		5673829	0					
ANR	5673906	Condition	gdiff_start <= INT_MAX	325:13:7484:7505	5673829	0	True				
ANR	5673907	RelationalExpression	gdiff_start <= INT_MAX		5673829	0		<=			
ANR	5673908	Identifier	gdiff_start		5673829	0					
ANR	5673909	Identifier	INT_MAX		5673829	1					
ANR	5673910	CompoundStatement		17:37:402:402	5673829	1					
ANR	5673911	ExpressionStatement	opcode = 252	326:3:7513:7525	5673829	0	True				
ANR	5673912	AssignmentExpression	opcode = 252		5673829	0		=			
ANR	5673913	Identifier	opcode		5673829	0					
ANR	5673914	PrimaryExpression	252		5673829	1					
ANR	5673915	ExpressionStatement	IAddr = ( int ) gdiff_start	327:3:7530:7555	5673829	1	True				
ANR	5673916	AssignmentExpression	IAddr = ( int ) gdiff_start		5673829	0		=			
ANR	5673917	Identifier	IAddr		5673829	0					
ANR	5673918	CastExpression	( int ) gdiff_start		5673829	1					
ANR	5673919	CastTarget	int		5673829	0					
ANR	5673920	Identifier	gdiff_start		5673829	1					
ANR	5673921	ElseStatement	else		5673829	0					
ANR	5673922	CompoundStatement		20:9:460:460	5673829	0					
ANR	5673923	ExpressionStatement	opcode = 255	329:3:7571:7583	5673829	0	True				
ANR	5673924	AssignmentExpression	opcode = 255		5673829	0		=			
ANR	5673925	Identifier	opcode		5673829	0					
ANR	5673926	PrimaryExpression	255		5673829	1					
ANR	5673927	IfStatement	if ( opcode != 255 && offset_diff <= UCHAR_MAX )		5673829	1					
ANR	5673928	Condition	opcode != 255 && offset_diff <= UCHAR_MAX	333:6:7621:7661	5673829	0	True				
ANR	5673929	AndExpression	opcode != 255 && offset_diff <= UCHAR_MAX		5673829	0		&&			
ANR	5673930	EqualityExpression	opcode != 255		5673829	0		!=			
ANR	5673931	Identifier	opcode		5673829	0					
ANR	5673932	PrimaryExpression	255		5673829	1					
ANR	5673933	RelationalExpression	offset_diff <= UCHAR_MAX		5673829	1		<=			
ANR	5673934	Identifier	offset_diff		5673829	0					
ANR	5673935	Identifier	UCHAR_MAX		5673829	1					
ANR	5673936	CompoundStatement		25:49:558:558	5673829	1					
ANR	5673937	ExpressionStatement	UCLen = ( unsigned char ) offset_diff	334:3:7669:7704	5673829	0	True				
ANR	5673938	AssignmentExpression	UCLen = ( unsigned char ) offset_diff		5673829	0		=			
ANR	5673939	Identifier	UCLen		5673829	0					
ANR	5673940	CastExpression	( unsigned char ) offset_diff		5673829	1					
ANR	5673941	CastTarget	unsigned char		5673829	0					
ANR	5673942	Identifier	offset_diff		5673829	1					
ANR	5673943	ElseStatement	else		5673829	0					
ANR	5673944	IfStatement	if ( opcode != 255 && offset_diff <= USHRT_MAX )		5673829	0					
ANR	5673945	Condition	opcode != 255 && offset_diff <= USHRT_MAX	335:13:7719:7759	5673829	0	True				
ANR	5673946	AndExpression	opcode != 255 && offset_diff <= USHRT_MAX		5673829	0		&&			
ANR	5673947	EqualityExpression	opcode != 255		5673829	0		!=			
ANR	5673948	Identifier	opcode		5673829	0					
ANR	5673949	PrimaryExpression	255		5673829	1					
ANR	5673950	RelationalExpression	offset_diff <= USHRT_MAX		5673829	1		<=			
ANR	5673951	Identifier	offset_diff		5673829	0					
ANR	5673952	Identifier	USHRT_MAX		5673829	1					
ANR	5673953	CompoundStatement		27:56:656:656	5673829	1					
ANR	5673954	ExpressionStatement	USLen = ( unsigned short ) offset_diff	336:3:7767:7803	5673829	0	True				
ANR	5673955	AssignmentExpression	USLen = ( unsigned short ) offset_diff		5673829	0		=			
ANR	5673956	Identifier	USLen		5673829	0					
ANR	5673957	CastExpression	( unsigned short ) offset_diff		5673829	1					
ANR	5673958	CastTarget	unsigned short		5673829	0					
ANR	5673959	Identifier	offset_diff		5673829	1					
ANR	5673960	ExpressionStatement	opcode += 1	337:3:7808:7819	5673829	1	True				
ANR	5673961	AssignmentExpression	opcode += 1		5673829	0		+=			
ANR	5673962	Identifier	opcode		5673829	0					
ANR	5673963	PrimaryExpression	1		5673829	1					
ANR	5673964	ElseStatement	else		5673829	0					
ANR	5673965	IfStatement	if ( opcode != 255 && offset_diff <= INT_MAX )		5673829	0					
ANR	5673966	Condition	opcode != 255 && offset_diff <= INT_MAX	338:13:7834:7872	5673829	0	True				
ANR	5673967	AndExpression	opcode != 255 && offset_diff <= INT_MAX		5673829	0		&&			
ANR	5673968	EqualityExpression	opcode != 255		5673829	0		!=			
ANR	5673969	Identifier	opcode		5673829	0					
ANR	5673970	PrimaryExpression	255		5673829	1					
ANR	5673971	RelationalExpression	offset_diff <= INT_MAX		5673829	1		<=			
ANR	5673972	Identifier	offset_diff		5673829	0					
ANR	5673973	Identifier	INT_MAX		5673829	1					
ANR	5673974	CompoundStatement		30:54:769:769	5673829	1					
ANR	5673975	ExpressionStatement	ILen = ( int ) offset_diff	339:3:7880:7904	5673829	0	True				
ANR	5673976	AssignmentExpression	ILen = ( int ) offset_diff		5673829	0		=			
ANR	5673977	Identifier	ILen		5673829	0					
ANR	5673978	CastExpression	( int ) offset_diff		5673829	1					
ANR	5673979	CastTarget	int		5673829	0					
ANR	5673980	Identifier	offset_diff		5673829	1					
ANR	5673981	ExpressionStatement	opcode += 2	340:3:7909:7920	5673829	1	True				
ANR	5673982	AssignmentExpression	opcode += 2		5673829	0		+=			
ANR	5673983	Identifier	opcode		5673829	0					
ANR	5673984	PrimaryExpression	2		5673829	1					
ANR	5673985	ElseStatement	else		5673829	0					
ANR	5673986	IfStatement	if ( offset_diff > INT_MAX )		5673829	0					
ANR	5673987	Condition	offset_diff > INT_MAX	341:13:7935:7955	5673829	0	True				
ANR	5673988	RelationalExpression	offset_diff > INT_MAX		5673829	0		>			
ANR	5673989	Identifier	offset_diff		5673829	0					
ANR	5673990	Identifier	INT_MAX		5673829	1					
ANR	5673991	CompoundStatement		36:3:917:925	5673829	1					
ANR	5673992	IdentifierDeclStatement	int times = offset_diff / INT_MAX ;	342:3:7963:7996	5673829	0	True				
ANR	5673993	IdentifierDecl	times = offset_diff / INT_MAX		5673829	0					
ANR	5673994	IdentifierDeclType	int		5673829	0					
ANR	5673995	Identifier	times		5673829	1					
ANR	5673996	AssignmentExpression	times = offset_diff / INT_MAX		5673829	2		=			
ANR	5673997	Identifier	times		5673829	0					
ANR	5673998	MultiplicativeExpression	offset_diff / INT_MAX		5673829	1		/			
ANR	5673999	Identifier	offset_diff		5673829	0					
ANR	5674000	Identifier	INT_MAX		5673829	1					
ANR	5674001	IdentifierDeclStatement	int max = INT_MAX ;	343:3:8001:8018	5673829	1	True				
ANR	5674002	IdentifierDecl	max = INT_MAX		5673829	0					
ANR	5674003	IdentifierDeclType	int		5673829	0					
ANR	5674004	Identifier	max		5673829	1					
ANR	5674005	AssignmentExpression	max = INT_MAX		5673829	2		=			
ANR	5674006	Identifier	INT_MAX		5673829	0					
ANR	5674007	Identifier	INT_MAX		5673829	1					
ANR	5674008	IdentifierDeclStatement	size_t i ;	344:3:8023:8031	5673829	2	True				
ANR	5674009	IdentifierDecl	i		5673829	0					
ANR	5674010	IdentifierDeclType	size_t		5673829	0					
ANR	5674011	Identifier	i		5673829	1					
ANR	5674012	ForStatement	for ( i = 0 ; i < times ; i ++ )		5673829	3					
ANR	5674013	ForInit	i = 0 ;	345:8:8041:8046	5673829	0	True				
ANR	5674014	AssignmentExpression	i = 0		5673829	0		=			
ANR	5674015	Identifier	i		5673829	0					
ANR	5674016	PrimaryExpression	0		5673829	1					
ANR	5674017	Condition	i < times	345:15:8048:8056	5673829	1	True				
ANR	5674018	RelationalExpression	i < times		5673829	0		<			
ANR	5674019	Identifier	i		5673829	0					
ANR	5674020	Identifier	times		5673829	1					
ANR	5674021	PostIncDecOperationExpression	i ++	345:26:8059:8061	5673829	2	True				
ANR	5674022	Identifier	i		5673829	0					
ANR	5674023	IncDec	++		5673829	1					
ANR	5674024	CompoundStatement		37:31:958:958	5673829	3					
ANR	5674025	ExpressionStatement	"print_bytes ( & opcode , sizeof ( opcode ) , true )"	346:4:8070:8114	5673829	0	True				
ANR	5674026	CallExpression	"print_bytes ( & opcode , sizeof ( opcode ) , true )"		5673829	0					
ANR	5674027	Callee	print_bytes		5673829	0					
ANR	5674028	Identifier	print_bytes		5673829	0					
ANR	5674029	ArgumentList	& opcode		5673829	1					
ANR	5674030	Argument	& opcode		5673829	0					
ANR	5674031	UnaryOperationExpression	& opcode		5673829	0					
ANR	5674032	UnaryOperator	&		5673829	0					
ANR	5674033	Identifier	opcode		5673829	1					
ANR	5674034	Argument	sizeof ( opcode )		5673829	1					
ANR	5674035	SizeofExpression	sizeof ( opcode )		5673829	0					
ANR	5674036	Sizeof	sizeof		5673829	0					
ANR	5674037	SizeofOperand	opcode		5673829	1					
ANR	5674038	Argument	true		5673829	2					
ANR	5674039	Identifier	true		5673829	0					
ANR	5674040	ExpressionStatement	"print_bytes ( & max , sizeof ( max ) , true )"	349:4:8236:8274	5673829	1	True				
ANR	5674041	CallExpression	"print_bytes ( & max , sizeof ( max ) , true )"		5673829	0					
ANR	5674042	Callee	print_bytes		5673829	0					
ANR	5674043	Identifier	print_bytes		5673829	0					
ANR	5674044	ArgumentList	& max		5673829	1					
ANR	5674045	Argument	& max		5673829	0					
ANR	5674046	UnaryOperationExpression	& max		5673829	0					
ANR	5674047	UnaryOperator	&		5673829	0					
ANR	5674048	Identifier	max		5673829	1					
ANR	5674049	Argument	sizeof ( max )		5673829	1					
ANR	5674050	SizeofExpression	sizeof ( max )		5673829	0					
ANR	5674051	Sizeof	sizeof		5673829	0					
ANR	5674052	SizeofOperand	max		5673829	1					
ANR	5674053	Argument	true		5673829	2					
ANR	5674054	Identifier	true		5673829	0					
ANR	5674055	ExpressionStatement	"print_bytes ( & opcode , sizeof ( opcode ) , true )"	354:2:8315:8359	5673829	2	True				
ANR	5674056	CallExpression	"print_bytes ( & opcode , sizeof ( opcode ) , true )"		5673829	0					
ANR	5674057	Callee	print_bytes		5673829	0					
ANR	5674058	Identifier	print_bytes		5673829	0					
ANR	5674059	ArgumentList	& opcode		5673829	1					
ANR	5674060	Argument	& opcode		5673829	0					
ANR	5674061	UnaryOperationExpression	& opcode		5673829	0					
ANR	5674062	UnaryOperator	&		5673829	0					
ANR	5674063	Identifier	opcode		5673829	1					
ANR	5674064	Argument	sizeof ( opcode )		5673829	1					
ANR	5674065	SizeofExpression	sizeof ( opcode )		5673829	0					
ANR	5674066	Sizeof	sizeof		5673829	0					
ANR	5674067	SizeofOperand	opcode		5673829	1					
ANR	5674068	Argument	true		5673829	2					
ANR	5674069	Identifier	true		5673829	0					
ANR	5674070	IfStatement	if ( opcode <= 251 )		5673829	3					
ANR	5674071	Condition	opcode <= 251	357:6:8397:8409	5673829	0	True				
ANR	5674072	RelationalExpression	opcode <= 251		5673829	0		<=			
ANR	5674073	Identifier	opcode		5673829	0					
ANR	5674074	PrimaryExpression	251		5673829	1					
ANR	5674075	CompoundStatement		49:21:1306:1306	5673829	1					
ANR	5674076	ExpressionStatement	"print_bytes ( & USAddr , sizeof ( USAddr ) , true )"	358:3:8417:8461	5673829	0	True				
ANR	5674077	CallExpression	"print_bytes ( & USAddr , sizeof ( USAddr ) , true )"		5673829	0					
ANR	5674078	Callee	print_bytes		5673829	0					
ANR	5674079	Identifier	print_bytes		5673829	0					
ANR	5674080	ArgumentList	& USAddr		5673829	1					
ANR	5674081	Argument	& USAddr		5673829	0					
ANR	5674082	UnaryOperationExpression	& USAddr		5673829	0					
ANR	5674083	UnaryOperator	&		5673829	0					
ANR	5674084	Identifier	USAddr		5673829	1					
ANR	5674085	Argument	sizeof ( USAddr )		5673829	1					
ANR	5674086	SizeofExpression	sizeof ( USAddr )		5673829	0					
ANR	5674087	Sizeof	sizeof		5673829	0					
ANR	5674088	SizeofOperand	USAddr		5673829	1					
ANR	5674089	Argument	true		5673829	2					
ANR	5674090	Identifier	true		5673829	0					
ANR	5674091	ElseStatement	else		5673829	0					
ANR	5674092	IfStatement	if ( opcode < 255 )		5673829	0					
ANR	5674093	Condition	opcode < 255	359:13:8476:8487	5673829	0	True				
ANR	5674094	RelationalExpression	opcode < 255		5673829	0		<			
ANR	5674095	Identifier	opcode		5673829	0					
ANR	5674096	PrimaryExpression	255		5673829	1					
ANR	5674097	CompoundStatement		51:27:1384:1384	5673829	1					
ANR	5674098	ExpressionStatement	"print_bytes ( & IAddr , sizeof ( IAddr ) , true )"	360:3:8495:8537	5673829	0	True				
ANR	5674099	CallExpression	"print_bytes ( & IAddr , sizeof ( IAddr ) , true )"		5673829	0					
ANR	5674100	Callee	print_bytes		5673829	0					
ANR	5674101	Identifier	print_bytes		5673829	0					
ANR	5674102	ArgumentList	& IAddr		5673829	1					
ANR	5674103	Argument	& IAddr		5673829	0					
ANR	5674104	UnaryOperationExpression	& IAddr		5673829	0					
ANR	5674105	UnaryOperator	&		5673829	0					
ANR	5674106	Identifier	IAddr		5673829	1					
ANR	5674107	Argument	sizeof ( IAddr )		5673829	1					
ANR	5674108	SizeofExpression	sizeof ( IAddr )		5673829	0					
ANR	5674109	Sizeof	sizeof		5673829	0					
ANR	5674110	SizeofOperand	IAddr		5673829	1					
ANR	5674111	Argument	true		5673829	2					
ANR	5674112	Identifier	true		5673829	0					
ANR	5674113	ElseStatement	else		5673829	0					
ANR	5674114	CompoundStatement		53:9:1442:1442	5673829	0					
ANR	5674115	ExpressionStatement	"print_bytes ( & gdiff_start , sizeof ( gdiff_start ) , true )"	362:3:8553:8607	5673829	0	True				
ANR	5674116	CallExpression	"print_bytes ( & gdiff_start , sizeof ( gdiff_start ) , true )"		5673829	0					
ANR	5674117	Callee	print_bytes		5673829	0					
ANR	5674118	Identifier	print_bytes		5673829	0					
ANR	5674119	ArgumentList	& gdiff_start		5673829	1					
ANR	5674120	Argument	& gdiff_start		5673829	0					
ANR	5674121	UnaryOperationExpression	& gdiff_start		5673829	0					
ANR	5674122	UnaryOperator	&		5673829	0					
ANR	5674123	Identifier	gdiff_start		5673829	1					
ANR	5674124	Argument	sizeof ( gdiff_start )		5673829	1					
ANR	5674125	SizeofExpression	sizeof ( gdiff_start )		5673829	0					
ANR	5674126	Sizeof	sizeof		5673829	0					
ANR	5674127	SizeofOperand	gdiff_start		5673829	1					
ANR	5674128	Argument	true		5673829	2					
ANR	5674129	Identifier	true		5673829	0					
ANR	5674130	SwitchStatement	switch ( opcode )		5673829	4					
ANR	5674131	Condition	opcode	366:10:8651:8656	5673829	0	True				
ANR	5674132	Identifier	opcode		5673829	0					
ANR	5674133	CompoundStatement		58:18:1553:1553	5673829	1					
ANR	5674134	Label	case 249 :	367:2:8663:8671	5673829	0	True				
ANR	5674135	Label	case 252 :	368:2:8675:8683	5673829	1	True				
ANR	5674136	ExpressionStatement	"print_bytes ( & UCLen , sizeof ( UCLen ) , true )"	369:3:8688:8730	5673829	2	True				
ANR	5674137	CallExpression	"print_bytes ( & UCLen , sizeof ( UCLen ) , true )"		5673829	0					
ANR	5674138	Callee	print_bytes		5673829	0					
ANR	5674139	Identifier	print_bytes		5673829	0					
ANR	5674140	ArgumentList	& UCLen		5673829	1					
ANR	5674141	Argument	& UCLen		5673829	0					
ANR	5674142	UnaryOperationExpression	& UCLen		5673829	0					
ANR	5674143	UnaryOperator	&		5673829	0					
ANR	5674144	Identifier	UCLen		5673829	1					
ANR	5674145	Argument	sizeof ( UCLen )		5673829	1					
ANR	5674146	SizeofExpression	sizeof ( UCLen )		5673829	0					
ANR	5674147	Sizeof	sizeof		5673829	0					
ANR	5674148	SizeofOperand	UCLen		5673829	1					
ANR	5674149	Argument	true		5673829	2					
ANR	5674150	Identifier	true		5673829	0					
ANR	5674151	BreakStatement	break ;	370:3:8735:8740	5673829	3	True				
ANR	5674152	Label	case 250 :	371:2:8744:8752	5673829	4	True				
ANR	5674153	Label	case 253 :	372:2:8756:8764	5673829	5	True				
ANR	5674154	ExpressionStatement	"print_bytes ( & USLen , sizeof ( USLen ) , true )"	373:3:8769:8811	5673829	6	True				
ANR	5674155	CallExpression	"print_bytes ( & USLen , sizeof ( USLen ) , true )"		5673829	0					
ANR	5674156	Callee	print_bytes		5673829	0					
ANR	5674157	Identifier	print_bytes		5673829	0					
ANR	5674158	ArgumentList	& USLen		5673829	1					
ANR	5674159	Argument	& USLen		5673829	0					
ANR	5674160	UnaryOperationExpression	& USLen		5673829	0					
ANR	5674161	UnaryOperator	&		5673829	0					
ANR	5674162	Identifier	USLen		5673829	1					
ANR	5674163	Argument	sizeof ( USLen )		5673829	1					
ANR	5674164	SizeofExpression	sizeof ( USLen )		5673829	0					
ANR	5674165	Sizeof	sizeof		5673829	0					
ANR	5674166	SizeofOperand	USLen		5673829	1					
ANR	5674167	Argument	true		5673829	2					
ANR	5674168	Identifier	true		5673829	0					
ANR	5674169	BreakStatement	break ;	374:3:8816:8821	5673829	7	True				
ANR	5674170	Label	case 251 :	375:2:8825:8833	5673829	8	True				
ANR	5674171	Label	case 254 :	376:2:8837:8845	5673829	9	True				
ANR	5674172	Label	case 255 :	377:2:8849:8857	5673829	10	True				
ANR	5674173	ExpressionStatement	"print_bytes ( & ILen , sizeof ( ILen ) , true )"	378:3:8862:8902	5673829	11	True				
ANR	5674174	CallExpression	"print_bytes ( & ILen , sizeof ( ILen ) , true )"		5673829	0					
ANR	5674175	Callee	print_bytes		5673829	0					
ANR	5674176	Identifier	print_bytes		5673829	0					
ANR	5674177	ArgumentList	& ILen		5673829	1					
ANR	5674178	Argument	& ILen		5673829	0					
ANR	5674179	UnaryOperationExpression	& ILen		5673829	0					
ANR	5674180	UnaryOperator	&		5673829	0					
ANR	5674181	Identifier	ILen		5673829	1					
ANR	5674182	Argument	sizeof ( ILen )		5673829	1					
ANR	5674183	SizeofExpression	sizeof ( ILen )		5673829	0					
ANR	5674184	Sizeof	sizeof		5673829	0					
ANR	5674185	SizeofOperand	ILen		5673829	1					
ANR	5674186	Argument	true		5673829	2					
ANR	5674187	Identifier	true		5673829	0					
ANR	5674188	BreakStatement	break ;	379:3:8907:8912	5673829	12	True				
ANR	5674189	IfStatement	if ( op -> b_len <= 246 )		5673829	8					
ANR	5674190	Condition	op -> b_len <= 246	384:5:8946:8961	5673829	0	True				
ANR	5674191	RelationalExpression	op -> b_len <= 246		5673829	0		<=			
ANR	5674192	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674193	Identifier	op		5673829	0					
ANR	5674194	Identifier	b_len		5673829	1					
ANR	5674195	PrimaryExpression	246		5673829	1					
ANR	5674196	CompoundStatement		77:2:1862:1882	5673829	1					
ANR	5674197	IdentifierDeclStatement	ut8 data = op -> b_len ;	385:2:8968:8988	5673829	0	True				
ANR	5674198	IdentifierDecl	data = op -> b_len		5673829	0					
ANR	5674199	IdentifierDeclType	ut8		5673829	0					
ANR	5674200	Identifier	data		5673829	1					
ANR	5674201	AssignmentExpression	data = op -> b_len		5673829	2		=			
ANR	5674202	Identifier	data		5673829	0					
ANR	5674203	PtrMemberAccess	op -> b_len		5673829	1					
ANR	5674204	Identifier	op		5673829	0					
ANR	5674205	Identifier	b_len		5673829	1					
ANR	5674206	ExpressionStatement	"write ( 1 , & data , 1 )"	386:2:8992:9011	5673829	1	True				
ANR	5674207	CallExpression	"write ( 1 , & data , 1 )"		5673829	0					
ANR	5674208	Callee	write		5673829	0					
ANR	5674209	Identifier	write		5673829	0					
ANR	5674210	ArgumentList	1		5673829	1					
ANR	5674211	Argument	1		5673829	0					
ANR	5674212	PrimaryExpression	1		5673829	0					
ANR	5674213	Argument	& data		5673829	1					
ANR	5674214	UnaryOperationExpression	& data		5673829	0					
ANR	5674215	UnaryOperator	&		5673829	0					
ANR	5674216	Identifier	data		5673829	1					
ANR	5674217	Argument	1		5673829	2					
ANR	5674218	PrimaryExpression	1		5673829	0					
ANR	5674219	ElseStatement	else		5673829	0					
ANR	5674220	IfStatement	if ( op -> b_len <= USHRT_MAX )		5673829	0					
ANR	5674221	Condition	op -> b_len <= USHRT_MAX	387:12:9025:9046	5673829	0	True				
ANR	5674222	RelationalExpression	op -> b_len <= USHRT_MAX		5673829	0		<=			
ANR	5674223	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674224	Identifier	op		5673829	0					
ANR	5674225	Identifier	b_len		5673829	1					
ANR	5674226	Identifier	USHRT_MAX		5673829	1					
ANR	5674227	CompoundStatement		81:2:1975:1989	5673829	1					
ANR	5674228	ExpressionStatement	USLen = ( ut16 ) op -> b_len	388:2:9053:9077	5673829	0	True				
ANR	5674229	AssignmentExpression	USLen = ( ut16 ) op -> b_len		5673829	0		=			
ANR	5674230	Identifier	USLen		5673829	0					
ANR	5674231	CastExpression	( ut16 ) op -> b_len		5673829	1					
ANR	5674232	CastTarget	ut16		5673829	0					
ANR	5674233	PtrMemberAccess	op -> b_len		5673829	1					
ANR	5674234	Identifier	op		5673829	0					
ANR	5674235	Identifier	b_len		5673829	1					
ANR	5674236	IdentifierDeclStatement	ut8 data = 247 ;	389:2:9081:9095	5673829	1	True				
ANR	5674237	IdentifierDecl	data = 247		5673829	0					
ANR	5674238	IdentifierDeclType	ut8		5673829	0					
ANR	5674239	Identifier	data		5673829	1					
ANR	5674240	AssignmentExpression	data = 247		5673829	2		=			
ANR	5674241	Identifier	data		5673829	0					
ANR	5674242	PrimaryExpression	247		5673829	1					
ANR	5674243	ExpressionStatement	"write ( 1 , & data , 1 )"	390:2:9099:9118	5673829	2	True				
ANR	5674244	CallExpression	"write ( 1 , & data , 1 )"		5673829	0					
ANR	5674245	Callee	write		5673829	0					
ANR	5674246	Identifier	write		5673829	0					
ANR	5674247	ArgumentList	1		5673829	1					
ANR	5674248	Argument	1		5673829	0					
ANR	5674249	PrimaryExpression	1		5673829	0					
ANR	5674250	Argument	& data		5673829	1					
ANR	5674251	UnaryOperationExpression	& data		5673829	0					
ANR	5674252	UnaryOperator	&		5673829	0					
ANR	5674253	Identifier	data		5673829	1					
ANR	5674254	Argument	1		5673829	2					
ANR	5674255	PrimaryExpression	1		5673829	0					
ANR	5674256	ExpressionStatement	"print_bytes ( & USLen , sizeof ( USLen ) , true )"	391:2:9122:9164	5673829	3	True				
ANR	5674257	CallExpression	"print_bytes ( & USLen , sizeof ( USLen ) , true )"		5673829	0					
ANR	5674258	Callee	print_bytes		5673829	0					
ANR	5674259	Identifier	print_bytes		5673829	0					
ANR	5674260	ArgumentList	& USLen		5673829	1					
ANR	5674261	Argument	& USLen		5673829	0					
ANR	5674262	UnaryOperationExpression	& USLen		5673829	0					
ANR	5674263	UnaryOperator	&		5673829	0					
ANR	5674264	Identifier	USLen		5673829	1					
ANR	5674265	Argument	sizeof ( USLen )		5673829	1					
ANR	5674266	SizeofExpression	sizeof ( USLen )		5673829	0					
ANR	5674267	Sizeof	sizeof		5673829	0					
ANR	5674268	SizeofOperand	USLen		5673829	1					
ANR	5674269	Argument	true		5673829	2					
ANR	5674270	Identifier	true		5673829	0					
ANR	5674271	ElseStatement	else		5673829	0					
ANR	5674272	IfStatement	if ( op -> b_len <= INT_MAX )		5673829	0					
ANR	5674273	Condition	op -> b_len <= INT_MAX	392:12:9178:9197	5673829	0	True				
ANR	5674274	RelationalExpression	op -> b_len <= INT_MAX		5673829	0		<=			
ANR	5674275	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674276	Identifier	op		5673829	0					
ANR	5674277	Identifier	b_len		5673829	1					
ANR	5674278	Identifier	INT_MAX		5673829	1					
ANR	5674279	CompoundStatement		85:2:2098:2112	5673829	1					
ANR	5674280	IdentifierDeclStatement	ut8 data = 248 ;	393:2:9204:9218	5673829	0	True				
ANR	5674281	IdentifierDecl	data = 248		5673829	0					
ANR	5674282	IdentifierDeclType	ut8		5673829	0					
ANR	5674283	Identifier	data		5673829	1					
ANR	5674284	AssignmentExpression	data = 248		5673829	2		=			
ANR	5674285	Identifier	data		5673829	0					
ANR	5674286	PrimaryExpression	248		5673829	1					
ANR	5674287	ExpressionStatement	"write ( 1 , & data , 1 )"	394:2:9222:9241	5673829	1	True				
ANR	5674288	CallExpression	"write ( 1 , & data , 1 )"		5673829	0					
ANR	5674289	Callee	write		5673829	0					
ANR	5674290	Identifier	write		5673829	0					
ANR	5674291	ArgumentList	1		5673829	1					
ANR	5674292	Argument	1		5673829	0					
ANR	5674293	PrimaryExpression	1		5673829	0					
ANR	5674294	Argument	& data		5673829	1					
ANR	5674295	UnaryOperationExpression	& data		5673829	0					
ANR	5674296	UnaryOperator	&		5673829	0					
ANR	5674297	Identifier	data		5673829	1					
ANR	5674298	Argument	1		5673829	2					
ANR	5674299	PrimaryExpression	1		5673829	0					
ANR	5674300	ExpressionStatement	ILen = ( int ) op -> b_len	395:2:9245:9267	5673829	2	True				
ANR	5674301	AssignmentExpression	ILen = ( int ) op -> b_len		5673829	0		=			
ANR	5674302	Identifier	ILen		5673829	0					
ANR	5674303	CastExpression	( int ) op -> b_len		5673829	1					
ANR	5674304	CastTarget	int		5673829	0					
ANR	5674305	PtrMemberAccess	op -> b_len		5673829	1					
ANR	5674306	Identifier	op		5673829	0					
ANR	5674307	Identifier	b_len		5673829	1					
ANR	5674308	ExpressionStatement	"print_bytes ( & ILen , sizeof ( ILen ) , true )"	396:2:9271:9311	5673829	3	True				
ANR	5674309	CallExpression	"print_bytes ( & ILen , sizeof ( ILen ) , true )"		5673829	0					
ANR	5674310	Callee	print_bytes		5673829	0					
ANR	5674311	Identifier	print_bytes		5673829	0					
ANR	5674312	ArgumentList	& ILen		5673829	1					
ANR	5674313	Argument	& ILen		5673829	0					
ANR	5674314	UnaryOperationExpression	& ILen		5673829	0					
ANR	5674315	UnaryOperator	&		5673829	0					
ANR	5674316	Identifier	ILen		5673829	1					
ANR	5674317	Argument	sizeof ( ILen )		5673829	1					
ANR	5674318	SizeofExpression	sizeof ( ILen )		5673829	0					
ANR	5674319	Sizeof	sizeof		5673829	0					
ANR	5674320	SizeofOperand	ILen		5673829	1					
ANR	5674321	Argument	true		5673829	2					
ANR	5674322	Identifier	true		5673829	0					
ANR	5674323	ElseStatement	else		5673829	0					
ANR	5674324	CompoundStatement		104:2:2603:2630	5673829	0					
ANR	5674325	IdentifierDeclStatement	int times = op -> b_len / INT_MAX ;	399:2:9398:9429	5673829	0	True				
ANR	5674326	IdentifierDecl	times = op -> b_len / INT_MAX		5673829	0					
ANR	5674327	IdentifierDeclType	int		5673829	0					
ANR	5674328	Identifier	times		5673829	1					
ANR	5674329	AssignmentExpression	times = op -> b_len / INT_MAX		5673829	2		=			
ANR	5674330	Identifier	times		5673829	0					
ANR	5674331	MultiplicativeExpression	op -> b_len / INT_MAX		5673829	1		/			
ANR	5674332	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674333	Identifier	op		5673829	0					
ANR	5674334	Identifier	b_len		5673829	1					
ANR	5674335	Identifier	INT_MAX		5673829	1					
ANR	5674336	IdentifierDeclStatement	int max = INT_MAX ;	400:2:9433:9450	5673829	1	True				
ANR	5674337	IdentifierDecl	max = INT_MAX		5673829	0					
ANR	5674338	IdentifierDeclType	int		5673829	0					
ANR	5674339	Identifier	max		5673829	1					
ANR	5674340	AssignmentExpression	max = INT_MAX		5673829	2		=			
ANR	5674341	Identifier	INT_MAX		5673829	0					
ANR	5674342	Identifier	INT_MAX		5673829	1					
ANR	5674343	IdentifierDeclStatement	size_t i ;	401:2:9454:9462	5673829	2	True				
ANR	5674344	IdentifierDecl	i		5673829	0					
ANR	5674345	IdentifierDeclType	size_t		5673829	0					
ANR	5674346	Identifier	i		5673829	1					
ANR	5674347	ForStatement	for ( i = 0 ; i < times ; i ++ )		5673829	3					
ANR	5674348	ForInit	i = 0 ;	402:6:9470:9475	5673829	0	True				
ANR	5674349	AssignmentExpression	i = 0		5673829	0		=			
ANR	5674350	Identifier	i		5673829	0					
ANR	5674351	PrimaryExpression	0		5673829	1					
ANR	5674352	Condition	i < times	402:12:9476:9484	5673829	1	True				
ANR	5674353	RelationalExpression	i < times		5673829	0		<			
ANR	5674354	Identifier	i		5673829	0					
ANR	5674355	Identifier	times		5673829	1					
ANR	5674356	PostIncDecOperationExpression	i ++	402:23:9487:9489	5673829	2	True				
ANR	5674357	Identifier	i		5673829	0					
ANR	5674358	IncDec	++		5673829	1					
ANR	5674359	CompoundStatement		95:3:2391:2405	5673829	3					
ANR	5674360	IdentifierDeclStatement	ut8 data = 248 ;	403:3:9497:9511	5673829	0	True				
ANR	5674361	IdentifierDecl	data = 248		5673829	0					
ANR	5674362	IdentifierDeclType	ut8		5673829	0					
ANR	5674363	Identifier	data		5673829	1					
ANR	5674364	AssignmentExpression	data = 248		5673829	2		=			
ANR	5674365	Identifier	data		5673829	0					
ANR	5674366	PrimaryExpression	248		5673829	1					
ANR	5674367	ExpressionStatement	"write ( 1 , & data , 1 )"	404:3:9516:9535	5673829	1	True				
ANR	5674368	CallExpression	"write ( 1 , & data , 1 )"		5673829	0					
ANR	5674369	Callee	write		5673829	0					
ANR	5674370	Identifier	write		5673829	0					
ANR	5674371	ArgumentList	1		5673829	1					
ANR	5674372	Argument	1		5673829	0					
ANR	5674373	PrimaryExpression	1		5673829	0					
ANR	5674374	Argument	& data		5673829	1					
ANR	5674375	UnaryOperationExpression	& data		5673829	0					
ANR	5674376	UnaryOperator	&		5673829	0					
ANR	5674377	Identifier	data		5673829	1					
ANR	5674378	Argument	1		5673829	2					
ANR	5674379	PrimaryExpression	1		5673829	0					
ANR	5674380	ExpressionStatement	"print_bytes ( & max , sizeof ( max ) , true )"	405:3:9540:9578	5673829	2	True				
ANR	5674381	CallExpression	"print_bytes ( & max , sizeof ( max ) , true )"		5673829	0					
ANR	5674382	Callee	print_bytes		5673829	0					
ANR	5674383	Identifier	print_bytes		5673829	0					
ANR	5674384	ArgumentList	& max		5673829	1					
ANR	5674385	Argument	& max		5673829	0					
ANR	5674386	UnaryOperationExpression	& max		5673829	0					
ANR	5674387	UnaryOperator	&		5673829	0					
ANR	5674388	Identifier	max		5673829	1					
ANR	5674389	Argument	sizeof ( max )		5673829	1					
ANR	5674390	SizeofExpression	sizeof ( max )		5673829	0					
ANR	5674391	Sizeof	sizeof		5673829	0					
ANR	5674392	SizeofOperand	max		5673829	1					
ANR	5674393	Argument	true		5673829	2					
ANR	5674394	Identifier	true		5673829	0					
ANR	5674395	ExpressionStatement	"print_bytes ( op -> b_buf , max , false )"	406:3:9583:9618	5673829	3	True				
ANR	5674396	CallExpression	"print_bytes ( op -> b_buf , max , false )"		5673829	0					
ANR	5674397	Callee	print_bytes		5673829	0					
ANR	5674398	Identifier	print_bytes		5673829	0					
ANR	5674399	ArgumentList	op -> b_buf		5673829	1					
ANR	5674400	Argument	op -> b_buf		5673829	0					
ANR	5674401	PtrMemberAccess	op -> b_buf		5673829	0					
ANR	5674402	Identifier	op		5673829	0					
ANR	5674403	Identifier	b_buf		5673829	1					
ANR	5674404	Argument	max		5673829	1					
ANR	5674405	Identifier	max		5673829	0					
ANR	5674406	Argument	false		5673829	2					
ANR	5674407	Identifier	false		5673829	0					
ANR	5674408	ExpressionStatement	op -> b_buf += max	407:3:9623:9639	5673829	4	True				
ANR	5674409	AssignmentExpression	op -> b_buf += max		5673829	0		+=			
ANR	5674410	PtrMemberAccess	op -> b_buf		5673829	0					
ANR	5674411	Identifier	op		5673829	0					
ANR	5674412	Identifier	b_buf		5673829	1					
ANR	5674413	Identifier	max		5673829	1					
ANR	5674414	ExpressionStatement	op -> b_len = op -> b_len % max	409:2:9647:9674	5673829	4	True				
ANR	5674415	AssignmentExpression	op -> b_len = op -> b_len % max		5673829	0		=			
ANR	5674416	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674417	Identifier	op		5673829	0					
ANR	5674418	Identifier	b_len		5673829	1					
ANR	5674419	MultiplicativeExpression	op -> b_len % max		5673829	1		%			
ANR	5674420	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674421	Identifier	op		5673829	0					
ANR	5674422	Identifier	b_len		5673829	1					
ANR	5674423	Identifier	max		5673829	1					
ANR	5674424	IdentifierDeclStatement	int remain_size = op -> b_len ;	412:2:9709:9736	5673829	5	True				
ANR	5674425	IdentifierDecl	remain_size = op -> b_len		5673829	0					
ANR	5674426	IdentifierDeclType	int		5673829	0					
ANR	5674427	Identifier	remain_size		5673829	1					
ANR	5674428	AssignmentExpression	remain_size = op -> b_len		5673829	2		=			
ANR	5674429	Identifier	remain_size		5673829	0					
ANR	5674430	PtrMemberAccess	op -> b_len		5673829	1					
ANR	5674431	Identifier	op		5673829	0					
ANR	5674432	Identifier	b_len		5673829	1					
ANR	5674433	ExpressionStatement	"print_bytes ( & remain_size , sizeof ( remain_size ) , true )"	413:2:9740:9792	5673829	6	True				
ANR	5674434	CallExpression	"print_bytes ( & remain_size , sizeof ( remain_size ) , true )"		5673829	0					
ANR	5674435	Callee	print_bytes		5673829	0					
ANR	5674436	Identifier	print_bytes		5673829	0					
ANR	5674437	ArgumentList	& remain_size		5673829	1					
ANR	5674438	Argument	& remain_size		5673829	0					
ANR	5674439	UnaryOperationExpression	& remain_size		5673829	0					
ANR	5674440	UnaryOperator	&		5673829	0					
ANR	5674441	Identifier	remain_size		5673829	1					
ANR	5674442	Argument	sizeof ( remain_size )		5673829	1					
ANR	5674443	SizeofExpression	sizeof ( remain_size )		5673829	0					
ANR	5674444	Sizeof	sizeof		5673829	0					
ANR	5674445	SizeofOperand	remain_size		5673829	1					
ANR	5674446	Argument	true		5673829	2					
ANR	5674447	Identifier	true		5673829	0					
ANR	5674448	ExpressionStatement	"print_bytes ( op -> b_buf , op -> b_len , false )"	415:1:9798:9838	5673829	9	True				
ANR	5674449	CallExpression	"print_bytes ( op -> b_buf , op -> b_len , false )"		5673829	0					
ANR	5674450	Callee	print_bytes		5673829	0					
ANR	5674451	Identifier	print_bytes		5673829	0					
ANR	5674452	ArgumentList	op -> b_buf		5673829	1					
ANR	5674453	Argument	op -> b_buf		5673829	0					
ANR	5674454	PtrMemberAccess	op -> b_buf		5673829	0					
ANR	5674455	Identifier	op		5673829	0					
ANR	5674456	Identifier	b_buf		5673829	1					
ANR	5674457	Argument	op -> b_len		5673829	1					
ANR	5674458	PtrMemberAccess	op -> b_len		5673829	0					
ANR	5674459	Identifier	op		5673829	0					
ANR	5674460	Identifier	b_len		5673829	1					
ANR	5674461	Argument	false		5673829	2					
ANR	5674462	Identifier	false		5673829	0					
ANR	5674463	ExpressionStatement	gdiff_start = op -> b_off + op -> b_len	416:1:9841:9876	5673829	10	True				
ANR	5674464	AssignmentExpression	gdiff_start = op -> b_off + op -> b_len		5673829	0		=			
ANR	5674465	Identifier	gdiff_start		5673829	0					
ANR	5674466	AdditiveExpression	op -> b_off + op -> b_len		5673829	1		+			
ANR	5674467	PtrMemberAccess	op -> b_off		5673829	0					
ANR	5674468	Identifier	op		5673829	0					
ANR	5674469	Identifier	b_off		5673829	1					
ANR	5674470	PtrMemberAccess	op -> b_len		5673829	1					
ANR	5674471	Identifier	op		5673829	0					
ANR	5674472	Identifier	b_len		5673829	1					
ANR	5674473	ReturnStatement	return 0 ;	417:1:9879:9887	5673829	11	True				
ANR	5674474	PrimaryExpression	0		5673829	0					
ANR	5674475	ReturnType	static int		5673829	1					
ANR	5674476	Identifier	bcb		5673829	2					
ANR	5674477	ParameterList	"RDiff * d , void * user , RDiffOp * op"		5673829	3					
ANR	5674478	Parameter	RDiff * d	309:15:7070:7077	5673829	0	True				
ANR	5674479	ParameterType	RDiff *		5673829	0					
ANR	5674480	Identifier	d		5673829	1					
ANR	5674481	Parameter	void * user	309:25:7080:7089	5673829	1	True				
ANR	5674482	ParameterType	void *		5673829	0					
ANR	5674483	Identifier	user		5673829	1					
ANR	5674484	Parameter	RDiffOp * op	309:37:7092:7102	5673829	2	True				
ANR	5674485	ParameterType	RDiffOp *		5673829	0					
ANR	5674486	Identifier	op		5673829	1					
ANR	5674487	CFGEntryNode	ENTRY		5673829		True				
ANR	5674488	CFGExitNode	EXIT		5673829		True				
ANR	5674489	Symbol	& USLen		5673829						
ANR	5674490	Symbol	USLen		5673829						
ANR	5674491	Symbol	* op		5673829						
ANR	5674492	Symbol	data		5673829						
ANR	5674493	Symbol	USHRT_MAX		5673829						
ANR	5674494	Symbol	& IAddr		5673829						
ANR	5674495	Symbol	opcode		5673829						
ANR	5674496	Symbol	& max		5673829						
ANR	5674497	Symbol	op -> a_off		5673829						
ANR	5674498	Symbol	times		5673829						
ANR	5674499	Symbol	& gdiff_start		5673829						
ANR	5674500	Symbol	USAddr		5673829						
ANR	5674501	Symbol	INT_MAX		5673829						
ANR	5674502	Symbol	& USAddr		5673829						
ANR	5674503	Symbol	op -> b_buf		5673829						
ANR	5674504	Symbol	op -> b_off		5673829						
ANR	5674505	Symbol	op		5673829						
ANR	5674506	Symbol	d		5673829						
ANR	5674507	Symbol	max		5673829						
ANR	5674508	Symbol	false		5673829						
ANR	5674509	Symbol	i		5673829						
ANR	5674510	Symbol	UCLen		5673829						
ANR	5674511	Symbol	ILen		5673829						
ANR	5674512	Symbol	& data		5673829						
ANR	5674513	Symbol	remain_size		5673829						
ANR	5674514	Symbol	gdiff_start		5673829						
ANR	5674515	Symbol	UCHAR_MAX		5673829						
ANR	5674516	Symbol	op -> b_len		5673829						
ANR	5674517	Symbol	offset_diff		5673829						
ANR	5674518	Symbol	true		5673829						
ANR	5674519	Symbol	& UCLen		5673829						
ANR	5674520	Symbol	& remain_size		5673829						
ANR	5674521	Symbol	IAddr		5673829						
ANR	5674522	Symbol	& ILen		5673829						
ANR	5674523	Symbol	user		5673829						
ANR	5674524	Symbol	& opcode		5673829						
ANR	5674525	Function	show_help	420:0:9892:12389							
ANR	5674526	FunctionDef	show_help (int v)		5674525	0					
ANR	5674527	CompoundStatement		420:28:9920:12389	5674525	0					
ANR	5674528	ExpressionStatement	"printf ( ""Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\\n"" )"	421:1:9923:10024	5674525	0	True				
ANR	5674529	CallExpression	"printf ( ""Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\\n"" )"		5674525	0					
ANR	5674530	Callee	printf		5674525	0					
ANR	5674531	Identifier	printf		5674525	0					
ANR	5674532	ArgumentList	"""Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\\n"""		5674525	1					
ANR	5674533	Argument	"""Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\\n"""		5674525	0					
ANR	5674534	PrimaryExpression	"""Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\\n"""		5674525	0					
ANR	5674535	IfStatement	if ( v )		5674525	1					
ANR	5674536	Condition	v	422:5:10031:10031	5674525	0	True				
ANR	5674537	Identifier	v		5674525	0					
ANR	5674538	CompoundStatement		3:8:113:113	5674525	1					
ANR	5674539	Statement	printf	423:2:10038:10043	5674525	0	True				
ANR	5674540	Statement	(	423:9:10045:10045	5674525	1	True				
ANR	5674541	Statement	"""  -a [arch]  specify architecture plugin to use (x86, arm, ..)\\n"""	424:3:10050:10115	5674525	2	True				
ANR	5674542	Statement	"""  -A [-A]    run aaa or aaaa after loading each binary (see -C)\\n"""	425:3:10120:10186	5674525	3	True				
ANR	5674543	Statement	"""  -b [bits]  specify register size for arch (16 (thumb), 32, 64, ..)\\n"""	426:3:10191:10262	5674525	4	True				
ANR	5674544	Statement	"""  -B         output in binary diff (GDIFF)\\n"""	427:3:10267:10312	5674525	5	True				
ANR	5674545	Statement	"""  -c         count of changes\\n"""	428:3:10317:10349	5674525	6	True				
ANR	5674546	Statement	"""  -C         graphdiff code (columns: off-A, match-ratio, off-B) (see -A)\\n"""	429:3:10354:10430	5674525	7	True				
ANR	5674547	Statement	"""  -d         use delta diffing\\n"""	430:3:10435:10468	5674525	8	True				
ANR	5674548	Statement	"""  -D         show disasm instead of hexpairs\\n"""	431:3:10473:10520	5674525	9	True				
ANR	5674549	Statement	"""  -e [k=v]   set eval config var value for all RCore instances\\n"""	432:3:10525:10590	5674525	10	True				
ANR	5674550	Statement	"""  -g [sym|off1,off2]   graph diff of given symbol, or between two offsets\\n"""	433:3:10595:10671	5674525	11	True				
ANR	5674551	Statement	"""  -G [cmd]   run an r2 command on every RCore instance created\\n"""	434:3:10676:10741	5674525	12	True				
ANR	5674552	Statement	"""  -i         diff imports of target files (see -u, -U and -z)\\n"""	435:3:10746:10810	5674525	13	True				
ANR	5674553	Statement	"""  -j         output in json format\\n"""	436:3:10815:10852	5674525	14	True				
ANR	5674554	Statement	"""  -n         print bare addresses only (diff.bare=1)\\n"""	437:3:10857:10912	5674525	15	True				
ANR	5674555	Statement	"""  -m [aditsjJ]  choose the graph output mode\\n"""	438:24:10938:10985	5674525	16	True				
ANR	5674556	Statement	"""  -O         code diffing with opcode bytes only\\n"""	439:3:10990:11041	5674525	17	True				
ANR	5674557	Statement	"""  -p         use physical addressing (io.va=0)\\n"""	440:3:11046:11095	5674525	18	True				
ANR	5674558	Statement	"""  -q         quiet mode (disable colors, reduce output)\\n"""	441:3:11100:11158	5674525	19	True				
ANR	5674559	Statement	"""  -r         output in radare commands\\n"""	442:3:11163:11204	5674525	20	True				
ANR	5674560	Statement	"""  -s         compute edit distance (no substitution, Eugene W. Myers' O(ND) diff algorithm)\\n"""	443:3:11209:11303	5674525	21	True				
ANR	5674561	Statement	"""  -ss        compute Levenshtein edit distance (substitution is allowed, O(N^2))\\n"""	444:3:11308:11391	5674525	22	True				
ANR	5674562	Statement	"""  -S [name]  sort code diff (name, namelen, addr, size, type, dist) (only for -C or -g)\\n"""	445:3:11396:11486	5674525	23	True				
ANR	5674563	Statement	"""  -t [0-100] set threshold for code diff (default is 70%%)\\n"""	446:3:11491:11552	5674525	24	True				
ANR	5674564	Statement	"""  -x         show two column hexdump diffing\\n"""	447:3:11557:11604	5674525	25	True				
ANR	5674565	Statement	"""  -u         unified output (---+++)\\n"""	448:3:11609:11648	5674525	26	True				
ANR	5674566	Statement	"""  -U         unified output using system 'diff'\\n"""	449:3:11653:11703	5674525	27	True				
ANR	5674567	Statement	"""  -v         show version information\\n"""	450:3:11708:11748	5674525	28	True				
ANR	5674568	Statement	"""  -V         be verbose (current only for -s)\\n"""	451:3:11753:11801	5674525	29	True				
ANR	5674569	Statement	"""  -z         diff on extracted strings\\n"""	452:3:11806:11847	5674525	30	True				
ANR	5674570	Statement	"""  -Z         diff code comparing zignatures\\n\\n"""	453:3:11852:11900	5674525	31	True				
ANR	5674571	Statement	"""Graph Output formats: (-m [mode])\\n"""	454:23:11925:11961	5674525	32	True				
ANR	5674572	Statement	"""  <blank/a>  Ascii art\\n"""	455:10:11973:11998	5674525	33	True				
ANR	5674573	Statement	"""  s          r2 commands\\n"""	456:17:12017:12044	5674525	34	True				
ANR	5674574	Statement	"""  d          Graphviz dot\\n"""	457:10:12056:12084	5674525	35	True				
ANR	5674575	Statement	"""  g          Graph Modelling Language (gml)\\n"""	458:17:12103:12149	5674525	36	True				
ANR	5674576	Statement	"""  j          json\\n"""	459:10:12161:12181	5674525	37	True				
ANR	5674577	Statement	"""  J          json with disarm\\n"""	460:17:12200:12232	5674525	38	True				
ANR	5674578	Statement	"""  k          SDB key-value\\n"""	461:10:12244:12273	5674525	39	True				
ANR	5674579	Statement	"""  t          Tiny ascii art\\n"""	462:17:12292:12322	5674525	40	True				
ANR	5674580	Statement	"""  i          Interactive ascii art\\n"""	463:10:12334:12371	5674525	41	True				
ANR	5674581	Statement	)	463:48:12372:12372	5674525	42	True				
ANR	5674582	ExpressionStatement		463:49:12373:12373	5674525	43	True				
ANR	5674583	ReturnStatement	return 1 ;	465:1:12379:12387	5674525	2	True				
ANR	5674584	PrimaryExpression	1		5674525	0					
ANR	5674585	ReturnType	static int		5674525	1					
ANR	5674586	Identifier	show_help		5674525	2					
ANR	5674587	ParameterList	int v		5674525	3					
ANR	5674588	Parameter	int v	420:21:9913:9917	5674525	0	True				
ANR	5674589	ParameterType	int		5674525	0					
ANR	5674590	Identifier	v		5674525	1					
ANR	5674591	CFGEntryNode	ENTRY		5674525		True				
ANR	5674592	CFGExitNode	EXIT		5674525		True				
ANR	5674593	Symbol	v		5674525						
ANR	5674594	Function	dump_cols	469:0:12415:14837							
ANR	5674595	FunctionDef	"dump_cols (ut8 * a , int as , ut8 * b , int bs , int w)"		5674594	0					
ANR	5674596	CompoundStatement		469:61:12476:14837	5674594	0					
ANR	5674597	IdentifierDeclStatement	"ut32 sz = R_MIN ( as , bs ) ;"	470:1:12479:12503	5674594	0	True				
ANR	5674598	IdentifierDecl	"sz = R_MIN ( as , bs )"		5674594	0					
ANR	5674599	IdentifierDeclType	ut32		5674594	0					
ANR	5674600	Identifier	sz		5674594	1					
ANR	5674601	AssignmentExpression	"sz = R_MIN ( as , bs )"		5674594	2		=			
ANR	5674602	Identifier	sz		5674594	0					
ANR	5674603	CallExpression	"R_MIN ( as , bs )"		5674594	1					
ANR	5674604	Callee	R_MIN		5674594	0					
ANR	5674605	Identifier	R_MIN		5674594	0					
ANR	5674606	ArgumentList	as		5674594	1					
ANR	5674607	Argument	as		5674594	0					
ANR	5674608	Identifier	as		5674594	0					
ANR	5674609	Argument	bs		5674594	1					
ANR	5674610	Identifier	bs		5674594	0					
ANR	5674611	IdentifierDeclStatement	"ut32 i , j ;"	471:1:12506:12515	5674594	1	True				
ANR	5674612	IdentifierDecl	i		5674594	0					
ANR	5674613	IdentifierDeclType	ut32		5674594	0					
ANR	5674614	Identifier	i		5674594	1					
ANR	5674615	IdentifierDecl	j		5674594	1					
ANR	5674616	IdentifierDeclType	ut32		5674594	0					
ANR	5674617	Identifier	j		5674594	1					
ANR	5674618	IdentifierDeclStatement	int ctx = DUMP_CONTEXT ;	472:1:12518:12540	5674594	2	True				
ANR	5674619	IdentifierDecl	ctx = DUMP_CONTEXT		5674594	0					
ANR	5674620	IdentifierDeclType	int		5674594	0					
ANR	5674621	Identifier	ctx		5674594	1					
ANR	5674622	AssignmentExpression	ctx = DUMP_CONTEXT		5674594	2		=			
ANR	5674623	Identifier	DUMP_CONTEXT		5674594	0					
ANR	5674624	Identifier	DUMP_CONTEXT		5674594	1					
ANR	5674625	IdentifierDeclStatement	int pad = 0 ;	473:1:12543:12554	5674594	3	True				
ANR	5674626	IdentifierDecl	pad = 0		5674594	0					
ANR	5674627	IdentifierDeclType	int		5674594	0					
ANR	5674628	Identifier	pad		5674594	1					
ANR	5674629	AssignmentExpression	pad = 0		5674594	2		=			
ANR	5674630	Identifier	pad		5674594	0					
ANR	5674631	PrimaryExpression	0		5674594	1					
ANR	5674632	IfStatement	if ( ! a || ! b || as < 0 || bs < 0 )		5674594	4					
ANR	5674633	Condition	! a || ! b || as < 0 || bs < 0	474:5:12561:12588	5674594	0	True				
ANR	5674634	OrExpression	! a || ! b || as < 0 || bs < 0		5674594	0		||			
ANR	5674635	UnaryOperationExpression	! a		5674594	0					
ANR	5674636	UnaryOperator	!		5674594	0					
ANR	5674637	Identifier	a		5674594	1					
ANR	5674638	OrExpression	! b || as < 0 || bs < 0		5674594	1		||			
ANR	5674639	UnaryOperationExpression	! b		5674594	0					
ANR	5674640	UnaryOperator	!		5674594	0					
ANR	5674641	Identifier	b		5674594	1					
ANR	5674642	OrExpression	as < 0 || bs < 0		5674594	1		||			
ANR	5674643	RelationalExpression	as < 0		5674594	0		<			
ANR	5674644	Identifier	as		5674594	0					
ANR	5674645	PrimaryExpression	0		5674594	1					
ANR	5674646	RelationalExpression	bs < 0		5674594	1		<			
ANR	5674647	Identifier	bs		5674594	0					
ANR	5674648	PrimaryExpression	0		5674594	1					
ANR	5674649	CompoundStatement		6:35:114:114	5674594	1					
ANR	5674650	ReturnStatement	return ;	475:2:12595:12601	5674594	0	True				
ANR	5674651	SwitchStatement	switch ( w )		5674594	5					
ANR	5674652	Condition	w	477:9:12615:12615	5674594	0	True				
ANR	5674653	Identifier	w		5674594	0					
ANR	5674654	CompoundStatement		9:12:141:141	5674594	1					
ANR	5674655	Label	case 8 :	478:1:12621:12627	5674594	0	True				
ANR	5674656	ExpressionStatement	"r_cons_printf ( ""  offset     0 1 2 3 4 5 6 7 01234567    0 1 2 3 4 5 6 7 01234567\\n"" )"	479:2:12631:12716	5674594	1	True				
ANR	5674657	CallExpression	"r_cons_printf ( ""  offset     0 1 2 3 4 5 6 7 01234567    0 1 2 3 4 5 6 7 01234567\\n"" )"		5674594	0					
ANR	5674658	Callee	r_cons_printf		5674594	0					
ANR	5674659	Identifier	r_cons_printf		5674594	0					
ANR	5674660	ArgumentList	"""  offset     0 1 2 3 4 5 6 7 01234567    0 1 2 3 4 5 6 7 01234567\\n"""		5674594	1					
ANR	5674661	Argument	"""  offset     0 1 2 3 4 5 6 7 01234567    0 1 2 3 4 5 6 7 01234567\\n"""		5674594	0					
ANR	5674662	PrimaryExpression	"""  offset     0 1 2 3 4 5 6 7 01234567    0 1 2 3 4 5 6 7 01234567\\n"""		5674594	0					
ANR	5674663	BreakStatement	break ;	480:2:12720:12725	5674594	2	True				
ANR	5674664	Label	case 16 :	481:1:12728:12735	5674594	3	True				
ANR	5674665	Statement	r_cons_printf	482:2:12739:12751	5674594	4	True				
ANR	5674666	Statement	(	482:16:12753:12753	5674594	5	True				
ANR	5674667	Statement	"""  offset     """	482:17:12754:12768	5674594	6	True				
ANR	5674668	Statement	"""0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF    """	483:3:12773:12826	5674594	7	True				
ANR	5674669	Statement	"""0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF\\n"""	484:3:12831:12882	5674594	8	True				
ANR	5674670	Statement	)	484:55:12883:12883	5674594	9	True				
ANR	5674671	ExpressionStatement		484:56:12884:12884	5674594	10	True				
ANR	5674672	BreakStatement	break ;	485:2:12888:12893	5674594	11	True				
ANR	5674673	Label	default :	486:1:12896:12903	5674594	12	True				
ANR	5674674	Identifier	default		5674594	0					
ANR	5674675	ExpressionStatement	"eprintf ( ""Invalid column width\\n"" )"	487:2:12907:12941	5674594	13	True				
ANR	5674676	CallExpression	"eprintf ( ""Invalid column width\\n"" )"		5674594	0					
ANR	5674677	Callee	eprintf		5674594	0					
ANR	5674678	Identifier	eprintf		5674594	0					
ANR	5674679	ArgumentList	"""Invalid column width\\n"""		5674594	1					
ANR	5674680	Argument	"""Invalid column width\\n"""		5674594	0					
ANR	5674681	PrimaryExpression	"""Invalid column width\\n"""		5674594	0					
ANR	5674682	ReturnStatement	return ;	488:2:12945:12951	5674594	14	True				
ANR	5674683	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	490:1:12957:12987	5674594	6	True				
ANR	5674684	CallExpression	"r_cons_break_push ( NULL , NULL )"		5674594	0					
ANR	5674685	Callee	r_cons_break_push		5674594	0					
ANR	5674686	Identifier	r_cons_break_push		5674594	0					
ANR	5674687	ArgumentList	NULL		5674594	1					
ANR	5674688	Argument	NULL		5674594	0					
ANR	5674689	Identifier	NULL		5674594	0					
ANR	5674690	Argument	NULL		5674594	1					
ANR	5674691	Identifier	NULL		5674594	0					
ANR	5674692	ForStatement	for ( i = 0 ; i < sz ; i += w )		5674594	7					
ANR	5674693	ForInit	i = 0 ;	491:6:12995:13000	5674594	0	True				
ANR	5674694	AssignmentExpression	i = 0		5674594	0		=			
ANR	5674695	Identifier	i		5674594	0					
ANR	5674696	PrimaryExpression	0		5674594	1					
ANR	5674697	Condition	i < sz	491:13:13002:13007	5674594	1	True				
ANR	5674698	RelationalExpression	i < sz		5674594	0		<			
ANR	5674699	Identifier	i		5674594	0					
ANR	5674700	Identifier	sz		5674594	1					
ANR	5674701	AssignmentExpression	i += w	491:21:13010:13015	5674594	2	True	+=			
ANR	5674702	Identifier	i		5674594	0					
ANR	5674703	Identifier	w		5674594	1					
ANR	5674704	CompoundStatement		31:2:649:684	5674594	3					
ANR	5674705	IfStatement	if ( r_cons_is_breaked ( ) )		5674594	0					
ANR	5674706	Condition	r_cons_is_breaked ( )	492:6:13026:13044	5674594	0	True				
ANR	5674707	CallExpression	r_cons_is_breaked ( )		5674594	0					
ANR	5674708	Callee	r_cons_is_breaked		5674594	0					
ANR	5674709	Identifier	r_cons_is_breaked		5674594	0					
ANR	5674710	ArgumentList			5674594	1					
ANR	5674711	CompoundStatement		24:27:570:570	5674594	1					
ANR	5674712	BreakStatement	break ;	493:3:13052:13057	5674594	0	True				
ANR	5674713	IfStatement	if ( i + w >= sz )		5674594	1					
ANR	5674714	Condition	i + w >= sz	495:6:13069:13079	5674594	0	True				
ANR	5674715	RelationalExpression	i + w >= sz		5674594	0		>=			
ANR	5674716	AdditiveExpression	i + w		5674594	0		+			
ANR	5674717	Identifier	i		5674594	0					
ANR	5674718	Identifier	w		5674594	1					
ANR	5674719	Identifier	sz		5674594	1					
ANR	5674720	CompoundStatement		27:19:605:605	5674594	1					
ANR	5674721	ExpressionStatement	pad = w - sz + i	496:3:13087:13103	5674594	0	True				
ANR	5674722	AssignmentExpression	pad = w - sz + i		5674594	0		=			
ANR	5674723	Identifier	pad		5674594	0					
ANR	5674724	AdditiveExpression	w - sz + i		5674594	1		-			
ANR	5674725	Identifier	w		5674594	0					
ANR	5674726	AdditiveExpression	sz + i		5674594	1		+			
ANR	5674727	Identifier	sz		5674594	0					
ANR	5674728	Identifier	i		5674594	1					
ANR	5674729	ExpressionStatement	w = sz - i	497:3:13108:13118	5674594	1	True				
ANR	5674730	AssignmentExpression	w = sz - i		5674594	0		=			
ANR	5674731	Identifier	w		5674594	0					
ANR	5674732	AdditiveExpression	sz - i		5674594	1		-			
ANR	5674733	Identifier	sz		5674594	0					
ANR	5674734	Identifier	i		5674594	1					
ANR	5674735	IdentifierDeclStatement	"bool eq = ! memcmp ( a + i , b + i , w ) ;"	499:2:13126:13161	5674594	2	True				
ANR	5674736	IdentifierDecl	"eq = ! memcmp ( a + i , b + i , w )"		5674594	0					
ANR	5674737	IdentifierDeclType	bool		5674594	0					
ANR	5674738	Identifier	eq		5674594	1					
ANR	5674739	AssignmentExpression	"eq = ! memcmp ( a + i , b + i , w )"		5674594	2		=			
ANR	5674740	Identifier	eq		5674594	0					
ANR	5674741	UnaryOperationExpression	"! memcmp ( a + i , b + i , w )"		5674594	1					
ANR	5674742	UnaryOperator	!		5674594	0					
ANR	5674743	CallExpression	"memcmp ( a + i , b + i , w )"		5674594	1					
ANR	5674744	Callee	memcmp		5674594	0					
ANR	5674745	Identifier	memcmp		5674594	0					
ANR	5674746	ArgumentList	a + i		5674594	1					
ANR	5674747	Argument	a + i		5674594	0					
ANR	5674748	AdditiveExpression	a + i		5674594	0		+			
ANR	5674749	Identifier	a		5674594	0					
ANR	5674750	Identifier	i		5674594	1					
ANR	5674751	Argument	b + i		5674594	1					
ANR	5674752	AdditiveExpression	b + i		5674594	0		+			
ANR	5674753	Identifier	b		5674594	0					
ANR	5674754	Identifier	i		5674594	1					
ANR	5674755	Argument	w		5674594	2					
ANR	5674756	Identifier	w		5674594	0					
ANR	5674757	IfStatement	if ( eq )		5674594	3					
ANR	5674758	Condition	eq	500:6:13169:13170	5674594	0	True				
ANR	5674759	Identifier	eq		5674594	0					
ANR	5674760	CompoundStatement		32:10:696:696	5674594	1					
ANR	5674761	ExpressionStatement	ctx --	501:3:13178:13183	5674594	0	True				
ANR	5674762	PostIncDecOperationExpression	ctx --		5674594	0					
ANR	5674763	Identifier	ctx		5674594	0					
ANR	5674764	IncDec	--		5674594	1					
ANR	5674765	IfStatement	if ( ctx == - 1 )		5674594	1					
ANR	5674766	Condition	ctx == - 1	502:7:13192:13200	5674594	0	True				
ANR	5674767	EqualityExpression	ctx == - 1		5674594	0		==			
ANR	5674768	Identifier	ctx		5674594	0					
ANR	5674769	UnaryOperationExpression	- 1		5674594	1					
ANR	5674770	UnaryOperator	-		5674594	0					
ANR	5674771	PrimaryExpression	1		5674594	1					
ANR	5674772	CompoundStatement		34:18:726:726	5674594	1					
ANR	5674773	ExpressionStatement	"r_cons_printf ( ""...\\n"" )"	503:4:13209:13232	5674594	0	True				
ANR	5674774	CallExpression	"r_cons_printf ( ""...\\n"" )"		5674594	0					
ANR	5674775	Callee	r_cons_printf		5674594	0					
ANR	5674776	Identifier	r_cons_printf		5674594	0					
ANR	5674777	ArgumentList	"""...\\n"""		5674594	1					
ANR	5674778	Argument	"""...\\n"""		5674594	0					
ANR	5674779	PrimaryExpression	"""...\\n"""		5674594	0					
ANR	5674780	ContinueStatement	continue ;	504:4:13238:13246	5674594	1	True				
ANR	5674781	IfStatement	if ( ctx < 0 )		5674594	2					
ANR	5674782	Condition	ctx < 0	506:7:13260:13266	5674594	0	True				
ANR	5674783	RelationalExpression	ctx < 0		5674594	0		<			
ANR	5674784	Identifier	ctx		5674594	0					
ANR	5674785	PrimaryExpression	0		5674594	1					
ANR	5674786	CompoundStatement		38:16:792:792	5674594	1					
ANR	5674787	ExpressionStatement	ctx = - 1	507:4:13275:13283	5674594	0	True				
ANR	5674788	AssignmentExpression	ctx = - 1		5674594	0		=			
ANR	5674789	Identifier	ctx		5674594	0					
ANR	5674790	UnaryOperationExpression	- 1		5674594	1					
ANR	5674791	UnaryOperator	-		5674594	0					
ANR	5674792	PrimaryExpression	1		5674594	1					
ANR	5674793	ContinueStatement	continue ;	508:4:13289:13297	5674594	1	True				
ANR	5674794	ElseStatement	else		5674594	0					
ANR	5674795	CompoundStatement		42:9:836:836	5674594	0					
ANR	5674796	ExpressionStatement	ctx = DUMP_CONTEXT	511:3:13318:13336	5674594	0	True				
ANR	5674797	AssignmentExpression	ctx = DUMP_CONTEXT		5674594	0		=			
ANR	5674798	Identifier	ctx		5674594	0					
ANR	5674799	Identifier	DUMP_CONTEXT		5674594	1					
ANR	5674800	ExpressionStatement	r_cons_printf ( eq ? Color_GREEN : Color_RED )	513:2:13344:13386	5674594	4	True				
ANR	5674801	CallExpression	r_cons_printf ( eq ? Color_GREEN : Color_RED )		5674594	0					
ANR	5674802	Callee	r_cons_printf		5674594	0					
ANR	5674803	Identifier	r_cons_printf		5674594	0					
ANR	5674804	ArgumentList	eq ? Color_GREEN : Color_RED		5674594	1					
ANR	5674805	Argument	eq ? Color_GREEN : Color_RED		5674594	0					
ANR	5674806	ConditionalExpression	eq ? Color_GREEN : Color_RED		5674594	0					
ANR	5674807	Condition	eq		5674594	0					
ANR	5674808	Identifier	eq		5674594	0					
ANR	5674809	Identifier	Color_GREEN		5674594	1					
ANR	5674810	Identifier	Color_RED		5674594	2					
ANR	5674811	ExpressionStatement	"r_cons_printf ( ""0x%08x%c "" , i , eq ? ' ' : '!' )"	514:2:13390:13434	5674594	5	True				
ANR	5674812	CallExpression	"r_cons_printf ( ""0x%08x%c "" , i , eq ? ' ' : '!' )"		5674594	0					
ANR	5674813	Callee	r_cons_printf		5674594	0					
ANR	5674814	Identifier	r_cons_printf		5674594	0					
ANR	5674815	ArgumentList	"""0x%08x%c """		5674594	1					
ANR	5674816	Argument	"""0x%08x%c """		5674594	0					
ANR	5674817	PrimaryExpression	"""0x%08x%c """		5674594	0					
ANR	5674818	Argument	i		5674594	1					
ANR	5674819	Identifier	i		5674594	0					
ANR	5674820	Argument	eq ? ' ' : '!'		5674594	2					
ANR	5674821	ConditionalExpression	eq ? ' ' : '!'		5674594	0					
ANR	5674822	Condition	eq		5674594	0					
ANR	5674823	Identifier	eq		5674594	0					
ANR	5674824	PrimaryExpression	' '		5674594	1					
ANR	5674825	PrimaryExpression	'!'		5674594	2					
ANR	5674826	ExpressionStatement	r_cons_printf ( Color_RESET )	515:2:13438:13465	5674594	6	True				
ANR	5674827	CallExpression	r_cons_printf ( Color_RESET )		5674594	0					
ANR	5674828	Callee	r_cons_printf		5674594	0					
ANR	5674829	Identifier	r_cons_printf		5674594	0					
ANR	5674830	ArgumentList	Color_RESET		5674594	1					
ANR	5674831	Argument	Color_RESET		5674594	0					
ANR	5674832	Identifier	Color_RESET		5674594	0					
ANR	5674833	ForStatement	for ( j = 0 ; j < w ; j ++ )		5674594	7					
ANR	5674834	ForInit	j = 0 ;	516:7:13474:13479	5674594	0	True				
ANR	5674835	AssignmentExpression	j = 0		5674594	0		=			
ANR	5674836	Identifier	j		5674594	0					
ANR	5674837	PrimaryExpression	0		5674594	1					
ANR	5674838	Condition	j < w	516:14:13481:13485	5674594	1	True				
ANR	5674839	RelationalExpression	j < w		5674594	0		<			
ANR	5674840	Identifier	j		5674594	0					
ANR	5674841	Identifier	w		5674594	1					
ANR	5674842	PostIncDecOperationExpression	j ++	516:21:13488:13490	5674594	2	True				
ANR	5674843	Identifier	j		5674594	0					
ANR	5674844	IncDec	++		5674594	1					
ANR	5674845	CompoundStatement		49:3:1021:1052	5674594	3					
ANR	5674846	IdentifierDeclStatement	bool eq2 = a [ i + j ] == b [ i + j ] ;	517:3:13498:13529	5674594	0	True				
ANR	5674847	IdentifierDecl	eq2 = a [ i + j ] == b [ i + j ]		5674594	0					
ANR	5674848	IdentifierDeclType	bool		5674594	0					
ANR	5674849	Identifier	eq2		5674594	1					
ANR	5674850	AssignmentExpression	eq2 = a [ i + j ] == b [ i + j ]		5674594	2		=			
ANR	5674851	Identifier	eq2		5674594	0					
ANR	5674852	EqualityExpression	a [ i + j ] == b [ i + j ]		5674594	1		==			
ANR	5674853	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5674854	Identifier	a		5674594	0					
ANR	5674855	AdditiveExpression	i + j		5674594	1		+			
ANR	5674856	Identifier	i		5674594	0					
ANR	5674857	Identifier	j		5674594	1					
ANR	5674858	ArrayIndexing	b [ i + j ]		5674594	1					
ANR	5674859	Identifier	b		5674594	0					
ANR	5674860	AdditiveExpression	i + j		5674594	1		+			
ANR	5674861	Identifier	i		5674594	0					
ANR	5674862	Identifier	j		5674594	1					
ANR	5674863	IfStatement	if ( ! eq )		5674594	1					
ANR	5674864	Condition	! eq	518:7:13538:13540	5674594	0	True				
ANR	5674865	UnaryOperationExpression	! eq		5674594	0					
ANR	5674866	UnaryOperator	!		5674594	0					
ANR	5674867	Identifier	eq		5674594	1					
ANR	5674868	CompoundStatement		50:12:1066:1066	5674594	1					
ANR	5674869	ExpressionStatement	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )	519:4:13549:13592	5674594	0	True				
ANR	5674870	CallExpression	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )		5674594	0					
ANR	5674871	Callee	r_cons_printf		5674594	0					
ANR	5674872	Identifier	r_cons_printf		5674594	0					
ANR	5674873	ArgumentList	eq2 ? Color_GREEN : Color_RED		5674594	1					
ANR	5674874	Argument	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5674875	ConditionalExpression	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5674876	Condition	eq2		5674594	0					
ANR	5674877	Identifier	eq2		5674594	0					
ANR	5674878	Identifier	Color_GREEN		5674594	1					
ANR	5674879	Identifier	Color_RED		5674594	2					
ANR	5674880	ExpressionStatement	"r_cons_printf ( ""%02x"" , a [ i + j ] )"	521:3:13602:13634	5674594	2	True				
ANR	5674881	CallExpression	"r_cons_printf ( ""%02x"" , a [ i + j ] )"		5674594	0					
ANR	5674882	Callee	r_cons_printf		5674594	0					
ANR	5674883	Identifier	r_cons_printf		5674594	0					
ANR	5674884	ArgumentList	"""%02x"""		5674594	1					
ANR	5674885	Argument	"""%02x"""		5674594	0					
ANR	5674886	PrimaryExpression	"""%02x"""		5674594	0					
ANR	5674887	Argument	a [ i + j ]		5674594	1					
ANR	5674888	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5674889	Identifier	a		5674594	0					
ANR	5674890	AdditiveExpression	i + j		5674594	1		+			
ANR	5674891	Identifier	i		5674594	0					
ANR	5674892	Identifier	j		5674594	1					
ANR	5674893	IfStatement	if ( ! eq )		5674594	3					
ANR	5674894	Condition	! eq	522:7:13643:13645	5674594	0	True				
ANR	5674895	UnaryOperationExpression	! eq		5674594	0					
ANR	5674896	UnaryOperator	!		5674594	0					
ANR	5674897	Identifier	eq		5674594	1					
ANR	5674898	CompoundStatement		54:12:1171:1171	5674594	1					
ANR	5674899	ExpressionStatement	r_cons_printf ( Color_RESET )	523:4:13654:13681	5674594	0	True				
ANR	5674900	CallExpression	r_cons_printf ( Color_RESET )		5674594	0					
ANR	5674901	Callee	r_cons_printf		5674594	0					
ANR	5674902	Identifier	r_cons_printf		5674594	0					
ANR	5674903	ArgumentList	Color_RESET		5674594	1					
ANR	5674904	Argument	Color_RESET		5674594	0					
ANR	5674905	Identifier	Color_RESET		5674594	0					
ANR	5674906	ForStatement	for ( j = 0 ; j < pad ; j ++ )		5674594	8					
ANR	5674907	ForInit	j = 0 ;	526:7:13699:13704	5674594	0	True				
ANR	5674908	AssignmentExpression	j = 0		5674594	0		=			
ANR	5674909	Identifier	j		5674594	0					
ANR	5674910	PrimaryExpression	0		5674594	1					
ANR	5674911	Condition	j < pad	526:14:13706:13712	5674594	1	True				
ANR	5674912	RelationalExpression	j < pad		5674594	0		<			
ANR	5674913	Identifier	j		5674594	0					
ANR	5674914	Identifier	pad		5674594	1					
ANR	5674915	PostIncDecOperationExpression	j ++	526:23:13715:13717	5674594	2	True				
ANR	5674916	Identifier	j		5674594	0					
ANR	5674917	IncDec	++		5674594	1					
ANR	5674918	CompoundStatement		58:28:1243:1243	5674594	3					
ANR	5674919	ExpressionStatement	"r_cons_printf ( ""  "" )"	527:3:13725:13745	5674594	0	True				
ANR	5674920	CallExpression	"r_cons_printf ( ""  "" )"		5674594	0					
ANR	5674921	Callee	r_cons_printf		5674594	0					
ANR	5674922	Identifier	r_cons_printf		5674594	0					
ANR	5674923	ArgumentList	"""  """		5674594	1					
ANR	5674924	Argument	"""  """		5674594	0					
ANR	5674925	PrimaryExpression	"""  """		5674594	0					
ANR	5674926	ExpressionStatement	"r_cons_printf ( "" "" )"	529:2:13753:13772	5674594	9	True				
ANR	5674927	CallExpression	"r_cons_printf ( "" "" )"		5674594	0					
ANR	5674928	Callee	r_cons_printf		5674594	0					
ANR	5674929	Identifier	r_cons_printf		5674594	0					
ANR	5674930	ArgumentList	""" """		5674594	1					
ANR	5674931	Argument	""" """		5674594	0					
ANR	5674932	PrimaryExpression	""" """		5674594	0					
ANR	5674933	ForStatement	for ( j = 0 ; j < w ; j ++ )		5674594	10					
ANR	5674934	ForInit	j = 0 ;	530:7:13781:13786	5674594	0	True				
ANR	5674935	AssignmentExpression	j = 0		5674594	0		=			
ANR	5674936	Identifier	j		5674594	0					
ANR	5674937	PrimaryExpression	0		5674594	1					
ANR	5674938	Condition	j < w	530:14:13788:13792	5674594	1	True				
ANR	5674939	RelationalExpression	j < w		5674594	0		<			
ANR	5674940	Identifier	j		5674594	0					
ANR	5674941	Identifier	w		5674594	1					
ANR	5674942	PostIncDecOperationExpression	j ++	530:21:13795:13797	5674594	2	True				
ANR	5674943	Identifier	j		5674594	0					
ANR	5674944	IncDec	++		5674594	1					
ANR	5674945	CompoundStatement		63:3:1328:1359	5674594	3					
ANR	5674946	IdentifierDeclStatement	bool eq2 = a [ i + j ] == b [ i + j ] ;	531:3:13805:13836	5674594	0	True				
ANR	5674947	IdentifierDecl	eq2 = a [ i + j ] == b [ i + j ]		5674594	0					
ANR	5674948	IdentifierDeclType	bool		5674594	0					
ANR	5674949	Identifier	eq2		5674594	1					
ANR	5674950	AssignmentExpression	eq2 = a [ i + j ] == b [ i + j ]		5674594	2		=			
ANR	5674951	Identifier	eq2		5674594	0					
ANR	5674952	EqualityExpression	a [ i + j ] == b [ i + j ]		5674594	1		==			
ANR	5674953	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5674954	Identifier	a		5674594	0					
ANR	5674955	AdditiveExpression	i + j		5674594	1		+			
ANR	5674956	Identifier	i		5674594	0					
ANR	5674957	Identifier	j		5674594	1					
ANR	5674958	ArrayIndexing	b [ i + j ]		5674594	1					
ANR	5674959	Identifier	b		5674594	0					
ANR	5674960	AdditiveExpression	i + j		5674594	1		+			
ANR	5674961	Identifier	i		5674594	0					
ANR	5674962	Identifier	j		5674594	1					
ANR	5674963	IfStatement	if ( ! eq )		5674594	1					
ANR	5674964	Condition	! eq	532:7:13845:13847	5674594	0	True				
ANR	5674965	UnaryOperationExpression	! eq		5674594	0					
ANR	5674966	UnaryOperator	!		5674594	0					
ANR	5674967	Identifier	eq		5674594	1					
ANR	5674968	CompoundStatement		64:12:1373:1373	5674594	1					
ANR	5674969	ExpressionStatement	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )	533:4:13856:13899	5674594	0	True				
ANR	5674970	CallExpression	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )		5674594	0					
ANR	5674971	Callee	r_cons_printf		5674594	0					
ANR	5674972	Identifier	r_cons_printf		5674594	0					
ANR	5674973	ArgumentList	eq2 ? Color_GREEN : Color_RED		5674594	1					
ANR	5674974	Argument	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5674975	ConditionalExpression	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5674976	Condition	eq2		5674594	0					
ANR	5674977	Identifier	eq2		5674594	0					
ANR	5674978	Identifier	Color_GREEN		5674594	1					
ANR	5674979	Identifier	Color_RED		5674594	2					
ANR	5674980	ExpressionStatement	"r_cons_printf ( ""%c"" , IS_PRINTABLE ( a [ i + j ] ) ? a [ i + j ] : '.' )"	535:3:13909:13969	5674594	2	True				
ANR	5674981	CallExpression	"r_cons_printf ( ""%c"" , IS_PRINTABLE ( a [ i + j ] ) ? a [ i + j ] : '.' )"		5674594	0					
ANR	5674982	Callee	r_cons_printf		5674594	0					
ANR	5674983	Identifier	r_cons_printf		5674594	0					
ANR	5674984	ArgumentList	"""%c"""		5674594	1					
ANR	5674985	Argument	"""%c"""		5674594	0					
ANR	5674986	PrimaryExpression	"""%c"""		5674594	0					
ANR	5674987	Argument	IS_PRINTABLE ( a [ i + j ] ) ? a [ i + j ] : '.'		5674594	1					
ANR	5674988	ConditionalExpression	IS_PRINTABLE ( a [ i + j ] ) ? a [ i + j ] : '.'		5674594	0					
ANR	5674989	Condition	IS_PRINTABLE ( a [ i + j ] )		5674594	0					
ANR	5674990	CallExpression	IS_PRINTABLE ( a [ i + j ] )		5674594	0					
ANR	5674991	Callee	IS_PRINTABLE		5674594	0					
ANR	5674992	Identifier	IS_PRINTABLE		5674594	0					
ANR	5674993	ArgumentList	a [ i + j ]		5674594	1					
ANR	5674994	Argument	a [ i + j ]		5674594	0					
ANR	5674995	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5674996	Identifier	a		5674594	0					
ANR	5674997	AdditiveExpression	i + j		5674594	1		+			
ANR	5674998	Identifier	i		5674594	0					
ANR	5674999	Identifier	j		5674594	1					
ANR	5675000	ArrayIndexing	a [ i + j ]		5674594	1					
ANR	5675001	Identifier	a		5674594	0					
ANR	5675002	AdditiveExpression	i + j		5674594	1		+			
ANR	5675003	Identifier	i		5674594	0					
ANR	5675004	Identifier	j		5674594	1					
ANR	5675005	PrimaryExpression	'.'		5674594	2					
ANR	5675006	IfStatement	if ( ! eq )		5674594	3					
ANR	5675007	Condition	! eq	536:7:13978:13980	5674594	0	True				
ANR	5675008	UnaryOperationExpression	! eq		5674594	0					
ANR	5675009	UnaryOperator	!		5674594	0					
ANR	5675010	Identifier	eq		5674594	1					
ANR	5675011	CompoundStatement		68:12:1506:1506	5674594	1					
ANR	5675012	ExpressionStatement	r_cons_printf ( Color_RESET )	537:4:13989:14016	5674594	0	True				
ANR	5675013	CallExpression	r_cons_printf ( Color_RESET )		5674594	0					
ANR	5675014	Callee	r_cons_printf		5674594	0					
ANR	5675015	Identifier	r_cons_printf		5674594	0					
ANR	5675016	ArgumentList	Color_RESET		5674594	1					
ANR	5675017	Argument	Color_RESET		5674594	0					
ANR	5675018	Identifier	Color_RESET		5674594	0					
ANR	5675019	ForStatement	for ( j = 0 ; j < pad ; j ++ )		5674594	11					
ANR	5675020	ForInit	j = 0 ;	540:7:14034:14039	5674594	0	True				
ANR	5675021	AssignmentExpression	j = 0		5674594	0		=			
ANR	5675022	Identifier	j		5674594	0					
ANR	5675023	PrimaryExpression	0		5674594	1					
ANR	5675024	Condition	j < pad	540:14:14041:14047	5674594	1	True				
ANR	5675025	RelationalExpression	j < pad		5674594	0		<			
ANR	5675026	Identifier	j		5674594	0					
ANR	5675027	Identifier	pad		5674594	1					
ANR	5675028	PostIncDecOperationExpression	j ++	540:23:14050:14052	5674594	2	True				
ANR	5675029	Identifier	j		5674594	0					
ANR	5675030	IncDec	++		5674594	1					
ANR	5675031	CompoundStatement		72:28:1578:1578	5674594	3					
ANR	5675032	ExpressionStatement	"r_cons_printf ( "" "" )"	541:3:14060:14079	5674594	0	True				
ANR	5675033	CallExpression	"r_cons_printf ( "" "" )"		5674594	0					
ANR	5675034	Callee	r_cons_printf		5674594	0					
ANR	5675035	Identifier	r_cons_printf		5674594	0					
ANR	5675036	ArgumentList	""" """		5674594	1					
ANR	5675037	Argument	""" """		5674594	0					
ANR	5675038	PrimaryExpression	""" """		5674594	0					
ANR	5675039	ExpressionStatement	"r_cons_printf ( ""   "" )"	543:2:14087:14108	5674594	12	True				
ANR	5675040	CallExpression	"r_cons_printf ( ""   "" )"		5674594	0					
ANR	5675041	Callee	r_cons_printf		5674594	0					
ANR	5675042	Identifier	r_cons_printf		5674594	0					
ANR	5675043	ArgumentList	"""   """		5674594	1					
ANR	5675044	Argument	"""   """		5674594	0					
ANR	5675045	PrimaryExpression	"""   """		5674594	0					
ANR	5675046	ForStatement	for ( j = 0 ; j < w ; j ++ )		5674594	13					
ANR	5675047	ForInit	j = 0 ;	544:7:14117:14122	5674594	0	True				
ANR	5675048	AssignmentExpression	j = 0		5674594	0		=			
ANR	5675049	Identifier	j		5674594	0					
ANR	5675050	PrimaryExpression	0		5674594	1					
ANR	5675051	Condition	j < w	544:14:14124:14128	5674594	1	True				
ANR	5675052	RelationalExpression	j < w		5674594	0		<			
ANR	5675053	Identifier	j		5674594	0					
ANR	5675054	Identifier	w		5674594	1					
ANR	5675055	PostIncDecOperationExpression	j ++	544:21:14131:14133	5674594	2	True				
ANR	5675056	Identifier	j		5674594	0					
ANR	5675057	IncDec	++		5674594	1					
ANR	5675058	CompoundStatement		77:3:1664:1695	5674594	3					
ANR	5675059	IdentifierDeclStatement	bool eq2 = a [ i + j ] == b [ i + j ] ;	545:3:14141:14172	5674594	0	True				
ANR	5675060	IdentifierDecl	eq2 = a [ i + j ] == b [ i + j ]		5674594	0					
ANR	5675061	IdentifierDeclType	bool		5674594	0					
ANR	5675062	Identifier	eq2		5674594	1					
ANR	5675063	AssignmentExpression	eq2 = a [ i + j ] == b [ i + j ]		5674594	2		=			
ANR	5675064	Identifier	eq2		5674594	0					
ANR	5675065	EqualityExpression	a [ i + j ] == b [ i + j ]		5674594	1		==			
ANR	5675066	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5675067	Identifier	a		5674594	0					
ANR	5675068	AdditiveExpression	i + j		5674594	1		+			
ANR	5675069	Identifier	i		5674594	0					
ANR	5675070	Identifier	j		5674594	1					
ANR	5675071	ArrayIndexing	b [ i + j ]		5674594	1					
ANR	5675072	Identifier	b		5674594	0					
ANR	5675073	AdditiveExpression	i + j		5674594	1		+			
ANR	5675074	Identifier	i		5674594	0					
ANR	5675075	Identifier	j		5674594	1					
ANR	5675076	IfStatement	if ( ! eq )		5674594	1					
ANR	5675077	Condition	! eq	546:7:14181:14183	5674594	0	True				
ANR	5675078	UnaryOperationExpression	! eq		5674594	0					
ANR	5675079	UnaryOperator	!		5674594	0					
ANR	5675080	Identifier	eq		5674594	1					
ANR	5675081	CompoundStatement		78:12:1709:1709	5674594	1					
ANR	5675082	ExpressionStatement	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )	547:4:14192:14235	5674594	0	True				
ANR	5675083	CallExpression	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )		5674594	0					
ANR	5675084	Callee	r_cons_printf		5674594	0					
ANR	5675085	Identifier	r_cons_printf		5674594	0					
ANR	5675086	ArgumentList	eq2 ? Color_GREEN : Color_RED		5674594	1					
ANR	5675087	Argument	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5675088	ConditionalExpression	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5675089	Condition	eq2		5674594	0					
ANR	5675090	Identifier	eq2		5674594	0					
ANR	5675091	Identifier	Color_GREEN		5674594	1					
ANR	5675092	Identifier	Color_RED		5674594	2					
ANR	5675093	ExpressionStatement	"r_cons_printf ( ""%02x"" , b [ i + j ] )"	549:3:14245:14277	5674594	2	True				
ANR	5675094	CallExpression	"r_cons_printf ( ""%02x"" , b [ i + j ] )"		5674594	0					
ANR	5675095	Callee	r_cons_printf		5674594	0					
ANR	5675096	Identifier	r_cons_printf		5674594	0					
ANR	5675097	ArgumentList	"""%02x"""		5674594	1					
ANR	5675098	Argument	"""%02x"""		5674594	0					
ANR	5675099	PrimaryExpression	"""%02x"""		5674594	0					
ANR	5675100	Argument	b [ i + j ]		5674594	1					
ANR	5675101	ArrayIndexing	b [ i + j ]		5674594	0					
ANR	5675102	Identifier	b		5674594	0					
ANR	5675103	AdditiveExpression	i + j		5674594	1		+			
ANR	5675104	Identifier	i		5674594	0					
ANR	5675105	Identifier	j		5674594	1					
ANR	5675106	IfStatement	if ( ! eq )		5674594	3					
ANR	5675107	Condition	! eq	550:7:14286:14288	5674594	0	True				
ANR	5675108	UnaryOperationExpression	! eq		5674594	0					
ANR	5675109	UnaryOperator	!		5674594	0					
ANR	5675110	Identifier	eq		5674594	1					
ANR	5675111	CompoundStatement		82:12:1814:1814	5674594	1					
ANR	5675112	ExpressionStatement	r_cons_printf ( Color_RESET )	551:4:14297:14324	5674594	0	True				
ANR	5675113	CallExpression	r_cons_printf ( Color_RESET )		5674594	0					
ANR	5675114	Callee	r_cons_printf		5674594	0					
ANR	5675115	Identifier	r_cons_printf		5674594	0					
ANR	5675116	ArgumentList	Color_RESET		5674594	1					
ANR	5675117	Argument	Color_RESET		5674594	0					
ANR	5675118	Identifier	Color_RESET		5674594	0					
ANR	5675119	ForStatement	for ( j = 0 ; j < pad ; j ++ )		5674594	14					
ANR	5675120	ForInit	j = 0 ;	554:7:14342:14347	5674594	0	True				
ANR	5675121	AssignmentExpression	j = 0		5674594	0		=			
ANR	5675122	Identifier	j		5674594	0					
ANR	5675123	PrimaryExpression	0		5674594	1					
ANR	5675124	Condition	j < pad	554:14:14349:14355	5674594	1	True				
ANR	5675125	RelationalExpression	j < pad		5674594	0		<			
ANR	5675126	Identifier	j		5674594	0					
ANR	5675127	Identifier	pad		5674594	1					
ANR	5675128	PostIncDecOperationExpression	j ++	554:23:14358:14360	5674594	2	True				
ANR	5675129	Identifier	j		5674594	0					
ANR	5675130	IncDec	++		5674594	1					
ANR	5675131	CompoundStatement		86:28:1886:1886	5674594	3					
ANR	5675132	ExpressionStatement	"r_cons_printf ( ""  "" )"	555:3:14368:14388	5674594	0	True				
ANR	5675133	CallExpression	"r_cons_printf ( ""  "" )"		5674594	0					
ANR	5675134	Callee	r_cons_printf		5674594	0					
ANR	5675135	Identifier	r_cons_printf		5674594	0					
ANR	5675136	ArgumentList	"""  """		5674594	1					
ANR	5675137	Argument	"""  """		5674594	0					
ANR	5675138	PrimaryExpression	"""  """		5674594	0					
ANR	5675139	ExpressionStatement	"r_cons_printf ( "" "" )"	557:2:14396:14415	5674594	15	True				
ANR	5675140	CallExpression	"r_cons_printf ( "" "" )"		5674594	0					
ANR	5675141	Callee	r_cons_printf		5674594	0					
ANR	5675142	Identifier	r_cons_printf		5674594	0					
ANR	5675143	ArgumentList	""" """		5674594	1					
ANR	5675144	Argument	""" """		5674594	0					
ANR	5675145	PrimaryExpression	""" """		5674594	0					
ANR	5675146	ForStatement	for ( j = 0 ; j < w ; j ++ )		5674594	16					
ANR	5675147	ForInit	j = 0 ;	558:7:14424:14429	5674594	0	True				
ANR	5675148	AssignmentExpression	j = 0		5674594	0		=			
ANR	5675149	Identifier	j		5674594	0					
ANR	5675150	PrimaryExpression	0		5674594	1					
ANR	5675151	Condition	j < w	558:14:14431:14435	5674594	1	True				
ANR	5675152	RelationalExpression	j < w		5674594	0		<			
ANR	5675153	Identifier	j		5674594	0					
ANR	5675154	Identifier	w		5674594	1					
ANR	5675155	PostIncDecOperationExpression	j ++	558:21:14438:14440	5674594	2	True				
ANR	5675156	Identifier	j		5674594	0					
ANR	5675157	IncDec	++		5674594	1					
ANR	5675158	CompoundStatement		91:3:1971:2002	5674594	3					
ANR	5675159	IdentifierDeclStatement	bool eq2 = a [ i + j ] == b [ i + j ] ;	559:3:14448:14479	5674594	0	True				
ANR	5675160	IdentifierDecl	eq2 = a [ i + j ] == b [ i + j ]		5674594	0					
ANR	5675161	IdentifierDeclType	bool		5674594	0					
ANR	5675162	Identifier	eq2		5674594	1					
ANR	5675163	AssignmentExpression	eq2 = a [ i + j ] == b [ i + j ]		5674594	2		=			
ANR	5675164	Identifier	eq2		5674594	0					
ANR	5675165	EqualityExpression	a [ i + j ] == b [ i + j ]		5674594	1		==			
ANR	5675166	ArrayIndexing	a [ i + j ]		5674594	0					
ANR	5675167	Identifier	a		5674594	0					
ANR	5675168	AdditiveExpression	i + j		5674594	1		+			
ANR	5675169	Identifier	i		5674594	0					
ANR	5675170	Identifier	j		5674594	1					
ANR	5675171	ArrayIndexing	b [ i + j ]		5674594	1					
ANR	5675172	Identifier	b		5674594	0					
ANR	5675173	AdditiveExpression	i + j		5674594	1		+			
ANR	5675174	Identifier	i		5674594	0					
ANR	5675175	Identifier	j		5674594	1					
ANR	5675176	IfStatement	if ( ! eq )		5674594	1					
ANR	5675177	Condition	! eq	560:7:14488:14490	5674594	0	True				
ANR	5675178	UnaryOperationExpression	! eq		5674594	0					
ANR	5675179	UnaryOperator	!		5674594	0					
ANR	5675180	Identifier	eq		5674594	1					
ANR	5675181	CompoundStatement		92:12:2016:2016	5674594	1					
ANR	5675182	ExpressionStatement	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )	561:4:14499:14542	5674594	0	True				
ANR	5675183	CallExpression	r_cons_printf ( eq2 ? Color_GREEN : Color_RED )		5674594	0					
ANR	5675184	Callee	r_cons_printf		5674594	0					
ANR	5675185	Identifier	r_cons_printf		5674594	0					
ANR	5675186	ArgumentList	eq2 ? Color_GREEN : Color_RED		5674594	1					
ANR	5675187	Argument	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5675188	ConditionalExpression	eq2 ? Color_GREEN : Color_RED		5674594	0					
ANR	5675189	Condition	eq2		5674594	0					
ANR	5675190	Identifier	eq2		5674594	0					
ANR	5675191	Identifier	Color_GREEN		5674594	1					
ANR	5675192	Identifier	Color_RED		5674594	2					
ANR	5675193	ExpressionStatement	"r_cons_printf ( ""%c"" , IS_PRINTABLE ( b [ i + j ] ) ? b [ i + j ] : '.' )"	563:3:14552:14612	5674594	2	True				
ANR	5675194	CallExpression	"r_cons_printf ( ""%c"" , IS_PRINTABLE ( b [ i + j ] ) ? b [ i + j ] : '.' )"		5674594	0					
ANR	5675195	Callee	r_cons_printf		5674594	0					
ANR	5675196	Identifier	r_cons_printf		5674594	0					
ANR	5675197	ArgumentList	"""%c"""		5674594	1					
ANR	5675198	Argument	"""%c"""		5674594	0					
ANR	5675199	PrimaryExpression	"""%c"""		5674594	0					
ANR	5675200	Argument	IS_PRINTABLE ( b [ i + j ] ) ? b [ i + j ] : '.'		5674594	1					
ANR	5675201	ConditionalExpression	IS_PRINTABLE ( b [ i + j ] ) ? b [ i + j ] : '.'		5674594	0					
ANR	5675202	Condition	IS_PRINTABLE ( b [ i + j ] )		5674594	0					
ANR	5675203	CallExpression	IS_PRINTABLE ( b [ i + j ] )		5674594	0					
ANR	5675204	Callee	IS_PRINTABLE		5674594	0					
ANR	5675205	Identifier	IS_PRINTABLE		5674594	0					
ANR	5675206	ArgumentList	b [ i + j ]		5674594	1					
ANR	5675207	Argument	b [ i + j ]		5674594	0					
ANR	5675208	ArrayIndexing	b [ i + j ]		5674594	0					
ANR	5675209	Identifier	b		5674594	0					
ANR	5675210	AdditiveExpression	i + j		5674594	1		+			
ANR	5675211	Identifier	i		5674594	0					
ANR	5675212	Identifier	j		5674594	1					
ANR	5675213	ArrayIndexing	b [ i + j ]		5674594	1					
ANR	5675214	Identifier	b		5674594	0					
ANR	5675215	AdditiveExpression	i + j		5674594	1		+			
ANR	5675216	Identifier	i		5674594	0					
ANR	5675217	Identifier	j		5674594	1					
ANR	5675218	PrimaryExpression	'.'		5674594	2					
ANR	5675219	IfStatement	if ( ! eq )		5674594	3					
ANR	5675220	Condition	! eq	564:7:14621:14623	5674594	0	True				
ANR	5675221	UnaryOperationExpression	! eq		5674594	0					
ANR	5675222	UnaryOperator	!		5674594	0					
ANR	5675223	Identifier	eq		5674594	1					
ANR	5675224	CompoundStatement		96:12:2149:2149	5674594	1					
ANR	5675225	ExpressionStatement	r_cons_printf ( Color_RESET )	565:4:14632:14659	5674594	0	True				
ANR	5675226	CallExpression	r_cons_printf ( Color_RESET )		5674594	0					
ANR	5675227	Callee	r_cons_printf		5674594	0					
ANR	5675228	Identifier	r_cons_printf		5674594	0					
ANR	5675229	ArgumentList	Color_RESET		5674594	1					
ANR	5675230	Argument	Color_RESET		5674594	0					
ANR	5675231	Identifier	Color_RESET		5674594	0					
ANR	5675232	ExpressionStatement	"r_cons_printf ( ""\\n"" )"	568:2:14672:14692	5674594	17	True				
ANR	5675233	CallExpression	"r_cons_printf ( ""\\n"" )"		5674594	0					
ANR	5675234	Callee	r_cons_printf		5674594	0					
ANR	5675235	Identifier	r_cons_printf		5674594	0					
ANR	5675236	ArgumentList	"""\\n"""		5674594	1					
ANR	5675237	Argument	"""\\n"""		5674594	0					
ANR	5675238	PrimaryExpression	"""\\n"""		5674594	0					
ANR	5675239	ExpressionStatement	r_cons_flush ( )	569:2:14696:14711	5674594	18	True				
ANR	5675240	CallExpression	r_cons_flush ( )		5674594	0					
ANR	5675241	Callee	r_cons_flush		5674594	0					
ANR	5675242	Identifier	r_cons_flush		5674594	0					
ANR	5675243	ArgumentList			5674594	1					
ANR	5675244	ExpressionStatement	r_cons_break_end ( )	571:1:14717:14736	5674594	8	True				
ANR	5675245	CallExpression	r_cons_break_end ( )		5674594	0					
ANR	5675246	Callee	r_cons_break_end		5674594	0					
ANR	5675247	Identifier	r_cons_break_end		5674594	0					
ANR	5675248	ArgumentList			5674594	1					
ANR	5675249	Statement	r_cons_printf	572:1:14739:14751	5674594	9	True				
ANR	5675250	Statement	(	572:15:14753:14753	5674594	10	True				
ANR	5675251	Statement	"""\\n"""	572:16:14754:14757	5674594	11	True				
ANR	5675252	Statement	Color_RESET	572:20:14758:14768	5674594	12	True				
ANR	5675253	Statement	)	572:31:14769:14769	5674594	13	True				
ANR	5675254	ExpressionStatement		572:32:14770:14770	5674594	14	True				
ANR	5675255	ExpressionStatement	r_cons_flush ( )	573:1:14773:14788	5674594	15	True				
ANR	5675256	CallExpression	r_cons_flush ( )		5674594	0					
ANR	5675257	Callee	r_cons_flush		5674594	0					
ANR	5675258	Identifier	r_cons_flush		5674594	0					
ANR	5675259	ArgumentList			5674594	1					
ANR	5675260	IfStatement	if ( as != bs )		5674594	16					
ANR	5675261	Condition	as != bs	574:5:14795:14802	5674594	0	True				
ANR	5675262	EqualityExpression	as != bs		5674594	0		!=			
ANR	5675263	Identifier	as		5674594	0					
ANR	5675264	Identifier	bs		5674594	1					
ANR	5675265	CompoundStatement		106:15:2328:2328	5674594	1					
ANR	5675266	ExpressionStatement	"r_cons_printf ( ""...\\n"" )"	575:2:14809:14832	5674594	0	True				
ANR	5675267	CallExpression	"r_cons_printf ( ""...\\n"" )"		5674594	0					
ANR	5675268	Callee	r_cons_printf		5674594	0					
ANR	5675269	Identifier	r_cons_printf		5674594	0					
ANR	5675270	ArgumentList	"""...\\n"""		5674594	1					
ANR	5675271	Argument	"""...\\n"""		5674594	0					
ANR	5675272	PrimaryExpression	"""...\\n"""		5674594	0					
ANR	5675273	ReturnType	static void		5674594	1					
ANR	5675274	Identifier	dump_cols		5674594	2					
ANR	5675275	ParameterList	"ut8 * a , int as , ut8 * b , int bs , int w"		5674594	3					
ANR	5675276	Parameter	ut8 * a	469:22:12437:12442	5674594	0	True				
ANR	5675277	ParameterType	ut8 *		5674594	0					
ANR	5675278	Identifier	a		5674594	1					
ANR	5675279	Parameter	int as	469:30:12445:12450	5674594	1	True				
ANR	5675280	ParameterType	int		5674594	0					
ANR	5675281	Identifier	as		5674594	1					
ANR	5675282	Parameter	ut8 * b	469:38:12453:12458	5674594	2	True				
ANR	5675283	ParameterType	ut8 *		5674594	0					
ANR	5675284	Identifier	b		5674594	1					
ANR	5675285	Parameter	int bs	469:46:12461:12466	5674594	3	True				
ANR	5675286	ParameterType	int		5674594	0					
ANR	5675287	Identifier	bs		5674594	1					
ANR	5675288	Parameter	int w	469:54:12469:12473	5674594	4	True				
ANR	5675289	ParameterType	int		5674594	0					
ANR	5675290	Identifier	w		5674594	1					
ANR	5675291	CFGEntryNode	ENTRY		5674594		True				
ANR	5675292	CFGExitNode	EXIT		5674594		True				
ANR	5675293	Symbol	Color_GREEN		5674594						
ANR	5675294	Symbol	IS_PRINTABLE		5674594						
ANR	5675295	Symbol	eq2		5674594						
ANR	5675296	Symbol	Color_RESET		5674594						
ANR	5675297	Symbol	bs		5674594						
ANR	5675298	Symbol	pad		5674594						
ANR	5675299	Symbol	r_cons_is_breaked		5674594						
ANR	5675300	Symbol	memcmp		5674594						
ANR	5675301	Symbol	a		5674594						
ANR	5675302	Symbol	b		5674594						
ANR	5675303	Symbol	NULL		5674594						
ANR	5675304	Symbol	ctx		5674594						
ANR	5675305	Symbol	sz		5674594						
ANR	5675306	Symbol	i		5674594						
ANR	5675307	Symbol	R_MIN		5674594						
ANR	5675308	Symbol	j		5674594						
ANR	5675309	Symbol	* a		5674594						
ANR	5675310	Symbol	eq		5674594						
ANR	5675311	Symbol	* b		5674594						
ANR	5675312	Symbol	DUMP_CONTEXT		5674594						
ANR	5675313	Symbol	as		5674594						
ANR	5675314	Symbol	* i		5674594						
ANR	5675315	Symbol	* j		5674594						
ANR	5675316	Symbol	w		5674594						
ANR	5675317	Symbol	Color_RED		5674594						
ANR	5675318	Function	handle_sha256	579:0:14840:15144							
ANR	5675319	FunctionDef	"handle_sha256 (const ut8 * block , int len)"		5675318	0					
ANR	5675320	CompoundStatement		579:53:14893:15144	5675318	0					
ANR	5675321	IdentifierDeclStatement	int i = 0 ;	580:1:14896:14905	5675318	0	True				
ANR	5675322	IdentifierDecl	i = 0		5675318	0					
ANR	5675323	IdentifierDeclType	int		5675318	0					
ANR	5675324	Identifier	i		5675318	1					
ANR	5675325	AssignmentExpression	i = 0		5675318	2		=			
ANR	5675326	Identifier	i		5675318	0					
ANR	5675327	PrimaryExpression	0		5675318	1					
ANR	5675328	IdentifierDeclStatement	"RHash * ctx = r_hash_new ( true , R_HASH_SHA256 ) ;"	581:1:14908:14953	5675318	1	True				
ANR	5675329	IdentifierDecl	"* ctx = r_hash_new ( true , R_HASH_SHA256 )"		5675318	0					
ANR	5675330	IdentifierDeclType	RHash *		5675318	0					
ANR	5675331	Identifier	ctx		5675318	1					
ANR	5675332	AssignmentExpression	"* ctx = r_hash_new ( true , R_HASH_SHA256 )"		5675318	2		=			
ANR	5675333	Identifier	ctx		5675318	0					
ANR	5675334	CallExpression	"r_hash_new ( true , R_HASH_SHA256 )"		5675318	1					
ANR	5675335	Callee	r_hash_new		5675318	0					
ANR	5675336	Identifier	r_hash_new		5675318	0					
ANR	5675337	ArgumentList	true		5675318	1					
ANR	5675338	Argument	true		5675318	0					
ANR	5675339	Identifier	true		5675318	0					
ANR	5675340	Argument	R_HASH_SHA256		5675318	1					
ANR	5675341	Identifier	R_HASH_SHA256		5675318	0					
ANR	5675342	IdentifierDeclStatement	"const ut8 * c = r_hash_do_sha256 ( ctx , block , len ) ;"	582:1:14956:15005	5675318	2	True				
ANR	5675343	IdentifierDecl	"* c = r_hash_do_sha256 ( ctx , block , len )"		5675318	0					
ANR	5675344	IdentifierDeclType	const ut8 *		5675318	0					
ANR	5675345	Identifier	c		5675318	1					
ANR	5675346	AssignmentExpression	"* c = r_hash_do_sha256 ( ctx , block , len )"		5675318	2		=			
ANR	5675347	Identifier	c		5675318	0					
ANR	5675348	CallExpression	"r_hash_do_sha256 ( ctx , block , len )"		5675318	1					
ANR	5675349	Callee	r_hash_do_sha256		5675318	0					
ANR	5675350	Identifier	r_hash_do_sha256		5675318	0					
ANR	5675351	ArgumentList	ctx		5675318	1					
ANR	5675352	Argument	ctx		5675318	0					
ANR	5675353	Identifier	ctx		5675318	0					
ANR	5675354	Argument	block		5675318	1					
ANR	5675355	Identifier	block		5675318	0					
ANR	5675356	Argument	len		5675318	2					
ANR	5675357	Identifier	len		5675318	0					
ANR	5675358	IfStatement	if ( ! c )		5675318	3					
ANR	5675359	Condition	! c	583:5:15012:15013	5675318	0	True				
ANR	5675360	UnaryOperationExpression	! c		5675318	0					
ANR	5675361	UnaryOperator	!		5675318	0					
ANR	5675362	Identifier	c		5675318	1					
ANR	5675363	CompoundStatement		5:9:122:122	5675318	1					
ANR	5675364	ExpressionStatement	r_hash_free ( ctx )	584:2:15020:15037	5675318	0	True				
ANR	5675365	CallExpression	r_hash_free ( ctx )		5675318	0					
ANR	5675366	Callee	r_hash_free		5675318	0					
ANR	5675367	Identifier	r_hash_free		5675318	0					
ANR	5675368	ArgumentList	ctx		5675318	1					
ANR	5675369	Argument	ctx		5675318	0					
ANR	5675370	Identifier	ctx		5675318	0					
ANR	5675371	ReturnStatement	return ;	585:2:15041:15047	5675318	1	True				
ANR	5675372	ForStatement	for ( i = 0 ; i < R_HASH_SIZE_SHA256 ; i ++ )		5675318	4					
ANR	5675373	ForInit	i = 0 ;	587:6:15058:15063	5675318	0	True				
ANR	5675374	AssignmentExpression	i = 0		5675318	0		=			
ANR	5675375	Identifier	i		5675318	0					
ANR	5675376	PrimaryExpression	0		5675318	1					
ANR	5675377	Condition	i < R_HASH_SIZE_SHA256	587:13:15065:15086	5675318	1	True				
ANR	5675378	RelationalExpression	i < R_HASH_SIZE_SHA256		5675318	0		<			
ANR	5675379	Identifier	i		5675318	0					
ANR	5675380	Identifier	R_HASH_SIZE_SHA256		5675318	1					
ANR	5675381	PostIncDecOperationExpression	i ++	587:37:15089:15091	5675318	2	True				
ANR	5675382	Identifier	i		5675318	0					
ANR	5675383	IncDec	++		5675318	1					
ANR	5675384	CompoundStatement		9:42:200:200	5675318	3					
ANR	5675385	ExpressionStatement	"printf ( ""%02x"" , c [ i ] )"	588:2:15098:15119	5675318	0	True				
ANR	5675386	CallExpression	"printf ( ""%02x"" , c [ i ] )"		5675318	0					
ANR	5675387	Callee	printf		5675318	0					
ANR	5675388	Identifier	printf		5675318	0					
ANR	5675389	ArgumentList	"""%02x"""		5675318	1					
ANR	5675390	Argument	"""%02x"""		5675318	0					
ANR	5675391	PrimaryExpression	"""%02x"""		5675318	0					
ANR	5675392	Argument	c [ i ]		5675318	1					
ANR	5675393	ArrayIndexing	c [ i ]		5675318	0					
ANR	5675394	Identifier	c		5675318	0					
ANR	5675395	Identifier	i		5675318	1					
ANR	5675396	ExpressionStatement	r_hash_free ( ctx )	590:1:15125:15142	5675318	5	True				
ANR	5675397	CallExpression	r_hash_free ( ctx )		5675318	0					
ANR	5675398	Callee	r_hash_free		5675318	0					
ANR	5675399	Identifier	r_hash_free		5675318	0					
ANR	5675400	ArgumentList	ctx		5675318	1					
ANR	5675401	Argument	ctx		5675318	0					
ANR	5675402	Identifier	ctx		5675318	0					
ANR	5675403	ReturnType	static void		5675318	1					
ANR	5675404	Identifier	handle_sha256		5675318	2					
ANR	5675405	ParameterList	"const ut8 * block , int len"		5675318	3					
ANR	5675406	Parameter	const ut8 * block	579:26:14866:14881	5675318	0	True				
ANR	5675407	ParameterType	const ut8 *		5675318	0					
ANR	5675408	Identifier	block		5675318	1					
ANR	5675409	Parameter	int len	579:44:14884:14890	5675318	1	True				
ANR	5675410	ParameterType	int		5675318	0					
ANR	5675411	Identifier	len		5675318	1					
ANR	5675412	CFGEntryNode	ENTRY		5675318		True				
ANR	5675413	CFGExitNode	EXIT		5675318		True				
ANR	5675414	Symbol	R_HASH_SHA256		5675318						
ANR	5675415	Symbol	c		5675318						
ANR	5675416	Symbol	* i		5675318						
ANR	5675417	Symbol	len		5675318						
ANR	5675418	Symbol	ctx		5675318						
ANR	5675419	Symbol	true		5675318						
ANR	5675420	Symbol	i		5675318						
ANR	5675421	Symbol	block		5675318						
ANR	5675422	Symbol	R_HASH_SIZE_SHA256		5675318						
ANR	5675423	Symbol	* c		5675318						
ANR	5675424	Symbol	r_hash_do_sha256		5675318						
ANR	5675425	Symbol	r_hash_new		5675318						
ANR	5675426	Function	slurp	593:0:15147:15878							
ANR	5675427	FunctionDef	"slurp (RCore * * c , const char * file , int * sz)"		5675426	0					
ANR	5675428	CompoundStatement		593:56:15203:15878	5675426	0					
ANR	5675429	IdentifierDeclStatement	RIODesc * d ;	594:1:15206:15216	5675426	0	True				
ANR	5675430	IdentifierDecl	* d		5675426	0					
ANR	5675431	IdentifierDeclType	RIODesc *		5675426	0					
ANR	5675432	Identifier	d		5675426	1					
ANR	5675433	IdentifierDeclStatement	RIO * io ;	595:1:15219:15226	5675426	1	True				
ANR	5675434	IdentifierDecl	* io		5675426	0					
ANR	5675435	IdentifierDeclType	RIO *		5675426	0					
ANR	5675436	Identifier	io		5675426	1					
ANR	5675437	IfStatement	"if ( c && file && strstr ( file , ""://"" ) )"		5675426	2					
ANR	5675438	Condition	"c && file && strstr ( file , ""://"" )"	596:5:15233:15265	5675426	0	True				
ANR	5675439	AndExpression	"c && file && strstr ( file , ""://"" )"		5675426	0		&&			
ANR	5675440	Identifier	c		5675426	0					
ANR	5675441	AndExpression	"file && strstr ( file , ""://"" )"		5675426	1		&&			
ANR	5675442	Identifier	file		5675426	0					
ANR	5675443	CallExpression	"strstr ( file , ""://"" )"		5675426	1					
ANR	5675444	Callee	strstr		5675426	0					
ANR	5675445	Identifier	strstr		5675426	0					
ANR	5675446	ArgumentList	file		5675426	1					
ANR	5675447	Argument	file		5675426	0					
ANR	5675448	Identifier	file		5675426	0					
ANR	5675449	Argument	"""://"""		5675426	1					
ANR	5675450	PrimaryExpression	"""://"""		5675426	0					
ANR	5675451	CompoundStatement		6:2:88:97	5675426	1					
ANR	5675452	IdentifierDeclStatement	ut8 * data = NULL ;	597:2:15272:15288	5675426	0	True				
ANR	5675453	IdentifierDecl	* data = NULL		5675426	0					
ANR	5675454	IdentifierDeclType	ut8 *		5675426	0					
ANR	5675455	Identifier	data		5675426	1					
ANR	5675456	AssignmentExpression	* data = NULL		5675426	2		=			
ANR	5675457	Identifier	NULL		5675426	0					
ANR	5675458	Identifier	NULL		5675426	1					
ANR	5675459	IdentifierDeclStatement	ut64 size ;	598:2:15292:15301	5675426	1	True				
ANR	5675460	IdentifierDecl	size		5675426	0					
ANR	5675461	IdentifierDeclType	ut64		5675426	0					
ANR	5675462	Identifier	size		5675426	1					
ANR	5675463	IfStatement	if ( ! * c )		5675426	2					
ANR	5675464	Condition	! * c	599:6:15309:15311	5675426	0	True				
ANR	5675465	UnaryOperationExpression	! * c		5675426	0					
ANR	5675466	UnaryOperator	!		5675426	0					
ANR	5675467	UnaryOperationExpression	* c		5675426	1					
ANR	5675468	UnaryOperator	*		5675426	0					
ANR	5675469	Identifier	c		5675426	1					
ANR	5675470	CompoundStatement		7:11:110:110	5675426	1					
ANR	5675471	ExpressionStatement	* c = opencore ( NULL )	600:3:15319:15339	5675426	0	True				
ANR	5675472	AssignmentExpression	* c = opencore ( NULL )		5675426	0		=			
ANR	5675473	UnaryOperationExpression	* c		5675426	0					
ANR	5675474	UnaryOperator	*		5675426	0					
ANR	5675475	Identifier	c		5675426	1					
ANR	5675476	CallExpression	opencore ( NULL )		5675426	1					
ANR	5675477	Callee	opencore		5675426	0					
ANR	5675478	Identifier	opencore		5675426	0					
ANR	5675479	ArgumentList	NULL		5675426	1					
ANR	5675480	Argument	NULL		5675426	0					
ANR	5675481	Identifier	NULL		5675426	0					
ANR	5675482	IfStatement	if ( ! * c )		5675426	3					
ANR	5675483	Condition	! * c	602:6:15351:15353	5675426	0	True				
ANR	5675484	UnaryOperationExpression	! * c		5675426	0					
ANR	5675485	UnaryOperator	!		5675426	0					
ANR	5675486	UnaryOperationExpression	* c		5675426	1					
ANR	5675487	UnaryOperator	*		5675426	0					
ANR	5675488	Identifier	c		5675426	1					
ANR	5675489	CompoundStatement		10:11:152:152	5675426	1					
ANR	5675490	ExpressionStatement	"eprintf ( ""opencore failed\\n"" )"	603:3:15361:15390	5675426	0	True				
ANR	5675491	CallExpression	"eprintf ( ""opencore failed\\n"" )"		5675426	0					
ANR	5675492	Callee	eprintf		5675426	0					
ANR	5675493	Identifier	eprintf		5675426	0					
ANR	5675494	ArgumentList	"""opencore failed\\n"""		5675426	1					
ANR	5675495	Argument	"""opencore failed\\n"""		5675426	0					
ANR	5675496	PrimaryExpression	"""opencore failed\\n"""		5675426	0					
ANR	5675497	ReturnStatement	return NULL ;	604:3:15395:15406	5675426	1	True				
ANR	5675498	Identifier	NULL		5675426	0					
ANR	5675499	ExpressionStatement	io = ( * c ) -> io	606:2:15414:15427	5675426	4	True				
ANR	5675500	AssignmentExpression	io = ( * c ) -> io		5675426	0		=			
ANR	5675501	Identifier	io		5675426	0					
ANR	5675502	PtrMemberAccess	( * c ) -> io		5675426	1					
ANR	5675503	UnaryOperationExpression	* c		5675426	0					
ANR	5675504	UnaryOperator	*		5675426	0					
ANR	5675505	Identifier	c		5675426	1					
ANR	5675506	Identifier	io		5675426	1					
ANR	5675507	ExpressionStatement	"d = r_io_open ( io , file , 0 , 0 )"	607:2:15431:15461	5675426	5	True				
ANR	5675508	AssignmentExpression	"d = r_io_open ( io , file , 0 , 0 )"		5675426	0		=			
ANR	5675509	Identifier	d		5675426	0					
ANR	5675510	CallExpression	"r_io_open ( io , file , 0 , 0 )"		5675426	1					
ANR	5675511	Callee	r_io_open		5675426	0					
ANR	5675512	Identifier	r_io_open		5675426	0					
ANR	5675513	ArgumentList	io		5675426	1					
ANR	5675514	Argument	io		5675426	0					
ANR	5675515	Identifier	io		5675426	0					
ANR	5675516	Argument	file		5675426	1					
ANR	5675517	Identifier	file		5675426	0					
ANR	5675518	Argument	0		5675426	2					
ANR	5675519	PrimaryExpression	0		5675426	0					
ANR	5675520	Argument	0		5675426	3					
ANR	5675521	PrimaryExpression	0		5675426	0					
ANR	5675522	IfStatement	if ( ! d )		5675426	6					
ANR	5675523	Condition	! d	608:6:15469:15470	5675426	0	True				
ANR	5675524	UnaryOperationExpression	! d		5675426	0					
ANR	5675525	UnaryOperator	!		5675426	0					
ANR	5675526	Identifier	d		5675426	1					
ANR	5675527	CompoundStatement		16:10:269:269	5675426	1					
ANR	5675528	ReturnStatement	return NULL ;	609:3:15478:15489	5675426	0	True				
ANR	5675529	Identifier	NULL		5675426	0					
ANR	5675530	ExpressionStatement	size = r_io_size ( io )	611:2:15497:15518	5675426	7	True				
ANR	5675531	AssignmentExpression	size = r_io_size ( io )		5675426	0		=			
ANR	5675532	Identifier	size		5675426	0					
ANR	5675533	CallExpression	r_io_size ( io )		5675426	1					
ANR	5675534	Callee	r_io_size		5675426	0					
ANR	5675535	Identifier	r_io_size		5675426	0					
ANR	5675536	ArgumentList	io		5675426	1					
ANR	5675537	Argument	io		5675426	0					
ANR	5675538	Identifier	io		5675426	0					
ANR	5675539	IfStatement	if ( size > 0 && size < ST32_MAX )		5675426	8					
ANR	5675540	Condition	size > 0 && size < ST32_MAX	612:6:15526:15552	5675426	0	True				
ANR	5675541	AndExpression	size > 0 && size < ST32_MAX		5675426	0		&&			
ANR	5675542	RelationalExpression	size > 0		5675426	0		>			
ANR	5675543	Identifier	size		5675426	0					
ANR	5675544	PrimaryExpression	0		5675426	1					
ANR	5675545	RelationalExpression	size < ST32_MAX		5675426	1		<			
ANR	5675546	Identifier	size		5675426	0					
ANR	5675547	Identifier	ST32_MAX		5675426	1					
ANR	5675548	CompoundStatement		20:35:351:351	5675426	1					
ANR	5675549	ExpressionStatement	"data = calloc ( 1 , size )"	613:3:15560:15583	5675426	0	True				
ANR	5675550	AssignmentExpression	"data = calloc ( 1 , size )"		5675426	0		=			
ANR	5675551	Identifier	data		5675426	0					
ANR	5675552	CallExpression	"calloc ( 1 , size )"		5675426	1					
ANR	5675553	Callee	calloc		5675426	0					
ANR	5675554	Identifier	calloc		5675426	0					
ANR	5675555	ArgumentList	1		5675426	1					
ANR	5675556	Argument	1		5675426	0					
ANR	5675557	PrimaryExpression	1		5675426	0					
ANR	5675558	Argument	size		5675426	1					
ANR	5675559	Identifier	size		5675426	0					
ANR	5675560	IfStatement	"if ( r_io_read_at ( io , 0 , data , size ) )"		5675426	1					
ANR	5675561	Condition	"r_io_read_at ( io , 0 , data , size )"	614:7:15592:15623	5675426	0	True				
ANR	5675562	CallExpression	"r_io_read_at ( io , 0 , data , size )"		5675426	0					
ANR	5675563	Callee	r_io_read_at		5675426	0					
ANR	5675564	Identifier	r_io_read_at		5675426	0					
ANR	5675565	ArgumentList	io		5675426	1					
ANR	5675566	Argument	io		5675426	0					
ANR	5675567	Identifier	io		5675426	0					
ANR	5675568	Argument	0		5675426	1					
ANR	5675569	PrimaryExpression	0		5675426	0					
ANR	5675570	Argument	data		5675426	2					
ANR	5675571	Identifier	data		5675426	0					
ANR	5675572	Argument	size		5675426	3					
ANR	5675573	Identifier	size		5675426	0					
ANR	5675574	CompoundStatement		22:41:422:422	5675426	1					
ANR	5675575	IfStatement	if ( sz )		5675426	0					
ANR	5675576	Condition	sz	615:8:15636:15637	5675426	0	True				
ANR	5675577	Identifier	sz		5675426	0					
ANR	5675578	CompoundStatement		23:12:436:436	5675426	1					
ANR	5675579	ExpressionStatement	* sz = size	616:5:15647:15657	5675426	0	True				
ANR	5675580	AssignmentExpression	* sz = size		5675426	0		=			
ANR	5675581	UnaryOperationExpression	* sz		5675426	0					
ANR	5675582	UnaryOperator	*		5675426	0					
ANR	5675583	Identifier	sz		5675426	1					
ANR	5675584	Identifier	size		5675426	1					
ANR	5675585	ElseStatement	else		5675426	0					
ANR	5675586	CompoundStatement		26:10:471:471	5675426	0					
ANR	5675587	ExpressionStatement	"eprintf ( ""slurp: read error\\n"" )"	619:4:15681:15712	5675426	0	True				
ANR	5675588	CallExpression	"eprintf ( ""slurp: read error\\n"" )"		5675426	0					
ANR	5675589	Callee	eprintf		5675426	0					
ANR	5675590	Identifier	eprintf		5675426	0					
ANR	5675591	ArgumentList	"""slurp: read error\\n"""		5675426	1					
ANR	5675592	Argument	"""slurp: read error\\n"""		5675426	0					
ANR	5675593	PrimaryExpression	"""slurp: read error\\n"""		5675426	0					
ANR	5675594	ExpressionStatement	R_FREE ( data )	620:4:15718:15731	5675426	1	True				
ANR	5675595	CallExpression	R_FREE ( data )		5675426	0					
ANR	5675596	Callee	R_FREE		5675426	0					
ANR	5675597	Identifier	R_FREE		5675426	0					
ANR	5675598	ArgumentList	data		5675426	1					
ANR	5675599	Argument	data		5675426	0					
ANR	5675600	Identifier	data		5675426	0					
ANR	5675601	ElseStatement	else		5675426	0					
ANR	5675602	CompoundStatement		30:9:543:543	5675426	0					
ANR	5675603	ExpressionStatement	"eprintf ( ""slurp: Invalid file size\\n"" )"	623:3:15752:15790	5675426	0	True				
ANR	5675604	CallExpression	"eprintf ( ""slurp: Invalid file size\\n"" )"		5675426	0					
ANR	5675605	Callee	eprintf		5675426	0					
ANR	5675606	Identifier	eprintf		5675426	0					
ANR	5675607	ArgumentList	"""slurp: Invalid file size\\n"""		5675426	1					
ANR	5675608	Argument	"""slurp: Invalid file size\\n"""		5675426	0					
ANR	5675609	PrimaryExpression	"""slurp: Invalid file size\\n"""		5675426	0					
ANR	5675610	ExpressionStatement	r_io_desc_close ( d )	625:2:15798:15817	5675426	9	True				
ANR	5675611	CallExpression	r_io_desc_close ( d )		5675426	0					
ANR	5675612	Callee	r_io_desc_close		5675426	0					
ANR	5675613	Identifier	r_io_desc_close		5675426	0					
ANR	5675614	ArgumentList	d		5675426	1					
ANR	5675615	Argument	d		5675426	0					
ANR	5675616	Identifier	d		5675426	0					
ANR	5675617	ReturnStatement	return data ;	626:2:15821:15832	5675426	10	True				
ANR	5675618	Identifier	data		5675426	0					
ANR	5675619	ReturnStatement	"return ( ut8 * ) r_file_slurp ( file , sz ) ;"	628:1:15838:15876	5675426	3	True				
ANR	5675620	CastExpression	"( ut8 * ) r_file_slurp ( file , sz )"		5675426	0					
ANR	5675621	CastTarget	ut8 *		5675426	0					
ANR	5675622	CallExpression	"r_file_slurp ( file , sz )"		5675426	1					
ANR	5675623	Callee	r_file_slurp		5675426	0					
ANR	5675624	Identifier	r_file_slurp		5675426	0					
ANR	5675625	ArgumentList	file		5675426	1					
ANR	5675626	Argument	file		5675426	0					
ANR	5675627	Identifier	file		5675426	0					
ANR	5675628	Argument	sz		5675426	1					
ANR	5675629	Identifier	sz		5675426	0					
ANR	5675630	ReturnType	static ut8 *		5675426	1					
ANR	5675631	Identifier	slurp		5675426	2					
ANR	5675632	ParameterList	"RCore * * c , const char * file , int * sz"		5675426	3					
ANR	5675633	Parameter	RCore * * c	593:18:15165:15173	5675426	0	True				
ANR	5675634	ParameterType	RCore * *		5675426	0					
ANR	5675635	Identifier	c		5675426	1					
ANR	5675636	Parameter	const char * file	593:29:15176:15191	5675426	1	True				
ANR	5675637	ParameterType	const char *		5675426	0					
ANR	5675638	Identifier	file		5675426	1					
ANR	5675639	Parameter	int * sz	593:47:15194:15200	5675426	2	True				
ANR	5675640	ParameterType	int *		5675426	0					
ANR	5675641	Identifier	sz		5675426	1					
ANR	5675642	CFGEntryNode	ENTRY		5675426		True				
ANR	5675643	CFGExitNode	EXIT		5675426		True				
ANR	5675644	Symbol	r_file_slurp		5675426						
ANR	5675645	Symbol	c		5675426						
ANR	5675646	Symbol	NULL		5675426						
ANR	5675647	Symbol	d		5675426						
ANR	5675648	Symbol	data		5675426						
ANR	5675649	Symbol	ST32_MAX		5675426						
ANR	5675650	Symbol	io		5675426						
ANR	5675651	Symbol	r_io_open		5675426						
ANR	5675652	Symbol	sz		5675426						
ANR	5675653	Symbol	* * c		5675426						
ANR	5675654	Symbol	r_io_read_at		5675426						
ANR	5675655	Symbol	calloc		5675426						
ANR	5675656	Symbol	* c		5675426						
ANR	5675657	Symbol	* sz		5675426						
ANR	5675658	Symbol	file		5675426						
ANR	5675659	Symbol	size		5675426						
ANR	5675660	Symbol	strstr		5675426						
ANR	5675661	Symbol	opencore		5675426						
ANR	5675662	Symbol	( * c ) -> io		5675426						
ANR	5675663	Symbol	r_io_size		5675426						
ANR	5675664	Function	import_cmp	631:0:15881:15982							
ANR	5675665	FunctionDef	"import_cmp (const RBinImport * a , const RBinImport * b)"		5675664	0					
ANR	5675666	CompoundStatement		631:64:15945:15982	5675664	0					
ANR	5675667	ReturnStatement	"return strcmp ( a -> name , b -> name ) ;"	632:1:15948:15980	5675664	0	True				
ANR	5675668	CallExpression	"strcmp ( a -> name , b -> name )"		5675664	0					
ANR	5675669	Callee	strcmp		5675664	0					
ANR	5675670	Identifier	strcmp		5675664	0					
ANR	5675671	ArgumentList	a -> name		5675664	1					
ANR	5675672	Argument	a -> name		5675664	0					
ANR	5675673	PtrMemberAccess	a -> name		5675664	0					
ANR	5675674	Identifier	a		5675664	0					
ANR	5675675	Identifier	name		5675664	1					
ANR	5675676	Argument	b -> name		5675664	1					
ANR	5675677	PtrMemberAccess	b -> name		5675664	0					
ANR	5675678	Identifier	b		5675664	0					
ANR	5675679	Identifier	name		5675664	1					
ANR	5675680	ReturnType	static int		5675664	1					
ANR	5675681	Identifier	import_cmp		5675664	2					
ANR	5675682	ParameterList	"const RBinImport * a , const RBinImport * b"		5675664	3					
ANR	5675683	Parameter	const RBinImport * a	631:22:15903:15921	5675664	0	True				
ANR	5675684	ParameterType	const RBinImport *		5675664	0					
ANR	5675685	Identifier	a		5675664	1					
ANR	5675686	Parameter	const RBinImport * b	631:43:15924:15942	5675664	1	True				
ANR	5675687	ParameterType	const RBinImport *		5675664	0					
ANR	5675688	Identifier	b		5675664	1					
ANR	5675689	CFGEntryNode	ENTRY		5675664		True				
ANR	5675690	CFGExitNode	EXIT		5675664		True				
ANR	5675691	Symbol	strcmp		5675664						
ANR	5675692	Symbol	a		5675664						
ANR	5675693	Symbol	b		5675664						
ANR	5675694	Symbol	a -> name		5675664						
ANR	5675695	Symbol	* a		5675664						
ANR	5675696	Symbol	* b		5675664						
ANR	5675697	Symbol	b -> name		5675664						
ANR	5675698	Function	get_imports	635:0:15985:16743							
ANR	5675699	FunctionDef	"get_imports (RCore * c , int * len)"		5675698	0					
ANR	5675700	CompoundStatement		635:44:16029:16743	5675698	0					
ANR	5675701	IdentifierDeclStatement	RListIter * iter ;	636:1:16032:16047	5675698	0	True				
ANR	5675702	IdentifierDecl	* iter		5675698	0					
ANR	5675703	IdentifierDeclType	RListIter *		5675698	0					
ANR	5675704	Identifier	iter		5675698	1					
ANR	5675705	IdentifierDeclStatement	"RBinImport * str , * old = NULL ;"	637:1:16050:16078	5675698	1	True				
ANR	5675706	IdentifierDecl	* str		5675698	0					
ANR	5675707	IdentifierDeclType	RBinImport *		5675698	0					
ANR	5675708	Identifier	str		5675698	1					
ANR	5675709	IdentifierDecl	* old = NULL		5675698	1					
ANR	5675710	IdentifierDeclType	RBinImport *		5675698	0					
ANR	5675711	Identifier	old		5675698	1					
ANR	5675712	AssignmentExpression	* old = NULL		5675698	2		=			
ANR	5675713	Identifier	NULL		5675698	0					
ANR	5675714	Identifier	NULL		5675698	1					
ANR	5675715	IdentifierDeclStatement	"ut8 * buf , * ptr ;"	638:1:16081:16095	5675698	2	True				
ANR	5675716	IdentifierDecl	* buf		5675698	0					
ANR	5675717	IdentifierDeclType	ut8 *		5675698	0					
ANR	5675718	Identifier	buf		5675698	1					
ANR	5675719	IdentifierDecl	* ptr		5675698	1					
ANR	5675720	IdentifierDeclType	ut8 *		5675698	0					
ANR	5675721	Identifier	ptr		5675698	1					
ANR	5675722	IfStatement	if ( ! c || ! len )		5675698	3					
ANR	5675723	Condition	! c || ! len	640:5:16103:16112	5675698	0	True				
ANR	5675724	OrExpression	! c || ! len		5675698	0		||			
ANR	5675725	UnaryOperationExpression	! c		5675698	0					
ANR	5675726	UnaryOperator	!		5675698	0					
ANR	5675727	Identifier	c		5675698	1					
ANR	5675728	UnaryOperationExpression	! len		5675698	1					
ANR	5675729	UnaryOperator	!		5675698	0					
ANR	5675730	Identifier	len		5675698	1					
ANR	5675731	CompoundStatement		6:17:85:85	5675698	1					
ANR	5675732	ReturnStatement	return NULL ;	641:2:16119:16130	5675698	0	True				
ANR	5675733	Identifier	NULL		5675698	0					
ANR	5675734	IdentifierDeclStatement	RList * list = r_bin_get_imports ( c -> bin ) ;	644:1:16137:16177	5675698	4	True				
ANR	5675735	IdentifierDecl	* list = r_bin_get_imports ( c -> bin )		5675698	0					
ANR	5675736	IdentifierDeclType	RList *		5675698	0					
ANR	5675737	Identifier	list		5675698	1					
ANR	5675738	AssignmentExpression	* list = r_bin_get_imports ( c -> bin )		5675698	2		=			
ANR	5675739	Identifier	list		5675698	0					
ANR	5675740	CallExpression	r_bin_get_imports ( c -> bin )		5675698	1					
ANR	5675741	Callee	r_bin_get_imports		5675698	0					
ANR	5675742	Identifier	r_bin_get_imports		5675698	0					
ANR	5675743	ArgumentList	c -> bin		5675698	1					
ANR	5675744	Argument	c -> bin		5675698	0					
ANR	5675745	PtrMemberAccess	c -> bin		5675698	0					
ANR	5675746	Identifier	c		5675698	0					
ANR	5675747	Identifier	bin		5675698	1					
ANR	5675748	ExpressionStatement	"r_list_sort ( list , ( RListComparator ) import_cmp )"	645:1:16180:16228	5675698	5	True				
ANR	5675749	CallExpression	"r_list_sort ( list , ( RListComparator ) import_cmp )"		5675698	0					
ANR	5675750	Callee	r_list_sort		5675698	0					
ANR	5675751	Identifier	r_list_sort		5675698	0					
ANR	5675752	ArgumentList	list		5675698	1					
ANR	5675753	Argument	list		5675698	0					
ANR	5675754	Identifier	list		5675698	0					
ANR	5675755	Argument	( RListComparator ) import_cmp		5675698	1					
ANR	5675756	CastExpression	( RListComparator ) import_cmp		5675698	0					
ANR	5675757	CastTarget	RListComparator		5675698	0					
ANR	5675758	Identifier	import_cmp		5675698	1					
ANR	5675759	ExpressionStatement	* len = 0	647:1:16232:16240	5675698	6	True				
ANR	5675760	AssignmentExpression	* len = 0		5675698	0		=			
ANR	5675761	UnaryOperationExpression	* len		5675698	0					
ANR	5675762	UnaryOperator	*		5675698	0					
ANR	5675763	Identifier	len		5675698	1					
ANR	5675764	PrimaryExpression	0		5675698	1					
ANR	5675765	Statement	r_list_foreach	649:1:16244:16257	5675698	7	True				
ANR	5675766	Statement	(	649:16:16259:16259	5675698	8	True				
ANR	5675767	Statement	list	649:17:16260:16263	5675698	9	True				
ANR	5675768	Statement	","	649:21:16264:16264	5675698	10	True				
ANR	5675769	Statement	iter	649:23:16266:16269	5675698	11	True				
ANR	5675770	Statement	","	649:27:16270:16270	5675698	12	True				
ANR	5675771	Statement	str	649:29:16272:16274	5675698	13	True				
ANR	5675772	Statement	)	649:32:16275:16275	5675698	14	True				
ANR	5675773	CompoundStatement		15:34:247:247	5675698	15					
ANR	5675774	IfStatement	"if ( ! old || ( old && import_cmp ( old , str ) != 0 ) )"		5675698	0					
ANR	5675775	Condition	"! old || ( old && import_cmp ( old , str ) != 0 )"	650:6:16285:16327	5675698	0	True				
ANR	5675776	OrExpression	"! old || ( old && import_cmp ( old , str ) != 0 )"		5675698	0		||			
ANR	5675777	UnaryOperationExpression	! old		5675698	0					
ANR	5675778	UnaryOperator	!		5675698	0					
ANR	5675779	Identifier	old		5675698	1					
ANR	5675780	AndExpression	"old && import_cmp ( old , str ) != 0"		5675698	1		&&			
ANR	5675781	Identifier	old		5675698	0					
ANR	5675782	EqualityExpression	"import_cmp ( old , str ) != 0"		5675698	1		!=			
ANR	5675783	CallExpression	"import_cmp ( old , str )"		5675698	0					
ANR	5675784	Callee	import_cmp		5675698	0					
ANR	5675785	Identifier	import_cmp		5675698	0					
ANR	5675786	ArgumentList	old		5675698	1					
ANR	5675787	Argument	old		5675698	0					
ANR	5675788	Identifier	old		5675698	0					
ANR	5675789	Argument	str		5675698	1					
ANR	5675790	Identifier	str		5675698	0					
ANR	5675791	PrimaryExpression	0		5675698	1					
ANR	5675792	CompoundStatement		16:51:300:300	5675698	1					
ANR	5675793	ExpressionStatement	* len += strlen ( str -> name ) + 1	651:3:16335:16365	5675698	0	True				
ANR	5675794	AssignmentExpression	* len += strlen ( str -> name ) + 1		5675698	0		+=			
ANR	5675795	UnaryOperationExpression	* len		5675698	0					
ANR	5675796	UnaryOperator	*		5675698	0					
ANR	5675797	Identifier	len		5675698	1					
ANR	5675798	AdditiveExpression	strlen ( str -> name ) + 1		5675698	1		+			
ANR	5675799	CallExpression	strlen ( str -> name )		5675698	0					
ANR	5675800	Callee	strlen		5675698	0					
ANR	5675801	Identifier	strlen		5675698	0					
ANR	5675802	ArgumentList	str -> name		5675698	1					
ANR	5675803	Argument	str -> name		5675698	0					
ANR	5675804	PtrMemberAccess	str -> name		5675698	0					
ANR	5675805	Identifier	str		5675698	0					
ANR	5675806	Identifier	name		5675698	1					
ANR	5675807	PrimaryExpression	1		5675698	1					
ANR	5675808	ExpressionStatement	old = str	652:3:16370:16379	5675698	1	True				
ANR	5675809	AssignmentExpression	old = str		5675698	0		=			
ANR	5675810	Identifier	old		5675698	0					
ANR	5675811	Identifier	str		5675698	1					
ANR	5675812	ExpressionStatement	ptr = buf = malloc ( * len + 1 )	655:1:16389:16418	5675698	16	True				
ANR	5675813	AssignmentExpression	ptr = buf = malloc ( * len + 1 )		5675698	0		=			
ANR	5675814	Identifier	ptr		5675698	0					
ANR	5675815	AssignmentExpression	buf = malloc ( * len + 1 )		5675698	1		=			
ANR	5675816	Identifier	buf		5675698	0					
ANR	5675817	CallExpression	malloc ( * len + 1 )		5675698	1					
ANR	5675818	Callee	malloc		5675698	0					
ANR	5675819	Identifier	malloc		5675698	0					
ANR	5675820	ArgumentList	* len + 1		5675698	1					
ANR	5675821	Argument	* len + 1		5675698	0					
ANR	5675822	AdditiveExpression	* len + 1		5675698	0		+			
ANR	5675823	UnaryOperationExpression	* len		5675698	0					
ANR	5675824	UnaryOperator	*		5675698	0					
ANR	5675825	Identifier	len		5675698	1					
ANR	5675826	PrimaryExpression	1		5675698	1					
ANR	5675827	IfStatement	if ( ! ptr )		5675698	17					
ANR	5675828	Condition	! ptr	656:5:16425:16428	5675698	0	True				
ANR	5675829	UnaryOperationExpression	! ptr		5675698	0					
ANR	5675830	UnaryOperator	!		5675698	0					
ANR	5675831	Identifier	ptr		5675698	1					
ANR	5675832	CompoundStatement		22:11:401:401	5675698	1					
ANR	5675833	ReturnStatement	return NULL ;	657:2:16435:16446	5675698	0	True				
ANR	5675834	Identifier	NULL		5675698	0					
ANR	5675835	ExpressionStatement	old = NULL	660:1:16453:16463	5675698	18	True				
ANR	5675836	AssignmentExpression	old = NULL		5675698	0		=			
ANR	5675837	Identifier	old		5675698	0					
ANR	5675838	Identifier	NULL		5675698	1					
ANR	5675839	Statement	r_list_foreach	662:1:16467:16480	5675698	19	True				
ANR	5675840	Statement	(	662:16:16482:16482	5675698	20	True				
ANR	5675841	Statement	list	662:17:16483:16486	5675698	21	True				
ANR	5675842	Statement	","	662:21:16487:16487	5675698	22	True				
ANR	5675843	Statement	iter	662:23:16489:16492	5675698	23	True				
ANR	5675844	Statement	","	662:27:16493:16493	5675698	24	True				
ANR	5675845	Statement	str	662:29:16495:16497	5675698	25	True				
ANR	5675846	Statement	)	662:32:16498:16498	5675698	26	True				
ANR	5675847	CompoundStatement		32:2:530:562	5675698	27					
ANR	5675848	IfStatement	"if ( old && ! import_cmp ( old , str ) )"		5675698	0					
ANR	5675849	Condition	"old && ! import_cmp ( old , str )"	663:6:16508:16536	5675698	0	True				
ANR	5675850	AndExpression	"old && ! import_cmp ( old , str )"		5675698	0		&&			
ANR	5675851	Identifier	old		5675698	0					
ANR	5675852	UnaryOperationExpression	"! import_cmp ( old , str )"		5675698	1					
ANR	5675853	UnaryOperator	!		5675698	0					
ANR	5675854	CallExpression	"import_cmp ( old , str )"		5675698	1					
ANR	5675855	Callee	import_cmp		5675698	0					
ANR	5675856	Identifier	import_cmp		5675698	0					
ANR	5675857	ArgumentList	old		5675698	1					
ANR	5675858	Argument	old		5675698	0					
ANR	5675859	Identifier	old		5675698	0					
ANR	5675860	Argument	str		5675698	1					
ANR	5675861	Identifier	str		5675698	0					
ANR	5675862	CompoundStatement		29:37:509:509	5675698	1					
ANR	5675863	ContinueStatement	continue ;	664:3:16544:16552	5675698	0	True				
ANR	5675864	IdentifierDeclStatement	int namelen = strlen ( str -> name ) ;	666:2:16560:16592	5675698	1	True				
ANR	5675865	IdentifierDecl	namelen = strlen ( str -> name )		5675698	0					
ANR	5675866	IdentifierDeclType	int		5675698	0					
ANR	5675867	Identifier	namelen		5675698	1					
ANR	5675868	AssignmentExpression	namelen = strlen ( str -> name )		5675698	2		=			
ANR	5675869	Identifier	namelen		5675698	0					
ANR	5675870	CallExpression	strlen ( str -> name )		5675698	1					
ANR	5675871	Callee	strlen		5675698	0					
ANR	5675872	Identifier	strlen		5675698	0					
ANR	5675873	ArgumentList	str -> name		5675698	1					
ANR	5675874	Argument	str -> name		5675698	0					
ANR	5675875	PtrMemberAccess	str -> name		5675698	0					
ANR	5675876	Identifier	str		5675698	0					
ANR	5675877	Identifier	name		5675698	1					
ANR	5675878	ExpressionStatement	"memcpy ( ptr , str -> name , namelen )"	667:2:16596:16628	5675698	2	True				
ANR	5675879	CallExpression	"memcpy ( ptr , str -> name , namelen )"		5675698	0					
ANR	5675880	Callee	memcpy		5675698	0					
ANR	5675881	Identifier	memcpy		5675698	0					
ANR	5675882	ArgumentList	ptr		5675698	1					
ANR	5675883	Argument	ptr		5675698	0					
ANR	5675884	Identifier	ptr		5675698	0					
ANR	5675885	Argument	str -> name		5675698	1					
ANR	5675886	PtrMemberAccess	str -> name		5675698	0					
ANR	5675887	Identifier	str		5675698	0					
ANR	5675888	Identifier	name		5675698	1					
ANR	5675889	Argument	namelen		5675698	2					
ANR	5675890	Identifier	namelen		5675698	0					
ANR	5675891	ExpressionStatement	ptr += namelen	668:2:16632:16646	5675698	3	True				
ANR	5675892	AssignmentExpression	ptr += namelen		5675698	0		+=			
ANR	5675893	Identifier	ptr		5675698	0					
ANR	5675894	Identifier	namelen		5675698	1					
ANR	5675895	ExpressionStatement	* ptr ++ = '\\n'	669:2:16650:16663	5675698	4	True				
ANR	5675896	AssignmentExpression	* ptr ++ = '\\n'		5675698	0		=			
ANR	5675897	UnaryOperationExpression	* ptr ++		5675698	0					
ANR	5675898	UnaryOperator	*		5675698	0					
ANR	5675899	PostIncDecOperationExpression	ptr ++		5675698	1					
ANR	5675900	Identifier	ptr		5675698	0					
ANR	5675901	IncDec	++		5675698	1					
ANR	5675902	PrimaryExpression	'\\n'		5675698	1					
ANR	5675903	ExpressionStatement	old = str	670:2:16667:16676	5675698	5	True				
ANR	5675904	AssignmentExpression	old = str		5675698	0		=			
ANR	5675905	Identifier	old		5675698	0					
ANR	5675906	Identifier	str		5675698	1					
ANR	5675907	ExpressionStatement	* ptr = 0	672:1:16682:16690	5675698	28	True				
ANR	5675908	AssignmentExpression	* ptr = 0		5675698	0		=			
ANR	5675909	UnaryOperationExpression	* ptr		5675698	0					
ANR	5675910	UnaryOperator	*		5675698	0					
ANR	5675911	Identifier	ptr		5675698	1					
ANR	5675912	PrimaryExpression	0		5675698	1					
ANR	5675913	ExpressionStatement	* len = strlen ( ( const char * ) buf )	674:1:16694:16728	5675698	29	True				
ANR	5675914	AssignmentExpression	* len = strlen ( ( const char * ) buf )		5675698	0		=			
ANR	5675915	UnaryOperationExpression	* len		5675698	0					
ANR	5675916	UnaryOperator	*		5675698	0					
ANR	5675917	Identifier	len		5675698	1					
ANR	5675918	CallExpression	strlen ( ( const char * ) buf )		5675698	1					
ANR	5675919	Callee	strlen		5675698	0					
ANR	5675920	Identifier	strlen		5675698	0					
ANR	5675921	ArgumentList	( const char * ) buf		5675698	1					
ANR	5675922	Argument	( const char * ) buf		5675698	0					
ANR	5675923	CastExpression	( const char * ) buf		5675698	0					
ANR	5675924	CastTarget	const char *		5675698	0					
ANR	5675925	Identifier	buf		5675698	1					
ANR	5675926	ReturnStatement	return buf ;	675:1:16731:16741	5675698	30	True				
ANR	5675927	Identifier	buf		5675698	0					
ANR	5675928	ReturnType	static ut8 *		5675698	1					
ANR	5675929	Identifier	get_imports		5675698	2					
ANR	5675930	ParameterList	"RCore * c , int * len"		5675698	3					
ANR	5675931	Parameter	RCore * c	635:24:16009:16016	5675698	0	True				
ANR	5675932	ParameterType	RCore *		5675698	0					
ANR	5675933	Identifier	c		5675698	1					
ANR	5675934	Parameter	int * len	635:34:16019:16026	5675698	1	True				
ANR	5675935	ParameterType	int *		5675698	0					
ANR	5675936	Identifier	len		5675698	1					
ANR	5675937	CFGEntryNode	ENTRY		5675698		True				
ANR	5675938	CFGExitNode	EXIT		5675698		True				
ANR	5675939	CFGErrorNode	ERROR		5675698		True				
ANR	5675940	Symbol	malloc		5675698						
ANR	5675941	Symbol	c		5675698						
ANR	5675942	Symbol	NULL		5675698						
ANR	5675943	Symbol	old		5675698						
ANR	5675944	Symbol	* ptr ++		5675698						
ANR	5675945	Symbol	iter		5675698						
ANR	5675946	Symbol	namelen		5675698						
ANR	5675947	Symbol	c -> bin		5675698						
ANR	5675948	Symbol	list		5675698						
ANR	5675949	Symbol	* c		5675698						
ANR	5675950	Symbol	ptr		5675698						
ANR	5675951	Symbol	str		5675698						
ANR	5675952	Symbol	strlen		5675698						
ANR	5675953	Symbol	buf		5675698						
ANR	5675954	Symbol	r_bin_get_imports		5675698						
ANR	5675955	Symbol	len		5675698						
ANR	5675956	Symbol	str -> name		5675698						
ANR	5675957	Symbol	* ptr		5675698						
ANR	5675958	Symbol	* str		5675698						
ANR	5675959	Symbol	import_cmp		5675698						
ANR	5675960	Symbol	* len		5675698						
ANR	5675961	Function	bs_cmp	678:0:16746:16911							
ANR	5675962	FunctionDef	"bs_cmp (const RBinString * a , const RBinString * b)"		5675961	0					
ANR	5675963	CompoundStatement		678:60:16806:16911	5675961	0					
ANR	5675964	IdentifierDeclStatement	int diff = a -> length - b -> length ;	679:1:16809:16841	5675961	0	True				
ANR	5675965	IdentifierDecl	diff = a -> length - b -> length		5675961	0					
ANR	5675966	IdentifierDeclType	int		5675961	0					
ANR	5675967	Identifier	diff		5675961	1					
ANR	5675968	AssignmentExpression	diff = a -> length - b -> length		5675961	2		=			
ANR	5675969	Identifier	diff		5675961	0					
ANR	5675970	AdditiveExpression	a -> length - b -> length		5675961	1		-			
ANR	5675971	PtrMemberAccess	a -> length		5675961	0					
ANR	5675972	Identifier	a		5675961	0					
ANR	5675973	Identifier	length		5675961	1					
ANR	5675974	PtrMemberAccess	b -> length		5675961	1					
ANR	5675975	Identifier	b		5675961	0					
ANR	5675976	Identifier	length		5675961	1					
ANR	5675977	ReturnStatement	"return diff == 0 ? strncmp ( a -> string , b -> string , a -> length ) : diff ;"	680:1:16844:16909	5675961	1	True				
ANR	5675978	ConditionalExpression	"diff == 0 ? strncmp ( a -> string , b -> string , a -> length ) : diff"		5675961	0					
ANR	5675979	Condition	diff == 0		5675961	0					
ANR	5675980	EqualityExpression	diff == 0		5675961	0		==			
ANR	5675981	Identifier	diff		5675961	0					
ANR	5675982	PrimaryExpression	0		5675961	1					
ANR	5675983	CallExpression	"strncmp ( a -> string , b -> string , a -> length )"		5675961	1					
ANR	5675984	Callee	strncmp		5675961	0					
ANR	5675985	Identifier	strncmp		5675961	0					
ANR	5675986	ArgumentList	a -> string		5675961	1					
ANR	5675987	Argument	a -> string		5675961	0					
ANR	5675988	PtrMemberAccess	a -> string		5675961	0					
ANR	5675989	Identifier	a		5675961	0					
ANR	5675990	Identifier	string		5675961	1					
ANR	5675991	Argument	b -> string		5675961	1					
ANR	5675992	PtrMemberAccess	b -> string		5675961	0					
ANR	5675993	Identifier	b		5675961	0					
ANR	5675994	Identifier	string		5675961	1					
ANR	5675995	Argument	a -> length		5675961	2					
ANR	5675996	PtrMemberAccess	a -> length		5675961	0					
ANR	5675997	Identifier	a		5675961	0					
ANR	5675998	Identifier	length		5675961	1					
ANR	5675999	Identifier	diff		5675961	2					
ANR	5676000	ReturnType	static int		5675961	1					
ANR	5676001	Identifier	bs_cmp		5675961	2					
ANR	5676002	ParameterList	"const RBinString * a , const RBinString * b"		5675961	3					
ANR	5676003	Parameter	const RBinString * a	678:18:16764:16782	5675961	0	True				
ANR	5676004	ParameterType	const RBinString *		5675961	0					
ANR	5676005	Identifier	a		5675961	1					
ANR	5676006	Parameter	const RBinString * b	678:39:16785:16803	5675961	1	True				
ANR	5676007	ParameterType	const RBinString *		5675961	0					
ANR	5676008	Identifier	b		5675961	1					
ANR	5676009	CFGEntryNode	ENTRY		5675961		True				
ANR	5676010	CFGExitNode	EXIT		5675961		True				
ANR	5676011	Symbol	a		5675961						
ANR	5676012	Symbol	strncmp		5675961						
ANR	5676013	Symbol	b		5675961						
ANR	5676014	Symbol	a -> string		5675961						
ANR	5676015	Symbol	b -> string		5675961						
ANR	5676016	Symbol	b -> length		5675961						
ANR	5676017	Symbol	diff		5675961						
ANR	5676018	Symbol	* a		5675961						
ANR	5676019	Symbol	* b		5675961						
ANR	5676020	Symbol	a -> length		5675961						
ANR	5676021	Function	get_strings	683:0:16914:17594							
ANR	5676022	FunctionDef	"get_strings (RCore * c , int * len)"		5676021	0					
ANR	5676023	CompoundStatement		683:44:16958:17594	5676021	0					
ANR	5676024	IdentifierDeclStatement	RList * list = r_bin_get_strings ( c -> bin ) ;	684:1:16961:17001	5676021	0	True				
ANR	5676025	IdentifierDecl	* list = r_bin_get_strings ( c -> bin )		5676021	0					
ANR	5676026	IdentifierDeclType	RList *		5676021	0					
ANR	5676027	Identifier	list		5676021	1					
ANR	5676028	AssignmentExpression	* list = r_bin_get_strings ( c -> bin )		5676021	2		=			
ANR	5676029	Identifier	list		5676021	0					
ANR	5676030	CallExpression	r_bin_get_strings ( c -> bin )		5676021	1					
ANR	5676031	Callee	r_bin_get_strings		5676021	0					
ANR	5676032	Identifier	r_bin_get_strings		5676021	0					
ANR	5676033	ArgumentList	c -> bin		5676021	1					
ANR	5676034	Argument	c -> bin		5676021	0					
ANR	5676035	PtrMemberAccess	c -> bin		5676021	0					
ANR	5676036	Identifier	c		5676021	0					
ANR	5676037	Identifier	bin		5676021	1					
ANR	5676038	IdentifierDeclStatement	RListIter * iter ;	685:1:17004:17019	5676021	1	True				
ANR	5676039	IdentifierDecl	* iter		5676021	0					
ANR	5676040	IdentifierDeclType	RListIter *		5676021	0					
ANR	5676041	Identifier	iter		5676021	1					
ANR	5676042	IdentifierDeclStatement	"RBinString * str , * old = NULL ;"	686:1:17022:17050	5676021	2	True				
ANR	5676043	IdentifierDecl	* str		5676021	0					
ANR	5676044	IdentifierDeclType	RBinString *		5676021	0					
ANR	5676045	Identifier	str		5676021	1					
ANR	5676046	IdentifierDecl	* old = NULL		5676021	1					
ANR	5676047	IdentifierDeclType	RBinString *		5676021	0					
ANR	5676048	Identifier	old		5676021	1					
ANR	5676049	AssignmentExpression	* old = NULL		5676021	2		=			
ANR	5676050	Identifier	NULL		5676021	0					
ANR	5676051	Identifier	NULL		5676021	1					
ANR	5676052	IdentifierDeclStatement	"ut8 * buf , * ptr ;"	687:1:17053:17067	5676021	3	True				
ANR	5676053	IdentifierDecl	* buf		5676021	0					
ANR	5676054	IdentifierDeclType	ut8 *		5676021	0					
ANR	5676055	Identifier	buf		5676021	1					
ANR	5676056	IdentifierDecl	* ptr		5676021	1					
ANR	5676057	IdentifierDeclType	ut8 *		5676021	0					
ANR	5676058	Identifier	ptr		5676021	1					
ANR	5676059	ExpressionStatement	"r_list_sort ( list , ( RListComparator ) bs_cmp )"	689:1:17071:17115	5676021	4	True				
ANR	5676060	CallExpression	"r_list_sort ( list , ( RListComparator ) bs_cmp )"		5676021	0					
ANR	5676061	Callee	r_list_sort		5676021	0					
ANR	5676062	Identifier	r_list_sort		5676021	0					
ANR	5676063	ArgumentList	list		5676021	1					
ANR	5676064	Argument	list		5676021	0					
ANR	5676065	Identifier	list		5676021	0					
ANR	5676066	Argument	( RListComparator ) bs_cmp		5676021	1					
ANR	5676067	CastExpression	( RListComparator ) bs_cmp		5676021	0					
ANR	5676068	CastTarget	RListComparator		5676021	0					
ANR	5676069	Identifier	bs_cmp		5676021	1					
ANR	5676070	ExpressionStatement	* len = 0	691:1:17119:17127	5676021	5	True				
ANR	5676071	AssignmentExpression	* len = 0		5676021	0		=			
ANR	5676072	UnaryOperationExpression	* len		5676021	0					
ANR	5676073	UnaryOperator	*		5676021	0					
ANR	5676074	Identifier	len		5676021	1					
ANR	5676075	PrimaryExpression	0		5676021	1					
ANR	5676076	Statement	r_list_foreach	693:1:17131:17144	5676021	6	True				
ANR	5676077	Statement	(	693:16:17146:17146	5676021	7	True				
ANR	5676078	Statement	list	693:17:17147:17150	5676021	8	True				
ANR	5676079	Statement	","	693:21:17151:17151	5676021	9	True				
ANR	5676080	Statement	iter	693:23:17153:17156	5676021	10	True				
ANR	5676081	Statement	","	693:27:17157:17157	5676021	11	True				
ANR	5676082	Statement	str	693:29:17159:17161	5676021	12	True				
ANR	5676083	Statement	)	693:32:17162:17162	5676021	13	True				
ANR	5676084	CompoundStatement		11:34:205:205	5676021	14					
ANR	5676085	IfStatement	"if ( ! old || ( old && bs_cmp ( old , str ) != 0 ) )"		5676021	0					
ANR	5676086	Condition	"! old || ( old && bs_cmp ( old , str ) != 0 )"	694:6:17172:17210	5676021	0	True				
ANR	5676087	OrExpression	"! old || ( old && bs_cmp ( old , str ) != 0 )"		5676021	0		||			
ANR	5676088	UnaryOperationExpression	! old		5676021	0					
ANR	5676089	UnaryOperator	!		5676021	0					
ANR	5676090	Identifier	old		5676021	1					
ANR	5676091	AndExpression	"old && bs_cmp ( old , str ) != 0"		5676021	1		&&			
ANR	5676092	Identifier	old		5676021	0					
ANR	5676093	EqualityExpression	"bs_cmp ( old , str ) != 0"		5676021	1		!=			
ANR	5676094	CallExpression	"bs_cmp ( old , str )"		5676021	0					
ANR	5676095	Callee	bs_cmp		5676021	0					
ANR	5676096	Identifier	bs_cmp		5676021	0					
ANR	5676097	ArgumentList	old		5676021	1					
ANR	5676098	Argument	old		5676021	0					
ANR	5676099	Identifier	old		5676021	0					
ANR	5676100	Argument	str		5676021	1					
ANR	5676101	Identifier	str		5676021	0					
ANR	5676102	PrimaryExpression	0		5676021	1					
ANR	5676103	CompoundStatement		12:47:254:254	5676021	1					
ANR	5676104	ExpressionStatement	* len += str -> length + 1	695:3:17218:17241	5676021	0	True				
ANR	5676105	AssignmentExpression	* len += str -> length + 1		5676021	0		+=			
ANR	5676106	UnaryOperationExpression	* len		5676021	0					
ANR	5676107	UnaryOperator	*		5676021	0					
ANR	5676108	Identifier	len		5676021	1					
ANR	5676109	AdditiveExpression	str -> length + 1		5676021	1		+			
ANR	5676110	PtrMemberAccess	str -> length		5676021	0					
ANR	5676111	Identifier	str		5676021	0					
ANR	5676112	Identifier	length		5676021	1					
ANR	5676113	PrimaryExpression	1		5676021	1					
ANR	5676114	ExpressionStatement	old = str	696:3:17246:17255	5676021	1	True				
ANR	5676115	AssignmentExpression	old = str		5676021	0		=			
ANR	5676116	Identifier	old		5676021	0					
ANR	5676117	Identifier	str		5676021	1					
ANR	5676118	ExpressionStatement	ptr = buf = malloc ( * len + 1 )	700:1:17266:17295	5676021	15	True				
ANR	5676119	AssignmentExpression	ptr = buf = malloc ( * len + 1 )		5676021	0		=			
ANR	5676120	Identifier	ptr		5676021	0					
ANR	5676121	AssignmentExpression	buf = malloc ( * len + 1 )		5676021	1		=			
ANR	5676122	Identifier	buf		5676021	0					
ANR	5676123	CallExpression	malloc ( * len + 1 )		5676021	1					
ANR	5676124	Callee	malloc		5676021	0					
ANR	5676125	Identifier	malloc		5676021	0					
ANR	5676126	ArgumentList	* len + 1		5676021	1					
ANR	5676127	Argument	* len + 1		5676021	0					
ANR	5676128	AdditiveExpression	* len + 1		5676021	0		+			
ANR	5676129	UnaryOperationExpression	* len		5676021	0					
ANR	5676130	UnaryOperator	*		5676021	0					
ANR	5676131	Identifier	len		5676021	1					
ANR	5676132	PrimaryExpression	1		5676021	1					
ANR	5676133	IfStatement	if ( ! ptr )		5676021	16					
ANR	5676134	Condition	! ptr	701:5:17302:17305	5676021	0	True				
ANR	5676135	UnaryOperationExpression	! ptr		5676021	0					
ANR	5676136	UnaryOperator	!		5676021	0					
ANR	5676137	Identifier	ptr		5676021	1					
ANR	5676138	CompoundStatement		19:11:349:349	5676021	1					
ANR	5676139	ReturnStatement	return NULL ;	702:2:17312:17323	5676021	0	True				
ANR	5676140	Identifier	NULL		5676021	0					
ANR	5676141	ExpressionStatement	old = NULL	705:1:17330:17340	5676021	17	True				
ANR	5676142	AssignmentExpression	old = NULL		5676021	0		=			
ANR	5676143	Identifier	old		5676021	0					
ANR	5676144	Identifier	NULL		5676021	1					
ANR	5676145	Statement	r_list_foreach	707:1:17344:17357	5676021	18	True				
ANR	5676146	Statement	(	707:16:17359:17359	5676021	19	True				
ANR	5676147	Statement	list	707:17:17360:17363	5676021	20	True				
ANR	5676148	Statement	","	707:21:17364:17364	5676021	21	True				
ANR	5676149	Statement	iter	707:23:17366:17369	5676021	22	True				
ANR	5676150	Statement	","	707:27:17370:17370	5676021	23	True				
ANR	5676151	Statement	str	707:29:17372:17374	5676021	24	True				
ANR	5676152	Statement	)	707:32:17375:17375	5676021	25	True				
ANR	5676153	CompoundStatement		25:34:418:418	5676021	26					
ANR	5676154	IfStatement	"if ( old && bs_cmp ( old , str ) == 0 )"		5676021	0					
ANR	5676155	Condition	"old && bs_cmp ( old , str ) == 0"	708:6:17385:17413	5676021	0	True				
ANR	5676156	AndExpression	"old && bs_cmp ( old , str ) == 0"		5676021	0		&&			
ANR	5676157	Identifier	old		5676021	0					
ANR	5676158	EqualityExpression	"bs_cmp ( old , str ) == 0"		5676021	1		==			
ANR	5676159	CallExpression	"bs_cmp ( old , str )"		5676021	0					
ANR	5676160	Callee	bs_cmp		5676021	0					
ANR	5676161	Identifier	bs_cmp		5676021	0					
ANR	5676162	ArgumentList	old		5676021	1					
ANR	5676163	Argument	old		5676021	0					
ANR	5676164	Identifier	old		5676021	0					
ANR	5676165	Argument	str		5676021	1					
ANR	5676166	Identifier	str		5676021	0					
ANR	5676167	PrimaryExpression	0		5676021	1					
ANR	5676168	CompoundStatement		26:37:457:457	5676021	1					
ANR	5676169	ContinueStatement	continue ;	709:3:17421:17429	5676021	0	True				
ANR	5676170	ExpressionStatement	"memcpy ( ptr , str -> string , str -> length )"	711:2:17437:17475	5676021	1	True				
ANR	5676171	CallExpression	"memcpy ( ptr , str -> string , str -> length )"		5676021	0					
ANR	5676172	Callee	memcpy		5676021	0					
ANR	5676173	Identifier	memcpy		5676021	0					
ANR	5676174	ArgumentList	ptr		5676021	1					
ANR	5676175	Argument	ptr		5676021	0					
ANR	5676176	Identifier	ptr		5676021	0					
ANR	5676177	Argument	str -> string		5676021	1					
ANR	5676178	PtrMemberAccess	str -> string		5676021	0					
ANR	5676179	Identifier	str		5676021	0					
ANR	5676180	Identifier	string		5676021	1					
ANR	5676181	Argument	str -> length		5676021	2					
ANR	5676182	PtrMemberAccess	str -> length		5676021	0					
ANR	5676183	Identifier	str		5676021	0					
ANR	5676184	Identifier	length		5676021	1					
ANR	5676185	ExpressionStatement	ptr += str -> length	712:2:17479:17497	5676021	2	True				
ANR	5676186	AssignmentExpression	ptr += str -> length		5676021	0		+=			
ANR	5676187	Identifier	ptr		5676021	0					
ANR	5676188	PtrMemberAccess	str -> length		5676021	1					
ANR	5676189	Identifier	str		5676021	0					
ANR	5676190	Identifier	length		5676021	1					
ANR	5676191	ExpressionStatement	* ptr ++ = '\\n'	713:2:17501:17514	5676021	3	True				
ANR	5676192	AssignmentExpression	* ptr ++ = '\\n'		5676021	0		=			
ANR	5676193	UnaryOperationExpression	* ptr ++		5676021	0					
ANR	5676194	UnaryOperator	*		5676021	0					
ANR	5676195	PostIncDecOperationExpression	ptr ++		5676021	1					
ANR	5676196	Identifier	ptr		5676021	0					
ANR	5676197	IncDec	++		5676021	1					
ANR	5676198	PrimaryExpression	'\\n'		5676021	1					
ANR	5676199	ExpressionStatement	old = str	714:2:17518:17527	5676021	4	True				
ANR	5676200	AssignmentExpression	old = str		5676021	0		=			
ANR	5676201	Identifier	old		5676021	0					
ANR	5676202	Identifier	str		5676021	1					
ANR	5676203	ExpressionStatement	* ptr = 0	716:1:17533:17541	5676021	27	True				
ANR	5676204	AssignmentExpression	* ptr = 0		5676021	0		=			
ANR	5676205	UnaryOperationExpression	* ptr		5676021	0					
ANR	5676206	UnaryOperator	*		5676021	0					
ANR	5676207	Identifier	ptr		5676021	1					
ANR	5676208	PrimaryExpression	0		5676021	1					
ANR	5676209	ExpressionStatement	* len = strlen ( ( const char * ) buf )	718:1:17545:17579	5676021	28	True				
ANR	5676210	AssignmentExpression	* len = strlen ( ( const char * ) buf )		5676021	0		=			
ANR	5676211	UnaryOperationExpression	* len		5676021	0					
ANR	5676212	UnaryOperator	*		5676021	0					
ANR	5676213	Identifier	len		5676021	1					
ANR	5676214	CallExpression	strlen ( ( const char * ) buf )		5676021	1					
ANR	5676215	Callee	strlen		5676021	0					
ANR	5676216	Identifier	strlen		5676021	0					
ANR	5676217	ArgumentList	( const char * ) buf		5676021	1					
ANR	5676218	Argument	( const char * ) buf		5676021	0					
ANR	5676219	CastExpression	( const char * ) buf		5676021	0					
ANR	5676220	CastTarget	const char *		5676021	0					
ANR	5676221	Identifier	buf		5676021	1					
ANR	5676222	ReturnStatement	return buf ;	719:1:17582:17592	5676021	29	True				
ANR	5676223	Identifier	buf		5676021	0					
ANR	5676224	ReturnType	static ut8 *		5676021	1					
ANR	5676225	Identifier	get_strings		5676021	2					
ANR	5676226	ParameterList	"RCore * c , int * len"		5676021	3					
ANR	5676227	Parameter	RCore * c	683:24:16938:16945	5676021	0	True				
ANR	5676228	ParameterType	RCore *		5676021	0					
ANR	5676229	Identifier	c		5676021	1					
ANR	5676230	Parameter	int * len	683:34:16948:16955	5676021	1	True				
ANR	5676231	ParameterType	int *		5676021	0					
ANR	5676232	Identifier	len		5676021	1					
ANR	5676233	CFGEntryNode	ENTRY		5676021		True				
ANR	5676234	CFGExitNode	EXIT		5676021		True				
ANR	5676235	CFGErrorNode	ERROR		5676021		True				
ANR	5676236	Symbol	str -> length		5676021						
ANR	5676237	Symbol	malloc		5676021						
ANR	5676238	Symbol	c		5676021						
ANR	5676239	Symbol	NULL		5676021						
ANR	5676240	Symbol	bs_cmp		5676021						
ANR	5676241	Symbol	old		5676021						
ANR	5676242	Symbol	* ptr ++		5676021						
ANR	5676243	Symbol	iter		5676021						
ANR	5676244	Symbol	c -> bin		5676021						
ANR	5676245	Symbol	list		5676021						
ANR	5676246	Symbol	* c		5676021						
ANR	5676247	Symbol	r_bin_get_strings		5676021						
ANR	5676248	Symbol	ptr		5676021						
ANR	5676249	Symbol	str		5676021						
ANR	5676250	Symbol	strlen		5676021						
ANR	5676251	Symbol	buf		5676021						
ANR	5676252	Symbol	len		5676021						
ANR	5676253	Symbol	* ptr		5676021						
ANR	5676254	Symbol	* str		5676021						
ANR	5676255	Symbol	str -> string		5676021						
ANR	5676256	Symbol	* len		5676021						
ANR	5676257	Function	get_graph_commands	722:0:17597:18116							
ANR	5676258	FunctionDef	"get_graph_commands (RCore * c , ut64 off)"		5676257	0					
ANR	5676259	CompoundStatement		722:52:17649:18116	5676257	0					
ANR	5676260	IdentifierDeclStatement	bool tmp_html = r_cons_singleton ( ) -> is_html ;	723:8:17659:17703	5676257	0	True				
ANR	5676261	IdentifierDecl	tmp_html = r_cons_singleton ( ) -> is_html		5676257	0					
ANR	5676262	IdentifierDeclType	bool		5676257	0					
ANR	5676263	Identifier	tmp_html		5676257	1					
ANR	5676264	AssignmentExpression	tmp_html = r_cons_singleton ( ) -> is_html		5676257	2		=			
ANR	5676265	Identifier	tmp_html		5676257	0					
ANR	5676266	PtrMemberAccess	r_cons_singleton ( ) -> is_html		5676257	1					
ANR	5676267	CallExpression	r_cons_singleton ( )		5676257	0					
ANR	5676268	Callee	r_cons_singleton		5676257	0					
ANR	5676269	Identifier	r_cons_singleton		5676257	0					
ANR	5676270	ArgumentList			5676257	1					
ANR	5676271	Identifier	is_html		5676257	1					
ANR	5676272	ExpressionStatement	r_cons_singleton ( ) -> is_html = false	724:8:17713:17749	5676257	1	True				
ANR	5676273	AssignmentExpression	r_cons_singleton ( ) -> is_html = false		5676257	0		=			
ANR	5676274	PtrMemberAccess	r_cons_singleton ( ) -> is_html		5676257	0					
ANR	5676275	CallExpression	r_cons_singleton ( )		5676257	0					
ANR	5676276	Callee	r_cons_singleton		5676257	0					
ANR	5676277	Identifier	r_cons_singleton		5676257	0					
ANR	5676278	ArgumentList			5676257	1					
ANR	5676279	Identifier	is_html		5676257	1					
ANR	5676280	Identifier	false		5676257	1					
ANR	5676281	ExpressionStatement	r_cons_push ( )	725:8:17759:17773	5676257	2	True				
ANR	5676282	CallExpression	r_cons_push ( )		5676257	0					
ANR	5676283	Callee	r_cons_push		5676257	0					
ANR	5676284	Identifier	r_cons_push		5676257	0					
ANR	5676285	ArgumentList			5676257	1					
ANR	5676286	ExpressionStatement	"r_core_anal_graph ( c , off , R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF | R_CORE_ANAL_STAR )"	726:8:17783:17876	5676257	3	True				
ANR	5676287	CallExpression	"r_core_anal_graph ( c , off , R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF | R_CORE_ANAL_STAR )"		5676257	0					
ANR	5676288	Callee	r_core_anal_graph		5676257	0					
ANR	5676289	Identifier	r_core_anal_graph		5676257	0					
ANR	5676290	ArgumentList	c		5676257	1					
ANR	5676291	Argument	c		5676257	0					
ANR	5676292	Identifier	c		5676257	0					
ANR	5676293	Argument	off		5676257	1					
ANR	5676294	Identifier	off		5676257	0					
ANR	5676295	Argument	R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF | R_CORE_ANAL_STAR		5676257	2					
ANR	5676296	InclusiveOrExpression	R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF | R_CORE_ANAL_STAR		5676257	0		|			
ANR	5676297	Identifier	R_CORE_ANAL_GRAPHBODY		5676257	0					
ANR	5676298	InclusiveOrExpression	R_CORE_ANAL_GRAPHDIFF | R_CORE_ANAL_STAR		5676257	1		|			
ANR	5676299	Identifier	R_CORE_ANAL_GRAPHDIFF		5676257	0					
ANR	5676300	Identifier	R_CORE_ANAL_STAR		5676257	1					
ANR	5676301	IdentifierDeclStatement	const char * static_str = r_cons_get_buffer ( ) ;	727:8:17886:17931	5676257	4	True				
ANR	5676302	IdentifierDecl	* static_str = r_cons_get_buffer ( )		5676257	0					
ANR	5676303	IdentifierDeclType	const char *		5676257	0					
ANR	5676304	Identifier	static_str		5676257	1					
ANR	5676305	AssignmentExpression	* static_str = r_cons_get_buffer ( )		5676257	2		=			
ANR	5676306	Identifier	static_str		5676257	0					
ANR	5676307	CallExpression	r_cons_get_buffer ( )		5676257	1					
ANR	5676308	Callee	r_cons_get_buffer		5676257	0					
ANR	5676309	Identifier	r_cons_get_buffer		5676257	0					
ANR	5676310	ArgumentList			5676257	1					
ANR	5676311	IdentifierDeclStatement	"char * retstr = strdup ( static_str ? static_str : """" ) ;"	728:8:17941:17991	5676257	5	True				
ANR	5676312	IdentifierDecl	"* retstr = strdup ( static_str ? static_str : """" )"		5676257	0					
ANR	5676313	IdentifierDeclType	char *		5676257	0					
ANR	5676314	Identifier	retstr		5676257	1					
ANR	5676315	AssignmentExpression	"* retstr = strdup ( static_str ? static_str : """" )"		5676257	2		=			
ANR	5676316	Identifier	retstr		5676257	0					
ANR	5676317	CallExpression	"strdup ( static_str ? static_str : """" )"		5676257	1					
ANR	5676318	Callee	strdup		5676257	0					
ANR	5676319	Identifier	strdup		5676257	0					
ANR	5676320	ArgumentList	"static_str ? static_str : """""		5676257	1					
ANR	5676321	Argument	"static_str ? static_str : """""		5676257	0					
ANR	5676322	ConditionalExpression	"static_str ? static_str : """""		5676257	0					
ANR	5676323	Condition	static_str		5676257	0					
ANR	5676324	Identifier	static_str		5676257	0					
ANR	5676325	Identifier	static_str		5676257	1					
ANR	5676326	PrimaryExpression	""""""		5676257	2					
ANR	5676327	ExpressionStatement	r_cons_pop ( )	729:8:18001:18014	5676257	6	True				
ANR	5676328	CallExpression	r_cons_pop ( )		5676257	0					
ANR	5676329	Callee	r_cons_pop		5676257	0					
ANR	5676330	Identifier	r_cons_pop		5676257	0					
ANR	5676331	ArgumentList			5676257	1					
ANR	5676332	ExpressionStatement	r_cons_echo ( NULL )	730:8:18024:18042	5676257	7	True				
ANR	5676333	CallExpression	r_cons_echo ( NULL )		5676257	0					
ANR	5676334	Callee	r_cons_echo		5676257	0					
ANR	5676335	Identifier	r_cons_echo		5676257	0					
ANR	5676336	ArgumentList	NULL		5676257	1					
ANR	5676337	Argument	NULL		5676257	0					
ANR	5676338	Identifier	NULL		5676257	0					
ANR	5676339	ExpressionStatement	r_cons_singleton ( ) -> is_html = tmp_html	731:8:18052:18091	5676257	8	True				
ANR	5676340	AssignmentExpression	r_cons_singleton ( ) -> is_html = tmp_html		5676257	0		=			
ANR	5676341	PtrMemberAccess	r_cons_singleton ( ) -> is_html		5676257	0					
ANR	5676342	CallExpression	r_cons_singleton ( )		5676257	0					
ANR	5676343	Callee	r_cons_singleton		5676257	0					
ANR	5676344	Identifier	r_cons_singleton		5676257	0					
ANR	5676345	ArgumentList			5676257	1					
ANR	5676346	Identifier	is_html		5676257	1					
ANR	5676347	Identifier	tmp_html		5676257	1					
ANR	5676348	ReturnStatement	return retstr ;	732:8:18101:18114	5676257	9	True				
ANR	5676349	Identifier	retstr		5676257	0					
ANR	5676350	ReturnType	static char *		5676257	1					
ANR	5676351	Identifier	get_graph_commands		5676257	2					
ANR	5676352	ParameterList	"RCore * c , ut64 off"		5676257	3					
ANR	5676353	Parameter	RCore * c	722:32:17629:17636	5676257	0	True				
ANR	5676354	ParameterType	RCore *		5676257	0					
ANR	5676355	Identifier	c		5676257	1					
ANR	5676356	Parameter	ut64 off	722:42:17639:17646	5676257	1	True				
ANR	5676357	ParameterType	ut64		5676257	0					
ANR	5676358	Identifier	off		5676257	1					
ANR	5676359	CFGEntryNode	ENTRY		5676257		True				
ANR	5676360	CFGExitNode	EXIT		5676257		True				
ANR	5676361	Symbol	c		5676257						
ANR	5676362	Symbol	NULL		5676257						
ANR	5676363	Symbol	false		5676257						
ANR	5676364	Symbol	R_CORE_ANAL_GRAPHDIFF		5676257						
ANR	5676365	Symbol	tmp_html		5676257						
ANR	5676366	Symbol	R_CORE_ANAL_STAR		5676257						
ANR	5676367	Symbol	r_cons_get_buffer		5676257						
ANR	5676368	Symbol	R_CORE_ANAL_GRAPHBODY		5676257						
ANR	5676369	Symbol	off		5676257						
ANR	5676370	Symbol	r_cons_singleton ( ) -> is_html		5676257						
ANR	5676371	Symbol	static_str		5676257						
ANR	5676372	Symbol	r_cons_singleton		5676257						
ANR	5676373	Symbol	strdup		5676257						
ANR	5676374	Symbol	* r_cons_singleton		5676257						
ANR	5676375	Symbol	retstr		5676257						
ANR	5676376	Function	__generate_graph	735:0:18119:19078							
ANR	5676377	FunctionDef	"__generate_graph (RCore * c , ut64 off)"		5676376	0					
ANR	5676378	CompoundStatement		735:50:18169:19078	5676376	0					
ANR	5676379	ExpressionStatement	r_return_if_fail ( c )	736:8:18179:18199	5676376	0	True				
ANR	5676380	CallExpression	r_return_if_fail ( c )		5676376	0					
ANR	5676381	Callee	r_return_if_fail		5676376	0					
ANR	5676382	Identifier	r_return_if_fail		5676376	0					
ANR	5676383	ArgumentList	c		5676376	1					
ANR	5676384	Argument	c		5676376	0					
ANR	5676385	Identifier	c		5676376	0					
ANR	5676386	IdentifierDeclStatement	"char * ptr = get_graph_commands ( c , off ) ;"	737:8:18209:18248	5676376	1	True				
ANR	5676387	IdentifierDecl	"* ptr = get_graph_commands ( c , off )"		5676376	0					
ANR	5676388	IdentifierDeclType	char *		5676376	0					
ANR	5676389	Identifier	ptr		5676376	1					
ANR	5676390	AssignmentExpression	"* ptr = get_graph_commands ( c , off )"		5676376	2		=			
ANR	5676391	Identifier	ptr		5676376	0					
ANR	5676392	CallExpression	"get_graph_commands ( c , off )"		5676376	1					
ANR	5676393	Callee	get_graph_commands		5676376	0					
ANR	5676394	Identifier	get_graph_commands		5676376	0					
ANR	5676395	ArgumentList	c		5676376	1					
ANR	5676396	Argument	c		5676376	0					
ANR	5676397	Identifier	c		5676376	0					
ANR	5676398	Argument	off		5676376	1					
ANR	5676399	Identifier	off		5676376	0					
ANR	5676400	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	738:8:18258:18288	5676376	2	True				
ANR	5676401	CallExpression	"r_cons_break_push ( NULL , NULL )"		5676376	0					
ANR	5676402	Callee	r_cons_break_push		5676376	0					
ANR	5676403	Identifier	r_cons_break_push		5676376	0					
ANR	5676404	ArgumentList	NULL		5676376	1					
ANR	5676405	Argument	NULL		5676376	0					
ANR	5676406	Identifier	NULL		5676376	0					
ANR	5676407	Argument	NULL		5676376	1					
ANR	5676408	Identifier	NULL		5676376	0					
ANR	5676409	IfStatement	if ( ptr )		5676376	3					
ANR	5676410	Condition	ptr	739:12:18302:18304	5676376	0	True				
ANR	5676411	Identifier	ptr		5676376	0					
ANR	5676412	CompoundStatement		5:17:137:137	5676376	1					
ANR	5676413	ForStatement	for ( ; ; )		5676376	0					
ANR	5676414	CompoundStatement		10:24:307:337	5676376	0					
ANR	5676415	IfStatement	if ( r_cons_is_breaked ( ) )		5676376	0					
ANR	5676416	Condition	r_cons_is_breaked ( )	741:28:18364:18383	5676376	0	True				
ANR	5676417	CallExpression	r_cons_is_breaked ( )		5676376	0					
ANR	5676418	Callee	r_cons_is_breaked		5676376	0					
ANR	5676419	Identifier	r_cons_is_breaked		5676376	0					
ANR	5676420	ArgumentList			5676376	1					
ANR	5676421	CompoundStatement		7:50:216:216	5676376	1					
ANR	5676422	BreakStatement	break ;	742:32:18420:18425	5676376	0	True				
ANR	5676423	IdentifierDeclStatement	"char * eol = strchr ( ptr , '\\n' ) ;"	744:24:18477:18507	5676376	1	True				
ANR	5676424	IdentifierDecl	"* eol = strchr ( ptr , '\\n' )"		5676376	0					
ANR	5676425	IdentifierDeclType	char *		5676376	0					
ANR	5676426	Identifier	eol		5676376	1					
ANR	5676427	AssignmentExpression	"* eol = strchr ( ptr , '\\n' )"		5676376	2		=			
ANR	5676428	Identifier	eol		5676376	0					
ANR	5676429	CallExpression	"strchr ( ptr , '\\n' )"		5676376	1					
ANR	5676430	Callee	strchr		5676376	0					
ANR	5676431	Identifier	strchr		5676376	0					
ANR	5676432	ArgumentList	ptr		5676376	1					
ANR	5676433	Argument	ptr		5676376	0					
ANR	5676434	Identifier	ptr		5676376	0					
ANR	5676435	Argument	'\\n'		5676376	1					
ANR	5676436	PrimaryExpression	'\\n'		5676376	0					
ANR	5676437	IfStatement	if ( eol )		5676376	2					
ANR	5676438	Condition	eol	745:28:18537:18539	5676376	0	True				
ANR	5676439	Identifier	eol		5676376	0					
ANR	5676440	CompoundStatement		11:33:372:372	5676376	1					
ANR	5676441	ExpressionStatement	* eol = '\\0'	746:32:18576:18587	5676376	0	True				
ANR	5676442	AssignmentExpression	* eol = '\\0'		5676376	0		=			
ANR	5676443	UnaryOperationExpression	* eol		5676376	0					
ANR	5676444	UnaryOperator	*		5676376	0					
ANR	5676445	Identifier	eol		5676376	1					
ANR	5676446	PrimaryExpression	'\\0'		5676376	1					
ANR	5676447	IfStatement	if ( * ptr )		5676376	3					
ANR	5676448	Condition	* ptr	748:28:18643:18646	5676376	0	True				
ANR	5676449	UnaryOperationExpression	* ptr		5676376	0					
ANR	5676450	UnaryOperator	*		5676376	0					
ANR	5676451	Identifier	ptr		5676376	1					
ANR	5676452	CompoundStatement		15:32:513:535	5676376	1					
ANR	5676453	IdentifierDeclStatement	char * p = strdup ( ptr ) ;	749:32:18683:18705	5676376	0	True				
ANR	5676454	IdentifierDecl	* p = strdup ( ptr )		5676376	0					
ANR	5676455	IdentifierDeclType	char *		5676376	0					
ANR	5676456	Identifier	p		5676376	1					
ANR	5676457	AssignmentExpression	* p = strdup ( ptr )		5676376	2		=			
ANR	5676458	Identifier	p		5676376	0					
ANR	5676459	CallExpression	strdup ( ptr )		5676376	1					
ANR	5676460	Callee	strdup		5676376	0					
ANR	5676461	Identifier	strdup		5676376	0					
ANR	5676462	ArgumentList	ptr		5676376	1					
ANR	5676463	Argument	ptr		5676376	0					
ANR	5676464	Identifier	ptr		5676376	0					
ANR	5676465	ExpressionStatement	r_return_if_fail ( p )	750:32:18739:18759	5676376	1	True				
ANR	5676466	CallExpression	r_return_if_fail ( p )		5676376	0					
ANR	5676467	Callee	r_return_if_fail		5676376	0					
ANR	5676468	Identifier	r_return_if_fail		5676376	0					
ANR	5676469	ArgumentList	p		5676376	1					
ANR	5676470	Argument	p		5676376	0					
ANR	5676471	Identifier	p		5676376	0					
ANR	5676472	ExpressionStatement	"r_core_cmd0 ( c , p )"	751:32:18793:18811	5676376	2	True				
ANR	5676473	CallExpression	"r_core_cmd0 ( c , p )"		5676376	0					
ANR	5676474	Callee	r_core_cmd0		5676376	0					
ANR	5676475	Identifier	r_core_cmd0		5676376	0					
ANR	5676476	ArgumentList	c		5676376	1					
ANR	5676477	Argument	c		5676376	0					
ANR	5676478	Identifier	c		5676376	0					
ANR	5676479	Argument	p		5676376	1					
ANR	5676480	Identifier	p		5676376	0					
ANR	5676481	ExpressionStatement	free ( p )	752:32:18845:18853	5676376	3	True				
ANR	5676482	CallExpression	free ( p )		5676376	0					
ANR	5676483	Callee	free		5676376	0					
ANR	5676484	Identifier	free		5676376	0					
ANR	5676485	ArgumentList	p		5676376	1					
ANR	5676486	Argument	p		5676376	0					
ANR	5676487	Identifier	p		5676376	0					
ANR	5676488	IfStatement	if ( ! eol )		5676376	4					
ANR	5676489	Condition	! eol	754:28:18909:18912	5676376	0	True				
ANR	5676490	UnaryOperationExpression	! eol		5676376	0					
ANR	5676491	UnaryOperator	!		5676376	0					
ANR	5676492	Identifier	eol		5676376	1					
ANR	5676493	CompoundStatement		20:34:745:745	5676376	1					
ANR	5676494	BreakStatement	break ;	755:32:18949:18954	5676376	0	True				
ANR	5676495	ExpressionStatement	ptr = eol + 1	757:24:19006:19019	5676376	5	True				
ANR	5676496	AssignmentExpression	ptr = eol + 1		5676376	0		=			
ANR	5676497	Identifier	ptr		5676376	0					
ANR	5676498	AdditiveExpression	eol + 1		5676376	1		+			
ANR	5676499	Identifier	eol		5676376	0					
ANR	5676500	PrimaryExpression	1		5676376	1					
ANR	5676501	ExpressionStatement	r_cons_break_pop ( )	760:8:19057:19076	5676376	4	True				
ANR	5676502	CallExpression	r_cons_break_pop ( )		5676376	0					
ANR	5676503	Callee	r_cons_break_pop		5676376	0					
ANR	5676504	Identifier	r_cons_break_pop		5676376	0					
ANR	5676505	ArgumentList			5676376	1					
ANR	5676506	ReturnType	static void		5676376	1					
ANR	5676507	Identifier	__generate_graph		5676376	2					
ANR	5676508	ParameterList	"RCore * c , ut64 off"		5676376	3					
ANR	5676509	Parameter	RCore * c	735:30:18149:18156	5676376	0	True				
ANR	5676510	ParameterType	RCore *		5676376	0					
ANR	5676511	Identifier	c		5676376	1					
ANR	5676512	Parameter	ut64 off	735:40:18159:18166	5676376	1	True				
ANR	5676513	ParameterType	ut64		5676376	0					
ANR	5676514	Identifier	off		5676376	1					
ANR	5676515	CFGEntryNode	ENTRY		5676376		True				
ANR	5676516	CFGExitNode	EXIT		5676376		True				
ANR	5676517	InfiniteForNode	true		5676376		True				
ANR	5676518	Symbol	p		5676376						
ANR	5676519	Symbol	r_cons_is_breaked		5676376						
ANR	5676520	Symbol	c		5676376						
ANR	5676521	Symbol	NULL		5676376						
ANR	5676522	Symbol	eol		5676376						
ANR	5676523	Symbol	* eol		5676376						
ANR	5676524	Symbol	* ptr		5676376						
ANR	5676525	Symbol	strchr		5676376						
ANR	5676526	Symbol	strdup		5676376						
ANR	5676527	Symbol	get_graph_commands		5676376						
ANR	5676528	Symbol	off		5676376						
ANR	5676529	Symbol	ptr		5676376						
ANR	5676530	Function	__print_diff_graph	763:0:19081:20705							
ANR	5676531	FunctionDef	"__print_diff_graph (RCore * c , ut64 off , int gmode)"		5676530	0					
ANR	5676532	CompoundStatement		763:62:19143:20705	5676530	0					
ANR	5676533	IdentifierDeclStatement	int opts = R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF ;	764:8:19153:19209	5676530	0	True				
ANR	5676534	IdentifierDecl	opts = R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF		5676530	0					
ANR	5676535	IdentifierDeclType	int		5676530	0					
ANR	5676536	Identifier	opts		5676530	1					
ANR	5676537	AssignmentExpression	opts = R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF		5676530	2		=			
ANR	5676538	Identifier	opts		5676530	0					
ANR	5676539	InclusiveOrExpression	R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF		5676530	1		|			
ANR	5676540	Identifier	R_CORE_ANAL_GRAPHBODY		5676530	0					
ANR	5676541	Identifier	R_CORE_ANAL_GRAPHDIFF		5676530	1					
ANR	5676542	IdentifierDeclStatement	"int use_utf8 = r_config_get_i ( c -> config , ""scr.utf8"" ) ;"	765:8:19219:19272	5676530	1	True				
ANR	5676543	IdentifierDecl	"use_utf8 = r_config_get_i ( c -> config , ""scr.utf8"" )"		5676530	0					
ANR	5676544	IdentifierDeclType	int		5676530	0					
ANR	5676545	Identifier	use_utf8		5676530	1					
ANR	5676546	AssignmentExpression	"use_utf8 = r_config_get_i ( c -> config , ""scr.utf8"" )"		5676530	2		=			
ANR	5676547	Identifier	use_utf8		5676530	0					
ANR	5676548	CallExpression	"r_config_get_i ( c -> config , ""scr.utf8"" )"		5676530	1					
ANR	5676549	Callee	r_config_get_i		5676530	0					
ANR	5676550	Identifier	r_config_get_i		5676530	0					
ANR	5676551	ArgumentList	c -> config		5676530	1					
ANR	5676552	Argument	c -> config		5676530	0					
ANR	5676553	PtrMemberAccess	c -> config		5676530	0					
ANR	5676554	Identifier	c		5676530	0					
ANR	5676555	Identifier	config		5676530	1					
ANR	5676556	Argument	"""scr.utf8"""		5676530	1					
ANR	5676557	PrimaryExpression	"""scr.utf8"""		5676530	0					
ANR	5676558	ExpressionStatement	r_agraph_reset ( c -> graph )	766:8:19282:19306	5676530	2	True				
ANR	5676559	CallExpression	r_agraph_reset ( c -> graph )		5676530	0					
ANR	5676560	Callee	r_agraph_reset		5676530	0					
ANR	5676561	Identifier	r_agraph_reset		5676530	0					
ANR	5676562	ArgumentList	c -> graph		5676530	1					
ANR	5676563	Argument	c -> graph		5676530	0					
ANR	5676564	PtrMemberAccess	c -> graph		5676530	0					
ANR	5676565	Identifier	c		5676530	0					
ANR	5676566	Identifier	graph		5676530	1					
ANR	5676567	SwitchStatement	switch ( gmode )		5676530	3					
ANR	5676568	Condition	gmode	767:16:19324:19328	5676530	0	True				
ANR	5676569	Identifier	gmode		5676530	0					
ANR	5676570	CompoundStatement		5:23:187:187	5676530	1					
ANR	5676571	Label	case GRAPH_DOT_MODE :	768:8:19341:19360	5676530	0	True				
ANR	5676572	Identifier	GRAPH_DOT_MODE		5676530	0					
ANR	5676573	ExpressionStatement	"r_core_anal_graph ( c , off , opts )"	769:16:19378:19410	5676530	1	True				
ANR	5676574	CallExpression	"r_core_anal_graph ( c , off , opts )"		5676530	0					
ANR	5676575	Callee	r_core_anal_graph		5676530	0					
ANR	5676576	Identifier	r_core_anal_graph		5676530	0					
ANR	5676577	ArgumentList	c		5676530	1					
ANR	5676578	Argument	c		5676530	0					
ANR	5676579	Identifier	c		5676530	0					
ANR	5676580	Argument	off		5676530	1					
ANR	5676581	Identifier	off		5676530	0					
ANR	5676582	Argument	opts		5676530	2					
ANR	5676583	Identifier	opts		5676530	0					
ANR	5676584	BreakStatement	break ;	770:16:19428:19433	5676530	2	True				
ANR	5676585	Label	case GRAPH_STAR_MODE :	771:8:19443:19463	5676530	3	True				
ANR	5676586	Identifier	GRAPH_STAR_MODE		5676530	0					
ANR	5676587	ExpressionStatement	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_STAR )"	772:16:19481:19533	5676530	4	True				
ANR	5676588	CallExpression	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_STAR )"		5676530	0					
ANR	5676589	Callee	r_core_anal_graph		5676530	0					
ANR	5676590	Identifier	r_core_anal_graph		5676530	0					
ANR	5676591	ArgumentList	c		5676530	1					
ANR	5676592	Argument	c		5676530	0					
ANR	5676593	Identifier	c		5676530	0					
ANR	5676594	Argument	off		5676530	1					
ANR	5676595	Identifier	off		5676530	0					
ANR	5676596	Argument	opts | R_CORE_ANAL_STAR		5676530	2					
ANR	5676597	InclusiveOrExpression	opts | R_CORE_ANAL_STAR		5676530	0		|			
ANR	5676598	Identifier	opts		5676530	0					
ANR	5676599	Identifier	R_CORE_ANAL_STAR		5676530	1					
ANR	5676600	BreakStatement	break ;	773:16:19551:19556	5676530	5	True				
ANR	5676601	Label	case GRAPH_TINY_MODE :	774:8:19566:19586	5676530	6	True				
ANR	5676602	Identifier	GRAPH_TINY_MODE		5676530	0					
ANR	5676603	ExpressionStatement	"__generate_graph ( c , off )"	775:16:19604:19629	5676530	7	True				
ANR	5676604	CallExpression	"__generate_graph ( c , off )"		5676530	0					
ANR	5676605	Callee	__generate_graph		5676530	0					
ANR	5676606	Identifier	__generate_graph		5676530	0					
ANR	5676607	ArgumentList	c		5676530	1					
ANR	5676608	Argument	c		5676530	0					
ANR	5676609	Identifier	c		5676530	0					
ANR	5676610	Argument	off		5676530	1					
ANR	5676611	Identifier	off		5676530	0					
ANR	5676612	ExpressionStatement	"r_core_agraph_print ( c , use_utf8 , ""t"" )"	776:16:19647:19685	5676530	8	True				
ANR	5676613	CallExpression	"r_core_agraph_print ( c , use_utf8 , ""t"" )"		5676530	0					
ANR	5676614	Callee	r_core_agraph_print		5676530	0					
ANR	5676615	Identifier	r_core_agraph_print		5676530	0					
ANR	5676616	ArgumentList	c		5676530	1					
ANR	5676617	Argument	c		5676530	0					
ANR	5676618	Identifier	c		5676530	0					
ANR	5676619	Argument	use_utf8		5676530	1					
ANR	5676620	Identifier	use_utf8		5676530	0					
ANR	5676621	Argument	"""t"""		5676530	2					
ANR	5676622	PrimaryExpression	"""t"""		5676530	0					
ANR	5676623	BreakStatement	break ;	777:16:19703:19708	5676530	9	True				
ANR	5676624	Label	case GRAPH_INTERACTIVE_MODE :	778:8:19718:19745	5676530	10	True				
ANR	5676625	Identifier	GRAPH_INTERACTIVE_MODE		5676530	0					
ANR	5676626	ExpressionStatement	"__generate_graph ( c , off )"	779:16:19763:19788	5676530	11	True				
ANR	5676627	CallExpression	"__generate_graph ( c , off )"		5676530	0					
ANR	5676628	Callee	__generate_graph		5676530	0					
ANR	5676629	Identifier	__generate_graph		5676530	0					
ANR	5676630	ArgumentList	c		5676530	1					
ANR	5676631	Argument	c		5676530	0					
ANR	5676632	Identifier	c		5676530	0					
ANR	5676633	Argument	off		5676530	1					
ANR	5676634	Identifier	off		5676530	0					
ANR	5676635	ExpressionStatement	"r_core_agraph_print ( c , use_utf8 , ""v"" )"	780:16:19806:19844	5676530	12	True				
ANR	5676636	CallExpression	"r_core_agraph_print ( c , use_utf8 , ""v"" )"		5676530	0					
ANR	5676637	Callee	r_core_agraph_print		5676530	0					
ANR	5676638	Identifier	r_core_agraph_print		5676530	0					
ANR	5676639	ArgumentList	c		5676530	1					
ANR	5676640	Argument	c		5676530	0					
ANR	5676641	Identifier	c		5676530	0					
ANR	5676642	Argument	use_utf8		5676530	1					
ANR	5676643	Identifier	use_utf8		5676530	0					
ANR	5676644	Argument	"""v"""		5676530	2					
ANR	5676645	PrimaryExpression	"""v"""		5676530	0					
ANR	5676646	ExpressionStatement	r_cons_reset_colors ( )	781:16:19862:19884	5676530	13	True				
ANR	5676647	CallExpression	r_cons_reset_colors ( )		5676530	0					
ANR	5676648	Callee	r_cons_reset_colors		5676530	0					
ANR	5676649	Identifier	r_cons_reset_colors		5676530	0					
ANR	5676650	ArgumentList			5676530	1					
ANR	5676651	BreakStatement	break ;	782:16:19902:19907	5676530	14	True				
ANR	5676652	Label	case GRAPH_SDB_MODE :	783:8:19917:19936	5676530	15	True				
ANR	5676653	Identifier	GRAPH_SDB_MODE		5676530	0					
ANR	5676654	ExpressionStatement	"__generate_graph ( c , off )"	784:16:19954:19979	5676530	16	True				
ANR	5676655	CallExpression	"__generate_graph ( c , off )"		5676530	0					
ANR	5676656	Callee	__generate_graph		5676530	0					
ANR	5676657	Identifier	__generate_graph		5676530	0					
ANR	5676658	ArgumentList	c		5676530	1					
ANR	5676659	Argument	c		5676530	0					
ANR	5676660	Identifier	c		5676530	0					
ANR	5676661	Argument	off		5676530	1					
ANR	5676662	Identifier	off		5676530	0					
ANR	5676663	ExpressionStatement	"r_core_agraph_print ( c , use_utf8 , ""k"" )"	785:16:19997:20035	5676530	17	True				
ANR	5676664	CallExpression	"r_core_agraph_print ( c , use_utf8 , ""k"" )"		5676530	0					
ANR	5676665	Callee	r_core_agraph_print		5676530	0					
ANR	5676666	Identifier	r_core_agraph_print		5676530	0					
ANR	5676667	ArgumentList	c		5676530	1					
ANR	5676668	Argument	c		5676530	0					
ANR	5676669	Identifier	c		5676530	0					
ANR	5676670	Argument	use_utf8		5676530	1					
ANR	5676671	Identifier	use_utf8		5676530	0					
ANR	5676672	Argument	"""k"""		5676530	2					
ANR	5676673	PrimaryExpression	"""k"""		5676530	0					
ANR	5676674	BreakStatement	break ;	786:16:20053:20058	5676530	18	True				
ANR	5676675	Label	case GRAPH_GML_MODE :	787:8:20068:20087	5676530	19	True				
ANR	5676676	Identifier	GRAPH_GML_MODE		5676530	0					
ANR	5676677	ExpressionStatement	"__generate_graph ( c , off )"	788:16:20105:20130	5676530	20	True				
ANR	5676678	CallExpression	"__generate_graph ( c , off )"		5676530	0					
ANR	5676679	Callee	__generate_graph		5676530	0					
ANR	5676680	Identifier	__generate_graph		5676530	0					
ANR	5676681	ArgumentList	c		5676530	1					
ANR	5676682	Argument	c		5676530	0					
ANR	5676683	Identifier	c		5676530	0					
ANR	5676684	Argument	off		5676530	1					
ANR	5676685	Identifier	off		5676530	0					
ANR	5676686	ExpressionStatement	"r_core_agraph_print ( c , use_utf8 , ""g"" )"	789:16:20148:20186	5676530	21	True				
ANR	5676687	CallExpression	"r_core_agraph_print ( c , use_utf8 , ""g"" )"		5676530	0					
ANR	5676688	Callee	r_core_agraph_print		5676530	0					
ANR	5676689	Identifier	r_core_agraph_print		5676530	0					
ANR	5676690	ArgumentList	c		5676530	1					
ANR	5676691	Argument	c		5676530	0					
ANR	5676692	Identifier	c		5676530	0					
ANR	5676693	Argument	use_utf8		5676530	1					
ANR	5676694	Identifier	use_utf8		5676530	0					
ANR	5676695	Argument	"""g"""		5676530	2					
ANR	5676696	PrimaryExpression	"""g"""		5676530	0					
ANR	5676697	BreakStatement	break ;	790:16:20204:20209	5676530	22	True				
ANR	5676698	Label	case GRAPH_JSON_MODE :	791:8:20219:20239	5676530	23	True				
ANR	5676699	Identifier	GRAPH_JSON_MODE		5676530	0					
ANR	5676700	ExpressionStatement	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_JSON )"	792:16:20257:20308	5676530	24	True				
ANR	5676701	CallExpression	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_JSON )"		5676530	0					
ANR	5676702	Callee	r_core_anal_graph		5676530	0					
ANR	5676703	Identifier	r_core_anal_graph		5676530	0					
ANR	5676704	ArgumentList	c		5676530	1					
ANR	5676705	Argument	c		5676530	0					
ANR	5676706	Identifier	c		5676530	0					
ANR	5676707	Argument	off		5676530	1					
ANR	5676708	Identifier	off		5676530	0					
ANR	5676709	Argument	opts | R_CORE_ANAL_JSON		5676530	2					
ANR	5676710	InclusiveOrExpression	opts | R_CORE_ANAL_JSON		5676530	0		|			
ANR	5676711	Identifier	opts		5676530	0					
ANR	5676712	Identifier	R_CORE_ANAL_JSON		5676530	1					
ANR	5676713	BreakStatement	break ;	793:16:20326:20331	5676530	25	True				
ANR	5676714	Label	case GRAPH_JSON_DIS_MODE :	794:8:20341:20365	5676530	26	True				
ANR	5676715	Identifier	GRAPH_JSON_DIS_MODE		5676530	0					
ANR	5676716	ExpressionStatement	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM )"	795:16:20383:20467	5676530	27	True				
ANR	5676717	CallExpression	"r_core_anal_graph ( c , off , opts | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM )"		5676530	0					
ANR	5676718	Callee	r_core_anal_graph		5676530	0					
ANR	5676719	Identifier	r_core_anal_graph		5676530	0					
ANR	5676720	ArgumentList	c		5676530	1					
ANR	5676721	Argument	c		5676530	0					
ANR	5676722	Identifier	c		5676530	0					
ANR	5676723	Argument	off		5676530	1					
ANR	5676724	Identifier	off		5676530	0					
ANR	5676725	Argument	opts | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM		5676530	2					
ANR	5676726	InclusiveOrExpression	opts | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM		5676530	0		|			
ANR	5676727	Identifier	opts		5676530	0					
ANR	5676728	InclusiveOrExpression	R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM		5676530	1		|			
ANR	5676729	Identifier	R_CORE_ANAL_JSON		5676530	0					
ANR	5676730	Identifier	R_CORE_ANAL_JSON_FORMAT_DISASM		5676530	1					
ANR	5676731	BreakStatement	break ;	796:16:20485:20490	5676530	28	True				
ANR	5676732	Label	case GRAPH_DEFAULT_MODE :	797:8:20500:20523	5676530	29	True				
ANR	5676733	Identifier	GRAPH_DEFAULT_MODE		5676530	0					
ANR	5676734	Label	default :	798:8:20533:20540	5676530	30	True				
ANR	5676735	Identifier	default		5676530	0					
ANR	5676736	ExpressionStatement	"__generate_graph ( c , off )"	799:16:20558:20583	5676530	31	True				
ANR	5676737	CallExpression	"__generate_graph ( c , off )"		5676530	0					
ANR	5676738	Callee	__generate_graph		5676530	0					
ANR	5676739	Identifier	__generate_graph		5676530	0					
ANR	5676740	ArgumentList	c		5676530	1					
ANR	5676741	Argument	c		5676530	0					
ANR	5676742	Identifier	c		5676530	0					
ANR	5676743	Argument	off		5676530	1					
ANR	5676744	Identifier	off		5676530	0					
ANR	5676745	ExpressionStatement	"r_core_agraph_print ( c , use_utf8 , """" )"	800:16:20601:20638	5676530	32	True				
ANR	5676746	CallExpression	"r_core_agraph_print ( c , use_utf8 , """" )"		5676530	0					
ANR	5676747	Callee	r_core_agraph_print		5676530	0					
ANR	5676748	Identifier	r_core_agraph_print		5676530	0					
ANR	5676749	ArgumentList	c		5676530	1					
ANR	5676750	Argument	c		5676530	0					
ANR	5676751	Identifier	c		5676530	0					
ANR	5676752	Argument	use_utf8		5676530	1					
ANR	5676753	Identifier	use_utf8		5676530	0					
ANR	5676754	Argument	""""""		5676530	2					
ANR	5676755	PrimaryExpression	""""""		5676530	0					
ANR	5676756	ExpressionStatement	r_cons_reset_colors ( )	801:16:20656:20678	5676530	33	True				
ANR	5676757	CallExpression	r_cons_reset_colors ( )		5676530	0					
ANR	5676758	Callee	r_cons_reset_colors		5676530	0					
ANR	5676759	Identifier	r_cons_reset_colors		5676530	0					
ANR	5676760	ArgumentList			5676530	1					
ANR	5676761	BreakStatement	break ;	802:8:20688:20693	5676530	34	True				
ANR	5676762	ReturnType	static void		5676530	1					
ANR	5676763	Identifier	__print_diff_graph		5676530	2					
ANR	5676764	ParameterList	"RCore * c , ut64 off , int gmode"		5676530	3					
ANR	5676765	Parameter	RCore * c	763:31:19112:19119	5676530	0	True				
ANR	5676766	ParameterType	RCore *		5676530	0					
ANR	5676767	Identifier	c		5676530	1					
ANR	5676768	Parameter	ut64 off	763:41:19122:19129	5676530	1	True				
ANR	5676769	ParameterType	ut64		5676530	0					
ANR	5676770	Identifier	off		5676530	1					
ANR	5676771	Parameter	int gmode	763:51:19132:19140	5676530	2	True				
ANR	5676772	ParameterType	int		5676530	0					
ANR	5676773	Identifier	gmode		5676530	1					
ANR	5676774	CFGEntryNode	ENTRY		5676530		True				
ANR	5676775	CFGExitNode	EXIT		5676530		True				
ANR	5676776	Symbol	c -> config		5676530						
ANR	5676777	Symbol	c		5676530						
ANR	5676778	Symbol	R_CORE_ANAL_GRAPHDIFF		5676530						
ANR	5676779	Symbol	use_utf8		5676530						
ANR	5676780	Symbol	R_CORE_ANAL_STAR		5676530						
ANR	5676781	Symbol	R_CORE_ANAL_GRAPHBODY		5676530						
ANR	5676782	Symbol	* c		5676530						
ANR	5676783	Symbol	off		5676530						
ANR	5676784	Symbol	gmode		5676530						
ANR	5676785	Symbol	opts		5676530						
ANR	5676786	Symbol	R_CORE_ANAL_JSON_FORMAT_DISASM		5676530						
ANR	5676787	Symbol	r_config_get_i		5676530						
ANR	5676788	Symbol	R_CORE_ANAL_JSON		5676530						
ANR	5676789	Symbol	c -> graph		5676530						
ANR	5676790	Function	r_main_radiff2	806:0:20708:28999							
ANR	5676791	FunctionDef	"r_main_radiff2 (int argc , char * * argv)"		5676790	0					
ANR	5676792	CompoundStatement		806:48:20756:28999	5676790	0					
ANR	5676793	IdentifierDeclStatement	const char * columnSort = NULL ;	807:1:20759:20788	5676790	0	True				
ANR	5676794	IdentifierDecl	* columnSort = NULL		5676790	0					
ANR	5676795	IdentifierDeclType	const char *		5676790	0					
ANR	5676796	Identifier	columnSort		5676790	1					
ANR	5676797	AssignmentExpression	* columnSort = NULL		5676790	2		=			
ANR	5676798	Identifier	NULL		5676790	0					
ANR	5676799	Identifier	NULL		5676790	1					
ANR	5676800	IdentifierDeclStatement	const char * addr = NULL ;	808:1:20791:20814	5676790	1	True				
ANR	5676801	IdentifierDecl	* addr = NULL		5676790	0					
ANR	5676802	IdentifierDeclType	const char *		5676790	0					
ANR	5676803	Identifier	addr		5676790	1					
ANR	5676804	AssignmentExpression	* addr = NULL		5676790	2		=			
ANR	5676805	Identifier	NULL		5676790	0					
ANR	5676806	Identifier	NULL		5676790	1					
ANR	5676807	IdentifierDeclStatement	"RCore * c = NULL , * c2 = NULL ;"	809:1:20817:20844	5676790	2	True				
ANR	5676808	IdentifierDecl	* c = NULL		5676790	0					
ANR	5676809	IdentifierDeclType	RCore *		5676790	0					
ANR	5676810	Identifier	c		5676790	1					
ANR	5676811	AssignmentExpression	* c = NULL		5676790	2		=			
ANR	5676812	Identifier	NULL		5676790	0					
ANR	5676813	Identifier	NULL		5676790	1					
ANR	5676814	IdentifierDecl	* c2 = NULL		5676790	1					
ANR	5676815	IdentifierDeclType	RCore *		5676790	0					
ANR	5676816	Identifier	c2		5676790	1					
ANR	5676817	AssignmentExpression	* c2 = NULL		5676790	2		=			
ANR	5676818	Identifier	NULL		5676790	0					
ANR	5676819	Identifier	NULL		5676790	1					
ANR	5676820	IdentifierDeclStatement	RDiff * d ;	810:1:20847:20855	5676790	3	True				
ANR	5676821	IdentifierDecl	* d		5676790	0					
ANR	5676822	IdentifierDeclType	RDiff *		5676790	0					
ANR	5676823	Identifier	d		5676790	1					
ANR	5676824	IdentifierDeclStatement	"ut8 * bufa = NULL , * bufb = NULL ;"	811:1:20858:20888	5676790	4	True				
ANR	5676825	IdentifierDecl	* bufa = NULL		5676790	0					
ANR	5676826	IdentifierDeclType	ut8 *		5676790	0					
ANR	5676827	Identifier	bufa		5676790	1					
ANR	5676828	AssignmentExpression	* bufa = NULL		5676790	2		=			
ANR	5676829	Identifier	NULL		5676790	0					
ANR	5676830	Identifier	NULL		5676790	1					
ANR	5676831	IdentifierDecl	* bufb = NULL		5676790	1					
ANR	5676832	IdentifierDeclType	ut8 *		5676790	0					
ANR	5676833	Identifier	bufb		5676790	1					
ANR	5676834	AssignmentExpression	* bufb = NULL		5676790	2		=			
ANR	5676835	Identifier	NULL		5676790	0					
ANR	5676836	Identifier	NULL		5676790	1					
ANR	5676837	IdentifierDeclStatement	"int o , sza , szb , delta = 0 ;"	812:1:20891:20935	5676790	5	True				
ANR	5676838	IdentifierDecl	o		5676790	0					
ANR	5676839	IdentifierDeclType	int		5676790	0					
ANR	5676840	Identifier	o		5676790	1					
ANR	5676841	IdentifierDecl	sza		5676790	1					
ANR	5676842	IdentifierDeclType	int		5676790	0					
ANR	5676843	Identifier	sza		5676790	1					
ANR	5676844	IdentifierDecl	szb		5676790	2					
ANR	5676845	IdentifierDeclType	int		5676790	0					
ANR	5676846	Identifier	szb		5676790	1					
ANR	5676847	IdentifierDecl	delta = 0		5676790	3					
ANR	5676848	IdentifierDeclType	int		5676790	0					
ANR	5676849	Identifier	delta		5676790	1					
ANR	5676850	AssignmentExpression	delta = 0		5676790	2		=			
ANR	5676851	Identifier	delta		5676790	0					
ANR	5676852	PrimaryExpression	0		5676790	1					
ANR	5676853	IdentifierDeclStatement	int mode = MODE_DIFF ;	813:1:20938:20958	5676790	6	True				
ANR	5676854	IdentifierDecl	mode = MODE_DIFF		5676790	0					
ANR	5676855	IdentifierDeclType	int		5676790	0					
ANR	5676856	Identifier	mode		5676790	1					
ANR	5676857	AssignmentExpression	mode = MODE_DIFF		5676790	2		=			
ANR	5676858	Identifier	MODE_DIFF		5676790	0					
ANR	5676859	Identifier	MODE_DIFF		5676790	1					
ANR	5676860	IdentifierDeclStatement	int gmode = GRAPH_DEFAULT_MODE ;	814:1:20961:20991	5676790	7	True				
ANR	5676861	IdentifierDecl	gmode = GRAPH_DEFAULT_MODE		5676790	0					
ANR	5676862	IdentifierDeclType	int		5676790	0					
ANR	5676863	Identifier	gmode		5676790	1					
ANR	5676864	AssignmentExpression	gmode = GRAPH_DEFAULT_MODE		5676790	2		=			
ANR	5676865	Identifier	GRAPH_DEFAULT_MODE		5676790	0					
ANR	5676866	Identifier	GRAPH_DEFAULT_MODE		5676790	1					
ANR	5676867	IdentifierDeclStatement	int diffops = 0 ;	815:1:20994:21009	5676790	8	True				
ANR	5676868	IdentifierDecl	diffops = 0		5676790	0					
ANR	5676869	IdentifierDeclType	int		5676790	0					
ANR	5676870	Identifier	diffops		5676790	1					
ANR	5676871	AssignmentExpression	diffops = 0		5676790	2		=			
ANR	5676872	Identifier	diffops		5676790	0					
ANR	5676873	PrimaryExpression	0		5676790	1					
ANR	5676874	IdentifierDeclStatement	int threshold = - 1 ;	816:1:21012:21030	5676790	9	True				
ANR	5676875	IdentifierDecl	threshold = - 1		5676790	0					
ANR	5676876	IdentifierDeclType	int		5676790	0					
ANR	5676877	Identifier	threshold		5676790	1					
ANR	5676878	AssignmentExpression	threshold = - 1		5676790	2		=			
ANR	5676879	Identifier	threshold		5676790	0					
ANR	5676880	UnaryOperationExpression	- 1		5676790	1					
ANR	5676881	UnaryOperator	-		5676790	0					
ANR	5676882	PrimaryExpression	1		5676790	1					
ANR	5676883	IdentifierDeclStatement	double sim = 0.0 ;	817:1:21033:21049	5676790	10	True				
ANR	5676884	IdentifierDecl	sim = 0.0		5676790	0					
ANR	5676885	IdentifierDeclType	double		5676790	0					
ANR	5676886	Identifier	sim		5676790	1					
ANR	5676887	AssignmentExpression	sim = 0.0		5676790	2		=			
ANR	5676888	Identifier	sim		5676790	0					
ANR	5676889	PrimaryExpression	0.0		5676790	1					
ANR	5676890	ExpressionStatement	evals = r_list_newf ( NULL )	818:1:21052:21078	5676790	11	True				
ANR	5676891	AssignmentExpression	evals = r_list_newf ( NULL )		5676790	0		=			
ANR	5676892	Identifier	evals		5676790	0					
ANR	5676893	CallExpression	r_list_newf ( NULL )		5676790	1					
ANR	5676894	Callee	r_list_newf		5676790	0					
ANR	5676895	Identifier	r_list_newf		5676790	0					
ANR	5676896	ArgumentList	NULL		5676790	1					
ANR	5676897	Argument	NULL		5676790	0					
ANR	5676898	Identifier	NULL		5676790	0					
ANR	5676899	WhileStatement	"while ( ( o = r_getopt ( argc , argv , ""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"" ) ) != - 1 )"		5676790	12					
ANR	5676900	Condition	"( o = r_getopt ( argc , argv , ""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"" ) ) != - 1"	820:8:21089:21163	5676790	0	True				
ANR	5676901	EqualityExpression	"( o = r_getopt ( argc , argv , ""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"" ) ) != - 1"		5676790	0		!=			
ANR	5676902	AssignmentExpression	"o = r_getopt ( argc , argv , ""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"" )"		5676790	0		=			
ANR	5676903	Identifier	o		5676790	0					
ANR	5676904	CallExpression	"r_getopt ( argc , argv , ""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"" )"		5676790	1					
ANR	5676905	Callee	r_getopt		5676790	0					
ANR	5676906	Identifier	r_getopt		5676790	0					
ANR	5676907	ArgumentList	argc		5676790	1					
ANR	5676908	Argument	argc		5676790	0					
ANR	5676909	Identifier	argc		5676790	0					
ANR	5676910	Argument	argv		5676790	1					
ANR	5676911	Identifier	argv		5676790	0					
ANR	5676912	Argument	"""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"""		5676790	2					
ANR	5676913	PrimaryExpression	"""Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxt:zqZ"""		5676790	0					
ANR	5676914	UnaryOperationExpression	- 1		5676790	1					
ANR	5676915	UnaryOperator	-		5676790	0					
ANR	5676916	PrimaryExpression	1		5676790	1					
ANR	5676917	CompoundStatement		15:85:409:409	5676790	1					
ANR	5676918	SwitchStatement	switch ( o )		5676790	0					
ANR	5676919	Condition	o	821:10:21178:21178	5676790	0	True				
ANR	5676920	Identifier	o		5676790	0					
ANR	5676921	CompoundStatement		16:13:424:424	5676790	1					
ANR	5676922	Label	case 'a' :	822:2:21185:21193	5676790	0	True				
ANR	5676923	ExpressionStatement	arch = r_optarg	823:3:21198:21213	5676790	1	True				
ANR	5676924	AssignmentExpression	arch = r_optarg		5676790	0		=			
ANR	5676925	Identifier	arch		5676790	0					
ANR	5676926	Identifier	r_optarg		5676790	1					
ANR	5676927	BreakStatement	break ;	824:3:21218:21223	5676790	2	True				
ANR	5676928	Label	case 'A' :	825:2:21227:21235	5676790	3	True				
ANR	5676929	ExpressionStatement	anal_all ++	826:3:21240:21250	5676790	4	True				
ANR	5676930	PostIncDecOperationExpression	anal_all ++		5676790	0					
ANR	5676931	Identifier	anal_all		5676790	0					
ANR	5676932	IncDec	++		5676790	1					
ANR	5676933	BreakStatement	break ;	827:3:21255:21260	5676790	5	True				
ANR	5676934	Label	case 'b' :	828:2:21264:21272	5676790	6	True				
ANR	5676935	ExpressionStatement	bits = atoi ( r_optarg )	829:3:21277:21299	5676790	7	True				
ANR	5676936	AssignmentExpression	bits = atoi ( r_optarg )		5676790	0		=			
ANR	5676937	Identifier	bits		5676790	0					
ANR	5676938	CallExpression	atoi ( r_optarg )		5676790	1					
ANR	5676939	Callee	atoi		5676790	0					
ANR	5676940	Identifier	atoi		5676790	0					
ANR	5676941	ArgumentList	r_optarg		5676790	1					
ANR	5676942	Argument	r_optarg		5676790	0					
ANR	5676943	Identifier	r_optarg		5676790	0					
ANR	5676944	BreakStatement	break ;	830:3:21304:21309	5676790	8	True				
ANR	5676945	Label	case 'B' :	831:2:21313:21321	5676790	9	True				
ANR	5676946	ExpressionStatement	diffmode = 'B'	832:3:21326:21340	5676790	10	True				
ANR	5676947	AssignmentExpression	diffmode = 'B'		5676790	0		=			
ANR	5676948	Identifier	diffmode		5676790	0					
ANR	5676949	PrimaryExpression	'B'		5676790	1					
ANR	5676950	BreakStatement	break ;	833:3:21345:21350	5676790	11	True				
ANR	5676951	Label	case 'e' :	834:2:21354:21362	5676790	12	True				
ANR	5676952	ExpressionStatement	"r_list_append ( evals , r_optarg )"	835:3:21367:21398	5676790	13	True				
ANR	5676953	CallExpression	"r_list_append ( evals , r_optarg )"		5676790	0					
ANR	5676954	Callee	r_list_append		5676790	0					
ANR	5676955	Identifier	r_list_append		5676790	0					
ANR	5676956	ArgumentList	evals		5676790	1					
ANR	5676957	Argument	evals		5676790	0					
ANR	5676958	Identifier	evals		5676790	0					
ANR	5676959	Argument	r_optarg		5676790	1					
ANR	5676960	Identifier	r_optarg		5676790	0					
ANR	5676961	BreakStatement	break ;	836:3:21403:21408	5676790	14	True				
ANR	5676962	Label	case 'p' :	837:2:21412:21420	5676790	15	True				
ANR	5676963	ExpressionStatement	useva = false	838:3:21425:21438	5676790	16	True				
ANR	5676964	AssignmentExpression	useva = false		5676790	0		=			
ANR	5676965	Identifier	useva		5676790	0					
ANR	5676966	Identifier	false		5676790	1					
ANR	5676967	BreakStatement	break ;	839:3:21443:21448	5676790	17	True				
ANR	5676968	Label	case 'r' :	840:2:21452:21460	5676790	18	True				
ANR	5676969	ExpressionStatement	diffmode = 'r'	841:3:21465:21479	5676790	19	True				
ANR	5676970	AssignmentExpression	diffmode = 'r'		5676790	0		=			
ANR	5676971	Identifier	diffmode		5676790	0					
ANR	5676972	PrimaryExpression	'r'		5676790	1					
ANR	5676973	BreakStatement	break ;	842:3:21484:21489	5676790	20	True				
ANR	5676974	Label	case 'g' :	843:2:21493:21501	5676790	21	True				
ANR	5676975	ExpressionStatement	mode = MODE_GRAPH	844:3:21506:21523	5676790	22	True				
ANR	5676976	AssignmentExpression	mode = MODE_GRAPH		5676790	0		=			
ANR	5676977	Identifier	mode		5676790	0					
ANR	5676978	Identifier	MODE_GRAPH		5676790	1					
ANR	5676979	ExpressionStatement	addr = r_optarg	845:3:21528:21543	5676790	23	True				
ANR	5676980	AssignmentExpression	addr = r_optarg		5676790	0		=			
ANR	5676981	Identifier	addr		5676790	0					
ANR	5676982	Identifier	r_optarg		5676790	1					
ANR	5676983	BreakStatement	break ;	846:3:21548:21553	5676790	24	True				
ANR	5676984	Label	case 'm' :	847:2:21557:21565	5676790	25	True				
ANR	5676985	CompoundStatement		43:10:821:841	5676790	26					
ANR	5676986	IdentifierDeclStatement	char * tmp = r_optarg ;	848:10:21578:21598	5676790	0	True				
ANR	5676987	IdentifierDecl	* tmp = r_optarg		5676790	0					
ANR	5676988	IdentifierDeclType	char *		5676790	0					
ANR	5676989	Identifier	tmp		5676790	1					
ANR	5676990	AssignmentExpression	* tmp = r_optarg		5676790	2		=			
ANR	5676991	Identifier	r_optarg		5676790	0					
ANR	5676992	Identifier	r_optarg		5676790	1					
ANR	5676993	SwitchStatement	switch ( tmp [ 0 ] )		5676790	1					
ANR	5676994	Condition	tmp [ 0 ]	849:17:21617:21622	5676790	0	True				
ANR	5676995	ArrayIndexing	tmp [ 0 ]		5676790	0					
ANR	5676996	Identifier	tmp		5676790	0					
ANR	5676997	PrimaryExpression	0		5676790	1					
ANR	5676998	CompoundStatement		44:25:868:868	5676790	1					
ANR	5676999	Label	case 'i' :	850:17:21644:21652	5676790	0	True				
ANR	5677000	ExpressionStatement	gmode = GRAPH_INTERACTIVE_MODE	850:27:21654:21684	5676790	1	True				
ANR	5677001	AssignmentExpression	gmode = GRAPH_INTERACTIVE_MODE		5676790	0		=			
ANR	5677002	Identifier	gmode		5676790	0					
ANR	5677003	Identifier	GRAPH_INTERACTIVE_MODE		5676790	1					
ANR	5677004	BreakStatement	break ;	850:59:21686:21691	5676790	2	True				
ANR	5677005	Label	case 'k' :	851:17:21710:21718	5676790	3	True				
ANR	5677006	ExpressionStatement	gmode = GRAPH_SDB_MODE	851:27:21720:21742	5676790	4	True				
ANR	5677007	AssignmentExpression	gmode = GRAPH_SDB_MODE		5676790	0		=			
ANR	5677008	Identifier	gmode		5676790	0					
ANR	5677009	Identifier	GRAPH_SDB_MODE		5676790	1					
ANR	5677010	BreakStatement	break ;	851:51:21744:21749	5676790	5	True				
ANR	5677011	Label	case 'j' :	852:17:21768:21776	5676790	6	True				
ANR	5677012	ExpressionStatement	gmode = GRAPH_JSON_MODE	852:27:21778:21801	5676790	7	True				
ANR	5677013	AssignmentExpression	gmode = GRAPH_JSON_MODE		5676790	0		=			
ANR	5677014	Identifier	gmode		5676790	0					
ANR	5677015	Identifier	GRAPH_JSON_MODE		5676790	1					
ANR	5677016	BreakStatement	break ;	852:52:21803:21808	5676790	8	True				
ANR	5677017	Label	case 'J' :	853:17:21827:21835	5676790	9	True				
ANR	5677018	ExpressionStatement	gmode = GRAPH_JSON_DIS_MODE	853:27:21837:21864	5676790	10	True				
ANR	5677019	AssignmentExpression	gmode = GRAPH_JSON_DIS_MODE		5676790	0		=			
ANR	5677020	Identifier	gmode		5676790	0					
ANR	5677021	Identifier	GRAPH_JSON_DIS_MODE		5676790	1					
ANR	5677022	BreakStatement	break ;	853:56:21866:21871	5676790	11	True				
ANR	5677023	Label	case 't' :	854:17:21890:21898	5676790	12	True				
ANR	5677024	ExpressionStatement	gmode = GRAPH_TINY_MODE	854:27:21900:21923	5676790	13	True				
ANR	5677025	AssignmentExpression	gmode = GRAPH_TINY_MODE		5676790	0		=			
ANR	5677026	Identifier	gmode		5676790	0					
ANR	5677027	Identifier	GRAPH_TINY_MODE		5676790	1					
ANR	5677028	BreakStatement	break ;	854:52:21925:21930	5676790	14	True				
ANR	5677029	Label	case 'd' :	855:17:21949:21957	5676790	15	True				
ANR	5677030	ExpressionStatement	gmode = GRAPH_DOT_MODE	855:27:21959:21981	5676790	16	True				
ANR	5677031	AssignmentExpression	gmode = GRAPH_DOT_MODE		5676790	0		=			
ANR	5677032	Identifier	gmode		5676790	0					
ANR	5677033	Identifier	GRAPH_DOT_MODE		5676790	1					
ANR	5677034	BreakStatement	break ;	855:51:21983:21988	5676790	17	True				
ANR	5677035	Label	case 's' :	856:17:22007:22015	5676790	18	True				
ANR	5677036	ExpressionStatement	gmode = GRAPH_STAR_MODE	856:27:22017:22040	5676790	19	True				
ANR	5677037	AssignmentExpression	gmode = GRAPH_STAR_MODE		5676790	0		=			
ANR	5677038	Identifier	gmode		5676790	0					
ANR	5677039	Identifier	GRAPH_STAR_MODE		5676790	1					
ANR	5677040	BreakStatement	break ;	856:52:22042:22047	5676790	20	True				
ANR	5677041	Label	case 'g' :	857:17:22066:22074	5676790	21	True				
ANR	5677042	ExpressionStatement	gmode = GRAPH_GML_MODE	857:27:22076:22098	5676790	22	True				
ANR	5677043	AssignmentExpression	gmode = GRAPH_GML_MODE		5676790	0		=			
ANR	5677044	Identifier	gmode		5676790	0					
ANR	5677045	Identifier	GRAPH_GML_MODE		5676790	1					
ANR	5677046	BreakStatement	break ;	857:51:22100:22105	5676790	23	True				
ANR	5677047	Label	case 'a' :	858:17:22124:22132	5676790	24	True				
ANR	5677048	Label	default :	859:24:22158:22165	5676790	25	True				
ANR	5677049	Identifier	default		5676790	0					
ANR	5677050	ExpressionStatement	gmode = GRAPH_DEFAULT_MODE	859:33:22167:22193	5676790	26	True				
ANR	5677051	AssignmentExpression	gmode = GRAPH_DEFAULT_MODE		5676790	0		=			
ANR	5677052	Identifier	gmode		5676790	0					
ANR	5677053	Identifier	GRAPH_DEFAULT_MODE		5676790	1					
ANR	5677054	BreakStatement	break ;	859:61:22195:22200	5676790	27	True				
ANR	5677055	BreakStatement	break ;	861:10:22224:22229	5676790	27	True				
ANR	5677056	Label	case 'G' :	862:2:22233:22241	5676790	28	True				
ANR	5677057	ExpressionStatement	runcmd = r_optarg	863:3:22246:22263	5676790	29	True				
ANR	5677058	AssignmentExpression	runcmd = r_optarg		5676790	0		=			
ANR	5677059	Identifier	runcmd		5676790	0					
ANR	5677060	Identifier	r_optarg		5676790	1					
ANR	5677061	BreakStatement	break ;	864:3:22268:22273	5676790	30	True				
ANR	5677062	Label	case 'c' :	865:2:22277:22285	5676790	31	True				
ANR	5677063	ExpressionStatement	showcount = 1	866:3:22290:22303	5676790	32	True				
ANR	5677064	AssignmentExpression	showcount = 1		5676790	0		=			
ANR	5677065	Identifier	showcount		5676790	0					
ANR	5677066	PrimaryExpression	1		5676790	1					
ANR	5677067	BreakStatement	break ;	867:3:22308:22313	5676790	33	True				
ANR	5677068	Label	case 'C' :	868:2:22317:22325	5676790	34	True				
ANR	5677069	ExpressionStatement	mode = MODE_CODE	869:3:22330:22346	5676790	35	True				
ANR	5677070	AssignmentExpression	mode = MODE_CODE		5676790	0		=			
ANR	5677071	Identifier	mode		5676790	0					
ANR	5677072	Identifier	MODE_CODE		5676790	1					
ANR	5677073	BreakStatement	break ;	870:3:22351:22356	5676790	36	True				
ANR	5677074	Label	case 'i' :	871:2:22360:22368	5676790	37	True				
ANR	5677075	ExpressionStatement	mode = MODE_DIFF_IMPORTS	872:3:22373:22397	5676790	38	True				
ANR	5677076	AssignmentExpression	mode = MODE_DIFF_IMPORTS		5676790	0		=			
ANR	5677077	Identifier	mode		5676790	0					
ANR	5677078	Identifier	MODE_DIFF_IMPORTS		5676790	1					
ANR	5677079	BreakStatement	break ;	873:3:22402:22407	5676790	39	True				
ANR	5677080	Label	case 'n' :	874:2:22411:22419	5676790	40	True				
ANR	5677081	ExpressionStatement	showbare = true	875:3:22424:22439	5676790	41	True				
ANR	5677082	AssignmentExpression	showbare = true		5676790	0		=			
ANR	5677083	Identifier	showbare		5676790	0					
ANR	5677084	Identifier	true		5676790	1					
ANR	5677085	BreakStatement	break ;	876:3:22444:22449	5676790	42	True				
ANR	5677086	Label	case 'O' :	877:2:22453:22461	5676790	43	True				
ANR	5677087	ExpressionStatement	diffops = 1	878:3:22466:22477	5676790	44	True				
ANR	5677088	AssignmentExpression	diffops = 1		5676790	0		=			
ANR	5677089	Identifier	diffops		5676790	0					
ANR	5677090	PrimaryExpression	1		5676790	1					
ANR	5677091	BreakStatement	break ;	879:3:22482:22487	5676790	45	True				
ANR	5677092	Label	case 't' :	880:2:22491:22499	5676790	46	True				
ANR	5677093	ExpressionStatement	threshold = atoi ( r_optarg )	881:3:22504:22531	5676790	47	True				
ANR	5677094	AssignmentExpression	threshold = atoi ( r_optarg )		5676790	0		=			
ANR	5677095	Identifier	threshold		5676790	0					
ANR	5677096	CallExpression	atoi ( r_optarg )		5676790	1					
ANR	5677097	Callee	atoi		5676790	0					
ANR	5677098	Identifier	atoi		5676790	0					
ANR	5677099	ArgumentList	r_optarg		5676790	1					
ANR	5677100	Argument	r_optarg		5676790	0					
ANR	5677101	Identifier	r_optarg		5676790	0					
ANR	5677102	ExpressionStatement	"printf ( ""%s\\n"" , r_optarg )"	882:3:22536:22561	5676790	48	True				
ANR	5677103	CallExpression	"printf ( ""%s\\n"" , r_optarg )"		5676790	0					
ANR	5677104	Callee	printf		5676790	0					
ANR	5677105	Identifier	printf		5676790	0					
ANR	5677106	ArgumentList	"""%s\\n"""		5676790	1					
ANR	5677107	Argument	"""%s\\n"""		5676790	0					
ANR	5677108	PrimaryExpression	"""%s\\n"""		5676790	0					
ANR	5677109	Argument	r_optarg		5676790	1					
ANR	5677110	Identifier	r_optarg		5676790	0					
ANR	5677111	BreakStatement	break ;	883:3:22566:22571	5676790	49	True				
ANR	5677112	Label	case 'd' :	884:2:22575:22583	5676790	50	True				
ANR	5677113	ExpressionStatement	delta = 1	885:3:22588:22597	5676790	51	True				
ANR	5677114	AssignmentExpression	delta = 1		5676790	0		=			
ANR	5677115	Identifier	delta		5676790	0					
ANR	5677116	PrimaryExpression	1		5676790	1					
ANR	5677117	BreakStatement	break ;	886:3:22602:22607	5676790	52	True				
ANR	5677118	Label	case 'D' :	887:2:22611:22619	5676790	53	True				
ANR	5677119	IfStatement	if ( disasm )		5676790	54					
ANR	5677120	Condition	disasm	888:7:22628:22633	5676790	0	True				
ANR	5677121	Identifier	disasm		5676790	0					
ANR	5677122	CompoundStatement		83:15:1879:1879	5676790	1					
ANR	5677123	ExpressionStatement	pdc = true	889:4:22642:22652	5676790	0	True				
ANR	5677124	AssignmentExpression	pdc = true		5676790	0		=			
ANR	5677125	Identifier	pdc		5676790	0					
ANR	5677126	Identifier	true		5676790	1					
ANR	5677127	ExpressionStatement	disasm = false	890:4:22658:22672	5676790	1	True				
ANR	5677128	AssignmentExpression	disasm = false		5676790	0		=			
ANR	5677129	Identifier	disasm		5676790	0					
ANR	5677130	Identifier	false		5676790	1					
ANR	5677131	ExpressionStatement	mode = MODE_CODE	891:4:22678:22694	5676790	2	True				
ANR	5677132	AssignmentExpression	mode = MODE_CODE		5676790	0		=			
ANR	5677133	Identifier	mode		5676790	0					
ANR	5677134	Identifier	MODE_CODE		5676790	1					
ANR	5677135	ElseStatement	else		5676790	0					
ANR	5677136	CompoundStatement		87:10:1949:1949	5676790	0					
ANR	5677137	ExpressionStatement	disasm = true	893:4:22712:22725	5676790	0	True				
ANR	5677138	AssignmentExpression	disasm = true		5676790	0		=			
ANR	5677139	Identifier	disasm		5676790	0					
ANR	5677140	Identifier	true		5676790	1					
ANR	5677141	BreakStatement	break ;	895:3:22735:22740	5676790	55	True				
ANR	5677142	Label	case 'h' :	896:2:22744:22752	5676790	56	True				
ANR	5677143	ReturnStatement	return show_help ( 1 ) ;	897:3:22757:22777	5676790	57	True				
ANR	5677144	CallExpression	show_help ( 1 )		5676790	0					
ANR	5677145	Callee	show_help		5676790	0					
ANR	5677146	Identifier	show_help		5676790	0					
ANR	5677147	ArgumentList	1		5676790	1					
ANR	5677148	Argument	1		5676790	0					
ANR	5677149	PrimaryExpression	1		5676790	0					
ANR	5677150	Label	case 's' :	898:2:22781:22789	5676790	58	True				
ANR	5677151	IfStatement	if ( mode == MODE_DIST )		5676790	59					
ANR	5677152	Condition	mode == MODE_DIST	899:7:22798:22814	5676790	0	True				
ANR	5677153	EqualityExpression	mode == MODE_DIST		5676790	0		==			
ANR	5677154	Identifier	mode		5676790	0					
ANR	5677155	Identifier	MODE_DIST		5676790	1					
ANR	5677156	CompoundStatement		94:26:2060:2060	5676790	1					
ANR	5677157	ExpressionStatement	mode = MODE_DIST_LEVENSTEIN	900:4:22823:22850	5676790	0	True				
ANR	5677158	AssignmentExpression	mode = MODE_DIST_LEVENSTEIN		5676790	0		=			
ANR	5677159	Identifier	mode		5676790	0					
ANR	5677160	Identifier	MODE_DIST_LEVENSTEIN		5676790	1					
ANR	5677161	ElseStatement	else		5676790	0					
ANR	5677162	IfStatement	if ( mode == MODE_DIST_LEVENSTEIN )		5676790	0					
ANR	5677163	Condition	mode == MODE_DIST_LEVENSTEIN	901:14:22866:22893	5676790	0	True				
ANR	5677164	EqualityExpression	mode == MODE_DIST_LEVENSTEIN		5676790	0		==			
ANR	5677165	Identifier	mode		5676790	0					
ANR	5677166	Identifier	MODE_DIST_LEVENSTEIN		5676790	1					
ANR	5677167	CompoundStatement		96:44:2139:2139	5676790	1					
ANR	5677168	ExpressionStatement	mode = MODE_DIST_MYERS	902:4:22902:22924	5676790	0	True				
ANR	5677169	AssignmentExpression	mode = MODE_DIST_MYERS		5676790	0		=			
ANR	5677170	Identifier	mode		5676790	0					
ANR	5677171	Identifier	MODE_DIST_MYERS		5676790	1					
ANR	5677172	ElseStatement	else		5676790	0					
ANR	5677173	CompoundStatement		98:10:2179:2179	5676790	0					
ANR	5677174	ExpressionStatement	mode = MODE_DIST	904:4:22942:22958	5676790	0	True				
ANR	5677175	AssignmentExpression	mode = MODE_DIST		5676790	0		=			
ANR	5677176	Identifier	mode		5676790	0					
ANR	5677177	Identifier	MODE_DIST		5676790	1					
ANR	5677178	BreakStatement	break ;	906:3:22968:22973	5676790	60	True				
ANR	5677179	Label	case 'S' :	907:2:22977:22985	5676790	61	True				
ANR	5677180	ExpressionStatement	columnSort = r_optarg	908:3:22990:23011	5676790	62	True				
ANR	5677181	AssignmentExpression	columnSort = r_optarg		5676790	0		=			
ANR	5677182	Identifier	columnSort		5676790	0					
ANR	5677183	Identifier	r_optarg		5676790	1					
ANR	5677184	BreakStatement	break ;	909:3:23016:23021	5676790	63	True				
ANR	5677185	Label	case 'x' :	910:2:23025:23033	5676790	64	True				
ANR	5677186	ExpressionStatement	mode = MODE_COLS	911:3:23038:23054	5676790	65	True				
ANR	5677187	AssignmentExpression	mode = MODE_COLS		5676790	0		=			
ANR	5677188	Identifier	mode		5676790	0					
ANR	5677189	Identifier	MODE_COLS		5676790	1					
ANR	5677190	BreakStatement	break ;	912:3:23059:23064	5676790	66	True				
ANR	5677191	Label	case 'u' :	913:2:23068:23076	5676790	67	True				
ANR	5677192	ExpressionStatement	diffmode = 'u'	914:3:23081:23095	5676790	68	True				
ANR	5677193	AssignmentExpression	diffmode = 'u'		5676790	0		=			
ANR	5677194	Identifier	diffmode		5676790	0					
ANR	5677195	PrimaryExpression	'u'		5676790	1					
ANR	5677196	BreakStatement	break ;	915:3:23100:23105	5676790	69	True				
ANR	5677197	Label	case 'U' :	916:2:23109:23117	5676790	70	True				
ANR	5677198	ExpressionStatement	diffmode = 'U'	917:3:23122:23136	5676790	71	True				
ANR	5677199	AssignmentExpression	diffmode = 'U'		5676790	0		=			
ANR	5677200	Identifier	diffmode		5676790	0					
ANR	5677201	PrimaryExpression	'U'		5676790	1					
ANR	5677202	BreakStatement	break ;	918:3:23141:23146	5676790	72	True				
ANR	5677203	Label	case 'v' :	919:2:23150:23158	5676790	73	True				
ANR	5677204	ReturnStatement	"return r_main_version_print ( ""radiff2"" ) ;"	920:3:23163:23202	5676790	74	True				
ANR	5677205	CallExpression	"r_main_version_print ( ""radiff2"" )"		5676790	0					
ANR	5677206	Callee	r_main_version_print		5676790	0					
ANR	5677207	Identifier	r_main_version_print		5676790	0					
ANR	5677208	ArgumentList	"""radiff2"""		5676790	1					
ANR	5677209	Argument	"""radiff2"""		5676790	0					
ANR	5677210	PrimaryExpression	"""radiff2"""		5676790	0					
ANR	5677211	Label	case 'q' :	921:2:23206:23214	5676790	75	True				
ANR	5677212	ExpressionStatement	quiet = true	922:3:23219:23231	5676790	76	True				
ANR	5677213	AssignmentExpression	quiet = true		5676790	0		=			
ANR	5677214	Identifier	quiet		5676790	0					
ANR	5677215	Identifier	true		5676790	1					
ANR	5677216	BreakStatement	break ;	923:3:23236:23241	5676790	77	True				
ANR	5677217	Label	case 'V' :	924:2:23245:23253	5676790	78	True				
ANR	5677218	ExpressionStatement	verbose = true	925:3:23258:23272	5676790	79	True				
ANR	5677219	AssignmentExpression	verbose = true		5676790	0		=			
ANR	5677220	Identifier	verbose		5676790	0					
ANR	5677221	Identifier	true		5676790	1					
ANR	5677222	BreakStatement	break ;	926:3:23277:23282	5676790	80	True				
ANR	5677223	Label	case 'j' :	927:2:23286:23294	5676790	81	True				
ANR	5677224	ExpressionStatement	diffmode = 'j'	928:3:23299:23313	5676790	82	True				
ANR	5677225	AssignmentExpression	diffmode = 'j'		5676790	0		=			
ANR	5677226	Identifier	diffmode		5676790	0					
ANR	5677227	PrimaryExpression	'j'		5676790	1					
ANR	5677228	BreakStatement	break ;	929:3:23318:23323	5676790	83	True				
ANR	5677229	Label	case 'z' :	930:2:23327:23335	5676790	84	True				
ANR	5677230	ExpressionStatement	mode = MODE_DIFF_STRS	931:3:23340:23361	5676790	85	True				
ANR	5677231	AssignmentExpression	mode = MODE_DIFF_STRS		5676790	0		=			
ANR	5677232	Identifier	mode		5676790	0					
ANR	5677233	Identifier	MODE_DIFF_STRS		5676790	1					
ANR	5677234	BreakStatement	break ;	932:3:23366:23371	5676790	86	True				
ANR	5677235	Label	case 'Z' :	933:2:23375:23383	5676790	87	True				
ANR	5677236	ExpressionStatement	zignatures = true	934:3:23388:23405	5676790	88	True				
ANR	5677237	AssignmentExpression	zignatures = true		5676790	0		=			
ANR	5677238	Identifier	zignatures		5676790	0					
ANR	5677239	Identifier	true		5676790	1					
ANR	5677240	BreakStatement	break ;	935:3:23410:23415	5676790	89	True				
ANR	5677241	Label	default :	936:2:23419:23426	5676790	90	True				
ANR	5677242	Identifier	default		5676790	0					
ANR	5677243	ReturnStatement	return show_help ( 0 ) ;	937:3:23431:23451	5676790	91	True				
ANR	5677244	CallExpression	show_help ( 0 )		5676790	0					
ANR	5677245	Callee	show_help		5676790	0					
ANR	5677246	Identifier	show_help		5676790	0					
ANR	5677247	ArgumentList	0		5676790	1					
ANR	5677248	Argument	0		5676790	0					
ANR	5677249	PrimaryExpression	0		5676790	0					
ANR	5677250	IfStatement	if ( argc < 3 || r_optind + 2 > argc )		5676790	13					
ANR	5677251	Condition	argc < 3 || r_optind + 2 > argc	941:5:23466:23496	5676790	0	True				
ANR	5677252	OrExpression	argc < 3 || r_optind + 2 > argc		5676790	0		||			
ANR	5677253	RelationalExpression	argc < 3		5676790	0		<			
ANR	5677254	Identifier	argc		5676790	0					
ANR	5677255	PrimaryExpression	3		5676790	1					
ANR	5677256	RelationalExpression	r_optind + 2 > argc		5676790	1		>			
ANR	5677257	AdditiveExpression	r_optind + 2		5676790	0		+			
ANR	5677258	Identifier	r_optind		5676790	0					
ANR	5677259	PrimaryExpression	2		5676790	1					
ANR	5677260	Identifier	argc		5676790	1					
ANR	5677261	CompoundStatement		136:38:2742:2742	5676790	1					
ANR	5677262	ReturnStatement	return show_help ( 0 ) ;	942:2:23503:23523	5676790	0	True				
ANR	5677263	CallExpression	show_help ( 0 )		5676790	0					
ANR	5677264	Callee	show_help		5676790	0					
ANR	5677265	Identifier	show_help		5676790	0					
ANR	5677266	ArgumentList	0		5676790	1					
ANR	5677267	Argument	0		5676790	0					
ANR	5677268	PrimaryExpression	0		5676790	0					
ANR	5677269	ExpressionStatement	file = ( r_optind < argc ) ? argv [ r_optind ] : NULL	944:1:23529:23575	5676790	14	True				
ANR	5677270	AssignmentExpression	file = ( r_optind < argc ) ? argv [ r_optind ] : NULL		5676790	0		=			
ANR	5677271	Identifier	file		5676790	0					
ANR	5677272	ConditionalExpression	( r_optind < argc ) ? argv [ r_optind ] : NULL		5676790	1					
ANR	5677273	Condition	r_optind < argc		5676790	0					
ANR	5677274	RelationalExpression	r_optind < argc		5676790	0		<			
ANR	5677275	Identifier	r_optind		5676790	0					
ANR	5677276	Identifier	argc		5676790	1					
ANR	5677277	ArrayIndexing	argv [ r_optind ]		5676790	1					
ANR	5677278	Identifier	argv		5676790	0					
ANR	5677279	Identifier	r_optind		5676790	1					
ANR	5677280	Identifier	NULL		5676790	2					
ANR	5677281	ExpressionStatement	file2 = ( r_optind + 1 < argc ) ? argv [ r_optind + 1 ] : NULL	945:1:23578:23633	5676790	15	True				
ANR	5677282	AssignmentExpression	file2 = ( r_optind + 1 < argc ) ? argv [ r_optind + 1 ] : NULL		5676790	0		=			
ANR	5677283	Identifier	file2		5676790	0					
ANR	5677284	ConditionalExpression	( r_optind + 1 < argc ) ? argv [ r_optind + 1 ] : NULL		5676790	1					
ANR	5677285	Condition	r_optind + 1 < argc		5676790	0					
ANR	5677286	RelationalExpression	r_optind + 1 < argc		5676790	0		<			
ANR	5677287	AdditiveExpression	r_optind + 1		5676790	0		+			
ANR	5677288	Identifier	r_optind		5676790	0					
ANR	5677289	PrimaryExpression	1		5676790	1					
ANR	5677290	Identifier	argc		5676790	1					
ANR	5677291	ArrayIndexing	argv [ r_optind + 1 ]		5676790	1					
ANR	5677292	Identifier	argv		5676790	0					
ANR	5677293	AdditiveExpression	r_optind + 1		5676790	1		+			
ANR	5677294	Identifier	r_optind		5676790	0					
ANR	5677295	PrimaryExpression	1		5676790	1					
ANR	5677296	Identifier	NULL		5676790	2					
ANR	5677297	SwitchStatement	switch ( mode )		5676790	16					
ANR	5677298	Condition	mode	947:9:23645:23648	5676790	0	True				
ANR	5677299	Identifier	mode		5676790	0					
ANR	5677300	CompoundStatement		142:15:2894:2894	5676790	1					
ANR	5677301	Label	case MODE_GRAPH :	948:1:23654:23669	5676790	0	True				
ANR	5677302	Identifier	MODE_GRAPH		5676790	0					
ANR	5677303	Label	case MODE_CODE :	949:1:23672:23686	5676790	1	True				
ANR	5677304	Identifier	MODE_CODE		5676790	0					
ANR	5677305	Label	case MODE_DIFF_STRS :	950:1:23689:23708	5676790	2	True				
ANR	5677306	Identifier	MODE_DIFF_STRS		5676790	0					
ANR	5677307	Label	case MODE_DIFF_IMPORTS :	951:1:23711:23733	5676790	3	True				
ANR	5677308	Identifier	MODE_DIFF_IMPORTS		5676790	0					
ANR	5677309	ExpressionStatement	c = opencore ( file )	952:2:23737:23756	5676790	4	True				
ANR	5677310	AssignmentExpression	c = opencore ( file )		5676790	0		=			
ANR	5677311	Identifier	c		5676790	0					
ANR	5677312	CallExpression	opencore ( file )		5676790	1					
ANR	5677313	Callee	opencore		5676790	0					
ANR	5677314	Identifier	opencore		5676790	0					
ANR	5677315	ArgumentList	file		5676790	1					
ANR	5677316	Argument	file		5676790	0					
ANR	5677317	Identifier	file		5676790	0					
ANR	5677318	IfStatement	if ( ! c )		5676790	5					
ANR	5677319	Condition	! c	953:6:23764:23765	5676790	0	True				
ANR	5677320	UnaryOperationExpression	! c		5676790	0					
ANR	5677321	UnaryOperator	!		5676790	0					
ANR	5677322	Identifier	c		5676790	1					
ANR	5677323	CompoundStatement		148:10:3011:3011	5676790	1					
ANR	5677324	ExpressionStatement	"eprintf ( ""Cannot open '%s'\\n"" , r_str_get ( file ) )"	954:3:23773:23821	5676790	0	True				
ANR	5677325	CallExpression	"eprintf ( ""Cannot open '%s'\\n"" , r_str_get ( file ) )"		5676790	0					
ANR	5677326	Callee	eprintf		5676790	0					
ANR	5677327	Identifier	eprintf		5676790	0					
ANR	5677328	ArgumentList	"""Cannot open '%s'\\n"""		5676790	1					
ANR	5677329	Argument	"""Cannot open '%s'\\n"""		5676790	0					
ANR	5677330	PrimaryExpression	"""Cannot open '%s'\\n"""		5676790	0					
ANR	5677331	Argument	r_str_get ( file )		5676790	1					
ANR	5677332	CallExpression	r_str_get ( file )		5676790	0					
ANR	5677333	Callee	r_str_get		5676790	0					
ANR	5677334	Identifier	r_str_get		5676790	0					
ANR	5677335	ArgumentList	file		5676790	1					
ANR	5677336	Argument	file		5676790	0					
ANR	5677337	Identifier	file		5676790	0					
ANR	5677338	ExpressionStatement	c2 = opencore ( file2 )	956:2:23829:23850	5676790	6	True				
ANR	5677339	AssignmentExpression	c2 = opencore ( file2 )		5676790	0		=			
ANR	5677340	Identifier	c2		5676790	0					
ANR	5677341	CallExpression	opencore ( file2 )		5676790	1					
ANR	5677342	Callee	opencore		5676790	0					
ANR	5677343	Identifier	opencore		5676790	0					
ANR	5677344	ArgumentList	file2		5676790	1					
ANR	5677345	Argument	file2		5676790	0					
ANR	5677346	Identifier	file2		5676790	0					
ANR	5677347	IfStatement	if ( ! c || ! c2 )		5676790	7					
ANR	5677348	Condition	! c || ! c2	957:6:23858:23866	5676790	0	True				
ANR	5677349	OrExpression	! c || ! c2		5676790	0		||			
ANR	5677350	UnaryOperationExpression	! c		5676790	0					
ANR	5677351	UnaryOperator	!		5676790	0					
ANR	5677352	Identifier	c		5676790	1					
ANR	5677353	UnaryOperationExpression	! c2		5676790	1					
ANR	5677354	UnaryOperator	!		5676790	0					
ANR	5677355	Identifier	c2		5676790	1					
ANR	5677356	CompoundStatement		152:17:3112:3112	5676790	1					
ANR	5677357	ExpressionStatement	"eprintf ( ""Cannot open '%s'\\n"" , r_str_get ( file2 ) )"	958:3:23874:23923	5676790	0	True				
ANR	5677358	CallExpression	"eprintf ( ""Cannot open '%s'\\n"" , r_str_get ( file2 ) )"		5676790	0					
ANR	5677359	Callee	eprintf		5676790	0					
ANR	5677360	Identifier	eprintf		5676790	0					
ANR	5677361	ArgumentList	"""Cannot open '%s'\\n"""		5676790	1					
ANR	5677362	Argument	"""Cannot open '%s'\\n"""		5676790	0					
ANR	5677363	PrimaryExpression	"""Cannot open '%s'\\n"""		5676790	0					
ANR	5677364	Argument	r_str_get ( file2 )		5676790	1					
ANR	5677365	CallExpression	r_str_get ( file2 )		5676790	0					
ANR	5677366	Callee	r_str_get		5676790	0					
ANR	5677367	Identifier	r_str_get		5676790	0					
ANR	5677368	ArgumentList	file2		5676790	1					
ANR	5677369	Argument	file2		5676790	0					
ANR	5677370	Identifier	file2		5676790	0					
ANR	5677371	ReturnStatement	return 1 ;	959:3:23928:23936	5676790	1	True				
ANR	5677372	PrimaryExpression	1		5676790	0					
ANR	5677373	ExpressionStatement	c -> c2 = c2	961:2:23944:23954	5676790	8	True				
ANR	5677374	AssignmentExpression	c -> c2 = c2		5676790	0		=			
ANR	5677375	PtrMemberAccess	c -> c2		5676790	0					
ANR	5677376	Identifier	c		5676790	0					
ANR	5677377	Identifier	c2		5676790	1					
ANR	5677378	Identifier	c2		5676790	1					
ANR	5677379	ExpressionStatement	c2 -> c2 = c	962:2:23958:23968	5676790	9	True				
ANR	5677380	AssignmentExpression	c2 -> c2 = c		5676790	0		=			
ANR	5677381	PtrMemberAccess	c2 -> c2		5676790	0					
ANR	5677382	Identifier	c2		5676790	0					
ANR	5677383	Identifier	c2		5676790	1					
ANR	5677384	Identifier	c		5676790	1					
ANR	5677385	IfStatement	if ( arch )		5676790	10					
ANR	5677386	Condition	arch	963:6:23976:23979	5676790	0	True				
ANR	5677387	Identifier	arch		5676790	0					
ANR	5677388	CompoundStatement		158:12:3225:3225	5676790	1					
ANR	5677389	ExpressionStatement	"r_config_set ( c -> config , ""asm.arch"" , arch )"	964:3:23987:24029	5676790	0	True				
ANR	5677390	CallExpression	"r_config_set ( c -> config , ""asm.arch"" , arch )"		5676790	0					
ANR	5677391	Callee	r_config_set		5676790	0					
ANR	5677392	Identifier	r_config_set		5676790	0					
ANR	5677393	ArgumentList	c -> config		5676790	1					
ANR	5677394	Argument	c -> config		5676790	0					
ANR	5677395	PtrMemberAccess	c -> config		5676790	0					
ANR	5677396	Identifier	c		5676790	0					
ANR	5677397	Identifier	config		5676790	1					
ANR	5677398	Argument	"""asm.arch"""		5676790	1					
ANR	5677399	PrimaryExpression	"""asm.arch"""		5676790	0					
ANR	5677400	Argument	arch		5676790	2					
ANR	5677401	Identifier	arch		5676790	0					
ANR	5677402	ExpressionStatement	"r_config_set ( c2 -> config , ""asm.arch"" , arch )"	965:3:24034:24077	5676790	1	True				
ANR	5677403	CallExpression	"r_config_set ( c2 -> config , ""asm.arch"" , arch )"		5676790	0					
ANR	5677404	Callee	r_config_set		5676790	0					
ANR	5677405	Identifier	r_config_set		5676790	0					
ANR	5677406	ArgumentList	c2 -> config		5676790	1					
ANR	5677407	Argument	c2 -> config		5676790	0					
ANR	5677408	PtrMemberAccess	c2 -> config		5676790	0					
ANR	5677409	Identifier	c2		5676790	0					
ANR	5677410	Identifier	config		5676790	1					
ANR	5677411	Argument	"""asm.arch"""		5676790	1					
ANR	5677412	PrimaryExpression	"""asm.arch"""		5676790	0					
ANR	5677413	Argument	arch		5676790	2					
ANR	5677414	Identifier	arch		5676790	0					
ANR	5677415	IfStatement	if ( bits )		5676790	11					
ANR	5677416	Condition	bits	967:6:24089:24092	5676790	0	True				
ANR	5677417	Identifier	bits		5676790	0					
ANR	5677418	CompoundStatement		162:12:3338:3338	5676790	1					
ANR	5677419	ExpressionStatement	"r_config_set_i ( c -> config , ""asm.bits"" , bits )"	968:3:24100:24144	5676790	0	True				
ANR	5677420	CallExpression	"r_config_set_i ( c -> config , ""asm.bits"" , bits )"		5676790	0					
ANR	5677421	Callee	r_config_set_i		5676790	0					
ANR	5677422	Identifier	r_config_set_i		5676790	0					
ANR	5677423	ArgumentList	c -> config		5676790	1					
ANR	5677424	Argument	c -> config		5676790	0					
ANR	5677425	PtrMemberAccess	c -> config		5676790	0					
ANR	5677426	Identifier	c		5676790	0					
ANR	5677427	Identifier	config		5676790	1					
ANR	5677428	Argument	"""asm.bits"""		5676790	1					
ANR	5677429	PrimaryExpression	"""asm.bits"""		5676790	0					
ANR	5677430	Argument	bits		5676790	2					
ANR	5677431	Identifier	bits		5676790	0					
ANR	5677432	ExpressionStatement	"r_config_set_i ( c2 -> config , ""asm.bits"" , bits )"	969:3:24149:24194	5676790	1	True				
ANR	5677433	CallExpression	"r_config_set_i ( c2 -> config , ""asm.bits"" , bits )"		5676790	0					
ANR	5677434	Callee	r_config_set_i		5676790	0					
ANR	5677435	Identifier	r_config_set_i		5676790	0					
ANR	5677436	ArgumentList	c2 -> config		5676790	1					
ANR	5677437	Argument	c2 -> config		5676790	0					
ANR	5677438	PtrMemberAccess	c2 -> config		5676790	0					
ANR	5677439	Identifier	c2		5676790	0					
ANR	5677440	Identifier	config		5676790	1					
ANR	5677441	Argument	"""asm.bits"""		5676790	1					
ANR	5677442	PrimaryExpression	"""asm.bits"""		5676790	0					
ANR	5677443	Argument	bits		5676790	2					
ANR	5677444	Identifier	bits		5676790	0					
ANR	5677445	IfStatement	if ( columnSort )		5676790	12					
ANR	5677446	Condition	columnSort	971:6:24206:24215	5676790	0	True				
ANR	5677447	Identifier	columnSort		5676790	0					
ANR	5677448	CompoundStatement		166:18:3461:3461	5676790	1					
ANR	5677449	ExpressionStatement	"r_config_set ( c -> config , ""diff.sort"" , columnSort )"	972:3:24223:24272	5676790	0	True				
ANR	5677450	CallExpression	"r_config_set ( c -> config , ""diff.sort"" , columnSort )"		5676790	0					
ANR	5677451	Callee	r_config_set		5676790	0					
ANR	5677452	Identifier	r_config_set		5676790	0					
ANR	5677453	ArgumentList	c -> config		5676790	1					
ANR	5677454	Argument	c -> config		5676790	0					
ANR	5677455	PtrMemberAccess	c -> config		5676790	0					
ANR	5677456	Identifier	c		5676790	0					
ANR	5677457	Identifier	config		5676790	1					
ANR	5677458	Argument	"""diff.sort"""		5676790	1					
ANR	5677459	PrimaryExpression	"""diff.sort"""		5676790	0					
ANR	5677460	Argument	columnSort		5676790	2					
ANR	5677461	Identifier	columnSort		5676790	0					
ANR	5677462	ExpressionStatement	"r_config_set ( c2 -> config , ""diff.sort"" , columnSort )"	973:3:24277:24327	5676790	1	True				
ANR	5677463	CallExpression	"r_config_set ( c2 -> config , ""diff.sort"" , columnSort )"		5676790	0					
ANR	5677464	Callee	r_config_set		5676790	0					
ANR	5677465	Identifier	r_config_set		5676790	0					
ANR	5677466	ArgumentList	c2 -> config		5676790	1					
ANR	5677467	Argument	c2 -> config		5676790	0					
ANR	5677468	PtrMemberAccess	c2 -> config		5676790	0					
ANR	5677469	Identifier	c2		5676790	0					
ANR	5677470	Identifier	config		5676790	1					
ANR	5677471	Argument	"""diff.sort"""		5676790	1					
ANR	5677472	PrimaryExpression	"""diff.sort"""		5676790	0					
ANR	5677473	Argument	columnSort		5676790	2					
ANR	5677474	Identifier	columnSort		5676790	0					
ANR	5677475	ExpressionStatement	"r_config_set_i ( c -> config , ""diff.bare"" , showbare )"	975:2:24335:24384	5676790	13	True				
ANR	5677476	CallExpression	"r_config_set_i ( c -> config , ""diff.bare"" , showbare )"		5676790	0					
ANR	5677477	Callee	r_config_set_i		5676790	0					
ANR	5677478	Identifier	r_config_set_i		5676790	0					
ANR	5677479	ArgumentList	c -> config		5676790	1					
ANR	5677480	Argument	c -> config		5676790	0					
ANR	5677481	PtrMemberAccess	c -> config		5676790	0					
ANR	5677482	Identifier	c		5676790	0					
ANR	5677483	Identifier	config		5676790	1					
ANR	5677484	Argument	"""diff.bare"""		5676790	1					
ANR	5677485	PrimaryExpression	"""diff.bare"""		5676790	0					
ANR	5677486	Argument	showbare		5676790	2					
ANR	5677487	Identifier	showbare		5676790	0					
ANR	5677488	ExpressionStatement	"r_config_set_i ( c2 -> config , ""diff.bare"" , showbare )"	976:2:24388:24438	5676790	14	True				
ANR	5677489	CallExpression	"r_config_set_i ( c2 -> config , ""diff.bare"" , showbare )"		5676790	0					
ANR	5677490	Callee	r_config_set_i		5676790	0					
ANR	5677491	Identifier	r_config_set_i		5676790	0					
ANR	5677492	ArgumentList	c2 -> config		5676790	1					
ANR	5677493	Argument	c2 -> config		5676790	0					
ANR	5677494	PtrMemberAccess	c2 -> config		5676790	0					
ANR	5677495	Identifier	c2		5676790	0					
ANR	5677496	Identifier	config		5676790	1					
ANR	5677497	Argument	"""diff.bare"""		5676790	1					
ANR	5677498	PrimaryExpression	"""diff.bare"""		5676790	0					
ANR	5677499	Argument	showbare		5676790	2					
ANR	5677500	Identifier	showbare		5676790	0					
ANR	5677501	ExpressionStatement	"r_anal_diff_setup_i ( c -> anal , diffops , threshold , threshold )"	977:2:24442:24502	5676790	15	True				
ANR	5677502	CallExpression	"r_anal_diff_setup_i ( c -> anal , diffops , threshold , threshold )"		5676790	0					
ANR	5677503	Callee	r_anal_diff_setup_i		5676790	0					
ANR	5677504	Identifier	r_anal_diff_setup_i		5676790	0					
ANR	5677505	ArgumentList	c -> anal		5676790	1					
ANR	5677506	Argument	c -> anal		5676790	0					
ANR	5677507	PtrMemberAccess	c -> anal		5676790	0					
ANR	5677508	Identifier	c		5676790	0					
ANR	5677509	Identifier	anal		5676790	1					
ANR	5677510	Argument	diffops		5676790	1					
ANR	5677511	Identifier	diffops		5676790	0					
ANR	5677512	Argument	threshold		5676790	2					
ANR	5677513	Identifier	threshold		5676790	0					
ANR	5677514	Argument	threshold		5676790	3					
ANR	5677515	Identifier	threshold		5676790	0					
ANR	5677516	ExpressionStatement	"r_anal_diff_setup_i ( c2 -> anal , diffops , threshold , threshold )"	978:2:24506:24567	5676790	16	True				
ANR	5677517	CallExpression	"r_anal_diff_setup_i ( c2 -> anal , diffops , threshold , threshold )"		5676790	0					
ANR	5677518	Callee	r_anal_diff_setup_i		5676790	0					
ANR	5677519	Identifier	r_anal_diff_setup_i		5676790	0					
ANR	5677520	ArgumentList	c2 -> anal		5676790	1					
ANR	5677521	Argument	c2 -> anal		5676790	0					
ANR	5677522	PtrMemberAccess	c2 -> anal		5676790	0					
ANR	5677523	Identifier	c2		5676790	0					
ANR	5677524	Identifier	anal		5676790	1					
ANR	5677525	Argument	diffops		5676790	1					
ANR	5677526	Identifier	diffops		5676790	0					
ANR	5677527	Argument	threshold		5676790	2					
ANR	5677528	Identifier	threshold		5676790	0					
ANR	5677529	Argument	threshold		5676790	3					
ANR	5677530	Identifier	threshold		5676790	0					
ANR	5677531	IfStatement	if ( pdc )		5676790	17					
ANR	5677532	Condition	pdc	979:6:24575:24577	5676790	0	True				
ANR	5677533	Identifier	pdc		5676790	0					
ANR	5677534	CompoundStatement		187:3:4220:4259	5676790	1					
ANR	5677535	IfStatement	if ( ! addr )		5676790	0					
ANR	5677536	Condition	! addr	980:7:24589:24593	5676790	0	True				
ANR	5677537	UnaryOperationExpression	! addr		5676790	0					
ANR	5677538	UnaryOperator	!		5676790	0					
ANR	5677539	Identifier	addr		5676790	1					
ANR	5677540	CompoundStatement		175:14:3839:3839	5676790	1					
ANR	5677541	ExpressionStatement	"addr = ""main"""	982:4:24625:24638	5676790	0	True				
ANR	5677542	AssignmentExpression	"addr = ""main"""		5676790	0		=			
ANR	5677543	Identifier	addr		5676790	0					
ANR	5677544	PrimaryExpression	"""main"""		5676790	1					
ANR	5677545	ExpressionStatement	"r_config_set_i ( c -> config , ""scr.color"" , COLOR_MODE_DISABLED )"	985:3:24691:24751	5676790	1	True				
ANR	5677546	CallExpression	"r_config_set_i ( c -> config , ""scr.color"" , COLOR_MODE_DISABLED )"		5676790	0					
ANR	5677547	Callee	r_config_set_i		5676790	0					
ANR	5677548	Identifier	r_config_set_i		5676790	0					
ANR	5677549	ArgumentList	c -> config		5676790	1					
ANR	5677550	Argument	c -> config		5676790	0					
ANR	5677551	PtrMemberAccess	c -> config		5676790	0					
ANR	5677552	Identifier	c		5676790	0					
ANR	5677553	Identifier	config		5676790	1					
ANR	5677554	Argument	"""scr.color"""		5676790	1					
ANR	5677555	PrimaryExpression	"""scr.color"""		5676790	0					
ANR	5677556	Argument	COLOR_MODE_DISABLED		5676790	2					
ANR	5677557	Identifier	COLOR_MODE_DISABLED		5676790	0					
ANR	5677558	ExpressionStatement	"r_config_set_i ( c2 -> config , ""scr.color"" , COLOR_MODE_DISABLED )"	986:3:24756:24817	5676790	2	True				
ANR	5677559	CallExpression	"r_config_set_i ( c2 -> config , ""scr.color"" , COLOR_MODE_DISABLED )"		5676790	0					
ANR	5677560	Callee	r_config_set_i		5676790	0					
ANR	5677561	Identifier	r_config_set_i		5676790	0					
ANR	5677562	ArgumentList	c2 -> config		5676790	1					
ANR	5677563	Argument	c2 -> config		5676790	0					
ANR	5677564	PtrMemberAccess	c2 -> config		5676790	0					
ANR	5677565	Identifier	c2		5676790	0					
ANR	5677566	Identifier	config		5676790	1					
ANR	5677567	Argument	"""scr.color"""		5676790	1					
ANR	5677568	PrimaryExpression	"""scr.color"""		5676790	0					
ANR	5677569	Argument	COLOR_MODE_DISABLED		5676790	2					
ANR	5677570	Identifier	COLOR_MODE_DISABLED		5676790	0					
ANR	5677571	IdentifierDeclStatement	"ut64 addra = r_num_math ( c -> num , addr ) ;"	988:3:24823:24861	5676790	3	True				
ANR	5677572	IdentifierDecl	"addra = r_num_math ( c -> num , addr )"		5676790	0					
ANR	5677573	IdentifierDeclType	ut64		5676790	0					
ANR	5677574	Identifier	addra		5676790	1					
ANR	5677575	AssignmentExpression	"addra = r_num_math ( c -> num , addr )"		5676790	2		=			
ANR	5677576	Identifier	addra		5676790	0					
ANR	5677577	CallExpression	"r_num_math ( c -> num , addr )"		5676790	1					
ANR	5677578	Callee	r_num_math		5676790	0					
ANR	5677579	Identifier	r_num_math		5676790	0					
ANR	5677580	ArgumentList	c -> num		5676790	1					
ANR	5677581	Argument	c -> num		5676790	0					
ANR	5677582	PtrMemberAccess	c -> num		5676790	0					
ANR	5677583	Identifier	c		5676790	0					
ANR	5677584	Identifier	num		5676790	1					
ANR	5677585	Argument	addr		5676790	1					
ANR	5677586	Identifier	addr		5676790	0					
ANR	5677587	Statement	bufa	989:3:24866:24869	5676790	4	True				
ANR	5677588	Statement	=	989:8:24871:24871	5676790	5	True				
ANR	5677589	Statement	(	989:10:24873:24873	5676790	6	True				
ANR	5677590	Statement	ut8	989:11:24874:24876	5676790	7	True				
ANR	5677591	Statement	*	989:15:24878:24878	5676790	8	True				
ANR	5677592	Statement	)	989:16:24879:24879	5676790	9	True				
ANR	5677593	Statement	r_core_cmd_strf	989:18:24881:24895	5676790	10	True				
ANR	5677594	Statement	(	989:34:24897:24897	5676790	11	True				
ANR	5677595	Statement	c	989:35:24898:24898	5676790	12	True				
ANR	5677596	Statement	","	989:36:24899:24899	5676790	13	True				
ANR	5677597	Statement	"""af;pdc @ 0x%08"""	989:38:24901:24916	5676790	14	True				
ANR	5677598	Statement	PFMT64x	989:54:24917:24923	5676790	15	True				
ANR	5677599	Statement	","	989:61:24924:24924	5676790	16	True				
ANR	5677600	Statement	addra	989:63:24926:24930	5676790	17	True				
ANR	5677601	Statement	)	989:68:24931:24931	5676790	18	True				
ANR	5677602	ExpressionStatement		989:69:24932:24932	5676790	19	True				
ANR	5677603	ExpressionStatement	sza = strlen ( ( const char * ) bufa )	990:3:24937:24971	5676790	20	True				
ANR	5677604	AssignmentExpression	sza = strlen ( ( const char * ) bufa )		5676790	0		=			
ANR	5677605	Identifier	sza		5676790	0					
ANR	5677606	CallExpression	strlen ( ( const char * ) bufa )		5676790	1					
ANR	5677607	Callee	strlen		5676790	0					
ANR	5677608	Identifier	strlen		5676790	0					
ANR	5677609	ArgumentList	( const char * ) bufa		5676790	1					
ANR	5677610	Argument	( const char * ) bufa		5676790	0					
ANR	5677611	CastExpression	( const char * ) bufa		5676790	0					
ANR	5677612	CastTarget	const char *		5676790	0					
ANR	5677613	Identifier	bufa		5676790	1					
ANR	5677614	IdentifierDeclStatement	"ut64 addrb = r_num_math ( c2 -> num , addr ) ;"	992:3:24977:25016	5676790	21	True				
ANR	5677615	IdentifierDecl	"addrb = r_num_math ( c2 -> num , addr )"		5676790	0					
ANR	5677616	IdentifierDeclType	ut64		5676790	0					
ANR	5677617	Identifier	addrb		5676790	1					
ANR	5677618	AssignmentExpression	"addrb = r_num_math ( c2 -> num , addr )"		5676790	2		=			
ANR	5677619	Identifier	addrb		5676790	0					
ANR	5677620	CallExpression	"r_num_math ( c2 -> num , addr )"		5676790	1					
ANR	5677621	Callee	r_num_math		5676790	0					
ANR	5677622	Identifier	r_num_math		5676790	0					
ANR	5677623	ArgumentList	c2 -> num		5676790	1					
ANR	5677624	Argument	c2 -> num		5676790	0					
ANR	5677625	PtrMemberAccess	c2 -> num		5676790	0					
ANR	5677626	Identifier	c2		5676790	0					
ANR	5677627	Identifier	num		5676790	1					
ANR	5677628	Argument	addr		5676790	1					
ANR	5677629	Identifier	addr		5676790	0					
ANR	5677630	Statement	bufb	993:3:25021:25024	5676790	22	True				
ANR	5677631	Statement	=	993:8:25026:25026	5676790	23	True				
ANR	5677632	Statement	(	993:10:25028:25028	5676790	24	True				
ANR	5677633	Statement	ut8	993:11:25029:25031	5676790	25	True				
ANR	5677634	Statement	*	993:15:25033:25033	5676790	26	True				
ANR	5677635	Statement	)	993:16:25034:25034	5676790	27	True				
ANR	5677636	Statement	r_core_cmd_strf	993:18:25036:25050	5676790	28	True				
ANR	5677637	Statement	(	993:34:25052:25052	5676790	29	True				
ANR	5677638	Statement	c2	993:35:25053:25054	5676790	30	True				
ANR	5677639	Statement	","	993:37:25055:25055	5676790	31	True				
ANR	5677640	Statement	"""af;pdc @ 0x%08"""	993:39:25057:25072	5676790	32	True				
ANR	5677641	Statement	PFMT64x	993:55:25073:25079	5676790	33	True				
ANR	5677642	Statement	","	993:62:25080:25080	5676790	34	True				
ANR	5677643	Statement	addrb	993:64:25082:25086	5676790	35	True				
ANR	5677644	Statement	)	993:69:25087:25087	5676790	36	True				
ANR	5677645	ExpressionStatement		993:70:25088:25088	5676790	37	True				
ANR	5677646	ExpressionStatement	szb = strlen ( ( const char * ) bufb )	994:3:25093:25127	5676790	38	True				
ANR	5677647	AssignmentExpression	szb = strlen ( ( const char * ) bufb )		5676790	0		=			
ANR	5677648	Identifier	szb		5676790	0					
ANR	5677649	CallExpression	strlen ( ( const char * ) bufb )		5676790	1					
ANR	5677650	Callee	strlen		5676790	0					
ANR	5677651	Identifier	strlen		5676790	0					
ANR	5677652	ArgumentList	( const char * ) bufb		5676790	1					
ANR	5677653	Argument	( const char * ) bufb		5676790	0					
ANR	5677654	CastExpression	( const char * ) bufb		5676790	0					
ANR	5677655	CastTarget	const char *		5676790	0					
ANR	5677656	Identifier	bufb		5676790	1					
ANR	5677657	ExpressionStatement	mode = MODE_DIFF	995:3:25132:25148	5676790	39	True				
ANR	5677658	AssignmentExpression	mode = MODE_DIFF		5676790	0		=			
ANR	5677659	Identifier	mode		5676790	0					
ANR	5677660	Identifier	MODE_DIFF		5676790	1					
ANR	5677661	ElseStatement	else		5676790	0					
ANR	5677662	IfStatement	if ( mode == MODE_GRAPH )		5676790	0					
ANR	5677663	Condition	mode == MODE_GRAPH	996:13:25163:25180	5676790	0	True				
ANR	5677664	EqualityExpression	mode == MODE_GRAPH		5676790	0		==			
ANR	5677665	Identifier	mode		5676790	0					
ANR	5677666	Identifier	MODE_GRAPH		5676790	1					
ANR	5677667	CompoundStatement		197:3:4572:4606	5676790	1					
ANR	5677668	IdentifierDeclStatement	"int depth = r_config_get_i ( c -> config , ""anal.depth"" ) ;"	997:3:25188:25240	5676790	0	True				
ANR	5677669	IdentifierDecl	"depth = r_config_get_i ( c -> config , ""anal.depth"" )"		5676790	0					
ANR	5677670	IdentifierDeclType	int		5676790	0					
ANR	5677671	Identifier	depth		5676790	1					
ANR	5677672	AssignmentExpression	"depth = r_config_get_i ( c -> config , ""anal.depth"" )"		5676790	2		=			
ANR	5677673	Identifier	depth		5676790	0					
ANR	5677674	CallExpression	"r_config_get_i ( c -> config , ""anal.depth"" )"		5676790	1					
ANR	5677675	Callee	r_config_get_i		5676790	0					
ANR	5677676	Identifier	r_config_get_i		5676790	0					
ANR	5677677	ArgumentList	c -> config		5676790	1					
ANR	5677678	Argument	c -> config		5676790	0					
ANR	5677679	PtrMemberAccess	c -> config		5676790	0					
ANR	5677680	Identifier	c		5676790	0					
ANR	5677681	Identifier	config		5676790	1					
ANR	5677682	Argument	"""anal.depth"""		5676790	1					
ANR	5677683	PrimaryExpression	"""anal.depth"""		5676790	0					
ANR	5677684	IfStatement	if ( depth < 1 )		5676790	1					
ANR	5677685	Condition	depth < 1	998:7:25249:25257	5676790	0	True				
ANR	5677686	RelationalExpression	depth < 1		5676790	0		<			
ANR	5677687	Identifier	depth		5676790	0					
ANR	5677688	PrimaryExpression	1		5676790	1					
ANR	5677689	CompoundStatement		193:18:4503:4503	5676790	1					
ANR	5677690	ExpressionStatement	depth = 64	999:4:25266:25276	5676790	0	True				
ANR	5677691	AssignmentExpression	depth = 64		5676790	0		=			
ANR	5677692	Identifier	depth		5676790	0					
ANR	5677693	PrimaryExpression	64		5676790	1					
ANR	5677694	IdentifierDeclStatement	"char * words = strdup ( addr ? addr : ""0"" ) ;"	1001:3:25286:25324	5676790	2	True				
ANR	5677695	IdentifierDecl	"* words = strdup ( addr ? addr : ""0"" )"		5676790	0					
ANR	5677696	IdentifierDeclType	char *		5676790	0					
ANR	5677697	Identifier	words		5676790	1					
ANR	5677698	AssignmentExpression	"* words = strdup ( addr ? addr : ""0"" )"		5676790	2		=			
ANR	5677699	Identifier	words		5676790	0					
ANR	5677700	CallExpression	"strdup ( addr ? addr : ""0"" )"		5676790	1					
ANR	5677701	Callee	strdup		5676790	0					
ANR	5677702	Identifier	strdup		5676790	0					
ANR	5677703	ArgumentList	"addr ? addr : ""0"""		5676790	1					
ANR	5677704	Argument	"addr ? addr : ""0"""		5676790	0					
ANR	5677705	ConditionalExpression	"addr ? addr : ""0"""		5676790	0					
ANR	5677706	Condition	addr		5676790	0					
ANR	5677707	Identifier	addr		5676790	0					
ANR	5677708	Identifier	addr		5676790	1					
ANR	5677709	PrimaryExpression	"""0"""		5676790	2					
ANR	5677710	IdentifierDeclStatement	"char * second = strstr ( words , "","" ) ;"	1002:3:25329:25363	5676790	3	True				
ANR	5677711	IdentifierDecl	"* second = strstr ( words , "","" )"		5676790	0					
ANR	5677712	IdentifierDeclType	char *		5676790	0					
ANR	5677713	Identifier	second		5676790	1					
ANR	5677714	AssignmentExpression	"* second = strstr ( words , "","" )"		5676790	2		=			
ANR	5677715	Identifier	second		5676790	0					
ANR	5677716	CallExpression	"strstr ( words , "","" )"		5676790	1					
ANR	5677717	Callee	strstr		5676790	0					
ANR	5677718	Identifier	strstr		5676790	0					
ANR	5677719	ArgumentList	words		5676790	1					
ANR	5677720	Argument	words		5676790	0					
ANR	5677721	Identifier	words		5676790	0					
ANR	5677722	Argument	""","""		5676790	1					
ANR	5677723	PrimaryExpression	""","""		5676790	0					
ANR	5677724	IfStatement	if ( second )		5676790	4					
ANR	5677725	Condition	second	1003:7:25372:25377	5676790	0	True				
ANR	5677726	Identifier	second		5676790	0					
ANR	5677727	CompoundStatement		200:4:4648:4685	5676790	1					
ANR	5677728	ExpressionStatement	* second ++ = 0	1004:4:25386:25399	5676790	0	True				
ANR	5677729	AssignmentExpression	* second ++ = 0		5676790	0		=			
ANR	5677730	UnaryOperationExpression	* second ++		5676790	0					
ANR	5677731	UnaryOperator	*		5676790	0					
ANR	5677732	PostIncDecOperationExpression	second ++		5676790	1					
ANR	5677733	Identifier	second		5676790	0					
ANR	5677734	IncDec	++		5676790	1					
ANR	5677735	PrimaryExpression	0		5676790	1					
ANR	5677736	IdentifierDeclStatement	"ut64 off = r_num_math ( c -> num , words ) ;"	1005:4:25405:25442	5676790	1	True				
ANR	5677737	IdentifierDecl	"off = r_num_math ( c -> num , words )"		5676790	0					
ANR	5677738	IdentifierDeclType	ut64		5676790	0					
ANR	5677739	Identifier	off		5676790	1					
ANR	5677740	AssignmentExpression	"off = r_num_math ( c -> num , words )"		5676790	2		=			
ANR	5677741	Identifier	off		5676790	0					
ANR	5677742	CallExpression	"r_num_math ( c -> num , words )"		5676790	1					
ANR	5677743	Callee	r_num_math		5676790	0					
ANR	5677744	Identifier	r_num_math		5676790	0					
ANR	5677745	ArgumentList	c -> num		5676790	1					
ANR	5677746	Argument	c -> num		5676790	0					
ANR	5677747	PtrMemberAccess	c -> num		5676790	0					
ANR	5677748	Identifier	c		5676790	0					
ANR	5677749	Identifier	num		5676790	1					
ANR	5677750	Argument	words		5676790	1					
ANR	5677751	Identifier	words		5676790	0					
ANR	5677752	ExpressionStatement	"r_core_anal_fcn ( c , off , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"	1007:4:25495:25558	5676790	2	True				
ANR	5677753	CallExpression	"r_core_anal_fcn ( c , off , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"		5676790	0					
ANR	5677754	Callee	r_core_anal_fcn		5676790	0					
ANR	5677755	Identifier	r_core_anal_fcn		5676790	0					
ANR	5677756	ArgumentList	c		5676790	1					
ANR	5677757	Argument	c		5676790	0					
ANR	5677758	Identifier	c		5676790	0					
ANR	5677759	Argument	off		5676790	1					
ANR	5677760	Identifier	off		5676790	0					
ANR	5677761	Argument	UT64_MAX		5676790	2					
ANR	5677762	Identifier	UT64_MAX		5676790	0					
ANR	5677763	Argument	R_ANAL_REF_TYPE_NULL		5676790	3					
ANR	5677764	Identifier	R_ANAL_REF_TYPE_NULL		5676790	0					
ANR	5677765	Argument	depth		5676790	4					
ANR	5677766	Identifier	depth		5676790	0					
ANR	5677767	ExpressionStatement	"r_core_anal_fcn ( c2 , r_num_math ( c2 -> num , second ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"	1008:4:25564:25658	5676790	3	True				
ANR	5677768	CallExpression	"r_core_anal_fcn ( c2 , r_num_math ( c2 -> num , second ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"		5676790	0					
ANR	5677769	Callee	r_core_anal_fcn		5676790	0					
ANR	5677770	Identifier	r_core_anal_fcn		5676790	0					
ANR	5677771	ArgumentList	c2		5676790	1					
ANR	5677772	Argument	c2		5676790	0					
ANR	5677773	Identifier	c2		5676790	0					
ANR	5677774	Argument	"r_num_math ( c2 -> num , second )"		5676790	1					
ANR	5677775	CallExpression	"r_num_math ( c2 -> num , second )"		5676790	0					
ANR	5677776	Callee	r_num_math		5676790	0					
ANR	5677777	Identifier	r_num_math		5676790	0					
ANR	5677778	ArgumentList	c2 -> num		5676790	1					
ANR	5677779	Argument	c2 -> num		5676790	0					
ANR	5677780	PtrMemberAccess	c2 -> num		5676790	0					
ANR	5677781	Identifier	c2		5676790	0					
ANR	5677782	Identifier	num		5676790	1					
ANR	5677783	Argument	second		5676790	1					
ANR	5677784	Identifier	second		5676790	0					
ANR	5677785	Argument	UT64_MAX		5676790	2					
ANR	5677786	Identifier	UT64_MAX		5676790	0					
ANR	5677787	Argument	R_ANAL_REF_TYPE_NULL		5676790	3					
ANR	5677788	Identifier	R_ANAL_REF_TYPE_NULL		5676790	0					
ANR	5677789	Argument	depth		5676790	4					
ANR	5677790	Identifier	depth		5676790	0					
ANR	5677791	ExpressionStatement	"r_core_gdiff ( c , c2 )"	1010:4:25664:25684	5676790	4	True				
ANR	5677792	CallExpression	"r_core_gdiff ( c , c2 )"		5676790	0					
ANR	5677793	Callee	r_core_gdiff		5676790	0					
ANR	5677794	Identifier	r_core_gdiff		5676790	0					
ANR	5677795	ArgumentList	c		5676790	1					
ANR	5677796	Argument	c		5676790	0					
ANR	5677797	Identifier	c		5676790	0					
ANR	5677798	Argument	c2		5676790	1					
ANR	5677799	Identifier	c2		5676790	0					
ANR	5677800	ExpressionStatement	"__print_diff_graph ( c , off , gmode )"	1011:4:25690:25724	5676790	5	True				
ANR	5677801	CallExpression	"__print_diff_graph ( c , off , gmode )"		5676790	0					
ANR	5677802	Callee	__print_diff_graph		5676790	0					
ANR	5677803	Identifier	__print_diff_graph		5676790	0					
ANR	5677804	ArgumentList	c		5676790	1					
ANR	5677805	Argument	c		5676790	0					
ANR	5677806	Identifier	c		5676790	0					
ANR	5677807	Argument	off		5676790	1					
ANR	5677808	Identifier	off		5676790	0					
ANR	5677809	Argument	gmode		5676790	2					
ANR	5677810	Identifier	gmode		5676790	0					
ANR	5677811	ElseStatement	else		5676790	0					
ANR	5677812	CompoundStatement		207:10:4979:4979	5676790	0					
ANR	5677813	ExpressionStatement	"r_core_anal_fcn ( c , r_num_math ( c -> num , words ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"	1013:4:25742:25833	5676790	0	True				
ANR	5677814	CallExpression	"r_core_anal_fcn ( c , r_num_math ( c -> num , words ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"		5676790	0					
ANR	5677815	Callee	r_core_anal_fcn		5676790	0					
ANR	5677816	Identifier	r_core_anal_fcn		5676790	0					
ANR	5677817	ArgumentList	c		5676790	1					
ANR	5677818	Argument	c		5676790	0					
ANR	5677819	Identifier	c		5676790	0					
ANR	5677820	Argument	"r_num_math ( c -> num , words )"		5676790	1					
ANR	5677821	CallExpression	"r_num_math ( c -> num , words )"		5676790	0					
ANR	5677822	Callee	r_num_math		5676790	0					
ANR	5677823	Identifier	r_num_math		5676790	0					
ANR	5677824	ArgumentList	c -> num		5676790	1					
ANR	5677825	Argument	c -> num		5676790	0					
ANR	5677826	PtrMemberAccess	c -> num		5676790	0					
ANR	5677827	Identifier	c		5676790	0					
ANR	5677828	Identifier	num		5676790	1					
ANR	5677829	Argument	words		5676790	1					
ANR	5677830	Identifier	words		5676790	0					
ANR	5677831	Argument	UT64_MAX		5676790	2					
ANR	5677832	Identifier	UT64_MAX		5676790	0					
ANR	5677833	Argument	R_ANAL_REF_TYPE_NULL		5676790	3					
ANR	5677834	Identifier	R_ANAL_REF_TYPE_NULL		5676790	0					
ANR	5677835	Argument	depth		5676790	4					
ANR	5677836	Identifier	depth		5676790	0					
ANR	5677837	ExpressionStatement	"r_core_anal_fcn ( c2 , r_num_math ( c2 -> num , words ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"	1015:4:25839:25932	5676790	1	True				
ANR	5677838	CallExpression	"r_core_anal_fcn ( c2 , r_num_math ( c2 -> num , words ) , UT64_MAX , R_ANAL_REF_TYPE_NULL , depth )"		5676790	0					
ANR	5677839	Callee	r_core_anal_fcn		5676790	0					
ANR	5677840	Identifier	r_core_anal_fcn		5676790	0					
ANR	5677841	ArgumentList	c2		5676790	1					
ANR	5677842	Argument	c2		5676790	0					
ANR	5677843	Identifier	c2		5676790	0					
ANR	5677844	Argument	"r_num_math ( c2 -> num , words )"		5676790	1					
ANR	5677845	CallExpression	"r_num_math ( c2 -> num , words )"		5676790	0					
ANR	5677846	Callee	r_num_math		5676790	0					
ANR	5677847	Identifier	r_num_math		5676790	0					
ANR	5677848	ArgumentList	c2 -> num		5676790	1					
ANR	5677849	Argument	c2 -> num		5676790	0					
ANR	5677850	PtrMemberAccess	c2 -> num		5676790	0					
ANR	5677851	Identifier	c2		5676790	0					
ANR	5677852	Identifier	num		5676790	1					
ANR	5677853	Argument	words		5676790	1					
ANR	5677854	Identifier	words		5676790	0					
ANR	5677855	Argument	UT64_MAX		5676790	2					
ANR	5677856	Identifier	UT64_MAX		5676790	0					
ANR	5677857	Argument	R_ANAL_REF_TYPE_NULL		5676790	3					
ANR	5677858	Identifier	R_ANAL_REF_TYPE_NULL		5676790	0					
ANR	5677859	Argument	depth		5676790	4					
ANR	5677860	Identifier	depth		5676790	0					
ANR	5677861	ExpressionStatement	"r_core_gdiff ( c , c2 )"	1017:4:25938:25958	5676790	2	True				
ANR	5677862	CallExpression	"r_core_gdiff ( c , c2 )"		5676790	0					
ANR	5677863	Callee	r_core_gdiff		5676790	0					
ANR	5677864	Identifier	r_core_gdiff		5676790	0					
ANR	5677865	ArgumentList	c		5676790	1					
ANR	5677866	Argument	c		5676790	0					
ANR	5677867	Identifier	c		5676790	0					
ANR	5677868	Argument	c2		5676790	1					
ANR	5677869	Identifier	c2		5676790	0					
ANR	5677870	ExpressionStatement	"__print_diff_graph ( c , r_num_math ( c -> num , addr ) , gmode )"	1018:4:25964:26020	5676790	3	True				
ANR	5677871	CallExpression	"__print_diff_graph ( c , r_num_math ( c -> num , addr ) , gmode )"		5676790	0					
ANR	5677872	Callee	__print_diff_graph		5676790	0					
ANR	5677873	Identifier	__print_diff_graph		5676790	0					
ANR	5677874	ArgumentList	c		5676790	1					
ANR	5677875	Argument	c		5676790	0					
ANR	5677876	Identifier	c		5676790	0					
ANR	5677877	Argument	"r_num_math ( c -> num , addr )"		5676790	1					
ANR	5677878	CallExpression	"r_num_math ( c -> num , addr )"		5676790	0					
ANR	5677879	Callee	r_num_math		5676790	0					
ANR	5677880	Identifier	r_num_math		5676790	0					
ANR	5677881	ArgumentList	c -> num		5676790	1					
ANR	5677882	Argument	c -> num		5676790	0					
ANR	5677883	PtrMemberAccess	c -> num		5676790	0					
ANR	5677884	Identifier	c		5676790	0					
ANR	5677885	Identifier	num		5676790	1					
ANR	5677886	Argument	addr		5676790	1					
ANR	5677887	Identifier	addr		5676790	0					
ANR	5677888	Argument	gmode		5676790	2					
ANR	5677889	Identifier	gmode		5676790	0					
ANR	5677890	ExpressionStatement	free ( words )	1020:3:26030:26042	5676790	5	True				
ANR	5677891	CallExpression	free ( words )		5676790	0					
ANR	5677892	Callee	free		5676790	0					
ANR	5677893	Identifier	free		5676790	0					
ANR	5677894	ArgumentList	words		5676790	1					
ANR	5677895	Argument	words		5676790	0					
ANR	5677896	Identifier	words		5676790	0					
ANR	5677897	ElseStatement	else		5676790	0					
ANR	5677898	IfStatement	if ( mode == MODE_CODE )		5676790	0					
ANR	5677899	Condition	mode == MODE_CODE	1021:13:26057:26073	5676790	0	True				
ANR	5677900	EqualityExpression	mode == MODE_CODE		5676790	0		==			
ANR	5677901	Identifier	mode		5676790	0					
ANR	5677902	Identifier	MODE_CODE		5676790	1					
ANR	5677903	CompoundStatement		216:32:5319:5319	5676790	1					
ANR	5677904	IfStatement	if ( zignatures )		5676790	0					
ANR	5677905	Condition	zignatures	1022:7:26085:26094	5676790	0	True				
ANR	5677906	Identifier	zignatures		5676790	0					
ANR	5677907	CompoundStatement		217:19:5340:5340	5676790	1					
ANR	5677908	ExpressionStatement	"r_core_cmd0 ( c , ""z~?"" )"	1023:4:26103:26125	5676790	0	True				
ANR	5677909	CallExpression	"r_core_cmd0 ( c , ""z~?"" )"		5676790	0					
ANR	5677910	Callee	r_core_cmd0		5676790	0					
ANR	5677911	Identifier	r_core_cmd0		5676790	0					
ANR	5677912	ArgumentList	c		5676790	1					
ANR	5677913	Argument	c		5676790	0					
ANR	5677914	Identifier	c		5676790	0					
ANR	5677915	Argument	"""z~?"""		5676790	1					
ANR	5677916	PrimaryExpression	"""z~?"""		5676790	0					
ANR	5677917	ExpressionStatement	"r_core_cmd0 ( c2 , ""z~?"" )"	1024:4:26131:26154	5676790	1	True				
ANR	5677918	CallExpression	"r_core_cmd0 ( c2 , ""z~?"" )"		5676790	0					
ANR	5677919	Callee	r_core_cmd0		5676790	0					
ANR	5677920	Identifier	r_core_cmd0		5676790	0					
ANR	5677921	ArgumentList	c2		5676790	1					
ANR	5677922	Argument	c2		5676790	0					
ANR	5677923	Identifier	c2		5676790	0					
ANR	5677924	Argument	"""z~?"""		5676790	1					
ANR	5677925	PrimaryExpression	"""z~?"""		5676790	0					
ANR	5677926	ExpressionStatement	"r_core_zdiff ( c , c2 )"	1025:4:26160:26180	5676790	2	True				
ANR	5677927	CallExpression	"r_core_zdiff ( c , c2 )"		5676790	0					
ANR	5677928	Callee	r_core_zdiff		5676790	0					
ANR	5677929	Identifier	r_core_zdiff		5676790	0					
ANR	5677930	ArgumentList	c		5676790	1					
ANR	5677931	Argument	c		5676790	0					
ANR	5677932	Identifier	c		5676790	0					
ANR	5677933	Argument	c2		5676790	1					
ANR	5677934	Identifier	c2		5676790	0					
ANR	5677935	ElseStatement	else		5676790	0					
ANR	5677936	CompoundStatement		221:10:5435:5435	5676790	0					
ANR	5677937	ExpressionStatement	"r_core_gdiff ( c , c2 )"	1027:4:26198:26218	5676790	0	True				
ANR	5677938	CallExpression	"r_core_gdiff ( c , c2 )"		5676790	0					
ANR	5677939	Callee	r_core_gdiff		5676790	0					
ANR	5677940	Identifier	r_core_gdiff		5676790	0					
ANR	5677941	ArgumentList	c		5676790	1					
ANR	5677942	Argument	c		5676790	0					
ANR	5677943	Identifier	c		5676790	0					
ANR	5677944	Argument	c2		5676790	1					
ANR	5677945	Identifier	c2		5676790	0					
ANR	5677946	ExpressionStatement	"r_core_diff_show ( c , c2 )"	1028:4:26224:26248	5676790	1	True				
ANR	5677947	CallExpression	"r_core_diff_show ( c , c2 )"		5676790	0					
ANR	5677948	Callee	r_core_diff_show		5676790	0					
ANR	5677949	Identifier	r_core_diff_show		5676790	0					
ANR	5677950	ArgumentList	c		5676790	1					
ANR	5677951	Argument	c		5676790	0					
ANR	5677952	Identifier	c		5676790	0					
ANR	5677953	Argument	c2		5676790	1					
ANR	5677954	Identifier	c2		5676790	0					
ANR	5677955	ElseStatement	else		5676790	0					
ANR	5677956	IfStatement	if ( mode == MODE_DIFF_IMPORTS )		5676790	0					
ANR	5677957	Condition	mode == MODE_DIFF_IMPORTS	1030:13:26268:26292	5676790	0	True				
ANR	5677958	EqualityExpression	mode == MODE_DIFF_IMPORTS		5676790	0		==			
ANR	5677959	Identifier	mode		5676790	0					
ANR	5677960	Identifier	MODE_DIFF_IMPORTS		5676790	1					
ANR	5677961	CompoundStatement		225:40:5538:5538	5676790	1					
ANR	5677962	ExpressionStatement	"bufa = get_imports ( c , & sza )"	1031:3:26300:26328	5676790	0	True				
ANR	5677963	AssignmentExpression	"bufa = get_imports ( c , & sza )"		5676790	0		=			
ANR	5677964	Identifier	bufa		5676790	0					
ANR	5677965	CallExpression	"get_imports ( c , & sza )"		5676790	1					
ANR	5677966	Callee	get_imports		5676790	0					
ANR	5677967	Identifier	get_imports		5676790	0					
ANR	5677968	ArgumentList	c		5676790	1					
ANR	5677969	Argument	c		5676790	0					
ANR	5677970	Identifier	c		5676790	0					
ANR	5677971	Argument	& sza		5676790	1					
ANR	5677972	UnaryOperationExpression	& sza		5676790	0					
ANR	5677973	UnaryOperator	&		5676790	0					
ANR	5677974	Identifier	sza		5676790	1					
ANR	5677975	ExpressionStatement	"bufb = get_imports ( c2 , & szb )"	1032:3:26333:26362	5676790	1	True				
ANR	5677976	AssignmentExpression	"bufb = get_imports ( c2 , & szb )"		5676790	0		=			
ANR	5677977	Identifier	bufb		5676790	0					
ANR	5677978	CallExpression	"get_imports ( c2 , & szb )"		5676790	1					
ANR	5677979	Callee	get_imports		5676790	0					
ANR	5677980	Identifier	get_imports		5676790	0					
ANR	5677981	ArgumentList	c2		5676790	1					
ANR	5677982	Argument	c2		5676790	0					
ANR	5677983	Identifier	c2		5676790	0					
ANR	5677984	Argument	& szb		5676790	1					
ANR	5677985	UnaryOperationExpression	& szb		5676790	0					
ANR	5677986	UnaryOperator	&		5676790	0					
ANR	5677987	Identifier	szb		5676790	1					
ANR	5677988	ElseStatement	else		5676790	0					
ANR	5677989	IfStatement	if ( mode == MODE_DIFF_STRS )		5676790	0					
ANR	5677990	Condition	mode == MODE_DIFF_STRS	1033:13:26377:26398	5676790	0	True				
ANR	5677991	EqualityExpression	mode == MODE_DIFF_STRS		5676790	0		==			
ANR	5677992	Identifier	mode		5676790	0					
ANR	5677993	Identifier	MODE_DIFF_STRS		5676790	1					
ANR	5677994	CompoundStatement		228:37:5644:5644	5676790	1					
ANR	5677995	ExpressionStatement	"bufa = get_strings ( c , & sza )"	1034:3:26406:26434	5676790	0	True				
ANR	5677996	AssignmentExpression	"bufa = get_strings ( c , & sza )"		5676790	0		=			
ANR	5677997	Identifier	bufa		5676790	0					
ANR	5677998	CallExpression	"get_strings ( c , & sza )"		5676790	1					
ANR	5677999	Callee	get_strings		5676790	0					
ANR	5678000	Identifier	get_strings		5676790	0					
ANR	5678001	ArgumentList	c		5676790	1					
ANR	5678002	Argument	c		5676790	0					
ANR	5678003	Identifier	c		5676790	0					
ANR	5678004	Argument	& sza		5676790	1					
ANR	5678005	UnaryOperationExpression	& sza		5676790	0					
ANR	5678006	UnaryOperator	&		5676790	0					
ANR	5678007	Identifier	sza		5676790	1					
ANR	5678008	ExpressionStatement	"bufb = get_strings ( c2 , & szb )"	1035:3:26439:26468	5676790	1	True				
ANR	5678009	AssignmentExpression	"bufb = get_strings ( c2 , & szb )"		5676790	0		=			
ANR	5678010	Identifier	bufb		5676790	0					
ANR	5678011	CallExpression	"get_strings ( c2 , & szb )"		5676790	1					
ANR	5678012	Callee	get_strings		5676790	0					
ANR	5678013	Identifier	get_strings		5676790	0					
ANR	5678014	ArgumentList	c2		5676790	1					
ANR	5678015	Argument	c2		5676790	0					
ANR	5678016	Identifier	c2		5676790	0					
ANR	5678017	Argument	& szb		5676790	1					
ANR	5678018	UnaryOperationExpression	& szb		5676790	0					
ANR	5678019	UnaryOperator	&		5676790	0					
ANR	5678020	Identifier	szb		5676790	1					
ANR	5678021	IfStatement	if ( mode == MODE_CODE || mode == MODE_GRAPH )		5676790	18					
ANR	5678022	Condition	mode == MODE_CODE || mode == MODE_GRAPH	1037:6:26480:26518	5676790	0	True				
ANR	5678023	OrExpression	mode == MODE_CODE || mode == MODE_GRAPH		5676790	0		||			
ANR	5678024	EqualityExpression	mode == MODE_CODE		5676790	0		==			
ANR	5678025	Identifier	mode		5676790	0					
ANR	5678026	Identifier	MODE_CODE		5676790	1					
ANR	5678027	EqualityExpression	mode == MODE_GRAPH		5676790	1		==			
ANR	5678028	Identifier	mode		5676790	0					
ANR	5678029	Identifier	MODE_GRAPH		5676790	1					
ANR	5678030	CompoundStatement		232:47:5764:5764	5676790	1					
ANR	5678031	ExpressionStatement	r_cons_flush ( )	1038:3:26526:26541	5676790	0	True				
ANR	5678032	CallExpression	r_cons_flush ( )		5676790	0					
ANR	5678033	Callee	r_cons_flush		5676790	0					
ANR	5678034	Identifier	r_cons_flush		5676790	0					
ANR	5678035	ArgumentList			5676790	1					
ANR	5678036	ExpressionStatement	r_core_free ( c )	1040:2:26549:26564	5676790	19	True				
ANR	5678037	CallExpression	r_core_free ( c )		5676790	0					
ANR	5678038	Callee	r_core_free		5676790	0					
ANR	5678039	Identifier	r_core_free		5676790	0					
ANR	5678040	ArgumentList	c		5676790	1					
ANR	5678041	Argument	c		5676790	0					
ANR	5678042	Identifier	c		5676790	0					
ANR	5678043	ExpressionStatement	r_core_free ( c2 )	1041:2:26568:26584	5676790	20	True				
ANR	5678044	CallExpression	r_core_free ( c2 )		5676790	0					
ANR	5678045	Callee	r_core_free		5676790	0					
ANR	5678046	Identifier	r_core_free		5676790	0					
ANR	5678047	ArgumentList	c2		5676790	1					
ANR	5678048	Argument	c2		5676790	0					
ANR	5678049	Identifier	c2		5676790	0					
ANR	5678050	IfStatement	if ( mode == MODE_CODE || mode == MODE_GRAPH )		5676790	21					
ANR	5678051	Condition	mode == MODE_CODE || mode == MODE_GRAPH	1043:6:26593:26631	5676790	0	True				
ANR	5678052	OrExpression	mode == MODE_CODE || mode == MODE_GRAPH		5676790	0		||			
ANR	5678053	EqualityExpression	mode == MODE_CODE		5676790	0		==			
ANR	5678054	Identifier	mode		5676790	0					
ANR	5678055	Identifier	MODE_CODE		5676790	1					
ANR	5678056	EqualityExpression	mode == MODE_GRAPH		5676790	1		==			
ANR	5678057	Identifier	mode		5676790	0					
ANR	5678058	Identifier	MODE_GRAPH		5676790	1					
ANR	5678059	CompoundStatement		238:47:5877:5877	5676790	1					
ANR	5678060	ReturnStatement	return 0 ;	1044:3:26639:26647	5676790	0	True				
ANR	5678061	PrimaryExpression	0		5676790	0					
ANR	5678062	BreakStatement	break ;	1046:2:26655:26660	5676790	22	True				
ANR	5678063	Label	default :	1047:1:26663:26670	5676790	23	True				
ANR	5678064	Identifier	default		5676790	0					
ANR	5678065	ExpressionStatement	"bufa = slurp ( & c , file , & sza )"	1048:2:26674:26703	5676790	24	True				
ANR	5678066	AssignmentExpression	"bufa = slurp ( & c , file , & sza )"		5676790	0		=			
ANR	5678067	Identifier	bufa		5676790	0					
ANR	5678068	CallExpression	"slurp ( & c , file , & sza )"		5676790	1					
ANR	5678069	Callee	slurp		5676790	0					
ANR	5678070	Identifier	slurp		5676790	0					
ANR	5678071	ArgumentList	& c		5676790	1					
ANR	5678072	Argument	& c		5676790	0					
ANR	5678073	UnaryOperationExpression	& c		5676790	0					
ANR	5678074	UnaryOperator	&		5676790	0					
ANR	5678075	Identifier	c		5676790	1					
ANR	5678076	Argument	file		5676790	1					
ANR	5678077	Identifier	file		5676790	0					
ANR	5678078	Argument	& sza		5676790	2					
ANR	5678079	UnaryOperationExpression	& sza		5676790	0					
ANR	5678080	UnaryOperator	&		5676790	0					
ANR	5678081	Identifier	sza		5676790	1					
ANR	5678082	IfStatement	if ( ! bufa )		5676790	25					
ANR	5678083	Condition	! bufa	1049:6:26711:26715	5676790	0	True				
ANR	5678084	UnaryOperationExpression	! bufa		5676790	0					
ANR	5678085	UnaryOperator	!		5676790	0					
ANR	5678086	Identifier	bufa		5676790	1					
ANR	5678087	CompoundStatement		244:13:5961:5961	5676790	1					
ANR	5678088	ExpressionStatement	"eprintf ( ""radiff2: Cannot open %s\\n"" , r_str_get ( file ) )"	1050:3:26723:26778	5676790	0	True				
ANR	5678089	CallExpression	"eprintf ( ""radiff2: Cannot open %s\\n"" , r_str_get ( file ) )"		5676790	0					
ANR	5678090	Callee	eprintf		5676790	0					
ANR	5678091	Identifier	eprintf		5676790	0					
ANR	5678092	ArgumentList	"""radiff2: Cannot open %s\\n"""		5676790	1					
ANR	5678093	Argument	"""radiff2: Cannot open %s\\n"""		5676790	0					
ANR	5678094	PrimaryExpression	"""radiff2: Cannot open %s\\n"""		5676790	0					
ANR	5678095	Argument	r_str_get ( file )		5676790	1					
ANR	5678096	CallExpression	r_str_get ( file )		5676790	0					
ANR	5678097	Callee	r_str_get		5676790	0					
ANR	5678098	Identifier	r_str_get		5676790	0					
ANR	5678099	ArgumentList	file		5676790	1					
ANR	5678100	Argument	file		5676790	0					
ANR	5678101	Identifier	file		5676790	0					
ANR	5678102	ReturnStatement	return 1 ;	1051:3:26783:26791	5676790	1	True				
ANR	5678103	PrimaryExpression	1		5676790	0					
ANR	5678104	ExpressionStatement	"bufb = slurp ( & c , file2 , & szb )"	1053:2:26799:26829	5676790	26	True				
ANR	5678105	AssignmentExpression	"bufb = slurp ( & c , file2 , & szb )"		5676790	0		=			
ANR	5678106	Identifier	bufb		5676790	0					
ANR	5678107	CallExpression	"slurp ( & c , file2 , & szb )"		5676790	1					
ANR	5678108	Callee	slurp		5676790	0					
ANR	5678109	Identifier	slurp		5676790	0					
ANR	5678110	ArgumentList	& c		5676790	1					
ANR	5678111	Argument	& c		5676790	0					
ANR	5678112	UnaryOperationExpression	& c		5676790	0					
ANR	5678113	UnaryOperator	&		5676790	0					
ANR	5678114	Identifier	c		5676790	1					
ANR	5678115	Argument	file2		5676790	1					
ANR	5678116	Identifier	file2		5676790	0					
ANR	5678117	Argument	& szb		5676790	2					
ANR	5678118	UnaryOperationExpression	& szb		5676790	0					
ANR	5678119	UnaryOperator	&		5676790	0					
ANR	5678120	Identifier	szb		5676790	1					
ANR	5678121	IfStatement	if ( ! bufb )		5676790	27					
ANR	5678122	Condition	! bufb	1054:6:26837:26841	5676790	0	True				
ANR	5678123	UnaryOperationExpression	! bufb		5676790	0					
ANR	5678124	UnaryOperator	!		5676790	0					
ANR	5678125	Identifier	bufb		5676790	1					
ANR	5678126	CompoundStatement		249:13:6087:6087	5676790	1					
ANR	5678127	ExpressionStatement	"eprintf ( ""radiff2: Cannot open: %s\\n"" , r_str_get ( file2 ) )"	1055:3:26849:26906	5676790	0	True				
ANR	5678128	CallExpression	"eprintf ( ""radiff2: Cannot open: %s\\n"" , r_str_get ( file2 ) )"		5676790	0					
ANR	5678129	Callee	eprintf		5676790	0					
ANR	5678130	Identifier	eprintf		5676790	0					
ANR	5678131	ArgumentList	"""radiff2: Cannot open: %s\\n"""		5676790	1					
ANR	5678132	Argument	"""radiff2: Cannot open: %s\\n"""		5676790	0					
ANR	5678133	PrimaryExpression	"""radiff2: Cannot open: %s\\n"""		5676790	0					
ANR	5678134	Argument	r_str_get ( file2 )		5676790	1					
ANR	5678135	CallExpression	r_str_get ( file2 )		5676790	0					
ANR	5678136	Callee	r_str_get		5676790	0					
ANR	5678137	Identifier	r_str_get		5676790	0					
ANR	5678138	ArgumentList	file2		5676790	1					
ANR	5678139	Argument	file2		5676790	0					
ANR	5678140	Identifier	file2		5676790	0					
ANR	5678141	ExpressionStatement	free ( bufa )	1056:3:26911:26922	5676790	1	True				
ANR	5678142	CallExpression	free ( bufa )		5676790	0					
ANR	5678143	Callee	free		5676790	0					
ANR	5678144	Identifier	free		5676790	0					
ANR	5678145	ArgumentList	bufa		5676790	1					
ANR	5678146	Argument	bufa		5676790	0					
ANR	5678147	Identifier	bufa		5676790	0					
ANR	5678148	ReturnStatement	return 1 ;	1057:3:26927:26935	5676790	2	True				
ANR	5678149	PrimaryExpression	1		5676790	0					
ANR	5678150	IfStatement	if ( sza != szb )		5676790	28					
ANR	5678151	Condition	sza != szb	1059:6:26947:26956	5676790	0	True				
ANR	5678152	EqualityExpression	sza != szb		5676790	0		!=			
ANR	5678153	Identifier	sza		5676790	0					
ANR	5678154	Identifier	szb		5676790	1					
ANR	5678155	CompoundStatement		254:18:6202:6202	5676790	1					
ANR	5678156	ExpressionStatement	"eprintf ( ""File size differs %d vs %d\\n"" , sza , szb )"	1060:3:26964:27014	5676790	0	True				
ANR	5678157	CallExpression	"eprintf ( ""File size differs %d vs %d\\n"" , sza , szb )"		5676790	0					
ANR	5678158	Callee	eprintf		5676790	0					
ANR	5678159	Identifier	eprintf		5676790	0					
ANR	5678160	ArgumentList	"""File size differs %d vs %d\\n"""		5676790	1					
ANR	5678161	Argument	"""File size differs %d vs %d\\n"""		5676790	0					
ANR	5678162	PrimaryExpression	"""File size differs %d vs %d\\n"""		5676790	0					
ANR	5678163	Argument	sza		5676790	1					
ANR	5678164	Identifier	sza		5676790	0					
ANR	5678165	Argument	szb		5676790	2					
ANR	5678166	Identifier	szb		5676790	0					
ANR	5678167	BreakStatement	break ;	1062:2:27022:27027	5676790	29	True				
ANR	5678168	ExpressionStatement	( void ) r_cons_new ( )	1066:1:27055:27074	5676790	17	True				
ANR	5678169	CastExpression	( void ) r_cons_new ( )		5676790	0					
ANR	5678170	CastTarget	void		5676790	0					
ANR	5678171	CallExpression	r_cons_new ( )		5676790	1					
ANR	5678172	Callee	r_cons_new		5676790	0					
ANR	5678173	Identifier	r_cons_new		5676790	0					
ANR	5678174	ArgumentList			5676790	1					
ANR	5678175	SwitchStatement	switch ( mode )		5676790	18					
ANR	5678176	Condition	mode	1068:9:27086:27089	5676790	0	True				
ANR	5678177	Identifier	mode		5676790	0					
ANR	5678178	CompoundStatement		263:15:6335:6335	5676790	1					
ANR	5678179	Label	case MODE_COLS :	1069:1:27095:27109	5676790	0	True				
ANR	5678180	Identifier	MODE_COLS		5676790	0					
ANR	5678181	IfStatement	if ( ! c && ! r_list_empty ( evals ) )		5676790	1					
ANR	5678182	Condition	! c && ! r_list_empty ( evals )	1070:6:27117:27143	5676790	0	True				
ANR	5678183	AndExpression	! c && ! r_list_empty ( evals )		5676790	0		&&			
ANR	5678184	UnaryOperationExpression	! c		5676790	0					
ANR	5678185	UnaryOperator	!		5676790	0					
ANR	5678186	Identifier	c		5676790	1					
ANR	5678187	UnaryOperationExpression	! r_list_empty ( evals )		5676790	1					
ANR	5678188	UnaryOperator	!		5676790	0					
ANR	5678189	CallExpression	r_list_empty ( evals )		5676790	1					
ANR	5678190	Callee	r_list_empty		5676790	0					
ANR	5678191	Identifier	r_list_empty		5676790	0					
ANR	5678192	ArgumentList	evals		5676790	1					
ANR	5678193	Argument	evals		5676790	0					
ANR	5678194	Identifier	evals		5676790	0					
ANR	5678195	CompoundStatement		265:35:6389:6389	5676790	1					
ANR	5678196	ExpressionStatement	c = opencore ( NULL )	1071:3:27151:27170	5676790	0	True				
ANR	5678197	AssignmentExpression	c = opencore ( NULL )		5676790	0		=			
ANR	5678198	Identifier	c		5676790	0					
ANR	5678199	CallExpression	opencore ( NULL )		5676790	1					
ANR	5678200	Callee	opencore		5676790	0					
ANR	5678201	Identifier	opencore		5676790	0					
ANR	5678202	ArgumentList	NULL		5676790	1					
ANR	5678203	Argument	NULL		5676790	0					
ANR	5678204	Identifier	NULL		5676790	0					
ANR	5678205	ExpressionStatement	"dump_cols ( bufa , sza , bufb , szb , ( r_cons_get_size ( NULL ) > 112 ) ? 16 : 8 )"	1073:2:27178:27249	5676790	2	True				
ANR	5678206	CallExpression	"dump_cols ( bufa , sza , bufb , szb , ( r_cons_get_size ( NULL ) > 112 ) ? 16 : 8 )"		5676790	0					
ANR	5678207	Callee	dump_cols		5676790	0					
ANR	5678208	Identifier	dump_cols		5676790	0					
ANR	5678209	ArgumentList	bufa		5676790	1					
ANR	5678210	Argument	bufa		5676790	0					
ANR	5678211	Identifier	bufa		5676790	0					
ANR	5678212	Argument	sza		5676790	1					
ANR	5678213	Identifier	sza		5676790	0					
ANR	5678214	Argument	bufb		5676790	2					
ANR	5678215	Identifier	bufb		5676790	0					
ANR	5678216	Argument	szb		5676790	3					
ANR	5678217	Identifier	szb		5676790	0					
ANR	5678218	Argument	( r_cons_get_size ( NULL ) > 112 ) ? 16 : 8		5676790	4					
ANR	5678219	ConditionalExpression	( r_cons_get_size ( NULL ) > 112 ) ? 16 : 8		5676790	0					
ANR	5678220	Condition	r_cons_get_size ( NULL ) > 112		5676790	0					
ANR	5678221	RelationalExpression	r_cons_get_size ( NULL ) > 112		5676790	0		>			
ANR	5678222	CallExpression	r_cons_get_size ( NULL )		5676790	0					
ANR	5678223	Callee	r_cons_get_size		5676790	0					
ANR	5678224	Identifier	r_cons_get_size		5676790	0					
ANR	5678225	ArgumentList	NULL		5676790	1					
ANR	5678226	Argument	NULL		5676790	0					
ANR	5678227	Identifier	NULL		5676790	0					
ANR	5678228	PrimaryExpression	112		5676790	1					
ANR	5678229	PrimaryExpression	16		5676790	1					
ANR	5678230	PrimaryExpression	8		5676790	2					
ANR	5678231	BreakStatement	break ;	1074:2:27253:27258	5676790	3	True				
ANR	5678232	Label	case MODE_DIFF :	1075:1:27261:27275	5676790	4	True				
ANR	5678233	Identifier	MODE_DIFF		5676790	0					
ANR	5678234	Label	case MODE_DIFF_STRS :	1076:1:27278:27297	5676790	5	True				
ANR	5678235	Identifier	MODE_DIFF_STRS		5676790	0					
ANR	5678236	Label	case MODE_DIFF_IMPORTS :	1077:1:27300:27322	5676790	6	True				
ANR	5678237	Identifier	MODE_DIFF_IMPORTS		5676790	0					
ANR	5678238	ExpressionStatement	d = r_diff_new ( )	1078:2:27326:27343	5676790	7	True				
ANR	5678239	AssignmentExpression	d = r_diff_new ( )		5676790	0		=			
ANR	5678240	Identifier	d		5676790	0					
ANR	5678241	CallExpression	r_diff_new ( )		5676790	1					
ANR	5678242	Callee	r_diff_new		5676790	0					
ANR	5678243	Identifier	r_diff_new		5676790	0					
ANR	5678244	ArgumentList			5676790	1					
ANR	5678245	ExpressionStatement	"r_diff_set_delta ( d , delta )"	1079:2:27347:27374	5676790	8	True				
ANR	5678246	CallExpression	"r_diff_set_delta ( d , delta )"		5676790	0					
ANR	5678247	Callee	r_diff_set_delta		5676790	0					
ANR	5678248	Identifier	r_diff_set_delta		5676790	0					
ANR	5678249	ArgumentList	d		5676790	1					
ANR	5678250	Argument	d		5676790	0					
ANR	5678251	Identifier	d		5676790	0					
ANR	5678252	Argument	delta		5676790	1					
ANR	5678253	Identifier	delta		5676790	0					
ANR	5678254	IfStatement	if ( diffmode == 'j' )		5676790	9					
ANR	5678255	Condition	diffmode == 'j'	1080:6:27382:27396	5676790	0	True				
ANR	5678256	EqualityExpression	diffmode == 'j'		5676790	0		==			
ANR	5678257	Identifier	diffmode		5676790	0					
ANR	5678258	PrimaryExpression	'j'		5676790	1					
ANR	5678259	CompoundStatement		275:23:6642:6642	5676790	1					
ANR	5678260	ExpressionStatement	"printf ( ""{\\""files\\"":[{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""" , file , sza )"	1081:3:27404:27486	5676790	0	True				
ANR	5678261	CallExpression	"printf ( ""{\\""files\\"":[{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""" , file , sza )"		5676790	0					
ANR	5678262	Callee	printf		5676790	0					
ANR	5678263	Identifier	printf		5676790	0					
ANR	5678264	ArgumentList	"""{\\""files\\"":[{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	1					
ANR	5678265	Argument	"""{\\""files\\"":[{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	0					
ANR	5678266	PrimaryExpression	"""{\\""files\\"":[{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	0					
ANR	5678267	Argument	file		5676790	1					
ANR	5678268	Identifier	file		5676790	0					
ANR	5678269	Argument	sza		5676790	2					
ANR	5678270	Identifier	sza		5676790	0					
ANR	5678271	ExpressionStatement	"handle_sha256 ( bufa , sza )"	1082:3:27491:27516	5676790	1	True				
ANR	5678272	CallExpression	"handle_sha256 ( bufa , sza )"		5676790	0					
ANR	5678273	Callee	handle_sha256		5676790	0					
ANR	5678274	Identifier	handle_sha256		5676790	0					
ANR	5678275	ArgumentList	bufa		5676790	1					
ANR	5678276	Argument	bufa		5676790	0					
ANR	5678277	Identifier	bufa		5676790	0					
ANR	5678278	Argument	sza		5676790	1					
ANR	5678279	Identifier	sza		5676790	0					
ANR	5678280	ExpressionStatement	"printf ( ""\\""},\\n{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""" , file2 , szb )"	1083:3:27521:27598	5676790	2	True				
ANR	5678281	CallExpression	"printf ( ""\\""},\\n{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""" , file2 , szb )"		5676790	0					
ANR	5678282	Callee	printf		5676790	0					
ANR	5678283	Identifier	printf		5676790	0					
ANR	5678284	ArgumentList	"""\\""},\\n{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	1					
ANR	5678285	Argument	"""\\""},\\n{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	0					
ANR	5678286	PrimaryExpression	"""\\""},\\n{\\""filename\\"":\\""%s\\"", \\""size\\"":%d, \\""sha256\\"":\\"""""		5676790	0					
ANR	5678287	Argument	file2		5676790	1					
ANR	5678288	Identifier	file2		5676790	0					
ANR	5678289	Argument	szb		5676790	2					
ANR	5678290	Identifier	szb		5676790	0					
ANR	5678291	ExpressionStatement	"handle_sha256 ( bufb , szb )"	1084:3:27603:27628	5676790	3	True				
ANR	5678292	CallExpression	"handle_sha256 ( bufb , szb )"		5676790	0					
ANR	5678293	Callee	handle_sha256		5676790	0					
ANR	5678294	Identifier	handle_sha256		5676790	0					
ANR	5678295	ArgumentList	bufb		5676790	1					
ANR	5678296	Argument	bufb		5676790	0					
ANR	5678297	Identifier	bufb		5676790	0					
ANR	5678298	Argument	szb		5676790	1					
ANR	5678299	Identifier	szb		5676790	0					
ANR	5678300	ExpressionStatement	"printf ( ""\\""}],\\n"" )"	1085:3:27633:27651	5676790	4	True				
ANR	5678301	CallExpression	"printf ( ""\\""}],\\n"" )"		5676790	0					
ANR	5678302	Callee	printf		5676790	0					
ANR	5678303	Identifier	printf		5676790	0					
ANR	5678304	ArgumentList	"""\\""}],\\n"""		5676790	1					
ANR	5678305	Argument	"""\\""}],\\n"""		5676790	0					
ANR	5678306	PrimaryExpression	"""\\""}],\\n"""		5676790	0					
ANR	5678307	ExpressionStatement	"printf ( ""\\""changes\\"":["" )"	1086:3:27656:27680	5676790	5	True				
ANR	5678308	CallExpression	"printf ( ""\\""changes\\"":["" )"		5676790	0					
ANR	5678309	Callee	printf		5676790	0					
ANR	5678310	Identifier	printf		5676790	0					
ANR	5678311	ArgumentList	"""\\""changes\\"":["""		5676790	1					
ANR	5678312	Argument	"""\\""changes\\"":["""		5676790	0					
ANR	5678313	PrimaryExpression	"""\\""changes\\"":["""		5676790	0					
ANR	5678314	IfStatement	if ( diffmode == 'B' )		5676790	10					
ANR	5678315	Condition	diffmode == 'B'	1088:6:27692:27706	5676790	0	True				
ANR	5678316	EqualityExpression	diffmode == 'B'		5676790	0		==			
ANR	5678317	Identifier	diffmode		5676790	0					
ANR	5678318	PrimaryExpression	'B'		5676790	1					
ANR	5678319	CompoundStatement		283:23:6952:6952	5676790	1					
ANR	5678320	ExpressionStatement	"write ( 1 , ""\\xd1\\xff\\xd1\\xff"" , 4 )"	1089:3:27714:27746	5676790	0	True				
ANR	5678321	CallExpression	"write ( 1 , ""\\xd1\\xff\\xd1\\xff"" , 4 )"		5676790	0					
ANR	5678322	Callee	write		5676790	0					
ANR	5678323	Identifier	write		5676790	0					
ANR	5678324	ArgumentList	1		5676790	1					
ANR	5678325	Argument	1		5676790	0					
ANR	5678326	PrimaryExpression	1		5676790	0					
ANR	5678327	Argument	"""\\xd1\\xff\\xd1\\xff"""		5676790	1					
ANR	5678328	PrimaryExpression	"""\\xd1\\xff\\xd1\\xff"""		5676790	0					
ANR	5678329	Argument	4		5676790	2					
ANR	5678330	PrimaryExpression	4		5676790	0					
ANR	5678331	ExpressionStatement	"write ( 1 , ""\\x04"" , 1 )"	1090:3:27751:27771	5676790	1	True				
ANR	5678332	CallExpression	"write ( 1 , ""\\x04"" , 1 )"		5676790	0					
ANR	5678333	Callee	write		5676790	0					
ANR	5678334	Identifier	write		5676790	0					
ANR	5678335	ArgumentList	1		5676790	1					
ANR	5678336	Argument	1		5676790	0					
ANR	5678337	PrimaryExpression	1		5676790	0					
ANR	5678338	Argument	"""\\x04"""		5676790	1					
ANR	5678339	PrimaryExpression	"""\\x04"""		5676790	0					
ANR	5678340	Argument	1		5676790	2					
ANR	5678341	PrimaryExpression	1		5676790	0					
ANR	5678342	IfStatement	if ( diffmode == 'U' )		5676790	11					
ANR	5678343	Condition	diffmode == 'U'	1092:6:27783:27797	5676790	0	True				
ANR	5678344	EqualityExpression	diffmode == 'U'		5676790	0		==			
ANR	5678345	Identifier	diffmode		5676790	0					
ANR	5678346	PrimaryExpression	'U'		5676790	1					
ANR	5678347	CompoundStatement		288:3:7048:7109	5676790	1					
ANR	5678348	IdentifierDeclStatement	"char * res = r_diff_buffers_unified ( d , bufa , sza , bufb , szb ) ;"	1093:3:27805:27866	5676790	0	True				
ANR	5678349	IdentifierDecl	"* res = r_diff_buffers_unified ( d , bufa , sza , bufb , szb )"		5676790	0					
ANR	5678350	IdentifierDeclType	char *		5676790	0					
ANR	5678351	Identifier	res		5676790	1					
ANR	5678352	AssignmentExpression	"* res = r_diff_buffers_unified ( d , bufa , sza , bufb , szb )"		5676790	2		=			
ANR	5678353	Identifier	res		5676790	0					
ANR	5678354	CallExpression	"r_diff_buffers_unified ( d , bufa , sza , bufb , szb )"		5676790	1					
ANR	5678355	Callee	r_diff_buffers_unified		5676790	0					
ANR	5678356	Identifier	r_diff_buffers_unified		5676790	0					
ANR	5678357	ArgumentList	d		5676790	1					
ANR	5678358	Argument	d		5676790	0					
ANR	5678359	Identifier	d		5676790	0					
ANR	5678360	Argument	bufa		5676790	1					
ANR	5678361	Identifier	bufa		5676790	0					
ANR	5678362	Argument	sza		5676790	2					
ANR	5678363	Identifier	sza		5676790	0					
ANR	5678364	Argument	bufb		5676790	3					
ANR	5678365	Identifier	bufb		5676790	0					
ANR	5678366	Argument	szb		5676790	4					
ANR	5678367	Identifier	szb		5676790	0					
ANR	5678368	ExpressionStatement	"printf ( ""%s"" , res )"	1094:3:27871:27889	5676790	1	True				
ANR	5678369	CallExpression	"printf ( ""%s"" , res )"		5676790	0					
ANR	5678370	Callee	printf		5676790	0					
ANR	5678371	Identifier	printf		5676790	0					
ANR	5678372	ArgumentList	"""%s"""		5676790	1					
ANR	5678373	Argument	"""%s"""		5676790	0					
ANR	5678374	PrimaryExpression	"""%s"""		5676790	0					
ANR	5678375	Argument	res		5676790	1					
ANR	5678376	Identifier	res		5676790	0					
ANR	5678377	ExpressionStatement	free ( res )	1095:3:27894:27904	5676790	2	True				
ANR	5678378	CallExpression	free ( res )		5676790	0					
ANR	5678379	Callee	free		5676790	0					
ANR	5678380	Identifier	free		5676790	0					
ANR	5678381	ArgumentList	res		5676790	1					
ANR	5678382	Argument	res		5676790	0					
ANR	5678383	Identifier	res		5676790	0					
ANR	5678384	ElseStatement	else		5676790	0					
ANR	5678385	IfStatement	if ( diffmode == 'B' )		5676790	0					
ANR	5678386	Condition	diffmode == 'B'	1096:13:27919:27933	5676790	0	True				
ANR	5678387	EqualityExpression	diffmode == 'B'		5676790	0		==			
ANR	5678388	Identifier	diffmode		5676790	0					
ANR	5678389	PrimaryExpression	'B'		5676790	1					
ANR	5678390	CompoundStatement		291:30:7179:7179	5676790	1					
ANR	5678391	ExpressionStatement	"r_diff_set_callback ( d , & bcb , 0 )"	1097:3:27941:27973	5676790	0	True				
ANR	5678392	CallExpression	"r_diff_set_callback ( d , & bcb , 0 )"		5676790	0					
ANR	5678393	Callee	r_diff_set_callback		5676790	0					
ANR	5678394	Identifier	r_diff_set_callback		5676790	0					
ANR	5678395	ArgumentList	d		5676790	1					
ANR	5678396	Argument	d		5676790	0					
ANR	5678397	Identifier	d		5676790	0					
ANR	5678398	Argument	& bcb		5676790	1					
ANR	5678399	UnaryOperationExpression	& bcb		5676790	0					
ANR	5678400	UnaryOperator	&		5676790	0					
ANR	5678401	Identifier	bcb		5676790	1					
ANR	5678402	Argument	0		5676790	2					
ANR	5678403	PrimaryExpression	0		5676790	0					
ANR	5678404	ExpressionStatement	"r_diff_buffers ( d , bufa , sza , bufb , szb )"	1098:3:27978:28018	5676790	1	True				
ANR	5678405	CallExpression	"r_diff_buffers ( d , bufa , sza , bufb , szb )"		5676790	0					
ANR	5678406	Callee	r_diff_buffers		5676790	0					
ANR	5678407	Identifier	r_diff_buffers		5676790	0					
ANR	5678408	ArgumentList	d		5676790	1					
ANR	5678409	Argument	d		5676790	0					
ANR	5678410	Identifier	d		5676790	0					
ANR	5678411	Argument	bufa		5676790	1					
ANR	5678412	Identifier	bufa		5676790	0					
ANR	5678413	Argument	sza		5676790	2					
ANR	5678414	Identifier	sza		5676790	0					
ANR	5678415	Argument	bufb		5676790	3					
ANR	5678416	Identifier	bufb		5676790	0					
ANR	5678417	Argument	szb		5676790	4					
ANR	5678418	Identifier	szb		5676790	0					
ANR	5678419	ExpressionStatement	"write ( 1 , ""\\x00"" , 1 )"	1099:3:28023:28043	5676790	2	True				
ANR	5678420	CallExpression	"write ( 1 , ""\\x00"" , 1 )"		5676790	0					
ANR	5678421	Callee	write		5676790	0					
ANR	5678422	Identifier	write		5676790	0					
ANR	5678423	ArgumentList	1		5676790	1					
ANR	5678424	Argument	1		5676790	0					
ANR	5678425	PrimaryExpression	1		5676790	0					
ANR	5678426	Argument	"""\\x00"""		5676790	1					
ANR	5678427	PrimaryExpression	"""\\x00"""		5676790	0					
ANR	5678428	Argument	1		5676790	2					
ANR	5678429	PrimaryExpression	1		5676790	0					
ANR	5678430	ElseStatement	else		5676790	0					
ANR	5678431	CompoundStatement		295:9:7297:7297	5676790	0					
ANR	5678432	ExpressionStatement	"r_diff_set_callback ( d , & cb , 0 )"	1101:3:28059:28090	5676790	0	True				
ANR	5678433	CallExpression	"r_diff_set_callback ( d , & cb , 0 )"		5676790	0					
ANR	5678434	Callee	r_diff_set_callback		5676790	0					
ANR	5678435	Identifier	r_diff_set_callback		5676790	0					
ANR	5678436	ArgumentList	d		5676790	1					
ANR	5678437	Argument	d		5676790	0					
ANR	5678438	Identifier	d		5676790	0					
ANR	5678439	Argument	& cb		5676790	1					
ANR	5678440	UnaryOperationExpression	& cb		5676790	0					
ANR	5678441	UnaryOperator	&		5676790	0					
ANR	5678442	Identifier	cb		5676790	1					
ANR	5678443	Argument	0		5676790	2					
ANR	5678444	PrimaryExpression	0		5676790	0					
ANR	5678445	ExpressionStatement	"r_diff_buffers ( d , bufa , sza , bufb , szb )"	1102:3:28125:28165	5676790	1	True				
ANR	5678446	CallExpression	"r_diff_buffers ( d , bufa , sza , bufb , szb )"		5676790	0					
ANR	5678447	Callee	r_diff_buffers		5676790	0					
ANR	5678448	Identifier	r_diff_buffers		5676790	0					
ANR	5678449	ArgumentList	d		5676790	1					
ANR	5678450	Argument	d		5676790	0					
ANR	5678451	Identifier	d		5676790	0					
ANR	5678452	Argument	bufa		5676790	1					
ANR	5678453	Identifier	bufa		5676790	0					
ANR	5678454	Argument	sza		5676790	2					
ANR	5678455	Identifier	sza		5676790	0					
ANR	5678456	Argument	bufb		5676790	3					
ANR	5678457	Identifier	bufb		5676790	0					
ANR	5678458	Argument	szb		5676790	4					
ANR	5678459	Identifier	szb		5676790	0					
ANR	5678460	IfStatement	if ( diffmode == 'j' )		5676790	12					
ANR	5678461	Condition	diffmode == 'j'	1104:6:28177:28191	5676790	0	True				
ANR	5678462	EqualityExpression	diffmode == 'j'		5676790	0		==			
ANR	5678463	Identifier	diffmode		5676790	0					
ANR	5678464	PrimaryExpression	'j'		5676790	1					
ANR	5678465	CompoundStatement		299:23:7437:7437	5676790	1					
ANR	5678466	ExpressionStatement	"printf ( ""]\\n"" )"	1105:3:28199:28213	5676790	0	True				
ANR	5678467	CallExpression	"printf ( ""]\\n"" )"		5676790	0					
ANR	5678468	Callee	printf		5676790	0					
ANR	5678469	Identifier	printf		5676790	0					
ANR	5678470	ArgumentList	"""]\\n"""		5676790	1					
ANR	5678471	Argument	"""]\\n"""		5676790	0					
ANR	5678472	PrimaryExpression	"""]\\n"""		5676790	0					
ANR	5678473	ExpressionStatement	r_diff_free ( d )	1107:2:28221:28236	5676790	13	True				
ANR	5678474	CallExpression	r_diff_free ( d )		5676790	0					
ANR	5678475	Callee	r_diff_free		5676790	0					
ANR	5678476	Identifier	r_diff_free		5676790	0					
ANR	5678477	ArgumentList	d		5676790	1					
ANR	5678478	Argument	d		5676790	0					
ANR	5678479	Identifier	d		5676790	0					
ANR	5678480	BreakStatement	break ;	1108:2:28240:28245	5676790	14	True				
ANR	5678481	Label	case MODE_DIST :	1109:1:28248:28262	5676790	15	True				
ANR	5678482	Identifier	MODE_DIST		5676790	0					
ANR	5678483	Label	case MODE_DIST_MYERS :	1110:1:28265:28285	5676790	16	True				
ANR	5678484	Identifier	MODE_DIST_MYERS		5676790	0					
ANR	5678485	Label	case MODE_DIST_LEVENSTEIN :	1111:1:28288:28313	5676790	17	True				
ANR	5678486	Identifier	MODE_DIST_LEVENSTEIN		5676790	0					
ANR	5678487	CompoundStatement		308:3:7565:7589	5676790	18					
ANR	5678488	IdentifierDeclStatement	RDiff * d = r_diff_new ( ) ;	1113:3:28322:28346	5676790	0	True				
ANR	5678489	IdentifierDecl	* d = r_diff_new ( )		5676790	0					
ANR	5678490	IdentifierDeclType	RDiff *		5676790	0					
ANR	5678491	Identifier	d		5676790	1					
ANR	5678492	AssignmentExpression	* d = r_diff_new ( )		5676790	2		=			
ANR	5678493	Identifier	d		5676790	0					
ANR	5678494	CallExpression	r_diff_new ( )		5676790	1					
ANR	5678495	Callee	r_diff_new		5676790	0					
ANR	5678496	Identifier	r_diff_new		5676790	0					
ANR	5678497	ArgumentList			5676790	1					
ANR	5678498	IfStatement	if ( d )		5676790	1					
ANR	5678499	Condition	d	1114:7:28355:28355	5676790	0	True				
ANR	5678500	Identifier	d		5676790	0					
ANR	5678501	CompoundStatement		309:10:7601:7601	5676790	1					
ANR	5678502	ExpressionStatement	d -> verbose = verbose	1115:4:28364:28384	5676790	0	True				
ANR	5678503	AssignmentExpression	d -> verbose = verbose		5676790	0		=			
ANR	5678504	PtrMemberAccess	d -> verbose		5676790	0					
ANR	5678505	Identifier	d		5676790	0					
ANR	5678506	Identifier	verbose		5676790	1					
ANR	5678507	Identifier	verbose		5676790	1					
ANR	5678508	IfStatement	if ( mode == MODE_DIST_LEVENSTEIN )		5676790	1					
ANR	5678509	Condition	mode == MODE_DIST_LEVENSTEIN	1116:8:28394:28421	5676790	0	True				
ANR	5678510	EqualityExpression	mode == MODE_DIST_LEVENSTEIN		5676790	0		==			
ANR	5678511	Identifier	mode		5676790	0					
ANR	5678512	Identifier	MODE_DIST_LEVENSTEIN		5676790	1					
ANR	5678513	CompoundStatement		311:38:7667:7667	5676790	1					
ANR	5678514	ExpressionStatement	d -> type = 'l'	1117:5:28431:28444	5676790	0	True				
ANR	5678515	AssignmentExpression	d -> type = 'l'		5676790	0		=			
ANR	5678516	PtrMemberAccess	d -> type		5676790	0					
ANR	5678517	Identifier	d		5676790	0					
ANR	5678518	Identifier	type		5676790	1					
ANR	5678519	PrimaryExpression	'l'		5676790	1					
ANR	5678520	ElseStatement	else		5676790	0					
ANR	5678521	IfStatement	if ( mode == MODE_DIST_MYERS )		5676790	0					
ANR	5678522	Condition	mode == MODE_DIST_MYERS	1118:15:28461:28483	5676790	0	True				
ANR	5678523	EqualityExpression	mode == MODE_DIST_MYERS		5676790	0		==			
ANR	5678524	Identifier	mode		5676790	0					
ANR	5678525	Identifier	MODE_DIST_MYERS		5676790	1					
ANR	5678526	CompoundStatement		313:40:7729:7729	5676790	1					
ANR	5678527	ExpressionStatement	d -> type = 'm'	1119:5:28493:28506	5676790	0	True				
ANR	5678528	AssignmentExpression	d -> type = 'm'		5676790	0		=			
ANR	5678529	PtrMemberAccess	d -> type		5676790	0					
ANR	5678530	Identifier	d		5676790	0					
ANR	5678531	Identifier	type		5676790	1					
ANR	5678532	PrimaryExpression	'm'		5676790	1					
ANR	5678533	ElseStatement	else		5676790	0					
ANR	5678534	CompoundStatement		315:11:7762:7762	5676790	0					
ANR	5678535	ExpressionStatement	d -> type = 0	1121:5:28526:28537	5676790	0	True				
ANR	5678536	AssignmentExpression	d -> type = 0		5676790	0		=			
ANR	5678537	PtrMemberAccess	d -> type		5676790	0					
ANR	5678538	Identifier	d		5676790	0					
ANR	5678539	Identifier	type		5676790	1					
ANR	5678540	PrimaryExpression	0		5676790	1					
ANR	5678541	ExpressionStatement	"r_diff_buffers_distance ( d , bufa , sza , bufb , szb , & count , & sim )"	1123:4:28549:28612	5676790	2	True				
ANR	5678542	CallExpression	"r_diff_buffers_distance ( d , bufa , sza , bufb , szb , & count , & sim )"		5676790	0					
ANR	5678543	Callee	r_diff_buffers_distance		5676790	0					
ANR	5678544	Identifier	r_diff_buffers_distance		5676790	0					
ANR	5678545	ArgumentList	d		5676790	1					
ANR	5678546	Argument	d		5676790	0					
ANR	5678547	Identifier	d		5676790	0					
ANR	5678548	Argument	bufa		5676790	1					
ANR	5678549	Identifier	bufa		5676790	0					
ANR	5678550	Argument	sza		5676790	2					
ANR	5678551	Identifier	sza		5676790	0					
ANR	5678552	Argument	bufb		5676790	3					
ANR	5678553	Identifier	bufb		5676790	0					
ANR	5678554	Argument	szb		5676790	4					
ANR	5678555	Identifier	szb		5676790	0					
ANR	5678556	Argument	& count		5676790	5					
ANR	5678557	UnaryOperationExpression	& count		5676790	0					
ANR	5678558	UnaryOperator	&		5676790	0					
ANR	5678559	Identifier	count		5676790	1					
ANR	5678560	Argument	& sim		5676790	6					
ANR	5678561	UnaryOperationExpression	& sim		5676790	0					
ANR	5678562	UnaryOperator	&		5676790	0					
ANR	5678563	Identifier	sim		5676790	1					
ANR	5678564	ExpressionStatement	r_diff_free ( d )	1124:4:28618:28633	5676790	3	True				
ANR	5678565	CallExpression	r_diff_free ( d )		5676790	0					
ANR	5678566	Callee	r_diff_free		5676790	0					
ANR	5678567	Identifier	r_diff_free		5676790	0					
ANR	5678568	ArgumentList	d		5676790	1					
ANR	5678569	Argument	d		5676790	0					
ANR	5678570	Identifier	d		5676790	0					
ANR	5678571	ExpressionStatement	"printf ( ""similarity: %.3f\\n"" , sim )"	1127:2:28646:28680	5676790	19	True				
ANR	5678572	CallExpression	"printf ( ""similarity: %.3f\\n"" , sim )"		5676790	0					
ANR	5678573	Callee	printf		5676790	0					
ANR	5678574	Identifier	printf		5676790	0					
ANR	5678575	ArgumentList	"""similarity: %.3f\\n"""		5676790	1					
ANR	5678576	Argument	"""similarity: %.3f\\n"""		5676790	0					
ANR	5678577	PrimaryExpression	"""similarity: %.3f\\n"""		5676790	0					
ANR	5678578	Argument	sim		5676790	1					
ANR	5678579	Identifier	sim		5676790	0					
ANR	5678580	ExpressionStatement	"printf ( ""distance: %d\\n"" , count )"	1128:2:28684:28716	5676790	20	True				
ANR	5678581	CallExpression	"printf ( ""distance: %d\\n"" , count )"		5676790	0					
ANR	5678582	Callee	printf		5676790	0					
ANR	5678583	Identifier	printf		5676790	0					
ANR	5678584	ArgumentList	"""distance: %d\\n"""		5676790	1					
ANR	5678585	Argument	"""distance: %d\\n"""		5676790	0					
ANR	5678586	PrimaryExpression	"""distance: %d\\n"""		5676790	0					
ANR	5678587	Argument	count		5676790	1					
ANR	5678588	Identifier	count		5676790	0					
ANR	5678589	BreakStatement	break ;	1129:2:28720:28725	5676790	21	True				
ANR	5678590	ExpressionStatement	r_cons_free ( )	1131:1:28731:28745	5676790	19	True				
ANR	5678591	CallExpression	r_cons_free ( )		5676790	0					
ANR	5678592	Callee	r_cons_free		5676790	0					
ANR	5678593	Identifier	r_cons_free		5676790	0					
ANR	5678594	ArgumentList			5676790	1					
ANR	5678595	IfStatement	if ( diffmode == 'j' && showcount )		5676790	20					
ANR	5678596	Condition	diffmode == 'j' && showcount	1133:5:28753:28780	5676790	0	True				
ANR	5678597	AndExpression	diffmode == 'j' && showcount		5676790	0		&&			
ANR	5678598	EqualityExpression	diffmode == 'j'		5676790	0		==			
ANR	5678599	Identifier	diffmode		5676790	0					
ANR	5678600	PrimaryExpression	'j'		5676790	1					
ANR	5678601	Identifier	showcount		5676790	1					
ANR	5678602	CompoundStatement		328:35:8026:8026	5676790	1					
ANR	5678603	ExpressionStatement	"printf ( "",\\""count\\"":%d}\\n"" , count )"	1134:2:28787:28821	5676790	0	True				
ANR	5678604	CallExpression	"printf ( "",\\""count\\"":%d}\\n"" , count )"		5676790	0					
ANR	5678605	Callee	printf		5676790	0					
ANR	5678606	Identifier	printf		5676790	0					
ANR	5678607	ArgumentList	""",\\""count\\"":%d}\\n"""		5676790	1					
ANR	5678608	Argument	""",\\""count\\"":%d}\\n"""		5676790	0					
ANR	5678609	PrimaryExpression	""",\\""count\\"":%d}\\n"""		5676790	0					
ANR	5678610	Argument	count		5676790	1					
ANR	5678611	Identifier	count		5676790	0					
ANR	5678612	ElseStatement	else		5676790	0					
ANR	5678613	IfStatement	if ( showcount && diffmode != 'j' )		5676790	0					
ANR	5678614	Condition	showcount && diffmode != 'j'	1135:12:28835:28862	5676790	0	True				
ANR	5678615	AndExpression	showcount && diffmode != 'j'		5676790	0		&&			
ANR	5678616	Identifier	showcount		5676790	0					
ANR	5678617	EqualityExpression	diffmode != 'j'		5676790	1		!=			
ANR	5678618	Identifier	diffmode		5676790	0					
ANR	5678619	PrimaryExpression	'j'		5676790	1					
ANR	5678620	CompoundStatement		330:42:8108:8108	5676790	1					
ANR	5678621	ExpressionStatement	"printf ( ""%d\\n"" , count )"	1136:2:28869:28891	5676790	0	True				
ANR	5678622	CallExpression	"printf ( ""%d\\n"" , count )"		5676790	0					
ANR	5678623	Callee	printf		5676790	0					
ANR	5678624	Identifier	printf		5676790	0					
ANR	5678625	ArgumentList	"""%d\\n"""		5676790	1					
ANR	5678626	Argument	"""%d\\n"""		5676790	0					
ANR	5678627	PrimaryExpression	"""%d\\n"""		5676790	0					
ANR	5678628	Argument	count		5676790	1					
ANR	5678629	Identifier	count		5676790	0					
ANR	5678630	ElseStatement	else		5676790	0					
ANR	5678631	IfStatement	if ( ! showcount && diffmode == 'j' )		5676790	0					
ANR	5678632	Condition	! showcount && diffmode == 'j'	1137:12:28905:28933	5676790	0	True				
ANR	5678633	AndExpression	! showcount && diffmode == 'j'		5676790	0		&&			
ANR	5678634	UnaryOperationExpression	! showcount		5676790	0					
ANR	5678635	UnaryOperator	!		5676790	0					
ANR	5678636	Identifier	showcount		5676790	1					
ANR	5678637	EqualityExpression	diffmode == 'j'		5676790	1		==			
ANR	5678638	Identifier	diffmode		5676790	0					
ANR	5678639	PrimaryExpression	'j'		5676790	1					
ANR	5678640	CompoundStatement		332:43:8179:8179	5676790	1					
ANR	5678641	ExpressionStatement	"printf ( ""}\\n"" )"	1138:2:28940:28954	5676790	0	True				
ANR	5678642	CallExpression	"printf ( ""}\\n"" )"		5676790	0					
ANR	5678643	Callee	printf		5676790	0					
ANR	5678644	Identifier	printf		5676790	0					
ANR	5678645	ArgumentList	"""}\\n"""		5676790	1					
ANR	5678646	Argument	"""}\\n"""		5676790	0					
ANR	5678647	PrimaryExpression	"""}\\n"""		5676790	0					
ANR	5678648	ExpressionStatement	free ( bufa )	1140:1:28960:28971	5676790	21	True				
ANR	5678649	CallExpression	free ( bufa )		5676790	0					
ANR	5678650	Callee	free		5676790	0					
ANR	5678651	Identifier	free		5676790	0					
ANR	5678652	ArgumentList	bufa		5676790	1					
ANR	5678653	Argument	bufa		5676790	0					
ANR	5678654	Identifier	bufa		5676790	0					
ANR	5678655	ExpressionStatement	free ( bufb )	1141:1:28974:28985	5676790	22	True				
ANR	5678656	CallExpression	free ( bufb )		5676790	0					
ANR	5678657	Callee	free		5676790	0					
ANR	5678658	Identifier	free		5676790	0					
ANR	5678659	ArgumentList	bufb		5676790	1					
ANR	5678660	Argument	bufb		5676790	0					
ANR	5678661	Identifier	bufb		5676790	0					
ANR	5678662	ReturnStatement	return 0 ;	1143:1:28989:28997	5676790	23	True				
ANR	5678663	PrimaryExpression	0		5676790	0					
ANR	5678664	ReturnType	R_API int		5676790	1					
ANR	5678665	Identifier	r_main_radiff2		5676790	2					
ANR	5678666	ParameterList	"int argc , char * * argv"		5676790	3					
ANR	5678667	Parameter	int argc	806:25:20733:20740	5676790	0	True				
ANR	5678668	ParameterType	int		5676790	0					
ANR	5678669	Identifier	argc		5676790	1					
ANR	5678670	Parameter	char * * argv	806:35:20743:20753	5676790	1	True				
ANR	5678671	ParameterType	char * *		5676790	0					
ANR	5678672	Identifier	argv		5676790	1					
ANR	5678673	CFGEntryNode	ENTRY		5676790		True				
ANR	5678674	CFGExitNode	EXIT		5676790		True				
ANR	5678675	Symbol	GRAPH_JSON_DIS_MODE		5676790						
ANR	5678676	Symbol	COLOR_MODE_DISABLED		5676790						
ANR	5678677	Symbol	delta		5676790						
ANR	5678678	Symbol	R_ANAL_REF_TYPE_NULL		5676790						
ANR	5678679	Symbol	MODE_DIFF_IMPORTS		5676790						
ANR	5678680	Symbol	addrb		5676790						
ANR	5678681	Symbol	addra		5676790						
ANR	5678682	Symbol	tmp		5676790						
ANR	5678683	Symbol	opencore		5676790						
ANR	5678684	Symbol	anal_all		5676790						
ANR	5678685	Symbol	c -> config		5676790						
ANR	5678686	Symbol	zignatures		5676790						
ANR	5678687	Symbol	r_list_newf		5676790						
ANR	5678688	Symbol	bits		5676790						
ANR	5678689	Symbol	c2 -> anal		5676790						
ANR	5678690	Symbol	r_diff_buffers_unified		5676790						
ANR	5678691	Symbol	c2		5676790						
ANR	5678692	Symbol	r_getopt		5676790						
ANR	5678693	Symbol	r_config_get_i		5676790						
ANR	5678694	Symbol	r_optind		5676790						
ANR	5678695	Symbol	r_list_empty		5676790						
ANR	5678696	Symbol	c -> c2		5676790						
ANR	5678697	Symbol	GRAPH_SDB_MODE		5676790						
ANR	5678698	Symbol	* tmp		5676790						
ANR	5678699	Symbol	GRAPH_JSON_MODE		5676790						
ANR	5678700	Symbol	GRAPH_DOT_MODE		5676790						
ANR	5678701	Symbol	MODE_DIST_MYERS		5676790						
ANR	5678702	Symbol	file		5676790						
ANR	5678703	Symbol	gmode		5676790						
ANR	5678704	Symbol	MODE_CODE		5676790						
ANR	5678705	Symbol	quiet		5676790						
ANR	5678706	Symbol	MODE_COLS		5676790						
ANR	5678707	Symbol	bufa		5676790						
ANR	5678708	Symbol	atoi		5676790						
ANR	5678709	Symbol	& bcb		5676790						
ANR	5678710	Symbol	bufb		5676790						
ANR	5678711	Symbol	c		5676790						
ANR	5678712	Symbol	d		5676790						
ANR	5678713	Symbol	diffops		5676790						
ANR	5678714	Symbol	words		5676790						
ANR	5678715	Symbol	diffmode		5676790						
ANR	5678716	Symbol	off		5676790						
ANR	5678717	Symbol	o		5676790						
ANR	5678718	Symbol	verbose		5676790						
ANR	5678719	Symbol	MODE_DIFF		5676790						
ANR	5678720	Symbol	depth		5676790						
ANR	5678721	Symbol	arch		5676790						
ANR	5678722	Symbol	& cb		5676790						
ANR	5678723	Symbol	threshold		5676790						
ANR	5678724	Symbol	* argv		5676790						
ANR	5678725	Symbol	GRAPH_STAR_MODE		5676790						
ANR	5678726	Symbol	disasm		5676790						
ANR	5678727	Symbol	second		5676790						
ANR	5678728	Symbol	mode		5676790						
ANR	5678729	Symbol	evals		5676790						
ANR	5678730	Symbol	MODE_DIST		5676790						
ANR	5678731	Symbol	strlen		5676790						
ANR	5678732	Symbol	d -> type		5676790						
ANR	5678733	Symbol	columnSort		5676790						
ANR	5678734	Symbol	r_str_get		5676790						
ANR	5678735	Symbol	res		5676790						
ANR	5678736	Symbol	NULL		5676790						
ANR	5678737	Symbol	r_cons_get_size		5676790						
ANR	5678738	Symbol	MODE_DIFF_STRS		5676790						
ANR	5678739	Symbol	GRAPH_INTERACTIVE_MODE		5676790						
ANR	5678740	Symbol	count		5676790						
ANR	5678741	Symbol	MODE_GRAPH		5676790						
ANR	5678742	Symbol	r_optarg		5676790						
ANR	5678743	Symbol	strstr		5676790						
ANR	5678744	Symbol	true		5676790						
ANR	5678745	Symbol	c -> anal		5676790						
ANR	5678746	Symbol	c2 -> config		5676790						
ANR	5678747	Symbol	& szb		5676790						
ANR	5678748	Symbol	r_diff_new		5676790						
ANR	5678749	Symbol	d -> verbose		5676790						
ANR	5678750	Symbol	& sza		5676790						
ANR	5678751	Symbol	show_help		5676790						
ANR	5678752	Symbol	argv		5676790						
ANR	5678753	Symbol	r_num_math		5676790						
ANR	5678754	Symbol	GRAPH_GML_MODE		5676790						
ANR	5678755	Symbol	useva		5676790						
ANR	5678756	Symbol	c2 -> num		5676790						
ANR	5678757	Symbol	sim		5676790						
ANR	5678758	Symbol	get_imports		5676790						
ANR	5678759	Symbol	szb		5676790						
ANR	5678760	Symbol	sza		5676790						
ANR	5678761	Symbol	addr		5676790						
ANR	5678762	Symbol	UT64_MAX		5676790						
ANR	5678763	Symbol	argc		5676790						
ANR	5678764	Symbol	* second ++		5676790						
ANR	5678765	Symbol	runcmd		5676790						
ANR	5678766	Symbol	GRAPH_DEFAULT_MODE		5676790						
ANR	5678767	Symbol	false		5676790						
ANR	5678768	Symbol	& c		5676790						
ANR	5678769	Symbol	c -> num		5676790						
ANR	5678770	Symbol	* c		5676790						
ANR	5678771	Symbol	pdc		5676790						
ANR	5678772	Symbol	* d		5676790						
ANR	5678773	Symbol	r_main_version_print		5676790						
ANR	5678774	Symbol	c2 -> c2		5676790						
ANR	5678775	Symbol	showcount		5676790						
ANR	5678776	Symbol	* r_optind		5676790						
ANR	5678777	Symbol	* c2		5676790						
ANR	5678778	Symbol	file2		5676790						
ANR	5678779	Symbol	& count		5676790						
ANR	5678780	Symbol	& sim		5676790						
ANR	5678781	Symbol	showbare		5676790						
ANR	5678782	Symbol	MODE_DIST_LEVENSTEIN		5676790						
ANR	5678783	Symbol	strdup		5676790						
ANR	5678784	Symbol	slurp		5676790						
ANR	5678785	Symbol	GRAPH_TINY_MODE		5676790						
ANR	5678786	Symbol	get_strings		5676790						
