command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	864676	File	data/converged/CVE-2019-16718~_radare2/cmd_api.c								
ANR	864677	DeclStmt									
ANR	864678	Decl							int	int	value
ANR	864679	Function	r_cmd_alias_init	15:0:272:394							
ANR	864680	FunctionDef	r_cmd_alias_init (RCmd * cmd)		864679	0					
ANR	864681	CompoundStatement		15:39:311:394	864679	0					
ANR	864682	ExpressionStatement	cmd -> aliases . count = 0	16:1:314:336	864679	0	True				
ANR	864683	AssignmentExpression	cmd -> aliases . count = 0		864679	0		=			
ANR	864684	MemberAccess	cmd -> aliases . count		864679	0					
ANR	864685	PtrMemberAccess	cmd -> aliases		864679	0					
ANR	864686	Identifier	cmd		864679	0					
ANR	864687	Identifier	aliases		864679	1					
ANR	864688	Identifier	count		864679	1					
ANR	864689	PrimaryExpression	0		864679	1					
ANR	864690	ExpressionStatement	cmd -> aliases . keys = NULL	17:1:339:363	864679	1	True				
ANR	864691	AssignmentExpression	cmd -> aliases . keys = NULL		864679	0		=			
ANR	864692	MemberAccess	cmd -> aliases . keys		864679	0					
ANR	864693	PtrMemberAccess	cmd -> aliases		864679	0					
ANR	864694	Identifier	cmd		864679	0					
ANR	864695	Identifier	aliases		864679	1					
ANR	864696	Identifier	keys		864679	1					
ANR	864697	Identifier	NULL		864679	1					
ANR	864698	ExpressionStatement	cmd -> aliases . values = NULL	18:1:366:392	864679	2	True				
ANR	864699	AssignmentExpression	cmd -> aliases . values = NULL		864679	0		=			
ANR	864700	MemberAccess	cmd -> aliases . values		864679	0					
ANR	864701	PtrMemberAccess	cmd -> aliases		864679	0					
ANR	864702	Identifier	cmd		864679	0					
ANR	864703	Identifier	aliases		864679	1					
ANR	864704	Identifier	values		864679	1					
ANR	864705	Identifier	NULL		864679	1					
ANR	864706	ReturnType	R_API void		864679	1					
ANR	864707	Identifier	r_cmd_alias_init		864679	2					
ANR	864708	ParameterList	RCmd * cmd		864679	3					
ANR	864709	Parameter	RCmd * cmd	15:28:300:308	864679	0	True				
ANR	864710	ParameterType	RCmd *		864679	0					
ANR	864711	Identifier	cmd		864679	1					
ANR	864712	CFGEntryNode	ENTRY		864679		True				
ANR	864713	CFGExitNode	EXIT		864679		True				
ANR	864714	Symbol	NULL		864679						
ANR	864715	Symbol	cmd -> aliases . count		864679						
ANR	864716	Symbol	cmd -> aliases . values		864679						
ANR	864717	Symbol	cmd -> aliases . keys		864679						
ANR	864718	Symbol	cmd		864679						
ANR	864719	Symbol	* cmd		864679						
ANR	864720	Symbol	cmd -> aliases		864679						
ANR	864721	Function	r_cmd_new	21:0:397:713							
ANR	864722	FunctionDef	r_cmd_new ()		864721	0					
ANR	864723	CompoundStatement		21:25:422:713	864721	0					
ANR	864724	IdentifierDeclStatement	int i ;	22:1:425:430	864721	0	True				
ANR	864725	IdentifierDecl	i		864721	0					
ANR	864726	IdentifierDeclType	int		864721	0					
ANR	864727	Identifier	i		864721	1					
ANR	864728	IdentifierDeclStatement	RCmd * cmd = R_NEW0 ( RCmd ) ;	23:1:433:458	864721	1	True				
ANR	864729	IdentifierDecl	* cmd = R_NEW0 ( RCmd )		864721	0					
ANR	864730	IdentifierDeclType	RCmd *		864721	0					
ANR	864731	Identifier	cmd		864721	1					
ANR	864732	AssignmentExpression	* cmd = R_NEW0 ( RCmd )		864721	2		=			
ANR	864733	Identifier	cmd		864721	0					
ANR	864734	CallExpression	R_NEW0 ( RCmd )		864721	1					
ANR	864735	Callee	R_NEW0		864721	0					
ANR	864736	Identifier	R_NEW0		864721	0					
ANR	864737	ArgumentList	RCmd		864721	1					
ANR	864738	Argument	RCmd		864721	0					
ANR	864739	Identifier	RCmd		864721	0					
ANR	864740	IfStatement	if ( ! cmd )		864721	2					
ANR	864741	Condition	! cmd	24:5:465:468	864721	0	True				
ANR	864742	UnaryOperationExpression	! cmd		864721	0					
ANR	864743	UnaryOperator	!		864721	0					
ANR	864744	Identifier	cmd		864721	1					
ANR	864745	CompoundStatement		4:11:48:48	864721	1					
ANR	864746	ReturnStatement	return cmd ;	25:2:475:485	864721	0	True				
ANR	864747	Identifier	cmd		864721	0					
ANR	864748	ExpressionStatement	cmd -> lcmds = r_list_new ( )	27:1:491:517	864721	3	True				
ANR	864749	AssignmentExpression	cmd -> lcmds = r_list_new ( )		864721	0		=			
ANR	864750	PtrMemberAccess	cmd -> lcmds		864721	0					
ANR	864751	Identifier	cmd		864721	0					
ANR	864752	Identifier	lcmds		864721	1					
ANR	864753	CallExpression	r_list_new ( )		864721	1					
ANR	864754	Callee	r_list_new		864721	0					
ANR	864755	Identifier	r_list_new		864721	0					
ANR	864756	ArgumentList			864721	1					
ANR	864757	ForStatement	for ( i = 0 ; i < NCMDS ; i ++ )		864721	4					
ANR	864758	ForInit	i = 0 ;	28:6:525:530	864721	0	True				
ANR	864759	AssignmentExpression	i = 0		864721	0		=			
ANR	864760	Identifier	i		864721	0					
ANR	864761	PrimaryExpression	0		864721	1					
ANR	864762	Condition	i < NCMDS	28:13:532:540	864721	1	True				
ANR	864763	RelationalExpression	i < NCMDS		864721	0		<			
ANR	864764	Identifier	i		864721	0					
ANR	864765	Identifier	NCMDS		864721	1					
ANR	864766	PostIncDecOperationExpression	i ++	28:24:543:545	864721	2	True				
ANR	864767	Identifier	i		864721	0					
ANR	864768	IncDec	++		864721	1					
ANR	864769	CompoundStatement		8:29:125:125	864721	3					
ANR	864770	ExpressionStatement	cmd -> cmds [ i ] = NULL	29:2:552:571	864721	0	True				
ANR	864771	AssignmentExpression	cmd -> cmds [ i ] = NULL		864721	0		=			
ANR	864772	ArrayIndexing	cmd -> cmds [ i ]		864721	0					
ANR	864773	PtrMemberAccess	cmd -> cmds		864721	0					
ANR	864774	Identifier	cmd		864721	0					
ANR	864775	Identifier	cmds		864721	1					
ANR	864776	Identifier	i		864721	1					
ANR	864777	Identifier	NULL		864721	1					
ANR	864778	ExpressionStatement	cmd -> nullcallback = cmd -> data = NULL	31:1:577:613	864721	5	True				
ANR	864779	AssignmentExpression	cmd -> nullcallback = cmd -> data = NULL		864721	0		=			
ANR	864780	PtrMemberAccess	cmd -> nullcallback		864721	0					
ANR	864781	Identifier	cmd		864721	0					
ANR	864782	Identifier	nullcallback		864721	1					
ANR	864783	AssignmentExpression	cmd -> data = NULL		864721	1		=			
ANR	864784	PtrMemberAccess	cmd -> data		864721	0					
ANR	864785	Identifier	cmd		864721	0					
ANR	864786	Identifier	data		864721	1					
ANR	864787	Identifier	NULL		864721	1					
ANR	864788	ExpressionStatement	r_core_plugin_init ( cmd )	32:1:616:640	864721	6	True				
ANR	864789	CallExpression	r_core_plugin_init ( cmd )		864721	0					
ANR	864790	Callee	r_core_plugin_init		864721	0					
ANR	864791	Identifier	r_core_plugin_init		864721	0					
ANR	864792	ArgumentList	cmd		864721	1					
ANR	864793	Argument	cmd		864721	0					
ANR	864794	Identifier	cmd		864721	0					
ANR	864795	ExpressionStatement	r_cmd_macro_init ( & cmd -> macro )	33:1:643:673	864721	7	True				
ANR	864796	CallExpression	r_cmd_macro_init ( & cmd -> macro )		864721	0					
ANR	864797	Callee	r_cmd_macro_init		864721	0					
ANR	864798	Identifier	r_cmd_macro_init		864721	0					
ANR	864799	ArgumentList	& cmd -> macro		864721	1					
ANR	864800	Argument	& cmd -> macro		864721	0					
ANR	864801	UnaryOperationExpression	& cmd -> macro		864721	0					
ANR	864802	UnaryOperator	&		864721	0					
ANR	864803	PtrMemberAccess	cmd -> macro		864721	1					
ANR	864804	Identifier	cmd		864721	0					
ANR	864805	Identifier	macro		864721	1					
ANR	864806	ExpressionStatement	r_cmd_alias_init ( cmd )	34:1:676:698	864721	8	True				
ANR	864807	CallExpression	r_cmd_alias_init ( cmd )		864721	0					
ANR	864808	Callee	r_cmd_alias_init		864721	0					
ANR	864809	Identifier	r_cmd_alias_init		864721	0					
ANR	864810	ArgumentList	cmd		864721	1					
ANR	864811	Argument	cmd		864721	0					
ANR	864812	Identifier	cmd		864721	0					
ANR	864813	ReturnStatement	return cmd ;	35:1:701:711	864721	9	True				
ANR	864814	Identifier	cmd		864721	0					
ANR	864815	ReturnType	R_API RCmd *		864721	1					
ANR	864816	Identifier	r_cmd_new		864721	2					
ANR	864817	ParameterList			864721	3					
ANR	864818	CFGEntryNode	ENTRY		864721		True				
ANR	864819	CFGExitNode	EXIT		864721		True				
ANR	864820	Symbol	& cmd -> macro		864721						
ANR	864821	Symbol	NULL		864721						
ANR	864822	Symbol	cmd -> nullcallback		864721						
ANR	864823	Symbol	i		864721						
ANR	864824	Symbol	NCMDS		864721						
ANR	864825	Symbol	* cmd -> cmds		864721						
ANR	864826	Symbol	RCmd		864721						
ANR	864827	Symbol	* * cmd		864721						
ANR	864828	Symbol	cmd -> cmds		864721						
ANR	864829	Symbol	R_NEW0		864721						
ANR	864830	Symbol	* i		864721						
ANR	864831	Symbol	cmd -> lcmds		864721						
ANR	864832	Symbol	cmd		864721						
ANR	864833	Symbol	* cmd		864721						
ANR	864834	Symbol	cmd -> data		864721						
ANR	864835	Symbol	r_list_new		864721						
ANR	864836	Function	r_cmd_free	38:0:716:1075							
ANR	864837	FunctionDef	r_cmd_free (RCmd * cmd)		864836	0					
ANR	864838	CompoundStatement		38:34:750:1075	864836	0					
ANR	864839	IdentifierDeclStatement	int i ;	39:1:753:758	864836	0	True				
ANR	864840	IdentifierDecl	i		864836	0					
ANR	864841	IdentifierDeclType	int		864836	0					
ANR	864842	Identifier	i		864836	1					
ANR	864843	IfStatement	if ( ! cmd )		864836	1					
ANR	864844	Condition	! cmd	40:5:765:768	864836	0	True				
ANR	864845	UnaryOperationExpression	! cmd		864836	0					
ANR	864846	UnaryOperator	!		864836	0					
ANR	864847	Identifier	cmd		864836	1					
ANR	864848	CompoundStatement		3:11:20:20	864836	1					
ANR	864849	ReturnStatement	return NULL ;	41:2:775:786	864836	0	True				
ANR	864850	Identifier	NULL		864836	0					
ANR	864851	ExpressionStatement	r_cmd_alias_free ( cmd )	43:1:792:814	864836	2	True				
ANR	864852	CallExpression	r_cmd_alias_free ( cmd )		864836	0					
ANR	864853	Callee	r_cmd_alias_free		864836	0					
ANR	864854	Identifier	r_cmd_alias_free		864836	0					
ANR	864855	ArgumentList	cmd		864836	1					
ANR	864856	Argument	cmd		864836	0					
ANR	864857	Identifier	cmd		864836	0					
ANR	864858	ExpressionStatement	r_cmd_macro_fini ( & cmd -> macro )	44:1:817:847	864836	3	True				
ANR	864859	CallExpression	r_cmd_macro_fini ( & cmd -> macro )		864836	0					
ANR	864860	Callee	r_cmd_macro_fini		864836	0					
ANR	864861	Identifier	r_cmd_macro_fini		864836	0					
ANR	864862	ArgumentList	& cmd -> macro		864836	1					
ANR	864863	Argument	& cmd -> macro		864836	0					
ANR	864864	UnaryOperationExpression	& cmd -> macro		864836	0					
ANR	864865	UnaryOperator	&		864836	0					
ANR	864866	PtrMemberAccess	cmd -> macro		864836	1					
ANR	864867	Identifier	cmd		864836	0					
ANR	864868	Identifier	macro		864836	1					
ANR	864869	ExpressionStatement	r_core_plugin_fini ( cmd )	46:1:882:906	864836	4	True				
ANR	864870	CallExpression	r_core_plugin_fini ( cmd )		864836	0					
ANR	864871	Callee	r_core_plugin_fini		864836	0					
ANR	864872	Identifier	r_core_plugin_fini		864836	0					
ANR	864873	ArgumentList	cmd		864836	1					
ANR	864874	Argument	cmd		864836	0					
ANR	864875	Identifier	cmd		864836	0					
ANR	864876	ExpressionStatement	r_list_free ( cmd -> plist )	47:1:909:933	864836	5	True				
ANR	864877	CallExpression	r_list_free ( cmd -> plist )		864836	0					
ANR	864878	Callee	r_list_free		864836	0					
ANR	864879	Identifier	r_list_free		864836	0					
ANR	864880	ArgumentList	cmd -> plist		864836	1					
ANR	864881	Argument	cmd -> plist		864836	0					
ANR	864882	PtrMemberAccess	cmd -> plist		864836	0					
ANR	864883	Identifier	cmd		864836	0					
ANR	864884	Identifier	plist		864836	1					
ANR	864885	ExpressionStatement	r_list_free ( cmd -> lcmds )	48:1:936:960	864836	6	True				
ANR	864886	CallExpression	r_list_free ( cmd -> lcmds )		864836	0					
ANR	864887	Callee	r_list_free		864836	0					
ANR	864888	Identifier	r_list_free		864836	0					
ANR	864889	ArgumentList	cmd -> lcmds		864836	1					
ANR	864890	Argument	cmd -> lcmds		864836	0					
ANR	864891	PtrMemberAccess	cmd -> lcmds		864836	0					
ANR	864892	Identifier	cmd		864836	0					
ANR	864893	Identifier	lcmds		864836	1					
ANR	864894	ForStatement	for ( i = 0 ; i < NCMDS ; i ++ )		864836	7					
ANR	864895	ForInit	i = 0 ;	49:6:968:973	864836	0	True				
ANR	864896	AssignmentExpression	i = 0		864836	0		=			
ANR	864897	Identifier	i		864836	0					
ANR	864898	PrimaryExpression	0		864836	1					
ANR	864899	Condition	i < NCMDS	49:13:975:983	864836	1	True				
ANR	864900	RelationalExpression	i < NCMDS		864836	0		<			
ANR	864901	Identifier	i		864836	0					
ANR	864902	Identifier	NCMDS		864836	1					
ANR	864903	PostIncDecOperationExpression	i ++	49:24:986:988	864836	2	True				
ANR	864904	Identifier	i		864836	0					
ANR	864905	IncDec	++		864836	1					
ANR	864906	CompoundStatement		12:29:240:240	864836	3					
ANR	864907	IfStatement	if ( cmd -> cmds [ i ] )		864836	0					
ANR	864908	Condition	cmd -> cmds [ i ]	50:6:999:1010	864836	0	True				
ANR	864909	ArrayIndexing	cmd -> cmds [ i ]		864836	0					
ANR	864910	PtrMemberAccess	cmd -> cmds		864836	0					
ANR	864911	Identifier	cmd		864836	0					
ANR	864912	Identifier	cmds		864836	1					
ANR	864913	Identifier	i		864836	1					
ANR	864914	CompoundStatement		13:20:262:262	864836	1					
ANR	864915	ExpressionStatement	R_FREE ( cmd -> cmds [ i ] )	51:3:1018:1039	864836	0	True				
ANR	864916	CallExpression	R_FREE ( cmd -> cmds [ i ] )		864836	0					
ANR	864917	Callee	R_FREE		864836	0					
ANR	864918	Identifier	R_FREE		864836	0					
ANR	864919	ArgumentList	cmd -> cmds [ i ]		864836	1					
ANR	864920	Argument	cmd -> cmds [ i ]		864836	0					
ANR	864921	ArrayIndexing	cmd -> cmds [ i ]		864836	0					
ANR	864922	PtrMemberAccess	cmd -> cmds		864836	0					
ANR	864923	Identifier	cmd		864836	0					
ANR	864924	Identifier	cmds		864836	1					
ANR	864925	Identifier	i		864836	1					
ANR	864926	ExpressionStatement	free ( cmd )	54:1:1049:1059	864836	8	True				
ANR	864927	CallExpression	free ( cmd )		864836	0					
ANR	864928	Callee	free		864836	0					
ANR	864929	Identifier	free		864836	0					
ANR	864930	ArgumentList	cmd		864836	1					
ANR	864931	Argument	cmd		864836	0					
ANR	864932	Identifier	cmd		864836	0					
ANR	864933	ReturnStatement	return NULL ;	55:1:1062:1073	864836	9	True				
ANR	864934	Identifier	NULL		864836	0					
ANR	864935	ReturnType	R_API RCmd *		864836	1					
ANR	864936	Identifier	r_cmd_free		864836	2					
ANR	864937	ParameterList	RCmd * cmd		864836	3					
ANR	864938	Parameter	RCmd * cmd	38:23:739:747	864836	0	True				
ANR	864939	ParameterType	RCmd *		864836	0					
ANR	864940	Identifier	cmd		864836	1					
ANR	864941	CFGEntryNode	ENTRY		864836		True				
ANR	864942	CFGExitNode	EXIT		864836		True				
ANR	864943	Symbol	& cmd -> macro		864836						
ANR	864944	Symbol	NULL		864836						
ANR	864945	Symbol	* i		864836						
ANR	864946	Symbol	cmd -> plist		864836						
ANR	864947	Symbol	cmd -> lcmds		864836						
ANR	864948	Symbol	i		864836						
ANR	864949	Symbol	cmd		864836						
ANR	864950	Symbol	* cmd		864836						
ANR	864951	Symbol	NCMDS		864836						
ANR	864952	Symbol	* cmd -> cmds		864836						
ANR	864953	Symbol	* * cmd		864836						
ANR	864954	Symbol	cmd -> cmds		864836						
ANR	864955	Function	r_cmd_alias_keys	58:0:1078:1199							
ANR	864956	FunctionDef	"r_cmd_alias_keys (RCmd * cmd , int * sz)"		864955	0					
ANR	864957	CompoundStatement		58:50:1128:1199	864955	0					
ANR	864958	IfStatement	if ( sz )		864955	0					
ANR	864959	Condition	sz	59:5:1135:1136	864955	0	True				
ANR	864960	Identifier	sz		864955	0					
ANR	864961	CompoundStatement		2:9:10:10	864955	1					
ANR	864962	ExpressionStatement	* sz = cmd -> aliases . count	60:2:1143:1167	864955	0	True				
ANR	864963	AssignmentExpression	* sz = cmd -> aliases . count		864955	0		=			
ANR	864964	UnaryOperationExpression	* sz		864955	0					
ANR	864965	UnaryOperator	*		864955	0					
ANR	864966	Identifier	sz		864955	1					
ANR	864967	MemberAccess	cmd -> aliases . count		864955	1					
ANR	864968	PtrMemberAccess	cmd -> aliases		864955	0					
ANR	864969	Identifier	cmd		864955	0					
ANR	864970	Identifier	aliases		864955	1					
ANR	864971	Identifier	count		864955	1					
ANR	864972	ReturnStatement	return cmd -> aliases . keys ;	62:1:1173:1197	864955	1	True				
ANR	864973	MemberAccess	cmd -> aliases . keys		864955	0					
ANR	864974	PtrMemberAccess	cmd -> aliases		864955	0					
ANR	864975	Identifier	cmd		864955	0					
ANR	864976	Identifier	aliases		864955	1					
ANR	864977	Identifier	keys		864955	1					
ANR	864978	ReturnType	R_API char * *		864955	1					
ANR	864979	Identifier	r_cmd_alias_keys		864955	2					
ANR	864980	ParameterList	"RCmd * cmd , int * sz"		864955	3					
ANR	864981	Parameter	RCmd * cmd	58:30:1108:1116	864955	0	True				
ANR	864982	ParameterType	RCmd *		864955	0					
ANR	864983	Identifier	cmd		864955	1					
ANR	864984	Parameter	int * sz	58:41:1119:1125	864955	1	True				
ANR	864985	ParameterType	int *		864955	0					
ANR	864986	Identifier	sz		864955	1					
ANR	864987	CFGEntryNode	ENTRY		864955		True				
ANR	864988	CFGExitNode	EXIT		864955		True				
ANR	864989	Symbol	sz		864955						
ANR	864990	Symbol	cmd -> aliases . count		864955						
ANR	864991	Symbol	cmd -> aliases . keys		864955						
ANR	864992	Symbol	cmd		864955						
ANR	864993	Symbol	* cmd		864955						
ANR	864994	Symbol	cmd -> aliases		864955						
ANR	864995	Symbol	* sz		864955						
ANR	864996	Function	r_cmd_alias_free	65:0:1202:1485							
ANR	864997	FunctionDef	r_cmd_alias_free (RCmd * cmd)		864996	0					
ANR	864998	CompoundStatement		65:40:1242:1485	864996	0					
ANR	864999	IdentifierDeclStatement	int i ;	66:1:1245:1250	864996	0	True				
ANR	865000	IdentifierDecl	i		864996	0					
ANR	865001	IdentifierDeclType	int		864996	0					
ANR	865002	Identifier	i		864996	1					
ANR	865003	ForStatement	for ( i = 0 ; i < cmd -> aliases . count ; i ++ )		864996	1					
ANR	865004	ForInit	i = 0 ;	67:6:1266:1271	864996	0	True				
ANR	865005	AssignmentExpression	i = 0		864996	0		=			
ANR	865006	Identifier	i		864996	0					
ANR	865007	PrimaryExpression	0		864996	1					
ANR	865008	Condition	i < cmd -> aliases . count	67:13:1273:1294	864996	1	True				
ANR	865009	RelationalExpression	i < cmd -> aliases . count		864996	0		<			
ANR	865010	Identifier	i		864996	0					
ANR	865011	MemberAccess	cmd -> aliases . count		864996	1					
ANR	865012	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865013	Identifier	cmd		864996	0					
ANR	865014	Identifier	aliases		864996	1					
ANR	865015	Identifier	count		864996	1					
ANR	865016	PostIncDecOperationExpression	i ++	67:37:1297:1299	864996	2	True				
ANR	865017	Identifier	i		864996	0					
ANR	865018	IncDec	++		864996	1					
ANR	865019	CompoundStatement		3:42:59:59	864996	3					
ANR	865020	ExpressionStatement	free ( cmd -> aliases . keys [ i ] )	68:2:1306:1333	864996	0	True				
ANR	865021	CallExpression	free ( cmd -> aliases . keys [ i ] )		864996	0					
ANR	865022	Callee	free		864996	0					
ANR	865023	Identifier	free		864996	0					
ANR	865024	ArgumentList	cmd -> aliases . keys [ i ]		864996	1					
ANR	865025	Argument	cmd -> aliases . keys [ i ]		864996	0					
ANR	865026	ArrayIndexing	cmd -> aliases . keys [ i ]		864996	0					
ANR	865027	MemberAccess	cmd -> aliases . keys		864996	0					
ANR	865028	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865029	Identifier	cmd		864996	0					
ANR	865030	Identifier	aliases		864996	1					
ANR	865031	Identifier	keys		864996	1					
ANR	865032	Identifier	i		864996	1					
ANR	865033	ExpressionStatement	free ( cmd -> aliases . values [ i ] )	69:2:1337:1366	864996	1	True				
ANR	865034	CallExpression	free ( cmd -> aliases . values [ i ] )		864996	0					
ANR	865035	Callee	free		864996	0					
ANR	865036	Identifier	free		864996	0					
ANR	865037	ArgumentList	cmd -> aliases . values [ i ]		864996	1					
ANR	865038	Argument	cmd -> aliases . values [ i ]		864996	0					
ANR	865039	ArrayIndexing	cmd -> aliases . values [ i ]		864996	0					
ANR	865040	MemberAccess	cmd -> aliases . values		864996	0					
ANR	865041	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865042	Identifier	cmd		864996	0					
ANR	865043	Identifier	aliases		864996	1					
ANR	865044	Identifier	values		864996	1					
ANR	865045	Identifier	i		864996	1					
ANR	865046	ExpressionStatement	cmd -> aliases . count = 0	71:1:1372:1394	864996	2	True				
ANR	865047	AssignmentExpression	cmd -> aliases . count = 0		864996	0		=			
ANR	865048	MemberAccess	cmd -> aliases . count		864996	0					
ANR	865049	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865050	Identifier	cmd		864996	0					
ANR	865051	Identifier	aliases		864996	1					
ANR	865052	Identifier	count		864996	1					
ANR	865053	PrimaryExpression	0		864996	1					
ANR	865054	ExpressionStatement	R_FREE ( cmd -> aliases . keys )	72:1:1397:1423	864996	3	True				
ANR	865055	CallExpression	R_FREE ( cmd -> aliases . keys )		864996	0					
ANR	865056	Callee	R_FREE		864996	0					
ANR	865057	Identifier	R_FREE		864996	0					
ANR	865058	ArgumentList	cmd -> aliases . keys		864996	1					
ANR	865059	Argument	cmd -> aliases . keys		864996	0					
ANR	865060	MemberAccess	cmd -> aliases . keys		864996	0					
ANR	865061	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865062	Identifier	cmd		864996	0					
ANR	865063	Identifier	aliases		864996	1					
ANR	865064	Identifier	keys		864996	1					
ANR	865065	ExpressionStatement	R_FREE ( cmd -> aliases . values )	73:1:1426:1454	864996	4	True				
ANR	865066	CallExpression	R_FREE ( cmd -> aliases . values )		864996	0					
ANR	865067	Callee	R_FREE		864996	0					
ANR	865068	Identifier	R_FREE		864996	0					
ANR	865069	ArgumentList	cmd -> aliases . values		864996	1					
ANR	865070	Argument	cmd -> aliases . values		864996	0					
ANR	865071	MemberAccess	cmd -> aliases . values		864996	0					
ANR	865072	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865073	Identifier	cmd		864996	0					
ANR	865074	Identifier	aliases		864996	1					
ANR	865075	Identifier	values		864996	1					
ANR	865076	ExpressionStatement	free ( cmd -> aliases . remote )	74:1:1457:1483	864996	5	True				
ANR	865077	CallExpression	free ( cmd -> aliases . remote )		864996	0					
ANR	865078	Callee	free		864996	0					
ANR	865079	Identifier	free		864996	0					
ANR	865080	ArgumentList	cmd -> aliases . remote		864996	1					
ANR	865081	Argument	cmd -> aliases . remote		864996	0					
ANR	865082	MemberAccess	cmd -> aliases . remote		864996	0					
ANR	865083	PtrMemberAccess	cmd -> aliases		864996	0					
ANR	865084	Identifier	cmd		864996	0					
ANR	865085	Identifier	aliases		864996	1					
ANR	865086	Identifier	remote		864996	1					
ANR	865087	ReturnType	R_API void		864996	1					
ANR	865088	Identifier	r_cmd_alias_free		864996	2					
ANR	865089	ParameterList	RCmd * cmd		864996	3					
ANR	865090	Parameter	RCmd * cmd	65:29:1231:1239	864996	0	True				
ANR	865091	ParameterType	RCmd *		864996	0					
ANR	865092	Identifier	cmd		864996	1					
ANR	865093	CFGEntryNode	ENTRY		864996		True				
ANR	865094	CFGExitNode	EXIT		864996		True				
ANR	865095	Symbol	i		864996						
ANR	865096	Symbol	cmd -> aliases . count		864996						
ANR	865097	Symbol	* cmd -> aliases . values		864996						
ANR	865098	Symbol	* * cmd		864996						
ANR	865099	Symbol	* cmd -> aliases		864996						
ANR	865100	Symbol	cmd -> aliases . remote		864996						
ANR	865101	Symbol	* i		864996						
ANR	865102	Symbol	cmd -> aliases . values		864996						
ANR	865103	Symbol	cmd -> aliases . keys		864996						
ANR	865104	Symbol	cmd		864996						
ANR	865105	Symbol	* cmd		864996						
ANR	865106	Symbol	cmd -> aliases		864996						
ANR	865107	Symbol	* cmd -> aliases . keys		864996						
ANR	865108	Function	r_cmd_alias_del	77:0:1488:2197							
ANR	865109	FunctionDef	"r_cmd_alias_del (RCmd * cmd , const char * k)"		865108	0					
ANR	865110	CompoundStatement		77:54:1542:2197	865108	0					
ANR	865111	IdentifierDeclStatement	int i ;	78:1:1545:1550	865108	0	True				
ANR	865112	IdentifierDecl	i		865108	0					
ANR	865113	IdentifierDeclType	int		865108	0					
ANR	865114	Identifier	i		865108	1					
ANR	865115	ForStatement	for ( i = 0 ; i < cmd -> aliases . count ; i ++ )		865108	1					
ANR	865116	ForInit	i = 0 ;	79:6:1566:1571	865108	0	True				
ANR	865117	AssignmentExpression	i = 0		865108	0		=			
ANR	865118	Identifier	i		865108	0					
ANR	865119	PrimaryExpression	0		865108	1					
ANR	865120	Condition	i < cmd -> aliases . count	79:13:1573:1594	865108	1	True				
ANR	865121	RelationalExpression	i < cmd -> aliases . count		865108	0		<			
ANR	865122	Identifier	i		865108	0					
ANR	865123	MemberAccess	cmd -> aliases . count		865108	1					
ANR	865124	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865125	Identifier	cmd		865108	0					
ANR	865126	Identifier	aliases		865108	1					
ANR	865127	Identifier	count		865108	1					
ANR	865128	PostIncDecOperationExpression	i ++	79:37:1597:1599	865108	2	True				
ANR	865129	Identifier	i		865108	0					
ANR	865130	IncDec	++		865108	1					
ANR	865131	CompoundStatement		3:42:59:59	865108	3					
ANR	865132	IfStatement	"if ( ! k || ! strcmp ( k , cmd -> aliases . keys [ i ] ) )"		865108	0					
ANR	865133	Condition	"! k || ! strcmp ( k , cmd -> aliases . keys [ i ] )"	80:6:1610:1648	865108	0	True				
ANR	865134	OrExpression	"! k || ! strcmp ( k , cmd -> aliases . keys [ i ] )"		865108	0		||			
ANR	865135	UnaryOperationExpression	! k		865108	0					
ANR	865136	UnaryOperator	!		865108	0					
ANR	865137	Identifier	k		865108	1					
ANR	865138	UnaryOperationExpression	"! strcmp ( k , cmd -> aliases . keys [ i ] )"		865108	1					
ANR	865139	UnaryOperator	!		865108	0					
ANR	865140	CallExpression	"strcmp ( k , cmd -> aliases . keys [ i ] )"		865108	1					
ANR	865141	Callee	strcmp		865108	0					
ANR	865142	Identifier	strcmp		865108	0					
ANR	865143	ArgumentList	k		865108	1					
ANR	865144	Argument	k		865108	0					
ANR	865145	Identifier	k		865108	0					
ANR	865146	Argument	cmd -> aliases . keys [ i ]		865108	1					
ANR	865147	ArrayIndexing	cmd -> aliases . keys [ i ]		865108	0					
ANR	865148	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865149	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865150	Identifier	cmd		865108	0					
ANR	865151	Identifier	aliases		865108	1					
ANR	865152	Identifier	keys		865108	1					
ANR	865153	Identifier	i		865108	1					
ANR	865154	CompoundStatement		4:47:108:108	865108	1					
ANR	865155	ExpressionStatement	R_FREE ( cmd -> aliases . values [ i ] )	81:3:1656:1687	865108	0	True				
ANR	865156	CallExpression	R_FREE ( cmd -> aliases . values [ i ] )		865108	0					
ANR	865157	Callee	R_FREE		865108	0					
ANR	865158	Identifier	R_FREE		865108	0					
ANR	865159	ArgumentList	cmd -> aliases . values [ i ]		865108	1					
ANR	865160	Argument	cmd -> aliases . values [ i ]		865108	0					
ANR	865161	ArrayIndexing	cmd -> aliases . values [ i ]		865108	0					
ANR	865162	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865163	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865164	Identifier	cmd		865108	0					
ANR	865165	Identifier	aliases		865108	1					
ANR	865166	Identifier	values		865108	1					
ANR	865167	Identifier	i		865108	1					
ANR	865168	ExpressionStatement	cmd -> aliases . count --	82:3:1692:1712	865108	1	True				
ANR	865169	PostIncDecOperationExpression	cmd -> aliases . count --		865108	0					
ANR	865170	MemberAccess	cmd -> aliases . count		865108	0					
ANR	865171	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865172	Identifier	cmd		865108	0					
ANR	865173	Identifier	aliases		865108	1					
ANR	865174	Identifier	count		865108	1					
ANR	865175	IncDec	--		865108	1					
ANR	865176	IfStatement	if ( cmd -> aliases . count > 0 )		865108	2					
ANR	865177	Condition	cmd -> aliases . count > 0	83:7:1721:1742	865108	0	True				
ANR	865178	RelationalExpression	cmd -> aliases . count > 0		865108	0		>			
ANR	865179	MemberAccess	cmd -> aliases . count		865108	0					
ANR	865180	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865181	Identifier	cmd		865108	0					
ANR	865182	Identifier	aliases		865108	1					
ANR	865183	Identifier	count		865108	1					
ANR	865184	PrimaryExpression	0		865108	1					
ANR	865185	CompoundStatement		7:31:202:202	865108	1					
ANR	865186	IfStatement	if ( i > 0 )		865108	0					
ANR	865187	Condition	i > 0	84:8:1755:1759	865108	0	True				
ANR	865188	RelationalExpression	i > 0		865108	0		>			
ANR	865189	Identifier	i		865108	0					
ANR	865190	PrimaryExpression	0		865108	1					
ANR	865191	CompoundStatement		8:15:219:219	865108	1					
ANR	865192	ExpressionStatement	free ( cmd -> aliases . keys [ i ] )	85:5:1769:1796	865108	0	True				
ANR	865193	CallExpression	free ( cmd -> aliases . keys [ i ] )		865108	0					
ANR	865194	Callee	free		865108	0					
ANR	865195	Identifier	free		865108	0					
ANR	865196	ArgumentList	cmd -> aliases . keys [ i ]		865108	1					
ANR	865197	Argument	cmd -> aliases . keys [ i ]		865108	0					
ANR	865198	ArrayIndexing	cmd -> aliases . keys [ i ]		865108	0					
ANR	865199	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865200	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865201	Identifier	cmd		865108	0					
ANR	865202	Identifier	aliases		865108	1					
ANR	865203	Identifier	keys		865108	1					
ANR	865204	Identifier	i		865108	1					
ANR	865205	ExpressionStatement	cmd -> aliases . keys [ i ] = cmd -> aliases . keys [ 0 ]	86:5:1803:1846	865108	1	True				
ANR	865206	AssignmentExpression	cmd -> aliases . keys [ i ] = cmd -> aliases . keys [ 0 ]		865108	0		=			
ANR	865207	ArrayIndexing	cmd -> aliases . keys [ i ]		865108	0					
ANR	865208	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865209	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865210	Identifier	cmd		865108	0					
ANR	865211	Identifier	aliases		865108	1					
ANR	865212	Identifier	keys		865108	1					
ANR	865213	Identifier	i		865108	1					
ANR	865214	ArrayIndexing	cmd -> aliases . keys [ 0 ]		865108	1					
ANR	865215	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865216	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865217	Identifier	cmd		865108	0					
ANR	865218	Identifier	aliases		865108	1					
ANR	865219	Identifier	keys		865108	1					
ANR	865220	PrimaryExpression	0		865108	1					
ANR	865221	ExpressionStatement	free ( cmd -> aliases . values [ i ] )	87:5:1853:1882	865108	2	True				
ANR	865222	CallExpression	free ( cmd -> aliases . values [ i ] )		865108	0					
ANR	865223	Callee	free		865108	0					
ANR	865224	Identifier	free		865108	0					
ANR	865225	ArgumentList	cmd -> aliases . values [ i ]		865108	1					
ANR	865226	Argument	cmd -> aliases . values [ i ]		865108	0					
ANR	865227	ArrayIndexing	cmd -> aliases . values [ i ]		865108	0					
ANR	865228	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865229	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865230	Identifier	cmd		865108	0					
ANR	865231	Identifier	aliases		865108	1					
ANR	865232	Identifier	values		865108	1					
ANR	865233	Identifier	i		865108	1					
ANR	865234	ExpressionStatement	cmd -> aliases . values [ i ] = cmd -> aliases . values [ 0 ]	88:5:1889:1936	865108	3	True				
ANR	865235	AssignmentExpression	cmd -> aliases . values [ i ] = cmd -> aliases . values [ 0 ]		865108	0		=			
ANR	865236	ArrayIndexing	cmd -> aliases . values [ i ]		865108	0					
ANR	865237	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865238	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865239	Identifier	cmd		865108	0					
ANR	865240	Identifier	aliases		865108	1					
ANR	865241	Identifier	values		865108	1					
ANR	865242	Identifier	i		865108	1					
ANR	865243	ArrayIndexing	cmd -> aliases . values [ 0 ]		865108	1					
ANR	865244	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865245	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865246	Identifier	cmd		865108	0					
ANR	865247	Identifier	aliases		865108	1					
ANR	865248	Identifier	values		865108	1					
ANR	865249	PrimaryExpression	0		865108	1					
ANR	865250	ExpressionStatement	"memmove ( cmd -> aliases . values , cmd -> aliases . values + 1 , cmd -> aliases . count * sizeof ( void * ) )"	90:4:1948:2049	865108	1	True				
ANR	865251	CallExpression	"memmove ( cmd -> aliases . values , cmd -> aliases . values + 1 , cmd -> aliases . count * sizeof ( void * ) )"		865108	0					
ANR	865252	Callee	memmove		865108	0					
ANR	865253	Identifier	memmove		865108	0					
ANR	865254	ArgumentList	cmd -> aliases . values		865108	1					
ANR	865255	Argument	cmd -> aliases . values		865108	0					
ANR	865256	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865257	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865258	Identifier	cmd		865108	0					
ANR	865259	Identifier	aliases		865108	1					
ANR	865260	Identifier	values		865108	1					
ANR	865261	Argument	cmd -> aliases . values + 1		865108	1					
ANR	865262	AdditiveExpression	cmd -> aliases . values + 1		865108	0		+			
ANR	865263	MemberAccess	cmd -> aliases . values		865108	0					
ANR	865264	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865265	Identifier	cmd		865108	0					
ANR	865266	Identifier	aliases		865108	1					
ANR	865267	Identifier	values		865108	1					
ANR	865268	PrimaryExpression	1		865108	1					
ANR	865269	Argument	cmd -> aliases . count * sizeof ( void * )		865108	2					
ANR	865270	MultiplicativeExpression	cmd -> aliases . count * sizeof ( void * )		865108	0		*			
ANR	865271	MemberAccess	cmd -> aliases . count		865108	0					
ANR	865272	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865273	Identifier	cmd		865108	0					
ANR	865274	Identifier	aliases		865108	1					
ANR	865275	Identifier	count		865108	1					
ANR	865276	SizeofExpression	sizeof ( void * )		865108	1					
ANR	865277	Sizeof	sizeof		865108	0					
ANR	865278	SizeofOperand	void *		865108	1					
ANR	865279	ExpressionStatement	"memmove ( cmd -> aliases . keys , cmd -> aliases . keys + 1 , cmd -> aliases . count * sizeof ( void * ) )"	93:4:2055:2152	865108	2	True				
ANR	865280	CallExpression	"memmove ( cmd -> aliases . keys , cmd -> aliases . keys + 1 , cmd -> aliases . count * sizeof ( void * ) )"		865108	0					
ANR	865281	Callee	memmove		865108	0					
ANR	865282	Identifier	memmove		865108	0					
ANR	865283	ArgumentList	cmd -> aliases . keys		865108	1					
ANR	865284	Argument	cmd -> aliases . keys		865108	0					
ANR	865285	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865286	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865287	Identifier	cmd		865108	0					
ANR	865288	Identifier	aliases		865108	1					
ANR	865289	Identifier	keys		865108	1					
ANR	865290	Argument	cmd -> aliases . keys + 1		865108	1					
ANR	865291	AdditiveExpression	cmd -> aliases . keys + 1		865108	0		+			
ANR	865292	MemberAccess	cmd -> aliases . keys		865108	0					
ANR	865293	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865294	Identifier	cmd		865108	0					
ANR	865295	Identifier	aliases		865108	1					
ANR	865296	Identifier	keys		865108	1					
ANR	865297	PrimaryExpression	1		865108	1					
ANR	865298	Argument	cmd -> aliases . count * sizeof ( void * )		865108	2					
ANR	865299	MultiplicativeExpression	cmd -> aliases . count * sizeof ( void * )		865108	0		*			
ANR	865300	MemberAccess	cmd -> aliases . count		865108	0					
ANR	865301	PtrMemberAccess	cmd -> aliases		865108	0					
ANR	865302	Identifier	cmd		865108	0					
ANR	865303	Identifier	aliases		865108	1					
ANR	865304	Identifier	count		865108	1					
ANR	865305	SizeofExpression	sizeof ( void * )		865108	1					
ANR	865306	Sizeof	sizeof		865108	0					
ANR	865307	SizeofOperand	void *		865108	1					
ANR	865308	ReturnStatement	return true ;	97:3:2162:2173	865108	3	True				
ANR	865309	Identifier	true		865108	0					
ANR	865310	ReturnStatement	return false ;	100:1:2183:2195	865108	2	True				
ANR	865311	Identifier	false		865108	0					
ANR	865312	ReturnType	R_API bool		865108	1					
ANR	865313	Identifier	r_cmd_alias_del		865108	2					
ANR	865314	ParameterList	"RCmd * cmd , const char * k"		865108	3					
ANR	865315	Parameter	RCmd * cmd	77:28:1516:1524	865108	0	True				
ANR	865316	ParameterType	RCmd *		865108	0					
ANR	865317	Identifier	cmd		865108	1					
ANR	865318	Parameter	const char * k	77:39:1527:1539	865108	1	True				
ANR	865319	ParameterType	const char *		865108	0					
ANR	865320	Identifier	k		865108	1					
ANR	865321	CFGEntryNode	ENTRY		865108		True				
ANR	865322	CFGExitNode	EXIT		865108		True				
ANR	865323	Symbol	strcmp		865108						
ANR	865324	Symbol	false		865108						
ANR	865325	Symbol	i		865108						
ANR	865326	Symbol	cmd -> aliases . count		865108						
ANR	865327	Symbol	k		865108						
ANR	865328	Symbol	* cmd -> aliases . values		865108						
ANR	865329	Symbol	* * cmd		865108						
ANR	865330	Symbol	* cmd -> aliases		865108						
ANR	865331	Symbol	* i		865108						
ANR	865332	Symbol	true		865108						
ANR	865333	Symbol	cmd -> aliases . values		865108						
ANR	865334	Symbol	cmd -> aliases . keys		865108						
ANR	865335	Symbol	cmd		865108						
ANR	865336	Symbol	* cmd		865108						
ANR	865337	Symbol	cmd -> aliases		865108						
ANR	865338	Symbol	* cmd -> aliases . keys		865108						
ANR	865339	Function	r_cmd_alias_set	104:0:2261:3315							
ANR	865340	FunctionDef	"r_cmd_alias_set (RCmd * cmd , const char * k , const char * v , int remote)"		865339	0					
ANR	865341	CompoundStatement		104:80:2341:3315	865339	0					
ANR	865342	IdentifierDeclStatement	void * tofree = NULL ;	105:1:2344:2363	865339	0	True				
ANR	865343	IdentifierDecl	* tofree = NULL		865339	0					
ANR	865344	IdentifierDeclType	void *		865339	0					
ANR	865345	Identifier	tofree		865339	1					
ANR	865346	AssignmentExpression	* tofree = NULL		865339	2		=			
ANR	865347	Identifier	NULL		865339	0					
ANR	865348	Identifier	NULL		865339	1					
ANR	865349	IfStatement	"if ( ! strncmp ( v , ""base64:"" , 7 ) )"		865339	1					
ANR	865350	Condition	"! strncmp ( v , ""base64:"" , 7 )"	106:5:2370:2395	865339	0	True				
ANR	865351	UnaryOperationExpression	"! strncmp ( v , ""base64:"" , 7 )"		865339	0					
ANR	865352	UnaryOperator	!		865339	0					
ANR	865353	CallExpression	"strncmp ( v , ""base64:"" , 7 )"		865339	1					
ANR	865354	Callee	strncmp		865339	0					
ANR	865355	Identifier	strncmp		865339	0					
ANR	865356	ArgumentList	v		865339	1					
ANR	865357	Argument	v		865339	0					
ANR	865358	Identifier	v		865339	0					
ANR	865359	Argument	"""base64:"""		865339	1					
ANR	865360	PrimaryExpression	"""base64:"""		865339	0					
ANR	865361	Argument	7		865339	2					
ANR	865362	PrimaryExpression	7		865339	0					
ANR	865363	CompoundStatement		4:2:60:100	865339	1					
ANR	865364	IdentifierDeclStatement	"ut8 * s = r_base64_decode_dyn ( v + 7 , - 1 ) ;"	107:2:2402:2442	865339	0	True				
ANR	865365	IdentifierDecl	"* s = r_base64_decode_dyn ( v + 7 , - 1 )"		865339	0					
ANR	865366	IdentifierDeclType	ut8 *		865339	0					
ANR	865367	Identifier	s		865339	1					
ANR	865368	AssignmentExpression	"* s = r_base64_decode_dyn ( v + 7 , - 1 )"		865339	2		=			
ANR	865369	Identifier	s		865339	0					
ANR	865370	CallExpression	"r_base64_decode_dyn ( v + 7 , - 1 )"		865339	1					
ANR	865371	Callee	r_base64_decode_dyn		865339	0					
ANR	865372	Identifier	r_base64_decode_dyn		865339	0					
ANR	865373	ArgumentList	v + 7		865339	1					
ANR	865374	Argument	v + 7		865339	0					
ANR	865375	AdditiveExpression	v + 7		865339	0		+			
ANR	865376	Identifier	v		865339	0					
ANR	865377	PrimaryExpression	7		865339	1					
ANR	865378	Argument	- 1		865339	1					
ANR	865379	UnaryOperationExpression	- 1		865339	0					
ANR	865380	UnaryOperator	-		865339	0					
ANR	865381	PrimaryExpression	1		865339	1					
ANR	865382	IfStatement	if ( s )		865339	1					
ANR	865383	Condition	s	108:6:2450:2450	865339	0	True				
ANR	865384	Identifier	s		865339	0					
ANR	865385	CompoundStatement		5:9:111:111	865339	1					
ANR	865386	ExpressionStatement	tofree = s	109:3:2458:2468	865339	0	True				
ANR	865387	AssignmentExpression	tofree = s		865339	0		=			
ANR	865388	Identifier	tofree		865339	0					
ANR	865389	Identifier	s		865339	1					
ANR	865390	ExpressionStatement	v = ( const char * ) s	110:3:2473:2492	865339	1	True				
ANR	865391	AssignmentExpression	v = ( const char * ) s		865339	0		=			
ANR	865392	Identifier	v		865339	0					
ANR	865393	CastExpression	( const char * ) s		865339	1					
ANR	865394	CastTarget	const char *		865339	0					
ANR	865395	Identifier	s		865339	1					
ANR	865396	IdentifierDeclStatement	int i ;	113:1:2502:2507	865339	2	True				
ANR	865397	IdentifierDecl	i		865339	0					
ANR	865398	IdentifierDeclType	int		865339	0					
ANR	865399	Identifier	i		865339	1					
ANR	865400	ForStatement	for ( i = 0 ; i < cmd -> aliases . count ; i ++ )		865339	3					
ANR	865401	ForInit	i = 0 ;	114:6:2515:2520	865339	0	True				
ANR	865402	AssignmentExpression	i = 0		865339	0		=			
ANR	865403	Identifier	i		865339	0					
ANR	865404	PrimaryExpression	0		865339	1					
ANR	865405	Condition	i < cmd -> aliases . count	114:13:2522:2543	865339	1	True				
ANR	865406	RelationalExpression	i < cmd -> aliases . count		865339	0		<			
ANR	865407	Identifier	i		865339	0					
ANR	865408	MemberAccess	cmd -> aliases . count		865339	1					
ANR	865409	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865410	Identifier	cmd		865339	0					
ANR	865411	Identifier	aliases		865339	1					
ANR	865412	Identifier	count		865339	1					
ANR	865413	PostIncDecOperationExpression	i ++	114:37:2546:2548	865339	2	True				
ANR	865414	Identifier	i		865339	0					
ANR	865415	IncDec	++		865339	1					
ANR	865416	CompoundStatement		12:2:213:260	865339	3					
ANR	865417	IdentifierDeclStatement	"int matches = ! strcmp ( k , cmd -> aliases . keys [ i ] ) ;"	115:2:2555:2602	865339	0	True				
ANR	865418	IdentifierDecl	"matches = ! strcmp ( k , cmd -> aliases . keys [ i ] )"		865339	0					
ANR	865419	IdentifierDeclType	int		865339	0					
ANR	865420	Identifier	matches		865339	1					
ANR	865421	AssignmentExpression	"matches = ! strcmp ( k , cmd -> aliases . keys [ i ] )"		865339	2		=			
ANR	865422	Identifier	matches		865339	0					
ANR	865423	UnaryOperationExpression	"! strcmp ( k , cmd -> aliases . keys [ i ] )"		865339	1					
ANR	865424	UnaryOperator	!		865339	0					
ANR	865425	CallExpression	"strcmp ( k , cmd -> aliases . keys [ i ] )"		865339	1					
ANR	865426	Callee	strcmp		865339	0					
ANR	865427	Identifier	strcmp		865339	0					
ANR	865428	ArgumentList	k		865339	1					
ANR	865429	Argument	k		865339	0					
ANR	865430	Identifier	k		865339	0					
ANR	865431	Argument	cmd -> aliases . keys [ i ]		865339	1					
ANR	865432	ArrayIndexing	cmd -> aliases . keys [ i ]		865339	0					
ANR	865433	MemberAccess	cmd -> aliases . keys		865339	0					
ANR	865434	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865435	Identifier	cmd		865339	0					
ANR	865436	Identifier	aliases		865339	1					
ANR	865437	Identifier	keys		865339	1					
ANR	865438	Identifier	i		865339	1					
ANR	865439	IfStatement	if ( matches )		865339	1					
ANR	865440	Condition	matches	116:6:2610:2616	865339	0	True				
ANR	865441	Identifier	matches		865339	0					
ANR	865442	CompoundStatement		13:15:277:277	865339	1					
ANR	865443	ExpressionStatement	free ( cmd -> aliases . values [ i ] )	117:3:2624:2653	865339	0	True				
ANR	865444	CallExpression	free ( cmd -> aliases . values [ i ] )		865339	0					
ANR	865445	Callee	free		865339	0					
ANR	865446	Identifier	free		865339	0					
ANR	865447	ArgumentList	cmd -> aliases . values [ i ]		865339	1					
ANR	865448	Argument	cmd -> aliases . values [ i ]		865339	0					
ANR	865449	ArrayIndexing	cmd -> aliases . values [ i ]		865339	0					
ANR	865450	MemberAccess	cmd -> aliases . values		865339	0					
ANR	865451	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865452	Identifier	cmd		865339	0					
ANR	865453	Identifier	aliases		865339	1					
ANR	865454	Identifier	values		865339	1					
ANR	865455	Identifier	i		865339	1					
ANR	865456	ExpressionStatement	cmd -> aliases . values [ i ] = strdup ( v )	118:3:2658:2693	865339	1	True				
ANR	865457	AssignmentExpression	cmd -> aliases . values [ i ] = strdup ( v )		865339	0		=			
ANR	865458	ArrayIndexing	cmd -> aliases . values [ i ]		865339	0					
ANR	865459	MemberAccess	cmd -> aliases . values		865339	0					
ANR	865460	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865461	Identifier	cmd		865339	0					
ANR	865462	Identifier	aliases		865339	1					
ANR	865463	Identifier	values		865339	1					
ANR	865464	Identifier	i		865339	1					
ANR	865465	CallExpression	strdup ( v )		865339	1					
ANR	865466	Callee	strdup		865339	0					
ANR	865467	Identifier	strdup		865339	0					
ANR	865468	ArgumentList	v		865339	1					
ANR	865469	Argument	v		865339	0					
ANR	865470	Identifier	v		865339	0					
ANR	865471	ExpressionStatement	free ( tofree )	119:3:2698:2711	865339	2	True				
ANR	865472	CallExpression	free ( tofree )		865339	0					
ANR	865473	Callee	free		865339	0					
ANR	865474	Identifier	free		865339	0					
ANR	865475	ArgumentList	tofree		865339	1					
ANR	865476	Argument	tofree		865339	0					
ANR	865477	Identifier	tofree		865339	0					
ANR	865478	ReturnStatement	return 1 ;	120:3:2716:2724	865339	3	True				
ANR	865479	PrimaryExpression	1		865339	0					
ANR	865480	ExpressionStatement	i = cmd -> aliases . count ++	124:1:2736:2760	865339	4	True				
ANR	865481	AssignmentExpression	i = cmd -> aliases . count ++		865339	0		=			
ANR	865482	Identifier	i		865339	0					
ANR	865483	PostIncDecOperationExpression	cmd -> aliases . count ++		865339	1					
ANR	865484	MemberAccess	cmd -> aliases . count		865339	0					
ANR	865485	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865486	Identifier	cmd		865339	0					
ANR	865487	Identifier	aliases		865339	1					
ANR	865488	Identifier	count		865339	1					
ANR	865489	IncDec	++		865339	1					
ANR	865490	IdentifierDeclStatement	"char * * K = ( char * * ) realloc ( cmd -> aliases . keys , sizeof ( char * ) * cmd -> aliases . count ) ;"	125:1:2763:2857	865339	5	True				
ANR	865491	IdentifierDecl	"* * K = ( char * * ) realloc ( cmd -> aliases . keys , sizeof ( char * ) * cmd -> aliases . count )"		865339	0					
ANR	865492	IdentifierDeclType	char * *		865339	0					
ANR	865493	Identifier	K		865339	1					
ANR	865494	AssignmentExpression	"* * K = ( char * * ) realloc ( cmd -> aliases . keys , sizeof ( char * ) * cmd -> aliases . count )"		865339	2		=			
ANR	865495	Identifier	K		865339	0					
ANR	865496	CastExpression	"( char * * ) realloc ( cmd -> aliases . keys , sizeof ( char * ) * cmd -> aliases . count )"		865339	1					
ANR	865497	CastTarget	char * *		865339	0					
ANR	865498	CallExpression	"realloc ( cmd -> aliases . keys , sizeof ( char * ) * cmd -> aliases . count )"		865339	1					
ANR	865499	Callee	realloc		865339	0					
ANR	865500	Identifier	realloc		865339	0					
ANR	865501	ArgumentList	cmd -> aliases . keys		865339	1					
ANR	865502	Argument	cmd -> aliases . keys		865339	0					
ANR	865503	MemberAccess	cmd -> aliases . keys		865339	0					
ANR	865504	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865505	Identifier	cmd		865339	0					
ANR	865506	Identifier	aliases		865339	1					
ANR	865507	Identifier	keys		865339	1					
ANR	865508	Argument	sizeof ( char * ) * cmd -> aliases . count		865339	1					
ANR	865509	MultiplicativeExpression	sizeof ( char * ) * cmd -> aliases . count		865339	0		*			
ANR	865510	SizeofExpression	sizeof ( char * )		865339	0					
ANR	865511	Sizeof	sizeof		865339	0					
ANR	865512	SizeofOperand	char *		865339	1					
ANR	865513	MemberAccess	cmd -> aliases . count		865339	1					
ANR	865514	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865515	Identifier	cmd		865339	0					
ANR	865516	Identifier	aliases		865339	1					
ANR	865517	Identifier	count		865339	1					
ANR	865518	IfStatement	if ( K )		865339	6					
ANR	865519	Condition	K	127:5:2864:2864	865339	0	True				
ANR	865520	Identifier	K		865339	0					
ANR	865521	CompoundStatement		26:2:554:638	865339	1					
ANR	865522	ExpressionStatement	cmd -> aliases . keys = K	128:2:2871:2892	865339	0	True				
ANR	865523	AssignmentExpression	cmd -> aliases . keys = K		865339	0		=			
ANR	865524	MemberAccess	cmd -> aliases . keys		865339	0					
ANR	865525	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865526	Identifier	cmd		865339	0					
ANR	865527	Identifier	aliases		865339	1					
ANR	865528	Identifier	keys		865339	1					
ANR	865529	Identifier	K		865339	1					
ANR	865530	IdentifierDeclStatement	"int * R = ( int * ) realloc ( cmd -> aliases . remote , sizeof ( int ) * cmd -> aliases . count ) ;"	129:2:2896:2980	865339	1	True				
ANR	865531	IdentifierDecl	"* R = ( int * ) realloc ( cmd -> aliases . remote , sizeof ( int ) * cmd -> aliases . count )"		865339	0					
ANR	865532	IdentifierDeclType	int *		865339	0					
ANR	865533	Identifier	R		865339	1					
ANR	865534	AssignmentExpression	"* R = ( int * ) realloc ( cmd -> aliases . remote , sizeof ( int ) * cmd -> aliases . count )"		865339	2		=			
ANR	865535	Identifier	R		865339	0					
ANR	865536	CastExpression	"( int * ) realloc ( cmd -> aliases . remote , sizeof ( int ) * cmd -> aliases . count )"		865339	1					
ANR	865537	CastTarget	int *		865339	0					
ANR	865538	CallExpression	"realloc ( cmd -> aliases . remote , sizeof ( int ) * cmd -> aliases . count )"		865339	1					
ANR	865539	Callee	realloc		865339	0					
ANR	865540	Identifier	realloc		865339	0					
ANR	865541	ArgumentList	cmd -> aliases . remote		865339	1					
ANR	865542	Argument	cmd -> aliases . remote		865339	0					
ANR	865543	MemberAccess	cmd -> aliases . remote		865339	0					
ANR	865544	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865545	Identifier	cmd		865339	0					
ANR	865546	Identifier	aliases		865339	1					
ANR	865547	Identifier	remote		865339	1					
ANR	865548	Argument	sizeof ( int ) * cmd -> aliases . count		865339	1					
ANR	865549	MultiplicativeExpression	sizeof ( int ) * cmd -> aliases . count		865339	0		*			
ANR	865550	SizeofExpression	sizeof ( int )		865339	0					
ANR	865551	Sizeof	sizeof		865339	0					
ANR	865552	SizeofOperand	int		865339	1					
ANR	865553	MemberAccess	cmd -> aliases . count		865339	1					
ANR	865554	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865555	Identifier	cmd		865339	0					
ANR	865556	Identifier	aliases		865339	1					
ANR	865557	Identifier	count		865339	1					
ANR	865558	IfStatement	if ( R )		865339	2					
ANR	865559	Condition	R	131:6:2988:2988	865339	0	True				
ANR	865560	Identifier	R		865339	0					
ANR	865561	CompoundStatement		30:3:682:774	865339	1					
ANR	865562	ExpressionStatement	cmd -> aliases . remote = R	132:3:2996:3019	865339	0	True				
ANR	865563	AssignmentExpression	cmd -> aliases . remote = R		865339	0		=			
ANR	865564	MemberAccess	cmd -> aliases . remote		865339	0					
ANR	865565	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865566	Identifier	cmd		865339	0					
ANR	865567	Identifier	aliases		865339	1					
ANR	865568	Identifier	remote		865339	1					
ANR	865569	Identifier	R		865339	1					
ANR	865570	IdentifierDeclStatement	"char * * V = ( char * * ) realloc ( cmd -> aliases . values , sizeof ( char * ) * cmd -> aliases . count ) ;"	133:3:3024:3116	865339	1	True				
ANR	865571	IdentifierDecl	"* * V = ( char * * ) realloc ( cmd -> aliases . values , sizeof ( char * ) * cmd -> aliases . count )"		865339	0					
ANR	865572	IdentifierDeclType	char * *		865339	0					
ANR	865573	Identifier	V		865339	1					
ANR	865574	AssignmentExpression	"* * V = ( char * * ) realloc ( cmd -> aliases . values , sizeof ( char * ) * cmd -> aliases . count )"		865339	2		=			
ANR	865575	Identifier	V		865339	0					
ANR	865576	CastExpression	"( char * * ) realloc ( cmd -> aliases . values , sizeof ( char * ) * cmd -> aliases . count )"		865339	1					
ANR	865577	CastTarget	char * *		865339	0					
ANR	865578	CallExpression	"realloc ( cmd -> aliases . values , sizeof ( char * ) * cmd -> aliases . count )"		865339	1					
ANR	865579	Callee	realloc		865339	0					
ANR	865580	Identifier	realloc		865339	0					
ANR	865581	ArgumentList	cmd -> aliases . values		865339	1					
ANR	865582	Argument	cmd -> aliases . values		865339	0					
ANR	865583	MemberAccess	cmd -> aliases . values		865339	0					
ANR	865584	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865585	Identifier	cmd		865339	0					
ANR	865586	Identifier	aliases		865339	1					
ANR	865587	Identifier	values		865339	1					
ANR	865588	Argument	sizeof ( char * ) * cmd -> aliases . count		865339	1					
ANR	865589	MultiplicativeExpression	sizeof ( char * ) * cmd -> aliases . count		865339	0		*			
ANR	865590	SizeofExpression	sizeof ( char * )		865339	0					
ANR	865591	Sizeof	sizeof		865339	0					
ANR	865592	SizeofOperand	char *		865339	1					
ANR	865593	MemberAccess	cmd -> aliases . count		865339	1					
ANR	865594	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865595	Identifier	cmd		865339	0					
ANR	865596	Identifier	aliases		865339	1					
ANR	865597	Identifier	count		865339	1					
ANR	865598	IfStatement	if ( V )		865339	2					
ANR	865599	Condition	V	135:7:3125:3125	865339	0	True				
ANR	865600	Identifier	V		865339	0					
ANR	865601	CompoundStatement		32:10:786:786	865339	1					
ANR	865602	ExpressionStatement	cmd -> aliases . values = V	136:4:3134:3157	865339	0	True				
ANR	865603	AssignmentExpression	cmd -> aliases . values = V		865339	0		=			
ANR	865604	MemberAccess	cmd -> aliases . values		865339	0					
ANR	865605	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865606	Identifier	cmd		865339	0					
ANR	865607	Identifier	aliases		865339	1					
ANR	865608	Identifier	values		865339	1					
ANR	865609	Identifier	V		865339	1					
ANR	865610	ExpressionStatement	cmd -> aliases . keys [ i ] = strdup ( k )	137:4:3163:3196	865339	1	True				
ANR	865611	AssignmentExpression	cmd -> aliases . keys [ i ] = strdup ( k )		865339	0		=			
ANR	865612	ArrayIndexing	cmd -> aliases . keys [ i ]		865339	0					
ANR	865613	MemberAccess	cmd -> aliases . keys		865339	0					
ANR	865614	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865615	Identifier	cmd		865339	0					
ANR	865616	Identifier	aliases		865339	1					
ANR	865617	Identifier	keys		865339	1					
ANR	865618	Identifier	i		865339	1					
ANR	865619	CallExpression	strdup ( k )		865339	1					
ANR	865620	Callee	strdup		865339	0					
ANR	865621	Identifier	strdup		865339	0					
ANR	865622	ArgumentList	k		865339	1					
ANR	865623	Argument	k		865339	0					
ANR	865624	Identifier	k		865339	0					
ANR	865625	ExpressionStatement	cmd -> aliases . values [ i ] = strdup ( v )	138:4:3202:3237	865339	2	True				
ANR	865626	AssignmentExpression	cmd -> aliases . values [ i ] = strdup ( v )		865339	0		=			
ANR	865627	ArrayIndexing	cmd -> aliases . values [ i ]		865339	0					
ANR	865628	MemberAccess	cmd -> aliases . values		865339	0					
ANR	865629	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865630	Identifier	cmd		865339	0					
ANR	865631	Identifier	aliases		865339	1					
ANR	865632	Identifier	values		865339	1					
ANR	865633	Identifier	i		865339	1					
ANR	865634	CallExpression	strdup ( v )		865339	1					
ANR	865635	Callee	strdup		865339	0					
ANR	865636	Identifier	strdup		865339	0					
ANR	865637	ArgumentList	v		865339	1					
ANR	865638	Argument	v		865339	0					
ANR	865639	Identifier	v		865339	0					
ANR	865640	ExpressionStatement	cmd -> aliases . remote [ i ] = remote	139:4:3243:3274	865339	3	True				
ANR	865641	AssignmentExpression	cmd -> aliases . remote [ i ] = remote		865339	0		=			
ANR	865642	ArrayIndexing	cmd -> aliases . remote [ i ]		865339	0					
ANR	865643	MemberAccess	cmd -> aliases . remote		865339	0					
ANR	865644	PtrMemberAccess	cmd -> aliases		865339	0					
ANR	865645	Identifier	cmd		865339	0					
ANR	865646	Identifier	aliases		865339	1					
ANR	865647	Identifier	remote		865339	1					
ANR	865648	Identifier	i		865339	1					
ANR	865649	Identifier	remote		865339	1					
ANR	865650	ExpressionStatement	free ( tofree )	143:1:3289:3302	865339	7	True				
ANR	865651	CallExpression	free ( tofree )		865339	0					
ANR	865652	Callee	free		865339	0					
ANR	865653	Identifier	free		865339	0					
ANR	865654	ArgumentList	tofree		865339	1					
ANR	865655	Argument	tofree		865339	0					
ANR	865656	Identifier	tofree		865339	0					
ANR	865657	ReturnStatement	return 0 ;	144:1:3305:3313	865339	8	True				
ANR	865658	PrimaryExpression	0		865339	0					
ANR	865659	ReturnType	R_API int		865339	1					
ANR	865660	Identifier	r_cmd_alias_set		865339	2					
ANR	865661	ParameterList	"RCmd * cmd , const char * k , const char * v , int remote"		865339	3					
ANR	865662	Parameter	RCmd * cmd	104:27:2288:2296	865339	0	True				
ANR	865663	ParameterType	RCmd *		865339	0					
ANR	865664	Identifier	cmd		865339	1					
ANR	865665	Parameter	const char * k	104:38:2299:2311	865339	1	True				
ANR	865666	ParameterType	const char *		865339	0					
ANR	865667	Identifier	k		865339	1					
ANR	865668	Parameter	const char * v	104:53:2314:2326	865339	2	True				
ANR	865669	ParameterType	const char *		865339	0					
ANR	865670	Identifier	v		865339	1					
ANR	865671	Parameter	int remote	104:68:2329:2338	865339	3	True				
ANR	865672	ParameterType	int		865339	0					
ANR	865673	Identifier	remote		865339	1					
ANR	865674	CFGEntryNode	ENTRY		865339		True				
ANR	865675	CFGExitNode	EXIT		865339		True				
ANR	865676	Symbol	* cmd -> aliases . remote		865339						
ANR	865677	Symbol	realloc		865339						
ANR	865678	Symbol	K		865339						
ANR	865679	Symbol	remote		865339						
ANR	865680	Symbol	* cmd -> aliases . values		865339						
ANR	865681	Symbol	* * cmd		865339						
ANR	865682	Symbol	strncmp		865339						
ANR	865683	Symbol	R		865339						
ANR	865684	Symbol	V		865339						
ANR	865685	Symbol	tofree		865339						
ANR	865686	Symbol	cmd -> aliases . values		865339						
ANR	865687	Symbol	cmd -> aliases . keys		865339						
ANR	865688	Symbol	* cmd		865339						
ANR	865689	Symbol	cmd -> aliases		865339						
ANR	865690	Symbol	strcmp		865339						
ANR	865691	Symbol	NULL		865339						
ANR	865692	Symbol	r_base64_decode_dyn		865339						
ANR	865693	Symbol	i		865339						
ANR	865694	Symbol	cmd -> aliases . count		865339						
ANR	865695	Symbol	k		865339						
ANR	865696	Symbol	matches		865339						
ANR	865697	Symbol	* cmd -> aliases		865339						
ANR	865698	Symbol	cmd -> aliases . remote		865339						
ANR	865699	Symbol	s		865339						
ANR	865700	Symbol	* i		865339						
ANR	865701	Symbol	v		865339						
ANR	865702	Symbol	cmd		865339						
ANR	865703	Symbol	strdup		865339						
ANR	865704	Symbol	* cmd -> aliases . keys		865339						
ANR	865705	Function	r_cmd_alias_get	147:0:3318:3775							
ANR	865706	FunctionDef	"r_cmd_alias_get (RCmd * cmd , const char * k , int remote)"		865705	0					
ANR	865707	CompoundStatement		147:67:3385:3775	865705	0					
ANR	865708	IdentifierDeclStatement	"int matches , i ;"	148:1:3388:3402	865705	0	True				
ANR	865709	IdentifierDecl	matches		865705	0					
ANR	865710	IdentifierDeclType	int		865705	0					
ANR	865711	Identifier	matches		865705	1					
ANR	865712	IdentifierDecl	i		865705	1					
ANR	865713	IdentifierDeclType	int		865705	0					
ANR	865714	Identifier	i		865705	1					
ANR	865715	IfStatement	if ( ! cmd || ! k )		865705	1					
ANR	865716	Condition	! cmd || ! k	149:5:3409:3418	865705	0	True				
ANR	865717	OrExpression	! cmd || ! k		865705	0		||			
ANR	865718	UnaryOperationExpression	! cmd		865705	0					
ANR	865719	UnaryOperator	!		865705	0					
ANR	865720	Identifier	cmd		865705	1					
ANR	865721	UnaryOperationExpression	! k		865705	1					
ANR	865722	UnaryOperator	!		865705	0					
ANR	865723	Identifier	k		865705	1					
ANR	865724	CompoundStatement		3:17:35:35	865705	1					
ANR	865725	ReturnStatement	return NULL ;	150:2:3425:3436	865705	0	True				
ANR	865726	Identifier	NULL		865705	0					
ANR	865727	ForStatement	for ( i = 0 ; i < cmd -> aliases . count ; i ++ )		865705	2					
ANR	865728	ForInit	i = 0 ;	152:6:3447:3452	865705	0	True				
ANR	865729	AssignmentExpression	i = 0		865705	0		=			
ANR	865730	Identifier	i		865705	0					
ANR	865731	PrimaryExpression	0		865705	1					
ANR	865732	Condition	i < cmd -> aliases . count	152:13:3454:3475	865705	1	True				
ANR	865733	RelationalExpression	i < cmd -> aliases . count		865705	0		<			
ANR	865734	Identifier	i		865705	0					
ANR	865735	MemberAccess	cmd -> aliases . count		865705	1					
ANR	865736	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865737	Identifier	cmd		865705	0					
ANR	865738	Identifier	aliases		865705	1					
ANR	865739	Identifier	count		865705	1					
ANR	865740	PostIncDecOperationExpression	i ++	152:37:3478:3480	865705	2	True				
ANR	865741	Identifier	i		865705	0					
ANR	865742	IncDec	++		865705	1					
ANR	865743	CompoundStatement		6:42:97:97	865705	3					
ANR	865744	ExpressionStatement	matches = 0	153:2:3487:3498	865705	0	True				
ANR	865745	AssignmentExpression	matches = 0		865705	0		=			
ANR	865746	Identifier	matches		865705	0					
ANR	865747	PrimaryExpression	0		865705	1					
ANR	865748	IfStatement	if ( remote )		865705	1					
ANR	865749	Condition	remote	154:6:3506:3511	865705	0	True				
ANR	865750	Identifier	remote		865705	0					
ANR	865751	CompoundStatement		8:14:128:128	865705	1					
ANR	865752	IfStatement	if ( cmd -> aliases . remote [ i ] )		865705	0					
ANR	865753	Condition	cmd -> aliases . remote [ i ]	155:7:3523:3544	865705	0	True				
ANR	865754	ArrayIndexing	cmd -> aliases . remote [ i ]		865705	0					
ANR	865755	MemberAccess	cmd -> aliases . remote		865705	0					
ANR	865756	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865757	Identifier	cmd		865705	0					
ANR	865758	Identifier	aliases		865705	1					
ANR	865759	Identifier	remote		865705	1					
ANR	865760	Identifier	i		865705	1					
ANR	865761	CompoundStatement		9:31:161:161	865705	1					
ANR	865762	ExpressionStatement	"matches = ! strncmp ( k , cmd -> aliases . keys [ i ] , strlen ( cmd -> aliases . keys [ i ] ) )"	156:4:3553:3633	865705	0	True				
ANR	865763	AssignmentExpression	"matches = ! strncmp ( k , cmd -> aliases . keys [ i ] , strlen ( cmd -> aliases . keys [ i ] ) )"		865705	0		=			
ANR	865764	Identifier	matches		865705	0					
ANR	865765	UnaryOperationExpression	"! strncmp ( k , cmd -> aliases . keys [ i ] , strlen ( cmd -> aliases . keys [ i ] ) )"		865705	1					
ANR	865766	UnaryOperator	!		865705	0					
ANR	865767	CallExpression	"strncmp ( k , cmd -> aliases . keys [ i ] , strlen ( cmd -> aliases . keys [ i ] ) )"		865705	1					
ANR	865768	Callee	strncmp		865705	0					
ANR	865769	Identifier	strncmp		865705	0					
ANR	865770	ArgumentList	k		865705	1					
ANR	865771	Argument	k		865705	0					
ANR	865772	Identifier	k		865705	0					
ANR	865773	Argument	cmd -> aliases . keys [ i ]		865705	1					
ANR	865774	ArrayIndexing	cmd -> aliases . keys [ i ]		865705	0					
ANR	865775	MemberAccess	cmd -> aliases . keys		865705	0					
ANR	865776	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865777	Identifier	cmd		865705	0					
ANR	865778	Identifier	aliases		865705	1					
ANR	865779	Identifier	keys		865705	1					
ANR	865780	Identifier	i		865705	1					
ANR	865781	Argument	strlen ( cmd -> aliases . keys [ i ] )		865705	2					
ANR	865782	CallExpression	strlen ( cmd -> aliases . keys [ i ] )		865705	0					
ANR	865783	Callee	strlen		865705	0					
ANR	865784	Identifier	strlen		865705	0					
ANR	865785	ArgumentList	cmd -> aliases . keys [ i ]		865705	1					
ANR	865786	Argument	cmd -> aliases . keys [ i ]		865705	0					
ANR	865787	ArrayIndexing	cmd -> aliases . keys [ i ]		865705	0					
ANR	865788	MemberAccess	cmd -> aliases . keys		865705	0					
ANR	865789	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865790	Identifier	cmd		865705	0					
ANR	865791	Identifier	aliases		865705	1					
ANR	865792	Identifier	keys		865705	1					
ANR	865793	Identifier	i		865705	1					
ANR	865794	ElseStatement	else		865705	0					
ANR	865795	CompoundStatement		13:9:263:263	865705	0					
ANR	865796	ExpressionStatement	"matches = ! strcmp ( k , cmd -> aliases . keys [ i ] )"	160:3:3654:3697	865705	0	True				
ANR	865797	AssignmentExpression	"matches = ! strcmp ( k , cmd -> aliases . keys [ i ] )"		865705	0		=			
ANR	865798	Identifier	matches		865705	0					
ANR	865799	UnaryOperationExpression	"! strcmp ( k , cmd -> aliases . keys [ i ] )"		865705	1					
ANR	865800	UnaryOperator	!		865705	0					
ANR	865801	CallExpression	"strcmp ( k , cmd -> aliases . keys [ i ] )"		865705	1					
ANR	865802	Callee	strcmp		865705	0					
ANR	865803	Identifier	strcmp		865705	0					
ANR	865804	ArgumentList	k		865705	1					
ANR	865805	Argument	k		865705	0					
ANR	865806	Identifier	k		865705	0					
ANR	865807	Argument	cmd -> aliases . keys [ i ]		865705	1					
ANR	865808	ArrayIndexing	cmd -> aliases . keys [ i ]		865705	0					
ANR	865809	MemberAccess	cmd -> aliases . keys		865705	0					
ANR	865810	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865811	Identifier	cmd		865705	0					
ANR	865812	Identifier	aliases		865705	1					
ANR	865813	Identifier	keys		865705	1					
ANR	865814	Identifier	i		865705	1					
ANR	865815	IfStatement	if ( matches )		865705	2					
ANR	865816	Condition	matches	162:6:3709:3715	865705	0	True				
ANR	865817	Identifier	matches		865705	0					
ANR	865818	CompoundStatement		16:15:332:332	865705	1					
ANR	865819	ReturnStatement	return cmd -> aliases . values [ i ] ;	163:3:3723:3752	865705	0	True				
ANR	865820	ArrayIndexing	cmd -> aliases . values [ i ]		865705	0					
ANR	865821	MemberAccess	cmd -> aliases . values		865705	0					
ANR	865822	PtrMemberAccess	cmd -> aliases		865705	0					
ANR	865823	Identifier	cmd		865705	0					
ANR	865824	Identifier	aliases		865705	1					
ANR	865825	Identifier	values		865705	1					
ANR	865826	Identifier	i		865705	1					
ANR	865827	ReturnStatement	return NULL ;	166:1:3762:3773	865705	3	True				
ANR	865828	Identifier	NULL		865705	0					
ANR	865829	ReturnType	R_API char *		865705	1					
ANR	865830	Identifier	r_cmd_alias_get		865705	2					
ANR	865831	ParameterList	"RCmd * cmd , const char * k , int remote"		865705	3					
ANR	865832	Parameter	RCmd * cmd	147:29:3347:3355	865705	0	True				
ANR	865833	ParameterType	RCmd *		865705	0					
ANR	865834	Identifier	cmd		865705	1					
ANR	865835	Parameter	const char * k	147:40:3358:3370	865705	1	True				
ANR	865836	ParameterType	const char *		865705	0					
ANR	865837	Identifier	k		865705	1					
ANR	865838	Parameter	int remote	147:55:3373:3382	865705	2	True				
ANR	865839	ParameterType	int		865705	0					
ANR	865840	Identifier	remote		865705	1					
ANR	865841	CFGEntryNode	ENTRY		865705		True				
ANR	865842	CFGExitNode	EXIT		865705		True				
ANR	865843	Symbol	strcmp		865705						
ANR	865844	Symbol	NULL		865705						
ANR	865845	Symbol	* cmd -> aliases . remote		865705						
ANR	865846	Symbol	i		865705						
ANR	865847	Symbol	cmd -> aliases . count		865705						
ANR	865848	Symbol	k		865705						
ANR	865849	Symbol	remote		865705						
ANR	865850	Symbol	* cmd -> aliases . values		865705						
ANR	865851	Symbol	matches		865705						
ANR	865852	Symbol	* * cmd		865705						
ANR	865853	Symbol	* cmd -> aliases		865705						
ANR	865854	Symbol	cmd -> aliases . remote		865705						
ANR	865855	Symbol	strlen		865705						
ANR	865856	Symbol	strncmp		865705						
ANR	865857	Symbol	* i		865705						
ANR	865858	Symbol	cmd -> aliases . values		865705						
ANR	865859	Symbol	cmd -> aliases . keys		865705						
ANR	865860	Symbol	cmd		865705						
ANR	865861	Symbol	* cmd		865705						
ANR	865862	Symbol	cmd -> aliases		865705						
ANR	865863	Symbol	* cmd -> aliases . keys		865705						
ANR	865864	Function	r_cmd_set_data	169:0:3778:3858							
ANR	865865	FunctionDef	"r_cmd_set_data (RCmd * cmd , void * data)"		865864	0					
ANR	865866	CompoundStatement		169:48:3826:3858	865864	0					
ANR	865867	ExpressionStatement	cmd -> data = data	170:1:3829:3845	865864	0	True				
ANR	865868	AssignmentExpression	cmd -> data = data		865864	0		=			
ANR	865869	PtrMemberAccess	cmd -> data		865864	0					
ANR	865870	Identifier	cmd		865864	0					
ANR	865871	Identifier	data		865864	1					
ANR	865872	Identifier	data		865864	1					
ANR	865873	ReturnStatement	return 1 ;	171:1:3848:3856	865864	1	True				
ANR	865874	PrimaryExpression	1		865864	0					
ANR	865875	ReturnType	R_API int		865864	1					
ANR	865876	Identifier	r_cmd_set_data		865864	2					
ANR	865877	ParameterList	"RCmd * cmd , void * data"		865864	3					
ANR	865878	Parameter	RCmd * cmd	169:25:3803:3811	865864	0	True				
ANR	865879	ParameterType	RCmd *		865864	0					
ANR	865880	Identifier	cmd		865864	1					
ANR	865881	Parameter	void * data	169:36:3814:3823	865864	1	True				
ANR	865882	ParameterType	void *		865864	0					
ANR	865883	Identifier	data		865864	1					
ANR	865884	CFGEntryNode	ENTRY		865864		True				
ANR	865885	CFGExitNode	EXIT		865864		True				
ANR	865886	Symbol	data		865864						
ANR	865887	Symbol	cmd		865864						
ANR	865888	Symbol	* cmd		865864						
ANR	865889	Symbol	cmd -> data		865864						
ANR	865890	Function	r_cmd_add_long	174:0:3861:4315							
ANR	865891	FunctionDef	"r_cmd_add_long (RCmd * cmd , const char * lcmd , const char * scmd , const char * desc)"		865890	0					
ANR	865892	CompoundStatement		174:90:3951:4315	865890	0					
ANR	865893	IdentifierDeclStatement	RCmdLongItem * item = R_NEW ( RCmdLongItem ) ;	175:1:3954:3995	865890	0	True				
ANR	865894	IdentifierDecl	* item = R_NEW ( RCmdLongItem )		865890	0					
ANR	865895	IdentifierDeclType	RCmdLongItem *		865890	0					
ANR	865896	Identifier	item		865890	1					
ANR	865897	AssignmentExpression	* item = R_NEW ( RCmdLongItem )		865890	2		=			
ANR	865898	Identifier	item		865890	0					
ANR	865899	CallExpression	R_NEW ( RCmdLongItem )		865890	1					
ANR	865900	Callee	R_NEW		865890	0					
ANR	865901	Identifier	R_NEW		865890	0					
ANR	865902	ArgumentList	RCmdLongItem		865890	1					
ANR	865903	Argument	RCmdLongItem		865890	0					
ANR	865904	Identifier	RCmdLongItem		865890	0					
ANR	865905	IfStatement	if ( ! item )		865890	1					
ANR	865906	Condition	! item	176:5:4002:4006	865890	0	True				
ANR	865907	UnaryOperationExpression	! item		865890	0					
ANR	865908	UnaryOperator	!		865890	0					
ANR	865909	Identifier	item		865890	1					
ANR	865910	CompoundStatement		3:12:57:57	865890	1					
ANR	865911	ReturnStatement	return false ;	177:2:4013:4025	865890	0	True				
ANR	865912	Identifier	false		865890	0					
ANR	865913	ExpressionStatement	"strncpy ( item -> cmd , lcmd , sizeof ( item -> cmd ) - 1 )"	179:1:4031:4078	865890	2	True				
ANR	865914	CallExpression	"strncpy ( item -> cmd , lcmd , sizeof ( item -> cmd ) - 1 )"		865890	0					
ANR	865915	Callee	strncpy		865890	0					
ANR	865916	Identifier	strncpy		865890	0					
ANR	865917	ArgumentList	item -> cmd		865890	1					
ANR	865918	Argument	item -> cmd		865890	0					
ANR	865919	PtrMemberAccess	item -> cmd		865890	0					
ANR	865920	Identifier	item		865890	0					
ANR	865921	Identifier	cmd		865890	1					
ANR	865922	Argument	lcmd		865890	1					
ANR	865923	Identifier	lcmd		865890	0					
ANR	865924	Argument	sizeof ( item -> cmd ) - 1		865890	2					
ANR	865925	AdditiveExpression	sizeof ( item -> cmd ) - 1		865890	0		-			
ANR	865926	SizeofExpression	sizeof ( item -> cmd )		865890	0					
ANR	865927	Sizeof	sizeof		865890	0					
ANR	865928	PtrMemberAccess	item -> cmd		865890	1					
ANR	865929	Identifier	item		865890	0					
ANR	865930	Identifier	cmd		865890	1					
ANR	865931	PrimaryExpression	1		865890	1					
ANR	865932	ExpressionStatement	"strncpy ( item -> cmd_short , scmd , sizeof ( item -> cmd_short ) - 1 )"	180:1:4081:4140	865890	3	True				
ANR	865933	CallExpression	"strncpy ( item -> cmd_short , scmd , sizeof ( item -> cmd_short ) - 1 )"		865890	0					
ANR	865934	Callee	strncpy		865890	0					
ANR	865935	Identifier	strncpy		865890	0					
ANR	865936	ArgumentList	item -> cmd_short		865890	1					
ANR	865937	Argument	item -> cmd_short		865890	0					
ANR	865938	PtrMemberAccess	item -> cmd_short		865890	0					
ANR	865939	Identifier	item		865890	0					
ANR	865940	Identifier	cmd_short		865890	1					
ANR	865941	Argument	scmd		865890	1					
ANR	865942	Identifier	scmd		865890	0					
ANR	865943	Argument	sizeof ( item -> cmd_short ) - 1		865890	2					
ANR	865944	AdditiveExpression	sizeof ( item -> cmd_short ) - 1		865890	0		-			
ANR	865945	SizeofExpression	sizeof ( item -> cmd_short )		865890	0					
ANR	865946	Sizeof	sizeof		865890	0					
ANR	865947	PtrMemberAccess	item -> cmd_short		865890	1					
ANR	865948	Identifier	item		865890	0					
ANR	865949	Identifier	cmd_short		865890	1					
ANR	865950	PrimaryExpression	1		865890	1					
ANR	865951	ExpressionStatement	item -> cmd_len = strlen ( lcmd )	181:1:4143:4172	865890	4	True				
ANR	865952	AssignmentExpression	item -> cmd_len = strlen ( lcmd )		865890	0		=			
ANR	865953	PtrMemberAccess	item -> cmd_len		865890	0					
ANR	865954	Identifier	item		865890	0					
ANR	865955	Identifier	cmd_len		865890	1					
ANR	865956	CallExpression	strlen ( lcmd )		865890	1					
ANR	865957	Callee	strlen		865890	0					
ANR	865958	Identifier	strlen		865890	0					
ANR	865959	ArgumentList	lcmd		865890	1					
ANR	865960	Argument	lcmd		865890	0					
ANR	865961	Identifier	lcmd		865890	0					
ANR	865962	ExpressionStatement	"strncpy ( item -> desc , desc , sizeof ( item -> desc ) - 1 )"	182:1:4175:4224	865890	5	True				
ANR	865963	CallExpression	"strncpy ( item -> desc , desc , sizeof ( item -> desc ) - 1 )"		865890	0					
ANR	865964	Callee	strncpy		865890	0					
ANR	865965	Identifier	strncpy		865890	0					
ANR	865966	ArgumentList	item -> desc		865890	1					
ANR	865967	Argument	item -> desc		865890	0					
ANR	865968	PtrMemberAccess	item -> desc		865890	0					
ANR	865969	Identifier	item		865890	0					
ANR	865970	Identifier	desc		865890	1					
ANR	865971	Argument	desc		865890	1					
ANR	865972	Identifier	desc		865890	0					
ANR	865973	Argument	sizeof ( item -> desc ) - 1		865890	2					
ANR	865974	AdditiveExpression	sizeof ( item -> desc ) - 1		865890	0		-			
ANR	865975	SizeofExpression	sizeof ( item -> desc )		865890	0					
ANR	865976	Sizeof	sizeof		865890	0					
ANR	865977	PtrMemberAccess	item -> desc		865890	1					
ANR	865978	Identifier	item		865890	0					
ANR	865979	Identifier	desc		865890	1					
ANR	865980	PrimaryExpression	1		865890	1					
ANR	865981	IfStatement	"if ( ! r_list_append ( cmd -> lcmds , item ) )"		865890	6					
ANR	865982	Condition	"! r_list_append ( cmd -> lcmds , item )"	183:5:4231:4263	865890	0	True				
ANR	865983	UnaryOperationExpression	"! r_list_append ( cmd -> lcmds , item )"		865890	0					
ANR	865984	UnaryOperator	!		865890	0					
ANR	865985	CallExpression	"r_list_append ( cmd -> lcmds , item )"		865890	1					
ANR	865986	Callee	r_list_append		865890	0					
ANR	865987	Identifier	r_list_append		865890	0					
ANR	865988	ArgumentList	cmd -> lcmds		865890	1					
ANR	865989	Argument	cmd -> lcmds		865890	0					
ANR	865990	PtrMemberAccess	cmd -> lcmds		865890	0					
ANR	865991	Identifier	cmd		865890	0					
ANR	865992	Identifier	lcmds		865890	1					
ANR	865993	Argument	item		865890	1					
ANR	865994	Identifier	item		865890	0					
ANR	865995	CompoundStatement		10:39:313:313	865890	1					
ANR	865996	ExpressionStatement	free ( item )	184:2:4269:4280	865890	0	True				
ANR	865997	CallExpression	free ( item )		865890	0					
ANR	865998	Callee	free		865890	0					
ANR	865999	Identifier	free		865890	0					
ANR	866000	ArgumentList	item		865890	1					
ANR	866001	Argument	item		865890	0					
ANR	866002	Identifier	item		865890	0					
ANR	866003	ReturnStatement	return false ;	185:2:4284:4296	865890	1	True				
ANR	866004	Identifier	false		865890	0					
ANR	866005	ReturnStatement	return true ;	187:1:4302:4313	865890	7	True				
ANR	866006	Identifier	true		865890	0					
ANR	866007	ReturnType	R_API int		865890	1					
ANR	866008	Identifier	r_cmd_add_long		865890	2					
ANR	866009	ParameterList	"RCmd * cmd , const char * lcmd , const char * scmd , const char * desc"		865890	3					
ANR	866010	Parameter	RCmd * cmd	174:25:3886:3894	865890	0	True				
ANR	866011	ParameterType	RCmd *		865890	0					
ANR	866012	Identifier	cmd		865890	1					
ANR	866013	Parameter	const char * lcmd	174:36:3897:3912	865890	1	True				
ANR	866014	ParameterType	const char *		865890	0					
ANR	866015	Identifier	lcmd		865890	1					
ANR	866016	Parameter	const char * scmd	174:54:3915:3930	865890	2	True				
ANR	866017	ParameterType	const char *		865890	0					
ANR	866018	Identifier	scmd		865890	1					
ANR	866019	Parameter	const char * desc	174:72:3933:3948	865890	3	True				
ANR	866020	ParameterType	const char *		865890	0					
ANR	866021	Identifier	desc		865890	1					
ANR	866022	CFGEntryNode	ENTRY		865890		True				
ANR	866023	CFGExitNode	EXIT		865890		True				
ANR	866024	Symbol	item		865890						
ANR	866025	Symbol	item -> desc		865890						
ANR	866026	Symbol	RCmdLongItem		865890						
ANR	866027	Symbol	item -> cmd		865890						
ANR	866028	Symbol	false		865890						
ANR	866029	Symbol	item -> cmd_short		865890						
ANR	866030	Symbol	item -> cmd_len		865890						
ANR	866031	Symbol	strlen		865890						
ANR	866032	Symbol	scmd		865890						
ANR	866033	Symbol	r_list_append		865890						
ANR	866034	Symbol	* item		865890						
ANR	866035	Symbol	cmd -> lcmds		865890						
ANR	866036	Symbol	true		865890						
ANR	866037	Symbol	cmd		865890						
ANR	866038	Symbol	* cmd		865890						
ANR	866039	Symbol	lcmd		865890						
ANR	866040	Symbol	R_NEW		865890						
ANR	866041	Symbol	desc		865890						
ANR	866042	Function	r_cmd_add	190:0:4318:4665							
ANR	866043	FunctionDef	"r_cmd_add (RCmd * c , const char * cmd , const char * desc , r_cmd_callback ( cb ))"		866042	0					
ANR	866044	CompoundStatement		190:84:4402:4665	866042	0					
ANR	866045	IdentifierDeclStatement	int idx = ( ut8 ) cmd [ 0 ] ;	191:1:4405:4426	866042	0	True				
ANR	866046	IdentifierDecl	idx = ( ut8 ) cmd [ 0 ]		866042	0					
ANR	866047	IdentifierDeclType	int		866042	0					
ANR	866048	Identifier	idx		866042	1					
ANR	866049	AssignmentExpression	idx = ( ut8 ) cmd [ 0 ]		866042	2		=			
ANR	866050	Identifier	idx		866042	0					
ANR	866051	CastExpression	( ut8 ) cmd [ 0 ]		866042	1					
ANR	866052	CastTarget	ut8		866042	0					
ANR	866053	ArrayIndexing	cmd [ 0 ]		866042	1					
ANR	866054	Identifier	cmd		866042	0					
ANR	866055	PrimaryExpression	0		866042	1					
ANR	866056	IdentifierDeclStatement	RCmdItem * item = c -> cmds [ idx ] ;	192:1:4429:4458	866042	1	True				
ANR	866057	IdentifierDecl	* item = c -> cmds [ idx ]		866042	0					
ANR	866058	IdentifierDeclType	RCmdItem *		866042	0					
ANR	866059	Identifier	item		866042	1					
ANR	866060	AssignmentExpression	* item = c -> cmds [ idx ]		866042	2		=			
ANR	866061	Identifier	item		866042	0					
ANR	866062	ArrayIndexing	c -> cmds [ idx ]		866042	1					
ANR	866063	PtrMemberAccess	c -> cmds		866042	0					
ANR	866064	Identifier	c		866042	0					
ANR	866065	Identifier	cmds		866042	1					
ANR	866066	Identifier	idx		866042	1					
ANR	866067	IfStatement	if ( ! item )		866042	2					
ANR	866068	Condition	! item	193:5:4465:4469	866042	0	True				
ANR	866069	UnaryOperationExpression	! item		866042	0					
ANR	866070	UnaryOperator	!		866042	0					
ANR	866071	Identifier	item		866042	1					
ANR	866072	CompoundStatement		4:12:69:69	866042	1					
ANR	866073	ExpressionStatement	item = R_NEW0 ( RCmdItem )	194:2:4476:4500	866042	0	True				
ANR	866074	AssignmentExpression	item = R_NEW0 ( RCmdItem )		866042	0		=			
ANR	866075	Identifier	item		866042	0					
ANR	866076	CallExpression	R_NEW0 ( RCmdItem )		866042	1					
ANR	866077	Callee	R_NEW0		866042	0					
ANR	866078	Identifier	R_NEW0		866042	0					
ANR	866079	ArgumentList	RCmdItem		866042	1					
ANR	866080	Argument	RCmdItem		866042	0					
ANR	866081	Identifier	RCmdItem		866042	0					
ANR	866082	ExpressionStatement	c -> cmds [ idx ] = item	195:2:4504:4523	866042	1	True				
ANR	866083	AssignmentExpression	c -> cmds [ idx ] = item		866042	0		=			
ANR	866084	ArrayIndexing	c -> cmds [ idx ]		866042	0					
ANR	866085	PtrMemberAccess	c -> cmds		866042	0					
ANR	866086	Identifier	c		866042	0					
ANR	866087	Identifier	cmds		866042	1					
ANR	866088	Identifier	idx		866042	1					
ANR	866089	Identifier	item		866042	1					
ANR	866090	ExpressionStatement	"strncpy ( item -> cmd , cmd , sizeof ( item -> cmd ) - 1 )"	197:1:4529:4575	866042	3	True				
ANR	866091	CallExpression	"strncpy ( item -> cmd , cmd , sizeof ( item -> cmd ) - 1 )"		866042	0					
ANR	866092	Callee	strncpy		866042	0					
ANR	866093	Identifier	strncpy		866042	0					
ANR	866094	ArgumentList	item -> cmd		866042	1					
ANR	866095	Argument	item -> cmd		866042	0					
ANR	866096	PtrMemberAccess	item -> cmd		866042	0					
ANR	866097	Identifier	item		866042	0					
ANR	866098	Identifier	cmd		866042	1					
ANR	866099	Argument	cmd		866042	1					
ANR	866100	Identifier	cmd		866042	0					
ANR	866101	Argument	sizeof ( item -> cmd ) - 1		866042	2					
ANR	866102	AdditiveExpression	sizeof ( item -> cmd ) - 1		866042	0		-			
ANR	866103	SizeofExpression	sizeof ( item -> cmd )		866042	0					
ANR	866104	Sizeof	sizeof		866042	0					
ANR	866105	PtrMemberAccess	item -> cmd		866042	1					
ANR	866106	Identifier	item		866042	0					
ANR	866107	Identifier	cmd		866042	1					
ANR	866108	PrimaryExpression	1		866042	1					
ANR	866109	ExpressionStatement	"strncpy ( item -> desc , desc , sizeof ( item -> desc ) - 1 )"	198:1:4578:4627	866042	4	True				
ANR	866110	CallExpression	"strncpy ( item -> desc , desc , sizeof ( item -> desc ) - 1 )"		866042	0					
ANR	866111	Callee	strncpy		866042	0					
ANR	866112	Identifier	strncpy		866042	0					
ANR	866113	ArgumentList	item -> desc		866042	1					
ANR	866114	Argument	item -> desc		866042	0					
ANR	866115	PtrMemberAccess	item -> desc		866042	0					
ANR	866116	Identifier	item		866042	0					
ANR	866117	Identifier	desc		866042	1					
ANR	866118	Argument	desc		866042	1					
ANR	866119	Identifier	desc		866042	0					
ANR	866120	Argument	sizeof ( item -> desc ) - 1		866042	2					
ANR	866121	AdditiveExpression	sizeof ( item -> desc ) - 1		866042	0		-			
ANR	866122	SizeofExpression	sizeof ( item -> desc )		866042	0					
ANR	866123	Sizeof	sizeof		866042	0					
ANR	866124	PtrMemberAccess	item -> desc		866042	1					
ANR	866125	Identifier	item		866042	0					
ANR	866126	Identifier	desc		866042	1					
ANR	866127	PrimaryExpression	1		866042	1					
ANR	866128	ExpressionStatement	item -> callback = cb	199:1:4630:4649	866042	5	True				
ANR	866129	AssignmentExpression	item -> callback = cb		866042	0		=			
ANR	866130	PtrMemberAccess	item -> callback		866042	0					
ANR	866131	Identifier	item		866042	0					
ANR	866132	Identifier	callback		866042	1					
ANR	866133	Identifier	cb		866042	1					
ANR	866134	ReturnStatement	return true ;	200:1:4652:4663	866042	6	True				
ANR	866135	Identifier	true		866042	0					
ANR	866136	ReturnType	R_API int		866042	1					
ANR	866137	Identifier	r_cmd_add		866042	2					
ANR	866138	ParameterList	"RCmd * c , const char * cmd , const char * desc , r_cmd_callback ( cb )"		866042	3					
ANR	866139	Parameter	RCmd * c	190:20:4338:4344	866042	0	True				
ANR	866140	ParameterType	RCmd *		866042	0					
ANR	866141	Identifier	c		866042	1					
ANR	866142	Parameter	const char * cmd	190:29:4347:4361	866042	1	True				
ANR	866143	ParameterType	const char *		866042	0					
ANR	866144	Identifier	cmd		866042	1					
ANR	866145	Parameter	const char * desc	190:46:4364:4379	866042	2	True				
ANR	866146	ParameterType	const char *		866042	0					
ANR	866147	Identifier	desc		866042	1					
ANR	866148	Parameter	r_cmd_callback ( cb )	190:64:4382:4399	866042	3	True				
ANR	866149	ParameterType	(r_cmd_callback)		866042	0					
ANR	866150	Identifier	cb		866042	1					
ANR	866151	CFGEntryNode	ENTRY		866042		True				
ANR	866152	CFGExitNode	EXIT		866042		True				
ANR	866153	Symbol	item		866042						
ANR	866154	Symbol	item -> callback		866042						
ANR	866155	Symbol	c		866042						
ANR	866156	Symbol	item -> desc		866042						
ANR	866157	Symbol	item -> cmd		866042						
ANR	866158	Symbol	* * c		866042						
ANR	866159	Symbol	* c		866042						
ANR	866160	Symbol	R_NEW0		866042						
ANR	866161	Symbol	* c -> cmds		866042						
ANR	866162	Symbol	* item		866042						
ANR	866163	Symbol	c -> cmds		866042						
ANR	866164	Symbol	* idx		866042						
ANR	866165	Symbol	true		866042						
ANR	866166	Symbol	cmd		866042						
ANR	866167	Symbol	* cmd		866042						
ANR	866168	Symbol	idx		866042						
ANR	866169	Symbol	RCmdItem		866042						
ANR	866170	Symbol	desc		866042						
ANR	866171	Symbol	cb		866042						
ANR	866172	Function	r_cmd_del	203:0:4668:4787							
ANR	866173	FunctionDef	"r_cmd_del (RCmd * cmd , const char * command)"		866172	0					
ANR	866174	CompoundStatement		203:52:4720:4787	866172	0					
ANR	866175	IdentifierDeclStatement	int idx = ( ut8 ) command [ 0 ] ;	204:1:4723:4748	866172	0	True				
ANR	866176	IdentifierDecl	idx = ( ut8 ) command [ 0 ]		866172	0					
ANR	866177	IdentifierDeclType	int		866172	0					
ANR	866178	Identifier	idx		866172	1					
ANR	866179	AssignmentExpression	idx = ( ut8 ) command [ 0 ]		866172	2		=			
ANR	866180	Identifier	idx		866172	0					
ANR	866181	CastExpression	( ut8 ) command [ 0 ]		866172	1					
ANR	866182	CastTarget	ut8		866172	0					
ANR	866183	ArrayIndexing	command [ 0 ]		866172	1					
ANR	866184	Identifier	command		866172	0					
ANR	866185	PrimaryExpression	0		866172	1					
ANR	866186	ExpressionStatement	R_FREE ( cmd -> cmds [ idx ] )	205:1:4751:4774	866172	1	True				
ANR	866187	CallExpression	R_FREE ( cmd -> cmds [ idx ] )		866172	0					
ANR	866188	Callee	R_FREE		866172	0					
ANR	866189	Identifier	R_FREE		866172	0					
ANR	866190	ArgumentList	cmd -> cmds [ idx ]		866172	1					
ANR	866191	Argument	cmd -> cmds [ idx ]		866172	0					
ANR	866192	ArrayIndexing	cmd -> cmds [ idx ]		866172	0					
ANR	866193	PtrMemberAccess	cmd -> cmds		866172	0					
ANR	866194	Identifier	cmd		866172	0					
ANR	866195	Identifier	cmds		866172	1					
ANR	866196	Identifier	idx		866172	1					
ANR	866197	ReturnStatement	return 0 ;	206:1:4777:4785	866172	2	True				
ANR	866198	PrimaryExpression	0		866172	0					
ANR	866199	ReturnType	R_API int		866172	1					
ANR	866200	Identifier	r_cmd_del		866172	2					
ANR	866201	ParameterList	"RCmd * cmd , const char * command"		866172	3					
ANR	866202	Parameter	RCmd * cmd	203:20:4688:4696	866172	0	True				
ANR	866203	ParameterType	RCmd *		866172	0					
ANR	866204	Identifier	cmd		866172	1					
ANR	866205	Parameter	const char * command	203:31:4699:4717	866172	1	True				
ANR	866206	ParameterType	const char *		866172	0					
ANR	866207	Identifier	command		866172	1					
ANR	866208	CFGEntryNode	ENTRY		866172		True				
ANR	866209	CFGExitNode	EXIT		866172		True				
ANR	866210	Symbol	* command		866172						
ANR	866211	Symbol	* idx		866172						
ANR	866212	Symbol	cmd		866172						
ANR	866213	Symbol	* cmd		866172						
ANR	866214	Symbol	idx		866172						
ANR	866215	Symbol	* cmd -> cmds		866172						
ANR	866216	Symbol	command		866172						
ANR	866217	Symbol	* * cmd		866172						
ANR	866218	Symbol	cmd -> cmds		866172						
ANR	866219	Function	r_cmd_call	209:0:4790:5672							
ANR	866220	FunctionDef	"r_cmd_call (RCmd * cmd , const char * input)"		866219	0					
ANR	866221	CompoundStatement		209:51:4841:5672	866219	0					
ANR	866222	IdentifierDeclStatement	struct r_cmd_item_t * c ;	210:1:4844:4866	866219	0	True				
ANR	866223	IdentifierDecl	* c		866219	0					
ANR	866224	IdentifierDeclType	struct r_cmd_item_t *		866219	0					
ANR	866225	Identifier	c		866219	1					
ANR	866226	IdentifierDeclStatement	int ret = - 1 ;	211:1:4869:4881	866219	1	True				
ANR	866227	IdentifierDecl	ret = - 1		866219	0					
ANR	866228	IdentifierDeclType	int		866219	0					
ANR	866229	Identifier	ret		866219	1					
ANR	866230	AssignmentExpression	ret = - 1		866219	2		=			
ANR	866231	Identifier	ret		866219	0					
ANR	866232	UnaryOperationExpression	- 1		866219	1					
ANR	866233	UnaryOperator	-		866219	0					
ANR	866234	PrimaryExpression	1		866219	1					
ANR	866235	IdentifierDeclStatement	RListIter * iter ;	212:1:4884:4899	866219	2	True				
ANR	866236	IdentifierDecl	* iter		866219	0					
ANR	866237	IdentifierDeclType	RListIter *		866219	0					
ANR	866238	Identifier	iter		866219	1					
ANR	866239	IdentifierDeclStatement	RCorePlugin * cp ;	213:1:4902:4917	866219	3	True				
ANR	866240	IdentifierDecl	* cp		866219	0					
ANR	866241	IdentifierDeclType	RCorePlugin *		866219	0					
ANR	866242	Identifier	cp		866219	1					
ANR	866243	ExpressionStatement	"r_return_val_if_fail ( cmd && input , - 1 )"	214:1:4920:4959	866219	4	True				
ANR	866244	CallExpression	"r_return_val_if_fail ( cmd && input , - 1 )"		866219	0					
ANR	866245	Callee	r_return_val_if_fail		866219	0					
ANR	866246	Identifier	r_return_val_if_fail		866219	0					
ANR	866247	ArgumentList	cmd && input		866219	1					
ANR	866248	Argument	cmd && input		866219	0					
ANR	866249	AndExpression	cmd && input		866219	0		&&			
ANR	866250	Identifier	cmd		866219	0					
ANR	866251	Identifier	input		866219	1					
ANR	866252	Argument	- 1		866219	1					
ANR	866253	UnaryOperationExpression	- 1		866219	0					
ANR	866254	UnaryOperator	-		866219	0					
ANR	866255	PrimaryExpression	1		866219	1					
ANR	866256	IfStatement	if ( ! * input )		866219	5					
ANR	866257	Condition	! * input	215:5:4966:4972	866219	0	True				
ANR	866258	UnaryOperationExpression	! * input		866219	0					
ANR	866259	UnaryOperator	!		866219	0					
ANR	866260	UnaryOperationExpression	* input		866219	1					
ANR	866261	UnaryOperator	*		866219	0					
ANR	866262	Identifier	input		866219	1					
ANR	866263	CompoundStatement		7:14:133:133	866219	1					
ANR	866264	IfStatement	if ( cmd -> nullcallback )		866219	0					
ANR	866265	Condition	cmd -> nullcallback	216:6:4983:4999	866219	0	True				
ANR	866266	PtrMemberAccess	cmd -> nullcallback		866219	0					
ANR	866267	Identifier	cmd		866219	0					
ANR	866268	Identifier	nullcallback		866219	1					
ANR	866269	CompoundStatement		8:25:160:160	866219	1					
ANR	866270	ExpressionStatement	ret = cmd -> nullcallback ( cmd -> data )	217:3:5007:5042	866219	0	True				
ANR	866271	AssignmentExpression	ret = cmd -> nullcallback ( cmd -> data )		866219	0		=			
ANR	866272	Identifier	ret		866219	0					
ANR	866273	CallExpression	cmd -> nullcallback ( cmd -> data )		866219	1					
ANR	866274	Callee	cmd -> nullcallback		866219	0					
ANR	866275	PtrMemberAccess	cmd -> nullcallback		866219	0					
ANR	866276	Identifier	cmd		866219	0					
ANR	866277	Identifier	nullcallback		866219	1					
ANR	866278	ArgumentList	cmd -> data		866219	1					
ANR	866279	Argument	cmd -> data		866219	0					
ANR	866280	PtrMemberAccess	cmd -> data		866219	0					
ANR	866281	Identifier	cmd		866219	0					
ANR	866282	Identifier	data		866219	1					
ANR	866283	ElseStatement	else		866219	0					
ANR	866284	CompoundStatement		13:2:239:287	866219	0					
ANR	866285	IdentifierDeclStatement	char * nstr = NULL ;	220:2:5060:5077	866219	0	True				
ANR	866286	IdentifierDecl	* nstr = NULL		866219	0					
ANR	866287	IdentifierDeclType	char *		866219	0					
ANR	866288	Identifier	nstr		866219	1					
ANR	866289	AssignmentExpression	* nstr = NULL		866219	2		=			
ANR	866290	Identifier	NULL		866219	0					
ANR	866291	Identifier	NULL		866219	1					
ANR	866292	IdentifierDeclStatement	"const char * ji = r_cmd_alias_get ( cmd , input , 1 ) ;"	221:2:5081:5129	866219	1	True				
ANR	866293	IdentifierDecl	"* ji = r_cmd_alias_get ( cmd , input , 1 )"		866219	0					
ANR	866294	IdentifierDeclType	const char *		866219	0					
ANR	866295	Identifier	ji		866219	1					
ANR	866296	AssignmentExpression	"* ji = r_cmd_alias_get ( cmd , input , 1 )"		866219	2		=			
ANR	866297	Identifier	ji		866219	0					
ANR	866298	CallExpression	"r_cmd_alias_get ( cmd , input , 1 )"		866219	1					
ANR	866299	Callee	r_cmd_alias_get		866219	0					
ANR	866300	Identifier	r_cmd_alias_get		866219	0					
ANR	866301	ArgumentList	cmd		866219	1					
ANR	866302	Argument	cmd		866219	0					
ANR	866303	Identifier	cmd		866219	0					
ANR	866304	Argument	input		866219	1					
ANR	866305	Identifier	input		866219	0					
ANR	866306	Argument	1		866219	2					
ANR	866307	PrimaryExpression	1		866219	0					
ANR	866308	IfStatement	if ( ji )		866219	2					
ANR	866309	Condition	ji	222:6:5137:5138	866219	0	True				
ANR	866310	Identifier	ji		866219	0					
ANR	866311	CompoundStatement		14:10:299:299	866219	1					
ANR	866312	IfStatement	if ( * ji == '$' )		866219	0					
ANR	866313	Condition	* ji == '$'	223:7:5150:5159	866219	0	True				
ANR	866314	EqualityExpression	* ji == '$'		866219	0		==			
ANR	866315	UnaryOperationExpression	* ji		866219	0					
ANR	866316	UnaryOperator	*		866219	0					
ANR	866317	Identifier	ji		866219	1					
ANR	866318	PrimaryExpression	'$'		866219	1					
ANR	866319	CompoundStatement		15:19:320:320	866219	1					
ANR	866320	ExpressionStatement	r_cons_strcat ( ji + 1 )	224:4:5168:5190	866219	0	True				
ANR	866321	CallExpression	r_cons_strcat ( ji + 1 )		866219	0					
ANR	866322	Callee	r_cons_strcat		866219	0					
ANR	866323	Identifier	r_cons_strcat		866219	0					
ANR	866324	ArgumentList	ji + 1		866219	1					
ANR	866325	Argument	ji + 1		866219	0					
ANR	866326	AdditiveExpression	ji + 1		866219	0		+			
ANR	866327	Identifier	ji		866219	0					
ANR	866328	PrimaryExpression	1		866219	1					
ANR	866329	ReturnStatement	return true ;	225:4:5196:5207	866219	1	True				
ANR	866330	Identifier	true		866219	0					
ANR	866331	ElseStatement	else		866219	0					
ANR	866332	CompoundStatement		18:10:377:377	866219	0					
ANR	866333	ExpressionStatement	"nstr = r_str_newf ( ""=!%s"" , input )"	227:4:5225:5258	866219	0	True				
ANR	866334	AssignmentExpression	"nstr = r_str_newf ( ""=!%s"" , input )"		866219	0		=			
ANR	866335	Identifier	nstr		866219	0					
ANR	866336	CallExpression	"r_str_newf ( ""=!%s"" , input )"		866219	1					
ANR	866337	Callee	r_str_newf		866219	0					
ANR	866338	Identifier	r_str_newf		866219	0					
ANR	866339	ArgumentList	"""=!%s"""		866219	1					
ANR	866340	Argument	"""=!%s"""		866219	0					
ANR	866341	PrimaryExpression	"""=!%s"""		866219	0					
ANR	866342	Argument	input		866219	1					
ANR	866343	Identifier	input		866219	0					
ANR	866344	ExpressionStatement	input = nstr	228:4:5264:5276	866219	1	True				
ANR	866345	AssignmentExpression	input = nstr		866219	0		=			
ANR	866346	Identifier	input		866219	0					
ANR	866347	Identifier	nstr		866219	1					
ANR	866348	Statement	r_list_foreach	231:2:5289:5302	866219	3	True				
ANR	866349	Statement	(	231:17:5304:5304	866219	4	True				
ANR	866350	Statement	cmd	231:18:5305:5307	866219	5	True				
ANR	866351	Statement	->	231:21:5308:5309	866219	6	True				
ANR	866352	Statement	plist	231:23:5310:5314	866219	7	True				
ANR	866353	Statement	","	231:28:5315:5315	866219	8	True				
ANR	866354	Statement	iter	231:30:5317:5320	866219	9	True				
ANR	866355	Statement	","	231:34:5321:5321	866219	10	True				
ANR	866356	Statement	cp	231:36:5323:5324	866219	11	True				
ANR	866357	Statement	)	231:38:5325:5325	866219	12	True				
ANR	866358	CompoundStatement		23:40:485:485	866219	13					
ANR	866359	IfStatement	"if ( cp -> call ( cmd -> data , input ) )"		866219	0					
ANR	866360	Condition	"cp -> call ( cmd -> data , input )"	232:7:5336:5362	866219	0	True				
ANR	866361	CallExpression	"cp -> call ( cmd -> data , input )"		866219	0					
ANR	866362	Callee	cp -> call		866219	0					
ANR	866363	PtrMemberAccess	cp -> call		866219	0					
ANR	866364	Identifier	cp		866219	0					
ANR	866365	Identifier	call		866219	1					
ANR	866366	ArgumentList	cmd -> data		866219	1					
ANR	866367	Argument	cmd -> data		866219	0					
ANR	866368	PtrMemberAccess	cmd -> data		866219	0					
ANR	866369	Identifier	cmd		866219	0					
ANR	866370	Identifier	data		866219	1					
ANR	866371	Argument	input		866219	1					
ANR	866372	Identifier	input		866219	0					
ANR	866373	CompoundStatement		24:36:523:523	866219	1					
ANR	866374	ExpressionStatement	free ( nstr )	233:4:5371:5382	866219	0	True				
ANR	866375	CallExpression	free ( nstr )		866219	0					
ANR	866376	Callee	free		866219	0					
ANR	866377	Identifier	free		866219	0					
ANR	866378	ArgumentList	nstr		866219	1					
ANR	866379	Argument	nstr		866219	0					
ANR	866380	Identifier	nstr		866219	0					
ANR	866381	ReturnStatement	return true ;	234:4:5388:5399	866219	1	True				
ANR	866382	Identifier	true		866219	0					
ANR	866383	IfStatement	if ( ! * input )		866219	14					
ANR	866384	Condition	! * input	237:6:5416:5422	866219	0	True				
ANR	866385	UnaryOperationExpression	! * input		866219	0					
ANR	866386	UnaryOperator	!		866219	0					
ANR	866387	UnaryOperationExpression	* input		866219	1					
ANR	866388	UnaryOperator	*		866219	0					
ANR	866389	Identifier	input		866219	1					
ANR	866390	CompoundStatement		29:15:583:583	866219	1					
ANR	866391	ExpressionStatement	free ( nstr )	238:3:5430:5441	866219	0	True				
ANR	866392	CallExpression	free ( nstr )		866219	0					
ANR	866393	Callee	free		866219	0					
ANR	866394	Identifier	free		866219	0					
ANR	866395	ArgumentList	nstr		866219	1					
ANR	866396	Argument	nstr		866219	0					
ANR	866397	Identifier	nstr		866219	0					
ANR	866398	ReturnStatement	return - 1 ;	239:3:5446:5455	866219	1	True				
ANR	866399	UnaryOperationExpression	- 1		866219	0					
ANR	866400	UnaryOperator	-		866219	0					
ANR	866401	PrimaryExpression	1		866219	1					
ANR	866402	ExpressionStatement	c = cmd -> cmds [ ( ( ut8 ) input [ 0 ] ) & 0xff ]	241:2:5463:5500	866219	15	True				
ANR	866403	AssignmentExpression	c = cmd -> cmds [ ( ( ut8 ) input [ 0 ] ) & 0xff ]		866219	0		=			
ANR	866404	Identifier	c		866219	0					
ANR	866405	ArrayIndexing	cmd -> cmds [ ( ( ut8 ) input [ 0 ] ) & 0xff ]		866219	1					
ANR	866406	PtrMemberAccess	cmd -> cmds		866219	0					
ANR	866407	Identifier	cmd		866219	0					
ANR	866408	Identifier	cmds		866219	1					
ANR	866409	BitAndExpression	( ( ut8 ) input [ 0 ] ) & 0xff		866219	1		&			
ANR	866410	CastExpression	( ut8 ) input [ 0 ]		866219	0					
ANR	866411	CastTarget	ut8		866219	0					
ANR	866412	ArrayIndexing	input [ 0 ]		866219	1					
ANR	866413	Identifier	input		866219	0					
ANR	866414	PrimaryExpression	0		866219	1					
ANR	866415	PrimaryExpression	0xff		866219	1					
ANR	866416	IfStatement	if ( c && c -> callback )		866219	16					
ANR	866417	Condition	c && c -> callback	242:6:5508:5523	866219	0	True				
ANR	866418	AndExpression	c && c -> callback		866219	0		&&			
ANR	866419	Identifier	c		866219	0					
ANR	866420	PtrMemberAccess	c -> callback		866219	1					
ANR	866421	Identifier	c		866219	0					
ANR	866422	Identifier	callback		866219	1					
ANR	866423	CompoundStatement		35:3:689:730	866219	1					
ANR	866424	IdentifierDeclStatement	"const char * inp = ( * input ) ? input + 1 : """" ;"	243:3:5531:5572	866219	0	True				
ANR	866425	IdentifierDecl	"* inp = ( * input ) ? input + 1 : """""		866219	0					
ANR	866426	IdentifierDeclType	const char *		866219	0					
ANR	866427	Identifier	inp		866219	1					
ANR	866428	AssignmentExpression	"* inp = ( * input ) ? input + 1 : """""		866219	2		=			
ANR	866429	Identifier	inp		866219	0					
ANR	866430	ConditionalExpression	"( * input ) ? input + 1 : """""		866219	1					
ANR	866431	Condition	* input		866219	0					
ANR	866432	UnaryOperationExpression	* input		866219	0					
ANR	866433	UnaryOperator	*		866219	0					
ANR	866434	Identifier	input		866219	1					
ANR	866435	AdditiveExpression	input + 1		866219	1		+			
ANR	866436	Identifier	input		866219	0					
ANR	866437	PrimaryExpression	1		866219	1					
ANR	866438	PrimaryExpression	""""""		866219	2					
ANR	866439	ExpressionStatement	"ret = c -> callback ( cmd -> data , inp )"	244:3:5577:5611	866219	1	True				
ANR	866440	AssignmentExpression	"ret = c -> callback ( cmd -> data , inp )"		866219	0		=			
ANR	866441	Identifier	ret		866219	0					
ANR	866442	CallExpression	"c -> callback ( cmd -> data , inp )"		866219	1					
ANR	866443	Callee	c -> callback		866219	0					
ANR	866444	PtrMemberAccess	c -> callback		866219	0					
ANR	866445	Identifier	c		866219	0					
ANR	866446	Identifier	callback		866219	1					
ANR	866447	ArgumentList	cmd -> data		866219	1					
ANR	866448	Argument	cmd -> data		866219	0					
ANR	866449	PtrMemberAccess	cmd -> data		866219	0					
ANR	866450	Identifier	cmd		866219	0					
ANR	866451	Identifier	data		866219	1					
ANR	866452	Argument	inp		866219	1					
ANR	866453	Identifier	inp		866219	0					
ANR	866454	ElseStatement	else		866219	0					
ANR	866455	CompoundStatement		37:9:780:780	866219	0					
ANR	866456	ExpressionStatement	ret = - 1	246:3:5627:5635	866219	0	True				
ANR	866457	AssignmentExpression	ret = - 1		866219	0		=			
ANR	866458	Identifier	ret		866219	0					
ANR	866459	UnaryOperationExpression	- 1		866219	1					
ANR	866460	UnaryOperator	-		866219	0					
ANR	866461	PrimaryExpression	1		866219	1					
ANR	866462	ExpressionStatement	free ( nstr )	248:2:5643:5654	866219	17	True				
ANR	866463	CallExpression	free ( nstr )		866219	0					
ANR	866464	Callee	free		866219	0					
ANR	866465	Identifier	free		866219	0					
ANR	866466	ArgumentList	nstr		866219	1					
ANR	866467	Argument	nstr		866219	0					
ANR	866468	Identifier	nstr		866219	0					
ANR	866469	ReturnStatement	return ret ;	250:1:5660:5670	866219	6	True				
ANR	866470	Identifier	ret		866219	0					
ANR	866471	ReturnType	R_API int		866219	1					
ANR	866472	Identifier	r_cmd_call		866219	2					
ANR	866473	ParameterList	"RCmd * cmd , const char * input"		866219	3					
ANR	866474	Parameter	RCmd * cmd	209:21:4811:4819	866219	0	True				
ANR	866475	ParameterType	RCmd *		866219	0					
ANR	866476	Identifier	cmd		866219	1					
ANR	866477	Parameter	const char * input	209:32:4822:4838	866219	1	True				
ANR	866478	ParameterType	const char *		866219	0					
ANR	866479	Identifier	input		866219	1					
ANR	866480	CFGEntryNode	ENTRY		866219		True				
ANR	866481	CFGExitNode	EXIT		866219		True				
ANR	866482	Symbol	cmd -> nullcallback		866219						
ANR	866483	Symbol	* input		866219						
ANR	866484	Symbol	cp -> call		866219						
ANR	866485	Symbol	r_str_newf		866219						
ANR	866486	Symbol	* * cmd		866219						
ANR	866487	Symbol	* cmd		866219						
ANR	866488	Symbol	cmd -> data		866219						
ANR	866489	Symbol	r_cmd_alias_get		866219						
ANR	866490	Symbol	ret		866219						
ANR	866491	Symbol	c		866219						
ANR	866492	Symbol	NULL		866219						
ANR	866493	Symbol	* * input		866219						
ANR	866494	Symbol	* ji		866219						
ANR	866495	Symbol	iter		866219						
ANR	866496	Symbol	inp		866219						
ANR	866497	Symbol	cp		866219						
ANR	866498	Symbol	* cmd -> cmds		866219						
ANR	866499	Symbol	* c		866219						
ANR	866500	Symbol	cmd -> cmds		866219						
ANR	866501	Symbol	nstr		866219						
ANR	866502	Symbol	* cp		866219						
ANR	866503	Symbol	c -> callback		866219						
ANR	866504	Symbol	input		866219						
ANR	866505	Symbol	true		866219						
ANR	866506	Symbol	cmd		866219						
ANR	866507	Symbol	ji		866219						
ANR	866508	Function	r_cmd_call_long	253:0:5675:6341							
ANR	866509	FunctionDef	"r_cmd_call_long (RCmd * cmd , const char * input)"		866508	0					
ANR	866510	CompoundStatement		253:56:5731:6341	866508	0					
ANR	866511	IdentifierDeclStatement	char * inp ;	254:1:5734:5743	866508	0	True				
ANR	866512	IdentifierDecl	* inp		866508	0					
ANR	866513	IdentifierDeclType	char *		866508	0					
ANR	866514	Identifier	inp		866508	1					
ANR	866515	IdentifierDeclStatement	RListIter * iter ;	255:1:5746:5761	866508	1	True				
ANR	866516	IdentifierDecl	* iter		866508	0					
ANR	866517	IdentifierDeclType	RListIter *		866508	0					
ANR	866518	Identifier	iter		866508	1					
ANR	866519	IdentifierDeclStatement	RCmdLongItem * c ;	256:1:5764:5779	866508	2	True				
ANR	866520	IdentifierDecl	* c		866508	0					
ANR	866521	IdentifierDeclType	RCmdLongItem *		866508	0					
ANR	866522	Identifier	c		866508	1					
ANR	866523	IdentifierDeclStatement	"int ret , inplen = strlen ( input ) + 1 ;"	257:1:5782:5816	866508	3	True				
ANR	866524	IdentifierDecl	ret		866508	0					
ANR	866525	IdentifierDeclType	int		866508	0					
ANR	866526	Identifier	ret		866508	1					
ANR	866527	IdentifierDecl	inplen = strlen ( input ) + 1		866508	1					
ANR	866528	IdentifierDeclType	int		866508	0					
ANR	866529	Identifier	inplen		866508	1					
ANR	866530	AssignmentExpression	inplen = strlen ( input ) + 1		866508	2		=			
ANR	866531	Identifier	inplen		866508	0					
ANR	866532	AdditiveExpression	strlen ( input ) + 1		866508	1		+			
ANR	866533	CallExpression	strlen ( input )		866508	0					
ANR	866534	Callee	strlen		866508	0					
ANR	866535	Identifier	strlen		866508	0					
ANR	866536	ArgumentList	input		866508	1					
ANR	866537	Argument	input		866508	0					
ANR	866538	Identifier	input		866508	0					
ANR	866539	PrimaryExpression	1		866508	1					
ANR	866540	Statement	r_list_foreach	259:1:5820:5833	866508	4	True				
ANR	866541	Statement	(	259:16:5835:5835	866508	5	True				
ANR	866542	Statement	cmd	259:17:5836:5838	866508	6	True				
ANR	866543	Statement	->	259:20:5839:5840	866508	7	True				
ANR	866544	Statement	lcmds	259:22:5841:5845	866508	8	True				
ANR	866545	Statement	","	259:27:5846:5846	866508	9	True				
ANR	866546	Statement	iter	259:29:5848:5851	866508	10	True				
ANR	866547	Statement	","	259:33:5852:5852	866508	11	True				
ANR	866548	Statement	c	259:35:5854:5854	866508	12	True				
ANR	866549	Statement	)	259:36:5855:5855	866508	13	True				
ANR	866550	CompoundStatement		7:38:125:125	866508	14					
ANR	866551	IfStatement	"if ( inplen >= c -> cmd_len && ! r_str_cmp ( input , c -> cmd , c -> cmd_len ) )"		866508	0					
ANR	866552	Condition	"inplen >= c -> cmd_len && ! r_str_cmp ( input , c -> cmd , c -> cmd_len )"	260:6:5865:5926	866508	0	True				
ANR	866553	AndExpression	"inplen >= c -> cmd_len && ! r_str_cmp ( input , c -> cmd , c -> cmd_len )"		866508	0		&&			
ANR	866554	RelationalExpression	inplen >= c -> cmd_len		866508	0		>=			
ANR	866555	Identifier	inplen		866508	0					
ANR	866556	PtrMemberAccess	c -> cmd_len		866508	1					
ANR	866557	Identifier	c		866508	0					
ANR	866558	Identifier	cmd_len		866508	1					
ANR	866559	UnaryOperationExpression	"! r_str_cmp ( input , c -> cmd , c -> cmd_len )"		866508	1					
ANR	866560	UnaryOperator	!		866508	0					
ANR	866561	CallExpression	"r_str_cmp ( input , c -> cmd , c -> cmd_len )"		866508	1					
ANR	866562	Callee	r_str_cmp		866508	0					
ANR	866563	Identifier	r_str_cmp		866508	0					
ANR	866564	ArgumentList	input		866508	1					
ANR	866565	Argument	input		866508	0					
ANR	866566	Identifier	input		866508	0					
ANR	866567	Argument	c -> cmd		866508	1					
ANR	866568	PtrMemberAccess	c -> cmd		866508	0					
ANR	866569	Identifier	c		866508	0					
ANR	866570	Identifier	cmd		866508	1					
ANR	866571	Argument	c -> cmd_len		866508	2					
ANR	866572	PtrMemberAccess	c -> cmd_len		866508	0					
ANR	866573	Identifier	c		866508	0					
ANR	866574	Identifier	cmd_len		866508	1					
ANR	866575	CompoundStatement		10:3:239:275	866508	1					
ANR	866576	IdentifierDeclStatement	int lcmd = strlen ( c -> cmd_short ) ;	261:3:5934:5966	866508	0	True				
ANR	866577	IdentifierDecl	lcmd = strlen ( c -> cmd_short )		866508	0					
ANR	866578	IdentifierDeclType	int		866508	0					
ANR	866579	Identifier	lcmd		866508	1					
ANR	866580	AssignmentExpression	lcmd = strlen ( c -> cmd_short )		866508	2		=			
ANR	866581	Identifier	lcmd		866508	0					
ANR	866582	CallExpression	strlen ( c -> cmd_short )		866508	1					
ANR	866583	Callee	strlen		866508	0					
ANR	866584	Identifier	strlen		866508	0					
ANR	866585	ArgumentList	c -> cmd_short		866508	1					
ANR	866586	Argument	c -> cmd_short		866508	0					
ANR	866587	PtrMemberAccess	c -> cmd_short		866508	0					
ANR	866588	Identifier	c		866508	0					
ANR	866589	Identifier	cmd_short		866508	1					
ANR	866590	IdentifierDeclStatement	int linp = strlen ( input + c -> cmd_len ) ;	262:3:5971:6007	866508	1	True				
ANR	866591	IdentifierDecl	linp = strlen ( input + c -> cmd_len )		866508	0					
ANR	866592	IdentifierDeclType	int		866508	0					
ANR	866593	Identifier	linp		866508	1					
ANR	866594	AssignmentExpression	linp = strlen ( input + c -> cmd_len )		866508	2		=			
ANR	866595	Identifier	linp		866508	0					
ANR	866596	CallExpression	strlen ( input + c -> cmd_len )		866508	1					
ANR	866597	Callee	strlen		866508	0					
ANR	866598	Identifier	strlen		866508	0					
ANR	866599	ArgumentList	input + c -> cmd_len		866508	1					
ANR	866600	Argument	input + c -> cmd_len		866508	0					
ANR	866601	AdditiveExpression	input + c -> cmd_len		866508	0		+			
ANR	866602	Identifier	input		866508	0					
ANR	866603	PtrMemberAccess	c -> cmd_len		866508	1					
ANR	866604	Identifier	c		866508	0					
ANR	866605	Identifier	cmd_len		866508	1					
ANR	866606	ExpressionStatement	inp = malloc ( lcmd + linp + 2 )	264:3:6061:6087	866508	2	True				
ANR	866607	AssignmentExpression	inp = malloc ( lcmd + linp + 2 )		866508	0		=			
ANR	866608	Identifier	inp		866508	0					
ANR	866609	CallExpression	malloc ( lcmd + linp + 2 )		866508	1					
ANR	866610	Callee	malloc		866508	0					
ANR	866611	Identifier	malloc		866508	0					
ANR	866612	ArgumentList	lcmd + linp + 2		866508	1					
ANR	866613	Argument	lcmd + linp + 2		866508	0					
ANR	866614	AdditiveExpression	lcmd + linp + 2		866508	0		+			
ANR	866615	Identifier	lcmd		866508	0					
ANR	866616	AdditiveExpression	linp + 2		866508	1		+			
ANR	866617	Identifier	linp		866508	0					
ANR	866618	PrimaryExpression	2		866508	1					
ANR	866619	IfStatement	if ( ! inp )		866508	3					
ANR	866620	Condition	! inp	265:7:6141:6144	866508	0	True				
ANR	866621	UnaryOperationExpression	! inp		866508	0					
ANR	866622	UnaryOperator	!		866508	0					
ANR	866623	Identifier	inp		866508	1					
ANR	866624	CompoundStatement		13:13:415:415	866508	1					
ANR	866625	ReturnStatement	return - 1 ;	266:4:6153:6162	866508	0	True				
ANR	866626	UnaryOperationExpression	- 1		866508	0					
ANR	866627	UnaryOperator	-		866508	0					
ANR	866628	PrimaryExpression	1		866508	1					
ANR	866629	ExpressionStatement	"memcpy ( inp , c -> cmd_short , lcmd )"	268:3:6172:6204	866508	4	True				
ANR	866630	CallExpression	"memcpy ( inp , c -> cmd_short , lcmd )"		866508	0					
ANR	866631	Callee	memcpy		866508	0					
ANR	866632	Identifier	memcpy		866508	0					
ANR	866633	ArgumentList	inp		866508	1					
ANR	866634	Argument	inp		866508	0					
ANR	866635	Identifier	inp		866508	0					
ANR	866636	Argument	c -> cmd_short		866508	1					
ANR	866637	PtrMemberAccess	c -> cmd_short		866508	0					
ANR	866638	Identifier	c		866508	0					
ANR	866639	Identifier	cmd_short		866508	1					
ANR	866640	Argument	lcmd		866508	2					
ANR	866641	Identifier	lcmd		866508	0					
ANR	866642	ExpressionStatement	"memcpy ( inp + lcmd , input + c -> cmd_len , linp + 1 )"	269:3:6209:6258	866508	5	True				
ANR	866643	CallExpression	"memcpy ( inp + lcmd , input + c -> cmd_len , linp + 1 )"		866508	0					
ANR	866644	Callee	memcpy		866508	0					
ANR	866645	Identifier	memcpy		866508	0					
ANR	866646	ArgumentList	inp + lcmd		866508	1					
ANR	866647	Argument	inp + lcmd		866508	0					
ANR	866648	AdditiveExpression	inp + lcmd		866508	0		+			
ANR	866649	Identifier	inp		866508	0					
ANR	866650	Identifier	lcmd		866508	1					
ANR	866651	Argument	input + c -> cmd_len		866508	1					
ANR	866652	AdditiveExpression	input + c -> cmd_len		866508	0		+			
ANR	866653	Identifier	input		866508	0					
ANR	866654	PtrMemberAccess	c -> cmd_len		866508	1					
ANR	866655	Identifier	c		866508	0					
ANR	866656	Identifier	cmd_len		866508	1					
ANR	866657	Argument	linp + 1		866508	2					
ANR	866658	AdditiveExpression	linp + 1		866508	0		+			
ANR	866659	Identifier	linp		866508	0					
ANR	866660	PrimaryExpression	1		866508	1					
ANR	866661	ExpressionStatement	"ret = r_cmd_call ( cmd , inp )"	270:3:6263:6290	866508	6	True				
ANR	866662	AssignmentExpression	"ret = r_cmd_call ( cmd , inp )"		866508	0		=			
ANR	866663	Identifier	ret		866508	0					
ANR	866664	CallExpression	"r_cmd_call ( cmd , inp )"		866508	1					
ANR	866665	Callee	r_cmd_call		866508	0					
ANR	866666	Identifier	r_cmd_call		866508	0					
ANR	866667	ArgumentList	cmd		866508	1					
ANR	866668	Argument	cmd		866508	0					
ANR	866669	Identifier	cmd		866508	0					
ANR	866670	Argument	inp		866508	1					
ANR	866671	Identifier	inp		866508	0					
ANR	866672	ExpressionStatement	free ( inp )	271:3:6295:6305	866508	7	True				
ANR	866673	CallExpression	free ( inp )		866508	0					
ANR	866674	Callee	free		866508	0					
ANR	866675	Identifier	free		866508	0					
ANR	866676	ArgumentList	inp		866508	1					
ANR	866677	Argument	inp		866508	0					
ANR	866678	Identifier	inp		866508	0					
ANR	866679	ReturnStatement	return ret ;	272:3:6310:6320	866508	8	True				
ANR	866680	Identifier	ret		866508	0					
ANR	866681	ReturnStatement	return - 1 ;	275:1:6330:6339	866508	15	True				
ANR	866682	UnaryOperationExpression	- 1		866508	0					
ANR	866683	UnaryOperator	-		866508	0					
ANR	866684	PrimaryExpression	1		866508	1					
ANR	866685	ReturnType	R_API int		866508	1					
ANR	866686	Identifier	r_cmd_call_long		866508	2					
ANR	866687	ParameterList	"RCmd * cmd , const char * input"		866508	3					
ANR	866688	Parameter	RCmd * cmd	253:26:5701:5709	866508	0	True				
ANR	866689	ParameterType	RCmd *		866508	0					
ANR	866690	Identifier	cmd		866508	1					
ANR	866691	Parameter	const char * input	253:37:5712:5728	866508	1	True				
ANR	866692	ParameterType	const char *		866508	0					
ANR	866693	Identifier	input		866508	1					
ANR	866694	CFGEntryNode	ENTRY		866508		True				
ANR	866695	CFGExitNode	EXIT		866508		True				
ANR	866696	Symbol	ret		866508						
ANR	866697	Symbol	malloc		866508						
ANR	866698	Symbol	c		866508						
ANR	866699	Symbol	inplen		866508						
ANR	866700	Symbol	iter		866508						
ANR	866701	Symbol	inp		866508						
ANR	866702	Symbol	* c		866508						
ANR	866703	Symbol	linp		866508						
ANR	866704	Symbol	r_str_cmp		866508						
ANR	866705	Symbol	input		866508						
ANR	866706	Symbol	strlen		866508						
ANR	866707	Symbol	r_cmd_call		866508						
ANR	866708	Symbol	c -> cmd		866508						
ANR	866709	Symbol	cmd		866508						
ANR	866710	Symbol	lcmd		866508						
ANR	866711	Symbol	c -> cmd_short		866508						
ANR	866712	Symbol	c -> cmd_len		866508						
ANR	866713	Function	r_cmd_macro_item_new	280:0:6361:6439							
ANR	866714	FunctionDef	r_cmd_macro_item_new ()		866713	0					
ANR	866715	CompoundStatement		280:44:6405:6439	866713	0					
ANR	866716	ReturnStatement	return R_NEW0 ( RCmdMacroItem ) ;	281:1:6408:6437	866713	0	True				
ANR	866717	CallExpression	R_NEW0 ( RCmdMacroItem )		866713	0					
ANR	866718	Callee	R_NEW0		866713	0					
ANR	866719	Identifier	R_NEW0		866713	0					
ANR	866720	ArgumentList	RCmdMacroItem		866713	1					
ANR	866721	Argument	RCmdMacroItem		866713	0					
ANR	866722	Identifier	RCmdMacroItem		866713	0					
ANR	866723	ReturnType	R_API RCmdMacroItem *		866713	1					
ANR	866724	Identifier	r_cmd_macro_item_new		866713	2					
ANR	866725	ParameterList			866713	3					
ANR	866726	CFGEntryNode	ENTRY		866713		True				
ANR	866727	CFGExitNode	EXIT		866713		True				
ANR	866728	Symbol	R_NEW0		866713						
ANR	866729	Symbol	RCmdMacroItem		866713						
ANR	866730	Function	r_cmd_macro_item_free	284:0:6442:6599							
ANR	866731	FunctionDef	r_cmd_macro_item_free (RCmdMacroItem * item)		866730	0					
ANR	866732	CompoundStatement		284:54:6496:6599	866730	0					
ANR	866733	IfStatement	if ( ! item )		866730	0					
ANR	866734	Condition	! item	285:5:6503:6507	866730	0	True				
ANR	866735	UnaryOperationExpression	! item		866730	0					
ANR	866736	UnaryOperator	!		866730	0					
ANR	866737	Identifier	item		866730	1					
ANR	866738	CompoundStatement		2:12:13:13	866730	1					
ANR	866739	ReturnStatement	return ;	286:2:6514:6520	866730	0	True				
ANR	866740	ExpressionStatement	free ( item -> name )	288:1:6526:6543	866730	1	True				
ANR	866741	CallExpression	free ( item -> name )		866730	0					
ANR	866742	Callee	free		866730	0					
ANR	866743	Identifier	free		866730	0					
ANR	866744	ArgumentList	item -> name		866730	1					
ANR	866745	Argument	item -> name		866730	0					
ANR	866746	PtrMemberAccess	item -> name		866730	0					
ANR	866747	Identifier	item		866730	0					
ANR	866748	Identifier	name		866730	1					
ANR	866749	ExpressionStatement	free ( item -> args )	289:1:6546:6563	866730	2	True				
ANR	866750	CallExpression	free ( item -> args )		866730	0					
ANR	866751	Callee	free		866730	0					
ANR	866752	Identifier	free		866730	0					
ANR	866753	ArgumentList	item -> args		866730	1					
ANR	866754	Argument	item -> args		866730	0					
ANR	866755	PtrMemberAccess	item -> args		866730	0					
ANR	866756	Identifier	item		866730	0					
ANR	866757	Identifier	args		866730	1					
ANR	866758	ExpressionStatement	free ( item -> code )	290:1:6566:6583	866730	3	True				
ANR	866759	CallExpression	free ( item -> code )		866730	0					
ANR	866760	Callee	free		866730	0					
ANR	866761	Identifier	free		866730	0					
ANR	866762	ArgumentList	item -> code		866730	1					
ANR	866763	Argument	item -> code		866730	0					
ANR	866764	PtrMemberAccess	item -> code		866730	0					
ANR	866765	Identifier	item		866730	0					
ANR	866766	Identifier	code		866730	1					
ANR	866767	ExpressionStatement	free ( item )	291:1:6586:6597	866730	4	True				
ANR	866768	CallExpression	free ( item )		866730	0					
ANR	866769	Callee	free		866730	0					
ANR	866770	Identifier	free		866730	0					
ANR	866771	ArgumentList	item		866730	1					
ANR	866772	Argument	item		866730	0					
ANR	866773	Identifier	item		866730	0					
ANR	866774	ReturnType	R_API void		866730	1					
ANR	866775	Identifier	r_cmd_macro_item_free		866730	2					
ANR	866776	ParameterList	RCmdMacroItem * item		866730	3					
ANR	866777	Parameter	RCmdMacroItem * item	284:33:6475:6493	866730	0	True				
ANR	866778	ParameterType	RCmdMacroItem *		866730	0					
ANR	866779	Identifier	item		866730	1					
ANR	866780	CFGEntryNode	ENTRY		866730		True				
ANR	866781	CFGExitNode	EXIT		866730		True				
ANR	866782	Symbol	item		866730						
ANR	866783	Symbol	item -> name		866730						
ANR	866784	Symbol	* item		866730						
ANR	866785	Symbol	item -> code		866730						
ANR	866786	Symbol	item -> args		866730						
ANR	866787	Function	r_cmd_macro_init	294:0:6602:6876							
ANR	866788	FunctionDef	r_cmd_macro_init (RCmdMacro * mac)		866787	0					
ANR	866789	CompoundStatement		294:44:6646:6876	866787	0					
ANR	866790	ExpressionStatement	mac -> counter = 0	295:1:6649:6665	866787	0	True				
ANR	866791	AssignmentExpression	mac -> counter = 0		866787	0		=			
ANR	866792	PtrMemberAccess	mac -> counter		866787	0					
ANR	866793	Identifier	mac		866787	0					
ANR	866794	Identifier	counter		866787	1					
ANR	866795	PrimaryExpression	0		866787	1					
ANR	866796	ExpressionStatement	mac -> _brk_value = 0	296:1:6668:6687	866787	1	True				
ANR	866797	AssignmentExpression	mac -> _brk_value = 0		866787	0		=			
ANR	866798	PtrMemberAccess	mac -> _brk_value		866787	0					
ANR	866799	Identifier	mac		866787	0					
ANR	866800	Identifier	_brk_value		866787	1					
ANR	866801	PrimaryExpression	0		866787	1					
ANR	866802	ExpressionStatement	mac -> brk_value = & mac -> _brk_value	297:1:6690:6723	866787	2	True				
ANR	866803	AssignmentExpression	mac -> brk_value = & mac -> _brk_value		866787	0		=			
ANR	866804	PtrMemberAccess	mac -> brk_value		866787	0					
ANR	866805	Identifier	mac		866787	0					
ANR	866806	Identifier	brk_value		866787	1					
ANR	866807	UnaryOperationExpression	& mac -> _brk_value		866787	1					
ANR	866808	UnaryOperator	&		866787	0					
ANR	866809	PtrMemberAccess	mac -> _brk_value		866787	1					
ANR	866810	Identifier	mac		866787	0					
ANR	866811	Identifier	_brk_value		866787	1					
ANR	866812	ExpressionStatement	mac -> cb_printf = ( void * ) printf	298:1:6726:6756	866787	3	True				
ANR	866813	AssignmentExpression	mac -> cb_printf = ( void * ) printf		866787	0		=			
ANR	866814	PtrMemberAccess	mac -> cb_printf		866787	0					
ANR	866815	Identifier	mac		866787	0					
ANR	866816	Identifier	cb_printf		866787	1					
ANR	866817	CastExpression	( void * ) printf		866787	1					
ANR	866818	CastTarget	void *		866787	0					
ANR	866819	Identifier	printf		866787	1					
ANR	866820	ExpressionStatement	mac -> num = NULL	299:1:6759:6774	866787	4	True				
ANR	866821	AssignmentExpression	mac -> num = NULL		866787	0		=			
ANR	866822	PtrMemberAccess	mac -> num		866787	0					
ANR	866823	Identifier	mac		866787	0					
ANR	866824	Identifier	num		866787	1					
ANR	866825	Identifier	NULL		866787	1					
ANR	866826	ExpressionStatement	mac -> user = NULL	300:1:6777:6793	866787	5	True				
ANR	866827	AssignmentExpression	mac -> user = NULL		866787	0		=			
ANR	866828	PtrMemberAccess	mac -> user		866787	0					
ANR	866829	Identifier	mac		866787	0					
ANR	866830	Identifier	user		866787	1					
ANR	866831	Identifier	NULL		866787	1					
ANR	866832	ExpressionStatement	mac -> cmd = NULL	301:1:6796:6811	866787	6	True				
ANR	866833	AssignmentExpression	mac -> cmd = NULL		866787	0		=			
ANR	866834	PtrMemberAccess	mac -> cmd		866787	0					
ANR	866835	Identifier	mac		866787	0					
ANR	866836	Identifier	cmd		866787	1					
ANR	866837	Identifier	NULL		866787	1					
ANR	866838	ExpressionStatement	mac -> macros = r_list_newf ( ( RListFree ) r_cmd_macro_item_free )	302:1:6814:6874	866787	7	True				
ANR	866839	AssignmentExpression	mac -> macros = r_list_newf ( ( RListFree ) r_cmd_macro_item_free )		866787	0		=			
ANR	866840	PtrMemberAccess	mac -> macros		866787	0					
ANR	866841	Identifier	mac		866787	0					
ANR	866842	Identifier	macros		866787	1					
ANR	866843	CallExpression	r_list_newf ( ( RListFree ) r_cmd_macro_item_free )		866787	1					
ANR	866844	Callee	r_list_newf		866787	0					
ANR	866845	Identifier	r_list_newf		866787	0					
ANR	866846	ArgumentList	( RListFree ) r_cmd_macro_item_free		866787	1					
ANR	866847	Argument	( RListFree ) r_cmd_macro_item_free		866787	0					
ANR	866848	CastExpression	( RListFree ) r_cmd_macro_item_free		866787	0					
ANR	866849	CastTarget	RListFree		866787	0					
ANR	866850	Identifier	r_cmd_macro_item_free		866787	1					
ANR	866851	ReturnType	R_API void		866787	1					
ANR	866852	Identifier	r_cmd_macro_init		866787	2					
ANR	866853	ParameterList	RCmdMacro * mac		866787	3					
ANR	866854	Parameter	RCmdMacro * mac	294:28:6630:6643	866787	0	True				
ANR	866855	ParameterType	RCmdMacro *		866787	0					
ANR	866856	Identifier	mac		866787	1					
ANR	866857	CFGEntryNode	ENTRY		866787		True				
ANR	866858	CFGExitNode	EXIT		866787		True				
ANR	866859	Symbol	mac -> _brk_value		866787						
ANR	866860	Symbol	mac -> brk_value		866787						
ANR	866861	Symbol	NULL		866787						
ANR	866862	Symbol	r_list_newf		866787						
ANR	866863	Symbol	& mac -> _brk_value		866787						
ANR	866864	Symbol	mac -> user		866787						
ANR	866865	Symbol	mac -> counter		866787						
ANR	866866	Symbol	mac		866787						
ANR	866867	Symbol	mac -> cmd		866787						
ANR	866868	Symbol	printf		866787						
ANR	866869	Symbol	mac -> macros		866787						
ANR	866870	Symbol	* mac		866787						
ANR	866871	Symbol	r_cmd_macro_item_free		866787						
ANR	866872	Symbol	mac -> num		866787						
ANR	866873	Symbol	mac -> cb_printf		866787						
ANR	866874	Function	r_cmd_macro_fini	305:0:6879:6974							
ANR	866875	FunctionDef	r_cmd_macro_fini (RCmdMacro * mac)		866874	0					
ANR	866876	CompoundStatement		305:44:6923:6974	866874	0					
ANR	866877	ExpressionStatement	r_list_free ( mac -> macros )	306:1:6926:6951	866874	0	True				
ANR	866878	CallExpression	r_list_free ( mac -> macros )		866874	0					
ANR	866879	Callee	r_list_free		866874	0					
ANR	866880	Identifier	r_list_free		866874	0					
ANR	866881	ArgumentList	mac -> macros		866874	1					
ANR	866882	Argument	mac -> macros		866874	0					
ANR	866883	PtrMemberAccess	mac -> macros		866874	0					
ANR	866884	Identifier	mac		866874	0					
ANR	866885	Identifier	macros		866874	1					
ANR	866886	ExpressionStatement	mac -> macros = NULL	307:1:6954:6972	866874	1	True				
ANR	866887	AssignmentExpression	mac -> macros = NULL		866874	0		=			
ANR	866888	PtrMemberAccess	mac -> macros		866874	0					
ANR	866889	Identifier	mac		866874	0					
ANR	866890	Identifier	macros		866874	1					
ANR	866891	Identifier	NULL		866874	1					
ANR	866892	ReturnType	R_API void		866874	1					
ANR	866893	Identifier	r_cmd_macro_fini		866874	2					
ANR	866894	ParameterList	RCmdMacro * mac		866874	3					
ANR	866895	Parameter	RCmdMacro * mac	305:28:6907:6920	866874	0	True				
ANR	866896	ParameterType	RCmdMacro *		866874	0					
ANR	866897	Identifier	mac		866874	1					
ANR	866898	CFGEntryNode	ENTRY		866874		True				
ANR	866899	CFGExitNode	EXIT		866874		True				
ANR	866900	Symbol	mac -> macros		866874						
ANR	866901	Symbol	NULL		866874						
ANR	866902	Symbol	* mac		866874						
ANR	866903	Symbol	mac		866874						
ANR	866904	Function	r_cmd_macro_add	312:0:7086:9733							
ANR	866905	FunctionDef	"r_cmd_macro_add (RCmdMacro * mac , const char * oname)"		866904	0					
ANR	866906	CompoundStatement		312:61:7147:9733	866904	0					
ANR	866907	IdentifierDeclStatement	struct r_cmd_macro_item_t * macro ;	313:1:7150:7182	866904	0	True				
ANR	866908	IdentifierDecl	* macro		866904	0					
ANR	866909	IdentifierDeclType	struct r_cmd_macro_item_t *		866904	0					
ANR	866910	Identifier	macro		866904	1					
ANR	866911	IdentifierDeclStatement	"char * name , * args = NULL ;"	314:1:7185:7209	866904	1	True				
ANR	866912	IdentifierDecl	* name		866904	0					
ANR	866913	IdentifierDeclType	char *		866904	0					
ANR	866914	Identifier	name		866904	1					
ANR	866915	IdentifierDecl	* args = NULL		866904	1					
ANR	866916	IdentifierDeclType	char *		866904	0					
ANR	866917	Identifier	args		866904	1					
ANR	866918	AssignmentExpression	* args = NULL		866904	2		=			
ANR	866919	Identifier	NULL		866904	0					
ANR	866920	Identifier	NULL		866904	1					
ANR	866921	IdentifierDeclStatement	RCmdMacroItem * m ;	316:1:7239:7255	866904	2	True				
ANR	866922	IdentifierDecl	* m		866904	0					
ANR	866923	IdentifierDeclType	RCmdMacroItem *		866904	0					
ANR	866924	Identifier	m		866904	1					
ANR	866925	IdentifierDeclStatement	int macro_update ;	317:1:7258:7274	866904	3	True				
ANR	866926	IdentifierDecl	macro_update		866904	0					
ANR	866927	IdentifierDeclType	int		866904	0					
ANR	866928	Identifier	macro_update		866904	1					
ANR	866929	IdentifierDeclStatement	RListIter * iter ;	318:1:7277:7292	866904	4	True				
ANR	866930	IdentifierDecl	* iter		866904	0					
ANR	866931	IdentifierDeclType	RListIter *		866904	0					
ANR	866932	Identifier	iter		866904	1					
ANR	866933	IdentifierDeclStatement	char * pbody ;	319:1:7295:7306	866904	5	True				
ANR	866934	IdentifierDecl	* pbody		866904	0					
ANR	866935	IdentifierDeclType	char *		866904	0					
ANR	866936	Identifier	pbody		866904	1					
ANR	866937	IdentifierDeclStatement	char * ptr ;	321:1:7325:7334	866904	6	True				
ANR	866938	IdentifierDecl	* ptr		866904	0					
ANR	866939	IdentifierDeclType	char *		866904	0					
ANR	866940	Identifier	ptr		866904	1					
ANR	866941	IdentifierDeclStatement	int lidx ;	322:1:7337:7345	866904	7	True				
ANR	866942	IdentifierDecl	lidx		866904	0					
ANR	866943	IdentifierDeclType	int		866904	0					
ANR	866944	Identifier	lidx		866904	1					
ANR	866945	IfStatement	if ( ! * oname )		866904	8					
ANR	866946	Condition	! * oname	324:5:7353:7359	866904	0	True				
ANR	866947	UnaryOperationExpression	! * oname		866904	0					
ANR	866948	UnaryOperator	!		866904	0					
ANR	866949	UnaryOperationExpression	* oname		866904	1					
ANR	866950	UnaryOperator	*		866904	0					
ANR	866951	Identifier	oname		866904	1					
ANR	866952	CompoundStatement		13:14:214:214	866904	1					
ANR	866953	ExpressionStatement	r_cmd_macro_list ( mac )	325:2:7366:7388	866904	0	True				
ANR	866954	CallExpression	r_cmd_macro_list ( mac )		866904	0					
ANR	866955	Callee	r_cmd_macro_list		866904	0					
ANR	866956	Identifier	r_cmd_macro_list		866904	0					
ANR	866957	ArgumentList	mac		866904	1					
ANR	866958	Argument	mac		866904	0					
ANR	866959	Identifier	mac		866904	0					
ANR	866960	ReturnStatement	return 0 ;	326:2:7392:7400	866904	1	True				
ANR	866961	PrimaryExpression	0		866904	0					
ANR	866962	ExpressionStatement	name = strdup ( oname )	329:1:7407:7428	866904	9	True				
ANR	866963	AssignmentExpression	name = strdup ( oname )		866904	0		=			
ANR	866964	Identifier	name		866904	0					
ANR	866965	CallExpression	strdup ( oname )		866904	1					
ANR	866966	Callee	strdup		866904	0					
ANR	866967	Identifier	strdup		866904	0					
ANR	866968	ArgumentList	oname		866904	1					
ANR	866969	Argument	oname		866904	0					
ANR	866970	Identifier	oname		866904	0					
ANR	866971	IfStatement	if ( ! name )		866904	10					
ANR	866972	Condition	! name	330:5:7435:7439	866904	0	True				
ANR	866973	UnaryOperationExpression	! name		866904	0					
ANR	866974	UnaryOperator	!		866904	0					
ANR	866975	Identifier	name		866904	1					
ANR	866976	CompoundStatement		19:12:294:294	866904	1					
ANR	866977	ExpressionStatement	"perror ( ""strdup"" )"	331:2:7446:7463	866904	0	True				
ANR	866978	CallExpression	"perror ( ""strdup"" )"		866904	0					
ANR	866979	Callee	perror		866904	0					
ANR	866980	Identifier	perror		866904	0					
ANR	866981	ArgumentList	"""strdup"""		866904	1					
ANR	866982	Argument	"""strdup"""		866904	0					
ANR	866983	PrimaryExpression	"""strdup"""		866904	0					
ANR	866984	ReturnStatement	return 0 ;	332:2:7467:7475	866904	1	True				
ANR	866985	PrimaryExpression	0		866904	0					
ANR	866986	ExpressionStatement	"pbody = strchr ( name , ',' )"	335:1:7482:7508	866904	11	True				
ANR	866987	AssignmentExpression	"pbody = strchr ( name , ',' )"		866904	0		=			
ANR	866988	Identifier	pbody		866904	0					
ANR	866989	CallExpression	"strchr ( name , ',' )"		866904	1					
ANR	866990	Callee	strchr		866904	0					
ANR	866991	Identifier	strchr		866904	0					
ANR	866992	ArgumentList	name		866904	1					
ANR	866993	Argument	name		866904	0					
ANR	866994	Identifier	name		866904	0					
ANR	866995	Argument	"','"		866904	1					
ANR	866996	PrimaryExpression	"','"		866904	0					
ANR	866997	IfStatement	if ( ! pbody )		866904	12					
ANR	866998	Condition	! pbody	336:5:7515:7520	866904	0	True				
ANR	866999	UnaryOperationExpression	! pbody		866904	0					
ANR	867000	UnaryOperator	!		866904	0					
ANR	867001	Identifier	pbody		866904	1					
ANR	867002	CompoundStatement		25:13:375:375	866904	1					
ANR	867003	ExpressionStatement	"eprintf ( ""Invalid macro body\\n"" )"	337:2:7527:7559	866904	0	True				
ANR	867004	CallExpression	"eprintf ( ""Invalid macro body\\n"" )"		866904	0					
ANR	867005	Callee	eprintf		866904	0					
ANR	867006	Identifier	eprintf		866904	0					
ANR	867007	ArgumentList	"""Invalid macro body\\n"""		866904	1					
ANR	867008	Argument	"""Invalid macro body\\n"""		866904	0					
ANR	867009	PrimaryExpression	"""Invalid macro body\\n"""		866904	0					
ANR	867010	ExpressionStatement	free ( name )	338:2:7563:7574	866904	1	True				
ANR	867011	CallExpression	free ( name )		866904	0					
ANR	867012	Callee	free		866904	0					
ANR	867013	Identifier	free		866904	0					
ANR	867014	ArgumentList	name		866904	1					
ANR	867015	Argument	name		866904	0					
ANR	867016	Identifier	name		866904	0					
ANR	867017	ReturnStatement	return false ;	339:2:7578:7590	866904	2	True				
ANR	867018	Identifier	false		866904	0					
ANR	867019	ExpressionStatement	* pbody = '\\0'	341:1:7596:7609	866904	13	True				
ANR	867020	AssignmentExpression	* pbody = '\\0'		866904	0		=			
ANR	867021	UnaryOperationExpression	* pbody		866904	0					
ANR	867022	UnaryOperator	*		866904	0					
ANR	867023	Identifier	pbody		866904	1					
ANR	867024	PrimaryExpression	'\\0'		866904	1					
ANR	867025	ExpressionStatement	pbody ++	342:1:7612:7619	866904	14	True				
ANR	867026	PostIncDecOperationExpression	pbody ++		866904	0					
ANR	867027	Identifier	pbody		866904	0					
ANR	867028	IncDec	++		866904	1					
ANR	867029	IfStatement	if ( * name && name [ 1 ] && name [ strlen ( name ) - 1 ] == ')' )		866904	15					
ANR	867030	Condition	* name && name [ 1 ] && name [ strlen ( name ) - 1 ] == ')'	344:5:7627:7672	866904	0	True				
ANR	867031	AndExpression	* name && name [ 1 ] && name [ strlen ( name ) - 1 ] == ')'		866904	0		&&			
ANR	867032	UnaryOperationExpression	* name		866904	0					
ANR	867033	UnaryOperator	*		866904	0					
ANR	867034	Identifier	name		866904	1					
ANR	867035	AndExpression	name [ 1 ] && name [ strlen ( name ) - 1 ] == ')'		866904	1		&&			
ANR	867036	ArrayIndexing	name [ 1 ]		866904	0					
ANR	867037	Identifier	name		866904	0					
ANR	867038	PrimaryExpression	1		866904	1					
ANR	867039	EqualityExpression	name [ strlen ( name ) - 1 ] == ')'		866904	1		==			
ANR	867040	ArrayIndexing	name [ strlen ( name ) - 1 ]		866904	0					
ANR	867041	Identifier	name		866904	0					
ANR	867042	AdditiveExpression	strlen ( name ) - 1		866904	1		-			
ANR	867043	CallExpression	strlen ( name )		866904	0					
ANR	867044	Callee	strlen		866904	0					
ANR	867045	Identifier	strlen		866904	0					
ANR	867046	ArgumentList	name		866904	1					
ANR	867047	Argument	name		866904	0					
ANR	867048	Identifier	name		866904	0					
ANR	867049	PrimaryExpression	1		866904	1					
ANR	867050	PrimaryExpression	')'		866904	1					
ANR	867051	CompoundStatement		33:53:527:527	866904	1					
ANR	867052	ExpressionStatement	"eprintf ( ""r_cmd_macro_add: missing macro body?\\n"" )"	345:2:7679:7729	866904	0	True				
ANR	867053	CallExpression	"eprintf ( ""r_cmd_macro_add: missing macro body?\\n"" )"		866904	0					
ANR	867054	Callee	eprintf		866904	0					
ANR	867055	Identifier	eprintf		866904	0					
ANR	867056	ArgumentList	"""r_cmd_macro_add: missing macro body?\\n"""		866904	1					
ANR	867057	Argument	"""r_cmd_macro_add: missing macro body?\\n"""		866904	0					
ANR	867058	PrimaryExpression	"""r_cmd_macro_add: missing macro body?\\n"""		866904	0					
ANR	867059	ExpressionStatement	free ( name )	346:2:7733:7744	866904	1	True				
ANR	867060	CallExpression	free ( name )		866904	0					
ANR	867061	Callee	free		866904	0					
ANR	867062	Identifier	free		866904	0					
ANR	867063	ArgumentList	name		866904	1					
ANR	867064	Argument	name		866904	0					
ANR	867065	Identifier	name		866904	0					
ANR	867066	ReturnStatement	return - 1 ;	347:2:7748:7757	866904	2	True				
ANR	867067	UnaryOperationExpression	- 1		866904	0					
ANR	867068	UnaryOperator	-		866904	0					
ANR	867069	PrimaryExpression	1		866904	1					
ANR	867070	ExpressionStatement	macro = NULL	350:1:7764:7776	866904	16	True				
ANR	867071	AssignmentExpression	macro = NULL		866904	0		=			
ANR	867072	Identifier	macro		866904	0					
ANR	867073	Identifier	NULL		866904	1					
ANR	867074	ExpressionStatement	"ptr = strchr ( name , ' ' )"	351:1:7779:7803	866904	17	True				
ANR	867075	AssignmentExpression	"ptr = strchr ( name , ' ' )"		866904	0		=			
ANR	867076	Identifier	ptr		866904	0					
ANR	867077	CallExpression	"strchr ( name , ' ' )"		866904	1					
ANR	867078	Callee	strchr		866904	0					
ANR	867079	Identifier	strchr		866904	0					
ANR	867080	ArgumentList	name		866904	1					
ANR	867081	Argument	name		866904	0					
ANR	867082	Identifier	name		866904	0					
ANR	867083	Argument	' '		866904	1					
ANR	867084	PrimaryExpression	' '		866904	0					
ANR	867085	IfStatement	if ( ptr )		866904	18					
ANR	867086	Condition	ptr	352:5:7810:7812	866904	0	True				
ANR	867087	Identifier	ptr		866904	0					
ANR	867088	CompoundStatement		41:10:667:667	866904	1					
ANR	867089	ExpressionStatement	* ptr = '\\0'	353:2:7819:7828	866904	0	True				
ANR	867090	AssignmentExpression	* ptr = '\\0'		866904	0		=			
ANR	867091	UnaryOperationExpression	* ptr		866904	0					
ANR	867092	UnaryOperator	*		866904	0					
ANR	867093	Identifier	ptr		866904	1					
ANR	867094	PrimaryExpression	'\\0'		866904	1					
ANR	867095	ExpressionStatement	args = ptr + 1	354:2:7832:7845	866904	1	True				
ANR	867096	AssignmentExpression	args = ptr + 1		866904	0		=			
ANR	867097	Identifier	args		866904	0					
ANR	867098	AdditiveExpression	ptr + 1		866904	1		+			
ANR	867099	Identifier	ptr		866904	0					
ANR	867100	PrimaryExpression	1		866904	1					
ANR	867101	ExpressionStatement	macro_update = 0	356:1:7851:7867	866904	19	True				
ANR	867102	AssignmentExpression	macro_update = 0		866904	0		=			
ANR	867103	Identifier	macro_update		866904	0					
ANR	867104	PrimaryExpression	0		866904	1					
ANR	867105	Statement	r_list_foreach	357:1:7870:7883	866904	20	True				
ANR	867106	Statement	(	357:16:7885:7885	866904	21	True				
ANR	867107	Statement	mac	357:17:7886:7888	866904	22	True				
ANR	867108	Statement	->	357:20:7889:7890	866904	23	True				
ANR	867109	Statement	macros	357:22:7891:7896	866904	24	True				
ANR	867110	Statement	","	357:28:7897:7897	866904	25	True				
ANR	867111	Statement	iter	357:30:7899:7902	866904	26	True				
ANR	867112	Statement	","	357:34:7903:7903	866904	27	True				
ANR	867113	Statement	m	357:36:7905:7905	866904	28	True				
ANR	867114	Statement	)	357:37:7906:7906	866904	29	True				
ANR	867115	CompoundStatement		46:39:760:760	866904	30					
ANR	867116	IfStatement	"if ( ! strcmp ( name , m -> name ) )"		866904	0					
ANR	867117	Condition	"! strcmp ( name , m -> name )"	358:6:7916:7938	866904	0	True				
ANR	867118	UnaryOperationExpression	"! strcmp ( name , m -> name )"		866904	0					
ANR	867119	UnaryOperator	!		866904	0					
ANR	867120	CallExpression	"strcmp ( name , m -> name )"		866904	1					
ANR	867121	Callee	strcmp		866904	0					
ANR	867122	Identifier	strcmp		866904	0					
ANR	867123	ArgumentList	name		866904	1					
ANR	867124	Argument	name		866904	0					
ANR	867125	Identifier	name		866904	0					
ANR	867126	Argument	m -> name		866904	1					
ANR	867127	PtrMemberAccess	m -> name		866904	0					
ANR	867128	Identifier	m		866904	0					
ANR	867129	Identifier	name		866904	1					
ANR	867130	CompoundStatement		47:31:793:793	866904	1					
ANR	867131	ExpressionStatement	macro = m	359:3:7946:7955	866904	0	True				
ANR	867132	AssignmentExpression	macro = m		866904	0		=			
ANR	867133	Identifier	macro		866904	0					
ANR	867134	Identifier	m		866904	1					
ANR	867135	ExpressionStatement	free ( macro -> code )	361:3:7983:8001	866904	1	True				
ANR	867136	CallExpression	free ( macro -> code )		866904	0					
ANR	867137	Callee	free		866904	0					
ANR	867138	Identifier	free		866904	0					
ANR	867139	ArgumentList	macro -> code		866904	1					
ANR	867140	Argument	macro -> code		866904	0					
ANR	867141	PtrMemberAccess	macro -> code		866904	0					
ANR	867142	Identifier	macro		866904	0					
ANR	867143	Identifier	code		866904	1					
ANR	867144	ExpressionStatement	free ( macro -> args )	362:3:8006:8024	866904	2	True				
ANR	867145	CallExpression	free ( macro -> args )		866904	0					
ANR	867146	Callee	free		866904	0					
ANR	867147	Identifier	free		866904	0					
ANR	867148	ArgumentList	macro -> args		866904	1					
ANR	867149	Argument	macro -> args		866904	0					
ANR	867150	PtrMemberAccess	macro -> args		866904	0					
ANR	867151	Identifier	macro		866904	0					
ANR	867152	Identifier	args		866904	1					
ANR	867153	ExpressionStatement	macro_update = 1	363:3:8029:8045	866904	3	True				
ANR	867154	AssignmentExpression	macro_update = 1		866904	0		=			
ANR	867155	Identifier	macro_update		866904	0					
ANR	867156	PrimaryExpression	1		866904	1					
ANR	867157	BreakStatement	break ;	364:3:8050:8055	866904	4	True				
ANR	867158	IfStatement	if ( ptr )		866904	31					
ANR	867159	Condition	ptr	367:5:8069:8071	866904	0	True				
ANR	867160	Identifier	ptr		866904	0					
ANR	867161	CompoundStatement		56:10:926:926	866904	1					
ANR	867162	ExpressionStatement	* ptr = ' '	368:2:8078:8088	866904	0	True				
ANR	867163	AssignmentExpression	* ptr = ' '		866904	0		=			
ANR	867164	UnaryOperationExpression	* ptr		866904	0					
ANR	867165	UnaryOperator	*		866904	0					
ANR	867166	Identifier	ptr		866904	1					
ANR	867167	PrimaryExpression	' '		866904	1					
ANR	867168	IfStatement	if ( ! macro )		866904	32					
ANR	867169	Condition	! macro	370:5:8098:8103	866904	0	True				
ANR	867170	UnaryOperationExpression	! macro		866904	0					
ANR	867171	UnaryOperator	!		866904	0					
ANR	867172	Identifier	macro		866904	1					
ANR	867173	CompoundStatement		59:13:958:958	866904	1					
ANR	867174	ExpressionStatement	macro = r_cmd_macro_item_new ( )	371:2:8110:8141	866904	0	True				
ANR	867175	AssignmentExpression	macro = r_cmd_macro_item_new ( )		866904	0		=			
ANR	867176	Identifier	macro		866904	0					
ANR	867177	CallExpression	r_cmd_macro_item_new ( )		866904	1					
ANR	867178	Callee	r_cmd_macro_item_new		866904	0					
ANR	867179	Identifier	r_cmd_macro_item_new		866904	0					
ANR	867180	ArgumentList			866904	1					
ANR	867181	IfStatement	if ( ! macro )		866904	1					
ANR	867182	Condition	! macro	372:6:8149:8154	866904	0	True				
ANR	867183	UnaryOperationExpression	! macro		866904	0					
ANR	867184	UnaryOperator	!		866904	0					
ANR	867185	Identifier	macro		866904	1					
ANR	867186	CompoundStatement		61:14:1009:1009	866904	1					
ANR	867187	ExpressionStatement	free ( name )	373:3:8162:8173	866904	0	True				
ANR	867188	CallExpression	free ( name )		866904	0					
ANR	867189	Callee	free		866904	0					
ANR	867190	Identifier	free		866904	0					
ANR	867191	ArgumentList	name		866904	1					
ANR	867192	Argument	name		866904	0					
ANR	867193	Identifier	name		866904	0					
ANR	867194	ReturnStatement	return 0 ;	374:3:8178:8186	866904	1	True				
ANR	867195	PrimaryExpression	0		866904	0					
ANR	867196	ExpressionStatement	macro -> name = strdup ( name )	376:2:8194:8221	866904	2	True				
ANR	867197	AssignmentExpression	macro -> name = strdup ( name )		866904	0		=			
ANR	867198	PtrMemberAccess	macro -> name		866904	0					
ANR	867199	Identifier	macro		866904	0					
ANR	867200	Identifier	name		866904	1					
ANR	867201	CallExpression	strdup ( name )		866904	1					
ANR	867202	Callee	strdup		866904	0					
ANR	867203	Identifier	strdup		866904	0					
ANR	867204	ArgumentList	name		866904	1					
ANR	867205	Argument	name		866904	0					
ANR	867206	Identifier	name		866904	0					
ANR	867207	ExpressionStatement	macro -> codelen = ( pbody [ 0 ] ) ? strlen ( pbody ) + 2 : 4096	379:1:8228:8280	866904	33	True				
ANR	867208	AssignmentExpression	macro -> codelen = ( pbody [ 0 ] ) ? strlen ( pbody ) + 2 : 4096		866904	0		=			
ANR	867209	PtrMemberAccess	macro -> codelen		866904	0					
ANR	867210	Identifier	macro		866904	0					
ANR	867211	Identifier	codelen		866904	1					
ANR	867212	ConditionalExpression	( pbody [ 0 ] ) ? strlen ( pbody ) + 2 : 4096		866904	1					
ANR	867213	Condition	pbody [ 0 ]		866904	0					
ANR	867214	ArrayIndexing	pbody [ 0 ]		866904	0					
ANR	867215	Identifier	pbody		866904	0					
ANR	867216	PrimaryExpression	0		866904	1					
ANR	867217	AdditiveExpression	strlen ( pbody ) + 2		866904	1		+			
ANR	867218	CallExpression	strlen ( pbody )		866904	0					
ANR	867219	Callee	strlen		866904	0					
ANR	867220	Identifier	strlen		866904	0					
ANR	867221	ArgumentList	pbody		866904	1					
ANR	867222	Argument	pbody		866904	0					
ANR	867223	Identifier	pbody		866904	0					
ANR	867224	PrimaryExpression	2		866904	1					
ANR	867225	PrimaryExpression	4096		866904	2					
ANR	867226	ExpressionStatement	macro -> code = ( char * ) malloc ( macro -> codelen )	380:1:8283:8328	866904	34	True				
ANR	867227	AssignmentExpression	macro -> code = ( char * ) malloc ( macro -> codelen )		866904	0		=			
ANR	867228	PtrMemberAccess	macro -> code		866904	0					
ANR	867229	Identifier	macro		866904	0					
ANR	867230	Identifier	code		866904	1					
ANR	867231	CastExpression	( char * ) malloc ( macro -> codelen )		866904	1					
ANR	867232	CastTarget	char *		866904	0					
ANR	867233	CallExpression	malloc ( macro -> codelen )		866904	1					
ANR	867234	Callee	malloc		866904	0					
ANR	867235	Identifier	malloc		866904	0					
ANR	867236	ArgumentList	macro -> codelen		866904	1					
ANR	867237	Argument	macro -> codelen		866904	0					
ANR	867238	PtrMemberAccess	macro -> codelen		866904	0					
ANR	867239	Identifier	macro		866904	0					
ANR	867240	Identifier	codelen		866904	1					
ANR	867241	ExpressionStatement	* macro -> code = '\\0'	381:1:8331:8350	866904	35	True				
ANR	867242	AssignmentExpression	* macro -> code = '\\0'		866904	0		=			
ANR	867243	UnaryOperationExpression	* macro -> code		866904	0					
ANR	867244	UnaryOperator	*		866904	0					
ANR	867245	PtrMemberAccess	macro -> code		866904	1					
ANR	867246	Identifier	macro		866904	0					
ANR	867247	Identifier	code		866904	1					
ANR	867248	PrimaryExpression	'\\0'		866904	1					
ANR	867249	ExpressionStatement	macro -> nargs = 0	382:1:8353:8369	866904	36	True				
ANR	867250	AssignmentExpression	macro -> nargs = 0		866904	0		=			
ANR	867251	PtrMemberAccess	macro -> nargs		866904	0					
ANR	867252	Identifier	macro		866904	0					
ANR	867253	Identifier	nargs		866904	1					
ANR	867254	PrimaryExpression	0		866904	1					
ANR	867255	IfStatement	if ( ! args )		866904	37					
ANR	867256	Condition	! args	383:5:8376:8380	866904	0	True				
ANR	867257	UnaryOperationExpression	! args		866904	0					
ANR	867258	UnaryOperator	!		866904	0					
ANR	867259	Identifier	args		866904	1					
ANR	867260	CompoundStatement		72:12:1235:1235	866904	1					
ANR	867261	ExpressionStatement	"args = """""	384:2:8387:8396	866904	0	True				
ANR	867262	AssignmentExpression	"args = """""		866904	0		=			
ANR	867263	Identifier	args		866904	0					
ANR	867264	PrimaryExpression	""""""		866904	1					
ANR	867265	ExpressionStatement	macro -> args = strdup ( args )	386:1:8402:8429	866904	38	True				
ANR	867266	AssignmentExpression	macro -> args = strdup ( args )		866904	0		=			
ANR	867267	PtrMemberAccess	macro -> args		866904	0					
ANR	867268	Identifier	macro		866904	0					
ANR	867269	Identifier	args		866904	1					
ANR	867270	CallExpression	strdup ( args )		866904	1					
ANR	867271	Callee	strdup		866904	0					
ANR	867272	Identifier	strdup		866904	0					
ANR	867273	ArgumentList	args		866904	1					
ANR	867274	Argument	args		866904	0					
ANR	867275	Identifier	args		866904	0					
ANR	867276	ExpressionStatement	"ptr = strchr ( macro -> name , ' ' )"	387:1:8432:8463	866904	39	True				
ANR	867277	AssignmentExpression	"ptr = strchr ( macro -> name , ' ' )"		866904	0		=			
ANR	867278	Identifier	ptr		866904	0					
ANR	867279	CallExpression	"strchr ( macro -> name , ' ' )"		866904	1					
ANR	867280	Callee	strchr		866904	0					
ANR	867281	Identifier	strchr		866904	0					
ANR	867282	ArgumentList	macro -> name		866904	1					
ANR	867283	Argument	macro -> name		866904	0					
ANR	867284	PtrMemberAccess	macro -> name		866904	0					
ANR	867285	Identifier	macro		866904	0					
ANR	867286	Identifier	name		866904	1					
ANR	867287	Argument	' '		866904	1					
ANR	867288	PrimaryExpression	' '		866904	0					
ANR	867289	IfStatement	if ( ptr != NULL )		866904	40					
ANR	867290	Condition	ptr != NULL	388:5:8470:8480	866904	0	True				
ANR	867291	EqualityExpression	ptr != NULL		866904	0		!=			
ANR	867292	Identifier	ptr		866904	0					
ANR	867293	Identifier	NULL		866904	1					
ANR	867294	CompoundStatement		77:18:1335:1335	866904	1					
ANR	867295	ExpressionStatement	* ptr = '\\0'	389:2:8487:8498	866904	0	True				
ANR	867296	AssignmentExpression	* ptr = '\\0'		866904	0		=			
ANR	867297	UnaryOperationExpression	* ptr		866904	0					
ANR	867298	UnaryOperator	*		866904	0					
ANR	867299	Identifier	ptr		866904	1					
ANR	867300	PrimaryExpression	'\\0'		866904	1					
ANR	867301	ExpressionStatement	macro -> nargs = r_str_word_set0 ( ptr + 1 )	390:2:8502:8540	866904	1	True				
ANR	867302	AssignmentExpression	macro -> nargs = r_str_word_set0 ( ptr + 1 )		866904	0		=			
ANR	867303	PtrMemberAccess	macro -> nargs		866904	0					
ANR	867304	Identifier	macro		866904	0					
ANR	867305	Identifier	nargs		866904	1					
ANR	867306	CallExpression	r_str_word_set0 ( ptr + 1 )		866904	1					
ANR	867307	Callee	r_str_word_set0		866904	0					
ANR	867308	Identifier	r_str_word_set0		866904	0					
ANR	867309	ArgumentList	ptr + 1		866904	1					
ANR	867310	Argument	ptr + 1		866904	0					
ANR	867311	AdditiveExpression	ptr + 1		866904	0		+			
ANR	867312	Identifier	ptr		866904	0					
ANR	867313	PrimaryExpression	1		866904	1					
ANR	867314	IfStatement	if ( pbody )		866904	41					
ANR	867315	Condition	pbody	394:5:8557:8561	866904	0	True				
ANR	867316	Identifier	pbody		866904	0					
ANR	867317	CompoundStatement		83:12:1416:1416	866904	1					
ANR	867318	ForStatement	for ( lidx = 0 ; pbody [ lidx ] ; lidx ++ )		866904	0					
ANR	867319	ForInit	lidx = 0 ;	396:7:8580:8586	866904	0	True				
ANR	867320	AssignmentExpression	lidx = 0		866904	0		=			
ANR	867321	Identifier	lidx		866904	0					
ANR	867322	PrimaryExpression	0		866904	1					
ANR	867323	Condition	pbody [ lidx ]	396:15:8588:8598	866904	1	True				
ANR	867324	ArrayIndexing	pbody [ lidx ]		866904	0					
ANR	867325	Identifier	pbody		866904	0					
ANR	867326	Identifier	lidx		866904	1					
ANR	867327	PostIncDecOperationExpression	lidx ++	396:28:8601:8606	866904	2	True				
ANR	867328	Identifier	lidx		866904	0					
ANR	867329	IncDec	++		866904	1					
ANR	867330	CompoundStatement		85:36:1461:1461	866904	3					
ANR	867331	IfStatement	"if ( pbody [ lidx ] == ',' )"		866904	0					
ANR	867332	Condition	"pbody [ lidx ] == ','"	397:7:8618:8635	866904	0	True				
ANR	867333	EqualityExpression	"pbody [ lidx ] == ','"		866904	0		==			
ANR	867334	ArrayIndexing	pbody [ lidx ]		866904	0					
ANR	867335	Identifier	pbody		866904	0					
ANR	867336	Identifier	lidx		866904	1					
ANR	867337	PrimaryExpression	"','"		866904	1					
ANR	867338	CompoundStatement		86:27:1490:1490	866904	1					
ANR	867339	ExpressionStatement	pbody [ lidx ] = '\\n'	398:4:8644:8660	866904	0	True				
ANR	867340	AssignmentExpression	pbody [ lidx ] = '\\n'		866904	0		=			
ANR	867341	ArrayIndexing	pbody [ lidx ]		866904	0					
ANR	867342	Identifier	pbody		866904	0					
ANR	867343	Identifier	lidx		866904	1					
ANR	867344	PrimaryExpression	'\\n'		866904	1					
ANR	867345	ElseStatement	else		866904	0					
ANR	867346	IfStatement	if ( pbody [ lidx ] == ')' && pbody [ lidx - 1 ] == '\\n' )		866904	0					
ANR	867347	Condition	pbody [ lidx ] == ')' && pbody [ lidx - 1 ] == '\\n'	399:14:8676:8720	866904	0	True				
ANR	867348	AndExpression	pbody [ lidx ] == ')' && pbody [ lidx - 1 ] == '\\n'		866904	0		&&			
ANR	867349	EqualityExpression	pbody [ lidx ] == ')'		866904	0		==			
ANR	867350	ArrayIndexing	pbody [ lidx ]		866904	0					
ANR	867351	Identifier	pbody		866904	0					
ANR	867352	Identifier	lidx		866904	1					
ANR	867353	PrimaryExpression	')'		866904	1					
ANR	867354	EqualityExpression	pbody [ lidx - 1 ] == '\\n'		866904	1		==			
ANR	867355	ArrayIndexing	pbody [ lidx - 1 ]		866904	0					
ANR	867356	Identifier	pbody		866904	0					
ANR	867357	AdditiveExpression	lidx - 1		866904	1		-			
ANR	867358	Identifier	lidx		866904	0					
ANR	867359	PrimaryExpression	1		866904	1					
ANR	867360	PrimaryExpression	'\\n'		866904	1					
ANR	867361	CompoundStatement		88:61:1575:1575	866904	1					
ANR	867362	ExpressionStatement	pbody [ lidx ] = '\\0'	400:4:8729:8747	866904	0	True				
ANR	867363	AssignmentExpression	pbody [ lidx ] = '\\0'		866904	0		=			
ANR	867364	ArrayIndexing	pbody [ lidx ]		866904	0					
ANR	867365	Identifier	pbody		866904	0					
ANR	867366	Identifier	lidx		866904	1					
ANR	867367	PrimaryExpression	'\\0'		866904	1					
ANR	867368	ExpressionStatement	"strncpy ( macro -> code , pbody , macro -> codelen )"	403:2:8760:8804	866904	1	True				
ANR	867369	CallExpression	"strncpy ( macro -> code , pbody , macro -> codelen )"		866904	0					
ANR	867370	Callee	strncpy		866904	0					
ANR	867371	Identifier	strncpy		866904	0					
ANR	867372	ArgumentList	macro -> code		866904	1					
ANR	867373	Argument	macro -> code		866904	0					
ANR	867374	PtrMemberAccess	macro -> code		866904	0					
ANR	867375	Identifier	macro		866904	0					
ANR	867376	Identifier	code		866904	1					
ANR	867377	Argument	pbody		866904	1					
ANR	867378	Identifier	pbody		866904	0					
ANR	867379	Argument	macro -> codelen		866904	2					
ANR	867380	PtrMemberAccess	macro -> codelen		866904	0					
ANR	867381	Identifier	macro		866904	0					
ANR	867382	Identifier	codelen		866904	1					
ANR	867383	ExpressionStatement	macro -> code [ macro -> codelen - 1 ] = 0	404:2:8808:8841	866904	2	True				
ANR	867384	AssignmentExpression	macro -> code [ macro -> codelen - 1 ] = 0		866904	0		=			
ANR	867385	ArrayIndexing	macro -> code [ macro -> codelen - 1 ]		866904	0					
ANR	867386	PtrMemberAccess	macro -> code		866904	0					
ANR	867387	Identifier	macro		866904	0					
ANR	867388	Identifier	code		866904	1					
ANR	867389	AdditiveExpression	macro -> codelen - 1		866904	1		-			
ANR	867390	PtrMemberAccess	macro -> codelen		866904	0					
ANR	867391	Identifier	macro		866904	0					
ANR	867392	Identifier	codelen		866904	1					
ANR	867393	PrimaryExpression	1		866904	1					
ANR	867394	PrimaryExpression	0		866904	1					
ANR	867395	ElseStatement	else		866904	0					
ANR	867396	CompoundStatement		97:2:1744:1774	866904	0					
ANR	867397	IdentifierDeclStatement	"int lbufp , codelen = 0 , nl = 0 ;"	408:2:8892:8922	866904	0	True				
ANR	867398	IdentifierDecl	lbufp		866904	0					
ANR	867399	IdentifierDeclType	int		866904	0					
ANR	867400	Identifier	lbufp		866904	1					
ANR	867401	IdentifierDecl	codelen = 0		866904	1					
ANR	867402	IdentifierDeclType	int		866904	0					
ANR	867403	Identifier	codelen		866904	1					
ANR	867404	AssignmentExpression	codelen = 0		866904	2		=			
ANR	867405	Identifier	codelen		866904	0					
ANR	867406	PrimaryExpression	0		866904	1					
ANR	867407	IdentifierDecl	nl = 0		866904	2					
ANR	867408	IdentifierDeclType	int		866904	0					
ANR	867409	Identifier	nl		866904	1					
ANR	867410	AssignmentExpression	nl = 0		866904	2		=			
ANR	867411	Identifier	nl		866904	0					
ANR	867412	PrimaryExpression	0		866904	1					
ANR	867413	ExpressionStatement	"eprintf ( ""Reading macro from stdin:\\n"" )"	409:2:8926:8965	866904	1	True				
ANR	867414	CallExpression	"eprintf ( ""Reading macro from stdin:\\n"" )"		866904	0					
ANR	867415	Callee	eprintf		866904	0					
ANR	867416	Identifier	eprintf		866904	0					
ANR	867417	ArgumentList	"""Reading macro from stdin:\\n"""		866904	1					
ANR	867418	Argument	"""Reading macro from stdin:\\n"""		866904	0					
ANR	867419	PrimaryExpression	"""Reading macro from stdin:\\n"""		866904	0					
ANR	867420	ForStatement	for ( ; codelen < R_CMD_MAXLEN ; )		866904	2					
ANR	867421	Condition	codelen < R_CMD_MAXLEN	410:8:8975:8994	866904	0	True				
ANR	867422	RelationalExpression	codelen < R_CMD_MAXLEN		866904	0		<			
ANR	867423	Identifier	codelen		866904	0					
ANR	867424	Identifier	R_CMD_MAXLEN		866904	1					
ANR	867425	CompoundStatement		99:31:1850:1850	866904	1					
ANR	867426	IfStatement	if ( stdin == r_cons_stdin_fd )		866904	0					
ANR	867427	Condition	stdin == r_cons_stdin_fd	412:7:9039:9062	866904	0	True				
ANR	867428	EqualityExpression	stdin == r_cons_stdin_fd		866904	0		==			
ANR	867429	Identifier	stdin		866904	0					
ANR	867430	Identifier	r_cons_stdin_fd		866904	1					
ANR	867431	CompoundStatement		101:33:1917:1917	866904	1					
ANR	867432	ExpressionStatement	"mac -> cb_printf ( "".. "" )"	413:4:9071:9092	866904	0	True				
ANR	867433	CallExpression	"mac -> cb_printf ( "".. "" )"		866904	0					
ANR	867434	Callee	mac -> cb_printf		866904	0					
ANR	867435	PtrMemberAccess	mac -> cb_printf		866904	0					
ANR	867436	Identifier	mac		866904	0					
ANR	867437	Identifier	cb_printf		866904	1					
ANR	867438	ArgumentList	""".. """		866904	1					
ANR	867439	Argument	""".. """		866904	0					
ANR	867440	PrimaryExpression	""".. """		866904	0					
ANR	867441	ExpressionStatement	fflush ( stdout )	414:4:9098:9112	866904	1	True				
ANR	867442	CallExpression	fflush ( stdout )		866904	0					
ANR	867443	Callee	fflush		866904	0					
ANR	867444	Identifier	fflush		866904	0					
ANR	867445	ArgumentList	stdout		866904	1					
ANR	867446	Argument	stdout		866904	0					
ANR	867447	Identifier	stdout		866904	0					
ANR	867448	ExpressionStatement	"fgets ( buf , 1023 , r_cons_stdin_fd )"	416:3:9122:9155	866904	1	True				
ANR	867449	CallExpression	"fgets ( buf , 1023 , r_cons_stdin_fd )"		866904	0					
ANR	867450	Callee	fgets		866904	0					
ANR	867451	Identifier	fgets		866904	0					
ANR	867452	ArgumentList	buf		866904	1					
ANR	867453	Argument	buf		866904	0					
ANR	867454	Identifier	buf		866904	0					
ANR	867455	Argument	1023		866904	1					
ANR	867456	PrimaryExpression	1023		866904	0					
ANR	867457	Argument	r_cons_stdin_fd		866904	2					
ANR	867458	Identifier	r_cons_stdin_fd		866904	0					
ANR	867459	ExpressionStatement	"fgets ( buf , sizeof ( buf ) - 1 , stdin )"	418:3:9167:9201	866904	2	True				
ANR	867460	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , stdin )"		866904	0					
ANR	867461	Callee	fgets		866904	0					
ANR	867462	Identifier	fgets		866904	0					
ANR	867463	ArgumentList	buf		866904	1					
ANR	867464	Argument	buf		866904	0					
ANR	867465	Identifier	buf		866904	0					
ANR	867466	Argument	sizeof ( buf ) - 1		866904	1					
ANR	867467	AdditiveExpression	sizeof ( buf ) - 1		866904	0		-			
ANR	867468	SizeofExpression	sizeof ( buf )		866904	0					
ANR	867469	Sizeof	sizeof		866904	0					
ANR	867470	SizeofOperand	buf		866904	1					
ANR	867471	PrimaryExpression	1		866904	1					
ANR	867472	Argument	stdin		866904	2					
ANR	867473	Identifier	stdin		866904	0					
ANR	867474	IfStatement	if ( * buf == '\\n' && nl )		866904	3					
ANR	867475	Condition	* buf == '\\n' && nl	419:7:9210:9225	866904	0	True				
ANR	867476	AndExpression	* buf == '\\n' && nl		866904	0		&&			
ANR	867477	EqualityExpression	* buf == '\\n'		866904	0		==			
ANR	867478	UnaryOperationExpression	* buf		866904	0					
ANR	867479	UnaryOperator	*		866904	0					
ANR	867480	Identifier	buf		866904	1					
ANR	867481	PrimaryExpression	'\\n'		866904	1					
ANR	867482	Identifier	nl		866904	1					
ANR	867483	BreakStatement	break ;	420:4:9232:9237	866904	1	True				
ANR	867484	ExpressionStatement	nl = ( * buf == '\\n' ) ? 1 : 0	421:3:9242:9265	866904	4	True				
ANR	867485	AssignmentExpression	nl = ( * buf == '\\n' ) ? 1 : 0		866904	0		=			
ANR	867486	Identifier	nl		866904	0					
ANR	867487	ConditionalExpression	( * buf == '\\n' ) ? 1 : 0		866904	1					
ANR	867488	Condition	* buf == '\\n'		866904	0					
ANR	867489	EqualityExpression	* buf == '\\n'		866904	0		==			
ANR	867490	UnaryOperationExpression	* buf		866904	0					
ANR	867491	UnaryOperator	*		866904	0					
ANR	867492	Identifier	buf		866904	1					
ANR	867493	PrimaryExpression	'\\n'		866904	1					
ANR	867494	PrimaryExpression	1		866904	1					
ANR	867495	PrimaryExpression	0		866904	2					
ANR	867496	IfStatement	if ( * buf == ')' )		866904	5					
ANR	867497	Condition	* buf == ')'	422:7:9274:9282	866904	0	True				
ANR	867498	EqualityExpression	* buf == ')'		866904	0		==			
ANR	867499	UnaryOperationExpression	* buf		866904	0					
ANR	867500	UnaryOperator	*		866904	0					
ANR	867501	Identifier	buf		866904	1					
ANR	867502	PrimaryExpression	')'		866904	1					
ANR	867503	BreakStatement	break ;	423:4:9289:9294	866904	1	True				
ANR	867504	ForStatement	for ( bufp = buf ; * bufp == ' ' || * bufp == '\\t' ; bufp ++ )		866904	6					
ANR	867505	ForInit	bufp = buf ;	424:8:9304:9312	866904	0	True				
ANR	867506	AssignmentExpression	bufp = buf		866904	0		=			
ANR	867507	Identifier	bufp		866904	0					
ANR	867508	Identifier	buf		866904	1					
ANR	867509	Condition	* bufp == ' ' || * bufp == '\\t'	424:17:9313:9335	866904	1	True				
ANR	867510	OrExpression	* bufp == ' ' || * bufp == '\\t'		866904	0		||			
ANR	867511	EqualityExpression	* bufp == ' '		866904	0		==			
ANR	867512	UnaryOperationExpression	* bufp		866904	0					
ANR	867513	UnaryOperator	*		866904	0					
ANR	867514	Identifier	bufp		866904	1					
ANR	867515	PrimaryExpression	' '		866904	1					
ANR	867516	EqualityExpression	* bufp == '\\t'		866904	1		==			
ANR	867517	UnaryOperationExpression	* bufp		866904	0					
ANR	867518	UnaryOperator	*		866904	0					
ANR	867519	Identifier	bufp		866904	1					
ANR	867520	PrimaryExpression	'\\t'		866904	1					
ANR	867521	PostIncDecOperationExpression	bufp ++	424:41:9337:9342	866904	2	True				
ANR	867522	Identifier	bufp		866904	0					
ANR	867523	IncDec	++		866904	1					
ANR	867524	ExpressionStatement		424:48:9344:9344	866904	3	True				
ANR	867525	ExpressionStatement	lidx = strlen ( buf ) - 2	425:3:9349:9370	866904	7	True				
ANR	867526	AssignmentExpression	lidx = strlen ( buf ) - 2		866904	0		=			
ANR	867527	Identifier	lidx		866904	0					
ANR	867528	AdditiveExpression	strlen ( buf ) - 2		866904	1		-			
ANR	867529	CallExpression	strlen ( buf )		866904	0					
ANR	867530	Callee	strlen		866904	0					
ANR	867531	Identifier	strlen		866904	0					
ANR	867532	ArgumentList	buf		866904	1					
ANR	867533	Argument	buf		866904	0					
ANR	867534	Identifier	buf		866904	0					
ANR	867535	PrimaryExpression	2		866904	1					
ANR	867536	ExpressionStatement	lbufp = strlen ( bufp )	426:3:9375:9396	866904	8	True				
ANR	867537	AssignmentExpression	lbufp = strlen ( bufp )		866904	0		=			
ANR	867538	Identifier	lbufp		866904	0					
ANR	867539	CallExpression	strlen ( bufp )		866904	1					
ANR	867540	Callee	strlen		866904	0					
ANR	867541	Identifier	strlen		866904	0					
ANR	867542	ArgumentList	bufp		866904	1					
ANR	867543	Argument	bufp		866904	0					
ANR	867544	Identifier	bufp		866904	0					
ANR	867545	IfStatement	if ( buf [ lidx ] == ')' && buf [ lidx - 1 ] != '(' )		866904	9					
ANR	867546	Condition	buf [ lidx ] == ')' && buf [ lidx - 1 ] != '('	427:7:9405:9438	866904	0	True				
ANR	867547	AndExpression	buf [ lidx ] == ')' && buf [ lidx - 1 ] != '('		866904	0		&&			
ANR	867548	EqualityExpression	buf [ lidx ] == ')'		866904	0		==			
ANR	867549	ArrayIndexing	buf [ lidx ]		866904	0					
ANR	867550	Identifier	buf		866904	0					
ANR	867551	Identifier	lidx		866904	1					
ANR	867552	PrimaryExpression	')'		866904	1					
ANR	867553	EqualityExpression	buf [ lidx - 1 ] != '('		866904	1		!=			
ANR	867554	ArrayIndexing	buf [ lidx - 1 ]		866904	0					
ANR	867555	Identifier	buf		866904	0					
ANR	867556	AdditiveExpression	lidx - 1		866904	1		-			
ANR	867557	Identifier	lidx		866904	0					
ANR	867558	PrimaryExpression	1		866904	1					
ANR	867559	PrimaryExpression	'('		866904	1					
ANR	867560	CompoundStatement		116:43:2293:2293	866904	1					
ANR	867561	ExpressionStatement	buf [ lidx ] = '\\0'	428:4:9447:9461	866904	0	True				
ANR	867562	AssignmentExpression	buf [ lidx ] = '\\0'		866904	0		=			
ANR	867563	ArrayIndexing	buf [ lidx ]		866904	0					
ANR	867564	Identifier	buf		866904	0					
ANR	867565	Identifier	lidx		866904	1					
ANR	867566	PrimaryExpression	'\\0'		866904	1					
ANR	867567	ExpressionStatement	"memcpy ( macro -> code + codelen , bufp , lbufp + 1 )"	429:4:9467:9510	866904	1	True				
ANR	867568	CallExpression	"memcpy ( macro -> code + codelen , bufp , lbufp + 1 )"		866904	0					
ANR	867569	Callee	memcpy		866904	0					
ANR	867570	Identifier	memcpy		866904	0					
ANR	867571	ArgumentList	macro -> code + codelen		866904	1					
ANR	867572	Argument	macro -> code + codelen		866904	0					
ANR	867573	AdditiveExpression	macro -> code + codelen		866904	0		+			
ANR	867574	PtrMemberAccess	macro -> code		866904	0					
ANR	867575	Identifier	macro		866904	0					
ANR	867576	Identifier	code		866904	1					
ANR	867577	Identifier	codelen		866904	1					
ANR	867578	Argument	bufp		866904	1					
ANR	867579	Identifier	bufp		866904	0					
ANR	867580	Argument	lbufp + 1		866904	2					
ANR	867581	AdditiveExpression	lbufp + 1		866904	0		+			
ANR	867582	Identifier	lbufp		866904	0					
ANR	867583	PrimaryExpression	1		866904	1					
ANR	867584	BreakStatement	break ;	430:4:9516:9521	866904	2	True				
ANR	867585	IfStatement	if ( * buf != '\\n' )		866904	10					
ANR	867586	Condition	* buf != '\\n'	432:7:9535:9546	866904	0	True				
ANR	867587	EqualityExpression	* buf != '\\n'		866904	0		!=			
ANR	867588	UnaryOperationExpression	* buf		866904	0					
ANR	867589	UnaryOperator	*		866904	0					
ANR	867590	Identifier	buf		866904	1					
ANR	867591	PrimaryExpression	'\\n'		866904	1					
ANR	867592	CompoundStatement		121:21:2401:2401	866904	1					
ANR	867593	ExpressionStatement	"memcpy ( macro -> code + codelen , bufp , lbufp + 1 )"	433:4:9555:9598	866904	0	True				
ANR	867594	CallExpression	"memcpy ( macro -> code + codelen , bufp , lbufp + 1 )"		866904	0					
ANR	867595	Callee	memcpy		866904	0					
ANR	867596	Identifier	memcpy		866904	0					
ANR	867597	ArgumentList	macro -> code + codelen		866904	1					
ANR	867598	Argument	macro -> code + codelen		866904	0					
ANR	867599	AdditiveExpression	macro -> code + codelen		866904	0		+			
ANR	867600	PtrMemberAccess	macro -> code		866904	0					
ANR	867601	Identifier	macro		866904	0					
ANR	867602	Identifier	code		866904	1					
ANR	867603	Identifier	codelen		866904	1					
ANR	867604	Argument	bufp		866904	1					
ANR	867605	Identifier	bufp		866904	0					
ANR	867606	Argument	lbufp + 1		866904	2					
ANR	867607	AdditiveExpression	lbufp + 1		866904	0		+			
ANR	867608	Identifier	lbufp		866904	0					
ANR	867609	PrimaryExpression	1		866904	1					
ANR	867610	ExpressionStatement	codelen += lbufp	434:4:9604:9620	866904	1	True				
ANR	867611	AssignmentExpression	codelen += lbufp		866904	0		+=			
ANR	867612	Identifier	codelen		866904	0					
ANR	867613	Identifier	lbufp		866904	1					
ANR	867614	IfStatement	if ( macro_update == 0 )		866904	42					
ANR	867615	Condition	macro_update == 0	439:5:9646:9662	866904	0	True				
ANR	867616	EqualityExpression	macro_update == 0		866904	0		==			
ANR	867617	Identifier	macro_update		866904	0					
ANR	867618	PrimaryExpression	0		866904	1					
ANR	867619	CompoundStatement		128:24:2517:2517	866904	1					
ANR	867620	ExpressionStatement	"r_list_append ( mac -> macros , macro )"	440:2:9669:9703	866904	0	True				
ANR	867621	CallExpression	"r_list_append ( mac -> macros , macro )"		866904	0					
ANR	867622	Callee	r_list_append		866904	0					
ANR	867623	Identifier	r_list_append		866904	0					
ANR	867624	ArgumentList	mac -> macros		866904	1					
ANR	867625	Argument	mac -> macros		866904	0					
ANR	867626	PtrMemberAccess	mac -> macros		866904	0					
ANR	867627	Identifier	mac		866904	0					
ANR	867628	Identifier	macros		866904	1					
ANR	867629	Argument	macro		866904	1					
ANR	867630	Identifier	macro		866904	0					
ANR	867631	ExpressionStatement	free ( name )	442:1:9709:9720	866904	43	True				
ANR	867632	CallExpression	free ( name )		866904	0					
ANR	867633	Callee	free		866904	0					
ANR	867634	Identifier	free		866904	0					
ANR	867635	ArgumentList	name		866904	1					
ANR	867636	Argument	name		866904	0					
ANR	867637	Identifier	name		866904	0					
ANR	867638	ReturnStatement	return 0 ;	443:1:9723:9731	866904	44	True				
ANR	867639	PrimaryExpression	0		866904	0					
ANR	867640	ReturnType	R_API int		866904	1					
ANR	867641	Identifier	r_cmd_macro_add		866904	2					
ANR	867642	ParameterList	"RCmdMacro * mac , const char * oname"		866904	3					
ANR	867643	Parameter	RCmdMacro * mac	312:26:7112:7125	866904	0	True				
ANR	867644	ParameterType	RCmdMacro *		866904	0					
ANR	867645	Identifier	mac		866904	1					
ANR	867646	Parameter	const char * oname	312:42:7128:7144	866904	1	True				
ANR	867647	ParameterType	const char *		866904	0					
ANR	867648	Identifier	oname		866904	1					
ANR	867649	CFGEntryNode	ENTRY		866904		True				
ANR	867650	CFGExitNode	EXIT		866904		True				
ANR	867651	CFGErrorNode	ERROR		866904		True				
ANR	867652	Symbol	stdin		866904						
ANR	867653	Symbol	stdout		866904						
ANR	867654	Symbol	strchr		866904						
ANR	867655	Symbol	r_str_word_set0		866904						
ANR	867656	Symbol	macro -> name		866904						
ANR	867657	Symbol	* * macro		866904						
ANR	867658	Symbol	* bufp		866904						
ANR	867659	Symbol	strlen		866904						
ANR	867660	Symbol	* ptr		866904						
ANR	867661	Symbol	r_cmd_macro_item_new		866904						
ANR	867662	Symbol	strcmp		866904						
ANR	867663	Symbol	macro_update		866904						
ANR	867664	Symbol	* buf		866904						
ANR	867665	Symbol	NULL		866904						
ANR	867666	Symbol	* pbody		866904						
ANR	867667	Symbol	* lidx		866904						
ANR	867668	Symbol	iter		866904						
ANR	867669	Symbol	codelen		866904						
ANR	867670	Symbol	* oname		866904						
ANR	867671	Symbol	oname		866904						
ANR	867672	Symbol	name		866904						
ANR	867673	Symbol	* mac		866904						
ANR	867674	Symbol	nl		866904						
ANR	867675	Symbol	macro -> nargs		866904						
ANR	867676	Symbol	pbody		866904						
ANR	867677	Symbol	* macro -> codelen		866904						
ANR	867678	Symbol	* macro -> code		866904						
ANR	867679	Symbol	mac		866904						
ANR	867680	Symbol	macro -> codelen		866904						
ANR	867681	Symbol	* macro		866904						
ANR	867682	Symbol	macro -> args		866904						
ANR	867683	Symbol	* name		866904						
ANR	867684	Symbol	r_cons_stdin_fd		866904						
ANR	867685	Symbol	macro		866904						
ANR	867686	Symbol	malloc		866904						
ANR	867687	Symbol	lidx		866904						
ANR	867688	Symbol	m -> name		866904						
ANR	867689	Symbol	false		866904						
ANR	867690	Symbol	lbufp		866904						
ANR	867691	Symbol	m		866904						
ANR	867692	Symbol	ptr		866904						
ANR	867693	Symbol	macro -> code		866904						
ANR	867694	Symbol	args		866904						
ANR	867695	Symbol	buf		866904						
ANR	867696	Symbol	bufp		866904						
ANR	867697	Symbol	mac -> macros		866904						
ANR	867698	Symbol	* strlen		866904						
ANR	867699	Symbol	R_CMD_MAXLEN		866904						
ANR	867700	Symbol	* m		866904						
ANR	867701	Symbol	strdup		866904						
ANR	867702	Function	r_cmd_macro_rm	446:0:9736:10195							
ANR	867703	FunctionDef	"r_cmd_macro_rm (RCmdMacro * mac , const char * _name)"		867702	0					
ANR	867704	CompoundStatement		446:60:9796:10195	867702	0					
ANR	867705	IdentifierDeclStatement	RListIter * iter ;	447:1:9799:9814	867702	0	True				
ANR	867706	IdentifierDecl	* iter		867702	0					
ANR	867707	IdentifierDeclType	RListIter *		867702	0					
ANR	867708	Identifier	iter		867702	1					
ANR	867709	IdentifierDeclStatement	RCmdMacroItem * m ;	448:1:9817:9833	867702	1	True				
ANR	867710	IdentifierDecl	* m		867702	0					
ANR	867711	IdentifierDeclType	RCmdMacroItem *		867702	0					
ANR	867712	Identifier	m		867702	1					
ANR	867713	IdentifierDeclStatement	char * name = strdup ( _name ) ;	449:1:9836:9863	867702	2	True				
ANR	867714	IdentifierDecl	* name = strdup ( _name )		867702	0					
ANR	867715	IdentifierDeclType	char *		867702	0					
ANR	867716	Identifier	name		867702	1					
ANR	867717	AssignmentExpression	* name = strdup ( _name )		867702	2		=			
ANR	867718	Identifier	name		867702	0					
ANR	867719	CallExpression	strdup ( _name )		867702	1					
ANR	867720	Callee	strdup		867702	0					
ANR	867721	Identifier	strdup		867702	0					
ANR	867722	ArgumentList	_name		867702	1					
ANR	867723	Argument	_name		867702	0					
ANR	867724	Identifier	_name		867702	0					
ANR	867725	IfStatement	if ( ! name )		867702	3					
ANR	867726	Condition	! name	450:5:9870:9874	867702	0	True				
ANR	867727	UnaryOperationExpression	! name		867702	0					
ANR	867728	UnaryOperator	!		867702	0					
ANR	867729	Identifier	name		867702	1					
ANR	867730	CompoundStatement		5:12:80:80	867702	1					
ANR	867731	ReturnStatement	return false ;	451:2:9881:9893	867702	0	True				
ANR	867732	Identifier	false		867702	0					
ANR	867733	IdentifierDeclStatement	"char * ptr = strchr ( name , ')' ) ;"	453:1:9899:9929	867702	4	True				
ANR	867734	IdentifierDecl	"* ptr = strchr ( name , ')' )"		867702	0					
ANR	867735	IdentifierDeclType	char *		867702	0					
ANR	867736	Identifier	ptr		867702	1					
ANR	867737	AssignmentExpression	"* ptr = strchr ( name , ')' )"		867702	2		=			
ANR	867738	Identifier	ptr		867702	0					
ANR	867739	CallExpression	"strchr ( name , ')' )"		867702	1					
ANR	867740	Callee	strchr		867702	0					
ANR	867741	Identifier	strchr		867702	0					
ANR	867742	ArgumentList	name		867702	1					
ANR	867743	Argument	name		867702	0					
ANR	867744	Identifier	name		867702	0					
ANR	867745	Argument	')'		867702	1					
ANR	867746	PrimaryExpression	')'		867702	0					
ANR	867747	IfStatement	if ( ptr )		867702	5					
ANR	867748	Condition	ptr	454:5:9936:9938	867702	0	True				
ANR	867749	Identifier	ptr		867702	0					
ANR	867750	CompoundStatement		9:10:144:144	867702	1					
ANR	867751	ExpressionStatement	* ptr = '\\0'	455:2:9945:9956	867702	0	True				
ANR	867752	AssignmentExpression	* ptr = '\\0'		867702	0		=			
ANR	867753	UnaryOperationExpression	* ptr		867702	0					
ANR	867754	UnaryOperator	*		867702	0					
ANR	867755	Identifier	ptr		867702	1					
ANR	867756	PrimaryExpression	'\\0'		867702	1					
ANR	867757	IdentifierDeclStatement	bool ret = false ;	457:1:9962:9978	867702	6	True				
ANR	867758	IdentifierDecl	ret = false		867702	0					
ANR	867759	IdentifierDeclType	bool		867702	0					
ANR	867760	Identifier	ret		867702	1					
ANR	867761	AssignmentExpression	ret = false		867702	2		=			
ANR	867762	Identifier	false		867702	0					
ANR	867763	Identifier	false		867702	1					
ANR	867764	Statement	r_list_foreach	458:1:9981:9994	867702	7	True				
ANR	867765	Statement	(	458:16:9996:9996	867702	8	True				
ANR	867766	Statement	mac	458:17:9997:9999	867702	9	True				
ANR	867767	Statement	->	458:20:10000:10001	867702	10	True				
ANR	867768	Statement	macros	458:22:10002:10007	867702	11	True				
ANR	867769	Statement	","	458:28:10008:10008	867702	12	True				
ANR	867770	Statement	iter	458:30:10010:10013	867702	13	True				
ANR	867771	Statement	","	458:34:10014:10014	867702	14	True				
ANR	867772	Statement	m	458:36:10016:10016	867702	15	True				
ANR	867773	Statement	)	458:37:10017:10017	867702	16	True				
ANR	867774	CompoundStatement		13:39:222:222	867702	17					
ANR	867775	IfStatement	"if ( ! strcmp ( m -> name , name ) )"		867702	0					
ANR	867776	Condition	"! strcmp ( m -> name , name )"	459:6:10027:10049	867702	0	True				
ANR	867777	UnaryOperationExpression	"! strcmp ( m -> name , name )"		867702	0					
ANR	867778	UnaryOperator	!		867702	0					
ANR	867779	CallExpression	"strcmp ( m -> name , name )"		867702	1					
ANR	867780	Callee	strcmp		867702	0					
ANR	867781	Identifier	strcmp		867702	0					
ANR	867782	ArgumentList	m -> name		867702	1					
ANR	867783	Argument	m -> name		867702	0					
ANR	867784	PtrMemberAccess	m -> name		867702	0					
ANR	867785	Identifier	m		867702	0					
ANR	867786	Identifier	name		867702	1					
ANR	867787	Argument	name		867702	1					
ANR	867788	Identifier	name		867702	0					
ANR	867789	CompoundStatement		14:31:255:255	867702	1					
ANR	867790	ExpressionStatement	"r_list_delete ( mac -> macros , iter )"	460:3:10057:10090	867702	0	True				
ANR	867791	CallExpression	"r_list_delete ( mac -> macros , iter )"		867702	0					
ANR	867792	Callee	r_list_delete		867702	0					
ANR	867793	Identifier	r_list_delete		867702	0					
ANR	867794	ArgumentList	mac -> macros		867702	1					
ANR	867795	Argument	mac -> macros		867702	0					
ANR	867796	PtrMemberAccess	mac -> macros		867702	0					
ANR	867797	Identifier	mac		867702	0					
ANR	867798	Identifier	macros		867702	1					
ANR	867799	Argument	iter		867702	1					
ANR	867800	Identifier	iter		867702	0					
ANR	867801	ExpressionStatement	"eprintf ( ""Macro '%s' removed.\\n"" , name )"	461:3:10095:10134	867702	1	True				
ANR	867802	CallExpression	"eprintf ( ""Macro '%s' removed.\\n"" , name )"		867702	0					
ANR	867803	Callee	eprintf		867702	0					
ANR	867804	Identifier	eprintf		867702	0					
ANR	867805	ArgumentList	"""Macro '%s' removed.\\n"""		867702	1					
ANR	867806	Argument	"""Macro '%s' removed.\\n"""		867702	0					
ANR	867807	PrimaryExpression	"""Macro '%s' removed.\\n"""		867702	0					
ANR	867808	Argument	name		867702	1					
ANR	867809	Identifier	name		867702	0					
ANR	867810	ExpressionStatement	ret = true	462:3:10139:10149	867702	2	True				
ANR	867811	AssignmentExpression	ret = true		867702	0		=			
ANR	867812	Identifier	ret		867702	0					
ANR	867813	Identifier	true		867702	1					
ANR	867814	BreakStatement	break ;	463:3:10154:10159	867702	3	True				
ANR	867815	ExpressionStatement	free ( name )	466:1:10169:10180	867702	18	True				
ANR	867816	CallExpression	free ( name )		867702	0					
ANR	867817	Callee	free		867702	0					
ANR	867818	Identifier	free		867702	0					
ANR	867819	ArgumentList	name		867702	1					
ANR	867820	Argument	name		867702	0					
ANR	867821	Identifier	name		867702	0					
ANR	867822	ReturnStatement	return ret ;	467:1:10183:10193	867702	19	True				
ANR	867823	Identifier	ret		867702	0					
ANR	867824	ReturnType	R_API int		867702	1					
ANR	867825	Identifier	r_cmd_macro_rm		867702	2					
ANR	867826	ParameterList	"RCmdMacro * mac , const char * _name"		867702	3					
ANR	867827	Parameter	RCmdMacro * mac	446:25:9761:9774	867702	0	True				
ANR	867828	ParameterType	RCmdMacro *		867702	0					
ANR	867829	Identifier	mac		867702	1					
ANR	867830	Parameter	const char * _name	446:41:9777:9793	867702	1	True				
ANR	867831	ParameterType	const char *		867702	0					
ANR	867832	Identifier	_name		867702	1					
ANR	867833	CFGEntryNode	ENTRY		867702		True				
ANR	867834	CFGExitNode	EXIT		867702		True				
ANR	867835	CFGErrorNode	ERROR		867702		True				
ANR	867836	Symbol	ret		867702						
ANR	867837	Symbol	strcmp		867702						
ANR	867838	Symbol	m -> name		867702						
ANR	867839	Symbol	_name		867702						
ANR	867840	Symbol	false		867702						
ANR	867841	Symbol	iter		867702						
ANR	867842	Symbol	strchr		867702						
ANR	867843	Symbol	m		867702						
ANR	867844	Symbol	mac		867702						
ANR	867845	Symbol	ptr		867702						
ANR	867846	Symbol	mac -> macros		867702						
ANR	867847	Symbol	* m		867702						
ANR	867848	Symbol	name		867702						
ANR	867849	Symbol	* ptr		867702						
ANR	867850	Symbol	true		867702						
ANR	867851	Symbol	* mac		867702						
ANR	867852	Symbol	strdup		867702						
ANR	867853	Function	r_cmd_macro_list	471:0:10260:10643							
ANR	867854	FunctionDef	r_cmd_macro_list (RCmdMacro * mac)		867853	0					
ANR	867855	CompoundStatement		471:44:10304:10643	867853	0					
ANR	867856	IdentifierDeclStatement	RCmdMacroItem * m ;	472:1:10307:10323	867853	0	True				
ANR	867857	IdentifierDecl	* m		867853	0					
ANR	867858	IdentifierDeclType	RCmdMacroItem *		867853	0					
ANR	867859	Identifier	m		867853	1					
ANR	867860	IdentifierDeclStatement	"int j , idx = 0 ;"	473:1:10326:10340	867853	1	True				
ANR	867861	IdentifierDecl	j		867853	0					
ANR	867862	IdentifierDeclType	int		867853	0					
ANR	867863	Identifier	j		867853	1					
ANR	867864	IdentifierDecl	idx = 0		867853	1					
ANR	867865	IdentifierDeclType	int		867853	0					
ANR	867866	Identifier	idx		867853	1					
ANR	867867	AssignmentExpression	idx = 0		867853	2		=			
ANR	867868	Identifier	idx		867853	0					
ANR	867869	PrimaryExpression	0		867853	1					
ANR	867870	IdentifierDeclStatement	RListIter * iter ;	474:1:10343:10358	867853	2	True				
ANR	867871	IdentifierDecl	* iter		867853	0					
ANR	867872	IdentifierDeclType	RListIter *		867853	0					
ANR	867873	Identifier	iter		867853	1					
ANR	867874	Statement	r_list_foreach	475:1:10361:10374	867853	3	True				
ANR	867875	Statement	(	475:16:10376:10376	867853	4	True				
ANR	867876	Statement	mac	475:17:10377:10379	867853	5	True				
ANR	867877	Statement	->	475:20:10380:10381	867853	6	True				
ANR	867878	Statement	macros	475:22:10382:10387	867853	7	True				
ANR	867879	Statement	","	475:28:10388:10388	867853	8	True				
ANR	867880	Statement	iter	475:30:10390:10393	867853	9	True				
ANR	867881	Statement	","	475:34:10394:10394	867853	10	True				
ANR	867882	Statement	m	475:36:10396:10396	867853	11	True				
ANR	867883	Statement	)	475:37:10397:10397	867853	12	True				
ANR	867884	CompoundStatement		5:39:94:94	867853	13					
ANR	867885	ExpressionStatement	"mac -> cb_printf ( ""%d (%s %s, "" , idx , m -> name , m -> args )"	476:2:10403:10456	867853	0	True				
ANR	867886	CallExpression	"mac -> cb_printf ( ""%d (%s %s, "" , idx , m -> name , m -> args )"		867853	0					
ANR	867887	Callee	mac -> cb_printf		867853	0					
ANR	867888	PtrMemberAccess	mac -> cb_printf		867853	0					
ANR	867889	Identifier	mac		867853	0					
ANR	867890	Identifier	cb_printf		867853	1					
ANR	867891	ArgumentList	"""%d (%s %s, """		867853	1					
ANR	867892	Argument	"""%d (%s %s, """		867853	0					
ANR	867893	PrimaryExpression	"""%d (%s %s, """		867853	0					
ANR	867894	Argument	idx		867853	1					
ANR	867895	Identifier	idx		867853	0					
ANR	867896	Argument	m -> name		867853	2					
ANR	867897	PtrMemberAccess	m -> name		867853	0					
ANR	867898	Identifier	m		867853	0					
ANR	867899	Identifier	name		867853	1					
ANR	867900	Argument	m -> args		867853	3					
ANR	867901	PtrMemberAccess	m -> args		867853	0					
ANR	867902	Identifier	m		867853	0					
ANR	867903	Identifier	args		867853	1					
ANR	867904	ForStatement	for ( j = 0 ; m -> code [ j ] ; j ++ )		867853	1					
ANR	867905	ForInit	j = 0 ;	477:7:10465:10468	867853	0	True				
ANR	867906	AssignmentExpression	j = 0		867853	0		=			
ANR	867907	Identifier	j		867853	0					
ANR	867908	PrimaryExpression	0		867853	1					
ANR	867909	Condition	m -> code [ j ]	477:12:10470:10479	867853	1	True				
ANR	867910	ArrayIndexing	m -> code [ j ]		867853	0					
ANR	867911	PtrMemberAccess	m -> code		867853	0					
ANR	867912	Identifier	m		867853	0					
ANR	867913	Identifier	code		867853	1					
ANR	867914	Identifier	j		867853	1					
ANR	867915	PostIncDecOperationExpression	j ++	477:24:10482:10484	867853	2	True				
ANR	867916	Identifier	j		867853	0					
ANR	867917	IncDec	++		867853	1					
ANR	867918	CompoundStatement		7:29:182:182	867853	3					
ANR	867919	IfStatement	if ( m -> code [ j ] == '\\n' )		867853	0					
ANR	867920	Condition	m -> code [ j ] == '\\n'	478:7:10496:10513	867853	0	True				
ANR	867921	EqualityExpression	m -> code [ j ] == '\\n'		867853	0		==			
ANR	867922	ArrayIndexing	m -> code [ j ]		867853	0					
ANR	867923	PtrMemberAccess	m -> code		867853	0					
ANR	867924	Identifier	m		867853	0					
ANR	867925	Identifier	code		867853	1					
ANR	867926	Identifier	j		867853	1					
ANR	867927	PrimaryExpression	'\\n'		867853	1					
ANR	867928	CompoundStatement		8:27:211:211	867853	1					
ANR	867929	ExpressionStatement	"mac -> cb_printf ( "", "" )"	479:4:10522:10543	867853	0	True				
ANR	867930	CallExpression	"mac -> cb_printf ( "", "" )"		867853	0					
ANR	867931	Callee	mac -> cb_printf		867853	0					
ANR	867932	PtrMemberAccess	mac -> cb_printf		867853	0					
ANR	867933	Identifier	mac		867853	0					
ANR	867934	Identifier	cb_printf		867853	1					
ANR	867935	ArgumentList	""", """		867853	1					
ANR	867936	Argument	""", """		867853	0					
ANR	867937	PrimaryExpression	""", """		867853	0					
ANR	867938	ElseStatement	else		867853	0					
ANR	867939	CompoundStatement		10:10:250:250	867853	0					
ANR	867940	ExpressionStatement	"mac -> cb_printf ( ""%c"" , m -> code [ j ] )"	481:4:10561:10594	867853	0	True				
ANR	867941	CallExpression	"mac -> cb_printf ( ""%c"" , m -> code [ j ] )"		867853	0					
ANR	867942	Callee	mac -> cb_printf		867853	0					
ANR	867943	PtrMemberAccess	mac -> cb_printf		867853	0					
ANR	867944	Identifier	mac		867853	0					
ANR	867945	Identifier	cb_printf		867853	1					
ANR	867946	ArgumentList	"""%c"""		867853	1					
ANR	867947	Argument	"""%c"""		867853	0					
ANR	867948	PrimaryExpression	"""%c"""		867853	0					
ANR	867949	Argument	m -> code [ j ]		867853	1					
ANR	867950	ArrayIndexing	m -> code [ j ]		867853	0					
ANR	867951	PtrMemberAccess	m -> code		867853	0					
ANR	867952	Identifier	m		867853	0					
ANR	867953	Identifier	code		867853	1					
ANR	867954	Identifier	j		867853	1					
ANR	867955	ExpressionStatement	"mac -> cb_printf ( "")\\n"" )"	484:2:10607:10629	867853	2	True				
ANR	867956	CallExpression	"mac -> cb_printf ( "")\\n"" )"		867853	0					
ANR	867957	Callee	mac -> cb_printf		867853	0					
ANR	867958	PtrMemberAccess	mac -> cb_printf		867853	0					
ANR	867959	Identifier	mac		867853	0					
ANR	867960	Identifier	cb_printf		867853	1					
ANR	867961	ArgumentList	""")\\n"""		867853	1					
ANR	867962	Argument	""")\\n"""		867853	0					
ANR	867963	PrimaryExpression	""")\\n"""		867853	0					
ANR	867964	ExpressionStatement	idx ++	485:2:10633:10638	867853	3	True				
ANR	867965	PostIncDecOperationExpression	idx ++		867853	0					
ANR	867966	Identifier	idx		867853	0					
ANR	867967	IncDec	++		867853	1					
ANR	867968	ReturnType	R_API void		867853	1					
ANR	867969	Identifier	r_cmd_macro_list		867853	2					
ANR	867970	ParameterList	RCmdMacro * mac		867853	3					
ANR	867971	Parameter	RCmdMacro * mac	471:28:10288:10301	867853	0	True				
ANR	867972	ParameterType	RCmdMacro *		867853	0					
ANR	867973	Identifier	mac		867853	1					
ANR	867974	CFGEntryNode	ENTRY		867853		True				
ANR	867975	CFGExitNode	EXIT		867853		True				
ANR	867976	Symbol	* m -> code		867853						
ANR	867977	Symbol	m -> name		867853						
ANR	867978	Symbol	* j		867853						
ANR	867979	Symbol	m -> code		867853						
ANR	867980	Symbol	* m		867853						
ANR	867981	Symbol	m -> args		867853						
ANR	867982	Symbol	iter		867853						
ANR	867983	Symbol	j		867853						
ANR	867984	Symbol	idx		867853						
ANR	867985	Symbol	m		867853						
ANR	867986	Symbol	mac		867853						
ANR	867987	Symbol	* * m		867853						
ANR	867988	Function	r_cmd_macro_meta	490:0:10708:11065							
ANR	867989	FunctionDef	r_cmd_macro_meta (RCmdMacro * mac)		867988	0					
ANR	867990	CompoundStatement		490:44:10752:11065	867988	0					
ANR	867991	IdentifierDeclStatement	RCmdMacroItem * m ;	491:1:10755:10771	867988	0	True				
ANR	867992	IdentifierDecl	* m		867988	0					
ANR	867993	IdentifierDeclType	RCmdMacroItem *		867988	0					
ANR	867994	Identifier	m		867988	1					
ANR	867995	IdentifierDeclStatement	int j ;	492:1:10774:10779	867988	1	True				
ANR	867996	IdentifierDecl	j		867988	0					
ANR	867997	IdentifierDeclType	int		867988	0					
ANR	867998	Identifier	j		867988	1					
ANR	867999	IdentifierDeclStatement	RListIter * iter ;	493:1:10782:10797	867988	2	True				
ANR	868000	IdentifierDecl	* iter		867988	0					
ANR	868001	IdentifierDeclType	RListIter *		867988	0					
ANR	868002	Identifier	iter		867988	1					
ANR	868003	Statement	r_list_foreach	494:1:10800:10813	867988	3	True				
ANR	868004	Statement	(	494:16:10815:10815	867988	4	True				
ANR	868005	Statement	mac	494:17:10816:10818	867988	5	True				
ANR	868006	Statement	->	494:20:10819:10820	867988	6	True				
ANR	868007	Statement	macros	494:22:10821:10826	867988	7	True				
ANR	868008	Statement	","	494:28:10827:10827	867988	8	True				
ANR	868009	Statement	iter	494:30:10829:10832	867988	9	True				
ANR	868010	Statement	","	494:34:10833:10833	867988	10	True				
ANR	868011	Statement	m	494:36:10835:10835	867988	11	True				
ANR	868012	Statement	)	494:37:10836:10836	867988	12	True				
ANR	868013	CompoundStatement		5:39:85:85	867988	13					
ANR	868014	ExpressionStatement	"mac -> cb_printf ( ""(%s %s, "" , m -> name , m -> args )"	495:2:10842:10887	867988	0	True				
ANR	868015	CallExpression	"mac -> cb_printf ( ""(%s %s, "" , m -> name , m -> args )"		867988	0					
ANR	868016	Callee	mac -> cb_printf		867988	0					
ANR	868017	PtrMemberAccess	mac -> cb_printf		867988	0					
ANR	868018	Identifier	mac		867988	0					
ANR	868019	Identifier	cb_printf		867988	1					
ANR	868020	ArgumentList	"""(%s %s, """		867988	1					
ANR	868021	Argument	"""(%s %s, """		867988	0					
ANR	868022	PrimaryExpression	"""(%s %s, """		867988	0					
ANR	868023	Argument	m -> name		867988	1					
ANR	868024	PtrMemberAccess	m -> name		867988	0					
ANR	868025	Identifier	m		867988	0					
ANR	868026	Identifier	name		867988	1					
ANR	868027	Argument	m -> args		867988	2					
ANR	868028	PtrMemberAccess	m -> args		867988	0					
ANR	868029	Identifier	m		867988	0					
ANR	868030	Identifier	args		867988	1					
ANR	868031	ForStatement	for ( j = 0 ; m -> code [ j ] ; j ++ )		867988	1					
ANR	868032	ForInit	j = 0 ;	496:7:10896:10899	867988	0	True				
ANR	868033	AssignmentExpression	j = 0		867988	0		=			
ANR	868034	Identifier	j		867988	0					
ANR	868035	PrimaryExpression	0		867988	1					
ANR	868036	Condition	m -> code [ j ]	496:12:10901:10910	867988	1	True				
ANR	868037	ArrayIndexing	m -> code [ j ]		867988	0					
ANR	868038	PtrMemberAccess	m -> code		867988	0					
ANR	868039	Identifier	m		867988	0					
ANR	868040	Identifier	code		867988	1					
ANR	868041	Identifier	j		867988	1					
ANR	868042	PostIncDecOperationExpression	j ++	496:24:10913:10915	867988	2	True				
ANR	868043	Identifier	j		867988	0					
ANR	868044	IncDec	++		867988	1					
ANR	868045	CompoundStatement		7:29:165:165	867988	3					
ANR	868046	IfStatement	if ( m -> code [ j ] == '\\n' )		867988	0					
ANR	868047	Condition	m -> code [ j ] == '\\n'	497:7:10927:10944	867988	0	True				
ANR	868048	EqualityExpression	m -> code [ j ] == '\\n'		867988	0		==			
ANR	868049	ArrayIndexing	m -> code [ j ]		867988	0					
ANR	868050	PtrMemberAccess	m -> code		867988	0					
ANR	868051	Identifier	m		867988	0					
ANR	868052	Identifier	code		867988	1					
ANR	868053	Identifier	j		867988	1					
ANR	868054	PrimaryExpression	'\\n'		867988	1					
ANR	868055	CompoundStatement		8:27:194:194	867988	1					
ANR	868056	ExpressionStatement	"mac -> cb_printf ( "", "" )"	498:4:10953:10974	867988	0	True				
ANR	868057	CallExpression	"mac -> cb_printf ( "", "" )"		867988	0					
ANR	868058	Callee	mac -> cb_printf		867988	0					
ANR	868059	PtrMemberAccess	mac -> cb_printf		867988	0					
ANR	868060	Identifier	mac		867988	0					
ANR	868061	Identifier	cb_printf		867988	1					
ANR	868062	ArgumentList	""", """		867988	1					
ANR	868063	Argument	""", """		867988	0					
ANR	868064	PrimaryExpression	""", """		867988	0					
ANR	868065	ElseStatement	else		867988	0					
ANR	868066	CompoundStatement		10:10:233:233	867988	0					
ANR	868067	ExpressionStatement	"mac -> cb_printf ( ""%c"" , m -> code [ j ] )"	500:4:10992:11025	867988	0	True				
ANR	868068	CallExpression	"mac -> cb_printf ( ""%c"" , m -> code [ j ] )"		867988	0					
ANR	868069	Callee	mac -> cb_printf		867988	0					
ANR	868070	PtrMemberAccess	mac -> cb_printf		867988	0					
ANR	868071	Identifier	mac		867988	0					
ANR	868072	Identifier	cb_printf		867988	1					
ANR	868073	ArgumentList	"""%c"""		867988	1					
ANR	868074	Argument	"""%c"""		867988	0					
ANR	868075	PrimaryExpression	"""%c"""		867988	0					
ANR	868076	Argument	m -> code [ j ]		867988	1					
ANR	868077	ArrayIndexing	m -> code [ j ]		867988	0					
ANR	868078	PtrMemberAccess	m -> code		867988	0					
ANR	868079	Identifier	m		867988	0					
ANR	868080	Identifier	code		867988	1					
ANR	868081	Identifier	j		867988	1					
ANR	868082	ExpressionStatement	"mac -> cb_printf ( "")\\n"" )"	503:2:11038:11060	867988	2	True				
ANR	868083	CallExpression	"mac -> cb_printf ( "")\\n"" )"		867988	0					
ANR	868084	Callee	mac -> cb_printf		867988	0					
ANR	868085	PtrMemberAccess	mac -> cb_printf		867988	0					
ANR	868086	Identifier	mac		867988	0					
ANR	868087	Identifier	cb_printf		867988	1					
ANR	868088	ArgumentList	""")\\n"""		867988	1					
ANR	868089	Argument	""")\\n"""		867988	0					
ANR	868090	PrimaryExpression	""")\\n"""		867988	0					
ANR	868091	ReturnType	R_API void		867988	1					
ANR	868092	Identifier	r_cmd_macro_meta		867988	2					
ANR	868093	ParameterList	RCmdMacro * mac		867988	3					
ANR	868094	Parameter	RCmdMacro * mac	490:28:10736:10749	867988	0	True				
ANR	868095	ParameterType	RCmdMacro *		867988	0					
ANR	868096	Identifier	mac		867988	1					
ANR	868097	CFGEntryNode	ENTRY		867988		True				
ANR	868098	CFGExitNode	EXIT		867988		True				
ANR	868099	Symbol	* m -> code		867988						
ANR	868100	Symbol	m -> name		867988						
ANR	868101	Symbol	* j		867988						
ANR	868102	Symbol	m -> code		867988						
ANR	868103	Symbol	* m		867988						
ANR	868104	Symbol	m -> args		867988						
ANR	868105	Symbol	iter		867988						
ANR	868106	Symbol	j		867988						
ANR	868107	Symbol	m		867988						
ANR	868108	Symbol	mac		867988						
ANR	868109	Symbol	* * m		867988						
ANR	868110	Function	r_cmd_macro_cmd_args	520:0:11188:12454							
ANR	868111	FunctionDef	"r_cmd_macro_cmd_args (RCmdMacro * mac , const char * ptr , const char * args , int nargs)"		868110	0					
ANR	868112	CompoundStatement		520:93:11281:12454	868110	0					
ANR	868113	IdentifierDeclStatement	"int i , j ;"	521:1:11284:11292	868110	0	True				
ANR	868114	IdentifierDecl	i		868110	0					
ANR	868115	IdentifierDeclType	int		868110	0					
ANR	868116	Identifier	i		868110	1					
ANR	868117	IdentifierDecl	j		868110	1					
ANR	868118	IdentifierDeclType	int		868110	0					
ANR	868119	Identifier	j		868110	1					
ANR	868120	IdentifierDeclStatement	"char * pcmd , cmd [ R_CMD_MAXLEN ] ;"	522:1:11295:11324	868110	1	True				
ANR	868121	IdentifierDecl	* pcmd		868110	0					
ANR	868122	IdentifierDeclType	char *		868110	0					
ANR	868123	Identifier	pcmd		868110	1					
ANR	868124	IdentifierDecl	cmd [ R_CMD_MAXLEN ]		868110	1					
ANR	868125	IdentifierDeclType	char [ R_CMD_MAXLEN ]		868110	0					
ANR	868126	Identifier	cmd		868110	1					
ANR	868127	Identifier	R_CMD_MAXLEN		868110	2					
ANR	868128	IdentifierDeclStatement	const char * arg = args ;	523:1:11327:11349	868110	2	True				
ANR	868129	IdentifierDecl	* arg = args		868110	0					
ANR	868130	IdentifierDeclType	const char *		868110	0					
ANR	868131	Identifier	arg		868110	1					
ANR	868132	AssignmentExpression	* arg = args		868110	2		=			
ANR	868133	Identifier	args		868110	0					
ANR	868134	Identifier	args		868110	1					
ANR	868135	ForStatement	"for ( * cmd = i = j = 0 ; j < R_CMD_MAXLEN && ptr [ j ] ; i ++ , j ++ )"		868110	3					
ANR	868136	ForInit	* cmd = i = j = 0 ;	525:6:11358:11368	868110	0	True				
ANR	868137	AssignmentExpression	* cmd = i = j = 0		868110	0		=			
ANR	868138	UnaryOperationExpression	* cmd		868110	0					
ANR	868139	UnaryOperator	*		868110	0					
ANR	868140	Identifier	cmd		868110	1					
ANR	868141	AssignmentExpression	i = j = 0		868110	1		=			
ANR	868142	Identifier	i		868110	0					
ANR	868143	AssignmentExpression	j = 0		868110	1		=			
ANR	868144	Identifier	j		868110	0					
ANR	868145	PrimaryExpression	0		868110	1					
ANR	868146	Condition	j < R_CMD_MAXLEN && ptr [ j ]	525:18:11370:11393	868110	1	True				
ANR	868147	AndExpression	j < R_CMD_MAXLEN && ptr [ j ]		868110	0		&&			
ANR	868148	RelationalExpression	j < R_CMD_MAXLEN		868110	0		<			
ANR	868149	Identifier	j		868110	0					
ANR	868150	Identifier	R_CMD_MAXLEN		868110	1					
ANR	868151	ArrayIndexing	ptr [ j ]		868110	1					
ANR	868152	Identifier	ptr		868110	0					
ANR	868153	Identifier	j		868110	1					
ANR	868154	Expression	"i ++ , j ++"	525:44:11396:11402	868110	2	True				
ANR	868155	PostIncDecOperationExpression	i ++		868110	0					
ANR	868156	Identifier	i		868110	0					
ANR	868157	IncDec	++		868110	1					
ANR	868158	PostIncDecOperationExpression	j ++		868110	1					
ANR	868159	Identifier	j		868110	0					
ANR	868160	IncDec	++		868110	1					
ANR	868161	CompoundStatement		6:53:123:123	868110	3					
ANR	868162	IfStatement	if ( ptr [ j ] == '$' )		868110	0					
ANR	868163	Condition	ptr [ j ] == '$'	526:6:11413:11423	868110	0	True				
ANR	868164	EqualityExpression	ptr [ j ] == '$'		868110	0		==			
ANR	868165	ArrayIndexing	ptr [ j ]		868110	0					
ANR	868166	Identifier	ptr		868110	0					
ANR	868167	Identifier	j		868110	1					
ANR	868168	PrimaryExpression	'$'		868110	1					
ANR	868169	CompoundStatement		7:19:144:144	868110	1					
ANR	868170	IfStatement	if ( ptr [ j + 1 ] >= '0' && ptr [ j + 1 ] <= '9' )		868110	0					
ANR	868171	Condition	ptr [ j + 1 ] >= '0' && ptr [ j + 1 ] <= '9'	527:7:11435:11464	868110	0	True				
ANR	868172	AndExpression	ptr [ j + 1 ] >= '0' && ptr [ j + 1 ] <= '9'		868110	0		&&			
ANR	868173	RelationalExpression	ptr [ j + 1 ] >= '0'		868110	0		>=			
ANR	868174	ArrayIndexing	ptr [ j + 1 ]		868110	0					
ANR	868175	Identifier	ptr		868110	0					
ANR	868176	AdditiveExpression	j + 1		868110	1		+			
ANR	868177	Identifier	j		868110	0					
ANR	868178	PrimaryExpression	1		868110	1					
ANR	868179	PrimaryExpression	'0'		868110	1					
ANR	868180	RelationalExpression	ptr [ j + 1 ] <= '9'		868110	1		<=			
ANR	868181	ArrayIndexing	ptr [ j + 1 ]		868110	0					
ANR	868182	Identifier	ptr		868110	0					
ANR	868183	AdditiveExpression	j + 1		868110	1		+			
ANR	868184	Identifier	j		868110	0					
ANR	868185	PrimaryExpression	1		868110	1					
ANR	868186	PrimaryExpression	'9'		868110	1					
ANR	868187	CompoundStatement		11:4:234:277	868110	1					
ANR	868188	IdentifierDeclStatement	int wordlen ;	528:4:11473:11484	868110	0	True				
ANR	868189	IdentifierDecl	wordlen		868110	0					
ANR	868190	IdentifierDeclType	int		868110	0					
ANR	868191	Identifier	wordlen		868110	1					
ANR	868192	IdentifierDeclStatement	int w = ptr [ j + 1 ] - '0' ;	529:4:11490:11510	868110	1	True				
ANR	868193	IdentifierDecl	w = ptr [ j + 1 ] - '0'		868110	0					
ANR	868194	IdentifierDeclType	int		868110	0					
ANR	868195	Identifier	w		868110	1					
ANR	868196	AssignmentExpression	w = ptr [ j + 1 ] - '0'		868110	2		=			
ANR	868197	Identifier	w		868110	0					
ANR	868198	AdditiveExpression	ptr [ j + 1 ] - '0'		868110	1		-			
ANR	868199	ArrayIndexing	ptr [ j + 1 ]		868110	0					
ANR	868200	Identifier	ptr		868110	0					
ANR	868201	AdditiveExpression	j + 1		868110	1		+			
ANR	868202	Identifier	j		868110	0					
ANR	868203	PrimaryExpression	1		868110	1					
ANR	868204	PrimaryExpression	'0'		868110	1					
ANR	868205	IdentifierDeclStatement	"const char * word = r_str_word_get0 ( arg , w ) ;"	530:4:11516:11559	868110	2	True				
ANR	868206	IdentifierDecl	"* word = r_str_word_get0 ( arg , w )"		868110	0					
ANR	868207	IdentifierDeclType	const char *		868110	0					
ANR	868208	Identifier	word		868110	1					
ANR	868209	AssignmentExpression	"* word = r_str_word_get0 ( arg , w )"		868110	2		=			
ANR	868210	Identifier	word		868110	0					
ANR	868211	CallExpression	"r_str_word_get0 ( arg , w )"		868110	1					
ANR	868212	Callee	r_str_word_get0		868110	0					
ANR	868213	Identifier	r_str_word_get0		868110	0					
ANR	868214	ArgumentList	arg		868110	1					
ANR	868215	Argument	arg		868110	0					
ANR	868216	Identifier	arg		868110	0					
ANR	868217	Argument	w		868110	1					
ANR	868218	Identifier	w		868110	0					
ANR	868219	IfStatement	if ( word && * word )		868110	3					
ANR	868220	Condition	word && * word	531:8:11569:11581	868110	0	True				
ANR	868221	AndExpression	word && * word		868110	0		&&			
ANR	868222	Identifier	word		868110	0					
ANR	868223	UnaryOperationExpression	* word		868110	1					
ANR	868224	UnaryOperator	*		868110	0					
ANR	868225	Identifier	word		868110	1					
ANR	868226	CompoundStatement		12:23:302:302	868110	1					
ANR	868227	ExpressionStatement	wordlen = strlen ( word )	532:5:11591:11614	868110	0	True				
ANR	868228	AssignmentExpression	wordlen = strlen ( word )		868110	0		=			
ANR	868229	Identifier	wordlen		868110	0					
ANR	868230	CallExpression	strlen ( word )		868110	1					
ANR	868231	Callee	strlen		868110	0					
ANR	868232	Identifier	strlen		868110	0					
ANR	868233	ArgumentList	word		868110	1					
ANR	868234	Argument	word		868110	0					
ANR	868235	Identifier	word		868110	0					
ANR	868236	IfStatement	if ( ( i + wordlen + 1 ) >= sizeof ( cmd ) )		868110	1					
ANR	868237	Condition	( i + wordlen + 1 ) >= sizeof ( cmd )	533:9:11625:11657	868110	0	True				
ANR	868238	RelationalExpression	( i + wordlen + 1 ) >= sizeof ( cmd )		868110	0		>=			
ANR	868239	AdditiveExpression	i + wordlen + 1		868110	0		+			
ANR	868240	Identifier	i		868110	0					
ANR	868241	AdditiveExpression	wordlen + 1		868110	1		+			
ANR	868242	Identifier	wordlen		868110	0					
ANR	868243	PrimaryExpression	1		868110	1					
ANR	868244	SizeofExpression	sizeof ( cmd )		868110	1					
ANR	868245	Sizeof	sizeof		868110	0					
ANR	868246	SizeofOperand	cmd		868110	1					
ANR	868247	CompoundStatement		14:44:378:378	868110	1					
ANR	868248	ReturnStatement	return - 1 ;	534:6:11668:11677	868110	0	True				
ANR	868249	UnaryOperationExpression	- 1		868110	0					
ANR	868250	UnaryOperator	-		868110	0					
ANR	868251	PrimaryExpression	1		868110	1					
ANR	868252	ExpressionStatement	"memcpy ( cmd + i , word , wordlen + 1 )"	536:5:11691:11722	868110	2	True				
ANR	868253	CallExpression	"memcpy ( cmd + i , word , wordlen + 1 )"		868110	0					
ANR	868254	Callee	memcpy		868110	0					
ANR	868255	Identifier	memcpy		868110	0					
ANR	868256	ArgumentList	cmd + i		868110	1					
ANR	868257	Argument	cmd + i		868110	0					
ANR	868258	AdditiveExpression	cmd + i		868110	0		+			
ANR	868259	Identifier	cmd		868110	0					
ANR	868260	Identifier	i		868110	1					
ANR	868261	Argument	word		868110	1					
ANR	868262	Identifier	word		868110	0					
ANR	868263	Argument	wordlen + 1		868110	2					
ANR	868264	AdditiveExpression	wordlen + 1		868110	0		+			
ANR	868265	Identifier	wordlen		868110	0					
ANR	868266	PrimaryExpression	1		868110	1					
ANR	868267	ExpressionStatement	i += wordlen - 1	537:5:11729:11743	868110	3	True				
ANR	868268	AssignmentExpression	i += wordlen - 1		868110	0		+=			
ANR	868269	Identifier	i		868110	0					
ANR	868270	AdditiveExpression	wordlen - 1		868110	1		-			
ANR	868271	Identifier	wordlen		868110	0					
ANR	868272	PrimaryExpression	1		868110	1					
ANR	868273	ExpressionStatement	j ++	538:5:11750:11753	868110	4	True				
ANR	868274	PostIncDecOperationExpression	j ++		868110	0					
ANR	868275	Identifier	j		868110	0					
ANR	868276	IncDec	++		868110	1					
ANR	868277	ElseStatement	else		868110	0					
ANR	868278	CompoundStatement		20:11:484:484	868110	0					
ANR	868279	ExpressionStatement	"eprintf ( ""Undefined argument %d\\n"" , w )"	540:5:11773:11811	868110	0	True				
ANR	868280	CallExpression	"eprintf ( ""Undefined argument %d\\n"" , w )"		868110	0					
ANR	868281	Callee	eprintf		868110	0					
ANR	868282	Identifier	eprintf		868110	0					
ANR	868283	ArgumentList	"""Undefined argument %d\\n"""		868110	1					
ANR	868284	Argument	"""Undefined argument %d\\n"""		868110	0					
ANR	868285	PrimaryExpression	"""Undefined argument %d\\n"""		868110	0					
ANR	868286	Argument	w		868110	1					
ANR	868287	Identifier	w		868110	0					
ANR	868288	ElseStatement	else		868110	0					
ANR	868289	IfStatement	if ( ptr [ j + 1 ] == '@' )		868110	0					
ANR	868290	Condition	ptr [ j + 1 ] == '@'	543:7:11836:11848	868110	0	True				
ANR	868291	EqualityExpression	ptr [ j + 1 ] == '@'		868110	0		==			
ANR	868292	ArrayIndexing	ptr [ j + 1 ]		868110	0					
ANR	868293	Identifier	ptr		868110	0					
ANR	868294	AdditiveExpression	j + 1		868110	1		+			
ANR	868295	Identifier	j		868110	0					
ANR	868296	PrimaryExpression	1		868110	1					
ANR	868297	PrimaryExpression	'@'		868110	1					
ANR	868298	CompoundStatement		26:4:593:603	868110	1					
ANR	868299	IdentifierDeclStatement	char off [ 32 ] ;	544:4:11857:11869	868110	0	True				
ANR	868300	IdentifierDecl	off [ 32 ]		868110	0					
ANR	868301	IdentifierDeclType	char [ 32 ]		868110	0					
ANR	868302	Identifier	off		868110	1					
ANR	868303	PrimaryExpression	32		868110	2					
ANR	868304	IdentifierDeclStatement	int offlen ;	545:4:11875:11885	868110	1	True				
ANR	868305	IdentifierDecl	offlen		868110	0					
ANR	868306	IdentifierDeclType	int		868110	0					
ANR	868307	Identifier	offlen		868110	1					
ANR	868308	ExpressionStatement	"offlen = snprintf ( off , sizeof ( off ) , ""%d"" , mac -> counter )"	546:4:11891:11953	868110	2	True				
ANR	868309	AssignmentExpression	"offlen = snprintf ( off , sizeof ( off ) , ""%d"" , mac -> counter )"		868110	0		=			
ANR	868310	Identifier	offlen		868110	0					
ANR	868311	CallExpression	"snprintf ( off , sizeof ( off ) , ""%d"" , mac -> counter )"		868110	1					
ANR	868312	Callee	snprintf		868110	0					
ANR	868313	Identifier	snprintf		868110	0					
ANR	868314	ArgumentList	off		868110	1					
ANR	868315	Argument	off		868110	0					
ANR	868316	Identifier	off		868110	0					
ANR	868317	Argument	sizeof ( off )		868110	1					
ANR	868318	SizeofExpression	sizeof ( off )		868110	0					
ANR	868319	Sizeof	sizeof		868110	0					
ANR	868320	SizeofOperand	off		868110	1					
ANR	868321	Argument	"""%d"""		868110	2					
ANR	868322	PrimaryExpression	"""%d"""		868110	0					
ANR	868323	Argument	mac -> counter		868110	3					
ANR	868324	PtrMemberAccess	mac -> counter		868110	0					
ANR	868325	Identifier	mac		868110	0					
ANR	868326	Identifier	counter		868110	1					
ANR	868327	IfStatement	if ( ( i + offlen + 1 ) >= sizeof ( cmd ) )		868110	3					
ANR	868328	Condition	( i + offlen + 1 ) >= sizeof ( cmd )	548:8:11963:11994	868110	0	True				
ANR	868329	RelationalExpression	( i + offlen + 1 ) >= sizeof ( cmd )		868110	0		>=			
ANR	868330	AdditiveExpression	i + offlen + 1		868110	0		+			
ANR	868331	Identifier	i		868110	0					
ANR	868332	AdditiveExpression	offlen + 1		868110	1		+			
ANR	868333	Identifier	offlen		868110	0					
ANR	868334	PrimaryExpression	1		868110	1					
ANR	868335	SizeofExpression	sizeof ( cmd )		868110	1					
ANR	868336	Sizeof	sizeof		868110	0					
ANR	868337	SizeofOperand	cmd		868110	1					
ANR	868338	CompoundStatement		29:42:715:715	868110	1					
ANR	868339	ReturnStatement	return - 1 ;	549:5:12004:12013	868110	0	True				
ANR	868340	UnaryOperationExpression	- 1		868110	0					
ANR	868341	UnaryOperator	-		868110	0					
ANR	868342	PrimaryExpression	1		868110	1					
ANR	868343	ExpressionStatement	"memcpy ( cmd + i , off , offlen + 1 )"	551:4:12025:12054	868110	4	True				
ANR	868344	CallExpression	"memcpy ( cmd + i , off , offlen + 1 )"		868110	0					
ANR	868345	Callee	memcpy		868110	0					
ANR	868346	Identifier	memcpy		868110	0					
ANR	868347	ArgumentList	cmd + i		868110	1					
ANR	868348	Argument	cmd + i		868110	0					
ANR	868349	AdditiveExpression	cmd + i		868110	0		+			
ANR	868350	Identifier	cmd		868110	0					
ANR	868351	Identifier	i		868110	1					
ANR	868352	Argument	off		868110	1					
ANR	868353	Identifier	off		868110	0					
ANR	868354	Argument	offlen + 1		868110	2					
ANR	868355	AdditiveExpression	offlen + 1		868110	0		+			
ANR	868356	Identifier	offlen		868110	0					
ANR	868357	PrimaryExpression	1		868110	1					
ANR	868358	ExpressionStatement	i += offlen - 1	552:4:12060:12073	868110	5	True				
ANR	868359	AssignmentExpression	i += offlen - 1		868110	0		+=			
ANR	868360	Identifier	i		868110	0					
ANR	868361	AdditiveExpression	offlen - 1		868110	1		-			
ANR	868362	Identifier	offlen		868110	0					
ANR	868363	PrimaryExpression	1		868110	1					
ANR	868364	ExpressionStatement	j ++	553:4:12079:12082	868110	6	True				
ANR	868365	PostIncDecOperationExpression	j ++		868110	0					
ANR	868366	Identifier	j		868110	0					
ANR	868367	IncDec	++		868110	1					
ANR	868368	ElseStatement	else		868110	0					
ANR	868369	CompoundStatement		35:10:812:812	868110	0					
ANR	868370	ExpressionStatement	cmd [ i ] = ptr [ j ]	555:4:12100:12115	868110	0	True				
ANR	868371	AssignmentExpression	cmd [ i ] = ptr [ j ]		868110	0		=			
ANR	868372	ArrayIndexing	cmd [ i ]		868110	0					
ANR	868373	Identifier	cmd		868110	0					
ANR	868374	Identifier	i		868110	1					
ANR	868375	ArrayIndexing	ptr [ j ]		868110	1					
ANR	868376	Identifier	ptr		868110	0					
ANR	868377	Identifier	j		868110	1					
ANR	868378	ExpressionStatement	cmd [ i + 1 ] = '\\0'	556:4:12121:12136	868110	1	True				
ANR	868379	AssignmentExpression	cmd [ i + 1 ] = '\\0'		868110	0		=			
ANR	868380	ArrayIndexing	cmd [ i + 1 ]		868110	0					
ANR	868381	Identifier	cmd		868110	0					
ANR	868382	AdditiveExpression	i + 1		868110	1		+			
ANR	868383	Identifier	i		868110	0					
ANR	868384	PrimaryExpression	1		868110	1					
ANR	868385	PrimaryExpression	'\\0'		868110	1					
ANR	868386	ElseStatement	else		868110	0					
ANR	868387	CompoundStatement		39:9:870:870	868110	0					
ANR	868388	ExpressionStatement	cmd [ i ] = ptr [ j ]	559:3:12157:12172	868110	0	True				
ANR	868389	AssignmentExpression	cmd [ i ] = ptr [ j ]		868110	0		=			
ANR	868390	ArrayIndexing	cmd [ i ]		868110	0					
ANR	868391	Identifier	cmd		868110	0					
ANR	868392	Identifier	i		868110	1					
ANR	868393	ArrayIndexing	ptr [ j ]		868110	1					
ANR	868394	Identifier	ptr		868110	0					
ANR	868395	Identifier	j		868110	1					
ANR	868396	ExpressionStatement	cmd [ i + 1 ] = '\\0'	560:3:12177:12192	868110	1	True				
ANR	868397	AssignmentExpression	cmd [ i + 1 ] = '\\0'		868110	0		=			
ANR	868398	ArrayIndexing	cmd [ i + 1 ]		868110	0					
ANR	868399	Identifier	cmd		868110	0					
ANR	868400	AdditiveExpression	i + 1		868110	1		+			
ANR	868401	Identifier	i		868110	0					
ANR	868402	PrimaryExpression	1		868110	1					
ANR	868403	PrimaryExpression	'\\0'		868110	1					
ANR	868404	ForStatement	for ( pcmd = cmd ; * pcmd && ( * pcmd == ' ' || * pcmd == '\\t' ) ; pcmd ++ )		868110	4					
ANR	868405	ForInit	pcmd = cmd ;	563:6:12207:12217	868110	0	True				
ANR	868406	AssignmentExpression	pcmd = cmd		868110	0		=			
ANR	868407	Identifier	pcmd		868110	0					
ANR	868408	Identifier	cmd		868110	1					
ANR	868409	Condition	* pcmd && ( * pcmd == ' ' || * pcmd == '\\t' )	563:18:12219:12258	868110	1	True				
ANR	868410	AndExpression	* pcmd && ( * pcmd == ' ' || * pcmd == '\\t' )		868110	0		&&			
ANR	868411	UnaryOperationExpression	* pcmd		868110	0					
ANR	868412	UnaryOperator	*		868110	0					
ANR	868413	Identifier	pcmd		868110	1					
ANR	868414	OrExpression	* pcmd == ' ' || * pcmd == '\\t'		868110	1		||			
ANR	868415	EqualityExpression	* pcmd == ' '		868110	0		==			
ANR	868416	UnaryOperationExpression	* pcmd		868110	0					
ANR	868417	UnaryOperator	*		868110	0					
ANR	868418	Identifier	pcmd		868110	1					
ANR	868419	PrimaryExpression	' '		868110	1					
ANR	868420	EqualityExpression	* pcmd == '\\t'		868110	1		==			
ANR	868421	UnaryOperationExpression	* pcmd		868110	0					
ANR	868422	UnaryOperator	*		868110	0					
ANR	868423	Identifier	pcmd		868110	1					
ANR	868424	PrimaryExpression	'\\t'		868110	1					
ANR	868425	PostIncDecOperationExpression	pcmd ++	563:60:12261:12266	868110	2	True				
ANR	868426	Identifier	pcmd		868110	0					
ANR	868427	IncDec	++		868110	1					
ANR	868428	CompoundStatement		44:68:987:987	868110	3					
ANR	868429	ExpressionStatement		564:2:12273:12273	868110	0	True				
ANR	868430	IdentifierDeclStatement	"int xx = ( * pcmd == ')' ) ? 0 : mac -> cmd ( mac -> user , pcmd ) ;"	567:1:12327:12379	868110	5	True				
ANR	868431	IdentifierDecl	"xx = ( * pcmd == ')' ) ? 0 : mac -> cmd ( mac -> user , pcmd )"		868110	0					
ANR	868432	IdentifierDeclType	int		868110	0					
ANR	868433	Identifier	xx		868110	1					
ANR	868434	AssignmentExpression	"xx = ( * pcmd == ')' ) ? 0 : mac -> cmd ( mac -> user , pcmd )"		868110	2		=			
ANR	868435	Identifier	xx		868110	0					
ANR	868436	ConditionalExpression	"( * pcmd == ')' ) ? 0 : mac -> cmd ( mac -> user , pcmd )"		868110	1					
ANR	868437	Condition	* pcmd == ')'		868110	0					
ANR	868438	EqualityExpression	* pcmd == ')'		868110	0		==			
ANR	868439	UnaryOperationExpression	* pcmd		868110	0					
ANR	868440	UnaryOperator	*		868110	0					
ANR	868441	Identifier	pcmd		868110	1					
ANR	868442	PrimaryExpression	')'		868110	1					
ANR	868443	PrimaryExpression	0		868110	1					
ANR	868444	CallExpression	"mac -> cmd ( mac -> user , pcmd )"		868110	2					
ANR	868445	Callee	mac -> cmd		868110	0					
ANR	868446	PtrMemberAccess	mac -> cmd		868110	0					
ANR	868447	Identifier	mac		868110	0					
ANR	868448	Identifier	cmd		868110	1					
ANR	868449	ArgumentList	mac -> user		868110	1					
ANR	868450	Argument	mac -> user		868110	0					
ANR	868451	PtrMemberAccess	mac -> user		868110	0					
ANR	868452	Identifier	mac		868110	0					
ANR	868453	Identifier	user		868110	1					
ANR	868454	Argument	pcmd		868110	1					
ANR	868455	Identifier	pcmd		868110	0					
ANR	868456	ReturnStatement	return xx ;	569:1:12443:12452	868110	6	True				
ANR	868457	Identifier	xx		868110	0					
ANR	868458	ReturnType	R_API int		868110	1					
ANR	868459	Identifier	r_cmd_macro_cmd_args		868110	2					
ANR	868460	ParameterList	"RCmdMacro * mac , const char * ptr , const char * args , int nargs"		868110	3					
ANR	868461	Parameter	RCmdMacro * mac	520:31:11219:11232	868110	0	True				
ANR	868462	ParameterType	RCmdMacro *		868110	0					
ANR	868463	Identifier	mac		868110	1					
ANR	868464	Parameter	const char * ptr	520:47:11235:11249	868110	1	True				
ANR	868465	ParameterType	const char *		868110	0					
ANR	868466	Identifier	ptr		868110	1					
ANR	868467	Parameter	const char * args	520:64:11252:11267	868110	2	True				
ANR	868468	ParameterType	const char *		868110	0					
ANR	868469	Identifier	args		868110	1					
ANR	868470	Parameter	int nargs	520:82:11270:11278	868110	3	True				
ANR	868471	ParameterType	int		868110	0					
ANR	868472	Identifier	nargs		868110	1					
ANR	868473	CFGEntryNode	ENTRY		868110		True				
ANR	868474	CFGExitNode	EXIT		868110		True				
ANR	868475	Symbol	xx		868110						
ANR	868476	Symbol	mac -> user		868110						
ANR	868477	Symbol	mac		868110						
ANR	868478	Symbol	strlen		868110						
ANR	868479	Symbol	arg		868110						
ANR	868480	Symbol	* ptr		868110						
ANR	868481	Symbol	* cmd		868110						
ANR	868482	Symbol	snprintf		868110						
ANR	868483	Symbol	* pcmd		868110						
ANR	868484	Symbol	* word		868110						
ANR	868485	Symbol	mac -> counter		868110						
ANR	868486	Symbol	i		868110						
ANR	868487	Symbol	j		868110						
ANR	868488	Symbol	r_str_word_get0		868110						
ANR	868489	Symbol	wordlen		868110						
ANR	868490	Symbol	off		868110						
ANR	868491	Symbol	mac -> cmd		868110						
ANR	868492	Symbol	ptr		868110						
ANR	868493	Symbol	args		868110						
ANR	868494	Symbol	nargs		868110						
ANR	868495	Symbol	offlen		868110						
ANR	868496	Symbol	* i		868110						
ANR	868497	Symbol	* j		868110						
ANR	868498	Symbol	R_CMD_MAXLEN		868110						
ANR	868499	Symbol	w		868110						
ANR	868500	Symbol	* mac		868110						
ANR	868501	Symbol	cmd		868110						
ANR	868502	Symbol	word		868110						
ANR	868503	Symbol	pcmd		868110						
ANR	868504	Function	r_cmd_macro_label_process	572:0:12457:14228							
ANR	868505	FunctionDef	"r_cmd_macro_label_process (RCmdMacro * mac , RCmdMacroLabel * labels , int * labels_n , char * ptr)"		868504	0					
ANR	868506	CompoundStatement		572:104:12561:14228	868504	0					
ANR	868507	IdentifierDeclStatement	int i ;	573:1:12564:12569	868504	0	True				
ANR	868508	IdentifierDecl	i		868504	0					
ANR	868509	IdentifierDeclType	int		868504	0					
ANR	868510	Identifier	i		868504	1					
ANR	868511	ForStatement	for ( ; * ptr == ' ' ; ptr ++ )		868504	1					
ANR	868512	Condition	* ptr == ' '	574:8:12579:12589	868504	0	True				
ANR	868513	EqualityExpression	* ptr == ' '		868504	0		==			
ANR	868514	UnaryOperationExpression	* ptr		868504	0					
ANR	868515	UnaryOperator	*		868504	0					
ANR	868516	Identifier	ptr		868504	1					
ANR	868517	PrimaryExpression	' '		868504	1					
ANR	868518	PostIncDecOperationExpression	ptr ++	574:21:12592:12596	868504	1	True				
ANR	868519	Identifier	ptr		868504	0					
ANR	868520	IncDec	++		868504	1					
ANR	868521	CompoundStatement		3:28:37:37	868504	2					
ANR	868522	ExpressionStatement		575:2:12603:12603	868504	0	True				
ANR	868523	IfStatement	"if ( ptr [ strlen ( ptr ) - 1 ] == ':' && ! strchr ( ptr , ' ' ) )"		868504	2					
ANR	868524	Condition	"ptr [ strlen ( ptr ) - 1 ] == ':' && ! strchr ( ptr , ' ' )"	577:5:12613:12658	868504	0	True				
ANR	868525	AndExpression	"ptr [ strlen ( ptr ) - 1 ] == ':' && ! strchr ( ptr , ' ' )"		868504	0		&&			
ANR	868526	EqualityExpression	ptr [ strlen ( ptr ) - 1 ] == ':'		868504	0		==			
ANR	868527	ArrayIndexing	ptr [ strlen ( ptr ) - 1 ]		868504	0					
ANR	868528	Identifier	ptr		868504	0					
ANR	868529	AdditiveExpression	strlen ( ptr ) - 1		868504	1		-			
ANR	868530	CallExpression	strlen ( ptr )		868504	0					
ANR	868531	Callee	strlen		868504	0					
ANR	868532	Identifier	strlen		868504	0					
ANR	868533	ArgumentList	ptr		868504	1					
ANR	868534	Argument	ptr		868504	0					
ANR	868535	Identifier	ptr		868504	0					
ANR	868536	PrimaryExpression	1		868504	1					
ANR	868537	PrimaryExpression	':'		868504	1					
ANR	868538	UnaryOperationExpression	"! strchr ( ptr , ' ' )"		868504	1					
ANR	868539	UnaryOperator	!		868504	0					
ANR	868540	CallExpression	"strchr ( ptr , ' ' )"		868504	1					
ANR	868541	Callee	strchr		868504	0					
ANR	868542	Identifier	strchr		868504	0					
ANR	868543	ArgumentList	ptr		868504	1					
ANR	868544	Argument	ptr		868504	0					
ANR	868545	Identifier	ptr		868504	0					
ANR	868546	Argument	' '		868504	1					
ANR	868547	PrimaryExpression	' '		868504	0					
ANR	868548	CompoundStatement		6:53:99:99	868504	1					
ANR	868549	IfStatement	if ( ptr [ 0 ] == '.' )		868504	0					
ANR	868550	Condition	ptr [ 0 ] == '.'	579:6:12692:12702	868504	0	True				
ANR	868551	EqualityExpression	ptr [ 0 ] == '.'		868504	0		==			
ANR	868552	ArrayIndexing	ptr [ 0 ]		868504	0					
ANR	868553	Identifier	ptr		868504	0					
ANR	868554	PrimaryExpression	0		868504	1					
ANR	868555	PrimaryExpression	'.'		868504	1					
ANR	868556	CompoundStatement		8:19:143:143	868504	1					
ANR	868557	ForStatement	for ( i = 0 ; i < * labels_n ; i ++ )		868504	0					
ANR	868558	ForInit	i = 0 ;	582:8:12770:12773	868504	0	True				
ANR	868559	AssignmentExpression	i = 0		868504	0		=			
ANR	868560	Identifier	i		868504	0					
ANR	868561	PrimaryExpression	0		868504	1					
ANR	868562	Condition	i < * labels_n	582:12:12774:12784	868504	1	True				
ANR	868563	RelationalExpression	i < * labels_n		868504	0		<			
ANR	868564	Identifier	i		868504	0					
ANR	868565	UnaryOperationExpression	* labels_n		868504	1					
ANR	868566	UnaryOperator	*		868504	0					
ANR	868567	Identifier	labels_n		868504	1					
ANR	868568	PostIncDecOperationExpression	i ++	582:24:12786:12788	868504	2	True				
ANR	868569	Identifier	i		868504	0					
ANR	868570	IncDec	++		868504	1					
ANR	868571	CompoundStatement		11:29:229:229	868504	3					
ANR	868572	IfStatement	"if ( ! strcmp ( ptr + 1 , labels [ i ] . name ) )"		868504	0					
ANR	868573	Condition	"! strcmp ( ptr + 1 , labels [ i ] . name )"	584:8:12850:12880	868504	0	True				
ANR	868574	UnaryOperationExpression	"! strcmp ( ptr + 1 , labels [ i ] . name )"		868504	0					
ANR	868575	UnaryOperator	!		868504	0					
ANR	868576	CallExpression	"strcmp ( ptr + 1 , labels [ i ] . name )"		868504	1					
ANR	868577	Callee	strcmp		868504	0					
ANR	868578	Identifier	strcmp		868504	0					
ANR	868579	ArgumentList	ptr + 1		868504	1					
ANR	868580	Argument	ptr + 1		868504	0					
ANR	868581	AdditiveExpression	ptr + 1		868504	0		+			
ANR	868582	Identifier	ptr		868504	0					
ANR	868583	PrimaryExpression	1		868504	1					
ANR	868584	Argument	labels [ i ] . name		868504	1					
ANR	868585	MemberAccess	labels [ i ] . name		868504	0					
ANR	868586	ArrayIndexing	labels [ i ]		868504	0					
ANR	868587	Identifier	labels		868504	0					
ANR	868588	Identifier	i		868504	1					
ANR	868589	Identifier	name		868504	1					
ANR	868590	CompoundStatement		13:41:321:321	868504	1					
ANR	868591	ReturnStatement	return labels [ i ] . ptr ;	585:5:12890:12910	868504	0	True				
ANR	868592	MemberAccess	labels [ i ] . ptr		868504	0					
ANR	868593	ArrayIndexing	labels [ i ]		868504	0					
ANR	868594	Identifier	labels		868504	0					
ANR	868595	Identifier	i		868504	1					
ANR	868596	Identifier	ptr		868504	1					
ANR	868597	ReturnStatement	return NULL ;	588:3:12925:12936	868504	1	True				
ANR	868598	Identifier	NULL		868504	0					
ANR	868599	ElseStatement	else		868504	0					
ANR	868600	IfStatement	if ( ptr [ 0 ] == '?' && ptr [ 1 ] == '!' && ptr [ 2 ] != '?' )		868504	0					
ANR	868601	Condition	ptr [ 0 ] == '?' && ptr [ 1 ] == '!' && ptr [ 2 ] != '?'	591:6:12978:13020	868504	0	True				
ANR	868602	AndExpression	ptr [ 0 ] == '?' && ptr [ 1 ] == '!' && ptr [ 2 ] != '?'		868504	0		&&			
ANR	868603	EqualityExpression	ptr [ 0 ] == '?'		868504	0		==			
ANR	868604	ArrayIndexing	ptr [ 0 ]		868504	0					
ANR	868605	Identifier	ptr		868504	0					
ANR	868606	PrimaryExpression	0		868504	1					
ANR	868607	PrimaryExpression	'?'		868504	1					
ANR	868608	AndExpression	ptr [ 1 ] == '!' && ptr [ 2 ] != '?'		868504	1		&&			
ANR	868609	EqualityExpression	ptr [ 1 ] == '!'		868504	0		==			
ANR	868610	ArrayIndexing	ptr [ 1 ]		868504	0					
ANR	868611	Identifier	ptr		868504	0					
ANR	868612	PrimaryExpression	1		868504	1					
ANR	868613	PrimaryExpression	'!'		868504	1					
ANR	868614	EqualityExpression	ptr [ 2 ] != '?'		868504	1		!=			
ANR	868615	ArrayIndexing	ptr [ 2 ]		868504	0					
ANR	868616	Identifier	ptr		868504	0					
ANR	868617	PrimaryExpression	2		868504	1					
ANR	868618	PrimaryExpression	'?'		868504	1					
ANR	868619	CompoundStatement		20:51:461:461	868504	1					
ANR	868620	IfStatement	if ( mac -> num && mac -> num -> value != 0 )		868504	0					
ANR	868621	Condition	mac -> num && mac -> num -> value != 0	592:7:13032:13063	868504	0	True				
ANR	868622	AndExpression	mac -> num && mac -> num -> value != 0		868504	0		&&			
ANR	868623	PtrMemberAccess	mac -> num		868504	0					
ANR	868624	Identifier	mac		868504	0					
ANR	868625	Identifier	num		868504	1					
ANR	868626	EqualityExpression	mac -> num -> value != 0		868504	1		!=			
ANR	868627	PtrMemberAccess	mac -> num -> value		868504	0					
ANR	868628	PtrMemberAccess	mac -> num		868504	0					
ANR	868629	Identifier	mac		868504	0					
ANR	868630	Identifier	num		868504	1					
ANR	868631	Identifier	value		868504	1					
ANR	868632	PrimaryExpression	0		868504	1					
ANR	868633	CompoundStatement		22:4:510:531	868504	1					
ANR	868634	IdentifierDeclStatement	char * label = ptr + 3 ;	593:4:13072:13093	868504	0	True				
ANR	868635	IdentifierDecl	* label = ptr + 3		868504	0					
ANR	868636	IdentifierDeclType	char *		868504	0					
ANR	868637	Identifier	label		868504	1					
ANR	868638	AssignmentExpression	* label = ptr + 3		868504	2		=			
ANR	868639	Identifier	label		868504	0					
ANR	868640	AdditiveExpression	ptr + 3		868504	1		+			
ANR	868641	Identifier	ptr		868504	0					
ANR	868642	PrimaryExpression	3		868504	1					
ANR	868643	ForStatement	for ( ; * label == ' ' || * label == '.' ; label ++ )		868504	1					
ANR	868644	Condition	* label == ' ' || * label == '.'	594:11:13106:13135	868504	0	True				
ANR	868645	OrExpression	* label == ' ' || * label == '.'		868504	0		||			
ANR	868646	EqualityExpression	* label == ' '		868504	0		==			
ANR	868647	UnaryOperationExpression	* label		868504	0					
ANR	868648	UnaryOperator	*		868504	0					
ANR	868649	Identifier	label		868504	1					
ANR	868650	PrimaryExpression	' '		868504	1					
ANR	868651	EqualityExpression	* label == '.'		868504	1		==			
ANR	868652	UnaryOperationExpression	* label		868504	0					
ANR	868653	UnaryOperator	*		868504	0					
ANR	868654	Identifier	label		868504	1					
ANR	868655	PrimaryExpression	'.'		868504	1					
ANR	868656	PostIncDecOperationExpression	label ++	594:43:13138:13144	868504	1	True				
ANR	868657	Identifier	label		868504	0					
ANR	868658	IncDec	++		868504	1					
ANR	868659	CompoundStatement		23:52:585:585	868504	2					
ANR	868660	ExpressionStatement		595:5:13154:13154	868504	0	True				
ANR	868661	ForStatement	for ( i = 0 ; i < * labels_n ; i ++ )		868504	2					
ANR	868662	ForInit	i = 0 ;	599:9:13240:13243	868504	0	True				
ANR	868663	AssignmentExpression	i = 0		868504	0		=			
ANR	868664	Identifier	i		868504	0					
ANR	868665	PrimaryExpression	0		868504	1					
ANR	868666	Condition	i < * labels_n	599:13:13244:13254	868504	1	True				
ANR	868667	RelationalExpression	i < * labels_n		868504	0		<			
ANR	868668	Identifier	i		868504	0					
ANR	868669	UnaryOperationExpression	* labels_n		868504	1					
ANR	868670	UnaryOperator	*		868504	0					
ANR	868671	Identifier	labels_n		868504	1					
ANR	868672	PostIncDecOperationExpression	i ++	599:25:13256:13258	868504	2	True				
ANR	868673	Identifier	i		868504	0					
ANR	868674	IncDec	++		868504	1					
ANR	868675	CompoundStatement		28:30:699:699	868504	3					
ANR	868676	IfStatement	"if ( ! strcmp ( label , labels [ i ] . name ) )"		868504	0					
ANR	868677	Condition	"! strcmp ( label , labels [ i ] . name )"	600:9:13272:13302	868504	0	True				
ANR	868678	UnaryOperationExpression	"! strcmp ( label , labels [ i ] . name )"		868504	0					
ANR	868679	UnaryOperator	!		868504	0					
ANR	868680	CallExpression	"strcmp ( label , labels [ i ] . name )"		868504	1					
ANR	868681	Callee	strcmp		868504	0					
ANR	868682	Identifier	strcmp		868504	0					
ANR	868683	ArgumentList	label		868504	1					
ANR	868684	Argument	label		868504	0					
ANR	868685	Identifier	label		868504	0					
ANR	868686	Argument	labels [ i ] . name		868504	1					
ANR	868687	MemberAccess	labels [ i ] . name		868504	0					
ANR	868688	ArrayIndexing	labels [ i ]		868504	0					
ANR	868689	Identifier	labels		868504	0					
ANR	868690	Identifier	i		868504	1					
ANR	868691	Identifier	name		868504	1					
ANR	868692	CompoundStatement		29:42:743:743	868504	1					
ANR	868693	ReturnStatement	return labels [ i ] . ptr ;	601:6:13313:13333	868504	0	True				
ANR	868694	MemberAccess	labels [ i ] . ptr		868504	0					
ANR	868695	ArrayIndexing	labels [ i ]		868504	0					
ANR	868696	Identifier	labels		868504	0					
ANR	868697	Identifier	i		868504	1					
ANR	868698	Identifier	ptr		868504	1					
ANR	868699	ReturnStatement	return NULL ;	604:4:13352:13363	868504	3	True				
ANR	868700	Identifier	NULL		868504	0					
ANR	868701	ElseStatement	else		868504	0					
ANR	868702	IfStatement	if ( ptr [ 0 ] == '?' && ptr [ 1 ] == '?' && ptr [ 2 ] != '?' )		868504	0					
ANR	868703	Condition	ptr [ 0 ] == '?' && ptr [ 1 ] == '?' && ptr [ 2 ] != '?'	608:6:13410:13452	868504	0	True				
ANR	868704	AndExpression	ptr [ 0 ] == '?' && ptr [ 1 ] == '?' && ptr [ 2 ] != '?'		868504	0		&&			
ANR	868705	EqualityExpression	ptr [ 0 ] == '?'		868504	0		==			
ANR	868706	ArrayIndexing	ptr [ 0 ]		868504	0					
ANR	868707	Identifier	ptr		868504	0					
ANR	868708	PrimaryExpression	0		868504	1					
ANR	868709	PrimaryExpression	'?'		868504	1					
ANR	868710	AndExpression	ptr [ 1 ] == '?' && ptr [ 2 ] != '?'		868504	1		&&			
ANR	868711	EqualityExpression	ptr [ 1 ] == '?'		868504	0		==			
ANR	868712	ArrayIndexing	ptr [ 1 ]		868504	0					
ANR	868713	Identifier	ptr		868504	0					
ANR	868714	PrimaryExpression	1		868504	1					
ANR	868715	PrimaryExpression	'?'		868504	1					
ANR	868716	EqualityExpression	ptr [ 2 ] != '?'		868504	1		!=			
ANR	868717	ArrayIndexing	ptr [ 2 ]		868504	0					
ANR	868718	Identifier	ptr		868504	0					
ANR	868719	PrimaryExpression	2		868504	1					
ANR	868720	PrimaryExpression	'?'		868504	1					
ANR	868721	CompoundStatement		37:51:893:893	868504	1					
ANR	868722	IfStatement	if ( mac -> num -> value == 0 )		868504	0					
ANR	868723	Condition	mac -> num -> value == 0	609:7:13464:13483	868504	0	True				
ANR	868724	EqualityExpression	mac -> num -> value == 0		868504	0		==			
ANR	868725	PtrMemberAccess	mac -> num -> value		868504	0					
ANR	868726	PtrMemberAccess	mac -> num		868504	0					
ANR	868727	Identifier	mac		868504	0					
ANR	868728	Identifier	num		868504	1					
ANR	868729	Identifier	value		868504	1					
ANR	868730	PrimaryExpression	0		868504	1					
ANR	868731	CompoundStatement		39:4:930:951	868504	1					
ANR	868732	IdentifierDeclStatement	char * label = ptr + 3 ;	610:4:13492:13513	868504	0	True				
ANR	868733	IdentifierDecl	* label = ptr + 3		868504	0					
ANR	868734	IdentifierDeclType	char *		868504	0					
ANR	868735	Identifier	label		868504	1					
ANR	868736	AssignmentExpression	* label = ptr + 3		868504	2		=			
ANR	868737	Identifier	label		868504	0					
ANR	868738	AdditiveExpression	ptr + 3		868504	1		+			
ANR	868739	Identifier	ptr		868504	0					
ANR	868740	PrimaryExpression	3		868504	1					
ANR	868741	ForStatement	for ( ; label [ 0 ] == ' ' || label [ 0 ] == '.' ; label ++ )		868504	1					
ANR	868742	Condition	label [ 0 ] == ' ' || label [ 0 ] == '.'	611:11:13526:13559	868504	0	True				
ANR	868743	OrExpression	label [ 0 ] == ' ' || label [ 0 ] == '.'		868504	0		||			
ANR	868744	EqualityExpression	label [ 0 ] == ' '		868504	0		==			
ANR	868745	ArrayIndexing	label [ 0 ]		868504	0					
ANR	868746	Identifier	label		868504	0					
ANR	868747	PrimaryExpression	0		868504	1					
ANR	868748	PrimaryExpression	' '		868504	1					
ANR	868749	EqualityExpression	label [ 0 ] == '.'		868504	1		==			
ANR	868750	ArrayIndexing	label [ 0 ]		868504	0					
ANR	868751	Identifier	label		868504	0					
ANR	868752	PrimaryExpression	0		868504	1					
ANR	868753	PrimaryExpression	'.'		868504	1					
ANR	868754	PostIncDecOperationExpression	label ++	611:47:13562:13568	868504	1	True				
ANR	868755	Identifier	label		868504	0					
ANR	868756	IncDec	++		868504	1					
ANR	868757	CompoundStatement		40:56:1009:1009	868504	2					
ANR	868758	ExpressionStatement		612:5:13578:13578	868504	0	True				
ANR	868759	ForStatement	for ( i = 0 ; i < * labels_n ; i ++ )		868504	2					
ANR	868760	ForInit	i = 0 ;	616:9:13664:13667	868504	0	True				
ANR	868761	AssignmentExpression	i = 0		868504	0		=			
ANR	868762	Identifier	i		868504	0					
ANR	868763	PrimaryExpression	0		868504	1					
ANR	868764	Condition	i < * labels_n	616:14:13669:13679	868504	1	True				
ANR	868765	RelationalExpression	i < * labels_n		868504	0		<			
ANR	868766	Identifier	i		868504	0					
ANR	868767	UnaryOperationExpression	* labels_n		868504	1					
ANR	868768	UnaryOperator	*		868504	0					
ANR	868769	Identifier	labels_n		868504	1					
ANR	868770	PostIncDecOperationExpression	i ++	616:27:13682:13684	868504	2	True				
ANR	868771	Identifier	i		868504	0					
ANR	868772	IncDec	++		868504	1					
ANR	868773	CompoundStatement		45:32:1125:1125	868504	3					
ANR	868774	IfStatement	"if ( ! strcmp ( label , labels [ i ] . name ) )"		868504	0					
ANR	868775	Condition	"! strcmp ( label , labels [ i ] . name )"	617:9:13698:13728	868504	0	True				
ANR	868776	UnaryOperationExpression	"! strcmp ( label , labels [ i ] . name )"		868504	0					
ANR	868777	UnaryOperator	!		868504	0					
ANR	868778	CallExpression	"strcmp ( label , labels [ i ] . name )"		868504	1					
ANR	868779	Callee	strcmp		868504	0					
ANR	868780	Identifier	strcmp		868504	0					
ANR	868781	ArgumentList	label		868504	1					
ANR	868782	Argument	label		868504	0					
ANR	868783	Identifier	label		868504	0					
ANR	868784	Argument	labels [ i ] . name		868504	1					
ANR	868785	MemberAccess	labels [ i ] . name		868504	0					
ANR	868786	ArrayIndexing	labels [ i ]		868504	0					
ANR	868787	Identifier	labels		868504	0					
ANR	868788	Identifier	i		868504	1					
ANR	868789	Identifier	name		868504	1					
ANR	868790	CompoundStatement		46:42:1169:1169	868504	1					
ANR	868791	ReturnStatement	return labels [ i ] . ptr ;	618:6:13739:13759	868504	0	True				
ANR	868792	MemberAccess	labels [ i ] . ptr		868504	0					
ANR	868793	ArrayIndexing	labels [ i ]		868504	0					
ANR	868794	Identifier	labels		868504	0					
ANR	868795	Identifier	i		868504	1					
ANR	868796	Identifier	ptr		868504	1					
ANR	868797	ReturnStatement	return NULL ;	621:4:13778:13789	868504	3	True				
ANR	868798	Identifier	NULL		868504	0					
ANR	868799	ElseStatement	else		868504	0					
ANR	868800	CompoundStatement		52:9:1243:1243	868504	0					
ANR	868801	ForStatement	for ( i = 0 ; i < * labels_n ; i ++ )		868504	0					
ANR	868802	ForInit	i = 0 ;	624:8:13815:13818	868504	0	True				
ANR	868803	AssignmentExpression	i = 0		868504	0		=			
ANR	868804	Identifier	i		868504	0					
ANR	868805	PrimaryExpression	0		868504	1					
ANR	868806	Condition	i < * labels_n	624:13:13820:13830	868504	1	True				
ANR	868807	RelationalExpression	i < * labels_n		868504	0		<			
ANR	868808	Identifier	i		868504	0					
ANR	868809	UnaryOperationExpression	* labels_n		868504	1					
ANR	868810	UnaryOperator	*		868504	0					
ANR	868811	Identifier	labels_n		868504	1					
ANR	868812	PostIncDecOperationExpression	i ++	624:26:13833:13835	868504	2	True				
ANR	868813	Identifier	i		868504	0					
ANR	868814	IncDec	++		868504	1					
ANR	868815	CompoundStatement		53:31:1276:1276	868504	3					
ANR	868816	IfStatement	"if ( ! strcmp ( ptr + 1 , labels [ i ] . name ) )"		868504	0					
ANR	868817	Condition	"! strcmp ( ptr + 1 , labels [ i ] . name )"	626:8:13897:13927	868504	0	True				
ANR	868818	UnaryOperationExpression	"! strcmp ( ptr + 1 , labels [ i ] . name )"		868504	0					
ANR	868819	UnaryOperator	!		868504	0					
ANR	868820	CallExpression	"strcmp ( ptr + 1 , labels [ i ] . name )"		868504	1					
ANR	868821	Callee	strcmp		868504	0					
ANR	868822	Identifier	strcmp		868504	0					
ANR	868823	ArgumentList	ptr + 1		868504	1					
ANR	868824	Argument	ptr + 1		868504	0					
ANR	868825	AdditiveExpression	ptr + 1		868504	0		+			
ANR	868826	Identifier	ptr		868504	0					
ANR	868827	PrimaryExpression	1		868504	1					
ANR	868828	Argument	labels [ i ] . name		868504	1					
ANR	868829	MemberAccess	labels [ i ] . name		868504	0					
ANR	868830	ArrayIndexing	labels [ i ]		868504	0					
ANR	868831	Identifier	labels		868504	0					
ANR	868832	Identifier	i		868504	1					
ANR	868833	Identifier	name		868504	1					
ANR	868834	CompoundStatement		55:41:1368:1368	868504	1					
ANR	868835	ExpressionStatement	i = 0	627:5:13937:13942	868504	0	True				
ANR	868836	AssignmentExpression	i = 0		868504	0		=			
ANR	868837	Identifier	i		868504	0					
ANR	868838	PrimaryExpression	0		868504	1					
ANR	868839	BreakStatement	break ;	628:5:13949:13954	868504	1	True				
ANR	868840	IfStatement	if ( i == 0 )		868504	1					
ANR	868841	Condition	i == 0	633:7:14036:14041	868504	0	True				
ANR	868842	EqualityExpression	i == 0		868504	0		==			
ANR	868843	Identifier	i		868504	0					
ANR	868844	PrimaryExpression	0		868504	1					
ANR	868845	CompoundStatement		62:15:1482:1482	868504	1					
ANR	868846	ExpressionStatement	"strncpy ( labels [ * labels_n ] . name , ptr , 64 )"	634:4:14050:14091	868504	0	True				
ANR	868847	CallExpression	"strncpy ( labels [ * labels_n ] . name , ptr , 64 )"		868504	0					
ANR	868848	Callee	strncpy		868504	0					
ANR	868849	Identifier	strncpy		868504	0					
ANR	868850	ArgumentList	labels [ * labels_n ] . name		868504	1					
ANR	868851	Argument	labels [ * labels_n ] . name		868504	0					
ANR	868852	MemberAccess	labels [ * labels_n ] . name		868504	0					
ANR	868853	ArrayIndexing	labels [ * labels_n ]		868504	0					
ANR	868854	Identifier	labels		868504	0					
ANR	868855	UnaryOperationExpression	* labels_n		868504	1					
ANR	868856	UnaryOperator	*		868504	0					
ANR	868857	Identifier	labels_n		868504	1					
ANR	868858	Identifier	name		868504	1					
ANR	868859	Argument	ptr		868504	1					
ANR	868860	Identifier	ptr		868504	0					
ANR	868861	Argument	64		868504	2					
ANR	868862	PrimaryExpression	64		868504	0					
ANR	868863	ExpressionStatement	labels [ * labels_n ] . ptr = ptr + strlen ( ptr ) + 1	635:4:14097:14139	868504	1	True				
ANR	868864	AssignmentExpression	labels [ * labels_n ] . ptr = ptr + strlen ( ptr ) + 1		868504	0		=			
ANR	868865	MemberAccess	labels [ * labels_n ] . ptr		868504	0					
ANR	868866	ArrayIndexing	labels [ * labels_n ]		868504	0					
ANR	868867	Identifier	labels		868504	0					
ANR	868868	UnaryOperationExpression	* labels_n		868504	1					
ANR	868869	UnaryOperator	*		868504	0					
ANR	868870	Identifier	labels_n		868504	1					
ANR	868871	Identifier	ptr		868504	1					
ANR	868872	AdditiveExpression	ptr + strlen ( ptr ) + 1		868504	1		+			
ANR	868873	Identifier	ptr		868504	0					
ANR	868874	AdditiveExpression	strlen ( ptr ) + 1		868504	1		+			
ANR	868875	CallExpression	strlen ( ptr )		868504	0					
ANR	868876	Callee	strlen		868504	0					
ANR	868877	Identifier	strlen		868504	0					
ANR	868878	ArgumentList	ptr		868504	1					
ANR	868879	Argument	ptr		868504	0					
ANR	868880	Identifier	ptr		868504	0					
ANR	868881	PrimaryExpression	1		868504	1					
ANR	868882	ExpressionStatement	* labels_n = * labels_n + 1	636:4:14145:14170	868504	2	True				
ANR	868883	AssignmentExpression	* labels_n = * labels_n + 1		868504	0		=			
ANR	868884	UnaryOperationExpression	* labels_n		868504	0					
ANR	868885	UnaryOperator	*		868504	0					
ANR	868886	Identifier	labels_n		868504	1					
ANR	868887	AdditiveExpression	* labels_n + 1		868504	1		+			
ANR	868888	UnaryOperationExpression	* labels_n		868504	0					
ANR	868889	UnaryOperator	*		868504	0					
ANR	868890	Identifier	labels_n		868504	1					
ANR	868891	PrimaryExpression	1		868504	1					
ANR	868892	ReturnStatement	return ptr + strlen ( ptr ) + 1 ;	639:2:14183:14210	868504	1	True				
ANR	868893	AdditiveExpression	ptr + strlen ( ptr ) + 1		868504	0		+			
ANR	868894	Identifier	ptr		868504	0					
ANR	868895	AdditiveExpression	strlen ( ptr ) + 1		868504	1		+			
ANR	868896	CallExpression	strlen ( ptr )		868504	0					
ANR	868897	Callee	strlen		868504	0					
ANR	868898	Identifier	strlen		868504	0					
ANR	868899	ArgumentList	ptr		868504	1					
ANR	868900	Argument	ptr		868504	0					
ANR	868901	Identifier	ptr		868504	0					
ANR	868902	PrimaryExpression	1		868504	1					
ANR	868903	ReturnStatement	return ptr ;	641:1:14216:14226	868504	3	True				
ANR	868904	Identifier	ptr		868504	0					
ANR	868905	ReturnType	R_API char *		868504	1					
ANR	868906	Identifier	r_cmd_macro_label_process		868504	2					
ANR	868907	ParameterList	"RCmdMacro * mac , RCmdMacroLabel * labels , int * labels_n , char * ptr"		868504	3					
ANR	868908	Parameter	RCmdMacro * mac	572:38:12495:12508	868504	0	True				
ANR	868909	ParameterType	RCmdMacro *		868504	0					
ANR	868910	Identifier	mac		868504	1					
ANR	868911	Parameter	RCmdMacroLabel * labels	572:54:12511:12532	868504	1	True				
ANR	868912	ParameterType	RCmdMacroLabel *		868504	0					
ANR	868913	Identifier	labels		868504	1					
ANR	868914	Parameter	int * labels_n	572:78:12535:12547	868504	2	True				
ANR	868915	ParameterType	int *		868504	0					
ANR	868916	Identifier	labels_n		868504	1					
ANR	868917	Parameter	char * ptr	572:93:12550:12558	868504	3	True				
ANR	868918	ParameterType	char *		868504	0					
ANR	868919	Identifier	ptr		868504	1					
ANR	868920	CFGEntryNode	ENTRY		868504		True				
ANR	868921	CFGExitNode	EXIT		868504		True				
ANR	868922	Symbol	strchr		868504						
ANR	868923	Symbol	mac		868504						
ANR	868924	Symbol	strlen		868504						
ANR	868925	Symbol	* * labels_n		868504						
ANR	868926	Symbol	labels_n		868504						
ANR	868927	Symbol	* ptr		868504						
ANR	868928	Symbol	mac -> num		868504						
ANR	868929	Symbol	labels [ i ] . name		868504						
ANR	868930	Symbol	strcmp		868504						
ANR	868931	Symbol	NULL		868504						
ANR	868932	Symbol	* * mac		868504						
ANR	868933	Symbol	labels [ i ] . ptr		868504						
ANR	868934	Symbol	i		868504						
ANR	868935	Symbol	labels [ * labels_n ] . name		868504						
ANR	868936	Symbol	label		868504						
ANR	868937	Symbol	mac -> num -> value		868504						
ANR	868938	Symbol	labels		868504						
ANR	868939	Symbol	ptr		868504						
ANR	868940	Symbol	* mac -> num		868504						
ANR	868941	Symbol	* i		868504						
ANR	868942	Symbol	* strlen		868504						
ANR	868943	Symbol	* labels_n		868504						
ANR	868944	Symbol	labels [ * labels_n ] . ptr		868504						
ANR	868945	Symbol	* mac		868504						
ANR	868946	Symbol	* labels		868504						
ANR	868947	Symbol	* label		868504						
ANR	868948	Function	r_cmd_macro_call	645:0:14276:16781							
ANR	868949	FunctionDef	"r_cmd_macro_call (RCmdMacro * mac , const char * name)"		868948	0					
ANR	868950	CompoundStatement		645:61:14337:16781	868948	0					
ANR	868951	IdentifierDeclStatement	char * args ;	646:1:14340:14350	868948	0	True				
ANR	868952	IdentifierDecl	* args		868948	0					
ANR	868953	IdentifierDeclType	char *		868948	0					
ANR	868954	Identifier	args		868948	1					
ANR	868955	IdentifierDeclStatement	int nargs = 0 ;	647:1:14353:14366	868948	1	True				
ANR	868956	IdentifierDecl	nargs = 0		868948	0					
ANR	868957	IdentifierDeclType	int		868948	0					
ANR	868958	Identifier	nargs		868948	1					
ANR	868959	AssignmentExpression	nargs = 0		868948	2		=			
ANR	868960	Identifier	nargs		868948	0					
ANR	868961	PrimaryExpression	0		868948	1					
ANR	868962	IdentifierDeclStatement	"char * str , * ptr , * ptr2 ;"	648:1:14369:14391	868948	2	True				
ANR	868963	IdentifierDecl	* str		868948	0					
ANR	868964	IdentifierDeclType	char *		868948	0					
ANR	868965	Identifier	str		868948	1					
ANR	868966	IdentifierDecl	* ptr		868948	1					
ANR	868967	IdentifierDeclType	char *		868948	0					
ANR	868968	Identifier	ptr		868948	1					
ANR	868969	IdentifierDecl	* ptr2		868948	2					
ANR	868970	IdentifierDeclType	char *		868948	0					
ANR	868971	Identifier	ptr2		868948	1					
ANR	868972	IdentifierDeclStatement	RListIter * iter ;	649:1:14394:14409	868948	3	True				
ANR	868973	IdentifierDecl	* iter		868948	0					
ANR	868974	IdentifierDeclType	RListIter *		868948	0					
ANR	868975	Identifier	iter		868948	1					
ANR	868976	Statement	static	650:1:14412:14417	868948	4	True				
ANR	868977	IdentifierDeclStatement	int macro_level = 0 ;	650:8:14419:14438	868948	5	True				
ANR	868978	IdentifierDecl	macro_level = 0		868948	0					
ANR	868979	IdentifierDeclType	int		868948	0					
ANR	868980	Identifier	macro_level		868948	1					
ANR	868981	AssignmentExpression	macro_level = 0		868948	2		=			
ANR	868982	Identifier	macro_level		868948	0					
ANR	868983	PrimaryExpression	0		868948	1					
ANR	868984	IdentifierDeclStatement	RCmdMacroItem * m ;	651:1:14441:14457	868948	6	True				
ANR	868985	IdentifierDecl	* m		868948	0					
ANR	868986	IdentifierDeclType	RCmdMacroItem *		868948	0					
ANR	868987	Identifier	m		868948	1					
ANR	868988	IdentifierDeclStatement	int labels_n = 0 ;	653:1:14474:14490	868948	7	True				
ANR	868989	IdentifierDecl	labels_n = 0		868948	0					
ANR	868990	IdentifierDeclType	int		868948	0					
ANR	868991	Identifier	labels_n		868948	1					
ANR	868992	AssignmentExpression	labels_n = 0		868948	2		=			
ANR	868993	Identifier	labels_n		868948	0					
ANR	868994	PrimaryExpression	0		868948	1					
ANR	868995	IdentifierDeclStatement	struct r_cmd_macro_label_t labels [ MACRO_LABELS ] ;	654:1:14493:14540	868948	8	True				
ANR	868996	IdentifierDecl	labels [ MACRO_LABELS ]		868948	0					
ANR	868997	IdentifierDeclType	struct r_cmd_macro_label_t [ MACRO_LABELS ]		868948	0					
ANR	868998	Identifier	labels		868948	1					
ANR	868999	Identifier	MACRO_LABELS		868948	2					
ANR	869000	ExpressionStatement	str = strdup ( name )	656:1:14544:14563	868948	9	True				
ANR	869001	AssignmentExpression	str = strdup ( name )		868948	0		=			
ANR	869002	Identifier	str		868948	0					
ANR	869003	CallExpression	strdup ( name )		868948	1					
ANR	869004	Callee	strdup		868948	0					
ANR	869005	Identifier	strdup		868948	0					
ANR	869006	ArgumentList	name		868948	1					
ANR	869007	Argument	name		868948	0					
ANR	869008	Identifier	name		868948	0					
ANR	869009	IfStatement	if ( ! str )		868948	10					
ANR	869010	Condition	! str	657:5:14570:14573	868948	0	True				
ANR	869011	UnaryOperationExpression	! str		868948	0					
ANR	869012	UnaryOperator	!		868948	0					
ANR	869013	Identifier	str		868948	1					
ANR	869014	CompoundStatement		13:11:238:238	868948	1					
ANR	869015	ExpressionStatement	"perror ( ""strdup"" )"	658:2:14580:14597	868948	0	True				
ANR	869016	CallExpression	"perror ( ""strdup"" )"		868948	0					
ANR	869017	Callee	perror		868948	0					
ANR	869018	Identifier	perror		868948	0					
ANR	869019	ArgumentList	"""strdup"""		868948	1					
ANR	869020	Argument	"""strdup"""		868948	0					
ANR	869021	PrimaryExpression	"""strdup"""		868948	0					
ANR	869022	ReturnStatement	return false ;	659:2:14601:14613	868948	1	True				
ANR	869023	Identifier	false		868948	0					
ANR	869024	ExpressionStatement	"ptr = strchr ( str , ')' )"	661:1:14619:14642	868948	11	True				
ANR	869025	AssignmentExpression	"ptr = strchr ( str , ')' )"		868948	0		=			
ANR	869026	Identifier	ptr		868948	0					
ANR	869027	CallExpression	"strchr ( str , ')' )"		868948	1					
ANR	869028	Callee	strchr		868948	0					
ANR	869029	Identifier	strchr		868948	0					
ANR	869030	ArgumentList	str		868948	1					
ANR	869031	Argument	str		868948	0					
ANR	869032	Identifier	str		868948	0					
ANR	869033	Argument	')'		868948	1					
ANR	869034	PrimaryExpression	')'		868948	0					
ANR	869035	IfStatement	if ( ! ptr )		868948	12					
ANR	869036	Condition	! ptr	662:5:14649:14652	868948	0	True				
ANR	869037	UnaryOperationExpression	! ptr		868948	0					
ANR	869038	UnaryOperator	!		868948	0					
ANR	869039	Identifier	ptr		868948	1					
ANR	869040	CompoundStatement		18:11:317:317	868948	1					
ANR	869041	ExpressionStatement	"eprintf ( ""Missing end ')' parenthesis.\\n"" )"	663:2:14659:14701	868948	0	True				
ANR	869042	CallExpression	"eprintf ( ""Missing end ')' parenthesis.\\n"" )"		868948	0					
ANR	869043	Callee	eprintf		868948	0					
ANR	869044	Identifier	eprintf		868948	0					
ANR	869045	ArgumentList	"""Missing end ')' parenthesis.\\n"""		868948	1					
ANR	869046	Argument	"""Missing end ')' parenthesis.\\n"""		868948	0					
ANR	869047	PrimaryExpression	"""Missing end ')' parenthesis.\\n"""		868948	0					
ANR	869048	ExpressionStatement	free ( str )	664:2:14705:14715	868948	1	True				
ANR	869049	CallExpression	free ( str )		868948	0					
ANR	869050	Callee	free		868948	0					
ANR	869051	Identifier	free		868948	0					
ANR	869052	ArgumentList	str		868948	1					
ANR	869053	Argument	str		868948	0					
ANR	869054	Identifier	str		868948	0					
ANR	869055	ReturnStatement	return false ;	665:2:14719:14731	868948	2	True				
ANR	869056	Identifier	false		868948	0					
ANR	869057	ElseStatement	else		868948	0					
ANR	869058	CompoundStatement		22:8:403:403	868948	0					
ANR	869059	ExpressionStatement	* ptr = '\\0'	667:2:14745:14756	868948	0	True				
ANR	869060	AssignmentExpression	* ptr = '\\0'		868948	0		=			
ANR	869061	UnaryOperationExpression	* ptr		868948	0					
ANR	869062	UnaryOperator	*		868948	0					
ANR	869063	Identifier	ptr		868948	1					
ANR	869064	PrimaryExpression	'\\0'		868948	1					
ANR	869065	ExpressionStatement	"args = strchr ( str , ' ' )"	670:1:14763:14787	868948	13	True				
ANR	869066	AssignmentExpression	"args = strchr ( str , ' ' )"		868948	0		=			
ANR	869067	Identifier	args		868948	0					
ANR	869068	CallExpression	"strchr ( str , ' ' )"		868948	1					
ANR	869069	Callee	strchr		868948	0					
ANR	869070	Identifier	strchr		868948	0					
ANR	869071	ArgumentList	str		868948	1					
ANR	869072	Argument	str		868948	0					
ANR	869073	Identifier	str		868948	0					
ANR	869074	Argument	' '		868948	1					
ANR	869075	PrimaryExpression	' '		868948	0					
ANR	869076	IfStatement	if ( args )		868948	14					
ANR	869077	Condition	args	671:5:14794:14797	868948	0	True				
ANR	869078	Identifier	args		868948	0					
ANR	869079	CompoundStatement		27:11:462:462	868948	1					
ANR	869080	ExpressionStatement	* args = '\\0'	672:2:14804:14816	868948	0	True				
ANR	869081	AssignmentExpression	* args = '\\0'		868948	0		=			
ANR	869082	UnaryOperationExpression	* args		868948	0					
ANR	869083	UnaryOperator	*		868948	0					
ANR	869084	Identifier	args		868948	1					
ANR	869085	PrimaryExpression	'\\0'		868948	1					
ANR	869086	ExpressionStatement	args ++	673:2:14820:14826	868948	1	True				
ANR	869087	PostIncDecOperationExpression	args ++		868948	0					
ANR	869088	Identifier	args		868948	0					
ANR	869089	IncDec	++		868948	1					
ANR	869090	ExpressionStatement	nargs = r_str_word_set0 ( args )	674:2:14830:14860	868948	2	True				
ANR	869091	AssignmentExpression	nargs = r_str_word_set0 ( args )		868948	0		=			
ANR	869092	Identifier	nargs		868948	0					
ANR	869093	CallExpression	r_str_word_set0 ( args )		868948	1					
ANR	869094	Callee	r_str_word_set0		868948	0					
ANR	869095	Identifier	r_str_word_set0		868948	0					
ANR	869096	ArgumentList	args		868948	1					
ANR	869097	Argument	args		868948	0					
ANR	869098	Identifier	args		868948	0					
ANR	869099	ExpressionStatement	macro_level ++	677:1:14867:14880	868948	15	True				
ANR	869100	PostIncDecOperationExpression	macro_level ++		868948	0					
ANR	869101	Identifier	macro_level		868948	0					
ANR	869102	IncDec	++		868948	1					
ANR	869103	IfStatement	if ( macro_level > MACRO_LIMIT )		868948	16					
ANR	869104	Condition	macro_level > MACRO_LIMIT	678:5:14887:14911	868948	0	True				
ANR	869105	RelationalExpression	macro_level > MACRO_LIMIT		868948	0		>			
ANR	869106	Identifier	macro_level		868948	0					
ANR	869107	Identifier	MACRO_LIMIT		868948	1					
ANR	869108	CompoundStatement		34:32:576:576	868948	1					
ANR	869109	ExpressionStatement	"eprintf ( ""Maximum macro recursivity reached.\\n"" )"	679:2:14918:14966	868948	0	True				
ANR	869110	CallExpression	"eprintf ( ""Maximum macro recursivity reached.\\n"" )"		868948	0					
ANR	869111	Callee	eprintf		868948	0					
ANR	869112	Identifier	eprintf		868948	0					
ANR	869113	ArgumentList	"""Maximum macro recursivity reached.\\n"""		868948	1					
ANR	869114	Argument	"""Maximum macro recursivity reached.\\n"""		868948	0					
ANR	869115	PrimaryExpression	"""Maximum macro recursivity reached.\\n"""		868948	0					
ANR	869116	ExpressionStatement	macro_level --	680:2:14970:14983	868948	1	True				
ANR	869117	PostIncDecOperationExpression	macro_level --		868948	0					
ANR	869118	Identifier	macro_level		868948	0					
ANR	869119	IncDec	--		868948	1					
ANR	869120	ExpressionStatement	free ( str )	681:2:14987:14997	868948	2	True				
ANR	869121	CallExpression	free ( str )		868948	0					
ANR	869122	Callee	free		868948	0					
ANR	869123	Identifier	free		868948	0					
ANR	869124	ArgumentList	str		868948	1					
ANR	869125	Argument	str		868948	0					
ANR	869126	Identifier	str		868948	0					
ANR	869127	ReturnStatement	return 0 ;	682:2:15001:15009	868948	3	True				
ANR	869128	PrimaryExpression	0		868948	0					
ANR	869129	ExpressionStatement	"ptr = strchr ( str , ',' )"	684:1:15015:15038	868948	17	True				
ANR	869130	AssignmentExpression	"ptr = strchr ( str , ',' )"		868948	0		=			
ANR	869131	Identifier	ptr		868948	0					
ANR	869132	CallExpression	"strchr ( str , ',' )"		868948	1					
ANR	869133	Callee	strchr		868948	0					
ANR	869134	Identifier	strchr		868948	0					
ANR	869135	ArgumentList	str		868948	1					
ANR	869136	Argument	str		868948	0					
ANR	869137	Identifier	str		868948	0					
ANR	869138	Argument	"','"		868948	1					
ANR	869139	PrimaryExpression	"','"		868948	0					
ANR	869140	IfStatement	if ( ptr )		868948	18					
ANR	869141	Condition	ptr	685:5:15045:15047	868948	0	True				
ANR	869142	Identifier	ptr		868948	0					
ANR	869143	CompoundStatement		41:10:712:712	868948	1					
ANR	869144	ExpressionStatement	* ptr = 0	686:2:15054:15062	868948	0	True				
ANR	869145	AssignmentExpression	* ptr = 0		868948	0		=			
ANR	869146	UnaryOperationExpression	* ptr		868948	0					
ANR	869147	UnaryOperator	*		868948	0					
ANR	869148	Identifier	ptr		868948	1					
ANR	869149	PrimaryExpression	0		868948	1					
ANR	869150	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	689:1:15069:15099	868948	19	True				
ANR	869151	CallExpression	"r_cons_break_push ( NULL , NULL )"		868948	0					
ANR	869152	Callee	r_cons_break_push		868948	0					
ANR	869153	Identifier	r_cons_break_push		868948	0					
ANR	869154	ArgumentList	NULL		868948	1					
ANR	869155	Argument	NULL		868948	0					
ANR	869156	Identifier	NULL		868948	0					
ANR	869157	Argument	NULL		868948	1					
ANR	869158	Identifier	NULL		868948	0					
ANR	869159	Statement	r_list_foreach	690:1:15102:15115	868948	20	True				
ANR	869160	Statement	(	690:16:15117:15117	868948	21	True				
ANR	869161	Statement	mac	690:17:15118:15120	868948	22	True				
ANR	869162	Statement	->	690:20:15121:15122	868948	23	True				
ANR	869163	Statement	macros	690:22:15123:15128	868948	24	True				
ANR	869164	Statement	","	690:28:15129:15129	868948	25	True				
ANR	869165	Statement	iter	690:30:15131:15134	868948	26	True				
ANR	869166	Statement	","	690:34:15135:15135	868948	27	True				
ANR	869167	Statement	m	690:36:15137:15137	868948	28	True				
ANR	869168	Statement	)	690:37:15138:15138	868948	29	True				
ANR	869169	CompoundStatement		46:39:802:802	868948	30					
ANR	869170	IfStatement	"if ( ! strcmp ( str , m -> name ) )"		868948	0					
ANR	869171	Condition	"! strcmp ( str , m -> name )"	691:6:15148:15169	868948	0	True				
ANR	869172	UnaryOperationExpression	"! strcmp ( str , m -> name )"		868948	0					
ANR	869173	UnaryOperator	!		868948	0					
ANR	869174	CallExpression	"strcmp ( str , m -> name )"		868948	1					
ANR	869175	Callee	strcmp		868948	0					
ANR	869176	Identifier	strcmp		868948	0					
ANR	869177	ArgumentList	str		868948	1					
ANR	869178	Argument	str		868948	0					
ANR	869179	Identifier	str		868948	0					
ANR	869180	Argument	m -> name		868948	1					
ANR	869181	PtrMemberAccess	m -> name		868948	0					
ANR	869182	Identifier	m		868948	0					
ANR	869183	Identifier	name		868948	1					
ANR	869184	CompoundStatement		49:3:863:893	868948	1					
ANR	869185	IdentifierDeclStatement	char * ptr = m -> code ;	692:3:15177:15196	868948	0	True				
ANR	869186	IdentifierDecl	* ptr = m -> code		868948	0					
ANR	869187	IdentifierDeclType	char *		868948	0					
ANR	869188	Identifier	ptr		868948	1					
ANR	869189	AssignmentExpression	* ptr = m -> code		868948	2		=			
ANR	869190	Identifier	ptr		868948	0					
ANR	869191	PtrMemberAccess	m -> code		868948	1					
ANR	869192	Identifier	m		868948	0					
ANR	869193	Identifier	code		868948	1					
ANR	869194	IdentifierDeclStatement	"char * end = strchr ( ptr , '\\n' ) ;"	693:3:15201:15231	868948	1	True				
ANR	869195	IdentifierDecl	"* end = strchr ( ptr , '\\n' )"		868948	0					
ANR	869196	IdentifierDeclType	char *		868948	0					
ANR	869197	Identifier	end		868948	1					
ANR	869198	AssignmentExpression	"* end = strchr ( ptr , '\\n' )"		868948	2		=			
ANR	869199	Identifier	end		868948	0					
ANR	869200	CallExpression	"strchr ( ptr , '\\n' )"		868948	1					
ANR	869201	Callee	strchr		868948	0					
ANR	869202	Identifier	strchr		868948	0					
ANR	869203	ArgumentList	ptr		868948	1					
ANR	869204	Argument	ptr		868948	0					
ANR	869205	Identifier	ptr		868948	0					
ANR	869206	Argument	'\\n'		868948	1					
ANR	869207	PrimaryExpression	'\\n'		868948	0					
ANR	869208	IfStatement	if ( m -> nargs != 0 && nargs != m -> nargs )		868948	2					
ANR	869209	Condition	m -> nargs != 0 && nargs != m -> nargs	694:7:15240:15273	868948	0	True				
ANR	869210	AndExpression	m -> nargs != 0 && nargs != m -> nargs		868948	0		&&			
ANR	869211	EqualityExpression	m -> nargs != 0		868948	0		!=			
ANR	869212	PtrMemberAccess	m -> nargs		868948	0					
ANR	869213	Identifier	m		868948	0					
ANR	869214	Identifier	nargs		868948	1					
ANR	869215	PrimaryExpression	0		868948	1					
ANR	869216	EqualityExpression	nargs != m -> nargs		868948	1		!=			
ANR	869217	Identifier	nargs		868948	0					
ANR	869218	PtrMemberAccess	m -> nargs		868948	1					
ANR	869219	Identifier	m		868948	0					
ANR	869220	Identifier	nargs		868948	1					
ANR	869221	CompoundStatement		50:43:938:938	868948	1					
ANR	869222	ExpressionStatement	"eprintf ( ""Macro '%s' expects %d args, not %d\\n"" , m -> name , m -> nargs , nargs )"	695:4:15282:15356	868948	0	True				
ANR	869223	CallExpression	"eprintf ( ""Macro '%s' expects %d args, not %d\\n"" , m -> name , m -> nargs , nargs )"		868948	0					
ANR	869224	Callee	eprintf		868948	0					
ANR	869225	Identifier	eprintf		868948	0					
ANR	869226	ArgumentList	"""Macro '%s' expects %d args, not %d\\n"""		868948	1					
ANR	869227	Argument	"""Macro '%s' expects %d args, not %d\\n"""		868948	0					
ANR	869228	PrimaryExpression	"""Macro '%s' expects %d args, not %d\\n"""		868948	0					
ANR	869229	Argument	m -> name		868948	1					
ANR	869230	PtrMemberAccess	m -> name		868948	0					
ANR	869231	Identifier	m		868948	0					
ANR	869232	Identifier	name		868948	1					
ANR	869233	Argument	m -> nargs		868948	2					
ANR	869234	PtrMemberAccess	m -> nargs		868948	0					
ANR	869235	Identifier	m		868948	0					
ANR	869236	Identifier	nargs		868948	1					
ANR	869237	Argument	nargs		868948	3					
ANR	869238	Identifier	nargs		868948	0					
ANR	869239	ExpressionStatement	macro_level --	696:4:15362:15376	868948	1	True				
ANR	869240	PostIncDecOperationExpression	macro_level --		868948	0					
ANR	869241	Identifier	macro_level		868948	0					
ANR	869242	IncDec	--		868948	1					
ANR	869243	ExpressionStatement	free ( str )	697:4:15382:15392	868948	2	True				
ANR	869244	CallExpression	free ( str )		868948	0					
ANR	869245	Callee	free		868948	0					
ANR	869246	Identifier	free		868948	0					
ANR	869247	ArgumentList	str		868948	1					
ANR	869248	Argument	str		868948	0					
ANR	869249	Identifier	str		868948	0					
ANR	869250	ExpressionStatement	r_cons_break_pop ( )	698:4:15398:15417	868948	3	True				
ANR	869251	CallExpression	r_cons_break_pop ( )		868948	0					
ANR	869252	Callee	r_cons_break_pop		868948	0					
ANR	869253	Identifier	r_cons_break_pop		868948	0					
ANR	869254	ArgumentList			868948	1					
ANR	869255	ReturnStatement	return false ;	699:4:15423:15435	868948	4	True				
ANR	869256	Identifier	false		868948	0					
ANR	869257	ExpressionStatement	mac -> brk = 0	701:3:15445:15457	868948	3	True				
ANR	869258	AssignmentExpression	mac -> brk = 0		868948	0		=			
ANR	869259	PtrMemberAccess	mac -> brk		868948	0					
ANR	869260	Identifier	mac		868948	0					
ANR	869261	Identifier	brk		868948	1					
ANR	869262	PrimaryExpression	0		868948	1					
ANR	869263	DoStatement	do		868948	4					
ANR	869264	CompoundStatement		58:6:1127:1127	868948	0					
ANR	869265	IfStatement	if ( end )		868948	0					
ANR	869266	Condition	end	703:8:15475:15477	868948	0	True				
ANR	869267	Identifier	end		868948	0					
ANR	869268	CompoundStatement		59:13:1142:1142	868948	1					
ANR	869269	ExpressionStatement	* end = '\\0'	704:5:15487:15498	868948	0	True				
ANR	869270	AssignmentExpression	* end = '\\0'		868948	0		=			
ANR	869271	UnaryOperationExpression	* end		868948	0					
ANR	869272	UnaryOperator	*		868948	0					
ANR	869273	Identifier	end		868948	1					
ANR	869274	PrimaryExpression	'\\0'		868948	1					
ANR	869275	IfStatement	if ( r_cons_is_breaked ( ) )		868948	1					
ANR	869276	Condition	r_cons_is_breaked ( )	706:8:15514:15533	868948	0	True				
ANR	869277	CallExpression	r_cons_is_breaked ( )		868948	0					
ANR	869278	Callee	r_cons_is_breaked		868948	0					
ANR	869279	Identifier	r_cons_is_breaked		868948	0					
ANR	869280	ArgumentList			868948	1					
ANR	869281	CompoundStatement		62:30:1198:1198	868948	1					
ANR	869282	ExpressionStatement	"eprintf ( ""Interrupted at (%s)\\n"" , ptr )"	707:5:15543:15581	868948	0	True				
ANR	869283	CallExpression	"eprintf ( ""Interrupted at (%s)\\n"" , ptr )"		868948	0					
ANR	869284	Callee	eprintf		868948	0					
ANR	869285	Identifier	eprintf		868948	0					
ANR	869286	ArgumentList	"""Interrupted at (%s)\\n"""		868948	1					
ANR	869287	Argument	"""Interrupted at (%s)\\n"""		868948	0					
ANR	869288	PrimaryExpression	"""Interrupted at (%s)\\n"""		868948	0					
ANR	869289	Argument	ptr		868948	1					
ANR	869290	Identifier	ptr		868948	0					
ANR	869291	IfStatement	if ( end )		868948	1					
ANR	869292	Condition	end	708:9:15592:15594	868948	0	True				
ANR	869293	Identifier	end		868948	0					
ANR	869294	CompoundStatement		64:14:1259:1259	868948	1					
ANR	869295	ExpressionStatement	* end = '\\n'	709:6:15605:15616	868948	0	True				
ANR	869296	AssignmentExpression	* end = '\\n'		868948	0		=			
ANR	869297	UnaryOperationExpression	* end		868948	0					
ANR	869298	UnaryOperator	*		868948	0					
ANR	869299	Identifier	end		868948	1					
ANR	869300	PrimaryExpression	'\\n'		868948	1					
ANR	869301	ExpressionStatement	free ( str )	711:5:15630:15640	868948	2	True				
ANR	869302	CallExpression	free ( str )		868948	0					
ANR	869303	Callee	free		868948	0					
ANR	869304	Identifier	free		868948	0					
ANR	869305	ArgumentList	str		868948	1					
ANR	869306	Argument	str		868948	0					
ANR	869307	Identifier	str		868948	0					
ANR	869308	ExpressionStatement	r_cons_break_pop ( )	712:5:15647:15666	868948	3	True				
ANR	869309	CallExpression	r_cons_break_pop ( )		868948	0					
ANR	869310	Callee	r_cons_break_pop		868948	0					
ANR	869311	Identifier	r_cons_break_pop		868948	0					
ANR	869312	ArgumentList			868948	1					
ANR	869313	ReturnStatement	return false ;	713:5:15673:15685	868948	4	True				
ANR	869314	Identifier	false		868948	0					
ANR	869315	ExpressionStatement	r_cons_flush ( )	715:4:15697:15712	868948	2	True				
ANR	869316	CallExpression	r_cons_flush ( )		868948	0					
ANR	869317	Callee	r_cons_flush		868948	0					
ANR	869318	Identifier	r_cons_flush		868948	0					
ANR	869319	ArgumentList			868948	1					
ANR	869320	ExpressionStatement	"ptr2 = r_cmd_macro_label_process ( mac , & ( labels [ 0 ] ) , & labels_n , ptr )"	717:4:15743:15811	868948	3	True				
ANR	869321	AssignmentExpression	"ptr2 = r_cmd_macro_label_process ( mac , & ( labels [ 0 ] ) , & labels_n , ptr )"		868948	0		=			
ANR	869322	Identifier	ptr2		868948	0					
ANR	869323	CallExpression	"r_cmd_macro_label_process ( mac , & ( labels [ 0 ] ) , & labels_n , ptr )"		868948	1					
ANR	869324	Callee	r_cmd_macro_label_process		868948	0					
ANR	869325	Identifier	r_cmd_macro_label_process		868948	0					
ANR	869326	ArgumentList	mac		868948	1					
ANR	869327	Argument	mac		868948	0					
ANR	869328	Identifier	mac		868948	0					
ANR	869329	Argument	& ( labels [ 0 ] )		868948	1					
ANR	869330	UnaryOperationExpression	& ( labels [ 0 ] )		868948	0					
ANR	869331	UnaryOperator	&		868948	0					
ANR	869332	ArrayIndexing	labels [ 0 ]		868948	1					
ANR	869333	Identifier	labels		868948	0					
ANR	869334	PrimaryExpression	0		868948	1					
ANR	869335	Argument	& labels_n		868948	2					
ANR	869336	UnaryOperationExpression	& labels_n		868948	0					
ANR	869337	UnaryOperator	&		868948	0					
ANR	869338	Identifier	labels_n		868948	1					
ANR	869339	Argument	ptr		868948	3					
ANR	869340	Identifier	ptr		868948	0					
ANR	869341	IfStatement	if ( ! ptr2 )		868948	4					
ANR	869342	Condition	! ptr2	718:8:15821:15825	868948	0	True				
ANR	869343	UnaryOperationExpression	! ptr2		868948	0					
ANR	869344	UnaryOperator	!		868948	0					
ANR	869345	Identifier	ptr2		868948	1					
ANR	869346	CompoundStatement		74:15:1490:1490	868948	1					
ANR	869347	ExpressionStatement	"eprintf ( ""Oops. invalid label name\\n"" )"	719:5:15835:15873	868948	0	True				
ANR	869348	CallExpression	"eprintf ( ""Oops. invalid label name\\n"" )"		868948	0					
ANR	869349	Callee	eprintf		868948	0					
ANR	869350	Identifier	eprintf		868948	0					
ANR	869351	ArgumentList	"""Oops. invalid label name\\n"""		868948	1					
ANR	869352	Argument	"""Oops. invalid label name\\n"""		868948	0					
ANR	869353	PrimaryExpression	"""Oops. invalid label name\\n"""		868948	0					
ANR	869354	BreakStatement	break ;	720:5:15880:15885	868948	1	True				
ANR	869355	ElseStatement	else		868948	0					
ANR	869356	IfStatement	if ( ptr != ptr2 )		868948	0					
ANR	869357	Condition	ptr != ptr2	721:15:15902:15912	868948	0	True				
ANR	869358	EqualityExpression	ptr != ptr2		868948	0		!=			
ANR	869359	Identifier	ptr		868948	0					
ANR	869360	Identifier	ptr2		868948	1					
ANR	869361	CompoundStatement		77:28:1577:1577	868948	1					
ANR	869362	ExpressionStatement	ptr = ptr2	722:5:15922:15932	868948	0	True				
ANR	869363	AssignmentExpression	ptr = ptr2		868948	0		=			
ANR	869364	Identifier	ptr		868948	0					
ANR	869365	Identifier	ptr2		868948	1					
ANR	869366	IfStatement	if ( end )		868948	1					
ANR	869367	Condition	end	723:9:15943:15945	868948	0	True				
ANR	869368	Identifier	end		868948	0					
ANR	869369	CompoundStatement		79:14:1610:1610	868948	1					
ANR	869370	ExpressionStatement	* end = '\\n'	724:6:15956:15967	868948	0	True				
ANR	869371	AssignmentExpression	* end = '\\n'		868948	0		=			
ANR	869372	UnaryOperationExpression	* end		868948	0					
ANR	869373	UnaryOperator	*		868948	0					
ANR	869374	Identifier	end		868948	1					
ANR	869375	PrimaryExpression	'\\n'		868948	1					
ANR	869376	ExpressionStatement	"end = strchr ( ptr , '\\n' )"	726:5:15981:16005	868948	2	True				
ANR	869377	AssignmentExpression	"end = strchr ( ptr , '\\n' )"		868948	0		=			
ANR	869378	Identifier	end		868948	0					
ANR	869379	CallExpression	"strchr ( ptr , '\\n' )"		868948	1					
ANR	869380	Callee	strchr		868948	0					
ANR	869381	Identifier	strchr		868948	0					
ANR	869382	ArgumentList	ptr		868948	1					
ANR	869383	Argument	ptr		868948	0					
ANR	869384	Identifier	ptr		868948	0					
ANR	869385	Argument	'\\n'		868948	1					
ANR	869386	PrimaryExpression	'\\n'		868948	0					
ANR	869387	ContinueStatement	continue ;	727:5:16012:16020	868948	3	True				
ANR	869388	IfStatement	if ( * ptr )		868948	5					
ANR	869389	Condition	* ptr	730:8:16064:16067	868948	0	True				
ANR	869390	UnaryOperationExpression	* ptr		868948	0					
ANR	869391	UnaryOperator	*		868948	0					
ANR	869392	Identifier	ptr		868948	1					
ANR	869393	CompoundStatement		88:5:1769:1821	868948	1					
ANR	869394	ExpressionStatement	mac -> num -> value = value	731:5:16077:16100	868948	0	True				
ANR	869395	AssignmentExpression	mac -> num -> value = value		868948	0		=			
ANR	869396	PtrMemberAccess	mac -> num -> value		868948	0					
ANR	869397	PtrMemberAccess	mac -> num		868948	0					
ANR	869398	Identifier	mac		868948	0					
ANR	869399	Identifier	num		868948	1					
ANR	869400	Identifier	value		868948	1					
ANR	869401	Identifier	value		868948	1					
ANR	869402	IdentifierDeclStatement	"int r = r_cmd_macro_cmd_args ( mac , ptr , args , nargs ) ;"	732:5:16107:16159	868948	1	True				
ANR	869403	IdentifierDecl	"r = r_cmd_macro_cmd_args ( mac , ptr , args , nargs )"		868948	0					
ANR	869404	IdentifierDeclType	int		868948	0					
ANR	869405	Identifier	r		868948	1					
ANR	869406	AssignmentExpression	"r = r_cmd_macro_cmd_args ( mac , ptr , args , nargs )"		868948	2		=			
ANR	869407	Identifier	r		868948	0					
ANR	869408	CallExpression	"r_cmd_macro_cmd_args ( mac , ptr , args , nargs )"		868948	1					
ANR	869409	Callee	r_cmd_macro_cmd_args		868948	0					
ANR	869410	Identifier	r_cmd_macro_cmd_args		868948	0					
ANR	869411	ArgumentList	mac		868948	1					
ANR	869412	Argument	mac		868948	0					
ANR	869413	Identifier	mac		868948	0					
ANR	869414	Argument	ptr		868948	1					
ANR	869415	Identifier	ptr		868948	0					
ANR	869416	Argument	args		868948	2					
ANR	869417	Identifier	args		868948	0					
ANR	869418	Argument	nargs		868948	3					
ANR	869419	Identifier	nargs		868948	0					
ANR	869420	ExpressionStatement	value = mac -> num -> value	735:5:16246:16269	868948	2	True				
ANR	869421	AssignmentExpression	value = mac -> num -> value		868948	0		=			
ANR	869422	Identifier	value		868948	0					
ANR	869423	PtrMemberAccess	mac -> num -> value		868948	1					
ANR	869424	PtrMemberAccess	mac -> num		868948	0					
ANR	869425	Identifier	mac		868948	0					
ANR	869426	Identifier	num		868948	1					
ANR	869427	Identifier	value		868948	1					
ANR	869428	IfStatement	if ( r < 0 )		868948	3					
ANR	869429	Condition	r < 0	736:9:16280:16284	868948	0	True				
ANR	869430	RelationalExpression	r < 0		868948	0		<			
ANR	869431	Identifier	r		868948	0					
ANR	869432	PrimaryExpression	0		868948	1					
ANR	869433	CompoundStatement		92:16:1949:1949	868948	1					
ANR	869434	ExpressionStatement	free ( str )	737:6:16295:16305	868948	0	True				
ANR	869435	CallExpression	free ( str )		868948	0					
ANR	869436	Callee	free		868948	0					
ANR	869437	Identifier	free		868948	0					
ANR	869438	ArgumentList	str		868948	1					
ANR	869439	Argument	str		868948	0					
ANR	869440	Identifier	str		868948	0					
ANR	869441	ExpressionStatement	r_cons_break_pop ( )	738:6:16313:16332	868948	1	True				
ANR	869442	CallExpression	r_cons_break_pop ( )		868948	0					
ANR	869443	Callee	r_cons_break_pop		868948	0					
ANR	869444	Identifier	r_cons_break_pop		868948	0					
ANR	869445	ArgumentList			868948	1					
ANR	869446	ReturnStatement	return r ;	739:6:16340:16348	868948	2	True				
ANR	869447	Identifier	r		868948	0					
ANR	869448	IfStatement	if ( end )		868948	6					
ANR	869449	Condition	end	742:8:16371:16373	868948	0	True				
ANR	869450	Identifier	end		868948	0					
ANR	869451	CompoundStatement		98:13:2038:2038	868948	1					
ANR	869452	ExpressionStatement	* end = '\\n'	743:5:16383:16394	868948	0	True				
ANR	869453	AssignmentExpression	* end = '\\n'		868948	0		=			
ANR	869454	UnaryOperationExpression	* end		868948	0					
ANR	869455	UnaryOperator	*		868948	0					
ANR	869456	Identifier	end		868948	1					
ANR	869457	PrimaryExpression	'\\n'		868948	1					
ANR	869458	ExpressionStatement	ptr = end + 1	744:5:16401:16414	868948	1	True				
ANR	869459	AssignmentExpression	ptr = end + 1		868948	0		=			
ANR	869460	Identifier	ptr		868948	0					
ANR	869461	AdditiveExpression	end + 1		868948	1		+			
ANR	869462	Identifier	end		868948	0					
ANR	869463	PrimaryExpression	1		868948	1					
ANR	869464	ElseStatement	else		868948	0					
ANR	869465	CompoundStatement		101:11:2089:2089	868948	0					
ANR	869466	ExpressionStatement	macro_level --	746:5:16434:16448	868948	0	True				
ANR	869467	PostIncDecOperationExpression	macro_level --		868948	0					
ANR	869468	Identifier	macro_level		868948	0					
ANR	869469	IncDec	--		868948	1					
ANR	869470	ExpressionStatement	free ( str )	747:5:16455:16465	868948	1	True				
ANR	869471	CallExpression	free ( str )		868948	0					
ANR	869472	Callee	free		868948	0					
ANR	869473	Identifier	free		868948	0					
ANR	869474	ArgumentList	str		868948	1					
ANR	869475	Argument	str		868948	0					
ANR	869476	Identifier	str		868948	0					
ANR	869477	GotoStatement	goto out_clean ;	748:5:16472:16486	868948	2	True				
ANR	869478	Identifier	out_clean		868948	0					
ANR	869479	ExpressionStatement	"end = strchr ( ptr , '\\n' )"	752:4:16528:16552	868948	7	True				
ANR	869480	AssignmentExpression	"end = strchr ( ptr , '\\n' )"		868948	0		=			
ANR	869481	Identifier	end		868948	0					
ANR	869482	CallExpression	"strchr ( ptr , '\\n' )"		868948	1					
ANR	869483	Callee	strchr		868948	0					
ANR	869484	Identifier	strchr		868948	0					
ANR	869485	ArgumentList	ptr		868948	1					
ANR	869486	Argument	ptr		868948	0					
ANR	869487	Identifier	ptr		868948	0					
ANR	869488	Argument	'\\n'		868948	1					
ANR	869489	PrimaryExpression	'\\n'		868948	0					
ANR	869490	Condition	! mac -> brk	753:12:16566:16574	868948	1	True				
ANR	869491	UnaryOperationExpression	! mac -> brk		868948	0					
ANR	869492	UnaryOperator	!		868948	0					
ANR	869493	PtrMemberAccess	mac -> brk		868948	1					
ANR	869494	Identifier	mac		868948	0					
ANR	869495	Identifier	brk		868948	1					
ANR	869496	IfStatement	if ( mac -> brk )		868948	5					
ANR	869497	Condition	mac -> brk	754:7:16585:16592	868948	0	True				
ANR	869498	PtrMemberAccess	mac -> brk		868948	0					
ANR	869499	Identifier	mac		868948	0					
ANR	869500	Identifier	brk		868948	1					
ANR	869501	CompoundStatement		110:17:2257:2257	868948	1					
ANR	869502	ExpressionStatement	macro_level --	755:4:16601:16614	868948	0	True				
ANR	869503	PostIncDecOperationExpression	macro_level --		868948	0					
ANR	869504	Identifier	macro_level		868948	0					
ANR	869505	IncDec	--		868948	1					
ANR	869506	ExpressionStatement	free ( str )	756:4:16620:16630	868948	1	True				
ANR	869507	CallExpression	free ( str )		868948	0					
ANR	869508	Callee	free		868948	0					
ANR	869509	Identifier	free		868948	0					
ANR	869510	ArgumentList	str		868948	1					
ANR	869511	Argument	str		868948	0					
ANR	869512	Identifier	str		868948	0					
ANR	869513	GotoStatement	goto out_clean ;	757:4:16636:16650	868948	2	True				
ANR	869514	Identifier	out_clean		868948	0					
ANR	869515	ExpressionStatement	"eprintf ( ""No macro named '%s'\\n"" , str )"	761:1:16665:16703	868948	31	True				
ANR	869516	CallExpression	"eprintf ( ""No macro named '%s'\\n"" , str )"		868948	0					
ANR	869517	Callee	eprintf		868948	0					
ANR	869518	Identifier	eprintf		868948	0					
ANR	869519	ArgumentList	"""No macro named '%s'\\n"""		868948	1					
ANR	869520	Argument	"""No macro named '%s'\\n"""		868948	0					
ANR	869521	PrimaryExpression	"""No macro named '%s'\\n"""		868948	0					
ANR	869522	Argument	str		868948	1					
ANR	869523	Identifier	str		868948	0					
ANR	869524	ExpressionStatement	macro_level --	762:1:16706:16719	868948	32	True				
ANR	869525	PostIncDecOperationExpression	macro_level --		868948	0					
ANR	869526	Identifier	macro_level		868948	0					
ANR	869527	IncDec	--		868948	1					
ANR	869528	ExpressionStatement	free ( str )	763:1:16722:16732	868948	33	True				
ANR	869529	CallExpression	free ( str )		868948	0					
ANR	869530	Callee	free		868948	0					
ANR	869531	Identifier	free		868948	0					
ANR	869532	ArgumentList	str		868948	1					
ANR	869533	Argument	str		868948	0					
ANR	869534	Identifier	str		868948	0					
ANR	869535	Label	out_clean :	764:0:16734:16743	868948	34	True				
ANR	869536	Identifier	out_clean		868948	0					
ANR	869537	ExpressionStatement	r_cons_break_pop ( )	765:1:16746:16765	868948	35	True				
ANR	869538	CallExpression	r_cons_break_pop ( )		868948	0					
ANR	869539	Callee	r_cons_break_pop		868948	0					
ANR	869540	Identifier	r_cons_break_pop		868948	0					
ANR	869541	ArgumentList			868948	1					
ANR	869542	ReturnStatement	return true ;	766:1:16768:16779	868948	36	True				
ANR	869543	Identifier	true		868948	0					
ANR	869544	ReturnType	R_API int		868948	1					
ANR	869545	Identifier	r_cmd_macro_call		868948	2					
ANR	869546	ParameterList	"RCmdMacro * mac , const char * name"		868948	3					
ANR	869547	Parameter	RCmdMacro * mac	645:27:14303:14316	868948	0	True				
ANR	869548	ParameterType	RCmdMacro *		868948	0					
ANR	869549	Identifier	mac		868948	1					
ANR	869550	Parameter	const char * name	645:43:14319:14334	868948	1	True				
ANR	869551	ParameterType	const char *		868948	0					
ANR	869552	Identifier	name		868948	1					
ANR	869553	CFGEntryNode	ENTRY		868948		True				
ANR	869554	CFGExitNode	EXIT		868948		True				
ANR	869555	Symbol	& labels_n		868948						
ANR	869556	Symbol	strchr		868948						
ANR	869557	Symbol	r_str_word_set0		868948						
ANR	869558	Symbol	mac		868948						
ANR	869559	Symbol	* args		868948						
ANR	869560	Symbol	mac -> brk		868948						
ANR	869561	Symbol	r_cons_is_breaked		868948						
ANR	869562	Symbol	r_cmd_macro_cmd_args		868948						
ANR	869563	Symbol	macro_level		868948						
ANR	869564	Symbol	labels_n		868948						
ANR	869565	Symbol	* ptr		868948						
ANR	869566	Symbol	end		868948						
ANR	869567	Symbol	mac -> num		868948						
ANR	869568	Symbol	r_cmd_macro_label_process		868948						
ANR	869569	Symbol	value		868948						
ANR	869570	Symbol	strcmp		868948						
ANR	869571	Symbol	NULL		868948						
ANR	869572	Symbol	m -> name		868948						
ANR	869573	Symbol	* * mac		868948						
ANR	869574	Symbol	false		868948						
ANR	869575	Symbol	iter		868948						
ANR	869576	Symbol	m		868948						
ANR	869577	Symbol	m -> nargs		868948						
ANR	869578	Symbol	mac -> num -> value		868948						
ANR	869579	Symbol	ptr		868948						
ANR	869580	Symbol	labels		868948						
ANR	869581	Symbol	args		868948						
ANR	869582	Symbol	nargs		868948						
ANR	869583	Symbol	str		868948						
ANR	869584	Symbol	ptr2		868948						
ANR	869585	Symbol	* mac -> num		868948						
ANR	869586	Symbol	r		868948						
ANR	869587	Symbol	m -> code		868948						
ANR	869588	Symbol	* m		868948						
ANR	869589	Symbol	name		868948						
ANR	869590	Symbol	true		868948						
ANR	869591	Symbol	* mac		868948						
ANR	869592	Symbol	MACRO_LIMIT		868948						
ANR	869593	Symbol	* end		868948						
ANR	869594	Symbol	strdup		868948						
ANR	869595	Function	r_cmd_macro_break	769:0:16784:17018							
ANR	869596	FunctionDef	"r_cmd_macro_break (RCmdMacro * mac , const char * value)"		869595	0					
ANR	869597	CompoundStatement		769:63:16847:17018	869595	0					
ANR	869598	ExpressionStatement	mac -> brk = 1	770:1:16850:16862	869595	0	True				
ANR	869599	AssignmentExpression	mac -> brk = 1		869595	0		=			
ANR	869600	PtrMemberAccess	mac -> brk		869595	0					
ANR	869601	Identifier	mac		869595	0					
ANR	869602	Identifier	brk		869595	1					
ANR	869603	PrimaryExpression	1		869595	1					
ANR	869604	ExpressionStatement	mac -> brk_value = NULL	771:1:16865:16886	869595	1	True				
ANR	869605	AssignmentExpression	mac -> brk_value = NULL		869595	0		=			
ANR	869606	PtrMemberAccess	mac -> brk_value		869595	0					
ANR	869607	Identifier	mac		869595	0					
ANR	869608	Identifier	brk_value		869595	1					
ANR	869609	Identifier	NULL		869595	1					
ANR	869610	ExpressionStatement	"mac -> _brk_value = ( ut64 ) r_num_math ( mac -> num , value )"	772:1:16889:16941	869595	2	True				
ANR	869611	AssignmentExpression	"mac -> _brk_value = ( ut64 ) r_num_math ( mac -> num , value )"		869595	0		=			
ANR	869612	PtrMemberAccess	mac -> _brk_value		869595	0					
ANR	869613	Identifier	mac		869595	0					
ANR	869614	Identifier	_brk_value		869595	1					
ANR	869615	CastExpression	"( ut64 ) r_num_math ( mac -> num , value )"		869595	1					
ANR	869616	CastTarget	ut64		869595	0					
ANR	869617	CallExpression	"r_num_math ( mac -> num , value )"		869595	1					
ANR	869618	Callee	r_num_math		869595	0					
ANR	869619	Identifier	r_num_math		869595	0					
ANR	869620	ArgumentList	mac -> num		869595	1					
ANR	869621	Argument	mac -> num		869595	0					
ANR	869622	PtrMemberAccess	mac -> num		869595	0					
ANR	869623	Identifier	mac		869595	0					
ANR	869624	Identifier	num		869595	1					
ANR	869625	Argument	value		869595	1					
ANR	869626	Identifier	value		869595	0					
ANR	869627	IfStatement	if ( value && * value )		869595	3					
ANR	869628	Condition	value && * value	773:5:16948:16962	869595	0	True				
ANR	869629	AndExpression	value && * value		869595	0		&&			
ANR	869630	Identifier	value		869595	0					
ANR	869631	UnaryOperationExpression	* value		869595	1					
ANR	869632	UnaryOperator	*		869595	0					
ANR	869633	Identifier	value		869595	1					
ANR	869634	CompoundStatement		5:22:117:117	869595	1					
ANR	869635	ExpressionStatement	mac -> brk_value = & mac -> _brk_value	774:2:16969:17002	869595	0	True				
ANR	869636	AssignmentExpression	mac -> brk_value = & mac -> _brk_value		869595	0		=			
ANR	869637	PtrMemberAccess	mac -> brk_value		869595	0					
ANR	869638	Identifier	mac		869595	0					
ANR	869639	Identifier	brk_value		869595	1					
ANR	869640	UnaryOperationExpression	& mac -> _brk_value		869595	1					
ANR	869641	UnaryOperator	&		869595	0					
ANR	869642	PtrMemberAccess	mac -> _brk_value		869595	1					
ANR	869643	Identifier	mac		869595	0					
ANR	869644	Identifier	_brk_value		869595	1					
ANR	869645	ReturnStatement	return 0 ;	776:1:17008:17016	869595	4	True				
ANR	869646	PrimaryExpression	0		869595	0					
ANR	869647	ReturnType	R_API int		869595	1					
ANR	869648	Identifier	r_cmd_macro_break		869595	2					
ANR	869649	ParameterList	"RCmdMacro * mac , const char * value"		869595	3					
ANR	869650	Parameter	RCmdMacro * mac	769:28:16812:16825	869595	0	True				
ANR	869651	ParameterType	RCmdMacro *		869595	0					
ANR	869652	Identifier	mac		869595	1					
ANR	869653	Parameter	const char * value	769:44:16828:16844	869595	1	True				
ANR	869654	ParameterType	const char *		869595	0					
ANR	869655	Identifier	value		869595	1					
ANR	869656	CFGEntryNode	ENTRY		869595		True				
ANR	869657	CFGExitNode	EXIT		869595		True				
ANR	869658	Symbol	mac -> _brk_value		869595						
ANR	869659	Symbol	mac -> brk_value		869595						
ANR	869660	Symbol	NULL		869595						
ANR	869661	Symbol	* value		869595						
ANR	869662	Symbol	& mac -> _brk_value		869595						
ANR	869663	Symbol	* mac		869595						
ANR	869664	Symbol	mac -> num		869595						
ANR	869665	Symbol	value		869595						
ANR	869666	Symbol	mac		869595						
ANR	869667	Symbol	mac -> brk		869595						
ANR	869668	Symbol	r_num_math		869595						
