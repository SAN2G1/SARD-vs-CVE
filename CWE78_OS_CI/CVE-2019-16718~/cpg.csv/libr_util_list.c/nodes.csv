command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5154802	File	data/converged/CVE-2019-16718~_radare2/libr_util_list.c								
ANR	5154803	Function	r_list_iter_new	9:0:158:236							
ANR	5154804	FunctionDef	r_list_iter_new ()		5154803	0					
ANR	5154805	CompoundStatement		9:36:194:236	5154803	0					
ANR	5154806	ReturnStatement	"return calloc ( 1 , sizeof ( RListIter ) ) ;"	10:1:197:234	5154803	0	True				
ANR	5154807	CallExpression	"calloc ( 1 , sizeof ( RListIter ) )"		5154803	0					
ANR	5154808	Callee	calloc		5154803	0					
ANR	5154809	Identifier	calloc		5154803	0					
ANR	5154810	ArgumentList	1		5154803	1					
ANR	5154811	Argument	1		5154803	0					
ANR	5154812	PrimaryExpression	1		5154803	0					
ANR	5154813	Argument	sizeof ( RListIter )		5154803	1					
ANR	5154814	SizeofExpression	sizeof ( RListIter )		5154803	0					
ANR	5154815	Sizeof	sizeof		5154803	0					
ANR	5154816	SizeofOperand	RListIter		5154803	1					
ANR	5154817	ReturnType	inline RListIter *		5154803	1					
ANR	5154818	Identifier	r_list_iter_new		5154803	2					
ANR	5154819	ParameterList			5154803	3					
ANR	5154820	CFGEntryNode	ENTRY		5154803		True				
ANR	5154821	CFGExitNode	EXIT		5154803		True				
ANR	5154822	Symbol	calloc		5154803						
ANR	5154823	Function	r_list_iter_free	13:0:239:305							
ANR	5154824	FunctionDef	r_list_iter_free (RListIter * list)		5154823	0					
ANR	5154825	CompoundStatement		13:45:284:305	5154823	0					
ANR	5154826	ReturnType	R_API void		5154823	1					
ANR	5154827	Identifier	r_list_iter_free		5154823	2					
ANR	5154828	ParameterList	RListIter * list		5154823	3					
ANR	5154829	Parameter	RListIter * list	13:28:267:281	5154823	0	True				
ANR	5154830	ParameterType	RListIter *		5154823	0					
ANR	5154831	Identifier	list		5154823	1					
ANR	5154832	CFGEntryNode	ENTRY		5154823		True				
ANR	5154833	CFGExitNode	EXIT		5154823		True				
ANR	5154834	Symbol	list		5154823						
ANR	5154835	Function	r_list_iter_get_next	17:0:308:418							
ANR	5154836	FunctionDef	r_list_iter_get_next (RListIter * list)		5154835	0					
ANR	5154837	CompoundStatement		17:55:363:418	5154835	0					
ANR	5154838	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	18:1:366:399	5154835	0	True				
ANR	5154839	CallExpression	"r_return_val_if_fail ( list , NULL )"		5154835	0					
ANR	5154840	Callee	r_return_val_if_fail		5154835	0					
ANR	5154841	Identifier	r_return_val_if_fail		5154835	0					
ANR	5154842	ArgumentList	list		5154835	1					
ANR	5154843	Argument	list		5154835	0					
ANR	5154844	Identifier	list		5154835	0					
ANR	5154845	Argument	NULL		5154835	1					
ANR	5154846	Identifier	NULL		5154835	0					
ANR	5154847	ReturnStatement	return list -> n ;	19:1:402:416	5154835	1	True				
ANR	5154848	PtrMemberAccess	list -> n		5154835	0					
ANR	5154849	Identifier	list		5154835	0					
ANR	5154850	Identifier	n		5154835	1					
ANR	5154851	ReturnType	R_API RListIter *		5154835	1					
ANR	5154852	Identifier	r_list_iter_get_next		5154835	2					
ANR	5154853	ParameterList	RListIter * list		5154835	3					
ANR	5154854	Parameter	RListIter * list	17:38:346:360	5154835	0	True				
ANR	5154855	ParameterType	RListIter *		5154835	0					
ANR	5154856	Identifier	list		5154835	1					
ANR	5154857	CFGEntryNode	ENTRY		5154835		True				
ANR	5154858	CFGExitNode	EXIT		5154835		True				
ANR	5154859	Symbol	list -> n		5154835						
ANR	5154860	Symbol	NULL		5154835						
ANR	5154861	Symbol	* list		5154835						
ANR	5154862	Symbol	list		5154835						
ANR	5154863	Function	r_list_iter_get_data	22:0:421:529							
ANR	5154864	FunctionDef	r_list_iter_get_data (RListIter * list)		5154863	0					
ANR	5154865	CompoundStatement		22:50:471:529	5154863	0					
ANR	5154866	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	23:1:474:507	5154863	0	True				
ANR	5154867	CallExpression	"r_return_val_if_fail ( list , NULL )"		5154863	0					
ANR	5154868	Callee	r_return_val_if_fail		5154863	0					
ANR	5154869	Identifier	r_return_val_if_fail		5154863	0					
ANR	5154870	ArgumentList	list		5154863	1					
ANR	5154871	Argument	list		5154863	0					
ANR	5154872	Identifier	list		5154863	0					
ANR	5154873	Argument	NULL		5154863	1					
ANR	5154874	Identifier	NULL		5154863	0					
ANR	5154875	ReturnStatement	return list -> data ;	24:1:510:527	5154863	1	True				
ANR	5154876	PtrMemberAccess	list -> data		5154863	0					
ANR	5154877	Identifier	list		5154863	0					
ANR	5154878	Identifier	data		5154863	1					
ANR	5154879	ReturnType	R_API void *		5154863	1					
ANR	5154880	Identifier	r_list_iter_get_data		5154863	2					
ANR	5154881	ParameterList	RListIter * list		5154863	3					
ANR	5154882	Parameter	RListIter * list	22:33:454:468	5154863	0	True				
ANR	5154883	ParameterType	RListIter *		5154863	0					
ANR	5154884	Identifier	list		5154863	1					
ANR	5154885	CFGEntryNode	ENTRY		5154863		True				
ANR	5154886	CFGExitNode	EXIT		5154863		True				
ANR	5154887	Symbol	NULL		5154863						
ANR	5154888	Symbol	* list		5154863						
ANR	5154889	Symbol	list		5154863						
ANR	5154890	Symbol	list -> data		5154863						
ANR	5154891	Function	r_list_iterator	27:0:532:642							
ANR	5154892	FunctionDef	r_list_iterator (const RList * list)		5154891	0					
ANR	5154893	CompoundStatement		27:52:584:642	5154891	0					
ANR	5154894	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	28:1:587:620	5154891	0	True				
ANR	5154895	CallExpression	"r_return_val_if_fail ( list , NULL )"		5154891	0					
ANR	5154896	Callee	r_return_val_if_fail		5154891	0					
ANR	5154897	Identifier	r_return_val_if_fail		5154891	0					
ANR	5154898	ArgumentList	list		5154891	1					
ANR	5154899	Argument	list		5154891	0					
ANR	5154900	Identifier	list		5154891	0					
ANR	5154901	Argument	NULL		5154891	1					
ANR	5154902	Identifier	NULL		5154891	0					
ANR	5154903	ReturnStatement	return list -> head ;	29:1:623:640	5154891	1	True				
ANR	5154904	PtrMemberAccess	list -> head		5154891	0					
ANR	5154905	Identifier	list		5154891	0					
ANR	5154906	Identifier	head		5154891	1					
ANR	5154907	ReturnType	R_API RListIter *		5154891	1					
ANR	5154908	Identifier	r_list_iterator		5154891	2					
ANR	5154909	ParameterList	const RList * list		5154891	3					
ANR	5154910	Parameter	const RList * list	27:33:565:581	5154891	0	True				
ANR	5154911	ParameterType	const RList *		5154891	0					
ANR	5154912	Identifier	list		5154891	1					
ANR	5154913	CFGEntryNode	ENTRY		5154891		True				
ANR	5154914	CFGExitNode	EXIT		5154891		True				
ANR	5154915	Symbol	list -> head		5154891						
ANR	5154916	Symbol	NULL		5154891						
ANR	5154917	Symbol	* list		5154891						
ANR	5154918	Symbol	list		5154891						
ANR	5154919	Function	r_list_push	32:0:645:737							
ANR	5154920	FunctionDef	"r_list_push (RList * list , void * item)"		5154919	0					
ANR	5154921	CompoundStatement		32:54:699:737	5154919	0					
ANR	5154922	ReturnStatement	"return r_list_append ( list , item ) ;"	33:1:702:735	5154919	0	True				
ANR	5154923	CallExpression	"r_list_append ( list , item )"		5154919	0					
ANR	5154924	Callee	r_list_append		5154919	0					
ANR	5154925	Identifier	r_list_append		5154919	0					
ANR	5154926	ArgumentList	list		5154919	1					
ANR	5154927	Argument	list		5154919	0					
ANR	5154928	Identifier	list		5154919	0					
ANR	5154929	Argument	item		5154919	1					
ANR	5154930	Identifier	item		5154919	0					
ANR	5154931	ReturnType	R_API RListIter *		5154919	1					
ANR	5154932	Identifier	r_list_push		5154919	2					
ANR	5154933	ParameterList	"RList * list , void * item"		5154919	3					
ANR	5154934	Parameter	RList * list	32:29:674:684	5154919	0	True				
ANR	5154935	ParameterType	RList *		5154919	0					
ANR	5154936	Identifier	list		5154919	1					
ANR	5154937	Parameter	void * item	32:42:687:696	5154919	1	True				
ANR	5154938	ParameterType	void *		5154919	0					
ANR	5154939	Identifier	item		5154919	1					
ANR	5154940	CFGEntryNode	ENTRY		5154919		True				
ANR	5154941	CFGExitNode	EXIT		5154919		True				
ANR	5154942	Symbol	item		5154919						
ANR	5154943	Symbol	r_list_append		5154919						
ANR	5154944	Symbol	list		5154919						
ANR	5154945	Function	r_list_get_next	36:0:740:845							
ANR	5154946	FunctionDef	r_list_get_next (RListIter * list)		5154945	0					
ANR	5154947	CompoundStatement		36:50:790:845	5154945	0					
ANR	5154948	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	37:1:793:826	5154945	0	True				
ANR	5154949	CallExpression	"r_return_val_if_fail ( list , NULL )"		5154945	0					
ANR	5154950	Callee	r_return_val_if_fail		5154945	0					
ANR	5154951	Identifier	r_return_val_if_fail		5154945	0					
ANR	5154952	ArgumentList	list		5154945	1					
ANR	5154953	Argument	list		5154945	0					
ANR	5154954	Identifier	list		5154945	0					
ANR	5154955	Argument	NULL		5154945	1					
ANR	5154956	Identifier	NULL		5154945	0					
ANR	5154957	ReturnStatement	return list -> n ;	38:1:829:843	5154945	1	True				
ANR	5154958	PtrMemberAccess	list -> n		5154945	0					
ANR	5154959	Identifier	list		5154945	0					
ANR	5154960	Identifier	n		5154945	1					
ANR	5154961	ReturnType	R_API RListIter *		5154945	1					
ANR	5154962	Identifier	r_list_get_next		5154945	2					
ANR	5154963	ParameterList	RListIter * list		5154945	3					
ANR	5154964	Parameter	RListIter * list	36:33:773:787	5154945	0	True				
ANR	5154965	ParameterType	RListIter *		5154945	0					
ANR	5154966	Identifier	list		5154945	1					
ANR	5154967	CFGEntryNode	ENTRY		5154945		True				
ANR	5154968	CFGExitNode	EXIT		5154945		True				
ANR	5154969	Symbol	list -> n		5154945						
ANR	5154970	Symbol	NULL		5154945						
ANR	5154971	Symbol	* list		5154945						
ANR	5154972	Symbol	list		5154945						
ANR	5154973	Function	r_list_first	42:0:872:1000							
ANR	5154974	FunctionDef	r_list_first (const RList * list)		5154973	0					
ANR	5154975	CompoundStatement		42:44:916:1000	5154973	0					
ANR	5154976	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	43:1:919:952	5154973	0	True				
ANR	5154977	CallExpression	"r_return_val_if_fail ( list , NULL )"		5154973	0					
ANR	5154978	Callee	r_return_val_if_fail		5154973	0					
ANR	5154979	Identifier	r_return_val_if_fail		5154973	0					
ANR	5154980	ArgumentList	list		5154973	1					
ANR	5154981	Argument	list		5154973	0					
ANR	5154982	Identifier	list		5154973	0					
ANR	5154983	Argument	NULL		5154973	1					
ANR	5154984	Identifier	NULL		5154973	0					
ANR	5154985	ReturnStatement	return list -> head ? list -> head -> data : NULL ;	44:1:955:998	5154973	1	True				
ANR	5154986	ConditionalExpression	list -> head ? list -> head -> data : NULL		5154973	0					
ANR	5154987	Condition	list -> head		5154973	0					
ANR	5154988	PtrMemberAccess	list -> head		5154973	0					
ANR	5154989	Identifier	list		5154973	0					
ANR	5154990	Identifier	head		5154973	1					
ANR	5154991	PtrMemberAccess	list -> head -> data		5154973	1					
ANR	5154992	PtrMemberAccess	list -> head		5154973	0					
ANR	5154993	Identifier	list		5154973	0					
ANR	5154994	Identifier	head		5154973	1					
ANR	5154995	Identifier	data		5154973	1					
ANR	5154996	Identifier	NULL		5154973	2					
ANR	5154997	ReturnType	R_API void *		5154973	1					
ANR	5154998	Identifier	r_list_first		5154973	2					
ANR	5154999	ParameterList	const RList * list		5154973	3					
ANR	5155000	Parameter	const RList * list	42:25:897:913	5154973	0	True				
ANR	5155001	ParameterType	const RList *		5154973	0					
ANR	5155002	Identifier	list		5154973	1					
ANR	5155003	CFGEntryNode	ENTRY		5154973		True				
ANR	5155004	CFGExitNode	EXIT		5154973		True				
ANR	5155005	Symbol	list -> head		5154973						
ANR	5155006	Symbol	* list -> head		5154973						
ANR	5155007	Symbol	NULL		5154973						
ANR	5155008	Symbol	* * list		5154973						
ANR	5155009	Symbol	* list		5154973						
ANR	5155010	Symbol	list -> head -> data		5154973						
ANR	5155011	Symbol	list		5154973						
ANR	5155012	Function	r_list_last	47:0:1003:1130							
ANR	5155013	FunctionDef	r_list_last (const RList * list)		5155012	0					
ANR	5155014	CompoundStatement		47:43:1046:1130	5155012	0					
ANR	5155015	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	48:1:1049:1082	5155012	0	True				
ANR	5155016	CallExpression	"r_return_val_if_fail ( list , NULL )"		5155012	0					
ANR	5155017	Callee	r_return_val_if_fail		5155012	0					
ANR	5155018	Identifier	r_return_val_if_fail		5155012	0					
ANR	5155019	ArgumentList	list		5155012	1					
ANR	5155020	Argument	list		5155012	0					
ANR	5155021	Identifier	list		5155012	0					
ANR	5155022	Argument	NULL		5155012	1					
ANR	5155023	Identifier	NULL		5155012	0					
ANR	5155024	ReturnStatement	return list -> tail ? list -> tail -> data : NULL ;	49:1:1085:1128	5155012	1	True				
ANR	5155025	ConditionalExpression	list -> tail ? list -> tail -> data : NULL		5155012	0					
ANR	5155026	Condition	list -> tail		5155012	0					
ANR	5155027	PtrMemberAccess	list -> tail		5155012	0					
ANR	5155028	Identifier	list		5155012	0					
ANR	5155029	Identifier	tail		5155012	1					
ANR	5155030	PtrMemberAccess	list -> tail -> data		5155012	1					
ANR	5155031	PtrMemberAccess	list -> tail		5155012	0					
ANR	5155032	Identifier	list		5155012	0					
ANR	5155033	Identifier	tail		5155012	1					
ANR	5155034	Identifier	data		5155012	1					
ANR	5155035	Identifier	NULL		5155012	2					
ANR	5155036	ReturnType	R_API void *		5155012	1					
ANR	5155037	Identifier	r_list_last		5155012	2					
ANR	5155038	ParameterList	const RList * list		5155012	3					
ANR	5155039	Parameter	const RList * list	47:24:1027:1043	5155012	0	True				
ANR	5155040	ParameterType	const RList *		5155012	0					
ANR	5155041	Identifier	list		5155012	1					
ANR	5155042	CFGEntryNode	ENTRY		5155012		True				
ANR	5155043	CFGExitNode	EXIT		5155012		True				
ANR	5155044	Symbol	NULL		5155012						
ANR	5155045	Symbol	* * list		5155012						
ANR	5155046	Symbol	* list		5155012						
ANR	5155047	Symbol	* list -> tail		5155012						
ANR	5155048	Symbol	list -> tail -> data		5155012						
ANR	5155049	Symbol	list		5155012						
ANR	5155050	Symbol	list -> tail		5155012						
ANR	5155051	Function	r_list_init	52:0:1133:1273							
ANR	5155052	FunctionDef	r_list_init (RList * list)		5155051	0					
ANR	5155053	CompoundStatement		52:36:1169:1273	5155051	0					
ANR	5155054	ExpressionStatement	list -> head = NULL	53:1:1172:1189	5155051	0	True				
ANR	5155055	AssignmentExpression	list -> head = NULL		5155051	0		=			
ANR	5155056	PtrMemberAccess	list -> head		5155051	0					
ANR	5155057	Identifier	list		5155051	0					
ANR	5155058	Identifier	head		5155051	1					
ANR	5155059	Identifier	NULL		5155051	1					
ANR	5155060	ExpressionStatement	list -> tail = NULL	54:1:1192:1209	5155051	1	True				
ANR	5155061	AssignmentExpression	list -> tail = NULL		5155051	0		=			
ANR	5155062	PtrMemberAccess	list -> tail		5155051	0					
ANR	5155063	Identifier	list		5155051	0					
ANR	5155064	Identifier	tail		5155051	1					
ANR	5155065	Identifier	NULL		5155051	1					
ANR	5155066	ExpressionStatement	list -> free = NULL	55:1:1212:1229	5155051	2	True				
ANR	5155067	AssignmentExpression	list -> free = NULL		5155051	0		=			
ANR	5155068	PtrMemberAccess	list -> free		5155051	0					
ANR	5155069	Identifier	list		5155051	0					
ANR	5155070	Identifier	free		5155051	1					
ANR	5155071	Identifier	NULL		5155051	1					
ANR	5155072	ExpressionStatement	list -> length = 0	56:1:1232:1248	5155051	3	True				
ANR	5155073	AssignmentExpression	list -> length = 0		5155051	0		=			
ANR	5155074	PtrMemberAccess	list -> length		5155051	0					
ANR	5155075	Identifier	list		5155051	0					
ANR	5155076	Identifier	length		5155051	1					
ANR	5155077	PrimaryExpression	0		5155051	1					
ANR	5155078	ExpressionStatement	list -> sorted = false	57:1:1251:1271	5155051	4	True				
ANR	5155079	AssignmentExpression	list -> sorted = false		5155051	0		=			
ANR	5155080	PtrMemberAccess	list -> sorted		5155051	0					
ANR	5155081	Identifier	list		5155051	0					
ANR	5155082	Identifier	sorted		5155051	1					
ANR	5155083	Identifier	false		5155051	1					
ANR	5155084	ReturnType	R_API void		5155051	1					
ANR	5155085	Identifier	r_list_init		5155051	2					
ANR	5155086	ParameterList	RList * list		5155051	3					
ANR	5155087	Parameter	RList * list	52:23:1156:1166	5155051	0	True				
ANR	5155088	ParameterType	RList *		5155051	0					
ANR	5155089	Identifier	list		5155051	1					
ANR	5155090	CFGEntryNode	ENTRY		5155051		True				
ANR	5155091	CFGExitNode	EXIT		5155051		True				
ANR	5155092	Symbol	list -> head		5155051						
ANR	5155093	Symbol	list -> length		5155051						
ANR	5155094	Symbol	NULL		5155051						
ANR	5155095	Symbol	* list		5155051						
ANR	5155096	Symbol	list -> free		5155051						
ANR	5155097	Symbol	false		5155051						
ANR	5155098	Symbol	list -> sorted		5155051						
ANR	5155099	Symbol	list		5155051						
ANR	5155100	Symbol	list -> tail		5155051						
ANR	5155101	Function	r_list_length	60:0:1276:1376							
ANR	5155102	FunctionDef	r_list_length (const RList * list)		5155101	0					
ANR	5155103	CompoundStatement		60:43:1319:1376	5155101	0					
ANR	5155104	ExpressionStatement	"r_return_val_if_fail ( list , 0 )"	61:1:1322:1352	5155101	0	True				
ANR	5155105	CallExpression	"r_return_val_if_fail ( list , 0 )"		5155101	0					
ANR	5155106	Callee	r_return_val_if_fail		5155101	0					
ANR	5155107	Identifier	r_return_val_if_fail		5155101	0					
ANR	5155108	ArgumentList	list		5155101	1					
ANR	5155109	Argument	list		5155101	0					
ANR	5155110	Identifier	list		5155101	0					
ANR	5155111	Argument	0		5155101	1					
ANR	5155112	PrimaryExpression	0		5155101	0					
ANR	5155113	ReturnStatement	return list -> length ;	62:1:1355:1374	5155101	1	True				
ANR	5155114	PtrMemberAccess	list -> length		5155101	0					
ANR	5155115	Identifier	list		5155101	0					
ANR	5155116	Identifier	length		5155101	1					
ANR	5155117	ReturnType	R_API int		5155101	1					
ANR	5155118	Identifier	r_list_length		5155101	2					
ANR	5155119	ParameterList	const RList * list		5155101	3					
ANR	5155120	Parameter	const RList * list	60:24:1300:1316	5155101	0	True				
ANR	5155121	ParameterType	const RList *		5155101	0					
ANR	5155122	Identifier	list		5155101	1					
ANR	5155123	CFGEntryNode	ENTRY		5155101		True				
ANR	5155124	CFGExitNode	EXIT		5155101		True				
ANR	5155125	Symbol	list -> length		5155101						
ANR	5155126	Symbol	* list		5155101						
ANR	5155127	Symbol	list		5155101						
ANR	5155128	Function	r_list_purge	66:0:1415:1628							
ANR	5155129	FunctionDef	r_list_purge (RList * list)		5155128	0					
ANR	5155130	CompoundStatement		66:37:1452:1628	5155128	0					
ANR	5155131	ExpressionStatement	r_return_if_fail ( list )	67:1:1455:1478	5155128	0	True				
ANR	5155132	CallExpression	r_return_if_fail ( list )		5155128	0					
ANR	5155133	Callee	r_return_if_fail		5155128	0					
ANR	5155134	Identifier	r_return_if_fail		5155128	0					
ANR	5155135	ArgumentList	list		5155128	1					
ANR	5155136	Argument	list		5155128	0					
ANR	5155137	Identifier	list		5155128	0					
ANR	5155138	IdentifierDeclStatement	RListIter * it = list -> head ;	69:1:1482:1508	5155128	1	True				
ANR	5155139	IdentifierDecl	* it = list -> head		5155128	0					
ANR	5155140	IdentifierDeclType	RListIter *		5155128	0					
ANR	5155141	Identifier	it		5155128	1					
ANR	5155142	AssignmentExpression	* it = list -> head		5155128	2		=			
ANR	5155143	Identifier	it		5155128	0					
ANR	5155144	PtrMemberAccess	list -> head		5155128	1					
ANR	5155145	Identifier	list		5155128	0					
ANR	5155146	Identifier	head		5155128	1					
ANR	5155147	WhileStatement	while ( it )		5155128	2					
ANR	5155148	Condition	it	70:8:1518:1519	5155128	0	True				
ANR	5155149	Identifier	it		5155128	0					
ANR	5155150	CompoundStatement		6:2:73:96	5155128	1					
ANR	5155151	IdentifierDeclStatement	RListIter * next = it -> n ;	71:2:1526:1549	5155128	0	True				
ANR	5155152	IdentifierDecl	* next = it -> n		5155128	0					
ANR	5155153	IdentifierDeclType	RListIter *		5155128	0					
ANR	5155154	Identifier	next		5155128	1					
ANR	5155155	AssignmentExpression	* next = it -> n		5155128	2		=			
ANR	5155156	Identifier	next		5155128	0					
ANR	5155157	PtrMemberAccess	it -> n		5155128	1					
ANR	5155158	Identifier	it		5155128	0					
ANR	5155159	Identifier	n		5155128	1					
ANR	5155160	ExpressionStatement	"r_list_delete ( list , it )"	72:2:1553:1577	5155128	1	True				
ANR	5155161	CallExpression	"r_list_delete ( list , it )"		5155128	0					
ANR	5155162	Callee	r_list_delete		5155128	0					
ANR	5155163	Identifier	r_list_delete		5155128	0					
ANR	5155164	ArgumentList	list		5155128	1					
ANR	5155165	Argument	list		5155128	0					
ANR	5155166	Identifier	list		5155128	0					
ANR	5155167	Argument	it		5155128	1					
ANR	5155168	Identifier	it		5155128	0					
ANR	5155169	ExpressionStatement	it = next	73:2:1581:1590	5155128	2	True				
ANR	5155170	AssignmentExpression	it = next		5155128	0		=			
ANR	5155171	Identifier	it		5155128	0					
ANR	5155172	Identifier	next		5155128	1					
ANR	5155173	ExpressionStatement	list -> head = list -> tail = NULL	75:1:1596:1626	5155128	3	True				
ANR	5155174	AssignmentExpression	list -> head = list -> tail = NULL		5155128	0		=			
ANR	5155175	PtrMemberAccess	list -> head		5155128	0					
ANR	5155176	Identifier	list		5155128	0					
ANR	5155177	Identifier	head		5155128	1					
ANR	5155178	AssignmentExpression	list -> tail = NULL		5155128	1		=			
ANR	5155179	PtrMemberAccess	list -> tail		5155128	0					
ANR	5155180	Identifier	list		5155128	0					
ANR	5155181	Identifier	tail		5155128	1					
ANR	5155182	Identifier	NULL		5155128	1					
ANR	5155183	ReturnType	R_API void		5155128	1					
ANR	5155184	Identifier	r_list_purge		5155128	2					
ANR	5155185	ParameterList	RList * list		5155128	3					
ANR	5155186	Parameter	RList * list	66:24:1439:1449	5155128	0	True				
ANR	5155187	ParameterType	RList *		5155128	0					
ANR	5155188	Identifier	list		5155128	1					
ANR	5155189	CFGEntryNode	ENTRY		5155128		True				
ANR	5155190	CFGExitNode	EXIT		5155128		True				
ANR	5155191	Symbol	list -> head		5155128						
ANR	5155192	Symbol	next		5155128						
ANR	5155193	Symbol	* it		5155128						
ANR	5155194	Symbol	NULL		5155128						
ANR	5155195	Symbol	* list		5155128						
ANR	5155196	Symbol	it		5155128						
ANR	5155197	Symbol	list		5155128						
ANR	5155198	Symbol	it -> n		5155128						
ANR	5155199	Symbol	list -> tail		5155128						
ANR	5155200	Function	r_list_free	79:0:1651:1745							
ANR	5155201	FunctionDef	r_list_free (RList * list)		5155200	0					
ANR	5155202	CompoundStatement		79:36:1687:1745	5155200	0					
ANR	5155203	IfStatement	if ( list )		5155200	0					
ANR	5155204	Condition	list	80:5:1694:1697	5155200	0	True				
ANR	5155205	Identifier	list		5155200	0					
ANR	5155206	CompoundStatement		2:11:12:12	5155200	1					
ANR	5155207	ExpressionStatement	r_list_purge ( list )	81:2:1704:1723	5155200	0	True				
ANR	5155208	CallExpression	r_list_purge ( list )		5155200	0					
ANR	5155209	Callee	r_list_purge		5155200	0					
ANR	5155210	Identifier	r_list_purge		5155200	0					
ANR	5155211	ArgumentList	list		5155200	1					
ANR	5155212	Argument	list		5155200	0					
ANR	5155213	Identifier	list		5155200	0					
ANR	5155214	ExpressionStatement	R_FREE ( list )	82:2:1727:1740	5155200	1	True				
ANR	5155215	CallExpression	R_FREE ( list )		5155200	0					
ANR	5155216	Callee	R_FREE		5155200	0					
ANR	5155217	Identifier	R_FREE		5155200	0					
ANR	5155218	ArgumentList	list		5155200	1					
ANR	5155219	Argument	list		5155200	0					
ANR	5155220	Identifier	list		5155200	0					
ANR	5155221	ReturnType	R_API void		5155200	1					
ANR	5155222	Identifier	r_list_free		5155200	2					
ANR	5155223	ParameterList	RList * list		5155200	3					
ANR	5155224	Parameter	RList * list	79:23:1674:1684	5155200	0	True				
ANR	5155225	ParameterType	RList *		5155200	0					
ANR	5155226	Identifier	list		5155200	1					
ANR	5155227	CFGEntryNode	ENTRY		5155200		True				
ANR	5155228	CFGExitNode	EXIT		5155200		True				
ANR	5155229	Symbol	list		5155200						
ANR	5155230	Function	r_list_delete_data	86:0:1748:1992							
ANR	5155231	FunctionDef	"r_list_delete_data (RList * list , void * ptr)"		5155230	0					
ANR	5155232	CompoundStatement		86:54:1802:1992	5155230	0					
ANR	5155233	IdentifierDeclStatement	void * p ;	87:1:1805:1812	5155230	0	True				
ANR	5155234	IdentifierDecl	* p		5155230	0					
ANR	5155235	IdentifierDeclType	void *		5155230	0					
ANR	5155236	Identifier	p		5155230	1					
ANR	5155237	IdentifierDeclStatement	RListIter * iter ;	88:1:1815:1830	5155230	1	True				
ANR	5155238	IdentifierDecl	* iter		5155230	0					
ANR	5155239	IdentifierDeclType	RListIter *		5155230	0					
ANR	5155240	Identifier	iter		5155230	1					
ANR	5155241	ExpressionStatement	"r_return_val_if_fail ( list , false )"	90:1:1834:1868	5155230	2	True				
ANR	5155242	CallExpression	"r_return_val_if_fail ( list , false )"		5155230	0					
ANR	5155243	Callee	r_return_val_if_fail		5155230	0					
ANR	5155244	Identifier	r_return_val_if_fail		5155230	0					
ANR	5155245	ArgumentList	list		5155230	1					
ANR	5155246	Argument	list		5155230	0					
ANR	5155247	Identifier	list		5155230	0					
ANR	5155248	Argument	false		5155230	1					
ANR	5155249	Identifier	false		5155230	0					
ANR	5155250	Statement	r_list_foreach	92:1:1872:1885	5155230	3	True				
ANR	5155251	Statement	(	92:16:1887:1887	5155230	4	True				
ANR	5155252	Statement	list	92:17:1888:1891	5155230	5	True				
ANR	5155253	Statement	","	92:21:1892:1892	5155230	6	True				
ANR	5155254	Statement	iter	92:23:1894:1897	5155230	7	True				
ANR	5155255	Statement	","	92:27:1898:1898	5155230	8	True				
ANR	5155256	Statement	p	92:29:1900:1900	5155230	9	True				
ANR	5155257	Statement	)	92:30:1901:1901	5155230	10	True				
ANR	5155258	CompoundStatement		7:32:100:100	5155230	11					
ANR	5155259	IfStatement	if ( ptr == p )		5155230	0					
ANR	5155260	Condition	ptr == p	93:6:1911:1918	5155230	0	True				
ANR	5155261	EqualityExpression	ptr == p		5155230	0		==			
ANR	5155262	Identifier	ptr		5155230	0					
ANR	5155263	Identifier	p		5155230	1					
ANR	5155264	CompoundStatement		8:16:118:118	5155230	1					
ANR	5155265	ExpressionStatement	"r_list_delete ( list , iter )"	94:3:1926:1952	5155230	0	True				
ANR	5155266	CallExpression	"r_list_delete ( list , iter )"		5155230	0					
ANR	5155267	Callee	r_list_delete		5155230	0					
ANR	5155268	Identifier	r_list_delete		5155230	0					
ANR	5155269	ArgumentList	list		5155230	1					
ANR	5155270	Argument	list		5155230	0					
ANR	5155271	Identifier	list		5155230	0					
ANR	5155272	Argument	iter		5155230	1					
ANR	5155273	Identifier	iter		5155230	0					
ANR	5155274	ReturnStatement	return true ;	95:3:1957:1968	5155230	1	True				
ANR	5155275	Identifier	true		5155230	0					
ANR	5155276	ReturnStatement	return false ;	98:1:1978:1990	5155230	12	True				
ANR	5155277	Identifier	false		5155230	0					
ANR	5155278	ReturnType	R_API bool		5155230	1					
ANR	5155279	Identifier	r_list_delete_data		5155230	2					
ANR	5155280	ParameterList	"RList * list , void * ptr"		5155230	3					
ANR	5155281	Parameter	RList * list	86:30:1778:1788	5155230	0	True				
ANR	5155282	ParameterType	RList *		5155230	0					
ANR	5155283	Identifier	list		5155230	1					
ANR	5155284	Parameter	void * ptr	86:43:1791:1799	5155230	1	True				
ANR	5155285	ParameterType	void *		5155230	0					
ANR	5155286	Identifier	ptr		5155230	1					
ANR	5155287	CFGEntryNode	ENTRY		5155230		True				
ANR	5155288	CFGExitNode	EXIT		5155230		True				
ANR	5155289	Symbol	p		5155230						
ANR	5155290	Symbol	false		5155230						
ANR	5155291	Symbol	true		5155230						
ANR	5155292	Symbol	iter		5155230						
ANR	5155293	Symbol	list		5155230						
ANR	5155294	Symbol	ptr		5155230						
ANR	5155295	Function	r_list_delete	101:0:1995:2218							
ANR	5155296	FunctionDef	"r_list_delete (RList * list , RListIter * iter)"		5155295	0					
ANR	5155297	CompoundStatement		101:55:2050:2218	5155295	0					
ANR	5155298	ExpressionStatement	r_return_if_fail ( list && iter )	102:1:2053:2084	5155295	0	True				
ANR	5155299	CallExpression	r_return_if_fail ( list && iter )		5155295	0					
ANR	5155300	Callee	r_return_if_fail		5155295	0					
ANR	5155301	Identifier	r_return_if_fail		5155295	0					
ANR	5155302	ArgumentList	list && iter		5155295	1					
ANR	5155303	Argument	list && iter		5155295	0					
ANR	5155304	AndExpression	list && iter		5155295	0		&&			
ANR	5155305	Identifier	list		5155295	0					
ANR	5155306	Identifier	iter		5155295	1					
ANR	5155307	ExpressionStatement	"r_list_split_iter ( list , iter )"	103:1:2087:2117	5155295	1	True				
ANR	5155308	CallExpression	"r_list_split_iter ( list , iter )"		5155295	0					
ANR	5155309	Callee	r_list_split_iter		5155295	0					
ANR	5155310	Identifier	r_list_split_iter		5155295	0					
ANR	5155311	ArgumentList	list		5155295	1					
ANR	5155312	Argument	list		5155295	0					
ANR	5155313	Identifier	list		5155295	0					
ANR	5155314	Argument	iter		5155295	1					
ANR	5155315	Identifier	iter		5155295	0					
ANR	5155316	IfStatement	if ( list -> free && iter -> data )		5155295	2					
ANR	5155317	Condition	list -> free && iter -> data	104:5:2124:2147	5155295	0	True				
ANR	5155318	AndExpression	list -> free && iter -> data		5155295	0		&&			
ANR	5155319	PtrMemberAccess	list -> free		5155295	0					
ANR	5155320	Identifier	list		5155295	0					
ANR	5155321	Identifier	free		5155295	1					
ANR	5155322	PtrMemberAccess	iter -> data		5155295	1					
ANR	5155323	Identifier	iter		5155295	0					
ANR	5155324	Identifier	data		5155295	1					
ANR	5155325	CompoundStatement		4:31:99:99	5155295	1					
ANR	5155326	ExpressionStatement	list -> free ( iter -> data )	105:2:2154:2177	5155295	0	True				
ANR	5155327	CallExpression	list -> free ( iter -> data )		5155295	0					
ANR	5155328	Callee	list -> free		5155295	0					
ANR	5155329	PtrMemberAccess	list -> free		5155295	0					
ANR	5155330	Identifier	list		5155295	0					
ANR	5155331	Identifier	free		5155295	1					
ANR	5155332	ArgumentList	iter -> data		5155295	1					
ANR	5155333	Argument	iter -> data		5155295	0					
ANR	5155334	PtrMemberAccess	iter -> data		5155295	0					
ANR	5155335	Identifier	iter		5155295	0					
ANR	5155336	Identifier	data		5155295	1					
ANR	5155337	ExpressionStatement	iter -> data = NULL	107:1:2183:2200	5155295	3	True				
ANR	5155338	AssignmentExpression	iter -> data = NULL		5155295	0		=			
ANR	5155339	PtrMemberAccess	iter -> data		5155295	0					
ANR	5155340	Identifier	iter		5155295	0					
ANR	5155341	Identifier	data		5155295	1					
ANR	5155342	Identifier	NULL		5155295	1					
ANR	5155343	ExpressionStatement	R_FREE ( iter )	108:1:2203:2216	5155295	4	True				
ANR	5155344	CallExpression	R_FREE ( iter )		5155295	0					
ANR	5155345	Callee	R_FREE		5155295	0					
ANR	5155346	Identifier	R_FREE		5155295	0					
ANR	5155347	ArgumentList	iter		5155295	1					
ANR	5155348	Argument	iter		5155295	0					
ANR	5155349	Identifier	iter		5155295	0					
ANR	5155350	ReturnType	R_API void		5155295	1					
ANR	5155351	Identifier	r_list_delete		5155295	2					
ANR	5155352	ParameterList	"RList * list , RListIter * iter"		5155295	3					
ANR	5155353	Parameter	RList * list	101:25:2020:2030	5155295	0	True				
ANR	5155354	ParameterType	RList *		5155295	0					
ANR	5155355	Identifier	list		5155295	1					
ANR	5155356	Parameter	RListIter * iter	101:38:2033:2047	5155295	1	True				
ANR	5155357	ParameterType	RListIter *		5155295	0					
ANR	5155358	Identifier	iter		5155295	1					
ANR	5155359	CFGEntryNode	ENTRY		5155295		True				
ANR	5155360	CFGExitNode	EXIT		5155295		True				
ANR	5155361	Symbol	* iter		5155295						
ANR	5155362	Symbol	NULL		5155295						
ANR	5155363	Symbol	list -> free		5155295						
ANR	5155364	Symbol	* list		5155295						
ANR	5155365	Symbol	iter		5155295						
ANR	5155366	Symbol	list		5155295						
ANR	5155367	Symbol	iter -> data		5155295						
ANR	5155368	Function	r_list_split	111:0:2221:2491							
ANR	5155369	FunctionDef	"r_list_split (RList * list , void * ptr)"		5155368	0					
ANR	5155370	CompoundStatement		111:48:2269:2491	5155368	0					
ANR	5155371	ExpressionStatement	r_return_if_fail ( list )	112:1:2272:2295	5155368	0	True				
ANR	5155372	CallExpression	r_return_if_fail ( list )		5155368	0					
ANR	5155373	Callee	r_return_if_fail		5155368	0					
ANR	5155374	Identifier	r_return_if_fail		5155368	0					
ANR	5155375	ArgumentList	list		5155368	1					
ANR	5155376	Argument	list		5155368	0					
ANR	5155377	Identifier	list		5155368	0					
ANR	5155378	IdentifierDeclStatement	RListIter * iter = r_list_iterator ( list ) ;	114:1:2299:2339	5155368	1	True				
ANR	5155379	IdentifierDecl	* iter = r_list_iterator ( list )		5155368	0					
ANR	5155380	IdentifierDeclType	RListIter *		5155368	0					
ANR	5155381	Identifier	iter		5155368	1					
ANR	5155382	AssignmentExpression	* iter = r_list_iterator ( list )		5155368	2		=			
ANR	5155383	Identifier	iter		5155368	0					
ANR	5155384	CallExpression	r_list_iterator ( list )		5155368	1					
ANR	5155385	Callee	r_list_iterator		5155368	0					
ANR	5155386	Identifier	r_list_iterator		5155368	0					
ANR	5155387	ArgumentList	list		5155368	1					
ANR	5155388	Argument	list		5155368	0					
ANR	5155389	Identifier	list		5155368	0					
ANR	5155390	WhileStatement	while ( iter )		5155368	2					
ANR	5155391	Condition	iter	115:8:2349:2352	5155368	0	True				
ANR	5155392	Identifier	iter		5155368	0					
ANR	5155393	CompoundStatement		6:2:89:112	5155368	1					
ANR	5155394	IdentifierDeclStatement	void * item = iter -> data ;	116:2:2359:2382	5155368	0	True				
ANR	5155395	IdentifierDecl	* item = iter -> data		5155368	0					
ANR	5155396	IdentifierDeclType	void *		5155368	0					
ANR	5155397	Identifier	item		5155368	1					
ANR	5155398	AssignmentExpression	* item = iter -> data		5155368	2		=			
ANR	5155399	Identifier	item		5155368	0					
ANR	5155400	PtrMemberAccess	iter -> data		5155368	1					
ANR	5155401	Identifier	iter		5155368	0					
ANR	5155402	Identifier	data		5155368	1					
ANR	5155403	IfStatement	if ( ptr == item )		5155368	1					
ANR	5155404	Condition	ptr == item	117:6:2390:2400	5155368	0	True				
ANR	5155405	EqualityExpression	ptr == item		5155368	0		==			
ANR	5155406	Identifier	ptr		5155368	0					
ANR	5155407	Identifier	item		5155368	1					
ANR	5155408	CompoundStatement		7:19:133:133	5155368	1					
ANR	5155409	ExpressionStatement	"r_list_split_iter ( list , iter )"	118:3:2408:2438	5155368	0	True				
ANR	5155410	CallExpression	"r_list_split_iter ( list , iter )"		5155368	0					
ANR	5155411	Callee	r_list_split_iter		5155368	0					
ANR	5155412	Identifier	r_list_split_iter		5155368	0					
ANR	5155413	ArgumentList	list		5155368	1					
ANR	5155414	Argument	list		5155368	0					
ANR	5155415	Identifier	list		5155368	0					
ANR	5155416	Argument	iter		5155368	1					
ANR	5155417	Identifier	iter		5155368	0					
ANR	5155418	ExpressionStatement	free ( iter )	119:3:2443:2454	5155368	1	True				
ANR	5155419	CallExpression	free ( iter )		5155368	0					
ANR	5155420	Callee	free		5155368	0					
ANR	5155421	Identifier	free		5155368	0					
ANR	5155422	ArgumentList	iter		5155368	1					
ANR	5155423	Argument	iter		5155368	0					
ANR	5155424	Identifier	iter		5155368	0					
ANR	5155425	BreakStatement	break ;	120:3:2459:2464	5155368	2	True				
ANR	5155426	ExpressionStatement	iter = iter -> n	122:2:2472:2486	5155368	2	True				
ANR	5155427	AssignmentExpression	iter = iter -> n		5155368	0		=			
ANR	5155428	Identifier	iter		5155368	0					
ANR	5155429	PtrMemberAccess	iter -> n		5155368	1					
ANR	5155430	Identifier	iter		5155368	0					
ANR	5155431	Identifier	n		5155368	1					
ANR	5155432	ReturnType	R_API void		5155368	1					
ANR	5155433	Identifier	r_list_split		5155368	2					
ANR	5155434	ParameterList	"RList * list , void * ptr"		5155368	3					
ANR	5155435	Parameter	RList * list	111:24:2245:2255	5155368	0	True				
ANR	5155436	ParameterType	RList *		5155368	0					
ANR	5155437	Identifier	list		5155368	1					
ANR	5155438	Parameter	void * ptr	111:37:2258:2266	5155368	1	True				
ANR	5155439	ParameterType	void *		5155368	0					
ANR	5155440	Identifier	ptr		5155368	1					
ANR	5155441	CFGEntryNode	ENTRY		5155368		True				
ANR	5155442	CFGExitNode	EXIT		5155368		True				
ANR	5155443	Symbol	* iter		5155368						
ANR	5155444	Symbol	item		5155368						
ANR	5155445	Symbol	iter -> n		5155368						
ANR	5155446	Symbol	iter		5155368						
ANR	5155447	Symbol	r_list_iterator		5155368						
ANR	5155448	Symbol	list		5155368						
ANR	5155449	Symbol	iter -> data		5155368						
ANR	5155450	Symbol	ptr		5155368						
ANR	5155451	Function	r_list_split_iter	126:0:2494:2793							
ANR	5155452	FunctionDef	"r_list_split_iter (RList * list , RListIter * iter)"		5155451	0					
ANR	5155453	CompoundStatement		126:59:2553:2793	5155451	0					
ANR	5155454	ExpressionStatement	r_return_if_fail ( list )	127:1:2556:2579	5155451	0	True				
ANR	5155455	CallExpression	r_return_if_fail ( list )		5155451	0					
ANR	5155456	Callee	r_return_if_fail		5155451	0					
ANR	5155457	Identifier	r_return_if_fail		5155451	0					
ANR	5155458	ArgumentList	list		5155451	1					
ANR	5155459	Argument	list		5155451	0					
ANR	5155460	Identifier	list		5155451	0					
ANR	5155461	IfStatement	if ( list -> head == iter )		5155451	1					
ANR	5155462	Condition	list -> head == iter	129:5:2587:2604	5155451	0	True				
ANR	5155463	EqualityExpression	list -> head == iter		5155451	0		==			
ANR	5155464	PtrMemberAccess	list -> head		5155451	0					
ANR	5155465	Identifier	list		5155451	0					
ANR	5155466	Identifier	head		5155451	1					
ANR	5155467	Identifier	iter		5155451	1					
ANR	5155468	CompoundStatement		4:25:53:53	5155451	1					
ANR	5155469	ExpressionStatement	list -> head = iter -> n	130:2:2611:2631	5155451	0	True				
ANR	5155470	AssignmentExpression	list -> head = iter -> n		5155451	0		=			
ANR	5155471	PtrMemberAccess	list -> head		5155451	0					
ANR	5155472	Identifier	list		5155451	0					
ANR	5155473	Identifier	head		5155451	1					
ANR	5155474	PtrMemberAccess	iter -> n		5155451	1					
ANR	5155475	Identifier	iter		5155451	0					
ANR	5155476	Identifier	n		5155451	1					
ANR	5155477	IfStatement	if ( list -> tail == iter )		5155451	2					
ANR	5155478	Condition	list -> tail == iter	132:5:2641:2658	5155451	0	True				
ANR	5155479	EqualityExpression	list -> tail == iter		5155451	0		==			
ANR	5155480	PtrMemberAccess	list -> tail		5155451	0					
ANR	5155481	Identifier	list		5155451	0					
ANR	5155482	Identifier	tail		5155451	1					
ANR	5155483	Identifier	iter		5155451	1					
ANR	5155484	CompoundStatement		7:25:107:107	5155451	1					
ANR	5155485	ExpressionStatement	list -> tail = iter -> p	133:2:2665:2685	5155451	0	True				
ANR	5155486	AssignmentExpression	list -> tail = iter -> p		5155451	0		=			
ANR	5155487	PtrMemberAccess	list -> tail		5155451	0					
ANR	5155488	Identifier	list		5155451	0					
ANR	5155489	Identifier	tail		5155451	1					
ANR	5155490	PtrMemberAccess	iter -> p		5155451	1					
ANR	5155491	Identifier	iter		5155451	0					
ANR	5155492	Identifier	p		5155451	1					
ANR	5155493	IfStatement	if ( iter -> p )		5155451	3					
ANR	5155494	Condition	iter -> p	135:5:2695:2701	5155451	0	True				
ANR	5155495	PtrMemberAccess	iter -> p		5155451	0					
ANR	5155496	Identifier	iter		5155451	0					
ANR	5155497	Identifier	p		5155451	1					
ANR	5155498	CompoundStatement		10:14:150:150	5155451	1					
ANR	5155499	ExpressionStatement	iter -> p -> n = iter -> n	136:2:2708:2728	5155451	0	True				
ANR	5155500	AssignmentExpression	iter -> p -> n = iter -> n		5155451	0		=			
ANR	5155501	PtrMemberAccess	iter -> p -> n		5155451	0					
ANR	5155502	PtrMemberAccess	iter -> p		5155451	0					
ANR	5155503	Identifier	iter		5155451	0					
ANR	5155504	Identifier	p		5155451	1					
ANR	5155505	Identifier	n		5155451	1					
ANR	5155506	PtrMemberAccess	iter -> n		5155451	1					
ANR	5155507	Identifier	iter		5155451	0					
ANR	5155508	Identifier	n		5155451	1					
ANR	5155509	IfStatement	if ( iter -> n )		5155451	4					
ANR	5155510	Condition	iter -> n	138:5:2738:2744	5155451	0	True				
ANR	5155511	PtrMemberAccess	iter -> n		5155451	0					
ANR	5155512	Identifier	iter		5155451	0					
ANR	5155513	Identifier	n		5155451	1					
ANR	5155514	CompoundStatement		13:14:193:193	5155451	1					
ANR	5155515	ExpressionStatement	iter -> n -> p = iter -> p	139:2:2751:2771	5155451	0	True				
ANR	5155516	AssignmentExpression	iter -> n -> p = iter -> p		5155451	0		=			
ANR	5155517	PtrMemberAccess	iter -> n -> p		5155451	0					
ANR	5155518	PtrMemberAccess	iter -> n		5155451	0					
ANR	5155519	Identifier	iter		5155451	0					
ANR	5155520	Identifier	n		5155451	1					
ANR	5155521	Identifier	p		5155451	1					
ANR	5155522	PtrMemberAccess	iter -> p		5155451	1					
ANR	5155523	Identifier	iter		5155451	0					
ANR	5155524	Identifier	p		5155451	1					
ANR	5155525	ExpressionStatement	list -> length --	141:1:2777:2791	5155451	5	True				
ANR	5155526	PostIncDecOperationExpression	list -> length --		5155451	0					
ANR	5155527	PtrMemberAccess	list -> length		5155451	0					
ANR	5155528	Identifier	list		5155451	0					
ANR	5155529	Identifier	length		5155451	1					
ANR	5155530	IncDec	--		5155451	1					
ANR	5155531	ReturnType	R_API void		5155451	1					
ANR	5155532	Identifier	r_list_split_iter		5155451	2					
ANR	5155533	ParameterList	"RList * list , RListIter * iter"		5155451	3					
ANR	5155534	Parameter	RList * list	126:29:2523:2533	5155451	0	True				
ANR	5155535	ParameterType	RList *		5155451	0					
ANR	5155536	Identifier	list		5155451	1					
ANR	5155537	Parameter	RListIter * iter	126:42:2536:2550	5155451	1	True				
ANR	5155538	ParameterType	RListIter *		5155451	0					
ANR	5155539	Identifier	iter		5155451	1					
ANR	5155540	CFGEntryNode	ENTRY		5155451		True				
ANR	5155541	CFGExitNode	EXIT		5155451		True				
ANR	5155542	Symbol	list -> length		5155451						
ANR	5155543	Symbol	iter		5155451						
ANR	5155544	Symbol	list		5155451						
ANR	5155545	Symbol	iter -> n -> p		5155451						
ANR	5155546	Symbol	list -> head		5155451						
ANR	5155547	Symbol	* iter -> p		5155451						
ANR	5155548	Symbol	* iter		5155451						
ANR	5155549	Symbol	* iter -> n		5155451						
ANR	5155550	Symbol	* list		5155451						
ANR	5155551	Symbol	iter -> n		5155451						
ANR	5155552	Symbol	iter -> p -> n		5155451						
ANR	5155553	Symbol	iter -> p		5155451						
ANR	5155554	Symbol	* * iter		5155451						
ANR	5155555	Symbol	list -> tail		5155451						
ANR	5155556	Function	r_list_join	145:0:2841:3295							
ANR	5155557	FunctionDef	"r_list_join (RList * list1 , RList * list2)"		5155556	0					
ANR	5155558	CompoundStatement		145:50:2891:3295	5155556	0					
ANR	5155559	ExpressionStatement	"r_return_val_if_fail ( list1 && list2 , 0 )"	146:1:2894:2934	5155556	0	True				
ANR	5155560	CallExpression	"r_return_val_if_fail ( list1 && list2 , 0 )"		5155556	0					
ANR	5155561	Callee	r_return_val_if_fail		5155556	0					
ANR	5155562	Identifier	r_return_val_if_fail		5155556	0					
ANR	5155563	ArgumentList	list1 && list2		5155556	1					
ANR	5155564	Argument	list1 && list2		5155556	0					
ANR	5155565	AndExpression	list1 && list2		5155556	0		&&			
ANR	5155566	Identifier	list1		5155556	0					
ANR	5155567	Identifier	list2		5155556	1					
ANR	5155568	Argument	0		5155556	1					
ANR	5155569	PrimaryExpression	0		5155556	0					
ANR	5155570	IfStatement	if ( ! ( list2 -> length ) )		5155556	1					
ANR	5155571	Condition	! ( list2 -> length )	148:5:2942:2957	5155556	0	True				
ANR	5155572	UnaryOperationExpression	! ( list2 -> length )		5155556	0					
ANR	5155573	UnaryOperator	!		5155556	0					
ANR	5155574	PtrMemberAccess	list2 -> length		5155556	1					
ANR	5155575	Identifier	list2		5155556	0					
ANR	5155576	Identifier	length		5155556	1					
ANR	5155577	CompoundStatement		4:23:68:68	5155556	1					
ANR	5155578	ReturnStatement	return 0 ;	149:2:2964:2972	5155556	0	True				
ANR	5155579	PrimaryExpression	0		5155556	0					
ANR	5155580	IfStatement	if ( ! ( list1 -> length ) )		5155556	2					
ANR	5155581	Condition	! ( list1 -> length )	151:5:2982:2997	5155556	0	True				
ANR	5155582	UnaryOperationExpression	! ( list1 -> length )		5155556	0					
ANR	5155583	UnaryOperator	!		5155556	0					
ANR	5155584	PtrMemberAccess	list1 -> length		5155556	1					
ANR	5155585	Identifier	list1		5155556	0					
ANR	5155586	Identifier	length		5155556	1					
ANR	5155587	CompoundStatement		7:23:108:108	5155556	1					
ANR	5155588	ExpressionStatement	list1 -> head = list2 -> head	152:2:3004:3029	5155556	0	True				
ANR	5155589	AssignmentExpression	list1 -> head = list2 -> head		5155556	0		=			
ANR	5155590	PtrMemberAccess	list1 -> head		5155556	0					
ANR	5155591	Identifier	list1		5155556	0					
ANR	5155592	Identifier	head		5155556	1					
ANR	5155593	PtrMemberAccess	list2 -> head		5155556	1					
ANR	5155594	Identifier	list2		5155556	0					
ANR	5155595	Identifier	head		5155556	1					
ANR	5155596	ExpressionStatement	list1 -> tail = list2 -> tail	153:2:3033:3058	5155556	1	True				
ANR	5155597	AssignmentExpression	list1 -> tail = list2 -> tail		5155556	0		=			
ANR	5155598	PtrMemberAccess	list1 -> tail		5155556	0					
ANR	5155599	Identifier	list1		5155556	0					
ANR	5155600	Identifier	tail		5155556	1					
ANR	5155601	PtrMemberAccess	list2 -> tail		5155556	1					
ANR	5155602	Identifier	list2		5155556	0					
ANR	5155603	Identifier	tail		5155556	1					
ANR	5155604	ElseStatement	else		5155556	0					
ANR	5155605	CompoundStatement		10:8:176:176	5155556	0					
ANR	5155606	ExpressionStatement	list1 -> tail -> n = list2 -> head	155:2:3072:3100	5155556	0	True				
ANR	5155607	AssignmentExpression	list1 -> tail -> n = list2 -> head		5155556	0		=			
ANR	5155608	PtrMemberAccess	list1 -> tail -> n		5155556	0					
ANR	5155609	PtrMemberAccess	list1 -> tail		5155556	0					
ANR	5155610	Identifier	list1		5155556	0					
ANR	5155611	Identifier	tail		5155556	1					
ANR	5155612	Identifier	n		5155556	1					
ANR	5155613	PtrMemberAccess	list2 -> head		5155556	1					
ANR	5155614	Identifier	list2		5155556	0					
ANR	5155615	Identifier	head		5155556	1					
ANR	5155616	ExpressionStatement	list2 -> head -> p = list1 -> tail	156:2:3104:3132	5155556	1	True				
ANR	5155617	AssignmentExpression	list2 -> head -> p = list1 -> tail		5155556	0		=			
ANR	5155618	PtrMemberAccess	list2 -> head -> p		5155556	0					
ANR	5155619	PtrMemberAccess	list2 -> head		5155556	0					
ANR	5155620	Identifier	list2		5155556	0					
ANR	5155621	Identifier	head		5155556	1					
ANR	5155622	Identifier	p		5155556	1					
ANR	5155623	PtrMemberAccess	list1 -> tail		5155556	1					
ANR	5155624	Identifier	list1		5155556	0					
ANR	5155625	Identifier	tail		5155556	1					
ANR	5155626	ExpressionStatement	list1 -> tail = list2 -> tail	157:2:3136:3161	5155556	2	True				
ANR	5155627	AssignmentExpression	list1 -> tail = list2 -> tail		5155556	0		=			
ANR	5155628	PtrMemberAccess	list1 -> tail		5155556	0					
ANR	5155629	Identifier	list1		5155556	0					
ANR	5155630	Identifier	tail		5155556	1					
ANR	5155631	PtrMemberAccess	list2 -> tail		5155556	1					
ANR	5155632	Identifier	list2		5155556	0					
ANR	5155633	Identifier	tail		5155556	1					
ANR	5155634	ExpressionStatement	list1 -> tail -> n = NULL	158:2:3165:3186	5155556	3	True				
ANR	5155635	AssignmentExpression	list1 -> tail -> n = NULL		5155556	0		=			
ANR	5155636	PtrMemberAccess	list1 -> tail -> n		5155556	0					
ANR	5155637	PtrMemberAccess	list1 -> tail		5155556	0					
ANR	5155638	Identifier	list1		5155556	0					
ANR	5155639	Identifier	tail		5155556	1					
ANR	5155640	Identifier	n		5155556	1					
ANR	5155641	Identifier	NULL		5155556	1					
ANR	5155642	ExpressionStatement	list1 -> sorted = false	159:2:3190:3211	5155556	4	True				
ANR	5155643	AssignmentExpression	list1 -> sorted = false		5155556	0		=			
ANR	5155644	PtrMemberAccess	list1 -> sorted		5155556	0					
ANR	5155645	Identifier	list1		5155556	0					
ANR	5155646	Identifier	sorted		5155556	1					
ANR	5155647	Identifier	false		5155556	1					
ANR	5155648	ExpressionStatement	list1 -> length += list2 -> length	161:1:3217:3247	5155556	3	True				
ANR	5155649	AssignmentExpression	list1 -> length += list2 -> length		5155556	0		+=			
ANR	5155650	PtrMemberAccess	list1 -> length		5155556	0					
ANR	5155651	Identifier	list1		5155556	0					
ANR	5155652	Identifier	length		5155556	1					
ANR	5155653	PtrMemberAccess	list2 -> length		5155556	1					
ANR	5155654	Identifier	list2		5155556	0					
ANR	5155655	Identifier	length		5155556	1					
ANR	5155656	ExpressionStatement	list2 -> head = list2 -> tail = NULL	162:1:3250:3282	5155556	4	True				
ANR	5155657	AssignmentExpression	list2 -> head = list2 -> tail = NULL		5155556	0		=			
ANR	5155658	PtrMemberAccess	list2 -> head		5155556	0					
ANR	5155659	Identifier	list2		5155556	0					
ANR	5155660	Identifier	head		5155556	1					
ANR	5155661	AssignmentExpression	list2 -> tail = NULL		5155556	1		=			
ANR	5155662	PtrMemberAccess	list2 -> tail		5155556	0					
ANR	5155663	Identifier	list2		5155556	0					
ANR	5155664	Identifier	tail		5155556	1					
ANR	5155665	Identifier	NULL		5155556	1					
ANR	5155666	ReturnStatement	return 1 ;	163:1:3285:3293	5155556	5	True				
ANR	5155667	PrimaryExpression	1		5155556	0					
ANR	5155668	ReturnType	R_API int		5155556	1					
ANR	5155669	Identifier	r_list_join		5155556	2					
ANR	5155670	ParameterList	"RList * list1 , RList * list2"		5155556	3					
ANR	5155671	Parameter	RList * list1	145:22:2863:2874	5155556	0	True				
ANR	5155672	ParameterType	RList *		5155556	0					
ANR	5155673	Identifier	list1		5155556	1					
ANR	5155674	Parameter	RList * list2	145:36:2877:2888	5155556	1	True				
ANR	5155675	ParameterType	RList *		5155556	0					
ANR	5155676	Identifier	list2		5155556	1					
ANR	5155677	CFGEntryNode	ENTRY		5155556		True				
ANR	5155678	CFGExitNode	EXIT		5155556		True				
ANR	5155679	Symbol	list2 -> head		5155556						
ANR	5155680	Symbol	* list1 -> tail		5155556						
ANR	5155681	Symbol	list1 -> sorted		5155556						
ANR	5155682	Symbol	* * list1		5155556						
ANR	5155683	Symbol	NULL		5155556						
ANR	5155684	Symbol	false		5155556						
ANR	5155685	Symbol	list2 -> length		5155556						
ANR	5155686	Symbol	* * list2		5155556						
ANR	5155687	Symbol	list1		5155556						
ANR	5155688	Symbol	list1 -> length		5155556						
ANR	5155689	Symbol	list1 -> tail		5155556						
ANR	5155690	Symbol	* list2 -> head		5155556						
ANR	5155691	Symbol	list2		5155556						
ANR	5155692	Symbol	* list1		5155556						
ANR	5155693	Symbol	* list2		5155556						
ANR	5155694	Symbol	list2 -> tail		5155556						
ANR	5155695	Symbol	list2 -> head -> p		5155556						
ANR	5155696	Symbol	list1 -> head		5155556						
ANR	5155697	Symbol	list1 -> tail -> n		5155556						
ANR	5155698	Function	r_list_new	166:0:3298:3424							
ANR	5155699	FunctionDef	r_list_new ()		5155698	0					
ANR	5155700	CompoundStatement		166:26:3324:3424	5155698	0					
ANR	5155701	IdentifierDeclStatement	RList * list = R_NEW0 ( RList ) ;	167:1:3327:3355	5155698	0	True				
ANR	5155702	IdentifierDecl	* list = R_NEW0 ( RList )		5155698	0					
ANR	5155703	IdentifierDeclType	RList *		5155698	0					
ANR	5155704	Identifier	list		5155698	1					
ANR	5155705	AssignmentExpression	* list = R_NEW0 ( RList )		5155698	2		=			
ANR	5155706	Identifier	list		5155698	0					
ANR	5155707	CallExpression	R_NEW0 ( RList )		5155698	1					
ANR	5155708	Callee	R_NEW0		5155698	0					
ANR	5155709	Identifier	R_NEW0		5155698	0					
ANR	5155710	ArgumentList	RList		5155698	1					
ANR	5155711	Argument	RList		5155698	0					
ANR	5155712	Identifier	RList		5155698	0					
ANR	5155713	IfStatement	if ( ! list )		5155698	1					
ANR	5155714	Condition	! list	168:5:3362:3366	5155698	0	True				
ANR	5155715	UnaryOperationExpression	! list		5155698	0					
ANR	5155716	UnaryOperator	!		5155698	0					
ANR	5155717	Identifier	list		5155698	1					
ANR	5155718	CompoundStatement		3:12:44:44	5155698	1					
ANR	5155719	ReturnStatement	return NULL ;	169:2:3373:3384	5155698	0	True				
ANR	5155720	Identifier	NULL		5155698	0					
ANR	5155721	ExpressionStatement	r_list_init ( list )	171:1:3390:3408	5155698	2	True				
ANR	5155722	CallExpression	r_list_init ( list )		5155698	0					
ANR	5155723	Callee	r_list_init		5155698	0					
ANR	5155724	Identifier	r_list_init		5155698	0					
ANR	5155725	ArgumentList	list		5155698	1					
ANR	5155726	Argument	list		5155698	0					
ANR	5155727	Identifier	list		5155698	0					
ANR	5155728	ReturnStatement	return list ;	172:1:3411:3422	5155698	3	True				
ANR	5155729	Identifier	list		5155698	0					
ANR	5155730	ReturnType	R_API RList *		5155698	1					
ANR	5155731	Identifier	r_list_new		5155698	2					
ANR	5155732	ParameterList			5155698	3					
ANR	5155733	CFGEntryNode	ENTRY		5155698		True				
ANR	5155734	CFGExitNode	EXIT		5155698		True				
ANR	5155735	Symbol	R_NEW0		5155698						
ANR	5155736	Symbol	NULL		5155698						
ANR	5155737	Symbol	RList		5155698						
ANR	5155738	Symbol	list		5155698						
ANR	5155739	Function	r_list_newf	175:0:3427:3533							
ANR	5155740	FunctionDef	r_list_newf (RListFree f)		5155739	0					
ANR	5155741	CompoundStatement		175:38:3465:3533	5155739	0					
ANR	5155742	IdentifierDeclStatement	RList * l = r_list_new ( ) ;	176:1:3468:3492	5155739	0	True				
ANR	5155743	IdentifierDecl	* l = r_list_new ( )		5155739	0					
ANR	5155744	IdentifierDeclType	RList *		5155739	0					
ANR	5155745	Identifier	l		5155739	1					
ANR	5155746	AssignmentExpression	* l = r_list_new ( )		5155739	2		=			
ANR	5155747	Identifier	l		5155739	0					
ANR	5155748	CallExpression	r_list_new ( )		5155739	1					
ANR	5155749	Callee	r_list_new		5155739	0					
ANR	5155750	Identifier	r_list_new		5155739	0					
ANR	5155751	ArgumentList			5155739	1					
ANR	5155752	IfStatement	if ( l )		5155739	1					
ANR	5155753	Condition	l	177:5:3499:3499	5155739	0	True				
ANR	5155754	Identifier	l		5155739	0					
ANR	5155755	CompoundStatement		3:8:36:36	5155739	1					
ANR	5155756	ExpressionStatement	l -> free = f	178:2:3506:3517	5155739	0	True				
ANR	5155757	AssignmentExpression	l -> free = f		5155739	0		=			
ANR	5155758	PtrMemberAccess	l -> free		5155739	0					
ANR	5155759	Identifier	l		5155739	0					
ANR	5155760	Identifier	free		5155739	1					
ANR	5155761	Identifier	f		5155739	1					
ANR	5155762	ReturnStatement	return l ;	180:1:3523:3531	5155739	2	True				
ANR	5155763	Identifier	l		5155739	0					
ANR	5155764	ReturnType	R_API RList *		5155739	1					
ANR	5155765	Identifier	r_list_newf		5155739	2					
ANR	5155766	ParameterList	RListFree f		5155739	3					
ANR	5155767	Parameter	RListFree f	175:25:3452:3462	5155739	0	True				
ANR	5155768	ParameterType	RListFree		5155739	0					
ANR	5155769	Identifier	f		5155739	1					
ANR	5155770	CFGEntryNode	ENTRY		5155739		True				
ANR	5155771	CFGExitNode	EXIT		5155739		True				
ANR	5155772	Symbol	f		5155739						
ANR	5155773	Symbol	* l		5155739						
ANR	5155774	Symbol	l -> free		5155739						
ANR	5155775	Symbol	l		5155739						
ANR	5155776	Symbol	r_list_new		5155739						
ANR	5155777	Function	r_list_item_new	183:0:3536:3673							
ANR	5155778	FunctionDef	r_list_item_new (void * data)		5155777	0					
ANR	5155779	CompoundStatement		183:45:3581:3673	5155777	0					
ANR	5155780	IdentifierDeclStatement	RListIter * item = R_NEW0 ( RListIter ) ;	184:1:3584:3620	5155777	0	True				
ANR	5155781	IdentifierDecl	* item = R_NEW0 ( RListIter )		5155777	0					
ANR	5155782	IdentifierDeclType	RListIter *		5155777	0					
ANR	5155783	Identifier	item		5155777	1					
ANR	5155784	AssignmentExpression	* item = R_NEW0 ( RListIter )		5155777	2		=			
ANR	5155785	Identifier	item		5155777	0					
ANR	5155786	CallExpression	R_NEW0 ( RListIter )		5155777	1					
ANR	5155787	Callee	R_NEW0		5155777	0					
ANR	5155788	Identifier	R_NEW0		5155777	0					
ANR	5155789	ArgumentList	RListIter		5155777	1					
ANR	5155790	Argument	RListIter		5155777	0					
ANR	5155791	Identifier	RListIter		5155777	0					
ANR	5155792	IfStatement	if ( item )		5155777	1					
ANR	5155793	Condition	item	185:5:3627:3630	5155777	0	True				
ANR	5155794	Identifier	item		5155777	0					
ANR	5155795	CompoundStatement		3:11:51:51	5155777	1					
ANR	5155796	ExpressionStatement	item -> data = data	186:2:3637:3654	5155777	0	True				
ANR	5155797	AssignmentExpression	item -> data = data		5155777	0		=			
ANR	5155798	PtrMemberAccess	item -> data		5155777	0					
ANR	5155799	Identifier	item		5155777	0					
ANR	5155800	Identifier	data		5155777	1					
ANR	5155801	Identifier	data		5155777	1					
ANR	5155802	ReturnStatement	return item ;	188:1:3660:3671	5155777	2	True				
ANR	5155803	Identifier	item		5155777	0					
ANR	5155804	ReturnType	R_API RListIter *		5155777	1					
ANR	5155805	Identifier	r_list_item_new		5155777	2					
ANR	5155806	ParameterList	void * data		5155777	3					
ANR	5155807	Parameter	void * data	183:33:3569:3578	5155777	0	True				
ANR	5155808	ParameterType	void *		5155777	0					
ANR	5155809	Identifier	data		5155777	1					
ANR	5155810	CFGEntryNode	ENTRY		5155777		True				
ANR	5155811	CFGExitNode	EXIT		5155777		True				
ANR	5155812	Symbol	R_NEW0		5155777						
ANR	5155813	Symbol	item		5155777						
ANR	5155814	Symbol	data		5155777						
ANR	5155815	Symbol	* item		5155777						
ANR	5155816	Symbol	item -> data		5155777						
ANR	5155817	Symbol	RListIter		5155777						
ANR	5155818	Function	r_list_append	191:0:3676:4088							
ANR	5155819	FunctionDef	"r_list_append (RList * list , void * data)"		5155818	0					
ANR	5155820	CompoundStatement		191:56:3732:4088	5155818	0					
ANR	5155821	IdentifierDeclStatement	RListIter * item = NULL ;	192:1:3735:3757	5155818	0	True				
ANR	5155822	IdentifierDecl	* item = NULL		5155818	0					
ANR	5155823	IdentifierDeclType	RListIter *		5155818	0					
ANR	5155824	Identifier	item		5155818	1					
ANR	5155825	AssignmentExpression	* item = NULL		5155818	2		=			
ANR	5155826	Identifier	NULL		5155818	0					
ANR	5155827	Identifier	NULL		5155818	1					
ANR	5155828	ExpressionStatement	"r_return_val_if_fail ( list && data , NULL )"	194:1:3761:3802	5155818	1	True				
ANR	5155829	CallExpression	"r_return_val_if_fail ( list && data , NULL )"		5155818	0					
ANR	5155830	Callee	r_return_val_if_fail		5155818	0					
ANR	5155831	Identifier	r_return_val_if_fail		5155818	0					
ANR	5155832	ArgumentList	list && data		5155818	1					
ANR	5155833	Argument	list && data		5155818	0					
ANR	5155834	AndExpression	list && data		5155818	0		&&			
ANR	5155835	Identifier	list		5155818	0					
ANR	5155836	Identifier	data		5155818	1					
ANR	5155837	Argument	NULL		5155818	1					
ANR	5155838	Identifier	NULL		5155818	0					
ANR	5155839	ExpressionStatement	item = R_NEW ( RListIter )	196:1:3806:3830	5155818	2	True				
ANR	5155840	AssignmentExpression	item = R_NEW ( RListIter )		5155818	0		=			
ANR	5155841	Identifier	item		5155818	0					
ANR	5155842	CallExpression	R_NEW ( RListIter )		5155818	1					
ANR	5155843	Callee	R_NEW		5155818	0					
ANR	5155844	Identifier	R_NEW		5155818	0					
ANR	5155845	ArgumentList	RListIter		5155818	1					
ANR	5155846	Argument	RListIter		5155818	0					
ANR	5155847	Identifier	RListIter		5155818	0					
ANR	5155848	IfStatement	if ( ! item )		5155818	3					
ANR	5155849	Condition	! item	197:5:3837:3841	5155818	0	True				
ANR	5155850	UnaryOperationExpression	! item		5155818	0					
ANR	5155851	UnaryOperator	!		5155818	0					
ANR	5155852	Identifier	item		5155818	1					
ANR	5155853	CompoundStatement		7:12:111:111	5155818	1					
ANR	5155854	ReturnStatement	return item ;	198:2:3848:3859	5155818	0	True				
ANR	5155855	Identifier	item		5155818	0					
ANR	5155856	IfStatement	if ( list -> tail )		5155818	4					
ANR	5155857	Condition	list -> tail	200:5:3869:3878	5155818	0	True				
ANR	5155858	PtrMemberAccess	list -> tail		5155818	0					
ANR	5155859	Identifier	list		5155818	0					
ANR	5155860	Identifier	tail		5155818	1					
ANR	5155861	CompoundStatement		10:17:148:148	5155818	1					
ANR	5155862	ExpressionStatement	list -> tail -> n = item	201:2:3885:3905	5155818	0	True				
ANR	5155863	AssignmentExpression	list -> tail -> n = item		5155818	0		=			
ANR	5155864	PtrMemberAccess	list -> tail -> n		5155818	0					
ANR	5155865	PtrMemberAccess	list -> tail		5155818	0					
ANR	5155866	Identifier	list		5155818	0					
ANR	5155867	Identifier	tail		5155818	1					
ANR	5155868	Identifier	n		5155818	1					
ANR	5155869	Identifier	item		5155818	1					
ANR	5155870	ExpressionStatement	item -> data = data	203:1:3911:3928	5155818	5	True				
ANR	5155871	AssignmentExpression	item -> data = data		5155818	0		=			
ANR	5155872	PtrMemberAccess	item -> data		5155818	0					
ANR	5155873	Identifier	item		5155818	0					
ANR	5155874	Identifier	data		5155818	1					
ANR	5155875	Identifier	data		5155818	1					
ANR	5155876	ExpressionStatement	item -> p = list -> tail	204:1:3931:3951	5155818	6	True				
ANR	5155877	AssignmentExpression	item -> p = list -> tail		5155818	0		=			
ANR	5155878	PtrMemberAccess	item -> p		5155818	0					
ANR	5155879	Identifier	item		5155818	0					
ANR	5155880	Identifier	p		5155818	1					
ANR	5155881	PtrMemberAccess	list -> tail		5155818	1					
ANR	5155882	Identifier	list		5155818	0					
ANR	5155883	Identifier	tail		5155818	1					
ANR	5155884	ExpressionStatement	item -> n = NULL	205:1:3954:3968	5155818	7	True				
ANR	5155885	AssignmentExpression	item -> n = NULL		5155818	0		=			
ANR	5155886	PtrMemberAccess	item -> n		5155818	0					
ANR	5155887	Identifier	item		5155818	0					
ANR	5155888	Identifier	n		5155818	1					
ANR	5155889	Identifier	NULL		5155818	1					
ANR	5155890	ExpressionStatement	list -> tail = item	206:1:3971:3988	5155818	8	True				
ANR	5155891	AssignmentExpression	list -> tail = item		5155818	0		=			
ANR	5155892	PtrMemberAccess	list -> tail		5155818	0					
ANR	5155893	Identifier	list		5155818	0					
ANR	5155894	Identifier	tail		5155818	1					
ANR	5155895	Identifier	item		5155818	1					
ANR	5155896	IfStatement	if ( ! list -> head )		5155818	9					
ANR	5155897	Condition	! list -> head	207:5:3995:4005	5155818	0	True				
ANR	5155898	UnaryOperationExpression	! list -> head		5155818	0					
ANR	5155899	UnaryOperator	!		5155818	0					
ANR	5155900	PtrMemberAccess	list -> head		5155818	1					
ANR	5155901	Identifier	list		5155818	0					
ANR	5155902	Identifier	head		5155818	1					
ANR	5155903	CompoundStatement		17:18:275:275	5155818	1					
ANR	5155904	ExpressionStatement	list -> head = item	208:2:4012:4029	5155818	0	True				
ANR	5155905	AssignmentExpression	list -> head = item		5155818	0		=			
ANR	5155906	PtrMemberAccess	list -> head		5155818	0					
ANR	5155907	Identifier	list		5155818	0					
ANR	5155908	Identifier	head		5155818	1					
ANR	5155909	Identifier	item		5155818	1					
ANR	5155910	ExpressionStatement	list -> length ++	210:1:4035:4049	5155818	10	True				
ANR	5155911	PostIncDecOperationExpression	list -> length ++		5155818	0					
ANR	5155912	PtrMemberAccess	list -> length		5155818	0					
ANR	5155913	Identifier	list		5155818	0					
ANR	5155914	Identifier	length		5155818	1					
ANR	5155915	IncDec	++		5155818	1					
ANR	5155916	ExpressionStatement	list -> sorted = false	211:1:4052:4072	5155818	11	True				
ANR	5155917	AssignmentExpression	list -> sorted = false		5155818	0		=			
ANR	5155918	PtrMemberAccess	list -> sorted		5155818	0					
ANR	5155919	Identifier	list		5155818	0					
ANR	5155920	Identifier	sorted		5155818	1					
ANR	5155921	Identifier	false		5155818	1					
ANR	5155922	ReturnStatement	return item ;	212:1:4075:4086	5155818	12	True				
ANR	5155923	Identifier	item		5155818	0					
ANR	5155924	ReturnType	R_API RListIter *		5155818	1					
ANR	5155925	Identifier	r_list_append		5155818	2					
ANR	5155926	ParameterList	"RList * list , void * data"		5155818	3					
ANR	5155927	Parameter	RList * list	191:31:3707:3717	5155818	0	True				
ANR	5155928	ParameterType	RList *		5155818	0					
ANR	5155929	Identifier	list		5155818	1					
ANR	5155930	Parameter	void * data	191:44:3720:3729	5155818	1	True				
ANR	5155931	ParameterType	void *		5155818	0					
ANR	5155932	Identifier	data		5155818	1					
ANR	5155933	CFGEntryNode	ENTRY		5155818		True				
ANR	5155934	CFGExitNode	EXIT		5155818		True				
ANR	5155935	Symbol	item		5155818						
ANR	5155936	Symbol	list -> tail -> n		5155818						
ANR	5155937	Symbol	list -> length		5155818						
ANR	5155938	Symbol	NULL		5155818						
ANR	5155939	Symbol	data		5155818						
ANR	5155940	Symbol	false		5155818						
ANR	5155941	Symbol	item -> p		5155818						
ANR	5155942	Symbol	item -> n		5155818						
ANR	5155943	Symbol	list		5155818						
ANR	5155944	Symbol	list -> head		5155818						
ANR	5155945	Symbol	* * list		5155818						
ANR	5155946	Symbol	* list		5155818						
ANR	5155947	Symbol	* list -> tail		5155818						
ANR	5155948	Symbol	* item		5155818						
ANR	5155949	Symbol	list -> sorted		5155818						
ANR	5155950	Symbol	item -> data		5155818						
ANR	5155951	Symbol	R_NEW		5155818						
ANR	5155952	Symbol	RListIter		5155818						
ANR	5155953	Symbol	list -> tail		5155818						
ANR	5155954	Function	r_list_prepend	215:0:4091:4481							
ANR	5155955	FunctionDef	"r_list_prepend (RList * list , void * data)"		5155954	0					
ANR	5155956	CompoundStatement		215:57:4148:4481	5155954	0					
ANR	5155957	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	216:1:4151:4184	5155954	0	True				
ANR	5155958	CallExpression	"r_return_val_if_fail ( list , NULL )"		5155954	0					
ANR	5155959	Callee	r_return_val_if_fail		5155954	0					
ANR	5155960	Identifier	r_return_val_if_fail		5155954	0					
ANR	5155961	ArgumentList	list		5155954	1					
ANR	5155962	Argument	list		5155954	0					
ANR	5155963	Identifier	list		5155954	0					
ANR	5155964	Argument	NULL		5155954	1					
ANR	5155965	Identifier	NULL		5155954	0					
ANR	5155966	IdentifierDeclStatement	RListIter * item = R_NEW0 ( RListIter ) ;	218:1:4188:4224	5155954	1	True				
ANR	5155967	IdentifierDecl	* item = R_NEW0 ( RListIter )		5155954	0					
ANR	5155968	IdentifierDeclType	RListIter *		5155954	0					
ANR	5155969	Identifier	item		5155954	1					
ANR	5155970	AssignmentExpression	* item = R_NEW0 ( RListIter )		5155954	2		=			
ANR	5155971	Identifier	item		5155954	0					
ANR	5155972	CallExpression	R_NEW0 ( RListIter )		5155954	1					
ANR	5155973	Callee	R_NEW0		5155954	0					
ANR	5155974	Identifier	R_NEW0		5155954	0					
ANR	5155975	ArgumentList	RListIter		5155954	1					
ANR	5155976	Argument	RListIter		5155954	0					
ANR	5155977	Identifier	RListIter		5155954	0					
ANR	5155978	IfStatement	if ( ! item )		5155954	2					
ANR	5155979	Condition	! item	219:5:4231:4235	5155954	0	True				
ANR	5155980	UnaryOperationExpression	! item		5155954	0					
ANR	5155981	UnaryOperator	!		5155954	0					
ANR	5155982	Identifier	item		5155954	1					
ANR	5155983	CompoundStatement		5:12:89:89	5155954	1					
ANR	5155984	ReturnStatement	return NULL ;	220:2:4242:4253	5155954	0	True				
ANR	5155985	Identifier	NULL		5155954	0					
ANR	5155986	IfStatement	if ( list -> head )		5155954	3					
ANR	5155987	Condition	list -> head	222:5:4263:4272	5155954	0	True				
ANR	5155988	PtrMemberAccess	list -> head		5155954	0					
ANR	5155989	Identifier	list		5155954	0					
ANR	5155990	Identifier	head		5155954	1					
ANR	5155991	CompoundStatement		8:17:126:126	5155954	1					
ANR	5155992	ExpressionStatement	list -> head -> p = item	223:2:4279:4299	5155954	0	True				
ANR	5155993	AssignmentExpression	list -> head -> p = item		5155954	0		=			
ANR	5155994	PtrMemberAccess	list -> head -> p		5155954	0					
ANR	5155995	PtrMemberAccess	list -> head		5155954	0					
ANR	5155996	Identifier	list		5155954	0					
ANR	5155997	Identifier	head		5155954	1					
ANR	5155998	Identifier	p		5155954	1					
ANR	5155999	Identifier	item		5155954	1					
ANR	5156000	ExpressionStatement	item -> data = data	225:1:4305:4322	5155954	4	True				
ANR	5156001	AssignmentExpression	item -> data = data		5155954	0		=			
ANR	5156002	PtrMemberAccess	item -> data		5155954	0					
ANR	5156003	Identifier	item		5155954	0					
ANR	5156004	Identifier	data		5155954	1					
ANR	5156005	Identifier	data		5155954	1					
ANR	5156006	ExpressionStatement	item -> n = list -> head	226:1:4325:4345	5155954	5	True				
ANR	5156007	AssignmentExpression	item -> n = list -> head		5155954	0		=			
ANR	5156008	PtrMemberAccess	item -> n		5155954	0					
ANR	5156009	Identifier	item		5155954	0					
ANR	5156010	Identifier	n		5155954	1					
ANR	5156011	PtrMemberAccess	list -> head		5155954	1					
ANR	5156012	Identifier	list		5155954	0					
ANR	5156013	Identifier	head		5155954	1					
ANR	5156014	ExpressionStatement	item -> p = NULL	227:1:4348:4362	5155954	6	True				
ANR	5156015	AssignmentExpression	item -> p = NULL		5155954	0		=			
ANR	5156016	PtrMemberAccess	item -> p		5155954	0					
ANR	5156017	Identifier	item		5155954	0					
ANR	5156018	Identifier	p		5155954	1					
ANR	5156019	Identifier	NULL		5155954	1					
ANR	5156020	ExpressionStatement	list -> head = item	228:1:4365:4382	5155954	7	True				
ANR	5156021	AssignmentExpression	list -> head = item		5155954	0		=			
ANR	5156022	PtrMemberAccess	list -> head		5155954	0					
ANR	5156023	Identifier	list		5155954	0					
ANR	5156024	Identifier	head		5155954	1					
ANR	5156025	Identifier	item		5155954	1					
ANR	5156026	IfStatement	if ( ! list -> tail )		5155954	8					
ANR	5156027	Condition	! list -> tail	229:5:4389:4399	5155954	0	True				
ANR	5156028	UnaryOperationExpression	! list -> tail		5155954	0					
ANR	5156029	UnaryOperator	!		5155954	0					
ANR	5156030	PtrMemberAccess	list -> tail		5155954	1					
ANR	5156031	Identifier	list		5155954	0					
ANR	5156032	Identifier	tail		5155954	1					
ANR	5156033	CompoundStatement		15:18:253:253	5155954	1					
ANR	5156034	ExpressionStatement	list -> tail = item	230:2:4406:4423	5155954	0	True				
ANR	5156035	AssignmentExpression	list -> tail = item		5155954	0		=			
ANR	5156036	PtrMemberAccess	list -> tail		5155954	0					
ANR	5156037	Identifier	list		5155954	0					
ANR	5156038	Identifier	tail		5155954	1					
ANR	5156039	Identifier	item		5155954	1					
ANR	5156040	ExpressionStatement	list -> length ++	232:1:4429:4443	5155954	9	True				
ANR	5156041	PostIncDecOperationExpression	list -> length ++		5155954	0					
ANR	5156042	PtrMemberAccess	list -> length		5155954	0					
ANR	5156043	Identifier	list		5155954	0					
ANR	5156044	Identifier	length		5155954	1					
ANR	5156045	IncDec	++		5155954	1					
ANR	5156046	ExpressionStatement	list -> sorted = true	233:1:4446:4465	5155954	10	True				
ANR	5156047	AssignmentExpression	list -> sorted = true		5155954	0		=			
ANR	5156048	PtrMemberAccess	list -> sorted		5155954	0					
ANR	5156049	Identifier	list		5155954	0					
ANR	5156050	Identifier	sorted		5155954	1					
ANR	5156051	Identifier	true		5155954	1					
ANR	5156052	ReturnStatement	return item ;	234:1:4468:4479	5155954	11	True				
ANR	5156053	Identifier	item		5155954	0					
ANR	5156054	ReturnType	R_API RListIter *		5155954	1					
ANR	5156055	Identifier	r_list_prepend		5155954	2					
ANR	5156056	ParameterList	"RList * list , void * data"		5155954	3					
ANR	5156057	Parameter	RList * list	215:32:4123:4133	5155954	0	True				
ANR	5156058	ParameterType	RList *		5155954	0					
ANR	5156059	Identifier	list		5155954	1					
ANR	5156060	Parameter	void * data	215:45:4136:4145	5155954	1	True				
ANR	5156061	ParameterType	void *		5155954	0					
ANR	5156062	Identifier	data		5155954	1					
ANR	5156063	CFGEntryNode	ENTRY		5155954		True				
ANR	5156064	CFGExitNode	EXIT		5155954		True				
ANR	5156065	Symbol	item		5155954						
ANR	5156066	Symbol	* list -> head		5155954						
ANR	5156067	Symbol	list -> length		5155954						
ANR	5156068	Symbol	NULL		5155954						
ANR	5156069	Symbol	list -> head -> p		5155954						
ANR	5156070	Symbol	data		5155954						
ANR	5156071	Symbol	item -> p		5155954						
ANR	5156072	Symbol	item -> n		5155954						
ANR	5156073	Symbol	list		5155954						
ANR	5156074	Symbol	list -> head		5155954						
ANR	5156075	Symbol	R_NEW0		5155954						
ANR	5156076	Symbol	* * list		5155954						
ANR	5156077	Symbol	* list		5155954						
ANR	5156078	Symbol	* item		5155954						
ANR	5156079	Symbol	true		5155954						
ANR	5156080	Symbol	list -> sorted		5155954						
ANR	5156081	Symbol	item -> data		5155954						
ANR	5156082	Symbol	RListIter		5155954						
ANR	5156083	Symbol	list -> tail		5155954						
ANR	5156084	Function	r_list_insert	237:0:4484:5053							
ANR	5156085	FunctionDef	"r_list_insert (RList * list , int n , void * data)"		5156084	0					
ANR	5156086	CompoundStatement		237:63:4547:5053	5156084	0					
ANR	5156087	IdentifierDeclStatement	"RListIter * it , * item ;"	238:1:4550:4570	5156084	0	True				
ANR	5156088	IdentifierDecl	* it		5156084	0					
ANR	5156089	IdentifierDeclType	RListIter *		5156084	0					
ANR	5156090	Identifier	it		5156084	1					
ANR	5156091	IdentifierDecl	* item		5156084	1					
ANR	5156092	IdentifierDeclType	RListIter *		5156084	0					
ANR	5156093	Identifier	item		5156084	1					
ANR	5156094	IdentifierDeclStatement	int i ;	239:1:4573:4578	5156084	1	True				
ANR	5156095	IdentifierDecl	i		5156084	0					
ANR	5156096	IdentifierDeclType	int		5156084	0					
ANR	5156097	Identifier	i		5156084	1					
ANR	5156098	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	241:1:4582:4615	5156084	2	True				
ANR	5156099	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156084	0					
ANR	5156100	Callee	r_return_val_if_fail		5156084	0					
ANR	5156101	Identifier	r_return_val_if_fail		5156084	0					
ANR	5156102	ArgumentList	list		5156084	1					
ANR	5156103	Argument	list		5156084	0					
ANR	5156104	Identifier	list		5156084	0					
ANR	5156105	Argument	NULL		5156084	1					
ANR	5156106	Identifier	NULL		5156084	0					
ANR	5156107	IfStatement	if ( ! list -> head || ! n )		5156084	3					
ANR	5156108	Condition	! list -> head || ! n	243:5:4623:4639	5156084	0	True				
ANR	5156109	OrExpression	! list -> head || ! n		5156084	0		||			
ANR	5156110	UnaryOperationExpression	! list -> head		5156084	0					
ANR	5156111	UnaryOperator	!		5156084	0					
ANR	5156112	PtrMemberAccess	list -> head		5156084	1					
ANR	5156113	Identifier	list		5156084	0					
ANR	5156114	Identifier	head		5156084	1					
ANR	5156115	UnaryOperationExpression	! n		5156084	1					
ANR	5156116	UnaryOperator	!		5156084	0					
ANR	5156117	Identifier	n		5156084	1					
ANR	5156118	CompoundStatement		7:24:94:94	5156084	1					
ANR	5156119	ReturnStatement	"return r_list_prepend ( list , data ) ;"	244:2:4646:4680	5156084	0	True				
ANR	5156120	CallExpression	"r_list_prepend ( list , data )"		5156084	0					
ANR	5156121	Callee	r_list_prepend		5156084	0					
ANR	5156122	Identifier	r_list_prepend		5156084	0					
ANR	5156123	ArgumentList	list		5156084	1					
ANR	5156124	Argument	list		5156084	0					
ANR	5156125	Identifier	list		5156084	0					
ANR	5156126	Argument	data		5156084	1					
ANR	5156127	Identifier	data		5156084	0					
ANR	5156128	ForStatement	"for ( it = list -> head , i = 0 ; it && it -> data ; it = it -> n , i ++ )"		5156084	4					
ANR	5156129	ForInit	"it = list -> head , i = 0 ;"	246:6:4691:4713	5156084	0	True				
ANR	5156130	Expression	"it = list -> head , i = 0"		5156084	0					
ANR	5156131	AssignmentExpression	it = list -> head		5156084	0		=			
ANR	5156132	Identifier	it		5156084	0					
ANR	5156133	PtrMemberAccess	list -> head		5156084	1					
ANR	5156134	Identifier	list		5156084	0					
ANR	5156135	Identifier	head		5156084	1					
ANR	5156136	AssignmentExpression	i = 0		5156084	1		=			
ANR	5156137	Identifier	i		5156084	0					
ANR	5156138	PrimaryExpression	0		5156084	1					
ANR	5156139	Condition	it && it -> data	246:30:4715:4728	5156084	1	True				
ANR	5156140	AndExpression	it && it -> data		5156084	0		&&			
ANR	5156141	Identifier	it		5156084	0					
ANR	5156142	PtrMemberAccess	it -> data		5156084	1					
ANR	5156143	Identifier	it		5156084	0					
ANR	5156144	Identifier	data		5156084	1					
ANR	5156145	Expression	"it = it -> n , i ++"	246:46:4731:4745	5156084	2	True				
ANR	5156146	AssignmentExpression	it = it -> n		5156084	0		=			
ANR	5156147	Identifier	it		5156084	0					
ANR	5156148	PtrMemberAccess	it -> n		5156084	1					
ANR	5156149	Identifier	it		5156084	0					
ANR	5156150	Identifier	n		5156084	1					
ANR	5156151	PostIncDecOperationExpression	i ++		5156084	1					
ANR	5156152	Identifier	i		5156084	0					
ANR	5156153	IncDec	++		5156084	1					
ANR	5156154	CompoundStatement		10:63:200:200	5156084	3					
ANR	5156155	IfStatement	if ( i == n )		5156084	0					
ANR	5156156	Condition	i == n	247:6:4756:4761	5156084	0	True				
ANR	5156157	EqualityExpression	i == n		5156084	0		==			
ANR	5156158	Identifier	i		5156084	0					
ANR	5156159	Identifier	n		5156084	1					
ANR	5156160	CompoundStatement		11:14:216:216	5156084	1					
ANR	5156161	ExpressionStatement	item = R_NEW ( RListIter )	248:3:4769:4793	5156084	0	True				
ANR	5156162	AssignmentExpression	item = R_NEW ( RListIter )		5156084	0		=			
ANR	5156163	Identifier	item		5156084	0					
ANR	5156164	CallExpression	R_NEW ( RListIter )		5156084	1					
ANR	5156165	Callee	R_NEW		5156084	0					
ANR	5156166	Identifier	R_NEW		5156084	0					
ANR	5156167	ArgumentList	RListIter		5156084	1					
ANR	5156168	Argument	RListIter		5156084	0					
ANR	5156169	Identifier	RListIter		5156084	0					
ANR	5156170	IfStatement	if ( ! item )		5156084	1					
ANR	5156171	Condition	! item	249:7:4802:4806	5156084	0	True				
ANR	5156172	UnaryOperationExpression	! item		5156084	0					
ANR	5156173	UnaryOperator	!		5156084	0					
ANR	5156174	Identifier	item		5156084	1					
ANR	5156175	CompoundStatement		13:14:261:261	5156084	1					
ANR	5156176	ReturnStatement	return NULL ;	250:4:4815:4826	5156084	0	True				
ANR	5156177	Identifier	NULL		5156084	0					
ANR	5156178	ExpressionStatement	item -> data = data	252:3:4836:4853	5156084	2	True				
ANR	5156179	AssignmentExpression	item -> data = data		5156084	0		=			
ANR	5156180	PtrMemberAccess	item -> data		5156084	0					
ANR	5156181	Identifier	item		5156084	0					
ANR	5156182	Identifier	data		5156084	1					
ANR	5156183	Identifier	data		5156084	1					
ANR	5156184	ExpressionStatement	item -> n = it	253:3:4858:4870	5156084	3	True				
ANR	5156185	AssignmentExpression	item -> n = it		5156084	0		=			
ANR	5156186	PtrMemberAccess	item -> n		5156084	0					
ANR	5156187	Identifier	item		5156084	0					
ANR	5156188	Identifier	n		5156084	1					
ANR	5156189	Identifier	it		5156084	1					
ANR	5156190	ExpressionStatement	item -> p = it -> p	254:3:4875:4890	5156084	4	True				
ANR	5156191	AssignmentExpression	item -> p = it -> p		5156084	0		=			
ANR	5156192	PtrMemberAccess	item -> p		5156084	0					
ANR	5156193	Identifier	item		5156084	0					
ANR	5156194	Identifier	p		5156084	1					
ANR	5156195	PtrMemberAccess	it -> p		5156084	1					
ANR	5156196	Identifier	it		5156084	0					
ANR	5156197	Identifier	p		5156084	1					
ANR	5156198	IfStatement	if ( it -> p )		5156084	5					
ANR	5156199	Condition	it -> p	255:7:4899:4903	5156084	0	True				
ANR	5156200	PtrMemberAccess	it -> p		5156084	0					
ANR	5156201	Identifier	it		5156084	0					
ANR	5156202	Identifier	p		5156084	1					
ANR	5156203	CompoundStatement		19:14:358:358	5156084	1					
ANR	5156204	ExpressionStatement	it -> p -> n = item	256:4:4912:4927	5156084	0	True				
ANR	5156205	AssignmentExpression	it -> p -> n = item		5156084	0		=			
ANR	5156206	PtrMemberAccess	it -> p -> n		5156084	0					
ANR	5156207	PtrMemberAccess	it -> p		5156084	0					
ANR	5156208	Identifier	it		5156084	0					
ANR	5156209	Identifier	p		5156084	1					
ANR	5156210	Identifier	n		5156084	1					
ANR	5156211	Identifier	item		5156084	1					
ANR	5156212	ExpressionStatement	it -> p = item	258:3:4937:4949	5156084	6	True				
ANR	5156213	AssignmentExpression	it -> p = item		5156084	0		=			
ANR	5156214	PtrMemberAccess	it -> p		5156084	0					
ANR	5156215	Identifier	it		5156084	0					
ANR	5156216	Identifier	p		5156084	1					
ANR	5156217	Identifier	item		5156084	1					
ANR	5156218	ExpressionStatement	list -> length ++	259:3:4954:4968	5156084	7	True				
ANR	5156219	PostIncDecOperationExpression	list -> length ++		5156084	0					
ANR	5156220	PtrMemberAccess	list -> length		5156084	0					
ANR	5156221	Identifier	list		5156084	0					
ANR	5156222	Identifier	length		5156084	1					
ANR	5156223	IncDec	++		5156084	1					
ANR	5156224	ExpressionStatement	list -> sorted = true	260:3:4973:4992	5156084	8	True				
ANR	5156225	AssignmentExpression	list -> sorted = true		5156084	0		=			
ANR	5156226	PtrMemberAccess	list -> sorted		5156084	0					
ANR	5156227	Identifier	list		5156084	0					
ANR	5156228	Identifier	sorted		5156084	1					
ANR	5156229	Identifier	true		5156084	1					
ANR	5156230	ReturnStatement	return item ;	261:3:4997:5008	5156084	9	True				
ANR	5156231	Identifier	item		5156084	0					
ANR	5156232	ReturnStatement	"return r_list_append ( list , data ) ;"	264:1:5018:5051	5156084	5	True				
ANR	5156233	CallExpression	"r_list_append ( list , data )"		5156084	0					
ANR	5156234	Callee	r_list_append		5156084	0					
ANR	5156235	Identifier	r_list_append		5156084	0					
ANR	5156236	ArgumentList	list		5156084	1					
ANR	5156237	Argument	list		5156084	0					
ANR	5156238	Identifier	list		5156084	0					
ANR	5156239	Argument	data		5156084	1					
ANR	5156240	Identifier	data		5156084	0					
ANR	5156241	ReturnType	R_API RListIter *		5156084	1					
ANR	5156242	Identifier	r_list_insert		5156084	2					
ANR	5156243	ParameterList	"RList * list , int n , void * data"		5156084	3					
ANR	5156244	Parameter	RList * list	237:31:4515:4525	5156084	0	True				
ANR	5156245	ParameterType	RList *		5156084	0					
ANR	5156246	Identifier	list		5156084	1					
ANR	5156247	Parameter	int n	237:44:4528:4532	5156084	1	True				
ANR	5156248	ParameterType	int		5156084	0					
ANR	5156249	Identifier	n		5156084	1					
ANR	5156250	Parameter	void * data	237:51:4535:4544	5156084	2	True				
ANR	5156251	ParameterType	void *		5156084	0					
ANR	5156252	Identifier	data		5156084	1					
ANR	5156253	CFGEntryNode	ENTRY		5156084		True				
ANR	5156254	CFGExitNode	EXIT		5156084		True				
ANR	5156255	Symbol	data		5156084						
ANR	5156256	Symbol	* * it		5156084						
ANR	5156257	Symbol	* item		5156084						
ANR	5156258	Symbol	list -> sorted		5156084						
ANR	5156259	Symbol	item -> data		5156084						
ANR	5156260	Symbol	item		5156084						
ANR	5156261	Symbol	r_list_prepend		5156084						
ANR	5156262	Symbol	list -> length		5156084						
ANR	5156263	Symbol	NULL		5156084						
ANR	5156264	Symbol	i		5156084						
ANR	5156265	Symbol	item -> p		5156084						
ANR	5156266	Symbol	it		5156084						
ANR	5156267	Symbol	item -> n		5156084						
ANR	5156268	Symbol	list		5156084						
ANR	5156269	Symbol	it -> n		5156084						
ANR	5156270	Symbol	n		5156084						
ANR	5156271	Symbol	it -> p		5156084						
ANR	5156272	Symbol	list -> head		5156084						
ANR	5156273	Symbol	* it		5156084						
ANR	5156274	Symbol	it -> p -> n		5156084						
ANR	5156275	Symbol	* list		5156084						
ANR	5156276	Symbol	r_list_append		5156084						
ANR	5156277	Symbol	* it -> p		5156084						
ANR	5156278	Symbol	true		5156084						
ANR	5156279	Symbol	it -> data		5156084						
ANR	5156280	Symbol	R_NEW		5156084						
ANR	5156281	Symbol	RListIter		5156084						
ANR	5156282	Function	r_list_pop	267:0:5056:5414							
ANR	5156283	FunctionDef	r_list_pop (RList * list)		5156282	0					
ANR	5156284	CompoundStatement		267:36:5092:5414	5156282	0					
ANR	5156285	IdentifierDeclStatement	void * data = NULL ;	268:1:5095:5112	5156282	0	True				
ANR	5156286	IdentifierDecl	* data = NULL		5156282	0					
ANR	5156287	IdentifierDeclType	void *		5156282	0					
ANR	5156288	Identifier	data		5156282	1					
ANR	5156289	AssignmentExpression	* data = NULL		5156282	2		=			
ANR	5156290	Identifier	NULL		5156282	0					
ANR	5156291	Identifier	NULL		5156282	1					
ANR	5156292	IdentifierDeclStatement	RListIter * iter ;	269:1:5115:5130	5156282	1	True				
ANR	5156293	IdentifierDecl	* iter		5156282	0					
ANR	5156294	IdentifierDeclType	RListIter *		5156282	0					
ANR	5156295	Identifier	iter		5156282	1					
ANR	5156296	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	271:1:5134:5167	5156282	2	True				
ANR	5156297	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156282	0					
ANR	5156298	Callee	r_return_val_if_fail		5156282	0					
ANR	5156299	Identifier	r_return_val_if_fail		5156282	0					
ANR	5156300	ArgumentList	list		5156282	1					
ANR	5156301	Argument	list		5156282	0					
ANR	5156302	Identifier	list		5156282	0					
ANR	5156303	Argument	NULL		5156282	1					
ANR	5156304	Identifier	NULL		5156282	0					
ANR	5156305	IfStatement	if ( list -> tail )		5156282	3					
ANR	5156306	Condition	list -> tail	273:5:5175:5184	5156282	0	True				
ANR	5156307	PtrMemberAccess	list -> tail		5156282	0					
ANR	5156308	Identifier	list		5156282	0					
ANR	5156309	Identifier	tail		5156282	1					
ANR	5156310	CompoundStatement		7:17:94:94	5156282	1					
ANR	5156311	ExpressionStatement	iter = list -> tail	274:2:5191:5208	5156282	0	True				
ANR	5156312	AssignmentExpression	iter = list -> tail		5156282	0		=			
ANR	5156313	Identifier	iter		5156282	0					
ANR	5156314	PtrMemberAccess	list -> tail		5156282	1					
ANR	5156315	Identifier	list		5156282	0					
ANR	5156316	Identifier	tail		5156282	1					
ANR	5156317	IfStatement	if ( list -> head == list -> tail )		5156282	1					
ANR	5156318	Condition	list -> head == list -> tail	275:6:5216:5239	5156282	0	True				
ANR	5156319	EqualityExpression	list -> head == list -> tail		5156282	0		==			
ANR	5156320	PtrMemberAccess	list -> head		5156282	0					
ANR	5156321	Identifier	list		5156282	0					
ANR	5156322	Identifier	head		5156282	1					
ANR	5156323	PtrMemberAccess	list -> tail		5156282	1					
ANR	5156324	Identifier	list		5156282	0					
ANR	5156325	Identifier	tail		5156282	1					
ANR	5156326	CompoundStatement		9:32:149:149	5156282	1					
ANR	5156327	ExpressionStatement	list -> head = list -> tail = NULL	276:3:5247:5277	5156282	0	True				
ANR	5156328	AssignmentExpression	list -> head = list -> tail = NULL		5156282	0		=			
ANR	5156329	PtrMemberAccess	list -> head		5156282	0					
ANR	5156330	Identifier	list		5156282	0					
ANR	5156331	Identifier	head		5156282	1					
ANR	5156332	AssignmentExpression	list -> tail = NULL		5156282	1		=			
ANR	5156333	PtrMemberAccess	list -> tail		5156282	0					
ANR	5156334	Identifier	list		5156282	0					
ANR	5156335	Identifier	tail		5156282	1					
ANR	5156336	Identifier	NULL		5156282	1					
ANR	5156337	ElseStatement	else		5156282	0					
ANR	5156338	CompoundStatement		11:9:195:195	5156282	0					
ANR	5156339	ExpressionStatement	list -> tail = iter -> p	278:3:5293:5313	5156282	0	True				
ANR	5156340	AssignmentExpression	list -> tail = iter -> p		5156282	0		=			
ANR	5156341	PtrMemberAccess	list -> tail		5156282	0					
ANR	5156342	Identifier	list		5156282	0					
ANR	5156343	Identifier	tail		5156282	1					
ANR	5156344	PtrMemberAccess	iter -> p		5156282	1					
ANR	5156345	Identifier	iter		5156282	0					
ANR	5156346	Identifier	p		5156282	1					
ANR	5156347	ExpressionStatement	list -> tail -> n = NULL	279:3:5318:5338	5156282	1	True				
ANR	5156348	AssignmentExpression	list -> tail -> n = NULL		5156282	0		=			
ANR	5156349	PtrMemberAccess	list -> tail -> n		5156282	0					
ANR	5156350	PtrMemberAccess	list -> tail		5156282	0					
ANR	5156351	Identifier	list		5156282	0					
ANR	5156352	Identifier	tail		5156282	1					
ANR	5156353	Identifier	n		5156282	1					
ANR	5156354	Identifier	NULL		5156282	1					
ANR	5156355	ExpressionStatement	data = iter -> data	281:2:5346:5363	5156282	2	True				
ANR	5156356	AssignmentExpression	data = iter -> data		5156282	0		=			
ANR	5156357	Identifier	data		5156282	0					
ANR	5156358	PtrMemberAccess	iter -> data		5156282	1					
ANR	5156359	Identifier	iter		5156282	0					
ANR	5156360	Identifier	data		5156282	1					
ANR	5156361	ExpressionStatement	free ( iter )	282:2:5367:5378	5156282	3	True				
ANR	5156362	CallExpression	free ( iter )		5156282	0					
ANR	5156363	Callee	free		5156282	0					
ANR	5156364	Identifier	free		5156282	0					
ANR	5156365	ArgumentList	iter		5156282	1					
ANR	5156366	Argument	iter		5156282	0					
ANR	5156367	Identifier	iter		5156282	0					
ANR	5156368	ExpressionStatement	list -> length --	284:1:5384:5398	5156282	4	True				
ANR	5156369	PostIncDecOperationExpression	list -> length --		5156282	0					
ANR	5156370	PtrMemberAccess	list -> length		5156282	0					
ANR	5156371	Identifier	list		5156282	0					
ANR	5156372	Identifier	length		5156282	1					
ANR	5156373	IncDec	--		5156282	1					
ANR	5156374	ReturnStatement	return data ;	285:1:5401:5412	5156282	5	True				
ANR	5156375	Identifier	data		5156282	0					
ANR	5156376	ReturnType	R_API void *		5156282	1					
ANR	5156377	Identifier	r_list_pop		5156282	2					
ANR	5156378	ParameterList	RList * list		5156282	3					
ANR	5156379	Parameter	RList * list	267:23:5079:5089	5156282	0	True				
ANR	5156380	ParameterType	RList *		5156282	0					
ANR	5156381	Identifier	list		5156282	1					
ANR	5156382	CFGEntryNode	ENTRY		5156282		True				
ANR	5156383	CFGExitNode	EXIT		5156282		True				
ANR	5156384	Symbol	list -> tail -> n		5156282						
ANR	5156385	Symbol	list -> length		5156282						
ANR	5156386	Symbol	NULL		5156282						
ANR	5156387	Symbol	data		5156282						
ANR	5156388	Symbol	iter		5156282						
ANR	5156389	Symbol	list		5156282						
ANR	5156390	Symbol	list -> head		5156282						
ANR	5156391	Symbol	* iter		5156282						
ANR	5156392	Symbol	* * list		5156282						
ANR	5156393	Symbol	* list		5156282						
ANR	5156394	Symbol	* list -> tail		5156282						
ANR	5156395	Symbol	iter -> p		5156282						
ANR	5156396	Symbol	iter -> data		5156282						
ANR	5156397	Symbol	list -> tail		5156282						
ANR	5156398	Function	r_list_pop_head	288:0:5417:5773							
ANR	5156399	FunctionDef	r_list_pop_head (RList * list)		5156398	0					
ANR	5156400	CompoundStatement		288:41:5458:5773	5156398	0					
ANR	5156401	IdentifierDeclStatement	void * data = NULL ;	289:1:5461:5478	5156398	0	True				
ANR	5156402	IdentifierDecl	* data = NULL		5156398	0					
ANR	5156403	IdentifierDeclType	void *		5156398	0					
ANR	5156404	Identifier	data		5156398	1					
ANR	5156405	AssignmentExpression	* data = NULL		5156398	2		=			
ANR	5156406	Identifier	NULL		5156398	0					
ANR	5156407	Identifier	NULL		5156398	1					
ANR	5156408	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	291:1:5482:5515	5156398	1	True				
ANR	5156409	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156398	0					
ANR	5156410	Callee	r_return_val_if_fail		5156398	0					
ANR	5156411	Identifier	r_return_val_if_fail		5156398	0					
ANR	5156412	ArgumentList	list		5156398	1					
ANR	5156413	Argument	list		5156398	0					
ANR	5156414	Identifier	list		5156398	0					
ANR	5156415	Argument	NULL		5156398	1					
ANR	5156416	Identifier	NULL		5156398	0					
ANR	5156417	IfStatement	if ( list -> head )		5156398	2					
ANR	5156418	Condition	list -> head	293:5:5523:5532	5156398	0	True				
ANR	5156419	PtrMemberAccess	list -> head		5156398	0					
ANR	5156420	Identifier	list		5156398	0					
ANR	5156421	Identifier	head		5156398	1					
ANR	5156422	CompoundStatement		7:2:80:108	5156398	1					
ANR	5156423	IdentifierDeclStatement	RListIter * iter = list -> head ;	294:2:5539:5567	5156398	0	True				
ANR	5156424	IdentifierDecl	* iter = list -> head		5156398	0					
ANR	5156425	IdentifierDeclType	RListIter *		5156398	0					
ANR	5156426	Identifier	iter		5156398	1					
ANR	5156427	AssignmentExpression	* iter = list -> head		5156398	2		=			
ANR	5156428	Identifier	iter		5156398	0					
ANR	5156429	PtrMemberAccess	list -> head		5156398	1					
ANR	5156430	Identifier	list		5156398	0					
ANR	5156431	Identifier	head		5156398	1					
ANR	5156432	IfStatement	if ( list -> head == list -> tail )		5156398	1					
ANR	5156433	Condition	list -> head == list -> tail	295:6:5575:5598	5156398	0	True				
ANR	5156434	EqualityExpression	list -> head == list -> tail		5156398	0		==			
ANR	5156435	PtrMemberAccess	list -> head		5156398	0					
ANR	5156436	Identifier	list		5156398	0					
ANR	5156437	Identifier	head		5156398	1					
ANR	5156438	PtrMemberAccess	list -> tail		5156398	1					
ANR	5156439	Identifier	list		5156398	0					
ANR	5156440	Identifier	tail		5156398	1					
ANR	5156441	CompoundStatement		8:32:142:142	5156398	1					
ANR	5156442	ExpressionStatement	list -> head = list -> tail = NULL	296:3:5606:5636	5156398	0	True				
ANR	5156443	AssignmentExpression	list -> head = list -> tail = NULL		5156398	0		=			
ANR	5156444	PtrMemberAccess	list -> head		5156398	0					
ANR	5156445	Identifier	list		5156398	0					
ANR	5156446	Identifier	head		5156398	1					
ANR	5156447	AssignmentExpression	list -> tail = NULL		5156398	1		=			
ANR	5156448	PtrMemberAccess	list -> tail		5156398	0					
ANR	5156449	Identifier	list		5156398	0					
ANR	5156450	Identifier	tail		5156398	1					
ANR	5156451	Identifier	NULL		5156398	1					
ANR	5156452	ElseStatement	else		5156398	0					
ANR	5156453	CompoundStatement		10:9:188:188	5156398	0					
ANR	5156454	ExpressionStatement	list -> head = iter -> n	298:3:5652:5672	5156398	0	True				
ANR	5156455	AssignmentExpression	list -> head = iter -> n		5156398	0		=			
ANR	5156456	PtrMemberAccess	list -> head		5156398	0					
ANR	5156457	Identifier	list		5156398	0					
ANR	5156458	Identifier	head		5156398	1					
ANR	5156459	PtrMemberAccess	iter -> n		5156398	1					
ANR	5156460	Identifier	iter		5156398	0					
ANR	5156461	Identifier	n		5156398	1					
ANR	5156462	ExpressionStatement	list -> head -> p = NULL	299:3:5677:5697	5156398	1	True				
ANR	5156463	AssignmentExpression	list -> head -> p = NULL		5156398	0		=			
ANR	5156464	PtrMemberAccess	list -> head -> p		5156398	0					
ANR	5156465	PtrMemberAccess	list -> head		5156398	0					
ANR	5156466	Identifier	list		5156398	0					
ANR	5156467	Identifier	head		5156398	1					
ANR	5156468	Identifier	p		5156398	1					
ANR	5156469	Identifier	NULL		5156398	1					
ANR	5156470	ExpressionStatement	data = iter -> data	301:2:5705:5722	5156398	2	True				
ANR	5156471	AssignmentExpression	data = iter -> data		5156398	0		=			
ANR	5156472	Identifier	data		5156398	0					
ANR	5156473	PtrMemberAccess	iter -> data		5156398	1					
ANR	5156474	Identifier	iter		5156398	0					
ANR	5156475	Identifier	data		5156398	1					
ANR	5156476	ExpressionStatement	free ( iter )	302:2:5726:5737	5156398	3	True				
ANR	5156477	CallExpression	free ( iter )		5156398	0					
ANR	5156478	Callee	free		5156398	0					
ANR	5156479	Identifier	free		5156398	0					
ANR	5156480	ArgumentList	iter		5156398	1					
ANR	5156481	Argument	iter		5156398	0					
ANR	5156482	Identifier	iter		5156398	0					
ANR	5156483	ExpressionStatement	list -> length --	304:1:5743:5757	5156398	3	True				
ANR	5156484	PostIncDecOperationExpression	list -> length --		5156398	0					
ANR	5156485	PtrMemberAccess	list -> length		5156398	0					
ANR	5156486	Identifier	list		5156398	0					
ANR	5156487	Identifier	length		5156398	1					
ANR	5156488	IncDec	--		5156398	1					
ANR	5156489	ReturnStatement	return data ;	305:1:5760:5771	5156398	4	True				
ANR	5156490	Identifier	data		5156398	0					
ANR	5156491	ReturnType	R_API void *		5156398	1					
ANR	5156492	Identifier	r_list_pop_head		5156398	2					
ANR	5156493	ParameterList	RList * list		5156398	3					
ANR	5156494	Parameter	RList * list	288:28:5445:5455	5156398	0	True				
ANR	5156495	ParameterType	RList *		5156398	0					
ANR	5156496	Identifier	list		5156398	1					
ANR	5156497	CFGEntryNode	ENTRY		5156398		True				
ANR	5156498	CFGExitNode	EXIT		5156398		True				
ANR	5156499	Symbol	* list -> head		5156398						
ANR	5156500	Symbol	list -> length		5156398						
ANR	5156501	Symbol	NULL		5156398						
ANR	5156502	Symbol	list -> head -> p		5156398						
ANR	5156503	Symbol	data		5156398						
ANR	5156504	Symbol	iter		5156398						
ANR	5156505	Symbol	list		5156398						
ANR	5156506	Symbol	list -> head		5156398						
ANR	5156507	Symbol	* iter		5156398						
ANR	5156508	Symbol	* * list		5156398						
ANR	5156509	Symbol	* list		5156398						
ANR	5156510	Symbol	iter -> n		5156398						
ANR	5156511	Symbol	iter -> data		5156398						
ANR	5156512	Symbol	list -> tail		5156398						
ANR	5156513	Function	r_list_del_n	308:0:5776:6298							
ANR	5156514	FunctionDef	"r_list_del_n (RList * list , int n)"		5156513	0					
ANR	5156515	CompoundStatement		308:43:5819:6298	5156513	0					
ANR	5156516	IdentifierDeclStatement	RListIter * it ;	309:1:5822:5835	5156513	0	True				
ANR	5156517	IdentifierDecl	* it		5156513	0					
ANR	5156518	IdentifierDeclType	RListIter *		5156513	0					
ANR	5156519	Identifier	it		5156513	1					
ANR	5156520	IdentifierDeclStatement	int i ;	310:1:5838:5843	5156513	1	True				
ANR	5156521	IdentifierDecl	i		5156513	0					
ANR	5156522	IdentifierDeclType	int		5156513	0					
ANR	5156523	Identifier	i		5156513	1					
ANR	5156524	ExpressionStatement	"r_return_val_if_fail ( list , false )"	312:1:5847:5881	5156513	2	True				
ANR	5156525	CallExpression	"r_return_val_if_fail ( list , false )"		5156513	0					
ANR	5156526	Callee	r_return_val_if_fail		5156513	0					
ANR	5156527	Identifier	r_return_val_if_fail		5156513	0					
ANR	5156528	ArgumentList	list		5156513	1					
ANR	5156529	Argument	list		5156513	0					
ANR	5156530	Identifier	list		5156513	0					
ANR	5156531	Argument	false		5156513	1					
ANR	5156532	Identifier	false		5156513	0					
ANR	5156533	ForStatement	"for ( it = list -> head , i = 0 ; it && it -> data ; it = it -> n , i ++ )"		5156513	3					
ANR	5156534	ForInit	"it = list -> head , i = 0 ;"	314:6:5890:5912	5156513	0	True				
ANR	5156535	Expression	"it = list -> head , i = 0"		5156513	0					
ANR	5156536	AssignmentExpression	it = list -> head		5156513	0		=			
ANR	5156537	Identifier	it		5156513	0					
ANR	5156538	PtrMemberAccess	list -> head		5156513	1					
ANR	5156539	Identifier	list		5156513	0					
ANR	5156540	Identifier	head		5156513	1					
ANR	5156541	AssignmentExpression	i = 0		5156513	1		=			
ANR	5156542	Identifier	i		5156513	0					
ANR	5156543	PrimaryExpression	0		5156513	1					
ANR	5156544	Condition	it && it -> data	314:30:5914:5927	5156513	1	True				
ANR	5156545	AndExpression	it && it -> data		5156513	0		&&			
ANR	5156546	Identifier	it		5156513	0					
ANR	5156547	PtrMemberAccess	it -> data		5156513	1					
ANR	5156548	Identifier	it		5156513	0					
ANR	5156549	Identifier	data		5156513	1					
ANR	5156550	Expression	"it = it -> n , i ++"	314:46:5930:5944	5156513	2	True				
ANR	5156551	AssignmentExpression	it = it -> n		5156513	0		=			
ANR	5156552	Identifier	it		5156513	0					
ANR	5156553	PtrMemberAccess	it -> n		5156513	1					
ANR	5156554	Identifier	it		5156513	0					
ANR	5156555	Identifier	n		5156513	1					
ANR	5156556	PostIncDecOperationExpression	i ++		5156513	1					
ANR	5156557	Identifier	i		5156513	0					
ANR	5156558	IncDec	++		5156513	1					
ANR	5156559	CompoundStatement		7:63:127:127	5156513	3					
ANR	5156560	IfStatement	if ( i == n )		5156513	0					
ANR	5156561	Condition	i == n	315:6:5955:5960	5156513	0	True				
ANR	5156562	EqualityExpression	i == n		5156513	0		==			
ANR	5156563	Identifier	i		5156513	0					
ANR	5156564	Identifier	n		5156513	1					
ANR	5156565	CompoundStatement		8:14:143:143	5156513	1					
ANR	5156566	IfStatement	if ( ! it -> p && ! it -> n )		5156513	0					
ANR	5156567	Condition	! it -> p && ! it -> n	316:7:5972:5987	5156513	0	True				
ANR	5156568	AndExpression	! it -> p && ! it -> n		5156513	0		&&			
ANR	5156569	UnaryOperationExpression	! it -> p		5156513	0					
ANR	5156570	UnaryOperator	!		5156513	0					
ANR	5156571	PtrMemberAccess	it -> p		5156513	1					
ANR	5156572	Identifier	it		5156513	0					
ANR	5156573	Identifier	p		5156513	1					
ANR	5156574	UnaryOperationExpression	! it -> n		5156513	1					
ANR	5156575	UnaryOperator	!		5156513	0					
ANR	5156576	PtrMemberAccess	it -> n		5156513	1					
ANR	5156577	Identifier	it		5156513	0					
ANR	5156578	Identifier	n		5156513	1					
ANR	5156579	CompoundStatement		9:25:170:170	5156513	1					
ANR	5156580	ExpressionStatement	list -> head = list -> tail = NULL	317:4:5996:6026	5156513	0	True				
ANR	5156581	AssignmentExpression	list -> head = list -> tail = NULL		5156513	0		=			
ANR	5156582	PtrMemberAccess	list -> head		5156513	0					
ANR	5156583	Identifier	list		5156513	0					
ANR	5156584	Identifier	head		5156513	1					
ANR	5156585	AssignmentExpression	list -> tail = NULL		5156513	1		=			
ANR	5156586	PtrMemberAccess	list -> tail		5156513	0					
ANR	5156587	Identifier	list		5156513	0					
ANR	5156588	Identifier	tail		5156513	1					
ANR	5156589	Identifier	NULL		5156513	1					
ANR	5156590	ElseStatement	else		5156513	0					
ANR	5156591	IfStatement	if ( ! it -> p )		5156513	0					
ANR	5156592	Condition	! it -> p	318:14:6042:6047	5156513	0	True				
ANR	5156593	UnaryOperationExpression	! it -> p		5156513	0					
ANR	5156594	UnaryOperator	!		5156513	0					
ANR	5156595	PtrMemberAccess	it -> p		5156513	1					
ANR	5156596	Identifier	it		5156513	0					
ANR	5156597	Identifier	p		5156513	1					
ANR	5156598	CompoundStatement		11:22:230:230	5156513	1					
ANR	5156599	ExpressionStatement	it -> n -> p = NULL	319:4:6056:6071	5156513	0	True				
ANR	5156600	AssignmentExpression	it -> n -> p = NULL		5156513	0		=			
ANR	5156601	PtrMemberAccess	it -> n -> p		5156513	0					
ANR	5156602	PtrMemberAccess	it -> n		5156513	0					
ANR	5156603	Identifier	it		5156513	0					
ANR	5156604	Identifier	n		5156513	1					
ANR	5156605	Identifier	p		5156513	1					
ANR	5156606	Identifier	NULL		5156513	1					
ANR	5156607	ExpressionStatement	list -> head = it -> n	320:4:6077:6095	5156513	1	True				
ANR	5156608	AssignmentExpression	list -> head = it -> n		5156513	0		=			
ANR	5156609	PtrMemberAccess	list -> head		5156513	0					
ANR	5156610	Identifier	list		5156513	0					
ANR	5156611	Identifier	head		5156513	1					
ANR	5156612	PtrMemberAccess	it -> n		5156513	1					
ANR	5156613	Identifier	it		5156513	0					
ANR	5156614	Identifier	n		5156513	1					
ANR	5156615	ElseStatement	else		5156513	0					
ANR	5156616	IfStatement	if ( ! it -> n )		5156513	0					
ANR	5156617	Condition	! it -> n	321:14:6111:6116	5156513	0	True				
ANR	5156618	UnaryOperationExpression	! it -> n		5156513	0					
ANR	5156619	UnaryOperator	!		5156513	0					
ANR	5156620	PtrMemberAccess	it -> n		5156513	1					
ANR	5156621	Identifier	it		5156513	0					
ANR	5156622	Identifier	n		5156513	1					
ANR	5156623	CompoundStatement		14:22:299:299	5156513	1					
ANR	5156624	ExpressionStatement	it -> p -> n = NULL	322:4:6125:6140	5156513	0	True				
ANR	5156625	AssignmentExpression	it -> p -> n = NULL		5156513	0		=			
ANR	5156626	PtrMemberAccess	it -> p -> n		5156513	0					
ANR	5156627	PtrMemberAccess	it -> p		5156513	0					
ANR	5156628	Identifier	it		5156513	0					
ANR	5156629	Identifier	p		5156513	1					
ANR	5156630	Identifier	n		5156513	1					
ANR	5156631	Identifier	NULL		5156513	1					
ANR	5156632	ExpressionStatement	list -> tail = it -> p	323:4:6146:6164	5156513	1	True				
ANR	5156633	AssignmentExpression	list -> tail = it -> p		5156513	0		=			
ANR	5156634	PtrMemberAccess	list -> tail		5156513	0					
ANR	5156635	Identifier	list		5156513	0					
ANR	5156636	Identifier	tail		5156513	1					
ANR	5156637	PtrMemberAccess	it -> p		5156513	1					
ANR	5156638	Identifier	it		5156513	0					
ANR	5156639	Identifier	p		5156513	1					
ANR	5156640	ElseStatement	else		5156513	0					
ANR	5156641	CompoundStatement		17:10:356:356	5156513	0					
ANR	5156642	ExpressionStatement	it -> p -> n = it -> n	325:4:6182:6198	5156513	0	True				
ANR	5156643	AssignmentExpression	it -> p -> n = it -> n		5156513	0		=			
ANR	5156644	PtrMemberAccess	it -> p -> n		5156513	0					
ANR	5156645	PtrMemberAccess	it -> p		5156513	0					
ANR	5156646	Identifier	it		5156513	0					
ANR	5156647	Identifier	p		5156513	1					
ANR	5156648	Identifier	n		5156513	1					
ANR	5156649	PtrMemberAccess	it -> n		5156513	1					
ANR	5156650	Identifier	it		5156513	0					
ANR	5156651	Identifier	n		5156513	1					
ANR	5156652	ExpressionStatement	it -> n -> p = it -> p	326:4:6204:6220	5156513	1	True				
ANR	5156653	AssignmentExpression	it -> n -> p = it -> p		5156513	0		=			
ANR	5156654	PtrMemberAccess	it -> n -> p		5156513	0					
ANR	5156655	PtrMemberAccess	it -> n		5156513	0					
ANR	5156656	Identifier	it		5156513	0					
ANR	5156657	Identifier	n		5156513	1					
ANR	5156658	Identifier	p		5156513	1					
ANR	5156659	PtrMemberAccess	it -> p		5156513	1					
ANR	5156660	Identifier	it		5156513	0					
ANR	5156661	Identifier	p		5156513	1					
ANR	5156662	ExpressionStatement	free ( it )	328:3:6230:6239	5156513	1	True				
ANR	5156663	CallExpression	free ( it )		5156513	0					
ANR	5156664	Callee	free		5156513	0					
ANR	5156665	Identifier	free		5156513	0					
ANR	5156666	ArgumentList	it		5156513	1					
ANR	5156667	Argument	it		5156513	0					
ANR	5156668	Identifier	it		5156513	0					
ANR	5156669	ExpressionStatement	list -> length --	329:3:6244:6258	5156513	2	True				
ANR	5156670	PostIncDecOperationExpression	list -> length --		5156513	0					
ANR	5156671	PtrMemberAccess	list -> length		5156513	0					
ANR	5156672	Identifier	list		5156513	0					
ANR	5156673	Identifier	length		5156513	1					
ANR	5156674	IncDec	--		5156513	1					
ANR	5156675	ReturnStatement	return true ;	330:3:6263:6274	5156513	3	True				
ANR	5156676	Identifier	true		5156513	0					
ANR	5156677	ReturnStatement	return false ;	333:1:6284:6296	5156513	4	True				
ANR	5156678	Identifier	false		5156513	0					
ANR	5156679	ReturnType	R_API int		5156513	1					
ANR	5156680	Identifier	r_list_del_n		5156513	2					
ANR	5156681	ParameterList	"RList * list , int n"		5156513	3					
ANR	5156682	Parameter	RList * list	308:23:5799:5809	5156513	0	True				
ANR	5156683	ParameterType	RList *		5156513	0					
ANR	5156684	Identifier	list		5156513	1					
ANR	5156685	Parameter	int n	308:36:5812:5816	5156513	1	True				
ANR	5156686	ParameterType	int		5156513	0					
ANR	5156687	Identifier	n		5156513	1					
ANR	5156688	CFGEntryNode	ENTRY		5156513		True				
ANR	5156689	CFGExitNode	EXIT		5156513		True				
ANR	5156690	Symbol	list -> length		5156513						
ANR	5156691	Symbol	NULL		5156513						
ANR	5156692	Symbol	* it -> n		5156513						
ANR	5156693	Symbol	false		5156513						
ANR	5156694	Symbol	i		5156513						
ANR	5156695	Symbol	it		5156513						
ANR	5156696	Symbol	list		5156513						
ANR	5156697	Symbol	it -> n		5156513						
ANR	5156698	Symbol	n		5156513						
ANR	5156699	Symbol	it -> p		5156513						
ANR	5156700	Symbol	list -> head		5156513						
ANR	5156701	Symbol	* it		5156513						
ANR	5156702	Symbol	it -> p -> n		5156513						
ANR	5156703	Symbol	* list		5156513						
ANR	5156704	Symbol	* * it		5156513						
ANR	5156705	Symbol	* it -> p		5156513						
ANR	5156706	Symbol	true		5156513						
ANR	5156707	Symbol	it -> data		5156513						
ANR	5156708	Symbol	it -> n -> p		5156513						
ANR	5156709	Symbol	list -> tail		5156513						
ANR	5156710	Function	r_list_get_top	336:0:6301:6432							
ANR	5156711	FunctionDef	r_list_get_top (const RList * list)		5156710	0					
ANR	5156712	CompoundStatement		336:46:6347:6432	5156710	0					
ANR	5156713	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	337:1:6350:6383	5156710	0	True				
ANR	5156714	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156710	0					
ANR	5156715	Callee	r_return_val_if_fail		5156710	0					
ANR	5156716	Identifier	r_return_val_if_fail		5156710	0					
ANR	5156717	ArgumentList	list		5156710	1					
ANR	5156718	Argument	list		5156710	0					
ANR	5156719	Identifier	list		5156710	0					
ANR	5156720	Argument	NULL		5156710	1					
ANR	5156721	Identifier	NULL		5156710	0					
ANR	5156722	ReturnStatement	return list -> tail ? list -> tail -> data : NULL ;	339:1:6387:6430	5156710	1	True				
ANR	5156723	ConditionalExpression	list -> tail ? list -> tail -> data : NULL		5156710	0					
ANR	5156724	Condition	list -> tail		5156710	0					
ANR	5156725	PtrMemberAccess	list -> tail		5156710	0					
ANR	5156726	Identifier	list		5156710	0					
ANR	5156727	Identifier	tail		5156710	1					
ANR	5156728	PtrMemberAccess	list -> tail -> data		5156710	1					
ANR	5156729	PtrMemberAccess	list -> tail		5156710	0					
ANR	5156730	Identifier	list		5156710	0					
ANR	5156731	Identifier	tail		5156710	1					
ANR	5156732	Identifier	data		5156710	1					
ANR	5156733	Identifier	NULL		5156710	2					
ANR	5156734	ReturnType	R_API void *		5156710	1					
ANR	5156735	Identifier	r_list_get_top		5156710	2					
ANR	5156736	ParameterList	const RList * list		5156710	3					
ANR	5156737	Parameter	const RList * list	336:27:6328:6344	5156710	0	True				
ANR	5156738	ParameterType	const RList *		5156710	0					
ANR	5156739	Identifier	list		5156710	1					
ANR	5156740	CFGEntryNode	ENTRY		5156710		True				
ANR	5156741	CFGExitNode	EXIT		5156710		True				
ANR	5156742	Symbol	NULL		5156710						
ANR	5156743	Symbol	* * list		5156710						
ANR	5156744	Symbol	* list		5156710						
ANR	5156745	Symbol	* list -> tail		5156710						
ANR	5156746	Symbol	list -> tail -> data		5156710						
ANR	5156747	Symbol	list		5156710						
ANR	5156748	Symbol	list -> tail		5156710						
ANR	5156749	Function	r_list_get_bottom	342:0:6435:6569							
ANR	5156750	FunctionDef	r_list_get_bottom (const RList * list)		5156749	0					
ANR	5156751	CompoundStatement		342:49:6484:6569	5156749	0					
ANR	5156752	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	343:1:6487:6520	5156749	0	True				
ANR	5156753	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156749	0					
ANR	5156754	Callee	r_return_val_if_fail		5156749	0					
ANR	5156755	Identifier	r_return_val_if_fail		5156749	0					
ANR	5156756	ArgumentList	list		5156749	1					
ANR	5156757	Argument	list		5156749	0					
ANR	5156758	Identifier	list		5156749	0					
ANR	5156759	Argument	NULL		5156749	1					
ANR	5156760	Identifier	NULL		5156749	0					
ANR	5156761	ReturnStatement	return list -> head ? list -> head -> data : NULL ;	345:1:6524:6567	5156749	1	True				
ANR	5156762	ConditionalExpression	list -> head ? list -> head -> data : NULL		5156749	0					
ANR	5156763	Condition	list -> head		5156749	0					
ANR	5156764	PtrMemberAccess	list -> head		5156749	0					
ANR	5156765	Identifier	list		5156749	0					
ANR	5156766	Identifier	head		5156749	1					
ANR	5156767	PtrMemberAccess	list -> head -> data		5156749	1					
ANR	5156768	PtrMemberAccess	list -> head		5156749	0					
ANR	5156769	Identifier	list		5156749	0					
ANR	5156770	Identifier	head		5156749	1					
ANR	5156771	Identifier	data		5156749	1					
ANR	5156772	Identifier	NULL		5156749	2					
ANR	5156773	ReturnType	R_API void *		5156749	1					
ANR	5156774	Identifier	r_list_get_bottom		5156749	2					
ANR	5156775	ParameterList	const RList * list		5156749	3					
ANR	5156776	Parameter	const RList * list	342:30:6465:6481	5156749	0	True				
ANR	5156777	ParameterType	const RList *		5156749	0					
ANR	5156778	Identifier	list		5156749	1					
ANR	5156779	CFGEntryNode	ENTRY		5156749		True				
ANR	5156780	CFGExitNode	EXIT		5156749		True				
ANR	5156781	Symbol	list -> head		5156749						
ANR	5156782	Symbol	* list -> head		5156749						
ANR	5156783	Symbol	NULL		5156749						
ANR	5156784	Symbol	* * list		5156749						
ANR	5156785	Symbol	* list		5156749						
ANR	5156786	Symbol	list -> head -> data		5156749						
ANR	5156787	Symbol	list		5156749						
ANR	5156788	Function	r_list_reverse	348:0:6572:6830							
ANR	5156789	FunctionDef	r_list_reverse (RList * list)		5156788	0					
ANR	5156790	CompoundStatement		348:39:6611:6830	5156788	0					
ANR	5156791	IdentifierDeclStatement	"RListIter * it , * tmp ;"	349:1:6614:6633	5156788	0	True				
ANR	5156792	IdentifierDecl	* it		5156788	0					
ANR	5156793	IdentifierDeclType	RListIter *		5156788	0					
ANR	5156794	Identifier	it		5156788	1					
ANR	5156795	IdentifierDecl	* tmp		5156788	1					
ANR	5156796	IdentifierDeclType	RListIter *		5156788	0					
ANR	5156797	Identifier	tmp		5156788	1					
ANR	5156798	ExpressionStatement	r_return_if_fail ( list )	351:1:6637:6660	5156788	1	True				
ANR	5156799	CallExpression	r_return_if_fail ( list )		5156788	0					
ANR	5156800	Callee	r_return_if_fail		5156788	0					
ANR	5156801	Identifier	r_return_if_fail		5156788	0					
ANR	5156802	ArgumentList	list		5156788	1					
ANR	5156803	Argument	list		5156788	0					
ANR	5156804	Identifier	list		5156788	0					
ANR	5156805	ForStatement	for ( it = list -> head ; it && it -> data ; it = it -> p )		5156788	2					
ANR	5156806	ForInit	it = list -> head ;	353:6:6669:6684	5156788	0	True				
ANR	5156807	AssignmentExpression	it = list -> head		5156788	0		=			
ANR	5156808	Identifier	it		5156788	0					
ANR	5156809	PtrMemberAccess	list -> head		5156788	1					
ANR	5156810	Identifier	list		5156788	0					
ANR	5156811	Identifier	head		5156788	1					
ANR	5156812	Condition	it && it -> data	353:23:6686:6699	5156788	1	True				
ANR	5156813	AndExpression	it && it -> data		5156788	0		&&			
ANR	5156814	Identifier	it		5156788	0					
ANR	5156815	PtrMemberAccess	it -> data		5156788	1					
ANR	5156816	Identifier	it		5156788	0					
ANR	5156817	Identifier	data		5156788	1					
ANR	5156818	AssignmentExpression	it = it -> p	353:39:6702:6711	5156788	2	True	=			
ANR	5156819	Identifier	it		5156788	0					
ANR	5156820	PtrMemberAccess	it -> p		5156788	1					
ANR	5156821	Identifier	it		5156788	0					
ANR	5156822	Identifier	p		5156788	1					
ANR	5156823	CompoundStatement		6:51:102:102	5156788	3					
ANR	5156824	ExpressionStatement	tmp = it -> p	354:2:6718:6729	5156788	0	True				
ANR	5156825	AssignmentExpression	tmp = it -> p		5156788	0		=			
ANR	5156826	Identifier	tmp		5156788	0					
ANR	5156827	PtrMemberAccess	it -> p		5156788	1					
ANR	5156828	Identifier	it		5156788	0					
ANR	5156829	Identifier	p		5156788	1					
ANR	5156830	ExpressionStatement	it -> p = it -> n	355:2:6733:6746	5156788	1	True				
ANR	5156831	AssignmentExpression	it -> p = it -> n		5156788	0		=			
ANR	5156832	PtrMemberAccess	it -> p		5156788	0					
ANR	5156833	Identifier	it		5156788	0					
ANR	5156834	Identifier	p		5156788	1					
ANR	5156835	PtrMemberAccess	it -> n		5156788	1					
ANR	5156836	Identifier	it		5156788	0					
ANR	5156837	Identifier	n		5156788	1					
ANR	5156838	ExpressionStatement	it -> n = tmp	356:2:6750:6761	5156788	2	True				
ANR	5156839	AssignmentExpression	it -> n = tmp		5156788	0		=			
ANR	5156840	PtrMemberAccess	it -> n		5156788	0					
ANR	5156841	Identifier	it		5156788	0					
ANR	5156842	Identifier	n		5156788	1					
ANR	5156843	Identifier	tmp		5156788	1					
ANR	5156844	ExpressionStatement	tmp = list -> head	358:1:6767:6783	5156788	3	True				
ANR	5156845	AssignmentExpression	tmp = list -> head		5156788	0		=			
ANR	5156846	Identifier	tmp		5156788	0					
ANR	5156847	PtrMemberAccess	list -> head		5156788	1					
ANR	5156848	Identifier	list		5156788	0					
ANR	5156849	Identifier	head		5156788	1					
ANR	5156850	ExpressionStatement	list -> head = list -> tail	359:1:6786:6809	5156788	4	True				
ANR	5156851	AssignmentExpression	list -> head = list -> tail		5156788	0		=			
ANR	5156852	PtrMemberAccess	list -> head		5156788	0					
ANR	5156853	Identifier	list		5156788	0					
ANR	5156854	Identifier	head		5156788	1					
ANR	5156855	PtrMemberAccess	list -> tail		5156788	1					
ANR	5156856	Identifier	list		5156788	0					
ANR	5156857	Identifier	tail		5156788	1					
ANR	5156858	ExpressionStatement	list -> tail = tmp	360:1:6812:6828	5156788	5	True				
ANR	5156859	AssignmentExpression	list -> tail = tmp		5156788	0		=			
ANR	5156860	PtrMemberAccess	list -> tail		5156788	0					
ANR	5156861	Identifier	list		5156788	0					
ANR	5156862	Identifier	tail		5156788	1					
ANR	5156863	Identifier	tmp		5156788	1					
ANR	5156864	ReturnType	R_API void		5156788	1					
ANR	5156865	Identifier	r_list_reverse		5156788	2					
ANR	5156866	ParameterList	RList * list		5156788	3					
ANR	5156867	Parameter	RList * list	348:26:6598:6608	5156788	0	True				
ANR	5156868	ParameterType	RList *		5156788	0					
ANR	5156869	Identifier	list		5156788	1					
ANR	5156870	CFGEntryNode	ENTRY		5156788		True				
ANR	5156871	CFGExitNode	EXIT		5156788		True				
ANR	5156872	Symbol	list -> head		5156788						
ANR	5156873	Symbol	* it		5156788						
ANR	5156874	Symbol	* list		5156788						
ANR	5156875	Symbol	tmp		5156788						
ANR	5156876	Symbol	it -> data		5156788						
ANR	5156877	Symbol	it		5156788						
ANR	5156878	Symbol	list		5156788						
ANR	5156879	Symbol	it -> n		5156788						
ANR	5156880	Symbol	it -> p		5156788						
ANR	5156881	Symbol	list -> tail		5156788						
ANR	5156882	Function	r_list_clone	363:0:6833:7132							
ANR	5156883	FunctionDef	r_list_clone (RList * list)		5156882	0					
ANR	5156884	CompoundStatement		363:39:6872:7132	5156882	0					
ANR	5156885	IdentifierDeclStatement	RList * l = NULL ;	364:1:6875:6890	5156882	0	True				
ANR	5156886	IdentifierDecl	* l = NULL		5156882	0					
ANR	5156887	IdentifierDeclType	RList *		5156882	0					
ANR	5156888	Identifier	l		5156882	1					
ANR	5156889	AssignmentExpression	* l = NULL		5156882	2		=			
ANR	5156890	Identifier	NULL		5156882	0					
ANR	5156891	Identifier	NULL		5156882	1					
ANR	5156892	IdentifierDeclStatement	RListIter * iter ;	365:1:6893:6908	5156882	1	True				
ANR	5156893	IdentifierDecl	* iter		5156882	0					
ANR	5156894	IdentifierDeclType	RListIter *		5156882	0					
ANR	5156895	Identifier	iter		5156882	1					
ANR	5156896	IdentifierDeclStatement	void * data ;	366:1:6911:6921	5156882	2	True				
ANR	5156897	IdentifierDecl	* data		5156882	0					
ANR	5156898	IdentifierDeclType	void *		5156882	0					
ANR	5156899	Identifier	data		5156882	1					
ANR	5156900	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	368:1:6925:6958	5156882	3	True				
ANR	5156901	CallExpression	"r_return_val_if_fail ( list , NULL )"		5156882	0					
ANR	5156902	Callee	r_return_val_if_fail		5156882	0					
ANR	5156903	Identifier	r_return_val_if_fail		5156882	0					
ANR	5156904	ArgumentList	list		5156882	1					
ANR	5156905	Argument	list		5156882	0					
ANR	5156906	Identifier	list		5156882	0					
ANR	5156907	Argument	NULL		5156882	1					
ANR	5156908	Identifier	NULL		5156882	0					
ANR	5156909	ExpressionStatement	l = r_list_new ( )	370:1:6962:6979	5156882	4	True				
ANR	5156910	AssignmentExpression	l = r_list_new ( )		5156882	0		=			
ANR	5156911	Identifier	l		5156882	0					
ANR	5156912	CallExpression	r_list_new ( )		5156882	1					
ANR	5156913	Callee	r_list_new		5156882	0					
ANR	5156914	Identifier	r_list_new		5156882	0					
ANR	5156915	ArgumentList			5156882	1					
ANR	5156916	IfStatement	if ( ! l )		5156882	5					
ANR	5156917	Condition	! l	371:5:6986:6987	5156882	0	True				
ANR	5156918	UnaryOperationExpression	! l		5156882	0					
ANR	5156919	UnaryOperator	!		5156882	0					
ANR	5156920	Identifier	l		5156882	1					
ANR	5156921	CompoundStatement		9:9:117:117	5156882	1					
ANR	5156922	ReturnStatement	return NULL ;	372:2:6994:7005	5156882	0	True				
ANR	5156923	Identifier	NULL		5156882	0					
ANR	5156924	ExpressionStatement	l -> free = NULL	374:1:7011:7025	5156882	6	True				
ANR	5156925	AssignmentExpression	l -> free = NULL		5156882	0		=			
ANR	5156926	PtrMemberAccess	l -> free		5156882	0					
ANR	5156927	Identifier	l		5156882	0					
ANR	5156928	Identifier	free		5156882	1					
ANR	5156929	Identifier	NULL		5156882	1					
ANR	5156930	Statement	r_list_foreach	375:1:7028:7041	5156882	7	True				
ANR	5156931	Statement	(	375:16:7043:7043	5156882	8	True				
ANR	5156932	Statement	list	375:17:7044:7047	5156882	9	True				
ANR	5156933	Statement	","	375:21:7048:7048	5156882	10	True				
ANR	5156934	Statement	iter	375:23:7050:7053	5156882	11	True				
ANR	5156935	Statement	","	375:27:7054:7054	5156882	12	True				
ANR	5156936	Statement	data	375:29:7056:7059	5156882	13	True				
ANR	5156937	Statement	)	375:33:7060:7060	5156882	14	True				
ANR	5156938	CompoundStatement		13:35:189:189	5156882	15					
ANR	5156939	ExpressionStatement	"r_list_append ( l , data )"	376:2:7066:7089	5156882	0	True				
ANR	5156940	CallExpression	"r_list_append ( l , data )"		5156882	0					
ANR	5156941	Callee	r_list_append		5156882	0					
ANR	5156942	Identifier	r_list_append		5156882	0					
ANR	5156943	ArgumentList	l		5156882	1					
ANR	5156944	Argument	l		5156882	0					
ANR	5156945	Identifier	l		5156882	0					
ANR	5156946	Argument	data		5156882	1					
ANR	5156947	Identifier	data		5156882	0					
ANR	5156948	ExpressionStatement	l -> sorted = list -> sorted	378:1:7095:7119	5156882	16	True				
ANR	5156949	AssignmentExpression	l -> sorted = list -> sorted		5156882	0		=			
ANR	5156950	PtrMemberAccess	l -> sorted		5156882	0					
ANR	5156951	Identifier	l		5156882	0					
ANR	5156952	Identifier	sorted		5156882	1					
ANR	5156953	PtrMemberAccess	list -> sorted		5156882	1					
ANR	5156954	Identifier	list		5156882	0					
ANR	5156955	Identifier	sorted		5156882	1					
ANR	5156956	ReturnStatement	return l ;	379:1:7122:7130	5156882	17	True				
ANR	5156957	Identifier	l		5156882	0					
ANR	5156958	ReturnType	R_API RList *		5156882	1					
ANR	5156959	Identifier	r_list_clone		5156882	2					
ANR	5156960	ParameterList	RList * list		5156882	3					
ANR	5156961	Parameter	RList * list	363:26:6859:6869	5156882	0	True				
ANR	5156962	ParameterType	RList *		5156882	0					
ANR	5156963	Identifier	list		5156882	1					
ANR	5156964	CFGEntryNode	ENTRY		5156882		True				
ANR	5156965	CFGExitNode	EXIT		5156882		True				
ANR	5156966	Symbol	NULL		5156882						
ANR	5156967	Symbol	data		5156882						
ANR	5156968	Symbol	* list		5156882						
ANR	5156969	Symbol	* l		5156882						
ANR	5156970	Symbol	list -> sorted		5156882						
ANR	5156971	Symbol	l -> sorted		5156882						
ANR	5156972	Symbol	iter		5156882						
ANR	5156973	Symbol	l -> free		5156882						
ANR	5156974	Symbol	list		5156882						
ANR	5156975	Symbol	l		5156882						
ANR	5156976	Symbol	r_list_new		5156882						
ANR	5156977	Function	r_list_add_sorted	382:0:7135:7715							
ANR	5156978	FunctionDef	"r_list_add_sorted (RList * list , void * data , RListComparator cmp)"		5156977	0					
ANR	5156979	CompoundStatement		382:81:7216:7715	5156977	0					
ANR	5156980	IdentifierDeclStatement	"RListIter * it , * item = NULL ;"	383:1:7219:7246	5156977	0	True				
ANR	5156981	IdentifierDecl	* it		5156977	0					
ANR	5156982	IdentifierDeclType	RListIter *		5156977	0					
ANR	5156983	Identifier	it		5156977	1					
ANR	5156984	IdentifierDecl	* item = NULL		5156977	1					
ANR	5156985	IdentifierDeclType	RListIter *		5156977	0					
ANR	5156986	Identifier	item		5156977	1					
ANR	5156987	AssignmentExpression	* item = NULL		5156977	2		=			
ANR	5156988	Identifier	NULL		5156977	0					
ANR	5156989	Identifier	NULL		5156977	1					
ANR	5156990	ExpressionStatement	"r_return_val_if_fail ( list && data && cmp , NULL )"	385:1:7250:7298	5156977	1	True				
ANR	5156991	CallExpression	"r_return_val_if_fail ( list && data && cmp , NULL )"		5156977	0					
ANR	5156992	Callee	r_return_val_if_fail		5156977	0					
ANR	5156993	Identifier	r_return_val_if_fail		5156977	0					
ANR	5156994	ArgumentList	list && data && cmp		5156977	1					
ANR	5156995	Argument	list && data && cmp		5156977	0					
ANR	5156996	AndExpression	list && data && cmp		5156977	0		&&			
ANR	5156997	Identifier	list		5156977	0					
ANR	5156998	AndExpression	data && cmp		5156977	1		&&			
ANR	5156999	Identifier	data		5156977	0					
ANR	5157000	Identifier	cmp		5156977	1					
ANR	5157001	Argument	NULL		5156977	1					
ANR	5157002	Identifier	NULL		5156977	0					
ANR	5157003	ForStatement	"for ( it = list -> head ; it && it -> data && cmp ( data , it -> data ) > 0 ; it = it -> n )"		5156977	2					
ANR	5157004	ForInit	it = list -> head ;	387:6:7307:7322	5156977	0	True				
ANR	5157005	AssignmentExpression	it = list -> head		5156977	0		=			
ANR	5157006	Identifier	it		5156977	0					
ANR	5157007	PtrMemberAccess	list -> head		5156977	1					
ANR	5157008	Identifier	list		5156977	0					
ANR	5157009	Identifier	head		5156977	1					
ANR	5157010	Condition	"it && it -> data && cmp ( data , it -> data ) > 0"	387:23:7324:7365	5156977	1	True				
ANR	5157011	AndExpression	"it && it -> data && cmp ( data , it -> data ) > 0"		5156977	0		&&			
ANR	5157012	Identifier	it		5156977	0					
ANR	5157013	AndExpression	"it -> data && cmp ( data , it -> data ) > 0"		5156977	1		&&			
ANR	5157014	PtrMemberAccess	it -> data		5156977	0					
ANR	5157015	Identifier	it		5156977	0					
ANR	5157016	Identifier	data		5156977	1					
ANR	5157017	RelationalExpression	"cmp ( data , it -> data ) > 0"		5156977	1		>			
ANR	5157018	CallExpression	"cmp ( data , it -> data )"		5156977	0					
ANR	5157019	Callee	cmp		5156977	0					
ANR	5157020	Identifier	cmp		5156977	0					
ANR	5157021	ArgumentList	data		5156977	1					
ANR	5157022	Argument	data		5156977	0					
ANR	5157023	Identifier	data		5156977	0					
ANR	5157024	Argument	it -> data		5156977	1					
ANR	5157025	PtrMemberAccess	it -> data		5156977	0					
ANR	5157026	Identifier	it		5156977	0					
ANR	5157027	Identifier	data		5156977	1					
ANR	5157028	PrimaryExpression	0		5156977	1					
ANR	5157029	AssignmentExpression	it = it -> n	387:67:7368:7377	5156977	2	True	=			
ANR	5157030	Identifier	it		5156977	0					
ANR	5157031	PtrMemberAccess	it -> n		5156977	1					
ANR	5157032	Identifier	it		5156977	0					
ANR	5157033	Identifier	n		5156977	1					
ANR	5157034	CompoundStatement		6:79:163:163	5156977	3					
ANR	5157035	ExpressionStatement		388:2:7384:7384	5156977	0	True				
ANR	5157036	IfStatement	if ( it )		5156977	3					
ANR	5157037	Condition	it	390:5:7394:7395	5156977	0	True				
ANR	5157038	Identifier	it		5156977	0					
ANR	5157039	CompoundStatement		9:9:181:181	5156977	1					
ANR	5157040	ExpressionStatement	item = R_NEW0 ( RListIter )	391:2:7402:7427	5156977	0	True				
ANR	5157041	AssignmentExpression	item = R_NEW0 ( RListIter )		5156977	0		=			
ANR	5157042	Identifier	item		5156977	0					
ANR	5157043	CallExpression	R_NEW0 ( RListIter )		5156977	1					
ANR	5157044	Callee	R_NEW0		5156977	0					
ANR	5157045	Identifier	R_NEW0		5156977	0					
ANR	5157046	ArgumentList	RListIter		5156977	1					
ANR	5157047	Argument	RListIter		5156977	0					
ANR	5157048	Identifier	RListIter		5156977	0					
ANR	5157049	IfStatement	if ( ! item )		5156977	1					
ANR	5157050	Condition	! item	392:6:7435:7439	5156977	0	True				
ANR	5157051	UnaryOperationExpression	! item		5156977	0					
ANR	5157052	UnaryOperator	!		5156977	0					
ANR	5157053	Identifier	item		5156977	1					
ANR	5157054	CompoundStatement		11:13:225:225	5156977	1					
ANR	5157055	ReturnStatement	return NULL ;	393:3:7447:7458	5156977	0	True				
ANR	5157056	Identifier	NULL		5156977	0					
ANR	5157057	ExpressionStatement	item -> n = it	395:2:7466:7478	5156977	2	True				
ANR	5157058	AssignmentExpression	item -> n = it		5156977	0		=			
ANR	5157059	PtrMemberAccess	item -> n		5156977	0					
ANR	5157060	Identifier	item		5156977	0					
ANR	5157061	Identifier	n		5156977	1					
ANR	5157062	Identifier	it		5156977	1					
ANR	5157063	ExpressionStatement	item -> p = it -> p	396:2:7482:7497	5156977	3	True				
ANR	5157064	AssignmentExpression	item -> p = it -> p		5156977	0		=			
ANR	5157065	PtrMemberAccess	item -> p		5156977	0					
ANR	5157066	Identifier	item		5156977	0					
ANR	5157067	Identifier	p		5156977	1					
ANR	5157068	PtrMemberAccess	it -> p		5156977	1					
ANR	5157069	Identifier	it		5156977	0					
ANR	5157070	Identifier	p		5156977	1					
ANR	5157071	ExpressionStatement	item -> data = data	397:2:7501:7518	5156977	4	True				
ANR	5157072	AssignmentExpression	item -> data = data		5156977	0		=			
ANR	5157073	PtrMemberAccess	item -> data		5156977	0					
ANR	5157074	Identifier	item		5156977	0					
ANR	5157075	Identifier	data		5156977	1					
ANR	5157076	Identifier	data		5156977	1					
ANR	5157077	ExpressionStatement	item -> n -> p = item	398:2:7522:7539	5156977	5	True				
ANR	5157078	AssignmentExpression	item -> n -> p = item		5156977	0		=			
ANR	5157079	PtrMemberAccess	item -> n -> p		5156977	0					
ANR	5157080	PtrMemberAccess	item -> n		5156977	0					
ANR	5157081	Identifier	item		5156977	0					
ANR	5157082	Identifier	n		5156977	1					
ANR	5157083	Identifier	p		5156977	1					
ANR	5157084	Identifier	item		5156977	1					
ANR	5157085	IfStatement	if ( ! item -> p )		5156977	6					
ANR	5157086	Condition	! item -> p	399:6:7547:7554	5156977	0	True				
ANR	5157087	UnaryOperationExpression	! item -> p		5156977	0					
ANR	5157088	UnaryOperator	!		5156977	0					
ANR	5157089	PtrMemberAccess	item -> p		5156977	1					
ANR	5157090	Identifier	item		5156977	0					
ANR	5157091	Identifier	p		5156977	1					
ANR	5157092	CompoundStatement		18:16:340:340	5156977	1					
ANR	5157093	ExpressionStatement	list -> head = item	400:3:7562:7579	5156977	0	True				
ANR	5157094	AssignmentExpression	list -> head = item		5156977	0		=			
ANR	5157095	PtrMemberAccess	list -> head		5156977	0					
ANR	5157096	Identifier	list		5156977	0					
ANR	5157097	Identifier	head		5156977	1					
ANR	5157098	Identifier	item		5156977	1					
ANR	5157099	ElseStatement	else		5156977	0					
ANR	5157100	CompoundStatement		20:9:373:373	5156977	0					
ANR	5157101	ExpressionStatement	item -> p -> n = item	402:3:7595:7612	5156977	0	True				
ANR	5157102	AssignmentExpression	item -> p -> n = item		5156977	0		=			
ANR	5157103	PtrMemberAccess	item -> p -> n		5156977	0					
ANR	5157104	PtrMemberAccess	item -> p		5156977	0					
ANR	5157105	Identifier	item		5156977	0					
ANR	5157106	Identifier	p		5156977	1					
ANR	5157107	Identifier	n		5156977	1					
ANR	5157108	Identifier	item		5156977	1					
ANR	5157109	ExpressionStatement	list -> length ++	404:2:7620:7634	5156977	7	True				
ANR	5157110	PostIncDecOperationExpression	list -> length ++		5156977	0					
ANR	5157111	PtrMemberAccess	list -> length		5156977	0					
ANR	5157112	Identifier	list		5156977	0					
ANR	5157113	Identifier	length		5156977	1					
ANR	5157114	IncDec	++		5156977	1					
ANR	5157115	ElseStatement	else		5156977	0					
ANR	5157116	CompoundStatement		24:8:427:427	5156977	0					
ANR	5157117	ExpressionStatement	"r_list_append ( list , data )"	406:2:7648:7674	5156977	0	True				
ANR	5157118	CallExpression	"r_list_append ( list , data )"		5156977	0					
ANR	5157119	Callee	r_list_append		5156977	0					
ANR	5157120	Identifier	r_list_append		5156977	0					
ANR	5157121	ArgumentList	list		5156977	1					
ANR	5157122	Argument	list		5156977	0					
ANR	5157123	Identifier	list		5156977	0					
ANR	5157124	Argument	data		5156977	1					
ANR	5157125	Identifier	data		5156977	0					
ANR	5157126	ExpressionStatement	list -> sorted = true	408:1:7680:7699	5156977	4	True				
ANR	5157127	AssignmentExpression	list -> sorted = true		5156977	0		=			
ANR	5157128	PtrMemberAccess	list -> sorted		5156977	0					
ANR	5157129	Identifier	list		5156977	0					
ANR	5157130	Identifier	sorted		5156977	1					
ANR	5157131	Identifier	true		5156977	1					
ANR	5157132	ReturnStatement	return item ;	409:1:7702:7713	5156977	5	True				
ANR	5157133	Identifier	item		5156977	0					
ANR	5157134	ReturnType	R_API RListIter *		5156977	1					
ANR	5157135	Identifier	r_list_add_sorted		5156977	2					
ANR	5157136	ParameterList	"RList * list , void * data , RListComparator cmp"		5156977	3					
ANR	5157137	Parameter	RList * list	382:35:7170:7180	5156977	0	True				
ANR	5157138	ParameterType	RList *		5156977	0					
ANR	5157139	Identifier	list		5156977	1					
ANR	5157140	Parameter	void * data	382:48:7183:7192	5156977	1	True				
ANR	5157141	ParameterType	void *		5156977	0					
ANR	5157142	Identifier	data		5156977	1					
ANR	5157143	Parameter	RListComparator cmp	382:60:7195:7213	5156977	2	True				
ANR	5157144	ParameterType	RListComparator		5156977	0					
ANR	5157145	Identifier	cmp		5156977	1					
ANR	5157146	CFGEntryNode	ENTRY		5156977		True				
ANR	5157147	CFGExitNode	EXIT		5156977		True				
ANR	5157148	Symbol	* item -> p		5156977						
ANR	5157149	Symbol	data		5156977						
ANR	5157150	Symbol	cmp		5156977						
ANR	5157151	Symbol	* item -> n		5156977						
ANR	5157152	Symbol	item -> n -> p		5156977						
ANR	5157153	Symbol	* item		5156977						
ANR	5157154	Symbol	list -> sorted		5156977						
ANR	5157155	Symbol	item -> data		5156977						
ANR	5157156	Symbol	item		5156977						
ANR	5157157	Symbol	list -> length		5156977						
ANR	5157158	Symbol	NULL		5156977						
ANR	5157159	Symbol	* * item		5156977						
ANR	5157160	Symbol	item -> p		5156977						
ANR	5157161	Symbol	it		5156977						
ANR	5157162	Symbol	item -> n		5156977						
ANR	5157163	Symbol	list		5156977						
ANR	5157164	Symbol	it -> n		5156977						
ANR	5157165	Symbol	it -> p		5156977						
ANR	5157166	Symbol	list -> head		5156977						
ANR	5157167	Symbol	R_NEW0		5156977						
ANR	5157168	Symbol	* it		5156977						
ANR	5157169	Symbol	* list		5156977						
ANR	5157170	Symbol	true		5156977						
ANR	5157171	Symbol	it -> data		5156977						
ANR	5157172	Symbol	item -> p -> n		5156977						
ANR	5157173	Symbol	RListIter		5156977						
ANR	5157174	Function	r_list_set_n	412:0:7718:8048							
ANR	5157175	FunctionDef	"r_list_set_n (RList * list , int n , void * p)"		5157174	0					
ANR	5157176	CompoundStatement		412:52:7770:8048	5157174	0					
ANR	5157177	IdentifierDeclStatement	RListIter * it ;	413:1:7773:7786	5157174	0	True				
ANR	5157178	IdentifierDecl	* it		5157174	0					
ANR	5157179	IdentifierDeclType	RListIter *		5157174	0					
ANR	5157180	Identifier	it		5157174	1					
ANR	5157181	IdentifierDeclStatement	int i ;	414:1:7789:7794	5157174	1	True				
ANR	5157182	IdentifierDecl	i		5157174	0					
ANR	5157183	IdentifierDeclType	int		5157174	0					
ANR	5157184	Identifier	i		5157174	1					
ANR	5157185	ExpressionStatement	"r_return_val_if_fail ( list , false )"	416:1:7798:7832	5157174	2	True				
ANR	5157186	CallExpression	"r_return_val_if_fail ( list , false )"		5157174	0					
ANR	5157187	Callee	r_return_val_if_fail		5157174	0					
ANR	5157188	Identifier	r_return_val_if_fail		5157174	0					
ANR	5157189	ArgumentList	list		5157174	1					
ANR	5157190	Argument	list		5157174	0					
ANR	5157191	Identifier	list		5157174	0					
ANR	5157192	Argument	false		5157174	1					
ANR	5157193	Identifier	false		5157174	0					
ANR	5157194	ForStatement	"for ( it = list -> head , i = 0 ; it && it -> data ; it = it -> n , i ++ )"		5157174	3					
ANR	5157195	ForInit	"it = list -> head , i = 0 ;"	417:6:7840:7862	5157174	0	True				
ANR	5157196	Expression	"it = list -> head , i = 0"		5157174	0					
ANR	5157197	AssignmentExpression	it = list -> head		5157174	0		=			
ANR	5157198	Identifier	it		5157174	0					
ANR	5157199	PtrMemberAccess	list -> head		5157174	1					
ANR	5157200	Identifier	list		5157174	0					
ANR	5157201	Identifier	head		5157174	1					
ANR	5157202	AssignmentExpression	i = 0		5157174	1		=			
ANR	5157203	Identifier	i		5157174	0					
ANR	5157204	PrimaryExpression	0		5157174	1					
ANR	5157205	Condition	it && it -> data	417:30:7864:7877	5157174	1	True				
ANR	5157206	AndExpression	it && it -> data		5157174	0		&&			
ANR	5157207	Identifier	it		5157174	0					
ANR	5157208	PtrMemberAccess	it -> data		5157174	1					
ANR	5157209	Identifier	it		5157174	0					
ANR	5157210	Identifier	data		5157174	1					
ANR	5157211	Expression	"it = it -> n , i ++"	417:46:7880:7894	5157174	2	True				
ANR	5157212	AssignmentExpression	it = it -> n		5157174	0		=			
ANR	5157213	Identifier	it		5157174	0					
ANR	5157214	PtrMemberAccess	it -> n		5157174	1					
ANR	5157215	Identifier	it		5157174	0					
ANR	5157216	Identifier	n		5157174	1					
ANR	5157217	PostIncDecOperationExpression	i ++		5157174	1					
ANR	5157218	Identifier	i		5157174	0					
ANR	5157219	IncDec	++		5157174	1					
ANR	5157220	CompoundStatement		6:63:126:126	5157174	3					
ANR	5157221	IfStatement	if ( i == n )		5157174	0					
ANR	5157222	Condition	i == n	418:6:7905:7910	5157174	0	True				
ANR	5157223	EqualityExpression	i == n		5157174	0		==			
ANR	5157224	Identifier	i		5157174	0					
ANR	5157225	Identifier	n		5157174	1					
ANR	5157226	CompoundStatement		7:14:142:142	5157174	1					
ANR	5157227	IfStatement	if ( list -> free )		5157174	0					
ANR	5157228	Condition	list -> free	419:7:7922:7931	5157174	0	True				
ANR	5157229	PtrMemberAccess	list -> free		5157174	0					
ANR	5157230	Identifier	list		5157174	0					
ANR	5157231	Identifier	free		5157174	1					
ANR	5157232	CompoundStatement		8:19:163:163	5157174	1					
ANR	5157233	ExpressionStatement	list -> free ( it -> data )	420:4:7940:7961	5157174	0	True				
ANR	5157234	CallExpression	list -> free ( it -> data )		5157174	0					
ANR	5157235	Callee	list -> free		5157174	0					
ANR	5157236	PtrMemberAccess	list -> free		5157174	0					
ANR	5157237	Identifier	list		5157174	0					
ANR	5157238	Identifier	free		5157174	1					
ANR	5157239	ArgumentList	it -> data		5157174	1					
ANR	5157240	Argument	it -> data		5157174	0					
ANR	5157241	PtrMemberAccess	it -> data		5157174	0					
ANR	5157242	Identifier	it		5157174	0					
ANR	5157243	Identifier	data		5157174	1					
ANR	5157244	ExpressionStatement	it -> data = p	422:3:7971:7983	5157174	1	True				
ANR	5157245	AssignmentExpression	it -> data = p		5157174	0		=			
ANR	5157246	PtrMemberAccess	it -> data		5157174	0					
ANR	5157247	Identifier	it		5157174	0					
ANR	5157248	Identifier	data		5157174	1					
ANR	5157249	Identifier	p		5157174	1					
ANR	5157250	ExpressionStatement	list -> sorted = false	423:3:7988:8008	5157174	2	True				
ANR	5157251	AssignmentExpression	list -> sorted = false		5157174	0		=			
ANR	5157252	PtrMemberAccess	list -> sorted		5157174	0					
ANR	5157253	Identifier	list		5157174	0					
ANR	5157254	Identifier	sorted		5157174	1					
ANR	5157255	Identifier	false		5157174	1					
ANR	5157256	ReturnStatement	return true ;	424:3:8013:8024	5157174	3	True				
ANR	5157257	Identifier	true		5157174	0					
ANR	5157258	ReturnStatement	return false ;	427:1:8034:8046	5157174	4	True				
ANR	5157259	Identifier	false		5157174	0					
ANR	5157260	ReturnType	R_API int		5157174	1					
ANR	5157261	Identifier	r_list_set_n		5157174	2					
ANR	5157262	ParameterList	"RList * list , int n , void * p"		5157174	3					
ANR	5157263	Parameter	RList * list	412:23:7741:7751	5157174	0	True				
ANR	5157264	ParameterType	RList *		5157174	0					
ANR	5157265	Identifier	list		5157174	1					
ANR	5157266	Parameter	int n	412:36:7754:7758	5157174	1	True				
ANR	5157267	ParameterType	int		5157174	0					
ANR	5157268	Identifier	n		5157174	1					
ANR	5157269	Parameter	void * p	412:43:7761:7767	5157174	2	True				
ANR	5157270	ParameterType	void *		5157174	0					
ANR	5157271	Identifier	p		5157174	1					
ANR	5157272	CFGEntryNode	ENTRY		5157174		True				
ANR	5157273	CFGExitNode	EXIT		5157174		True				
ANR	5157274	Symbol	list -> free		5157174						
ANR	5157275	Symbol	false		5157174						
ANR	5157276	Symbol	i		5157174						
ANR	5157277	Symbol	it		5157174						
ANR	5157278	Symbol	list		5157174						
ANR	5157279	Symbol	it -> n		5157174						
ANR	5157280	Symbol	n		5157174						
ANR	5157281	Symbol	p		5157174						
ANR	5157282	Symbol	list -> head		5157174						
ANR	5157283	Symbol	* it		5157174						
ANR	5157284	Symbol	* list		5157174						
ANR	5157285	Symbol	list -> sorted		5157174						
ANR	5157286	Symbol	true		5157174						
ANR	5157287	Symbol	it -> data		5157174						
ANR	5157288	Function	r_list_get_n	430:0:8051:8288							
ANR	5157289	FunctionDef	"r_list_get_n (const RList * list , int n)"		5157288	0					
ANR	5157290	CompoundStatement		430:51:8102:8288	5157288	0					
ANR	5157291	IdentifierDeclStatement	RListIter * it ;	431:1:8105:8118	5157288	0	True				
ANR	5157292	IdentifierDecl	* it		5157288	0					
ANR	5157293	IdentifierDeclType	RListIter *		5157288	0					
ANR	5157294	Identifier	it		5157288	1					
ANR	5157295	IdentifierDeclStatement	int i ;	432:1:8121:8126	5157288	1	True				
ANR	5157296	IdentifierDecl	i		5157288	0					
ANR	5157297	IdentifierDeclType	int		5157288	0					
ANR	5157298	Identifier	i		5157288	1					
ANR	5157299	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	434:1:8130:8163	5157288	2	True				
ANR	5157300	CallExpression	"r_return_val_if_fail ( list , NULL )"		5157288	0					
ANR	5157301	Callee	r_return_val_if_fail		5157288	0					
ANR	5157302	Identifier	r_return_val_if_fail		5157288	0					
ANR	5157303	ArgumentList	list		5157288	1					
ANR	5157304	Argument	list		5157288	0					
ANR	5157305	Identifier	list		5157288	0					
ANR	5157306	Argument	NULL		5157288	1					
ANR	5157307	Identifier	NULL		5157288	0					
ANR	5157308	ForStatement	"for ( it = list -> head , i = 0 ; it && it -> data ; it = it -> n , i ++ )"		5157288	3					
ANR	5157309	ForInit	"it = list -> head , i = 0 ;"	436:6:8172:8194	5157288	0	True				
ANR	5157310	Expression	"it = list -> head , i = 0"		5157288	0					
ANR	5157311	AssignmentExpression	it = list -> head		5157288	0		=			
ANR	5157312	Identifier	it		5157288	0					
ANR	5157313	PtrMemberAccess	list -> head		5157288	1					
ANR	5157314	Identifier	list		5157288	0					
ANR	5157315	Identifier	head		5157288	1					
ANR	5157316	AssignmentExpression	i = 0		5157288	1		=			
ANR	5157317	Identifier	i		5157288	0					
ANR	5157318	PrimaryExpression	0		5157288	1					
ANR	5157319	Condition	it && it -> data	436:30:8196:8209	5157288	1	True				
ANR	5157320	AndExpression	it && it -> data		5157288	0		&&			
ANR	5157321	Identifier	it		5157288	0					
ANR	5157322	PtrMemberAccess	it -> data		5157288	1					
ANR	5157323	Identifier	it		5157288	0					
ANR	5157324	Identifier	data		5157288	1					
ANR	5157325	Expression	"it = it -> n , i ++"	436:46:8212:8226	5157288	2	True				
ANR	5157326	AssignmentExpression	it = it -> n		5157288	0		=			
ANR	5157327	Identifier	it		5157288	0					
ANR	5157328	PtrMemberAccess	it -> n		5157288	1					
ANR	5157329	Identifier	it		5157288	0					
ANR	5157330	Identifier	n		5157288	1					
ANR	5157331	PostIncDecOperationExpression	i ++		5157288	1					
ANR	5157332	Identifier	i		5157288	0					
ANR	5157333	IncDec	++		5157288	1					
ANR	5157334	CompoundStatement		7:63:126:126	5157288	3					
ANR	5157335	IfStatement	if ( i == n )		5157288	0					
ANR	5157336	Condition	i == n	437:6:8237:8242	5157288	0	True				
ANR	5157337	EqualityExpression	i == n		5157288	0		==			
ANR	5157338	Identifier	i		5157288	0					
ANR	5157339	Identifier	n		5157288	1					
ANR	5157340	CompoundStatement		8:14:142:142	5157288	1					
ANR	5157341	ReturnStatement	return it -> data ;	438:3:8250:8265	5157288	0	True				
ANR	5157342	PtrMemberAccess	it -> data		5157288	0					
ANR	5157343	Identifier	it		5157288	0					
ANR	5157344	Identifier	data		5157288	1					
ANR	5157345	ReturnStatement	return NULL ;	441:1:8275:8286	5157288	4	True				
ANR	5157346	Identifier	NULL		5157288	0					
ANR	5157347	ReturnType	R_API void *		5157288	1					
ANR	5157348	Identifier	r_list_get_n		5157288	2					
ANR	5157349	ParameterList	"const RList * list , int n"		5157288	3					
ANR	5157350	Parameter	const RList * list	430:25:8076:8092	5157288	0	True				
ANR	5157351	ParameterType	const RList *		5157288	0					
ANR	5157352	Identifier	list		5157288	1					
ANR	5157353	Parameter	int n	430:44:8095:8099	5157288	1	True				
ANR	5157354	ParameterType	int		5157288	0					
ANR	5157355	Identifier	n		5157288	1					
ANR	5157356	CFGEntryNode	ENTRY		5157288		True				
ANR	5157357	CFGExitNode	EXIT		5157288		True				
ANR	5157358	Symbol	list -> head		5157288						
ANR	5157359	Symbol	* it		5157288						
ANR	5157360	Symbol	NULL		5157288						
ANR	5157361	Symbol	* list		5157288						
ANR	5157362	Symbol	i		5157288						
ANR	5157363	Symbol	it -> data		5157288						
ANR	5157364	Symbol	it		5157288						
ANR	5157365	Symbol	list		5157288						
ANR	5157366	Symbol	it -> n		5157288						
ANR	5157367	Symbol	n		5157288						
ANR	5157368	Function	r_list_contains	444:0:8291:8513							
ANR	5157369	FunctionDef	"r_list_contains (const RList * list , const void * p)"		5157368	0					
ANR	5157370	CompoundStatement		444:67:8358:8513	5157368	0					
ANR	5157371	IdentifierDeclStatement	void * q ;	445:1:8361:8368	5157368	0	True				
ANR	5157372	IdentifierDecl	* q		5157368	0					
ANR	5157373	IdentifierDeclType	void *		5157368	0					
ANR	5157374	Identifier	q		5157368	1					
ANR	5157375	IdentifierDeclStatement	RListIter * iter ;	446:1:8371:8386	5157368	1	True				
ANR	5157376	IdentifierDecl	* iter		5157368	0					
ANR	5157377	IdentifierDeclType	RListIter *		5157368	0					
ANR	5157378	Identifier	iter		5157368	1					
ANR	5157379	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	448:1:8390:8423	5157368	2	True				
ANR	5157380	CallExpression	"r_return_val_if_fail ( list , NULL )"		5157368	0					
ANR	5157381	Callee	r_return_val_if_fail		5157368	0					
ANR	5157382	Identifier	r_return_val_if_fail		5157368	0					
ANR	5157383	ArgumentList	list		5157368	1					
ANR	5157384	Argument	list		5157368	0					
ANR	5157385	Identifier	list		5157368	0					
ANR	5157386	Argument	NULL		5157368	1					
ANR	5157387	Identifier	NULL		5157368	0					
ANR	5157388	Statement	r_list_foreach	450:1:8427:8440	5157368	3	True				
ANR	5157389	Statement	(	450:16:8442:8442	5157368	4	True				
ANR	5157390	Statement	list	450:17:8443:8446	5157368	5	True				
ANR	5157391	Statement	","	450:21:8447:8447	5157368	6	True				
ANR	5157392	Statement	iter	450:23:8449:8452	5157368	7	True				
ANR	5157393	Statement	","	450:27:8453:8453	5157368	8	True				
ANR	5157394	Statement	q	450:29:8455:8455	5157368	9	True				
ANR	5157395	Statement	)	450:30:8456:8456	5157368	10	True				
ANR	5157396	CompoundStatement		7:32:99:99	5157368	11					
ANR	5157397	IfStatement	if ( p == q )		5157368	0					
ANR	5157398	Condition	p == q	451:6:8466:8471	5157368	0	True				
ANR	5157399	EqualityExpression	p == q		5157368	0		==			
ANR	5157400	Identifier	p		5157368	0					
ANR	5157401	Identifier	q		5157368	1					
ANR	5157402	CompoundStatement		8:14:115:115	5157368	1					
ANR	5157403	ReturnStatement	return iter ;	452:3:8479:8490	5157368	0	True				
ANR	5157404	Identifier	iter		5157368	0					
ANR	5157405	ReturnStatement	return NULL ;	455:1:8500:8511	5157368	12	True				
ANR	5157406	Identifier	NULL		5157368	0					
ANR	5157407	ReturnType	R_API RListIter *		5157368	1					
ANR	5157408	Identifier	r_list_contains		5157368	2					
ANR	5157409	ParameterList	"const RList * list , const void * p"		5157368	3					
ANR	5157410	Parameter	const RList * list	444:33:8324:8340	5157368	0	True				
ANR	5157411	ParameterType	const RList *		5157368	0					
ANR	5157412	Identifier	list		5157368	1					
ANR	5157413	Parameter	const void * p	444:52:8343:8355	5157368	1	True				
ANR	5157414	ParameterType	const void *		5157368	0					
ANR	5157415	Identifier	p		5157368	1					
ANR	5157416	CFGEntryNode	ENTRY		5157368		True				
ANR	5157417	CFGExitNode	EXIT		5157368		True				
ANR	5157418	Symbol	p		5157368						
ANR	5157419	Symbol	q		5157368						
ANR	5157420	Symbol	NULL		5157368						
ANR	5157421	Symbol	iter		5157368						
ANR	5157422	Symbol	list		5157368						
ANR	5157423	Function	r_list_find	458:0:8516:8760							
ANR	5157424	FunctionDef	"r_list_find (const RList * list , const void * p , RListComparator cmp)"		5157423	0					
ANR	5157425	CompoundStatement		458:84:8600:8760	5157423	0					
ANR	5157426	IdentifierDeclStatement	void * q ;	459:1:8603:8610	5157423	0	True				
ANR	5157427	IdentifierDecl	* q		5157423	0					
ANR	5157428	IdentifierDeclType	void *		5157423	0					
ANR	5157429	Identifier	q		5157423	1					
ANR	5157430	IdentifierDeclStatement	RListIter * iter ;	460:1:8613:8628	5157423	1	True				
ANR	5157431	IdentifierDecl	* iter		5157423	0					
ANR	5157432	IdentifierDeclType	RListIter *		5157423	0					
ANR	5157433	Identifier	iter		5157423	1					
ANR	5157434	ExpressionStatement	"r_return_val_if_fail ( list , NULL )"	462:1:8632:8665	5157423	2	True				
ANR	5157435	CallExpression	"r_return_val_if_fail ( list , NULL )"		5157423	0					
ANR	5157436	Callee	r_return_val_if_fail		5157423	0					
ANR	5157437	Identifier	r_return_val_if_fail		5157423	0					
ANR	5157438	ArgumentList	list		5157423	1					
ANR	5157439	Argument	list		5157423	0					
ANR	5157440	Identifier	list		5157423	0					
ANR	5157441	Argument	NULL		5157423	1					
ANR	5157442	Identifier	NULL		5157423	0					
ANR	5157443	Statement	r_list_foreach	464:1:8669:8682	5157423	3	True				
ANR	5157444	Statement	(	464:16:8684:8684	5157423	4	True				
ANR	5157445	Statement	list	464:17:8685:8688	5157423	5	True				
ANR	5157446	Statement	","	464:21:8689:8689	5157423	6	True				
ANR	5157447	Statement	iter	464:23:8691:8694	5157423	7	True				
ANR	5157448	Statement	","	464:27:8695:8695	5157423	8	True				
ANR	5157449	Statement	q	464:29:8697:8697	5157423	9	True				
ANR	5157450	Statement	)	464:30:8698:8698	5157423	10	True				
ANR	5157451	CompoundStatement		7:32:99:99	5157423	11					
ANR	5157452	IfStatement	"if ( ! cmp ( p , q ) )"		5157423	0					
ANR	5157453	Condition	"! cmp ( p , q )"	465:6:8708:8718	5157423	0	True				
ANR	5157454	UnaryOperationExpression	"! cmp ( p , q )"		5157423	0					
ANR	5157455	UnaryOperator	!		5157423	0					
ANR	5157456	CallExpression	"cmp ( p , q )"		5157423	1					
ANR	5157457	Callee	cmp		5157423	0					
ANR	5157458	Identifier	cmp		5157423	0					
ANR	5157459	ArgumentList	p		5157423	1					
ANR	5157460	Argument	p		5157423	0					
ANR	5157461	Identifier	p		5157423	0					
ANR	5157462	Argument	q		5157423	1					
ANR	5157463	Identifier	q		5157423	0					
ANR	5157464	CompoundStatement		8:19:120:120	5157423	1					
ANR	5157465	ReturnStatement	return iter ;	466:3:8726:8737	5157423	0	True				
ANR	5157466	Identifier	iter		5157423	0					
ANR	5157467	ReturnStatement	return NULL ;	469:1:8747:8758	5157423	12	True				
ANR	5157468	Identifier	NULL		5157423	0					
ANR	5157469	ReturnType	R_API RListIter *		5157423	1					
ANR	5157470	Identifier	r_list_find		5157423	2					
ANR	5157471	ParameterList	"const RList * list , const void * p , RListComparator cmp"		5157423	3					
ANR	5157472	Parameter	const RList * list	458:29:8545:8561	5157423	0	True				
ANR	5157473	ParameterType	const RList *		5157423	0					
ANR	5157474	Identifier	list		5157423	1					
ANR	5157475	Parameter	const void * p	458:48:8564:8576	5157423	1	True				
ANR	5157476	ParameterType	const void *		5157423	0					
ANR	5157477	Identifier	p		5157423	1					
ANR	5157478	Parameter	RListComparator cmp	458:63:8579:8597	5157423	2	True				
ANR	5157479	ParameterType	RListComparator		5157423	0					
ANR	5157480	Identifier	cmp		5157423	1					
ANR	5157481	CFGEntryNode	ENTRY		5157423		True				
ANR	5157482	CFGExitNode	EXIT		5157423		True				
ANR	5157483	Symbol	p		5157423						
ANR	5157484	Symbol	q		5157423						
ANR	5157485	Symbol	NULL		5157423						
ANR	5157486	Symbol	cmp		5157423						
ANR	5157487	Symbol	iter		5157423						
ANR	5157488	Symbol	list		5157423						
ANR	5157489	Function	_merge	472:0:8763:9396							
ANR	5157490	FunctionDef	"_merge (RListIter * first , RListIter * second , RListComparator cmp)"		5157489	0					
ANR	5157491	CompoundStatement		472:83:8846:9396	5157489	0					
ANR	5157492	IdentifierDeclStatement	"RListIter * next = NULL , * result = NULL , * head = NULL ;"	473:1:8849:8901	5157489	0	True				
ANR	5157493	IdentifierDecl	* next = NULL		5157489	0					
ANR	5157494	IdentifierDeclType	RListIter *		5157489	0					
ANR	5157495	Identifier	next		5157489	1					
ANR	5157496	AssignmentExpression	* next = NULL		5157489	2		=			
ANR	5157497	Identifier	NULL		5157489	0					
ANR	5157498	Identifier	NULL		5157489	1					
ANR	5157499	IdentifierDecl	* result = NULL		5157489	1					
ANR	5157500	IdentifierDeclType	RListIter *		5157489	0					
ANR	5157501	Identifier	result		5157489	1					
ANR	5157502	AssignmentExpression	* result = NULL		5157489	2		=			
ANR	5157503	Identifier	NULL		5157489	0					
ANR	5157504	Identifier	NULL		5157489	1					
ANR	5157505	IdentifierDecl	* head = NULL		5157489	2					
ANR	5157506	IdentifierDeclType	RListIter *		5157489	0					
ANR	5157507	Identifier	head		5157489	1					
ANR	5157508	AssignmentExpression	* head = NULL		5157489	2		=			
ANR	5157509	Identifier	NULL		5157489	0					
ANR	5157510	Identifier	NULL		5157489	1					
ANR	5157511	WhileStatement	while ( first || second )		5157489	1					
ANR	5157512	Condition	first || second	474:8:8911:8925	5157489	0	True				
ANR	5157513	OrExpression	first || second		5157489	0		||			
ANR	5157514	Identifier	first		5157489	0					
ANR	5157515	Identifier	second		5157489	1					
ANR	5157516	CompoundStatement		3:25:81:81	5157489	1					
ANR	5157517	IfStatement	if ( ! second )		5157489	0					
ANR	5157518	Condition	! second	475:6:8936:8942	5157489	0	True				
ANR	5157519	UnaryOperationExpression	! second		5157489	0					
ANR	5157520	UnaryOperator	!		5157489	0					
ANR	5157521	Identifier	second		5157489	1					
ANR	5157522	CompoundStatement		4:15:98:98	5157489	1					
ANR	5157523	ExpressionStatement	next = first	476:3:8950:8962	5157489	0	True				
ANR	5157524	AssignmentExpression	next = first		5157489	0		=			
ANR	5157525	Identifier	next		5157489	0					
ANR	5157526	Identifier	first		5157489	1					
ANR	5157527	ExpressionStatement	first = first -> n	477:3:8967:8983	5157489	1	True				
ANR	5157528	AssignmentExpression	first = first -> n		5157489	0		=			
ANR	5157529	Identifier	first		5157489	0					
ANR	5157530	PtrMemberAccess	first -> n		5157489	1					
ANR	5157531	Identifier	first		5157489	0					
ANR	5157532	Identifier	n		5157489	1					
ANR	5157533	ElseStatement	else		5157489	0					
ANR	5157534	IfStatement	if ( ! first )		5157489	0					
ANR	5157535	Condition	! first	478:13:8998:9003	5157489	0	True				
ANR	5157536	UnaryOperationExpression	! first		5157489	0					
ANR	5157537	UnaryOperator	!		5157489	0					
ANR	5157538	Identifier	first		5157489	1					
ANR	5157539	CompoundStatement		7:21:159:159	5157489	1					
ANR	5157540	ExpressionStatement	next = second	479:3:9011:9024	5157489	0	True				
ANR	5157541	AssignmentExpression	next = second		5157489	0		=			
ANR	5157542	Identifier	next		5157489	0					
ANR	5157543	Identifier	second		5157489	1					
ANR	5157544	ExpressionStatement	second = second -> n	480:3:9029:9047	5157489	1	True				
ANR	5157545	AssignmentExpression	second = second -> n		5157489	0		=			
ANR	5157546	Identifier	second		5157489	0					
ANR	5157547	PtrMemberAccess	second -> n		5157489	1					
ANR	5157548	Identifier	second		5157489	0					
ANR	5157549	Identifier	n		5157489	1					
ANR	5157550	ElseStatement	else		5157489	0					
ANR	5157551	IfStatement	"if ( cmp ( first -> data , second -> data ) < 0 )"		5157489	0					
ANR	5157552	Condition	"cmp ( first -> data , second -> data ) < 0"	481:13:9062:9096	5157489	0	True				
ANR	5157553	RelationalExpression	"cmp ( first -> data , second -> data ) < 0"		5157489	0		<			
ANR	5157554	CallExpression	"cmp ( first -> data , second -> data )"		5157489	0					
ANR	5157555	Callee	cmp		5157489	0					
ANR	5157556	Identifier	cmp		5157489	0					
ANR	5157557	ArgumentList	first -> data		5157489	1					
ANR	5157558	Argument	first -> data		5157489	0					
ANR	5157559	PtrMemberAccess	first -> data		5157489	0					
ANR	5157560	Identifier	first		5157489	0					
ANR	5157561	Identifier	data		5157489	1					
ANR	5157562	Argument	second -> data		5157489	1					
ANR	5157563	PtrMemberAccess	second -> data		5157489	0					
ANR	5157564	Identifier	second		5157489	0					
ANR	5157565	Identifier	data		5157489	1					
ANR	5157566	PrimaryExpression	0		5157489	1					
ANR	5157567	CompoundStatement		10:50:252:252	5157489	1					
ANR	5157568	ExpressionStatement	next = first	482:3:9104:9116	5157489	0	True				
ANR	5157569	AssignmentExpression	next = first		5157489	0		=			
ANR	5157570	Identifier	next		5157489	0					
ANR	5157571	Identifier	first		5157489	1					
ANR	5157572	ExpressionStatement	first = first -> n	483:3:9121:9137	5157489	1	True				
ANR	5157573	AssignmentExpression	first = first -> n		5157489	0		=			
ANR	5157574	Identifier	first		5157489	0					
ANR	5157575	PtrMemberAccess	first -> n		5157489	1					
ANR	5157576	Identifier	first		5157489	0					
ANR	5157577	Identifier	n		5157489	1					
ANR	5157578	ElseStatement	else		5157489	0					
ANR	5157579	CompoundStatement		13:9:301:301	5157489	0					
ANR	5157580	ExpressionStatement	next = second	485:3:9153:9166	5157489	0	True				
ANR	5157581	AssignmentExpression	next = second		5157489	0		=			
ANR	5157582	Identifier	next		5157489	0					
ANR	5157583	Identifier	second		5157489	1					
ANR	5157584	ExpressionStatement	second = second -> n	486:3:9171:9189	5157489	1	True				
ANR	5157585	AssignmentExpression	second = second -> n		5157489	0		=			
ANR	5157586	Identifier	second		5157489	0					
ANR	5157587	PtrMemberAccess	second -> n		5157489	1					
ANR	5157588	Identifier	second		5157489	0					
ANR	5157589	Identifier	n		5157489	1					
ANR	5157590	IfStatement	if ( ! head )		5157489	1					
ANR	5157591	Condition	! head	488:6:9201:9205	5157489	0	True				
ANR	5157592	UnaryOperationExpression	! head		5157489	0					
ANR	5157593	UnaryOperator	!		5157489	0					
ANR	5157594	Identifier	head		5157489	1					
ANR	5157595	CompoundStatement		17:13:361:361	5157489	1					
ANR	5157596	ExpressionStatement	result = next	489:3:9213:9226	5157489	0	True				
ANR	5157597	AssignmentExpression	result = next		5157489	0		=			
ANR	5157598	Identifier	result		5157489	0					
ANR	5157599	Identifier	next		5157489	1					
ANR	5157600	ExpressionStatement	head = result	490:3:9231:9244	5157489	1	True				
ANR	5157601	AssignmentExpression	head = result		5157489	0		=			
ANR	5157602	Identifier	head		5157489	0					
ANR	5157603	Identifier	result		5157489	1					
ANR	5157604	ExpressionStatement	head -> p = NULL	491:3:9249:9263	5157489	2	True				
ANR	5157605	AssignmentExpression	head -> p = NULL		5157489	0		=			
ANR	5157606	PtrMemberAccess	head -> p		5157489	0					
ANR	5157607	Identifier	head		5157489	0					
ANR	5157608	Identifier	p		5157489	1					
ANR	5157609	Identifier	NULL		5157489	1					
ANR	5157610	ElseStatement	else		5157489	0					
ANR	5157611	CompoundStatement		21:9:427:427	5157489	0					
ANR	5157612	ExpressionStatement	result -> n = next	493:3:9279:9295	5157489	0	True				
ANR	5157613	AssignmentExpression	result -> n = next		5157489	0		=			
ANR	5157614	PtrMemberAccess	result -> n		5157489	0					
ANR	5157615	Identifier	result		5157489	0					
ANR	5157616	Identifier	n		5157489	1					
ANR	5157617	Identifier	next		5157489	1					
ANR	5157618	ExpressionStatement	next -> p = result	494:3:9300:9316	5157489	1	True				
ANR	5157619	AssignmentExpression	next -> p = result		5157489	0		=			
ANR	5157620	PtrMemberAccess	next -> p		5157489	0					
ANR	5157621	Identifier	next		5157489	0					
ANR	5157622	Identifier	p		5157489	1					
ANR	5157623	Identifier	result		5157489	1					
ANR	5157624	ExpressionStatement	result = result -> n	495:3:9321:9339	5157489	2	True				
ANR	5157625	AssignmentExpression	result = result -> n		5157489	0		=			
ANR	5157626	Identifier	result		5157489	0					
ANR	5157627	PtrMemberAccess	result -> n		5157489	1					
ANR	5157628	Identifier	result		5157489	0					
ANR	5157629	Identifier	n		5157489	1					
ANR	5157630	ExpressionStatement	head -> p = NULL	498:1:9349:9363	5157489	2	True				
ANR	5157631	AssignmentExpression	head -> p = NULL		5157489	0		=			
ANR	5157632	PtrMemberAccess	head -> p		5157489	0					
ANR	5157633	Identifier	head		5157489	0					
ANR	5157634	Identifier	p		5157489	1					
ANR	5157635	Identifier	NULL		5157489	1					
ANR	5157636	ExpressionStatement	next -> n = NULL	499:1:9366:9380	5157489	3	True				
ANR	5157637	AssignmentExpression	next -> n = NULL		5157489	0		=			
ANR	5157638	PtrMemberAccess	next -> n		5157489	0					
ANR	5157639	Identifier	next		5157489	0					
ANR	5157640	Identifier	n		5157489	1					
ANR	5157641	Identifier	NULL		5157489	1					
ANR	5157642	ReturnStatement	return head ;	500:1:9383:9394	5157489	4	True				
ANR	5157643	Identifier	head		5157489	0					
ANR	5157644	ReturnType	static RListIter *		5157489	1					
ANR	5157645	Identifier	_merge		5157489	2					
ANR	5157646	ParameterList	"RListIter * first , RListIter * second , RListComparator cmp"		5157489	3					
ANR	5157647	Parameter	RListIter * first	472:25:8788:8803	5157489	0	True				
ANR	5157648	ParameterType	RListIter *		5157489	0					
ANR	5157649	Identifier	first		5157489	1					
ANR	5157650	Parameter	RListIter * second	472:43:8806:8822	5157489	1	True				
ANR	5157651	ParameterType	RListIter *		5157489	0					
ANR	5157652	Identifier	second		5157489	1					
ANR	5157653	Parameter	RListComparator cmp	472:62:8825:8843	5157489	2	True				
ANR	5157654	ParameterType	RListComparator		5157489	0					
ANR	5157655	Identifier	cmp		5157489	1					
ANR	5157656	CFGEntryNode	ENTRY		5157489		True				
ANR	5157657	CFGExitNode	EXIT		5157489		True				
ANR	5157658	Symbol	next		5157489						
ANR	5157659	Symbol	NULL		5157489						
ANR	5157660	Symbol	result -> n		5157489						
ANR	5157661	Symbol	cmp		5157489						
ANR	5157662	Symbol	* head		5157489						
ANR	5157663	Symbol	* next		5157489						
ANR	5157664	Symbol	first -> data		5157489						
ANR	5157665	Symbol	second		5157489						
ANR	5157666	Symbol	head		5157489						
ANR	5157667	Symbol	result		5157489						
ANR	5157668	Symbol	second -> n		5157489						
ANR	5157669	Symbol	* first		5157489						
ANR	5157670	Symbol	* result		5157489						
ANR	5157671	Symbol	second -> data		5157489						
ANR	5157672	Symbol	next -> n		5157489						
ANR	5157673	Symbol	next -> p		5157489						
ANR	5157674	Symbol	head -> p		5157489						
ANR	5157675	Symbol	first		5157489						
ANR	5157676	Symbol	first -> n		5157489						
ANR	5157677	Symbol	* second		5157489						
ANR	5157678	Function	_r_list_half_split	503:0:9399:9710							
ANR	5157679	FunctionDef	_r_list_half_split (RListIter * head)		5157678	0					
ANR	5157680	CompoundStatement		503:55:9454:9710	5157678	0					
ANR	5157681	IdentifierDeclStatement	RListIter * tmp ;	504:1:9457:9471	5157678	0	True				
ANR	5157682	IdentifierDecl	* tmp		5157678	0					
ANR	5157683	IdentifierDeclType	RListIter *		5157678	0					
ANR	5157684	Identifier	tmp		5157678	1					
ANR	5157685	IdentifierDeclStatement	RListIter * fast ;	505:1:9474:9489	5157678	1	True				
ANR	5157686	IdentifierDecl	* fast		5157678	0					
ANR	5157687	IdentifierDeclType	RListIter *		5157678	0					
ANR	5157688	Identifier	fast		5157678	1					
ANR	5157689	IdentifierDeclStatement	RListIter * slow ;	506:1:9492:9507	5157678	2	True				
ANR	5157690	IdentifierDecl	* slow		5157678	0					
ANR	5157691	IdentifierDeclType	RListIter *		5157678	0					
ANR	5157692	Identifier	slow		5157678	1					
ANR	5157693	IfStatement	if ( ! head || ! head -> n )		5157678	3					
ANR	5157694	Condition	! head || ! head -> n	507:5:9514:9530	5157678	0	True				
ANR	5157695	OrExpression	! head || ! head -> n		5157678	0		||			
ANR	5157696	UnaryOperationExpression	! head		5157678	0					
ANR	5157697	UnaryOperator	!		5157678	0					
ANR	5157698	Identifier	head		5157678	1					
ANR	5157699	UnaryOperationExpression	! head -> n		5157678	1					
ANR	5157700	UnaryOperator	!		5157678	0					
ANR	5157701	PtrMemberAccess	head -> n		5157678	1					
ANR	5157702	Identifier	head		5157678	0					
ANR	5157703	Identifier	n		5157678	1					
ANR	5157704	CompoundStatement		5:24:78:78	5157678	1					
ANR	5157705	ReturnStatement	return head ;	508:2:9537:9548	5157678	0	True				
ANR	5157706	Identifier	head		5157678	0					
ANR	5157707	ExpressionStatement	slow = head	510:1:9554:9565	5157678	4	True				
ANR	5157708	AssignmentExpression	slow = head		5157678	0		=			
ANR	5157709	Identifier	slow		5157678	0					
ANR	5157710	Identifier	head		5157678	1					
ANR	5157711	ExpressionStatement	fast = head	511:1:9568:9579	5157678	5	True				
ANR	5157712	AssignmentExpression	fast = head		5157678	0		=			
ANR	5157713	Identifier	fast		5157678	0					
ANR	5157714	Identifier	head		5157678	1					
ANR	5157715	WhileStatement	while ( fast && fast -> n && fast -> n -> n )		5157678	6					
ANR	5157716	Condition	fast && fast -> n && fast -> n -> n	512:8:9589:9617	5157678	0	True				
ANR	5157717	AndExpression	fast && fast -> n && fast -> n -> n		5157678	0		&&			
ANR	5157718	Identifier	fast		5157678	0					
ANR	5157719	AndExpression	fast -> n && fast -> n -> n		5157678	1		&&			
ANR	5157720	PtrMemberAccess	fast -> n		5157678	0					
ANR	5157721	Identifier	fast		5157678	0					
ANR	5157722	Identifier	n		5157678	1					
ANR	5157723	PtrMemberAccess	fast -> n -> n		5157678	1					
ANR	5157724	PtrMemberAccess	fast -> n		5157678	0					
ANR	5157725	Identifier	fast		5157678	0					
ANR	5157726	Identifier	n		5157678	1					
ANR	5157727	Identifier	n		5157678	1					
ANR	5157728	CompoundStatement		10:39:165:165	5157678	1					
ANR	5157729	ExpressionStatement	fast = fast -> n -> n	513:2:9624:9641	5157678	0	True				
ANR	5157730	AssignmentExpression	fast = fast -> n -> n		5157678	0		=			
ANR	5157731	Identifier	fast		5157678	0					
ANR	5157732	PtrMemberAccess	fast -> n -> n		5157678	1					
ANR	5157733	PtrMemberAccess	fast -> n		5157678	0					
ANR	5157734	Identifier	fast		5157678	0					
ANR	5157735	Identifier	n		5157678	1					
ANR	5157736	Identifier	n		5157678	1					
ANR	5157737	ExpressionStatement	slow = slow -> n	514:2:9645:9659	5157678	1	True				
ANR	5157738	AssignmentExpression	slow = slow -> n		5157678	0		=			
ANR	5157739	Identifier	slow		5157678	0					
ANR	5157740	PtrMemberAccess	slow -> n		5157678	1					
ANR	5157741	Identifier	slow		5157678	0					
ANR	5157742	Identifier	n		5157678	1					
ANR	5157743	ExpressionStatement	tmp = slow -> n	516:1:9665:9678	5157678	7	True				
ANR	5157744	AssignmentExpression	tmp = slow -> n		5157678	0		=			
ANR	5157745	Identifier	tmp		5157678	0					
ANR	5157746	PtrMemberAccess	slow -> n		5157678	1					
ANR	5157747	Identifier	slow		5157678	0					
ANR	5157748	Identifier	n		5157678	1					
ANR	5157749	ExpressionStatement	slow -> n = NULL	517:1:9681:9695	5157678	8	True				
ANR	5157750	AssignmentExpression	slow -> n = NULL		5157678	0		=			
ANR	5157751	PtrMemberAccess	slow -> n		5157678	0					
ANR	5157752	Identifier	slow		5157678	0					
ANR	5157753	Identifier	n		5157678	1					
ANR	5157754	Identifier	NULL		5157678	1					
ANR	5157755	ReturnStatement	return tmp ;	518:1:9698:9708	5157678	9	True				
ANR	5157756	Identifier	tmp		5157678	0					
ANR	5157757	ReturnType	static RListIter *		5157678	1					
ANR	5157758	Identifier	_r_list_half_split		5157678	2					
ANR	5157759	ParameterList	RListIter * head		5157678	3					
ANR	5157760	Parameter	RListIter * head	503:38:9437:9451	5157678	0	True				
ANR	5157761	ParameterType	RListIter *		5157678	0					
ANR	5157762	Identifier	head		5157678	1					
ANR	5157763	CFGEntryNode	ENTRY		5157678		True				
ANR	5157764	CFGExitNode	EXIT		5157678		True				
ANR	5157765	Symbol	head -> n		5157678						
ANR	5157766	Symbol	NULL		5157678						
ANR	5157767	Symbol	slow -> n		5157678						
ANR	5157768	Symbol	* head		5157678						
ANR	5157769	Symbol	* fast		5157678						
ANR	5157770	Symbol	* fast -> n		5157678						
ANR	5157771	Symbol	fast -> n		5157678						
ANR	5157772	Symbol	head		5157678						
ANR	5157773	Symbol	fast		5157678						
ANR	5157774	Symbol	* slow		5157678						
ANR	5157775	Symbol	slow		5157678						
ANR	5157776	Symbol	tmp		5157678						
ANR	5157777	Symbol	fast -> n -> n		5157678						
ANR	5157778	Symbol	* * fast		5157678						
ANR	5157779	Function	_merge_sort	521:0:9713:9991							
ANR	5157780	FunctionDef	"_merge_sort (RListIter * head , RListComparator cmp)"		5157779	0					
ANR	5157781	CompoundStatement		521:69:9782:9991	5157779	0					
ANR	5157782	IdentifierDeclStatement	RListIter * second ;	522:1:9785:9802	5157779	0	True				
ANR	5157783	IdentifierDecl	* second		5157779	0					
ANR	5157784	IdentifierDeclType	RListIter *		5157779	0					
ANR	5157785	Identifier	second		5157779	1					
ANR	5157786	IfStatement	if ( ! head || ! head -> n )		5157779	1					
ANR	5157787	Condition	! head || ! head -> n	523:5:9809:9825	5157779	0	True				
ANR	5157788	OrExpression	! head || ! head -> n		5157779	0		||			
ANR	5157789	UnaryOperationExpression	! head		5157779	0					
ANR	5157790	UnaryOperator	!		5157779	0					
ANR	5157791	Identifier	head		5157779	1					
ANR	5157792	UnaryOperationExpression	! head -> n		5157779	1					
ANR	5157793	UnaryOperator	!		5157779	0					
ANR	5157794	PtrMemberAccess	head -> n		5157779	1					
ANR	5157795	Identifier	head		5157779	0					
ANR	5157796	Identifier	n		5157779	1					
ANR	5157797	CompoundStatement		3:24:45:45	5157779	1					
ANR	5157798	ReturnStatement	return head ;	524:2:9832:9843	5157779	0	True				
ANR	5157799	Identifier	head		5157779	0					
ANR	5157800	ExpressionStatement	second = _r_list_half_split ( head )	526:1:9849:9883	5157779	2	True				
ANR	5157801	AssignmentExpression	second = _r_list_half_split ( head )		5157779	0		=			
ANR	5157802	Identifier	second		5157779	0					
ANR	5157803	CallExpression	_r_list_half_split ( head )		5157779	1					
ANR	5157804	Callee	_r_list_half_split		5157779	0					
ANR	5157805	Identifier	_r_list_half_split		5157779	0					
ANR	5157806	ArgumentList	head		5157779	1					
ANR	5157807	Argument	head		5157779	0					
ANR	5157808	Identifier	head		5157779	0					
ANR	5157809	ExpressionStatement	"head = _merge_sort ( head , cmp )"	527:1:9886:9916	5157779	3	True				
ANR	5157810	AssignmentExpression	"head = _merge_sort ( head , cmp )"		5157779	0		=			
ANR	5157811	Identifier	head		5157779	0					
ANR	5157812	CallExpression	"_merge_sort ( head , cmp )"		5157779	1					
ANR	5157813	Callee	_merge_sort		5157779	0					
ANR	5157814	Identifier	_merge_sort		5157779	0					
ANR	5157815	ArgumentList	head		5157779	1					
ANR	5157816	Argument	head		5157779	0					
ANR	5157817	Identifier	head		5157779	0					
ANR	5157818	Argument	cmp		5157779	1					
ANR	5157819	Identifier	cmp		5157779	0					
ANR	5157820	ExpressionStatement	"second = _merge_sort ( second , cmp )"	528:1:9919:9953	5157779	4	True				
ANR	5157821	AssignmentExpression	"second = _merge_sort ( second , cmp )"		5157779	0		=			
ANR	5157822	Identifier	second		5157779	0					
ANR	5157823	CallExpression	"_merge_sort ( second , cmp )"		5157779	1					
ANR	5157824	Callee	_merge_sort		5157779	0					
ANR	5157825	Identifier	_merge_sort		5157779	0					
ANR	5157826	ArgumentList	second		5157779	1					
ANR	5157827	Argument	second		5157779	0					
ANR	5157828	Identifier	second		5157779	0					
ANR	5157829	Argument	cmp		5157779	1					
ANR	5157830	Identifier	cmp		5157779	0					
ANR	5157831	ReturnStatement	"return _merge ( head , second , cmp ) ;"	529:1:9956:9989	5157779	5	True				
ANR	5157832	CallExpression	"_merge ( head , second , cmp )"		5157779	0					
ANR	5157833	Callee	_merge		5157779	0					
ANR	5157834	Identifier	_merge		5157779	0					
ANR	5157835	ArgumentList	head		5157779	1					
ANR	5157836	Argument	head		5157779	0					
ANR	5157837	Identifier	head		5157779	0					
ANR	5157838	Argument	second		5157779	1					
ANR	5157839	Identifier	second		5157779	0					
ANR	5157840	Argument	cmp		5157779	2					
ANR	5157841	Identifier	cmp		5157779	0					
ANR	5157842	ReturnType	static RListIter *		5157779	1					
ANR	5157843	Identifier	_merge_sort		5157779	2					
ANR	5157844	ParameterList	"RListIter * head , RListComparator cmp"		5157779	3					
ANR	5157845	Parameter	RListIter * head	521:31:9744:9758	5157779	0	True				
ANR	5157846	ParameterType	RListIter *		5157779	0					
ANR	5157847	Identifier	head		5157779	1					
ANR	5157848	Parameter	RListComparator cmp	521:48:9761:9779	5157779	1	True				
ANR	5157849	ParameterType	RListComparator		5157779	0					
ANR	5157850	Identifier	cmp		5157779	1					
ANR	5157851	CFGEntryNode	ENTRY		5157779		True				
ANR	5157852	CFGExitNode	EXIT		5157779		True				
ANR	5157853	Symbol	head		5157779						
ANR	5157854	Symbol	_merge_sort		5157779						
ANR	5157855	Symbol	head -> n		5157779						
ANR	5157856	Symbol	_merge		5157779						
ANR	5157857	Symbol	cmp		5157779						
ANR	5157858	Symbol	* head		5157779						
ANR	5157859	Symbol	_r_list_half_split		5157779						
ANR	5157860	Symbol	second		5157779						
ANR	5157861	Function	r_list_merge_sort	532:0:9994:10338							
ANR	5157862	FunctionDef	"r_list_merge_sort (RList * list , RListComparator cmp)"		5157861	0					
ANR	5157863	CompoundStatement		532:63:10057:10338	5157861	0					
ANR	5157864	ExpressionStatement	r_return_if_fail ( list )	533:1:10060:10083	5157861	0	True				
ANR	5157865	CallExpression	r_return_if_fail ( list )		5157861	0					
ANR	5157866	Callee	r_return_if_fail		5157861	0					
ANR	5157867	Identifier	r_return_if_fail		5157861	0					
ANR	5157868	ArgumentList	list		5157861	1					
ANR	5157869	Argument	list		5157861	0					
ANR	5157870	Identifier	list		5157861	0					
ANR	5157871	IfStatement	if ( ! list -> sorted && list -> head && cmp )		5157861	1					
ANR	5157872	Condition	! list -> sorted && list -> head && cmp	535:5:10091:10124	5157861	0	True				
ANR	5157873	AndExpression	! list -> sorted && list -> head && cmp		5157861	0		&&			
ANR	5157874	UnaryOperationExpression	! list -> sorted		5157861	0					
ANR	5157875	UnaryOperator	!		5157861	0					
ANR	5157876	PtrMemberAccess	list -> sorted		5157861	1					
ANR	5157877	Identifier	list		5157861	0					
ANR	5157878	Identifier	sorted		5157861	1					
ANR	5157879	AndExpression	list -> head && cmp		5157861	1		&&			
ANR	5157880	PtrMemberAccess	list -> head		5157861	0					
ANR	5157881	Identifier	list		5157861	0					
ANR	5157882	Identifier	head		5157861	1					
ANR	5157883	Identifier	cmp		5157861	1					
ANR	5157884	CompoundStatement		5:2:73:88	5157861	1					
ANR	5157885	IdentifierDeclStatement	RListIter * iter ;	536:2:10131:10146	5157861	0	True				
ANR	5157886	IdentifierDecl	* iter		5157861	0					
ANR	5157887	IdentifierDeclType	RListIter *		5157861	0					
ANR	5157888	Identifier	iter		5157861	1					
ANR	5157889	ExpressionStatement	"list -> head = _merge_sort ( list -> head , cmp )"	537:2:10150:10192	5157861	1	True				
ANR	5157890	AssignmentExpression	"list -> head = _merge_sort ( list -> head , cmp )"		5157861	0		=			
ANR	5157891	PtrMemberAccess	list -> head		5157861	0					
ANR	5157892	Identifier	list		5157861	0					
ANR	5157893	Identifier	head		5157861	1					
ANR	5157894	CallExpression	"_merge_sort ( list -> head , cmp )"		5157861	1					
ANR	5157895	Callee	_merge_sort		5157861	0					
ANR	5157896	Identifier	_merge_sort		5157861	0					
ANR	5157897	ArgumentList	list -> head		5157861	1					
ANR	5157898	Argument	list -> head		5157861	0					
ANR	5157899	PtrMemberAccess	list -> head		5157861	0					
ANR	5157900	Identifier	list		5157861	0					
ANR	5157901	Identifier	head		5157861	1					
ANR	5157902	Argument	cmp		5157861	1					
ANR	5157903	Identifier	cmp		5157861	0					
ANR	5157904	ExpressionStatement	iter = list -> head	539:2:10222:10239	5157861	2	True				
ANR	5157905	AssignmentExpression	iter = list -> head		5157861	0		=			
ANR	5157906	Identifier	iter		5157861	0					
ANR	5157907	PtrMemberAccess	list -> head		5157861	1					
ANR	5157908	Identifier	list		5157861	0					
ANR	5157909	Identifier	head		5157861	1					
ANR	5157910	WhileStatement	while ( iter && iter -> n )		5157861	3					
ANR	5157911	Condition	iter && iter -> n	540:9:10250:10264	5157861	0	True				
ANR	5157912	AndExpression	iter && iter -> n		5157861	0		&&			
ANR	5157913	Identifier	iter		5157861	0					
ANR	5157914	PtrMemberAccess	iter -> n		5157861	1					
ANR	5157915	Identifier	iter		5157861	0					
ANR	5157916	Identifier	n		5157861	1					
ANR	5157917	CompoundStatement		9:26:209:209	5157861	1					
ANR	5157918	ExpressionStatement	iter = iter -> n	541:3:10272:10286	5157861	0	True				
ANR	5157919	AssignmentExpression	iter = iter -> n		5157861	0		=			
ANR	5157920	Identifier	iter		5157861	0					
ANR	5157921	PtrMemberAccess	iter -> n		5157861	1					
ANR	5157922	Identifier	iter		5157861	0					
ANR	5157923	Identifier	n		5157861	1					
ANR	5157924	ExpressionStatement	list -> tail = iter	543:2:10294:10311	5157861	4	True				
ANR	5157925	AssignmentExpression	list -> tail = iter		5157861	0		=			
ANR	5157926	PtrMemberAccess	list -> tail		5157861	0					
ANR	5157927	Identifier	list		5157861	0					
ANR	5157928	Identifier	tail		5157861	1					
ANR	5157929	Identifier	iter		5157861	1					
ANR	5157930	ExpressionStatement	list -> sorted = true	545:1:10317:10336	5157861	2	True				
ANR	5157931	AssignmentExpression	list -> sorted = true		5157861	0		=			
ANR	5157932	PtrMemberAccess	list -> sorted		5157861	0					
ANR	5157933	Identifier	list		5157861	0					
ANR	5157934	Identifier	sorted		5157861	1					
ANR	5157935	Identifier	true		5157861	1					
ANR	5157936	ReturnType	R_API void		5157861	1					
ANR	5157937	Identifier	r_list_merge_sort		5157861	2					
ANR	5157938	ParameterList	"RList * list , RListComparator cmp"		5157861	3					
ANR	5157939	Parameter	RList * list	532:29:10023:10033	5157861	0	True				
ANR	5157940	ParameterType	RList *		5157861	0					
ANR	5157941	Identifier	list		5157861	1					
ANR	5157942	Parameter	RListComparator cmp	532:42:10036:10054	5157861	1	True				
ANR	5157943	ParameterType	RListComparator		5157861	0					
ANR	5157944	Identifier	cmp		5157861	1					
ANR	5157945	CFGEntryNode	ENTRY		5157861		True				
ANR	5157946	CFGExitNode	EXIT		5157861		True				
ANR	5157947	Symbol	list -> head		5157861						
ANR	5157948	Symbol	_merge_sort		5157861						
ANR	5157949	Symbol	* iter		5157861						
ANR	5157950	Symbol	* list		5157861						
ANR	5157951	Symbol	cmp		5157861						
ANR	5157952	Symbol	iter -> n		5157861						
ANR	5157953	Symbol	list -> sorted		5157861						
ANR	5157954	Symbol	true		5157861						
ANR	5157955	Symbol	iter		5157861						
ANR	5157956	Symbol	list		5157861						
ANR	5157957	Symbol	list -> tail		5157861						
ANR	5157958	Function	r_list_insertion_sort	548:0:10341:10783							
ANR	5157959	FunctionDef	"r_list_insertion_sort (RList * list , RListComparator cmp)"		5157958	0					
ANR	5157960	CompoundStatement		548:67:10408:10783	5157958	0					
ANR	5157961	ExpressionStatement	r_return_if_fail ( list )	549:1:10411:10434	5157958	0	True				
ANR	5157962	CallExpression	r_return_if_fail ( list )		5157958	0					
ANR	5157963	Callee	r_return_if_fail		5157958	0					
ANR	5157964	Identifier	r_return_if_fail		5157958	0					
ANR	5157965	ArgumentList	list		5157958	1					
ANR	5157966	Argument	list		5157958	0					
ANR	5157967	Identifier	list		5157958	0					
ANR	5157968	IfStatement	if ( ! list -> sorted )		5157958	1					
ANR	5157969	Condition	! list -> sorted	551:5:10442:10454	5157958	0	True				
ANR	5157970	UnaryOperationExpression	! list -> sorted		5157958	0					
ANR	5157971	UnaryOperator	!		5157958	0					
ANR	5157972	PtrMemberAccess	list -> sorted		5157958	1					
ANR	5157973	Identifier	list		5157958	0					
ANR	5157974	Identifier	sorted		5157958	1					
ANR	5157975	CompoundStatement		6:2:69:83	5157958	1					
ANR	5157976	IdentifierDeclStatement	RListIter * it ;	552:2:10461:10474	5157958	0	True				
ANR	5157977	IdentifierDecl	* it		5157958	0					
ANR	5157978	IdentifierDeclType	RListIter *		5157958	0					
ANR	5157979	Identifier	it		5157958	1					
ANR	5157980	IdentifierDeclStatement	RListIter * it2 ;	553:2:10478:10492	5157958	1	True				
ANR	5157981	IdentifierDecl	* it2		5157958	0					
ANR	5157982	IdentifierDeclType	RListIter *		5157958	0					
ANR	5157983	Identifier	it2		5157958	1					
ANR	5157984	IfStatement	if ( cmp )		5157958	2					
ANR	5157985	Condition	cmp	554:6:10500:10502	5157958	0	True				
ANR	5157986	Identifier	cmp		5157958	0					
ANR	5157987	CompoundStatement		7:11:96:96	5157958	1					
ANR	5157988	ForStatement	for ( it = list -> head ; it && it -> data ; it = it -> n )		5157958	0					
ANR	5157989	ForInit	it = list -> head ;	555:8:10515:10530	5157958	0	True				
ANR	5157990	AssignmentExpression	it = list -> head		5157958	0		=			
ANR	5157991	Identifier	it		5157958	0					
ANR	5157992	PtrMemberAccess	list -> head		5157958	1					
ANR	5157993	Identifier	list		5157958	0					
ANR	5157994	Identifier	head		5157958	1					
ANR	5157995	Condition	it && it -> data	555:25:10532:10545	5157958	1	True				
ANR	5157996	AndExpression	it && it -> data		5157958	0		&&			
ANR	5157997	Identifier	it		5157958	0					
ANR	5157998	PtrMemberAccess	it -> data		5157958	1					
ANR	5157999	Identifier	it		5157958	0					
ANR	5158000	Identifier	data		5157958	1					
ANR	5158001	AssignmentExpression	it = it -> n	555:41:10548:10557	5157958	2	True	=			
ANR	5158002	Identifier	it		5157958	0					
ANR	5158003	PtrMemberAccess	it -> n		5157958	1					
ANR	5158004	Identifier	it		5157958	0					
ANR	5158005	Identifier	n		5157958	1					
ANR	5158006	CompoundStatement		8:53:151:151	5157958	3					
ANR	5158007	ForStatement	for ( it2 = it -> n ; it2 && it2 -> data ; it2 = it2 -> n )		5157958	0					
ANR	5158008	ForInit	it2 = it -> n ;	556:9:10571:10582	5157958	0	True				
ANR	5158009	AssignmentExpression	it2 = it -> n		5157958	0		=			
ANR	5158010	Identifier	it2		5157958	0					
ANR	5158011	PtrMemberAccess	it -> n		5157958	1					
ANR	5158012	Identifier	it		5157958	0					
ANR	5158013	Identifier	n		5157958	1					
ANR	5158014	Condition	it2 && it2 -> data	556:22:10584:10599	5157958	1	True				
ANR	5158015	AndExpression	it2 && it2 -> data		5157958	0		&&			
ANR	5158016	Identifier	it2		5157958	0					
ANR	5158017	PtrMemberAccess	it2 -> data		5157958	1					
ANR	5158018	Identifier	it2		5157958	0					
ANR	5158019	Identifier	data		5157958	1					
ANR	5158020	AssignmentExpression	it2 = it2 -> n	556:40:10602:10613	5157958	2	True	=			
ANR	5158021	Identifier	it2		5157958	0					
ANR	5158022	PtrMemberAccess	it2 -> n		5157958	1					
ANR	5158023	Identifier	it2		5157958	0					
ANR	5158024	Identifier	n		5157958	1					
ANR	5158025	CompoundStatement		9:54:207:207	5157958	3					
ANR	5158026	IfStatement	"if ( cmp ( it -> data , it2 -> data ) > 0 )"		5157958	0					
ANR	5158027	Condition	"cmp ( it -> data , it2 -> data ) > 0"	557:9:10627:10655	5157958	0	True				
ANR	5158028	RelationalExpression	"cmp ( it -> data , it2 -> data ) > 0"		5157958	0		>			
ANR	5158029	CallExpression	"cmp ( it -> data , it2 -> data )"		5157958	0					
ANR	5158030	Callee	cmp		5157958	0					
ANR	5158031	Identifier	cmp		5157958	0					
ANR	5158032	ArgumentList	it -> data		5157958	1					
ANR	5158033	Argument	it -> data		5157958	0					
ANR	5158034	PtrMemberAccess	it -> data		5157958	0					
ANR	5158035	Identifier	it		5157958	0					
ANR	5158036	Identifier	data		5157958	1					
ANR	5158037	Argument	it2 -> data		5157958	1					
ANR	5158038	PtrMemberAccess	it2 -> data		5157958	0					
ANR	5158039	Identifier	it2		5157958	0					
ANR	5158040	Identifier	data		5157958	1					
ANR	5158041	PrimaryExpression	0		5157958	1					
ANR	5158042	CompoundStatement		11:6:257:275	5157958	1					
ANR	5158043	IdentifierDeclStatement	void * t = it -> data ;	558:6:10666:10684	5157958	0	True				
ANR	5158044	IdentifierDecl	* t = it -> data		5157958	0					
ANR	5158045	IdentifierDeclType	void *		5157958	0					
ANR	5158046	Identifier	t		5157958	1					
ANR	5158047	AssignmentExpression	* t = it -> data		5157958	2		=			
ANR	5158048	Identifier	t		5157958	0					
ANR	5158049	PtrMemberAccess	it -> data		5157958	1					
ANR	5158050	Identifier	it		5157958	0					
ANR	5158051	Identifier	data		5157958	1					
ANR	5158052	ExpressionStatement	it -> data = it2 -> data	559:6:10692:10712	5157958	1	True				
ANR	5158053	AssignmentExpression	it -> data = it2 -> data		5157958	0		=			
ANR	5158054	PtrMemberAccess	it -> data		5157958	0					
ANR	5158055	Identifier	it		5157958	0					
ANR	5158056	Identifier	data		5157958	1					
ANR	5158057	PtrMemberAccess	it2 -> data		5157958	1					
ANR	5158058	Identifier	it2		5157958	0					
ANR	5158059	Identifier	data		5157958	1					
ANR	5158060	ExpressionStatement	it2 -> data = t	560:6:10720:10733	5157958	2	True				
ANR	5158061	AssignmentExpression	it2 -> data = t		5157958	0		=			
ANR	5158062	PtrMemberAccess	it2 -> data		5157958	0					
ANR	5158063	Identifier	it2		5157958	0					
ANR	5158064	Identifier	data		5157958	1					
ANR	5158065	Identifier	t		5157958	1					
ANR	5158066	ExpressionStatement	list -> sorted = true	565:2:10759:10778	5157958	3	True				
ANR	5158067	AssignmentExpression	list -> sorted = true		5157958	0		=			
ANR	5158068	PtrMemberAccess	list -> sorted		5157958	0					
ANR	5158069	Identifier	list		5157958	0					
ANR	5158070	Identifier	sorted		5157958	1					
ANR	5158071	Identifier	true		5157958	1					
ANR	5158072	ReturnType	R_API void		5157958	1					
ANR	5158073	Identifier	r_list_insertion_sort		5157958	2					
ANR	5158074	ParameterList	"RList * list , RListComparator cmp"		5157958	3					
ANR	5158075	Parameter	RList * list	548:33:10374:10384	5157958	0	True				
ANR	5158076	ParameterType	RList *		5157958	0					
ANR	5158077	Identifier	list		5157958	1					
ANR	5158078	Parameter	RListComparator cmp	548:46:10387:10405	5157958	1	True				
ANR	5158079	ParameterType	RListComparator		5157958	0					
ANR	5158080	Identifier	cmp		5157958	1					
ANR	5158081	CFGEntryNode	ENTRY		5157958		True				
ANR	5158082	CFGExitNode	EXIT		5157958		True				
ANR	5158083	Symbol	it2 -> n		5157958						
ANR	5158084	Symbol	it2		5157958						
ANR	5158085	Symbol	cmp		5157958						
ANR	5158086	Symbol	it		5157958						
ANR	5158087	Symbol	list		5157958						
ANR	5158088	Symbol	it -> n		5157958						
ANR	5158089	Symbol	* it2		5157958						
ANR	5158090	Symbol	it2 -> data		5157958						
ANR	5158091	Symbol	list -> head		5157958						
ANR	5158092	Symbol	* it		5157958						
ANR	5158093	Symbol	t		5157958						
ANR	5158094	Symbol	* list		5157958						
ANR	5158095	Symbol	list -> sorted		5157958						
ANR	5158096	Symbol	true		5157958						
ANR	5158097	Symbol	it -> data		5157958						
ANR	5158098	Function	r_list_sort	570:0:10817:11011							
ANR	5158099	FunctionDef	"r_list_sort (RList * list , RListComparator cmp)"		5158098	0					
ANR	5158100	CompoundStatement		570:57:10874:11011	5158098	0					
ANR	5158101	ExpressionStatement	r_return_if_fail ( list )	571:1:10877:10900	5158098	0	True				
ANR	5158102	CallExpression	r_return_if_fail ( list )		5158098	0					
ANR	5158103	Callee	r_return_if_fail		5158098	0					
ANR	5158104	Identifier	r_return_if_fail		5158098	0					
ANR	5158105	ArgumentList	list		5158098	1					
ANR	5158106	Argument	list		5158098	0					
ANR	5158107	Identifier	list		5158098	0					
ANR	5158108	IfStatement	if ( list -> length > 43 )		5158098	1					
ANR	5158109	Condition	list -> length > 43	572:5:10907:10923	5158098	0	True				
ANR	5158110	RelationalExpression	list -> length > 43		5158098	0		>			
ANR	5158111	PtrMemberAccess	list -> length		5158098	0					
ANR	5158112	Identifier	list		5158098	0					
ANR	5158113	Identifier	length		5158098	1					
ANR	5158114	PrimaryExpression	43		5158098	1					
ANR	5158115	CompoundStatement		3:24:51:51	5158098	1					
ANR	5158116	ExpressionStatement	"r_list_merge_sort ( list , cmp )"	573:2:10930:10959	5158098	0	True				
ANR	5158117	CallExpression	"r_list_merge_sort ( list , cmp )"		5158098	0					
ANR	5158118	Callee	r_list_merge_sort		5158098	0					
ANR	5158119	Identifier	r_list_merge_sort		5158098	0					
ANR	5158120	ArgumentList	list		5158098	1					
ANR	5158121	Argument	list		5158098	0					
ANR	5158122	Identifier	list		5158098	0					
ANR	5158123	Argument	cmp		5158098	1					
ANR	5158124	Identifier	cmp		5158098	0					
ANR	5158125	ElseStatement	else		5158098	0					
ANR	5158126	CompoundStatement		5:8:94:94	5158098	0					
ANR	5158127	ExpressionStatement	"r_list_insertion_sort ( list , cmp )"	575:2:10973:11006	5158098	0	True				
ANR	5158128	CallExpression	"r_list_insertion_sort ( list , cmp )"		5158098	0					
ANR	5158129	Callee	r_list_insertion_sort		5158098	0					
ANR	5158130	Identifier	r_list_insertion_sort		5158098	0					
ANR	5158131	ArgumentList	list		5158098	1					
ANR	5158132	Argument	list		5158098	0					
ANR	5158133	Identifier	list		5158098	0					
ANR	5158134	Argument	cmp		5158098	1					
ANR	5158135	Identifier	cmp		5158098	0					
ANR	5158136	ReturnType	R_API void		5158098	1					
ANR	5158137	Identifier	r_list_sort		5158098	2					
ANR	5158138	ParameterList	"RList * list , RListComparator cmp"		5158098	3					
ANR	5158139	Parameter	RList * list	570:23:10840:10850	5158098	0	True				
ANR	5158140	ParameterType	RList *		5158098	0					
ANR	5158141	Identifier	list		5158098	1					
ANR	5158142	Parameter	RListComparator cmp	570:36:10853:10871	5158098	1	True				
ANR	5158143	ParameterType	RListComparator		5158098	0					
ANR	5158144	Identifier	cmp		5158098	1					
ANR	5158145	CFGEntryNode	ENTRY		5158098		True				
ANR	5158146	CFGExitNode	EXIT		5158098		True				
ANR	5158147	Symbol	list -> length		5158098						
ANR	5158148	Symbol	* list		5158098						
ANR	5158149	Symbol	cmp		5158098						
ANR	5158150	Symbol	list		5158098						
ANR	5158151	Function	r_list_uniq	579:0:11014:11468							
ANR	5158152	FunctionDef	"r_list_uniq (const RList * list , RListComparator cmp)"		5158151	0					
ANR	5158153	CompoundStatement		579:65:11079:11468	5158151	0					
ANR	5158154	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	580:1:11082:11105	5158151	0	True				
ANR	5158155	IdentifierDecl	* iter		5158151	0					
ANR	5158156	IdentifierDeclType	RListIter *		5158151	0					
ANR	5158157	Identifier	iter		5158151	1					
ANR	5158158	IdentifierDecl	* iter2		5158151	1					
ANR	5158159	IdentifierDeclType	RListIter *		5158151	0					
ANR	5158160	Identifier	iter2		5158151	1					
ANR	5158161	IdentifierDeclStatement	"void * item , * item2 ;"	581:1:11108:11126	5158151	1	True				
ANR	5158162	IdentifierDecl	* item		5158151	0					
ANR	5158163	IdentifierDeclType	void *		5158151	0					
ANR	5158164	Identifier	item		5158151	1					
ANR	5158165	IdentifierDecl	* item2		5158151	1					
ANR	5158166	IdentifierDeclType	void *		5158151	0					
ANR	5158167	Identifier	item2		5158151	1					
ANR	5158168	ExpressionStatement	"r_return_val_if_fail ( list && cmp , NULL )"	583:1:11130:11170	5158151	2	True				
ANR	5158169	CallExpression	"r_return_val_if_fail ( list && cmp , NULL )"		5158151	0					
ANR	5158170	Callee	r_return_val_if_fail		5158151	0					
ANR	5158171	Identifier	r_return_val_if_fail		5158151	0					
ANR	5158172	ArgumentList	list && cmp		5158151	1					
ANR	5158173	Argument	list && cmp		5158151	0					
ANR	5158174	AndExpression	list && cmp		5158151	0		&&			
ANR	5158175	Identifier	list		5158151	0					
ANR	5158176	Identifier	cmp		5158151	1					
ANR	5158177	Argument	NULL		5158151	1					
ANR	5158178	Identifier	NULL		5158151	0					
ANR	5158179	IdentifierDeclStatement	RList * nl = r_list_newf ( NULL ) ;	585:1:11174:11204	5158151	3	True				
ANR	5158180	IdentifierDecl	* nl = r_list_newf ( NULL )		5158151	0					
ANR	5158181	IdentifierDeclType	RList *		5158151	0					
ANR	5158182	Identifier	nl		5158151	1					
ANR	5158183	AssignmentExpression	* nl = r_list_newf ( NULL )		5158151	2		=			
ANR	5158184	Identifier	nl		5158151	0					
ANR	5158185	CallExpression	r_list_newf ( NULL )		5158151	1					
ANR	5158186	Callee	r_list_newf		5158151	0					
ANR	5158187	Identifier	r_list_newf		5158151	0					
ANR	5158188	ArgumentList	NULL		5158151	1					
ANR	5158189	Argument	NULL		5158151	0					
ANR	5158190	Identifier	NULL		5158151	0					
ANR	5158191	IfStatement	if ( ! nl )		5158151	4					
ANR	5158192	Condition	! nl	586:5:11211:11213	5158151	0	True				
ANR	5158193	UnaryOperationExpression	! nl		5158151	0					
ANR	5158194	UnaryOperator	!		5158151	0					
ANR	5158195	Identifier	nl		5158151	1					
ANR	5158196	CompoundStatement		8:10:136:136	5158151	1					
ANR	5158197	ReturnStatement	return NULL ;	587:2:11220:11231	5158151	0	True				
ANR	5158198	Identifier	NULL		5158151	0					
ANR	5158199	Statement	r_list_foreach	589:1:11237:11250	5158151	5	True				
ANR	5158200	Statement	(	589:16:11252:11252	5158151	6	True				
ANR	5158201	Statement	list	589:17:11253:11256	5158151	7	True				
ANR	5158202	Statement	","	589:21:11257:11257	5158151	8	True				
ANR	5158203	Statement	iter	589:23:11259:11262	5158151	9	True				
ANR	5158204	Statement	","	589:27:11263:11263	5158151	10	True				
ANR	5158205	Statement	item	589:29:11265:11268	5158151	11	True				
ANR	5158206	Statement	)	589:33:11269:11269	5158151	12	True				
ANR	5158207	CompoundStatement		12:2:195:213	5158151	13					
ANR	5158208	IdentifierDeclStatement	bool found = false ;	590:2:11275:11293	5158151	0	True				
ANR	5158209	IdentifierDecl	found = false		5158151	0					
ANR	5158210	IdentifierDeclType	bool		5158151	0					
ANR	5158211	Identifier	found		5158151	1					
ANR	5158212	AssignmentExpression	found = false		5158151	2		=			
ANR	5158213	Identifier	false		5158151	0					
ANR	5158214	Identifier	false		5158151	1					
ANR	5158215	Statement	r_list_foreach	591:2:11297:11310	5158151	1	True				
ANR	5158216	Statement	(	591:17:11312:11312	5158151	2	True				
ANR	5158217	Statement	nl	591:18:11313:11314	5158151	3	True				
ANR	5158218	Statement	","	591:20:11315:11315	5158151	4	True				
ANR	5158219	Statement	iter2	591:22:11317:11321	5158151	5	True				
ANR	5158220	Statement	","	591:27:11322:11322	5158151	6	True				
ANR	5158221	Statement	item2	591:29:11324:11328	5158151	7	True				
ANR	5158222	Statement	)	591:34:11329:11329	5158151	8	True				
ANR	5158223	CompoundStatement		13:36:251:251	5158151	9					
ANR	5158224	IfStatement	"if ( cmp ( item , item2 ) == 0 )"		5158151	0					
ANR	5158225	Condition	"cmp ( item , item2 ) == 0"	592:7:11340:11361	5158151	0	True				
ANR	5158226	EqualityExpression	"cmp ( item , item2 ) == 0"		5158151	0		==			
ANR	5158227	CallExpression	"cmp ( item , item2 )"		5158151	0					
ANR	5158228	Callee	cmp		5158151	0					
ANR	5158229	Identifier	cmp		5158151	0					
ANR	5158230	ArgumentList	item		5158151	1					
ANR	5158231	Argument	item		5158151	0					
ANR	5158232	Identifier	item		5158151	0					
ANR	5158233	Argument	item2		5158151	1					
ANR	5158234	Identifier	item2		5158151	0					
ANR	5158235	PrimaryExpression	0		5158151	1					
ANR	5158236	CompoundStatement		14:31:284:284	5158151	1					
ANR	5158237	ExpressionStatement	found = true	593:4:11370:11382	5158151	0	True				
ANR	5158238	AssignmentExpression	found = true		5158151	0		=			
ANR	5158239	Identifier	found		5158151	0					
ANR	5158240	Identifier	true		5158151	1					
ANR	5158241	BreakStatement	break ;	594:4:11388:11393	5158151	1	True				
ANR	5158242	IfStatement	if ( ! found )		5158151	10					
ANR	5158243	Condition	! found	597:6:11410:11415	5158151	0	True				
ANR	5158244	UnaryOperationExpression	! found		5158151	0					
ANR	5158245	UnaryOperator	!		5158151	0					
ANR	5158246	Identifier	found		5158151	1					
ANR	5158247	CompoundStatement		19:14:338:338	5158151	1					
ANR	5158248	ExpressionStatement	"r_list_append ( nl , item )"	598:3:11423:11447	5158151	0	True				
ANR	5158249	CallExpression	"r_list_append ( nl , item )"		5158151	0					
ANR	5158250	Callee	r_list_append		5158151	0					
ANR	5158251	Identifier	r_list_append		5158151	0					
ANR	5158252	ArgumentList	nl		5158151	1					
ANR	5158253	Argument	nl		5158151	0					
ANR	5158254	Identifier	nl		5158151	0					
ANR	5158255	Argument	item		5158151	1					
ANR	5158256	Identifier	item		5158151	0					
ANR	5158257	ReturnStatement	return nl ;	601:1:11457:11466	5158151	14	True				
ANR	5158258	Identifier	nl		5158151	0					
ANR	5158259	ReturnType	R_API RList *		5158151	1					
ANR	5158260	Identifier	r_list_uniq		5158151	2					
ANR	5158261	ParameterList	"const RList * list , RListComparator cmp"		5158151	3					
ANR	5158262	Parameter	const RList * list	579:25:11039:11055	5158151	0	True				
ANR	5158263	ParameterType	const RList *		5158151	0					
ANR	5158264	Identifier	list		5158151	1					
ANR	5158265	Parameter	RListComparator cmp	579:44:11058:11076	5158151	1	True				
ANR	5158266	ParameterType	RListComparator		5158151	0					
ANR	5158267	Identifier	cmp		5158151	1					
ANR	5158268	CFGEntryNode	ENTRY		5158151		True				
ANR	5158269	CFGExitNode	EXIT		5158151		True				
ANR	5158270	CFGErrorNode	ERROR		5158151		True				
ANR	5158271	Symbol	item		5158151						
ANR	5158272	Symbol	item2		5158151						
ANR	5158273	Symbol	NULL		5158151						
ANR	5158274	Symbol	found		5158151						
ANR	5158275	Symbol	r_list_newf		5158151						
ANR	5158276	Symbol	cmp		5158151						
ANR	5158277	Symbol	iter2		5158151						
ANR	5158278	Symbol	false		5158151						
ANR	5158279	Symbol	true		5158151						
ANR	5158280	Symbol	iter		5158151						
ANR	5158281	Symbol	list		5158151						
ANR	5158282	Symbol	nl		5158151						
ANR	5158283	Function	r_list_to_str	603:0:11470:11731							
ANR	5158284	FunctionDef	"r_list_to_str (RList * list , char ch)"		5158283	0					
ANR	5158285	CompoundStatement		603:48:11518:11731	5158283	0					
ANR	5158286	IdentifierDeclStatement	RListIter * iter ;	604:1:11521:11536	5158283	0	True				
ANR	5158287	IdentifierDecl	* iter		5158283	0					
ANR	5158288	IdentifierDeclType	RListIter *		5158283	0					
ANR	5158289	Identifier	iter		5158283	1					
ANR	5158290	IdentifierDeclStatement	"RStrBuf * buf = r_strbuf_new ( """" ) ;"	605:1:11539:11571	5158283	1	True				
ANR	5158291	IdentifierDecl	"* buf = r_strbuf_new ( """" )"		5158283	0					
ANR	5158292	IdentifierDeclType	RStrBuf *		5158283	0					
ANR	5158293	Identifier	buf		5158283	1					
ANR	5158294	AssignmentExpression	"* buf = r_strbuf_new ( """" )"		5158283	2		=			
ANR	5158295	Identifier	buf		5158283	0					
ANR	5158296	CallExpression	"r_strbuf_new ( """" )"		5158283	1					
ANR	5158297	Callee	r_strbuf_new		5158283	0					
ANR	5158298	Identifier	r_strbuf_new		5158283	0					
ANR	5158299	ArgumentList	""""""		5158283	1					
ANR	5158300	Argument	""""""		5158283	0					
ANR	5158301	PrimaryExpression	""""""		5158283	0					
ANR	5158302	IfStatement	if ( ! buf )		5158283	2					
ANR	5158303	Condition	! buf	606:5:11578:11581	5158283	0	True				
ANR	5158304	UnaryOperationExpression	! buf		5158283	0					
ANR	5158305	UnaryOperator	!		5158283	0					
ANR	5158306	Identifier	buf		5158283	1					
ANR	5158307	CompoundStatement		4:11:65:65	5158283	1					
ANR	5158308	ReturnStatement	return NULL ;	607:2:11588:11599	5158283	0	True				
ANR	5158309	Identifier	NULL		5158283	0					
ANR	5158310	IdentifierDeclStatement	char * item ;	609:1:11605:11615	5158283	3	True				
ANR	5158311	IdentifierDecl	* item		5158283	0					
ANR	5158312	IdentifierDeclType	char *		5158283	0					
ANR	5158313	Identifier	item		5158283	1					
ANR	5158314	Statement	r_list_foreach	610:1:11618:11631	5158283	4	True				
ANR	5158315	Statement	(	610:16:11633:11633	5158283	5	True				
ANR	5158316	Statement	list	610:17:11634:11637	5158283	6	True				
ANR	5158317	Statement	","	610:21:11638:11638	5158283	7	True				
ANR	5158318	Statement	iter	610:23:11640:11643	5158283	8	True				
ANR	5158319	Statement	","	610:27:11644:11644	5158283	9	True				
ANR	5158320	Statement	item	610:29:11646:11649	5158283	10	True				
ANR	5158321	Statement	)	610:33:11650:11650	5158283	11	True				
ANR	5158322	CompoundStatement		8:35:133:133	5158283	12					
ANR	5158323	ExpressionStatement	"r_strbuf_appendf ( buf , ""%s%c"" , item , ch )"	611:2:11656:11696	5158283	0	True				
ANR	5158324	CallExpression	"r_strbuf_appendf ( buf , ""%s%c"" , item , ch )"		5158283	0					
ANR	5158325	Callee	r_strbuf_appendf		5158283	0					
ANR	5158326	Identifier	r_strbuf_appendf		5158283	0					
ANR	5158327	ArgumentList	buf		5158283	1					
ANR	5158328	Argument	buf		5158283	0					
ANR	5158329	Identifier	buf		5158283	0					
ANR	5158330	Argument	"""%s%c"""		5158283	1					
ANR	5158331	PrimaryExpression	"""%s%c"""		5158283	0					
ANR	5158332	Argument	item		5158283	2					
ANR	5158333	Identifier	item		5158283	0					
ANR	5158334	Argument	ch		5158283	3					
ANR	5158335	Identifier	ch		5158283	0					
ANR	5158336	ReturnStatement	return r_strbuf_drain ( buf ) ;	613:1:11702:11729	5158283	13	True				
ANR	5158337	CallExpression	r_strbuf_drain ( buf )		5158283	0					
ANR	5158338	Callee	r_strbuf_drain		5158283	0					
ANR	5158339	Identifier	r_strbuf_drain		5158283	0					
ANR	5158340	ArgumentList	buf		5158283	1					
ANR	5158341	Argument	buf		5158283	0					
ANR	5158342	Identifier	buf		5158283	0					
ANR	5158343	ReturnType	R_API char *		5158283	1					
ANR	5158344	Identifier	r_list_to_str		5158283	2					
ANR	5158345	ParameterList	"RList * list , char ch"		5158283	3					
ANR	5158346	Parameter	RList * list	603:26:11496:11506	5158283	0	True				
ANR	5158347	ParameterType	RList *		5158283	0					
ANR	5158348	Identifier	list		5158283	1					
ANR	5158349	Parameter	char ch	603:39:11509:11515	5158283	1	True				
ANR	5158350	ParameterType	char		5158283	0					
ANR	5158351	Identifier	ch		5158283	1					
ANR	5158352	CFGEntryNode	ENTRY		5158283		True				
ANR	5158353	CFGExitNode	EXIT		5158283		True				
ANR	5158354	Symbol	buf		5158283						
ANR	5158355	Symbol	item		5158283						
ANR	5158356	Symbol	r_strbuf_new		5158283						
ANR	5158357	Symbol	NULL		5158283						
ANR	5158358	Symbol	ch		5158283						
ANR	5158359	Symbol	r_strbuf_drain		5158283						
ANR	5158360	Symbol	iter		5158283						
ANR	5158361	Symbol	list		5158283						
ANR	5158362	Function	main	619:0:11772:13827							
ANR	5158363	FunctionDef	main ()		5158362	0					
ANR	5158364	CompoundStatement		619:12:11784:13827	5158362	0					
ANR	5158365	IdentifierDeclStatement	"RListIter * iter , * it ;"	620:1:11787:11807	5158362	0	True				
ANR	5158366	IdentifierDecl	* iter		5158362	0					
ANR	5158367	IdentifierDeclType	RListIter *		5158362	0					
ANR	5158368	Identifier	iter		5158362	1					
ANR	5158369	IdentifierDecl	* it		5158362	1					
ANR	5158370	IdentifierDeclType	RListIter *		5158362	0					
ANR	5158371	Identifier	it		5158362	1					
ANR	5158372	IdentifierDeclStatement	RList * l = r_list_new ( ) ;	621:1:11810:11834	5158362	1	True				
ANR	5158373	IdentifierDecl	* l = r_list_new ( )		5158362	0					
ANR	5158374	IdentifierDeclType	RList *		5158362	0					
ANR	5158375	Identifier	l		5158362	1					
ANR	5158376	AssignmentExpression	* l = r_list_new ( )		5158362	2		=			
ANR	5158377	Identifier	l		5158362	0					
ANR	5158378	CallExpression	r_list_new ( )		5158362	1					
ANR	5158379	Callee	r_list_new		5158362	0					
ANR	5158380	Identifier	r_list_new		5158362	0					
ANR	5158381	ArgumentList			5158362	1					
ANR	5158382	ExpressionStatement	"r_list_append ( l , ""foo"" )"	623:1:11838:11862	5158362	2	True				
ANR	5158383	CallExpression	"r_list_append ( l , ""foo"" )"		5158362	0					
ANR	5158384	Callee	r_list_append		5158362	0					
ANR	5158385	Identifier	r_list_append		5158362	0					
ANR	5158386	ArgumentList	l		5158362	1					
ANR	5158387	Argument	l		5158362	0					
ANR	5158388	Identifier	l		5158362	0					
ANR	5158389	Argument	"""foo"""		5158362	1					
ANR	5158390	PrimaryExpression	"""foo"""		5158362	0					
ANR	5158391	ExpressionStatement	"r_list_append ( l , ""bar"" )"	624:1:11865:11889	5158362	3	True				
ANR	5158392	CallExpression	"r_list_append ( l , ""bar"" )"		5158362	0					
ANR	5158393	Callee	r_list_append		5158362	0					
ANR	5158394	Identifier	r_list_append		5158362	0					
ANR	5158395	ArgumentList	l		5158362	1					
ANR	5158396	Argument	l		5158362	0					
ANR	5158397	Identifier	l		5158362	0					
ANR	5158398	Argument	"""bar"""		5158362	1					
ANR	5158399	PrimaryExpression	"""bar"""		5158362	0					
ANR	5158400	ExpressionStatement	"r_list_append ( l , ""cow"" )"	625:1:11892:11916	5158362	4	True				
ANR	5158401	CallExpression	"r_list_append ( l , ""cow"" )"		5158362	0					
ANR	5158402	Callee	r_list_append		5158362	0					
ANR	5158403	Identifier	r_list_append		5158362	0					
ANR	5158404	ArgumentList	l		5158362	1					
ANR	5158405	Argument	l		5158362	0					
ANR	5158406	Identifier	l		5158362	0					
ANR	5158407	Argument	"""cow"""		5158362	1					
ANR	5158408	PrimaryExpression	"""cow"""		5158362	0					
ANR	5158409	ExpressionStatement	"r_list_prepend ( l , ""HEAD"" )"	626:1:11919:11945	5158362	5	True				
ANR	5158410	CallExpression	"r_list_prepend ( l , ""HEAD"" )"		5158362	0					
ANR	5158411	Callee	r_list_prepend		5158362	0					
ANR	5158412	Identifier	r_list_prepend		5158362	0					
ANR	5158413	ArgumentList	l		5158362	1					
ANR	5158414	Argument	l		5158362	0					
ANR	5158415	Identifier	l		5158362	0					
ANR	5158416	Argument	"""HEAD"""		5158362	1					
ANR	5158417	PrimaryExpression	"""HEAD"""		5158362	0					
ANR	5158418	ExpressionStatement	"r_list_prepend ( l , ""HEAD 00"" )"	627:1:11948:11977	5158362	6	True				
ANR	5158419	CallExpression	"r_list_prepend ( l , ""HEAD 00"" )"		5158362	0					
ANR	5158420	Callee	r_list_prepend		5158362	0					
ANR	5158421	Identifier	r_list_prepend		5158362	0					
ANR	5158422	ArgumentList	l		5158362	1					
ANR	5158423	Argument	l		5158362	0					
ANR	5158424	Identifier	l		5158362	0					
ANR	5158425	Argument	"""HEAD 00"""		5158362	1					
ANR	5158426	PrimaryExpression	"""HEAD 00"""		5158362	0					
ANR	5158427	ExpressionStatement	"it = r_list_append ( l , ""LAST"" )"	628:1:11980:12010	5158362	7	True				
ANR	5158428	AssignmentExpression	"it = r_list_append ( l , ""LAST"" )"		5158362	0		=			
ANR	5158429	Identifier	it		5158362	0					
ANR	5158430	CallExpression	"r_list_append ( l , ""LAST"" )"		5158362	1					
ANR	5158431	Callee	r_list_append		5158362	0					
ANR	5158432	Identifier	r_list_append		5158362	0					
ANR	5158433	ArgumentList	l		5158362	1					
ANR	5158434	Argument	l		5158362	0					
ANR	5158435	Identifier	l		5158362	0					
ANR	5158436	Argument	"""LAST"""		5158362	1					
ANR	5158437	PrimaryExpression	"""LAST"""		5158362	0					
ANR	5158438	CompoundStatement		13:2:233:242	5158362	8					
ANR	5158439	IdentifierDeclStatement	char * str ;	631:2:12018:12027	5158362	0	True				
ANR	5158440	IdentifierDecl	* str		5158362	0					
ANR	5158441	IdentifierDeclType	char *		5158362	0					
ANR	5158442	Identifier	str		5158362	1					
ANR	5158443	Statement	r_list_foreach	632:2:12031:12044	5158362	1	True				
ANR	5158444	Statement	(	632:17:12046:12046	5158362	2	True				
ANR	5158445	Statement	l	632:18:12047:12047	5158362	3	True				
ANR	5158446	Statement	","	632:19:12048:12048	5158362	4	True				
ANR	5158447	Statement	iter	632:21:12050:12053	5158362	5	True				
ANR	5158448	Statement	","	632:25:12054:12054	5158362	6	True				
ANR	5158449	Statement	str	632:27:12056:12058	5158362	7	True				
ANR	5158450	Statement	)	632:30:12059:12059	5158362	8	True				
ANR	5158451	CompoundStatement		14:32:276:276	5158362	9					
ANR	5158452	ExpressionStatement	"printf ( ""-- %s\\n"" , str )"	633:3:12066:12088	5158362	0	True				
ANR	5158453	CallExpression	"printf ( ""-- %s\\n"" , str )"		5158362	0					
ANR	5158454	Callee	printf		5158362	0					
ANR	5158455	Identifier	printf		5158362	0					
ANR	5158456	ArgumentList	"""-- %s\\n"""		5158362	1					
ANR	5158457	Argument	"""-- %s\\n"""		5158362	0					
ANR	5158458	PrimaryExpression	"""-- %s\\n"""		5158362	0					
ANR	5158459	Argument	str		5158362	1					
ANR	5158460	Identifier	str		5158362	0					
ANR	5158461	ExpressionStatement	"printf ( ""--**--\\n"" )"	635:2:12096:12114	5158362	10	True				
ANR	5158462	CallExpression	"printf ( ""--**--\\n"" )"		5158362	0					
ANR	5158463	Callee	printf		5158362	0					
ANR	5158464	Identifier	printf		5158362	0					
ANR	5158465	ArgumentList	"""--**--\\n"""		5158362	1					
ANR	5158466	Argument	"""--**--\\n"""		5158362	0					
ANR	5158467	PrimaryExpression	"""--**--\\n"""		5158362	0					
ANR	5158468	Statement	r_list_foreach_prev	636:2:12118:12136	5158362	11	True				
ANR	5158469	Statement	(	636:22:12138:12138	5158362	12	True				
ANR	5158470	Statement	l	636:23:12139:12139	5158362	13	True				
ANR	5158471	Statement	","	636:24:12140:12140	5158362	14	True				
ANR	5158472	Statement	iter	636:26:12142:12145	5158362	15	True				
ANR	5158473	Statement	","	636:30:12146:12146	5158362	16	True				
ANR	5158474	Statement	str	636:32:12148:12150	5158362	17	True				
ANR	5158475	Statement	)	636:35:12151:12151	5158362	18	True				
ANR	5158476	CompoundStatement		18:37:368:368	5158362	19					
ANR	5158477	ExpressionStatement	"printf ( ""-- %s\\n"" , str )"	637:3:12158:12180	5158362	0	True				
ANR	5158478	CallExpression	"printf ( ""-- %s\\n"" , str )"		5158362	0					
ANR	5158479	Callee	printf		5158362	0					
ANR	5158480	Identifier	printf		5158362	0					
ANR	5158481	ArgumentList	"""-- %s\\n"""		5158362	1					
ANR	5158482	Argument	"""-- %s\\n"""		5158362	0					
ANR	5158483	PrimaryExpression	"""-- %s\\n"""		5158362	0					
ANR	5158484	Argument	str		5158362	1					
ANR	5158485	Identifier	str		5158362	0					
ANR	5158486	ExpressionStatement	iter = r_list_iterator ( l )	641:1:12191:12217	5158362	9	True				
ANR	5158487	AssignmentExpression	iter = r_list_iterator ( l )		5158362	0		=			
ANR	5158488	Identifier	iter		5158362	0					
ANR	5158489	CallExpression	r_list_iterator ( l )		5158362	1					
ANR	5158490	Callee	r_list_iterator		5158362	0					
ANR	5158491	Identifier	r_list_iterator		5158362	0					
ANR	5158492	ArgumentList	l		5158362	1					
ANR	5158493	Argument	l		5158362	0					
ANR	5158494	Identifier	l		5158362	0					
ANR	5158495	WhileStatement	while ( r_list_iter_next ( iter ) )		5158362	10					
ANR	5158496	Condition	r_list_iter_next ( iter )	642:8:12227:12249	5158362	0	True				
ANR	5158497	CallExpression	r_list_iter_next ( iter )		5158362	0					
ANR	5158498	Callee	r_list_iter_next		5158362	0					
ANR	5158499	Identifier	r_list_iter_next		5158362	0					
ANR	5158500	ArgumentList	iter		5158362	1					
ANR	5158501	Argument	iter		5158362	0					
ANR	5158502	Identifier	iter		5158362	0					
ANR	5158503	CompoundStatement		25:2:471:511	5158362	1					
ANR	5158504	IdentifierDeclStatement	const char * str = r_list_iter_get ( iter ) ;	643:2:12256:12296	5158362	0	True				
ANR	5158505	IdentifierDecl	* str = r_list_iter_get ( iter )		5158362	0					
ANR	5158506	IdentifierDeclType	const char *		5158362	0					
ANR	5158507	Identifier	str		5158362	1					
ANR	5158508	AssignmentExpression	* str = r_list_iter_get ( iter )		5158362	2		=			
ANR	5158509	Identifier	str		5158362	0					
ANR	5158510	CallExpression	r_list_iter_get ( iter )		5158362	1					
ANR	5158511	Callee	r_list_iter_get		5158362	0					
ANR	5158512	Identifier	r_list_iter_get		5158362	0					
ANR	5158513	ArgumentList	iter		5158362	1					
ANR	5158514	Argument	iter		5158362	0					
ANR	5158515	Identifier	iter		5158362	0					
ANR	5158516	ExpressionStatement	"printf ( ""-> %s\\n"" , str )"	644:2:12300:12323	5158362	1	True				
ANR	5158517	CallExpression	"printf ( ""-> %s\\n"" , str )"		5158362	0					
ANR	5158518	Callee	printf		5158362	0					
ANR	5158519	Identifier	printf		5158362	0					
ANR	5158520	ArgumentList	"""-> %s\\n"""		5158362	1					
ANR	5158521	Argument	"""-> %s\\n"""		5158362	0					
ANR	5158522	PrimaryExpression	"""-> %s\\n"""		5158362	0					
ANR	5158523	Argument	str		5158362	1					
ANR	5158524	Identifier	str		5158362	0					
ANR	5158525	ExpressionStatement	"eprintf ( ""--sort--\\n"" )"	646:1:12329:12351	5158362	11	True				
ANR	5158526	CallExpression	"eprintf ( ""--sort--\\n"" )"		5158362	0					
ANR	5158527	Callee	eprintf		5158362	0					
ANR	5158528	Identifier	eprintf		5158362	0					
ANR	5158529	ArgumentList	"""--sort--\\n"""		5158362	1					
ANR	5158530	Argument	"""--sort--\\n"""		5158362	0					
ANR	5158531	PrimaryExpression	"""--sort--\\n"""		5158362	0					
ANR	5158532	ExpressionStatement	"r_list_sort ( l , ( RListComparator ) strcmp )"	647:1:12354:12394	5158362	12	True				
ANR	5158533	CallExpression	"r_list_sort ( l , ( RListComparator ) strcmp )"		5158362	0					
ANR	5158534	Callee	r_list_sort		5158362	0					
ANR	5158535	Identifier	r_list_sort		5158362	0					
ANR	5158536	ArgumentList	l		5158362	1					
ANR	5158537	Argument	l		5158362	0					
ANR	5158538	Identifier	l		5158362	0					
ANR	5158539	Argument	( RListComparator ) strcmp		5158362	1					
ANR	5158540	CastExpression	( RListComparator ) strcmp		5158362	0					
ANR	5158541	CastTarget	RListComparator		5158362	0					
ANR	5158542	Identifier	strcmp		5158362	1					
ANR	5158543	ExpressionStatement	iter = r_list_iterator ( l )	648:1:12397:12423	5158362	13	True				
ANR	5158544	AssignmentExpression	iter = r_list_iterator ( l )		5158362	0		=			
ANR	5158545	Identifier	iter		5158362	0					
ANR	5158546	CallExpression	r_list_iterator ( l )		5158362	1					
ANR	5158547	Callee	r_list_iterator		5158362	0					
ANR	5158548	Identifier	r_list_iterator		5158362	0					
ANR	5158549	ArgumentList	l		5158362	1					
ANR	5158550	Argument	l		5158362	0					
ANR	5158551	Identifier	l		5158362	0					
ANR	5158552	WhileStatement	while ( r_list_iter_next ( iter ) )		5158362	14					
ANR	5158553	Condition	r_list_iter_next ( iter )	649:8:12433:12455	5158362	0	True				
ANR	5158554	CallExpression	r_list_iter_next ( iter )		5158362	0					
ANR	5158555	Callee	r_list_iter_next		5158362	0					
ANR	5158556	Identifier	r_list_iter_next		5158362	0					
ANR	5158557	ArgumentList	iter		5158362	1					
ANR	5158558	Argument	iter		5158362	0					
ANR	5158559	Identifier	iter		5158362	0					
ANR	5158560	CompoundStatement		32:2:677:717	5158362	1					
ANR	5158561	IdentifierDeclStatement	const char * str = r_list_iter_get ( iter ) ;	650:2:12462:12502	5158362	0	True				
ANR	5158562	IdentifierDecl	* str = r_list_iter_get ( iter )		5158362	0					
ANR	5158563	IdentifierDeclType	const char *		5158362	0					
ANR	5158564	Identifier	str		5158362	1					
ANR	5158565	AssignmentExpression	* str = r_list_iter_get ( iter )		5158362	2		=			
ANR	5158566	Identifier	str		5158362	0					
ANR	5158567	CallExpression	r_list_iter_get ( iter )		5158362	1					
ANR	5158568	Callee	r_list_iter_get		5158362	0					
ANR	5158569	Identifier	r_list_iter_get		5158362	0					
ANR	5158570	ArgumentList	iter		5158362	1					
ANR	5158571	Argument	iter		5158362	0					
ANR	5158572	Identifier	iter		5158362	0					
ANR	5158573	ExpressionStatement	"printf ( ""-> %s\\n"" , str )"	651:2:12506:12529	5158362	1	True				
ANR	5158574	CallExpression	"printf ( ""-> %s\\n"" , str )"		5158362	0					
ANR	5158575	Callee	printf		5158362	0					
ANR	5158576	Identifier	printf		5158362	0					
ANR	5158577	ArgumentList	"""-> %s\\n"""		5158362	1					
ANR	5158578	Argument	"""-> %s\\n"""		5158362	0					
ANR	5158579	PrimaryExpression	"""-> %s\\n"""		5158362	0					
ANR	5158580	Argument	str		5158362	1					
ANR	5158581	Identifier	str		5158362	0					
ANR	5158582	ExpressionStatement	"r_list_delete ( l , it )"	654:1:12536:12557	5158362	15	True				
ANR	5158583	CallExpression	"r_list_delete ( l , it )"		5158362	0					
ANR	5158584	Callee	r_list_delete		5158362	0					
ANR	5158585	Identifier	r_list_delete		5158362	0					
ANR	5158586	ArgumentList	l		5158362	1					
ANR	5158587	Argument	l		5158362	0					
ANR	5158588	Identifier	l		5158362	0					
ANR	5158589	Argument	it		5158362	1					
ANR	5158590	Identifier	it		5158362	0					
ANR	5158591	IdentifierDeclStatement	"char * foo = ( char * ) r_list_get_n ( l , 2 ) ;"	656:1:12561:12600	5158362	16	True				
ANR	5158592	IdentifierDecl	"* foo = ( char * ) r_list_get_n ( l , 2 )"		5158362	0					
ANR	5158593	IdentifierDeclType	char *		5158362	0					
ANR	5158594	Identifier	foo		5158362	1					
ANR	5158595	AssignmentExpression	"* foo = ( char * ) r_list_get_n ( l , 2 )"		5158362	2		=			
ANR	5158596	Identifier	foo		5158362	0					
ANR	5158597	CastExpression	"( char * ) r_list_get_n ( l , 2 )"		5158362	1					
ANR	5158598	CastTarget	char *		5158362	0					
ANR	5158599	CallExpression	"r_list_get_n ( l , 2 )"		5158362	1					
ANR	5158600	Callee	r_list_get_n		5158362	0					
ANR	5158601	Identifier	r_list_get_n		5158362	0					
ANR	5158602	ArgumentList	l		5158362	1					
ANR	5158603	Argument	l		5158362	0					
ANR	5158604	Identifier	l		5158362	0					
ANR	5158605	Argument	2		5158362	1					
ANR	5158606	PrimaryExpression	2		5158362	0					
ANR	5158607	ExpressionStatement	"printf ( "" - n=2 => %s\\n"" , foo )"	657:1:12603:12633	5158362	17	True				
ANR	5158608	CallExpression	"printf ( "" - n=2 => %s\\n"" , foo )"		5158362	0					
ANR	5158609	Callee	printf		5158362	0					
ANR	5158610	Identifier	printf		5158362	0					
ANR	5158611	ArgumentList	""" - n=2 => %s\\n"""		5158362	1					
ANR	5158612	Argument	""" - n=2 => %s\\n"""		5158362	0					
ANR	5158613	PrimaryExpression	""" - n=2 => %s\\n"""		5158362	0					
ANR	5158614	Argument	foo		5158362	1					
ANR	5158615	Identifier	foo		5158362	0					
ANR	5158616	ExpressionStatement	iter = r_list_iterator ( l )	658:1:12636:12662	5158362	18	True				
ANR	5158617	AssignmentExpression	iter = r_list_iterator ( l )		5158362	0		=			
ANR	5158618	Identifier	iter		5158362	0					
ANR	5158619	CallExpression	r_list_iterator ( l )		5158362	1					
ANR	5158620	Callee	r_list_iterator		5158362	0					
ANR	5158621	Identifier	r_list_iterator		5158362	0					
ANR	5158622	ArgumentList	l		5158362	1					
ANR	5158623	Argument	l		5158362	0					
ANR	5158624	Identifier	l		5158362	0					
ANR	5158625	WhileStatement	while ( r_list_iter_next ( iter ) )		5158362	19					
ANR	5158626	Condition	r_list_iter_next ( iter )	659:8:12672:12694	5158362	0	True				
ANR	5158627	CallExpression	r_list_iter_next ( iter )		5158362	0					
ANR	5158628	Callee	r_list_iter_next		5158362	0					
ANR	5158629	Identifier	r_list_iter_next		5158362	0					
ANR	5158630	ArgumentList	iter		5158362	1					
ANR	5158631	Argument	iter		5158362	0					
ANR	5158632	Identifier	iter		5158362	0					
ANR	5158633	CompoundStatement		43:2:941:975	5158362	1					
ANR	5158634	IdentifierDeclStatement	RListIter * cur = iter ;	660:2:12701:12722	5158362	0	True				
ANR	5158635	IdentifierDecl	* cur = iter		5158362	0					
ANR	5158636	IdentifierDeclType	RListIter *		5158362	0					
ANR	5158637	Identifier	cur		5158362	1					
ANR	5158638	AssignmentExpression	* cur = iter		5158362	2		=			
ANR	5158639	Identifier	iter		5158362	0					
ANR	5158640	Identifier	iter		5158362	1					
ANR	5158641	IdentifierDeclStatement	char * str = r_list_iter_get ( iter ) ;	661:2:12726:12760	5158362	1	True				
ANR	5158642	IdentifierDecl	* str = r_list_iter_get ( iter )		5158362	0					
ANR	5158643	IdentifierDeclType	char *		5158362	0					
ANR	5158644	Identifier	str		5158362	1					
ANR	5158645	AssignmentExpression	* str = r_list_iter_get ( iter )		5158362	2		=			
ANR	5158646	Identifier	str		5158362	0					
ANR	5158647	CallExpression	r_list_iter_get ( iter )		5158362	1					
ANR	5158648	Callee	r_list_iter_get		5158362	0					
ANR	5158649	Identifier	r_list_iter_get		5158362	0					
ANR	5158650	ArgumentList	iter		5158362	1					
ANR	5158651	Argument	iter		5158362	0					
ANR	5158652	Identifier	iter		5158362	0					
ANR	5158653	IfStatement	"if ( ! strcmp ( str , ""bar"" ) )"		5158362	2					
ANR	5158654	Condition	"! strcmp ( str , ""bar"" )"	662:6:12768:12787	5158362	0	True				
ANR	5158655	UnaryOperationExpression	"! strcmp ( str , ""bar"" )"		5158362	0					
ANR	5158656	UnaryOperator	!		5158362	0					
ANR	5158657	CallExpression	"strcmp ( str , ""bar"" )"		5158362	1					
ANR	5158658	Callee	strcmp		5158362	0					
ANR	5158659	Identifier	strcmp		5158362	0					
ANR	5158660	ArgumentList	str		5158362	1					
ANR	5158661	Argument	str		5158362	0					
ANR	5158662	Identifier	str		5158362	0					
ANR	5158663	Argument	"""bar"""		5158362	1					
ANR	5158664	PrimaryExpression	"""bar"""		5158362	0					
ANR	5158665	ExpressionStatement	"r_list_delete ( l , cur )"	663:3:12793:12815	5158362	1	True				
ANR	5158666	CallExpression	"r_list_delete ( l , cur )"		5158362	0					
ANR	5158667	Callee	r_list_delete		5158362	0					
ANR	5158668	Identifier	r_list_delete		5158362	0					
ANR	5158669	ArgumentList	l		5158362	1					
ANR	5158670	Argument	l		5158362	0					
ANR	5158671	Identifier	l		5158362	0					
ANR	5158672	Argument	cur		5158362	1					
ANR	5158673	Identifier	cur		5158362	0					
ANR	5158674	ExpressionStatement	iter = r_list_iterator ( l )	666:1:12822:12848	5158362	20	True				
ANR	5158675	AssignmentExpression	iter = r_list_iterator ( l )		5158362	0		=			
ANR	5158676	Identifier	iter		5158362	0					
ANR	5158677	CallExpression	r_list_iterator ( l )		5158362	1					
ANR	5158678	Callee	r_list_iterator		5158362	0					
ANR	5158679	Identifier	r_list_iterator		5158362	0					
ANR	5158680	ArgumentList	l		5158362	1					
ANR	5158681	Argument	l		5158362	0					
ANR	5158682	Identifier	l		5158362	0					
ANR	5158683	WhileStatement	while ( r_list_iter_next ( iter ) )		5158362	21					
ANR	5158684	Condition	r_list_iter_next ( iter )	667:8:12858:12880	5158362	0	True				
ANR	5158685	CallExpression	r_list_iter_next ( iter )		5158362	0					
ANR	5158686	Callee	r_list_iter_next		5158362	0					
ANR	5158687	Identifier	r_list_iter_next		5158362	0					
ANR	5158688	ArgumentList	iter		5158362	1					
ANR	5158689	Argument	iter		5158362	0					
ANR	5158690	Identifier	iter		5158362	0					
ANR	5158691	CompoundStatement		50:2:1102:1136	5158362	1					
ANR	5158692	IdentifierDeclStatement	char * str = r_list_iter_get ( iter ) ;	668:2:12887:12921	5158362	0	True				
ANR	5158693	IdentifierDecl	* str = r_list_iter_get ( iter )		5158362	0					
ANR	5158694	IdentifierDeclType	char *		5158362	0					
ANR	5158695	Identifier	str		5158362	1					
ANR	5158696	AssignmentExpression	* str = r_list_iter_get ( iter )		5158362	2		=			
ANR	5158697	Identifier	str		5158362	0					
ANR	5158698	CallExpression	r_list_iter_get ( iter )		5158362	1					
ANR	5158699	Callee	r_list_iter_get		5158362	0					
ANR	5158700	Identifier	r_list_iter_get		5158362	0					
ANR	5158701	ArgumentList	iter		5158362	1					
ANR	5158702	Argument	iter		5158362	0					
ANR	5158703	Identifier	iter		5158362	0					
ANR	5158704	ExpressionStatement	"printf ( "" - %s\\n"" , str )"	670:2:12958:12981	5158362	1	True				
ANR	5158705	CallExpression	"printf ( "" - %s\\n"" , str )"		5158362	0					
ANR	5158706	Callee	printf		5158362	0					
ANR	5158707	Identifier	printf		5158362	0					
ANR	5158708	ArgumentList	""" - %s\\n"""		5158362	1					
ANR	5158709	Argument	""" - %s\\n"""		5158362	0					
ANR	5158710	PrimaryExpression	""" - %s\\n"""		5158362	0					
ANR	5158711	Argument	str		5158362	1					
ANR	5158712	Identifier	str		5158362	0					
ANR	5158713	ExpressionStatement	r_list_free ( l )	673:1:12988:13003	5158362	22	True				
ANR	5158714	CallExpression	r_list_free ( l )		5158362	0					
ANR	5158715	Callee	r_list_free		5158362	0					
ANR	5158716	Identifier	r_list_free		5158362	0					
ANR	5158717	ArgumentList	l		5158362	1					
ANR	5158718	Argument	l		5158362	0					
ANR	5158719	Identifier	l		5158362	0					
ANR	5158720	ExpressionStatement	l = r_list_new ( )	676:1:13028:13045	5158362	23	True				
ANR	5158721	AssignmentExpression	l = r_list_new ( )		5158362	0		=			
ANR	5158722	Identifier	l		5158362	0					
ANR	5158723	CallExpression	r_list_new ( )		5158362	1					
ANR	5158724	Callee	r_list_new		5158362	0					
ANR	5158725	Identifier	r_list_new		5158362	0					
ANR	5158726	ArgumentList			5158362	1					
ANR	5158727	ExpressionStatement	l -> free = free	677:1:13048:13062	5158362	24	True				
ANR	5158728	AssignmentExpression	l -> free = free		5158362	0		=			
ANR	5158729	PtrMemberAccess	l -> free		5158362	0					
ANR	5158730	Identifier	l		5158362	0					
ANR	5158731	Identifier	free		5158362	1					
ANR	5158732	Identifier	free		5158362	1					
ANR	5158733	ExpressionStatement	"r_list_append ( l , strdup ( ""one"" ) )"	679:1:13066:13099	5158362	25	True				
ANR	5158734	CallExpression	"r_list_append ( l , strdup ( ""one"" ) )"		5158362	0					
ANR	5158735	Callee	r_list_append		5158362	0					
ANR	5158736	Identifier	r_list_append		5158362	0					
ANR	5158737	ArgumentList	l		5158362	1					
ANR	5158738	Argument	l		5158362	0					
ANR	5158739	Identifier	l		5158362	0					
ANR	5158740	Argument	"strdup ( ""one"" )"		5158362	1					
ANR	5158741	CallExpression	"strdup ( ""one"" )"		5158362	0					
ANR	5158742	Callee	strdup		5158362	0					
ANR	5158743	Identifier	strdup		5158362	0					
ANR	5158744	ArgumentList	"""one"""		5158362	1					
ANR	5158745	Argument	"""one"""		5158362	0					
ANR	5158746	PrimaryExpression	"""one"""		5158362	0					
ANR	5158747	ExpressionStatement	"r_list_append ( l , strdup ( ""two"" ) )"	680:1:13102:13135	5158362	26	True				
ANR	5158748	CallExpression	"r_list_append ( l , strdup ( ""two"" ) )"		5158362	0					
ANR	5158749	Callee	r_list_append		5158362	0					
ANR	5158750	Identifier	r_list_append		5158362	0					
ANR	5158751	ArgumentList	l		5158362	1					
ANR	5158752	Argument	l		5158362	0					
ANR	5158753	Identifier	l		5158362	0					
ANR	5158754	Argument	"strdup ( ""two"" )"		5158362	1					
ANR	5158755	CallExpression	"strdup ( ""two"" )"		5158362	0					
ANR	5158756	Callee	strdup		5158362	0					
ANR	5158757	Identifier	strdup		5158362	0					
ANR	5158758	ArgumentList	"""two"""		5158362	1					
ANR	5158759	Argument	"""two"""		5158362	0					
ANR	5158760	PrimaryExpression	"""two"""		5158362	0					
ANR	5158761	ExpressionStatement	"r_list_append ( l , strdup ( ""tri"" ) )"	681:1:13138:13171	5158362	27	True				
ANR	5158762	CallExpression	"r_list_append ( l , strdup ( ""tri"" ) )"		5158362	0					
ANR	5158763	Callee	r_list_append		5158362	0					
ANR	5158764	Identifier	r_list_append		5158362	0					
ANR	5158765	ArgumentList	l		5158362	1					
ANR	5158766	Argument	l		5158362	0					
ANR	5158767	Identifier	l		5158362	0					
ANR	5158768	Argument	"strdup ( ""tri"" )"		5158362	1					
ANR	5158769	CallExpression	"strdup ( ""tri"" )"		5158362	0					
ANR	5158770	Callee	strdup		5158362	0					
ANR	5158771	Identifier	strdup		5158362	0					
ANR	5158772	ArgumentList	"""tri"""		5158362	1					
ANR	5158773	Argument	"""tri"""		5158362	0					
ANR	5158774	PrimaryExpression	"""tri"""		5158362	0					
ANR	5158775	ExpressionStatement	"it = r_list_append ( l , strdup ( ""LAST"" ) )"	682:1:13174:13213	5158362	28	True				
ANR	5158776	AssignmentExpression	"it = r_list_append ( l , strdup ( ""LAST"" ) )"		5158362	0		=			
ANR	5158777	Identifier	it		5158362	0					
ANR	5158778	CallExpression	"r_list_append ( l , strdup ( ""LAST"" ) )"		5158362	1					
ANR	5158779	Callee	r_list_append		5158362	0					
ANR	5158780	Identifier	r_list_append		5158362	0					
ANR	5158781	ArgumentList	l		5158362	1					
ANR	5158782	Argument	l		5158362	0					
ANR	5158783	Identifier	l		5158362	0					
ANR	5158784	Argument	"strdup ( ""LAST"" )"		5158362	1					
ANR	5158785	CallExpression	"strdup ( ""LAST"" )"		5158362	0					
ANR	5158786	Callee	strdup		5158362	0					
ANR	5158787	Identifier	strdup		5158362	0					
ANR	5158788	ArgumentList	"""LAST"""		5158362	1					
ANR	5158789	Argument	"""LAST"""		5158362	0					
ANR	5158790	PrimaryExpression	"""LAST"""		5158362	0					
ANR	5158791	ExpressionStatement	"r_list_delete ( l , it )"	684:1:13217:13238	5158362	29	True				
ANR	5158792	CallExpression	"r_list_delete ( l , it )"		5158362	0					
ANR	5158793	Callee	r_list_delete		5158362	0					
ANR	5158794	Identifier	r_list_delete		5158362	0					
ANR	5158795	ArgumentList	l		5158362	1					
ANR	5158796	Argument	l		5158362	0					
ANR	5158797	Identifier	l		5158362	0					
ANR	5158798	Argument	it		5158362	1					
ANR	5158799	Identifier	it		5158362	0					
ANR	5158800	CompoundStatement		69:2:1461:1495	5158362	30					
ANR	5158801	IdentifierDeclStatement	RListIter * i = r_list_iterator ( l ) ;	687:2:13246:13280	5158362	0	True				
ANR	5158802	IdentifierDecl	* i = r_list_iterator ( l )		5158362	0					
ANR	5158803	IdentifierDeclType	RListIter *		5158362	0					
ANR	5158804	Identifier	i		5158362	1					
ANR	5158805	AssignmentExpression	* i = r_list_iterator ( l )		5158362	2		=			
ANR	5158806	Identifier	i		5158362	0					
ANR	5158807	CallExpression	r_list_iterator ( l )		5158362	1					
ANR	5158808	Callee	r_list_iterator		5158362	0					
ANR	5158809	Identifier	r_list_iterator		5158362	0					
ANR	5158810	ArgumentList	l		5158362	1					
ANR	5158811	Argument	l		5158362	0					
ANR	5158812	Identifier	l		5158362	0					
ANR	5158813	ForStatement	for ( ; i ; i = i -> n )		5158362	1					
ANR	5158814	Condition	i	688:9:13291:13291	5158362	0	True				
ANR	5158815	Identifier	i		5158362	0					
ANR	5158816	AssignmentExpression	i = i -> n	688:12:13294:13301	5158362	1	True	=			
ANR	5158817	Identifier	i		5158362	0					
ANR	5158818	PtrMemberAccess	i -> n		5158362	1					
ANR	5158819	Identifier	i		5158362	0					
ANR	5158820	Identifier	n		5158362	1					
ANR	5158821	CompoundStatement		71:3:1524:1543	5158362	2					
ANR	5158822	IdentifierDeclStatement	char * str = i -> data ;	689:3:13309:13328	5158362	0	True				
ANR	5158823	IdentifierDecl	* str = i -> data		5158362	0					
ANR	5158824	IdentifierDeclType	char *		5158362	0					
ANR	5158825	Identifier	str		5158362	1					
ANR	5158826	AssignmentExpression	* str = i -> data		5158362	2		=			
ANR	5158827	Identifier	str		5158362	0					
ANR	5158828	PtrMemberAccess	i -> data		5158362	1					
ANR	5158829	Identifier	i		5158362	0					
ANR	5158830	Identifier	data		5158362	1					
ANR	5158831	ExpressionStatement	"printf ( "" * %s\\n"" , str )"	690:3:13333:13356	5158362	1	True				
ANR	5158832	CallExpression	"printf ( "" * %s\\n"" , str )"		5158362	0					
ANR	5158833	Callee	printf		5158362	0					
ANR	5158834	Identifier	printf		5158362	0					
ANR	5158835	ArgumentList	""" * %s\\n"""		5158362	1					
ANR	5158836	Argument	""" * %s\\n"""		5158362	0					
ANR	5158837	PrimaryExpression	""" * %s\\n"""		5158362	0					
ANR	5158838	Argument	str		5158362	1					
ANR	5158839	Identifier	str		5158362	0					
ANR	5158840	ExpressionStatement	r_list_free ( l )	694:1:13367:13382	5158362	31	True				
ANR	5158841	CallExpression	r_list_free ( l )		5158362	0					
ANR	5158842	Callee	r_list_free		5158362	0					
ANR	5158843	Identifier	r_list_free		5158362	0					
ANR	5158844	ArgumentList	l		5158362	1					
ANR	5158845	Argument	l		5158362	0					
ANR	5158846	Identifier	l		5158362	0					
ANR	5158847	ExpressionStatement	l = r_list_new ( )	696:1:13386:13403	5158362	32	True				
ANR	5158848	AssignmentExpression	l = r_list_new ( )		5158362	0		=			
ANR	5158849	Identifier	l		5158362	0					
ANR	5158850	CallExpression	r_list_new ( )		5158362	1					
ANR	5158851	Callee	r_list_new		5158362	0					
ANR	5158852	Identifier	r_list_new		5158362	0					
ANR	5158853	ArgumentList			5158362	1					
ANR	5158854	ExpressionStatement	l -> free = free	697:1:13406:13420	5158362	33	True				
ANR	5158855	AssignmentExpression	l -> free = free		5158362	0		=			
ANR	5158856	PtrMemberAccess	l -> free		5158362	0					
ANR	5158857	Identifier	l		5158362	0					
ANR	5158858	Identifier	free		5158362	1					
ANR	5158859	Identifier	free		5158362	1					
ANR	5158860	ExpressionStatement	"r_list_append ( l , strdup ( ""one"" ) )"	699:1:13424:13457	5158362	34	True				
ANR	5158861	CallExpression	"r_list_append ( l , strdup ( ""one"" ) )"		5158362	0					
ANR	5158862	Callee	r_list_append		5158362	0					
ANR	5158863	Identifier	r_list_append		5158362	0					
ANR	5158864	ArgumentList	l		5158362	1					
ANR	5158865	Argument	l		5158362	0					
ANR	5158866	Identifier	l		5158362	0					
ANR	5158867	Argument	"strdup ( ""one"" )"		5158362	1					
ANR	5158868	CallExpression	"strdup ( ""one"" )"		5158362	0					
ANR	5158869	Callee	strdup		5158362	0					
ANR	5158870	Identifier	strdup		5158362	0					
ANR	5158871	ArgumentList	"""one"""		5158362	1					
ANR	5158872	Argument	"""one"""		5158362	0					
ANR	5158873	PrimaryExpression	"""one"""		5158362	0					
ANR	5158874	ExpressionStatement	"r_list_append ( l , strdup ( ""two"" ) )"	700:1:13460:13493	5158362	35	True				
ANR	5158875	CallExpression	"r_list_append ( l , strdup ( ""two"" ) )"		5158362	0					
ANR	5158876	Callee	r_list_append		5158362	0					
ANR	5158877	Identifier	r_list_append		5158362	0					
ANR	5158878	ArgumentList	l		5158362	1					
ANR	5158879	Argument	l		5158362	0					
ANR	5158880	Identifier	l		5158362	0					
ANR	5158881	Argument	"strdup ( ""two"" )"		5158362	1					
ANR	5158882	CallExpression	"strdup ( ""two"" )"		5158362	0					
ANR	5158883	Callee	strdup		5158362	0					
ANR	5158884	Identifier	strdup		5158362	0					
ANR	5158885	ArgumentList	"""two"""		5158362	1					
ANR	5158886	Argument	"""two"""		5158362	0					
ANR	5158887	PrimaryExpression	"""two"""		5158362	0					
ANR	5158888	ExpressionStatement	"r_list_append ( l , strdup ( ""tri"" ) )"	701:1:13496:13529	5158362	36	True				
ANR	5158889	CallExpression	"r_list_append ( l , strdup ( ""tri"" ) )"		5158362	0					
ANR	5158890	Callee	r_list_append		5158362	0					
ANR	5158891	Identifier	r_list_append		5158362	0					
ANR	5158892	ArgumentList	l		5158362	1					
ANR	5158893	Argument	l		5158362	0					
ANR	5158894	Identifier	l		5158362	0					
ANR	5158895	Argument	"strdup ( ""tri"" )"		5158362	1					
ANR	5158896	CallExpression	"strdup ( ""tri"" )"		5158362	0					
ANR	5158897	Callee	strdup		5158362	0					
ANR	5158898	Identifier	strdup		5158362	0					
ANR	5158899	ArgumentList	"""tri"""		5158362	1					
ANR	5158900	Argument	"""tri"""		5158362	0					
ANR	5158901	PrimaryExpression	"""tri"""		5158362	0					
ANR	5158902	CompoundStatement		90:2:1824:1835	5158362	37					
ANR	5158903	IdentifierDeclStatement	char * str ;	704:2:13537:13546	5158362	0	True				
ANR	5158904	IdentifierDecl	* str		5158362	0					
ANR	5158905	IdentifierDeclType	char *		5158362	0					
ANR	5158906	Identifier	str		5158362	1					
ANR	5158907	Statement	r_list_foreach	705:2:13550:13563	5158362	1	True				
ANR	5158908	Statement	(	705:17:13565:13565	5158362	2	True				
ANR	5158909	Statement	l	705:18:13566:13566	5158362	3	True				
ANR	5158910	Statement	","	705:19:13567:13567	5158362	4	True				
ANR	5158911	Statement	it	705:21:13569:13570	5158362	5	True				
ANR	5158912	Statement	","	705:23:13571:13571	5158362	6	True				
ANR	5158913	Statement	str	705:25:13573:13575	5158362	7	True				
ANR	5158914	Statement	)	705:28:13576:13576	5158362	8	True				
ANR	5158915	ExpressionStatement	"printf ( "" - %s\\n"" , str )"	706:3:13581:13604	5158362	9	True				
ANR	5158916	CallExpression	"printf ( "" - %s\\n"" , str )"		5158362	0					
ANR	5158917	Callee	printf		5158362	0					
ANR	5158918	Identifier	printf		5158362	0					
ANR	5158919	ArgumentList	""" - %s\\n"""		5158362	1					
ANR	5158920	Argument	""" - %s\\n"""		5158362	0					
ANR	5158921	PrimaryExpression	""" - %s\\n"""		5158362	0					
ANR	5158922	Argument	str		5158362	1					
ANR	5158923	Identifier	str		5158362	0					
ANR	5158924	IdentifierDeclStatement	RList * list ;	708:2:13609:13620	5158362	10	True				
ANR	5158925	IdentifierDecl	* list		5158362	0					
ANR	5158926	IdentifierDeclType	RList *		5158362	0					
ANR	5158927	Identifier	list		5158362	1					
ANR	5158928	ExpressionStatement	list = r_list_clone ( l )	709:2:13624:13647	5158362	11	True				
ANR	5158929	AssignmentExpression	list = r_list_clone ( l )		5158362	0		=			
ANR	5158930	Identifier	list		5158362	0					
ANR	5158931	CallExpression	r_list_clone ( l )		5158362	1					
ANR	5158932	Callee	r_list_clone		5158362	0					
ANR	5158933	Identifier	r_list_clone		5158362	0					
ANR	5158934	ArgumentList	l		5158362	1					
ANR	5158935	Argument	l		5158362	0					
ANR	5158936	Identifier	l		5158362	0					
ANR	5158937	Statement	r_list_foreach	711:2:13652:13665	5158362	12	True				
ANR	5158938	Statement	(	711:17:13667:13667	5158362	13	True				
ANR	5158939	Statement	list	711:18:13668:13671	5158362	14	True				
ANR	5158940	Statement	","	711:22:13672:13672	5158362	15	True				
ANR	5158941	Statement	it	711:24:13674:13675	5158362	16	True				
ANR	5158942	Statement	","	711:26:13676:13676	5158362	17	True				
ANR	5158943	Statement	str	711:28:13678:13680	5158362	18	True				
ANR	5158944	Statement	)	711:31:13681:13681	5158362	19	True				
ANR	5158945	ExpressionStatement	"printf ( "" - %s\\n"" , str )"	712:3:13686:13709	5158362	20	True				
ANR	5158946	CallExpression	"printf ( "" - %s\\n"" , str )"		5158362	0					
ANR	5158947	Callee	printf		5158362	0					
ANR	5158948	Identifier	printf		5158362	0					
ANR	5158949	ArgumentList	""" - %s\\n"""		5158362	1					
ANR	5158950	Argument	""" - %s\\n"""		5158362	0					
ANR	5158951	PrimaryExpression	""" - %s\\n"""		5158362	0					
ANR	5158952	Argument	str		5158362	1					
ANR	5158953	Identifier	str		5158362	0					
ANR	5158954	ExpressionStatement	r_list_reverse ( l )	714:2:13714:13732	5158362	21	True				
ANR	5158955	CallExpression	r_list_reverse ( l )		5158362	0					
ANR	5158956	Callee	r_list_reverse		5158362	0					
ANR	5158957	Identifier	r_list_reverse		5158362	0					
ANR	5158958	ArgumentList	l		5158362	1					
ANR	5158959	Argument	l		5158362	0					
ANR	5158960	Identifier	l		5158362	0					
ANR	5158961	Statement	r_list_foreach	716:2:13737:13750	5158362	22	True				
ANR	5158962	Statement	(	716:17:13752:13752	5158362	23	True				
ANR	5158963	Statement	l	716:18:13753:13753	5158362	24	True				
ANR	5158964	Statement	","	716:19:13754:13754	5158362	25	True				
ANR	5158965	Statement	it	716:21:13756:13757	5158362	26	True				
ANR	5158966	Statement	","	716:23:13758:13758	5158362	27	True				
ANR	5158967	Statement	str	716:25:13760:13762	5158362	28	True				
ANR	5158968	Statement	)	716:28:13763:13763	5158362	29	True				
ANR	5158969	ExpressionStatement	"printf ( "" * %s\\n"" , str )"	717:3:13768:13791	5158362	30	True				
ANR	5158970	CallExpression	"printf ( "" * %s\\n"" , str )"		5158362	0					
ANR	5158971	Callee	printf		5158362	0					
ANR	5158972	Identifier	printf		5158362	0					
ANR	5158973	ArgumentList	""" * %s\\n"""		5158362	1					
ANR	5158974	Argument	""" * %s\\n"""		5158362	0					
ANR	5158975	PrimaryExpression	""" * %s\\n"""		5158362	0					
ANR	5158976	Argument	str		5158362	1					
ANR	5158977	Identifier	str		5158362	0					
ANR	5158978	ExpressionStatement	r_list_free ( l )	720:1:13798:13813	5158362	38	True				
ANR	5158979	CallExpression	r_list_free ( l )		5158362	0					
ANR	5158980	Callee	r_list_free		5158362	0					
ANR	5158981	Identifier	r_list_free		5158362	0					
ANR	5158982	ArgumentList	l		5158362	1					
ANR	5158983	Argument	l		5158362	0					
ANR	5158984	Identifier	l		5158362	0					
ANR	5158985	ReturnStatement	return 0 ;	722:1:13817:13825	5158362	39	True				
ANR	5158986	PrimaryExpression	0		5158362	0					
ANR	5158987	ReturnType	int		5158362	1					
ANR	5158988	Identifier	main		5158362	2					
ANR	5158989	ParameterList			5158362	3					
ANR	5158990	CFGEntryNode	ENTRY		5158362		True				
ANR	5158991	CFGExitNode	EXIT		5158362		True				
ANR	5158992	Symbol	strcmp		5158362						
ANR	5158993	Symbol	cur		5158362						
ANR	5158994	Symbol	r_list_iter_next		5158362						
ANR	5158995	Symbol	foo		5158362						
ANR	5158996	Symbol	iter		5158362						
ANR	5158997	Symbol	r_list_iterator		5158362						
ANR	5158998	Symbol	r_list_iter_get		5158362						
ANR	5158999	Symbol	r_list_get_n		5158362						
ANR	5159000	Symbol	i		5158362						
ANR	5159001	Symbol	r_list_clone		5158362						
ANR	5159002	Symbol	it		5158362						
ANR	5159003	Symbol	l		5158362						
ANR	5159004	Symbol	list		5158362						
ANR	5159005	Symbol	i -> data		5158362						
ANR	5159006	Symbol	str		5158362						
ANR	5159007	Symbol	* i		5158362						
ANR	5159008	Symbol	i -> n		5158362						
ANR	5159009	Symbol	r_list_append		5158362						
ANR	5159010	Symbol	* l		5158362						
ANR	5159011	Symbol	l -> free		5158362						
ANR	5159012	Symbol	strdup		5158362						
ANR	5159013	Symbol	free		5158362						
ANR	5159014	Symbol	r_list_new		5158362						
