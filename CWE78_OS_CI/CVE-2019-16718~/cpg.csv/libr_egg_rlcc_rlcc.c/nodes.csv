command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4788664	File	data/converged/CVE-2019-16718~_radare2/libr_egg_rlcc_rlcc.c								
ANR	4788665	Function	isComment	6:0:101:276							
ANR	4788666	FunctionDef	isComment (mpc_ast_t * node)		4788665	0					
ANR	4788667	CompoundStatement		6:38:139:276	4788665	0					
ANR	4788668	IfStatement	"if ( ! strcmp ( node -> tag , ""comment|regex"" ) )"		4788665	0					
ANR	4788669	Condition	"! strcmp ( node -> tag , ""comment|regex"" )"	7:5:146:181	4788665	0	True				
ANR	4788670	UnaryOperationExpression	"! strcmp ( node -> tag , ""comment|regex"" )"		4788665	0					
ANR	4788671	UnaryOperator	!		4788665	0					
ANR	4788672	CallExpression	"strcmp ( node -> tag , ""comment|regex"" )"		4788665	1					
ANR	4788673	Callee	strcmp		4788665	0					
ANR	4788674	Identifier	strcmp		4788665	0					
ANR	4788675	ArgumentList	node -> tag		4788665	1					
ANR	4788676	Argument	node -> tag		4788665	0					
ANR	4788677	PtrMemberAccess	node -> tag		4788665	0					
ANR	4788678	Identifier	node		4788665	0					
ANR	4788679	Identifier	tag		4788665	1					
ANR	4788680	Argument	"""comment|regex"""		4788665	1					
ANR	4788681	PrimaryExpression	"""comment|regex"""		4788665	0					
ANR	4788682	CompoundStatement		2:43:44:44	4788665	1					
ANR	4788683	ReturnStatement	return 1 ;	8:2:188:196	4788665	0	True				
ANR	4788684	PrimaryExpression	1		4788665	0					
ANR	4788685	IfStatement	"if ( ! strcmp ( node -> tag , ""linecomment|regex"" ) )"		4788665	1					
ANR	4788686	Condition	"! strcmp ( node -> tag , ""linecomment|regex"" )"	10:5:206:245	4788665	0	True				
ANR	4788687	UnaryOperationExpression	"! strcmp ( node -> tag , ""linecomment|regex"" )"		4788665	0					
ANR	4788688	UnaryOperator	!		4788665	0					
ANR	4788689	CallExpression	"strcmp ( node -> tag , ""linecomment|regex"" )"		4788665	1					
ANR	4788690	Callee	strcmp		4788665	0					
ANR	4788691	Identifier	strcmp		4788665	0					
ANR	4788692	ArgumentList	node -> tag		4788665	1					
ANR	4788693	Argument	node -> tag		4788665	0					
ANR	4788694	PtrMemberAccess	node -> tag		4788665	0					
ANR	4788695	Identifier	node		4788665	0					
ANR	4788696	Identifier	tag		4788665	1					
ANR	4788697	Argument	"""linecomment|regex"""		4788665	1					
ANR	4788698	PrimaryExpression	"""linecomment|regex"""		4788665	0					
ANR	4788699	CompoundStatement		5:47:108:108	4788665	1					
ANR	4788700	ReturnStatement	return 1 ;	11:2:252:260	4788665	0	True				
ANR	4788701	PrimaryExpression	1		4788665	0					
ANR	4788702	ReturnStatement	return 0 ;	13:1:266:274	4788665	2	True				
ANR	4788703	PrimaryExpression	0		4788665	0					
ANR	4788704	ReturnType	static int		4788665	1					
ANR	4788705	Identifier	isComment		4788665	2					
ANR	4788706	ParameterList	mpc_ast_t * node		4788665	3					
ANR	4788707	Parameter	mpc_ast_t * node	6:21:122:136	4788665	0	True				
ANR	4788708	ParameterType	mpc_ast_t *		4788665	0					
ANR	4788709	Identifier	node		4788665	1					
ANR	4788710	CFGEntryNode	ENTRY		4788665		True				
ANR	4788711	CFGExitNode	EXIT		4788665		True				
ANR	4788712	Symbol	strcmp		4788665						
ANR	4788713	Symbol	node		4788665						
ANR	4788714	Symbol	node -> tag		4788665						
ANR	4788715	Symbol	* node		4788665						
ANR	4788716	Function	isInlineAssembly	16:0:279:393							
ANR	4788717	FunctionDef	isInlineAssembly (mpc_ast_t * node)		4788716	0					
ANR	4788718	CompoundStatement		16:45:324:393	4788716	0					
ANR	4788719	IfStatement	"if ( ! strcmp ( node -> tag , ""asm|regex"" ) )"		4788716	0					
ANR	4788720	Condition	"! strcmp ( node -> tag , ""asm|regex"" )"	17:5:331:362	4788716	0	True				
ANR	4788721	UnaryOperationExpression	"! strcmp ( node -> tag , ""asm|regex"" )"		4788716	0					
ANR	4788722	UnaryOperator	!		4788716	0					
ANR	4788723	CallExpression	"strcmp ( node -> tag , ""asm|regex"" )"		4788716	1					
ANR	4788724	Callee	strcmp		4788716	0					
ANR	4788725	Identifier	strcmp		4788716	0					
ANR	4788726	ArgumentList	node -> tag		4788716	1					
ANR	4788727	Argument	node -> tag		4788716	0					
ANR	4788728	PtrMemberAccess	node -> tag		4788716	0					
ANR	4788729	Identifier	node		4788716	0					
ANR	4788730	Identifier	tag		4788716	1					
ANR	4788731	Argument	"""asm|regex"""		4788716	1					
ANR	4788732	PrimaryExpression	"""asm|regex"""		4788716	0					
ANR	4788733	CompoundStatement		2:39:40:40	4788716	1					
ANR	4788734	ReturnStatement	return 1 ;	18:2:369:377	4788716	0	True				
ANR	4788735	PrimaryExpression	1		4788716	0					
ANR	4788736	ReturnStatement	return 0 ;	20:1:383:391	4788716	1	True				
ANR	4788737	PrimaryExpression	0		4788716	0					
ANR	4788738	ReturnType	static int		4788716	1					
ANR	4788739	Identifier	isInlineAssembly		4788716	2					
ANR	4788740	ParameterList	mpc_ast_t * node		4788716	3					
ANR	4788741	Parameter	mpc_ast_t * node	16:28:307:321	4788716	0	True				
ANR	4788742	ParameterType	mpc_ast_t *		4788716	0					
ANR	4788743	Identifier	node		4788716	1					
ANR	4788744	CFGEntryNode	ENTRY		4788716		True				
ANR	4788745	CFGExitNode	EXIT		4788716		True				
ANR	4788746	Symbol	strcmp		4788716						
ANR	4788747	Symbol	node		4788716						
ANR	4788748	Symbol	node -> tag		4788716						
ANR	4788749	Symbol	* node		4788716						
ANR	4788750	Function	isStatement	23:0:396:502							
ANR	4788751	FunctionDef	isStatement (mpc_ast_t * node)		4788750	0					
ANR	4788752	CompoundStatement		23:40:436:502	4788750	0					
ANR	4788753	IfStatement	"if ( ! strcmp ( node -> tag , ""stmt|>"" ) )"		4788750	0					
ANR	4788754	Condition	"! strcmp ( node -> tag , ""stmt|>"" )"	24:5:443:471	4788750	0	True				
ANR	4788755	UnaryOperationExpression	"! strcmp ( node -> tag , ""stmt|>"" )"		4788750	0					
ANR	4788756	UnaryOperator	!		4788750	0					
ANR	4788757	CallExpression	"strcmp ( node -> tag , ""stmt|>"" )"		4788750	1					
ANR	4788758	Callee	strcmp		4788750	0					
ANR	4788759	Identifier	strcmp		4788750	0					
ANR	4788760	ArgumentList	node -> tag		4788750	1					
ANR	4788761	Argument	node -> tag		4788750	0					
ANR	4788762	PtrMemberAccess	node -> tag		4788750	0					
ANR	4788763	Identifier	node		4788750	0					
ANR	4788764	Identifier	tag		4788750	1					
ANR	4788765	Argument	"""stmt|>"""		4788750	1					
ANR	4788766	PrimaryExpression	"""stmt|>"""		4788750	0					
ANR	4788767	CompoundStatement		2:36:37:37	4788750	1					
ANR	4788768	ReturnStatement	return 1 ;	25:2:478:486	4788750	0	True				
ANR	4788769	PrimaryExpression	1		4788750	0					
ANR	4788770	ReturnStatement	return 0 ;	27:1:492:500	4788750	1	True				
ANR	4788771	PrimaryExpression	0		4788750	0					
ANR	4788772	ReturnType	static int		4788750	1					
ANR	4788773	Identifier	isStatement		4788750	2					
ANR	4788774	ParameterList	mpc_ast_t * node		4788750	3					
ANR	4788775	Parameter	mpc_ast_t * node	23:23:419:433	4788750	0	True				
ANR	4788776	ParameterType	mpc_ast_t *		4788750	0					
ANR	4788777	Identifier	node		4788750	1					
ANR	4788778	CFGEntryNode	ENTRY		4788750		True				
ANR	4788779	CFGExitNode	EXIT		4788750		True				
ANR	4788780	Symbol	strcmp		4788750						
ANR	4788781	Symbol	node		4788750						
ANR	4788782	Symbol	node -> tag		4788750						
ANR	4788783	Symbol	* node		4788750						
ANR	4788784	Function	isSigdef	30:0:505:610							
ANR	4788785	FunctionDef	isSigdef (mpc_ast_t * node)		4788784	0					
ANR	4788786	CompoundStatement		30:37:542:610	4788784	0					
ANR	4788787	IfStatement	"if ( ! strcmp ( node -> tag , ""sigdef|>"" ) )"		4788784	0					
ANR	4788788	Condition	"! strcmp ( node -> tag , ""sigdef|>"" )"	31:5:549:579	4788784	0	True				
ANR	4788789	UnaryOperationExpression	"! strcmp ( node -> tag , ""sigdef|>"" )"		4788784	0					
ANR	4788790	UnaryOperator	!		4788784	0					
ANR	4788791	CallExpression	"strcmp ( node -> tag , ""sigdef|>"" )"		4788784	1					
ANR	4788792	Callee	strcmp		4788784	0					
ANR	4788793	Identifier	strcmp		4788784	0					
ANR	4788794	ArgumentList	node -> tag		4788784	1					
ANR	4788795	Argument	node -> tag		4788784	0					
ANR	4788796	PtrMemberAccess	node -> tag		4788784	0					
ANR	4788797	Identifier	node		4788784	0					
ANR	4788798	Identifier	tag		4788784	1					
ANR	4788799	Argument	"""sigdef|>"""		4788784	1					
ANR	4788800	PrimaryExpression	"""sigdef|>"""		4788784	0					
ANR	4788801	CompoundStatement		2:38:39:39	4788784	1					
ANR	4788802	ReturnStatement	return 1 ;	32:2:586:594	4788784	0	True				
ANR	4788803	PrimaryExpression	1		4788784	0					
ANR	4788804	ReturnStatement	return 0 ;	34:1:600:608	4788784	1	True				
ANR	4788805	PrimaryExpression	0		4788784	0					
ANR	4788806	ReturnType	static int		4788784	1					
ANR	4788807	Identifier	isSigdef		4788784	2					
ANR	4788808	ParameterList	mpc_ast_t * node		4788784	3					
ANR	4788809	Parameter	mpc_ast_t * node	30:20:525:539	4788784	0	True				
ANR	4788810	ParameterType	mpc_ast_t *		4788784	0					
ANR	4788811	Identifier	node		4788784	1					
ANR	4788812	CFGEntryNode	ENTRY		4788784		True				
ANR	4788813	CFGExitNode	EXIT		4788784		True				
ANR	4788814	Symbol	strcmp		4788784						
ANR	4788815	Symbol	node		4788784						
ANR	4788816	Symbol	node -> tag		4788784						
ANR	4788817	Symbol	* node		4788784						
ANR	4788818	Function	isProcedure	37:0:613:724							
ANR	4788819	FunctionDef	isProcedure (mpc_ast_t * node)		4788818	0					
ANR	4788820	CompoundStatement		37:40:653:724	4788818	0					
ANR	4788821	IfStatement	"if ( ! strcmp ( node -> tag , ""procedure|>"" ) )"		4788818	0					
ANR	4788822	Condition	"! strcmp ( node -> tag , ""procedure|>"" )"	38:5:660:693	4788818	0	True				
ANR	4788823	UnaryOperationExpression	"! strcmp ( node -> tag , ""procedure|>"" )"		4788818	0					
ANR	4788824	UnaryOperator	!		4788818	0					
ANR	4788825	CallExpression	"strcmp ( node -> tag , ""procedure|>"" )"		4788818	1					
ANR	4788826	Callee	strcmp		4788818	0					
ANR	4788827	Identifier	strcmp		4788818	0					
ANR	4788828	ArgumentList	node -> tag		4788818	1					
ANR	4788829	Argument	node -> tag		4788818	0					
ANR	4788830	PtrMemberAccess	node -> tag		4788818	0					
ANR	4788831	Identifier	node		4788818	0					
ANR	4788832	Identifier	tag		4788818	1					
ANR	4788833	Argument	"""procedure|>"""		4788818	1					
ANR	4788834	PrimaryExpression	"""procedure|>"""		4788818	0					
ANR	4788835	CompoundStatement		2:41:42:42	4788818	1					
ANR	4788836	ReturnStatement	return 1 ;	39:2:700:708	4788818	0	True				
ANR	4788837	PrimaryExpression	1		4788818	0					
ANR	4788838	ReturnStatement	return 0 ;	41:1:714:722	4788818	1	True				
ANR	4788839	PrimaryExpression	0		4788818	0					
ANR	4788840	ReturnType	static int		4788818	1					
ANR	4788841	Identifier	isProcedure		4788818	2					
ANR	4788842	ParameterList	mpc_ast_t * node		4788818	3					
ANR	4788843	Parameter	mpc_ast_t * node	37:23:636:650	4788818	0	True				
ANR	4788844	ParameterType	mpc_ast_t *		4788818	0					
ANR	4788845	Identifier	node		4788818	1					
ANR	4788846	CFGEntryNode	ENTRY		4788818		True				
ANR	4788847	CFGExitNode	EXIT		4788818		True				
ANR	4788848	Symbol	strcmp		4788818						
ANR	4788849	Symbol	node		4788818						
ANR	4788850	Symbol	node -> tag		4788818						
ANR	4788851	Symbol	* node		4788818						
ANR	4788852	Function	processNode	44:0:727:2654							
ANR	4788853	FunctionDef	processNode (mpc_ast_t * node)		4788852	0					
ANR	4788854	CompoundStatement		44:42:769:2654	4788852	0					
ANR	4788855	IfStatement	if ( isStatement ( node ) )		4788852	0					
ANR	4788856	Condition	isStatement ( node )	45:5:776:792	4788852	0	True				
ANR	4788857	CallExpression	isStatement ( node )		4788852	0					
ANR	4788858	Callee	isStatement		4788852	0					
ANR	4788859	Identifier	isStatement		4788852	0					
ANR	4788860	ArgumentList	node		4788852	1					
ANR	4788861	Argument	node		4788852	0					
ANR	4788862	Identifier	node		4788852	0					
ANR	4788863	CompoundStatement		4:2:48:68	4788852	1					
ANR	4788864	IdentifierDeclStatement	"int i , narg = 0 ;"	46:2:799:814	4788852	0	True				
ANR	4788865	IdentifierDecl	i		4788852	0					
ANR	4788866	IdentifierDeclType	int		4788852	0					
ANR	4788867	Identifier	i		4788852	1					
ANR	4788868	IdentifierDecl	narg = 0		4788852	1					
ANR	4788869	IdentifierDeclType	int		4788852	0					
ANR	4788870	Identifier	narg		4788852	1					
ANR	4788871	AssignmentExpression	narg = 0		4788852	2		=			
ANR	4788872	Identifier	narg		4788852	0					
ANR	4788873	PrimaryExpression	0		4788852	1					
ANR	4788874	IdentifierDeclStatement	const char * args [ 32 ] ;	47:2:818:838	4788852	1	True				
ANR	4788875	IdentifierDecl	* args [ 32 ]		4788852	0					
ANR	4788876	IdentifierDeclType	const char * [ 32 ]		4788852	0					
ANR	4788877	Identifier	args		4788852	1					
ANR	4788878	PrimaryExpression	32		4788852	2					
ANR	4788879	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		4788852	2					
ANR	4788880	ForInit	i = 0 ;	48:7:847:851	4788852	0	True				
ANR	4788881	AssignmentExpression	i = 0		4788852	0		=			
ANR	4788882	Identifier	i		4788852	0					
ANR	4788883	PrimaryExpression	0		4788852	1					
ANR	4788884	Condition	i < node -> children_num	48:13:853:872	4788852	1	True				
ANR	4788885	RelationalExpression	i < node -> children_num		4788852	0		<			
ANR	4788886	Identifier	i		4788852	0					
ANR	4788887	PtrMemberAccess	node -> children_num		4788852	1					
ANR	4788888	Identifier	node		4788852	0					
ANR	4788889	Identifier	children_num		4788852	1					
ANR	4788890	PostIncDecOperationExpression	i ++	48:35:875:877	4788852	2	True				
ANR	4788891	Identifier	i		4788852	0					
ANR	4788892	IncDec	++		4788852	1					
ANR	4788893	CompoundStatement		7:3:160:205	4788852	3					
ANR	4788894	IdentifierDeclStatement	const char * tag = node -> children [ i ] -> tag ;	49:3:885:925	4788852	0	True				
ANR	4788895	IdentifierDecl	* tag = node -> children [ i ] -> tag		4788852	0					
ANR	4788896	IdentifierDeclType	const char *		4788852	0					
ANR	4788897	Identifier	tag		4788852	1					
ANR	4788898	AssignmentExpression	* tag = node -> children [ i ] -> tag		4788852	2		=			
ANR	4788899	Identifier	tag		4788852	0					
ANR	4788900	PtrMemberAccess	node -> children [ i ] -> tag		4788852	1					
ANR	4788901	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4788902	PtrMemberAccess	node -> children		4788852	0					
ANR	4788903	Identifier	node		4788852	0					
ANR	4788904	Identifier	children		4788852	1					
ANR	4788905	Identifier	i		4788852	1					
ANR	4788906	Identifier	tag		4788852	1					
ANR	4788907	IdentifierDeclStatement	const char * val = node -> children [ i ] -> contents ;	50:3:930:975	4788852	1	True				
ANR	4788908	IdentifierDecl	* val = node -> children [ i ] -> contents		4788852	0					
ANR	4788909	IdentifierDeclType	const char *		4788852	0					
ANR	4788910	Identifier	val		4788852	1					
ANR	4788911	AssignmentExpression	* val = node -> children [ i ] -> contents		4788852	2		=			
ANR	4788912	Identifier	val		4788852	0					
ANR	4788913	PtrMemberAccess	node -> children [ i ] -> contents		4788852	1					
ANR	4788914	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4788915	PtrMemberAccess	node -> children		4788852	0					
ANR	4788916	Identifier	node		4788852	0					
ANR	4788917	Identifier	children		4788852	1					
ANR	4788918	Identifier	i		4788852	1					
ANR	4788919	Identifier	contents		4788852	1					
ANR	4788920	IfStatement	"if ( strcmp ( tag , ""char"" ) )"		4788852	2					
ANR	4788921	Condition	"strcmp ( tag , ""char"" )"	51:7:984:1003	4788852	0	True				
ANR	4788922	CallExpression	"strcmp ( tag , ""char"" )"		4788852	0					
ANR	4788923	Callee	strcmp		4788852	0					
ANR	4788924	Identifier	strcmp		4788852	0					
ANR	4788925	ArgumentList	tag		4788852	1					
ANR	4788926	Argument	tag		4788852	0					
ANR	4788927	Identifier	tag		4788852	0					
ANR	4788928	Argument	"""char"""		4788852	1					
ANR	4788929	PrimaryExpression	"""char"""		4788852	0					
ANR	4788930	CompoundStatement		8:29:236:236	4788852	1					
ANR	4788931	ExpressionStatement	"printf ( ""TAG (%s) = (%s)\\n"" , tag , val )"	52:4:1012:1050	4788852	0	True				
ANR	4788932	CallExpression	"printf ( ""TAG (%s) = (%s)\\n"" , tag , val )"		4788852	0					
ANR	4788933	Callee	printf		4788852	0					
ANR	4788934	Identifier	printf		4788852	0					
ANR	4788935	ArgumentList	"""TAG (%s) = (%s)\\n"""		4788852	1					
ANR	4788936	Argument	"""TAG (%s) = (%s)\\n"""		4788852	0					
ANR	4788937	PrimaryExpression	"""TAG (%s) = (%s)\\n"""		4788852	0					
ANR	4788938	Argument	tag		4788852	1					
ANR	4788939	Identifier	tag		4788852	0					
ANR	4788940	Argument	val		4788852	2					
ANR	4788941	Identifier	val		4788852	0					
ANR	4788942	ExpressionStatement	args [ narg ++ ] = val	53:4:1056:1074	4788852	1	True				
ANR	4788943	AssignmentExpression	args [ narg ++ ] = val		4788852	0		=			
ANR	4788944	ArrayIndexing	args [ narg ++ ]		4788852	0					
ANR	4788945	Identifier	args		4788852	0					
ANR	4788946	PostIncDecOperationExpression	narg ++		4788852	1					
ANR	4788947	Identifier	narg		4788852	0					
ANR	4788948	IncDec	++		4788852	1					
ANR	4788949	Identifier	val		4788852	1					
ANR	4788950	ExpressionStatement	"printf ( ""; CALL WITH %d ARGS\\n"" , narg )"	56:2:1087:1125	4788852	3	True				
ANR	4788951	CallExpression	"printf ( ""; CALL WITH %d ARGS\\n"" , narg )"		4788852	0					
ANR	4788952	Callee	printf		4788852	0					
ANR	4788953	Identifier	printf		4788852	0					
ANR	4788954	ArgumentList	"""; CALL WITH %d ARGS\\n"""		4788852	1					
ANR	4788955	Argument	"""; CALL WITH %d ARGS\\n"""		4788852	0					
ANR	4788956	PrimaryExpression	"""; CALL WITH %d ARGS\\n"""		4788852	0					
ANR	4788957	Argument	narg		4788852	1					
ANR	4788958	Identifier	narg		4788852	0					
ANR	4788959	ElseStatement	else		4788852	0					
ANR	4788960	IfStatement	if ( isProcedure ( node ) )		4788852	0					
ANR	4788961	Condition	isProcedure ( node )	57:12:1139:1156	4788852	0	True				
ANR	4788962	CallExpression	isProcedure ( node )		4788852	0					
ANR	4788963	Callee	isProcedure		4788852	0					
ANR	4788964	Identifier	isProcedure		4788852	0					
ANR	4788965	ArgumentList	node		4788852	1					
ANR	4788966	Argument	node		4788852	0					
ANR	4788967	Identifier	node		4788852	0					
ANR	4788968	CompoundStatement		16:2:405:451	4788852	1					
ANR	4788969	IdentifierDeclStatement	"int i , j ;"	58:2:1163:1171	4788852	0	True				
ANR	4788970	IdentifierDecl	i		4788852	0					
ANR	4788971	IdentifierDeclType	int		4788852	0					
ANR	4788972	Identifier	i		4788852	1					
ANR	4788973	IdentifierDecl	j		4788852	1					
ANR	4788974	IdentifierDeclType	int		4788852	0					
ANR	4788975	Identifier	j		4788852	1					
ANR	4788976	IdentifierDeclStatement	const char * name = node -> children [ 0 ] -> contents ;	59:2:1175:1221	4788852	1	True				
ANR	4788977	IdentifierDecl	* name = node -> children [ 0 ] -> contents		4788852	0					
ANR	4788978	IdentifierDeclType	const char *		4788852	0					
ANR	4788979	Identifier	name		4788852	1					
ANR	4788980	AssignmentExpression	* name = node -> children [ 0 ] -> contents		4788852	2		=			
ANR	4788981	Identifier	name		4788852	0					
ANR	4788982	PtrMemberAccess	node -> children [ 0 ] -> contents		4788852	1					
ANR	4788983	ArrayIndexing	node -> children [ 0 ]		4788852	0					
ANR	4788984	PtrMemberAccess	node -> children		4788852	0					
ANR	4788985	Identifier	node		4788852	0					
ANR	4788986	Identifier	children		4788852	1					
ANR	4788987	PrimaryExpression	0		4788852	1					
ANR	4788988	Identifier	contents		4788852	1					
ANR	4788989	ExpressionStatement	"printf ( ""%s:\\n"" , name )"	60:2:1225:1247	4788852	2	True				
ANR	4788990	CallExpression	"printf ( ""%s:\\n"" , name )"		4788852	0					
ANR	4788991	Callee	printf		4788852	0					
ANR	4788992	Identifier	printf		4788852	0					
ANR	4788993	ArgumentList	"""%s:\\n"""		4788852	1					
ANR	4788994	Argument	"""%s:\\n"""		4788852	0					
ANR	4788995	PrimaryExpression	"""%s:\\n"""		4788852	0					
ANR	4788996	Argument	name		4788852	1					
ANR	4788997	Identifier	name		4788852	0					
ANR	4788998	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		4788852	3					
ANR	4788999	ForInit	i = 0 ;	61:7:1256:1260	4788852	0	True				
ANR	4789000	AssignmentExpression	i = 0		4788852	0		=			
ANR	4789001	Identifier	i		4788852	0					
ANR	4789002	PrimaryExpression	0		4788852	1					
ANR	4789003	Condition	i < node -> children_num	61:13:1262:1281	4788852	1	True				
ANR	4789004	RelationalExpression	i < node -> children_num		4788852	0		<			
ANR	4789005	Identifier	i		4788852	0					
ANR	4789006	PtrMemberAccess	node -> children_num		4788852	1					
ANR	4789007	Identifier	node		4788852	0					
ANR	4789008	Identifier	children_num		4788852	1					
ANR	4789009	PostIncDecOperationExpression	i ++	61:35:1284:1286	4788852	2	True				
ANR	4789010	Identifier	i		4788852	0					
ANR	4789011	IncDec	++		4788852	1					
ANR	4789012	CompoundStatement		18:40:519:519	4788852	3					
ANR	4789013	IfStatement	"if ( ! strcmp ( node -> children [ i ] -> tag , ""body|>"" ) )"		4788852	0					
ANR	4789014	Condition	"! strcmp ( node -> children [ i ] -> tag , ""body|>"" )"	62:7:1298:1339	4788852	0	True				
ANR	4789015	UnaryOperationExpression	"! strcmp ( node -> children [ i ] -> tag , ""body|>"" )"		4788852	0					
ANR	4789016	UnaryOperator	!		4788852	0					
ANR	4789017	CallExpression	"strcmp ( node -> children [ i ] -> tag , ""body|>"" )"		4788852	1					
ANR	4789018	Callee	strcmp		4788852	0					
ANR	4789019	Identifier	strcmp		4788852	0					
ANR	4789020	ArgumentList	node -> children [ i ] -> tag		4788852	1					
ANR	4789021	Argument	node -> children [ i ] -> tag		4788852	0					
ANR	4789022	PtrMemberAccess	node -> children [ i ] -> tag		4788852	0					
ANR	4789023	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4789024	PtrMemberAccess	node -> children		4788852	0					
ANR	4789025	Identifier	node		4788852	0					
ANR	4789026	Identifier	children		4788852	1					
ANR	4789027	Identifier	i		4788852	1					
ANR	4789028	Identifier	tag		4788852	1					
ANR	4789029	Argument	"""body|>"""		4788852	1					
ANR	4789030	PrimaryExpression	"""body|>"""		4788852	0					
ANR	4789031	CompoundStatement		19:51:572:572	4788852	1					
ANR	4789032	ExpressionStatement	node = node -> children [ i ]	63:4:1348:1372	4788852	0	True				
ANR	4789033	AssignmentExpression	node = node -> children [ i ]		4788852	0		=			
ANR	4789034	Identifier	node		4788852	0					
ANR	4789035	ArrayIndexing	node -> children [ i ]		4788852	1					
ANR	4789036	PtrMemberAccess	node -> children		4788852	0					
ANR	4789037	Identifier	node		4788852	0					
ANR	4789038	Identifier	children		4788852	1					
ANR	4789039	Identifier	i		4788852	1					
ANR	4789040	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		4788852	1					
ANR	4789041	ForInit	i = 0 ;	64:9:1383:1387	4788852	0	True				
ANR	4789042	AssignmentExpression	i = 0		4788852	0		=			
ANR	4789043	Identifier	i		4788852	0					
ANR	4789044	PrimaryExpression	0		4788852	1					
ANR	4789045	Condition	i < node -> children_num	64:15:1389:1408	4788852	1	True				
ANR	4789046	RelationalExpression	i < node -> children_num		4788852	0		<			
ANR	4789047	Identifier	i		4788852	0					
ANR	4789048	PtrMemberAccess	node -> children_num		4788852	1					
ANR	4789049	Identifier	node		4788852	0					
ANR	4789050	Identifier	children_num		4788852	1					
ANR	4789051	PostIncDecOperationExpression	i ++	64:37:1411:1413	4788852	2	True				
ANR	4789052	Identifier	i		4788852	0					
ANR	4789053	IncDec	++		4788852	1					
ANR	4789054	CompoundStatement		21:42:646:646	4788852	3					
ANR	4789055	IfStatement	"if ( ! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" ) )"		4788852	0					
ANR	4789056	Condition	"! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"	65:9:1427:1468	4788852	0	True				
ANR	4789057	UnaryOperationExpression	"! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"		4788852	0					
ANR	4789058	UnaryOperator	!		4788852	0					
ANR	4789059	CallExpression	"strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"		4788852	1					
ANR	4789060	Callee	strcmp		4788852	0					
ANR	4789061	Identifier	strcmp		4788852	0					
ANR	4789062	ArgumentList	node -> children [ i ] -> tag		4788852	1					
ANR	4789063	Argument	node -> children [ i ] -> tag		4788852	0					
ANR	4789064	PtrMemberAccess	node -> children [ i ] -> tag		4788852	0					
ANR	4789065	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4789066	PtrMemberAccess	node -> children		4788852	0					
ANR	4789067	Identifier	node		4788852	0					
ANR	4789068	Identifier	children		4788852	1					
ANR	4789069	Identifier	i		4788852	1					
ANR	4789070	Identifier	tag		4788852	1					
ANR	4789071	Argument	"""stmt|>"""		4788852	1					
ANR	4789072	PrimaryExpression	"""stmt|>"""		4788852	0					
ANR	4789073	CompoundStatement		22:53:701:701	4788852	1					
ANR	4789074	ExpressionStatement	processNode ( node -> children [ i ] )	66:6:1479:1510	4788852	0	True				
ANR	4789075	CallExpression	processNode ( node -> children [ i ] )		4788852	0					
ANR	4789076	Callee	processNode		4788852	0					
ANR	4789077	Identifier	processNode		4788852	0					
ANR	4789078	ArgumentList	node -> children [ i ]		4788852	1					
ANR	4789079	Argument	node -> children [ i ]		4788852	0					
ANR	4789080	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4789081	PtrMemberAccess	node -> children		4788852	0					
ANR	4789082	Identifier	node		4788852	0					
ANR	4789083	Identifier	children		4788852	1					
ANR	4789084	Identifier	i		4788852	1					
ANR	4789085	ElseStatement	else		4788852	0					
ANR	4789086	CompoundStatement		24:12:754:754	4788852	0					
ANR	4789087	ExpressionStatement	"eprintf ( ""UNK %s\\n"" , node -> children [ i ] -> tag )"	68:6:1532:1576	4788852	0	True				
ANR	4789088	CallExpression	"eprintf ( ""UNK %s\\n"" , node -> children [ i ] -> tag )"		4788852	0					
ANR	4789089	Callee	eprintf		4788852	0					
ANR	4789090	Identifier	eprintf		4788852	0					
ANR	4789091	ArgumentList	"""UNK %s\\n"""		4788852	1					
ANR	4789092	Argument	"""UNK %s\\n"""		4788852	0					
ANR	4789093	PrimaryExpression	"""UNK %s\\n"""		4788852	0					
ANR	4789094	Argument	node -> children [ i ] -> tag		4788852	1					
ANR	4789095	PtrMemberAccess	node -> children [ i ] -> tag		4788852	0					
ANR	4789096	ArrayIndexing	node -> children [ i ]		4788852	0					
ANR	4789097	PtrMemberAccess	node -> children		4788852	0					
ANR	4789098	Identifier	node		4788852	0					
ANR	4789099	Identifier	children		4788852	1					
ANR	4789100	Identifier	i		4788852	1					
ANR	4789101	Identifier	tag		4788852	1					
ANR	4789102	BreakStatement	break ;	71:4:1595:1600	4788852	2	True				
ANR	4789103	ElseStatement	else		4788852	0					
ANR	4789104	IfStatement	if ( isSigdef ( node ) )		4788852	0					
ANR	4789105	Condition	isSigdef ( node )	74:12:1623:1637	4788852	0	True				
ANR	4789106	CallExpression	isSigdef ( node )		4788852	0					
ANR	4789107	Callee	isSigdef		4788852	0					
ANR	4789108	Identifier	isSigdef		4788852	0					
ANR	4789109	ArgumentList	node		4788852	1					
ANR	4789110	Argument	node		4788852	0					
ANR	4789111	Identifier	node		4788852	0					
ANR	4789112	CompoundStatement		31:29:870:870	4788852	1					
ANR	4789113	IfStatement	if ( node -> children_num > 4 )		4788852	0					
ANR	4789114	Condition	node -> children_num > 4	75:6:1648:1667	4788852	0	True				
ANR	4789115	RelationalExpression	node -> children_num > 4		4788852	0		>			
ANR	4789116	PtrMemberAccess	node -> children_num		4788852	0					
ANR	4789117	Identifier	node		4788852	0					
ANR	4789118	Identifier	children_num		4788852	1					
ANR	4789119	PrimaryExpression	4		4788852	1					
ANR	4789120	CompoundStatement		35:3:1007:1053	4788852	1					
ANR	4789121	IdentifierDeclStatement	const char * name = node -> children [ 0 ] -> contents ;	76:3:1675:1721	4788852	0	True				
ANR	4789122	IdentifierDecl	* name = node -> children [ 0 ] -> contents		4788852	0					
ANR	4789123	IdentifierDeclType	const char *		4788852	0					
ANR	4789124	Identifier	name		4788852	1					
ANR	4789125	AssignmentExpression	* name = node -> children [ 0 ] -> contents		4788852	2		=			
ANR	4789126	Identifier	name		4788852	0					
ANR	4789127	PtrMemberAccess	node -> children [ 0 ] -> contents		4788852	1					
ANR	4789128	ArrayIndexing	node -> children [ 0 ]		4788852	0					
ANR	4789129	PtrMemberAccess	node -> children		4788852	0					
ANR	4789130	Identifier	node		4788852	0					
ANR	4789131	Identifier	children		4788852	1					
ANR	4789132	PrimaryExpression	0		4788852	1					
ANR	4789133	Identifier	contents		4788852	1					
ANR	4789134	IdentifierDeclStatement	const char * type = node -> children [ 2 ] -> contents ;	77:3:1726:1772	4788852	1	True				
ANR	4789135	IdentifierDecl	* type = node -> children [ 2 ] -> contents		4788852	0					
ANR	4789136	IdentifierDeclType	const char *		4788852	0					
ANR	4789137	Identifier	type		4788852	1					
ANR	4789138	AssignmentExpression	* type = node -> children [ 2 ] -> contents		4788852	2		=			
ANR	4789139	Identifier	type		4788852	0					
ANR	4789140	PtrMemberAccess	node -> children [ 2 ] -> contents		4788852	1					
ANR	4789141	ArrayIndexing	node -> children [ 2 ]		4788852	0					
ANR	4789142	PtrMemberAccess	node -> children		4788852	0					
ANR	4789143	Identifier	node		4788852	0					
ANR	4789144	Identifier	children		4788852	1					
ANR	4789145	PrimaryExpression	2		4788852	1					
ANR	4789146	Identifier	contents		4788852	1					
ANR	4789147	IdentifierDeclStatement	const char * size = node -> children [ 4 ] -> contents ;	78:3:1777:1823	4788852	2	True				
ANR	4789148	IdentifierDecl	* size = node -> children [ 4 ] -> contents		4788852	0					
ANR	4789149	IdentifierDeclType	const char *		4788852	0					
ANR	4789150	Identifier	size		4788852	1					
ANR	4789151	AssignmentExpression	* size = node -> children [ 4 ] -> contents		4788852	2		=			
ANR	4789152	Identifier	size		4788852	0					
ANR	4789153	PtrMemberAccess	node -> children [ 4 ] -> contents		4788852	1					
ANR	4789154	ArrayIndexing	node -> children [ 4 ]		4788852	0					
ANR	4789155	PtrMemberAccess	node -> children		4788852	0					
ANR	4789156	Identifier	node		4788852	0					
ANR	4789157	Identifier	children		4788852	1					
ANR	4789158	PrimaryExpression	4		4788852	1					
ANR	4789159	Identifier	contents		4788852	1					
ANR	4789160	IfStatement	"if ( ! strcmp ( type , ""alias"" ) )"		4788852	3					
ANR	4789161	Condition	"! strcmp ( type , ""alias"" )"	79:7:1832:1854	4788852	0	True				
ANR	4789162	UnaryOperationExpression	"! strcmp ( type , ""alias"" )"		4788852	0					
ANR	4789163	UnaryOperator	!		4788852	0					
ANR	4789164	CallExpression	"strcmp ( type , ""alias"" )"		4788852	1					
ANR	4789165	Callee	strcmp		4788852	0					
ANR	4789166	Identifier	strcmp		4788852	0					
ANR	4789167	ArgumentList	type		4788852	1					
ANR	4789168	Argument	type		4788852	0					
ANR	4789169	Identifier	type		4788852	0					
ANR	4789170	Argument	"""alias"""		4788852	1					
ANR	4789171	PrimaryExpression	"""alias"""		4788852	0					
ANR	4789172	CompoundStatement		36:32:1087:1087	4788852	1					
ANR	4789173	ExpressionStatement	"printf ( "".equ %s,%s\\n"" , name , size )"	80:4:1863:1898	4788852	0	True				
ANR	4789174	CallExpression	"printf ( "".equ %s,%s\\n"" , name , size )"		4788852	0					
ANR	4789175	Callee	printf		4788852	0					
ANR	4789176	Identifier	printf		4788852	0					
ANR	4789177	ArgumentList	""".equ %s,%s\\n"""		4788852	1					
ANR	4789178	Argument	""".equ %s,%s\\n"""		4788852	0					
ANR	4789179	PrimaryExpression	""".equ %s,%s\\n"""		4788852	0					
ANR	4789180	Argument	name		4788852	1					
ANR	4789181	Identifier	name		4788852	0					
ANR	4789182	Argument	size		4788852	2					
ANR	4789183	Identifier	size		4788852	0					
ANR	4789184	ElseStatement	else		4788852	0					
ANR	4789185	IfStatement	"if ( ! strcmp ( type , ""syscall"" ) )"		4788852	0					
ANR	4789186	Condition	"! strcmp ( type , ""syscall"" )"	81:14:1914:1938	4788852	0	True				
ANR	4789187	UnaryOperationExpression	"! strcmp ( type , ""syscall"" )"		4788852	0					
ANR	4789188	UnaryOperator	!		4788852	0					
ANR	4789189	CallExpression	"strcmp ( type , ""syscall"" )"		4788852	1					
ANR	4789190	Callee	strcmp		4788852	0					
ANR	4789191	Identifier	strcmp		4788852	0					
ANR	4789192	ArgumentList	type		4788852	1					
ANR	4789193	Argument	type		4788852	0					
ANR	4789194	Identifier	type		4788852	0					
ANR	4789195	Argument	"""syscall"""		4788852	1					
ANR	4789196	PrimaryExpression	"""syscall"""		4788852	0					
ANR	4789197	CompoundStatement		38:41:1171:1171	4788852	1					
ANR	4789198	ExpressionStatement	"printf ( ""; TODO: register syscall %s number %s\\n"" , name , size )"	82:4:1947:2009	4788852	0	True				
ANR	4789199	CallExpression	"printf ( ""; TODO: register syscall %s number %s\\n"" , name , size )"		4788852	0					
ANR	4789200	Callee	printf		4788852	0					
ANR	4789201	Identifier	printf		4788852	0					
ANR	4789202	ArgumentList	"""; TODO: register syscall %s number %s\\n"""		4788852	1					
ANR	4789203	Argument	"""; TODO: register syscall %s number %s\\n"""		4788852	0					
ANR	4789204	PrimaryExpression	"""; TODO: register syscall %s number %s\\n"""		4788852	0					
ANR	4789205	Argument	name		4788852	1					
ANR	4789206	Identifier	name		4788852	0					
ANR	4789207	Argument	size		4788852	2					
ANR	4789208	Identifier	size		4788852	0					
ANR	4789209	ElseStatement	else		4788852	0					
ANR	4789210	IfStatement	"if ( ! strcmp ( type , ""global"" ) )"		4788852	0					
ANR	4789211	Condition	"! strcmp ( type , ""global"" )"	83:14:2025:2048	4788852	0	True				
ANR	4789212	UnaryOperationExpression	"! strcmp ( type , ""global"" )"		4788852	0					
ANR	4789213	UnaryOperator	!		4788852	0					
ANR	4789214	CallExpression	"strcmp ( type , ""global"" )"		4788852	1					
ANR	4789215	Callee	strcmp		4788852	0					
ANR	4789216	Identifier	strcmp		4788852	0					
ANR	4789217	ArgumentList	type		4788852	1					
ANR	4789218	Argument	type		4788852	0					
ANR	4789219	Identifier	type		4788852	0					
ANR	4789220	Argument	"""global"""		4788852	1					
ANR	4789221	PrimaryExpression	"""global"""		4788852	0					
ANR	4789222	CompoundStatement		40:40:1281:1281	4788852	1					
ANR	4789223	ExpressionStatement	"printf ( ""; TODO: global \\n"" )"	84:4:2057:2085	4788852	0	True				
ANR	4789224	CallExpression	"printf ( ""; TODO: global \\n"" )"		4788852	0					
ANR	4789225	Callee	printf		4788852	0					
ANR	4789226	Identifier	printf		4788852	0					
ANR	4789227	ArgumentList	"""; TODO: global \\n"""		4788852	1					
ANR	4789228	Argument	"""; TODO: global \\n"""		4788852	0					
ANR	4789229	PrimaryExpression	"""; TODO: global \\n"""		4788852	0					
ANR	4789230	ElseStatement	else		4788852	0					
ANR	4789231	CompoundStatement		42:10:1327:1327	4788852	0					
ANR	4789232	ExpressionStatement	"printf ( ""; UNKNOWN EXPRESISON: NAME = '%s' "" , name )"	86:4:2103:2154	4788852	0	True				
ANR	4789233	CallExpression	"printf ( ""; UNKNOWN EXPRESISON: NAME = '%s' "" , name )"		4788852	0					
ANR	4789234	Callee	printf		4788852	0					
ANR	4789235	Identifier	printf		4788852	0					
ANR	4789236	ArgumentList	"""; UNKNOWN EXPRESISON: NAME = '%s' """		4788852	1					
ANR	4789237	Argument	"""; UNKNOWN EXPRESISON: NAME = '%s' """		4788852	0					
ANR	4789238	PrimaryExpression	"""; UNKNOWN EXPRESISON: NAME = '%s' """		4788852	0					
ANR	4789239	Argument	name		4788852	1					
ANR	4789240	Identifier	name		4788852	0					
ANR	4789241	ExpressionStatement	"printf ( ""TYPE = '%s' "" , type )"	87:4:2160:2189	4788852	1	True				
ANR	4789242	CallExpression	"printf ( ""TYPE = '%s' "" , type )"		4788852	0					
ANR	4789243	Callee	printf		4788852	0					
ANR	4789244	Identifier	printf		4788852	0					
ANR	4789245	ArgumentList	"""TYPE = '%s' """		4788852	1					
ANR	4789246	Argument	"""TYPE = '%s' """		4788852	0					
ANR	4789247	PrimaryExpression	"""TYPE = '%s' """		4788852	0					
ANR	4789248	Argument	type		4788852	1					
ANR	4789249	Identifier	type		4788852	0					
ANR	4789250	ExpressionStatement	"printf ( ""SIZE = '%s'\\n"" , size )"	88:4:2195:2225	4788852	2	True				
ANR	4789251	CallExpression	"printf ( ""SIZE = '%s'\\n"" , size )"		4788852	0					
ANR	4789252	Callee	printf		4788852	0					
ANR	4789253	Identifier	printf		4788852	0					
ANR	4789254	ArgumentList	"""SIZE = '%s'\\n"""		4788852	1					
ANR	4789255	Argument	"""SIZE = '%s'\\n"""		4788852	0					
ANR	4789256	PrimaryExpression	"""SIZE = '%s'\\n"""		4788852	0					
ANR	4789257	Argument	size		4788852	1					
ANR	4789258	Identifier	size		4788852	0					
ANR	4789259	ElseStatement	else		4788852	0					
ANR	4789260	IfStatement	if ( isComment ( node ) )		4788852	0					
ANR	4789261	Condition	isComment ( node )	91:12:2248:2263	4788852	0	True				
ANR	4789262	CallExpression	isComment ( node )		4788852	0					
ANR	4789263	Callee	isComment		4788852	0					
ANR	4789264	Identifier	isComment		4788852	0					
ANR	4789265	ArgumentList	node		4788852	1					
ANR	4789266	Argument	node		4788852	0					
ANR	4789267	Identifier	node		4788852	0					
ANR	4789268	CompoundStatement		50:2:1541:1561	4788852	1					
ANR	4789269	IdentifierDeclStatement	char * s = strdup ( node -> contents + 2 ) ;	92:2:2270:2307	4788852	0	True				
ANR	4789270	IdentifierDecl	* s = strdup ( node -> contents + 2 )		4788852	0					
ANR	4789271	IdentifierDeclType	char *		4788852	0					
ANR	4789272	Identifier	s		4788852	1					
ANR	4789273	AssignmentExpression	* s = strdup ( node -> contents + 2 )		4788852	2		=			
ANR	4789274	Identifier	s		4788852	0					
ANR	4789275	CallExpression	strdup ( node -> contents + 2 )		4788852	1					
ANR	4789276	Callee	strdup		4788852	0					
ANR	4789277	Identifier	strdup		4788852	0					
ANR	4789278	ArgumentList	node -> contents + 2		4788852	1					
ANR	4789279	Argument	node -> contents + 2		4788852	0					
ANR	4789280	AdditiveExpression	node -> contents + 2		4788852	0		+			
ANR	4789281	PtrMemberAccess	node -> contents		4788852	0					
ANR	4789282	Identifier	node		4788852	0					
ANR	4789283	Identifier	contents		4788852	1					
ANR	4789284	PrimaryExpression	2		4788852	1					
ANR	4789285	IdentifierDeclStatement	int len = strlen ( s ) ;	93:2:2311:2331	4788852	1	True				
ANR	4789286	IdentifierDecl	len = strlen ( s )		4788852	0					
ANR	4789287	IdentifierDeclType	int		4788852	0					
ANR	4789288	Identifier	len		4788852	1					
ANR	4789289	AssignmentExpression	len = strlen ( s )		4788852	2		=			
ANR	4789290	Identifier	len		4788852	0					
ANR	4789291	CallExpression	strlen ( s )		4788852	1					
ANR	4789292	Callee	strlen		4788852	0					
ANR	4789293	Identifier	strlen		4788852	0					
ANR	4789294	ArgumentList	s		4788852	1					
ANR	4789295	Argument	s		4788852	0					
ANR	4789296	Identifier	s		4788852	0					
ANR	4789297	IfStatement	if ( node -> contents [ 1 ] == '*' )		4788852	2					
ANR	4789298	Condition	node -> contents [ 1 ] == '*'	94:6:2339:2362	4788852	0	True				
ANR	4789299	EqualityExpression	node -> contents [ 1 ] == '*'		4788852	0		==			
ANR	4789300	ArrayIndexing	node -> contents [ 1 ]		4788852	0					
ANR	4789301	PtrMemberAccess	node -> contents		4788852	0					
ANR	4789302	Identifier	node		4788852	0					
ANR	4789303	Identifier	contents		4788852	1					
ANR	4789304	PrimaryExpression	1		4788852	1					
ANR	4789305	PrimaryExpression	'*'		4788852	1					
ANR	4789306	CompoundStatement		51:32:1595:1595	4788852	1					
ANR	4789307	ExpressionStatement	s [ len - 2 ] = 0	95:3:2370:2382	4788852	0	True				
ANR	4789308	AssignmentExpression	s [ len - 2 ] = 0		4788852	0		=			
ANR	4789309	ArrayIndexing	s [ len - 2 ]		4788852	0					
ANR	4789310	Identifier	s		4788852	0					
ANR	4789311	AdditiveExpression	len - 2		4788852	1		-			
ANR	4789312	Identifier	len		4788852	0					
ANR	4789313	PrimaryExpression	2		4788852	1					
ANR	4789314	PrimaryExpression	0		4788852	1					
ANR	4789315	WhileStatement	while ( s )		4788852	3					
ANR	4789316	Condition	s	97:9:2397:2397	4788852	0	True				
ANR	4789317	Identifier	s		4788852	0					
ANR	4789318	CompoundStatement		55:3:1635:1662	4788852	1					
ANR	4789319	IdentifierDeclStatement	"char * nl = strchr ( s , '\\n' ) ;"	98:3:2405:2432	4788852	0	True				
ANR	4789320	IdentifierDecl	"* nl = strchr ( s , '\\n' )"		4788852	0					
ANR	4789321	IdentifierDeclType	char *		4788852	0					
ANR	4789322	Identifier	nl		4788852	1					
ANR	4789323	AssignmentExpression	"* nl = strchr ( s , '\\n' )"		4788852	2		=			
ANR	4789324	Identifier	nl		4788852	0					
ANR	4789325	CallExpression	"strchr ( s , '\\n' )"		4788852	1					
ANR	4789326	Callee	strchr		4788852	0					
ANR	4789327	Identifier	strchr		4788852	0					
ANR	4789328	ArgumentList	s		4788852	1					
ANR	4789329	Argument	s		4788852	0					
ANR	4789330	Identifier	s		4788852	0					
ANR	4789331	Argument	'\\n'		4788852	1					
ANR	4789332	PrimaryExpression	'\\n'		4788852	0					
ANR	4789333	IfStatement	if ( nl )		4788852	1					
ANR	4789334	Condition	nl	99:7:2441:2442	4788852	0	True				
ANR	4789335	Identifier	nl		4788852	0					
ANR	4789336	CompoundStatement		56:11:1675:1675	4788852	1					
ANR	4789337	ExpressionStatement	* nl = 0	100:4:2451:2458	4788852	0	True				
ANR	4789338	AssignmentExpression	* nl = 0		4788852	0		=			
ANR	4789339	UnaryOperationExpression	* nl		4788852	0					
ANR	4789340	UnaryOperator	*		4788852	0					
ANR	4789341	Identifier	nl		4788852	1					
ANR	4789342	PrimaryExpression	0		4788852	1					
ANR	4789343	ExpressionStatement	"printf ( ""; %s\\n"" , s )"	101:4:2464:2484	4788852	1	True				
ANR	4789344	CallExpression	"printf ( ""; %s\\n"" , s )"		4788852	0					
ANR	4789345	Callee	printf		4788852	0					
ANR	4789346	Identifier	printf		4788852	0					
ANR	4789347	ArgumentList	"""; %s\\n"""		4788852	1					
ANR	4789348	Argument	"""; %s\\n"""		4788852	0					
ANR	4789349	PrimaryExpression	"""; %s\\n"""		4788852	0					
ANR	4789350	Argument	s		4788852	1					
ANR	4789351	Identifier	s		4788852	0					
ANR	4789352	ExpressionStatement	s = nl + 1	102:4:2490:2500	4788852	2	True				
ANR	4789353	AssignmentExpression	s = nl + 1		4788852	0		=			
ANR	4789354	Identifier	s		4788852	0					
ANR	4789355	AdditiveExpression	nl + 1		4788852	1		+			
ANR	4789356	Identifier	nl		4788852	0					
ANR	4789357	PrimaryExpression	1		4788852	1					
ANR	4789358	ElseStatement	else		4788852	0					
ANR	4789359	CompoundStatement		60:10:1742:1742	4788852	0					
ANR	4789360	ExpressionStatement	"printf ( ""; %s\\n"" , s )"	104:4:2518:2538	4788852	0	True				
ANR	4789361	CallExpression	"printf ( ""; %s\\n"" , s )"		4788852	0					
ANR	4789362	Callee	printf		4788852	0					
ANR	4789363	Identifier	printf		4788852	0					
ANR	4789364	ArgumentList	"""; %s\\n"""		4788852	1					
ANR	4789365	Argument	"""; %s\\n"""		4788852	0					
ANR	4789366	PrimaryExpression	"""; %s\\n"""		4788852	0					
ANR	4789367	Argument	s		4788852	1					
ANR	4789368	Identifier	s		4788852	0					
ANR	4789369	ExpressionStatement	s = NULL	105:4:2544:2552	4788852	1	True				
ANR	4789370	AssignmentExpression	s = NULL		4788852	0		=			
ANR	4789371	Identifier	s		4788852	0					
ANR	4789372	Identifier	NULL		4788852	1					
ANR	4789373	ExpressionStatement	free ( s )	108:2:2565:2573	4788852	4	True				
ANR	4789374	CallExpression	free ( s )		4788852	0					
ANR	4789375	Callee	free		4788852	0					
ANR	4789376	Identifier	free		4788852	0					
ANR	4789377	ArgumentList	s		4788852	1					
ANR	4789378	Argument	s		4788852	0					
ANR	4789379	Identifier	s		4788852	0					
ANR	4789380	ElseStatement	else		4788852	0					
ANR	4789381	IfStatement	if ( isInlineAssembly ( node ) )		4788852	0					
ANR	4789382	Condition	isInlineAssembly ( node )	109:12:2587:2609	4788852	0	True				
ANR	4789383	CallExpression	isInlineAssembly ( node )		4788852	0					
ANR	4789384	Callee	isInlineAssembly		4788852	0					
ANR	4789385	Identifier	isInlineAssembly		4788852	0					
ANR	4789386	ArgumentList	node		4788852	1					
ANR	4789387	Argument	node		4788852	0					
ANR	4789388	Identifier	node		4788852	0					
ANR	4789389	CompoundStatement		66:37:1842:1842	4788852	1					
ANR	4789390	ExpressionStatement	"printf ( ""%s\\n"" , node -> contents + 1 )"	110:2:2616:2649	4788852	0	True				
ANR	4789391	CallExpression	"printf ( ""%s\\n"" , node -> contents + 1 )"		4788852	0					
ANR	4789392	Callee	printf		4788852	0					
ANR	4789393	Identifier	printf		4788852	0					
ANR	4789394	ArgumentList	"""%s\\n"""		4788852	1					
ANR	4789395	Argument	"""%s\\n"""		4788852	0					
ANR	4789396	PrimaryExpression	"""%s\\n"""		4788852	0					
ANR	4789397	Argument	node -> contents + 1		4788852	1					
ANR	4789398	AdditiveExpression	node -> contents + 1		4788852	0		+			
ANR	4789399	PtrMemberAccess	node -> contents		4788852	0					
ANR	4789400	Identifier	node		4788852	0					
ANR	4789401	Identifier	contents		4788852	1					
ANR	4789402	PrimaryExpression	1		4788852	1					
ANR	4789403	ReturnType	static void		4788852	1					
ANR	4789404	Identifier	processNode		4788852	2					
ANR	4789405	ParameterList	mpc_ast_t * node		4788852	3					
ANR	4789406	Parameter	mpc_ast_t * node	44:25:752:766	4788852	0	True				
ANR	4789407	ParameterType	mpc_ast_t *		4788852	0					
ANR	4789408	Identifier	node		4788852	1					
ANR	4789409	CFGEntryNode	ENTRY		4788852		True				
ANR	4789410	CFGExitNode	EXIT		4788852		True				
ANR	4789411	Symbol	isComment		4788852						
ANR	4789412	Symbol	strchr		4788852						
ANR	4789413	Symbol	type		4788852						
ANR	4789414	Symbol	node -> children_num		4788852						
ANR	4789415	Symbol	* * node -> children		4788852						
ANR	4789416	Symbol	* args		4788852						
ANR	4789417	Symbol	isStatement		4788852						
ANR	4789418	Symbol	* * * node		4788852						
ANR	4789419	Symbol	node -> children [ 4 ] -> contents		4788852						
ANR	4789420	Symbol	strlen		4788852						
ANR	4789421	Symbol	len		4788852						
ANR	4789422	Symbol	node -> contents		4788852						
ANR	4789423	Symbol	* node		4788852						
ANR	4789424	Symbol	narg		4788852						
ANR	4789425	Symbol	tag		4788852						
ANR	4789426	Symbol	node -> children [ 2 ] -> contents		4788852						
ANR	4789427	Symbol	* node -> children		4788852						
ANR	4789428	Symbol	val		4788852						
ANR	4789429	Symbol	strcmp		4788852						
ANR	4789430	Symbol	* * i		4788852						
ANR	4789431	Symbol	NULL		4788852						
ANR	4789432	Symbol	node -> children [ 0 ] -> contents		4788852						
ANR	4789433	Symbol	* nl		4788852						
ANR	4789434	Symbol	i		4788852						
ANR	4789435	Symbol	j		4788852						
ANR	4789436	Symbol	args		4788852						
ANR	4789437	Symbol	node		4788852						
ANR	4789438	Symbol	* i		4788852						
ANR	4789439	Symbol	s		4788852						
ANR	4789440	Symbol	* * node		4788852						
ANR	4789441	Symbol	size		4788852						
ANR	4789442	Symbol	node -> children [ i ] -> tag		4788852						
ANR	4789443	Symbol	name		4788852						
ANR	4789444	Symbol	node -> children [ i ] -> contents		4788852						
ANR	4789445	Symbol	strdup		4788852						
ANR	4789446	Symbol	isProcedure		4788852						
ANR	4789447	Symbol	isSigdef		4788852						
ANR	4789448	Symbol	* s		4788852						
ANR	4789449	Symbol	node -> children		4788852						
ANR	4789450	Symbol	nl		4788852						
ANR	4789451	Symbol	* node -> contents		4788852						
ANR	4789452	Symbol	* len		4788852						
ANR	4789453	Symbol	isInlineAssembly		4788852						
ANR	4789454	Function	main	114:0:2657:8276							
ANR	4789455	FunctionDef	"main (int argc , char * * argv)"		4789454	0					
ANR	4789456	CompoundStatement		114:32:2689:8276	4789454	0					
ANR	4789457	IdentifierDeclStatement	"mpc_parser_t * Ident = mpc_new ( ""ident"" ) ;"	115:1:2692:2734	4789454	0	True				
ANR	4789458	IdentifierDecl	"* Ident = mpc_new ( ""ident"" )"		4789454	0					
ANR	4789459	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789460	Identifier	Ident		4789454	1					
ANR	4789461	AssignmentExpression	"* Ident = mpc_new ( ""ident"" )"		4789454	2		=			
ANR	4789462	Identifier	Ident		4789454	0					
ANR	4789463	CallExpression	"mpc_new ( ""ident"" )"		4789454	1					
ANR	4789464	Callee	mpc_new		4789454	0					
ANR	4789465	Identifier	mpc_new		4789454	0					
ANR	4789466	ArgumentList	"""ident"""		4789454	1					
ANR	4789467	Argument	"""ident"""		4789454	0					
ANR	4789468	PrimaryExpression	"""ident"""		4789454	0					
ANR	4789469	IdentifierDeclStatement	"mpc_parser_t * Number = mpc_new ( ""number"" ) ;"	116:1:2737:2780	4789454	1	True				
ANR	4789470	IdentifierDecl	"* Number = mpc_new ( ""number"" )"		4789454	0					
ANR	4789471	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789472	Identifier	Number		4789454	1					
ANR	4789473	AssignmentExpression	"* Number = mpc_new ( ""number"" )"		4789454	2		=			
ANR	4789474	Identifier	Number		4789454	0					
ANR	4789475	CallExpression	"mpc_new ( ""number"" )"		4789454	1					
ANR	4789476	Callee	mpc_new		4789454	0					
ANR	4789477	Identifier	mpc_new		4789454	0					
ANR	4789478	ArgumentList	"""number"""		4789454	1					
ANR	4789479	Argument	"""number"""		4789454	0					
ANR	4789480	PrimaryExpression	"""number"""		4789454	0					
ANR	4789481	IdentifierDeclStatement	"mpc_parser_t * Character = mpc_new ( ""character"" ) ;"	117:1:2783:2829	4789454	2	True				
ANR	4789482	IdentifierDecl	"* Character = mpc_new ( ""character"" )"		4789454	0					
ANR	4789483	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789484	Identifier	Character		4789454	1					
ANR	4789485	AssignmentExpression	"* Character = mpc_new ( ""character"" )"		4789454	2		=			
ANR	4789486	Identifier	Character		4789454	0					
ANR	4789487	CallExpression	"mpc_new ( ""character"" )"		4789454	1					
ANR	4789488	Callee	mpc_new		4789454	0					
ANR	4789489	Identifier	mpc_new		4789454	0					
ANR	4789490	ArgumentList	"""character"""		4789454	1					
ANR	4789491	Argument	"""character"""		4789454	0					
ANR	4789492	PrimaryExpression	"""character"""		4789454	0					
ANR	4789493	IdentifierDeclStatement	"mpc_parser_t * String = mpc_new ( ""string"" ) ;"	118:1:2832:2875	4789454	3	True				
ANR	4789494	IdentifierDecl	"* String = mpc_new ( ""string"" )"		4789454	0					
ANR	4789495	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789496	Identifier	String		4789454	1					
ANR	4789497	AssignmentExpression	"* String = mpc_new ( ""string"" )"		4789454	2		=			
ANR	4789498	Identifier	String		4789454	0					
ANR	4789499	CallExpression	"mpc_new ( ""string"" )"		4789454	1					
ANR	4789500	Callee	mpc_new		4789454	0					
ANR	4789501	Identifier	mpc_new		4789454	0					
ANR	4789502	ArgumentList	"""string"""		4789454	1					
ANR	4789503	Argument	"""string"""		4789454	0					
ANR	4789504	PrimaryExpression	"""string"""		4789454	0					
ANR	4789505	IdentifierDeclStatement	"mpc_parser_t * Factor = mpc_new ( ""factor"" ) ;"	119:1:2878:2921	4789454	4	True				
ANR	4789506	IdentifierDecl	"* Factor = mpc_new ( ""factor"" )"		4789454	0					
ANR	4789507	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789508	Identifier	Factor		4789454	1					
ANR	4789509	AssignmentExpression	"* Factor = mpc_new ( ""factor"" )"		4789454	2		=			
ANR	4789510	Identifier	Factor		4789454	0					
ANR	4789511	CallExpression	"mpc_new ( ""factor"" )"		4789454	1					
ANR	4789512	Callee	mpc_new		4789454	0					
ANR	4789513	Identifier	mpc_new		4789454	0					
ANR	4789514	ArgumentList	"""factor"""		4789454	1					
ANR	4789515	Argument	"""factor"""		4789454	0					
ANR	4789516	PrimaryExpression	"""factor"""		4789454	0					
ANR	4789517	IdentifierDeclStatement	"mpc_parser_t * Term = mpc_new ( ""term"" ) ;"	120:1:2924:2965	4789454	5	True				
ANR	4789518	IdentifierDecl	"* Term = mpc_new ( ""term"" )"		4789454	0					
ANR	4789519	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789520	Identifier	Term		4789454	1					
ANR	4789521	AssignmentExpression	"* Term = mpc_new ( ""term"" )"		4789454	2		=			
ANR	4789522	Identifier	Term		4789454	0					
ANR	4789523	CallExpression	"mpc_new ( ""term"" )"		4789454	1					
ANR	4789524	Callee	mpc_new		4789454	0					
ANR	4789525	Identifier	mpc_new		4789454	0					
ANR	4789526	ArgumentList	"""term"""		4789454	1					
ANR	4789527	Argument	"""term"""		4789454	0					
ANR	4789528	PrimaryExpression	"""term"""		4789454	0					
ANR	4789529	IdentifierDeclStatement	"mpc_parser_t * Lexp = mpc_new ( ""lexp"" ) ;"	121:1:2968:3009	4789454	6	True				
ANR	4789530	IdentifierDecl	"* Lexp = mpc_new ( ""lexp"" )"		4789454	0					
ANR	4789531	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789532	Identifier	Lexp		4789454	1					
ANR	4789533	AssignmentExpression	"* Lexp = mpc_new ( ""lexp"" )"		4789454	2		=			
ANR	4789534	Identifier	Lexp		4789454	0					
ANR	4789535	CallExpression	"mpc_new ( ""lexp"" )"		4789454	1					
ANR	4789536	Callee	mpc_new		4789454	0					
ANR	4789537	Identifier	mpc_new		4789454	0					
ANR	4789538	ArgumentList	"""lexp"""		4789454	1					
ANR	4789539	Argument	"""lexp"""		4789454	0					
ANR	4789540	PrimaryExpression	"""lexp"""		4789454	0					
ANR	4789541	IdentifierDeclStatement	"mpc_parser_t * Stmt = mpc_new ( ""stmt"" ) ;"	122:1:3012:3053	4789454	7	True				
ANR	4789542	IdentifierDecl	"* Stmt = mpc_new ( ""stmt"" )"		4789454	0					
ANR	4789543	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789544	Identifier	Stmt		4789454	1					
ANR	4789545	AssignmentExpression	"* Stmt = mpc_new ( ""stmt"" )"		4789454	2		=			
ANR	4789546	Identifier	Stmt		4789454	0					
ANR	4789547	CallExpression	"mpc_new ( ""stmt"" )"		4789454	1					
ANR	4789548	Callee	mpc_new		4789454	0					
ANR	4789549	Identifier	mpc_new		4789454	0					
ANR	4789550	ArgumentList	"""stmt"""		4789454	1					
ANR	4789551	Argument	"""stmt"""		4789454	0					
ANR	4789552	PrimaryExpression	"""stmt"""		4789454	0					
ANR	4789553	IdentifierDeclStatement	"mpc_parser_t * Exp = mpc_new ( ""exp"" ) ;"	123:1:3056:3096	4789454	8	True				
ANR	4789554	IdentifierDecl	"* Exp = mpc_new ( ""exp"" )"		4789454	0					
ANR	4789555	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789556	Identifier	Exp		4789454	1					
ANR	4789557	AssignmentExpression	"* Exp = mpc_new ( ""exp"" )"		4789454	2		=			
ANR	4789558	Identifier	Exp		4789454	0					
ANR	4789559	CallExpression	"mpc_new ( ""exp"" )"		4789454	1					
ANR	4789560	Callee	mpc_new		4789454	0					
ANR	4789561	Identifier	mpc_new		4789454	0					
ANR	4789562	ArgumentList	"""exp"""		4789454	1					
ANR	4789563	Argument	"""exp"""		4789454	0					
ANR	4789564	PrimaryExpression	"""exp"""		4789454	0					
ANR	4789565	IdentifierDeclStatement	"mpc_parser_t * Vartype = mpc_new ( ""vartype"" ) ;"	124:1:3099:3143	4789454	9	True				
ANR	4789566	IdentifierDecl	"* Vartype = mpc_new ( ""vartype"" )"		4789454	0					
ANR	4789567	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789568	Identifier	Vartype		4789454	1					
ANR	4789569	AssignmentExpression	"* Vartype = mpc_new ( ""vartype"" )"		4789454	2		=			
ANR	4789570	Identifier	Vartype		4789454	0					
ANR	4789571	CallExpression	"mpc_new ( ""vartype"" )"		4789454	1					
ANR	4789572	Callee	mpc_new		4789454	0					
ANR	4789573	Identifier	mpc_new		4789454	0					
ANR	4789574	ArgumentList	"""vartype"""		4789454	1					
ANR	4789575	Argument	"""vartype"""		4789454	0					
ANR	4789576	PrimaryExpression	"""vartype"""		4789454	0					
ANR	4789577	IdentifierDeclStatement	"mpc_parser_t * Typeident = mpc_new ( ""typeident"" ) ;"	125:1:3146:3192	4789454	10	True				
ANR	4789578	IdentifierDecl	"* Typeident = mpc_new ( ""typeident"" )"		4789454	0					
ANR	4789579	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789580	Identifier	Typeident		4789454	1					
ANR	4789581	AssignmentExpression	"* Typeident = mpc_new ( ""typeident"" )"		4789454	2		=			
ANR	4789582	Identifier	Typeident		4789454	0					
ANR	4789583	CallExpression	"mpc_new ( ""typeident"" )"		4789454	1					
ANR	4789584	Callee	mpc_new		4789454	0					
ANR	4789585	Identifier	mpc_new		4789454	0					
ANR	4789586	ArgumentList	"""typeident"""		4789454	1					
ANR	4789587	Argument	"""typeident"""		4789454	0					
ANR	4789588	PrimaryExpression	"""typeident"""		4789454	0					
ANR	4789589	IdentifierDeclStatement	"mpc_parser_t * Decls = mpc_new ( ""decls"" ) ;"	126:1:3195:3237	4789454	11	True				
ANR	4789590	IdentifierDecl	"* Decls = mpc_new ( ""decls"" )"		4789454	0					
ANR	4789591	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789592	Identifier	Decls		4789454	1					
ANR	4789593	AssignmentExpression	"* Decls = mpc_new ( ""decls"" )"		4789454	2		=			
ANR	4789594	Identifier	Decls		4789454	0					
ANR	4789595	CallExpression	"mpc_new ( ""decls"" )"		4789454	1					
ANR	4789596	Callee	mpc_new		4789454	0					
ANR	4789597	Identifier	mpc_new		4789454	0					
ANR	4789598	ArgumentList	"""decls"""		4789454	1					
ANR	4789599	Argument	"""decls"""		4789454	0					
ANR	4789600	PrimaryExpression	"""decls"""		4789454	0					
ANR	4789601	IdentifierDeclStatement	"mpc_parser_t * Args = mpc_new ( ""args"" ) ;"	127:1:3240:3281	4789454	12	True				
ANR	4789602	IdentifierDecl	"* Args = mpc_new ( ""args"" )"		4789454	0					
ANR	4789603	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789604	Identifier	Args		4789454	1					
ANR	4789605	AssignmentExpression	"* Args = mpc_new ( ""args"" )"		4789454	2		=			
ANR	4789606	Identifier	Args		4789454	0					
ANR	4789607	CallExpression	"mpc_new ( ""args"" )"		4789454	1					
ANR	4789608	Callee	mpc_new		4789454	0					
ANR	4789609	Identifier	mpc_new		4789454	0					
ANR	4789610	ArgumentList	"""args"""		4789454	1					
ANR	4789611	Argument	"""args"""		4789454	0					
ANR	4789612	PrimaryExpression	"""args"""		4789454	0					
ANR	4789613	IdentifierDeclStatement	"mpc_parser_t * Body = mpc_new ( ""body"" ) ;"	128:1:3284:3325	4789454	13	True				
ANR	4789614	IdentifierDecl	"* Body = mpc_new ( ""body"" )"		4789454	0					
ANR	4789615	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789616	Identifier	Body		4789454	1					
ANR	4789617	AssignmentExpression	"* Body = mpc_new ( ""body"" )"		4789454	2		=			
ANR	4789618	Identifier	Body		4789454	0					
ANR	4789619	CallExpression	"mpc_new ( ""body"" )"		4789454	1					
ANR	4789620	Callee	mpc_new		4789454	0					
ANR	4789621	Identifier	mpc_new		4789454	0					
ANR	4789622	ArgumentList	"""body"""		4789454	1					
ANR	4789623	Argument	"""body"""		4789454	0					
ANR	4789624	PrimaryExpression	"""body"""		4789454	0					
ANR	4789625	IdentifierDeclStatement	"mpc_parser_t * Comment = mpc_new ( ""comment"" ) ;"	129:1:3328:3372	4789454	14	True				
ANR	4789626	IdentifierDecl	"* Comment = mpc_new ( ""comment"" )"		4789454	0					
ANR	4789627	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789628	Identifier	Comment		4789454	1					
ANR	4789629	AssignmentExpression	"* Comment = mpc_new ( ""comment"" )"		4789454	2		=			
ANR	4789630	Identifier	Comment		4789454	0					
ANR	4789631	CallExpression	"mpc_new ( ""comment"" )"		4789454	1					
ANR	4789632	Callee	mpc_new		4789454	0					
ANR	4789633	Identifier	mpc_new		4789454	0					
ANR	4789634	ArgumentList	"""comment"""		4789454	1					
ANR	4789635	Argument	"""comment"""		4789454	0					
ANR	4789636	PrimaryExpression	"""comment"""		4789454	0					
ANR	4789637	IdentifierDeclStatement	"mpc_parser_t * Linecomment = mpc_new ( ""linecomment"" ) ;"	130:1:3375:3427	4789454	15	True				
ANR	4789638	IdentifierDecl	"* Linecomment = mpc_new ( ""linecomment"" )"		4789454	0					
ANR	4789639	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789640	Identifier	Linecomment		4789454	1					
ANR	4789641	AssignmentExpression	"* Linecomment = mpc_new ( ""linecomment"" )"		4789454	2		=			
ANR	4789642	Identifier	Linecomment		4789454	0					
ANR	4789643	CallExpression	"mpc_new ( ""linecomment"" )"		4789454	1					
ANR	4789644	Callee	mpc_new		4789454	0					
ANR	4789645	Identifier	mpc_new		4789454	0					
ANR	4789646	ArgumentList	"""linecomment"""		4789454	1					
ANR	4789647	Argument	"""linecomment"""		4789454	0					
ANR	4789648	PrimaryExpression	"""linecomment"""		4789454	0					
ANR	4789649	IdentifierDeclStatement	"mpc_parser_t * Asm = mpc_new ( ""asm"" ) ;"	131:1:3430:3464	4789454	16	True				
ANR	4789650	IdentifierDecl	"* Asm = mpc_new ( ""asm"" )"		4789454	0					
ANR	4789651	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789652	Identifier	Asm		4789454	1					
ANR	4789653	AssignmentExpression	"* Asm = mpc_new ( ""asm"" )"		4789454	2		=			
ANR	4789654	Identifier	Asm		4789454	0					
ANR	4789655	CallExpression	"mpc_new ( ""asm"" )"		4789454	1					
ANR	4789656	Callee	mpc_new		4789454	0					
ANR	4789657	Identifier	mpc_new		4789454	0					
ANR	4789658	ArgumentList	"""asm"""		4789454	1					
ANR	4789659	Argument	"""asm"""		4789454	0					
ANR	4789660	PrimaryExpression	"""asm"""		4789454	0					
ANR	4789661	IdentifierDeclStatement	"mpc_parser_t * Procedure = mpc_new ( ""procedure"" ) ;"	132:1:3467:3513	4789454	17	True				
ANR	4789662	IdentifierDecl	"* Procedure = mpc_new ( ""procedure"" )"		4789454	0					
ANR	4789663	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789664	Identifier	Procedure		4789454	1					
ANR	4789665	AssignmentExpression	"* Procedure = mpc_new ( ""procedure"" )"		4789454	2		=			
ANR	4789666	Identifier	Procedure		4789454	0					
ANR	4789667	CallExpression	"mpc_new ( ""procedure"" )"		4789454	1					
ANR	4789668	Callee	mpc_new		4789454	0					
ANR	4789669	Identifier	mpc_new		4789454	0					
ANR	4789670	ArgumentList	"""procedure"""		4789454	1					
ANR	4789671	Argument	"""procedure"""		4789454	0					
ANR	4789672	PrimaryExpression	"""procedure"""		4789454	0					
ANR	4789673	IdentifierDeclStatement	"mpc_parser_t * CProcedure = mpc_new ( ""cprocedure"" ) ;"	133:1:3516:3564	4789454	18	True				
ANR	4789674	IdentifierDecl	"* CProcedure = mpc_new ( ""cprocedure"" )"		4789454	0					
ANR	4789675	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789676	Identifier	CProcedure		4789454	1					
ANR	4789677	AssignmentExpression	"* CProcedure = mpc_new ( ""cprocedure"" )"		4789454	2		=			
ANR	4789678	Identifier	CProcedure		4789454	0					
ANR	4789679	CallExpression	"mpc_new ( ""cprocedure"" )"		4789454	1					
ANR	4789680	Callee	mpc_new		4789454	0					
ANR	4789681	Identifier	mpc_new		4789454	0					
ANR	4789682	ArgumentList	"""cprocedure"""		4789454	1					
ANR	4789683	Argument	"""cprocedure"""		4789454	0					
ANR	4789684	PrimaryExpression	"""cprocedure"""		4789454	0					
ANR	4789685	IdentifierDeclStatement	"mpc_parser_t * Sigdef = mpc_new ( ""sigdef"" ) ;"	134:1:3567:3610	4789454	19	True				
ANR	4789686	IdentifierDecl	"* Sigdef = mpc_new ( ""sigdef"" )"		4789454	0					
ANR	4789687	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789688	Identifier	Sigdef		4789454	1					
ANR	4789689	AssignmentExpression	"* Sigdef = mpc_new ( ""sigdef"" )"		4789454	2		=			
ANR	4789690	Identifier	Sigdef		4789454	0					
ANR	4789691	CallExpression	"mpc_new ( ""sigdef"" )"		4789454	1					
ANR	4789692	Callee	mpc_new		4789454	0					
ANR	4789693	Identifier	mpc_new		4789454	0					
ANR	4789694	ArgumentList	"""sigdef"""		4789454	1					
ANR	4789695	Argument	"""sigdef"""		4789454	0					
ANR	4789696	PrimaryExpression	"""sigdef"""		4789454	0					
ANR	4789697	IdentifierDeclStatement	"mpc_parser_t * Sigbody = mpc_new ( ""sigbody"" ) ;"	135:1:3613:3657	4789454	20	True				
ANR	4789698	IdentifierDecl	"* Sigbody = mpc_new ( ""sigbody"" )"		4789454	0					
ANR	4789699	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789700	Identifier	Sigbody		4789454	1					
ANR	4789701	AssignmentExpression	"* Sigbody = mpc_new ( ""sigbody"" )"		4789454	2		=			
ANR	4789702	Identifier	Sigbody		4789454	0					
ANR	4789703	CallExpression	"mpc_new ( ""sigbody"" )"		4789454	1					
ANR	4789704	Callee	mpc_new		4789454	0					
ANR	4789705	Identifier	mpc_new		4789454	0					
ANR	4789706	ArgumentList	"""sigbody"""		4789454	1					
ANR	4789707	Argument	"""sigbody"""		4789454	0					
ANR	4789708	PrimaryExpression	"""sigbody"""		4789454	0					
ANR	4789709	IdentifierDeclStatement	"mpc_parser_t * Includes = mpc_new ( ""includes"" ) ;"	136:1:3660:3705	4789454	21	True				
ANR	4789710	IdentifierDecl	"* Includes = mpc_new ( ""includes"" )"		4789454	0					
ANR	4789711	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789712	Identifier	Includes		4789454	1					
ANR	4789713	AssignmentExpression	"* Includes = mpc_new ( ""includes"" )"		4789454	2		=			
ANR	4789714	Identifier	Includes		4789454	0					
ANR	4789715	CallExpression	"mpc_new ( ""includes"" )"		4789454	1					
ANR	4789716	Callee	mpc_new		4789454	0					
ANR	4789717	Identifier	mpc_new		4789454	0					
ANR	4789718	ArgumentList	"""includes"""		4789454	1					
ANR	4789719	Argument	"""includes"""		4789454	0					
ANR	4789720	PrimaryExpression	"""includes"""		4789454	0					
ANR	4789721	IdentifierDeclStatement	"mpc_parser_t * Smallc = mpc_new ( ""smallc"" ) ;"	137:1:3708:3751	4789454	22	True				
ANR	4789722	IdentifierDecl	"* Smallc = mpc_new ( ""smallc"" )"		4789454	0					
ANR	4789723	IdentifierDeclType	mpc_parser_t *		4789454	0					
ANR	4789724	Identifier	Smallc		4789454	1					
ANR	4789725	AssignmentExpression	"* Smallc = mpc_new ( ""smallc"" )"		4789454	2		=			
ANR	4789726	Identifier	Smallc		4789454	0					
ANR	4789727	CallExpression	"mpc_new ( ""smallc"" )"		4789454	1					
ANR	4789728	Callee	mpc_new		4789454	0					
ANR	4789729	Identifier	mpc_new		4789454	0					
ANR	4789730	ArgumentList	"""smallc"""		4789454	1					
ANR	4789731	Argument	"""smallc"""		4789454	0					
ANR	4789732	PrimaryExpression	"""smallc"""		4789454	0					
ANR	4789733	Statement	mpc_err_t	139:1:3755:3763	4789454	23	True				
ANR	4789734	Statement	*	139:10:3764:3764	4789454	24	True				
ANR	4789735	Statement	err	139:12:3766:3768	4789454	25	True				
ANR	4789736	Statement	=	139:16:3770:3770	4789454	26	True				
ANR	4789737	Statement	mpca_lang	139:18:3772:3780	4789454	27	True				
ANR	4789738	Statement	(	139:27:3781:3781	4789454	28	True				
ANR	4789739	Statement	MPCA_LANG_DEFAULT	139:28:3782:3798	4789454	29	True				
ANR	4789740	Statement	","	139:45:3799:3799	4789454	30	True				
ANR	4789741	Statement	""" ident     : /[a-zA-Z_][a-zA-Z0-9_]*/ ;                           \\n"""	140:3:3804:3873	4789454	31	True				
ANR	4789742	Statement	""" number    : /[0-9]+/ ;                                           \\n"""	141:3:3878:3947	4789454	32	True				
ANR	4789743	Statement	""" character : /'.'/ ;                                              \\n"""	142:3:3952:4021	4789454	33	True				
ANR	4789744	Statement	""" string    : /\\""(\\\\\\\\.|[^\\""])*\\""/ ;                               \\n"""	143:3:4026:4095	4789454	34	True				
ANR	4789745	Statement	"""                                                                  \\n"""	144:3:4100:4169	4789454	35	True				
ANR	4789746	Statement	""" factor    : '(' <lexp> ')'                                       \\n"""	145:3:4174:4243	4789454	36	True				
ANR	4789747	Statement	"""           | <number>                                             \\n"""	146:3:4248:4317	4789454	37	True				
ANR	4789748	Statement	"""           | <character>                                          \\n"""	147:3:4322:4391	4789454	38	True				
ANR	4789749	Statement	"""           | <string>                                             \\n"""	148:3:4396:4465	4789454	39	True				
ANR	4789750	Statement	"""           | <ident> '(' <lexp>? (',' <lexp>)* ')'                \\n"""	149:3:4470:4539	4789454	40	True				
ANR	4789751	Statement	"""           | <ident> ;                                            \\n"""	150:3:4544:4613	4789454	41	True				
ANR	4789752	Statement	"""                                                                  \\n"""	151:3:4618:4687	4789454	42	True				
ANR	4789753	Statement	""" term      : <factor> (('*' | '/' | '%') <factor>)* ;             \\n"""	152:3:4692:4761	4789454	43	True				
ANR	4789754	Statement	""" lexp      : <term> (('+' | '-') <term>)* ;                       \\n"""	153:3:4766:4835	4789454	44	True				
ANR	4789755	Statement	"""                                                                  \\n"""	154:3:4840:4909	4789454	45	True				
ANR	4789756	Statement	""" stmt      : '{' <stmt>* '}'                                      \\n"""	155:3:4914:4983	4789454	46	True				
ANR	4789757	Statement	"""           | \\""while\\"" '(' <exp> ')' <stmt>                       \\n"""	156:3:4988:5057	4789454	47	True				
ANR	4789758	Statement	"""           | \\""if\\""    '(' <exp> ')' <stmt>                       \\n"""	157:3:5062:5131	4789454	48	True				
ANR	4789759	Statement	"""           | <ident> '=' <lexp> ';'                               \\n"""	158:3:5136:5205	4789454	49	True				
ANR	4789760	Statement	"""           | \\""print\\"" '(' <lexp>? ')' ';'                        \\n"""	159:3:5210:5279	4789454	50	True				
ANR	4789761	Statement	"""           | \\""return\\"" <lexp>? ';'                               \\n"""	160:3:5284:5353	4789454	51	True				
ANR	4789762	Statement	"""           | <ident> '(' (<number>|<ident>|<string>)? (',' (<string>|<number>|<ident>))* ')' ';' ;        \\n"""	161:3:5358:5467	4789454	52	True				
ANR	4789763	Statement	"""                                                                  \\n"""	162:3:5472:5541	4789454	53	True				
ANR	4789764	Statement	""" exp       : <lexp> '>' <lexp>                                    \\n"""	163:3:5546:5615	4789454	54	True				
ANR	4789765	Statement	"""           | <lexp> '<' <lexp>                                    \\n"""	164:3:5620:5689	4789454	55	True				
ANR	4789766	Statement	"""           | <lexp> \\"">=\\"" <lexp>                                 \\n"""	165:3:5694:5763	4789454	56	True				
ANR	4789767	Statement	"""           | <lexp> \\""<=\\"" <lexp>                                 \\n"""	166:3:5768:5837	4789454	57	True				
ANR	4789768	Statement	"""           | <lexp> \\""!=\\"" <lexp>                                 \\n"""	167:3:5842:5911	4789454	58	True				
ANR	4789769	Statement	"""           | <lexp> \\""==\\"" <lexp> ;                               \\n"""	168:3:5916:5985	4789454	59	True				
ANR	4789770	Statement	"""                                                                  \\n"""	169:3:5990:6059	4789454	60	True				
ANR	4789771	Statement	""" vartype   : (\\""int\\"" | \\""char\\"") ;                               \\n"""	170:3:6064:6133	4789454	61	True				
ANR	4789772	Statement	""" typeident : <vartype> <ident> ;                                  \\n"""	171:3:6138:6207	4789454	62	True				
ANR	4789773	Statement	""" decls     : (<typeident> ';')* ;                                 \\n"""	172:3:6212:6281	4789454	63	True				
ANR	4789774	Statement	""" args      : <typeident>? (',' <typeident>)* ;                    \\n"""	173:3:6286:6355	4789454	64	True				
ANR	4789775	Statement	""" body      : '{' <decls> <stmt>* '}' ;                            \\n"""	174:3:6360:6429	4789454	65	True				
ANR	4789776	Statement	""" comment   : /\\\\/\\\\*([^\\\\*])*\\\\*\\\\// ;                            \\n"""	175:3:6434:6503	4789454	66	True				
ANR	4789777	Statement	""" linecomment : /\\\\/\\\\/([^\\\\n])*/ ;                                \\n"""	176:3:6508:6577	4789454	67	True				
ANR	4789778	Statement	""" asm       : /\\\\:([^\\\\n])*/ ;                                \\n"""	177:3:6582:6646	4789454	68	True				
ANR	4789779	Statement	""" procedure : <ident> '@' \\""global\\"" '(' <number>? ')' <body> ; \\n"""	178:3:6651:6717	4789454	69	True				
ANR	4789780	Statement	""" cprocedure : <vartype> <ident> '(' <args> ')' <body> ; \\n"""	179:3:6722:6781	4789454	70	True				
ANR	4789781	Statement	""" sigdef    : <ident> '@' <ident> '(' <number> ')' ';' ; \\n"""	180:3:6786:6845	4789454	71	True				
ANR	4789782	Statement	""" sigbody   : '@' <ident> '(' <number> ')' ';' ; \\n"""	181:3:6850:6901	4789454	72	True				
ANR	4789783	Statement	""" includes  : (\\""#include\\"" <string>)* ;                           \\n"""	182:3:6906:6975	4789454	73	True				
ANR	4789784	Statement	""" smallc    : /^/ (<comment>|<asm>|<linecomment>|<sigdef>|<sigbody>|<procedure>|<cprocedure>)* <includes> <decls> /$/ ; \\n"""	183:3:6980:7102	4789454	74	True				
ANR	4789785	Statement	","	183:126:7103:7103	4789454	75	True				
ANR	4789786	Statement	Ident	184:2:7107:7111	4789454	76	True				
ANR	4789787	Statement	","	184:7:7112:7112	4789454	77	True				
ANR	4789788	Statement	Number	184:9:7114:7119	4789454	78	True				
ANR	4789789	Statement	","	184:15:7120:7120	4789454	79	True				
ANR	4789790	Statement	Character	184:17:7122:7130	4789454	80	True				
ANR	4789791	Statement	","	184:26:7131:7131	4789454	81	True				
ANR	4789792	Statement	String	184:28:7133:7138	4789454	82	True				
ANR	4789793	Statement	","	184:34:7139:7139	4789454	83	True				
ANR	4789794	Statement	Factor	184:36:7141:7146	4789454	84	True				
ANR	4789795	Statement	","	184:42:7147:7147	4789454	85	True				
ANR	4789796	Statement	Term	184:44:7149:7152	4789454	86	True				
ANR	4789797	Statement	","	184:48:7153:7153	4789454	87	True				
ANR	4789798	Statement	Lexp	184:50:7155:7158	4789454	88	True				
ANR	4789799	Statement	","	184:54:7159:7159	4789454	89	True				
ANR	4789800	Statement	Stmt	184:56:7161:7164	4789454	90	True				
ANR	4789801	Statement	","	184:60:7165:7165	4789454	91	True				
ANR	4789802	Statement	Exp	184:62:7167:7169	4789454	92	True				
ANR	4789803	Statement	","	184:65:7170:7170	4789454	93	True				
ANR	4789804	Statement	Vartype	185:2:7174:7180	4789454	94	True				
ANR	4789805	Statement	","	185:9:7181:7181	4789454	95	True				
ANR	4789806	Statement	Typeident	185:11:7183:7191	4789454	96	True				
ANR	4789807	Statement	","	185:20:7192:7192	4789454	97	True				
ANR	4789808	Statement	Decls	185:22:7194:7198	4789454	98	True				
ANR	4789809	Statement	","	185:27:7199:7199	4789454	99	True				
ANR	4789810	Statement	Args	185:29:7201:7204	4789454	100	True				
ANR	4789811	Statement	","	185:33:7205:7205	4789454	101	True				
ANR	4789812	Statement	Body	185:35:7207:7210	4789454	102	True				
ANR	4789813	Statement	","	185:39:7211:7211	4789454	103	True				
ANR	4789814	Statement	Comment	185:41:7213:7219	4789454	104	True				
ANR	4789815	Statement	","	185:48:7220:7220	4789454	105	True				
ANR	4789816	Statement	Linecomment	185:50:7222:7232	4789454	106	True				
ANR	4789817	Statement	","	185:61:7233:7233	4789454	107	True				
ANR	4789818	Statement	Asm	185:63:7235:7237	4789454	108	True				
ANR	4789819	Statement	","	185:66:7238:7238	4789454	109	True				
ANR	4789820	Statement	Procedure	185:68:7240:7248	4789454	110	True				
ANR	4789821	Statement	","	185:77:7249:7249	4789454	111	True				
ANR	4789822	Statement	CProcedure	185:79:7251:7260	4789454	112	True				
ANR	4789823	Statement	","	185:89:7261:7261	4789454	113	True				
ANR	4789824	Statement	Sigdef	186:2:7265:7270	4789454	114	True				
ANR	4789825	Statement	","	186:8:7271:7271	4789454	115	True				
ANR	4789826	Statement	Sigbody	186:10:7273:7279	4789454	116	True				
ANR	4789827	Statement	","	186:17:7280:7280	4789454	117	True				
ANR	4789828	Statement	Includes	186:19:7282:7289	4789454	118	True				
ANR	4789829	Statement	","	186:27:7290:7290	4789454	119	True				
ANR	4789830	Statement	Smallc	186:29:7292:7297	4789454	120	True				
ANR	4789831	Statement	","	186:35:7298:7298	4789454	121	True				
ANR	4789832	Statement	NULL	186:37:7300:7303	4789454	122	True				
ANR	4789833	Statement	)	186:41:7304:7304	4789454	123	True				
ANR	4789834	ExpressionStatement		186:42:7305:7305	4789454	124	True				
ANR	4789835	IfStatement	if ( err != NULL )		4789454	125					
ANR	4789836	Condition	err != NULL	188:5:7313:7323	4789454	0	True				
ANR	4789837	EqualityExpression	err != NULL		4789454	0		!=			
ANR	4789838	Identifier	err		4789454	0					
ANR	4789839	Identifier	NULL		4789454	1					
ANR	4789840	CompoundStatement		75:18:4636:4636	4789454	1					
ANR	4789841	ExpressionStatement	mpc_err_print ( err )	189:2:7330:7349	4789454	0	True				
ANR	4789842	CallExpression	mpc_err_print ( err )		4789454	0					
ANR	4789843	Callee	mpc_err_print		4789454	0					
ANR	4789844	Identifier	mpc_err_print		4789454	0					
ANR	4789845	ArgumentList	err		4789454	1					
ANR	4789846	Argument	err		4789454	0					
ANR	4789847	Identifier	err		4789454	0					
ANR	4789848	ExpressionStatement	mpc_err_delete ( err )	190:2:7353:7373	4789454	1	True				
ANR	4789849	CallExpression	mpc_err_delete ( err )		4789454	0					
ANR	4789850	Callee	mpc_err_delete		4789454	0					
ANR	4789851	Identifier	mpc_err_delete		4789454	0					
ANR	4789852	ArgumentList	err		4789454	1					
ANR	4789853	Argument	err		4789454	0					
ANR	4789854	Identifier	err		4789454	0					
ANR	4789855	ExpressionStatement	exit ( 1 )	191:2:7377:7384	4789454	2	True				
ANR	4789856	CallExpression	exit ( 1 )		4789454	0					
ANR	4789857	Callee	exit		4789454	0					
ANR	4789858	Identifier	exit		4789454	0					
ANR	4789859	ArgumentList	1		4789454	1					
ANR	4789860	Argument	1		4789454	0					
ANR	4789861	PrimaryExpression	1		4789454	0					
ANR	4789862	IfStatement	if ( argc > 1 )		4789454	126					
ANR	4789863	Condition	argc > 1	195:5:7401:7408	4789454	0	True				
ANR	4789864	RelationalExpression	argc > 1		4789454	0		>			
ANR	4789865	Identifier	argc		4789454	0					
ANR	4789866	PrimaryExpression	1		4789454	1					
ANR	4789867	CompoundStatement		84:2:4726:4740	4789454	1					
ANR	4789868	IdentifierDeclStatement	mpc_result_t r ;	197:2:7416:7430	4789454	0	True				
ANR	4789869	IdentifierDecl	r		4789454	0					
ANR	4789870	IdentifierDeclType	mpc_result_t		4789454	0					
ANR	4789871	Identifier	r		4789454	1					
ANR	4789872	IfStatement	"if ( mpc_parse_contents ( argv [ 1 ] , Smallc , & r ) )"		4789454	1					
ANR	4789873	Condition	"mpc_parse_contents ( argv [ 1 ] , Smallc , & r )"	198:6:7438:7476	4789454	0	True				
ANR	4789874	CallExpression	"mpc_parse_contents ( argv [ 1 ] , Smallc , & r )"		4789454	0					
ANR	4789875	Callee	mpc_parse_contents		4789454	0					
ANR	4789876	Identifier	mpc_parse_contents		4789454	0					
ANR	4789877	ArgumentList	argv [ 1 ]		4789454	1					
ANR	4789878	Argument	argv [ 1 ]		4789454	0					
ANR	4789879	ArrayIndexing	argv [ 1 ]		4789454	0					
ANR	4789880	Identifier	argv		4789454	0					
ANR	4789881	PrimaryExpression	1		4789454	1					
ANR	4789882	Argument	Smallc		4789454	1					
ANR	4789883	Identifier	Smallc		4789454	0					
ANR	4789884	Argument	& r		4789454	2					
ANR	4789885	UnaryOperationExpression	& r		4789454	0					
ANR	4789886	UnaryOperator	&		4789454	0					
ANR	4789887	Identifier	r		4789454	1					
ANR	4789888	CompoundStatement		85:47:4789:4789	4789454	1					
ANR	4789889	ExpressionStatement	"mpc_ast_print_to ( r . output , stderr )"	199:3:7484:7518	4789454	0	True				
ANR	4789890	CallExpression	"mpc_ast_print_to ( r . output , stderr )"		4789454	0					
ANR	4789891	Callee	mpc_ast_print_to		4789454	0					
ANR	4789892	Identifier	mpc_ast_print_to		4789454	0					
ANR	4789893	ArgumentList	r . output		4789454	1					
ANR	4789894	Argument	r . output		4789454	0					
ANR	4789895	MemberAccess	r . output		4789454	0					
ANR	4789896	Identifier	r		4789454	0					
ANR	4789897	Identifier	output		4789454	1					
ANR	4789898	Argument	stderr		4789454	1					
ANR	4789899	Identifier	stderr		4789454	0					
ANR	4789900	CompoundStatement		89:4:4850:4876	4789454	1					
ANR	4789901	IdentifierDeclStatement	int i ;	201:4:7529:7534	4789454	0	True				
ANR	4789902	IdentifierDecl	i		4789454	0					
ANR	4789903	IdentifierDeclType	int		4789454	0					
ANR	4789904	Identifier	i		4789454	1					
ANR	4789905	IdentifierDeclStatement	mpc_ast_t * root = r . output ;	202:4:7540:7566	4789454	1	True				
ANR	4789906	IdentifierDecl	* root = r . output		4789454	0					
ANR	4789907	IdentifierDeclType	mpc_ast_t *		4789454	0					
ANR	4789908	Identifier	root		4789454	1					
ANR	4789909	AssignmentExpression	* root = r . output		4789454	2		=			
ANR	4789910	Identifier	root		4789454	0					
ANR	4789911	MemberAccess	r . output		4789454	1					
ANR	4789912	Identifier	r		4789454	0					
ANR	4789913	Identifier	output		4789454	1					
ANR	4789914	ForStatement	for ( i = 0 ; i < root -> children_num ; i ++ )		4789454	2					
ANR	4789915	ForInit	i = 0 ;	203:9:7577:7580	4789454	0	True				
ANR	4789916	AssignmentExpression	i = 0		4789454	0		=			
ANR	4789917	Identifier	i		4789454	0					
ANR	4789918	PrimaryExpression	0		4789454	1					
ANR	4789919	Condition	i < root -> children_num	203:14:7582:7602	4789454	1	True				
ANR	4789920	RelationalExpression	i < root -> children_num		4789454	0		<			
ANR	4789921	Identifier	i		4789454	0					
ANR	4789922	PtrMemberAccess	root -> children_num		4789454	1					
ANR	4789923	Identifier	root		4789454	0					
ANR	4789924	Identifier	children_num		4789454	1					
ANR	4789925	PostIncDecOperationExpression	i ++	203:37:7605:7607	4789454	2	True				
ANR	4789926	Identifier	i		4789454	0					
ANR	4789927	IncDec	++		4789454	1					
ANR	4789928	CompoundStatement		91:5:4927:4962	4789454	3					
ANR	4789929	IdentifierDeclStatement	mpc_ast_t * node = root -> children [ i ] ;	204:5:7617:7652	4789454	0	True				
ANR	4789930	IdentifierDecl	* node = root -> children [ i ]		4789454	0					
ANR	4789931	IdentifierDeclType	mpc_ast_t *		4789454	0					
ANR	4789932	Identifier	node		4789454	1					
ANR	4789933	AssignmentExpression	* node = root -> children [ i ]		4789454	2		=			
ANR	4789934	Identifier	node		4789454	0					
ANR	4789935	ArrayIndexing	root -> children [ i ]		4789454	1					
ANR	4789936	PtrMemberAccess	root -> children		4789454	0					
ANR	4789937	Identifier	root		4789454	0					
ANR	4789938	Identifier	children		4789454	1					
ANR	4789939	Identifier	i		4789454	1					
ANR	4789940	ExpressionStatement	"eprintf ( ""; TAG = %s    (%s)\\n"" , node -> tag , node -> contents )"	205:5:7659:7718	4789454	1	True				
ANR	4789941	CallExpression	"eprintf ( ""; TAG = %s    (%s)\\n"" , node -> tag , node -> contents )"		4789454	0					
ANR	4789942	Callee	eprintf		4789454	0					
ANR	4789943	Identifier	eprintf		4789454	0					
ANR	4789944	ArgumentList	"""; TAG = %s    (%s)\\n"""		4789454	1					
ANR	4789945	Argument	"""; TAG = %s    (%s)\\n"""		4789454	0					
ANR	4789946	PrimaryExpression	"""; TAG = %s    (%s)\\n"""		4789454	0					
ANR	4789947	Argument	node -> tag		4789454	1					
ANR	4789948	PtrMemberAccess	node -> tag		4789454	0					
ANR	4789949	Identifier	node		4789454	0					
ANR	4789950	Identifier	tag		4789454	1					
ANR	4789951	Argument	node -> contents		4789454	2					
ANR	4789952	PtrMemberAccess	node -> contents		4789454	0					
ANR	4789953	Identifier	node		4789454	0					
ANR	4789954	Identifier	contents		4789454	1					
ANR	4789955	ExpressionStatement	processNode ( node )	206:5:7725:7743	4789454	2	True				
ANR	4789956	CallExpression	processNode ( node )		4789454	0					
ANR	4789957	Callee	processNode		4789454	0					
ANR	4789958	Identifier	processNode		4789454	0					
ANR	4789959	ArgumentList	node		4789454	1					
ANR	4789960	Argument	node		4789454	0					
ANR	4789961	Identifier	node		4789454	0					
ANR	4789962	ExpressionStatement	mpc_ast_delete ( r . output )	209:3:7759:7783	4789454	2	True				
ANR	4789963	CallExpression	mpc_ast_delete ( r . output )		4789454	0					
ANR	4789964	Callee	mpc_ast_delete		4789454	0					
ANR	4789965	Identifier	mpc_ast_delete		4789454	0					
ANR	4789966	ArgumentList	r . output		4789454	1					
ANR	4789967	Argument	r . output		4789454	0					
ANR	4789968	MemberAccess	r . output		4789454	0					
ANR	4789969	Identifier	r		4789454	0					
ANR	4789970	Identifier	output		4789454	1					
ANR	4789971	ElseStatement	else		4789454	0					
ANR	4789972	CompoundStatement		97:9:5104:5104	4789454	0					
ANR	4789973	ExpressionStatement	mpc_err_print ( r . error )	211:3:7799:7821	4789454	0	True				
ANR	4789974	CallExpression	mpc_err_print ( r . error )		4789454	0					
ANR	4789975	Callee	mpc_err_print		4789454	0					
ANR	4789976	Identifier	mpc_err_print		4789454	0					
ANR	4789977	ArgumentList	r . error		4789454	1					
ANR	4789978	Argument	r . error		4789454	0					
ANR	4789979	MemberAccess	r . error		4789454	0					
ANR	4789980	Identifier	r		4789454	0					
ANR	4789981	Identifier	error		4789454	1					
ANR	4789982	ExpressionStatement	mpc_err_delete ( r . error )	212:3:7826:7849	4789454	1	True				
ANR	4789983	CallExpression	mpc_err_delete ( r . error )		4789454	0					
ANR	4789984	Callee	mpc_err_delete		4789454	0					
ANR	4789985	Identifier	mpc_err_delete		4789454	0					
ANR	4789986	ArgumentList	r . error		4789454	1					
ANR	4789987	Argument	r . error		4789454	0					
ANR	4789988	MemberAccess	r . error		4789454	0					
ANR	4789989	Identifier	r		4789454	0					
ANR	4789990	Identifier	error		4789454	1					
ANR	4789991	ElseStatement	else		4789454	0					
ANR	4789992	CompoundStatement		104:2:5179:5193	4789454	0					
ANR	4789993	IdentifierDeclStatement	mpc_result_t r ;	217:2:7869:7883	4789454	0	True				
ANR	4789994	IdentifierDecl	r		4789454	0					
ANR	4789995	IdentifierDeclType	mpc_result_t		4789454	0					
ANR	4789996	Identifier	r		4789454	1					
ANR	4789997	IfStatement	"if ( mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r ) )"		4789454	1					
ANR	4789998	Condition	"mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r )"	218:6:7891:7934	4789454	0	True				
ANR	4789999	CallExpression	"mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r )"		4789454	0					
ANR	4790000	Callee	mpc_parse_pipe		4789454	0					
ANR	4790001	Identifier	mpc_parse_pipe		4789454	0					
ANR	4790002	ArgumentList	"""<stdin>"""		4789454	1					
ANR	4790003	Argument	"""<stdin>"""		4789454	0					
ANR	4790004	PrimaryExpression	"""<stdin>"""		4789454	0					
ANR	4790005	Argument	stdin		4789454	1					
ANR	4790006	Identifier	stdin		4789454	0					
ANR	4790007	Argument	Smallc		4789454	2					
ANR	4790008	Identifier	Smallc		4789454	0					
ANR	4790009	Argument	& r		4789454	3					
ANR	4790010	UnaryOperationExpression	& r		4789454	0					
ANR	4790011	UnaryOperator	&		4789454	0					
ANR	4790012	Identifier	r		4789454	1					
ANR	4790013	CompoundStatement		105:52:5247:5247	4789454	1					
ANR	4790014	ExpressionStatement	mpc_ast_print ( r . output )	219:3:7942:7965	4789454	0	True				
ANR	4790015	CallExpression	mpc_ast_print ( r . output )		4789454	0					
ANR	4790016	Callee	mpc_ast_print		4789454	0					
ANR	4790017	Identifier	mpc_ast_print		4789454	0					
ANR	4790018	ArgumentList	r . output		4789454	1					
ANR	4790019	Argument	r . output		4789454	0					
ANR	4790020	MemberAccess	r . output		4789454	0					
ANR	4790021	Identifier	r		4789454	0					
ANR	4790022	Identifier	output		4789454	1					
ANR	4790023	ExpressionStatement	mpc_ast_delete ( r . output )	220:3:7970:7994	4789454	1	True				
ANR	4790024	CallExpression	mpc_ast_delete ( r . output )		4789454	0					
ANR	4790025	Callee	mpc_ast_delete		4789454	0					
ANR	4790026	Identifier	mpc_ast_delete		4789454	0					
ANR	4790027	ArgumentList	r . output		4789454	1					
ANR	4790028	Argument	r . output		4789454	0					
ANR	4790029	MemberAccess	r . output		4789454	0					
ANR	4790030	Identifier	r		4789454	0					
ANR	4790031	Identifier	output		4789454	1					
ANR	4790032	ElseStatement	else		4789454	0					
ANR	4790033	CompoundStatement		108:9:5315:5315	4789454	0					
ANR	4790034	ExpressionStatement	mpc_err_print ( r . error )	222:3:8010:8032	4789454	0	True				
ANR	4790035	CallExpression	mpc_err_print ( r . error )		4789454	0					
ANR	4790036	Callee	mpc_err_print		4789454	0					
ANR	4790037	Identifier	mpc_err_print		4789454	0					
ANR	4790038	ArgumentList	r . error		4789454	1					
ANR	4790039	Argument	r . error		4789454	0					
ANR	4790040	MemberAccess	r . error		4789454	0					
ANR	4790041	Identifier	r		4789454	0					
ANR	4790042	Identifier	error		4789454	1					
ANR	4790043	ExpressionStatement	mpc_err_delete ( r . error )	223:3:8037:8060	4789454	1	True				
ANR	4790044	CallExpression	mpc_err_delete ( r . error )		4789454	0					
ANR	4790045	Callee	mpc_err_delete		4789454	0					
ANR	4790046	Identifier	mpc_err_delete		4789454	0					
ANR	4790047	ArgumentList	r . error		4789454	1					
ANR	4790048	Argument	r . error		4789454	0					
ANR	4790049	MemberAccess	r . error		4789454	0					
ANR	4790050	Identifier	r		4789454	0					
ANR	4790051	Identifier	error		4789454	1					
ANR	4790052	ExpressionStatement	"mpc_cleanup ( 17 , Ident , Number , Character , String , Factor , Term , Lexp , Stmt , Exp , Vartype , Typeident , Decls , Args , Body , Comment , Procedure , CProcedure , Sigdef , Includes , Smallc )"	228:1:8078:8261	4789454	127	True				
ANR	4790053	CallExpression	"mpc_cleanup ( 17 , Ident , Number , Character , String , Factor , Term , Lexp , Stmt , Exp , Vartype , Typeident , Decls , Args , Body , Comment , Procedure , CProcedure , Sigdef , Includes , Smallc )"		4789454	0					
ANR	4790054	Callee	mpc_cleanup		4789454	0					
ANR	4790055	Identifier	mpc_cleanup		4789454	0					
ANR	4790056	ArgumentList	17		4789454	1					
ANR	4790057	Argument	17		4789454	0					
ANR	4790058	PrimaryExpression	17		4789454	0					
ANR	4790059	Argument	Ident		4789454	1					
ANR	4790060	Identifier	Ident		4789454	0					
ANR	4790061	Argument	Number		4789454	2					
ANR	4790062	Identifier	Number		4789454	0					
ANR	4790063	Argument	Character		4789454	3					
ANR	4790064	Identifier	Character		4789454	0					
ANR	4790065	Argument	String		4789454	4					
ANR	4790066	Identifier	String		4789454	0					
ANR	4790067	Argument	Factor		4789454	5					
ANR	4790068	Identifier	Factor		4789454	0					
ANR	4790069	Argument	Term		4789454	6					
ANR	4790070	Identifier	Term		4789454	0					
ANR	4790071	Argument	Lexp		4789454	7					
ANR	4790072	Identifier	Lexp		4789454	0					
ANR	4790073	Argument	Stmt		4789454	8					
ANR	4790074	Identifier	Stmt		4789454	0					
ANR	4790075	Argument	Exp		4789454	9					
ANR	4790076	Identifier	Exp		4789454	0					
ANR	4790077	Argument	Vartype		4789454	10					
ANR	4790078	Identifier	Vartype		4789454	0					
ANR	4790079	Argument	Typeident		4789454	11					
ANR	4790080	Identifier	Typeident		4789454	0					
ANR	4790081	Argument	Decls		4789454	12					
ANR	4790082	Identifier	Decls		4789454	0					
ANR	4790083	Argument	Args		4789454	13					
ANR	4790084	Identifier	Args		4789454	0					
ANR	4790085	Argument	Body		4789454	14					
ANR	4790086	Identifier	Body		4789454	0					
ANR	4790087	Argument	Comment		4789454	15					
ANR	4790088	Identifier	Comment		4789454	0					
ANR	4790089	Argument	Procedure		4789454	16					
ANR	4790090	Identifier	Procedure		4789454	0					
ANR	4790091	Argument	CProcedure		4789454	17					
ANR	4790092	Identifier	CProcedure		4789454	0					
ANR	4790093	Argument	Sigdef		4789454	18					
ANR	4790094	Identifier	Sigdef		4789454	0					
ANR	4790095	Argument	Includes		4789454	19					
ANR	4790096	Identifier	Includes		4789454	0					
ANR	4790097	Argument	Smallc		4789454	20					
ANR	4790098	Identifier	Smallc		4789454	0					
ANR	4790099	ReturnStatement	return 0 ;	232:1:8265:8273	4789454	128	True				
ANR	4790100	PrimaryExpression	0		4789454	0					
ANR	4790101	ReturnType	int		4789454	1					
ANR	4790102	Identifier	main		4789454	2					
ANR	4790103	ParameterList	"int argc , char * * argv"		4789454	3					
ANR	4790104	Parameter	int argc	114:9:2666:2673	4789454	0	True				
ANR	4790105	ParameterType	int		4789454	0					
ANR	4790106	Identifier	argc		4789454	1					
ANR	4790107	Parameter	char * * argv	114:19:2676:2686	4789454	1	True				
ANR	4790108	ParameterType	char * *		4789454	0					
ANR	4790109	Identifier	argv		4789454	1					
ANR	4790110	CFGEntryNode	ENTRY		4789454		True				
ANR	4790111	CFGExitNode	EXIT		4789454		True				
ANR	4790112	Symbol	stdin		4789454						
ANR	4790113	Symbol	Decls		4789454						
ANR	4790114	Symbol	* argv		4789454						
ANR	4790115	Symbol	String		4789454						
ANR	4790116	Symbol	* * root		4789454						
ANR	4790117	Symbol	Smallc		4789454						
ANR	4790118	Symbol	Factor		4789454						
ANR	4790119	Symbol	node -> contents		4789454						
ANR	4790120	Symbol	Procedure		4789454						
ANR	4790121	Symbol	Vartype		4789454						
ANR	4790122	Symbol	root -> children		4789454						
ANR	4790123	Symbol	* node		4789454						
ANR	4790124	Symbol	Linecomment		4789454						
ANR	4790125	Symbol	NULL		4789454						
ANR	4790126	Symbol	Character		4789454						
ANR	4790127	Symbol	Term		4789454						
ANR	4790128	Symbol	stderr		4789454						
ANR	4790129	Symbol	root -> children_num		4789454						
ANR	4790130	Symbol	Sigdef		4789454						
ANR	4790131	Symbol	r . output		4789454						
ANR	4790132	Symbol	node		4789454						
ANR	4790133	Symbol	CProcedure		4789454						
ANR	4790134	Symbol	node -> tag		4789454						
ANR	4790135	Symbol	r . error		4789454						
ANR	4790136	Symbol	Typeident		4789454						
ANR	4790137	Symbol	* root		4789454						
ANR	4790138	Symbol	mpc_new		4789454						
ANR	4790139	Symbol	argv		4789454						
ANR	4790140	Symbol	Stmt		4789454						
ANR	4790141	Symbol	Includes		4789454						
ANR	4790142	Symbol	Number		4789454						
ANR	4790143	Symbol	root		4789454						
ANR	4790144	Symbol	Asm		4789454						
ANR	4790145	Symbol	Body		4789454						
ANR	4790146	Symbol	argc		4789454						
ANR	4790147	Symbol	Comment		4789454						
ANR	4790148	Symbol	Args		4789454						
ANR	4790149	Symbol	Ident		4789454						
ANR	4790150	Symbol	err		4789454						
ANR	4790151	Symbol	mpc_parse_pipe		4789454						
ANR	4790152	Symbol	i		4789454						
ANR	4790153	Symbol	r		4789454						
ANR	4790154	Symbol	mpc_parse_contents		4789454						
ANR	4790155	Symbol	* root -> children		4789454						
ANR	4790156	Symbol	* i		4789454						
ANR	4790157	Symbol	Lexp		4789454						
ANR	4790158	Symbol	Sigbody		4789454						
ANR	4790159	Symbol	& r		4789454						
ANR	4790160	Symbol	Exp		4789454						
