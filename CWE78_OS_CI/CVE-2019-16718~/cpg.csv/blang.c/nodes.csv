command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	609873	File	data/converged/CVE-2019-16718~_radare2/blang.c								
ANR	609874	ClassDef	<unnamed>	5:8:82:171							
ANR	609875	DeclStmt									
ANR	609876	Decl							bool	bool	rust
ANR	609877	DeclStmt									
ANR	609878	Decl							bool	bool	objc
ANR	609879	DeclStmt									
ANR	609880	Decl							bool	bool	dlang
ANR	609881	DeclStmt									
ANR	609882	Decl							bool	bool	swift
ANR	609883	DeclStmt									
ANR	609884	Decl							bool	bool	cxx
ANR	609885	DeclStmt									
ANR	609886	Decl							bool	bool	msvc
ANR	609887	DeclStmt									
ANR	609888	Decl									Langs
ANR	609889	Function	check_rust	14:0:174:273							
ANR	609890	FunctionDef	check_rust (RBinSymbol * sym)		609889	0					
ANR	609891	CompoundStatement		14:47:221:273	609889	0					
ANR	609892	ReturnStatement	"return sym -> name && strstr ( sym -> name , ""_$LT$"" ) ;"	15:1:224:271	609889	0	True				
ANR	609893	AndExpression	"sym -> name && strstr ( sym -> name , ""_$LT$"" )"		609889	0		&&			
ANR	609894	PtrMemberAccess	sym -> name		609889	0					
ANR	609895	Identifier	sym		609889	0					
ANR	609896	Identifier	name		609889	1					
ANR	609897	CallExpression	"strstr ( sym -> name , ""_$LT$"" )"		609889	1					
ANR	609898	Callee	strstr		609889	0					
ANR	609899	Identifier	strstr		609889	0					
ANR	609900	ArgumentList	sym -> name		609889	1					
ANR	609901	Argument	sym -> name		609889	0					
ANR	609902	PtrMemberAccess	sym -> name		609889	0					
ANR	609903	Identifier	sym		609889	0					
ANR	609904	Identifier	name		609889	1					
ANR	609905	Argument	"""_$LT$"""		609889	1					
ANR	609906	PrimaryExpression	"""_$LT$"""		609889	0					
ANR	609907	ReturnType	static inline bool		609889	1					
ANR	609908	Identifier	check_rust		609889	2					
ANR	609909	ParameterList	RBinSymbol * sym		609889	3					
ANR	609910	Parameter	RBinSymbol * sym	14:30:204:218	609889	0	True				
ANR	609911	ParameterType	RBinSymbol *		609889	0					
ANR	609912	Identifier	sym		609889	1					
ANR	609913	CFGEntryNode	ENTRY		609889		True				
ANR	609914	CFGExitNode	EXIT		609889		True				
ANR	609915	Symbol	* sym		609889						
ANR	609916	Symbol	strstr		609889						
ANR	609917	Symbol	sym		609889						
ANR	609918	Symbol	sym -> name		609889						
ANR	609919	Function	check_objc	18:0:276:467							
ANR	609920	FunctionDef	check_objc (RBinSymbol * sym)		609919	0					
ANR	609921	CompoundStatement		18:47:323:467	609919	0					
ANR	609922	IfStatement	"if ( sym -> name && ! strncmp ( sym -> name , ""_OBJC_"" , 6 ) )"		609919	0					
ANR	609923	Condition	"sym -> name && ! strncmp ( sym -> name , ""_OBJC_"" , 6 )"	19:5:330:375	609919	0	True				
ANR	609924	AndExpression	"sym -> name && ! strncmp ( sym -> name , ""_OBJC_"" , 6 )"		609919	0		&&			
ANR	609925	PtrMemberAccess	sym -> name		609919	0					
ANR	609926	Identifier	sym		609919	0					
ANR	609927	Identifier	name		609919	1					
ANR	609928	UnaryOperationExpression	"! strncmp ( sym -> name , ""_OBJC_"" , 6 )"		609919	1					
ANR	609929	UnaryOperator	!		609919	0					
ANR	609930	CallExpression	"strncmp ( sym -> name , ""_OBJC_"" , 6 )"		609919	1					
ANR	609931	Callee	strncmp		609919	0					
ANR	609932	Identifier	strncmp		609919	0					
ANR	609933	ArgumentList	sym -> name		609919	1					
ANR	609934	Argument	sym -> name		609919	0					
ANR	609935	PtrMemberAccess	sym -> name		609919	0					
ANR	609936	Identifier	sym		609919	0					
ANR	609937	Identifier	name		609919	1					
ANR	609938	Argument	"""_OBJC_"""		609919	1					
ANR	609939	PrimaryExpression	"""_OBJC_"""		609919	0					
ANR	609940	Argument	6		609919	2					
ANR	609941	PrimaryExpression	6		609919	0					
ANR	609942	CompoundStatement		2:53:54:54	609919	1					
ANR	609943	ReturnStatement	return true ;	21:2:436:447	609919	0	True				
ANR	609944	Identifier	true		609919	0					
ANR	609945	ReturnStatement	return false ;	23:1:453:465	609919	1	True				
ANR	609946	Identifier	false		609919	0					
ANR	609947	ReturnType	static inline bool		609919	1					
ANR	609948	Identifier	check_objc		609919	2					
ANR	609949	ParameterList	RBinSymbol * sym		609919	3					
ANR	609950	Parameter	RBinSymbol * sym	18:30:306:320	609919	0	True				
ANR	609951	ParameterType	RBinSymbol *		609919	0					
ANR	609952	Identifier	sym		609919	1					
ANR	609953	CFGEntryNode	ENTRY		609919		True				
ANR	609954	CFGExitNode	EXIT		609919		True				
ANR	609955	Symbol	* sym		609919						
ANR	609956	Symbol	strncmp		609919						
ANR	609957	Symbol	sym		609919						
ANR	609958	Symbol	sym -> name		609919						
ANR	609959	Symbol	true		609919						
ANR	609960	Symbol	false		609919						
ANR	609961	Function	check_dlang	26:0:470:642							
ANR	609962	FunctionDef	check_dlang (RBinSymbol * sym)		609961	0					
ANR	609963	CompoundStatement		26:41:511:642	609961	0					
ANR	609964	IfStatement	"if ( ! strncmp ( sym -> name , ""_D2"" , 3 ) )"		609961	0					
ANR	609965	Condition	"! strncmp ( sym -> name , ""_D2"" , 3 )"	27:5:518:547	609961	0	True				
ANR	609966	UnaryOperationExpression	"! strncmp ( sym -> name , ""_D2"" , 3 )"		609961	0					
ANR	609967	UnaryOperator	!		609961	0					
ANR	609968	CallExpression	"strncmp ( sym -> name , ""_D2"" , 3 )"		609961	1					
ANR	609969	Callee	strncmp		609961	0					
ANR	609970	Identifier	strncmp		609961	0					
ANR	609971	ArgumentList	sym -> name		609961	1					
ANR	609972	Argument	sym -> name		609961	0					
ANR	609973	PtrMemberAccess	sym -> name		609961	0					
ANR	609974	Identifier	sym		609961	0					
ANR	609975	Identifier	name		609961	1					
ANR	609976	Argument	"""_D2"""		609961	1					
ANR	609977	PrimaryExpression	"""_D2"""		609961	0					
ANR	609978	Argument	3		609961	2					
ANR	609979	PrimaryExpression	3		609961	0					
ANR	609980	CompoundStatement		2:37:38:38	609961	1					
ANR	609981	ReturnStatement	return true ;	28:2:554:565	609961	0	True				
ANR	609982	Identifier	true		609961	0					
ANR	609983	IfStatement	"if ( ! strncmp ( sym -> name , ""_D4"" , 3 ) )"		609961	1					
ANR	609984	Condition	"! strncmp ( sym -> name , ""_D4"" , 3 )"	30:5:575:604	609961	0	True				
ANR	609985	UnaryOperationExpression	"! strncmp ( sym -> name , ""_D4"" , 3 )"		609961	0					
ANR	609986	UnaryOperator	!		609961	0					
ANR	609987	CallExpression	"strncmp ( sym -> name , ""_D4"" , 3 )"		609961	1					
ANR	609988	Callee	strncmp		609961	0					
ANR	609989	Identifier	strncmp		609961	0					
ANR	609990	ArgumentList	sym -> name		609961	1					
ANR	609991	Argument	sym -> name		609961	0					
ANR	609992	PtrMemberAccess	sym -> name		609961	0					
ANR	609993	Identifier	sym		609961	0					
ANR	609994	Identifier	name		609961	1					
ANR	609995	Argument	"""_D4"""		609961	1					
ANR	609996	PrimaryExpression	"""_D4"""		609961	0					
ANR	609997	Argument	3		609961	2					
ANR	609998	PrimaryExpression	3		609961	0					
ANR	609999	CompoundStatement		5:37:95:95	609961	1					
ANR	610000	ReturnStatement	return true ;	31:2:611:622	609961	0	True				
ANR	610001	Identifier	true		609961	0					
ANR	610002	ReturnStatement	return false ;	33:1:628:640	609961	2	True				
ANR	610003	Identifier	false		609961	0					
ANR	610004	ReturnType	static bool		609961	1					
ANR	610005	Identifier	check_dlang		609961	2					
ANR	610006	ParameterList	RBinSymbol * sym		609961	3					
ANR	610007	Parameter	RBinSymbol * sym	26:24:494:508	609961	0	True				
ANR	610008	ParameterType	RBinSymbol *		609961	0					
ANR	610009	Identifier	sym		609961	1					
ANR	610010	CFGEntryNode	ENTRY		609961		True				
ANR	610011	CFGExitNode	EXIT		609961		True				
ANR	610012	Symbol	strncmp		609961						
ANR	610013	Symbol	* sym		609961						
ANR	610014	Symbol	sym		609961						
ANR	610015	Symbol	sym -> name		609961						
ANR	610016	Symbol	true		609961						
ANR	610017	Symbol	false		609961						
ANR	610018	Function	check_swift	36:0:645:775							
ANR	610019	FunctionDef	check_swift (RBinSymbol * sym)		610018	0					
ANR	610020	CompoundStatement		36:41:686:775	610018	0					
ANR	610021	IfStatement	"if ( sym -> name && strstr ( sym -> name , ""swift_once"" ) )"		610018	0					
ANR	610022	Condition	"sym -> name && strstr ( sym -> name , ""swift_once"" )"	37:5:693:737	610018	0	True				
ANR	610023	AndExpression	"sym -> name && strstr ( sym -> name , ""swift_once"" )"		610018	0		&&			
ANR	610024	PtrMemberAccess	sym -> name		610018	0					
ANR	610025	Identifier	sym		610018	0					
ANR	610026	Identifier	name		610018	1					
ANR	610027	CallExpression	"strstr ( sym -> name , ""swift_once"" )"		610018	1					
ANR	610028	Callee	strstr		610018	0					
ANR	610029	Identifier	strstr		610018	0					
ANR	610030	ArgumentList	sym -> name		610018	1					
ANR	610031	Argument	sym -> name		610018	0					
ANR	610032	PtrMemberAccess	sym -> name		610018	0					
ANR	610033	Identifier	sym		610018	0					
ANR	610034	Identifier	name		610018	1					
ANR	610035	Argument	"""swift_once"""		610018	1					
ANR	610036	PrimaryExpression	"""swift_once"""		610018	0					
ANR	610037	CompoundStatement		2:52:53:53	610018	1					
ANR	610038	ReturnStatement	return true ;	38:2:744:755	610018	0	True				
ANR	610039	Identifier	true		610018	0					
ANR	610040	ReturnStatement	return false ;	40:1:761:773	610018	1	True				
ANR	610041	Identifier	false		610018	0					
ANR	610042	ReturnType	static bool		610018	1					
ANR	610043	Identifier	check_swift		610018	2					
ANR	610044	ParameterList	RBinSymbol * sym		610018	3					
ANR	610045	Parameter	RBinSymbol * sym	36:24:669:683	610018	0	True				
ANR	610046	ParameterType	RBinSymbol *		610018	0					
ANR	610047	Identifier	sym		610018	1					
ANR	610048	CFGEntryNode	ENTRY		610018		True				
ANR	610049	CFGExitNode	EXIT		610018		True				
ANR	610050	Symbol	* sym		610018						
ANR	610051	Symbol	strstr		610018						
ANR	610052	Symbol	sym		610018						
ANR	610053	Symbol	sym -> name		610018						
ANR	610054	Symbol	true		610018						
ANR	610055	Symbol	false		610018						
ANR	610056	Function	is_cxx_symbol	43:0:778:987							
ANR	610057	FunctionDef	is_cxx_symbol (const char * name)		610056	0					
ANR	610058	CompoundStatement		43:52:830:987	610056	0					
ANR	610059	ExpressionStatement	"r_return_val_if_fail ( name , false )"	44:1:833:867	610056	0	True				
ANR	610060	CallExpression	"r_return_val_if_fail ( name , false )"		610056	0					
ANR	610061	Callee	r_return_val_if_fail		610056	0					
ANR	610062	Identifier	r_return_val_if_fail		610056	0					
ANR	610063	ArgumentList	name		610056	1					
ANR	610064	Argument	name		610056	0					
ANR	610065	Identifier	name		610056	0					
ANR	610066	Argument	false		610056	1					
ANR	610067	Identifier	false		610056	0					
ANR	610068	IfStatement	"if ( ! strncmp ( name , ""_Z"" , 2 ) )"		610056	1					
ANR	610069	Condition	"! strncmp ( name , ""_Z"" , 2 )"	45:5:874:897	610056	0	True				
ANR	610070	UnaryOperationExpression	"! strncmp ( name , ""_Z"" , 2 )"		610056	0					
ANR	610071	UnaryOperator	!		610056	0					
ANR	610072	CallExpression	"strncmp ( name , ""_Z"" , 2 )"		610056	1					
ANR	610073	Callee	strncmp		610056	0					
ANR	610074	Identifier	strncmp		610056	0					
ANR	610075	ArgumentList	name		610056	1					
ANR	610076	Argument	name		610056	0					
ANR	610077	Identifier	name		610056	0					
ANR	610078	Argument	"""_Z"""		610056	1					
ANR	610079	PrimaryExpression	"""_Z"""		610056	0					
ANR	610080	Argument	2		610056	2					
ANR	610081	PrimaryExpression	2		610056	0					
ANR	610082	CompoundStatement		3:31:69:69	610056	1					
ANR	610083	ReturnStatement	return true ;	46:2:904:915	610056	0	True				
ANR	610084	Identifier	true		610056	0					
ANR	610085	IfStatement	"if ( ! strncmp ( name , ""__Z"" , 3 ) )"		610056	2					
ANR	610086	Condition	"! strncmp ( name , ""__Z"" , 3 )"	48:5:925:949	610056	0	True				
ANR	610087	UnaryOperationExpression	"! strncmp ( name , ""__Z"" , 3 )"		610056	0					
ANR	610088	UnaryOperator	!		610056	0					
ANR	610089	CallExpression	"strncmp ( name , ""__Z"" , 3 )"		610056	1					
ANR	610090	Callee	strncmp		610056	0					
ANR	610091	Identifier	strncmp		610056	0					
ANR	610092	ArgumentList	name		610056	1					
ANR	610093	Argument	name		610056	0					
ANR	610094	Identifier	name		610056	0					
ANR	610095	Argument	"""__Z"""		610056	1					
ANR	610096	PrimaryExpression	"""__Z"""		610056	0					
ANR	610097	Argument	3		610056	2					
ANR	610098	PrimaryExpression	3		610056	0					
ANR	610099	CompoundStatement		6:32:121:121	610056	1					
ANR	610100	ReturnStatement	return true ;	49:2:956:967	610056	0	True				
ANR	610101	Identifier	true		610056	0					
ANR	610102	ReturnStatement	return false ;	51:1:973:985	610056	3	True				
ANR	610103	Identifier	false		610056	0					
ANR	610104	ReturnType	static inline bool		610056	1					
ANR	610105	Identifier	is_cxx_symbol		610056	2					
ANR	610106	ParameterList	const char * name		610056	3					
ANR	610107	Parameter	const char * name	43:34:812:827	610056	0	True				
ANR	610108	ParameterType	const char *		610056	0					
ANR	610109	Identifier	name		610056	1					
ANR	610110	CFGEntryNode	ENTRY		610056		True				
ANR	610111	CFGExitNode	EXIT		610056		True				
ANR	610112	Symbol	strncmp		610056						
ANR	610113	Symbol	name		610056						
ANR	610114	Symbol	false		610056						
ANR	610115	Symbol	true		610056						
ANR	610116	Function	check_cxx	54:0:990:1066							
ANR	610117	FunctionDef	check_cxx (RBinSymbol * sym)		610116	0					
ANR	610118	CompoundStatement		54:39:1029:1066	610116	0					
ANR	610119	ReturnStatement	return is_cxx_symbol ( sym -> name ) ;	55:1:1032:1064	610116	0	True				
ANR	610120	CallExpression	is_cxx_symbol ( sym -> name )		610116	0					
ANR	610121	Callee	is_cxx_symbol		610116	0					
ANR	610122	Identifier	is_cxx_symbol		610116	0					
ANR	610123	ArgumentList	sym -> name		610116	1					
ANR	610124	Argument	sym -> name		610116	0					
ANR	610125	PtrMemberAccess	sym -> name		610116	0					
ANR	610126	Identifier	sym		610116	0					
ANR	610127	Identifier	name		610116	1					
ANR	610128	ReturnType	static bool		610116	1					
ANR	610129	Identifier	check_cxx		610116	2					
ANR	610130	ParameterList	RBinSymbol * sym		610116	3					
ANR	610131	Parameter	RBinSymbol * sym	54:22:1012:1026	610116	0	True				
ANR	610132	ParameterType	RBinSymbol *		610116	0					
ANR	610133	Identifier	sym		610116	1					
ANR	610134	CFGEntryNode	ENTRY		610116		True				
ANR	610135	CFGExitNode	EXIT		610116		True				
ANR	610136	Symbol	* sym		610116						
ANR	610137	Symbol	is_cxx_symbol		610116						
ANR	610138	Symbol	sym		610116						
ANR	610139	Symbol	sym -> name		610116						
ANR	610140	Function	check_msvc	58:0:1069:1138							
ANR	610141	FunctionDef	check_msvc (RBinSymbol * sym)		610140	0					
ANR	610142	CompoundStatement		58:40:1109:1138	610140	0					
ANR	610143	ReturnStatement	return * sym -> name == '?' ;	59:1:1112:1136	610140	0	True				
ANR	610144	EqualityExpression	* sym -> name == '?'		610140	0		==			
ANR	610145	UnaryOperationExpression	* sym -> name		610140	0					
ANR	610146	UnaryOperator	*		610140	0					
ANR	610147	PtrMemberAccess	sym -> name		610140	1					
ANR	610148	Identifier	sym		610140	0					
ANR	610149	Identifier	name		610140	1					
ANR	610150	PrimaryExpression	'?'		610140	1					
ANR	610151	ReturnType	static bool		610140	1					
ANR	610152	Identifier	check_msvc		610140	2					
ANR	610153	ParameterList	RBinSymbol * sym		610140	3					
ANR	610154	Parameter	RBinSymbol * sym	58:23:1092:1106	610140	0	True				
ANR	610155	ParameterType	RBinSymbol *		610140	0					
ANR	610156	Identifier	sym		610140	1					
ANR	610157	CFGEntryNode	ENTRY		610140		True				
ANR	610158	CFGExitNode	EXIT		610140		True				
ANR	610159	Symbol	* sym -> name		610140						
ANR	610160	Symbol	* sym		610140						
ANR	610161	Symbol	sym		610140						
ANR	610162	Symbol	sym -> name		610140						
ANR	610163	Symbol	* * sym		610140						
ANR	610164	Function	r_bin_load_languages	63:0:1207:3977							
ANR	610165	FunctionDef	r_bin_load_languages (RBinFile * binfile)		610164	0					
ANR	610166	CompoundStatement		63:50:1257:3977	610164	0					
ANR	610167	ExpressionStatement	"r_return_val_if_fail ( binfile , R_BIN_NM_NONE )"	64:1:1260:1305	610164	0	True				
ANR	610168	CallExpression	"r_return_val_if_fail ( binfile , R_BIN_NM_NONE )"		610164	0					
ANR	610169	Callee	r_return_val_if_fail		610164	0					
ANR	610170	Identifier	r_return_val_if_fail		610164	0					
ANR	610171	ArgumentList	binfile		610164	1					
ANR	610172	Argument	binfile		610164	0					
ANR	610173	Identifier	binfile		610164	0					
ANR	610174	Argument	R_BIN_NM_NONE		610164	1					
ANR	610175	Identifier	R_BIN_NM_NONE		610164	0					
ANR	610176	ExpressionStatement	"r_return_val_if_fail ( binfile -> o , R_BIN_NM_NONE )"	65:1:1308:1356	610164	1	True				
ANR	610177	CallExpression	"r_return_val_if_fail ( binfile -> o , R_BIN_NM_NONE )"		610164	0					
ANR	610178	Callee	r_return_val_if_fail		610164	0					
ANR	610179	Identifier	r_return_val_if_fail		610164	0					
ANR	610180	ArgumentList	binfile -> o		610164	1					
ANR	610181	Argument	binfile -> o		610164	0					
ANR	610182	PtrMemberAccess	binfile -> o		610164	0					
ANR	610183	Identifier	binfile		610164	0					
ANR	610184	Identifier	o		610164	1					
ANR	610185	Argument	R_BIN_NM_NONE		610164	1					
ANR	610186	Identifier	R_BIN_NM_NONE		610164	0					
ANR	610187	ExpressionStatement	"r_return_val_if_fail ( binfile -> o -> info , R_BIN_NM_NONE )"	66:1:1359:1413	610164	2	True				
ANR	610188	CallExpression	"r_return_val_if_fail ( binfile -> o -> info , R_BIN_NM_NONE )"		610164	0					
ANR	610189	Callee	r_return_val_if_fail		610164	0					
ANR	610190	Identifier	r_return_val_if_fail		610164	0					
ANR	610191	ArgumentList	binfile -> o -> info		610164	1					
ANR	610192	Argument	binfile -> o -> info		610164	0					
ANR	610193	PtrMemberAccess	binfile -> o -> info		610164	0					
ANR	610194	PtrMemberAccess	binfile -> o		610164	0					
ANR	610195	Identifier	binfile		610164	0					
ANR	610196	Identifier	o		610164	1					
ANR	610197	Identifier	info		610164	1					
ANR	610198	Argument	R_BIN_NM_NONE		610164	1					
ANR	610199	Identifier	R_BIN_NM_NONE		610164	0					
ANR	610200	IdentifierDeclStatement	RBinObject * o = binfile -> o ;	67:1:1416:1442	610164	3	True				
ANR	610201	IdentifierDecl	* o = binfile -> o		610164	0					
ANR	610202	IdentifierDeclType	RBinObject *		610164	0					
ANR	610203	Identifier	o		610164	1					
ANR	610204	AssignmentExpression	* o = binfile -> o		610164	2		=			
ANR	610205	Identifier	o		610164	0					
ANR	610206	PtrMemberAccess	binfile -> o		610164	1					
ANR	610207	Identifier	binfile		610164	0					
ANR	610208	Identifier	o		610164	1					
ANR	610209	IdentifierDeclStatement	RBinInfo * info = o -> info ;	68:1:1445:1469	610164	4	True				
ANR	610210	IdentifierDecl	* info = o -> info		610164	0					
ANR	610211	IdentifierDeclType	RBinInfo *		610164	0					
ANR	610212	Identifier	info		610164	1					
ANR	610213	AssignmentExpression	* info = o -> info		610164	2		=			
ANR	610214	Identifier	info		610164	0					
ANR	610215	PtrMemberAccess	o -> info		610164	1					
ANR	610216	Identifier	o		610164	0					
ANR	610217	Identifier	info		610164	1					
ANR	610218	IdentifierDeclStatement	RBinSymbol * sym ;	69:1:1472:1487	610164	5	True				
ANR	610219	IdentifierDecl	* sym		610164	0					
ANR	610220	IdentifierDeclType	RBinSymbol *		610164	0					
ANR	610221	Identifier	sym		610164	1					
ANR	610222	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	70:1:1490:1513	610164	6	True				
ANR	610223	IdentifierDecl	* iter		610164	0					
ANR	610224	IdentifierDeclType	RListIter *		610164	0					
ANR	610225	Identifier	iter		610164	1					
ANR	610226	IdentifierDecl	* iter2		610164	1					
ANR	610227	IdentifierDeclType	RListIter *		610164	0					
ANR	610228	Identifier	iter2		610164	1					
ANR	610229	IdentifierDeclStatement	Langs cantbe = { 0 } ;	71:1:1516:1534	610164	7	True				
ANR	610230	IdentifierDecl	cantbe = { 0 }		610164	0					
ANR	610231	IdentifierDeclType	Langs		610164	0					
ANR	610232	Identifier	cantbe		610164	1					
ANR	610233	AssignmentExpression	cantbe = { 0 }		610164	2		=			
ANR	610234	Identifier	cantbe		610164	0					
ANR	610235	InitializerList	0		610164	1					
ANR	610236	PrimaryExpression	0		610164	0					
ANR	610237	IdentifierDeclStatement	bool phobosIsChecked = false ;	72:1:1537:1565	610164	8	True				
ANR	610238	IdentifierDecl	phobosIsChecked = false		610164	0					
ANR	610239	IdentifierDeclType	bool		610164	0					
ANR	610240	Identifier	phobosIsChecked		610164	1					
ANR	610241	AssignmentExpression	phobosIsChecked = false		610164	2		=			
ANR	610242	Identifier	false		610164	0					
ANR	610243	Identifier	false		610164	1					
ANR	610244	IdentifierDeclStatement	bool swiftIsChecked = false ;	73:1:1568:1595	610164	9	True				
ANR	610245	IdentifierDecl	swiftIsChecked = false		610164	0					
ANR	610246	IdentifierDeclType	bool		610164	0					
ANR	610247	Identifier	swiftIsChecked		610164	1					
ANR	610248	AssignmentExpression	swiftIsChecked = false		610164	2		=			
ANR	610249	Identifier	false		610164	0					
ANR	610250	Identifier	false		610164	1					
ANR	610251	IdentifierDeclStatement	bool canBeCxx = false ;	74:1:1598:1619	610164	10	True				
ANR	610252	IdentifierDecl	canBeCxx = false		610164	0					
ANR	610253	IdentifierDeclType	bool		610164	0					
ANR	610254	Identifier	canBeCxx		610164	1					
ANR	610255	AssignmentExpression	canBeCxx = false		610164	2		=			
ANR	610256	Identifier	false		610164	0					
ANR	610257	Identifier	false		610164	1					
ANR	610258	IdentifierDeclStatement	bool cxxIsChecked = false ;	75:1:1622:1647	610164	11	True				
ANR	610259	IdentifierDecl	cxxIsChecked = false		610164	0					
ANR	610260	IdentifierDeclType	bool		610164	0					
ANR	610261	Identifier	cxxIsChecked		610164	1					
ANR	610262	AssignmentExpression	cxxIsChecked = false		610164	2		=			
ANR	610263	Identifier	false		610164	0					
ANR	610264	Identifier	false		610164	1					
ANR	610265	IdentifierDeclStatement	bool isMsvc = false ;	76:1:1650:1669	610164	12	True				
ANR	610266	IdentifierDecl	isMsvc = false		610164	0					
ANR	610267	IdentifierDeclType	bool		610164	0					
ANR	610268	Identifier	isMsvc		610164	1					
ANR	610269	AssignmentExpression	isMsvc = false		610164	2		=			
ANR	610270	Identifier	false		610164	0					
ANR	610271	Identifier	false		610164	1					
ANR	610272	IdentifierDeclStatement	"char * ft = info -> rclass ? info -> rclass : """" ;"	78:1:1673:1714	610164	13	True				
ANR	610273	IdentifierDecl	"* ft = info -> rclass ? info -> rclass : """""		610164	0					
ANR	610274	IdentifierDeclType	char *		610164	0					
ANR	610275	Identifier	ft		610164	1					
ANR	610276	AssignmentExpression	"* ft = info -> rclass ? info -> rclass : """""		610164	2		=			
ANR	610277	Identifier	ft		610164	0					
ANR	610278	ConditionalExpression	"info -> rclass ? info -> rclass : """""		610164	1					
ANR	610279	Condition	info -> rclass		610164	0					
ANR	610280	PtrMemberAccess	info -> rclass		610164	0					
ANR	610281	Identifier	info		610164	0					
ANR	610282	Identifier	rclass		610164	1					
ANR	610283	PtrMemberAccess	info -> rclass		610164	1					
ANR	610284	Identifier	info		610164	0					
ANR	610285	Identifier	rclass		610164	1					
ANR	610286	PrimaryExpression	""""""		610164	2					
ANR	610287	IdentifierDeclStatement	bool unknownType = info -> rclass == NULL ;	79:1:1717:1756	610164	14	True				
ANR	610288	IdentifierDecl	unknownType = info -> rclass == NULL		610164	0					
ANR	610289	IdentifierDeclType	bool		610164	0					
ANR	610290	Identifier	unknownType		610164	1					
ANR	610291	AssignmentExpression	unknownType = info -> rclass == NULL		610164	2		=			
ANR	610292	Identifier	unknownType		610164	0					
ANR	610293	EqualityExpression	info -> rclass == NULL		610164	1		==			
ANR	610294	PtrMemberAccess	info -> rclass		610164	0					
ANR	610295	Identifier	info		610164	0					
ANR	610296	Identifier	rclass		610164	1					
ANR	610297	Identifier	NULL		610164	1					
ANR	610298	IdentifierDeclStatement	"bool isMacho = strstr ( ft , ""mach"" ) ;"	80:1:1759:1793	610164	15	True				
ANR	610299	IdentifierDecl	"isMacho = strstr ( ft , ""mach"" )"		610164	0					
ANR	610300	IdentifierDeclType	bool		610164	0					
ANR	610301	Identifier	isMacho		610164	1					
ANR	610302	AssignmentExpression	"isMacho = strstr ( ft , ""mach"" )"		610164	2		=			
ANR	610303	Identifier	isMacho		610164	0					
ANR	610304	CallExpression	"strstr ( ft , ""mach"" )"		610164	1					
ANR	610305	Callee	strstr		610164	0					
ANR	610306	Identifier	strstr		610164	0					
ANR	610307	ArgumentList	ft		610164	1					
ANR	610308	Argument	ft		610164	0					
ANR	610309	Identifier	ft		610164	0					
ANR	610310	Argument	"""mach"""		610164	1					
ANR	610311	PrimaryExpression	"""mach"""		610164	0					
ANR	610312	IdentifierDeclStatement	"bool isElf = strstr ( ft , ""elf"" ) ;"	81:1:1796:1827	610164	16	True				
ANR	610313	IdentifierDecl	"isElf = strstr ( ft , ""elf"" )"		610164	0					
ANR	610314	IdentifierDeclType	bool		610164	0					
ANR	610315	Identifier	isElf		610164	1					
ANR	610316	AssignmentExpression	"isElf = strstr ( ft , ""elf"" )"		610164	2		=			
ANR	610317	Identifier	isElf		610164	0					
ANR	610318	CallExpression	"strstr ( ft , ""elf"" )"		610164	1					
ANR	610319	Callee	strstr		610164	0					
ANR	610320	Identifier	strstr		610164	0					
ANR	610321	ArgumentList	ft		610164	1					
ANR	610322	Argument	ft		610164	0					
ANR	610323	Identifier	ft		610164	0					
ANR	610324	Argument	"""elf"""		610164	1					
ANR	610325	PrimaryExpression	"""elf"""		610164	0					
ANR	610326	IdentifierDeclStatement	"bool isPe = strstr ( ft , ""pe"" ) ;"	82:1:1830:1859	610164	17	True				
ANR	610327	IdentifierDecl	"isPe = strstr ( ft , ""pe"" )"		610164	0					
ANR	610328	IdentifierDeclType	bool		610164	0					
ANR	610329	Identifier	isPe		610164	1					
ANR	610330	AssignmentExpression	"isPe = strstr ( ft , ""pe"" )"		610164	2		=			
ANR	610331	Identifier	isPe		610164	0					
ANR	610332	CallExpression	"strstr ( ft , ""pe"" )"		610164	1					
ANR	610333	Callee	strstr		610164	0					
ANR	610334	Identifier	strstr		610164	0					
ANR	610335	ArgumentList	ft		610164	1					
ANR	610336	Argument	ft		610164	0					
ANR	610337	Identifier	ft		610164	0					
ANR	610338	Argument	"""pe"""		610164	1					
ANR	610339	PrimaryExpression	"""pe"""		610164	0					
ANR	610340	IdentifierDeclStatement	bool isBlocks = false ;	83:1:1862:1883	610164	18	True				
ANR	610341	IdentifierDecl	isBlocks = false		610164	0					
ANR	610342	IdentifierDeclType	bool		610164	0					
ANR	610343	Identifier	isBlocks		610164	1					
ANR	610344	AssignmentExpression	isBlocks = false		610164	2		=			
ANR	610345	Identifier	false		610164	0					
ANR	610346	Identifier	false		610164	1					
ANR	610347	IdentifierDeclStatement	bool isObjC = false ;	84:1:1886:1905	610164	19	True				
ANR	610348	IdentifierDecl	isObjC = false		610164	0					
ANR	610349	IdentifierDeclType	bool		610164	0					
ANR	610350	Identifier	isObjC		610164	1					
ANR	610351	AssignmentExpression	isObjC = false		610164	2		=			
ANR	610352	Identifier	false		610164	0					
ANR	610353	Identifier	false		610164	1					
ANR	610354	IfStatement	if ( unknownType || ! ( isMacho || isElf || isPe ) )		610164	20					
ANR	610355	Condition	unknownType || ! ( isMacho || isElf || isPe )	86:5:1913:1954	610164	0	True				
ANR	610356	OrExpression	unknownType || ! ( isMacho || isElf || isPe )		610164	0		||			
ANR	610357	Identifier	unknownType		610164	0					
ANR	610358	UnaryOperationExpression	! ( isMacho || isElf || isPe )		610164	1					
ANR	610359	UnaryOperator	!		610164	0					
ANR	610360	OrExpression	isMacho || isElf || isPe		610164	1		||			
ANR	610361	Identifier	isMacho		610164	0					
ANR	610362	OrExpression	isElf || isPe		610164	1		||			
ANR	610363	Identifier	isElf		610164	0					
ANR	610364	Identifier	isPe		610164	1					
ANR	610365	CompoundStatement		24:49:699:699	610164	1					
ANR	610366	ReturnStatement	return R_BIN_NM_NONE ;	87:2:1961:1981	610164	0	True				
ANR	610367	Identifier	R_BIN_NM_NONE		610164	0					
ANR	610368	Statement	r_list_foreach	91:1:2023:2036	610164	21	True				
ANR	610369	Statement	(	91:16:2038:2038	610164	22	True				
ANR	610370	Statement	o	91:17:2039:2039	610164	23	True				
ANR	610371	Statement	->	91:18:2040:2041	610164	24	True				
ANR	610372	Statement	imports	91:20:2042:2048	610164	25	True				
ANR	610373	Statement	","	91:27:2049:2049	610164	26	True				
ANR	610374	Statement	iter	91:29:2051:2054	610164	27	True				
ANR	610375	Statement	","	91:33:2055:2055	610164	28	True				
ANR	610376	Statement	sym	91:35:2057:2059	610164	29	True				
ANR	610377	Statement	)	91:38:2060:2060	610164	30	True				
ANR	610378	CompoundStatement		30:2:808:836	610164	31					
ANR	610379	IdentifierDeclStatement	const char * name = sym -> name ;	92:2:2066:2094	610164	0	True				
ANR	610380	IdentifierDecl	* name = sym -> name		610164	0					
ANR	610381	IdentifierDeclType	const char *		610164	0					
ANR	610382	Identifier	name		610164	1					
ANR	610383	AssignmentExpression	* name = sym -> name		610164	2		=			
ANR	610384	Identifier	name		610164	0					
ANR	610385	PtrMemberAccess	sym -> name		610164	1					
ANR	610386	Identifier	sym		610164	0					
ANR	610387	Identifier	name		610164	1					
ANR	610388	IfStatement	"if ( ! strcmp ( name , ""_NSConcreteGlobalBlock"" ) )"		610164	1					
ANR	610389	Condition	"! strcmp ( name , ""_NSConcreteGlobalBlock"" )"	93:6:2102:2141	610164	0	True				
ANR	610390	UnaryOperationExpression	"! strcmp ( name , ""_NSConcreteGlobalBlock"" )"		610164	0					
ANR	610391	UnaryOperator	!		610164	0					
ANR	610392	CallExpression	"strcmp ( name , ""_NSConcreteGlobalBlock"" )"		610164	1					
ANR	610393	Callee	strcmp		610164	0					
ANR	610394	Identifier	strcmp		610164	0					
ANR	610395	ArgumentList	name		610164	1					
ANR	610396	Argument	name		610164	0					
ANR	610397	Identifier	name		610164	0					
ANR	610398	Argument	"""_NSConcreteGlobalBlock"""		610164	1					
ANR	610399	PrimaryExpression	"""_NSConcreteGlobalBlock"""		610164	0					
ANR	610400	CompoundStatement		31:48:886:886	610164	1					
ANR	610401	ExpressionStatement	isBlocks = true	94:3:2149:2164	610164	0	True				
ANR	610402	AssignmentExpression	isBlocks = true		610164	0		=			
ANR	610403	Identifier	isBlocks		610164	0					
ANR	610404	Identifier	true		610164	1					
ANR	610405	ElseStatement	else		610164	0					
ANR	610406	IfStatement	"if ( ! strncmp ( name , ""objc_"" , 5 ) )"		610164	0					
ANR	610407	Condition	"! strncmp ( name , ""objc_"" , 5 )"	95:13:2179:2205	610164	0	True				
ANR	610408	UnaryOperationExpression	"! strncmp ( name , ""objc_"" , 5 )"		610164	0					
ANR	610409	UnaryOperator	!		610164	0					
ANR	610410	CallExpression	"strncmp ( name , ""objc_"" , 5 )"		610164	1					
ANR	610411	Callee	strncmp		610164	0					
ANR	610412	Identifier	strncmp		610164	0					
ANR	610413	ArgumentList	name		610164	1					
ANR	610414	Argument	name		610164	0					
ANR	610415	Identifier	name		610164	0					
ANR	610416	Argument	"""objc_"""		610164	1					
ANR	610417	PrimaryExpression	"""objc_"""		610164	0					
ANR	610418	Argument	5		610164	2					
ANR	610419	PrimaryExpression	5		610164	0					
ANR	610420	CompoundStatement		33:42:950:950	610164	1					
ANR	610421	ExpressionStatement	isObjC = true	96:3:2213:2226	610164	0	True				
ANR	610422	AssignmentExpression	isObjC = true		610164	0		=			
ANR	610423	Identifier	isObjC		610164	0					
ANR	610424	Identifier	true		610164	1					
ANR	610425	ExpressionStatement	cantbe . objc = true	97:3:2231:2249	610164	1	True				
ANR	610426	AssignmentExpression	cantbe . objc = true		610164	0		=			
ANR	610427	MemberAccess	cantbe . objc		610164	0					
ANR	610428	Identifier	cantbe		610164	0					
ANR	610429	Identifier	objc		610164	1					
ANR	610430	Identifier	true		610164	1					
ANR	610431	Statement	r_list_foreach	101:1:2260:2273	610164	32	True				
ANR	610432	Statement	(	101:16:2275:2275	610164	33	True				
ANR	610433	Statement	o	101:17:2276:2276	610164	34	True				
ANR	610434	Statement	->	101:18:2277:2278	610164	35	True				
ANR	610435	Statement	symbols	101:20:2279:2285	610164	36	True				
ANR	610436	Statement	","	101:27:2286:2286	610164	37	True				
ANR	610437	Statement	iter	101:29:2288:2291	610164	38	True				
ANR	610438	Statement	","	101:33:2292:2292	610164	39	True				
ANR	610439	Statement	sym	101:35:2294:2296	610164	40	True				
ANR	610440	Statement	)	101:38:2297:2297	610164	41	True				
ANR	610441	CompoundStatement		40:2:1045:1054	610164	42					
ANR	610442	IdentifierDeclStatement	char * lib ;	102:2:2303:2312	610164	0	True				
ANR	610443	IdentifierDecl	* lib		610164	0					
ANR	610444	IdentifierDeclType	char *		610164	0					
ANR	610445	Identifier	lib		610164	1					
ANR	610446	IfStatement	if ( ! cantbe . rust )		610164	1					
ANR	610447	Condition	! cantbe . rust	103:6:2320:2331	610164	0	True				
ANR	610448	UnaryOperationExpression	! cantbe . rust		610164	0					
ANR	610449	UnaryOperator	!		610164	0					
ANR	610450	MemberAccess	cantbe . rust		610164	1					
ANR	610451	Identifier	cantbe		610164	0					
ANR	610452	Identifier	rust		610164	1					
ANR	610453	CompoundStatement		41:20:1076:1076	610164	1					
ANR	610454	IfStatement	if ( check_rust ( sym ) )		610164	0					
ANR	610455	Condition	check_rust ( sym )	104:7:2343:2358	610164	0	True				
ANR	610456	CallExpression	check_rust ( sym )		610164	0					
ANR	610457	Callee	check_rust		610164	0					
ANR	610458	Identifier	check_rust		610164	0					
ANR	610459	ArgumentList	sym		610164	1					
ANR	610460	Argument	sym		610164	0					
ANR	610461	Identifier	sym		610164	0					
ANR	610462	CompoundStatement		42:25:1103:1103	610164	1					
ANR	610463	ExpressionStatement	"info -> lang = ""rust"""	105:4:2367:2386	610164	0	True				
ANR	610464	AssignmentExpression	"info -> lang = ""rust"""		610164	0		=			
ANR	610465	PtrMemberAccess	info -> lang		610164	0					
ANR	610466	Identifier	info		610164	0					
ANR	610467	Identifier	lang		610164	1					
ANR	610468	PrimaryExpression	"""rust"""		610164	1					
ANR	610469	ReturnStatement	return R_BIN_NM_RUST ;	106:4:2392:2412	610164	1	True				
ANR	610470	Identifier	R_BIN_NM_RUST		610164	0					
ANR	610471	IfStatement	if ( ! cantbe . swift )		610164	2					
ANR	610472	Condition	! cantbe . swift	109:6:2429:2441	610164	0	True				
ANR	610473	UnaryOperationExpression	! cantbe . swift		610164	0					
ANR	610474	UnaryOperator	!		610164	0					
ANR	610475	MemberAccess	cantbe . swift		610164	1					
ANR	610476	Identifier	cantbe		610164	0					
ANR	610477	Identifier	swift		610164	1					
ANR	610478	CompoundStatement		48:3:1191:1212	610164	1					
ANR	610479	IdentifierDeclStatement	bool hasswift = false ;	110:3:2449:2470	610164	0	True				
ANR	610480	IdentifierDecl	hasswift = false		610164	0					
ANR	610481	IdentifierDeclType	bool		610164	0					
ANR	610482	Identifier	hasswift		610164	1					
ANR	610483	AssignmentExpression	hasswift = false		610164	2		=			
ANR	610484	Identifier	false		610164	0					
ANR	610485	Identifier	false		610164	1					
ANR	610486	IfStatement	if ( ! swiftIsChecked )		610164	1					
ANR	610487	Condition	! swiftIsChecked	111:7:2479:2493	610164	0	True				
ANR	610488	UnaryOperationExpression	! swiftIsChecked		610164	0					
ANR	610489	UnaryOperator	!		610164	0					
ANR	610490	Identifier	swiftIsChecked		610164	1					
ANR	610491	CompoundStatement		49:24:1238:1238	610164	1					
ANR	610492	Statement	r_list_foreach	112:4:2502:2515	610164	0	True				
ANR	610493	Statement	(	112:19:2517:2517	610164	1	True				
ANR	610494	Statement	o	112:20:2518:2518	610164	2	True				
ANR	610495	Statement	->	112:21:2519:2520	610164	3	True				
ANR	610496	Statement	libs	112:23:2521:2524	610164	4	True				
ANR	610497	Statement	","	112:27:2525:2525	610164	5	True				
ANR	610498	Statement	iter2	112:29:2527:2531	610164	6	True				
ANR	610499	Statement	","	112:34:2532:2532	610164	7	True				
ANR	610500	Statement	lib	112:36:2534:2536	610164	8	True				
ANR	610501	Statement	)	112:39:2537:2537	610164	9	True				
ANR	610502	CompoundStatement		50:41:1281:1281	610164	10					
ANR	610503	IfStatement	"if ( strstr ( lib , ""swift"" ) )"		610164	0					
ANR	610504	Condition	"strstr ( lib , ""swift"" )"	113:9:2550:2570	610164	0	True				
ANR	610505	CallExpression	"strstr ( lib , ""swift"" )"		610164	0					
ANR	610506	Callee	strstr		610164	0					
ANR	610507	Identifier	strstr		610164	0					
ANR	610508	ArgumentList	lib		610164	1					
ANR	610509	Argument	lib		610164	0					
ANR	610510	Identifier	lib		610164	0					
ANR	610511	Argument	"""swift"""		610164	1					
ANR	610512	PrimaryExpression	"""swift"""		610164	0					
ANR	610513	CompoundStatement		51:32:1315:1315	610164	1					
ANR	610514	ExpressionStatement	hasswift = true	114:6:2581:2596	610164	0	True				
ANR	610515	AssignmentExpression	hasswift = true		610164	0		=			
ANR	610516	Identifier	hasswift		610164	0					
ANR	610517	Identifier	true		610164	1					
ANR	610518	BreakStatement	break ;	115:6:2604:2609	610164	1	True				
ANR	610519	ExpressionStatement	swiftIsChecked = true	118:4:2628:2649	610164	11	True				
ANR	610520	AssignmentExpression	swiftIsChecked = true		610164	0		=			
ANR	610521	Identifier	swiftIsChecked		610164	0					
ANR	610522	Identifier	true		610164	1					
ANR	610523	IfStatement	if ( hasswift || check_swift ( sym ) )		610164	2					
ANR	610524	Condition	hasswift || check_swift ( sym )	120:7:2663:2691	610164	0	True				
ANR	610525	OrExpression	hasswift || check_swift ( sym )		610164	0		||			
ANR	610526	Identifier	hasswift		610164	0					
ANR	610527	CallExpression	check_swift ( sym )		610164	1					
ANR	610528	Callee	check_swift		610164	0					
ANR	610529	Identifier	check_swift		610164	0					
ANR	610530	ArgumentList	sym		610164	1					
ANR	610531	Argument	sym		610164	0					
ANR	610532	Identifier	sym		610164	0					
ANR	610533	CompoundStatement		58:38:1436:1436	610164	1					
ANR	610534	ExpressionStatement	"info -> lang = ""swift"""	121:4:2700:2720	610164	0	True				
ANR	610535	AssignmentExpression	"info -> lang = ""swift"""		610164	0		=			
ANR	610536	PtrMemberAccess	info -> lang		610164	0					
ANR	610537	Identifier	info		610164	0					
ANR	610538	Identifier	lang		610164	1					
ANR	610539	PrimaryExpression	"""swift"""		610164	1					
ANR	610540	ReturnStatement	return R_BIN_NM_SWIFT ;	122:4:2726:2747	610164	1	True				
ANR	610541	Identifier	R_BIN_NM_SWIFT		610164	0					
ANR	610542	IfStatement	if ( ! cantbe . cxx )		610164	3					
ANR	610543	Condition	! cantbe . cxx	125:6:2764:2774	610164	0	True				
ANR	610544	UnaryOperationExpression	! cantbe . cxx		610164	0					
ANR	610545	UnaryOperator	!		610164	0					
ANR	610546	MemberAccess	cantbe . cxx		610164	1					
ANR	610547	Identifier	cantbe		610164	0					
ANR	610548	Identifier	cxx		610164	1					
ANR	610549	CompoundStatement		64:3:1524:1543	610164	1					
ANR	610550	IdentifierDeclStatement	bool hascxx = false ;	126:3:2782:2801	610164	0	True				
ANR	610551	IdentifierDecl	hascxx = false		610164	0					
ANR	610552	IdentifierDeclType	bool		610164	0					
ANR	610553	Identifier	hascxx		610164	1					
ANR	610554	AssignmentExpression	hascxx = false		610164	2		=			
ANR	610555	Identifier	false		610164	0					
ANR	610556	Identifier	false		610164	1					
ANR	610557	IfStatement	if ( ! cxxIsChecked )		610164	1					
ANR	610558	Condition	! cxxIsChecked	127:7:2810:2822	610164	0	True				
ANR	610559	UnaryOperationExpression	! cxxIsChecked		610164	0					
ANR	610560	UnaryOperator	!		610164	0					
ANR	610561	Identifier	cxxIsChecked		610164	1					
ANR	610562	CompoundStatement		65:22:1567:1567	610164	1					
ANR	610563	Statement	r_list_foreach	128:4:2831:2844	610164	0	True				
ANR	610564	Statement	(	128:19:2846:2846	610164	1	True				
ANR	610565	Statement	o	128:20:2847:2847	610164	2	True				
ANR	610566	Statement	->	128:21:2848:2849	610164	3	True				
ANR	610567	Statement	libs	128:23:2850:2853	610164	4	True				
ANR	610568	Statement	","	128:27:2854:2854	610164	5	True				
ANR	610569	Statement	iter2	128:29:2856:2860	610164	6	True				
ANR	610570	Statement	","	128:34:2861:2861	610164	7	True				
ANR	610571	Statement	lib	128:36:2863:2865	610164	8	True				
ANR	610572	Statement	)	128:39:2866:2866	610164	9	True				
ANR	610573	CompoundStatement		66:41:1610:1610	610164	10					
ANR	610574	IfStatement	"if ( strstr ( lib , ""stdc++"" ) || strstr ( lib , ""c++"" ) )"		610164	0					
ANR	610575	Condition	"strstr ( lib , ""stdc++"" ) || strstr ( lib , ""c++"" )"	129:9:2879:2932	610164	0	True				
ANR	610576	OrExpression	"strstr ( lib , ""stdc++"" ) || strstr ( lib , ""c++"" )"		610164	0		||			
ANR	610577	CallExpression	"strstr ( lib , ""stdc++"" )"		610164	0					
ANR	610578	Callee	strstr		610164	0					
ANR	610579	Identifier	strstr		610164	0					
ANR	610580	ArgumentList	lib		610164	1					
ANR	610581	Argument	lib		610164	0					
ANR	610582	Identifier	lib		610164	0					
ANR	610583	Argument	"""stdc++"""		610164	1					
ANR	610584	PrimaryExpression	"""stdc++"""		610164	0					
ANR	610585	CallExpression	"strstr ( lib , ""c++"" )"		610164	1					
ANR	610586	Callee	strstr		610164	0					
ANR	610587	Identifier	strstr		610164	0					
ANR	610588	ArgumentList	lib		610164	1					
ANR	610589	Argument	lib		610164	0					
ANR	610590	Identifier	lib		610164	0					
ANR	610591	Argument	"""c++"""		610164	1					
ANR	610592	PrimaryExpression	"""c++"""		610164	0					
ANR	610593	CompoundStatement		68:30:1677:1677	610164	1					
ANR	610594	ExpressionStatement	hascxx = true	131:6:2943:2956	610164	0	True				
ANR	610595	AssignmentExpression	hascxx = true		610164	0		=			
ANR	610596	Identifier	hascxx		610164	0					
ANR	610597	Identifier	true		610164	1					
ANR	610598	BreakStatement	break ;	132:6:2964:2969	610164	1	True				
ANR	610599	IfStatement	"if ( strstr ( lib , ""msvcp"" ) )"		610164	1					
ANR	610600	Condition	"strstr ( lib , ""msvcp"" )"	134:9:2987:3007	610164	0	True				
ANR	610601	CallExpression	"strstr ( lib , ""msvcp"" )"		610164	0					
ANR	610602	Callee	strstr		610164	0					
ANR	610603	Identifier	strstr		610164	0					
ANR	610604	ArgumentList	lib		610164	1					
ANR	610605	Argument	lib		610164	0					
ANR	610606	Identifier	lib		610164	0					
ANR	610607	Argument	"""msvcp"""		610164	1					
ANR	610608	PrimaryExpression	"""msvcp"""		610164	0					
ANR	610609	CompoundStatement		72:32:1752:1752	610164	1					
ANR	610610	ExpressionStatement	"info -> lang = ""msvc"""	135:6:3018:3037	610164	0	True				
ANR	610611	AssignmentExpression	"info -> lang = ""msvc"""		610164	0		=			
ANR	610612	PtrMemberAccess	info -> lang		610164	0					
ANR	610613	Identifier	info		610164	0					
ANR	610614	Identifier	lang		610164	1					
ANR	610615	PrimaryExpression	"""msvc"""		610164	1					
ANR	610616	ReturnStatement	return R_BIN_NM_MSVC ;	136:6:3045:3065	610164	1	True				
ANR	610617	Identifier	R_BIN_NM_MSVC		610164	0					
ANR	610618	ExpressionStatement	cxxIsChecked = true	139:4:3084:3103	610164	11	True				
ANR	610619	AssignmentExpression	cxxIsChecked = true		610164	0		=			
ANR	610620	Identifier	cxxIsChecked		610164	0					
ANR	610621	Identifier	true		610164	1					
ANR	610622	IfStatement	if ( hascxx || check_cxx ( sym ) )		610164	2					
ANR	610623	Condition	hascxx || check_cxx ( sym )	141:7:3117:3141	610164	0	True				
ANR	610624	OrExpression	hascxx || check_cxx ( sym )		610164	0		||			
ANR	610625	Identifier	hascxx		610164	0					
ANR	610626	CallExpression	check_cxx ( sym )		610164	1					
ANR	610627	Callee	check_cxx		610164	0					
ANR	610628	Identifier	check_cxx		610164	0					
ANR	610629	ArgumentList	sym		610164	1					
ANR	610630	Argument	sym		610164	0					
ANR	610631	Identifier	sym		610164	0					
ANR	610632	CompoundStatement		79:34:1886:1886	610164	1					
ANR	610633	ExpressionStatement	canBeCxx = true	142:4:3150:3165	610164	0	True				
ANR	610634	AssignmentExpression	canBeCxx = true		610164	0		=			
ANR	610635	Identifier	canBeCxx		610164	0					
ANR	610636	Identifier	true		610164	1					
ANR	610637	ExpressionStatement	cantbe . cxx = true	143:4:3171:3188	610164	1	True				
ANR	610638	AssignmentExpression	cantbe . cxx = true		610164	0		=			
ANR	610639	MemberAccess	cantbe . cxx		610164	0					
ANR	610640	Identifier	cantbe		610164	0					
ANR	610641	Identifier	cxx		610164	1					
ANR	610642	Identifier	true		610164	1					
ANR	610643	IfStatement	if ( ! cantbe . objc )		610164	4					
ANR	610644	Condition	! cantbe . objc	146:6:3205:3216	610164	0	True				
ANR	610645	UnaryOperationExpression	! cantbe . objc		610164	0					
ANR	610646	UnaryOperator	!		610164	0					
ANR	610647	MemberAccess	cantbe . objc		610164	1					
ANR	610648	Identifier	cantbe		610164	0					
ANR	610649	Identifier	objc		610164	1					
ANR	610650	CompoundStatement		84:20:1961:1961	610164	1					
ANR	610651	IfStatement	if ( check_objc ( sym ) )		610164	0					
ANR	610652	Condition	check_objc ( sym )	147:7:3228:3243	610164	0	True				
ANR	610653	CallExpression	check_objc ( sym )		610164	0					
ANR	610654	Callee	check_objc		610164	0					
ANR	610655	Identifier	check_objc		610164	0					
ANR	610656	ArgumentList	sym		610164	1					
ANR	610657	Argument	sym		610164	0					
ANR	610658	Identifier	sym		610164	0					
ANR	610659	CompoundStatement		85:25:1988:1988	610164	1					
ANR	610660	ExpressionStatement	"info -> lang = ""objc"""	148:4:3252:3271	610164	0	True				
ANR	610661	AssignmentExpression	"info -> lang = ""objc"""		610164	0		=			
ANR	610662	PtrMemberAccess	info -> lang		610164	0					
ANR	610663	Identifier	info		610164	0					
ANR	610664	Identifier	lang		610164	1					
ANR	610665	PrimaryExpression	"""objc"""		610164	1					
ANR	610666	ReturnStatement	return R_BIN_NM_OBJC ;	149:4:3277:3297	610164	1	True				
ANR	610667	Identifier	R_BIN_NM_OBJC		610164	0					
ANR	610668	IfStatement	if ( ! cantbe . dlang )		610164	5					
ANR	610669	Condition	! cantbe . dlang	152:6:3314:3326	610164	0	True				
ANR	610670	UnaryOperationExpression	! cantbe . dlang		610164	0					
ANR	610671	UnaryOperator	!		610164	0					
ANR	610672	MemberAccess	cantbe . dlang		610164	1					
ANR	610673	Identifier	cantbe		610164	0					
ANR	610674	Identifier	dlang		610164	1					
ANR	610675	CompoundStatement		91:3:2076:2097	610164	1					
ANR	610676	IdentifierDeclStatement	bool hasdlang = false ;	153:3:3334:3355	610164	0	True				
ANR	610677	IdentifierDecl	hasdlang = false		610164	0					
ANR	610678	IdentifierDeclType	bool		610164	0					
ANR	610679	Identifier	hasdlang		610164	1					
ANR	610680	AssignmentExpression	hasdlang = false		610164	2		=			
ANR	610681	Identifier	false		610164	0					
ANR	610682	Identifier	false		610164	1					
ANR	610683	IfStatement	if ( ! phobosIsChecked )		610164	1					
ANR	610684	Condition	! phobosIsChecked	154:7:3364:3379	610164	0	True				
ANR	610685	UnaryOperationExpression	! phobosIsChecked		610164	0					
ANR	610686	UnaryOperator	!		610164	0					
ANR	610687	Identifier	phobosIsChecked		610164	1					
ANR	610688	CompoundStatement		92:25:2124:2124	610164	1					
ANR	610689	Statement	r_list_foreach	155:4:3388:3401	610164	0	True				
ANR	610690	Statement	(	155:19:3403:3403	610164	1	True				
ANR	610691	Statement	o	155:20:3404:3404	610164	2	True				
ANR	610692	Statement	->	155:21:3405:3406	610164	3	True				
ANR	610693	Statement	libs	155:23:3407:3410	610164	4	True				
ANR	610694	Statement	","	155:27:3411:3411	610164	5	True				
ANR	610695	Statement	iter2	155:29:3413:3417	610164	6	True				
ANR	610696	Statement	","	155:34:3418:3418	610164	7	True				
ANR	610697	Statement	lib	155:36:3420:3422	610164	8	True				
ANR	610698	Statement	)	155:39:3423:3423	610164	9	True				
ANR	610699	CompoundStatement		93:41:2167:2167	610164	10					
ANR	610700	IfStatement	"if ( strstr ( lib , ""phobos"" ) )"		610164	0					
ANR	610701	Condition	"strstr ( lib , ""phobos"" )"	156:9:3436:3457	610164	0	True				
ANR	610702	CallExpression	"strstr ( lib , ""phobos"" )"		610164	0					
ANR	610703	Callee	strstr		610164	0					
ANR	610704	Identifier	strstr		610164	0					
ANR	610705	ArgumentList	lib		610164	1					
ANR	610706	Argument	lib		610164	0					
ANR	610707	Identifier	lib		610164	0					
ANR	610708	Argument	"""phobos"""		610164	1					
ANR	610709	PrimaryExpression	"""phobos"""		610164	0					
ANR	610710	CompoundStatement		94:33:2202:2202	610164	1					
ANR	610711	ExpressionStatement	hasdlang = true	157:6:3468:3483	610164	0	True				
ANR	610712	AssignmentExpression	hasdlang = true		610164	0		=			
ANR	610713	Identifier	hasdlang		610164	0					
ANR	610714	Identifier	true		610164	1					
ANR	610715	BreakStatement	break ;	158:6:3491:3496	610164	1	True				
ANR	610716	ExpressionStatement	phobosIsChecked = true	161:4:3515:3537	610164	11	True				
ANR	610717	AssignmentExpression	phobosIsChecked = true		610164	0		=			
ANR	610718	Identifier	phobosIsChecked		610164	0					
ANR	610719	Identifier	true		610164	1					
ANR	610720	IfStatement	if ( hasdlang || check_dlang ( sym ) )		610164	2					
ANR	610721	Condition	hasdlang || check_dlang ( sym )	163:7:3551:3579	610164	0	True				
ANR	610722	OrExpression	hasdlang || check_dlang ( sym )		610164	0		||			
ANR	610723	Identifier	hasdlang		610164	0					
ANR	610724	CallExpression	check_dlang ( sym )		610164	1					
ANR	610725	Callee	check_dlang		610164	0					
ANR	610726	Identifier	check_dlang		610164	0					
ANR	610727	ArgumentList	sym		610164	1					
ANR	610728	Argument	sym		610164	0					
ANR	610729	Identifier	sym		610164	0					
ANR	610730	CompoundStatement		101:38:2324:2324	610164	1					
ANR	610731	ExpressionStatement	"info -> lang = ""dlang"""	164:4:3588:3608	610164	0	True				
ANR	610732	AssignmentExpression	"info -> lang = ""dlang"""		610164	0		=			
ANR	610733	PtrMemberAccess	info -> lang		610164	0					
ANR	610734	Identifier	info		610164	0					
ANR	610735	Identifier	lang		610164	1					
ANR	610736	PrimaryExpression	"""dlang"""		610164	1					
ANR	610737	ReturnStatement	return R_BIN_NM_DLANG ;	165:4:3614:3635	610164	1	True				
ANR	610738	Identifier	R_BIN_NM_DLANG		610164	0					
ANR	610739	IfStatement	if ( ! cantbe . msvc )		610164	6					
ANR	610740	Condition	! cantbe . msvc	168:6:3652:3663	610164	0	True				
ANR	610741	UnaryOperationExpression	! cantbe . msvc		610164	0					
ANR	610742	UnaryOperator	!		610164	0					
ANR	610743	MemberAccess	cantbe . msvc		610164	1					
ANR	610744	Identifier	cantbe		610164	0					
ANR	610745	Identifier	msvc		610164	1					
ANR	610746	CompoundStatement		106:20:2408:2408	610164	1					
ANR	610747	IfStatement	if ( ! isMsvc && check_msvc ( sym ) )		610164	0					
ANR	610748	Condition	! isMsvc && check_msvc ( sym )	169:7:3675:3701	610164	0	True				
ANR	610749	AndExpression	! isMsvc && check_msvc ( sym )		610164	0		&&			
ANR	610750	UnaryOperationExpression	! isMsvc		610164	0					
ANR	610751	UnaryOperator	!		610164	0					
ANR	610752	Identifier	isMsvc		610164	1					
ANR	610753	CallExpression	check_msvc ( sym )		610164	1					
ANR	610754	Callee	check_msvc		610164	0					
ANR	610755	Identifier	check_msvc		610164	0					
ANR	610756	ArgumentList	sym		610164	1					
ANR	610757	Argument	sym		610164	0					
ANR	610758	Identifier	sym		610164	0					
ANR	610759	CompoundStatement		107:36:2446:2446	610164	1					
ANR	610760	ExpressionStatement	isMsvc = true	170:4:3710:3723	610164	0	True				
ANR	610761	AssignmentExpression	isMsvc = true		610164	0		=			
ANR	610762	Identifier	isMsvc		610164	0					
ANR	610763	Identifier	true		610164	1					
ANR	610764	IfStatement	if ( isObjC )		610164	43					
ANR	610765	Condition	isObjC	174:5:3742:3747	610164	0	True				
ANR	610766	Identifier	isObjC		610164	0					
ANR	610767	CompoundStatement		112:13:2492:2492	610164	1					
ANR	610768	ReturnStatement	return R_BIN_NM_OBJC | ( isBlocks ? R_BIN_NM_BLOCKS : 0 ) ;	175:2:3754:3805	610164	0	True				
ANR	610769	InclusiveOrExpression	R_BIN_NM_OBJC | ( isBlocks ? R_BIN_NM_BLOCKS : 0 )		610164	0		|			
ANR	610770	Identifier	R_BIN_NM_OBJC		610164	0					
ANR	610771	ConditionalExpression	isBlocks ? R_BIN_NM_BLOCKS : 0		610164	1					
ANR	610772	Condition	isBlocks		610164	0					
ANR	610773	Identifier	isBlocks		610164	0					
ANR	610774	Identifier	R_BIN_NM_BLOCKS		610164	1					
ANR	610775	PrimaryExpression	0		610164	2					
ANR	610776	IfStatement	if ( canBeCxx )		610164	44					
ANR	610777	Condition	canBeCxx	177:5:3815:3822	610164	0	True				
ANR	610778	Identifier	canBeCxx		610164	0					
ANR	610779	CompoundStatement		115:15:2567:2567	610164	1					
ANR	610780	ReturnStatement	return R_BIN_NM_CXX | ( isBlocks ? R_BIN_NM_BLOCKS : 0 ) ;	178:2:3829:3879	610164	0	True				
ANR	610781	InclusiveOrExpression	R_BIN_NM_CXX | ( isBlocks ? R_BIN_NM_BLOCKS : 0 )		610164	0		|			
ANR	610782	Identifier	R_BIN_NM_CXX		610164	0					
ANR	610783	ConditionalExpression	isBlocks ? R_BIN_NM_BLOCKS : 0		610164	1					
ANR	610784	Condition	isBlocks		610164	0					
ANR	610785	Identifier	isBlocks		610164	0					
ANR	610786	Identifier	R_BIN_NM_BLOCKS		610164	1					
ANR	610787	PrimaryExpression	0		610164	2					
ANR	610788	IfStatement	if ( isMsvc )		610164	45					
ANR	610789	Condition	isMsvc	180:5:3889:3894	610164	0	True				
ANR	610790	Identifier	isMsvc		610164	0					
ANR	610791	CompoundStatement		118:13:2639:2639	610164	1					
ANR	610792	ReturnStatement	return R_BIN_NM_MSVC ;	181:2:3901:3921	610164	0	True				
ANR	610793	Identifier	R_BIN_NM_MSVC		610164	0					
ANR	610794	ReturnStatement	return R_BIN_NM_C | ( isBlocks ? R_BIN_NM_BLOCKS : 0 ) ;	183:1:3927:3975	610164	46	True				
ANR	610795	InclusiveOrExpression	R_BIN_NM_C | ( isBlocks ? R_BIN_NM_BLOCKS : 0 )		610164	0		|			
ANR	610796	Identifier	R_BIN_NM_C		610164	0					
ANR	610797	ConditionalExpression	isBlocks ? R_BIN_NM_BLOCKS : 0		610164	1					
ANR	610798	Condition	isBlocks		610164	0					
ANR	610799	Identifier	isBlocks		610164	0					
ANR	610800	Identifier	R_BIN_NM_BLOCKS		610164	1					
ANR	610801	PrimaryExpression	0		610164	2					
ANR	610802	ReturnType	R_API int		610164	1					
ANR	610803	Identifier	r_bin_load_languages		610164	2					
ANR	610804	ParameterList	RBinFile * binfile		610164	3					
ANR	610805	Parameter	RBinFile * binfile	63:31:1238:1254	610164	0	True				
ANR	610806	ParameterType	RBinFile *		610164	0					
ANR	610807	Identifier	binfile		610164	1					
ANR	610808	CFGEntryNode	ENTRY		610164		True				
ANR	610809	CFGExitNode	EXIT		610164		True				
ANR	610810	CFGErrorNode	ERROR		610164		True				
ANR	610811	Symbol	lib		610164						
ANR	610812	Symbol	o -> info		610164						
ANR	610813	Symbol	binfile -> o -> info		610164						
ANR	610814	Symbol	binfile		610164						
ANR	610815	Symbol	isPe		610164						
ANR	610816	Symbol	strncmp		610164						
ANR	610817	Symbol	R_BIN_NM_MSVC		610164						
ANR	610818	Symbol	cantbe . msvc		610164						
ANR	610819	Symbol	isMacho		610164						
ANR	610820	Symbol	cantbe . objc		610164						
ANR	610821	Symbol	R_BIN_NM_DLANG		610164						
ANR	610822	Symbol	cantbe		610164						
ANR	610823	Symbol	info		610164						
ANR	610824	Symbol	cantbe . cxx		610164						
ANR	610825	Symbol	strcmp		610164						
ANR	610826	Symbol	cantbe . rust		610164						
ANR	610827	Symbol	check_rust		610164						
ANR	610828	Symbol	check_swift		610164						
ANR	610829	Symbol	NULL		610164						
ANR	610830	Symbol	swiftIsChecked		610164						
ANR	610831	Symbol	canBeCxx		610164						
ANR	610832	Symbol	R_BIN_NM_OBJC		610164						
ANR	610833	Symbol	iter		610164						
ANR	610834	Symbol	check_cxx		610164						
ANR	610835	Symbol	unknownType		610164						
ANR	610836	Symbol	R_BIN_NM_CXX		610164						
ANR	610837	Symbol	* sym		610164						
ANR	610838	Symbol	check_msvc		610164						
ANR	610839	Symbol	strstr		610164						
ANR	610840	Symbol	* * binfile		610164						
ANR	610841	Symbol	sym -> name		610164						
ANR	610842	Symbol	name		610164						
ANR	610843	Symbol	true		610164						
ANR	610844	Symbol	hasswift		610164						
ANR	610845	Symbol	isMsvc		610164						
ANR	610846	Symbol	check_objc		610164						
ANR	610847	Symbol	R_BIN_NM_SWIFT		610164						
ANR	610848	Symbol	check_dlang		610164						
ANR	610849	Symbol	R_BIN_NM_RUST		610164						
ANR	610850	Symbol	cantbe . swift		610164						
ANR	610851	Symbol	sym		610164						
ANR	610852	Symbol	info -> rclass		610164						
ANR	610853	Symbol	hascxx		610164						
ANR	610854	Symbol	ft		610164						
ANR	610855	Symbol	cxxIsChecked		610164						
ANR	610856	Symbol	isObjC		610164						
ANR	610857	Symbol	phobosIsChecked		610164						
ANR	610858	Symbol	isBlocks		610164						
ANR	610859	Symbol	hasdlang		610164						
ANR	610860	Symbol	* binfile		610164						
ANR	610861	Symbol	* binfile -> o		610164						
ANR	610862	Symbol	iter2		610164						
ANR	610863	Symbol	false		610164						
ANR	610864	Symbol	isElf		610164						
ANR	610865	Symbol	R_BIN_NM_NONE		610164						
ANR	610866	Symbol	R_BIN_NM_BLOCKS		610164						
ANR	610867	Symbol	o		610164						
ANR	610868	Symbol	R_BIN_NM_C		610164						
ANR	610869	Symbol	binfile -> o		610164						
ANR	610870	Symbol	cantbe . dlang		610164						
ANR	610871	Symbol	* o		610164						
ANR	610872	Symbol	* info		610164						
ANR	610873	Symbol	info -> lang		610164						
ANR	610874	Function	r_bin_lang_type	186:0:3980:4610							
ANR	610875	FunctionDef	"r_bin_lang_type (RBinFile * binfile , const char * def , const char * sym)"		610874	0					
ANR	610876	CompoundStatement		186:79:4059:4610	610874	0					
ANR	610877	IdentifierDeclStatement	int type = 0 ;	187:1:4062:4074	610874	0	True				
ANR	610878	IdentifierDecl	type = 0		610874	0					
ANR	610879	IdentifierDeclType	int		610874	0					
ANR	610880	Identifier	type		610874	1					
ANR	610881	AssignmentExpression	type = 0		610874	2		=			
ANR	610882	Identifier	type		610874	0					
ANR	610883	PrimaryExpression	0		610874	1					
ANR	610884	IdentifierDeclStatement	RBinPlugin * plugin ;	188:1:4077:4095	610874	1	True				
ANR	610885	IdentifierDecl	* plugin		610874	0					
ANR	610886	IdentifierDeclType	RBinPlugin *		610874	0					
ANR	610887	Identifier	plugin		610874	1					
ANR	610888	IfStatement	if ( sym && sym [ 0 ] == sym [ 1 ] && sym [ 0 ] == '_' )		610874	2					
ANR	610889	Condition	sym && sym [ 0 ] == sym [ 1 ] && sym [ 0 ] == '_'	189:5:4102:4141	610874	0	True				
ANR	610890	AndExpression	sym && sym [ 0 ] == sym [ 1 ] && sym [ 0 ] == '_'		610874	0		&&			
ANR	610891	Identifier	sym		610874	0					
ANR	610892	AndExpression	sym [ 0 ] == sym [ 1 ] && sym [ 0 ] == '_'		610874	1		&&			
ANR	610893	EqualityExpression	sym [ 0 ] == sym [ 1 ]		610874	0		==			
ANR	610894	ArrayIndexing	sym [ 0 ]		610874	0					
ANR	610895	Identifier	sym		610874	0					
ANR	610896	PrimaryExpression	0		610874	1					
ANR	610897	ArrayIndexing	sym [ 1 ]		610874	1					
ANR	610898	Identifier	sym		610874	0					
ANR	610899	PrimaryExpression	1		610874	1					
ANR	610900	EqualityExpression	sym [ 0 ] == '_'		610874	1		==			
ANR	610901	ArrayIndexing	sym [ 0 ]		610874	0					
ANR	610902	Identifier	sym		610874	0					
ANR	610903	PrimaryExpression	0		610874	1					
ANR	610904	PrimaryExpression	'_'		610874	1					
ANR	610905	CompoundStatement		4:47:84:84	610874	1					
ANR	610906	ExpressionStatement	type = R_BIN_NM_CXX	190:2:4148:4167	610874	0	True				
ANR	610907	AssignmentExpression	type = R_BIN_NM_CXX		610874	0		=			
ANR	610908	Identifier	type		610874	0					
ANR	610909	Identifier	R_BIN_NM_CXX		610874	1					
ANR	610910	IfStatement	if ( def && * def )		610874	3					
ANR	610911	Condition	def && * def	192:5:4177:4187	610874	0	True				
ANR	610912	AndExpression	def && * def		610874	0		&&			
ANR	610913	Identifier	def		610874	0					
ANR	610914	UnaryOperationExpression	* def		610874	1					
ANR	610915	UnaryOperator	*		610874	0					
ANR	610916	Identifier	def		610874	1					
ANR	610917	CompoundStatement		7:18:130:130	610874	1					
ANR	610918	ExpressionStatement	type = r_bin_demangle_type ( def )	193:2:4194:4226	610874	0	True				
ANR	610919	AssignmentExpression	type = r_bin_demangle_type ( def )		610874	0		=			
ANR	610920	Identifier	type		610874	0					
ANR	610921	CallExpression	r_bin_demangle_type ( def )		610874	1					
ANR	610922	Callee	r_bin_demangle_type		610874	0					
ANR	610923	Identifier	r_bin_demangle_type		610874	0					
ANR	610924	ArgumentList	def		610874	1					
ANR	610925	Argument	def		610874	0					
ANR	610926	Identifier	def		610874	0					
ANR	610927	IfStatement	if ( type != R_BIN_NM_NONE )		610874	1					
ANR	610928	Condition	type != R_BIN_NM_NONE	194:6:4234:4254	610874	0	True				
ANR	610929	EqualityExpression	type != R_BIN_NM_NONE		610874	0		!=			
ANR	610930	Identifier	type		610874	0					
ANR	610931	Identifier	R_BIN_NM_NONE		610874	1					
ANR	610932	CompoundStatement		9:29:197:197	610874	1					
ANR	610933	ReturnStatement	return type ;	195:3:4262:4273	610874	0	True				
ANR	610934	Identifier	type		610874	0					
ANR	610935	ExpressionStatement	plugin = r_bin_file_cur_plugin ( binfile )	198:1:4283:4323	610874	4	True				
ANR	610936	AssignmentExpression	plugin = r_bin_file_cur_plugin ( binfile )		610874	0		=			
ANR	610937	Identifier	plugin		610874	0					
ANR	610938	CallExpression	r_bin_file_cur_plugin ( binfile )		610874	1					
ANR	610939	Callee	r_bin_file_cur_plugin		610874	0					
ANR	610940	Identifier	r_bin_file_cur_plugin		610874	0					
ANR	610941	ArgumentList	binfile		610874	1					
ANR	610942	Argument	binfile		610874	0					
ANR	610943	Identifier	binfile		610874	0					
ANR	610944	IfStatement	if ( plugin && plugin -> demangle_type )		610874	5					
ANR	610945	Condition	plugin && plugin -> demangle_type	199:5:4330:4360	610874	0	True				
ANR	610946	AndExpression	plugin && plugin -> demangle_type		610874	0		&&			
ANR	610947	Identifier	plugin		610874	0					
ANR	610948	PtrMemberAccess	plugin -> demangle_type		610874	1					
ANR	610949	Identifier	plugin		610874	0					
ANR	610950	Identifier	demangle_type		610874	1					
ANR	610951	CompoundStatement		14:38:303:303	610874	1					
ANR	610952	ExpressionStatement	type = plugin -> demangle_type ( def )	200:2:4367:4401	610874	0	True				
ANR	610953	AssignmentExpression	type = plugin -> demangle_type ( def )		610874	0		=			
ANR	610954	Identifier	type		610874	0					
ANR	610955	CallExpression	plugin -> demangle_type ( def )		610874	1					
ANR	610956	Callee	plugin -> demangle_type		610874	0					
ANR	610957	PtrMemberAccess	plugin -> demangle_type		610874	0					
ANR	610958	Identifier	plugin		610874	0					
ANR	610959	Identifier	demangle_type		610874	1					
ANR	610960	ArgumentList	def		610874	1					
ANR	610961	Argument	def		610874	0					
ANR	610962	Identifier	def		610874	0					
ANR	610963	ElseStatement	else		610874	0					
ANR	610964	CompoundStatement		16:8:351:351	610874	0					
ANR	610965	IfStatement	if ( binfile && binfile -> o && binfile -> o -> info )		610874	0					
ANR	610966	Condition	binfile && binfile -> o && binfile -> o -> info	202:6:4419:4459	610874	0	True				
ANR	610967	AndExpression	binfile && binfile -> o && binfile -> o -> info		610874	0		&&			
ANR	610968	Identifier	binfile		610874	0					
ANR	610969	AndExpression	binfile -> o && binfile -> o -> info		610874	1		&&			
ANR	610970	PtrMemberAccess	binfile -> o		610874	0					
ANR	610971	Identifier	binfile		610874	0					
ANR	610972	Identifier	o		610874	1					
ANR	610973	PtrMemberAccess	binfile -> o -> info		610874	1					
ANR	610974	PtrMemberAccess	binfile -> o		610874	0					
ANR	610975	Identifier	binfile		610874	0					
ANR	610976	Identifier	o		610874	1					
ANR	610977	Identifier	info		610874	1					
ANR	610978	CompoundStatement		17:49:402:402	610874	1					
ANR	610979	ExpressionStatement	type = r_bin_demangle_type ( binfile -> o -> info -> lang )	203:3:4467:4518	610874	0	True				
ANR	610980	AssignmentExpression	type = r_bin_demangle_type ( binfile -> o -> info -> lang )		610874	0		=			
ANR	610981	Identifier	type		610874	0					
ANR	610982	CallExpression	r_bin_demangle_type ( binfile -> o -> info -> lang )		610874	1					
ANR	610983	Callee	r_bin_demangle_type		610874	0					
ANR	610984	Identifier	r_bin_demangle_type		610874	0					
ANR	610985	ArgumentList	binfile -> o -> info -> lang		610874	1					
ANR	610986	Argument	binfile -> o -> info -> lang		610874	0					
ANR	610987	PtrMemberAccess	binfile -> o -> info -> lang		610874	0					
ANR	610988	PtrMemberAccess	binfile -> o -> info		610874	0					
ANR	610989	PtrMemberAccess	binfile -> o		610874	0					
ANR	610990	Identifier	binfile		610874	0					
ANR	610991	Identifier	o		610874	1					
ANR	610992	Identifier	info		610874	1					
ANR	610993	Identifier	lang		610874	1					
ANR	610994	IfStatement	if ( type == R_BIN_NM_NONE )		610874	6					
ANR	610995	Condition	type == R_BIN_NM_NONE	206:5:4532:4552	610874	0	True				
ANR	610996	EqualityExpression	type == R_BIN_NM_NONE		610874	0		==			
ANR	610997	Identifier	type		610874	0					
ANR	610998	Identifier	R_BIN_NM_NONE		610874	1					
ANR	610999	CompoundStatement		21:28:495:495	610874	1					
ANR	611000	ExpressionStatement	type = r_bin_demangle_type ( def )	207:2:4559:4591	610874	0	True				
ANR	611001	AssignmentExpression	type = r_bin_demangle_type ( def )		610874	0		=			
ANR	611002	Identifier	type		610874	0					
ANR	611003	CallExpression	r_bin_demangle_type ( def )		610874	1					
ANR	611004	Callee	r_bin_demangle_type		610874	0					
ANR	611005	Identifier	r_bin_demangle_type		610874	0					
ANR	611006	ArgumentList	def		610874	1					
ANR	611007	Argument	def		610874	0					
ANR	611008	Identifier	def		610874	0					
ANR	611009	ReturnStatement	return type ;	209:1:4597:4608	610874	7	True				
ANR	611010	Identifier	type		610874	0					
ANR	611011	ReturnType	R_IPI int		610874	1					
ANR	611012	Identifier	r_bin_lang_type		610874	2					
ANR	611013	ParameterList	"RBinFile * binfile , const char * def , const char * sym"		610874	3					
ANR	611014	Parameter	RBinFile * binfile	186:26:4006:4022	610874	0	True				
ANR	611015	ParameterType	RBinFile *		610874	0					
ANR	611016	Identifier	binfile		610874	1					
ANR	611017	Parameter	const char * def	186:45:4025:4039	610874	1	True				
ANR	611018	ParameterType	const char *		610874	0					
ANR	611019	Identifier	def		610874	1					
ANR	611020	Parameter	const char * sym	186:62:4042:4056	610874	2	True				
ANR	611021	ParameterType	const char *		610874	0					
ANR	611022	Identifier	sym		610874	1					
ANR	611023	CFGEntryNode	ENTRY		610874		True				
ANR	611024	CFGExitNode	EXIT		610874		True				
ANR	611025	Symbol	* binfile -> o		610874						
ANR	611026	Symbol	* binfile		610874						
ANR	611027	Symbol	def		610874						
ANR	611028	Symbol	sym		610874						
ANR	611029	Symbol	plugin -> demangle_type		610874						
ANR	611030	Symbol	* * binfile -> o		610874						
ANR	611031	Symbol	* plugin		610874						
ANR	611032	Symbol	binfile -> o -> info		610874						
ANR	611033	Symbol	type		610874						
ANR	611034	Symbol	R_BIN_NM_NONE		610874						
ANR	611035	Symbol	binfile		610874						
ANR	611036	Symbol	R_BIN_NM_CXX		610874						
ANR	611037	Symbol	* binfile -> o -> info		610874						
ANR	611038	Symbol	* def		610874						
ANR	611039	Symbol	* sym		610874						
ANR	611040	Symbol	binfile -> o -> info -> lang		610874						
ANR	611041	Symbol	binfile -> o		610874						
ANR	611042	Symbol	plugin		610874						
ANR	611043	Symbol	r_bin_file_cur_plugin		610874						
ANR	611044	Symbol	r_bin_demangle_type		610874						
ANR	611045	Symbol	* * * binfile		610874						
ANR	611046	Symbol	* * binfile		610874						
ANR	611047	Function	r_bin_lang_tostring	212:6:4619:5178							
ANR	611048	FunctionDef	r_bin_lang_tostring (int lang)		611047	0					
ANR	611049	CompoundStatement		212:48:4661:5178	611047	0					
ANR	611050	SwitchStatement	switch ( lang & 0xffff )		611047	0					
ANR	611051	Condition	lang & 0xffff	213:9:4672:4684	611047	0	True				
ANR	611052	BitAndExpression	lang & 0xffff		611047	0		&			
ANR	611053	Identifier	lang		611047	0					
ANR	611054	PrimaryExpression	0xffff		611047	1					
ANR	611055	CompoundStatement		2:24:25:25	611047	1					
ANR	611056	Label	case R_BIN_NM_SWIFT :	214:1:4690:4709	611047	0	True				
ANR	611057	Identifier	R_BIN_NM_SWIFT		611047	0					
ANR	611058	ReturnStatement	"return ""swift"" ;"	215:2:4713:4727	611047	1	True				
ANR	611059	PrimaryExpression	"""swift"""		611047	0					
ANR	611060	Label	case R_BIN_NM_JAVA :	216:1:4730:4748	611047	2	True				
ANR	611061	Identifier	R_BIN_NM_JAVA		611047	0					
ANR	611062	ReturnStatement	"return ""java"" ;"	217:2:4752:4765	611047	3	True				
ANR	611063	PrimaryExpression	"""java"""		611047	0					
ANR	611064	Label	case R_BIN_NM_KOTLIN :	218:1:4768:4788	611047	4	True				
ANR	611065	Identifier	R_BIN_NM_KOTLIN		611047	0					
ANR	611066	ReturnStatement	"return ""kotlin"" ;"	219:2:4792:4807	611047	5	True				
ANR	611067	PrimaryExpression	"""kotlin"""		611047	0					
ANR	611068	Label	case R_BIN_NM_C :	220:1:4810:4825	611047	6	True				
ANR	611069	Identifier	R_BIN_NM_C		611047	0					
ANR	611070	ReturnStatement	"return ( lang & R_BIN_NM_BLOCKS ) ? ""c with blocks"" : ""c"" ;"	221:2:4829:4882	611047	7	True				
ANR	611071	ConditionalExpression	"( lang & R_BIN_NM_BLOCKS ) ? ""c with blocks"" : ""c"""		611047	0					
ANR	611072	Condition	lang & R_BIN_NM_BLOCKS		611047	0					
ANR	611073	BitAndExpression	lang & R_BIN_NM_BLOCKS		611047	0		&			
ANR	611074	Identifier	lang		611047	0					
ANR	611075	Identifier	R_BIN_NM_BLOCKS		611047	1					
ANR	611076	PrimaryExpression	"""c with blocks"""		611047	1					
ANR	611077	PrimaryExpression	"""c"""		611047	2					
ANR	611078	Label	case R_BIN_NM_CXX :	222:1:4885:4902	611047	8	True				
ANR	611079	Identifier	R_BIN_NM_CXX		611047	0					
ANR	611080	ReturnStatement	"return ( lang & R_BIN_NM_BLOCKS ) ? ""c++ with blocks"" : ""c++"" ;"	223:2:4906:4963	611047	9	True				
ANR	611081	ConditionalExpression	"( lang & R_BIN_NM_BLOCKS ) ? ""c++ with blocks"" : ""c++"""		611047	0					
ANR	611082	Condition	lang & R_BIN_NM_BLOCKS		611047	0					
ANR	611083	BitAndExpression	lang & R_BIN_NM_BLOCKS		611047	0		&			
ANR	611084	Identifier	lang		611047	0					
ANR	611085	Identifier	R_BIN_NM_BLOCKS		611047	1					
ANR	611086	PrimaryExpression	"""c++ with blocks"""		611047	1					
ANR	611087	PrimaryExpression	"""c++"""		611047	2					
ANR	611088	Label	case R_BIN_NM_DLANG :	224:1:4966:4985	611047	10	True				
ANR	611089	Identifier	R_BIN_NM_DLANG		611047	0					
ANR	611090	ReturnStatement	"return ""d"" ;"	225:2:4989:4999	611047	11	True				
ANR	611091	PrimaryExpression	"""d"""		611047	0					
ANR	611092	Label	case R_BIN_NM_OBJC :	226:1:5002:5020	611047	12	True				
ANR	611093	Identifier	R_BIN_NM_OBJC		611047	0					
ANR	611094	ReturnStatement	"return ( lang & R_BIN_NM_BLOCKS ) ? ""objc with blocks"" : ""objc"" ;"	227:2:5024:5083	611047	13	True				
ANR	611095	ConditionalExpression	"( lang & R_BIN_NM_BLOCKS ) ? ""objc with blocks"" : ""objc"""		611047	0					
ANR	611096	Condition	lang & R_BIN_NM_BLOCKS		611047	0					
ANR	611097	BitAndExpression	lang & R_BIN_NM_BLOCKS		611047	0		&			
ANR	611098	Identifier	lang		611047	0					
ANR	611099	Identifier	R_BIN_NM_BLOCKS		611047	1					
ANR	611100	PrimaryExpression	"""objc with blocks"""		611047	1					
ANR	611101	PrimaryExpression	"""objc"""		611047	2					
ANR	611102	Label	case R_BIN_NM_MSVC :	228:1:5086:5104	611047	14	True				
ANR	611103	Identifier	R_BIN_NM_MSVC		611047	0					
ANR	611104	ReturnStatement	"return ""msvc"" ;"	229:2:5108:5121	611047	15	True				
ANR	611105	PrimaryExpression	"""msvc"""		611047	0					
ANR	611106	Label	case R_BIN_NM_RUST :	230:1:5124:5142	611047	16	True				
ANR	611107	Identifier	R_BIN_NM_RUST		611047	0					
ANR	611108	ReturnStatement	"return ""rust"" ;"	231:2:5146:5159	611047	17	True				
ANR	611109	PrimaryExpression	"""rust"""		611047	0					
ANR	611110	ReturnStatement	return NULL ;	233:1:5165:5176	611047	1	True				
ANR	611111	Identifier	NULL		611047	0					
ANR	611112	ReturnType	const char *		611047	1					
ANR	611113	Identifier	r_bin_lang_tostring		611047	2					
ANR	611114	ParameterList	int lang		611047	3					
ANR	611115	Parameter	int lang	212:38:4651:4658	611047	0	True				
ANR	611116	ParameterType	int		611047	0					
ANR	611117	Identifier	lang		611047	1					
ANR	611118	CFGEntryNode	ENTRY		611047		True				
ANR	611119	CFGExitNode	EXIT		611047		True				
ANR	611120	Symbol	NULL		611047						
ANR	611121	Symbol	lang		611047						
ANR	611122	Symbol	R_BIN_NM_BLOCKS		611047						
