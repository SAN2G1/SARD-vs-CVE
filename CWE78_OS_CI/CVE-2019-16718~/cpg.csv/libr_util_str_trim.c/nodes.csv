command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5240448	File	data/converged/CVE-2019-16718~_radare2/libr_util_str_trim.c								
ANR	5240449	Function	r_str_trim_path	14:0:269:1086							
ANR	5240450	FunctionDef	r_str_trim_path (char * s)		5240449	0					
ANR	5240451	CompoundStatement		14:36:305:1086	5240449	0					
ANR	5240452	IdentifierDeclStatement	"char * src , * dst , * p ;"	15:1:308:327	5240449	0	True				
ANR	5240453	IdentifierDecl	* src		5240449	0					
ANR	5240454	IdentifierDeclType	char *		5240449	0					
ANR	5240455	Identifier	src		5240449	1					
ANR	5240456	IdentifierDecl	* dst		5240449	1					
ANR	5240457	IdentifierDeclType	char *		5240449	0					
ANR	5240458	Identifier	dst		5240449	1					
ANR	5240459	IdentifierDecl	* p		5240449	2					
ANR	5240460	IdentifierDeclType	char *		5240449	0					
ANR	5240461	Identifier	p		5240449	1					
ANR	5240462	IdentifierDeclStatement	int i = 0 ;	16:1:330:339	5240449	1	True				
ANR	5240463	IdentifierDecl	i = 0		5240449	0					
ANR	5240464	IdentifierDeclType	int		5240449	0					
ANR	5240465	Identifier	i		5240449	1					
ANR	5240466	AssignmentExpression	i = 0		5240449	2		=			
ANR	5240467	Identifier	i		5240449	0					
ANR	5240468	PrimaryExpression	0		5240449	1					
ANR	5240469	IfStatement	if ( ! s || ! * s )		5240449	2					
ANR	5240470	Condition	! s || ! * s	17:5:346:354	5240449	0	True				
ANR	5240471	OrExpression	! s || ! * s		5240449	0		||			
ANR	5240472	UnaryOperationExpression	! s		5240449	0					
ANR	5240473	UnaryOperator	!		5240449	0					
ANR	5240474	Identifier	s		5240449	1					
ANR	5240475	UnaryOperationExpression	! * s		5240449	1					
ANR	5240476	UnaryOperator	!		5240449	0					
ANR	5240477	UnaryOperationExpression	* s		5240449	1					
ANR	5240478	UnaryOperator	*		5240449	0					
ANR	5240479	Identifier	s		5240449	1					
ANR	5240480	CompoundStatement		4:16:51:51	5240449	1					
ANR	5240481	ReturnStatement	return ;	18:2:361:367	5240449	0	True				
ANR	5240482	ExpressionStatement	dst = src = s + 1	20:1:373:390	5240449	3	True				
ANR	5240483	AssignmentExpression	dst = src = s + 1		5240449	0		=			
ANR	5240484	Identifier	dst		5240449	0					
ANR	5240485	AssignmentExpression	src = s + 1		5240449	1		=			
ANR	5240486	Identifier	src		5240449	0					
ANR	5240487	AdditiveExpression	s + 1		5240449	1		+			
ANR	5240488	Identifier	s		5240449	0					
ANR	5240489	PrimaryExpression	1		5240449	1					
ANR	5240490	WhileStatement	while ( * src )		5240449	4					
ANR	5240491	Condition	* src	21:8:400:403	5240449	0	True				
ANR	5240492	UnaryOperationExpression	* src		5240449	0					
ANR	5240493	UnaryOperator	*		5240449	0					
ANR	5240494	Identifier	src		5240449	1					
ANR	5240495	CompoundStatement		8:14:100:100	5240449	1					
ANR	5240496	IfStatement	if ( * ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.' )		5240449	0					
ANR	5240497	Condition	* ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.'	22:6:414:466	5240449	0	True				
ANR	5240498	AndExpression	* ( src - 1 ) == '/' && * src == '.' && * ( src + 1 ) == '.'		5240449	0		&&			
ANR	5240499	EqualityExpression	* ( src - 1 ) == '/'		5240449	0		==			
ANR	5240500	UnaryOperationExpression	* ( src - 1 )		5240449	0					
ANR	5240501	UnaryOperator	*		5240449	0					
ANR	5240502	AdditiveExpression	src - 1		5240449	1		-			
ANR	5240503	Identifier	src		5240449	0					
ANR	5240504	PrimaryExpression	1		5240449	1					
ANR	5240505	PrimaryExpression	'/'		5240449	1					
ANR	5240506	AndExpression	* src == '.' && * ( src + 1 ) == '.'		5240449	1		&&			
ANR	5240507	EqualityExpression	* src == '.'		5240449	0		==			
ANR	5240508	UnaryOperationExpression	* src		5240449	0					
ANR	5240509	UnaryOperator	*		5240449	0					
ANR	5240510	Identifier	src		5240449	1					
ANR	5240511	PrimaryExpression	'.'		5240449	1					
ANR	5240512	EqualityExpression	* ( src + 1 ) == '.'		5240449	1		==			
ANR	5240513	UnaryOperationExpression	* ( src + 1 )		5240449	0					
ANR	5240514	UnaryOperator	*		5240449	0					
ANR	5240515	AdditiveExpression	src + 1		5240449	1		+			
ANR	5240516	Identifier	src		5240449	0					
ANR	5240517	PrimaryExpression	1		5240449	1					
ANR	5240518	PrimaryExpression	'.'		5240449	1					
ANR	5240519	CompoundStatement		9:61:163:163	5240449	1					
ANR	5240520	IfStatement	if ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		5240449	0					
ANR	5240521	Condition	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'	23:7:478:516	5240449	0	True				
ANR	5240522	OrExpression	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'		5240449	0		||			
ANR	5240523	EqualityExpression	* ( src + 2 ) == '/'		5240449	0		==			
ANR	5240524	UnaryOperationExpression	* ( src + 2 )		5240449	0					
ANR	5240525	UnaryOperator	*		5240449	0					
ANR	5240526	AdditiveExpression	src + 2		5240449	1		+			
ANR	5240527	Identifier	src		5240449	0					
ANR	5240528	PrimaryExpression	2		5240449	1					
ANR	5240529	PrimaryExpression	'/'		5240449	1					
ANR	5240530	EqualityExpression	* ( src + 2 ) == '\\0'		5240449	1		==			
ANR	5240531	UnaryOperationExpression	* ( src + 2 )		5240449	0					
ANR	5240532	UnaryOperator	*		5240449	0					
ANR	5240533	AdditiveExpression	src + 2		5240449	1		+			
ANR	5240534	Identifier	src		5240449	0					
ANR	5240535	PrimaryExpression	2		5240449	1					
ANR	5240536	PrimaryExpression	'\\0'		5240449	1					
ANR	5240537	CompoundStatement		10:48:213:213	5240449	1					
ANR	5240538	ExpressionStatement	p = dst - 1	24:4:525:536	5240449	0	True				
ANR	5240539	AssignmentExpression	p = dst - 1		5240449	0		=			
ANR	5240540	Identifier	p		5240449	0					
ANR	5240541	AdditiveExpression	dst - 1		5240449	1		-			
ANR	5240542	Identifier	dst		5240449	0					
ANR	5240543	PrimaryExpression	1		5240449	1					
ANR	5240544	WhileStatement	while ( s != p )		5240449	1					
ANR	5240545	Condition	s != p	25:11:549:554	5240449	0	True				
ANR	5240546	EqualityExpression	s != p		5240449	0		!=			
ANR	5240547	Identifier	s		5240449	0					
ANR	5240548	Identifier	p		5240449	1					
ANR	5240549	CompoundStatement		12:19:251:251	5240449	1					
ANR	5240550	IfStatement	if ( * p == '/' )		5240449	0					
ANR	5240551	Condition	* p == '/'	26:9:568:576	5240449	0	True				
ANR	5240552	EqualityExpression	* p == '/'		5240449	0		==			
ANR	5240553	UnaryOperationExpression	* p		5240449	0					
ANR	5240554	UnaryOperator	*		5240449	0					
ANR	5240555	Identifier	p		5240449	1					
ANR	5240556	PrimaryExpression	'/'		5240449	1					
ANR	5240557	CompoundStatement		13:20:273:273	5240449	1					
ANR	5240558	IfStatement	if ( i )		5240449	0					
ANR	5240559	Condition	i	27:10:591:591	5240449	0	True				
ANR	5240560	Identifier	i		5240449	0					
ANR	5240561	CompoundStatement		14:13:288:288	5240449	1					
ANR	5240562	ExpressionStatement	dst = p + 1	28:7:603:614	5240449	0	True				
ANR	5240563	AssignmentExpression	dst = p + 1		5240449	0		=			
ANR	5240564	Identifier	dst		5240449	0					
ANR	5240565	AdditiveExpression	p + 1		5240449	1		+			
ANR	5240566	Identifier	p		5240449	0					
ANR	5240567	PrimaryExpression	1		5240449	1					
ANR	5240568	ExpressionStatement	i = 0	29:7:623:628	5240449	1	True				
ANR	5240569	AssignmentExpression	i = 0		5240449	0		=			
ANR	5240570	Identifier	i		5240449	0					
ANR	5240571	PrimaryExpression	0		5240449	1					
ANR	5240572	BreakStatement	break ;	30:7:637:642	5240449	2	True				
ANR	5240573	ExpressionStatement	i = 1	32:6:658:663	5240449	1	True				
ANR	5240574	AssignmentExpression	i = 1		5240449	0		=			
ANR	5240575	Identifier	i		5240449	0					
ANR	5240576	PrimaryExpression	1		5240449	1					
ANR	5240577	ExpressionStatement	p --	34:5:677:680	5240449	1	True				
ANR	5240578	PostIncDecOperationExpression	p --		5240449	0					
ANR	5240579	Identifier	p		5240449	0					
ANR	5240580	IncDec	--		5240449	1					
ANR	5240581	IfStatement	if ( s == p && * p == '/' )		5240449	2					
ANR	5240582	Condition	s == p && * p == '/'	36:8:696:714	5240449	0	True				
ANR	5240583	AndExpression	s == p && * p == '/'		5240449	0		&&			
ANR	5240584	EqualityExpression	s == p		5240449	0		==			
ANR	5240585	Identifier	s		5240449	0					
ANR	5240586	Identifier	p		5240449	1					
ANR	5240587	EqualityExpression	* p == '/'		5240449	1		==			
ANR	5240588	UnaryOperationExpression	* p		5240449	0					
ANR	5240589	UnaryOperator	*		5240449	0					
ANR	5240590	Identifier	p		5240449	1					
ANR	5240591	PrimaryExpression	'/'		5240449	1					
ANR	5240592	CompoundStatement		23:29:411:411	5240449	1					
ANR	5240593	ExpressionStatement	dst = p + 1	37:5:724:735	5240449	0	True				
ANR	5240594	AssignmentExpression	dst = p + 1		5240449	0		=			
ANR	5240595	Identifier	dst		5240449	0					
ANR	5240596	AdditiveExpression	p + 1		5240449	1		+			
ANR	5240597	Identifier	p		5240449	0					
ANR	5240598	PrimaryExpression	1		5240449	1					
ANR	5240599	ExpressionStatement	src = src + 2	39:4:747:760	5240449	3	True				
ANR	5240600	AssignmentExpression	src = src + 2		5240449	0		=			
ANR	5240601	Identifier	src		5240449	0					
ANR	5240602	AdditiveExpression	src + 2		5240449	1		+			
ANR	5240603	Identifier	src		5240449	0					
ANR	5240604	PrimaryExpression	2		5240449	1					
ANR	5240605	ElseStatement	else		5240449	0					
ANR	5240606	CompoundStatement		27:10:466:466	5240449	0					
ANR	5240607	ExpressionStatement	* dst = * src	41:4:778:789	5240449	0	True				
ANR	5240608	AssignmentExpression	* dst = * src		5240449	0		=			
ANR	5240609	UnaryOperationExpression	* dst		5240449	0					
ANR	5240610	UnaryOperator	*		5240449	0					
ANR	5240611	Identifier	dst		5240449	1					
ANR	5240612	UnaryOperationExpression	* src		5240449	1					
ANR	5240613	UnaryOperator	*		5240449	0					
ANR	5240614	Identifier	src		5240449	1					
ANR	5240615	ExpressionStatement	dst ++	42:4:795:800	5240449	1	True				
ANR	5240616	PostIncDecOperationExpression	dst ++		5240449	0					
ANR	5240617	Identifier	dst		5240449	0					
ANR	5240618	IncDec	++		5240449	1					
ANR	5240619	ElseStatement	else		5240449	0					
ANR	5240620	IfStatement	if ( * src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' ) )		5240449	0					
ANR	5240621	Condition	* src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )	44:13:820:896	5240449	0	True				
ANR	5240622	AndExpression	* src == '/' && * ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		5240449	0		&&			
ANR	5240623	EqualityExpression	* src == '/'		5240449	0		==			
ANR	5240624	UnaryOperationExpression	* src		5240449	0					
ANR	5240625	UnaryOperator	*		5240449	0					
ANR	5240626	Identifier	src		5240449	1					
ANR	5240627	PrimaryExpression	'/'		5240449	1					
ANR	5240628	AndExpression	* ( src + 1 ) == '.' && ( * ( src + 2 ) == '/' || * ( src + 2 ) == '\\0' )		5240449	1		&&			
ANR	5240629	EqualityExpression	* ( src + 1 ) == '.'		5240449	0		==			
ANR	5240630	UnaryOperationExpression	* ( src + 1 )		5240449	0					
ANR	5240631	UnaryOperator	*		5240449	0					
ANR	5240632	AdditiveExpression	src + 1		5240449	1		+			
ANR	5240633	Identifier	src		5240449	0					
ANR	5240634	PrimaryExpression	1		5240449	1					
ANR	5240635	PrimaryExpression	'.'		5240449	1					
ANR	5240636	OrExpression	* ( src + 2 ) == '/' || * ( src + 2 ) == '\\0'		5240449	1		||			
ANR	5240637	EqualityExpression	* ( src + 2 ) == '/'		5240449	0		==			
ANR	5240638	UnaryOperationExpression	* ( src + 2 )		5240449	0					
ANR	5240639	UnaryOperator	*		5240449	0					
ANR	5240640	AdditiveExpression	src + 2		5240449	1		+			
ANR	5240641	Identifier	src		5240449	0					
ANR	5240642	PrimaryExpression	2		5240449	1					
ANR	5240643	PrimaryExpression	'/'		5240449	1					
ANR	5240644	EqualityExpression	* ( src + 2 ) == '\\0'		5240449	1		==			
ANR	5240645	UnaryOperationExpression	* ( src + 2 )		5240449	0					
ANR	5240646	UnaryOperator	*		5240449	0					
ANR	5240647	AdditiveExpression	src + 2		5240449	1		+			
ANR	5240648	Identifier	src		5240449	0					
ANR	5240649	PrimaryExpression	2		5240449	1					
ANR	5240650	PrimaryExpression	'\\0'		5240449	1					
ANR	5240651	CompoundStatement		31:92:593:593	5240449	1					
ANR	5240652	ExpressionStatement	src ++	45:3:904:909	5240449	0	True				
ANR	5240653	PostIncDecOperationExpression	src ++		5240449	0					
ANR	5240654	Identifier	src		5240449	0					
ANR	5240655	IncDec	++		5240449	1					
ANR	5240656	ElseStatement	else		5240449	0					
ANR	5240657	IfStatement	if ( * src != '/' || * ( src - 1 ) != '/' )		5240449	0					
ANR	5240658	Condition	* src != '/' || * ( src - 1 ) != '/'	46:13:924:955	5240449	0	True				
ANR	5240659	OrExpression	* src != '/' || * ( src - 1 ) != '/'		5240449	0		||			
ANR	5240660	EqualityExpression	* src != '/'		5240449	0		!=			
ANR	5240661	UnaryOperationExpression	* src		5240449	0					
ANR	5240662	UnaryOperator	*		5240449	0					
ANR	5240663	Identifier	src		5240449	1					
ANR	5240664	PrimaryExpression	'/'		5240449	1					
ANR	5240665	EqualityExpression	* ( src - 1 ) != '/'		5240449	1		!=			
ANR	5240666	UnaryOperationExpression	* ( src - 1 )		5240449	0					
ANR	5240667	UnaryOperator	*		5240449	0					
ANR	5240668	AdditiveExpression	src - 1		5240449	1		-			
ANR	5240669	Identifier	src		5240449	0					
ANR	5240670	PrimaryExpression	1		5240449	1					
ANR	5240671	PrimaryExpression	'/'		5240449	1					
ANR	5240672	CompoundStatement		33:47:652:652	5240449	1					
ANR	5240673	ExpressionStatement	* dst = * src	47:3:963:974	5240449	0	True				
ANR	5240674	AssignmentExpression	* dst = * src		5240449	0		=			
ANR	5240675	UnaryOperationExpression	* dst		5240449	0					
ANR	5240676	UnaryOperator	*		5240449	0					
ANR	5240677	Identifier	dst		5240449	1					
ANR	5240678	UnaryOperationExpression	* src		5240449	1					
ANR	5240679	UnaryOperator	*		5240449	0					
ANR	5240680	Identifier	src		5240449	1					
ANR	5240681	ExpressionStatement	dst ++	48:3:979:984	5240449	1	True				
ANR	5240682	PostIncDecOperationExpression	dst ++		5240449	0					
ANR	5240683	Identifier	dst		5240449	0					
ANR	5240684	IncDec	++		5240449	1					
ANR	5240685	ExpressionStatement	src ++	50:2:992:997	5240449	1	True				
ANR	5240686	PostIncDecOperationExpression	src ++		5240449	0					
ANR	5240687	Identifier	src		5240449	0					
ANR	5240688	IncDec	++		5240449	1					
ANR	5240689	IfStatement	if ( dst > s + 1 && * ( dst - 1 ) == '/' )		5240449	5					
ANR	5240690	Condition	dst > s + 1 && * ( dst - 1 ) == '/'	52:5:1007:1038	5240449	0	True				
ANR	5240691	AndExpression	dst > s + 1 && * ( dst - 1 ) == '/'		5240449	0		&&			
ANR	5240692	RelationalExpression	dst > s + 1		5240449	0		>			
ANR	5240693	Identifier	dst		5240449	0					
ANR	5240694	AdditiveExpression	s + 1		5240449	1		+			
ANR	5240695	Identifier	s		5240449	0					
ANR	5240696	PrimaryExpression	1		5240449	1					
ANR	5240697	EqualityExpression	* ( dst - 1 ) == '/'		5240449	1		==			
ANR	5240698	UnaryOperationExpression	* ( dst - 1 )		5240449	0					
ANR	5240699	UnaryOperator	*		5240449	0					
ANR	5240700	AdditiveExpression	dst - 1		5240449	1		-			
ANR	5240701	Identifier	dst		5240449	0					
ANR	5240702	PrimaryExpression	1		5240449	1					
ANR	5240703	PrimaryExpression	'/'		5240449	1					
ANR	5240704	CompoundStatement		39:39:735:735	5240449	1					
ANR	5240705	ExpressionStatement	* ( dst - 1 ) = 0	53:2:1045:1059	5240449	0	True				
ANR	5240706	AssignmentExpression	* ( dst - 1 ) = 0		5240449	0		=			
ANR	5240707	UnaryOperationExpression	* ( dst - 1 )		5240449	0					
ANR	5240708	UnaryOperator	*		5240449	0					
ANR	5240709	AdditiveExpression	dst - 1		5240449	1		-			
ANR	5240710	Identifier	dst		5240449	0					
ANR	5240711	PrimaryExpression	1		5240449	1					
ANR	5240712	PrimaryExpression	0		5240449	1					
ANR	5240713	ElseStatement	else		5240449	0					
ANR	5240714	CompoundStatement		41:8:763:763	5240449	0					
ANR	5240715	ExpressionStatement	* dst = 0	55:2:1073:1081	5240449	0	True				
ANR	5240716	AssignmentExpression	* dst = 0		5240449	0		=			
ANR	5240717	UnaryOperationExpression	* dst		5240449	0					
ANR	5240718	UnaryOperator	*		5240449	0					
ANR	5240719	Identifier	dst		5240449	1					
ANR	5240720	PrimaryExpression	0		5240449	1					
ANR	5240721	ReturnType	R_API void		5240449	1					
ANR	5240722	Identifier	r_str_trim_path		5240449	2					
ANR	5240723	ParameterList	char * s		5240449	3					
ANR	5240724	Parameter	char * s	14:27:296:302	5240449	0	True				
ANR	5240725	ParameterType	char *		5240449	0					
ANR	5240726	Identifier	s		5240449	1					
ANR	5240727	CFGEntryNode	ENTRY		5240449		True				
ANR	5240728	CFGExitNode	EXIT		5240449		True				
ANR	5240729	Symbol	dst		5240449						
ANR	5240730	Symbol	src		5240449						
ANR	5240731	Symbol	i		5240449						
ANR	5240732	Symbol	* ( src + 1 )		5240449						
ANR	5240733	Symbol	* ( dst - 1 )		5240449						
ANR	5240734	Symbol	* src		5240449						
ANR	5240735	Symbol	* ( src + 2 )		5240449						
ANR	5240736	Symbol	p		5240449						
ANR	5240737	Symbol	* dst		5240449						
ANR	5240738	Symbol	* ( src - 1 )		5240449						
ANR	5240739	Symbol	s		5240449						
ANR	5240740	Symbol	* p		5240449						
ANR	5240741	Symbol	* s		5240449						
ANR	5240742	Function	r_str_trim_lines	59:0:1089:1489							
ANR	5240743	FunctionDef	r_str_trim_lines (char * str)		5240742	0					
ANR	5240744	CompoundStatement		59:40:1129:1489	5240742	0					
ANR	5240745	IdentifierDeclStatement	"RList * list = r_str_split_list ( str , ""\\n"" , 0 ) ;"	60:1:1132:1177	5240742	0	True				
ANR	5240746	IdentifierDecl	"* list = r_str_split_list ( str , ""\\n"" , 0 )"		5240742	0					
ANR	5240747	IdentifierDeclType	RList *		5240742	0					
ANR	5240748	Identifier	list		5240742	1					
ANR	5240749	AssignmentExpression	"* list = r_str_split_list ( str , ""\\n"" , 0 )"		5240742	2		=			
ANR	5240750	Identifier	list		5240742	0					
ANR	5240751	CallExpression	"r_str_split_list ( str , ""\\n"" , 0 )"		5240742	1					
ANR	5240752	Callee	r_str_split_list		5240742	0					
ANR	5240753	Identifier	r_str_split_list		5240742	0					
ANR	5240754	ArgumentList	str		5240742	1					
ANR	5240755	Argument	str		5240742	0					
ANR	5240756	Identifier	str		5240742	0					
ANR	5240757	Argument	"""\\n"""		5240742	1					
ANR	5240758	PrimaryExpression	"""\\n"""		5240742	0					
ANR	5240759	Argument	0		5240742	2					
ANR	5240760	PrimaryExpression	0		5240742	0					
ANR	5240761	IdentifierDeclStatement	char * s ;	61:1:1180:1187	5240742	1	True				
ANR	5240762	IdentifierDecl	* s		5240742	0					
ANR	5240763	IdentifierDeclType	char *		5240742	0					
ANR	5240764	Identifier	s		5240742	1					
ANR	5240765	IdentifierDeclStatement	RListIter * iter ;	62:1:1190:1205	5240742	2	True				
ANR	5240766	IdentifierDecl	* iter		5240742	0					
ANR	5240767	IdentifierDeclType	RListIter *		5240742	0					
ANR	5240768	Identifier	iter		5240742	1					
ANR	5240769	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	63:1:1208:1239	5240742	3	True				
ANR	5240770	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5240742	0					
ANR	5240771	IdentifierDeclType	RStrBuf *		5240742	0					
ANR	5240772	Identifier	sb		5240742	1					
ANR	5240773	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5240742	2		=			
ANR	5240774	Identifier	sb		5240742	0					
ANR	5240775	CallExpression	"r_strbuf_new ( """" )"		5240742	1					
ANR	5240776	Callee	r_strbuf_new		5240742	0					
ANR	5240777	Identifier	r_strbuf_new		5240742	0					
ANR	5240778	ArgumentList	""""""		5240742	1					
ANR	5240779	Argument	""""""		5240742	0					
ANR	5240780	PrimaryExpression	""""""		5240742	0					
ANR	5240781	Statement	r_list_foreach	64:1:1242:1255	5240742	4	True				
ANR	5240782	Statement	(	64:16:1257:1257	5240742	5	True				
ANR	5240783	Statement	list	64:17:1258:1261	5240742	6	True				
ANR	5240784	Statement	","	64:21:1262:1262	5240742	7	True				
ANR	5240785	Statement	iter	64:23:1264:1267	5240742	8	True				
ANR	5240786	Statement	","	64:27:1268:1268	5240742	9	True				
ANR	5240787	Statement	s	64:29:1270:1270	5240742	10	True				
ANR	5240788	Statement	)	64:30:1271:1271	5240742	11	True				
ANR	5240789	CompoundStatement		6:32:143:143	5240742	12					
ANR	5240790	ExpressionStatement	"r_str_ansi_filter ( s , NULL , NULL , - 1 )"	66:2:1313:1350	5240742	0	True				
ANR	5240791	CallExpression	"r_str_ansi_filter ( s , NULL , NULL , - 1 )"		5240742	0					
ANR	5240792	Callee	r_str_ansi_filter		5240742	0					
ANR	5240793	Identifier	r_str_ansi_filter		5240742	0					
ANR	5240794	ArgumentList	s		5240742	1					
ANR	5240795	Argument	s		5240742	0					
ANR	5240796	Identifier	s		5240742	0					
ANR	5240797	Argument	NULL		5240742	1					
ANR	5240798	Identifier	NULL		5240742	0					
ANR	5240799	Argument	NULL		5240742	2					
ANR	5240800	Identifier	NULL		5240742	0					
ANR	5240801	Argument	- 1		5240742	3					
ANR	5240802	UnaryOperationExpression	- 1		5240742	0					
ANR	5240803	UnaryOperator	-		5240742	0					
ANR	5240804	PrimaryExpression	1		5240742	1					
ANR	5240805	ExpressionStatement	r_str_trim ( s )	67:2:1354:1368	5240742	1	True				
ANR	5240806	CallExpression	r_str_trim ( s )		5240742	0					
ANR	5240807	Callee	r_str_trim		5240742	0					
ANR	5240808	Identifier	r_str_trim		5240742	0					
ANR	5240809	ArgumentList	s		5240742	1					
ANR	5240810	Argument	s		5240742	0					
ANR	5240811	Identifier	s		5240742	0					
ANR	5240812	IfStatement	if ( * s )		5240742	2					
ANR	5240813	Condition	* s	68:6:1376:1377	5240742	0	True				
ANR	5240814	UnaryOperationExpression	* s		5240742	0					
ANR	5240815	UnaryOperator	*		5240742	0					
ANR	5240816	Identifier	s		5240742	1					
ANR	5240817	CompoundStatement		10:10:250:250	5240742	1					
ANR	5240818	ExpressionStatement	"r_strbuf_appendf ( sb , ""%s\\n"" , s )"	69:3:1385:1417	5240742	0	True				
ANR	5240819	CallExpression	"r_strbuf_appendf ( sb , ""%s\\n"" , s )"		5240742	0					
ANR	5240820	Callee	r_strbuf_appendf		5240742	0					
ANR	5240821	Identifier	r_strbuf_appendf		5240742	0					
ANR	5240822	ArgumentList	sb		5240742	1					
ANR	5240823	Argument	sb		5240742	0					
ANR	5240824	Identifier	sb		5240742	0					
ANR	5240825	Argument	"""%s\\n"""		5240742	1					
ANR	5240826	PrimaryExpression	"""%s\\n"""		5240742	0					
ANR	5240827	Argument	s		5240742	2					
ANR	5240828	Identifier	s		5240742	0					
ANR	5240829	ExpressionStatement	r_list_free ( list )	72:1:1427:1445	5240742	13	True				
ANR	5240830	CallExpression	r_list_free ( list )		5240742	0					
ANR	5240831	Callee	r_list_free		5240742	0					
ANR	5240832	Identifier	r_list_free		5240742	0					
ANR	5240833	ArgumentList	list		5240742	1					
ANR	5240834	Argument	list		5240742	0					
ANR	5240835	Identifier	list		5240742	0					
ANR	5240836	ExpressionStatement	free ( str )	73:1:1448:1458	5240742	14	True				
ANR	5240837	CallExpression	free ( str )		5240742	0					
ANR	5240838	Callee	free		5240742	0					
ANR	5240839	Identifier	free		5240742	0					
ANR	5240840	ArgumentList	str		5240742	1					
ANR	5240841	Argument	str		5240742	0					
ANR	5240842	Identifier	str		5240742	0					
ANR	5240843	ReturnStatement	return r_strbuf_drain ( sb ) ;	74:1:1461:1487	5240742	15	True				
ANR	5240844	CallExpression	r_strbuf_drain ( sb )		5240742	0					
ANR	5240845	Callee	r_strbuf_drain		5240742	0					
ANR	5240846	Identifier	r_strbuf_drain		5240742	0					
ANR	5240847	ArgumentList	sb		5240742	1					
ANR	5240848	Argument	sb		5240742	0					
ANR	5240849	Identifier	sb		5240742	0					
ANR	5240850	ReturnType	R_API char *		5240742	1					
ANR	5240851	Identifier	r_str_trim_lines		5240742	2					
ANR	5240852	ParameterList	char * str		5240742	3					
ANR	5240853	Parameter	char * str	59:29:1118:1126	5240742	0	True				
ANR	5240854	ParameterType	char *		5240742	0					
ANR	5240855	Identifier	str		5240742	1					
ANR	5240856	CFGEntryNode	ENTRY		5240742		True				
ANR	5240857	CFGExitNode	EXIT		5240742		True				
ANR	5240858	Symbol	str		5240742						
ANR	5240859	Symbol	s		5240742						
ANR	5240860	Symbol	r_strbuf_new		5240742						
ANR	5240861	Symbol	NULL		5240742						
ANR	5240862	Symbol	r_str_split_list		5240742						
ANR	5240863	Symbol	r_strbuf_drain		5240742						
ANR	5240864	Symbol	iter		5240742						
ANR	5240865	Symbol	list		5240742						
ANR	5240866	Symbol	* s		5240742						
ANR	5240867	Symbol	sb		5240742						
ANR	5240868	Function	r_str_trim_dup	77:0:1492:1591							
ANR	5240869	FunctionDef	r_str_trim_dup (const char * str)		5240868	0					
ANR	5240870	CompoundStatement		77:44:1536:1591	5240868	0					
ANR	5240871	IdentifierDeclStatement	char * a = strdup ( str ) ;	78:1:1539:1561	5240868	0	True				
ANR	5240872	IdentifierDecl	* a = strdup ( str )		5240868	0					
ANR	5240873	IdentifierDeclType	char *		5240868	0					
ANR	5240874	Identifier	a		5240868	1					
ANR	5240875	AssignmentExpression	* a = strdup ( str )		5240868	2		=			
ANR	5240876	Identifier	a		5240868	0					
ANR	5240877	CallExpression	strdup ( str )		5240868	1					
ANR	5240878	Callee	strdup		5240868	0					
ANR	5240879	Identifier	strdup		5240868	0					
ANR	5240880	ArgumentList	str		5240868	1					
ANR	5240881	Argument	str		5240868	0					
ANR	5240882	Identifier	str		5240868	0					
ANR	5240883	ExpressionStatement	r_str_trim ( a )	79:1:1564:1578	5240868	1	True				
ANR	5240884	CallExpression	r_str_trim ( a )		5240868	0					
ANR	5240885	Callee	r_str_trim		5240868	0					
ANR	5240886	Identifier	r_str_trim		5240868	0					
ANR	5240887	ArgumentList	a		5240868	1					
ANR	5240888	Argument	a		5240868	0					
ANR	5240889	Identifier	a		5240868	0					
ANR	5240890	ReturnStatement	return a ;	80:1:1581:1589	5240868	2	True				
ANR	5240891	Identifier	a		5240868	0					
ANR	5240892	ReturnType	R_API char *		5240868	1					
ANR	5240893	Identifier	r_str_trim_dup		5240868	2					
ANR	5240894	ParameterList	const char * str		5240868	3					
ANR	5240895	Parameter	const char * str	77:27:1519:1533	5240868	0	True				
ANR	5240896	ParameterType	const char *		5240868	0					
ANR	5240897	Identifier	str		5240868	1					
ANR	5240898	CFGEntryNode	ENTRY		5240868		True				
ANR	5240899	CFGExitNode	EXIT		5240868		True				
ANR	5240900	Symbol	str		5240868						
ANR	5240901	Symbol	a		5240868						
ANR	5240902	Symbol	strdup		5240868						
ANR	5240903	Function	r_str_trim	83:0:1594:2035							
ANR	5240904	FunctionDef	r_str_trim (char * str)		5240903	0					
ANR	5240905	CompoundStatement		83:33:1627:2035	5240903	0					
ANR	5240906	ExpressionStatement	r_return_if_fail ( str )	84:1:1630:1652	5240903	0	True				
ANR	5240907	CallExpression	r_return_if_fail ( str )		5240903	0					
ANR	5240908	Callee	r_return_if_fail		5240903	0					
ANR	5240909	Identifier	r_return_if_fail		5240903	0					
ANR	5240910	ArgumentList	str		5240903	1					
ANR	5240911	Argument	str		5240903	0					
ANR	5240912	Identifier	str		5240903	0					
ANR	5240913	IdentifierDeclStatement	char * nonwhite = str ;	85:1:1655:1675	5240903	1	True				
ANR	5240914	IdentifierDecl	* nonwhite = str		5240903	0					
ANR	5240915	IdentifierDeclType	char *		5240903	0					
ANR	5240916	Identifier	nonwhite		5240903	1					
ANR	5240917	AssignmentExpression	* nonwhite = str		5240903	2		=			
ANR	5240918	Identifier	str		5240903	0					
ANR	5240919	Identifier	str		5240903	1					
ANR	5240920	WhileStatement	while ( * nonwhite && IS_WHITECHAR ( * nonwhite ) )		5240903	2					
ANR	5240921	Condition	* nonwhite && IS_WHITECHAR ( * nonwhite )	86:8:1685:1721	5240903	0	True				
ANR	5240922	AndExpression	* nonwhite && IS_WHITECHAR ( * nonwhite )		5240903	0		&&			
ANR	5240923	UnaryOperationExpression	* nonwhite		5240903	0					
ANR	5240924	UnaryOperator	*		5240903	0					
ANR	5240925	Identifier	nonwhite		5240903	1					
ANR	5240926	CallExpression	IS_WHITECHAR ( * nonwhite )		5240903	1					
ANR	5240927	Callee	IS_WHITECHAR		5240903	0					
ANR	5240928	Identifier	IS_WHITECHAR		5240903	0					
ANR	5240929	ArgumentList	* nonwhite		5240903	1					
ANR	5240930	Argument	* nonwhite		5240903	0					
ANR	5240931	UnaryOperationExpression	* nonwhite		5240903	0					
ANR	5240932	UnaryOperator	*		5240903	0					
ANR	5240933	Identifier	nonwhite		5240903	1					
ANR	5240934	CompoundStatement		4:47:96:96	5240903	1					
ANR	5240935	ExpressionStatement	nonwhite ++	87:2:1728:1738	5240903	0	True				
ANR	5240936	PostIncDecOperationExpression	nonwhite ++		5240903	0					
ANR	5240937	Identifier	nonwhite		5240903	0					
ANR	5240938	IncDec	++		5240903	1					
ANR	5240939	IdentifierDeclStatement	int len = strlen ( str ) ;	89:1:1744:1766	5240903	3	True				
ANR	5240940	IdentifierDecl	len = strlen ( str )		5240903	0					
ANR	5240941	IdentifierDeclType	int		5240903	0					
ANR	5240942	Identifier	len		5240903	1					
ANR	5240943	AssignmentExpression	len = strlen ( str )		5240903	2		=			
ANR	5240944	Identifier	len		5240903	0					
ANR	5240945	CallExpression	strlen ( str )		5240903	1					
ANR	5240946	Callee	strlen		5240903	0					
ANR	5240947	Identifier	strlen		5240903	0					
ANR	5240948	ArgumentList	str		5240903	1					
ANR	5240949	Argument	str		5240903	0					
ANR	5240950	Identifier	str		5240903	0					
ANR	5240951	IfStatement	if ( str != nonwhite )		5240903	4					
ANR	5240952	Condition	str != nonwhite	90:5:1773:1787	5240903	0	True				
ANR	5240953	EqualityExpression	str != nonwhite		5240903	0		!=			
ANR	5240954	Identifier	str		5240903	0					
ANR	5240955	Identifier	nonwhite		5240903	1					
ANR	5240956	CompoundStatement		9:2:166:202	5240903	1					
ANR	5240957	IdentifierDeclStatement	int delta = ( size_t ) ( nonwhite - str ) ;	91:2:1794:1830	5240903	0	True				
ANR	5240958	IdentifierDecl	delta = ( size_t ) ( nonwhite - str )		5240903	0					
ANR	5240959	IdentifierDeclType	int		5240903	0					
ANR	5240960	Identifier	delta		5240903	1					
ANR	5240961	AssignmentExpression	delta = ( size_t ) ( nonwhite - str )		5240903	2		=			
ANR	5240962	Identifier	delta		5240903	0					
ANR	5240963	CastExpression	( size_t ) ( nonwhite - str )		5240903	1					
ANR	5240964	CastTarget	size_t		5240903	0					
ANR	5240965	AdditiveExpression	nonwhite - str		5240903	1		-			
ANR	5240966	Identifier	nonwhite		5240903	0					
ANR	5240967	Identifier	str		5240903	1					
ANR	5240968	ExpressionStatement	len -= delta	92:2:1834:1846	5240903	1	True				
ANR	5240969	AssignmentExpression	len -= delta		5240903	0		-=			
ANR	5240970	Identifier	len		5240903	0					
ANR	5240971	Identifier	delta		5240903	1					
ANR	5240972	ExpressionStatement	"memmove ( str , nonwhite , len + 1 )"	93:2:1850:1882	5240903	2	True				
ANR	5240973	CallExpression	"memmove ( str , nonwhite , len + 1 )"		5240903	0					
ANR	5240974	Callee	memmove		5240903	0					
ANR	5240975	Identifier	memmove		5240903	0					
ANR	5240976	ArgumentList	str		5240903	1					
ANR	5240977	Argument	str		5240903	0					
ANR	5240978	Identifier	str		5240903	0					
ANR	5240979	Argument	nonwhite		5240903	1					
ANR	5240980	Identifier	nonwhite		5240903	0					
ANR	5240981	Argument	len + 1		5240903	2					
ANR	5240982	AdditiveExpression	len + 1		5240903	0		+			
ANR	5240983	Identifier	len		5240903	0					
ANR	5240984	PrimaryExpression	1		5240903	1					
ANR	5240985	IfStatement	if ( len > 0 )		5240903	5					
ANR	5240986	Condition	len > 0	95:5:1892:1898	5240903	0	True				
ANR	5240987	RelationalExpression	len > 0		5240903	0		>			
ANR	5240988	Identifier	len		5240903	0					
ANR	5240989	PrimaryExpression	0		5240903	1					
ANR	5240990	CompoundStatement		14:2:277:286	5240903	1					
ANR	5240991	IdentifierDeclStatement	char * ptr ;	96:2:1905:1914	5240903	0	True				
ANR	5240992	IdentifierDecl	* ptr		5240903	0					
ANR	5240993	IdentifierDeclType	char *		5240903	0					
ANR	5240994	Identifier	ptr		5240903	1					
ANR	5240995	ForStatement	for ( ptr = str + len - 1 ; ptr != str ; ptr -- )		5240903	1					
ANR	5240996	ForInit	ptr = str + len - 1 ;	97:7:1923:1942	5240903	0	True				
ANR	5240997	AssignmentExpression	ptr = str + len - 1		5240903	0		=			
ANR	5240998	Identifier	ptr		5240903	0					
ANR	5240999	AdditiveExpression	str + len - 1		5240903	1		+			
ANR	5241000	Identifier	str		5240903	0					
ANR	5241001	AdditiveExpression	len - 1		5240903	1		-			
ANR	5241002	Identifier	len		5240903	0					
ANR	5241003	PrimaryExpression	1		5240903	1					
ANR	5241004	Condition	ptr != str	97:28:1944:1953	5240903	1	True				
ANR	5241005	EqualityExpression	ptr != str		5240903	0		!=			
ANR	5241006	Identifier	ptr		5240903	0					
ANR	5241007	Identifier	str		5240903	1					
ANR	5241008	PostIncDecOperationExpression	ptr --	97:40:1956:1960	5240903	2	True				
ANR	5241009	Identifier	ptr		5240903	0					
ANR	5241010	IncDec	--		5240903	1					
ANR	5241011	CompoundStatement		15:47:335:335	5240903	3					
ANR	5241012	IfStatement	if ( ! IS_WHITECHAR ( * ptr ) )		5240903	0					
ANR	5241013	Condition	! IS_WHITECHAR ( * ptr )	98:7:1972:1991	5240903	0	True				
ANR	5241014	UnaryOperationExpression	! IS_WHITECHAR ( * ptr )		5240903	0					
ANR	5241015	UnaryOperator	!		5240903	0					
ANR	5241016	CallExpression	IS_WHITECHAR ( * ptr )		5240903	1					
ANR	5241017	Callee	IS_WHITECHAR		5240903	0					
ANR	5241018	Identifier	IS_WHITECHAR		5240903	0					
ANR	5241019	ArgumentList	* ptr		5240903	1					
ANR	5241020	Argument	* ptr		5240903	0					
ANR	5241021	UnaryOperationExpression	* ptr		5240903	0					
ANR	5241022	UnaryOperator	*		5240903	0					
ANR	5241023	Identifier	ptr		5240903	1					
ANR	5241024	CompoundStatement		16:29:366:366	5240903	1					
ANR	5241025	BreakStatement	break ;	99:4:2000:2005	5240903	0	True				
ANR	5241026	ExpressionStatement	* ptr = '\\0'	101:3:2015:2026	5240903	1	True				
ANR	5241027	AssignmentExpression	* ptr = '\\0'		5240903	0		=			
ANR	5241028	UnaryOperationExpression	* ptr		5240903	0					
ANR	5241029	UnaryOperator	*		5240903	0					
ANR	5241030	Identifier	ptr		5240903	1					
ANR	5241031	PrimaryExpression	'\\0'		5240903	1					
ANR	5241032	ReturnType	R_API void		5240903	1					
ANR	5241033	Identifier	r_str_trim		5240903	2					
ANR	5241034	ParameterList	char * str		5240903	3					
ANR	5241035	Parameter	char * str	83:22:1616:1624	5240903	0	True				
ANR	5241036	ParameterType	char *		5240903	0					
ANR	5241037	Identifier	str		5240903	1					
ANR	5241038	CFGEntryNode	ENTRY		5240903		True				
ANR	5241039	CFGExitNode	EXIT		5240903		True				
ANR	5241040	Symbol	str		5240903						
ANR	5241041	Symbol	* nonwhite		5240903						
ANR	5241042	Symbol	strlen		5240903						
ANR	5241043	Symbol	len		5240903						
ANR	5241044	Symbol	IS_WHITECHAR		5240903						
ANR	5241045	Symbol	delta		5240903						
ANR	5241046	Symbol	* ptr		5240903						
ANR	5241047	Symbol	nonwhite		5240903						
ANR	5241048	Symbol	ptr		5240903						
ANR	5241049	Function	r_str_trim_ro	108:6:2151:2280							
ANR	5241050	FunctionDef	r_str_trim_ro (const char * str)		5241049	0					
ANR	5241051	CompoundStatement		108:49:2194:2280	5241049	0					
ANR	5241052	IfStatement	if ( str )		5241049	0					
ANR	5241053	Condition	str	109:5:2201:2203	5241049	0	True				
ANR	5241054	Identifier	str		5241049	0					
ANR	5241055	CompoundStatement		2:10:11:11	5241049	1					
ANR	5241056	ForStatement	for ( ; * str && IS_WHITECHAR ( * str ) ; str ++ )		5241049	0					
ANR	5241057	Condition	* str && IS_WHITECHAR ( * str )	110:9:2217:2243	5241049	0	True				
ANR	5241058	AndExpression	* str && IS_WHITECHAR ( * str )		5241049	0		&&			
ANR	5241059	UnaryOperationExpression	* str		5241049	0					
ANR	5241060	UnaryOperator	*		5241049	0					
ANR	5241061	Identifier	str		5241049	1					
ANR	5241062	CallExpression	IS_WHITECHAR ( * str )		5241049	1					
ANR	5241063	Callee	IS_WHITECHAR		5241049	0					
ANR	5241064	Identifier	IS_WHITECHAR		5241049	0					
ANR	5241065	ArgumentList	* str		5241049	1					
ANR	5241066	Argument	* str		5241049	0					
ANR	5241067	UnaryOperationExpression	* str		5241049	0					
ANR	5241068	UnaryOperator	*		5241049	0					
ANR	5241069	Identifier	str		5241049	1					
ANR	5241070	PostIncDecOperationExpression	str ++	110:38:2246:2250	5241049	1	True				
ANR	5241071	Identifier	str		5241049	0					
ANR	5241072	IncDec	++		5241049	1					
ANR	5241073	CompoundStatement		3:45:58:58	5241049	2					
ANR	5241074	ExpressionStatement		111:3:2258:2258	5241049	0	True				
ANR	5241075	ReturnStatement	return str ;	114:1:2268:2278	5241049	1	True				
ANR	5241076	Identifier	str		5241049	0					
ANR	5241077	ReturnType	const char *		5241049	1					
ANR	5241078	Identifier	r_str_trim_ro		5241049	2					
ANR	5241079	ParameterList	const char * str		5241049	3					
ANR	5241080	Parameter	const char * str	108:32:2177:2191	5241049	0	True				
ANR	5241081	ParameterType	const char *		5241049	0					
ANR	5241082	Identifier	str		5241049	1					
ANR	5241083	CFGEntryNode	ENTRY		5241049		True				
ANR	5241084	CFGExitNode	EXIT		5241049		True				
ANR	5241085	Symbol	str		5241049						
ANR	5241086	Symbol	IS_WHITECHAR		5241049						
ANR	5241087	Symbol	* str		5241049						
ANR	5241088	Function	r_str_trim_wp	119:6:2392:2523							
ANR	5241089	FunctionDef	r_str_trim_wp (const char * str)		5241088	0					
ANR	5241090	CompoundStatement		119:49:2435:2523	5241088	0					
ANR	5241091	IfStatement	if ( str )		5241088	0					
ANR	5241092	Condition	str	120:5:2442:2444	5241088	0	True				
ANR	5241093	Identifier	str		5241088	0					
ANR	5241094	CompoundStatement		2:10:11:11	5241088	1					
ANR	5241095	ForStatement	for ( ; * str && ! IS_WHITESPACE ( * str ) ; str ++ )		5241088	0					
ANR	5241096	Condition	* str && ! IS_WHITESPACE ( * str )	121:9:2458:2486	5241088	0	True				
ANR	5241097	AndExpression	* str && ! IS_WHITESPACE ( * str )		5241088	0		&&			
ANR	5241098	UnaryOperationExpression	* str		5241088	0					
ANR	5241099	UnaryOperator	*		5241088	0					
ANR	5241100	Identifier	str		5241088	1					
ANR	5241101	UnaryOperationExpression	! IS_WHITESPACE ( * str )		5241088	1					
ANR	5241102	UnaryOperator	!		5241088	0					
ANR	5241103	CallExpression	IS_WHITESPACE ( * str )		5241088	1					
ANR	5241104	Callee	IS_WHITESPACE		5241088	0					
ANR	5241105	Identifier	IS_WHITESPACE		5241088	0					
ANR	5241106	ArgumentList	* str		5241088	1					
ANR	5241107	Argument	* str		5241088	0					
ANR	5241108	UnaryOperationExpression	* str		5241088	0					
ANR	5241109	UnaryOperator	*		5241088	0					
ANR	5241110	Identifier	str		5241088	1					
ANR	5241111	PostIncDecOperationExpression	str ++	121:40:2489:2493	5241088	1	True				
ANR	5241112	Identifier	str		5241088	0					
ANR	5241113	IncDec	++		5241088	1					
ANR	5241114	CompoundStatement		3:47:60:60	5241088	2					
ANR	5241115	ExpressionStatement		122:3:2501:2501	5241088	0	True				
ANR	5241116	ReturnStatement	return str ;	125:1:2511:2521	5241088	1	True				
ANR	5241117	Identifier	str		5241088	0					
ANR	5241118	ReturnType	const char *		5241088	1					
ANR	5241119	Identifier	r_str_trim_wp		5241088	2					
ANR	5241120	ParameterList	const char * str		5241088	3					
ANR	5241121	Parameter	const char * str	119:32:2418:2432	5241088	0	True				
ANR	5241122	ParameterType	const char *		5241088	0					
ANR	5241123	Identifier	str		5241088	1					
ANR	5241124	CFGEntryNode	ENTRY		5241088		True				
ANR	5241125	CFGExitNode	EXIT		5241088		True				
ANR	5241126	Symbol	str		5241088						
ANR	5241127	Symbol	* str		5241088						
ANR	5241128	Symbol	IS_WHITESPACE		5241088						
ANR	5241129	Function	r_str_trim_head	130:0:2609:2753							
ANR	5241130	FunctionDef	r_str_trim_head (char * str)		5241129	0					
ANR	5241131	CompoundStatement		130:39:2648:2753	5241129	0					
ANR	5241132	IdentifierDeclStatement	char * p = ( char * ) r_str_trim_ro ( str ) ;	131:1:2651:2688	5241129	0	True				
ANR	5241133	IdentifierDecl	* p = ( char * ) r_str_trim_ro ( str )		5241129	0					
ANR	5241134	IdentifierDeclType	char *		5241129	0					
ANR	5241135	Identifier	p		5241129	1					
ANR	5241136	AssignmentExpression	* p = ( char * ) r_str_trim_ro ( str )		5241129	2		=			
ANR	5241137	Identifier	p		5241129	0					
ANR	5241138	CastExpression	( char * ) r_str_trim_ro ( str )		5241129	1					
ANR	5241139	CastTarget	char *		5241129	0					
ANR	5241140	CallExpression	r_str_trim_ro ( str )		5241129	1					
ANR	5241141	Callee	r_str_trim_ro		5241129	0					
ANR	5241142	Identifier	r_str_trim_ro		5241129	0					
ANR	5241143	ArgumentList	str		5241129	1					
ANR	5241144	Argument	str		5241129	0					
ANR	5241145	Identifier	str		5241129	0					
ANR	5241146	ExpressionStatement		131:39:2689:2689	5241129	1	True				
ANR	5241147	IfStatement	if ( p )		5241129	2					
ANR	5241148	Condition	p	132:5:2696:2696	5241129	0	True				
ANR	5241149	Identifier	p		5241129	0					
ANR	5241150	CompoundStatement		3:8:50:50	5241129	1					
ANR	5241151	ExpressionStatement	"memmove ( str , p , strlen ( p ) + 1 )"	133:2:2703:2735	5241129	0	True				
ANR	5241152	CallExpression	"memmove ( str , p , strlen ( p ) + 1 )"		5241129	0					
ANR	5241153	Callee	memmove		5241129	0					
ANR	5241154	Identifier	memmove		5241129	0					
ANR	5241155	ArgumentList	str		5241129	1					
ANR	5241156	Argument	str		5241129	0					
ANR	5241157	Identifier	str		5241129	0					
ANR	5241158	Argument	p		5241129	1					
ANR	5241159	Identifier	p		5241129	0					
ANR	5241160	Argument	strlen ( p ) + 1		5241129	2					
ANR	5241161	AdditiveExpression	strlen ( p ) + 1		5241129	0		+			
ANR	5241162	CallExpression	strlen ( p )		5241129	0					
ANR	5241163	Callee	strlen		5241129	0					
ANR	5241164	Identifier	strlen		5241129	0					
ANR	5241165	ArgumentList	p		5241129	1					
ANR	5241166	Argument	p		5241129	0					
ANR	5241167	Identifier	p		5241129	0					
ANR	5241168	PrimaryExpression	1		5241129	1					
ANR	5241169	ReturnStatement	return str ;	135:1:2741:2751	5241129	3	True				
ANR	5241170	Identifier	str		5241129	0					
ANR	5241171	ReturnType	R_API char *		5241129	1					
ANR	5241172	Identifier	r_str_trim_head		5241129	2					
ANR	5241173	ParameterList	char * str		5241129	3					
ANR	5241174	Parameter	char * str	130:28:2637:2645	5241129	0	True				
ANR	5241175	ParameterType	char *		5241129	0					
ANR	5241176	Identifier	str		5241129	1					
ANR	5241177	CFGEntryNode	ENTRY		5241129		True				
ANR	5241178	CFGExitNode	EXIT		5241129		True				
ANR	5241179	Symbol	str		5241129						
ANR	5241180	Symbol	p		5241129						
ANR	5241181	Symbol	strlen		5241129						
ANR	5241182	Symbol	r_str_trim_ro		5241129						
ANR	5241183	Function	r_str_trim_tail	140:0:2879:3144							
ANR	5241184	FunctionDef	r_str_trim_tail (char * str)		5241183	0					
ANR	5241185	CompoundStatement		140:39:2918:3144	5241183	0					
ANR	5241186	IdentifierDeclStatement	int length ;	141:1:2921:2931	5241183	0	True				
ANR	5241187	IdentifierDecl	length		5241183	0					
ANR	5241188	IdentifierDeclType	int		5241183	0					
ANR	5241189	Identifier	length		5241183	1					
ANR	5241190	IfStatement	if ( ! str )		5241183	1					
ANR	5241191	Condition	! str	143:5:2939:2942	5241183	0	True				
ANR	5241192	UnaryOperationExpression	! str		5241183	0					
ANR	5241193	UnaryOperator	!		5241183	0					
ANR	5241194	Identifier	str		5241183	1					
ANR	5241195	CompoundStatement		4:11:26:26	5241183	1					
ANR	5241196	ReturnStatement	return NULL ;	144:2:2949:2960	5241183	0	True				
ANR	5241197	Identifier	NULL		5241183	0					
ANR	5241198	ExpressionStatement	length = strlen ( str )	146:1:2966:2987	5241183	2	True				
ANR	5241199	AssignmentExpression	length = strlen ( str )		5241183	0		=			
ANR	5241200	Identifier	length		5241183	0					
ANR	5241201	CallExpression	strlen ( str )		5241183	1					
ANR	5241202	Callee	strlen		5241183	0					
ANR	5241203	Identifier	strlen		5241183	0					
ANR	5241204	ArgumentList	str		5241183	1					
ANR	5241205	Argument	str		5241183	0					
ANR	5241206	Identifier	str		5241183	0					
ANR	5241207	IfStatement	if ( ! length )		5241183	3					
ANR	5241208	Condition	! length	147:5:2994:3000	5241183	0	True				
ANR	5241209	UnaryOperationExpression	! length		5241183	0					
ANR	5241210	UnaryOperator	!		5241183	0					
ANR	5241211	Identifier	length		5241183	1					
ANR	5241212	CompoundStatement		8:14:84:84	5241183	1					
ANR	5241213	ReturnStatement	return str ;	148:2:3007:3017	5241183	0	True				
ANR	5241214	Identifier	str		5241183	0					
ANR	5241215	WhileStatement	while ( length -- )		5241183	4					
ANR	5241216	Condition	length --	151:8:3031:3038	5241183	0	True				
ANR	5241217	PostIncDecOperationExpression	length --		5241183	0					
ANR	5241218	Identifier	length		5241183	0					
ANR	5241219	IncDec	--		5241183	1					
ANR	5241220	CompoundStatement		12:18:122:122	5241183	1					
ANR	5241221	IfStatement	if ( IS_WHITECHAR ( str [ length ] ) )		5241183	0					
ANR	5241222	Condition	IS_WHITECHAR ( str [ length ] )	152:6:3049:3074	5241183	0	True				
ANR	5241223	CallExpression	IS_WHITECHAR ( str [ length ] )		5241183	0					
ANR	5241224	Callee	IS_WHITECHAR		5241183	0					
ANR	5241225	Identifier	IS_WHITECHAR		5241183	0					
ANR	5241226	ArgumentList	str [ length ]		5241183	1					
ANR	5241227	Argument	str [ length ]		5241183	0					
ANR	5241228	ArrayIndexing	str [ length ]		5241183	0					
ANR	5241229	Identifier	str		5241183	0					
ANR	5241230	Identifier	length		5241183	1					
ANR	5241231	CompoundStatement		13:34:158:158	5241183	1					
ANR	5241232	ExpressionStatement	str [ length ] = '\\0'	153:3:3082:3100	5241183	0	True				
ANR	5241233	AssignmentExpression	str [ length ] = '\\0'		5241183	0		=			
ANR	5241234	ArrayIndexing	str [ length ]		5241183	0					
ANR	5241235	Identifier	str		5241183	0					
ANR	5241236	Identifier	length		5241183	1					
ANR	5241237	PrimaryExpression	'\\0'		5241183	1					
ANR	5241238	ElseStatement	else		5241183	0					
ANR	5241239	CompoundStatement		15:9:192:192	5241183	0					
ANR	5241240	BreakStatement	break ;	155:3:3116:3121	5241183	0	True				
ANR	5241241	ReturnStatement	return str ;	159:1:3132:3142	5241183	5	True				
ANR	5241242	Identifier	str		5241183	0					
ANR	5241243	ReturnType	R_API char *		5241183	1					
ANR	5241244	Identifier	r_str_trim_tail		5241183	2					
ANR	5241245	ParameterList	char * str		5241183	3					
ANR	5241246	Parameter	char * str	140:28:2907:2915	5241183	0	True				
ANR	5241247	ParameterType	char *		5241183	0					
ANR	5241248	Identifier	str		5241183	1					
ANR	5241249	CFGEntryNode	ENTRY		5241183		True				
ANR	5241250	CFGExitNode	EXIT		5241183		True				
ANR	5241251	Symbol	str		5241183						
ANR	5241252	Symbol	strlen		5241183						
ANR	5241253	Symbol	NULL		5241183						
ANR	5241254	Symbol	IS_WHITECHAR		5241183						
ANR	5241255	Symbol	length		5241183						
ANR	5241256	Symbol	* length		5241183						
ANR	5241257	Symbol	* str		5241183						
ANR	5241258	Function	r_str_trim_head_tail	164:0:3284:3379							
ANR	5241259	FunctionDef	r_str_trim_head_tail (char * str)		5241258	0					
ANR	5241260	CompoundStatement		164:44:3328:3379	5241258	0					
ANR	5241261	ReturnStatement	return r_str_trim_tail ( r_str_trim_head ( str ) ) ;	165:1:3331:3377	5241258	0	True				
ANR	5241262	CallExpression	r_str_trim_tail ( r_str_trim_head ( str ) )		5241258	0					
ANR	5241263	Callee	r_str_trim_tail		5241258	0					
ANR	5241264	Identifier	r_str_trim_tail		5241258	0					
ANR	5241265	ArgumentList	r_str_trim_head ( str )		5241258	1					
ANR	5241266	Argument	r_str_trim_head ( str )		5241258	0					
ANR	5241267	CallExpression	r_str_trim_head ( str )		5241258	0					
ANR	5241268	Callee	r_str_trim_head		5241258	0					
ANR	5241269	Identifier	r_str_trim_head		5241258	0					
ANR	5241270	ArgumentList	str		5241258	1					
ANR	5241271	Argument	str		5241258	0					
ANR	5241272	Identifier	str		5241258	0					
ANR	5241273	ReturnType	R_API char *		5241258	1					
ANR	5241274	Identifier	r_str_trim_head_tail		5241258	2					
ANR	5241275	ParameterList	char * str		5241258	3					
ANR	5241276	Parameter	char * str	164:33:3317:3325	5241258	0	True				
ANR	5241277	ParameterType	char *		5241258	0					
ANR	5241278	Identifier	str		5241258	1					
ANR	5241279	CFGEntryNode	ENTRY		5241258		True				
ANR	5241280	CFGExitNode	EXIT		5241258		True				
ANR	5241281	Symbol	str		5241258						
ANR	5241282	Symbol	r_str_trim_head		5241258						
ANR	5241283	Symbol	r_str_trim_tail		5241258						
ANR	5241284	Function	r_str_trim_nc	169:0:3436:3544							
ANR	5241285	FunctionDef	r_str_trim_nc (char * str)		5241284	0					
ANR	5241286	CompoundStatement		169:37:3473:3544	5241284	0					
ANR	5241287	IdentifierDeclStatement	char * s = ( char * ) r_str_trim_ro ( str ) ;	170:1:3476:3513	5241284	0	True				
ANR	5241288	IdentifierDecl	* s = ( char * ) r_str_trim_ro ( str )		5241284	0					
ANR	5241289	IdentifierDeclType	char *		5241284	0					
ANR	5241290	Identifier	s		5241284	1					
ANR	5241291	AssignmentExpression	* s = ( char * ) r_str_trim_ro ( str )		5241284	2		=			
ANR	5241292	Identifier	s		5241284	0					
ANR	5241293	CastExpression	( char * ) r_str_trim_ro ( str )		5241284	1					
ANR	5241294	CastTarget	char *		5241284	0					
ANR	5241295	CallExpression	r_str_trim_ro ( str )		5241284	1					
ANR	5241296	Callee	r_str_trim_ro		5241284	0					
ANR	5241297	Identifier	r_str_trim_ro		5241284	0					
ANR	5241298	ArgumentList	str		5241284	1					
ANR	5241299	Argument	str		5241284	0					
ANR	5241300	Identifier	str		5241284	0					
ANR	5241301	ReturnStatement	return r_str_trim_tail ( s ) ;	171:1:3516:3542	5241284	1	True				
ANR	5241302	CallExpression	r_str_trim_tail ( s )		5241284	0					
ANR	5241303	Callee	r_str_trim_tail		5241284	0					
ANR	5241304	Identifier	r_str_trim_tail		5241284	0					
ANR	5241305	ArgumentList	s		5241284	1					
ANR	5241306	Argument	s		5241284	0					
ANR	5241307	Identifier	s		5241284	0					
ANR	5241308	ReturnType	R_API char *		5241284	1					
ANR	5241309	Identifier	r_str_trim_nc		5241284	2					
ANR	5241310	ParameterList	char * str		5241284	3					
ANR	5241311	Parameter	char * str	169:26:3462:3470	5241284	0	True				
ANR	5241312	ParameterType	char *		5241284	0					
ANR	5241313	Identifier	str		5241284	1					
ANR	5241314	CFGEntryNode	ENTRY		5241284		True				
ANR	5241315	CFGExitNode	EXIT		5241284		True				
ANR	5241316	Symbol	str		5241284						
ANR	5241317	Symbol	s		5241284						
ANR	5241318	Symbol	r_str_trim_ro		5241284						
ANR	5241319	Symbol	r_str_trim_tail		5241284						
ANR	5241320	Function	r_str_ansi_trim	175:0:3618:4421							
ANR	5241321	FunctionDef	"r_str_ansi_trim (char * str , int str_len , int n)"		5241320	0					
ANR	5241322	CompoundStatement		175:57:3675:4421	5241320	0					
ANR	5241323	IdentifierDeclStatement	"char ch , ch2 ;"	176:1:3678:3690	5241320	0	True				
ANR	5241324	IdentifierDecl	ch		5241320	0					
ANR	5241325	IdentifierDeclType	char		5241320	0					
ANR	5241326	Identifier	ch		5241320	1					
ANR	5241327	IdentifierDecl	ch2		5241320	1					
ANR	5241328	IdentifierDeclType	char		5241320	0					
ANR	5241329	Identifier	ch2		5241320	1					
ANR	5241330	IdentifierDeclStatement	"int back = 0 , i = 0 , len = 0 ;"	177:1:3693:3721	5241320	1	True				
ANR	5241331	IdentifierDecl	back = 0		5241320	0					
ANR	5241332	IdentifierDeclType	int		5241320	0					
ANR	5241333	Identifier	back		5241320	1					
ANR	5241334	AssignmentExpression	back = 0		5241320	2		=			
ANR	5241335	Identifier	back		5241320	0					
ANR	5241336	PrimaryExpression	0		5241320	1					
ANR	5241337	IdentifierDecl	i = 0		5241320	1					
ANR	5241338	IdentifierDeclType	int		5241320	0					
ANR	5241339	Identifier	i		5241320	1					
ANR	5241340	AssignmentExpression	i = 0		5241320	2		=			
ANR	5241341	Identifier	i		5241320	0					
ANR	5241342	PrimaryExpression	0		5241320	1					
ANR	5241343	IdentifierDecl	len = 0		5241320	2					
ANR	5241344	IdentifierDeclType	int		5241320	0					
ANR	5241345	Identifier	len		5241320	1					
ANR	5241346	AssignmentExpression	len = 0		5241320	2		=			
ANR	5241347	Identifier	len		5241320	0					
ANR	5241348	PrimaryExpression	0		5241320	1					
ANR	5241349	IfStatement	if ( ! str )		5241320	2					
ANR	5241350	Condition	! str	178:5:3728:3731	5241320	0	True				
ANR	5241351	UnaryOperationExpression	! str		5241320	0					
ANR	5241352	UnaryOperator	!		5241320	0					
ANR	5241353	Identifier	str		5241320	1					
ANR	5241354	CompoundStatement		4:11:58:58	5241320	1					
ANR	5241355	ReturnStatement	return 0 ;	179:2:3738:3746	5241320	0	True				
ANR	5241356	PrimaryExpression	0		5241320	0					
ANR	5241357	IfStatement	if ( str_len < 0 )		5241320	3					
ANR	5241358	Condition	str_len < 0	182:5:3792:3802	5241320	0	True				
ANR	5241359	RelationalExpression	str_len < 0		5241320	0		<			
ANR	5241360	Identifier	str_len		5241320	0					
ANR	5241361	PrimaryExpression	0		5241320	1					
ANR	5241362	CompoundStatement		8:18:129:129	5241320	1					
ANR	5241363	ExpressionStatement	str_len = strlen ( str )	183:2:3809:3831	5241320	0	True				
ANR	5241364	AssignmentExpression	str_len = strlen ( str )		5241320	0		=			
ANR	5241365	Identifier	str_len		5241320	0					
ANR	5241366	CallExpression	strlen ( str )		5241320	1					
ANR	5241367	Callee	strlen		5241320	0					
ANR	5241368	Identifier	strlen		5241320	0					
ANR	5241369	ArgumentList	str		5241320	1					
ANR	5241370	Argument	str		5241320	0					
ANR	5241371	Identifier	str		5241320	0					
ANR	5241372	IfStatement	if ( n >= str_len )		5241320	4					
ANR	5241373	Condition	n >= str_len	185:5:3841:3852	5241320	0	True				
ANR	5241374	RelationalExpression	n >= str_len		5241320	0		>=			
ANR	5241375	Identifier	n		5241320	0					
ANR	5241376	Identifier	str_len		5241320	1					
ANR	5241377	CompoundStatement		11:19:179:179	5241320	1					
ANR	5241378	ExpressionStatement	str [ str_len ] = 0	186:2:3859:3875	5241320	0	True				
ANR	5241379	AssignmentExpression	str [ str_len ] = 0		5241320	0		=			
ANR	5241380	ArrayIndexing	str [ str_len ]		5241320	0					
ANR	5241381	Identifier	str		5241320	0					
ANR	5241382	Identifier	str_len		5241320	1					
ANR	5241383	PrimaryExpression	0		5241320	1					
ANR	5241384	ReturnStatement	return str_len ;	187:2:3879:3893	5241320	1	True				
ANR	5241385	Identifier	str_len		5241320	0					
ANR	5241386	WhileStatement	while ( ( i < str_len ) && str [ i ] && len < n && n > 0 )		5241320	5					
ANR	5241387	Condition	( i < str_len ) && str [ i ] && len < n && n > 0	189:8:3906:3948	5241320	0	True				
ANR	5241388	AndExpression	( i < str_len ) && str [ i ] && len < n && n > 0		5241320	0		&&			
ANR	5241389	RelationalExpression	i < str_len		5241320	0		<			
ANR	5241390	Identifier	i		5241320	0					
ANR	5241391	Identifier	str_len		5241320	1					
ANR	5241392	AndExpression	str [ i ] && len < n && n > 0		5241320	1		&&			
ANR	5241393	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241394	Identifier	str		5241320	0					
ANR	5241395	Identifier	i		5241320	1					
ANR	5241396	AndExpression	len < n && n > 0		5241320	1		&&			
ANR	5241397	RelationalExpression	len < n		5241320	0		<			
ANR	5241398	Identifier	len		5241320	0					
ANR	5241399	Identifier	n		5241320	1					
ANR	5241400	RelationalExpression	n > 0		5241320	1		>			
ANR	5241401	Identifier	n		5241320	0					
ANR	5241402	PrimaryExpression	0		5241320	1					
ANR	5241403	CompoundStatement		15:53:275:275	5241320	1					
ANR	5241404	ExpressionStatement	ch = str [ i ]	190:2:3955:3966	5241320	0	True				
ANR	5241405	AssignmentExpression	ch = str [ i ]		5241320	0		=			
ANR	5241406	Identifier	ch		5241320	0					
ANR	5241407	ArrayIndexing	str [ i ]		5241320	1					
ANR	5241408	Identifier	str		5241320	0					
ANR	5241409	Identifier	i		5241320	1					
ANR	5241410	ExpressionStatement	ch2 = str [ i + 1 ]	191:2:3970:3986	5241320	1	True				
ANR	5241411	AssignmentExpression	ch2 = str [ i + 1 ]		5241320	0		=			
ANR	5241412	Identifier	ch2		5241320	0					
ANR	5241413	ArrayIndexing	str [ i + 1 ]		5241320	1					
ANR	5241414	Identifier	str		5241320	0					
ANR	5241415	AdditiveExpression	i + 1		5241320	1		+			
ANR	5241416	Identifier	i		5241320	0					
ANR	5241417	PrimaryExpression	1		5241320	1					
ANR	5241418	IfStatement	if ( ch == 0x1b )		5241320	2					
ANR	5241419	Condition	ch == 0x1b	192:6:3994:4003	5241320	0	True				
ANR	5241420	EqualityExpression	ch == 0x1b		5241320	0		==			
ANR	5241421	Identifier	ch		5241320	0					
ANR	5241422	PrimaryExpression	0x1b		5241320	1					
ANR	5241423	CompoundStatement		18:18:330:330	5241320	1					
ANR	5241424	IfStatement	if ( ch2 == '\\\\' )		5241320	0					
ANR	5241425	Condition	ch2 == '\\\\'	193:7:4015:4025	5241320	0	True				
ANR	5241426	EqualityExpression	ch2 == '\\\\'		5241320	0		==			
ANR	5241427	Identifier	ch2		5241320	0					
ANR	5241428	PrimaryExpression	'\\\\'		5241320	1					
ANR	5241429	CompoundStatement		19:20:352:352	5241320	1					
ANR	5241430	ExpressionStatement	i ++	194:4:4034:4037	5241320	0	True				
ANR	5241431	PostIncDecOperationExpression	i ++		5241320	0					
ANR	5241432	Identifier	i		5241320	0					
ANR	5241433	IncDec	++		5241320	1					
ANR	5241434	ElseStatement	else		5241320	0					
ANR	5241435	IfStatement	if ( ch2 == ']' )		5241320	0					
ANR	5241436	Condition	ch2 == ']'	195:14:4053:4062	5241320	0	True				
ANR	5241437	EqualityExpression	ch2 == ']'		5241320	0		==			
ANR	5241438	Identifier	ch2		5241320	0					
ANR	5241439	PrimaryExpression	']'		5241320	1					
ANR	5241440	CompoundStatement		21:26:389:389	5241320	1					
ANR	5241441	IfStatement	"if ( ! strncmp ( str + 2 + 5 , ""rgb:"" , 4 ) )"		5241320	0					
ANR	5241442	Condition	"! strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"	196:8:4075:4107	5241320	0	True				
ANR	5241443	UnaryOperationExpression	"! strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"		5241320	0					
ANR	5241444	UnaryOperator	!		5241320	0					
ANR	5241445	CallExpression	"strncmp ( str + 2 + 5 , ""rgb:"" , 4 )"		5241320	1					
ANR	5241446	Callee	strncmp		5241320	0					
ANR	5241447	Identifier	strncmp		5241320	0					
ANR	5241448	ArgumentList	str + 2 + 5		5241320	1					
ANR	5241449	Argument	str + 2 + 5		5241320	0					
ANR	5241450	AdditiveExpression	str + 2 + 5		5241320	0		+			
ANR	5241451	Identifier	str		5241320	0					
ANR	5241452	AdditiveExpression	2 + 5		5241320	1		+			
ANR	5241453	PrimaryExpression	2		5241320	0					
ANR	5241454	PrimaryExpression	5		5241320	1					
ANR	5241455	Argument	"""rgb:"""		5241320	1					
ANR	5241456	PrimaryExpression	"""rgb:"""		5241320	0					
ANR	5241457	Argument	4		5241320	2					
ANR	5241458	PrimaryExpression	4		5241320	0					
ANR	5241459	CompoundStatement		22:43:434:434	5241320	1					
ANR	5241460	ExpressionStatement	i += 18	197:5:4117:4124	5241320	0	True				
ANR	5241461	AssignmentExpression	i += 18		5241320	0		+=			
ANR	5241462	Identifier	i		5241320	0					
ANR	5241463	PrimaryExpression	18		5241320	1					
ANR	5241464	ElseStatement	else		5241320	0					
ANR	5241465	IfStatement	if ( ch2 == '[' )		5241320	0					
ANR	5241466	Condition	ch2 == '['	199:14:4146:4155	5241320	0	True				
ANR	5241467	EqualityExpression	ch2 == '['		5241320	0		==			
ANR	5241468	Identifier	ch2		5241320	0					
ANR	5241469	PrimaryExpression	'['		5241320	1					
ANR	5241470	CompoundStatement		25:26:482:482	5241320	1					
ANR	5241471	ForStatement	for ( ++ i ; ( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' ; i ++ )		5241320	0					
ANR	5241472	ForInit	++ i ;	200:9:4169:4172	5241320	0	True				
ANR	5241473	UnaryExpression	++ i		5241320	0					
ANR	5241474	IncDec	++		5241320	0					
ANR	5241475	Identifier	i		5241320	1					
ANR	5241476	Condition	( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'	200:14:4174:4247	5241320	1	True				
ANR	5241477	AndExpression	( i < str_len ) && str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		5241320	0		&&			
ANR	5241478	RelationalExpression	i < str_len		5241320	0		<			
ANR	5241479	Identifier	i		5241320	0					
ANR	5241480	Identifier	str_len		5241320	1					
ANR	5241481	AndExpression	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		5241320	1		&&			
ANR	5241482	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241483	Identifier	str		5241320	0					
ANR	5241484	Identifier	i		5241320	1					
ANR	5241485	AndExpression	str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H'		5241320	1		&&			
ANR	5241486	EqualityExpression	str [ i ] != 'J'		5241320	0		!=			
ANR	5241487	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241488	Identifier	str		5241320	0					
ANR	5241489	Identifier	i		5241320	1					
ANR	5241490	PrimaryExpression	'J'		5241320	1					
ANR	5241491	AndExpression	str [ i ] != 'm' && str [ i ] != 'H'		5241320	1		&&			
ANR	5241492	EqualityExpression	str [ i ] != 'm'		5241320	0		!=			
ANR	5241493	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241494	Identifier	str		5241320	0					
ANR	5241495	Identifier	i		5241320	1					
ANR	5241496	PrimaryExpression	'm'		5241320	1					
ANR	5241497	EqualityExpression	str [ i ] != 'H'		5241320	1		!=			
ANR	5241498	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241499	Identifier	str		5241320	0					
ANR	5241500	Identifier	i		5241320	1					
ANR	5241501	PrimaryExpression	'H'		5241320	1					
ANR	5241502	PostIncDecOperationExpression	i ++	201:5:4255:4257	5241320	2	True				
ANR	5241503	Identifier	i		5241320	0					
ANR	5241504	IncDec	++		5241320	1					
ANR	5241505	CompoundStatement		27:10:584:584	5241320	3					
ANR	5241506	ExpressionStatement		202:5:4267:4267	5241320	0	True				
ANR	5241507	ElseStatement	else		5241320	0					
ANR	5241508	IfStatement	if ( ( str [ i ] & 0xc0 ) != 0x80 )		5241320	0					
ANR	5241509	Condition	( str [ i ] & 0xc0 ) != 0x80	205:13:4293:4315	5241320	0	True				
ANR	5241510	EqualityExpression	( str [ i ] & 0xc0 ) != 0x80		5241320	0		!=			
ANR	5241511	BitAndExpression	str [ i ] & 0xc0		5241320	0		&			
ANR	5241512	ArrayIndexing	str [ i ]		5241320	0					
ANR	5241513	Identifier	str		5241320	0					
ANR	5241514	Identifier	i		5241320	1					
ANR	5241515	PrimaryExpression	0xc0		5241320	1					
ANR	5241516	PrimaryExpression	0x80		5241320	1					
ANR	5241517	CompoundStatement		31:38:642:642	5241320	1					
ANR	5241518	ExpressionStatement	len ++	206:3:4323:4328	5241320	0	True				
ANR	5241519	PostIncDecOperationExpression	len ++		5241320	0					
ANR	5241520	Identifier	len		5241320	0					
ANR	5241521	IncDec	++		5241320	1					
ANR	5241522	ExpressionStatement	i ++	208:2:4336:4339	5241320	3	True				
ANR	5241523	PostIncDecOperationExpression	i ++		5241320	0					
ANR	5241524	Identifier	i		5241320	0					
ANR	5241525	IncDec	++		5241320	1					
ANR	5241526	ExpressionStatement	back = i	209:2:4343:4351	5241320	4	True				
ANR	5241527	AssignmentExpression	back = i		5241320	0		=			
ANR	5241528	Identifier	back		5241320	0					
ANR	5241529	Identifier	i		5241320	1					
ANR	5241530	ExpressionStatement	str [ back ] = 0	211:1:4392:4405	5241320	6	True				
ANR	5241531	AssignmentExpression	str [ back ] = 0		5241320	0		=			
ANR	5241532	ArrayIndexing	str [ back ]		5241320	0					
ANR	5241533	Identifier	str		5241320	0					
ANR	5241534	Identifier	back		5241320	1					
ANR	5241535	PrimaryExpression	0		5241320	1					
ANR	5241536	ReturnStatement	return back ;	212:1:4408:4419	5241320	7	True				
ANR	5241537	Identifier	back		5241320	0					
ANR	5241538	ReturnType	R_API int		5241320	1					
ANR	5241539	Identifier	r_str_ansi_trim		5241320	2					
ANR	5241540	ParameterList	"char * str , int str_len , int n"		5241320	3					
ANR	5241541	Parameter	char * str	175:26:3644:3652	5241320	0	True				
ANR	5241542	ParameterType	char *		5241320	0					
ANR	5241543	Identifier	str		5241320	1					
ANR	5241544	Parameter	int str_len	175:37:3655:3665	5241320	1	True				
ANR	5241545	ParameterType	int		5241320	0					
ANR	5241546	Identifier	str_len		5241320	1					
ANR	5241547	Parameter	int n	175:50:3668:3672	5241320	2	True				
ANR	5241548	ParameterType	int		5241320	0					
ANR	5241549	Identifier	n		5241320	1					
ANR	5241550	CFGEntryNode	ENTRY		5241320		True				
ANR	5241551	CFGExitNode	EXIT		5241320		True				
ANR	5241552	Symbol	* str_len		5241320						
ANR	5241553	Symbol	* back		5241320						
ANR	5241554	Symbol	ch		5241320						
ANR	5241555	Symbol	back		5241320						
ANR	5241556	Symbol	i		5241320						
ANR	5241557	Symbol	ch2		5241320						
ANR	5241558	Symbol	n		5241320						
ANR	5241559	Symbol	str		5241320						
ANR	5241560	Symbol	strlen		5241320						
ANR	5241561	Symbol	strncmp		5241320						
ANR	5241562	Symbol	* i		5241320						
ANR	5241563	Symbol	len		5241320						
ANR	5241564	Symbol	str_len		5241320						
ANR	5241565	Symbol	* str		5241320						
