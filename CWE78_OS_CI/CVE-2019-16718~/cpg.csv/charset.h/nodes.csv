command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	767908	File	data/converged/CVE-2019-16718~_radare2/charset.h								
ANR	767909	DeclStmt									
ANR	767910	Decl							grub_ssize_t	"grub_ssize_t ( grub_uint16_t * dest , grub_size_t destsize , const grub_uint8_t * src , grub_size_t srcsize , const grub_uint8_t * * srcend )"	grub_utf8_to_utf16
ANR	767911	Function	grub_utf16_to_utf8	51:0:1795:2994							
ANR	767912	FunctionDef	"grub_utf16_to_utf8 (grub_uint8_t * dest , grub_uint16_t * src , grub_size_t size)"		767911	0					
ANR	767913	CompoundStatement		54:0:1908:2994	767911	0					
ANR	767914	IdentifierDeclStatement	grub_uint32_t code_high = 0 ;	55:2:1912:1939	767911	0	True				
ANR	767915	IdentifierDecl	code_high = 0		767911	0					
ANR	767916	IdentifierDeclType	grub_uint32_t		767911	0					
ANR	767917	Identifier	code_high		767911	1					
ANR	767918	AssignmentExpression	code_high = 0		767911	2		=			
ANR	767919	Identifier	code_high		767911	0					
ANR	767920	PrimaryExpression	0		767911	1					
ANR	767921	WhileStatement	while ( size -- )		767911	1					
ANR	767922	Condition	size --	57:9:1951:1956	767911	0	True				
ANR	767923	PostIncDecOperationExpression	size --		767911	0					
ANR	767924	Identifier	size		767911	0					
ANR	767925	IncDec	--		767911	1					
ANR	767926	CompoundStatement		6:6:62:89	767911	1					
ANR	767927	IdentifierDeclStatement	grub_uint32_t code = * src ++ ;	59:6:1971:1998	767911	0	True				
ANR	767928	IdentifierDecl	code = * src ++		767911	0					
ANR	767929	IdentifierDeclType	grub_uint32_t		767911	0					
ANR	767930	Identifier	code		767911	1					
ANR	767931	AssignmentExpression	code = * src ++		767911	2		=			
ANR	767932	Identifier	code		767911	0					
ANR	767933	UnaryOperationExpression	* src ++		767911	1					
ANR	767934	UnaryOperator	*		767911	0					
ANR	767935	PostIncDecOperationExpression	src ++		767911	1					
ANR	767936	Identifier	src		767911	0					
ANR	767937	IncDec	++		767911	1					
ANR	767938	IfStatement	if ( code_high )		767911	1					
ANR	767939	Condition	code_high	61:10:2011:2019	767911	0	True				
ANR	767940	Identifier	code_high		767911	0					
ANR	767941	CompoundStatement		9:1:114:114	767911	1					
ANR	767942	IfStatement	if ( code >= 0xDC00 && code <= 0xDFFF )		767911	0					
ANR	767943	Condition	code >= 0xDC00 && code <= 0xDFFF	63:7:2032:2063	767911	0	True				
ANR	767944	AndExpression	code >= 0xDC00 && code <= 0xDFFF		767911	0		&&			
ANR	767945	RelationalExpression	code >= 0xDC00		767911	0		>=			
ANR	767946	Identifier	code		767911	0					
ANR	767947	PrimaryExpression	0xDC00		767911	1					
ANR	767948	RelationalExpression	code <= 0xDFFF		767911	1		<=			
ANR	767949	Identifier	code		767911	0					
ANR	767950	PrimaryExpression	0xDFFF		767911	1					
ANR	767951	CompoundStatement		11:5:162:162	767911	1					
ANR	767952	ExpressionStatement	code = ( ( code_high - 0xD800 ) << 12 ) + ( code - 0xDC00 ) + 0x10000	66:7:2110:2173	767911	0	True				
ANR	767953	AssignmentExpression	code = ( ( code_high - 0xD800 ) << 12 ) + ( code - 0xDC00 ) + 0x10000		767911	0		=			
ANR	767954	Identifier	code		767911	0					
ANR	767955	AdditiveExpression	( ( code_high - 0xD800 ) << 12 ) + ( code - 0xDC00 ) + 0x10000		767911	1		+			
ANR	767956	ShiftExpression	( code_high - 0xD800 ) << 12		767911	0		<<			
ANR	767957	AdditiveExpression	code_high - 0xD800		767911	0		-			
ANR	767958	Identifier	code_high		767911	0					
ANR	767959	PrimaryExpression	0xD800		767911	1					
ANR	767960	PrimaryExpression	12		767911	1					
ANR	767961	AdditiveExpression	( code - 0xDC00 ) + 0x10000		767911	1		+			
ANR	767962	AdditiveExpression	code - 0xDC00		767911	0		-			
ANR	767963	Identifier	code		767911	0					
ANR	767964	PrimaryExpression	0xDC00		767911	1					
ANR	767965	PrimaryExpression	0x10000		767911	1					
ANR	767966	ExpressionStatement	* dest ++ = ( code >> 18 ) | 0xF0	68:7:2183:2212	767911	1	True				
ANR	767967	AssignmentExpression	* dest ++ = ( code >> 18 ) | 0xF0		767911	0		=			
ANR	767968	UnaryOperationExpression	* dest ++		767911	0					
ANR	767969	UnaryOperator	*		767911	0					
ANR	767970	PostIncDecOperationExpression	dest ++		767911	1					
ANR	767971	Identifier	dest		767911	0					
ANR	767972	IncDec	++		767911	1					
ANR	767973	InclusiveOrExpression	( code >> 18 ) | 0xF0		767911	1		|			
ANR	767974	ShiftExpression	code >> 18		767911	0		>>			
ANR	767975	Identifier	code		767911	0					
ANR	767976	PrimaryExpression	18		767911	1					
ANR	767977	PrimaryExpression	0xF0		767911	1					
ANR	767978	ExpressionStatement	* dest ++ = ( ( code >> 12 ) & 0x3F ) | 0x80	69:7:2221:2259	767911	2	True				
ANR	767979	AssignmentExpression	* dest ++ = ( ( code >> 12 ) & 0x3F ) | 0x80		767911	0		=			
ANR	767980	UnaryOperationExpression	* dest ++		767911	0					
ANR	767981	UnaryOperator	*		767911	0					
ANR	767982	PostIncDecOperationExpression	dest ++		767911	1					
ANR	767983	Identifier	dest		767911	0					
ANR	767984	IncDec	++		767911	1					
ANR	767985	InclusiveOrExpression	( ( code >> 12 ) & 0x3F ) | 0x80		767911	1		|			
ANR	767986	BitAndExpression	( code >> 12 ) & 0x3F		767911	0		&			
ANR	767987	ShiftExpression	code >> 12		767911	0		>>			
ANR	767988	Identifier	code		767911	0					
ANR	767989	PrimaryExpression	12		767911	1					
ANR	767990	PrimaryExpression	0x3F		767911	1					
ANR	767991	PrimaryExpression	0x80		767911	1					
ANR	767992	ExpressionStatement	* dest ++ = ( ( code >> 6 ) & 0x3F ) | 0x80	70:7:2268:2305	767911	3	True				
ANR	767993	AssignmentExpression	* dest ++ = ( ( code >> 6 ) & 0x3F ) | 0x80		767911	0		=			
ANR	767994	UnaryOperationExpression	* dest ++		767911	0					
ANR	767995	UnaryOperator	*		767911	0					
ANR	767996	PostIncDecOperationExpression	dest ++		767911	1					
ANR	767997	Identifier	dest		767911	0					
ANR	767998	IncDec	++		767911	1					
ANR	767999	InclusiveOrExpression	( ( code >> 6 ) & 0x3F ) | 0x80		767911	1		|			
ANR	768000	BitAndExpression	( code >> 6 ) & 0x3F		767911	0		&			
ANR	768001	ShiftExpression	code >> 6		767911	0		>>			
ANR	768002	Identifier	code		767911	0					
ANR	768003	PrimaryExpression	6		767911	1					
ANR	768004	PrimaryExpression	0x3F		767911	1					
ANR	768005	PrimaryExpression	0x80		767911	1					
ANR	768006	ExpressionStatement	* dest ++ = ( code & 0x3F ) | 0x80	71:7:2314:2344	767911	4	True				
ANR	768007	AssignmentExpression	* dest ++ = ( code & 0x3F ) | 0x80		767911	0		=			
ANR	768008	UnaryOperationExpression	* dest ++		767911	0					
ANR	768009	UnaryOperator	*		767911	0					
ANR	768010	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768011	Identifier	dest		767911	0					
ANR	768012	IncDec	++		767911	1					
ANR	768013	InclusiveOrExpression	( code & 0x3F ) | 0x80		767911	1		|			
ANR	768014	BitAndExpression	code & 0x3F		767911	0		&			
ANR	768015	Identifier	code		767911	0					
ANR	768016	PrimaryExpression	0x3F		767911	1					
ANR	768017	PrimaryExpression	0x80		767911	1					
ANR	768018	ElseStatement	else		767911	0					
ANR	768019	CompoundStatement		21:5:457:457	767911	0					
ANR	768020	ExpressionStatement	* dest ++ = '?'	76:7:2398:2411	767911	0	True				
ANR	768021	AssignmentExpression	* dest ++ = '?'		767911	0		=			
ANR	768022	UnaryOperationExpression	* dest ++		767911	0					
ANR	768023	UnaryOperator	*		767911	0					
ANR	768024	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768025	Identifier	dest		767911	0					
ANR	768026	IncDec	++		767911	1					
ANR	768027	PrimaryExpression	'?'		767911	1					
ANR	768028	ExpressionStatement	code_high = 0	79:3:2424:2437	767911	1	True				
ANR	768029	AssignmentExpression	code_high = 0		767911	0		=			
ANR	768030	Identifier	code_high		767911	0					
ANR	768031	PrimaryExpression	0		767911	1					
ANR	768032	ElseStatement	else		767911	0					
ANR	768033	CompoundStatement		29:1:545:545	767911	0					
ANR	768034	IfStatement	if ( code <= 0x007F )		767911	0					
ANR	768035	Condition	code <= 0x007F	83:7:2463:2476	767911	0	True				
ANR	768036	RelationalExpression	code <= 0x007F		767911	0		<=			
ANR	768037	Identifier	code		767911	0					
ANR	768038	PrimaryExpression	0x007F		767911	1					
ANR	768039	ExpressionStatement	* dest ++ = code	84:5:2484:2498	767911	1	True				
ANR	768040	AssignmentExpression	* dest ++ = code		767911	0		=			
ANR	768041	UnaryOperationExpression	* dest ++		767911	0					
ANR	768042	UnaryOperator	*		767911	0					
ANR	768043	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768044	Identifier	dest		767911	0					
ANR	768045	IncDec	++		767911	1					
ANR	768046	Identifier	code		767911	1					
ANR	768047	ElseStatement	else		767911	0					
ANR	768048	IfStatement	if ( code <= 0x07FF )		767911	0					
ANR	768049	Condition	code <= 0x07FF	85:12:2512:2525	767911	0	True				
ANR	768050	RelationalExpression	code <= 0x07FF		767911	0		<=			
ANR	768051	Identifier	code		767911	0					
ANR	768052	PrimaryExpression	0x07FF		767911	1					
ANR	768053	CompoundStatement		33:5:624:624	767911	1					
ANR	768054	ExpressionStatement	* dest ++ = ( code >> 6 ) | 0xC0	87:7:2542:2570	767911	0	True				
ANR	768055	AssignmentExpression	* dest ++ = ( code >> 6 ) | 0xC0		767911	0		=			
ANR	768056	UnaryOperationExpression	* dest ++		767911	0					
ANR	768057	UnaryOperator	*		767911	0					
ANR	768058	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768059	Identifier	dest		767911	0					
ANR	768060	IncDec	++		767911	1					
ANR	768061	InclusiveOrExpression	( code >> 6 ) | 0xC0		767911	1		|			
ANR	768062	ShiftExpression	code >> 6		767911	0		>>			
ANR	768063	Identifier	code		767911	0					
ANR	768064	PrimaryExpression	6		767911	1					
ANR	768065	PrimaryExpression	0xC0		767911	1					
ANR	768066	ExpressionStatement	* dest ++ = ( code & 0x3F ) | 0x80	88:7:2579:2609	767911	1	True				
ANR	768067	AssignmentExpression	* dest ++ = ( code & 0x3F ) | 0x80		767911	0		=			
ANR	768068	UnaryOperationExpression	* dest ++		767911	0					
ANR	768069	UnaryOperator	*		767911	0					
ANR	768070	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768071	Identifier	dest		767911	0					
ANR	768072	IncDec	++		767911	1					
ANR	768073	InclusiveOrExpression	( code & 0x3F ) | 0x80		767911	1		|			
ANR	768074	BitAndExpression	code & 0x3F		767911	0		&			
ANR	768075	Identifier	code		767911	0					
ANR	768076	PrimaryExpression	0x3F		767911	1					
ANR	768077	PrimaryExpression	0x80		767911	1					
ANR	768078	ElseStatement	else		767911	0					
ANR	768079	IfStatement	if ( code >= 0xD800 && code <= 0xDBFF )		767911	0					
ANR	768080	Condition	code >= 0xD800 && code <= 0xDBFF	90:12:2630:2661	767911	0	True				
ANR	768081	AndExpression	code >= 0xD800 && code <= 0xDBFF		767911	0		&&			
ANR	768082	RelationalExpression	code >= 0xD800		767911	0		>=			
ANR	768083	Identifier	code		767911	0					
ANR	768084	PrimaryExpression	0xD800		767911	1					
ANR	768085	RelationalExpression	code <= 0xDBFF		767911	1		<=			
ANR	768086	Identifier	code		767911	0					
ANR	768087	PrimaryExpression	0xDBFF		767911	1					
ANR	768088	CompoundStatement		38:5:760:760	767911	1					
ANR	768089	ExpressionStatement	code_high = code	92:7:2678:2694	767911	0	True				
ANR	768090	AssignmentExpression	code_high = code		767911	0		=			
ANR	768091	Identifier	code_high		767911	0					
ANR	768092	Identifier	code		767911	1					
ANR	768093	ContinueStatement	continue ;	93:7:2703:2711	767911	1	True				
ANR	768094	ElseStatement	else		767911	0					
ANR	768095	IfStatement	if ( code >= 0xDC00 && code <= 0xDFFF )		767911	0					
ANR	768096	Condition	code >= 0xDC00 && code <= 0xDFFF	95:12:2732:2763	767911	0	True				
ANR	768097	AndExpression	code >= 0xDC00 && code <= 0xDFFF		767911	0		&&			
ANR	768098	RelationalExpression	code >= 0xDC00		767911	0		>=			
ANR	768099	Identifier	code		767911	0					
ANR	768100	PrimaryExpression	0xDC00		767911	1					
ANR	768101	RelationalExpression	code <= 0xDFFF		767911	1		<=			
ANR	768102	Identifier	code		767911	0					
ANR	768103	PrimaryExpression	0xDFFF		767911	1					
ANR	768104	CompoundStatement		43:5:862:862	767911	1					
ANR	768105	ExpressionStatement	* dest ++ = '?'	98:7:2802:2815	767911	0	True				
ANR	768106	AssignmentExpression	* dest ++ = '?'		767911	0		=			
ANR	768107	UnaryOperationExpression	* dest ++		767911	0					
ANR	768108	UnaryOperator	*		767911	0					
ANR	768109	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768110	Identifier	dest		767911	0					
ANR	768111	IncDec	++		767911	1					
ANR	768112	PrimaryExpression	'?'		767911	1					
ANR	768113	ElseStatement	else		767911	0					
ANR	768114	CompoundStatement		48:5:928:928	767911	0					
ANR	768115	ExpressionStatement	* dest ++ = ( code >> 12 ) | 0xE0	102:7:2846:2875	767911	0	True				
ANR	768116	AssignmentExpression	* dest ++ = ( code >> 12 ) | 0xE0		767911	0		=			
ANR	768117	UnaryOperationExpression	* dest ++		767911	0					
ANR	768118	UnaryOperator	*		767911	0					
ANR	768119	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768120	Identifier	dest		767911	0					
ANR	768121	IncDec	++		767911	1					
ANR	768122	InclusiveOrExpression	( code >> 12 ) | 0xE0		767911	1		|			
ANR	768123	ShiftExpression	code >> 12		767911	0		>>			
ANR	768124	Identifier	code		767911	0					
ANR	768125	PrimaryExpression	12		767911	1					
ANR	768126	PrimaryExpression	0xE0		767911	1					
ANR	768127	ExpressionStatement	* dest ++ = ( ( code >> 6 ) & 0x3F ) | 0x80	103:7:2884:2921	767911	1	True				
ANR	768128	AssignmentExpression	* dest ++ = ( ( code >> 6 ) & 0x3F ) | 0x80		767911	0		=			
ANR	768129	UnaryOperationExpression	* dest ++		767911	0					
ANR	768130	UnaryOperator	*		767911	0					
ANR	768131	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768132	Identifier	dest		767911	0					
ANR	768133	IncDec	++		767911	1					
ANR	768134	InclusiveOrExpression	( ( code >> 6 ) & 0x3F ) | 0x80		767911	1		|			
ANR	768135	BitAndExpression	( code >> 6 ) & 0x3F		767911	0		&			
ANR	768136	ShiftExpression	code >> 6		767911	0		>>			
ANR	768137	Identifier	code		767911	0					
ANR	768138	PrimaryExpression	6		767911	1					
ANR	768139	PrimaryExpression	0x3F		767911	1					
ANR	768140	PrimaryExpression	0x80		767911	1					
ANR	768141	ExpressionStatement	* dest ++ = ( code & 0x3F ) | 0x80	104:7:2930:2960	767911	2	True				
ANR	768142	AssignmentExpression	* dest ++ = ( code & 0x3F ) | 0x80		767911	0		=			
ANR	768143	UnaryOperationExpression	* dest ++		767911	0					
ANR	768144	UnaryOperator	*		767911	0					
ANR	768145	PostIncDecOperationExpression	dest ++		767911	1					
ANR	768146	Identifier	dest		767911	0					
ANR	768147	IncDec	++		767911	1					
ANR	768148	InclusiveOrExpression	( code & 0x3F ) | 0x80		767911	1		|			
ANR	768149	BitAndExpression	code & 0x3F		767911	0		&			
ANR	768150	Identifier	code		767911	0					
ANR	768151	PrimaryExpression	0x3F		767911	1					
ANR	768152	PrimaryExpression	0x80		767911	1					
ANR	768153	ReturnStatement	return dest ;	109:2:2981:2992	767911	2	True				
ANR	768154	Identifier	dest		767911	0					
ANR	768155	ReturnType	static inline grub_uint8_t *		767911	1					
ANR	768156	Identifier	grub_utf16_to_utf8		767911	2					
ANR	768157	ParameterList	"grub_uint8_t * dest , grub_uint16_t * src , grub_size_t size"		767911	3					
ANR	768158	Parameter	grub_uint8_t * dest	52:20:1844:1861	767911	0	True				
ANR	768159	ParameterType	grub_uint8_t *		767911	0					
ANR	768160	Identifier	dest		767911	1					
ANR	768161	Parameter	grub_uint16_t * src	52:40:1864:1881	767911	1	True				
ANR	768162	ParameterType	grub_uint16_t *		767911	0					
ANR	768163	Identifier	src		767911	1					
ANR	768164	Parameter	grub_size_t size	53:6:1890:1905	767911	2	True				
ANR	768165	ParameterType	grub_size_t		767911	0					
ANR	768166	Identifier	size		767911	1					
ANR	768167	CFGEntryNode	ENTRY		767911		True				
ANR	768168	CFGExitNode	EXIT		767911		True				
ANR	768169	Symbol	code		767911						
ANR	768170	Symbol	size		767911						
ANR	768171	Symbol	src		767911						
ANR	768172	Symbol	* src ++		767911						
ANR	768173	Symbol	code_high		767911						
ANR	768174	Symbol	* dest ++		767911						
ANR	768175	Symbol	dest		767911						
ANR	768176	DeclStmt									
ANR	768177	Decl							char	"char * ( grub_uint32_t * src , grub_size_t size )"	grub_ucs4_to_utf8_alloc
ANR	768178	DeclStmt									
ANR	768179	Decl							int	"int ( const grub_uint8_t * src , grub_size_t srcsize )"	grub_is_valid_utf8
ANR	768180	DeclStmt									
ANR	768181	Decl							int	"int ( const char * msg , grub_uint32_t * * unicode_msg , grub_uint32_t * * last_position )"	grub_utf8_to_ucs4_alloc
