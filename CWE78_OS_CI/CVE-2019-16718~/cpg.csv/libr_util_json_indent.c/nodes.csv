command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5150789	File	data/converged/CVE-2019-16718~_radare2/libr_util_json_indent.c								
ANR	5150790	Function	doIndent	6:0:86:251							
ANR	5150791	FunctionDef	"doIndent (int idt , char * * o , const char * tab)"		5150790	0					
ANR	5150792	CompoundStatement		6:57:143:251	5150790	0					
ANR	5150793	IdentifierDeclStatement	int i ;	7:1:146:151	5150790	0	True				
ANR	5150794	IdentifierDecl	i		5150790	0					
ANR	5150795	IdentifierDeclType	int		5150790	0					
ANR	5150796	Identifier	i		5150790	1					
ANR	5150797	IdentifierDeclStatement	char * x ;	8:1:154:161	5150790	1	True				
ANR	5150798	IdentifierDecl	* x		5150790	0					
ANR	5150799	IdentifierDeclType	char *		5150790	0					
ANR	5150800	Identifier	x		5150790	1					
ANR	5150801	ForStatement	for ( i = 0 ; i < idt ; i ++ )		5150790	2					
ANR	5150802	ForInit	i = 0 ;	9:6:169:174	5150790	0	True				
ANR	5150803	AssignmentExpression	i = 0		5150790	0		=			
ANR	5150804	Identifier	i		5150790	0					
ANR	5150805	PrimaryExpression	0		5150790	1					
ANR	5150806	Condition	i < idt	9:13:176:182	5150790	1	True				
ANR	5150807	RelationalExpression	i < idt		5150790	0		<			
ANR	5150808	Identifier	i		5150790	0					
ANR	5150809	Identifier	idt		5150790	1					
ANR	5150810	PostIncDecOperationExpression	i ++	9:22:185:187	5150790	2	True				
ANR	5150811	Identifier	i		5150790	0					
ANR	5150812	IncDec	++		5150790	1					
ANR	5150813	CompoundStatement		4:27:46:46	5150790	3					
ANR	5150814	ForStatement	for ( x = ( char * ) tab ; * x ; x ++ )		5150790	0					
ANR	5150815	ForInit	x = ( char * ) tab ;	10:7:199:214	5150790	0	True				
ANR	5150816	AssignmentExpression	x = ( char * ) tab		5150790	0		=			
ANR	5150817	Identifier	x		5150790	0					
ANR	5150818	CastExpression	( char * ) tab		5150790	1					
ANR	5150819	CastTarget	char *		5150790	0					
ANR	5150820	Identifier	tab		5150790	1					
ANR	5150821	Condition	* x	10:24:216:217	5150790	1	True				
ANR	5150822	UnaryOperationExpression	* x		5150790	0					
ANR	5150823	UnaryOperator	*		5150790	0					
ANR	5150824	Identifier	x		5150790	1					
ANR	5150825	PostIncDecOperationExpression	x ++	10:28:220:222	5150790	2	True				
ANR	5150826	Identifier	x		5150790	0					
ANR	5150827	IncDec	++		5150790	1					
ANR	5150828	CompoundStatement		5:33:81:81	5150790	3					
ANR	5150829	ExpressionStatement	* ( * o ) ++ = * x	11:3:230:242	5150790	0	True				
ANR	5150830	AssignmentExpression	* ( * o ) ++ = * x		5150790	0		=			
ANR	5150831	UnaryOperationExpression	* ( * o ) ++		5150790	0					
ANR	5150832	UnaryOperator	*		5150790	0					
ANR	5150833	PostIncDecOperationExpression	( * o ) ++		5150790	1					
ANR	5150834	UnaryOperationExpression	* o		5150790	0					
ANR	5150835	UnaryOperator	*		5150790	0					
ANR	5150836	Identifier	o		5150790	1					
ANR	5150837	IncDec	++		5150790	1					
ANR	5150838	UnaryOperationExpression	* x		5150790	1					
ANR	5150839	UnaryOperator	*		5150790	0					
ANR	5150840	Identifier	x		5150790	1					
ANR	5150841	ReturnType	static void		5150790	1					
ANR	5150842	Identifier	doIndent		5150790	2					
ANR	5150843	ParameterList	"int idt , char * * o , const char * tab"		5150790	3					
ANR	5150844	Parameter	int idt	6:21:107:113	5150790	0	True				
ANR	5150845	ParameterType	int		5150790	0					
ANR	5150846	Identifier	idt		5150790	1					
ANR	5150847	Parameter	char * * o	6:30:116:123	5150790	1	True				
ANR	5150848	ParameterType	char * *		5150790	0					
ANR	5150849	Identifier	o		5150790	1					
ANR	5150850	Parameter	const char * tab	6:40:126:140	5150790	2	True				
ANR	5150851	ParameterType	const char *		5150790	0					
ANR	5150852	Identifier	tab		5150790	1					
ANR	5150853	CFGEntryNode	ENTRY		5150790		True				
ANR	5150854	CFGExitNode	EXIT		5150790		True				
ANR	5150855	Symbol	* x		5150790						
ANR	5150856	Symbol	tab		5150790						
ANR	5150857	Symbol	* ( * o ) ++		5150790						
ANR	5150858	Symbol	idt		5150790						
ANR	5150859	Symbol	x		5150790						
ANR	5150860	Symbol	i		5150790						
ANR	5150861	Symbol	* o		5150790						
ANR	5150862	Symbol	o		5150790						
ANR	5150863	DeclStmt									
ANR	5150864	Decl							const char	const char *	p
ANR	5150865	ClassDef	<unnamed>	25:0:408:493							
ANR	5150866	DeclStmt									
ANR	5150867	Decl							const char	const char * [ ]	origColors
ANR	5150868	Function	r_print_json_path	42:0:629:2574							
ANR	5150869	FunctionDef	"r_print_json_path (const char * s , int pos)"		5150868	0					
ANR	5150870	CompoundStatement		42:54:683:2574	5150868	0					
ANR	5150871	IdentifierDeclStatement	int indent = 0 ;	43:1:686:700	5150868	0	True				
ANR	5150872	IdentifierDecl	indent = 0		5150868	0					
ANR	5150873	IdentifierDeclType	int		5150868	0					
ANR	5150874	Identifier	indent		5150868	1					
ANR	5150875	AssignmentExpression	indent = 0		5150868	2		=			
ANR	5150876	Identifier	indent		5150868	0					
ANR	5150877	PrimaryExpression	0		5150868	1					
ANR	5150878	Statement	define	44:1:703:708	5150868	1	True				
ANR	5150879	Statement	DSZ	44:8:710:712	5150868	2	True				
ANR	5150880	Statement	128	44:12:714:716	5150868	3	True				
ANR	5150881	IdentifierDeclStatement	const char * words [ DSZ ] = { NULL } ;	45:1:719:752	5150868	4	True				
ANR	5150882	IdentifierDecl	* words [ DSZ ] = { NULL }		5150868	0					
ANR	5150883	IdentifierDeclType	const char * [ DSZ ]		5150868	0					
ANR	5150884	Identifier	words		5150868	1					
ANR	5150885	Identifier	DSZ		5150868	2					
ANR	5150886	AssignmentExpression	* words [ DSZ ] = { NULL }		5150868	3		=			
ANR	5150887	Identifier	DSZ		5150868	0					
ANR	5150888	InitializerList	NULL		5150868	1					
ANR	5150889	Identifier	NULL		5150868	0					
ANR	5150890	IdentifierDeclStatement	int lengths [ DSZ ] = { 0 } ;	46:1:755:779	5150868	5	True				
ANR	5150891	IdentifierDecl	lengths [ DSZ ] = { 0 }		5150868	0					
ANR	5150892	IdentifierDeclType	int [ DSZ ]		5150868	0					
ANR	5150893	Identifier	lengths		5150868	1					
ANR	5150894	Identifier	DSZ		5150868	2					
ANR	5150895	AssignmentExpression	lengths [ DSZ ] = { 0 }		5150868	3		=			
ANR	5150896	Identifier	DSZ		5150868	0					
ANR	5150897	InitializerList	0		5150868	1					
ANR	5150898	PrimaryExpression	0		5150868	0					
ANR	5150899	IdentifierDeclStatement	int indexs [ DSZ ] = { 0 } ;	47:1:782:805	5150868	6	True				
ANR	5150900	IdentifierDecl	indexs [ DSZ ] = { 0 }		5150868	0					
ANR	5150901	IdentifierDeclType	int [ DSZ ]		5150868	0					
ANR	5150902	Identifier	indexs		5150868	1					
ANR	5150903	Identifier	DSZ		5150868	2					
ANR	5150904	AssignmentExpression	indexs [ DSZ ] = { 0 }		5150868	3		=			
ANR	5150905	Identifier	DSZ		5150868	0					
ANR	5150906	InitializerList	0		5150868	1					
ANR	5150907	PrimaryExpression	0		5150868	0					
ANR	5150908	IdentifierDeclStatement	int instr = 0 ;	48:1:808:821	5150868	7	True				
ANR	5150909	IdentifierDecl	instr = 0		5150868	0					
ANR	5150910	IdentifierDeclType	int		5150868	0					
ANR	5150911	Identifier	instr		5150868	1					
ANR	5150912	AssignmentExpression	instr = 0		5150868	2		=			
ANR	5150913	Identifier	instr		5150868	0					
ANR	5150914	PrimaryExpression	0		5150868	1					
ANR	5150915	IdentifierDeclStatement	bool isarr = false ;	49:1:824:842	5150868	8	True				
ANR	5150916	IdentifierDecl	isarr = false		5150868	0					
ANR	5150917	IdentifierDeclType	bool		5150868	0					
ANR	5150918	Identifier	isarr		5150868	1					
ANR	5150919	AssignmentExpression	isarr = false		5150868	2		=			
ANR	5150920	Identifier	false		5150868	0					
ANR	5150921	Identifier	false		5150868	1					
ANR	5150922	IfStatement	if ( ! s )		5150868	9					
ANR	5150923	Condition	! s	50:5:849:850	5150868	0	True				
ANR	5150924	UnaryOperationExpression	! s		5150868	0					
ANR	5150925	UnaryOperator	!		5150868	0					
ANR	5150926	Identifier	s		5150868	1					
ANR	5150927	CompoundStatement		9:9:169:169	5150868	1					
ANR	5150928	ReturnStatement	return NULL ;	51:2:857:868	5150868	0	True				
ANR	5150929	Identifier	NULL		5150868	0					
ANR	5150930	IdentifierDeclStatement	int arrpos = 0 ;	53:1:874:888	5150868	10	True				
ANR	5150931	IdentifierDecl	arrpos = 0		5150868	0					
ANR	5150932	IdentifierDeclType	int		5150868	0					
ANR	5150933	Identifier	arrpos		5150868	1					
ANR	5150934	AssignmentExpression	arrpos = 0		5150868	2		=			
ANR	5150935	Identifier	arrpos		5150868	0					
ANR	5150936	PrimaryExpression	0		5150868	1					
ANR	5150937	IdentifierDeclStatement	const char * os = s ;	54:1:891:909	5150868	11	True				
ANR	5150938	IdentifierDecl	* os = s		5150868	0					
ANR	5150939	IdentifierDeclType	const char *		5150868	0					
ANR	5150940	Identifier	os		5150868	1					
ANR	5150941	AssignmentExpression	* os = s		5150868	2		=			
ANR	5150942	Identifier	s		5150868	0					
ANR	5150943	Identifier	s		5150868	1					
ANR	5150944	IdentifierDeclStatement	int osz = ( 1 + strlen ( s ) ) * 20 ;	55:1:912:943	5150868	12	True				
ANR	5150945	IdentifierDecl	osz = ( 1 + strlen ( s ) ) * 20		5150868	0					
ANR	5150946	IdentifierDeclType	int		5150868	0					
ANR	5150947	Identifier	osz		5150868	1					
ANR	5150948	AssignmentExpression	osz = ( 1 + strlen ( s ) ) * 20		5150868	2		=			
ANR	5150949	Identifier	osz		5150868	0					
ANR	5150950	MultiplicativeExpression	( 1 + strlen ( s ) ) * 20		5150868	1		*			
ANR	5150951	AdditiveExpression	1 + strlen ( s )		5150868	0		+			
ANR	5150952	PrimaryExpression	1		5150868	0					
ANR	5150953	CallExpression	strlen ( s )		5150868	1					
ANR	5150954	Callee	strlen		5150868	0					
ANR	5150955	Identifier	strlen		5150868	0					
ANR	5150956	ArgumentList	s		5150868	1					
ANR	5150957	Argument	s		5150868	0					
ANR	5150958	Identifier	s		5150868	0					
ANR	5150959	PrimaryExpression	20		5150868	1					
ANR	5150960	IfStatement	if ( osz < 1 )		5150868	13					
ANR	5150961	Condition	osz < 1	56:5:950:956	5150868	0	True				
ANR	5150962	RelationalExpression	osz < 1		5150868	0		<			
ANR	5150963	Identifier	osz		5150868	0					
ANR	5150964	PrimaryExpression	1		5150868	1					
ANR	5150965	CompoundStatement		15:14:275:275	5150868	1					
ANR	5150966	ReturnStatement	return NULL ;	57:2:963:974	5150868	0	True				
ANR	5150967	Identifier	NULL		5150868	0					
ANR	5150968	IdentifierDeclStatement	const char * str_a = NULL ;	60:1:981:1005	5150868	14	True				
ANR	5150969	IdentifierDecl	* str_a = NULL		5150868	0					
ANR	5150970	IdentifierDeclType	const char *		5150868	0					
ANR	5150971	Identifier	str_a		5150868	1					
ANR	5150972	AssignmentExpression	* str_a = NULL		5150868	2		=			
ANR	5150973	Identifier	NULL		5150868	0					
ANR	5150974	Identifier	NULL		5150868	1					
ANR	5150975	ForStatement	for ( ; * s ; s ++ )		5150868	15					
ANR	5150976	Condition	* s	61:8:1015:1016	5150868	0	True				
ANR	5150977	UnaryOperationExpression	* s		5150868	0					
ANR	5150978	UnaryOperator	*		5150868	0					
ANR	5150979	Identifier	s		5150868	1					
ANR	5150980	PostIncDecOperationExpression	s ++	61:12:1019:1021	5150868	1	True				
ANR	5150981	Identifier	s		5150868	0					
ANR	5150982	IncDec	++		5150868	1					
ANR	5150983	CompoundStatement		20:17:340:340	5150868	2					
ANR	5150984	IfStatement	if ( instr )		5150868	0					
ANR	5150985	Condition	instr	62:6:1032:1036	5150868	0	True				
ANR	5150986	Identifier	instr		5150868	0					
ANR	5150987	CompoundStatement		21:13:355:355	5150868	1					
ANR	5150988	IfStatement	"if ( s [ 0 ] == '""' )"		5150868	0					
ANR	5150989	Condition	"s [ 0 ] == '""'"	63:7:1048:1058	5150868	0	True				
ANR	5150990	EqualityExpression	"s [ 0 ] == '""'"		5150868	0		==			
ANR	5150991	ArrayIndexing	s [ 0 ]		5150868	0					
ANR	5150992	Identifier	s		5150868	0					
ANR	5150993	PrimaryExpression	0		5150868	1					
ANR	5150994	PrimaryExpression	"'""'"		5150868	1					
ANR	5150995	CompoundStatement		24:4:398:419	5150868	1					
ANR	5150996	ExpressionStatement	instr = 0	64:4:1067:1076	5150868	0	True				
ANR	5150997	AssignmentExpression	instr = 0		5150868	0		=			
ANR	5150998	Identifier	instr		5150868	0					
ANR	5150999	PrimaryExpression	0		5150868	1					
ANR	5151000	IdentifierDeclStatement	ut64 cur = str_a - os ;	65:4:1082:1103	5150868	1	True				
ANR	5151001	IdentifierDecl	cur = str_a - os		5150868	0					
ANR	5151002	IdentifierDeclType	ut64		5150868	0					
ANR	5151003	Identifier	cur		5150868	1					
ANR	5151004	AssignmentExpression	cur = str_a - os		5150868	2		=			
ANR	5151005	Identifier	cur		5150868	0					
ANR	5151006	AdditiveExpression	str_a - os		5150868	1		-			
ANR	5151007	Identifier	str_a		5150868	0					
ANR	5151008	Identifier	os		5150868	1					
ANR	5151009	IfStatement	if ( cur > pos )		5150868	2					
ANR	5151010	Condition	cur > pos	66:8:1113:1121	5150868	0	True				
ANR	5151011	RelationalExpression	cur > pos		5150868	0		>			
ANR	5151012	Identifier	cur		5150868	0					
ANR	5151013	Identifier	pos		5150868	1					
ANR	5151014	CompoundStatement		25:19:440:440	5150868	1					
ANR	5151015	BreakStatement	break ;	67:5:1131:1136	5150868	0	True				
ANR	5151016	IfStatement	if ( indent < DSZ )		5150868	3					
ANR	5151017	Condition	indent < DSZ	69:8:1152:1163	5150868	0	True				
ANR	5151018	RelationalExpression	indent < DSZ		5150868	0		<			
ANR	5151019	Identifier	indent		5150868	0					
ANR	5151020	Identifier	DSZ		5150868	1					
ANR	5151021	CompoundStatement		28:22:482:482	5150868	1					
ANR	5151022	ExpressionStatement	words [ indent - 1 ] = str_a	70:5:1173:1198	5150868	0	True				
ANR	5151023	AssignmentExpression	words [ indent - 1 ] = str_a		5150868	0		=			
ANR	5151024	ArrayIndexing	words [ indent - 1 ]		5150868	0					
ANR	5151025	Identifier	words		5150868	0					
ANR	5151026	AdditiveExpression	indent - 1		5150868	1		-			
ANR	5151027	Identifier	indent		5150868	0					
ANR	5151028	PrimaryExpression	1		5150868	1					
ANR	5151029	Identifier	str_a		5150868	1					
ANR	5151030	ExpressionStatement	lengths [ indent - 1 ] = s - str_a	71:5:1205:1236	5150868	1	True				
ANR	5151031	AssignmentExpression	lengths [ indent - 1 ] = s - str_a		5150868	0		=			
ANR	5151032	ArrayIndexing	lengths [ indent - 1 ]		5150868	0					
ANR	5151033	Identifier	lengths		5150868	0					
ANR	5151034	AdditiveExpression	indent - 1		5150868	1		-			
ANR	5151035	Identifier	indent		5150868	0					
ANR	5151036	PrimaryExpression	1		5150868	1					
ANR	5151037	AdditiveExpression	s - str_a		5150868	1		-			
ANR	5151038	Identifier	s		5150868	0					
ANR	5151039	Identifier	str_a		5150868	1					
ANR	5151040	ExpressionStatement	indexs [ indent - 1 ] = 0	72:5:1243:1265	5150868	2	True				
ANR	5151041	AssignmentExpression	indexs [ indent - 1 ] = 0		5150868	0		=			
ANR	5151042	ArrayIndexing	indexs [ indent - 1 ]		5150868	0					
ANR	5151043	Identifier	indexs		5150868	0					
ANR	5151044	AdditiveExpression	indent - 1		5150868	1		-			
ANR	5151045	Identifier	indent		5150868	0					
ANR	5151046	PrimaryExpression	1		5150868	1					
ANR	5151047	PrimaryExpression	0		5150868	1					
ANR	5151048	ContinueStatement	continue ;	75:3:1281:1289	5150868	1	True				
ANR	5151049	IfStatement	"if ( s [ 0 ] == '""' )"		5150868	1					
ANR	5151050	Condition	"s [ 0 ] == '""'"	78:6:1302:1312	5150868	0	True				
ANR	5151051	EqualityExpression	"s [ 0 ] == '""'"		5150868	0		==			
ANR	5151052	ArrayIndexing	s [ 0 ]		5150868	0					
ANR	5151053	Identifier	s		5150868	0					
ANR	5151054	PrimaryExpression	0		5150868	1					
ANR	5151055	PrimaryExpression	"'""'"		5150868	1					
ANR	5151056	CompoundStatement		37:19:631:631	5150868	1					
ANR	5151057	ExpressionStatement	instr = 1	79:3:1320:1329	5150868	0	True				
ANR	5151058	AssignmentExpression	instr = 1		5150868	0		=			
ANR	5151059	Identifier	instr		5150868	0					
ANR	5151060	PrimaryExpression	1		5150868	1					
ANR	5151061	ExpressionStatement	str_a = s + 1	80:3:1334:1347	5150868	1	True				
ANR	5151062	AssignmentExpression	str_a = s + 1		5150868	0		=			
ANR	5151063	Identifier	str_a		5150868	0					
ANR	5151064	AdditiveExpression	s + 1		5150868	1		+			
ANR	5151065	Identifier	s		5150868	0					
ANR	5151066	PrimaryExpression	1		5150868	1					
ANR	5151067	IfStatement	if ( * s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' )		5150868	2					
ANR	5151068	Condition	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '	82:6:1359:1409	5150868	0	True				
ANR	5151069	OrExpression	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '		5150868	0		||			
ANR	5151070	EqualityExpression	* s == '\\n'		5150868	0		==			
ANR	5151071	UnaryOperationExpression	* s		5150868	0					
ANR	5151072	UnaryOperator	*		5150868	0					
ANR	5151073	Identifier	s		5150868	1					
ANR	5151074	PrimaryExpression	'\\n'		5150868	1					
ANR	5151075	OrExpression	* s == '\\r' || * s == '\\t' || * s == ' '		5150868	1		||			
ANR	5151076	EqualityExpression	* s == '\\r'		5150868	0		==			
ANR	5151077	UnaryOperationExpression	* s		5150868	0					
ANR	5151078	UnaryOperator	*		5150868	0					
ANR	5151079	Identifier	s		5150868	1					
ANR	5151080	PrimaryExpression	'\\r'		5150868	1					
ANR	5151081	OrExpression	* s == '\\t' || * s == ' '		5150868	1		||			
ANR	5151082	EqualityExpression	* s == '\\t'		5150868	0		==			
ANR	5151083	UnaryOperationExpression	* s		5150868	0					
ANR	5151084	UnaryOperator	*		5150868	0					
ANR	5151085	Identifier	s		5150868	1					
ANR	5151086	PrimaryExpression	'\\t'		5150868	1					
ANR	5151087	EqualityExpression	* s == ' '		5150868	1		==			
ANR	5151088	UnaryOperationExpression	* s		5150868	0					
ANR	5151089	UnaryOperator	*		5150868	0					
ANR	5151090	Identifier	s		5150868	1					
ANR	5151091	PrimaryExpression	' '		5150868	1					
ANR	5151092	CompoundStatement		41:59:728:728	5150868	1					
ANR	5151093	ContinueStatement	continue ;	83:3:1417:1425	5150868	0	True				
ANR	5151094	SwitchStatement	switch ( * s )		5150868	3					
ANR	5151095	Condition	* s	85:10:1441:1442	5150868	0	True				
ANR	5151096	UnaryOperationExpression	* s		5150868	0					
ANR	5151097	UnaryOperator	*		5150868	0					
ANR	5151098	Identifier	s		5150868	1					
ANR	5151099	CompoundStatement		44:14:761:761	5150868	1					
ANR	5151100	Label	case ':' :	86:2:1449:1457	5150868	0	True				
ANR	5151101	BreakStatement	break ;	87:3:1462:1467	5150868	1	True				
ANR	5151102	Label	"case ',' :"	88:2:1471:1479	5150868	2	True				
ANR	5151103	IfStatement	if ( isarr )		5150868	3					
ANR	5151104	Condition	isarr	89:7:1488:1492	5150868	0	True				
ANR	5151105	Identifier	isarr		5150868	0					
ANR	5151106	CompoundStatement		48:14:811:811	5150868	1					
ANR	5151107	ExpressionStatement	arrpos ++	90:4:1501:1510	5150868	0	True				
ANR	5151108	PostIncDecOperationExpression	arrpos ++		5150868	0					
ANR	5151109	Identifier	arrpos		5150868	0					
ANR	5151110	IncDec	++		5150868	1					
ANR	5151111	IfStatement	if ( indent < DSZ )		5150868	1					
ANR	5151112	Condition	indent < DSZ	91:8:1520:1531	5150868	0	True				
ANR	5151113	RelationalExpression	indent < DSZ		5150868	0		<			
ANR	5151114	Identifier	indent		5150868	0					
ANR	5151115	Identifier	DSZ		5150868	1					
ANR	5151116	CompoundStatement		50:22:850:850	5150868	1					
ANR	5151117	ExpressionStatement	indexs [ indent - 1 ] = arrpos	92:5:1541:1568	5150868	0	True				
ANR	5151118	AssignmentExpression	indexs [ indent - 1 ] = arrpos		5150868	0		=			
ANR	5151119	ArrayIndexing	indexs [ indent - 1 ]		5150868	0					
ANR	5151120	Identifier	indexs		5150868	0					
ANR	5151121	AdditiveExpression	indent - 1		5150868	1		-			
ANR	5151122	Identifier	indent		5150868	0					
ANR	5151123	PrimaryExpression	1		5150868	1					
ANR	5151124	Identifier	arrpos		5150868	1					
ANR	5151125	ExpressionStatement	lengths [ indent - 1 ] = ( s - os )	93:5:1575:1605	5150868	1	True				
ANR	5151126	AssignmentExpression	lengths [ indent - 1 ] = ( s - os )		5150868	0		=			
ANR	5151127	ArrayIndexing	lengths [ indent - 1 ]		5150868	0					
ANR	5151128	Identifier	lengths		5150868	0					
ANR	5151129	AdditiveExpression	indent - 1		5150868	1		-			
ANR	5151130	Identifier	indent		5150868	0					
ANR	5151131	PrimaryExpression	1		5150868	1					
ANR	5151132	AdditiveExpression	s - os		5150868	1		-			
ANR	5151133	Identifier	s		5150868	0					
ANR	5151134	Identifier	os		5150868	1					
ANR	5151135	BreakStatement	break ;	96:3:1621:1626	5150868	4	True				
ANR	5151136	Label	case '{' :	97:2:1630:1638	5150868	5	True				
ANR	5151137	Label	case '[' :	98:2:1642:1650	5150868	6	True				
ANR	5151138	IfStatement	if ( * s == '[' )		5150868	7					
ANR	5151139	Condition	* s == '['	99:7:1659:1667	5150868	0	True				
ANR	5151140	EqualityExpression	* s == '['		5150868	0		==			
ANR	5151141	UnaryOperationExpression	* s		5150868	0					
ANR	5151142	UnaryOperator	*		5150868	0					
ANR	5151143	Identifier	s		5150868	1					
ANR	5151144	PrimaryExpression	'['		5150868	1					
ANR	5151145	CompoundStatement		58:18:986:986	5150868	1					
ANR	5151146	ExpressionStatement	isarr = true	100:4:1676:1688	5150868	0	True				
ANR	5151147	AssignmentExpression	isarr = true		5150868	0		=			
ANR	5151148	Identifier	isarr		5150868	0					
ANR	5151149	Identifier	true		5150868	1					
ANR	5151150	ExpressionStatement	arrpos = 0	101:4:1694:1704	5150868	1	True				
ANR	5151151	AssignmentExpression	arrpos = 0		5150868	0		=			
ANR	5151152	Identifier	arrpos		5150868	0					
ANR	5151153	PrimaryExpression	0		5150868	1					
ANR	5151154	IfStatement	if ( indent > 128 )		5150868	8					
ANR	5151155	Condition	indent > 128	103:7:1718:1729	5150868	0	True				
ANR	5151156	RelationalExpression	indent > 128		5150868	0		>			
ANR	5151157	Identifier	indent		5150868	0					
ANR	5151158	PrimaryExpression	128		5150868	1					
ANR	5151159	CompoundStatement		62:21:1048:1048	5150868	1					
ANR	5151160	ExpressionStatement	"eprintf ( ""JSON indentation is too deep\\n"" )"	104:4:1738:1780	5150868	0	True				
ANR	5151161	CallExpression	"eprintf ( ""JSON indentation is too deep\\n"" )"		5150868	0					
ANR	5151162	Callee	eprintf		5150868	0					
ANR	5151163	Identifier	eprintf		5150868	0					
ANR	5151164	ArgumentList	"""JSON indentation is too deep\\n"""		5150868	1					
ANR	5151165	Argument	"""JSON indentation is too deep\\n"""		5150868	0					
ANR	5151166	PrimaryExpression	"""JSON indentation is too deep\\n"""		5150868	0					
ANR	5151167	ExpressionStatement	indent = 0	105:4:1786:1796	5150868	1	True				
ANR	5151168	AssignmentExpression	indent = 0		5150868	0		=			
ANR	5151169	Identifier	indent		5150868	0					
ANR	5151170	PrimaryExpression	0		5150868	1					
ANR	5151171	ElseStatement	else		5150868	0					
ANR	5151172	CompoundStatement		65:10:1124:1124	5150868	0					
ANR	5151173	ExpressionStatement	indent ++	107:4:1814:1822	5150868	0	True				
ANR	5151174	PostIncDecOperationExpression	indent ++		5150868	0					
ANR	5151175	Identifier	indent		5150868	0					
ANR	5151176	IncDec	++		5150868	1					
ANR	5151177	BreakStatement	break ;	109:3:1832:1837	5150868	9	True				
ANR	5151178	Label	case '}' :	110:2:1841:1849	5150868	10	True				
ANR	5151179	Label	case ']' :	111:2:1853:1861	5150868	11	True				
ANR	5151180	IfStatement	if ( * s == ']' )		5150868	12					
ANR	5151181	Condition	* s == ']'	112:7:1870:1878	5150868	0	True				
ANR	5151182	EqualityExpression	* s == ']'		5150868	0		==			
ANR	5151183	UnaryOperationExpression	* s		5150868	0					
ANR	5151184	UnaryOperator	*		5150868	0					
ANR	5151185	Identifier	s		5150868	1					
ANR	5151186	PrimaryExpression	']'		5150868	1					
ANR	5151187	CompoundStatement		71:18:1197:1197	5150868	1					
ANR	5151188	ExpressionStatement	isarr = false	113:4:1887:1900	5150868	0	True				
ANR	5151189	AssignmentExpression	isarr = false		5150868	0		=			
ANR	5151190	Identifier	isarr		5150868	0					
ANR	5151191	Identifier	false		5150868	1					
ANR	5151192	ExpressionStatement	indent --	115:3:1910:1918	5150868	13	True				
ANR	5151193	PostIncDecOperationExpression	indent --		5150868	0					
ANR	5151194	Identifier	indent		5150868	0					
ANR	5151195	IncDec	--		5150868	1					
ANR	5151196	BreakStatement	break ;	116:3:1923:1928	5150868	14	True				
ANR	5151197	IdentifierDeclStatement	int i ;	119:1:1938:1943	5150868	16	True				
ANR	5151198	IdentifierDecl	i		5150868	0					
ANR	5151199	IdentifierDeclType	int		5150868	0					
ANR	5151200	Identifier	i		5150868	1					
ANR	5151201	IdentifierDeclStatement	ut64 opos = 0 ;	120:1:1946:1959	5150868	17	True				
ANR	5151202	IdentifierDecl	opos = 0		5150868	0					
ANR	5151203	IdentifierDeclType	ut64		5150868	0					
ANR	5151204	Identifier	opos		5150868	1					
ANR	5151205	AssignmentExpression	opos = 0		5150868	2		=			
ANR	5151206	Identifier	opos		5150868	0					
ANR	5151207	PrimaryExpression	0		5150868	1					
ANR	5151208	ForStatement	for ( i = 0 ; i < DSZ && i < indent ; i ++ )		5150868	18					
ANR	5151209	ForInit	i = 0 ;	121:6:1967:1972	5150868	0	True				
ANR	5151210	AssignmentExpression	i = 0		5150868	0		=			
ANR	5151211	Identifier	i		5150868	0					
ANR	5151212	PrimaryExpression	0		5150868	1					
ANR	5151213	Condition	i < DSZ && i < indent	121:13:1974:1994	5150868	1	True				
ANR	5151214	AndExpression	i < DSZ && i < indent		5150868	0		&&			
ANR	5151215	RelationalExpression	i < DSZ		5150868	0		<			
ANR	5151216	Identifier	i		5150868	0					
ANR	5151217	Identifier	DSZ		5150868	1					
ANR	5151218	RelationalExpression	i < indent		5150868	1		<			
ANR	5151219	Identifier	i		5150868	0					
ANR	5151220	Identifier	indent		5150868	1					
ANR	5151221	PostIncDecOperationExpression	i ++	121:36:1997:1999	5150868	2	True				
ANR	5151222	Identifier	i		5150868	0					
ANR	5151223	IncDec	++		5150868	1					
ANR	5151224	CompoundStatement		80:41:1318:1318	5150868	3					
ANR	5151225	IfStatement	if ( ( int ) ( size_t ) words [ i ] < DSZ )		5150868	0					
ANR	5151226	Condition	( int ) ( size_t ) words [ i ] < DSZ	122:6:2010:2036	5150868	0	True				
ANR	5151227	RelationalExpression	( int ) ( size_t ) words [ i ] < DSZ		5150868	0		<			
ANR	5151228	CastExpression	( int ) ( size_t ) words [ i ]		5150868	0					
ANR	5151229	CastTarget	int		5150868	0					
ANR	5151230	CastExpression	( size_t ) words [ i ]		5150868	1					
ANR	5151231	CastTarget	size_t		5150868	0					
ANR	5151232	ArrayIndexing	words [ i ]		5150868	1					
ANR	5151233	Identifier	words		5150868	0					
ANR	5151234	Identifier	i		5150868	1					
ANR	5151235	Identifier	DSZ		5150868	1					
ANR	5151236	CompoundStatement		82:3:1360:1381	5150868	1					
ANR	5151237	IdentifierDeclStatement	ut64 cur = lengths [ i ] ;	123:3:2044:2065	5150868	0	True				
ANR	5151238	IdentifierDecl	cur = lengths [ i ]		5150868	0					
ANR	5151239	IdentifierDeclType	ut64		5150868	0					
ANR	5151240	Identifier	cur		5150868	1					
ANR	5151241	AssignmentExpression	cur = lengths [ i ]		5150868	2		=			
ANR	5151242	Identifier	cur		5150868	0					
ANR	5151243	ArrayIndexing	lengths [ i ]		5150868	1					
ANR	5151244	Identifier	lengths		5150868	0					
ANR	5151245	Identifier	i		5150868	1					
ANR	5151246	IfStatement	if ( cur < opos )		5150868	1					
ANR	5151247	Condition	cur < opos	124:7:2074:2083	5150868	0	True				
ANR	5151248	RelationalExpression	cur < opos		5150868	0		<			
ANR	5151249	Identifier	cur		5150868	0					
ANR	5151250	Identifier	opos		5150868	1					
ANR	5151251	CompoundStatement		83:19:1402:1402	5150868	1					
ANR	5151252	ContinueStatement	continue ;	125:4:2092:2100	5150868	0	True				
ANR	5151253	ExpressionStatement	opos = cur	127:3:2110:2120	5150868	2	True				
ANR	5151254	AssignmentExpression	opos = cur		5150868	0		=			
ANR	5151255	Identifier	opos		5150868	0					
ANR	5151256	Identifier	cur		5150868	1					
ANR	5151257	IfStatement	if ( cur > pos )		5150868	3					
ANR	5151258	Condition	cur > pos	128:7:2129:2137	5150868	0	True				
ANR	5151259	RelationalExpression	cur > pos		5150868	0		>			
ANR	5151260	Identifier	cur		5150868	0					
ANR	5151261	Identifier	pos		5150868	1					
ANR	5151262	CompoundStatement		87:18:1456:1456	5150868	1					
ANR	5151263	BreakStatement	break ;	129:4:2146:2151	5150868	0	True				
ANR	5151264	Statement	eprintf	131:3:2161:2167	5150868	4	True				
ANR	5151265	Statement	(	131:11:2169:2169	5150868	5	True				
ANR	5151266	Statement	"""0x%08"""	131:12:2170:2176	5150868	6	True				
ANR	5151267	Statement	PFMT64x	131:19:2177:2183	5150868	7	True				
ANR	5151268	Statement	"""  %d  [%d]\\n"""	131:26:2184:2197	5150868	8	True				
ANR	5151269	Statement	","	131:40:2198:2198	5150868	9	True				
ANR	5151270	Statement	cur	131:42:2200:2202	5150868	10	True				
ANR	5151271	Statement	","	131:45:2203:2203	5150868	11	True				
ANR	5151272	Statement	i	131:47:2205:2205	5150868	12	True				
ANR	5151273	Statement	","	131:48:2206:2206	5150868	13	True				
ANR	5151274	Statement	indexs	131:50:2208:2213	5150868	14	True				
ANR	5151275	Statement	[	131:56:2214:2214	5150868	15	True				
ANR	5151276	Statement	i	131:57:2215:2215	5150868	16	True				
ANR	5151277	Statement	]	131:58:2216:2216	5150868	17	True				
ANR	5151278	Statement	)	131:59:2217:2217	5150868	18	True				
ANR	5151279	ExpressionStatement		131:60:2218:2218	5150868	19	True				
ANR	5151280	ElseStatement	else		5150868	0					
ANR	5151281	CompoundStatement		101:3:1722:1747	5150868	0					
ANR	5151282	IdentifierDeclStatement	"char * a = r_str_ndup ( words [ i ] , lengths [ i ] ) ;"	133:3:2234:2277	5150868	0	True				
ANR	5151283	IdentifierDecl	"* a = r_str_ndup ( words [ i ] , lengths [ i ] )"		5150868	0					
ANR	5151284	IdentifierDeclType	char *		5150868	0					
ANR	5151285	Identifier	a		5150868	1					
ANR	5151286	AssignmentExpression	"* a = r_str_ndup ( words [ i ] , lengths [ i ] )"		5150868	2		=			
ANR	5151287	Identifier	a		5150868	0					
ANR	5151288	CallExpression	"r_str_ndup ( words [ i ] , lengths [ i ] )"		5150868	1					
ANR	5151289	Callee	r_str_ndup		5150868	0					
ANR	5151290	Identifier	r_str_ndup		5150868	0					
ANR	5151291	ArgumentList	words [ i ]		5150868	1					
ANR	5151292	Argument	words [ i ]		5150868	0					
ANR	5151293	ArrayIndexing	words [ i ]		5150868	0					
ANR	5151294	Identifier	words		5150868	0					
ANR	5151295	Identifier	i		5150868	1					
ANR	5151296	Argument	lengths [ i ]		5150868	1					
ANR	5151297	ArrayIndexing	lengths [ i ]		5150868	0					
ANR	5151298	Identifier	lengths		5150868	0					
ANR	5151299	Identifier	i		5150868	1					
ANR	5151300	IdentifierDeclStatement	ut64 cur = words [ i ] - os - 1 ;	134:3:2282:2310	5150868	1	True				
ANR	5151301	IdentifierDecl	cur = words [ i ] - os - 1		5150868	0					
ANR	5151302	IdentifierDeclType	ut64		5150868	0					
ANR	5151303	Identifier	cur		5150868	1					
ANR	5151304	AssignmentExpression	cur = words [ i ] - os - 1		5150868	2		=			
ANR	5151305	Identifier	cur		5150868	0					
ANR	5151306	AdditiveExpression	words [ i ] - os - 1		5150868	1		-			
ANR	5151307	ArrayIndexing	words [ i ]		5150868	0					
ANR	5151308	Identifier	words		5150868	0					
ANR	5151309	Identifier	i		5150868	1					
ANR	5151310	AdditiveExpression	os - 1		5150868	1		-			
ANR	5151311	Identifier	os		5150868	0					
ANR	5151312	PrimaryExpression	1		5150868	1					
ANR	5151313	IfStatement	if ( cur < opos )		5150868	2					
ANR	5151314	Condition	cur < opos	135:7:2319:2328	5150868	0	True				
ANR	5151315	RelationalExpression	cur < opos		5150868	0		<			
ANR	5151316	Identifier	cur		5150868	0					
ANR	5151317	Identifier	opos		5150868	1					
ANR	5151318	CompoundStatement		94:19:1647:1647	5150868	1					
ANR	5151319	ContinueStatement	continue ;	136:4:2337:2345	5150868	0	True				
ANR	5151320	ExpressionStatement	opos = cur	138:3:2355:2365	5150868	3	True				
ANR	5151321	AssignmentExpression	opos = cur		5150868	0		=			
ANR	5151322	Identifier	opos		5150868	0					
ANR	5151323	Identifier	cur		5150868	1					
ANR	5151324	IfStatement	if ( cur > pos )		5150868	4					
ANR	5151325	Condition	cur > pos	139:7:2374:2382	5150868	0	True				
ANR	5151326	RelationalExpression	cur > pos		5150868	0		>			
ANR	5151327	Identifier	cur		5150868	0					
ANR	5151328	Identifier	pos		5150868	1					
ANR	5151329	CompoundStatement		98:18:1701:1701	5150868	1					
ANR	5151330	BreakStatement	break ;	140:4:2391:2396	5150868	0	True				
ANR	5151331	IdentifierDeclStatement	"char * q = strchr ( a , '""' ) ;"	142:3:2406:2431	5150868	5	True				
ANR	5151332	IdentifierDecl	"* q = strchr ( a , '""' )"		5150868	0					
ANR	5151333	IdentifierDeclType	char *		5150868	0					
ANR	5151334	Identifier	q		5150868	1					
ANR	5151335	AssignmentExpression	"* q = strchr ( a , '""' )"		5150868	2		=			
ANR	5151336	Identifier	q		5150868	0					
ANR	5151337	CallExpression	"strchr ( a , '""' )"		5150868	1					
ANR	5151338	Callee	strchr		5150868	0					
ANR	5151339	Identifier	strchr		5150868	0					
ANR	5151340	ArgumentList	a		5150868	1					
ANR	5151341	Argument	a		5150868	0					
ANR	5151342	Identifier	a		5150868	0					
ANR	5151343	Argument	"'""'"		5150868	1					
ANR	5151344	PrimaryExpression	"'""'"		5150868	0					
ANR	5151345	IfStatement	if ( q )		5150868	6					
ANR	5151346	Condition	q	143:7:2440:2440	5150868	0	True				
ANR	5151347	Identifier	q		5150868	0					
ANR	5151348	CompoundStatement		102:10:1759:1759	5150868	1					
ANR	5151349	ExpressionStatement	* q = 0	144:4:2449:2455	5150868	0	True				
ANR	5151350	AssignmentExpression	* q = 0		5150868	0		=			
ANR	5151351	UnaryOperationExpression	* q		5150868	0					
ANR	5151352	UnaryOperator	*		5150868	0					
ANR	5151353	Identifier	q		5150868	1					
ANR	5151354	PrimaryExpression	0		5150868	1					
ANR	5151355	Statement	eprintf	146:3:2465:2471	5150868	7	True				
ANR	5151356	Statement	(	146:11:2473:2473	5150868	8	True				
ANR	5151357	Statement	"""0x%08"""	146:12:2474:2480	5150868	9	True				
ANR	5151358	Statement	PFMT64x	146:19:2481:2487	5150868	10	True				
ANR	5151359	Statement	"""  %d  %s\\n"""	146:26:2488:2499	5150868	11	True				
ANR	5151360	Statement	","	146:38:2500:2500	5150868	12	True				
ANR	5151361	Statement	cur	146:40:2502:2504	5150868	13	True				
ANR	5151362	Statement	","	146:43:2505:2505	5150868	14	True				
ANR	5151363	Statement	i	146:45:2507:2507	5150868	15	True				
ANR	5151364	Statement	","	146:46:2508:2508	5150868	16	True				
ANR	5151365	Statement	a	146:48:2510:2510	5150868	17	True				
ANR	5151366	Statement	)	146:49:2511:2511	5150868	18	True				
ANR	5151367	ExpressionStatement		146:50:2512:2512	5150868	19	True				
ANR	5151368	ExpressionStatement	free ( a )	147:3:2517:2525	5150868	20	True				
ANR	5151369	CallExpression	free ( a )		5150868	0					
ANR	5151370	Callee	free		5150868	0					
ANR	5151371	Identifier	free		5150868	0					
ANR	5151372	ArgumentList	a		5150868	1					
ANR	5151373	Argument	a		5150868	0					
ANR	5151374	Identifier	a		5150868	0					
ANR	5151375	ReturnStatement	return NULL ;	151:1:2561:2572	5150868	19	True				
ANR	5151376	Identifier	NULL		5150868	0					
ANR	5151377	ReturnType	R_API char *		5150868	1					
ANR	5151378	Identifier	r_print_json_path		5150868	2					
ANR	5151379	ParameterList	"const char * s , int pos"		5150868	3					
ANR	5151380	Parameter	const char * s	42:30:659:671	5150868	0	True				
ANR	5151381	ParameterType	const char *		5150868	0					
ANR	5151382	Identifier	s		5150868	1					
ANR	5151383	Parameter	int pos	42:45:674:680	5150868	1	True				
ANR	5151384	ParameterType	int		5150868	0					
ANR	5151385	Identifier	pos		5150868	1					
ANR	5151386	CFGEntryNode	ENTRY		5150868		True				
ANR	5151387	CFGExitNode	EXIT		5150868		True				
ANR	5151388	Symbol	* indent		5150868						
ANR	5151389	Symbol	cur		5150868						
ANR	5151390	Symbol	indent		5150868						
ANR	5151391	Symbol	r_str_ndup		5150868						
ANR	5151392	Symbol	indexs		5150868						
ANR	5151393	Symbol	strchr		5150868						
ANR	5151394	Symbol	isarr		5150868						
ANR	5151395	Symbol	* lengths		5150868						
ANR	5151396	Symbol	arrpos		5150868						
ANR	5151397	Symbol	strlen		5150868						
ANR	5151398	Symbol	* words		5150868						
ANR	5151399	Symbol	pos		5150868						
ANR	5151400	Symbol	instr		5150868						
ANR	5151401	Symbol	osz		5150868						
ANR	5151402	Symbol	str_a		5150868						
ANR	5151403	Symbol	a		5150868						
ANR	5151404	Symbol	NULL		5150868						
ANR	5151405	Symbol	os		5150868						
ANR	5151406	Symbol	words		5150868						
ANR	5151407	Symbol	false		5150868						
ANR	5151408	Symbol	i		5150868						
ANR	5151409	Symbol	DSZ		5150868						
ANR	5151410	Symbol	opos		5150868						
ANR	5151411	Symbol	q		5150868						
ANR	5151412	Symbol	s		5150868						
ANR	5151413	Symbol	* i		5150868						
ANR	5151414	Symbol	lengths		5150868						
ANR	5151415	Symbol	* indexs		5150868						
ANR	5151416	Symbol	true		5150868						
ANR	5151417	Symbol	* q		5150868						
ANR	5151418	Symbol	* s		5150868						
ANR	5151419	Function	r_print_json_human	154:0:2577:4310							
ANR	5151420	FunctionDef	r_print_json_human (const char * s)		5151419	0					
ANR	5151421	CompoundStatement		154:46:2623:4310	5151419	0					
ANR	5151422	IdentifierDeclStatement	int indent = 0 ;	155:1:2626:2640	5151419	0	True				
ANR	5151423	IdentifierDecl	indent = 0		5151419	0					
ANR	5151424	IdentifierDeclType	int		5151419	0					
ANR	5151425	Identifier	indent		5151419	1					
ANR	5151426	AssignmentExpression	indent = 0		5151419	2		=			
ANR	5151427	Identifier	indent		5151419	0					
ANR	5151428	PrimaryExpression	0		5151419	1					
ANR	5151429	IdentifierDeclStatement	"const char * tab = ""  "" ;"	156:1:2643:2665	5151419	1	True				
ANR	5151430	IdentifierDecl	"* tab = ""  """		5151419	0					
ANR	5151431	IdentifierDeclType	const char *		5151419	0					
ANR	5151432	Identifier	tab		5151419	1					
ANR	5151433	AssignmentExpression	"* tab = ""  """		5151419	2		=			
ANR	5151434	Identifier	tab		5151419	0					
ANR	5151435	PrimaryExpression	"""  """		5151419	1					
ANR	5151436	IdentifierDeclStatement	const int indentSize = strlen ( tab ) ;	157:1:2668:2703	5151419	2	True				
ANR	5151437	IdentifierDecl	indentSize = strlen ( tab )		5151419	0					
ANR	5151438	IdentifierDeclType	const int		5151419	0					
ANR	5151439	Identifier	indentSize		5151419	1					
ANR	5151440	AssignmentExpression	indentSize = strlen ( tab )		5151419	2		=			
ANR	5151441	Identifier	indentSize		5151419	0					
ANR	5151442	CallExpression	strlen ( tab )		5151419	1					
ANR	5151443	Callee	strlen		5151419	0					
ANR	5151444	Identifier	strlen		5151419	0					
ANR	5151445	ArgumentList	tab		5151419	1					
ANR	5151446	Argument	tab		5151419	0					
ANR	5151447	Identifier	tab		5151419	0					
ANR	5151448	IdentifierDeclStatement	int instr = 0 ;	158:1:2706:2719	5151419	3	True				
ANR	5151449	IdentifierDecl	instr = 0		5151419	0					
ANR	5151450	IdentifierDeclType	int		5151419	0					
ANR	5151451	Identifier	instr		5151419	1					
ANR	5151452	AssignmentExpression	instr = 0		5151419	2		=			
ANR	5151453	Identifier	instr		5151419	0					
ANR	5151454	PrimaryExpression	0		5151419	1					
ANR	5151455	IdentifierDeclStatement	bool isValue = false ;	159:1:2722:2742	5151419	4	True				
ANR	5151456	IdentifierDecl	isValue = false		5151419	0					
ANR	5151457	IdentifierDeclType	bool		5151419	0					
ANR	5151458	Identifier	isValue		5151419	1					
ANR	5151459	AssignmentExpression	isValue = false		5151419	2		=			
ANR	5151460	Identifier	false		5151419	0					
ANR	5151461	Identifier	false		5151419	1					
ANR	5151462	IdentifierDeclStatement	"char * o , * OE , * tmp ;"	160:1:2745:2763	5151419	5	True				
ANR	5151463	IdentifierDecl	* o		5151419	0					
ANR	5151464	IdentifierDeclType	char *		5151419	0					
ANR	5151465	Identifier	o		5151419	1					
ANR	5151466	IdentifierDecl	* OE		5151419	1					
ANR	5151467	IdentifierDeclType	char *		5151419	0					
ANR	5151468	Identifier	OE		5151419	1					
ANR	5151469	IdentifierDecl	* tmp		5151419	2					
ANR	5151470	IdentifierDeclType	char *		5151419	0					
ANR	5151471	Identifier	tmp		5151419	1					
ANR	5151472	IfStatement	if ( ! s )		5151419	6					
ANR	5151473	Condition	! s	161:5:2770:2771	5151419	0	True				
ANR	5151474	UnaryOperationExpression	! s		5151419	0					
ANR	5151475	UnaryOperator	!		5151419	0					
ANR	5151476	Identifier	s		5151419	1					
ANR	5151477	CompoundStatement		8:9:150:150	5151419	1					
ANR	5151478	ReturnStatement	return NULL ;	162:2:2778:2789	5151419	0	True				
ANR	5151479	Identifier	NULL		5151419	0					
ANR	5151480	IdentifierDeclStatement	int osz = ( 1 + strlen ( s ) ) * 20 ;	164:1:2795:2826	5151419	7	True				
ANR	5151481	IdentifierDecl	osz = ( 1 + strlen ( s ) ) * 20		5151419	0					
ANR	5151482	IdentifierDeclType	int		5151419	0					
ANR	5151483	Identifier	osz		5151419	1					
ANR	5151484	AssignmentExpression	osz = ( 1 + strlen ( s ) ) * 20		5151419	2		=			
ANR	5151485	Identifier	osz		5151419	0					
ANR	5151486	MultiplicativeExpression	( 1 + strlen ( s ) ) * 20		5151419	1		*			
ANR	5151487	AdditiveExpression	1 + strlen ( s )		5151419	0		+			
ANR	5151488	PrimaryExpression	1		5151419	0					
ANR	5151489	CallExpression	strlen ( s )		5151419	1					
ANR	5151490	Callee	strlen		5151419	0					
ANR	5151491	Identifier	strlen		5151419	0					
ANR	5151492	ArgumentList	s		5151419	1					
ANR	5151493	Argument	s		5151419	0					
ANR	5151494	Identifier	s		5151419	0					
ANR	5151495	PrimaryExpression	20		5151419	1					
ANR	5151496	IfStatement	if ( osz < 1 )		5151419	8					
ANR	5151497	Condition	osz < 1	165:5:2833:2839	5151419	0	True				
ANR	5151498	RelationalExpression	osz < 1		5151419	0		<			
ANR	5151499	Identifier	osz		5151419	0					
ANR	5151500	PrimaryExpression	1		5151419	1					
ANR	5151501	CompoundStatement		12:14:218:218	5151419	1					
ANR	5151502	ReturnStatement	return NULL ;	166:2:2846:2857	5151419	0	True				
ANR	5151503	Identifier	NULL		5151419	0					
ANR	5151504	IdentifierDeclStatement	char * O = malloc ( osz ) ;	169:1:2864:2886	5151419	9	True				
ANR	5151505	IdentifierDecl	* O = malloc ( osz )		5151419	0					
ANR	5151506	IdentifierDeclType	char *		5151419	0					
ANR	5151507	Identifier	O		5151419	1					
ANR	5151508	AssignmentExpression	* O = malloc ( osz )		5151419	2		=			
ANR	5151509	Identifier	O		5151419	0					
ANR	5151510	CallExpression	malloc ( osz )		5151419	1					
ANR	5151511	Callee	malloc		5151419	0					
ANR	5151512	Identifier	malloc		5151419	0					
ANR	5151513	ArgumentList	osz		5151419	1					
ANR	5151514	Argument	osz		5151419	0					
ANR	5151515	Identifier	osz		5151419	0					
ANR	5151516	IfStatement	if ( ! O )		5151419	10					
ANR	5151517	Condition	! O	170:5:2893:2894	5151419	0	True				
ANR	5151518	UnaryOperationExpression	! O		5151419	0					
ANR	5151519	UnaryOperator	!		5151419	0					
ANR	5151520	Identifier	O		5151419	1					
ANR	5151521	CompoundStatement		17:9:273:273	5151419	1					
ANR	5151522	ReturnStatement	return NULL ;	171:2:2901:2912	5151419	0	True				
ANR	5151523	Identifier	NULL		5151419	0					
ANR	5151524	ExpressionStatement	OE = O + osz	173:1:2918:2930	5151419	11	True				
ANR	5151525	AssignmentExpression	OE = O + osz		5151419	0		=			
ANR	5151526	Identifier	OE		5151419	0					
ANR	5151527	AdditiveExpression	O + osz		5151419	1		+			
ANR	5151528	Identifier	O		5151419	0					
ANR	5151529	Identifier	osz		5151419	1					
ANR	5151530	ForStatement	for ( o = O ; * s ; s ++ )		5151419	12					
ANR	5151531	ForInit	o = O ;	174:6:2938:2943	5151419	0	True				
ANR	5151532	AssignmentExpression	o = O		5151419	0		=			
ANR	5151533	Identifier	o		5151419	0					
ANR	5151534	Identifier	O		5151419	1					
ANR	5151535	Condition	* s	174:13:2945:2946	5151419	1	True				
ANR	5151536	UnaryOperationExpression	* s		5151419	0					
ANR	5151537	UnaryOperator	*		5151419	0					
ANR	5151538	Identifier	s		5151419	1					
ANR	5151539	PostIncDecOperationExpression	s ++	174:17:2949:2951	5151419	2	True				
ANR	5151540	Identifier	s		5151419	0					
ANR	5151541	IncDec	++		5151419	1					
ANR	5151542	CompoundStatement		21:22:330:330	5151419	3					
ANR	5151543	IfStatement	if ( o + ( indent * indentSize ) + 10 > OE )		5151419	0					
ANR	5151544	Condition	o + ( indent * indentSize ) + 10 > OE	175:6:2962:2996	5151419	0	True				
ANR	5151545	RelationalExpression	o + ( indent * indentSize ) + 10 > OE		5151419	0		>			
ANR	5151546	AdditiveExpression	o + ( indent * indentSize ) + 10		5151419	0		+			
ANR	5151547	Identifier	o		5151419	0					
ANR	5151548	AdditiveExpression	( indent * indentSize ) + 10		5151419	1		+			
ANR	5151549	MultiplicativeExpression	indent * indentSize		5151419	0		*			
ANR	5151550	Identifier	indent		5151419	0					
ANR	5151551	Identifier	indentSize		5151419	1					
ANR	5151552	PrimaryExpression	10		5151419	1					
ANR	5151553	Identifier	OE		5151419	1					
ANR	5151554	CompoundStatement		23:3:380:397	5151419	1					
ANR	5151555	IdentifierDeclStatement	int delta = o - O ;	176:3:3004:3021	5151419	0	True				
ANR	5151556	IdentifierDecl	delta = o - O		5151419	0					
ANR	5151557	IdentifierDeclType	int		5151419	0					
ANR	5151558	Identifier	delta		5151419	1					
ANR	5151559	AssignmentExpression	delta = o - O		5151419	2		=			
ANR	5151560	Identifier	delta		5151419	0					
ANR	5151561	AdditiveExpression	o - O		5151419	1		-			
ANR	5151562	Identifier	o		5151419	0					
ANR	5151563	Identifier	O		5151419	1					
ANR	5151564	ExpressionStatement	osz += 0x1000 + ( indent * indentSize )	177:3:3026:3063	5151419	1	True				
ANR	5151565	AssignmentExpression	osz += 0x1000 + ( indent * indentSize )		5151419	0		+=			
ANR	5151566	Identifier	osz		5151419	0					
ANR	5151567	AdditiveExpression	0x1000 + ( indent * indentSize )		5151419	1		+			
ANR	5151568	PrimaryExpression	0x1000		5151419	0					
ANR	5151569	MultiplicativeExpression	indent * indentSize		5151419	1		*			
ANR	5151570	Identifier	indent		5151419	0					
ANR	5151571	Identifier	indentSize		5151419	1					
ANR	5151572	IfStatement	if ( osz < 1 )		5151419	2					
ANR	5151573	Condition	osz < 1	178:7:3072:3078	5151419	0	True				
ANR	5151574	RelationalExpression	osz < 1		5151419	0		<			
ANR	5151575	Identifier	osz		5151419	0					
ANR	5151576	PrimaryExpression	1		5151419	1					
ANR	5151577	CompoundStatement		25:16:457:457	5151419	1					
ANR	5151578	ExpressionStatement	free ( O )	179:4:3087:3095	5151419	0	True				
ANR	5151579	CallExpression	free ( O )		5151419	0					
ANR	5151580	Callee	free		5151419	0					
ANR	5151581	Identifier	free		5151419	0					
ANR	5151582	ArgumentList	O		5151419	1					
ANR	5151583	Argument	O		5151419	0					
ANR	5151584	Identifier	O		5151419	0					
ANR	5151585	ReturnStatement	return NULL ;	180:4:3101:3112	5151419	1	True				
ANR	5151586	Identifier	NULL		5151419	0					
ANR	5151587	ExpressionStatement	"tmp = realloc ( O , osz )"	182:3:3122:3144	5151419	3	True				
ANR	5151588	AssignmentExpression	"tmp = realloc ( O , osz )"		5151419	0		=			
ANR	5151589	Identifier	tmp		5151419	0					
ANR	5151590	CallExpression	"realloc ( O , osz )"		5151419	1					
ANR	5151591	Callee	realloc		5151419	0					
ANR	5151592	Identifier	realloc		5151419	0					
ANR	5151593	ArgumentList	O		5151419	1					
ANR	5151594	Argument	O		5151419	0					
ANR	5151595	Identifier	O		5151419	0					
ANR	5151596	Argument	osz		5151419	1					
ANR	5151597	Identifier	osz		5151419	0					
ANR	5151598	IfStatement	if ( ! tmp )		5151419	4					
ANR	5151599	Condition	! tmp	183:7:3153:3156	5151419	0	True				
ANR	5151600	UnaryOperationExpression	! tmp		5151419	0					
ANR	5151601	UnaryOperator	!		5151419	0					
ANR	5151602	Identifier	tmp		5151419	1					
ANR	5151603	CompoundStatement		30:13:535:535	5151419	1					
ANR	5151604	ExpressionStatement	free ( O )	184:4:3165:3173	5151419	0	True				
ANR	5151605	CallExpression	free ( O )		5151419	0					
ANR	5151606	Callee	free		5151419	0					
ANR	5151607	Identifier	free		5151419	0					
ANR	5151608	ArgumentList	O		5151419	1					
ANR	5151609	Argument	O		5151419	0					
ANR	5151610	Identifier	O		5151419	0					
ANR	5151611	ReturnStatement	return NULL ;	185:4:3179:3190	5151419	1	True				
ANR	5151612	Identifier	NULL		5151419	0					
ANR	5151613	ExpressionStatement	O = tmp	187:3:3200:3207	5151419	5	True				
ANR	5151614	AssignmentExpression	O = tmp		5151419	0		=			
ANR	5151615	Identifier	O		5151419	0					
ANR	5151616	Identifier	tmp		5151419	1					
ANR	5151617	ExpressionStatement	OE = tmp + osz	188:3:3212:3226	5151419	6	True				
ANR	5151618	AssignmentExpression	OE = tmp + osz		5151419	0		=			
ANR	5151619	Identifier	OE		5151419	0					
ANR	5151620	AdditiveExpression	tmp + osz		5151419	1		+			
ANR	5151621	Identifier	tmp		5151419	0					
ANR	5151622	Identifier	osz		5151419	1					
ANR	5151623	ExpressionStatement	o = O + delta	189:3:3231:3244	5151419	7	True				
ANR	5151624	AssignmentExpression	o = O + delta		5151419	0		=			
ANR	5151625	Identifier	o		5151419	0					
ANR	5151626	AdditiveExpression	O + delta		5151419	1		+			
ANR	5151627	Identifier	O		5151419	0					
ANR	5151628	Identifier	delta		5151419	1					
ANR	5151629	IfStatement	if ( instr )		5151419	1					
ANR	5151630	Condition	instr	191:6:3256:3260	5151419	0	True				
ANR	5151631	Identifier	instr		5151419	0					
ANR	5151632	CompoundStatement		38:13:639:639	5151419	1					
ANR	5151633	IfStatement	"if ( s [ 0 ] == '""' )"		5151419	0					
ANR	5151634	Condition	"s [ 0 ] == '""'"	192:7:3272:3282	5151419	0	True				
ANR	5151635	EqualityExpression	"s [ 0 ] == '""'"		5151419	0		==			
ANR	5151636	ArrayIndexing	s [ 0 ]		5151419	0					
ANR	5151637	Identifier	s		5151419	0					
ANR	5151638	PrimaryExpression	0		5151419	1					
ANR	5151639	PrimaryExpression	"'""'"		5151419	1					
ANR	5151640	CompoundStatement		39:20:661:661	5151419	1					
ANR	5151641	ExpressionStatement	instr = 0	193:4:3291:3300	5151419	0	True				
ANR	5151642	AssignmentExpression	instr = 0		5151419	0		=			
ANR	5151643	Identifier	instr		5151419	0					
ANR	5151644	PrimaryExpression	0		5151419	1					
ANR	5151645	ElseStatement	else		5151419	0					
ANR	5151646	IfStatement	"if ( s [ 0 ] == '\\\\' && s [ 1 ] == '""' )"		5151419	0					
ANR	5151647	Condition	"s [ 0 ] == '\\\\' && s [ 1 ] == '""'"	194:14:3316:3342	5151419	0	True				
ANR	5151648	AndExpression	"s [ 0 ] == '\\\\' && s [ 1 ] == '""'"		5151419	0		&&			
ANR	5151649	EqualityExpression	s [ 0 ] == '\\\\'		5151419	0		==			
ANR	5151650	ArrayIndexing	s [ 0 ]		5151419	0					
ANR	5151651	Identifier	s		5151419	0					
ANR	5151652	PrimaryExpression	0		5151419	1					
ANR	5151653	PrimaryExpression	'\\\\'		5151419	1					
ANR	5151654	EqualityExpression	"s [ 1 ] == '""'"		5151419	1		==			
ANR	5151655	ArrayIndexing	s [ 1 ]		5151419	0					
ANR	5151656	Identifier	s		5151419	0					
ANR	5151657	PrimaryExpression	1		5151419	1					
ANR	5151658	PrimaryExpression	"'""'"		5151419	1					
ANR	5151659	CompoundStatement		41:43:721:721	5151419	1					
ANR	5151660	ExpressionStatement	* o ++ = * s ++	196:4:3374:3385	5151419	0	True				
ANR	5151661	AssignmentExpression	* o ++ = * s ++		5151419	0		=			
ANR	5151662	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151663	UnaryOperator	*		5151419	0					
ANR	5151664	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151665	Identifier	o		5151419	0					
ANR	5151666	IncDec	++		5151419	1					
ANR	5151667	UnaryOperationExpression	* s ++		5151419	1					
ANR	5151668	UnaryOperator	*		5151419	0					
ANR	5151669	PostIncDecOperationExpression	s ++		5151419	1					
ANR	5151670	Identifier	s		5151419	0					
ANR	5151671	IncDec	++		5151419	1					
ANR	5151672	IfStatement	"if ( * s != '""' )"		5151419	1					
ANR	5151673	Condition	"* s != '""'"	198:7:3399:3407	5151419	0	True				
ANR	5151674	EqualityExpression	"* s != '""'"		5151419	0		!=			
ANR	5151675	UnaryOperationExpression	* s		5151419	0					
ANR	5151676	UnaryOperator	*		5151419	0					
ANR	5151677	Identifier	s		5151419	1					
ANR	5151678	PrimaryExpression	"'""'"		5151419	1					
ANR	5151679	CompoundStatement		45:18:786:786	5151419	1					
ANR	5151680	ExpressionStatement	* o ++ = * s	199:4:3416:3425	5151419	0	True				
ANR	5151681	AssignmentExpression	* o ++ = * s		5151419	0		=			
ANR	5151682	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151683	UnaryOperator	*		5151419	0					
ANR	5151684	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151685	Identifier	o		5151419	0					
ANR	5151686	IncDec	++		5151419	1					
ANR	5151687	UnaryOperationExpression	* s		5151419	1					
ANR	5151688	UnaryOperator	*		5151419	0					
ANR	5151689	Identifier	s		5151419	1					
ANR	5151690	ContinueStatement	continue ;	201:3:3435:3443	5151419	2	True				
ANR	5151691	IfStatement	if ( indent <= 0 )		5151419	2					
ANR	5151692	Condition	indent <= 0	203:6:3455:3465	5151419	0	True				
ANR	5151693	RelationalExpression	indent <= 0		5151419	0		<=			
ANR	5151694	Identifier	indent		5151419	0					
ANR	5151695	PrimaryExpression	0		5151419	1					
ANR	5151696	CompoundStatement		50:19:844:844	5151419	1					
ANR	5151697	IfStatement	if ( s [ 0 ] != '{' && s [ 0 ] != '[' )		5151419	0					
ANR	5151698	Condition	s [ 0 ] != '{' && s [ 0 ] != '['	205:7:3497:3522	5151419	0	True				
ANR	5151699	AndExpression	s [ 0 ] != '{' && s [ 0 ] != '['		5151419	0		&&			
ANR	5151700	EqualityExpression	s [ 0 ] != '{'		5151419	0		!=			
ANR	5151701	ArrayIndexing	s [ 0 ]		5151419	0					
ANR	5151702	Identifier	s		5151419	0					
ANR	5151703	PrimaryExpression	0		5151419	1					
ANR	5151704	PrimaryExpression	'{'		5151419	1					
ANR	5151705	EqualityExpression	s [ 0 ] != '['		5151419	1		!=			
ANR	5151706	ArrayIndexing	s [ 0 ]		5151419	0					
ANR	5151707	Identifier	s		5151419	0					
ANR	5151708	PrimaryExpression	0		5151419	1					
ANR	5151709	PrimaryExpression	'['		5151419	1					
ANR	5151710	CompoundStatement		52:35:901:901	5151419	1					
ANR	5151711	ExpressionStatement	* o ++ = * s	206:4:3531:3540	5151419	0	True				
ANR	5151712	AssignmentExpression	* o ++ = * s		5151419	0		=			
ANR	5151713	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151714	UnaryOperator	*		5151419	0					
ANR	5151715	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151716	Identifier	o		5151419	0					
ANR	5151717	IncDec	++		5151419	1					
ANR	5151718	UnaryOperationExpression	* s		5151419	1					
ANR	5151719	UnaryOperator	*		5151419	0					
ANR	5151720	Identifier	s		5151419	1					
ANR	5151721	ContinueStatement	continue ;	207:4:3546:3554	5151419	1	True				
ANR	5151722	IfStatement	"if ( s [ 0 ] == '""' )"		5151419	3					
ANR	5151723	Condition	"s [ 0 ] == '""'"	211:6:3572:3582	5151419	0	True				
ANR	5151724	EqualityExpression	"s [ 0 ] == '""'"		5151419	0		==			
ANR	5151725	ArrayIndexing	s [ 0 ]		5151419	0					
ANR	5151726	Identifier	s		5151419	0					
ANR	5151727	PrimaryExpression	0		5151419	1					
ANR	5151728	PrimaryExpression	"'""'"		5151419	1					
ANR	5151729	CompoundStatement		58:19:961:961	5151419	1					
ANR	5151730	ExpressionStatement	instr = 1	212:3:3590:3599	5151419	0	True				
ANR	5151731	AssignmentExpression	instr = 1		5151419	0		=			
ANR	5151732	Identifier	instr		5151419	0					
ANR	5151733	PrimaryExpression	1		5151419	1					
ANR	5151734	IfStatement	if ( * s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' )		5151419	4					
ANR	5151735	Condition	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '	214:6:3611:3661	5151419	0	True				
ANR	5151736	OrExpression	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '		5151419	0		||			
ANR	5151737	EqualityExpression	* s == '\\n'		5151419	0		==			
ANR	5151738	UnaryOperationExpression	* s		5151419	0					
ANR	5151739	UnaryOperator	*		5151419	0					
ANR	5151740	Identifier	s		5151419	1					
ANR	5151741	PrimaryExpression	'\\n'		5151419	1					
ANR	5151742	OrExpression	* s == '\\r' || * s == '\\t' || * s == ' '		5151419	1		||			
ANR	5151743	EqualityExpression	* s == '\\r'		5151419	0		==			
ANR	5151744	UnaryOperationExpression	* s		5151419	0					
ANR	5151745	UnaryOperator	*		5151419	0					
ANR	5151746	Identifier	s		5151419	1					
ANR	5151747	PrimaryExpression	'\\r'		5151419	1					
ANR	5151748	OrExpression	* s == '\\t' || * s == ' '		5151419	1		||			
ANR	5151749	EqualityExpression	* s == '\\t'		5151419	0		==			
ANR	5151750	UnaryOperationExpression	* s		5151419	0					
ANR	5151751	UnaryOperator	*		5151419	0					
ANR	5151752	Identifier	s		5151419	1					
ANR	5151753	PrimaryExpression	'\\t'		5151419	1					
ANR	5151754	EqualityExpression	* s == ' '		5151419	1		==			
ANR	5151755	UnaryOperationExpression	* s		5151419	0					
ANR	5151756	UnaryOperator	*		5151419	0					
ANR	5151757	Identifier	s		5151419	1					
ANR	5151758	PrimaryExpression	' '		5151419	1					
ANR	5151759	CompoundStatement		61:59:1040:1040	5151419	1					
ANR	5151760	ContinueStatement	continue ;	215:3:3669:3677	5151419	0	True				
ANR	5151761	SwitchStatement	switch ( * s )		5151419	5					
ANR	5151762	Condition	* s	217:10:3693:3694	5151419	0	True				
ANR	5151763	UnaryOperationExpression	* s		5151419	0					
ANR	5151764	UnaryOperator	*		5151419	0					
ANR	5151765	Identifier	s		5151419	1					
ANR	5151766	CompoundStatement		64:14:1073:1073	5151419	1					
ANR	5151767	Label	case ':' :	218:2:3701:3709	5151419	0	True				
ANR	5151768	ExpressionStatement	* o ++ = * s	219:3:3714:3723	5151419	1	True				
ANR	5151769	AssignmentExpression	* o ++ = * s		5151419	0		=			
ANR	5151770	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151771	UnaryOperator	*		5151419	0					
ANR	5151772	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151773	Identifier	o		5151419	0					
ANR	5151774	IncDec	++		5151419	1					
ANR	5151775	UnaryOperationExpression	* s		5151419	1					
ANR	5151776	UnaryOperator	*		5151419	0					
ANR	5151777	Identifier	s		5151419	1					
ANR	5151778	ExpressionStatement	* o ++ = ' '	220:3:3728:3738	5151419	2	True				
ANR	5151779	AssignmentExpression	* o ++ = ' '		5151419	0		=			
ANR	5151780	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151781	UnaryOperator	*		5151419	0					
ANR	5151782	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151783	Identifier	o		5151419	0					
ANR	5151784	IncDec	++		5151419	1					
ANR	5151785	PrimaryExpression	' '		5151419	1					
ANR	5151786	ExpressionStatement	isValue = true	221:3:3743:3757	5151419	3	True				
ANR	5151787	AssignmentExpression	isValue = true		5151419	0		=			
ANR	5151788	Identifier	isValue		5151419	0					
ANR	5151789	Identifier	true		5151419	1					
ANR	5151790	BreakStatement	break ;	222:3:3762:3767	5151419	4	True				
ANR	5151791	Label	"case ',' :"	223:2:3771:3779	5151419	5	True				
ANR	5151792	ExpressionStatement	* o ++ = '\\n'	224:3:3784:3795	5151419	6	True				
ANR	5151793	AssignmentExpression	* o ++ = '\\n'		5151419	0		=			
ANR	5151794	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151795	UnaryOperator	*		5151419	0					
ANR	5151796	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151797	Identifier	o		5151419	0					
ANR	5151798	IncDec	++		5151419	1					
ANR	5151799	PrimaryExpression	'\\n'		5151419	1					
ANR	5151800	ExpressionStatement	isValue = false	225:3:3800:3815	5151419	7	True				
ANR	5151801	AssignmentExpression	isValue = false		5151419	0		=			
ANR	5151802	Identifier	isValue		5151419	0					
ANR	5151803	Identifier	false		5151419	1					
ANR	5151804	ExpressionStatement	"doIndent ( indent - 1 , & o , tab )"	226:3:3820:3850	5151419	8	True				
ANR	5151805	CallExpression	"doIndent ( indent - 1 , & o , tab )"		5151419	0					
ANR	5151806	Callee	doIndent		5151419	0					
ANR	5151807	Identifier	doIndent		5151419	0					
ANR	5151808	ArgumentList	indent - 1		5151419	1					
ANR	5151809	Argument	indent - 1		5151419	0					
ANR	5151810	AdditiveExpression	indent - 1		5151419	0		-			
ANR	5151811	Identifier	indent		5151419	0					
ANR	5151812	PrimaryExpression	1		5151419	1					
ANR	5151813	Argument	& o		5151419	1					
ANR	5151814	UnaryOperationExpression	& o		5151419	0					
ANR	5151815	UnaryOperator	&		5151419	0					
ANR	5151816	Identifier	o		5151419	1					
ANR	5151817	Argument	tab		5151419	2					
ANR	5151818	Identifier	tab		5151419	0					
ANR	5151819	BreakStatement	break ;	227:3:3855:3860	5151419	9	True				
ANR	5151820	Label	case '{' :	228:2:3864:3872	5151419	10	True				
ANR	5151821	Label	case '[' :	229:2:3876:3884	5151419	11	True				
ANR	5151822	ExpressionStatement	isValue = false	230:3:3889:3904	5151419	12	True				
ANR	5151823	AssignmentExpression	isValue = false		5151419	0		=			
ANR	5151824	Identifier	isValue		5151419	0					
ANR	5151825	Identifier	false		5151419	1					
ANR	5151826	IfStatement	if ( indent > 0 )		5151419	13					
ANR	5151827	Condition	indent > 0	231:7:3913:3922	5151419	0	True				
ANR	5151828	RelationalExpression	indent > 0		5151419	0		>			
ANR	5151829	Identifier	indent		5151419	0					
ANR	5151830	PrimaryExpression	0		5151419	1					
ANR	5151831	CompoundStatement		78:19:1301:1301	5151419	1					
ANR	5151832	ExpressionStatement	* o ++ = ( indent != - 1 ) ? '\\n' : ' '	232:4:3931:3963	5151419	0	True				
ANR	5151833	AssignmentExpression	* o ++ = ( indent != - 1 ) ? '\\n' : ' '		5151419	0		=			
ANR	5151834	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151835	UnaryOperator	*		5151419	0					
ANR	5151836	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151837	Identifier	o		5151419	0					
ANR	5151838	IncDec	++		5151419	1					
ANR	5151839	ConditionalExpression	( indent != - 1 ) ? '\\n' : ' '		5151419	1					
ANR	5151840	Condition	indent != - 1		5151419	0					
ANR	5151841	EqualityExpression	indent != - 1		5151419	0		!=			
ANR	5151842	Identifier	indent		5151419	0					
ANR	5151843	UnaryOperationExpression	- 1		5151419	1					
ANR	5151844	UnaryOperator	-		5151419	0					
ANR	5151845	PrimaryExpression	1		5151419	1					
ANR	5151846	PrimaryExpression	'\\n'		5151419	1					
ANR	5151847	PrimaryExpression	' '		5151419	2					
ANR	5151848	IfStatement	if ( indent > 128 )		5151419	14					
ANR	5151849	Condition	indent > 128	234:7:3977:3988	5151419	0	True				
ANR	5151850	RelationalExpression	indent > 128		5151419	0		>			
ANR	5151851	Identifier	indent		5151419	0					
ANR	5151852	PrimaryExpression	128		5151419	1					
ANR	5151853	CompoundStatement		81:21:1367:1367	5151419	1					
ANR	5151854	ExpressionStatement	"eprintf ( ""JSON indentation is too deep\\n"" )"	235:4:3997:4039	5151419	0	True				
ANR	5151855	CallExpression	"eprintf ( ""JSON indentation is too deep\\n"" )"		5151419	0					
ANR	5151856	Callee	eprintf		5151419	0					
ANR	5151857	Identifier	eprintf		5151419	0					
ANR	5151858	ArgumentList	"""JSON indentation is too deep\\n"""		5151419	1					
ANR	5151859	Argument	"""JSON indentation is too deep\\n"""		5151419	0					
ANR	5151860	PrimaryExpression	"""JSON indentation is too deep\\n"""		5151419	0					
ANR	5151861	ExpressionStatement	indent = 0	236:4:4045:4055	5151419	1	True				
ANR	5151862	AssignmentExpression	indent = 0		5151419	0		=			
ANR	5151863	Identifier	indent		5151419	0					
ANR	5151864	PrimaryExpression	0		5151419	1					
ANR	5151865	ElseStatement	else		5151419	0					
ANR	5151866	CompoundStatement		84:10:1443:1443	5151419	0					
ANR	5151867	ExpressionStatement	indent ++	238:4:4073:4081	5151419	0	True				
ANR	5151868	PostIncDecOperationExpression	indent ++		5151419	0					
ANR	5151869	Identifier	indent		5151419	0					
ANR	5151870	IncDec	++		5151419	1					
ANR	5151871	ExpressionStatement	"doIndent ( indent - 1 , & o , tab )"	240:3:4091:4121	5151419	15	True				
ANR	5151872	CallExpression	"doIndent ( indent - 1 , & o , tab )"		5151419	0					
ANR	5151873	Callee	doIndent		5151419	0					
ANR	5151874	Identifier	doIndent		5151419	0					
ANR	5151875	ArgumentList	indent - 1		5151419	1					
ANR	5151876	Argument	indent - 1		5151419	0					
ANR	5151877	AdditiveExpression	indent - 1		5151419	0		-			
ANR	5151878	Identifier	indent		5151419	0					
ANR	5151879	PrimaryExpression	1		5151419	1					
ANR	5151880	Argument	& o		5151419	1					
ANR	5151881	UnaryOperationExpression	& o		5151419	0					
ANR	5151882	UnaryOperator	&		5151419	0					
ANR	5151883	Identifier	o		5151419	1					
ANR	5151884	Argument	tab		5151419	2					
ANR	5151885	Identifier	tab		5151419	0					
ANR	5151886	BreakStatement	break ;	241:3:4126:4131	5151419	16	True				
ANR	5151887	Label	case '}' :	242:2:4135:4143	5151419	17	True				
ANR	5151888	Label	case ']' :	243:2:4147:4155	5151419	18	True				
ANR	5151889	ExpressionStatement	isValue = false	244:3:4160:4175	5151419	19	True				
ANR	5151890	AssignmentExpression	isValue = false		5151419	0		=			
ANR	5151891	Identifier	isValue		5151419	0					
ANR	5151892	Identifier	false		5151419	1					
ANR	5151893	ExpressionStatement	indent --	245:3:4180:4188	5151419	20	True				
ANR	5151894	PostIncDecOperationExpression	indent --		5151419	0					
ANR	5151895	Identifier	indent		5151419	0					
ANR	5151896	IncDec	--		5151419	1					
ANR	5151897	ExpressionStatement	"doIndent ( indent - 1 , & o , tab )"	246:3:4193:4223	5151419	21	True				
ANR	5151898	CallExpression	"doIndent ( indent - 1 , & o , tab )"		5151419	0					
ANR	5151899	Callee	doIndent		5151419	0					
ANR	5151900	Identifier	doIndent		5151419	0					
ANR	5151901	ArgumentList	indent - 1		5151419	1					
ANR	5151902	Argument	indent - 1		5151419	0					
ANR	5151903	AdditiveExpression	indent - 1		5151419	0		-			
ANR	5151904	Identifier	indent		5151419	0					
ANR	5151905	PrimaryExpression	1		5151419	1					
ANR	5151906	Argument	& o		5151419	1					
ANR	5151907	UnaryOperationExpression	& o		5151419	0					
ANR	5151908	UnaryOperator	&		5151419	0					
ANR	5151909	Identifier	o		5151419	1					
ANR	5151910	Argument	tab		5151419	2					
ANR	5151911	Identifier	tab		5151419	0					
ANR	5151912	BreakStatement	break ;	247:3:4228:4233	5151419	22	True				
ANR	5151913	Label	default :	248:2:4237:4244	5151419	23	True				
ANR	5151914	Identifier	default		5151419	0					
ANR	5151915	IfStatement	if ( ! instr )		5151419	24					
ANR	5151916	Condition	! instr	249:7:4253:4258	5151419	0	True				
ANR	5151917	UnaryOperationExpression	! instr		5151419	0					
ANR	5151918	UnaryOperator	!		5151419	0					
ANR	5151919	Identifier	instr		5151419	1					
ANR	5151920	CompoundStatement		96:15:1637:1637	5151419	1					
ANR	5151921	ExpressionStatement	* o ++ = * s	250:4:4267:4276	5151419	0	True				
ANR	5151922	AssignmentExpression	* o ++ = * s		5151419	0		=			
ANR	5151923	UnaryOperationExpression	* o ++		5151419	0					
ANR	5151924	UnaryOperator	*		5151419	0					
ANR	5151925	PostIncDecOperationExpression	o ++		5151419	1					
ANR	5151926	Identifier	o		5151419	0					
ANR	5151927	IncDec	++		5151419	1					
ANR	5151928	UnaryOperationExpression	* s		5151419	1					
ANR	5151929	UnaryOperator	*		5151419	0					
ANR	5151930	Identifier	s		5151419	1					
ANR	5151931	ExpressionStatement	* o = 0	254:1:4291:4297	5151419	13	True				
ANR	5151932	AssignmentExpression	* o = 0		5151419	0		=			
ANR	5151933	UnaryOperationExpression	* o		5151419	0					
ANR	5151934	UnaryOperator	*		5151419	0					
ANR	5151935	Identifier	o		5151419	1					
ANR	5151936	PrimaryExpression	0		5151419	1					
ANR	5151937	ReturnStatement	return O ;	255:1:4300:4308	5151419	14	True				
ANR	5151938	Identifier	O		5151419	0					
ANR	5151939	ReturnType	R_API char *		5151419	1					
ANR	5151940	Identifier	r_print_json_human		5151419	2					
ANR	5151941	ParameterList	const char * s		5151419	3					
ANR	5151942	Parameter	const char * s	154:31:2608:2620	5151419	0	True				
ANR	5151943	ParameterType	const char *		5151419	0					
ANR	5151944	Identifier	s		5151419	1					
ANR	5151945	CFGEntryNode	ENTRY		5151419		True				
ANR	5151946	CFGExitNode	EXIT		5151419		True				
ANR	5151947	Symbol	* s ++		5151419						
ANR	5151948	Symbol	malloc		5151419						
ANR	5151949	Symbol	NULL		5151419						
ANR	5151950	Symbol	indent		5151419						
ANR	5151951	Symbol	* o ++		5151419						
ANR	5151952	Symbol	false		5151419						
ANR	5151953	Symbol	delta		5151419						
ANR	5151954	Symbol	realloc		5151419						
ANR	5151955	Symbol	o		5151419						
ANR	5151956	Symbol	O		5151419						
ANR	5151957	Symbol	strlen		5151419						
ANR	5151958	Symbol	isValue		5151419						
ANR	5151959	Symbol	s		5151419						
ANR	5151960	Symbol	tab		5151419						
ANR	5151961	Symbol	& o		5151419						
ANR	5151962	Symbol	tmp		5151419						
ANR	5151963	Symbol	OE		5151419						
ANR	5151964	Symbol	instr		5151419						
ANR	5151965	Symbol	osz		5151419						
ANR	5151966	Symbol	true		5151419						
ANR	5151967	Symbol	* o		5151419						
ANR	5151968	Symbol	indentSize		5151419						
ANR	5151969	Symbol	* s		5151419						
ANR	5151970	Function	r_print_json_indent	258:0:4313:6627							
ANR	5151971	FunctionDef	"r_print_json_indent (const char * s , bool color , const char * tab , const char * * palette)"		5151970	0					
ANR	5151972	CompoundStatement		258:98:4411:6627	5151970	0					
ANR	5151973	IdentifierDeclStatement	int indent = 0 ;	259:1:4414:4428	5151970	0	True				
ANR	5151974	IdentifierDecl	indent = 0		5151970	0					
ANR	5151975	IdentifierDeclType	int		5151970	0					
ANR	5151976	Identifier	indent		5151970	1					
ANR	5151977	AssignmentExpression	indent = 0		5151970	2		=			
ANR	5151978	Identifier	indent		5151970	0					
ANR	5151979	PrimaryExpression	0		5151970	1					
ANR	5151980	IdentifierDeclStatement	const int indentSize = strlen ( tab ) ;	260:1:4431:4466	5151970	1	True				
ANR	5151981	IdentifierDecl	indentSize = strlen ( tab )		5151970	0					
ANR	5151982	IdentifierDeclType	const int		5151970	0					
ANR	5151983	Identifier	indentSize		5151970	1					
ANR	5151984	AssignmentExpression	indentSize = strlen ( tab )		5151970	2		=			
ANR	5151985	Identifier	indentSize		5151970	0					
ANR	5151986	CallExpression	strlen ( tab )		5151970	1					
ANR	5151987	Callee	strlen		5151970	0					
ANR	5151988	Identifier	strlen		5151970	0					
ANR	5151989	ArgumentList	tab		5151970	1					
ANR	5151990	Argument	tab		5151970	0					
ANR	5151991	Identifier	tab		5151970	0					
ANR	5151992	IdentifierDeclStatement	int instr = 0 ;	261:1:4469:4482	5151970	2	True				
ANR	5151993	IdentifierDecl	instr = 0		5151970	0					
ANR	5151994	IdentifierDeclType	int		5151970	0					
ANR	5151995	Identifier	instr		5151970	1					
ANR	5151996	AssignmentExpression	instr = 0		5151970	2		=			
ANR	5151997	Identifier	instr		5151970	0					
ANR	5151998	PrimaryExpression	0		5151970	1					
ANR	5151999	IdentifierDeclStatement	bool isValue = false ;	262:1:4485:4505	5151970	3	True				
ANR	5152000	IdentifierDecl	isValue = false		5151970	0					
ANR	5152001	IdentifierDeclType	bool		5151970	0					
ANR	5152002	Identifier	isValue		5151970	1					
ANR	5152003	AssignmentExpression	isValue = false		5151970	2		=			
ANR	5152004	Identifier	false		5151970	0					
ANR	5152005	Identifier	false		5151970	1					
ANR	5152006	IdentifierDeclStatement	"char * o , * OE , * tmp ;"	263:1:4508:4526	5151970	4	True				
ANR	5152007	IdentifierDecl	* o		5151970	0					
ANR	5152008	IdentifierDeclType	char *		5151970	0					
ANR	5152009	Identifier	o		5151970	1					
ANR	5152010	IdentifierDecl	* OE		5151970	1					
ANR	5152011	IdentifierDeclType	char *		5151970	0					
ANR	5152012	Identifier	OE		5151970	1					
ANR	5152013	IdentifierDecl	* tmp		5151970	2					
ANR	5152014	IdentifierDeclType	char *		5151970	0					
ANR	5152015	Identifier	tmp		5151970	1					
ANR	5152016	IfStatement	if ( ! s )		5151970	5					
ANR	5152017	Condition	! s	264:5:4533:4534	5151970	0	True				
ANR	5152018	UnaryOperationExpression	! s		5151970	0					
ANR	5152019	UnaryOperator	!		5151970	0					
ANR	5152020	Identifier	s		5151970	1					
ANR	5152021	CompoundStatement		7:9:125:125	5151970	1					
ANR	5152022	ReturnStatement	return NULL ;	265:2:4541:4552	5151970	0	True				
ANR	5152023	Identifier	NULL		5151970	0					
ANR	5152024	IdentifierDeclStatement	const char * * colors = palette ? palette : origColors ;	267:1:4558:4609	5151970	6	True				
ANR	5152025	IdentifierDecl	* * colors = palette ? palette : origColors		5151970	0					
ANR	5152026	IdentifierDeclType	const char * *		5151970	0					
ANR	5152027	Identifier	colors		5151970	1					
ANR	5152028	AssignmentExpression	* * colors = palette ? palette : origColors		5151970	2		=			
ANR	5152029	Identifier	colors		5151970	0					
ANR	5152030	ConditionalExpression	palette ? palette : origColors		5151970	1					
ANR	5152031	Condition	palette		5151970	0					
ANR	5152032	Identifier	palette		5151970	0					
ANR	5152033	Identifier	palette		5151970	1					
ANR	5152034	Identifier	origColors		5151970	2					
ANR	5152035	IdentifierDeclStatement	int osz = ( 1 + strlen ( s ) ) * 20 ;	268:1:4612:4643	5151970	7	True				
ANR	5152036	IdentifierDecl	osz = ( 1 + strlen ( s ) ) * 20		5151970	0					
ANR	5152037	IdentifierDeclType	int		5151970	0					
ANR	5152038	Identifier	osz		5151970	1					
ANR	5152039	AssignmentExpression	osz = ( 1 + strlen ( s ) ) * 20		5151970	2		=			
ANR	5152040	Identifier	osz		5151970	0					
ANR	5152041	MultiplicativeExpression	( 1 + strlen ( s ) ) * 20		5151970	1		*			
ANR	5152042	AdditiveExpression	1 + strlen ( s )		5151970	0		+			
ANR	5152043	PrimaryExpression	1		5151970	0					
ANR	5152044	CallExpression	strlen ( s )		5151970	1					
ANR	5152045	Callee	strlen		5151970	0					
ANR	5152046	Identifier	strlen		5151970	0					
ANR	5152047	ArgumentList	s		5151970	1					
ANR	5152048	Argument	s		5151970	0					
ANR	5152049	Identifier	s		5151970	0					
ANR	5152050	PrimaryExpression	20		5151970	1					
ANR	5152051	IfStatement	if ( osz < 1 )		5151970	8					
ANR	5152052	Condition	osz < 1	269:5:4650:4656	5151970	0	True				
ANR	5152053	RelationalExpression	osz < 1		5151970	0		<			
ANR	5152054	Identifier	osz		5151970	0					
ANR	5152055	PrimaryExpression	1		5151970	1					
ANR	5152056	CompoundStatement		12:14:247:247	5151970	1					
ANR	5152057	ReturnStatement	return NULL ;	270:2:4663:4674	5151970	0	True				
ANR	5152058	Identifier	NULL		5151970	0					
ANR	5152059	IdentifierDeclStatement	char * O = malloc ( osz ) ;	273:1:4681:4703	5151970	9	True				
ANR	5152060	IdentifierDecl	* O = malloc ( osz )		5151970	0					
ANR	5152061	IdentifierDeclType	char *		5151970	0					
ANR	5152062	Identifier	O		5151970	1					
ANR	5152063	AssignmentExpression	* O = malloc ( osz )		5151970	2		=			
ANR	5152064	Identifier	O		5151970	0					
ANR	5152065	CallExpression	malloc ( osz )		5151970	1					
ANR	5152066	Callee	malloc		5151970	0					
ANR	5152067	Identifier	malloc		5151970	0					
ANR	5152068	ArgumentList	osz		5151970	1					
ANR	5152069	Argument	osz		5151970	0					
ANR	5152070	Identifier	osz		5151970	0					
ANR	5152071	IfStatement	if ( ! O )		5151970	10					
ANR	5152072	Condition	! O	274:5:4710:4711	5151970	0	True				
ANR	5152073	UnaryOperationExpression	! O		5151970	0					
ANR	5152074	UnaryOperator	!		5151970	0					
ANR	5152075	Identifier	O		5151970	1					
ANR	5152076	CompoundStatement		17:9:302:302	5151970	1					
ANR	5152077	ReturnStatement	return NULL ;	275:2:4718:4729	5151970	0	True				
ANR	5152078	Identifier	NULL		5151970	0					
ANR	5152079	ExpressionStatement	OE = O + osz	277:1:4735:4747	5151970	11	True				
ANR	5152080	AssignmentExpression	OE = O + osz		5151970	0		=			
ANR	5152081	Identifier	OE		5151970	0					
ANR	5152082	AdditiveExpression	O + osz		5151970	1		+			
ANR	5152083	Identifier	O		5151970	0					
ANR	5152084	Identifier	osz		5151970	1					
ANR	5152085	ForStatement	for ( o = O ; * s ; s ++ )		5151970	12					
ANR	5152086	ForInit	o = O ;	278:6:4755:4760	5151970	0	True				
ANR	5152087	AssignmentExpression	o = O		5151970	0		=			
ANR	5152088	Identifier	o		5151970	0					
ANR	5152089	Identifier	O		5151970	1					
ANR	5152090	Condition	* s	278:13:4762:4763	5151970	1	True				
ANR	5152091	UnaryOperationExpression	* s		5151970	0					
ANR	5152092	UnaryOperator	*		5151970	0					
ANR	5152093	Identifier	s		5151970	1					
ANR	5152094	PostIncDecOperationExpression	s ++	278:17:4766:4768	5151970	2	True				
ANR	5152095	Identifier	s		5151970	0					
ANR	5152096	IncDec	++		5151970	1					
ANR	5152097	CompoundStatement		21:22:359:359	5151970	3					
ANR	5152098	IfStatement	if ( o + ( indent * indentSize ) + 10 > OE )		5151970	0					
ANR	5152099	Condition	o + ( indent * indentSize ) + 10 > OE	279:6:4779:4813	5151970	0	True				
ANR	5152100	RelationalExpression	o + ( indent * indentSize ) + 10 > OE		5151970	0		>			
ANR	5152101	AdditiveExpression	o + ( indent * indentSize ) + 10		5151970	0		+			
ANR	5152102	Identifier	o		5151970	0					
ANR	5152103	AdditiveExpression	( indent * indentSize ) + 10		5151970	1		+			
ANR	5152104	MultiplicativeExpression	indent * indentSize		5151970	0		*			
ANR	5152105	Identifier	indent		5151970	0					
ANR	5152106	Identifier	indentSize		5151970	1					
ANR	5152107	PrimaryExpression	10		5151970	1					
ANR	5152108	Identifier	OE		5151970	1					
ANR	5152109	CompoundStatement		23:3:409:426	5151970	1					
ANR	5152110	IdentifierDeclStatement	int delta = o - O ;	280:3:4821:4838	5151970	0	True				
ANR	5152111	IdentifierDecl	delta = o - O		5151970	0					
ANR	5152112	IdentifierDeclType	int		5151970	0					
ANR	5152113	Identifier	delta		5151970	1					
ANR	5152114	AssignmentExpression	delta = o - O		5151970	2		=			
ANR	5152115	Identifier	delta		5151970	0					
ANR	5152116	AdditiveExpression	o - O		5151970	1		-			
ANR	5152117	Identifier	o		5151970	0					
ANR	5152118	Identifier	O		5151970	1					
ANR	5152119	ExpressionStatement	osz += 0x1000 + ( indent * indentSize )	281:3:4843:4880	5151970	1	True				
ANR	5152120	AssignmentExpression	osz += 0x1000 + ( indent * indentSize )		5151970	0		+=			
ANR	5152121	Identifier	osz		5151970	0					
ANR	5152122	AdditiveExpression	0x1000 + ( indent * indentSize )		5151970	1		+			
ANR	5152123	PrimaryExpression	0x1000		5151970	0					
ANR	5152124	MultiplicativeExpression	indent * indentSize		5151970	1		*			
ANR	5152125	Identifier	indent		5151970	0					
ANR	5152126	Identifier	indentSize		5151970	1					
ANR	5152127	IfStatement	if ( osz < 1 )		5151970	2					
ANR	5152128	Condition	osz < 1	282:7:4889:4895	5151970	0	True				
ANR	5152129	RelationalExpression	osz < 1		5151970	0		<			
ANR	5152130	Identifier	osz		5151970	0					
ANR	5152131	PrimaryExpression	1		5151970	1					
ANR	5152132	CompoundStatement		25:16:486:486	5151970	1					
ANR	5152133	ExpressionStatement	free ( O )	283:4:4904:4912	5151970	0	True				
ANR	5152134	CallExpression	free ( O )		5151970	0					
ANR	5152135	Callee	free		5151970	0					
ANR	5152136	Identifier	free		5151970	0					
ANR	5152137	ArgumentList	O		5151970	1					
ANR	5152138	Argument	O		5151970	0					
ANR	5152139	Identifier	O		5151970	0					
ANR	5152140	ReturnStatement	return NULL ;	284:4:4918:4929	5151970	1	True				
ANR	5152141	Identifier	NULL		5151970	0					
ANR	5152142	ExpressionStatement	"tmp = realloc ( O , osz )"	286:3:4939:4961	5151970	3	True				
ANR	5152143	AssignmentExpression	"tmp = realloc ( O , osz )"		5151970	0		=			
ANR	5152144	Identifier	tmp		5151970	0					
ANR	5152145	CallExpression	"realloc ( O , osz )"		5151970	1					
ANR	5152146	Callee	realloc		5151970	0					
ANR	5152147	Identifier	realloc		5151970	0					
ANR	5152148	ArgumentList	O		5151970	1					
ANR	5152149	Argument	O		5151970	0					
ANR	5152150	Identifier	O		5151970	0					
ANR	5152151	Argument	osz		5151970	1					
ANR	5152152	Identifier	osz		5151970	0					
ANR	5152153	IfStatement	if ( ! tmp )		5151970	4					
ANR	5152154	Condition	! tmp	287:7:4970:4973	5151970	0	True				
ANR	5152155	UnaryOperationExpression	! tmp		5151970	0					
ANR	5152156	UnaryOperator	!		5151970	0					
ANR	5152157	Identifier	tmp		5151970	1					
ANR	5152158	CompoundStatement		30:13:564:564	5151970	1					
ANR	5152159	ExpressionStatement	free ( O )	288:4:4982:4990	5151970	0	True				
ANR	5152160	CallExpression	free ( O )		5151970	0					
ANR	5152161	Callee	free		5151970	0					
ANR	5152162	Identifier	free		5151970	0					
ANR	5152163	ArgumentList	O		5151970	1					
ANR	5152164	Argument	O		5151970	0					
ANR	5152165	Identifier	O		5151970	0					
ANR	5152166	ReturnStatement	return NULL ;	289:4:4996:5007	5151970	1	True				
ANR	5152167	Identifier	NULL		5151970	0					
ANR	5152168	ExpressionStatement	O = tmp	291:3:5017:5024	5151970	5	True				
ANR	5152169	AssignmentExpression	O = tmp		5151970	0		=			
ANR	5152170	Identifier	O		5151970	0					
ANR	5152171	Identifier	tmp		5151970	1					
ANR	5152172	ExpressionStatement	OE = tmp + osz	292:3:5029:5043	5151970	6	True				
ANR	5152173	AssignmentExpression	OE = tmp + osz		5151970	0		=			
ANR	5152174	Identifier	OE		5151970	0					
ANR	5152175	AdditiveExpression	tmp + osz		5151970	1		+			
ANR	5152176	Identifier	tmp		5151970	0					
ANR	5152177	Identifier	osz		5151970	1					
ANR	5152178	ExpressionStatement	o = O + delta	293:3:5048:5061	5151970	7	True				
ANR	5152179	AssignmentExpression	o = O + delta		5151970	0		=			
ANR	5152180	Identifier	o		5151970	0					
ANR	5152181	AdditiveExpression	O + delta		5151970	1		+			
ANR	5152182	Identifier	O		5151970	0					
ANR	5152183	Identifier	delta		5151970	1					
ANR	5152184	IfStatement	if ( instr )		5151970	1					
ANR	5152185	Condition	instr	295:6:5073:5077	5151970	0	True				
ANR	5152186	Identifier	instr		5151970	0					
ANR	5152187	CompoundStatement		38:13:668:668	5151970	1					
ANR	5152188	IfStatement	"if ( s [ 0 ] == '""' )"		5151970	0					
ANR	5152189	Condition	"s [ 0 ] == '""'"	296:7:5089:5099	5151970	0	True				
ANR	5152190	EqualityExpression	"s [ 0 ] == '""'"		5151970	0		==			
ANR	5152191	ArrayIndexing	s [ 0 ]		5151970	0					
ANR	5152192	Identifier	s		5151970	0					
ANR	5152193	PrimaryExpression	0		5151970	1					
ANR	5152194	PrimaryExpression	"'""'"		5151970	1					
ANR	5152195	CompoundStatement		39:20:690:690	5151970	1					
ANR	5152196	ExpressionStatement	instr = 0	297:4:5108:5117	5151970	0	True				
ANR	5152197	AssignmentExpression	instr = 0		5151970	0		=			
ANR	5152198	Identifier	instr		5151970	0					
ANR	5152199	PrimaryExpression	0		5151970	1					
ANR	5152200	ElseStatement	else		5151970	0					
ANR	5152201	IfStatement	"if ( s [ 0 ] == '\\\\' && s [ 1 ] == '""' )"		5151970	0					
ANR	5152202	Condition	"s [ 0 ] == '\\\\' && s [ 1 ] == '""'"	298:14:5133:5159	5151970	0	True				
ANR	5152203	AndExpression	"s [ 0 ] == '\\\\' && s [ 1 ] == '""'"		5151970	0		&&			
ANR	5152204	EqualityExpression	s [ 0 ] == '\\\\'		5151970	0		==			
ANR	5152205	ArrayIndexing	s [ 0 ]		5151970	0					
ANR	5152206	Identifier	s		5151970	0					
ANR	5152207	PrimaryExpression	0		5151970	1					
ANR	5152208	PrimaryExpression	'\\\\'		5151970	1					
ANR	5152209	EqualityExpression	"s [ 1 ] == '""'"		5151970	1		==			
ANR	5152210	ArrayIndexing	s [ 1 ]		5151970	0					
ANR	5152211	Identifier	s		5151970	0					
ANR	5152212	PrimaryExpression	1		5151970	1					
ANR	5152213	PrimaryExpression	"'""'"		5151970	1					
ANR	5152214	CompoundStatement		41:43:750:750	5151970	1					
ANR	5152215	ExpressionStatement	* o ++ = * s ++	299:4:5168:5179	5151970	0	True				
ANR	5152216	AssignmentExpression	* o ++ = * s ++		5151970	0		=			
ANR	5152217	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152218	UnaryOperator	*		5151970	0					
ANR	5152219	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152220	Identifier	o		5151970	0					
ANR	5152221	IncDec	++		5151970	1					
ANR	5152222	UnaryOperationExpression	* s ++		5151970	1					
ANR	5152223	UnaryOperator	*		5151970	0					
ANR	5152224	PostIncDecOperationExpression	s ++		5151970	1					
ANR	5152225	Identifier	s		5151970	0					
ANR	5152226	IncDec	++		5151970	1					
ANR	5152227	IfStatement	if ( instr )		5151970	1					
ANR	5152228	Condition	instr	301:7:5193:5197	5151970	0	True				
ANR	5152229	Identifier	instr		5151970	0					
ANR	5152230	CompoundStatement		44:14:788:788	5151970	1					
ANR	5152231	IfStatement	if ( isValue )		5151970	0					
ANR	5152232	Condition	isValue	302:8:5210:5216	5151970	0	True				
ANR	5152233	Identifier	isValue		5151970	0					
ANR	5152234	CompoundStatement		45:17:807:807	5151970	1					
ANR	5152235	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_VAL ] )"	304:5:5272:5300	5151970	0	True				
ANR	5152236	CallExpression	"EMIT_ESC ( o , colors [ JC_VAL ] )"		5151970	0					
ANR	5152237	Callee	EMIT_ESC		5151970	0					
ANR	5152238	Identifier	EMIT_ESC		5151970	0					
ANR	5152239	ArgumentList	o		5151970	1					
ANR	5152240	Argument	o		5151970	0					
ANR	5152241	Identifier	o		5151970	0					
ANR	5152242	Argument	colors [ JC_VAL ]		5151970	1					
ANR	5152243	ArrayIndexing	colors [ JC_VAL ]		5151970	0					
ANR	5152244	Identifier	colors		5151970	0					
ANR	5152245	Identifier	JC_VAL		5151970	1					
ANR	5152246	ElseStatement	else		5151970	0					
ANR	5152247	CompoundStatement		48:11:901:901	5151970	0					
ANR	5152248	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_KEY ] )"	306:5:5320:5348	5151970	0	True				
ANR	5152249	CallExpression	"EMIT_ESC ( o , colors [ JC_KEY ] )"		5151970	0					
ANR	5152250	Callee	EMIT_ESC		5151970	0					
ANR	5152251	Identifier	EMIT_ESC		5151970	0					
ANR	5152252	ArgumentList	o		5151970	1					
ANR	5152253	Argument	o		5151970	0					
ANR	5152254	Identifier	o		5151970	0					
ANR	5152255	Argument	colors [ JC_KEY ]		5151970	1					
ANR	5152256	ArrayIndexing	colors [ JC_KEY ]		5151970	0					
ANR	5152257	Identifier	colors		5151970	0					
ANR	5152258	Identifier	JC_KEY		5151970	1					
ANR	5152259	ElseStatement	else		5151970	0					
ANR	5152260	CompoundStatement		51:10:954:954	5151970	0					
ANR	5152261	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_RESET ] )"	309:4:5372:5402	5151970	0	True				
ANR	5152262	CallExpression	"EMIT_ESC ( o , colors [ JC_RESET ] )"		5151970	0					
ANR	5152263	Callee	EMIT_ESC		5151970	0					
ANR	5152264	Identifier	EMIT_ESC		5151970	0					
ANR	5152265	ArgumentList	o		5151970	1					
ANR	5152266	Argument	o		5151970	0					
ANR	5152267	Identifier	o		5151970	0					
ANR	5152268	Argument	colors [ JC_RESET ]		5151970	1					
ANR	5152269	ArrayIndexing	colors [ JC_RESET ]		5151970	0					
ANR	5152270	Identifier	colors		5151970	0					
ANR	5152271	Identifier	JC_RESET		5151970	1					
ANR	5152272	ExpressionStatement	* o ++ = * s	311:3:5412:5421	5151970	2	True				
ANR	5152273	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152274	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152275	UnaryOperator	*		5151970	0					
ANR	5152276	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152277	Identifier	o		5151970	0					
ANR	5152278	IncDec	++		5151970	1					
ANR	5152279	UnaryOperationExpression	* s		5151970	1					
ANR	5152280	UnaryOperator	*		5151970	0					
ANR	5152281	Identifier	s		5151970	1					
ANR	5152282	ContinueStatement	continue ;	312:3:5426:5434	5151970	3	True				
ANR	5152283	IfStatement	if ( indent <= 0 )		5151970	2					
ANR	5152284	Condition	indent <= 0	314:6:5446:5456	5151970	0	True				
ANR	5152285	RelationalExpression	indent <= 0		5151970	0		<=			
ANR	5152286	Identifier	indent		5151970	0					
ANR	5152287	PrimaryExpression	0		5151970	1					
ANR	5152288	CompoundStatement		57:19:1047:1047	5151970	1					
ANR	5152289	IfStatement	if ( s [ 0 ] != '{' && s [ 0 ] != '[' )		5151970	0					
ANR	5152290	Condition	s [ 0 ] != '{' && s [ 0 ] != '['	316:7:5497:5522	5151970	0	True				
ANR	5152291	AndExpression	s [ 0 ] != '{' && s [ 0 ] != '['		5151970	0		&&			
ANR	5152292	EqualityExpression	s [ 0 ] != '{'		5151970	0		!=			
ANR	5152293	ArrayIndexing	s [ 0 ]		5151970	0					
ANR	5152294	Identifier	s		5151970	0					
ANR	5152295	PrimaryExpression	0		5151970	1					
ANR	5152296	PrimaryExpression	'{'		5151970	1					
ANR	5152297	EqualityExpression	s [ 0 ] != '['		5151970	1		!=			
ANR	5152298	ArrayIndexing	s [ 0 ]		5151970	0					
ANR	5152299	Identifier	s		5151970	0					
ANR	5152300	PrimaryExpression	0		5151970	1					
ANR	5152301	PrimaryExpression	'['		5151970	1					
ANR	5152302	CompoundStatement		59:35:1113:1113	5151970	1					
ANR	5152303	IfStatement	if ( * s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' )		5151970	0					
ANR	5152304	Condition	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '	317:8:5535:5585	5151970	0	True				
ANR	5152305	OrExpression	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' '		5151970	0		||			
ANR	5152306	EqualityExpression	* s == '\\n'		5151970	0		==			
ANR	5152307	UnaryOperationExpression	* s		5151970	0					
ANR	5152308	UnaryOperator	*		5151970	0					
ANR	5152309	Identifier	s		5151970	1					
ANR	5152310	PrimaryExpression	'\\n'		5151970	1					
ANR	5152311	OrExpression	* s == '\\r' || * s == '\\t' || * s == ' '		5151970	1		||			
ANR	5152312	EqualityExpression	* s == '\\r'		5151970	0		==			
ANR	5152313	UnaryOperationExpression	* s		5151970	0					
ANR	5152314	UnaryOperator	*		5151970	0					
ANR	5152315	Identifier	s		5151970	1					
ANR	5152316	PrimaryExpression	'\\r'		5151970	1					
ANR	5152317	OrExpression	* s == '\\t' || * s == ' '		5151970	1		||			
ANR	5152318	EqualityExpression	* s == '\\t'		5151970	0		==			
ANR	5152319	UnaryOperationExpression	* s		5151970	0					
ANR	5152320	UnaryOperator	*		5151970	0					
ANR	5152321	Identifier	s		5151970	1					
ANR	5152322	PrimaryExpression	'\\t'		5151970	1					
ANR	5152323	EqualityExpression	* s == ' '		5151970	1		==			
ANR	5152324	UnaryOperationExpression	* s		5151970	0					
ANR	5152325	UnaryOperator	*		5151970	0					
ANR	5152326	Identifier	s		5151970	1					
ANR	5152327	PrimaryExpression	' '		5151970	1					
ANR	5152328	CompoundStatement		60:61:1176:1176	5151970	1					
ANR	5152329	ExpressionStatement	* o ++ = * s	318:5:5595:5604	5151970	0	True				
ANR	5152330	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152331	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152332	UnaryOperator	*		5151970	0					
ANR	5152333	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152334	Identifier	o		5151970	0					
ANR	5152335	IncDec	++		5151970	1					
ANR	5152336	UnaryOperationExpression	* s		5151970	1					
ANR	5152337	UnaryOperator	*		5151970	0					
ANR	5152338	Identifier	s		5151970	1					
ANR	5152339	ContinueStatement	continue ;	320:4:5616:5624	5151970	1	True				
ANR	5152340	IfStatement	"if ( s [ 0 ] == '""' )"		5151970	3					
ANR	5152341	Condition	"s [ 0 ] == '""'"	324:6:5642:5652	5151970	0	True				
ANR	5152342	EqualityExpression	"s [ 0 ] == '""'"		5151970	0		==			
ANR	5152343	ArrayIndexing	s [ 0 ]		5151970	0					
ANR	5152344	Identifier	s		5151970	0					
ANR	5152345	PrimaryExpression	0		5151970	1					
ANR	5152346	PrimaryExpression	"'""'"		5151970	1					
ANR	5152347	CompoundStatement		67:19:1243:1243	5151970	1					
ANR	5152348	ExpressionStatement	instr = 1	325:3:5660:5669	5151970	0	True				
ANR	5152349	AssignmentExpression	instr = 1		5151970	0		=			
ANR	5152350	Identifier	instr		5151970	0					
ANR	5152351	PrimaryExpression	1		5151970	1					
ANR	5152352	IfStatement	if ( * s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' || ! IS_PRINTABLE ( * s ) )		5151970	4					
ANR	5152353	Condition	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' || ! IS_PRINTABLE ( * s )	327:6:5681:5752	5151970	0	True				
ANR	5152354	OrExpression	* s == '\\n' || * s == '\\r' || * s == '\\t' || * s == ' ' || ! IS_PRINTABLE ( * s )		5151970	0		||			
ANR	5152355	EqualityExpression	* s == '\\n'		5151970	0		==			
ANR	5152356	UnaryOperationExpression	* s		5151970	0					
ANR	5152357	UnaryOperator	*		5151970	0					
ANR	5152358	Identifier	s		5151970	1					
ANR	5152359	PrimaryExpression	'\\n'		5151970	1					
ANR	5152360	OrExpression	* s == '\\r' || * s == '\\t' || * s == ' ' || ! IS_PRINTABLE ( * s )		5151970	1		||			
ANR	5152361	EqualityExpression	* s == '\\r'		5151970	0		==			
ANR	5152362	UnaryOperationExpression	* s		5151970	0					
ANR	5152363	UnaryOperator	*		5151970	0					
ANR	5152364	Identifier	s		5151970	1					
ANR	5152365	PrimaryExpression	'\\r'		5151970	1					
ANR	5152366	OrExpression	* s == '\\t' || * s == ' ' || ! IS_PRINTABLE ( * s )		5151970	1		||			
ANR	5152367	EqualityExpression	* s == '\\t'		5151970	0		==			
ANR	5152368	UnaryOperationExpression	* s		5151970	0					
ANR	5152369	UnaryOperator	*		5151970	0					
ANR	5152370	Identifier	s		5151970	1					
ANR	5152371	PrimaryExpression	'\\t'		5151970	1					
ANR	5152372	OrExpression	* s == ' ' || ! IS_PRINTABLE ( * s )		5151970	1		||			
ANR	5152373	EqualityExpression	* s == ' '		5151970	0		==			
ANR	5152374	UnaryOperationExpression	* s		5151970	0					
ANR	5152375	UnaryOperator	*		5151970	0					
ANR	5152376	Identifier	s		5151970	1					
ANR	5152377	PrimaryExpression	' '		5151970	1					
ANR	5152378	UnaryOperationExpression	! IS_PRINTABLE ( * s )		5151970	1					
ANR	5152379	UnaryOperator	!		5151970	0					
ANR	5152380	CallExpression	IS_PRINTABLE ( * s )		5151970	1					
ANR	5152381	Callee	IS_PRINTABLE		5151970	0					
ANR	5152382	Identifier	IS_PRINTABLE		5151970	0					
ANR	5152383	ArgumentList	* s		5151970	1					
ANR	5152384	Argument	* s		5151970	0					
ANR	5152385	UnaryOperationExpression	* s		5151970	0					
ANR	5152386	UnaryOperator	*		5151970	0					
ANR	5152387	Identifier	s		5151970	1					
ANR	5152388	CompoundStatement		70:80:1343:1343	5151970	1					
ANR	5152389	ContinueStatement	continue ;	328:3:5760:5768	5151970	0	True				
ANR	5152390	SwitchStatement	switch ( * s )		5151970	5					
ANR	5152391	Condition	* s	330:10:5784:5785	5151970	0	True				
ANR	5152392	UnaryOperationExpression	* s		5151970	0					
ANR	5152393	UnaryOperator	*		5151970	0					
ANR	5152394	Identifier	s		5151970	1					
ANR	5152395	CompoundStatement		73:14:1376:1376	5151970	1					
ANR	5152396	Label	case ':' :	331:2:5792:5800	5151970	0	True				
ANR	5152397	ExpressionStatement	* o ++ = * s	332:3:5805:5814	5151970	1	True				
ANR	5152398	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152399	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152400	UnaryOperator	*		5151970	0					
ANR	5152401	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152402	Identifier	o		5151970	0					
ANR	5152403	IncDec	++		5151970	1					
ANR	5152404	UnaryOperationExpression	* s		5151970	1					
ANR	5152405	UnaryOperator	*		5151970	0					
ANR	5152406	Identifier	s		5151970	1					
ANR	5152407	ExpressionStatement	* o ++ = ' '	333:3:5819:5829	5151970	2	True				
ANR	5152408	AssignmentExpression	* o ++ = ' '		5151970	0		=			
ANR	5152409	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152410	UnaryOperator	*		5151970	0					
ANR	5152411	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152412	Identifier	o		5151970	0					
ANR	5152413	IncDec	++		5151970	1					
ANR	5152414	PrimaryExpression	' '		5151970	1					
ANR	5152415	IfStatement	"if ( ! strncmp ( s + 1 , ""true"" , 4 ) )"		5151970	3					
ANR	5152416	Condition	"! strncmp ( s + 1 , ""true"" , 4 )"	334:7:5838:5864	5151970	0	True				
ANR	5152417	UnaryOperationExpression	"! strncmp ( s + 1 , ""true"" , 4 )"		5151970	0					
ANR	5152418	UnaryOperator	!		5151970	0					
ANR	5152419	CallExpression	"strncmp ( s + 1 , ""true"" , 4 )"		5151970	1					
ANR	5152420	Callee	strncmp		5151970	0					
ANR	5152421	Identifier	strncmp		5151970	0					
ANR	5152422	ArgumentList	s + 1		5151970	1					
ANR	5152423	Argument	s + 1		5151970	0					
ANR	5152424	AdditiveExpression	s + 1		5151970	0		+			
ANR	5152425	Identifier	s		5151970	0					
ANR	5152426	PrimaryExpression	1		5151970	1					
ANR	5152427	Argument	"""true"""		5151970	1					
ANR	5152428	PrimaryExpression	"""true"""		5151970	0					
ANR	5152429	Argument	4		5151970	2					
ANR	5152430	PrimaryExpression	4		5151970	0					
ANR	5152431	CompoundStatement		77:36:1455:1455	5151970	1					
ANR	5152432	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_TRUE ] )"	335:4:5873:5902	5151970	0	True				
ANR	5152433	CallExpression	"EMIT_ESC ( o , colors [ JC_TRUE ] )"		5151970	0					
ANR	5152434	Callee	EMIT_ESC		5151970	0					
ANR	5152435	Identifier	EMIT_ESC		5151970	0					
ANR	5152436	ArgumentList	o		5151970	1					
ANR	5152437	Argument	o		5151970	0					
ANR	5152438	Identifier	o		5151970	0					
ANR	5152439	Argument	colors [ JC_TRUE ]		5151970	1					
ANR	5152440	ArrayIndexing	colors [ JC_TRUE ]		5151970	0					
ANR	5152441	Identifier	colors		5151970	0					
ANR	5152442	Identifier	JC_TRUE		5151970	1					
ANR	5152443	ElseStatement	else		5151970	0					
ANR	5152444	IfStatement	"if ( ! strncmp ( s + 1 , ""false"" , 5 ) )"		5151970	0					
ANR	5152445	Condition	"! strncmp ( s + 1 , ""false"" , 5 )"	336:14:5918:5945	5151970	0	True				
ANR	5152446	UnaryOperationExpression	"! strncmp ( s + 1 , ""false"" , 5 )"		5151970	0					
ANR	5152447	UnaryOperator	!		5151970	0					
ANR	5152448	CallExpression	"strncmp ( s + 1 , ""false"" , 5 )"		5151970	1					
ANR	5152449	Callee	strncmp		5151970	0					
ANR	5152450	Identifier	strncmp		5151970	0					
ANR	5152451	ArgumentList	s + 1		5151970	1					
ANR	5152452	Argument	s + 1		5151970	0					
ANR	5152453	AdditiveExpression	s + 1		5151970	0		+			
ANR	5152454	Identifier	s		5151970	0					
ANR	5152455	PrimaryExpression	1		5151970	1					
ANR	5152456	Argument	"""false"""		5151970	1					
ANR	5152457	PrimaryExpression	"""false"""		5151970	0					
ANR	5152458	Argument	5		5151970	2					
ANR	5152459	PrimaryExpression	5		5151970	0					
ANR	5152460	CompoundStatement		79:44:1536:1536	5151970	1					
ANR	5152461	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_FALSE ] )"	337:4:5954:5984	5151970	0	True				
ANR	5152462	CallExpression	"EMIT_ESC ( o , colors [ JC_FALSE ] )"		5151970	0					
ANR	5152463	Callee	EMIT_ESC		5151970	0					
ANR	5152464	Identifier	EMIT_ESC		5151970	0					
ANR	5152465	ArgumentList	o		5151970	1					
ANR	5152466	Argument	o		5151970	0					
ANR	5152467	Identifier	o		5151970	0					
ANR	5152468	Argument	colors [ JC_FALSE ]		5151970	1					
ANR	5152469	ArrayIndexing	colors [ JC_FALSE ]		5151970	0					
ANR	5152470	Identifier	colors		5151970	0					
ANR	5152471	Identifier	JC_FALSE		5151970	1					
ANR	5152472	ExpressionStatement	isValue = true	339:3:5994:6008	5151970	4	True				
ANR	5152473	AssignmentExpression	isValue = true		5151970	0		=			
ANR	5152474	Identifier	isValue		5151970	0					
ANR	5152475	Identifier	true		5151970	1					
ANR	5152476	BreakStatement	break ;	340:3:6013:6018	5151970	5	True				
ANR	5152477	Label	"case ',' :"	341:2:6022:6030	5151970	6	True				
ANR	5152478	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_RESET ] )"	342:3:6035:6065	5151970	7	True				
ANR	5152479	CallExpression	"EMIT_ESC ( o , colors [ JC_RESET ] )"		5151970	0					
ANR	5152480	Callee	EMIT_ESC		5151970	0					
ANR	5152481	Identifier	EMIT_ESC		5151970	0					
ANR	5152482	ArgumentList	o		5151970	1					
ANR	5152483	Argument	o		5151970	0					
ANR	5152484	Identifier	o		5151970	0					
ANR	5152485	Argument	colors [ JC_RESET ]		5151970	1					
ANR	5152486	ArrayIndexing	colors [ JC_RESET ]		5151970	0					
ANR	5152487	Identifier	colors		5151970	0					
ANR	5152488	Identifier	JC_RESET		5151970	1					
ANR	5152489	ExpressionStatement	* o ++ = * s	343:3:6070:6079	5151970	8	True				
ANR	5152490	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152491	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152492	UnaryOperator	*		5151970	0					
ANR	5152493	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152494	Identifier	o		5151970	0					
ANR	5152495	IncDec	++		5151970	1					
ANR	5152496	UnaryOperationExpression	* s		5151970	1					
ANR	5152497	UnaryOperator	*		5151970	0					
ANR	5152498	Identifier	s		5151970	1					
ANR	5152499	ExpressionStatement	* o ++ = '\\n'	344:3:6084:6095	5151970	9	True				
ANR	5152500	AssignmentExpression	* o ++ = '\\n'		5151970	0		=			
ANR	5152501	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152502	UnaryOperator	*		5151970	0					
ANR	5152503	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152504	Identifier	o		5151970	0					
ANR	5152505	IncDec	++		5151970	1					
ANR	5152506	PrimaryExpression	'\\n'		5151970	1					
ANR	5152507	ExpressionStatement	isValue = false	345:3:6100:6115	5151970	10	True				
ANR	5152508	AssignmentExpression	isValue = false		5151970	0		=			
ANR	5152509	Identifier	isValue		5151970	0					
ANR	5152510	Identifier	false		5151970	1					
ANR	5152511	ExpressionStatement	"doIndent ( indent , & o , tab )"	346:3:6120:6146	5151970	11	True				
ANR	5152512	CallExpression	"doIndent ( indent , & o , tab )"		5151970	0					
ANR	5152513	Callee	doIndent		5151970	0					
ANR	5152514	Identifier	doIndent		5151970	0					
ANR	5152515	ArgumentList	indent		5151970	1					
ANR	5152516	Argument	indent		5151970	0					
ANR	5152517	Identifier	indent		5151970	0					
ANR	5152518	Argument	& o		5151970	1					
ANR	5152519	UnaryOperationExpression	& o		5151970	0					
ANR	5152520	UnaryOperator	&		5151970	0					
ANR	5152521	Identifier	o		5151970	1					
ANR	5152522	Argument	tab		5151970	2					
ANR	5152523	Identifier	tab		5151970	0					
ANR	5152524	BreakStatement	break ;	347:3:6151:6156	5151970	12	True				
ANR	5152525	Label	case '{' :	348:2:6160:6168	5151970	13	True				
ANR	5152526	Label	case '[' :	349:2:6172:6180	5151970	14	True				
ANR	5152527	ExpressionStatement	isValue = false	350:3:6185:6200	5151970	15	True				
ANR	5152528	AssignmentExpression	isValue = false		5151970	0		=			
ANR	5152529	Identifier	isValue		5151970	0					
ANR	5152530	Identifier	false		5151970	1					
ANR	5152531	ExpressionStatement	* o ++ = * s	351:3:6205:6214	5151970	16	True				
ANR	5152532	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152533	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152534	UnaryOperator	*		5151970	0					
ANR	5152535	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152536	Identifier	o		5151970	0					
ANR	5152537	IncDec	++		5151970	1					
ANR	5152538	UnaryOperationExpression	* s		5151970	1					
ANR	5152539	UnaryOperator	*		5151970	0					
ANR	5152540	Identifier	s		5151970	1					
ANR	5152541	ExpressionStatement	* o ++ = ( indent != - 1 ) ? '\\n' : ' '	352:3:6219:6251	5151970	17	True				
ANR	5152542	AssignmentExpression	* o ++ = ( indent != - 1 ) ? '\\n' : ' '		5151970	0		=			
ANR	5152543	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152544	UnaryOperator	*		5151970	0					
ANR	5152545	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152546	Identifier	o		5151970	0					
ANR	5152547	IncDec	++		5151970	1					
ANR	5152548	ConditionalExpression	( indent != - 1 ) ? '\\n' : ' '		5151970	1					
ANR	5152549	Condition	indent != - 1		5151970	0					
ANR	5152550	EqualityExpression	indent != - 1		5151970	0		!=			
ANR	5152551	Identifier	indent		5151970	0					
ANR	5152552	UnaryOperationExpression	- 1		5151970	1					
ANR	5152553	UnaryOperator	-		5151970	0					
ANR	5152554	PrimaryExpression	1		5151970	1					
ANR	5152555	PrimaryExpression	'\\n'		5151970	1					
ANR	5152556	PrimaryExpression	' '		5151970	2					
ANR	5152557	IfStatement	if ( indent > 128 )		5151970	18					
ANR	5152558	Condition	indent > 128	353:7:6260:6271	5151970	0	True				
ANR	5152559	RelationalExpression	indent > 128		5151970	0		>			
ANR	5152560	Identifier	indent		5151970	0					
ANR	5152561	PrimaryExpression	128		5151970	1					
ANR	5152562	CompoundStatement		96:21:1862:1862	5151970	1					
ANR	5152563	ExpressionStatement	"eprintf ( ""JSON indentation is too deep\\n"" )"	354:4:6280:6322	5151970	0	True				
ANR	5152564	CallExpression	"eprintf ( ""JSON indentation is too deep\\n"" )"		5151970	0					
ANR	5152565	Callee	eprintf		5151970	0					
ANR	5152566	Identifier	eprintf		5151970	0					
ANR	5152567	ArgumentList	"""JSON indentation is too deep\\n"""		5151970	1					
ANR	5152568	Argument	"""JSON indentation is too deep\\n"""		5151970	0					
ANR	5152569	PrimaryExpression	"""JSON indentation is too deep\\n"""		5151970	0					
ANR	5152570	ExpressionStatement	indent = 0	355:4:6328:6338	5151970	1	True				
ANR	5152571	AssignmentExpression	indent = 0		5151970	0		=			
ANR	5152572	Identifier	indent		5151970	0					
ANR	5152573	PrimaryExpression	0		5151970	1					
ANR	5152574	ElseStatement	else		5151970	0					
ANR	5152575	CompoundStatement		99:10:1938:1938	5151970	0					
ANR	5152576	ExpressionStatement	indent ++	357:4:6356:6364	5151970	0	True				
ANR	5152577	PostIncDecOperationExpression	indent ++		5151970	0					
ANR	5152578	Identifier	indent		5151970	0					
ANR	5152579	IncDec	++		5151970	1					
ANR	5152580	ExpressionStatement	"doIndent ( indent , & o , tab )"	359:3:6374:6400	5151970	19	True				
ANR	5152581	CallExpression	"doIndent ( indent , & o , tab )"		5151970	0					
ANR	5152582	Callee	doIndent		5151970	0					
ANR	5152583	Identifier	doIndent		5151970	0					
ANR	5152584	ArgumentList	indent		5151970	1					
ANR	5152585	Argument	indent		5151970	0					
ANR	5152586	Identifier	indent		5151970	0					
ANR	5152587	Argument	& o		5151970	1					
ANR	5152588	UnaryOperationExpression	& o		5151970	0					
ANR	5152589	UnaryOperator	&		5151970	0					
ANR	5152590	Identifier	o		5151970	1					
ANR	5152591	Argument	tab		5151970	2					
ANR	5152592	Identifier	tab		5151970	0					
ANR	5152593	BreakStatement	break ;	360:3:6405:6410	5151970	20	True				
ANR	5152594	Label	case '}' :	361:2:6414:6422	5151970	21	True				
ANR	5152595	Label	case ']' :	362:2:6426:6434	5151970	22	True				
ANR	5152596	ExpressionStatement	"EMIT_ESC ( o , colors [ JC_RESET ] )"	363:3:6439:6469	5151970	23	True				
ANR	5152597	CallExpression	"EMIT_ESC ( o , colors [ JC_RESET ] )"		5151970	0					
ANR	5152598	Callee	EMIT_ESC		5151970	0					
ANR	5152599	Identifier	EMIT_ESC		5151970	0					
ANR	5152600	ArgumentList	o		5151970	1					
ANR	5152601	Argument	o		5151970	0					
ANR	5152602	Identifier	o		5151970	0					
ANR	5152603	Argument	colors [ JC_RESET ]		5151970	1					
ANR	5152604	ArrayIndexing	colors [ JC_RESET ]		5151970	0					
ANR	5152605	Identifier	colors		5151970	0					
ANR	5152606	Identifier	JC_RESET		5151970	1					
ANR	5152607	ExpressionStatement	isValue = false	364:3:6474:6489	5151970	24	True				
ANR	5152608	AssignmentExpression	isValue = false		5151970	0		=			
ANR	5152609	Identifier	isValue		5151970	0					
ANR	5152610	Identifier	false		5151970	1					
ANR	5152611	ExpressionStatement	* o ++ = '\\n'	365:3:6494:6505	5151970	25	True				
ANR	5152612	AssignmentExpression	* o ++ = '\\n'		5151970	0		=			
ANR	5152613	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152614	UnaryOperator	*		5151970	0					
ANR	5152615	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152616	Identifier	o		5151970	0					
ANR	5152617	IncDec	++		5151970	1					
ANR	5152618	PrimaryExpression	'\\n'		5151970	1					
ANR	5152619	ExpressionStatement	indent --	366:3:6510:6518	5151970	26	True				
ANR	5152620	PostIncDecOperationExpression	indent --		5151970	0					
ANR	5152621	Identifier	indent		5151970	0					
ANR	5152622	IncDec	--		5151970	1					
ANR	5152623	ExpressionStatement	"doIndent ( indent , & o , tab )"	367:3:6523:6549	5151970	27	True				
ANR	5152624	CallExpression	"doIndent ( indent , & o , tab )"		5151970	0					
ANR	5152625	Callee	doIndent		5151970	0					
ANR	5152626	Identifier	doIndent		5151970	0					
ANR	5152627	ArgumentList	indent		5151970	1					
ANR	5152628	Argument	indent		5151970	0					
ANR	5152629	Identifier	indent		5151970	0					
ANR	5152630	Argument	& o		5151970	1					
ANR	5152631	UnaryOperationExpression	& o		5151970	0					
ANR	5152632	UnaryOperator	&		5151970	0					
ANR	5152633	Identifier	o		5151970	1					
ANR	5152634	Argument	tab		5151970	2					
ANR	5152635	Identifier	tab		5151970	0					
ANR	5152636	ExpressionStatement	* o ++ = * s	368:3:6554:6563	5151970	28	True				
ANR	5152637	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152638	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152639	UnaryOperator	*		5151970	0					
ANR	5152640	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152641	Identifier	o		5151970	0					
ANR	5152642	IncDec	++		5151970	1					
ANR	5152643	UnaryOperationExpression	* s		5151970	1					
ANR	5152644	UnaryOperator	*		5151970	0					
ANR	5152645	Identifier	s		5151970	1					
ANR	5152646	BreakStatement	break ;	369:3:6568:6573	5151970	29	True				
ANR	5152647	Label	default :	370:2:6577:6584	5151970	30	True				
ANR	5152648	Identifier	default		5151970	0					
ANR	5152649	ExpressionStatement	* o ++ = * s	371:3:6589:6598	5151970	31	True				
ANR	5152650	AssignmentExpression	* o ++ = * s		5151970	0		=			
ANR	5152651	UnaryOperationExpression	* o ++		5151970	0					
ANR	5152652	UnaryOperator	*		5151970	0					
ANR	5152653	PostIncDecOperationExpression	o ++		5151970	1					
ANR	5152654	Identifier	o		5151970	0					
ANR	5152655	IncDec	++		5151970	1					
ANR	5152656	UnaryOperationExpression	* s		5151970	1					
ANR	5152657	UnaryOperator	*		5151970	0					
ANR	5152658	Identifier	s		5151970	1					
ANR	5152659	ExpressionStatement	* o = 0	374:1:6608:6614	5151970	13	True				
ANR	5152660	AssignmentExpression	* o = 0		5151970	0		=			
ANR	5152661	UnaryOperationExpression	* o		5151970	0					
ANR	5152662	UnaryOperator	*		5151970	0					
ANR	5152663	Identifier	o		5151970	1					
ANR	5152664	PrimaryExpression	0		5151970	1					
ANR	5152665	ReturnStatement	return O ;	375:1:6617:6625	5151970	14	True				
ANR	5152666	Identifier	O		5151970	0					
ANR	5152667	ReturnType	R_API char *		5151970	1					
ANR	5152668	Identifier	r_print_json_indent		5151970	2					
ANR	5152669	ParameterList	"const char * s , bool color , const char * tab , const char * * palette"		5151970	3					
ANR	5152670	Parameter	const char * s	258:32:4345:4357	5151970	0	True				
ANR	5152671	ParameterType	const char *		5151970	0					
ANR	5152672	Identifier	s		5151970	1					
ANR	5152673	Parameter	bool color	258:47:4360:4369	5151970	1	True				
ANR	5152674	ParameterType	bool		5151970	0					
ANR	5152675	Identifier	color		5151970	1					
ANR	5152676	Parameter	const char * tab	258:59:4372:4386	5151970	2	True				
ANR	5152677	ParameterType	const char *		5151970	0					
ANR	5152678	Identifier	tab		5151970	1					
ANR	5152679	Parameter	const char * * palette	258:76:4389:4408	5151970	3	True				
ANR	5152680	ParameterType	const char * *		5151970	0					
ANR	5152681	Identifier	palette		5151970	1					
ANR	5152682	CFGEntryNode	ENTRY		5151970		True				
ANR	5152683	CFGExitNode	EXIT		5151970		True				
ANR	5152684	Symbol	* s ++		5151970						
ANR	5152685	Symbol	IS_PRINTABLE		5151970						
ANR	5152686	Symbol	color		5151970						
ANR	5152687	Symbol	indent		5151970						
ANR	5152688	Symbol	* o ++		5151970						
ANR	5152689	Symbol	delta		5151970						
ANR	5152690	Symbol	realloc		5151970						
ANR	5152691	Symbol	colors		5151970						
ANR	5152692	Symbol	O		5151970						
ANR	5152693	Symbol	JC_FALSE		5151970						
ANR	5152694	Symbol	strlen		5151970						
ANR	5152695	Symbol	* colors		5151970						
ANR	5152696	Symbol	strncmp		5151970						
ANR	5152697	Symbol	tab		5151970						
ANR	5152698	Symbol	OE		5151970						
ANR	5152699	Symbol	tmp		5151970						
ANR	5152700	Symbol	instr		5151970						
ANR	5152701	Symbol	osz		5151970						
ANR	5152702	Symbol	JC_TRUE		5151970						
ANR	5152703	Symbol	JC_VAL		5151970						
ANR	5152704	Symbol	palette		5151970						
ANR	5152705	Symbol	JC_KEY		5151970						
ANR	5152706	Symbol	indentSize		5151970						
ANR	5152707	Symbol	malloc		5151970						
ANR	5152708	Symbol	NULL		5151970						
ANR	5152709	Symbol	origColors		5151970						
ANR	5152710	Symbol	false		5151970						
ANR	5152711	Symbol	* JC_RESET		5151970						
ANR	5152712	Symbol	* JC_VAL		5151970						
ANR	5152713	Symbol	o		5151970						
ANR	5152714	Symbol	JC_RESET		5151970						
ANR	5152715	Symbol	isValue		5151970						
ANR	5152716	Symbol	s		5151970						
ANR	5152717	Symbol	* JC_KEY		5151970						
ANR	5152718	Symbol	& o		5151970						
ANR	5152719	Symbol	true		5151970						
ANR	5152720	Symbol	* o		5151970						
ANR	5152721	Symbol	* JC_FALSE		5151970						
ANR	5152722	Symbol	* s		5151970						
ANR	5152723	Symbol	* JC_TRUE		5151970						
