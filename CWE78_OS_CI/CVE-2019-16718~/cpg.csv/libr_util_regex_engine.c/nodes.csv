command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5198518	File	data/converged/CVE-2019-16718~_radare2/libr_util_regex_engine.c								
ANR	5198519	ClassDef	match	71:0:2612:3132							
ANR	5198520	DeclStmt									
ANR	5198521	Decl							struct re_guts	struct re_guts *	g
ANR	5198522	DeclStmt									
ANR	5198523	Decl							int	int	eflags
ANR	5198524	DeclStmt									
ANR	5198525	Decl							RRegexMatch	RRegexMatch *	pmatch
ANR	5198526	DeclStmt									
ANR	5198527	Decl							char	char *	offp
ANR	5198528	DeclStmt									
ANR	5198529	Decl							char	char *	beginp
ANR	5198530	DeclStmt									
ANR	5198531	Decl							char	char *	endp
ANR	5198532	DeclStmt									
ANR	5198533	Decl							char	char *	coldp
ANR	5198534	DeclStmt									
ANR	5198535	Decl							char	char * *	lastpos
ANR	5198536	DeclStmt									
ANR	5198537	Decl							states	states	st
ANR	5198538	DeclStmt									
ANR	5198539	Decl							states	states	fresh
ANR	5198540	DeclStmt									
ANR	5198541	Decl							states	states	tmp
ANR	5198542	DeclStmt									
ANR	5198543	Decl							states	states	empty
ANR	5198544	DeclStmt									
ANR	5198545	Decl							int	"int ( struct re_guts * , char * , size_t , RRegexMatch [ ] , int )"	matcher
ANR	5198546	DeclStmt									
ANR	5198547	Decl							char	"char * ( struct match * , char * , char * , sopno , sopno )"	dissect
ANR	5198548	DeclStmt									
ANR	5198549	Decl							char	"char * ( struct match * , char * , char * , sopno , sopno , sopno , int )"	backref
ANR	5198550	DeclStmt									
ANR	5198551	Decl							char	"char * ( struct match * , char * , char * , sopno , sopno )"	fast
ANR	5198552	DeclStmt									
ANR	5198553	Decl							char	"char * ( struct match * , char * , char * , sopno , sopno )"	slow
ANR	5198554	DeclStmt									
ANR	5198555	Decl							states	"states ( struct re_guts * , sopno , sopno , states , int , states )"	step
ANR	5198556	DeclStmt									
ANR	5198557	Decl							void	"void ( struct match * , char * , states , int , FILE * )"	print
ANR	5198558	DeclStmt									
ANR	5198559	Decl							void	"void ( struct match * , char * , char * , char * , sopno , sopno )"	at
ANR	5198560	DeclStmt									
ANR	5198561	Decl							char	char * ( int )	pchar
ANR	5198562	DeclStmt									
ANR	5198563	Decl							int	int	nope
ANR	5198564	Function	matcher	127:0:4448:8732							
ANR	5198565	FunctionDef	"matcher (struct re_guts * g , char * string , size_t nmatch , RRegexMatch pmatch [ ] , int eflags)"		5198564	0					
ANR	5198566	CompoundStatement		130:0:4596:8732	5198564	0					
ANR	5198567	IdentifierDeclStatement	char * endp ;	131:1:4599:4609	5198564	0	True				
ANR	5198568	IdentifierDecl	* endp		5198564	0					
ANR	5198569	IdentifierDeclType	char *		5198564	0					
ANR	5198570	Identifier	endp		5198564	1					
ANR	5198571	IdentifierDeclStatement	int i ;	132:1:4612:4617	5198564	1	True				
ANR	5198572	IdentifierDecl	i		5198564	0					
ANR	5198573	IdentifierDeclType	int		5198564	0					
ANR	5198574	Identifier	i		5198564	1					
ANR	5198575	IdentifierDeclStatement	struct match mv ;	133:1:4620:4635	5198564	2	True				
ANR	5198576	IdentifierDecl	mv		5198564	0					
ANR	5198577	IdentifierDeclType	struct match		5198564	0					
ANR	5198578	Identifier	mv		5198564	1					
ANR	5198579	IdentifierDeclStatement	struct match * m = & mv ;	134:1:4638:4659	5198564	3	True				
ANR	5198580	IdentifierDecl	* m = & mv		5198564	0					
ANR	5198581	IdentifierDeclType	struct match *		5198564	0					
ANR	5198582	Identifier	m		5198564	1					
ANR	5198583	AssignmentExpression	* m = & mv		5198564	2		=			
ANR	5198584	Identifier	m		5198564	0					
ANR	5198585	UnaryOperationExpression	& mv		5198564	1					
ANR	5198586	UnaryOperator	&		5198564	0					
ANR	5198587	Identifier	mv		5198564	1					
ANR	5198588	IdentifierDeclStatement	char * dp ;	135:1:4662:4670	5198564	4	True				
ANR	5198589	IdentifierDecl	* dp		5198564	0					
ANR	5198590	IdentifierDeclType	char *		5198564	0					
ANR	5198591	Identifier	dp		5198564	1					
ANR	5198592	IdentifierDeclStatement	const sopno gf = g -> firststate + 1 ;	136:1:4673:4705	5198564	5	True				
ANR	5198593	IdentifierDecl	gf = g -> firststate + 1		5198564	0					
ANR	5198594	IdentifierDeclType	const sopno		5198564	0					
ANR	5198595	Identifier	gf		5198564	1					
ANR	5198596	AssignmentExpression	gf = g -> firststate + 1		5198564	2		=			
ANR	5198597	Identifier	gf		5198564	0					
ANR	5198598	AdditiveExpression	g -> firststate + 1		5198564	1		+			
ANR	5198599	PtrMemberAccess	g -> firststate		5198564	0					
ANR	5198600	Identifier	g		5198564	0					
ANR	5198601	Identifier	firststate		5198564	1					
ANR	5198602	PrimaryExpression	1		5198564	1					
ANR	5198603	IdentifierDeclStatement	const sopno gl = g -> laststate ;	137:1:4726:4755	5198564	6	True				
ANR	5198604	IdentifierDecl	gl = g -> laststate		5198564	0					
ANR	5198605	IdentifierDeclType	const sopno		5198564	0					
ANR	5198606	Identifier	gl		5198564	1					
ANR	5198607	AssignmentExpression	gl = g -> laststate		5198564	2		=			
ANR	5198608	Identifier	gl		5198564	0					
ANR	5198609	PtrMemberAccess	g -> laststate		5198564	1					
ANR	5198610	Identifier	g		5198564	0					
ANR	5198611	Identifier	laststate		5198564	1					
ANR	5198612	IdentifierDeclStatement	char * start ;	138:1:4758:4769	5198564	7	True				
ANR	5198613	IdentifierDecl	* start		5198564	0					
ANR	5198614	IdentifierDeclType	char *		5198564	0					
ANR	5198615	Identifier	start		5198564	1					
ANR	5198616	IdentifierDeclStatement	char * stop ;	139:1:4772:4782	5198564	8	True				
ANR	5198617	IdentifierDecl	* stop		5198564	0					
ANR	5198618	IdentifierDeclType	char *		5198564	0					
ANR	5198619	Identifier	stop		5198564	1					
ANR	5198620	IfStatement	if ( g -> cflags & R_REGEX_NOSUB )		5198564	9					
ANR	5198621	Condition	g -> cflags & R_REGEX_NOSUB	142:5:4835:4857	5198564	0	True				
ANR	5198622	BitAndExpression	g -> cflags & R_REGEX_NOSUB		5198564	0		&			
ANR	5198623	PtrMemberAccess	g -> cflags		5198564	0					
ANR	5198624	Identifier	g		5198564	0					
ANR	5198625	Identifier	cflags		5198564	1					
ANR	5198626	Identifier	R_REGEX_NOSUB		5198564	1					
ANR	5198627	ExpressionStatement	nmatch = 0	143:2:4862:4872	5198564	1	True				
ANR	5198628	AssignmentExpression	nmatch = 0		5198564	0		=			
ANR	5198629	Identifier	nmatch		5198564	0					
ANR	5198630	PrimaryExpression	0		5198564	1					
ANR	5198631	IfStatement	if ( eflags & R_REGEX_STARTEND )		5198564	10					
ANR	5198632	Condition	eflags & R_REGEX_STARTEND	144:5:4879:4901	5198564	0	True				
ANR	5198633	BitAndExpression	eflags & R_REGEX_STARTEND		5198564	0		&			
ANR	5198634	Identifier	eflags		5198564	0					
ANR	5198635	Identifier	R_REGEX_STARTEND		5198564	1					
ANR	5198636	CompoundStatement		15:30:307:307	5198564	1					
ANR	5198637	ExpressionStatement	start = string + pmatch [ 0 ] . rm_so	145:2:4908:4940	5198564	0	True				
ANR	5198638	AssignmentExpression	start = string + pmatch [ 0 ] . rm_so		5198564	0		=			
ANR	5198639	Identifier	start		5198564	0					
ANR	5198640	AdditiveExpression	string + pmatch [ 0 ] . rm_so		5198564	1		+			
ANR	5198641	Identifier	string		5198564	0					
ANR	5198642	MemberAccess	pmatch [ 0 ] . rm_so		5198564	1					
ANR	5198643	ArrayIndexing	pmatch [ 0 ]		5198564	0					
ANR	5198644	Identifier	pmatch		5198564	0					
ANR	5198645	PrimaryExpression	0		5198564	1					
ANR	5198646	Identifier	rm_so		5198564	1					
ANR	5198647	ExpressionStatement	stop = string + pmatch [ 0 ] . rm_eo	146:2:4944:4975	5198564	1	True				
ANR	5198648	AssignmentExpression	stop = string + pmatch [ 0 ] . rm_eo		5198564	0		=			
ANR	5198649	Identifier	stop		5198564	0					
ANR	5198650	AdditiveExpression	string + pmatch [ 0 ] . rm_eo		5198564	1		+			
ANR	5198651	Identifier	string		5198564	0					
ANR	5198652	MemberAccess	pmatch [ 0 ] . rm_eo		5198564	1					
ANR	5198653	ArrayIndexing	pmatch [ 0 ]		5198564	0					
ANR	5198654	Identifier	pmatch		5198564	0					
ANR	5198655	PrimaryExpression	0		5198564	1					
ANR	5198656	Identifier	rm_eo		5198564	1					
ANR	5198657	ElseStatement	else		5198564	0					
ANR	5198658	CompoundStatement		18:8:388:388	5198564	0					
ANR	5198659	ExpressionStatement	start = string	148:2:4989:5003	5198564	0	True				
ANR	5198660	AssignmentExpression	start = string		5198564	0		=			
ANR	5198661	Identifier	start		5198564	0					
ANR	5198662	Identifier	string		5198564	1					
ANR	5198663	ExpressionStatement	stop = start + strlen ( start )	149:2:5007:5035	5198564	1	True				
ANR	5198664	AssignmentExpression	stop = start + strlen ( start )		5198564	0		=			
ANR	5198665	Identifier	stop		5198564	0					
ANR	5198666	AdditiveExpression	start + strlen ( start )		5198564	1		+			
ANR	5198667	Identifier	start		5198564	0					
ANR	5198668	CallExpression	strlen ( start )		5198564	1					
ANR	5198669	Callee	strlen		5198564	0					
ANR	5198670	Identifier	strlen		5198564	0					
ANR	5198671	ArgumentList	start		5198564	1					
ANR	5198672	Argument	start		5198564	0					
ANR	5198673	Identifier	start		5198564	0					
ANR	5198674	IfStatement	if ( stop < start )		5198564	11					
ANR	5198675	Condition	stop < start	151:5:5045:5056	5198564	0	True				
ANR	5198676	RelationalExpression	stop < start		5198564	0		<			
ANR	5198677	Identifier	stop		5198564	0					
ANR	5198678	Identifier	start		5198564	1					
ANR	5198679	ReturnStatement	return ( R_REGEX_INVARG ) ;	152:2:5061:5083	5198564	1	True				
ANR	5198680	Identifier	R_REGEX_INVARG		5198564	0					
ANR	5198681	IfStatement	if ( g -> must != NULL )		5198564	12					
ANR	5198682	Condition	g -> must != NULL	155:5:5156:5170	5198564	0	True				
ANR	5198683	EqualityExpression	g -> must != NULL		5198564	0		!=			
ANR	5198684	PtrMemberAccess	g -> must		5198564	0					
ANR	5198685	Identifier	g		5198564	0					
ANR	5198686	Identifier	must		5198564	1					
ANR	5198687	Identifier	NULL		5198564	1					
ANR	5198688	CompoundStatement		26:22:576:576	5198564	1					
ANR	5198689	ForStatement	for ( dp = start ; dp < stop ; dp ++ )		5198564	0					
ANR	5198690	ForInit	dp = start ;	156:7:5182:5192	5198564	0	True				
ANR	5198691	AssignmentExpression	dp = start		5198564	0		=			
ANR	5198692	Identifier	dp		5198564	0					
ANR	5198693	Identifier	start		5198564	1					
ANR	5198694	Condition	dp < stop	156:19:5194:5202	5198564	1	True				
ANR	5198695	RelationalExpression	dp < stop		5198564	0		<			
ANR	5198696	Identifier	dp		5198564	0					
ANR	5198697	Identifier	stop		5198564	1					
ANR	5198698	PostIncDecOperationExpression	dp ++	156:30:5205:5208	5198564	2	True				
ANR	5198699	Identifier	dp		5198564	0					
ANR	5198700	IncDec	++		5198564	1					
ANR	5198701	IfStatement	"if ( * dp == g -> must [ 0 ] && stop - dp >= g -> mlen && memcmp ( dp , g -> must , ( size_t ) g -> mlen ) == 0 )"		5198564	3					
ANR	5198702	Condition	"* dp == g -> must [ 0 ] && stop - dp >= g -> mlen && memcmp ( dp , g -> must , ( size_t ) g -> mlen ) == 0"	157:7:5218:5307	5198564	0	True				
ANR	5198703	AndExpression	"* dp == g -> must [ 0 ] && stop - dp >= g -> mlen && memcmp ( dp , g -> must , ( size_t ) g -> mlen ) == 0"		5198564	0		&&			
ANR	5198704	EqualityExpression	* dp == g -> must [ 0 ]		5198564	0		==			
ANR	5198705	UnaryOperationExpression	* dp		5198564	0					
ANR	5198706	UnaryOperator	*		5198564	0					
ANR	5198707	Identifier	dp		5198564	1					
ANR	5198708	ArrayIndexing	g -> must [ 0 ]		5198564	1					
ANR	5198709	PtrMemberAccess	g -> must		5198564	0					
ANR	5198710	Identifier	g		5198564	0					
ANR	5198711	Identifier	must		5198564	1					
ANR	5198712	PrimaryExpression	0		5198564	1					
ANR	5198713	AndExpression	"stop - dp >= g -> mlen && memcmp ( dp , g -> must , ( size_t ) g -> mlen ) == 0"		5198564	1		&&			
ANR	5198714	RelationalExpression	stop - dp >= g -> mlen		5198564	0		>=			
ANR	5198715	AdditiveExpression	stop - dp		5198564	0		-			
ANR	5198716	Identifier	stop		5198564	0					
ANR	5198717	Identifier	dp		5198564	1					
ANR	5198718	PtrMemberAccess	g -> mlen		5198564	1					
ANR	5198719	Identifier	g		5198564	0					
ANR	5198720	Identifier	mlen		5198564	1					
ANR	5198721	EqualityExpression	"memcmp ( dp , g -> must , ( size_t ) g -> mlen ) == 0"		5198564	1		==			
ANR	5198722	CallExpression	"memcmp ( dp , g -> must , ( size_t ) g -> mlen )"		5198564	0					
ANR	5198723	Callee	memcmp		5198564	0					
ANR	5198724	Identifier	memcmp		5198564	0					
ANR	5198725	ArgumentList	dp		5198564	1					
ANR	5198726	Argument	dp		5198564	0					
ANR	5198727	Identifier	dp		5198564	0					
ANR	5198728	Argument	g -> must		5198564	1					
ANR	5198729	PtrMemberAccess	g -> must		5198564	0					
ANR	5198730	Identifier	g		5198564	0					
ANR	5198731	Identifier	must		5198564	1					
ANR	5198732	Argument	( size_t ) g -> mlen		5198564	2					
ANR	5198733	CastExpression	( size_t ) g -> mlen		5198564	0					
ANR	5198734	CastTarget	size_t		5198564	0					
ANR	5198735	PtrMemberAccess	g -> mlen		5198564	1					
ANR	5198736	Identifier	g		5198564	0					
ANR	5198737	Identifier	mlen		5198564	1					
ANR	5198738	PrimaryExpression	0		5198564	1					
ANR	5198739	BreakStatement	break ;	159:4:5314:5319	5198564	1	True				
ANR	5198740	IfStatement	if ( dp == stop )		5198564	1					
ANR	5198741	Condition	dp == stop	160:6:5327:5336	5198564	0	True				
ANR	5198742	EqualityExpression	dp == stop		5198564	0		==			
ANR	5198743	Identifier	dp		5198564	0					
ANR	5198744	Identifier	stop		5198564	1					
ANR	5198745	ReturnStatement	return ( R_REGEX_NOMATCH ) ;	161:3:5372:5395	5198564	1	True				
ANR	5198746	Identifier	R_REGEX_NOMATCH		5198564	0					
ANR	5198747	ExpressionStatement	m -> g = g	165:1:5428:5436	5198564	13	True				
ANR	5198748	AssignmentExpression	m -> g = g		5198564	0		=			
ANR	5198749	PtrMemberAccess	m -> g		5198564	0					
ANR	5198750	Identifier	m		5198564	0					
ANR	5198751	Identifier	g		5198564	1					
ANR	5198752	Identifier	g		5198564	1					
ANR	5198753	ExpressionStatement	m -> eflags = eflags	166:1:5439:5457	5198564	14	True				
ANR	5198754	AssignmentExpression	m -> eflags = eflags		5198564	0		=			
ANR	5198755	PtrMemberAccess	m -> eflags		5198564	0					
ANR	5198756	Identifier	m		5198564	0					
ANR	5198757	Identifier	eflags		5198564	1					
ANR	5198758	Identifier	eflags		5198564	1					
ANR	5198759	ExpressionStatement	m -> pmatch = NULL	167:1:5460:5476	5198564	15	True				
ANR	5198760	AssignmentExpression	m -> pmatch = NULL		5198564	0		=			
ANR	5198761	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5198762	Identifier	m		5198564	0					
ANR	5198763	Identifier	pmatch		5198564	1					
ANR	5198764	Identifier	NULL		5198564	1					
ANR	5198765	ExpressionStatement	m -> lastpos = NULL	168:1:5479:5496	5198564	16	True				
ANR	5198766	AssignmentExpression	m -> lastpos = NULL		5198564	0		=			
ANR	5198767	PtrMemberAccess	m -> lastpos		5198564	0					
ANR	5198768	Identifier	m		5198564	0					
ANR	5198769	Identifier	lastpos		5198564	1					
ANR	5198770	Identifier	NULL		5198564	1					
ANR	5198771	ExpressionStatement	m -> offp = string	169:1:5499:5515	5198564	17	True				
ANR	5198772	AssignmentExpression	m -> offp = string		5198564	0		=			
ANR	5198773	PtrMemberAccess	m -> offp		5198564	0					
ANR	5198774	Identifier	m		5198564	0					
ANR	5198775	Identifier	offp		5198564	1					
ANR	5198776	Identifier	string		5198564	1					
ANR	5198777	ExpressionStatement	m -> beginp = start	170:1:5518:5535	5198564	18	True				
ANR	5198778	AssignmentExpression	m -> beginp = start		5198564	0		=			
ANR	5198779	PtrMemberAccess	m -> beginp		5198564	0					
ANR	5198780	Identifier	m		5198564	0					
ANR	5198781	Identifier	beginp		5198564	1					
ANR	5198782	Identifier	start		5198564	1					
ANR	5198783	ExpressionStatement	m -> endp = stop	171:1:5538:5552	5198564	19	True				
ANR	5198784	AssignmentExpression	m -> endp = stop		5198564	0		=			
ANR	5198785	PtrMemberAccess	m -> endp		5198564	0					
ANR	5198786	Identifier	m		5198564	0					
ANR	5198787	Identifier	endp		5198564	1					
ANR	5198788	Identifier	stop		5198564	1					
ANR	5198789	IfStatement	if ( m -> g -> nstates * 4 < m -> g -> nstates )		5198564	20					
ANR	5198790	Condition	m -> g -> nstates * 4 < m -> g -> nstates	173:5:5560:5592	5198564	0	True				
ANR	5198791	RelationalExpression	m -> g -> nstates * 4 < m -> g -> nstates		5198564	0		<			
ANR	5198792	MultiplicativeExpression	m -> g -> nstates * 4		5198564	0		*			
ANR	5198793	PtrMemberAccess	m -> g -> nstates		5198564	0					
ANR	5198794	PtrMemberAccess	m -> g		5198564	0					
ANR	5198795	Identifier	m		5198564	0					
ANR	5198796	Identifier	g		5198564	1					
ANR	5198797	Identifier	nstates		5198564	1					
ANR	5198798	PrimaryExpression	4		5198564	1					
ANR	5198799	PtrMemberAccess	m -> g -> nstates		5198564	1					
ANR	5198800	PtrMemberAccess	m -> g		5198564	0					
ANR	5198801	Identifier	m		5198564	0					
ANR	5198802	Identifier	g		5198564	1					
ANR	5198803	Identifier	nstates		5198564	1					
ANR	5198804	ReturnStatement	return R_REGEX_NOMATCH ;	174:2:5597:5619	5198564	1	True				
ANR	5198805	Identifier	R_REGEX_NOMATCH		5198564	0					
ANR	5198806	ExpressionStatement	"STATESETUP ( m , 4 )"	175:1:5622:5638	5198564	21	True				
ANR	5198807	CallExpression	"STATESETUP ( m , 4 )"		5198564	0					
ANR	5198808	Callee	STATESETUP		5198564	0					
ANR	5198809	Identifier	STATESETUP		5198564	0					
ANR	5198810	ArgumentList	m		5198564	1					
ANR	5198811	Argument	m		5198564	0					
ANR	5198812	Identifier	m		5198564	0					
ANR	5198813	Argument	4		5198564	1					
ANR	5198814	PrimaryExpression	4		5198564	0					
ANR	5198815	ExpressionStatement	SETUP ( m -> st )	176:1:5641:5653	5198564	22	True				
ANR	5198816	CallExpression	SETUP ( m -> st )		5198564	0					
ANR	5198817	Callee	SETUP		5198564	0					
ANR	5198818	Identifier	SETUP		5198564	0					
ANR	5198819	ArgumentList	m -> st		5198564	1					
ANR	5198820	Argument	m -> st		5198564	0					
ANR	5198821	PtrMemberAccess	m -> st		5198564	0					
ANR	5198822	Identifier	m		5198564	0					
ANR	5198823	Identifier	st		5198564	1					
ANR	5198824	ExpressionStatement	SETUP ( m -> fresh )	177:1:5656:5671	5198564	23	True				
ANR	5198825	CallExpression	SETUP ( m -> fresh )		5198564	0					
ANR	5198826	Callee	SETUP		5198564	0					
ANR	5198827	Identifier	SETUP		5198564	0					
ANR	5198828	ArgumentList	m -> fresh		5198564	1					
ANR	5198829	Argument	m -> fresh		5198564	0					
ANR	5198830	PtrMemberAccess	m -> fresh		5198564	0					
ANR	5198831	Identifier	m		5198564	0					
ANR	5198832	Identifier	fresh		5198564	1					
ANR	5198833	ExpressionStatement	SETUP ( m -> tmp )	178:1:5674:5687	5198564	24	True				
ANR	5198834	CallExpression	SETUP ( m -> tmp )		5198564	0					
ANR	5198835	Callee	SETUP		5198564	0					
ANR	5198836	Identifier	SETUP		5198564	0					
ANR	5198837	ArgumentList	m -> tmp		5198564	1					
ANR	5198838	Argument	m -> tmp		5198564	0					
ANR	5198839	PtrMemberAccess	m -> tmp		5198564	0					
ANR	5198840	Identifier	m		5198564	0					
ANR	5198841	Identifier	tmp		5198564	1					
ANR	5198842	ExpressionStatement	SETUP ( m -> empty )	179:1:5690:5705	5198564	25	True				
ANR	5198843	CallExpression	SETUP ( m -> empty )		5198564	0					
ANR	5198844	Callee	SETUP		5198564	0					
ANR	5198845	Identifier	SETUP		5198564	0					
ANR	5198846	ArgumentList	m -> empty		5198564	1					
ANR	5198847	Argument	m -> empty		5198564	0					
ANR	5198848	PtrMemberAccess	m -> empty		5198564	0					
ANR	5198849	Identifier	m		5198564	0					
ANR	5198850	Identifier	empty		5198564	1					
ANR	5198851	ExpressionStatement	CLEAR ( m -> empty )	180:1:5708:5723	5198564	26	True				
ANR	5198852	CallExpression	CLEAR ( m -> empty )		5198564	0					
ANR	5198853	Callee	CLEAR		5198564	0					
ANR	5198854	Identifier	CLEAR		5198564	0					
ANR	5198855	ArgumentList	m -> empty		5198564	1					
ANR	5198856	Argument	m -> empty		5198564	0					
ANR	5198857	PtrMemberAccess	m -> empty		5198564	0					
ANR	5198858	Identifier	m		5198564	0					
ANR	5198859	Identifier	empty		5198564	1					
ANR	5198860	ForStatement	for ( ; ; )		5198564	27					
ANR	5198861	CompoundStatement		54:10:1201:1201	5198564	0					
ANR	5198862	ExpressionStatement	"endp = fast ( m , start , stop , gf , gl )"	184:2:5802:5837	5198564	0	True				
ANR	5198863	AssignmentExpression	"endp = fast ( m , start , stop , gf , gl )"		5198564	0		=			
ANR	5198864	Identifier	endp		5198564	0					
ANR	5198865	CallExpression	"fast ( m , start , stop , gf , gl )"		5198564	1					
ANR	5198866	Callee	fast		5198564	0					
ANR	5198867	Identifier	fast		5198564	0					
ANR	5198868	ArgumentList	m		5198564	1					
ANR	5198869	Argument	m		5198564	0					
ANR	5198870	Identifier	m		5198564	0					
ANR	5198871	Argument	start		5198564	1					
ANR	5198872	Identifier	start		5198564	0					
ANR	5198873	Argument	stop		5198564	2					
ANR	5198874	Identifier	stop		5198564	0					
ANR	5198875	Argument	gf		5198564	3					
ANR	5198876	Identifier	gf		5198564	0					
ANR	5198877	Argument	gl		5198564	4					
ANR	5198878	Identifier	gl		5198564	0					
ANR	5198879	IfStatement	if ( ! endp )		5198564	1					
ANR	5198880	Condition	! endp	185:6:5845:5849	5198564	0	True				
ANR	5198881	UnaryOperationExpression	! endp		5198564	0					
ANR	5198882	UnaryOperator	!		5198564	0					
ANR	5198883	Identifier	endp		5198564	1					
ANR	5198884	CompoundStatement		56:13:1255:1255	5198564	1					
ANR	5198885	ExpressionStatement	free ( m -> pmatch )	186:3:5871:5886	5198564	0	True				
ANR	5198886	CallExpression	free ( m -> pmatch )		5198564	0					
ANR	5198887	Callee	free		5198564	0					
ANR	5198888	Identifier	free		5198564	0					
ANR	5198889	ArgumentList	m -> pmatch		5198564	1					
ANR	5198890	Argument	m -> pmatch		5198564	0					
ANR	5198891	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5198892	Identifier	m		5198564	0					
ANR	5198893	Identifier	pmatch		5198564	1					
ANR	5198894	ExpressionStatement	free ( m -> lastpos )	187:3:5891:5907	5198564	1	True				
ANR	5198895	CallExpression	free ( m -> lastpos )		5198564	0					
ANR	5198896	Callee	free		5198564	0					
ANR	5198897	Identifier	free		5198564	0					
ANR	5198898	ArgumentList	m -> lastpos		5198564	1					
ANR	5198899	Argument	m -> lastpos		5198564	0					
ANR	5198900	PtrMemberAccess	m -> lastpos		5198564	0					
ANR	5198901	Identifier	m		5198564	0					
ANR	5198902	Identifier	lastpos		5198564	1					
ANR	5198903	ExpressionStatement	STATETEARDOWN ( m )	188:3:5912:5928	5198564	2	True				
ANR	5198904	CallExpression	STATETEARDOWN ( m )		5198564	0					
ANR	5198905	Callee	STATETEARDOWN		5198564	0					
ANR	5198906	Identifier	STATETEARDOWN		5198564	0					
ANR	5198907	ArgumentList	m		5198564	1					
ANR	5198908	Argument	m		5198564	0					
ANR	5198909	Identifier	m		5198564	0					
ANR	5198910	ReturnStatement	return ( R_REGEX_NOMATCH ) ;	189:3:5933:5956	5198564	3	True				
ANR	5198911	Identifier	R_REGEX_NOMATCH		5198564	0					
ANR	5198912	IfStatement	if ( nmatch == 0 && ! g -> backrefs )		5198564	2					
ANR	5198913	Condition	nmatch == 0 && ! g -> backrefs	191:6:5968:5994	5198564	0	True				
ANR	5198914	AndExpression	nmatch == 0 && ! g -> backrefs		5198564	0		&&			
ANR	5198915	EqualityExpression	nmatch == 0		5198564	0		==			
ANR	5198916	Identifier	nmatch		5198564	0					
ANR	5198917	PrimaryExpression	0		5198564	1					
ANR	5198918	UnaryOperationExpression	! g -> backrefs		5198564	1					
ANR	5198919	UnaryOperator	!		5198564	0					
ANR	5198920	PtrMemberAccess	g -> backrefs		5198564	1					
ANR	5198921	Identifier	g		5198564	0					
ANR	5198922	Identifier	backrefs		5198564	1					
ANR	5198923	BreakStatement	break ;	192:3:6000:6005	5198564	1	True				
ANR	5198924	IfStatement	if ( ! m -> coldp )		5198564	3					
ANR	5198925	Condition	! m -> coldp	195:6:6059:6067	5198564	0	True				
ANR	5198926	UnaryOperationExpression	! m -> coldp		5198564	0					
ANR	5198927	UnaryOperator	!		5198564	0					
ANR	5198928	PtrMemberAccess	m -> coldp		5198564	1					
ANR	5198929	Identifier	m		5198564	0					
ANR	5198930	Identifier	coldp		5198564	1					
ANR	5198931	CompoundStatement		66:17:1473:1473	5198564	1					
ANR	5198932	BreakStatement	break ;	196:3:6075:6080	5198564	0	True				
ANR	5198933	ForStatement	for ( ; ; )		5198564	4					
ANR	5198934	CompoundStatement		69:11:1500:1500	5198564	0					
ANR	5198935	ExpressionStatement	"NOTE ( ""finding start"" )"	199:3:6102:6123	5198564	0	True				
ANR	5198936	CallExpression	"NOTE ( ""finding start"" )"		5198564	0					
ANR	5198937	Callee	NOTE		5198564	0					
ANR	5198938	Identifier	NOTE		5198564	0					
ANR	5198939	ArgumentList	"""finding start"""		5198564	1					
ANR	5198940	Argument	"""finding start"""		5198564	0					
ANR	5198941	PrimaryExpression	"""finding start"""		5198564	0					
ANR	5198942	ExpressionStatement	"endp = slow ( m , m -> coldp , stop , gf , gl )"	200:3:6128:6166	5198564	1	True				
ANR	5198943	AssignmentExpression	"endp = slow ( m , m -> coldp , stop , gf , gl )"		5198564	0		=			
ANR	5198944	Identifier	endp		5198564	0					
ANR	5198945	CallExpression	"slow ( m , m -> coldp , stop , gf , gl )"		5198564	1					
ANR	5198946	Callee	slow		5198564	0					
ANR	5198947	Identifier	slow		5198564	0					
ANR	5198948	ArgumentList	m		5198564	1					
ANR	5198949	Argument	m		5198564	0					
ANR	5198950	Identifier	m		5198564	0					
ANR	5198951	Argument	m -> coldp		5198564	1					
ANR	5198952	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5198953	Identifier	m		5198564	0					
ANR	5198954	Identifier	coldp		5198564	1					
ANR	5198955	Argument	stop		5198564	2					
ANR	5198956	Identifier	stop		5198564	0					
ANR	5198957	Argument	gf		5198564	3					
ANR	5198958	Identifier	gf		5198564	0					
ANR	5198959	Argument	gl		5198564	4					
ANR	5198960	Identifier	gl		5198564	0					
ANR	5198961	IfStatement	if ( endp || m -> coldp > m -> endp )		5198564	2					
ANR	5198962	Condition	endp || m -> coldp > m -> endp	201:7:6175:6200	5198564	0	True				
ANR	5198963	OrExpression	endp || m -> coldp > m -> endp		5198564	0		||			
ANR	5198964	Identifier	endp		5198564	0					
ANR	5198965	RelationalExpression	m -> coldp > m -> endp		5198564	1		>			
ANR	5198966	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5198967	Identifier	m		5198564	0					
ANR	5198968	Identifier	coldp		5198564	1					
ANR	5198969	PtrMemberAccess	m -> endp		5198564	1					
ANR	5198970	Identifier	m		5198564	0					
ANR	5198971	Identifier	endp		5198564	1					
ANR	5198972	CompoundStatement		72:35:1606:1606	5198564	1					
ANR	5198973	BreakStatement	break ;	202:4:6209:6214	5198564	0	True				
ANR	5198974	ExpressionStatement	m -> coldp ++	204:3:6224:6234	5198564	3	True				
ANR	5198975	PostIncDecOperationExpression	m -> coldp ++		5198564	0					
ANR	5198976	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5198977	Identifier	m		5198564	0					
ANR	5198978	Identifier	coldp		5198564	1					
ANR	5198979	IncDec	++		5198564	1					
ANR	5198980	IfStatement	if ( nmatch == 1 && ! g -> backrefs )		5198564	5					
ANR	5198981	Condition	nmatch == 1 && ! g -> backrefs	206:6:6246:6272	5198564	0	True				
ANR	5198982	AndExpression	nmatch == 1 && ! g -> backrefs		5198564	0		&&			
ANR	5198983	EqualityExpression	nmatch == 1		5198564	0		==			
ANR	5198984	Identifier	nmatch		5198564	0					
ANR	5198985	PrimaryExpression	1		5198564	1					
ANR	5198986	UnaryOperationExpression	! g -> backrefs		5198564	1					
ANR	5198987	UnaryOperator	!		5198564	0					
ANR	5198988	PtrMemberAccess	g -> backrefs		5198564	1					
ANR	5198989	Identifier	g		5198564	0					
ANR	5198990	Identifier	backrefs		5198564	1					
ANR	5198991	BreakStatement	break ;	207:3:6278:6283	5198564	1	True				
ANR	5198992	IfStatement	if ( ! m -> pmatch )		5198564	6					
ANR	5198993	Condition	! m -> pmatch	210:6:6368:6377	5198564	0	True				
ANR	5198994	UnaryOperationExpression	! m -> pmatch		5198564	0					
ANR	5198995	UnaryOperator	!		5198564	0					
ANR	5198996	PtrMemberAccess	m -> pmatch		5198564	1					
ANR	5198997	Identifier	m		5198564	0					
ANR	5198998	Identifier	pmatch		5198564	1					
ANR	5198999	CompoundStatement		81:18:1783:1783	5198564	1					
ANR	5199000	IfStatement	if ( ( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) < m -> g -> nsub )		5198564	0					
ANR	5199001	Condition	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) < m -> g -> nsub	211:7:6389:6439	5198564	0	True				
ANR	5199002	RelationalExpression	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) < m -> g -> nsub		5198564	0		<			
ANR	5199003	MultiplicativeExpression	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch )		5198564	0		*			
ANR	5199004	AdditiveExpression	m -> g -> nsub + 1		5198564	0		+			
ANR	5199005	PtrMemberAccess	m -> g -> nsub		5198564	0					
ANR	5199006	PtrMemberAccess	m -> g		5198564	0					
ANR	5199007	Identifier	m		5198564	0					
ANR	5199008	Identifier	g		5198564	1					
ANR	5199009	Identifier	nsub		5198564	1					
ANR	5199010	PrimaryExpression	1		5198564	1					
ANR	5199011	SizeofExpression	sizeof ( RRegexMatch )		5198564	1					
ANR	5199012	Sizeof	sizeof		5198564	0					
ANR	5199013	SizeofOperand	RRegexMatch		5198564	1					
ANR	5199014	PtrMemberAccess	m -> g -> nsub		5198564	1					
ANR	5199015	PtrMemberAccess	m -> g		5198564	0					
ANR	5199016	Identifier	m		5198564	0					
ANR	5199017	Identifier	g		5198564	1					
ANR	5199018	Identifier	nsub		5198564	1					
ANR	5199019	CompoundStatement		82:60:1845:1845	5198564	1					
ANR	5199020	ReturnStatement	return R_REGEX_ESPACE ;	212:4:6448:6469	5198564	0	True				
ANR	5199021	Identifier	R_REGEX_ESPACE		5198564	0					
ANR	5199022	ExpressionStatement	m -> pmatch = ( RRegexMatch * ) malloc ( ( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) )	214:3:6479:6559	5198564	1	True				
ANR	5199023	AssignmentExpression	m -> pmatch = ( RRegexMatch * ) malloc ( ( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) )		5198564	0		=			
ANR	5199024	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199025	Identifier	m		5198564	0					
ANR	5199026	Identifier	pmatch		5198564	1					
ANR	5199027	CastExpression	( RRegexMatch * ) malloc ( ( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) )		5198564	1					
ANR	5199028	CastTarget	RRegexMatch *		5198564	0					
ANR	5199029	CallExpression	malloc ( ( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch ) )		5198564	1					
ANR	5199030	Callee	malloc		5198564	0					
ANR	5199031	Identifier	malloc		5198564	0					
ANR	5199032	ArgumentList	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch )		5198564	1					
ANR	5199033	Argument	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch )		5198564	0					
ANR	5199034	MultiplicativeExpression	( m -> g -> nsub + 1 ) * sizeof ( RRegexMatch )		5198564	0		*			
ANR	5199035	AdditiveExpression	m -> g -> nsub + 1		5198564	0		+			
ANR	5199036	PtrMemberAccess	m -> g -> nsub		5198564	0					
ANR	5199037	PtrMemberAccess	m -> g		5198564	0					
ANR	5199038	Identifier	m		5198564	0					
ANR	5199039	Identifier	g		5198564	1					
ANR	5199040	Identifier	nsub		5198564	1					
ANR	5199041	PrimaryExpression	1		5198564	1					
ANR	5199042	SizeofExpression	sizeof ( RRegexMatch )		5198564	1					
ANR	5199043	Sizeof	sizeof		5198564	0					
ANR	5199044	SizeofOperand	RRegexMatch		5198564	1					
ANR	5199045	IfStatement	if ( ! m -> pmatch )		5198564	7					
ANR	5199046	Condition	! m -> pmatch	217:6:6571:6580	5198564	0	True				
ANR	5199047	UnaryOperationExpression	! m -> pmatch		5198564	0					
ANR	5199048	UnaryOperator	!		5198564	0					
ANR	5199049	PtrMemberAccess	m -> pmatch		5198564	1					
ANR	5199050	Identifier	m		5198564	0					
ANR	5199051	Identifier	pmatch		5198564	1					
ANR	5199052	CompoundStatement		88:18:1986:1986	5198564	1					
ANR	5199053	ExpressionStatement	STATETEARDOWN ( m )	218:3:6588:6604	5198564	0	True				
ANR	5199054	CallExpression	STATETEARDOWN ( m )		5198564	0					
ANR	5199055	Callee	STATETEARDOWN		5198564	0					
ANR	5199056	Identifier	STATETEARDOWN		5198564	0					
ANR	5199057	ArgumentList	m		5198564	1					
ANR	5199058	Argument	m		5198564	0					
ANR	5199059	Identifier	m		5198564	0					
ANR	5199060	ReturnStatement	return ( R_REGEX_ESPACE ) ;	219:3:6609:6631	5198564	1	True				
ANR	5199061	Identifier	R_REGEX_ESPACE		5198564	0					
ANR	5199062	ForStatement	for ( i = 1 ; i <= m -> g -> nsub ; i ++ )		5198564	8					
ANR	5199063	ForInit	i = 1 ;	221:7:6644:6649	5198564	0	True				
ANR	5199064	AssignmentExpression	i = 1		5198564	0		=			
ANR	5199065	Identifier	i		5198564	0					
ANR	5199066	PrimaryExpression	1		5198564	1					
ANR	5199067	Condition	i <= m -> g -> nsub	221:14:6651:6665	5198564	1	True				
ANR	5199068	RelationalExpression	i <= m -> g -> nsub		5198564	0		<=			
ANR	5199069	Identifier	i		5198564	0					
ANR	5199070	PtrMemberAccess	m -> g -> nsub		5198564	1					
ANR	5199071	PtrMemberAccess	m -> g		5198564	0					
ANR	5199072	Identifier	m		5198564	0					
ANR	5199073	Identifier	g		5198564	1					
ANR	5199074	Identifier	nsub		5198564	1					
ANR	5199075	PostIncDecOperationExpression	i ++	221:31:6668:6670	5198564	2	True				
ANR	5199076	Identifier	i		5198564	0					
ANR	5199077	IncDec	++		5198564	1					
ANR	5199078	ExpressionStatement	m -> pmatch [ i ] . rm_so = m -> pmatch [ i ] . rm_eo = - 1	222:3:6676:6720	5198564	3	True				
ANR	5199079	AssignmentExpression	m -> pmatch [ i ] . rm_so = m -> pmatch [ i ] . rm_eo = - 1		5198564	0		=			
ANR	5199080	MemberAccess	m -> pmatch [ i ] . rm_so		5198564	0					
ANR	5199081	ArrayIndexing	m -> pmatch [ i ]		5198564	0					
ANR	5199082	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199083	Identifier	m		5198564	0					
ANR	5199084	Identifier	pmatch		5198564	1					
ANR	5199085	Identifier	i		5198564	1					
ANR	5199086	Identifier	rm_so		5198564	1					
ANR	5199087	AssignmentExpression	m -> pmatch [ i ] . rm_eo = - 1		5198564	1		=			
ANR	5199088	MemberAccess	m -> pmatch [ i ] . rm_eo		5198564	0					
ANR	5199089	ArrayIndexing	m -> pmatch [ i ]		5198564	0					
ANR	5199090	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199091	Identifier	m		5198564	0					
ANR	5199092	Identifier	pmatch		5198564	1					
ANR	5199093	Identifier	i		5198564	1					
ANR	5199094	Identifier	rm_eo		5198564	1					
ANR	5199095	UnaryOperationExpression	- 1		5198564	1					
ANR	5199096	UnaryOperator	-		5198564	0					
ANR	5199097	PrimaryExpression	1		5198564	1					
ANR	5199098	IfStatement	if ( ! g -> backrefs && ! ( m -> eflags & R_REGEX_BACKR ) )		5198564	9					
ANR	5199099	Condition	! g -> backrefs && ! ( m -> eflags & R_REGEX_BACKR )	223:6:6728:6769	5198564	0	True				
ANR	5199100	AndExpression	! g -> backrefs && ! ( m -> eflags & R_REGEX_BACKR )		5198564	0		&&			
ANR	5199101	UnaryOperationExpression	! g -> backrefs		5198564	0					
ANR	5199102	UnaryOperator	!		5198564	0					
ANR	5199103	PtrMemberAccess	g -> backrefs		5198564	1					
ANR	5199104	Identifier	g		5198564	0					
ANR	5199105	Identifier	backrefs		5198564	1					
ANR	5199106	UnaryOperationExpression	! ( m -> eflags & R_REGEX_BACKR )		5198564	1					
ANR	5199107	UnaryOperator	!		5198564	0					
ANR	5199108	BitAndExpression	m -> eflags & R_REGEX_BACKR		5198564	1		&			
ANR	5199109	PtrMemberAccess	m -> eflags		5198564	0					
ANR	5199110	Identifier	m		5198564	0					
ANR	5199111	Identifier	eflags		5198564	1					
ANR	5199112	Identifier	R_REGEX_BACKR		5198564	1					
ANR	5199113	CompoundStatement		94:50:2175:2175	5198564	1					
ANR	5199114	ExpressionStatement	"NOTE ( ""dissecting"" )"	224:3:6777:6795	5198564	0	True				
ANR	5199115	CallExpression	"NOTE ( ""dissecting"" )"		5198564	0					
ANR	5199116	Callee	NOTE		5198564	0					
ANR	5199117	Identifier	NOTE		5198564	0					
ANR	5199118	ArgumentList	"""dissecting"""		5198564	1					
ANR	5199119	Argument	"""dissecting"""		5198564	0					
ANR	5199120	PrimaryExpression	"""dissecting"""		5198564	0					
ANR	5199121	ExpressionStatement	"dp = dissect ( m , m -> coldp , endp , gf , gl )"	225:3:6800:6839	5198564	1	True				
ANR	5199122	AssignmentExpression	"dp = dissect ( m , m -> coldp , endp , gf , gl )"		5198564	0		=			
ANR	5199123	Identifier	dp		5198564	0					
ANR	5199124	CallExpression	"dissect ( m , m -> coldp , endp , gf , gl )"		5198564	1					
ANR	5199125	Callee	dissect		5198564	0					
ANR	5199126	Identifier	dissect		5198564	0					
ANR	5199127	ArgumentList	m		5198564	1					
ANR	5199128	Argument	m		5198564	0					
ANR	5199129	Identifier	m		5198564	0					
ANR	5199130	Argument	m -> coldp		5198564	1					
ANR	5199131	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199132	Identifier	m		5198564	0					
ANR	5199133	Identifier	coldp		5198564	1					
ANR	5199134	Argument	endp		5198564	2					
ANR	5199135	Identifier	endp		5198564	0					
ANR	5199136	Argument	gf		5198564	3					
ANR	5199137	Identifier	gf		5198564	0					
ANR	5199138	Argument	gl		5198564	4					
ANR	5199139	Identifier	gl		5198564	0					
ANR	5199140	ElseStatement	else		5198564	0					
ANR	5199141	CompoundStatement		97:9:2253:2253	5198564	0					
ANR	5199142	IfStatement	if ( g -> nplus > 0 && ! m -> lastpos )		5198564	0					
ANR	5199143	Condition	g -> nplus > 0 && ! m -> lastpos	227:7:6859:6885	5198564	0	True				
ANR	5199144	AndExpression	g -> nplus > 0 && ! m -> lastpos		5198564	0		&&			
ANR	5199145	RelationalExpression	g -> nplus > 0		5198564	0		>			
ANR	5199146	PtrMemberAccess	g -> nplus		5198564	0					
ANR	5199147	Identifier	g		5198564	0					
ANR	5199148	Identifier	nplus		5198564	1					
ANR	5199149	PrimaryExpression	0		5198564	1					
ANR	5199150	UnaryOperationExpression	! m -> lastpos		5198564	1					
ANR	5199151	UnaryOperator	!		5198564	0					
ANR	5199152	PtrMemberAccess	m -> lastpos		5198564	1					
ANR	5199153	Identifier	m		5198564	0					
ANR	5199154	Identifier	lastpos		5198564	1					
ANR	5199155	CompoundStatement		98:36:2291:2291	5198564	1					
ANR	5199156	IfStatement	if ( ( g -> nplus + 1 ) * sizeof ( char * ) < g -> nplus )		5198564	0					
ANR	5199157	Condition	( g -> nplus + 1 ) * sizeof ( char * ) < g -> nplus	228:8:6898:6939	5198564	0	True				
ANR	5199158	RelationalExpression	( g -> nplus + 1 ) * sizeof ( char * ) < g -> nplus		5198564	0		<			
ANR	5199159	MultiplicativeExpression	( g -> nplus + 1 ) * sizeof ( char * )		5198564	0		*			
ANR	5199160	AdditiveExpression	g -> nplus + 1		5198564	0		+			
ANR	5199161	PtrMemberAccess	g -> nplus		5198564	0					
ANR	5199162	Identifier	g		5198564	0					
ANR	5199163	Identifier	nplus		5198564	1					
ANR	5199164	PrimaryExpression	1		5198564	1					
ANR	5199165	SizeofExpression	sizeof ( char * )		5198564	1					
ANR	5199166	Sizeof	sizeof		5198564	0					
ANR	5199167	SizeofOperand	char *		5198564	1					
ANR	5199168	PtrMemberAccess	g -> nplus		5198564	1					
ANR	5199169	Identifier	g		5198564	0					
ANR	5199170	Identifier	nplus		5198564	1					
ANR	5199171	CompoundStatement		99:52:2345:2345	5198564	1					
ANR	5199172	ExpressionStatement	free ( m -> pmatch )	229:5:6949:6965	5198564	0	True				
ANR	5199173	CallExpression	free ( m -> pmatch )		5198564	0					
ANR	5199174	Callee	free		5198564	0					
ANR	5199175	Identifier	free		5198564	0					
ANR	5199176	ArgumentList	m -> pmatch		5198564	1					
ANR	5199177	Argument	m -> pmatch		5198564	0					
ANR	5199178	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199179	Identifier	m		5198564	0					
ANR	5199180	Identifier	pmatch		5198564	1					
ANR	5199181	ExpressionStatement	STATETEARDOWN ( m )	230:5:6972:6988	5198564	1	True				
ANR	5199182	CallExpression	STATETEARDOWN ( m )		5198564	0					
ANR	5199183	Callee	STATETEARDOWN		5198564	0					
ANR	5199184	Identifier	STATETEARDOWN		5198564	0					
ANR	5199185	ArgumentList	m		5198564	1					
ANR	5199186	Argument	m		5198564	0					
ANR	5199187	Identifier	m		5198564	0					
ANR	5199188	ReturnStatement	return R_REGEX_ESPACE ;	231:5:6995:7016	5198564	2	True				
ANR	5199189	Identifier	R_REGEX_ESPACE		5198564	0					
ANR	5199190	ExpressionStatement	m -> lastpos = ( char * * ) malloc ( ( g -> nplus + 1 ) * sizeof ( char * ) )	233:4:7028:7094	5198564	1	True				
ANR	5199191	AssignmentExpression	m -> lastpos = ( char * * ) malloc ( ( g -> nplus + 1 ) * sizeof ( char * ) )		5198564	0		=			
ANR	5199192	PtrMemberAccess	m -> lastpos		5198564	0					
ANR	5199193	Identifier	m		5198564	0					
ANR	5199194	Identifier	lastpos		5198564	1					
ANR	5199195	CastExpression	( char * * ) malloc ( ( g -> nplus + 1 ) * sizeof ( char * ) )		5198564	1					
ANR	5199196	CastTarget	char * *		5198564	0					
ANR	5199197	CallExpression	malloc ( ( g -> nplus + 1 ) * sizeof ( char * ) )		5198564	1					
ANR	5199198	Callee	malloc		5198564	0					
ANR	5199199	Identifier	malloc		5198564	0					
ANR	5199200	ArgumentList	( g -> nplus + 1 ) * sizeof ( char * )		5198564	1					
ANR	5199201	Argument	( g -> nplus + 1 ) * sizeof ( char * )		5198564	0					
ANR	5199202	MultiplicativeExpression	( g -> nplus + 1 ) * sizeof ( char * )		5198564	0		*			
ANR	5199203	AdditiveExpression	g -> nplus + 1		5198564	0		+			
ANR	5199204	PtrMemberAccess	g -> nplus		5198564	0					
ANR	5199205	Identifier	g		5198564	0					
ANR	5199206	Identifier	nplus		5198564	1					
ANR	5199207	PrimaryExpression	1		5198564	1					
ANR	5199208	SizeofExpression	sizeof ( char * )		5198564	1					
ANR	5199209	Sizeof	sizeof		5198564	0					
ANR	5199210	SizeofOperand	char *		5198564	1					
ANR	5199211	IfStatement	if ( g -> nplus > 0 && ! m -> lastpos )		5198564	1					
ANR	5199212	Condition	g -> nplus > 0 && ! m -> lastpos	236:7:7108:7134	5198564	0	True				
ANR	5199213	AndExpression	g -> nplus > 0 && ! m -> lastpos		5198564	0		&&			
ANR	5199214	RelationalExpression	g -> nplus > 0		5198564	0		>			
ANR	5199215	PtrMemberAccess	g -> nplus		5198564	0					
ANR	5199216	Identifier	g		5198564	0					
ANR	5199217	Identifier	nplus		5198564	1					
ANR	5199218	PrimaryExpression	0		5198564	1					
ANR	5199219	UnaryOperationExpression	! m -> lastpos		5198564	1					
ANR	5199220	UnaryOperator	!		5198564	0					
ANR	5199221	PtrMemberAccess	m -> lastpos		5198564	1					
ANR	5199222	Identifier	m		5198564	0					
ANR	5199223	Identifier	lastpos		5198564	1					
ANR	5199224	CompoundStatement		107:36:2540:2540	5198564	1					
ANR	5199225	ExpressionStatement	free ( m -> pmatch )	237:4:7143:7158	5198564	0	True				
ANR	5199226	CallExpression	free ( m -> pmatch )		5198564	0					
ANR	5199227	Callee	free		5198564	0					
ANR	5199228	Identifier	free		5198564	0					
ANR	5199229	ArgumentList	m -> pmatch		5198564	1					
ANR	5199230	Argument	m -> pmatch		5198564	0					
ANR	5199231	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199232	Identifier	m		5198564	0					
ANR	5199233	Identifier	pmatch		5198564	1					
ANR	5199234	ExpressionStatement	STATETEARDOWN ( m )	238:4:7164:7180	5198564	1	True				
ANR	5199235	CallExpression	STATETEARDOWN ( m )		5198564	0					
ANR	5199236	Callee	STATETEARDOWN		5198564	0					
ANR	5199237	Identifier	STATETEARDOWN		5198564	0					
ANR	5199238	ArgumentList	m		5198564	1					
ANR	5199239	Argument	m		5198564	0					
ANR	5199240	Identifier	m		5198564	0					
ANR	5199241	ReturnStatement	return ( R_REGEX_ESPACE ) ;	239:4:7186:7208	5198564	2	True				
ANR	5199242	Identifier	R_REGEX_ESPACE		5198564	0					
ANR	5199243	ExpressionStatement	"NOTE ( ""backref dissect"" )"	241:3:7218:7241	5198564	2	True				
ANR	5199244	CallExpression	"NOTE ( ""backref dissect"" )"		5198564	0					
ANR	5199245	Callee	NOTE		5198564	0					
ANR	5199246	Identifier	NOTE		5198564	0					
ANR	5199247	ArgumentList	"""backref dissect"""		5198564	1					
ANR	5199248	Argument	"""backref dissect"""		5198564	0					
ANR	5199249	PrimaryExpression	"""backref dissect"""		5198564	0					
ANR	5199250	ExpressionStatement	"dp = backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"	242:3:7246:7298	5198564	3	True				
ANR	5199251	AssignmentExpression	"dp = backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"		5198564	0		=			
ANR	5199252	Identifier	dp		5198564	0					
ANR	5199253	CallExpression	"backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"		5198564	1					
ANR	5199254	Callee	backref		5198564	0					
ANR	5199255	Identifier	backref		5198564	0					
ANR	5199256	ArgumentList	m		5198564	1					
ANR	5199257	Argument	m		5198564	0					
ANR	5199258	Identifier	m		5198564	0					
ANR	5199259	Argument	m -> coldp		5198564	1					
ANR	5199260	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199261	Identifier	m		5198564	0					
ANR	5199262	Identifier	coldp		5198564	1					
ANR	5199263	Argument	endp		5198564	2					
ANR	5199264	Identifier	endp		5198564	0					
ANR	5199265	Argument	gf		5198564	3					
ANR	5199266	Identifier	gf		5198564	0					
ANR	5199267	Argument	gl		5198564	4					
ANR	5199268	Identifier	gl		5198564	0					
ANR	5199269	Argument	( sopno ) 0		5198564	5					
ANR	5199270	CastExpression	( sopno ) 0		5198564	0					
ANR	5199271	CastTarget	sopno		5198564	0					
ANR	5199272	PrimaryExpression	0		5198564	1					
ANR	5199273	Argument	0		5198564	6					
ANR	5199274	PrimaryExpression	0		5198564	0					
ANR	5199275	IfStatement	if ( dp )		5198564	10					
ANR	5199276	Condition	dp	244:6:7310:7311	5198564	0	True				
ANR	5199277	Identifier	dp		5198564	0					
ANR	5199278	CompoundStatement		115:10:2717:2717	5198564	1					
ANR	5199279	BreakStatement	break ;	245:3:7319:7324	5198564	0	True				
ANR	5199280	IfStatement	if ( ! g -> backrefs )		5198564	11					
ANR	5199281	Condition	! g -> backrefs	248:6:7398:7409	5198564	0	True				
ANR	5199282	UnaryOperationExpression	! g -> backrefs		5198564	0					
ANR	5199283	UnaryOperator	!		5198564	0					
ANR	5199284	PtrMemberAccess	g -> backrefs		5198564	1					
ANR	5199285	Identifier	g		5198564	0					
ANR	5199286	Identifier	backrefs		5198564	1					
ANR	5199287	CompoundStatement		119:20:2815:2815	5198564	1					
ANR	5199288	BreakStatement	break ;	249:3:7456:7461	5198564	0	True				
ANR	5199289	IfStatement	if ( g -> nplus || ! m -> lastpos )		5198564	12					
ANR	5199290	Condition	g -> nplus || ! m -> lastpos	251:6:7473:7495	5198564	0	True				
ANR	5199291	OrExpression	g -> nplus || ! m -> lastpos		5198564	0		||			
ANR	5199292	PtrMemberAccess	g -> nplus		5198564	0					
ANR	5199293	Identifier	g		5198564	0					
ANR	5199294	Identifier	nplus		5198564	1					
ANR	5199295	UnaryOperationExpression	! m -> lastpos		5198564	1					
ANR	5199296	UnaryOperator	!		5198564	0					
ANR	5199297	PtrMemberAccess	m -> lastpos		5198564	1					
ANR	5199298	Identifier	m		5198564	0					
ANR	5199299	Identifier	lastpos		5198564	1					
ANR	5199300	CompoundStatement		122:31:2901:2901	5198564	1					
ANR	5199301	BreakStatement	break ;	252:3:7503:7508	5198564	0	True				
ANR	5199302	ForStatement	for ( ; ; )		5198564	13					
ANR	5199303	CompoundStatement		125:11:2928:2928	5198564	0					
ANR	5199304	IfStatement	if ( dp != NULL || endp <= m -> coldp )		5198564	0					
ANR	5199305	Condition	dp != NULL || endp <= m -> coldp	255:7:7534:7563	5198564	0	True				
ANR	5199306	OrExpression	dp != NULL || endp <= m -> coldp		5198564	0		||			
ANR	5199307	EqualityExpression	dp != NULL		5198564	0		!=			
ANR	5199308	Identifier	dp		5198564	0					
ANR	5199309	Identifier	NULL		5198564	1					
ANR	5199310	RelationalExpression	endp <= m -> coldp		5198564	1		<=			
ANR	5199311	Identifier	endp		5198564	0					
ANR	5199312	PtrMemberAccess	m -> coldp		5198564	1					
ANR	5199313	Identifier	m		5198564	0					
ANR	5199314	Identifier	coldp		5198564	1					
ANR	5199315	BreakStatement	break ;	256:4:7570:7575	5198564	1	True				
ANR	5199316	ExpressionStatement	"NOTE ( ""backoff"" )"	257:3:7594:7609	5198564	1	True				
ANR	5199317	CallExpression	"NOTE ( ""backoff"" )"		5198564	0					
ANR	5199318	Callee	NOTE		5198564	0					
ANR	5199319	Identifier	NOTE		5198564	0					
ANR	5199320	ArgumentList	"""backoff"""		5198564	1					
ANR	5199321	Argument	"""backoff"""		5198564	0					
ANR	5199322	PrimaryExpression	"""backoff"""		5198564	0					
ANR	5199323	ExpressionStatement	"endp = slow ( m , m -> coldp , endp - 1 , gf , gl )"	258:3:7614:7654	5198564	2	True				
ANR	5199324	AssignmentExpression	"endp = slow ( m , m -> coldp , endp - 1 , gf , gl )"		5198564	0		=			
ANR	5199325	Identifier	endp		5198564	0					
ANR	5199326	CallExpression	"slow ( m , m -> coldp , endp - 1 , gf , gl )"		5198564	1					
ANR	5199327	Callee	slow		5198564	0					
ANR	5199328	Identifier	slow		5198564	0					
ANR	5199329	ArgumentList	m		5198564	1					
ANR	5199330	Argument	m		5198564	0					
ANR	5199331	Identifier	m		5198564	0					
ANR	5199332	Argument	m -> coldp		5198564	1					
ANR	5199333	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199334	Identifier	m		5198564	0					
ANR	5199335	Identifier	coldp		5198564	1					
ANR	5199336	Argument	endp - 1		5198564	2					
ANR	5199337	AdditiveExpression	endp - 1		5198564	0		-			
ANR	5199338	Identifier	endp		5198564	0					
ANR	5199339	PrimaryExpression	1		5198564	1					
ANR	5199340	Argument	gf		5198564	3					
ANR	5199341	Identifier	gf		5198564	0					
ANR	5199342	Argument	gl		5198564	4					
ANR	5199343	Identifier	gl		5198564	0					
ANR	5199344	IfStatement	if ( ! endp )		5198564	3					
ANR	5199345	Condition	! endp	259:7:7663:7667	5198564	0	True				
ANR	5199346	UnaryOperationExpression	! endp		5198564	0					
ANR	5199347	UnaryOperator	!		5198564	0					
ANR	5199348	Identifier	endp		5198564	1					
ANR	5199349	BreakStatement	break ;	260:4:7674:7679	5198564	1	True				
ANR	5199350	ForStatement	for ( i = 1 ; i <= m -> g -> nsub ; i ++ )		5198564	4					
ANR	5199351	ForInit	i = 1 ;	263:8:7759:7764	5198564	0	True				
ANR	5199352	AssignmentExpression	i = 1		5198564	0		=			
ANR	5199353	Identifier	i		5198564	0					
ANR	5199354	PrimaryExpression	1		5198564	1					
ANR	5199355	Condition	i <= m -> g -> nsub	263:15:7766:7780	5198564	1	True				
ANR	5199356	RelationalExpression	i <= m -> g -> nsub		5198564	0		<=			
ANR	5199357	Identifier	i		5198564	0					
ANR	5199358	PtrMemberAccess	m -> g -> nsub		5198564	1					
ANR	5199359	PtrMemberAccess	m -> g		5198564	0					
ANR	5199360	Identifier	m		5198564	0					
ANR	5199361	Identifier	g		5198564	1					
ANR	5199362	Identifier	nsub		5198564	1					
ANR	5199363	PostIncDecOperationExpression	i ++	263:32:7783:7785	5198564	2	True				
ANR	5199364	Identifier	i		5198564	0					
ANR	5199365	IncDec	++		5198564	1					
ANR	5199366	CompoundStatement		134:37:3191:3191	5198564	3					
ANR	5199367	IfStatement	if ( m -> pmatch [ i ] . rm_so != - 1 )		5198564	0					
ANR	5199368	Condition	m -> pmatch [ i ] . rm_so != - 1	264:8:7798:7821	5198564	0	True				
ANR	5199369	EqualityExpression	m -> pmatch [ i ] . rm_so != - 1		5198564	0		!=			
ANR	5199370	MemberAccess	m -> pmatch [ i ] . rm_so		5198564	0					
ANR	5199371	ArrayIndexing	m -> pmatch [ i ]		5198564	0					
ANR	5199372	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199373	Identifier	m		5198564	0					
ANR	5199374	Identifier	pmatch		5198564	1					
ANR	5199375	Identifier	i		5198564	1					
ANR	5199376	Identifier	rm_so		5198564	1					
ANR	5199377	UnaryOperationExpression	- 1		5198564	1					
ANR	5199378	UnaryOperator	-		5198564	0					
ANR	5199379	PrimaryExpression	1		5198564	1					
ANR	5199380	CompoundStatement		135:34:3227:3227	5198564	1					
ANR	5199381	BreakStatement	break ;	265:5:7831:7836	5198564	0	True				
ANR	5199382	IfStatement	if ( m -> pmatch [ i ] . rm_eo != - 1 )		5198564	1					
ANR	5199383	Condition	m -> pmatch [ i ] . rm_eo != - 1	267:8:7852:7875	5198564	0	True				
ANR	5199384	EqualityExpression	m -> pmatch [ i ] . rm_eo != - 1		5198564	0		!=			
ANR	5199385	MemberAccess	m -> pmatch [ i ] . rm_eo		5198564	0					
ANR	5199386	ArrayIndexing	m -> pmatch [ i ]		5198564	0					
ANR	5199387	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199388	Identifier	m		5198564	0					
ANR	5199389	Identifier	pmatch		5198564	1					
ANR	5199390	Identifier	i		5198564	1					
ANR	5199391	Identifier	rm_eo		5198564	1					
ANR	5199392	UnaryOperationExpression	- 1		5198564	1					
ANR	5199393	UnaryOperator	-		5198564	0					
ANR	5199394	PrimaryExpression	1		5198564	1					
ANR	5199395	CompoundStatement		138:34:3281:3281	5198564	1					
ANR	5199396	BreakStatement	break ;	268:5:7885:7890	5198564	0	True				
ANR	5199397	ExpressionStatement	"NOTE ( ""backoff dissect"" )"	272:3:7913:7936	5198564	5	True				
ANR	5199398	CallExpression	"NOTE ( ""backoff dissect"" )"		5198564	0					
ANR	5199399	Callee	NOTE		5198564	0					
ANR	5199400	Identifier	NOTE		5198564	0					
ANR	5199401	ArgumentList	"""backoff dissect"""		5198564	1					
ANR	5199402	Argument	"""backoff dissect"""		5198564	0					
ANR	5199403	PrimaryExpression	"""backoff dissect"""		5198564	0					
ANR	5199404	ExpressionStatement	"dp = backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"	273:3:7941:7993	5198564	6	True				
ANR	5199405	AssignmentExpression	"dp = backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"		5198564	0		=			
ANR	5199406	Identifier	dp		5198564	0					
ANR	5199407	CallExpression	"backref ( m , m -> coldp , endp , gf , gl , ( sopno ) 0 , 0 )"		5198564	1					
ANR	5199408	Callee	backref		5198564	0					
ANR	5199409	Identifier	backref		5198564	0					
ANR	5199410	ArgumentList	m		5198564	1					
ANR	5199411	Argument	m		5198564	0					
ANR	5199412	Identifier	m		5198564	0					
ANR	5199413	Argument	m -> coldp		5198564	1					
ANR	5199414	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199415	Identifier	m		5198564	0					
ANR	5199416	Identifier	coldp		5198564	1					
ANR	5199417	Argument	endp		5198564	2					
ANR	5199418	Identifier	endp		5198564	0					
ANR	5199419	Argument	gf		5198564	3					
ANR	5199420	Identifier	gf		5198564	0					
ANR	5199421	Argument	gl		5198564	4					
ANR	5199422	Identifier	gl		5198564	0					
ANR	5199423	Argument	( sopno ) 0		5198564	5					
ANR	5199424	CastExpression	( sopno ) 0		5198564	0					
ANR	5199425	CastTarget	sopno		5198564	0					
ANR	5199426	PrimaryExpression	0		5198564	1					
ANR	5199427	Argument	0		5198564	6					
ANR	5199428	PrimaryExpression	0		5198564	0					
ANR	5199429	IfStatement	if ( dp != NULL || dp != endp )		5198564	14					
ANR	5199430	Condition	dp != NULL || dp != endp	275:6:8005:8028	5198564	0	True				
ANR	5199431	OrExpression	dp != NULL || dp != endp		5198564	0		||			
ANR	5199432	EqualityExpression	dp != NULL		5198564	0		!=			
ANR	5199433	Identifier	dp		5198564	0					
ANR	5199434	Identifier	NULL		5198564	1					
ANR	5199435	EqualityExpression	dp != endp		5198564	1		!=			
ANR	5199436	Identifier	dp		5198564	0					
ANR	5199437	Identifier	endp		5198564	1					
ANR	5199438	BreakStatement	break ;	276:3:8061:8066	5198564	1	True				
ANR	5199439	ExpressionStatement	"NOTE ( ""false alarm"" )"	279:2:8131:8150	5198564	15	True				
ANR	5199440	CallExpression	"NOTE ( ""false alarm"" )"		5198564	0					
ANR	5199441	Callee	NOTE		5198564	0					
ANR	5199442	Identifier	NOTE		5198564	0					
ANR	5199443	ArgumentList	"""false alarm"""		5198564	1					
ANR	5199444	Argument	"""false alarm"""		5198564	0					
ANR	5199445	PrimaryExpression	"""false alarm"""		5198564	0					
ANR	5199446	IfStatement	if ( m -> coldp == stop )		5198564	16					
ANR	5199447	Condition	m -> coldp == stop	280:6:8158:8173	5198564	0	True				
ANR	5199448	EqualityExpression	m -> coldp == stop		5198564	0		==			
ANR	5199449	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199450	Identifier	m		5198564	0					
ANR	5199451	Identifier	coldp		5198564	1					
ANR	5199452	Identifier	stop		5198564	1					
ANR	5199453	BreakStatement	break ;	281:3:8179:8184	5198564	1	True				
ANR	5199454	ExpressionStatement	start = m -> coldp + 1	282:2:8188:8208	5198564	17	True				
ANR	5199455	AssignmentExpression	start = m -> coldp + 1		5198564	0		=			
ANR	5199456	Identifier	start		5198564	0					
ANR	5199457	AdditiveExpression	m -> coldp + 1		5198564	1		+			
ANR	5199458	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199459	Identifier	m		5198564	0					
ANR	5199460	Identifier	coldp		5198564	1					
ANR	5199461	PrimaryExpression	1		5198564	1					
ANR	5199462	IfStatement	if ( nmatch > 0 )		5198564	28					
ANR	5199463	Condition	nmatch > 0	286:5:8288:8297	5198564	0	True				
ANR	5199464	RelationalExpression	nmatch > 0		5198564	0		>			
ANR	5199465	Identifier	nmatch		5198564	0					
ANR	5199466	PrimaryExpression	0		5198564	1					
ANR	5199467	CompoundStatement		157:17:3703:3703	5198564	1					
ANR	5199468	ExpressionStatement	pmatch [ 0 ] . rm_so = m -> coldp - m -> offp	287:2:8304:8340	5198564	0	True				
ANR	5199469	AssignmentExpression	pmatch [ 0 ] . rm_so = m -> coldp - m -> offp		5198564	0		=			
ANR	5199470	MemberAccess	pmatch [ 0 ] . rm_so		5198564	0					
ANR	5199471	ArrayIndexing	pmatch [ 0 ]		5198564	0					
ANR	5199472	Identifier	pmatch		5198564	0					
ANR	5199473	PrimaryExpression	0		5198564	1					
ANR	5199474	Identifier	rm_so		5198564	1					
ANR	5199475	AdditiveExpression	m -> coldp - m -> offp		5198564	1		-			
ANR	5199476	PtrMemberAccess	m -> coldp		5198564	0					
ANR	5199477	Identifier	m		5198564	0					
ANR	5199478	Identifier	coldp		5198564	1					
ANR	5199479	PtrMemberAccess	m -> offp		5198564	1					
ANR	5199480	Identifier	m		5198564	0					
ANR	5199481	Identifier	offp		5198564	1					
ANR	5199482	ExpressionStatement	pmatch [ 0 ] . rm_eo = endp - m -> offp	288:2:8344:8376	5198564	1	True				
ANR	5199483	AssignmentExpression	pmatch [ 0 ] . rm_eo = endp - m -> offp		5198564	0		=			
ANR	5199484	MemberAccess	pmatch [ 0 ] . rm_eo		5198564	0					
ANR	5199485	ArrayIndexing	pmatch [ 0 ]		5198564	0					
ANR	5199486	Identifier	pmatch		5198564	0					
ANR	5199487	PrimaryExpression	0		5198564	1					
ANR	5199488	Identifier	rm_eo		5198564	1					
ANR	5199489	AdditiveExpression	endp - m -> offp		5198564	1		-			
ANR	5199490	Identifier	endp		5198564	0					
ANR	5199491	PtrMemberAccess	m -> offp		5198564	1					
ANR	5199492	Identifier	m		5198564	0					
ANR	5199493	Identifier	offp		5198564	1					
ANR	5199494	IfStatement	if ( nmatch > 1 )		5198564	29					
ANR	5199495	Condition	nmatch > 1	290:5:8386:8395	5198564	0	True				
ANR	5199496	RelationalExpression	nmatch > 1		5198564	0		>			
ANR	5199497	Identifier	nmatch		5198564	0					
ANR	5199498	PrimaryExpression	1		5198564	1					
ANR	5199499	CompoundStatement		161:17:3801:3801	5198564	1					
ANR	5199500	IfStatement	if ( m -> pmatch )		5198564	0					
ANR	5199501	Condition	m -> pmatch	291:6:8406:8414	5198564	0	True				
ANR	5199502	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199503	Identifier	m		5198564	0					
ANR	5199504	Identifier	pmatch		5198564	1					
ANR	5199505	CompoundStatement		162:17:3820:3820	5198564	1					
ANR	5199506	ForStatement	for ( i = 1 ; i < nmatch ; i ++ )		5198564	0					
ANR	5199507	ForInit	i = 1 ;	292:8:8427:8432	5198564	0	True				
ANR	5199508	AssignmentExpression	i = 1		5198564	0		=			
ANR	5199509	Identifier	i		5198564	0					
ANR	5199510	PrimaryExpression	1		5198564	1					
ANR	5199511	Condition	i < nmatch	292:15:8434:8443	5198564	1	True				
ANR	5199512	RelationalExpression	i < nmatch		5198564	0		<			
ANR	5199513	Identifier	i		5198564	0					
ANR	5199514	Identifier	nmatch		5198564	1					
ANR	5199515	PostIncDecOperationExpression	i ++	292:27:8446:8448	5198564	2	True				
ANR	5199516	Identifier	i		5198564	0					
ANR	5199517	IncDec	++		5198564	1					
ANR	5199518	CompoundStatement		163:32:3854:3854	5198564	3					
ANR	5199519	IfStatement	if ( i <= m -> g -> nsub )		5198564	0					
ANR	5199520	Condition	i <= m -> g -> nsub	293:8:8461:8475	5198564	0	True				
ANR	5199521	RelationalExpression	i <= m -> g -> nsub		5198564	0		<=			
ANR	5199522	Identifier	i		5198564	0					
ANR	5199523	PtrMemberAccess	m -> g -> nsub		5198564	1					
ANR	5199524	PtrMemberAccess	m -> g		5198564	0					
ANR	5199525	Identifier	m		5198564	0					
ANR	5199526	Identifier	g		5198564	1					
ANR	5199527	Identifier	nsub		5198564	1					
ANR	5199528	CompoundStatement		164:25:3881:3881	5198564	1					
ANR	5199529	ExpressionStatement	pmatch [ i ] = m -> pmatch [ i ]	294:5:8485:8509	5198564	0	True				
ANR	5199530	AssignmentExpression	pmatch [ i ] = m -> pmatch [ i ]		5198564	0		=			
ANR	5199531	ArrayIndexing	pmatch [ i ]		5198564	0					
ANR	5199532	Identifier	pmatch		5198564	0					
ANR	5199533	Identifier	i		5198564	1					
ANR	5199534	ArrayIndexing	m -> pmatch [ i ]		5198564	1					
ANR	5199535	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199536	Identifier	m		5198564	0					
ANR	5199537	Identifier	pmatch		5198564	1					
ANR	5199538	Identifier	i		5198564	1					
ANR	5199539	ElseStatement	else		5198564	0					
ANR	5199540	CompoundStatement		166:11:3925:3925	5198564	0					
ANR	5199541	ExpressionStatement	pmatch [ i ] . rm_so = - 1	296:5:8529:8549	5198564	0	True				
ANR	5199542	AssignmentExpression	pmatch [ i ] . rm_so = - 1		5198564	0		=			
ANR	5199543	MemberAccess	pmatch [ i ] . rm_so		5198564	0					
ANR	5199544	ArrayIndexing	pmatch [ i ]		5198564	0					
ANR	5199545	Identifier	pmatch		5198564	0					
ANR	5199546	Identifier	i		5198564	1					
ANR	5199547	Identifier	rm_so		5198564	1					
ANR	5199548	UnaryOperationExpression	- 1		5198564	1					
ANR	5199549	UnaryOperator	-		5198564	0					
ANR	5199550	PrimaryExpression	1		5198564	1					
ANR	5199551	ExpressionStatement	pmatch [ i ] . rm_eo = - 1	297:5:8556:8576	5198564	1	True				
ANR	5199552	AssignmentExpression	pmatch [ i ] . rm_eo = - 1		5198564	0		=			
ANR	5199553	MemberAccess	pmatch [ i ] . rm_eo		5198564	0					
ANR	5199554	ArrayIndexing	pmatch [ i ]		5198564	0					
ANR	5199555	Identifier	pmatch		5198564	0					
ANR	5199556	Identifier	i		5198564	1					
ANR	5199557	Identifier	rm_eo		5198564	1					
ANR	5199558	UnaryOperationExpression	- 1		5198564	1					
ANR	5199559	UnaryOperator	-		5198564	0					
ANR	5199560	PrimaryExpression	1		5198564	1					
ANR	5199561	IfStatement	if ( m -> pmatch != NULL )		5198564	30					
ANR	5199562	Condition	m -> pmatch != NULL	303:5:8602:8618	5198564	0	True				
ANR	5199563	EqualityExpression	m -> pmatch != NULL		5198564	0		!=			
ANR	5199564	PtrMemberAccess	m -> pmatch		5198564	0					
ANR	5199565	Identifier	m		5198564	0					
ANR	5199566	Identifier	pmatch		5198564	1					
ANR	5199567	Identifier	NULL		5198564	1					
ANR	5199568	ExpressionStatement	free ( ( char * ) m -> pmatch )	304:2:8623:8646	5198564	1	True				
ANR	5199569	CallExpression	free ( ( char * ) m -> pmatch )		5198564	0					
ANR	5199570	Callee	free		5198564	0					
ANR	5199571	Identifier	free		5198564	0					
ANR	5199572	ArgumentList	( char * ) m -> pmatch		5198564	1					
ANR	5199573	Argument	( char * ) m -> pmatch		5198564	0					
ANR	5199574	CastExpression	( char * ) m -> pmatch		5198564	0					
ANR	5199575	CastTarget	char *		5198564	0					
ANR	5199576	PtrMemberAccess	m -> pmatch		5198564	1					
ANR	5199577	Identifier	m		5198564	0					
ANR	5199578	Identifier	pmatch		5198564	1					
ANR	5199579	IfStatement	if ( m -> lastpos != NULL )		5198564	31					
ANR	5199580	Condition	m -> lastpos != NULL	305:5:8653:8670	5198564	0	True				
ANR	5199581	EqualityExpression	m -> lastpos != NULL		5198564	0		!=			
ANR	5199582	PtrMemberAccess	m -> lastpos		5198564	0					
ANR	5199583	Identifier	m		5198564	0					
ANR	5199584	Identifier	lastpos		5198564	1					
ANR	5199585	Identifier	NULL		5198564	1					
ANR	5199586	ExpressionStatement	free ( ( char * ) m -> lastpos )	306:2:8675:8699	5198564	1	True				
ANR	5199587	CallExpression	free ( ( char * ) m -> lastpos )		5198564	0					
ANR	5199588	Callee	free		5198564	0					
ANR	5199589	Identifier	free		5198564	0					
ANR	5199590	ArgumentList	( char * ) m -> lastpos		5198564	1					
ANR	5199591	Argument	( char * ) m -> lastpos		5198564	0					
ANR	5199592	CastExpression	( char * ) m -> lastpos		5198564	0					
ANR	5199593	CastTarget	char *		5198564	0					
ANR	5199594	PtrMemberAccess	m -> lastpos		5198564	1					
ANR	5199595	Identifier	m		5198564	0					
ANR	5199596	Identifier	lastpos		5198564	1					
ANR	5199597	ExpressionStatement	STATETEARDOWN ( m )	307:1:8702:8718	5198564	32	True				
ANR	5199598	CallExpression	STATETEARDOWN ( m )		5198564	0					
ANR	5199599	Callee	STATETEARDOWN		5198564	0					
ANR	5199600	Identifier	STATETEARDOWN		5198564	0					
ANR	5199601	ArgumentList	m		5198564	1					
ANR	5199602	Argument	m		5198564	0					
ANR	5199603	Identifier	m		5198564	0					
ANR	5199604	ReturnStatement	return ( 0 ) ;	308:1:8721:8730	5198564	33	True				
ANR	5199605	PrimaryExpression	0		5198564	0					
ANR	5199606	ReturnType	static int		5198564	1					
ANR	5199607	Identifier	matcher		5198564	2					
ANR	5199608	ParameterList	"struct re_guts * g , char * string , size_t nmatch , RRegexMatch pmatch [ ] , int eflags"		5198564	3					
ANR	5199609	Parameter	struct re_guts * g	128:8:4510:4526	5198564	0	True				
ANR	5199610	ParameterType	struct re_guts *		5198564	0					
ANR	5199611	Identifier	g		5198564	1					
ANR	5199612	Parameter	char * string	128:27:4529:4540	5198564	1	True				
ANR	5199613	ParameterType	char *		5198564	0					
ANR	5199614	Identifier	string		5198564	1					
ANR	5199615	Parameter	size_t nmatch	128:41:4543:4555	5198564	2	True				
ANR	5199616	ParameterType	size_t		5198564	0					
ANR	5199617	Identifier	nmatch		5198564	1					
ANR	5199618	Parameter	RRegexMatch pmatch [ ]	128:56:4558:4577	5198564	3	True				
ANR	5199619	ParameterType	RRegexMatch [ ]		5198564	0					
ANR	5199620	Identifier	pmatch		5198564	1					
ANR	5199621	Parameter	int eflags	129:4:4584:4593	5198564	4	True				
ANR	5199622	ParameterType	int		5198564	0					
ANR	5199623	Identifier	eflags		5198564	1					
ANR	5199624	CFGEntryNode	ENTRY		5198564		True				
ANR	5199625	CFGExitNode	EXIT		5198564		True				
ANR	5199626	InfiniteForNode	true		5198564		True				
ANR	5199627	InfiniteForNode	true		5198564		True				
ANR	5199628	InfiniteForNode	true		5198564		True				
ANR	5199629	Symbol	backref		5198564						
ANR	5199630	Symbol	m -> pmatch		5198564						
ANR	5199631	Symbol	m -> st		5198564						
ANR	5199632	Symbol	m -> g -> nsub		5198564						
ANR	5199633	Symbol	dp		5198564						
ANR	5199634	Symbol	* pmatch		5198564						
ANR	5199635	Symbol	strlen		5198564						
ANR	5199636	Symbol	m -> eflags		5198564						
ANR	5199637	Symbol	g -> backrefs		5198564						
ANR	5199638	Symbol	g -> cflags		5198564						
ANR	5199639	Symbol	pmatch [ 0 ] . rm_eo		5198564						
ANR	5199640	Symbol	memcmp		5198564						
ANR	5199641	Symbol	m -> g -> nstates		5198564						
ANR	5199642	Symbol	pmatch		5198564						
ANR	5199643	Symbol	m -> pmatch [ i ] . rm_eo		5198564						
ANR	5199644	Symbol	g -> firststate		5198564						
ANR	5199645	Symbol	NULL		5198564						
ANR	5199646	Symbol	m -> beginp		5198564						
ANR	5199647	Symbol	* * g		5198564						
ANR	5199648	Symbol	pmatch [ i ] . rm_eo		5198564						
ANR	5199649	Symbol	g -> laststate		5198564						
ANR	5199650	Symbol	mv		5198564						
ANR	5199651	Symbol	m -> lastpos		5198564						
ANR	5199652	Symbol	R_REGEX_NOMATCH		5198564						
ANR	5199653	Symbol	stop		5198564						
ANR	5199654	Symbol	slow		5198564						
ANR	5199655	Symbol	g -> must		5198564						
ANR	5199656	Symbol	g -> mlen		5198564						
ANR	5199657	Symbol	m -> offp		5198564						
ANR	5199658	Symbol	g -> nplus		5198564						
ANR	5199659	Symbol	pmatch [ 0 ] . rm_so		5198564						
ANR	5199660	Symbol	string		5198564						
ANR	5199661	Symbol	m -> fresh		5198564						
ANR	5199662	Symbol	R_REGEX_INVARG		5198564						
ANR	5199663	Symbol	* m -> g		5198564						
ANR	5199664	Symbol	m -> tmp		5198564						
ANR	5199665	Symbol	* dp		5198564						
ANR	5199666	Symbol	m -> endp		5198564						
ANR	5199667	Symbol	m -> pmatch [ i ] . rm_so		5198564						
ANR	5199668	Symbol	m -> g		5198564						
ANR	5199669	Symbol	R_REGEX_BACKR		5198564						
ANR	5199670	Symbol	endp		5198564						
ANR	5199671	Symbol	m -> coldp		5198564						
ANR	5199672	Symbol	* m -> pmatch		5198564						
ANR	5199673	Symbol	* * m		5198564						
ANR	5199674	Symbol	gf		5198564						
ANR	5199675	Symbol	malloc		5198564						
ANR	5199676	Symbol	gl		5198564						
ANR	5199677	Symbol	g		5198564						
ANR	5199678	Symbol	start		5198564						
ANR	5199679	Symbol	i		5198564						
ANR	5199680	Symbol	eflags		5198564						
ANR	5199681	Symbol	m		5198564						
ANR	5199682	Symbol	R_REGEX_STARTEND		5198564						
ANR	5199683	Symbol	* g		5198564						
ANR	5199684	Symbol	& mv		5198564						
ANR	5199685	Symbol	pmatch [ i ] . rm_so		5198564						
ANR	5199686	Symbol	fast		5198564						
ANR	5199687	Symbol	* i		5198564						
ANR	5199688	Symbol	R_REGEX_NOSUB		5198564						
ANR	5199689	Symbol	R_REGEX_ESPACE		5198564						
ANR	5199690	Symbol	nmatch		5198564						
ANR	5199691	Symbol	* g -> must		5198564						
ANR	5199692	Symbol	m -> empty		5198564						
ANR	5199693	Symbol	* m		5198564						
ANR	5199694	Symbol	dissect		5198564						
ANR	5199695	Function	dissect	314:0:8804:13243							
ANR	5199696	FunctionDef	"dissect (struct match * m , char * start , char * stop , sopno startst , sopno stopst)"		5199695	0					
ANR	5199697	CompoundStatement		316:0:8930:13243	5199695	0					
ANR	5199698	IdentifierDeclStatement	int i ;	317:1:8933:8938	5199695	0	True				
ANR	5199699	IdentifierDecl	i		5199695	0					
ANR	5199700	IdentifierDeclType	int		5199695	0					
ANR	5199701	Identifier	i		5199695	1					
ANR	5199702	IdentifierDeclStatement	sopno ss ;	318:1:8941:8949	5199695	1	True				
ANR	5199703	IdentifierDecl	ss		5199695	0					
ANR	5199704	IdentifierDeclType	sopno		5199695	0					
ANR	5199705	Identifier	ss		5199695	1					
ANR	5199706	IdentifierDeclStatement	sopno es ;	319:1:8985:8993	5199695	2	True				
ANR	5199707	IdentifierDecl	es		5199695	0					
ANR	5199708	IdentifierDeclType	sopno		5199695	0					
ANR	5199709	Identifier	es		5199695	1					
ANR	5199710	IdentifierDeclStatement	char * sp ;	320:1:9027:9035	5199695	3	True				
ANR	5199711	IdentifierDecl	* sp		5199695	0					
ANR	5199712	IdentifierDeclType	char *		5199695	0					
ANR	5199713	Identifier	sp		5199695	1					
ANR	5199714	IdentifierDeclStatement	char * stp ;	321:1:9074:9083	5199695	4	True				
ANR	5199715	IdentifierDecl	* stp		5199695	0					
ANR	5199716	IdentifierDeclType	char *		5199695	0					
ANR	5199717	Identifier	stp		5199695	1					
ANR	5199718	IdentifierDeclStatement	char * rest ;	322:1:9130:9140	5199695	5	True				
ANR	5199719	IdentifierDecl	* rest		5199695	0					
ANR	5199720	IdentifierDeclType	char *		5199695	0					
ANR	5199721	Identifier	rest		5199695	1					
ANR	5199722	IdentifierDeclStatement	char * tail ;	323:1:9173:9183	5199695	6	True				
ANR	5199723	IdentifierDecl	* tail		5199695	0					
ANR	5199724	IdentifierDeclType	char *		5199695	0					
ANR	5199725	Identifier	tail		5199695	1					
ANR	5199726	IdentifierDeclStatement	sopno ssub ;	324:1:9223:9233	5199695	7	True				
ANR	5199727	IdentifierDecl	ssub		5199695	0					
ANR	5199728	IdentifierDeclType	sopno		5199695	0					
ANR	5199729	Identifier	ssub		5199695	1					
ANR	5199730	IdentifierDeclStatement	sopno esub ;	325:1:9264:9274	5199695	8	True				
ANR	5199731	IdentifierDecl	esub		5199695	0					
ANR	5199732	IdentifierDeclType	sopno		5199695	0					
ANR	5199733	Identifier	esub		5199695	1					
ANR	5199734	IdentifierDeclStatement	char * ssp ;	326:1:9303:9312	5199695	9	True				
ANR	5199735	IdentifierDecl	* ssp		5199695	0					
ANR	5199736	IdentifierDeclType	char *		5199695	0					
ANR	5199737	Identifier	ssp		5199695	1					
ANR	5199738	IdentifierDeclStatement	char * sep ;	327:1:9357:9366	5199695	10	True				
ANR	5199739	IdentifierDecl	* sep		5199695	0					
ANR	5199740	IdentifierDeclType	char *		5199695	0					
ANR	5199741	Identifier	sep		5199695	1					
ANR	5199742	IdentifierDeclStatement	char * oldssp ;	328:1:9409:9421	5199695	11	True				
ANR	5199743	IdentifierDecl	* oldssp		5199695	0					
ANR	5199744	IdentifierDeclType	char *		5199695	0					
ANR	5199745	Identifier	oldssp		5199695	1					
ANR	5199746	IdentifierDeclStatement	char * dp ;	329:1:9443:9451	5199695	12	True				
ANR	5199747	IdentifierDecl	* dp		5199695	0					
ANR	5199748	IdentifierDeclType	char *		5199695	0					
ANR	5199749	Identifier	dp		5199695	1					
ANR	5199750	ExpressionStatement	"AT ( ""diss"" , start , stop , startst , stopst )"	331:1:9455:9495	5199695	13	True				
ANR	5199751	CallExpression	"AT ( ""diss"" , start , stop , startst , stopst )"		5199695	0					
ANR	5199752	Callee	AT		5199695	0					
ANR	5199753	Identifier	AT		5199695	0					
ANR	5199754	ArgumentList	"""diss"""		5199695	1					
ANR	5199755	Argument	"""diss"""		5199695	0					
ANR	5199756	PrimaryExpression	"""diss"""		5199695	0					
ANR	5199757	Argument	start		5199695	1					
ANR	5199758	Identifier	start		5199695	0					
ANR	5199759	Argument	stop		5199695	2					
ANR	5199760	Identifier	stop		5199695	0					
ANR	5199761	Argument	startst		5199695	3					
ANR	5199762	Identifier	startst		5199695	0					
ANR	5199763	Argument	stopst		5199695	4					
ANR	5199764	Identifier	stopst		5199695	0					
ANR	5199765	ExpressionStatement	sp = start	332:1:9498:9508	5199695	14	True				
ANR	5199766	AssignmentExpression	sp = start		5199695	0		=			
ANR	5199767	Identifier	sp		5199695	0					
ANR	5199768	Identifier	start		5199695	1					
ANR	5199769	ForStatement	for ( ss = startst ; ss < stopst ; ss = es )		5199695	15					
ANR	5199770	ForInit	ss = startst ;	333:6:9516:9528	5199695	0	True				
ANR	5199771	AssignmentExpression	ss = startst		5199695	0		=			
ANR	5199772	Identifier	ss		5199695	0					
ANR	5199773	Identifier	startst		5199695	1					
ANR	5199774	Condition	ss < stopst	333:20:9530:9540	5199695	1	True				
ANR	5199775	RelationalExpression	ss < stopst		5199695	0		<			
ANR	5199776	Identifier	ss		5199695	0					
ANR	5199777	Identifier	stopst		5199695	1					
ANR	5199778	AssignmentExpression	ss = es	333:33:9543:9549	5199695	2	True	=			
ANR	5199779	Identifier	ss		5199695	0					
ANR	5199780	Identifier	es		5199695	1					
ANR	5199781	CompoundStatement		18:42:621:621	5199695	3					
ANR	5199782	ExpressionStatement	es = ss	335:2:9586:9593	5199695	0	True				
ANR	5199783	AssignmentExpression	es = ss		5199695	0		=			
ANR	5199784	Identifier	es		5199695	0					
ANR	5199785	Identifier	ss		5199695	1					
ANR	5199786	SwitchStatement	switch ( OP ( m -> g -> strip [ es ] ) )		5199695	1					
ANR	5199787	Condition	OP ( m -> g -> strip [ es ] )	336:10:9605:9623	5199695	0	True				
ANR	5199788	CallExpression	OP ( m -> g -> strip [ es ] )		5199695	0					
ANR	5199789	Callee	OP		5199695	0					
ANR	5199790	Identifier	OP		5199695	0					
ANR	5199791	ArgumentList	m -> g -> strip [ es ]		5199695	1					
ANR	5199792	Argument	m -> g -> strip [ es ]		5199695	0					
ANR	5199793	ArrayIndexing	m -> g -> strip [ es ]		5199695	0					
ANR	5199794	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5199795	PtrMemberAccess	m -> g		5199695	0					
ANR	5199796	Identifier	m		5199695	0					
ANR	5199797	Identifier	g		5199695	1					
ANR	5199798	Identifier	strip		5199695	1					
ANR	5199799	Identifier	es		5199695	1					
ANR	5199800	CompoundStatement		21:31:695:695	5199695	1					
ANR	5199801	Label	case OPLUS_ :	337:2:9630:9641	5199695	0	True				
ANR	5199802	Identifier	OPLUS_		5199695	0					
ANR	5199803	Label	case OQUEST_ :	338:2:9645:9657	5199695	1	True				
ANR	5199804	Identifier	OQUEST_		5199695	0					
ANR	5199805	ExpressionStatement	es += OPND ( m -> g -> strip [ es ] )	339:3:9662:9689	5199695	2	True				
ANR	5199806	AssignmentExpression	es += OPND ( m -> g -> strip [ es ] )		5199695	0		+=			
ANR	5199807	Identifier	es		5199695	0					
ANR	5199808	CallExpression	OPND ( m -> g -> strip [ es ] )		5199695	1					
ANR	5199809	Callee	OPND		5199695	0					
ANR	5199810	Identifier	OPND		5199695	0					
ANR	5199811	ArgumentList	m -> g -> strip [ es ]		5199695	1					
ANR	5199812	Argument	m -> g -> strip [ es ]		5199695	0					
ANR	5199813	ArrayIndexing	m -> g -> strip [ es ]		5199695	0					
ANR	5199814	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5199815	PtrMemberAccess	m -> g		5199695	0					
ANR	5199816	Identifier	m		5199695	0					
ANR	5199817	Identifier	g		5199695	1					
ANR	5199818	Identifier	strip		5199695	1					
ANR	5199819	Identifier	es		5199695	1					
ANR	5199820	BreakStatement	break ;	340:3:9694:9699	5199695	3	True				
ANR	5199821	Label	case OCH_ :	341:2:9703:9712	5199695	4	True				
ANR	5199822	Identifier	OCH_		5199695	0					
ANR	5199823	WhileStatement	while ( OP ( m -> g -> strip [ es ] ) != O_CH )		5199695	5					
ANR	5199824	Condition	OP ( m -> g -> strip [ es ] ) != O_CH	342:10:9724:9750	5199695	0	True				
ANR	5199825	EqualityExpression	OP ( m -> g -> strip [ es ] ) != O_CH		5199695	0		!=			
ANR	5199826	CallExpression	OP ( m -> g -> strip [ es ] )		5199695	0					
ANR	5199827	Callee	OP		5199695	0					
ANR	5199828	Identifier	OP		5199695	0					
ANR	5199829	ArgumentList	m -> g -> strip [ es ]		5199695	1					
ANR	5199830	Argument	m -> g -> strip [ es ]		5199695	0					
ANR	5199831	ArrayIndexing	m -> g -> strip [ es ]		5199695	0					
ANR	5199832	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5199833	PtrMemberAccess	m -> g		5199695	0					
ANR	5199834	Identifier	m		5199695	0					
ANR	5199835	Identifier	g		5199695	1					
ANR	5199836	Identifier	strip		5199695	1					
ANR	5199837	Identifier	es		5199695	1					
ANR	5199838	Identifier	O_CH		5199695	1					
ANR	5199839	ExpressionStatement	es += OPND ( m -> g -> strip [ es ] )	343:4:9757:9784	5199695	1	True				
ANR	5199840	AssignmentExpression	es += OPND ( m -> g -> strip [ es ] )		5199695	0		+=			
ANR	5199841	Identifier	es		5199695	0					
ANR	5199842	CallExpression	OPND ( m -> g -> strip [ es ] )		5199695	1					
ANR	5199843	Callee	OPND		5199695	0					
ANR	5199844	Identifier	OPND		5199695	0					
ANR	5199845	ArgumentList	m -> g -> strip [ es ]		5199695	1					
ANR	5199846	Argument	m -> g -> strip [ es ]		5199695	0					
ANR	5199847	ArrayIndexing	m -> g -> strip [ es ]		5199695	0					
ANR	5199848	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5199849	PtrMemberAccess	m -> g		5199695	0					
ANR	5199850	Identifier	m		5199695	0					
ANR	5199851	Identifier	g		5199695	1					
ANR	5199852	Identifier	strip		5199695	1					
ANR	5199853	Identifier	es		5199695	1					
ANR	5199854	BreakStatement	break ;	344:3:9789:9794	5199695	6	True				
ANR	5199855	ExpressionStatement	es ++	346:2:9802:9806	5199695	2	True				
ANR	5199856	PostIncDecOperationExpression	es ++		5199695	0					
ANR	5199857	Identifier	es		5199695	0					
ANR	5199858	IncDec	++		5199695	1					
ANR	5199859	SwitchStatement	switch ( OP ( m -> g -> strip [ ss ] ) )		5199695	3					
ANR	5199860	Condition	OP ( m -> g -> strip [ ss ] )	349:10:9854:9872	5199695	0	True				
ANR	5199861	CallExpression	OP ( m -> g -> strip [ ss ] )		5199695	0					
ANR	5199862	Callee	OP		5199695	0					
ANR	5199863	Identifier	OP		5199695	0					
ANR	5199864	ArgumentList	m -> g -> strip [ ss ]		5199695	1					
ANR	5199865	Argument	m -> g -> strip [ ss ]		5199695	0					
ANR	5199866	ArrayIndexing	m -> g -> strip [ ss ]		5199695	0					
ANR	5199867	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5199868	PtrMemberAccess	m -> g		5199695	0					
ANR	5199869	Identifier	m		5199695	0					
ANR	5199870	Identifier	g		5199695	1					
ANR	5199871	Identifier	strip		5199695	1					
ANR	5199872	Identifier	ss		5199695	1					
ANR	5199873	CompoundStatement		34:31:944:944	5199695	1					
ANR	5199874	Label	case OEND :	350:2:9879:9888	5199695	0	True				
ANR	5199875	Identifier	OEND		5199695	0					
ANR	5199876	BreakStatement	break ;	351:3:9893:9898	5199695	1	True				
ANR	5199877	Label	case OCHAR :	352:2:9902:9912	5199695	2	True				
ANR	5199878	Identifier	OCHAR		5199695	0					
ANR	5199879	ExpressionStatement	sp ++	353:3:9917:9921	5199695	3	True				
ANR	5199880	PostIncDecOperationExpression	sp ++		5199695	0					
ANR	5199881	Identifier	sp		5199695	0					
ANR	5199882	IncDec	++		5199695	1					
ANR	5199883	BreakStatement	break ;	354:3:9926:9931	5199695	4	True				
ANR	5199884	Label	case OBOL :	355:2:9935:9944	5199695	5	True				
ANR	5199885	Identifier	OBOL		5199695	0					
ANR	5199886	Label	case OEOL :	356:2:9948:9957	5199695	6	True				
ANR	5199887	Identifier	OEOL		5199695	0					
ANR	5199888	Label	case OBOW :	357:2:9961:9970	5199695	7	True				
ANR	5199889	Identifier	OBOW		5199695	0					
ANR	5199890	Label	case OEOW :	358:2:9974:9983	5199695	8	True				
ANR	5199891	Identifier	OEOW		5199695	0					
ANR	5199892	BreakStatement	break ;	359:3:9988:9993	5199695	9	True				
ANR	5199893	Label	case OANY :	360:2:9997:10006	5199695	10	True				
ANR	5199894	Identifier	OANY		5199695	0					
ANR	5199895	Label	case OANYOF :	361:2:10010:10021	5199695	11	True				
ANR	5199896	Identifier	OANYOF		5199695	0					
ANR	5199897	ExpressionStatement	sp ++	362:3:10026:10030	5199695	12	True				
ANR	5199898	PostIncDecOperationExpression	sp ++		5199695	0					
ANR	5199899	Identifier	sp		5199695	0					
ANR	5199900	IncDec	++		5199695	1					
ANR	5199901	BreakStatement	break ;	363:3:10035:10040	5199695	13	True				
ANR	5199902	Label	case OBACK_ :	364:2:10044:10055	5199695	14	True				
ANR	5199903	Identifier	OBACK_		5199695	0					
ANR	5199904	Label	case O_BACK :	365:2:10059:10070	5199695	15	True				
ANR	5199905	Identifier	O_BACK		5199695	0					
ANR	5199906	BreakStatement	break ;	366:3:10075:10080	5199695	16	True				
ANR	5199907	Label	case OQUEST_ :	368:2:10136:10148	5199695	17	True				
ANR	5199908	Identifier	OQUEST_		5199695	0					
ANR	5199909	ExpressionStatement	stp = stop	369:3:10153:10163	5199695	18	True				
ANR	5199910	AssignmentExpression	stp = stop		5199695	0		=			
ANR	5199911	Identifier	stp		5199695	0					
ANR	5199912	Identifier	stop		5199695	1					
ANR	5199913	ForStatement	for ( ; ; )		5199695	19					
ANR	5199914	CompoundStatement		55:12:1246:1246	5199695	0					
ANR	5199915	ExpressionStatement	"rest = slow ( m , sp , stp , ss , es )"	372:4:10221:10252	5199695	0	True				
ANR	5199916	AssignmentExpression	"rest = slow ( m , sp , stp , ss , es )"		5199695	0		=			
ANR	5199917	Identifier	rest		5199695	0					
ANR	5199918	CallExpression	"slow ( m , sp , stp , ss , es )"		5199695	1					
ANR	5199919	Callee	slow		5199695	0					
ANR	5199920	Identifier	slow		5199695	0					
ANR	5199921	ArgumentList	m		5199695	1					
ANR	5199922	Argument	m		5199695	0					
ANR	5199923	Identifier	m		5199695	0					
ANR	5199924	Argument	sp		5199695	1					
ANR	5199925	Identifier	sp		5199695	0					
ANR	5199926	Argument	stp		5199695	2					
ANR	5199927	Identifier	stp		5199695	0					
ANR	5199928	Argument	ss		5199695	3					
ANR	5199929	Identifier	ss		5199695	0					
ANR	5199930	Argument	es		5199695	4					
ANR	5199931	Identifier	es		5199695	0					
ANR	5199932	IfStatement	if ( rest )		5199695	1					
ANR	5199933	Condition	rest	373:8:10262:10265	5199695	0	True				
ANR	5199934	Identifier	rest		5199695	0					
ANR	5199935	CompoundStatement		58:14:1337:1337	5199695	1					
ANR	5199936	ExpressionStatement	"tail = slow ( m , rest , stop , es , stopst )"	375:5:10336:10374	5199695	0	True				
ANR	5199937	AssignmentExpression	"tail = slow ( m , rest , stop , es , stopst )"		5199695	0		=			
ANR	5199938	Identifier	tail		5199695	0					
ANR	5199939	CallExpression	"slow ( m , rest , stop , es , stopst )"		5199695	1					
ANR	5199940	Callee	slow		5199695	0					
ANR	5199941	Identifier	slow		5199695	0					
ANR	5199942	ArgumentList	m		5199695	1					
ANR	5199943	Argument	m		5199695	0					
ANR	5199944	Identifier	m		5199695	0					
ANR	5199945	Argument	rest		5199695	1					
ANR	5199946	Identifier	rest		5199695	0					
ANR	5199947	Argument	stop		5199695	2					
ANR	5199948	Identifier	stop		5199695	0					
ANR	5199949	Argument	es		5199695	3					
ANR	5199950	Identifier	es		5199695	0					
ANR	5199951	Argument	stopst		5199695	4					
ANR	5199952	Identifier	stopst		5199695	0					
ANR	5199953	IfStatement	if ( tail == stop )		5199695	1					
ANR	5199954	Condition	tail == stop	376:9:10385:10396	5199695	0	True				
ANR	5199955	EqualityExpression	tail == stop		5199695	0		==			
ANR	5199956	Identifier	tail		5199695	0					
ANR	5199957	Identifier	stop		5199695	1					
ANR	5199958	BreakStatement	break ;	377:6:10405:10410	5199695	1	True				
ANR	5199959	ExpressionStatement	stp = rest - 1	379:5:10479:10493	5199695	2	True				
ANR	5199960	AssignmentExpression	stp = rest - 1		5199695	0		=			
ANR	5199961	Identifier	stp		5199695	0					
ANR	5199962	AdditiveExpression	rest - 1		5199695	1		-			
ANR	5199963	Identifier	rest		5199695	0					
ANR	5199964	PrimaryExpression	1		5199695	1					
ANR	5199965	ExpressionStatement	ssub = ss + 1	382:3:10509:10522	5199695	20	True				
ANR	5199966	AssignmentExpression	ssub = ss + 1		5199695	0		=			
ANR	5199967	Identifier	ssub		5199695	0					
ANR	5199968	AdditiveExpression	ss + 1		5199695	1		+			
ANR	5199969	Identifier	ss		5199695	0					
ANR	5199970	PrimaryExpression	1		5199695	1					
ANR	5199971	ExpressionStatement	esub = es - 1	383:3:10527:10540	5199695	21	True				
ANR	5199972	AssignmentExpression	esub = es - 1		5199695	0		=			
ANR	5199973	Identifier	esub		5199695	0					
ANR	5199974	AdditiveExpression	es - 1		5199695	1		-			
ANR	5199975	Identifier	es		5199695	0					
ANR	5199976	PrimaryExpression	1		5199695	1					
ANR	5199977	IfStatement	"if ( slow ( m , sp , rest , ssub , esub ) != NULL )"		5199695	22					
ANR	5199978	Condition	"slow ( m , sp , rest , ssub , esub ) != NULL"	385:7:10577:10613	5199695	0	True				
ANR	5199979	EqualityExpression	"slow ( m , sp , rest , ssub , esub ) != NULL"		5199695	0		!=			
ANR	5199980	CallExpression	"slow ( m , sp , rest , ssub , esub )"		5199695	0					
ANR	5199981	Callee	slow		5199695	0					
ANR	5199982	Identifier	slow		5199695	0					
ANR	5199983	ArgumentList	m		5199695	1					
ANR	5199984	Argument	m		5199695	0					
ANR	5199985	Identifier	m		5199695	0					
ANR	5199986	Argument	sp		5199695	1					
ANR	5199987	Identifier	sp		5199695	0					
ANR	5199988	Argument	rest		5199695	2					
ANR	5199989	Identifier	rest		5199695	0					
ANR	5199990	Argument	ssub		5199695	3					
ANR	5199991	Identifier	ssub		5199695	0					
ANR	5199992	Argument	esub		5199695	4					
ANR	5199993	Identifier	esub		5199695	0					
ANR	5199994	Identifier	NULL		5199695	1					
ANR	5199995	CompoundStatement		70:46:1685:1685	5199695	1					
ANR	5199996	ExpressionStatement	"dp = dissect ( m , sp , rest , ssub , esub )"	386:4:10622:10659	5199695	0	True				
ANR	5199997	AssignmentExpression	"dp = dissect ( m , sp , rest , ssub , esub )"		5199695	0		=			
ANR	5199998	Identifier	dp		5199695	0					
ANR	5199999	CallExpression	"dissect ( m , sp , rest , ssub , esub )"		5199695	1					
ANR	5200000	Callee	dissect		5199695	0					
ANR	5200001	Identifier	dissect		5199695	0					
ANR	5200002	ArgumentList	m		5199695	1					
ANR	5200003	Argument	m		5199695	0					
ANR	5200004	Identifier	m		5199695	0					
ANR	5200005	Argument	sp		5199695	1					
ANR	5200006	Identifier	sp		5199695	0					
ANR	5200007	Argument	rest		5199695	2					
ANR	5200008	Identifier	rest		5199695	0					
ANR	5200009	Argument	ssub		5199695	3					
ANR	5200010	Identifier	ssub		5199695	0					
ANR	5200011	Argument	esub		5199695	4					
ANR	5200012	Identifier	esub		5199695	0					
ANR	5200013	IfStatement	if ( dp != rest )		5199695	1					
ANR	5200014	Condition	dp != rest	387:8:10669:10678	5199695	0	True				
ANR	5200015	EqualityExpression	dp != rest		5199695	0		!=			
ANR	5200016	Identifier	dp		5199695	0					
ANR	5200017	Identifier	rest		5199695	1					
ANR	5200018	ReturnStatement	return NULL ;	387:20:10681:10692	5199695	1	True				
ANR	5200019	Identifier	NULL		5199695	0					
ANR	5200020	ElseStatement	else		5199695	0					
ANR	5200021	IfStatement	if ( sp != rest )		5199695	0					
ANR	5200022	Condition	sp != rest	388:14:10708:10717	5199695	0	True				
ANR	5200023	EqualityExpression	sp != rest		5199695	0		!=			
ANR	5200024	Identifier	sp		5199695	0					
ANR	5200025	Identifier	rest		5199695	1					
ANR	5200026	ReturnStatement	return NULL ;	388:26:10720:10731	5199695	1	True				
ANR	5200027	Identifier	NULL		5199695	0					
ANR	5200028	ExpressionStatement	sp = rest	389:3:10736:10745	5199695	23	True				
ANR	5200029	AssignmentExpression	sp = rest		5199695	0		=			
ANR	5200030	Identifier	sp		5199695	0					
ANR	5200031	Identifier	rest		5199695	1					
ANR	5200032	BreakStatement	break ;	390:3:10750:10755	5199695	24	True				
ANR	5200033	Label	case OPLUS_ :	391:2:10759:10770	5199695	25	True				
ANR	5200034	Identifier	OPLUS_		5199695	0					
ANR	5200035	ExpressionStatement	stp = stop	392:3:10775:10785	5199695	26	True				
ANR	5200036	AssignmentExpression	stp = stop		5199695	0		=			
ANR	5200037	Identifier	stp		5199695	0					
ANR	5200038	Identifier	stop		5199695	1					
ANR	5200039	ForStatement	for ( ; ; )		5199695	27					
ANR	5200040	CompoundStatement		78:12:1868:1868	5199695	0					
ANR	5200041	ExpressionStatement	"rest = slow ( m , sp , stp , ss , es )"	395:4:10843:10874	5199695	0	True				
ANR	5200042	AssignmentExpression	"rest = slow ( m , sp , stp , ss , es )"		5199695	0		=			
ANR	5200043	Identifier	rest		5199695	0					
ANR	5200044	CallExpression	"slow ( m , sp , stp , ss , es )"		5199695	1					
ANR	5200045	Callee	slow		5199695	0					
ANR	5200046	Identifier	slow		5199695	0					
ANR	5200047	ArgumentList	m		5199695	1					
ANR	5200048	Argument	m		5199695	0					
ANR	5200049	Identifier	m		5199695	0					
ANR	5200050	Argument	sp		5199695	1					
ANR	5200051	Identifier	sp		5199695	0					
ANR	5200052	Argument	stp		5199695	2					
ANR	5200053	Identifier	stp		5199695	0					
ANR	5200054	Argument	ss		5199695	3					
ANR	5200055	Identifier	ss		5199695	0					
ANR	5200056	Argument	es		5199695	4					
ANR	5200057	Identifier	es		5199695	0					
ANR	5200058	IfStatement	if ( rest != NULL )		5199695	1					
ANR	5200059	Condition	rest != NULL	396:8:10884:10895	5199695	0	True				
ANR	5200060	EqualityExpression	rest != NULL		5199695	0		!=			
ANR	5200061	Identifier	rest		5199695	0					
ANR	5200062	Identifier	NULL		5199695	1					
ANR	5200063	CompoundStatement		81:22:1967:1967	5199695	1					
ANR	5200064	ExpressionStatement	"tail = slow ( m , rest , stop , es , stopst )"	398:5:10966:11004	5199695	0	True				
ANR	5200065	AssignmentExpression	"tail = slow ( m , rest , stop , es , stopst )"		5199695	0		=			
ANR	5200066	Identifier	tail		5199695	0					
ANR	5200067	CallExpression	"slow ( m , rest , stop , es , stopst )"		5199695	1					
ANR	5200068	Callee	slow		5199695	0					
ANR	5200069	Identifier	slow		5199695	0					
ANR	5200070	ArgumentList	m		5199695	1					
ANR	5200071	Argument	m		5199695	0					
ANR	5200072	Identifier	m		5199695	0					
ANR	5200073	Argument	rest		5199695	1					
ANR	5200074	Identifier	rest		5199695	0					
ANR	5200075	Argument	stop		5199695	2					
ANR	5200076	Identifier	stop		5199695	0					
ANR	5200077	Argument	es		5199695	3					
ANR	5200078	Identifier	es		5199695	0					
ANR	5200079	Argument	stopst		5199695	4					
ANR	5200080	Identifier	stopst		5199695	0					
ANR	5200081	IfStatement	if ( tail == stop )		5199695	1					
ANR	5200082	Condition	tail == stop	399:9:11015:11026	5199695	0	True				
ANR	5200083	EqualityExpression	tail == stop		5199695	0		==			
ANR	5200084	Identifier	tail		5199695	0					
ANR	5200085	Identifier	stop		5199695	1					
ANR	5200086	BreakStatement	break ;	400:6:11035:11040	5199695	1	True				
ANR	5200087	ExpressionStatement	stp = rest - 1	402:5:11109:11123	5199695	2	True				
ANR	5200088	AssignmentExpression	stp = rest - 1		5199695	0		=			
ANR	5200089	Identifier	stp		5199695	0					
ANR	5200090	AdditiveExpression	rest - 1		5199695	1		-			
ANR	5200091	Identifier	rest		5199695	0					
ANR	5200092	PrimaryExpression	1		5199695	1					
ANR	5200093	ExpressionStatement	ssub = ss + 1	405:3:11139:11152	5199695	28	True				
ANR	5200094	AssignmentExpression	ssub = ss + 1		5199695	0		=			
ANR	5200095	Identifier	ssub		5199695	0					
ANR	5200096	AdditiveExpression	ss + 1		5199695	1		+			
ANR	5200097	Identifier	ss		5199695	0					
ANR	5200098	PrimaryExpression	1		5199695	1					
ANR	5200099	ExpressionStatement	esub = es - 1	406:3:11157:11170	5199695	29	True				
ANR	5200100	AssignmentExpression	esub = es - 1		5199695	0		=			
ANR	5200101	Identifier	esub		5199695	0					
ANR	5200102	AdditiveExpression	es - 1		5199695	1		-			
ANR	5200103	Identifier	es		5199695	0					
ANR	5200104	PrimaryExpression	1		5199695	1					
ANR	5200105	ExpressionStatement	ssp = sp	407:3:11175:11183	5199695	30	True				
ANR	5200106	AssignmentExpression	ssp = sp		5199695	0		=			
ANR	5200107	Identifier	ssp		5199695	0					
ANR	5200108	Identifier	sp		5199695	1					
ANR	5200109	ExpressionStatement	oldssp = ssp	408:3:11188:11200	5199695	31	True				
ANR	5200110	AssignmentExpression	oldssp = ssp		5199695	0		=			
ANR	5200111	Identifier	oldssp		5199695	0					
ANR	5200112	Identifier	ssp		5199695	1					
ANR	5200113	ForStatement	for ( ; ; )		5199695	32					
ANR	5200114	CompoundStatement		94:12:2283:2283	5199695	0					
ANR	5200115	ExpressionStatement	"sep = slow ( m , ssp , rest , ssub , esub )"	410:4:11253:11289	5199695	0	True				
ANR	5200116	AssignmentExpression	"sep = slow ( m , ssp , rest , ssub , esub )"		5199695	0		=			
ANR	5200117	Identifier	sep		5199695	0					
ANR	5200118	CallExpression	"slow ( m , ssp , rest , ssub , esub )"		5199695	1					
ANR	5200119	Callee	slow		5199695	0					
ANR	5200120	Identifier	slow		5199695	0					
ANR	5200121	ArgumentList	m		5199695	1					
ANR	5200122	Argument	m		5199695	0					
ANR	5200123	Identifier	m		5199695	0					
ANR	5200124	Argument	ssp		5199695	1					
ANR	5200125	Identifier	ssp		5199695	0					
ANR	5200126	Argument	rest		5199695	2					
ANR	5200127	Identifier	rest		5199695	0					
ANR	5200128	Argument	ssub		5199695	3					
ANR	5200129	Identifier	ssub		5199695	0					
ANR	5200130	Argument	esub		5199695	4					
ANR	5200131	Identifier	esub		5199695	0					
ANR	5200132	IfStatement	if ( ! sep || sep == ssp )		5199695	1					
ANR	5200133	Condition	! sep || sep == ssp	411:8:11299:11316	5199695	0	True				
ANR	5200134	OrExpression	! sep || sep == ssp		5199695	0		||			
ANR	5200135	UnaryOperationExpression	! sep		5199695	0					
ANR	5200136	UnaryOperator	!		5199695	0					
ANR	5200137	Identifier	sep		5199695	1					
ANR	5200138	EqualityExpression	sep == ssp		5199695	1		==			
ANR	5200139	Identifier	sep		5199695	0					
ANR	5200140	Identifier	ssp		5199695	1					
ANR	5200141	BreakStatement	break ;	412:5:11324:11329	5199695	1	True				
ANR	5200142	ExpressionStatement	oldssp = ssp	413:4:11364:11376	5199695	2	True				
ANR	5200143	AssignmentExpression	oldssp = ssp		5199695	0		=			
ANR	5200144	Identifier	oldssp		5199695	0					
ANR	5200145	Identifier	ssp		5199695	1					
ANR	5200146	ExpressionStatement	ssp = sep	414:4:11403:11412	5199695	3	True				
ANR	5200147	AssignmentExpression	ssp = sep		5199695	0		=			
ANR	5200148	Identifier	ssp		5199695	0					
ANR	5200149	Identifier	sep		5199695	1					
ANR	5200150	IfStatement	if ( ! sep )		5199695	33					
ANR	5200151	Condition	! sep	416:7:11426:11429	5199695	0	True				
ANR	5200152	UnaryOperationExpression	! sep		5199695	0					
ANR	5200153	UnaryOperator	!		5199695	0					
ANR	5200154	Identifier	sep		5199695	1					
ANR	5200155	CompoundStatement		101:13:2501:2501	5199695	1					
ANR	5200156	ExpressionStatement	sep = ssp	418:4:11470:11479	5199695	0	True				
ANR	5200157	AssignmentExpression	sep = ssp		5199695	0		=			
ANR	5200158	Identifier	sep		5199695	0					
ANR	5200159	Identifier	ssp		5199695	1					
ANR	5200160	ExpressionStatement	ssp = oldssp	419:4:11485:11497	5199695	1	True				
ANR	5200161	AssignmentExpression	ssp = oldssp		5199695	0		=			
ANR	5200162	Identifier	ssp		5199695	0					
ANR	5200163	Identifier	oldssp		5199695	1					
ANR	5200164	IfStatement	if ( sep == rest )		5199695	34					
ANR	5200165	Condition	sep == rest	421:7:11511:11521	5199695	0	True				
ANR	5200166	EqualityExpression	sep == rest		5199695	0		==			
ANR	5200167	Identifier	sep		5199695	0					
ANR	5200168	Identifier	rest		5199695	1					
ANR	5200169	CompoundStatement		106:20:2593:2593	5199695	1					
ANR	5200170	IfStatement	"if ( slow ( m , ssp , sep , ssub , esub ) == rest )"		5199695	0					
ANR	5200171	Condition	"slow ( m , ssp , sep , ssub , esub ) == rest"	422:8:11563:11599	5199695	0	True				
ANR	5200172	EqualityExpression	"slow ( m , ssp , sep , ssub , esub ) == rest"		5199695	0		==			
ANR	5200173	CallExpression	"slow ( m , ssp , sep , ssub , esub )"		5199695	0					
ANR	5200174	Callee	slow		5199695	0					
ANR	5200175	Identifier	slow		5199695	0					
ANR	5200176	ArgumentList	m		5199695	1					
ANR	5200177	Argument	m		5199695	0					
ANR	5200178	Identifier	m		5199695	0					
ANR	5200179	Argument	ssp		5199695	1					
ANR	5200180	Identifier	ssp		5199695	0					
ANR	5200181	Argument	sep		5199695	2					
ANR	5200182	Identifier	sep		5199695	0					
ANR	5200183	Argument	ssub		5199695	3					
ANR	5200184	Identifier	ssub		5199695	0					
ANR	5200185	Argument	esub		5199695	4					
ANR	5200186	Identifier	esub		5199695	0					
ANR	5200187	Identifier	rest		5199695	1					
ANR	5200188	CompoundStatement		107:47:2671:2671	5199695	1					
ANR	5200189	ExpressionStatement	"dp = dissect ( m , ssp , sep , ssub , esub )"	423:5:11609:11646	5199695	0	True				
ANR	5200190	AssignmentExpression	"dp = dissect ( m , ssp , sep , ssub , esub )"		5199695	0		=			
ANR	5200191	Identifier	dp		5199695	0					
ANR	5200192	CallExpression	"dissect ( m , ssp , sep , ssub , esub )"		5199695	1					
ANR	5200193	Callee	dissect		5199695	0					
ANR	5200194	Identifier	dissect		5199695	0					
ANR	5200195	ArgumentList	m		5199695	1					
ANR	5200196	Argument	m		5199695	0					
ANR	5200197	Identifier	m		5199695	0					
ANR	5200198	Argument	ssp		5199695	1					
ANR	5200199	Identifier	ssp		5199695	0					
ANR	5200200	Argument	sep		5199695	2					
ANR	5200201	Identifier	sep		5199695	0					
ANR	5200202	Argument	ssub		5199695	3					
ANR	5200203	Identifier	ssub		5199695	0					
ANR	5200204	Argument	esub		5199695	4					
ANR	5200205	Identifier	esub		5199695	0					
ANR	5200206	IfStatement	if ( dp == sep )		5199695	1					
ANR	5200207	Condition	dp == sep	424:9:11657:11665	5199695	0	True				
ANR	5200208	EqualityExpression	dp == sep		5199695	0		==			
ANR	5200209	Identifier	dp		5199695	0					
ANR	5200210	Identifier	sep		5199695	1					
ANR	5200211	CompoundStatement		109:20:2737:2737	5199695	1					
ANR	5200212	ExpressionStatement	sp = rest	425:6:11676:11685	5199695	0	True				
ANR	5200213	AssignmentExpression	sp = rest		5199695	0		=			
ANR	5200214	Identifier	sp		5199695	0					
ANR	5200215	Identifier	rest		5199695	1					
ANR	5200216	BreakStatement	break ;	429:3:11708:11713	5199695	35	True				
ANR	5200217	Label	case OCH_ :	430:2:11717:11726	5199695	36	True				
ANR	5200218	Identifier	OCH_		5199695	0					
ANR	5200219	ExpressionStatement	stp = stop	431:3:11731:11741	5199695	37	True				
ANR	5200220	AssignmentExpression	stp = stop		5199695	0		=			
ANR	5200221	Identifier	stp		5199695	0					
ANR	5200222	Identifier	stop		5199695	1					
ANR	5200223	ForStatement	for ( ; ; )		5199695	38					
ANR	5200224	CompoundStatement		117:12:2824:2824	5199695	0					
ANR	5200225	ExpressionStatement	"rest = slow ( m , sp , stp , ss , es )"	434:4:11799:11830	5199695	0	True				
ANR	5200226	AssignmentExpression	"rest = slow ( m , sp , stp , ss , es )"		5199695	0		=			
ANR	5200227	Identifier	rest		5199695	0					
ANR	5200228	CallExpression	"slow ( m , sp , stp , ss , es )"		5199695	1					
ANR	5200229	Callee	slow		5199695	0					
ANR	5200230	Identifier	slow		5199695	0					
ANR	5200231	ArgumentList	m		5199695	1					
ANR	5200232	Argument	m		5199695	0					
ANR	5200233	Identifier	m		5199695	0					
ANR	5200234	Argument	sp		5199695	1					
ANR	5200235	Identifier	sp		5199695	0					
ANR	5200236	Argument	stp		5199695	2					
ANR	5200237	Identifier	stp		5199695	0					
ANR	5200238	Argument	ss		5199695	3					
ANR	5200239	Identifier	ss		5199695	0					
ANR	5200240	Argument	es		5199695	4					
ANR	5200241	Identifier	es		5199695	0					
ANR	5200242	IfStatement	if ( rest )		5199695	1					
ANR	5200243	Condition	rest	435:8:11840:11843	5199695	0	True				
ANR	5200244	Identifier	rest		5199695	0					
ANR	5200245	CompoundStatement		120:14:2915:2915	5199695	1					
ANR	5200246	ExpressionStatement	"tail = slow ( m , rest , stop , es , stopst )"	437:5:11914:11952	5199695	0	True				
ANR	5200247	AssignmentExpression	"tail = slow ( m , rest , stop , es , stopst )"		5199695	0		=			
ANR	5200248	Identifier	tail		5199695	0					
ANR	5200249	CallExpression	"slow ( m , rest , stop , es , stopst )"		5199695	1					
ANR	5200250	Callee	slow		5199695	0					
ANR	5200251	Identifier	slow		5199695	0					
ANR	5200252	ArgumentList	m		5199695	1					
ANR	5200253	Argument	m		5199695	0					
ANR	5200254	Identifier	m		5199695	0					
ANR	5200255	Argument	rest		5199695	1					
ANR	5200256	Identifier	rest		5199695	0					
ANR	5200257	Argument	stop		5199695	2					
ANR	5200258	Identifier	stop		5199695	0					
ANR	5200259	Argument	es		5199695	3					
ANR	5200260	Identifier	es		5199695	0					
ANR	5200261	Argument	stopst		5199695	4					
ANR	5200262	Identifier	stopst		5199695	0					
ANR	5200263	IfStatement	if ( tail == stop )		5199695	1					
ANR	5200264	Condition	tail == stop	438:9:11963:11974	5199695	0	True				
ANR	5200265	EqualityExpression	tail == stop		5199695	0		==			
ANR	5200266	Identifier	tail		5199695	0					
ANR	5200267	Identifier	stop		5199695	1					
ANR	5200268	BreakStatement	break ;	439:6:11983:11988	5199695	1	True				
ANR	5200269	ExpressionStatement	stp = rest - 1	441:5:12057:12071	5199695	2	True				
ANR	5200270	AssignmentExpression	stp = rest - 1		5199695	0		=			
ANR	5200271	Identifier	stp		5199695	0					
ANR	5200272	AdditiveExpression	rest - 1		5199695	1		-			
ANR	5200273	Identifier	rest		5199695	0					
ANR	5200274	PrimaryExpression	1		5199695	1					
ANR	5200275	ExpressionStatement	ssub = ss + 1	444:3:12087:12100	5199695	39	True				
ANR	5200276	AssignmentExpression	ssub = ss + 1		5199695	0		=			
ANR	5200277	Identifier	ssub		5199695	0					
ANR	5200278	AdditiveExpression	ss + 1		5199695	1		+			
ANR	5200279	Identifier	ss		5199695	0					
ANR	5200280	PrimaryExpression	1		5199695	1					
ANR	5200281	ExpressionStatement	esub = ss + OPND ( m -> g -> strip [ ss ] ) - 1	445:3:12105:12142	5199695	40	True				
ANR	5200282	AssignmentExpression	esub = ss + OPND ( m -> g -> strip [ ss ] ) - 1		5199695	0		=			
ANR	5200283	Identifier	esub		5199695	0					
ANR	5200284	AdditiveExpression	ss + OPND ( m -> g -> strip [ ss ] ) - 1		5199695	1		+			
ANR	5200285	Identifier	ss		5199695	0					
ANR	5200286	AdditiveExpression	OPND ( m -> g -> strip [ ss ] ) - 1		5199695	1		-			
ANR	5200287	CallExpression	OPND ( m -> g -> strip [ ss ] )		5199695	0					
ANR	5200288	Callee	OPND		5199695	0					
ANR	5200289	Identifier	OPND		5199695	0					
ANR	5200290	ArgumentList	m -> g -> strip [ ss ]		5199695	1					
ANR	5200291	Argument	m -> g -> strip [ ss ]		5199695	0					
ANR	5200292	ArrayIndexing	m -> g -> strip [ ss ]		5199695	0					
ANR	5200293	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200294	PtrMemberAccess	m -> g		5199695	0					
ANR	5200295	Identifier	m		5199695	0					
ANR	5200296	Identifier	g		5199695	1					
ANR	5200297	Identifier	strip		5199695	1					
ANR	5200298	Identifier	ss		5199695	1					
ANR	5200299	PrimaryExpression	1		5199695	1					
ANR	5200300	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) != OOR1 )		5199695	41					
ANR	5200301	Condition	OP ( m -> g -> strip [ esub ] ) != OOR1	446:7:12151:12179	5199695	0	True				
ANR	5200302	EqualityExpression	OP ( m -> g -> strip [ esub ] ) != OOR1		5199695	0		!=			
ANR	5200303	CallExpression	OP ( m -> g -> strip [ esub ] )		5199695	0					
ANR	5200304	Callee	OP		5199695	0					
ANR	5200305	Identifier	OP		5199695	0					
ANR	5200306	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200307	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200308	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200309	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200310	PtrMemberAccess	m -> g		5199695	0					
ANR	5200311	Identifier	m		5199695	0					
ANR	5200312	Identifier	g		5199695	1					
ANR	5200313	Identifier	strip		5199695	1					
ANR	5200314	Identifier	esub		5199695	1					
ANR	5200315	Identifier	OOR1		5199695	1					
ANR	5200316	CompoundStatement		131:38:3251:3251	5199695	1					
ANR	5200317	BreakStatement	break ;	447:4:12188:12193	5199695	0	True				
ANR	5200318	ForStatement	for ( ; ; )		5199695	42					
ANR	5200319	CompoundStatement		134:12:3281:3281	5199695	0					
ANR	5200320	IfStatement	"if ( slow ( m , sp , rest , ssub , esub ) == rest )"		5199695	0					
ANR	5200321	Condition	"slow ( m , sp , rest , ssub , esub ) == rest"	450:8:12255:12291	5199695	0	True				
ANR	5200322	EqualityExpression	"slow ( m , sp , rest , ssub , esub ) == rest"		5199695	0		==			
ANR	5200323	CallExpression	"slow ( m , sp , rest , ssub , esub )"		5199695	0					
ANR	5200324	Callee	slow		5199695	0					
ANR	5200325	Identifier	slow		5199695	0					
ANR	5200326	ArgumentList	m		5199695	1					
ANR	5200327	Argument	m		5199695	0					
ANR	5200328	Identifier	m		5199695	0					
ANR	5200329	Argument	sp		5199695	1					
ANR	5200330	Identifier	sp		5199695	0					
ANR	5200331	Argument	rest		5199695	2					
ANR	5200332	Identifier	rest		5199695	0					
ANR	5200333	Argument	ssub		5199695	3					
ANR	5200334	Identifier	ssub		5199695	0					
ANR	5200335	Argument	esub		5199695	4					
ANR	5200336	Identifier	esub		5199695	0					
ANR	5200337	Identifier	rest		5199695	1					
ANR	5200338	BreakStatement	break ;	451:5:12299:12304	5199695	1	True				
ANR	5200339	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) == OOR1 )		5199695	1					
ANR	5200340	Condition	OP ( m -> g -> strip [ esub ] ) == OOR1	453:8:12381:12409	5199695	0	True				
ANR	5200341	EqualityExpression	OP ( m -> g -> strip [ esub ] ) == OOR1		5199695	0		==			
ANR	5200342	CallExpression	OP ( m -> g -> strip [ esub ] )		5199695	0					
ANR	5200343	Callee	OP		5199695	0					
ANR	5200344	Identifier	OP		5199695	0					
ANR	5200345	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200346	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200347	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200348	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200349	PtrMemberAccess	m -> g		5199695	0					
ANR	5200350	Identifier	m		5199695	0					
ANR	5200351	Identifier	g		5199695	1					
ANR	5200352	Identifier	strip		5199695	1					
ANR	5200353	Identifier	esub		5199695	1					
ANR	5200354	Identifier	OOR1		5199695	1					
ANR	5200355	CompoundStatement		138:39:3481:3481	5199695	1					
ANR	5200356	ExpressionStatement	esub ++	454:5:12419:12425	5199695	0	True				
ANR	5200357	PostIncDecOperationExpression	esub ++		5199695	0					
ANR	5200358	Identifier	esub		5199695	0					
ANR	5200359	IncDec	++		5199695	1					
ANR	5200360	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) == OOR2 )		5199695	1					
ANR	5200361	Condition	OP ( m -> g -> strip [ esub ] ) == OOR2	455:9:12436:12464	5199695	0	True				
ANR	5200362	EqualityExpression	OP ( m -> g -> strip [ esub ] ) == OOR2		5199695	0		==			
ANR	5200363	CallExpression	OP ( m -> g -> strip [ esub ] )		5199695	0					
ANR	5200364	Callee	OP		5199695	0					
ANR	5200365	Identifier	OP		5199695	0					
ANR	5200366	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200367	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200368	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200369	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200370	PtrMemberAccess	m -> g		5199695	0					
ANR	5200371	Identifier	m		5199695	0					
ANR	5200372	Identifier	g		5199695	1					
ANR	5200373	Identifier	strip		5199695	1					
ANR	5200374	Identifier	esub		5199695	1					
ANR	5200375	Identifier	OOR2		5199695	1					
ANR	5200376	CompoundStatement		140:40:3536:3536	5199695	1					
ANR	5200377	ExpressionStatement	ssub = esub + 1	456:6:12475:12490	5199695	0	True				
ANR	5200378	AssignmentExpression	ssub = esub + 1		5199695	0		=			
ANR	5200379	Identifier	ssub		5199695	0					
ANR	5200380	AdditiveExpression	esub + 1		5199695	1		+			
ANR	5200381	Identifier	esub		5199695	0					
ANR	5200382	PrimaryExpression	1		5199695	1					
ANR	5200383	ExpressionStatement	esub += OPND ( m -> g -> strip [ esub ] )	457:6:12498:12529	5199695	1	True				
ANR	5200384	AssignmentExpression	esub += OPND ( m -> g -> strip [ esub ] )		5199695	0		+=			
ANR	5200385	Identifier	esub		5199695	0					
ANR	5200386	CallExpression	OPND ( m -> g -> strip [ esub ] )		5199695	1					
ANR	5200387	Callee	OPND		5199695	0					
ANR	5200388	Identifier	OPND		5199695	0					
ANR	5200389	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200390	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200391	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200392	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200393	PtrMemberAccess	m -> g		5199695	0					
ANR	5200394	Identifier	m		5199695	0					
ANR	5200395	Identifier	g		5199695	1					
ANR	5200396	Identifier	strip		5199695	1					
ANR	5200397	Identifier	esub		5199695	1					
ANR	5200398	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) == OOR2 )		5199695	2					
ANR	5200399	Condition	OP ( m -> g -> strip [ esub ] ) == OOR2	458:10:12541:12569	5199695	0	True				
ANR	5200400	EqualityExpression	OP ( m -> g -> strip [ esub ] ) == OOR2		5199695	0		==			
ANR	5200401	CallExpression	OP ( m -> g -> strip [ esub ] )		5199695	0					
ANR	5200402	Callee	OP		5199695	0					
ANR	5200403	Identifier	OP		5199695	0					
ANR	5200404	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200405	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200406	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200407	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200408	PtrMemberAccess	m -> g		5199695	0					
ANR	5200409	Identifier	m		5199695	0					
ANR	5200410	Identifier	g		5199695	1					
ANR	5200411	Identifier	strip		5199695	1					
ANR	5200412	Identifier	esub		5199695	1					
ANR	5200413	Identifier	OOR2		5199695	1					
ANR	5200414	CompoundStatement		143:41:3641:3641	5199695	1					
ANR	5200415	ExpressionStatement	esub --	459:7:12581:12587	5199695	0	True				
ANR	5200416	PostIncDecOperationExpression	esub --		5199695	0					
ANR	5200417	Identifier	esub		5199695	0					
ANR	5200418	IncDec	--		5199695	1					
ANR	5200419	ElseStatement	else		5199695	0					
ANR	5200420	CompoundStatement		145:13:3671:3671	5199695	0					
ANR	5200421	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) != O_CH )		5199695	0					
ANR	5200422	Condition	OP ( m -> g -> strip [ esub ] ) != O_CH	461:11:12615:12643	5199695	0	True				
ANR	5200423	EqualityExpression	OP ( m -> g -> strip [ esub ] ) != O_CH		5199695	0		!=			
ANR	5200424	CallExpression	OP ( m -> g -> strip [ esub ] )		5199695	0					
ANR	5200425	Callee	OP		5199695	0					
ANR	5200426	Identifier	OP		5199695	0					
ANR	5200427	ArgumentList	m -> g -> strip [ esub ]		5199695	1					
ANR	5200428	Argument	m -> g -> strip [ esub ]		5199695	0					
ANR	5200429	ArrayIndexing	m -> g -> strip [ esub ]		5199695	0					
ANR	5200430	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200431	PtrMemberAccess	m -> g		5199695	0					
ANR	5200432	Identifier	m		5199695	0					
ANR	5200433	Identifier	g		5199695	1					
ANR	5200434	Identifier	strip		5199695	1					
ANR	5200435	Identifier	esub		5199695	1					
ANR	5200436	Identifier	O_CH		5199695	1					
ANR	5200437	CompoundStatement		146:42:3715:3715	5199695	1					
ANR	5200438	BreakStatement	break ;	462:8:12656:12661	5199695	0	True				
ANR	5200439	ExpressionStatement	"dp = dissect ( m , sp , rest , ssub , esub )"	468:3:12701:12738	5199695	43	True				
ANR	5200440	AssignmentExpression	"dp = dissect ( m , sp , rest , ssub , esub )"		5199695	0		=			
ANR	5200441	Identifier	dp		5199695	0					
ANR	5200442	CallExpression	"dissect ( m , sp , rest , ssub , esub )"		5199695	1					
ANR	5200443	Callee	dissect		5199695	0					
ANR	5200444	Identifier	dissect		5199695	0					
ANR	5200445	ArgumentList	m		5199695	1					
ANR	5200446	Argument	m		5199695	0					
ANR	5200447	Identifier	m		5199695	0					
ANR	5200448	Argument	sp		5199695	1					
ANR	5200449	Identifier	sp		5199695	0					
ANR	5200450	Argument	rest		5199695	2					
ANR	5200451	Identifier	rest		5199695	0					
ANR	5200452	Argument	ssub		5199695	3					
ANR	5200453	Identifier	ssub		5199695	0					
ANR	5200454	Argument	esub		5199695	4					
ANR	5200455	Identifier	esub		5199695	0					
ANR	5200456	IfStatement	if ( dp == rest )		5199695	44					
ANR	5200457	Condition	dp == rest	469:7:12747:12756	5199695	0	True				
ANR	5200458	EqualityExpression	dp == rest		5199695	0		==			
ANR	5200459	Identifier	dp		5199695	0					
ANR	5200460	Identifier	rest		5199695	1					
ANR	5200461	CompoundStatement		154:19:3828:3828	5199695	1					
ANR	5200462	ExpressionStatement	sp = rest	470:4:12765:12774	5199695	0	True				
ANR	5200463	AssignmentExpression	sp = rest		5199695	0		=			
ANR	5200464	Identifier	sp		5199695	0					
ANR	5200465	Identifier	rest		5199695	1					
ANR	5200466	BreakStatement	break ;	472:3:12784:12789	5199695	45	True				
ANR	5200467	Label	case O_PLUS :	473:2:12793:12804	5199695	46	True				
ANR	5200468	Identifier	O_PLUS		5199695	0					
ANR	5200469	Label	case O_QUEST :	474:2:12808:12820	5199695	47	True				
ANR	5200470	Identifier	O_QUEST		5199695	0					
ANR	5200471	Label	case OOR1 :	475:2:12824:12833	5199695	48	True				
ANR	5200472	Identifier	OOR1		5199695	0					
ANR	5200473	Label	case OOR2 :	476:2:12837:12846	5199695	49	True				
ANR	5200474	Identifier	OOR2		5199695	0					
ANR	5200475	Label	case O_CH :	477:2:12850:12859	5199695	50	True				
ANR	5200476	Identifier	O_CH		5199695	0					
ANR	5200477	BreakStatement	break ;	478:3:12864:12869	5199695	51	True				
ANR	5200478	Label	case OLPAREN :	479:2:12873:12885	5199695	52	True				
ANR	5200479	Identifier	OLPAREN		5199695	0					
ANR	5200480	ExpressionStatement	i = OPND ( m -> g -> strip [ ss ] )	480:3:12890:12915	5199695	53	True				
ANR	5200481	AssignmentExpression	i = OPND ( m -> g -> strip [ ss ] )		5199695	0		=			
ANR	5200482	Identifier	i		5199695	0					
ANR	5200483	CallExpression	OPND ( m -> g -> strip [ ss ] )		5199695	1					
ANR	5200484	Callee	OPND		5199695	0					
ANR	5200485	Identifier	OPND		5199695	0					
ANR	5200486	ArgumentList	m -> g -> strip [ ss ]		5199695	1					
ANR	5200487	Argument	m -> g -> strip [ ss ]		5199695	0					
ANR	5200488	ArrayIndexing	m -> g -> strip [ ss ]		5199695	0					
ANR	5200489	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200490	PtrMemberAccess	m -> g		5199695	0					
ANR	5200491	Identifier	m		5199695	0					
ANR	5200492	Identifier	g		5199695	1					
ANR	5200493	Identifier	strip		5199695	1					
ANR	5200494	Identifier	ss		5199695	1					
ANR	5200495	IfStatement	if ( i > 0 && i <= m -> g -> nsub )		5199695	54					
ANR	5200496	Condition	i > 0 && i <= m -> g -> nsub	481:7:12924:12947	5199695	0	True				
ANR	5200497	AndExpression	i > 0 && i <= m -> g -> nsub		5199695	0		&&			
ANR	5200498	RelationalExpression	i > 0		5199695	0		>			
ANR	5200499	Identifier	i		5199695	0					
ANR	5200500	PrimaryExpression	0		5199695	1					
ANR	5200501	RelationalExpression	i <= m -> g -> nsub		5199695	1		<=			
ANR	5200502	Identifier	i		5199695	0					
ANR	5200503	PtrMemberAccess	m -> g -> nsub		5199695	1					
ANR	5200504	PtrMemberAccess	m -> g		5199695	0					
ANR	5200505	Identifier	m		5199695	0					
ANR	5200506	Identifier	g		5199695	1					
ANR	5200507	Identifier	nsub		5199695	1					
ANR	5200508	CompoundStatement		166:33:4019:4019	5199695	1					
ANR	5200509	ExpressionStatement	m -> pmatch [ i ] . rm_so = sp - m -> offp	482:4:12956:12989	5199695	0	True				
ANR	5200510	AssignmentExpression	m -> pmatch [ i ] . rm_so = sp - m -> offp		5199695	0		=			
ANR	5200511	MemberAccess	m -> pmatch [ i ] . rm_so		5199695	0					
ANR	5200512	ArrayIndexing	m -> pmatch [ i ]		5199695	0					
ANR	5200513	PtrMemberAccess	m -> pmatch		5199695	0					
ANR	5200514	Identifier	m		5199695	0					
ANR	5200515	Identifier	pmatch		5199695	1					
ANR	5200516	Identifier	i		5199695	1					
ANR	5200517	Identifier	rm_so		5199695	1					
ANR	5200518	AdditiveExpression	sp - m -> offp		5199695	1		-			
ANR	5200519	Identifier	sp		5199695	0					
ANR	5200520	PtrMemberAccess	m -> offp		5199695	1					
ANR	5200521	Identifier	m		5199695	0					
ANR	5200522	Identifier	offp		5199695	1					
ANR	5200523	BreakStatement	break ;	484:3:12999:13004	5199695	55	True				
ANR	5200524	Label	case ORPAREN :	485:2:13008:13020	5199695	56	True				
ANR	5200525	Identifier	ORPAREN		5199695	0					
ANR	5200526	ExpressionStatement	i = OPND ( m -> g -> strip [ ss ] )	486:3:13025:13050	5199695	57	True				
ANR	5200527	AssignmentExpression	i = OPND ( m -> g -> strip [ ss ] )		5199695	0		=			
ANR	5200528	Identifier	i		5199695	0					
ANR	5200529	CallExpression	OPND ( m -> g -> strip [ ss ] )		5199695	1					
ANR	5200530	Callee	OPND		5199695	0					
ANR	5200531	Identifier	OPND		5199695	0					
ANR	5200532	ArgumentList	m -> g -> strip [ ss ]		5199695	1					
ANR	5200533	Argument	m -> g -> strip [ ss ]		5199695	0					
ANR	5200534	ArrayIndexing	m -> g -> strip [ ss ]		5199695	0					
ANR	5200535	PtrMemberAccess	m -> g -> strip		5199695	0					
ANR	5200536	PtrMemberAccess	m -> g		5199695	0					
ANR	5200537	Identifier	m		5199695	0					
ANR	5200538	Identifier	g		5199695	1					
ANR	5200539	Identifier	strip		5199695	1					
ANR	5200540	Identifier	ss		5199695	1					
ANR	5200541	IfStatement	if ( i > 0 && i <= m -> g -> nsub )		5199695	58					
ANR	5200542	Condition	i > 0 && i <= m -> g -> nsub	487:7:13059:13082	5199695	0	True				
ANR	5200543	AndExpression	i > 0 && i <= m -> g -> nsub		5199695	0		&&			
ANR	5200544	RelationalExpression	i > 0		5199695	0		>			
ANR	5200545	Identifier	i		5199695	0					
ANR	5200546	PrimaryExpression	0		5199695	1					
ANR	5200547	RelationalExpression	i <= m -> g -> nsub		5199695	1		<=			
ANR	5200548	Identifier	i		5199695	0					
ANR	5200549	PtrMemberAccess	m -> g -> nsub		5199695	1					
ANR	5200550	PtrMemberAccess	m -> g		5199695	0					
ANR	5200551	Identifier	m		5199695	0					
ANR	5200552	Identifier	g		5199695	1					
ANR	5200553	Identifier	nsub		5199695	1					
ANR	5200554	CompoundStatement		172:33:4154:4154	5199695	1					
ANR	5200555	ExpressionStatement	m -> pmatch [ i ] . rm_eo = sp - m -> offp	488:4:13091:13124	5199695	0	True				
ANR	5200556	AssignmentExpression	m -> pmatch [ i ] . rm_eo = sp - m -> offp		5199695	0		=			
ANR	5200557	MemberAccess	m -> pmatch [ i ] . rm_eo		5199695	0					
ANR	5200558	ArrayIndexing	m -> pmatch [ i ]		5199695	0					
ANR	5200559	PtrMemberAccess	m -> pmatch		5199695	0					
ANR	5200560	Identifier	m		5199695	0					
ANR	5200561	Identifier	pmatch		5199695	1					
ANR	5200562	Identifier	i		5199695	1					
ANR	5200563	Identifier	rm_eo		5199695	1					
ANR	5200564	AdditiveExpression	sp - m -> offp		5199695	1		-			
ANR	5200565	Identifier	sp		5199695	0					
ANR	5200566	PtrMemberAccess	m -> offp		5199695	1					
ANR	5200567	Identifier	m		5199695	0					
ANR	5200568	Identifier	offp		5199695	1					
ANR	5200569	BreakStatement	break ;	490:3:13134:13139	5199695	59	True				
ANR	5200570	Label	default :	491:2:13143:13150	5199695	60	True				
ANR	5200571	Identifier	default		5199695	0					
ANR	5200572	BreakStatement	break ;	492:3:13168:13173	5199695	61	True				
ANR	5200573	IfStatement	if ( sp == stop )		5199695	16					
ANR	5200574	Condition	sp == stop	496:5:13188:13197	5199695	0	True				
ANR	5200575	EqualityExpression	sp == stop		5199695	0		==			
ANR	5200576	Identifier	sp		5199695	0					
ANR	5200577	Identifier	stop		5199695	1					
ANR	5200578	CompoundStatement		181:17:4269:4269	5199695	1					
ANR	5200579	ReturnStatement	return sp ;	497:2:13204:13213	5199695	0	True				
ANR	5200580	Identifier	sp		5199695	0					
ANR	5200581	ElseStatement	else		5199695	0					
ANR	5200582	CompoundStatement		183:8:4292:4292	5199695	0					
ANR	5200583	ReturnStatement	return NULL ;	499:2:13227:13238	5199695	0	True				
ANR	5200584	Identifier	NULL		5199695	0					
ANR	5200585	ReturnType	static char *		5199695	1					
ANR	5200586	Identifier	dissect		5199695	2					
ANR	5200587	ParameterList	"struct match * m , char * start , char * stop , sopno startst , sopno stopst"		5199695	3					
ANR	5200588	Parameter	struct match * m	315:8:8859:8873	5199695	0	True				
ANR	5200589	ParameterType	struct match *		5199695	0					
ANR	5200590	Identifier	m		5199695	1					
ANR	5200591	Parameter	char * start	315:25:8876:8886	5199695	1	True				
ANR	5200592	ParameterType	char *		5199695	0					
ANR	5200593	Identifier	start		5199695	1					
ANR	5200594	Parameter	char * stop	315:38:8889:8898	5199695	2	True				
ANR	5200595	ParameterType	char *		5199695	0					
ANR	5200596	Identifier	stop		5199695	1					
ANR	5200597	Parameter	sopno startst	315:50:8901:8913	5199695	3	True				
ANR	5200598	ParameterType	sopno		5199695	0					
ANR	5200599	Identifier	startst		5199695	1					
ANR	5200600	Parameter	sopno stopst	315:65:8916:8927	5199695	4	True				
ANR	5200601	ParameterType	sopno		5199695	0					
ANR	5200602	Identifier	stopst		5199695	1					
ANR	5200603	CFGEntryNode	ENTRY		5199695		True				
ANR	5200604	CFGExitNode	EXIT		5199695		True				
ANR	5200605	InfiniteForNode	true		5199695		True				
ANR	5200606	InfiniteForNode	true		5199695		True				
ANR	5200607	InfiniteForNode	true		5199695		True				
ANR	5200608	InfiniteForNode	true		5199695		True				
ANR	5200609	InfiniteForNode	true		5199695		True				
ANR	5200610	Symbol	oldssp		5199695						
ANR	5200611	Symbol	m -> pmatch		5199695						
ANR	5200612	Symbol	* ss		5199695						
ANR	5200613	Symbol	m -> g -> nsub		5199695						
ANR	5200614	Symbol	dp		5199695						
ANR	5200615	Symbol	* m -> g		5199695						
ANR	5200616	Symbol	ssp		5199695						
ANR	5200617	Symbol	m -> pmatch [ i ] . rm_so		5199695						
ANR	5200618	Symbol	* m -> g -> strip		5199695						
ANR	5200619	Symbol	m -> g		5199695						
ANR	5200620	Symbol	esub		5199695						
ANR	5200621	Symbol	OOR1		5199695						
ANR	5200622	Symbol	ssub		5199695						
ANR	5200623	Symbol	* * m -> g		5199695						
ANR	5200624	Symbol	m -> pmatch [ i ] . rm_eo		5199695						
ANR	5200625	Symbol	sp		5199695						
ANR	5200626	Symbol	* m -> pmatch		5199695						
ANR	5200627	Symbol	* * m		5199695						
ANR	5200628	Symbol	sep		5199695						
ANR	5200629	Symbol	ss		5199695						
ANR	5200630	Symbol	rest		5199695						
ANR	5200631	Symbol	OP		5199695						
ANR	5200632	Symbol	NULL		5199695						
ANR	5200633	Symbol	OOR2		5199695						
ANR	5200634	Symbol	tail		5199695						
ANR	5200635	Symbol	start		5199695						
ANR	5200636	Symbol	startst		5199695						
ANR	5200637	Symbol	i		5199695						
ANR	5200638	Symbol	m		5199695						
ANR	5200639	Symbol	es		5199695						
ANR	5200640	Symbol	stp		5199695						
ANR	5200641	Symbol	* esub		5199695						
ANR	5200642	Symbol	O_CH		5199695						
ANR	5200643	Symbol	OPND		5199695						
ANR	5200644	Symbol	* i		5199695						
ANR	5200645	Symbol	stop		5199695						
ANR	5200646	Symbol	* * * m		5199695						
ANR	5200647	Symbol	slow		5199695						
ANR	5200648	Symbol	stopst		5199695						
ANR	5200649	Symbol	* m		5199695						
ANR	5200650	Symbol	* es		5199695						
ANR	5200651	Symbol	dissect		5199695						
ANR	5200652	Symbol	m -> offp		5199695						
ANR	5200653	Symbol	m -> g -> strip		5199695						
ANR	5200654	Function	backref	506:0:13324:18631							
ANR	5200655	FunctionDef	"backref (struct match * m , char * start , char * stop , sopno startst , sopno stopst , sopno lev , int rec)"		5200654	0					
ANR	5200656	CompoundStatement		509:0:13512:18631	5200654	0					
ANR	5200657	IdentifierDeclStatement	int i ;	510:1:13515:13520	5200654	0	True				
ANR	5200658	IdentifierDecl	i		5200654	0					
ANR	5200659	IdentifierDeclType	int		5200654	0					
ANR	5200660	Identifier	i		5200654	1					
ANR	5200661	IdentifierDeclStatement	sopno ss ;	511:1:13523:13531	5200654	1	True				
ANR	5200662	IdentifierDecl	ss		5200654	0					
ANR	5200663	IdentifierDeclType	sopno		5200654	0					
ANR	5200664	Identifier	ss		5200654	1					
ANR	5200665	IdentifierDeclStatement	char * sp ;	512:1:13567:13575	5200654	2	True				
ANR	5200666	IdentifierDecl	* sp		5200654	0					
ANR	5200667	IdentifierDeclType	char *		5200654	0					
ANR	5200668	Identifier	sp		5200654	1					
ANR	5200669	IdentifierDeclStatement	sopno ssub ;	513:1:13614:13624	5200654	3	True				
ANR	5200670	IdentifierDecl	ssub		5200654	0					
ANR	5200671	IdentifierDeclType	sopno		5200654	0					
ANR	5200672	Identifier	ssub		5200654	1					
ANR	5200673	IdentifierDeclStatement	sopno esub ;	514:1:13655:13665	5200654	4	True				
ANR	5200674	IdentifierDecl	esub		5200654	0					
ANR	5200675	IdentifierDeclType	sopno		5200654	0					
ANR	5200676	Identifier	esub		5200654	1					
ANR	5200677	IdentifierDeclStatement	char * ssp ;	515:1:13694:13703	5200654	5	True				
ANR	5200678	IdentifierDecl	* ssp		5200654	0					
ANR	5200679	IdentifierDeclType	char *		5200654	0					
ANR	5200680	Identifier	ssp		5200654	1					
ANR	5200681	IdentifierDeclStatement	char * dp ;	516:1:13748:13756	5200654	6	True				
ANR	5200682	IdentifierDecl	* dp		5200654	0					
ANR	5200683	IdentifierDeclType	char *		5200654	0					
ANR	5200684	Identifier	dp		5200654	1					
ANR	5200685	IdentifierDeclStatement	size_t len ;	517:1:13759:13769	5200654	7	True				
ANR	5200686	IdentifierDecl	len		5200654	0					
ANR	5200687	IdentifierDeclType	size_t		5200654	0					
ANR	5200688	Identifier	len		5200654	1					
ANR	5200689	IdentifierDeclStatement	int hard ;	518:1:13772:13780	5200654	8	True				
ANR	5200690	IdentifierDecl	hard		5200654	0					
ANR	5200691	IdentifierDeclType	int		5200654	0					
ANR	5200692	Identifier	hard		5200654	1					
ANR	5200693	IdentifierDeclStatement	sop s ;	519:1:13783:13788	5200654	9	True				
ANR	5200694	IdentifierDecl	s		5200654	0					
ANR	5200695	IdentifierDeclType	sop		5200654	0					
ANR	5200696	Identifier	s		5200654	1					
ANR	5200697	IdentifierDeclStatement	ut64 offsave ;	520:1:13791:13803	5200654	10	True				
ANR	5200698	IdentifierDecl	offsave		5200654	0					
ANR	5200699	IdentifierDeclType	ut64		5200654	0					
ANR	5200700	Identifier	offsave		5200654	1					
ANR	5200701	IdentifierDeclStatement	cset * cs ;	521:1:13806:13814	5200654	11	True				
ANR	5200702	IdentifierDecl	* cs		5200654	0					
ANR	5200703	IdentifierDeclType	cset *		5200654	0					
ANR	5200704	Identifier	cs		5200654	1					
ANR	5200705	ExpressionStatement	"AT ( ""back"" , start , stop , startst , stopst )"	523:1:13818:13858	5200654	12	True				
ANR	5200706	CallExpression	"AT ( ""back"" , start , stop , startst , stopst )"		5200654	0					
ANR	5200707	Callee	AT		5200654	0					
ANR	5200708	Identifier	AT		5200654	0					
ANR	5200709	ArgumentList	"""back"""		5200654	1					
ANR	5200710	Argument	"""back"""		5200654	0					
ANR	5200711	PrimaryExpression	"""back"""		5200654	0					
ANR	5200712	Argument	start		5200654	1					
ANR	5200713	Identifier	start		5200654	0					
ANR	5200714	Argument	stop		5200654	2					
ANR	5200715	Identifier	stop		5200654	0					
ANR	5200716	Argument	startst		5200654	3					
ANR	5200717	Identifier	startst		5200654	0					
ANR	5200718	Argument	stopst		5200654	4					
ANR	5200719	Identifier	stopst		5200654	0					
ANR	5200720	ExpressionStatement	sp = start	524:1:13861:13871	5200654	13	True				
ANR	5200721	AssignmentExpression	sp = start		5200654	0		=			
ANR	5200722	Identifier	sp		5200654	0					
ANR	5200723	Identifier	start		5200654	1					
ANR	5200724	ExpressionStatement	hard = 0	527:1:13919:13927	5200654	14	True				
ANR	5200725	AssignmentExpression	hard = 0		5200654	0		=			
ANR	5200726	Identifier	hard		5200654	0					
ANR	5200727	PrimaryExpression	0		5200654	1					
ANR	5200728	ForStatement	for ( ss = startst ; ! hard && ss < stopst ; ss ++ )		5200654	15					
ANR	5200729	ForInit	ss = startst ;	528:6:13935:13947	5200654	0	True				
ANR	5200730	AssignmentExpression	ss = startst		5200654	0		=			
ANR	5200731	Identifier	ss		5200654	0					
ANR	5200732	Identifier	startst		5200654	1					
ANR	5200733	Condition	! hard && ss < stopst	528:20:13949:13968	5200654	1	True				
ANR	5200734	AndExpression	! hard && ss < stopst		5200654	0		&&			
ANR	5200735	UnaryOperationExpression	! hard		5200654	0					
ANR	5200736	UnaryOperator	!		5200654	0					
ANR	5200737	Identifier	hard		5200654	1					
ANR	5200738	RelationalExpression	ss < stopst		5200654	1		<			
ANR	5200739	Identifier	ss		5200654	0					
ANR	5200740	Identifier	stopst		5200654	1					
ANR	5200741	PostIncDecOperationExpression	ss ++	528:42:13971:13974	5200654	2	True				
ANR	5200742	Identifier	ss		5200654	0					
ANR	5200743	IncDec	++		5200654	1					
ANR	5200744	SwitchStatement	switch ( OP ( s = m -> g -> strip [ ss ] ) )		5200654	3					
ANR	5200745	Condition	OP ( s = m -> g -> strip [ ss ] )	529:10:13987:14009	5200654	0	True				
ANR	5200746	CallExpression	OP ( s = m -> g -> strip [ ss ] )		5200654	0					
ANR	5200747	Callee	OP		5200654	0					
ANR	5200748	Identifier	OP		5200654	0					
ANR	5200749	ArgumentList	s = m -> g -> strip [ ss ]		5200654	1					
ANR	5200750	Argument	s = m -> g -> strip [ ss ]		5200654	0					
ANR	5200751	AssignmentExpression	s = m -> g -> strip [ ss ]		5200654	0		=			
ANR	5200752	Identifier	s		5200654	0					
ANR	5200753	ArrayIndexing	m -> g -> strip [ ss ]		5200654	1					
ANR	5200754	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5200755	PtrMemberAccess	m -> g		5200654	0					
ANR	5200756	Identifier	m		5200654	0					
ANR	5200757	Identifier	g		5200654	1					
ANR	5200758	Identifier	strip		5200654	1					
ANR	5200759	Identifier	ss		5200654	1					
ANR	5200760	CompoundStatement		21:35:499:499	5200654	1					
ANR	5200761	Label	case OCHAR :	530:2:14016:14026	5200654	0	True				
ANR	5200762	Identifier	OCHAR		5200654	0					
ANR	5200763	IfStatement	if ( sp == stop || * sp ++ != ( char ) OPND ( s ) )		5200654	1					
ANR	5200764	Condition	sp == stop || * sp ++ != ( char ) OPND ( s )	531:7:14035:14070	5200654	0	True				
ANR	5200765	OrExpression	sp == stop || * sp ++ != ( char ) OPND ( s )		5200654	0		||			
ANR	5200766	EqualityExpression	sp == stop		5200654	0		==			
ANR	5200767	Identifier	sp		5200654	0					
ANR	5200768	Identifier	stop		5200654	1					
ANR	5200769	EqualityExpression	* sp ++ != ( char ) OPND ( s )		5200654	1		!=			
ANR	5200770	UnaryOperationExpression	* sp ++		5200654	0					
ANR	5200771	UnaryOperator	*		5200654	0					
ANR	5200772	PostIncDecOperationExpression	sp ++		5200654	1					
ANR	5200773	Identifier	sp		5200654	0					
ANR	5200774	IncDec	++		5200654	1					
ANR	5200775	CastExpression	( char ) OPND ( s )		5200654	1					
ANR	5200776	CastTarget	char		5200654	0					
ANR	5200777	CallExpression	OPND ( s )		5200654	1					
ANR	5200778	Callee	OPND		5200654	0					
ANR	5200779	Identifier	OPND		5200654	0					
ANR	5200780	ArgumentList	s		5200654	1					
ANR	5200781	Argument	s		5200654	0					
ANR	5200782	Identifier	s		5200654	0					
ANR	5200783	ReturnStatement	return ( NULL ) ;	532:4:14077:14089	5200654	1	True				
ANR	5200784	Identifier	NULL		5200654	0					
ANR	5200785	BreakStatement	break ;	533:3:14094:14099	5200654	2	True				
ANR	5200786	Label	case OANY :	534:2:14103:14112	5200654	3	True				
ANR	5200787	Identifier	OANY		5200654	0					
ANR	5200788	IfStatement	if ( sp == stop )		5200654	4					
ANR	5200789	Condition	sp == stop	535:7:14121:14130	5200654	0	True				
ANR	5200790	EqualityExpression	sp == stop		5200654	0		==			
ANR	5200791	Identifier	sp		5200654	0					
ANR	5200792	Identifier	stop		5200654	1					
ANR	5200793	ReturnStatement	return ( NULL ) ;	536:4:14137:14149	5200654	1	True				
ANR	5200794	Identifier	NULL		5200654	0					
ANR	5200795	ExpressionStatement	sp ++	537:3:14154:14158	5200654	5	True				
ANR	5200796	PostIncDecOperationExpression	sp ++		5200654	0					
ANR	5200797	Identifier	sp		5200654	0					
ANR	5200798	IncDec	++		5200654	1					
ANR	5200799	BreakStatement	break ;	538:3:14163:14168	5200654	6	True				
ANR	5200800	Label	case OANYOF :	539:2:14172:14183	5200654	7	True				
ANR	5200801	Identifier	OANYOF		5200654	0					
ANR	5200802	ExpressionStatement	cs = & m -> g -> sets [ OPND ( s ) ]	540:3:14188:14213	5200654	8	True				
ANR	5200803	AssignmentExpression	cs = & m -> g -> sets [ OPND ( s ) ]		5200654	0		=			
ANR	5200804	Identifier	cs		5200654	0					
ANR	5200805	UnaryOperationExpression	& m -> g -> sets [ OPND ( s ) ]		5200654	1					
ANR	5200806	UnaryOperator	&		5200654	0					
ANR	5200807	ArrayIndexing	m -> g -> sets [ OPND ( s ) ]		5200654	1					
ANR	5200808	PtrMemberAccess	m -> g -> sets		5200654	0					
ANR	5200809	PtrMemberAccess	m -> g		5200654	0					
ANR	5200810	Identifier	m		5200654	0					
ANR	5200811	Identifier	g		5200654	1					
ANR	5200812	Identifier	sets		5200654	1					
ANR	5200813	CallExpression	OPND ( s )		5200654	1					
ANR	5200814	Callee	OPND		5200654	0					
ANR	5200815	Identifier	OPND		5200654	0					
ANR	5200816	ArgumentList	s		5200654	1					
ANR	5200817	Argument	s		5200654	0					
ANR	5200818	Identifier	s		5200654	0					
ANR	5200819	IfStatement	"if ( sp == stop || ! CHIN ( cs , * sp ++ ) )"		5200654	9					
ANR	5200820	Condition	"sp == stop || ! CHIN ( cs , * sp ++ )"	541:7:14222:14251	5200654	0	True				
ANR	5200821	OrExpression	"sp == stop || ! CHIN ( cs , * sp ++ )"		5200654	0		||			
ANR	5200822	EqualityExpression	sp == stop		5200654	0		==			
ANR	5200823	Identifier	sp		5200654	0					
ANR	5200824	Identifier	stop		5200654	1					
ANR	5200825	UnaryOperationExpression	"! CHIN ( cs , * sp ++ )"		5200654	1					
ANR	5200826	UnaryOperator	!		5200654	0					
ANR	5200827	CallExpression	"CHIN ( cs , * sp ++ )"		5200654	1					
ANR	5200828	Callee	CHIN		5200654	0					
ANR	5200829	Identifier	CHIN		5200654	0					
ANR	5200830	ArgumentList	cs		5200654	1					
ANR	5200831	Argument	cs		5200654	0					
ANR	5200832	Identifier	cs		5200654	0					
ANR	5200833	Argument	* sp ++		5200654	1					
ANR	5200834	UnaryOperationExpression	* sp ++		5200654	0					
ANR	5200835	UnaryOperator	*		5200654	0					
ANR	5200836	PostIncDecOperationExpression	sp ++		5200654	1					
ANR	5200837	Identifier	sp		5200654	0					
ANR	5200838	IncDec	++		5200654	1					
ANR	5200839	ReturnStatement	return ( NULL ) ;	542:4:14258:14270	5200654	1	True				
ANR	5200840	Identifier	NULL		5200654	0					
ANR	5200841	BreakStatement	break ;	543:3:14275:14280	5200654	10	True				
ANR	5200842	Label	case OBOL :	544:2:14284:14293	5200654	11	True				
ANR	5200843	Identifier	OBOL		5200654	0					
ANR	5200844	IfStatement	if ( ( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) )		5200654	12					
ANR	5200845	Condition	( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) )	545:8:14303:14432	5200654	0	True				
ANR	5200846	OrExpression	( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) )		5200654	0		||			
ANR	5200847	AndExpression	sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL )		5200654	0		&&			
ANR	5200848	EqualityExpression	sp == m -> beginp		5200654	0		==			
ANR	5200849	Identifier	sp		5200654	0					
ANR	5200850	PtrMemberAccess	m -> beginp		5200654	1					
ANR	5200851	Identifier	m		5200654	0					
ANR	5200852	Identifier	beginp		5200654	1					
ANR	5200853	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTBOL )		5200654	1					
ANR	5200854	UnaryOperator	!		5200654	0					
ANR	5200855	BitAndExpression	m -> eflags & R_REGEX_NOTBOL		5200654	1		&			
ANR	5200856	PtrMemberAccess	m -> eflags		5200654	0					
ANR	5200857	Identifier	m		5200654	0					
ANR	5200858	Identifier	eflags		5200654	1					
ANR	5200859	Identifier	R_REGEX_NOTBOL		5200654	1					
ANR	5200860	AndExpression	sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5200861	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5200862	Identifier	sp		5200654	0					
ANR	5200863	PtrMemberAccess	m -> endp		5200654	1					
ANR	5200864	Identifier	m		5200654	0					
ANR	5200865	Identifier	endp		5200654	1					
ANR	5200866	AndExpression	* ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5200867	EqualityExpression	* ( sp - 1 ) == '\\n'		5200654	0		==			
ANR	5200868	UnaryOperationExpression	* ( sp - 1 )		5200654	0					
ANR	5200869	UnaryOperator	*		5200654	0					
ANR	5200870	AdditiveExpression	sp - 1		5200654	1		-			
ANR	5200871	Identifier	sp		5200654	0					
ANR	5200872	PrimaryExpression	1		5200654	1					
ANR	5200873	PrimaryExpression	'\\n'		5200654	1					
ANR	5200874	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5200654	1		&			
ANR	5200875	PtrMemberAccess	m -> g -> cflags		5200654	0					
ANR	5200876	PtrMemberAccess	m -> g		5200654	0					
ANR	5200877	Identifier	m		5200654	0					
ANR	5200878	Identifier	g		5200654	1					
ANR	5200879	Identifier	cflags		5200654	1					
ANR	5200880	Identifier	R_REGEX_NEWLINE		5200654	1					
ANR	5200881	CompoundStatement		40:4:927:927	5200654	1					
ANR	5200882	ElseStatement	else		5200654	0					
ANR	5200883	ReturnStatement	return ( NULL ) ;	550:4:14466:14478	5200654	0	True				
ANR	5200884	Identifier	NULL		5200654	0					
ANR	5200885	BreakStatement	break ;	551:3:14483:14488	5200654	13	True				
ANR	5200886	Label	case OEOL :	552:2:14492:14501	5200654	14	True				
ANR	5200887	Identifier	OEOL		5200654	0					
ANR	5200888	IfStatement	if ( ( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) )		5200654	15					
ANR	5200889	Condition	( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) )	553:8:14511:14634	5200654	0	True				
ANR	5200890	OrExpression	( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) )		5200654	0		||			
ANR	5200891	AndExpression	sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL )		5200654	0		&&			
ANR	5200892	EqualityExpression	sp == m -> endp		5200654	0		==			
ANR	5200893	Identifier	sp		5200654	0					
ANR	5200894	PtrMemberAccess	m -> endp		5200654	1					
ANR	5200895	Identifier	m		5200654	0					
ANR	5200896	Identifier	endp		5200654	1					
ANR	5200897	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTEOL )		5200654	1					
ANR	5200898	UnaryOperator	!		5200654	0					
ANR	5200899	BitAndExpression	m -> eflags & R_REGEX_NOTEOL		5200654	1		&			
ANR	5200900	PtrMemberAccess	m -> eflags		5200654	0					
ANR	5200901	Identifier	m		5200654	0					
ANR	5200902	Identifier	eflags		5200654	1					
ANR	5200903	Identifier	R_REGEX_NOTEOL		5200654	1					
ANR	5200904	AndExpression	sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5200905	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5200906	Identifier	sp		5200654	0					
ANR	5200907	PtrMemberAccess	m -> endp		5200654	1					
ANR	5200908	Identifier	m		5200654	0					
ANR	5200909	Identifier	endp		5200654	1					
ANR	5200910	AndExpression	* sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5200911	EqualityExpression	* sp == '\\n'		5200654	0		==			
ANR	5200912	UnaryOperationExpression	* sp		5200654	0					
ANR	5200913	UnaryOperator	*		5200654	0					
ANR	5200914	Identifier	sp		5200654	1					
ANR	5200915	PrimaryExpression	'\\n'		5200654	1					
ANR	5200916	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5200654	1		&			
ANR	5200917	PtrMemberAccess	m -> g -> cflags		5200654	0					
ANR	5200918	PtrMemberAccess	m -> g		5200654	0					
ANR	5200919	Identifier	m		5200654	0					
ANR	5200920	Identifier	g		5200654	1					
ANR	5200921	Identifier	cflags		5200654	1					
ANR	5200922	Identifier	R_REGEX_NEWLINE		5200654	1					
ANR	5200923	CompoundStatement		48:4:1129:1129	5200654	1					
ANR	5200924	ElseStatement	else		5200654	0					
ANR	5200925	ReturnStatement	return ( NULL ) ;	558:4:14668:14680	5200654	0	True				
ANR	5200926	Identifier	NULL		5200654	0					
ANR	5200927	BreakStatement	break ;	559:3:14685:14690	5200654	16	True				
ANR	5200928	Label	case OBOW :	560:2:14694:14703	5200654	17	True				
ANR	5200929	Identifier	OBOW		5200654	0					
ANR	5200930	IfStatement	if ( ( ( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) ) ) ) && ( sp < m -> endp && ISWORD ( ( unsigned char ) * sp ) ) )		5200654	18					
ANR	5200931	Condition	( ( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) ) ) ) && ( sp < m -> endp && ISWORD ( ( unsigned char ) * sp ) )	561:7:14712:14965	5200654	0	True				
ANR	5200932	AndExpression	( ( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) ) ) ) && ( sp < m -> endp && ISWORD ( ( unsigned char ) * sp ) )		5200654	0		&&			
ANR	5200933	OrExpression	( sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL ) ) || ( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) ) )		5200654	0		||			
ANR	5200934	AndExpression	sp == m -> beginp && ! ( m -> eflags & R_REGEX_NOTBOL )		5200654	0		&&			
ANR	5200935	EqualityExpression	sp == m -> beginp		5200654	0		==			
ANR	5200936	Identifier	sp		5200654	0					
ANR	5200937	PtrMemberAccess	m -> beginp		5200654	1					
ANR	5200938	Identifier	m		5200654	0					
ANR	5200939	Identifier	beginp		5200654	1					
ANR	5200940	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTBOL )		5200654	1					
ANR	5200941	UnaryOperator	!		5200654	0					
ANR	5200942	BitAndExpression	m -> eflags & R_REGEX_NOTBOL		5200654	1		&			
ANR	5200943	PtrMemberAccess	m -> eflags		5200654	0					
ANR	5200944	Identifier	m		5200654	0					
ANR	5200945	Identifier	eflags		5200654	1					
ANR	5200946	Identifier	R_REGEX_NOTBOL		5200654	1					
ANR	5200947	OrExpression	( sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) ) )		5200654	1		||			
ANR	5200948	AndExpression	sp < m -> endp && * ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	0		&&			
ANR	5200949	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5200950	Identifier	sp		5200654	0					
ANR	5200951	PtrMemberAccess	m -> endp		5200654	1					
ANR	5200952	Identifier	m		5200654	0					
ANR	5200953	Identifier	endp		5200654	1					
ANR	5200954	AndExpression	* ( sp - 1 ) == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5200955	EqualityExpression	* ( sp - 1 ) == '\\n'		5200654	0		==			
ANR	5200956	UnaryOperationExpression	* ( sp - 1 )		5200654	0					
ANR	5200957	UnaryOperator	*		5200654	0					
ANR	5200958	AdditiveExpression	sp - 1		5200654	1		-			
ANR	5200959	Identifier	sp		5200654	0					
ANR	5200960	PrimaryExpression	1		5200654	1					
ANR	5200961	PrimaryExpression	'\\n'		5200654	1					
ANR	5200962	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5200654	1		&			
ANR	5200963	PtrMemberAccess	m -> g -> cflags		5200654	0					
ANR	5200964	PtrMemberAccess	m -> g		5200654	0					
ANR	5200965	Identifier	m		5200654	0					
ANR	5200966	Identifier	g		5200654	1					
ANR	5200967	Identifier	cflags		5200654	1					
ANR	5200968	Identifier	R_REGEX_NEWLINE		5200654	1					
ANR	5200969	AndExpression	sp > m -> beginp && ! ISWORD ( ( unsigned char ) * ( sp - 1 ) )		5200654	1		&&			
ANR	5200970	RelationalExpression	sp > m -> beginp		5200654	0		>			
ANR	5200971	Identifier	sp		5200654	0					
ANR	5200972	PtrMemberAccess	m -> beginp		5200654	1					
ANR	5200973	Identifier	m		5200654	0					
ANR	5200974	Identifier	beginp		5200654	1					
ANR	5200975	UnaryOperationExpression	! ISWORD ( ( unsigned char ) * ( sp - 1 ) )		5200654	1					
ANR	5200976	UnaryOperator	!		5200654	0					
ANR	5200977	CallExpression	ISWORD ( ( unsigned char ) * ( sp - 1 ) )		5200654	1					
ANR	5200978	Callee	ISWORD		5200654	0					
ANR	5200979	Identifier	ISWORD		5200654	0					
ANR	5200980	ArgumentList	( unsigned char ) * ( sp - 1 )		5200654	1					
ANR	5200981	Argument	( unsigned char ) * ( sp - 1 )		5200654	0					
ANR	5200982	CastExpression	( unsigned char ) * ( sp - 1 )		5200654	0					
ANR	5200983	CastTarget	unsigned char		5200654	0					
ANR	5200984	UnaryOperationExpression	* ( sp - 1 )		5200654	1					
ANR	5200985	UnaryOperator	*		5200654	0					
ANR	5200986	AdditiveExpression	sp - 1		5200654	1		-			
ANR	5200987	Identifier	sp		5200654	0					
ANR	5200988	PrimaryExpression	1		5200654	1					
ANR	5200989	AndExpression	sp < m -> endp && ISWORD ( ( unsigned char ) * sp )		5200654	1		&&			
ANR	5200990	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5200991	Identifier	sp		5200654	0					
ANR	5200992	PtrMemberAccess	m -> endp		5200654	1					
ANR	5200993	Identifier	m		5200654	0					
ANR	5200994	Identifier	endp		5200654	1					
ANR	5200995	CallExpression	ISWORD ( ( unsigned char ) * sp )		5200654	1					
ANR	5200996	Callee	ISWORD		5200654	0					
ANR	5200997	Identifier	ISWORD		5200654	0					
ANR	5200998	ArgumentList	( unsigned char ) * sp		5200654	1					
ANR	5200999	Argument	( unsigned char ) * sp		5200654	0					
ANR	5201000	CastExpression	( unsigned char ) * sp		5200654	0					
ANR	5201001	CastTarget	unsigned char		5200654	0					
ANR	5201002	UnaryOperationExpression	* sp		5200654	1					
ANR	5201003	UnaryOperator	*		5200654	0					
ANR	5201004	Identifier	sp		5200654	1					
ANR	5201005	CompoundStatement		59:4:1460:1460	5200654	1					
ANR	5201006	ElseStatement	else		5200654	0					
ANR	5201007	ReturnStatement	return ( NULL ) ;	569:4:14999:15011	5200654	0	True				
ANR	5201008	Identifier	NULL		5200654	0					
ANR	5201009	BreakStatement	break ;	570:3:15016:15021	5200654	19	True				
ANR	5201010	Label	case OEOW :	571:2:15025:15034	5200654	20	True				
ANR	5201011	Identifier	OEOW		5200654	0					
ANR	5201012	IfStatement	if ( ( ( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp ) ) ) && ( sp > m -> beginp && ISWORD ( ( unsigned char ) * ( sp - 1 ) ) ) )		5200654	21					
ANR	5201013	Condition	( ( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp ) ) ) && ( sp > m -> beginp && ISWORD ( ( unsigned char ) * ( sp - 1 ) ) )	572:7:15043:15283	5200654	0	True				
ANR	5201014	AndExpression	( ( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp ) ) ) && ( sp > m -> beginp && ISWORD ( ( unsigned char ) * ( sp - 1 ) ) )		5200654	0		&&			
ANR	5201015	OrExpression	( sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL ) ) || ( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp ) )		5200654	0		||			
ANR	5201016	AndExpression	sp == m -> endp && ! ( m -> eflags & R_REGEX_NOTEOL )		5200654	0		&&			
ANR	5201017	EqualityExpression	sp == m -> endp		5200654	0		==			
ANR	5201018	Identifier	sp		5200654	0					
ANR	5201019	PtrMemberAccess	m -> endp		5200654	1					
ANR	5201020	Identifier	m		5200654	0					
ANR	5201021	Identifier	endp		5200654	1					
ANR	5201022	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTEOL )		5200654	1					
ANR	5201023	UnaryOperator	!		5200654	0					
ANR	5201024	BitAndExpression	m -> eflags & R_REGEX_NOTEOL		5200654	1		&			
ANR	5201025	PtrMemberAccess	m -> eflags		5200654	0					
ANR	5201026	Identifier	m		5200654	0					
ANR	5201027	Identifier	eflags		5200654	1					
ANR	5201028	Identifier	R_REGEX_NOTEOL		5200654	1					
ANR	5201029	OrExpression	( sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE ) ) || ( sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp ) )		5200654	1		||			
ANR	5201030	AndExpression	sp < m -> endp && * sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	0		&&			
ANR	5201031	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5201032	Identifier	sp		5200654	0					
ANR	5201033	PtrMemberAccess	m -> endp		5200654	1					
ANR	5201034	Identifier	m		5200654	0					
ANR	5201035	Identifier	endp		5200654	1					
ANR	5201036	AndExpression	* sp == '\\n' && ( m -> g -> cflags & R_REGEX_NEWLINE )		5200654	1		&&			
ANR	5201037	EqualityExpression	* sp == '\\n'		5200654	0		==			
ANR	5201038	UnaryOperationExpression	* sp		5200654	0					
ANR	5201039	UnaryOperator	*		5200654	0					
ANR	5201040	Identifier	sp		5200654	1					
ANR	5201041	PrimaryExpression	'\\n'		5200654	1					
ANR	5201042	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5200654	1		&			
ANR	5201043	PtrMemberAccess	m -> g -> cflags		5200654	0					
ANR	5201044	PtrMemberAccess	m -> g		5200654	0					
ANR	5201045	Identifier	m		5200654	0					
ANR	5201046	Identifier	g		5200654	1					
ANR	5201047	Identifier	cflags		5200654	1					
ANR	5201048	Identifier	R_REGEX_NEWLINE		5200654	1					
ANR	5201049	AndExpression	sp < m -> endp && ! ISWORD ( ( unsigned char ) * sp )		5200654	1		&&			
ANR	5201050	RelationalExpression	sp < m -> endp		5200654	0		<			
ANR	5201051	Identifier	sp		5200654	0					
ANR	5201052	PtrMemberAccess	m -> endp		5200654	1					
ANR	5201053	Identifier	m		5200654	0					
ANR	5201054	Identifier	endp		5200654	1					
ANR	5201055	UnaryOperationExpression	! ISWORD ( ( unsigned char ) * sp )		5200654	1					
ANR	5201056	UnaryOperator	!		5200654	0					
ANR	5201057	CallExpression	ISWORD ( ( unsigned char ) * sp )		5200654	1					
ANR	5201058	Callee	ISWORD		5200654	0					
ANR	5201059	Identifier	ISWORD		5200654	0					
ANR	5201060	ArgumentList	( unsigned char ) * sp		5200654	1					
ANR	5201061	Argument	( unsigned char ) * sp		5200654	0					
ANR	5201062	CastExpression	( unsigned char ) * sp		5200654	0					
ANR	5201063	CastTarget	unsigned char		5200654	0					
ANR	5201064	UnaryOperationExpression	* sp		5200654	1					
ANR	5201065	UnaryOperator	*		5200654	0					
ANR	5201066	Identifier	sp		5200654	1					
ANR	5201067	AndExpression	sp > m -> beginp && ISWORD ( ( unsigned char ) * ( sp - 1 ) )		5200654	1		&&			
ANR	5201068	RelationalExpression	sp > m -> beginp		5200654	0		>			
ANR	5201069	Identifier	sp		5200654	0					
ANR	5201070	PtrMemberAccess	m -> beginp		5200654	1					
ANR	5201071	Identifier	m		5200654	0					
ANR	5201072	Identifier	beginp		5200654	1					
ANR	5201073	CallExpression	ISWORD ( ( unsigned char ) * ( sp - 1 ) )		5200654	1					
ANR	5201074	Callee	ISWORD		5200654	0					
ANR	5201075	Identifier	ISWORD		5200654	0					
ANR	5201076	ArgumentList	( unsigned char ) * ( sp - 1 )		5200654	1					
ANR	5201077	Argument	( unsigned char ) * ( sp - 1 )		5200654	0					
ANR	5201078	CastExpression	( unsigned char ) * ( sp - 1 )		5200654	0					
ANR	5201079	CastTarget	unsigned char		5200654	0					
ANR	5201080	UnaryOperationExpression	* ( sp - 1 )		5200654	1					
ANR	5201081	UnaryOperator	*		5200654	0					
ANR	5201082	AdditiveExpression	sp - 1		5200654	1		-			
ANR	5201083	Identifier	sp		5200654	0					
ANR	5201084	PrimaryExpression	1		5200654	1					
ANR	5201085	CompoundStatement		69:4:1778:1778	5200654	1					
ANR	5201086	ElseStatement	else		5200654	0					
ANR	5201087	ReturnStatement	return ( NULL ) ;	579:4:15317:15329	5200654	0	True				
ANR	5201088	Identifier	NULL		5200654	0					
ANR	5201089	BreakStatement	break ;	580:3:15334:15339	5200654	22	True				
ANR	5201090	Label	case O_QUEST :	581:2:15343:15355	5200654	23	True				
ANR	5201091	Identifier	O_QUEST		5200654	0					
ANR	5201092	BreakStatement	break ;	582:3:15360:15365	5200654	24	True				
ANR	5201093	Label	case OOR1 :	583:2:15369:15378	5200654	25	True				
ANR	5201094	Identifier	OOR1		5200654	0					
ANR	5201095	ExpressionStatement	ss ++	584:3:15420:15424	5200654	26	True				
ANR	5201096	PostIncDecOperationExpression	ss ++		5200654	0					
ANR	5201097	Identifier	ss		5200654	0					
ANR	5201098	IncDec	++		5200654	1					
ANR	5201099	ExpressionStatement	s = m -> g -> strip [ ss ]	585:3:15429:15448	5200654	27	True				
ANR	5201100	AssignmentExpression	s = m -> g -> strip [ ss ]		5200654	0		=			
ANR	5201101	Identifier	s		5200654	0					
ANR	5201102	ArrayIndexing	m -> g -> strip [ ss ]		5200654	1					
ANR	5201103	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201104	PtrMemberAccess	m -> g		5200654	0					
ANR	5201105	Identifier	m		5200654	0					
ANR	5201106	Identifier	g		5200654	1					
ANR	5201107	Identifier	strip		5200654	1					
ANR	5201108	Identifier	ss		5200654	1					
ANR	5201109	DoStatement	do		5200654	28					
ANR	5201110	CompoundStatement		78:6:1943:1943	5200654	0					
ANR	5201111	IfStatement	if ( OP ( s ) == OOR2 )		5200654	0					
ANR	5201112	Condition	OP ( s ) == OOR2	587:8:15466:15478	5200654	0	True				
ANR	5201113	EqualityExpression	OP ( s ) == OOR2		5200654	0		==			
ANR	5201114	CallExpression	OP ( s )		5200654	0					
ANR	5201115	Callee	OP		5200654	0					
ANR	5201116	Identifier	OP		5200654	0					
ANR	5201117	ArgumentList	s		5200654	1					
ANR	5201118	Argument	s		5200654	0					
ANR	5201119	Identifier	s		5200654	0					
ANR	5201120	Identifier	OOR2		5200654	1					
ANR	5201121	CompoundStatement		79:23:1968:1968	5200654	1					
ANR	5201122	ExpressionStatement	ss += OPND ( s )	588:5:15488:15501	5200654	0	True				
ANR	5201123	AssignmentExpression	ss += OPND ( s )		5200654	0		+=			
ANR	5201124	Identifier	ss		5200654	0					
ANR	5201125	CallExpression	OPND ( s )		5200654	1					
ANR	5201126	Callee	OPND		5200654	0					
ANR	5201127	Identifier	OPND		5200654	0					
ANR	5201128	ArgumentList	s		5200654	1					
ANR	5201129	Argument	s		5200654	0					
ANR	5201130	Identifier	s		5200654	0					
ANR	5201131	Condition	OP ( s = m -> g -> strip [ ss ] ) != O_CH	590:12:15521:15551	5200654	1	True				
ANR	5201132	EqualityExpression	OP ( s = m -> g -> strip [ ss ] ) != O_CH		5200654	0		!=			
ANR	5201133	CallExpression	OP ( s = m -> g -> strip [ ss ] )		5200654	0					
ANR	5201134	Callee	OP		5200654	0					
ANR	5201135	Identifier	OP		5200654	0					
ANR	5201136	ArgumentList	s = m -> g -> strip [ ss ]		5200654	1					
ANR	5201137	Argument	s = m -> g -> strip [ ss ]		5200654	0					
ANR	5201138	AssignmentExpression	s = m -> g -> strip [ ss ]		5200654	0		=			
ANR	5201139	Identifier	s		5200654	0					
ANR	5201140	ArrayIndexing	m -> g -> strip [ ss ]		5200654	1					
ANR	5201141	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201142	PtrMemberAccess	m -> g		5200654	0					
ANR	5201143	Identifier	m		5200654	0					
ANR	5201144	Identifier	g		5200654	1					
ANR	5201145	Identifier	strip		5200654	1					
ANR	5201146	Identifier	ss		5200654	1					
ANR	5201147	Identifier	O_CH		5200654	1					
ANR	5201148	BreakStatement	break ;	592:3:15608:15613	5200654	29	True				
ANR	5201149	Label	default :	593:2:15617:15624	5200654	30	True				
ANR	5201150	Identifier	default		5200654	0					
ANR	5201151	ExpressionStatement	hard = 1	594:3:15657:15665	5200654	31	True				
ANR	5201152	AssignmentExpression	hard = 1		5200654	0		=			
ANR	5201153	Identifier	hard		5200654	0					
ANR	5201154	PrimaryExpression	1		5200654	1					
ANR	5201155	BreakStatement	break ;	595:3:15670:15675	5200654	32	True				
ANR	5201156	IfStatement	if ( ! hard )		5200654	16					
ANR	5201157	Condition	! hard	597:5:15686:15690	5200654	0	True				
ANR	5201158	UnaryOperationExpression	! hard		5200654	0					
ANR	5201159	UnaryOperator	!		5200654	0					
ANR	5201160	Identifier	hard		5200654	1					
ANR	5201161	CompoundStatement		89:12:2180:2180	5200654	1					
ANR	5201162	IfStatement	if ( sp != stop )		5200654	0					
ANR	5201163	Condition	sp != stop	598:6:15721:15730	5200654	0	True				
ANR	5201164	EqualityExpression	sp != stop		5200654	0		!=			
ANR	5201165	Identifier	sp		5200654	0					
ANR	5201166	Identifier	stop		5200654	1					
ANR	5201167	ReturnStatement	return ( NULL ) ;	599:3:15736:15748	5200654	1	True				
ANR	5201168	Identifier	NULL		5200654	0					
ANR	5201169	ReturnStatement	return ( sp ) ;	600:2:15752:15762	5200654	1	True				
ANR	5201170	Identifier	sp		5200654	0					
ANR	5201171	ExpressionStatement	ss --	602:1:15768:15772	5200654	17	True				
ANR	5201172	PostIncDecOperationExpression	ss --		5200654	0					
ANR	5201173	Identifier	ss		5200654	0					
ANR	5201174	IncDec	--		5200654	1					
ANR	5201175	ExpressionStatement	"AT ( ""hard"" , sp , stop , ss , stopst )"	605:1:15843:15875	5200654	18	True				
ANR	5201176	CallExpression	"AT ( ""hard"" , sp , stop , ss , stopst )"		5200654	0					
ANR	5201177	Callee	AT		5200654	0					
ANR	5201178	Identifier	AT		5200654	0					
ANR	5201179	ArgumentList	"""hard"""		5200654	1					
ANR	5201180	Argument	"""hard"""		5200654	0					
ANR	5201181	PrimaryExpression	"""hard"""		5200654	0					
ANR	5201182	Argument	sp		5200654	1					
ANR	5201183	Identifier	sp		5200654	0					
ANR	5201184	Argument	stop		5200654	2					
ANR	5201185	Identifier	stop		5200654	0					
ANR	5201186	Argument	ss		5200654	3					
ANR	5201187	Identifier	ss		5200654	0					
ANR	5201188	Argument	stopst		5200654	4					
ANR	5201189	Identifier	stopst		5200654	0					
ANR	5201190	ExpressionStatement	s = m -> g -> strip [ ss ]	606:1:15878:15897	5200654	19	True				
ANR	5201191	AssignmentExpression	s = m -> g -> strip [ ss ]		5200654	0		=			
ANR	5201192	Identifier	s		5200654	0					
ANR	5201193	ArrayIndexing	m -> g -> strip [ ss ]		5200654	1					
ANR	5201194	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201195	PtrMemberAccess	m -> g		5200654	0					
ANR	5201196	Identifier	m		5200654	0					
ANR	5201197	Identifier	g		5200654	1					
ANR	5201198	Identifier	strip		5200654	1					
ANR	5201199	Identifier	ss		5200654	1					
ANR	5201200	SwitchStatement	switch ( OP ( s ) )		5200654	20					
ANR	5201201	Condition	OP ( s )	607:9:15908:15912	5200654	0	True				
ANR	5201202	CallExpression	OP ( s )		5200654	0					
ANR	5201203	Callee	OP		5200654	0					
ANR	5201204	Identifier	OP		5200654	0					
ANR	5201205	ArgumentList	s		5200654	1					
ANR	5201206	Argument	s		5200654	0					
ANR	5201207	Identifier	s		5200654	0					
ANR	5201208	CompoundStatement		99:16:2402:2402	5200654	1					
ANR	5201209	Label	case OBACK_ :	608:1:15918:15929	5200654	0	True				
ANR	5201210	Identifier	OBACK_		5200654	0					
ANR	5201211	ExpressionStatement	i = OPND ( s )	609:2:15958:15969	5200654	1	True				
ANR	5201212	AssignmentExpression	i = OPND ( s )		5200654	0		=			
ANR	5201213	Identifier	i		5200654	0					
ANR	5201214	CallExpression	OPND ( s )		5200654	1					
ANR	5201215	Callee	OPND		5200654	0					
ANR	5201216	Identifier	OPND		5200654	0					
ANR	5201217	ArgumentList	s		5200654	1					
ANR	5201218	Argument	s		5200654	0					
ANR	5201219	Identifier	s		5200654	0					
ANR	5201220	IfStatement	if ( i > 0 && i <= m -> g -> nsub )		5200654	2					
ANR	5201221	Condition	i > 0 && i <= m -> g -> nsub	610:6:15977:16000	5200654	0	True				
ANR	5201222	AndExpression	i > 0 && i <= m -> g -> nsub		5200654	0		&&			
ANR	5201223	RelationalExpression	i > 0		5200654	0		>			
ANR	5201224	Identifier	i		5200654	0					
ANR	5201225	PrimaryExpression	0		5200654	1					
ANR	5201226	RelationalExpression	i <= m -> g -> nsub		5200654	1		<=			
ANR	5201227	Identifier	i		5200654	0					
ANR	5201228	PtrMemberAccess	m -> g -> nsub		5200654	1					
ANR	5201229	PtrMemberAccess	m -> g		5200654	0					
ANR	5201230	Identifier	m		5200654	0					
ANR	5201231	Identifier	g		5200654	1					
ANR	5201232	Identifier	nsub		5200654	1					
ANR	5201233	CompoundStatement		102:32:2490:2490	5200654	1					
ANR	5201234	IfStatement	if ( m -> pmatch [ i ] . rm_eo == - 1 )		5200654	0					
ANR	5201235	Condition	m -> pmatch [ i ] . rm_eo == - 1	611:7:16012:16035	5200654	0	True				
ANR	5201236	EqualityExpression	m -> pmatch [ i ] . rm_eo == - 1		5200654	0		==			
ANR	5201237	MemberAccess	m -> pmatch [ i ] . rm_eo		5200654	0					
ANR	5201238	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201239	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201240	Identifier	m		5200654	0					
ANR	5201241	Identifier	pmatch		5200654	1					
ANR	5201242	Identifier	i		5200654	1					
ANR	5201243	Identifier	rm_eo		5200654	1					
ANR	5201244	UnaryOperationExpression	- 1		5200654	1					
ANR	5201245	UnaryOperator	-		5200654	0					
ANR	5201246	PrimaryExpression	1		5200654	1					
ANR	5201247	CompoundStatement		103:33:2525:2525	5200654	1					
ANR	5201248	ReturnStatement	return NULL ;	612:4:16044:16055	5200654	0	True				
ANR	5201249	Identifier	NULL		5200654	0					
ANR	5201250	IfStatement	if ( m -> pmatch [ i ] . rm_so != - 1 )		5200654	3					
ANR	5201251	Condition	m -> pmatch [ i ] . rm_so != - 1	615:6:16072:16095	5200654	0	True				
ANR	5201252	EqualityExpression	m -> pmatch [ i ] . rm_so != - 1		5200654	0		!=			
ANR	5201253	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	0					
ANR	5201254	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201255	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201256	Identifier	m		5200654	0					
ANR	5201257	Identifier	pmatch		5200654	1					
ANR	5201258	Identifier	i		5200654	1					
ANR	5201259	Identifier	rm_so		5200654	1					
ANR	5201260	UnaryOperationExpression	- 1		5200654	1					
ANR	5201261	UnaryOperator	-		5200654	0					
ANR	5201262	PrimaryExpression	1		5200654	1					
ANR	5201263	CompoundStatement		107:32:2585:2585	5200654	1					
ANR	5201264	ExpressionStatement	len = m -> pmatch [ i ] . rm_eo - m -> pmatch [ i ] . rm_so	616:3:16103:16148	5200654	0	True				
ANR	5201265	AssignmentExpression	len = m -> pmatch [ i ] . rm_eo - m -> pmatch [ i ] . rm_so		5200654	0		=			
ANR	5201266	Identifier	len		5200654	0					
ANR	5201267	AdditiveExpression	m -> pmatch [ i ] . rm_eo - m -> pmatch [ i ] . rm_so		5200654	1		-			
ANR	5201268	MemberAccess	m -> pmatch [ i ] . rm_eo		5200654	0					
ANR	5201269	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201270	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201271	Identifier	m		5200654	0					
ANR	5201272	Identifier	pmatch		5200654	1					
ANR	5201273	Identifier	i		5200654	1					
ANR	5201274	Identifier	rm_eo		5200654	1					
ANR	5201275	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	1					
ANR	5201276	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201277	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201278	Identifier	m		5200654	0					
ANR	5201279	Identifier	pmatch		5200654	1					
ANR	5201280	Identifier	i		5200654	1					
ANR	5201281	Identifier	rm_so		5200654	1					
ANR	5201282	IfStatement	if ( len == 0 && rec ++ > MAX_RECURSION )		5200654	1					
ANR	5201283	Condition	len == 0 && rec ++ > MAX_RECURSION	617:7:16157:16189	5200654	0	True				
ANR	5201284	AndExpression	len == 0 && rec ++ > MAX_RECURSION		5200654	0		&&			
ANR	5201285	EqualityExpression	len == 0		5200654	0		==			
ANR	5201286	Identifier	len		5200654	0					
ANR	5201287	PrimaryExpression	0		5200654	1					
ANR	5201288	RelationalExpression	rec ++ > MAX_RECURSION		5200654	1		>			
ANR	5201289	PostIncDecOperationExpression	rec ++		5200654	0					
ANR	5201290	Identifier	rec		5200654	0					
ANR	5201291	IncDec	++		5200654	1					
ANR	5201292	Identifier	MAX_RECURSION		5200654	1					
ANR	5201293	ReturnStatement	return ( NULL ) ;	618:4:16196:16208	5200654	1	True				
ANR	5201294	Identifier	NULL		5200654	0					
ANR	5201295	IfStatement	if ( stop - m -> beginp >= len )		5200654	2					
ANR	5201296	Condition	stop - m -> beginp >= len	619:7:16217:16239	5200654	0	True				
ANR	5201297	RelationalExpression	stop - m -> beginp >= len		5200654	0		>=			
ANR	5201298	AdditiveExpression	stop - m -> beginp		5200654	0		-			
ANR	5201299	Identifier	stop		5200654	0					
ANR	5201300	PtrMemberAccess	m -> beginp		5200654	1					
ANR	5201301	Identifier	m		5200654	0					
ANR	5201302	Identifier	beginp		5200654	1					
ANR	5201303	Identifier	len		5200654	1					
ANR	5201304	CompoundStatement		111:32:2729:2729	5200654	1					
ANR	5201305	IfStatement	if ( sp > stop - len )		5200654	0					
ANR	5201306	Condition	sp > stop - len	620:8:16252:16266	5200654	0	True				
ANR	5201307	RelationalExpression	sp > stop - len		5200654	0		>			
ANR	5201308	Identifier	sp		5200654	0					
ANR	5201309	AdditiveExpression	stop - len		5200654	1		-			
ANR	5201310	Identifier	stop		5200654	0					
ANR	5201311	Identifier	len		5200654	1					
ANR	5201312	CompoundStatement		112:25:2756:2756	5200654	1					
ANR	5201313	ReturnStatement	return ( NULL ) ;	621:5:16276:16288	5200654	0	True				
ANR	5201314	Identifier	NULL		5200654	0					
ANR	5201315	ExpressionStatement	ssp = m -> offp + m -> pmatch [ i ] . rm_so	624:3:16335:16369	5200654	3	True				
ANR	5201316	AssignmentExpression	ssp = m -> offp + m -> pmatch [ i ] . rm_so		5200654	0		=			
ANR	5201317	Identifier	ssp		5200654	0					
ANR	5201318	AdditiveExpression	m -> offp + m -> pmatch [ i ] . rm_so		5200654	1		+			
ANR	5201319	PtrMemberAccess	m -> offp		5200654	0					
ANR	5201320	Identifier	m		5200654	0					
ANR	5201321	Identifier	offp		5200654	1					
ANR	5201322	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	1					
ANR	5201323	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201324	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201325	Identifier	m		5200654	0					
ANR	5201326	Identifier	pmatch		5200654	1					
ANR	5201327	Identifier	i		5200654	1					
ANR	5201328	Identifier	rm_so		5200654	1					
ANR	5201329	IfStatement	"if ( memcmp ( sp , ssp , len ) != 0 )"		5200654	4					
ANR	5201330	Condition	"memcmp ( sp , ssp , len ) != 0"	625:7:16378:16402	5200654	0	True				
ANR	5201331	EqualityExpression	"memcmp ( sp , ssp , len ) != 0"		5200654	0		!=			
ANR	5201332	CallExpression	"memcmp ( sp , ssp , len )"		5200654	0					
ANR	5201333	Callee	memcmp		5200654	0					
ANR	5201334	Identifier	memcmp		5200654	0					
ANR	5201335	ArgumentList	sp		5200654	1					
ANR	5201336	Argument	sp		5200654	0					
ANR	5201337	Identifier	sp		5200654	0					
ANR	5201338	Argument	ssp		5200654	1					
ANR	5201339	Identifier	ssp		5200654	0					
ANR	5201340	Argument	len		5200654	2					
ANR	5201341	Identifier	len		5200654	0					
ANR	5201342	PrimaryExpression	0		5200654	1					
ANR	5201343	ReturnStatement	return ( NULL ) ;	626:4:16409:16421	5200654	1	True				
ANR	5201344	Identifier	NULL		5200654	0					
ANR	5201345	WhileStatement	"while ( m -> g -> strip [ ss ] != SOP ( O_BACK , i ) )"		5200654	5					
ANR	5201346	Condition	"m -> g -> strip [ ss ] != SOP ( O_BACK , i )"	627:10:16433:16465	5200654	0	True				
ANR	5201347	EqualityExpression	"m -> g -> strip [ ss ] != SOP ( O_BACK , i )"		5200654	0		!=			
ANR	5201348	ArrayIndexing	m -> g -> strip [ ss ]		5200654	0					
ANR	5201349	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201350	PtrMemberAccess	m -> g		5200654	0					
ANR	5201351	Identifier	m		5200654	0					
ANR	5201352	Identifier	g		5200654	1					
ANR	5201353	Identifier	strip		5200654	1					
ANR	5201354	Identifier	ss		5200654	1					
ANR	5201355	CallExpression	"SOP ( O_BACK , i )"		5200654	1					
ANR	5201356	Callee	SOP		5200654	0					
ANR	5201357	Identifier	SOP		5200654	0					
ANR	5201358	ArgumentList	O_BACK		5200654	1					
ANR	5201359	Argument	O_BACK		5200654	0					
ANR	5201360	Identifier	O_BACK		5200654	0					
ANR	5201361	Argument	i		5200654	1					
ANR	5201362	Identifier	i		5200654	0					
ANR	5201363	ExpressionStatement	ss ++	628:4:16472:16476	5200654	1	True				
ANR	5201364	PostIncDecOperationExpression	ss ++		5200654	0					
ANR	5201365	Identifier	ss		5200654	0					
ANR	5201366	IncDec	++		5200654	1					
ANR	5201367	ReturnStatement	"return ( backref ( m , sp + len , stop , ss + 1 , stopst , lev , rec ) ) ;"	629:3:16481:16537	5200654	6	True				
ANR	5201368	CallExpression	"backref ( m , sp + len , stop , ss + 1 , stopst , lev , rec )"		5200654	0					
ANR	5201369	Callee	backref		5200654	0					
ANR	5201370	Identifier	backref		5200654	0					
ANR	5201371	ArgumentList	m		5200654	1					
ANR	5201372	Argument	m		5200654	0					
ANR	5201373	Identifier	m		5200654	0					
ANR	5201374	Argument	sp + len		5200654	1					
ANR	5201375	AdditiveExpression	sp + len		5200654	0		+			
ANR	5201376	Identifier	sp		5200654	0					
ANR	5201377	Identifier	len		5200654	1					
ANR	5201378	Argument	stop		5200654	2					
ANR	5201379	Identifier	stop		5200654	0					
ANR	5201380	Argument	ss + 1		5200654	3					
ANR	5201381	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201382	Identifier	ss		5200654	0					
ANR	5201383	PrimaryExpression	1		5200654	1					
ANR	5201384	Argument	stopst		5200654	4					
ANR	5201385	Identifier	stopst		5200654	0					
ANR	5201386	Argument	lev		5200654	5					
ANR	5201387	Identifier	lev		5200654	0					
ANR	5201388	Argument	rec		5200654	6					
ANR	5201389	Identifier	rec		5200654	0					
ANR	5201390	BreakStatement	break ;	631:2:16545:16550	5200654	4	True				
ANR	5201391	Label	case OQUEST_ :	632:1:16553:16565	5200654	5	True				
ANR	5201392	Identifier	OQUEST_		5200654	0					
ANR	5201393	ExpressionStatement	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"	633:2:16591:16640	5200654	6	True				
ANR	5201394	AssignmentExpression	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	0		=			
ANR	5201395	Identifier	dp		5200654	0					
ANR	5201396	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	1					
ANR	5201397	Callee	backref		5200654	0					
ANR	5201398	Identifier	backref		5200654	0					
ANR	5201399	ArgumentList	m		5200654	1					
ANR	5201400	Argument	m		5200654	0					
ANR	5201401	Identifier	m		5200654	0					
ANR	5201402	Argument	sp		5200654	1					
ANR	5201403	Identifier	sp		5200654	0					
ANR	5201404	Argument	stop		5200654	2					
ANR	5201405	Identifier	stop		5200654	0					
ANR	5201406	Argument	ss + 1		5200654	3					
ANR	5201407	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201408	Identifier	ss		5200654	0					
ANR	5201409	PrimaryExpression	1		5200654	1					
ANR	5201410	Argument	stopst		5200654	4					
ANR	5201411	Identifier	stopst		5200654	0					
ANR	5201412	Argument	lev		5200654	5					
ANR	5201413	Identifier	lev		5200654	0					
ANR	5201414	Argument	rec		5200654	6					
ANR	5201415	Identifier	rec		5200654	0					
ANR	5201416	IfStatement	if ( dp != NULL )		5200654	7					
ANR	5201417	Condition	dp != NULL	634:6:16648:16657	5200654	0	True				
ANR	5201418	EqualityExpression	dp != NULL		5200654	0		!=			
ANR	5201419	Identifier	dp		5200654	0					
ANR	5201420	Identifier	NULL		5200654	1					
ANR	5201421	ReturnStatement	return ( dp ) ;	635:3:16663:16673	5200654	1	True				
ANR	5201422	Identifier	dp		5200654	0					
ANR	5201423	ReturnStatement	"return ( backref ( m , sp , stop , ss + OPND ( s ) + 1 , stopst , lev , rec ) ) ;"	636:2:16687:16747	5200654	8	True				
ANR	5201424	CallExpression	"backref ( m , sp , stop , ss + OPND ( s ) + 1 , stopst , lev , rec )"		5200654	0					
ANR	5201425	Callee	backref		5200654	0					
ANR	5201426	Identifier	backref		5200654	0					
ANR	5201427	ArgumentList	m		5200654	1					
ANR	5201428	Argument	m		5200654	0					
ANR	5201429	Identifier	m		5200654	0					
ANR	5201430	Argument	sp		5200654	1					
ANR	5201431	Identifier	sp		5200654	0					
ANR	5201432	Argument	stop		5200654	2					
ANR	5201433	Identifier	stop		5200654	0					
ANR	5201434	Argument	ss + OPND ( s ) + 1		5200654	3					
ANR	5201435	AdditiveExpression	ss + OPND ( s ) + 1		5200654	0		+			
ANR	5201436	Identifier	ss		5200654	0					
ANR	5201437	AdditiveExpression	OPND ( s ) + 1		5200654	1		+			
ANR	5201438	CallExpression	OPND ( s )		5200654	0					
ANR	5201439	Callee	OPND		5200654	0					
ANR	5201440	Identifier	OPND		5200654	0					
ANR	5201441	ArgumentList	s		5200654	1					
ANR	5201442	Argument	s		5200654	0					
ANR	5201443	Identifier	s		5200654	0					
ANR	5201444	PrimaryExpression	1		5200654	1					
ANR	5201445	Argument	stopst		5200654	4					
ANR	5201446	Identifier	stopst		5200654	0					
ANR	5201447	Argument	lev		5200654	5					
ANR	5201448	Identifier	lev		5200654	0					
ANR	5201449	Argument	rec		5200654	6					
ANR	5201450	Identifier	rec		5200654	0					
ANR	5201451	BreakStatement	break ;	637:2:16751:16756	5200654	9	True				
ANR	5201452	Label	case OPLUS_ :	638:1:16759:16770	5200654	10	True				
ANR	5201453	Identifier	OPLUS_		5200654	0					
ANR	5201454	IfStatement	if ( m -> lastpos && ( lev + 1 <= m -> g -> nplus ) )		5200654	11					
ANR	5201455	Condition	m -> lastpos && ( lev + 1 <= m -> g -> nplus )	639:6:16778:16815	5200654	0	True				
ANR	5201456	AndExpression	m -> lastpos && ( lev + 1 <= m -> g -> nplus )		5200654	0		&&			
ANR	5201457	PtrMemberAccess	m -> lastpos		5200654	0					
ANR	5201458	Identifier	m		5200654	0					
ANR	5201459	Identifier	lastpos		5200654	1					
ANR	5201460	RelationalExpression	lev + 1 <= m -> g -> nplus		5200654	1		<=			
ANR	5201461	AdditiveExpression	lev + 1		5200654	0		+			
ANR	5201462	Identifier	lev		5200654	0					
ANR	5201463	PrimaryExpression	1		5200654	1					
ANR	5201464	PtrMemberAccess	m -> g -> nplus		5200654	1					
ANR	5201465	PtrMemberAccess	m -> g		5200654	0					
ANR	5201466	Identifier	m		5200654	0					
ANR	5201467	Identifier	g		5200654	1					
ANR	5201468	Identifier	nplus		5200654	1					
ANR	5201469	CompoundStatement		131:46:3305:3305	5200654	1					
ANR	5201470	ExpressionStatement	m -> lastpos [ lev + 1 ] = sp	640:3:16823:16845	5200654	0	True				
ANR	5201471	AssignmentExpression	m -> lastpos [ lev + 1 ] = sp		5200654	0		=			
ANR	5201472	ArrayIndexing	m -> lastpos [ lev + 1 ]		5200654	0					
ANR	5201473	PtrMemberAccess	m -> lastpos		5200654	0					
ANR	5201474	Identifier	m		5200654	0					
ANR	5201475	Identifier	lastpos		5200654	1					
ANR	5201476	AdditiveExpression	lev + 1		5200654	1		+			
ANR	5201477	Identifier	lev		5200654	0					
ANR	5201478	PrimaryExpression	1		5200654	1					
ANR	5201479	Identifier	sp		5200654	1					
ANR	5201480	ReturnStatement	"return ( backref ( m , sp , stop , ss + 1 , stopst , lev + 1 , rec ) ) ;"	641:3:16850:16904	5200654	1	True				
ANR	5201481	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev + 1 , rec )"		5200654	0					
ANR	5201482	Callee	backref		5200654	0					
ANR	5201483	Identifier	backref		5200654	0					
ANR	5201484	ArgumentList	m		5200654	1					
ANR	5201485	Argument	m		5200654	0					
ANR	5201486	Identifier	m		5200654	0					
ANR	5201487	Argument	sp		5200654	1					
ANR	5201488	Identifier	sp		5200654	0					
ANR	5201489	Argument	stop		5200654	2					
ANR	5201490	Identifier	stop		5200654	0					
ANR	5201491	Argument	ss + 1		5200654	3					
ANR	5201492	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201493	Identifier	ss		5200654	0					
ANR	5201494	PrimaryExpression	1		5200654	1					
ANR	5201495	Argument	stopst		5200654	4					
ANR	5201496	Identifier	stopst		5200654	0					
ANR	5201497	Argument	lev + 1		5200654	5					
ANR	5201498	AdditiveExpression	lev + 1		5200654	0		+			
ANR	5201499	Identifier	lev		5200654	0					
ANR	5201500	PrimaryExpression	1		5200654	1					
ANR	5201501	Argument	rec		5200654	6					
ANR	5201502	Identifier	rec		5200654	0					
ANR	5201503	BreakStatement	break ;	643:2:16912:16917	5200654	12	True				
ANR	5201504	Label	case O_PLUS :	644:1:16920:16931	5200654	13	True				
ANR	5201505	Identifier	O_PLUS		5200654	0					
ANR	5201506	IfStatement	if ( sp == m -> lastpos [ lev ] )		5200654	14					
ANR	5201507	Condition	sp == m -> lastpos [ lev ]	645:6:16939:16959	5200654	0	True				
ANR	5201508	EqualityExpression	sp == m -> lastpos [ lev ]		5200654	0		==			
ANR	5201509	Identifier	sp		5200654	0					
ANR	5201510	ArrayIndexing	m -> lastpos [ lev ]		5200654	1					
ANR	5201511	PtrMemberAccess	m -> lastpos		5200654	0					
ANR	5201512	Identifier	m		5200654	0					
ANR	5201513	Identifier	lastpos		5200654	1					
ANR	5201514	Identifier	lev		5200654	1					
ANR	5201515	ReturnStatement	"return ( backref ( m , sp , stop , ss + 1 , stopst , lev - 1 , rec ) ) ;"	646:3:16994:17048	5200654	1	True				
ANR	5201516	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev - 1 , rec )"		5200654	0					
ANR	5201517	Callee	backref		5200654	0					
ANR	5201518	Identifier	backref		5200654	0					
ANR	5201519	ArgumentList	m		5200654	1					
ANR	5201520	Argument	m		5200654	0					
ANR	5201521	Identifier	m		5200654	0					
ANR	5201522	Argument	sp		5200654	1					
ANR	5201523	Identifier	sp		5200654	0					
ANR	5201524	Argument	stop		5200654	2					
ANR	5201525	Identifier	stop		5200654	0					
ANR	5201526	Argument	ss + 1		5200654	3					
ANR	5201527	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201528	Identifier	ss		5200654	0					
ANR	5201529	PrimaryExpression	1		5200654	1					
ANR	5201530	Argument	stopst		5200654	4					
ANR	5201531	Identifier	stopst		5200654	0					
ANR	5201532	Argument	lev - 1		5200654	5					
ANR	5201533	AdditiveExpression	lev - 1		5200654	0		-			
ANR	5201534	Identifier	lev		5200654	0					
ANR	5201535	PrimaryExpression	1		5200654	1					
ANR	5201536	Argument	rec		5200654	6					
ANR	5201537	Identifier	rec		5200654	0					
ANR	5201538	ExpressionStatement	m -> lastpos [ lev ] = sp	648:2:17077:17097	5200654	15	True				
ANR	5201539	AssignmentExpression	m -> lastpos [ lev ] = sp		5200654	0		=			
ANR	5201540	ArrayIndexing	m -> lastpos [ lev ]		5200654	0					
ANR	5201541	PtrMemberAccess	m -> lastpos		5200654	0					
ANR	5201542	Identifier	m		5200654	0					
ANR	5201543	Identifier	lastpos		5200654	1					
ANR	5201544	Identifier	lev		5200654	1					
ANR	5201545	Identifier	sp		5200654	1					
ANR	5201546	ExpressionStatement	"dp = backref ( m , sp , stop , ss - OPND ( s ) + 1 , stopst , lev , rec )"	649:2:17101:17158	5200654	16	True				
ANR	5201547	AssignmentExpression	"dp = backref ( m , sp , stop , ss - OPND ( s ) + 1 , stopst , lev , rec )"		5200654	0		=			
ANR	5201548	Identifier	dp		5200654	0					
ANR	5201549	CallExpression	"backref ( m , sp , stop , ss - OPND ( s ) + 1 , stopst , lev , rec )"		5200654	1					
ANR	5201550	Callee	backref		5200654	0					
ANR	5201551	Identifier	backref		5200654	0					
ANR	5201552	ArgumentList	m		5200654	1					
ANR	5201553	Argument	m		5200654	0					
ANR	5201554	Identifier	m		5200654	0					
ANR	5201555	Argument	sp		5200654	1					
ANR	5201556	Identifier	sp		5200654	0					
ANR	5201557	Argument	stop		5200654	2					
ANR	5201558	Identifier	stop		5200654	0					
ANR	5201559	Argument	ss - OPND ( s ) + 1		5200654	3					
ANR	5201560	AdditiveExpression	ss - OPND ( s ) + 1		5200654	0		-			
ANR	5201561	Identifier	ss		5200654	0					
ANR	5201562	AdditiveExpression	OPND ( s ) + 1		5200654	1		+			
ANR	5201563	CallExpression	OPND ( s )		5200654	0					
ANR	5201564	Callee	OPND		5200654	0					
ANR	5201565	Identifier	OPND		5200654	0					
ANR	5201566	ArgumentList	s		5200654	1					
ANR	5201567	Argument	s		5200654	0					
ANR	5201568	Identifier	s		5200654	0					
ANR	5201569	PrimaryExpression	1		5200654	1					
ANR	5201570	Argument	stopst		5200654	4					
ANR	5201571	Identifier	stopst		5200654	0					
ANR	5201572	Argument	lev		5200654	5					
ANR	5201573	Identifier	lev		5200654	0					
ANR	5201574	Argument	rec		5200654	6					
ANR	5201575	Identifier	rec		5200654	0					
ANR	5201576	IfStatement	if ( ! dp )		5200654	17					
ANR	5201577	Condition	! dp	650:6:17166:17168	5200654	0	True				
ANR	5201578	UnaryOperationExpression	! dp		5200654	0					
ANR	5201579	UnaryOperator	!		5200654	0					
ANR	5201580	Identifier	dp		5200654	1					
ANR	5201581	ReturnStatement	"return ( backref ( m , sp , stop , ss + 1 , stopst , lev - 1 , rec ) ) ;"	651:3:17174:17228	5200654	1	True				
ANR	5201582	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev - 1 , rec )"		5200654	0					
ANR	5201583	Callee	backref		5200654	0					
ANR	5201584	Identifier	backref		5200654	0					
ANR	5201585	ArgumentList	m		5200654	1					
ANR	5201586	Argument	m		5200654	0					
ANR	5201587	Identifier	m		5200654	0					
ANR	5201588	Argument	sp		5200654	1					
ANR	5201589	Identifier	sp		5200654	0					
ANR	5201590	Argument	stop		5200654	2					
ANR	5201591	Identifier	stop		5200654	0					
ANR	5201592	Argument	ss + 1		5200654	3					
ANR	5201593	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201594	Identifier	ss		5200654	0					
ANR	5201595	PrimaryExpression	1		5200654	1					
ANR	5201596	Argument	stopst		5200654	4					
ANR	5201597	Identifier	stopst		5200654	0					
ANR	5201598	Argument	lev - 1		5200654	5					
ANR	5201599	AdditiveExpression	lev - 1		5200654	0		-			
ANR	5201600	Identifier	lev		5200654	0					
ANR	5201601	PrimaryExpression	1		5200654	1					
ANR	5201602	Argument	rec		5200654	6					
ANR	5201603	Identifier	rec		5200654	0					
ANR	5201604	ElseStatement	else		5200654	0					
ANR	5201605	ReturnStatement	return ( dp ) ;	653:3:17240:17250	5200654	0	True				
ANR	5201606	Identifier	dp		5200654	0					
ANR	5201607	BreakStatement	break ;	654:2:17254:17259	5200654	18	True				
ANR	5201608	Label	case OCH_ :	655:1:17262:17271	5200654	19	True				
ANR	5201609	Identifier	OCH_		5200654	0					
ANR	5201610	ExpressionStatement	ssub = ss + 1	656:2:17309:17322	5200654	20	True				
ANR	5201611	AssignmentExpression	ssub = ss + 1		5200654	0		=			
ANR	5201612	Identifier	ssub		5200654	0					
ANR	5201613	AdditiveExpression	ss + 1		5200654	1		+			
ANR	5201614	Identifier	ss		5200654	0					
ANR	5201615	PrimaryExpression	1		5200654	1					
ANR	5201616	ExpressionStatement	esub = ss + OPND ( s ) - 1	657:2:17326:17349	5200654	21	True				
ANR	5201617	AssignmentExpression	esub = ss + OPND ( s ) - 1		5200654	0		=			
ANR	5201618	Identifier	esub		5200654	0					
ANR	5201619	AdditiveExpression	ss + OPND ( s ) - 1		5200654	1		+			
ANR	5201620	Identifier	ss		5200654	0					
ANR	5201621	AdditiveExpression	OPND ( s ) - 1		5200654	1		-			
ANR	5201622	CallExpression	OPND ( s )		5200654	0					
ANR	5201623	Callee	OPND		5200654	0					
ANR	5201624	Identifier	OPND		5200654	0					
ANR	5201625	ArgumentList	s		5200654	1					
ANR	5201626	Argument	s		5200654	0					
ANR	5201627	Identifier	s		5200654	0					
ANR	5201628	PrimaryExpression	1		5200654	1					
ANR	5201629	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) != OOR1 )		5200654	22					
ANR	5201630	Condition	OP ( m -> g -> strip [ esub ] ) != OOR1	658:6:17357:17385	5200654	0	True				
ANR	5201631	EqualityExpression	OP ( m -> g -> strip [ esub ] ) != OOR1		5200654	0		!=			
ANR	5201632	CallExpression	OP ( m -> g -> strip [ esub ] )		5200654	0					
ANR	5201633	Callee	OP		5200654	0					
ANR	5201634	Identifier	OP		5200654	0					
ANR	5201635	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201636	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201637	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201638	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201639	PtrMemberAccess	m -> g		5200654	0					
ANR	5201640	Identifier	m		5200654	0					
ANR	5201641	Identifier	g		5200654	1					
ANR	5201642	Identifier	strip		5200654	1					
ANR	5201643	Identifier	esub		5200654	1					
ANR	5201644	Identifier	OOR1		5200654	1					
ANR	5201645	CompoundStatement		150:37:3875:3875	5200654	1					
ANR	5201646	BreakStatement	break ;	659:3:17393:17398	5200654	0	True				
ANR	5201647	ForStatement	for ( ; ; )		5200654	23					
ANR	5201648	CompoundStatement		153:11:3902:3902	5200654	0					
ANR	5201649	ExpressionStatement	"dp = backref ( m , sp , stop , ssub , esub , lev , rec )"	662:3:17453:17500	5200654	0	True				
ANR	5201650	AssignmentExpression	"dp = backref ( m , sp , stop , ssub , esub , lev , rec )"		5200654	0		=			
ANR	5201651	Identifier	dp		5200654	0					
ANR	5201652	CallExpression	"backref ( m , sp , stop , ssub , esub , lev , rec )"		5200654	1					
ANR	5201653	Callee	backref		5200654	0					
ANR	5201654	Identifier	backref		5200654	0					
ANR	5201655	ArgumentList	m		5200654	1					
ANR	5201656	Argument	m		5200654	0					
ANR	5201657	Identifier	m		5200654	0					
ANR	5201658	Argument	sp		5200654	1					
ANR	5201659	Identifier	sp		5200654	0					
ANR	5201660	Argument	stop		5200654	2					
ANR	5201661	Identifier	stop		5200654	0					
ANR	5201662	Argument	ssub		5200654	3					
ANR	5201663	Identifier	ssub		5200654	0					
ANR	5201664	Argument	esub		5200654	4					
ANR	5201665	Identifier	esub		5200654	0					
ANR	5201666	Argument	lev		5200654	5					
ANR	5201667	Identifier	lev		5200654	0					
ANR	5201668	Argument	rec		5200654	6					
ANR	5201669	Identifier	rec		5200654	0					
ANR	5201670	IfStatement	if ( dp != NULL )		5200654	1					
ANR	5201671	Condition	dp != NULL	663:7:17509:17518	5200654	0	True				
ANR	5201672	EqualityExpression	dp != NULL		5200654	0		!=			
ANR	5201673	Identifier	dp		5200654	0					
ANR	5201674	Identifier	NULL		5200654	1					
ANR	5201675	ReturnStatement	return ( dp ) ;	664:4:17525:17535	5200654	1	True				
ANR	5201676	Identifier	dp		5200654	0					
ANR	5201677	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) == O_CH )		5200654	2					
ANR	5201678	Condition	OP ( m -> g -> strip [ esub ] ) == O_CH	666:7:17583:17611	5200654	0	True				
ANR	5201679	EqualityExpression	OP ( m -> g -> strip [ esub ] ) == O_CH		5200654	0		==			
ANR	5201680	CallExpression	OP ( m -> g -> strip [ esub ] )		5200654	0					
ANR	5201681	Callee	OP		5200654	0					
ANR	5201682	Identifier	OP		5200654	0					
ANR	5201683	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201684	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201685	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201686	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201687	PtrMemberAccess	m -> g		5200654	0					
ANR	5201688	Identifier	m		5200654	0					
ANR	5201689	Identifier	g		5200654	1					
ANR	5201690	Identifier	strip		5200654	1					
ANR	5201691	Identifier	esub		5200654	1					
ANR	5201692	Identifier	O_CH		5200654	1					
ANR	5201693	ReturnStatement	return ( NULL ) ;	667:4:17618:17630	5200654	1	True				
ANR	5201694	Identifier	NULL		5200654	0					
ANR	5201695	ExpressionStatement	esub ++	668:3:17655:17661	5200654	3	True				
ANR	5201696	PostIncDecOperationExpression	esub ++		5200654	0					
ANR	5201697	Identifier	esub		5200654	0					
ANR	5201698	IncDec	++		5200654	1					
ANR	5201699	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) != OOR2 )		5200654	4					
ANR	5201700	Condition	OP ( m -> g -> strip [ esub ] ) != OOR2	669:7:17670:17698	5200654	0	True				
ANR	5201701	EqualityExpression	OP ( m -> g -> strip [ esub ] ) != OOR2		5200654	0		!=			
ANR	5201702	CallExpression	OP ( m -> g -> strip [ esub ] )		5200654	0					
ANR	5201703	Callee	OP		5200654	0					
ANR	5201704	Identifier	OP		5200654	0					
ANR	5201705	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201706	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201707	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201708	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201709	PtrMemberAccess	m -> g		5200654	0					
ANR	5201710	Identifier	m		5200654	0					
ANR	5201711	Identifier	g		5200654	1					
ANR	5201712	Identifier	strip		5200654	1					
ANR	5201713	Identifier	esub		5200654	1					
ANR	5201714	Identifier	OOR2		5200654	1					
ANR	5201715	CompoundStatement		161:38:4188:4188	5200654	1					
ANR	5201716	BreakStatement	break ;	670:4:17707:17712	5200654	0	True				
ANR	5201717	ExpressionStatement	ssub = esub + 1	672:3:17722:17737	5200654	5	True				
ANR	5201718	AssignmentExpression	ssub = esub + 1		5200654	0		=			
ANR	5201719	Identifier	ssub		5200654	0					
ANR	5201720	AdditiveExpression	esub + 1		5200654	1		+			
ANR	5201721	Identifier	esub		5200654	0					
ANR	5201722	PrimaryExpression	1		5200654	1					
ANR	5201723	ExpressionStatement	esub += OPND ( m -> g -> strip [ esub ] )	673:3:17742:17773	5200654	6	True				
ANR	5201724	AssignmentExpression	esub += OPND ( m -> g -> strip [ esub ] )		5200654	0		+=			
ANR	5201725	Identifier	esub		5200654	0					
ANR	5201726	CallExpression	OPND ( m -> g -> strip [ esub ] )		5200654	1					
ANR	5201727	Callee	OPND		5200654	0					
ANR	5201728	Identifier	OPND		5200654	0					
ANR	5201729	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201730	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201731	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201732	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201733	PtrMemberAccess	m -> g		5200654	0					
ANR	5201734	Identifier	m		5200654	0					
ANR	5201735	Identifier	g		5200654	1					
ANR	5201736	Identifier	strip		5200654	1					
ANR	5201737	Identifier	esub		5200654	1					
ANR	5201738	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) == OOR2 )		5200654	7					
ANR	5201739	Condition	OP ( m -> g -> strip [ esub ] ) == OOR2	674:7:17782:17810	5200654	0	True				
ANR	5201740	EqualityExpression	OP ( m -> g -> strip [ esub ] ) == OOR2		5200654	0		==			
ANR	5201741	CallExpression	OP ( m -> g -> strip [ esub ] )		5200654	0					
ANR	5201742	Callee	OP		5200654	0					
ANR	5201743	Identifier	OP		5200654	0					
ANR	5201744	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201745	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201746	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201747	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201748	PtrMemberAccess	m -> g		5200654	0					
ANR	5201749	Identifier	m		5200654	0					
ANR	5201750	Identifier	g		5200654	1					
ANR	5201751	Identifier	strip		5200654	1					
ANR	5201752	Identifier	esub		5200654	1					
ANR	5201753	Identifier	OOR2		5200654	1					
ANR	5201754	ExpressionStatement	esub --	675:4:17817:17823	5200654	1	True				
ANR	5201755	PostIncDecOperationExpression	esub --		5200654	0					
ANR	5201756	Identifier	esub		5200654	0					
ANR	5201757	IncDec	--		5200654	1					
ANR	5201758	ElseStatement	else		5200654	0					
ANR	5201759	IfStatement	if ( OP ( m -> g -> strip [ esub ] ) != O_CH )		5200654	0					
ANR	5201760	Condition	OP ( m -> g -> strip [ esub ] ) != O_CH	677:8:17841:17869	5200654	0	True				
ANR	5201761	EqualityExpression	OP ( m -> g -> strip [ esub ] ) != O_CH		5200654	0		!=			
ANR	5201762	CallExpression	OP ( m -> g -> strip [ esub ] )		5200654	0					
ANR	5201763	Callee	OP		5200654	0					
ANR	5201764	Identifier	OP		5200654	0					
ANR	5201765	ArgumentList	m -> g -> strip [ esub ]		5200654	1					
ANR	5201766	Argument	m -> g -> strip [ esub ]		5200654	0					
ANR	5201767	ArrayIndexing	m -> g -> strip [ esub ]		5200654	0					
ANR	5201768	PtrMemberAccess	m -> g -> strip		5200654	0					
ANR	5201769	PtrMemberAccess	m -> g		5200654	0					
ANR	5201770	Identifier	m		5200654	0					
ANR	5201771	Identifier	g		5200654	1					
ANR	5201772	Identifier	strip		5200654	1					
ANR	5201773	Identifier	esub		5200654	1					
ANR	5201774	Identifier	O_CH		5200654	1					
ANR	5201775	CompoundStatement		169:39:4359:4359	5200654	1					
ANR	5201776	BreakStatement	break ;	678:5:17879:17884	5200654	0	True				
ANR	5201777	BreakStatement	break ;	681:2:17898:17903	5200654	24	True				
ANR	5201778	Label	case OLPAREN :	682:1:17906:17918	5200654	25	True				
ANR	5201779	Identifier	OLPAREN		5200654	0					
ANR	5201780	ExpressionStatement	i = OPND ( s )	683:2:17964:17975	5200654	26	True				
ANR	5201781	AssignmentExpression	i = OPND ( s )		5200654	0		=			
ANR	5201782	Identifier	i		5200654	0					
ANR	5201783	CallExpression	OPND ( s )		5200654	1					
ANR	5201784	Callee	OPND		5200654	0					
ANR	5201785	Identifier	OPND		5200654	0					
ANR	5201786	ArgumentList	s		5200654	1					
ANR	5201787	Argument	s		5200654	0					
ANR	5201788	Identifier	s		5200654	0					
ANR	5201789	IfStatement	if ( i > 0 && i <= m -> g -> nsub )		5200654	27					
ANR	5201790	Condition	i > 0 && i <= m -> g -> nsub	684:6:17983:18006	5200654	0	True				
ANR	5201791	AndExpression	i > 0 && i <= m -> g -> nsub		5200654	0		&&			
ANR	5201792	RelationalExpression	i > 0		5200654	0		>			
ANR	5201793	Identifier	i		5200654	0					
ANR	5201794	PrimaryExpression	0		5200654	1					
ANR	5201795	RelationalExpression	i <= m -> g -> nsub		5200654	1		<=			
ANR	5201796	Identifier	i		5200654	0					
ANR	5201797	PtrMemberAccess	m -> g -> nsub		5200654	1					
ANR	5201798	PtrMemberAccess	m -> g		5200654	0					
ANR	5201799	Identifier	m		5200654	0					
ANR	5201800	Identifier	g		5200654	1					
ANR	5201801	Identifier	nsub		5200654	1					
ANR	5201802	CompoundStatement		176:32:4496:4496	5200654	1					
ANR	5201803	ExpressionStatement	offsave = m -> pmatch [ i ] . rm_so	685:3:18014:18042	5200654	0	True				
ANR	5201804	AssignmentExpression	offsave = m -> pmatch [ i ] . rm_so		5200654	0		=			
ANR	5201805	Identifier	offsave		5200654	0					
ANR	5201806	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	1					
ANR	5201807	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201808	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201809	Identifier	m		5200654	0					
ANR	5201810	Identifier	pmatch		5200654	1					
ANR	5201811	Identifier	i		5200654	1					
ANR	5201812	Identifier	rm_so		5200654	1					
ANR	5201813	ExpressionStatement	m -> pmatch [ i ] . rm_so = sp - m -> offp	686:3:18047:18080	5200654	1	True				
ANR	5201814	AssignmentExpression	m -> pmatch [ i ] . rm_so = sp - m -> offp		5200654	0		=			
ANR	5201815	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	0					
ANR	5201816	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201817	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201818	Identifier	m		5200654	0					
ANR	5201819	Identifier	pmatch		5200654	1					
ANR	5201820	Identifier	i		5200654	1					
ANR	5201821	Identifier	rm_so		5200654	1					
ANR	5201822	AdditiveExpression	sp - m -> offp		5200654	1		-			
ANR	5201823	Identifier	sp		5200654	0					
ANR	5201824	PtrMemberAccess	m -> offp		5200654	1					
ANR	5201825	Identifier	m		5200654	0					
ANR	5201826	Identifier	offp		5200654	1					
ANR	5201827	ExpressionStatement	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"	687:3:18085:18134	5200654	2	True				
ANR	5201828	AssignmentExpression	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	0		=			
ANR	5201829	Identifier	dp		5200654	0					
ANR	5201830	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	1					
ANR	5201831	Callee	backref		5200654	0					
ANR	5201832	Identifier	backref		5200654	0					
ANR	5201833	ArgumentList	m		5200654	1					
ANR	5201834	Argument	m		5200654	0					
ANR	5201835	Identifier	m		5200654	0					
ANR	5201836	Argument	sp		5200654	1					
ANR	5201837	Identifier	sp		5200654	0					
ANR	5201838	Argument	stop		5200654	2					
ANR	5201839	Identifier	stop		5200654	0					
ANR	5201840	Argument	ss + 1		5200654	3					
ANR	5201841	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201842	Identifier	ss		5200654	0					
ANR	5201843	PrimaryExpression	1		5200654	1					
ANR	5201844	Argument	stopst		5200654	4					
ANR	5201845	Identifier	stopst		5200654	0					
ANR	5201846	Argument	lev		5200654	5					
ANR	5201847	Identifier	lev		5200654	0					
ANR	5201848	Argument	rec		5200654	6					
ANR	5201849	Identifier	rec		5200654	0					
ANR	5201850	IfStatement	if ( dp != NULL )		5200654	3					
ANR	5201851	Condition	dp != NULL	688:7:18143:18152	5200654	0	True				
ANR	5201852	EqualityExpression	dp != NULL		5200654	0		!=			
ANR	5201853	Identifier	dp		5200654	0					
ANR	5201854	Identifier	NULL		5200654	1					
ANR	5201855	ReturnStatement	return ( dp ) ;	689:4:18159:18169	5200654	1	True				
ANR	5201856	Identifier	dp		5200654	0					
ANR	5201857	ExpressionStatement	m -> pmatch [ i ] . rm_so = offsave	690:3:18174:18202	5200654	4	True				
ANR	5201858	AssignmentExpression	m -> pmatch [ i ] . rm_so = offsave		5200654	0		=			
ANR	5201859	MemberAccess	m -> pmatch [ i ] . rm_so		5200654	0					
ANR	5201860	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201861	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201862	Identifier	m		5200654	0					
ANR	5201863	Identifier	pmatch		5200654	1					
ANR	5201864	Identifier	i		5200654	1					
ANR	5201865	Identifier	rm_so		5200654	1					
ANR	5201866	Identifier	offsave		5200654	1					
ANR	5201867	ReturnStatement	return ( NULL ) ;	691:3:18207:18219	5200654	5	True				
ANR	5201868	Identifier	NULL		5200654	0					
ANR	5201869	BreakStatement	break ;	693:2:18227:18232	5200654	28	True				
ANR	5201870	Label	case ORPAREN :	694:1:18235:18247	5200654	29	True				
ANR	5201871	Identifier	ORPAREN		5200654	0					
ANR	5201872	ExpressionStatement	i = OPND ( s )	695:2:18293:18304	5200654	30	True				
ANR	5201873	AssignmentExpression	i = OPND ( s )		5200654	0		=			
ANR	5201874	Identifier	i		5200654	0					
ANR	5201875	CallExpression	OPND ( s )		5200654	1					
ANR	5201876	Callee	OPND		5200654	0					
ANR	5201877	Identifier	OPND		5200654	0					
ANR	5201878	ArgumentList	s		5200654	1					
ANR	5201879	Argument	s		5200654	0					
ANR	5201880	Identifier	s		5200654	0					
ANR	5201881	IfStatement	if ( i > 0 && i <= m -> g -> nsub )		5200654	31					
ANR	5201882	Condition	i > 0 && i <= m -> g -> nsub	696:6:18312:18335	5200654	0	True				
ANR	5201883	AndExpression	i > 0 && i <= m -> g -> nsub		5200654	0		&&			
ANR	5201884	RelationalExpression	i > 0		5200654	0		>			
ANR	5201885	Identifier	i		5200654	0					
ANR	5201886	PrimaryExpression	0		5200654	1					
ANR	5201887	RelationalExpression	i <= m -> g -> nsub		5200654	1		<=			
ANR	5201888	Identifier	i		5200654	0					
ANR	5201889	PtrMemberAccess	m -> g -> nsub		5200654	1					
ANR	5201890	PtrMemberAccess	m -> g		5200654	0					
ANR	5201891	Identifier	m		5200654	0					
ANR	5201892	Identifier	g		5200654	1					
ANR	5201893	Identifier	nsub		5200654	1					
ANR	5201894	CompoundStatement		188:32:4825:4825	5200654	1					
ANR	5201895	ExpressionStatement	offsave = m -> pmatch [ i ] . rm_eo	697:3:18343:18371	5200654	0	True				
ANR	5201896	AssignmentExpression	offsave = m -> pmatch [ i ] . rm_eo		5200654	0		=			
ANR	5201897	Identifier	offsave		5200654	0					
ANR	5201898	MemberAccess	m -> pmatch [ i ] . rm_eo		5200654	1					
ANR	5201899	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201900	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201901	Identifier	m		5200654	0					
ANR	5201902	Identifier	pmatch		5200654	1					
ANR	5201903	Identifier	i		5200654	1					
ANR	5201904	Identifier	rm_eo		5200654	1					
ANR	5201905	ExpressionStatement	m -> pmatch [ i ] . rm_eo = sp - m -> offp	698:3:18376:18409	5200654	1	True				
ANR	5201906	AssignmentExpression	m -> pmatch [ i ] . rm_eo = sp - m -> offp		5200654	0		=			
ANR	5201907	MemberAccess	m -> pmatch [ i ] . rm_eo		5200654	0					
ANR	5201908	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201909	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201910	Identifier	m		5200654	0					
ANR	5201911	Identifier	pmatch		5200654	1					
ANR	5201912	Identifier	i		5200654	1					
ANR	5201913	Identifier	rm_eo		5200654	1					
ANR	5201914	AdditiveExpression	sp - m -> offp		5200654	1		-			
ANR	5201915	Identifier	sp		5200654	0					
ANR	5201916	PtrMemberAccess	m -> offp		5200654	1					
ANR	5201917	Identifier	m		5200654	0					
ANR	5201918	Identifier	offp		5200654	1					
ANR	5201919	ExpressionStatement	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"	699:3:18414:18463	5200654	2	True				
ANR	5201920	AssignmentExpression	"dp = backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	0		=			
ANR	5201921	Identifier	dp		5200654	0					
ANR	5201922	CallExpression	"backref ( m , sp , stop , ss + 1 , stopst , lev , rec )"		5200654	1					
ANR	5201923	Callee	backref		5200654	0					
ANR	5201924	Identifier	backref		5200654	0					
ANR	5201925	ArgumentList	m		5200654	1					
ANR	5201926	Argument	m		5200654	0					
ANR	5201927	Identifier	m		5200654	0					
ANR	5201928	Argument	sp		5200654	1					
ANR	5201929	Identifier	sp		5200654	0					
ANR	5201930	Argument	stop		5200654	2					
ANR	5201931	Identifier	stop		5200654	0					
ANR	5201932	Argument	ss + 1		5200654	3					
ANR	5201933	AdditiveExpression	ss + 1		5200654	0		+			
ANR	5201934	Identifier	ss		5200654	0					
ANR	5201935	PrimaryExpression	1		5200654	1					
ANR	5201936	Argument	stopst		5200654	4					
ANR	5201937	Identifier	stopst		5200654	0					
ANR	5201938	Argument	lev		5200654	5					
ANR	5201939	Identifier	lev		5200654	0					
ANR	5201940	Argument	rec		5200654	6					
ANR	5201941	Identifier	rec		5200654	0					
ANR	5201942	IfStatement	if ( dp != NULL )		5200654	3					
ANR	5201943	Condition	dp != NULL	700:7:18472:18481	5200654	0	True				
ANR	5201944	EqualityExpression	dp != NULL		5200654	0		!=			
ANR	5201945	Identifier	dp		5200654	0					
ANR	5201946	Identifier	NULL		5200654	1					
ANR	5201947	ReturnStatement	return ( dp ) ;	701:4:18488:18498	5200654	1	True				
ANR	5201948	Identifier	dp		5200654	0					
ANR	5201949	ExpressionStatement	m -> pmatch [ i ] . rm_eo = offsave	702:3:18503:18531	5200654	4	True				
ANR	5201950	AssignmentExpression	m -> pmatch [ i ] . rm_eo = offsave		5200654	0		=			
ANR	5201951	MemberAccess	m -> pmatch [ i ] . rm_eo		5200654	0					
ANR	5201952	ArrayIndexing	m -> pmatch [ i ]		5200654	0					
ANR	5201953	PtrMemberAccess	m -> pmatch		5200654	0					
ANR	5201954	Identifier	m		5200654	0					
ANR	5201955	Identifier	pmatch		5200654	1					
ANR	5201956	Identifier	i		5200654	1					
ANR	5201957	Identifier	rm_eo		5200654	1					
ANR	5201958	Identifier	offsave		5200654	1					
ANR	5201959	ReturnStatement	return ( NULL ) ;	703:3:18536:18548	5200654	5	True				
ANR	5201960	Identifier	NULL		5200654	0					
ANR	5201961	BreakStatement	break ;	705:2:18556:18561	5200654	32	True				
ANR	5201962	Label	default :	706:1:18564:18571	5200654	33	True				
ANR	5201963	Identifier	default		5200654	0					
ANR	5201964	BreakStatement	break ;	707:2:18588:18593	5200654	34	True				
ANR	5201965	ReturnStatement	return NULL ;	711:1:18618:18629	5200654	21	True				
ANR	5201966	Identifier	NULL		5200654	0					
ANR	5201967	ReturnType	static char *		5200654	1					
ANR	5201968	Identifier	backref		5200654	2					
ANR	5201969	ParameterList	"struct match * m , char * start , char * stop , sopno startst , sopno stopst , sopno lev , int rec"		5200654	3					
ANR	5201970	Parameter	struct match * m	507:8:13390:13404	5200654	0	True				
ANR	5201971	ParameterType	struct match *		5200654	0					
ANR	5201972	Identifier	m		5200654	1					
ANR	5201973	Parameter	char * start	507:25:13407:13417	5200654	1	True				
ANR	5201974	ParameterType	char *		5200654	0					
ANR	5201975	Identifier	start		5200654	1					
ANR	5201976	Parameter	char * stop	507:38:13420:13429	5200654	2	True				
ANR	5201977	ParameterType	char *		5200654	0					
ANR	5201978	Identifier	stop		5200654	1					
ANR	5201979	Parameter	sopno startst	507:50:13432:13444	5200654	3	True				
ANR	5201980	ParameterType	sopno		5200654	0					
ANR	5201981	Identifier	startst		5200654	1					
ANR	5201982	Parameter	sopno stopst	507:65:13447:13458	5200654	4	True				
ANR	5201983	ParameterType	sopno		5200654	0					
ANR	5201984	Identifier	stopst		5200654	1					
ANR	5201985	Parameter	sopno lev	508:4:13465:13473	5200654	5	True				
ANR	5201986	ParameterType	sopno		5200654	0					
ANR	5201987	Identifier	lev		5200654	1					
ANR	5201988	Parameter	int rec	508:15:13476:13482	5200654	6	True				
ANR	5201989	ParameterType	int		5200654	0					
ANR	5201990	Identifier	rec		5200654	1					
ANR	5201991	CFGEntryNode	ENTRY		5200654		True				
ANR	5201992	CFGExitNode	EXIT		5200654		True				
ANR	5201993	InfiniteForNode	true		5200654		True				
ANR	5201994	Symbol	* sp		5200654						
ANR	5201995	Symbol	backref		5200654						
ANR	5201996	Symbol	m -> pmatch		5200654						
ANR	5201997	Symbol	* ss		5200654						
ANR	5201998	Symbol	R_REGEX_NOTBOL		5200654						
ANR	5201999	Symbol	m -> g -> nsub		5200654						
ANR	5202000	Symbol	* m -> lastpos		5200654						
ANR	5202001	Symbol	dp		5200654						
ANR	5202002	Symbol	rec		5200654						
ANR	5202003	Symbol	ssp		5200654						
ANR	5202004	Symbol	m -> eflags		5200654						
ANR	5202005	Symbol	* m -> g -> strip		5200654						
ANR	5202006	Symbol	memcmp		5200654						
ANR	5202007	Symbol	esub		5200654						
ANR	5202008	Symbol	len		5200654						
ANR	5202009	Symbol	lev		5200654						
ANR	5202010	Symbol	m -> pmatch [ i ] . rm_eo		5200654						
ANR	5202011	Symbol	NULL		5200654						
ANR	5202012	Symbol	m -> beginp		5200654						
ANR	5202013	Symbol	OOR2		5200654						
ANR	5202014	Symbol	startst		5200654						
ANR	5202015	Symbol	m -> lastpos		5200654						
ANR	5202016	Symbol	stop		5200654						
ANR	5202017	Symbol	* * * m		5200654						
ANR	5202018	Symbol	stopst		5200654						
ANR	5202019	Symbol	m -> offp		5200654						
ANR	5202020	Symbol	m -> g -> strip		5200654						
ANR	5202021	Symbol	R_REGEX_NEWLINE		5200654						
ANR	5202022	Symbol	m -> g -> cflags		5200654						
ANR	5202023	Symbol	R_REGEX_NOTEOL		5200654						
ANR	5202024	Symbol	* lev		5200654						
ANR	5202025	Symbol	m -> g -> sets		5200654						
ANR	5202026	Symbol	* m -> g		5200654						
ANR	5202027	Symbol	m -> endp		5200654						
ANR	5202028	Symbol	m -> pmatch [ i ] . rm_so		5200654						
ANR	5202029	Symbol	m -> g		5200654						
ANR	5202030	Symbol	CHIN		5200654						
ANR	5202031	Symbol	m -> g -> nplus		5200654						
ANR	5202032	Symbol	offsave		5200654						
ANR	5202033	Symbol	OOR1		5200654						
ANR	5202034	Symbol	ssub		5200654						
ANR	5202035	Symbol	hard		5200654						
ANR	5202036	Symbol	* * m -> g		5200654						
ANR	5202037	Symbol	sp		5200654						
ANR	5202038	Symbol	* m -> pmatch		5200654						
ANR	5202039	Symbol	* * m		5200654						
ANR	5202040	Symbol	ss		5200654						
ANR	5202041	Symbol	OP		5200654						
ANR	5202042	Symbol	* sp ++		5200654						
ANR	5202043	Symbol	start		5200654						
ANR	5202044	Symbol	i		5200654						
ANR	5202045	Symbol	m		5200654						
ANR	5202046	Symbol	* esub		5200654						
ANR	5202047	Symbol	cs		5200654						
ANR	5202048	Symbol	O_CH		5200654						
ANR	5202049	Symbol	MAX_RECURSION		5200654						
ANR	5202050	Symbol	OPND		5200654						
ANR	5202051	Symbol	s		5200654						
ANR	5202052	Symbol	* i		5200654						
ANR	5202053	Symbol	SOP		5200654						
ANR	5202054	Symbol	* m		5200654						
ANR	5202055	Symbol	ISWORD		5200654						
ANR	5202056	Symbol	* ( sp - 1 )		5200654						
ANR	5202057	Symbol	O_BACK		5200654						
ANR	5202058	Function	fast	717:0:18688:20699							
ANR	5202059	FunctionDef	"fast (struct match * m , char * start , char * stop , sopno startst , sopno stopst)"		5202058	0					
ANR	5202060	CompoundStatement		719:0:18823:20699	5202058	0					
ANR	5202061	IdentifierDeclStatement	states st = m -> st ;	720:1:18826:18843	5202058	0	True				
ANR	5202062	IdentifierDecl	st = m -> st		5202058	0					
ANR	5202063	IdentifierDeclType	states		5202058	0					
ANR	5202064	Identifier	st		5202058	1					
ANR	5202065	AssignmentExpression	st = m -> st		5202058	2		=			
ANR	5202066	Identifier	st		5202058	0					
ANR	5202067	PtrMemberAccess	m -> st		5202058	1					
ANR	5202068	Identifier	m		5202058	0					
ANR	5202069	Identifier	st		5202058	1					
ANR	5202070	IdentifierDeclStatement	states fresh = m -> fresh ;	721:1:18846:18869	5202058	1	True				
ANR	5202071	IdentifierDecl	fresh = m -> fresh		5202058	0					
ANR	5202072	IdentifierDeclType	states		5202058	0					
ANR	5202073	Identifier	fresh		5202058	1					
ANR	5202074	AssignmentExpression	fresh = m -> fresh		5202058	2		=			
ANR	5202075	Identifier	fresh		5202058	0					
ANR	5202076	PtrMemberAccess	m -> fresh		5202058	1					
ANR	5202077	Identifier	m		5202058	0					
ANR	5202078	Identifier	fresh		5202058	1					
ANR	5202079	IdentifierDeclStatement	states tmp = m -> tmp ;	722:1:18872:18891	5202058	2	True				
ANR	5202080	IdentifierDecl	tmp = m -> tmp		5202058	0					
ANR	5202081	IdentifierDeclType	states		5202058	0					
ANR	5202082	Identifier	tmp		5202058	1					
ANR	5202083	AssignmentExpression	tmp = m -> tmp		5202058	2		=			
ANR	5202084	Identifier	tmp		5202058	0					
ANR	5202085	PtrMemberAccess	m -> tmp		5202058	1					
ANR	5202086	Identifier	m		5202058	0					
ANR	5202087	Identifier	tmp		5202058	1					
ANR	5202088	IdentifierDeclStatement	char * p = start ;	723:1:18894:18909	5202058	3	True				
ANR	5202089	IdentifierDecl	* p = start		5202058	0					
ANR	5202090	IdentifierDeclType	char *		5202058	0					
ANR	5202091	Identifier	p		5202058	1					
ANR	5202092	AssignmentExpression	* p = start		5202058	2		=			
ANR	5202093	Identifier	start		5202058	0					
ANR	5202094	Identifier	start		5202058	1					
ANR	5202095	IdentifierDeclStatement	int c = ( start == m -> beginp ) ? OUT : * ( start - 1 ) ;	724:1:18912:18959	5202058	4	True				
ANR	5202096	IdentifierDecl	c = ( start == m -> beginp ) ? OUT : * ( start - 1 )		5202058	0					
ANR	5202097	IdentifierDeclType	int		5202058	0					
ANR	5202098	Identifier	c		5202058	1					
ANR	5202099	AssignmentExpression	c = ( start == m -> beginp ) ? OUT : * ( start - 1 )		5202058	2		=			
ANR	5202100	Identifier	c		5202058	0					
ANR	5202101	ConditionalExpression	( start == m -> beginp ) ? OUT : * ( start - 1 )		5202058	1					
ANR	5202102	Condition	start == m -> beginp		5202058	0					
ANR	5202103	EqualityExpression	start == m -> beginp		5202058	0		==			
ANR	5202104	Identifier	start		5202058	0					
ANR	5202105	PtrMemberAccess	m -> beginp		5202058	1					
ANR	5202106	Identifier	m		5202058	0					
ANR	5202107	Identifier	beginp		5202058	1					
ANR	5202108	Identifier	OUT		5202058	1					
ANR	5202109	UnaryOperationExpression	* ( start - 1 )		5202058	2					
ANR	5202110	UnaryOperator	*		5202058	0					
ANR	5202111	AdditiveExpression	start - 1		5202058	1		-			
ANR	5202112	Identifier	start		5202058	0					
ANR	5202113	PrimaryExpression	1		5202058	1					
ANR	5202114	IdentifierDeclStatement	int lastc ;	725:1:18962:18971	5202058	5	True				
ANR	5202115	IdentifierDecl	lastc		5202058	0					
ANR	5202116	IdentifierDeclType	int		5202058	0					
ANR	5202117	Identifier	lastc		5202058	1					
ANR	5202118	IdentifierDeclStatement	int flagch ;	726:1:18991:19001	5202058	6	True				
ANR	5202119	IdentifierDecl	flagch		5202058	0					
ANR	5202120	IdentifierDeclType	int		5202058	0					
ANR	5202121	Identifier	flagch		5202058	1					
ANR	5202122	IdentifierDeclStatement	int i ;	727:1:19004:19009	5202058	7	True				
ANR	5202123	IdentifierDecl	i		5202058	0					
ANR	5202124	IdentifierDeclType	int		5202058	0					
ANR	5202125	Identifier	i		5202058	1					
ANR	5202126	IdentifierDeclStatement	char * coldp ;	728:1:19012:19023	5202058	8	True				
ANR	5202127	IdentifierDecl	* coldp		5202058	0					
ANR	5202128	IdentifierDeclType	char *		5202058	0					
ANR	5202129	Identifier	coldp		5202058	1					
ANR	5202130	ExpressionStatement	CLEAR ( st )	730:1:19074:19083	5202058	9	True				
ANR	5202131	CallExpression	CLEAR ( st )		5202058	0					
ANR	5202132	Callee	CLEAR		5202058	0					
ANR	5202133	Identifier	CLEAR		5202058	0					
ANR	5202134	ArgumentList	st		5202058	1					
ANR	5202135	Argument	st		5202058	0					
ANR	5202136	Identifier	st		5202058	0					
ANR	5202137	ExpressionStatement	"SET1 ( st , startst )"	731:1:19086:19103	5202058	10	True				
ANR	5202138	CallExpression	"SET1 ( st , startst )"		5202058	0					
ANR	5202139	Callee	SET1		5202058	0					
ANR	5202140	Identifier	SET1		5202058	0					
ANR	5202141	ArgumentList	st		5202058	1					
ANR	5202142	Argument	st		5202058	0					
ANR	5202143	Identifier	st		5202058	0					
ANR	5202144	Argument	startst		5202058	1					
ANR	5202145	Identifier	startst		5202058	0					
ANR	5202146	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , NOTHING , st )"	732:1:19106:19155	5202058	11	True				
ANR	5202147	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , NOTHING , st )"		5202058	0		=			
ANR	5202148	Identifier	st		5202058	0					
ANR	5202149	CallExpression	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202058	1					
ANR	5202150	Callee	step		5202058	0					
ANR	5202151	Identifier	step		5202058	0					
ANR	5202152	ArgumentList	m -> g		5202058	1					
ANR	5202153	Argument	m -> g		5202058	0					
ANR	5202154	PtrMemberAccess	m -> g		5202058	0					
ANR	5202155	Identifier	m		5202058	0					
ANR	5202156	Identifier	g		5202058	1					
ANR	5202157	Argument	startst		5202058	1					
ANR	5202158	Identifier	startst		5202058	0					
ANR	5202159	Argument	stopst		5202058	2					
ANR	5202160	Identifier	stopst		5202058	0					
ANR	5202161	Argument	st		5202058	3					
ANR	5202162	Identifier	st		5202058	0					
ANR	5202163	Argument	NOTHING		5202058	4					
ANR	5202164	Identifier	NOTHING		5202058	0					
ANR	5202165	Argument	st		5202058	5					
ANR	5202166	Identifier	st		5202058	0					
ANR	5202167	ExpressionStatement	"ASSIGN ( fresh , st )"	733:1:19158:19175	5202058	12	True				
ANR	5202168	CallExpression	"ASSIGN ( fresh , st )"		5202058	0					
ANR	5202169	Callee	ASSIGN		5202058	0					
ANR	5202170	Identifier	ASSIGN		5202058	0					
ANR	5202171	ArgumentList	fresh		5202058	1					
ANR	5202172	Argument	fresh		5202058	0					
ANR	5202173	Identifier	fresh		5202058	0					
ANR	5202174	Argument	st		5202058	1					
ANR	5202175	Identifier	st		5202058	0					
ANR	5202176	ExpressionStatement	"SP ( ""start"" , st , * p )"	734:1:19178:19197	5202058	13	True				
ANR	5202177	CallExpression	"SP ( ""start"" , st , * p )"		5202058	0					
ANR	5202178	Callee	SP		5202058	0					
ANR	5202179	Identifier	SP		5202058	0					
ANR	5202180	ArgumentList	"""start"""		5202058	1					
ANR	5202181	Argument	"""start"""		5202058	0					
ANR	5202182	PrimaryExpression	"""start"""		5202058	0					
ANR	5202183	Argument	st		5202058	1					
ANR	5202184	Identifier	st		5202058	0					
ANR	5202185	Argument	* p		5202058	2					
ANR	5202186	UnaryOperationExpression	* p		5202058	0					
ANR	5202187	UnaryOperator	*		5202058	0					
ANR	5202188	Identifier	p		5202058	1					
ANR	5202189	ExpressionStatement	coldp = NULL	735:1:19200:19212	5202058	14	True				
ANR	5202190	AssignmentExpression	coldp = NULL		5202058	0		=			
ANR	5202191	Identifier	coldp		5202058	0					
ANR	5202192	Identifier	NULL		5202058	1					
ANR	5202193	ForStatement	for ( ; ; )		5202058	15					
ANR	5202194	CompoundStatement		18:10:400:400	5202058	0					
ANR	5202195	ExpressionStatement	lastc = c	738:2:19251:19260	5202058	0	True				
ANR	5202196	AssignmentExpression	lastc = c		5202058	0		=			
ANR	5202197	Identifier	lastc		5202058	0					
ANR	5202198	Identifier	c		5202058	1					
ANR	5202199	ExpressionStatement	c = ( p == m -> endp ) ? OUT : * p	739:2:19264:19293	5202058	1	True				
ANR	5202200	AssignmentExpression	c = ( p == m -> endp ) ? OUT : * p		5202058	0		=			
ANR	5202201	Identifier	c		5202058	0					
ANR	5202202	ConditionalExpression	( p == m -> endp ) ? OUT : * p		5202058	1					
ANR	5202203	Condition	p == m -> endp		5202058	0					
ANR	5202204	EqualityExpression	p == m -> endp		5202058	0		==			
ANR	5202205	Identifier	p		5202058	0					
ANR	5202206	PtrMemberAccess	m -> endp		5202058	1					
ANR	5202207	Identifier	m		5202058	0					
ANR	5202208	Identifier	endp		5202058	1					
ANR	5202209	Identifier	OUT		5202058	1					
ANR	5202210	UnaryOperationExpression	* p		5202058	2					
ANR	5202211	UnaryOperator	*		5202058	0					
ANR	5202212	Identifier	p		5202058	1					
ANR	5202213	IfStatement	if ( st == fresh )		5202058	2					
ANR	5202214	Condition	st == fresh	740:6:19301:19309	5202058	0	True				
ANR	5202215	EqualityExpression	st == fresh		5202058	0		==			
ANR	5202216	Identifier	st		5202058	0					
ANR	5202217	Identifier	fresh		5202058	1					
ANR	5202218	ExpressionStatement	coldp = p	741:3:19315:19324	5202058	1	True				
ANR	5202219	AssignmentExpression	coldp = p		5202058	0		=			
ANR	5202220	Identifier	coldp		5202058	0					
ANR	5202221	Identifier	p		5202058	1					
ANR	5202222	ExpressionStatement	flagch = '\\0'	744:2:19385:19398	5202058	3	True				
ANR	5202223	AssignmentExpression	flagch = '\\0'		5202058	0		=			
ANR	5202224	Identifier	flagch		5202058	0					
ANR	5202225	PrimaryExpression	'\\0'		5202058	1					
ANR	5202226	ExpressionStatement	i = 0	745:2:19402:19407	5202058	4	True				
ANR	5202227	AssignmentExpression	i = 0		5202058	0		=			
ANR	5202228	Identifier	i		5202058	0					
ANR	5202229	PrimaryExpression	0		5202058	1					
ANR	5202230	IfStatement	if ( ( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) ) )		5202058	5					
ANR	5202231	Condition	( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) )	746:7:19416:19515	5202058	0	True				
ANR	5202232	OrExpression	( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) )		5202058	0		||			
ANR	5202233	AndExpression	lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE		5202058	0		&&			
ANR	5202234	EqualityExpression	lastc == '\\n'		5202058	0		==			
ANR	5202235	Identifier	lastc		5202058	0					
ANR	5202236	PrimaryExpression	'\\n'		5202058	1					
ANR	5202237	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5202058	1		&			
ANR	5202238	PtrMemberAccess	m -> g -> cflags		5202058	0					
ANR	5202239	PtrMemberAccess	m -> g		5202058	0					
ANR	5202240	Identifier	m		5202058	0					
ANR	5202241	Identifier	g		5202058	1					
ANR	5202242	Identifier	cflags		5202058	1					
ANR	5202243	Identifier	R_REGEX_NEWLINE		5202058	1					
ANR	5202244	AndExpression	lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL )		5202058	1		&&			
ANR	5202245	EqualityExpression	lastc == OUT		5202058	0		==			
ANR	5202246	Identifier	lastc		5202058	0					
ANR	5202247	Identifier	OUT		5202058	1					
ANR	5202248	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTBOL )		5202058	1					
ANR	5202249	UnaryOperator	!		5202058	0					
ANR	5202250	BitAndExpression	m -> eflags & R_REGEX_NOTBOL		5202058	1		&			
ANR	5202251	PtrMemberAccess	m -> eflags		5202058	0					
ANR	5202252	Identifier	m		5202058	0					
ANR	5202253	Identifier	eflags		5202058	1					
ANR	5202254	Identifier	R_REGEX_NOTBOL		5202058	1					
ANR	5202255	CompoundStatement		29:52:695:695	5202058	1					
ANR	5202256	ExpressionStatement	flagch = BOL	748:3:19524:19536	5202058	0	True				
ANR	5202257	AssignmentExpression	flagch = BOL		5202058	0		=			
ANR	5202258	Identifier	flagch		5202058	0					
ANR	5202259	Identifier	BOL		5202058	1					
ANR	5202260	ExpressionStatement	i = m -> g -> nbol	749:3:19541:19555	5202058	1	True				
ANR	5202261	AssignmentExpression	i = m -> g -> nbol		5202058	0		=			
ANR	5202262	Identifier	i		5202058	0					
ANR	5202263	PtrMemberAccess	m -> g -> nbol		5202058	1					
ANR	5202264	PtrMemberAccess	m -> g		5202058	0					
ANR	5202265	Identifier	m		5202058	0					
ANR	5202266	Identifier	g		5202058	1					
ANR	5202267	Identifier	nbol		5202058	1					
ANR	5202268	IfStatement	if ( ( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) ) )		5202058	6					
ANR	5202269	Condition	( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) )	751:7:19568:19659	5202058	0	True				
ANR	5202270	OrExpression	( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) )		5202058	0		||			
ANR	5202271	AndExpression	c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE		5202058	0		&&			
ANR	5202272	EqualityExpression	c == '\\n'		5202058	0		==			
ANR	5202273	Identifier	c		5202058	0					
ANR	5202274	PrimaryExpression	'\\n'		5202058	1					
ANR	5202275	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5202058	1		&			
ANR	5202276	PtrMemberAccess	m -> g -> cflags		5202058	0					
ANR	5202277	PtrMemberAccess	m -> g		5202058	0					
ANR	5202278	Identifier	m		5202058	0					
ANR	5202279	Identifier	g		5202058	1					
ANR	5202280	Identifier	cflags		5202058	1					
ANR	5202281	Identifier	R_REGEX_NEWLINE		5202058	1					
ANR	5202282	AndExpression	c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL )		5202058	1		&&			
ANR	5202283	EqualityExpression	c == OUT		5202058	0		==			
ANR	5202284	Identifier	c		5202058	0					
ANR	5202285	Identifier	OUT		5202058	1					
ANR	5202286	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTEOL )		5202058	1					
ANR	5202287	UnaryOperator	!		5202058	0					
ANR	5202288	BitAndExpression	m -> eflags & R_REGEX_NOTEOL		5202058	1		&			
ANR	5202289	PtrMemberAccess	m -> eflags		5202058	0					
ANR	5202290	Identifier	m		5202058	0					
ANR	5202291	Identifier	eflags		5202058	1					
ANR	5202292	Identifier	R_REGEX_NOTEOL		5202058	1					
ANR	5202293	CompoundStatement		34:48:839:839	5202058	1					
ANR	5202294	ExpressionStatement	flagch = ( flagch == BOL ) ? BOLEOL : EOL	753:3:19668:19707	5202058	0	True				
ANR	5202295	AssignmentExpression	flagch = ( flagch == BOL ) ? BOLEOL : EOL		5202058	0		=			
ANR	5202296	Identifier	flagch		5202058	0					
ANR	5202297	ConditionalExpression	( flagch == BOL ) ? BOLEOL : EOL		5202058	1					
ANR	5202298	Condition	flagch == BOL		5202058	0					
ANR	5202299	EqualityExpression	flagch == BOL		5202058	0		==			
ANR	5202300	Identifier	flagch		5202058	0					
ANR	5202301	Identifier	BOL		5202058	1					
ANR	5202302	Identifier	BOLEOL		5202058	1					
ANR	5202303	Identifier	EOL		5202058	2					
ANR	5202304	ExpressionStatement	i += m -> g -> neol	754:3:19712:19727	5202058	1	True				
ANR	5202305	AssignmentExpression	i += m -> g -> neol		5202058	0		+=			
ANR	5202306	Identifier	i		5202058	0					
ANR	5202307	PtrMemberAccess	m -> g -> neol		5202058	1					
ANR	5202308	PtrMemberAccess	m -> g		5202058	0					
ANR	5202309	Identifier	m		5202058	0					
ANR	5202310	Identifier	g		5202058	1					
ANR	5202311	Identifier	neol		5202058	1					
ANR	5202312	IfStatement	if ( i != 0 )		5202058	7					
ANR	5202313	Condition	i != 0	756:6:19739:19744	5202058	0	True				
ANR	5202314	EqualityExpression	i != 0		5202058	0		!=			
ANR	5202315	Identifier	i		5202058	0					
ANR	5202316	PrimaryExpression	0		5202058	1					
ANR	5202317	CompoundStatement		38:14:923:923	5202058	1					
ANR	5202318	ForStatement	for ( ; i > 0 ; i -- )		5202058	0					
ANR	5202319	Condition	i > 0	757:10:19759:19763	5202058	0	True				
ANR	5202320	RelationalExpression	i > 0		5202058	0		>			
ANR	5202321	Identifier	i		5202058	0					
ANR	5202322	PrimaryExpression	0		5202058	1					
ANR	5202323	PostIncDecOperationExpression	i --	757:17:19766:19768	5202058	1	True				
ANR	5202324	Identifier	i		5202058	0					
ANR	5202325	IncDec	--		5202058	1					
ANR	5202326	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , flagch , st )"	758:4:19775:19823	5202058	2	True				
ANR	5202327	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , flagch , st )"		5202058	0		=			
ANR	5202328	Identifier	st		5202058	0					
ANR	5202329	CallExpression	"step ( m -> g , startst , stopst , st , flagch , st )"		5202058	1					
ANR	5202330	Callee	step		5202058	0					
ANR	5202331	Identifier	step		5202058	0					
ANR	5202332	ArgumentList	m -> g		5202058	1					
ANR	5202333	Argument	m -> g		5202058	0					
ANR	5202334	PtrMemberAccess	m -> g		5202058	0					
ANR	5202335	Identifier	m		5202058	0					
ANR	5202336	Identifier	g		5202058	1					
ANR	5202337	Argument	startst		5202058	1					
ANR	5202338	Identifier	startst		5202058	0					
ANR	5202339	Argument	stopst		5202058	2					
ANR	5202340	Identifier	stopst		5202058	0					
ANR	5202341	Argument	st		5202058	3					
ANR	5202342	Identifier	st		5202058	0					
ANR	5202343	Argument	flagch		5202058	4					
ANR	5202344	Identifier	flagch		5202058	0					
ANR	5202345	Argument	st		5202058	5					
ANR	5202346	Identifier	st		5202058	0					
ANR	5202347	ExpressionStatement	"SP ( ""boleol"" , st , c )"	759:3:19828:19847	5202058	1	True				
ANR	5202348	CallExpression	"SP ( ""boleol"" , st , c )"		5202058	0					
ANR	5202349	Callee	SP		5202058	0					
ANR	5202350	Identifier	SP		5202058	0					
ANR	5202351	ArgumentList	"""boleol"""		5202058	1					
ANR	5202352	Argument	"""boleol"""		5202058	0					
ANR	5202353	PrimaryExpression	"""boleol"""		5202058	0					
ANR	5202354	Argument	st		5202058	1					
ANR	5202355	Identifier	st		5202058	0					
ANR	5202356	Argument	c		5202058	2					
ANR	5202357	Identifier	c		5202058	0					
ANR	5202358	IfStatement	if ( ( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) ) )		5202058	8					
ANR	5202359	Condition	( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) )	763:7:19896:19978	5202058	0	True				
ANR	5202360	AndExpression	( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) )		5202058	0		&&			
ANR	5202361	OrExpression	flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) )		5202058	0		||			
ANR	5202362	EqualityExpression	flagch == BOL		5202058	0		==			
ANR	5202363	Identifier	flagch		5202058	0					
ANR	5202364	Identifier	BOL		5202058	1					
ANR	5202365	AndExpression	lastc != OUT && ! ISWORD ( lastc )		5202058	1		&&			
ANR	5202366	EqualityExpression	lastc != OUT		5202058	0		!=			
ANR	5202367	Identifier	lastc		5202058	0					
ANR	5202368	Identifier	OUT		5202058	1					
ANR	5202369	UnaryOperationExpression	! ISWORD ( lastc )		5202058	1					
ANR	5202370	UnaryOperator	!		5202058	0					
ANR	5202371	CallExpression	ISWORD ( lastc )		5202058	1					
ANR	5202372	Callee	ISWORD		5202058	0					
ANR	5202373	Identifier	ISWORD		5202058	0					
ANR	5202374	ArgumentList	lastc		5202058	1					
ANR	5202375	Argument	lastc		5202058	0					
ANR	5202376	Identifier	lastc		5202058	0					
ANR	5202377	AndExpression	c != OUT && ISWORD ( c )		5202058	1		&&			
ANR	5202378	EqualityExpression	c != OUT		5202058	0		!=			
ANR	5202379	Identifier	c		5202058	0					
ANR	5202380	Identifier	OUT		5202058	1					
ANR	5202381	CallExpression	ISWORD ( c )		5202058	1					
ANR	5202382	Callee	ISWORD		5202058	0					
ANR	5202383	Identifier	ISWORD		5202058	0					
ANR	5202384	ArgumentList	c		5202058	1					
ANR	5202385	Argument	c		5202058	0					
ANR	5202386	Identifier	c		5202058	0					
ANR	5202387	CompoundStatement		46:31:1158:1158	5202058	1					
ANR	5202388	ExpressionStatement	flagch = BOW	765:3:19987:19999	5202058	0	True				
ANR	5202389	AssignmentExpression	flagch = BOW		5202058	0		=			
ANR	5202390	Identifier	flagch		5202058	0					
ANR	5202391	Identifier	BOW		5202058	1					
ANR	5202392	IfStatement	if ( ( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) ) )		5202058	9					
ANR	5202393	Condition	( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) )	767:7:20012:20093	5202058	0	True				
ANR	5202394	AndExpression	( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) )		5202058	0		&&			
ANR	5202395	AndExpression	lastc != OUT && ISWORD ( lastc )		5202058	0		&&			
ANR	5202396	EqualityExpression	lastc != OUT		5202058	0		!=			
ANR	5202397	Identifier	lastc		5202058	0					
ANR	5202398	Identifier	OUT		5202058	1					
ANR	5202399	CallExpression	ISWORD ( lastc )		5202058	1					
ANR	5202400	Callee	ISWORD		5202058	0					
ANR	5202401	Identifier	ISWORD		5202058	0					
ANR	5202402	ArgumentList	lastc		5202058	1					
ANR	5202403	Argument	lastc		5202058	0					
ANR	5202404	Identifier	lastc		5202058	0					
ANR	5202405	OrExpression	flagch == EOL || ( c != OUT && ! ISWORD ( c ) )		5202058	1		||			
ANR	5202406	EqualityExpression	flagch == EOL		5202058	0		==			
ANR	5202407	Identifier	flagch		5202058	0					
ANR	5202408	Identifier	EOL		5202058	1					
ANR	5202409	AndExpression	c != OUT && ! ISWORD ( c )		5202058	1		&&			
ANR	5202410	EqualityExpression	c != OUT		5202058	0		!=			
ANR	5202411	Identifier	c		5202058	0					
ANR	5202412	Identifier	OUT		5202058	1					
ANR	5202413	UnaryOperationExpression	! ISWORD ( c )		5202058	1					
ANR	5202414	UnaryOperator	!		5202058	0					
ANR	5202415	CallExpression	ISWORD ( c )		5202058	1					
ANR	5202416	Callee	ISWORD		5202058	0					
ANR	5202417	Identifier	ISWORD		5202058	0					
ANR	5202418	ArgumentList	c		5202058	1					
ANR	5202419	Argument	c		5202058	0					
ANR	5202420	Identifier	c		5202058	0					
ANR	5202421	CompoundStatement		50:50:1273:1273	5202058	1					
ANR	5202422	ExpressionStatement	flagch = EOW	769:3:20102:20114	5202058	0	True				
ANR	5202423	AssignmentExpression	flagch = EOW		5202058	0		=			
ANR	5202424	Identifier	flagch		5202058	0					
ANR	5202425	Identifier	EOW		5202058	1					
ANR	5202426	IfStatement	if ( flagch == BOW || flagch == EOW )		5202058	10					
ANR	5202427	Condition	flagch == BOW || flagch == EOW	771:6:20126:20155	5202058	0	True				
ANR	5202428	OrExpression	flagch == BOW || flagch == EOW		5202058	0		||			
ANR	5202429	EqualityExpression	flagch == BOW		5202058	0		==			
ANR	5202430	Identifier	flagch		5202058	0					
ANR	5202431	Identifier	BOW		5202058	1					
ANR	5202432	EqualityExpression	flagch == EOW		5202058	1		==			
ANR	5202433	Identifier	flagch		5202058	0					
ANR	5202434	Identifier	EOW		5202058	1					
ANR	5202435	CompoundStatement		53:38:1334:1334	5202058	1					
ANR	5202436	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , flagch , st )"	772:3:20163:20211	5202058	0	True				
ANR	5202437	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , flagch , st )"		5202058	0		=			
ANR	5202438	Identifier	st		5202058	0					
ANR	5202439	CallExpression	"step ( m -> g , startst , stopst , st , flagch , st )"		5202058	1					
ANR	5202440	Callee	step		5202058	0					
ANR	5202441	Identifier	step		5202058	0					
ANR	5202442	ArgumentList	m -> g		5202058	1					
ANR	5202443	Argument	m -> g		5202058	0					
ANR	5202444	PtrMemberAccess	m -> g		5202058	0					
ANR	5202445	Identifier	m		5202058	0					
ANR	5202446	Identifier	g		5202058	1					
ANR	5202447	Argument	startst		5202058	1					
ANR	5202448	Identifier	startst		5202058	0					
ANR	5202449	Argument	stopst		5202058	2					
ANR	5202450	Identifier	stopst		5202058	0					
ANR	5202451	Argument	st		5202058	3					
ANR	5202452	Identifier	st		5202058	0					
ANR	5202453	Argument	flagch		5202058	4					
ANR	5202454	Identifier	flagch		5202058	0					
ANR	5202455	Argument	st		5202058	5					
ANR	5202456	Identifier	st		5202058	0					
ANR	5202457	ExpressionStatement	"SP ( ""boweow"" , st , c )"	773:3:20216:20235	5202058	1	True				
ANR	5202458	CallExpression	"SP ( ""boweow"" , st , c )"		5202058	0					
ANR	5202459	Callee	SP		5202058	0					
ANR	5202460	Identifier	SP		5202058	0					
ANR	5202461	ArgumentList	"""boweow"""		5202058	1					
ANR	5202462	Argument	"""boweow"""		5202058	0					
ANR	5202463	PrimaryExpression	"""boweow"""		5202058	0					
ANR	5202464	Argument	st		5202058	1					
ANR	5202465	Identifier	st		5202058	0					
ANR	5202466	Argument	c		5202058	2					
ANR	5202467	Identifier	c		5202058	0					
ANR	5202468	IfStatement	"if ( ISSET ( st , stopst ) || p == stop )"		5202058	11					
ANR	5202469	Condition	"ISSET ( st , stopst ) || p == stop"	777:6:20269:20298	5202058	0	True				
ANR	5202470	OrExpression	"ISSET ( st , stopst ) || p == stop"		5202058	0		||			
ANR	5202471	CallExpression	"ISSET ( st , stopst )"		5202058	0					
ANR	5202472	Callee	ISSET		5202058	0					
ANR	5202473	Identifier	ISSET		5202058	0					
ANR	5202474	ArgumentList	st		5202058	1					
ANR	5202475	Argument	st		5202058	0					
ANR	5202476	Identifier	st		5202058	0					
ANR	5202477	Argument	stopst		5202058	1					
ANR	5202478	Identifier	stopst		5202058	0					
ANR	5202479	EqualityExpression	p == stop		5202058	1		==			
ANR	5202480	Identifier	p		5202058	0					
ANR	5202481	Identifier	stop		5202058	1					
ANR	5202482	BreakStatement	break ;	778:3:20304:20309	5202058	1	True				
ANR	5202483	ExpressionStatement	"ASSIGN ( tmp , st )"	781:2:20381:20396	5202058	12	True				
ANR	5202484	CallExpression	"ASSIGN ( tmp , st )"		5202058	0					
ANR	5202485	Callee	ASSIGN		5202058	0					
ANR	5202486	Identifier	ASSIGN		5202058	0					
ANR	5202487	ArgumentList	tmp		5202058	1					
ANR	5202488	Argument	tmp		5202058	0					
ANR	5202489	Identifier	tmp		5202058	0					
ANR	5202490	Argument	st		5202058	1					
ANR	5202491	Identifier	st		5202058	0					
ANR	5202492	ExpressionStatement	"ASSIGN ( st , fresh )"	782:2:20400:20417	5202058	13	True				
ANR	5202493	CallExpression	"ASSIGN ( st , fresh )"		5202058	0					
ANR	5202494	Callee	ASSIGN		5202058	0					
ANR	5202495	Identifier	ASSIGN		5202058	0					
ANR	5202496	ArgumentList	st		5202058	1					
ANR	5202497	Argument	st		5202058	0					
ANR	5202498	Identifier	st		5202058	0					
ANR	5202499	Argument	fresh		5202058	1					
ANR	5202500	Identifier	fresh		5202058	0					
ANR	5202501	IfStatement	if ( c == OUT )		5202058	14					
ANR	5202502	Condition	c == OUT	783:6:20425:20432	5202058	0	True				
ANR	5202503	EqualityExpression	c == OUT		5202058	0		==			
ANR	5202504	Identifier	c		5202058	0					
ANR	5202505	Identifier	OUT		5202058	1					
ANR	5202506	CompoundStatement		65:16:1611:1611	5202058	1					
ANR	5202507	BreakStatement	break ;	784:3:20440:20445	5202058	0	True				
ANR	5202508	ExpressionStatement	"st = step ( m -> g , startst , stopst , tmp , c , st )"	786:2:20453:20497	5202058	15	True				
ANR	5202509	AssignmentExpression	"st = step ( m -> g , startst , stopst , tmp , c , st )"		5202058	0		=			
ANR	5202510	Identifier	st		5202058	0					
ANR	5202511	CallExpression	"step ( m -> g , startst , stopst , tmp , c , st )"		5202058	1					
ANR	5202512	Callee	step		5202058	0					
ANR	5202513	Identifier	step		5202058	0					
ANR	5202514	ArgumentList	m -> g		5202058	1					
ANR	5202515	Argument	m -> g		5202058	0					
ANR	5202516	PtrMemberAccess	m -> g		5202058	0					
ANR	5202517	Identifier	m		5202058	0					
ANR	5202518	Identifier	g		5202058	1					
ANR	5202519	Argument	startst		5202058	1					
ANR	5202520	Identifier	startst		5202058	0					
ANR	5202521	Argument	stopst		5202058	2					
ANR	5202522	Identifier	stopst		5202058	0					
ANR	5202523	Argument	tmp		5202058	3					
ANR	5202524	Identifier	tmp		5202058	0					
ANR	5202525	Argument	c		5202058	4					
ANR	5202526	Identifier	c		5202058	0					
ANR	5202527	Argument	st		5202058	5					
ANR	5202528	Identifier	st		5202058	0					
ANR	5202529	ExpressionStatement	"SP ( ""aft"" , st , c )"	787:2:20501:20517	5202058	16	True				
ANR	5202530	CallExpression	"SP ( ""aft"" , st , c )"		5202058	0					
ANR	5202531	Callee	SP		5202058	0					
ANR	5202532	Identifier	SP		5202058	0					
ANR	5202533	ArgumentList	"""aft"""		5202058	1					
ANR	5202534	Argument	"""aft"""		5202058	0					
ANR	5202535	PrimaryExpression	"""aft"""		5202058	0					
ANR	5202536	Argument	st		5202058	1					
ANR	5202537	Identifier	st		5202058	0					
ANR	5202538	Argument	c		5202058	2					
ANR	5202539	Identifier	c		5202058	0					
ANR	5202540	IfStatement	"if ( ! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st ) )"		5202058	17					
ANR	5202541	Condition	"! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"	788:6:20525:20577	5202058	0	True				
ANR	5202542	UnaryOperationExpression	"! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"		5202058	0					
ANR	5202543	UnaryOperator	!		5202058	0					
ANR	5202544	CallExpression	"EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"		5202058	1					
ANR	5202545	Callee	EQ		5202058	0					
ANR	5202546	Identifier	EQ		5202058	0					
ANR	5202547	ArgumentList	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202058	1					
ANR	5202548	Argument	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202058	0					
ANR	5202549	CallExpression	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202058	0					
ANR	5202550	Callee	step		5202058	0					
ANR	5202551	Identifier	step		5202058	0					
ANR	5202552	ArgumentList	m -> g		5202058	1					
ANR	5202553	Argument	m -> g		5202058	0					
ANR	5202554	PtrMemberAccess	m -> g		5202058	0					
ANR	5202555	Identifier	m		5202058	0					
ANR	5202556	Identifier	g		5202058	1					
ANR	5202557	Argument	startst		5202058	1					
ANR	5202558	Identifier	startst		5202058	0					
ANR	5202559	Argument	stopst		5202058	2					
ANR	5202560	Identifier	stopst		5202058	0					
ANR	5202561	Argument	st		5202058	3					
ANR	5202562	Identifier	st		5202058	0					
ANR	5202563	Argument	NOTHING		5202058	4					
ANR	5202564	Identifier	NOTHING		5202058	0					
ANR	5202565	Argument	st		5202058	5					
ANR	5202566	Identifier	st		5202058	0					
ANR	5202567	Argument	st		5202058	1					
ANR	5202568	Identifier	st		5202058	0					
ANR	5202569	CompoundStatement		70:61:1756:1756	5202058	1					
ANR	5202570	BreakStatement	break ;	789:3:20585:20590	5202058	0	True				
ANR	5202571	ExpressionStatement	p ++	791:2:20598:20601	5202058	18	True				
ANR	5202572	PostIncDecOperationExpression	p ++		5202058	0					
ANR	5202573	Identifier	p		5202058	0					
ANR	5202574	IncDec	++		5202058	1					
ANR	5202575	IfStatement	if ( coldp )		5202058	16					
ANR	5202576	Condition	coldp	794:5:20612:20616	5202058	0	True				
ANR	5202577	Identifier	coldp		5202058	0					
ANR	5202578	CompoundStatement		76:12:1795:1795	5202058	1					
ANR	5202579	ExpressionStatement	m -> coldp = coldp	795:2:20623:20639	5202058	0	True				
ANR	5202580	AssignmentExpression	m -> coldp = coldp		5202058	0		=			
ANR	5202581	PtrMemberAccess	m -> coldp		5202058	0					
ANR	5202582	Identifier	m		5202058	0					
ANR	5202583	Identifier	coldp		5202058	1					
ANR	5202584	Identifier	coldp		5202058	1					
ANR	5202585	IfStatement	"if ( ISSET ( st , stopst ) )"		5202058	1					
ANR	5202586	Condition	"ISSET ( st , stopst )"	796:6:20647:20663	5202058	0	True				
ANR	5202587	CallExpression	"ISSET ( st , stopst )"		5202058	0					
ANR	5202588	Callee	ISSET		5202058	0					
ANR	5202589	Identifier	ISSET		5202058	0					
ANR	5202590	ArgumentList	st		5202058	1					
ANR	5202591	Argument	st		5202058	0					
ANR	5202592	Identifier	st		5202058	0					
ANR	5202593	Argument	stopst		5202058	1					
ANR	5202594	Identifier	stopst		5202058	0					
ANR	5202595	ReturnStatement	return ( p + 1 ) ;	797:3:20669:20680	5202058	1	True				
ANR	5202596	AdditiveExpression	p + 1		5202058	0		+			
ANR	5202597	Identifier	p		5202058	0					
ANR	5202598	PrimaryExpression	1		5202058	1					
ANR	5202599	ReturnStatement	return NULL ;	799:1:20686:20697	5202058	17	True				
ANR	5202600	Identifier	NULL		5202058	0					
ANR	5202601	ReturnType	static char *		5202058	1					
ANR	5202602	Identifier	fast		5202058	2					
ANR	5202603	ParameterList	"struct match * m , char * start , char * stop , sopno startst , sopno stopst"		5202058	3					
ANR	5202604	Parameter	struct match * m	718:5:18752:18766	5202058	0	True				
ANR	5202605	ParameterType	struct match *		5202058	0					
ANR	5202606	Identifier	m		5202058	1					
ANR	5202607	Parameter	char * start	718:22:18769:18779	5202058	1	True				
ANR	5202608	ParameterType	char *		5202058	0					
ANR	5202609	Identifier	start		5202058	1					
ANR	5202610	Parameter	char * stop	718:35:18782:18791	5202058	2	True				
ANR	5202611	ParameterType	char *		5202058	0					
ANR	5202612	Identifier	stop		5202058	1					
ANR	5202613	Parameter	sopno startst	718:47:18794:18806	5202058	3	True				
ANR	5202614	ParameterType	sopno		5202058	0					
ANR	5202615	Identifier	startst		5202058	1					
ANR	5202616	Parameter	sopno stopst	718:62:18809:18820	5202058	4	True				
ANR	5202617	ParameterType	sopno		5202058	0					
ANR	5202618	Identifier	stopst		5202058	1					
ANR	5202619	CFGEntryNode	ENTRY		5202058		True				
ANR	5202620	CFGExitNode	EXIT		5202058		True				
ANR	5202621	InfiniteForNode	true		5202058		True				
ANR	5202622	Symbol	m -> g -> cflags		5202058						
ANR	5202623	Symbol	R_REGEX_NOTEOL		5202058						
ANR	5202624	Symbol	m -> st		5202058						
ANR	5202625	Symbol	R_REGEX_NOTBOL		5202058						
ANR	5202626	Symbol	* start		5202058						
ANR	5202627	Symbol	m -> fresh		5202058						
ANR	5202628	Symbol	m -> g -> neol		5202058						
ANR	5202629	Symbol	* ( start - 1 )		5202058						
ANR	5202630	Symbol	m -> g -> nbol		5202058						
ANR	5202631	Symbol	m -> tmp		5202058						
ANR	5202632	Symbol	* m -> g		5202058						
ANR	5202633	Symbol	m -> endp		5202058						
ANR	5202634	Symbol	m -> eflags		5202058						
ANR	5202635	Symbol	lastc		5202058						
ANR	5202636	Symbol	m -> g		5202058						
ANR	5202637	Symbol	tmp		5202058						
ANR	5202638	Symbol	NOTHING		5202058						
ANR	5202639	Symbol	m -> coldp		5202058						
ANR	5202640	Symbol	* * m		5202058						
ANR	5202641	Symbol	BOL		5202058						
ANR	5202642	Symbol	st		5202058						
ANR	5202643	Symbol	m -> beginp		5202058						
ANR	5202644	Symbol	c		5202058						
ANR	5202645	Symbol	NULL		5202058						
ANR	5202646	Symbol	EOL		5202058						
ANR	5202647	Symbol	start		5202058						
ANR	5202648	Symbol	startst		5202058						
ANR	5202649	Symbol	i		5202058						
ANR	5202650	Symbol	coldp		5202058						
ANR	5202651	Symbol	BOW		5202058						
ANR	5202652	Symbol	EOW		5202058						
ANR	5202653	Symbol	EQ		5202058						
ANR	5202654	Symbol	m		5202058						
ANR	5202655	Symbol	OUT		5202058						
ANR	5202656	Symbol	p		5202058						
ANR	5202657	Symbol	ISSET		5202058						
ANR	5202658	Symbol	stop		5202058						
ANR	5202659	Symbol	stopst		5202058						
ANR	5202660	Symbol	* m		5202058						
ANR	5202661	Symbol	ISWORD		5202058						
ANR	5202662	Symbol	step		5202058						
ANR	5202663	Symbol	* p		5202058						
ANR	5202664	Symbol	fresh		5202058						
ANR	5202665	Symbol	flagch		5202058						
ANR	5202666	Symbol	R_REGEX_NEWLINE		5202058						
ANR	5202667	Symbol	BOLEOL		5202058						
ANR	5202668	Function	slow	805:0:20761:22698							
ANR	5202669	FunctionDef	"slow (struct match * m , char * start , char * stop , sopno startst , sopno stopst)"		5202668	0					
ANR	5202670	CompoundStatement		807:0:20874:22698	5202668	0					
ANR	5202671	IdentifierDeclStatement	states st = m -> st ;	808:1:20877:20894	5202668	0	True				
ANR	5202672	IdentifierDecl	st = m -> st		5202668	0					
ANR	5202673	IdentifierDeclType	states		5202668	0					
ANR	5202674	Identifier	st		5202668	1					
ANR	5202675	AssignmentExpression	st = m -> st		5202668	2		=			
ANR	5202676	Identifier	st		5202668	0					
ANR	5202677	PtrMemberAccess	m -> st		5202668	1					
ANR	5202678	Identifier	m		5202668	0					
ANR	5202679	Identifier	st		5202668	1					
ANR	5202680	IdentifierDeclStatement	states empty = m -> empty ;	809:1:20897:20920	5202668	1	True				
ANR	5202681	IdentifierDecl	empty = m -> empty		5202668	0					
ANR	5202682	IdentifierDeclType	states		5202668	0					
ANR	5202683	Identifier	empty		5202668	1					
ANR	5202684	AssignmentExpression	empty = m -> empty		5202668	2		=			
ANR	5202685	Identifier	empty		5202668	0					
ANR	5202686	PtrMemberAccess	m -> empty		5202668	1					
ANR	5202687	Identifier	m		5202668	0					
ANR	5202688	Identifier	empty		5202668	1					
ANR	5202689	IdentifierDeclStatement	states tmp = m -> tmp ;	810:1:20923:20942	5202668	2	True				
ANR	5202690	IdentifierDecl	tmp = m -> tmp		5202668	0					
ANR	5202691	IdentifierDeclType	states		5202668	0					
ANR	5202692	Identifier	tmp		5202668	1					
ANR	5202693	AssignmentExpression	tmp = m -> tmp		5202668	2		=			
ANR	5202694	Identifier	tmp		5202668	0					
ANR	5202695	PtrMemberAccess	m -> tmp		5202668	1					
ANR	5202696	Identifier	m		5202668	0					
ANR	5202697	Identifier	tmp		5202668	1					
ANR	5202698	IdentifierDeclStatement	char * p = start ;	811:1:20945:20960	5202668	3	True				
ANR	5202699	IdentifierDecl	* p = start		5202668	0					
ANR	5202700	IdentifierDeclType	char *		5202668	0					
ANR	5202701	Identifier	p		5202668	1					
ANR	5202702	AssignmentExpression	* p = start		5202668	2		=			
ANR	5202703	Identifier	start		5202668	0					
ANR	5202704	Identifier	start		5202668	1					
ANR	5202705	IdentifierDeclStatement	int c = ( start == m -> beginp ) ? OUT : * ( start - 1 ) ;	812:1:20963:21010	5202668	4	True				
ANR	5202706	IdentifierDecl	c = ( start == m -> beginp ) ? OUT : * ( start - 1 )		5202668	0					
ANR	5202707	IdentifierDeclType	int		5202668	0					
ANR	5202708	Identifier	c		5202668	1					
ANR	5202709	AssignmentExpression	c = ( start == m -> beginp ) ? OUT : * ( start - 1 )		5202668	2		=			
ANR	5202710	Identifier	c		5202668	0					
ANR	5202711	ConditionalExpression	( start == m -> beginp ) ? OUT : * ( start - 1 )		5202668	1					
ANR	5202712	Condition	start == m -> beginp		5202668	0					
ANR	5202713	EqualityExpression	start == m -> beginp		5202668	0		==			
ANR	5202714	Identifier	start		5202668	0					
ANR	5202715	PtrMemberAccess	m -> beginp		5202668	1					
ANR	5202716	Identifier	m		5202668	0					
ANR	5202717	Identifier	beginp		5202668	1					
ANR	5202718	Identifier	OUT		5202668	1					
ANR	5202719	UnaryOperationExpression	* ( start - 1 )		5202668	2					
ANR	5202720	UnaryOperator	*		5202668	0					
ANR	5202721	AdditiveExpression	start - 1		5202668	1		-			
ANR	5202722	Identifier	start		5202668	0					
ANR	5202723	PrimaryExpression	1		5202668	1					
ANR	5202724	IdentifierDeclStatement	int lastc ;	813:1:21013:21022	5202668	5	True				
ANR	5202725	IdentifierDecl	lastc		5202668	0					
ANR	5202726	IdentifierDeclType	int		5202668	0					
ANR	5202727	Identifier	lastc		5202668	1					
ANR	5202728	IdentifierDeclStatement	int flagch ;	814:1:21042:21052	5202668	6	True				
ANR	5202729	IdentifierDecl	flagch		5202668	0					
ANR	5202730	IdentifierDeclType	int		5202668	0					
ANR	5202731	Identifier	flagch		5202668	1					
ANR	5202732	IdentifierDeclStatement	int i ;	815:1:21055:21060	5202668	7	True				
ANR	5202733	IdentifierDecl	i		5202668	0					
ANR	5202734	IdentifierDeclType	int		5202668	0					
ANR	5202735	Identifier	i		5202668	1					
ANR	5202736	IdentifierDeclStatement	char * matchp ;	816:1:21063:21075	5202668	8	True				
ANR	5202737	IdentifierDecl	* matchp		5202668	0					
ANR	5202738	IdentifierDeclType	char *		5202668	0					
ANR	5202739	Identifier	matchp		5202668	1					
ANR	5202740	ExpressionStatement	"AT ( ""slow"" , start , stop , startst , stopst )"	818:1:21115:21155	5202668	9	True				
ANR	5202741	CallExpression	"AT ( ""slow"" , start , stop , startst , stopst )"		5202668	0					
ANR	5202742	Callee	AT		5202668	0					
ANR	5202743	Identifier	AT		5202668	0					
ANR	5202744	ArgumentList	"""slow"""		5202668	1					
ANR	5202745	Argument	"""slow"""		5202668	0					
ANR	5202746	PrimaryExpression	"""slow"""		5202668	0					
ANR	5202747	Argument	start		5202668	1					
ANR	5202748	Identifier	start		5202668	0					
ANR	5202749	Argument	stop		5202668	2					
ANR	5202750	Identifier	stop		5202668	0					
ANR	5202751	Argument	startst		5202668	3					
ANR	5202752	Identifier	startst		5202668	0					
ANR	5202753	Argument	stopst		5202668	4					
ANR	5202754	Identifier	stopst		5202668	0					
ANR	5202755	ExpressionStatement	CLEAR ( st )	819:1:21158:21167	5202668	10	True				
ANR	5202756	CallExpression	CLEAR ( st )		5202668	0					
ANR	5202757	Callee	CLEAR		5202668	0					
ANR	5202758	Identifier	CLEAR		5202668	0					
ANR	5202759	ArgumentList	st		5202668	1					
ANR	5202760	Argument	st		5202668	0					
ANR	5202761	Identifier	st		5202668	0					
ANR	5202762	ExpressionStatement	"SET1 ( st , startst )"	820:1:21170:21187	5202668	11	True				
ANR	5202763	CallExpression	"SET1 ( st , startst )"		5202668	0					
ANR	5202764	Callee	SET1		5202668	0					
ANR	5202765	Identifier	SET1		5202668	0					
ANR	5202766	ArgumentList	st		5202668	1					
ANR	5202767	Argument	st		5202668	0					
ANR	5202768	Identifier	st		5202668	0					
ANR	5202769	Argument	startst		5202668	1					
ANR	5202770	Identifier	startst		5202668	0					
ANR	5202771	ExpressionStatement	"SP ( ""sstart"" , st , * p )"	821:1:21190:21210	5202668	12	True				
ANR	5202772	CallExpression	"SP ( ""sstart"" , st , * p )"		5202668	0					
ANR	5202773	Callee	SP		5202668	0					
ANR	5202774	Identifier	SP		5202668	0					
ANR	5202775	ArgumentList	"""sstart"""		5202668	1					
ANR	5202776	Argument	"""sstart"""		5202668	0					
ANR	5202777	PrimaryExpression	"""sstart"""		5202668	0					
ANR	5202778	Argument	st		5202668	1					
ANR	5202779	Identifier	st		5202668	0					
ANR	5202780	Argument	* p		5202668	2					
ANR	5202781	UnaryOperationExpression	* p		5202668	0					
ANR	5202782	UnaryOperator	*		5202668	0					
ANR	5202783	Identifier	p		5202668	1					
ANR	5202784	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , NOTHING , st )"	822:1:21213:21262	5202668	13	True				
ANR	5202785	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , NOTHING , st )"		5202668	0		=			
ANR	5202786	Identifier	st		5202668	0					
ANR	5202787	CallExpression	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202668	1					
ANR	5202788	Callee	step		5202668	0					
ANR	5202789	Identifier	step		5202668	0					
ANR	5202790	ArgumentList	m -> g		5202668	1					
ANR	5202791	Argument	m -> g		5202668	0					
ANR	5202792	PtrMemberAccess	m -> g		5202668	0					
ANR	5202793	Identifier	m		5202668	0					
ANR	5202794	Identifier	g		5202668	1					
ANR	5202795	Argument	startst		5202668	1					
ANR	5202796	Identifier	startst		5202668	0					
ANR	5202797	Argument	stopst		5202668	2					
ANR	5202798	Identifier	stopst		5202668	0					
ANR	5202799	Argument	st		5202668	3					
ANR	5202800	Identifier	st		5202668	0					
ANR	5202801	Argument	NOTHING		5202668	4					
ANR	5202802	Identifier	NOTHING		5202668	0					
ANR	5202803	Argument	st		5202668	5					
ANR	5202804	Identifier	st		5202668	0					
ANR	5202805	ExpressionStatement	matchp = NULL	823:1:21265:21278	5202668	14	True				
ANR	5202806	AssignmentExpression	matchp = NULL		5202668	0		=			
ANR	5202807	Identifier	matchp		5202668	0					
ANR	5202808	Identifier	NULL		5202668	1					
ANR	5202809	ForStatement	for ( ; ; )		5202668	15					
ANR	5202810	CompoundStatement		18:10:415:415	5202668	0					
ANR	5202811	ExpressionStatement	lastc = c	826:2:21317:21326	5202668	0	True				
ANR	5202812	AssignmentExpression	lastc = c		5202668	0		=			
ANR	5202813	Identifier	lastc		5202668	0					
ANR	5202814	Identifier	c		5202668	1					
ANR	5202815	ExpressionStatement	c = ( p == m -> endp ) ? OUT : * p	827:2:21330:21359	5202668	1	True				
ANR	5202816	AssignmentExpression	c = ( p == m -> endp ) ? OUT : * p		5202668	0		=			
ANR	5202817	Identifier	c		5202668	0					
ANR	5202818	ConditionalExpression	( p == m -> endp ) ? OUT : * p		5202668	1					
ANR	5202819	Condition	p == m -> endp		5202668	0					
ANR	5202820	EqualityExpression	p == m -> endp		5202668	0		==			
ANR	5202821	Identifier	p		5202668	0					
ANR	5202822	PtrMemberAccess	m -> endp		5202668	1					
ANR	5202823	Identifier	m		5202668	0					
ANR	5202824	Identifier	endp		5202668	1					
ANR	5202825	Identifier	OUT		5202668	1					
ANR	5202826	UnaryOperationExpression	* p		5202668	2					
ANR	5202827	UnaryOperator	*		5202668	0					
ANR	5202828	Identifier	p		5202668	1					
ANR	5202829	ExpressionStatement	flagch = '\\0'	830:2:21420:21433	5202668	2	True				
ANR	5202830	AssignmentExpression	flagch = '\\0'		5202668	0		=			
ANR	5202831	Identifier	flagch		5202668	0					
ANR	5202832	PrimaryExpression	'\\0'		5202668	1					
ANR	5202833	ExpressionStatement	i = 0	831:2:21437:21442	5202668	3	True				
ANR	5202834	AssignmentExpression	i = 0		5202668	0		=			
ANR	5202835	Identifier	i		5202668	0					
ANR	5202836	PrimaryExpression	0		5202668	1					
ANR	5202837	IfStatement	if ( ( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) ) )		5202668	4					
ANR	5202838	Condition	( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) )	832:7:21451:21550	5202668	0	True				
ANR	5202839	OrExpression	( lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL ) )		5202668	0		||			
ANR	5202840	AndExpression	lastc == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE		5202668	0		&&			
ANR	5202841	EqualityExpression	lastc == '\\n'		5202668	0		==			
ANR	5202842	Identifier	lastc		5202668	0					
ANR	5202843	PrimaryExpression	'\\n'		5202668	1					
ANR	5202844	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5202668	1		&			
ANR	5202845	PtrMemberAccess	m -> g -> cflags		5202668	0					
ANR	5202846	PtrMemberAccess	m -> g		5202668	0					
ANR	5202847	Identifier	m		5202668	0					
ANR	5202848	Identifier	g		5202668	1					
ANR	5202849	Identifier	cflags		5202668	1					
ANR	5202850	Identifier	R_REGEX_NEWLINE		5202668	1					
ANR	5202851	AndExpression	lastc == OUT && ! ( m -> eflags & R_REGEX_NOTBOL )		5202668	1		&&			
ANR	5202852	EqualityExpression	lastc == OUT		5202668	0		==			
ANR	5202853	Identifier	lastc		5202668	0					
ANR	5202854	Identifier	OUT		5202668	1					
ANR	5202855	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTBOL )		5202668	1					
ANR	5202856	UnaryOperator	!		5202668	0					
ANR	5202857	BitAndExpression	m -> eflags & R_REGEX_NOTBOL		5202668	1		&			
ANR	5202858	PtrMemberAccess	m -> eflags		5202668	0					
ANR	5202859	Identifier	m		5202668	0					
ANR	5202860	Identifier	eflags		5202668	1					
ANR	5202861	Identifier	R_REGEX_NOTBOL		5202668	1					
ANR	5202862	CompoundStatement		27:52:679:679	5202668	1					
ANR	5202863	ExpressionStatement	flagch = BOL	834:3:21559:21571	5202668	0	True				
ANR	5202864	AssignmentExpression	flagch = BOL		5202668	0		=			
ANR	5202865	Identifier	flagch		5202668	0					
ANR	5202866	Identifier	BOL		5202668	1					
ANR	5202867	ExpressionStatement	i = m -> g -> nbol	835:3:21576:21590	5202668	1	True				
ANR	5202868	AssignmentExpression	i = m -> g -> nbol		5202668	0		=			
ANR	5202869	Identifier	i		5202668	0					
ANR	5202870	PtrMemberAccess	m -> g -> nbol		5202668	1					
ANR	5202871	PtrMemberAccess	m -> g		5202668	0					
ANR	5202872	Identifier	m		5202668	0					
ANR	5202873	Identifier	g		5202668	1					
ANR	5202874	Identifier	nbol		5202668	1					
ANR	5202875	IfStatement	if ( ( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) ) )		5202668	5					
ANR	5202876	Condition	( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) )	837:7:21603:21694	5202668	0	True				
ANR	5202877	OrExpression	( c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE ) || ( c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL ) )		5202668	0		||			
ANR	5202878	AndExpression	c == '\\n' && m -> g -> cflags & R_REGEX_NEWLINE		5202668	0		&&			
ANR	5202879	EqualityExpression	c == '\\n'		5202668	0		==			
ANR	5202880	Identifier	c		5202668	0					
ANR	5202881	PrimaryExpression	'\\n'		5202668	1					
ANR	5202882	BitAndExpression	m -> g -> cflags & R_REGEX_NEWLINE		5202668	1		&			
ANR	5202883	PtrMemberAccess	m -> g -> cflags		5202668	0					
ANR	5202884	PtrMemberAccess	m -> g		5202668	0					
ANR	5202885	Identifier	m		5202668	0					
ANR	5202886	Identifier	g		5202668	1					
ANR	5202887	Identifier	cflags		5202668	1					
ANR	5202888	Identifier	R_REGEX_NEWLINE		5202668	1					
ANR	5202889	AndExpression	c == OUT && ! ( m -> eflags & R_REGEX_NOTEOL )		5202668	1		&&			
ANR	5202890	EqualityExpression	c == OUT		5202668	0		==			
ANR	5202891	Identifier	c		5202668	0					
ANR	5202892	Identifier	OUT		5202668	1					
ANR	5202893	UnaryOperationExpression	! ( m -> eflags & R_REGEX_NOTEOL )		5202668	1					
ANR	5202894	UnaryOperator	!		5202668	0					
ANR	5202895	BitAndExpression	m -> eflags & R_REGEX_NOTEOL		5202668	1		&			
ANR	5202896	PtrMemberAccess	m -> eflags		5202668	0					
ANR	5202897	Identifier	m		5202668	0					
ANR	5202898	Identifier	eflags		5202668	1					
ANR	5202899	Identifier	R_REGEX_NOTEOL		5202668	1					
ANR	5202900	CompoundStatement		32:48:823:823	5202668	1					
ANR	5202901	ExpressionStatement	flagch = ( flagch == BOL ) ? BOLEOL : EOL	839:3:21703:21742	5202668	0	True				
ANR	5202902	AssignmentExpression	flagch = ( flagch == BOL ) ? BOLEOL : EOL		5202668	0		=			
ANR	5202903	Identifier	flagch		5202668	0					
ANR	5202904	ConditionalExpression	( flagch == BOL ) ? BOLEOL : EOL		5202668	1					
ANR	5202905	Condition	flagch == BOL		5202668	0					
ANR	5202906	EqualityExpression	flagch == BOL		5202668	0		==			
ANR	5202907	Identifier	flagch		5202668	0					
ANR	5202908	Identifier	BOL		5202668	1					
ANR	5202909	Identifier	BOLEOL		5202668	1					
ANR	5202910	Identifier	EOL		5202668	2					
ANR	5202911	ExpressionStatement	i += m -> g -> neol	840:3:21747:21762	5202668	1	True				
ANR	5202912	AssignmentExpression	i += m -> g -> neol		5202668	0		+=			
ANR	5202913	Identifier	i		5202668	0					
ANR	5202914	PtrMemberAccess	m -> g -> neol		5202668	1					
ANR	5202915	PtrMemberAccess	m -> g		5202668	0					
ANR	5202916	Identifier	m		5202668	0					
ANR	5202917	Identifier	g		5202668	1					
ANR	5202918	Identifier	neol		5202668	1					
ANR	5202919	IfStatement	if ( i != 0 )		5202668	6					
ANR	5202920	Condition	i != 0	842:6:21774:21779	5202668	0	True				
ANR	5202921	EqualityExpression	i != 0		5202668	0		!=			
ANR	5202922	Identifier	i		5202668	0					
ANR	5202923	PrimaryExpression	0		5202668	1					
ANR	5202924	CompoundStatement		36:14:907:907	5202668	1					
ANR	5202925	ForStatement	for ( ; i > 0 ; i -- )		5202668	0					
ANR	5202926	Condition	i > 0	843:10:21794:21798	5202668	0	True				
ANR	5202927	RelationalExpression	i > 0		5202668	0		>			
ANR	5202928	Identifier	i		5202668	0					
ANR	5202929	PrimaryExpression	0		5202668	1					
ANR	5202930	PostIncDecOperationExpression	i --	843:17:21801:21803	5202668	1	True				
ANR	5202931	Identifier	i		5202668	0					
ANR	5202932	IncDec	--		5202668	1					
ANR	5202933	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , flagch , st )"	844:4:21810:21858	5202668	2	True				
ANR	5202934	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , flagch , st )"		5202668	0		=			
ANR	5202935	Identifier	st		5202668	0					
ANR	5202936	CallExpression	"step ( m -> g , startst , stopst , st , flagch , st )"		5202668	1					
ANR	5202937	Callee	step		5202668	0					
ANR	5202938	Identifier	step		5202668	0					
ANR	5202939	ArgumentList	m -> g		5202668	1					
ANR	5202940	Argument	m -> g		5202668	0					
ANR	5202941	PtrMemberAccess	m -> g		5202668	0					
ANR	5202942	Identifier	m		5202668	0					
ANR	5202943	Identifier	g		5202668	1					
ANR	5202944	Argument	startst		5202668	1					
ANR	5202945	Identifier	startst		5202668	0					
ANR	5202946	Argument	stopst		5202668	2					
ANR	5202947	Identifier	stopst		5202668	0					
ANR	5202948	Argument	st		5202668	3					
ANR	5202949	Identifier	st		5202668	0					
ANR	5202950	Argument	flagch		5202668	4					
ANR	5202951	Identifier	flagch		5202668	0					
ANR	5202952	Argument	st		5202668	5					
ANR	5202953	Identifier	st		5202668	0					
ANR	5202954	ExpressionStatement	"SP ( ""sboleol"" , st , c )"	845:3:21863:21883	5202668	1	True				
ANR	5202955	CallExpression	"SP ( ""sboleol"" , st , c )"		5202668	0					
ANR	5202956	Callee	SP		5202668	0					
ANR	5202957	Identifier	SP		5202668	0					
ANR	5202958	ArgumentList	"""sboleol"""		5202668	1					
ANR	5202959	Argument	"""sboleol"""		5202668	0					
ANR	5202960	PrimaryExpression	"""sboleol"""		5202668	0					
ANR	5202961	Argument	st		5202668	1					
ANR	5202962	Identifier	st		5202668	0					
ANR	5202963	Argument	c		5202668	2					
ANR	5202964	Identifier	c		5202668	0					
ANR	5202965	IfStatement	if ( ( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) ) )		5202668	7					
ANR	5202966	Condition	( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) )	849:7:21932:22014	5202668	0	True				
ANR	5202967	AndExpression	( flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) ) ) && ( c != OUT && ISWORD ( c ) )		5202668	0		&&			
ANR	5202968	OrExpression	flagch == BOL || ( lastc != OUT && ! ISWORD ( lastc ) )		5202668	0		||			
ANR	5202969	EqualityExpression	flagch == BOL		5202668	0		==			
ANR	5202970	Identifier	flagch		5202668	0					
ANR	5202971	Identifier	BOL		5202668	1					
ANR	5202972	AndExpression	lastc != OUT && ! ISWORD ( lastc )		5202668	1		&&			
ANR	5202973	EqualityExpression	lastc != OUT		5202668	0		!=			
ANR	5202974	Identifier	lastc		5202668	0					
ANR	5202975	Identifier	OUT		5202668	1					
ANR	5202976	UnaryOperationExpression	! ISWORD ( lastc )		5202668	1					
ANR	5202977	UnaryOperator	!		5202668	0					
ANR	5202978	CallExpression	ISWORD ( lastc )		5202668	1					
ANR	5202979	Callee	ISWORD		5202668	0					
ANR	5202980	Identifier	ISWORD		5202668	0					
ANR	5202981	ArgumentList	lastc		5202668	1					
ANR	5202982	Argument	lastc		5202668	0					
ANR	5202983	Identifier	lastc		5202668	0					
ANR	5202984	AndExpression	c != OUT && ISWORD ( c )		5202668	1		&&			
ANR	5202985	EqualityExpression	c != OUT		5202668	0		!=			
ANR	5202986	Identifier	c		5202668	0					
ANR	5202987	Identifier	OUT		5202668	1					
ANR	5202988	CallExpression	ISWORD ( c )		5202668	1					
ANR	5202989	Callee	ISWORD		5202668	0					
ANR	5202990	Identifier	ISWORD		5202668	0					
ANR	5202991	ArgumentList	c		5202668	1					
ANR	5202992	Argument	c		5202668	0					
ANR	5202993	Identifier	c		5202668	0					
ANR	5202994	CompoundStatement		44:31:1143:1143	5202668	1					
ANR	5202995	ExpressionStatement	flagch = BOW	851:3:22023:22035	5202668	0	True				
ANR	5202996	AssignmentExpression	flagch = BOW		5202668	0		=			
ANR	5202997	Identifier	flagch		5202668	0					
ANR	5202998	Identifier	BOW		5202668	1					
ANR	5202999	IfStatement	if ( ( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) ) )		5202668	8					
ANR	5203000	Condition	( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) )	853:7:22048:22129	5202668	0	True				
ANR	5203001	AndExpression	( lastc != OUT && ISWORD ( lastc ) ) && ( flagch == EOL || ( c != OUT && ! ISWORD ( c ) ) )		5202668	0		&&			
ANR	5203002	AndExpression	lastc != OUT && ISWORD ( lastc )		5202668	0		&&			
ANR	5203003	EqualityExpression	lastc != OUT		5202668	0		!=			
ANR	5203004	Identifier	lastc		5202668	0					
ANR	5203005	Identifier	OUT		5202668	1					
ANR	5203006	CallExpression	ISWORD ( lastc )		5202668	1					
ANR	5203007	Callee	ISWORD		5202668	0					
ANR	5203008	Identifier	ISWORD		5202668	0					
ANR	5203009	ArgumentList	lastc		5202668	1					
ANR	5203010	Argument	lastc		5202668	0					
ANR	5203011	Identifier	lastc		5202668	0					
ANR	5203012	OrExpression	flagch == EOL || ( c != OUT && ! ISWORD ( c ) )		5202668	1		||			
ANR	5203013	EqualityExpression	flagch == EOL		5202668	0		==			
ANR	5203014	Identifier	flagch		5202668	0					
ANR	5203015	Identifier	EOL		5202668	1					
ANR	5203016	AndExpression	c != OUT && ! ISWORD ( c )		5202668	1		&&			
ANR	5203017	EqualityExpression	c != OUT		5202668	0		!=			
ANR	5203018	Identifier	c		5202668	0					
ANR	5203019	Identifier	OUT		5202668	1					
ANR	5203020	UnaryOperationExpression	! ISWORD ( c )		5202668	1					
ANR	5203021	UnaryOperator	!		5202668	0					
ANR	5203022	CallExpression	ISWORD ( c )		5202668	1					
ANR	5203023	Callee	ISWORD		5202668	0					
ANR	5203024	Identifier	ISWORD		5202668	0					
ANR	5203025	ArgumentList	c		5202668	1					
ANR	5203026	Argument	c		5202668	0					
ANR	5203027	Identifier	c		5202668	0					
ANR	5203028	CompoundStatement		48:50:1258:1258	5202668	1					
ANR	5203029	ExpressionStatement	flagch = EOW	855:3:22138:22150	5202668	0	True				
ANR	5203030	AssignmentExpression	flagch = EOW		5202668	0		=			
ANR	5203031	Identifier	flagch		5202668	0					
ANR	5203032	Identifier	EOW		5202668	1					
ANR	5203033	IfStatement	if ( flagch == BOW || flagch == EOW )		5202668	9					
ANR	5203034	Condition	flagch == BOW || flagch == EOW	857:6:22162:22191	5202668	0	True				
ANR	5203035	OrExpression	flagch == BOW || flagch == EOW		5202668	0		||			
ANR	5203036	EqualityExpression	flagch == BOW		5202668	0		==			
ANR	5203037	Identifier	flagch		5202668	0					
ANR	5203038	Identifier	BOW		5202668	1					
ANR	5203039	EqualityExpression	flagch == EOW		5202668	1		==			
ANR	5203040	Identifier	flagch		5202668	0					
ANR	5203041	Identifier	EOW		5202668	1					
ANR	5203042	CompoundStatement		51:38:1319:1319	5202668	1					
ANR	5203043	ExpressionStatement	"st = step ( m -> g , startst , stopst , st , flagch , st )"	858:3:22199:22247	5202668	0	True				
ANR	5203044	AssignmentExpression	"st = step ( m -> g , startst , stopst , st , flagch , st )"		5202668	0		=			
ANR	5203045	Identifier	st		5202668	0					
ANR	5203046	CallExpression	"step ( m -> g , startst , stopst , st , flagch , st )"		5202668	1					
ANR	5203047	Callee	step		5202668	0					
ANR	5203048	Identifier	step		5202668	0					
ANR	5203049	ArgumentList	m -> g		5202668	1					
ANR	5203050	Argument	m -> g		5202668	0					
ANR	5203051	PtrMemberAccess	m -> g		5202668	0					
ANR	5203052	Identifier	m		5202668	0					
ANR	5203053	Identifier	g		5202668	1					
ANR	5203054	Argument	startst		5202668	1					
ANR	5203055	Identifier	startst		5202668	0					
ANR	5203056	Argument	stopst		5202668	2					
ANR	5203057	Identifier	stopst		5202668	0					
ANR	5203058	Argument	st		5202668	3					
ANR	5203059	Identifier	st		5202668	0					
ANR	5203060	Argument	flagch		5202668	4					
ANR	5203061	Identifier	flagch		5202668	0					
ANR	5203062	Argument	st		5202668	5					
ANR	5203063	Identifier	st		5202668	0					
ANR	5203064	ExpressionStatement	"SP ( ""sboweow"" , st , c )"	859:3:22252:22272	5202668	1	True				
ANR	5203065	CallExpression	"SP ( ""sboweow"" , st , c )"		5202668	0					
ANR	5203066	Callee	SP		5202668	0					
ANR	5203067	Identifier	SP		5202668	0					
ANR	5203068	ArgumentList	"""sboweow"""		5202668	1					
ANR	5203069	Argument	"""sboweow"""		5202668	0					
ANR	5203070	PrimaryExpression	"""sboweow"""		5202668	0					
ANR	5203071	Argument	st		5202668	1					
ANR	5203072	Identifier	st		5202668	0					
ANR	5203073	Argument	c		5202668	2					
ANR	5203074	Identifier	c		5202668	0					
ANR	5203075	IfStatement	"if ( ISSET ( st , stopst ) )"		5202668	10					
ANR	5203076	Condition	"ISSET ( st , stopst )"	863:6:22306:22322	5202668	0	True				
ANR	5203077	CallExpression	"ISSET ( st , stopst )"		5202668	0					
ANR	5203078	Callee	ISSET		5202668	0					
ANR	5203079	Identifier	ISSET		5202668	0					
ANR	5203080	ArgumentList	st		5202668	1					
ANR	5203081	Argument	st		5202668	0					
ANR	5203082	Identifier	st		5202668	0					
ANR	5203083	Argument	stopst		5202668	1					
ANR	5203084	Identifier	stopst		5202668	0					
ANR	5203085	ExpressionStatement	matchp = p	864:3:22328:22338	5202668	1	True				
ANR	5203086	AssignmentExpression	matchp = p		5202668	0		=			
ANR	5203087	Identifier	matchp		5202668	0					
ANR	5203088	Identifier	p		5202668	1					
ANR	5203089	IfStatement	"if ( EQ ( st , empty ) || p == stop )"		5202668	11					
ANR	5203090	Condition	"EQ ( st , empty ) || p == stop"	865:6:22346:22371	5202668	0	True				
ANR	5203091	OrExpression	"EQ ( st , empty ) || p == stop"		5202668	0		||			
ANR	5203092	CallExpression	"EQ ( st , empty )"		5202668	0					
ANR	5203093	Callee	EQ		5202668	0					
ANR	5203094	Identifier	EQ		5202668	0					
ANR	5203095	ArgumentList	st		5202668	1					
ANR	5203096	Argument	st		5202668	0					
ANR	5203097	Identifier	st		5202668	0					
ANR	5203098	Argument	empty		5202668	1					
ANR	5203099	Identifier	empty		5202668	0					
ANR	5203100	EqualityExpression	p == stop		5202668	1		==			
ANR	5203101	Identifier	p		5202668	0					
ANR	5203102	Identifier	stop		5202668	1					
ANR	5203103	BreakStatement	break ;	866:3:22377:22382	5202668	1	True				
ANR	5203104	ExpressionStatement	"ASSIGN ( tmp , st )"	869:2:22454:22469	5202668	12	True				
ANR	5203105	CallExpression	"ASSIGN ( tmp , st )"		5202668	0					
ANR	5203106	Callee	ASSIGN		5202668	0					
ANR	5203107	Identifier	ASSIGN		5202668	0					
ANR	5203108	ArgumentList	tmp		5202668	1					
ANR	5203109	Argument	tmp		5202668	0					
ANR	5203110	Identifier	tmp		5202668	0					
ANR	5203111	Argument	st		5202668	1					
ANR	5203112	Identifier	st		5202668	0					
ANR	5203113	ExpressionStatement	"ASSIGN ( st , empty )"	870:2:22473:22490	5202668	13	True				
ANR	5203114	CallExpression	"ASSIGN ( st , empty )"		5202668	0					
ANR	5203115	Callee	ASSIGN		5202668	0					
ANR	5203116	Identifier	ASSIGN		5202668	0					
ANR	5203117	ArgumentList	st		5202668	1					
ANR	5203118	Argument	st		5202668	0					
ANR	5203119	Identifier	st		5202668	0					
ANR	5203120	Argument	empty		5202668	1					
ANR	5203121	Identifier	empty		5202668	0					
ANR	5203122	IfStatement	if ( c == OUT )		5202668	14					
ANR	5203123	Condition	c == OUT	871:6:22498:22505	5202668	0	True				
ANR	5203124	EqualityExpression	c == OUT		5202668	0		==			
ANR	5203125	Identifier	c		5202668	0					
ANR	5203126	Identifier	OUT		5202668	1					
ANR	5203127	CompoundStatement		65:16:1633:1633	5202668	1					
ANR	5203128	BreakStatement	break ;	872:3:22513:22518	5202668	0	True				
ANR	5203129	ExpressionStatement	"st = step ( m -> g , startst , stopst , tmp , c , st )"	874:2:22526:22570	5202668	15	True				
ANR	5203130	AssignmentExpression	"st = step ( m -> g , startst , stopst , tmp , c , st )"		5202668	0		=			
ANR	5203131	Identifier	st		5202668	0					
ANR	5203132	CallExpression	"step ( m -> g , startst , stopst , tmp , c , st )"		5202668	1					
ANR	5203133	Callee	step		5202668	0					
ANR	5203134	Identifier	step		5202668	0					
ANR	5203135	ArgumentList	m -> g		5202668	1					
ANR	5203136	Argument	m -> g		5202668	0					
ANR	5203137	PtrMemberAccess	m -> g		5202668	0					
ANR	5203138	Identifier	m		5202668	0					
ANR	5203139	Identifier	g		5202668	1					
ANR	5203140	Argument	startst		5202668	1					
ANR	5203141	Identifier	startst		5202668	0					
ANR	5203142	Argument	stopst		5202668	2					
ANR	5203143	Identifier	stopst		5202668	0					
ANR	5203144	Argument	tmp		5202668	3					
ANR	5203145	Identifier	tmp		5202668	0					
ANR	5203146	Argument	c		5202668	4					
ANR	5203147	Identifier	c		5202668	0					
ANR	5203148	Argument	st		5202668	5					
ANR	5203149	Identifier	st		5202668	0					
ANR	5203150	ExpressionStatement	"SP ( ""saft"" , st , c )"	875:2:22574:22591	5202668	16	True				
ANR	5203151	CallExpression	"SP ( ""saft"" , st , c )"		5202668	0					
ANR	5203152	Callee	SP		5202668	0					
ANR	5203153	Identifier	SP		5202668	0					
ANR	5203154	ArgumentList	"""saft"""		5202668	1					
ANR	5203155	Argument	"""saft"""		5202668	0					
ANR	5203156	PrimaryExpression	"""saft"""		5202668	0					
ANR	5203157	Argument	st		5202668	1					
ANR	5203158	Identifier	st		5202668	0					
ANR	5203159	Argument	c		5202668	2					
ANR	5203160	Identifier	c		5202668	0					
ANR	5203161	IfStatement	"if ( ! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st ) )"		5202668	17					
ANR	5203162	Condition	"! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"	876:6:22599:22651	5202668	0	True				
ANR	5203163	UnaryOperationExpression	"! EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"		5202668	0					
ANR	5203164	UnaryOperator	!		5202668	0					
ANR	5203165	CallExpression	"EQ ( step ( m -> g , startst , stopst , st , NOTHING , st ) , st )"		5202668	1					
ANR	5203166	Callee	EQ		5202668	0					
ANR	5203167	Identifier	EQ		5202668	0					
ANR	5203168	ArgumentList	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202668	1					
ANR	5203169	Argument	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202668	0					
ANR	5203170	CallExpression	"step ( m -> g , startst , stopst , st , NOTHING , st )"		5202668	0					
ANR	5203171	Callee	step		5202668	0					
ANR	5203172	Identifier	step		5202668	0					
ANR	5203173	ArgumentList	m -> g		5202668	1					
ANR	5203174	Argument	m -> g		5202668	0					
ANR	5203175	PtrMemberAccess	m -> g		5202668	0					
ANR	5203176	Identifier	m		5202668	0					
ANR	5203177	Identifier	g		5202668	1					
ANR	5203178	Argument	startst		5202668	1					
ANR	5203179	Identifier	startst		5202668	0					
ANR	5203180	Argument	stopst		5202668	2					
ANR	5203181	Identifier	stopst		5202668	0					
ANR	5203182	Argument	st		5202668	3					
ANR	5203183	Identifier	st		5202668	0					
ANR	5203184	Argument	NOTHING		5202668	4					
ANR	5203185	Identifier	NOTHING		5202668	0					
ANR	5203186	Argument	st		5202668	5					
ANR	5203187	Identifier	st		5202668	0					
ANR	5203188	Argument	st		5202668	1					
ANR	5203189	Identifier	st		5202668	0					
ANR	5203190	CompoundStatement		70:61:1779:1779	5202668	1					
ANR	5203191	BreakStatement	break ;	877:3:22659:22664	5202668	0	True				
ANR	5203192	ExpressionStatement	p ++	879:2:22672:22675	5202668	18	True				
ANR	5203193	PostIncDecOperationExpression	p ++		5202668	0					
ANR	5203194	Identifier	p		5202668	0					
ANR	5203195	IncDec	++		5202668	1					
ANR	5203196	ReturnStatement	return ( matchp ) ;	882:1:22682:22696	5202668	16	True				
ANR	5203197	Identifier	matchp		5202668	0					
ANR	5203198	ReturnType	static char *		5202668	1					
ANR	5203199	Identifier	slow		5202668	2					
ANR	5203200	ParameterList	"struct match * m , char * start , char * stop , sopno startst , sopno stopst"		5202668	3					
ANR	5203201	Parameter	struct match * m	806:5:20803:20817	5202668	0	True				
ANR	5203202	ParameterType	struct match *		5202668	0					
ANR	5203203	Identifier	m		5202668	1					
ANR	5203204	Parameter	char * start	806:22:20820:20830	5202668	1	True				
ANR	5203205	ParameterType	char *		5202668	0					
ANR	5203206	Identifier	start		5202668	1					
ANR	5203207	Parameter	char * stop	806:35:20833:20842	5202668	2	True				
ANR	5203208	ParameterType	char *		5202668	0					
ANR	5203209	Identifier	stop		5202668	1					
ANR	5203210	Parameter	sopno startst	806:47:20845:20857	5202668	3	True				
ANR	5203211	ParameterType	sopno		5202668	0					
ANR	5203212	Identifier	startst		5202668	1					
ANR	5203213	Parameter	sopno stopst	806:62:20860:20871	5202668	4	True				
ANR	5203214	ParameterType	sopno		5202668	0					
ANR	5203215	Identifier	stopst		5202668	1					
ANR	5203216	CFGEntryNode	ENTRY		5202668		True				
ANR	5203217	CFGExitNode	EXIT		5202668		True				
ANR	5203218	InfiniteForNode	true		5202668		True				
ANR	5203219	Symbol	m -> g -> cflags		5202668						
ANR	5203220	Symbol	R_REGEX_NOTEOL		5202668						
ANR	5203221	Symbol	m -> st		5202668						
ANR	5203222	Symbol	matchp		5202668						
ANR	5203223	Symbol	R_REGEX_NOTBOL		5202668						
ANR	5203224	Symbol	* start		5202668						
ANR	5203225	Symbol	m -> g -> neol		5202668						
ANR	5203226	Symbol	* ( start - 1 )		5202668						
ANR	5203227	Symbol	empty		5202668						
ANR	5203228	Symbol	m -> g -> nbol		5202668						
ANR	5203229	Symbol	m -> tmp		5202668						
ANR	5203230	Symbol	* m -> g		5202668						
ANR	5203231	Symbol	m -> endp		5202668						
ANR	5203232	Symbol	m -> eflags		5202668						
ANR	5203233	Symbol	lastc		5202668						
ANR	5203234	Symbol	m -> g		5202668						
ANR	5203235	Symbol	tmp		5202668						
ANR	5203236	Symbol	NOTHING		5202668						
ANR	5203237	Symbol	* * m		5202668						
ANR	5203238	Symbol	BOL		5202668						
ANR	5203239	Symbol	st		5202668						
ANR	5203240	Symbol	m -> beginp		5202668						
ANR	5203241	Symbol	c		5202668						
ANR	5203242	Symbol	NULL		5202668						
ANR	5203243	Symbol	EOL		5202668						
ANR	5203244	Symbol	start		5202668						
ANR	5203245	Symbol	startst		5202668						
ANR	5203246	Symbol	i		5202668						
ANR	5203247	Symbol	BOW		5202668						
ANR	5203248	Symbol	EOW		5202668						
ANR	5203249	Symbol	EQ		5202668						
ANR	5203250	Symbol	m		5202668						
ANR	5203251	Symbol	OUT		5202668						
ANR	5203252	Symbol	p		5202668						
ANR	5203253	Symbol	ISSET		5202668						
ANR	5203254	Symbol	stop		5202668						
ANR	5203255	Symbol	m -> empty		5202668						
ANR	5203256	Symbol	stopst		5202668						
ANR	5203257	Symbol	* m		5202668						
ANR	5203258	Symbol	ISWORD		5202668						
ANR	5203259	Symbol	* p		5202668						
ANR	5203260	Symbol	step		5202668						
ANR	5203261	Symbol	flagch		5202668						
ANR	5203262	Symbol	R_REGEX_NEWLINE		5202668						
ANR	5203263	Symbol	BOLEOL		5202668						
ANR	5203264	Function	step	889:0:22782:25426							
ANR	5203265	FunctionDef	"step (struct re_guts * g , sopno start , sopno stop , states bef , int ch , states aft)"		5203264	0					
ANR	5203266	CompoundStatement		896:0:23084:25426	5203264	0					
ANR	5203267	IdentifierDeclStatement	cset * cs ;	897:1:23087:23095	5203264	0	True				
ANR	5203268	IdentifierDecl	* cs		5203264	0					
ANR	5203269	IdentifierDeclType	cset *		5203264	0					
ANR	5203270	Identifier	cs		5203264	1					
ANR	5203271	IdentifierDeclStatement	sop s ;	898:1:23098:23103	5203264	1	True				
ANR	5203272	IdentifierDecl	s		5203264	0					
ANR	5203273	IdentifierDeclType	sop		5203264	0					
ANR	5203274	Identifier	s		5203264	1					
ANR	5203275	IdentifierDeclStatement	sopno pc ;	899:1:23106:23114	5203264	2	True				
ANR	5203276	IdentifierDecl	pc		5203264	0					
ANR	5203277	IdentifierDeclType	sopno		5203264	0					
ANR	5203278	Identifier	pc		5203264	1					
ANR	5203279	IdentifierDeclStatement	onestate here ;	900:1:23117:23130	5203264	3	True				
ANR	5203280	IdentifierDecl	here		5203264	0					
ANR	5203281	IdentifierDeclType	onestate		5203264	0					
ANR	5203282	Identifier	here		5203264	1					
ANR	5203283	IdentifierDeclStatement	sopno look ;	901:1:23168:23178	5203264	4	True				
ANR	5203284	IdentifierDecl	look		5203264	0					
ANR	5203285	IdentifierDeclType	sopno		5203264	0					
ANR	5203286	Identifier	look		5203264	1					
ANR	5203287	IdentifierDeclStatement	int i ;	902:1:23181:23186	5203264	5	True				
ANR	5203288	IdentifierDecl	i		5203264	0					
ANR	5203289	IdentifierDeclType	int		5203264	0					
ANR	5203290	Identifier	i		5203264	1					
ANR	5203291	ForStatement	"for ( pc = start , INIT ( here , pc ) ; pc != stop ; pc ++ , INC ( here ) )"		5203264	6					
ANR	5203292	ForInit	"pc = start , INIT ( here , pc ) ;"	904:6:23195:23221	5203264	0	True				
ANR	5203293	Expression	"pc = start , INIT ( here , pc )"		5203264	0					
ANR	5203294	AssignmentExpression	pc = start		5203264	0		=			
ANR	5203295	Identifier	pc		5203264	0					
ANR	5203296	Identifier	start		5203264	1					
ANR	5203297	CallExpression	"INIT ( here , pc )"		5203264	1					
ANR	5203298	Callee	INIT		5203264	0					
ANR	5203299	Identifier	INIT		5203264	0					
ANR	5203300	ArgumentList	here		5203264	1					
ANR	5203301	Argument	here		5203264	0					
ANR	5203302	Identifier	here		5203264	0					
ANR	5203303	Argument	pc		5203264	1					
ANR	5203304	Identifier	pc		5203264	0					
ANR	5203305	Condition	pc != stop	904:34:23223:23232	5203264	1	True				
ANR	5203306	EqualityExpression	pc != stop		5203264	0		!=			
ANR	5203307	Identifier	pc		5203264	0					
ANR	5203308	Identifier	stop		5203264	1					
ANR	5203309	Expression	"pc ++ , INC ( here )"	904:46:23235:23249	5203264	2	True				
ANR	5203310	PostIncDecOperationExpression	pc ++		5203264	0					
ANR	5203311	Identifier	pc		5203264	0					
ANR	5203312	IncDec	++		5203264	1					
ANR	5203313	CallExpression	INC ( here )		5203264	1					
ANR	5203314	Callee	INC		5203264	0					
ANR	5203315	Identifier	INC		5203264	0					
ANR	5203316	ArgumentList	here		5203264	1					
ANR	5203317	Argument	here		5203264	0					
ANR	5203318	Identifier	here		5203264	0					
ANR	5203319	CompoundStatement		9:63:167:167	5203264	3					
ANR	5203320	ExpressionStatement	s = g -> strip [ pc ]	905:2:23256:23272	5203264	0	True				
ANR	5203321	AssignmentExpression	s = g -> strip [ pc ]		5203264	0		=			
ANR	5203322	Identifier	s		5203264	0					
ANR	5203323	ArrayIndexing	g -> strip [ pc ]		5203264	1					
ANR	5203324	PtrMemberAccess	g -> strip		5203264	0					
ANR	5203325	Identifier	g		5203264	0					
ANR	5203326	Identifier	strip		5203264	1					
ANR	5203327	Identifier	pc		5203264	1					
ANR	5203328	SwitchStatement	switch ( OP ( s ) )		5203264	1					
ANR	5203329	Condition	OP ( s )	906:10:23284:23288	5203264	0	True				
ANR	5203330	CallExpression	OP ( s )		5203264	0					
ANR	5203331	Callee	OP		5203264	0					
ANR	5203332	Identifier	OP		5203264	0					
ANR	5203333	ArgumentList	s		5203264	1					
ANR	5203334	Argument	s		5203264	0					
ANR	5203335	Identifier	s		5203264	0					
ANR	5203336	CompoundStatement		11:17:206:206	5203264	1					
ANR	5203337	Label	case OEND :	907:2:23295:23304	5203264	0	True				
ANR	5203338	Identifier	OEND		5203264	0					
ANR	5203339	BreakStatement	break ;	908:3:23309:23314	5203264	1	True				
ANR	5203340	Label	case OCHAR :	909:2:23318:23328	5203264	2	True				
ANR	5203341	Identifier	OCHAR		5203264	0					
ANR	5203342	IfStatement	if ( ! NONCHAR ( ch ) || ch != ( char ) OPND ( s ) )		5203264	3					
ANR	5203343	Condition	! NONCHAR ( ch ) || ch != ( char ) OPND ( s )	911:7:23372:23406	5203264	0	True				
ANR	5203344	OrExpression	! NONCHAR ( ch ) || ch != ( char ) OPND ( s )		5203264	0		||			
ANR	5203345	UnaryOperationExpression	! NONCHAR ( ch )		5203264	0					
ANR	5203346	UnaryOperator	!		5203264	0					
ANR	5203347	CallExpression	NONCHAR ( ch )		5203264	1					
ANR	5203348	Callee	NONCHAR		5203264	0					
ANR	5203349	Identifier	NONCHAR		5203264	0					
ANR	5203350	ArgumentList	ch		5203264	1					
ANR	5203351	Argument	ch		5203264	0					
ANR	5203352	Identifier	ch		5203264	0					
ANR	5203353	EqualityExpression	ch != ( char ) OPND ( s )		5203264	1		!=			
ANR	5203354	Identifier	ch		5203264	0					
ANR	5203355	CastExpression	( char ) OPND ( s )		5203264	1					
ANR	5203356	CastTarget	char		5203264	0					
ANR	5203357	CallExpression	OPND ( s )		5203264	1					
ANR	5203358	Callee	OPND		5203264	0					
ANR	5203359	Identifier	OPND		5203264	0					
ANR	5203360	ArgumentList	s		5203264	1					
ANR	5203361	Argument	s		5203264	0					
ANR	5203362	Identifier	s		5203264	0					
ANR	5203363	CompoundStatement		16:44:324:324	5203264	1					
ANR	5203364	IfStatement	if ( ch == ( char ) OPND ( s ) )		5203264	0					
ANR	5203365	Condition	ch == ( char ) OPND ( s )	912:8:23419:23437	5203264	0	True				
ANR	5203366	EqualityExpression	ch == ( char ) OPND ( s )		5203264	0		==			
ANR	5203367	Identifier	ch		5203264	0					
ANR	5203368	CastExpression	( char ) OPND ( s )		5203264	1					
ANR	5203369	CastTarget	char		5203264	0					
ANR	5203370	CallExpression	OPND ( s )		5203264	1					
ANR	5203371	Callee	OPND		5203264	0					
ANR	5203372	Identifier	OPND		5203264	0					
ANR	5203373	ArgumentList	s		5203264	1					
ANR	5203374	Argument	s		5203264	0					
ANR	5203375	Identifier	s		5203264	0					
ANR	5203376	ExpressionStatement	"FWD ( aft , bef , 1 )"	913:5:23445:23461	5203264	1	True				
ANR	5203377	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203378	Callee	FWD		5203264	0					
ANR	5203379	Identifier	FWD		5203264	0					
ANR	5203380	ArgumentList	aft		5203264	1					
ANR	5203381	Argument	aft		5203264	0					
ANR	5203382	Identifier	aft		5203264	0					
ANR	5203383	Argument	bef		5203264	1					
ANR	5203384	Identifier	bef		5203264	0					
ANR	5203385	Argument	1		5203264	2					
ANR	5203386	PrimaryExpression	1		5203264	0					
ANR	5203387	BreakStatement	break ;	915:3:23471:23476	5203264	4	True				
ANR	5203388	Label	case OBOL :	916:2:23480:23489	5203264	5	True				
ANR	5203389	Identifier	OBOL		5203264	0					
ANR	5203390	IfStatement	if ( ch == BOL || ch == BOLEOL )		5203264	6					
ANR	5203391	Condition	ch == BOL || ch == BOLEOL	917:7:23498:23522	5203264	0	True				
ANR	5203392	OrExpression	ch == BOL || ch == BOLEOL		5203264	0		||			
ANR	5203393	EqualityExpression	ch == BOL		5203264	0		==			
ANR	5203394	Identifier	ch		5203264	0					
ANR	5203395	Identifier	BOL		5203264	1					
ANR	5203396	EqualityExpression	ch == BOLEOL		5203264	1		==			
ANR	5203397	Identifier	ch		5203264	0					
ANR	5203398	Identifier	BOLEOL		5203264	1					
ANR	5203399	ExpressionStatement	"FWD ( aft , bef , 1 )"	918:4:23529:23545	5203264	1	True				
ANR	5203400	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203401	Callee	FWD		5203264	0					
ANR	5203402	Identifier	FWD		5203264	0					
ANR	5203403	ArgumentList	aft		5203264	1					
ANR	5203404	Argument	aft		5203264	0					
ANR	5203405	Identifier	aft		5203264	0					
ANR	5203406	Argument	bef		5203264	1					
ANR	5203407	Identifier	bef		5203264	0					
ANR	5203408	Argument	1		5203264	2					
ANR	5203409	PrimaryExpression	1		5203264	0					
ANR	5203410	BreakStatement	break ;	919:3:23550:23555	5203264	7	True				
ANR	5203411	Label	case OEOL :	920:2:23559:23568	5203264	8	True				
ANR	5203412	Identifier	OEOL		5203264	0					
ANR	5203413	IfStatement	if ( ch == EOL || ch == BOLEOL )		5203264	9					
ANR	5203414	Condition	ch == EOL || ch == BOLEOL	921:7:23577:23601	5203264	0	True				
ANR	5203415	OrExpression	ch == EOL || ch == BOLEOL		5203264	0		||			
ANR	5203416	EqualityExpression	ch == EOL		5203264	0		==			
ANR	5203417	Identifier	ch		5203264	0					
ANR	5203418	Identifier	EOL		5203264	1					
ANR	5203419	EqualityExpression	ch == BOLEOL		5203264	1		==			
ANR	5203420	Identifier	ch		5203264	0					
ANR	5203421	Identifier	BOLEOL		5203264	1					
ANR	5203422	ExpressionStatement	"FWD ( aft , bef , 1 )"	922:4:23608:23624	5203264	1	True				
ANR	5203423	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203424	Callee	FWD		5203264	0					
ANR	5203425	Identifier	FWD		5203264	0					
ANR	5203426	ArgumentList	aft		5203264	1					
ANR	5203427	Argument	aft		5203264	0					
ANR	5203428	Identifier	aft		5203264	0					
ANR	5203429	Argument	bef		5203264	1					
ANR	5203430	Identifier	bef		5203264	0					
ANR	5203431	Argument	1		5203264	2					
ANR	5203432	PrimaryExpression	1		5203264	0					
ANR	5203433	BreakStatement	break ;	923:3:23629:23634	5203264	10	True				
ANR	5203434	Label	case OBOW :	924:2:23638:23647	5203264	11	True				
ANR	5203435	Identifier	OBOW		5203264	0					
ANR	5203436	IfStatement	if ( ch == BOW )		5203264	12					
ANR	5203437	Condition	ch == BOW	925:7:23656:23664	5203264	0	True				
ANR	5203438	EqualityExpression	ch == BOW		5203264	0		==			
ANR	5203439	Identifier	ch		5203264	0					
ANR	5203440	Identifier	BOW		5203264	1					
ANR	5203441	ExpressionStatement	"FWD ( aft , bef , 1 )"	926:4:23671:23687	5203264	1	True				
ANR	5203442	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203443	Callee	FWD		5203264	0					
ANR	5203444	Identifier	FWD		5203264	0					
ANR	5203445	ArgumentList	aft		5203264	1					
ANR	5203446	Argument	aft		5203264	0					
ANR	5203447	Identifier	aft		5203264	0					
ANR	5203448	Argument	bef		5203264	1					
ANR	5203449	Identifier	bef		5203264	0					
ANR	5203450	Argument	1		5203264	2					
ANR	5203451	PrimaryExpression	1		5203264	0					
ANR	5203452	BreakStatement	break ;	927:3:23692:23697	5203264	13	True				
ANR	5203453	Label	case OEOW :	928:2:23701:23710	5203264	14	True				
ANR	5203454	Identifier	OEOW		5203264	0					
ANR	5203455	IfStatement	if ( ch == EOW )		5203264	15					
ANR	5203456	Condition	ch == EOW	929:7:23719:23727	5203264	0	True				
ANR	5203457	EqualityExpression	ch == EOW		5203264	0		==			
ANR	5203458	Identifier	ch		5203264	0					
ANR	5203459	Identifier	EOW		5203264	1					
ANR	5203460	ExpressionStatement	"FWD ( aft , bef , 1 )"	930:4:23734:23750	5203264	1	True				
ANR	5203461	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203462	Callee	FWD		5203264	0					
ANR	5203463	Identifier	FWD		5203264	0					
ANR	5203464	ArgumentList	aft		5203264	1					
ANR	5203465	Argument	aft		5203264	0					
ANR	5203466	Identifier	aft		5203264	0					
ANR	5203467	Argument	bef		5203264	1					
ANR	5203468	Identifier	bef		5203264	0					
ANR	5203469	Argument	1		5203264	2					
ANR	5203470	PrimaryExpression	1		5203264	0					
ANR	5203471	BreakStatement	break ;	931:3:23755:23760	5203264	16	True				
ANR	5203472	Label	case OANY :	932:2:23764:23773	5203264	17	True				
ANR	5203473	Identifier	OANY		5203264	0					
ANR	5203474	IfStatement	if ( ! NONCHAR ( ch ) )		5203264	18					
ANR	5203475	Condition	! NONCHAR ( ch )	933:7:23782:23793	5203264	0	True				
ANR	5203476	UnaryOperationExpression	! NONCHAR ( ch )		5203264	0					
ANR	5203477	UnaryOperator	!		5203264	0					
ANR	5203478	CallExpression	NONCHAR ( ch )		5203264	1					
ANR	5203479	Callee	NONCHAR		5203264	0					
ANR	5203480	Identifier	NONCHAR		5203264	0					
ANR	5203481	ArgumentList	ch		5203264	1					
ANR	5203482	Argument	ch		5203264	0					
ANR	5203483	Identifier	ch		5203264	0					
ANR	5203484	ExpressionStatement	"FWD ( aft , bef , 1 )"	934:4:23800:23816	5203264	1	True				
ANR	5203485	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203486	Callee	FWD		5203264	0					
ANR	5203487	Identifier	FWD		5203264	0					
ANR	5203488	ArgumentList	aft		5203264	1					
ANR	5203489	Argument	aft		5203264	0					
ANR	5203490	Identifier	aft		5203264	0					
ANR	5203491	Argument	bef		5203264	1					
ANR	5203492	Identifier	bef		5203264	0					
ANR	5203493	Argument	1		5203264	2					
ANR	5203494	PrimaryExpression	1		5203264	0					
ANR	5203495	BreakStatement	break ;	935:3:23821:23826	5203264	19	True				
ANR	5203496	Label	case OANYOF :	936:2:23830:23841	5203264	20	True				
ANR	5203497	Identifier	OANYOF		5203264	0					
ANR	5203498	ExpressionStatement	cs = & g -> sets [ OPND ( s ) ]	937:3:23846:23868	5203264	21	True				
ANR	5203499	AssignmentExpression	cs = & g -> sets [ OPND ( s ) ]		5203264	0		=			
ANR	5203500	Identifier	cs		5203264	0					
ANR	5203501	UnaryOperationExpression	& g -> sets [ OPND ( s ) ]		5203264	1					
ANR	5203502	UnaryOperator	&		5203264	0					
ANR	5203503	ArrayIndexing	g -> sets [ OPND ( s ) ]		5203264	1					
ANR	5203504	PtrMemberAccess	g -> sets		5203264	0					
ANR	5203505	Identifier	g		5203264	0					
ANR	5203506	Identifier	sets		5203264	1					
ANR	5203507	CallExpression	OPND ( s )		5203264	1					
ANR	5203508	Callee	OPND		5203264	0					
ANR	5203509	Identifier	OPND		5203264	0					
ANR	5203510	ArgumentList	s		5203264	1					
ANR	5203511	Argument	s		5203264	0					
ANR	5203512	Identifier	s		5203264	0					
ANR	5203513	IfStatement	"if ( ! NONCHAR ( ch ) && CHIN ( cs , ch ) )"		5203264	22					
ANR	5203514	Condition	"! NONCHAR ( ch ) && CHIN ( cs , ch )"	938:7:23877:23904	5203264	0	True				
ANR	5203515	AndExpression	"! NONCHAR ( ch ) && CHIN ( cs , ch )"		5203264	0		&&			
ANR	5203516	UnaryOperationExpression	! NONCHAR ( ch )		5203264	0					
ANR	5203517	UnaryOperator	!		5203264	0					
ANR	5203518	CallExpression	NONCHAR ( ch )		5203264	1					
ANR	5203519	Callee	NONCHAR		5203264	0					
ANR	5203520	Identifier	NONCHAR		5203264	0					
ANR	5203521	ArgumentList	ch		5203264	1					
ANR	5203522	Argument	ch		5203264	0					
ANR	5203523	Identifier	ch		5203264	0					
ANR	5203524	CallExpression	"CHIN ( cs , ch )"		5203264	1					
ANR	5203525	Callee	CHIN		5203264	0					
ANR	5203526	Identifier	CHIN		5203264	0					
ANR	5203527	ArgumentList	cs		5203264	1					
ANR	5203528	Argument	cs		5203264	0					
ANR	5203529	Identifier	cs		5203264	0					
ANR	5203530	Argument	ch		5203264	1					
ANR	5203531	Identifier	ch		5203264	0					
ANR	5203532	ExpressionStatement	"FWD ( aft , bef , 1 )"	939:4:23911:23927	5203264	1	True				
ANR	5203533	CallExpression	"FWD ( aft , bef , 1 )"		5203264	0					
ANR	5203534	Callee	FWD		5203264	0					
ANR	5203535	Identifier	FWD		5203264	0					
ANR	5203536	ArgumentList	aft		5203264	1					
ANR	5203537	Argument	aft		5203264	0					
ANR	5203538	Identifier	aft		5203264	0					
ANR	5203539	Argument	bef		5203264	1					
ANR	5203540	Identifier	bef		5203264	0					
ANR	5203541	Argument	1		5203264	2					
ANR	5203542	PrimaryExpression	1		5203264	0					
ANR	5203543	BreakStatement	break ;	940:3:23932:23937	5203264	23	True				
ANR	5203544	Label	case OBACK_ :	941:2:23941:23952	5203264	24	True				
ANR	5203545	Identifier	OBACK_		5203264	0					
ANR	5203546	Label	case O_BACK :	942:2:23976:23987	5203264	25	True				
ANR	5203547	Identifier	O_BACK		5203264	0					
ANR	5203548	ExpressionStatement	"FWD ( aft , aft , 1 )"	943:3:23992:24008	5203264	26	True				
ANR	5203549	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203550	Callee	FWD		5203264	0					
ANR	5203551	Identifier	FWD		5203264	0					
ANR	5203552	ArgumentList	aft		5203264	1					
ANR	5203553	Argument	aft		5203264	0					
ANR	5203554	Identifier	aft		5203264	0					
ANR	5203555	Argument	aft		5203264	1					
ANR	5203556	Identifier	aft		5203264	0					
ANR	5203557	Argument	1		5203264	2					
ANR	5203558	PrimaryExpression	1		5203264	0					
ANR	5203559	BreakStatement	break ;	944:3:24013:24018	5203264	27	True				
ANR	5203560	Label	case OPLUS_ :	945:2:24022:24033	5203264	28	True				
ANR	5203561	Identifier	OPLUS_		5203264	0					
ANR	5203562	ExpressionStatement	"FWD ( aft , aft , 1 )"	946:3:24076:24092	5203264	29	True				
ANR	5203563	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203564	Callee	FWD		5203264	0					
ANR	5203565	Identifier	FWD		5203264	0					
ANR	5203566	ArgumentList	aft		5203264	1					
ANR	5203567	Argument	aft		5203264	0					
ANR	5203568	Identifier	aft		5203264	0					
ANR	5203569	Argument	aft		5203264	1					
ANR	5203570	Identifier	aft		5203264	0					
ANR	5203571	Argument	1		5203264	2					
ANR	5203572	PrimaryExpression	1		5203264	0					
ANR	5203573	BreakStatement	break ;	947:3:24097:24102	5203264	30	True				
ANR	5203574	Label	case O_PLUS :	948:2:24106:24117	5203264	31	True				
ANR	5203575	Identifier	O_PLUS		5203264	0					
ANR	5203576	ExpressionStatement	"FWD ( aft , aft , 1 )"	949:3:24151:24167	5203264	32	True				
ANR	5203577	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203578	Callee	FWD		5203264	0					
ANR	5203579	Identifier	FWD		5203264	0					
ANR	5203580	ArgumentList	aft		5203264	1					
ANR	5203581	Argument	aft		5203264	0					
ANR	5203582	Identifier	aft		5203264	0					
ANR	5203583	Argument	aft		5203264	1					
ANR	5203584	Identifier	aft		5203264	0					
ANR	5203585	Argument	1		5203264	2					
ANR	5203586	PrimaryExpression	1		5203264	0					
ANR	5203587	ExpressionStatement	"i = ISSETBACK ( aft , OPND ( s ) )"	950:3:24172:24199	5203264	33	True				
ANR	5203588	AssignmentExpression	"i = ISSETBACK ( aft , OPND ( s ) )"		5203264	0		=			
ANR	5203589	Identifier	i		5203264	0					
ANR	5203590	CallExpression	"ISSETBACK ( aft , OPND ( s ) )"		5203264	1					
ANR	5203591	Callee	ISSETBACK		5203264	0					
ANR	5203592	Identifier	ISSETBACK		5203264	0					
ANR	5203593	ArgumentList	aft		5203264	1					
ANR	5203594	Argument	aft		5203264	0					
ANR	5203595	Identifier	aft		5203264	0					
ANR	5203596	Argument	OPND ( s )		5203264	1					
ANR	5203597	CallExpression	OPND ( s )		5203264	0					
ANR	5203598	Callee	OPND		5203264	0					
ANR	5203599	Identifier	OPND		5203264	0					
ANR	5203600	ArgumentList	s		5203264	1					
ANR	5203601	Argument	s		5203264	0					
ANR	5203602	Identifier	s		5203264	0					
ANR	5203603	ExpressionStatement	"BACK ( aft , aft , OPND ( s ) )"	951:3:24204:24227	5203264	34	True				
ANR	5203604	CallExpression	"BACK ( aft , aft , OPND ( s ) )"		5203264	0					
ANR	5203605	Callee	BACK		5203264	0					
ANR	5203606	Identifier	BACK		5203264	0					
ANR	5203607	ArgumentList	aft		5203264	1					
ANR	5203608	Argument	aft		5203264	0					
ANR	5203609	Identifier	aft		5203264	0					
ANR	5203610	Argument	aft		5203264	1					
ANR	5203611	Identifier	aft		5203264	0					
ANR	5203612	Argument	OPND ( s )		5203264	2					
ANR	5203613	CallExpression	OPND ( s )		5203264	0					
ANR	5203614	Callee	OPND		5203264	0					
ANR	5203615	Identifier	OPND		5203264	0					
ANR	5203616	ArgumentList	s		5203264	1					
ANR	5203617	Argument	s		5203264	0					
ANR	5203618	Identifier	s		5203264	0					
ANR	5203619	IfStatement	"if ( ! i && ISSETBACK ( aft , OPND ( s ) ) )"		5203264	35					
ANR	5203620	Condition	"! i && ISSETBACK ( aft , OPND ( s ) )"	952:7:24236:24264	5203264	0	True				
ANR	5203621	AndExpression	"! i && ISSETBACK ( aft , OPND ( s ) )"		5203264	0		&&			
ANR	5203622	UnaryOperationExpression	! i		5203264	0					
ANR	5203623	UnaryOperator	!		5203264	0					
ANR	5203624	Identifier	i		5203264	1					
ANR	5203625	CallExpression	"ISSETBACK ( aft , OPND ( s ) )"		5203264	1					
ANR	5203626	Callee	ISSETBACK		5203264	0					
ANR	5203627	Identifier	ISSETBACK		5203264	0					
ANR	5203628	ArgumentList	aft		5203264	1					
ANR	5203629	Argument	aft		5203264	0					
ANR	5203630	Identifier	aft		5203264	0					
ANR	5203631	Argument	OPND ( s )		5203264	1					
ANR	5203632	CallExpression	OPND ( s )		5203264	0					
ANR	5203633	Callee	OPND		5203264	0					
ANR	5203634	Identifier	OPND		5203264	0					
ANR	5203635	ArgumentList	s		5203264	1					
ANR	5203636	Argument	s		5203264	0					
ANR	5203637	Identifier	s		5203264	0					
ANR	5203638	CompoundStatement		57:38:1182:1182	5203264	1					
ANR	5203639	ExpressionStatement	pc -= OPND ( s ) + 1	954:4:24314:24331	5203264	0	True				
ANR	5203640	AssignmentExpression	pc -= OPND ( s ) + 1		5203264	0		-=			
ANR	5203641	Identifier	pc		5203264	0					
ANR	5203642	AdditiveExpression	OPND ( s ) + 1		5203264	1		+			
ANR	5203643	CallExpression	OPND ( s )		5203264	0					
ANR	5203644	Callee	OPND		5203264	0					
ANR	5203645	Identifier	OPND		5203264	0					
ANR	5203646	ArgumentList	s		5203264	1					
ANR	5203647	Argument	s		5203264	0					
ANR	5203648	Identifier	s		5203264	0					
ANR	5203649	PrimaryExpression	1		5203264	1					
ANR	5203650	ExpressionStatement	"INIT ( here , pc )"	955:4:24337:24351	5203264	1	True				
ANR	5203651	CallExpression	"INIT ( here , pc )"		5203264	0					
ANR	5203652	Callee	INIT		5203264	0					
ANR	5203653	Identifier	INIT		5203264	0					
ANR	5203654	ArgumentList	here		5203264	1					
ANR	5203655	Argument	here		5203264	0					
ANR	5203656	Identifier	here		5203264	0					
ANR	5203657	Argument	pc		5203264	1					
ANR	5203658	Identifier	pc		5203264	0					
ANR	5203659	BreakStatement	break ;	957:3:24361:24366	5203264	36	True				
ANR	5203660	Label	case OQUEST_ :	958:2:24370:24382	5203264	37	True				
ANR	5203661	Identifier	OQUEST_		5203264	0					
ANR	5203662	ExpressionStatement	"FWD ( aft , aft , 1 )"	959:3:24421:24437	5203264	38	True				
ANR	5203663	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203664	Callee	FWD		5203264	0					
ANR	5203665	Identifier	FWD		5203264	0					
ANR	5203666	ArgumentList	aft		5203264	1					
ANR	5203667	Argument	aft		5203264	0					
ANR	5203668	Identifier	aft		5203264	0					
ANR	5203669	Argument	aft		5203264	1					
ANR	5203670	Identifier	aft		5203264	0					
ANR	5203671	Argument	1		5203264	2					
ANR	5203672	PrimaryExpression	1		5203264	0					
ANR	5203673	ExpressionStatement	"FWD ( aft , aft , OPND ( s ) )"	960:3:24442:24464	5203264	39	True				
ANR	5203674	CallExpression	"FWD ( aft , aft , OPND ( s ) )"		5203264	0					
ANR	5203675	Callee	FWD		5203264	0					
ANR	5203676	Identifier	FWD		5203264	0					
ANR	5203677	ArgumentList	aft		5203264	1					
ANR	5203678	Argument	aft		5203264	0					
ANR	5203679	Identifier	aft		5203264	0					
ANR	5203680	Argument	aft		5203264	1					
ANR	5203681	Identifier	aft		5203264	0					
ANR	5203682	Argument	OPND ( s )		5203264	2					
ANR	5203683	CallExpression	OPND ( s )		5203264	0					
ANR	5203684	Callee	OPND		5203264	0					
ANR	5203685	Identifier	OPND		5203264	0					
ANR	5203686	ArgumentList	s		5203264	1					
ANR	5203687	Argument	s		5203264	0					
ANR	5203688	Identifier	s		5203264	0					
ANR	5203689	BreakStatement	break ;	961:3:24469:24474	5203264	40	True				
ANR	5203690	Label	case O_QUEST :	962:2:24478:24490	5203264	41	True				
ANR	5203691	Identifier	O_QUEST		5203264	0					
ANR	5203692	ExpressionStatement	"FWD ( aft , aft , 1 )"	963:3:24516:24532	5203264	42	True				
ANR	5203693	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203694	Callee	FWD		5203264	0					
ANR	5203695	Identifier	FWD		5203264	0					
ANR	5203696	ArgumentList	aft		5203264	1					
ANR	5203697	Argument	aft		5203264	0					
ANR	5203698	Identifier	aft		5203264	0					
ANR	5203699	Argument	aft		5203264	1					
ANR	5203700	Identifier	aft		5203264	0					
ANR	5203701	Argument	1		5203264	2					
ANR	5203702	PrimaryExpression	1		5203264	0					
ANR	5203703	BreakStatement	break ;	964:3:24537:24542	5203264	43	True				
ANR	5203704	Label	case OLPAREN :	965:2:24546:24558	5203264	44	True				
ANR	5203705	Identifier	OLPAREN		5203264	0					
ANR	5203706	Label	case ORPAREN :	966:2:24590:24602	5203264	45	True				
ANR	5203707	Identifier	ORPAREN		5203264	0					
ANR	5203708	ExpressionStatement	"FWD ( aft , aft , 1 )"	967:3:24607:24623	5203264	46	True				
ANR	5203709	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203710	Callee	FWD		5203264	0					
ANR	5203711	Identifier	FWD		5203264	0					
ANR	5203712	ArgumentList	aft		5203264	1					
ANR	5203713	Argument	aft		5203264	0					
ANR	5203714	Identifier	aft		5203264	0					
ANR	5203715	Argument	aft		5203264	1					
ANR	5203716	Identifier	aft		5203264	0					
ANR	5203717	Argument	1		5203264	2					
ANR	5203718	PrimaryExpression	1		5203264	0					
ANR	5203719	BreakStatement	break ;	968:3:24628:24633	5203264	47	True				
ANR	5203720	Label	case OCH_ :	969:2:24637:24646	5203264	48	True				
ANR	5203721	Identifier	OCH_		5203264	0					
ANR	5203722	ExpressionStatement	"FWD ( aft , aft , 1 )"	970:3:24686:24702	5203264	49	True				
ANR	5203723	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203724	Callee	FWD		5203264	0					
ANR	5203725	Identifier	FWD		5203264	0					
ANR	5203726	ArgumentList	aft		5203264	1					
ANR	5203727	Argument	aft		5203264	0					
ANR	5203728	Identifier	aft		5203264	0					
ANR	5203729	Argument	aft		5203264	1					
ANR	5203730	Identifier	aft		5203264	0					
ANR	5203731	Argument	1		5203264	2					
ANR	5203732	PrimaryExpression	1		5203264	0					
ANR	5203733	IfStatement	if ( ( OP ( g -> strip [ pc + OPND ( s ) ] ) != OOR2 ) )		5203264	50					
ANR	5203734	Condition	OP ( g -> strip [ pc + OPND ( s ) ] ) != OOR2	971:7:24711:24744	5203264	0	True				
ANR	5203735	EqualityExpression	OP ( g -> strip [ pc + OPND ( s ) ] ) != OOR2		5203264	0		!=			
ANR	5203736	CallExpression	OP ( g -> strip [ pc + OPND ( s ) ] )		5203264	0					
ANR	5203737	Callee	OP		5203264	0					
ANR	5203738	Identifier	OP		5203264	0					
ANR	5203739	ArgumentList	g -> strip [ pc + OPND ( s ) ]		5203264	1					
ANR	5203740	Argument	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203741	ArrayIndexing	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203742	PtrMemberAccess	g -> strip		5203264	0					
ANR	5203743	Identifier	g		5203264	0					
ANR	5203744	Identifier	strip		5203264	1					
ANR	5203745	AdditiveExpression	pc + OPND ( s )		5203264	1		+			
ANR	5203746	Identifier	pc		5203264	0					
ANR	5203747	CallExpression	OPND ( s )		5203264	1					
ANR	5203748	Callee	OPND		5203264	0					
ANR	5203749	Identifier	OPND		5203264	0					
ANR	5203750	ArgumentList	s		5203264	1					
ANR	5203751	Argument	s		5203264	0					
ANR	5203752	Identifier	s		5203264	0					
ANR	5203753	Identifier	OOR2		5203264	1					
ANR	5203754	CompoundStatement		76:43:1662:1662	5203264	1					
ANR	5203755	BreakStatement	break ;	972:4:24753:24758	5203264	0	True				
ANR	5203756	ExpressionStatement	"FWD ( aft , aft , OPND ( s ) )"	974:3:24768:24790	5203264	51	True				
ANR	5203757	CallExpression	"FWD ( aft , aft , OPND ( s ) )"		5203264	0					
ANR	5203758	Callee	FWD		5203264	0					
ANR	5203759	Identifier	FWD		5203264	0					
ANR	5203760	ArgumentList	aft		5203264	1					
ANR	5203761	Argument	aft		5203264	0					
ANR	5203762	Identifier	aft		5203264	0					
ANR	5203763	Argument	aft		5203264	1					
ANR	5203764	Identifier	aft		5203264	0					
ANR	5203765	Argument	OPND ( s )		5203264	2					
ANR	5203766	CallExpression	OPND ( s )		5203264	0					
ANR	5203767	Callee	OPND		5203264	0					
ANR	5203768	Identifier	OPND		5203264	0					
ANR	5203769	ArgumentList	s		5203264	1					
ANR	5203770	Argument	s		5203264	0					
ANR	5203771	Identifier	s		5203264	0					
ANR	5203772	BreakStatement	break ;	975:3:24795:24800	5203264	52	True				
ANR	5203773	Label	case OOR1 :	976:2:24804:24813	5203264	53	True				
ANR	5203774	Identifier	OOR1		5203264	0					
ANR	5203775	IfStatement	"if ( ISSTATEIN ( aft , here ) )"		5203264	54					
ANR	5203776	Condition	"ISSTATEIN ( aft , here )"	977:7:24858:24877	5203264	0	True				
ANR	5203777	CallExpression	"ISSTATEIN ( aft , here )"		5203264	0					
ANR	5203778	Callee	ISSTATEIN		5203264	0					
ANR	5203779	Identifier	ISSTATEIN		5203264	0					
ANR	5203780	ArgumentList	aft		5203264	1					
ANR	5203781	Argument	aft		5203264	0					
ANR	5203782	Identifier	aft		5203264	0					
ANR	5203783	Argument	here		5203264	1					
ANR	5203784	Identifier	here		5203264	0					
ANR	5203785	CompoundStatement		82:29:1795:1795	5203264	1					
ANR	5203786	ForStatement	for ( look = 1 ; OP ( s = g -> strip [ pc + look ] ) != O_CH ; look += OPND ( s ) )		5203264	0					
ANR	5203787	ForInit	look = 1 ;	978:9:24891:24899	5203264	0	True				
ANR	5203788	AssignmentExpression	look = 1		5203264	0		=			
ANR	5203789	Identifier	look		5203264	0					
ANR	5203790	PrimaryExpression	1		5203264	1					
ANR	5203791	Condition	OP ( s = g -> strip [ pc + look ] ) != O_CH	979:6:24907:24939	5203264	1	True				
ANR	5203792	EqualityExpression	OP ( s = g -> strip [ pc + look ] ) != O_CH		5203264	0		!=			
ANR	5203793	CallExpression	OP ( s = g -> strip [ pc + look ] )		5203264	0					
ANR	5203794	Callee	OP		5203264	0					
ANR	5203795	Identifier	OP		5203264	0					
ANR	5203796	ArgumentList	s = g -> strip [ pc + look ]		5203264	1					
ANR	5203797	Argument	s = g -> strip [ pc + look ]		5203264	0					
ANR	5203798	AssignmentExpression	s = g -> strip [ pc + look ]		5203264	0		=			
ANR	5203799	Identifier	s		5203264	0					
ANR	5203800	ArrayIndexing	g -> strip [ pc + look ]		5203264	1					
ANR	5203801	PtrMemberAccess	g -> strip		5203264	0					
ANR	5203802	Identifier	g		5203264	0					
ANR	5203803	Identifier	strip		5203264	1					
ANR	5203804	AdditiveExpression	pc + look		5203264	1		+			
ANR	5203805	Identifier	pc		5203264	0					
ANR	5203806	Identifier	look		5203264	1					
ANR	5203807	Identifier	O_CH		5203264	1					
ANR	5203808	AssignmentExpression	look += OPND ( s )	980:6:24948:24962	5203264	2	True	+=			
ANR	5203809	Identifier	look		5203264	0					
ANR	5203810	CallExpression	OPND ( s )		5203264	1					
ANR	5203811	Callee	OPND		5203264	0					
ANR	5203812	Identifier	OPND		5203264	0					
ANR	5203813	ArgumentList	s		5203264	1					
ANR	5203814	Argument	s		5203264	0					
ANR	5203815	Identifier	s		5203264	0					
ANR	5203816	CompoundStatement		85:23:1880:1880	5203264	3					
ANR	5203817	IfStatement	if ( OP ( s ) != OOR2 )		5203264	0					
ANR	5203818	Condition	OP ( s ) != OOR2	981:11:24978:24990	5203264	0	True				
ANR	5203819	EqualityExpression	OP ( s ) != OOR2		5203264	0		!=			
ANR	5203820	CallExpression	OP ( s )		5203264	0					
ANR	5203821	Callee	OP		5203264	0					
ANR	5203822	Identifier	OP		5203264	0					
ANR	5203823	ArgumentList	s		5203264	1					
ANR	5203824	Argument	s		5203264	0					
ANR	5203825	Identifier	s		5203264	0					
ANR	5203826	Identifier	OOR2		5203264	1					
ANR	5203827	CompoundStatement		86:26:1908:1908	5203264	1					
ANR	5203828	BreakStatement	break ;	982:8:25003:25008	5203264	0	True				
ANR	5203829	ExpressionStatement	"FWD ( aft , aft , look )"	985:4:25031:25050	5203264	1	True				
ANR	5203830	CallExpression	"FWD ( aft , aft , look )"		5203264	0					
ANR	5203831	Callee	FWD		5203264	0					
ANR	5203832	Identifier	FWD		5203264	0					
ANR	5203833	ArgumentList	aft		5203264	1					
ANR	5203834	Argument	aft		5203264	0					
ANR	5203835	Identifier	aft		5203264	0					
ANR	5203836	Argument	aft		5203264	1					
ANR	5203837	Identifier	aft		5203264	0					
ANR	5203838	Argument	look		5203264	2					
ANR	5203839	Identifier	look		5203264	0					
ANR	5203840	BreakStatement	break ;	987:3:25060:25065	5203264	55	True				
ANR	5203841	Label	case OOR2 :	988:2:25069:25078	5203264	56	True				
ANR	5203842	Identifier	OOR2		5203264	0					
ANR	5203843	ExpressionStatement	"FWD ( aft , aft , 1 )"	989:3:25115:25131	5203264	57	True				
ANR	5203844	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203845	Callee	FWD		5203264	0					
ANR	5203846	Identifier	FWD		5203264	0					
ANR	5203847	ArgumentList	aft		5203264	1					
ANR	5203848	Argument	aft		5203264	0					
ANR	5203849	Identifier	aft		5203264	0					
ANR	5203850	Argument	aft		5203264	1					
ANR	5203851	Identifier	aft		5203264	0					
ANR	5203852	Argument	1		5203264	2					
ANR	5203853	PrimaryExpression	1		5203264	0					
ANR	5203854	IfStatement	if ( OP ( g -> strip [ pc + OPND ( s ) ] ) != O_CH )		5203264	58					
ANR	5203855	Condition	OP ( g -> strip [ pc + OPND ( s ) ] ) != O_CH	990:7:25140:25171	5203264	0	True				
ANR	5203856	EqualityExpression	OP ( g -> strip [ pc + OPND ( s ) ] ) != O_CH		5203264	0		!=			
ANR	5203857	CallExpression	OP ( g -> strip [ pc + OPND ( s ) ] )		5203264	0					
ANR	5203858	Callee	OP		5203264	0					
ANR	5203859	Identifier	OP		5203264	0					
ANR	5203860	ArgumentList	g -> strip [ pc + OPND ( s ) ]		5203264	1					
ANR	5203861	Argument	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203862	ArrayIndexing	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203863	PtrMemberAccess	g -> strip		5203264	0					
ANR	5203864	Identifier	g		5203264	0					
ANR	5203865	Identifier	strip		5203264	1					
ANR	5203866	AdditiveExpression	pc + OPND ( s )		5203264	1		+			
ANR	5203867	Identifier	pc		5203264	0					
ANR	5203868	CallExpression	OPND ( s )		5203264	1					
ANR	5203869	Callee	OPND		5203264	0					
ANR	5203870	Identifier	OPND		5203264	0					
ANR	5203871	ArgumentList	s		5203264	1					
ANR	5203872	Argument	s		5203264	0					
ANR	5203873	Identifier	s		5203264	0					
ANR	5203874	Identifier	O_CH		5203264	1					
ANR	5203875	CompoundStatement		95:41:2089:2089	5203264	1					
ANR	5203876	IfStatement	if ( OP ( g -> strip [ pc + OPND ( s ) ] ) == OOR2 )		5203264	0					
ANR	5203877	Condition	OP ( g -> strip [ pc + OPND ( s ) ] ) == OOR2	991:8:25184:25215	5203264	0	True				
ANR	5203878	EqualityExpression	OP ( g -> strip [ pc + OPND ( s ) ] ) == OOR2		5203264	0		==			
ANR	5203879	CallExpression	OP ( g -> strip [ pc + OPND ( s ) ] )		5203264	0					
ANR	5203880	Callee	OP		5203264	0					
ANR	5203881	Identifier	OP		5203264	0					
ANR	5203882	ArgumentList	g -> strip [ pc + OPND ( s ) ]		5203264	1					
ANR	5203883	Argument	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203884	ArrayIndexing	g -> strip [ pc + OPND ( s ) ]		5203264	0					
ANR	5203885	PtrMemberAccess	g -> strip		5203264	0					
ANR	5203886	Identifier	g		5203264	0					
ANR	5203887	Identifier	strip		5203264	1					
ANR	5203888	AdditiveExpression	pc + OPND ( s )		5203264	1		+			
ANR	5203889	Identifier	pc		5203264	0					
ANR	5203890	CallExpression	OPND ( s )		5203264	1					
ANR	5203891	Callee	OPND		5203264	0					
ANR	5203892	Identifier	OPND		5203264	0					
ANR	5203893	ArgumentList	s		5203264	1					
ANR	5203894	Argument	s		5203264	0					
ANR	5203895	Identifier	s		5203264	0					
ANR	5203896	Identifier	OOR2		5203264	1					
ANR	5203897	CompoundStatement		96:42:2133:2133	5203264	1					
ANR	5203898	ExpressionStatement	"FWD ( aft , aft , OPND ( s ) )"	992:5:25225:25247	5203264	0	True				
ANR	5203899	CallExpression	"FWD ( aft , aft , OPND ( s ) )"		5203264	0					
ANR	5203900	Callee	FWD		5203264	0					
ANR	5203901	Identifier	FWD		5203264	0					
ANR	5203902	ArgumentList	aft		5203264	1					
ANR	5203903	Argument	aft		5203264	0					
ANR	5203904	Identifier	aft		5203264	0					
ANR	5203905	Argument	aft		5203264	1					
ANR	5203906	Identifier	aft		5203264	0					
ANR	5203907	Argument	OPND ( s )		5203264	2					
ANR	5203908	CallExpression	OPND ( s )		5203264	0					
ANR	5203909	Callee	OPND		5203264	0					
ANR	5203910	Identifier	OPND		5203264	0					
ANR	5203911	ArgumentList	s		5203264	1					
ANR	5203912	Argument	s		5203264	0					
ANR	5203913	Identifier	s		5203264	0					
ANR	5203914	BreakStatement	break ;	995:3:25263:25268	5203264	59	True				
ANR	5203915	Label	case O_CH :	996:2:25272:25281	5203264	60	True				
ANR	5203916	Identifier	O_CH		5203264	0					
ANR	5203917	ExpressionStatement	"FWD ( aft , aft , 1 )"	997:3:25304:25320	5203264	61	True				
ANR	5203918	CallExpression	"FWD ( aft , aft , 1 )"		5203264	0					
ANR	5203919	Callee	FWD		5203264	0					
ANR	5203920	Identifier	FWD		5203264	0					
ANR	5203921	ArgumentList	aft		5203264	1					
ANR	5203922	Argument	aft		5203264	0					
ANR	5203923	Identifier	aft		5203264	0					
ANR	5203924	Argument	aft		5203264	1					
ANR	5203925	Identifier	aft		5203264	0					
ANR	5203926	Argument	1		5203264	2					
ANR	5203927	PrimaryExpression	1		5203264	0					
ANR	5203928	BreakStatement	break ;	998:3:25325:25330	5203264	62	True				
ANR	5203929	Label	default :	999:2:25334:25341	5203264	63	True				
ANR	5203930	Identifier	default		5203264	0					
ANR	5203931	ExpressionStatement	"eprintf ( ""ops in regex.c\\n"" )"	1000:3:25364:25392	5203264	64	True				
ANR	5203932	CallExpression	"eprintf ( ""ops in regex.c\\n"" )"		5203264	0					
ANR	5203933	Callee	eprintf		5203264	0					
ANR	5203934	Identifier	eprintf		5203264	0					
ANR	5203935	ArgumentList	"""ops in regex.c\\n"""		5203264	1					
ANR	5203936	Argument	"""ops in regex.c\\n"""		5203264	0					
ANR	5203937	PrimaryExpression	"""ops in regex.c\\n"""		5203264	0					
ANR	5203938	BreakStatement	break ;	1001:3:25397:25402	5203264	65	True				
ANR	5203939	ReturnStatement	return ( aft ) ;	1005:1:25413:25424	5203264	7	True				
ANR	5203940	Identifier	aft		5203264	0					
ANR	5203941	ReturnType	static states		5203264	1					
ANR	5203942	Identifier	step		5203264	2					
ANR	5203943	ParameterList	"struct re_guts * g , sopno start , sopno stop , states bef , int ch , states aft"		5203264	3					
ANR	5203944	Parameter	struct re_guts * g	890:5:22801:22817	5203264	0	True				
ANR	5203945	ParameterType	struct re_guts *		5203264	0					
ANR	5203946	Identifier	g		5203264	1					
ANR	5203947	Parameter	sopno start	891:4:22824:22834	5203264	1	True				
ANR	5203948	ParameterType	sopno		5203264	0					
ANR	5203949	Identifier	start		5203264	1					
ANR	5203950	Parameter	sopno stop	892:4:22873:22882	5203264	2	True				
ANR	5203951	ParameterType	sopno		5203264	0					
ANR	5203952	Identifier	stop		5203264	1					
ANR	5203953	Parameter	states bef	893:4:22933:22942	5203264	3	True				
ANR	5203954	ParameterType	states		5203264	0					
ANR	5203955	Identifier	bef		5203264	1					
ANR	5203956	Parameter	int ch	894:4:22981:22986	5203264	4	True				
ANR	5203957	ParameterType	int		5203264	0					
ANR	5203958	Identifier	ch		5203264	1					
ANR	5203959	Parameter	states aft	895:4:23027:23036	5203264	5	True				
ANR	5203960	ParameterType	states		5203264	0					
ANR	5203961	Identifier	aft		5203264	1					
ANR	5203962	CFGEntryNode	ENTRY		5203264		True				
ANR	5203963	CFGExitNode	EXIT		5203264		True				
ANR	5203964	Symbol	here		5203264						
ANR	5203965	Symbol	bef		5203264						
ANR	5203966	Symbol	g -> sets		5203264						
ANR	5203967	Symbol	ISSTATEIN		5203264						
ANR	5203968	Symbol	g -> strip		5203264						
ANR	5203969	Symbol	CHIN		5203264						
ANR	5203970	Symbol	ISSETBACK		5203264						
ANR	5203971	Symbol	NONCHAR		5203264						
ANR	5203972	Symbol	BOL		5203264						
ANR	5203973	Symbol	* OPND		5203264						
ANR	5203974	Symbol	OP		5203264						
ANR	5203975	Symbol	EOL		5203264						
ANR	5203976	Symbol	* * g		5203264						
ANR	5203977	Symbol	ch		5203264						
ANR	5203978	Symbol	OOR2		5203264						
ANR	5203979	Symbol	g		5203264						
ANR	5203980	Symbol	start		5203264						
ANR	5203981	Symbol	i		5203264						
ANR	5203982	Symbol	* g -> strip		5203264						
ANR	5203983	Symbol	BOW		5203264						
ANR	5203984	Symbol	EOW		5203264						
ANR	5203985	Symbol	look		5203264						
ANR	5203986	Symbol	aft		5203264						
ANR	5203987	Symbol	cs		5203264						
ANR	5203988	Symbol	O_CH		5203264						
ANR	5203989	Symbol	* g		5203264						
ANR	5203990	Symbol	OPND		5203264						
ANR	5203991	Symbol	s		5203264						
ANR	5203992	Symbol	pc		5203264						
ANR	5203993	Symbol	stop		5203264						
ANR	5203994	Symbol	* look		5203264						
ANR	5203995	Symbol	* pc		5203264						
ANR	5203996	Symbol	BOLEOL		5203264						
ANR	5203997	Function	print	1012:0:25484:25903							
ANR	5203998	FunctionDef	"print (struct match * m , char * caption , states st , int ch , FILE * d)"		5203997	0					
ANR	5203999	CompoundStatement		1014:0:25562:25903	5203997	0					
ANR	5204000	IdentifierDeclStatement	struct re_guts * g = m -> g ;	1015:1:25565:25589	5203997	0	True				
ANR	5204001	IdentifierDecl	* g = m -> g		5203997	0					
ANR	5204002	IdentifierDeclType	struct re_guts *		5203997	0					
ANR	5204003	Identifier	g		5203997	1					
ANR	5204004	AssignmentExpression	* g = m -> g		5203997	2		=			
ANR	5204005	Identifier	g		5203997	0					
ANR	5204006	PtrMemberAccess	m -> g		5203997	1					
ANR	5204007	Identifier	m		5203997	0					
ANR	5204008	Identifier	g		5203997	1					
ANR	5204009	IdentifierDeclStatement	int i ;	1016:1:25592:25597	5203997	1	True				
ANR	5204010	IdentifierDecl	i		5203997	0					
ANR	5204011	IdentifierDeclType	int		5203997	0					
ANR	5204012	Identifier	i		5203997	1					
ANR	5204013	IdentifierDeclStatement	int first = 1 ;	1017:1:25600:25613	5203997	2	True				
ANR	5204014	IdentifierDecl	first = 1		5203997	0					
ANR	5204015	IdentifierDeclType	int		5203997	0					
ANR	5204016	Identifier	first		5203997	1					
ANR	5204017	AssignmentExpression	first = 1		5203997	2		=			
ANR	5204018	Identifier	first		5203997	0					
ANR	5204019	PrimaryExpression	1		5203997	1					
ANR	5204020	IfStatement	if ( ! ( m -> eflags & R_REGEX_TRACE ) )		5203997	3					
ANR	5204021	Condition	! ( m -> eflags & R_REGEX_TRACE )	1019:5:25621:25646	5203997	0	True				
ANR	5204022	UnaryOperationExpression	! ( m -> eflags & R_REGEX_TRACE )		5203997	0					
ANR	5204023	UnaryOperator	!		5203997	0					
ANR	5204024	BitAndExpression	m -> eflags & R_REGEX_TRACE		5203997	1		&			
ANR	5204025	PtrMemberAccess	m -> eflags		5203997	0					
ANR	5204026	Identifier	m		5203997	0					
ANR	5204027	Identifier	eflags		5203997	1					
ANR	5204028	Identifier	R_REGEX_TRACE		5203997	1					
ANR	5204029	ReturnStatement	return ;	1020:2:25651:25657	5203997	1	True				
ANR	5204030	ExpressionStatement	"( void ) fprintf ( d , ""%s"" , caption )"	1022:1:25661:25692	5203997	4	True				
ANR	5204031	CastExpression	"( void ) fprintf ( d , ""%s"" , caption )"		5203997	0					
ANR	5204032	CastTarget	void		5203997	0					
ANR	5204033	CallExpression	"fprintf ( d , ""%s"" , caption )"		5203997	1					
ANR	5204034	Callee	fprintf		5203997	0					
ANR	5204035	Identifier	fprintf		5203997	0					
ANR	5204036	ArgumentList	d		5203997	1					
ANR	5204037	Argument	d		5203997	0					
ANR	5204038	Identifier	d		5203997	0					
ANR	5204039	Argument	"""%s"""		5203997	1					
ANR	5204040	PrimaryExpression	"""%s"""		5203997	0					
ANR	5204041	Argument	caption		5203997	2					
ANR	5204042	Identifier	caption		5203997	0					
ANR	5204043	IfStatement	if ( ch != '\\0' )		5203997	5					
ANR	5204044	Condition	ch != '\\0'	1023:5:25699:25708	5203997	0	True				
ANR	5204045	EqualityExpression	ch != '\\0'		5203997	0		!=			
ANR	5204046	Identifier	ch		5203997	0					
ANR	5204047	PrimaryExpression	'\\0'		5203997	1					
ANR	5204048	ExpressionStatement	"( void ) fprintf ( d , "" %s"" , pchar ( ch ) )"	1024:2:25713:25747	5203997	1	True				
ANR	5204049	CastExpression	"( void ) fprintf ( d , "" %s"" , pchar ( ch ) )"		5203997	0					
ANR	5204050	CastTarget	void		5203997	0					
ANR	5204051	CallExpression	"fprintf ( d , "" %s"" , pchar ( ch ) )"		5203997	1					
ANR	5204052	Callee	fprintf		5203997	0					
ANR	5204053	Identifier	fprintf		5203997	0					
ANR	5204054	ArgumentList	d		5203997	1					
ANR	5204055	Argument	d		5203997	0					
ANR	5204056	Identifier	d		5203997	0					
ANR	5204057	Argument	""" %s"""		5203997	1					
ANR	5204058	PrimaryExpression	""" %s"""		5203997	0					
ANR	5204059	Argument	pchar ( ch )		5203997	2					
ANR	5204060	CallExpression	pchar ( ch )		5203997	0					
ANR	5204061	Callee	pchar		5203997	0					
ANR	5204062	Identifier	pchar		5203997	0					
ANR	5204063	ArgumentList	ch		5203997	1					
ANR	5204064	Argument	ch		5203997	0					
ANR	5204065	Identifier	ch		5203997	0					
ANR	5204066	ForStatement	for ( i = 0 ; i < g -> nstates ; i ++ )		5203997	6					
ANR	5204067	ForInit	i = 0 ;	1025:6:25755:25760	5203997	0	True				
ANR	5204068	AssignmentExpression	i = 0		5203997	0		=			
ANR	5204069	Identifier	i		5203997	0					
ANR	5204070	PrimaryExpression	0		5203997	1					
ANR	5204071	Condition	i < g -> nstates	1025:13:25762:25775	5203997	1	True				
ANR	5204072	RelationalExpression	i < g -> nstates		5203997	0		<			
ANR	5204073	Identifier	i		5203997	0					
ANR	5204074	PtrMemberAccess	g -> nstates		5203997	1					
ANR	5204075	Identifier	g		5203997	0					
ANR	5204076	Identifier	nstates		5203997	1					
ANR	5204077	PostIncDecOperationExpression	i ++	1025:29:25778:25780	5203997	2	True				
ANR	5204078	Identifier	i		5203997	0					
ANR	5204079	IncDec	++		5203997	1					
ANR	5204080	IfStatement	"if ( ISSET ( st , i ) )"		5203997	3					
ANR	5204081	Condition	"ISSET ( st , i )"	1026:6:25789:25800	5203997	0	True				
ANR	5204082	CallExpression	"ISSET ( st , i )"		5203997	0					
ANR	5204083	Callee	ISSET		5203997	0					
ANR	5204084	Identifier	ISSET		5203997	0					
ANR	5204085	ArgumentList	st		5203997	1					
ANR	5204086	Argument	st		5203997	0					
ANR	5204087	Identifier	st		5203997	0					
ANR	5204088	Argument	i		5203997	1					
ANR	5204089	Identifier	i		5203997	0					
ANR	5204090	CompoundStatement		13:20:240:240	5203997	1					
ANR	5204091	ExpressionStatement	"( void ) fprintf ( d , ""%s%d"" , ( first ) ? ""\\t"" : "", "" , i )"	1027:3:25808:25858	5203997	0	True				
ANR	5204092	CastExpression	"( void ) fprintf ( d , ""%s%d"" , ( first ) ? ""\\t"" : "", "" , i )"		5203997	0					
ANR	5204093	CastTarget	void		5203997	0					
ANR	5204094	CallExpression	"fprintf ( d , ""%s%d"" , ( first ) ? ""\\t"" : "", "" , i )"		5203997	1					
ANR	5204095	Callee	fprintf		5203997	0					
ANR	5204096	Identifier	fprintf		5203997	0					
ANR	5204097	ArgumentList	d		5203997	1					
ANR	5204098	Argument	d		5203997	0					
ANR	5204099	Identifier	d		5203997	0					
ANR	5204100	Argument	"""%s%d"""		5203997	1					
ANR	5204101	PrimaryExpression	"""%s%d"""		5203997	0					
ANR	5204102	Argument	"( first ) ? ""\\t"" : "", """		5203997	2					
ANR	5204103	ConditionalExpression	"( first ) ? ""\\t"" : "", """		5203997	0					
ANR	5204104	Condition	first		5203997	0					
ANR	5204105	Identifier	first		5203997	0					
ANR	5204106	PrimaryExpression	"""\\t"""		5203997	1					
ANR	5204107	PrimaryExpression	""", """		5203997	2					
ANR	5204108	Argument	i		5203997	3					
ANR	5204109	Identifier	i		5203997	0					
ANR	5204110	ExpressionStatement	first = 0	1028:3:25863:25872	5203997	1	True				
ANR	5204111	AssignmentExpression	first = 0		5203997	0		=			
ANR	5204112	Identifier	first		5203997	0					
ANR	5204113	PrimaryExpression	0		5203997	1					
ANR	5204114	ExpressionStatement	"( void ) fprintf ( d , ""\\n"" )"	1030:1:25879:25901	5203997	7	True				
ANR	5204115	CastExpression	"( void ) fprintf ( d , ""\\n"" )"		5203997	0					
ANR	5204116	CastTarget	void		5203997	0					
ANR	5204117	CallExpression	"fprintf ( d , ""\\n"" )"		5203997	1					
ANR	5204118	Callee	fprintf		5203997	0					
ANR	5204119	Identifier	fprintf		5203997	0					
ANR	5204120	ArgumentList	d		5203997	1					
ANR	5204121	Argument	d		5203997	0					
ANR	5204122	Identifier	d		5203997	0					
ANR	5204123	Argument	"""\\n"""		5203997	1					
ANR	5204124	PrimaryExpression	"""\\n"""		5203997	0					
ANR	5204125	ReturnType	static void		5203997	1					
ANR	5204126	Identifier	print		5203997	2					
ANR	5204127	ParameterList	"struct match * m , char * caption , states st , int ch , FILE * d"		5203997	3					
ANR	5204128	Parameter	struct match * m	1013:6:25502:25516	5203997	0	True				
ANR	5204129	ParameterType	struct match *		5203997	0					
ANR	5204130	Identifier	m		5203997	1					
ANR	5204131	Parameter	char * caption	1013:23:25519:25531	5203997	1	True				
ANR	5204132	ParameterType	char *		5203997	0					
ANR	5204133	Identifier	caption		5203997	1					
ANR	5204134	Parameter	states st	1013:38:25534:25542	5203997	2	True				
ANR	5204135	ParameterType	states		5203997	0					
ANR	5204136	Identifier	st		5203997	1					
ANR	5204137	Parameter	int ch	1013:49:25545:25550	5203997	3	True				
ANR	5204138	ParameterType	int		5203997	0					
ANR	5204139	Identifier	ch		5203997	1					
ANR	5204140	Parameter	FILE * d	1013:57:25553:25559	5203997	4	True				
ANR	5204141	ParameterType	FILE *		5203997	0					
ANR	5204142	Identifier	d		5203997	1					
ANR	5204143	CFGEntryNode	ENTRY		5203997		True				
ANR	5204144	CFGExitNode	EXIT		5203997		True				
ANR	5204145	Symbol	st		5203997						
ANR	5204146	Symbol	R_REGEX_TRACE		5203997						
ANR	5204147	Symbol	d		5203997						
ANR	5204148	Symbol	ch		5203997						
ANR	5204149	Symbol	g		5203997						
ANR	5204150	Symbol	caption		5203997						
ANR	5204151	Symbol	i		5203997						
ANR	5204152	Symbol	m		5203997						
ANR	5204153	Symbol	m -> eflags		5203997						
ANR	5204154	Symbol	* g		5203997						
ANR	5204155	Symbol	m -> g		5203997						
ANR	5204156	Symbol	ISSET		5203997						
ANR	5204157	Symbol	g -> nstates		5203997						
ANR	5204158	Symbol	* m		5203997						
ANR	5204159	Symbol	first		5203997						
ANR	5204160	Symbol	pchar		5203997						
ANR	5204161	Function	at	1036:0:25945:26234							
ANR	5204162	FunctionDef	"at (struct match * m , char * title , char * start , char * stop , sopno startst , sopno stopst)"		5204161	0					
ANR	5204163	CompoundStatement		1039:0:26048:26234	5204161	0					
ANR	5204164	IfStatement	if ( ! ( m -> eflags & R_REGEX_TRACE ) )		5204161	0					
ANR	5204165	Condition	! ( m -> eflags & R_REGEX_TRACE )	1040:5:26055:26080	5204161	0	True				
ANR	5204166	UnaryOperationExpression	! ( m -> eflags & R_REGEX_TRACE )		5204161	0					
ANR	5204167	UnaryOperator	!		5204161	0					
ANR	5204168	BitAndExpression	m -> eflags & R_REGEX_TRACE		5204161	1		&			
ANR	5204169	PtrMemberAccess	m -> eflags		5204161	0					
ANR	5204170	Identifier	m		5204161	0					
ANR	5204171	Identifier	eflags		5204161	1					
ANR	5204172	Identifier	R_REGEX_TRACE		5204161	1					
ANR	5204173	ReturnStatement	return ;	1041:2:26085:26091	5204161	1	True				
ANR	5204174	ExpressionStatement	"( void ) printf ( ""%s %s-"" , title , pchar ( * start ) )"	1043:1:26095:26139	5204161	1	True				
ANR	5204175	CastExpression	"( void ) printf ( ""%s %s-"" , title , pchar ( * start ) )"		5204161	0					
ANR	5204176	CastTarget	void		5204161	0					
ANR	5204177	CallExpression	"printf ( ""%s %s-"" , title , pchar ( * start ) )"		5204161	1					
ANR	5204178	Callee	printf		5204161	0					
ANR	5204179	Identifier	printf		5204161	0					
ANR	5204180	ArgumentList	"""%s %s-"""		5204161	1					
ANR	5204181	Argument	"""%s %s-"""		5204161	0					
ANR	5204182	PrimaryExpression	"""%s %s-"""		5204161	0					
ANR	5204183	Argument	title		5204161	1					
ANR	5204184	Identifier	title		5204161	0					
ANR	5204185	Argument	pchar ( * start )		5204161	2					
ANR	5204186	CallExpression	pchar ( * start )		5204161	0					
ANR	5204187	Callee	pchar		5204161	0					
ANR	5204188	Identifier	pchar		5204161	0					
ANR	5204189	ArgumentList	* start		5204161	1					
ANR	5204190	Argument	* start		5204161	0					
ANR	5204191	UnaryOperationExpression	* start		5204161	0					
ANR	5204192	UnaryOperator	*		5204161	0					
ANR	5204193	Identifier	start		5204161	1					
ANR	5204194	ExpressionStatement	"( void ) printf ( ""%s "" , pchar ( * stop ) )"	1044:1:26142:26175	5204161	2	True				
ANR	5204195	CastExpression	"( void ) printf ( ""%s "" , pchar ( * stop ) )"		5204161	0					
ANR	5204196	CastTarget	void		5204161	0					
ANR	5204197	CallExpression	"printf ( ""%s "" , pchar ( * stop ) )"		5204161	1					
ANR	5204198	Callee	printf		5204161	0					
ANR	5204199	Identifier	printf		5204161	0					
ANR	5204200	ArgumentList	"""%s """		5204161	1					
ANR	5204201	Argument	"""%s """		5204161	0					
ANR	5204202	PrimaryExpression	"""%s """		5204161	0					
ANR	5204203	Argument	pchar ( * stop )		5204161	1					
ANR	5204204	CallExpression	pchar ( * stop )		5204161	0					
ANR	5204205	Callee	pchar		5204161	0					
ANR	5204206	Identifier	pchar		5204161	0					
ANR	5204207	ArgumentList	* stop		5204161	1					
ANR	5204208	Argument	* stop		5204161	0					
ANR	5204209	UnaryOperationExpression	* stop		5204161	0					
ANR	5204210	UnaryOperator	*		5204161	0					
ANR	5204211	Identifier	stop		5204161	1					
ANR	5204212	ExpressionStatement	"( void ) printf ( ""%ld-%ld\\n"" , ( long ) startst , ( long ) stopst )"	1045:1:26178:26232	5204161	3	True				
ANR	5204213	CastExpression	"( void ) printf ( ""%ld-%ld\\n"" , ( long ) startst , ( long ) stopst )"		5204161	0					
ANR	5204214	CastTarget	void		5204161	0					
ANR	5204215	CallExpression	"printf ( ""%ld-%ld\\n"" , ( long ) startst , ( long ) stopst )"		5204161	1					
ANR	5204216	Callee	printf		5204161	0					
ANR	5204217	Identifier	printf		5204161	0					
ANR	5204218	ArgumentList	"""%ld-%ld\\n"""		5204161	1					
ANR	5204219	Argument	"""%ld-%ld\\n"""		5204161	0					
ANR	5204220	PrimaryExpression	"""%ld-%ld\\n"""		5204161	0					
ANR	5204221	Argument	( long ) startst		5204161	1					
ANR	5204222	CastExpression	( long ) startst		5204161	0					
ANR	5204223	CastTarget	long		5204161	0					
ANR	5204224	Identifier	startst		5204161	1					
ANR	5204225	Argument	( long ) stopst		5204161	2					
ANR	5204226	CastExpression	( long ) stopst		5204161	0					
ANR	5204227	CastTarget	long		5204161	0					
ANR	5204228	Identifier	stopst		5204161	1					
ANR	5204229	ReturnType	static void		5204161	1					
ANR	5204230	Identifier	at		5204161	2					
ANR	5204231	ParameterList	"struct match * m , char * title , char * start , char * stop , sopno startst , sopno stopst"		5204161	3					
ANR	5204232	Parameter	struct match * m	1037:3:25960:25974	5204161	0	True				
ANR	5204233	ParameterType	struct match *		5204161	0					
ANR	5204234	Identifier	m		5204161	1					
ANR	5204235	Parameter	char * title	1037:20:25977:25987	5204161	1	True				
ANR	5204236	ParameterType	char *		5204161	0					
ANR	5204237	Identifier	title		5204161	1					
ANR	5204238	Parameter	char * start	1037:33:25990:26000	5204161	2	True				
ANR	5204239	ParameterType	char *		5204161	0					
ANR	5204240	Identifier	start		5204161	1					
ANR	5204241	Parameter	char * stop	1037:46:26003:26012	5204161	3	True				
ANR	5204242	ParameterType	char *		5204161	0					
ANR	5204243	Identifier	stop		5204161	1					
ANR	5204244	Parameter	sopno startst	1037:58:26015:26027	5204161	4	True				
ANR	5204245	ParameterType	sopno		5204161	0					
ANR	5204246	Identifier	startst		5204161	1					
ANR	5204247	Parameter	sopno stopst	1038:4:26034:26045	5204161	5	True				
ANR	5204248	ParameterType	sopno		5204161	0					
ANR	5204249	Identifier	stopst		5204161	1					
ANR	5204250	CFGEntryNode	ENTRY		5204161		True				
ANR	5204251	CFGExitNode	EXIT		5204161		True				
ANR	5204252	Symbol	m -> eflags		5204161						
ANR	5204253	Symbol	R_REGEX_TRACE		5204161						
ANR	5204254	Symbol	stop		5204161						
ANR	5204255	Symbol	stopst		5204161						
ANR	5204256	Symbol	* m		5204161						
ANR	5204257	Symbol	* start		5204161						
ANR	5204258	Symbol	start		5204161						
ANR	5204259	Symbol	startst		5204161						
ANR	5204260	Symbol	title		5204161						
ANR	5204261	Symbol	* stop		5204161						
ANR	5204262	Symbol	m		5204161						
ANR	5204263	Symbol	pchar		5204161						
ANR	5204264	Function	pchar	1058:0:26612:26845							
ANR	5204265	FunctionDef	pchar (int ch)		5204264	0					
ANR	5204266	CompoundStatement		1060:0:26666:26845	5204264	0					
ANR	5204267	Statement	static	1061:1:26669:26674	5204264	0	True				
ANR	5204268	IdentifierDeclStatement	char pbuf [ 10 ] ;	1061:8:26676:26689	5204264	1	True				
ANR	5204269	IdentifierDecl	pbuf [ 10 ]		5204264	0					
ANR	5204270	IdentifierDeclType	char [ 10 ]		5204264	0					
ANR	5204271	Identifier	pbuf		5204264	1					
ANR	5204272	PrimaryExpression	10		5204264	2					
ANR	5204273	IfStatement	if ( isprint ( ( ut8 ) ch ) || ch == ' ' )		5204264	2					
ANR	5204274	Condition	isprint ( ( ut8 ) ch ) || ch == ' '	1063:5:26697:26725	5204264	0	True				
ANR	5204275	OrExpression	isprint ( ( ut8 ) ch ) || ch == ' '		5204264	0		||			
ANR	5204276	CallExpression	isprint ( ( ut8 ) ch )		5204264	0					
ANR	5204277	Callee	isprint		5204264	0					
ANR	5204278	Identifier	isprint		5204264	0					
ANR	5204279	ArgumentList	( ut8 ) ch		5204264	1					
ANR	5204280	Argument	( ut8 ) ch		5204264	0					
ANR	5204281	CastExpression	( ut8 ) ch		5204264	0					
ANR	5204282	CastTarget	ut8		5204264	0					
ANR	5204283	Identifier	ch		5204264	1					
ANR	5204284	EqualityExpression	ch == ' '		5204264	1		==			
ANR	5204285	Identifier	ch		5204264	0					
ANR	5204286	PrimaryExpression	' '		5204264	1					
ANR	5204287	ExpressionStatement	"( void ) snprintf ( pbuf , sizeof pbuf , ""%c"" , ch )"	1064:2:26730:26773	5204264	1	True				
ANR	5204288	CastExpression	"( void ) snprintf ( pbuf , sizeof pbuf , ""%c"" , ch )"		5204264	0					
ANR	5204289	CastTarget	void		5204264	0					
ANR	5204290	CallExpression	"snprintf ( pbuf , sizeof pbuf , ""%c"" , ch )"		5204264	1					
ANR	5204291	Callee	snprintf		5204264	0					
ANR	5204292	Identifier	snprintf		5204264	0					
ANR	5204293	ArgumentList	pbuf		5204264	1					
ANR	5204294	Argument	pbuf		5204264	0					
ANR	5204295	Identifier	pbuf		5204264	0					
ANR	5204296	Argument	sizeof pbuf		5204264	1					
ANR	5204297	SizeofExpression	sizeof pbuf		5204264	0					
ANR	5204298	Sizeof	sizeof		5204264	0					
ANR	5204299	Identifier	pbuf		5204264	1					
ANR	5204300	Argument	"""%c"""		5204264	2					
ANR	5204301	PrimaryExpression	"""%c"""		5204264	0					
ANR	5204302	Argument	ch		5204264	3					
ANR	5204303	Identifier	ch		5204264	0					
ANR	5204304	ElseStatement	else		5204264	0					
ANR	5204305	ExpressionStatement	"( void ) snprintf ( pbuf , sizeof pbuf , ""\\\\%o"" , ch )"	1066:2:26783:26828	5204264	0	True				
ANR	5204306	CastExpression	"( void ) snprintf ( pbuf , sizeof pbuf , ""\\\\%o"" , ch )"		5204264	0					
ANR	5204307	CastTarget	void		5204264	0					
ANR	5204308	CallExpression	"snprintf ( pbuf , sizeof pbuf , ""\\\\%o"" , ch )"		5204264	1					
ANR	5204309	Callee	snprintf		5204264	0					
ANR	5204310	Identifier	snprintf		5204264	0					
ANR	5204311	ArgumentList	pbuf		5204264	1					
ANR	5204312	Argument	pbuf		5204264	0					
ANR	5204313	Identifier	pbuf		5204264	0					
ANR	5204314	Argument	sizeof pbuf		5204264	1					
ANR	5204315	SizeofExpression	sizeof pbuf		5204264	0					
ANR	5204316	Sizeof	sizeof		5204264	0					
ANR	5204317	Identifier	pbuf		5204264	1					
ANR	5204318	Argument	"""\\\\%o"""		5204264	2					
ANR	5204319	PrimaryExpression	"""\\\\%o"""		5204264	0					
ANR	5204320	Argument	ch		5204264	3					
ANR	5204321	Identifier	ch		5204264	0					
ANR	5204322	ReturnStatement	return ( pbuf ) ;	1067:1:26831:26843	5204264	3	True				
ANR	5204323	Identifier	pbuf		5204264	0					
ANR	5204324	ReturnType	static char *		5204264	1					
ANR	5204325	Identifier	pchar		5204264	2					
ANR	5204326	ParameterList	int ch		5204264	3					
ANR	5204327	Parameter	int ch	1059:6:26658:26663	5204264	0	True				
ANR	5204328	ParameterType	int		5204264	0					
ANR	5204329	Identifier	ch		5204264	1					
ANR	5204330	CFGEntryNode	ENTRY		5204264		True				
ANR	5204331	CFGExitNode	EXIT		5204264		True				
ANR	5204332	Symbol	ch		5204264						
ANR	5204333	Symbol	pbuf		5204264						
ANR	5204334	Symbol	isprint		5204264						
