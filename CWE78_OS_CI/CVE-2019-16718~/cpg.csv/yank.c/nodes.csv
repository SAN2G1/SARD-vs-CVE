command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6599126	File	data/converged/CVE-2019-16718~_radare2/yank.c								
ANR	6599127	DeclStmt									
ANR	6599128	Decl							int	"int ( RCore * core , ut64 offset , ut64 len , const char * filename )"	perform_mapped_file_yank
ANR	6599129	DeclStmt									
ANR	6599130	Decl							ut32	"ut32 ( const char * input , char b )"	find_next_char
ANR	6599131	DeclStmt									
ANR	6599132	Decl							ut32	"ut32 ( const char * input , char b )"	consume_chars
ANR	6599133	Function	find_next_char	15:0:510:676							
ANR	6599134	FunctionDef	"find_next_char (const char * input , char b)"		6599133	0					
ANR	6599135	CompoundStatement		15:54:564:676	6599133	0					
ANR	6599136	IdentifierDeclStatement	ut32 i = 0 ;	16:1:567:577	6599133	0	True				
ANR	6599137	IdentifierDecl	i = 0		6599133	0					
ANR	6599138	IdentifierDeclType	ut32		6599133	0					
ANR	6599139	Identifier	i		6599133	1					
ANR	6599140	AssignmentExpression	i = 0		6599133	2		=			
ANR	6599141	Identifier	i		6599133	0					
ANR	6599142	PrimaryExpression	0		6599133	1					
ANR	6599143	IfStatement	if ( ! input )		6599133	1					
ANR	6599144	Condition	! input	17:5:584:589	6599133	0	True				
ANR	6599145	UnaryOperationExpression	! input		6599133	0					
ANR	6599146	UnaryOperator	!		6599133	0					
ANR	6599147	Identifier	input		6599133	1					
ANR	6599148	CompoundStatement		3:13:27:27	6599133	1					
ANR	6599149	ReturnStatement	return i ;	18:2:596:604	6599133	0	True				
ANR	6599150	Identifier	i		6599133	0					
ANR	6599151	ForStatement	"for ( ; * input != b ; i ++ , input ++ )"		6599133	2					
ANR	6599152	Condition	* input != b	20:8:617:627	6599133	0	True				
ANR	6599153	EqualityExpression	* input != b		6599133	0		!=			
ANR	6599154	UnaryOperationExpression	* input		6599133	0					
ANR	6599155	UnaryOperator	*		6599133	0					
ANR	6599156	Identifier	input		6599133	1					
ANR	6599157	Identifier	b		6599133	1					
ANR	6599158	Expression	"i ++ , input ++"	20:21:630:641	6599133	1	True				
ANR	6599159	PostIncDecOperationExpression	i ++		6599133	0					
ANR	6599160	Identifier	i		6599133	0					
ANR	6599161	IncDec	++		6599133	1					
ANR	6599162	PostIncDecOperationExpression	input ++		6599133	1					
ANR	6599163	Identifier	input		6599133	0					
ANR	6599164	IncDec	++		6599133	1					
ANR	6599165	CompoundStatement		6:35:79:79	6599133	2					
ANR	6599166	ReturnStatement	return i ;	23:1:666:674	6599133	3	True				
ANR	6599167	Identifier	i		6599133	0					
ANR	6599168	ReturnType	static ut32		6599133	1					
ANR	6599169	Identifier	find_next_char		6599133	2					
ANR	6599170	ParameterList	"const char * input , char b"		6599133	3					
ANR	6599171	Parameter	const char * input	15:27:537:553	6599133	0	True				
ANR	6599172	ParameterType	const char *		6599133	0					
ANR	6599173	Identifier	input		6599133	1					
ANR	6599174	Parameter	char b	15:46:556:561	6599133	1	True				
ANR	6599175	ParameterType	char		6599133	0					
ANR	6599176	Identifier	b		6599133	1					
ANR	6599177	CFGEntryNode	ENTRY		6599133		True				
ANR	6599178	CFGExitNode	EXIT		6599133		True				
ANR	6599179	Symbol	input		6599133						
ANR	6599180	Symbol	b		6599133						
ANR	6599181	Symbol	* input		6599133						
ANR	6599182	Symbol	i		6599133						
ANR	6599183	Function	consume_chars	26:0:679:844							
ANR	6599184	FunctionDef	"consume_chars (const char * input , char b)"		6599183	0					
ANR	6599185	CompoundStatement		26:53:732:844	6599183	0					
ANR	6599186	IdentifierDeclStatement	ut32 i = 0 ;	27:1:735:745	6599183	0	True				
ANR	6599187	IdentifierDecl	i = 0		6599183	0					
ANR	6599188	IdentifierDeclType	ut32		6599183	0					
ANR	6599189	Identifier	i		6599183	1					
ANR	6599190	AssignmentExpression	i = 0		6599183	2		=			
ANR	6599191	Identifier	i		6599183	0					
ANR	6599192	PrimaryExpression	0		6599183	1					
ANR	6599193	IfStatement	if ( ! input )		6599183	1					
ANR	6599194	Condition	! input	28:5:752:757	6599183	0	True				
ANR	6599195	UnaryOperationExpression	! input		6599183	0					
ANR	6599196	UnaryOperator	!		6599183	0					
ANR	6599197	Identifier	input		6599183	1					
ANR	6599198	CompoundStatement		3:13:27:27	6599183	1					
ANR	6599199	ReturnStatement	return i ;	29:2:764:772	6599183	0	True				
ANR	6599200	Identifier	i		6599183	0					
ANR	6599201	ForStatement	"for ( ; * input == b ; i ++ , input ++ )"		6599183	2					
ANR	6599202	Condition	* input == b	31:8:785:795	6599183	0	True				
ANR	6599203	EqualityExpression	* input == b		6599183	0		==			
ANR	6599204	UnaryOperationExpression	* input		6599183	0					
ANR	6599205	UnaryOperator	*		6599183	0					
ANR	6599206	Identifier	input		6599183	1					
ANR	6599207	Identifier	b		6599183	1					
ANR	6599208	Expression	"i ++ , input ++"	31:21:798:809	6599183	1	True				
ANR	6599209	PostIncDecOperationExpression	i ++		6599183	0					
ANR	6599210	Identifier	i		6599183	0					
ANR	6599211	IncDec	++		6599183	1					
ANR	6599212	PostIncDecOperationExpression	input ++		6599183	1					
ANR	6599213	Identifier	input		6599183	0					
ANR	6599214	IncDec	++		6599183	1					
ANR	6599215	CompoundStatement		6:35:79:79	6599183	2					
ANR	6599216	ReturnStatement	return i ;	34:1:834:842	6599183	3	True				
ANR	6599217	Identifier	i		6599183	0					
ANR	6599218	ReturnType	static ut32		6599183	1					
ANR	6599219	Identifier	consume_chars		6599183	2					
ANR	6599220	ParameterList	"const char * input , char b"		6599183	3					
ANR	6599221	Parameter	const char * input	26:26:705:721	6599183	0	True				
ANR	6599222	ParameterType	const char *		6599183	0					
ANR	6599223	Identifier	input		6599183	1					
ANR	6599224	Parameter	char b	26:45:724:729	6599183	1	True				
ANR	6599225	ParameterType	char		6599183	0					
ANR	6599226	Identifier	b		6599183	1					
ANR	6599227	CFGEntryNode	ENTRY		6599183		True				
ANR	6599228	CFGExitNode	EXIT		6599183		True				
ANR	6599229	Symbol	input		6599183						
ANR	6599230	Symbol	b		6599183						
ANR	6599231	Symbol	* input		6599183						
ANR	6599232	Symbol	i		6599183						
ANR	6599233	Function	perform_mapped_file_yank	37:0:847:3111							
ANR	6599234	FunctionDef	"perform_mapped_file_yank (RCore * core , ut64 offset , ut64 len , const char * filename)"		6599233	0					
ANR	6599235	CompoundStatement		37:94:941:3111	6599233	0					
ANR	6599236	IdentifierDeclStatement	RIODesc * yankdesc = NULL ;	40:1:1044:1068	6599233	0	True				
ANR	6599237	IdentifierDecl	* yankdesc = NULL		6599233	0					
ANR	6599238	IdentifierDeclType	RIODesc *		6599233	0					
ANR	6599239	Identifier	yankdesc		6599233	1					
ANR	6599240	AssignmentExpression	* yankdesc = NULL		6599233	2		=			
ANR	6599241	Identifier	NULL		6599233	0					
ANR	6599242	Identifier	NULL		6599233	1					
ANR	6599243	IdentifierDeclStatement	"ut64 fd = core -> file ? core -> file -> fd : - 1 , yank_file_sz = 0 , loadaddr = 0 , addr = offset ;"	41:1:1071:1164	6599233	1	True				
ANR	6599244	IdentifierDecl	fd = core -> file ? core -> file -> fd : - 1		6599233	0					
ANR	6599245	IdentifierDeclType	ut64		6599233	0					
ANR	6599246	Identifier	fd		6599233	1					
ANR	6599247	AssignmentExpression	fd = core -> file ? core -> file -> fd : - 1		6599233	2		=			
ANR	6599248	Identifier	fd		6599233	0					
ANR	6599249	ConditionalExpression	core -> file ? core -> file -> fd : - 1		6599233	1					
ANR	6599250	Condition	core -> file		6599233	0					
ANR	6599251	PtrMemberAccess	core -> file		6599233	0					
ANR	6599252	Identifier	core		6599233	0					
ANR	6599253	Identifier	file		6599233	1					
ANR	6599254	PtrMemberAccess	core -> file -> fd		6599233	1					
ANR	6599255	PtrMemberAccess	core -> file		6599233	0					
ANR	6599256	Identifier	core		6599233	0					
ANR	6599257	Identifier	file		6599233	1					
ANR	6599258	Identifier	fd		6599233	1					
ANR	6599259	UnaryOperationExpression	- 1		6599233	2					
ANR	6599260	UnaryOperator	-		6599233	0					
ANR	6599261	PrimaryExpression	1		6599233	1					
ANR	6599262	IdentifierDecl	yank_file_sz = 0		6599233	1					
ANR	6599263	IdentifierDeclType	ut64		6599233	0					
ANR	6599264	Identifier	yank_file_sz		6599233	1					
ANR	6599265	AssignmentExpression	yank_file_sz = 0		6599233	2		=			
ANR	6599266	Identifier	yank_file_sz		6599233	0					
ANR	6599267	PrimaryExpression	0		6599233	1					
ANR	6599268	IdentifierDecl	loadaddr = 0		6599233	2					
ANR	6599269	IdentifierDeclType	ut64		6599233	0					
ANR	6599270	Identifier	loadaddr		6599233	1					
ANR	6599271	AssignmentExpression	loadaddr = 0		6599233	2		=			
ANR	6599272	Identifier	loadaddr		6599233	0					
ANR	6599273	PrimaryExpression	0		6599233	1					
ANR	6599274	IdentifierDecl	addr = offset		6599233	3					
ANR	6599275	IdentifierDeclType	ut64		6599233	0					
ANR	6599276	Identifier	addr		6599233	1					
ANR	6599277	AssignmentExpression	addr = offset		6599233	2		=			
ANR	6599278	Identifier	offset		6599233	0					
ANR	6599279	Identifier	offset		6599233	1					
ANR	6599280	IdentifierDeclStatement	int res = false ;	43:1:1167:1182	6599233	2	True				
ANR	6599281	IdentifierDecl	res = false		6599233	0					
ANR	6599282	IdentifierDeclType	int		6599233	0					
ANR	6599283	Identifier	res		6599233	1					
ANR	6599284	AssignmentExpression	res = false		6599233	2		=			
ANR	6599285	Identifier	false		6599233	0					
ANR	6599286	Identifier	false		6599233	1					
ANR	6599287	IfStatement	if ( filename && * filename )		6599233	3					
ANR	6599288	Condition	filename && * filename	45:5:1190:1210	6599233	0	True				
ANR	6599289	AndExpression	filename && * filename		6599233	0		&&			
ANR	6599290	Identifier	filename		6599233	0					
ANR	6599291	UnaryOperationExpression	* filename		6599233	1					
ANR	6599292	UnaryOperator	*		6599233	0					
ANR	6599293	Identifier	filename		6599233	1					
ANR	6599294	CompoundStatement		11:2:344:362	6599233	1					
ANR	6599295	IdentifierDeclStatement	"ut64 load_align = r_config_get_i ( core -> config , ""file.loadalign"" ) ;"	46:2:1217:1282	6599233	0	True				
ANR	6599296	IdentifierDecl	"load_align = r_config_get_i ( core -> config , ""file.loadalign"" )"		6599233	0					
ANR	6599297	IdentifierDeclType	ut64		6599233	0					
ANR	6599298	Identifier	load_align		6599233	1					
ANR	6599299	AssignmentExpression	"load_align = r_config_get_i ( core -> config , ""file.loadalign"" )"		6599233	2		=			
ANR	6599300	Identifier	load_align		6599233	0					
ANR	6599301	CallExpression	"r_config_get_i ( core -> config , ""file.loadalign"" )"		6599233	1					
ANR	6599302	Callee	r_config_get_i		6599233	0					
ANR	6599303	Identifier	r_config_get_i		6599233	0					
ANR	6599304	ArgumentList	core -> config		6599233	1					
ANR	6599305	Argument	core -> config		6599233	0					
ANR	6599306	PtrMemberAccess	core -> config		6599233	0					
ANR	6599307	Identifier	core		6599233	0					
ANR	6599308	Identifier	config		6599233	1					
ANR	6599309	Argument	"""file.loadalign"""		6599233	1					
ANR	6599310	PrimaryExpression	"""file.loadalign"""		6599233	0					
ANR	6599311	IdentifierDeclStatement	RIOMap * map = NULL ;	47:2:1286:1304	6599233	1	True				
ANR	6599312	IdentifierDecl	* map = NULL		6599233	0					
ANR	6599313	IdentifierDeclType	RIOMap *		6599233	0					
ANR	6599314	Identifier	map		6599233	1					
ANR	6599315	AssignmentExpression	* map = NULL		6599233	2		=			
ANR	6599316	Identifier	NULL		6599233	0					
ANR	6599317	Identifier	NULL		6599233	1					
ANR	6599318	ExpressionStatement	"yankdesc = r_io_open_nomap ( core -> io , filename , R_PERM_R , 0644 )"	48:2:1308:1371	6599233	2	True				
ANR	6599319	AssignmentExpression	"yankdesc = r_io_open_nomap ( core -> io , filename , R_PERM_R , 0644 )"		6599233	0		=			
ANR	6599320	Identifier	yankdesc		6599233	0					
ANR	6599321	CallExpression	"r_io_open_nomap ( core -> io , filename , R_PERM_R , 0644 )"		6599233	1					
ANR	6599322	Callee	r_io_open_nomap		6599233	0					
ANR	6599323	Identifier	r_io_open_nomap		6599233	0					
ANR	6599324	ArgumentList	core -> io		6599233	1					
ANR	6599325	Argument	core -> io		6599233	0					
ANR	6599326	PtrMemberAccess	core -> io		6599233	0					
ANR	6599327	Identifier	core		6599233	0					
ANR	6599328	Identifier	io		6599233	1					
ANR	6599329	Argument	filename		6599233	1					
ANR	6599330	Identifier	filename		6599233	0					
ANR	6599331	Argument	R_PERM_R		6599233	2					
ANR	6599332	Identifier	R_PERM_R		6599233	0					
ANR	6599333	Argument	0644		6599233	3					
ANR	6599334	PrimaryExpression	0644		6599233	0					
ANR	6599335	IfStatement	if ( yankdesc && load_align )		6599233	3					
ANR	6599336	Condition	yankdesc && load_align	50:6:1419:1440	6599233	0	True				
ANR	6599337	AndExpression	yankdesc && load_align		6599233	0		&&			
ANR	6599338	Identifier	yankdesc		6599233	0					
ANR	6599339	Identifier	load_align		6599233	1					
ANR	6599340	CompoundStatement		14:30:501:501	6599233	1					
ANR	6599341	ExpressionStatement	yank_file_sz = r_io_size ( core -> io )	51:3:1448:1483	6599233	0	True				
ANR	6599342	AssignmentExpression	yank_file_sz = r_io_size ( core -> io )		6599233	0		=			
ANR	6599343	Identifier	yank_file_sz		6599233	0					
ANR	6599344	CallExpression	r_io_size ( core -> io )		6599233	1					
ANR	6599345	Callee	r_io_size		6599233	0					
ANR	6599346	Identifier	r_io_size		6599233	0					
ANR	6599347	ArgumentList	core -> io		6599233	1					
ANR	6599348	Argument	core -> io		6599233	0					
ANR	6599349	PtrMemberAccess	core -> io		6599233	0					
ANR	6599350	Identifier	core		6599233	0					
ANR	6599351	Identifier	io		6599233	1					
ANR	6599352	ExpressionStatement	"map = r_io_map_add_next_available ( core -> io , yankdesc -> fd , R_PERM_R , 0 , 0 , yank_file_sz , load_align )"	52:3:1488:1588	6599233	1	True				
ANR	6599353	AssignmentExpression	"map = r_io_map_add_next_available ( core -> io , yankdesc -> fd , R_PERM_R , 0 , 0 , yank_file_sz , load_align )"		6599233	0		=			
ANR	6599354	Identifier	map		6599233	0					
ANR	6599355	CallExpression	"r_io_map_add_next_available ( core -> io , yankdesc -> fd , R_PERM_R , 0 , 0 , yank_file_sz , load_align )"		6599233	1					
ANR	6599356	Callee	r_io_map_add_next_available		6599233	0					
ANR	6599357	Identifier	r_io_map_add_next_available		6599233	0					
ANR	6599358	ArgumentList	core -> io		6599233	1					
ANR	6599359	Argument	core -> io		6599233	0					
ANR	6599360	PtrMemberAccess	core -> io		6599233	0					
ANR	6599361	Identifier	core		6599233	0					
ANR	6599362	Identifier	io		6599233	1					
ANR	6599363	Argument	yankdesc -> fd		6599233	1					
ANR	6599364	PtrMemberAccess	yankdesc -> fd		6599233	0					
ANR	6599365	Identifier	yankdesc		6599233	0					
ANR	6599366	Identifier	fd		6599233	1					
ANR	6599367	Argument	R_PERM_R		6599233	2					
ANR	6599368	Identifier	R_PERM_R		6599233	0					
ANR	6599369	Argument	0		6599233	3					
ANR	6599370	PrimaryExpression	0		6599233	0					
ANR	6599371	Argument	0		6599233	4					
ANR	6599372	PrimaryExpression	0		6599233	0					
ANR	6599373	Argument	yank_file_sz		6599233	5					
ANR	6599374	Identifier	yank_file_sz		6599233	0					
ANR	6599375	Argument	load_align		6599233	6					
ANR	6599376	Identifier	load_align		6599233	0					
ANR	6599377	ExpressionStatement	loadaddr = map ? map -> itv . addr : - 1	53:3:1593:1626	6599233	2	True				
ANR	6599378	AssignmentExpression	loadaddr = map ? map -> itv . addr : - 1		6599233	0		=			
ANR	6599379	Identifier	loadaddr		6599233	0					
ANR	6599380	ConditionalExpression	map ? map -> itv . addr : - 1		6599233	1					
ANR	6599381	Condition	map		6599233	0					
ANR	6599382	Identifier	map		6599233	0					
ANR	6599383	MemberAccess	map -> itv . addr		6599233	1					
ANR	6599384	PtrMemberAccess	map -> itv		6599233	0					
ANR	6599385	Identifier	map		6599233	0					
ANR	6599386	Identifier	itv		6599233	1					
ANR	6599387	Identifier	addr		6599233	1					
ANR	6599388	UnaryOperationExpression	- 1		6599233	2					
ANR	6599389	UnaryOperator	-		6599233	0					
ANR	6599390	PrimaryExpression	1		6599233	1					
ANR	6599391	IfStatement	if ( yankdesc && map && loadaddr != - 1 )		6599233	3					
ANR	6599392	Condition	yankdesc && map && loadaddr != - 1	54:7:1635:1667	6599233	0	True				
ANR	6599393	AndExpression	yankdesc && map && loadaddr != - 1		6599233	0		&&			
ANR	6599394	Identifier	yankdesc		6599233	0					
ANR	6599395	AndExpression	map && loadaddr != - 1		6599233	1		&&			
ANR	6599396	Identifier	map		6599233	0					
ANR	6599397	EqualityExpression	loadaddr != - 1		6599233	1		!=			
ANR	6599398	Identifier	loadaddr		6599233	0					
ANR	6599399	UnaryOperationExpression	- 1		6599233	1					
ANR	6599400	UnaryOperator	-		6599233	0					
ANR	6599401	PrimaryExpression	1		6599233	1					
ANR	6599402	CompoundStatement		18:42:728:728	6599233	1					
ANR	6599403	ExpressionStatement	addr += loadaddr	57:4:1773:1789	6599233	0	True				
ANR	6599404	AssignmentExpression	addr += loadaddr		6599233	0		+=			
ANR	6599405	Identifier	addr		6599233	0					
ANR	6599406	Identifier	loadaddr		6599233	1					
ANR	6599407	ElseStatement	else		6599233	0					
ANR	6599408	IfStatement	if ( yankdesc )		6599233	0					
ANR	6599409	Condition	yankdesc	58:14:1805:1812	6599233	0	True				
ANR	6599410	Identifier	yankdesc		6599233	0					
ANR	6599411	CompoundStatement		22:24:873:873	6599233	1					
ANR	6599412	ExpressionStatement	"eprintf ( ""Unable to map the opened file: %s"" , filename )"	59:4:1821:1876	6599233	0	True				
ANR	6599413	CallExpression	"eprintf ( ""Unable to map the opened file: %s"" , filename )"		6599233	0					
ANR	6599414	Callee	eprintf		6599233	0					
ANR	6599415	Identifier	eprintf		6599233	0					
ANR	6599416	ArgumentList	"""Unable to map the opened file: %s"""		6599233	1					
ANR	6599417	Argument	"""Unable to map the opened file: %s"""		6599233	0					
ANR	6599418	PrimaryExpression	"""Unable to map the opened file: %s"""		6599233	0					
ANR	6599419	Argument	filename		6599233	1					
ANR	6599420	Identifier	filename		6599233	0					
ANR	6599421	ExpressionStatement	r_io_desc_close ( yankdesc )	60:4:1882:1908	6599233	1	True				
ANR	6599422	CallExpression	r_io_desc_close ( yankdesc )		6599233	0					
ANR	6599423	Callee	r_io_desc_close		6599233	0					
ANR	6599424	Identifier	r_io_desc_close		6599233	0					
ANR	6599425	ArgumentList	yankdesc		6599233	1					
ANR	6599426	Argument	yankdesc		6599233	0					
ANR	6599427	Identifier	yankdesc		6599233	0					
ANR	6599428	ExpressionStatement	yankdesc = NULL	61:4:1914:1929	6599233	2	True				
ANR	6599429	AssignmentExpression	yankdesc = NULL		6599233	0		=			
ANR	6599430	Identifier	yankdesc		6599233	0					
ANR	6599431	Identifier	NULL		6599233	1					
ANR	6599432	ElseStatement	else		6599233	0					
ANR	6599433	CompoundStatement		26:10:999:999	6599233	0					
ANR	6599434	ExpressionStatement	"eprintf ( ""Unable to open the file: %s"" , filename )"	63:4:1947:1996	6599233	0	True				
ANR	6599435	CallExpression	"eprintf ( ""Unable to open the file: %s"" , filename )"		6599233	0					
ANR	6599436	Callee	eprintf		6599233	0					
ANR	6599437	Identifier	eprintf		6599233	0					
ANR	6599438	ArgumentList	"""Unable to open the file: %s"""		6599233	1					
ANR	6599439	Argument	"""Unable to open the file: %s"""		6599233	0					
ANR	6599440	PrimaryExpression	"""Unable to open the file: %s"""		6599233	0					
ANR	6599441	Argument	filename		6599233	1					
ANR	6599442	Identifier	filename		6599233	0					
ANR	6599443	IfStatement	if ( len == - 1 )		6599233	4					
ANR	6599444	Condition	len == - 1	69:5:2060:2068	6599233	0	True				
ANR	6599445	EqualityExpression	len == - 1		6599233	0		==			
ANR	6599446	Identifier	len		6599233	0					
ANR	6599447	UnaryOperationExpression	- 1		6599233	1					
ANR	6599448	UnaryOperator	-		6599233	0					
ANR	6599449	PrimaryExpression	1		6599233	1					
ANR	6599450	CompoundStatement		33:16:1129:1129	6599233	1					
ANR	6599451	ExpressionStatement	len = yank_file_sz	70:2:2075:2093	6599233	0	True				
ANR	6599452	AssignmentExpression	len = yank_file_sz		6599233	0		=			
ANR	6599453	Identifier	len		6599233	0					
ANR	6599454	Identifier	yank_file_sz		6599233	1					
ANR	6599455	IfStatement	if ( yankdesc )		6599233	5					
ANR	6599456	Condition	yankdesc	75:5:2200:2207	6599233	0	True				
ANR	6599457	Identifier	yankdesc		6599233	0					
ANR	6599458	CompoundStatement		42:2:1377:1392	6599233	1					
ANR	6599459	IdentifierDeclStatement	"ut64 res = r_io_seek ( core -> io , addr , R_IO_SEEK_SET ) ;"	76:2:2214:2266	6599233	0	True				
ANR	6599460	IdentifierDecl	"res = r_io_seek ( core -> io , addr , R_IO_SEEK_SET )"		6599233	0					
ANR	6599461	IdentifierDeclType	ut64		6599233	0					
ANR	6599462	Identifier	res		6599233	1					
ANR	6599463	AssignmentExpression	"res = r_io_seek ( core -> io , addr , R_IO_SEEK_SET )"		6599233	2		=			
ANR	6599464	Identifier	res		6599233	0					
ANR	6599465	CallExpression	"r_io_seek ( core -> io , addr , R_IO_SEEK_SET )"		6599233	1					
ANR	6599466	Callee	r_io_seek		6599233	0					
ANR	6599467	Identifier	r_io_seek		6599233	0					
ANR	6599468	ArgumentList	core -> io		6599233	1					
ANR	6599469	Argument	core -> io		6599233	0					
ANR	6599470	PtrMemberAccess	core -> io		6599233	0					
ANR	6599471	Identifier	core		6599233	0					
ANR	6599472	Identifier	io		6599233	1					
ANR	6599473	Argument	addr		6599233	1					
ANR	6599474	Identifier	addr		6599233	0					
ANR	6599475	Argument	R_IO_SEEK_SET		6599233	2					
ANR	6599476	Identifier	R_IO_SEEK_SET		6599233	0					
ANR	6599477	IdentifierDeclStatement	ut64 actual_len = len <= yank_file_sz ? len : 0 ;	77:2:2270:2315	6599233	1	True				
ANR	6599478	IdentifierDecl	actual_len = len <= yank_file_sz ? len : 0		6599233	0					
ANR	6599479	IdentifierDeclType	ut64		6599233	0					
ANR	6599480	Identifier	actual_len		6599233	1					
ANR	6599481	AssignmentExpression	actual_len = len <= yank_file_sz ? len : 0		6599233	2		=			
ANR	6599482	Identifier	actual_len		6599233	0					
ANR	6599483	ConditionalExpression	len <= yank_file_sz ? len : 0		6599233	1					
ANR	6599484	Condition	len <= yank_file_sz		6599233	0					
ANR	6599485	RelationalExpression	len <= yank_file_sz		6599233	0		<=			
ANR	6599486	Identifier	len		6599233	0					
ANR	6599487	Identifier	yank_file_sz		6599233	1					
ANR	6599488	Identifier	len		6599233	1					
ANR	6599489	PrimaryExpression	0		6599233	2					
ANR	6599490	IdentifierDeclStatement	ut8 * buf = NULL ;	78:2:2319:2334	6599233	2	True				
ANR	6599491	IdentifierDecl	* buf = NULL		6599233	0					
ANR	6599492	IdentifierDeclType	ut8 *		6599233	0					
ANR	6599493	Identifier	buf		6599233	1					
ANR	6599494	AssignmentExpression	* buf = NULL		6599233	2		=			
ANR	6599495	Identifier	NULL		6599233	0					
ANR	6599496	Identifier	NULL		6599233	1					
ANR	6599497	IfStatement	if ( actual_len > 0 && res == addr )		6599233	3					
ANR	6599498	Condition	actual_len > 0 && res == addr	79:6:2342:2370	6599233	0	True				
ANR	6599499	AndExpression	actual_len > 0 && res == addr		6599233	0		&&			
ANR	6599500	RelationalExpression	actual_len > 0		6599233	0		>			
ANR	6599501	Identifier	actual_len		6599233	0					
ANR	6599502	PrimaryExpression	0		6599233	1					
ANR	6599503	EqualityExpression	res == addr		6599233	1		==			
ANR	6599504	Identifier	res		6599233	0					
ANR	6599505	Identifier	addr		6599233	1					
ANR	6599506	CompoundStatement		43:37:1431:1431	6599233	1					
ANR	6599507	ExpressionStatement	buf = malloc ( actual_len )	80:3:2378:2403	6599233	0	True				
ANR	6599508	AssignmentExpression	buf = malloc ( actual_len )		6599233	0		=			
ANR	6599509	Identifier	buf		6599233	0					
ANR	6599510	CallExpression	malloc ( actual_len )		6599233	1					
ANR	6599511	Callee	malloc		6599233	0					
ANR	6599512	Identifier	malloc		6599233	0					
ANR	6599513	ArgumentList	actual_len		6599233	1					
ANR	6599514	Argument	actual_len		6599233	0					
ANR	6599515	Identifier	actual_len		6599233	0					
ANR	6599516	IfStatement	"if ( ! r_io_read_at ( core -> io , addr , buf , actual_len ) )"		6599233	1					
ANR	6599517	Condition	"! r_io_read_at ( core -> io , addr , buf , actual_len )"	81:7:2412:2458	6599233	0	True				
ANR	6599518	UnaryOperationExpression	"! r_io_read_at ( core -> io , addr , buf , actual_len )"		6599233	0					
ANR	6599519	UnaryOperator	!		6599233	0					
ANR	6599520	CallExpression	"r_io_read_at ( core -> io , addr , buf , actual_len )"		6599233	1					
ANR	6599521	Callee	r_io_read_at		6599233	0					
ANR	6599522	Identifier	r_io_read_at		6599233	0					
ANR	6599523	ArgumentList	core -> io		6599233	1					
ANR	6599524	Argument	core -> io		6599233	0					
ANR	6599525	PtrMemberAccess	core -> io		6599233	0					
ANR	6599526	Identifier	core		6599233	0					
ANR	6599527	Identifier	io		6599233	1					
ANR	6599528	Argument	addr		6599233	1					
ANR	6599529	Identifier	addr		6599233	0					
ANR	6599530	Argument	buf		6599233	2					
ANR	6599531	Identifier	buf		6599233	0					
ANR	6599532	Argument	actual_len		6599233	3					
ANR	6599533	Identifier	actual_len		6599233	0					
ANR	6599534	CompoundStatement		45:56:1519:1519	6599233	1					
ANR	6599535	ExpressionStatement	actual_len = 0	82:4:2467:2481	6599233	0	True				
ANR	6599536	AssignmentExpression	actual_len = 0		6599233	0		=			
ANR	6599537	Identifier	actual_len		6599233	0					
ANR	6599538	PrimaryExpression	0		6599233	1					
ANR	6599539	ExpressionStatement	"r_core_yank_set ( core , R_CORE_FOREIGN_ADDR , buf , len )"	84:3:2491:2544	6599233	2	True				
ANR	6599540	CallExpression	"r_core_yank_set ( core , R_CORE_FOREIGN_ADDR , buf , len )"		6599233	0					
ANR	6599541	Callee	r_core_yank_set		6599233	0					
ANR	6599542	Identifier	r_core_yank_set		6599233	0					
ANR	6599543	ArgumentList	core		6599233	1					
ANR	6599544	Argument	core		6599233	0					
ANR	6599545	Identifier	core		6599233	0					
ANR	6599546	Argument	R_CORE_FOREIGN_ADDR		6599233	1					
ANR	6599547	Identifier	R_CORE_FOREIGN_ADDR		6599233	0					
ANR	6599548	Argument	buf		6599233	2					
ANR	6599549	Identifier	buf		6599233	0					
ANR	6599550	Argument	len		6599233	3					
ANR	6599551	Identifier	len		6599233	0					
ANR	6599552	ExpressionStatement	res = true	85:3:2549:2559	6599233	3	True				
ANR	6599553	AssignmentExpression	res = true		6599233	0		=			
ANR	6599554	Identifier	res		6599233	0					
ANR	6599555	Identifier	true		6599233	1					
ANR	6599556	ElseStatement	else		6599233	0					
ANR	6599557	IfStatement	if ( res != addr )		6599233	0					
ANR	6599558	Condition	res != addr	86:13:2574:2584	6599233	0	True				
ANR	6599559	EqualityExpression	res != addr		6599233	0		!=			
ANR	6599560	Identifier	res		6599233	0					
ANR	6599561	Identifier	addr		6599233	1					
ANR	6599562	CompoundStatement		50:26:1645:1645	6599233	1					
ANR	6599563	Statement	eprintf	87:3:2592:2598	6599233	0	True				
ANR	6599564	Statement	(	87:11:2600:2600	6599233	1	True				
ANR	6599565	Statement	"""ERROR: Unable to yank data from file: (loadaddr (0x%"""	88:4:2606:2659	6599233	2	True				
ANR	6599566	Statement	PFMT64x	89:4:2665:2671	6599233	3	True				
ANR	6599567	Statement	""") (addr (0x%"""	89:12:2673:2686	6599233	4	True				
ANR	6599568	Statement	PFMT64x	90:4:2692:2698	6599233	5	True				
ANR	6599569	Statement	""") > file_sz (0x%"""	90:12:2700:2717	6599233	6	True				
ANR	6599570	Statement	PFMT64x	90:30:2718:2724	6599233	7	True				
ANR	6599571	Statement	""")\\n"""	90:38:2726:2730	6599233	8	True				
ANR	6599572	Statement	","	90:43:2731:2731	6599233	9	True				
ANR	6599573	Statement	res	90:45:2733:2735	6599233	10	True				
ANR	6599574	Statement	","	90:48:2736:2736	6599233	11	True				
ANR	6599575	Statement	addr	90:50:2738:2741	6599233	12	True				
ANR	6599576	Statement	","	90:54:2742:2742	6599233	13	True				
ANR	6599577	Statement	yank_file_sz	91:4:2748:2759	6599233	14	True				
ANR	6599578	Statement	)	91:17:2761:2761	6599233	15	True				
ANR	6599579	ExpressionStatement		91:18:2762:2762	6599233	16	True				
ANR	6599580	ElseStatement	else		6599233	0					
ANR	6599581	IfStatement	if ( actual_len == 0 )		6599233	0					
ANR	6599582	Condition	actual_len == 0	92:13:2777:2791	6599233	0	True				
ANR	6599583	EqualityExpression	actual_len == 0		6599233	0		==			
ANR	6599584	Identifier	actual_len		6599233	0					
ANR	6599585	PrimaryExpression	0		6599233	1					
ANR	6599586	CompoundStatement		56:30:1852:1852	6599233	1					
ANR	6599587	Statement	eprintf	93:3:2799:2805	6599233	0	True				
ANR	6599588	Statement	(	93:11:2807:2807	6599233	1	True				
ANR	6599589	Statement	"""ERROR: Unable to yank from file: addr+len (0x%"""	94:4:2813:2860	6599233	2	True				
ANR	6599590	Statement	PFMT64x	95:4:2866:2872	6599233	3	True				
ANR	6599591	Statement	""") > file_sz (0x%"""	95:12:2874:2891	6599233	4	True				
ANR	6599592	Statement	PFMT64x	95:30:2892:2898	6599233	5	True				
ANR	6599593	Statement	""")\\n"""	95:38:2900:2904	6599233	6	True				
ANR	6599594	Statement	","	95:43:2905:2905	6599233	7	True				
ANR	6599595	Statement	addr	95:45:2907:2910	6599233	8	True				
ANR	6599596	Statement	+	95:50:2912:2912	6599233	9	True				
ANR	6599597	Statement	len	95:52:2914:2916	6599233	10	True				
ANR	6599598	Statement	","	95:55:2917:2917	6599233	11	True				
ANR	6599599	Statement	yank_file_sz	96:4:2923:2934	6599233	12	True				
ANR	6599600	Statement	)	96:17:2936:2936	6599233	13	True				
ANR	6599601	ExpressionStatement		96:18:2937:2937	6599233	14	True				
ANR	6599602	ExpressionStatement	r_io_desc_close ( yankdesc )	98:2:2945:2971	6599233	4	True				
ANR	6599603	CallExpression	r_io_desc_close ( yankdesc )		6599233	0					
ANR	6599604	Callee	r_io_desc_close		6599233	0					
ANR	6599605	Identifier	r_io_desc_close		6599233	0					
ANR	6599606	ArgumentList	yankdesc		6599233	1					
ANR	6599607	Argument	yankdesc		6599233	0					
ANR	6599608	Identifier	yankdesc		6599233	0					
ANR	6599609	ExpressionStatement	free ( buf )	99:2:2975:2985	6599233	5	True				
ANR	6599610	CallExpression	free ( buf )		6599233	0					
ANR	6599611	Callee	free		6599233	0					
ANR	6599612	Identifier	free		6599233	0					
ANR	6599613	ArgumentList	buf		6599233	1					
ANR	6599614	Argument	buf		6599233	0					
ANR	6599615	Identifier	buf		6599233	0					
ANR	6599616	IfStatement	if ( fd != - 1 )		6599233	6					
ANR	6599617	Condition	fd != - 1	101:5:2995:3002	6599233	0	True				
ANR	6599618	EqualityExpression	fd != - 1		6599233	0		!=			
ANR	6599619	Identifier	fd		6599233	0					
ANR	6599620	UnaryOperationExpression	- 1		6599233	1					
ANR	6599621	UnaryOperator	-		6599233	0					
ANR	6599622	PrimaryExpression	1		6599233	1					
ANR	6599623	CompoundStatement		65:15:2063:2063	6599233	1					
ANR	6599624	ExpressionStatement	"r_io_use_fd ( core -> io , fd )"	102:2:3009:3035	6599233	0	True				
ANR	6599625	CallExpression	"r_io_use_fd ( core -> io , fd )"		6599233	0					
ANR	6599626	Callee	r_io_use_fd		6599233	0					
ANR	6599627	Identifier	r_io_use_fd		6599233	0					
ANR	6599628	ArgumentList	core -> io		6599233	1					
ANR	6599629	Argument	core -> io		6599233	0					
ANR	6599630	PtrMemberAccess	core -> io		6599233	0					
ANR	6599631	Identifier	core		6599233	0					
ANR	6599632	Identifier	io		6599233	1					
ANR	6599633	Argument	fd		6599233	1					
ANR	6599634	Identifier	fd		6599233	0					
ANR	6599635	ExpressionStatement	core -> switch_file_view = 1	103:2:3039:3065	6599233	1	True				
ANR	6599636	AssignmentExpression	core -> switch_file_view = 1		6599233	0		=			
ANR	6599637	PtrMemberAccess	core -> switch_file_view		6599233	0					
ANR	6599638	Identifier	core		6599233	0					
ANR	6599639	Identifier	switch_file_view		6599233	1					
ANR	6599640	PrimaryExpression	1		6599233	1					
ANR	6599641	ExpressionStatement	r_core_block_read ( core )	104:2:3069:3093	6599233	2	True				
ANR	6599642	CallExpression	r_core_block_read ( core )		6599233	0					
ANR	6599643	Callee	r_core_block_read		6599233	0					
ANR	6599644	Identifier	r_core_block_read		6599233	0					
ANR	6599645	ArgumentList	core		6599233	1					
ANR	6599646	Argument	core		6599233	0					
ANR	6599647	Identifier	core		6599233	0					
ANR	6599648	ReturnStatement	return res ;	106:1:3099:3109	6599233	7	True				
ANR	6599649	Identifier	res		6599233	0					
ANR	6599650	ReturnType	static int		6599233	1					
ANR	6599651	Identifier	perform_mapped_file_yank		6599233	2					
ANR	6599652	ParameterList	"RCore * core , ut64 offset , ut64 len , const char * filename"		6599233	3					
ANR	6599653	Parameter	RCore * core	37:36:883:893	6599233	0	True				
ANR	6599654	ParameterType	RCore *		6599233	0					
ANR	6599655	Identifier	core		6599233	1					
ANR	6599656	Parameter	ut64 offset	37:49:896:906	6599233	1	True				
ANR	6599657	ParameterType	ut64		6599233	0					
ANR	6599658	Identifier	offset		6599233	1					
ANR	6599659	Parameter	ut64 len	37:62:909:916	6599233	2	True				
ANR	6599660	ParameterType	ut64		6599233	0					
ANR	6599661	Identifier	len		6599233	1					
ANR	6599662	Parameter	const char * filename	37:72:919:938	6599233	3	True				
ANR	6599663	ParameterType	const char *		6599233	0					
ANR	6599664	Identifier	filename		6599233	1					
ANR	6599665	CFGEntryNode	ENTRY		6599233		True				
ANR	6599666	CFGExitNode	EXIT		6599233		True				
ANR	6599667	Symbol	* yankdesc		6599233						
ANR	6599668	Symbol	map -> itv		6599233						
ANR	6599669	Symbol	R_IO_SEEK_SET		6599233						
ANR	6599670	Symbol	* map		6599233						
ANR	6599671	Symbol	* core		6599233						
ANR	6599672	Symbol	r_io_map_add_next_available		6599233						
ANR	6599673	Symbol	core -> switch_file_view		6599233						
ANR	6599674	Symbol	loadaddr		6599233						
ANR	6599675	Symbol	len		6599233						
ANR	6599676	Symbol	core -> io		6599233						
ANR	6599677	Symbol	actual_len		6599233						
ANR	6599678	Symbol	R_PERM_R		6599233						
ANR	6599679	Symbol	map -> itv . addr		6599233						
ANR	6599680	Symbol	addr		6599233						
ANR	6599681	Symbol	map		6599233						
ANR	6599682	Symbol	* * core		6599233						
ANR	6599683	Symbol	core -> config		6599233						
ANR	6599684	Symbol	res		6599233						
ANR	6599685	Symbol	malloc		6599233						
ANR	6599686	Symbol	load_align		6599233						
ANR	6599687	Symbol	NULL		6599233						
ANR	6599688	Symbol	r_io_open_nomap		6599233						
ANR	6599689	Symbol	offset		6599233						
ANR	6599690	Symbol	yankdesc		6599233						
ANR	6599691	Symbol	core -> file		6599233						
ANR	6599692	Symbol	false		6599233						
ANR	6599693	Symbol	r_io_read_at		6599233						
ANR	6599694	Symbol	R_CORE_FOREIGN_ADDR		6599233						
ANR	6599695	Symbol	core		6599233						
ANR	6599696	Symbol	yank_file_sz		6599233						
ANR	6599697	Symbol	* core -> file		6599233						
ANR	6599698	Symbol	buf		6599233						
ANR	6599699	Symbol	filename		6599233						
ANR	6599700	Symbol	* filename		6599233						
ANR	6599701	Symbol	yankdesc -> fd		6599233						
ANR	6599702	Symbol	r_io_seek		6599233						
ANR	6599703	Symbol	r_config_get_i		6599233						
ANR	6599704	Symbol	core -> file -> fd		6599233						
ANR	6599705	Symbol	true		6599233						
ANR	6599706	Symbol	r_io_size		6599233						
ANR	6599707	Symbol	fd		6599233						
ANR	6599708	Function	r_core_yank_set	109:0:3114:3461							
ANR	6599709	FunctionDef	"r_core_yank_set (RCore * core , ut64 addr , const ut8 * buf , ut32 len)"		6599708	0					
ANR	6599710	CompoundStatement		109:76:3190:3461	6599708	0					
ANR	6599711	IfStatement	if ( buf && len )		6599708	0					
ANR	6599712	Condition	buf && len	111:5:3224:3233	6599708	0	True				
ANR	6599713	AndExpression	buf && len		6599708	0		&&			
ANR	6599714	Identifier	buf		6599708	0					
ANR	6599715	Identifier	len		6599708	1					
ANR	6599716	CompoundStatement		3:17:45:45	6599708	1					
ANR	6599717	ExpressionStatement	"r_buf_set_bytes ( core -> yank_buf , buf , len )"	114:2:3358:3400	6599708	0	True				
ANR	6599718	CallExpression	"r_buf_set_bytes ( core -> yank_buf , buf , len )"		6599708	0					
ANR	6599719	Callee	r_buf_set_bytes		6599708	0					
ANR	6599720	Identifier	r_buf_set_bytes		6599708	0					
ANR	6599721	ArgumentList	core -> yank_buf		6599708	1					
ANR	6599722	Argument	core -> yank_buf		6599708	0					
ANR	6599723	PtrMemberAccess	core -> yank_buf		6599708	0					
ANR	6599724	Identifier	core		6599708	0					
ANR	6599725	Identifier	yank_buf		6599708	1					
ANR	6599726	Argument	buf		6599708	1					
ANR	6599727	Identifier	buf		6599708	0					
ANR	6599728	Argument	len		6599708	2					
ANR	6599729	Identifier	len		6599708	0					
ANR	6599730	ExpressionStatement	core -> yank_addr = addr	115:2:3404:3426	6599708	1	True				
ANR	6599731	AssignmentExpression	core -> yank_addr = addr		6599708	0		=			
ANR	6599732	PtrMemberAccess	core -> yank_addr		6599708	0					
ANR	6599733	Identifier	core		6599708	0					
ANR	6599734	Identifier	yank_addr		6599708	1					
ANR	6599735	Identifier	addr		6599708	1					
ANR	6599736	ReturnStatement	return true ;	116:2:3430:3441	6599708	2	True				
ANR	6599737	Identifier	true		6599708	0					
ANR	6599738	ReturnStatement	return false ;	118:1:3447:3459	6599708	1	True				
ANR	6599739	Identifier	false		6599708	0					
ANR	6599740	ReturnType	R_API int		6599708	1					
ANR	6599741	Identifier	r_core_yank_set		6599708	2					
ANR	6599742	ParameterList	"RCore * core , ut64 addr , const ut8 * buf , ut32 len"		6599708	3					
ANR	6599743	Parameter	RCore * core	109:26:3140:3150	6599708	0	True				
ANR	6599744	ParameterType	RCore *		6599708	0					
ANR	6599745	Identifier	core		6599708	1					
ANR	6599746	Parameter	ut64 addr	109:39:3153:3161	6599708	1	True				
ANR	6599747	ParameterType	ut64		6599708	0					
ANR	6599748	Identifier	addr		6599708	1					
ANR	6599749	Parameter	const ut8 * buf	109:50:3164:3177	6599708	2	True				
ANR	6599750	ParameterType	const ut8 *		6599708	0					
ANR	6599751	Identifier	buf		6599708	1					
ANR	6599752	Parameter	ut32 len	109:66:3180:3187	6599708	3	True				
ANR	6599753	ParameterType	ut32		6599708	0					
ANR	6599754	Identifier	len		6599708	1					
ANR	6599755	CFGEntryNode	ENTRY		6599708		True				
ANR	6599756	CFGExitNode	EXIT		6599708		True				
ANR	6599757	Symbol	core		6599708						
ANR	6599758	Symbol	buf		6599708						
ANR	6599759	Symbol	len		6599708						
ANR	6599760	Symbol	core -> yank_addr		6599708						
ANR	6599761	Symbol	core -> yank_buf		6599708						
ANR	6599762	Symbol	* core		6599708						
ANR	6599763	Symbol	true		6599708						
ANR	6599764	Symbol	false		6599708						
ANR	6599765	Symbol	addr		6599708						
ANR	6599766	Function	r_core_yank_set_str	122:0:3511:3797							
ANR	6599767	FunctionDef	"r_core_yank_set_str (RCore * core , ut64 addr , const char * str , ut32 len)"		6599766	0					
ANR	6599768	CompoundStatement		122:81:3592:3797	6599766	0					
ANR	6599769	IdentifierDeclStatement	"int res = r_core_yank_set ( core , addr , ( ut8 * ) str , len ) ;"	124:1:3622:3677	6599766	0	True				
ANR	6599770	IdentifierDecl	"res = r_core_yank_set ( core , addr , ( ut8 * ) str , len )"		6599766	0					
ANR	6599771	IdentifierDeclType	int		6599766	0					
ANR	6599772	Identifier	res		6599766	1					
ANR	6599773	AssignmentExpression	"res = r_core_yank_set ( core , addr , ( ut8 * ) str , len )"		6599766	2		=			
ANR	6599774	Identifier	res		6599766	0					
ANR	6599775	CallExpression	"r_core_yank_set ( core , addr , ( ut8 * ) str , len )"		6599766	1					
ANR	6599776	Callee	r_core_yank_set		6599766	0					
ANR	6599777	Identifier	r_core_yank_set		6599766	0					
ANR	6599778	ArgumentList	core		6599766	1					
ANR	6599779	Argument	core		6599766	0					
ANR	6599780	Identifier	core		6599766	0					
ANR	6599781	Argument	addr		6599766	1					
ANR	6599782	Identifier	addr		6599766	0					
ANR	6599783	Argument	( ut8 * ) str		6599766	2					
ANR	6599784	CastExpression	( ut8 * ) str		6599766	0					
ANR	6599785	CastTarget	ut8 *		6599766	0					
ANR	6599786	Identifier	str		6599766	1					
ANR	6599787	Argument	len		6599766	3					
ANR	6599788	Identifier	len		6599766	0					
ANR	6599789	IfStatement	if ( res == true )		6599766	1					
ANR	6599790	Condition	res == true	125:5:3684:3694	6599766	0	True				
ANR	6599791	EqualityExpression	res == true		6599766	0		==			
ANR	6599792	Identifier	res		6599766	0					
ANR	6599793	Identifier	true		6599766	1					
ANR	6599794	CompoundStatement		5:2:108:120	6599766	1					
ANR	6599795	IdentifierDeclStatement	ut8 zero = 0 ;	126:2:3701:3713	6599766	0	True				
ANR	6599796	IdentifierDecl	zero = 0		6599766	0					
ANR	6599797	IdentifierDeclType	ut8		6599766	0					
ANR	6599798	Identifier	zero		6599766	1					
ANR	6599799	AssignmentExpression	zero = 0		6599766	2		=			
ANR	6599800	Identifier	zero		6599766	0					
ANR	6599801	PrimaryExpression	0		6599766	1					
ANR	6599802	ExpressionStatement	"r_buf_write_at ( core -> yank_buf , len - 1 , & zero , sizeof ( zero ) )"	127:2:3717:3779	6599766	1	True				
ANR	6599803	CallExpression	"r_buf_write_at ( core -> yank_buf , len - 1 , & zero , sizeof ( zero ) )"		6599766	0					
ANR	6599804	Callee	r_buf_write_at		6599766	0					
ANR	6599805	Identifier	r_buf_write_at		6599766	0					
ANR	6599806	ArgumentList	core -> yank_buf		6599766	1					
ANR	6599807	Argument	core -> yank_buf		6599766	0					
ANR	6599808	PtrMemberAccess	core -> yank_buf		6599766	0					
ANR	6599809	Identifier	core		6599766	0					
ANR	6599810	Identifier	yank_buf		6599766	1					
ANR	6599811	Argument	len - 1		6599766	1					
ANR	6599812	AdditiveExpression	len - 1		6599766	0		-			
ANR	6599813	Identifier	len		6599766	0					
ANR	6599814	PrimaryExpression	1		6599766	1					
ANR	6599815	Argument	& zero		6599766	2					
ANR	6599816	UnaryOperationExpression	& zero		6599766	0					
ANR	6599817	UnaryOperator	&		6599766	0					
ANR	6599818	Identifier	zero		6599766	1					
ANR	6599819	Argument	sizeof ( zero )		6599766	3					
ANR	6599820	SizeofExpression	sizeof ( zero )		6599766	0					
ANR	6599821	Sizeof	sizeof		6599766	0					
ANR	6599822	SizeofOperand	zero		6599766	1					
ANR	6599823	ReturnStatement	return res ;	129:1:3785:3795	6599766	2	True				
ANR	6599824	Identifier	res		6599766	0					
ANR	6599825	ReturnType	R_API int		6599766	1					
ANR	6599826	Identifier	r_core_yank_set_str		6599766	2					
ANR	6599827	ParameterList	"RCore * core , ut64 addr , const char * str , ut32 len"		6599766	3					
ANR	6599828	Parameter	RCore * core	122:30:3541:3551	6599766	0	True				
ANR	6599829	ParameterType	RCore *		6599766	0					
ANR	6599830	Identifier	core		6599766	1					
ANR	6599831	Parameter	ut64 addr	122:43:3554:3562	6599766	1	True				
ANR	6599832	ParameterType	ut64		6599766	0					
ANR	6599833	Identifier	addr		6599766	1					
ANR	6599834	Parameter	const char * str	122:54:3565:3579	6599766	2	True				
ANR	6599835	ParameterType	const char *		6599766	0					
ANR	6599836	Identifier	str		6599766	1					
ANR	6599837	Parameter	ut32 len	122:71:3582:3589	6599766	3	True				
ANR	6599838	ParameterType	ut32		6599766	0					
ANR	6599839	Identifier	len		6599766	1					
ANR	6599840	CFGEntryNode	ENTRY		6599766		True				
ANR	6599841	CFGExitNode	EXIT		6599766		True				
ANR	6599842	Symbol	str		6599766						
ANR	6599843	Symbol	zero		6599766						
ANR	6599844	Symbol	core		6599766						
ANR	6599845	Symbol	res		6599766						
ANR	6599846	Symbol	len		6599766						
ANR	6599847	Symbol	& zero		6599766						
ANR	6599848	Symbol	r_core_yank_set		6599766						
ANR	6599849	Symbol	core -> yank_buf		6599766						
ANR	6599850	Symbol	true		6599766						
ANR	6599851	Symbol	* core		6599766						
ANR	6599852	Symbol	addr		6599766						
ANR	6599853	Function	r_core_yank	132:0:3800:4339							
ANR	6599854	FunctionDef	"r_core_yank (struct r_core_t * core , ut64 addr , int len)"		6599853	0					
ANR	6599855	CompoundStatement		132:65:3865:4339	6599853	0					
ANR	6599856	IdentifierDeclStatement	ut64 curseek = core -> offset ;	133:1:3868:3895	6599853	0	True				
ANR	6599857	IdentifierDecl	curseek = core -> offset		6599853	0					
ANR	6599858	IdentifierDeclType	ut64		6599853	0					
ANR	6599859	Identifier	curseek		6599853	1					
ANR	6599860	AssignmentExpression	curseek = core -> offset		6599853	2		=			
ANR	6599861	Identifier	curseek		6599853	0					
ANR	6599862	PtrMemberAccess	core -> offset		6599853	1					
ANR	6599863	Identifier	core		6599853	0					
ANR	6599864	Identifier	offset		6599853	1					
ANR	6599865	IdentifierDeclStatement	ut8 * buf = NULL ;	134:1:3898:3913	6599853	1	True				
ANR	6599866	IdentifierDecl	* buf = NULL		6599853	0					
ANR	6599867	IdentifierDeclType	ut8 *		6599853	0					
ANR	6599868	Identifier	buf		6599853	1					
ANR	6599869	AssignmentExpression	* buf = NULL		6599853	2		=			
ANR	6599870	Identifier	NULL		6599853	0					
ANR	6599871	Identifier	NULL		6599853	1					
ANR	6599872	IfStatement	if ( len < 0 )		6599853	2					
ANR	6599873	Condition	len < 0	135:5:3920:3926	6599853	0	True				
ANR	6599874	RelationalExpression	len < 0		6599853	0		<			
ANR	6599875	Identifier	len		6599853	0					
ANR	6599876	PrimaryExpression	0		6599853	1					
ANR	6599877	CompoundStatement		4:14:63:63	6599853	1					
ANR	6599878	ExpressionStatement	"eprintf ( ""r_core_yank: cannot yank negative bytes\\n"" )"	136:2:3933:3986	6599853	0	True				
ANR	6599879	CallExpression	"eprintf ( ""r_core_yank: cannot yank negative bytes\\n"" )"		6599853	0					
ANR	6599880	Callee	eprintf		6599853	0					
ANR	6599881	Identifier	eprintf		6599853	0					
ANR	6599882	ArgumentList	"""r_core_yank: cannot yank negative bytes\\n"""		6599853	1					
ANR	6599883	Argument	"""r_core_yank: cannot yank negative bytes\\n"""		6599853	0					
ANR	6599884	PrimaryExpression	"""r_core_yank: cannot yank negative bytes\\n"""		6599853	0					
ANR	6599885	ReturnStatement	return false ;	137:2:3990:4002	6599853	1	True				
ANR	6599886	Identifier	false		6599853	0					
ANR	6599887	IfStatement	if ( len == 0 )		6599853	3					
ANR	6599888	Condition	len == 0	139:5:4012:4019	6599853	0	True				
ANR	6599889	EqualityExpression	len == 0		6599853	0		==			
ANR	6599890	Identifier	len		6599853	0					
ANR	6599891	PrimaryExpression	0		6599853	1					
ANR	6599892	CompoundStatement		8:15:156:156	6599853	1					
ANR	6599893	ExpressionStatement	len = core -> blocksize	140:2:4026:4047	6599853	0	True				
ANR	6599894	AssignmentExpression	len = core -> blocksize		6599853	0		=			
ANR	6599895	Identifier	len		6599853	0					
ANR	6599896	PtrMemberAccess	core -> blocksize		6599853	1					
ANR	6599897	Identifier	core		6599853	0					
ANR	6599898	Identifier	blocksize		6599853	1					
ANR	6599899	ExpressionStatement	buf = malloc ( len )	142:1:4053:4071	6599853	4	True				
ANR	6599900	AssignmentExpression	buf = malloc ( len )		6599853	0		=			
ANR	6599901	Identifier	buf		6599853	0					
ANR	6599902	CallExpression	malloc ( len )		6599853	1					
ANR	6599903	Callee	malloc		6599853	0					
ANR	6599904	Identifier	malloc		6599853	0					
ANR	6599905	ArgumentList	len		6599853	1					
ANR	6599906	Argument	len		6599853	0					
ANR	6599907	Identifier	len		6599853	0					
ANR	6599908	IfStatement	if ( ! buf )		6599853	5					
ANR	6599909	Condition	! buf	143:5:4078:4081	6599853	0	True				
ANR	6599910	UnaryOperationExpression	! buf		6599853	0					
ANR	6599911	UnaryOperator	!		6599853	0					
ANR	6599912	Identifier	buf		6599853	1					
ANR	6599913	CompoundStatement		12:11:218:218	6599853	1					
ANR	6599914	ReturnStatement	return false ;	144:2:4088:4100	6599853	0	True				
ANR	6599915	Identifier	false		6599853	0					
ANR	6599916	IfStatement	if ( addr != core -> offset )		6599853	6					
ANR	6599917	Condition	addr != core -> offset	146:5:4110:4129	6599853	0	True				
ANR	6599918	EqualityExpression	addr != core -> offset		6599853	0		!=			
ANR	6599919	Identifier	addr		6599853	0					
ANR	6599920	PtrMemberAccess	core -> offset		6599853	1					
ANR	6599921	Identifier	core		6599853	0					
ANR	6599922	Identifier	offset		6599853	1					
ANR	6599923	CompoundStatement		15:27:266:266	6599853	1					
ANR	6599924	ExpressionStatement	"r_core_seek ( core , addr , 1 )"	147:2:4136:4163	6599853	0	True				
ANR	6599925	CallExpression	"r_core_seek ( core , addr , 1 )"		6599853	0					
ANR	6599926	Callee	r_core_seek		6599853	0					
ANR	6599927	Identifier	r_core_seek		6599853	0					
ANR	6599928	ArgumentList	core		6599853	1					
ANR	6599929	Argument	core		6599853	0					
ANR	6599930	Identifier	core		6599853	0					
ANR	6599931	Argument	addr		6599853	1					
ANR	6599932	Identifier	addr		6599853	0					
ANR	6599933	Argument	1		6599853	2					
ANR	6599934	PrimaryExpression	1		6599853	0					
ANR	6599935	ExpressionStatement	"r_io_read_at ( core -> io , addr , buf , len )"	149:1:4169:4208	6599853	7	True				
ANR	6599936	CallExpression	"r_io_read_at ( core -> io , addr , buf , len )"		6599853	0					
ANR	6599937	Callee	r_io_read_at		6599853	0					
ANR	6599938	Identifier	r_io_read_at		6599853	0					
ANR	6599939	ArgumentList	core -> io		6599853	1					
ANR	6599940	Argument	core -> io		6599853	0					
ANR	6599941	PtrMemberAccess	core -> io		6599853	0					
ANR	6599942	Identifier	core		6599853	0					
ANR	6599943	Identifier	io		6599853	1					
ANR	6599944	Argument	addr		6599853	1					
ANR	6599945	Identifier	addr		6599853	0					
ANR	6599946	Argument	buf		6599853	2					
ANR	6599947	Identifier	buf		6599853	0					
ANR	6599948	Argument	len		6599853	3					
ANR	6599949	Identifier	len		6599853	0					
ANR	6599950	ExpressionStatement	"r_core_yank_set ( core , addr , buf , len )"	150:1:4211:4249	6599853	8	True				
ANR	6599951	CallExpression	"r_core_yank_set ( core , addr , buf , len )"		6599853	0					
ANR	6599952	Callee	r_core_yank_set		6599853	0					
ANR	6599953	Identifier	r_core_yank_set		6599853	0					
ANR	6599954	ArgumentList	core		6599853	1					
ANR	6599955	Argument	core		6599853	0					
ANR	6599956	Identifier	core		6599853	0					
ANR	6599957	Argument	addr		6599853	1					
ANR	6599958	Identifier	addr		6599853	0					
ANR	6599959	Argument	buf		6599853	2					
ANR	6599960	Identifier	buf		6599853	0					
ANR	6599961	Argument	len		6599853	3					
ANR	6599962	Identifier	len		6599853	0					
ANR	6599963	IfStatement	if ( curseek != addr )		6599853	9					
ANR	6599964	Condition	curseek != addr	151:5:4256:4270	6599853	0	True				
ANR	6599965	EqualityExpression	curseek != addr		6599853	0		!=			
ANR	6599966	Identifier	curseek		6599853	0					
ANR	6599967	Identifier	addr		6599853	1					
ANR	6599968	CompoundStatement		20:22:407:407	6599853	1					
ANR	6599969	ExpressionStatement	"r_core_seek ( core , curseek , 1 )"	152:2:4277:4307	6599853	0	True				
ANR	6599970	CallExpression	"r_core_seek ( core , curseek , 1 )"		6599853	0					
ANR	6599971	Callee	r_core_seek		6599853	0					
ANR	6599972	Identifier	r_core_seek		6599853	0					
ANR	6599973	ArgumentList	core		6599853	1					
ANR	6599974	Argument	core		6599853	0					
ANR	6599975	Identifier	core		6599853	0					
ANR	6599976	Argument	curseek		6599853	1					
ANR	6599977	Identifier	curseek		6599853	0					
ANR	6599978	Argument	1		6599853	2					
ANR	6599979	PrimaryExpression	1		6599853	0					
ANR	6599980	ExpressionStatement	free ( buf )	154:1:4313:4323	6599853	10	True				
ANR	6599981	CallExpression	free ( buf )		6599853	0					
ANR	6599982	Callee	free		6599853	0					
ANR	6599983	Identifier	free		6599853	0					
ANR	6599984	ArgumentList	buf		6599853	1					
ANR	6599985	Argument	buf		6599853	0					
ANR	6599986	Identifier	buf		6599853	0					
ANR	6599987	ReturnStatement	return true ;	155:1:4326:4337	6599853	11	True				
ANR	6599988	Identifier	true		6599853	0					
ANR	6599989	ReturnType	R_API int		6599853	1					
ANR	6599990	Identifier	r_core_yank		6599853	2					
ANR	6599991	ParameterList	"struct r_core_t * core , ut64 addr , int len"		6599853	3					
ANR	6599992	Parameter	struct r_core_t * core	132:22:3822:3842	6599853	0	True				
ANR	6599993	ParameterType	struct r_core_t *		6599853	0					
ANR	6599994	Identifier	core		6599853	1					
ANR	6599995	Parameter	ut64 addr	132:45:3845:3853	6599853	1	True				
ANR	6599996	ParameterType	ut64		6599853	0					
ANR	6599997	Identifier	addr		6599853	1					
ANR	6599998	Parameter	int len	132:56:3856:3862	6599853	2	True				
ANR	6599999	ParameterType	int		6599853	0					
ANR	6600000	Identifier	len		6599853	1					
ANR	6600001	CFGEntryNode	ENTRY		6599853		True				
ANR	6600002	CFGExitNode	EXIT		6599853		True				
ANR	6600003	Symbol	core -> blocksize		6599853						
ANR	6600004	Symbol	malloc		6599853						
ANR	6600005	Symbol	NULL		6599853						
ANR	6600006	Symbol	* core		6599853						
ANR	6600007	Symbol	false		6599853						
ANR	6600008	Symbol	core -> offset		6599853						
ANR	6600009	Symbol	core		6599853						
ANR	6600010	Symbol	buf		6599853						
ANR	6600011	Symbol	len		6599853						
ANR	6600012	Symbol	curseek		6599853						
ANR	6600013	Symbol	core -> io		6599853						
ANR	6600014	Symbol	true		6599853						
ANR	6600015	Symbol	addr		6599853						
ANR	6600016	Function	r_core_yank_string	159:0:4426:5291							
ANR	6600017	FunctionDef	"r_core_yank_string (RCore * core , ut64 addr , int maxlen)"		6600016	0					
ANR	6600018	CompoundStatement		159:65:4491:5291	6600016	0					
ANR	6600019	IdentifierDeclStatement	ut64 curseek = core -> offset ;	160:1:4494:4521	6600016	0	True				
ANR	6600020	IdentifierDecl	curseek = core -> offset		6600016	0					
ANR	6600021	IdentifierDeclType	ut64		6600016	0					
ANR	6600022	Identifier	curseek		6600016	1					
ANR	6600023	AssignmentExpression	curseek = core -> offset		6600016	2		=			
ANR	6600024	Identifier	curseek		6600016	0					
ANR	6600025	PtrMemberAccess	core -> offset		6600016	1					
ANR	6600026	Identifier	core		6600016	0					
ANR	6600027	Identifier	offset		6600016	1					
ANR	6600028	IdentifierDeclStatement	ut8 * buf = NULL ;	161:1:4524:4539	6600016	1	True				
ANR	6600029	IdentifierDecl	* buf = NULL		6600016	0					
ANR	6600030	IdentifierDeclType	ut8 *		6600016	0					
ANR	6600031	Identifier	buf		6600016	1					
ANR	6600032	AssignmentExpression	* buf = NULL		6600016	2		=			
ANR	6600033	Identifier	NULL		6600016	0					
ANR	6600034	Identifier	NULL		6600016	1					
ANR	6600035	IfStatement	if ( maxlen < 0 )		6600016	2					
ANR	6600036	Condition	maxlen < 0	162:5:4546:4555	6600016	0	True				
ANR	6600037	RelationalExpression	maxlen < 0		6600016	0		<			
ANR	6600038	Identifier	maxlen		6600016	0					
ANR	6600039	PrimaryExpression	0		6600016	1					
ANR	6600040	CompoundStatement		4:17:66:66	6600016	1					
ANR	6600041	ExpressionStatement	"eprintf ( ""r_core_yank_string: cannot yank negative bytes\\n"" )"	163:2:4562:4622	6600016	0	True				
ANR	6600042	CallExpression	"eprintf ( ""r_core_yank_string: cannot yank negative bytes\\n"" )"		6600016	0					
ANR	6600043	Callee	eprintf		6600016	0					
ANR	6600044	Identifier	eprintf		6600016	0					
ANR	6600045	ArgumentList	"""r_core_yank_string: cannot yank negative bytes\\n"""		6600016	1					
ANR	6600046	Argument	"""r_core_yank_string: cannot yank negative bytes\\n"""		6600016	0					
ANR	6600047	PrimaryExpression	"""r_core_yank_string: cannot yank negative bytes\\n"""		6600016	0					
ANR	6600048	ReturnStatement	return false ;	164:2:4626:4638	6600016	1	True				
ANR	6600049	Identifier	false		6600016	0					
ANR	6600050	IfStatement	if ( addr != core -> offset )		6600016	3					
ANR	6600051	Condition	addr != core -> offset	166:5:4648:4667	6600016	0	True				
ANR	6600052	EqualityExpression	addr != core -> offset		6600016	0		!=			
ANR	6600053	Identifier	addr		6600016	0					
ANR	6600054	PtrMemberAccess	core -> offset		6600016	1					
ANR	6600055	Identifier	core		6600016	0					
ANR	6600056	Identifier	offset		6600016	1					
ANR	6600057	CompoundStatement		8:27:178:178	6600016	1					
ANR	6600058	ExpressionStatement	"r_core_seek ( core , addr , 1 )"	167:2:4674:4701	6600016	0	True				
ANR	6600059	CallExpression	"r_core_seek ( core , addr , 1 )"		6600016	0					
ANR	6600060	Callee	r_core_seek		6600016	0					
ANR	6600061	Identifier	r_core_seek		6600016	0					
ANR	6600062	ArgumentList	core		6600016	1					
ANR	6600063	Argument	core		6600016	0					
ANR	6600064	Identifier	core		6600016	0					
ANR	6600065	Argument	addr		6600016	1					
ANR	6600066	Identifier	addr		6600016	0					
ANR	6600067	Argument	1		6600016	2					
ANR	6600068	PrimaryExpression	1		6600016	0					
ANR	6600069	ExpressionStatement	"buf = calloc ( 1 , core -> blocksize + 1 )"	170:1:4784:4821	6600016	4	True				
ANR	6600070	AssignmentExpression	"buf = calloc ( 1 , core -> blocksize + 1 )"		6600016	0		=			
ANR	6600071	Identifier	buf		6600016	0					
ANR	6600072	CallExpression	"calloc ( 1 , core -> blocksize + 1 )"		6600016	1					
ANR	6600073	Callee	calloc		6600016	0					
ANR	6600074	Identifier	calloc		6600016	0					
ANR	6600075	ArgumentList	1		6600016	1					
ANR	6600076	Argument	1		6600016	0					
ANR	6600077	PrimaryExpression	1		6600016	0					
ANR	6600078	Argument	core -> blocksize + 1		6600016	1					
ANR	6600079	AdditiveExpression	core -> blocksize + 1		6600016	0		+			
ANR	6600080	PtrMemberAccess	core -> blocksize		6600016	0					
ANR	6600081	Identifier	core		6600016	0					
ANR	6600082	Identifier	blocksize		6600016	1					
ANR	6600083	PrimaryExpression	1		6600016	1					
ANR	6600084	IfStatement	if ( ! buf )		6600016	5					
ANR	6600085	Condition	! buf	171:5:4828:4831	6600016	0	True				
ANR	6600086	UnaryOperationExpression	! buf		6600016	0					
ANR	6600087	UnaryOperator	!		6600016	0					
ANR	6600088	Identifier	buf		6600016	1					
ANR	6600089	CompoundStatement		13:11:342:342	6600016	1					
ANR	6600090	ReturnStatement	return false ;	172:2:4838:4850	6600016	0	True				
ANR	6600091	Identifier	false		6600016	0					
ANR	6600092	ExpressionStatement	buf [ core -> blocksize ] = 0	174:1:4856:4880	6600016	6	True				
ANR	6600093	AssignmentExpression	buf [ core -> blocksize ] = 0		6600016	0		=			
ANR	6600094	ArrayIndexing	buf [ core -> blocksize ]		6600016	0					
ANR	6600095	Identifier	buf		6600016	0					
ANR	6600096	PtrMemberAccess	core -> blocksize		6600016	1					
ANR	6600097	Identifier	core		6600016	0					
ANR	6600098	Identifier	blocksize		6600016	1					
ANR	6600099	PrimaryExpression	0		6600016	1					
ANR	6600100	ExpressionStatement	"r_io_read_at ( core -> io , addr , buf , core -> blocksize )"	175:1:4883:4934	6600016	7	True				
ANR	6600101	CallExpression	"r_io_read_at ( core -> io , addr , buf , core -> blocksize )"		6600016	0					
ANR	6600102	Callee	r_io_read_at		6600016	0					
ANR	6600103	Identifier	r_io_read_at		6600016	0					
ANR	6600104	ArgumentList	core -> io		6600016	1					
ANR	6600105	Argument	core -> io		6600016	0					
ANR	6600106	PtrMemberAccess	core -> io		6600016	0					
ANR	6600107	Identifier	core		6600016	0					
ANR	6600108	Identifier	io		6600016	1					
ANR	6600109	Argument	addr		6600016	1					
ANR	6600110	Identifier	addr		6600016	0					
ANR	6600111	Argument	buf		6600016	2					
ANR	6600112	Identifier	buf		6600016	0					
ANR	6600113	Argument	core -> blocksize		6600016	3					
ANR	6600114	PtrMemberAccess	core -> blocksize		6600016	0					
ANR	6600115	Identifier	core		6600016	0					
ANR	6600116	Identifier	blocksize		6600016	1					
ANR	6600117	IfStatement	if ( maxlen == 0 )		6600016	8					
ANR	6600118	Condition	maxlen == 0	176:5:4941:4951	6600016	0	True				
ANR	6600119	EqualityExpression	maxlen == 0		6600016	0		==			
ANR	6600120	Identifier	maxlen		6600016	0					
ANR	6600121	PrimaryExpression	0		6600016	1					
ANR	6600122	CompoundStatement		18:18:462:462	6600016	1					
ANR	6600123	ExpressionStatement	"maxlen = r_str_nlen ( ( const char * ) buf , core -> blocksize )"	178:2:5029:5086	6600016	0	True				
ANR	6600124	AssignmentExpression	"maxlen = r_str_nlen ( ( const char * ) buf , core -> blocksize )"		6600016	0		=			
ANR	6600125	Identifier	maxlen		6600016	0					
ANR	6600126	CallExpression	"r_str_nlen ( ( const char * ) buf , core -> blocksize )"		6600016	1					
ANR	6600127	Callee	r_str_nlen		6600016	0					
ANR	6600128	Identifier	r_str_nlen		6600016	0					
ANR	6600129	ArgumentList	( const char * ) buf		6600016	1					
ANR	6600130	Argument	( const char * ) buf		6600016	0					
ANR	6600131	CastExpression	( const char * ) buf		6600016	0					
ANR	6600132	CastTarget	const char *		6600016	0					
ANR	6600133	Identifier	buf		6600016	1					
ANR	6600134	Argument	core -> blocksize		6600016	1					
ANR	6600135	PtrMemberAccess	core -> blocksize		6600016	0					
ANR	6600136	Identifier	core		6600016	0					
ANR	6600137	Identifier	blocksize		6600016	1					
ANR	6600138	ElseStatement	else		6600016	0					
ANR	6600139	IfStatement	if ( maxlen > core -> blocksize )		6600016	0					
ANR	6600140	Condition	maxlen > core -> blocksize	179:12:5100:5123	6600016	0	True				
ANR	6600141	RelationalExpression	maxlen > core -> blocksize		6600016	0		>			
ANR	6600142	Identifier	maxlen		6600016	0					
ANR	6600143	PtrMemberAccess	core -> blocksize		6600016	1					
ANR	6600144	Identifier	core		6600016	0					
ANR	6600145	Identifier	blocksize		6600016	1					
ANR	6600146	CompoundStatement		21:38:634:634	6600016	1					
ANR	6600147	ExpressionStatement	maxlen = core -> blocksize	180:2:5130:5154	6600016	0	True				
ANR	6600148	AssignmentExpression	maxlen = core -> blocksize		6600016	0		=			
ANR	6600149	Identifier	maxlen		6600016	0					
ANR	6600150	PtrMemberAccess	core -> blocksize		6600016	1					
ANR	6600151	Identifier	core		6600016	0					
ANR	6600152	Identifier	blocksize		6600016	1					
ANR	6600153	ExpressionStatement	"r_core_yank_set ( core , addr , buf , maxlen )"	182:1:5160:5201	6600016	9	True				
ANR	6600154	CallExpression	"r_core_yank_set ( core , addr , buf , maxlen )"		6600016	0					
ANR	6600155	Callee	r_core_yank_set		6600016	0					
ANR	6600156	Identifier	r_core_yank_set		6600016	0					
ANR	6600157	ArgumentList	core		6600016	1					
ANR	6600158	Argument	core		6600016	0					
ANR	6600159	Identifier	core		6600016	0					
ANR	6600160	Argument	addr		6600016	1					
ANR	6600161	Identifier	addr		6600016	0					
ANR	6600162	Argument	buf		6600016	2					
ANR	6600163	Identifier	buf		6600016	0					
ANR	6600164	Argument	maxlen		6600016	3					
ANR	6600165	Identifier	maxlen		6600016	0					
ANR	6600166	IfStatement	if ( curseek != addr )		6600016	10					
ANR	6600167	Condition	curseek != addr	183:5:5208:5222	6600016	0	True				
ANR	6600168	EqualityExpression	curseek != addr		6600016	0		!=			
ANR	6600169	Identifier	curseek		6600016	0					
ANR	6600170	Identifier	addr		6600016	1					
ANR	6600171	CompoundStatement		25:22:733:733	6600016	1					
ANR	6600172	ExpressionStatement	"r_core_seek ( core , curseek , 1 )"	184:2:5229:5259	6600016	0	True				
ANR	6600173	CallExpression	"r_core_seek ( core , curseek , 1 )"		6600016	0					
ANR	6600174	Callee	r_core_seek		6600016	0					
ANR	6600175	Identifier	r_core_seek		6600016	0					
ANR	6600176	ArgumentList	core		6600016	1					
ANR	6600177	Argument	core		6600016	0					
ANR	6600178	Identifier	core		6600016	0					
ANR	6600179	Argument	curseek		6600016	1					
ANR	6600180	Identifier	curseek		6600016	0					
ANR	6600181	Argument	1		6600016	2					
ANR	6600182	PrimaryExpression	1		6600016	0					
ANR	6600183	ExpressionStatement	free ( buf )	186:1:5265:5275	6600016	11	True				
ANR	6600184	CallExpression	free ( buf )		6600016	0					
ANR	6600185	Callee	free		6600016	0					
ANR	6600186	Identifier	free		6600016	0					
ANR	6600187	ArgumentList	buf		6600016	1					
ANR	6600188	Argument	buf		6600016	0					
ANR	6600189	Identifier	buf		6600016	0					
ANR	6600190	ReturnStatement	return true ;	187:1:5278:5289	6600016	12	True				
ANR	6600191	Identifier	true		6600016	0					
ANR	6600192	ReturnType	R_API int		6600016	1					
ANR	6600193	Identifier	r_core_yank_string		6600016	2					
ANR	6600194	ParameterList	"RCore * core , ut64 addr , int maxlen"		6600016	3					
ANR	6600195	Parameter	RCore * core	159:29:4455:4465	6600016	0	True				
ANR	6600196	ParameterType	RCore *		6600016	0					
ANR	6600197	Identifier	core		6600016	1					
ANR	6600198	Parameter	ut64 addr	159:42:4468:4476	6600016	1	True				
ANR	6600199	ParameterType	ut64		6600016	0					
ANR	6600200	Identifier	addr		6600016	1					
ANR	6600201	Parameter	int maxlen	159:53:4479:4488	6600016	2	True				
ANR	6600202	ParameterType	int		6600016	0					
ANR	6600203	Identifier	maxlen		6600016	1					
ANR	6600204	CFGEntryNode	ENTRY		6600016		True				
ANR	6600205	CFGExitNode	EXIT		6600016		True				
ANR	6600206	Symbol	core -> blocksize		6600016						
ANR	6600207	Symbol	* buf		6600016						
ANR	6600208	Symbol	NULL		6600016						
ANR	6600209	Symbol	* core		6600016						
ANR	6600210	Symbol	false		6600016						
ANR	6600211	Symbol	r_str_nlen		6600016						
ANR	6600212	Symbol	core -> offset		6600016						
ANR	6600213	Symbol	calloc		6600016						
ANR	6600214	Symbol	core		6600016						
ANR	6600215	Symbol	buf		6600016						
ANR	6600216	Symbol	curseek		6600016						
ANR	6600217	Symbol	core -> io		6600016						
ANR	6600218	Symbol	true		6600016						
ANR	6600219	Symbol	* core -> blocksize		6600016						
ANR	6600220	Symbol	addr		6600016						
ANR	6600221	Symbol	maxlen		6600016						
ANR	6600222	Symbol	* * core		6600016						
ANR	6600223	Function	r_core_yank_paste	190:0:5294:5651							
ANR	6600224	FunctionDef	"r_core_yank_paste (RCore * core , ut64 addr , int len)"		6600223	0					
ANR	6600225	CompoundStatement		190:61:5355:5651	6600223	0					
ANR	6600226	IfStatement	if ( len < 0 )		6600223	0					
ANR	6600227	Condition	len < 0	191:5:5362:5368	6600223	0	True				
ANR	6600228	RelationalExpression	len < 0		6600223	0		<			
ANR	6600229	Identifier	len		6600223	0					
ANR	6600230	PrimaryExpression	0		6600223	1					
ANR	6600231	CompoundStatement		2:14:15:15	6600223	1					
ANR	6600232	ReturnStatement	return false ;	192:2:5375:5387	6600223	0	True				
ANR	6600233	Identifier	false		6600223	0					
ANR	6600234	IfStatement	if ( len == 0 || len >= r_buf_size ( core -> yank_buf ) )		6600223	1					
ANR	6600235	Condition	len == 0 || len >= r_buf_size ( core -> yank_buf )	194:5:5397:5442	6600223	0	True				
ANR	6600236	OrExpression	len == 0 || len >= r_buf_size ( core -> yank_buf )		6600223	0		||			
ANR	6600237	EqualityExpression	len == 0		6600223	0		==			
ANR	6600238	Identifier	len		6600223	0					
ANR	6600239	PrimaryExpression	0		6600223	1					
ANR	6600240	RelationalExpression	len >= r_buf_size ( core -> yank_buf )		6600223	1		>=			
ANR	6600241	Identifier	len		6600223	0					
ANR	6600242	CallExpression	r_buf_size ( core -> yank_buf )		6600223	1					
ANR	6600243	Callee	r_buf_size		6600223	0					
ANR	6600244	Identifier	r_buf_size		6600223	0					
ANR	6600245	ArgumentList	core -> yank_buf		6600223	1					
ANR	6600246	Argument	core -> yank_buf		6600223	0					
ANR	6600247	PtrMemberAccess	core -> yank_buf		6600223	0					
ANR	6600248	Identifier	core		6600223	0					
ANR	6600249	Identifier	yank_buf		6600223	1					
ANR	6600250	CompoundStatement		5:53:89:89	6600223	1					
ANR	6600251	ExpressionStatement	len = r_buf_size ( core -> yank_buf )	195:2:5449:5482	6600223	0	True				
ANR	6600252	AssignmentExpression	len = r_buf_size ( core -> yank_buf )		6600223	0		=			
ANR	6600253	Identifier	len		6600223	0					
ANR	6600254	CallExpression	r_buf_size ( core -> yank_buf )		6600223	1					
ANR	6600255	Callee	r_buf_size		6600223	0					
ANR	6600256	Identifier	r_buf_size		6600223	0					
ANR	6600257	ArgumentList	core -> yank_buf		6600223	1					
ANR	6600258	Argument	core -> yank_buf		6600223	0					
ANR	6600259	PtrMemberAccess	core -> yank_buf		6600223	0					
ANR	6600260	Identifier	core		6600223	0					
ANR	6600261	Identifier	yank_buf		6600223	1					
ANR	6600262	IdentifierDeclStatement	"ut8 * buf = R_NEWS ( ut8 , len ) ;"	197:1:5488:5516	6600223	2	True				
ANR	6600263	IdentifierDecl	"* buf = R_NEWS ( ut8 , len )"		6600223	0					
ANR	6600264	IdentifierDeclType	ut8 *		6600223	0					
ANR	6600265	Identifier	buf		6600223	1					
ANR	6600266	AssignmentExpression	"* buf = R_NEWS ( ut8 , len )"		6600223	2		=			
ANR	6600267	Identifier	buf		6600223	0					
ANR	6600268	CallExpression	"R_NEWS ( ut8 , len )"		6600223	1					
ANR	6600269	Callee	R_NEWS		6600223	0					
ANR	6600270	Identifier	R_NEWS		6600223	0					
ANR	6600271	ArgumentList	ut8		6600223	1					
ANR	6600272	Argument	ut8		6600223	0					
ANR	6600273	Identifier	ut8		6600223	0					
ANR	6600274	Argument	len		6600223	1					
ANR	6600275	Identifier	len		6600223	0					
ANR	6600276	IfStatement	if ( ! buf )		6600223	3					
ANR	6600277	Condition	! buf	198:5:5523:5526	6600223	0	True				
ANR	6600278	UnaryOperationExpression	! buf		6600223	0					
ANR	6600279	UnaryOperator	!		6600223	0					
ANR	6600280	Identifier	buf		6600223	1					
ANR	6600281	CompoundStatement		9:11:173:173	6600223	1					
ANR	6600282	ReturnStatement	return false ;	199:2:5533:5545	6600223	0	True				
ANR	6600283	Identifier	false		6600223	0					
ANR	6600284	ExpressionStatement	"r_buf_read_at ( core -> yank_buf , 0 , buf , len )"	201:1:5551:5594	6600223	4	True				
ANR	6600285	CallExpression	"r_buf_read_at ( core -> yank_buf , 0 , buf , len )"		6600223	0					
ANR	6600286	Callee	r_buf_read_at		6600223	0					
ANR	6600287	Identifier	r_buf_read_at		6600223	0					
ANR	6600288	ArgumentList	core -> yank_buf		6600223	1					
ANR	6600289	Argument	core -> yank_buf		6600223	0					
ANR	6600290	PtrMemberAccess	core -> yank_buf		6600223	0					
ANR	6600291	Identifier	core		6600223	0					
ANR	6600292	Identifier	yank_buf		6600223	1					
ANR	6600293	Argument	0		6600223	1					
ANR	6600294	PrimaryExpression	0		6600223	0					
ANR	6600295	Argument	buf		6600223	2					
ANR	6600296	Identifier	buf		6600223	0					
ANR	6600297	Argument	len		6600223	3					
ANR	6600298	Identifier	len		6600223	0					
ANR	6600299	ExpressionStatement	"r_core_write_at ( core , addr , buf , len )"	202:1:5597:5635	6600223	5	True				
ANR	6600300	CallExpression	"r_core_write_at ( core , addr , buf , len )"		6600223	0					
ANR	6600301	Callee	r_core_write_at		6600223	0					
ANR	6600302	Identifier	r_core_write_at		6600223	0					
ANR	6600303	ArgumentList	core		6600223	1					
ANR	6600304	Argument	core		6600223	0					
ANR	6600305	Identifier	core		6600223	0					
ANR	6600306	Argument	addr		6600223	1					
ANR	6600307	Identifier	addr		6600223	0					
ANR	6600308	Argument	buf		6600223	2					
ANR	6600309	Identifier	buf		6600223	0					
ANR	6600310	Argument	len		6600223	3					
ANR	6600311	Identifier	len		6600223	0					
ANR	6600312	ReturnStatement	return true ;	203:1:5638:5649	6600223	6	True				
ANR	6600313	Identifier	true		6600223	0					
ANR	6600314	ReturnType	R_API int		6600223	1					
ANR	6600315	Identifier	r_core_yank_paste		6600223	2					
ANR	6600316	ParameterList	"RCore * core , ut64 addr , int len"		6600223	3					
ANR	6600317	Parameter	RCore * core	190:28:5322:5332	6600223	0	True				
ANR	6600318	ParameterType	RCore *		6600223	0					
ANR	6600319	Identifier	core		6600223	1					
ANR	6600320	Parameter	ut64 addr	190:41:5335:5343	6600223	1	True				
ANR	6600321	ParameterType	ut64		6600223	0					
ANR	6600322	Identifier	addr		6600223	1					
ANR	6600323	Parameter	int len	190:52:5346:5352	6600223	2	True				
ANR	6600324	ParameterType	int		6600223	0					
ANR	6600325	Identifier	len		6600223	1					
ANR	6600326	CFGEntryNode	ENTRY		6600223		True				
ANR	6600327	CFGExitNode	EXIT		6600223		True				
ANR	6600328	Symbol	core		6600223						
ANR	6600329	Symbol	buf		6600223						
ANR	6600330	Symbol	len		6600223						
ANR	6600331	Symbol	core -> yank_buf		6600223						
ANR	6600332	Symbol	false		6600223						
ANR	6600333	Symbol	* core		6600223						
ANR	6600334	Symbol	ut8		6600223						
ANR	6600335	Symbol	true		6600223						
ANR	6600336	Symbol	addr		6600223						
ANR	6600337	Symbol	R_NEWS		6600223						
ANR	6600338	Symbol	r_buf_size		6600223						
ANR	6600339	Function	r_core_yank_to	206:0:5654:6278							
ANR	6600340	FunctionDef	"r_core_yank_to (RCore * core , const char * _arg)"		6600339	0					
ANR	6600341	CompoundStatement		206:56:5710:6278	6600339	0					
ANR	6600342	IdentifierDeclStatement	ut64 len = 0 ;	207:1:5713:5725	6600339	0	True				
ANR	6600343	IdentifierDecl	len = 0		6600339	0					
ANR	6600344	IdentifierDeclType	ut64		6600339	0					
ANR	6600345	Identifier	len		6600339	1					
ANR	6600346	AssignmentExpression	len = 0		6600339	2		=			
ANR	6600347	Identifier	len		6600339	0					
ANR	6600348	PrimaryExpression	0		6600339	1					
ANR	6600349	IdentifierDeclStatement	ut64 pos = - 1 ;	208:1:5728:5741	6600339	1	True				
ANR	6600350	IdentifierDecl	pos = - 1		6600339	0					
ANR	6600351	IdentifierDeclType	ut64		6600339	0					
ANR	6600352	Identifier	pos		6600339	1					
ANR	6600353	AssignmentExpression	pos = - 1		6600339	2		=			
ANR	6600354	Identifier	pos		6600339	0					
ANR	6600355	UnaryOperationExpression	- 1		6600339	1					
ANR	6600356	UnaryOperator	-		6600339	0					
ANR	6600357	PrimaryExpression	1		6600339	1					
ANR	6600358	IdentifierDeclStatement	"char * str , * arg ;"	209:1:5744:5759	6600339	2	True				
ANR	6600359	IdentifierDecl	* str		6600339	0					
ANR	6600360	IdentifierDeclType	char *		6600339	0					
ANR	6600361	Identifier	str		6600339	1					
ANR	6600362	IdentifierDecl	* arg		6600339	1					
ANR	6600363	IdentifierDeclType	char *		6600339	0					
ANR	6600364	Identifier	arg		6600339	1					
ANR	6600365	IdentifierDeclStatement	int res = false ;	210:1:5762:5777	6600339	3	True				
ANR	6600366	IdentifierDecl	res = false		6600339	0					
ANR	6600367	IdentifierDeclType	int		6600339	0					
ANR	6600368	Identifier	res		6600339	1					
ANR	6600369	AssignmentExpression	res = false		6600339	2		=			
ANR	6600370	Identifier	false		6600339	0					
ANR	6600371	Identifier	false		6600339	1					
ANR	6600372	WhileStatement	while ( * _arg == ' ' )		6600339	4					
ANR	6600373	Condition	* _arg == ' '	212:8:5788:5799	6600339	0	True				
ANR	6600374	EqualityExpression	* _arg == ' '		6600339	0		==			
ANR	6600375	UnaryOperationExpression	* _arg		6600339	0					
ANR	6600376	UnaryOperator	*		6600339	0					
ANR	6600377	Identifier	_arg		6600339	1					
ANR	6600378	PrimaryExpression	' '		6600339	1					
ANR	6600379	CompoundStatement		7:22:91:91	6600339	1					
ANR	6600380	ExpressionStatement	_arg ++	213:2:5806:5812	6600339	0	True				
ANR	6600381	PostIncDecOperationExpression	_arg ++		6600339	0					
ANR	6600382	Identifier	_arg		6600339	0					
ANR	6600383	IncDec	++		6600339	1					
ANR	6600384	ExpressionStatement	arg = strdup ( _arg )	215:1:5818:5837	6600339	5	True				
ANR	6600385	AssignmentExpression	arg = strdup ( _arg )		6600339	0		=			
ANR	6600386	Identifier	arg		6600339	0					
ANR	6600387	CallExpression	strdup ( _arg )		6600339	1					
ANR	6600388	Callee	strdup		6600339	0					
ANR	6600389	Identifier	strdup		6600339	0					
ANR	6600390	ArgumentList	_arg		6600339	1					
ANR	6600391	Argument	_arg		6600339	0					
ANR	6600392	Identifier	_arg		6600339	0					
ANR	6600393	ExpressionStatement	"str = strchr ( arg , ' ' )"	216:1:5840:5863	6600339	6	True				
ANR	6600394	AssignmentExpression	"str = strchr ( arg , ' ' )"		6600339	0		=			
ANR	6600395	Identifier	str		6600339	0					
ANR	6600396	CallExpression	"strchr ( arg , ' ' )"		6600339	1					
ANR	6600397	Callee	strchr		6600339	0					
ANR	6600398	Identifier	strchr		6600339	0					
ANR	6600399	ArgumentList	arg		6600339	1					
ANR	6600400	Argument	arg		6600339	0					
ANR	6600401	Identifier	arg		6600339	0					
ANR	6600402	Argument	' '		6600339	1					
ANR	6600403	PrimaryExpression	' '		6600339	0					
ANR	6600404	IfStatement	if ( str )		6600339	7					
ANR	6600405	Condition	str	217:5:5870:5872	6600339	0	True				
ANR	6600406	Identifier	str		6600339	0					
ANR	6600407	CompoundStatement		12:10:164:164	6600339	1					
ANR	6600408	ExpressionStatement	str [ 0 ] = '\\0'	218:2:5879:5892	6600339	0	True				
ANR	6600409	AssignmentExpression	str [ 0 ] = '\\0'		6600339	0		=			
ANR	6600410	ArrayIndexing	str [ 0 ]		6600339	0					
ANR	6600411	Identifier	str		6600339	0					
ANR	6600412	PrimaryExpression	0		6600339	1					
ANR	6600413	PrimaryExpression	'\\0'		6600339	1					
ANR	6600414	ExpressionStatement	"len = r_num_math ( core -> num , arg )"	219:2:5896:5929	6600339	1	True				
ANR	6600415	AssignmentExpression	"len = r_num_math ( core -> num , arg )"		6600339	0		=			
ANR	6600416	Identifier	len		6600339	0					
ANR	6600417	CallExpression	"r_num_math ( core -> num , arg )"		6600339	1					
ANR	6600418	Callee	r_num_math		6600339	0					
ANR	6600419	Identifier	r_num_math		6600339	0					
ANR	6600420	ArgumentList	core -> num		6600339	1					
ANR	6600421	Argument	core -> num		6600339	0					
ANR	6600422	PtrMemberAccess	core -> num		6600339	0					
ANR	6600423	Identifier	core		6600339	0					
ANR	6600424	Identifier	num		6600339	1					
ANR	6600425	Argument	arg		6600339	1					
ANR	6600426	Identifier	arg		6600339	0					
ANR	6600427	ExpressionStatement	"pos = r_num_math ( core -> num , str + 1 )"	220:2:5933:5970	6600339	2	True				
ANR	6600428	AssignmentExpression	"pos = r_num_math ( core -> num , str + 1 )"		6600339	0		=			
ANR	6600429	Identifier	pos		6600339	0					
ANR	6600430	CallExpression	"r_num_math ( core -> num , str + 1 )"		6600339	1					
ANR	6600431	Callee	r_num_math		6600339	0					
ANR	6600432	Identifier	r_num_math		6600339	0					
ANR	6600433	ArgumentList	core -> num		6600339	1					
ANR	6600434	Argument	core -> num		6600339	0					
ANR	6600435	PtrMemberAccess	core -> num		6600339	0					
ANR	6600436	Identifier	core		6600339	0					
ANR	6600437	Identifier	num		6600339	1					
ANR	6600438	Argument	str + 1		6600339	1					
ANR	6600439	AdditiveExpression	str + 1		6600339	0		+			
ANR	6600440	Identifier	str		6600339	0					
ANR	6600441	PrimaryExpression	1		6600339	1					
ANR	6600442	ExpressionStatement	str [ 0 ] = ' '	221:2:5974:5986	6600339	3	True				
ANR	6600443	AssignmentExpression	str [ 0 ] = ' '		6600339	0		=			
ANR	6600444	ArrayIndexing	str [ 0 ]		6600339	0					
ANR	6600445	Identifier	str		6600339	0					
ANR	6600446	PrimaryExpression	0		6600339	1					
ANR	6600447	PrimaryExpression	' '		6600339	1					
ANR	6600448	IfStatement	if ( len < 1 )		6600339	8					
ANR	6600449	Condition	len < 1	223:5:5996:6002	6600339	0	True				
ANR	6600450	RelationalExpression	len < 1		6600339	0		<			
ANR	6600451	Identifier	len		6600339	0					
ANR	6600452	PrimaryExpression	1		6600339	1					
ANR	6600453	CompoundStatement		18:14:294:294	6600339	1					
ANR	6600454	ExpressionStatement	free ( arg )	224:2:6009:6019	6600339	0	True				
ANR	6600455	CallExpression	free ( arg )		6600339	0					
ANR	6600456	Callee	free		6600339	0					
ANR	6600457	Identifier	free		6600339	0					
ANR	6600458	ArgumentList	arg		6600339	1					
ANR	6600459	Argument	arg		6600339	0					
ANR	6600460	Identifier	arg		6600339	0					
ANR	6600461	ReturnStatement	return res ;	225:2:6023:6033	6600339	1	True				
ANR	6600462	Identifier	res		6600339	0					
ANR	6600463	IfStatement	if ( ! str || pos == - 1 || len == 0 )		6600339	9					
ANR	6600464	Condition	! str || pos == - 1 || len == 0	227:5:6043:6071	6600339	0	True				
ANR	6600465	OrExpression	! str || pos == - 1 || len == 0		6600339	0		||			
ANR	6600466	UnaryOperationExpression	! str		6600339	0					
ANR	6600467	UnaryOperator	!		6600339	0					
ANR	6600468	Identifier	str		6600339	1					
ANR	6600469	OrExpression	pos == - 1 || len == 0		6600339	1		||			
ANR	6600470	EqualityExpression	pos == - 1		6600339	0		==			
ANR	6600471	Identifier	pos		6600339	0					
ANR	6600472	UnaryOperationExpression	- 1		6600339	1					
ANR	6600473	UnaryOperator	-		6600339	0					
ANR	6600474	PrimaryExpression	1		6600339	1					
ANR	6600475	EqualityExpression	len == 0		6600339	1		==			
ANR	6600476	Identifier	len		6600339	0					
ANR	6600477	PrimaryExpression	0		6600339	1					
ANR	6600478	CompoundStatement		22:36:363:363	6600339	1					
ANR	6600479	ExpressionStatement	"eprintf ( ""Usage: yt [len] [dst-addr]\\n"" )"	228:2:6078:6118	6600339	0	True				
ANR	6600480	CallExpression	"eprintf ( ""Usage: yt [len] [dst-addr]\\n"" )"		6600339	0					
ANR	6600481	Callee	eprintf		6600339	0					
ANR	6600482	Identifier	eprintf		6600339	0					
ANR	6600483	ArgumentList	"""Usage: yt [len] [dst-addr]\\n"""		6600339	1					
ANR	6600484	Argument	"""Usage: yt [len] [dst-addr]\\n"""		6600339	0					
ANR	6600485	PrimaryExpression	"""Usage: yt [len] [dst-addr]\\n"""		6600339	0					
ANR	6600486	ExpressionStatement	free ( arg )	229:2:6122:6132	6600339	1	True				
ANR	6600487	CallExpression	free ( arg )		6600339	0					
ANR	6600488	Callee	free		6600339	0					
ANR	6600489	Identifier	free		6600339	0					
ANR	6600490	ArgumentList	arg		6600339	1					
ANR	6600491	Argument	arg		6600339	0					
ANR	6600492	Identifier	arg		6600339	0					
ANR	6600493	ReturnStatement	return res ;	230:2:6136:6146	6600339	2	True				
ANR	6600494	Identifier	res		6600339	0					
ANR	6600495	IfStatement	"if ( r_core_yank ( core , core -> offset , len ) == true )"		6600339	10					
ANR	6600496	Condition	"r_core_yank ( core , core -> offset , len ) == true"	232:5:6156:6200	6600339	0	True				
ANR	6600497	EqualityExpression	"r_core_yank ( core , core -> offset , len ) == true"		6600339	0		==			
ANR	6600498	CallExpression	"r_core_yank ( core , core -> offset , len )"		6600339	0					
ANR	6600499	Callee	r_core_yank		6600339	0					
ANR	6600500	Identifier	r_core_yank		6600339	0					
ANR	6600501	ArgumentList	core		6600339	1					
ANR	6600502	Argument	core		6600339	0					
ANR	6600503	Identifier	core		6600339	0					
ANR	6600504	Argument	core -> offset		6600339	1					
ANR	6600505	PtrMemberAccess	core -> offset		6600339	0					
ANR	6600506	Identifier	core		6600339	0					
ANR	6600507	Identifier	offset		6600339	1					
ANR	6600508	Argument	len		6600339	2					
ANR	6600509	Identifier	len		6600339	0					
ANR	6600510	Identifier	true		6600339	1					
ANR	6600511	CompoundStatement		27:52:492:492	6600339	1					
ANR	6600512	ExpressionStatement	"res = r_core_yank_paste ( core , pos , len )"	233:2:6207:6247	6600339	0	True				
ANR	6600513	AssignmentExpression	"res = r_core_yank_paste ( core , pos , len )"		6600339	0		=			
ANR	6600514	Identifier	res		6600339	0					
ANR	6600515	CallExpression	"r_core_yank_paste ( core , pos , len )"		6600339	1					
ANR	6600516	Callee	r_core_yank_paste		6600339	0					
ANR	6600517	Identifier	r_core_yank_paste		6600339	0					
ANR	6600518	ArgumentList	core		6600339	1					
ANR	6600519	Argument	core		6600339	0					
ANR	6600520	Identifier	core		6600339	0					
ANR	6600521	Argument	pos		6600339	1					
ANR	6600522	Identifier	pos		6600339	0					
ANR	6600523	Argument	len		6600339	2					
ANR	6600524	Identifier	len		6600339	0					
ANR	6600525	ExpressionStatement	free ( arg )	235:1:6253:6263	6600339	11	True				
ANR	6600526	CallExpression	free ( arg )		6600339	0					
ANR	6600527	Callee	free		6600339	0					
ANR	6600528	Identifier	free		6600339	0					
ANR	6600529	ArgumentList	arg		6600339	1					
ANR	6600530	Argument	arg		6600339	0					
ANR	6600531	Identifier	arg		6600339	0					
ANR	6600532	ReturnStatement	return res ;	236:1:6266:6276	6600339	12	True				
ANR	6600533	Identifier	res		6600339	0					
ANR	6600534	ReturnType	R_API int		6600339	1					
ANR	6600535	Identifier	r_core_yank_to		6600339	2					
ANR	6600536	ParameterList	"RCore * core , const char * _arg"		6600339	3					
ANR	6600537	Parameter	RCore * core	206:25:5679:5689	6600339	0	True				
ANR	6600538	ParameterType	RCore *		6600339	0					
ANR	6600539	Identifier	core		6600339	1					
ANR	6600540	Parameter	const char * _arg	206:38:5692:5707	6600339	1	True				
ANR	6600541	ParameterType	const char *		6600339	0					
ANR	6600542	Identifier	_arg		6600339	1					
ANR	6600543	CFGEntryNode	ENTRY		6600339		True				
ANR	6600544	CFGExitNode	EXIT		6600339		True				
ANR	6600545	Symbol	res		6600339						
ANR	6600546	Symbol	r_core_yank_paste		6600339						
ANR	6600547	Symbol	false		6600339						
ANR	6600548	Symbol	* core		6600339						
ANR	6600549	Symbol	strchr		6600339						
ANR	6600550	Symbol	core -> offset		6600339						
ANR	6600551	Symbol	r_num_math		6600339						
ANR	6600552	Symbol	str		6600339						
ANR	6600553	Symbol	core		6600339						
ANR	6600554	Symbol	len		6600339						
ANR	6600555	Symbol	pos		6600339						
ANR	6600556	Symbol	* _arg		6600339						
ANR	6600557	Symbol	arg		6600339						
ANR	6600558	Symbol	true		6600339						
ANR	6600559	Symbol	_arg		6600339						
ANR	6600560	Symbol	strdup		6600339						
ANR	6600561	Symbol	* str		6600339						
ANR	6600562	Symbol	core -> num		6600339						
ANR	6600563	Symbol	r_core_yank		6600339						
ANR	6600564	Function	r_core_yank_dump	239:0:6281:7710							
ANR	6600565	FunctionDef	"r_core_yank_dump (RCore * core , ut64 pos , int format)"		6600564	0					
ANR	6600566	CompoundStatement		239:63:6344:7710	6600564	0					
ANR	6600567	IdentifierDeclStatement	bool res = false ;	240:1:6347:6363	6600564	0	True				
ANR	6600568	IdentifierDecl	res = false		6600564	0					
ANR	6600569	IdentifierDeclType	bool		6600564	0					
ANR	6600570	Identifier	res		6600564	1					
ANR	6600571	AssignmentExpression	res = false		6600564	2		=			
ANR	6600572	Identifier	false		6600564	0					
ANR	6600573	Identifier	false		6600564	1					
ANR	6600574	IdentifierDeclStatement	int i = 0 ;	241:1:6366:6375	6600564	1	True				
ANR	6600575	IdentifierDecl	i = 0		6600564	0					
ANR	6600576	IdentifierDeclType	int		6600564	0					
ANR	6600577	Identifier	i		6600564	1					
ANR	6600578	AssignmentExpression	i = 0		6600564	2		=			
ANR	6600579	Identifier	i		6600564	0					
ANR	6600580	PrimaryExpression	0		6600564	1					
ANR	6600581	IdentifierDeclStatement	int ybl = r_buf_size ( core -> yank_buf ) ;	242:1:6378:6415	6600564	2	True				
ANR	6600582	IdentifierDecl	ybl = r_buf_size ( core -> yank_buf )		6600564	0					
ANR	6600583	IdentifierDeclType	int		6600564	0					
ANR	6600584	Identifier	ybl		6600564	1					
ANR	6600585	AssignmentExpression	ybl = r_buf_size ( core -> yank_buf )		6600564	2		=			
ANR	6600586	Identifier	ybl		6600564	0					
ANR	6600587	CallExpression	r_buf_size ( core -> yank_buf )		6600564	1					
ANR	6600588	Callee	r_buf_size		6600564	0					
ANR	6600589	Identifier	r_buf_size		6600564	0					
ANR	6600590	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600591	Argument	core -> yank_buf		6600564	0					
ANR	6600592	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600593	Identifier	core		6600564	0					
ANR	6600594	Identifier	yank_buf		6600564	1					
ANR	6600595	IfStatement	if ( ybl > 0 )		6600564	3					
ANR	6600596	Condition	ybl > 0	243:5:6422:6428	6600564	0	True				
ANR	6600597	RelationalExpression	ybl > 0		6600564	0		>			
ANR	6600598	Identifier	ybl		6600564	0					
ANR	6600599	PrimaryExpression	0		6600564	1					
ANR	6600600	CompoundStatement		5:14:86:86	6600564	1					
ANR	6600601	IfStatement	if ( pos < ybl )		6600564	0					
ANR	6600602	Condition	pos < ybl	244:6:6439:6447	6600564	0	True				
ANR	6600603	RelationalExpression	pos < ybl		6600564	0		<			
ANR	6600604	Identifier	pos		6600564	0					
ANR	6600605	Identifier	ybl		6600564	1					
ANR	6600606	CompoundStatement		6:17:105:105	6600564	1					
ANR	6600607	SwitchStatement	switch ( format )		6600564	0					
ANR	6600608	Condition	format	245:11:6463:6468	6600564	0	True				
ANR	6600609	Identifier	format		6600564	0					
ANR	6600610	CompoundStatement		7:19:126:126	6600564	1					
ANR	6600611	Label	case 'q' :	246:3:6476:6484	6600564	0	True				
ANR	6600612	ForStatement	for ( i = pos ; i < r_buf_size ( core -> yank_buf ) ; i ++ )		6600564	1					
ANR	6600613	ForInit	i = pos ;	247:9:6495:6502	6600564	0	True				
ANR	6600614	AssignmentExpression	i = pos		6600564	0		=			
ANR	6600615	Identifier	i		6600564	0					
ANR	6600616	Identifier	pos		6600564	1					
ANR	6600617	Condition	i < r_buf_size ( core -> yank_buf )	247:18:6504:6534	6600564	1	True				
ANR	6600618	RelationalExpression	i < r_buf_size ( core -> yank_buf )		6600564	0		<			
ANR	6600619	Identifier	i		6600564	0					
ANR	6600620	CallExpression	r_buf_size ( core -> yank_buf )		6600564	1					
ANR	6600621	Callee	r_buf_size		6600564	0					
ANR	6600622	Identifier	r_buf_size		6600564	0					
ANR	6600623	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600624	Argument	core -> yank_buf		6600564	0					
ANR	6600625	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600626	Identifier	core		6600564	0					
ANR	6600627	Identifier	yank_buf		6600564	1					
ANR	6600628	PostIncDecOperationExpression	i ++	247:51:6537:6539	6600564	2	True				
ANR	6600629	Identifier	i		6600564	0					
ANR	6600630	IncDec	++		6600564	1					
ANR	6600631	CompoundStatement		9:56:197:197	6600564	3					
ANR	6600632	ExpressionStatement	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"	248:5:6549:6607	6600564	0	True				
ANR	6600633	CallExpression	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"		6600564	0					
ANR	6600634	Callee	r_cons_printf		6600564	0					
ANR	6600635	Identifier	r_cons_printf		6600564	0					
ANR	6600636	ArgumentList	"""%02x"""		6600564	1					
ANR	6600637	Argument	"""%02x"""		6600564	0					
ANR	6600638	PrimaryExpression	"""%02x"""		6600564	0					
ANR	6600639	Argument	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	1					
ANR	6600640	CallExpression	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	0					
ANR	6600641	Callee	r_buf_read8_at		6600564	0					
ANR	6600642	Identifier	r_buf_read8_at		6600564	0					
ANR	6600643	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600644	Argument	core -> yank_buf		6600564	0					
ANR	6600645	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600646	Identifier	core		6600564	0					
ANR	6600647	Identifier	yank_buf		6600564	1					
ANR	6600648	Argument	i		6600564	1					
ANR	6600649	Identifier	i		6600564	0					
ANR	6600650	ExpressionStatement	r_cons_newline ( )	250:4:6619:6636	6600564	2	True				
ANR	6600651	CallExpression	r_cons_newline ( )		6600564	0					
ANR	6600652	Callee	r_cons_newline		6600564	0					
ANR	6600653	Identifier	r_cons_newline		6600564	0					
ANR	6600654	ArgumentList			6600564	1					
ANR	6600655	BreakStatement	break ;	251:4:6642:6647	6600564	3	True				
ANR	6600656	Label	case 'j' :	252:3:6652:6660	6600564	4	True				
ANR	6600657	CompoundStatement		15:4:321:321	6600564	5					
ANR	6600658	Statement	r_cons_printf	254:5:6673:6685	6600564	0	True				
ANR	6600659	Statement	(	254:19:6687:6687	6600564	1	True				
ANR	6600660	Statement	"""{\\""addr\\"":%"""	254:20:6688:6700	6600564	2	True				
ANR	6600661	Statement	PFMT64u	254:33:6701:6707	6600564	3	True				
ANR	6600662	Statement	""",\\""bytes\\"":\\"""""	254:40:6708:6722	6600564	4	True				
ANR	6600663	Statement	","	254:55:6723:6723	6600564	5	True				
ANR	6600664	Statement	core	254:57:6725:6728	6600564	6	True				
ANR	6600665	Statement	->	254:61:6729:6730	6600564	7	True				
ANR	6600666	Statement	yank_addr	254:63:6731:6739	6600564	8	True				
ANR	6600667	Statement	)	254:72:6740:6740	6600564	9	True				
ANR	6600668	ExpressionStatement		254:73:6741:6741	6600564	10	True				
ANR	6600669	ForStatement	for ( i = pos ; i < r_buf_size ( core -> yank_buf ) ; i ++ )		6600564	11					
ANR	6600670	ForInit	i = pos ;	255:10:6753:6760	6600564	0	True				
ANR	6600671	AssignmentExpression	i = pos		6600564	0		=			
ANR	6600672	Identifier	i		6600564	0					
ANR	6600673	Identifier	pos		6600564	1					
ANR	6600674	Condition	i < r_buf_size ( core -> yank_buf )	255:19:6762:6792	6600564	1	True				
ANR	6600675	RelationalExpression	i < r_buf_size ( core -> yank_buf )		6600564	0		<			
ANR	6600676	Identifier	i		6600564	0					
ANR	6600677	CallExpression	r_buf_size ( core -> yank_buf )		6600564	1					
ANR	6600678	Callee	r_buf_size		6600564	0					
ANR	6600679	Identifier	r_buf_size		6600564	0					
ANR	6600680	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600681	Argument	core -> yank_buf		6600564	0					
ANR	6600682	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600683	Identifier	core		6600564	0					
ANR	6600684	Identifier	yank_buf		6600564	1					
ANR	6600685	PostIncDecOperationExpression	i ++	255:52:6795:6797	6600564	2	True				
ANR	6600686	Identifier	i		6600564	0					
ANR	6600687	IncDec	++		6600564	1					
ANR	6600688	CompoundStatement		17:57:455:455	6600564	3					
ANR	6600689	ExpressionStatement	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"	256:6:6808:6866	6600564	0	True				
ANR	6600690	CallExpression	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"		6600564	0					
ANR	6600691	Callee	r_cons_printf		6600564	0					
ANR	6600692	Identifier	r_cons_printf		6600564	0					
ANR	6600693	ArgumentList	"""%02x"""		6600564	1					
ANR	6600694	Argument	"""%02x"""		6600564	0					
ANR	6600695	PrimaryExpression	"""%02x"""		6600564	0					
ANR	6600696	Argument	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	1					
ANR	6600697	CallExpression	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	0					
ANR	6600698	Callee	r_buf_read8_at		6600564	0					
ANR	6600699	Identifier	r_buf_read8_at		6600564	0					
ANR	6600700	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600701	Argument	core -> yank_buf		6600564	0					
ANR	6600702	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600703	Identifier	core		6600564	0					
ANR	6600704	Identifier	yank_buf		6600564	1					
ANR	6600705	Argument	i		6600564	1					
ANR	6600706	Identifier	i		6600564	0					
ANR	6600707	ExpressionStatement	"r_cons_printf ( ""\\""}\\n"" )"	258:5:6880:6903	6600564	12	True				
ANR	6600708	CallExpression	"r_cons_printf ( ""\\""}\\n"" )"		6600564	0					
ANR	6600709	Callee	r_cons_printf		6600564	0					
ANR	6600710	Identifier	r_cons_printf		6600564	0					
ANR	6600711	ArgumentList	"""\\""}\\n"""		6600564	1					
ANR	6600712	Argument	"""\\""}\\n"""		6600564	0					
ANR	6600713	PrimaryExpression	"""\\""}\\n"""		6600564	0					
ANR	6600714	BreakStatement	break ;	260:4:6915:6920	6600564	6	True				
ANR	6600715	Label	case '*' :	261:3:6925:6933	6600564	7	True				
ANR	6600716	ExpressionStatement	"r_cons_printf ( ""wx "" )"	263:4:6969:6990	6600564	8	True				
ANR	6600717	CallExpression	"r_cons_printf ( ""wx "" )"		6600564	0					
ANR	6600718	Callee	r_cons_printf		6600564	0					
ANR	6600719	Identifier	r_cons_printf		6600564	0					
ANR	6600720	ArgumentList	"""wx """		6600564	1					
ANR	6600721	Argument	"""wx """		6600564	0					
ANR	6600722	PrimaryExpression	"""wx """		6600564	0					
ANR	6600723	ForStatement	for ( i = pos ; i < r_buf_size ( core -> yank_buf ) ; i ++ )		6600564	9					
ANR	6600724	ForInit	i = pos ;	264:9:7001:7008	6600564	0	True				
ANR	6600725	AssignmentExpression	i = pos		6600564	0		=			
ANR	6600726	Identifier	i		6600564	0					
ANR	6600727	Identifier	pos		6600564	1					
ANR	6600728	Condition	i < r_buf_size ( core -> yank_buf )	264:18:7010:7040	6600564	1	True				
ANR	6600729	RelationalExpression	i < r_buf_size ( core -> yank_buf )		6600564	0		<			
ANR	6600730	Identifier	i		6600564	0					
ANR	6600731	CallExpression	r_buf_size ( core -> yank_buf )		6600564	1					
ANR	6600732	Callee	r_buf_size		6600564	0					
ANR	6600733	Identifier	r_buf_size		6600564	0					
ANR	6600734	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600735	Argument	core -> yank_buf		6600564	0					
ANR	6600736	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600737	Identifier	core		6600564	0					
ANR	6600738	Identifier	yank_buf		6600564	1					
ANR	6600739	PostIncDecOperationExpression	i ++	264:51:7043:7045	6600564	2	True				
ANR	6600740	Identifier	i		6600564	0					
ANR	6600741	IncDec	++		6600564	1					
ANR	6600742	CompoundStatement		26:56:703:703	6600564	3					
ANR	6600743	ExpressionStatement	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"	265:5:7055:7113	6600564	0	True				
ANR	6600744	CallExpression	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"		6600564	0					
ANR	6600745	Callee	r_cons_printf		6600564	0					
ANR	6600746	Identifier	r_cons_printf		6600564	0					
ANR	6600747	ArgumentList	"""%02x"""		6600564	1					
ANR	6600748	Argument	"""%02x"""		6600564	0					
ANR	6600749	PrimaryExpression	"""%02x"""		6600564	0					
ANR	6600750	Argument	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	1					
ANR	6600751	CallExpression	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	0					
ANR	6600752	Callee	r_buf_read8_at		6600564	0					
ANR	6600753	Identifier	r_buf_read8_at		6600564	0					
ANR	6600754	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600755	Argument	core -> yank_buf		6600564	0					
ANR	6600756	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600757	Identifier	core		6600564	0					
ANR	6600758	Identifier	yank_buf		6600564	1					
ANR	6600759	Argument	i		6600564	1					
ANR	6600760	Identifier	i		6600564	0					
ANR	6600761	ExpressionStatement	r_cons_newline ( )	268:4:7183:7200	6600564	10	True				
ANR	6600762	CallExpression	r_cons_newline ( )		6600564	0					
ANR	6600763	Callee	r_cons_newline		6600564	0					
ANR	6600764	Identifier	r_cons_newline		6600564	0					
ANR	6600765	ArgumentList			6600564	1					
ANR	6600766	BreakStatement	break ;	269:4:7206:7211	6600564	11	True				
ANR	6600767	Label	default :	270:3:7216:7223	6600564	12	True				
ANR	6600768	Identifier	default		6600564	0					
ANR	6600769	Statement	r_cons_printf	271:4:7229:7241	6600564	13	True				
ANR	6600770	Statement	(	271:18:7243:7243	6600564	14	True				
ANR	6600771	Statement	"""0x%08"""	271:19:7244:7250	6600564	15	True				
ANR	6600772	Statement	PFMT64x	271:27:7252:7258	6600564	16	True				
ANR	6600773	Statement	""" %d """	271:35:7260:7265	6600564	17	True				
ANR	6600774	Statement	","	271:41:7266:7266	6600564	18	True				
ANR	6600775	Statement	core	272:6:7274:7277	6600564	19	True				
ANR	6600776	Statement	->	272:10:7278:7279	6600564	20	True				
ANR	6600777	Statement	yank_addr	272:12:7280:7288	6600564	21	True				
ANR	6600778	Statement	+	272:22:7290:7290	6600564	22	True				
ANR	6600779	Statement	pos	272:24:7292:7294	6600564	23	True				
ANR	6600780	Statement	","	272:27:7295:7295	6600564	24	True				
ANR	6600781	Statement	r_buf_size	273:6:7303:7312	6600564	25	True				
ANR	6600782	Statement	(	273:17:7314:7314	6600564	26	True				
ANR	6600783	Statement	core	273:18:7315:7318	6600564	27	True				
ANR	6600784	Statement	->	273:22:7319:7320	6600564	28	True				
ANR	6600785	Statement	yank_buf	273:24:7321:7328	6600564	29	True				
ANR	6600786	Statement	)	273:32:7329:7329	6600564	30	True				
ANR	6600787	Statement	-	273:34:7331:7331	6600564	31	True				
ANR	6600788	Statement	pos	273:36:7333:7335	6600564	32	True				
ANR	6600789	Statement	)	273:39:7336:7336	6600564	33	True				
ANR	6600790	ExpressionStatement		273:40:7337:7337	6600564	34	True				
ANR	6600791	ForStatement	for ( i = pos ; i < r_buf_size ( core -> yank_buf ) ; i ++ )		6600564	35					
ANR	6600792	ForInit	i = pos ;	274:9:7348:7355	6600564	0	True				
ANR	6600793	AssignmentExpression	i = pos		6600564	0		=			
ANR	6600794	Identifier	i		6600564	0					
ANR	6600795	Identifier	pos		6600564	1					
ANR	6600796	Condition	i < r_buf_size ( core -> yank_buf )	274:18:7357:7387	6600564	1	True				
ANR	6600797	RelationalExpression	i < r_buf_size ( core -> yank_buf )		6600564	0		<			
ANR	6600798	Identifier	i		6600564	0					
ANR	6600799	CallExpression	r_buf_size ( core -> yank_buf )		6600564	1					
ANR	6600800	Callee	r_buf_size		6600564	0					
ANR	6600801	Identifier	r_buf_size		6600564	0					
ANR	6600802	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600803	Argument	core -> yank_buf		6600564	0					
ANR	6600804	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600805	Identifier	core		6600564	0					
ANR	6600806	Identifier	yank_buf		6600564	1					
ANR	6600807	PostIncDecOperationExpression	i ++	274:51:7390:7392	6600564	2	True				
ANR	6600808	Identifier	i		6600564	0					
ANR	6600809	IncDec	++		6600564	1					
ANR	6600810	CompoundStatement		36:56:1050:1050	6600564	3					
ANR	6600811	ExpressionStatement	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"	275:5:7402:7460	6600564	0	True				
ANR	6600812	CallExpression	"r_cons_printf ( ""%02x"" , r_buf_read8_at ( core -> yank_buf , i ) )"		6600564	0					
ANR	6600813	Callee	r_cons_printf		6600564	0					
ANR	6600814	Identifier	r_cons_printf		6600564	0					
ANR	6600815	ArgumentList	"""%02x"""		6600564	1					
ANR	6600816	Argument	"""%02x"""		6600564	0					
ANR	6600817	PrimaryExpression	"""%02x"""		6600564	0					
ANR	6600818	Argument	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	1					
ANR	6600819	CallExpression	"r_buf_read8_at ( core -> yank_buf , i )"		6600564	0					
ANR	6600820	Callee	r_buf_read8_at		6600564	0					
ANR	6600821	Identifier	r_buf_read8_at		6600564	0					
ANR	6600822	ArgumentList	core -> yank_buf		6600564	1					
ANR	6600823	Argument	core -> yank_buf		6600564	0					
ANR	6600824	PtrMemberAccess	core -> yank_buf		6600564	0					
ANR	6600825	Identifier	core		6600564	0					
ANR	6600826	Identifier	yank_buf		6600564	1					
ANR	6600827	Argument	i		6600564	1					
ANR	6600828	Identifier	i		6600564	0					
ANR	6600829	ExpressionStatement	r_cons_newline ( )	277:4:7472:7489	6600564	36	True				
ANR	6600830	CallExpression	r_cons_newline ( )		6600564	0					
ANR	6600831	Callee	r_cons_newline		6600564	0					
ANR	6600832	Identifier	r_cons_newline		6600564	0					
ANR	6600833	ArgumentList			6600564	1					
ANR	6600834	ExpressionStatement	res = true	279:3:7499:7509	6600564	1	True				
ANR	6600835	AssignmentExpression	res = true		6600564	0		=			
ANR	6600836	Identifier	res		6600564	0					
ANR	6600837	Identifier	true		6600564	1					
ANR	6600838	ElseStatement	else		6600564	0					
ANR	6600839	CompoundStatement		42:9:1175:1175	6600564	0					
ANR	6600840	ExpressionStatement	"eprintf ( ""Position exceeds buffer length.\\n"" )"	281:3:7525:7570	6600564	0	True				
ANR	6600841	CallExpression	"eprintf ( ""Position exceeds buffer length.\\n"" )"		6600564	0					
ANR	6600842	Callee	eprintf		6600564	0					
ANR	6600843	Identifier	eprintf		6600564	0					
ANR	6600844	ArgumentList	"""Position exceeds buffer length.\\n"""		6600564	1					
ANR	6600845	Argument	"""Position exceeds buffer length.\\n"""		6600564	0					
ANR	6600846	PrimaryExpression	"""Position exceeds buffer length.\\n"""		6600564	0					
ANR	6600847	ElseStatement	else		6600564	0					
ANR	6600848	CompoundStatement		45:8:1239:1239	6600564	0					
ANR	6600849	IfStatement	if ( format == 'j' )		6600564	0					
ANR	6600850	Condition	format == 'j'	284:6:7592:7604	6600564	0	True				
ANR	6600851	EqualityExpression	format == 'j'		6600564	0		==			
ANR	6600852	Identifier	format		6600564	0					
ANR	6600853	PrimaryExpression	'j'		6600564	1					
ANR	6600854	CompoundStatement		46:21:1262:1262	6600564	1					
ANR	6600855	ExpressionStatement	"r_cons_printf ( ""{}\\n"" )"	285:3:7612:7634	6600564	0	True				
ANR	6600856	CallExpression	"r_cons_printf ( ""{}\\n"" )"		6600564	0					
ANR	6600857	Callee	r_cons_printf		6600564	0					
ANR	6600858	Identifier	r_cons_printf		6600564	0					
ANR	6600859	ArgumentList	"""{}\\n"""		6600564	1					
ANR	6600860	Argument	"""{}\\n"""		6600564	0					
ANR	6600861	PrimaryExpression	"""{}\\n"""		6600564	0					
ANR	6600862	ElseStatement	else		6600564	0					
ANR	6600863	CompoundStatement		48:9:1300:1300	6600564	0					
ANR	6600864	ExpressionStatement	"eprintf ( ""No buffer yanked already\\n"" )"	287:3:7650:7688	6600564	0	True				
ANR	6600865	CallExpression	"eprintf ( ""No buffer yanked already\\n"" )"		6600564	0					
ANR	6600866	Callee	eprintf		6600564	0					
ANR	6600867	Identifier	eprintf		6600564	0					
ANR	6600868	ArgumentList	"""No buffer yanked already\\n"""		6600564	1					
ANR	6600869	Argument	"""No buffer yanked already\\n"""		6600564	0					
ANR	6600870	PrimaryExpression	"""No buffer yanked already\\n"""		6600564	0					
ANR	6600871	ReturnStatement	return res ;	290:1:7698:7708	6600564	4	True				
ANR	6600872	Identifier	res		6600564	0					
ANR	6600873	ReturnType	R_API bool		6600564	1					
ANR	6600874	Identifier	r_core_yank_dump		6600564	2					
ANR	6600875	ParameterList	"RCore * core , ut64 pos , int format"		6600564	3					
ANR	6600876	Parameter	RCore * core	239:28:6309:6319	6600564	0	True				
ANR	6600877	ParameterType	RCore *		6600564	0					
ANR	6600878	Identifier	core		6600564	1					
ANR	6600879	Parameter	ut64 pos	239:41:6322:6329	6600564	1	True				
ANR	6600880	ParameterType	ut64		6600564	0					
ANR	6600881	Identifier	pos		6600564	1					
ANR	6600882	Parameter	int format	239:51:6332:6341	6600564	2	True				
ANR	6600883	ParameterType	int		6600564	0					
ANR	6600884	Identifier	format		6600564	1					
ANR	6600885	CFGEntryNode	ENTRY		6600564		True				
ANR	6600886	CFGExitNode	EXIT		6600564		True				
ANR	6600887	Symbol	core		6600564						
ANR	6600888	Symbol	res		6600564						
ANR	6600889	Symbol	ybl		6600564						
ANR	6600890	Symbol	pos		6600564						
ANR	6600891	Symbol	r_buf_read8_at		6600564						
ANR	6600892	Symbol	core -> yank_buf		6600564						
ANR	6600893	Symbol	format		6600564						
ANR	6600894	Symbol	false		6600564						
ANR	6600895	Symbol	* core		6600564						
ANR	6600896	Symbol	true		6600564						
ANR	6600897	Symbol	i		6600564						
ANR	6600898	Symbol	r_buf_size		6600564						
ANR	6600899	Function	r_core_yank_hexdump	293:0:7713:8211							
ANR	6600900	FunctionDef	"r_core_yank_hexdump (RCore * core , ut64 pos)"		6600899	0					
ANR	6600901	CompoundStatement		293:53:7766:8211	6600899	0					
ANR	6600902	IdentifierDeclStatement	int res = false ;	294:1:7769:7784	6600899	0	True				
ANR	6600903	IdentifierDecl	res = false		6600899	0					
ANR	6600904	IdentifierDeclType	int		6600899	0					
ANR	6600905	Identifier	res		6600899	1					
ANR	6600906	AssignmentExpression	res = false		6600899	2		=			
ANR	6600907	Identifier	false		6600899	0					
ANR	6600908	Identifier	false		6600899	1					
ANR	6600909	IdentifierDeclStatement	int ybl = r_buf_size ( core -> yank_buf ) ;	295:1:7787:7824	6600899	1	True				
ANR	6600910	IdentifierDecl	ybl = r_buf_size ( core -> yank_buf )		6600899	0					
ANR	6600911	IdentifierDeclType	int		6600899	0					
ANR	6600912	Identifier	ybl		6600899	1					
ANR	6600913	AssignmentExpression	ybl = r_buf_size ( core -> yank_buf )		6600899	2		=			
ANR	6600914	Identifier	ybl		6600899	0					
ANR	6600915	CallExpression	r_buf_size ( core -> yank_buf )		6600899	1					
ANR	6600916	Callee	r_buf_size		6600899	0					
ANR	6600917	Identifier	r_buf_size		6600899	0					
ANR	6600918	ArgumentList	core -> yank_buf		6600899	1					
ANR	6600919	Argument	core -> yank_buf		6600899	0					
ANR	6600920	PtrMemberAccess	core -> yank_buf		6600899	0					
ANR	6600921	Identifier	core		6600899	0					
ANR	6600922	Identifier	yank_buf		6600899	1					
ANR	6600923	IfStatement	if ( ybl > 0 )		6600899	2					
ANR	6600924	Condition	ybl > 0	296:5:7831:7837	6600899	0	True				
ANR	6600925	RelationalExpression	ybl > 0		6600899	0		>			
ANR	6600926	Identifier	ybl		6600899	0					
ANR	6600927	PrimaryExpression	0		6600899	1					
ANR	6600928	CompoundStatement		4:14:73:73	6600899	1					
ANR	6600929	IfStatement	if ( pos < ybl )		6600899	0					
ANR	6600930	Condition	pos < ybl	297:6:7848:7856	6600899	0	True				
ANR	6600931	RelationalExpression	pos < ybl		6600899	0		<			
ANR	6600932	Identifier	pos		6600899	0					
ANR	6600933	Identifier	ybl		6600899	1					
ANR	6600934	CompoundStatement		6:3:97:131	6600899	1					
ANR	6600935	IdentifierDeclStatement	"ut8 * buf = R_NEWS ( ut8 , ybl - pos ) ;"	298:3:7864:7898	6600899	0	True				
ANR	6600936	IdentifierDecl	"* buf = R_NEWS ( ut8 , ybl - pos )"		6600899	0					
ANR	6600937	IdentifierDeclType	ut8 *		6600899	0					
ANR	6600938	Identifier	buf		6600899	1					
ANR	6600939	AssignmentExpression	"* buf = R_NEWS ( ut8 , ybl - pos )"		6600899	2		=			
ANR	6600940	Identifier	buf		6600899	0					
ANR	6600941	CallExpression	"R_NEWS ( ut8 , ybl - pos )"		6600899	1					
ANR	6600942	Callee	R_NEWS		6600899	0					
ANR	6600943	Identifier	R_NEWS		6600899	0					
ANR	6600944	ArgumentList	ut8		6600899	1					
ANR	6600945	Argument	ut8		6600899	0					
ANR	6600946	Identifier	ut8		6600899	0					
ANR	6600947	Argument	ybl - pos		6600899	1					
ANR	6600948	AdditiveExpression	ybl - pos		6600899	0		-			
ANR	6600949	Identifier	ybl		6600899	0					
ANR	6600950	Identifier	pos		6600899	1					
ANR	6600951	IfStatement	if ( ! buf )		6600899	1					
ANR	6600952	Condition	! buf	299:7:7907:7910	6600899	0	True				
ANR	6600953	UnaryOperationExpression	! buf		6600899	0					
ANR	6600954	UnaryOperator	!		6600899	0					
ANR	6600955	Identifier	buf		6600899	1					
ANR	6600956	CompoundStatement		7:13:146:146	6600899	1					
ANR	6600957	ReturnStatement	return false ;	300:4:7919:7931	6600899	0	True				
ANR	6600958	Identifier	false		6600899	0					
ANR	6600959	ExpressionStatement	"r_buf_read_at ( core -> yank_buf , pos , buf , ybl - pos )"	302:3:7941:7992	6600899	2	True				
ANR	6600960	CallExpression	"r_buf_read_at ( core -> yank_buf , pos , buf , ybl - pos )"		6600899	0					
ANR	6600961	Callee	r_buf_read_at		6600899	0					
ANR	6600962	Identifier	r_buf_read_at		6600899	0					
ANR	6600963	ArgumentList	core -> yank_buf		6600899	1					
ANR	6600964	Argument	core -> yank_buf		6600899	0					
ANR	6600965	PtrMemberAccess	core -> yank_buf		6600899	0					
ANR	6600966	Identifier	core		6600899	0					
ANR	6600967	Identifier	yank_buf		6600899	1					
ANR	6600968	Argument	pos		6600899	1					
ANR	6600969	Identifier	pos		6600899	0					
ANR	6600970	Argument	buf		6600899	2					
ANR	6600971	Identifier	buf		6600899	0					
ANR	6600972	Argument	ybl - pos		6600899	3					
ANR	6600973	AdditiveExpression	ybl - pos		6600899	0		-			
ANR	6600974	Identifier	ybl		6600899	0					
ANR	6600975	Identifier	pos		6600899	1					
ANR	6600976	ExpressionStatement	"r_print_hexdump ( core -> print , pos , buf , ybl - pos , 16 , 1 , 1 )"	303:3:7997:8061	6600899	3	True				
ANR	6600977	CallExpression	"r_print_hexdump ( core -> print , pos , buf , ybl - pos , 16 , 1 , 1 )"		6600899	0					
ANR	6600978	Callee	r_print_hexdump		6600899	0					
ANR	6600979	Identifier	r_print_hexdump		6600899	0					
ANR	6600980	ArgumentList	core -> print		6600899	1					
ANR	6600981	Argument	core -> print		6600899	0					
ANR	6600982	PtrMemberAccess	core -> print		6600899	0					
ANR	6600983	Identifier	core		6600899	0					
ANR	6600984	Identifier	print		6600899	1					
ANR	6600985	Argument	pos		6600899	1					
ANR	6600986	Identifier	pos		6600899	0					
ANR	6600987	Argument	buf		6600899	2					
ANR	6600988	Identifier	buf		6600899	0					
ANR	6600989	Argument	ybl - pos		6600899	3					
ANR	6600990	AdditiveExpression	ybl - pos		6600899	0		-			
ANR	6600991	Identifier	ybl		6600899	0					
ANR	6600992	Identifier	pos		6600899	1					
ANR	6600993	Argument	16		6600899	4					
ANR	6600994	PrimaryExpression	16		6600899	0					
ANR	6600995	Argument	1		6600899	5					
ANR	6600996	PrimaryExpression	1		6600899	0					
ANR	6600997	Argument	1		6600899	6					
ANR	6600998	PrimaryExpression	1		6600899	0					
ANR	6600999	ExpressionStatement	res = true	305:3:8066:8076	6600899	4	True				
ANR	6601000	AssignmentExpression	res = true		6600899	0		=			
ANR	6601001	Identifier	res		6600899	0					
ANR	6601002	Identifier	true		6600899	1					
ANR	6601003	ElseStatement	else		6600899	0					
ANR	6601004	CompoundStatement		14:9:320:320	6600899	0					
ANR	6601005	ExpressionStatement	"eprintf ( ""Position exceeds buffer length.\\n"" )"	307:3:8092:8137	6600899	0	True				
ANR	6601006	CallExpression	"eprintf ( ""Position exceeds buffer length.\\n"" )"		6600899	0					
ANR	6601007	Callee	eprintf		6600899	0					
ANR	6601008	Identifier	eprintf		6600899	0					
ANR	6601009	ArgumentList	"""Position exceeds buffer length.\\n"""		6600899	1					
ANR	6601010	Argument	"""Position exceeds buffer length.\\n"""		6600899	0					
ANR	6601011	PrimaryExpression	"""Position exceeds buffer length.\\n"""		6600899	0					
ANR	6601012	ElseStatement	else		6600899	0					
ANR	6601013	CompoundStatement		17:8:384:384	6600899	0					
ANR	6601014	ExpressionStatement	"eprintf ( ""No buffer yanked already\\n"" )"	310:2:8155:8193	6600899	0	True				
ANR	6601015	CallExpression	"eprintf ( ""No buffer yanked already\\n"" )"		6600899	0					
ANR	6601016	Callee	eprintf		6600899	0					
ANR	6601017	Identifier	eprintf		6600899	0					
ANR	6601018	ArgumentList	"""No buffer yanked already\\n"""		6600899	1					
ANR	6601019	Argument	"""No buffer yanked already\\n"""		6600899	0					
ANR	6601020	PrimaryExpression	"""No buffer yanked already\\n"""		6600899	0					
ANR	6601021	ReturnStatement	return res ;	312:1:8199:8209	6600899	3	True				
ANR	6601022	Identifier	res		6600899	0					
ANR	6601023	ReturnType	R_API int		6600899	1					
ANR	6601024	Identifier	r_core_yank_hexdump		6600899	2					
ANR	6601025	ParameterList	"RCore * core , ut64 pos"		6600899	3					
ANR	6601026	Parameter	RCore * core	293:30:7743:7753	6600899	0	True				
ANR	6601027	ParameterType	RCore *		6600899	0					
ANR	6601028	Identifier	core		6600899	1					
ANR	6601029	Parameter	ut64 pos	293:43:7756:7763	6600899	1	True				
ANR	6601030	ParameterType	ut64		6600899	0					
ANR	6601031	Identifier	pos		6600899	1					
ANR	6601032	CFGEntryNode	ENTRY		6600899		True				
ANR	6601033	CFGExitNode	EXIT		6600899		True				
ANR	6601034	Symbol	res		6600899						
ANR	6601035	Symbol	ybl		6600899						
ANR	6601036	Symbol	false		6600899						
ANR	6601037	Symbol	* core		6600899						
ANR	6601038	Symbol	R_NEWS		6600899						
ANR	6601039	Symbol	core		6600899						
ANR	6601040	Symbol	buf		6600899						
ANR	6601041	Symbol	pos		6600899						
ANR	6601042	Symbol	core -> yank_buf		6600899						
ANR	6601043	Symbol	ut8		6600899						
ANR	6601044	Symbol	true		6600899						
ANR	6601045	Symbol	core -> print		6600899						
ANR	6601046	Symbol	r_buf_size		6600899						
ANR	6601047	Function	r_core_yank_cat	315:0:8214:8660							
ANR	6601048	FunctionDef	"r_core_yank_cat (RCore * core , ut64 pos)"		6601047	0					
ANR	6601049	CompoundStatement		315:49:8263:8660	6601047	0					
ANR	6601050	IdentifierDeclStatement	int ybl = r_buf_size ( core -> yank_buf ) ;	316:1:8266:8303	6601047	0	True				
ANR	6601051	IdentifierDecl	ybl = r_buf_size ( core -> yank_buf )		6601047	0					
ANR	6601052	IdentifierDeclType	int		6601047	0					
ANR	6601053	Identifier	ybl		6601047	1					
ANR	6601054	AssignmentExpression	ybl = r_buf_size ( core -> yank_buf )		6601047	2		=			
ANR	6601055	Identifier	ybl		6601047	0					
ANR	6601056	CallExpression	r_buf_size ( core -> yank_buf )		6601047	1					
ANR	6601057	Callee	r_buf_size		6601047	0					
ANR	6601058	Identifier	r_buf_size		6601047	0					
ANR	6601059	ArgumentList	core -> yank_buf		6601047	1					
ANR	6601060	Argument	core -> yank_buf		6601047	0					
ANR	6601061	PtrMemberAccess	core -> yank_buf		6601047	0					
ANR	6601062	Identifier	core		6601047	0					
ANR	6601063	Identifier	yank_buf		6601047	1					
ANR	6601064	IfStatement	if ( ybl > 0 )		6601047	1					
ANR	6601065	Condition	ybl > 0	317:5:8310:8316	6601047	0	True				
ANR	6601066	RelationalExpression	ybl > 0		6601047	0		>			
ANR	6601067	Identifier	ybl		6601047	0					
ANR	6601068	PrimaryExpression	0		6601047	1					
ANR	6601069	CompoundStatement		3:14:55:55	6601047	1					
ANR	6601070	IfStatement	if ( pos < ybl )		6601047	0					
ANR	6601071	Condition	pos < ybl	318:6:8327:8335	6601047	0	True				
ANR	6601072	RelationalExpression	pos < ybl		6601047	0		<			
ANR	6601073	Identifier	pos		6601047	0					
ANR	6601074	Identifier	ybl		6601047	1					
ANR	6601075	CompoundStatement		6:3:103:132	6601047	1					
ANR	6601076	IdentifierDeclStatement	ut64 sz = ybl - pos ;	319:3:8343:8362	6601047	0	True				
ANR	6601077	IdentifierDecl	sz = ybl - pos		6601047	0					
ANR	6601078	IdentifierDeclType	ut64		6601047	0					
ANR	6601079	Identifier	sz		6601047	1					
ANR	6601080	AssignmentExpression	sz = ybl - pos		6601047	2		=			
ANR	6601081	Identifier	sz		6601047	0					
ANR	6601082	AdditiveExpression	ybl - pos		6601047	1		-			
ANR	6601083	Identifier	ybl		6601047	0					
ANR	6601084	Identifier	pos		6601047	1					
ANR	6601085	IdentifierDeclStatement	"char * buf = R_NEWS ( char , sz ) ;"	320:3:8367:8396	6601047	1	True				
ANR	6601086	IdentifierDecl	"* buf = R_NEWS ( char , sz )"		6601047	0					
ANR	6601087	IdentifierDeclType	char *		6601047	0					
ANR	6601088	Identifier	buf		6601047	1					
ANR	6601089	AssignmentExpression	"* buf = R_NEWS ( char , sz )"		6601047	2		=			
ANR	6601090	Identifier	buf		6601047	0					
ANR	6601091	CallExpression	"R_NEWS ( char , sz )"		6601047	1					
ANR	6601092	Callee	R_NEWS		6601047	0					
ANR	6601093	Identifier	R_NEWS		6601047	0					
ANR	6601094	ArgumentList	char		6601047	1					
ANR	6601095	Argument	char		6601047	0					
ANR	6601096	Identifier	char		6601047	0					
ANR	6601097	Argument	sz		6601047	1					
ANR	6601098	Identifier	sz		6601047	0					
ANR	6601099	IfStatement	if ( ! buf )		6601047	2					
ANR	6601100	Condition	! buf	321:7:8405:8408	6601047	0	True				
ANR	6601101	UnaryOperationExpression	! buf		6601047	0					
ANR	6601102	UnaryOperator	!		6601047	0					
ANR	6601103	Identifier	buf		6601047	1					
ANR	6601104	CompoundStatement		7:13:147:147	6601047	1					
ANR	6601105	ReturnStatement	return false ;	322:4:8417:8429	6601047	0	True				
ANR	6601106	Identifier	false		6601047	0					
ANR	6601107	ExpressionStatement	"r_buf_read_at ( core -> yank_buf , pos , ( ut8 * ) buf , sz )"	324:3:8439:8490	6601047	3	True				
ANR	6601108	CallExpression	"r_buf_read_at ( core -> yank_buf , pos , ( ut8 * ) buf , sz )"		6601047	0					
ANR	6601109	Callee	r_buf_read_at		6601047	0					
ANR	6601110	Identifier	r_buf_read_at		6601047	0					
ANR	6601111	ArgumentList	core -> yank_buf		6601047	1					
ANR	6601112	Argument	core -> yank_buf		6601047	0					
ANR	6601113	PtrMemberAccess	core -> yank_buf		6601047	0					
ANR	6601114	Identifier	core		6601047	0					
ANR	6601115	Identifier	yank_buf		6601047	1					
ANR	6601116	Argument	pos		6601047	1					
ANR	6601117	Identifier	pos		6601047	0					
ANR	6601118	Argument	( ut8 * ) buf		6601047	2					
ANR	6601119	CastExpression	( ut8 * ) buf		6601047	0					
ANR	6601120	CastTarget	ut8 *		6601047	0					
ANR	6601121	Identifier	buf		6601047	1					
ANR	6601122	Argument	sz		6601047	3					
ANR	6601123	Identifier	sz		6601047	0					
ANR	6601124	ExpressionStatement	"r_cons_memcat ( buf , sz )"	325:3:8495:8518	6601047	4	True				
ANR	6601125	CallExpression	"r_cons_memcat ( buf , sz )"		6601047	0					
ANR	6601126	Callee	r_cons_memcat		6601047	0					
ANR	6601127	Identifier	r_cons_memcat		6601047	0					
ANR	6601128	ArgumentList	buf		6601047	1					
ANR	6601129	Argument	buf		6601047	0					
ANR	6601130	Identifier	buf		6601047	0					
ANR	6601131	Argument	sz		6601047	1					
ANR	6601132	Identifier	sz		6601047	0					
ANR	6601133	ExpressionStatement	r_cons_newline ( )	326:3:8523:8540	6601047	5	True				
ANR	6601134	CallExpression	r_cons_newline ( )		6601047	0					
ANR	6601135	Callee	r_cons_newline		6601047	0					
ANR	6601136	Identifier	r_cons_newline		6601047	0					
ANR	6601137	ArgumentList			6601047	1					
ANR	6601138	ReturnStatement	return true ;	327:3:8545:8556	6601047	6	True				
ANR	6601139	Identifier	true		6601047	0					
ANR	6601140	ExpressionStatement	"eprintf ( ""Position exceeds buffer length.\\n"" )"	329:2:8564:8609	6601047	1	True				
ANR	6601141	CallExpression	"eprintf ( ""Position exceeds buffer length.\\n"" )"		6601047	0					
ANR	6601142	Callee	eprintf		6601047	0					
ANR	6601143	Identifier	eprintf		6601047	0					
ANR	6601144	ArgumentList	"""Position exceeds buffer length.\\n"""		6601047	1					
ANR	6601145	Argument	"""Position exceeds buffer length.\\n"""		6601047	0					
ANR	6601146	PrimaryExpression	"""Position exceeds buffer length.\\n"""		6601047	0					
ANR	6601147	ElseStatement	else		6601047	0					
ANR	6601148	CompoundStatement		16:8:355:355	6601047	0					
ANR	6601149	ExpressionStatement	r_cons_newline ( )	331:2:8623:8640	6601047	0	True				
ANR	6601150	CallExpression	r_cons_newline ( )		6601047	0					
ANR	6601151	Callee	r_cons_newline		6601047	0					
ANR	6601152	Identifier	r_cons_newline		6601047	0					
ANR	6601153	ArgumentList			6601047	1					
ANR	6601154	ReturnStatement	return false ;	333:1:8646:8658	6601047	2	True				
ANR	6601155	Identifier	false		6601047	0					
ANR	6601156	ReturnType	R_API int		6601047	1					
ANR	6601157	Identifier	r_core_yank_cat		6601047	2					
ANR	6601158	ParameterList	"RCore * core , ut64 pos"		6601047	3					
ANR	6601159	Parameter	RCore * core	315:26:8240:8250	6601047	0	True				
ANR	6601160	ParameterType	RCore *		6601047	0					
ANR	6601161	Identifier	core		6601047	1					
ANR	6601162	Parameter	ut64 pos	315:39:8253:8260	6601047	1	True				
ANR	6601163	ParameterType	ut64		6601047	0					
ANR	6601164	Identifier	pos		6601047	1					
ANR	6601165	CFGEntryNode	ENTRY		6601047		True				
ANR	6601166	CFGExitNode	EXIT		6601047		True				
ANR	6601167	Symbol	core		6601047						
ANR	6601168	Symbol	ybl		6601047						
ANR	6601169	Symbol	buf		6601047						
ANR	6601170	Symbol	pos		6601047						
ANR	6601171	Symbol	core -> yank_buf		6601047						
ANR	6601172	Symbol	sz		6601047						
ANR	6601173	Symbol	* core		6601047						
ANR	6601174	Symbol	char		6601047						
ANR	6601175	Symbol	false		6601047						
ANR	6601176	Symbol	true		6601047						
ANR	6601177	Symbol	R_NEWS		6601047						
ANR	6601178	Symbol	r_buf_size		6601047						
ANR	6601179	Function	r_core_yank_cat_string	336:0:8663:9152							
ANR	6601180	FunctionDef	"r_core_yank_cat_string (RCore * core , ut64 pos)"		6601179	0					
ANR	6601181	CompoundStatement		336:56:8719:9152	6601179	0					
ANR	6601182	IdentifierDeclStatement	int ybl = r_buf_size ( core -> yank_buf ) ;	337:1:8722:8759	6601179	0	True				
ANR	6601183	IdentifierDecl	ybl = r_buf_size ( core -> yank_buf )		6601179	0					
ANR	6601184	IdentifierDeclType	int		6601179	0					
ANR	6601185	Identifier	ybl		6601179	1					
ANR	6601186	AssignmentExpression	ybl = r_buf_size ( core -> yank_buf )		6601179	2		=			
ANR	6601187	Identifier	ybl		6601179	0					
ANR	6601188	CallExpression	r_buf_size ( core -> yank_buf )		6601179	1					
ANR	6601189	Callee	r_buf_size		6601179	0					
ANR	6601190	Identifier	r_buf_size		6601179	0					
ANR	6601191	ArgumentList	core -> yank_buf		6601179	1					
ANR	6601192	Argument	core -> yank_buf		6601179	0					
ANR	6601193	PtrMemberAccess	core -> yank_buf		6601179	0					
ANR	6601194	Identifier	core		6601179	0					
ANR	6601195	Identifier	yank_buf		6601179	1					
ANR	6601196	IfStatement	if ( ybl > 0 )		6601179	1					
ANR	6601197	Condition	ybl > 0	338:5:8766:8772	6601179	0	True				
ANR	6601198	RelationalExpression	ybl > 0		6601179	0		>			
ANR	6601199	Identifier	ybl		6601179	0					
ANR	6601200	PrimaryExpression	0		6601179	1					
ANR	6601201	CompoundStatement		3:14:55:55	6601179	1					
ANR	6601202	IfStatement	if ( pos < ybl )		6601179	0					
ANR	6601203	Condition	pos < ybl	339:6:8783:8791	6601179	0	True				
ANR	6601204	RelationalExpression	pos < ybl		6601179	0		<			
ANR	6601205	Identifier	pos		6601179	0					
ANR	6601206	Identifier	ybl		6601179	1					
ANR	6601207	CompoundStatement		11:3:231:261	6601179	1					
ANR	6601208	IdentifierDeclStatement	ut64 sz = ybl - pos ;	340:3:8799:8818	6601179	0	True				
ANR	6601209	IdentifierDecl	sz = ybl - pos		6601179	0					
ANR	6601210	IdentifierDeclType	ut64		6601179	0					
ANR	6601211	Identifier	sz		6601179	1					
ANR	6601212	AssignmentExpression	sz = ybl - pos		6601179	2		=			
ANR	6601213	Identifier	sz		6601179	0					
ANR	6601214	AdditiveExpression	ybl - pos		6601179	1		-			
ANR	6601215	Identifier	ybl		6601179	0					
ANR	6601216	Identifier	pos		6601179	1					
ANR	6601217	IdentifierDeclStatement	"char * buf = R_NEWS ( char , sz ) ;"	341:3:8823:8852	6601179	1	True				
ANR	6601218	IdentifierDecl	"* buf = R_NEWS ( char , sz )"		6601179	0					
ANR	6601219	IdentifierDeclType	char *		6601179	0					
ANR	6601220	Identifier	buf		6601179	1					
ANR	6601221	AssignmentExpression	"* buf = R_NEWS ( char , sz )"		6601179	2		=			
ANR	6601222	Identifier	buf		6601179	0					
ANR	6601223	CallExpression	"R_NEWS ( char , sz )"		6601179	1					
ANR	6601224	Callee	R_NEWS		6601179	0					
ANR	6601225	Identifier	R_NEWS		6601179	0					
ANR	6601226	ArgumentList	char		6601179	1					
ANR	6601227	Argument	char		6601179	0					
ANR	6601228	Identifier	char		6601179	0					
ANR	6601229	Argument	sz		6601179	1					
ANR	6601230	Identifier	sz		6601179	0					
ANR	6601231	IfStatement	if ( ! buf )		6601179	2					
ANR	6601232	Condition	! buf	342:7:8861:8864	6601179	0	True				
ANR	6601233	UnaryOperationExpression	! buf		6601179	0					
ANR	6601234	UnaryOperator	!		6601179	0					
ANR	6601235	Identifier	buf		6601179	1					
ANR	6601236	CompoundStatement		7:13:147:147	6601179	1					
ANR	6601237	ReturnStatement	return false ;	343:4:8873:8885	6601179	0	True				
ANR	6601238	Identifier	false		6601179	0					
ANR	6601239	ExpressionStatement	"r_buf_read_at ( core -> yank_buf , pos , ( ut8 * ) buf , sz )"	345:3:8895:8946	6601179	3	True				
ANR	6601240	CallExpression	"r_buf_read_at ( core -> yank_buf , pos , ( ut8 * ) buf , sz )"		6601179	0					
ANR	6601241	Callee	r_buf_read_at		6601179	0					
ANR	6601242	Identifier	r_buf_read_at		6601179	0					
ANR	6601243	ArgumentList	core -> yank_buf		6601179	1					
ANR	6601244	Argument	core -> yank_buf		6601179	0					
ANR	6601245	PtrMemberAccess	core -> yank_buf		6601179	0					
ANR	6601246	Identifier	core		6601179	0					
ANR	6601247	Identifier	yank_buf		6601179	1					
ANR	6601248	Argument	pos		6601179	1					
ANR	6601249	Identifier	pos		6601179	0					
ANR	6601250	Argument	( ut8 * ) buf		6601179	2					
ANR	6601251	CastExpression	( ut8 * ) buf		6601179	0					
ANR	6601252	CastTarget	ut8 *		6601179	0					
ANR	6601253	Identifier	buf		6601179	1					
ANR	6601254	Argument	sz		6601179	3					
ANR	6601255	Identifier	sz		6601179	0					
ANR	6601256	IdentifierDeclStatement	"int len = r_str_nlen ( buf , sz ) ;"	346:3:8951:8981	6601179	4	True				
ANR	6601257	IdentifierDecl	"len = r_str_nlen ( buf , sz )"		6601179	0					
ANR	6601258	IdentifierDeclType	int		6601179	0					
ANR	6601259	Identifier	len		6601179	1					
ANR	6601260	AssignmentExpression	"len = r_str_nlen ( buf , sz )"		6601179	2		=			
ANR	6601261	Identifier	len		6601179	0					
ANR	6601262	CallExpression	"r_str_nlen ( buf , sz )"		6601179	1					
ANR	6601263	Callee	r_str_nlen		6601179	0					
ANR	6601264	Identifier	r_str_nlen		6601179	0					
ANR	6601265	ArgumentList	buf		6601179	1					
ANR	6601266	Argument	buf		6601179	0					
ANR	6601267	Identifier	buf		6601179	0					
ANR	6601268	Argument	sz		6601179	1					
ANR	6601269	Identifier	sz		6601179	0					
ANR	6601270	ExpressionStatement	"r_cons_memcat ( buf , len )"	347:3:8986:9010	6601179	5	True				
ANR	6601271	CallExpression	"r_cons_memcat ( buf , len )"		6601179	0					
ANR	6601272	Callee	r_cons_memcat		6601179	0					
ANR	6601273	Identifier	r_cons_memcat		6601179	0					
ANR	6601274	ArgumentList	buf		6601179	1					
ANR	6601275	Argument	buf		6601179	0					
ANR	6601276	Identifier	buf		6601179	0					
ANR	6601277	Argument	len		6601179	1					
ANR	6601278	Identifier	len		6601179	0					
ANR	6601279	ExpressionStatement	r_cons_newline ( )	348:3:9015:9032	6601179	6	True				
ANR	6601280	CallExpression	r_cons_newline ( )		6601179	0					
ANR	6601281	Callee	r_cons_newline		6601179	0					
ANR	6601282	Identifier	r_cons_newline		6601179	0					
ANR	6601283	ArgumentList			6601179	1					
ANR	6601284	ReturnStatement	return true ;	349:3:9037:9048	6601179	7	True				
ANR	6601285	Identifier	true		6601179	0					
ANR	6601286	ExpressionStatement	"eprintf ( ""Position exceeds buffer length.\\n"" )"	351:2:9056:9101	6601179	1	True				
ANR	6601287	CallExpression	"eprintf ( ""Position exceeds buffer length.\\n"" )"		6601179	0					
ANR	6601288	Callee	eprintf		6601179	0					
ANR	6601289	Identifier	eprintf		6601179	0					
ANR	6601290	ArgumentList	"""Position exceeds buffer length.\\n"""		6601179	1					
ANR	6601291	Argument	"""Position exceeds buffer length.\\n"""		6601179	0					
ANR	6601292	PrimaryExpression	"""Position exceeds buffer length.\\n"""		6601179	0					
ANR	6601293	ElseStatement	else		6601179	0					
ANR	6601294	CompoundStatement		17:8:391:391	6601179	0					
ANR	6601295	ExpressionStatement	r_cons_newline ( )	353:2:9115:9132	6601179	0	True				
ANR	6601296	CallExpression	r_cons_newline ( )		6601179	0					
ANR	6601297	Callee	r_cons_newline		6601179	0					
ANR	6601298	Identifier	r_cons_newline		6601179	0					
ANR	6601299	ArgumentList			6601179	1					
ANR	6601300	ReturnStatement	return false ;	355:1:9138:9150	6601179	2	True				
ANR	6601301	Identifier	false		6601179	0					
ANR	6601302	ReturnType	R_API int		6601179	1					
ANR	6601303	Identifier	r_core_yank_cat_string		6601179	2					
ANR	6601304	ParameterList	"RCore * core , ut64 pos"		6601179	3					
ANR	6601305	Parameter	RCore * core	336:33:8696:8706	6601179	0	True				
ANR	6601306	ParameterType	RCore *		6601179	0					
ANR	6601307	Identifier	core		6601179	1					
ANR	6601308	Parameter	ut64 pos	336:46:8709:8716	6601179	1	True				
ANR	6601309	ParameterType	ut64		6601179	0					
ANR	6601310	Identifier	pos		6601179	1					
ANR	6601311	CFGEntryNode	ENTRY		6601179		True				
ANR	6601312	CFGExitNode	EXIT		6601179		True				
ANR	6601313	Symbol	ybl		6601179						
ANR	6601314	Symbol	sz		6601179						
ANR	6601315	Symbol	* core		6601179						
ANR	6601316	Symbol	false		6601179						
ANR	6601317	Symbol	r_str_nlen		6601179						
ANR	6601318	Symbol	R_NEWS		6601179						
ANR	6601319	Symbol	core		6601179						
ANR	6601320	Symbol	buf		6601179						
ANR	6601321	Symbol	len		6601179						
ANR	6601322	Symbol	pos		6601179						
ANR	6601323	Symbol	core -> yank_buf		6601179						
ANR	6601324	Symbol	char		6601179						
ANR	6601325	Symbol	true		6601179						
ANR	6601326	Symbol	r_buf_size		6601179						
ANR	6601327	Function	r_core_yank_hud_file	358:0:9155:9550							
ANR	6601328	FunctionDef	"r_core_yank_hud_file (RCore * core , const char * input)"		6601327	0					
ANR	6601329	CompoundStatement		358:63:9218:9550	6601327	0					
ANR	6601330	IdentifierDeclStatement	char * buf = NULL ;	359:1:9221:9237	6601327	0	True				
ANR	6601331	IdentifierDecl	* buf = NULL		6601327	0					
ANR	6601332	IdentifierDeclType	char *		6601327	0					
ANR	6601333	Identifier	buf		6601327	1					
ANR	6601334	AssignmentExpression	* buf = NULL		6601327	2		=			
ANR	6601335	Identifier	NULL		6601327	0					
ANR	6601336	Identifier	NULL		6601327	1					
ANR	6601337	IdentifierDeclStatement	bool res = false ;	360:1:9240:9256	6601327	1	True				
ANR	6601338	IdentifierDecl	res = false		6601327	0					
ANR	6601339	IdentifierDeclType	bool		6601327	0					
ANR	6601340	Identifier	res		6601327	1					
ANR	6601341	AssignmentExpression	res = false		6601327	2		=			
ANR	6601342	Identifier	false		6601327	0					
ANR	6601343	Identifier	false		6601327	1					
ANR	6601344	IdentifierDeclStatement	ut32 len = 0 ;	361:1:9259:9271	6601327	2	True				
ANR	6601345	IdentifierDecl	len = 0		6601327	0					
ANR	6601346	IdentifierDeclType	ut32		6601327	0					
ANR	6601347	Identifier	len		6601327	1					
ANR	6601348	AssignmentExpression	len = 0		6601327	2		=			
ANR	6601349	Identifier	len		6601327	0					
ANR	6601350	PrimaryExpression	0		6601327	1					
ANR	6601351	IfStatement	if ( ! input || ! * input )		6601327	3					
ANR	6601352	Condition	! input || ! * input	362:5:9278:9294	6601327	0	True				
ANR	6601353	OrExpression	! input || ! * input		6601327	0		||			
ANR	6601354	UnaryOperationExpression	! input		6601327	0					
ANR	6601355	UnaryOperator	!		6601327	0					
ANR	6601356	Identifier	input		6601327	1					
ANR	6601357	UnaryOperationExpression	! * input		6601327	1					
ANR	6601358	UnaryOperator	!		6601327	0					
ANR	6601359	UnaryOperationExpression	* input		6601327	1					
ANR	6601360	UnaryOperator	*		6601327	0					
ANR	6601361	Identifier	input		6601327	1					
ANR	6601362	CompoundStatement		5:24:78:78	6601327	1					
ANR	6601363	ReturnStatement	return false ;	363:2:9301:9313	6601327	0	True				
ANR	6601364	Identifier	false		6601327	0					
ANR	6601365	ForStatement	for ( input ++ ; * input == ' ' ; input ++ )		6601327	4					
ANR	6601366	ForInit	input ++ ;	365:6:9324:9331	6601327	0	True				
ANR	6601367	PostIncDecOperationExpression	input ++		6601327	0					
ANR	6601368	Identifier	input		6601327	0					
ANR	6601369	IncDec	++		6601327	1					
ANR	6601370	Condition	* input == ' '	365:15:9333:9345	6601327	1	True				
ANR	6601371	EqualityExpression	* input == ' '		6601327	0		==			
ANR	6601372	UnaryOperationExpression	* input		6601327	0					
ANR	6601373	UnaryOperator	*		6601327	0					
ANR	6601374	Identifier	input		6601327	1					
ANR	6601375	PrimaryExpression	' '		6601327	1					
ANR	6601376	PostIncDecOperationExpression	input ++	365:30:9348:9354	6601327	2	True				
ANR	6601377	Identifier	input		6601327	0					
ANR	6601378	IncDec	++		6601327	1					
ANR	6601379	CompoundStatement		8:39:138:138	6601327	3					
ANR	6601380	ExpressionStatement	buf = r_cons_hud_file ( input )	368:1:9379:9408	6601327	5	True				
ANR	6601381	AssignmentExpression	buf = r_cons_hud_file ( input )		6601327	0		=			
ANR	6601382	Identifier	buf		6601327	0					
ANR	6601383	CallExpression	r_cons_hud_file ( input )		6601327	1					
ANR	6601384	Callee	r_cons_hud_file		6601327	0					
ANR	6601385	Identifier	r_cons_hud_file		6601327	0					
ANR	6601386	ArgumentList	input		6601327	1					
ANR	6601387	Argument	input		6601327	0					
ANR	6601388	Identifier	input		6601327	0					
ANR	6601389	ExpressionStatement	len = buf ? strlen ( ( const char * ) buf ) + 1 : 0	369:1:9411:9456	6601327	6	True				
ANR	6601390	AssignmentExpression	len = buf ? strlen ( ( const char * ) buf ) + 1 : 0		6601327	0		=			
ANR	6601391	Identifier	len		6601327	0					
ANR	6601392	ConditionalExpression	buf ? strlen ( ( const char * ) buf ) + 1 : 0		6601327	1					
ANR	6601393	Condition	buf		6601327	0					
ANR	6601394	Identifier	buf		6601327	0					
ANR	6601395	AdditiveExpression	strlen ( ( const char * ) buf ) + 1		6601327	1		+			
ANR	6601396	CallExpression	strlen ( ( const char * ) buf )		6601327	0					
ANR	6601397	Callee	strlen		6601327	0					
ANR	6601398	Identifier	strlen		6601327	0					
ANR	6601399	ArgumentList	( const char * ) buf		6601327	1					
ANR	6601400	Argument	( const char * ) buf		6601327	0					
ANR	6601401	CastExpression	( const char * ) buf		6601327	0					
ANR	6601402	CastTarget	const char *		6601327	0					
ANR	6601403	Identifier	buf		6601327	1					
ANR	6601404	PrimaryExpression	1		6601327	1					
ANR	6601405	PrimaryExpression	0		6601327	2					
ANR	6601406	ExpressionStatement	"res = r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"	370:1:9459:9522	6601327	7	True				
ANR	6601407	AssignmentExpression	"res = r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"		6601327	0		=			
ANR	6601408	Identifier	res		6601327	0					
ANR	6601409	CallExpression	"r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"		6601327	1					
ANR	6601410	Callee	r_core_yank_set_str		6601327	0					
ANR	6601411	Identifier	r_core_yank_set_str		6601327	0					
ANR	6601412	ArgumentList	core		6601327	1					
ANR	6601413	Argument	core		6601327	0					
ANR	6601414	Identifier	core		6601327	0					
ANR	6601415	Argument	R_CORE_FOREIGN_ADDR		6601327	1					
ANR	6601416	Identifier	R_CORE_FOREIGN_ADDR		6601327	0					
ANR	6601417	Argument	buf		6601327	2					
ANR	6601418	Identifier	buf		6601327	0					
ANR	6601419	Argument	len		6601327	3					
ANR	6601420	Identifier	len		6601327	0					
ANR	6601421	ExpressionStatement	free ( buf )	371:1:9525:9535	6601327	8	True				
ANR	6601422	CallExpression	free ( buf )		6601327	0					
ANR	6601423	Callee	free		6601327	0					
ANR	6601424	Identifier	free		6601327	0					
ANR	6601425	ArgumentList	buf		6601327	1					
ANR	6601426	Argument	buf		6601327	0					
ANR	6601427	Identifier	buf		6601327	0					
ANR	6601428	ReturnStatement	return res ;	372:1:9538:9548	6601327	9	True				
ANR	6601429	Identifier	res		6601327	0					
ANR	6601430	ReturnType	R_API int		6601327	1					
ANR	6601431	Identifier	r_core_yank_hud_file		6601327	2					
ANR	6601432	ParameterList	"RCore * core , const char * input"		6601327	3					
ANR	6601433	Parameter	RCore * core	358:31:9186:9196	6601327	0	True				
ANR	6601434	ParameterType	RCore *		6601327	0					
ANR	6601435	Identifier	core		6601327	1					
ANR	6601436	Parameter	const char * input	358:44:9199:9215	6601327	1	True				
ANR	6601437	ParameterType	const char *		6601327	0					
ANR	6601438	Identifier	input		6601327	1					
ANR	6601439	CFGEntryNode	ENTRY		6601327		True				
ANR	6601440	CFGExitNode	EXIT		6601327		True				
ANR	6601441	Symbol	R_CORE_FOREIGN_ADDR		6601327						
ANR	6601442	Symbol	core		6601327						
ANR	6601443	Symbol	input		6601327						
ANR	6601444	Symbol	res		6601327						
ANR	6601445	Symbol	strlen		6601327						
ANR	6601446	Symbol	buf		6601327						
ANR	6601447	Symbol	NULL		6601327						
ANR	6601448	Symbol	len		6601327						
ANR	6601449	Symbol	false		6601327						
ANR	6601450	Symbol	* input		6601327						
ANR	6601451	Symbol	r_core_yank_set_str		6601327						
ANR	6601452	Symbol	r_cons_hud_file		6601327						
ANR	6601453	Function	r_core_yank_hud_path	375:0:9553:9908							
ANR	6601454	FunctionDef	"r_core_yank_hud_path (RCore * core , const char * input , int dir)"		6601453	0					
ANR	6601455	CompoundStatement		375:72:9625:9908	6601453	0					
ANR	6601456	IdentifierDeclStatement	char * buf = NULL ;	376:1:9628:9644	6601453	0	True				
ANR	6601457	IdentifierDecl	* buf = NULL		6601453	0					
ANR	6601458	IdentifierDeclType	char *		6601453	0					
ANR	6601459	Identifier	buf		6601453	1					
ANR	6601460	AssignmentExpression	* buf = NULL		6601453	2		=			
ANR	6601461	Identifier	NULL		6601453	0					
ANR	6601462	Identifier	NULL		6601453	1					
ANR	6601463	IdentifierDeclStatement	ut32 len = 0 ;	377:1:9647:9659	6601453	1	True				
ANR	6601464	IdentifierDecl	len = 0		6601453	0					
ANR	6601465	IdentifierDeclType	ut32		6601453	0					
ANR	6601466	Identifier	len		6601453	1					
ANR	6601467	AssignmentExpression	len = 0		6601453	2		=			
ANR	6601468	Identifier	len		6601453	0					
ANR	6601469	PrimaryExpression	0		6601453	1					
ANR	6601470	IdentifierDeclStatement	int res ;	378:1:9662:9669	6601453	2	True				
ANR	6601471	IdentifierDecl	res		6601453	0					
ANR	6601472	IdentifierDeclType	int		6601453	0					
ANR	6601473	Identifier	res		6601453	1					
ANR	6601474	ForStatement	for ( input ++ ; * input == ' ' ; input ++ )		6601453	3					
ANR	6601475	ForInit	input ++ ;	379:6:9677:9684	6601453	0	True				
ANR	6601476	PostIncDecOperationExpression	input ++		6601453	0					
ANR	6601477	Identifier	input		6601453	0					
ANR	6601478	IncDec	++		6601453	1					
ANR	6601479	Condition	* input == ' '	379:15:9686:9698	6601453	1	True				
ANR	6601480	EqualityExpression	* input == ' '		6601453	0		==			
ANR	6601481	UnaryOperationExpression	* input		6601453	0					
ANR	6601482	UnaryOperator	*		6601453	0					
ANR	6601483	Identifier	input		6601453	1					
ANR	6601484	PrimaryExpression	' '		6601453	1					
ANR	6601485	PostIncDecOperationExpression	input ++	379:30:9701:9707	6601453	2	True				
ANR	6601486	Identifier	input		6601453	0					
ANR	6601487	IncDec	++		6601453	1					
ANR	6601488	CompoundStatement		5:39:84:84	6601453	3					
ANR	6601489	ExpressionStatement	"buf = r_cons_hud_path ( input , dir )"	382:1:9732:9766	6601453	4	True				
ANR	6601490	AssignmentExpression	"buf = r_cons_hud_path ( input , dir )"		6601453	0		=			
ANR	6601491	Identifier	buf		6601453	0					
ANR	6601492	CallExpression	"r_cons_hud_path ( input , dir )"		6601453	1					
ANR	6601493	Callee	r_cons_hud_path		6601453	0					
ANR	6601494	Identifier	r_cons_hud_path		6601453	0					
ANR	6601495	ArgumentList	input		6601453	1					
ANR	6601496	Argument	input		6601453	0					
ANR	6601497	Identifier	input		6601453	0					
ANR	6601498	Argument	dir		6601453	1					
ANR	6601499	Identifier	dir		6601453	0					
ANR	6601500	ExpressionStatement	len = buf ? strlen ( ( const char * ) buf ) + 1 : 0	383:1:9769:9814	6601453	5	True				
ANR	6601501	AssignmentExpression	len = buf ? strlen ( ( const char * ) buf ) + 1 : 0		6601453	0		=			
ANR	6601502	Identifier	len		6601453	0					
ANR	6601503	ConditionalExpression	buf ? strlen ( ( const char * ) buf ) + 1 : 0		6601453	1					
ANR	6601504	Condition	buf		6601453	0					
ANR	6601505	Identifier	buf		6601453	0					
ANR	6601506	AdditiveExpression	strlen ( ( const char * ) buf ) + 1		6601453	1		+			
ANR	6601507	CallExpression	strlen ( ( const char * ) buf )		6601453	0					
ANR	6601508	Callee	strlen		6601453	0					
ANR	6601509	Identifier	strlen		6601453	0					
ANR	6601510	ArgumentList	( const char * ) buf		6601453	1					
ANR	6601511	Argument	( const char * ) buf		6601453	0					
ANR	6601512	CastExpression	( const char * ) buf		6601453	0					
ANR	6601513	CastTarget	const char *		6601453	0					
ANR	6601514	Identifier	buf		6601453	1					
ANR	6601515	PrimaryExpression	1		6601453	1					
ANR	6601516	PrimaryExpression	0		6601453	2					
ANR	6601517	ExpressionStatement	"res = r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"	384:1:9817:9880	6601453	6	True				
ANR	6601518	AssignmentExpression	"res = r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"		6601453	0		=			
ANR	6601519	Identifier	res		6601453	0					
ANR	6601520	CallExpression	"r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , buf , len )"		6601453	1					
ANR	6601521	Callee	r_core_yank_set_str		6601453	0					
ANR	6601522	Identifier	r_core_yank_set_str		6601453	0					
ANR	6601523	ArgumentList	core		6601453	1					
ANR	6601524	Argument	core		6601453	0					
ANR	6601525	Identifier	core		6601453	0					
ANR	6601526	Argument	R_CORE_FOREIGN_ADDR		6601453	1					
ANR	6601527	Identifier	R_CORE_FOREIGN_ADDR		6601453	0					
ANR	6601528	Argument	buf		6601453	2					
ANR	6601529	Identifier	buf		6601453	0					
ANR	6601530	Argument	len		6601453	3					
ANR	6601531	Identifier	len		6601453	0					
ANR	6601532	ExpressionStatement	free ( buf )	385:1:9883:9893	6601453	7	True				
ANR	6601533	CallExpression	free ( buf )		6601453	0					
ANR	6601534	Callee	free		6601453	0					
ANR	6601535	Identifier	free		6601453	0					
ANR	6601536	ArgumentList	buf		6601453	1					
ANR	6601537	Argument	buf		6601453	0					
ANR	6601538	Identifier	buf		6601453	0					
ANR	6601539	ReturnStatement	return res ;	386:1:9896:9906	6601453	8	True				
ANR	6601540	Identifier	res		6601453	0					
ANR	6601541	ReturnType	R_API int		6601453	1					
ANR	6601542	Identifier	r_core_yank_hud_path		6601453	2					
ANR	6601543	ParameterList	"RCore * core , const char * input , int dir"		6601453	3					
ANR	6601544	Parameter	RCore * core	375:31:9584:9594	6601453	0	True				
ANR	6601545	ParameterType	RCore *		6601453	0					
ANR	6601546	Identifier	core		6601453	1					
ANR	6601547	Parameter	const char * input	375:44:9597:9613	6601453	1	True				
ANR	6601548	ParameterType	const char *		6601453	0					
ANR	6601549	Identifier	input		6601453	1					
ANR	6601550	Parameter	int dir	375:63:9616:9622	6601453	2	True				
ANR	6601551	ParameterType	int		6601453	0					
ANR	6601552	Identifier	dir		6601453	1					
ANR	6601553	CFGEntryNode	ENTRY		6601453		True				
ANR	6601554	CFGExitNode	EXIT		6601453		True				
ANR	6601555	Symbol	R_CORE_FOREIGN_ADDR		6601453						
ANR	6601556	Symbol	core		6601453						
ANR	6601557	Symbol	input		6601453						
ANR	6601558	Symbol	res		6601453						
ANR	6601559	Symbol	strlen		6601453						
ANR	6601560	Symbol	buf		6601453						
ANR	6601561	Symbol	NULL		6601453						
ANR	6601562	Symbol	len		6601453						
ANR	6601563	Symbol	* input		6601453						
ANR	6601564	Symbol	r_core_yank_set_str		6601453						
ANR	6601565	Symbol	r_cons_hud_path		6601453						
ANR	6601566	Symbol	dir		6601453						
ANR	6601567	Function	r_core_yank_hexpair	389:0:9911:10199							
ANR	6601568	FunctionDef	"r_core_yank_hexpair (RCore * core , const char * input)"		6601567	0					
ANR	6601569	CompoundStatement		389:63:9974:10199	6601567	0					
ANR	6601570	IfStatement	if ( ! input || ! * input )		6601567	0					
ANR	6601571	Condition	! input || ! * input	390:5:9981:9997	6601567	0	True				
ANR	6601572	OrExpression	! input || ! * input		6601567	0		||			
ANR	6601573	UnaryOperationExpression	! input		6601567	0					
ANR	6601574	UnaryOperator	!		6601567	0					
ANR	6601575	Identifier	input		6601567	1					
ANR	6601576	UnaryOperationExpression	! * input		6601567	1					
ANR	6601577	UnaryOperator	!		6601567	0					
ANR	6601578	UnaryOperationExpression	* input		6601567	1					
ANR	6601579	UnaryOperator	*		6601567	0					
ANR	6601580	Identifier	input		6601567	1					
ANR	6601581	CompoundStatement		2:24:25:25	6601567	1					
ANR	6601582	ReturnStatement	return false ;	391:2:10004:10016	6601567	0	True				
ANR	6601583	Identifier	false		6601567	0					
ANR	6601584	IdentifierDeclStatement	char * out = strdup ( input ) ;	393:1:10022:10048	6601567	1	True				
ANR	6601585	IdentifierDecl	* out = strdup ( input )		6601567	0					
ANR	6601586	IdentifierDeclType	char *		6601567	0					
ANR	6601587	Identifier	out		6601567	1					
ANR	6601588	AssignmentExpression	* out = strdup ( input )		6601567	2		=			
ANR	6601589	Identifier	out		6601567	0					
ANR	6601590	CallExpression	strdup ( input )		6601567	1					
ANR	6601591	Callee	strdup		6601567	0					
ANR	6601592	Identifier	strdup		6601567	0					
ANR	6601593	ArgumentList	input		6601567	1					
ANR	6601594	Argument	input		6601567	0					
ANR	6601595	Identifier	input		6601567	0					
ANR	6601596	IdentifierDeclStatement	"int len = r_hex_str2bin ( input , ( ut8 * ) out ) ;"	394:1:10051:10094	6601567	2	True				
ANR	6601597	IdentifierDecl	"len = r_hex_str2bin ( input , ( ut8 * ) out )"		6601567	0					
ANR	6601598	IdentifierDeclType	int		6601567	0					
ANR	6601599	Identifier	len		6601567	1					
ANR	6601600	AssignmentExpression	"len = r_hex_str2bin ( input , ( ut8 * ) out )"		6601567	2		=			
ANR	6601601	Identifier	len		6601567	0					
ANR	6601602	CallExpression	"r_hex_str2bin ( input , ( ut8 * ) out )"		6601567	1					
ANR	6601603	Callee	r_hex_str2bin		6601567	0					
ANR	6601604	Identifier	r_hex_str2bin		6601567	0					
ANR	6601605	ArgumentList	input		6601567	1					
ANR	6601606	Argument	input		6601567	0					
ANR	6601607	Identifier	input		6601567	0					
ANR	6601608	Argument	( ut8 * ) out		6601567	1					
ANR	6601609	CastExpression	( ut8 * ) out		6601567	0					
ANR	6601610	CastTarget	ut8 *		6601567	0					
ANR	6601611	Identifier	out		6601567	1					
ANR	6601612	IfStatement	if ( len > 0 )		6601567	3					
ANR	6601613	Condition	len > 0	395:5:10101:10107	6601567	0	True				
ANR	6601614	RelationalExpression	len > 0		6601567	0		>			
ANR	6601615	Identifier	len		6601567	0					
ANR	6601616	PrimaryExpression	0		6601567	1					
ANR	6601617	CompoundStatement		7:14:135:135	6601567	1					
ANR	6601618	ExpressionStatement	"r_core_yank_set ( core , core -> offset , ( ut8 * ) out , len )"	396:2:10114:10167	6601567	0	True				
ANR	6601619	CallExpression	"r_core_yank_set ( core , core -> offset , ( ut8 * ) out , len )"		6601567	0					
ANR	6601620	Callee	r_core_yank_set		6601567	0					
ANR	6601621	Identifier	r_core_yank_set		6601567	0					
ANR	6601622	ArgumentList	core		6601567	1					
ANR	6601623	Argument	core		6601567	0					
ANR	6601624	Identifier	core		6601567	0					
ANR	6601625	Argument	core -> offset		6601567	1					
ANR	6601626	PtrMemberAccess	core -> offset		6601567	0					
ANR	6601627	Identifier	core		6601567	0					
ANR	6601628	Identifier	offset		6601567	1					
ANR	6601629	Argument	( ut8 * ) out		6601567	2					
ANR	6601630	CastExpression	( ut8 * ) out		6601567	0					
ANR	6601631	CastTarget	ut8 *		6601567	0					
ANR	6601632	Identifier	out		6601567	1					
ANR	6601633	Argument	len		6601567	3					
ANR	6601634	Identifier	len		6601567	0					
ANR	6601635	ExpressionStatement	free ( out )	398:1:10173:10183	6601567	4	True				
ANR	6601636	CallExpression	free ( out )		6601567	0					
ANR	6601637	Callee	free		6601567	0					
ANR	6601638	Identifier	free		6601567	0					
ANR	6601639	ArgumentList	out		6601567	1					
ANR	6601640	Argument	out		6601567	0					
ANR	6601641	Identifier	out		6601567	0					
ANR	6601642	ReturnStatement	return true ;	399:1:10186:10197	6601567	5	True				
ANR	6601643	Identifier	true		6601567	0					
ANR	6601644	ReturnType	R_API bool		6601567	1					
ANR	6601645	Identifier	r_core_yank_hexpair		6601567	2					
ANR	6601646	ParameterList	"RCore * core , const char * input"		6601567	3					
ANR	6601647	Parameter	RCore * core	389:31:9942:9952	6601567	0	True				
ANR	6601648	ParameterType	RCore *		6601567	0					
ANR	6601649	Identifier	core		6601567	1					
ANR	6601650	Parameter	const char * input	389:44:9955:9971	6601567	1	True				
ANR	6601651	ParameterType	const char *		6601567	0					
ANR	6601652	Identifier	input		6601567	1					
ANR	6601653	CFGEntryNode	ENTRY		6601567		True				
ANR	6601654	CFGExitNode	EXIT		6601567		True				
ANR	6601655	Symbol	core		6601567						
ANR	6601656	Symbol	input		6601567						
ANR	6601657	Symbol	len		6601567						
ANR	6601658	Symbol	* input		6601567						
ANR	6601659	Symbol	false		6601567						
ANR	6601660	Symbol	* core		6601567						
ANR	6601661	Symbol	true		6601567						
ANR	6601662	Symbol	core -> offset		6601567						
ANR	6601663	Symbol	strdup		6601567						
ANR	6601664	Symbol	r_hex_str2bin		6601567						
ANR	6601665	Symbol	out		6601567						
ANR	6601666	Function	r_core_yank_file_ex	402:0:10202:11168							
ANR	6601667	FunctionDef	"r_core_yank_file_ex (RCore * core , const char * input)"		6601666	0					
ANR	6601668	CompoundStatement		402:63:10265:11168	6601666	0					
ANR	6601669	IdentifierDeclStatement	"ut64 len = 0 , adv = 0 , addr = 0 ;"	403:1:10268:10299	6601666	0	True				
ANR	6601670	IdentifierDecl	len = 0		6601666	0					
ANR	6601671	IdentifierDeclType	ut64		6601666	0					
ANR	6601672	Identifier	len		6601666	1					
ANR	6601673	AssignmentExpression	len = 0		6601666	2		=			
ANR	6601674	Identifier	len		6601666	0					
ANR	6601675	PrimaryExpression	0		6601666	1					
ANR	6601676	IdentifierDecl	adv = 0		6601666	1					
ANR	6601677	IdentifierDeclType	ut64		6601666	0					
ANR	6601678	Identifier	adv		6601666	1					
ANR	6601679	AssignmentExpression	adv = 0		6601666	2		=			
ANR	6601680	Identifier	adv		6601666	0					
ANR	6601681	PrimaryExpression	0		6601666	1					
ANR	6601682	IdentifierDecl	addr = 0		6601666	2					
ANR	6601683	IdentifierDeclType	ut64		6601666	0					
ANR	6601684	Identifier	addr		6601666	1					
ANR	6601685	AssignmentExpression	addr = 0		6601666	2		=			
ANR	6601686	Identifier	addr		6601666	0					
ANR	6601687	PrimaryExpression	0		6601666	1					
ANR	6601688	IdentifierDeclStatement	bool res = false ;	404:1:10302:10318	6601666	1	True				
ANR	6601689	IdentifierDecl	res = false		6601666	0					
ANR	6601690	IdentifierDeclType	bool		6601666	0					
ANR	6601691	Identifier	res		6601666	1					
ANR	6601692	AssignmentExpression	res = false		6601666	2		=			
ANR	6601693	Identifier	false		6601666	0					
ANR	6601694	Identifier	false		6601666	1					
ANR	6601695	IfStatement	if ( ! input )		6601666	2					
ANR	6601696	Condition	! input	406:5:10326:10331	6601666	0	True				
ANR	6601697	UnaryOperationExpression	! input		6601666	0					
ANR	6601698	UnaryOperator	!		6601666	0					
ANR	6601699	Identifier	input		6601666	1					
ANR	6601700	CompoundStatement		5:13:68:68	6601666	1					
ANR	6601701	ReturnStatement	return res ;	407:2:10338:10348	6601666	0	True				
ANR	6601702	Identifier	res		6601666	0					
ANR	6601703	ExpressionStatement	"adv = consume_chars ( input , ' ' )"	410:1:10390:10422	6601666	3	True				
ANR	6601704	AssignmentExpression	"adv = consume_chars ( input , ' ' )"		6601666	0		=			
ANR	6601705	Identifier	adv		6601666	0					
ANR	6601706	CallExpression	"consume_chars ( input , ' ' )"		6601666	1					
ANR	6601707	Callee	consume_chars		6601666	0					
ANR	6601708	Identifier	consume_chars		6601666	0					
ANR	6601709	ArgumentList	input		6601666	1					
ANR	6601710	Argument	input		6601666	0					
ANR	6601711	Identifier	input		6601666	0					
ANR	6601712	Argument	' '		6601666	1					
ANR	6601713	PrimaryExpression	' '		6601666	0					
ANR	6601714	ExpressionStatement	"len = r_num_math ( core -> num , input + adv )"	411:1:10425:10466	6601666	4	True				
ANR	6601715	AssignmentExpression	"len = r_num_math ( core -> num , input + adv )"		6601666	0		=			
ANR	6601716	Identifier	len		6601666	0					
ANR	6601717	CallExpression	"r_num_math ( core -> num , input + adv )"		6601666	1					
ANR	6601718	Callee	r_num_math		6601666	0					
ANR	6601719	Identifier	r_num_math		6601666	0					
ANR	6601720	ArgumentList	core -> num		6601666	1					
ANR	6601721	Argument	core -> num		6601666	0					
ANR	6601722	PtrMemberAccess	core -> num		6601666	0					
ANR	6601723	Identifier	core		6601666	0					
ANR	6601724	Identifier	num		6601666	1					
ANR	6601725	Argument	input + adv		6601666	1					
ANR	6601726	AdditiveExpression	input + adv		6601666	0		+			
ANR	6601727	Identifier	input		6601666	0					
ANR	6601728	Identifier	adv		6601666	1					
ANR	6601729	IfStatement	if ( len == 0 )		6601666	5					
ANR	6601730	Condition	len == 0	412:5:10473:10480	6601666	0	True				
ANR	6601731	EqualityExpression	len == 0		6601666	0		==			
ANR	6601732	Identifier	len		6601666	0					
ANR	6601733	PrimaryExpression	0		6601666	1					
ANR	6601734	CompoundStatement		11:15:217:217	6601666	1					
ANR	6601735	ExpressionStatement	"eprintf ( ""ERROR: Number of bytes read must be > 0\\n"" )"	413:2:10487:10540	6601666	0	True				
ANR	6601736	CallExpression	"eprintf ( ""ERROR: Number of bytes read must be > 0\\n"" )"		6601666	0					
ANR	6601737	Callee	eprintf		6601666	0					
ANR	6601738	Identifier	eprintf		6601666	0					
ANR	6601739	ArgumentList	"""ERROR: Number of bytes read must be > 0\\n"""		6601666	1					
ANR	6601740	Argument	"""ERROR: Number of bytes read must be > 0\\n"""		6601666	0					
ANR	6601741	PrimaryExpression	"""ERROR: Number of bytes read must be > 0\\n"""		6601666	0					
ANR	6601742	ReturnStatement	return res ;	414:2:10544:10554	6601666	1	True				
ANR	6601743	Identifier	res		6601666	0					
ANR	6601744	ExpressionStatement	"adv += find_next_char ( input + adv , ' ' )"	417:1:10617:10657	6601666	6	True				
ANR	6601745	AssignmentExpression	"adv += find_next_char ( input + adv , ' ' )"		6601666	0		+=			
ANR	6601746	Identifier	adv		6601666	0					
ANR	6601747	CallExpression	"find_next_char ( input + adv , ' ' )"		6601666	1					
ANR	6601748	Callee	find_next_char		6601666	0					
ANR	6601749	Identifier	find_next_char		6601666	0					
ANR	6601750	ArgumentList	input + adv		6601666	1					
ANR	6601751	Argument	input + adv		6601666	0					
ANR	6601752	AdditiveExpression	input + adv		6601666	0		+			
ANR	6601753	Identifier	input		6601666	0					
ANR	6601754	Identifier	adv		6601666	1					
ANR	6601755	Argument	' '		6601666	1					
ANR	6601756	PrimaryExpression	' '		6601666	0					
ANR	6601757	IfStatement	if ( adv == 0 )		6601666	7					
ANR	6601758	Condition	adv == 0	418:5:10664:10671	6601666	0	True				
ANR	6601759	EqualityExpression	adv == 0		6601666	0		==			
ANR	6601760	Identifier	adv		6601666	0					
ANR	6601761	PrimaryExpression	0		6601666	1					
ANR	6601762	CompoundStatement		17:15:408:408	6601666	1					
ANR	6601763	ExpressionStatement	"eprintf ( ""ERROR: Address must be specified\\n"" )"	419:2:10678:10724	6601666	0	True				
ANR	6601764	CallExpression	"eprintf ( ""ERROR: Address must be specified\\n"" )"		6601666	0					
ANR	6601765	Callee	eprintf		6601666	0					
ANR	6601766	Identifier	eprintf		6601666	0					
ANR	6601767	ArgumentList	"""ERROR: Address must be specified\\n"""		6601666	1					
ANR	6601768	Argument	"""ERROR: Address must be specified\\n"""		6601666	0					
ANR	6601769	PrimaryExpression	"""ERROR: Address must be specified\\n"""		6601666	0					
ANR	6601770	ReturnStatement	return res ;	420:2:10728:10738	6601666	1	True				
ANR	6601771	Identifier	res		6601666	0					
ANR	6601772	ExpressionStatement	adv ++	422:1:10744:10749	6601666	8	True				
ANR	6601773	PostIncDecOperationExpression	adv ++		6601666	0					
ANR	6601774	Identifier	adv		6601666	0					
ANR	6601775	IncDec	++		6601666	1					
ANR	6601776	ExpressionStatement	"addr = r_num_math ( core -> num , input + adv )"	425:1:10825:10867	6601666	9	True				
ANR	6601777	AssignmentExpression	"addr = r_num_math ( core -> num , input + adv )"		6601666	0		=			
ANR	6601778	Identifier	addr		6601666	0					
ANR	6601779	CallExpression	"r_num_math ( core -> num , input + adv )"		6601666	1					
ANR	6601780	Callee	r_num_math		6601666	0					
ANR	6601781	Identifier	r_num_math		6601666	0					
ANR	6601782	ArgumentList	core -> num		6601666	1					
ANR	6601783	Argument	core -> num		6601666	0					
ANR	6601784	PtrMemberAccess	core -> num		6601666	0					
ANR	6601785	Identifier	core		6601666	0					
ANR	6601786	Identifier	num		6601666	1					
ANR	6601787	Argument	input + adv		6601666	1					
ANR	6601788	AdditiveExpression	input + adv		6601666	0		+			
ANR	6601789	Identifier	input		6601666	0					
ANR	6601790	Identifier	adv		6601666	1					
ANR	6601791	ExpressionStatement	"adv += find_next_char ( input + adv , ' ' )"	427:1:10871:10911	6601666	10	True				
ANR	6601792	AssignmentExpression	"adv += find_next_char ( input + adv , ' ' )"		6601666	0		+=			
ANR	6601793	Identifier	adv		6601666	0					
ANR	6601794	CallExpression	"find_next_char ( input + adv , ' ' )"		6601666	1					
ANR	6601795	Callee	find_next_char		6601666	0					
ANR	6601796	Identifier	find_next_char		6601666	0					
ANR	6601797	ArgumentList	input + adv		6601666	1					
ANR	6601798	Argument	input + adv		6601666	0					
ANR	6601799	AdditiveExpression	input + adv		6601666	0		+			
ANR	6601800	Identifier	input		6601666	0					
ANR	6601801	Identifier	adv		6601666	1					
ANR	6601802	Argument	' '		6601666	1					
ANR	6601803	PrimaryExpression	' '		6601666	0					
ANR	6601804	IfStatement	if ( adv == 0 )		6601666	11					
ANR	6601805	Condition	adv == 0	428:5:10918:10925	6601666	0	True				
ANR	6601806	EqualityExpression	adv == 0		6601666	0		==			
ANR	6601807	Identifier	adv		6601666	0					
ANR	6601808	PrimaryExpression	0		6601666	1					
ANR	6601809	CompoundStatement		27:15:662:662	6601666	1					
ANR	6601810	ExpressionStatement	"eprintf ( ""ERROR: File must be specified\\n"" )"	429:2:10932:10975	6601666	0	True				
ANR	6601811	CallExpression	"eprintf ( ""ERROR: File must be specified\\n"" )"		6601666	0					
ANR	6601812	Callee	eprintf		6601666	0					
ANR	6601813	Identifier	eprintf		6601666	0					
ANR	6601814	ArgumentList	"""ERROR: File must be specified\\n"""		6601666	1					
ANR	6601815	Argument	"""ERROR: File must be specified\\n"""		6601666	0					
ANR	6601816	PrimaryExpression	"""ERROR: File must be specified\\n"""		6601666	0					
ANR	6601817	ReturnStatement	return res ;	430:2:10979:10989	6601666	1	True				
ANR	6601818	Identifier	res		6601666	0					
ANR	6601819	ExpressionStatement	adv ++	432:1:10995:11000	6601666	12	True				
ANR	6601820	PostIncDecOperationExpression	adv ++		6601666	0					
ANR	6601821	Identifier	adv		6601666	0					
ANR	6601822	IncDec	++		6601666	1					
ANR	6601823	ReturnStatement	"return perform_mapped_file_yank ( core , addr , len , input + adv ) ;"	436:1:11104:11166	6601666	13	True				
ANR	6601824	CallExpression	"perform_mapped_file_yank ( core , addr , len , input + adv )"		6601666	0					
ANR	6601825	Callee	perform_mapped_file_yank		6601666	0					
ANR	6601826	Identifier	perform_mapped_file_yank		6601666	0					
ANR	6601827	ArgumentList	core		6601666	1					
ANR	6601828	Argument	core		6601666	0					
ANR	6601829	Identifier	core		6601666	0					
ANR	6601830	Argument	addr		6601666	1					
ANR	6601831	Identifier	addr		6601666	0					
ANR	6601832	Argument	len		6601666	2					
ANR	6601833	Identifier	len		6601666	0					
ANR	6601834	Argument	input + adv		6601666	3					
ANR	6601835	AdditiveExpression	input + adv		6601666	0		+			
ANR	6601836	Identifier	input		6601666	0					
ANR	6601837	Identifier	adv		6601666	1					
ANR	6601838	ReturnType	R_API bool		6601666	1					
ANR	6601839	Identifier	r_core_yank_file_ex		6601666	2					
ANR	6601840	ParameterList	"RCore * core , const char * input"		6601666	3					
ANR	6601841	Parameter	RCore * core	402:31:10233:10243	6601666	0	True				
ANR	6601842	ParameterType	RCore *		6601666	0					
ANR	6601843	Identifier	core		6601666	1					
ANR	6601844	Parameter	const char * input	402:44:10246:10262	6601666	1	True				
ANR	6601845	ParameterType	const char *		6601666	0					
ANR	6601846	Identifier	input		6601666	1					
ANR	6601847	CFGEntryNode	ENTRY		6601666		True				
ANR	6601848	CFGExitNode	EXIT		6601666		True				
ANR	6601849	Symbol	res		6601666						
ANR	6601850	Symbol	false		6601666						
ANR	6601851	Symbol	* core		6601666						
ANR	6601852	Symbol	consume_chars		6601666						
ANR	6601853	Symbol	r_num_math		6601666						
ANR	6601854	Symbol	core		6601666						
ANR	6601855	Symbol	input		6601666						
ANR	6601856	Symbol	find_next_char		6601666						
ANR	6601857	Symbol	adv		6601666						
ANR	6601858	Symbol	len		6601666						
ANR	6601859	Symbol	addr		6601666						
ANR	6601860	Symbol	core -> num		6601666						
ANR	6601861	Symbol	perform_mapped_file_yank		6601666						
ANR	6601862	Function	r_core_yank_file_all	439:0:11171:11381							
ANR	6601863	FunctionDef	"r_core_yank_file_all (RCore * core , const char * input)"		6601862	0					
ANR	6601864	CompoundStatement		439:63:11234:11381	6601862	0					
ANR	6601865	IdentifierDeclStatement	ut64 adv = 0 ;	440:1:11237:11249	6601862	0	True				
ANR	6601866	IdentifierDecl	adv = 0		6601862	0					
ANR	6601867	IdentifierDeclType	ut64		6601862	0					
ANR	6601868	Identifier	adv		6601862	1					
ANR	6601869	AssignmentExpression	adv = 0		6601862	2		=			
ANR	6601870	Identifier	adv		6601862	0					
ANR	6601871	PrimaryExpression	0		6601862	1					
ANR	6601872	IfStatement	if ( ! input )		6601862	1					
ANR	6601873	Condition	! input	441:5:11256:11261	6601862	0	True				
ANR	6601874	UnaryOperationExpression	! input		6601862	0					
ANR	6601875	UnaryOperator	!		6601862	0					
ANR	6601876	Identifier	input		6601862	1					
ANR	6601877	CompoundStatement		3:13:29:29	6601862	1					
ANR	6601878	ReturnStatement	return false ;	442:2:11268:11280	6601862	0	True				
ANR	6601879	Identifier	false		6601862	0					
ANR	6601880	ExpressionStatement	"adv = consume_chars ( input , ' ' )"	444:1:11286:11318	6601862	2	True				
ANR	6601881	AssignmentExpression	"adv = consume_chars ( input , ' ' )"		6601862	0		=			
ANR	6601882	Identifier	adv		6601862	0					
ANR	6601883	CallExpression	"consume_chars ( input , ' ' )"		6601862	1					
ANR	6601884	Callee	consume_chars		6601862	0					
ANR	6601885	Identifier	consume_chars		6601862	0					
ANR	6601886	ArgumentList	input		6601862	1					
ANR	6601887	Argument	input		6601862	0					
ANR	6601888	Identifier	input		6601862	0					
ANR	6601889	Argument	' '		6601862	1					
ANR	6601890	PrimaryExpression	' '		6601862	0					
ANR	6601891	ReturnStatement	"return perform_mapped_file_yank ( core , 0 , - 1 , input + adv ) ;"	445:1:11321:11379	6601862	3	True				
ANR	6601892	CallExpression	"perform_mapped_file_yank ( core , 0 , - 1 , input + adv )"		6601862	0					
ANR	6601893	Callee	perform_mapped_file_yank		6601862	0					
ANR	6601894	Identifier	perform_mapped_file_yank		6601862	0					
ANR	6601895	ArgumentList	core		6601862	1					
ANR	6601896	Argument	core		6601862	0					
ANR	6601897	Identifier	core		6601862	0					
ANR	6601898	Argument	0		6601862	1					
ANR	6601899	PrimaryExpression	0		6601862	0					
ANR	6601900	Argument	- 1		6601862	2					
ANR	6601901	UnaryOperationExpression	- 1		6601862	0					
ANR	6601902	UnaryOperator	-		6601862	0					
ANR	6601903	PrimaryExpression	1		6601862	1					
ANR	6601904	Argument	input + adv		6601862	3					
ANR	6601905	AdditiveExpression	input + adv		6601862	0		+			
ANR	6601906	Identifier	input		6601862	0					
ANR	6601907	Identifier	adv		6601862	1					
ANR	6601908	ReturnType	R_API int		6601862	1					
ANR	6601909	Identifier	r_core_yank_file_all		6601862	2					
ANR	6601910	ParameterList	"RCore * core , const char * input"		6601862	3					
ANR	6601911	Parameter	RCore * core	439:31:11202:11212	6601862	0	True				
ANR	6601912	ParameterType	RCore *		6601862	0					
ANR	6601913	Identifier	core		6601862	1					
ANR	6601914	Parameter	const char * input	439:44:11215:11231	6601862	1	True				
ANR	6601915	ParameterType	const char *		6601862	0					
ANR	6601916	Identifier	input		6601862	1					
ANR	6601917	CFGEntryNode	ENTRY		6601862		True				
ANR	6601918	CFGExitNode	EXIT		6601862		True				
ANR	6601919	Symbol	core		6601862						
ANR	6601920	Symbol	input		6601862						
ANR	6601921	Symbol	adv		6601862						
ANR	6601922	Symbol	false		6601862						
ANR	6601923	Symbol	consume_chars		6601862						
ANR	6601924	Symbol	perform_mapped_file_yank		6601862						
