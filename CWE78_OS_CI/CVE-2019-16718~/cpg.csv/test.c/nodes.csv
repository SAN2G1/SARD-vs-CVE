command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6328966	File	data/converged/CVE-2019-16718~_radare2/test.c								
ANR	6328967	Function	_main	4:0:41:350							
ANR	6328968	FunctionDef	_main ()		6328967	0					
ANR	6328969	CompoundStatement		4:12:53:350	6328967	0					
ANR	6328970	IdentifierDeclStatement	RRegex rx ;	5:1:56:65	6328967	0	True				
ANR	6328971	IdentifierDecl	rx		6328967	0					
ANR	6328972	IdentifierDeclType	RRegex		6328967	0					
ANR	6328973	Identifier	rx		6328967	1					
ANR	6328974	IdentifierDeclStatement	"int rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB ) ;"	6:1:68:117	6328967	1	True				
ANR	6328975	IdentifierDecl	"rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		6328967	0					
ANR	6328976	IdentifierDeclType	int		6328967	0					
ANR	6328977	Identifier	rc		6328967	1					
ANR	6328978	AssignmentExpression	"rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		6328967	2		=			
ANR	6328979	Identifier	rc		6328967	0					
ANR	6328980	CallExpression	"r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		6328967	1					
ANR	6328981	Callee	r_regex_comp		6328967	0					
ANR	6328982	Identifier	r_regex_comp		6328967	0					
ANR	6328983	ArgumentList	& rx		6328967	1					
ANR	6328984	Argument	& rx		6328967	0					
ANR	6328985	UnaryOperationExpression	& rx		6328967	0					
ANR	6328986	UnaryOperator	&		6328967	0					
ANR	6328987	Identifier	rx		6328967	1					
ANR	6328988	Argument	"""^hi"""		6328967	1					
ANR	6328989	PrimaryExpression	"""^hi"""		6328967	0					
ANR	6328990	Argument	R_REGEX_NOSUB		6328967	2					
ANR	6328991	Identifier	R_REGEX_NOSUB		6328967	0					
ANR	6328992	IfStatement	if ( rc )		6328967	2					
ANR	6328993	Condition	rc	7:5:125:126	6328967	0	True				
ANR	6328994	Identifier	rc		6328967	0					
ANR	6328995	CompoundStatement		4:9:75:75	6328967	1					
ANR	6328996	ExpressionStatement	"printf ( ""error\\n"" )"	8:2:133:151	6328967	0	True				
ANR	6328997	CallExpression	"printf ( ""error\\n"" )"		6328967	0					
ANR	6328998	Callee	printf		6328967	0					
ANR	6328999	Identifier	printf		6328967	0					
ANR	6329000	ArgumentList	"""error\\n"""		6328967	1					
ANR	6329001	Argument	"""error\\n"""		6328967	0					
ANR	6329002	PrimaryExpression	"""error\\n"""		6328967	0					
ANR	6329003	ElseStatement	else		6328967	0					
ANR	6329004	CompoundStatement		7:8:108:108	6328967	0					
ANR	6329005	ExpressionStatement	"rc = r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"	11:2:166:208	6328967	0	True				
ANR	6329006	AssignmentExpression	"rc = r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"		6328967	0		=			
ANR	6329007	Identifier	rc		6328967	0					
ANR	6329008	CallExpression	"r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"		6328967	1					
ANR	6329009	Callee	r_regex_exec		6328967	0					
ANR	6329010	Identifier	r_regex_exec		6328967	0					
ANR	6329011	ArgumentList	& rx		6328967	1					
ANR	6329012	Argument	& rx		6328967	0					
ANR	6329013	UnaryOperationExpression	& rx		6328967	0					
ANR	6329014	UnaryOperator	&		6328967	0					
ANR	6329015	Identifier	rx		6328967	1					
ANR	6329016	Argument	"""patata"""		6328967	1					
ANR	6329017	PrimaryExpression	"""patata"""		6328967	0					
ANR	6329018	Argument	0		6328967	2					
ANR	6329019	PrimaryExpression	0		6328967	0					
ANR	6329020	Argument	0		6328967	3					
ANR	6329021	PrimaryExpression	0		6328967	0					
ANR	6329022	Argument	0		6328967	4					
ANR	6329023	PrimaryExpression	0		6328967	0					
ANR	6329024	ExpressionStatement	"printf ( ""out = %d\\n"" , rc )"	12:2:212:237	6328967	1	True				
ANR	6329025	CallExpression	"printf ( ""out = %d\\n"" , rc )"		6328967	0					
ANR	6329026	Callee	printf		6328967	0					
ANR	6329027	Identifier	printf		6328967	0					
ANR	6329028	ArgumentList	"""out = %d\\n"""		6328967	1					
ANR	6329029	Argument	"""out = %d\\n"""		6328967	0					
ANR	6329030	PrimaryExpression	"""out = %d\\n"""		6328967	0					
ANR	6329031	Argument	rc		6328967	1					
ANR	6329032	Identifier	rc		6328967	0					
ANR	6329033	ExpressionStatement	"rc = r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"	14:2:242:284	6328967	2	True				
ANR	6329034	AssignmentExpression	"rc = r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"		6328967	0		=			
ANR	6329035	Identifier	rc		6328967	0					
ANR	6329036	CallExpression	"r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"		6328967	1					
ANR	6329037	Callee	r_regex_exec		6328967	0					
ANR	6329038	Identifier	r_regex_exec		6328967	0					
ANR	6329039	ArgumentList	& rx		6328967	1					
ANR	6329040	Argument	& rx		6328967	0					
ANR	6329041	UnaryOperationExpression	& rx		6328967	0					
ANR	6329042	UnaryOperator	&		6328967	0					
ANR	6329043	Identifier	rx		6328967	1					
ANR	6329044	Argument	"""hillow"""		6328967	1					
ANR	6329045	PrimaryExpression	"""hillow"""		6328967	0					
ANR	6329046	Argument	0		6328967	2					
ANR	6329047	PrimaryExpression	0		6328967	0					
ANR	6329048	Argument	0		6328967	3					
ANR	6329049	PrimaryExpression	0		6328967	0					
ANR	6329050	Argument	0		6328967	4					
ANR	6329051	PrimaryExpression	0		6328967	0					
ANR	6329052	ExpressionStatement	"printf ( ""out = %d\\n"" , rc )"	15:2:288:313	6328967	3	True				
ANR	6329053	CallExpression	"printf ( ""out = %d\\n"" , rc )"		6328967	0					
ANR	6329054	Callee	printf		6328967	0					
ANR	6329055	Identifier	printf		6328967	0					
ANR	6329056	ArgumentList	"""out = %d\\n"""		6328967	1					
ANR	6329057	Argument	"""out = %d\\n"""		6328967	0					
ANR	6329058	PrimaryExpression	"""out = %d\\n"""		6328967	0					
ANR	6329059	Argument	rc		6328967	1					
ANR	6329060	Identifier	rc		6328967	0					
ANR	6329061	ExpressionStatement	r_regex_free ( & rx )	17:1:319:337	6328967	3	True				
ANR	6329062	CallExpression	r_regex_free ( & rx )		6328967	0					
ANR	6329063	Callee	r_regex_free		6328967	0					
ANR	6329064	Identifier	r_regex_free		6328967	0					
ANR	6329065	ArgumentList	& rx		6328967	1					
ANR	6329066	Argument	& rx		6328967	0					
ANR	6329067	UnaryOperationExpression	& rx		6328967	0					
ANR	6329068	UnaryOperator	&		6328967	0					
ANR	6329069	Identifier	rx		6328967	1					
ANR	6329070	ReturnStatement	return 0 ;	18:1:340:348	6328967	4	True				
ANR	6329071	PrimaryExpression	0		6328967	0					
ANR	6329072	ReturnType	int		6328967	1					
ANR	6329073	Identifier	_main		6328967	2					
ANR	6329074	ParameterList			6328967	3					
ANR	6329075	CFGEntryNode	ENTRY		6328967		True				
ANR	6329076	CFGExitNode	EXIT		6328967		True				
ANR	6329077	Symbol	rc		6328967						
ANR	6329078	Symbol	& rx		6328967						
ANR	6329079	Symbol	R_REGEX_NOSUB		6328967						
ANR	6329080	Symbol	rx		6328967						
ANR	6329081	Symbol	r_regex_exec		6328967						
ANR	6329082	Symbol	r_regex_comp		6328967						
ANR	6329083	Function	test_or	21:0:353:1099							
ANR	6329084	FunctionDef	test_or ()		6329083	0					
ANR	6329085	CompoundStatement		21:22:375:1099	6329083	0					
ANR	6329086	IdentifierDeclStatement	"RRegex * rx = r_regex_new ( ""(eax|ebx)"" , ""e"" ) ;"	22:1:378:421	6329083	0	True				
ANR	6329087	IdentifierDecl	"* rx = r_regex_new ( ""(eax|ebx)"" , ""e"" )"		6329083	0					
ANR	6329088	IdentifierDeclType	RRegex *		6329083	0					
ANR	6329089	Identifier	rx		6329083	1					
ANR	6329090	AssignmentExpression	"* rx = r_regex_new ( ""(eax|ebx)"" , ""e"" )"		6329083	2		=			
ANR	6329091	Identifier	rx		6329083	0					
ANR	6329092	CallExpression	"r_regex_new ( ""(eax|ebx)"" , ""e"" )"		6329083	1					
ANR	6329093	Callee	r_regex_new		6329083	0					
ANR	6329094	Identifier	r_regex_new		6329083	0					
ANR	6329095	ArgumentList	"""(eax|ebx)"""		6329083	1					
ANR	6329096	Argument	"""(eax|ebx)"""		6329083	0					
ANR	6329097	PrimaryExpression	"""(eax|ebx)"""		6329083	0					
ANR	6329098	Argument	"""e"""		6329083	1					
ANR	6329099	PrimaryExpression	"""e"""		6329083	0					
ANR	6329100	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" ) )"	23:1:424:508	6329083	1	True				
ANR	6329101	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" ) )"		6329083	0					
ANR	6329102	Callee	printf		6329083	0					
ANR	6329103	Identifier	printf		6329083	0					
ANR	6329104	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329105	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329106	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329107	Argument	"""mov eax"""		6329083	1					
ANR	6329108	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329109	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" )"		6329083	2					
ANR	6329110	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" )"		6329083	0					
ANR	6329111	Callee	r_regex_match		6329083	0					
ANR	6329112	Identifier	r_regex_match		6329083	0					
ANR	6329113	ArgumentList	"""(eax|ebx)"""		6329083	1					
ANR	6329114	Argument	"""(eax|ebx)"""		6329083	0					
ANR	6329115	PrimaryExpression	"""(eax|ebx)"""		6329083	0					
ANR	6329116	Argument	"""e"""		6329083	1					
ANR	6329117	PrimaryExpression	"""e"""		6329083	0					
ANR	6329118	Argument	"""mov eax"""		6329083	2					
ANR	6329119	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329120	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" ) )"	24:1:511:595	6329083	2	True				
ANR	6329121	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" ) )"		6329083	0					
ANR	6329122	Callee	printf		6329083	0					
ANR	6329123	Identifier	printf		6329083	0					
ANR	6329124	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329125	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329126	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329127	Argument	"""mov ebx"""		6329083	1					
ANR	6329128	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329129	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" )"		6329083	2					
ANR	6329130	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" )"		6329083	0					
ANR	6329131	Callee	r_regex_match		6329083	0					
ANR	6329132	Identifier	r_regex_match		6329083	0					
ANR	6329133	ArgumentList	"""(eax|ebx)"""		6329083	1					
ANR	6329134	Argument	"""(eax|ebx)"""		6329083	0					
ANR	6329135	PrimaryExpression	"""(eax|ebx)"""		6329083	0					
ANR	6329136	Argument	"""e"""		6329083	1					
ANR	6329137	PrimaryExpression	"""e"""		6329083	0					
ANR	6329138	Argument	"""mov ebx"""		6329083	2					
ANR	6329139	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329140	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" ) )"	25:1:598:682	6329083	3	True				
ANR	6329141	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" ) )"		6329083	0					
ANR	6329142	Callee	printf		6329083	0					
ANR	6329143	Identifier	printf		6329083	0					
ANR	6329144	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329145	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329146	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329147	Argument	"""mov eax"""		6329083	1					
ANR	6329148	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329149	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" )"		6329083	2					
ANR	6329150	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" )"		6329083	0					
ANR	6329151	Callee	r_regex_match		6329083	0					
ANR	6329152	Identifier	r_regex_match		6329083	0					
ANR	6329153	ArgumentList	"""(eax|ebx)"""		6329083	1					
ANR	6329154	Argument	"""(eax|ebx)"""		6329083	0					
ANR	6329155	PrimaryExpression	"""(eax|ebx)"""		6329083	0					
ANR	6329156	Argument	"""e"""		6329083	1					
ANR	6329157	PrimaryExpression	"""e"""		6329083	0					
ANR	6329158	Argument	"""mov ecx"""		6329083	2					
ANR	6329159	PrimaryExpression	"""mov ecx"""		6329083	0					
ANR	6329160	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" ) )"	26:1:685:769	6329083	4	True				
ANR	6329161	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" ) )"		6329083	0					
ANR	6329162	Callee	printf		6329083	0					
ANR	6329163	Identifier	printf		6329083	0					
ANR	6329164	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329165	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329166	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329167	Argument	"""mov ebx"""		6329083	1					
ANR	6329168	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329169	Argument	"r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" )"		6329083	2					
ANR	6329170	CallExpression	"r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" )"		6329083	0					
ANR	6329171	Callee	r_regex_match		6329083	0					
ANR	6329172	Identifier	r_regex_match		6329083	0					
ANR	6329173	ArgumentList	"""(eax|ecx)"""		6329083	1					
ANR	6329174	Argument	"""(eax|ecx)"""		6329083	0					
ANR	6329175	PrimaryExpression	"""(eax|ecx)"""		6329083	0					
ANR	6329176	Argument	"""e"""		6329083	1					
ANR	6329177	PrimaryExpression	"""e"""		6329083	0					
ANR	6329178	Argument	"""mov ebx"""		6329083	2					
ANR	6329179	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329180	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_check ( rx , ""mov eax"" ) )"	27:1:772:842	6329083	5	True				
ANR	6329181	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_check ( rx , ""mov eax"" ) )"		6329083	0					
ANR	6329182	Callee	printf		6329083	0					
ANR	6329183	Identifier	printf		6329083	0					
ANR	6329184	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329185	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329186	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329187	Argument	"""mov eax"""		6329083	1					
ANR	6329188	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329189	Argument	"r_regex_check ( rx , ""mov eax"" )"		6329083	2					
ANR	6329190	CallExpression	"r_regex_check ( rx , ""mov eax"" )"		6329083	0					
ANR	6329191	Callee	r_regex_check		6329083	0					
ANR	6329192	Identifier	r_regex_check		6329083	0					
ANR	6329193	ArgumentList	rx		6329083	1					
ANR	6329194	Argument	rx		6329083	0					
ANR	6329195	Identifier	rx		6329083	0					
ANR	6329196	Argument	"""mov eax"""		6329083	1					
ANR	6329197	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329198	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_check ( rx , ""mov ebx"" ) )"	28:1:845:915	6329083	6	True				
ANR	6329199	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_check ( rx , ""mov ebx"" ) )"		6329083	0					
ANR	6329200	Callee	printf		6329083	0					
ANR	6329201	Identifier	printf		6329083	0					
ANR	6329202	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329203	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329204	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329205	Argument	"""mov ebx"""		6329083	1					
ANR	6329206	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329207	Argument	"r_regex_check ( rx , ""mov ebx"" )"		6329083	2					
ANR	6329208	CallExpression	"r_regex_check ( rx , ""mov ebx"" )"		6329083	0					
ANR	6329209	Callee	r_regex_check		6329083	0					
ANR	6329210	Identifier	r_regex_check		6329083	0					
ANR	6329211	ArgumentList	rx		6329083	1					
ANR	6329212	Argument	rx		6329083	0					
ANR	6329213	Identifier	rx		6329083	0					
ANR	6329214	Argument	"""mov ebx"""		6329083	1					
ANR	6329215	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329216	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 ) )"	29:1:918:996	6329083	7	True				
ANR	6329217	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 ) )"		6329083	0					
ANR	6329218	Callee	printf		6329083	0					
ANR	6329219	Identifier	printf		6329083	0					
ANR	6329220	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329221	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329222	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329223	Argument	"""mov eax"""		6329083	1					
ANR	6329224	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329225	Argument	"r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 )"		6329083	2					
ANR	6329226	CallExpression	"r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 )"		6329083	0					
ANR	6329227	Callee	r_regex_exec		6329083	0					
ANR	6329228	Identifier	r_regex_exec		6329083	0					
ANR	6329229	ArgumentList	rx		6329083	1					
ANR	6329230	Argument	rx		6329083	0					
ANR	6329231	Identifier	rx		6329083	0					
ANR	6329232	Argument	"""mov eax"""		6329083	1					
ANR	6329233	PrimaryExpression	"""mov eax"""		6329083	0					
ANR	6329234	Argument	0		6329083	2					
ANR	6329235	PrimaryExpression	0		6329083	0					
ANR	6329236	Argument	0		6329083	3					
ANR	6329237	PrimaryExpression	0		6329083	0					
ANR	6329238	Argument	1		6329083	4					
ANR	6329239	PrimaryExpression	1		6329083	0					
ANR	6329240	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 ) )"	30:1:999:1077	6329083	8	True				
ANR	6329241	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 ) )"		6329083	0					
ANR	6329242	Callee	printf		6329083	0					
ANR	6329243	Identifier	printf		6329083	0					
ANR	6329244	ArgumentList	"""result (%s) = %d\\n"""		6329083	1					
ANR	6329245	Argument	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329246	PrimaryExpression	"""result (%s) = %d\\n"""		6329083	0					
ANR	6329247	Argument	"""mov ebx"""		6329083	1					
ANR	6329248	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329249	Argument	"r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 )"		6329083	2					
ANR	6329250	CallExpression	"r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 )"		6329083	0					
ANR	6329251	Callee	r_regex_exec		6329083	0					
ANR	6329252	Identifier	r_regex_exec		6329083	0					
ANR	6329253	ArgumentList	rx		6329083	1					
ANR	6329254	Argument	rx		6329083	0					
ANR	6329255	Identifier	rx		6329083	0					
ANR	6329256	Argument	"""mov ebx"""		6329083	1					
ANR	6329257	PrimaryExpression	"""mov ebx"""		6329083	0					
ANR	6329258	Argument	0		6329083	2					
ANR	6329259	PrimaryExpression	0		6329083	0					
ANR	6329260	Argument	0		6329083	3					
ANR	6329261	PrimaryExpression	0		6329083	0					
ANR	6329262	Argument	1		6329083	4					
ANR	6329263	PrimaryExpression	1		6329083	0					
ANR	6329264	ExpressionStatement	r_regex_free ( rx )	31:1:1080:1097	6329083	9	True				
ANR	6329265	CallExpression	r_regex_free ( rx )		6329083	0					
ANR	6329266	Callee	r_regex_free		6329083	0					
ANR	6329267	Identifier	r_regex_free		6329083	0					
ANR	6329268	ArgumentList	rx		6329083	1					
ANR	6329269	Argument	rx		6329083	0					
ANR	6329270	Identifier	rx		6329083	0					
ANR	6329271	ReturnType	static void		6329083	1					
ANR	6329272	Identifier	test_or		6329083	2					
ANR	6329273	ParameterList			6329083	3					
ANR	6329274	CFGEntryNode	ENTRY		6329083		True				
ANR	6329275	CFGExitNode	EXIT		6329083		True				
ANR	6329276	Symbol	r_regex_new		6329083						
ANR	6329277	Symbol	r_regex_check		6329083						
ANR	6329278	Symbol	rx		6329083						
ANR	6329279	Symbol	r_regex_exec		6329083						
ANR	6329280	Symbol	r_regex_match		6329083						
ANR	6329281	Function	main	34:0:1102:1708							
ANR	6329282	FunctionDef	"main (int argc , char * * argv)"		6329281	0					
ANR	6329283	CompoundStatement		34:32:1134:1708	6329281	0					
ANR	6329284	IdentifierDeclStatement	"const char * needle = ""^hi"" ;"	35:1:1137:1163	6329281	0	True				
ANR	6329285	IdentifierDecl	"* needle = ""^hi"""		6329281	0					
ANR	6329286	IdentifierDeclType	const char *		6329281	0					
ANR	6329287	Identifier	needle		6329281	1					
ANR	6329288	AssignmentExpression	"* needle = ""^hi"""		6329281	2		=			
ANR	6329289	Identifier	needle		6329281	0					
ANR	6329290	PrimaryExpression	"""^hi"""		6329281	1					
ANR	6329291	IdentifierDeclStatement	"const char * haystack_1 = ""patata"" ;"	36:1:1166:1199	6329281	1	True				
ANR	6329292	IdentifierDecl	"* haystack_1 = ""patata"""		6329281	0					
ANR	6329293	IdentifierDeclType	const char *		6329281	0					
ANR	6329294	Identifier	haystack_1		6329281	1					
ANR	6329295	AssignmentExpression	"* haystack_1 = ""patata"""		6329281	2		=			
ANR	6329296	Identifier	haystack_1		6329281	0					
ANR	6329297	PrimaryExpression	"""patata"""		6329281	1					
ANR	6329298	IdentifierDeclStatement	"const char * haystack_2 = ""hillow"" ;"	37:1:1202:1235	6329281	2	True				
ANR	6329299	IdentifierDecl	"* haystack_2 = ""hillow"""		6329281	0					
ANR	6329300	IdentifierDeclType	const char *		6329281	0					
ANR	6329301	Identifier	haystack_2		6329281	1					
ANR	6329302	AssignmentExpression	"* haystack_2 = ""hillow"""		6329281	2		=			
ANR	6329303	Identifier	haystack_2		6329281	0					
ANR	6329304	PrimaryExpression	"""hillow"""		6329281	1					
ANR	6329305	IfStatement	if ( argc > 3 )		6329281	3					
ANR	6329306	Condition	argc > 3	38:5:1242:1247	6329281	0	True				
ANR	6329307	RelationalExpression	argc > 3		6329281	0		>			
ANR	6329308	Identifier	argc		6329281	0					
ANR	6329309	PrimaryExpression	3		6329281	1					
ANR	6329310	CompoundStatement		5:13:115:115	6329281	1					
ANR	6329311	ExpressionStatement	needle = argv [ 1 ]	39:2:1254:1270	6329281	0	True				
ANR	6329312	AssignmentExpression	needle = argv [ 1 ]		6329281	0		=			
ANR	6329313	Identifier	needle		6329281	0					
ANR	6329314	ArrayIndexing	argv [ 1 ]		6329281	1					
ANR	6329315	Identifier	argv		6329281	0					
ANR	6329316	PrimaryExpression	1		6329281	1					
ANR	6329317	ExpressionStatement	haystack_1 = argv [ 2 ]	40:2:1274:1294	6329281	1	True				
ANR	6329318	AssignmentExpression	haystack_1 = argv [ 2 ]		6329281	0		=			
ANR	6329319	Identifier	haystack_1		6329281	0					
ANR	6329320	ArrayIndexing	argv [ 2 ]		6329281	1					
ANR	6329321	Identifier	argv		6329281	0					
ANR	6329322	PrimaryExpression	2		6329281	1					
ANR	6329323	ExpressionStatement	haystack_2 = argv [ 3 ]	41:2:1298:1318	6329281	2	True				
ANR	6329324	AssignmentExpression	haystack_2 = argv [ 3 ]		6329281	0		=			
ANR	6329325	Identifier	haystack_2		6329281	0					
ANR	6329326	ArrayIndexing	argv [ 3 ]		6329281	1					
ANR	6329327	Identifier	argv		6329281	0					
ANR	6329328	PrimaryExpression	3		6329281	1					
ANR	6329329	ElseStatement	else		6329281	0					
ANR	6329330	ExpressionStatement	"printf ( ""Using default values\\n"" )"	42:8:1328:1361	6329281	0	True				
ANR	6329331	CallExpression	"printf ( ""Using default values\\n"" )"		6329281	0					
ANR	6329332	Callee	printf		6329281	0					
ANR	6329333	Identifier	printf		6329281	0					
ANR	6329334	ArgumentList	"""Using default values\\n"""		6329281	1					
ANR	6329335	Argument	"""Using default values\\n"""		6329281	0					
ANR	6329336	PrimaryExpression	"""Using default values\\n"""		6329281	0					
ANR	6329337	IdentifierDeclStatement	"RRegex * rx = r_regex_new ( needle , """" ) ;"	43:1:1364:1401	6329281	4	True				
ANR	6329338	IdentifierDecl	"* rx = r_regex_new ( needle , """" )"		6329281	0					
ANR	6329339	IdentifierDeclType	RRegex *		6329281	0					
ANR	6329340	Identifier	rx		6329281	1					
ANR	6329341	AssignmentExpression	"* rx = r_regex_new ( needle , """" )"		6329281	2		=			
ANR	6329342	Identifier	rx		6329281	0					
ANR	6329343	CallExpression	"r_regex_new ( needle , """" )"		6329281	1					
ANR	6329344	Callee	r_regex_new		6329281	0					
ANR	6329345	Identifier	r_regex_new		6329281	0					
ANR	6329346	ArgumentList	needle		6329281	1					
ANR	6329347	Argument	needle		6329281	0					
ANR	6329348	Identifier	needle		6329281	0					
ANR	6329349	Argument	""""""		6329281	1					
ANR	6329350	PrimaryExpression	""""""		6329281	0					
ANR	6329351	IfStatement	if ( rx )		6329281	5					
ANR	6329352	Condition	rx	44:5:1408:1409	6329281	0	True				
ANR	6329353	Identifier	rx		6329281	0					
ANR	6329354	CompoundStatement		12:2:281:329	6329281	1					
ANR	6329355	IdentifierDeclStatement	"int res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 ) ;"	45:2:1416:1464	6329281	0	True				
ANR	6329356	IdentifierDecl	"res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		6329281	0					
ANR	6329357	IdentifierDeclType	int		6329281	0					
ANR	6329358	Identifier	res		6329281	1					
ANR	6329359	AssignmentExpression	"res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		6329281	2		=			
ANR	6329360	Identifier	res		6329281	0					
ANR	6329361	CallExpression	"r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		6329281	1					
ANR	6329362	Callee	r_regex_exec		6329281	0					
ANR	6329363	Identifier	r_regex_exec		6329281	0					
ANR	6329364	ArgumentList	rx		6329281	1					
ANR	6329365	Argument	rx		6329281	0					
ANR	6329366	Identifier	rx		6329281	0					
ANR	6329367	Argument	haystack_1		6329281	1					
ANR	6329368	Identifier	haystack_1		6329281	0					
ANR	6329369	Argument	0		6329281	2					
ANR	6329370	PrimaryExpression	0		6329281	0					
ANR	6329371	Argument	0		6329281	3					
ANR	6329372	PrimaryExpression	0		6329281	0					
ANR	6329373	Argument	0		6329281	4					
ANR	6329374	PrimaryExpression	0		6329281	0					
ANR	6329375	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , haystack_1 , res )"	46:2:1468:1514	6329281	1	True				
ANR	6329376	CallExpression	"printf ( ""result (%s) = %d\\n"" , haystack_1 , res )"		6329281	0					
ANR	6329377	Callee	printf		6329281	0					
ANR	6329378	Identifier	printf		6329281	0					
ANR	6329379	ArgumentList	"""result (%s) = %d\\n"""		6329281	1					
ANR	6329380	Argument	"""result (%s) = %d\\n"""		6329281	0					
ANR	6329381	PrimaryExpression	"""result (%s) = %d\\n"""		6329281	0					
ANR	6329382	Argument	haystack_1		6329281	1					
ANR	6329383	Identifier	haystack_1		6329281	0					
ANR	6329384	Argument	res		6329281	2					
ANR	6329385	Identifier	res		6329281	0					
ANR	6329386	ExpressionStatement	"res = r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"	47:2:1518:1562	6329281	2	True				
ANR	6329387	AssignmentExpression	"res = r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"		6329281	0		=			
ANR	6329388	Identifier	res		6329281	0					
ANR	6329389	CallExpression	"r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"		6329281	1					
ANR	6329390	Callee	r_regex_exec		6329281	0					
ANR	6329391	Identifier	r_regex_exec		6329281	0					
ANR	6329392	ArgumentList	rx		6329281	1					
ANR	6329393	Argument	rx		6329281	0					
ANR	6329394	Identifier	rx		6329281	0					
ANR	6329395	Argument	haystack_2		6329281	1					
ANR	6329396	Identifier	haystack_2		6329281	0					
ANR	6329397	Argument	0		6329281	2					
ANR	6329398	PrimaryExpression	0		6329281	0					
ANR	6329399	Argument	0		6329281	3					
ANR	6329400	PrimaryExpression	0		6329281	0					
ANR	6329401	Argument	0		6329281	4					
ANR	6329402	PrimaryExpression	0		6329281	0					
ANR	6329403	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , haystack_2 , res )"	48:2:1566:1612	6329281	3	True				
ANR	6329404	CallExpression	"printf ( ""result (%s) = %d\\n"" , haystack_2 , res )"		6329281	0					
ANR	6329405	Callee	printf		6329281	0					
ANR	6329406	Identifier	printf		6329281	0					
ANR	6329407	ArgumentList	"""result (%s) = %d\\n"""		6329281	1					
ANR	6329408	Argument	"""result (%s) = %d\\n"""		6329281	0					
ANR	6329409	PrimaryExpression	"""result (%s) = %d\\n"""		6329281	0					
ANR	6329410	Argument	haystack_2		6329281	1					
ANR	6329411	Identifier	haystack_2		6329281	0					
ANR	6329412	Argument	res		6329281	2					
ANR	6329413	Identifier	res		6329281	0					
ANR	6329414	ExpressionStatement	r_regex_free ( rx )	49:2:1616:1633	6329281	4	True				
ANR	6329415	CallExpression	r_regex_free ( rx )		6329281	0					
ANR	6329416	Callee	r_regex_free		6329281	0					
ANR	6329417	Identifier	r_regex_free		6329281	0					
ANR	6329418	ArgumentList	rx		6329281	1					
ANR	6329419	Argument	rx		6329281	0					
ANR	6329420	Identifier	rx		6329281	0					
ANR	6329421	ElseStatement	else		6329281	0					
ANR	6329422	ExpressionStatement	"printf ( ""oops, cannot compile regexp\\n"" )"	50:8:1643:1683	6329281	0	True				
ANR	6329423	CallExpression	"printf ( ""oops, cannot compile regexp\\n"" )"		6329281	0					
ANR	6329424	Callee	printf		6329281	0					
ANR	6329425	Identifier	printf		6329281	0					
ANR	6329426	ArgumentList	"""oops, cannot compile regexp\\n"""		6329281	1					
ANR	6329427	Argument	"""oops, cannot compile regexp\\n"""		6329281	0					
ANR	6329428	PrimaryExpression	"""oops, cannot compile regexp\\n"""		6329281	0					
ANR	6329429	ExpressionStatement	test_or ( )	51:1:1686:1695	6329281	6	True				
ANR	6329430	CallExpression	test_or ( )		6329281	0					
ANR	6329431	Callee	test_or		6329281	0					
ANR	6329432	Identifier	test_or		6329281	0					
ANR	6329433	ArgumentList			6329281	1					
ANR	6329434	ReturnStatement	return 0 ;	52:1:1698:1706	6329281	7	True				
ANR	6329435	PrimaryExpression	0		6329281	0					
ANR	6329436	ReturnType	int		6329281	1					
ANR	6329437	Identifier	main		6329281	2					
ANR	6329438	ParameterList	"int argc , char * * argv"		6329281	3					
ANR	6329439	Parameter	int argc	34:9:1111:1118	6329281	0	True				
ANR	6329440	ParameterType	int		6329281	0					
ANR	6329441	Identifier	argc		6329281	1					
ANR	6329442	Parameter	char * * argv	34:19:1121:1131	6329281	1	True				
ANR	6329443	ParameterType	char * *		6329281	0					
ANR	6329444	Identifier	argv		6329281	1					
ANR	6329445	CFGEntryNode	ENTRY		6329281		True				
ANR	6329446	CFGExitNode	EXIT		6329281		True				
ANR	6329447	Symbol	argc		6329281						
ANR	6329448	Symbol	r_regex_new		6329281						
ANR	6329449	Symbol	res		6329281						
ANR	6329450	Symbol	rx		6329281						
ANR	6329451	Symbol	* argv		6329281						
ANR	6329452	Symbol	r_regex_exec		6329281						
ANR	6329453	Symbol	needle		6329281						
ANR	6329454	Symbol	haystack_1		6329281						
ANR	6329455	Symbol	argv		6329281						
ANR	6329456	Symbol	haystack_2		6329281						
