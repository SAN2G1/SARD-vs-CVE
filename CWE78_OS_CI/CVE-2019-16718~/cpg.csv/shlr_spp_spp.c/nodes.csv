command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6111008	File	data/converged/CVE-2019-16718~_radare2/shlr_spp_spp.c								
ANR	6111009	Function	spp_run	7:0:115:1057							
ANR	6111010	FunctionDef	"spp_run (char * buf , Output * out)"		6111009	0					
ANR	6111011	CompoundStatement		7:42:157:1057	6111009	0					
ANR	6111012	IdentifierDeclStatement	"int i , ret = 0 ;"	8:1:160:174	6111009	0	True				
ANR	6111013	IdentifierDecl	i		6111009	0					
ANR	6111014	IdentifierDeclType	int		6111009	0					
ANR	6111015	Identifier	i		6111009	1					
ANR	6111016	IdentifierDecl	ret = 0		6111009	1					
ANR	6111017	IdentifierDeclType	int		6111009	0					
ANR	6111018	Identifier	ret		6111009	1					
ANR	6111019	AssignmentExpression	ret = 0		6111009	2		=			
ANR	6111020	Identifier	ret		6111009	0					
ANR	6111021	PrimaryExpression	0		6111009	1					
ANR	6111022	IdentifierDeclStatement	char * tok ;	9:1:177:186	6111009	1	True				
ANR	6111023	IdentifierDecl	* tok		6111009	0					
ANR	6111024	IdentifierDeclType	char *		6111009	0					
ANR	6111025	Identifier	tok		6111009	1					
ANR	6111026	IdentifierDeclStatement	"D fprintf ( stderr , ""SPP_RUN(%s)\\n"" , buf ) ;"	11:1:190:230	6111009	2	True				
ANR	6111027	IdentifierDecl	"fprintf ( stderr , ""SPP_RUN(%s)\\n"" , buf )"		6111009	0					
ANR	6111028	IdentifierDeclType	D		6111009	0					
ANR	6111029	Identifier	fprintf		6111009	1					
ANR	6111030	Expression	"stderr , ""SPP_RUN(%s)\\n"" , buf"		6111009	2					
ANR	6111031	Identifier	stderr		6111009	0					
ANR	6111032	Expression	"""SPP_RUN(%s)\\n"" , buf"		6111009	1					
ANR	6111033	PrimaryExpression	"""SPP_RUN(%s)\\n"""		6111009	0					
ANR	6111034	Identifier	buf		6111009	1					
ANR	6111035	IfStatement	if ( proc -> chop )		6111009	3					
ANR	6111036	Condition	proc -> chop	12:5:237:246	6111009	0	True				
ANR	6111037	PtrMemberAccess	proc -> chop		6111009	0					
ANR	6111038	Identifier	proc		6111009	0					
ANR	6111039	Identifier	chop		6111009	1					
ANR	6111040	CompoundStatement		8:2:129:154	6111009	1					
ANR	6111041	ForStatement	for ( ; IS_SPACE ( * buf ) ; buf ++ )		6111009	0					
ANR	6111042	Condition	IS_SPACE ( * buf )	13:9:260:274	6111009	0	True				
ANR	6111043	CallExpression	IS_SPACE ( * buf )		6111009	0					
ANR	6111044	Callee	IS_SPACE		6111009	0					
ANR	6111045	Identifier	IS_SPACE		6111009	0					
ANR	6111046	ArgumentList	* buf		6111009	1					
ANR	6111047	Argument	* buf		6111009	0					
ANR	6111048	UnaryOperationExpression	* buf		6111009	0					
ANR	6111049	UnaryOperator	*		6111009	0					
ANR	6111050	Identifier	buf		6111009	1					
ANR	6111051	PostIncDecOperationExpression	buf ++	13:26:277:281	6111009	1	True				
ANR	6111052	Identifier	buf		6111009	0					
ANR	6111053	IncDec	++		6111009	1					
ANR	6111054	ExpressionStatement		13:32:283:283	6111009	2	True				
ANR	6111055	IdentifierDeclStatement	int buflen = strlen ( buf ) ;	14:2:287:312	6111009	1	True				
ANR	6111056	IdentifierDecl	buflen = strlen ( buf )		6111009	0					
ANR	6111057	IdentifierDeclType	int		6111009	0					
ANR	6111058	Identifier	buflen		6111009	1					
ANR	6111059	AssignmentExpression	buflen = strlen ( buf )		6111009	2		=			
ANR	6111060	Identifier	buflen		6111009	0					
ANR	6111061	CallExpression	strlen ( buf )		6111009	1					
ANR	6111062	Callee	strlen		6111009	0					
ANR	6111063	Identifier	strlen		6111009	0					
ANR	6111064	ArgumentList	buf		6111009	1					
ANR	6111065	Argument	buf		6111009	0					
ANR	6111066	Identifier	buf		6111009	0					
ANR	6111067	ForStatement	for ( tok = buf + ( buflen ? buflen - 1 : 0 ) ; IS_SPACE ( * tok ) ; tok -- )		6111009	2					
ANR	6111068	ForInit	tok = buf + ( buflen ? buflen - 1 : 0 ) ;	15:7:321:356	6111009	0	True				
ANR	6111069	AssignmentExpression	tok = buf + ( buflen ? buflen - 1 : 0 )		6111009	0		=			
ANR	6111070	Identifier	tok		6111009	0					
ANR	6111071	AdditiveExpression	buf + ( buflen ? buflen - 1 : 0 )		6111009	1		+			
ANR	6111072	Identifier	buf		6111009	0					
ANR	6111073	ConditionalExpression	buflen ? buflen - 1 : 0		6111009	1					
ANR	6111074	Condition	buflen		6111009	0					
ANR	6111075	Identifier	buflen		6111009	0					
ANR	6111076	AdditiveExpression	buflen - 1		6111009	1		-			
ANR	6111077	Identifier	buflen		6111009	0					
ANR	6111078	PrimaryExpression	1		6111009	1					
ANR	6111079	PrimaryExpression	0		6111009	2					
ANR	6111080	Condition	IS_SPACE ( * tok )	15:44:358:372	6111009	1	True				
ANR	6111081	CallExpression	IS_SPACE ( * tok )		6111009	0					
ANR	6111082	Callee	IS_SPACE		6111009	0					
ANR	6111083	Identifier	IS_SPACE		6111009	0					
ANR	6111084	ArgumentList	* tok		6111009	1					
ANR	6111085	Argument	* tok		6111009	0					
ANR	6111086	UnaryOperationExpression	* tok		6111009	0					
ANR	6111087	UnaryOperator	*		6111009	0					
ANR	6111088	Identifier	tok		6111009	1					
ANR	6111089	PostIncDecOperationExpression	tok --	15:61:375:379	6111009	2	True				
ANR	6111090	Identifier	tok		6111009	0					
ANR	6111091	IncDec	--		6111009	1					
ANR	6111092	CompoundStatement		9:68:224:224	6111009	3					
ANR	6111093	ExpressionStatement	* tok = '\\0'	16:3:387:398	6111009	0	True				
ANR	6111094	AssignmentExpression	* tok = '\\0'		6111009	0		=			
ANR	6111095	UnaryOperationExpression	* tok		6111009	0					
ANR	6111096	UnaryOperator	*		6111009	0					
ANR	6111097	Identifier	tok		6111009	1					
ANR	6111098	PrimaryExpression	'\\0'		6111009	1					
ANR	6111099	IfStatement	if ( proc -> token )		6111009	4					
ANR	6111100	Condition	proc -> token	20:5:413:423	6111009	0	True				
ANR	6111101	PtrMemberAccess	proc -> token		6111009	0					
ANR	6111102	Identifier	proc		6111009	0					
ANR	6111103	Identifier	token		6111009	1					
ANR	6111104	CompoundStatement		14:18:268:268	6111009	1					
ANR	6111105	ExpressionStatement	"tok = strstr ( buf , proc -> token )"	21:2:430:461	6111009	0	True				
ANR	6111106	AssignmentExpression	"tok = strstr ( buf , proc -> token )"		6111009	0		=			
ANR	6111107	Identifier	tok		6111009	0					
ANR	6111108	CallExpression	"strstr ( buf , proc -> token )"		6111009	1					
ANR	6111109	Callee	strstr		6111009	0					
ANR	6111110	Identifier	strstr		6111009	0					
ANR	6111111	ArgumentList	buf		6111009	1					
ANR	6111112	Argument	buf		6111009	0					
ANR	6111113	Identifier	buf		6111009	0					
ANR	6111114	Argument	proc -> token		6111009	1					
ANR	6111115	PtrMemberAccess	proc -> token		6111009	0					
ANR	6111116	Identifier	proc		6111009	0					
ANR	6111117	Identifier	token		6111009	1					
ANR	6111118	IfStatement	if ( tok )		6111009	1					
ANR	6111119	Condition	tok	22:6:469:471	6111009	0	True				
ANR	6111120	Identifier	tok		6111009	0					
ANR	6111121	CompoundStatement		16:11:316:316	6111009	1					
ANR	6111122	ExpressionStatement	* tok = '\\0'	23:3:479:490	6111009	0	True				
ANR	6111123	AssignmentExpression	* tok = '\\0'		6111009	0		=			
ANR	6111124	UnaryOperationExpression	* tok		6111009	0					
ANR	6111125	UnaryOperator	*		6111009	0					
ANR	6111126	Identifier	tok		6111009	1					
ANR	6111127	PrimaryExpression	'\\0'		6111009	1					
ANR	6111128	ExpressionStatement	tok = tok + 1	24:3:495:508	6111009	1	True				
ANR	6111129	AssignmentExpression	tok = tok + 1		6111009	0		=			
ANR	6111130	Identifier	tok		6111009	0					
ANR	6111131	AdditiveExpression	tok + 1		6111009	1		+			
ANR	6111132	Identifier	tok		6111009	0					
ANR	6111133	PrimaryExpression	1		6111009	1					
ANR	6111134	ElseStatement	else		6111009	0					
ANR	6111135	CompoundStatement		19:9:361:361	6111009	0					
ANR	6111136	ExpressionStatement	tok = buf	26:3:524:533	6111009	0	True				
ANR	6111137	AssignmentExpression	tok = buf		6111009	0		=			
ANR	6111138	Identifier	tok		6111009	0					
ANR	6111139	Identifier	buf		6111009	1					
ANR	6111140	ElseStatement	else		6111009	0					
ANR	6111141	CompoundStatement		22:8:389:389	6111009	0					
ANR	6111142	ExpressionStatement	tok = buf	29:2:551:560	6111009	0	True				
ANR	6111143	AssignmentExpression	tok = buf		6111009	0		=			
ANR	6111144	Identifier	tok		6111009	0					
ANR	6111145	Identifier	buf		6111009	1					
ANR	6111146	ForStatement	for ( i = 0 ; tags [ i ] . callback ; i ++ )		6111009	5					
ANR	6111147	ForInit	i = 0 ;	31:6:571:576	6111009	0	True				
ANR	6111148	AssignmentExpression	i = 0		6111009	0		=			
ANR	6111149	Identifier	i		6111009	0					
ANR	6111150	PrimaryExpression	0		6111009	1					
ANR	6111151	Condition	tags [ i ] . callback	31:13:578:593	6111009	1	True				
ANR	6111152	MemberAccess	tags [ i ] . callback		6111009	0					
ANR	6111153	ArrayIndexing	tags [ i ]		6111009	0					
ANR	6111154	Identifier	tags		6111009	0					
ANR	6111155	Identifier	i		6111009	1					
ANR	6111156	Identifier	callback		6111009	1					
ANR	6111157	PostIncDecOperationExpression	i ++	31:31:596:598	6111009	2	True				
ANR	6111158	Identifier	i		6111009	0					
ANR	6111159	IncDec	++		6111009	1					
ANR	6111160	CompoundStatement		26:2:447:485	6111009	3					
ANR	6111161	IdentifierDeclStatement	"D fprintf ( stderr , ""NAME=(%s)\\n"" , tok ) ;"	32:2:605:643	6111009	0	True				
ANR	6111162	IdentifierDecl	"fprintf ( stderr , ""NAME=(%s)\\n"" , tok )"		6111009	0					
ANR	6111163	IdentifierDeclType	D		6111009	0					
ANR	6111164	Identifier	fprintf		6111009	1					
ANR	6111165	Expression	"stderr , ""NAME=(%s)\\n"" , tok"		6111009	2					
ANR	6111166	Identifier	stderr		6111009	0					
ANR	6111167	Expression	"""NAME=(%s)\\n"" , tok"		6111009	1					
ANR	6111168	PrimaryExpression	"""NAME=(%s)\\n"""		6111009	0					
ANR	6111169	Identifier	tok		6111009	1					
ANR	6111170	IfStatement	"if ( ( ! tags [ i ] . name ) || ( ! strcmp ( buf , tags [ i ] . name ) ) )"		6111009	1					
ANR	6111171	Condition	"( ! tags [ i ] . name ) || ( ! strcmp ( buf , tags [ i ] . name ) )"	33:6:651:698	6111009	0	True				
ANR	6111172	OrExpression	"( ! tags [ i ] . name ) || ( ! strcmp ( buf , tags [ i ] . name ) )"		6111009	0		||			
ANR	6111173	UnaryOperationExpression	! tags [ i ] . name		6111009	0					
ANR	6111174	UnaryOperator	!		6111009	0					
ANR	6111175	MemberAccess	tags [ i ] . name		6111009	1					
ANR	6111176	ArrayIndexing	tags [ i ]		6111009	0					
ANR	6111177	Identifier	tags		6111009	0					
ANR	6111178	Identifier	i		6111009	1					
ANR	6111179	Identifier	name		6111009	1					
ANR	6111180	UnaryOperationExpression	"! strcmp ( buf , tags [ i ] . name )"		6111009	1					
ANR	6111181	UnaryOperator	!		6111009	0					
ANR	6111182	CallExpression	"strcmp ( buf , tags [ i ] . name )"		6111009	1					
ANR	6111183	Callee	strcmp		6111009	0					
ANR	6111184	Identifier	strcmp		6111009	0					
ANR	6111185	ArgumentList	buf		6111009	1					
ANR	6111186	Argument	buf		6111009	0					
ANR	6111187	Identifier	buf		6111009	0					
ANR	6111188	Argument	tags [ i ] . name		6111009	1					
ANR	6111189	MemberAccess	tags [ i ] . name		6111009	0					
ANR	6111190	ArrayIndexing	tags [ i ]		6111009	0					
ANR	6111191	Identifier	tags		6111009	0					
ANR	6111192	Identifier	i		6111009	1					
ANR	6111193	Identifier	name		6111009	1					
ANR	6111194	CompoundStatement		27:56:543:543	6111009	1					
ANR	6111195	IfStatement	if ( out -> fout )		6111009	0					
ANR	6111196	Condition	out -> fout	34:7:710:718	6111009	0	True				
ANR	6111197	PtrMemberAccess	out -> fout		6111009	0					
ANR	6111198	Identifier	out		6111009	0					
ANR	6111199	Identifier	fout		6111009	1					
ANR	6111200	CompoundStatement		28:18:563:563	6111009	1					
ANR	6111201	ExpressionStatement	fflush ( out -> fout )	35:4:727:745	6111009	0	True				
ANR	6111202	CallExpression	fflush ( out -> fout )		6111009	0					
ANR	6111203	Callee	fflush		6111009	0					
ANR	6111204	Identifier	fflush		6111009	0					
ANR	6111205	ArgumentList	out -> fout		6111009	1					
ANR	6111206	Argument	out -> fout		6111009	0					
ANR	6111207	PtrMemberAccess	out -> fout		6111009	0					
ANR	6111208	Identifier	out		6111009	0					
ANR	6111209	Identifier	fout		6111009	1					
ANR	6111210	ExpressionStatement	"ret = tags [ i ] . callback ( & proc -> state , out , tok )"	37:3:755:802	6111009	1	True				
ANR	6111211	AssignmentExpression	"ret = tags [ i ] . callback ( & proc -> state , out , tok )"		6111009	0		=			
ANR	6111212	Identifier	ret		6111009	0					
ANR	6111213	CallExpression	"tags [ i ] . callback ( & proc -> state , out , tok )"		6111009	1					
ANR	6111214	Callee	tags [ i ] . callback		6111009	0					
ANR	6111215	MemberAccess	tags [ i ] . callback		6111009	0					
ANR	6111216	ArrayIndexing	tags [ i ]		6111009	0					
ANR	6111217	Identifier	tags		6111009	0					
ANR	6111218	Identifier	i		6111009	1					
ANR	6111219	Identifier	callback		6111009	1					
ANR	6111220	ArgumentList	& proc -> state		6111009	1					
ANR	6111221	Argument	& proc -> state		6111009	0					
ANR	6111222	UnaryOperationExpression	& proc -> state		6111009	0					
ANR	6111223	UnaryOperator	&		6111009	0					
ANR	6111224	PtrMemberAccess	proc -> state		6111009	1					
ANR	6111225	Identifier	proc		6111009	0					
ANR	6111226	Identifier	state		6111009	1					
ANR	6111227	Argument	out		6111009	1					
ANR	6111228	Identifier	out		6111009	0					
ANR	6111229	Argument	tok		6111009	2					
ANR	6111230	Identifier	tok		6111009	0					
ANR	6111231	ExpressionStatement	proc -> state . ifl += ret	38:3:807:829	6111009	2	True				
ANR	6111232	AssignmentExpression	proc -> state . ifl += ret		6111009	0		+=			
ANR	6111233	MemberAccess	proc -> state . ifl		6111009	0					
ANR	6111234	PtrMemberAccess	proc -> state		6111009	0					
ANR	6111235	Identifier	proc		6111009	0					
ANR	6111236	Identifier	state		6111009	1					
ANR	6111237	Identifier	ifl		6111009	1					
ANR	6111238	Identifier	ret		6111009	1					
ANR	6111239	IfStatement	if ( ret == - 1 )		6111009	3					
ANR	6111240	Condition	ret == - 1	39:7:838:846	6111009	0	True				
ANR	6111241	EqualityExpression	ret == - 1		6111009	0		==			
ANR	6111242	Identifier	ret		6111009	0					
ANR	6111243	UnaryOperationExpression	- 1		6111009	1					
ANR	6111244	UnaryOperator	-		6111009	0					
ANR	6111245	PrimaryExpression	1		6111009	1					
ANR	6111246	CompoundStatement		33:18:691:691	6111009	1					
ANR	6111247	BreakStatement	break ;	40:4:855:860	6111009	0	True				
ANR	6111248	IfStatement	if ( ret )		6111009	4					
ANR	6111249	Condition	ret	42:7:874:876	6111009	0	True				
ANR	6111250	Identifier	ret		6111009	0					
ANR	6111251	CompoundStatement		36:12:721:721	6111009	1					
ANR	6111252	IfStatement	if ( proc -> state . ifl < 0 || proc -> state . ifl >= MAXIFL )		6111009	0					
ANR	6111253	Condition	proc -> state . ifl < 0 || proc -> state . ifl >= MAXIFL	43:8:889:936	6111009	0	True				
ANR	6111254	OrExpression	proc -> state . ifl < 0 || proc -> state . ifl >= MAXIFL		6111009	0		||			
ANR	6111255	RelationalExpression	proc -> state . ifl < 0		6111009	0		<			
ANR	6111256	MemberAccess	proc -> state . ifl		6111009	0					
ANR	6111257	PtrMemberAccess	proc -> state		6111009	0					
ANR	6111258	Identifier	proc		6111009	0					
ANR	6111259	Identifier	state		6111009	1					
ANR	6111260	Identifier	ifl		6111009	1					
ANR	6111261	PrimaryExpression	0		6111009	1					
ANR	6111262	RelationalExpression	proc -> state . ifl >= MAXIFL		6111009	1		>=			
ANR	6111263	MemberAccess	proc -> state . ifl		6111009	0					
ANR	6111264	PtrMemberAccess	proc -> state		6111009	0					
ANR	6111265	Identifier	proc		6111009	0					
ANR	6111266	Identifier	state		6111009	1					
ANR	6111267	Identifier	ifl		6111009	1					
ANR	6111268	Identifier	MAXIFL		6111009	1					
ANR	6111269	CompoundStatement		37:58:781:781	6111009	1					
ANR	6111270	ExpressionStatement	"fprintf ( stderr , ""Nested conditionals parsing error.\\n"" )"	44:5:946:1002	6111009	0	True				
ANR	6111271	CallExpression	"fprintf ( stderr , ""Nested conditionals parsing error.\\n"" )"		6111009	0					
ANR	6111272	Callee	fprintf		6111009	0					
ANR	6111273	Identifier	fprintf		6111009	0					
ANR	6111274	ArgumentList	stderr		6111009	1					
ANR	6111275	Argument	stderr		6111009	0					
ANR	6111276	Identifier	stderr		6111009	0					
ANR	6111277	Argument	"""Nested conditionals parsing error.\\n"""		6111009	1					
ANR	6111278	PrimaryExpression	"""Nested conditionals parsing error.\\n"""		6111009	0					
ANR	6111279	BreakStatement	break ;	45:5:1009:1014	6111009	1	True				
ANR	6111280	BreakStatement	break ;	48:3:1030:1035	6111009	5	True				
ANR	6111281	ReturnStatement	return ret ;	51:1:1045:1055	6111009	6	True				
ANR	6111282	Identifier	ret		6111009	0					
ANR	6111283	ReturnType	S_API int		6111009	1					
ANR	6111284	Identifier	spp_run		6111009	2					
ANR	6111285	ParameterList	"char * buf , Output * out"		6111009	3					
ANR	6111286	Parameter	char * buf	7:18:133:141	6111009	0	True				
ANR	6111287	ParameterType	char *		6111009	0					
ANR	6111288	Identifier	buf		6111009	1					
ANR	6111289	Parameter	Output * out	7:29:144:154	6111009	1	True				
ANR	6111290	ParameterType	Output *		6111009	0					
ANR	6111291	Identifier	out		6111009	1					
ANR	6111292	CFGEntryNode	ENTRY		6111009		True				
ANR	6111293	CFGExitNode	EXIT		6111009		True				
ANR	6111294	Symbol	proc -> token		6111009						
ANR	6111295	Symbol	out		6111009						
ANR	6111296	Symbol	tok		6111009						
ANR	6111297	Symbol	strlen		6111009						
ANR	6111298	Symbol	tags [ i ] . callback		6111009						
ANR	6111299	Symbol	buflen		6111009						
ANR	6111300	Symbol	ret		6111009						
ANR	6111301	Symbol	strcmp		6111009						
ANR	6111302	Symbol	proc		6111009						
ANR	6111303	Symbol	* buf		6111009						
ANR	6111304	Symbol	proc -> state		6111009						
ANR	6111305	Symbol	& proc -> state		6111009						
ANR	6111306	Symbol	proc -> state . ifl		6111009						
ANR	6111307	Symbol	i		6111009						
ANR	6111308	Symbol	MAXIFL		6111009						
ANR	6111309	Symbol	* tags		6111009						
ANR	6111310	Symbol	stderr		6111009						
ANR	6111311	Symbol	fprintf		6111009						
ANR	6111312	Symbol	* proc		6111009						
ANR	6111313	Symbol	tags		6111009						
ANR	6111314	Symbol	proc -> chop		6111009						
ANR	6111315	Symbol	buf		6111009						
ANR	6111316	Symbol	* i		6111009						
ANR	6111317	Symbol	strstr		6111009						
ANR	6111318	Symbol	tags [ i ] . name		6111009						
ANR	6111319	Symbol	* out		6111009						
ANR	6111320	Symbol	* tok		6111009						
ANR	6111321	Symbol	out -> fout		6111009						
ANR	6111322	Symbol	IS_SPACE		6111009						
ANR	6111323	Function	spp_run_str	54:0:1060:1313							
ANR	6111324	FunctionDef	"spp_run_str (char * buf , int * rv)"		6111323	0					
ANR	6111325	CompoundStatement		54:45:1105:1313	6111323	0					
ANR	6111326	IdentifierDeclStatement	char * b ;	55:1:1108:1115	6111323	0	True				
ANR	6111327	IdentifierDecl	* b		6111323	0					
ANR	6111328	IdentifierDeclType	char *		6111323	0					
ANR	6111329	Identifier	b		6111323	1					
ANR	6111330	IdentifierDeclStatement	Output tmp ;	56:1:1118:1128	6111323	1	True				
ANR	6111331	IdentifierDecl	tmp		6111323	0					
ANR	6111332	IdentifierDeclType	Output		6111323	0					
ANR	6111333	Identifier	tmp		6111323	1					
ANR	6111334	ExpressionStatement	tmp . fout = NULL	57:1:1131:1146	6111323	2	True				
ANR	6111335	AssignmentExpression	tmp . fout = NULL		6111323	0		=			
ANR	6111336	MemberAccess	tmp . fout		6111323	0					
ANR	6111337	Identifier	tmp		6111323	0					
ANR	6111338	Identifier	fout		6111323	1					
ANR	6111339	Identifier	NULL		6111323	1					
ANR	6111340	ExpressionStatement	"tmp . cout = r_strbuf_new ( """" )"	58:1:1149:1177	6111323	3	True				
ANR	6111341	AssignmentExpression	"tmp . cout = r_strbuf_new ( """" )"		6111323	0		=			
ANR	6111342	MemberAccess	tmp . cout		6111323	0					
ANR	6111343	Identifier	tmp		6111323	0					
ANR	6111344	Identifier	cout		6111323	1					
ANR	6111345	CallExpression	"r_strbuf_new ( """" )"		6111323	1					
ANR	6111346	Callee	r_strbuf_new		6111323	0					
ANR	6111347	Identifier	r_strbuf_new		6111323	0					
ANR	6111348	ArgumentList	""""""		6111323	1					
ANR	6111349	Argument	""""""		6111323	0					
ANR	6111350	PrimaryExpression	""""""		6111323	0					
ANR	6111351	IdentifierDeclStatement	"int rc = spp_run ( buf , & tmp ) ;"	59:1:1180:1208	6111323	4	True				
ANR	6111352	IdentifierDecl	"rc = spp_run ( buf , & tmp )"		6111323	0					
ANR	6111353	IdentifierDeclType	int		6111323	0					
ANR	6111354	Identifier	rc		6111323	1					
ANR	6111355	AssignmentExpression	"rc = spp_run ( buf , & tmp )"		6111323	2		=			
ANR	6111356	Identifier	rc		6111323	0					
ANR	6111357	CallExpression	"spp_run ( buf , & tmp )"		6111323	1					
ANR	6111358	Callee	spp_run		6111323	0					
ANR	6111359	Identifier	spp_run		6111323	0					
ANR	6111360	ArgumentList	buf		6111323	1					
ANR	6111361	Argument	buf		6111323	0					
ANR	6111362	Identifier	buf		6111323	0					
ANR	6111363	Argument	& tmp		6111323	1					
ANR	6111364	UnaryOperationExpression	& tmp		6111323	0					
ANR	6111365	UnaryOperator	&		6111323	0					
ANR	6111366	Identifier	tmp		6111323	1					
ANR	6111367	ExpressionStatement	b = strdup ( r_strbuf_get ( tmp . cout ) )	60:1:1211:1247	6111323	5	True				
ANR	6111368	AssignmentExpression	b = strdup ( r_strbuf_get ( tmp . cout ) )		6111323	0		=			
ANR	6111369	Identifier	b		6111323	0					
ANR	6111370	CallExpression	strdup ( r_strbuf_get ( tmp . cout ) )		6111323	1					
ANR	6111371	Callee	strdup		6111323	0					
ANR	6111372	Identifier	strdup		6111323	0					
ANR	6111373	ArgumentList	r_strbuf_get ( tmp . cout )		6111323	1					
ANR	6111374	Argument	r_strbuf_get ( tmp . cout )		6111323	0					
ANR	6111375	CallExpression	r_strbuf_get ( tmp . cout )		6111323	0					
ANR	6111376	Callee	r_strbuf_get		6111323	0					
ANR	6111377	Identifier	r_strbuf_get		6111323	0					
ANR	6111378	ArgumentList	tmp . cout		6111323	1					
ANR	6111379	Argument	tmp . cout		6111323	0					
ANR	6111380	MemberAccess	tmp . cout		6111323	0					
ANR	6111381	Identifier	tmp		6111323	0					
ANR	6111382	Identifier	cout		6111323	1					
ANR	6111383	ExpressionStatement	r_strbuf_free ( tmp . cout )	61:1:1250:1274	6111323	6	True				
ANR	6111384	CallExpression	r_strbuf_free ( tmp . cout )		6111323	0					
ANR	6111385	Callee	r_strbuf_free		6111323	0					
ANR	6111386	Identifier	r_strbuf_free		6111323	0					
ANR	6111387	ArgumentList	tmp . cout		6111323	1					
ANR	6111388	Argument	tmp . cout		6111323	0					
ANR	6111389	MemberAccess	tmp . cout		6111323	0					
ANR	6111390	Identifier	tmp		6111323	0					
ANR	6111391	Identifier	cout		6111323	1					
ANR	6111392	IfStatement	if ( rv )		6111323	7					
ANR	6111393	Condition	rv	62:5:1281:1282	6111323	0	True				
ANR	6111394	Identifier	rv		6111323	0					
ANR	6111395	CompoundStatement		9:9:179:179	6111323	1					
ANR	6111396	ExpressionStatement	* rv = rc	63:2:1289:1297	6111323	0	True				
ANR	6111397	AssignmentExpression	* rv = rc		6111323	0		=			
ANR	6111398	UnaryOperationExpression	* rv		6111323	0					
ANR	6111399	UnaryOperator	*		6111323	0					
ANR	6111400	Identifier	rv		6111323	1					
ANR	6111401	Identifier	rc		6111323	1					
ANR	6111402	ReturnStatement	return b ;	65:1:1303:1311	6111323	8	True				
ANR	6111403	Identifier	b		6111323	0					
ANR	6111404	ReturnType	static char *		6111323	1					
ANR	6111405	Identifier	spp_run_str		6111323	2					
ANR	6111406	ParameterList	"char * buf , int * rv"		6111323	3					
ANR	6111407	Parameter	char * buf	54:25:1085:1093	6111323	0	True				
ANR	6111408	ParameterType	char *		6111323	0					
ANR	6111409	Identifier	buf		6111323	1					
ANR	6111410	Parameter	int * rv	54:36:1096:1102	6111323	1	True				
ANR	6111411	ParameterType	int *		6111323	0					
ANR	6111412	Identifier	rv		6111323	1					
ANR	6111413	CFGEntryNode	ENTRY		6111323		True				
ANR	6111414	CFGExitNode	EXIT		6111323		True				
ANR	6111415	Symbol	tmp . cout		6111323						
ANR	6111416	Symbol	b		6111323						
ANR	6111417	Symbol	NULL		6111323						
ANR	6111418	Symbol	r_strbuf_new		6111323						
ANR	6111419	Symbol	rv		6111323						
ANR	6111420	Symbol	tmp . fout		6111323						
ANR	6111421	Symbol	* rv		6111323						
ANR	6111422	Symbol	rc		6111323						
ANR	6111423	Symbol	buf		6111323						
ANR	6111424	Symbol	r_strbuf_get		6111323						
ANR	6111425	Symbol	tmp		6111323						
ANR	6111426	Symbol	& tmp		6111323						
ANR	6111427	Symbol	strdup		6111323						
ANR	6111428	Symbol	spp_run		6111323						
ANR	6111429	Function	lbuf_strcat	68:0:1316:1665							
ANR	6111430	FunctionDef	"lbuf_strcat (SppBuf * dst , char * src)"		6111429	0					
ANR	6111431	CompoundStatement		68:41:1357:1665	6111429	0					
ANR	6111432	IdentifierDeclStatement	int len = strlen ( src ) ;	69:1:1360:1382	6111429	0	True				
ANR	6111433	IdentifierDecl	len = strlen ( src )		6111429	0					
ANR	6111434	IdentifierDeclType	int		6111429	0					
ANR	6111435	Identifier	len		6111429	1					
ANR	6111436	AssignmentExpression	len = strlen ( src )		6111429	2		=			
ANR	6111437	Identifier	len		6111429	0					
ANR	6111438	CallExpression	strlen ( src )		6111429	1					
ANR	6111439	Callee	strlen		6111429	0					
ANR	6111440	Identifier	strlen		6111429	0					
ANR	6111441	ArgumentList	src		6111429	1					
ANR	6111442	Argument	src		6111429	0					
ANR	6111443	Identifier	src		6111429	0					
ANR	6111444	IdentifierDeclStatement	char * nbuf ;	70:1:1385:1395	6111429	1	True				
ANR	6111445	IdentifierDecl	* nbuf		6111429	0					
ANR	6111446	IdentifierDeclType	char *		6111429	0					
ANR	6111447	Identifier	nbuf		6111429	1					
ANR	6111448	IfStatement	if ( ! dst -> lbuf || ( len + dst -> lbuf_n ) > dst -> lbuf_s )		6111429	2					
ANR	6111449	Condition	! dst -> lbuf || ( len + dst -> lbuf_n ) > dst -> lbuf_s	71:5:1402:1448	6111429	0	True				
ANR	6111450	OrExpression	! dst -> lbuf || ( len + dst -> lbuf_n ) > dst -> lbuf_s		6111429	0		||			
ANR	6111451	UnaryOperationExpression	! dst -> lbuf		6111429	0					
ANR	6111452	UnaryOperator	!		6111429	0					
ANR	6111453	PtrMemberAccess	dst -> lbuf		6111429	1					
ANR	6111454	Identifier	dst		6111429	0					
ANR	6111455	Identifier	lbuf		6111429	1					
ANR	6111456	RelationalExpression	( len + dst -> lbuf_n ) > dst -> lbuf_s		6111429	1		>			
ANR	6111457	AdditiveExpression	len + dst -> lbuf_n		6111429	0		+			
ANR	6111458	Identifier	len		6111429	0					
ANR	6111459	PtrMemberAccess	dst -> lbuf_n		6111429	1					
ANR	6111460	Identifier	dst		6111429	0					
ANR	6111461	Identifier	lbuf_n		6111429	1					
ANR	6111462	PtrMemberAccess	dst -> lbuf_s		6111429	1					
ANR	6111463	Identifier	dst		6111429	0					
ANR	6111464	Identifier	lbuf_s		6111429	1					
ANR	6111465	CompoundStatement		4:54:93:93	6111429	1					
ANR	6111466	ExpressionStatement	"nbuf = realloc ( dst -> lbuf , dst -> lbuf_s << 1 )"	72:2:1455:1499	6111429	0	True				
ANR	6111467	AssignmentExpression	"nbuf = realloc ( dst -> lbuf , dst -> lbuf_s << 1 )"		6111429	0		=			
ANR	6111468	Identifier	nbuf		6111429	0					
ANR	6111469	CallExpression	"realloc ( dst -> lbuf , dst -> lbuf_s << 1 )"		6111429	1					
ANR	6111470	Callee	realloc		6111429	0					
ANR	6111471	Identifier	realloc		6111429	0					
ANR	6111472	ArgumentList	dst -> lbuf		6111429	1					
ANR	6111473	Argument	dst -> lbuf		6111429	0					
ANR	6111474	PtrMemberAccess	dst -> lbuf		6111429	0					
ANR	6111475	Identifier	dst		6111429	0					
ANR	6111476	Identifier	lbuf		6111429	1					
ANR	6111477	Argument	dst -> lbuf_s << 1		6111429	1					
ANR	6111478	ShiftExpression	dst -> lbuf_s << 1		6111429	0		<<			
ANR	6111479	PtrMemberAccess	dst -> lbuf_s		6111429	0					
ANR	6111480	Identifier	dst		6111429	0					
ANR	6111481	Identifier	lbuf_s		6111429	1					
ANR	6111482	PrimaryExpression	1		6111429	1					
ANR	6111483	IfStatement	if ( ! nbuf )		6111429	1					
ANR	6111484	Condition	! nbuf	73:6:1507:1511	6111429	0	True				
ANR	6111485	UnaryOperationExpression	! nbuf		6111429	0					
ANR	6111486	UnaryOperator	!		6111429	0					
ANR	6111487	Identifier	nbuf		6111429	1					
ANR	6111488	CompoundStatement		6:13:156:156	6111429	1					
ANR	6111489	ExpressionStatement	"fprintf ( stderr , ""Out of memory.\\n"" )"	74:3:1519:1555	6111429	0	True				
ANR	6111490	CallExpression	"fprintf ( stderr , ""Out of memory.\\n"" )"		6111429	0					
ANR	6111491	Callee	fprintf		6111429	0					
ANR	6111492	Identifier	fprintf		6111429	0					
ANR	6111493	ArgumentList	stderr		6111429	1					
ANR	6111494	Argument	stderr		6111429	0					
ANR	6111495	Identifier	stderr		6111429	0					
ANR	6111496	Argument	"""Out of memory.\\n"""		6111429	1					
ANR	6111497	PrimaryExpression	"""Out of memory.\\n"""		6111429	0					
ANR	6111498	ReturnStatement	return ;	75:3:1560:1566	6111429	1	True				
ANR	6111499	ExpressionStatement	dst -> lbuf = nbuf	77:2:1574:1590	6111429	2	True				
ANR	6111500	AssignmentExpression	dst -> lbuf = nbuf		6111429	0		=			
ANR	6111501	PtrMemberAccess	dst -> lbuf		6111429	0					
ANR	6111502	Identifier	dst		6111429	0					
ANR	6111503	Identifier	lbuf		6111429	1					
ANR	6111504	Identifier	nbuf		6111429	1					
ANR	6111505	ExpressionStatement	"memcpy ( dst -> lbuf + dst -> lbuf_n , src , len + 1 )"	79:1:1596:1642	6111429	3	True				
ANR	6111506	CallExpression	"memcpy ( dst -> lbuf + dst -> lbuf_n , src , len + 1 )"		6111429	0					
ANR	6111507	Callee	memcpy		6111429	0					
ANR	6111508	Identifier	memcpy		6111429	0					
ANR	6111509	ArgumentList	dst -> lbuf + dst -> lbuf_n		6111429	1					
ANR	6111510	Argument	dst -> lbuf + dst -> lbuf_n		6111429	0					
ANR	6111511	AdditiveExpression	dst -> lbuf + dst -> lbuf_n		6111429	0		+			
ANR	6111512	PtrMemberAccess	dst -> lbuf		6111429	0					
ANR	6111513	Identifier	dst		6111429	0					
ANR	6111514	Identifier	lbuf		6111429	1					
ANR	6111515	PtrMemberAccess	dst -> lbuf_n		6111429	1					
ANR	6111516	Identifier	dst		6111429	0					
ANR	6111517	Identifier	lbuf_n		6111429	1					
ANR	6111518	Argument	src		6111429	1					
ANR	6111519	Identifier	src		6111429	0					
ANR	6111520	Argument	len + 1		6111429	2					
ANR	6111521	AdditiveExpression	len + 1		6111429	0		+			
ANR	6111522	Identifier	len		6111429	0					
ANR	6111523	PrimaryExpression	1		6111429	1					
ANR	6111524	ExpressionStatement	dst -> lbuf_n += len	80:1:1645:1663	6111429	4	True				
ANR	6111525	AssignmentExpression	dst -> lbuf_n += len		6111429	0		+=			
ANR	6111526	PtrMemberAccess	dst -> lbuf_n		6111429	0					
ANR	6111527	Identifier	dst		6111429	0					
ANR	6111528	Identifier	lbuf_n		6111429	1					
ANR	6111529	Identifier	len		6111429	1					
ANR	6111530	ReturnType	void		6111429	1					
ANR	6111531	Identifier	lbuf_strcat		6111429	2					
ANR	6111532	ParameterList	"SppBuf * dst , char * src"		6111429	3					
ANR	6111533	Parameter	SppBuf * dst	68:17:1333:1343	6111429	0	True				
ANR	6111534	ParameterType	SppBuf *		6111429	0					
ANR	6111535	Identifier	dst		6111429	1					
ANR	6111536	Parameter	char * src	68:30:1346:1354	6111429	1	True				
ANR	6111537	ParameterType	char *		6111429	0					
ANR	6111538	Identifier	src		6111429	1					
ANR	6111539	CFGEntryNode	ENTRY		6111429		True				
ANR	6111540	CFGExitNode	EXIT		6111429		True				
ANR	6111541	Symbol	* dst		6111429						
ANR	6111542	Symbol	strlen		6111429						
ANR	6111543	Symbol	dst -> lbuf_n		6111429						
ANR	6111544	Symbol	dst		6111429						
ANR	6111545	Symbol	len		6111429						
ANR	6111546	Symbol	src		6111429						
ANR	6111547	Symbol	nbuf		6111429						
ANR	6111548	Symbol	dst -> lbuf_s		6111429						
ANR	6111549	Symbol	realloc		6111429						
ANR	6111550	Symbol	stderr		6111429						
ANR	6111551	Symbol	dst -> lbuf		6111429						
ANR	6111552	Function	do_fputs	83:0:1668:1998							
ANR	6111553	FunctionDef	"do_fputs (Output * out , char * str)"		6111552	0					
ANR	6111554	CompoundStatement		83:37:1705:1998	6111552	0					
ANR	6111555	IdentifierDeclStatement	int i ;	84:1:1708:1713	6111552	0	True				
ANR	6111556	IdentifierDecl	i		6111552	0					
ANR	6111557	IdentifierDeclType	int		6111552	0					
ANR	6111558	Identifier	i		6111552	1					
ANR	6111559	IdentifierDeclStatement	int printed = 0 ;	85:1:1716:1731	6111552	1	True				
ANR	6111560	IdentifierDecl	printed = 0		6111552	0					
ANR	6111561	IdentifierDeclType	int		6111552	0					
ANR	6111562	Identifier	printed		6111552	1					
ANR	6111563	AssignmentExpression	printed = 0		6111552	2		=			
ANR	6111564	Identifier	printed		6111552	0					
ANR	6111565	PrimaryExpression	0		6111552	1					
ANR	6111566	ForStatement	for ( i = 0 ; i <= proc -> state . ifl ; i ++ )		6111552	2					
ANR	6111567	ForInit	i = 0 ;	86:6:1739:1744	6111552	0	True				
ANR	6111568	AssignmentExpression	i = 0		6111552	0		=			
ANR	6111569	Identifier	i		6111552	0					
ANR	6111570	PrimaryExpression	0		6111552	1					
ANR	6111571	Condition	i <= proc -> state . ifl	86:13:1746:1765	6111552	1	True				
ANR	6111572	RelationalExpression	i <= proc -> state . ifl		6111552	0		<=			
ANR	6111573	Identifier	i		6111552	0					
ANR	6111574	MemberAccess	proc -> state . ifl		6111552	1					
ANR	6111575	PtrMemberAccess	proc -> state		6111552	0					
ANR	6111576	Identifier	proc		6111552	0					
ANR	6111577	Identifier	state		6111552	1					
ANR	6111578	Identifier	ifl		6111552	1					
ANR	6111579	PostIncDecOperationExpression	i ++	86:35:1768:1770	6111552	2	True				
ANR	6111580	Identifier	i		6111552	0					
ANR	6111581	IncDec	++		6111552	1					
ANR	6111582	CompoundStatement		4:40:67:67	6111552	3					
ANR	6111583	IfStatement	if ( ! proc -> state . echo [ i ] )		6111552	0					
ANR	6111584	Condition	! proc -> state . echo [ i ]	87:6:1781:1800	6111552	0	True				
ANR	6111585	UnaryOperationExpression	! proc -> state . echo [ i ]		6111552	0					
ANR	6111586	UnaryOperator	!		6111552	0					
ANR	6111587	ArrayIndexing	proc -> state . echo [ i ]		6111552	1					
ANR	6111588	MemberAccess	proc -> state . echo		6111552	0					
ANR	6111589	PtrMemberAccess	proc -> state		6111552	0					
ANR	6111590	Identifier	proc		6111552	0					
ANR	6111591	Identifier	state		6111552	1					
ANR	6111592	Identifier	echo		6111552	1					
ANR	6111593	Identifier	i		6111552	1					
ANR	6111594	CompoundStatement		5:28:97:97	6111552	1					
ANR	6111595	ReturnStatement	return printed ;	88:3:1808:1822	6111552	0	True				
ANR	6111596	Identifier	printed		6111552	0					
ANR	6111597	IfStatement	if ( str [ 0 ] )		6111552	3					
ANR	6111598	Condition	str [ 0 ]	91:5:1836:1841	6111552	0	True				
ANR	6111599	ArrayIndexing	str [ 0 ]		6111552	0					
ANR	6111600	Identifier	str		6111552	0					
ANR	6111601	PrimaryExpression	0		6111552	1					
ANR	6111602	CompoundStatement		9:13:138:138	6111552	1					
ANR	6111603	ExpressionStatement	printed = 1	92:2:1848:1859	6111552	0	True				
ANR	6111604	AssignmentExpression	printed = 1		6111552	0		=			
ANR	6111605	Identifier	printed		6111552	0					
ANR	6111606	PrimaryExpression	1		6111552	1					
ANR	6111607	IfStatement	if ( proc -> fputs )		6111552	4					
ANR	6111608	Condition	proc -> fputs	94:5:1869:1879	6111552	0	True				
ANR	6111609	PtrMemberAccess	proc -> fputs		6111552	0					
ANR	6111610	Identifier	proc		6111552	0					
ANR	6111611	Identifier	fputs		6111552	1					
ANR	6111612	CompoundStatement		12:18:176:176	6111552	1					
ANR	6111613	ExpressionStatement	"proc -> fputs ( out , str )"	95:2:1886:1908	6111552	0	True				
ANR	6111614	CallExpression	"proc -> fputs ( out , str )"		6111552	0					
ANR	6111615	Callee	proc -> fputs		6111552	0					
ANR	6111616	PtrMemberAccess	proc -> fputs		6111552	0					
ANR	6111617	Identifier	proc		6111552	0					
ANR	6111618	Identifier	fputs		6111552	1					
ANR	6111619	ArgumentList	out		6111552	1					
ANR	6111620	Argument	out		6111552	0					
ANR	6111621	Identifier	out		6111552	0					
ANR	6111622	Argument	str		6111552	1					
ANR	6111623	Identifier	str		6111552	0					
ANR	6111624	ElseStatement	else		6111552	0					
ANR	6111625	CompoundStatement		14:8:212:212	6111552	0					
ANR	6111626	IfStatement	if ( out -> fout )		6111552	0					
ANR	6111627	Condition	out -> fout	97:6:1926:1934	6111552	0	True				
ANR	6111628	PtrMemberAccess	out -> fout		6111552	0					
ANR	6111629	Identifier	out		6111552	0					
ANR	6111630	Identifier	fout		6111552	1					
ANR	6111631	CompoundStatement		15:17:231:231	6111552	1					
ANR	6111632	ExpressionStatement	"fprintf ( out -> fout , ""%s"" , str )"	98:3:1942:1972	6111552	0	True				
ANR	6111633	CallExpression	"fprintf ( out -> fout , ""%s"" , str )"		6111552	0					
ANR	6111634	Callee	fprintf		6111552	0					
ANR	6111635	Identifier	fprintf		6111552	0					
ANR	6111636	ArgumentList	out -> fout		6111552	1					
ANR	6111637	Argument	out -> fout		6111552	0					
ANR	6111638	PtrMemberAccess	out -> fout		6111552	0					
ANR	6111639	Identifier	out		6111552	0					
ANR	6111640	Identifier	fout		6111552	1					
ANR	6111641	Argument	"""%s"""		6111552	1					
ANR	6111642	PrimaryExpression	"""%s"""		6111552	0					
ANR	6111643	Argument	str		6111552	2					
ANR	6111644	Identifier	str		6111552	0					
ANR	6111645	ReturnStatement	return printed ;	101:1:1982:1996	6111552	5	True				
ANR	6111646	Identifier	printed		6111552	0					
ANR	6111647	ReturnType	int		6111552	1					
ANR	6111648	Identifier	do_fputs		6111552	2					
ANR	6111649	ParameterList	"Output * out , char * str"		6111552	3					
ANR	6111650	Parameter	Output * out	83:13:1681:1691	6111552	0	True				
ANR	6111651	ParameterType	Output *		6111552	0					
ANR	6111652	Identifier	out		6111552	1					
ANR	6111653	Parameter	char * str	83:26:1694:1702	6111552	1	True				
ANR	6111654	ParameterType	char *		6111552	0					
ANR	6111655	Identifier	str		6111552	1					
ANR	6111656	CFGEntryNode	ENTRY		6111552		True				
ANR	6111657	CFGExitNode	EXIT		6111552		True				
ANR	6111658	Symbol	proc		6111552						
ANR	6111659	Symbol	proc -> state		6111552						
ANR	6111660	Symbol	* proc -> state . echo		6111552						
ANR	6111661	Symbol	proc -> state . ifl		6111552						
ANR	6111662	Symbol	i		6111552						
ANR	6111663	Symbol	out		6111552						
ANR	6111664	Symbol	* proc		6111552						
ANR	6111665	Symbol	str		6111552						
ANR	6111666	Symbol	printed		6111552						
ANR	6111667	Symbol	* i		6111552						
ANR	6111668	Symbol	proc -> state . echo		6111552						
ANR	6111669	Symbol	* proc -> state		6111552						
ANR	6111670	Symbol	proc -> fputs		6111552						
ANR	6111671	Symbol	* out		6111552						
ANR	6111672	Symbol	* * proc		6111552						
ANR	6111673	Symbol	* str		6111552						
ANR	6111674	Symbol	out -> fout		6111552						
ANR	6111675	Function	spp_eval	104:0:2001:4542							
ANR	6111676	FunctionDef	"spp_eval (char * buf , Output * out)"		6111675	0					
ANR	6111677	CompoundStatement		104:44:2045:4542	6111675	0					
ANR	6111678	IdentifierDeclStatement	"char * ptr , * ptr2 ;"	105:1:2048:2064	6111675	0	True				
ANR	6111679	IdentifierDecl	* ptr		6111675	0					
ANR	6111680	IdentifierDeclType	char *		6111675	0					
ANR	6111681	Identifier	ptr		6111675	1					
ANR	6111682	IdentifierDecl	* ptr2		6111675	1					
ANR	6111683	IdentifierDeclType	char *		6111675	0					
ANR	6111684	Identifier	ptr2		6111675	1					
ANR	6111685	IdentifierDeclStatement	char * ptrr = NULL ;	106:1:2067:2084	6111675	1	True				
ANR	6111686	IdentifierDecl	* ptrr = NULL		6111675	0					
ANR	6111687	IdentifierDeclType	char *		6111675	0					
ANR	6111688	Identifier	ptrr		6111675	1					
ANR	6111689	AssignmentExpression	* ptrr = NULL		6111675	2		=			
ANR	6111690	Identifier	NULL		6111675	0					
ANR	6111691	Identifier	NULL		6111675	1					
ANR	6111692	IdentifierDeclStatement	int delta ;	107:1:2087:2096	6111675	2	True				
ANR	6111693	IdentifierDecl	delta		6111675	0					
ANR	6111694	IdentifierDeclType	int		6111675	0					
ANR	6111695	Identifier	delta		6111675	1					
ANR	6111696	IdentifierDeclStatement	int printed = 0 ;	108:1:2099:2114	6111675	3	True				
ANR	6111697	IdentifierDecl	printed = 0		6111675	0					
ANR	6111698	IdentifierDeclType	int		6111675	0					
ANR	6111699	Identifier	printed		6111675	1					
ANR	6111700	AssignmentExpression	printed = 0		6111675	2		=			
ANR	6111701	Identifier	printed		6111675	0					
ANR	6111702	PrimaryExpression	0		6111675	1					
ANR	6111703	Label	retry :	109:0:2116:2121	6111675	4	True				
ANR	6111704	Identifier	retry		6111675	0					
ANR	6111705	IfStatement	if ( ! proc -> tag_pre && proc -> token )		6111675	5					
ANR	6111706	Condition	! proc -> tag_pre && proc -> token	111:5:2144:2172	6111675	0	True				
ANR	6111707	AndExpression	! proc -> tag_pre && proc -> token		6111675	0		&&			
ANR	6111708	UnaryOperationExpression	! proc -> tag_pre		6111675	0					
ANR	6111709	UnaryOperator	!		6111675	0					
ANR	6111710	PtrMemberAccess	proc -> tag_pre		6111675	1					
ANR	6111711	Identifier	proc		6111675	0					
ANR	6111712	Identifier	tag_pre		6111675	1					
ANR	6111713	PtrMemberAccess	proc -> token		6111675	1					
ANR	6111714	Identifier	proc		6111675	0					
ANR	6111715	Identifier	token		6111675	1					
ANR	6111716	CompoundStatement		8:36:129:129	6111675	1					
ANR	6111717	DoStatement	do		6111675	0					
ANR	6111718	CompoundStatement		9:5:136:136	6111675	0					
ANR	6111719	ExpressionStatement	"ptr = strstr ( buf , proc -> token )"	113:3:2187:2218	6111675	0	True				
ANR	6111720	AssignmentExpression	"ptr = strstr ( buf , proc -> token )"		6111675	0		=			
ANR	6111721	Identifier	ptr		6111675	0					
ANR	6111722	CallExpression	"strstr ( buf , proc -> token )"		6111675	1					
ANR	6111723	Callee	strstr		6111675	0					
ANR	6111724	Identifier	strstr		6111675	0					
ANR	6111725	ArgumentList	buf		6111675	1					
ANR	6111726	Argument	buf		6111675	0					
ANR	6111727	Identifier	buf		6111675	0					
ANR	6111728	Argument	proc -> token		6111675	1					
ANR	6111729	PtrMemberAccess	proc -> token		6111675	0					
ANR	6111730	Identifier	proc		6111675	0					
ANR	6111731	Identifier	token		6111675	1					
ANR	6111732	IfStatement	if ( ptr )		6111675	1					
ANR	6111733	Condition	ptr	114:7:2227:2229	6111675	0	True				
ANR	6111734	Identifier	ptr		6111675	0					
ANR	6111735	CompoundStatement		11:12:186:186	6111675	1					
ANR	6111736	ExpressionStatement	* ptr = '\\0'	115:4:2238:2249	6111675	0	True				
ANR	6111737	AssignmentExpression	* ptr = '\\0'		6111675	0		=			
ANR	6111738	UnaryOperationExpression	* ptr		6111675	0					
ANR	6111739	UnaryOperator	*		6111675	0					
ANR	6111740	Identifier	ptr		6111675	1					
ANR	6111741	PrimaryExpression	'\\0'		6111675	1					
ANR	6111742	ExpressionStatement	delta = strlen ( buf ) - 1	117:3:2259:2283	6111675	2	True				
ANR	6111743	AssignmentExpression	delta = strlen ( buf ) - 1		6111675	0		=			
ANR	6111744	Identifier	delta		6111675	0					
ANR	6111745	AdditiveExpression	strlen ( buf ) - 1		6111675	1		-			
ANR	6111746	CallExpression	strlen ( buf )		6111675	0					
ANR	6111747	Callee	strlen		6111675	0					
ANR	6111748	Identifier	strlen		6111675	0					
ANR	6111749	ArgumentList	buf		6111675	1					
ANR	6111750	Argument	buf		6111675	0					
ANR	6111751	Identifier	buf		6111675	0					
ANR	6111752	PrimaryExpression	1		6111675	1					
ANR	6111753	IfStatement	if ( buf [ delta ] == '\\n' )		6111675	3					
ANR	6111754	Condition	buf [ delta ] == '\\n'	118:7:2292:2309	6111675	0	True				
ANR	6111755	EqualityExpression	buf [ delta ] == '\\n'		6111675	0		==			
ANR	6111756	ArrayIndexing	buf [ delta ]		6111675	0					
ANR	6111757	Identifier	buf		6111675	0					
ANR	6111758	Identifier	delta		6111675	1					
ANR	6111759	PrimaryExpression	'\\n'		6111675	1					
ANR	6111760	CompoundStatement		15:27:266:266	6111675	1					
ANR	6111761	ExpressionStatement	buf [ delta ] = '\\0'	119:4:2318:2335	6111675	0	True				
ANR	6111762	AssignmentExpression	buf [ delta ] = '\\0'		6111675	0		=			
ANR	6111763	ArrayIndexing	buf [ delta ]		6111675	0					
ANR	6111764	Identifier	buf		6111675	0					
ANR	6111765	Identifier	delta		6111675	1					
ANR	6111766	PrimaryExpression	'\\0'		6111675	1					
ANR	6111767	IfStatement	if ( * buf )		6111675	4					
ANR	6111768	Condition	* buf	121:7:2349:2352	6111675	0	True				
ANR	6111769	UnaryOperationExpression	* buf		6111675	0					
ANR	6111770	UnaryOperator	*		6111675	0					
ANR	6111771	Identifier	buf		6111675	1					
ANR	6111772	CompoundStatement		18:13:309:309	6111675	1					
ANR	6111773	ExpressionStatement	"spp_run ( buf , out )"	122:4:2361:2379	6111675	0	True				
ANR	6111774	CallExpression	"spp_run ( buf , out )"		6111675	0					
ANR	6111775	Callee	spp_run		6111675	0					
ANR	6111776	Identifier	spp_run		6111675	0					
ANR	6111777	ArgumentList	buf		6111675	1					
ANR	6111778	Argument	buf		6111675	0					
ANR	6111779	Identifier	buf		6111675	0					
ANR	6111780	Argument	out		6111675	1					
ANR	6111781	Identifier	out		6111675	0					
ANR	6111782	ExpressionStatement	buf = ptr + 1	124:3:2389:2402	6111675	5	True				
ANR	6111783	AssignmentExpression	buf = ptr + 1		6111675	0		=			
ANR	6111784	Identifier	buf		6111675	0					
ANR	6111785	AdditiveExpression	ptr + 1		6111675	1		+			
ANR	6111786	Identifier	ptr		6111675	0					
ANR	6111787	PrimaryExpression	1		6111675	1					
ANR	6111788	Condition	ptr	125:11:2415:2417	6111675	1	True				
ANR	6111789	Identifier	ptr		6111675	0					
ANR	6111790	ReturnStatement	return ;	126:2:2423:2429	6111675	1	True				
ANR	6111791	IfStatement	if ( ! proc -> tag_post )		6111675	6					
ANR	6111792	Condition	! proc -> tag_post	129:5:2440:2454	6111675	0	True				
ANR	6111793	UnaryOperationExpression	! proc -> tag_post		6111675	0					
ANR	6111794	UnaryOperator	!		6111675	0					
ANR	6111795	PtrMemberAccess	proc -> tag_post		6111675	1					
ANR	6111796	Identifier	proc		6111675	0					
ANR	6111797	Identifier	tag_post		6111675	1					
ANR	6111798	CompoundStatement		26:22:411:411	6111675	1					
ANR	6111799	ReturnStatement	return ;	131:2:2492:2498	6111675	0	True				
ANR	6111800	ExpressionStatement	delta = strlen ( proc -> tag_post )	135:1:2531:2562	6111675	7	True				
ANR	6111801	AssignmentExpression	delta = strlen ( proc -> tag_post )		6111675	0		=			
ANR	6111802	Identifier	delta		6111675	0					
ANR	6111803	CallExpression	strlen ( proc -> tag_post )		6111675	1					
ANR	6111804	Callee	strlen		6111675	0					
ANR	6111805	Identifier	strlen		6111675	0					
ANR	6111806	ArgumentList	proc -> tag_post		6111675	1					
ANR	6111807	Argument	proc -> tag_post		6111675	0					
ANR	6111808	PtrMemberAccess	proc -> tag_post		6111675	0					
ANR	6111809	Identifier	proc		6111675	0					
ANR	6111810	Identifier	tag_post		6111675	1					
ANR	6111811	ExpressionStatement	"ptr = proc -> tag_pre ? strstr ( buf , proc -> tag_pre ) : NULL"	138:1:2583:2637	6111675	8	True				
ANR	6111812	AssignmentExpression	"ptr = proc -> tag_pre ? strstr ( buf , proc -> tag_pre ) : NULL"		6111675	0		=			
ANR	6111813	Identifier	ptr		6111675	0					
ANR	6111814	ConditionalExpression	"proc -> tag_pre ? strstr ( buf , proc -> tag_pre ) : NULL"		6111675	1					
ANR	6111815	Condition	proc -> tag_pre		6111675	0					
ANR	6111816	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6111817	Identifier	proc		6111675	0					
ANR	6111818	Identifier	tag_pre		6111675	1					
ANR	6111819	CallExpression	"strstr ( buf , proc -> tag_pre )"		6111675	1					
ANR	6111820	Callee	strstr		6111675	0					
ANR	6111821	Identifier	strstr		6111675	0					
ANR	6111822	ArgumentList	buf		6111675	1					
ANR	6111823	Argument	buf		6111675	0					
ANR	6111824	Identifier	buf		6111675	0					
ANR	6111825	Argument	proc -> tag_pre		6111675	1					
ANR	6111826	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6111827	Identifier	proc		6111675	0					
ANR	6111828	Identifier	tag_pre		6111675	1					
ANR	6111829	Identifier	NULL		6111675	2					
ANR	6111830	IfStatement	if ( ptr )		6111675	9					
ANR	6111831	Condition	ptr	139:5:2644:2646	6111675	0	True				
ANR	6111832	Identifier	ptr		6111675	0					
ANR	6111833	CompoundStatement		37:2:607:639	6111675	1					
ANR	6111834	IdentifierDeclStatement	"D printf ( ""==> 0.0 (%s)\\n"" , ptr ) ;"	140:2:2653:2685	6111675	0	True				
ANR	6111835	IdentifierDecl	"printf ( ""==> 0.0 (%s)\\n"" , ptr )"		6111675	0					
ANR	6111836	IdentifierDeclType	D		6111675	0					
ANR	6111837	Identifier	printf		6111675	1					
ANR	6111838	Expression	"""==> 0.0 (%s)\\n"" , ptr"		6111675	2					
ANR	6111839	PrimaryExpression	"""==> 0.0 (%s)\\n"""		6111675	0					
ANR	6111840	Identifier	ptr		6111675	1					
ANR	6111841	IfStatement	if ( ! proc -> tag_begin || ( proc -> tag_begin && ptr == buf ) )		6111675	1					
ANR	6111842	Condition	! proc -> tag_begin || ( proc -> tag_begin && ptr == buf )	141:6:2693:2743	6111675	0	True				
ANR	6111843	OrExpression	! proc -> tag_begin || ( proc -> tag_begin && ptr == buf )		6111675	0		||			
ANR	6111844	UnaryOperationExpression	! proc -> tag_begin		6111675	0					
ANR	6111845	UnaryOperator	!		6111675	0					
ANR	6111846	PtrMemberAccess	proc -> tag_begin		6111675	1					
ANR	6111847	Identifier	proc		6111675	0					
ANR	6111848	Identifier	tag_begin		6111675	1					
ANR	6111849	AndExpression	proc -> tag_begin && ptr == buf		6111675	1		&&			
ANR	6111850	PtrMemberAccess	proc -> tag_begin		6111675	0					
ANR	6111851	Identifier	proc		6111675	0					
ANR	6111852	Identifier	tag_begin		6111675	1					
ANR	6111853	EqualityExpression	ptr == buf		6111675	1		==			
ANR	6111854	Identifier	ptr		6111675	0					
ANR	6111855	Identifier	buf		6111675	1					
ANR	6111856	CompoundStatement		44:3:812:842	6111675	1					
ANR	6111857	ExpressionStatement	* ptr = '\\0'	142:3:2751:2762	6111675	0	True				
ANR	6111858	AssignmentExpression	* ptr = '\\0'		6111675	0		=			
ANR	6111859	UnaryOperationExpression	* ptr		6111675	0					
ANR	6111860	UnaryOperator	*		6111675	0					
ANR	6111861	Identifier	ptr		6111675	1					
ANR	6111862	PrimaryExpression	'\\0'		6111675	1					
ANR	6111863	ExpressionStatement	ptr = ptr + strlen ( proc -> tag_pre )	143:3:2767:2801	6111675	1	True				
ANR	6111864	AssignmentExpression	ptr = ptr + strlen ( proc -> tag_pre )		6111675	0		=			
ANR	6111865	Identifier	ptr		6111675	0					
ANR	6111866	AdditiveExpression	ptr + strlen ( proc -> tag_pre )		6111675	1		+			
ANR	6111867	Identifier	ptr		6111675	0					
ANR	6111868	CallExpression	strlen ( proc -> tag_pre )		6111675	1					
ANR	6111869	Callee	strlen		6111675	0					
ANR	6111870	Identifier	strlen		6111675	0					
ANR	6111871	ArgumentList	proc -> tag_pre		6111675	1					
ANR	6111872	Argument	proc -> tag_pre		6111675	0					
ANR	6111873	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6111874	Identifier	proc		6111675	0					
ANR	6111875	Identifier	tag_pre		6111675	1					
ANR	6111876	IfStatement	"if ( do_fputs ( out , buf ) )"		6111675	2					
ANR	6111877	Condition	"do_fputs ( out , buf )"	144:7:2810:2828	6111675	0	True				
ANR	6111878	CallExpression	"do_fputs ( out , buf )"		6111675	0					
ANR	6111879	Callee	do_fputs		6111675	0					
ANR	6111880	Identifier	do_fputs		6111675	0					
ANR	6111881	ArgumentList	out		6111675	1					
ANR	6111882	Argument	out		6111675	0					
ANR	6111883	Identifier	out		6111675	0					
ANR	6111884	Argument	buf		6111675	1					
ANR	6111885	Identifier	buf		6111675	0					
ANR	6111886	CompoundStatement		41:28:785:785	6111675	1					
ANR	6111887	ExpressionStatement	printed = 1	145:4:2837:2848	6111675	0	True				
ANR	6111888	AssignmentExpression	printed = 1		6111675	0		=			
ANR	6111889	Identifier	printed		6111675	0					
ANR	6111890	PrimaryExpression	1		6111675	1					
ANR	6111891	IdentifierDeclStatement	"D printf ( ""==> 0 (%s)\\n"" , ptr ) ;"	147:3:2858:2888	6111675	3	True				
ANR	6111892	IdentifierDecl	"printf ( ""==> 0 (%s)\\n"" , ptr )"		6111675	0					
ANR	6111893	IdentifierDeclType	D		6111675	0					
ANR	6111894	Identifier	printf		6111675	1					
ANR	6111895	Expression	"""==> 0 (%s)\\n"" , ptr"		6111675	2					
ANR	6111896	PrimaryExpression	"""==> 0 (%s)\\n"""		6111675	0					
ANR	6111897	Identifier	ptr		6111675	1					
ANR	6111898	ExpressionStatement	"ptrr = strstr ( ptr + strlen ( proc -> tag_pre ) , proc -> tag_pre )"	149:2:2896:2955	6111675	2	True				
ANR	6111899	AssignmentExpression	"ptrr = strstr ( ptr + strlen ( proc -> tag_pre ) , proc -> tag_pre )"		6111675	0		=			
ANR	6111900	Identifier	ptrr		6111675	0					
ANR	6111901	CallExpression	"strstr ( ptr + strlen ( proc -> tag_pre ) , proc -> tag_pre )"		6111675	1					
ANR	6111902	Callee	strstr		6111675	0					
ANR	6111903	Identifier	strstr		6111675	0					
ANR	6111904	ArgumentList	ptr + strlen ( proc -> tag_pre )		6111675	1					
ANR	6111905	Argument	ptr + strlen ( proc -> tag_pre )		6111675	0					
ANR	6111906	AdditiveExpression	ptr + strlen ( proc -> tag_pre )		6111675	0		+			
ANR	6111907	Identifier	ptr		6111675	0					
ANR	6111908	CallExpression	strlen ( proc -> tag_pre )		6111675	1					
ANR	6111909	Callee	strlen		6111675	0					
ANR	6111910	Identifier	strlen		6111675	0					
ANR	6111911	ArgumentList	proc -> tag_pre		6111675	1					
ANR	6111912	Argument	proc -> tag_pre		6111675	0					
ANR	6111913	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6111914	Identifier	proc		6111675	0					
ANR	6111915	Identifier	tag_pre		6111675	1					
ANR	6111916	Argument	proc -> tag_pre		6111675	1					
ANR	6111917	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6111918	Identifier	proc		6111675	0					
ANR	6111919	Identifier	tag_pre		6111675	1					
ANR	6111920	IfStatement	if ( ! ptr )		6111675	10					
ANR	6111921	Condition	! ptr	153:5:2984:2987	6111675	0	True				
ANR	6111922	UnaryOperationExpression	! ptr		6111675	0					
ANR	6111923	UnaryOperator	!		6111675	0					
ANR	6111924	Identifier	ptr		6111675	1					
ANR	6111925	CompoundStatement		50:11:944:944	6111675	1					
ANR	6111926	IfStatement	"if ( do_fputs ( out , buf ) )"		6111675	0					
ANR	6111927	Condition	"do_fputs ( out , buf )"	154:6:2998:3016	6111675	0	True				
ANR	6111928	CallExpression	"do_fputs ( out , buf )"		6111675	0					
ANR	6111929	Callee	do_fputs		6111675	0					
ANR	6111930	Identifier	do_fputs		6111675	0					
ANR	6111931	ArgumentList	out		6111675	1					
ANR	6111932	Argument	out		6111675	0					
ANR	6111933	Identifier	out		6111675	0					
ANR	6111934	Argument	buf		6111675	1					
ANR	6111935	Identifier	buf		6111675	0					
ANR	6111936	CompoundStatement		51:27:973:973	6111675	1					
ANR	6111937	ExpressionStatement	printed = 1	155:3:3024:3035	6111675	0	True				
ANR	6111938	AssignmentExpression	printed = 1		6111675	0		=			
ANR	6111939	Identifier	printed		6111675	0					
ANR	6111940	PrimaryExpression	1		6111675	1					
ANR	6111941	ReturnStatement	return ;	157:2:3043:3049	6111675	1	True				
ANR	6111942	ExpressionStatement	"ptr2 = strstr ( ptr , proc -> tag_post )"	159:1:3055:3090	6111675	11	True				
ANR	6111943	AssignmentExpression	"ptr2 = strstr ( ptr , proc -> tag_post )"		6111675	0		=			
ANR	6111944	Identifier	ptr2		6111675	0					
ANR	6111945	CallExpression	"strstr ( ptr , proc -> tag_post )"		6111675	1					
ANR	6111946	Callee	strstr		6111675	0					
ANR	6111947	Identifier	strstr		6111675	0					
ANR	6111948	ArgumentList	ptr		6111675	1					
ANR	6111949	Argument	ptr		6111675	0					
ANR	6111950	Identifier	ptr		6111675	0					
ANR	6111951	Argument	proc -> tag_post		6111675	1					
ANR	6111952	PtrMemberAccess	proc -> tag_post		6111675	0					
ANR	6111953	Identifier	proc		6111675	0					
ANR	6111954	Identifier	tag_post		6111675	1					
ANR	6111955	IfStatement	if ( ptr2 )		6111675	12					
ANR	6111956	Condition	ptr2	160:5:3097:3100	6111675	0	True				
ANR	6111957	Identifier	ptr2		6111675	0					
ANR	6111958	CompoundStatement		57:11:1057:1057	6111675	1					
ANR	6111959	ExpressionStatement	* ptr2 = '\\0'	161:2:3107:3119	6111675	0	True				
ANR	6111960	AssignmentExpression	* ptr2 = '\\0'		6111675	0		=			
ANR	6111961	UnaryOperationExpression	* ptr2		6111675	0					
ANR	6111962	UnaryOperator	*		6111675	0					
ANR	6111963	Identifier	ptr2		6111675	1					
ANR	6111964	PrimaryExpression	'\\0'		6111675	1					
ANR	6111965	IfStatement	if ( ptrr )		6111675	1					
ANR	6111966	Condition	ptrr	162:6:3127:3130	6111675	0	True				
ANR	6111967	Identifier	ptrr		6111675	0					
ANR	6111968	CompoundStatement		59:12:1087:1087	6111675	1					
ANR	6111969	IfStatement	if ( ptrr < ptr2 )		6111675	0					
ANR	6111970	Condition	ptrr < ptr2	163:7:3142:3152	6111675	0	True				
ANR	6111971	RelationalExpression	ptrr < ptr2		6111675	0		<			
ANR	6111972	Identifier	ptrr		6111675	0					
ANR	6111973	Identifier	ptr2		6111675	1					
ANR	6111974	CompoundStatement		71:4:1456:1498	6111675	1					
ANR	6111975	IdentifierDeclStatement	char * p = strdup ( ptr2 + 2 ) ;	164:4:3161:3188	6111675	0	True				
ANR	6111976	IdentifierDecl	* p = strdup ( ptr2 + 2 )		6111675	0					
ANR	6111977	IdentifierDeclType	char *		6111675	0					
ANR	6111978	Identifier	p		6111675	1					
ANR	6111979	AssignmentExpression	* p = strdup ( ptr2 + 2 )		6111675	2		=			
ANR	6111980	Identifier	p		6111675	0					
ANR	6111981	CallExpression	strdup ( ptr2 + 2 )		6111675	1					
ANR	6111982	Callee	strdup		6111675	0					
ANR	6111983	Identifier	strdup		6111675	0					
ANR	6111984	ArgumentList	ptr2 + 2		6111675	1					
ANR	6111985	Argument	ptr2 + 2		6111675	0					
ANR	6111986	AdditiveExpression	ptr2 + 2		6111675	0		+			
ANR	6111987	Identifier	ptr2		6111675	0					
ANR	6111988	PrimaryExpression	2		6111675	1					
ANR	6111989	IdentifierDeclStatement	"char * s = spp_run_str ( ptrr + strlen ( proc -> tag_pre ) , NULL ) ;"	165:4:3194:3253	6111675	1	True				
ANR	6111990	IdentifierDecl	"* s = spp_run_str ( ptrr + strlen ( proc -> tag_pre ) , NULL )"		6111675	0					
ANR	6111991	IdentifierDeclType	char *		6111675	0					
ANR	6111992	Identifier	s		6111675	1					
ANR	6111993	AssignmentExpression	"* s = spp_run_str ( ptrr + strlen ( proc -> tag_pre ) , NULL )"		6111675	2		=			
ANR	6111994	Identifier	s		6111675	0					
ANR	6111995	CallExpression	"spp_run_str ( ptrr + strlen ( proc -> tag_pre ) , NULL )"		6111675	1					
ANR	6111996	Callee	spp_run_str		6111675	0					
ANR	6111997	Identifier	spp_run_str		6111675	0					
ANR	6111998	ArgumentList	ptrr + strlen ( proc -> tag_pre )		6111675	1					
ANR	6111999	Argument	ptrr + strlen ( proc -> tag_pre )		6111675	0					
ANR	6112000	AdditiveExpression	ptrr + strlen ( proc -> tag_pre )		6111675	0		+			
ANR	6112001	Identifier	ptrr		6111675	0					
ANR	6112002	CallExpression	strlen ( proc -> tag_pre )		6111675	1					
ANR	6112003	Callee	strlen		6111675	0					
ANR	6112004	Identifier	strlen		6111675	0					
ANR	6112005	ArgumentList	proc -> tag_pre		6111675	1					
ANR	6112006	Argument	proc -> tag_pre		6111675	0					
ANR	6112007	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6112008	Identifier	proc		6111675	0					
ANR	6112009	Identifier	tag_pre		6111675	1					
ANR	6112010	Argument	NULL		6111675	1					
ANR	6112011	Identifier	NULL		6111675	0					
ANR	6112012	IdentifierDeclStatement	"D fprintf ( stderr , ""strcpy(%s)(%s)\\n"" , ptrr , s ) ;"	166:4:3259:3306	6111675	2	True				
ANR	6112013	IdentifierDecl	"fprintf ( stderr , ""strcpy(%s)(%s)\\n"" , ptrr , s )"		6111675	0					
ANR	6112014	IdentifierDeclType	D		6111675	0					
ANR	6112015	Identifier	fprintf		6111675	1					
ANR	6112016	Expression	"stderr , ""strcpy(%s)(%s)\\n"" , ptrr , s"		6111675	2					
ANR	6112017	Identifier	stderr		6111675	0					
ANR	6112018	Expression	"""strcpy(%s)(%s)\\n"" , ptrr , s"		6111675	1					
ANR	6112019	PrimaryExpression	"""strcpy(%s)(%s)\\n"""		6111675	0					
ANR	6112020	Expression	"ptrr , s"		6111675	1					
ANR	6112021	Identifier	ptrr		6111675	0					
ANR	6112022	Identifier	s		6111675	1					
ANR	6112023	ExpressionStatement	"strcpy ( ptrr , s )"	167:4:3312:3328	6111675	3	True				
ANR	6112024	CallExpression	"strcpy ( ptrr , s )"		6111675	0					
ANR	6112025	Callee	strcpy		6111675	0					
ANR	6112026	Identifier	strcpy		6111675	0					
ANR	6112027	ArgumentList	ptrr		6111675	1					
ANR	6112028	Argument	ptrr		6111675	0					
ANR	6112029	Identifier	ptrr		6111675	0					
ANR	6112030	Argument	s		6111675	1					
ANR	6112031	Identifier	s		6111675	0					
ANR	6112032	ExpressionStatement	free ( s )	168:4:3334:3342	6111675	4	True				
ANR	6112033	CallExpression	free ( s )		6111675	0					
ANR	6112034	Callee	free		6111675	0					
ANR	6112035	Identifier	free		6111675	0					
ANR	6112036	ArgumentList	s		6111675	1					
ANR	6112037	Argument	s		6111675	0					
ANR	6112038	Identifier	s		6111675	0					
ANR	6112039	ExpressionStatement	ptr [ - 2 ] = proc -> tag_pre [ 0 ]	169:4:3348:3374	6111675	5	True				
ANR	6112040	AssignmentExpression	ptr [ - 2 ] = proc -> tag_pre [ 0 ]		6111675	0		=			
ANR	6112041	ArrayIndexing	ptr [ - 2 ]		6111675	0					
ANR	6112042	Identifier	ptr		6111675	0					
ANR	6112043	UnaryOperationExpression	- 2		6111675	1					
ANR	6112044	UnaryOperator	-		6111675	0					
ANR	6112045	PrimaryExpression	2		6111675	1					
ANR	6112046	ArrayIndexing	proc -> tag_pre [ 0 ]		6111675	1					
ANR	6112047	PtrMemberAccess	proc -> tag_pre		6111675	0					
ANR	6112048	Identifier	proc		6111675	0					
ANR	6112049	Identifier	tag_pre		6111675	1					
ANR	6112050	PrimaryExpression	0		6111675	1					
ANR	6112051	IdentifierDeclStatement	"D fprintf ( stderr , ""strcat(%s)(%s)\\n"" , ptrr , p ) ;"	171:4:3408:3455	6111675	6	True				
ANR	6112052	IdentifierDecl	"fprintf ( stderr , ""strcat(%s)(%s)\\n"" , ptrr , p )"		6111675	0					
ANR	6112053	IdentifierDeclType	D		6111675	0					
ANR	6112054	Identifier	fprintf		6111675	1					
ANR	6112055	Expression	"stderr , ""strcat(%s)(%s)\\n"" , ptrr , p"		6111675	2					
ANR	6112056	Identifier	stderr		6111675	0					
ANR	6112057	Expression	"""strcat(%s)(%s)\\n"" , ptrr , p"		6111675	1					
ANR	6112058	PrimaryExpression	"""strcat(%s)(%s)\\n"""		6111675	0					
ANR	6112059	Expression	"ptrr , p"		6111675	1					
ANR	6112060	Identifier	ptrr		6111675	0					
ANR	6112061	Identifier	p		6111675	1					
ANR	6112062	ExpressionStatement	"strcat ( ptrr , p )"	172:4:3461:3477	6111675	7	True				
ANR	6112063	CallExpression	"strcat ( ptrr , p )"		6111675	0					
ANR	6112064	Callee	strcat		6111675	0					
ANR	6112065	Identifier	strcat		6111675	0					
ANR	6112066	ArgumentList	ptrr		6111675	1					
ANR	6112067	Argument	ptrr		6111675	0					
ANR	6112068	Identifier	ptrr		6111675	0					
ANR	6112069	Argument	p		6111675	1					
ANR	6112070	Identifier	p		6111675	0					
ANR	6112071	ExpressionStatement	buf = ptr - 2	173:4:3483:3496	6111675	8	True				
ANR	6112072	AssignmentExpression	buf = ptr - 2		6111675	0		=			
ANR	6112073	Identifier	buf		6111675	0					
ANR	6112074	AdditiveExpression	ptr - 2		6111675	1		-			
ANR	6112075	Identifier	ptr		6111675	0					
ANR	6112076	PrimaryExpression	2		6111675	1					
ANR	6112077	IdentifierDeclStatement	"D fprintf ( stderr , ""CONTINUE (%s)\\n"" , buf ) ;"	174:4:3502:3544	6111675	9	True				
ANR	6112078	IdentifierDecl	"fprintf ( stderr , ""CONTINUE (%s)\\n"" , buf )"		6111675	0					
ANR	6112079	IdentifierDeclType	D		6111675	0					
ANR	6112080	Identifier	fprintf		6111675	1					
ANR	6112081	Expression	"stderr , ""CONTINUE (%s)\\n"" , buf"		6111675	2					
ANR	6112082	Identifier	stderr		6111675	0					
ANR	6112083	Expression	"""CONTINUE (%s)\\n"" , buf"		6111675	1					
ANR	6112084	PrimaryExpression	"""CONTINUE (%s)\\n"""		6111675	0					
ANR	6112085	Identifier	buf		6111675	1					
ANR	6112086	ExpressionStatement	free ( p )	175:4:3550:3558	6111675	10	True				
ANR	6112087	CallExpression	free ( p )		6111675	0					
ANR	6112088	Callee	free		6111675	0					
ANR	6112089	Identifier	free		6111675	0					
ANR	6112090	ArgumentList	p		6111675	1					
ANR	6112091	Argument	p		6111675	0					
ANR	6112092	Identifier	p		6111675	0					
ANR	6112093	ExpressionStatement	ptrr = NULL	176:4:3564:3575	6111675	11	True				
ANR	6112094	AssignmentExpression	ptrr = NULL		6111675	0		=			
ANR	6112095	Identifier	ptrr		6111675	0					
ANR	6112096	Identifier	NULL		6111675	1					
ANR	6112097	GotoStatement	goto retry ;	177:4:3581:3591	6111675	12	True				
ANR	6112098	Identifier	retry		6111675	0					
ANR	6112099	IfStatement	if ( proc -> buf . lbuf && proc -> buf . lbuf [ 0 ] )		6111675	2					
ANR	6112100	Condition	proc -> buf . lbuf && proc -> buf . lbuf [ 0 ]	180:6:3608:3642	6111675	0	True				
ANR	6112101	AndExpression	proc -> buf . lbuf && proc -> buf . lbuf [ 0 ]		6111675	0		&&			
ANR	6112102	MemberAccess	proc -> buf . lbuf		6111675	0					
ANR	6112103	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112104	Identifier	proc		6111675	0					
ANR	6112105	Identifier	buf		6111675	1					
ANR	6112106	Identifier	lbuf		6111675	1					
ANR	6112107	ArrayIndexing	proc -> buf . lbuf [ 0 ]		6111675	1					
ANR	6112108	MemberAccess	proc -> buf . lbuf		6111675	0					
ANR	6112109	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112110	Identifier	proc		6111675	0					
ANR	6112111	Identifier	buf		6111675	1					
ANR	6112112	Identifier	lbuf		6111675	1					
ANR	6112113	PrimaryExpression	0		6111675	1					
ANR	6112114	CompoundStatement		78:3:1604:1644	6111675	1					
ANR	6112115	IdentifierDeclStatement	"D printf ( ""==> 1 (%s)\\n"" , proc -> buf . lbuf ) ;"	181:3:3650:3690	6111675	0	True				
ANR	6112116	IdentifierDecl	"printf ( ""==> 1 (%s)\\n"" , proc -> buf . lbuf )"		6111675	0					
ANR	6112117	IdentifierDeclType	D		6111675	0					
ANR	6112118	Identifier	printf		6111675	1					
ANR	6112119	Expression	"""==> 1 (%s)\\n"" , proc -> buf . lbuf"		6111675	2					
ANR	6112120	PrimaryExpression	"""==> 1 (%s)\\n"""		6111675	0					
ANR	6112121	MemberAccess	proc -> buf . lbuf		6111675	1					
ANR	6112122	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112123	Identifier	proc		6111675	0					
ANR	6112124	Identifier	buf		6111675	1					
ANR	6112125	Identifier	lbuf		6111675	1					
ANR	6112126	IfStatement	if ( ptr )		6111675	1					
ANR	6112127	Condition	ptr	182:7:3699:3701	6111675	0	True				
ANR	6112128	Identifier	ptr		6111675	0					
ANR	6112129	CompoundStatement		79:12:1658:1658	6111675	1					
ANR	6112130	ExpressionStatement	"lbuf_strcat ( & proc -> buf , buf )"	183:4:3710:3739	6111675	0	True				
ANR	6112131	CallExpression	"lbuf_strcat ( & proc -> buf , buf )"		6111675	0					
ANR	6112132	Callee	lbuf_strcat		6111675	0					
ANR	6112133	Identifier	lbuf_strcat		6111675	0					
ANR	6112134	ArgumentList	& proc -> buf		6111675	1					
ANR	6112135	Argument	& proc -> buf		6111675	0					
ANR	6112136	UnaryOperationExpression	& proc -> buf		6111675	0					
ANR	6112137	UnaryOperator	&		6111675	0					
ANR	6112138	PtrMemberAccess	proc -> buf		6111675	1					
ANR	6112139	Identifier	proc		6111675	0					
ANR	6112140	Identifier	buf		6111675	1					
ANR	6112141	Argument	buf		6111675	1					
ANR	6112142	Identifier	buf		6111675	0					
ANR	6112143	IfStatement	"if ( do_fputs ( out , buf ) )"		6111675	1					
ANR	6112144	Condition	"do_fputs ( out , buf )"	184:8:3749:3767	6111675	0	True				
ANR	6112145	CallExpression	"do_fputs ( out , buf )"		6111675	0					
ANR	6112146	Callee	do_fputs		6111675	0					
ANR	6112147	Identifier	do_fputs		6111675	0					
ANR	6112148	ArgumentList	out		6111675	1					
ANR	6112149	Argument	out		6111675	0					
ANR	6112150	Identifier	out		6111675	0					
ANR	6112151	Argument	buf		6111675	1					
ANR	6112152	Identifier	buf		6111675	0					
ANR	6112153	CompoundStatement		81:29:1724:1724	6111675	1					
ANR	6112154	ExpressionStatement	printed = 1	185:5:3777:3788	6111675	0	True				
ANR	6112155	AssignmentExpression	printed = 1		6111675	0		=			
ANR	6112156	Identifier	printed		6111675	0					
ANR	6112157	PrimaryExpression	1		6111675	1					
ANR	6112158	ExpressionStatement	"spp_run ( ptr , out )"	187:4:3800:3818	6111675	2	True				
ANR	6112159	CallExpression	"spp_run ( ptr , out )"		6111675	0					
ANR	6112160	Callee	spp_run		6111675	0					
ANR	6112161	Identifier	spp_run		6111675	0					
ANR	6112162	ArgumentList	ptr		6111675	1					
ANR	6112163	Argument	ptr		6111675	0					
ANR	6112164	Identifier	ptr		6111675	0					
ANR	6112165	Argument	out		6111675	1					
ANR	6112166	Identifier	out		6111675	0					
ANR	6112167	ElseStatement	else		6111675	0					
ANR	6112168	CompoundStatement		89:4:1923:1972	6111675	0					
ANR	6112169	ExpressionStatement	"lbuf_strcat ( & proc -> buf , buf )"	189:4:3836:3865	6111675	0	True				
ANR	6112170	CallExpression	"lbuf_strcat ( & proc -> buf , buf )"		6111675	0					
ANR	6112171	Callee	lbuf_strcat		6111675	0					
ANR	6112172	Identifier	lbuf_strcat		6111675	0					
ANR	6112173	ArgumentList	& proc -> buf		6111675	1					
ANR	6112174	Argument	& proc -> buf		6111675	0					
ANR	6112175	UnaryOperationExpression	& proc -> buf		6111675	0					
ANR	6112176	UnaryOperator	&		6111675	0					
ANR	6112177	PtrMemberAccess	proc -> buf		6111675	1					
ANR	6112178	Identifier	proc		6111675	0					
ANR	6112179	Identifier	buf		6111675	1					
ANR	6112180	Argument	buf		6111675	1					
ANR	6112181	Identifier	buf		6111675	0					
ANR	6112182	IdentifierDeclStatement	"D printf ( ""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf ) ;"	190:4:3871:3920	6111675	1	True				
ANR	6112183	IdentifierDecl	"printf ( ""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf )"		6111675	0					
ANR	6112184	IdentifierDeclType	D		6111675	0					
ANR	6112185	Identifier	printf		6111675	1					
ANR	6112186	Expression	"""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf"		6111675	2					
ANR	6112187	PrimaryExpression	"""=(1)=> spp_run(%s)\\n"""		6111675	0					
ANR	6112188	MemberAccess	proc -> buf . lbuf		6111675	1					
ANR	6112189	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112190	Identifier	proc		6111675	0					
ANR	6112191	Identifier	buf		6111675	1					
ANR	6112192	Identifier	lbuf		6111675	1					
ANR	6112193	ExpressionStatement	"spp_run ( proc -> buf . lbuf + delta , out )"	191:4:3926:3963	6111675	2	True				
ANR	6112194	CallExpression	"spp_run ( proc -> buf . lbuf + delta , out )"		6111675	0					
ANR	6112195	Callee	spp_run		6111675	0					
ANR	6112196	Identifier	spp_run		6111675	0					
ANR	6112197	ArgumentList	proc -> buf . lbuf + delta		6111675	1					
ANR	6112198	Argument	proc -> buf . lbuf + delta		6111675	0					
ANR	6112199	AdditiveExpression	proc -> buf . lbuf + delta		6111675	0		+			
ANR	6112200	MemberAccess	proc -> buf . lbuf		6111675	0					
ANR	6112201	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112202	Identifier	proc		6111675	0					
ANR	6112203	Identifier	buf		6111675	1					
ANR	6112204	Identifier	lbuf		6111675	1					
ANR	6112205	Identifier	delta		6111675	1					
ANR	6112206	Argument	out		6111675	1					
ANR	6112207	Identifier	out		6111675	0					
ANR	6112208	IdentifierDeclStatement	"D printf ( ""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf ) ;"	192:4:3969:4018	6111675	3	True				
ANR	6112209	IdentifierDecl	"printf ( ""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf )"		6111675	0					
ANR	6112210	IdentifierDeclType	D		6111675	0					
ANR	6112211	Identifier	printf		6111675	1					
ANR	6112212	Expression	"""=(1)=> spp_run(%s)\\n"" , proc -> buf . lbuf"		6111675	2					
ANR	6112213	PrimaryExpression	"""=(1)=> spp_run(%s)\\n"""		6111675	0					
ANR	6112214	MemberAccess	proc -> buf . lbuf		6111675	1					
ANR	6112215	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112216	Identifier	proc		6111675	0					
ANR	6112217	Identifier	buf		6111675	1					
ANR	6112218	Identifier	lbuf		6111675	1					
ANR	6112219	ExpressionStatement	proc -> buf . lbuf [ 0 ] = '\\0'	194:3:4028:4050	6111675	2	True				
ANR	6112220	AssignmentExpression	proc -> buf . lbuf [ 0 ] = '\\0'		6111675	0		=			
ANR	6112221	ArrayIndexing	proc -> buf . lbuf [ 0 ]		6111675	0					
ANR	6112222	MemberAccess	proc -> buf . lbuf		6111675	0					
ANR	6112223	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112224	Identifier	proc		6111675	0					
ANR	6112225	Identifier	buf		6111675	1					
ANR	6112226	Identifier	lbuf		6111675	1					
ANR	6112227	PrimaryExpression	0		6111675	1					
ANR	6112228	PrimaryExpression	'\\0'		6111675	1					
ANR	6112229	ExpressionStatement	proc -> buf . lbuf_n = 0	195:3:4055:4075	6111675	3	True				
ANR	6112230	AssignmentExpression	proc -> buf . lbuf_n = 0		6111675	0		=			
ANR	6112231	MemberAccess	proc -> buf . lbuf_n		6111675	0					
ANR	6112232	PtrMemberAccess	proc -> buf		6111675	0					
ANR	6112233	Identifier	proc		6111675	0					
ANR	6112234	Identifier	buf		6111675	1					
ANR	6112235	Identifier	lbuf_n		6111675	1					
ANR	6112236	PrimaryExpression	0		6111675	1					
ANR	6112237	ElseStatement	else		6111675	0					
ANR	6112238	CompoundStatement		94:3:2045:2075	6111675	0					
ANR	6112239	IdentifierDeclStatement	"D printf ( ""==> 2 (%s)\\n"" , ptr ) ;"	197:3:4091:4121	6111675	0	True				
ANR	6112240	IdentifierDecl	"printf ( ""==> 2 (%s)\\n"" , ptr )"		6111675	0					
ANR	6112241	IdentifierDeclType	D		6111675	0					
ANR	6112242	Identifier	printf		6111675	1					
ANR	6112243	Expression	"""==> 2 (%s)\\n"" , ptr"		6111675	2					
ANR	6112244	PrimaryExpression	"""==> 2 (%s)\\n"""		6111675	0					
ANR	6112245	Identifier	ptr		6111675	1					
ANR	6112246	IfStatement	if ( ptr )		6111675	1					
ANR	6112247	Condition	ptr	198:7:4130:4132	6111675	0	True				
ANR	6112248	Identifier	ptr		6111675	0					
ANR	6112249	CompoundStatement		102:4:2241:2283	6111675	1					
ANR	6112250	IdentifierDeclStatement	"D printf ( "" ==> 2.1: run(%s)\\n"" , ptr ) ;"	199:4:4141:4178	6111675	0	True				
ANR	6112251	IdentifierDecl	"printf ( "" ==> 2.1: run(%s)\\n"" , ptr )"		6111675	0					
ANR	6112252	IdentifierDeclType	D		6111675	0					
ANR	6112253	Identifier	printf		6111675	1					
ANR	6112254	Expression	""" ==> 2.1: run(%s)\\n"" , ptr"		6111675	2					
ANR	6112255	PrimaryExpression	""" ==> 2.1: run(%s)\\n"""		6111675	0					
ANR	6112256	Identifier	ptr		6111675	1					
ANR	6112257	ExpressionStatement	"spp_run ( ptr , out )"	200:4:4184:4202	6111675	1	True				
ANR	6112258	CallExpression	"spp_run ( ptr , out )"		6111675	0					
ANR	6112259	Callee	spp_run		6111675	0					
ANR	6112260	Identifier	spp_run		6111675	0					
ANR	6112261	ArgumentList	ptr		6111675	1					
ANR	6112262	Argument	ptr		6111675	0					
ANR	6112263	Identifier	ptr		6111675	0					
ANR	6112264	Argument	out		6111675	1					
ANR	6112265	Identifier	out		6111675	0					
ANR	6112266	ExpressionStatement	buf = ptr2 + delta	201:4:4208:4226	6111675	2	True				
ANR	6112267	AssignmentExpression	buf = ptr2 + delta		6111675	0		=			
ANR	6112268	Identifier	buf		6111675	0					
ANR	6112269	AdditiveExpression	ptr2 + delta		6111675	1		+			
ANR	6112270	Identifier	ptr2		6111675	0					
ANR	6112271	Identifier	delta		6111675	1					
ANR	6112272	IfStatement	if ( buf [ 0 ] == '\\n' && printed )		6111675	3					
ANR	6112273	Condition	buf [ 0 ] == '\\n' && printed	202:8:4236:4260	6111675	0	True				
ANR	6112274	AndExpression	buf [ 0 ] == '\\n' && printed		6111675	0		&&			
ANR	6112275	EqualityExpression	buf [ 0 ] == '\\n'		6111675	0		==			
ANR	6112276	ArrayIndexing	buf [ 0 ]		6111675	0					
ANR	6112277	Identifier	buf		6111675	0					
ANR	6112278	PrimaryExpression	0		6111675	1					
ANR	6112279	PrimaryExpression	'\\n'		6111675	1					
ANR	6112280	Identifier	printed		6111675	1					
ANR	6112281	CompoundStatement		99:35:2217:2217	6111675	1					
ANR	6112282	ExpressionStatement	buf ++	203:5:4270:4275	6111675	0	True				
ANR	6112283	PostIncDecOperationExpression	buf ++		6111675	0					
ANR	6112284	Identifier	buf		6111675	0					
ANR	6112285	IncDec	++		6111675	1					
ANR	6112286	IdentifierDeclStatement	"D printf ( "" ==> 2.1: continue(%s)\\n"" , buf ) ;"	205:4:4287:4329	6111675	4	True				
ANR	6112287	IdentifierDecl	"printf ( "" ==> 2.1: continue(%s)\\n"" , buf )"		6111675	0					
ANR	6112288	IdentifierDeclType	D		6111675	0					
ANR	6112289	Identifier	printf		6111675	1					
ANR	6112290	Expression	""" ==> 2.1: continue(%s)\\n"" , buf"		6111675	2					
ANR	6112291	PrimaryExpression	""" ==> 2.1: continue(%s)\\n"""		6111675	0					
ANR	6112292	Identifier	buf		6111675	1					
ANR	6112293	GotoStatement	goto retry ;	206:4:4335:4345	6111675	5	True				
ANR	6112294	Identifier	retry		6111675	0					
ANR	6112295	ElseStatement	else		6111675	0					
ANR	6112296	CompoundStatement		104:10:2311:2311	6111675	0					
ANR	6112297	IfStatement	"if ( do_fputs ( out , buf ) )"		6111675	0					
ANR	6112298	Condition	"do_fputs ( out , buf )"	208:8:4367:4385	6111675	0	True				
ANR	6112299	CallExpression	"do_fputs ( out , buf )"		6111675	0					
ANR	6112300	Callee	do_fputs		6111675	0					
ANR	6112301	Identifier	do_fputs		6111675	0					
ANR	6112302	ArgumentList	out		6111675	1					
ANR	6112303	Argument	out		6111675	0					
ANR	6112304	Identifier	out		6111675	0					
ANR	6112305	Argument	buf		6111675	1					
ANR	6112306	Identifier	buf		6111675	0					
ANR	6112307	CompoundStatement		105:29:2342:2342	6111675	1					
ANR	6112308	ExpressionStatement	printed = 1	209:5:4395:4406	6111675	0	True				
ANR	6112309	AssignmentExpression	printed = 1		6111675	0		=			
ANR	6112310	Identifier	printed		6111675	0					
ANR	6112311	PrimaryExpression	1		6111675	1					
ANR	6112312	IfStatement	"if ( do_fputs ( out , buf ) )"		6111675	3					
ANR	6112313	Condition	"do_fputs ( out , buf )"	213:6:4429:4447	6111675	0	True				
ANR	6112314	CallExpression	"do_fputs ( out , buf )"		6111675	0					
ANR	6112315	Callee	do_fputs		6111675	0					
ANR	6112316	Identifier	do_fputs		6111675	0					
ANR	6112317	ArgumentList	out		6111675	1					
ANR	6112318	Argument	out		6111675	0					
ANR	6112319	Identifier	out		6111675	0					
ANR	6112320	Argument	buf		6111675	1					
ANR	6112321	Identifier	buf		6111675	0					
ANR	6112322	CompoundStatement		110:27:2404:2404	6111675	1					
ANR	6112323	ExpressionStatement	printed = 1	214:3:4455:4466	6111675	0	True				
ANR	6112324	AssignmentExpression	printed = 1		6111675	0		=			
ANR	6112325	Identifier	printed		6111675	0					
ANR	6112326	PrimaryExpression	1		6111675	1					
ANR	6112327	ElseStatement	else		6111675	0					
ANR	6112328	CompoundStatement		114:2:2438:2458	6111675	0					
ANR	6112329	IdentifierDeclStatement	"D printf ( ""==> 3\\n"" ) ;"	217:2:4484:4504	6111675	0	True				
ANR	6112330	IdentifierDecl	"printf ( ""==> 3\\n"" )"		6111675	0					
ANR	6112331	IdentifierDeclType	D		6111675	0					
ANR	6112332	Identifier	printf		6111675	1					
ANR	6112333	PrimaryExpression	"""==> 3\\n"""		6111675	2					
ANR	6112334	ExpressionStatement	"lbuf_strcat ( & proc -> buf , ptr )"	218:2:4508:4537	6111675	1	True				
ANR	6112335	CallExpression	"lbuf_strcat ( & proc -> buf , ptr )"		6111675	0					
ANR	6112336	Callee	lbuf_strcat		6111675	0					
ANR	6112337	Identifier	lbuf_strcat		6111675	0					
ANR	6112338	ArgumentList	& proc -> buf		6111675	1					
ANR	6112339	Argument	& proc -> buf		6111675	0					
ANR	6112340	UnaryOperationExpression	& proc -> buf		6111675	0					
ANR	6112341	UnaryOperator	&		6111675	0					
ANR	6112342	PtrMemberAccess	proc -> buf		6111675	1					
ANR	6112343	Identifier	proc		6111675	0					
ANR	6112344	Identifier	buf		6111675	1					
ANR	6112345	Argument	ptr		6111675	1					
ANR	6112346	Identifier	ptr		6111675	0					
ANR	6112347	ReturnType	S_API void		6111675	1					
ANR	6112348	Identifier	spp_eval		6111675	2					
ANR	6112349	ParameterList	"char * buf , Output * out"		6111675	3					
ANR	6112350	Parameter	char * buf	104:20:2021:2029	6111675	0	True				
ANR	6112351	ParameterType	char *		6111675	0					
ANR	6112352	Identifier	buf		6111675	1					
ANR	6112353	Parameter	Output * out	104:31:2032:2042	6111675	1	True				
ANR	6112354	ParameterType	Output *		6111675	0					
ANR	6112355	Identifier	out		6111675	1					
ANR	6112356	CFGEntryNode	ENTRY		6111675		True				
ANR	6112357	CFGExitNode	EXIT		6111675		True				
ANR	6112358	Symbol	proc -> buf		6111675						
ANR	6112359	Symbol	proc -> token		6111675						
ANR	6112360	Symbol	do_fputs		6111675						
ANR	6112361	Symbol	delta		6111675						
ANR	6112362	Symbol	proc -> buf . lbuf		6111675						
ANR	6112363	Symbol	out		6111675						
ANR	6112364	Symbol	printf		6111675						
ANR	6112365	Symbol	strlen		6111675						
ANR	6112366	Symbol	* delta		6111675						
ANR	6112367	Symbol	* ptr		6111675						
ANR	6112368	Symbol	* ptr2		6111675						
ANR	6112369	Symbol	* * proc		6111675						
ANR	6112370	Symbol	* proc -> buf		6111675						
ANR	6112371	Symbol	proc -> tag_begin		6111675						
ANR	6112372	Symbol	* proc -> buf . lbuf		6111675						
ANR	6112373	Symbol	& proc -> buf		6111675						
ANR	6112374	Symbol	proc		6111675						
ANR	6112375	Symbol	* buf		6111675						
ANR	6112376	Symbol	NULL		6111675						
ANR	6112377	Symbol	* proc -> tag_pre		6111675						
ANR	6112378	Symbol	fprintf		6111675						
ANR	6112379	Symbol	ptr		6111675						
ANR	6112380	Symbol	* proc		6111675						
ANR	6112381	Symbol	ptr2		6111675						
ANR	6112382	Symbol	ptrr		6111675						
ANR	6112383	Symbol	p		6111675						
ANR	6112384	Symbol	printed		6111675						
ANR	6112385	Symbol	buf		6111675						
ANR	6112386	Symbol	s		6111675						
ANR	6112387	Symbol	strstr		6111675						
ANR	6112388	Symbol	proc -> tag_pre		6111675						
ANR	6112389	Symbol	spp_run_str		6111675						
ANR	6112390	Symbol	proc -> tag_post		6111675						
ANR	6112391	Symbol	proc -> buf . lbuf_n		6111675						
ANR	6112392	Symbol	strdup		6111675						
ANR	6112393	Function	spp_io	223:0:4572:5543							
ANR	6112394	FunctionDef	"spp_io (FILE * in , Output * out)"		6112393	0					
ANR	6112395	CompoundStatement		223:41:4613:5543	6112393	0					
ANR	6112396	IdentifierDeclStatement	char buf [ 4096 ] ;	224:1:4616:4630	6112393	0	True				
ANR	6112397	IdentifierDecl	buf [ 4096 ]		6112393	0					
ANR	6112398	IdentifierDeclType	char [ 4096 ]		6112393	0					
ANR	6112399	Identifier	buf		6112393	1					
ANR	6112400	PrimaryExpression	4096		6112393	2					
ANR	6112401	IdentifierDeclStatement	int lines ;	225:1:4633:4642	6112393	1	True				
ANR	6112402	IdentifierDecl	lines		6112393	0					
ANR	6112403	IdentifierDeclType	int		6112393	0					
ANR	6112404	Identifier	lines		6112393	1					
ANR	6112405	IfStatement	if ( ! proc -> buf . lbuf )		6112393	2					
ANR	6112406	Condition	! proc -> buf . lbuf	226:5:4649:4663	6112393	0	True				
ANR	6112407	UnaryOperationExpression	! proc -> buf . lbuf		6112393	0					
ANR	6112408	UnaryOperator	!		6112393	0					
ANR	6112409	MemberAccess	proc -> buf . lbuf		6112393	1					
ANR	6112410	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112411	Identifier	proc		6112393	0					
ANR	6112412	Identifier	buf		6112393	1					
ANR	6112413	Identifier	lbuf		6112393	1					
ANR	6112414	CompoundStatement		4:22:52:52	6112393	1					
ANR	6112415	ExpressionStatement	"proc -> buf . lbuf = calloc ( 1 , 4096 )"	227:2:4670:4703	6112393	0	True				
ANR	6112416	AssignmentExpression	"proc -> buf . lbuf = calloc ( 1 , 4096 )"		6112393	0		=			
ANR	6112417	MemberAccess	proc -> buf . lbuf		6112393	0					
ANR	6112418	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112419	Identifier	proc		6112393	0					
ANR	6112420	Identifier	buf		6112393	1					
ANR	6112421	Identifier	lbuf		6112393	1					
ANR	6112422	CallExpression	"calloc ( 1 , 4096 )"		6112393	1					
ANR	6112423	Callee	calloc		6112393	0					
ANR	6112424	Identifier	calloc		6112393	0					
ANR	6112425	ArgumentList	1		6112393	1					
ANR	6112426	Argument	1		6112393	0					
ANR	6112427	PrimaryExpression	1		6112393	0					
ANR	6112428	Argument	4096		6112393	1					
ANR	6112429	PrimaryExpression	4096		6112393	0					
ANR	6112430	IfStatement	if ( ! proc -> buf . lbuf )		6112393	3					
ANR	6112431	Condition	! proc -> buf . lbuf	229:5:4713:4727	6112393	0	True				
ANR	6112432	UnaryOperationExpression	! proc -> buf . lbuf		6112393	0					
ANR	6112433	UnaryOperator	!		6112393	0					
ANR	6112434	MemberAccess	proc -> buf . lbuf		6112393	1					
ANR	6112435	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112436	Identifier	proc		6112393	0					
ANR	6112437	Identifier	buf		6112393	1					
ANR	6112438	Identifier	lbuf		6112393	1					
ANR	6112439	CompoundStatement		7:22:116:116	6112393	1					
ANR	6112440	ExpressionStatement	"fprintf ( stderr , ""Out of memory.\\n"" )"	230:2:4734:4770	6112393	0	True				
ANR	6112441	CallExpression	"fprintf ( stderr , ""Out of memory.\\n"" )"		6112393	0					
ANR	6112442	Callee	fprintf		6112393	0					
ANR	6112443	Identifier	fprintf		6112393	0					
ANR	6112444	ArgumentList	stderr		6112393	1					
ANR	6112445	Argument	stderr		6112393	0					
ANR	6112446	Identifier	stderr		6112393	0					
ANR	6112447	Argument	"""Out of memory.\\n"""		6112393	1					
ANR	6112448	PrimaryExpression	"""Out of memory.\\n"""		6112393	0					
ANR	6112449	ReturnStatement	return ;	231:2:4774:4780	6112393	1	True				
ANR	6112450	ExpressionStatement	proc -> buf . lbuf [ 0 ] = '\\0'	233:1:4786:4810	6112393	4	True				
ANR	6112451	AssignmentExpression	proc -> buf . lbuf [ 0 ] = '\\0'		6112393	0		=			
ANR	6112452	ArrayIndexing	proc -> buf . lbuf [ 0 ]		6112393	0					
ANR	6112453	MemberAccess	proc -> buf . lbuf		6112393	0					
ANR	6112454	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112455	Identifier	proc		6112393	0					
ANR	6112456	Identifier	buf		6112393	1					
ANR	6112457	Identifier	lbuf		6112393	1					
ANR	6112458	PrimaryExpression	0		6112393	1					
ANR	6112459	PrimaryExpression	'\\0'		6112393	1					
ANR	6112460	ExpressionStatement	proc -> buf . lbuf_s = 1024	234:1:4813:4836	6112393	5	True				
ANR	6112461	AssignmentExpression	proc -> buf . lbuf_s = 1024		6112393	0		=			
ANR	6112462	MemberAccess	proc -> buf . lbuf_s		6112393	0					
ANR	6112463	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112464	Identifier	proc		6112393	0					
ANR	6112465	Identifier	buf		6112393	1					
ANR	6112466	Identifier	lbuf_s		6112393	1					
ANR	6112467	PrimaryExpression	1024		6112393	1					
ANR	6112468	WhileStatement	while ( ! feof ( in ) )		6112393	6					
ANR	6112469	Condition	! feof ( in )	235:8:4846:4855	6112393	0	True				
ANR	6112470	UnaryOperationExpression	! feof ( in )		6112393	0					
ANR	6112471	UnaryOperator	!		6112393	0					
ANR	6112472	CallExpression	feof ( in )		6112393	1					
ANR	6112473	Callee	feof		6112393	0					
ANR	6112474	Identifier	feof		6112393	0					
ANR	6112475	ArgumentList	in		6112393	1					
ANR	6112476	Argument	in		6112393	0					
ANR	6112477	Identifier	in		6112393	0					
ANR	6112478	CompoundStatement		13:20:244:244	6112393	1					
ANR	6112479	ExpressionStatement	buf [ 0 ] = '\\0'	236:2:4862:4875	6112393	0	True				
ANR	6112480	AssignmentExpression	buf [ 0 ] = '\\0'		6112393	0		=			
ANR	6112481	ArrayIndexing	buf [ 0 ]		6112393	0					
ANR	6112482	Identifier	buf		6112393	0					
ANR	6112483	PrimaryExpression	0		6112393	1					
ANR	6112484	PrimaryExpression	'\\0'		6112393	1					
ANR	6112485	IfStatement	"if ( ! fgets ( buf , sizeof ( buf ) - 1 , in ) )"		6112393	1					
ANR	6112486	Condition	"! fgets ( buf , sizeof ( buf ) - 1 , in )"	237:6:4890:4923	6112393	0	True				
ANR	6112487	UnaryOperationExpression	"! fgets ( buf , sizeof ( buf ) - 1 , in )"		6112393	0					
ANR	6112488	UnaryOperator	!		6112393	0					
ANR	6112489	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , in )"		6112393	1					
ANR	6112490	Callee	fgets		6112393	0					
ANR	6112491	Identifier	fgets		6112393	0					
ANR	6112492	ArgumentList	buf		6112393	1					
ANR	6112493	Argument	buf		6112393	0					
ANR	6112494	Identifier	buf		6112393	0					
ANR	6112495	Argument	sizeof ( buf ) - 1		6112393	1					
ANR	6112496	AdditiveExpression	sizeof ( buf ) - 1		6112393	0		-			
ANR	6112497	SizeofExpression	sizeof ( buf )		6112393	0					
ANR	6112498	Sizeof	sizeof		6112393	0					
ANR	6112499	SizeofOperand	buf		6112393	1					
ANR	6112500	PrimaryExpression	1		6112393	1					
ANR	6112501	Argument	in		6112393	2					
ANR	6112502	Identifier	in		6112393	0					
ANR	6112503	CompoundStatement		15:42:312:312	6112393	1					
ANR	6112504	BreakStatement	break ;	238:3:4931:4936	6112393	0	True				
ANR	6112505	IfStatement	if ( feof ( in ) )		6112393	2					
ANR	6112506	Condition	feof ( in )	240:6:4948:4956	6112393	0	True				
ANR	6112507	CallExpression	feof ( in )		6112393	0					
ANR	6112508	Callee	feof		6112393	0					
ANR	6112509	Identifier	feof		6112393	0					
ANR	6112510	ArgumentList	in		6112393	1					
ANR	6112511	Argument	in		6112393	0					
ANR	6112512	Identifier	in		6112393	0					
ANR	6112513	BreakStatement	break ;	240:17:4959:4964	6112393	1	True				
ANR	6112514	ExpressionStatement	lines = 1	241:2:4968:4977	6112393	3	True				
ANR	6112515	AssignmentExpression	lines = 1		6112393	0		=			
ANR	6112516	Identifier	lines		6112393	0					
ANR	6112517	PrimaryExpression	1		6112393	1					
ANR	6112518	IfStatement	"if ( ! memcmp ( buf , ""#!"" , 2 ) )"		6112393	4					
ANR	6112519	Condition	"! memcmp ( buf , ""#!"" , 2 )"	242:6:4985:5006	6112393	0	True				
ANR	6112520	UnaryOperationExpression	"! memcmp ( buf , ""#!"" , 2 )"		6112393	0					
ANR	6112521	UnaryOperator	!		6112393	0					
ANR	6112522	CallExpression	"memcmp ( buf , ""#!"" , 2 )"		6112393	1					
ANR	6112523	Callee	memcmp		6112393	0					
ANR	6112524	Identifier	memcmp		6112393	0					
ANR	6112525	ArgumentList	buf		6112393	1					
ANR	6112526	Argument	buf		6112393	0					
ANR	6112527	Identifier	buf		6112393	0					
ANR	6112528	Argument	"""#!"""		6112393	1					
ANR	6112529	PrimaryExpression	"""#!"""		6112393	0					
ANR	6112530	Argument	2		6112393	2					
ANR	6112531	PrimaryExpression	2		6112393	0					
ANR	6112532	CompoundStatement		20:30:395:395	6112393	1					
ANR	6112533	IfStatement	"if ( ! fgets ( buf , sizeof ( buf ) - 1 , in ) || feof ( in ) )"		6112393	0					
ANR	6112534	Condition	"! fgets ( buf , sizeof ( buf ) - 1 , in ) || feof ( in )"	243:7:5018:5064	6112393	0	True				
ANR	6112535	OrExpression	"! fgets ( buf , sizeof ( buf ) - 1 , in ) || feof ( in )"		6112393	0		||			
ANR	6112536	UnaryOperationExpression	"! fgets ( buf , sizeof ( buf ) - 1 , in )"		6112393	0					
ANR	6112537	UnaryOperator	!		6112393	0					
ANR	6112538	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , in )"		6112393	1					
ANR	6112539	Callee	fgets		6112393	0					
ANR	6112540	Identifier	fgets		6112393	0					
ANR	6112541	ArgumentList	buf		6112393	1					
ANR	6112542	Argument	buf		6112393	0					
ANR	6112543	Identifier	buf		6112393	0					
ANR	6112544	Argument	sizeof ( buf ) - 1		6112393	1					
ANR	6112545	AdditiveExpression	sizeof ( buf ) - 1		6112393	0		-			
ANR	6112546	SizeofExpression	sizeof ( buf )		6112393	0					
ANR	6112547	Sizeof	sizeof		6112393	0					
ANR	6112548	SizeofOperand	buf		6112393	1					
ANR	6112549	PrimaryExpression	1		6112393	1					
ANR	6112550	Argument	in		6112393	2					
ANR	6112551	Identifier	in		6112393	0					
ANR	6112552	CallExpression	feof ( in )		6112393	1					
ANR	6112553	Callee	feof		6112393	0					
ANR	6112554	Identifier	feof		6112393	0					
ANR	6112555	ArgumentList	in		6112393	1					
ANR	6112556	Argument	in		6112393	0					
ANR	6112557	Identifier	in		6112393	0					
ANR	6112558	CompoundStatement		21:56:453:453	6112393	1					
ANR	6112559	BreakStatement	break ;	244:4:5073:5078	6112393	0	True				
ANR	6112560	ExpressionStatement	lines ++	246:3:5088:5095	6112393	1	True				
ANR	6112561	PostIncDecOperationExpression	lines ++		6112393	0					
ANR	6112562	Identifier	lines		6112393	0					
ANR	6112563	IncDec	++		6112393	1					
ANR	6112564	IfStatement	if ( proc -> multiline )		6112393	5					
ANR	6112565	Condition	proc -> multiline	248:6:5107:5121	6112393	0	True				
ANR	6112566	PtrMemberAccess	proc -> multiline		6112393	0					
ANR	6112567	Identifier	proc		6112393	0					
ANR	6112568	Identifier	multiline		6112393	1					
ANR	6112569	CompoundStatement		26:23:510:510	6112393	1					
ANR	6112570	WhileStatement	while ( 1 )		6112393	0					
ANR	6112571	Condition	1	249:10:5136:5136	6112393	0	True				
ANR	6112572	PrimaryExpression	1		6112393	0					
ANR	6112573	CompoundStatement		28:4:531:588	6112393	1					
ANR	6112574	IdentifierDeclStatement	char * eol = buf + strlen ( buf ) - strlen ( proc -> multiline ) ;	250:4:5145:5202	6112393	0	True				
ANR	6112575	IdentifierDecl	* eol = buf + strlen ( buf ) - strlen ( proc -> multiline )		6112393	0					
ANR	6112576	IdentifierDeclType	char *		6112393	0					
ANR	6112577	Identifier	eol		6112393	1					
ANR	6112578	AssignmentExpression	* eol = buf + strlen ( buf ) - strlen ( proc -> multiline )		6112393	2		=			
ANR	6112579	Identifier	eol		6112393	0					
ANR	6112580	AdditiveExpression	buf + strlen ( buf ) - strlen ( proc -> multiline )		6112393	1		+			
ANR	6112581	Identifier	buf		6112393	0					
ANR	6112582	AdditiveExpression	strlen ( buf ) - strlen ( proc -> multiline )		6112393	1		-			
ANR	6112583	CallExpression	strlen ( buf )		6112393	0					
ANR	6112584	Callee	strlen		6112393	0					
ANR	6112585	Identifier	strlen		6112393	0					
ANR	6112586	ArgumentList	buf		6112393	1					
ANR	6112587	Argument	buf		6112393	0					
ANR	6112588	Identifier	buf		6112393	0					
ANR	6112589	CallExpression	strlen ( proc -> multiline )		6112393	1					
ANR	6112590	Callee	strlen		6112393	0					
ANR	6112591	Identifier	strlen		6112393	0					
ANR	6112592	ArgumentList	proc -> multiline		6112393	1					
ANR	6112593	Argument	proc -> multiline		6112393	0					
ANR	6112594	PtrMemberAccess	proc -> multiline		6112393	0					
ANR	6112595	Identifier	proc		6112393	0					
ANR	6112596	Identifier	multiline		6112393	1					
ANR	6112597	IfStatement	"if ( ! strcmp ( eol , proc -> multiline ) )"		6112393	1					
ANR	6112598	Condition	"! strcmp ( eol , proc -> multiline )"	251:8:5212:5241	6112393	0	True				
ANR	6112599	UnaryOperationExpression	"! strcmp ( eol , proc -> multiline )"		6112393	0					
ANR	6112600	UnaryOperator	!		6112393	0					
ANR	6112601	CallExpression	"strcmp ( eol , proc -> multiline )"		6112393	1					
ANR	6112602	Callee	strcmp		6112393	0					
ANR	6112603	Identifier	strcmp		6112393	0					
ANR	6112604	ArgumentList	eol		6112393	1					
ANR	6112605	Argument	eol		6112393	0					
ANR	6112606	Identifier	eol		6112393	0					
ANR	6112607	Argument	proc -> multiline		6112393	1					
ANR	6112608	PtrMemberAccess	proc -> multiline		6112393	0					
ANR	6112609	Identifier	proc		6112393	0					
ANR	6112610	Identifier	multiline		6112393	1					
ANR	6112611	CompoundStatement		30:5:637:680	6112393	1					
ANR	6112612	IdentifierDeclStatement	"D fprintf ( stderr , ""Multiline detected!\\n"" ) ;"	252:5:5251:5294	6112393	0	True				
ANR	6112613	IdentifierDecl	"fprintf ( stderr , ""Multiline detected!\\n"" )"		6112393	0					
ANR	6112614	IdentifierDeclType	D		6112393	0					
ANR	6112615	Identifier	fprintf		6112393	1					
ANR	6112616	Expression	"stderr , ""Multiline detected!\\n"""		6112393	2					
ANR	6112617	Identifier	stderr		6112393	0					
ANR	6112618	PrimaryExpression	"""Multiline detected!\\n"""		6112393	1					
ANR	6112619	IfStatement	"if ( ! fgets ( eol , 1023 , in ) )"		6112393	1					
ANR	6112620	Condition	"! fgets ( eol , 1023 , in )"	253:9:5305:5326	6112393	0	True				
ANR	6112621	UnaryOperationExpression	"! fgets ( eol , 1023 , in )"		6112393	0					
ANR	6112622	UnaryOperator	!		6112393	0					
ANR	6112623	CallExpression	"fgets ( eol , 1023 , in )"		6112393	1					
ANR	6112624	Callee	fgets		6112393	0					
ANR	6112625	Identifier	fgets		6112393	0					
ANR	6112626	ArgumentList	eol		6112393	1					
ANR	6112627	Argument	eol		6112393	0					
ANR	6112628	Identifier	eol		6112393	0					
ANR	6112629	Argument	1023		6112393	1					
ANR	6112630	PrimaryExpression	1023		6112393	0					
ANR	6112631	Argument	in		6112393	2					
ANR	6112632	Identifier	in		6112393	0					
ANR	6112633	CompoundStatement		31:33:715:715	6112393	1					
ANR	6112634	BreakStatement	break ;	254:6:5337:5342	6112393	0	True				
ANR	6112635	IfStatement	if ( feof ( in ) )		6112393	2					
ANR	6112636	Condition	feof ( in )	256:9:5360:5368	6112393	0	True				
ANR	6112637	CallExpression	feof ( in )		6112393	0					
ANR	6112638	Callee	feof		6112393	0					
ANR	6112639	Identifier	feof		6112393	0					
ANR	6112640	ArgumentList	in		6112393	1					
ANR	6112641	Argument	in		6112393	0					
ANR	6112642	Identifier	in		6112393	0					
ANR	6112643	CompoundStatement		34:20:757:757	6112393	1					
ANR	6112644	BreakStatement	break ;	257:6:5379:5384	6112393	0	True				
ANR	6112645	ExpressionStatement	lines ++	259:5:5398:5405	6112393	3	True				
ANR	6112646	PostIncDecOperationExpression	lines ++		6112393	0					
ANR	6112647	Identifier	lines		6112393	0					
ANR	6112648	IncDec	++		6112393	1					
ANR	6112649	ElseStatement	else		6112393	0					
ANR	6112650	CompoundStatement		38:11:804:804	6112393	0					
ANR	6112651	BreakStatement	break ;	261:5:5425:5430	6112393	0	True				
ANR	6112652	ExpressionStatement	"spp_eval ( buf , out )"	265:2:5449:5468	6112393	6	True				
ANR	6112653	CallExpression	"spp_eval ( buf , out )"		6112393	0					
ANR	6112654	Callee	spp_eval		6112393	0					
ANR	6112655	Identifier	spp_eval		6112393	0					
ANR	6112656	ArgumentList	buf		6112393	1					
ANR	6112657	Argument	buf		6112393	0					
ANR	6112658	Identifier	buf		6112393	0					
ANR	6112659	Argument	out		6112393	1					
ANR	6112660	Identifier	out		6112393	0					
ANR	6112661	ExpressionStatement	proc -> state . lineno += lines	266:2:5472:5499	6112393	7	True				
ANR	6112662	AssignmentExpression	proc -> state . lineno += lines		6112393	0		+=			
ANR	6112663	MemberAccess	proc -> state . lineno		6112393	0					
ANR	6112664	PtrMemberAccess	proc -> state		6112393	0					
ANR	6112665	Identifier	proc		6112393	0					
ANR	6112666	Identifier	state		6112393	1					
ANR	6112667	Identifier	lineno		6112393	1					
ANR	6112668	Identifier	lines		6112393	1					
ANR	6112669	ExpressionStatement	"( void ) do_fputs ( out , proc -> buf . lbuf )"	268:1:5505:5541	6112393	7	True				
ANR	6112670	CastExpression	"( void ) do_fputs ( out , proc -> buf . lbuf )"		6112393	0					
ANR	6112671	CastTarget	void		6112393	0					
ANR	6112672	CallExpression	"do_fputs ( out , proc -> buf . lbuf )"		6112393	1					
ANR	6112673	Callee	do_fputs		6112393	0					
ANR	6112674	Identifier	do_fputs		6112393	0					
ANR	6112675	ArgumentList	out		6112393	1					
ANR	6112676	Argument	out		6112393	0					
ANR	6112677	Identifier	out		6112393	0					
ANR	6112678	Argument	proc -> buf . lbuf		6112393	1					
ANR	6112679	MemberAccess	proc -> buf . lbuf		6112393	0					
ANR	6112680	PtrMemberAccess	proc -> buf		6112393	0					
ANR	6112681	Identifier	proc		6112393	0					
ANR	6112682	Identifier	buf		6112393	1					
ANR	6112683	Identifier	lbuf		6112393	1					
ANR	6112684	ReturnType	S_API void		6112393	1					
ANR	6112685	Identifier	spp_io		6112393	2					
ANR	6112686	ParameterList	"FILE * in , Output * out"		6112393	3					
ANR	6112687	Parameter	FILE * in	223:18:4590:4597	6112393	0	True				
ANR	6112688	ParameterType	FILE *		6112393	0					
ANR	6112689	Identifier	in		6112393	1					
ANR	6112690	Parameter	Output * out	223:28:4600:4610	6112393	1	True				
ANR	6112691	ParameterType	Output *		6112393	0					
ANR	6112692	Identifier	out		6112393	1					
ANR	6112693	CFGEntryNode	ENTRY		6112393		True				
ANR	6112694	CFGExitNode	EXIT		6112393		True				
ANR	6112695	Symbol	proc -> buf		6112393						
ANR	6112696	Symbol	eol		6112393						
ANR	6112697	Symbol	calloc		6112393						
ANR	6112698	Symbol	proc -> buf . lbuf		6112393						
ANR	6112699	Symbol	fgets		6112393						
ANR	6112700	Symbol	out		6112393						
ANR	6112701	Symbol	strlen		6112393						
ANR	6112702	Symbol	memcmp		6112393						
ANR	6112703	Symbol	* * proc		6112393						
ANR	6112704	Symbol	* proc -> buf		6112393						
ANR	6112705	Symbol	lines		6112393						
ANR	6112706	Symbol	* proc -> buf . lbuf		6112393						
ANR	6112707	Symbol	proc -> state . lineno		6112393						
ANR	6112708	Symbol	strcmp		6112393						
ANR	6112709	Symbol	proc		6112393						
ANR	6112710	Symbol	* buf		6112393						
ANR	6112711	Symbol	in		6112393						
ANR	6112712	Symbol	proc -> state		6112393						
ANR	6112713	Symbol	stderr		6112393						
ANR	6112714	Symbol	fprintf		6112393						
ANR	6112715	Symbol	* proc		6112393						
ANR	6112716	Symbol	buf		6112393						
ANR	6112717	Symbol	feof		6112393						
ANR	6112718	Symbol	proc -> multiline		6112393						
ANR	6112719	Symbol	proc -> buf . lbuf_s		6112393						
ANR	6112720	Function	spp_file	271:0:5546:5793							
ANR	6112721	FunctionDef	"spp_file (const char * file , Output * out)"		6112720	0					
ANR	6112722	CompoundStatement		271:50:5596:5793	6112720	0					
ANR	6112723	IdentifierDeclStatement	"FILE * in = fopen ( file , ""r"" ) ;"	272:1:5599:5627	6112720	0	True				
ANR	6112724	IdentifierDecl	"* in = fopen ( file , ""r"" )"		6112720	0					
ANR	6112725	IdentifierDeclType	FILE *		6112720	0					
ANR	6112726	Identifier	in		6112720	1					
ANR	6112727	AssignmentExpression	"* in = fopen ( file , ""r"" )"		6112720	2		=			
ANR	6112728	Identifier	in		6112720	0					
ANR	6112729	CallExpression	"fopen ( file , ""r"" )"		6112720	1					
ANR	6112730	Callee	fopen		6112720	0					
ANR	6112731	Identifier	fopen		6112720	0					
ANR	6112732	ArgumentList	file		6112720	1					
ANR	6112733	Argument	file		6112720	0					
ANR	6112734	Identifier	file		6112720	0					
ANR	6112735	Argument	"""r"""		6112720	1					
ANR	6112736	PrimaryExpression	"""r"""		6112720	0					
ANR	6112737	IdentifierDeclStatement	"D fprintf ( stderr , ""SPP-FILE(%s)\\n"" , file ) ;"	273:1:5630:5672	6112720	1	True				
ANR	6112738	IdentifierDecl	"fprintf ( stderr , ""SPP-FILE(%s)\\n"" , file )"		6112720	0					
ANR	6112739	IdentifierDeclType	D		6112720	0					
ANR	6112740	Identifier	fprintf		6112720	1					
ANR	6112741	Expression	"stderr , ""SPP-FILE(%s)\\n"" , file"		6112720	2					
ANR	6112742	Identifier	stderr		6112720	0					
ANR	6112743	Expression	"""SPP-FILE(%s)\\n"" , file"		6112720	1					
ANR	6112744	PrimaryExpression	"""SPP-FILE(%s)\\n"""		6112720	0					
ANR	6112745	Identifier	file		6112720	1					
ANR	6112746	IfStatement	if ( in )		6112720	2					
ANR	6112747	Condition	in	274:5:5679:5680	6112720	0	True				
ANR	6112748	Identifier	in		6112720	0					
ANR	6112749	CompoundStatement		4:9:86:86	6112720	1					
ANR	6112750	ExpressionStatement	"spp_io ( in , out )"	275:2:5687:5703	6112720	0	True				
ANR	6112751	CallExpression	"spp_io ( in , out )"		6112720	0					
ANR	6112752	Callee	spp_io		6112720	0					
ANR	6112753	Identifier	spp_io		6112720	0					
ANR	6112754	ArgumentList	in		6112720	1					
ANR	6112755	Argument	in		6112720	0					
ANR	6112756	Identifier	in		6112720	0					
ANR	6112757	Argument	out		6112720	1					
ANR	6112758	Identifier	out		6112720	0					
ANR	6112759	ExpressionStatement	fclose ( in )	276:2:5707:5718	6112720	1	True				
ANR	6112760	CallExpression	fclose ( in )		6112720	0					
ANR	6112761	Callee	fclose		6112720	0					
ANR	6112762	Identifier	fclose		6112720	0					
ANR	6112763	ArgumentList	in		6112720	1					
ANR	6112764	Argument	in		6112720	0					
ANR	6112765	Identifier	in		6112720	0					
ANR	6112766	ReturnStatement	return 1 ;	277:2:5722:5730	6112720	2	True				
ANR	6112767	PrimaryExpression	1		6112720	0					
ANR	6112768	ExpressionStatement	"fprintf ( stderr , ""Cannot find '%s'\\n"" , file )"	279:1:5736:5780	6112720	3	True				
ANR	6112769	CallExpression	"fprintf ( stderr , ""Cannot find '%s'\\n"" , file )"		6112720	0					
ANR	6112770	Callee	fprintf		6112720	0					
ANR	6112771	Identifier	fprintf		6112720	0					
ANR	6112772	ArgumentList	stderr		6112720	1					
ANR	6112773	Argument	stderr		6112720	0					
ANR	6112774	Identifier	stderr		6112720	0					
ANR	6112775	Argument	"""Cannot find '%s'\\n"""		6112720	1					
ANR	6112776	PrimaryExpression	"""Cannot find '%s'\\n"""		6112720	0					
ANR	6112777	Argument	file		6112720	2					
ANR	6112778	Identifier	file		6112720	0					
ANR	6112779	ReturnStatement	return 0 ;	280:1:5783:5791	6112720	4	True				
ANR	6112780	PrimaryExpression	0		6112720	0					
ANR	6112781	ReturnType	S_API int		6112720	1					
ANR	6112782	Identifier	spp_file		6112720	2					
ANR	6112783	ParameterList	"const char * file , Output * out"		6112720	3					
ANR	6112784	Parameter	const char * file	271:19:5565:5580	6112720	0	True				
ANR	6112785	ParameterType	const char *		6112720	0					
ANR	6112786	Identifier	file		6112720	1					
ANR	6112787	Parameter	Output * out	271:37:5583:5593	6112720	1	True				
ANR	6112788	ParameterType	Output *		6112720	0					
ANR	6112789	Identifier	out		6112720	1					
ANR	6112790	CFGEntryNode	ENTRY		6112720		True				
ANR	6112791	CFGExitNode	EXIT		6112720		True				
ANR	6112792	Symbol	fopen		6112720						
ANR	6112793	Symbol	file		6112720						
ANR	6112794	Symbol	in		6112720						
ANR	6112795	Symbol	stderr		6112720						
ANR	6112796	Symbol	fprintf		6112720						
ANR	6112797	Symbol	out		6112720						
ANR	6112798	Function	spp_proc_list_kw	283:0:5796:5906							
ANR	6112799	FunctionDef	spp_proc_list_kw ()		6112798	0					
ANR	6112800	CompoundStatement		283:30:5826:5906	6112798	0					
ANR	6112801	IdentifierDeclStatement	int i ;	284:1:5829:5834	6112798	0	True				
ANR	6112802	IdentifierDecl	i		6112798	0					
ANR	6112803	IdentifierDeclType	int		6112798	0					
ANR	6112804	Identifier	i		6112798	1					
ANR	6112805	ForStatement	for ( i = 0 ; tags [ i ] . name ; i ++ )		6112798	1					
ANR	6112806	ForInit	i = 0 ;	285:6:5842:5847	6112798	0	True				
ANR	6112807	AssignmentExpression	i = 0		6112798	0		=			
ANR	6112808	Identifier	i		6112798	0					
ANR	6112809	PrimaryExpression	0		6112798	1					
ANR	6112810	Condition	tags [ i ] . name	285:13:5849:5860	6112798	1	True				
ANR	6112811	MemberAccess	tags [ i ] . name		6112798	0					
ANR	6112812	ArrayIndexing	tags [ i ]		6112798	0					
ANR	6112813	Identifier	tags		6112798	0					
ANR	6112814	Identifier	i		6112798	1					
ANR	6112815	Identifier	name		6112798	1					
ANR	6112816	PostIncDecOperationExpression	i ++	285:27:5863:5865	6112798	2	True				
ANR	6112817	Identifier	i		6112798	0					
ANR	6112818	IncDec	++		6112798	1					
ANR	6112819	CompoundStatement		3:32:41:41	6112798	3					
ANR	6112820	ExpressionStatement	"printf ( ""%s\\n"" , tags [ i ] . name )"	286:2:5872:5901	6112798	0	True				
ANR	6112821	CallExpression	"printf ( ""%s\\n"" , tags [ i ] . name )"		6112798	0					
ANR	6112822	Callee	printf		6112798	0					
ANR	6112823	Identifier	printf		6112798	0					
ANR	6112824	ArgumentList	"""%s\\n"""		6112798	1					
ANR	6112825	Argument	"""%s\\n"""		6112798	0					
ANR	6112826	PrimaryExpression	"""%s\\n"""		6112798	0					
ANR	6112827	Argument	tags [ i ] . name		6112798	1					
ANR	6112828	MemberAccess	tags [ i ] . name		6112798	0					
ANR	6112829	ArrayIndexing	tags [ i ]		6112798	0					
ANR	6112830	Identifier	tags		6112798	0					
ANR	6112831	Identifier	i		6112798	1					
ANR	6112832	Identifier	name		6112798	1					
ANR	6112833	ReturnType	S_API void		6112798	1					
ANR	6112834	Identifier	spp_proc_list_kw		6112798	2					
ANR	6112835	ParameterList			6112798	3					
ANR	6112836	CFGEntryNode	ENTRY		6112798		True				
ANR	6112837	CFGExitNode	EXIT		6112798		True				
ANR	6112838	Symbol	* i		6112798						
ANR	6112839	Symbol	tags [ i ] . name		6112798						
ANR	6112840	Symbol	i		6112798						
ANR	6112841	Symbol	* tags		6112798						
ANR	6112842	Symbol	tags		6112798						
ANR	6112843	Function	spp_proc_list	290:0:5909:6012							
ANR	6112844	FunctionDef	spp_proc_list ()		6112843	0					
ANR	6112845	CompoundStatement		290:27:5936:6012	6112843	0					
ANR	6112846	IdentifierDeclStatement	int i ;	291:1:5939:5944	6112843	0	True				
ANR	6112847	IdentifierDecl	i		6112843	0					
ANR	6112848	IdentifierDeclType	int		6112843	0					
ANR	6112849	Identifier	i		6112843	1					
ANR	6112850	ForStatement	for ( i = 0 ; procs [ i ] ; i ++ )		6112843	1					
ANR	6112851	ForInit	i = 0 ;	292:6:5952:5955	6112843	0	True				
ANR	6112852	AssignmentExpression	i = 0		6112843	0		=			
ANR	6112853	Identifier	i		6112843	0					
ANR	6112854	PrimaryExpression	0		6112843	1					
ANR	6112855	Condition	procs [ i ]	292:11:5957:5964	6112843	1	True				
ANR	6112856	ArrayIndexing	procs [ i ]		6112843	0					
ANR	6112857	Identifier	procs		6112843	0					
ANR	6112858	Identifier	i		6112843	1					
ANR	6112859	PostIncDecOperationExpression	i ++	292:21:5967:5969	6112843	2	True				
ANR	6112860	Identifier	i		6112843	0					
ANR	6112861	IncDec	++		6112843	1					
ANR	6112862	CompoundStatement		3:26:35:35	6112843	3					
ANR	6112863	ExpressionStatement	"printf ( ""%s\\n"" , procs [ i ] -> name )"	293:2:5976:6007	6112843	0	True				
ANR	6112864	CallExpression	"printf ( ""%s\\n"" , procs [ i ] -> name )"		6112843	0					
ANR	6112865	Callee	printf		6112843	0					
ANR	6112866	Identifier	printf		6112843	0					
ANR	6112867	ArgumentList	"""%s\\n"""		6112843	1					
ANR	6112868	Argument	"""%s\\n"""		6112843	0					
ANR	6112869	PrimaryExpression	"""%s\\n"""		6112843	0					
ANR	6112870	Argument	procs [ i ] -> name		6112843	1					
ANR	6112871	PtrMemberAccess	procs [ i ] -> name		6112843	0					
ANR	6112872	ArrayIndexing	procs [ i ]		6112843	0					
ANR	6112873	Identifier	procs		6112843	0					
ANR	6112874	Identifier	i		6112843	1					
ANR	6112875	Identifier	name		6112843	1					
ANR	6112876	ReturnType	S_API void		6112843	1					
ANR	6112877	Identifier	spp_proc_list		6112843	2					
ANR	6112878	ParameterList			6112843	3					
ANR	6112879	CFGEntryNode	ENTRY		6112843		True				
ANR	6112880	CFGExitNode	EXIT		6112843		True				
ANR	6112881	Symbol	* * procs		6112843						
ANR	6112882	Symbol	procs		6112843						
ANR	6112883	Symbol	* * i		6112843						
ANR	6112884	Symbol	* i		6112843						
ANR	6112885	Symbol	procs [ i ] -> name		6112843						
ANR	6112886	Symbol	* procs		6112843						
ANR	6112887	Symbol	i		6112843						
ANR	6112888	Function	spp_proc_set	297:0:6015:6620							
ANR	6112889	FunctionDef	"spp_proc_set (struct Proc * p , char * arg , int fail)"		6112888	0					
ANR	6112890	CompoundStatement		297:61:6076:6620	6112888	0					
ANR	6112891	IdentifierDeclStatement	"int i , j ;"	298:1:6079:6087	6112888	0	True				
ANR	6112892	IdentifierDecl	i		6112888	0					
ANR	6112893	IdentifierDeclType	int		6112888	0					
ANR	6112894	Identifier	i		6112888	1					
ANR	6112895	IdentifierDecl	j		6112888	1					
ANR	6112896	IdentifierDeclType	int		6112888	0					
ANR	6112897	Identifier	j		6112888	1					
ANR	6112898	IfStatement	if ( arg )		6112888	1					
ANR	6112899	Condition	arg	299:5:6094:6096	6112888	0	True				
ANR	6112900	Identifier	arg		6112888	0					
ANR	6112901	ForStatement	for ( j = 0 ; procs [ j ] ; j ++ )		6112888	1					
ANR	6112902	ForInit	j = 0 ;	300:6:6105:6110	6112888	0	True				
ANR	6112903	AssignmentExpression	j = 0		6112888	0		=			
ANR	6112904	Identifier	j		6112888	0					
ANR	6112905	PrimaryExpression	0		6112888	1					
ANR	6112906	Condition	procs [ j ]	300:13:6112:6119	6112888	1	True				
ANR	6112907	ArrayIndexing	procs [ j ]		6112888	0					
ANR	6112908	Identifier	procs		6112888	0					
ANR	6112909	Identifier	j		6112888	1					
ANR	6112910	PostIncDecOperationExpression	j ++	300:23:6122:6124	6112888	2	True				
ANR	6112911	Identifier	j		6112888	0					
ANR	6112912	IncDec	++		6112888	1					
ANR	6112913	CompoundStatement		4:28:50:50	6112888	3					
ANR	6112914	IfStatement	"if ( ! strcmp ( procs [ j ] -> name , arg ) )"		6112888	0					
ANR	6112915	Condition	"! strcmp ( procs [ j ] -> name , arg )"	301:6:6135:6163	6112888	0	True				
ANR	6112916	UnaryOperationExpression	"! strcmp ( procs [ j ] -> name , arg )"		6112888	0					
ANR	6112917	UnaryOperator	!		6112888	0					
ANR	6112918	CallExpression	"strcmp ( procs [ j ] -> name , arg )"		6112888	1					
ANR	6112919	Callee	strcmp		6112888	0					
ANR	6112920	Identifier	strcmp		6112888	0					
ANR	6112921	ArgumentList	procs [ j ] -> name		6112888	1					
ANR	6112922	Argument	procs [ j ] -> name		6112888	0					
ANR	6112923	PtrMemberAccess	procs [ j ] -> name		6112888	0					
ANR	6112924	ArrayIndexing	procs [ j ]		6112888	0					
ANR	6112925	Identifier	procs		6112888	0					
ANR	6112926	Identifier	j		6112888	1					
ANR	6112927	Identifier	name		6112888	1					
ANR	6112928	Argument	arg		6112888	1					
ANR	6112929	Identifier	arg		6112888	0					
ANR	6112930	CompoundStatement		7:3:114:163	6112888	1					
ANR	6112931	ExpressionStatement	proc = procs [ j ]	302:3:6171:6186	6112888	0	True				
ANR	6112932	AssignmentExpression	proc = procs [ j ]		6112888	0		=			
ANR	6112933	Identifier	proc		6112888	0					
ANR	6112934	ArrayIndexing	procs [ j ]		6112888	1					
ANR	6112935	Identifier	procs		6112888	0					
ANR	6112936	Identifier	j		6112888	1					
ANR	6112937	IdentifierDeclStatement	"D printf ( ""SET PROC:(%s)(%s)\\n"" , arg , proc -> name ) ;"	303:3:6191:6240	6112888	1	True				
ANR	6112938	IdentifierDecl	"printf ( ""SET PROC:(%s)(%s)\\n"" , arg , proc -> name )"		6112888	0					
ANR	6112939	IdentifierDeclType	D		6112888	0					
ANR	6112940	Identifier	printf		6112888	1					
ANR	6112941	Expression	"""SET PROC:(%s)(%s)\\n"" , arg , proc -> name"		6112888	2					
ANR	6112942	PrimaryExpression	"""SET PROC:(%s)(%s)\\n"""		6112888	0					
ANR	6112943	Expression	"arg , proc -> name"		6112888	1					
ANR	6112944	Identifier	arg		6112888	0					
ANR	6112945	PtrMemberAccess	proc -> name		6112888	1					
ANR	6112946	Identifier	proc		6112888	0					
ANR	6112947	Identifier	name		6112888	1					
ANR	6112948	BreakStatement	break ;	304:3:6245:6250	6112888	2	True				
ANR	6112949	IfStatement	if ( arg && * arg && ! procs [ j ] && fail )		6112888	2					
ANR	6112950	Condition	arg && * arg && ! procs [ j ] && fail	307:5:6264:6295	6112888	0	True				
ANR	6112951	AndExpression	arg && * arg && ! procs [ j ] && fail		6112888	0		&&			
ANR	6112952	Identifier	arg		6112888	0					
ANR	6112953	AndExpression	* arg && ! procs [ j ] && fail		6112888	1		&&			
ANR	6112954	UnaryOperationExpression	* arg		6112888	0					
ANR	6112955	UnaryOperator	*		6112888	0					
ANR	6112956	Identifier	arg		6112888	1					
ANR	6112957	AndExpression	! procs [ j ] && fail		6112888	1		&&			
ANR	6112958	UnaryOperationExpression	! procs [ j ]		6112888	0					
ANR	6112959	UnaryOperator	!		6112888	0					
ANR	6112960	ArrayIndexing	procs [ j ]		6112888	1					
ANR	6112961	Identifier	procs		6112888	0					
ANR	6112962	Identifier	j		6112888	1					
ANR	6112963	Identifier	fail		6112888	1					
ANR	6112964	CompoundStatement		11:39:221:221	6112888	1					
ANR	6112965	ExpressionStatement	"fprintf ( stderr , ""Invalid preprocessor name '%s'\\n"" , arg )"	308:2:6302:6359	6112888	0	True				
ANR	6112966	CallExpression	"fprintf ( stderr , ""Invalid preprocessor name '%s'\\n"" , arg )"		6112888	0					
ANR	6112967	Callee	fprintf		6112888	0					
ANR	6112968	Identifier	fprintf		6112888	0					
ANR	6112969	ArgumentList	stderr		6112888	1					
ANR	6112970	Argument	stderr		6112888	0					
ANR	6112971	Identifier	stderr		6112888	0					
ANR	6112972	Argument	"""Invalid preprocessor name '%s'\\n"""		6112888	1					
ANR	6112973	PrimaryExpression	"""Invalid preprocessor name '%s'\\n"""		6112888	0					
ANR	6112974	Argument	arg		6112888	2					
ANR	6112975	Identifier	arg		6112888	0					
ANR	6112976	ReturnStatement	return ;	309:2:6363:6369	6112888	1	True				
ANR	6112977	IfStatement	if ( ! proc )		6112888	3					
ANR	6112978	Condition	! proc	311:5:6379:6383	6112888	0	True				
ANR	6112979	UnaryOperationExpression	! proc		6112888	0					
ANR	6112980	UnaryOperator	!		6112888	0					
ANR	6112981	Identifier	proc		6112888	1					
ANR	6112982	CompoundStatement		15:12:309:309	6112888	1					
ANR	6112983	ExpressionStatement	proc = p	312:2:6390:6398	6112888	0	True				
ANR	6112984	AssignmentExpression	proc = p		6112888	0		=			
ANR	6112985	Identifier	proc		6112888	0					
ANR	6112986	Identifier	p		6112888	1					
ANR	6112987	IfStatement	if ( proc )		6112888	4					
ANR	6112988	Condition	proc	314:5:6408:6411	6112888	0	True				
ANR	6112989	Identifier	proc		6112888	0					
ANR	6112990	CompoundStatement		18:11:337:337	6112888	1					
ANR	6112991	ExpressionStatement	proc -> state . lineno = 1	315:2:6418:6440	6112888	0	True				
ANR	6112992	AssignmentExpression	proc -> state . lineno = 1		6112888	0		=			
ANR	6112993	MemberAccess	proc -> state . lineno		6112888	0					
ANR	6112994	PtrMemberAccess	proc -> state		6112888	0					
ANR	6112995	Identifier	proc		6112888	0					
ANR	6112996	Identifier	state		6112888	1					
ANR	6112997	Identifier	lineno		6112888	1					
ANR	6112998	PrimaryExpression	1		6112888	1					
ANR	6112999	ExpressionStatement	proc -> state . ifl = 0	316:2:6444:6463	6112888	1	True				
ANR	6113000	AssignmentExpression	proc -> state . ifl = 0		6112888	0		=			
ANR	6113001	MemberAccess	proc -> state . ifl		6112888	0					
ANR	6113002	PtrMemberAccess	proc -> state		6112888	0					
ANR	6113003	Identifier	proc		6112888	0					
ANR	6113004	Identifier	state		6112888	1					
ANR	6113005	Identifier	ifl		6112888	1					
ANR	6113006	PrimaryExpression	0		6112888	1					
ANR	6113007	ForStatement	for ( i = 0 ; i < MAXIFL ; i ++ )		6112888	2					
ANR	6113008	ForInit	i = 0 ;	317:7:6472:6477	6112888	0	True				
ANR	6113009	AssignmentExpression	i = 0		6112888	0		=			
ANR	6113010	Identifier	i		6112888	0					
ANR	6113011	PrimaryExpression	0		6112888	1					
ANR	6113012	Condition	i < MAXIFL	317:14:6479:6488	6112888	1	True				
ANR	6113013	RelationalExpression	i < MAXIFL		6112888	0		<			
ANR	6113014	Identifier	i		6112888	0					
ANR	6113015	Identifier	MAXIFL		6112888	1					
ANR	6113016	PostIncDecOperationExpression	i ++	317:26:6491:6493	6112888	2	True				
ANR	6113017	Identifier	i		6112888	0					
ANR	6113018	IncDec	++		6112888	1					
ANR	6113019	CompoundStatement		21:31:419:419	6112888	3					
ANR	6113020	ExpressionStatement	proc -> state . echo [ i ] = proc -> default_echo	318:3:6501:6541	6112888	0	True				
ANR	6113021	AssignmentExpression	proc -> state . echo [ i ] = proc -> default_echo		6112888	0		=			
ANR	6113022	ArrayIndexing	proc -> state . echo [ i ]		6112888	0					
ANR	6113023	MemberAccess	proc -> state . echo		6112888	0					
ANR	6113024	PtrMemberAccess	proc -> state		6112888	0					
ANR	6113025	Identifier	proc		6112888	0					
ANR	6113026	Identifier	state		6112888	1					
ANR	6113027	Identifier	echo		6112888	1					
ANR	6113028	Identifier	i		6112888	1					
ANR	6113029	PtrMemberAccess	proc -> default_echo		6112888	1					
ANR	6113030	Identifier	proc		6112888	0					
ANR	6113031	Identifier	default_echo		6112888	1					
ANR	6113032	ExpressionStatement	tags = ( struct Tag * ) proc -> tags	321:2:6585:6615	6112888	3	True				
ANR	6113033	AssignmentExpression	tags = ( struct Tag * ) proc -> tags		6112888	0		=			
ANR	6113034	Identifier	tags		6112888	0					
ANR	6113035	CastExpression	( struct Tag * ) proc -> tags		6112888	1					
ANR	6113036	CastTarget	struct Tag *		6112888	0					
ANR	6113037	PtrMemberAccess	proc -> tags		6112888	1					
ANR	6113038	Identifier	proc		6112888	0					
ANR	6113039	Identifier	tags		6112888	1					
ANR	6113040	ReturnType	S_API void		6112888	1					
ANR	6113041	Identifier	spp_proc_set		6112888	2					
ANR	6113042	ParameterList	"struct Proc * p , char * arg , int fail"		6112888	3					
ANR	6113043	Parameter	struct Proc * p	297:24:6039:6052	6112888	0	True				
ANR	6113044	ParameterType	struct Proc *		6112888	0					
ANR	6113045	Identifier	p		6112888	1					
ANR	6113046	Parameter	char * arg	297:40:6055:6063	6112888	1	True				
ANR	6113047	ParameterType	char *		6112888	0					
ANR	6113048	Identifier	arg		6112888	1					
ANR	6113049	Parameter	int fail	297:51:6066:6073	6112888	2	True				
ANR	6113050	ParameterType	int		6112888	0					
ANR	6113051	Identifier	fail		6112888	1					
ANR	6113052	CFGEntryNode	ENTRY		6112888		True				
ANR	6113053	CFGExitNode	EXIT		6112888		True				
ANR	6113054	Symbol	procs		6112888						
ANR	6113055	Symbol	printf		6112888						
ANR	6113056	Symbol	* * procs		6112888						
ANR	6113057	Symbol	proc -> default_echo		6112888						
ANR	6113058	Symbol	proc -> state . echo		6112888						
ANR	6113059	Symbol	arg		6112888						
ANR	6113060	Symbol	procs [ j ] -> name		6112888						
ANR	6113061	Symbol	* * proc		6112888						
ANR	6113062	Symbol	proc -> tags		6112888						
ANR	6113063	Symbol	proc -> state . lineno		6112888						
ANR	6113064	Symbol	strcmp		6112888						
ANR	6113065	Symbol	* * j		6112888						
ANR	6113066	Symbol	proc		6112888						
ANR	6113067	Symbol	proc -> state		6112888						
ANR	6113068	Symbol	* proc -> state . echo		6112888						
ANR	6113069	Symbol	* procs		6112888						
ANR	6113070	Symbol	proc -> state . ifl		6112888						
ANR	6113071	Symbol	i		6112888						
ANR	6113072	Symbol	MAXIFL		6112888						
ANR	6113073	Symbol	j		6112888						
ANR	6113074	Symbol	stderr		6112888						
ANR	6113075	Symbol	* proc		6112888						
ANR	6113076	Symbol	tags		6112888						
ANR	6113077	Symbol	p		6112888						
ANR	6113078	Symbol	fail		6112888						
ANR	6113079	Symbol	* i		6112888						
ANR	6113080	Symbol	* j		6112888						
ANR	6113081	Symbol	* proc -> state		6112888						
ANR	6113082	Symbol	* arg		6112888						
ANR	6113083	Function	out_printf	325:0:6623:6907							
ANR	6113084	FunctionDef	"out_printf (Output * out , char * str)"		6113083	0					
ANR	6113085	CompoundStatement		325:45:6668:6907	6113083	0					
ANR	6113086	IdentifierDeclStatement	va_list ap ;	326:1:6671:6681	6113083	0	True				
ANR	6113087	IdentifierDecl	ap		6113083	0					
ANR	6113088	IdentifierDeclType	va_list		6113083	0					
ANR	6113089	Identifier	ap		6113083	1					
ANR	6113090	ExpressionStatement	"va_start ( ap , str )"	327:1:6684:6702	6113083	1	True				
ANR	6113091	CallExpression	"va_start ( ap , str )"		6113083	0					
ANR	6113092	Callee	va_start		6113083	0					
ANR	6113093	Identifier	va_start		6113083	0					
ANR	6113094	ArgumentList	ap		6113083	1					
ANR	6113095	Argument	ap		6113083	0					
ANR	6113096	Identifier	ap		6113083	0					
ANR	6113097	Argument	str		6113083	1					
ANR	6113098	Identifier	str		6113083	0					
ANR	6113099	IfStatement	if ( out -> fout )		6113083	2					
ANR	6113100	Condition	out -> fout	328:5:6709:6717	6113083	0	True				
ANR	6113101	PtrMemberAccess	out -> fout		6113083	0					
ANR	6113102	Identifier	out		6113083	0					
ANR	6113103	Identifier	fout		6113083	1					
ANR	6113104	CompoundStatement		4:16:51:51	6113083	1					
ANR	6113105	ExpressionStatement	"vfprintf ( out -> fout , str , ap )"	329:2:6724:6753	6113083	0	True				
ANR	6113106	CallExpression	"vfprintf ( out -> fout , str , ap )"		6113083	0					
ANR	6113107	Callee	vfprintf		6113083	0					
ANR	6113108	Identifier	vfprintf		6113083	0					
ANR	6113109	ArgumentList	out -> fout		6113083	1					
ANR	6113110	Argument	out -> fout		6113083	0					
ANR	6113111	PtrMemberAccess	out -> fout		6113083	0					
ANR	6113112	Identifier	out		6113083	0					
ANR	6113113	Identifier	fout		6113083	1					
ANR	6113114	Argument	str		6113083	1					
ANR	6113115	Identifier	str		6113083	0					
ANR	6113116	Argument	ap		6113083	2					
ANR	6113117	Identifier	ap		6113083	0					
ANR	6113118	ElseStatement	else		6113083	0					
ANR	6113119	CompoundStatement		7:2:98:112	6113083	0					
ANR	6113120	IdentifierDeclStatement	char tmp [ 4096 ] ;	331:2:6767:6781	6113083	0	True				
ANR	6113121	IdentifierDecl	tmp [ 4096 ]		6113083	0					
ANR	6113122	IdentifierDeclType	char [ 4096 ]		6113083	0					
ANR	6113123	Identifier	tmp		6113083	1					
ANR	6113124	PrimaryExpression	4096		6113083	2					
ANR	6113125	ExpressionStatement	"vsnprintf ( tmp , sizeof ( tmp ) , str , ap )"	332:2:6785:6823	6113083	1	True				
ANR	6113126	CallExpression	"vsnprintf ( tmp , sizeof ( tmp ) , str , ap )"		6113083	0					
ANR	6113127	Callee	vsnprintf		6113083	0					
ANR	6113128	Identifier	vsnprintf		6113083	0					
ANR	6113129	ArgumentList	tmp		6113083	1					
ANR	6113130	Argument	tmp		6113083	0					
ANR	6113131	Identifier	tmp		6113083	0					
ANR	6113132	Argument	sizeof ( tmp )		6113083	1					
ANR	6113133	SizeofExpression	sizeof ( tmp )		6113083	0					
ANR	6113134	Sizeof	sizeof		6113083	0					
ANR	6113135	SizeofOperand	tmp		6113083	1					
ANR	6113136	Argument	str		6113083	2					
ANR	6113137	Identifier	str		6113083	0					
ANR	6113138	Argument	ap		6113083	3					
ANR	6113139	Identifier	ap		6113083	0					
ANR	6113140	ExpressionStatement	tmp [ sizeof ( tmp ) - 1 ] = 0	333:2:6827:6852	6113083	2	True				
ANR	6113141	AssignmentExpression	tmp [ sizeof ( tmp ) - 1 ] = 0		6113083	0		=			
ANR	6113142	ArrayIndexing	tmp [ sizeof ( tmp ) - 1 ]		6113083	0					
ANR	6113143	Identifier	tmp		6113083	0					
ANR	6113144	AdditiveExpression	sizeof ( tmp ) - 1		6113083	1		-			
ANR	6113145	SizeofExpression	sizeof ( tmp )		6113083	0					
ANR	6113146	Sizeof	sizeof		6113083	0					
ANR	6113147	SizeofOperand	tmp		6113083	1					
ANR	6113148	PrimaryExpression	1		6113083	1					
ANR	6113149	PrimaryExpression	0		6113083	1					
ANR	6113150	ExpressionStatement	"r_strbuf_append ( out -> cout , tmp )"	334:2:6856:6888	6113083	3	True				
ANR	6113151	CallExpression	"r_strbuf_append ( out -> cout , tmp )"		6113083	0					
ANR	6113152	Callee	r_strbuf_append		6113083	0					
ANR	6113153	Identifier	r_strbuf_append		6113083	0					
ANR	6113154	ArgumentList	out -> cout		6113083	1					
ANR	6113155	Argument	out -> cout		6113083	0					
ANR	6113156	PtrMemberAccess	out -> cout		6113083	0					
ANR	6113157	Identifier	out		6113083	0					
ANR	6113158	Identifier	cout		6113083	1					
ANR	6113159	Argument	tmp		6113083	1					
ANR	6113160	Identifier	tmp		6113083	0					
ANR	6113161	ExpressionStatement	va_end ( ap )	336:1:6894:6905	6113083	3	True				
ANR	6113162	CallExpression	va_end ( ap )		6113083	0					
ANR	6113163	Callee	va_end		6113083	0					
ANR	6113164	Identifier	va_end		6113083	0					
ANR	6113165	ArgumentList	ap		6113083	1					
ANR	6113166	Argument	ap		6113083	0					
ANR	6113167	Identifier	ap		6113083	0					
ANR	6113168	ReturnType	void		6113083	1					
ANR	6113169	Identifier	out_printf		6113083	2					
ANR	6113170	ParameterList	"Output * out , char * str"		6113083	3					
ANR	6113171	Parameter	Output * out	325:16:6639:6649	6113083	0	True				
ANR	6113172	ParameterType	Output *		6113083	0					
ANR	6113173	Identifier	out		6113083	1					
ANR	6113174	Parameter	char * str	325:29:6652:6660	6113083	1	True				
ANR	6113175	ParameterType	char *		6113083	0					
ANR	6113176	Identifier	str		6113083	1					
ANR	6113177	CFGEntryNode	ENTRY		6113083		True				
ANR	6113178	CFGExitNode	EXIT		6113083		True				
ANR	6113179	Symbol	str		6113083						
ANR	6113180	Symbol	out -> cout		6113083						
ANR	6113181	Symbol	* tmp		6113083						
ANR	6113182	Symbol	tmp		6113083						
ANR	6113183	Symbol	* out		6113083						
ANR	6113184	Symbol	out -> fout		6113083						
ANR	6113185	Symbol	out		6113083						
ANR	6113186	Symbol	ap		6113083						
