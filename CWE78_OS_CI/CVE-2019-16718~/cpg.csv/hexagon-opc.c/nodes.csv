command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1555991	File	data/converged/CVE-2019-16718~_radare2/hexagon-opc.c								
ANR	1555992	ClassDef	<unnamed>	36:0:1171:3116							
ANR	1555993	DeclStmt									
ANR	1555994	Decl							long	"long ( long * , unsigned , int ATTRIBUTE_UNUSED )"	hexagon_extend
ANR	1555995	DeclStmt									
ANR	1555996	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg
ANR	1555997	DeclStmt									
ANR	1555998	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg
ANR	1555999	DeclStmt									
ANR	1556000	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg16
ANR	1556001	DeclStmt									
ANR	1556002	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg16
ANR	1556003	DeclStmt									
ANR	1556004	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg8
ANR	1556005	DeclStmt									
ANR	1556006	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg8
ANR	1556007	DeclStmt									
ANR	1556008	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_nreg
ANR	1556009	DeclStmt									
ANR	1556010	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_preg
ANR	1556011	DeclStmt									
ANR	1556012	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_creg
ANR	1556013	DeclStmt									
ANR	1556014	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dcreg
ANR	1556015	DeclStmt									
ANR	1556016	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_greg
ANR	1556017	DeclStmt									
ANR	1556018	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dgreg
ANR	1556019	DeclStmt									
ANR	1556020	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_sreg
ANR	1556021	DeclStmt									
ANR	1556022	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dsreg
ANR	1556023	DeclStmt									
ANR	1556024	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_mreg
ANR	1556025	DeclStmt									
ANR	1556026	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_splr
ANR	1556027	DeclStmt									
ANR	1556028	Decl							int	int	hexagon_verify_hw
ANR	1556029	DeclStmt									
ANR	1556030	Decl							hexagon_insn	hexagon_insn	hexagon_nop
ANR	1556031	Decl							hexagon_insn	hexagon_insn	hexagon_kext
ANR	1556032	DeclStmt									
ANR	1556033	Decl							hexagon_insn	hexagon_insn	hexagon_nop_mask
ANR	1556034	Decl							hexagon_insn	hexagon_insn	hexagon_kext_mask
ANR	1556035	DeclStmt									
ANR	1556036	Decl							const hexagon_operand	const hexagon_operand [ ]	hexagon_operands
ANR	1556037	DeclStmt									
ANR	1556038	Decl							const size_t	const size_t	hexagon_operand_count
ANR	1556039	DeclStmt									
ANR	1556040	Decl							hexagon_opcode	hexagon_opcode *	hexagon_opcodes
ANR	1556041	DeclStmt									
ANR	1556042	Decl							size_t	size_t	hexagon_opcodes_count
ANR	1556043	DeclStmt									
ANR	1556044	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v2
ANR	1556045	DeclStmt									
ANR	1556046	Decl							const size_t	const size_t	hexagon_opcodes_count_v2
ANR	1556047	DeclStmt									
ANR	1556048	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v3
ANR	1556049	DeclStmt									
ANR	1556050	Decl							const size_t	const size_t	hexagon_opcodes_count_v3
ANR	1556051	DeclStmt									
ANR	1556052	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v4
ANR	1556053	DeclStmt									
ANR	1556054	Decl							const size_t	const size_t	hexagon_opcodes_count_v4
ANR	1556055	DeclStmt									
ANR	1556056	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v5
ANR	1556057	DeclStmt									
ANR	1556058	Decl							const size_t	const size_t	hexagon_opcodes_count_v5
ANR	1556059	DeclStmt									
ANR	1556060	Decl							hexagon_opcode	hexagon_opcode * [ HEXAGON_HASH_SIZE ]	opcode_map
ANR	1556061	DeclStmt									
ANR	1556062	Decl							size_t	size_t	hexagon_icode_hash_bits
ANR	1556063	DeclStmt									
ANR	1556064	Decl							hexagon_opcode	hexagon_opcode * *	icode_map
ANR	1556065	DeclStmt									
ANR	1556066	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_gp_regs
ANR	1556067	DeclStmt									
ANR	1556068	Decl							const size_t	const size_t	hexagon_gp_regs_count
ANR	1556069	DeclStmt									
ANR	1556070	Decl							hexagon_reg	hexagon_reg [ ]	hexagon_supervisor_regs
ANR	1556071	DeclStmt									
ANR	1556072	Decl							const size_t	const size_t	hexagon_supervisor_regs_count
ANR	1556073	DeclStmt									
ANR	1556074	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_control_regs
ANR	1556075	DeclStmt									
ANR	1556076	Decl							const size_t	const size_t	hexagon_control_regs_count
ANR	1556077	DeclStmt									
ANR	1556078	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_guest_regs
ANR	1556079	DeclStmt									
ANR	1556080	Decl							const size_t	const size_t	hexagon_guest_regs_count
ANR	1556081	Function	hexagon_extend	1150:0:50270:50755							
ANR	1556082	FunctionDef	"hexagon_extend (long * value , unsigned bits , int is_signed ATTRIBUTE_UNUSED)"		1556081	0					
ANR	1556083	CompoundStatement		1153:0:50351:50755	1556081	0					
ANR	1556084	IdentifierDeclStatement	long xvalue = 0 ;	1154:2:50355:50370	1556081	0	True				
ANR	1556085	IdentifierDecl	xvalue = 0		1556081	0					
ANR	1556086	IdentifierDeclType	long		1556081	0					
ANR	1556087	Identifier	xvalue		1556081	1					
ANR	1556088	AssignmentExpression	xvalue = 0		1556081	2		=			
ANR	1556089	Identifier	xvalue		1556081	0					
ANR	1556090	PrimaryExpression	0		1556081	1					
ANR	1556091	IfStatement	if ( bits < 6 )		1556081	1					
ANR	1556092	Condition	bits < 6	1156:6:50379:50386	1556081	0	True				
ANR	1556093	RelationalExpression	bits < 6		1556081	0		<			
ANR	1556094	Identifier	bits		1556081	0					
ANR	1556095	PrimaryExpression	6		1556081	1					
ANR	1556096	ReturnStatement	return ( 0 ) ;	1157:4:50393:50403	1556081	1	True				
ANR	1556097	PrimaryExpression	0		1556081	0					
ANR	1556098	IfStatement	if ( hexagon_if_arch_kext ( ) )		1556081	2					
ANR	1556099	Condition	hexagon_if_arch_kext ( )	1159:6:50412:50434	1556081	0	True				
ANR	1556100	CallExpression	hexagon_if_arch_kext ( )		1556081	0					
ANR	1556101	Callee	hexagon_if_arch_kext		1556081	0					
ANR	1556102	Identifier	hexagon_if_arch_kext		1556081	0					
ANR	1556103	ArgumentList			1556081	1					
ANR	1556104	CompoundStatement		8:4:89:89	1556081	1					
ANR	1556105	ExpressionStatement	xvalue = * value & ( ( ~0UL >> 6 ) << 6 )	1162:6:50542:50579	1556081	0	True				
ANR	1556106	AssignmentExpression	xvalue = * value & ( ( ~0UL >> 6 ) << 6 )		1556081	0		=			
ANR	1556107	Identifier	xvalue		1556081	0					
ANR	1556108	BitAndExpression	* value & ( ( ~0UL >> 6 ) << 6 )		1556081	1		&			
ANR	1556109	UnaryOperationExpression	* value		1556081	0					
ANR	1556110	UnaryOperator	*		1556081	0					
ANR	1556111	Identifier	value		1556081	1					
ANR	1556112	ShiftExpression	( ~0UL >> 6 ) << 6		1556081	1		<<			
ANR	1556113	ShiftExpression	~0UL >> 6		1556081	0		>>			
ANR	1556114	Identifier	~0UL		1556081	0					
ANR	1556115	PrimaryExpression	6		1556081	1					
ANR	1556116	PrimaryExpression	6		1556081	1					
ANR	1556117	ExpressionStatement	* value = * value & ~ ( ( ~0UL >> 6 ) << 6 )	1163:6:50587:50624	1556081	1	True				
ANR	1556118	AssignmentExpression	* value = * value & ~ ( ( ~0UL >> 6 ) << 6 )		1556081	0		=			
ANR	1556119	UnaryOperationExpression	* value		1556081	0					
ANR	1556120	UnaryOperator	*		1556081	0					
ANR	1556121	Identifier	value		1556081	1					
ANR	1556122	BitAndExpression	* value & ~ ( ( ~0UL >> 6 ) << 6 )		1556081	1		&			
ANR	1556123	UnaryOperationExpression	* value		1556081	0					
ANR	1556124	UnaryOperator	*		1556081	0					
ANR	1556125	Identifier	value		1556081	1					
ANR	1556126	UnaryOperationExpression	~ ( ( ~0UL >> 6 ) << 6 )		1556081	1					
ANR	1556127	UnaryOperator	~		1556081	0					
ANR	1556128	ShiftExpression	( ~0UL >> 6 ) << 6		1556081	1		<<			
ANR	1556129	ShiftExpression	~0UL >> 6		1556081	0		>>			
ANR	1556130	Identifier	~0UL		1556081	0					
ANR	1556131	PrimaryExpression	6		1556081	1					
ANR	1556132	PrimaryExpression	6		1556081	1					
ANR	1556133	ReturnStatement	return ( xvalue ) ;	1171:2:50738:50753	1556081	3	True				
ANR	1556134	Identifier	xvalue		1556081	0					
ANR	1556135	ReturnType	long		1556081	1					
ANR	1556136	Identifier	hexagon_extend		1556081	2					
ANR	1556137	ParameterList	"long * value , unsigned bits , int is_signed ATTRIBUTE_UNUSED"		1556081	3					
ANR	1556138	Parameter	long * value	1152:1:50291:50301	1556081	0	True				
ANR	1556139	ParameterType	long *		1556081	0					
ANR	1556140	Identifier	value		1556081	1					
ANR	1556141	Parameter	unsigned bits	1152:14:50304:50316	1556081	1	True				
ANR	1556142	ParameterType	unsigned		1556081	0					
ANR	1556143	Identifier	bits		1556081	1					
ANR	1556144	Parameter	int is_signed ATTRIBUTE_UNUSED	1152:29:50319:50348	1556081	2	True				
ANR	1556145	ParameterType	int is_signed		1556081	0					
ANR	1556146	Identifier	ATTRIBUTE_UNUSED		1556081	1					
ANR	1556147	CFGEntryNode	ENTRY		1556081		True				
ANR	1556148	CFGExitNode	EXIT		1556081		True				
ANR	1556149	Symbol	ATTRIBUTE_UNUSED		1556081						
ANR	1556150	Symbol	~0UL		1556081						
ANR	1556151	Symbol	* value		1556081						
ANR	1556152	Symbol	bits		1556081						
ANR	1556153	Symbol	hexagon_if_arch_kext		1556081						
ANR	1556154	Symbol	xvalue		1556081						
ANR	1556155	Symbol	value		1556081						
ANR	1556156	Function	hexagon_hash_opcode	1183:0:51061:54239							
ANR	1556157	FunctionDef	hexagon_hash_opcode (const char * syntax)		1556156	0					
ANR	1556158	CompoundStatement		1186:0:51115:54239	1556156	0					
ANR	1556159	IdentifierDeclStatement	"const char * p1 , * p2 , * pair , * peq ;"	1187:2:51119:51151	1556156	0	True				
ANR	1556160	IdentifierDecl	* p1		1556156	0					
ANR	1556161	IdentifierDeclType	const char *		1556156	0					
ANR	1556162	Identifier	p1		1556156	1					
ANR	1556163	IdentifierDecl	* p2		1556156	1					
ANR	1556164	IdentifierDeclType	const char *		1556156	0					
ANR	1556165	Identifier	p2		1556156	1					
ANR	1556166	IdentifierDecl	* pair		1556156	2					
ANR	1556167	IdentifierDeclType	const char *		1556156	0					
ANR	1556168	Identifier	pair		1556156	1					
ANR	1556169	IdentifierDecl	* peq		1556156	3					
ANR	1556170	IdentifierDeclType	const char *		1556156	0					
ANR	1556171	Identifier	peq		1556156	1					
ANR	1556172	IdentifierDeclStatement	size_t token ;	1188:2:51155:51167	1556156	1	True				
ANR	1556173	IdentifierDecl	token		1556156	0					
ANR	1556174	IdentifierDeclType	size_t		1556156	0					
ANR	1556175	Identifier	token		1556156	1					
ANR	1556176	IdentifierDeclStatement	int is_if ;	1189:2:51171:51180	1556156	2	True				
ANR	1556177	IdentifierDecl	is_if		1556156	0					
ANR	1556178	IdentifierDeclType	int		1556156	0					
ANR	1556179	Identifier	is_if		1556156	1					
ANR	1556180	IdentifierDeclStatement	char ch ;	1190:2:51184:51191	1556156	3	True				
ANR	1556181	IdentifierDecl	ch		1556156	0					
ANR	1556182	IdentifierDeclType	char		1556156	0					
ANR	1556183	Identifier	ch		1556156	1					
ANR	1556184	IfStatement	"if ( ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" ) )"		1556156	4					
ANR	1556185	Condition	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"	1192:6:51200:51299	1556156	0	True				
ANR	1556186	OrExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		1556156	0		||			
ANR	1556187	UnaryOperationExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" )"		1556156	0					
ANR	1556188	UnaryOperator	!		1556156	0					
ANR	1556189	CallExpression	"strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" )"		1556156	1					
ANR	1556190	Callee	strcmp		1556156	0					
ANR	1556191	Identifier	strcmp		1556156	0					
ANR	1556192	ArgumentList	syntax		1556156	1					
ANR	1556193	Argument	syntax		1556156	0					
ANR	1556194	Identifier	syntax		1556156	0					
ANR	1556195	Argument	"""Rd8 = #s6 ; Re8 = #S6"""		1556156	1					
ANR	1556196	PrimaryExpression	"""Rd8 = #s6 ; Re8 = #S6"""		1556156	0					
ANR	1556197	UnaryOperationExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		1556156	1					
ANR	1556198	UnaryOperator	!		1556156	0					
ANR	1556199	CallExpression	"strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		1556156	1					
ANR	1556200	Callee	strcmp		1556156	0					
ANR	1556201	Identifier	strcmp		1556156	0					
ANR	1556202	ArgumentList	syntax		1556156	1					
ANR	1556203	Argument	syntax		1556156	0					
ANR	1556204	Identifier	syntax		1556156	0					
ANR	1556205	Argument	"""Rd8 = #s6 ; Re8 = aslh (Rs8 )"""		1556156	1					
ANR	1556206	PrimaryExpression	"""Rd8 = #s6 ; Re8 = aslh (Rs8 )"""		1556156	0					
ANR	1556207	CompoundStatement		9:4:190:190	1556156	1					
ANR	1556208	ExpressionStatement	p1 = NULL	1195:6:51314:51323	1556156	0	True				
ANR	1556209	AssignmentExpression	p1 = NULL		1556156	0		=			
ANR	1556210	Identifier	p1		1556156	0					
ANR	1556211	Identifier	NULL		1556156	1					
ANR	1556212	ExpressionStatement	p2 = p1	1196:6:51331:51338	1556156	1	True				
ANR	1556213	AssignmentExpression	p2 = p1		1556156	0		=			
ANR	1556214	Identifier	p2		1556156	0					
ANR	1556215	Identifier	p1		1556156	1					
ANR	1556216	ExpressionStatement	"pair = strchr ( syntax , PACKET_PAIR )"	1199:2:51349:51384	1556156	5	True				
ANR	1556217	AssignmentExpression	"pair = strchr ( syntax , PACKET_PAIR )"		1556156	0		=			
ANR	1556218	Identifier	pair		1556156	0					
ANR	1556219	CallExpression	"strchr ( syntax , PACKET_PAIR )"		1556156	1					
ANR	1556220	Callee	strchr		1556156	0					
ANR	1556221	Identifier	strchr		1556156	0					
ANR	1556222	ArgumentList	syntax		1556156	1					
ANR	1556223	Argument	syntax		1556156	0					
ANR	1556224	Identifier	syntax		1556156	0					
ANR	1556225	Argument	PACKET_PAIR		1556156	1					
ANR	1556226	Identifier	PACKET_PAIR		1556156	0					
ANR	1556227	ExpressionStatement	"peq = strchr ( syntax , '=' )"	1200:2:51388:51415	1556156	6	True				
ANR	1556228	AssignmentExpression	"peq = strchr ( syntax , '=' )"		1556156	0		=			
ANR	1556229	Identifier	peq		1556156	0					
ANR	1556230	CallExpression	"strchr ( syntax , '=' )"		1556156	1					
ANR	1556231	Callee	strchr		1556156	0					
ANR	1556232	Identifier	strchr		1556156	0					
ANR	1556233	ArgumentList	syntax		1556156	1					
ANR	1556234	Argument	syntax		1556156	0					
ANR	1556235	Identifier	syntax		1556156	0					
ANR	1556236	Argument	'='		1556156	1					
ANR	1556237	PrimaryExpression	'='		1556156	0					
ANR	1556238	ExpressionStatement	"token = strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"	1202:2:51420:51485	1556156	7	True				
ANR	1556239	AssignmentExpression	"token = strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"		1556156	0		=			
ANR	1556240	Identifier	token		1556156	0					
ANR	1556241	CallExpression	"strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"		1556156	1					
ANR	1556242	Callee	strcspn		1556156	0					
ANR	1556243	Identifier	strcspn		1556156	0					
ANR	1556244	ArgumentList	syntax		1556156	1					
ANR	1556245	Argument	syntax		1556156	0					
ANR	1556246	Identifier	syntax		1556156	0					
ANR	1556247	Argument	""" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"""		1556156	1					
ANR	1556248	PrimaryExpression	""" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"""		1556156	0					
ANR	1556249	ExpressionStatement	"is_if = ! strncmp ( syntax , ""if"" , token )"	1203:2:51510:51548	1556156	8	True				
ANR	1556250	AssignmentExpression	"is_if = ! strncmp ( syntax , ""if"" , token )"		1556156	0		=			
ANR	1556251	Identifier	is_if		1556156	0					
ANR	1556252	UnaryOperationExpression	"! strncmp ( syntax , ""if"" , token )"		1556156	1					
ANR	1556253	UnaryOperator	!		1556156	0					
ANR	1556254	CallExpression	"strncmp ( syntax , ""if"" , token )"		1556156	1					
ANR	1556255	Callee	strncmp		1556156	0					
ANR	1556256	Identifier	strncmp		1556156	0					
ANR	1556257	ArgumentList	syntax		1556156	1					
ANR	1556258	Argument	syntax		1556156	0					
ANR	1556259	Identifier	syntax		1556156	0					
ANR	1556260	Argument	"""if"""		1556156	1					
ANR	1556261	PrimaryExpression	"""if"""		1556156	0					
ANR	1556262	Argument	token		1556156	2					
ANR	1556263	Identifier	token		1556156	0					
ANR	1556264	IfStatement	"if ( ( p1 = strncmp ( syntax , ""mem"" , 3 ) ) )"		1556156	9					
ANR	1556265	Condition	"p1 = strncmp ( syntax , ""mem"" , 3 )"	1206:6:51563:51595	1556156	0	True				
ANR	1556266	AssignmentExpression	"p1 = strncmp ( syntax , ""mem"" , 3 )"		1556156	0		=			
ANR	1556267	Identifier	p1		1556156	0					
ANR	1556268	CallExpression	"strncmp ( syntax , ""mem"" , 3 )"		1556156	1					
ANR	1556269	Callee	strncmp		1556156	0					
ANR	1556270	Identifier	strncmp		1556156	0					
ANR	1556271	ArgumentList	syntax		1556156	1					
ANR	1556272	Argument	syntax		1556156	0					
ANR	1556273	Identifier	syntax		1556156	0					
ANR	1556274	Argument	"""mem"""		1556156	1					
ANR	1556275	PrimaryExpression	"""mem"""		1556156	0					
ANR	1556276	Argument	3		1556156	2					
ANR	1556277	PrimaryExpression	3		1556156	0					
ANR	1556278	CompoundStatement		22:4:486:486	1556156	1					
ANR	1556279	IfStatement	if ( peq )		1556156	0					
ANR	1556280	Condition	peq	1209:10:51644:51646	1556156	0	True				
ANR	1556281	Identifier	peq		1556156	0					
ANR	1556282	ReturnStatement	return ( pif ? ( pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B ) : HEXAGON_HASH_C ) ;	1211:8:51709:51777	1556156	1	True				
ANR	1556283	ConditionalExpression	pif ? ( pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B ) : HEXAGON_HASH_C		1556156	0					
ANR	1556284	Condition	pif		1556156	0					
ANR	1556285	Identifier	pif		1556156	0					
ANR	1556286	ConditionalExpression	pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B		1556156	1					
ANR	1556287	Condition	pnew		1556156	0					
ANR	1556288	Identifier	pnew		1556156	0					
ANR	1556289	Identifier	HEXAGON_HASH_A		1556156	1					
ANR	1556290	Identifier	HEXAGON_HASH_B		1556156	2					
ANR	1556291	Identifier	HEXAGON_HASH_C		1556156	2					
ANR	1556292	ElseStatement	else		1556156	0					
ANR	1556293	ReturnStatement	return ( pif ? ( pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E ) : HEXAGON_HASH_F ) ;	1214:8:51849:51917	1556156	0	True				
ANR	1556294	ConditionalExpression	pif ? ( pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E ) : HEXAGON_HASH_F		1556156	0					
ANR	1556295	Condition	pif		1556156	0					
ANR	1556296	Identifier	pif		1556156	0					
ANR	1556297	ConditionalExpression	pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E		1556156	1					
ANR	1556298	Condition	pnew		1556156	0					
ANR	1556299	Identifier	pnew		1556156	0					
ANR	1556300	Identifier	HEXAGON_HASH_D		1556156	1					
ANR	1556301	Identifier	HEXAGON_HASH_E		1556156	2					
ANR	1556302	Identifier	HEXAGON_HASH_F		1556156	2					
ANR	1556303	IfStatement	if ( pair )		1556156	10					
ANR	1556304	Condition	pair	1218:6:51939:51942	1556156	0	True				
ANR	1556305	Identifier	pair		1556156	0					
ANR	1556306	CompoundStatement		34:4:833:833	1556156	1					
ANR	1556307	ExpressionStatement	p1 = pair + 1	1220:6:51957:51970	1556156	0	True				
ANR	1556308	AssignmentExpression	p1 = pair + 1		1556156	0		=			
ANR	1556309	Identifier	p1		1556156	0					
ANR	1556310	AdditiveExpression	pair + 1		1556156	1		+			
ANR	1556311	Identifier	pair		1556156	0					
ANR	1556312	PrimaryExpression	1		1556156	1					
ANR	1556313	WhileStatement	while ( ISSPACE ( * p1 ) )		1556156	1					
ANR	1556314	Condition	ISSPACE ( * p1 )	1221:13:51985:51997	1556156	0	True				
ANR	1556315	CallExpression	ISSPACE ( * p1 )		1556156	0					
ANR	1556316	Callee	ISSPACE		1556156	0					
ANR	1556317	Identifier	ISSPACE		1556156	0					
ANR	1556318	ArgumentList	* p1		1556156	1					
ANR	1556319	Argument	* p1		1556156	0					
ANR	1556320	UnaryOperationExpression	* p1		1556156	0					
ANR	1556321	UnaryOperator	*		1556156	0					
ANR	1556322	Identifier	p1		1556156	1					
ANR	1556323	ExpressionStatement	p1 ++	1222:8:52008:52012	1556156	1	True				
ANR	1556324	PostIncDecOperationExpression	p1 ++		1556156	0					
ANR	1556325	Identifier	p1		1556156	0					
ANR	1556326	IncDec	++		1556156	1					
ANR	1556327	IfStatement	"if ( ! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) ) )"		1556156	2					
ANR	1556328	Condition	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"	1224:10:52025:52302	1556156	0	True				
ANR	1556329	OrExpression	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		1556156	0		||			
ANR	1556330	UnaryOperationExpression	"! strncmp ( p1 , ""jump"" , 4 )"		1556156	0					
ANR	1556331	UnaryOperator	!		1556156	0					
ANR	1556332	CallExpression	"strncmp ( p1 , ""jump"" , 4 )"		1556156	1					
ANR	1556333	Callee	strncmp		1556156	0					
ANR	1556334	Identifier	strncmp		1556156	0					
ANR	1556335	ArgumentList	p1		1556156	1					
ANR	1556336	Argument	p1		1556156	0					
ANR	1556337	Identifier	p1		1556156	0					
ANR	1556338	Argument	"""jump"""		1556156	1					
ANR	1556339	PrimaryExpression	"""jump"""		1556156	0					
ANR	1556340	Argument	4		1556156	2					
ANR	1556341	PrimaryExpression	4		1556156	0					
ANR	1556342	OrExpression	"! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		1556156	1		||			
ANR	1556343	UnaryOperationExpression	"! strncmp ( syntax , ""jump"" , 4 )"		1556156	0					
ANR	1556344	UnaryOperator	!		1556156	0					
ANR	1556345	CallExpression	"strncmp ( syntax , ""jump"" , 4 )"		1556156	1					
ANR	1556346	Callee	strncmp		1556156	0					
ANR	1556347	Identifier	strncmp		1556156	0					
ANR	1556348	ArgumentList	syntax		1556156	1					
ANR	1556349	Argument	syntax		1556156	0					
ANR	1556350	Identifier	syntax		1556156	0					
ANR	1556351	Argument	"""jump"""		1556156	1					
ANR	1556352	PrimaryExpression	"""jump"""		1556156	0					
ANR	1556353	Argument	4		1556156	2					
ANR	1556354	PrimaryExpression	4		1556156	0					
ANR	1556355	OrExpression	"! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		1556156	1		||			
ANR	1556356	UnaryOperationExpression	"! strncmp ( p1 , ""call"" , 4 )"		1556156	0					
ANR	1556357	UnaryOperator	!		1556156	0					
ANR	1556358	CallExpression	"strncmp ( p1 , ""call"" , 4 )"		1556156	1					
ANR	1556359	Callee	strncmp		1556156	0					
ANR	1556360	Identifier	strncmp		1556156	0					
ANR	1556361	ArgumentList	p1		1556156	1					
ANR	1556362	Argument	p1		1556156	0					
ANR	1556363	Identifier	p1		1556156	0					
ANR	1556364	Argument	"""call"""		1556156	1					
ANR	1556365	PrimaryExpression	"""call"""		1556156	0					
ANR	1556366	Argument	4		1556156	2					
ANR	1556367	PrimaryExpression	4		1556156	0					
ANR	1556368	OrExpression	"! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		1556156	1		||			
ANR	1556369	UnaryOperationExpression	"! strncmp ( syntax , ""call"" , 4 )"		1556156	0					
ANR	1556370	UnaryOperator	!		1556156	0					
ANR	1556371	CallExpression	"strncmp ( syntax , ""call"" , 4 )"		1556156	1					
ANR	1556372	Callee	strncmp		1556156	0					
ANR	1556373	Identifier	strncmp		1556156	0					
ANR	1556374	ArgumentList	syntax		1556156	1					
ANR	1556375	Argument	syntax		1556156	0					
ANR	1556376	Identifier	syntax		1556156	0					
ANR	1556377	Argument	"""call"""		1556156	1					
ANR	1556378	PrimaryExpression	"""call"""		1556156	0					
ANR	1556379	Argument	4		1556156	2					
ANR	1556380	PrimaryExpression	4		1556156	0					
ANR	1556381	AndExpression	"( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) )"		1556156	1		&&			
ANR	1556382	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		1556156	0		||			
ANR	1556383	CallExpression	hexagon_if_arch_v4 ( )		1556156	0					
ANR	1556384	Callee	hexagon_if_arch_v4		1556156	0					
ANR	1556385	Identifier	hexagon_if_arch_v4		1556156	0					
ANR	1556386	ArgumentList			1556156	1					
ANR	1556387	CallExpression	hexagon_if_arch_v5 ( )		1556156	1					
ANR	1556388	Callee	hexagon_if_arch_v5		1556156	0					
ANR	1556389	Identifier	hexagon_if_arch_v5		1556156	0					
ANR	1556390	ArgumentList			1556156	1					
ANR	1556391	OrExpression	"! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token )"		1556156	1		||			
ANR	1556392	UnaryOperationExpression	"! strncmp ( p1 , ""return"" , token )"		1556156	0					
ANR	1556393	UnaryOperator	!		1556156	0					
ANR	1556394	CallExpression	"strncmp ( p1 , ""return"" , token )"		1556156	1					
ANR	1556395	Callee	strncmp		1556156	0					
ANR	1556396	Identifier	strncmp		1556156	0					
ANR	1556397	ArgumentList	p1		1556156	1					
ANR	1556398	Argument	p1		1556156	0					
ANR	1556399	Identifier	p1		1556156	0					
ANR	1556400	Argument	"""return"""		1556156	1					
ANR	1556401	PrimaryExpression	"""return"""		1556156	0					
ANR	1556402	Argument	token		1556156	2					
ANR	1556403	Identifier	token		1556156	0					
ANR	1556404	UnaryOperationExpression	"! strncmp ( syntax , ""return"" , token )"		1556156	1					
ANR	1556405	UnaryOperator	!		1556156	0					
ANR	1556406	CallExpression	"strncmp ( syntax , ""return"" , token )"		1556156	1					
ANR	1556407	Callee	strncmp		1556156	0					
ANR	1556408	Identifier	strncmp		1556156	0					
ANR	1556409	ArgumentList	syntax		1556156	1					
ANR	1556410	Argument	syntax		1556156	0					
ANR	1556411	Identifier	syntax		1556156	0					
ANR	1556412	Argument	"""return"""		1556156	1					
ANR	1556413	PrimaryExpression	"""return"""		1556156	0					
ANR	1556414	Argument	token		1556156	2					
ANR	1556415	Identifier	token		1556156	0					
ANR	1556416	ReturnStatement	return ( is_if ? HEXAGON_HASH_G : HEXAGON_HASH_H ) ;	1229:8:52368:52414	1556156	1	True				
ANR	1556417	ConditionalExpression	is_if ? HEXAGON_HASH_G : HEXAGON_HASH_H		1556156	0					
ANR	1556418	Condition	is_if		1556156	0					
ANR	1556419	Identifier	is_if		1556156	0					
ANR	1556420	Identifier	HEXAGON_HASH_G		1556156	1					
ANR	1556421	Identifier	HEXAGON_HASH_H		1556156	2					
ANR	1556422	ElseStatement	else		1556156	0					
ANR	1556423	CompoundStatement		47:4:1317:1317	1556156	0					
ANR	1556424	ExpressionStatement	p1 = syntax	1233:6:52441:52452	1556156	0	True				
ANR	1556425	AssignmentExpression	p1 = syntax		1556156	0		=			
ANR	1556426	Identifier	p1		1556156	0					
ANR	1556427	Identifier	syntax		1556156	1					
ANR	1556428	IfStatement	"if ( ! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) ) )"		1556156	1					
ANR	1556429	Condition	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"	1235:10:52465:52640	1556156	0	True				
ANR	1556430	OrExpression	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"		1556156	0		||			
ANR	1556431	UnaryOperationExpression	"! strncmp ( p1 , ""jump"" , 4 )"		1556156	0					
ANR	1556432	UnaryOperator	!		1556156	0					
ANR	1556433	CallExpression	"strncmp ( p1 , ""jump"" , 4 )"		1556156	1					
ANR	1556434	Callee	strncmp		1556156	0					
ANR	1556435	Identifier	strncmp		1556156	0					
ANR	1556436	ArgumentList	p1		1556156	1					
ANR	1556437	Argument	p1		1556156	0					
ANR	1556438	Identifier	p1		1556156	0					
ANR	1556439	Argument	"""jump"""		1556156	1					
ANR	1556440	PrimaryExpression	"""jump"""		1556156	0					
ANR	1556441	Argument	4		1556156	2					
ANR	1556442	PrimaryExpression	4		1556156	0					
ANR	1556443	OrExpression	"! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"		1556156	1		||			
ANR	1556444	UnaryOperationExpression	"! strncmp ( p1 , ""call"" , 4 )"		1556156	0					
ANR	1556445	UnaryOperator	!		1556156	0					
ANR	1556446	CallExpression	"strncmp ( p1 , ""call"" , 4 )"		1556156	1					
ANR	1556447	Callee	strncmp		1556156	0					
ANR	1556448	Identifier	strncmp		1556156	0					
ANR	1556449	ArgumentList	p1		1556156	1					
ANR	1556450	Argument	p1		1556156	0					
ANR	1556451	Identifier	p1		1556156	0					
ANR	1556452	Argument	"""call"""		1556156	1					
ANR	1556453	PrimaryExpression	"""call"""		1556156	0					
ANR	1556454	Argument	4		1556156	2					
ANR	1556455	PrimaryExpression	4		1556156	0					
ANR	1556456	AndExpression	"( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) )"		1556156	1		&&			
ANR	1556457	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		1556156	0		||			
ANR	1556458	CallExpression	hexagon_if_arch_v4 ( )		1556156	0					
ANR	1556459	Callee	hexagon_if_arch_v4		1556156	0					
ANR	1556460	Identifier	hexagon_if_arch_v4		1556156	0					
ANR	1556461	ArgumentList			1556156	1					
ANR	1556462	CallExpression	hexagon_if_arch_v5 ( )		1556156	1					
ANR	1556463	Callee	hexagon_if_arch_v5		1556156	0					
ANR	1556464	Identifier	hexagon_if_arch_v5		1556156	0					
ANR	1556465	ArgumentList			1556156	1					
ANR	1556466	UnaryOperationExpression	"! strncmp ( p1 , ""return"" , token )"		1556156	1					
ANR	1556467	UnaryOperator	!		1556156	0					
ANR	1556468	CallExpression	"strncmp ( p1 , ""return"" , token )"		1556156	1					
ANR	1556469	Callee	strncmp		1556156	0					
ANR	1556470	Identifier	strncmp		1556156	0					
ANR	1556471	ArgumentList	p1		1556156	1					
ANR	1556472	Argument	p1		1556156	0					
ANR	1556473	Identifier	p1		1556156	0					
ANR	1556474	Argument	"""return"""		1556156	1					
ANR	1556475	PrimaryExpression	"""return"""		1556156	0					
ANR	1556476	Argument	token		1556156	2					
ANR	1556477	Identifier	token		1556156	0					
ANR	1556478	ReturnStatement	return ( is_if ? HEXAGON_HASH_I : HEXAGON_HASH_J ) ;	1240:8:52706:52752	1556156	1	True				
ANR	1556479	ConditionalExpression	is_if ? HEXAGON_HASH_I : HEXAGON_HASH_J		1556156	0					
ANR	1556480	Condition	is_if		1556156	0					
ANR	1556481	Identifier	is_if		1556156	0					
ANR	1556482	Identifier	HEXAGON_HASH_I		1556156	1					
ANR	1556483	Identifier	HEXAGON_HASH_J		1556156	2					
ANR	1556484	IfStatement	if ( peq )		1556156	11					
ANR	1556485	Condition	peq	1243:6:52767:52769	1556156	0	True				
ANR	1556486	Identifier	peq		1556156	0					
ANR	1556487	CompoundStatement		59:4:1660:1660	1556156	1					
ANR	1556488	ExpressionStatement	p1 = peq + 1	1246:6:52809:52821	1556156	0	True				
ANR	1556489	AssignmentExpression	p1 = peq + 1		1556156	0		=			
ANR	1556490	Identifier	p1		1556156	0					
ANR	1556491	AdditiveExpression	peq + 1		1556156	1		+			
ANR	1556492	Identifier	peq		1556156	0					
ANR	1556493	PrimaryExpression	1		1556156	1					
ANR	1556494	WhileStatement	while ( ISSPACE ( * p1 ) )		1556156	1					
ANR	1556495	Condition	ISSPACE ( * p1 )	1247:13:52836:52848	1556156	0	True				
ANR	1556496	CallExpression	ISSPACE ( * p1 )		1556156	0					
ANR	1556497	Callee	ISSPACE		1556156	0					
ANR	1556498	Identifier	ISSPACE		1556156	0					
ANR	1556499	ArgumentList	* p1		1556156	1					
ANR	1556500	Argument	* p1		1556156	0					
ANR	1556501	UnaryOperationExpression	* p1		1556156	0					
ANR	1556502	UnaryOperator	*		1556156	0					
ANR	1556503	Identifier	p1		1556156	1					
ANR	1556504	ExpressionStatement	p1 ++	1248:8:52859:52863	1556156	1	True				
ANR	1556505	PostIncDecOperationExpression	p1 ++		1556156	0					
ANR	1556506	Identifier	p1		1556156	0					
ANR	1556507	IncDec	++		1556156	1					
ANR	1556508	IfStatement	"if ( * p1 != '#' && ( p2 = strchr ( p1 , '(' ) ) )"		1556156	2					
ANR	1556509	Condition	"* p1 != '#' && ( p2 = strchr ( p1 , '(' ) )"	1250:10:52876:52912	1556156	0	True				
ANR	1556510	AndExpression	"* p1 != '#' && ( p2 = strchr ( p1 , '(' ) )"		1556156	0		&&			
ANR	1556511	EqualityExpression	* p1 != '#'		1556156	0		!=			
ANR	1556512	UnaryOperationExpression	* p1		1556156	0					
ANR	1556513	UnaryOperator	*		1556156	0					
ANR	1556514	Identifier	p1		1556156	1					
ANR	1556515	PrimaryExpression	'#'		1556156	1					
ANR	1556516	AssignmentExpression	"p2 = strchr ( p1 , '(' )"		1556156	1		=			
ANR	1556517	Identifier	p2		1556156	0					
ANR	1556518	CallExpression	"strchr ( p1 , '(' )"		1556156	1					
ANR	1556519	Callee	strchr		1556156	0					
ANR	1556520	Identifier	strchr		1556156	0					
ANR	1556521	ArgumentList	p1		1556156	1					
ANR	1556522	Argument	p1		1556156	0					
ANR	1556523	Identifier	p1		1556156	0					
ANR	1556524	Argument	'('		1556156	1					
ANR	1556525	PrimaryExpression	'('		1556156	0					
ANR	1556526	CompoundStatement		66:8:1807:1807	1556156	1					
ANR	1556527	WhileStatement	while ( ISSPACE ( * p1 ) || ISPUNCT ( * p1 ) )		1556156	0					
ANR	1556528	Condition	ISSPACE ( * p1 ) || ISPUNCT ( * p1 )	1253:17:52970:52999	1556156	0	True				
ANR	1556529	OrExpression	ISSPACE ( * p1 ) || ISPUNCT ( * p1 )		1556156	0		||			
ANR	1556530	CallExpression	ISSPACE ( * p1 )		1556156	0					
ANR	1556531	Callee	ISSPACE		1556156	0					
ANR	1556532	Identifier	ISSPACE		1556156	0					
ANR	1556533	ArgumentList	* p1		1556156	1					
ANR	1556534	Argument	* p1		1556156	0					
ANR	1556535	UnaryOperationExpression	* p1		1556156	0					
ANR	1556536	UnaryOperator	*		1556156	0					
ANR	1556537	Identifier	p1		1556156	1					
ANR	1556538	CallExpression	ISPUNCT ( * p1 )		1556156	1					
ANR	1556539	Callee	ISPUNCT		1556156	0					
ANR	1556540	Identifier	ISPUNCT		1556156	0					
ANR	1556541	ArgumentList	* p1		1556156	1					
ANR	1556542	Argument	* p1		1556156	0					
ANR	1556543	UnaryOperationExpression	* p1		1556156	0					
ANR	1556544	UnaryOperator	*		1556156	0					
ANR	1556545	Identifier	p1		1556156	1					
ANR	1556546	ExpressionStatement	p1 ++	1254:12:53014:53018	1556156	1	True				
ANR	1556547	PostIncDecOperationExpression	p1 ++		1556156	0					
ANR	1556548	Identifier	p1		1556156	0					
ANR	1556549	IncDec	++		1556156	1					
ANR	1556550	IfStatement	if ( ISALPHA ( ch = TOLOWER ( * p1 ) ) )		1556156	1					
ANR	1556551	Condition	ISALPHA ( ch = TOLOWER ( * p1 ) )	1256:14:53035:53062	1556156	0	True				
ANR	1556552	CallExpression	ISALPHA ( ch = TOLOWER ( * p1 ) )		1556156	0					
ANR	1556553	Callee	ISALPHA		1556156	0					
ANR	1556554	Identifier	ISALPHA		1556156	0					
ANR	1556555	ArgumentList	ch = TOLOWER ( * p1 )		1556156	1					
ANR	1556556	Argument	ch = TOLOWER ( * p1 )		1556156	0					
ANR	1556557	AssignmentExpression	ch = TOLOWER ( * p1 )		1556156	0		=			
ANR	1556558	Identifier	ch		1556156	0					
ANR	1556559	CallExpression	TOLOWER ( * p1 )		1556156	1					
ANR	1556560	Callee	TOLOWER		1556156	0					
ANR	1556561	Identifier	TOLOWER		1556156	0					
ANR	1556562	ArgumentList	* p1		1556156	1					
ANR	1556563	Argument	* p1		1556156	0					
ANR	1556564	UnaryOperationExpression	* p1		1556156	0					
ANR	1556565	UnaryOperator	*		1556156	0					
ANR	1556566	Identifier	p1		1556156	1					
ANR	1556567	CompoundStatement		72:12:1961:1961	1556156	1					
ANR	1556568	IfStatement	if ( ch == 'v' )		1556156	0					
ANR	1556569	Condition	ch == 'v'	1258:18:53097:53105	1556156	0	True				
ANR	1556570	EqualityExpression	ch == 'v'		1556156	0		==			
ANR	1556571	Identifier	ch		1556156	0					
ANR	1556572	PrimaryExpression	'v'		1556156	1					
ANR	1556573	CompoundStatement		74:16:2008:2008	1556156	1					
ANR	1556574	ExpressionStatement	ch = TOLOWER ( p1 [ 1 ] )	1261:18:53230:53251	1556156	0	True				
ANR	1556575	AssignmentExpression	ch = TOLOWER ( p1 [ 1 ] )		1556156	0		=			
ANR	1556576	Identifier	ch		1556156	0					
ANR	1556577	CallExpression	TOLOWER ( p1 [ 1 ] )		1556156	1					
ANR	1556578	Callee	TOLOWER		1556156	0					
ANR	1556579	Identifier	TOLOWER		1556156	0					
ANR	1556580	ArgumentList	p1 [ 1 ]		1556156	1					
ANR	1556581	Argument	p1 [ 1 ]		1556156	0					
ANR	1556582	ArrayIndexing	p1 [ 1 ]		1556156	0					
ANR	1556583	Identifier	p1		1556156	0					
ANR	1556584	PrimaryExpression	1		1556156	1					
ANR	1556585	ReturnStatement	return ( pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) ) ;	1263:18:53272:53496	1556156	1	True				
ANR	1556586	ConditionalExpression	pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) )		1556156	0					
ANR	1556587	Condition	pair		1556156	0					
ANR	1556588	Identifier	pair		1556156	0					
ANR	1556589	AdditiveExpression	HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556590	Identifier	HEXAGON_HASH_2		1556156	0					
ANR	1556591	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		-			
ANR	1556592	Identifier	ch		1556156	0					
ANR	1556593	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556594	PrimaryExpression	'a'		1556156	0					
ANR	1556595	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		1556156	1					
ANR	1556596	Condition	is_if		1556156	0					
ANR	1556597	Identifier	is_if		1556156	0					
ANR	1556598	Identifier	HEXAGON_HASH_1		1556156	1					
ANR	1556599	PrimaryExpression	0		1556156	2					
ANR	1556600	AdditiveExpression	HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	2		+			
ANR	1556601	Identifier	HEXAGON_HASH_4		1556156	0					
ANR	1556602	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		-			
ANR	1556603	Identifier	ch		1556156	0					
ANR	1556604	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556605	PrimaryExpression	'a'		1556156	0					
ANR	1556606	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		1556156	1					
ANR	1556607	Condition	is_if		1556156	0					
ANR	1556608	Identifier	is_if		1556156	0					
ANR	1556609	Identifier	HEXAGON_HASH_1		1556156	1					
ANR	1556610	PrimaryExpression	0		1556156	2					
ANR	1556611	ElseStatement	else		1556156	0					
ANR	1556612	ReturnStatement	return ( pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) ) ;	1268:16:53551:53771	1556156	0	True				
ANR	1556613	ConditionalExpression	pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) )		1556156	0					
ANR	1556614	Condition	pair		1556156	0					
ANR	1556615	Identifier	pair		1556156	0					
ANR	1556616	AdditiveExpression	HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556617	Identifier	HEXAGON_HASH_2		1556156	0					
ANR	1556618	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		-			
ANR	1556619	Identifier	ch		1556156	0					
ANR	1556620	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556621	PrimaryExpression	'a'		1556156	0					
ANR	1556622	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		1556156	1					
ANR	1556623	Condition	is_if		1556156	0					
ANR	1556624	Identifier	is_if		1556156	0					
ANR	1556625	Identifier	HEXAGON_HASH_1		1556156	1					
ANR	1556626	PrimaryExpression	0		1556156	2					
ANR	1556627	AdditiveExpression	HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	2		+			
ANR	1556628	Identifier	HEXAGON_HASH_0		1556156	0					
ANR	1556629	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		-			
ANR	1556630	Identifier	ch		1556156	0					
ANR	1556631	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		1556156	1		+			
ANR	1556632	PrimaryExpression	'a'		1556156	0					
ANR	1556633	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		1556156	1					
ANR	1556634	Condition	is_if		1556156	0					
ANR	1556635	Identifier	is_if		1556156	0					
ANR	1556636	Identifier	HEXAGON_HASH_1		1556156	1					
ANR	1556637	PrimaryExpression	0		1556156	2					
ANR	1556638	ElseStatement	else		1556156	0					
ANR	1556639	ReturnStatement	return ( pair ? is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L : is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N ) ;	1275:8:53871:53996	1556156	0	True				
ANR	1556640	ConditionalExpression	pair ? is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L : is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N		1556156	0					
ANR	1556641	Condition	pair		1556156	0					
ANR	1556642	Identifier	pair		1556156	0					
ANR	1556643	ConditionalExpression	is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L		1556156	1					
ANR	1556644	Condition	is_if		1556156	0					
ANR	1556645	Identifier	is_if		1556156	0					
ANR	1556646	Identifier	HEXAGON_HASH_K		1556156	1					
ANR	1556647	Identifier	HEXAGON_HASH_L		1556156	2					
ANR	1556648	ConditionalExpression	is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N		1556156	2					
ANR	1556649	Condition	is_if		1556156	0					
ANR	1556650	Identifier	is_if		1556156	0					
ANR	1556651	Identifier	HEXAGON_HASH_M		1556156	1					
ANR	1556652	Identifier	HEXAGON_HASH_N		1556156	2					
ANR	1556653	IfStatement	"if ( ! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token ) )"		1556156	12					
ANR	1556654	Condition	"! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"	1280:6:54011:54136	1556156	0	True				
ANR	1556655	OrExpression	"! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"		1556156	0		||			
ANR	1556656	UnaryOperationExpression	"! strncmp ( syntax , ""allocframe"" , 10 )"		1556156	0					
ANR	1556657	UnaryOperator	!		1556156	0					
ANR	1556658	CallExpression	"strncmp ( syntax , ""allocframe"" , 10 )"		1556156	1					
ANR	1556659	Callee	strncmp		1556156	0					
ANR	1556660	Identifier	strncmp		1556156	0					
ANR	1556661	ArgumentList	syntax		1556156	1					
ANR	1556662	Argument	syntax		1556156	0					
ANR	1556663	Identifier	syntax		1556156	0					
ANR	1556664	Argument	"""allocframe"""		1556156	1					
ANR	1556665	PrimaryExpression	"""allocframe"""		1556156	0					
ANR	1556666	Argument	10		1556156	2					
ANR	1556667	PrimaryExpression	10		1556156	0					
ANR	1556668	OrExpression	"! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"		1556156	1		||			
ANR	1556669	UnaryOperationExpression	"! strncmp ( syntax , ""deallocframe"" , token )"		1556156	0					
ANR	1556670	UnaryOperator	!		1556156	0					
ANR	1556671	CallExpression	"strncmp ( syntax , ""deallocframe"" , token )"		1556156	1					
ANR	1556672	Callee	strncmp		1556156	0					
ANR	1556673	Identifier	strncmp		1556156	0					
ANR	1556674	ArgumentList	syntax		1556156	1					
ANR	1556675	Argument	syntax		1556156	0					
ANR	1556676	Identifier	syntax		1556156	0					
ANR	1556677	Argument	"""deallocframe"""		1556156	1					
ANR	1556678	PrimaryExpression	"""deallocframe"""		1556156	0					
ANR	1556679	Argument	token		1556156	2					
ANR	1556680	Identifier	token		1556156	0					
ANR	1556681	UnaryOperationExpression	"! strncmp ( syntax , ""nop"" , token )"		1556156	1					
ANR	1556682	UnaryOperator	!		1556156	0					
ANR	1556683	CallExpression	"strncmp ( syntax , ""nop"" , token )"		1556156	1					
ANR	1556684	Callee	strncmp		1556156	0					
ANR	1556685	Identifier	strncmp		1556156	0					
ANR	1556686	ArgumentList	syntax		1556156	1					
ANR	1556687	Argument	syntax		1556156	0					
ANR	1556688	Identifier	syntax		1556156	0					
ANR	1556689	Argument	"""nop"""		1556156	1					
ANR	1556690	PrimaryExpression	"""nop"""		1556156	0					
ANR	1556691	Argument	token		1556156	2					
ANR	1556692	Identifier	token		1556156	0					
ANR	1556693	ReturnStatement	return ( pair ? HEXAGON_HASH_O : HEXAGON_HASH_P ) ;	1283:4:54143:54188	1556156	1	True				
ANR	1556694	ConditionalExpression	pair ? HEXAGON_HASH_O : HEXAGON_HASH_P		1556156	0					
ANR	1556695	Condition	pair		1556156	0					
ANR	1556696	Identifier	pair		1556156	0					
ANR	1556697	Identifier	HEXAGON_HASH_O		1556156	1					
ANR	1556698	Identifier	HEXAGON_HASH_P		1556156	2					
ANR	1556699	ReturnStatement	return ( HEXAGON_HASH_Z ) ;	1286:2:54214:54237	1556156	13	True				
ANR	1556700	Identifier	HEXAGON_HASH_Z		1556156	0					
ANR	1556701	ReturnType	hexagon_hash		1556156	1					
ANR	1556702	Identifier	hexagon_hash_opcode		1556156	2					
ANR	1556703	ParameterList	const char * syntax		1556156	3					
ANR	1556704	Parameter	const char * syntax	1185:1:51095:51112	1556156	0	True				
ANR	1556705	ParameterType	const char *		1556156	0					
ANR	1556706	Identifier	syntax		1556156	1					
ANR	1556707	CFGEntryNode	ENTRY		1556156		True				
ANR	1556708	CFGExitNode	EXIT		1556156		True				
ANR	1556709	Symbol	HEXAGON_HASH_E		1556156						
ANR	1556710	Symbol	p1		1556156						
ANR	1556711	Symbol	HEXAGON_HASH_D		1556156						
ANR	1556712	Symbol	p2		1556156						
ANR	1556713	Symbol	HEXAGON_HASH_C		1556156						
ANR	1556714	Symbol	hexagon_if_arch_v5		1556156						
ANR	1556715	Symbol	HEXAGON_HASH_B		1556156						
ANR	1556716	Symbol	hexagon_if_arch_v4		1556156						
ANR	1556717	Symbol	pnew		1556156						
ANR	1556718	Symbol	HEXAGON_HASH_I		1556156						
ANR	1556719	Symbol	HEXAGON_HASH_H		1556156						
ANR	1556720	Symbol	HEXAGON_HASH_G		1556156						
ANR	1556721	Symbol	HEXAGON_HASH_F		1556156						
ANR	1556722	Symbol	HEXAGON_HASH_M		1556156						
ANR	1556723	Symbol	strchr		1556156						
ANR	1556724	Symbol	HEXAGON_HASH_L		1556156						
ANR	1556725	Symbol	HEXAGON_HASH_K		1556156						
ANR	1556726	Symbol	HEXAGON_HASH_J		1556156						
ANR	1556727	Symbol	strcspn		1556156						
ANR	1556728	Symbol	pif		1556156						
ANR	1556729	Symbol	HEXAGON_HASH_P		1556156						
ANR	1556730	Symbol	HEXAGON_HASH_O		1556156						
ANR	1556731	Symbol	HEXAGON_HASH_N		1556156						
ANR	1556732	Symbol	strncmp		1556156						
ANR	1556733	Symbol	HEXAGON_HASH_4		1556156						
ANR	1556734	Symbol	HEXAGON_HASH_2		1556156						
ANR	1556735	Symbol	ISALPHA		1556156						
ANR	1556736	Symbol	HEXAGON_HASH_A		1556156						
ANR	1556737	Symbol	peq		1556156						
ANR	1556738	Symbol	strcmp		1556156						
ANR	1556739	Symbol	NULL		1556156						
ANR	1556740	Symbol	* p1		1556156						
ANR	1556741	Symbol	ch		1556156						
ANR	1556742	Symbol	ISPUNCT		1556156						
ANR	1556743	Symbol	TOLOWER		1556156						
ANR	1556744	Symbol	HEXAGON_HASH_1		1556156						
ANR	1556745	Symbol	HEXAGON_HASH_0		1556156						
ANR	1556746	Symbol	pair		1556156						
ANR	1556747	Symbol	token		1556156						
ANR	1556748	Symbol	is_if		1556156						
ANR	1556749	Symbol	PACKET_PAIR		1556156						
ANR	1556750	Symbol	syntax		1556156						
ANR	1556751	Symbol	HEXAGON_HASH_Z		1556156						
ANR	1556752	Symbol	ISSPACE		1556156						
ANR	1556753	Function	hexagon_encode_opcode	1291:0:54309:54896							
ANR	1556754	FunctionDef	hexagon_encode_opcode (const char * enc)		1556753	0					
ANR	1556755	CompoundStatement		1294:0:54362:54896	1556753	0					
ANR	1556756	IdentifierDeclStatement	hexagon_insn insn ;	1295:2:54366:54383	1556753	0	True				
ANR	1556757	IdentifierDecl	insn		1556753	0					
ANR	1556758	IdentifierDeclType	hexagon_insn		1556753	0					
ANR	1556759	Identifier	insn		1556753	1					
ANR	1556760	IdentifierDeclStatement	int num_bits ;	1296:2:54387:54399	1556753	1	True				
ANR	1556761	IdentifierDecl	num_bits		1556753	0					
ANR	1556762	IdentifierDeclType	int		1556753	0					
ANR	1556763	Identifier	num_bits		1556753	1					
ANR	1556764	IdentifierDeclStatement	int pair ;	1297:2:54403:54411	1556753	2	True				
ANR	1556765	IdentifierDecl	pair		1556753	0					
ANR	1556766	IdentifierDeclType	int		1556753	0					
ANR	1556767	Identifier	pair		1556753	1					
ANR	1556768	ForStatement	"for ( insn = 0 , num_bits = 0 , pair = 0 ; * enc ; enc ++ )"		1556753	3					
ANR	1556769	ForInit	"insn = 0 , num_bits = 0 , pair = 0 ;"	1299:7:54421:54453	1556753	0	True				
ANR	1556770	Expression	"insn = 0 , num_bits = 0 , pair = 0"		1556753	0					
ANR	1556771	AssignmentExpression	insn = 0		1556753	0		=			
ANR	1556772	Identifier	insn		1556753	0					
ANR	1556773	PrimaryExpression	0		1556753	1					
ANR	1556774	Expression	"num_bits = 0 , pair = 0"		1556753	1					
ANR	1556775	AssignmentExpression	num_bits = 0		1556753	0		=			
ANR	1556776	Identifier	num_bits		1556753	0					
ANR	1556777	PrimaryExpression	0		1556753	1					
ANR	1556778	AssignmentExpression	pair = 0		1556753	1		=			
ANR	1556779	Identifier	pair		1556753	0					
ANR	1556780	PrimaryExpression	0		1556753	1					
ANR	1556781	Condition	* enc	1299:41:54455:54458	1556753	1	True				
ANR	1556782	UnaryOperationExpression	* enc		1556753	0					
ANR	1556783	UnaryOperator	*		1556753	0					
ANR	1556784	Identifier	enc		1556753	1					
ANR	1556785	PostIncDecOperationExpression	enc ++	1299:47:54461:54465	1556753	2	True				
ANR	1556786	Identifier	enc		1556753	0					
ANR	1556787	IncDec	++		1556753	1					
ANR	1556788	CompoundStatement		7:4:109:109	1556753	3					
ANR	1556789	WhileStatement	while ( ISSPACE ( * enc ) )		1556753	0					
ANR	1556790	Condition	ISSPACE ( * enc )	1301:13:54487:54500	1556753	0	True				
ANR	1556791	CallExpression	ISSPACE ( * enc )		1556753	0					
ANR	1556792	Callee	ISSPACE		1556753	0					
ANR	1556793	Identifier	ISSPACE		1556753	0					
ANR	1556794	ArgumentList	* enc		1556753	1					
ANR	1556795	Argument	* enc		1556753	0					
ANR	1556796	UnaryOperationExpression	* enc		1556753	0					
ANR	1556797	UnaryOperator	*		1556753	0					
ANR	1556798	Identifier	enc		1556753	1					
ANR	1556799	ExpressionStatement	enc ++	1302:8:54511:54516	1556753	1	True				
ANR	1556800	PostIncDecOperationExpression	enc ++		1556753	0					
ANR	1556801	Identifier	enc		1556753	0					
ANR	1556802	IncDec	++		1556753	1					
ANR	1556803	IfStatement	if ( ! * enc )		1556753	1					
ANR	1556804	Condition	! * enc	1304:10:54529:54533	1556753	0	True				
ANR	1556805	UnaryOperationExpression	! * enc		1556753	0					
ANR	1556806	UnaryOperator	!		1556753	0					
ANR	1556807	UnaryOperationExpression	* enc		1556753	1					
ANR	1556808	UnaryOperator	*		1556753	0					
ANR	1556809	Identifier	enc		1556753	1					
ANR	1556810	BreakStatement	break ;	1305:8:54544:54549	1556753	1	True				
ANR	1556811	ExpressionStatement	insn = ( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )	1307:6:54558:54600	1556753	2	True				
ANR	1556812	AssignmentExpression	insn = ( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )		1556753	0		=			
ANR	1556813	Identifier	insn		1556753	0					
ANR	1556814	AdditiveExpression	( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )		1556753	1		+			
ANR	1556815	ShiftExpression	insn << 1		1556753	0		<<			
ANR	1556816	Identifier	insn		1556753	0					
ANR	1556817	PrimaryExpression	1		1556753	1					
ANR	1556818	ConditionalExpression	( * enc == '1' ) ? 1 : 0		1556753	1					
ANR	1556819	Condition	* enc == '1'		1556753	0					
ANR	1556820	EqualityExpression	* enc == '1'		1556753	0		==			
ANR	1556821	UnaryOperationExpression	* enc		1556753	0					
ANR	1556822	UnaryOperator	*		1556753	0					
ANR	1556823	Identifier	enc		1556753	1					
ANR	1556824	PrimaryExpression	'1'		1556753	1					
ANR	1556825	PrimaryExpression	1		1556753	1					
ANR	1556826	PrimaryExpression	0		1556753	2					
ANR	1556827	ExpressionStatement	num_bits ++	1309:6:54609:54619	1556753	3	True				
ANR	1556828	PostIncDecOperationExpression	num_bits ++		1556753	0					
ANR	1556829	Identifier	num_bits		1556753	0					
ANR	1556830	IncDec	++		1556753	1					
ANR	1556831	ExpressionStatement	pair |= ( ( enc [ 0 ] == 'E' && enc [ 1 ] == 'E' ) )	1311:6:54628:54672	1556753	4	True				
ANR	1556832	AssignmentExpression	pair |= ( ( enc [ 0 ] == 'E' && enc [ 1 ] == 'E' ) )		1556753	0		|=			
ANR	1556833	Identifier	pair		1556753	0					
ANR	1556834	AndExpression	enc [ 0 ] == 'E' && enc [ 1 ] == 'E'		1556753	1		&&			
ANR	1556835	EqualityExpression	enc [ 0 ] == 'E'		1556753	0		==			
ANR	1556836	ArrayIndexing	enc [ 0 ]		1556753	0					
ANR	1556837	Identifier	enc		1556753	0					
ANR	1556838	PrimaryExpression	0		1556753	1					
ANR	1556839	PrimaryExpression	'E'		1556753	1					
ANR	1556840	EqualityExpression	enc [ 1 ] == 'E'		1556753	1		==			
ANR	1556841	ArrayIndexing	enc [ 1 ]		1556753	0					
ANR	1556842	Identifier	enc		1556753	0					
ANR	1556843	PrimaryExpression	1		1556753	1					
ANR	1556844	PrimaryExpression	'E'		1556753	1					
ANR	1556845	IfStatement	if ( num_bits != HEXAGON_INSN_LEN * 8 )		1556753	4					
ANR	1556846	Condition	num_bits != HEXAGON_INSN_LEN * 8	1314:6:54687:54718	1556753	0	True				
ANR	1556847	EqualityExpression	num_bits != HEXAGON_INSN_LEN * 8		1556753	0		!=			
ANR	1556848	Identifier	num_bits		1556753	0					
ANR	1556849	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		1556753	1		*			
ANR	1556850	Identifier	HEXAGON_INSN_LEN		1556753	0					
ANR	1556851	PrimaryExpression	8		1556753	1					
ANR	1556852	CompoundStatement		22:4:362:362	1556753	1					
ANR	1556853	ExpressionStatement	"printf ( ""invalid number of bits: %d\\n"" , num_bits )"	1316:6:54733:54782	1556753	0	True				
ANR	1556854	CallExpression	"printf ( ""invalid number of bits: %d\\n"" , num_bits )"		1556753	0					
ANR	1556855	Callee	printf		1556753	0					
ANR	1556856	Identifier	printf		1556753	0					
ANR	1556857	ArgumentList	"""invalid number of bits: %d\\n"""		1556753	1					
ANR	1556858	Argument	"""invalid number of bits: %d\\n"""		1556753	0					
ANR	1556859	PrimaryExpression	"""invalid number of bits: %d\\n"""		1556753	0					
ANR	1556860	Argument	num_bits		1556753	1					
ANR	1556861	Identifier	num_bits		1556753	0					
ANR	1556862	ExpressionStatement	assert ( FALSE )	1317:6:54790:54804	1556753	1	True				
ANR	1556863	CallExpression	assert ( FALSE )		1556753	0					
ANR	1556864	Callee	assert		1556753	0					
ANR	1556865	Identifier	assert		1556753	0					
ANR	1556866	ArgumentList	FALSE		1556753	1					
ANR	1556867	Argument	FALSE		1556753	0					
ANR	1556868	Identifier	FALSE		1556753	0					
ANR	1556869	ReturnStatement	"return ( HEXAGON_END_PACKET_SET ( insn , pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT ) ) ;"	1320:2:54815:54894	1556753	5	True				
ANR	1556870	CallExpression	"HEXAGON_END_PACKET_SET ( insn , pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT )"		1556753	0					
ANR	1556871	Callee	HEXAGON_END_PACKET_SET		1556753	0					
ANR	1556872	Identifier	HEXAGON_END_PACKET_SET		1556753	0					
ANR	1556873	ArgumentList	insn		1556753	1					
ANR	1556874	Argument	insn		1556753	0					
ANR	1556875	Identifier	insn		1556753	0					
ANR	1556876	Argument	pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT		1556753	1					
ANR	1556877	ConditionalExpression	pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT		1556753	0					
ANR	1556878	Condition	pair		1556753	0					
ANR	1556879	Identifier	pair		1556753	0					
ANR	1556880	Identifier	HEXAGON_END_PAIR		1556753	1					
ANR	1556881	Identifier	HEXAGON_END_NOT		1556753	2					
ANR	1556882	ReturnType	hexagon_insn		1556753	1					
ANR	1556883	Identifier	hexagon_encode_opcode		1556753	2					
ANR	1556884	ParameterList	const char * enc		1556753	3					
ANR	1556885	Parameter	const char * enc	1293:1:54345:54359	1556753	0	True				
ANR	1556886	ParameterType	const char *		1556753	0					
ANR	1556887	Identifier	enc		1556753	1					
ANR	1556888	CFGEntryNode	ENTRY		1556753		True				
ANR	1556889	CFGExitNode	EXIT		1556753		True				
ANR	1556890	Symbol	insn		1556753						
ANR	1556891	Symbol	HEXAGON_END_PACKET_SET		1556753						
ANR	1556892	Symbol	HEXAGON_END_NOT		1556753						
ANR	1556893	Symbol	HEXAGON_END_PAIR		1556753						
ANR	1556894	Symbol	HEXAGON_INSN_LEN		1556753						
ANR	1556895	Symbol	FALSE		1556753						
ANR	1556896	Symbol	enc		1556753						
ANR	1556897	Symbol	* enc		1556753						
ANR	1556898	Symbol	num_bits		1556753						
ANR	1556899	Symbol	ISSPACE		1556753						
ANR	1556900	Symbol	pair		1556753						
ANR	1556901	Function	hexagon_hash_icode	1323:0:54899:55270							
ANR	1556902	FunctionDef	hexagon_hash_icode (hexagon_insn insn)		1556901	0					
ANR	1556903	CompoundStatement		1326:0:54951:55270	1556901	0					
ANR	1556904	IdentifierDeclStatement	const hexagon_hash xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) ) ;	1327:2:54955:55036	1556901	0	True				
ANR	1556905	IdentifierDecl	xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		1556901	0					
ANR	1556906	IdentifierDeclType	const hexagon_hash		1556901	0					
ANR	1556907	Identifier	xtra		1556901	1					
ANR	1556908	AssignmentExpression	xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		1556901	2		=			
ANR	1556909	Identifier	xtra		1556901	0					
ANR	1556910	UnaryOperationExpression	~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		1556901	1					
ANR	1556911	UnaryOperator	~		1556901	0					
ANR	1556912	UnaryOperationExpression	- ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS )		1556901	1					
ANR	1556913	UnaryOperator	-		1556901	0					
ANR	1556914	ShiftExpression	HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS		1556901	1		>>			
ANR	1556915	Identifier	HEXAGON_END_PACKET_MASK		1556901	0					
ANR	1556916	Identifier	HEXAGON_END_PACKET_POS		1556901	1					
ANR	1556917	IdentifierDeclStatement	hexagon_hash hash ;	1328:2:55040:55057	1556901	1	True				
ANR	1556918	IdentifierDecl	hash		1556901	0					
ANR	1556919	IdentifierDeclType	hexagon_hash		1556901	0					
ANR	1556920	Identifier	hash		1556901	1					
ANR	1556921	ExpressionStatement	hash = insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )	1330:2:55062:55135	1556901	2	True				
ANR	1556922	AssignmentExpression	hash = insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )		1556901	0		=			
ANR	1556923	Identifier	hash		1556901	0					
ANR	1556924	ShiftExpression	insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )		1556901	1		>>			
ANR	1556925	Identifier	insn		1556901	0					
ANR	1556926	AdditiveExpression	HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra )		1556901	1		-			
ANR	1556927	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		1556901	0		*			
ANR	1556928	Identifier	HEXAGON_INSN_LEN		1556901	0					
ANR	1556929	PrimaryExpression	8		1556901	1					
ANR	1556930	AdditiveExpression	hexagon_icode_hash_bits - xtra		1556901	1		-			
ANR	1556931	Identifier	hexagon_icode_hash_bits		1556901	0					
ANR	1556932	Identifier	xtra		1556901	1					
ANR	1556933	ExpressionStatement	hash |= ( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )	1331:2:55139:55250	1556901	3	True				
ANR	1556934	AssignmentExpression	hash |= ( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )		1556901	0		|=			
ANR	1556935	Identifier	hash		1556901	0					
ANR	1556936	ShiftExpression	( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )		1556901	1		<<			
ANR	1556937	ShiftExpression	HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS		1556901	0		>>			
ANR	1556938	CallExpression	HEXAGON_END_PACKET_GET ( insn )		1556901	0					
ANR	1556939	Callee	HEXAGON_END_PACKET_GET		1556901	0					
ANR	1556940	Identifier	HEXAGON_END_PACKET_GET		1556901	0					
ANR	1556941	ArgumentList	insn		1556901	1					
ANR	1556942	Argument	insn		1556901	0					
ANR	1556943	Identifier	insn		1556901	0					
ANR	1556944	Identifier	HEXAGON_END_PACKET_POS		1556901	1					
ANR	1556945	AdditiveExpression	hexagon_icode_hash_bits - xtra		1556901	1		-			
ANR	1556946	Identifier	hexagon_icode_hash_bits		1556901	0					
ANR	1556947	Identifier	xtra		1556901	1					
ANR	1556948	ReturnStatement	return ( hash ) ;	1334:2:55255:55268	1556901	4	True				
ANR	1556949	Identifier	hash		1556901	0					
ANR	1556950	ReturnType	hexagon_hash		1556901	1					
ANR	1556951	Identifier	hexagon_hash_icode		1556901	2					
ANR	1556952	ParameterList	hexagon_insn insn		1556901	3					
ANR	1556953	Parameter	hexagon_insn insn	1325:1:54932:54948	1556901	0	True				
ANR	1556954	ParameterType	hexagon_insn		1556901	0					
ANR	1556955	Identifier	insn		1556901	1					
ANR	1556956	CFGEntryNode	ENTRY		1556901		True				
ANR	1556957	CFGExitNode	EXIT		1556901		True				
ANR	1556958	Symbol	insn		1556901						
ANR	1556959	Symbol	xtra		1556901						
ANR	1556960	Symbol	hexagon_icode_hash_bits		1556901						
ANR	1556961	Symbol	HEXAGON_END_PACKET_MASK		1556901						
ANR	1556962	Symbol	HEXAGON_INSN_LEN		1556901						
ANR	1556963	Symbol	HEXAGON_END_PACKET_POS		1556901						
ANR	1556964	Symbol	hash		1556901						
ANR	1556965	Symbol	HEXAGON_END_PACKET_GET		1556901						
ANR	1556966	DeclStmt									
ANR	1556967	Decl							int	int	cpu_type
ANR	1556968	DeclStmt									
ANR	1556969	Decl							int	int	cpu_flag
ANR	1556970	Function	hexagon_arch	1346:0:55479:55526							
ANR	1556971	FunctionDef	hexagon_arch ()		1556970	0					
ANR	1556972	CompoundStatement		1349:0:55503:55526	1556970	0					
ANR	1556973	ReturnStatement	return ( cpu_type ) ;	1350:2:55507:55524	1556970	0	True				
ANR	1556974	Identifier	cpu_type		1556970	0					
ANR	1556975	ReturnType	int		1556970	1					
ANR	1556976	Identifier	hexagon_arch		1556970	2					
ANR	1556977	ParameterList			1556970	3					
ANR	1556978	CFGEntryNode	ENTRY		1556970		True				
ANR	1556979	CFGExitNode	EXIT		1556970		True				
ANR	1556980	Symbol	cpu_type		1556970						
ANR	1556981	Function	hexagon_if_arch	1355:0:55600:55669							
ANR	1556982	FunctionDef	hexagon_if_arch (int arch)		1556981	0					
ANR	1556983	CompoundStatement		1358:0:55631:55669	1556981	0					
ANR	1556984	ReturnStatement	return ( hexagon_arch ( ) == arch ) ;	1359:2:55635:55667	1556981	0	True				
ANR	1556985	EqualityExpression	hexagon_arch ( ) == arch		1556981	0		==			
ANR	1556986	CallExpression	hexagon_arch ( )		1556981	0					
ANR	1556987	Callee	hexagon_arch		1556981	0					
ANR	1556988	Identifier	hexagon_arch		1556981	0					
ANR	1556989	ArgumentList			1556981	1					
ANR	1556990	Identifier	arch		1556981	1					
ANR	1556991	ReturnType	int		1556981	1					
ANR	1556992	Identifier	hexagon_if_arch		1556981	2					
ANR	1556993	ParameterList	int arch		1556981	3					
ANR	1556994	Parameter	int arch	1357:1:55621:55628	1556981	0	True				
ANR	1556995	ParameterType	int		1556981	0					
ANR	1556996	Identifier	arch		1556981	1					
ANR	1556997	CFGEntryNode	ENTRY		1556981		True				
ANR	1556998	CFGExitNode	EXIT		1556981		True				
ANR	1556999	Symbol	arch		1556981						
ANR	1557000	Symbol	hexagon_arch		1556981						
ANR	1557001	Function	hexagon_if_arch_kext	1366:0:55773:55866							
ANR	1557002	FunctionDef	hexagon_if_arch_kext ()		1557001	0					
ANR	1557003	CompoundStatement		1369:0:55805:55866	1557001	0					
ANR	1557004	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1370:2:55809:55864	1557001	0	True				
ANR	1557005	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		1557001	0		||			
ANR	1557006	CallExpression	hexagon_if_arch_v4 ( )		1557001	0					
ANR	1557007	Callee	hexagon_if_arch_v4		1557001	0					
ANR	1557008	Identifier	hexagon_if_arch_v4		1557001	0					
ANR	1557009	ArgumentList			1557001	1					
ANR	1557010	CallExpression	hexagon_if_arch_v5 ( )		1557001	1					
ANR	1557011	Callee	hexagon_if_arch_v5		1557001	0					
ANR	1557012	Identifier	hexagon_if_arch_v5		1557001	0					
ANR	1557013	ArgumentList			1557001	1					
ANR	1557014	ReturnType	int		1557001	1					
ANR	1557015	Identifier	hexagon_if_arch_kext		1557001	2					
ANR	1557016	ParameterList			1557001	3					
ANR	1557017	CFGEntryNode	ENTRY		1557001		True				
ANR	1557018	CFGExitNode	EXIT		1557001		True				
ANR	1557019	Symbol	hexagon_if_arch_v5		1557001						
ANR	1557020	Symbol	hexagon_if_arch_v4		1557001						
ANR	1557021	Function	hexagon_if_arch_pairs	1377:0:55937:56031							
ANR	1557022	FunctionDef	hexagon_if_arch_pairs ()		1557021	0					
ANR	1557023	CompoundStatement		1380:0:55970:56031	1557021	0					
ANR	1557024	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1381:2:55974:56029	1557021	0	True				
ANR	1557025	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		1557021	0		||			
ANR	1557026	CallExpression	hexagon_if_arch_v4 ( )		1557021	0					
ANR	1557027	Callee	hexagon_if_arch_v4		1557021	0					
ANR	1557028	Identifier	hexagon_if_arch_v4		1557021	0					
ANR	1557029	ArgumentList			1557021	1					
ANR	1557030	CallExpression	hexagon_if_arch_v5 ( )		1557021	1					
ANR	1557031	Callee	hexagon_if_arch_v5		1557021	0					
ANR	1557032	Identifier	hexagon_if_arch_v5		1557021	0					
ANR	1557033	ArgumentList			1557021	1					
ANR	1557034	ReturnType	int		1557021	1					
ANR	1557035	Identifier	hexagon_if_arch_pairs		1557021	2					
ANR	1557036	ParameterList			1557021	3					
ANR	1557037	CFGEntryNode	ENTRY		1557021		True				
ANR	1557038	CFGExitNode	EXIT		1557021		True				
ANR	1557039	Symbol	hexagon_if_arch_v5		1557021						
ANR	1557040	Symbol	hexagon_if_arch_v4		1557021						
ANR	1557041	Function	hexagon_if_arch_autoand	1389:0:56162:56258							
ANR	1557042	FunctionDef	hexagon_if_arch_autoand ()		1557041	0					
ANR	1557043	CompoundStatement		1392:0:56197:56258	1557041	0					
ANR	1557044	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1393:2:56201:56256	1557041	0	True				
ANR	1557045	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		1557041	0		||			
ANR	1557046	CallExpression	hexagon_if_arch_v4 ( )		1557041	0					
ANR	1557047	Callee	hexagon_if_arch_v4		1557041	0					
ANR	1557048	Identifier	hexagon_if_arch_v4		1557041	0					
ANR	1557049	ArgumentList			1557041	1					
ANR	1557050	CallExpression	hexagon_if_arch_v5 ( )		1557041	1					
ANR	1557051	Callee	hexagon_if_arch_v5		1557041	0					
ANR	1557052	Identifier	hexagon_if_arch_v5		1557041	0					
ANR	1557053	ArgumentList			1557041	1					
ANR	1557054	ReturnType	int		1557041	1					
ANR	1557055	Identifier	hexagon_if_arch_autoand		1557041	2					
ANR	1557056	ParameterList			1557041	3					
ANR	1557057	CFGEntryNode	ENTRY		1557041		True				
ANR	1557058	CFGExitNode	EXIT		1557041		True				
ANR	1557059	Symbol	hexagon_if_arch_v5		1557041						
ANR	1557060	Symbol	hexagon_if_arch_v4		1557041						
ANR	1557061	Function	hexagon_get_opcode_mach	1397:0:56334:56919							
ANR	1557062	FunctionDef	"hexagon_get_opcode_mach (int bfd_mach , int big_p)"		1557061	0					
ANR	1557063	CompoundStatement		1400:0:56388:56919	1557061	0					
ANR	1557064	Statement	static	1402:2:56398:56403	1557061	0	True				
ANR	1557065	Statement	int	1402:9:56405:56407	1557061	1	True				
ANR	1557066	Statement	mach_type_map	1402:13:56409:56421	1557061	2	True				
ANR	1557067	Statement	[	1402:27:56423:56423	1557061	3	True				
ANR	1557068	Statement	]	1402:28:56424:56424	1557061	4	True				
ANR	1557069	Statement	=	1402:30:56426:56426	1557061	5	True				
ANR	1557070	CompoundStatement		4:2:41:41	1557061	6					
ANR	1557071	Statement	HEXAGON_MACH_V2	1404:4:56436:56450	1557061	0	True				
ANR	1557072	Statement	","	1404:19:56451:56451	1557061	1	True				
ANR	1557073	Statement	HEXAGON_MACH_V3	1405:4:56457:56471	1557061	2	True				
ANR	1557074	Statement	","	1405:19:56472:56472	1557061	3	True				
ANR	1557075	Statement	HEXAGON_MACH_V4	1406:4:56478:56492	1557061	4	True				
ANR	1557076	Statement	","	1406:19:56493:56493	1557061	5	True				
ANR	1557077	Statement	HEXAGON_MACH_V5	1407:4:56499:56513	1557061	6	True				
ANR	1557078	Statement	","	1407:19:56514:56514	1557061	7	True				
ANR	1557079	ExpressionStatement		1409:3:56560:56560	1557061	7	True				
ANR	1557080	ReturnStatement	return HEXAGON_MACH_V5 ;	1413:0:56615:56637	1557061	8	True				
ANR	1557081	Identifier	HEXAGON_MACH_V5		1557061	0					
ANR	1557082	IfStatement	if ( bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5 )		1557061	9					
ANR	1557083	Condition	bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5	1417:6:56709:56772	1557061	0	True				
ANR	1557084	OrExpression	bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5		1557061	0		||			
ANR	1557085	RelationalExpression	bfd_mach < bfd_mach_hexagon_v2		1557061	0		<			
ANR	1557086	Identifier	bfd_mach		1557061	0					
ANR	1557087	Identifier	bfd_mach_hexagon_v2		1557061	1					
ANR	1557088	RelationalExpression	bfd_mach > bfd_mach_hexagon_v5		1557061	1		>			
ANR	1557089	Identifier	bfd_mach		1557061	0					
ANR	1557090	Identifier	bfd_mach_hexagon_v5		1557061	1					
ANR	1557091	ReturnStatement	return HEXAGON_CPU_TYPE_UNINIT ;	1418:4:56779:56809	1557061	1	True				
ANR	1557092	Identifier	HEXAGON_CPU_TYPE_UNINIT		1557061	0					
ANR	1557093	ReturnStatement	return ( mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ] | ( big_p ? HEXAGON_MACH_BIG : 0 ) ) ;	1420:2:56814:56910	1557061	10	True				
ANR	1557094	InclusiveOrExpression	mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ] | ( big_p ? HEXAGON_MACH_BIG : 0 )		1557061	0		|			
ANR	1557095	ArrayIndexing	mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ]		1557061	0					
ANR	1557096	Identifier	mach_type_map		1557061	0					
ANR	1557097	AdditiveExpression	bfd_mach - bfd_mach_hexagon_v2		1557061	1		-			
ANR	1557098	Identifier	bfd_mach		1557061	0					
ANR	1557099	Identifier	bfd_mach_hexagon_v2		1557061	1					
ANR	1557100	ConditionalExpression	big_p ? HEXAGON_MACH_BIG : 0		1557061	1					
ANR	1557101	Condition	big_p		1557061	0					
ANR	1557102	Identifier	big_p		1557061	0					
ANR	1557103	Identifier	HEXAGON_MACH_BIG		1557061	1					
ANR	1557104	PrimaryExpression	0		1557061	2					
ANR	1557105	ReturnType	int		1557061	1					
ANR	1557106	Identifier	hexagon_get_opcode_mach		1557061	2					
ANR	1557107	ParameterList	"int bfd_mach , int big_p"		1557061	3					
ANR	1557108	Parameter	int bfd_mach	1399:1:56363:56374	1557061	0	True				
ANR	1557109	ParameterType	int		1557061	0					
ANR	1557110	Identifier	bfd_mach		1557061	1					
ANR	1557111	Parameter	int big_p	1399:15:56377:56385	1557061	1	True				
ANR	1557112	ParameterType	int		1557061	0					
ANR	1557113	Identifier	big_p		1557061	1					
ANR	1557114	CFGEntryNode	ENTRY		1557061		True				
ANR	1557115	CFGExitNode	EXIT		1557061		True				
ANR	1557116	Symbol	bfd_mach_hexagon_v2		1557061						
ANR	1557117	Symbol	HEXAGON_CPU_TYPE_UNINIT		1557061						
ANR	1557118	Symbol	* mach_type_map		1557061						
ANR	1557119	Symbol	* bfd_mach		1557061						
ANR	1557120	Symbol	HEXAGON_MACH_V5		1557061						
ANR	1557121	Symbol	big_p		1557061						
ANR	1557122	Symbol	bfd_mach_hexagon_v5		1557061						
ANR	1557123	Symbol	mach_type_map		1557061						
ANR	1557124	Symbol	bfd_mach		1557061						
ANR	1557125	Symbol	* bfd_mach_hexagon_v2		1557061						
ANR	1557126	Symbol	HEXAGON_MACH_BIG		1557061						
ANR	1557127	Function	hexagon_opcode_init_tables	1431:0:57149:61829							
ANR	1557128	FunctionDef	hexagon_opcode_init_tables (int cpu)		1557127	0					
ANR	1557129	CompoundStatement		1434:0:57191:61829	1557127	0					
ANR	1557130	IdentifierDeclStatement	size_t i ;	1435:2:57195:57203	1557127	0	True				
ANR	1557131	IdentifierDecl	i		1557127	0					
ANR	1557132	IdentifierDeclType	size_t		1557127	0					
ANR	1557133	Identifier	i		1557127	1					
ANR	1557134	IfStatement	if ( cpu_type == cpu )		1557127	1					
ANR	1557135	Condition	cpu_type == cpu	1437:6:57212:57226	1557127	0	True				
ANR	1557136	EqualityExpression	cpu_type == cpu		1557127	0		==			
ANR	1557137	Identifier	cpu_type		1557127	0					
ANR	1557138	Identifier	cpu		1557127	1					
ANR	1557139	ReturnStatement	return ;	1438:4:57233:57239	1557127	1	True				
ANR	1557140	ExpressionStatement	cpu_type = cpu	1440:2:57244:57258	1557127	2	True				
ANR	1557141	AssignmentExpression	cpu_type = cpu		1557127	0		=			
ANR	1557142	Identifier	cpu_type		1557127	0					
ANR	1557143	Identifier	cpu		1557127	1					
ANR	1557144	IfStatement	if ( cpu_type == HEXAGON_CPU_TYPE_UNINIT )		1557127	3					
ANR	1557145	Condition	cpu_type == HEXAGON_CPU_TYPE_UNINIT	1441:6:57266:57300	1557127	0	True				
ANR	1557146	EqualityExpression	cpu_type == HEXAGON_CPU_TYPE_UNINIT		1557127	0		==			
ANR	1557147	Identifier	cpu_type		1557127	0					
ANR	1557148	Identifier	HEXAGON_CPU_TYPE_UNINIT		1557127	1					
ANR	1557149	ReturnStatement	return ;	1442:4:57307:57313	1557127	1	True				
ANR	1557150	ExpressionStatement	cpu_flag = hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0	1444:2:57318:57530	1557127	4	True				
ANR	1557151	AssignmentExpression	cpu_flag = hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		1557127	0		=			
ANR	1557152	Identifier	cpu_flag		1557127	0					
ANR	1557153	ConditionalExpression	hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		1557127	1					
ANR	1557154	Condition	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557155	CallExpression	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557156	Callee	hexagon_if_arch_v2		1557127	0					
ANR	1557157	Identifier	hexagon_if_arch_v2		1557127	0					
ANR	1557158	ArgumentList			1557127	1					
ANR	1557159	Identifier	HEXAGON_IS_V2		1557127	1					
ANR	1557160	ConditionalExpression	hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		1557127	2					
ANR	1557161	Condition	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557162	CallExpression	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557163	Callee	hexagon_if_arch_v3		1557127	0					
ANR	1557164	Identifier	hexagon_if_arch_v3		1557127	0					
ANR	1557165	ArgumentList			1557127	1					
ANR	1557166	Identifier	HEXAGON_IS_V3		1557127	1					
ANR	1557167	ConditionalExpression	hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		1557127	2					
ANR	1557168	Condition	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557169	CallExpression	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557170	Callee	hexagon_if_arch_v4		1557127	0					
ANR	1557171	Identifier	hexagon_if_arch_v4		1557127	0					
ANR	1557172	ArgumentList			1557127	1					
ANR	1557173	Identifier	HEXAGON_IS_V4		1557127	1					
ANR	1557174	ConditionalExpression	hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		1557127	2					
ANR	1557175	Condition	hexagon_if_arch_v5 ( )		1557127	0					
ANR	1557176	CallExpression	hexagon_if_arch_v5 ( )		1557127	0					
ANR	1557177	Callee	hexagon_if_arch_v5		1557127	0					
ANR	1557178	Identifier	hexagon_if_arch_v5		1557127	0					
ANR	1557179	ArgumentList			1557127	1					
ANR	1557180	Identifier	HEXAGON_IS_V5		1557127	1					
ANR	1557181	PrimaryExpression	0		1557127	2					
ANR	1557182	ExpressionStatement	hexagon_opcodes = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5	1455:2:57775:58074	1557127	5	True				
ANR	1557183	AssignmentExpression	hexagon_opcodes = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		1557127	0		=			
ANR	1557184	Identifier	hexagon_opcodes		1557127	0					
ANR	1557185	ConditionalExpression	hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		1557127	1					
ANR	1557186	Condition	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557187	CallExpression	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557188	Callee	hexagon_if_arch_v2		1557127	0					
ANR	1557189	Identifier	hexagon_if_arch_v2		1557127	0					
ANR	1557190	ArgumentList			1557127	1					
ANR	1557191	Identifier	hexagon_opcodes_v2		1557127	1					
ANR	1557192	ConditionalExpression	hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		1557127	2					
ANR	1557193	Condition	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557194	CallExpression	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557195	Callee	hexagon_if_arch_v3		1557127	0					
ANR	1557196	Identifier	hexagon_if_arch_v3		1557127	0					
ANR	1557197	ArgumentList			1557127	1					
ANR	1557198	Identifier	hexagon_opcodes_v3		1557127	1					
ANR	1557199	ConditionalExpression	hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		1557127	2					
ANR	1557200	Condition	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557201	CallExpression	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557202	Callee	hexagon_if_arch_v4		1557127	0					
ANR	1557203	Identifier	hexagon_if_arch_v4		1557127	0					
ANR	1557204	ArgumentList			1557127	1					
ANR	1557205	Identifier	hexagon_opcodes_v4		1557127	1					
ANR	1557206	Identifier	hexagon_opcodes_v5		1557127	2					
ANR	1557207	ExpressionStatement	hexagon_opcodes_count = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5	1460:2:58079:58402	1557127	6	True				
ANR	1557208	AssignmentExpression	hexagon_opcodes_count = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		1557127	0		=			
ANR	1557209	Identifier	hexagon_opcodes_count		1557127	0					
ANR	1557210	ConditionalExpression	hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		1557127	1					
ANR	1557211	Condition	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557212	CallExpression	hexagon_if_arch_v2 ( )		1557127	0					
ANR	1557213	Callee	hexagon_if_arch_v2		1557127	0					
ANR	1557214	Identifier	hexagon_if_arch_v2		1557127	0					
ANR	1557215	ArgumentList			1557127	1					
ANR	1557216	Identifier	hexagon_opcodes_count_v2		1557127	1					
ANR	1557217	ConditionalExpression	hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		1557127	2					
ANR	1557218	Condition	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557219	CallExpression	hexagon_if_arch_v3 ( )		1557127	0					
ANR	1557220	Callee	hexagon_if_arch_v3		1557127	0					
ANR	1557221	Identifier	hexagon_if_arch_v3		1557127	0					
ANR	1557222	ArgumentList			1557127	1					
ANR	1557223	Identifier	hexagon_opcodes_count_v3		1557127	1					
ANR	1557224	ConditionalExpression	hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		1557127	2					
ANR	1557225	Condition	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557226	CallExpression	hexagon_if_arch_v4 ( )		1557127	0					
ANR	1557227	Callee	hexagon_if_arch_v4		1557127	0					
ANR	1557228	Identifier	hexagon_if_arch_v4		1557127	0					
ANR	1557229	ArgumentList			1557127	1					
ANR	1557230	Identifier	hexagon_opcodes_count_v4		1557127	1					
ANR	1557231	Identifier	hexagon_opcodes_count_v5		1557127	2					
ANR	1557232	ExpressionStatement	hexagon_icode_hash_bits = HEXAGON_INSN_LEN * 8	1467:2:58516:58562	1557127	7	True				
ANR	1557233	AssignmentExpression	hexagon_icode_hash_bits = HEXAGON_INSN_LEN * 8		1557127	0		=			
ANR	1557234	Identifier	hexagon_icode_hash_bits		1557127	0					
ANR	1557235	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		1557127	1		*			
ANR	1557236	Identifier	HEXAGON_INSN_LEN		1557127	0					
ANR	1557237	PrimaryExpression	8		1557127	1					
ANR	1557238	ForStatement	for ( i = 0 ; i < hexagon_opcodes_count ; i ++ )		1557127	8					
ANR	1557239	ForInit	i = 0 ;	1468:7:58571:58576	1557127	0	True				
ANR	1557240	AssignmentExpression	i = 0		1557127	0		=			
ANR	1557241	Identifier	i		1557127	0					
ANR	1557242	PrimaryExpression	0		1557127	1					
ANR	1557243	Condition	i < hexagon_opcodes_count	1468:14:58578:58602	1557127	1	True				
ANR	1557244	RelationalExpression	i < hexagon_opcodes_count		1557127	0		<			
ANR	1557245	Identifier	i		1557127	0					
ANR	1557246	Identifier	hexagon_opcodes_count		1557127	1					
ANR	1557247	PostIncDecOperationExpression	i ++	1468:41:58605:58607	1557127	2	True				
ANR	1557248	Identifier	i		1557127	0					
ANR	1557249	IncDec	++		1557127	1					
ANR	1557250	CompoundStatement		38:6:1455:1470	1557127	3					
ANR	1557251	IdentifierDeclStatement	unsigned int bits ;	1470:6:58622:58639	1557127	0	True				
ANR	1557252	IdentifierDecl	bits		1557127	0					
ANR	1557253	IdentifierDeclType	unsigned int		1557127	0					
ANR	1557254	Identifier	bits		1557127	1					
ANR	1557255	IdentifierDeclStatement	const char * str ;	1471:6:58647:58662	1557127	1	True				
ANR	1557256	IdentifierDecl	* str		1557127	0					
ANR	1557257	IdentifierDeclType	const char *		1557127	0					
ANR	1557258	Identifier	str		1557127	1					
ANR	1557259	ForStatement	"for ( bits = 0 , str = hexagon_opcodes [ i ] . enc ; * str ; str ++ )"		1557127	2					
ANR	1557260	ForInit	"bits = 0 , str = hexagon_opcodes [ i ] . enc ;"	1473:11:58676:58715	1557127	0	True				
ANR	1557261	Expression	"bits = 0 , str = hexagon_opcodes [ i ] . enc"		1557127	0					
ANR	1557262	AssignmentExpression	bits = 0		1557127	0		=			
ANR	1557263	Identifier	bits		1557127	0					
ANR	1557264	PrimaryExpression	0		1557127	1					
ANR	1557265	AssignmentExpression	str = hexagon_opcodes [ i ] . enc		1557127	1		=			
ANR	1557266	Identifier	str		1557127	0					
ANR	1557267	MemberAccess	hexagon_opcodes [ i ] . enc		1557127	1					
ANR	1557268	ArrayIndexing	hexagon_opcodes [ i ]		1557127	0					
ANR	1557269	Identifier	hexagon_opcodes		1557127	0					
ANR	1557270	Identifier	i		1557127	1					
ANR	1557271	Identifier	enc		1557127	1					
ANR	1557272	Condition	* str	1473:52:58717:58720	1557127	1	True				
ANR	1557273	UnaryOperationExpression	* str		1557127	0					
ANR	1557274	UnaryOperator	*		1557127	0					
ANR	1557275	Identifier	str		1557127	1					
ANR	1557276	PostIncDecOperationExpression	str ++	1473:58:58723:58727	1557127	2	True				
ANR	1557277	Identifier	str		1557127	0					
ANR	1557278	IncDec	++		1557127	1					
ANR	1557279	CompoundStatement		41:8:1546:1546	1557127	3					
ANR	1557280	IfStatement	if ( * str == '0' || * str == '1' || * str == 'P' || * str == 'E' )		1557127	0					
ANR	1557281	Condition	* str == '0' || * str == '1' || * str == 'P' || * str == 'E'	1475:14:58754:58809	1557127	0	True				
ANR	1557282	OrExpression	* str == '0' || * str == '1' || * str == 'P' || * str == 'E'		1557127	0		||			
ANR	1557283	EqualityExpression	* str == '0'		1557127	0		==			
ANR	1557284	UnaryOperationExpression	* str		1557127	0					
ANR	1557285	UnaryOperator	*		1557127	0					
ANR	1557286	Identifier	str		1557127	1					
ANR	1557287	PrimaryExpression	'0'		1557127	1					
ANR	1557288	OrExpression	* str == '1' || * str == 'P' || * str == 'E'		1557127	1		||			
ANR	1557289	EqualityExpression	* str == '1'		1557127	0		==			
ANR	1557290	UnaryOperationExpression	* str		1557127	0					
ANR	1557291	UnaryOperator	*		1557127	0					
ANR	1557292	Identifier	str		1557127	1					
ANR	1557293	PrimaryExpression	'1'		1557127	1					
ANR	1557294	OrExpression	* str == 'P' || * str == 'E'		1557127	1		||			
ANR	1557295	EqualityExpression	* str == 'P'		1557127	0		==			
ANR	1557296	UnaryOperationExpression	* str		1557127	0					
ANR	1557297	UnaryOperator	*		1557127	0					
ANR	1557298	Identifier	str		1557127	1					
ANR	1557299	PrimaryExpression	'P'		1557127	1					
ANR	1557300	EqualityExpression	* str == 'E'		1557127	1		==			
ANR	1557301	UnaryOperationExpression	* str		1557127	0					
ANR	1557302	UnaryOperator	*		1557127	0					
ANR	1557303	Identifier	str		1557127	1					
ANR	1557304	PrimaryExpression	'E'		1557127	1					
ANR	1557305	ExpressionStatement	bits ++	1476:12:58824:58830	1557127	1	True				
ANR	1557306	PostIncDecOperationExpression	bits ++		1557127	0					
ANR	1557307	Identifier	bits		1557127	0					
ANR	1557308	IncDec	++		1557127	1					
ANR	1557309	ElseStatement	else		1557127	0					
ANR	1557310	BreakStatement	break ;	1478:12:58859:58864	1557127	0	True				
ANR	1557311	IfStatement	if ( bits < hexagon_icode_hash_bits )		1557127	3					
ANR	1557312	Condition	bits < hexagon_icode_hash_bits	1481:10:58887:58916	1557127	0	True				
ANR	1557313	RelationalExpression	bits < hexagon_icode_hash_bits		1557127	0		<			
ANR	1557314	Identifier	bits		1557127	0					
ANR	1557315	Identifier	hexagon_icode_hash_bits		1557127	1					
ANR	1557316	ExpressionStatement	hexagon_icode_hash_bits = bits	1482:8:58927:58957	1557127	1	True				
ANR	1557317	AssignmentExpression	hexagon_icode_hash_bits = bits		1557127	0		=			
ANR	1557318	Identifier	hexagon_icode_hash_bits		1557127	0					
ANR	1557319	Identifier	bits		1557127	1					
ANR	1557320	ExpressionStatement	hexagon_icode_hash_bits += ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )	1484:2:58967:59049	1557127	9	True				
ANR	1557321	AssignmentExpression	hexagon_icode_hash_bits += ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		1557127	0		+=			
ANR	1557322	Identifier	hexagon_icode_hash_bits		1557127	0					
ANR	1557323	UnaryOperationExpression	~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		1557127	1					
ANR	1557324	UnaryOperator	~		1557127	0					
ANR	1557325	UnaryOperationExpression	- ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS )		1557127	1					
ANR	1557326	UnaryOperator	-		1557127	0					
ANR	1557327	ShiftExpression	HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS		1557127	1		>>			
ANR	1557328	Identifier	HEXAGON_END_PACKET_MASK		1557127	0					
ANR	1557329	Identifier	HEXAGON_END_PACKET_POS		1557127	1					
ANR	1557330	ExpressionStatement	"memset ( opcode_map , 0 , sizeof ( opcode_map ) )"	1487:2:59084:59127	1557127	10	True				
ANR	1557331	CallExpression	"memset ( opcode_map , 0 , sizeof ( opcode_map ) )"		1557127	0					
ANR	1557332	Callee	memset		1557127	0					
ANR	1557333	Identifier	memset		1557127	0					
ANR	1557334	ArgumentList	opcode_map		1557127	1					
ANR	1557335	Argument	opcode_map		1557127	0					
ANR	1557336	Identifier	opcode_map		1557127	0					
ANR	1557337	Argument	0		1557127	1					
ANR	1557338	PrimaryExpression	0		1557127	0					
ANR	1557339	Argument	sizeof ( opcode_map )		1557127	2					
ANR	1557340	SizeofExpression	sizeof ( opcode_map )		1557127	0					
ANR	1557341	Sizeof	sizeof		1557127	0					
ANR	1557342	SizeofOperand	opcode_map		1557127	1					
ANR	1557343	ExpressionStatement	"icode_map = calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"	1488:2:59131:59201	1557127	11	True				
ANR	1557344	AssignmentExpression	"icode_map = calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"		1557127	0		=			
ANR	1557345	Identifier	icode_map		1557127	0					
ANR	1557346	CallExpression	"calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"		1557127	1					
ANR	1557347	Callee	calloc		1557127	0					
ANR	1557348	Identifier	calloc		1557127	0					
ANR	1557349	ArgumentList	1 << hexagon_icode_hash_bits		1557127	1					
ANR	1557350	Argument	1 << hexagon_icode_hash_bits		1557127	0					
ANR	1557351	ShiftExpression	1 << hexagon_icode_hash_bits		1557127	0		<<			
ANR	1557352	PrimaryExpression	1		1557127	0					
ANR	1557353	Identifier	hexagon_icode_hash_bits		1557127	1					
ANR	1557354	Argument	sizeof ( * icode_map )		1557127	1					
ANR	1557355	SizeofExpression	sizeof ( * icode_map )		1557127	0					
ANR	1557356	Sizeof	sizeof		1557127	0					
ANR	1557357	UnaryOperationExpression	* icode_map		1557127	1					
ANR	1557358	UnaryOperator	*		1557127	0					
ANR	1557359	Identifier	icode_map		1557127	1					
ANR	1557360	ForStatement	for ( i = hexagon_opcodes_count ; i > 0 ; -- i )		1557127	12					
ANR	1557361	ForInit	i = hexagon_opcodes_count ;	1491:7:59276:59301	1557127	0	True				
ANR	1557362	AssignmentExpression	i = hexagon_opcodes_count		1557127	0		=			
ANR	1557363	Identifier	i		1557127	0					
ANR	1557364	Identifier	hexagon_opcodes_count		1557127	1					
ANR	1557365	Condition	i > 0	1491:34:59303:59307	1557127	1	True				
ANR	1557366	RelationalExpression	i > 0		1557127	0		>			
ANR	1557367	Identifier	i		1557127	0					
ANR	1557368	PrimaryExpression	0		1557127	1					
ANR	1557369	UnaryExpression	-- i	1491:41:59310:59312	1557127	2	True				
ANR	1557370	IncDec	--		1557127	0					
ANR	1557371	Identifier	i		1557127	1					
ANR	1557372	CompoundStatement		62:6:2187:2205	1557127	3					
ANR	1557373	IdentifierDeclStatement	hexagon_hash opcode ;	1493:6:59327:59346	1557127	0	True				
ANR	1557374	IdentifierDecl	opcode		1557127	0					
ANR	1557375	IdentifierDeclType	hexagon_hash		1557127	0					
ANR	1557376	Identifier	opcode		1557127	1					
ANR	1557377	IdentifierDeclStatement	hexagon_insn insn ;	1494:6:59354:59371	1557127	1	True				
ANR	1557378	IdentifierDecl	insn		1557127	0					
ANR	1557379	IdentifierDeclType	hexagon_insn		1557127	0					
ANR	1557380	Identifier	insn		1557127	1					
ANR	1557381	IdentifierDeclStatement	hexagon_hash icode ;	1495:6:59379:59397	1557127	2	True				
ANR	1557382	IdentifierDecl	icode		1557127	0					
ANR	1557383	IdentifierDeclType	hexagon_hash		1557127	0					
ANR	1557384	Identifier	icode		1557127	1					
ANR	1557385	ExpressionStatement	opcode = HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )	1497:6:59406:59467	1557127	3	True				
ANR	1557386	AssignmentExpression	opcode = HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )		1557127	0		=			
ANR	1557387	Identifier	opcode		1557127	0					
ANR	1557388	CallExpression	HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )		1557127	1					
ANR	1557389	Callee	HEXAGON_HASH_OPCODE		1557127	0					
ANR	1557390	Identifier	HEXAGON_HASH_OPCODE		1557127	0					
ANR	1557391	ArgumentList	hexagon_opcodes [ i - 1 ] . syntax		1557127	1					
ANR	1557392	Argument	hexagon_opcodes [ i - 1 ] . syntax		1557127	0					
ANR	1557393	MemberAccess	hexagon_opcodes [ i - 1 ] . syntax		1557127	0					
ANR	1557394	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557395	Identifier	hexagon_opcodes		1557127	0					
ANR	1557396	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557397	Identifier	i		1557127	0					
ANR	1557398	PrimaryExpression	1		1557127	1					
ANR	1557399	Identifier	syntax		1557127	1					
ANR	1557400	ExpressionStatement	insn = hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )	1498:6:59475:59535	1557127	4	True				
ANR	1557401	AssignmentExpression	insn = hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )		1557127	0		=			
ANR	1557402	Identifier	insn		1557127	0					
ANR	1557403	CallExpression	hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )		1557127	1					
ANR	1557404	Callee	hexagon_encode_opcode		1557127	0					
ANR	1557405	Identifier	hexagon_encode_opcode		1557127	0					
ANR	1557406	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		1557127	1					
ANR	1557407	Argument	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557408	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557409	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557410	Identifier	hexagon_opcodes		1557127	0					
ANR	1557411	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557412	Identifier	i		1557127	0					
ANR	1557413	PrimaryExpression	1		1557127	1					
ANR	1557414	Identifier	enc		1557127	1					
ANR	1557415	ExpressionStatement	icode = HEXAGON_HASH_ICODE ( insn )	1499:6:59543:59577	1557127	5	True				
ANR	1557416	AssignmentExpression	icode = HEXAGON_HASH_ICODE ( insn )		1557127	0		=			
ANR	1557417	Identifier	icode		1557127	0					
ANR	1557418	CallExpression	HEXAGON_HASH_ICODE ( insn )		1557127	1					
ANR	1557419	Callee	HEXAGON_HASH_ICODE		1557127	0					
ANR	1557420	Identifier	HEXAGON_HASH_ICODE		1557127	0					
ANR	1557421	ArgumentList	insn		1557127	1					
ANR	1557422	Argument	insn		1557127	0					
ANR	1557423	Identifier	insn		1557127	0					
ANR	1557424	ExpressionStatement	hexagon_opcodes [ i - 1 ] . next_asm = opcode_map [ opcode ]	1501:6:59586:59640	1557127	6	True				
ANR	1557425	AssignmentExpression	hexagon_opcodes [ i - 1 ] . next_asm = opcode_map [ opcode ]		1557127	0		=			
ANR	1557426	MemberAccess	hexagon_opcodes [ i - 1 ] . next_asm		1557127	0					
ANR	1557427	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557428	Identifier	hexagon_opcodes		1557127	0					
ANR	1557429	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557430	Identifier	i		1557127	0					
ANR	1557431	PrimaryExpression	1		1557127	1					
ANR	1557432	Identifier	next_asm		1557127	1					
ANR	1557433	ArrayIndexing	opcode_map [ opcode ]		1557127	1					
ANR	1557434	Identifier	opcode_map		1557127	0					
ANR	1557435	Identifier	opcode		1557127	1					
ANR	1557436	ExpressionStatement	opcode_map [ opcode ] = hexagon_opcodes + i - 1	1502:6:59648:59693	1557127	7	True				
ANR	1557437	AssignmentExpression	opcode_map [ opcode ] = hexagon_opcodes + i - 1		1557127	0		=			
ANR	1557438	ArrayIndexing	opcode_map [ opcode ]		1557127	0					
ANR	1557439	Identifier	opcode_map		1557127	0					
ANR	1557440	Identifier	opcode		1557127	1					
ANR	1557441	AdditiveExpression	hexagon_opcodes + i - 1		1557127	1		+			
ANR	1557442	Identifier	hexagon_opcodes		1557127	0					
ANR	1557443	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557444	Identifier	i		1557127	0					
ANR	1557445	PrimaryExpression	1		1557127	1					
ANR	1557446	ExpressionStatement	hexagon_opcodes [ i - 1 ] . next_dis = icode_map [ icode ]	1504:6:59702:59754	1557127	8	True				
ANR	1557447	AssignmentExpression	hexagon_opcodes [ i - 1 ] . next_dis = icode_map [ icode ]		1557127	0		=			
ANR	1557448	MemberAccess	hexagon_opcodes [ i - 1 ] . next_dis		1557127	0					
ANR	1557449	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557450	Identifier	hexagon_opcodes		1557127	0					
ANR	1557451	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557452	Identifier	i		1557127	0					
ANR	1557453	PrimaryExpression	1		1557127	1					
ANR	1557454	Identifier	next_dis		1557127	1					
ANR	1557455	ArrayIndexing	icode_map [ icode ]		1557127	1					
ANR	1557456	Identifier	icode_map		1557127	0					
ANR	1557457	Identifier	icode		1557127	1					
ANR	1557458	ExpressionStatement	icode_map [ icode ] = hexagon_opcodes + i - 1	1505:6:59762:59805	1557127	9	True				
ANR	1557459	AssignmentExpression	icode_map [ icode ] = hexagon_opcodes + i - 1		1557127	0		=			
ANR	1557460	ArrayIndexing	icode_map [ icode ]		1557127	0					
ANR	1557461	Identifier	icode_map		1557127	0					
ANR	1557462	Identifier	icode		1557127	1					
ANR	1557463	AdditiveExpression	hexagon_opcodes + i - 1		1557127	1		+			
ANR	1557464	Identifier	hexagon_opcodes		1557127	0					
ANR	1557465	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557466	Identifier	i		1557127	0					
ANR	1557467	PrimaryExpression	1		1557127	1					
ANR	1557468	IfStatement	"if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" ) )"		1557127	10					
ANR	1557469	Condition	"( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"	1507:10:59818:59925	1557127	0	True				
ANR	1557470	OrExpression	"( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		1557127	0		||			
ANR	1557471	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP		1557127	0		&			
ANR	1557472	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557473	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557474	Identifier	hexagon_opcodes		1557127	0					
ANR	1557475	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557476	Identifier	i		1557127	0					
ANR	1557477	PrimaryExpression	1		1557127	1					
ANR	1557478	Identifier	attributes		1557127	1					
ANR	1557479	Identifier	A_IT_NOP		1557127	1					
ANR	1557480	UnaryOperationExpression	"! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		1557127	1					
ANR	1557481	UnaryOperator	!		1557127	0					
ANR	1557482	CallExpression	"strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		1557127	1					
ANR	1557483	Callee	strcmp		1557127	0					
ANR	1557484	Identifier	strcmp		1557127	0					
ANR	1557485	ArgumentList	hexagon_opcodes [ i - 1 ] . syntax		1557127	1					
ANR	1557486	Argument	hexagon_opcodes [ i - 1 ] . syntax		1557127	0					
ANR	1557487	MemberAccess	hexagon_opcodes [ i - 1 ] . syntax		1557127	0					
ANR	1557488	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557489	Identifier	hexagon_opcodes		1557127	0					
ANR	1557490	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557491	Identifier	i		1557127	0					
ANR	1557492	PrimaryExpression	1		1557127	1					
ANR	1557493	Identifier	syntax		1557127	1					
ANR	1557494	Argument	"""nop"""		1557127	1					
ANR	1557495	PrimaryExpression	"""nop"""		1557127	0					
ANR	1557496	CompoundStatement		76:8:2744:2744	1557127	1					
ANR	1557497	ExpressionStatement	hexagon_nop = insn	1510:10:59948:59966	1557127	0	True				
ANR	1557498	AssignmentExpression	hexagon_nop = insn		1557127	0		=			
ANR	1557499	Identifier	hexagon_nop		1557127	0					
ANR	1557500	Identifier	insn		1557127	1					
ANR	1557501	ExpressionStatement	hexagon_nop_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )	1511:10:59978:60046	1557127	1	True				
ANR	1557502	AssignmentExpression	hexagon_nop_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		1557127	0		=			
ANR	1557503	Identifier	hexagon_nop_mask		1557127	0					
ANR	1557504	CallExpression	hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		1557127	1					
ANR	1557505	Callee	hexagon_encode_mask		1557127	0					
ANR	1557506	Identifier	hexagon_encode_mask		1557127	0					
ANR	1557507	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		1557127	1					
ANR	1557508	Argument	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557509	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557510	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557511	Identifier	hexagon_opcodes		1557127	0					
ANR	1557512	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557513	Identifier	i		1557127	0					
ANR	1557514	PrimaryExpression	1		1557127	1					
ANR	1557515	Identifier	enc		1557127	1					
ANR	1557516	ExpressionStatement	hexagon_opcodes [ i - 1 ] . attributes |= A_IT_NOP	1512:10:60058:60104	1557127	2	True				
ANR	1557517	AssignmentExpression	hexagon_opcodes [ i - 1 ] . attributes |= A_IT_NOP		1557127	0		|=			
ANR	1557518	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557519	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557520	Identifier	hexagon_opcodes		1557127	0					
ANR	1557521	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557522	Identifier	i		1557127	0					
ANR	1557523	PrimaryExpression	1		1557127	1					
ANR	1557524	Identifier	attributes		1557127	1					
ANR	1557525	Identifier	A_IT_NOP		1557127	1					
ANR	1557526	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER ) )		1557127	11					
ANR	1557527	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER	1515:10:60127:60178	1557127	0	True				
ANR	1557528	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER		1557127	0		&			
ANR	1557529	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557530	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557531	Identifier	hexagon_opcodes		1557127	0					
ANR	1557532	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557533	Identifier	i		1557127	0					
ANR	1557534	PrimaryExpression	1		1557127	1					
ANR	1557535	Identifier	attributes		1557127	1					
ANR	1557536	Identifier	A_IT_EXTENDER		1557127	1					
ANR	1557537	CompoundStatement		83:8:2997:2997	1557127	1					
ANR	1557538	ExpressionStatement	hexagon_kext = insn	1517:10:60201:60220	1557127	0	True				
ANR	1557539	AssignmentExpression	hexagon_kext = insn		1557127	0		=			
ANR	1557540	Identifier	hexagon_kext		1557127	0					
ANR	1557541	Identifier	insn		1557127	1					
ANR	1557542	ExpressionStatement	hexagon_kext_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )	1518:10:60232:60301	1557127	1	True				
ANR	1557543	AssignmentExpression	hexagon_kext_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		1557127	0		=			
ANR	1557544	Identifier	hexagon_kext_mask		1557127	0					
ANR	1557545	CallExpression	hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		1557127	1					
ANR	1557546	Callee	hexagon_encode_mask		1557127	0					
ANR	1557547	Identifier	hexagon_encode_mask		1557127	0					
ANR	1557548	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		1557127	1					
ANR	1557549	Argument	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557550	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		1557127	0					
ANR	1557551	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557552	Identifier	hexagon_opcodes		1557127	0					
ANR	1557553	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557554	Identifier	i		1557127	0					
ANR	1557555	PrimaryExpression	1		1557127	1					
ANR	1557556	Identifier	enc		1557127	1					
ANR	1557557	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_PREFIX	1519:10:60313:60368	1557127	2	True				
ANR	1557558	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_PREFIX		1557127	0		|=			
ANR	1557559	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557560	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557561	Identifier	hexagon_opcodes		1557127	0					
ANR	1557562	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557563	Identifier	i		1557127	0					
ANR	1557564	PrimaryExpression	1		1557127	1					
ANR	1557565	Identifier	flags		1557127	1					
ANR	1557566	Identifier	HEXAGON_CODE_IS_PREFIX		1557127	1					
ANR	1557567	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER ) )		1557127	12					
ANR	1557568	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER	1522:10:60391:60442	1557127	0	True				
ANR	1557569	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER		1557127	0		&			
ANR	1557570	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557571	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557572	Identifier	hexagon_opcodes		1557127	0					
ANR	1557573	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557574	Identifier	i		1557127	0					
ANR	1557575	PrimaryExpression	1		1557127	1					
ANR	1557576	Identifier	attributes		1557127	1					
ANR	1557577	Identifier	A_BRANCHADDER		1557127	1					
ANR	1557578	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_BRANCH	1523:8:60453:60508	1557127	1	True				
ANR	1557579	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_BRANCH		1557127	0		|=			
ANR	1557580	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557581	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557582	Identifier	hexagon_opcodes		1557127	0					
ANR	1557583	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557584	Identifier	i		1557127	0					
ANR	1557585	PrimaryExpression	1		1557127	1					
ANR	1557586	Identifier	flags		1557127	1					
ANR	1557587	Identifier	HEXAGON_CODE_IS_BRANCH		1557127	1					
ANR	1557588	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST ) )		1557127	13					
ANR	1557589	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST	1525:10:60521:60586	1557127	0	True				
ANR	1557590	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST		1557127	0		&			
ANR	1557591	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557592	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557593	Identifier	hexagon_opcodes		1557127	0					
ANR	1557594	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557595	Identifier	i		1557127	0					
ANR	1557596	PrimaryExpression	1		1557127	1					
ANR	1557597	Identifier	attributes		1557127	1					
ANR	1557598	Identifier	A_RESTRICT_SINGLE_MEM_FIRST		1557127	1					
ANR	1557599	CompoundStatement		93:8:3405:3405	1557127	1					
ANR	1557600	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_MEMORY	1527:10:60609:60664	1557127	0	True				
ANR	1557601	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_MEMORY		1557127	0		|=			
ANR	1557602	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557603	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557604	Identifier	hexagon_opcodes		1557127	0					
ANR	1557605	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557606	Identifier	i		1557127	0					
ANR	1557607	PrimaryExpression	1		1557127	1					
ANR	1557608	Identifier	flags		1557127	1					
ANR	1557609	Identifier	HEXAGON_CODE_IS_MEMORY		1557127	1					
ANR	1557610	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_STORE ) )		1557127	1					
ANR	1557611	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_STORE	1529:14:60681:60726	1557127	0	True				
ANR	1557612	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_STORE		1557127	0		&			
ANR	1557613	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557614	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557615	Identifier	hexagon_opcodes		1557127	0					
ANR	1557616	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557617	Identifier	i		1557127	0					
ANR	1557618	PrimaryExpression	1		1557127	1					
ANR	1557619	Identifier	attributes		1557127	1					
ANR	1557620	Identifier	A_STORE		1557127	1					
ANR	1557621	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_STORE	1530:12:60741:60795	1557127	1	True				
ANR	1557622	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_STORE		1557127	0		|=			
ANR	1557623	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557624	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557625	Identifier	hexagon_opcodes		1557127	0					
ANR	1557626	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557627	Identifier	i		1557127	0					
ANR	1557628	PrimaryExpression	1		1557127	1					
ANR	1557629	Identifier	flags		1557127	1					
ANR	1557630	Identifier	HEXAGON_CODE_IS_STORE		1557127	1					
ANR	1557631	ElseStatement	else		1557127	0					
ANR	1557632	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_LOAD	1532:12:60824:60877	1557127	0	True				
ANR	1557633	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_LOAD		1557127	0		|=			
ANR	1557634	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557635	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557636	Identifier	hexagon_opcodes		1557127	0					
ANR	1557637	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557638	Identifier	i		1557127	0					
ANR	1557639	PrimaryExpression	1		1557127	1					
ANR	1557640	Identifier	flags		1557127	1					
ANR	1557641	Identifier	HEXAGON_CODE_IS_LOAD		1557127	1					
ANR	1557642	IfStatement	if ( HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR )		1557127	14					
ANR	1557643	Condition	HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR	1535:10:60900:60948	1557127	0	True				
ANR	1557644	EqualityExpression	HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR		1557127	0		==			
ANR	1557645	CallExpression	HEXAGON_END_PACKET_GET ( insn )		1557127	0					
ANR	1557646	Callee	HEXAGON_END_PACKET_GET		1557127	0					
ANR	1557647	Identifier	HEXAGON_END_PACKET_GET		1557127	0					
ANR	1557648	ArgumentList	insn		1557127	1					
ANR	1557649	Argument	insn		1557127	0					
ANR	1557650	Identifier	insn		1557127	0					
ANR	1557651	Identifier	HEXAGON_END_PAIR		1557127	1					
ANR	1557652	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_DUPLEX	1536:8:60959:61014	1557127	1	True				
ANR	1557653	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_DUPLEX		1557127	0		|=			
ANR	1557654	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557655	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557656	Identifier	hexagon_opcodes		1557127	0					
ANR	1557657	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557658	Identifier	i		1557127	0					
ANR	1557659	PrimaryExpression	1		1557127	1					
ANR	1557660	Identifier	flags		1557127	1					
ANR	1557661	Identifier	HEXAGON_CODE_IS_DUPLEX		1557127	1					
ANR	1557662	ElseStatement	else		1557127	0					
ANR	1557663	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & PACKED ) )		1557127	0					
ANR	1557664	Condition	hexagon_opcodes [ i - 1 ] . attributes & PACKED	1537:15:61031:61075	1557127	0	True				
ANR	1557665	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & PACKED		1557127	0		&			
ANR	1557666	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		1557127	0					
ANR	1557667	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557668	Identifier	hexagon_opcodes		1557127	0					
ANR	1557669	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557670	Identifier	i		1557127	0					
ANR	1557671	PrimaryExpression	1		1557127	1					
ANR	1557672	Identifier	attributes		1557127	1					
ANR	1557673	Identifier	PACKED		1557127	1					
ANR	1557674	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_COMPND	1538:8:61086:61141	1557127	1	True				
ANR	1557675	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_COMPND		1557127	0		|=			
ANR	1557676	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		1557127	0					
ANR	1557677	ArrayIndexing	hexagon_opcodes [ i - 1 ]		1557127	0					
ANR	1557678	Identifier	hexagon_opcodes		1557127	0					
ANR	1557679	AdditiveExpression	i - 1		1557127	1		-			
ANR	1557680	Identifier	i		1557127	0					
ANR	1557681	PrimaryExpression	1		1557127	1					
ANR	1557682	Identifier	flags		1557127	1					
ANR	1557683	Identifier	HEXAGON_CODE_IS_COMPND		1557127	1					
ANR	1557684	ExpressionStatement	"puts ( ""Hash Table Depth:"" )"	1542:4:61160:61186	1557127	13	True				
ANR	1557685	CallExpression	"puts ( ""Hash Table Depth:"" )"		1557127	0					
ANR	1557686	Callee	puts		1557127	0					
ANR	1557687	Identifier	puts		1557127	0					
ANR	1557688	ArgumentList	"""Hash Table Depth:"""		1557127	1					
ANR	1557689	Argument	"""Hash Table Depth:"""		1557127	0					
ANR	1557690	PrimaryExpression	"""Hash Table Depth:"""		1557127	0					
ANR	1557691	ForStatement	for ( i = 0 ; i < HEXAGON_HASH_SIZE ; i ++ )		1557127	14					
ANR	1557692	ForInit	i = 0 ;	1543:9:61197:61202	1557127	0	True				
ANR	1557693	AssignmentExpression	i = 0		1557127	0		=			
ANR	1557694	Identifier	i		1557127	0					
ANR	1557695	PrimaryExpression	0		1557127	1					
ANR	1557696	Condition	i < HEXAGON_HASH_SIZE	1543:16:61204:61224	1557127	1	True				
ANR	1557697	RelationalExpression	i < HEXAGON_HASH_SIZE		1557127	0		<			
ANR	1557698	Identifier	i		1557127	0					
ANR	1557699	Identifier	HEXAGON_HASH_SIZE		1557127	1					
ANR	1557700	PostIncDecOperationExpression	i ++	1543:39:61227:61229	1557127	2	True				
ANR	1557701	Identifier	i		1557127	0					
ANR	1557702	IncDec	++		1557127	1					
ANR	1557703	CompoundStatement		113:8:4084:4092	1557127	3					
ANR	1557704	IdentifierDeclStatement	hexagon_opcode * op ;	1545:8:61248:61266	1557127	0	True				
ANR	1557705	IdentifierDecl	* op		1557127	0					
ANR	1557706	IdentifierDeclType	hexagon_opcode *		1557127	0					
ANR	1557707	Identifier	op		1557127	1					
ANR	1557708	IdentifierDeclStatement	size_t j ;	1546:8:61276:61284	1557127	1	True				
ANR	1557709	IdentifierDecl	j		1557127	0					
ANR	1557710	IdentifierDeclType	size_t		1557127	0					
ANR	1557711	Identifier	j		1557127	1					
ANR	1557712	ForStatement	"for ( j = 0 , op = opcode_map [ i ] ; op ; j ++ )"		1557127	2					
ANR	1557713	ForInit	"j = 0 , op = opcode_map [ i ] ;"	1548:13:61300:61326	1557127	0	True				
ANR	1557714	Expression	"j = 0 , op = opcode_map [ i ]"		1557127	0					
ANR	1557715	AssignmentExpression	j = 0		1557127	0		=			
ANR	1557716	Identifier	j		1557127	0					
ANR	1557717	PrimaryExpression	0		1557127	1					
ANR	1557718	AssignmentExpression	op = opcode_map [ i ]		1557127	1		=			
ANR	1557719	Identifier	op		1557127	0					
ANR	1557720	ArrayIndexing	opcode_map [ i ]		1557127	1					
ANR	1557721	Identifier	opcode_map		1557127	0					
ANR	1557722	Identifier	i		1557127	1					
ANR	1557723	Condition	op	1548:41:61328:61329	1557127	1	True				
ANR	1557724	Identifier	op		1557127	0					
ANR	1557725	PostIncDecOperationExpression	j ++	1548:45:61332:61334	1557127	2	True				
ANR	1557726	Identifier	j		1557127	0					
ANR	1557727	IncDec	++		1557127	1					
ANR	1557728	ExpressionStatement	op = HEXAGON_CODE_NEXT_ASM ( op )	1549:10:61347:61378	1557127	3	True				
ANR	1557729	AssignmentExpression	op = HEXAGON_CODE_NEXT_ASM ( op )		1557127	0		=			
ANR	1557730	Identifier	op		1557127	0					
ANR	1557731	CallExpression	HEXAGON_CODE_NEXT_ASM ( op )		1557127	1					
ANR	1557732	Callee	HEXAGON_CODE_NEXT_ASM		1557127	0					
ANR	1557733	Identifier	HEXAGON_CODE_NEXT_ASM		1557127	0					
ANR	1557734	ArgumentList	op		1557127	1					
ANR	1557735	Argument	op		1557127	0					
ANR	1557736	Identifier	op		1557127	0					
ANR	1557737	ExpressionStatement	"printf ( ""#%02ld ('%c'): %02ld\\t"" , i , ( i % HEXAGON_HASH_1 ) + 'a' , j )"	1551:8:61389:61456	1557127	3	True				
ANR	1557738	CallExpression	"printf ( ""#%02ld ('%c'): %02ld\\t"" , i , ( i % HEXAGON_HASH_1 ) + 'a' , j )"		1557127	0					
ANR	1557739	Callee	printf		1557127	0					
ANR	1557740	Identifier	printf		1557127	0					
ANR	1557741	ArgumentList	"""#%02ld ('%c'): %02ld\\t"""		1557127	1					
ANR	1557742	Argument	"""#%02ld ('%c'): %02ld\\t"""		1557127	0					
ANR	1557743	PrimaryExpression	"""#%02ld ('%c'): %02ld\\t"""		1557127	0					
ANR	1557744	Argument	i		1557127	1					
ANR	1557745	Identifier	i		1557127	0					
ANR	1557746	Argument	( i % HEXAGON_HASH_1 ) + 'a'		1557127	2					
ANR	1557747	AdditiveExpression	( i % HEXAGON_HASH_1 ) + 'a'		1557127	0		+			
ANR	1557748	MultiplicativeExpression	i % HEXAGON_HASH_1		1557127	0		%			
ANR	1557749	Identifier	i		1557127	0					
ANR	1557750	Identifier	HEXAGON_HASH_1		1557127	1					
ANR	1557751	PrimaryExpression	'a'		1557127	1					
ANR	1557752	Argument	j		1557127	3					
ANR	1557753	Identifier	j		1557127	0					
ANR	1557754	ExpressionStatement	"puts ( """" )"	1553:4:61470:61479	1557127	15	True				
ANR	1557755	CallExpression	"puts ( """" )"		1557127	0					
ANR	1557756	Callee	puts		1557127	0					
ANR	1557757	Identifier	puts		1557127	0					
ANR	1557758	ArgumentList	""""""		1557127	1					
ANR	1557759	Argument	""""""		1557127	0					
ANR	1557760	PrimaryExpression	""""""		1557127	0					
ANR	1557761	ExpressionStatement	"puts ( ""Hash Table Syntax:"" )"	1555:4:61486:61513	1557127	16	True				
ANR	1557762	CallExpression	"puts ( ""Hash Table Syntax:"" )"		1557127	0					
ANR	1557763	Callee	puts		1557127	0					
ANR	1557764	Identifier	puts		1557127	0					
ANR	1557765	ArgumentList	"""Hash Table Syntax:"""		1557127	1					
ANR	1557766	Argument	"""Hash Table Syntax:"""		1557127	0					
ANR	1557767	PrimaryExpression	"""Hash Table Syntax:"""		1557127	0					
ANR	1557768	ForStatement	for ( i = 0 ; i < HEXAGON_HASH_SIZE ; i ++ )		1557127	17					
ANR	1557769	ForInit	i = 0 ;	1556:9:61524:61529	1557127	0	True				
ANR	1557770	AssignmentExpression	i = 0		1557127	0		=			
ANR	1557771	Identifier	i		1557127	0					
ANR	1557772	PrimaryExpression	0		1557127	1					
ANR	1557773	Condition	i < HEXAGON_HASH_SIZE	1556:16:61531:61551	1557127	1	True				
ANR	1557774	RelationalExpression	i < HEXAGON_HASH_SIZE		1557127	0		<			
ANR	1557775	Identifier	i		1557127	0					
ANR	1557776	Identifier	HEXAGON_HASH_SIZE		1557127	1					
ANR	1557777	PostIncDecOperationExpression	i ++	1556:39:61554:61556	1557127	2	True				
ANR	1557778	Identifier	i		1557127	0					
ANR	1557779	IncDec	++		1557127	1					
ANR	1557780	CompoundStatement		126:8:4411:4419	1557127	3					
ANR	1557781	IdentifierDeclStatement	hexagon_opcode * op ;	1558:8:61575:61593	1557127	0	True				
ANR	1557782	IdentifierDecl	* op		1557127	0					
ANR	1557783	IdentifierDeclType	hexagon_opcode *		1557127	0					
ANR	1557784	Identifier	op		1557127	1					
ANR	1557785	IdentifierDeclStatement	size_t j ;	1559:8:61603:61611	1557127	1	True				
ANR	1557786	IdentifierDecl	j		1557127	0					
ANR	1557787	IdentifierDeclType	size_t		1557127	0					
ANR	1557788	Identifier	j		1557127	1					
ANR	1557789	ExpressionStatement	"printf ( ""#%02ld ('%c')\\n"" , i , ( i % HEXAGON_HASH_1 ) + 'a' )"	1561:8:61622:61679	1557127	2	True				
ANR	1557790	CallExpression	"printf ( ""#%02ld ('%c')\\n"" , i , ( i % HEXAGON_HASH_1 ) + 'a' )"		1557127	0					
ANR	1557791	Callee	printf		1557127	0					
ANR	1557792	Identifier	printf		1557127	0					
ANR	1557793	ArgumentList	"""#%02ld ('%c')\\n"""		1557127	1					
ANR	1557794	Argument	"""#%02ld ('%c')\\n"""		1557127	0					
ANR	1557795	PrimaryExpression	"""#%02ld ('%c')\\n"""		1557127	0					
ANR	1557796	Argument	i		1557127	1					
ANR	1557797	Identifier	i		1557127	0					
ANR	1557798	Argument	( i % HEXAGON_HASH_1 ) + 'a'		1557127	2					
ANR	1557799	AdditiveExpression	( i % HEXAGON_HASH_1 ) + 'a'		1557127	0		+			
ANR	1557800	MultiplicativeExpression	i % HEXAGON_HASH_1		1557127	0		%			
ANR	1557801	Identifier	i		1557127	0					
ANR	1557802	Identifier	HEXAGON_HASH_1		1557127	1					
ANR	1557803	PrimaryExpression	'a'		1557127	1					
ANR	1557804	ForStatement	"for ( j = 0 , op = opcode_map [ i ] ; op ; j ++ , op = HEXAGON_CODE_NEXT_ASM ( op ) )"		1557127	3					
ANR	1557805	ForInit	"j = 0 , op = opcode_map [ i ] ;"	1563:13:61695:61721	1557127	0	True				
ANR	1557806	Expression	"j = 0 , op = opcode_map [ i ]"		1557127	0					
ANR	1557807	AssignmentExpression	j = 0		1557127	0		=			
ANR	1557808	Identifier	j		1557127	0					
ANR	1557809	PrimaryExpression	0		1557127	1					
ANR	1557810	AssignmentExpression	op = opcode_map [ i ]		1557127	1		=			
ANR	1557811	Identifier	op		1557127	0					
ANR	1557812	ArrayIndexing	opcode_map [ i ]		1557127	1					
ANR	1557813	Identifier	opcode_map		1557127	0					
ANR	1557814	Identifier	i		1557127	1					
ANR	1557815	Condition	op	1563:41:61723:61724	1557127	1	True				
ANR	1557816	Identifier	op		1557127	0					
ANR	1557817	Expression	"j ++ , op = HEXAGON_CODE_NEXT_ASM ( op )"	1563:45:61727:61762	1557127	2	True				
ANR	1557818	PostIncDecOperationExpression	j ++		1557127	0					
ANR	1557819	Identifier	j		1557127	0					
ANR	1557820	IncDec	++		1557127	1					
ANR	1557821	AssignmentExpression	op = HEXAGON_CODE_NEXT_ASM ( op )		1557127	1		=			
ANR	1557822	Identifier	op		1557127	0					
ANR	1557823	CallExpression	HEXAGON_CODE_NEXT_ASM ( op )		1557127	1					
ANR	1557824	Callee	HEXAGON_CODE_NEXT_ASM		1557127	0					
ANR	1557825	Identifier	HEXAGON_CODE_NEXT_ASM		1557127	0					
ANR	1557826	ArgumentList	op		1557127	1					
ANR	1557827	Argument	op		1557127	0					
ANR	1557828	Identifier	op		1557127	0					
ANR	1557829	ExpressionStatement	puts ( op -> syntax )	1564:10:61775:61792	1557127	3	True				
ANR	1557830	CallExpression	puts ( op -> syntax )		1557127	0					
ANR	1557831	Callee	puts		1557127	0					
ANR	1557832	Identifier	puts		1557127	0					
ANR	1557833	ArgumentList	op -> syntax		1557127	1					
ANR	1557834	Argument	op -> syntax		1557127	0					
ANR	1557835	PtrMemberAccess	op -> syntax		1557127	0					
ANR	1557836	Identifier	op		1557127	0					
ANR	1557837	Identifier	syntax		1557127	1					
ANR	1557838	ExpressionStatement	"puts ( """" )"	1566:8:61803:61812	1557127	4	True				
ANR	1557839	CallExpression	"puts ( """" )"		1557127	0					
ANR	1557840	Callee	puts		1557127	0					
ANR	1557841	Identifier	puts		1557127	0					
ANR	1557842	ArgumentList	""""""		1557127	1					
ANR	1557843	Argument	""""""		1557127	0					
ANR	1557844	PrimaryExpression	""""""		1557127	0					
ANR	1557845	ReturnType	void		1557127	1					
ANR	1557846	Identifier	hexagon_opcode_init_tables		1557127	2					
ANR	1557847	ParameterList	int cpu		1557127	3					
ANR	1557848	Parameter	int cpu	1433:1:57182:57188	1557127	0	True				
ANR	1557849	ParameterType	int		1557127	0					
ANR	1557850	Identifier	cpu		1557127	1					
ANR	1557851	CFGEntryNode	ENTRY		1557127		True				
ANR	1557852	CFGExitNode	EXIT		1557127		True				
ANR	1557853	Symbol	hexagon_if_arch_v5		1557127						
ANR	1557854	Symbol	hexagon_if_arch_v4		1557127						
ANR	1557855	Symbol	hexagon_if_arch_v3		1557127						
ANR	1557856	Symbol	* op		1557127						
ANR	1557857	Symbol	hexagon_if_arch_v2		1557127						
ANR	1557858	Symbol	HEXAGON_END_PACKET_MASK		1557127						
ANR	1557859	Symbol	op -> syntax		1557127						
ANR	1557860	Symbol	hexagon_opcodes [ i - 1 ] . enc		1557127						
ANR	1557861	Symbol	A_STORE		1557127						
ANR	1557862	Symbol	opcode		1557127						
ANR	1557863	Symbol	hexagon_opcodes		1557127						
ANR	1557864	Symbol	HEXAGON_CODE_NEXT_ASM		1557127						
ANR	1557865	Symbol	cpu_type		1557127						
ANR	1557866	Symbol	HEXAGON_CODE_IS_DUPLEX		1557127						
ANR	1557867	Symbol	icode		1557127						
ANR	1557868	Symbol	strcmp		1557127						
ANR	1557869	Symbol	A_IT_NOP		1557127						
ANR	1557870	Symbol	hexagon_kext_mask		1557127						
ANR	1557871	Symbol	bits		1557127						
ANR	1557872	Symbol	HEXAGON_HASH_SIZE		1557127						
ANR	1557873	Symbol	cpu		1557127						
ANR	1557874	Symbol	icode_map		1557127						
ANR	1557875	Symbol	HEXAGON_HASH_1		1557127						
ANR	1557876	Symbol	HEXAGON_IS_V4		1557127						
ANR	1557877	Symbol	hexagon_opcodes_v2		1557127						
ANR	1557878	Symbol	hexagon_opcodes_count_v3		1557127						
ANR	1557879	Symbol	str		1557127						
ANR	1557880	Symbol	HEXAGON_IS_V5		1557127						
ANR	1557881	Symbol	hexagon_opcodes_count_v4		1557127						
ANR	1557882	Symbol	hexagon_opcodes_v4		1557127						
ANR	1557883	Symbol	hexagon_opcodes_v3		1557127						
ANR	1557884	Symbol	hexagon_opcodes_count_v2		1557127						
ANR	1557885	Symbol	hexagon_opcodes [ i - 1 ] . next_asm		1557127						
ANR	1557886	Symbol	HEXAGON_CODE_IS_PREFIX		1557127						
ANR	1557887	Symbol	hexagon_opcodes_count		1557127						
ANR	1557888	Symbol	* hexagon_opcodes		1557127						
ANR	1557889	Symbol	A_RESTRICT_SINGLE_MEM_FIRST		1557127						
ANR	1557890	Symbol	HEXAGON_IS_V2		1557127						
ANR	1557891	Symbol	HEXAGON_IS_V3		1557127						
ANR	1557892	Symbol	* icode		1557127						
ANR	1557893	Symbol	HEXAGON_END_PAIR		1557127						
ANR	1557894	Symbol	hexagon_encode_mask		1557127						
ANR	1557895	Symbol	HEXAGON_CODE_IS_LOAD		1557127						
ANR	1557896	Symbol	HEXAGON_CODE_IS_STORE		1557127						
ANR	1557897	Symbol	hexagon_nop_mask		1557127						
ANR	1557898	Symbol	hexagon_opcodes_v5		1557127						
ANR	1557899	Symbol	hexagon_opcodes_count_v5		1557127						
ANR	1557900	Symbol	hexagon_nop		1557127						
ANR	1557901	Symbol	hexagon_opcodes [ i - 1 ] . next_dis		1557127						
ANR	1557902	Symbol	HEXAGON_HASH_ICODE		1557127						
ANR	1557903	Symbol	calloc		1557127						
ANR	1557904	Symbol	PACKED		1557127						
ANR	1557905	Symbol	HEXAGON_CPU_TYPE_UNINIT		1557127						
ANR	1557906	Symbol	HEXAGON_CODE_IS_MEMORY		1557127						
ANR	1557907	Symbol	HEXAGON_CODE_IS_COMPND		1557127						
ANR	1557908	Symbol	hexagon_kext		1557127						
ANR	1557909	Symbol	* str		1557127						
ANR	1557910	Symbol	hexagon_encode_opcode		1557127						
ANR	1557911	Symbol	HEXAGON_END_PACKET_POS		1557127						
ANR	1557912	Symbol	hexagon_opcodes [ i ] . enc		1557127						
ANR	1557913	Symbol	A_IT_EXTENDER		1557127						
ANR	1557914	Symbol	HEXAGON_END_PACKET_GET		1557127						
ANR	1557915	Symbol	op		1557127						
ANR	1557916	Symbol	HEXAGON_CODE_IS_BRANCH		1557127						
ANR	1557917	Symbol	i		1557127						
ANR	1557918	Symbol	HEXAGON_INSN_LEN		1557127						
ANR	1557919	Symbol	j		1557127						
ANR	1557920	Symbol	hexagon_opcodes [ i - 1 ] . flags		1557127						
ANR	1557921	Symbol	* opcode_map		1557127						
ANR	1557922	Symbol	* icode_map		1557127						
ANR	1557923	Symbol	insn		1557127						
ANR	1557924	Symbol	HEXAGON_HASH_OPCODE		1557127						
ANR	1557925	Symbol	* i		1557127						
ANR	1557926	Symbol	hexagon_icode_hash_bits		1557127						
ANR	1557927	Symbol	A_BRANCHADDER		1557127						
ANR	1557928	Symbol	hexagon_opcodes [ i - 1 ] . attributes		1557127						
ANR	1557929	Symbol	hexagon_opcodes [ i - 1 ] . syntax		1557127						
ANR	1557930	Symbol	opcode_map		1557127						
ANR	1557931	Symbol	cpu_flag		1557127						
ANR	1557932	Symbol	* opcode		1557127						
ANR	1557933	Function	hexagon_opcode_supported	1574:0:61969:62088							
ANR	1557934	FunctionDef	hexagon_opcode_supported (const hexagon_opcode * opcode)		1557933	0					
ANR	1557935	CompoundStatement		1577:0:62029:62088	1557933	0					
ANR	1557936	ReturnStatement	return ( HEXAGON_CODE_CPU ( opcode -> flags ) <= cpu_type ) ;	1578:2:62033:62086	1557933	0	True				
ANR	1557937	RelationalExpression	HEXAGON_CODE_CPU ( opcode -> flags ) <= cpu_type		1557933	0		<=			
ANR	1557938	CallExpression	HEXAGON_CODE_CPU ( opcode -> flags )		1557933	0					
ANR	1557939	Callee	HEXAGON_CODE_CPU		1557933	0					
ANR	1557940	Identifier	HEXAGON_CODE_CPU		1557933	0					
ANR	1557941	ArgumentList	opcode -> flags		1557933	1					
ANR	1557942	Argument	opcode -> flags		1557933	0					
ANR	1557943	PtrMemberAccess	opcode -> flags		1557933	0					
ANR	1557944	Identifier	opcode		1557933	0					
ANR	1557945	Identifier	flags		1557933	1					
ANR	1557946	Identifier	cpu_type		1557933	1					
ANR	1557947	ReturnType	int		1557933	1					
ANR	1557948	Identifier	hexagon_opcode_supported		1557933	2					
ANR	1557949	ParameterList	const hexagon_opcode * opcode		1557933	3					
ANR	1557950	Parameter	const hexagon_opcode * opcode	1576:1:61999:62026	1557933	0	True				
ANR	1557951	ParameterType	const hexagon_opcode *		1557933	0					
ANR	1557952	Identifier	opcode		1557933	1					
ANR	1557953	CFGEntryNode	ENTRY		1557933		True				
ANR	1557954	CFGExitNode	EXIT		1557933		True				
ANR	1557955	Symbol	HEXAGON_CODE_CPU		1557933						
ANR	1557956	Symbol	opcode -> flags		1557933						
ANR	1557957	Symbol	cpu_type		1557933						
ANR	1557958	Symbol	opcode		1557933						
ANR	1557959	Symbol	* opcode		1557933						
ANR	1557960	Function	hexagon_opcode_lookup_asm	1583:0:62155:62277							
ANR	1557961	FunctionDef	hexagon_opcode_lookup_asm (const char * insn)		1557960	0					
ANR	1557962	CompoundStatement		1586:0:62223:62277	1557960	0					
ANR	1557963	ReturnStatement	return ( opcode_map [ HEXAGON_HASH_OPCODE ( insn ) ] ) ;	1587:2:62227:62275	1557960	0	True				
ANR	1557964	ArrayIndexing	opcode_map [ HEXAGON_HASH_OPCODE ( insn ) ]		1557960	0					
ANR	1557965	Identifier	opcode_map		1557960	0					
ANR	1557966	CallExpression	HEXAGON_HASH_OPCODE ( insn )		1557960	1					
ANR	1557967	Callee	HEXAGON_HASH_OPCODE		1557960	0					
ANR	1557968	Identifier	HEXAGON_HASH_OPCODE		1557960	0					
ANR	1557969	ArgumentList	insn		1557960	1					
ANR	1557970	Argument	insn		1557960	0					
ANR	1557971	Identifier	insn		1557960	0					
ANR	1557972	ReturnType	const hexagon_opcode *		1557960	1					
ANR	1557973	Identifier	hexagon_opcode_lookup_asm		1557960	2					
ANR	1557974	ParameterList	const char * insn		1557960	3					
ANR	1557975	Parameter	const char * insn	1585:1:62205:62220	1557960	0	True				
ANR	1557976	ParameterType	const char *		1557960	0					
ANR	1557977	Identifier	insn		1557960	1					
ANR	1557978	CFGEntryNode	ENTRY		1557960		True				
ANR	1557979	CFGExitNode	EXIT		1557960		True				
ANR	1557980	Symbol	insn		1557960						
ANR	1557981	Symbol	HEXAGON_HASH_OPCODE		1557960						
ANR	1557982	Symbol	opcode_map		1557960						
ANR	1557983	Symbol	* opcode_map		1557960						
ANR	1557984	Symbol	* HEXAGON_HASH_OPCODE		1557960						
ANR	1557985	Function	hexagon_opcode_lookup_dis	1592:0:62347:62500							
ANR	1557986	FunctionDef	hexagon_opcode_lookup_dis (hexagon_insn insn)		1557985	0					
ANR	1557987	CompoundStatement		1595:0:62416:62500	1557985	0					
ANR	1557988	IfStatement	if ( icode_map )		1557985	0					
ANR	1557989	Condition	icode_map	1596:4:62422:62430	1557985	0	True				
ANR	1557990	Identifier	icode_map		1557985	0					
ANR	1557991	CompoundStatement		2:15:16:16	1557985	1					
ANR	1557992	ReturnStatement	return ( icode_map [ HEXAGON_HASH_ICODE ( insn ) ] ) ;	1597:2:62437:62483	1557985	0	True				
ANR	1557993	ArrayIndexing	icode_map [ HEXAGON_HASH_ICODE ( insn ) ]		1557985	0					
ANR	1557994	Identifier	icode_map		1557985	0					
ANR	1557995	CallExpression	HEXAGON_HASH_ICODE ( insn )		1557985	1					
ANR	1557996	Callee	HEXAGON_HASH_ICODE		1557985	0					
ANR	1557997	Identifier	HEXAGON_HASH_ICODE		1557985	0					
ANR	1557998	ArgumentList	insn		1557985	1					
ANR	1557999	Argument	insn		1557985	0					
ANR	1558000	Identifier	insn		1557985	0					
ANR	1558001	ReturnStatement	return NULL ;	1599:0:62487:62498	1557985	1	True				
ANR	1558002	Identifier	NULL		1557985	0					
ANR	1558003	ReturnType	const hexagon_opcode *		1557985	1					
ANR	1558004	Identifier	hexagon_opcode_lookup_dis		1557985	2					
ANR	1558005	ParameterList	hexagon_insn insn		1557985	3					
ANR	1558006	Parameter	hexagon_insn insn	1594:1:62397:62413	1557985	0	True				
ANR	1558007	ParameterType	hexagon_insn		1557985	0					
ANR	1558008	Identifier	insn		1557985	1					
ANR	1558009	CFGEntryNode	ENTRY		1557985		True				
ANR	1558010	CFGExitNode	EXIT		1557985		True				
ANR	1558011	Symbol	* icode_map		1557985						
ANR	1558012	Symbol	insn		1557985						
ANR	1558013	Symbol	HEXAGON_HASH_ICODE		1557985						
ANR	1558014	Symbol	NULL		1557985						
ANR	1558015	Symbol	* HEXAGON_HASH_ICODE		1557985						
ANR	1558016	Symbol	icode_map		1557985						
ANR	1558017	Function	hexagon_lookup_insn	1602:0:62503:63076							
ANR	1558018	FunctionDef	hexagon_lookup_insn (hexagon_insn insn)		1558017	0					
ANR	1558019	CompoundStatement		1605:0:62566:63076	1558017	0					
ANR	1558020	IdentifierDeclStatement	const hexagon_opcode * opcode ;	1606:2:62570:62598	1558017	0	True				
ANR	1558021	IdentifierDecl	* opcode		1558017	0					
ANR	1558022	IdentifierDeclType	const hexagon_opcode *		1558017	0					
ANR	1558023	Identifier	opcode		1558017	1					
ANR	1558024	IdentifierDeclStatement	hexagon_insn encode ;	1607:2:62602:62621	1558017	1	True				
ANR	1558025	IdentifierDecl	encode		1558017	0					
ANR	1558026	IdentifierDeclType	hexagon_insn		1558017	0					
ANR	1558027	Identifier	encode		1558017	1					
ANR	1558028	IdentifierDeclStatement	hexagon_insn mask ;	1608:2:62625:62642	1558017	2	True				
ANR	1558029	IdentifierDecl	mask		1558017	0					
ANR	1558030	IdentifierDeclType	hexagon_insn		1558017	0					
ANR	1558031	Identifier	mask		1558017	1					
ANR	1558032	ExpressionStatement	insn = HEXAGON_END_PACKET_RESET ( insn )	1611:2:62678:62716	1558017	3	True				
ANR	1558033	AssignmentExpression	insn = HEXAGON_END_PACKET_RESET ( insn )		1558017	0		=			
ANR	1558034	Identifier	insn		1558017	0					
ANR	1558035	CallExpression	HEXAGON_END_PACKET_RESET ( insn )		1558017	1					
ANR	1558036	Callee	HEXAGON_END_PACKET_RESET		1558017	0					
ANR	1558037	Identifier	HEXAGON_END_PACKET_RESET		1558017	0					
ANR	1558038	ArgumentList	insn		1558017	1					
ANR	1558039	Argument	insn		1558017	0					
ANR	1558040	Identifier	insn		1558017	0					
ANR	1558041	ForStatement	for ( opcode = hexagon_opcode_lookup_dis ( insn ) ; opcode ; opcode = HEXAGON_CODE_NEXT_DIS ( opcode ) )		1558017	4					
ANR	1558042	ForInit	opcode = hexagon_opcode_lookup_dis ( insn ) ;	1613:7:62726:62767	1558017	0	True				
ANR	1558043	AssignmentExpression	opcode = hexagon_opcode_lookup_dis ( insn )		1558017	0		=			
ANR	1558044	Identifier	opcode		1558017	0					
ANR	1558045	CallExpression	hexagon_opcode_lookup_dis ( insn )		1558017	1					
ANR	1558046	Callee	hexagon_opcode_lookup_dis		1558017	0					
ANR	1558047	Identifier	hexagon_opcode_lookup_dis		1558017	0					
ANR	1558048	ArgumentList	insn		1558017	1					
ANR	1558049	Argument	insn		1558017	0					
ANR	1558050	Identifier	insn		1558017	0					
ANR	1558051	Condition	opcode	1614:7:62776:62781	1558017	1	True				
ANR	1558052	Identifier	opcode		1558017	0					
ANR	1558053	AssignmentExpression	opcode = HEXAGON_CODE_NEXT_DIS ( opcode )	1615:7:62791:62829	1558017	2	True	=			
ANR	1558054	Identifier	opcode		1558017	0					
ANR	1558055	CallExpression	HEXAGON_CODE_NEXT_DIS ( opcode )		1558017	1					
ANR	1558056	Callee	HEXAGON_CODE_NEXT_DIS		1558017	0					
ANR	1558057	Identifier	HEXAGON_CODE_NEXT_DIS		1558017	0					
ANR	1558058	ArgumentList	opcode		1558017	1					
ANR	1558059	Argument	opcode		1558017	0					
ANR	1558060	Identifier	opcode		1558017	0					
ANR	1558061	CompoundStatement		12:4:269:269	1558017	3					
ANR	1558062	IfStatement	if ( opcode -> map )		1558017	0					
ANR	1558063	Condition	opcode -> map	1617:10:62848:62858	1558017	0	True				
ANR	1558064	PtrMemberAccess	opcode -> map		1558017	0					
ANR	1558065	Identifier	opcode		1558017	0					
ANR	1558066	Identifier	map		1558017	1					
ANR	1558067	ContinueStatement	continue ;	1618:8:62869:62877	1558017	1	True				
ANR	1558068	ExpressionStatement	encode = hexagon_encode_opcode ( opcode -> enc )	1620:6:62886:62930	1558017	1	True				
ANR	1558069	AssignmentExpression	encode = hexagon_encode_opcode ( opcode -> enc )		1558017	0		=			
ANR	1558070	Identifier	encode		1558017	0					
ANR	1558071	CallExpression	hexagon_encode_opcode ( opcode -> enc )		1558017	1					
ANR	1558072	Callee	hexagon_encode_opcode		1558017	0					
ANR	1558073	Identifier	hexagon_encode_opcode		1558017	0					
ANR	1558074	ArgumentList	opcode -> enc		1558017	1					
ANR	1558075	Argument	opcode -> enc		1558017	0					
ANR	1558076	PtrMemberAccess	opcode -> enc		1558017	0					
ANR	1558077	Identifier	opcode		1558017	0					
ANR	1558078	Identifier	enc		1558017	1					
ANR	1558079	ExpressionStatement	mask = hexagon_encode_mask ( opcode -> enc )	1621:6:62938:62982	1558017	2	True				
ANR	1558080	AssignmentExpression	mask = hexagon_encode_mask ( opcode -> enc )		1558017	0		=			
ANR	1558081	Identifier	mask		1558017	0					
ANR	1558082	CallExpression	hexagon_encode_mask ( opcode -> enc )		1558017	1					
ANR	1558083	Callee	hexagon_encode_mask		1558017	0					
ANR	1558084	Identifier	hexagon_encode_mask		1558017	0					
ANR	1558085	ArgumentList	opcode -> enc		1558017	1					
ANR	1558086	Argument	opcode -> enc		1558017	0					
ANR	1558087	PtrMemberAccess	opcode -> enc		1558017	0					
ANR	1558088	Identifier	opcode		1558017	0					
ANR	1558089	Identifier	enc		1558017	1					
ANR	1558090	IfStatement	if ( ( insn & mask ) == ( encode & mask ) )		1558017	3					
ANR	1558091	Condition	( insn & mask ) == ( encode & mask )	1623:10:62995:63026	1558017	0	True				
ANR	1558092	EqualityExpression	( insn & mask ) == ( encode & mask )		1558017	0		==			
ANR	1558093	BitAndExpression	insn & mask		1558017	0		&			
ANR	1558094	Identifier	insn		1558017	0					
ANR	1558095	Identifier	mask		1558017	1					
ANR	1558096	BitAndExpression	encode & mask		1558017	1		&			
ANR	1558097	Identifier	encode		1558017	0					
ANR	1558098	Identifier	mask		1558017	1					
ANR	1558099	ReturnStatement	return ( opcode ) ;	1624:8:63037:63052	1558017	1	True				
ANR	1558100	Identifier	opcode		1558017	0					
ANR	1558101	ReturnStatement	return NULL ;	1627:2:63063:63074	1558017	5	True				
ANR	1558102	Identifier	NULL		1558017	0					
ANR	1558103	ReturnType	const hexagon_opcode *		1558017	1					
ANR	1558104	Identifier	hexagon_lookup_insn		1558017	2					
ANR	1558105	ParameterList	hexagon_insn insn		1558017	3					
ANR	1558106	Parameter	hexagon_insn insn	1604:1:62547:62563	1558017	0	True				
ANR	1558107	ParameterType	hexagon_insn		1558017	0					
ANR	1558108	Identifier	insn		1558017	1					
ANR	1558109	CFGEntryNode	ENTRY		1558017		True				
ANR	1558110	CFGExitNode	EXIT		1558017		True				
ANR	1558111	Symbol	encode		1558017						
ANR	1558112	Symbol	HEXAGON_END_PACKET_RESET		1558017						
ANR	1558113	Symbol	HEXAGON_CODE_NEXT_DIS		1558017						
ANR	1558114	Symbol	hexagon_opcode_lookup_dis		1558017						
ANR	1558115	Symbol	NULL		1558017						
ANR	1558116	Symbol	opcode		1558017						
ANR	1558117	Symbol	insn		1558017						
ANR	1558118	Symbol	opcode -> map		1558017						
ANR	1558119	Symbol	opcode -> enc		1558017						
ANR	1558120	Symbol	hexagon_encode_mask		1558017						
ANR	1558121	Symbol	hexagon_encode_opcode		1558017						
ANR	1558122	Symbol	mask		1558017						
ANR	1558123	Symbol	* opcode		1558017						
ANR	1558124	Function	hexagon_encode_operand	1643:0:63416:67062							
ANR	1558125	FunctionDef	"hexagon_encode_operand (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , long avalue , long * xvalue , int is_x , int is_rel , char * * errmsg)"		1558124	0					
ANR	1558126	CompoundStatement		1648:0:63592:67062	1558124	0					
ANR	1558127	IdentifierDeclStatement	char enc_letter ;	1649:2:63596:63611	1558124	0	True				
ANR	1558128	IdentifierDecl	enc_letter		1558124	0					
ANR	1558129	IdentifierDeclType	char		1558124	0					
ANR	1558130	Identifier	enc_letter		1558124	1					
ANR	1558131	IdentifierDeclStatement	int shift_count = 0 ;	1650:2:63615:63634	1558124	1	True				
ANR	1558132	IdentifierDecl	shift_count = 0		1558124	0					
ANR	1558133	IdentifierDeclType	int		1558124	0					
ANR	1558134	Identifier	shift_count		1558124	1					
ANR	1558135	AssignmentExpression	shift_count = 0		1558124	2		=			
ANR	1558136	Identifier	shift_count		1558124	0					
ANR	1558137	PrimaryExpression	0		1558124	1					
ANR	1558138	IdentifierDeclStatement	int num_bits = 0 ;	1651:2:63638:63654	1558124	2	True				
ANR	1558139	IdentifierDecl	num_bits = 0		1558124	0					
ANR	1558140	IdentifierDeclType	int		1558124	0					
ANR	1558141	Identifier	num_bits		1558124	1					
ANR	1558142	AssignmentExpression	num_bits = 0		1558124	2		=			
ANR	1558143	Identifier	num_bits		1558124	0					
ANR	1558144	PrimaryExpression	0		1558124	1					
ANR	1558145	IdentifierDeclStatement	size_t len = strlen ( opcode -> enc ) ;	1652:2:63658:63691	1558124	3	True				
ANR	1558146	IdentifierDecl	len = strlen ( opcode -> enc )		1558124	0					
ANR	1558147	IdentifierDeclType	size_t		1558124	0					
ANR	1558148	Identifier	len		1558124	1					
ANR	1558149	AssignmentExpression	len = strlen ( opcode -> enc )		1558124	2		=			
ANR	1558150	Identifier	len		1558124	0					
ANR	1558151	CallExpression	strlen ( opcode -> enc )		1558124	1					
ANR	1558152	Callee	strlen		1558124	0					
ANR	1558153	Identifier	strlen		1558124	0					
ANR	1558154	ArgumentList	opcode -> enc		1558124	1					
ANR	1558155	Argument	opcode -> enc		1558124	0					
ANR	1558156	PtrMemberAccess	opcode -> enc		1558124	0					
ANR	1558157	Identifier	opcode		1558124	0					
ANR	1558158	Identifier	enc		1558124	1					
ANR	1558159	IdentifierDeclStatement	unsigned bits ;	1653:2:63695:63708	1558124	4	True				
ANR	1558160	IdentifierDecl	bits		1558124	0					
ANR	1558161	IdentifierDeclType	unsigned		1558124	0					
ANR	1558162	Identifier	bits		1558124	1					
ANR	1558163	IdentifierDeclStatement	"long smin , smax ;"	1654:2:63712:63727	1558124	5	True				
ANR	1558164	IdentifierDecl	smin		1558124	0					
ANR	1558165	IdentifierDeclType	long		1558124	0					
ANR	1558166	Identifier	smin		1558124	1					
ANR	1558167	IdentifierDecl	smax		1558124	1					
ANR	1558168	IdentifierDeclType	long		1558124	0					
ANR	1558169	Identifier	smax		1558124	1					
ANR	1558170	IdentifierDeclStatement	"unsigned long umin , umax ;"	1655:2:63731:63755	1558124	6	True				
ANR	1558171	IdentifierDecl	umin		1558124	0					
ANR	1558172	IdentifierDeclType	unsigned long		1558124	0					
ANR	1558173	Identifier	umin		1558124	1					
ANR	1558174	IdentifierDecl	umax		1558124	1					
ANR	1558175	IdentifierDeclType	unsigned long		1558124	0					
ANR	1558176	Identifier	umax		1558124	1					
ANR	1558177	IdentifierDeclStatement	"long xer , xed ;"	1656:2:63759:63772	1558124	7	True				
ANR	1558178	IdentifierDecl	xer		1558124	0					
ANR	1558179	IdentifierDeclType	long		1558124	0					
ANR	1558180	Identifier	xer		1558124	1					
ANR	1558181	IdentifierDecl	xed		1558124	1					
ANR	1558182	IdentifierDeclType	long		1558124	0					
ANR	1558183	Identifier	xed		1558124	1					
ANR	1558184	ClassDefStatement	union { long s ; unsigned long u ; } value ;	1657:2:63776:63836	1558124	8	True				
ANR	1558185	IdentifierDecl	value		1558124	0					
ANR	1558186	IdentifierDeclType			1558124	0					
ANR	1558187	Identifier	value		1558124	1					
ANR	1558188	IdentifierDeclStatement	int is_s ;	1662:2:63840:63848	1558124	9	True				
ANR	1558189	IdentifierDecl	is_s		1558124	0					
ANR	1558190	IdentifierDeclType	int		1558124	0					
ANR	1558191	Identifier	is_s		1558124	1					
ANR	1558192	IdentifierDeclStatement	ptrdiff_t i ;	1663:2:63852:63863	1558124	10	True				
ANR	1558193	IdentifierDecl	i		1558124	0					
ANR	1558194	IdentifierDeclType	ptrdiff_t		1558124	0					
ANR	1558195	Identifier	i		1558124	1					
ANR	1558196	Statement	static	1664:2:63867:63872	1558124	11	True				
ANR	1558197	IdentifierDeclStatement	char buf [ 500 ] ;	1664:9:63874:63888	1558124	12	True				
ANR	1558198	IdentifierDecl	buf [ 500 ]		1558124	0					
ANR	1558199	IdentifierDeclType	char [ 500 ]		1558124	0					
ANR	1558200	Identifier	buf		1558124	1					
ANR	1558201	PrimaryExpression	500		1558124	2					
ANR	1558202	ExpressionStatement	value . s = avalue	1666:2:63893:63909	1558124	13	True				
ANR	1558203	AssignmentExpression	value . s = avalue		1558124	0		=			
ANR	1558204	MemberAccess	value . s		1558124	0					
ANR	1558205	Identifier	value		1558124	0					
ANR	1558206	Identifier	s		1558124	1					
ANR	1558207	Identifier	avalue		1558124	1					
ANR	1558208	ExpressionStatement	is_x = is_x && xvalue	1668:2:63914:63935	1558124	14	True				
ANR	1558209	AssignmentExpression	is_x = is_x && xvalue		1558124	0		=			
ANR	1558210	Identifier	is_x		1558124	0					
ANR	1558211	AndExpression	is_x && xvalue		1558124	1		&&			
ANR	1558212	Identifier	is_x		1558124	0					
ANR	1558213	Identifier	xvalue		1558124	1					
ANR	1558214	ExpressionStatement	is_s = ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )	1669:2:63939:63990	1558124	15	True				
ANR	1558215	AssignmentExpression	is_s = ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )		1558124	0		=			
ANR	1558216	Identifier	is_s		1558124	0					
ANR	1558217	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SIGNED		1558124	1		&			
ANR	1558218	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558219	Identifier	operand		1558124	0					
ANR	1558220	Identifier	flags		1558124	1					
ANR	1558221	Identifier	HEXAGON_OPERAND_IS_SIGNED		1558124	1					
ANR	1558222	ExpressionStatement	enc_letter = operand -> enc_letter	1671:2:63995:64027	1558124	16	True				
ANR	1558223	AssignmentExpression	enc_letter = operand -> enc_letter		1558124	0		=			
ANR	1558224	Identifier	enc_letter		1558124	0					
ANR	1558225	PtrMemberAccess	operand -> enc_letter		1558124	1					
ANR	1558226	Identifier	operand		1558124	0					
ANR	1558227	Identifier	enc_letter		1558124	1					
ANR	1558228	IfStatement	if ( FALSE && is_rel )		1558124	17					
ANR	1558229	Condition	FALSE && is_rel	1674:6:64080:64094	1558124	0	True				
ANR	1558230	AndExpression	FALSE && is_rel		1558124	0		&&			
ANR	1558231	Identifier	FALSE		1558124	0					
ANR	1558232	Identifier	is_rel		1558124	1					
ANR	1558233	SwitchStatement	switch ( opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE ) )		1558124	1					
ANR	1558234	Condition	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )	1675:12:64109:64208	1558124	0	True				
ANR	1558235	BitAndExpression	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )		1558124	0		&			
ANR	1558236	PtrMemberAccess	opcode -> attributes		1558124	0					
ANR	1558237	Identifier	opcode		1558124	0					
ANR	1558238	Identifier	attributes		1558124	1					
ANR	1558239	InclusiveOrExpression	EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE		1558124	1		|			
ANR	1558240	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		1558124	0					
ANR	1558241	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		1558124	1					
ANR	1558242	CompoundStatement		30:6:624:624	1558124	1					
ANR	1558243	Label	case EXTENDABLE_LOWER_CASE_IMMEDIATE :	1678:6:64225:64261	1558124	0	True				
ANR	1558244	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		1558124	0					
ANR	1558245	ExpressionStatement	enc_letter = TOLOWER ( enc_letter )	1679:8:64271:64304	1558124	1	True				
ANR	1558246	AssignmentExpression	enc_letter = TOLOWER ( enc_letter )		1558124	0		=			
ANR	1558247	Identifier	enc_letter		1558124	0					
ANR	1558248	CallExpression	TOLOWER ( enc_letter )		1558124	1					
ANR	1558249	Callee	TOLOWER		1558124	0					
ANR	1558250	Identifier	TOLOWER		1558124	0					
ANR	1558251	ArgumentList	enc_letter		1558124	1					
ANR	1558252	Argument	enc_letter		1558124	0					
ANR	1558253	Identifier	enc_letter		1558124	0					
ANR	1558254	BreakStatement	break ;	1680:8:64314:64319	1558124	2	True				
ANR	1558255	Label	case EXTENDABLE_UPPER_CASE_IMMEDIATE :	1682:6:64328:64364	1558124	3	True				
ANR	1558256	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		1558124	0					
ANR	1558257	ExpressionStatement	enc_letter = TOUPPER ( enc_letter )	1683:8:64374:64407	1558124	4	True				
ANR	1558258	AssignmentExpression	enc_letter = TOUPPER ( enc_letter )		1558124	0		=			
ANR	1558259	Identifier	enc_letter		1558124	0					
ANR	1558260	CallExpression	TOUPPER ( enc_letter )		1558124	1					
ANR	1558261	Callee	TOUPPER		1558124	0					
ANR	1558262	Identifier	TOUPPER		1558124	0					
ANR	1558263	ArgumentList	enc_letter		1558124	1					
ANR	1558264	Argument	enc_letter		1558124	0					
ANR	1558265	Identifier	enc_letter		1558124	0					
ANR	1558266	BreakStatement	break ;	1684:8:64417:64422	1558124	5	True				
ANR	1558267	IfStatement	if ( operand -> shift_count )		1558124	18					
ANR	1558268	Condition	operand -> shift_count	1687:6:64439:64458	1558124	0	True				
ANR	1558269	PtrMemberAccess	operand -> shift_count		1558124	0					
ANR	1558270	Identifier	operand		1558124	0					
ANR	1558271	Identifier	shift_count		1558124	1					
ANR	1558272	CompoundStatement		41:4:872:872	1558124	1					
ANR	1558273	IfStatement	if ( value . s & ( ~ ( ~0L << operand -> shift_count ) ) )		1558124	0					
ANR	1558274	Condition	value . s & ( ~ ( ~0L << operand -> shift_count ) )	1690:10:64521:64562	1558124	0	True				
ANR	1558275	BitAndExpression	value . s & ( ~ ( ~0L << operand -> shift_count ) )		1558124	0		&			
ANR	1558276	MemberAccess	value . s		1558124	0					
ANR	1558277	Identifier	value		1558124	0					
ANR	1558278	Identifier	s		1558124	1					
ANR	1558279	UnaryOperationExpression	~ ( ~0L << operand -> shift_count )		1558124	1					
ANR	1558280	UnaryOperator	~		1558124	0					
ANR	1558281	ShiftExpression	~0L << operand -> shift_count		1558124	1		<<			
ANR	1558282	Identifier	~0L		1558124	0					
ANR	1558283	PtrMemberAccess	operand -> shift_count		1558124	1					
ANR	1558284	Identifier	operand		1558124	0					
ANR	1558285	Identifier	shift_count		1558124	1					
ANR	1558286	CompoundStatement		44:8:980:980	1558124	1					
ANR	1558287	IfStatement	if ( errmsg )		1558124	0					
ANR	1558288	Condition	errmsg	1692:14:64589:64594	1558124	0	True				
ANR	1558289	Identifier	errmsg		1558124	0					
ANR	1558290	CompoundStatement		46:12:1016:1016	1558124	1					
ANR	1558291	ExpressionStatement	"sprintf ( buf , ""low %d bits of immediate %ld must be zero"" , operand -> shift_count , value . s )"	1694:14:64625:64737	1558124	0	True				
ANR	1558292	CallExpression	"sprintf ( buf , ""low %d bits of immediate %ld must be zero"" , operand -> shift_count , value . s )"		1558124	0					
ANR	1558293	Callee	sprintf		1558124	0					
ANR	1558294	Identifier	sprintf		1558124	0					
ANR	1558295	ArgumentList	buf		1558124	1					
ANR	1558296	Argument	buf		1558124	0					
ANR	1558297	Identifier	buf		1558124	0					
ANR	1558298	Argument	"""low %d bits of immediate %ld must be zero"""		1558124	1					
ANR	1558299	PrimaryExpression	"""low %d bits of immediate %ld must be zero"""		1558124	0					
ANR	1558300	Argument	operand -> shift_count		1558124	2					
ANR	1558301	PtrMemberAccess	operand -> shift_count		1558124	0					
ANR	1558302	Identifier	operand		1558124	0					
ANR	1558303	Identifier	shift_count		1558124	1					
ANR	1558304	Argument	value . s		1558124	3					
ANR	1558305	MemberAccess	value . s		1558124	0					
ANR	1558306	Identifier	value		1558124	0					
ANR	1558307	Identifier	s		1558124	1					
ANR	1558308	ExpressionStatement	* errmsg = buf	1696:14:64753:64766	1558124	1	True				
ANR	1558309	AssignmentExpression	* errmsg = buf		1558124	0		=			
ANR	1558310	UnaryOperationExpression	* errmsg		1558124	0					
ANR	1558311	UnaryOperator	*		1558124	0					
ANR	1558312	Identifier	errmsg		1558124	1					
ANR	1558313	Identifier	buf		1558124	1					
ANR	1558314	ReturnStatement	return FALSE ;	1698:10:64792:64804	1558124	1	True				
ANR	1558315	Identifier	FALSE		1558124	0					
ANR	1558316	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_LO16 )		1558124	19					
ANR	1558317	Condition	operand -> flags & HEXAGON_OPERAND_IS_LO16	1702:6:64829:64868	1558124	0	True				
ANR	1558318	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_LO16		1558124	0		&			
ANR	1558319	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558320	Identifier	operand		1558124	0					
ANR	1558321	Identifier	flags		1558124	1					
ANR	1558322	Identifier	HEXAGON_OPERAND_IS_LO16		1558124	1					
ANR	1558323	ExpressionStatement	value . s = HEXAGON_LO16 ( value . u )	1703:4:64875:64907	1558124	1	True				
ANR	1558324	AssignmentExpression	value . s = HEXAGON_LO16 ( value . u )		1558124	0		=			
ANR	1558325	MemberAccess	value . s		1558124	0					
ANR	1558326	Identifier	value		1558124	0					
ANR	1558327	Identifier	s		1558124	1					
ANR	1558328	CallExpression	HEXAGON_LO16 ( value . u )		1558124	1					
ANR	1558329	Callee	HEXAGON_LO16		1558124	0					
ANR	1558330	Identifier	HEXAGON_LO16		1558124	0					
ANR	1558331	ArgumentList	value . u		1558124	1					
ANR	1558332	Argument	value . u		1558124	0					
ANR	1558333	MemberAccess	value . u		1558124	0					
ANR	1558334	Identifier	value		1558124	0					
ANR	1558335	Identifier	u		1558124	1					
ANR	1558336	ElseStatement	else		1558124	0					
ANR	1558337	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_HI16 )		1558124	0					
ANR	1558338	Condition	operand -> flags & HEXAGON_OPERAND_IS_HI16	1704:11:64920:64959	1558124	0	True				
ANR	1558339	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_HI16		1558124	0		&			
ANR	1558340	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558341	Identifier	operand		1558124	0					
ANR	1558342	Identifier	flags		1558124	1					
ANR	1558343	Identifier	HEXAGON_OPERAND_IS_HI16		1558124	1					
ANR	1558344	ExpressionStatement	value . s = HEXAGON_HI16 ( value . u )	1705:4:64966:64998	1558124	1	True				
ANR	1558345	AssignmentExpression	value . s = HEXAGON_HI16 ( value . u )		1558124	0		=			
ANR	1558346	MemberAccess	value . s		1558124	0					
ANR	1558347	Identifier	value		1558124	0					
ANR	1558348	Identifier	s		1558124	1					
ANR	1558349	CallExpression	HEXAGON_HI16 ( value . u )		1558124	1					
ANR	1558350	Callee	HEXAGON_HI16		1558124	0					
ANR	1558351	Identifier	HEXAGON_HI16		1558124	0					
ANR	1558352	ArgumentList	value . u		1558124	1					
ANR	1558353	Argument	value . u		1558124	0					
ANR	1558354	MemberAccess	value . u		1558124	0					
ANR	1558355	Identifier	value		1558124	0					
ANR	1558356	Identifier	u		1558124	1					
ANR	1558357	ElseStatement	else		1558124	0					
ANR	1558358	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		1558124	0					
ANR	1558359	Condition	operand -> flags & HEXAGON_OPERAND_IS_SUBSET	1706:11:65011:65052	1558124	0	True				
ANR	1558360	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		1558124	0		&			
ANR	1558361	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558362	Identifier	operand		1558124	0					
ANR	1558363	Identifier	flags		1558124	1					
ANR	1558364	Identifier	HEXAGON_OPERAND_IS_SUBSET		1558124	1					
ANR	1558365	ExpressionStatement	"value . s = HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"	1707:4:65059:65139	1558124	1	True				
ANR	1558366	AssignmentExpression	"value . s = HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		1558124	0		=			
ANR	1558367	MemberAccess	value . s		1558124	0					
ANR	1558368	Identifier	value		1558124	0					
ANR	1558369	Identifier	s		1558124	1					
ANR	1558370	CallExpression	"HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		1558124	1					
ANR	1558371	Callee	HEXAGON_SUBREGS_TO		1558124	0					
ANR	1558372	Identifier	HEXAGON_SUBREGS_TO		1558124	0					
ANR	1558373	ArgumentList	value . s		1558124	1					
ANR	1558374	Argument	value . s		1558124	0					
ANR	1558375	MemberAccess	value . s		1558124	0					
ANR	1558376	Identifier	value		1558124	0					
ANR	1558377	Identifier	s		1558124	1					
ANR	1558378	Argument	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1558124	1					
ANR	1558379	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1558124	0		&			
ANR	1558380	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558381	Identifier	operand		1558124	0					
ANR	1558382	Identifier	flags		1558124	1					
ANR	1558383	Identifier	HEXAGON_OPERAND_IS_PAIR		1558124	1					
ANR	1558384	ExpressionStatement	bits = operand -> bits + operand -> shift_count	1711:2:65233:65276	1558124	20	True				
ANR	1558385	AssignmentExpression	bits = operand -> bits + operand -> shift_count		1558124	0		=			
ANR	1558386	Identifier	bits		1558124	0					
ANR	1558387	AdditiveExpression	operand -> bits + operand -> shift_count		1558124	1		+			
ANR	1558388	PtrMemberAccess	operand -> bits		1558124	0					
ANR	1558389	Identifier	operand		1558124	0					
ANR	1558390	Identifier	bits		1558124	1					
ANR	1558391	PtrMemberAccess	operand -> shift_count		1558124	1					
ANR	1558392	Identifier	operand		1558124	0					
ANR	1558393	Identifier	shift_count		1558124	1					
ANR	1558394	ExpressionStatement	smax = ~ ( ~0L << ( bits - 1 ) )	1712:2:65280:65307	1558124	21	True				
ANR	1558395	AssignmentExpression	smax = ~ ( ~0L << ( bits - 1 ) )		1558124	0		=			
ANR	1558396	Identifier	smax		1558124	0					
ANR	1558397	UnaryOperationExpression	~ ( ~0L << ( bits - 1 ) )		1558124	1					
ANR	1558398	UnaryOperator	~		1558124	0					
ANR	1558399	ShiftExpression	~0L << ( bits - 1 )		1558124	1		<<			
ANR	1558400	Identifier	~0L		1558124	0					
ANR	1558401	AdditiveExpression	bits - 1		1558124	1		-			
ANR	1558402	Identifier	bits		1558124	0					
ANR	1558403	PrimaryExpression	1		1558124	1					
ANR	1558404	ExpressionStatement	smin = ( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )	1713:2:65311:65395	1558124	22	True				
ANR	1558405	AssignmentExpression	smin = ( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )		1558124	0		=			
ANR	1558406	Identifier	smin		1558124	0					
ANR	1558407	AdditiveExpression	( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )		1558124	1		+			
ANR	1558408	ShiftExpression	~0L << ( bits - 1 )		1558124	0		<<			
ANR	1558409	Identifier	~0L		1558124	0					
ANR	1558410	AdditiveExpression	bits - 1		1558124	1		-			
ANR	1558411	Identifier	bits		1558124	0					
ANR	1558412	PrimaryExpression	1		1558124	1					
ANR	1558413	ConditionalExpression	( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0		1558124	1					
ANR	1558414	Condition	operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE		1558124	0					
ANR	1558415	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE		1558124	0		&			
ANR	1558416	PtrMemberAccess	operand -> flags		1558124	0					
ANR	1558417	Identifier	operand		1558124	0					
ANR	1558418	Identifier	flags		1558124	1					
ANR	1558419	Identifier	HEXAGON_OPERAND_IS_NEGATIVE		1558124	1					
ANR	1558420	PrimaryExpression	1		1558124	1					
ANR	1558421	PrimaryExpression	0		1558124	2					
ANR	1558422	ExpressionStatement	umax = ~ ( ~0UL << bits )	1714:2:65399:65421	1558124	23	True				
ANR	1558423	AssignmentExpression	umax = ~ ( ~0UL << bits )		1558124	0		=			
ANR	1558424	Identifier	umax		1558124	0					
ANR	1558425	UnaryOperationExpression	~ ( ~0UL << bits )		1558124	1					
ANR	1558426	UnaryOperator	~		1558124	0					
ANR	1558427	ShiftExpression	~0UL << bits		1558124	1		<<			
ANR	1558428	Identifier	~0UL		1558124	0					
ANR	1558429	Identifier	bits		1558124	1					
ANR	1558430	ExpressionStatement	umin = 0UL	1715:2:65425:65435	1558124	24	True				
ANR	1558431	AssignmentExpression	umin = 0UL		1558124	0		=			
ANR	1558432	Identifier	umin		1558124	0					
ANR	1558433	PrimaryExpression	0UL		1558124	1					
ANR	1558434	ExpressionStatement	xed = value . s	1717:2:65440:65453	1558124	25	True				
ANR	1558435	AssignmentExpression	xed = value . s		1558124	0		=			
ANR	1558436	Identifier	xed		1558124	0					
ANR	1558437	MemberAccess	value . s		1558124	1					
ANR	1558438	Identifier	value		1558124	0					
ANR	1558439	Identifier	s		1558124	1					
ANR	1558440	ExpressionStatement	"xer = hexagon_extend ( & xed , bits , is_s )"	1718:2:65457:65496	1558124	26	True				
ANR	1558441	AssignmentExpression	"xer = hexagon_extend ( & xed , bits , is_s )"		1558124	0		=			
ANR	1558442	Identifier	xer		1558124	0					
ANR	1558443	CallExpression	"hexagon_extend ( & xed , bits , is_s )"		1558124	1					
ANR	1558444	Callee	hexagon_extend		1558124	0					
ANR	1558445	Identifier	hexagon_extend		1558124	0					
ANR	1558446	ArgumentList	& xed		1558124	1					
ANR	1558447	Argument	& xed		1558124	0					
ANR	1558448	UnaryOperationExpression	& xed		1558124	0					
ANR	1558449	UnaryOperator	&		1558124	0					
ANR	1558450	Identifier	xed		1558124	1					
ANR	1558451	Argument	bits		1558124	1					
ANR	1558452	Identifier	bits		1558124	0					
ANR	1558453	Argument	is_s		1558124	2					
ANR	1558454	Identifier	is_s		1558124	0					
ANR	1558455	IfStatement	if ( is_x )		1558124	27					
ANR	1558456	Condition	is_x	1720:6:65505:65508	1558124	0	True				
ANR	1558457	Identifier	is_x		1558124	0					
ANR	1558458	CompoundStatement		74:4:1922:1922	1558124	1					
ANR	1558459	ExpressionStatement	is_s = ( xed < 0 )	1722:6:65523:65539	1558124	0	True				
ANR	1558460	AssignmentExpression	is_s = ( xed < 0 )		1558124	0		=			
ANR	1558461	Identifier	is_s		1558124	0					
ANR	1558462	RelationalExpression	xed < 0		1558124	1		<			
ANR	1558463	Identifier	xed		1558124	0					
ANR	1558464	PrimaryExpression	0		1558124	1					
ANR	1558465	ExpressionStatement	* xvalue = xer	1724:6:65548:65561	1558124	1	True				
ANR	1558466	AssignmentExpression	* xvalue = xer		1558124	0		=			
ANR	1558467	UnaryOperationExpression	* xvalue		1558124	0					
ANR	1558468	UnaryOperator	*		1558124	0					
ANR	1558469	Identifier	xvalue		1558124	1					
ANR	1558470	Identifier	xer		1558124	1					
ANR	1558471	ExpressionStatement	value . s = xed	1725:6:65569:65582	1558124	2	True				
ANR	1558472	AssignmentExpression	value . s = xed		1558124	0		=			
ANR	1558473	MemberAccess	value . s		1558124	0					
ANR	1558474	Identifier	value		1558124	0					
ANR	1558475	Identifier	s		1558124	1					
ANR	1558476	Identifier	xed		1558124	1					
ANR	1558477	IfStatement	if ( is_s )		1558124	28					
ANR	1558478	Condition	is_s	1729:6:65632:65635	1558124	0	True				
ANR	1558479	Identifier	is_s		1558124	0					
ANR	1558480	CompoundStatement		83:4:2049:2049	1558124	1					
ANR	1558481	IfStatement	if ( value . s < smin || ( smax > 0 && value . s > smax ) )		1558124	0					
ANR	1558482	Condition	value . s < smin || ( smax > 0 && value . s > smax )	1731:10:65654:65699	1558124	0	True				
ANR	1558483	OrExpression	value . s < smin || ( smax > 0 && value . s > smax )		1558124	0		||			
ANR	1558484	RelationalExpression	value . s < smin		1558124	0		<			
ANR	1558485	MemberAccess	value . s		1558124	0					
ANR	1558486	Identifier	value		1558124	0					
ANR	1558487	Identifier	s		1558124	1					
ANR	1558488	Identifier	smin		1558124	1					
ANR	1558489	AndExpression	smax > 0 && value . s > smax		1558124	1		&&			
ANR	1558490	RelationalExpression	smax > 0		1558124	0		>			
ANR	1558491	Identifier	smax		1558124	0					
ANR	1558492	PrimaryExpression	0		1558124	1					
ANR	1558493	RelationalExpression	value . s > smax		1558124	1		>			
ANR	1558494	MemberAccess	value . s		1558124	0					
ANR	1558495	Identifier	value		1558124	0					
ANR	1558496	Identifier	s		1558124	1					
ANR	1558497	Identifier	smax		1558124	1					
ANR	1558498	CompoundStatement		85:1:2110:2110	1558124	1					
ANR	1558499	IfStatement	if ( errmsg )		1558124	0					
ANR	1558500	Condition	errmsg	1733:7:65712:65717	1558124	0	True				
ANR	1558501	Identifier	errmsg		1558124	0					
ANR	1558502	CompoundStatement		87:5:2132:2132	1558124	1					
ANR	1558503	ExpressionStatement	"sprintf ( buf , ""value %ld out of range: %ld-%ld"" , value . s , smin , smax )"	1735:7:65734:65803	1558124	0	True				
ANR	1558504	CallExpression	"sprintf ( buf , ""value %ld out of range: %ld-%ld"" , value . s , smin , smax )"		1558124	0					
ANR	1558505	Callee	sprintf		1558124	0					
ANR	1558506	Identifier	sprintf		1558124	0					
ANR	1558507	ArgumentList	buf		1558124	1					
ANR	1558508	Argument	buf		1558124	0					
ANR	1558509	Identifier	buf		1558124	0					
ANR	1558510	Argument	"""value %ld out of range: %ld-%ld"""		1558124	1					
ANR	1558511	PrimaryExpression	"""value %ld out of range: %ld-%ld"""		1558124	0					
ANR	1558512	Argument	value . s		1558124	2					
ANR	1558513	MemberAccess	value . s		1558124	0					
ANR	1558514	Identifier	value		1558124	0					
ANR	1558515	Identifier	s		1558124	1					
ANR	1558516	Argument	smin		1558124	3					
ANR	1558517	Identifier	smin		1558124	0					
ANR	1558518	Argument	smax		1558124	4					
ANR	1558519	Identifier	smax		1558124	0					
ANR	1558520	ExpressionStatement	* errmsg = buf	1736:7:65812:65825	1558124	1	True				
ANR	1558521	AssignmentExpression	* errmsg = buf		1558124	0		=			
ANR	1558522	UnaryOperationExpression	* errmsg		1558124	0					
ANR	1558523	UnaryOperator	*		1558124	0					
ANR	1558524	Identifier	errmsg		1558124	1					
ANR	1558525	Identifier	buf		1558124	1					
ANR	1558526	ReturnStatement	return FALSE ;	1738:3:65837:65849	1558124	1	True				
ANR	1558527	Identifier	FALSE		1558124	0					
ANR	1558528	ElseStatement	else		1558124	0					
ANR	1558529	CompoundStatement		95:4:2278:2278	1558124	0					
ANR	1558530	IfStatement	if ( value . u < umin || ( umax > 0 && value . u > umax ) )		1558124	0					
ANR	1558531	Condition	value . u < umin || ( umax > 0 && value . u > umax )	1743:10:65883:65928	1558124	0	True				
ANR	1558532	OrExpression	value . u < umin || ( umax > 0 && value . u > umax )		1558124	0		||			
ANR	1558533	RelationalExpression	value . u < umin		1558124	0		<			
ANR	1558534	MemberAccess	value . u		1558124	0					
ANR	1558535	Identifier	value		1558124	0					
ANR	1558536	Identifier	u		1558124	1					
ANR	1558537	Identifier	umin		1558124	1					
ANR	1558538	AndExpression	umax > 0 && value . u > umax		1558124	1		&&			
ANR	1558539	RelationalExpression	umax > 0		1558124	0		>			
ANR	1558540	Identifier	umax		1558124	0					
ANR	1558541	PrimaryExpression	0		1558124	1					
ANR	1558542	RelationalExpression	value . u > umax		1558124	1		>			
ANR	1558543	MemberAccess	value . u		1558124	0					
ANR	1558544	Identifier	value		1558124	0					
ANR	1558545	Identifier	u		1558124	1					
ANR	1558546	Identifier	umax		1558124	1					
ANR	1558547	CompoundStatement		97:1:2339:2339	1558124	1					
ANR	1558548	IfStatement	if ( errmsg )		1558124	0					
ANR	1558549	Condition	errmsg	1745:7:65941:65946	1558124	0	True				
ANR	1558550	Identifier	errmsg		1558124	0					
ANR	1558551	CompoundStatement		99:5:2361:2361	1558124	1					
ANR	1558552	ExpressionStatement	"sprintf ( buf , ""value %lu out of range: %lu-%lu"" , value . u , umin , umax )"	1747:7:65963:66032	1558124	0	True				
ANR	1558553	CallExpression	"sprintf ( buf , ""value %lu out of range: %lu-%lu"" , value . u , umin , umax )"		1558124	0					
ANR	1558554	Callee	sprintf		1558124	0					
ANR	1558555	Identifier	sprintf		1558124	0					
ANR	1558556	ArgumentList	buf		1558124	1					
ANR	1558557	Argument	buf		1558124	0					
ANR	1558558	Identifier	buf		1558124	0					
ANR	1558559	Argument	"""value %lu out of range: %lu-%lu"""		1558124	1					
ANR	1558560	PrimaryExpression	"""value %lu out of range: %lu-%lu"""		1558124	0					
ANR	1558561	Argument	value . u		1558124	2					
ANR	1558562	MemberAccess	value . u		1558124	0					
ANR	1558563	Identifier	value		1558124	0					
ANR	1558564	Identifier	u		1558124	1					
ANR	1558565	Argument	umin		1558124	3					
ANR	1558566	Identifier	umin		1558124	0					
ANR	1558567	Argument	umax		1558124	4					
ANR	1558568	Identifier	umax		1558124	0					
ANR	1558569	ExpressionStatement	* errmsg = buf	1748:7:66041:66054	1558124	1	True				
ANR	1558570	AssignmentExpression	* errmsg = buf		1558124	0		=			
ANR	1558571	UnaryOperationExpression	* errmsg		1558124	0					
ANR	1558572	UnaryOperator	*		1558124	0					
ANR	1558573	Identifier	errmsg		1558124	1					
ANR	1558574	Identifier	buf		1558124	1					
ANR	1558575	ReturnStatement	return FALSE ;	1750:3:66066:66078	1558124	1	True				
ANR	1558576	Identifier	FALSE		1558124	0					
ANR	1558577	IfStatement	if ( ! is_x )		1558124	29					
ANR	1558578	Condition	! is_x	1755:6:66162:66166	1558124	0	True				
ANR	1558579	UnaryOperationExpression	! is_x		1558124	0					
ANR	1558580	UnaryOperator	!		1558124	0					
ANR	1558581	Identifier	is_x		1558124	1					
ANR	1558582	ExpressionStatement	value . s >>= operand -> shift_count	1756:4:66173:66205	1558124	1	True				
ANR	1558583	AssignmentExpression	value . s >>= operand -> shift_count		1558124	0		>>=			
ANR	1558584	MemberAccess	value . s		1558124	0					
ANR	1558585	Identifier	value		1558124	0					
ANR	1558586	Identifier	s		1558124	1					
ANR	1558587	PtrMemberAccess	operand -> shift_count		1558124	1					
ANR	1558588	Identifier	operand		1558124	0					
ANR	1558589	Identifier	shift_count		1558124	1					
ANR	1558590	ForStatement	for ( i = len - 1 ; i >= 0 ; i -- )		1558124	30					
ANR	1558591	ForInit	i = len - 1 ;	1759:7:66286:66297	1558124	0	True				
ANR	1558592	AssignmentExpression	i = len - 1		1558124	0		=			
ANR	1558593	Identifier	i		1558124	0					
ANR	1558594	AdditiveExpression	len - 1		1558124	1		-			
ANR	1558595	Identifier	len		1558124	0					
ANR	1558596	PrimaryExpression	1		1558124	1					
ANR	1558597	Condition	i >= 0	1759:20:66299:66304	1558124	1	True				
ANR	1558598	RelationalExpression	i >= 0		1558124	0		>=			
ANR	1558599	Identifier	i		1558124	0					
ANR	1558600	PrimaryExpression	0		1558124	1					
ANR	1558601	PostIncDecOperationExpression	i --	1759:28:66307:66309	1558124	2	True				
ANR	1558602	Identifier	i		1558124	0					
ANR	1558603	IncDec	--		1558124	1					
ANR	1558604	IfStatement	if ( ! ISSPACE ( opcode -> enc [ i ] ) )		1558124	3					
ANR	1558605	Condition	! ISSPACE ( opcode -> enc [ i ] )	1760:8:66320:66345	1558124	0	True				
ANR	1558606	UnaryOperationExpression	! ISSPACE ( opcode -> enc [ i ] )		1558124	0					
ANR	1558607	UnaryOperator	!		1558124	0					
ANR	1558608	CallExpression	ISSPACE ( opcode -> enc [ i ] )		1558124	1					
ANR	1558609	Callee	ISSPACE		1558124	0					
ANR	1558610	Identifier	ISSPACE		1558124	0					
ANR	1558611	ArgumentList	opcode -> enc [ i ]		1558124	1					
ANR	1558612	Argument	opcode -> enc [ i ]		1558124	0					
ANR	1558613	ArrayIndexing	opcode -> enc [ i ]		1558124	0					
ANR	1558614	PtrMemberAccess	opcode -> enc		1558124	0					
ANR	1558615	Identifier	opcode		1558124	0					
ANR	1558616	Identifier	enc		1558124	1					
ANR	1558617	Identifier	i		1558124	1					
ANR	1558618	CompoundStatement		114:6:2761:2761	1558124	1					
ANR	1558619	IfStatement	if ( opcode -> enc [ i ] == enc_letter )		1558124	0					
ANR	1558620	Condition	opcode -> enc [ i ] == enc_letter	1762:12:66368:66396	1558124	0	True				
ANR	1558621	EqualityExpression	opcode -> enc [ i ] == enc_letter		1558124	0		==			
ANR	1558622	ArrayIndexing	opcode -> enc [ i ]		1558124	0					
ANR	1558623	PtrMemberAccess	opcode -> enc		1558124	0					
ANR	1558624	Identifier	opcode		1558124	0					
ANR	1558625	Identifier	enc		1558124	1					
ANR	1558626	Identifier	i		1558124	1					
ANR	1558627	Identifier	enc_letter		1558124	1					
ANR	1558628	CompoundStatement		116:10:2816:2816	1558124	1					
ANR	1558629	ExpressionStatement	( * insn ) &= ~ ( 1 << shift_count )	1765:12:66452:66482	1558124	0	True				
ANR	1558630	AssignmentExpression	( * insn ) &= ~ ( 1 << shift_count )		1558124	0		&=			
ANR	1558631	UnaryOperationExpression	* insn		1558124	0					
ANR	1558632	UnaryOperator	*		1558124	0					
ANR	1558633	Identifier	insn		1558124	1					
ANR	1558634	UnaryOperationExpression	~ ( 1 << shift_count )		1558124	1					
ANR	1558635	UnaryOperator	~		1558124	0					
ANR	1558636	ShiftExpression	1 << shift_count		1558124	1		<<			
ANR	1558637	PrimaryExpression	1		1558124	0					
ANR	1558638	Identifier	shift_count		1558124	1					
ANR	1558639	ExpressionStatement	( * insn ) |= ( value . s & 1 ) << shift_count	1767:12:66530:66569	1558124	1	True				
ANR	1558640	AssignmentExpression	( * insn ) |= ( value . s & 1 ) << shift_count		1558124	0		|=			
ANR	1558641	UnaryOperationExpression	* insn		1558124	0					
ANR	1558642	UnaryOperator	*		1558124	0					
ANR	1558643	Identifier	insn		1558124	1					
ANR	1558644	ShiftExpression	( value . s & 1 ) << shift_count		1558124	1		<<			
ANR	1558645	BitAndExpression	value . s & 1		1558124	0		&			
ANR	1558646	MemberAccess	value . s		1558124	0					
ANR	1558647	Identifier	value		1558124	0					
ANR	1558648	Identifier	s		1558124	1					
ANR	1558649	PrimaryExpression	1		1558124	1					
ANR	1558650	Identifier	shift_count		1558124	1					
ANR	1558651	ExpressionStatement	value . s >>= 1	1768:12:66583:66596	1558124	2	True				
ANR	1558652	AssignmentExpression	value . s >>= 1		1558124	0		>>=			
ANR	1558653	MemberAccess	value . s		1558124	0					
ANR	1558654	Identifier	value		1558124	0					
ANR	1558655	Identifier	s		1558124	1					
ANR	1558656	PrimaryExpression	1		1558124	1					
ANR	1558657	ExpressionStatement	num_bits ++	1769:12:66610:66620	1558124	3	True				
ANR	1558658	PostIncDecOperationExpression	num_bits ++		1558124	0					
ANR	1558659	Identifier	num_bits		1558124	0					
ANR	1558660	IncDec	++		1558124	1					
ANR	1558661	ExpressionStatement	shift_count ++	1771:8:66642:66655	1558124	1	True				
ANR	1558662	PostIncDecOperationExpression	shift_count ++		1558124	0					
ANR	1558663	Identifier	shift_count		1558124	0					
ANR	1558664	IncDec	++		1558124	1					
ANR	1558665	IfStatement	if ( num_bits != operand -> bits )		1558124	31					
ANR	1558666	Condition	num_bits != operand -> bits	1775:6:66728:66752	1558124	0	True				
ANR	1558667	EqualityExpression	num_bits != operand -> bits		1558124	0		!=			
ANR	1558668	Identifier	num_bits		1558124	0					
ANR	1558669	PtrMemberAccess	operand -> bits		1558124	1					
ANR	1558670	Identifier	operand		1558124	0					
ANR	1558671	Identifier	bits		1558124	1					
ANR	1558672	CompoundStatement		129:4:3166:3166	1558124	1					
ANR	1558673	IfStatement	if ( errmsg )		1558124	0					
ANR	1558674	Condition	errmsg	1777:10:66771:66776	1558124	0	True				
ANR	1558675	Identifier	errmsg		1558124	0					
ANR	1558676	CompoundStatement		131:8:3194:3194	1558124	1					
ANR	1558677	Statement	sprintf	1779:10:66799:66805	1558124	0	True				
ANR	1558678	Statement	(	1779:18:66807:66807	1558124	1	True				
ANR	1558679	Statement	buf	1779:19:66808:66810	1558124	2	True				
ANR	1558680	Statement	","	1779:22:66811:66811	1558124	3	True				
ANR	1558681	Statement	"""did not encode expected number of bits: %d != %d\\n"""	1779:24:66813:66864	1558124	4	True				
ANR	1558682	Statement	"""enc = %s\\n  operand = %s"""	1780:19:66885:66910	1558124	5	True				
ANR	1558683	Statement	","	1780:45:66911:66911	1558124	6	True				
ANR	1558684	Statement	num_bits	1781:19:66932:66939	1558124	7	True				
ANR	1558685	Statement	","	1781:27:66940:66940	1558124	8	True				
ANR	1558686	Statement	operand	1781:29:66942:66948	1558124	9	True				
ANR	1558687	Statement	->	1781:36:66949:66950	1558124	10	True				
ANR	1558688	Statement	bits	1781:38:66951:66954	1558124	11	True				
ANR	1558689	Statement	","	1781:42:66955:66955	1558124	12	True				
ANR	1558690	Statement	opcode	1781:44:66957:66962	1558124	13	True				
ANR	1558691	Statement	->	1781:50:66963:66964	1558124	14	True				
ANR	1558692	Statement	enc	1781:52:66965:66967	1558124	15	True				
ANR	1558693	Statement	","	1781:55:66968:66968	1558124	16	True				
ANR	1558694	Statement	operand	1781:57:66970:66976	1558124	17	True				
ANR	1558695	Statement	->	1781:64:66977:66978	1558124	18	True				
ANR	1558696	Statement	fmt	1781:66:66979:66981	1558124	19	True				
ANR	1558697	Statement	)	1781:69:66982:66982	1558124	20	True				
ANR	1558698	ExpressionStatement		1781:70:66983:66983	1558124	21	True				
ANR	1558699	ExpressionStatement	* errmsg = buf	1782:10:66995:67008	1558124	22	True				
ANR	1558700	AssignmentExpression	* errmsg = buf		1558124	0		=			
ANR	1558701	UnaryOperationExpression	* errmsg		1558124	0					
ANR	1558702	UnaryOperator	*		1558124	0					
ANR	1558703	Identifier	errmsg		1558124	1					
ANR	1558704	Identifier	buf		1558124	1					
ANR	1558705	ReturnStatement	return FALSE ;	1784:6:67026:67038	1558124	1	True				
ANR	1558706	Identifier	FALSE		1558124	0					
ANR	1558707	ReturnStatement	return TRUE ;	1787:2:67049:67060	1558124	32	True				
ANR	1558708	Identifier	TRUE		1558124	0					
ANR	1558709	ReturnType	int		1558124	1					
ANR	1558710	Identifier	hexagon_encode_operand		1558124	2					
ANR	1558711	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , long avalue , long * xvalue , int is_x , int is_rel , char * * errmsg"		1558124	3					
ANR	1558712	Parameter	const hexagon_operand * operand	1645:1:63444:63473	1558124	0	True				
ANR	1558713	ParameterType	const hexagon_operand *		1558124	0					
ANR	1558714	Identifier	operand		1558124	1					
ANR	1558715	Parameter	hexagon_insn * insn	1645:33:63476:63493	1558124	1	True				
ANR	1558716	ParameterType	hexagon_insn *		1558124	0					
ANR	1558717	Identifier	insn		1558124	1					
ANR	1558718	Parameter	const hexagon_opcode * opcode	1646:1:63497:63524	1558124	2	True				
ANR	1558719	ParameterType	const hexagon_opcode *		1558124	0					
ANR	1558720	Identifier	opcode		1558124	1					
ANR	1558721	Parameter	long avalue	1646:31:63527:63537	1558124	3	True				
ANR	1558722	ParameterType	long		1558124	0					
ANR	1558723	Identifier	avalue		1558124	1					
ANR	1558724	Parameter	long * xvalue	1646:44:63540:63551	1558124	4	True				
ANR	1558725	ParameterType	long *		1558124	0					
ANR	1558726	Identifier	xvalue		1558124	1					
ANR	1558727	Parameter	int is_x	1646:58:63554:63561	1558124	5	True				
ANR	1558728	ParameterType	int		1558124	0					
ANR	1558729	Identifier	is_x		1558124	1					
ANR	1558730	Parameter	int is_rel	1646:68:63564:63573	1558124	6	True				
ANR	1558731	ParameterType	int		1558124	0					
ANR	1558732	Identifier	is_rel		1558124	1					
ANR	1558733	Parameter	char * * errmsg	1647:1:63577:63589	1558124	7	True				
ANR	1558734	ParameterType	char * *		1558124	0					
ANR	1558735	Identifier	errmsg		1558124	1					
ANR	1558736	CFGEntryNode	ENTRY		1558124		True				
ANR	1558737	CFGExitNode	EXIT		1558124		True				
ANR	1558738	Symbol	avalue		1558124						
ANR	1558739	Symbol	HEXAGON_OPERAND_IS_SIGNED		1558124						
ANR	1558740	Symbol	* xvalue		1558124						
ANR	1558741	Symbol	operand -> enc_letter		1558124						
ANR	1558742	Symbol	xvalue		1558124						
ANR	1558743	Symbol	umin		1558124						
ANR	1558744	Symbol	opcode -> attributes		1558124						
ANR	1558745	Symbol	opcode		1558124						
ANR	1558746	Symbol	strlen		1558124						
ANR	1558747	Symbol	value . s		1558124						
ANR	1558748	Symbol	is_x		1558124						
ANR	1558749	Symbol	opcode -> enc		1558124						
ANR	1558750	Symbol	len		1558124						
ANR	1558751	Symbol	xed		1558124						
ANR	1558752	Symbol	value . u		1558124						
ANR	1558753	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		1558124						
ANR	1558754	Symbol	~0L		1558124						
ANR	1558755	Symbol	HEXAGON_OPERAND_IS_PAIR		1558124						
ANR	1558756	Symbol	* opcode -> enc		1558124						
ANR	1558757	Symbol	smax		1558124						
ANR	1558758	Symbol	xer		1558124						
ANR	1558759	Symbol	HEXAGON_OPERAND_IS_SUBSET		1558124						
ANR	1558760	Symbol	bits		1558124						
ANR	1558761	Symbol	errmsg		1558124						
ANR	1558762	Symbol	TRUE		1558124						
ANR	1558763	Symbol	is_rel		1558124						
ANR	1558764	Symbol	* * opcode		1558124						
ANR	1558765	Symbol	is_s		1558124						
ANR	1558766	Symbol	~0UL		1558124						
ANR	1558767	Symbol	& xed		1558124						
ANR	1558768	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		1558124						
ANR	1558769	Symbol	* errmsg		1558124						
ANR	1558770	Symbol	* operand		1558124						
ANR	1558771	Symbol	smin		1558124						
ANR	1558772	Symbol	TOUPPER		1558124						
ANR	1558773	Symbol	hexagon_extend		1558124						
ANR	1558774	Symbol	enc_letter		1558124						
ANR	1558775	Symbol	value		1558124						
ANR	1558776	Symbol	shift_count		1558124						
ANR	1558777	Symbol	HEXAGON_OPERAND_IS_HI16		1558124						
ANR	1558778	Symbol	operand -> flags		1558124						
ANR	1558779	Symbol	HEXAGON_SUBREGS_TO		1558124						
ANR	1558780	Symbol	TOLOWER		1558124						
ANR	1558781	Symbol	i		1558124						
ANR	1558782	Symbol	* insn		1558124						
ANR	1558783	Symbol	HEXAGON_OPERAND_IS_NEGATIVE		1558124						
ANR	1558784	Symbol	HEXAGON_OPERAND_IS_LO16		1558124						
ANR	1558785	Symbol	insn		1558124						
ANR	1558786	Symbol	operand -> shift_count		1558124						
ANR	1558787	Symbol	buf		1558124						
ANR	1558788	Symbol	* i		1558124						
ANR	1558789	Symbol	HEXAGON_HI16		1558124						
ANR	1558790	Symbol	HEXAGON_LO16		1558124						
ANR	1558791	Symbol	umax		1558124						
ANR	1558792	Symbol	FALSE		1558124						
ANR	1558793	Symbol	operand -> bits		1558124						
ANR	1558794	Symbol	num_bits		1558124						
ANR	1558795	Symbol	ISSPACE		1558124						
ANR	1558796	Symbol	operand		1558124						
ANR	1558797	Symbol	* opcode		1558124						
ANR	1558798	DeclStmt									
ANR	1558799	Decl							unsigned long	unsigned long	regn
ANR	1558800	DeclStmt									
ANR	1558801	Decl							char	char *	regs
ANR	1558802	DeclStmt									
ANR	1558803	Decl							size_t	size_t	i
ANR	1558804	DeclStmt									
ANR	1558805	Decl							char	char [ 4 ]	name
ANR	1558806	DeclStmt									
ANR	1558807	Decl							size_t	size_t	len
ANR	1558808	Function	hexagon_parse_dreg	1854:0:68584:70148							
ANR	1558809	FunctionDef	"hexagon_parse_dreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1558808	0					
ANR	1558810	CompoundStatement		1858:0:68751:70148	1558808	0					
ANR	1558811	IdentifierDeclStatement	int reg_odd ;	1859:2:68755:68766	1558808	0	True				
ANR	1558812	IdentifierDecl	reg_odd		1558808	0					
ANR	1558813	IdentifierDeclType	int		1558808	0					
ANR	1558814	Identifier	reg_odd		1558808	1					
ANR	1558815	IdentifierDeclStatement	int reg_even ;	1860:2:68770:68782	1558808	1	True				
ANR	1558816	IdentifierDecl	reg_even		1558808	0					
ANR	1558817	IdentifierDeclType	int		1558808	0					
ANR	1558818	Identifier	reg_even		1558808	1					
ANR	1558819	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1862:2:68787:68888	1558808	2	True				
ANR	1558820	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1558808	0		=			
ANR	1558821	Identifier	reg_odd		1558808	0					
ANR	1558822	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1558808	1					
ANR	1558823	Callee	hexagon_reg_num		1558808	0					
ANR	1558824	Identifier	hexagon_reg_num		1558808	0					
ANR	1558825	ArgumentList	operand		1558808	1					
ANR	1558826	Argument	operand		1558808	0					
ANR	1558827	Identifier	operand		1558808	0					
ANR	1558828	Argument	& input		1558808	1					
ANR	1558829	UnaryOperationExpression	& input		1558808	0					
ANR	1558830	UnaryOperator	&		1558808	0					
ANR	1558831	Identifier	input		1558808	1					
ANR	1558832	Argument	'r'		1558808	2					
ANR	1558833	PrimaryExpression	'r'		1558808	0					
ANR	1558834	Argument	hexagon_gp_regs		1558808	3					
ANR	1558835	Identifier	hexagon_gp_regs		1558808	0					
ANR	1558836	Argument	hexagon_gp_regs_count		1558808	4					
ANR	1558837	Identifier	hexagon_gp_regs_count		1558808	0					
ANR	1558838	Argument	NULL		1558808	5					
ANR	1558839	Identifier	NULL		1558808	0					
ANR	1558840	Argument	'\\0'		1558808	6					
ANR	1558841	PrimaryExpression	'\\0'		1558808	0					
ANR	1558842	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1863:2:68892:68993	1558808	3	True				
ANR	1558843	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1558808	0		=			
ANR	1558844	Identifier	reg_even		1558808	0					
ANR	1558845	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1558808	1					
ANR	1558846	Callee	hexagon_reg_num		1558808	0					
ANR	1558847	Identifier	hexagon_reg_num		1558808	0					
ANR	1558848	ArgumentList	operand		1558808	1					
ANR	1558849	Argument	operand		1558808	0					
ANR	1558850	Identifier	operand		1558808	0					
ANR	1558851	Argument	& input		1558808	1					
ANR	1558852	UnaryOperationExpression	& input		1558808	0					
ANR	1558853	UnaryOperator	&		1558808	0					
ANR	1558854	Identifier	input		1558808	1					
ANR	1558855	Argument	':'		1558808	2					
ANR	1558856	PrimaryExpression	':'		1558808	0					
ANR	1558857	Argument	hexagon_gp_regs		1558808	3					
ANR	1558858	Identifier	hexagon_gp_regs		1558808	0					
ANR	1558859	Argument	hexagon_gp_regs_count		1558808	4					
ANR	1558860	Identifier	hexagon_gp_regs_count		1558808	0					
ANR	1558861	Argument	NULL		1558808	5					
ANR	1558862	Identifier	NULL		1558808	0					
ANR	1558863	Argument	'\\0'		1558808	6					
ANR	1558864	PrimaryExpression	'\\0'		1558808	0					
ANR	1558865	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1558808	4					
ANR	1558866	Condition	reg_odd < 0 || reg_even < 0	1864:6:69001:69027	1558808	0	True				
ANR	1558867	OrExpression	reg_odd < 0 || reg_even < 0		1558808	0		||			
ANR	1558868	RelationalExpression	reg_odd < 0		1558808	0		<			
ANR	1558869	Identifier	reg_odd		1558808	0					
ANR	1558870	PrimaryExpression	0		1558808	1					
ANR	1558871	RelationalExpression	reg_even < 0		1558808	1		<			
ANR	1558872	Identifier	reg_even		1558808	0					
ANR	1558873	PrimaryExpression	0		1558808	1					
ANR	1558874	ReturnStatement	return ( NULL ) ;	1865:4:69034:69047	1558808	1	True				
ANR	1558875	Identifier	NULL		1558808	0					
ANR	1558876	IfStatement	if ( reg_odd % 2 != 1 )		1558808	5					
ANR	1558877	Condition	reg_odd % 2 != 1	1868:6:69101:69116	1558808	0	True				
ANR	1558878	EqualityExpression	reg_odd % 2 != 1		1558808	0		!=			
ANR	1558879	MultiplicativeExpression	reg_odd % 2		1558808	0		%			
ANR	1558880	Identifier	reg_odd		1558808	0					
ANR	1558881	PrimaryExpression	2		1558808	1					
ANR	1558882	PrimaryExpression	1		1558808	1					
ANR	1558883	CompoundStatement		12:4:371:371	1558808	1					
ANR	1558884	IfStatement	if ( errmsg )		1558808	0					
ANR	1558885	Condition	errmsg	1870:10:69135:69140	1558808	0	True				
ANR	1558886	Identifier	errmsg		1558808	0					
ANR	1558887	CompoundStatement		15:19:420:434	1558808	1					
ANR	1558888	Statement	static	1872:12:69165:69170	1558808	0	True				
ANR	1558889	IdentifierDeclStatement	char buf [ 100 ] ;	1872:19:69172:69186	1558808	1	True				
ANR	1558890	IdentifierDecl	buf [ 100 ]		1558808	0					
ANR	1558891	IdentifierDeclType	char [ 100 ]		1558808	0					
ANR	1558892	Identifier	buf		1558808	1					
ANR	1558893	PrimaryExpression	100		1558808	2					
ANR	1558894	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	1873:12:69200:69257	1558808	2	True				
ANR	1558895	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1558808	0					
ANR	1558896	Callee	sprintf		1558808	0					
ANR	1558897	Identifier	sprintf		1558808	0					
ANR	1558898	ArgumentList	buf		1558808	1					
ANR	1558899	Argument	buf		1558808	0					
ANR	1558900	Identifier	buf		1558808	0					
ANR	1558901	Argument	"""invalid odd register number: %d"""		1558808	1					
ANR	1558902	PrimaryExpression	"""invalid odd register number: %d"""		1558808	0					
ANR	1558903	Argument	reg_odd		1558808	2					
ANR	1558904	Identifier	reg_odd		1558808	0					
ANR	1558905	ExpressionStatement	* errmsg = buf	1874:12:69271:69284	1558808	3	True				
ANR	1558906	AssignmentExpression	* errmsg = buf		1558808	0		=			
ANR	1558907	UnaryOperationExpression	* errmsg		1558808	0					
ANR	1558908	UnaryOperator	*		1558808	0					
ANR	1558909	Identifier	errmsg		1558808	1					
ANR	1558910	Identifier	buf		1558808	1					
ANR	1558911	ReturnStatement	return NULL ;	1876:6:69302:69313	1558808	1	True				
ANR	1558912	Identifier	NULL		1558808	0					
ANR	1558913	IfStatement	if ( reg_even % 2 != 0 )		1558808	6					
ANR	1558914	Condition	reg_even % 2 != 0	1880:6:69374:69390	1558808	0	True				
ANR	1558915	EqualityExpression	reg_even % 2 != 0		1558808	0		!=			
ANR	1558916	MultiplicativeExpression	reg_even % 2		1558808	0		%			
ANR	1558917	Identifier	reg_even		1558808	0					
ANR	1558918	PrimaryExpression	2		1558808	1					
ANR	1558919	PrimaryExpression	0		1558808	1					
ANR	1558920	CompoundStatement		24:4:645:645	1558808	1					
ANR	1558921	IfStatement	if ( errmsg )		1558808	0					
ANR	1558922	Condition	errmsg	1882:10:69409:69414	1558808	0	True				
ANR	1558923	Identifier	errmsg		1558808	0					
ANR	1558924	CompoundStatement		27:19:694:708	1558808	1					
ANR	1558925	Statement	static	1884:12:69439:69444	1558808	0	True				
ANR	1558926	IdentifierDeclStatement	char buf [ 100 ] ;	1884:19:69446:69460	1558808	1	True				
ANR	1558927	IdentifierDecl	buf [ 100 ]		1558808	0					
ANR	1558928	IdentifierDeclType	char [ 100 ]		1558808	0					
ANR	1558929	Identifier	buf		1558808	1					
ANR	1558930	PrimaryExpression	100		1558808	2					
ANR	1558931	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	1885:12:69474:69533	1558808	2	True				
ANR	1558932	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1558808	0					
ANR	1558933	Callee	sprintf		1558808	0					
ANR	1558934	Identifier	sprintf		1558808	0					
ANR	1558935	ArgumentList	buf		1558808	1					
ANR	1558936	Argument	buf		1558808	0					
ANR	1558937	Identifier	buf		1558808	0					
ANR	1558938	Argument	"""invalid even register number: %d"""		1558808	1					
ANR	1558939	PrimaryExpression	"""invalid even register number: %d"""		1558808	0					
ANR	1558940	Argument	reg_even		1558808	2					
ANR	1558941	Identifier	reg_even		1558808	0					
ANR	1558942	ExpressionStatement	* errmsg = buf	1886:12:69547:69560	1558808	3	True				
ANR	1558943	AssignmentExpression	* errmsg = buf		1558808	0		=			
ANR	1558944	UnaryOperationExpression	* errmsg		1558808	0					
ANR	1558945	UnaryOperator	*		1558808	0					
ANR	1558946	Identifier	errmsg		1558808	1					
ANR	1558947	Identifier	buf		1558808	1					
ANR	1558948	ReturnStatement	return NULL ;	1888:6:69578:69589	1558808	1	True				
ANR	1558949	Identifier	NULL		1558808	0					
ANR	1558950	IfStatement	if ( reg_odd != reg_even + 1 )		1558808	7					
ANR	1558951	Condition	reg_odd != reg_even + 1	1892:6:69652:69674	1558808	0	True				
ANR	1558952	EqualityExpression	reg_odd != reg_even + 1		1558808	0		!=			
ANR	1558953	Identifier	reg_odd		1558808	0					
ANR	1558954	AdditiveExpression	reg_even + 1		1558808	1		+			
ANR	1558955	Identifier	reg_even		1558808	0					
ANR	1558956	PrimaryExpression	1		1558808	1					
ANR	1558957	CompoundStatement		36:4:929:929	1558808	1					
ANR	1558958	IfStatement	if ( errmsg )		1558808	0					
ANR	1558959	Condition	errmsg	1894:10:69693:69698	1558808	0	True				
ANR	1558960	Identifier	errmsg		1558808	0					
ANR	1558961	CompoundStatement		39:19:978:992	1558808	1					
ANR	1558962	Statement	static	1896:12:69723:69728	1558808	0	True				
ANR	1558963	IdentifierDeclStatement	char buf [ 100 ] ;	1896:19:69730:69744	1558808	1	True				
ANR	1558964	IdentifierDecl	buf [ 100 ]		1558808	0					
ANR	1558965	IdentifierDeclType	char [ 100 ]		1558808	0					
ANR	1558966	Identifier	buf		1558808	1					
ANR	1558967	PrimaryExpression	100		1558808	2					
ANR	1558968	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	1897:12:69758:69852	1558808	2	True				
ANR	1558969	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1558808	0					
ANR	1558970	Callee	sprintf		1558808	0					
ANR	1558971	Identifier	sprintf		1558808	0					
ANR	1558972	ArgumentList	buf		1558808	1					
ANR	1558973	Argument	buf		1558808	0					
ANR	1558974	Identifier	buf		1558808	0					
ANR	1558975	Argument	"""registers must be consecutive: %d:%d"""		1558808	1					
ANR	1558976	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1558808	0					
ANR	1558977	Argument	reg_odd		1558808	2					
ANR	1558978	Identifier	reg_odd		1558808	0					
ANR	1558979	Argument	reg_even		1558808	3					
ANR	1558980	Identifier	reg_even		1558808	0					
ANR	1558981	ExpressionStatement	* errmsg = buf	1899:12:69866:69879	1558808	3	True				
ANR	1558982	AssignmentExpression	* errmsg = buf		1558808	0		=			
ANR	1558983	UnaryOperationExpression	* errmsg		1558808	0					
ANR	1558984	UnaryOperator	*		1558808	0					
ANR	1558985	Identifier	errmsg		1558808	1					
ANR	1558986	Identifier	buf		1558808	1					
ANR	1558987	ReturnStatement	return NULL ;	1901:6:69897:69908	1558808	1	True				
ANR	1558988	Identifier	NULL		1558808	0					
ANR	1558989	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1558808	8					
ANR	1558990	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	1904:6:69923:70014	1558808	0	True				
ANR	1558991	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1558808	0					
ANR	1558992	Callee	hexagon_encode_operand		1558808	0					
ANR	1558993	Identifier	hexagon_encode_operand		1558808	0					
ANR	1558994	ArgumentList	operand		1558808	1					
ANR	1558995	Argument	operand		1558808	0					
ANR	1558996	Identifier	operand		1558808	0					
ANR	1558997	Argument	insn		1558808	1					
ANR	1558998	Identifier	insn		1558808	0					
ANR	1558999	Argument	opcode		1558808	2					
ANR	1559000	Identifier	opcode		1558808	0					
ANR	1559001	Argument	reg_even		1558808	3					
ANR	1559002	Identifier	reg_even		1558808	0					
ANR	1559003	Argument	NULL		1558808	4					
ANR	1559004	Identifier	NULL		1558808	0					
ANR	1559005	Argument	FALSE		1558808	5					
ANR	1559006	Identifier	FALSE		1558808	0					
ANR	1559007	Argument	FALSE		1558808	6					
ANR	1559008	Identifier	FALSE		1558808	0					
ANR	1559009	Argument	errmsg		1558808	7					
ANR	1559010	Identifier	errmsg		1558808	0					
ANR	1559011	CompoundStatement		49:4:1269:1269	1558808	1					
ANR	1559012	IfStatement	if ( flag )		1558808	0					
ANR	1559013	Condition	flag	1907:10:70033:70036	1558808	0	True				
ANR	1559014	Identifier	flag		1558808	0					
ANR	1559015	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	1908:8:70047:70078	1558808	1	True				
ANR	1559016	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		1558808	0		=			
ANR	1559017	UnaryOperationExpression	* flag		1558808	0					
ANR	1559018	UnaryOperator	*		1558808	0					
ANR	1559019	Identifier	flag		1558808	1					
ANR	1559020	Identifier	HEXAGON_OPERAND_IS_PAIR		1558808	1					
ANR	1559021	ExpressionStatement	* val = reg_even	1910:6:70087:70102	1558808	1	True				
ANR	1559022	AssignmentExpression	* val = reg_even		1558808	0		=			
ANR	1559023	UnaryOperationExpression	* val		1558808	0					
ANR	1559024	UnaryOperator	*		1558808	0					
ANR	1559025	Identifier	val		1558808	1					
ANR	1559026	Identifier	reg_even		1558808	1					
ANR	1559027	ReturnStatement	return ( input ) ;	1911:6:70110:70124	1558808	2	True				
ANR	1559028	Identifier	input		1558808	0					
ANR	1559029	ReturnStatement	return NULL ;	1914:2:70135:70146	1558808	9	True				
ANR	1559030	Identifier	NULL		1558808	0					
ANR	1559031	ReturnType	static char *		1558808	1					
ANR	1559032	Identifier	hexagon_parse_dreg		1558808	2					
ANR	1559033	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1558808	3					
ANR	1559034	Parameter	const hexagon_operand * operand	1856:1:68618:68647	1558808	0	True				
ANR	1559035	ParameterType	const hexagon_operand *		1558808	0					
ANR	1559036	Identifier	operand		1558808	1					
ANR	1559037	Parameter	hexagon_insn * insn	1856:33:68650:68667	1558808	1	True				
ANR	1559038	ParameterType	hexagon_insn *		1558808	0					
ANR	1559039	Identifier	insn		1558808	1					
ANR	1559040	Parameter	const hexagon_opcode * opcode	1856:53:68670:68697	1558808	2	True				
ANR	1559041	ParameterType	const hexagon_opcode *		1558808	0					
ANR	1559042	Identifier	opcode		1558808	1					
ANR	1559043	Parameter	char * input	1857:1:68701:68711	1558808	3	True				
ANR	1559044	ParameterType	char *		1558808	0					
ANR	1559045	Identifier	input		1558808	1					
ANR	1559046	Parameter	long * val	1857:14:68714:68722	1558808	4	True				
ANR	1559047	ParameterType	long *		1558808	0					
ANR	1559048	Identifier	val		1558808	1					
ANR	1559049	Parameter	int * flag	1857:25:68725:68733	1558808	5	True				
ANR	1559050	ParameterType	int *		1558808	0					
ANR	1559051	Identifier	flag		1558808	1					
ANR	1559052	Parameter	char * * errmsg	1857:36:68736:68748	1558808	6	True				
ANR	1559053	ParameterType	char * *		1558808	0					
ANR	1559054	Identifier	errmsg		1558808	1					
ANR	1559055	CFGEntryNode	ENTRY		1558808		True				
ANR	1559056	CFGExitNode	EXIT		1558808		True				
ANR	1559057	Symbol	val		1558808						
ANR	1559058	Symbol	flag		1558808						
ANR	1559059	Symbol	NULL		1558808						
ANR	1559060	Symbol	errmsg		1558808						
ANR	1559061	Symbol	* val		1558808						
ANR	1559062	Symbol	opcode		1558808						
ANR	1559063	Symbol	reg_even		1558808						
ANR	1559064	Symbol	insn		1558808						
ANR	1559065	Symbol	input		1558808						
ANR	1559066	Symbol	buf		1558808						
ANR	1559067	Symbol	& input		1558808						
ANR	1559068	Symbol	hexagon_gp_regs		1558808						
ANR	1559069	Symbol	hexagon_encode_operand		1558808						
ANR	1559070	Symbol	hexagon_reg_num		1558808						
ANR	1559071	Symbol	FALSE		1558808						
ANR	1559072	Symbol	reg_odd		1558808						
ANR	1559073	Symbol	hexagon_gp_regs_count		1558808						
ANR	1559074	Symbol	* errmsg		1558808						
ANR	1559075	Symbol	* flag		1558808						
ANR	1559076	Symbol	HEXAGON_OPERAND_IS_PAIR		1558808						
ANR	1559077	Symbol	operand		1558808						
ANR	1559078	Function	hexagon_parse_dreg16	1917:0:70151:71829							
ANR	1559079	FunctionDef	"hexagon_parse_dreg16 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1559078	0					
ANR	1559080	CompoundStatement		1921:0:70320:71829	1559078	0					
ANR	1559081	IdentifierDeclStatement	int reg_odd ;	1922:2:70324:70335	1559078	0	True				
ANR	1559082	IdentifierDecl	reg_odd		1559078	0					
ANR	1559083	IdentifierDeclType	int		1559078	0					
ANR	1559084	Identifier	reg_odd		1559078	1					
ANR	1559085	IdentifierDeclStatement	int reg_even ;	1923:2:70339:70351	1559078	1	True				
ANR	1559086	IdentifierDecl	reg_even		1559078	0					
ANR	1559087	IdentifierDeclType	int		1559078	0					
ANR	1559088	Identifier	reg_even		1559078	1					
ANR	1559089	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1925:2:70356:70457	1559078	2	True				
ANR	1559090	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559078	0		=			
ANR	1559091	Identifier	reg_odd		1559078	0					
ANR	1559092	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559078	1					
ANR	1559093	Callee	hexagon_reg_num		1559078	0					
ANR	1559094	Identifier	hexagon_reg_num		1559078	0					
ANR	1559095	ArgumentList	operand		1559078	1					
ANR	1559096	Argument	operand		1559078	0					
ANR	1559097	Identifier	operand		1559078	0					
ANR	1559098	Argument	& input		1559078	1					
ANR	1559099	UnaryOperationExpression	& input		1559078	0					
ANR	1559100	UnaryOperator	&		1559078	0					
ANR	1559101	Identifier	input		1559078	1					
ANR	1559102	Argument	'r'		1559078	2					
ANR	1559103	PrimaryExpression	'r'		1559078	0					
ANR	1559104	Argument	hexagon_gp_regs		1559078	3					
ANR	1559105	Identifier	hexagon_gp_regs		1559078	0					
ANR	1559106	Argument	hexagon_gp_regs_count		1559078	4					
ANR	1559107	Identifier	hexagon_gp_regs_count		1559078	0					
ANR	1559108	Argument	NULL		1559078	5					
ANR	1559109	Identifier	NULL		1559078	0					
ANR	1559110	Argument	'\\0'		1559078	6					
ANR	1559111	PrimaryExpression	'\\0'		1559078	0					
ANR	1559112	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1926:2:70461:70562	1559078	3	True				
ANR	1559113	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559078	0		=			
ANR	1559114	Identifier	reg_even		1559078	0					
ANR	1559115	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559078	1					
ANR	1559116	Callee	hexagon_reg_num		1559078	0					
ANR	1559117	Identifier	hexagon_reg_num		1559078	0					
ANR	1559118	ArgumentList	operand		1559078	1					
ANR	1559119	Argument	operand		1559078	0					
ANR	1559120	Identifier	operand		1559078	0					
ANR	1559121	Argument	& input		1559078	1					
ANR	1559122	UnaryOperationExpression	& input		1559078	0					
ANR	1559123	UnaryOperator	&		1559078	0					
ANR	1559124	Identifier	input		1559078	1					
ANR	1559125	Argument	':'		1559078	2					
ANR	1559126	PrimaryExpression	':'		1559078	0					
ANR	1559127	Argument	hexagon_gp_regs		1559078	3					
ANR	1559128	Identifier	hexagon_gp_regs		1559078	0					
ANR	1559129	Argument	hexagon_gp_regs_count		1559078	4					
ANR	1559130	Identifier	hexagon_gp_regs_count		1559078	0					
ANR	1559131	Argument	NULL		1559078	5					
ANR	1559132	Identifier	NULL		1559078	0					
ANR	1559133	Argument	'\\0'		1559078	6					
ANR	1559134	PrimaryExpression	'\\0'		1559078	0					
ANR	1559135	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1559078	4					
ANR	1559136	Condition	reg_odd < 0 || reg_even < 0	1927:6:70570:70596	1559078	0	True				
ANR	1559137	OrExpression	reg_odd < 0 || reg_even < 0		1559078	0		||			
ANR	1559138	RelationalExpression	reg_odd < 0		1559078	0		<			
ANR	1559139	Identifier	reg_odd		1559078	0					
ANR	1559140	PrimaryExpression	0		1559078	1					
ANR	1559141	RelationalExpression	reg_even < 0		1559078	1		<			
ANR	1559142	Identifier	reg_even		1559078	0					
ANR	1559143	PrimaryExpression	0		1559078	1					
ANR	1559144	ReturnStatement	return ( NULL ) ;	1928:4:70603:70616	1559078	1	True				
ANR	1559145	Identifier	NULL		1559078	0					
ANR	1559146	IfStatement	if ( reg_odd % 2 != 1 )		1559078	5					
ANR	1559147	Condition	reg_odd % 2 != 1	1931:6:70670:70685	1559078	0	True				
ANR	1559148	EqualityExpression	reg_odd % 2 != 1		1559078	0		!=			
ANR	1559149	MultiplicativeExpression	reg_odd % 2		1559078	0		%			
ANR	1559150	Identifier	reg_odd		1559078	0					
ANR	1559151	PrimaryExpression	2		1559078	1					
ANR	1559152	PrimaryExpression	1		1559078	1					
ANR	1559153	CompoundStatement		12:4:371:371	1559078	1					
ANR	1559154	IfStatement	if ( errmsg )		1559078	0					
ANR	1559155	Condition	errmsg	1933:10:70704:70709	1559078	0	True				
ANR	1559156	Identifier	errmsg		1559078	0					
ANR	1559157	CompoundStatement		15:19:420:434	1559078	1					
ANR	1559158	Statement	static	1935:12:70734:70739	1559078	0	True				
ANR	1559159	IdentifierDeclStatement	char buf [ 100 ] ;	1935:19:70741:70755	1559078	1	True				
ANR	1559160	IdentifierDecl	buf [ 100 ]		1559078	0					
ANR	1559161	IdentifierDeclType	char [ 100 ]		1559078	0					
ANR	1559162	Identifier	buf		1559078	1					
ANR	1559163	PrimaryExpression	100		1559078	2					
ANR	1559164	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	1936:12:70769:70826	1559078	2	True				
ANR	1559165	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1559078	0					
ANR	1559166	Callee	sprintf		1559078	0					
ANR	1559167	Identifier	sprintf		1559078	0					
ANR	1559168	ArgumentList	buf		1559078	1					
ANR	1559169	Argument	buf		1559078	0					
ANR	1559170	Identifier	buf		1559078	0					
ANR	1559171	Argument	"""invalid odd register number: %d"""		1559078	1					
ANR	1559172	PrimaryExpression	"""invalid odd register number: %d"""		1559078	0					
ANR	1559173	Argument	reg_odd		1559078	2					
ANR	1559174	Identifier	reg_odd		1559078	0					
ANR	1559175	ExpressionStatement	* errmsg = buf	1937:12:70840:70853	1559078	3	True				
ANR	1559176	AssignmentExpression	* errmsg = buf		1559078	0		=			
ANR	1559177	UnaryOperationExpression	* errmsg		1559078	0					
ANR	1559178	UnaryOperator	*		1559078	0					
ANR	1559179	Identifier	errmsg		1559078	1					
ANR	1559180	Identifier	buf		1559078	1					
ANR	1559181	ReturnStatement	return ( NULL ) ;	1939:6:70871:70884	1559078	1	True				
ANR	1559182	Identifier	NULL		1559078	0					
ANR	1559183	IfStatement	if ( reg_even % 2 != 0 )		1559078	6					
ANR	1559184	Condition	reg_even % 2 != 0	1943:6:70945:70961	1559078	0	True				
ANR	1559185	EqualityExpression	reg_even % 2 != 0		1559078	0		!=			
ANR	1559186	MultiplicativeExpression	reg_even % 2		1559078	0		%			
ANR	1559187	Identifier	reg_even		1559078	0					
ANR	1559188	PrimaryExpression	2		1559078	1					
ANR	1559189	PrimaryExpression	0		1559078	1					
ANR	1559190	CompoundStatement		24:4:647:647	1559078	1					
ANR	1559191	IfStatement	if ( errmsg )		1559078	0					
ANR	1559192	Condition	errmsg	1945:10:70980:70985	1559078	0	True				
ANR	1559193	Identifier	errmsg		1559078	0					
ANR	1559194	CompoundStatement		27:19:696:710	1559078	1					
ANR	1559195	Statement	static	1947:12:71010:71015	1559078	0	True				
ANR	1559196	IdentifierDeclStatement	char buf [ 100 ] ;	1947:19:71017:71031	1559078	1	True				
ANR	1559197	IdentifierDecl	buf [ 100 ]		1559078	0					
ANR	1559198	IdentifierDeclType	char [ 100 ]		1559078	0					
ANR	1559199	Identifier	buf		1559078	1					
ANR	1559200	PrimaryExpression	100		1559078	2					
ANR	1559201	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	1948:12:71045:71104	1559078	2	True				
ANR	1559202	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1559078	0					
ANR	1559203	Callee	sprintf		1559078	0					
ANR	1559204	Identifier	sprintf		1559078	0					
ANR	1559205	ArgumentList	buf		1559078	1					
ANR	1559206	Argument	buf		1559078	0					
ANR	1559207	Identifier	buf		1559078	0					
ANR	1559208	Argument	"""invalid even register number: %d"""		1559078	1					
ANR	1559209	PrimaryExpression	"""invalid even register number: %d"""		1559078	0					
ANR	1559210	Argument	reg_even		1559078	2					
ANR	1559211	Identifier	reg_even		1559078	0					
ANR	1559212	ExpressionStatement	* errmsg = buf	1949:12:71118:71131	1559078	3	True				
ANR	1559213	AssignmentExpression	* errmsg = buf		1559078	0		=			
ANR	1559214	UnaryOperationExpression	* errmsg		1559078	0					
ANR	1559215	UnaryOperator	*		1559078	0					
ANR	1559216	Identifier	errmsg		1559078	1					
ANR	1559217	Identifier	buf		1559078	1					
ANR	1559218	ReturnStatement	return ( NULL ) ;	1951:6:71149:71162	1559078	1	True				
ANR	1559219	Identifier	NULL		1559078	0					
ANR	1559220	IfStatement	if ( reg_odd != reg_even + 1 )		1559078	7					
ANR	1559221	Condition	reg_odd != reg_even + 1	1955:6:71225:71247	1559078	0	True				
ANR	1559222	EqualityExpression	reg_odd != reg_even + 1		1559078	0		!=			
ANR	1559223	Identifier	reg_odd		1559078	0					
ANR	1559224	AdditiveExpression	reg_even + 1		1559078	1		+			
ANR	1559225	Identifier	reg_even		1559078	0					
ANR	1559226	PrimaryExpression	1		1559078	1					
ANR	1559227	CompoundStatement		36:4:933:933	1559078	1					
ANR	1559228	IfStatement	if ( errmsg )		1559078	0					
ANR	1559229	Condition	errmsg	1957:10:71266:71271	1559078	0	True				
ANR	1559230	Identifier	errmsg		1559078	0					
ANR	1559231	CompoundStatement		39:19:982:996	1559078	1					
ANR	1559232	Statement	static	1959:12:71296:71301	1559078	0	True				
ANR	1559233	IdentifierDeclStatement	char buf [ 100 ] ;	1959:19:71303:71317	1559078	1	True				
ANR	1559234	IdentifierDecl	buf [ 100 ]		1559078	0					
ANR	1559235	IdentifierDeclType	char [ 100 ]		1559078	0					
ANR	1559236	Identifier	buf		1559078	1					
ANR	1559237	PrimaryExpression	100		1559078	2					
ANR	1559238	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	1960:12:71331:71425	1559078	2	True				
ANR	1559239	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1559078	0					
ANR	1559240	Callee	sprintf		1559078	0					
ANR	1559241	Identifier	sprintf		1559078	0					
ANR	1559242	ArgumentList	buf		1559078	1					
ANR	1559243	Argument	buf		1559078	0					
ANR	1559244	Identifier	buf		1559078	0					
ANR	1559245	Argument	"""registers must be consecutive: %d:%d"""		1559078	1					
ANR	1559246	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1559078	0					
ANR	1559247	Argument	reg_odd		1559078	2					
ANR	1559248	Identifier	reg_odd		1559078	0					
ANR	1559249	Argument	reg_even		1559078	3					
ANR	1559250	Identifier	reg_even		1559078	0					
ANR	1559251	ExpressionStatement	* errmsg = buf	1962:12:71439:71452	1559078	3	True				
ANR	1559252	AssignmentExpression	* errmsg = buf		1559078	0		=			
ANR	1559253	UnaryOperationExpression	* errmsg		1559078	0					
ANR	1559254	UnaryOperator	*		1559078	0					
ANR	1559255	Identifier	errmsg		1559078	1					
ANR	1559256	Identifier	buf		1559078	1					
ANR	1559257	ReturnStatement	return ( NULL ) ;	1964:6:71470:71483	1559078	1	True				
ANR	1559258	Identifier	NULL		1559078	0					
ANR	1559259	IfStatement	if ( ( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) ) )		1559078	8					
ANR	1559260	Condition	( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) )	1967:6:71498:71573	1559078	0	True				
ANR	1559261	OrExpression	( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) )		1559078	0		||			
ANR	1559262	OrExpression	reg_odd < 1 || reg_odd > 31		1559078	0		||			
ANR	1559263	RelationalExpression	reg_odd < 1		1559078	0		<			
ANR	1559264	Identifier	reg_odd		1559078	0					
ANR	1559265	PrimaryExpression	1		1559078	1					
ANR	1559266	RelationalExpression	reg_odd > 31		1559078	1		>			
ANR	1559267	Identifier	reg_odd		1559078	0					
ANR	1559268	PrimaryExpression	31		1559078	1					
ANR	1559269	OrExpression	reg_even < 0 || reg_even > 30		1559078	1		||			
ANR	1559270	RelationalExpression	reg_even < 0		1559078	0		<			
ANR	1559271	Identifier	reg_even		1559078	0					
ANR	1559272	PrimaryExpression	0		1559078	1					
ANR	1559273	RelationalExpression	reg_even > 30		1559078	1		>			
ANR	1559274	Identifier	reg_even		1559078	0					
ANR	1559275	PrimaryExpression	30		1559078	1					
ANR	1559276	ReturnStatement	return ( NULL ) ;	1969:4:71580:71593	1559078	1	True				
ANR	1559277	Identifier	NULL		1559078	0					
ANR	1559278	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1559078	9					
ANR	1559279	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	1971:6:71602:71693	1559078	0	True				
ANR	1559280	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1559078	0					
ANR	1559281	Callee	hexagon_encode_operand		1559078	0					
ANR	1559282	Identifier	hexagon_encode_operand		1559078	0					
ANR	1559283	ArgumentList	operand		1559078	1					
ANR	1559284	Argument	operand		1559078	0					
ANR	1559285	Identifier	operand		1559078	0					
ANR	1559286	Argument	insn		1559078	1					
ANR	1559287	Identifier	insn		1559078	0					
ANR	1559288	Argument	opcode		1559078	2					
ANR	1559289	Identifier	opcode		1559078	0					
ANR	1559290	Argument	reg_even		1559078	3					
ANR	1559291	Identifier	reg_even		1559078	0					
ANR	1559292	Argument	NULL		1559078	4					
ANR	1559293	Identifier	NULL		1559078	0					
ANR	1559294	Argument	FALSE		1559078	5					
ANR	1559295	Identifier	FALSE		1559078	0					
ANR	1559296	Argument	FALSE		1559078	6					
ANR	1559297	Identifier	FALSE		1559078	0					
ANR	1559298	Argument	errmsg		1559078	7					
ANR	1559299	Identifier	errmsg		1559078	0					
ANR	1559300	CompoundStatement		53:4:1379:1379	1559078	1					
ANR	1559301	IfStatement	if ( flag )		1559078	0					
ANR	1559302	Condition	flag	1974:10:71712:71715	1559078	0	True				
ANR	1559303	Identifier	flag		1559078	0					
ANR	1559304	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	1975:8:71726:71757	1559078	1	True				
ANR	1559305	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		1559078	0		=			
ANR	1559306	UnaryOperationExpression	* flag		1559078	0					
ANR	1559307	UnaryOperator	*		1559078	0					
ANR	1559308	Identifier	flag		1559078	1					
ANR	1559309	Identifier	HEXAGON_OPERAND_IS_PAIR		1559078	1					
ANR	1559310	ExpressionStatement	* val = reg_even	1977:6:71766:71781	1559078	1	True				
ANR	1559311	AssignmentExpression	* val = reg_even		1559078	0		=			
ANR	1559312	UnaryOperationExpression	* val		1559078	0					
ANR	1559313	UnaryOperator	*		1559078	0					
ANR	1559314	Identifier	val		1559078	1					
ANR	1559315	Identifier	reg_even		1559078	1					
ANR	1559316	ReturnStatement	return ( input ) ;	1978:6:71789:71803	1559078	2	True				
ANR	1559317	Identifier	input		1559078	0					
ANR	1559318	ReturnStatement	return ( NULL ) ;	1981:2:71814:71827	1559078	10	True				
ANR	1559319	Identifier	NULL		1559078	0					
ANR	1559320	ReturnType	static char *		1559078	1					
ANR	1559321	Identifier	hexagon_parse_dreg16		1559078	2					
ANR	1559322	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1559078	3					
ANR	1559323	Parameter	const hexagon_operand * operand	1919:1:70187:70216	1559078	0	True				
ANR	1559324	ParameterType	const hexagon_operand *		1559078	0					
ANR	1559325	Identifier	operand		1559078	1					
ANR	1559326	Parameter	hexagon_insn * insn	1919:33:70219:70236	1559078	1	True				
ANR	1559327	ParameterType	hexagon_insn *		1559078	0					
ANR	1559328	Identifier	insn		1559078	1					
ANR	1559329	Parameter	const hexagon_opcode * opcode	1919:53:70239:70266	1559078	2	True				
ANR	1559330	ParameterType	const hexagon_opcode *		1559078	0					
ANR	1559331	Identifier	opcode		1559078	1					
ANR	1559332	Parameter	char * input	1920:1:70270:70280	1559078	3	True				
ANR	1559333	ParameterType	char *		1559078	0					
ANR	1559334	Identifier	input		1559078	1					
ANR	1559335	Parameter	long * val	1920:14:70283:70291	1559078	4	True				
ANR	1559336	ParameterType	long *		1559078	0					
ANR	1559337	Identifier	val		1559078	1					
ANR	1559338	Parameter	int * flag	1920:25:70294:70302	1559078	5	True				
ANR	1559339	ParameterType	int *		1559078	0					
ANR	1559340	Identifier	flag		1559078	1					
ANR	1559341	Parameter	char * * errmsg	1920:36:70305:70317	1559078	6	True				
ANR	1559342	ParameterType	char * *		1559078	0					
ANR	1559343	Identifier	errmsg		1559078	1					
ANR	1559344	CFGEntryNode	ENTRY		1559078		True				
ANR	1559345	CFGExitNode	EXIT		1559078		True				
ANR	1559346	Symbol	val		1559078						
ANR	1559347	Symbol	flag		1559078						
ANR	1559348	Symbol	NULL		1559078						
ANR	1559349	Symbol	errmsg		1559078						
ANR	1559350	Symbol	* val		1559078						
ANR	1559351	Symbol	opcode		1559078						
ANR	1559352	Symbol	reg_even		1559078						
ANR	1559353	Symbol	insn		1559078						
ANR	1559354	Symbol	input		1559078						
ANR	1559355	Symbol	buf		1559078						
ANR	1559356	Symbol	& input		1559078						
ANR	1559357	Symbol	hexagon_gp_regs		1559078						
ANR	1559358	Symbol	hexagon_encode_operand		1559078						
ANR	1559359	Symbol	hexagon_reg_num		1559078						
ANR	1559360	Symbol	FALSE		1559078						
ANR	1559361	Symbol	reg_odd		1559078						
ANR	1559362	Symbol	hexagon_gp_regs_count		1559078						
ANR	1559363	Symbol	* errmsg		1559078						
ANR	1559364	Symbol	* flag		1559078						
ANR	1559365	Symbol	HEXAGON_OPERAND_IS_PAIR		1559078						
ANR	1559366	Symbol	operand		1559078						
ANR	1559367	Function	hexagon_parse_dreg8	1984:0:71832:73580							
ANR	1559368	FunctionDef	"hexagon_parse_dreg8 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1559367	0					
ANR	1559369	CompoundStatement		1988:0:72000:73580	1559367	0					
ANR	1559370	IdentifierDeclStatement	int reg_odd ;	1989:2:72004:72015	1559367	0	True				
ANR	1559371	IdentifierDecl	reg_odd		1559367	0					
ANR	1559372	IdentifierDeclType	int		1559367	0					
ANR	1559373	Identifier	reg_odd		1559367	1					
ANR	1559374	IdentifierDeclStatement	int reg_even ;	1990:2:72019:72031	1559367	1	True				
ANR	1559375	IdentifierDecl	reg_even		1559367	0					
ANR	1559376	IdentifierDeclType	int		1559367	0					
ANR	1559377	Identifier	reg_even		1559367	1					
ANR	1559378	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1992:2:72036:72137	1559367	2	True				
ANR	1559379	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559367	0		=			
ANR	1559380	Identifier	reg_odd		1559367	0					
ANR	1559381	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559367	1					
ANR	1559382	Callee	hexagon_reg_num		1559367	0					
ANR	1559383	Identifier	hexagon_reg_num		1559367	0					
ANR	1559384	ArgumentList	operand		1559367	1					
ANR	1559385	Argument	operand		1559367	0					
ANR	1559386	Identifier	operand		1559367	0					
ANR	1559387	Argument	& input		1559367	1					
ANR	1559388	UnaryOperationExpression	& input		1559367	0					
ANR	1559389	UnaryOperator	&		1559367	0					
ANR	1559390	Identifier	input		1559367	1					
ANR	1559391	Argument	'r'		1559367	2					
ANR	1559392	PrimaryExpression	'r'		1559367	0					
ANR	1559393	Argument	hexagon_gp_regs		1559367	3					
ANR	1559394	Identifier	hexagon_gp_regs		1559367	0					
ANR	1559395	Argument	hexagon_gp_regs_count		1559367	4					
ANR	1559396	Identifier	hexagon_gp_regs_count		1559367	0					
ANR	1559397	Argument	NULL		1559367	5					
ANR	1559398	Identifier	NULL		1559367	0					
ANR	1559399	Argument	'\\0'		1559367	6					
ANR	1559400	PrimaryExpression	'\\0'		1559367	0					
ANR	1559401	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1993:2:72141:72242	1559367	3	True				
ANR	1559402	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559367	0		=			
ANR	1559403	Identifier	reg_even		1559367	0					
ANR	1559404	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559367	1					
ANR	1559405	Callee	hexagon_reg_num		1559367	0					
ANR	1559406	Identifier	hexagon_reg_num		1559367	0					
ANR	1559407	ArgumentList	operand		1559367	1					
ANR	1559408	Argument	operand		1559367	0					
ANR	1559409	Identifier	operand		1559367	0					
ANR	1559410	Argument	& input		1559367	1					
ANR	1559411	UnaryOperationExpression	& input		1559367	0					
ANR	1559412	UnaryOperator	&		1559367	0					
ANR	1559413	Identifier	input		1559367	1					
ANR	1559414	Argument	':'		1559367	2					
ANR	1559415	PrimaryExpression	':'		1559367	0					
ANR	1559416	Argument	hexagon_gp_regs		1559367	3					
ANR	1559417	Identifier	hexagon_gp_regs		1559367	0					
ANR	1559418	Argument	hexagon_gp_regs_count		1559367	4					
ANR	1559419	Identifier	hexagon_gp_regs_count		1559367	0					
ANR	1559420	Argument	NULL		1559367	5					
ANR	1559421	Identifier	NULL		1559367	0					
ANR	1559422	Argument	'\\0'		1559367	6					
ANR	1559423	PrimaryExpression	'\\0'		1559367	0					
ANR	1559424	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1559367	4					
ANR	1559425	Condition	reg_odd < 0 || reg_even < 0	1994:6:72250:72276	1559367	0	True				
ANR	1559426	OrExpression	reg_odd < 0 || reg_even < 0		1559367	0		||			
ANR	1559427	RelationalExpression	reg_odd < 0		1559367	0		<			
ANR	1559428	Identifier	reg_odd		1559367	0					
ANR	1559429	PrimaryExpression	0		1559367	1					
ANR	1559430	RelationalExpression	reg_even < 0		1559367	1		<			
ANR	1559431	Identifier	reg_even		1559367	0					
ANR	1559432	PrimaryExpression	0		1559367	1					
ANR	1559433	ReturnStatement	return ( NULL ) ;	1995:4:72283:72296	1559367	1	True				
ANR	1559434	Identifier	NULL		1559367	0					
ANR	1559435	IfStatement	if ( reg_odd % 2 != 1 )		1559367	5					
ANR	1559436	Condition	reg_odd % 2 != 1	1998:6:72350:72365	1559367	0	True				
ANR	1559437	EqualityExpression	reg_odd % 2 != 1		1559367	0		!=			
ANR	1559438	MultiplicativeExpression	reg_odd % 2		1559367	0		%			
ANR	1559439	Identifier	reg_odd		1559367	0					
ANR	1559440	PrimaryExpression	2		1559367	1					
ANR	1559441	PrimaryExpression	1		1559367	1					
ANR	1559442	CompoundStatement		12:4:371:371	1559367	1					
ANR	1559443	IfStatement	if ( errmsg )		1559367	0					
ANR	1559444	Condition	errmsg	2000:10:72384:72389	1559367	0	True				
ANR	1559445	Identifier	errmsg		1559367	0					
ANR	1559446	CompoundStatement		15:19:420:434	1559367	1					
ANR	1559447	Statement	static	2002:12:72414:72419	1559367	0	True				
ANR	1559448	IdentifierDeclStatement	char buf [ 100 ] ;	2002:19:72421:72435	1559367	1	True				
ANR	1559449	IdentifierDecl	buf [ 100 ]		1559367	0					
ANR	1559450	IdentifierDeclType	char [ 100 ]		1559367	0					
ANR	1559451	Identifier	buf		1559367	1					
ANR	1559452	PrimaryExpression	100		1559367	2					
ANR	1559453	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2003:12:72449:72506	1559367	2	True				
ANR	1559454	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1559367	0					
ANR	1559455	Callee	sprintf		1559367	0					
ANR	1559456	Identifier	sprintf		1559367	0					
ANR	1559457	ArgumentList	buf		1559367	1					
ANR	1559458	Argument	buf		1559367	0					
ANR	1559459	Identifier	buf		1559367	0					
ANR	1559460	Argument	"""invalid odd register number: %d"""		1559367	1					
ANR	1559461	PrimaryExpression	"""invalid odd register number: %d"""		1559367	0					
ANR	1559462	Argument	reg_odd		1559367	2					
ANR	1559463	Identifier	reg_odd		1559367	0					
ANR	1559464	ExpressionStatement	* errmsg = buf	2004:12:72520:72533	1559367	3	True				
ANR	1559465	AssignmentExpression	* errmsg = buf		1559367	0		=			
ANR	1559466	UnaryOperationExpression	* errmsg		1559367	0					
ANR	1559467	UnaryOperator	*		1559367	0					
ANR	1559468	Identifier	errmsg		1559367	1					
ANR	1559469	Identifier	buf		1559367	1					
ANR	1559470	ReturnStatement	return ( NULL ) ;	2006:6:72551:72564	1559367	1	True				
ANR	1559471	Identifier	NULL		1559367	0					
ANR	1559472	IfStatement	if ( reg_even % 2 != 0 )		1559367	6					
ANR	1559473	Condition	reg_even % 2 != 0	2010:6:72625:72641	1559367	0	True				
ANR	1559474	EqualityExpression	reg_even % 2 != 0		1559367	0		!=			
ANR	1559475	MultiplicativeExpression	reg_even % 2		1559367	0		%			
ANR	1559476	Identifier	reg_even		1559367	0					
ANR	1559477	PrimaryExpression	2		1559367	1					
ANR	1559478	PrimaryExpression	0		1559367	1					
ANR	1559479	CompoundStatement		24:4:647:647	1559367	1					
ANR	1559480	IfStatement	if ( errmsg )		1559367	0					
ANR	1559481	Condition	errmsg	2012:10:72660:72665	1559367	0	True				
ANR	1559482	Identifier	errmsg		1559367	0					
ANR	1559483	CompoundStatement		27:19:696:710	1559367	1					
ANR	1559484	Statement	static	2014:12:72690:72695	1559367	0	True				
ANR	1559485	IdentifierDeclStatement	char buf [ 100 ] ;	2014:19:72697:72711	1559367	1	True				
ANR	1559486	IdentifierDecl	buf [ 100 ]		1559367	0					
ANR	1559487	IdentifierDeclType	char [ 100 ]		1559367	0					
ANR	1559488	Identifier	buf		1559367	1					
ANR	1559489	PrimaryExpression	100		1559367	2					
ANR	1559490	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2015:12:72725:72784	1559367	2	True				
ANR	1559491	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1559367	0					
ANR	1559492	Callee	sprintf		1559367	0					
ANR	1559493	Identifier	sprintf		1559367	0					
ANR	1559494	ArgumentList	buf		1559367	1					
ANR	1559495	Argument	buf		1559367	0					
ANR	1559496	Identifier	buf		1559367	0					
ANR	1559497	Argument	"""invalid even register number: %d"""		1559367	1					
ANR	1559498	PrimaryExpression	"""invalid even register number: %d"""		1559367	0					
ANR	1559499	Argument	reg_even		1559367	2					
ANR	1559500	Identifier	reg_even		1559367	0					
ANR	1559501	ExpressionStatement	* errmsg = buf	2016:12:72798:72811	1559367	3	True				
ANR	1559502	AssignmentExpression	* errmsg = buf		1559367	0		=			
ANR	1559503	UnaryOperationExpression	* errmsg		1559367	0					
ANR	1559504	UnaryOperator	*		1559367	0					
ANR	1559505	Identifier	errmsg		1559367	1					
ANR	1559506	Identifier	buf		1559367	1					
ANR	1559507	ReturnStatement	return ( NULL ) ;	2018:6:72829:72842	1559367	1	True				
ANR	1559508	Identifier	NULL		1559367	0					
ANR	1559509	IfStatement	if ( reg_odd != reg_even + 1 )		1559367	7					
ANR	1559510	Condition	reg_odd != reg_even + 1	2022:6:72905:72927	1559367	0	True				
ANR	1559511	EqualityExpression	reg_odd != reg_even + 1		1559367	0		!=			
ANR	1559512	Identifier	reg_odd		1559367	0					
ANR	1559513	AdditiveExpression	reg_even + 1		1559367	1		+			
ANR	1559514	Identifier	reg_even		1559367	0					
ANR	1559515	PrimaryExpression	1		1559367	1					
ANR	1559516	CompoundStatement		36:4:933:933	1559367	1					
ANR	1559517	IfStatement	if ( errmsg )		1559367	0					
ANR	1559518	Condition	errmsg	2024:10:72946:72951	1559367	0	True				
ANR	1559519	Identifier	errmsg		1559367	0					
ANR	1559520	CompoundStatement		39:19:982:996	1559367	1					
ANR	1559521	Statement	static	2026:12:72976:72981	1559367	0	True				
ANR	1559522	IdentifierDeclStatement	char buf [ 100 ] ;	2026:19:72983:72997	1559367	1	True				
ANR	1559523	IdentifierDecl	buf [ 100 ]		1559367	0					
ANR	1559524	IdentifierDeclType	char [ 100 ]		1559367	0					
ANR	1559525	Identifier	buf		1559367	1					
ANR	1559526	PrimaryExpression	100		1559367	2					
ANR	1559527	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2027:12:73011:73105	1559367	2	True				
ANR	1559528	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1559367	0					
ANR	1559529	Callee	sprintf		1559367	0					
ANR	1559530	Identifier	sprintf		1559367	0					
ANR	1559531	ArgumentList	buf		1559367	1					
ANR	1559532	Argument	buf		1559367	0					
ANR	1559533	Identifier	buf		1559367	0					
ANR	1559534	Argument	"""registers must be consecutive: %d:%d"""		1559367	1					
ANR	1559535	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1559367	0					
ANR	1559536	Argument	reg_odd		1559367	2					
ANR	1559537	Identifier	reg_odd		1559367	0					
ANR	1559538	Argument	reg_even		1559367	3					
ANR	1559539	Identifier	reg_even		1559367	0					
ANR	1559540	ExpressionStatement	* errmsg = buf	2029:12:73119:73132	1559367	3	True				
ANR	1559541	AssignmentExpression	* errmsg = buf		1559367	0		=			
ANR	1559542	UnaryOperationExpression	* errmsg		1559367	0					
ANR	1559543	UnaryOperator	*		1559367	0					
ANR	1559544	Identifier	errmsg		1559367	1					
ANR	1559545	Identifier	buf		1559367	1					
ANR	1559546	ReturnStatement	return ( NULL ) ;	2031:6:73150:73163	1559367	1	True				
ANR	1559547	Identifier	NULL		1559367	0					
ANR	1559548	IfStatement	if ( ( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) ) )		1559367	8					
ANR	1559549	Condition	( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) )	2034:6:73178:73324	1559367	0	True				
ANR	1559550	OrExpression	( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) )		1559367	0		||			
ANR	1559551	AndExpression	( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 )		1559367	0		&&			
ANR	1559552	OrExpression	reg_odd < 1 || reg_odd > 7		1559367	0		||			
ANR	1559553	RelationalExpression	reg_odd < 1		1559367	0		<			
ANR	1559554	Identifier	reg_odd		1559367	0					
ANR	1559555	PrimaryExpression	1		1559367	1					
ANR	1559556	RelationalExpression	reg_odd > 7		1559367	1		>			
ANR	1559557	Identifier	reg_odd		1559367	0					
ANR	1559558	PrimaryExpression	7		1559367	1					
ANR	1559559	OrExpression	reg_odd < 17 || reg_odd > 23		1559367	1		||			
ANR	1559560	RelationalExpression	reg_odd < 17		1559367	0		<			
ANR	1559561	Identifier	reg_odd		1559367	0					
ANR	1559562	PrimaryExpression	17		1559367	1					
ANR	1559563	RelationalExpression	reg_odd > 23		1559367	1		>			
ANR	1559564	Identifier	reg_odd		1559367	0					
ANR	1559565	PrimaryExpression	23		1559367	1					
ANR	1559566	AndExpression	( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 )		1559367	1		&&			
ANR	1559567	RelationalExpression	reg_even > 6		1559367	0		>			
ANR	1559568	Identifier	reg_even		1559367	0					
ANR	1559569	PrimaryExpression	6		1559367	1					
ANR	1559570	OrExpression	reg_even < 16 || reg_even > 22		1559367	1		||			
ANR	1559571	RelationalExpression	reg_even < 16		1559367	0		<			
ANR	1559572	Identifier	reg_even		1559367	0					
ANR	1559573	PrimaryExpression	16		1559367	1					
ANR	1559574	RelationalExpression	reg_even > 22		1559367	1		>			
ANR	1559575	Identifier	reg_even		1559367	0					
ANR	1559576	PrimaryExpression	22		1559367	1					
ANR	1559577	ReturnStatement	return ( NULL ) ;	2038:4:73331:73344	1559367	1	True				
ANR	1559578	Identifier	NULL		1559367	0					
ANR	1559579	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1559367	9					
ANR	1559580	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2040:6:73353:73444	1559367	0	True				
ANR	1559581	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1559367	0					
ANR	1559582	Callee	hexagon_encode_operand		1559367	0					
ANR	1559583	Identifier	hexagon_encode_operand		1559367	0					
ANR	1559584	ArgumentList	operand		1559367	1					
ANR	1559585	Argument	operand		1559367	0					
ANR	1559586	Identifier	operand		1559367	0					
ANR	1559587	Argument	insn		1559367	1					
ANR	1559588	Identifier	insn		1559367	0					
ANR	1559589	Argument	opcode		1559367	2					
ANR	1559590	Identifier	opcode		1559367	0					
ANR	1559591	Argument	reg_even		1559367	3					
ANR	1559592	Identifier	reg_even		1559367	0					
ANR	1559593	Argument	NULL		1559367	4					
ANR	1559594	Identifier	NULL		1559367	0					
ANR	1559595	Argument	FALSE		1559367	5					
ANR	1559596	Identifier	FALSE		1559367	0					
ANR	1559597	Argument	FALSE		1559367	6					
ANR	1559598	Identifier	FALSE		1559367	0					
ANR	1559599	Argument	errmsg		1559367	7					
ANR	1559600	Identifier	errmsg		1559367	0					
ANR	1559601	CompoundStatement		55:4:1450:1450	1559367	1					
ANR	1559602	IfStatement	if ( flag )		1559367	0					
ANR	1559603	Condition	flag	2043:10:73463:73466	1559367	0	True				
ANR	1559604	Identifier	flag		1559367	0					
ANR	1559605	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	2044:8:73477:73508	1559367	1	True				
ANR	1559606	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		1559367	0		=			
ANR	1559607	UnaryOperationExpression	* flag		1559367	0					
ANR	1559608	UnaryOperator	*		1559367	0					
ANR	1559609	Identifier	flag		1559367	1					
ANR	1559610	Identifier	HEXAGON_OPERAND_IS_PAIR		1559367	1					
ANR	1559611	ExpressionStatement	* val = reg_even	2046:6:73517:73532	1559367	1	True				
ANR	1559612	AssignmentExpression	* val = reg_even		1559367	0		=			
ANR	1559613	UnaryOperationExpression	* val		1559367	0					
ANR	1559614	UnaryOperator	*		1559367	0					
ANR	1559615	Identifier	val		1559367	1					
ANR	1559616	Identifier	reg_even		1559367	1					
ANR	1559617	ReturnStatement	return ( input ) ;	2047:6:73540:73554	1559367	2	True				
ANR	1559618	Identifier	input		1559367	0					
ANR	1559619	ReturnStatement	return ( NULL ) ;	2050:2:73565:73578	1559367	10	True				
ANR	1559620	Identifier	NULL		1559367	0					
ANR	1559621	ReturnType	static char *		1559367	1					
ANR	1559622	Identifier	hexagon_parse_dreg8		1559367	2					
ANR	1559623	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1559367	3					
ANR	1559624	Parameter	const hexagon_operand * operand	1986:1:71867:71896	1559367	0	True				
ANR	1559625	ParameterType	const hexagon_operand *		1559367	0					
ANR	1559626	Identifier	operand		1559367	1					
ANR	1559627	Parameter	hexagon_insn * insn	1986:33:71899:71916	1559367	1	True				
ANR	1559628	ParameterType	hexagon_insn *		1559367	0					
ANR	1559629	Identifier	insn		1559367	1					
ANR	1559630	Parameter	const hexagon_opcode * opcode	1986:53:71919:71946	1559367	2	True				
ANR	1559631	ParameterType	const hexagon_opcode *		1559367	0					
ANR	1559632	Identifier	opcode		1559367	1					
ANR	1559633	Parameter	char * input	1987:1:71950:71960	1559367	3	True				
ANR	1559634	ParameterType	char *		1559367	0					
ANR	1559635	Identifier	input		1559367	1					
ANR	1559636	Parameter	long * val	1987:14:71963:71971	1559367	4	True				
ANR	1559637	ParameterType	long *		1559367	0					
ANR	1559638	Identifier	val		1559367	1					
ANR	1559639	Parameter	int * flag	1987:25:71974:71982	1559367	5	True				
ANR	1559640	ParameterType	int *		1559367	0					
ANR	1559641	Identifier	flag		1559367	1					
ANR	1559642	Parameter	char * * errmsg	1987:36:71985:71997	1559367	6	True				
ANR	1559643	ParameterType	char * *		1559367	0					
ANR	1559644	Identifier	errmsg		1559367	1					
ANR	1559645	CFGEntryNode	ENTRY		1559367		True				
ANR	1559646	CFGExitNode	EXIT		1559367		True				
ANR	1559647	Symbol	val		1559367						
ANR	1559648	Symbol	flag		1559367						
ANR	1559649	Symbol	NULL		1559367						
ANR	1559650	Symbol	errmsg		1559367						
ANR	1559651	Symbol	* val		1559367						
ANR	1559652	Symbol	opcode		1559367						
ANR	1559653	Symbol	reg_even		1559367						
ANR	1559654	Symbol	insn		1559367						
ANR	1559655	Symbol	input		1559367						
ANR	1559656	Symbol	buf		1559367						
ANR	1559657	Symbol	& input		1559367						
ANR	1559658	Symbol	hexagon_gp_regs		1559367						
ANR	1559659	Symbol	hexagon_encode_operand		1559367						
ANR	1559660	Symbol	hexagon_reg_num		1559367						
ANR	1559661	Symbol	FALSE		1559367						
ANR	1559662	Symbol	reg_odd		1559367						
ANR	1559663	Symbol	hexagon_gp_regs_count		1559367						
ANR	1559664	Symbol	* errmsg		1559367						
ANR	1559665	Symbol	* flag		1559367						
ANR	1559666	Symbol	HEXAGON_OPERAND_IS_PAIR		1559367						
ANR	1559667	Symbol	operand		1559367						
ANR	1559668	Function	hexagon_parse_reg	2053:0:73583:74118							
ANR	1559669	FunctionDef	"hexagon_parse_reg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1559668	0					
ANR	1559670	CompoundStatement		2057:0:73742:74118	1559668	0					
ANR	1559671	IdentifierDeclStatement	int reg ;	2058:2:73746:73753	1559668	0	True				
ANR	1559672	IdentifierDecl	reg		1559668	0					
ANR	1559673	IdentifierDeclType	int		1559668	0					
ANR	1559674	Identifier	reg		1559668	1					
ANR	1559675	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2060:2:73758:73854	1559668	1	True				
ANR	1559676	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559668	0		=			
ANR	1559677	Identifier	reg		1559668	0					
ANR	1559678	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559668	1					
ANR	1559679	Callee	hexagon_reg_num		1559668	0					
ANR	1559680	Identifier	hexagon_reg_num		1559668	0					
ANR	1559681	ArgumentList	operand		1559668	1					
ANR	1559682	Argument	operand		1559668	0					
ANR	1559683	Identifier	operand		1559668	0					
ANR	1559684	Argument	& input		1559668	1					
ANR	1559685	UnaryOperationExpression	& input		1559668	0					
ANR	1559686	UnaryOperator	&		1559668	0					
ANR	1559687	Identifier	input		1559668	1					
ANR	1559688	Argument	'r'		1559668	2					
ANR	1559689	PrimaryExpression	'r'		1559668	0					
ANR	1559690	Argument	hexagon_gp_regs		1559668	3					
ANR	1559691	Identifier	hexagon_gp_regs		1559668	0					
ANR	1559692	Argument	hexagon_gp_regs_count		1559668	4					
ANR	1559693	Identifier	hexagon_gp_regs_count		1559668	0					
ANR	1559694	Argument	NULL		1559668	5					
ANR	1559695	Identifier	NULL		1559668	0					
ANR	1559696	Argument	'\\0'		1559668	6					
ANR	1559697	PrimaryExpression	'\\0'		1559668	0					
ANR	1559698	IfStatement	if ( reg < 0 )		1559668	2					
ANR	1559699	Condition	reg < 0	2061:6:73862:73868	1559668	0	True				
ANR	1559700	RelationalExpression	reg < 0		1559668	0		<			
ANR	1559701	Identifier	reg		1559668	0					
ANR	1559702	PrimaryExpression	0		1559668	1					
ANR	1559703	ReturnStatement	return ( NULL ) ;	2062:4:73875:73888	1559668	1	True				
ANR	1559704	Identifier	NULL		1559668	0					
ANR	1559705	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1559668	3					
ANR	1559706	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2064:6:73897:73983	1559668	0	True				
ANR	1559707	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1559668	0					
ANR	1559708	Callee	hexagon_encode_operand		1559668	0					
ANR	1559709	Identifier	hexagon_encode_operand		1559668	0					
ANR	1559710	ArgumentList	operand		1559668	1					
ANR	1559711	Argument	operand		1559668	0					
ANR	1559712	Identifier	operand		1559668	0					
ANR	1559713	Argument	insn		1559668	1					
ANR	1559714	Identifier	insn		1559668	0					
ANR	1559715	Argument	opcode		1559668	2					
ANR	1559716	Identifier	opcode		1559668	0					
ANR	1559717	Argument	reg		1559668	3					
ANR	1559718	Identifier	reg		1559668	0					
ANR	1559719	Argument	NULL		1559668	4					
ANR	1559720	Identifier	NULL		1559668	0					
ANR	1559721	Argument	FALSE		1559668	5					
ANR	1559722	Identifier	FALSE		1559668	0					
ANR	1559723	Argument	FALSE		1559668	6					
ANR	1559724	Identifier	FALSE		1559668	0					
ANR	1559725	Argument	errmsg		1559668	7					
ANR	1559726	Identifier	errmsg		1559668	0					
ANR	1559727	CompoundStatement		10:4:247:247	1559668	1					
ANR	1559728	IfStatement	if ( flag )		1559668	0					
ANR	1559729	Condition	flag	2067:10:74002:74005	1559668	0	True				
ANR	1559730	Identifier	flag		1559668	0					
ANR	1559731	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2068:8:74016:74051	1559668	1	True				
ANR	1559732	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		1559668	0		=			
ANR	1559733	UnaryOperationExpression	* flag		1559668	0					
ANR	1559734	UnaryOperator	*		1559668	0					
ANR	1559735	Identifier	flag		1559668	1					
ANR	1559736	Identifier	HEXAGON_OPERAND_IS_REGISTER		1559668	1					
ANR	1559737	ExpressionStatement	* val = reg	2070:6:74060:74070	1559668	1	True				
ANR	1559738	AssignmentExpression	* val = reg		1559668	0		=			
ANR	1559739	UnaryOperationExpression	* val		1559668	0					
ANR	1559740	UnaryOperator	*		1559668	0					
ANR	1559741	Identifier	val		1559668	1					
ANR	1559742	Identifier	reg		1559668	1					
ANR	1559743	ReturnStatement	return ( input ) ;	2071:6:74078:74092	1559668	2	True				
ANR	1559744	Identifier	input		1559668	0					
ANR	1559745	ReturnStatement	return ( NULL ) ;	2074:2:74103:74116	1559668	4	True				
ANR	1559746	Identifier	NULL		1559668	0					
ANR	1559747	ReturnType	char *		1559668	1					
ANR	1559748	Identifier	hexagon_parse_reg		1559668	2					
ANR	1559749	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1559668	3					
ANR	1559750	Parameter	const hexagon_operand * operand	2055:1:73609:73638	1559668	0	True				
ANR	1559751	ParameterType	const hexagon_operand *		1559668	0					
ANR	1559752	Identifier	operand		1559668	1					
ANR	1559753	Parameter	hexagon_insn * insn	2055:33:73641:73658	1559668	1	True				
ANR	1559754	ParameterType	hexagon_insn *		1559668	0					
ANR	1559755	Identifier	insn		1559668	1					
ANR	1559756	Parameter	const hexagon_opcode * opcode	2055:53:73661:73688	1559668	2	True				
ANR	1559757	ParameterType	const hexagon_opcode *		1559668	0					
ANR	1559758	Identifier	opcode		1559668	1					
ANR	1559759	Parameter	char * input	2056:1:73692:73702	1559668	3	True				
ANR	1559760	ParameterType	char *		1559668	0					
ANR	1559761	Identifier	input		1559668	1					
ANR	1559762	Parameter	long * val	2056:14:73705:73713	1559668	4	True				
ANR	1559763	ParameterType	long *		1559668	0					
ANR	1559764	Identifier	val		1559668	1					
ANR	1559765	Parameter	int * flag	2056:25:73716:73724	1559668	5	True				
ANR	1559766	ParameterType	int *		1559668	0					
ANR	1559767	Identifier	flag		1559668	1					
ANR	1559768	Parameter	char * * errmsg	2056:36:73727:73739	1559668	6	True				
ANR	1559769	ParameterType	char * *		1559668	0					
ANR	1559770	Identifier	errmsg		1559668	1					
ANR	1559771	CFGEntryNode	ENTRY		1559668		True				
ANR	1559772	CFGExitNode	EXIT		1559668		True				
ANR	1559773	Symbol	val		1559668						
ANR	1559774	Symbol	flag		1559668						
ANR	1559775	Symbol	NULL		1559668						
ANR	1559776	Symbol	errmsg		1559668						
ANR	1559777	Symbol	* val		1559668						
ANR	1559778	Symbol	opcode		1559668						
ANR	1559779	Symbol	HEXAGON_OPERAND_IS_REGISTER		1559668						
ANR	1559780	Symbol	insn		1559668						
ANR	1559781	Symbol	input		1559668						
ANR	1559782	Symbol	& input		1559668						
ANR	1559783	Symbol	hexagon_gp_regs		1559668						
ANR	1559784	Symbol	hexagon_encode_operand		1559668						
ANR	1559785	Symbol	reg		1559668						
ANR	1559786	Symbol	hexagon_reg_num		1559668						
ANR	1559787	Symbol	FALSE		1559668						
ANR	1559788	Symbol	hexagon_gp_regs_count		1559668						
ANR	1559789	Symbol	* flag		1559668						
ANR	1559790	Symbol	operand		1559668						
ANR	1559791	Function	hexagon_parse_reg16	2077:0:74121:74721							
ANR	1559792	FunctionDef	"hexagon_parse_reg16 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1559791	0					
ANR	1559793	CompoundStatement		2081:0:74282:74721	1559791	0					
ANR	1559794	IdentifierDeclStatement	int reg ;	2082:2:74286:74293	1559791	0	True				
ANR	1559795	IdentifierDecl	reg		1559791	0					
ANR	1559796	IdentifierDeclType	int		1559791	0					
ANR	1559797	Identifier	reg		1559791	1					
ANR	1559798	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2084:2:74298:74394	1559791	1	True				
ANR	1559799	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559791	0		=			
ANR	1559800	Identifier	reg		1559791	0					
ANR	1559801	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559791	1					
ANR	1559802	Callee	hexagon_reg_num		1559791	0					
ANR	1559803	Identifier	hexagon_reg_num		1559791	0					
ANR	1559804	ArgumentList	operand		1559791	1					
ANR	1559805	Argument	operand		1559791	0					
ANR	1559806	Identifier	operand		1559791	0					
ANR	1559807	Argument	& input		1559791	1					
ANR	1559808	UnaryOperationExpression	& input		1559791	0					
ANR	1559809	UnaryOperator	&		1559791	0					
ANR	1559810	Identifier	input		1559791	1					
ANR	1559811	Argument	'r'		1559791	2					
ANR	1559812	PrimaryExpression	'r'		1559791	0					
ANR	1559813	Argument	hexagon_gp_regs		1559791	3					
ANR	1559814	Identifier	hexagon_gp_regs		1559791	0					
ANR	1559815	Argument	hexagon_gp_regs_count		1559791	4					
ANR	1559816	Identifier	hexagon_gp_regs_count		1559791	0					
ANR	1559817	Argument	NULL		1559791	5					
ANR	1559818	Identifier	NULL		1559791	0					
ANR	1559819	Argument	'\\0'		1559791	6					
ANR	1559820	PrimaryExpression	'\\0'		1559791	0					
ANR	1559821	IfStatement	if ( reg < 0 )		1559791	2					
ANR	1559822	Condition	reg < 0	2085:6:74402:74408	1559791	0	True				
ANR	1559823	RelationalExpression	reg < 0		1559791	0		<			
ANR	1559824	Identifier	reg		1559791	0					
ANR	1559825	PrimaryExpression	0		1559791	1					
ANR	1559826	ReturnStatement	return ( NULL ) ;	2086:4:74415:74428	1559791	1	True				
ANR	1559827	Identifier	NULL		1559791	0					
ANR	1559828	IfStatement	if ( ( reg > 7 ) && ( reg < 16 || reg > 23 ) )		1559791	3					
ANR	1559829	Condition	( reg > 7 ) && ( reg < 16 || reg > 23 )	2088:6:74437:74471	1559791	0	True				
ANR	1559830	AndExpression	( reg > 7 ) && ( reg < 16 || reg > 23 )		1559791	0		&&			
ANR	1559831	RelationalExpression	reg > 7		1559791	0		>			
ANR	1559832	Identifier	reg		1559791	0					
ANR	1559833	PrimaryExpression	7		1559791	1					
ANR	1559834	OrExpression	reg < 16 || reg > 23		1559791	1		||			
ANR	1559835	RelationalExpression	reg < 16		1559791	0		<			
ANR	1559836	Identifier	reg		1559791	0					
ANR	1559837	PrimaryExpression	16		1559791	1					
ANR	1559838	RelationalExpression	reg > 23		1559791	1		>			
ANR	1559839	Identifier	reg		1559791	0					
ANR	1559840	PrimaryExpression	23		1559791	1					
ANR	1559841	ReturnStatement	return ( NULL ) ;	2089:4:74478:74491	1559791	1	True				
ANR	1559842	Identifier	NULL		1559791	0					
ANR	1559843	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1559791	4					
ANR	1559844	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2091:6:74500:74586	1559791	0	True				
ANR	1559845	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1559791	0					
ANR	1559846	Callee	hexagon_encode_operand		1559791	0					
ANR	1559847	Identifier	hexagon_encode_operand		1559791	0					
ANR	1559848	ArgumentList	operand		1559791	1					
ANR	1559849	Argument	operand		1559791	0					
ANR	1559850	Identifier	operand		1559791	0					
ANR	1559851	Argument	insn		1559791	1					
ANR	1559852	Identifier	insn		1559791	0					
ANR	1559853	Argument	opcode		1559791	2					
ANR	1559854	Identifier	opcode		1559791	0					
ANR	1559855	Argument	reg		1559791	3					
ANR	1559856	Identifier	reg		1559791	0					
ANR	1559857	Argument	NULL		1559791	4					
ANR	1559858	Identifier	NULL		1559791	0					
ANR	1559859	Argument	FALSE		1559791	5					
ANR	1559860	Identifier	FALSE		1559791	0					
ANR	1559861	Argument	FALSE		1559791	6					
ANR	1559862	Identifier	FALSE		1559791	0					
ANR	1559863	Argument	errmsg		1559791	7					
ANR	1559864	Identifier	errmsg		1559791	0					
ANR	1559865	CompoundStatement		13:4:310:310	1559791	1					
ANR	1559866	IfStatement	if ( flag )		1559791	0					
ANR	1559867	Condition	flag	2094:10:74605:74608	1559791	0	True				
ANR	1559868	Identifier	flag		1559791	0					
ANR	1559869	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2095:8:74619:74654	1559791	1	True				
ANR	1559870	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		1559791	0		=			
ANR	1559871	UnaryOperationExpression	* flag		1559791	0					
ANR	1559872	UnaryOperator	*		1559791	0					
ANR	1559873	Identifier	flag		1559791	1					
ANR	1559874	Identifier	HEXAGON_OPERAND_IS_REGISTER		1559791	1					
ANR	1559875	ExpressionStatement	* val = reg	2097:6:74663:74673	1559791	1	True				
ANR	1559876	AssignmentExpression	* val = reg		1559791	0		=			
ANR	1559877	UnaryOperationExpression	* val		1559791	0					
ANR	1559878	UnaryOperator	*		1559791	0					
ANR	1559879	Identifier	val		1559791	1					
ANR	1559880	Identifier	reg		1559791	1					
ANR	1559881	ReturnStatement	return ( input ) ;	2098:6:74681:74695	1559791	2	True				
ANR	1559882	Identifier	input		1559791	0					
ANR	1559883	ReturnStatement	return ( NULL ) ;	2101:2:74706:74719	1559791	5	True				
ANR	1559884	Identifier	NULL		1559791	0					
ANR	1559885	ReturnType	char *		1559791	1					
ANR	1559886	Identifier	hexagon_parse_reg16		1559791	2					
ANR	1559887	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1559791	3					
ANR	1559888	Parameter	const hexagon_operand * operand	2079:1:74149:74178	1559791	0	True				
ANR	1559889	ParameterType	const hexagon_operand *		1559791	0					
ANR	1559890	Identifier	operand		1559791	1					
ANR	1559891	Parameter	hexagon_insn * insn	2079:33:74181:74198	1559791	1	True				
ANR	1559892	ParameterType	hexagon_insn *		1559791	0					
ANR	1559893	Identifier	insn		1559791	1					
ANR	1559894	Parameter	const hexagon_opcode * opcode	2079:53:74201:74228	1559791	2	True				
ANR	1559895	ParameterType	const hexagon_opcode *		1559791	0					
ANR	1559896	Identifier	opcode		1559791	1					
ANR	1559897	Parameter	char * input	2080:1:74232:74242	1559791	3	True				
ANR	1559898	ParameterType	char *		1559791	0					
ANR	1559899	Identifier	input		1559791	1					
ANR	1559900	Parameter	long * val	2080:14:74245:74253	1559791	4	True				
ANR	1559901	ParameterType	long *		1559791	0					
ANR	1559902	Identifier	val		1559791	1					
ANR	1559903	Parameter	int * flag	2080:25:74256:74264	1559791	5	True				
ANR	1559904	ParameterType	int *		1559791	0					
ANR	1559905	Identifier	flag		1559791	1					
ANR	1559906	Parameter	char * * errmsg	2080:36:74267:74279	1559791	6	True				
ANR	1559907	ParameterType	char * *		1559791	0					
ANR	1559908	Identifier	errmsg		1559791	1					
ANR	1559909	CFGEntryNode	ENTRY		1559791		True				
ANR	1559910	CFGExitNode	EXIT		1559791		True				
ANR	1559911	Symbol	val		1559791						
ANR	1559912	Symbol	flag		1559791						
ANR	1559913	Symbol	NULL		1559791						
ANR	1559914	Symbol	errmsg		1559791						
ANR	1559915	Symbol	* val		1559791						
ANR	1559916	Symbol	opcode		1559791						
ANR	1559917	Symbol	HEXAGON_OPERAND_IS_REGISTER		1559791						
ANR	1559918	Symbol	insn		1559791						
ANR	1559919	Symbol	input		1559791						
ANR	1559920	Symbol	& input		1559791						
ANR	1559921	Symbol	hexagon_gp_regs		1559791						
ANR	1559922	Symbol	hexagon_encode_operand		1559791						
ANR	1559923	Symbol	reg		1559791						
ANR	1559924	Symbol	hexagon_reg_num		1559791						
ANR	1559925	Symbol	FALSE		1559791						
ANR	1559926	Symbol	hexagon_gp_regs_count		1559791						
ANR	1559927	Symbol	* flag		1559791						
ANR	1559928	Symbol	operand		1559791						
ANR	1559929	Function	hexagon_parse_reg8	2104:0:74724:75323							
ANR	1559930	FunctionDef	"hexagon_parse_reg8 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1559929	0					
ANR	1559931	CompoundStatement		2108:0:74884:75323	1559929	0					
ANR	1559932	IdentifierDeclStatement	int reg ;	2109:2:74888:74895	1559929	0	True				
ANR	1559933	IdentifierDecl	reg		1559929	0					
ANR	1559934	IdentifierDeclType	int		1559929	0					
ANR	1559935	Identifier	reg		1559929	1					
ANR	1559936	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2111:2:74900:74996	1559929	1	True				
ANR	1559937	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559929	0		=			
ANR	1559938	Identifier	reg		1559929	0					
ANR	1559939	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1559929	1					
ANR	1559940	Callee	hexagon_reg_num		1559929	0					
ANR	1559941	Identifier	hexagon_reg_num		1559929	0					
ANR	1559942	ArgumentList	operand		1559929	1					
ANR	1559943	Argument	operand		1559929	0					
ANR	1559944	Identifier	operand		1559929	0					
ANR	1559945	Argument	& input		1559929	1					
ANR	1559946	UnaryOperationExpression	& input		1559929	0					
ANR	1559947	UnaryOperator	&		1559929	0					
ANR	1559948	Identifier	input		1559929	1					
ANR	1559949	Argument	'r'		1559929	2					
ANR	1559950	PrimaryExpression	'r'		1559929	0					
ANR	1559951	Argument	hexagon_gp_regs		1559929	3					
ANR	1559952	Identifier	hexagon_gp_regs		1559929	0					
ANR	1559953	Argument	hexagon_gp_regs_count		1559929	4					
ANR	1559954	Identifier	hexagon_gp_regs_count		1559929	0					
ANR	1559955	Argument	NULL		1559929	5					
ANR	1559956	Identifier	NULL		1559929	0					
ANR	1559957	Argument	'\\0'		1559929	6					
ANR	1559958	PrimaryExpression	'\\0'		1559929	0					
ANR	1559959	IfStatement	if ( reg < 0 )		1559929	2					
ANR	1559960	Condition	reg < 0	2112:6:75004:75010	1559929	0	True				
ANR	1559961	RelationalExpression	reg < 0		1559929	0		<			
ANR	1559962	Identifier	reg		1559929	0					
ANR	1559963	PrimaryExpression	0		1559929	1					
ANR	1559964	ReturnStatement	return ( NULL ) ;	2113:4:75017:75030	1559929	1	True				
ANR	1559965	Identifier	NULL		1559929	0					
ANR	1559966	IfStatement	if ( ( reg > 3 ) && ( reg < 16 || reg > 19 ) )		1559929	3					
ANR	1559967	Condition	( reg > 3 ) && ( reg < 16 || reg > 19 )	2115:6:75039:75073	1559929	0	True				
ANR	1559968	AndExpression	( reg > 3 ) && ( reg < 16 || reg > 19 )		1559929	0		&&			
ANR	1559969	RelationalExpression	reg > 3		1559929	0		>			
ANR	1559970	Identifier	reg		1559929	0					
ANR	1559971	PrimaryExpression	3		1559929	1					
ANR	1559972	OrExpression	reg < 16 || reg > 19		1559929	1		||			
ANR	1559973	RelationalExpression	reg < 16		1559929	0		<			
ANR	1559974	Identifier	reg		1559929	0					
ANR	1559975	PrimaryExpression	16		1559929	1					
ANR	1559976	RelationalExpression	reg > 19		1559929	1		>			
ANR	1559977	Identifier	reg		1559929	0					
ANR	1559978	PrimaryExpression	19		1559929	1					
ANR	1559979	ReturnStatement	return ( NULL ) ;	2116:4:75080:75093	1559929	1	True				
ANR	1559980	Identifier	NULL		1559929	0					
ANR	1559981	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1559929	4					
ANR	1559982	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2118:6:75102:75188	1559929	0	True				
ANR	1559983	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1559929	0					
ANR	1559984	Callee	hexagon_encode_operand		1559929	0					
ANR	1559985	Identifier	hexagon_encode_operand		1559929	0					
ANR	1559986	ArgumentList	operand		1559929	1					
ANR	1559987	Argument	operand		1559929	0					
ANR	1559988	Identifier	operand		1559929	0					
ANR	1559989	Argument	insn		1559929	1					
ANR	1559990	Identifier	insn		1559929	0					
ANR	1559991	Argument	opcode		1559929	2					
ANR	1559992	Identifier	opcode		1559929	0					
ANR	1559993	Argument	reg		1559929	3					
ANR	1559994	Identifier	reg		1559929	0					
ANR	1559995	Argument	NULL		1559929	4					
ANR	1559996	Identifier	NULL		1559929	0					
ANR	1559997	Argument	FALSE		1559929	5					
ANR	1559998	Identifier	FALSE		1559929	0					
ANR	1559999	Argument	FALSE		1559929	6					
ANR	1560000	Identifier	FALSE		1559929	0					
ANR	1560001	Argument	errmsg		1559929	7					
ANR	1560002	Identifier	errmsg		1559929	0					
ANR	1560003	CompoundStatement		13:4:310:310	1559929	1					
ANR	1560004	IfStatement	if ( flag )		1559929	0					
ANR	1560005	Condition	flag	2121:10:75207:75210	1559929	0	True				
ANR	1560006	Identifier	flag		1559929	0					
ANR	1560007	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2122:8:75221:75256	1559929	1	True				
ANR	1560008	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		1559929	0		=			
ANR	1560009	UnaryOperationExpression	* flag		1559929	0					
ANR	1560010	UnaryOperator	*		1559929	0					
ANR	1560011	Identifier	flag		1559929	1					
ANR	1560012	Identifier	HEXAGON_OPERAND_IS_REGISTER		1559929	1					
ANR	1560013	ExpressionStatement	* val = reg	2124:6:75265:75275	1559929	1	True				
ANR	1560014	AssignmentExpression	* val = reg		1559929	0		=			
ANR	1560015	UnaryOperationExpression	* val		1559929	0					
ANR	1560016	UnaryOperator	*		1559929	0					
ANR	1560017	Identifier	val		1559929	1					
ANR	1560018	Identifier	reg		1559929	1					
ANR	1560019	ReturnStatement	return ( input ) ;	2125:6:75283:75297	1559929	2	True				
ANR	1560020	Identifier	input		1559929	0					
ANR	1560021	ReturnStatement	return ( NULL ) ;	2128:2:75308:75321	1559929	5	True				
ANR	1560022	Identifier	NULL		1559929	0					
ANR	1560023	ReturnType	char *		1559929	1					
ANR	1560024	Identifier	hexagon_parse_reg8		1559929	2					
ANR	1560025	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1559929	3					
ANR	1560026	Parameter	const hexagon_operand * operand	2106:1:74751:74780	1559929	0	True				
ANR	1560027	ParameterType	const hexagon_operand *		1559929	0					
ANR	1560028	Identifier	operand		1559929	1					
ANR	1560029	Parameter	hexagon_insn * insn	2106:33:74783:74800	1559929	1	True				
ANR	1560030	ParameterType	hexagon_insn *		1559929	0					
ANR	1560031	Identifier	insn		1559929	1					
ANR	1560032	Parameter	const hexagon_opcode * opcode	2106:53:74803:74830	1559929	2	True				
ANR	1560033	ParameterType	const hexagon_opcode *		1559929	0					
ANR	1560034	Identifier	opcode		1559929	1					
ANR	1560035	Parameter	char * input	2107:1:74834:74844	1559929	3	True				
ANR	1560036	ParameterType	char *		1559929	0					
ANR	1560037	Identifier	input		1559929	1					
ANR	1560038	Parameter	long * val	2107:14:74847:74855	1559929	4	True				
ANR	1560039	ParameterType	long *		1559929	0					
ANR	1560040	Identifier	val		1559929	1					
ANR	1560041	Parameter	int * flag	2107:25:74858:74866	1559929	5	True				
ANR	1560042	ParameterType	int *		1559929	0					
ANR	1560043	Identifier	flag		1559929	1					
ANR	1560044	Parameter	char * * errmsg	2107:36:74869:74881	1559929	6	True				
ANR	1560045	ParameterType	char * *		1559929	0					
ANR	1560046	Identifier	errmsg		1559929	1					
ANR	1560047	CFGEntryNode	ENTRY		1559929		True				
ANR	1560048	CFGExitNode	EXIT		1559929		True				
ANR	1560049	Symbol	val		1559929						
ANR	1560050	Symbol	flag		1559929						
ANR	1560051	Symbol	NULL		1559929						
ANR	1560052	Symbol	errmsg		1559929						
ANR	1560053	Symbol	* val		1559929						
ANR	1560054	Symbol	opcode		1559929						
ANR	1560055	Symbol	HEXAGON_OPERAND_IS_REGISTER		1559929						
ANR	1560056	Symbol	insn		1559929						
ANR	1560057	Symbol	input		1559929						
ANR	1560058	Symbol	& input		1559929						
ANR	1560059	Symbol	hexagon_gp_regs		1559929						
ANR	1560060	Symbol	hexagon_encode_operand		1559929						
ANR	1560061	Symbol	reg		1559929						
ANR	1560062	Symbol	hexagon_reg_num		1559929						
ANR	1560063	Symbol	FALSE		1559929						
ANR	1560064	Symbol	hexagon_gp_regs_count		1559929						
ANR	1560065	Symbol	* flag		1559929						
ANR	1560066	Symbol	operand		1559929						
ANR	1560067	Function	hexagon_parse_nreg	2131:0:75326:75874							
ANR	1560068	FunctionDef	"hexagon_parse_nreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560067	0					
ANR	1560069	CompoundStatement		2135:0:75486:75874	1560067	0					
ANR	1560070	IdentifierDeclStatement	int reg ;	2136:2:75490:75497	1560067	0	True				
ANR	1560071	IdentifierDecl	reg		1560067	0					
ANR	1560072	IdentifierDeclType	int		1560067	0					
ANR	1560073	Identifier	reg		1560067	1					
ANR	1560074	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2138:2:75502:75598	1560067	1	True				
ANR	1560075	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560067	0		=			
ANR	1560076	Identifier	reg		1560067	0					
ANR	1560077	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560067	1					
ANR	1560078	Callee	hexagon_reg_num		1560067	0					
ANR	1560079	Identifier	hexagon_reg_num		1560067	0					
ANR	1560080	ArgumentList	operand		1560067	1					
ANR	1560081	Argument	operand		1560067	0					
ANR	1560082	Identifier	operand		1560067	0					
ANR	1560083	Argument	& input		1560067	1					
ANR	1560084	UnaryOperationExpression	& input		1560067	0					
ANR	1560085	UnaryOperator	&		1560067	0					
ANR	1560086	Identifier	input		1560067	1					
ANR	1560087	Argument	'r'		1560067	2					
ANR	1560088	PrimaryExpression	'r'		1560067	0					
ANR	1560089	Argument	hexagon_gp_regs		1560067	3					
ANR	1560090	Identifier	hexagon_gp_regs		1560067	0					
ANR	1560091	Argument	hexagon_gp_regs_count		1560067	4					
ANR	1560092	Identifier	hexagon_gp_regs_count		1560067	0					
ANR	1560093	Argument	NULL		1560067	5					
ANR	1560094	Identifier	NULL		1560067	0					
ANR	1560095	Argument	'\\0'		1560067	6					
ANR	1560096	PrimaryExpression	'\\0'		1560067	0					
ANR	1560097	IfStatement	if ( reg < 0 || reg > 31 )		1560067	2					
ANR	1560098	Condition	reg < 0 || reg > 31	2139:6:75606:75624	1560067	0	True				
ANR	1560099	OrExpression	reg < 0 || reg > 31		1560067	0		||			
ANR	1560100	RelationalExpression	reg < 0		1560067	0		<			
ANR	1560101	Identifier	reg		1560067	0					
ANR	1560102	PrimaryExpression	0		1560067	1					
ANR	1560103	RelationalExpression	reg > 31		1560067	1		>			
ANR	1560104	Identifier	reg		1560067	0					
ANR	1560105	PrimaryExpression	31		1560067	1					
ANR	1560106	ReturnStatement	return ( NULL ) ;	2140:4:75631:75644	1560067	1	True				
ANR	1560107	Identifier	NULL		1560067	0					
ANR	1560108	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg ) )"		1560067	3					
ANR	1560109	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg )"	2142:6:75653:75743	1560067	0	True				
ANR	1560110	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg )"		1560067	0					
ANR	1560111	Callee	hexagon_encode_operand		1560067	0					
ANR	1560112	Identifier	hexagon_encode_operand		1560067	0					
ANR	1560113	ArgumentList	operand		1560067	1					
ANR	1560114	Argument	operand		1560067	0					
ANR	1560115	Identifier	operand		1560067	0					
ANR	1560116	Argument	insn		1560067	1					
ANR	1560117	Identifier	insn		1560067	0					
ANR	1560118	Argument	opcode		1560067	2					
ANR	1560119	Identifier	opcode		1560067	0					
ANR	1560120	Argument	reg % 2		1560067	3					
ANR	1560121	MultiplicativeExpression	reg % 2		1560067	0		%			
ANR	1560122	Identifier	reg		1560067	0					
ANR	1560123	PrimaryExpression	2		1560067	1					
ANR	1560124	Argument	NULL		1560067	4					
ANR	1560125	Identifier	NULL		1560067	0					
ANR	1560126	Argument	FALSE		1560067	5					
ANR	1560127	Identifier	FALSE		1560067	0					
ANR	1560128	Argument	FALSE		1560067	6					
ANR	1560129	Identifier	FALSE		1560067	0					
ANR	1560130	Argument	errmsg		1560067	7					
ANR	1560131	Identifier	errmsg		1560067	0					
ANR	1560132	CompoundStatement		10:4:263:263	1560067	1					
ANR	1560133	IfStatement	if ( flag )		1560067	0					
ANR	1560134	Condition	flag	2145:10:75762:75765	1560067	0	True				
ANR	1560135	Identifier	flag		1560067	0					
ANR	1560136	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_RNEW	2146:8:75776:75807	1560067	1	True				
ANR	1560137	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_RNEW		1560067	0		=			
ANR	1560138	UnaryOperationExpression	* flag		1560067	0					
ANR	1560139	UnaryOperator	*		1560067	0					
ANR	1560140	Identifier	flag		1560067	1					
ANR	1560141	Identifier	HEXAGON_OPERAND_IS_RNEW		1560067	1					
ANR	1560142	ExpressionStatement	* val = reg	2148:6:75816:75826	1560067	1	True				
ANR	1560143	AssignmentExpression	* val = reg		1560067	0		=			
ANR	1560144	UnaryOperationExpression	* val		1560067	0					
ANR	1560145	UnaryOperator	*		1560067	0					
ANR	1560146	Identifier	val		1560067	1					
ANR	1560147	Identifier	reg		1560067	1					
ANR	1560148	ReturnStatement	return ( input ) ;	2149:6:75834:75848	1560067	2	True				
ANR	1560149	Identifier	input		1560067	0					
ANR	1560150	ReturnStatement	return ( NULL ) ;	2152:2:75859:75872	1560067	4	True				
ANR	1560151	Identifier	NULL		1560067	0					
ANR	1560152	ReturnType	char *		1560067	1					
ANR	1560153	Identifier	hexagon_parse_nreg		1560067	2					
ANR	1560154	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560067	3					
ANR	1560155	Parameter	const hexagon_operand * operand	2133:1:75353:75382	1560067	0	True				
ANR	1560156	ParameterType	const hexagon_operand *		1560067	0					
ANR	1560157	Identifier	operand		1560067	1					
ANR	1560158	Parameter	hexagon_insn * insn	2133:33:75385:75402	1560067	1	True				
ANR	1560159	ParameterType	hexagon_insn *		1560067	0					
ANR	1560160	Identifier	insn		1560067	1					
ANR	1560161	Parameter	const hexagon_opcode * opcode	2133:53:75405:75432	1560067	2	True				
ANR	1560162	ParameterType	const hexagon_opcode *		1560067	0					
ANR	1560163	Identifier	opcode		1560067	1					
ANR	1560164	Parameter	char * input	2134:1:75436:75446	1560067	3	True				
ANR	1560165	ParameterType	char *		1560067	0					
ANR	1560166	Identifier	input		1560067	1					
ANR	1560167	Parameter	long * val	2134:14:75449:75457	1560067	4	True				
ANR	1560168	ParameterType	long *		1560067	0					
ANR	1560169	Identifier	val		1560067	1					
ANR	1560170	Parameter	int * flag	2134:25:75460:75468	1560067	5	True				
ANR	1560171	ParameterType	int *		1560067	0					
ANR	1560172	Identifier	flag		1560067	1					
ANR	1560173	Parameter	char * * errmsg	2134:36:75471:75483	1560067	6	True				
ANR	1560174	ParameterType	char * *		1560067	0					
ANR	1560175	Identifier	errmsg		1560067	1					
ANR	1560176	CFGEntryNode	ENTRY		1560067		True				
ANR	1560177	CFGExitNode	EXIT		1560067		True				
ANR	1560178	Symbol	val		1560067						
ANR	1560179	Symbol	flag		1560067						
ANR	1560180	Symbol	NULL		1560067						
ANR	1560181	Symbol	HEXAGON_OPERAND_IS_RNEW		1560067						
ANR	1560182	Symbol	errmsg		1560067						
ANR	1560183	Symbol	* val		1560067						
ANR	1560184	Symbol	opcode		1560067						
ANR	1560185	Symbol	insn		1560067						
ANR	1560186	Symbol	input		1560067						
ANR	1560187	Symbol	& input		1560067						
ANR	1560188	Symbol	hexagon_gp_regs		1560067						
ANR	1560189	Symbol	hexagon_encode_operand		1560067						
ANR	1560190	Symbol	reg		1560067						
ANR	1560191	Symbol	hexagon_reg_num		1560067						
ANR	1560192	Symbol	FALSE		1560067						
ANR	1560193	Symbol	hexagon_gp_regs_count		1560067						
ANR	1560194	Symbol	* flag		1560067						
ANR	1560195	Symbol	operand		1560067						
ANR	1560196	Function	hexagon_parse_splr	2155:0:75877:76573							
ANR	1560197	FunctionDef	"hexagon_parse_splr (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560196	0					
ANR	1560198	CompoundStatement		2159:0:76037:76573	1560196	0					
ANR	1560199	IdentifierDeclStatement	int reg ;	2160:2:76041:76048	1560196	0	True				
ANR	1560200	IdentifierDecl	reg		1560196	0					
ANR	1560201	IdentifierDeclType	int		1560196	0					
ANR	1560202	Identifier	reg		1560196	1					
ANR	1560203	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2162:2:76053:76159	1560196	1	True				
ANR	1560204	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560196	0		=			
ANR	1560205	Identifier	reg		1560196	0					
ANR	1560206	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560196	1					
ANR	1560207	Callee	hexagon_reg_num		1560196	0					
ANR	1560208	Identifier	hexagon_reg_num		1560196	0					
ANR	1560209	ArgumentList	operand		1560196	1					
ANR	1560210	Argument	operand		1560196	0					
ANR	1560211	Identifier	operand		1560196	0					
ANR	1560212	Argument	& input		1560196	1					
ANR	1560213	UnaryOperationExpression	& input		1560196	0					
ANR	1560214	UnaryOperator	&		1560196	0					
ANR	1560215	Identifier	input		1560196	1					
ANR	1560216	Argument	'r'		1560196	2					
ANR	1560217	PrimaryExpression	'r'		1560196	0					
ANR	1560218	Argument	hexagon_gp_regs		1560196	3					
ANR	1560219	Identifier	hexagon_gp_regs		1560196	0					
ANR	1560220	Argument	hexagon_gp_regs_count		1560196	4					
ANR	1560221	Identifier	hexagon_gp_regs_count		1560196	0					
ANR	1560222	Argument	NULL		1560196	5					
ANR	1560223	Identifier	NULL		1560196	0					
ANR	1560224	Argument	'\\0'		1560196	6					
ANR	1560225	PrimaryExpression	'\\0'		1560196	0					
ANR	1560226	IfStatement	if ( reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 ) )		1560196	2					
ANR	1560227	Condition	reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )	2164:6:76167:76323	1560196	0	True				
ANR	1560228	OrExpression	reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )		1560196	0		||			
ANR	1560229	RelationalExpression	reg < 0		1560196	0		<			
ANR	1560230	Identifier	reg		1560196	0					
ANR	1560231	PrimaryExpression	0		1560196	1					
ANR	1560232	OrExpression	( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )		1560196	1		||			
ANR	1560233	AndExpression	operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29		1560196	0		&&			
ANR	1560234	EqualityExpression	operand -> fmt [ 0 ] == 'S'		1560196	0		==			
ANR	1560235	ArrayIndexing	operand -> fmt [ 0 ]		1560196	0					
ANR	1560236	PtrMemberAccess	operand -> fmt		1560196	0					
ANR	1560237	Identifier	operand		1560196	0					
ANR	1560238	Identifier	fmt		1560196	1					
ANR	1560239	PrimaryExpression	0		1560196	1					
ANR	1560240	PrimaryExpression	'S'		1560196	1					
ANR	1560241	AndExpression	operand -> fmt [ 1 ] == 'p' && reg != 29		1560196	1		&&			
ANR	1560242	EqualityExpression	operand -> fmt [ 1 ] == 'p'		1560196	0		==			
ANR	1560243	ArrayIndexing	operand -> fmt [ 1 ]		1560196	0					
ANR	1560244	PtrMemberAccess	operand -> fmt		1560196	0					
ANR	1560245	Identifier	operand		1560196	0					
ANR	1560246	Identifier	fmt		1560196	1					
ANR	1560247	PrimaryExpression	1		1560196	1					
ANR	1560248	PrimaryExpression	'p'		1560196	1					
ANR	1560249	EqualityExpression	reg != 29		1560196	1		!=			
ANR	1560250	Identifier	reg		1560196	0					
ANR	1560251	PrimaryExpression	29		1560196	1					
ANR	1560252	AndExpression	operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31		1560196	1		&&			
ANR	1560253	EqualityExpression	operand -> fmt [ 0 ] == 'L'		1560196	0		==			
ANR	1560254	ArrayIndexing	operand -> fmt [ 0 ]		1560196	0					
ANR	1560255	PtrMemberAccess	operand -> fmt		1560196	0					
ANR	1560256	Identifier	operand		1560196	0					
ANR	1560257	Identifier	fmt		1560196	1					
ANR	1560258	PrimaryExpression	0		1560196	1					
ANR	1560259	PrimaryExpression	'L'		1560196	1					
ANR	1560260	AndExpression	operand -> fmt [ 1 ] == 'r' && reg != 31		1560196	1		&&			
ANR	1560261	EqualityExpression	operand -> fmt [ 1 ] == 'r'		1560196	0		==			
ANR	1560262	ArrayIndexing	operand -> fmt [ 1 ]		1560196	0					
ANR	1560263	PtrMemberAccess	operand -> fmt		1560196	0					
ANR	1560264	Identifier	operand		1560196	0					
ANR	1560265	Identifier	fmt		1560196	1					
ANR	1560266	PrimaryExpression	1		1560196	1					
ANR	1560267	PrimaryExpression	'r'		1560196	1					
ANR	1560268	EqualityExpression	reg != 31		1560196	1		!=			
ANR	1560269	Identifier	reg		1560196	0					
ANR	1560270	PrimaryExpression	31		1560196	1					
ANR	1560271	ReturnStatement	return ( NULL ) ;	2167:4:76330:76343	1560196	1	True				
ANR	1560272	Identifier	NULL		1560196	0					
ANR	1560273	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1560196	3					
ANR	1560274	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2169:6:76352:76438	1560196	0	True				
ANR	1560275	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1560196	0					
ANR	1560276	Callee	hexagon_encode_operand		1560196	0					
ANR	1560277	Identifier	hexagon_encode_operand		1560196	0					
ANR	1560278	ArgumentList	operand		1560196	1					
ANR	1560279	Argument	operand		1560196	0					
ANR	1560280	Identifier	operand		1560196	0					
ANR	1560281	Argument	insn		1560196	1					
ANR	1560282	Identifier	insn		1560196	0					
ANR	1560283	Argument	opcode		1560196	2					
ANR	1560284	Identifier	opcode		1560196	0					
ANR	1560285	Argument	reg		1560196	3					
ANR	1560286	Identifier	reg		1560196	0					
ANR	1560287	Argument	NULL		1560196	4					
ANR	1560288	Identifier	NULL		1560196	0					
ANR	1560289	Argument	FALSE		1560196	5					
ANR	1560290	Identifier	FALSE		1560196	0					
ANR	1560291	Argument	FALSE		1560196	6					
ANR	1560292	Identifier	FALSE		1560196	0					
ANR	1560293	Argument	errmsg		1560196	7					
ANR	1560294	Identifier	errmsg		1560196	0					
ANR	1560295	CompoundStatement		13:4:407:407	1560196	1					
ANR	1560296	IfStatement	if ( flag )		1560196	0					
ANR	1560297	Condition	flag	2172:10:76457:76460	1560196	0	True				
ANR	1560298	Identifier	flag		1560196	0					
ANR	1560299	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2173:8:76471:76506	1560196	1	True				
ANR	1560300	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		1560196	0		=			
ANR	1560301	UnaryOperationExpression	* flag		1560196	0					
ANR	1560302	UnaryOperator	*		1560196	0					
ANR	1560303	Identifier	flag		1560196	1					
ANR	1560304	Identifier	HEXAGON_OPERAND_IS_REGISTER		1560196	1					
ANR	1560305	ExpressionStatement	* val = reg	2175:6:76515:76525	1560196	1	True				
ANR	1560306	AssignmentExpression	* val = reg		1560196	0		=			
ANR	1560307	UnaryOperationExpression	* val		1560196	0					
ANR	1560308	UnaryOperator	*		1560196	0					
ANR	1560309	Identifier	val		1560196	1					
ANR	1560310	Identifier	reg		1560196	1					
ANR	1560311	ReturnStatement	return ( input ) ;	2176:6:76533:76547	1560196	2	True				
ANR	1560312	Identifier	input		1560196	0					
ANR	1560313	ReturnStatement	return ( NULL ) ;	2179:2:76558:76571	1560196	4	True				
ANR	1560314	Identifier	NULL		1560196	0					
ANR	1560315	ReturnType	char *		1560196	1					
ANR	1560316	Identifier	hexagon_parse_splr		1560196	2					
ANR	1560317	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560196	3					
ANR	1560318	Parameter	const hexagon_operand * operand	2157:1:75904:75933	1560196	0	True				
ANR	1560319	ParameterType	const hexagon_operand *		1560196	0					
ANR	1560320	Identifier	operand		1560196	1					
ANR	1560321	Parameter	hexagon_insn * insn	2157:33:75936:75953	1560196	1	True				
ANR	1560322	ParameterType	hexagon_insn *		1560196	0					
ANR	1560323	Identifier	insn		1560196	1					
ANR	1560324	Parameter	const hexagon_opcode * opcode	2157:53:75956:75983	1560196	2	True				
ANR	1560325	ParameterType	const hexagon_opcode *		1560196	0					
ANR	1560326	Identifier	opcode		1560196	1					
ANR	1560327	Parameter	char * input	2158:1:75987:75997	1560196	3	True				
ANR	1560328	ParameterType	char *		1560196	0					
ANR	1560329	Identifier	input		1560196	1					
ANR	1560330	Parameter	long * val	2158:14:76000:76008	1560196	4	True				
ANR	1560331	ParameterType	long *		1560196	0					
ANR	1560332	Identifier	val		1560196	1					
ANR	1560333	Parameter	int * flag	2158:25:76011:76019	1560196	5	True				
ANR	1560334	ParameterType	int *		1560196	0					
ANR	1560335	Identifier	flag		1560196	1					
ANR	1560336	Parameter	char * * errmsg	2158:36:76022:76034	1560196	6	True				
ANR	1560337	ParameterType	char * *		1560196	0					
ANR	1560338	Identifier	errmsg		1560196	1					
ANR	1560339	CFGEntryNode	ENTRY		1560196		True				
ANR	1560340	CFGExitNode	EXIT		1560196		True				
ANR	1560341	Symbol	val		1560196						
ANR	1560342	Symbol	flag		1560196						
ANR	1560343	Symbol	NULL		1560196						
ANR	1560344	Symbol	* operand		1560196						
ANR	1560345	Symbol	* operand -> fmt		1560196						
ANR	1560346	Symbol	errmsg		1560196						
ANR	1560347	Symbol	* val		1560196						
ANR	1560348	Symbol	opcode		1560196						
ANR	1560349	Symbol	HEXAGON_OPERAND_IS_REGISTER		1560196						
ANR	1560350	Symbol	insn		1560196						
ANR	1560351	Symbol	input		1560196						
ANR	1560352	Symbol	operand -> fmt		1560196						
ANR	1560353	Symbol	& input		1560196						
ANR	1560354	Symbol	hexagon_gp_regs		1560196						
ANR	1560355	Symbol	hexagon_encode_operand		1560196						
ANR	1560356	Symbol	reg		1560196						
ANR	1560357	Symbol	hexagon_reg_num		1560196						
ANR	1560358	Symbol	* * operand		1560196						
ANR	1560359	Symbol	FALSE		1560196						
ANR	1560360	Symbol	hexagon_gp_regs_count		1560196						
ANR	1560361	Symbol	* flag		1560196						
ANR	1560362	Symbol	operand		1560196						
ANR	1560363	Function	hexagon_parse_preg	2182:0:76576:77113							
ANR	1560364	FunctionDef	"hexagon_parse_preg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560363	0					
ANR	1560365	CompoundStatement		2186:0:76736:77113	1560363	0					
ANR	1560366	IdentifierDeclStatement	int reg ;	2187:2:76740:76747	1560363	0	True				
ANR	1560367	IdentifierDecl	reg		1560363	0					
ANR	1560368	IdentifierDeclType	int		1560363	0					
ANR	1560369	Identifier	reg		1560363	1					
ANR	1560370	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2189:2:76752:76848	1560363	1	True				
ANR	1560371	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560363	0		=			
ANR	1560372	Identifier	reg		1560363	0					
ANR	1560373	CallExpression	"hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		1560363	1					
ANR	1560374	Callee	hexagon_reg_num		1560363	0					
ANR	1560375	Identifier	hexagon_reg_num		1560363	0					
ANR	1560376	ArgumentList	operand		1560363	1					
ANR	1560377	Argument	operand		1560363	0					
ANR	1560378	Identifier	operand		1560363	0					
ANR	1560379	Argument	& input		1560363	1					
ANR	1560380	UnaryOperationExpression	& input		1560363	0					
ANR	1560381	UnaryOperator	&		1560363	0					
ANR	1560382	Identifier	input		1560363	1					
ANR	1560383	Argument	'p'		1560363	2					
ANR	1560384	PrimaryExpression	'p'		1560363	0					
ANR	1560385	Argument	hexagon_gp_regs		1560363	3					
ANR	1560386	Identifier	hexagon_gp_regs		1560363	0					
ANR	1560387	Argument	hexagon_gp_regs_count		1560363	4					
ANR	1560388	Identifier	hexagon_gp_regs_count		1560363	0					
ANR	1560389	Argument	NULL		1560363	5					
ANR	1560390	Identifier	NULL		1560363	0					
ANR	1560391	Argument	'\\0'		1560363	6					
ANR	1560392	PrimaryExpression	'\\0'		1560363	0					
ANR	1560393	IfStatement	if ( reg < 0 )		1560363	2					
ANR	1560394	Condition	reg < 0	2190:6:76856:76862	1560363	0	True				
ANR	1560395	RelationalExpression	reg < 0		1560363	0		<			
ANR	1560396	Identifier	reg		1560363	0					
ANR	1560397	PrimaryExpression	0		1560363	1					
ANR	1560398	ReturnStatement	return ( NULL ) ;	2191:4:76869:76882	1560363	1	True				
ANR	1560399	Identifier	NULL		1560363	0					
ANR	1560400	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1560363	3					
ANR	1560401	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2193:6:76891:76977	1560363	0	True				
ANR	1560402	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1560363	0					
ANR	1560403	Callee	hexagon_encode_operand		1560363	0					
ANR	1560404	Identifier	hexagon_encode_operand		1560363	0					
ANR	1560405	ArgumentList	operand		1560363	1					
ANR	1560406	Argument	operand		1560363	0					
ANR	1560407	Identifier	operand		1560363	0					
ANR	1560408	Argument	insn		1560363	1					
ANR	1560409	Identifier	insn		1560363	0					
ANR	1560410	Argument	opcode		1560363	2					
ANR	1560411	Identifier	opcode		1560363	0					
ANR	1560412	Argument	reg		1560363	3					
ANR	1560413	Identifier	reg		1560363	0					
ANR	1560414	Argument	NULL		1560363	4					
ANR	1560415	Identifier	NULL		1560363	0					
ANR	1560416	Argument	FALSE		1560363	5					
ANR	1560417	Identifier	FALSE		1560363	0					
ANR	1560418	Argument	FALSE		1560363	6					
ANR	1560419	Identifier	FALSE		1560363	0					
ANR	1560420	Argument	errmsg		1560363	7					
ANR	1560421	Identifier	errmsg		1560363	0					
ANR	1560422	CompoundStatement		10:4:247:247	1560363	1					
ANR	1560423	IfStatement	if ( flag )		1560363	0					
ANR	1560424	Condition	flag	2196:10:76996:76999	1560363	0	True				
ANR	1560425	Identifier	flag		1560363	0					
ANR	1560426	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PREDICATE	2197:8:77010:77046	1560363	1	True				
ANR	1560427	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PREDICATE		1560363	0		=			
ANR	1560428	UnaryOperationExpression	* flag		1560363	0					
ANR	1560429	UnaryOperator	*		1560363	0					
ANR	1560430	Identifier	flag		1560363	1					
ANR	1560431	Identifier	HEXAGON_OPERAND_IS_PREDICATE		1560363	1					
ANR	1560432	ExpressionStatement	* val = reg	2199:6:77055:77065	1560363	1	True				
ANR	1560433	AssignmentExpression	* val = reg		1560363	0		=			
ANR	1560434	UnaryOperationExpression	* val		1560363	0					
ANR	1560435	UnaryOperator	*		1560363	0					
ANR	1560436	Identifier	val		1560363	1					
ANR	1560437	Identifier	reg		1560363	1					
ANR	1560438	ReturnStatement	return ( input ) ;	2200:6:77073:77087	1560363	2	True				
ANR	1560439	Identifier	input		1560363	0					
ANR	1560440	ReturnStatement	return ( NULL ) ;	2203:2:77098:77111	1560363	4	True				
ANR	1560441	Identifier	NULL		1560363	0					
ANR	1560442	ReturnType	char *		1560363	1					
ANR	1560443	Identifier	hexagon_parse_preg		1560363	2					
ANR	1560444	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560363	3					
ANR	1560445	Parameter	const hexagon_operand * operand	2184:1:76603:76632	1560363	0	True				
ANR	1560446	ParameterType	const hexagon_operand *		1560363	0					
ANR	1560447	Identifier	operand		1560363	1					
ANR	1560448	Parameter	hexagon_insn * insn	2184:33:76635:76652	1560363	1	True				
ANR	1560449	ParameterType	hexagon_insn *		1560363	0					
ANR	1560450	Identifier	insn		1560363	1					
ANR	1560451	Parameter	const hexagon_opcode * opcode	2184:53:76655:76682	1560363	2	True				
ANR	1560452	ParameterType	const hexagon_opcode *		1560363	0					
ANR	1560453	Identifier	opcode		1560363	1					
ANR	1560454	Parameter	char * input	2185:1:76686:76696	1560363	3	True				
ANR	1560455	ParameterType	char *		1560363	0					
ANR	1560456	Identifier	input		1560363	1					
ANR	1560457	Parameter	long * val	2185:14:76699:76707	1560363	4	True				
ANR	1560458	ParameterType	long *		1560363	0					
ANR	1560459	Identifier	val		1560363	1					
ANR	1560460	Parameter	int * flag	2185:25:76710:76718	1560363	5	True				
ANR	1560461	ParameterType	int *		1560363	0					
ANR	1560462	Identifier	flag		1560363	1					
ANR	1560463	Parameter	char * * errmsg	2185:36:76721:76733	1560363	6	True				
ANR	1560464	ParameterType	char * *		1560363	0					
ANR	1560465	Identifier	errmsg		1560363	1					
ANR	1560466	CFGEntryNode	ENTRY		1560363		True				
ANR	1560467	CFGExitNode	EXIT		1560363		True				
ANR	1560468	Symbol	val		1560363						
ANR	1560469	Symbol	flag		1560363						
ANR	1560470	Symbol	NULL		1560363						
ANR	1560471	Symbol	HEXAGON_OPERAND_IS_PREDICATE		1560363						
ANR	1560472	Symbol	errmsg		1560363						
ANR	1560473	Symbol	* val		1560363						
ANR	1560474	Symbol	opcode		1560363						
ANR	1560475	Symbol	insn		1560363						
ANR	1560476	Symbol	input		1560363						
ANR	1560477	Symbol	& input		1560363						
ANR	1560478	Symbol	hexagon_gp_regs		1560363						
ANR	1560479	Symbol	hexagon_encode_operand		1560363						
ANR	1560480	Symbol	reg		1560363						
ANR	1560481	Symbol	hexagon_reg_num		1560363						
ANR	1560482	Symbol	FALSE		1560363						
ANR	1560483	Symbol	hexagon_gp_regs_count		1560363						
ANR	1560484	Symbol	* flag		1560363						
ANR	1560485	Symbol	operand		1560363						
ANR	1560486	Function	hexagon_parse_mreg	2206:0:77116:77621							
ANR	1560487	FunctionDef	"hexagon_parse_mreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560486	0					
ANR	1560488	CompoundStatement		2210:0:77276:77621	1560486	0					
ANR	1560489	IdentifierDeclStatement	int reg ;	2211:2:77280:77287	1560486	0	True				
ANR	1560490	IdentifierDecl	reg		1560486	0					
ANR	1560491	IdentifierDeclType	int		1560486	0					
ANR	1560492	Identifier	reg		1560486	1					
ANR	1560493	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"	2213:2:77292:77357	1560486	1	True				
ANR	1560494	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"		1560486	0		=			
ANR	1560495	Identifier	reg		1560486	0					
ANR	1560496	CallExpression	"hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"		1560486	1					
ANR	1560497	Callee	hexagon_reg_num		1560486	0					
ANR	1560498	Identifier	hexagon_reg_num		1560486	0					
ANR	1560499	ArgumentList	operand		1560486	1					
ANR	1560500	Argument	operand		1560486	0					
ANR	1560501	Identifier	operand		1560486	0					
ANR	1560502	Argument	& input		1560486	1					
ANR	1560503	UnaryOperationExpression	& input		1560486	0					
ANR	1560504	UnaryOperator	&		1560486	0					
ANR	1560505	Identifier	input		1560486	1					
ANR	1560506	Argument	'm'		1560486	2					
ANR	1560507	PrimaryExpression	'm'		1560486	0					
ANR	1560508	Argument	NULL		1560486	3					
ANR	1560509	Identifier	NULL		1560486	0					
ANR	1560510	Argument	0		1560486	4					
ANR	1560511	PrimaryExpression	0		1560486	0					
ANR	1560512	Argument	NULL		1560486	5					
ANR	1560513	Identifier	NULL		1560486	0					
ANR	1560514	Argument	'\\0'		1560486	6					
ANR	1560515	PrimaryExpression	'\\0'		1560486	0					
ANR	1560516	IfStatement	if ( reg < 0 )		1560486	2					
ANR	1560517	Condition	reg < 0	2214:6:77365:77371	1560486	0	True				
ANR	1560518	RelationalExpression	reg < 0		1560486	0		<			
ANR	1560519	Identifier	reg		1560486	0					
ANR	1560520	PrimaryExpression	0		1560486	1					
ANR	1560521	ReturnStatement	return ( NULL ) ;	2215:4:77378:77391	1560486	1	True				
ANR	1560522	Identifier	NULL		1560486	0					
ANR	1560523	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1560486	3					
ANR	1560524	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2217:6:77400:77486	1560486	0	True				
ANR	1560525	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1560486	0					
ANR	1560526	Callee	hexagon_encode_operand		1560486	0					
ANR	1560527	Identifier	hexagon_encode_operand		1560486	0					
ANR	1560528	ArgumentList	operand		1560486	1					
ANR	1560529	Argument	operand		1560486	0					
ANR	1560530	Identifier	operand		1560486	0					
ANR	1560531	Argument	insn		1560486	1					
ANR	1560532	Identifier	insn		1560486	0					
ANR	1560533	Argument	opcode		1560486	2					
ANR	1560534	Identifier	opcode		1560486	0					
ANR	1560535	Argument	reg		1560486	3					
ANR	1560536	Identifier	reg		1560486	0					
ANR	1560537	Argument	NULL		1560486	4					
ANR	1560538	Identifier	NULL		1560486	0					
ANR	1560539	Argument	FALSE		1560486	5					
ANR	1560540	Identifier	FALSE		1560486	0					
ANR	1560541	Argument	FALSE		1560486	6					
ANR	1560542	Identifier	FALSE		1560486	0					
ANR	1560543	Argument	errmsg		1560486	7					
ANR	1560544	Identifier	errmsg		1560486	0					
ANR	1560545	CompoundStatement		10:4:216:216	1560486	1					
ANR	1560546	IfStatement	if ( flag )		1560486	0					
ANR	1560547	Condition	flag	2220:10:77505:77508	1560486	0	True				
ANR	1560548	Identifier	flag		1560486	0					
ANR	1560549	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_MODIFIER	2221:8:77519:77554	1560486	1	True				
ANR	1560550	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_MODIFIER		1560486	0		=			
ANR	1560551	UnaryOperationExpression	* flag		1560486	0					
ANR	1560552	UnaryOperator	*		1560486	0					
ANR	1560553	Identifier	flag		1560486	1					
ANR	1560554	Identifier	HEXAGON_OPERAND_IS_MODIFIER		1560486	1					
ANR	1560555	ExpressionStatement	* val = reg	2223:6:77563:77573	1560486	1	True				
ANR	1560556	AssignmentExpression	* val = reg		1560486	0		=			
ANR	1560557	UnaryOperationExpression	* val		1560486	0					
ANR	1560558	UnaryOperator	*		1560486	0					
ANR	1560559	Identifier	val		1560486	1					
ANR	1560560	Identifier	reg		1560486	1					
ANR	1560561	ReturnStatement	return ( input ) ;	2224:6:77581:77595	1560486	2	True				
ANR	1560562	Identifier	input		1560486	0					
ANR	1560563	ReturnStatement	return ( NULL ) ;	2227:2:77606:77619	1560486	4	True				
ANR	1560564	Identifier	NULL		1560486	0					
ANR	1560565	ReturnType	char *		1560486	1					
ANR	1560566	Identifier	hexagon_parse_mreg		1560486	2					
ANR	1560567	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560486	3					
ANR	1560568	Parameter	const hexagon_operand * operand	2208:1:77143:77172	1560486	0	True				
ANR	1560569	ParameterType	const hexagon_operand *		1560486	0					
ANR	1560570	Identifier	operand		1560486	1					
ANR	1560571	Parameter	hexagon_insn * insn	2208:33:77175:77192	1560486	1	True				
ANR	1560572	ParameterType	hexagon_insn *		1560486	0					
ANR	1560573	Identifier	insn		1560486	1					
ANR	1560574	Parameter	const hexagon_opcode * opcode	2208:53:77195:77222	1560486	2	True				
ANR	1560575	ParameterType	const hexagon_opcode *		1560486	0					
ANR	1560576	Identifier	opcode		1560486	1					
ANR	1560577	Parameter	char * input	2209:1:77226:77236	1560486	3	True				
ANR	1560578	ParameterType	char *		1560486	0					
ANR	1560579	Identifier	input		1560486	1					
ANR	1560580	Parameter	long * val	2209:14:77239:77247	1560486	4	True				
ANR	1560581	ParameterType	long *		1560486	0					
ANR	1560582	Identifier	val		1560486	1					
ANR	1560583	Parameter	int * flag	2209:25:77250:77258	1560486	5	True				
ANR	1560584	ParameterType	int *		1560486	0					
ANR	1560585	Identifier	flag		1560486	1					
ANR	1560586	Parameter	char * * errmsg	2209:36:77261:77273	1560486	6	True				
ANR	1560587	ParameterType	char * *		1560486	0					
ANR	1560588	Identifier	errmsg		1560486	1					
ANR	1560589	CFGEntryNode	ENTRY		1560486		True				
ANR	1560590	CFGExitNode	EXIT		1560486		True				
ANR	1560591	Symbol	val		1560486						
ANR	1560592	Symbol	flag		1560486						
ANR	1560593	Symbol	NULL		1560486						
ANR	1560594	Symbol	errmsg		1560486						
ANR	1560595	Symbol	* val		1560486						
ANR	1560596	Symbol	opcode		1560486						
ANR	1560597	Symbol	insn		1560486						
ANR	1560598	Symbol	input		1560486						
ANR	1560599	Symbol	& input		1560486						
ANR	1560600	Symbol	hexagon_encode_operand		1560486						
ANR	1560601	Symbol	reg		1560486						
ANR	1560602	Symbol	hexagon_reg_num		1560486						
ANR	1560603	Symbol	HEXAGON_OPERAND_IS_MODIFIER		1560486						
ANR	1560604	Symbol	FALSE		1560486						
ANR	1560605	Symbol	* flag		1560486						
ANR	1560606	Symbol	operand		1560486						
ANR	1560607	Function	hexagon_parse_creg	2230:0:77624:78679							
ANR	1560608	FunctionDef	"hexagon_parse_creg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560607	0					
ANR	1560609	CompoundStatement		2234:0:77791:78679	1560607	0					
ANR	1560610	IdentifierDeclStatement	size_t regn ;	2235:2:77795:77806	1560607	0	True				
ANR	1560611	IdentifierDecl	regn		1560607	0					
ANR	1560612	IdentifierDeclType	size_t		1560607	0					
ANR	1560613	Identifier	regn		1560607	1					
ANR	1560614	IdentifierDeclStatement	int reg ;	2236:2:77810:77817	1560607	1	True				
ANR	1560615	IdentifierDecl	reg		1560607	0					
ANR	1560616	IdentifierDeclType	int		1560607	0					
ANR	1560617	Identifier	reg		1560607	1					
ANR	1560618	Statement	static	2237:2:77821:77826	1560607	2	True				
ANR	1560619	IdentifierDeclStatement	char buf [ 150 ] ;	2237:9:77828:77842	1560607	3	True				
ANR	1560620	IdentifierDecl	buf [ 150 ]		1560607	0					
ANR	1560621	IdentifierDeclType	char [ 150 ]		1560607	0					
ANR	1560622	Identifier	buf		1560607	1					
ANR	1560623	PrimaryExpression	150		1560607	2					
ANR	1560624	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"	2239:2:77847:77955	1560607	4	True				
ANR	1560625	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"		1560607	0		=			
ANR	1560626	Identifier	reg		1560607	0					
ANR	1560627	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"		1560607	1					
ANR	1560628	Callee	hexagon_reg_num		1560607	0					
ANR	1560629	Identifier	hexagon_reg_num		1560607	0					
ANR	1560630	ArgumentList	operand		1560607	1					
ANR	1560631	Argument	operand		1560607	0					
ANR	1560632	Identifier	operand		1560607	0					
ANR	1560633	Argument	& input		1560607	1					
ANR	1560634	UnaryOperationExpression	& input		1560607	0					
ANR	1560635	UnaryOperator	&		1560607	0					
ANR	1560636	Identifier	input		1560607	1					
ANR	1560637	Argument	'\\0'		1560607	2					
ANR	1560638	PrimaryExpression	'\\0'		1560607	0					
ANR	1560639	Argument	hexagon_control_regs		1560607	3					
ANR	1560640	Identifier	hexagon_control_regs		1560607	0					
ANR	1560641	Argument	hexagon_control_regs_count		1560607	4					
ANR	1560642	Identifier	hexagon_control_regs_count		1560607	0					
ANR	1560643	Argument	& regn		1560607	5					
ANR	1560644	UnaryOperationExpression	& regn		1560607	0					
ANR	1560645	UnaryOperator	&		1560607	0					
ANR	1560646	Identifier	regn		1560607	1					
ANR	1560647	Argument	'\\0'		1560607	6					
ANR	1560648	PrimaryExpression	'\\0'		1560607	0					
ANR	1560649	IfStatement	if ( reg < 0 )		1560607	5					
ANR	1560650	Condition	reg < 0	2240:6:77963:77969	1560607	0	True				
ANR	1560651	RelationalExpression	reg < 0		1560607	0		<			
ANR	1560652	Identifier	reg		1560607	0					
ANR	1560653	PrimaryExpression	0		1560607	1					
ANR	1560654	ReturnStatement	return ( NULL ) ;	2241:4:77976:77989	1560607	1	True				
ANR	1560655	Identifier	NULL		1560607	0					
ANR	1560656	IfStatement	if ( flag )		1560607	6					
ANR	1560657	Condition	flag	2243:6:77998:78001	1560607	0	True				
ANR	1560658	Identifier	flag		1560607	0					
ANR	1560659	ExpressionStatement	* flag = 0	2244:4:78008:78017	1560607	1	True				
ANR	1560660	AssignmentExpression	* flag = 0		1560607	0		=			
ANR	1560661	UnaryOperationExpression	* flag		1560607	0					
ANR	1560662	UnaryOperator	*		1560607	0					
ANR	1560663	Identifier	flag		1560607	1					
ANR	1560664	PrimaryExpression	0		1560607	1					
ANR	1560665	IfStatement	if ( ! hexagon_verify_hw )		1560607	7					
ANR	1560666	Condition	! hexagon_verify_hw	2246:6:78026:78043	1560607	0	True				
ANR	1560667	UnaryOperationExpression	! hexagon_verify_hw		1560607	0					
ANR	1560668	UnaryOperator	!		1560607	0					
ANR	1560669	Identifier	hexagon_verify_hw		1560607	1					
ANR	1560670	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		1560607	1					
ANR	1560671	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2247:8:78054:78169	1560607	0	True				
ANR	1560672	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		1560607	0		&&			
ANR	1560673	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1560607	0		&			
ANR	1560674	PtrMemberAccess	operand -> flags		1560607	0					
ANR	1560675	Identifier	operand		1560607	0					
ANR	1560676	Identifier	flags		1560607	1					
ANR	1560677	Identifier	HEXAGON_OPERAND_IS_WRITE		1560607	1					
ANR	1560678	BitAndExpression	hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		1560607	1		&			
ANR	1560679	MemberAccess	hexagon_control_regs [ regn ] . flags		1560607	0					
ANR	1560680	ArrayIndexing	hexagon_control_regs [ regn ]		1560607	0					
ANR	1560681	Identifier	hexagon_control_regs		1560607	0					
ANR	1560682	Identifier	regn		1560607	1					
ANR	1560683	Identifier	flags		1560607	1					
ANR	1560684	Identifier	HEXAGON_REG_IS_READONLY		1560607	1					
ANR	1560685	CompoundStatement		16:6:386:386	1560607	1					
ANR	1560686	IfStatement	if ( errmsg )		1560607	0					
ANR	1560687	Condition	errmsg	2250:12:78192:78197	1560607	0	True				
ANR	1560688	Identifier	errmsg		1560607	0					
ANR	1560689	CompoundStatement		18:10:418:418	1560607	1					
ANR	1560690	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_control_regs [ regn ] . name )"	2252:12:78224:78337	1560607	0	True				
ANR	1560691	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_control_regs [ regn ] . name )"		1560607	0					
ANR	1560692	Callee	sprintf		1560607	0					
ANR	1560693	Identifier	sprintf		1560607	0					
ANR	1560694	ArgumentList	buf		1560607	1					
ANR	1560695	Argument	buf		1560607	0					
ANR	1560696	Identifier	buf		1560607	0					
ANR	1560697	Argument	"""cannot write to read-only register `%s'."""		1560607	1					
ANR	1560698	PrimaryExpression	"""cannot write to read-only register `%s'."""		1560607	0					
ANR	1560699	Argument	hexagon_control_regs [ regn ] . name		1560607	2					
ANR	1560700	MemberAccess	hexagon_control_regs [ regn ] . name		1560607	0					
ANR	1560701	ArrayIndexing	hexagon_control_regs [ regn ]		1560607	0					
ANR	1560702	Identifier	hexagon_control_regs		1560607	0					
ANR	1560703	Identifier	regn		1560607	1					
ANR	1560704	Identifier	name		1560607	1					
ANR	1560705	ExpressionStatement	* errmsg = buf	2254:12:78351:78364	1560607	1	True				
ANR	1560706	AssignmentExpression	* errmsg = buf		1560607	0		=			
ANR	1560707	UnaryOperationExpression	* errmsg		1560607	0					
ANR	1560708	UnaryOperator	*		1560607	0					
ANR	1560709	Identifier	errmsg		1560607	1					
ANR	1560710	Identifier	buf		1560607	1					
ANR	1560711	IfStatement	if ( flag )		1560607	1					
ANR	1560712	Condition	flag	2256:12:78390:78393	1560607	0	True				
ANR	1560713	Identifier	flag		1560607	0					
ANR	1560714	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2257:10:78406:78441	1560607	1	True				
ANR	1560715	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1560607	0		|=			
ANR	1560716	UnaryOperationExpression	* flag		1560607	0					
ANR	1560717	UnaryOperator	*		1560607	0					
ANR	1560718	Identifier	flag		1560607	1					
ANR	1560719	Identifier	HEXAGON_OPERAND_IS_INVALID		1560607	1					
ANR	1560720	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1560607	8					
ANR	1560721	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2260:6:78458:78544	1560607	0	True				
ANR	1560722	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1560607	0					
ANR	1560723	Callee	hexagon_encode_operand		1560607	0					
ANR	1560724	Identifier	hexagon_encode_operand		1560607	0					
ANR	1560725	ArgumentList	operand		1560607	1					
ANR	1560726	Argument	operand		1560607	0					
ANR	1560727	Identifier	operand		1560607	0					
ANR	1560728	Argument	insn		1560607	1					
ANR	1560729	Identifier	insn		1560607	0					
ANR	1560730	Argument	opcode		1560607	2					
ANR	1560731	Identifier	opcode		1560607	0					
ANR	1560732	Argument	reg		1560607	3					
ANR	1560733	Identifier	reg		1560607	0					
ANR	1560734	Argument	NULL		1560607	4					
ANR	1560735	Identifier	NULL		1560607	0					
ANR	1560736	Argument	FALSE		1560607	5					
ANR	1560737	Identifier	FALSE		1560607	0					
ANR	1560738	Argument	FALSE		1560607	6					
ANR	1560739	Identifier	FALSE		1560607	0					
ANR	1560740	Argument	errmsg		1560607	7					
ANR	1560741	Identifier	errmsg		1560607	0					
ANR	1560742	CompoundStatement		29:4:759:759	1560607	1					
ANR	1560743	IfStatement	if ( flag )		1560607	0					
ANR	1560744	Condition	flag	2263:10:78563:78566	1560607	0	True				
ANR	1560745	Identifier	flag		1560607	0					
ANR	1560746	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_CONTROL	2264:8:78577:78612	1560607	1	True				
ANR	1560747	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_CONTROL		1560607	0		|=			
ANR	1560748	UnaryOperationExpression	* flag		1560607	0					
ANR	1560749	UnaryOperator	*		1560607	0					
ANR	1560750	Identifier	flag		1560607	1					
ANR	1560751	Identifier	HEXAGON_OPERAND_IS_CONTROL		1560607	1					
ANR	1560752	ExpressionStatement	* val = reg	2266:6:78621:78631	1560607	1	True				
ANR	1560753	AssignmentExpression	* val = reg		1560607	0		=			
ANR	1560754	UnaryOperationExpression	* val		1560607	0					
ANR	1560755	UnaryOperator	*		1560607	0					
ANR	1560756	Identifier	val		1560607	1					
ANR	1560757	Identifier	reg		1560607	1					
ANR	1560758	ReturnStatement	return ( input ) ;	2267:6:78639:78653	1560607	2	True				
ANR	1560759	Identifier	input		1560607	0					
ANR	1560760	ReturnStatement	return ( NULL ) ;	2270:2:78664:78677	1560607	9	True				
ANR	1560761	Identifier	NULL		1560607	0					
ANR	1560762	ReturnType	static char *		1560607	1					
ANR	1560763	Identifier	hexagon_parse_creg		1560607	2					
ANR	1560764	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560607	3					
ANR	1560765	Parameter	const hexagon_operand * operand	2232:1:77658:77687	1560607	0	True				
ANR	1560766	ParameterType	const hexagon_operand *		1560607	0					
ANR	1560767	Identifier	operand		1560607	1					
ANR	1560768	Parameter	hexagon_insn * insn	2232:33:77690:77707	1560607	1	True				
ANR	1560769	ParameterType	hexagon_insn *		1560607	0					
ANR	1560770	Identifier	insn		1560607	1					
ANR	1560771	Parameter	const hexagon_opcode * opcode	2232:53:77710:77737	1560607	2	True				
ANR	1560772	ParameterType	const hexagon_opcode *		1560607	0					
ANR	1560773	Identifier	opcode		1560607	1					
ANR	1560774	Parameter	char * input	2233:1:77741:77751	1560607	3	True				
ANR	1560775	ParameterType	char *		1560607	0					
ANR	1560776	Identifier	input		1560607	1					
ANR	1560777	Parameter	long * val	2233:14:77754:77762	1560607	4	True				
ANR	1560778	ParameterType	long *		1560607	0					
ANR	1560779	Identifier	val		1560607	1					
ANR	1560780	Parameter	int * flag	2233:25:77765:77773	1560607	5	True				
ANR	1560781	ParameterType	int *		1560607	0					
ANR	1560782	Identifier	flag		1560607	1					
ANR	1560783	Parameter	char * * errmsg	2233:36:77776:77788	1560607	6	True				
ANR	1560784	ParameterType	char * *		1560607	0					
ANR	1560785	Identifier	errmsg		1560607	1					
ANR	1560786	CFGEntryNode	ENTRY		1560607		True				
ANR	1560787	CFGExitNode	EXIT		1560607		True				
ANR	1560788	Symbol	flag		1560607						
ANR	1560789	Symbol	& regn		1560607						
ANR	1560790	Symbol	* operand		1560607						
ANR	1560791	Symbol	* val		1560607						
ANR	1560792	Symbol	opcode		1560607						
ANR	1560793	Symbol	& input		1560607						
ANR	1560794	Symbol	HEXAGON_OPERAND_IS_INVALID		1560607						
ANR	1560795	Symbol	reg		1560607						
ANR	1560796	Symbol	hexagon_reg_num		1560607						
ANR	1560797	Symbol	hexagon_verify_hw		1560607						
ANR	1560798	Symbol	HEXAGON_OPERAND_IS_CONTROL		1560607						
ANR	1560799	Symbol	hexagon_control_regs_count		1560607						
ANR	1560800	Symbol	val		1560607						
ANR	1560801	Symbol	NULL		1560607						
ANR	1560802	Symbol	HEXAGON_OPERAND_IS_WRITE		1560607						
ANR	1560803	Symbol	HEXAGON_REG_IS_READONLY		1560607						
ANR	1560804	Symbol	operand -> flags		1560607						
ANR	1560805	Symbol	errmsg		1560607						
ANR	1560806	Symbol	regn		1560607						
ANR	1560807	Symbol	insn		1560607						
ANR	1560808	Symbol	input		1560607						
ANR	1560809	Symbol	* hexagon_control_regs		1560607						
ANR	1560810	Symbol	buf		1560607						
ANR	1560811	Symbol	* regn		1560607						
ANR	1560812	Symbol	hexagon_encode_operand		1560607						
ANR	1560813	Symbol	hexagon_control_regs [ regn ] . flags		1560607						
ANR	1560814	Symbol	hexagon_control_regs		1560607						
ANR	1560815	Symbol	FALSE		1560607						
ANR	1560816	Symbol	* flag		1560607						
ANR	1560817	Symbol	* errmsg		1560607						
ANR	1560818	Symbol	operand		1560607						
ANR	1560819	Symbol	hexagon_control_regs [ regn ] . name		1560607						
ANR	1560820	Function	hexagon_parse_dcreg	2273:0:78682:80807							
ANR	1560821	FunctionDef	"hexagon_parse_dcreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1560820	0					
ANR	1560822	CompoundStatement		2277:0:78850:80807	1560820	0					
ANR	1560823	Statement	static	2278:2:78854:78859	1560820	0	True				
ANR	1560824	IdentifierDeclStatement	char buf [ 100 ] ;	2278:9:78861:78875	1560820	1	True				
ANR	1560825	IdentifierDecl	buf [ 100 ]		1560820	0					
ANR	1560826	IdentifierDeclType	char [ 100 ]		1560820	0					
ANR	1560827	Identifier	buf		1560820	1					
ANR	1560828	PrimaryExpression	100		1560820	2					
ANR	1560829	IdentifierDeclStatement	"size_t rege , rego ;"	2279:2:78879:78896	1560820	2	True				
ANR	1560830	IdentifierDecl	rege		1560820	0					
ANR	1560831	IdentifierDeclType	size_t		1560820	0					
ANR	1560832	Identifier	rege		1560820	1					
ANR	1560833	IdentifierDecl	rego		1560820	1					
ANR	1560834	IdentifierDeclType	size_t		1560820	0					
ANR	1560835	Identifier	rego		1560820	1					
ANR	1560836	IdentifierDeclStatement	int reg_odd ;	2280:2:78900:78911	1560820	3	True				
ANR	1560837	IdentifierDecl	reg_odd		1560820	0					
ANR	1560838	IdentifierDeclType	int		1560820	0					
ANR	1560839	Identifier	reg_odd		1560820	1					
ANR	1560840	IdentifierDeclStatement	int reg_even ;	2281:2:78915:78927	1560820	4	True				
ANR	1560841	IdentifierDecl	reg_even		1560820	0					
ANR	1560842	IdentifierDeclType	int		1560820	0					
ANR	1560843	Identifier	reg_even		1560820	1					
ANR	1560844	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"	2283:2:78932:79045	1560820	5	True				
ANR	1560845	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"		1560820	0		=			
ANR	1560846	Identifier	reg_odd		1560820	0					
ANR	1560847	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"		1560820	1					
ANR	1560848	Callee	hexagon_reg_num		1560820	0					
ANR	1560849	Identifier	hexagon_reg_num		1560820	0					
ANR	1560850	ArgumentList	operand		1560820	1					
ANR	1560851	Argument	operand		1560820	0					
ANR	1560852	Identifier	operand		1560820	0					
ANR	1560853	Argument	& input		1560820	1					
ANR	1560854	UnaryOperationExpression	& input		1560820	0					
ANR	1560855	UnaryOperator	&		1560820	0					
ANR	1560856	Identifier	input		1560820	1					
ANR	1560857	Argument	'\\0'		1560820	2					
ANR	1560858	PrimaryExpression	'\\0'		1560820	0					
ANR	1560859	Argument	hexagon_control_regs		1560820	3					
ANR	1560860	Identifier	hexagon_control_regs		1560820	0					
ANR	1560861	Argument	hexagon_control_regs_count		1560820	4					
ANR	1560862	Identifier	hexagon_control_regs_count		1560820	0					
ANR	1560863	Argument	& rego		1560820	5					
ANR	1560864	UnaryOperationExpression	& rego		1560820	0					
ANR	1560865	UnaryOperator	&		1560820	0					
ANR	1560866	Identifier	rego		1560820	1					
ANR	1560867	Argument	'\\0'		1560820	6					
ANR	1560868	PrimaryExpression	'\\0'		1560820	0					
ANR	1560869	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"	2284:2:79049:79161	1560820	6	True				
ANR	1560870	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"		1560820	0		=			
ANR	1560871	Identifier	reg_even		1560820	0					
ANR	1560872	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"		1560820	1					
ANR	1560873	Callee	hexagon_reg_num		1560820	0					
ANR	1560874	Identifier	hexagon_reg_num		1560820	0					
ANR	1560875	ArgumentList	operand		1560820	1					
ANR	1560876	Argument	operand		1560820	0					
ANR	1560877	Identifier	operand		1560820	0					
ANR	1560878	Argument	& input		1560820	1					
ANR	1560879	UnaryOperationExpression	& input		1560820	0					
ANR	1560880	UnaryOperator	&		1560820	0					
ANR	1560881	Identifier	input		1560820	1					
ANR	1560882	Argument	'\\0'		1560820	2					
ANR	1560883	PrimaryExpression	'\\0'		1560820	0					
ANR	1560884	Argument	hexagon_control_regs		1560820	3					
ANR	1560885	Identifier	hexagon_control_regs		1560820	0					
ANR	1560886	Argument	hexagon_control_regs_count		1560820	4					
ANR	1560887	Identifier	hexagon_control_regs_count		1560820	0					
ANR	1560888	Argument	& rege		1560820	5					
ANR	1560889	UnaryOperationExpression	& rege		1560820	0					
ANR	1560890	UnaryOperator	&		1560820	0					
ANR	1560891	Identifier	rege		1560820	1					
ANR	1560892	Argument	'c'		1560820	6					
ANR	1560893	PrimaryExpression	'c'		1560820	0					
ANR	1560894	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1560820	7					
ANR	1560895	Condition	reg_odd < 0 || reg_even < 0	2285:6:79169:79195	1560820	0	True				
ANR	1560896	OrExpression	reg_odd < 0 || reg_even < 0		1560820	0		||			
ANR	1560897	RelationalExpression	reg_odd < 0		1560820	0		<			
ANR	1560898	Identifier	reg_odd		1560820	0					
ANR	1560899	PrimaryExpression	0		1560820	1					
ANR	1560900	RelationalExpression	reg_even < 0		1560820	1		<			
ANR	1560901	Identifier	reg_even		1560820	0					
ANR	1560902	PrimaryExpression	0		1560820	1					
ANR	1560903	ReturnStatement	return ( NULL ) ;	2286:4:79202:79215	1560820	1	True				
ANR	1560904	Identifier	NULL		1560820	0					
ANR	1560905	IfStatement	if ( reg_odd % 2 != 1 )		1560820	8					
ANR	1560906	Condition	reg_odd % 2 != 1	2289:6:79269:79284	1560820	0	True				
ANR	1560907	EqualityExpression	reg_odd % 2 != 1		1560820	0		!=			
ANR	1560908	MultiplicativeExpression	reg_odd % 2		1560820	0		%			
ANR	1560909	Identifier	reg_odd		1560820	0					
ANR	1560910	PrimaryExpression	2		1560820	1					
ANR	1560911	PrimaryExpression	1		1560820	1					
ANR	1560912	CompoundStatement		14:4:440:440	1560820	1					
ANR	1560913	IfStatement	if ( errmsg )		1560820	0					
ANR	1560914	Condition	errmsg	2291:10:79303:79308	1560820	0	True				
ANR	1560915	Identifier	errmsg		1560820	0					
ANR	1560916	CompoundStatement		16:8:468:468	1560820	1					
ANR	1560917	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2293:12:79333:79390	1560820	0	True				
ANR	1560918	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1560820	0					
ANR	1560919	Callee	sprintf		1560820	0					
ANR	1560920	Identifier	sprintf		1560820	0					
ANR	1560921	ArgumentList	buf		1560820	1					
ANR	1560922	Argument	buf		1560820	0					
ANR	1560923	Identifier	buf		1560820	0					
ANR	1560924	Argument	"""invalid odd register number: %d"""		1560820	1					
ANR	1560925	PrimaryExpression	"""invalid odd register number: %d"""		1560820	0					
ANR	1560926	Argument	reg_odd		1560820	2					
ANR	1560927	Identifier	reg_odd		1560820	0					
ANR	1560928	ExpressionStatement	* errmsg = buf	2294:12:79404:79417	1560820	1	True				
ANR	1560929	AssignmentExpression	* errmsg = buf		1560820	0		=			
ANR	1560930	UnaryOperationExpression	* errmsg		1560820	0					
ANR	1560931	UnaryOperator	*		1560820	0					
ANR	1560932	Identifier	errmsg		1560820	1					
ANR	1560933	Identifier	buf		1560820	1					
ANR	1560934	ReturnStatement	return NULL ;	2296:6:79435:79446	1560820	1	True				
ANR	1560935	Identifier	NULL		1560820	0					
ANR	1560936	IfStatement	if ( reg_even % 2 != 0 )		1560820	9					
ANR	1560937	Condition	reg_even % 2 != 0	2300:6:79507:79523	1560820	0	True				
ANR	1560938	EqualityExpression	reg_even % 2 != 0		1560820	0		!=			
ANR	1560939	MultiplicativeExpression	reg_even % 2		1560820	0		%			
ANR	1560940	Identifier	reg_even		1560820	0					
ANR	1560941	PrimaryExpression	2		1560820	1					
ANR	1560942	PrimaryExpression	0		1560820	1					
ANR	1560943	CompoundStatement		25:4:679:679	1560820	1					
ANR	1560944	IfStatement	if ( errmsg )		1560820	0					
ANR	1560945	Condition	errmsg	2302:10:79542:79547	1560820	0	True				
ANR	1560946	Identifier	errmsg		1560820	0					
ANR	1560947	CompoundStatement		27:8:707:707	1560820	1					
ANR	1560948	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2304:12:79572:79631	1560820	0	True				
ANR	1560949	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1560820	0					
ANR	1560950	Callee	sprintf		1560820	0					
ANR	1560951	Identifier	sprintf		1560820	0					
ANR	1560952	ArgumentList	buf		1560820	1					
ANR	1560953	Argument	buf		1560820	0					
ANR	1560954	Identifier	buf		1560820	0					
ANR	1560955	Argument	"""invalid even register number: %d"""		1560820	1					
ANR	1560956	PrimaryExpression	"""invalid even register number: %d"""		1560820	0					
ANR	1560957	Argument	reg_even		1560820	2					
ANR	1560958	Identifier	reg_even		1560820	0					
ANR	1560959	ExpressionStatement	* errmsg = buf	2305:12:79645:79658	1560820	1	True				
ANR	1560960	AssignmentExpression	* errmsg = buf		1560820	0		=			
ANR	1560961	UnaryOperationExpression	* errmsg		1560820	0					
ANR	1560962	UnaryOperator	*		1560820	0					
ANR	1560963	Identifier	errmsg		1560820	1					
ANR	1560964	Identifier	buf		1560820	1					
ANR	1560965	ReturnStatement	return NULL ;	2307:6:79676:79687	1560820	1	True				
ANR	1560966	Identifier	NULL		1560820	0					
ANR	1560967	IfStatement	if ( reg_odd != reg_even + 1 )		1560820	10					
ANR	1560968	Condition	reg_odd != reg_even + 1	2311:6:79750:79772	1560820	0	True				
ANR	1560969	EqualityExpression	reg_odd != reg_even + 1		1560820	0		!=			
ANR	1560970	Identifier	reg_odd		1560820	0					
ANR	1560971	AdditiveExpression	reg_even + 1		1560820	1		+			
ANR	1560972	Identifier	reg_even		1560820	0					
ANR	1560973	PrimaryExpression	1		1560820	1					
ANR	1560974	CompoundStatement		36:4:928:928	1560820	1					
ANR	1560975	IfStatement	if ( errmsg )		1560820	0					
ANR	1560976	Condition	errmsg	2313:10:79791:79796	1560820	0	True				
ANR	1560977	Identifier	errmsg		1560820	0					
ANR	1560978	CompoundStatement		38:8:956:956	1560820	1					
ANR	1560979	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2315:12:79821:79914	1560820	0	True				
ANR	1560980	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1560820	0					
ANR	1560981	Callee	sprintf		1560820	0					
ANR	1560982	Identifier	sprintf		1560820	0					
ANR	1560983	ArgumentList	buf		1560820	1					
ANR	1560984	Argument	buf		1560820	0					
ANR	1560985	Identifier	buf		1560820	0					
ANR	1560986	Argument	"""registers must be consecutive: %d:%d"""		1560820	1					
ANR	1560987	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1560820	0					
ANR	1560988	Argument	reg_odd		1560820	2					
ANR	1560989	Identifier	reg_odd		1560820	0					
ANR	1560990	Argument	reg_even		1560820	3					
ANR	1560991	Identifier	reg_even		1560820	0					
ANR	1560992	ExpressionStatement	* errmsg = buf	2317:12:79928:79941	1560820	1	True				
ANR	1560993	AssignmentExpression	* errmsg = buf		1560820	0		=			
ANR	1560994	UnaryOperationExpression	* errmsg		1560820	0					
ANR	1560995	UnaryOperator	*		1560820	0					
ANR	1560996	Identifier	errmsg		1560820	1					
ANR	1560997	Identifier	buf		1560820	1					
ANR	1560998	ReturnStatement	return NULL ;	2319:6:79959:79970	1560820	1	True				
ANR	1560999	Identifier	NULL		1560820	0					
ANR	1561000	IfStatement	if ( flag )		1560820	11					
ANR	1561001	Condition	flag	2322:6:79985:79988	1560820	0	True				
ANR	1561002	Identifier	flag		1560820	0					
ANR	1561003	ExpressionStatement	* flag = 0	2323:4:79995:80004	1560820	1	True				
ANR	1561004	AssignmentExpression	* flag = 0		1560820	0		=			
ANR	1561005	UnaryOperationExpression	* flag		1560820	0					
ANR	1561006	UnaryOperator	*		1560820	0					
ANR	1561007	Identifier	flag		1560820	1					
ANR	1561008	PrimaryExpression	0		1560820	1					
ANR	1561009	IfStatement	if ( ! hexagon_verify_hw )		1560820	12					
ANR	1561010	Condition	! hexagon_verify_hw	2325:6:80013:80030	1560820	0	True				
ANR	1561011	UnaryOperationExpression	! hexagon_verify_hw		1560820	0					
ANR	1561012	UnaryOperator	!		1560820	0					
ANR	1561013	Identifier	hexagon_verify_hw		1560820	1					
ANR	1561014	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		1560820	1					
ANR	1561015	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2326:8:80041:80235	1560820	0	True				
ANR	1561016	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		1560820	0		&&			
ANR	1561017	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1560820	0		&			
ANR	1561018	PtrMemberAccess	operand -> flags		1560820	0					
ANR	1561019	Identifier	operand		1560820	0					
ANR	1561020	Identifier	flags		1560820	1					
ANR	1561021	Identifier	HEXAGON_OPERAND_IS_WRITE		1560820	1					
ANR	1561022	OrExpression	( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		1560820	1		||			
ANR	1561023	BitAndExpression	hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		1560820	0		&			
ANR	1561024	MemberAccess	hexagon_control_regs [ rege ] . flags		1560820	0					
ANR	1561025	ArrayIndexing	hexagon_control_regs [ rege ]		1560820	0					
ANR	1561026	Identifier	hexagon_control_regs		1560820	0					
ANR	1561027	Identifier	rege		1560820	1					
ANR	1561028	Identifier	flags		1560820	1					
ANR	1561029	Identifier	HEXAGON_REG_IS_READONLY		1560820	1					
ANR	1561030	BitAndExpression	hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		1560820	1		&			
ANR	1561031	MemberAccess	hexagon_control_regs [ rego ] . flags		1560820	0					
ANR	1561032	ArrayIndexing	hexagon_control_regs [ rego ]		1560820	0					
ANR	1561033	Identifier	hexagon_control_regs		1560820	0					
ANR	1561034	Identifier	rego		1560820	1					
ANR	1561035	Identifier	flags		1560820	1					
ANR	1561036	Identifier	HEXAGON_REG_IS_READONLY		1560820	1					
ANR	1561037	CompoundStatement		53:6:1393:1393	1560820	1					
ANR	1561038	IfStatement	if ( errmsg )		1560820	0					
ANR	1561039	Condition	errmsg	2330:12:80258:80263	1560820	0	True				
ANR	1561040	Identifier	errmsg		1560820	0					
ANR	1561041	CompoundStatement		55:10:1425:1425	1560820	1					
ANR	1561042	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_control_regs [ rego ] . name , hexagon_control_regs [ rege ] . name )"	2332:12:80290:80460	1560820	0	True				
ANR	1561043	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_control_regs [ rego ] . name , hexagon_control_regs [ rege ] . name )"		1560820	0					
ANR	1561044	Callee	sprintf		1560820	0					
ANR	1561045	Identifier	sprintf		1560820	0					
ANR	1561046	ArgumentList	buf		1560820	1					
ANR	1561047	Argument	buf		1560820	0					
ANR	1561048	Identifier	buf		1560820	0					
ANR	1561049	Argument	"""cannot write to read-only register `%s:%s'."""		1560820	1					
ANR	1561050	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		1560820	0					
ANR	1561051	Argument	hexagon_control_regs [ rego ] . name		1560820	2					
ANR	1561052	MemberAccess	hexagon_control_regs [ rego ] . name		1560820	0					
ANR	1561053	ArrayIndexing	hexagon_control_regs [ rego ]		1560820	0					
ANR	1561054	Identifier	hexagon_control_regs		1560820	0					
ANR	1561055	Identifier	rego		1560820	1					
ANR	1561056	Identifier	name		1560820	1					
ANR	1561057	Argument	hexagon_control_regs [ rege ] . name		1560820	3					
ANR	1561058	MemberAccess	hexagon_control_regs [ rege ] . name		1560820	0					
ANR	1561059	ArrayIndexing	hexagon_control_regs [ rege ]		1560820	0					
ANR	1561060	Identifier	hexagon_control_regs		1560820	0					
ANR	1561061	Identifier	rege		1560820	1					
ANR	1561062	Identifier	name		1560820	1					
ANR	1561063	ExpressionStatement	* errmsg = buf	2335:12:80474:80487	1560820	1	True				
ANR	1561064	AssignmentExpression	* errmsg = buf		1560820	0		=			
ANR	1561065	UnaryOperationExpression	* errmsg		1560820	0					
ANR	1561066	UnaryOperator	*		1560820	0					
ANR	1561067	Identifier	errmsg		1560820	1					
ANR	1561068	Identifier	buf		1560820	1					
ANR	1561069	IfStatement	if ( flag )		1560820	1					
ANR	1561070	Condition	flag	2337:12:80513:80516	1560820	0	True				
ANR	1561071	Identifier	flag		1560820	0					
ANR	1561072	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2338:10:80529:80564	1560820	1	True				
ANR	1561073	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1560820	0		|=			
ANR	1561074	UnaryOperationExpression	* flag		1560820	0					
ANR	1561075	UnaryOperator	*		1560820	0					
ANR	1561076	Identifier	flag		1560820	1					
ANR	1561077	Identifier	HEXAGON_OPERAND_IS_INVALID		1560820	1					
ANR	1561078	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1560820	13					
ANR	1561079	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2341:6:80581:80672	1560820	0	True				
ANR	1561080	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1560820	0					
ANR	1561081	Callee	hexagon_encode_operand		1560820	0					
ANR	1561082	Identifier	hexagon_encode_operand		1560820	0					
ANR	1561083	ArgumentList	operand		1560820	1					
ANR	1561084	Argument	operand		1560820	0					
ANR	1561085	Identifier	operand		1560820	0					
ANR	1561086	Argument	insn		1560820	1					
ANR	1561087	Identifier	insn		1560820	0					
ANR	1561088	Argument	opcode		1560820	2					
ANR	1561089	Identifier	opcode		1560820	0					
ANR	1561090	Argument	reg_even		1560820	3					
ANR	1561091	Identifier	reg_even		1560820	0					
ANR	1561092	Argument	NULL		1560820	4					
ANR	1561093	Identifier	NULL		1560820	0					
ANR	1561094	Argument	FALSE		1560820	5					
ANR	1561095	Identifier	FALSE		1560820	0					
ANR	1561096	Argument	FALSE		1560820	6					
ANR	1561097	Identifier	FALSE		1560820	0					
ANR	1561098	Argument	errmsg		1560820	7					
ANR	1561099	Identifier	errmsg		1560820	0					
ANR	1561100	CompoundStatement		67:4:1828:1828	1560820	1					
ANR	1561101	IfStatement	if ( flag )		1560820	0					
ANR	1561102	Condition	flag	2344:10:80691:80694	1560820	0	True				
ANR	1561103	Identifier	flag		1560820	0					
ANR	1561104	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2345:8:80705:80737	1560820	1	True				
ANR	1561105	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		1560820	0		|=			
ANR	1561106	UnaryOperationExpression	* flag		1560820	0					
ANR	1561107	UnaryOperator	*		1560820	0					
ANR	1561108	Identifier	flag		1560820	1					
ANR	1561109	Identifier	HEXAGON_OPERAND_IS_PAIR		1560820	1					
ANR	1561110	ExpressionStatement	* val = reg_even	2347:6:80746:80761	1560820	1	True				
ANR	1561111	AssignmentExpression	* val = reg_even		1560820	0		=			
ANR	1561112	UnaryOperationExpression	* val		1560820	0					
ANR	1561113	UnaryOperator	*		1560820	0					
ANR	1561114	Identifier	val		1560820	1					
ANR	1561115	Identifier	reg_even		1560820	1					
ANR	1561116	ReturnStatement	return ( input ) ;	2348:6:80769:80783	1560820	2	True				
ANR	1561117	Identifier	input		1560820	0					
ANR	1561118	ReturnStatement	return NULL ;	2351:2:80794:80805	1560820	14	True				
ANR	1561119	Identifier	NULL		1560820	0					
ANR	1561120	ReturnType	static char *		1560820	1					
ANR	1561121	Identifier	hexagon_parse_dcreg		1560820	2					
ANR	1561122	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1560820	3					
ANR	1561123	Parameter	const hexagon_operand * operand	2275:1:78717:78746	1560820	0	True				
ANR	1561124	ParameterType	const hexagon_operand *		1560820	0					
ANR	1561125	Identifier	operand		1560820	1					
ANR	1561126	Parameter	hexagon_insn * insn	2275:33:78749:78766	1560820	1	True				
ANR	1561127	ParameterType	hexagon_insn *		1560820	0					
ANR	1561128	Identifier	insn		1560820	1					
ANR	1561129	Parameter	const hexagon_opcode * opcode	2275:53:78769:78796	1560820	2	True				
ANR	1561130	ParameterType	const hexagon_opcode *		1560820	0					
ANR	1561131	Identifier	opcode		1560820	1					
ANR	1561132	Parameter	char * input	2276:1:78800:78810	1560820	3	True				
ANR	1561133	ParameterType	char *		1560820	0					
ANR	1561134	Identifier	input		1560820	1					
ANR	1561135	Parameter	long * val	2276:14:78813:78821	1560820	4	True				
ANR	1561136	ParameterType	long *		1560820	0					
ANR	1561137	Identifier	val		1560820	1					
ANR	1561138	Parameter	int * flag	2276:25:78824:78832	1560820	5	True				
ANR	1561139	ParameterType	int *		1560820	0					
ANR	1561140	Identifier	flag		1560820	1					
ANR	1561141	Parameter	char * * errmsg	2276:36:78835:78847	1560820	6	True				
ANR	1561142	ParameterType	char * *		1560820	0					
ANR	1561143	Identifier	errmsg		1560820	1					
ANR	1561144	CFGEntryNode	ENTRY		1560820		True				
ANR	1561145	CFGExitNode	EXIT		1560820		True				
ANR	1561146	Symbol	flag		1560820						
ANR	1561147	Symbol	hexagon_control_regs [ rege ] . name		1560820						
ANR	1561148	Symbol	& rego		1560820						
ANR	1561149	Symbol	* operand		1560820						
ANR	1561150	Symbol	* val		1560820						
ANR	1561151	Symbol	opcode		1560820						
ANR	1561152	Symbol	hexagon_control_regs [ rege ] . flags		1560820						
ANR	1561153	Symbol	& input		1560820						
ANR	1561154	Symbol	HEXAGON_OPERAND_IS_INVALID		1560820						
ANR	1561155	Symbol	hexagon_reg_num		1560820						
ANR	1561156	Symbol	hexagon_verify_hw		1560820						
ANR	1561157	Symbol	hexagon_control_regs [ rego ] . flags		1560820						
ANR	1561158	Symbol	& rege		1560820						
ANR	1561159	Symbol	HEXAGON_OPERAND_IS_PAIR		1560820						
ANR	1561160	Symbol	hexagon_control_regs_count		1560820						
ANR	1561161	Symbol	val		1560820						
ANR	1561162	Symbol	NULL		1560820						
ANR	1561163	Symbol	HEXAGON_OPERAND_IS_WRITE		1560820						
ANR	1561164	Symbol	HEXAGON_REG_IS_READONLY		1560820						
ANR	1561165	Symbol	rege		1560820						
ANR	1561166	Symbol	operand -> flags		1560820						
ANR	1561167	Symbol	* rege		1560820						
ANR	1561168	Symbol	hexagon_control_regs [ rego ] . name		1560820						
ANR	1561169	Symbol	errmsg		1560820						
ANR	1561170	Symbol	reg_even		1560820						
ANR	1561171	Symbol	rego		1560820						
ANR	1561172	Symbol	insn		1560820						
ANR	1561173	Symbol	input		1560820						
ANR	1561174	Symbol	* hexagon_control_regs		1560820						
ANR	1561175	Symbol	buf		1560820						
ANR	1561176	Symbol	* rego		1560820						
ANR	1561177	Symbol	hexagon_encode_operand		1560820						
ANR	1561178	Symbol	hexagon_control_regs		1560820						
ANR	1561179	Symbol	FALSE		1560820						
ANR	1561180	Symbol	reg_odd		1560820						
ANR	1561181	Symbol	* errmsg		1560820						
ANR	1561182	Symbol	* flag		1560820						
ANR	1561183	Symbol	operand		1560820						
ANR	1561184	Function	hexagon_parse_greg	2354:0:80810:81856							
ANR	1561185	FunctionDef	"hexagon_parse_greg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1561184	0					
ANR	1561186	CompoundStatement		2358:0:80977:81856	1561184	0					
ANR	1561187	IdentifierDeclStatement	size_t regn ;	2359:2:80981:80992	1561184	0	True				
ANR	1561188	IdentifierDecl	regn		1561184	0					
ANR	1561189	IdentifierDeclType	size_t		1561184	0					
ANR	1561190	Identifier	regn		1561184	1					
ANR	1561191	IdentifierDeclStatement	int reg ;	2360:2:80996:81003	1561184	1	True				
ANR	1561192	IdentifierDecl	reg		1561184	0					
ANR	1561193	IdentifierDeclType	int		1561184	0					
ANR	1561194	Identifier	reg		1561184	1					
ANR	1561195	Statement	static	2361:2:81007:81012	1561184	2	True				
ANR	1561196	IdentifierDeclStatement	char buf [ 150 ] ;	2361:9:81014:81028	1561184	3	True				
ANR	1561197	IdentifierDecl	buf [ 150 ]		1561184	0					
ANR	1561198	IdentifierDeclType	char [ 150 ]		1561184	0					
ANR	1561199	Identifier	buf		1561184	1					
ANR	1561200	PrimaryExpression	150		1561184	2					
ANR	1561201	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"	2363:2:81033:81137	1561184	4	True				
ANR	1561202	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"		1561184	0		=			
ANR	1561203	Identifier	reg		1561184	0					
ANR	1561204	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"		1561184	1					
ANR	1561205	Callee	hexagon_reg_num		1561184	0					
ANR	1561206	Identifier	hexagon_reg_num		1561184	0					
ANR	1561207	ArgumentList	operand		1561184	1					
ANR	1561208	Argument	operand		1561184	0					
ANR	1561209	Identifier	operand		1561184	0					
ANR	1561210	Argument	& input		1561184	1					
ANR	1561211	UnaryOperationExpression	& input		1561184	0					
ANR	1561212	UnaryOperator	&		1561184	0					
ANR	1561213	Identifier	input		1561184	1					
ANR	1561214	Argument	'\\0'		1561184	2					
ANR	1561215	PrimaryExpression	'\\0'		1561184	0					
ANR	1561216	Argument	hexagon_guest_regs		1561184	3					
ANR	1561217	Identifier	hexagon_guest_regs		1561184	0					
ANR	1561218	Argument	hexagon_guest_regs_count		1561184	4					
ANR	1561219	Identifier	hexagon_guest_regs_count		1561184	0					
ANR	1561220	Argument	& regn		1561184	5					
ANR	1561221	UnaryOperationExpression	& regn		1561184	0					
ANR	1561222	UnaryOperator	&		1561184	0					
ANR	1561223	Identifier	regn		1561184	1					
ANR	1561224	Argument	'\\0'		1561184	6					
ANR	1561225	PrimaryExpression	'\\0'		1561184	0					
ANR	1561226	IfStatement	if ( reg < 0 )		1561184	5					
ANR	1561227	Condition	reg < 0	2364:6:81145:81151	1561184	0	True				
ANR	1561228	RelationalExpression	reg < 0		1561184	0		<			
ANR	1561229	Identifier	reg		1561184	0					
ANR	1561230	PrimaryExpression	0		1561184	1					
ANR	1561231	ReturnStatement	return ( NULL ) ;	2365:4:81158:81171	1561184	1	True				
ANR	1561232	Identifier	NULL		1561184	0					
ANR	1561233	IfStatement	if ( flag )		1561184	6					
ANR	1561234	Condition	flag	2367:6:81180:81183	1561184	0	True				
ANR	1561235	Identifier	flag		1561184	0					
ANR	1561236	ExpressionStatement	* flag = 0	2368:4:81190:81199	1561184	1	True				
ANR	1561237	AssignmentExpression	* flag = 0		1561184	0		=			
ANR	1561238	UnaryOperationExpression	* flag		1561184	0					
ANR	1561239	UnaryOperator	*		1561184	0					
ANR	1561240	Identifier	flag		1561184	1					
ANR	1561241	PrimaryExpression	0		1561184	1					
ANR	1561242	IfStatement	if ( ! hexagon_verify_hw )		1561184	7					
ANR	1561243	Condition	! hexagon_verify_hw	2370:6:81208:81225	1561184	0	True				
ANR	1561244	UnaryOperationExpression	! hexagon_verify_hw		1561184	0					
ANR	1561245	UnaryOperator	!		1561184	0					
ANR	1561246	Identifier	hexagon_verify_hw		1561184	1					
ANR	1561247	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		1561184	1					
ANR	1561248	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2371:8:81236:81349	1561184	0	True				
ANR	1561249	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		1561184	0		&&			
ANR	1561250	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1561184	0		&			
ANR	1561251	PtrMemberAccess	operand -> flags		1561184	0					
ANR	1561252	Identifier	operand		1561184	0					
ANR	1561253	Identifier	flags		1561184	1					
ANR	1561254	Identifier	HEXAGON_OPERAND_IS_WRITE		1561184	1					
ANR	1561255	BitAndExpression	hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		1561184	1		&			
ANR	1561256	MemberAccess	hexagon_guest_regs [ regn ] . flags		1561184	0					
ANR	1561257	ArrayIndexing	hexagon_guest_regs [ regn ]		1561184	0					
ANR	1561258	Identifier	hexagon_guest_regs		1561184	0					
ANR	1561259	Identifier	regn		1561184	1					
ANR	1561260	Identifier	flags		1561184	1					
ANR	1561261	Identifier	HEXAGON_REG_IS_READONLY		1561184	1					
ANR	1561262	CompoundStatement		16:6:380:380	1561184	1					
ANR	1561263	IfStatement	if ( errmsg )		1561184	0					
ANR	1561264	Condition	errmsg	2374:12:81372:81377	1561184	0	True				
ANR	1561265	Identifier	errmsg		1561184	0					
ANR	1561266	CompoundStatement		18:10:412:412	1561184	1					
ANR	1561267	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_guest_regs [ regn ] . name )"	2376:12:81404:81514	1561184	0	True				
ANR	1561268	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_guest_regs [ regn ] . name )"		1561184	0					
ANR	1561269	Callee	sprintf		1561184	0					
ANR	1561270	Identifier	sprintf		1561184	0					
ANR	1561271	ArgumentList	buf		1561184	1					
ANR	1561272	Argument	buf		1561184	0					
ANR	1561273	Identifier	buf		1561184	0					
ANR	1561274	Argument	"""cannot write to read-only register `%s'."""		1561184	1					
ANR	1561275	PrimaryExpression	"""cannot write to read-only register `%s'."""		1561184	0					
ANR	1561276	Argument	hexagon_guest_regs [ regn ] . name		1561184	2					
ANR	1561277	MemberAccess	hexagon_guest_regs [ regn ] . name		1561184	0					
ANR	1561278	ArrayIndexing	hexagon_guest_regs [ regn ]		1561184	0					
ANR	1561279	Identifier	hexagon_guest_regs		1561184	0					
ANR	1561280	Identifier	regn		1561184	1					
ANR	1561281	Identifier	name		1561184	1					
ANR	1561282	ExpressionStatement	* errmsg = buf	2378:12:81528:81541	1561184	1	True				
ANR	1561283	AssignmentExpression	* errmsg = buf		1561184	0		=			
ANR	1561284	UnaryOperationExpression	* errmsg		1561184	0					
ANR	1561285	UnaryOperator	*		1561184	0					
ANR	1561286	Identifier	errmsg		1561184	1					
ANR	1561287	Identifier	buf		1561184	1					
ANR	1561288	IfStatement	if ( flag )		1561184	1					
ANR	1561289	Condition	flag	2380:12:81567:81570	1561184	0	True				
ANR	1561290	Identifier	flag		1561184	0					
ANR	1561291	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2381:10:81583:81618	1561184	1	True				
ANR	1561292	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1561184	0		|=			
ANR	1561293	UnaryOperationExpression	* flag		1561184	0					
ANR	1561294	UnaryOperator	*		1561184	0					
ANR	1561295	Identifier	flag		1561184	1					
ANR	1561296	Identifier	HEXAGON_OPERAND_IS_INVALID		1561184	1					
ANR	1561297	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1561184	8					
ANR	1561298	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2384:6:81635:81721	1561184	0	True				
ANR	1561299	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1561184	0					
ANR	1561300	Callee	hexagon_encode_operand		1561184	0					
ANR	1561301	Identifier	hexagon_encode_operand		1561184	0					
ANR	1561302	ArgumentList	operand		1561184	1					
ANR	1561303	Argument	operand		1561184	0					
ANR	1561304	Identifier	operand		1561184	0					
ANR	1561305	Argument	insn		1561184	1					
ANR	1561306	Identifier	insn		1561184	0					
ANR	1561307	Argument	opcode		1561184	2					
ANR	1561308	Identifier	opcode		1561184	0					
ANR	1561309	Argument	reg		1561184	3					
ANR	1561310	Identifier	reg		1561184	0					
ANR	1561311	Argument	NULL		1561184	4					
ANR	1561312	Identifier	NULL		1561184	0					
ANR	1561313	Argument	FALSE		1561184	5					
ANR	1561314	Identifier	FALSE		1561184	0					
ANR	1561315	Argument	FALSE		1561184	6					
ANR	1561316	Identifier	FALSE		1561184	0					
ANR	1561317	Argument	errmsg		1561184	7					
ANR	1561318	Identifier	errmsg		1561184	0					
ANR	1561319	CompoundStatement		29:4:750:750	1561184	1					
ANR	1561320	IfStatement	if ( flag )		1561184	0					
ANR	1561321	Condition	flag	2387:10:81740:81743	1561184	0	True				
ANR	1561322	Identifier	flag		1561184	0					
ANR	1561323	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_CONTROL	2388:8:81754:81789	1561184	1	True				
ANR	1561324	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_CONTROL		1561184	0		|=			
ANR	1561325	UnaryOperationExpression	* flag		1561184	0					
ANR	1561326	UnaryOperator	*		1561184	0					
ANR	1561327	Identifier	flag		1561184	1					
ANR	1561328	Identifier	HEXAGON_OPERAND_IS_CONTROL		1561184	1					
ANR	1561329	ExpressionStatement	* val = reg	2390:6:81798:81808	1561184	1	True				
ANR	1561330	AssignmentExpression	* val = reg		1561184	0		=			
ANR	1561331	UnaryOperationExpression	* val		1561184	0					
ANR	1561332	UnaryOperator	*		1561184	0					
ANR	1561333	Identifier	val		1561184	1					
ANR	1561334	Identifier	reg		1561184	1					
ANR	1561335	ReturnStatement	return ( input ) ;	2391:6:81816:81830	1561184	2	True				
ANR	1561336	Identifier	input		1561184	0					
ANR	1561337	ReturnStatement	return ( NULL ) ;	2394:2:81841:81854	1561184	9	True				
ANR	1561338	Identifier	NULL		1561184	0					
ANR	1561339	ReturnType	static char *		1561184	1					
ANR	1561340	Identifier	hexagon_parse_greg		1561184	2					
ANR	1561341	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1561184	3					
ANR	1561342	Parameter	const hexagon_operand * operand	2356:1:80844:80873	1561184	0	True				
ANR	1561343	ParameterType	const hexagon_operand *		1561184	0					
ANR	1561344	Identifier	operand		1561184	1					
ANR	1561345	Parameter	hexagon_insn * insn	2356:33:80876:80893	1561184	1	True				
ANR	1561346	ParameterType	hexagon_insn *		1561184	0					
ANR	1561347	Identifier	insn		1561184	1					
ANR	1561348	Parameter	const hexagon_opcode * opcode	2356:53:80896:80923	1561184	2	True				
ANR	1561349	ParameterType	const hexagon_opcode *		1561184	0					
ANR	1561350	Identifier	opcode		1561184	1					
ANR	1561351	Parameter	char * input	2357:1:80927:80937	1561184	3	True				
ANR	1561352	ParameterType	char *		1561184	0					
ANR	1561353	Identifier	input		1561184	1					
ANR	1561354	Parameter	long * val	2357:14:80940:80948	1561184	4	True				
ANR	1561355	ParameterType	long *		1561184	0					
ANR	1561356	Identifier	val		1561184	1					
ANR	1561357	Parameter	int * flag	2357:25:80951:80959	1561184	5	True				
ANR	1561358	ParameterType	int *		1561184	0					
ANR	1561359	Identifier	flag		1561184	1					
ANR	1561360	Parameter	char * * errmsg	2357:36:80962:80974	1561184	6	True				
ANR	1561361	ParameterType	char * *		1561184	0					
ANR	1561362	Identifier	errmsg		1561184	1					
ANR	1561363	CFGEntryNode	ENTRY		1561184		True				
ANR	1561364	CFGExitNode	EXIT		1561184		True				
ANR	1561365	Symbol	flag		1561184						
ANR	1561366	Symbol	& regn		1561184						
ANR	1561367	Symbol	* operand		1561184						
ANR	1561368	Symbol	* hexagon_guest_regs		1561184						
ANR	1561369	Symbol	hexagon_guest_regs_count		1561184						
ANR	1561370	Symbol	* val		1561184						
ANR	1561371	Symbol	opcode		1561184						
ANR	1561372	Symbol	hexagon_guest_regs [ regn ] . name		1561184						
ANR	1561373	Symbol	& input		1561184						
ANR	1561374	Symbol	HEXAGON_OPERAND_IS_INVALID		1561184						
ANR	1561375	Symbol	reg		1561184						
ANR	1561376	Symbol	hexagon_reg_num		1561184						
ANR	1561377	Symbol	hexagon_verify_hw		1561184						
ANR	1561378	Symbol	HEXAGON_OPERAND_IS_CONTROL		1561184						
ANR	1561379	Symbol	val		1561184						
ANR	1561380	Symbol	NULL		1561184						
ANR	1561381	Symbol	HEXAGON_REG_IS_READONLY		1561184						
ANR	1561382	Symbol	HEXAGON_OPERAND_IS_WRITE		1561184						
ANR	1561383	Symbol	operand -> flags		1561184						
ANR	1561384	Symbol	hexagon_guest_regs		1561184						
ANR	1561385	Symbol	errmsg		1561184						
ANR	1561386	Symbol	regn		1561184						
ANR	1561387	Symbol	insn		1561184						
ANR	1561388	Symbol	input		1561184						
ANR	1561389	Symbol	buf		1561184						
ANR	1561390	Symbol	* regn		1561184						
ANR	1561391	Symbol	hexagon_encode_operand		1561184						
ANR	1561392	Symbol	hexagon_guest_regs [ regn ] . flags		1561184						
ANR	1561393	Symbol	FALSE		1561184						
ANR	1561394	Symbol	* flag		1561184						
ANR	1561395	Symbol	* errmsg		1561184						
ANR	1561396	Symbol	operand		1561184						
ANR	1561397	Function	hexagon_parse_dgreg	2397:0:81859:83968							
ANR	1561398	FunctionDef	"hexagon_parse_dgreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1561397	0					
ANR	1561399	CompoundStatement		2401:0:82027:83968	1561397	0					
ANR	1561400	Statement	static	2402:2:82031:82036	1561397	0	True				
ANR	1561401	IdentifierDeclStatement	char buf [ 100 ] ;	2402:9:82038:82052	1561397	1	True				
ANR	1561402	IdentifierDecl	buf [ 100 ]		1561397	0					
ANR	1561403	IdentifierDeclType	char [ 100 ]		1561397	0					
ANR	1561404	Identifier	buf		1561397	1					
ANR	1561405	PrimaryExpression	100		1561397	2					
ANR	1561406	IdentifierDeclStatement	"size_t rege , rego ;"	2403:2:82056:82073	1561397	2	True				
ANR	1561407	IdentifierDecl	rege		1561397	0					
ANR	1561408	IdentifierDeclType	size_t		1561397	0					
ANR	1561409	Identifier	rege		1561397	1					
ANR	1561410	IdentifierDecl	rego		1561397	1					
ANR	1561411	IdentifierDeclType	size_t		1561397	0					
ANR	1561412	Identifier	rego		1561397	1					
ANR	1561413	IdentifierDeclStatement	int reg_odd ;	2404:2:82077:82088	1561397	3	True				
ANR	1561414	IdentifierDecl	reg_odd		1561397	0					
ANR	1561415	IdentifierDeclType	int		1561397	0					
ANR	1561416	Identifier	reg_odd		1561397	1					
ANR	1561417	IdentifierDeclStatement	int reg_even ;	2405:2:82092:82104	1561397	4	True				
ANR	1561418	IdentifierDecl	reg_even		1561397	0					
ANR	1561419	IdentifierDeclType	int		1561397	0					
ANR	1561420	Identifier	reg_even		1561397	1					
ANR	1561421	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"	2407:2:82109:82218	1561397	5	True				
ANR	1561422	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"		1561397	0		=			
ANR	1561423	Identifier	reg_odd		1561397	0					
ANR	1561424	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"		1561397	1					
ANR	1561425	Callee	hexagon_reg_num		1561397	0					
ANR	1561426	Identifier	hexagon_reg_num		1561397	0					
ANR	1561427	ArgumentList	operand		1561397	1					
ANR	1561428	Argument	operand		1561397	0					
ANR	1561429	Identifier	operand		1561397	0					
ANR	1561430	Argument	& input		1561397	1					
ANR	1561431	UnaryOperationExpression	& input		1561397	0					
ANR	1561432	UnaryOperator	&		1561397	0					
ANR	1561433	Identifier	input		1561397	1					
ANR	1561434	Argument	'\\0'		1561397	2					
ANR	1561435	PrimaryExpression	'\\0'		1561397	0					
ANR	1561436	Argument	hexagon_guest_regs		1561397	3					
ANR	1561437	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561438	Argument	hexagon_guest_regs_count		1561397	4					
ANR	1561439	Identifier	hexagon_guest_regs_count		1561397	0					
ANR	1561440	Argument	& rego		1561397	5					
ANR	1561441	UnaryOperationExpression	& rego		1561397	0					
ANR	1561442	UnaryOperator	&		1561397	0					
ANR	1561443	Identifier	rego		1561397	1					
ANR	1561444	Argument	'\\0'		1561397	6					
ANR	1561445	PrimaryExpression	'\\0'		1561397	0					
ANR	1561446	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"	2408:2:82222:82330	1561397	6	True				
ANR	1561447	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"		1561397	0		=			
ANR	1561448	Identifier	reg_even		1561397	0					
ANR	1561449	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"		1561397	1					
ANR	1561450	Callee	hexagon_reg_num		1561397	0					
ANR	1561451	Identifier	hexagon_reg_num		1561397	0					
ANR	1561452	ArgumentList	operand		1561397	1					
ANR	1561453	Argument	operand		1561397	0					
ANR	1561454	Identifier	operand		1561397	0					
ANR	1561455	Argument	& input		1561397	1					
ANR	1561456	UnaryOperationExpression	& input		1561397	0					
ANR	1561457	UnaryOperator	&		1561397	0					
ANR	1561458	Identifier	input		1561397	1					
ANR	1561459	Argument	'\\0'		1561397	2					
ANR	1561460	PrimaryExpression	'\\0'		1561397	0					
ANR	1561461	Argument	hexagon_guest_regs		1561397	3					
ANR	1561462	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561463	Argument	hexagon_guest_regs_count		1561397	4					
ANR	1561464	Identifier	hexagon_guest_regs_count		1561397	0					
ANR	1561465	Argument	& rege		1561397	5					
ANR	1561466	UnaryOperationExpression	& rege		1561397	0					
ANR	1561467	UnaryOperator	&		1561397	0					
ANR	1561468	Identifier	rege		1561397	1					
ANR	1561469	Argument	'g'		1561397	6					
ANR	1561470	PrimaryExpression	'g'		1561397	0					
ANR	1561471	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1561397	7					
ANR	1561472	Condition	reg_odd < 0 || reg_even < 0	2409:6:82338:82364	1561397	0	True				
ANR	1561473	OrExpression	reg_odd < 0 || reg_even < 0		1561397	0		||			
ANR	1561474	RelationalExpression	reg_odd < 0		1561397	0		<			
ANR	1561475	Identifier	reg_odd		1561397	0					
ANR	1561476	PrimaryExpression	0		1561397	1					
ANR	1561477	RelationalExpression	reg_even < 0		1561397	1		<			
ANR	1561478	Identifier	reg_even		1561397	0					
ANR	1561479	PrimaryExpression	0		1561397	1					
ANR	1561480	ReturnStatement	return ( NULL ) ;	2410:4:82371:82384	1561397	1	True				
ANR	1561481	Identifier	NULL		1561397	0					
ANR	1561482	IfStatement	if ( reg_odd % 2 != 1 )		1561397	8					
ANR	1561483	Condition	reg_odd % 2 != 1	2413:6:82438:82453	1561397	0	True				
ANR	1561484	EqualityExpression	reg_odd % 2 != 1		1561397	0		!=			
ANR	1561485	MultiplicativeExpression	reg_odd % 2		1561397	0		%			
ANR	1561486	Identifier	reg_odd		1561397	0					
ANR	1561487	PrimaryExpression	2		1561397	1					
ANR	1561488	PrimaryExpression	1		1561397	1					
ANR	1561489	CompoundStatement		14:4:432:432	1561397	1					
ANR	1561490	IfStatement	if ( errmsg )		1561397	0					
ANR	1561491	Condition	errmsg	2415:10:82472:82477	1561397	0	True				
ANR	1561492	Identifier	errmsg		1561397	0					
ANR	1561493	CompoundStatement		16:8:460:460	1561397	1					
ANR	1561494	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2417:12:82502:82559	1561397	0	True				
ANR	1561495	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1561397	0					
ANR	1561496	Callee	sprintf		1561397	0					
ANR	1561497	Identifier	sprintf		1561397	0					
ANR	1561498	ArgumentList	buf		1561397	1					
ANR	1561499	Argument	buf		1561397	0					
ANR	1561500	Identifier	buf		1561397	0					
ANR	1561501	Argument	"""invalid odd register number: %d"""		1561397	1					
ANR	1561502	PrimaryExpression	"""invalid odd register number: %d"""		1561397	0					
ANR	1561503	Argument	reg_odd		1561397	2					
ANR	1561504	Identifier	reg_odd		1561397	0					
ANR	1561505	ExpressionStatement	* errmsg = buf	2418:12:82573:82586	1561397	1	True				
ANR	1561506	AssignmentExpression	* errmsg = buf		1561397	0		=			
ANR	1561507	UnaryOperationExpression	* errmsg		1561397	0					
ANR	1561508	UnaryOperator	*		1561397	0					
ANR	1561509	Identifier	errmsg		1561397	1					
ANR	1561510	Identifier	buf		1561397	1					
ANR	1561511	ReturnStatement	return NULL ;	2420:6:82604:82615	1561397	1	True				
ANR	1561512	Identifier	NULL		1561397	0					
ANR	1561513	IfStatement	if ( reg_even % 2 != 0 )		1561397	9					
ANR	1561514	Condition	reg_even % 2 != 0	2424:6:82676:82692	1561397	0	True				
ANR	1561515	EqualityExpression	reg_even % 2 != 0		1561397	0		!=			
ANR	1561516	MultiplicativeExpression	reg_even % 2		1561397	0		%			
ANR	1561517	Identifier	reg_even		1561397	0					
ANR	1561518	PrimaryExpression	2		1561397	1					
ANR	1561519	PrimaryExpression	0		1561397	1					
ANR	1561520	CompoundStatement		25:4:671:671	1561397	1					
ANR	1561521	IfStatement	if ( errmsg )		1561397	0					
ANR	1561522	Condition	errmsg	2426:10:82711:82716	1561397	0	True				
ANR	1561523	Identifier	errmsg		1561397	0					
ANR	1561524	CompoundStatement		27:8:699:699	1561397	1					
ANR	1561525	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2428:12:82741:82800	1561397	0	True				
ANR	1561526	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1561397	0					
ANR	1561527	Callee	sprintf		1561397	0					
ANR	1561528	Identifier	sprintf		1561397	0					
ANR	1561529	ArgumentList	buf		1561397	1					
ANR	1561530	Argument	buf		1561397	0					
ANR	1561531	Identifier	buf		1561397	0					
ANR	1561532	Argument	"""invalid even register number: %d"""		1561397	1					
ANR	1561533	PrimaryExpression	"""invalid even register number: %d"""		1561397	0					
ANR	1561534	Argument	reg_even		1561397	2					
ANR	1561535	Identifier	reg_even		1561397	0					
ANR	1561536	ExpressionStatement	* errmsg = buf	2429:12:82814:82827	1561397	1	True				
ANR	1561537	AssignmentExpression	* errmsg = buf		1561397	0		=			
ANR	1561538	UnaryOperationExpression	* errmsg		1561397	0					
ANR	1561539	UnaryOperator	*		1561397	0					
ANR	1561540	Identifier	errmsg		1561397	1					
ANR	1561541	Identifier	buf		1561397	1					
ANR	1561542	ReturnStatement	return NULL ;	2431:6:82845:82856	1561397	1	True				
ANR	1561543	Identifier	NULL		1561397	0					
ANR	1561544	IfStatement	if ( reg_odd != reg_even + 1 )		1561397	10					
ANR	1561545	Condition	reg_odd != reg_even + 1	2435:6:82919:82941	1561397	0	True				
ANR	1561546	EqualityExpression	reg_odd != reg_even + 1		1561397	0		!=			
ANR	1561547	Identifier	reg_odd		1561397	0					
ANR	1561548	AdditiveExpression	reg_even + 1		1561397	1		+			
ANR	1561549	Identifier	reg_even		1561397	0					
ANR	1561550	PrimaryExpression	1		1561397	1					
ANR	1561551	CompoundStatement		36:4:920:920	1561397	1					
ANR	1561552	IfStatement	if ( errmsg )		1561397	0					
ANR	1561553	Condition	errmsg	2437:10:82960:82965	1561397	0	True				
ANR	1561554	Identifier	errmsg		1561397	0					
ANR	1561555	CompoundStatement		38:8:948:948	1561397	1					
ANR	1561556	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2439:12:82990:83083	1561397	0	True				
ANR	1561557	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1561397	0					
ANR	1561558	Callee	sprintf		1561397	0					
ANR	1561559	Identifier	sprintf		1561397	0					
ANR	1561560	ArgumentList	buf		1561397	1					
ANR	1561561	Argument	buf		1561397	0					
ANR	1561562	Identifier	buf		1561397	0					
ANR	1561563	Argument	"""registers must be consecutive: %d:%d"""		1561397	1					
ANR	1561564	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1561397	0					
ANR	1561565	Argument	reg_odd		1561397	2					
ANR	1561566	Identifier	reg_odd		1561397	0					
ANR	1561567	Argument	reg_even		1561397	3					
ANR	1561568	Identifier	reg_even		1561397	0					
ANR	1561569	ExpressionStatement	* errmsg = buf	2441:12:83097:83110	1561397	1	True				
ANR	1561570	AssignmentExpression	* errmsg = buf		1561397	0		=			
ANR	1561571	UnaryOperationExpression	* errmsg		1561397	0					
ANR	1561572	UnaryOperator	*		1561397	0					
ANR	1561573	Identifier	errmsg		1561397	1					
ANR	1561574	Identifier	buf		1561397	1					
ANR	1561575	ReturnStatement	return NULL ;	2443:6:83128:83139	1561397	1	True				
ANR	1561576	Identifier	NULL		1561397	0					
ANR	1561577	IfStatement	if ( flag )		1561397	11					
ANR	1561578	Condition	flag	2446:6:83154:83157	1561397	0	True				
ANR	1561579	Identifier	flag		1561397	0					
ANR	1561580	ExpressionStatement	* flag = 0	2447:4:83164:83173	1561397	1	True				
ANR	1561581	AssignmentExpression	* flag = 0		1561397	0		=			
ANR	1561582	UnaryOperationExpression	* flag		1561397	0					
ANR	1561583	UnaryOperator	*		1561397	0					
ANR	1561584	Identifier	flag		1561397	1					
ANR	1561585	PrimaryExpression	0		1561397	1					
ANR	1561586	IfStatement	if ( ! hexagon_verify_hw )		1561397	12					
ANR	1561587	Condition	! hexagon_verify_hw	2449:6:83182:83199	1561397	0	True				
ANR	1561588	UnaryOperationExpression	! hexagon_verify_hw		1561397	0					
ANR	1561589	UnaryOperator	!		1561397	0					
ANR	1561590	Identifier	hexagon_verify_hw		1561397	1					
ANR	1561591	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		1561397	1					
ANR	1561592	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2450:8:83210:83400	1561397	0	True				
ANR	1561593	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		1561397	0		&&			
ANR	1561594	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1561397	0		&			
ANR	1561595	PtrMemberAccess	operand -> flags		1561397	0					
ANR	1561596	Identifier	operand		1561397	0					
ANR	1561597	Identifier	flags		1561397	1					
ANR	1561598	Identifier	HEXAGON_OPERAND_IS_WRITE		1561397	1					
ANR	1561599	OrExpression	( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		1561397	1		||			
ANR	1561600	BitAndExpression	hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		1561397	0		&			
ANR	1561601	MemberAccess	hexagon_guest_regs [ rege ] . flags		1561397	0					
ANR	1561602	ArrayIndexing	hexagon_guest_regs [ rege ]		1561397	0					
ANR	1561603	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561604	Identifier	rege		1561397	1					
ANR	1561605	Identifier	flags		1561397	1					
ANR	1561606	Identifier	HEXAGON_REG_IS_READONLY		1561397	1					
ANR	1561607	BitAndExpression	hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		1561397	1		&			
ANR	1561608	MemberAccess	hexagon_guest_regs [ rego ] . flags		1561397	0					
ANR	1561609	ArrayIndexing	hexagon_guest_regs [ rego ]		1561397	0					
ANR	1561610	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561611	Identifier	rego		1561397	1					
ANR	1561612	Identifier	flags		1561397	1					
ANR	1561613	Identifier	HEXAGON_REG_IS_READONLY		1561397	1					
ANR	1561614	CompoundStatement		53:6:1381:1381	1561397	1					
ANR	1561615	IfStatement	if ( errmsg )		1561397	0					
ANR	1561616	Condition	errmsg	2454:12:83423:83428	1561397	0	True				
ANR	1561617	Identifier	errmsg		1561397	0					
ANR	1561618	CompoundStatement		55:10:1413:1413	1561397	1					
ANR	1561619	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_guest_regs [ rego ] . name , hexagon_guest_regs [ rege ] . name )"	2456:12:83455:83621	1561397	0	True				
ANR	1561620	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_guest_regs [ rego ] . name , hexagon_guest_regs [ rege ] . name )"		1561397	0					
ANR	1561621	Callee	sprintf		1561397	0					
ANR	1561622	Identifier	sprintf		1561397	0					
ANR	1561623	ArgumentList	buf		1561397	1					
ANR	1561624	Argument	buf		1561397	0					
ANR	1561625	Identifier	buf		1561397	0					
ANR	1561626	Argument	"""cannot write to read-only register `%s:%s'."""		1561397	1					
ANR	1561627	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		1561397	0					
ANR	1561628	Argument	hexagon_guest_regs [ rego ] . name		1561397	2					
ANR	1561629	MemberAccess	hexagon_guest_regs [ rego ] . name		1561397	0					
ANR	1561630	ArrayIndexing	hexagon_guest_regs [ rego ]		1561397	0					
ANR	1561631	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561632	Identifier	rego		1561397	1					
ANR	1561633	Identifier	name		1561397	1					
ANR	1561634	Argument	hexagon_guest_regs [ rege ] . name		1561397	3					
ANR	1561635	MemberAccess	hexagon_guest_regs [ rege ] . name		1561397	0					
ANR	1561636	ArrayIndexing	hexagon_guest_regs [ rege ]		1561397	0					
ANR	1561637	Identifier	hexagon_guest_regs		1561397	0					
ANR	1561638	Identifier	rege		1561397	1					
ANR	1561639	Identifier	name		1561397	1					
ANR	1561640	ExpressionStatement	* errmsg = buf	2459:12:83635:83648	1561397	1	True				
ANR	1561641	AssignmentExpression	* errmsg = buf		1561397	0		=			
ANR	1561642	UnaryOperationExpression	* errmsg		1561397	0					
ANR	1561643	UnaryOperator	*		1561397	0					
ANR	1561644	Identifier	errmsg		1561397	1					
ANR	1561645	Identifier	buf		1561397	1					
ANR	1561646	IfStatement	if ( flag )		1561397	1					
ANR	1561647	Condition	flag	2461:12:83674:83677	1561397	0	True				
ANR	1561648	Identifier	flag		1561397	0					
ANR	1561649	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2462:10:83690:83725	1561397	1	True				
ANR	1561650	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1561397	0		|=			
ANR	1561651	UnaryOperationExpression	* flag		1561397	0					
ANR	1561652	UnaryOperator	*		1561397	0					
ANR	1561653	Identifier	flag		1561397	1					
ANR	1561654	Identifier	HEXAGON_OPERAND_IS_INVALID		1561397	1					
ANR	1561655	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1561397	13					
ANR	1561656	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2465:6:83742:83833	1561397	0	True				
ANR	1561657	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1561397	0					
ANR	1561658	Callee	hexagon_encode_operand		1561397	0					
ANR	1561659	Identifier	hexagon_encode_operand		1561397	0					
ANR	1561660	ArgumentList	operand		1561397	1					
ANR	1561661	Argument	operand		1561397	0					
ANR	1561662	Identifier	operand		1561397	0					
ANR	1561663	Argument	insn		1561397	1					
ANR	1561664	Identifier	insn		1561397	0					
ANR	1561665	Argument	opcode		1561397	2					
ANR	1561666	Identifier	opcode		1561397	0					
ANR	1561667	Argument	reg_even		1561397	3					
ANR	1561668	Identifier	reg_even		1561397	0					
ANR	1561669	Argument	NULL		1561397	4					
ANR	1561670	Identifier	NULL		1561397	0					
ANR	1561671	Argument	FALSE		1561397	5					
ANR	1561672	Identifier	FALSE		1561397	0					
ANR	1561673	Argument	FALSE		1561397	6					
ANR	1561674	Identifier	FALSE		1561397	0					
ANR	1561675	Argument	errmsg		1561397	7					
ANR	1561676	Identifier	errmsg		1561397	0					
ANR	1561677	CompoundStatement		67:4:1812:1812	1561397	1					
ANR	1561678	IfStatement	if ( flag )		1561397	0					
ANR	1561679	Condition	flag	2468:10:83852:83855	1561397	0	True				
ANR	1561680	Identifier	flag		1561397	0					
ANR	1561681	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2469:8:83866:83898	1561397	1	True				
ANR	1561682	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		1561397	0		|=			
ANR	1561683	UnaryOperationExpression	* flag		1561397	0					
ANR	1561684	UnaryOperator	*		1561397	0					
ANR	1561685	Identifier	flag		1561397	1					
ANR	1561686	Identifier	HEXAGON_OPERAND_IS_PAIR		1561397	1					
ANR	1561687	ExpressionStatement	* val = reg_even	2471:6:83907:83922	1561397	1	True				
ANR	1561688	AssignmentExpression	* val = reg_even		1561397	0		=			
ANR	1561689	UnaryOperationExpression	* val		1561397	0					
ANR	1561690	UnaryOperator	*		1561397	0					
ANR	1561691	Identifier	val		1561397	1					
ANR	1561692	Identifier	reg_even		1561397	1					
ANR	1561693	ReturnStatement	return ( input ) ;	2472:6:83930:83944	1561397	2	True				
ANR	1561694	Identifier	input		1561397	0					
ANR	1561695	ReturnStatement	return NULL ;	2475:2:83955:83966	1561397	14	True				
ANR	1561696	Identifier	NULL		1561397	0					
ANR	1561697	ReturnType	static char *		1561397	1					
ANR	1561698	Identifier	hexagon_parse_dgreg		1561397	2					
ANR	1561699	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1561397	3					
ANR	1561700	Parameter	const hexagon_operand * operand	2399:1:81894:81923	1561397	0	True				
ANR	1561701	ParameterType	const hexagon_operand *		1561397	0					
ANR	1561702	Identifier	operand		1561397	1					
ANR	1561703	Parameter	hexagon_insn * insn	2399:33:81926:81943	1561397	1	True				
ANR	1561704	ParameterType	hexagon_insn *		1561397	0					
ANR	1561705	Identifier	insn		1561397	1					
ANR	1561706	Parameter	const hexagon_opcode * opcode	2399:53:81946:81973	1561397	2	True				
ANR	1561707	ParameterType	const hexagon_opcode *		1561397	0					
ANR	1561708	Identifier	opcode		1561397	1					
ANR	1561709	Parameter	char * input	2400:1:81977:81987	1561397	3	True				
ANR	1561710	ParameterType	char *		1561397	0					
ANR	1561711	Identifier	input		1561397	1					
ANR	1561712	Parameter	long * val	2400:14:81990:81998	1561397	4	True				
ANR	1561713	ParameterType	long *		1561397	0					
ANR	1561714	Identifier	val		1561397	1					
ANR	1561715	Parameter	int * flag	2400:25:82001:82009	1561397	5	True				
ANR	1561716	ParameterType	int *		1561397	0					
ANR	1561717	Identifier	flag		1561397	1					
ANR	1561718	Parameter	char * * errmsg	2400:36:82012:82024	1561397	6	True				
ANR	1561719	ParameterType	char * *		1561397	0					
ANR	1561720	Identifier	errmsg		1561397	1					
ANR	1561721	CFGEntryNode	ENTRY		1561397		True				
ANR	1561722	CFGExitNode	EXIT		1561397		True				
ANR	1561723	Symbol	flag		1561397						
ANR	1561724	Symbol	& rego		1561397						
ANR	1561725	Symbol	* operand		1561397						
ANR	1561726	Symbol	hexagon_guest_regs [ rego ] . name		1561397						
ANR	1561727	Symbol	* hexagon_guest_regs		1561397						
ANR	1561728	Symbol	hexagon_guest_regs_count		1561397						
ANR	1561729	Symbol	* val		1561397						
ANR	1561730	Symbol	opcode		1561397						
ANR	1561731	Symbol	& input		1561397						
ANR	1561732	Symbol	hexagon_guest_regs [ rego ] . flags		1561397						
ANR	1561733	Symbol	HEXAGON_OPERAND_IS_INVALID		1561397						
ANR	1561734	Symbol	hexagon_reg_num		1561397						
ANR	1561735	Symbol	hexagon_verify_hw		1561397						
ANR	1561736	Symbol	& rege		1561397						
ANR	1561737	Symbol	HEXAGON_OPERAND_IS_PAIR		1561397						
ANR	1561738	Symbol	val		1561397						
ANR	1561739	Symbol	NULL		1561397						
ANR	1561740	Symbol	HEXAGON_OPERAND_IS_WRITE		1561397						
ANR	1561741	Symbol	HEXAGON_REG_IS_READONLY		1561397						
ANR	1561742	Symbol	rege		1561397						
ANR	1561743	Symbol	* rege		1561397						
ANR	1561744	Symbol	operand -> flags		1561397						
ANR	1561745	Symbol	hexagon_guest_regs		1561397						
ANR	1561746	Symbol	errmsg		1561397						
ANR	1561747	Symbol	hexagon_guest_regs [ rege ] . flags		1561397						
ANR	1561748	Symbol	reg_even		1561397						
ANR	1561749	Symbol	rego		1561397						
ANR	1561750	Symbol	hexagon_guest_regs [ rege ] . name		1561397						
ANR	1561751	Symbol	insn		1561397						
ANR	1561752	Symbol	input		1561397						
ANR	1561753	Symbol	buf		1561397						
ANR	1561754	Symbol	* rego		1561397						
ANR	1561755	Symbol	hexagon_encode_operand		1561397						
ANR	1561756	Symbol	FALSE		1561397						
ANR	1561757	Symbol	reg_odd		1561397						
ANR	1561758	Symbol	* errmsg		1561397						
ANR	1561759	Symbol	* flag		1561397						
ANR	1561760	Symbol	operand		1561397						
ANR	1561761	Function	hexagon_parse_sreg	2478:0:83971:85036							
ANR	1561762	FunctionDef	"hexagon_parse_sreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1561761	0					
ANR	1561763	CompoundStatement		2482:0:84138:85036	1561761	0					
ANR	1561764	IdentifierDeclStatement	size_t regn ;	2483:2:84142:84153	1561761	0	True				
ANR	1561765	IdentifierDecl	regn		1561761	0					
ANR	1561766	IdentifierDeclType	size_t		1561761	0					
ANR	1561767	Identifier	regn		1561761	1					
ANR	1561768	IdentifierDeclStatement	int reg ;	2484:2:84157:84164	1561761	1	True				
ANR	1561769	IdentifierDecl	reg		1561761	0					
ANR	1561770	IdentifierDeclType	int		1561761	0					
ANR	1561771	Identifier	reg		1561761	1					
ANR	1561772	Statement	static	2485:2:84168:84173	1561761	2	True				
ANR	1561773	IdentifierDeclStatement	char buf [ 150 ] ;	2485:9:84175:84189	1561761	3	True				
ANR	1561774	IdentifierDecl	buf [ 150 ]		1561761	0					
ANR	1561775	IdentifierDeclType	char [ 150 ]		1561761	0					
ANR	1561776	Identifier	buf		1561761	1					
ANR	1561777	PrimaryExpression	150		1561761	2					
ANR	1561778	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"	2487:2:84194:84308	1561761	4	True				
ANR	1561779	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"		1561761	0		=			
ANR	1561780	Identifier	reg		1561761	0					
ANR	1561781	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"		1561761	1					
ANR	1561782	Callee	hexagon_reg_num		1561761	0					
ANR	1561783	Identifier	hexagon_reg_num		1561761	0					
ANR	1561784	ArgumentList	operand		1561761	1					
ANR	1561785	Argument	operand		1561761	0					
ANR	1561786	Identifier	operand		1561761	0					
ANR	1561787	Argument	& input		1561761	1					
ANR	1561788	UnaryOperationExpression	& input		1561761	0					
ANR	1561789	UnaryOperator	&		1561761	0					
ANR	1561790	Identifier	input		1561761	1					
ANR	1561791	Argument	'\\0'		1561761	2					
ANR	1561792	PrimaryExpression	'\\0'		1561761	0					
ANR	1561793	Argument	hexagon_supervisor_regs		1561761	3					
ANR	1561794	Identifier	hexagon_supervisor_regs		1561761	0					
ANR	1561795	Argument	hexagon_supervisor_regs_count		1561761	4					
ANR	1561796	Identifier	hexagon_supervisor_regs_count		1561761	0					
ANR	1561797	Argument	& regn		1561761	5					
ANR	1561798	UnaryOperationExpression	& regn		1561761	0					
ANR	1561799	UnaryOperator	&		1561761	0					
ANR	1561800	Identifier	regn		1561761	1					
ANR	1561801	Argument	'\\0'		1561761	6					
ANR	1561802	PrimaryExpression	'\\0'		1561761	0					
ANR	1561803	IfStatement	if ( reg < 0 )		1561761	5					
ANR	1561804	Condition	reg < 0	2488:6:84316:84322	1561761	0	True				
ANR	1561805	RelationalExpression	reg < 0		1561761	0		<			
ANR	1561806	Identifier	reg		1561761	0					
ANR	1561807	PrimaryExpression	0		1561761	1					
ANR	1561808	ReturnStatement	return ( NULL ) ;	2489:4:84329:84342	1561761	1	True				
ANR	1561809	Identifier	NULL		1561761	0					
ANR	1561810	IfStatement	if ( flag )		1561761	6					
ANR	1561811	Condition	flag	2491:6:84351:84354	1561761	0	True				
ANR	1561812	Identifier	flag		1561761	0					
ANR	1561813	ExpressionStatement	* flag = 0	2492:4:84361:84370	1561761	1	True				
ANR	1561814	AssignmentExpression	* flag = 0		1561761	0		=			
ANR	1561815	UnaryOperationExpression	* flag		1561761	0					
ANR	1561816	UnaryOperator	*		1561761	0					
ANR	1561817	Identifier	flag		1561761	1					
ANR	1561818	PrimaryExpression	0		1561761	1					
ANR	1561819	IfStatement	if ( ! hexagon_verify_hw )		1561761	7					
ANR	1561820	Condition	! hexagon_verify_hw	2494:6:84379:84396	1561761	0	True				
ANR	1561821	UnaryOperationExpression	! hexagon_verify_hw		1561761	0					
ANR	1561822	UnaryOperator	!		1561761	0					
ANR	1561823	Identifier	hexagon_verify_hw		1561761	1					
ANR	1561824	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		1561761	1					
ANR	1561825	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2495:8:84407:84525	1561761	0	True				
ANR	1561826	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		1561761	0		&&			
ANR	1561827	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1561761	0		&			
ANR	1561828	PtrMemberAccess	operand -> flags		1561761	0					
ANR	1561829	Identifier	operand		1561761	0					
ANR	1561830	Identifier	flags		1561761	1					
ANR	1561831	Identifier	HEXAGON_OPERAND_IS_WRITE		1561761	1					
ANR	1561832	BitAndExpression	hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		1561761	1		&			
ANR	1561833	MemberAccess	hexagon_supervisor_regs [ regn ] . flags		1561761	0					
ANR	1561834	ArrayIndexing	hexagon_supervisor_regs [ regn ]		1561761	0					
ANR	1561835	Identifier	hexagon_supervisor_regs		1561761	0					
ANR	1561836	Identifier	regn		1561761	1					
ANR	1561837	Identifier	flags		1561761	1					
ANR	1561838	Identifier	HEXAGON_REG_IS_READONLY		1561761	1					
ANR	1561839	CompoundStatement		16:6:395:395	1561761	1					
ANR	1561840	IfStatement	if ( errmsg )		1561761	0					
ANR	1561841	Condition	errmsg	2498:12:84548:84553	1561761	0	True				
ANR	1561842	Identifier	errmsg		1561761	0					
ANR	1561843	CompoundStatement		18:10:427:427	1561761	1					
ANR	1561844	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_supervisor_regs [ regn ] . name )"	2500:12:84580:84695	1561761	0	True				
ANR	1561845	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_supervisor_regs [ regn ] . name )"		1561761	0					
ANR	1561846	Callee	sprintf		1561761	0					
ANR	1561847	Identifier	sprintf		1561761	0					
ANR	1561848	ArgumentList	buf		1561761	1					
ANR	1561849	Argument	buf		1561761	0					
ANR	1561850	Identifier	buf		1561761	0					
ANR	1561851	Argument	"""cannot write to read-only register `%s'."""		1561761	1					
ANR	1561852	PrimaryExpression	"""cannot write to read-only register `%s'."""		1561761	0					
ANR	1561853	Argument	hexagon_supervisor_regs [ regn ] . name		1561761	2					
ANR	1561854	MemberAccess	hexagon_supervisor_regs [ regn ] . name		1561761	0					
ANR	1561855	ArrayIndexing	hexagon_supervisor_regs [ regn ]		1561761	0					
ANR	1561856	Identifier	hexagon_supervisor_regs		1561761	0					
ANR	1561857	Identifier	regn		1561761	1					
ANR	1561858	Identifier	name		1561761	1					
ANR	1561859	ExpressionStatement	* errmsg = buf	2502:12:84709:84722	1561761	1	True				
ANR	1561860	AssignmentExpression	* errmsg = buf		1561761	0		=			
ANR	1561861	UnaryOperationExpression	* errmsg		1561761	0					
ANR	1561862	UnaryOperator	*		1561761	0					
ANR	1561863	Identifier	errmsg		1561761	1					
ANR	1561864	Identifier	buf		1561761	1					
ANR	1561865	IfStatement	if ( flag )		1561761	1					
ANR	1561866	Condition	flag	2504:12:84748:84751	1561761	0	True				
ANR	1561867	Identifier	flag		1561761	0					
ANR	1561868	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2505:10:84764:84799	1561761	1	True				
ANR	1561869	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1561761	0		|=			
ANR	1561870	UnaryOperationExpression	* flag		1561761	0					
ANR	1561871	UnaryOperator	*		1561761	0					
ANR	1561872	Identifier	flag		1561761	1					
ANR	1561873	Identifier	HEXAGON_OPERAND_IS_INVALID		1561761	1					
ANR	1561874	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		1561761	8					
ANR	1561875	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2508:6:84816:84902	1561761	0	True				
ANR	1561876	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		1561761	0					
ANR	1561877	Callee	hexagon_encode_operand		1561761	0					
ANR	1561878	Identifier	hexagon_encode_operand		1561761	0					
ANR	1561879	ArgumentList	operand		1561761	1					
ANR	1561880	Argument	operand		1561761	0					
ANR	1561881	Identifier	operand		1561761	0					
ANR	1561882	Argument	insn		1561761	1					
ANR	1561883	Identifier	insn		1561761	0					
ANR	1561884	Argument	opcode		1561761	2					
ANR	1561885	Identifier	opcode		1561761	0					
ANR	1561886	Argument	reg		1561761	3					
ANR	1561887	Identifier	reg		1561761	0					
ANR	1561888	Argument	NULL		1561761	4					
ANR	1561889	Identifier	NULL		1561761	0					
ANR	1561890	Argument	FALSE		1561761	5					
ANR	1561891	Identifier	FALSE		1561761	0					
ANR	1561892	Argument	FALSE		1561761	6					
ANR	1561893	Identifier	FALSE		1561761	0					
ANR	1561894	Argument	errmsg		1561761	7					
ANR	1561895	Identifier	errmsg		1561761	0					
ANR	1561896	CompoundStatement		29:4:770:770	1561761	1					
ANR	1561897	IfStatement	if ( flag )		1561761	0					
ANR	1561898	Condition	flag	2511:10:84921:84924	1561761	0	True				
ANR	1561899	Identifier	flag		1561761	0					
ANR	1561900	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_SYSTEM	2512:8:84935:84969	1561761	1	True				
ANR	1561901	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_SYSTEM		1561761	0		|=			
ANR	1561902	UnaryOperationExpression	* flag		1561761	0					
ANR	1561903	UnaryOperator	*		1561761	0					
ANR	1561904	Identifier	flag		1561761	1					
ANR	1561905	Identifier	HEXAGON_OPERAND_IS_SYSTEM		1561761	1					
ANR	1561906	ExpressionStatement	* val = reg	2514:6:84978:84988	1561761	1	True				
ANR	1561907	AssignmentExpression	* val = reg		1561761	0		=			
ANR	1561908	UnaryOperationExpression	* val		1561761	0					
ANR	1561909	UnaryOperator	*		1561761	0					
ANR	1561910	Identifier	val		1561761	1					
ANR	1561911	Identifier	reg		1561761	1					
ANR	1561912	ReturnStatement	return ( input ) ;	2515:6:84996:85010	1561761	2	True				
ANR	1561913	Identifier	input		1561761	0					
ANR	1561914	ReturnStatement	return ( NULL ) ;	2518:2:85021:85034	1561761	9	True				
ANR	1561915	Identifier	NULL		1561761	0					
ANR	1561916	ReturnType	static char *		1561761	1					
ANR	1561917	Identifier	hexagon_parse_sreg		1561761	2					
ANR	1561918	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1561761	3					
ANR	1561919	Parameter	const hexagon_operand * operand	2480:1:84005:84034	1561761	0	True				
ANR	1561920	ParameterType	const hexagon_operand *		1561761	0					
ANR	1561921	Identifier	operand		1561761	1					
ANR	1561922	Parameter	hexagon_insn * insn	2480:33:84037:84054	1561761	1	True				
ANR	1561923	ParameterType	hexagon_insn *		1561761	0					
ANR	1561924	Identifier	insn		1561761	1					
ANR	1561925	Parameter	const hexagon_opcode * opcode	2480:53:84057:84084	1561761	2	True				
ANR	1561926	ParameterType	const hexagon_opcode *		1561761	0					
ANR	1561927	Identifier	opcode		1561761	1					
ANR	1561928	Parameter	char * input	2481:1:84088:84098	1561761	3	True				
ANR	1561929	ParameterType	char *		1561761	0					
ANR	1561930	Identifier	input		1561761	1					
ANR	1561931	Parameter	long * val	2481:14:84101:84109	1561761	4	True				
ANR	1561932	ParameterType	long *		1561761	0					
ANR	1561933	Identifier	val		1561761	1					
ANR	1561934	Parameter	int * flag	2481:25:84112:84120	1561761	5	True				
ANR	1561935	ParameterType	int *		1561761	0					
ANR	1561936	Identifier	flag		1561761	1					
ANR	1561937	Parameter	char * * errmsg	2481:36:84123:84135	1561761	6	True				
ANR	1561938	ParameterType	char * *		1561761	0					
ANR	1561939	Identifier	errmsg		1561761	1					
ANR	1561940	CFGEntryNode	ENTRY		1561761		True				
ANR	1561941	CFGExitNode	EXIT		1561761		True				
ANR	1561942	Symbol	flag		1561761						
ANR	1561943	Symbol	& regn		1561761						
ANR	1561944	Symbol	* operand		1561761						
ANR	1561945	Symbol	* hexagon_supervisor_regs		1561761						
ANR	1561946	Symbol	* val		1561761						
ANR	1561947	Symbol	opcode		1561761						
ANR	1561948	Symbol	& input		1561761						
ANR	1561949	Symbol	HEXAGON_OPERAND_IS_INVALID		1561761						
ANR	1561950	Symbol	reg		1561761						
ANR	1561951	Symbol	hexagon_reg_num		1561761						
ANR	1561952	Symbol	hexagon_verify_hw		1561761						
ANR	1561953	Symbol	hexagon_supervisor_regs_count		1561761						
ANR	1561954	Symbol	hexagon_supervisor_regs		1561761						
ANR	1561955	Symbol	val		1561761						
ANR	1561956	Symbol	NULL		1561761						
ANR	1561957	Symbol	HEXAGON_OPERAND_IS_WRITE		1561761						
ANR	1561958	Symbol	HEXAGON_REG_IS_READONLY		1561761						
ANR	1561959	Symbol	operand -> flags		1561761						
ANR	1561960	Symbol	errmsg		1561761						
ANR	1561961	Symbol	HEXAGON_OPERAND_IS_SYSTEM		1561761						
ANR	1561962	Symbol	regn		1561761						
ANR	1561963	Symbol	insn		1561761						
ANR	1561964	Symbol	input		1561761						
ANR	1561965	Symbol	buf		1561761						
ANR	1561966	Symbol	* regn		1561761						
ANR	1561967	Symbol	hexagon_supervisor_regs [ regn ] . name		1561761						
ANR	1561968	Symbol	hexagon_encode_operand		1561761						
ANR	1561969	Symbol	FALSE		1561761						
ANR	1561970	Symbol	* flag		1561761						
ANR	1561971	Symbol	* errmsg		1561761						
ANR	1561972	Symbol	operand		1561761						
ANR	1561973	Symbol	hexagon_supervisor_regs [ regn ] . flags		1561761						
ANR	1561974	Function	hexagon_parse_dsreg	2521:0:85039:87188							
ANR	1561975	FunctionDef	"hexagon_parse_dsreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		1561974	0					
ANR	1561976	CompoundStatement		2525:0:85207:87188	1561974	0					
ANR	1561977	Statement	static	2526:2:85211:85216	1561974	0	True				
ANR	1561978	IdentifierDeclStatement	char buf [ 100 ] ;	2526:9:85218:85232	1561974	1	True				
ANR	1561979	IdentifierDecl	buf [ 100 ]		1561974	0					
ANR	1561980	IdentifierDeclType	char [ 100 ]		1561974	0					
ANR	1561981	Identifier	buf		1561974	1					
ANR	1561982	PrimaryExpression	100		1561974	2					
ANR	1561983	IdentifierDeclStatement	"size_t rege , rego ;"	2527:2:85236:85253	1561974	2	True				
ANR	1561984	IdentifierDecl	rege		1561974	0					
ANR	1561985	IdentifierDeclType	size_t		1561974	0					
ANR	1561986	Identifier	rege		1561974	1					
ANR	1561987	IdentifierDecl	rego		1561974	1					
ANR	1561988	IdentifierDeclType	size_t		1561974	0					
ANR	1561989	Identifier	rego		1561974	1					
ANR	1561990	IdentifierDeclStatement	int reg_odd ;	2528:2:85257:85268	1561974	3	True				
ANR	1561991	IdentifierDecl	reg_odd		1561974	0					
ANR	1561992	IdentifierDeclType	int		1561974	0					
ANR	1561993	Identifier	reg_odd		1561974	1					
ANR	1561994	IdentifierDeclStatement	int reg_even ;	2529:2:85272:85284	1561974	4	True				
ANR	1561995	IdentifierDecl	reg_even		1561974	0					
ANR	1561996	IdentifierDeclType	int		1561974	0					
ANR	1561997	Identifier	reg_even		1561974	1					
ANR	1561998	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"	2531:2:85289:85408	1561974	5	True				
ANR	1561999	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"		1561974	0		=			
ANR	1562000	Identifier	reg_odd		1561974	0					
ANR	1562001	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"		1561974	1					
ANR	1562002	Callee	hexagon_reg_num		1561974	0					
ANR	1562003	Identifier	hexagon_reg_num		1561974	0					
ANR	1562004	ArgumentList	operand		1561974	1					
ANR	1562005	Argument	operand		1561974	0					
ANR	1562006	Identifier	operand		1561974	0					
ANR	1562007	Argument	& input		1561974	1					
ANR	1562008	UnaryOperationExpression	& input		1561974	0					
ANR	1562009	UnaryOperator	&		1561974	0					
ANR	1562010	Identifier	input		1561974	1					
ANR	1562011	Argument	'\\0'		1561974	2					
ANR	1562012	PrimaryExpression	'\\0'		1561974	0					
ANR	1562013	Argument	hexagon_supervisor_regs		1561974	3					
ANR	1562014	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562015	Argument	hexagon_supervisor_regs_count		1561974	4					
ANR	1562016	Identifier	hexagon_supervisor_regs_count		1561974	0					
ANR	1562017	Argument	& rego		1561974	5					
ANR	1562018	UnaryOperationExpression	& rego		1561974	0					
ANR	1562019	UnaryOperator	&		1561974	0					
ANR	1562020	Identifier	rego		1561974	1					
ANR	1562021	Argument	'\\0'		1561974	6					
ANR	1562022	PrimaryExpression	'\\0'		1561974	0					
ANR	1562023	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"	2532:2:85412:85530	1561974	6	True				
ANR	1562024	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"		1561974	0		=			
ANR	1562025	Identifier	reg_even		1561974	0					
ANR	1562026	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"		1561974	1					
ANR	1562027	Callee	hexagon_reg_num		1561974	0					
ANR	1562028	Identifier	hexagon_reg_num		1561974	0					
ANR	1562029	ArgumentList	operand		1561974	1					
ANR	1562030	Argument	operand		1561974	0					
ANR	1562031	Identifier	operand		1561974	0					
ANR	1562032	Argument	& input		1561974	1					
ANR	1562033	UnaryOperationExpression	& input		1561974	0					
ANR	1562034	UnaryOperator	&		1561974	0					
ANR	1562035	Identifier	input		1561974	1					
ANR	1562036	Argument	'\\0'		1561974	2					
ANR	1562037	PrimaryExpression	'\\0'		1561974	0					
ANR	1562038	Argument	hexagon_supervisor_regs		1561974	3					
ANR	1562039	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562040	Argument	hexagon_supervisor_regs_count		1561974	4					
ANR	1562041	Identifier	hexagon_supervisor_regs_count		1561974	0					
ANR	1562042	Argument	& rege		1561974	5					
ANR	1562043	UnaryOperationExpression	& rege		1561974	0					
ANR	1562044	UnaryOperator	&		1561974	0					
ANR	1562045	Identifier	rege		1561974	1					
ANR	1562046	Argument	's'		1561974	6					
ANR	1562047	PrimaryExpression	's'		1561974	0					
ANR	1562048	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		1561974	7					
ANR	1562049	Condition	reg_odd < 0 || reg_even < 0	2533:6:85538:85564	1561974	0	True				
ANR	1562050	OrExpression	reg_odd < 0 || reg_even < 0		1561974	0		||			
ANR	1562051	RelationalExpression	reg_odd < 0		1561974	0		<			
ANR	1562052	Identifier	reg_odd		1561974	0					
ANR	1562053	PrimaryExpression	0		1561974	1					
ANR	1562054	RelationalExpression	reg_even < 0		1561974	1		<			
ANR	1562055	Identifier	reg_even		1561974	0					
ANR	1562056	PrimaryExpression	0		1561974	1					
ANR	1562057	ReturnStatement	return ( NULL ) ;	2534:4:85571:85584	1561974	1	True				
ANR	1562058	Identifier	NULL		1561974	0					
ANR	1562059	IfStatement	if ( reg_odd % 2 != 1 )		1561974	8					
ANR	1562060	Condition	reg_odd % 2 != 1	2537:6:85638:85653	1561974	0	True				
ANR	1562061	EqualityExpression	reg_odd % 2 != 1		1561974	0		!=			
ANR	1562062	MultiplicativeExpression	reg_odd % 2		1561974	0		%			
ANR	1562063	Identifier	reg_odd		1561974	0					
ANR	1562064	PrimaryExpression	2		1561974	1					
ANR	1562065	PrimaryExpression	1		1561974	1					
ANR	1562066	CompoundStatement		14:4:452:452	1561974	1					
ANR	1562067	IfStatement	if ( errmsg )		1561974	0					
ANR	1562068	Condition	errmsg	2539:10:85672:85677	1561974	0	True				
ANR	1562069	Identifier	errmsg		1561974	0					
ANR	1562070	CompoundStatement		16:8:480:480	1561974	1					
ANR	1562071	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2541:12:85702:85759	1561974	0	True				
ANR	1562072	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		1561974	0					
ANR	1562073	Callee	sprintf		1561974	0					
ANR	1562074	Identifier	sprintf		1561974	0					
ANR	1562075	ArgumentList	buf		1561974	1					
ANR	1562076	Argument	buf		1561974	0					
ANR	1562077	Identifier	buf		1561974	0					
ANR	1562078	Argument	"""invalid odd register number: %d"""		1561974	1					
ANR	1562079	PrimaryExpression	"""invalid odd register number: %d"""		1561974	0					
ANR	1562080	Argument	reg_odd		1561974	2					
ANR	1562081	Identifier	reg_odd		1561974	0					
ANR	1562082	ExpressionStatement	* errmsg = buf	2542:12:85773:85786	1561974	1	True				
ANR	1562083	AssignmentExpression	* errmsg = buf		1561974	0		=			
ANR	1562084	UnaryOperationExpression	* errmsg		1561974	0					
ANR	1562085	UnaryOperator	*		1561974	0					
ANR	1562086	Identifier	errmsg		1561974	1					
ANR	1562087	Identifier	buf		1561974	1					
ANR	1562088	ReturnStatement	return NULL ;	2544:6:85804:85815	1561974	1	True				
ANR	1562089	Identifier	NULL		1561974	0					
ANR	1562090	IfStatement	if ( reg_even % 2 != 0 )		1561974	9					
ANR	1562091	Condition	reg_even % 2 != 0	2548:6:85876:85892	1561974	0	True				
ANR	1562092	EqualityExpression	reg_even % 2 != 0		1561974	0		!=			
ANR	1562093	MultiplicativeExpression	reg_even % 2		1561974	0		%			
ANR	1562094	Identifier	reg_even		1561974	0					
ANR	1562095	PrimaryExpression	2		1561974	1					
ANR	1562096	PrimaryExpression	0		1561974	1					
ANR	1562097	CompoundStatement		25:4:691:691	1561974	1					
ANR	1562098	IfStatement	if ( errmsg )		1561974	0					
ANR	1562099	Condition	errmsg	2550:10:85911:85916	1561974	0	True				
ANR	1562100	Identifier	errmsg		1561974	0					
ANR	1562101	CompoundStatement		27:8:719:719	1561974	1					
ANR	1562102	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2552:12:85941:86000	1561974	0	True				
ANR	1562103	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		1561974	0					
ANR	1562104	Callee	sprintf		1561974	0					
ANR	1562105	Identifier	sprintf		1561974	0					
ANR	1562106	ArgumentList	buf		1561974	1					
ANR	1562107	Argument	buf		1561974	0					
ANR	1562108	Identifier	buf		1561974	0					
ANR	1562109	Argument	"""invalid even register number: %d"""		1561974	1					
ANR	1562110	PrimaryExpression	"""invalid even register number: %d"""		1561974	0					
ANR	1562111	Argument	reg_even		1561974	2					
ANR	1562112	Identifier	reg_even		1561974	0					
ANR	1562113	ExpressionStatement	* errmsg = buf	2553:12:86014:86027	1561974	1	True				
ANR	1562114	AssignmentExpression	* errmsg = buf		1561974	0		=			
ANR	1562115	UnaryOperationExpression	* errmsg		1561974	0					
ANR	1562116	UnaryOperator	*		1561974	0					
ANR	1562117	Identifier	errmsg		1561974	1					
ANR	1562118	Identifier	buf		1561974	1					
ANR	1562119	ReturnStatement	return NULL ;	2555:6:86045:86056	1561974	1	True				
ANR	1562120	Identifier	NULL		1561974	0					
ANR	1562121	IfStatement	if ( reg_odd != reg_even + 1 )		1561974	10					
ANR	1562122	Condition	reg_odd != reg_even + 1	2559:6:86119:86141	1561974	0	True				
ANR	1562123	EqualityExpression	reg_odd != reg_even + 1		1561974	0		!=			
ANR	1562124	Identifier	reg_odd		1561974	0					
ANR	1562125	AdditiveExpression	reg_even + 1		1561974	1		+			
ANR	1562126	Identifier	reg_even		1561974	0					
ANR	1562127	PrimaryExpression	1		1561974	1					
ANR	1562128	CompoundStatement		36:4:940:940	1561974	1					
ANR	1562129	IfStatement	if ( errmsg )		1561974	0					
ANR	1562130	Condition	errmsg	2561:10:86160:86165	1561974	0	True				
ANR	1562131	Identifier	errmsg		1561974	0					
ANR	1562132	CompoundStatement		38:8:968:968	1561974	1					
ANR	1562133	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2563:12:86190:86283	1561974	0	True				
ANR	1562134	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		1561974	0					
ANR	1562135	Callee	sprintf		1561974	0					
ANR	1562136	Identifier	sprintf		1561974	0					
ANR	1562137	ArgumentList	buf		1561974	1					
ANR	1562138	Argument	buf		1561974	0					
ANR	1562139	Identifier	buf		1561974	0					
ANR	1562140	Argument	"""registers must be consecutive: %d:%d"""		1561974	1					
ANR	1562141	PrimaryExpression	"""registers must be consecutive: %d:%d"""		1561974	0					
ANR	1562142	Argument	reg_odd		1561974	2					
ANR	1562143	Identifier	reg_odd		1561974	0					
ANR	1562144	Argument	reg_even		1561974	3					
ANR	1562145	Identifier	reg_even		1561974	0					
ANR	1562146	ExpressionStatement	* errmsg = buf	2565:12:86297:86310	1561974	1	True				
ANR	1562147	AssignmentExpression	* errmsg = buf		1561974	0		=			
ANR	1562148	UnaryOperationExpression	* errmsg		1561974	0					
ANR	1562149	UnaryOperator	*		1561974	0					
ANR	1562150	Identifier	errmsg		1561974	1					
ANR	1562151	Identifier	buf		1561974	1					
ANR	1562152	ReturnStatement	return NULL ;	2567:6:86328:86339	1561974	1	True				
ANR	1562153	Identifier	NULL		1561974	0					
ANR	1562154	IfStatement	if ( flag )		1561974	11					
ANR	1562155	Condition	flag	2570:6:86354:86357	1561974	0	True				
ANR	1562156	Identifier	flag		1561974	0					
ANR	1562157	ExpressionStatement	* flag = 0	2571:4:86364:86373	1561974	1	True				
ANR	1562158	AssignmentExpression	* flag = 0		1561974	0		=			
ANR	1562159	UnaryOperationExpression	* flag		1561974	0					
ANR	1562160	UnaryOperator	*		1561974	0					
ANR	1562161	Identifier	flag		1561974	1					
ANR	1562162	PrimaryExpression	0		1561974	1					
ANR	1562163	IfStatement	if ( ! hexagon_verify_hw )		1561974	12					
ANR	1562164	Condition	! hexagon_verify_hw	2573:6:86382:86399	1561974	0	True				
ANR	1562165	UnaryOperationExpression	! hexagon_verify_hw		1561974	0					
ANR	1562166	UnaryOperator	!		1561974	0					
ANR	1562167	Identifier	hexagon_verify_hw		1561974	1					
ANR	1562168	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		1561974	1					
ANR	1562169	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2574:8:86410:86610	1561974	0	True				
ANR	1562170	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		1561974	0		&&			
ANR	1562171	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1561974	0		&			
ANR	1562172	PtrMemberAccess	operand -> flags		1561974	0					
ANR	1562173	Identifier	operand		1561974	0					
ANR	1562174	Identifier	flags		1561974	1					
ANR	1562175	Identifier	HEXAGON_OPERAND_IS_WRITE		1561974	1					
ANR	1562176	OrExpression	( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		1561974	1		||			
ANR	1562177	BitAndExpression	hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		1561974	0		&			
ANR	1562178	MemberAccess	hexagon_supervisor_regs [ rege ] . flags		1561974	0					
ANR	1562179	ArrayIndexing	hexagon_supervisor_regs [ rege ]		1561974	0					
ANR	1562180	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562181	Identifier	rege		1561974	1					
ANR	1562182	Identifier	flags		1561974	1					
ANR	1562183	Identifier	HEXAGON_REG_IS_READONLY		1561974	1					
ANR	1562184	BitAndExpression	hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		1561974	1		&			
ANR	1562185	MemberAccess	hexagon_supervisor_regs [ rego ] . flags		1561974	0					
ANR	1562186	ArrayIndexing	hexagon_supervisor_regs [ rego ]		1561974	0					
ANR	1562187	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562188	Identifier	rego		1561974	1					
ANR	1562189	Identifier	flags		1561974	1					
ANR	1562190	Identifier	HEXAGON_REG_IS_READONLY		1561974	1					
ANR	1562191	CompoundStatement		53:6:1411:1411	1561974	1					
ANR	1562192	IfStatement	if ( errmsg )		1561974	0					
ANR	1562193	Condition	errmsg	2578:12:86633:86638	1561974	0	True				
ANR	1562194	Identifier	errmsg		1561974	0					
ANR	1562195	CompoundStatement		55:10:1443:1443	1561974	1					
ANR	1562196	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_supervisor_regs [ rego ] . name , hexagon_supervisor_regs [ rege ] . name )"	2580:12:86665:86841	1561974	0	True				
ANR	1562197	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_supervisor_regs [ rego ] . name , hexagon_supervisor_regs [ rege ] . name )"		1561974	0					
ANR	1562198	Callee	sprintf		1561974	0					
ANR	1562199	Identifier	sprintf		1561974	0					
ANR	1562200	ArgumentList	buf		1561974	1					
ANR	1562201	Argument	buf		1561974	0					
ANR	1562202	Identifier	buf		1561974	0					
ANR	1562203	Argument	"""cannot write to read-only register `%s:%s'."""		1561974	1					
ANR	1562204	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		1561974	0					
ANR	1562205	Argument	hexagon_supervisor_regs [ rego ] . name		1561974	2					
ANR	1562206	MemberAccess	hexagon_supervisor_regs [ rego ] . name		1561974	0					
ANR	1562207	ArrayIndexing	hexagon_supervisor_regs [ rego ]		1561974	0					
ANR	1562208	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562209	Identifier	rego		1561974	1					
ANR	1562210	Identifier	name		1561974	1					
ANR	1562211	Argument	hexagon_supervisor_regs [ rege ] . name		1561974	3					
ANR	1562212	MemberAccess	hexagon_supervisor_regs [ rege ] . name		1561974	0					
ANR	1562213	ArrayIndexing	hexagon_supervisor_regs [ rege ]		1561974	0					
ANR	1562214	Identifier	hexagon_supervisor_regs		1561974	0					
ANR	1562215	Identifier	rege		1561974	1					
ANR	1562216	Identifier	name		1561974	1					
ANR	1562217	ExpressionStatement	* errmsg = buf	2583:12:86855:86868	1561974	1	True				
ANR	1562218	AssignmentExpression	* errmsg = buf		1561974	0		=			
ANR	1562219	UnaryOperationExpression	* errmsg		1561974	0					
ANR	1562220	UnaryOperator	*		1561974	0					
ANR	1562221	Identifier	errmsg		1561974	1					
ANR	1562222	Identifier	buf		1561974	1					
ANR	1562223	IfStatement	if ( flag )		1561974	1					
ANR	1562224	Condition	flag	2585:12:86894:86897	1561974	0	True				
ANR	1562225	Identifier	flag		1561974	0					
ANR	1562226	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2586:10:86910:86945	1561974	1	True				
ANR	1562227	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		1561974	0		|=			
ANR	1562228	UnaryOperationExpression	* flag		1561974	0					
ANR	1562229	UnaryOperator	*		1561974	0					
ANR	1562230	Identifier	flag		1561974	1					
ANR	1562231	Identifier	HEXAGON_OPERAND_IS_INVALID		1561974	1					
ANR	1562232	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		1561974	13					
ANR	1562233	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2589:6:86962:87053	1561974	0	True				
ANR	1562234	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		1561974	0					
ANR	1562235	Callee	hexagon_encode_operand		1561974	0					
ANR	1562236	Identifier	hexagon_encode_operand		1561974	0					
ANR	1562237	ArgumentList	operand		1561974	1					
ANR	1562238	Argument	operand		1561974	0					
ANR	1562239	Identifier	operand		1561974	0					
ANR	1562240	Argument	insn		1561974	1					
ANR	1562241	Identifier	insn		1561974	0					
ANR	1562242	Argument	opcode		1561974	2					
ANR	1562243	Identifier	opcode		1561974	0					
ANR	1562244	Argument	reg_even		1561974	3					
ANR	1562245	Identifier	reg_even		1561974	0					
ANR	1562246	Argument	NULL		1561974	4					
ANR	1562247	Identifier	NULL		1561974	0					
ANR	1562248	Argument	FALSE		1561974	5					
ANR	1562249	Identifier	FALSE		1561974	0					
ANR	1562250	Argument	FALSE		1561974	6					
ANR	1562251	Identifier	FALSE		1561974	0					
ANR	1562252	Argument	errmsg		1561974	7					
ANR	1562253	Identifier	errmsg		1561974	0					
ANR	1562254	CompoundStatement		67:4:1852:1852	1561974	1					
ANR	1562255	IfStatement	if ( flag )		1561974	0					
ANR	1562256	Condition	flag	2592:10:87072:87075	1561974	0	True				
ANR	1562257	Identifier	flag		1561974	0					
ANR	1562258	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2593:8:87086:87118	1561974	1	True				
ANR	1562259	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		1561974	0		|=			
ANR	1562260	UnaryOperationExpression	* flag		1561974	0					
ANR	1562261	UnaryOperator	*		1561974	0					
ANR	1562262	Identifier	flag		1561974	1					
ANR	1562263	Identifier	HEXAGON_OPERAND_IS_PAIR		1561974	1					
ANR	1562264	ExpressionStatement	* val = reg_even	2595:6:87127:87142	1561974	1	True				
ANR	1562265	AssignmentExpression	* val = reg_even		1561974	0		=			
ANR	1562266	UnaryOperationExpression	* val		1561974	0					
ANR	1562267	UnaryOperator	*		1561974	0					
ANR	1562268	Identifier	val		1561974	1					
ANR	1562269	Identifier	reg_even		1561974	1					
ANR	1562270	ReturnStatement	return ( input ) ;	2596:6:87150:87164	1561974	2	True				
ANR	1562271	Identifier	input		1561974	0					
ANR	1562272	ReturnStatement	return NULL ;	2599:2:87175:87186	1561974	14	True				
ANR	1562273	Identifier	NULL		1561974	0					
ANR	1562274	ReturnType	static char *		1561974	1					
ANR	1562275	Identifier	hexagon_parse_dsreg		1561974	2					
ANR	1562276	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		1561974	3					
ANR	1562277	Parameter	const hexagon_operand * operand	2523:1:85074:85103	1561974	0	True				
ANR	1562278	ParameterType	const hexagon_operand *		1561974	0					
ANR	1562279	Identifier	operand		1561974	1					
ANR	1562280	Parameter	hexagon_insn * insn	2523:33:85106:85123	1561974	1	True				
ANR	1562281	ParameterType	hexagon_insn *		1561974	0					
ANR	1562282	Identifier	insn		1561974	1					
ANR	1562283	Parameter	const hexagon_opcode * opcode	2523:53:85126:85153	1561974	2	True				
ANR	1562284	ParameterType	const hexagon_opcode *		1561974	0					
ANR	1562285	Identifier	opcode		1561974	1					
ANR	1562286	Parameter	char * input	2524:1:85157:85167	1561974	3	True				
ANR	1562287	ParameterType	char *		1561974	0					
ANR	1562288	Identifier	input		1561974	1					
ANR	1562289	Parameter	long * val	2524:14:85170:85178	1561974	4	True				
ANR	1562290	ParameterType	long *		1561974	0					
ANR	1562291	Identifier	val		1561974	1					
ANR	1562292	Parameter	int * flag	2524:25:85181:85189	1561974	5	True				
ANR	1562293	ParameterType	int *		1561974	0					
ANR	1562294	Identifier	flag		1561974	1					
ANR	1562295	Parameter	char * * errmsg	2524:36:85192:85204	1561974	6	True				
ANR	1562296	ParameterType	char * *		1561974	0					
ANR	1562297	Identifier	errmsg		1561974	1					
ANR	1562298	CFGEntryNode	ENTRY		1561974		True				
ANR	1562299	CFGExitNode	EXIT		1561974		True				
ANR	1562300	Symbol	hexagon_supervisor_regs [ rego ] . name		1561974						
ANR	1562301	Symbol	flag		1561974						
ANR	1562302	Symbol	& rego		1561974						
ANR	1562303	Symbol	* operand		1561974						
ANR	1562304	Symbol	* hexagon_supervisor_regs		1561974						
ANR	1562305	Symbol	hexagon_supervisor_regs [ rege ] . flags		1561974						
ANR	1562306	Symbol	* val		1561974						
ANR	1562307	Symbol	opcode		1561974						
ANR	1562308	Symbol	hexagon_supervisor_regs [ rego ] . flags		1561974						
ANR	1562309	Symbol	& input		1561974						
ANR	1562310	Symbol	HEXAGON_OPERAND_IS_INVALID		1561974						
ANR	1562311	Symbol	hexagon_reg_num		1561974						
ANR	1562312	Symbol	hexagon_verify_hw		1561974						
ANR	1562313	Symbol	hexagon_supervisor_regs [ rege ] . name		1561974						
ANR	1562314	Symbol	hexagon_supervisor_regs_count		1561974						
ANR	1562315	Symbol	& rege		1561974						
ANR	1562316	Symbol	HEXAGON_OPERAND_IS_PAIR		1561974						
ANR	1562317	Symbol	hexagon_supervisor_regs		1561974						
ANR	1562318	Symbol	val		1561974						
ANR	1562319	Symbol	NULL		1561974						
ANR	1562320	Symbol	HEXAGON_REG_IS_READONLY		1561974						
ANR	1562321	Symbol	HEXAGON_OPERAND_IS_WRITE		1561974						
ANR	1562322	Symbol	rege		1561974						
ANR	1562323	Symbol	* rege		1561974						
ANR	1562324	Symbol	operand -> flags		1561974						
ANR	1562325	Symbol	errmsg		1561974						
ANR	1562326	Symbol	reg_even		1561974						
ANR	1562327	Symbol	rego		1561974						
ANR	1562328	Symbol	insn		1561974						
ANR	1562329	Symbol	input		1561974						
ANR	1562330	Symbol	buf		1561974						
ANR	1562331	Symbol	* rego		1561974						
ANR	1562332	Symbol	hexagon_encode_operand		1561974						
ANR	1562333	Symbol	FALSE		1561974						
ANR	1562334	Symbol	reg_odd		1561974						
ANR	1562335	Symbol	* errmsg		1561974						
ANR	1562336	Symbol	* flag		1561974						
ANR	1562337	Symbol	operand		1561974						
ANR	1562338	Function	hexagon_encode_mask	2609:0:87400:87766							
ANR	1562339	FunctionDef	hexagon_encode_mask (char * enc)		1562338	0					
ANR	1562340	CompoundStatement		2612:0:87445:87766	1562338	0					
ANR	1562341	IdentifierDeclStatement	hexagon_insn mask ;	2613:2:87449:87466	1562338	0	True				
ANR	1562342	IdentifierDecl	mask		1562338	0					
ANR	1562343	IdentifierDeclType	hexagon_insn		1562338	0					
ANR	1562344	Identifier	mask		1562338	1					
ANR	1562345	IdentifierDeclStatement	int num_bits ;	2614:2:87470:87482	1562338	1	True				
ANR	1562346	IdentifierDecl	num_bits		1562338	0					
ANR	1562347	IdentifierDeclType	int		1562338	0					
ANR	1562348	Identifier	num_bits		1562338	1					
ANR	1562349	ForStatement	"for ( mask = 0 , num_bits = 0 ; * enc ; enc ++ )"		1562338	2					
ANR	1562350	ForInit	"mask = 0 , num_bits = 0 ;"	2616:7:87492:87514	1562338	0	True				
ANR	1562351	Expression	"mask = 0 , num_bits = 0"		1562338	0					
ANR	1562352	AssignmentExpression	mask = 0		1562338	0		=			
ANR	1562353	Identifier	mask		1562338	0					
ANR	1562354	PrimaryExpression	0		1562338	1					
ANR	1562355	AssignmentExpression	num_bits = 0		1562338	1		=			
ANR	1562356	Identifier	num_bits		1562338	0					
ANR	1562357	PrimaryExpression	0		1562338	1					
ANR	1562358	Condition	* enc	2616:31:87516:87519	1562338	1	True				
ANR	1562359	UnaryOperationExpression	* enc		1562338	0					
ANR	1562360	UnaryOperator	*		1562338	0					
ANR	1562361	Identifier	enc		1562338	1					
ANR	1562362	PostIncDecOperationExpression	enc ++	2616:37:87522:87526	1562338	2	True				
ANR	1562363	Identifier	enc		1562338	0					
ANR	1562364	IncDec	++		1562338	1					
ANR	1562365	CompoundStatement		6:4:87:87	1562338	3					
ANR	1562366	WhileStatement	while ( ISSPACE ( * enc ) )		1562338	0					
ANR	1562367	Condition	ISSPACE ( * enc )	2618:13:87548:87561	1562338	0	True				
ANR	1562368	CallExpression	ISSPACE ( * enc )		1562338	0					
ANR	1562369	Callee	ISSPACE		1562338	0					
ANR	1562370	Identifier	ISSPACE		1562338	0					
ANR	1562371	ArgumentList	* enc		1562338	1					
ANR	1562372	Argument	* enc		1562338	0					
ANR	1562373	UnaryOperationExpression	* enc		1562338	0					
ANR	1562374	UnaryOperator	*		1562338	0					
ANR	1562375	Identifier	enc		1562338	1					
ANR	1562376	ExpressionStatement	enc ++	2619:8:87572:87577	1562338	1	True				
ANR	1562377	PostIncDecOperationExpression	enc ++		1562338	0					
ANR	1562378	Identifier	enc		1562338	0					
ANR	1562379	IncDec	++		1562338	1					
ANR	1562380	IfStatement	if ( ! * enc )		1562338	1					
ANR	1562381	Condition	! * enc	2621:10:87590:87594	1562338	0	True				
ANR	1562382	UnaryOperationExpression	! * enc		1562338	0					
ANR	1562383	UnaryOperator	!		1562338	0					
ANR	1562384	UnaryOperationExpression	* enc		1562338	1					
ANR	1562385	UnaryOperator	*		1562338	0					
ANR	1562386	Identifier	enc		1562338	1					
ANR	1562387	BreakStatement	break ;	2622:8:87605:87610	1562338	1	True				
ANR	1562388	ExpressionStatement	mask = ( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )	2624:6:87619:87676	1562338	2	True				
ANR	1562389	AssignmentExpression	mask = ( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )		1562338	0		=			
ANR	1562390	Identifier	mask		1562338	0					
ANR	1562391	AdditiveExpression	( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )		1562338	1		+			
ANR	1562392	ShiftExpression	mask << 1		1562338	0		<<			
ANR	1562393	Identifier	mask		1562338	0					
ANR	1562394	PrimaryExpression	1		1562338	1					
ANR	1562395	ConditionalExpression	( * enc == '1' || * enc == '0' ) ? 1 : 0		1562338	1					
ANR	1562396	Condition	* enc == '1' || * enc == '0'		1562338	0					
ANR	1562397	OrExpression	* enc == '1' || * enc == '0'		1562338	0		||			
ANR	1562398	EqualityExpression	* enc == '1'		1562338	0		==			
ANR	1562399	UnaryOperationExpression	* enc		1562338	0					
ANR	1562400	UnaryOperator	*		1562338	0					
ANR	1562401	Identifier	enc		1562338	1					
ANR	1562402	PrimaryExpression	'1'		1562338	1					
ANR	1562403	EqualityExpression	* enc == '0'		1562338	1		==			
ANR	1562404	UnaryOperationExpression	* enc		1562338	0					
ANR	1562405	UnaryOperator	*		1562338	0					
ANR	1562406	Identifier	enc		1562338	1					
ANR	1562407	PrimaryExpression	'0'		1562338	1					
ANR	1562408	PrimaryExpression	1		1562338	1					
ANR	1562409	PrimaryExpression	0		1562338	2					
ANR	1562410	ExpressionStatement	num_bits ++	2626:6:87685:87695	1562338	3	True				
ANR	1562411	PostIncDecOperationExpression	num_bits ++		1562338	0					
ANR	1562412	Identifier	num_bits		1562338	0					
ANR	1562413	IncDec	++		1562338	1					
ANR	1562414	ExpressionStatement	assert ( num_bits == HEXAGON_INSN_LEN * 8 )	2629:2:87706:87747	1562338	3	True				
ANR	1562415	CallExpression	assert ( num_bits == HEXAGON_INSN_LEN * 8 )		1562338	0					
ANR	1562416	Callee	assert		1562338	0					
ANR	1562417	Identifier	assert		1562338	0					
ANR	1562418	ArgumentList	num_bits == HEXAGON_INSN_LEN * 8		1562338	1					
ANR	1562419	Argument	num_bits == HEXAGON_INSN_LEN * 8		1562338	0					
ANR	1562420	EqualityExpression	num_bits == HEXAGON_INSN_LEN * 8		1562338	0		==			
ANR	1562421	Identifier	num_bits		1562338	0					
ANR	1562422	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		1562338	1		*			
ANR	1562423	Identifier	HEXAGON_INSN_LEN		1562338	0					
ANR	1562424	PrimaryExpression	8		1562338	1					
ANR	1562425	ReturnStatement	return ( mask ) ;	2630:2:87751:87764	1562338	4	True				
ANR	1562426	Identifier	mask		1562338	0					
ANR	1562427	ReturnType	hexagon_insn		1562338	1					
ANR	1562428	Identifier	hexagon_encode_mask		1562338	2					
ANR	1562429	ParameterList	char * enc		1562338	3					
ANR	1562430	Parameter	char * enc	2611:1:87434:87442	1562338	0	True				
ANR	1562431	ParameterType	char *		1562338	0					
ANR	1562432	Identifier	enc		1562338	1					
ANR	1562433	CFGEntryNode	ENTRY		1562338		True				
ANR	1562434	CFGExitNode	EXIT		1562338		True				
ANR	1562435	Symbol	HEXAGON_INSN_LEN		1562338						
ANR	1562436	Symbol	enc		1562338						
ANR	1562437	Symbol	* enc		1562338						
ANR	1562438	Symbol	num_bits		1562338						
ANR	1562439	Symbol	ISSPACE		1562338						
ANR	1562440	Symbol	mask		1562338						
ANR	1562441	Function	hexagon_lookup_operand	2633:0:87769:88220							
ANR	1562442	FunctionDef	hexagon_lookup_operand (const char * name)		1562441	0					
ANR	1562443	CompoundStatement		2636:0:87835:88220	1562441	0					
ANR	1562444	IdentifierDeclStatement	"size_t op_len , fm_len ;"	2637:2:87839:87860	1562441	0	True				
ANR	1562445	IdentifierDecl	op_len		1562441	0					
ANR	1562446	IdentifierDeclType	size_t		1562441	0					
ANR	1562447	Identifier	op_len		1562441	1					
ANR	1562448	IdentifierDecl	fm_len		1562441	1					
ANR	1562449	IdentifierDeclType	size_t		1562441	0					
ANR	1562450	Identifier	fm_len		1562441	1					
ANR	1562451	IdentifierDeclStatement	size_t i ;	2638:2:87864:87872	1562441	1	True				
ANR	1562452	IdentifierDecl	i		1562441	0					
ANR	1562453	IdentifierDeclType	size_t		1562441	0					
ANR	1562454	Identifier	i		1562441	1					
ANR	1562455	ExpressionStatement	"op_len = strcspn ( name , "" .,"" )"	2641:2:87941:87971	1562441	2	True				
ANR	1562456	AssignmentExpression	"op_len = strcspn ( name , "" .,"" )"		1562441	0		=			
ANR	1562457	Identifier	op_len		1562441	0					
ANR	1562458	CallExpression	"strcspn ( name , "" .,"" )"		1562441	1					
ANR	1562459	Callee	strcspn		1562441	0					
ANR	1562460	Identifier	strcspn		1562441	0					
ANR	1562461	ArgumentList	name		1562441	1					
ANR	1562462	Argument	name		1562441	0					
ANR	1562463	Identifier	name		1562441	0					
ANR	1562464	Argument	""" .,"""		1562441	1					
ANR	1562465	PrimaryExpression	""" .,"""		1562441	0					
ANR	1562466	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		1562441	3					
ANR	1562467	ForInit	i = 0 ;	2643:7:87981:87986	1562441	0	True				
ANR	1562468	AssignmentExpression	i = 0		1562441	0		=			
ANR	1562469	Identifier	i		1562441	0					
ANR	1562470	PrimaryExpression	0		1562441	1					
ANR	1562471	Condition	i < hexagon_operand_count	2643:14:87988:88012	1562441	1	True				
ANR	1562472	RelationalExpression	i < hexagon_operand_count		1562441	0		<			
ANR	1562473	Identifier	i		1562441	0					
ANR	1562474	Identifier	hexagon_operand_count		1562441	1					
ANR	1562475	PostIncDecOperationExpression	i ++	2643:41:88015:88017	1562441	2	True				
ANR	1562476	Identifier	i		1562441	0					
ANR	1562477	IncDec	++		1562441	1					
ANR	1562478	CompoundStatement		9:4:188:188	1562441	3					
ANR	1562479	ExpressionStatement	fm_len = strlen ( hexagon_operands [ i ] . fmt )	2645:6:88032:88075	1562441	0	True				
ANR	1562480	AssignmentExpression	fm_len = strlen ( hexagon_operands [ i ] . fmt )		1562441	0		=			
ANR	1562481	Identifier	fm_len		1562441	0					
ANR	1562482	CallExpression	strlen ( hexagon_operands [ i ] . fmt )		1562441	1					
ANR	1562483	Callee	strlen		1562441	0					
ANR	1562484	Identifier	strlen		1562441	0					
ANR	1562485	ArgumentList	hexagon_operands [ i ] . fmt		1562441	1					
ANR	1562486	Argument	hexagon_operands [ i ] . fmt		1562441	0					
ANR	1562487	MemberAccess	hexagon_operands [ i ] . fmt		1562441	0					
ANR	1562488	ArrayIndexing	hexagon_operands [ i ]		1562441	0					
ANR	1562489	Identifier	hexagon_operands		1562441	0					
ANR	1562490	Identifier	i		1562441	1					
ANR	1562491	Identifier	fmt		1562441	1					
ANR	1562492	IfStatement	"if ( op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len ) )"		1562441	1					
ANR	1562493	Condition	"op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"	2647:10:88088:88156	1562441	0	True				
ANR	1562494	AndExpression	"op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		1562441	0		&&			
ANR	1562495	EqualityExpression	op_len == fm_len		1562441	0		==			
ANR	1562496	Identifier	op_len		1562441	0					
ANR	1562497	Identifier	fm_len		1562441	1					
ANR	1562498	UnaryOperationExpression	"! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		1562441	1					
ANR	1562499	UnaryOperator	!		1562441	0					
ANR	1562500	CallExpression	"strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		1562441	1					
ANR	1562501	Callee	strncmp		1562441	0					
ANR	1562502	Identifier	strncmp		1562441	0					
ANR	1562503	ArgumentList	name		1562441	1					
ANR	1562504	Argument	name		1562441	0					
ANR	1562505	Identifier	name		1562441	0					
ANR	1562506	Argument	hexagon_operands [ i ] . fmt		1562441	1					
ANR	1562507	MemberAccess	hexagon_operands [ i ] . fmt		1562441	0					
ANR	1562508	ArrayIndexing	hexagon_operands [ i ]		1562441	0					
ANR	1562509	Identifier	hexagon_operands		1562441	0					
ANR	1562510	Identifier	i		1562441	1					
ANR	1562511	Identifier	fmt		1562441	1					
ANR	1562512	Argument	op_len		1562441	2					
ANR	1562513	Identifier	op_len		1562441	0					
ANR	1562514	ReturnStatement	return ( hexagon_operands + i ) ;	2648:8:88167:88196	1562441	1	True				
ANR	1562515	AdditiveExpression	hexagon_operands + i		1562441	0		+			
ANR	1562516	Identifier	hexagon_operands		1562441	0					
ANR	1562517	Identifier	i		1562441	1					
ANR	1562518	ReturnStatement	return NULL ;	2651:2:88207:88218	1562441	4	True				
ANR	1562519	Identifier	NULL		1562441	0					
ANR	1562520	ReturnType	const hexagon_operand *		1562441	1					
ANR	1562521	Identifier	hexagon_lookup_operand		1562441	2					
ANR	1562522	ParameterList	const char * name		1562441	3					
ANR	1562523	Parameter	const char * name	2635:1:87817:87832	1562441	0	True				
ANR	1562524	ParameterType	const char *		1562441	0					
ANR	1562525	Identifier	name		1562441	1					
ANR	1562526	CFGEntryNode	ENTRY		1562441		True				
ANR	1562527	CFGExitNode	EXIT		1562441		True				
ANR	1562528	Symbol	NULL		1562441						
ANR	1562529	Symbol	* hexagon_operands		1562441						
ANR	1562530	Symbol	fm_len		1562441						
ANR	1562531	Symbol	hexagon_operands		1562441						
ANR	1562532	Symbol	i		1562441						
ANR	1562533	Symbol	strcspn		1562441						
ANR	1562534	Symbol	strlen		1562441						
ANR	1562535	Symbol	strncmp		1562441						
ANR	1562536	Symbol	hexagon_operand_count		1562441						
ANR	1562537	Symbol	* i		1562441						
ANR	1562538	Symbol	op_len		1562441						
ANR	1562539	Symbol	name		1562441						
ANR	1562540	Symbol	hexagon_operands [ i ] . fmt		1562441						
ANR	1562541	Function	hexagon_lookup_reloc	2654:0:88223:89616							
ANR	1562542	FunctionDef	"hexagon_lookup_reloc (bfd_reloc_code_real_type reloc_type , int flags , const hexagon_opcode * opcode)"		1562541	0					
ANR	1562543	CompoundStatement		2657:0:88347:89616	1562541	0					
ANR	1562544	IdentifierDeclStatement	bfd_reloc_code_real_type r ;	2658:2:88351:88377	1562541	0	True				
ANR	1562545	IdentifierDecl	r		1562541	0					
ANR	1562546	IdentifierDeclType	bfd_reloc_code_real_type		1562541	0					
ANR	1562547	Identifier	r		1562541	1					
ANR	1562548	IdentifierDeclStatement	size_t i ;	2659:2:88381:88389	1562541	1	True				
ANR	1562549	IdentifierDecl	i		1562541	0					
ANR	1562550	IdentifierDeclType	size_t		1562541	0					
ANR	1562551	Identifier	i		1562541	1					
ANR	1562552	IfStatement	if ( reloc_type == BFD_RELOC_NONE || ! opcode )		1562541	2					
ANR	1562553	Condition	reloc_type == BFD_RELOC_NONE || ! opcode	2661:6:88398:88436	1562541	0	True				
ANR	1562554	OrExpression	reloc_type == BFD_RELOC_NONE || ! opcode		1562541	0		||			
ANR	1562555	EqualityExpression	reloc_type == BFD_RELOC_NONE		1562541	0		==			
ANR	1562556	Identifier	reloc_type		1562541	0					
ANR	1562557	Identifier	BFD_RELOC_NONE		1562541	1					
ANR	1562558	UnaryOperationExpression	! opcode		1562541	1					
ANR	1562559	UnaryOperator	!		1562541	0					
ANR	1562560	Identifier	opcode		1562541	1					
ANR	1562561	ReturnStatement	return NULL ;	2662:4:88443:88454	1562541	1	True				
ANR	1562562	Identifier	NULL		1562541	0					
ANR	1562563	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		1562541	3					
ANR	1562564	ForInit	i = 0 ;	2664:7:88464:88469	1562541	0	True				
ANR	1562565	AssignmentExpression	i = 0		1562541	0		=			
ANR	1562566	Identifier	i		1562541	0					
ANR	1562567	PrimaryExpression	0		1562541	1					
ANR	1562568	Condition	i < hexagon_operand_count	2664:14:88471:88495	1562541	1	True				
ANR	1562569	RelationalExpression	i < hexagon_operand_count		1562541	0		<			
ANR	1562570	Identifier	i		1562541	0					
ANR	1562571	Identifier	hexagon_operand_count		1562541	1					
ANR	1562572	PostIncDecOperationExpression	i ++	2664:41:88498:88500	1562541	2	True				
ANR	1562573	Identifier	i		1562541	0					
ANR	1562574	IncDec	++		1562541	1					
ANR	1562575	CompoundStatement		9:4:159:159	1562541	3					
ANR	1562576	IfStatement	if ( flags & HEXAGON_OPERAND_IS_KXED )		1562541	0					
ANR	1562577	Condition	flags & HEXAGON_OPERAND_IS_KXED	2666:10:88519:88549	1562541	0	True				
ANR	1562578	BitAndExpression	flags & HEXAGON_OPERAND_IS_KXED		1562541	0		&			
ANR	1562579	Identifier	flags		1562541	0					
ANR	1562580	Identifier	HEXAGON_OPERAND_IS_KXED		1562541	1					
ANR	1562581	CompoundStatement		11:8:212:212	1562541	1					
ANR	1562582	IfStatement	if ( hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE )		1562541	0					
ANR	1562583	Condition	hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE	2668:14:88576:88632	1562541	0	True				
ANR	1562584	BitAndExpression	hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE		1562541	0		&			
ANR	1562585	MemberAccess	hexagon_operands [ i ] . flags		1562541	0					
ANR	1562586	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562587	Identifier	hexagon_operands		1562541	0					
ANR	1562588	Identifier	i		1562541	1					
ANR	1562589	Identifier	flags		1562541	1					
ANR	1562590	Identifier	HEXAGON_OPERAND_IS_IMMEDIATE		1562541	1					
ANR	1562591	SwitchStatement	switch ( opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE ) )		1562541	1					
ANR	1562592	Condition	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )	2669:20:88655:88785	1562541	0	True				
ANR	1562593	BitAndExpression	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )		1562541	0		&			
ANR	1562594	PtrMemberAccess	opcode -> attributes		1562541	0					
ANR	1562595	Identifier	opcode		1562541	0					
ANR	1562596	Identifier	attributes		1562541	1					
ANR	1562597	InclusiveOrExpression	EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE		1562541	1		|			
ANR	1562598	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		1562541	0					
ANR	1562599	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		1562541	1					
ANR	1562600	CompoundStatement		16:14:454:454	1562541	1					
ANR	1562601	Label	case EXTENDABLE_LOWER_CASE_IMMEDIATE :	2673:14:88818:88854	1562541	0	True				
ANR	1562602	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		1562541	0					
ANR	1562603	IfStatement	"if ( hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt ) )"		1562541	1					
ANR	1562604	Condition	"hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"	2674:20:88876:89045	1562541	0	True				
ANR	1562605	OrExpression	"hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	0		||			
ANR	1562606	EqualityExpression	hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter )		1562541	0		!=			
ANR	1562607	MemberAccess	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562608	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562609	Identifier	hexagon_operands		1562541	0					
ANR	1562610	Identifier	i		1562541	1					
ANR	1562611	Identifier	enc_letter		1562541	1					
ANR	1562612	CallExpression	TOLOWER ( hexagon_operands [ i ] . enc_letter )		1562541	1					
ANR	1562613	Callee	TOLOWER		1562541	0					
ANR	1562614	Identifier	TOLOWER		1562541	0					
ANR	1562615	ArgumentList	hexagon_operands [ i ] . enc_letter		1562541	1					
ANR	1562616	Argument	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562617	MemberAccess	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562618	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562619	Identifier	hexagon_operands		1562541	0					
ANR	1562620	Identifier	i		1562541	1					
ANR	1562621	Identifier	enc_letter		1562541	1					
ANR	1562622	UnaryOperationExpression	"! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	1					
ANR	1562623	UnaryOperator	!		1562541	0					
ANR	1562624	CallExpression	"strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	1					
ANR	1562625	Callee	strstr		1562541	0					
ANR	1562626	Identifier	strstr		1562541	0					
ANR	1562627	ArgumentList	opcode -> syntax		1562541	1					
ANR	1562628	Argument	opcode -> syntax		1562541	0					
ANR	1562629	PtrMemberAccess	opcode -> syntax		1562541	0					
ANR	1562630	Identifier	opcode		1562541	0					
ANR	1562631	Identifier	syntax		1562541	1					
ANR	1562632	Argument	hexagon_operands [ i ] . fmt		1562541	1					
ANR	1562633	MemberAccess	hexagon_operands [ i ] . fmt		1562541	0					
ANR	1562634	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562635	Identifier	hexagon_operands		1562541	0					
ANR	1562636	Identifier	i		1562541	1					
ANR	1562637	Identifier	fmt		1562541	1					
ANR	1562638	ContinueStatement	continue ;	2677:18:89066:89074	1562541	1	True				
ANR	1562639	BreakStatement	break ;	2679:16:89093:89098	1562541	2	True				
ANR	1562640	Label	case EXTENDABLE_UPPER_CASE_IMMEDIATE :	2681:14:89115:89151	1562541	3	True				
ANR	1562641	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		1562541	0					
ANR	1562642	IfStatement	"if ( hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt ) )"		1562541	4					
ANR	1562643	Condition	"hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"	2682:20:89173:89342	1562541	0	True				
ANR	1562644	OrExpression	"hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	0		||			
ANR	1562645	EqualityExpression	hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter )		1562541	0		!=			
ANR	1562646	MemberAccess	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562647	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562648	Identifier	hexagon_operands		1562541	0					
ANR	1562649	Identifier	i		1562541	1					
ANR	1562650	Identifier	enc_letter		1562541	1					
ANR	1562651	CallExpression	TOUPPER ( hexagon_operands [ i ] . enc_letter )		1562541	1					
ANR	1562652	Callee	TOUPPER		1562541	0					
ANR	1562653	Identifier	TOUPPER		1562541	0					
ANR	1562654	ArgumentList	hexagon_operands [ i ] . enc_letter		1562541	1					
ANR	1562655	Argument	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562656	MemberAccess	hexagon_operands [ i ] . enc_letter		1562541	0					
ANR	1562657	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562658	Identifier	hexagon_operands		1562541	0					
ANR	1562659	Identifier	i		1562541	1					
ANR	1562660	Identifier	enc_letter		1562541	1					
ANR	1562661	UnaryOperationExpression	"! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	1					
ANR	1562662	UnaryOperator	!		1562541	0					
ANR	1562663	CallExpression	"strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		1562541	1					
ANR	1562664	Callee	strstr		1562541	0					
ANR	1562665	Identifier	strstr		1562541	0					
ANR	1562666	ArgumentList	opcode -> syntax		1562541	1					
ANR	1562667	Argument	opcode -> syntax		1562541	0					
ANR	1562668	PtrMemberAccess	opcode -> syntax		1562541	0					
ANR	1562669	Identifier	opcode		1562541	0					
ANR	1562670	Identifier	syntax		1562541	1					
ANR	1562671	Argument	hexagon_operands [ i ] . fmt		1562541	1					
ANR	1562672	MemberAccess	hexagon_operands [ i ] . fmt		1562541	0					
ANR	1562673	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562674	Identifier	hexagon_operands		1562541	0					
ANR	1562675	Identifier	i		1562541	1					
ANR	1562676	Identifier	fmt		1562541	1					
ANR	1562677	ContinueStatement	continue ;	2685:18:89363:89371	1562541	1	True				
ANR	1562678	BreakStatement	break ;	2687:16:89390:89395	1562541	5	True				
ANR	1562679	ExpressionStatement	r = hexagon_operands [ i ] . reloc_kxed	2690:10:89424:89459	1562541	1	True				
ANR	1562680	AssignmentExpression	r = hexagon_operands [ i ] . reloc_kxed		1562541	0		=			
ANR	1562681	Identifier	r		1562541	0					
ANR	1562682	MemberAccess	hexagon_operands [ i ] . reloc_kxed		1562541	1					
ANR	1562683	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562684	Identifier	hexagon_operands		1562541	0					
ANR	1562685	Identifier	i		1562541	1					
ANR	1562686	Identifier	reloc_kxed		1562541	1					
ANR	1562687	ElseStatement	else		1562541	0					
ANR	1562688	ExpressionStatement	r = hexagon_operands [ i ] . reloc_type	2693:8:89490:89525	1562541	0	True				
ANR	1562689	AssignmentExpression	r = hexagon_operands [ i ] . reloc_type		1562541	0		=			
ANR	1562690	Identifier	r		1562541	0					
ANR	1562691	MemberAccess	hexagon_operands [ i ] . reloc_type		1562541	1					
ANR	1562692	ArrayIndexing	hexagon_operands [ i ]		1562541	0					
ANR	1562693	Identifier	hexagon_operands		1562541	0					
ANR	1562694	Identifier	i		1562541	1					
ANR	1562695	Identifier	reloc_type		1562541	1					
ANR	1562696	IfStatement	if ( r == reloc_type )		1562541	1					
ANR	1562697	Condition	r == reloc_type	2695:10:89538:89552	1562541	0	True				
ANR	1562698	EqualityExpression	r == reloc_type		1562541	0		==			
ANR	1562699	Identifier	r		1562541	0					
ANR	1562700	Identifier	reloc_type		1562541	1					
ANR	1562701	ReturnStatement	return ( hexagon_operands + i ) ;	2696:8:89563:89592	1562541	1	True				
ANR	1562702	AdditiveExpression	hexagon_operands + i		1562541	0		+			
ANR	1562703	Identifier	hexagon_operands		1562541	0					
ANR	1562704	Identifier	i		1562541	1					
ANR	1562705	ReturnStatement	return NULL ;	2699:2:89603:89614	1562541	4	True				
ANR	1562706	Identifier	NULL		1562541	0					
ANR	1562707	ReturnType	const hexagon_operand *		1562541	1					
ANR	1562708	Identifier	hexagon_lookup_reloc		1562541	2					
ANR	1562709	ParameterList	"bfd_reloc_code_real_type reloc_type , int flags , const hexagon_opcode * opcode"		1562541	3					
ANR	1562710	Parameter	bfd_reloc_code_real_type reloc_type	2656:1:88269:88303	1562541	0	True				
ANR	1562711	ParameterType	bfd_reloc_code_real_type		1562541	0					
ANR	1562712	Identifier	reloc_type		1562541	1					
ANR	1562713	Parameter	int flags	2656:38:88306:88314	1562541	1	True				
ANR	1562714	ParameterType	int		1562541	0					
ANR	1562715	Identifier	flags		1562541	1					
ANR	1562716	Parameter	const hexagon_opcode * opcode	2656:49:88317:88344	1562541	2	True				
ANR	1562717	ParameterType	const hexagon_opcode *		1562541	0					
ANR	1562718	Identifier	opcode		1562541	1					
ANR	1562719	CFGEntryNode	ENTRY		1562541		True				
ANR	1562720	CFGExitNode	EXIT		1562541		True				
ANR	1562721	Symbol	flags		1562541						
ANR	1562722	Symbol	hexagon_operands [ i ] . reloc_type		1562541						
ANR	1562723	Symbol	HEXAGON_OPERAND_IS_KXED		1562541						
ANR	1562724	Symbol	TOUPPER		1562541						
ANR	1562725	Symbol	opcode -> attributes		1562541						
ANR	1562726	Symbol	opcode		1562541						
ANR	1562727	Symbol	hexagon_operand_count		1562541						
ANR	1562728	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		1562541						
ANR	1562729	Symbol	hexagon_operands [ i ] . enc_letter		1562541						
ANR	1562730	Symbol	hexagon_operands [ i ] . fmt		1562541						
ANR	1562731	Symbol	NULL		1562541						
ANR	1562732	Symbol	* hexagon_operands		1562541						
ANR	1562733	Symbol	hexagon_operands		1562541						
ANR	1562734	Symbol	BFD_RELOC_NONE		1562541						
ANR	1562735	Symbol	TOLOWER		1562541						
ANR	1562736	Symbol	i		1562541						
ANR	1562737	Symbol	reloc_type		1562541						
ANR	1562738	Symbol	HEXAGON_OPERAND_IS_IMMEDIATE		1562541						
ANR	1562739	Symbol	opcode -> syntax		1562541						
ANR	1562740	Symbol	r		1562541						
ANR	1562741	Symbol	* i		1562541						
ANR	1562742	Symbol	hexagon_operands [ i ] . flags		1562541						
ANR	1562743	Symbol	strstr		1562541						
ANR	1562744	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		1562541						
ANR	1562745	Symbol	hexagon_operands [ i ] . reloc_kxed		1562541						
ANR	1562746	Symbol	* opcode		1562541						
ANR	1562747	Function	hexagon_extract_operand	2702:0:89619:91279							
ANR	1562748	FunctionDef	"hexagon_extract_operand (const hexagon_operand * operand , hexagon_insn insn , bfd_vma addr , char * enc , int * return_value , char * * errmsg)"		1562747	0					
ANR	1562749	CompoundStatement		2707:0:89760:91279	1562747	0					
ANR	1562750	IdentifierDeclStatement	int value = 0 ;	2708:2:89764:89777	1562747	0	True				
ANR	1562751	IdentifierDecl	value = 0		1562747	0					
ANR	1562752	IdentifierDeclType	int		1562747	0					
ANR	1562753	Identifier	value		1562747	1					
ANR	1562754	AssignmentExpression	value = 0		1562747	2		=			
ANR	1562755	Identifier	value		1562747	0					
ANR	1562756	PrimaryExpression	0		1562747	1					
ANR	1562757	IdentifierDeclStatement	char enc_letter = operand -> enc_letter ;	2709:2:89781:89818	1562747	1	True				
ANR	1562758	IdentifierDecl	enc_letter = operand -> enc_letter		1562747	0					
ANR	1562759	IdentifierDeclType	char		1562747	0					
ANR	1562760	Identifier	enc_letter		1562747	1					
ANR	1562761	AssignmentExpression	enc_letter = operand -> enc_letter		1562747	2		=			
ANR	1562762	Identifier	enc_letter		1562747	0					
ANR	1562763	PtrMemberAccess	operand -> enc_letter		1562747	1					
ANR	1562764	Identifier	operand		1562747	0					
ANR	1562765	Identifier	enc_letter		1562747	1					
ANR	1562766	IdentifierDeclStatement	char * enc_ptr = enc ;	2710:2:89822:89841	1562747	2	True				
ANR	1562767	IdentifierDecl	* enc_ptr = enc		1562747	0					
ANR	1562768	IdentifierDeclType	char *		1562747	0					
ANR	1562769	Identifier	enc_ptr		1562747	1					
ANR	1562770	AssignmentExpression	* enc_ptr = enc		1562747	2		=			
ANR	1562771	Identifier	enc		1562747	0					
ANR	1562772	Identifier	enc		1562747	1					
ANR	1562773	IdentifierDeclStatement	unsigned int bits_found ;	2711:2:89845:89868	1562747	3	True				
ANR	1562774	IdentifierDecl	bits_found		1562747	0					
ANR	1562775	IdentifierDeclType	unsigned int		1562747	0					
ANR	1562776	Identifier	bits_found		1562747	1					
ANR	1562777	IdentifierDeclStatement	hexagon_insn mask ;	2712:2:89872:89889	1562747	4	True				
ANR	1562778	IdentifierDecl	mask		1562747	0					
ANR	1562779	IdentifierDeclType	hexagon_insn		1562747	0					
ANR	1562780	Identifier	mask		1562747	1					
ANR	1562781	IfStatement	if ( HEXAGON_IS16BITS ( insn ) )		1562747	5					
ANR	1562782	Condition	HEXAGON_IS16BITS ( insn )	2714:6:89898:89919	1562747	0	True				
ANR	1562783	CallExpression	HEXAGON_IS16BITS ( insn )		1562747	0					
ANR	1562784	Callee	HEXAGON_IS16BITS		1562747	0					
ANR	1562785	Identifier	HEXAGON_IS16BITS		1562747	0					
ANR	1562786	ArgumentList	insn		1562747	1					
ANR	1562787	Argument	insn		1562747	0					
ANR	1562788	Identifier	insn		1562747	0					
ANR	1562789	ExpressionStatement	mask = 1 << 15	2715:4:89926:89940	1562747	1	True				
ANR	1562790	AssignmentExpression	mask = 1 << 15		1562747	0		=			
ANR	1562791	Identifier	mask		1562747	0					
ANR	1562792	ShiftExpression	1 << 15		1562747	1		<<			
ANR	1562793	PrimaryExpression	1		1562747	0					
ANR	1562794	PrimaryExpression	15		1562747	1					
ANR	1562795	ElseStatement	else		1562747	0					
ANR	1562796	ExpressionStatement	mask = 1 << 31	2717:4:89953:89967	1562747	0	True				
ANR	1562797	AssignmentExpression	mask = 1 << 31		1562747	0		=			
ANR	1562798	Identifier	mask		1562747	0					
ANR	1562799	ShiftExpression	1 << 31		1562747	1		<<			
ANR	1562800	PrimaryExpression	1		1562747	0					
ANR	1562801	PrimaryExpression	31		1562747	1					
ANR	1562802	ExpressionStatement	bits_found = 0	2720:2:90015:90029	1562747	6	True				
ANR	1562803	AssignmentExpression	bits_found = 0		1562747	0		=			
ANR	1562804	Identifier	bits_found		1562747	0					
ANR	1562805	PrimaryExpression	0		1562747	1					
ANR	1562806	WhileStatement	while ( * enc_ptr )		1562747	7					
ANR	1562807	Condition	* enc_ptr	2721:9:90040:90047	1562747	0	True				
ANR	1562808	UnaryOperationExpression	* enc_ptr		1562747	0					
ANR	1562809	UnaryOperator	*		1562747	0					
ANR	1562810	Identifier	enc_ptr		1562747	1					
ANR	1562811	CompoundStatement		17:6:301:321	1562747	1					
ANR	1562812	IdentifierDeclStatement	char ch = * enc_ptr ++ ;	2723:6:90062:90082	1562747	0	True				
ANR	1562813	IdentifierDecl	ch = * enc_ptr ++		1562747	0					
ANR	1562814	IdentifierDeclType	char		1562747	0					
ANR	1562815	Identifier	ch		1562747	1					
ANR	1562816	AssignmentExpression	ch = * enc_ptr ++		1562747	2		=			
ANR	1562817	Identifier	ch		1562747	0					
ANR	1562818	UnaryOperationExpression	* enc_ptr ++		1562747	1					
ANR	1562819	UnaryOperator	*		1562747	0					
ANR	1562820	PostIncDecOperationExpression	enc_ptr ++		1562747	1					
ANR	1562821	Identifier	enc_ptr		1562747	0					
ANR	1562822	IncDec	++		1562747	1					
ANR	1562823	IfStatement	if ( ! ISSPACE ( ch ) )		1562747	1					
ANR	1562824	Condition	! ISSPACE ( ch )	2725:10:90095:90106	1562747	0	True				
ANR	1562825	UnaryOperationExpression	! ISSPACE ( ch )		1562747	0					
ANR	1562826	UnaryOperator	!		1562747	0					
ANR	1562827	CallExpression	ISSPACE ( ch )		1562747	1					
ANR	1562828	Callee	ISSPACE		1562747	0					
ANR	1562829	Identifier	ISSPACE		1562747	0					
ANR	1562830	ArgumentList	ch		1562747	1					
ANR	1562831	Argument	ch		1562747	0					
ANR	1562832	Identifier	ch		1562747	0					
ANR	1562833	CompoundStatement		20:8:356:356	1562747	1					
ANR	1562834	IfStatement	if ( ch == enc_letter )		1562747	0					
ANR	1562835	Condition	ch == enc_letter	2727:14:90133:90148	1562747	0	True				
ANR	1562836	EqualityExpression	ch == enc_letter		1562747	0		==			
ANR	1562837	Identifier	ch		1562747	0					
ANR	1562838	Identifier	enc_letter		1562747	1					
ANR	1562839	CompoundStatement		22:12:402:402	1562747	1					
ANR	1562840	ExpressionStatement	value = ( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )	2729:14:90179:90223	1562747	0	True				
ANR	1562841	AssignmentExpression	value = ( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )		1562747	0		=			
ANR	1562842	Identifier	value		1562747	0					
ANR	1562843	AdditiveExpression	( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )		1562747	1		+			
ANR	1562844	ShiftExpression	value << 1		1562747	0		<<			
ANR	1562845	Identifier	value		1562747	0					
ANR	1562846	PrimaryExpression	1		1562747	1					
ANR	1562847	ConditionalExpression	( insn & mask ) ? 1 : 0		1562747	1					
ANR	1562848	Condition	insn & mask		1562747	0					
ANR	1562849	BitAndExpression	insn & mask		1562747	0		&			
ANR	1562850	Identifier	insn		1562747	0					
ANR	1562851	Identifier	mask		1562747	1					
ANR	1562852	PrimaryExpression	1		1562747	1					
ANR	1562853	PrimaryExpression	0		1562747	2					
ANR	1562854	ExpressionStatement	bits_found ++	2730:14:90239:90251	1562747	1	True				
ANR	1562855	PostIncDecOperationExpression	bits_found ++		1562747	0					
ANR	1562856	Identifier	bits_found		1562747	0					
ANR	1562857	IncDec	++		1562747	1					
ANR	1562858	ExpressionStatement	mask >>= 1	2732:10:90277:90287	1562747	1	True				
ANR	1562859	AssignmentExpression	mask >>= 1		1562747	0		>>=			
ANR	1562860	Identifier	mask		1562747	0					
ANR	1562861	PrimaryExpression	1		1562747	1					
ANR	1562862	IfStatement	if ( bits_found != operand -> bits )		1562747	8					
ANR	1562863	Condition	bits_found != operand -> bits	2737:6:90363:90389	1562747	0	True				
ANR	1562864	EqualityExpression	bits_found != operand -> bits		1562747	0		!=			
ANR	1562865	Identifier	bits_found		1562747	0					
ANR	1562866	PtrMemberAccess	operand -> bits		1562747	1					
ANR	1562867	Identifier	operand		1562747	0					
ANR	1562868	Identifier	bits		1562747	1					
ANR	1562869	CompoundStatement		32:4:635:635	1562747	1					
ANR	1562870	IfStatement	if ( errmsg )		1562747	0					
ANR	1562871	Condition	errmsg	2739:10:90408:90413	1562747	0	True				
ANR	1562872	Identifier	errmsg		1562747	0					
ANR	1562873	CompoundStatement		35:17:682:694	1562747	1					
ANR	1562874	Statement	static	2741:10:90436:90441	1562747	0	True				
ANR	1562875	IdentifierDeclStatement	char xx [ 100 ] ;	2741:17:90443:90455	1562747	1	True				
ANR	1562876	IdentifierDecl	xx [ 100 ]		1562747	0					
ANR	1562877	IdentifierDeclType	char [ 100 ]		1562747	0					
ANR	1562878	Identifier	xx		1562747	1					
ANR	1562879	PrimaryExpression	100		1562747	2					
ANR	1562880	ExpressionStatement	"sprintf ( xx , ""operand %c wrong number of bits found in %s, %d != %d"" , operand -> enc_letter , enc , bits_found , operand -> bits )"	2743:10:90468:90609	1562747	2	True				
ANR	1562881	CallExpression	"sprintf ( xx , ""operand %c wrong number of bits found in %s, %d != %d"" , operand -> enc_letter , enc , bits_found , operand -> bits )"		1562747	0					
ANR	1562882	Callee	sprintf		1562747	0					
ANR	1562883	Identifier	sprintf		1562747	0					
ANR	1562884	ArgumentList	xx		1562747	1					
ANR	1562885	Argument	xx		1562747	0					
ANR	1562886	Identifier	xx		1562747	0					
ANR	1562887	Argument	"""operand %c wrong number of bits found in %s, %d != %d"""		1562747	1					
ANR	1562888	PrimaryExpression	"""operand %c wrong number of bits found in %s, %d != %d"""		1562747	0					
ANR	1562889	Argument	operand -> enc_letter		1562747	2					
ANR	1562890	PtrMemberAccess	operand -> enc_letter		1562747	0					
ANR	1562891	Identifier	operand		1562747	0					
ANR	1562892	Identifier	enc_letter		1562747	1					
ANR	1562893	Argument	enc		1562747	3					
ANR	1562894	Identifier	enc		1562747	0					
ANR	1562895	Argument	bits_found		1562747	4					
ANR	1562896	Identifier	bits_found		1562747	0					
ANR	1562897	Argument	operand -> bits		1562747	5					
ANR	1562898	PtrMemberAccess	operand -> bits		1562747	0					
ANR	1562899	Identifier	operand		1562747	0					
ANR	1562900	Identifier	bits		1562747	1					
ANR	1562901	ExpressionStatement	* errmsg = xx	2745:10:90621:90633	1562747	3	True				
ANR	1562902	AssignmentExpression	* errmsg = xx		1562747	0		=			
ANR	1562903	UnaryOperationExpression	* errmsg		1562747	0					
ANR	1562904	UnaryOperator	*		1562747	0					
ANR	1562905	Identifier	errmsg		1562747	1					
ANR	1562906	Identifier	xx		1562747	1					
ANR	1562907	ReturnStatement	return FALSE ;	2747:6:90651:90663	1562747	1	True				
ANR	1562908	Identifier	FALSE		1562747	0					
ANR	1562909	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )		1562747	9					
ANR	1562910	Condition	operand -> flags & HEXAGON_OPERAND_IS_SIGNED	2750:6:90678:90719	1562747	0	True				
ANR	1562911	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SIGNED		1562747	0		&			
ANR	1562912	PtrMemberAccess	operand -> flags		1562747	0					
ANR	1562913	Identifier	operand		1562747	0					
ANR	1562914	Identifier	flags		1562747	1					
ANR	1562915	Identifier	HEXAGON_OPERAND_IS_SIGNED		1562747	1					
ANR	1562916	CompoundStatement		45:4:965:965	1562747	1					
ANR	1562917	IfStatement	if ( bits_found > 31 )		1562747	0					
ANR	1562918	Condition	bits_found > 31	2752:10:90738:90752	1562747	0	True				
ANR	1562919	RelationalExpression	bits_found > 31		1562747	0		>			
ANR	1562920	Identifier	bits_found		1562747	0					
ANR	1562921	PrimaryExpression	31		1562747	1					
ANR	1562922	CompoundStatement		46:27:994:994	1562747	1					
ANR	1562923	ReturnStatement	return FALSE ;	2754:8:90793:90805	1562747	0	True				
ANR	1562924	Identifier	FALSE		1562747	0					
ANR	1562925	IfStatement	if ( value & ( 1 << ( bits_found - 1 ) ) )		1562747	1					
ANR	1562926	Condition	value & ( 1 << ( bits_found - 1 ) )	2757:10:90863:90893	1562747	0	True				
ANR	1562927	BitAndExpression	value & ( 1 << ( bits_found - 1 ) )		1562747	0		&			
ANR	1562928	Identifier	value		1562747	0					
ANR	1562929	ShiftExpression	1 << ( bits_found - 1 )		1562747	1		<<			
ANR	1562930	PrimaryExpression	1		1562747	0					
ANR	1562931	AdditiveExpression	bits_found - 1		1562747	1		-			
ANR	1562932	Identifier	bits_found		1562747	0					
ANR	1562933	PrimaryExpression	1		1562747	1					
ANR	1562934	CompoundStatement		52:8:1143:1143	1562747	1					
ANR	1562935	ExpressionStatement	value <<= 32 - bits_found	2759:10:90916:90941	1562747	0	True				
ANR	1562936	AssignmentExpression	value <<= 32 - bits_found		1562747	0		<<=			
ANR	1562937	Identifier	value		1562747	0					
ANR	1562938	AdditiveExpression	32 - bits_found		1562747	1		-			
ANR	1562939	PrimaryExpression	32		1562747	0					
ANR	1562940	Identifier	bits_found		1562747	1					
ANR	1562941	ExpressionStatement	value >>= 32 - bits_found	2760:10:90953:90978	1562747	1	True				
ANR	1562942	AssignmentExpression	value >>= 32 - bits_found		1562747	0		>>=			
ANR	1562943	Identifier	value		1562747	0					
ANR	1562944	AdditiveExpression	32 - bits_found		1562747	1		-			
ANR	1562945	PrimaryExpression	32		1562747	0					
ANR	1562946	Identifier	bits_found		1562747	1					
ANR	1562947	ExpressionStatement	value <<= operand -> shift_count	2764:2:90999:91029	1562747	10	True				
ANR	1562948	AssignmentExpression	value <<= operand -> shift_count		1562747	0		<<=			
ANR	1562949	Identifier	value		1562747	0					
ANR	1562950	PtrMemberAccess	operand -> shift_count		1562747	1					
ANR	1562951	Identifier	operand		1562747	0					
ANR	1562952	Identifier	shift_count		1562747	1					
ANR	1562953	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_PC_RELATIVE )		1562747	11					
ANR	1562954	Condition	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE	2766:6:91038:91081	1562747	0	True				
ANR	1562955	BitAndExpression	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE		1562747	0		&			
ANR	1562956	PtrMemberAccess	operand -> flags		1562747	0					
ANR	1562957	Identifier	operand		1562747	0					
ANR	1562958	Identifier	flags		1562747	1					
ANR	1562959	Identifier	HEXAGON_OPERAND_PC_RELATIVE		1562747	1					
ANR	1562960	ExpressionStatement	value += addr	2767:4:91088:91101	1562747	1	True				
ANR	1562961	AssignmentExpression	value += addr		1562747	0		+=			
ANR	1562962	Identifier	value		1562747	0					
ANR	1562963	Identifier	addr		1562747	1					
ANR	1562964	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		1562747	12					
ANR	1562965	Condition	operand -> flags & HEXAGON_OPERAND_IS_SUBSET	2769:6:91110:91151	1562747	0	True				
ANR	1562966	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		1562747	0		&			
ANR	1562967	PtrMemberAccess	operand -> flags		1562747	0					
ANR	1562968	Identifier	operand		1562747	0					
ANR	1562969	Identifier	flags		1562747	1					
ANR	1562970	Identifier	HEXAGON_OPERAND_IS_SUBSET		1562747	1					
ANR	1562971	ExpressionStatement	"value = HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"	2770:4:91158:91236	1562747	1	True				
ANR	1562972	AssignmentExpression	"value = HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		1562747	0		=			
ANR	1562973	Identifier	value		1562747	0					
ANR	1562974	CallExpression	"HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		1562747	1					
ANR	1562975	Callee	HEXAGON_SUBREGS_FROM		1562747	0					
ANR	1562976	Identifier	HEXAGON_SUBREGS_FROM		1562747	0					
ANR	1562977	ArgumentList	value		1562747	1					
ANR	1562978	Argument	value		1562747	0					
ANR	1562979	Identifier	value		1562747	0					
ANR	1562980	Argument	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1562747	1					
ANR	1562981	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1562747	0		&			
ANR	1562982	PtrMemberAccess	operand -> flags		1562747	0					
ANR	1562983	Identifier	operand		1562747	0					
ANR	1562984	Identifier	flags		1562747	1					
ANR	1562985	Identifier	HEXAGON_OPERAND_IS_PAIR		1562747	1					
ANR	1562986	ExpressionStatement	* return_value = value	2772:2:91241:91262	1562747	13	True				
ANR	1562987	AssignmentExpression	* return_value = value		1562747	0		=			
ANR	1562988	UnaryOperationExpression	* return_value		1562747	0					
ANR	1562989	UnaryOperator	*		1562747	0					
ANR	1562990	Identifier	return_value		1562747	1					
ANR	1562991	Identifier	value		1562747	1					
ANR	1562992	ReturnStatement	return TRUE ;	2773:2:91266:91277	1562747	14	True				
ANR	1562993	Identifier	TRUE		1562747	0					
ANR	1562994	ReturnType	int		1562747	1					
ANR	1562995	Identifier	hexagon_extract_operand		1562747	2					
ANR	1562996	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , bfd_vma addr , char * enc , int * return_value , char * * errmsg"		1562747	3					
ANR	1562997	Parameter	const hexagon_operand * operand	2704:1:89648:89677	1562747	0	True				
ANR	1562998	ParameterType	const hexagon_operand *		1562747	0					
ANR	1562999	Identifier	operand		1562747	1					
ANR	1563000	Parameter	hexagon_insn insn	2704:33:89680:89696	1562747	1	True				
ANR	1563001	ParameterType	hexagon_insn		1562747	0					
ANR	1563002	Identifier	insn		1562747	1					
ANR	1563003	Parameter	bfd_vma addr	2705:1:89700:89711	1562747	2	True				
ANR	1563004	ParameterType	bfd_vma		1562747	0					
ANR	1563005	Identifier	addr		1562747	1					
ANR	1563006	Parameter	char * enc	2705:15:89714:89722	1562747	3	True				
ANR	1563007	ParameterType	char *		1562747	0					
ANR	1563008	Identifier	enc		1562747	1					
ANR	1563009	Parameter	int * return_value	2705:26:89725:89741	1562747	4	True				
ANR	1563010	ParameterType	int *		1562747	0					
ANR	1563011	Identifier	return_value		1562747	1					
ANR	1563012	Parameter	char * * errmsg	2706:1:89745:89757	1562747	5	True				
ANR	1563013	ParameterType	char * *		1562747	0					
ANR	1563014	Identifier	errmsg		1562747	1					
ANR	1563015	CFGEntryNode	ENTRY		1562747		True				
ANR	1563016	CFGExitNode	EXIT		1562747		True				
ANR	1563017	Symbol	xx		1562747						
ANR	1563018	Symbol	return_value		1562747						
ANR	1563019	Symbol	HEXAGON_OPERAND_IS_SIGNED		1562747						
ANR	1563020	Symbol	* operand		1562747						
ANR	1563021	Symbol	operand -> enc_letter		1562747						
ANR	1563022	Symbol	HEXAGON_SUBREGS_FROM		1562747						
ANR	1563023	Symbol	bits_found		1562747						
ANR	1563024	Symbol	* enc_ptr		1562747						
ANR	1563025	Symbol	enc		1562747						
ANR	1563026	Symbol	* enc_ptr ++		1562747						
ANR	1563027	Symbol	addr		1562747						
ANR	1563028	Symbol	value		1562747						
ANR	1563029	Symbol	enc_letter		1562747						
ANR	1563030	Symbol	HEXAGON_OPERAND_IS_PAIR		1562747						
ANR	1563031	Symbol	mask		1562747						
ANR	1563032	Symbol	enc_ptr		1562747						
ANR	1563033	Symbol	operand -> flags		1562747						
ANR	1563034	Symbol	ch		1562747						
ANR	1563035	Symbol	HEXAGON_OPERAND_IS_SUBSET		1562747						
ANR	1563036	Symbol	errmsg		1562747						
ANR	1563037	Symbol	TRUE		1562747						
ANR	1563038	Symbol	HEXAGON_OPERAND_PC_RELATIVE		1562747						
ANR	1563039	Symbol	HEXAGON_IS16BITS		1562747						
ANR	1563040	Symbol	insn		1562747						
ANR	1563041	Symbol	operand -> shift_count		1562747						
ANR	1563042	Symbol	FALSE		1562747						
ANR	1563043	Symbol	operand -> bits		1562747						
ANR	1563044	Symbol	ISSPACE		1562747						
ANR	1563045	Symbol	* errmsg		1562747						
ANR	1563046	Symbol	* return_value		1562747						
ANR	1563047	Symbol	operand		1562747						
ANR	1563048	Function	hexagon_dis_named_reg	2776:0:91282:91905							
ANR	1563049	FunctionDef	"hexagon_dis_named_reg (int value , int count , const hexagon_reg * regs , char * buf , char * * errmsg)"		1563048	0					
ANR	1563050	CompoundStatement		2779:0:91392:91905	1563048	0					
ANR	1563051	IdentifierDeclStatement	int n = 0 ;	2780:2:91396:91405	1563048	0	True				
ANR	1563052	IdentifierDecl	n = 0		1563048	0					
ANR	1563053	IdentifierDeclType	int		1563048	0					
ANR	1563054	Identifier	n		1563048	1					
ANR	1563055	AssignmentExpression	n = 0		1563048	2		=			
ANR	1563056	Identifier	n		1563048	0					
ANR	1563057	PrimaryExpression	0		1563048	1					
ANR	1563058	IdentifierDeclStatement	int found = 0 ;	2781:2:91409:91422	1563048	1	True				
ANR	1563059	IdentifierDecl	found = 0		1563048	0					
ANR	1563060	IdentifierDeclType	int		1563048	0					
ANR	1563061	Identifier	found		1563048	1					
ANR	1563062	AssignmentExpression	found = 0		1563048	2		=			
ANR	1563063	Identifier	found		1563048	0					
ANR	1563064	PrimaryExpression	0		1563048	1					
ANR	1563065	IdentifierDeclStatement	int i ;	2782:2:91426:91431	1563048	2	True				
ANR	1563066	IdentifierDecl	i		1563048	0					
ANR	1563067	IdentifierDeclType	int		1563048	0					
ANR	1563068	Identifier	i		1563048	1					
ANR	1563069	ForStatement	for ( i = 0 ; i < count ; i ++ )		1563048	3					
ANR	1563070	ForInit	i = 0 ;	2784:7:91441:91446	1563048	0	True				
ANR	1563071	AssignmentExpression	i = 0		1563048	0		=			
ANR	1563072	Identifier	i		1563048	0					
ANR	1563073	PrimaryExpression	0		1563048	1					
ANR	1563074	Condition	i < count	2784:14:91448:91456	1563048	1	True				
ANR	1563075	RelationalExpression	i < count		1563048	0		<			
ANR	1563076	Identifier	i		1563048	0					
ANR	1563077	Identifier	count		1563048	1					
ANR	1563078	PostIncDecOperationExpression	i ++	2784:25:91459:91461	1563048	2	True				
ANR	1563079	Identifier	i		1563048	0					
ANR	1563080	IncDec	++		1563048	1					
ANR	1563081	CompoundStatement		7:4:75:75	1563048	3					
ANR	1563082	IfStatement	if ( ! ( regs [ i ] . flags & cpu_flag ) )		1563048	0					
ANR	1563083	Condition	! ( regs [ i ] . flags & cpu_flag )	2786:10:91480:91507	1563048	0	True				
ANR	1563084	UnaryOperationExpression	! ( regs [ i ] . flags & cpu_flag )		1563048	0					
ANR	1563085	UnaryOperator	!		1563048	0					
ANR	1563086	BitAndExpression	regs [ i ] . flags & cpu_flag		1563048	1		&			
ANR	1563087	MemberAccess	regs [ i ] . flags		1563048	0					
ANR	1563088	ArrayIndexing	regs [ i ]		1563048	0					
ANR	1563089	Identifier	regs		1563048	0					
ANR	1563090	Identifier	i		1563048	1					
ANR	1563091	Identifier	flags		1563048	1					
ANR	1563092	Identifier	cpu_flag		1563048	1					
ANR	1563093	ContinueStatement	continue ;	2787:8:91518:91526	1563048	1	True				
ANR	1563094	IfStatement	if ( value == regs [ i ] . reg_num )		1563048	1					
ANR	1563095	Condition	value == regs [ i ] . reg_num	2789:10:91539:91563	1563048	0	True				
ANR	1563096	EqualityExpression	value == regs [ i ] . reg_num		1563048	0		==			
ANR	1563097	Identifier	value		1563048	0					
ANR	1563098	MemberAccess	regs [ i ] . reg_num		1563048	1					
ANR	1563099	ArrayIndexing	regs [ i ]		1563048	0					
ANR	1563100	Identifier	regs		1563048	0					
ANR	1563101	Identifier	i		1563048	1					
ANR	1563102	Identifier	reg_num		1563048	1					
ANR	1563103	CompoundStatement		12:8:181:181	1563048	1					
ANR	1563104	ExpressionStatement	found = 1	2791:10:91586:91595	1563048	0	True				
ANR	1563105	AssignmentExpression	found = 1		1563048	0		=			
ANR	1563106	Identifier	found		1563048	0					
ANR	1563107	PrimaryExpression	1		1563048	1					
ANR	1563108	ExpressionStatement	"n = sprintf ( buf , ""%s"" , regs [ i ] . name )"	2792:10:91607:91645	1563048	1	True				
ANR	1563109	AssignmentExpression	"n = sprintf ( buf , ""%s"" , regs [ i ] . name )"		1563048	0		=			
ANR	1563110	Identifier	n		1563048	0					
ANR	1563111	CallExpression	"sprintf ( buf , ""%s"" , regs [ i ] . name )"		1563048	1					
ANR	1563112	Callee	sprintf		1563048	0					
ANR	1563113	Identifier	sprintf		1563048	0					
ANR	1563114	ArgumentList	buf		1563048	1					
ANR	1563115	Argument	buf		1563048	0					
ANR	1563116	Identifier	buf		1563048	0					
ANR	1563117	Argument	"""%s"""		1563048	1					
ANR	1563118	PrimaryExpression	"""%s"""		1563048	0					
ANR	1563119	Argument	regs [ i ] . name		1563048	2					
ANR	1563120	MemberAccess	regs [ i ] . name		1563048	0					
ANR	1563121	ArrayIndexing	regs [ i ]		1563048	0					
ANR	1563122	Identifier	regs		1563048	0					
ANR	1563123	Identifier	i		1563048	1					
ANR	1563124	Identifier	name		1563048	1					
ANR	1563125	BreakStatement	break ;	2793:10:91657:91662	1563048	2	True				
ANR	1563126	IfStatement	if ( ! found )		1563048	4					
ANR	1563127	Condition	! found	2797:6:91687:91692	1563048	0	True				
ANR	1563128	UnaryOperationExpression	! found		1563048	0					
ANR	1563129	UnaryOperator	!		1563048	0					
ANR	1563130	Identifier	found		1563048	1					
ANR	1563131	CompoundStatement		20:4:306:306	1563048	1					
ANR	1563132	IfStatement	if ( errmsg )		1563048	0					
ANR	1563133	Condition	errmsg	2799:10:91711:91716	1563048	0	True				
ANR	1563134	Identifier	errmsg		1563048	0					
ANR	1563135	CompoundStatement		23:17:353:366	1563048	1					
ANR	1563136	Statement	static	2801:10:91739:91744	1563048	0	True				
ANR	1563137	IdentifierDeclStatement	char xx [ 100 ] ;	2801:17:91746:91759	1563048	1	True				
ANR	1563138	IdentifierDecl	xx [ 100 ]		1563048	0					
ANR	1563139	IdentifierDeclType	char [ 100 ]		1563048	0					
ANR	1563140	Identifier	xx		1563048	1					
ANR	1563141	PrimaryExpression	100		1563048	2					
ANR	1563142	ExpressionStatement	"sprintf ( xx , ""control register not found: %d"" , value )"	2802:10:91771:91823	1563048	2	True				
ANR	1563143	CallExpression	"sprintf ( xx , ""control register not found: %d"" , value )"		1563048	0					
ANR	1563144	Callee	sprintf		1563048	0					
ANR	1563145	Identifier	sprintf		1563048	0					
ANR	1563146	ArgumentList	xx		1563048	1					
ANR	1563147	Argument	xx		1563048	0					
ANR	1563148	Identifier	xx		1563048	0					
ANR	1563149	Argument	"""control register not found: %d"""		1563048	1					
ANR	1563150	PrimaryExpression	"""control register not found: %d"""		1563048	0					
ANR	1563151	Argument	value		1563048	2					
ANR	1563152	Identifier	value		1563048	0					
ANR	1563153	ExpressionStatement	* errmsg = xx	2803:10:91835:91847	1563048	3	True				
ANR	1563154	AssignmentExpression	* errmsg = xx		1563048	0		=			
ANR	1563155	UnaryOperationExpression	* errmsg		1563048	0					
ANR	1563156	UnaryOperator	*		1563048	0					
ANR	1563157	Identifier	errmsg		1563048	1					
ANR	1563158	Identifier	xx		1563048	1					
ANR	1563159	ReturnStatement	return NULL ;	2805:6:91865:91876	1563048	1	True				
ANR	1563160	Identifier	NULL		1563048	0					
ANR	1563161	ReturnStatement	return ( buf + n ) ;	2808:2:91887:91903	1563048	5	True				
ANR	1563162	AdditiveExpression	buf + n		1563048	0		+			
ANR	1563163	Identifier	buf		1563048	0					
ANR	1563164	Identifier	n		1563048	1					
ANR	1563165	ReturnType	static char *		1563048	1					
ANR	1563166	Identifier	hexagon_dis_named_reg		1563048	2					
ANR	1563167	ParameterList	"int value , int count , const hexagon_reg * regs , char * buf , char * * errmsg"		1563048	3					
ANR	1563168	Parameter	int value	2778:1:91319:91327	1563048	0	True				
ANR	1563169	ParameterType	int		1563048	0					
ANR	1563170	Identifier	value		1563048	1					
ANR	1563171	Parameter	int count	2778:12:91330:91338	1563048	1	True				
ANR	1563172	ParameterType	int		1563048	0					
ANR	1563173	Identifier	count		1563048	1					
ANR	1563174	Parameter	const hexagon_reg * regs	2778:23:91341:91363	1563048	2	True				
ANR	1563175	ParameterType	const hexagon_reg *		1563048	0					
ANR	1563176	Identifier	regs		1563048	1					
ANR	1563177	Parameter	char * buf	2778:48:91366:91374	1563048	3	True				
ANR	1563178	ParameterType	char *		1563048	0					
ANR	1563179	Identifier	buf		1563048	1					
ANR	1563180	Parameter	char * * errmsg	2778:59:91377:91389	1563048	4	True				
ANR	1563181	ParameterType	char * *		1563048	0					
ANR	1563182	Identifier	errmsg		1563048	1					
ANR	1563183	CFGEntryNode	ENTRY		1563048		True				
ANR	1563184	CFGExitNode	EXIT		1563048		True				
ANR	1563185	Symbol	xx		1563048						
ANR	1563186	Symbol	NULL		1563048						
ANR	1563187	Symbol	count		1563048						
ANR	1563188	Symbol	errmsg		1563048						
ANR	1563189	Symbol	i		1563048						
ANR	1563190	Symbol	regs		1563048						
ANR	1563191	Symbol	n		1563048						
ANR	1563192	Symbol	sprintf		1563048						
ANR	1563193	Symbol	regs [ i ] . flags		1563048						
ANR	1563194	Symbol	buf		1563048						
ANR	1563195	Symbol	found		1563048						
ANR	1563196	Symbol	* i		1563048						
ANR	1563197	Symbol	regs [ i ] . name		1563048						
ANR	1563198	Symbol	regs [ i ] . reg_num		1563048						
ANR	1563199	Symbol	* regs		1563048						
ANR	1563200	Symbol	cpu_flag		1563048						
ANR	1563201	Symbol	* errmsg		1563048						
ANR	1563202	Symbol	value		1563048						
ANR	1563203	Function	hexagon_dis_operand	2811:0:91908:94917							
ANR	1563204	FunctionDef	"hexagon_dis_operand (const hexagon_operand * operand , hexagon_insn insn , bfd_vma iaddr , bfd_vma paddr , char * enc , char * buf , char * * errmsg)"		1563203	0					
ANR	1563205	CompoundStatement		2815:0:92055:94917	1563203	0					
ANR	1563206	Statement	static	2816:2:92059:92064	1563203	0	True				
ANR	1563207	IdentifierDeclStatement	bfd_vma previous ;	2816:9:92066:92082	1563203	1	True				
ANR	1563208	IdentifierDecl	previous		1563203	0					
ANR	1563209	IdentifierDeclType	bfd_vma		1563203	0					
ANR	1563210	Identifier	previous		1563203	1					
ANR	1563211	Statement	static	2817:2:92086:92091	1563203	2	True				
ANR	1563212	IdentifierDeclStatement	"int xer , xreg , xvalue ;"	2817:9:92093:92114	1563203	3	True				
ANR	1563213	IdentifierDecl	xer		1563203	0					
ANR	1563214	IdentifierDeclType	int		1563203	0					
ANR	1563215	Identifier	xer		1563203	1					
ANR	1563216	IdentifierDecl	xreg		1563203	1					
ANR	1563217	IdentifierDeclType	int		1563203	0					
ANR	1563218	Identifier	xreg		1563203	1					
ANR	1563219	IdentifierDecl	xvalue		1563203	2					
ANR	1563220	IdentifierDeclType	int		1563203	0					
ANR	1563221	Identifier	xvalue		1563203	1					
ANR	1563222	IdentifierDeclStatement	"int xed , value ;"	2818:2:92118:92132	1563203	4	True				
ANR	1563223	IdentifierDecl	xed		1563203	0					
ANR	1563224	IdentifierDeclType	int		1563203	0					
ANR	1563225	Identifier	xed		1563203	1					
ANR	1563226	IdentifierDecl	value		1563203	1					
ANR	1563227	IdentifierDeclType	int		1563203	0					
ANR	1563228	Identifier	value		1563203	1					
ANR	1563229	Statement	static	2819:2:92136:92141	1563203	5	True				
ANR	1563230	ClassDefStatement	"struct { int n , y ; } reg [ MAX_PACKET_INSNS ] ;"	2819:9:92143:92184	1563203	6	True				
ANR	1563231	IdentifierDecl	reg [ MAX_PACKET_INSNS ]		1563203	0					
ANR	1563232	IdentifierDeclType	 [ MAX_PACKET_INSNS ]		1563203	0					
ANR	1563233	Identifier	reg		1563203	1					
ANR	1563234	Identifier	MAX_PACKET_INSNS		1563203	2					
ANR	1563235	IdentifierDeclStatement	size_t ireg ;	2820:2:92188:92199	1563203	7	True				
ANR	1563236	IdentifierDecl	ireg		1563203	0					
ANR	1563237	IdentifierDeclType	size_t		1563203	0					
ANR	1563238	Identifier	ireg		1563203	1					
ANR	1563239	IdentifierDeclStatement	int n ;	2821:2:92203:92208	1563203	8	True				
ANR	1563240	IdentifierDecl	n		1563203	0					
ANR	1563241	IdentifierDeclType	int		1563203	0					
ANR	1563242	Identifier	n		1563203	1					
ANR	1563243	IfStatement	"if ( ! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg ) )"		1563203	9					
ANR	1563244	Condition	"! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"	2823:6:92217:92284	1563203	0	True				
ANR	1563245	UnaryOperationExpression	"! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"		1563203	0					
ANR	1563246	UnaryOperator	!		1563203	0					
ANR	1563247	CallExpression	"hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"		1563203	1					
ANR	1563248	Callee	hexagon_extract_operand		1563203	0					
ANR	1563249	Identifier	hexagon_extract_operand		1563203	0					
ANR	1563250	ArgumentList	operand		1563203	1					
ANR	1563251	Argument	operand		1563203	0					
ANR	1563252	Identifier	operand		1563203	0					
ANR	1563253	Argument	insn		1563203	1					
ANR	1563254	Identifier	insn		1563203	0					
ANR	1563255	Argument	paddr		1563203	2					
ANR	1563256	Identifier	paddr		1563203	0					
ANR	1563257	Argument	enc		1563203	3					
ANR	1563258	Identifier	enc		1563203	0					
ANR	1563259	Argument	& value		1563203	4					
ANR	1563260	UnaryOperationExpression	& value		1563203	0					
ANR	1563261	UnaryOperator	&		1563203	0					
ANR	1563262	Identifier	value		1563203	1					
ANR	1563263	Argument	errmsg		1563203	5					
ANR	1563264	Identifier	errmsg		1563203	0					
ANR	1563265	ReturnStatement	return NULL ;	2824:4:92291:92302	1563203	1	True				
ANR	1563266	Identifier	NULL		1563203	0					
ANR	1563267	ExpressionStatement	xed = FALSE	2827:2:92333:92344	1563203	10	True				
ANR	1563268	AssignmentExpression	xed = FALSE		1563203	0		=			
ANR	1563269	Identifier	xed		1563203	0					
ANR	1563270	Identifier	FALSE		1563203	1					
ANR	1563271	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_KXER )		1563203	11					
ANR	1563272	Condition	operand -> flags & HEXAGON_OPERAND_IS_KXER	2828:6:92352:92391	1563203	0	True				
ANR	1563273	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_KXER		1563203	0		&			
ANR	1563274	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563275	Identifier	operand		1563203	0					
ANR	1563276	Identifier	flags		1563203	1					
ANR	1563277	Identifier	HEXAGON_OPERAND_IS_KXER		1563203	1					
ANR	1563278	CompoundStatement		15:4:342:342	1563203	1					
ANR	1563279	ExpressionStatement	xreg ++	2830:6:92406:92412	1563203	0	True				
ANR	1563280	PostIncDecOperationExpression	xreg ++		1563203	0					
ANR	1563281	Identifier	xreg		1563203	0					
ANR	1563282	IncDec	++		1563203	1					
ANR	1563283	ExpressionStatement	xer = TRUE	2831:6:92420:92430	1563203	1	True				
ANR	1563284	AssignmentExpression	xer = TRUE		1563203	0		=			
ANR	1563285	Identifier	xer		1563203	0					
ANR	1563286	Identifier	TRUE		1563203	1					
ANR	1563287	ExpressionStatement	xvalue = value	2832:6:92438:92452	1563203	2	True				
ANR	1563288	AssignmentExpression	xvalue = value		1563203	0		=			
ANR	1563289	Identifier	xvalue		1563203	0					
ANR	1563290	Identifier	value		1563203	1					
ANR	1563291	ElseStatement	else		1563203	0					
ANR	1563292	IfStatement	if ( xer && operand -> flags & HEXAGON_OPERAND_IS_KXED )		1563203	0					
ANR	1563293	Condition	xer && operand -> flags & HEXAGON_OPERAND_IS_KXED	2834:11:92471:92517	1563203	0	True				
ANR	1563294	AndExpression	xer && operand -> flags & HEXAGON_OPERAND_IS_KXED		1563203	0		&&			
ANR	1563295	Identifier	xer		1563203	0					
ANR	1563296	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_KXED		1563203	1		&			
ANR	1563297	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563298	Identifier	operand		1563203	0					
ANR	1563299	Identifier	flags		1563203	1					
ANR	1563300	Identifier	HEXAGON_OPERAND_IS_KXED		1563203	1					
ANR	1563301	CompoundStatement		21:4:468:468	1563203	1					
ANR	1563302	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_PC_RELATIVE )		1563203	0					
ANR	1563303	Condition	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE	2836:10:92536:92579	1563203	0	True				
ANR	1563304	BitAndExpression	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE		1563203	0		&			
ANR	1563305	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563306	Identifier	operand		1563203	0					
ANR	1563307	Identifier	flags		1563203	1					
ANR	1563308	Identifier	HEXAGON_OPERAND_PC_RELATIVE		1563203	1					
ANR	1563309	CompoundStatement		23:8:534:534	1563203	1					
ANR	1563310	ExpressionStatement	xed = FALSE	2838:10:92602:92613	1563203	0	True				
ANR	1563311	AssignmentExpression	xed = FALSE		1563203	0		=			
ANR	1563312	Identifier	xed		1563203	0					
ANR	1563313	Identifier	FALSE		1563203	1					
ANR	1563314	ExpressionStatement	value -= paddr	2839:10:92625:92640	1563203	1	True				
ANR	1563315	AssignmentExpression	value -= paddr		1563203	0		-=			
ANR	1563316	Identifier	value		1563203	0					
ANR	1563317	Identifier	paddr		1563203	1					
ANR	1563318	ExpressionStatement	value >>= operand -> shift_count	2840:10:92652:92682	1563203	2	True				
ANR	1563319	AssignmentExpression	value >>= operand -> shift_count		1563203	0		>>=			
ANR	1563320	Identifier	value		1563203	0					
ANR	1563321	PtrMemberAccess	operand -> shift_count		1563203	1					
ANR	1563322	Identifier	operand		1563203	0					
ANR	1563323	Identifier	shift_count		1563203	1					
ANR	1563324	ExpressionStatement	value &= ~ ( ~0UL << 6 )	2841:10:92694:92716	1563203	3	True				
ANR	1563325	AssignmentExpression	value &= ~ ( ~0UL << 6 )		1563203	0		&=			
ANR	1563326	Identifier	value		1563203	0					
ANR	1563327	UnaryOperationExpression	~ ( ~0UL << 6 )		1563203	1					
ANR	1563328	UnaryOperator	~		1563203	0					
ANR	1563329	ShiftExpression	~0UL << 6		1563203	1		<<			
ANR	1563330	Identifier	~0UL		1563203	0					
ANR	1563331	PrimaryExpression	6		1563203	1					
ANR	1563332	ExpressionStatement	value += xvalue + paddr	2842:10:92728:92752	1563203	4	True				
ANR	1563333	AssignmentExpression	value += xvalue + paddr		1563203	0		+=			
ANR	1563334	Identifier	value		1563203	0					
ANR	1563335	AdditiveExpression	xvalue + paddr		1563203	1		+			
ANR	1563336	Identifier	xvalue		1563203	0					
ANR	1563337	Identifier	paddr		1563203	1					
ANR	1563338	ElseStatement	else		1563203	0					
ANR	1563339	CompoundStatement		31:8:727:727	1563203	0					
ANR	1563340	ExpressionStatement	xed = TRUE	2846:10:92795:92805	1563203	0	True				
ANR	1563341	AssignmentExpression	xed = TRUE		1563203	0		=			
ANR	1563342	Identifier	xed		1563203	0					
ANR	1563343	Identifier	TRUE		1563203	1					
ANR	1563344	ExpressionStatement	value >>= operand -> shift_count	2847:10:92817:92847	1563203	1	True				
ANR	1563345	AssignmentExpression	value >>= operand -> shift_count		1563203	0		>>=			
ANR	1563346	Identifier	value		1563203	0					
ANR	1563347	PtrMemberAccess	operand -> shift_count		1563203	1					
ANR	1563348	Identifier	operand		1563203	0					
ANR	1563349	Identifier	shift_count		1563203	1					
ANR	1563350	ExpressionStatement	value &= ~ ( ~0UL << 6 )	2848:10:92859:92881	1563203	2	True				
ANR	1563351	AssignmentExpression	value &= ~ ( ~0UL << 6 )		1563203	0		&=			
ANR	1563352	Identifier	value		1563203	0					
ANR	1563353	UnaryOperationExpression	~ ( ~0UL << 6 )		1563203	1					
ANR	1563354	UnaryOperator	~		1563203	0					
ANR	1563355	ShiftExpression	~0UL << 6		1563203	1		<<			
ANR	1563356	Identifier	~0UL		1563203	0					
ANR	1563357	PrimaryExpression	6		1563203	1					
ANR	1563358	ExpressionStatement	value += xvalue	2849:10:92893:92909	1563203	3	True				
ANR	1563359	AssignmentExpression	value += xvalue		1563203	0		+=			
ANR	1563360	Identifier	value		1563203	0					
ANR	1563361	Identifier	xvalue		1563203	1					
ANR	1563362	ExpressionStatement	xer = xvalue = 0	2851:6:92927:92943	1563203	1	True				
ANR	1563363	AssignmentExpression	xer = xvalue = 0		1563203	0		=			
ANR	1563364	Identifier	xer		1563203	0					
ANR	1563365	AssignmentExpression	xvalue = 0		1563203	1		=			
ANR	1563366	Identifier	xvalue		1563203	0					
ANR	1563367	PrimaryExpression	0		1563203	1					
ANR	1563368	IfStatement	if ( previous != paddr )		1563203	12					
ANR	1563369	Condition	previous != paddr	2855:6:92980:92996	1563203	0	True				
ANR	1563370	EqualityExpression	previous != paddr		1563203	0		!=			
ANR	1563371	Identifier	previous		1563203	0					
ANR	1563372	Identifier	paddr		1563203	1					
ANR	1563373	CompoundStatement		42:4:947:947	1563203	1					
ANR	1563374	ExpressionStatement	previous = paddr	2857:6:93011:93027	1563203	0	True				
ANR	1563375	AssignmentExpression	previous = paddr		1563203	0		=			
ANR	1563376	Identifier	previous		1563203	0					
ANR	1563377	Identifier	paddr		1563203	1					
ANR	1563378	ExpressionStatement	xreg = 0	2858:6:93035:93043	1563203	1	True				
ANR	1563379	AssignmentExpression	xreg = 0		1563203	0		=			
ANR	1563380	Identifier	xreg		1563203	0					
ANR	1563381	PrimaryExpression	0		1563203	1					
ANR	1563382	ExpressionStatement	"memset ( reg , 0 , sizeof ( reg ) )"	2859:6:93051:93080	1563203	2	True				
ANR	1563383	CallExpression	"memset ( reg , 0 , sizeof ( reg ) )"		1563203	0					
ANR	1563384	Callee	memset		1563203	0					
ANR	1563385	Identifier	memset		1563203	0					
ANR	1563386	ArgumentList	reg		1563203	1					
ANR	1563387	Argument	reg		1563203	0					
ANR	1563388	Identifier	reg		1563203	0					
ANR	1563389	Argument	0		1563203	1					
ANR	1563390	PrimaryExpression	0		1563203	0					
ANR	1563391	Argument	sizeof ( reg )		1563203	2					
ANR	1563392	SizeofExpression	sizeof ( reg )		1563203	0					
ANR	1563393	Sizeof	sizeof		1563203	0					
ANR	1563394	SizeofOperand	reg		1563203	1					
ANR	1563395	ExpressionStatement	ireg = ( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS	2862:2:93091:93174	1563203	13	True				
ANR	1563396	AssignmentExpression	ireg = ( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS		1563203	0		=			
ANR	1563397	Identifier	ireg		1563203	0					
ANR	1563398	MultiplicativeExpression	( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS		1563203	1		/			
ANR	1563399	MultiplicativeExpression	( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN )		1563203	0		%			
ANR	1563400	AdditiveExpression	iaddr - paddr		1563203	0		-			
ANR	1563401	Identifier	iaddr		1563203	0					
ANR	1563402	Identifier	paddr		1563203	1					
ANR	1563403	MultiplicativeExpression	MAX_PACKET_INSNS * HEXAGON_INSN_LEN		1563203	1		*			
ANR	1563404	Identifier	MAX_PACKET_INSNS		1563203	0					
ANR	1563405	Identifier	HEXAGON_INSN_LEN		1563203	1					
ANR	1563406	Identifier	MAX_PACKET_INSNS		1563203	1					
ANR	1563407	ExpressionStatement	ireg -= xreg	2863:2:93178:93190	1563203	14	True				
ANR	1563408	AssignmentExpression	ireg -= xreg		1563203	0		-=			
ANR	1563409	Identifier	ireg		1563203	0					
ANR	1563410	Identifier	xreg		1563203	1					
ANR	1563411	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) ) )		1563203	15					
ANR	1563412	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) )	2864:6:93198:93412	1563203	0	True				
ANR	1563413	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) )		1563203	0		&&			
ANR	1563414	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		1563203	0		&			
ANR	1563415	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563416	Identifier	operand		1563203	0					
ANR	1563417	Identifier	flags		1563203	1					
ANR	1563418	Identifier	HEXAGON_OPERAND_IS_WRITE		1563203	1					
ANR	1563419	OrExpression	( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		1563203	1		||			
ANR	1563420	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_REGISTER		1563203	0		&			
ANR	1563421	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563422	Identifier	operand		1563203	0					
ANR	1563423	Identifier	flags		1563203	1					
ANR	1563424	Identifier	HEXAGON_OPERAND_IS_REGISTER		1563203	1					
ANR	1563425	OrExpression	( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		1563203	1		||			
ANR	1563426	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1563203	0		&			
ANR	1563427	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563428	Identifier	operand		1563203	0					
ANR	1563429	Identifier	flags		1563203	1					
ANR	1563430	Identifier	HEXAGON_OPERAND_IS_PAIR		1563203	1					
ANR	1563431	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		1563203	1		&			
ANR	1563432	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563433	Identifier	operand		1563203	0					
ANR	1563434	Identifier	flags		1563203	1					
ANR	1563435	Identifier	HEXAGON_OPERAND_IS_SUBSET		1563203	1					
ANR	1563436	CompoundStatement		54:4:1363:1363	1563203	1					
ANR	1563437	IfStatement	if ( ! reg [ ireg ] . y )		1563203	0					
ANR	1563438	Condition	! reg [ ireg ] . y	2869:10:93431:93443	1563203	0	True				
ANR	1563439	UnaryOperationExpression	! reg [ ireg ] . y		1563203	0					
ANR	1563440	UnaryOperator	!		1563203	0					
ANR	1563441	MemberAccess	reg [ ireg ] . y		1563203	1					
ANR	1563442	ArrayIndexing	reg [ ireg ]		1563203	0					
ANR	1563443	Identifier	reg		1563203	0					
ANR	1563444	Identifier	ireg		1563203	1					
ANR	1563445	Identifier	y		1563203	1					
ANR	1563446	CompoundStatement		56:8:1398:1398	1563203	1					
ANR	1563447	ExpressionStatement	reg [ ireg ] . n = value	2871:10:93466:93486	1563203	0	True				
ANR	1563448	AssignmentExpression	reg [ ireg ] . n = value		1563203	0		=			
ANR	1563449	MemberAccess	reg [ ireg ] . n		1563203	0					
ANR	1563450	ArrayIndexing	reg [ ireg ]		1563203	0					
ANR	1563451	Identifier	reg		1563203	0					
ANR	1563452	Identifier	ireg		1563203	1					
ANR	1563453	Identifier	n		1563203	1					
ANR	1563454	Identifier	value		1563203	1					
ANR	1563455	ExpressionStatement	reg [ ireg ] . y = TRUE	2872:10:93498:93517	1563203	1	True				
ANR	1563456	AssignmentExpression	reg [ ireg ] . y = TRUE		1563203	0		=			
ANR	1563457	MemberAccess	reg [ ireg ] . y		1563203	0					
ANR	1563458	ArrayIndexing	reg [ ireg ]		1563203	0					
ANR	1563459	Identifier	reg		1563203	0					
ANR	1563460	Identifier	ireg		1563203	1					
ANR	1563461	Identifier	y		1563203	1					
ANR	1563462	Identifier	TRUE		1563203	1					
ANR	1563463	ElseStatement	else		1563203	0					
ANR	1563464	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW ) )		1563203	0					
ANR	1563465	Condition	( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW )	2875:11:93546:93643	1563203	0	True				
ANR	1563466	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW )		1563203	0		&&			
ANR	1563467	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_READ		1563203	0		&			
ANR	1563468	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563469	Identifier	operand		1563203	0					
ANR	1563470	Identifier	flags		1563203	1					
ANR	1563471	Identifier	HEXAGON_OPERAND_IS_READ		1563203	1					
ANR	1563472	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_NEW		1563203	1		&			
ANR	1563473	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563474	Identifier	operand		1563203	0					
ANR	1563475	Identifier	flags		1563203	1					
ANR	1563476	Identifier	HEXAGON_OPERAND_IS_NEW		1563203	1					
ANR	1563477	CompoundStatement		63:4:1594:1594	1563203	1					
ANR	1563478	ExpressionStatement	value = reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )	2878:6:93658:93757	1563203	0	True				
ANR	1563479	AssignmentExpression	value = reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )		1563203	0		=			
ANR	1563480	Identifier	value		1563203	0					
ANR	1563481	AdditiveExpression	reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )		1563203	1		+			
ANR	1563482	MemberAccess	reg [ ireg - ( value / 2 ) ] . n		1563203	0					
ANR	1563483	ArrayIndexing	reg [ ireg - ( value / 2 ) ]		1563203	0					
ANR	1563484	Identifier	reg		1563203	0					
ANR	1563485	AdditiveExpression	ireg - ( value / 2 )		1563203	1		-			
ANR	1563486	Identifier	ireg		1563203	0					
ANR	1563487	MultiplicativeExpression	value / 2		1563203	1		/			
ANR	1563488	Identifier	value		1563203	0					
ANR	1563489	PrimaryExpression	2		1563203	1					
ANR	1563490	Identifier	n		1563203	1					
ANR	1563491	ExclusiveOrExpression	( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 )		1563203	1		^			
ANR	1563492	MultiplicativeExpression	reg [ ireg - ( value / 2 ) ] . n % 2		1563203	0		%			
ANR	1563493	MemberAccess	reg [ ireg - ( value / 2 ) ] . n		1563203	0					
ANR	1563494	ArrayIndexing	reg [ ireg - ( value / 2 ) ]		1563203	0					
ANR	1563495	Identifier	reg		1563203	0					
ANR	1563496	AdditiveExpression	ireg - ( value / 2 )		1563203	1		-			
ANR	1563497	Identifier	ireg		1563203	0					
ANR	1563498	MultiplicativeExpression	value / 2		1563203	1		/			
ANR	1563499	Identifier	value		1563203	0					
ANR	1563500	PrimaryExpression	2		1563203	1					
ANR	1563501	Identifier	n		1563203	1					
ANR	1563502	PrimaryExpression	2		1563203	1					
ANR	1563503	MultiplicativeExpression	value % 2		1563203	1		%			
ANR	1563504	Identifier	value		1563203	0					
ANR	1563505	PrimaryExpression	2		1563203	1					
ANR	1563506	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_PAIR )		1563203	16					
ANR	1563507	Condition	operand -> flags & HEXAGON_OPERAND_IS_PAIR	2882:6:93772:93811	1563203	0	True				
ANR	1563508	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		1563203	0		&			
ANR	1563509	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563510	Identifier	operand		1563203	0					
ANR	1563511	Identifier	flags		1563203	1					
ANR	1563512	Identifier	HEXAGON_OPERAND_IS_PAIR		1563203	1					
ANR	1563513	ExpressionStatement	"n = sprintf ( buf , operand -> dis_fmt , value + 1 , value )"	2883:4:93818:93871	1563203	1	True				
ANR	1563514	AssignmentExpression	"n = sprintf ( buf , operand -> dis_fmt , value + 1 , value )"		1563203	0		=			
ANR	1563515	Identifier	n		1563203	0					
ANR	1563516	CallExpression	"sprintf ( buf , operand -> dis_fmt , value + 1 , value )"		1563203	1					
ANR	1563517	Callee	sprintf		1563203	0					
ANR	1563518	Identifier	sprintf		1563203	0					
ANR	1563519	ArgumentList	buf		1563203	1					
ANR	1563520	Argument	buf		1563203	0					
ANR	1563521	Identifier	buf		1563203	0					
ANR	1563522	Argument	operand -> dis_fmt		1563203	1					
ANR	1563523	PtrMemberAccess	operand -> dis_fmt		1563203	0					
ANR	1563524	Identifier	operand		1563203	0					
ANR	1563525	Identifier	dis_fmt		1563203	1					
ANR	1563526	Argument	value + 1		1563203	2					
ANR	1563527	AdditiveExpression	value + 1		1563203	0		+			
ANR	1563528	Identifier	value		1563203	0					
ANR	1563529	PrimaryExpression	1		1563203	1					
ANR	1563530	Argument	value		1563203	3					
ANR	1563531	Identifier	value		1563203	0					
ANR	1563532	ElseStatement	else		1563203	0					
ANR	1563533	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_CONTROL )		1563203	0					
ANR	1563534	Condition	operand -> flags & HEXAGON_OPERAND_IS_CONTROL	2884:11:93884:93926	1563203	0	True				
ANR	1563535	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_CONTROL		1563203	0		&			
ANR	1563536	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563537	Identifier	operand		1563203	0					
ANR	1563538	Identifier	flags		1563203	1					
ANR	1563539	Identifier	HEXAGON_OPERAND_IS_CONTROL		1563203	1					
ANR	1563540	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_control_regs_count , hexagon_control_regs , buf , errmsg ) ) ;"	2885:4:93933:94100	1563203	1	True				
ANR	1563541	CallExpression	"hexagon_dis_named_reg ( value , hexagon_control_regs_count , hexagon_control_regs , buf , errmsg )"		1563203	0					
ANR	1563542	Callee	hexagon_dis_named_reg		1563203	0					
ANR	1563543	Identifier	hexagon_dis_named_reg		1563203	0					
ANR	1563544	ArgumentList	value		1563203	1					
ANR	1563545	Argument	value		1563203	0					
ANR	1563546	Identifier	value		1563203	0					
ANR	1563547	Argument	hexagon_control_regs_count		1563203	1					
ANR	1563548	Identifier	hexagon_control_regs_count		1563203	0					
ANR	1563549	Argument	hexagon_control_regs		1563203	2					
ANR	1563550	Identifier	hexagon_control_regs		1563203	0					
ANR	1563551	Argument	buf		1563203	3					
ANR	1563552	Identifier	buf		1563203	0					
ANR	1563553	Argument	errmsg		1563203	4					
ANR	1563554	Identifier	errmsg		1563203	0					
ANR	1563555	ElseStatement	else		1563203	0					
ANR	1563556	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_GUEST )		1563203	0					
ANR	1563557	Condition	operand -> flags & HEXAGON_OPERAND_IS_GUEST	2888:11:94113:94153	1563203	0	True				
ANR	1563558	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_GUEST		1563203	0		&			
ANR	1563559	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563560	Identifier	operand		1563203	0					
ANR	1563561	Identifier	flags		1563203	1					
ANR	1563562	Identifier	HEXAGON_OPERAND_IS_GUEST		1563203	1					
ANR	1563563	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_guest_regs_count , hexagon_guest_regs , buf , errmsg ) ) ;"	2889:4:94160:94323	1563203	1	True				
ANR	1563564	CallExpression	"hexagon_dis_named_reg ( value , hexagon_guest_regs_count , hexagon_guest_regs , buf , errmsg )"		1563203	0					
ANR	1563565	Callee	hexagon_dis_named_reg		1563203	0					
ANR	1563566	Identifier	hexagon_dis_named_reg		1563203	0					
ANR	1563567	ArgumentList	value		1563203	1					
ANR	1563568	Argument	value		1563203	0					
ANR	1563569	Identifier	value		1563203	0					
ANR	1563570	Argument	hexagon_guest_regs_count		1563203	1					
ANR	1563571	Identifier	hexagon_guest_regs_count		1563203	0					
ANR	1563572	Argument	hexagon_guest_regs		1563203	2					
ANR	1563573	Identifier	hexagon_guest_regs		1563203	0					
ANR	1563574	Argument	buf		1563203	3					
ANR	1563575	Identifier	buf		1563203	0					
ANR	1563576	Argument	errmsg		1563203	4					
ANR	1563577	Identifier	errmsg		1563203	0					
ANR	1563578	ElseStatement	else		1563203	0					
ANR	1563579	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SYSTEM )		1563203	0					
ANR	1563580	Condition	operand -> flags & HEXAGON_OPERAND_IS_SYSTEM	2892:11:94336:94377	1563203	0	True				
ANR	1563581	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SYSTEM		1563203	0		&			
ANR	1563582	PtrMemberAccess	operand -> flags		1563203	0					
ANR	1563583	Identifier	operand		1563203	0					
ANR	1563584	Identifier	flags		1563203	1					
ANR	1563585	Identifier	HEXAGON_OPERAND_IS_SYSTEM		1563203	1					
ANR	1563586	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_supervisor_regs_count , hexagon_supervisor_regs , buf , errmsg ) ) ;"	2893:4:94384:94557	1563203	1	True				
ANR	1563587	CallExpression	"hexagon_dis_named_reg ( value , hexagon_supervisor_regs_count , hexagon_supervisor_regs , buf , errmsg )"		1563203	0					
ANR	1563588	Callee	hexagon_dis_named_reg		1563203	0					
ANR	1563589	Identifier	hexagon_dis_named_reg		1563203	0					
ANR	1563590	ArgumentList	value		1563203	1					
ANR	1563591	Argument	value		1563203	0					
ANR	1563592	Identifier	value		1563203	0					
ANR	1563593	Argument	hexagon_supervisor_regs_count		1563203	1					
ANR	1563594	Identifier	hexagon_supervisor_regs_count		1563203	0					
ANR	1563595	Argument	hexagon_supervisor_regs		1563203	2					
ANR	1563596	Identifier	hexagon_supervisor_regs		1563203	0					
ANR	1563597	Argument	buf		1563203	3					
ANR	1563598	Identifier	buf		1563203	0					
ANR	1563599	Argument	errmsg		1563203	4					
ANR	1563600	Identifier	errmsg		1563203	0					
ANR	1563601	ElseStatement	else		1563203	0					
ANR	1563602	CompoundStatement		83:4:2514:2514	1563203	0					
ANR	1563603	ExpressionStatement	n = 0	2898:6:94578:94583	1563203	0	True				
ANR	1563604	AssignmentExpression	n = 0		1563203	0		=			
ANR	1563605	Identifier	n		1563203	0					
ANR	1563606	PrimaryExpression	0		1563203	1					
ANR	1563607	IfStatement	if ( xed )		1563203	1					
ANR	1563608	Condition	xed	2899:10:94595:94597	1563203	0	True				
ANR	1563609	Identifier	xed		1563203	0					
ANR	1563610	ExpressionStatement	buf [ n ++ ] = '#'	2900:8:94608:94623	1563203	1	True				
ANR	1563611	AssignmentExpression	buf [ n ++ ] = '#'		1563203	0		=			
ANR	1563612	ArrayIndexing	buf [ n ++ ]		1563203	0					
ANR	1563613	Identifier	buf		1563203	0					
ANR	1563614	PostIncDecOperationExpression	n ++		1563203	1					
ANR	1563615	Identifier	n		1563203	0					
ANR	1563616	IncDec	++		1563203	1					
ANR	1563617	PrimaryExpression	'#'		1563203	1					
ANR	1563618	ExpressionStatement	"n += sprintf ( buf + n , operand -> dis_fmt , value )"	2901:6:94631:94678	1563203	2	True				
ANR	1563619	AssignmentExpression	"n += sprintf ( buf + n , operand -> dis_fmt , value )"		1563203	0		+=			
ANR	1563620	Identifier	n		1563203	0					
ANR	1563621	CallExpression	"sprintf ( buf + n , operand -> dis_fmt , value )"		1563203	1					
ANR	1563622	Callee	sprintf		1563203	0					
ANR	1563623	Identifier	sprintf		1563203	0					
ANR	1563624	ArgumentList	buf + n		1563203	1					
ANR	1563625	Argument	buf + n		1563203	0					
ANR	1563626	AdditiveExpression	buf + n		1563203	0		+			
ANR	1563627	Identifier	buf		1563203	0					
ANR	1563628	Identifier	n		1563203	1					
ANR	1563629	Argument	operand -> dis_fmt		1563203	1					
ANR	1563630	PtrMemberAccess	operand -> dis_fmt		1563203	0					
ANR	1563631	Identifier	operand		1563203	0					
ANR	1563632	Identifier	dis_fmt		1563203	1					
ANR	1563633	Argument	value		1563203	2					
ANR	1563634	Identifier	value		1563203	0					
ANR	1563635	IfStatement	if ( n > 0 )		1563203	17					
ANR	1563636	Condition	n > 0	2904:6:94693:94697	1563203	0	True				
ANR	1563637	RelationalExpression	n > 0		1563203	0		>			
ANR	1563638	Identifier	n		1563203	0					
ANR	1563639	PrimaryExpression	0		1563203	1					
ANR	1563640	ReturnStatement	return ( buf + n ) ;	2905:4:94704:94720	1563203	1	True				
ANR	1563641	AdditiveExpression	buf + n		1563203	0		+			
ANR	1563642	Identifier	buf		1563203	0					
ANR	1563643	Identifier	n		1563203	1					
ANR	1563644	ElseStatement	else		1563203	0					
ANR	1563645	CompoundStatement		93:4:2677:2677	1563203	0					
ANR	1563646	IfStatement	if ( errmsg )		1563203	0					
ANR	1563647	Condition	errmsg	2908:10:94745:94750	1563203	0	True				
ANR	1563648	Identifier	errmsg		1563203	0					
ANR	1563649	CompoundStatement		96:17:2724:2737	1563203	1					
ANR	1563650	Statement	static	2910:10:94773:94778	1563203	0	True				
ANR	1563651	IdentifierDeclStatement	char xx [ 100 ] ;	2910:17:94780:94793	1563203	1	True				
ANR	1563652	IdentifierDecl	xx [ 100 ]		1563203	0					
ANR	1563653	IdentifierDeclType	char [ 100 ]		1563203	0					
ANR	1563654	Identifier	xx		1563203	1					
ANR	1563655	PrimaryExpression	100		1563203	2					
ANR	1563656	ExpressionStatement	"sprintf ( xx , ""bad return code from sprintf: %d"" , n )"	2911:10:94805:94856	1563203	2	True				
ANR	1563657	CallExpression	"sprintf ( xx , ""bad return code from sprintf: %d"" , n )"		1563203	0					
ANR	1563658	Callee	sprintf		1563203	0					
ANR	1563659	Identifier	sprintf		1563203	0					
ANR	1563660	ArgumentList	xx		1563203	1					
ANR	1563661	Argument	xx		1563203	0					
ANR	1563662	Identifier	xx		1563203	0					
ANR	1563663	Argument	"""bad return code from sprintf: %d"""		1563203	1					
ANR	1563664	PrimaryExpression	"""bad return code from sprintf: %d"""		1563203	0					
ANR	1563665	Argument	n		1563203	2					
ANR	1563666	Identifier	n		1563203	0					
ANR	1563667	ExpressionStatement	* errmsg = xx	2912:10:94868:94880	1563203	3	True				
ANR	1563668	AssignmentExpression	* errmsg = xx		1563203	0		=			
ANR	1563669	UnaryOperationExpression	* errmsg		1563203	0					
ANR	1563670	UnaryOperator	*		1563203	0					
ANR	1563671	Identifier	errmsg		1563203	1					
ANR	1563672	Identifier	xx		1563203	1					
ANR	1563673	ReturnStatement	return NULL ;	2914:6:94898:94909	1563203	1	True				
ANR	1563674	Identifier	NULL		1563203	0					
ANR	1563675	ReturnType	char *		1563203	1					
ANR	1563676	Identifier	hexagon_dis_operand		1563203	2					
ANR	1563677	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , bfd_vma iaddr , bfd_vma paddr , char * enc , char * buf , char * * errmsg"		1563203	3					
ANR	1563678	Parameter	const hexagon_operand * operand	2813:1:91936:91965	1563203	0	True				
ANR	1563679	ParameterType	const hexagon_operand *		1563203	0					
ANR	1563680	Identifier	operand		1563203	1					
ANR	1563681	Parameter	hexagon_insn insn	2813:33:91968:91984	1563203	1	True				
ANR	1563682	ParameterType	hexagon_insn		1563203	0					
ANR	1563683	Identifier	insn		1563203	1					
ANR	1563684	Parameter	bfd_vma iaddr	2813:52:91987:91999	1563203	2	True				
ANR	1563685	ParameterType	bfd_vma		1563203	0					
ANR	1563686	Identifier	iaddr		1563203	1					
ANR	1563687	Parameter	bfd_vma paddr	2813:67:92002:92014	1563203	3	True				
ANR	1563688	ParameterType	bfd_vma		1563203	0					
ANR	1563689	Identifier	paddr		1563203	1					
ANR	1563690	Parameter	char * enc	2814:1:92018:92026	1563203	4	True				
ANR	1563691	ParameterType	char *		1563203	0					
ANR	1563692	Identifier	enc		1563203	1					
ANR	1563693	Parameter	char * buf	2814:12:92029:92037	1563203	5	True				
ANR	1563694	ParameterType	char *		1563203	0					
ANR	1563695	Identifier	buf		1563203	1					
ANR	1563696	Parameter	char * * errmsg	2814:23:92040:92052	1563203	6	True				
ANR	1563697	ParameterType	char * *		1563203	0					
ANR	1563698	Identifier	errmsg		1563203	1					
ANR	1563699	CFGEntryNode	ENTRY		1563203		True				
ANR	1563700	CFGExitNode	EXIT		1563203		True				
ANR	1563701	Symbol	xx		1563203						
ANR	1563702	Symbol	& value		1563203						
ANR	1563703	Symbol	HEXAGON_OPERAND_IS_GUEST		1563203						
ANR	1563704	Symbol	hexagon_guest_regs_count		1563203						
ANR	1563705	Symbol	HEXAGON_OPERAND_IS_KXED		1563203						
ANR	1563706	Symbol	xvalue		1563203						
ANR	1563707	Symbol	sprintf		1563203						
ANR	1563708	Symbol	reg		1563203						
ANR	1563709	Symbol	xed		1563203						
ANR	1563710	Symbol	HEXAGON_OPERAND_IS_PAIR		1563203						
ANR	1563711	Symbol	HEXAGON_OPERAND_IS_KXER		1563203						
ANR	1563712	Symbol	hexagon_control_regs_count		1563203						
ANR	1563713	Symbol	hexagon_dis_named_reg		1563203						
ANR	1563714	Symbol	* buf		1563203						
ANR	1563715	Symbol	NULL		1563203						
ANR	1563716	Symbol	xreg		1563203						
ANR	1563717	Symbol	xer		1563203						
ANR	1563718	Symbol	HEXAGON_OPERAND_IS_SUBSET		1563203						
ANR	1563719	Symbol	errmsg		1563203						
ANR	1563720	Symbol	TRUE		1563203						
ANR	1563721	Symbol	HEXAGON_OPERAND_PC_RELATIVE		1563203						
ANR	1563722	Symbol	iaddr		1563203						
ANR	1563723	Symbol	~0UL		1563203						
ANR	1563724	Symbol	paddr		1563203						
ANR	1563725	Symbol	reg [ ireg - ( value / 2 ) ] . n		1563203						
ANR	1563726	Symbol	ireg		1563203						
ANR	1563727	Symbol	* errmsg		1563203						
ANR	1563728	Symbol	* operand		1563203						
ANR	1563729	Symbol	operand -> dis_fmt		1563203						
ANR	1563730	Symbol	HEXAGON_OPERAND_IS_CONTROL		1563203						
ANR	1563731	Symbol	hexagon_extract_operand		1563203						
ANR	1563732	Symbol	hexagon_supervisor_regs_count		1563203						
ANR	1563733	Symbol	reg [ ireg ] . y		1563203						
ANR	1563734	Symbol	enc		1563203						
ANR	1563735	Symbol	value		1563203						
ANR	1563736	Symbol	* ireg		1563203						
ANR	1563737	Symbol	HEXAGON_OPERAND_IS_READ		1563203						
ANR	1563738	Symbol	hexagon_supervisor_regs		1563203						
ANR	1563739	Symbol	HEXAGON_OPERAND_IS_WRITE		1563203						
ANR	1563740	Symbol	previous		1563203						
ANR	1563741	Symbol	operand -> flags		1563203						
ANR	1563742	Symbol	hexagon_guest_regs		1563203						
ANR	1563743	Symbol	HEXAGON_INSN_LEN		1563203						
ANR	1563744	Symbol	HEXAGON_OPERAND_IS_SYSTEM		1563203						
ANR	1563745	Symbol	reg [ ireg ] . n		1563203						
ANR	1563746	Symbol	n		1563203						
ANR	1563747	Symbol	HEXAGON_OPERAND_IS_REGISTER		1563203						
ANR	1563748	Symbol	HEXAGON_OPERAND_IS_NEW		1563203						
ANR	1563749	Symbol	insn		1563203						
ANR	1563750	Symbol	operand -> shift_count		1563203						
ANR	1563751	Symbol	buf		1563203						
ANR	1563752	Symbol	* value		1563203						
ANR	1563753	Symbol	hexagon_control_regs		1563203						
ANR	1563754	Symbol	MAX_PACKET_INSNS		1563203						
ANR	1563755	Symbol	FALSE		1563203						
ANR	1563756	Symbol	operand		1563203						
ANR	1563757	Symbol	* reg		1563203						
ANR	1563758	Function	hexagon_dis_opcode	2918:0:94920:99337							
ANR	1563759	FunctionDef	"hexagon_dis_opcode (char * buf , hexagon_insn insn , bfd_vma address , const hexagon_opcode * opcode , char * * errmsg)"		1563758	0					
ANR	1563760	CompoundStatement		2922:0:95037:99337	1563758	0					
ANR	1563761	Statement	static	2923:2:95041:95046	1563758	0	True				
ANR	1563762	IdentifierDeclStatement	char temp [ 40 ] ;	2923:9:95048:95062	1563758	1	True				
ANR	1563763	IdentifierDecl	temp [ 40 ]		1563758	0					
ANR	1563764	IdentifierDeclType	char [ 40 ]		1563758	0					
ANR	1563765	Identifier	temp		1563758	1					
ANR	1563766	PrimaryExpression	40		1563758	2					
ANR	1563767	Statement	static	2924:2:95066:95071	1563758	2	True				
ANR	1563768	IdentifierDeclStatement	int in_packet ;	2924:9:95073:95086	1563758	3	True				
ANR	1563769	IdentifierDecl	in_packet		1563758	0					
ANR	1563770	IdentifierDeclType	int		1563758	0					
ANR	1563771	Identifier	in_packet		1563758	1					
ANR	1563772	Statement	static	2925:2:95090:95095	1563758	4	True				
ANR	1563773	IdentifierDeclStatement	int end_inner ;	2925:9:95097:95110	1563758	5	True				
ANR	1563774	IdentifierDecl	end_inner		1563758	0					
ANR	1563775	IdentifierDeclType	int		1563758	0					
ANR	1563776	Identifier	end_inner		1563758	1					
ANR	1563777	Statement	static	2926:2:95114:95119	1563758	6	True				
ANR	1563778	IdentifierDeclStatement	int end_outer ;	2926:9:95121:95134	1563758	7	True				
ANR	1563779	IdentifierDecl	end_outer		1563758	0					
ANR	1563780	IdentifierDeclType	int		1563758	0					
ANR	1563781	Identifier	end_outer		1563758	1					
ANR	1563782	Statement	static	2927:2:95138:95143	1563758	8	True				
ANR	1563783	IdentifierDeclStatement	bfd_vma packet_addr ;	2927:9:95145:95164	1563758	9	True				
ANR	1563784	IdentifierDecl	packet_addr		1563758	0					
ANR	1563785	IdentifierDeclType	bfd_vma		1563758	0					
ANR	1563786	Identifier	packet_addr		1563758	1					
ANR	1563787	IdentifierDeclStatement	hexagon_insn packet_bits = HEXAGON_END_PACKET_GET ( insn ) ;	2928:2:95168:95224	1563758	10	True				
ANR	1563788	IdentifierDecl	packet_bits = HEXAGON_END_PACKET_GET ( insn )		1563758	0					
ANR	1563789	IdentifierDeclType	hexagon_insn		1563758	0					
ANR	1563790	Identifier	packet_bits		1563758	1					
ANR	1563791	AssignmentExpression	packet_bits = HEXAGON_END_PACKET_GET ( insn )		1563758	2		=			
ANR	1563792	Identifier	packet_bits		1563758	0					
ANR	1563793	CallExpression	HEXAGON_END_PACKET_GET ( insn )		1563758	1					
ANR	1563794	Callee	HEXAGON_END_PACKET_GET		1563758	0					
ANR	1563795	Identifier	HEXAGON_END_PACKET_GET		1563758	0					
ANR	1563796	ArgumentList	insn		1563758	1					
ANR	1563797	Argument	insn		1563758	0					
ANR	1563798	Identifier	insn		1563758	0					
ANR	1563799	IdentifierDeclStatement	int end_packet = FALSE ;	2929:2:95228:95250	1563758	11	True				
ANR	1563800	IdentifierDecl	end_packet = FALSE		1563758	0					
ANR	1563801	IdentifierDeclType	int		1563758	0					
ANR	1563802	Identifier	end_packet		1563758	1					
ANR	1563803	AssignmentExpression	end_packet = FALSE		1563758	2		=			
ANR	1563804	Identifier	FALSE		1563758	0					
ANR	1563805	Identifier	FALSE		1563758	1					
ANR	1563806	IdentifierDeclStatement	char * src = opcode -> syntax ;	2930:2:95254:95280	1563758	12	True				
ANR	1563807	IdentifierDecl	* src = opcode -> syntax		1563758	0					
ANR	1563808	IdentifierDeclType	char *		1563758	0					
ANR	1563809	Identifier	src		1563758	1					
ANR	1563810	AssignmentExpression	* src = opcode -> syntax		1563758	2		=			
ANR	1563811	Identifier	src		1563758	0					
ANR	1563812	PtrMemberAccess	opcode -> syntax		1563758	1					
ANR	1563813	Identifier	opcode		1563758	0					
ANR	1563814	Identifier	syntax		1563758	1					
ANR	1563815	IdentifierDeclStatement	char * dst = buf ;	2931:2:95284:95299	1563758	13	True				
ANR	1563816	IdentifierDecl	* dst = buf		1563758	0					
ANR	1563817	IdentifierDeclType	char *		1563758	0					
ANR	1563818	Identifier	dst		1563758	1					
ANR	1563819	AssignmentExpression	* dst = buf		1563758	2		=			
ANR	1563820	Identifier	buf		1563758	0					
ANR	1563821	Identifier	buf		1563758	1					
ANR	1563822	SwitchStatement	switch ( packet_bits )		1563758	14					
ANR	1563823	Condition	packet_bits	2933:10:95312:95322	1563758	0	True				
ANR	1563824	Identifier	packet_bits		1563758	0					
ANR	1563825	CompoundStatement		13:4:291:291	1563758	1					
ANR	1563826	Label	case HEXAGON_END_PACKET :	2935:6:95337:95360	1563758	0	True				
ANR	1563827	Identifier	HEXAGON_END_PACKET		1563758	0					
ANR	1563828	Label	case HEXAGON_END_PAIR :	2936:6:95368:95389	1563758	1	True				
ANR	1563829	Identifier	HEXAGON_END_PAIR		1563758	0					
ANR	1563830	IfStatement	if ( in_packet )		1563758	2					
ANR	1563831	Condition	in_packet	2937:12:95403:95411	1563758	0	True				
ANR	1563832	Identifier	in_packet		1563758	0					
ANR	1563833	ExpressionStatement	"dst += sprintf ( dst , ""  "" )"	2938:10:95424:95450	1563758	1	True				
ANR	1563834	AssignmentExpression	"dst += sprintf ( dst , ""  "" )"		1563758	0		+=			
ANR	1563835	Identifier	dst		1563758	0					
ANR	1563836	CallExpression	"sprintf ( dst , ""  "" )"		1563758	1					
ANR	1563837	Callee	sprintf		1563758	0					
ANR	1563838	Identifier	sprintf		1563758	0					
ANR	1563839	ArgumentList	dst		1563758	1					
ANR	1563840	Argument	dst		1563758	0					
ANR	1563841	Identifier	dst		1563758	0					
ANR	1563842	Argument	"""  """		1563758	1					
ANR	1563843	PrimaryExpression	"""  """		1563758	0					
ANR	1563844	ElseStatement	else		1563758	0					
ANR	1563845	ExpressionStatement	packet_addr = address	2940:10:95475:95496	1563758	0	True				
ANR	1563846	AssignmentExpression	packet_addr = address		1563758	0		=			
ANR	1563847	Identifier	packet_addr		1563758	0					
ANR	1563848	Identifier	address		1563758	1					
ANR	1563849	ExpressionStatement	end_packet = TRUE	2941:8:95506:95523	1563758	3	True				
ANR	1563850	AssignmentExpression	end_packet = TRUE		1563758	0		=			
ANR	1563851	Identifier	end_packet		1563758	0					
ANR	1563852	Identifier	TRUE		1563758	1					
ANR	1563853	BreakStatement	break ;	2942:8:95533:95538	1563758	4	True				
ANR	1563854	Label	case HEXAGON_END_LOOP :	2944:6:95547:95568	1563758	5	True				
ANR	1563855	Identifier	HEXAGON_END_LOOP		1563758	0					
ANR	1563856	Label	case HEXAGON_END_NOT :	2945:6:95576:95596	1563758	6	True				
ANR	1563857	Identifier	HEXAGON_END_NOT		1563758	0					
ANR	1563858	IfStatement	if ( ! in_packet )		1563758	7					
ANR	1563859	Condition	! in_packet	2946:12:95610:95619	1563758	0	True				
ANR	1563860	UnaryOperationExpression	! in_packet		1563758	0					
ANR	1563861	UnaryOperator	!		1563758	0					
ANR	1563862	Identifier	in_packet		1563758	1					
ANR	1563863	CompoundStatement		26:10:594:594	1563758	1					
ANR	1563864	ExpressionStatement	"dst += sprintf ( dst , ""%c "" , PACKET_BEGIN )"	2948:12:95646:95687	1563758	0	True				
ANR	1563865	AssignmentExpression	"dst += sprintf ( dst , ""%c "" , PACKET_BEGIN )"		1563758	0		+=			
ANR	1563866	Identifier	dst		1563758	0					
ANR	1563867	CallExpression	"sprintf ( dst , ""%c "" , PACKET_BEGIN )"		1563758	1					
ANR	1563868	Callee	sprintf		1563758	0					
ANR	1563869	Identifier	sprintf		1563758	0					
ANR	1563870	ArgumentList	dst		1563758	1					
ANR	1563871	Argument	dst		1563758	0					
ANR	1563872	Identifier	dst		1563758	0					
ANR	1563873	Argument	"""%c """		1563758	1					
ANR	1563874	PrimaryExpression	"""%c """		1563758	0					
ANR	1563875	Argument	PACKET_BEGIN		1563758	2					
ANR	1563876	Identifier	PACKET_BEGIN		1563758	0					
ANR	1563877	ExpressionStatement	packet_addr = address	2949:12:95701:95722	1563758	1	True				
ANR	1563878	AssignmentExpression	packet_addr = address		1563758	0		=			
ANR	1563879	Identifier	packet_addr		1563758	0					
ANR	1563880	Identifier	address		1563758	1					
ANR	1563881	ElseStatement	else		1563758	0					
ANR	1563882	ExpressionStatement	"dst += sprintf ( dst , ""  "" )"	2952:10:95759:95785	1563758	0	True				
ANR	1563883	AssignmentExpression	"dst += sprintf ( dst , ""  "" )"		1563758	0		+=			
ANR	1563884	Identifier	dst		1563758	0					
ANR	1563885	CallExpression	"sprintf ( dst , ""  "" )"		1563758	1					
ANR	1563886	Callee	sprintf		1563758	0					
ANR	1563887	Identifier	sprintf		1563758	0					
ANR	1563888	ArgumentList	dst		1563758	1					
ANR	1563889	Argument	dst		1563758	0					
ANR	1563890	Identifier	dst		1563758	0					
ANR	1563891	Argument	"""  """		1563758	1					
ANR	1563892	PrimaryExpression	"""  """		1563758	0					
ANR	1563893	ExpressionStatement	++ in_packet	2954:8:95796:95807	1563758	8	True				
ANR	1563894	UnaryExpression	++ in_packet		1563758	0					
ANR	1563895	IncDec	++		1563758	0					
ANR	1563896	Identifier	in_packet		1563758	1					
ANR	1563897	IfStatement	if ( packet_bits == HEXAGON_END_LOOP )		1563758	9					
ANR	1563898	Condition	packet_bits == HEXAGON_END_LOOP	2956:12:95822:95852	1563758	0	True				
ANR	1563899	EqualityExpression	packet_bits == HEXAGON_END_LOOP		1563758	0		==			
ANR	1563900	Identifier	packet_bits		1563758	0					
ANR	1563901	Identifier	HEXAGON_END_LOOP		1563758	1					
ANR	1563902	CompoundStatement		36:10:827:827	1563758	1					
ANR	1563903	IfStatement	if ( in_packet == 1 )		1563758	0					
ANR	1563904	Condition	in_packet == 1	2958:16:95883:95896	1563758	0	True				
ANR	1563905	EqualityExpression	in_packet == 1		1563758	0		==			
ANR	1563906	Identifier	in_packet		1563758	0					
ANR	1563907	PrimaryExpression	1		1563758	1					
ANR	1563908	ExpressionStatement	end_inner = TRUE	2958:32:95899:95915	1563758	1	True				
ANR	1563909	AssignmentExpression	end_inner = TRUE		1563758	0		=			
ANR	1563910	Identifier	end_inner		1563758	0					
ANR	1563911	Identifier	TRUE		1563758	1					
ANR	1563912	IfStatement	if ( in_packet == 2 )		1563758	1					
ANR	1563913	Condition	in_packet == 2	2959:16:95933:95946	1563758	0	True				
ANR	1563914	EqualityExpression	in_packet == 2		1563758	0		==			
ANR	1563915	Identifier	in_packet		1563758	0					
ANR	1563916	PrimaryExpression	2		1563758	1					
ANR	1563917	ExpressionStatement	end_outer = TRUE	2959:32:95949:95965	1563758	1	True				
ANR	1563918	AssignmentExpression	end_outer = TRUE		1563758	0		=			
ANR	1563919	Identifier	end_outer		1563758	0					
ANR	1563920	Identifier	TRUE		1563758	1					
ANR	1563921	BreakStatement	break ;	2961:8:95987:95992	1563758	10	True				
ANR	1563922	Label	default :	2963:6:96001:96008	1563758	11	True				
ANR	1563923	Identifier	default		1563758	0					
ANR	1563924	IfStatement	if ( errmsg )		1563758	12					
ANR	1563925	Condition	errmsg	2964:12:96022:96027	1563758	0	True				
ANR	1563926	Identifier	errmsg		1563758	0					
ANR	1563927	CompoundStatement		44:10:1002:1002	1563758	1					
ANR	1563928	ExpressionStatement	"snprintf ( temp , sizeof ( temp ) , ""invalid packet bits: %.8x"" , packet_bits )"	2966:12:96054:96126	1563758	0	True				
ANR	1563929	CallExpression	"snprintf ( temp , sizeof ( temp ) , ""invalid packet bits: %.8x"" , packet_bits )"		1563758	0					
ANR	1563930	Callee	snprintf		1563758	0					
ANR	1563931	Identifier	snprintf		1563758	0					
ANR	1563932	ArgumentList	temp		1563758	1					
ANR	1563933	Argument	temp		1563758	0					
ANR	1563934	Identifier	temp		1563758	0					
ANR	1563935	Argument	sizeof ( temp )		1563758	1					
ANR	1563936	SizeofExpression	sizeof ( temp )		1563758	0					
ANR	1563937	Sizeof	sizeof		1563758	0					
ANR	1563938	SizeofOperand	temp		1563758	1					
ANR	1563939	Argument	"""invalid packet bits: %.8x"""		1563758	2					
ANR	1563940	PrimaryExpression	"""invalid packet bits: %.8x"""		1563758	0					
ANR	1563941	Argument	packet_bits		1563758	3					
ANR	1563942	Identifier	packet_bits		1563758	0					
ANR	1563943	ExpressionStatement	* errmsg = temp	2967:12:96140:96154	1563758	1	True				
ANR	1563944	AssignmentExpression	* errmsg = temp		1563758	0		=			
ANR	1563945	UnaryOperationExpression	* errmsg		1563758	0					
ANR	1563946	UnaryOperator	*		1563758	0					
ANR	1563947	Identifier	errmsg		1563758	1					
ANR	1563948	Identifier	temp		1563758	1					
ANR	1563949	ReturnStatement	return FALSE ;	2969:8:96176:96188	1563758	13	True				
ANR	1563950	Identifier	FALSE		1563758	0					
ANR	1563951	BreakStatement	break ;	2970:8:96198:96203	1563758	14	True				
ANR	1563952	WhileStatement	while ( * src )		1563758	15					
ANR	1563953	Condition	* src	2973:9:96221:96224	1563758	0	True				
ANR	1563954	UnaryOperationExpression	* src		1563758	0					
ANR	1563955	UnaryOperator	*		1563758	0					
ANR	1563956	Identifier	src		1563758	1					
ANR	1563957	CompoundStatement		53:4:1193:1193	1563758	1					
ANR	1563958	IfStatement	if ( ( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#' )		1563758	0					
ANR	1563959	Condition	( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#'	2976:10:96270:96325	1563758	0	True				
ANR	1563960	OrExpression	( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#'		1563758	0		||			
ANR	1563961	AndExpression	ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' )		1563758	0		&&			
ANR	1563962	CallExpression	ISUPPER ( * src )		1563758	0					
ANR	1563963	Callee	ISUPPER		1563758	0					
ANR	1563964	Identifier	ISUPPER		1563758	0					
ANR	1563965	ArgumentList	* src		1563758	1					
ANR	1563966	Argument	* src		1563758	0					
ANR	1563967	UnaryOperationExpression	* src		1563758	0					
ANR	1563968	UnaryOperator	*		1563758	0					
ANR	1563969	Identifier	src		1563758	1					
ANR	1563970	EqualityExpression	TOUPPER ( * src ) != 'I'		1563758	1		!=			
ANR	1563971	CallExpression	TOUPPER ( * src )		1563758	0					
ANR	1563972	Callee	TOUPPER		1563758	0					
ANR	1563973	Identifier	TOUPPER		1563758	0					
ANR	1563974	ArgumentList	* src		1563758	1					
ANR	1563975	Argument	* src		1563758	0					
ANR	1563976	UnaryOperationExpression	* src		1563758	0					
ANR	1563977	UnaryOperator	*		1563758	0					
ANR	1563978	Identifier	src		1563758	1					
ANR	1563979	PrimaryExpression	'I'		1563758	1					
ANR	1563980	EqualityExpression	* src == '#'		1563758	1		==			
ANR	1563981	UnaryOperationExpression	* src		1563758	0					
ANR	1563982	UnaryOperator	*		1563758	0					
ANR	1563983	Identifier	src		1563758	1					
ANR	1563984	PrimaryExpression	'#'		1563758	1					
ANR	1563985	CompoundStatement		59:10:1374:1382	1563758	1					
ANR	1563986	IdentifierDeclStatement	int found = FALSE ;	2979:10:96383:96400	1563758	0	True				
ANR	1563987	IdentifierDecl	found = FALSE		1563758	0					
ANR	1563988	IdentifierDeclType	int		1563758	0					
ANR	1563989	Identifier	found		1563758	1					
ANR	1563990	AssignmentExpression	found = FALSE		1563758	2		=			
ANR	1563991	Identifier	FALSE		1563758	0					
ANR	1563992	Identifier	FALSE		1563758	1					
ANR	1563993	IdentifierDeclStatement	size_t i ;	2980:10:96412:96420	1563758	1	True				
ANR	1563994	IdentifierDecl	i		1563758	0					
ANR	1563995	IdentifierDeclType	size_t		1563758	0					
ANR	1563996	Identifier	i		1563758	1					
ANR	1563997	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		1563758	2					
ANR	1563998	ForInit	i = 0 ;	2982:15:96438:96443	1563758	0	True				
ANR	1563999	AssignmentExpression	i = 0		1563758	0		=			
ANR	1564000	Identifier	i		1563758	0					
ANR	1564001	PrimaryExpression	0		1563758	1					
ANR	1564002	Condition	i < hexagon_operand_count	2982:22:96445:96469	1563758	1	True				
ANR	1564003	RelationalExpression	i < hexagon_operand_count		1563758	0		<			
ANR	1564004	Identifier	i		1563758	0					
ANR	1564005	Identifier	hexagon_operand_count		1563758	1					
ANR	1564006	PostIncDecOperationExpression	i ++	2982:49:96472:96474	1563758	2	True				
ANR	1564007	Identifier	i		1563758	0					
ANR	1564008	IncDec	++		1563758	1					
ANR	1564009	CompoundStatement		64:14:1506:1516	1563758	3					
ANR	1564010	IdentifierDeclStatement	hexagon_operand operand ;	2984:14:96505:96528	1563758	0	True				
ANR	1564011	IdentifierDecl	operand		1563758	0					
ANR	1564012	IdentifierDeclType	hexagon_operand		1563758	0					
ANR	1564013	Identifier	operand		1563758	1					
ANR	1564014	IdentifierDeclStatement	size_t len ;	2985:14:96544:96554	1563758	1	True				
ANR	1564015	IdentifierDecl	len		1563758	0					
ANR	1564016	IdentifierDeclType	size_t		1563758	0					
ANR	1564017	Identifier	len		1563758	1					
ANR	1564018	ExpressionStatement	operand = hexagon_operands [ i ]	2987:14:96571:96601	1563758	2	True				
ANR	1564019	AssignmentExpression	operand = hexagon_operands [ i ]		1563758	0		=			
ANR	1564020	Identifier	operand		1563758	0					
ANR	1564021	ArrayIndexing	hexagon_operands [ i ]		1563758	1					
ANR	1564022	Identifier	hexagon_operands		1563758	0					
ANR	1564023	Identifier	i		1563758	1					
ANR	1564024	ExpressionStatement	len = strlen ( operand . fmt )	2988:14:96617:96643	1563758	3	True				
ANR	1564025	AssignmentExpression	len = strlen ( operand . fmt )		1563758	0		=			
ANR	1564026	Identifier	len		1563758	0					
ANR	1564027	CallExpression	strlen ( operand . fmt )		1563758	1					
ANR	1564028	Callee	strlen		1563758	0					
ANR	1564029	Identifier	strlen		1563758	0					
ANR	1564030	ArgumentList	operand . fmt		1563758	1					
ANR	1564031	Argument	operand . fmt		1563758	0					
ANR	1564032	MemberAccess	operand . fmt		1563758	0					
ANR	1564033	Identifier	operand		1563758	0					
ANR	1564034	Identifier	fmt		1563758	1					
ANR	1564035	IfStatement	"if ( ! strncmp ( src , operand . fmt , len ) )"		1563758	4					
ANR	1564036	Condition	"! strncmp ( src , operand . fmt , len )"	2990:18:96664:96695	1563758	0	True				
ANR	1564037	UnaryOperationExpression	"! strncmp ( src , operand . fmt , len )"		1563758	0					
ANR	1564038	UnaryOperator	!		1563758	0					
ANR	1564039	CallExpression	"strncmp ( src , operand . fmt , len )"		1563758	1					
ANR	1564040	Callee	strncmp		1563758	0					
ANR	1564041	Identifier	strncmp		1563758	0					
ANR	1564042	ArgumentList	src		1563758	1					
ANR	1564043	Argument	src		1563758	0					
ANR	1564044	Identifier	src		1563758	0					
ANR	1564045	Argument	operand . fmt		1563758	1					
ANR	1564046	MemberAccess	operand . fmt		1563758	0					
ANR	1564047	Identifier	operand		1563758	0					
ANR	1564048	Identifier	fmt		1563758	1					
ANR	1564049	Argument	len		1563758	2					
ANR	1564050	Identifier	len		1563758	0					
ANR	1564051	CompoundStatement		70:16:1676:1676	1563758	1					
ANR	1564052	ExpressionStatement	found = TRUE	2992:18:96734:96746	1563758	0	True				
ANR	1564053	AssignmentExpression	found = TRUE		1563758	0		=			
ANR	1564054	Identifier	found		1563758	0					
ANR	1564055	Identifier	TRUE		1563758	1					
ANR	1564056	IfStatement	if ( opcode -> attributes & A_IT_EXTENDER )		1563758	1					
ANR	1564057	Condition	opcode -> attributes & A_IT_EXTENDER	2994:22:96771:96804	1563758	0	True				
ANR	1564058	BitAndExpression	opcode -> attributes & A_IT_EXTENDER		1563758	0		&			
ANR	1564059	PtrMemberAccess	opcode -> attributes		1563758	0					
ANR	1564060	Identifier	opcode		1563758	0					
ANR	1564061	Identifier	attributes		1563758	1					
ANR	1564062	Identifier	A_IT_EXTENDER		1563758	1					
ANR	1564063	ExpressionStatement	operand . flags |= HEXAGON_OPERAND_IS_KXER	2995:20:96827:96867	1563758	1	True				
ANR	1564064	AssignmentExpression	operand . flags |= HEXAGON_OPERAND_IS_KXER		1563758	0		|=			
ANR	1564065	MemberAccess	operand . flags		1563758	0					
ANR	1564066	Identifier	operand		1563758	0					
ANR	1564067	Identifier	flags		1563758	1					
ANR	1564068	Identifier	HEXAGON_OPERAND_IS_KXER		1563758	1					
ANR	1564069	ElseStatement	else		1563758	0					
ANR	1564070	IfStatement	if ( ( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) ) )		1563758	0					
ANR	1564071	Condition	( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) )	2996:27:96896:97256	1563758	0	True				
ANR	1564072	AndExpression	( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) )		1563758	0		&&			
ANR	1564073	BitAndExpression	operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE		1563758	0		&			
ANR	1564074	MemberAccess	operand . flags		1563758	0					
ANR	1564075	Identifier	operand		1563758	0					
ANR	1564076	Identifier	flags		1563758	1					
ANR	1564077	Identifier	HEXAGON_OPERAND_IS_IMMEDIATE		1563758	1					
ANR	1564078	OrExpression	( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) )		1563758	1		||			
ANR	1564079	AndExpression	( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) )		1563758	0		&&			
ANR	1564080	BitAndExpression	opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE		1563758	0		&			
ANR	1564081	PtrMemberAccess	opcode -> attributes		1563758	0					
ANR	1564082	Identifier	opcode		1563758	0					
ANR	1564083	Identifier	attributes		1563758	1					
ANR	1564084	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		1563758	1					
ANR	1564085	CallExpression	ISLOWER ( operand . enc_letter )		1563758	1					
ANR	1564086	Callee	ISLOWER		1563758	0					
ANR	1564087	Identifier	ISLOWER		1563758	0					
ANR	1564088	ArgumentList	operand . enc_letter		1563758	1					
ANR	1564089	Argument	operand . enc_letter		1563758	0					
ANR	1564090	MemberAccess	operand . enc_letter		1563758	0					
ANR	1564091	Identifier	operand		1563758	0					
ANR	1564092	Identifier	enc_letter		1563758	1					
ANR	1564093	AndExpression	( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) )		1563758	1		&&			
ANR	1564094	BitAndExpression	opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE		1563758	0		&			
ANR	1564095	PtrMemberAccess	opcode -> attributes		1563758	0					
ANR	1564096	Identifier	opcode		1563758	0					
ANR	1564097	Identifier	attributes		1563758	1					
ANR	1564098	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		1563758	1					
ANR	1564099	CallExpression	ISUPPER ( operand . enc_letter )		1563758	1					
ANR	1564100	Callee	ISUPPER		1563758	0					
ANR	1564101	Identifier	ISUPPER		1563758	0					
ANR	1564102	ArgumentList	operand . enc_letter		1563758	1					
ANR	1564103	Argument	operand . enc_letter		1563758	0					
ANR	1564104	MemberAccess	operand . enc_letter		1563758	0					
ANR	1564105	Identifier	operand		1563758	0					
ANR	1564106	Identifier	enc_letter		1563758	1					
ANR	1564107	ExpressionStatement	operand . flags |= HEXAGON_OPERAND_IS_KXED	3002:20:97345:97385	1563758	1	True				
ANR	1564108	AssignmentExpression	operand . flags |= HEXAGON_OPERAND_IS_KXED		1563758	0		|=			
ANR	1564109	MemberAccess	operand . flags		1563758	0					
ANR	1564110	Identifier	operand		1563758	0					
ANR	1564111	Identifier	flags		1563758	1					
ANR	1564112	Identifier	HEXAGON_OPERAND_IS_KXED		1563758	1					
ANR	1564113	ExpressionStatement	"dst = hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"	3003:18:97405:97538	1563758	2	True				
ANR	1564114	AssignmentExpression	"dst = hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"		1563758	0		=			
ANR	1564115	Identifier	dst		1563758	0					
ANR	1564116	CallExpression	"hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"		1563758	1					
ANR	1564117	Callee	hexagon_dis_operand		1563758	0					
ANR	1564118	Identifier	hexagon_dis_operand		1563758	0					
ANR	1564119	ArgumentList	& operand		1563758	1					
ANR	1564120	Argument	& operand		1563758	0					
ANR	1564121	UnaryOperationExpression	& operand		1563758	0					
ANR	1564122	UnaryOperator	&		1563758	0					
ANR	1564123	Identifier	operand		1563758	1					
ANR	1564124	Argument	insn		1563758	1					
ANR	1564125	Identifier	insn		1563758	0					
ANR	1564126	Argument	address		1563758	2					
ANR	1564127	Identifier	address		1563758	0					
ANR	1564128	Argument	packet_addr		1563758	3					
ANR	1564129	Identifier	packet_addr		1563758	0					
ANR	1564130	Argument	opcode -> enc		1563758	4					
ANR	1564131	PtrMemberAccess	opcode -> enc		1563758	0					
ANR	1564132	Identifier	opcode		1563758	0					
ANR	1564133	Identifier	enc		1563758	1					
ANR	1564134	Argument	dst		1563758	5					
ANR	1564135	Identifier	dst		1563758	0					
ANR	1564136	Argument	errmsg		1563758	6					
ANR	1564137	Identifier	errmsg		1563758	0					
ANR	1564138	IfStatement	if ( ! dst )		1563758	3					
ANR	1564139	Condition	! dst	3005:22:97562:97565	1563758	0	True				
ANR	1564140	UnaryOperationExpression	! dst		1563758	0					
ANR	1564141	UnaryOperator	!		1563758	0					
ANR	1564142	Identifier	dst		1563758	1					
ANR	1564143	CompoundStatement		85:20:2550:2550	1563758	1					
ANR	1564144	ExpressionStatement	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"	3008:22:97660:97704	1563758	0	True				
ANR	1564145	CallExpression	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"		1563758	0					
ANR	1564146	Callee	sprintf		1563758	0					
ANR	1564147	Identifier	sprintf		1563758	0					
ANR	1564148	ArgumentList	buf		1563758	1					
ANR	1564149	Argument	buf		1563758	0					
ANR	1564150	Identifier	buf		1563758	0					
ANR	1564151	Argument	"""<unknown insn 0x%08x>"""		1563758	1					
ANR	1564152	PrimaryExpression	"""<unknown insn 0x%08x>"""		1563758	0					
ANR	1564153	Argument	insn		1563758	2					
ANR	1564154	Identifier	insn		1563758	0					
ANR	1564155	ReturnStatement	return FALSE ;	3009:22:97728:97740	1563758	1	True				
ANR	1564156	Identifier	FALSE		1563758	0					
ANR	1564157	ExpressionStatement	src += len	3013:18:97838:97848	1563758	4	True				
ANR	1564158	AssignmentExpression	src += len		1563758	0		+=			
ANR	1564159	Identifier	src		1563758	0					
ANR	1564160	Identifier	len		1563758	1					
ANR	1564161	BreakStatement	break ;	3014:18:97868:97873	1563758	5	True				
ANR	1564162	IfStatement	if ( ! found )		1563758	3					
ANR	1564163	Condition	! found	3018:14:97922:97927	1563758	0	True				
ANR	1564164	UnaryOperationExpression	! found		1563758	0					
ANR	1564165	UnaryOperator	!		1563758	0					
ANR	1564166	Identifier	found		1563758	1					
ANR	1564167	CompoundStatement		98:12:2904:2904	1563758	1					
ANR	1564168	ExpressionStatement	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"	3020:14:97958:98002	1563758	0	True				
ANR	1564169	CallExpression	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"		1563758	0					
ANR	1564170	Callee	sprintf		1563758	0					
ANR	1564171	Identifier	sprintf		1563758	0					
ANR	1564172	ArgumentList	buf		1563758	1					
ANR	1564173	Argument	buf		1563758	0					
ANR	1564174	Identifier	buf		1563758	0					
ANR	1564175	Argument	"""<unknown insn 0x%08x>"""		1563758	1					
ANR	1564176	PrimaryExpression	"""<unknown insn 0x%08x>"""		1563758	0					
ANR	1564177	Argument	insn		1563758	2					
ANR	1564178	Identifier	insn		1563758	0					
ANR	1564179	IfStatement	if ( errmsg )		1563758	1					
ANR	1564180	Condition	errmsg	3022:18:98023:98028	1563758	0	True				
ANR	1564181	Identifier	errmsg		1563758	0					
ANR	1564182	CompoundStatement		102:16:3009:3009	1563758	1					
ANR	1564183	ExpressionStatement	"snprintf ( temp , sizeof ( temp ) , ""unknown operand: %s"" , src )"	3024:18:98067:98125	1563758	0	True				
ANR	1564184	CallExpression	"snprintf ( temp , sizeof ( temp ) , ""unknown operand: %s"" , src )"		1563758	0					
ANR	1564185	Callee	snprintf		1563758	0					
ANR	1564186	Identifier	snprintf		1563758	0					
ANR	1564187	ArgumentList	temp		1563758	1					
ANR	1564188	Argument	temp		1563758	0					
ANR	1564189	Identifier	temp		1563758	0					
ANR	1564190	Argument	sizeof ( temp )		1563758	1					
ANR	1564191	SizeofExpression	sizeof ( temp )		1563758	0					
ANR	1564192	Sizeof	sizeof		1563758	0					
ANR	1564193	SizeofOperand	temp		1563758	1					
ANR	1564194	Argument	"""unknown operand: %s"""		1563758	2					
ANR	1564195	PrimaryExpression	"""unknown operand: %s"""		1563758	0					
ANR	1564196	Argument	src		1563758	3					
ANR	1564197	Identifier	src		1563758	0					
ANR	1564198	ExpressionStatement	* errmsg = temp	3025:18:98145:98159	1563758	1	True				
ANR	1564199	AssignmentExpression	* errmsg = temp		1563758	0		=			
ANR	1564200	UnaryOperationExpression	* errmsg		1563758	0					
ANR	1564201	UnaryOperator	*		1563758	0					
ANR	1564202	Identifier	errmsg		1563758	1					
ANR	1564203	Identifier	temp		1563758	1					
ANR	1564204	ReturnStatement	return FALSE ;	3027:14:98193:98205	1563758	2	True				
ANR	1564205	Identifier	FALSE		1563758	0					
ANR	1564206	ElseStatement	else		1563758	0					
ANR	1564207	CompoundStatement		110:8:3212:3212	1563758	0					
ANR	1564208	SwitchStatement	switch ( * src )		1563758	0					
ANR	1564209	Condition	* src	3033:18:98308:98311	1563758	0	True				
ANR	1564210	UnaryOperationExpression	* src		1563758	0					
ANR	1564211	UnaryOperator	*		1563758	0					
ANR	1564212	Identifier	src		1563758	1					
ANR	1564213	CompoundStatement		113:12:3288:3288	1563758	1					
ANR	1564214	Label	case '(' :	3036:14:98380:98388	1563758	0	True				
ANR	1564215	Label	case '!' :	3037:14:98404:98412	1563758	1	True				
ANR	1564216	ExpressionStatement	* dst ++ = * src ++	3038:16:98430:98445	1563758	2	True				
ANR	1564217	AssignmentExpression	* dst ++ = * src ++		1563758	0		=			
ANR	1564218	UnaryOperationExpression	* dst ++		1563758	0					
ANR	1564219	UnaryOperator	*		1563758	0					
ANR	1564220	PostIncDecOperationExpression	dst ++		1563758	1					
ANR	1564221	Identifier	dst		1563758	0					
ANR	1564222	IncDec	++		1563758	1					
ANR	1564223	UnaryOperationExpression	* src ++		1563758	1					
ANR	1564224	UnaryOperator	*		1563758	0					
ANR	1564225	PostIncDecOperationExpression	src ++		1563758	1					
ANR	1564226	Identifier	src		1563758	0					
ANR	1564227	IncDec	++		1563758	1					
ANR	1564228	WhileStatement	while ( ISBLANK ( src [ 0 ] ) )		1563758	3					
ANR	1564229	Condition	ISBLANK ( src [ 0 ] )	3040:23:98471:98487	1563758	0	True				
ANR	1564230	CallExpression	ISBLANK ( src [ 0 ] )		1563758	0					
ANR	1564231	Callee	ISBLANK		1563758	0					
ANR	1564232	Identifier	ISBLANK		1563758	0					
ANR	1564233	ArgumentList	src [ 0 ]		1563758	1					
ANR	1564234	Argument	src [ 0 ]		1563758	0					
ANR	1564235	ArrayIndexing	src [ 0 ]		1563758	0					
ANR	1564236	Identifier	src		1563758	0					
ANR	1564237	PrimaryExpression	0		1563758	1					
ANR	1564238	ExpressionStatement	src ++	3041:18:98508:98513	1563758	1	True				
ANR	1564239	PostIncDecOperationExpression	src ++		1563758	0					
ANR	1564240	Identifier	src		1563758	0					
ANR	1564241	IncDec	++		1563758	1					
ANR	1564242	BreakStatement	break ;	3042:16:98531:98536	1563758	4	True				
ANR	1564243	Label	case ')' :	3045:14:98594:98602	1563758	5	True				
ANR	1564244	Label	case '.' :	3046:14:98618:98626	1563758	6	True				
ANR	1564245	Label	"case ',' :"	3047:14:98642:98650	1563758	7	True				
ANR	1564246	Label	case ':' :	3048:14:98666:98674	1563758	8	True				
ANR	1564247	WhileStatement	while ( ISBLANK ( dst [ - 1 ] ) )		1563758	9					
ANR	1564248	Condition	ISBLANK ( dst [ - 1 ] )	3049:23:98699:98716	1563758	0	True				
ANR	1564249	CallExpression	ISBLANK ( dst [ - 1 ] )		1563758	0					
ANR	1564250	Callee	ISBLANK		1563758	0					
ANR	1564251	Identifier	ISBLANK		1563758	0					
ANR	1564252	ArgumentList	dst [ - 1 ]		1563758	1					
ANR	1564253	Argument	dst [ - 1 ]		1563758	0					
ANR	1564254	ArrayIndexing	dst [ - 1 ]		1563758	0					
ANR	1564255	Identifier	dst		1563758	0					
ANR	1564256	UnaryOperationExpression	- 1		1563758	1					
ANR	1564257	UnaryOperator	-		1563758	0					
ANR	1564258	PrimaryExpression	1		1563758	1					
ANR	1564259	ExpressionStatement	dst --	3050:18:98737:98742	1563758	1	True				
ANR	1564260	PostIncDecOperationExpression	dst --		1563758	0					
ANR	1564261	Identifier	dst		1563758	0					
ANR	1564262	IncDec	--		1563758	1					
ANR	1564263	ExpressionStatement	* dst ++ = * src ++	3052:16:98761:98776	1563758	10	True				
ANR	1564264	AssignmentExpression	* dst ++ = * src ++		1563758	0		=			
ANR	1564265	UnaryOperationExpression	* dst ++		1563758	0					
ANR	1564266	UnaryOperator	*		1563758	0					
ANR	1564267	PostIncDecOperationExpression	dst ++		1563758	1					
ANR	1564268	Identifier	dst		1563758	0					
ANR	1564269	IncDec	++		1563758	1					
ANR	1564270	UnaryOperationExpression	* src ++		1563758	1					
ANR	1564271	UnaryOperator	*		1563758	0					
ANR	1564272	PostIncDecOperationExpression	src ++		1563758	1					
ANR	1564273	Identifier	src		1563758	0					
ANR	1564274	IncDec	++		1563758	1					
ANR	1564275	BreakStatement	break ;	3053:16:98794:98799	1563758	11	True				
ANR	1564276	Label	default :	3056:14:98856:98863	1563758	12	True				
ANR	1564277	Identifier	default		1563758	0					
ANR	1564278	ExpressionStatement	* dst ++ = * src ++	3057:16:98881:98896	1563758	13	True				
ANR	1564279	AssignmentExpression	* dst ++ = * src ++		1563758	0		=			
ANR	1564280	UnaryOperationExpression	* dst ++		1563758	0					
ANR	1564281	UnaryOperator	*		1563758	0					
ANR	1564282	PostIncDecOperationExpression	dst ++		1563758	1					
ANR	1564283	Identifier	dst		1563758	0					
ANR	1564284	IncDec	++		1563758	1					
ANR	1564285	UnaryOperationExpression	* src ++		1563758	1					
ANR	1564286	UnaryOperator	*		1563758	0					
ANR	1564287	PostIncDecOperationExpression	src ++		1563758	1					
ANR	1564288	Identifier	src		1563758	0					
ANR	1564289	IncDec	++		1563758	1					
ANR	1564290	BreakStatement	break ;	3058:16:98914:98919	1563758	14	True				
ANR	1564291	ExpressionStatement	* dst = '\\0'	3063:2:98954:98965	1563758	16	True				
ANR	1564292	AssignmentExpression	* dst = '\\0'		1563758	0		=			
ANR	1564293	UnaryOperationExpression	* dst		1563758	0					
ANR	1564294	UnaryOperator	*		1563758	0					
ANR	1564295	Identifier	dst		1563758	1					
ANR	1564296	PrimaryExpression	'\\0'		1563758	1					
ANR	1564297	IfStatement	if ( end_packet )		1563758	17					
ANR	1564298	Condition	end_packet	3065:6:98974:98983	1563758	0	True				
ANR	1564299	Identifier	end_packet		1563758	0					
ANR	1564300	CompoundStatement		145:4:3952:3952	1563758	1					
ANR	1564301	IfStatement	if ( in_packet )		1563758	0					
ANR	1564302	Condition	in_packet	3067:10:99002:99010	1563758	0	True				
ANR	1564303	Identifier	in_packet		1563758	0					
ANR	1564304	CompoundStatement		147:8:3983:3983	1563758	1					
ANR	1564305	ExpressionStatement	"dst += sprintf ( dst , "" %c"" , PACKET_END )"	3069:10:99033:99072	1563758	0	True				
ANR	1564306	AssignmentExpression	"dst += sprintf ( dst , "" %c"" , PACKET_END )"		1563758	0		+=			
ANR	1564307	Identifier	dst		1563758	0					
ANR	1564308	CallExpression	"sprintf ( dst , "" %c"" , PACKET_END )"		1563758	1					
ANR	1564309	Callee	sprintf		1563758	0					
ANR	1564310	Identifier	sprintf		1563758	0					
ANR	1564311	ArgumentList	dst		1563758	1					
ANR	1564312	Argument	dst		1563758	0					
ANR	1564313	Identifier	dst		1563758	0					
ANR	1564314	Argument	""" %c"""		1563758	1					
ANR	1564315	PrimaryExpression	""" %c"""		1563758	0					
ANR	1564316	Argument	PACKET_END		1563758	2					
ANR	1564317	Identifier	PACKET_END		1563758	0					
ANR	1564318	IfStatement	if ( end_inner )		1563758	1					
ANR	1564319	Condition	end_inner	3071:14:99089:99097	1563758	0	True				
ANR	1564320	Identifier	end_inner		1563758	0					
ANR	1564321	ExpressionStatement	"dst += sprintf ( dst , PACKET_END_INNER )"	3072:12:99112:99150	1563758	1	True				
ANR	1564322	AssignmentExpression	"dst += sprintf ( dst , PACKET_END_INNER )"		1563758	0		+=			
ANR	1564323	Identifier	dst		1563758	0					
ANR	1564324	CallExpression	"sprintf ( dst , PACKET_END_INNER )"		1563758	1					
ANR	1564325	Callee	sprintf		1563758	0					
ANR	1564326	Identifier	sprintf		1563758	0					
ANR	1564327	ArgumentList	dst		1563758	1					
ANR	1564328	Argument	dst		1563758	0					
ANR	1564329	Identifier	dst		1563758	0					
ANR	1564330	Argument	PACKET_END_INNER		1563758	1					
ANR	1564331	Identifier	PACKET_END_INNER		1563758	0					
ANR	1564332	IfStatement	if ( end_outer )		1563758	2					
ANR	1564333	Condition	end_outer	3073:14:99166:99174	1563758	0	True				
ANR	1564334	Identifier	end_outer		1563758	0					
ANR	1564335	ExpressionStatement	"dst += sprintf ( dst , PACKET_END_OUTER )"	3074:12:99189:99227	1563758	1	True				
ANR	1564336	AssignmentExpression	"dst += sprintf ( dst , PACKET_END_OUTER )"		1563758	0		+=			
ANR	1564337	Identifier	dst		1563758	0					
ANR	1564338	CallExpression	"sprintf ( dst , PACKET_END_OUTER )"		1563758	1					
ANR	1564339	Callee	sprintf		1563758	0					
ANR	1564340	Identifier	sprintf		1563758	0					
ANR	1564341	ArgumentList	dst		1563758	1					
ANR	1564342	Argument	dst		1563758	0					
ANR	1564343	Identifier	dst		1563758	0					
ANR	1564344	Argument	PACKET_END_OUTER		1563758	1					
ANR	1564345	Identifier	PACKET_END_OUTER		1563758	0					
ANR	1564346	ExpressionStatement	in_packet = FALSE	3077:6:99246:99263	1563758	1	True				
ANR	1564347	AssignmentExpression	in_packet = FALSE		1563758	0		=			
ANR	1564348	Identifier	in_packet		1563758	0					
ANR	1564349	Identifier	FALSE		1563758	1					
ANR	1564350	ExpressionStatement	end_inner = FALSE	3078:6:99271:99288	1563758	2	True				
ANR	1564351	AssignmentExpression	end_inner = FALSE		1563758	0		=			
ANR	1564352	Identifier	end_inner		1563758	0					
ANR	1564353	Identifier	FALSE		1563758	1					
ANR	1564354	ExpressionStatement	end_outer = FALSE	3079:6:99296:99313	1563758	3	True				
ANR	1564355	AssignmentExpression	end_outer = FALSE		1563758	0		=			
ANR	1564356	Identifier	end_outer		1563758	0					
ANR	1564357	Identifier	FALSE		1563758	1					
ANR	1564358	ReturnStatement	return TRUE ;	3082:2:99324:99335	1563758	18	True				
ANR	1564359	Identifier	TRUE		1563758	0					
ANR	1564360	ReturnType	int		1563758	1					
ANR	1564361	Identifier	hexagon_dis_opcode		1563758	2					
ANR	1564362	ParameterList	"char * buf , hexagon_insn insn , bfd_vma address , const hexagon_opcode * opcode , char * * errmsg"		1563758	3					
ANR	1564363	Parameter	char * buf	2920:1:94944:94952	1563758	0	True				
ANR	1564364	ParameterType	char *		1563758	0					
ANR	1564365	Identifier	buf		1563758	1					
ANR	1564366	Parameter	hexagon_insn insn	2920:12:94955:94971	1563758	1	True				
ANR	1564367	ParameterType	hexagon_insn		1563758	0					
ANR	1564368	Identifier	insn		1563758	1					
ANR	1564369	Parameter	bfd_vma address	2920:31:94974:94988	1563758	2	True				
ANR	1564370	ParameterType	bfd_vma		1563758	0					
ANR	1564371	Identifier	address		1563758	1					
ANR	1564372	Parameter	const hexagon_opcode * opcode	2921:1:94992:95019	1563758	3	True				
ANR	1564373	ParameterType	const hexagon_opcode *		1563758	0					
ANR	1564374	Identifier	opcode		1563758	1					
ANR	1564375	Parameter	char * * errmsg	2921:31:95022:95034	1563758	4	True				
ANR	1564376	ParameterType	char * *		1563758	0					
ANR	1564377	Identifier	errmsg		1563758	1					
ANR	1564378	CFGEntryNode	ENTRY		1563758		True				
ANR	1564379	CFGExitNode	EXIT		1563758		True				
ANR	1564380	Symbol	ISUPPER		1563758						
ANR	1564381	Symbol	in_packet		1563758						
ANR	1564382	Symbol	end_packet		1563758						
ANR	1564383	Symbol	end_outer		1563758						
ANR	1564384	Symbol	HEXAGON_OPERAND_IS_KXED		1563758						
ANR	1564385	Symbol	opcode -> attributes		1563758						
ANR	1564386	Symbol	opcode		1563758						
ANR	1564387	Symbol	* src		1563758						
ANR	1564388	Symbol	sprintf		1563758						
ANR	1564389	Symbol	HEXAGON_END_LOOP		1563758						
ANR	1564390	Symbol	* dst		1563758						
ANR	1564391	Symbol	strlen		1563758						
ANR	1564392	Symbol	strncmp		1563758						
ANR	1564393	Symbol	hexagon_operand_count		1563758						
ANR	1564394	Symbol	opcode -> enc		1563758						
ANR	1564395	Symbol	len		1563758						
ANR	1564396	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		1563758						
ANR	1564397	Symbol	HEXAGON_OPERAND_IS_KXER		1563758						
ANR	1564398	Symbol	hexagon_operands		1563758						
ANR	1564399	Symbol	operand . enc_letter		1563758						
ANR	1564400	Symbol	errmsg		1563758						
ANR	1564401	Symbol	TRUE		1563758						
ANR	1564402	Symbol	hexagon_dis_operand		1563758						
ANR	1564403	Symbol	HEXAGON_OPERAND_IS_IMMEDIATE		1563758						
ANR	1564404	Symbol	end_inner		1563758						
ANR	1564405	Symbol	* dst ++		1563758						
ANR	1564406	Symbol	* src ++		1563758						
ANR	1564407	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		1563758						
ANR	1564408	Symbol	PACKET_END		1563758						
ANR	1564409	Symbol	* errmsg		1563758						
ANR	1564410	Symbol	dst		1563758						
ANR	1564411	Symbol	ISBLANK		1563758						
ANR	1564412	Symbol	TOUPPER		1563758						
ANR	1564413	Symbol	& operand		1563758						
ANR	1564414	Symbol	operand . fmt		1563758						
ANR	1564415	Symbol	found		1563758						
ANR	1564416	Symbol	PACKET_END_INNER		1563758						
ANR	1564417	Symbol	PACKET_END_OUTER		1563758						
ANR	1564418	Symbol	HEXAGON_END_PACKET_GET		1563758						
ANR	1564419	Symbol	A_IT_EXTENDER		1563758						
ANR	1564420	Symbol	temp		1563758						
ANR	1564421	Symbol	address		1563758						
ANR	1564422	Symbol	src		1563758						
ANR	1564423	Symbol	* hexagon_operands		1563758						
ANR	1564424	Symbol	PACKET_BEGIN		1563758						
ANR	1564425	Symbol	operand . flags		1563758						
ANR	1564426	Symbol	i		1563758						
ANR	1564427	Symbol	ISLOWER		1563758						
ANR	1564428	Symbol	packet_addr		1563758						
ANR	1564429	Symbol	insn		1563758						
ANR	1564430	Symbol	opcode -> syntax		1563758						
ANR	1564431	Symbol	buf		1563758						
ANR	1564432	Symbol	* i		1563758						
ANR	1564433	Symbol	packet_bits		1563758						
ANR	1564434	Symbol	FALSE		1563758						
ANR	1564435	Symbol	operand		1563758						
ANR	1564436	Symbol	* opcode		1563758						
ANR	1564437	Function	hexagon_operand_find	3085:0:99340:99731							
ANR	1564438	FunctionDef	"hexagon_operand_find (const hexagon_operand * operand , const char * suffix)"		1564437	0					
ANR	1564439	CompoundStatement		3088:0:99438:99731	1564437	0					
ANR	1564440	IdentifierDeclStatement	size_t i ;	3089:2:99442:99450	1564437	0	True				
ANR	1564441	IdentifierDecl	i		1564437	0					
ANR	1564442	IdentifierDeclType	size_t		1564437	0					
ANR	1564443	Identifier	i		1564437	1					
ANR	1564444	IdentifierDeclStatement	char * buf ;	3090:2:99454:99463	1564437	1	True				
ANR	1564445	IdentifierDecl	* buf		1564437	0					
ANR	1564446	IdentifierDeclType	char *		1564437	0					
ANR	1564447	Identifier	buf		1564437	1					
ANR	1564448	ExpressionStatement	buf = alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )	3092:2:99468:99526	1564437	2	True				
ANR	1564449	AssignmentExpression	buf = alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )		1564437	0		=			
ANR	1564450	Identifier	buf		1564437	0					
ANR	1564451	CallExpression	alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )		1564437	1					
ANR	1564452	Callee	alloca		1564437	0					
ANR	1564453	Identifier	alloca		1564437	0					
ANR	1564454	ArgumentList	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		1564437	1					
ANR	1564455	Argument	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		1564437	0					
ANR	1564456	AdditiveExpression	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		1564437	0		+			
ANR	1564457	CallExpression	strlen ( operand -> fmt )		1564437	0					
ANR	1564458	Callee	strlen		1564437	0					
ANR	1564459	Identifier	strlen		1564437	0					
ANR	1564460	ArgumentList	operand -> fmt		1564437	1					
ANR	1564461	Argument	operand -> fmt		1564437	0					
ANR	1564462	PtrMemberAccess	operand -> fmt		1564437	0					
ANR	1564463	Identifier	operand		1564437	0					
ANR	1564464	Identifier	fmt		1564437	1					
ANR	1564465	AdditiveExpression	strlen ( suffix ) + 1		1564437	1		+			
ANR	1564466	CallExpression	strlen ( suffix )		1564437	0					
ANR	1564467	Callee	strlen		1564437	0					
ANR	1564468	Identifier	strlen		1564437	0					
ANR	1564469	ArgumentList	suffix		1564437	1					
ANR	1564470	Argument	suffix		1564437	0					
ANR	1564471	Identifier	suffix		1564437	0					
ANR	1564472	PrimaryExpression	1		1564437	1					
ANR	1564473	ExpressionStatement	"strcpy ( buf , operand -> fmt )"	3093:2:99530:99556	1564437	3	True				
ANR	1564474	CallExpression	"strcpy ( buf , operand -> fmt )"		1564437	0					
ANR	1564475	Callee	strcpy		1564437	0					
ANR	1564476	Identifier	strcpy		1564437	0					
ANR	1564477	ArgumentList	buf		1564437	1					
ANR	1564478	Argument	buf		1564437	0					
ANR	1564479	Identifier	buf		1564437	0					
ANR	1564480	Argument	operand -> fmt		1564437	1					
ANR	1564481	PtrMemberAccess	operand -> fmt		1564437	0					
ANR	1564482	Identifier	operand		1564437	0					
ANR	1564483	Identifier	fmt		1564437	1					
ANR	1564484	ExpressionStatement	"strcat ( buf , suffix )"	3094:2:99560:99580	1564437	4	True				
ANR	1564485	CallExpression	"strcat ( buf , suffix )"		1564437	0					
ANR	1564486	Callee	strcat		1564437	0					
ANR	1564487	Identifier	strcat		1564437	0					
ANR	1564488	ArgumentList	buf		1564437	1					
ANR	1564489	Argument	buf		1564437	0					
ANR	1564490	Identifier	buf		1564437	0					
ANR	1564491	Argument	suffix		1564437	1					
ANR	1564492	Identifier	suffix		1564437	0					
ANR	1564493	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		1564437	5					
ANR	1564494	ForInit	i = 0 ;	3096:7:99590:99595	1564437	0	True				
ANR	1564495	AssignmentExpression	i = 0		1564437	0		=			
ANR	1564496	Identifier	i		1564437	0					
ANR	1564497	PrimaryExpression	0		1564437	1					
ANR	1564498	Condition	i < hexagon_operand_count	3096:14:99597:99621	1564437	1	True				
ANR	1564499	RelationalExpression	i < hexagon_operand_count		1564437	0		<			
ANR	1564500	Identifier	i		1564437	0					
ANR	1564501	Identifier	hexagon_operand_count		1564437	1					
ANR	1564502	PostIncDecOperationExpression	i ++	3096:41:99624:99626	1564437	2	True				
ANR	1564503	Identifier	i		1564437	0					
ANR	1564504	IncDec	++		1564437	1					
ANR	1564505	IfStatement	"if ( ! strcmp ( hexagon_operands [ i ] . fmt , buf ) )"		1564437	3					
ANR	1564506	Condition	"! strcmp ( hexagon_operands [ i ] . fmt , buf )"	3097:8:99637:99675	1564437	0	True				
ANR	1564507	UnaryOperationExpression	"! strcmp ( hexagon_operands [ i ] . fmt , buf )"		1564437	0					
ANR	1564508	UnaryOperator	!		1564437	0					
ANR	1564509	CallExpression	"strcmp ( hexagon_operands [ i ] . fmt , buf )"		1564437	1					
ANR	1564510	Callee	strcmp		1564437	0					
ANR	1564511	Identifier	strcmp		1564437	0					
ANR	1564512	ArgumentList	hexagon_operands [ i ] . fmt		1564437	1					
ANR	1564513	Argument	hexagon_operands [ i ] . fmt		1564437	0					
ANR	1564514	MemberAccess	hexagon_operands [ i ] . fmt		1564437	0					
ANR	1564515	ArrayIndexing	hexagon_operands [ i ]		1564437	0					
ANR	1564516	Identifier	hexagon_operands		1564437	0					
ANR	1564517	Identifier	i		1564437	1					
ANR	1564518	Identifier	fmt		1564437	1					
ANR	1564519	Argument	buf		1564437	1					
ANR	1564520	Identifier	buf		1564437	0					
ANR	1564521	ReturnStatement	return ( hexagon_operands + i ) ;	3098:6:99684:99713	1564437	1	True				
ANR	1564522	AdditiveExpression	hexagon_operands + i		1564437	0		+			
ANR	1564523	Identifier	hexagon_operands		1564437	0					
ANR	1564524	Identifier	i		1564437	1					
ANR	1564525	ReturnStatement	return NULL ;	3100:2:99718:99729	1564437	6	True				
ANR	1564526	Identifier	NULL		1564437	0					
ANR	1564527	ReturnType	const hexagon_operand *		1564437	1					
ANR	1564528	Identifier	hexagon_operand_find		1564437	2					
ANR	1564529	ParameterList	"const hexagon_operand * operand , const char * suffix"		1564437	3					
ANR	1564530	Parameter	const hexagon_operand * operand	3087:1:99386:99415	1564437	0	True				
ANR	1564531	ParameterType	const hexagon_operand *		1564437	0					
ANR	1564532	Identifier	operand		1564437	1					
ANR	1564533	Parameter	const char * suffix	3087:33:99418:99435	1564437	1	True				
ANR	1564534	ParameterType	const char *		1564437	0					
ANR	1564535	Identifier	suffix		1564437	1					
ANR	1564536	CFGEntryNode	ENTRY		1564437		True				
ANR	1564537	CFGExitNode	EXIT		1564437		True				
ANR	1564538	Symbol	strcmp		1564437						
ANR	1564539	Symbol	NULL		1564437						
ANR	1564540	Symbol	* operand		1564437						
ANR	1564541	Symbol	* hexagon_operands		1564437						
ANR	1564542	Symbol	alloca		1564437						
ANR	1564543	Symbol	hexagon_operands		1564437						
ANR	1564544	Symbol	i		1564437						
ANR	1564545	Symbol	suffix		1564437						
ANR	1564546	Symbol	strlen		1564437						
ANR	1564547	Symbol	buf		1564437						
ANR	1564548	Symbol	operand -> fmt		1564437						
ANR	1564549	Symbol	hexagon_operand_count		1564437						
ANR	1564550	Symbol	* i		1564437						
ANR	1564551	Symbol	hexagon_operands [ i ] . fmt		1564437						
ANR	1564552	Symbol	operand		1564437						
ANR	1564553	Function	hexagon_operand_find_xx16	3103:0:99734:100099							
ANR	1564554	FunctionDef	"hexagon_operand_find_xx16 (const hexagon_operand * operand , char * suffix)"		1564553	0					
ANR	1564555	CompoundStatement		3106:0:99838:100099	1564553	0					
ANR	1564556	IdentifierDeclStatement	char buf [ 100 ] ;	3107:2:99842:99855	1564553	0	True				
ANR	1564557	IdentifierDecl	buf [ 100 ]		1564553	0					
ANR	1564558	IdentifierDeclType	char [ 100 ]		1564553	0					
ANR	1564559	Identifier	buf		1564553	1					
ANR	1564560	PrimaryExpression	100		1564553	2					
ANR	1564561	IdentifierDeclStatement	size_t i ;	3108:2:99859:99867	1564553	1	True				
ANR	1564562	IdentifierDecl	i		1564553	0					
ANR	1564563	IdentifierDeclType	size_t		1564553	0					
ANR	1564564	Identifier	i		1564553	1					
ANR	1564565	ExpressionStatement	"sprintf ( buf , ""%s%s"" , operand -> fmt , suffix )"	3110:2:99872:99914	1564553	2	True				
ANR	1564566	CallExpression	"sprintf ( buf , ""%s%s"" , operand -> fmt , suffix )"		1564553	0					
ANR	1564567	Callee	sprintf		1564553	0					
ANR	1564568	Identifier	sprintf		1564553	0					
ANR	1564569	ArgumentList	buf		1564553	1					
ANR	1564570	Argument	buf		1564553	0					
ANR	1564571	Identifier	buf		1564553	0					
ANR	1564572	Argument	"""%s%s"""		1564553	1					
ANR	1564573	PrimaryExpression	"""%s%s"""		1564553	0					
ANR	1564574	Argument	operand -> fmt		1564553	2					
ANR	1564575	PtrMemberAccess	operand -> fmt		1564553	0					
ANR	1564576	Identifier	operand		1564553	0					
ANR	1564577	Identifier	fmt		1564553	1					
ANR	1564578	Argument	suffix		1564553	3					
ANR	1564579	Identifier	suffix		1564553	0					
ANR	1564580	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		1564553	3					
ANR	1564581	ForInit	i = 0 ;	3111:7:99923:99928	1564553	0	True				
ANR	1564582	AssignmentExpression	i = 0		1564553	0		=			
ANR	1564583	Identifier	i		1564553	0					
ANR	1564584	PrimaryExpression	0		1564553	1					
ANR	1564585	Condition	i < hexagon_operand_count	3111:14:99930:99954	1564553	1	True				
ANR	1564586	RelationalExpression	i < hexagon_operand_count		1564553	0		<			
ANR	1564587	Identifier	i		1564553	0					
ANR	1564588	Identifier	hexagon_operand_count		1564553	1					
ANR	1564589	PostIncDecOperationExpression	i ++	3111:41:99957:99959	1564553	2	True				
ANR	1564590	Identifier	i		1564553	0					
ANR	1564591	IncDec	++		1564553	1					
ANR	1564592	CompoundStatement		7:4:129:179	1564553	3					
ANR	1564593	IdentifierDeclStatement	const hexagon_operand * oper = & hexagon_operands [ i ] ;	3112:4:99968:100018	1564553	0	True				
ANR	1564594	IdentifierDecl	* oper = & hexagon_operands [ i ]		1564553	0					
ANR	1564595	IdentifierDeclType	const hexagon_operand *		1564553	0					
ANR	1564596	Identifier	oper		1564553	1					
ANR	1564597	AssignmentExpression	* oper = & hexagon_operands [ i ]		1564553	2		=			
ANR	1564598	Identifier	oper		1564553	0					
ANR	1564599	UnaryOperationExpression	& hexagon_operands [ i ]		1564553	1					
ANR	1564600	UnaryOperator	&		1564553	0					
ANR	1564601	ArrayIndexing	hexagon_operands [ i ]		1564553	1					
ANR	1564602	Identifier	hexagon_operands		1564553	0					
ANR	1564603	Identifier	i		1564553	1					
ANR	1564604	IfStatement	"if ( ! strcmp ( oper -> fmt , buf ) )"		1564553	1					
ANR	1564605	Condition	"! strcmp ( oper -> fmt , buf )"	3113:8:100028:100050	1564553	0	True				
ANR	1564606	UnaryOperationExpression	"! strcmp ( oper -> fmt , buf )"		1564553	0					
ANR	1564607	UnaryOperator	!		1564553	0					
ANR	1564608	CallExpression	"strcmp ( oper -> fmt , buf )"		1564553	1					
ANR	1564609	Callee	strcmp		1564553	0					
ANR	1564610	Identifier	strcmp		1564553	0					
ANR	1564611	ArgumentList	oper -> fmt		1564553	1					
ANR	1564612	Argument	oper -> fmt		1564553	0					
ANR	1564613	PtrMemberAccess	oper -> fmt		1564553	0					
ANR	1564614	Identifier	oper		1564553	0					
ANR	1564615	Identifier	fmt		1564553	1					
ANR	1564616	Argument	buf		1564553	1					
ANR	1564617	Identifier	buf		1564553	0					
ANR	1564618	CompoundStatement		8:33:214:214	1564553	1					
ANR	1564619	ReturnStatement	return oper ;	3114:6:100061:100072	1564553	0	True				
ANR	1564620	Identifier	oper		1564553	0					
ANR	1564621	ReturnStatement	return NULL ;	3117:2:100086:100097	1564553	4	True				
ANR	1564622	Identifier	NULL		1564553	0					
ANR	1564623	ReturnType	static const hexagon_operand *		1564553	1					
ANR	1564624	Identifier	hexagon_operand_find_xx16		1564553	2					
ANR	1564625	ParameterList	"const hexagon_operand * operand , char * suffix"		1564553	3					
ANR	1564626	Parameter	const hexagon_operand * operand	3105:1:99792:99821	1564553	0	True				
ANR	1564627	ParameterType	const hexagon_operand *		1564553	0					
ANR	1564628	Identifier	operand		1564553	1					
ANR	1564629	Parameter	char * suffix	3105:33:99824:99835	1564553	1	True				
ANR	1564630	ParameterType	char *		1564553	0					
ANR	1564631	Identifier	suffix		1564553	1					
ANR	1564632	CFGEntryNode	ENTRY		1564553		True				
ANR	1564633	CFGExitNode	EXIT		1564553		True				
ANR	1564634	Symbol	strcmp		1564553						
ANR	1564635	Symbol	NULL		1564553						
ANR	1564636	Symbol	* operand		1564553						
ANR	1564637	Symbol	hexagon_operands		1564553						
ANR	1564638	Symbol	* oper		1564553						
ANR	1564639	Symbol	i		1564553						
ANR	1564640	Symbol	suffix		1564553						
ANR	1564641	Symbol	oper -> fmt		1564553						
ANR	1564642	Symbol	buf		1564553						
ANR	1564643	Symbol	operand -> fmt		1564553						
ANR	1564644	Symbol	hexagon_operand_count		1564553						
ANR	1564645	Symbol	oper		1564553						
ANR	1564646	Symbol	operand		1564553						
ANR	1564647	Function	hexagon_operand_find_lo16	3126:0:100263:100403							
ANR	1564648	FunctionDef	hexagon_operand_find_lo16 (const hexagon_operand * operand)		1564647	0					
ANR	1564649	CompoundStatement		3129:0:100346:100403	1564647	0					
ANR	1564650	ReturnStatement	"return hexagon_operand_find_xx16 ( operand , ""_lo16"" ) ;"	3130:2:100350:100401	1564647	0	True				
ANR	1564651	CallExpression	"hexagon_operand_find_xx16 ( operand , ""_lo16"" )"		1564647	0					
ANR	1564652	Callee	hexagon_operand_find_xx16		1564647	0					
ANR	1564653	Identifier	hexagon_operand_find_xx16		1564647	0					
ANR	1564654	ArgumentList	operand		1564647	1					
ANR	1564655	Argument	operand		1564647	0					
ANR	1564656	Identifier	operand		1564647	0					
ANR	1564657	Argument	"""_lo16"""		1564647	1					
ANR	1564658	PrimaryExpression	"""_lo16"""		1564647	0					
ANR	1564659	ReturnType	const hexagon_operand *		1564647	1					
ANR	1564660	Identifier	hexagon_operand_find_lo16		1564647	2					
ANR	1564661	ParameterList	const hexagon_operand * operand		1564647	3					
ANR	1564662	Parameter	const hexagon_operand * operand	3128:1:100314:100343	1564647	0	True				
ANR	1564663	ParameterType	const hexagon_operand *		1564647	0					
ANR	1564664	Identifier	operand		1564647	1					
ANR	1564665	CFGEntryNode	ENTRY		1564647		True				
ANR	1564666	CFGExitNode	EXIT		1564647		True				
ANR	1564667	Symbol	hexagon_operand_find_xx16		1564647						
ANR	1564668	Symbol	operand		1564647						
ANR	1564669	Function	hexagon_operand_find_hi16	3139:0:100568:100708							
ANR	1564670	FunctionDef	hexagon_operand_find_hi16 (const hexagon_operand * operand)		1564669	0					
ANR	1564671	CompoundStatement		3142:0:100651:100708	1564669	0					
ANR	1564672	ReturnStatement	"return hexagon_operand_find_xx16 ( operand , ""_hi16"" ) ;"	3143:2:100655:100706	1564669	0	True				
ANR	1564673	CallExpression	"hexagon_operand_find_xx16 ( operand , ""_hi16"" )"		1564669	0					
ANR	1564674	Callee	hexagon_operand_find_xx16		1564669	0					
ANR	1564675	Identifier	hexagon_operand_find_xx16		1564669	0					
ANR	1564676	ArgumentList	operand		1564669	1					
ANR	1564677	Argument	operand		1564669	0					
ANR	1564678	Identifier	operand		1564669	0					
ANR	1564679	Argument	"""_hi16"""		1564669	1					
ANR	1564680	PrimaryExpression	"""_hi16"""		1564669	0					
ANR	1564681	ReturnType	const hexagon_operand *		1564669	1					
ANR	1564682	Identifier	hexagon_operand_find_hi16		1564669	2					
ANR	1564683	ParameterList	const hexagon_operand * operand		1564669	3					
ANR	1564684	Parameter	const hexagon_operand * operand	3141:1:100619:100648	1564669	0	True				
ANR	1564685	ParameterType	const hexagon_operand *		1564669	0					
ANR	1564686	Identifier	operand		1564669	1					
ANR	1564687	CFGEntryNode	ENTRY		1564669		True				
ANR	1564688	CFGExitNode	EXIT		1564669		True				
ANR	1564689	Symbol	hexagon_operand_find_xx16		1564669						
ANR	1564690	Symbol	operand		1564669						
ANR	1564691	Function	hexagon_extract_modifier_operand	3148:0:100782:101584							
ANR	1564692	FunctionDef	"hexagon_extract_modifier_operand (const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg)"		1564691	0					
ANR	1564693	CompoundStatement		3156:0:100937:101584	1564691	0					
ANR	1564694	IdentifierDeclStatement	size_t i ;	3157:2:100941:100949	1564691	0	True				
ANR	1564695	IdentifierDecl	i		1564691	0					
ANR	1564696	IdentifierDeclType	size_t		1564691	0					
ANR	1564697	Identifier	i		1564691	1					
ANR	1564698	IdentifierDeclStatement	char reg_name [ 100 ] ;	3158:2:100953:100971	1564691	1	True				
ANR	1564699	IdentifierDecl	reg_name [ 100 ]		1564691	0					
ANR	1564700	IdentifierDeclType	char [ 100 ]		1564691	0					
ANR	1564701	Identifier	reg_name		1564691	1					
ANR	1564702	PrimaryExpression	100		1564691	2					
ANR	1564703	Statement	static	3159:2:100975:100980	1564691	2	True				
ANR	1564704	IdentifierDeclStatement	char xx [ 100 ] ;	3159:9:100982:100994	1564691	3	True				
ANR	1564705	IdentifierDecl	xx [ 100 ]		1564691	0					
ANR	1564706	IdentifierDeclType	char [ 100 ]		1564691	0					
ANR	1564707	Identifier	xx		1564691	1					
ANR	1564708	PrimaryExpression	100		1564691	2					
ANR	1564709	IfStatement	"if ( ! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg ) )"		1564691	4					
ANR	1564710	Condition	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"	3162:5:101062:101125	1564691	0	True				
ANR	1564711	UnaryOperationExpression	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		1564691	0					
ANR	1564712	UnaryOperator	!		1564691	0					
ANR	1564713	CallExpression	"hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		1564691	1					
ANR	1564714	Callee	hexagon_dis_operand		1564691	0					
ANR	1564715	Identifier	hexagon_dis_operand		1564691	0					
ANR	1564716	ArgumentList	operand		1564691	1					
ANR	1564717	Argument	operand		1564691	0					
ANR	1564718	Identifier	operand		1564691	0					
ANR	1564719	Argument	insn		1564691	1					
ANR	1564720	Identifier	insn		1564691	0					
ANR	1564721	Argument	0		1564691	2					
ANR	1564722	PrimaryExpression	0		1564691	0					
ANR	1564723	Argument	0		1564691	3					
ANR	1564724	PrimaryExpression	0		1564691	0					
ANR	1564725	Argument	enc		1564691	4					
ANR	1564726	Identifier	enc		1564691	0					
ANR	1564727	Argument	reg_name		1564691	5					
ANR	1564728	Identifier	reg_name		1564691	0					
ANR	1564729	Argument	errmsg		1564691	6					
ANR	1564730	Identifier	errmsg		1564691	0					
ANR	1564731	ReturnStatement	return 0 ;	3163:4:101132:101140	1564691	1	True				
ANR	1564732	PrimaryExpression	0		1564691	0					
ANR	1564733	ForStatement	for ( i = 0 ; i < hexagon_control_regs_count ; i ++ )		1564691	5					
ANR	1564734	ForInit	i = 0 ;	3167:6:101250:101253	1564691	0	True				
ANR	1564735	AssignmentExpression	i = 0		1564691	0		=			
ANR	1564736	Identifier	i		1564691	0					
ANR	1564737	PrimaryExpression	0		1564691	1					
ANR	1564738	Condition	i < hexagon_control_regs_count	3167:10:101254:101281	1564691	1	True				
ANR	1564739	RelationalExpression	i < hexagon_control_regs_count		1564691	0		<			
ANR	1564740	Identifier	i		1564691	0					
ANR	1564741	Identifier	hexagon_control_regs_count		1564691	1					
ANR	1564742	PostIncDecOperationExpression	i ++	3167:39:101283:101285	1564691	2	True				
ANR	1564743	Identifier	i		1564691	0					
ANR	1564744	IncDec	++		1564691	1					
ANR	1564745	CompoundStatement		14:4:408:433	1564691	3					
ANR	1564746	IdentifierDeclStatement	const char * name = hexagon_control_regs [ i ] . name ;	3168:4:101293:101340	1564691	0	True				
ANR	1564747	IdentifierDecl	* name = hexagon_control_regs [ i ] . name		1564691	0					
ANR	1564748	IdentifierDeclType	const char *		1564691	0					
ANR	1564749	Identifier	name		1564691	1					
ANR	1564750	AssignmentExpression	* name = hexagon_control_regs [ i ] . name		1564691	2		=			
ANR	1564751	Identifier	name		1564691	0					
ANR	1564752	MemberAccess	hexagon_control_regs [ i ] . name		1564691	1					
ANR	1564753	ArrayIndexing	hexagon_control_regs [ i ]		1564691	0					
ANR	1564754	Identifier	hexagon_control_regs		1564691	0					
ANR	1564755	Identifier	i		1564691	1					
ANR	1564756	Identifier	name		1564691	1					
ANR	1564757	IdentifierDeclStatement	size_t len = strlen ( name ) ;	3169:4:101346:101371	1564691	1	True				
ANR	1564758	IdentifierDecl	len = strlen ( name )		1564691	0					
ANR	1564759	IdentifierDeclType	size_t		1564691	0					
ANR	1564760	Identifier	len		1564691	1					
ANR	1564761	AssignmentExpression	len = strlen ( name )		1564691	2		=			
ANR	1564762	Identifier	len		1564691	0					
ANR	1564763	CallExpression	strlen ( name )		1564691	1					
ANR	1564764	Callee	strlen		1564691	0					
ANR	1564765	Identifier	strlen		1564691	0					
ANR	1564766	ArgumentList	name		1564691	1					
ANR	1564767	Argument	name		1564691	0					
ANR	1564768	Identifier	name		1564691	0					
ANR	1564769	IfStatement	"if ( ! r_str_ncasecmp ( reg_name , name , len ) )"		1564691	2					
ANR	1564770	Condition	"! r_str_ncasecmp ( reg_name , name , len )"	3170:7:101380:101413	1564691	0	True				
ANR	1564771	UnaryOperationExpression	"! r_str_ncasecmp ( reg_name , name , len )"		1564691	0					
ANR	1564772	UnaryOperator	!		1564691	0					
ANR	1564773	CallExpression	"r_str_ncasecmp ( reg_name , name , len )"		1564691	1					
ANR	1564774	Callee	r_str_ncasecmp		1564691	0					
ANR	1564775	Identifier	r_str_ncasecmp		1564691	0					
ANR	1564776	ArgumentList	reg_name		1564691	1					
ANR	1564777	Argument	reg_name		1564691	0					
ANR	1564778	Identifier	reg_name		1564691	0					
ANR	1564779	Argument	name		1564691	1					
ANR	1564780	Identifier	name		1564691	0					
ANR	1564781	Argument	len		1564691	2					
ANR	1564782	Identifier	len		1564691	0					
ANR	1564783	CompoundStatement		15:42:477:477	1564691	1					
ANR	1564784	ExpressionStatement	* return_value = hexagon_control_regs [ i ] . reg_num	3171:6:101423:101470	1564691	0	True				
ANR	1564785	AssignmentExpression	* return_value = hexagon_control_regs [ i ] . reg_num		1564691	0		=			
ANR	1564786	UnaryOperationExpression	* return_value		1564691	0					
ANR	1564787	UnaryOperator	*		1564691	0					
ANR	1564788	Identifier	return_value		1564691	1					
ANR	1564789	MemberAccess	hexagon_control_regs [ i ] . reg_num		1564691	1					
ANR	1564790	ArrayIndexing	hexagon_control_regs [ i ]		1564691	0					
ANR	1564791	Identifier	hexagon_control_regs		1564691	0					
ANR	1564792	Identifier	i		1564691	1					
ANR	1564793	Identifier	reg_num		1564691	1					
ANR	1564794	ReturnStatement	return 1 ;	3172:6:101478:101486	1564691	1	True				
ANR	1564795	PrimaryExpression	1		1564691	0					
ANR	1564796	ExpressionStatement	"sprintf ( xx , ""Illegal modifier operand: %s"" , reg_name )"	3176:2:101501:101554	1564691	6	True				
ANR	1564797	CallExpression	"sprintf ( xx , ""Illegal modifier operand: %s"" , reg_name )"		1564691	0					
ANR	1564798	Callee	sprintf		1564691	0					
ANR	1564799	Identifier	sprintf		1564691	0					
ANR	1564800	ArgumentList	xx		1564691	1					
ANR	1564801	Argument	xx		1564691	0					
ANR	1564802	Identifier	xx		1564691	0					
ANR	1564803	Argument	"""Illegal modifier operand: %s"""		1564691	1					
ANR	1564804	PrimaryExpression	"""Illegal modifier operand: %s"""		1564691	0					
ANR	1564805	Argument	reg_name		1564691	2					
ANR	1564806	Identifier	reg_name		1564691	0					
ANR	1564807	ExpressionStatement	* errmsg = xx	3177:2:101558:101570	1564691	7	True				
ANR	1564808	AssignmentExpression	* errmsg = xx		1564691	0		=			
ANR	1564809	UnaryOperationExpression	* errmsg		1564691	0					
ANR	1564810	UnaryOperator	*		1564691	0					
ANR	1564811	Identifier	errmsg		1564691	1					
ANR	1564812	Identifier	xx		1564691	1					
ANR	1564813	ReturnStatement	return 0 ;	3178:2:101574:101582	1564691	8	True				
ANR	1564814	PrimaryExpression	0		1564691	0					
ANR	1564815	ReturnType	int		1564691	1					
ANR	1564816	Identifier	hexagon_extract_modifier_operand		1564691	2					
ANR	1564817	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg"		1564691	3					
ANR	1564818	Parameter	const hexagon_operand * operand	3150:4:100824:100853	1564691	0	True				
ANR	1564819	ParameterType	const hexagon_operand *		1564691	0					
ANR	1564820	Identifier	operand		1564691	1					
ANR	1564821	Parameter	hexagon_insn insn	3151:4:100860:100876	1564691	1	True				
ANR	1564822	ParameterType	hexagon_insn		1564691	0					
ANR	1564823	Identifier	insn		1564691	1					
ANR	1564824	Parameter	char * enc	3152:4:100883:100891	1564691	2	True				
ANR	1564825	ParameterType	char *		1564691	0					
ANR	1564826	Identifier	enc		1564691	1					
ANR	1564827	Parameter	int * return_value	3153:4:100898:100914	1564691	3	True				
ANR	1564828	ParameterType	int *		1564691	0					
ANR	1564829	Identifier	return_value		1564691	1					
ANR	1564830	Parameter	char * * errmsg	3154:4:100921:100933	1564691	4	True				
ANR	1564831	ParameterType	char * *		1564691	0					
ANR	1564832	Identifier	errmsg		1564691	1					
ANR	1564833	CFGEntryNode	ENTRY		1564691		True				
ANR	1564834	CFGExitNode	EXIT		1564691		True				
ANR	1564835	Symbol	xx		1564691						
ANR	1564836	Symbol	return_value		1564691						
ANR	1564837	Symbol	hexagon_control_regs [ i ] . name		1564691						
ANR	1564838	Symbol	errmsg		1564691						
ANR	1564839	Symbol	i		1564691						
ANR	1564840	Symbol	hexagon_dis_operand		1564691						
ANR	1564841	Symbol	hexagon_control_regs [ i ] . reg_num		1564691						
ANR	1564842	Symbol	insn		1564691						
ANR	1564843	Symbol	* hexagon_control_regs		1564691						
ANR	1564844	Symbol	strlen		1564691						
ANR	1564845	Symbol	* i		1564691						
ANR	1564846	Symbol	len		1564691						
ANR	1564847	Symbol	name		1564691						
ANR	1564848	Symbol	hexagon_control_regs		1564691						
ANR	1564849	Symbol	reg_name		1564691						
ANR	1564850	Symbol	enc		1564691						
ANR	1564851	Symbol	r_str_ncasecmp		1564691						
ANR	1564852	Symbol	* return_value		1564691						
ANR	1564853	Symbol	* errmsg		1564691						
ANR	1564854	Symbol	operand		1564691						
ANR	1564855	Symbol	hexagon_control_regs_count		1564691						
ANR	1564856	Function	hexagon_extract_predicate_operand	3183:0:101696:102197							
ANR	1564857	FunctionDef	"hexagon_extract_predicate_operand (const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg)"		1564856	0					
ANR	1564858	CompoundStatement		3187:0:101832:102197	1564856	0					
ANR	1564859	IdentifierDeclStatement	char reg_name [ 100 ] ;	3188:2:101836:101855	1564856	0	True				
ANR	1564860	IdentifierDecl	reg_name [ 100 ]		1564856	0					
ANR	1564861	IdentifierDeclType	char [ 100 ]		1564856	0					
ANR	1564862	Identifier	reg_name		1564856	1					
ANR	1564863	PrimaryExpression	100		1564856	2					
ANR	1564864	IdentifierDeclStatement	int reg_num ;	3189:2:101859:101870	1564856	1	True				
ANR	1564865	IdentifierDecl	reg_num		1564856	0					
ANR	1564866	IdentifierDeclType	int		1564856	0					
ANR	1564867	Identifier	reg_num		1564856	1					
ANR	1564868	IfStatement	"if ( ! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg ) )"		1564856	2					
ANR	1564869	Condition	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"	3192:6:101937:102001	1564856	0	True				
ANR	1564870	UnaryOperationExpression	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		1564856	0					
ANR	1564871	UnaryOperator	!		1564856	0					
ANR	1564872	CallExpression	"hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		1564856	1					
ANR	1564873	Callee	hexagon_dis_operand		1564856	0					
ANR	1564874	Identifier	hexagon_dis_operand		1564856	0					
ANR	1564875	ArgumentList	operand		1564856	1					
ANR	1564876	Argument	operand		1564856	0					
ANR	1564877	Identifier	operand		1564856	0					
ANR	1564878	Argument	insn		1564856	1					
ANR	1564879	Identifier	insn		1564856	0					
ANR	1564880	Argument	0		1564856	2					
ANR	1564881	PrimaryExpression	0		1564856	0					
ANR	1564882	Argument	0		1564856	3					
ANR	1564883	PrimaryExpression	0		1564856	0					
ANR	1564884	Argument	enc		1564856	4					
ANR	1564885	Identifier	enc		1564856	0					
ANR	1564886	Argument	reg_name		1564856	5					
ANR	1564887	Identifier	reg_name		1564856	0					
ANR	1564888	Argument	errmsg		1564856	6					
ANR	1564889	Identifier	errmsg		1564856	0					
ANR	1564890	ReturnStatement	return FALSE ;	3193:4:102008:102020	1564856	1	True				
ANR	1564891	Identifier	FALSE		1564856	0					
ANR	1564892	IfStatement	"if ( ! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg ) )"		1564856	3					
ANR	1564893	Condition	"! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"	3196:6:102068:102133	1564856	0	True				
ANR	1564894	UnaryOperationExpression	"! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"		1564856	0					
ANR	1564895	UnaryOperator	!		1564856	0					
ANR	1564896	CallExpression	"hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"		1564856	1					
ANR	1564897	Callee	hexagon_extract_operand		1564856	0					
ANR	1564898	Identifier	hexagon_extract_operand		1564856	0					
ANR	1564899	ArgumentList	operand		1564856	1					
ANR	1564900	Argument	operand		1564856	0					
ANR	1564901	Identifier	operand		1564856	0					
ANR	1564902	Argument	insn		1564856	1					
ANR	1564903	Identifier	insn		1564856	0					
ANR	1564904	Argument	0		1564856	2					
ANR	1564905	PrimaryExpression	0		1564856	0					
ANR	1564906	Argument	enc		1564856	3					
ANR	1564907	Identifier	enc		1564856	0					
ANR	1564908	Argument	& reg_num		1564856	4					
ANR	1564909	UnaryOperationExpression	& reg_num		1564856	0					
ANR	1564910	UnaryOperator	&		1564856	0					
ANR	1564911	Identifier	reg_num		1564856	1					
ANR	1564912	Argument	errmsg		1564856	5					
ANR	1564913	Identifier	errmsg		1564856	0					
ANR	1564914	ReturnStatement	return FALSE ;	3197:4:102140:102152	1564856	1	True				
ANR	1564915	Identifier	FALSE		1564856	0					
ANR	1564916	ExpressionStatement	* return_value = reg_num	3199:2:102157:102180	1564856	4	True				
ANR	1564917	AssignmentExpression	* return_value = reg_num		1564856	0		=			
ANR	1564918	UnaryOperationExpression	* return_value		1564856	0					
ANR	1564919	UnaryOperator	*		1564856	0					
ANR	1564920	Identifier	return_value		1564856	1					
ANR	1564921	Identifier	reg_num		1564856	1					
ANR	1564922	ReturnStatement	return TRUE ;	3200:2:102184:102195	1564856	5	True				
ANR	1564923	Identifier	TRUE		1564856	0					
ANR	1564924	ReturnType	int		1564856	1					
ANR	1564925	Identifier	hexagon_extract_predicate_operand		1564856	2					
ANR	1564926	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg"		1564856	3					
ANR	1564927	Parameter	const hexagon_operand * operand	3185:1:101735:101764	1564856	0	True				
ANR	1564928	ParameterType	const hexagon_operand *		1564856	0					
ANR	1564929	Identifier	operand		1564856	1					
ANR	1564930	Parameter	hexagon_insn insn	3185:33:101767:101783	1564856	1	True				
ANR	1564931	ParameterType	hexagon_insn		1564856	0					
ANR	1564932	Identifier	insn		1564856	1					
ANR	1564933	Parameter	char * enc	3186:1:101787:101795	1564856	2	True				
ANR	1564934	ParameterType	char *		1564856	0					
ANR	1564935	Identifier	enc		1564856	1					
ANR	1564936	Parameter	int * return_value	3186:12:101798:101814	1564856	3	True				
ANR	1564937	ParameterType	int *		1564856	0					
ANR	1564938	Identifier	return_value		1564856	1					
ANR	1564939	Parameter	char * * errmsg	3186:31:101817:101829	1564856	4	True				
ANR	1564940	ParameterType	char * *		1564856	0					
ANR	1564941	Identifier	errmsg		1564856	1					
ANR	1564942	CFGEntryNode	ENTRY		1564856		True				
ANR	1564943	CFGExitNode	EXIT		1564856		True				
ANR	1564944	Symbol	return_value		1564856						
ANR	1564945	Symbol	reg_num		1564856						
ANR	1564946	Symbol	& reg_num		1564856						
ANR	1564947	Symbol	errmsg		1564856						
ANR	1564948	Symbol	hexagon_dis_operand		1564856						
ANR	1564949	Symbol	TRUE		1564856						
ANR	1564950	Symbol	insn		1564856						
ANR	1564951	Symbol	hexagon_extract_operand		1564856						
ANR	1564952	Symbol	reg_name		1564856						
ANR	1564953	Symbol	FALSE		1564856						
ANR	1564954	Symbol	enc		1564856						
ANR	1564955	Symbol	* return_value		1564856						
ANR	1564956	Symbol	operand		1564856						
ANR	1564957	Function	hexagon_opcode_next_asm	3209:0:102328:102453							
ANR	1564958	FunctionDef	hexagon_opcode_next_asm (const hexagon_opcode * op)		1564957	0					
ANR	1564959	CompoundStatement		3212:0:102402:102453	1564957	0					
ANR	1564960	IfStatement	if ( op )		1564957	0					
ANR	1564961	Condition	op	3213:6:102410:102411	1564957	0	True				
ANR	1564962	Identifier	op		1564957	0					
ANR	1564963	ExpressionStatement	op = op -> next_asm	3214:4:102418:102435	1564957	1	True				
ANR	1564964	AssignmentExpression	op = op -> next_asm		1564957	0		=			
ANR	1564965	Identifier	op		1564957	0					
ANR	1564966	PtrMemberAccess	op -> next_asm		1564957	1					
ANR	1564967	Identifier	op		1564957	0					
ANR	1564968	Identifier	next_asm		1564957	1					
ANR	1564969	ReturnStatement	return ( op ) ;	3216:2:102440:102451	1564957	1	True				
ANR	1564970	Identifier	op		1564957	0					
ANR	1564971	ReturnType	const hexagon_opcode *		1564957	1					
ANR	1564972	Identifier	hexagon_opcode_next_asm		1564957	2					
ANR	1564973	ParameterList	const hexagon_opcode * op		1564957	3					
ANR	1564974	Parameter	const hexagon_opcode * op	3211:1:102376:102399	1564957	0	True				
ANR	1564975	ParameterType	const hexagon_opcode *		1564957	0					
ANR	1564976	Identifier	op		1564957	1					
ANR	1564977	CFGEntryNode	ENTRY		1564957		True				
ANR	1564978	CFGExitNode	EXIT		1564957		True				
ANR	1564979	Symbol	op		1564957						
ANR	1564980	Symbol	* op		1564957						
ANR	1564981	Symbol	op -> next_asm		1564957						
