command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5195963	File	data/converged/CVE-2019-16718~_radare2/libr_util_rbtree.c								
ANR	5195964	Function	red	7:0:114:171							
ANR	5195965	FunctionDef	red (RBNode * x)		5195964	0					
ANR	5195966	CompoundStatement		7:34:148:171	5195964	0					
ANR	5195967	ReturnStatement	return x && x -> red ;	8:1:151:169	5195964	0	True				
ANR	5195968	AndExpression	x && x -> red		5195964	0		&&			
ANR	5195969	Identifier	x		5195964	0					
ANR	5195970	PtrMemberAccess	x -> red		5195964	1					
ANR	5195971	Identifier	x		5195964	0					
ANR	5195972	Identifier	red		5195964	1					
ANR	5195973	ReturnType	static inline bool		5195964	1					
ANR	5195974	Identifier	red		5195964	2					
ANR	5195975	ParameterList	RBNode * x		5195964	3					
ANR	5195976	Parameter	RBNode * x	7:23:137:145	5195964	0	True				
ANR	5195977	ParameterType	RBNode *		5195964	0					
ANR	5195978	Identifier	x		5195964	1					
ANR	5195979	CFGEntryNode	ENTRY		5195964		True				
ANR	5195980	CFGExitNode	EXIT		5195964		True				
ANR	5195981	Symbol	* x		5195964						
ANR	5195982	Symbol	x -> red		5195964						
ANR	5195983	Symbol	x		5195964						
ANR	5195984	Function	zag	11:0:174:389							
ANR	5195985	FunctionDef	"zag (RBNode * x , int dir , RBNodeSum sum)"		5195984	0					
ANR	5195986	CompoundStatement		11:61:235:389	5195984	0					
ANR	5195987	IdentifierDeclStatement	RBNode * y = x -> child [ dir ] ;	12:1:238:263	5195984	0	True				
ANR	5195988	IdentifierDecl	* y = x -> child [ dir ]		5195984	0					
ANR	5195989	IdentifierDeclType	RBNode *		5195984	0					
ANR	5195990	Identifier	y		5195984	1					
ANR	5195991	AssignmentExpression	* y = x -> child [ dir ]		5195984	2		=			
ANR	5195992	Identifier	y		5195984	0					
ANR	5195993	ArrayIndexing	x -> child [ dir ]		5195984	1					
ANR	5195994	PtrMemberAccess	x -> child		5195984	0					
ANR	5195995	Identifier	x		5195984	0					
ANR	5195996	Identifier	child		5195984	1					
ANR	5195997	Identifier	dir		5195984	1					
ANR	5195998	ExpressionStatement	x -> child [ dir ] = y -> child [ ! dir ]	13:1:266:296	5195984	1	True				
ANR	5195999	AssignmentExpression	x -> child [ dir ] = y -> child [ ! dir ]		5195984	0		=			
ANR	5196000	ArrayIndexing	x -> child [ dir ]		5195984	0					
ANR	5196001	PtrMemberAccess	x -> child		5195984	0					
ANR	5196002	Identifier	x		5195984	0					
ANR	5196003	Identifier	child		5195984	1					
ANR	5196004	Identifier	dir		5195984	1					
ANR	5196005	ArrayIndexing	y -> child [ ! dir ]		5195984	1					
ANR	5196006	PtrMemberAccess	y -> child		5195984	0					
ANR	5196007	Identifier	y		5195984	0					
ANR	5196008	Identifier	child		5195984	1					
ANR	5196009	UnaryOperationExpression	! dir		5195984	1					
ANR	5196010	UnaryOperator	!		5195984	0					
ANR	5196011	Identifier	dir		5195984	1					
ANR	5196012	ExpressionStatement	y -> child [ ! dir ] = x	14:1:299:317	5195984	2	True				
ANR	5196013	AssignmentExpression	y -> child [ ! dir ] = x		5195984	0		=			
ANR	5196014	ArrayIndexing	y -> child [ ! dir ]		5195984	0					
ANR	5196015	PtrMemberAccess	y -> child		5195984	0					
ANR	5196016	Identifier	y		5195984	0					
ANR	5196017	Identifier	child		5195984	1					
ANR	5196018	UnaryOperationExpression	! dir		5195984	1					
ANR	5196019	UnaryOperator	!		5195984	0					
ANR	5196020	Identifier	dir		5195984	1					
ANR	5196021	Identifier	x		5195984	1					
ANR	5196022	ExpressionStatement	x -> red = true	15:1:320:333	5195984	3	True				
ANR	5196023	AssignmentExpression	x -> red = true		5195984	0		=			
ANR	5196024	PtrMemberAccess	x -> red		5195984	0					
ANR	5196025	Identifier	x		5195984	0					
ANR	5196026	Identifier	red		5195984	1					
ANR	5196027	Identifier	true		5195984	1					
ANR	5196028	ExpressionStatement	y -> red = false	16:1:336:350	5195984	4	True				
ANR	5196029	AssignmentExpression	y -> red = false		5195984	0		=			
ANR	5196030	PtrMemberAccess	y -> red		5195984	0					
ANR	5196031	Identifier	y		5195984	0					
ANR	5196032	Identifier	red		5195984	1					
ANR	5196033	Identifier	false		5195984	1					
ANR	5196034	IfStatement	if ( sum )		5195984	5					
ANR	5196035	Condition	sum	17:5:357:359	5195984	0	True				
ANR	5196036	Identifier	sum		5195984	0					
ANR	5196037	CompoundStatement		7:10:126:126	5195984	1					
ANR	5196038	ExpressionStatement	sum ( x )	18:2:366:373	5195984	0	True				
ANR	5196039	CallExpression	sum ( x )		5195984	0					
ANR	5196040	Callee	sum		5195984	0					
ANR	5196041	Identifier	sum		5195984	0					
ANR	5196042	ArgumentList	x		5195984	1					
ANR	5196043	Argument	x		5195984	0					
ANR	5196044	Identifier	x		5195984	0					
ANR	5196045	ReturnStatement	return y ;	20:1:379:387	5195984	6	True				
ANR	5196046	Identifier	y		5195984	0					
ANR	5196047	ReturnType	static inline RBNode *		5195984	1					
ANR	5196048	Identifier	zag		5195984	2					
ANR	5196049	ParameterList	"RBNode * x , int dir , RBNodeSum sum"		5195984	3					
ANR	5196050	Parameter	RBNode * x	11:26:200:208	5195984	0	True				
ANR	5196051	ParameterType	RBNode *		5195984	0					
ANR	5196052	Identifier	x		5195984	1					
ANR	5196053	Parameter	int dir	11:37:211:217	5195984	1	True				
ANR	5196054	ParameterType	int		5195984	0					
ANR	5196055	Identifier	dir		5195984	1					
ANR	5196056	Parameter	RBNodeSum sum	11:46:220:232	5195984	2	True				
ANR	5196057	ParameterType	RBNodeSum		5195984	0					
ANR	5196058	Identifier	sum		5195984	1					
ANR	5196059	CFGEntryNode	ENTRY		5195984		True				
ANR	5196060	CFGExitNode	EXIT		5195984		True				
ANR	5196061	Symbol	* x		5195984						
ANR	5196062	Symbol	* y		5195984						
ANR	5196063	Symbol	x -> child		5195984						
ANR	5196064	Symbol	* x -> child		5195984						
ANR	5196065	Symbol	* dir		5195984						
ANR	5196066	Symbol	false		5195984						
ANR	5196067	Symbol	sum		5195984						
ANR	5196068	Symbol	dir		5195984						
ANR	5196069	Symbol	y -> child		5195984						
ANR	5196070	Symbol	y -> red		5195984						
ANR	5196071	Symbol	* * y		5195984						
ANR	5196072	Symbol	x -> red		5195984						
ANR	5196073	Symbol	* * x		5195984						
ANR	5196074	Symbol	x		5195984						
ANR	5196075	Symbol	true		5195984						
ANR	5196076	Symbol	y		5195984						
ANR	5196077	Symbol	* y -> child		5195984						
ANR	5196078	Function	zig_zag	23:0:392:705							
ANR	5196079	FunctionDef	"zig_zag (RBNode * x , int dir , RBNodeSum sum)"		5196078	0					
ANR	5196080	CompoundStatement		23:65:457:705	5196078	0					
ANR	5196081	IdentifierDeclStatement	"RBNode * y = x -> child [ dir ] , * z = y -> child [ ! dir ] ;"	24:1:460:506	5196078	0	True				
ANR	5196082	IdentifierDecl	* y = x -> child [ dir ]		5196078	0					
ANR	5196083	IdentifierDeclType	RBNode *		5196078	0					
ANR	5196084	Identifier	y		5196078	1					
ANR	5196085	AssignmentExpression	* y = x -> child [ dir ]		5196078	2		=			
ANR	5196086	Identifier	y		5196078	0					
ANR	5196087	ArrayIndexing	x -> child [ dir ]		5196078	1					
ANR	5196088	PtrMemberAccess	x -> child		5196078	0					
ANR	5196089	Identifier	x		5196078	0					
ANR	5196090	Identifier	child		5196078	1					
ANR	5196091	Identifier	dir		5196078	1					
ANR	5196092	IdentifierDecl	* z = y -> child [ ! dir ]		5196078	1					
ANR	5196093	IdentifierDeclType	RBNode *		5196078	0					
ANR	5196094	Identifier	z		5196078	1					
ANR	5196095	AssignmentExpression	* z = y -> child [ ! dir ]		5196078	2		=			
ANR	5196096	Identifier	z		5196078	0					
ANR	5196097	ArrayIndexing	y -> child [ ! dir ]		5196078	1					
ANR	5196098	PtrMemberAccess	y -> child		5196078	0					
ANR	5196099	Identifier	y		5196078	0					
ANR	5196100	Identifier	child		5196078	1					
ANR	5196101	UnaryOperationExpression	! dir		5196078	1					
ANR	5196102	UnaryOperator	!		5196078	0					
ANR	5196103	Identifier	dir		5196078	1					
ANR	5196104	ExpressionStatement	y -> child [ ! dir ] = z -> child [ dir ]	25:1:509:539	5196078	1	True				
ANR	5196105	AssignmentExpression	y -> child [ ! dir ] = z -> child [ dir ]		5196078	0		=			
ANR	5196106	ArrayIndexing	y -> child [ ! dir ]		5196078	0					
ANR	5196107	PtrMemberAccess	y -> child		5196078	0					
ANR	5196108	Identifier	y		5196078	0					
ANR	5196109	Identifier	child		5196078	1					
ANR	5196110	UnaryOperationExpression	! dir		5196078	1					
ANR	5196111	UnaryOperator	!		5196078	0					
ANR	5196112	Identifier	dir		5196078	1					
ANR	5196113	ArrayIndexing	z -> child [ dir ]		5196078	1					
ANR	5196114	PtrMemberAccess	z -> child		5196078	0					
ANR	5196115	Identifier	z		5196078	0					
ANR	5196116	Identifier	child		5196078	1					
ANR	5196117	Identifier	dir		5196078	1					
ANR	5196118	ExpressionStatement	z -> child [ dir ] = y	26:1:542:559	5196078	2	True				
ANR	5196119	AssignmentExpression	z -> child [ dir ] = y		5196078	0		=			
ANR	5196120	ArrayIndexing	z -> child [ dir ]		5196078	0					
ANR	5196121	PtrMemberAccess	z -> child		5196078	0					
ANR	5196122	Identifier	z		5196078	0					
ANR	5196123	Identifier	child		5196078	1					
ANR	5196124	Identifier	dir		5196078	1					
ANR	5196125	Identifier	y		5196078	1					
ANR	5196126	ExpressionStatement	x -> child [ dir ] = z -> child [ ! dir ]	27:1:562:592	5196078	3	True				
ANR	5196127	AssignmentExpression	x -> child [ dir ] = z -> child [ ! dir ]		5196078	0		=			
ANR	5196128	ArrayIndexing	x -> child [ dir ]		5196078	0					
ANR	5196129	PtrMemberAccess	x -> child		5196078	0					
ANR	5196130	Identifier	x		5196078	0					
ANR	5196131	Identifier	child		5196078	1					
ANR	5196132	Identifier	dir		5196078	1					
ANR	5196133	ArrayIndexing	z -> child [ ! dir ]		5196078	1					
ANR	5196134	PtrMemberAccess	z -> child		5196078	0					
ANR	5196135	Identifier	z		5196078	0					
ANR	5196136	Identifier	child		5196078	1					
ANR	5196137	UnaryOperationExpression	! dir		5196078	1					
ANR	5196138	UnaryOperator	!		5196078	0					
ANR	5196139	Identifier	dir		5196078	1					
ANR	5196140	ExpressionStatement	z -> child [ ! dir ] = x	28:1:595:613	5196078	4	True				
ANR	5196141	AssignmentExpression	z -> child [ ! dir ] = x		5196078	0		=			
ANR	5196142	ArrayIndexing	z -> child [ ! dir ]		5196078	0					
ANR	5196143	PtrMemberAccess	z -> child		5196078	0					
ANR	5196144	Identifier	z		5196078	0					
ANR	5196145	Identifier	child		5196078	1					
ANR	5196146	UnaryOperationExpression	! dir		5196078	1					
ANR	5196147	UnaryOperator	!		5196078	0					
ANR	5196148	Identifier	dir		5196078	1					
ANR	5196149	Identifier	x		5196078	1					
ANR	5196150	ExpressionStatement	x -> red = y -> red = true	29:1:616:638	5196078	5	True				
ANR	5196151	AssignmentExpression	x -> red = y -> red = true		5196078	0		=			
ANR	5196152	PtrMemberAccess	x -> red		5196078	0					
ANR	5196153	Identifier	x		5196078	0					
ANR	5196154	Identifier	red		5196078	1					
ANR	5196155	AssignmentExpression	y -> red = true		5196078	1		=			
ANR	5196156	PtrMemberAccess	y -> red		5196078	0					
ANR	5196157	Identifier	y		5196078	0					
ANR	5196158	Identifier	red		5196078	1					
ANR	5196159	Identifier	true		5196078	1					
ANR	5196160	ExpressionStatement	z -> red = false	30:1:641:655	5196078	6	True				
ANR	5196161	AssignmentExpression	z -> red = false		5196078	0		=			
ANR	5196162	PtrMemberAccess	z -> red		5196078	0					
ANR	5196163	Identifier	z		5196078	0					
ANR	5196164	Identifier	red		5196078	1					
ANR	5196165	Identifier	false		5196078	1					
ANR	5196166	IfStatement	if ( sum )		5196078	7					
ANR	5196167	Condition	sum	31:5:662:664	5196078	0	True				
ANR	5196168	Identifier	sum		5196078	0					
ANR	5196169	CompoundStatement		9:10:209:209	5196078	1					
ANR	5196170	ExpressionStatement	sum ( x )	32:2:671:678	5196078	0	True				
ANR	5196171	CallExpression	sum ( x )		5196078	0					
ANR	5196172	Callee	sum		5196078	0					
ANR	5196173	Identifier	sum		5196078	0					
ANR	5196174	ArgumentList	x		5196078	1					
ANR	5196175	Argument	x		5196078	0					
ANR	5196176	Identifier	x		5196078	0					
ANR	5196177	ExpressionStatement	sum ( y )	33:2:682:689	5196078	1	True				
ANR	5196178	CallExpression	sum ( y )		5196078	0					
ANR	5196179	Callee	sum		5196078	0					
ANR	5196180	Identifier	sum		5196078	0					
ANR	5196181	ArgumentList	y		5196078	1					
ANR	5196182	Argument	y		5196078	0					
ANR	5196183	Identifier	y		5196078	0					
ANR	5196184	ReturnStatement	return z ;	35:1:695:703	5196078	8	True				
ANR	5196185	Identifier	z		5196078	0					
ANR	5196186	ReturnType	static inline RBNode *		5196078	1					
ANR	5196187	Identifier	zig_zag		5196078	2					
ANR	5196188	ParameterList	"RBNode * x , int dir , RBNodeSum sum"		5196078	3					
ANR	5196189	Parameter	RBNode * x	23:30:422:430	5196078	0	True				
ANR	5196190	ParameterType	RBNode *		5196078	0					
ANR	5196191	Identifier	x		5196078	1					
ANR	5196192	Parameter	int dir	23:41:433:439	5196078	1	True				
ANR	5196193	ParameterType	int		5196078	0					
ANR	5196194	Identifier	dir		5196078	1					
ANR	5196195	Parameter	RBNodeSum sum	23:50:442:454	5196078	2	True				
ANR	5196196	ParameterType	RBNodeSum		5196078	0					
ANR	5196197	Identifier	sum		5196078	1					
ANR	5196198	CFGEntryNode	ENTRY		5196078		True				
ANR	5196199	CFGExitNode	EXIT		5196078		True				
ANR	5196200	Symbol	* x		5196078						
ANR	5196201	Symbol	* y		5196078						
ANR	5196202	Symbol	x -> child		5196078						
ANR	5196203	Symbol	* z		5196078						
ANR	5196204	Symbol	* x -> child		5196078						
ANR	5196205	Symbol	* dir		5196078						
ANR	5196206	Symbol	false		5196078						
ANR	5196207	Symbol	sum		5196078						
ANR	5196208	Symbol	dir		5196078						
ANR	5196209	Symbol	y -> child		5196078						
ANR	5196210	Symbol	y -> red		5196078						
ANR	5196211	Symbol	* * z		5196078						
ANR	5196212	Symbol	* * y		5196078						
ANR	5196213	Symbol	x -> red		5196078						
ANR	5196214	Symbol	z -> red		5196078						
ANR	5196215	Symbol	* * x		5196078						
ANR	5196216	Symbol	* z -> child		5196078						
ANR	5196217	Symbol	z -> child		5196078						
ANR	5196218	Symbol	x		5196078						
ANR	5196219	Symbol	true		5196078						
ANR	5196220	Symbol	y		5196078						
ANR	5196221	Symbol	z		5196078						
ANR	5196222	Symbol	* y -> child		5196078						
ANR	5196223	Function	bound_iter	38:0:708:1078							
ANR	5196224	FunctionDef	"bound_iter (RBNode * x , void * data , RBComparator cmp , bool upper , bool backward)"		5196223	0					
ANR	5196225	CompoundStatement		38:100:808:1078	5196223	0					
ANR	5196226	IdentifierDeclStatement	RBIter it ;	39:1:811:820	5196223	0	True				
ANR	5196227	IdentifierDecl	it		5196223	0					
ANR	5196228	IdentifierDeclType	RBIter		5196223	0					
ANR	5196229	Identifier	it		5196223	1					
ANR	5196230	ExpressionStatement	it . len = 0	40:1:823:833	5196223	1	True				
ANR	5196231	AssignmentExpression	it . len = 0		5196223	0		=			
ANR	5196232	MemberAccess	it . len		5196223	0					
ANR	5196233	Identifier	it		5196223	0					
ANR	5196234	Identifier	len		5196223	1					
ANR	5196235	PrimaryExpression	0		5196223	1					
ANR	5196236	WhileStatement	while ( x )		5196223	2					
ANR	5196237	Condition	x	41:8:843:843	5196223	0	True				
ANR	5196238	Identifier	x		5196223	0					
ANR	5196239	CompoundStatement		5:2:41:62	5196223	1					
ANR	5196240	IdentifierDeclStatement	"int d = cmp ( data , x ) ;"	42:2:850:871	5196223	0	True				
ANR	5196241	IdentifierDecl	"d = cmp ( data , x )"		5196223	0					
ANR	5196242	IdentifierDeclType	int		5196223	0					
ANR	5196243	Identifier	d		5196223	1					
ANR	5196244	AssignmentExpression	"d = cmp ( data , x )"		5196223	2		=			
ANR	5196245	Identifier	d		5196223	0					
ANR	5196246	CallExpression	"cmp ( data , x )"		5196223	1					
ANR	5196247	Callee	cmp		5196223	0					
ANR	5196248	Identifier	cmp		5196223	0					
ANR	5196249	ArgumentList	data		5196223	1					
ANR	5196250	Argument	data		5196223	0					
ANR	5196251	Identifier	data		5196223	0					
ANR	5196252	Argument	x		5196223	1					
ANR	5196253	Identifier	x		5196223	0					
ANR	5196254	IfStatement	if ( upper ? d < 0 : d <= 0 )		5196223	1					
ANR	5196255	Condition	upper ? d < 0 : d <= 0	43:6:879:900	5196223	0	True				
ANR	5196256	ConditionalExpression	upper ? d < 0 : d <= 0		5196223	0					
ANR	5196257	Condition	upper		5196223	0					
ANR	5196258	Identifier	upper		5196223	0					
ANR	5196259	RelationalExpression	d < 0		5196223	1		<			
ANR	5196260	Identifier	d		5196223	0					
ANR	5196261	PrimaryExpression	0		5196223	1					
ANR	5196262	RelationalExpression	d <= 0		5196223	2		<=			
ANR	5196263	Identifier	d		5196223	0					
ANR	5196264	PrimaryExpression	0		5196223	1					
ANR	5196265	CompoundStatement		6:30:94:94	5196223	1					
ANR	5196266	IfStatement	if ( ! backward )		5196223	0					
ANR	5196267	Condition	! backward	44:7:912:920	5196223	0	True				
ANR	5196268	UnaryOperationExpression	! backward		5196223	0					
ANR	5196269	UnaryOperator	!		5196223	0					
ANR	5196270	Identifier	backward		5196223	1					
ANR	5196271	CompoundStatement		7:18:114:114	5196223	1					
ANR	5196272	ExpressionStatement	it . path [ it . len ++ ] = x	45:4:929:950	5196223	0	True				
ANR	5196273	AssignmentExpression	it . path [ it . len ++ ] = x		5196223	0		=			
ANR	5196274	ArrayIndexing	it . path [ it . len ++ ]		5196223	0					
ANR	5196275	MemberAccess	it . path		5196223	0					
ANR	5196276	Identifier	it		5196223	0					
ANR	5196277	Identifier	path		5196223	1					
ANR	5196278	PostIncDecOperationExpression	it . len ++		5196223	1					
ANR	5196279	MemberAccess	it . len		5196223	0					
ANR	5196280	Identifier	it		5196223	0					
ANR	5196281	Identifier	len		5196223	1					
ANR	5196282	IncDec	++		5196223	1					
ANR	5196283	Identifier	x		5196223	1					
ANR	5196284	ExpressionStatement	x = x -> child [ 0 ]	47:3:960:975	5196223	1	True				
ANR	5196285	AssignmentExpression	x = x -> child [ 0 ]		5196223	0		=			
ANR	5196286	Identifier	x		5196223	0					
ANR	5196287	ArrayIndexing	x -> child [ 0 ]		5196223	1					
ANR	5196288	PtrMemberAccess	x -> child		5196223	0					
ANR	5196289	Identifier	x		5196223	0					
ANR	5196290	Identifier	child		5196223	1					
ANR	5196291	PrimaryExpression	0		5196223	1					
ANR	5196292	ElseStatement	else		5196223	0					
ANR	5196293	CompoundStatement		11:9:177:177	5196223	0					
ANR	5196294	IfStatement	if ( backward )		5196223	0					
ANR	5196295	Condition	backward	49:7:995:1002	5196223	0	True				
ANR	5196296	Identifier	backward		5196223	0					
ANR	5196297	CompoundStatement		12:17:196:196	5196223	1					
ANR	5196298	ExpressionStatement	it . path [ it . len ++ ] = x	50:4:1011:1032	5196223	0	True				
ANR	5196299	AssignmentExpression	it . path [ it . len ++ ] = x		5196223	0		=			
ANR	5196300	ArrayIndexing	it . path [ it . len ++ ]		5196223	0					
ANR	5196301	MemberAccess	it . path		5196223	0					
ANR	5196302	Identifier	it		5196223	0					
ANR	5196303	Identifier	path		5196223	1					
ANR	5196304	PostIncDecOperationExpression	it . len ++		5196223	1					
ANR	5196305	MemberAccess	it . len		5196223	0					
ANR	5196306	Identifier	it		5196223	0					
ANR	5196307	Identifier	len		5196223	1					
ANR	5196308	IncDec	++		5196223	1					
ANR	5196309	Identifier	x		5196223	1					
ANR	5196310	ExpressionStatement	x = x -> child [ 1 ]	52:3:1042:1057	5196223	1	True				
ANR	5196311	AssignmentExpression	x = x -> child [ 1 ]		5196223	0		=			
ANR	5196312	Identifier	x		5196223	0					
ANR	5196313	ArrayIndexing	x -> child [ 1 ]		5196223	1					
ANR	5196314	PtrMemberAccess	x -> child		5196223	0					
ANR	5196315	Identifier	x		5196223	0					
ANR	5196316	Identifier	child		5196223	1					
ANR	5196317	PrimaryExpression	1		5196223	1					
ANR	5196318	ReturnStatement	return it ;	55:1:1067:1076	5196223	3	True				
ANR	5196319	Identifier	it		5196223	0					
ANR	5196320	ReturnType	static inline RBIter		5196223	1					
ANR	5196321	Identifier	bound_iter		5196223	2					
ANR	5196322	ParameterList	"RBNode * x , void * data , RBComparator cmp , bool upper , bool backward"		5196223	3					
ANR	5196323	Parameter	RBNode * x	38:32:740:748	5196223	0	True				
ANR	5196324	ParameterType	RBNode *		5196223	0					
ANR	5196325	Identifier	x		5196223	1					
ANR	5196326	Parameter	void * data	38:43:751:760	5196223	1	True				
ANR	5196327	ParameterType	void *		5196223	0					
ANR	5196328	Identifier	data		5196223	1					
ANR	5196329	Parameter	RBComparator cmp	38:55:763:778	5196223	2	True				
ANR	5196330	ParameterType	RBComparator		5196223	0					
ANR	5196331	Identifier	cmp		5196223	1					
ANR	5196332	Parameter	bool upper	38:73:781:790	5196223	3	True				
ANR	5196333	ParameterType	bool		5196223	0					
ANR	5196334	Identifier	upper		5196223	1					
ANR	5196335	Parameter	bool backward	38:85:793:805	5196223	4	True				
ANR	5196336	ParameterType	bool		5196223	0					
ANR	5196337	Identifier	backward		5196223	1					
ANR	5196338	CFGEntryNode	ENTRY		5196223		True				
ANR	5196339	CFGExitNode	EXIT		5196223		True				
ANR	5196340	Symbol	* x		5196223						
ANR	5196341	Symbol	data		5196223						
ANR	5196342	Symbol	d		5196223						
ANR	5196343	Symbol	x -> child		5196223						
ANR	5196344	Symbol	cmp		5196223						
ANR	5196345	Symbol	upper		5196223						
ANR	5196346	Symbol	* x -> child		5196223						
ANR	5196347	Symbol	it		5196223						
ANR	5196348	Symbol	it . len		5196223						
ANR	5196349	Symbol	* it		5196223						
ANR	5196350	Symbol	* * x		5196223						
ANR	5196351	Symbol	x		5196223						
ANR	5196352	Symbol	backward		5196223						
ANR	5196353	Symbol	it . path		5196223						
ANR	5196354	Symbol	* it . path		5196223						
ANR	5196355	Function	r_rbtree_aug_delete	81:0:1679:3691							
ANR	5196356	FunctionDef	"r_rbtree_aug_delete (RBNode * * root , void * data , RBComparator cmp , RBNodeFree freefn , RBNodeSum sum)"		5196355	0					
ANR	5196357	CompoundStatement		81:110:1789:3691	5196355	0					
ANR	5196358	IdentifierDeclStatement	"RBNode head , * del = NULL , * * del_link = NULL , * g = NULL , * p = NULL , * q = & head , * path [ R_RBTREE_MAX_HEIGHT ] ;"	82:1:1792:1897	5196355	0	True				
ANR	5196359	IdentifierDecl	head		5196355	0					
ANR	5196360	IdentifierDeclType	RBNode		5196355	0					
ANR	5196361	Identifier	head		5196355	1					
ANR	5196362	IdentifierDecl	* del = NULL		5196355	1					
ANR	5196363	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196364	Identifier	del		5196355	1					
ANR	5196365	AssignmentExpression	* del = NULL		5196355	2		=			
ANR	5196366	Identifier	NULL		5196355	0					
ANR	5196367	Identifier	NULL		5196355	1					
ANR	5196368	IdentifierDecl	* * del_link = NULL		5196355	2					
ANR	5196369	IdentifierDeclType	RBNode * *		5196355	0					
ANR	5196370	Identifier	del_link		5196355	1					
ANR	5196371	AssignmentExpression	* * del_link = NULL		5196355	2		=			
ANR	5196372	Identifier	NULL		5196355	0					
ANR	5196373	Identifier	NULL		5196355	1					
ANR	5196374	IdentifierDecl	* g = NULL		5196355	3					
ANR	5196375	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196376	Identifier	g		5196355	1					
ANR	5196377	AssignmentExpression	* g = NULL		5196355	2		=			
ANR	5196378	Identifier	NULL		5196355	0					
ANR	5196379	Identifier	NULL		5196355	1					
ANR	5196380	IdentifierDecl	* p = NULL		5196355	4					
ANR	5196381	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196382	Identifier	p		5196355	1					
ANR	5196383	AssignmentExpression	* p = NULL		5196355	2		=			
ANR	5196384	Identifier	NULL		5196355	0					
ANR	5196385	Identifier	NULL		5196355	1					
ANR	5196386	IdentifierDecl	* q = & head		5196355	5					
ANR	5196387	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196388	Identifier	q		5196355	1					
ANR	5196389	AssignmentExpression	* q = & head		5196355	2		=			
ANR	5196390	Identifier	q		5196355	0					
ANR	5196391	UnaryOperationExpression	& head		5196355	1					
ANR	5196392	UnaryOperator	&		5196355	0					
ANR	5196393	Identifier	head		5196355	1					
ANR	5196394	IdentifierDecl	* path [ R_RBTREE_MAX_HEIGHT ]		5196355	6					
ANR	5196395	IdentifierDeclType	RBNode * [ R_RBTREE_MAX_HEIGHT ]		5196355	0					
ANR	5196396	Identifier	path		5196355	1					
ANR	5196397	Identifier	R_RBTREE_MAX_HEIGHT		5196355	2					
ANR	5196398	IdentifierDeclStatement	"int d = 1 , d2 , dep = 0 ;"	83:1:1900:1922	5196355	1	True				
ANR	5196399	IdentifierDecl	d = 1		5196355	0					
ANR	5196400	IdentifierDeclType	int		5196355	0					
ANR	5196401	Identifier	d		5196355	1					
ANR	5196402	AssignmentExpression	d = 1		5196355	2		=			
ANR	5196403	Identifier	d		5196355	0					
ANR	5196404	PrimaryExpression	1		5196355	1					
ANR	5196405	IdentifierDecl	d2		5196355	1					
ANR	5196406	IdentifierDeclType	int		5196355	0					
ANR	5196407	Identifier	d2		5196355	1					
ANR	5196408	IdentifierDecl	dep = 0		5196355	2					
ANR	5196409	IdentifierDeclType	int		5196355	0					
ANR	5196410	Identifier	dep		5196355	1					
ANR	5196411	AssignmentExpression	dep = 0		5196355	2		=			
ANR	5196412	Identifier	dep		5196355	0					
ANR	5196413	PrimaryExpression	0		5196355	1					
ANR	5196414	ExpressionStatement	head . child [ 0 ] = NULL	84:1:1925:1945	5196355	2	True				
ANR	5196415	AssignmentExpression	head . child [ 0 ] = NULL		5196355	0		=			
ANR	5196416	ArrayIndexing	head . child [ 0 ]		5196355	0					
ANR	5196417	MemberAccess	head . child		5196355	0					
ANR	5196418	Identifier	head		5196355	0					
ANR	5196419	Identifier	child		5196355	1					
ANR	5196420	PrimaryExpression	0		5196355	1					
ANR	5196421	Identifier	NULL		5196355	1					
ANR	5196422	ExpressionStatement	head . child [ 1 ] = * root	85:1:1948:1969	5196355	3	True				
ANR	5196423	AssignmentExpression	head . child [ 1 ] = * root		5196355	0		=			
ANR	5196424	ArrayIndexing	head . child [ 1 ]		5196355	0					
ANR	5196425	MemberAccess	head . child		5196355	0					
ANR	5196426	Identifier	head		5196355	0					
ANR	5196427	Identifier	child		5196355	1					
ANR	5196428	PrimaryExpression	1		5196355	1					
ANR	5196429	UnaryOperationExpression	* root		5196355	1					
ANR	5196430	UnaryOperator	*		5196355	0					
ANR	5196431	Identifier	root		5196355	1					
ANR	5196432	WhileStatement	while ( q -> child [ d ] )		5196355	4					
ANR	5196433	Condition	q -> child [ d ]	86:8:1979:1989	5196355	0	True				
ANR	5196434	ArrayIndexing	q -> child [ d ]		5196355	0					
ANR	5196435	PtrMemberAccess	q -> child		5196355	0					
ANR	5196436	Identifier	q		5196355	0					
ANR	5196437	Identifier	child		5196355	1					
ANR	5196438	Identifier	d		5196355	1					
ANR	5196439	CompoundStatement		6:21:202:202	5196355	1					
ANR	5196440	ExpressionStatement	d2 = d	87:2:1996:2002	5196355	0	True				
ANR	5196441	AssignmentExpression	d2 = d		5196355	0		=			
ANR	5196442	Identifier	d2		5196355	0					
ANR	5196443	Identifier	d		5196355	1					
ANR	5196444	ExpressionStatement	g = p	88:2:2006:2011	5196355	1	True				
ANR	5196445	AssignmentExpression	g = p		5196355	0		=			
ANR	5196446	Identifier	g		5196355	0					
ANR	5196447	Identifier	p		5196355	1					
ANR	5196448	ExpressionStatement	p = q	89:2:2015:2020	5196355	2	True				
ANR	5196449	AssignmentExpression	p = q		5196355	0		=			
ANR	5196450	Identifier	p		5196355	0					
ANR	5196451	Identifier	q		5196355	1					
ANR	5196452	IfStatement	if ( del_link )		5196355	3					
ANR	5196453	Condition	del_link	90:6:2028:2035	5196355	0	True				
ANR	5196454	Identifier	del_link		5196355	0					
ANR	5196455	CompoundStatement		10:16:248:248	5196355	1					
ANR	5196456	ExpressionStatement	d = 1	91:3:2043:2048	5196355	0	True				
ANR	5196457	AssignmentExpression	d = 1		5196355	0		=			
ANR	5196458	Identifier	d		5196355	0					
ANR	5196459	PrimaryExpression	1		5196355	1					
ANR	5196460	ElseStatement	else		5196355	0					
ANR	5196461	CompoundStatement		12:9:269:269	5196355	0					
ANR	5196462	ExpressionStatement	"d = cmp ( data , q -> child [ d2 ] )"	93:3:2064:2092	5196355	0	True				
ANR	5196463	AssignmentExpression	"d = cmp ( data , q -> child [ d2 ] )"		5196355	0		=			
ANR	5196464	Identifier	d		5196355	0					
ANR	5196465	CallExpression	"cmp ( data , q -> child [ d2 ] )"		5196355	1					
ANR	5196466	Callee	cmp		5196355	0					
ANR	5196467	Identifier	cmp		5196355	0					
ANR	5196468	ArgumentList	data		5196355	1					
ANR	5196469	Argument	data		5196355	0					
ANR	5196470	Identifier	data		5196355	0					
ANR	5196471	Argument	q -> child [ d2 ]		5196355	1					
ANR	5196472	ArrayIndexing	q -> child [ d2 ]		5196355	0					
ANR	5196473	PtrMemberAccess	q -> child		5196355	0					
ANR	5196474	Identifier	q		5196355	0					
ANR	5196475	Identifier	child		5196355	1					
ANR	5196476	Identifier	d2		5196355	1					
ANR	5196477	IfStatement	if ( d < 0 )		5196355	1					
ANR	5196478	Condition	d < 0	94:7:2101:2105	5196355	0	True				
ANR	5196479	RelationalExpression	d < 0		5196355	0		<			
ANR	5196480	Identifier	d		5196355	0					
ANR	5196481	PrimaryExpression	0		5196355	1					
ANR	5196482	CompoundStatement		14:14:318:318	5196355	1					
ANR	5196483	ExpressionStatement	d = 0	95:4:2114:2119	5196355	0	True				
ANR	5196484	AssignmentExpression	d = 0		5196355	0		=			
ANR	5196485	Identifier	d		5196355	0					
ANR	5196486	PrimaryExpression	0		5196355	1					
ANR	5196487	ElseStatement	else		5196355	0					
ANR	5196488	IfStatement	if ( d > 0 )		5196355	0					
ANR	5196489	Condition	d > 0	96:14:2135:2139	5196355	0	True				
ANR	5196490	RelationalExpression	d > 0		5196355	0		>			
ANR	5196491	Identifier	d		5196355	0					
ANR	5196492	PrimaryExpression	0		5196355	1					
ANR	5196493	CompoundStatement		16:21:352:352	5196355	1					
ANR	5196494	ExpressionStatement	d = 1	97:4:2148:2153	5196355	0	True				
ANR	5196495	AssignmentExpression	d = 1		5196355	0		=			
ANR	5196496	Identifier	d		5196355	0					
ANR	5196497	PrimaryExpression	1		5196355	1					
ANR	5196498	ElseStatement	else		5196355	0					
ANR	5196499	CompoundStatement		18:10:375:375	5196355	0					
ANR	5196500	ExpressionStatement	del_link = & q -> child [ d2 ]	99:4:2171:2195	5196355	0	True				
ANR	5196501	AssignmentExpression	del_link = & q -> child [ d2 ]		5196355	0		=			
ANR	5196502	Identifier	del_link		5196355	0					
ANR	5196503	UnaryOperationExpression	& q -> child [ d2 ]		5196355	1					
ANR	5196504	UnaryOperator	&		5196355	0					
ANR	5196505	ArrayIndexing	q -> child [ d2 ]		5196355	1					
ANR	5196506	PtrMemberAccess	q -> child		5196355	0					
ANR	5196507	Identifier	q		5196355	0					
ANR	5196508	Identifier	child		5196355	1					
ANR	5196509	Identifier	d2		5196355	1					
ANR	5196510	IfStatement	if ( q != & head )		5196355	4					
ANR	5196511	Condition	q != & head	102:6:2212:2221	5196355	0	True				
ANR	5196512	EqualityExpression	q != & head		5196355	0		!=			
ANR	5196513	Identifier	q		5196355	0					
ANR	5196514	UnaryOperationExpression	& head		5196355	1					
ANR	5196515	UnaryOperator	&		5196355	0					
ANR	5196516	Identifier	head		5196355	1					
ANR	5196517	CompoundStatement		22:18:434:434	5196355	1					
ANR	5196518	IfStatement	if ( dep >= R_RBTREE_MAX_HEIGHT )		5196355	0					
ANR	5196519	Condition	dep >= R_RBTREE_MAX_HEIGHT	103:7:2233:2258	5196355	0	True				
ANR	5196520	RelationalExpression	dep >= R_RBTREE_MAX_HEIGHT		5196355	0		>=			
ANR	5196521	Identifier	dep		5196355	0					
ANR	5196522	Identifier	R_RBTREE_MAX_HEIGHT		5196355	1					
ANR	5196523	CompoundStatement		23:35:471:471	5196355	1					
ANR	5196524	ExpressionStatement	"eprintf ( ""Too deep tree\\n"" )"	104:4:2267:2294	5196355	0	True				
ANR	5196525	CallExpression	"eprintf ( ""Too deep tree\\n"" )"		5196355	0					
ANR	5196526	Callee	eprintf		5196355	0					
ANR	5196527	Identifier	eprintf		5196355	0					
ANR	5196528	ArgumentList	"""Too deep tree\\n"""		5196355	1					
ANR	5196529	Argument	"""Too deep tree\\n"""		5196355	0					
ANR	5196530	PrimaryExpression	"""Too deep tree\\n"""		5196355	0					
ANR	5196531	BreakStatement	break ;	105:4:2300:2305	5196355	1	True				
ANR	5196532	ExpressionStatement	path [ dep ++ ] = q	107:3:2315:2330	5196355	1	True				
ANR	5196533	AssignmentExpression	path [ dep ++ ] = q		5196355	0		=			
ANR	5196534	ArrayIndexing	path [ dep ++ ]		5196355	0					
ANR	5196535	Identifier	path		5196355	0					
ANR	5196536	PostIncDecOperationExpression	dep ++		5196355	1					
ANR	5196537	Identifier	dep		5196355	0					
ANR	5196538	IncDec	++		5196355	1					
ANR	5196539	Identifier	q		5196355	1					
ANR	5196540	ExpressionStatement	q = q -> child [ d2 ]	109:2:2338:2354	5196355	5	True				
ANR	5196541	AssignmentExpression	q = q -> child [ d2 ]		5196355	0		=			
ANR	5196542	Identifier	q		5196355	0					
ANR	5196543	ArrayIndexing	q -> child [ d2 ]		5196355	1					
ANR	5196544	PtrMemberAccess	q -> child		5196355	0					
ANR	5196545	Identifier	q		5196355	0					
ANR	5196546	Identifier	child		5196355	1					
ANR	5196547	Identifier	d2		5196355	1					
ANR	5196548	IfStatement	if ( q -> red || red ( q -> child [ d ] ) )		5196355	6					
ANR	5196549	Condition	q -> red || red ( q -> child [ d ] )	110:6:2362:2388	5196355	0	True				
ANR	5196550	OrExpression	q -> red || red ( q -> child [ d ] )		5196355	0		||			
ANR	5196551	PtrMemberAccess	q -> red		5196355	0					
ANR	5196552	Identifier	q		5196355	0					
ANR	5196553	Identifier	red		5196355	1					
ANR	5196554	CallExpression	red ( q -> child [ d ] )		5196355	1					
ANR	5196555	Callee	red		5196355	0					
ANR	5196556	Identifier	red		5196355	0					
ANR	5196557	ArgumentList	q -> child [ d ]		5196355	1					
ANR	5196558	Argument	q -> child [ d ]		5196355	0					
ANR	5196559	ArrayIndexing	q -> child [ d ]		5196355	0					
ANR	5196560	PtrMemberAccess	q -> child		5196355	0					
ANR	5196561	Identifier	q		5196355	0					
ANR	5196562	Identifier	child		5196355	1					
ANR	5196563	Identifier	d		5196355	1					
ANR	5196564	CompoundStatement		30:35:601:601	5196355	1					
ANR	5196565	ContinueStatement	continue ;	111:3:2396:2404	5196355	0	True				
ANR	5196566	IfStatement	if ( red ( q -> child [ ! d ] ) )		5196355	7					
ANR	5196567	Condition	red ( q -> child [ ! d ] )	113:6:2416:2433	5196355	0	True				
ANR	5196568	CallExpression	red ( q -> child [ ! d ] )		5196355	0					
ANR	5196569	Callee	red		5196355	0					
ANR	5196570	Identifier	red		5196355	0					
ANR	5196571	ArgumentList	q -> child [ ! d ]		5196355	1					
ANR	5196572	Argument	q -> child [ ! d ]		5196355	0					
ANR	5196573	ArrayIndexing	q -> child [ ! d ]		5196355	0					
ANR	5196574	PtrMemberAccess	q -> child		5196355	0					
ANR	5196575	Identifier	q		5196355	0					
ANR	5196576	Identifier	child		5196355	1					
ANR	5196577	UnaryOperationExpression	! d		5196355	1					
ANR	5196578	UnaryOperator	!		5196355	0					
ANR	5196579	Identifier	d		5196355	1					
ANR	5196580	CompoundStatement		33:26:646:646	5196355	1					
ANR	5196581	IfStatement	if ( del_link && * del_link == q )		5196355	0					
ANR	5196582	Condition	del_link && * del_link == q	114:7:2445:2470	5196355	0	True				
ANR	5196583	AndExpression	del_link && * del_link == q		5196355	0		&&			
ANR	5196584	Identifier	del_link		5196355	0					
ANR	5196585	EqualityExpression	* del_link == q		5196355	1		==			
ANR	5196586	UnaryOperationExpression	* del_link		5196355	0					
ANR	5196587	UnaryOperator	*		5196355	0					
ANR	5196588	Identifier	del_link		5196355	1					
ANR	5196589	Identifier	q		5196355	1					
ANR	5196590	CompoundStatement		34:35:683:683	5196355	1					
ANR	5196591	ExpressionStatement	del_link = & q -> child [ ! d ] -> child [ d ]	115:4:2479:2513	5196355	0	True				
ANR	5196592	AssignmentExpression	del_link = & q -> child [ ! d ] -> child [ d ]		5196355	0		=			
ANR	5196593	Identifier	del_link		5196355	0					
ANR	5196594	UnaryOperationExpression	& q -> child [ ! d ] -> child [ d ]		5196355	1					
ANR	5196595	UnaryOperator	&		5196355	0					
ANR	5196596	ArrayIndexing	q -> child [ ! d ] -> child [ d ]		5196355	1					
ANR	5196597	PtrMemberAccess	q -> child [ ! d ] -> child		5196355	0					
ANR	5196598	ArrayIndexing	q -> child [ ! d ]		5196355	0					
ANR	5196599	PtrMemberAccess	q -> child		5196355	0					
ANR	5196600	Identifier	q		5196355	0					
ANR	5196601	Identifier	child		5196355	1					
ANR	5196602	UnaryOperationExpression	! d		5196355	1					
ANR	5196603	UnaryOperator	!		5196355	0					
ANR	5196604	Identifier	d		5196355	1					
ANR	5196605	Identifier	child		5196355	1					
ANR	5196606	Identifier	d		5196355	1					
ANR	5196607	ExpressionStatement	"p -> child [ d2 ] = zag ( q , ! d , sum )"	117:3:2523:2554	5196355	1	True				
ANR	5196608	AssignmentExpression	"p -> child [ d2 ] = zag ( q , ! d , sum )"		5196355	0		=			
ANR	5196609	ArrayIndexing	p -> child [ d2 ]		5196355	0					
ANR	5196610	PtrMemberAccess	p -> child		5196355	0					
ANR	5196611	Identifier	p		5196355	0					
ANR	5196612	Identifier	child		5196355	1					
ANR	5196613	Identifier	d2		5196355	1					
ANR	5196614	CallExpression	"zag ( q , ! d , sum )"		5196355	1					
ANR	5196615	Callee	zag		5196355	0					
ANR	5196616	Identifier	zag		5196355	0					
ANR	5196617	ArgumentList	q		5196355	1					
ANR	5196618	Argument	q		5196355	0					
ANR	5196619	Identifier	q		5196355	0					
ANR	5196620	Argument	! d		5196355	1					
ANR	5196621	UnaryOperationExpression	! d		5196355	0					
ANR	5196622	UnaryOperator	!		5196355	0					
ANR	5196623	Identifier	d		5196355	1					
ANR	5196624	Argument	sum		5196355	2					
ANR	5196625	Identifier	sum		5196355	0					
ANR	5196626	ExpressionStatement	p = p -> child [ d2 ]	118:3:2559:2575	5196355	2	True				
ANR	5196627	AssignmentExpression	p = p -> child [ d2 ]		5196355	0		=			
ANR	5196628	Identifier	p		5196355	0					
ANR	5196629	ArrayIndexing	p -> child [ d2 ]		5196355	1					
ANR	5196630	PtrMemberAccess	p -> child		5196355	0					
ANR	5196631	Identifier	p		5196355	0					
ANR	5196632	Identifier	child		5196355	1					
ANR	5196633	Identifier	d2		5196355	1					
ANR	5196634	IfStatement	if ( dep >= R_RBTREE_MAX_HEIGHT )		5196355	3					
ANR	5196635	Condition	dep >= R_RBTREE_MAX_HEIGHT	119:7:2584:2609	5196355	0	True				
ANR	5196636	RelationalExpression	dep >= R_RBTREE_MAX_HEIGHT		5196355	0		>=			
ANR	5196637	Identifier	dep		5196355	0					
ANR	5196638	Identifier	R_RBTREE_MAX_HEIGHT		5196355	1					
ANR	5196639	CompoundStatement		39:35:822:822	5196355	1					
ANR	5196640	ExpressionStatement	"eprintf ( ""Too deep tree\\n"" )"	120:4:2618:2645	5196355	0	True				
ANR	5196641	CallExpression	"eprintf ( ""Too deep tree\\n"" )"		5196355	0					
ANR	5196642	Callee	eprintf		5196355	0					
ANR	5196643	Identifier	eprintf		5196355	0					
ANR	5196644	ArgumentList	"""Too deep tree\\n"""		5196355	1					
ANR	5196645	Argument	"""Too deep tree\\n"""		5196355	0					
ANR	5196646	PrimaryExpression	"""Too deep tree\\n"""		5196355	0					
ANR	5196647	BreakStatement	break ;	121:4:2651:2656	5196355	1	True				
ANR	5196648	ExpressionStatement	path [ dep ++ ] = p	123:3:2666:2681	5196355	4	True				
ANR	5196649	AssignmentExpression	path [ dep ++ ] = p		5196355	0		=			
ANR	5196650	ArrayIndexing	path [ dep ++ ]		5196355	0					
ANR	5196651	Identifier	path		5196355	0					
ANR	5196652	PostIncDecOperationExpression	dep ++		5196355	1					
ANR	5196653	Identifier	dep		5196355	0					
ANR	5196654	IncDec	++		5196355	1					
ANR	5196655	Identifier	p		5196355	1					
ANR	5196656	ElseStatement	else		5196355	0					
ANR	5196657	CompoundStatement		45:3:907:932	5196355	0					
ANR	5196658	IdentifierDeclStatement	RBNode * s = p -> child [ ! d2 ] ;	125:3:2697:2722	5196355	0	True				
ANR	5196659	IdentifierDecl	* s = p -> child [ ! d2 ]		5196355	0					
ANR	5196660	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196661	Identifier	s		5196355	1					
ANR	5196662	AssignmentExpression	* s = p -> child [ ! d2 ]		5196355	2		=			
ANR	5196663	Identifier	s		5196355	0					
ANR	5196664	ArrayIndexing	p -> child [ ! d2 ]		5196355	1					
ANR	5196665	PtrMemberAccess	p -> child		5196355	0					
ANR	5196666	Identifier	p		5196355	0					
ANR	5196667	Identifier	child		5196355	1					
ANR	5196668	UnaryOperationExpression	! d2		5196355	1					
ANR	5196669	UnaryOperator	!		5196355	0					
ANR	5196670	Identifier	d2		5196355	1					
ANR	5196671	IfStatement	if ( ! s )		5196355	1					
ANR	5196672	Condition	! s	126:7:2731:2733	5196355	0	True				
ANR	5196673	UnaryOperationExpression	! s		5196355	0					
ANR	5196674	UnaryOperator	!		5196355	0					
ANR	5196675	Identifier	s		5196355	1					
ANR	5196676	CompoundStatement		46:12:946:946	5196355	1					
ANR	5196677	ContinueStatement	continue ;	127:4:2742:2750	5196355	0	True				
ANR	5196678	IfStatement	if ( ! red ( s -> child [ 0 ] ) && ! red ( s -> child [ 1 ] ) )		5196355	2					
ANR	5196679	Condition	! red ( s -> child [ 0 ] ) && ! red ( s -> child [ 1 ] )	129:7:2764:2805	5196355	0	True				
ANR	5196680	AndExpression	! red ( s -> child [ 0 ] ) && ! red ( s -> child [ 1 ] )		5196355	0		&&			
ANR	5196681	UnaryOperationExpression	! red ( s -> child [ 0 ] )		5196355	0					
ANR	5196682	UnaryOperator	!		5196355	0					
ANR	5196683	CallExpression	red ( s -> child [ 0 ] )		5196355	1					
ANR	5196684	Callee	red		5196355	0					
ANR	5196685	Identifier	red		5196355	0					
ANR	5196686	ArgumentList	s -> child [ 0 ]		5196355	1					
ANR	5196687	Argument	s -> child [ 0 ]		5196355	0					
ANR	5196688	ArrayIndexing	s -> child [ 0 ]		5196355	0					
ANR	5196689	PtrMemberAccess	s -> child		5196355	0					
ANR	5196690	Identifier	s		5196355	0					
ANR	5196691	Identifier	child		5196355	1					
ANR	5196692	PrimaryExpression	0		5196355	1					
ANR	5196693	UnaryOperationExpression	! red ( s -> child [ 1 ] )		5196355	1					
ANR	5196694	UnaryOperator	!		5196355	0					
ANR	5196695	CallExpression	red ( s -> child [ 1 ] )		5196355	1					
ANR	5196696	Callee	red		5196355	0					
ANR	5196697	Identifier	red		5196355	0					
ANR	5196698	ArgumentList	s -> child [ 1 ]		5196355	1					
ANR	5196699	Argument	s -> child [ 1 ]		5196355	0					
ANR	5196700	ArrayIndexing	s -> child [ 1 ]		5196355	0					
ANR	5196701	PtrMemberAccess	s -> child		5196355	0					
ANR	5196702	Identifier	s		5196355	0					
ANR	5196703	Identifier	child		5196355	1					
ANR	5196704	PrimaryExpression	1		5196355	1					
ANR	5196705	CompoundStatement		49:51:1018:1018	5196355	1					
ANR	5196706	ExpressionStatement	p -> red = false	130:4:2814:2828	5196355	0	True				
ANR	5196707	AssignmentExpression	p -> red = false		5196355	0		=			
ANR	5196708	PtrMemberAccess	p -> red		5196355	0					
ANR	5196709	Identifier	p		5196355	0					
ANR	5196710	Identifier	red		5196355	1					
ANR	5196711	Identifier	false		5196355	1					
ANR	5196712	ExpressionStatement	q -> red = s -> red = true	131:4:2834:2856	5196355	1	True				
ANR	5196713	AssignmentExpression	q -> red = s -> red = true		5196355	0		=			
ANR	5196714	PtrMemberAccess	q -> red		5196355	0					
ANR	5196715	Identifier	q		5196355	0					
ANR	5196716	Identifier	red		5196355	1					
ANR	5196717	AssignmentExpression	s -> red = true		5196355	1		=			
ANR	5196718	PtrMemberAccess	s -> red		5196355	0					
ANR	5196719	Identifier	s		5196355	0					
ANR	5196720	Identifier	red		5196355	1					
ANR	5196721	Identifier	true		5196355	1					
ANR	5196722	ElseStatement	else		5196355	0					
ANR	5196723	CompoundStatement		54:4:1115:1124	5196355	0					
ANR	5196724	IdentifierDeclStatement	int d3 = g -> child [ 0 ] != p ;	133:4:2874:2899	5196355	0	True				
ANR	5196725	IdentifierDecl	d3 = g -> child [ 0 ] != p		5196355	0					
ANR	5196726	IdentifierDeclType	int		5196355	0					
ANR	5196727	Identifier	d3		5196355	1					
ANR	5196728	AssignmentExpression	d3 = g -> child [ 0 ] != p		5196355	2		=			
ANR	5196729	Identifier	d3		5196355	0					
ANR	5196730	EqualityExpression	g -> child [ 0 ] != p		5196355	1		!=			
ANR	5196731	ArrayIndexing	g -> child [ 0 ]		5196355	0					
ANR	5196732	PtrMemberAccess	g -> child		5196355	0					
ANR	5196733	Identifier	g		5196355	0					
ANR	5196734	Identifier	child		5196355	1					
ANR	5196735	PrimaryExpression	0		5196355	1					
ANR	5196736	Identifier	p		5196355	1					
ANR	5196737	IdentifierDeclStatement	RBNode * t ;	134:4:2905:2914	5196355	1	True				
ANR	5196738	IdentifierDecl	* t		5196355	0					
ANR	5196739	IdentifierDeclType	RBNode *		5196355	0					
ANR	5196740	Identifier	t		5196355	1					
ANR	5196741	IfStatement	if ( red ( s -> child [ d2 ] ) )		5196355	2					
ANR	5196742	Condition	red ( s -> child [ d2 ] )	135:8:2924:2941	5196355	0	True				
ANR	5196743	CallExpression	red ( s -> child [ d2 ] )		5196355	0					
ANR	5196744	Callee	red		5196355	0					
ANR	5196745	Identifier	red		5196355	0					
ANR	5196746	ArgumentList	s -> child [ d2 ]		5196355	1					
ANR	5196747	Argument	s -> child [ d2 ]		5196355	0					
ANR	5196748	ArrayIndexing	s -> child [ d2 ]		5196355	0					
ANR	5196749	PtrMemberAccess	s -> child		5196355	0					
ANR	5196750	Identifier	s		5196355	0					
ANR	5196751	Identifier	child		5196355	1					
ANR	5196752	Identifier	d2		5196355	1					
ANR	5196753	CompoundStatement		55:28:1154:1154	5196355	1					
ANR	5196754	IfStatement	if ( del_link && * del_link == p )		5196355	0					
ANR	5196755	Condition	del_link && * del_link == p	136:9:2955:2980	5196355	0	True				
ANR	5196756	AndExpression	del_link && * del_link == p		5196355	0		&&			
ANR	5196757	Identifier	del_link		5196355	0					
ANR	5196758	EqualityExpression	* del_link == p		5196355	1		==			
ANR	5196759	UnaryOperationExpression	* del_link		5196355	0					
ANR	5196760	UnaryOperator	*		5196355	0					
ANR	5196761	Identifier	del_link		5196355	1					
ANR	5196762	Identifier	p		5196355	1					
ANR	5196763	CompoundStatement		56:37:1193:1193	5196355	1					
ANR	5196764	ExpressionStatement	del_link = & s -> child [ d2 ] -> child [ d2 ]	137:6:2991:3026	5196355	0	True				
ANR	5196765	AssignmentExpression	del_link = & s -> child [ d2 ] -> child [ d2 ]		5196355	0		=			
ANR	5196766	Identifier	del_link		5196355	0					
ANR	5196767	UnaryOperationExpression	& s -> child [ d2 ] -> child [ d2 ]		5196355	1					
ANR	5196768	UnaryOperator	&		5196355	0					
ANR	5196769	ArrayIndexing	s -> child [ d2 ] -> child [ d2 ]		5196355	1					
ANR	5196770	PtrMemberAccess	s -> child [ d2 ] -> child		5196355	0					
ANR	5196771	ArrayIndexing	s -> child [ d2 ]		5196355	0					
ANR	5196772	PtrMemberAccess	s -> child		5196355	0					
ANR	5196773	Identifier	s		5196355	0					
ANR	5196774	Identifier	child		5196355	1					
ANR	5196775	Identifier	d2		5196355	1					
ANR	5196776	Identifier	child		5196355	1					
ANR	5196777	Identifier	d2		5196355	1					
ANR	5196778	ExpressionStatement	"t = zig_zag ( p , ! d2 , sum )"	139:5:3040:3065	5196355	1	True				
ANR	5196779	AssignmentExpression	"t = zig_zag ( p , ! d2 , sum )"		5196355	0		=			
ANR	5196780	Identifier	t		5196355	0					
ANR	5196781	CallExpression	"zig_zag ( p , ! d2 , sum )"		5196355	1					
ANR	5196782	Callee	zig_zag		5196355	0					
ANR	5196783	Identifier	zig_zag		5196355	0					
ANR	5196784	ArgumentList	p		5196355	1					
ANR	5196785	Argument	p		5196355	0					
ANR	5196786	Identifier	p		5196355	0					
ANR	5196787	Argument	! d2		5196355	1					
ANR	5196788	UnaryOperationExpression	! d2		5196355	0					
ANR	5196789	UnaryOperator	!		5196355	0					
ANR	5196790	Identifier	d2		5196355	1					
ANR	5196791	Argument	sum		5196355	2					
ANR	5196792	Identifier	sum		5196355	0					
ANR	5196793	ElseStatement	else		5196355	0					
ANR	5196794	CompoundStatement		60:11:1288:1288	5196355	0					
ANR	5196795	IfStatement	if ( del_link && * del_link == p )		5196355	0					
ANR	5196796	Condition	del_link && * del_link == p	141:9:3089:3114	5196355	0	True				
ANR	5196797	AndExpression	del_link && * del_link == p		5196355	0		&&			
ANR	5196798	Identifier	del_link		5196355	0					
ANR	5196799	EqualityExpression	* del_link == p		5196355	1		==			
ANR	5196800	UnaryOperationExpression	* del_link		5196355	0					
ANR	5196801	UnaryOperator	*		5196355	0					
ANR	5196802	Identifier	del_link		5196355	1					
ANR	5196803	Identifier	p		5196355	1					
ANR	5196804	CompoundStatement		61:37:1327:1327	5196355	1					
ANR	5196805	ExpressionStatement	del_link = & s -> child [ d2 ]	142:6:3125:3149	5196355	0	True				
ANR	5196806	AssignmentExpression	del_link = & s -> child [ d2 ]		5196355	0		=			
ANR	5196807	Identifier	del_link		5196355	0					
ANR	5196808	UnaryOperationExpression	& s -> child [ d2 ]		5196355	1					
ANR	5196809	UnaryOperator	&		5196355	0					
ANR	5196810	ArrayIndexing	s -> child [ d2 ]		5196355	1					
ANR	5196811	PtrMemberAccess	s -> child		5196355	0					
ANR	5196812	Identifier	s		5196355	0					
ANR	5196813	Identifier	child		5196355	1					
ANR	5196814	Identifier	d2		5196355	1					
ANR	5196815	ExpressionStatement	"t = zag ( p , ! d2 , sum )"	144:5:3163:3184	5196355	1	True				
ANR	5196816	AssignmentExpression	"t = zag ( p , ! d2 , sum )"		5196355	0		=			
ANR	5196817	Identifier	t		5196355	0					
ANR	5196818	CallExpression	"zag ( p , ! d2 , sum )"		5196355	1					
ANR	5196819	Callee	zag		5196355	0					
ANR	5196820	Identifier	zag		5196355	0					
ANR	5196821	ArgumentList	p		5196355	1					
ANR	5196822	Argument	p		5196355	0					
ANR	5196823	Identifier	p		5196355	0					
ANR	5196824	Argument	! d2		5196355	1					
ANR	5196825	UnaryOperationExpression	! d2		5196355	0					
ANR	5196826	UnaryOperator	!		5196355	0					
ANR	5196827	Identifier	d2		5196355	1					
ANR	5196828	Argument	sum		5196355	2					
ANR	5196829	Identifier	sum		5196355	0					
ANR	5196830	ExpressionStatement	t -> red = q -> red = true	146:4:3196:3218	5196355	3	True				
ANR	5196831	AssignmentExpression	t -> red = q -> red = true		5196355	0		=			
ANR	5196832	PtrMemberAccess	t -> red		5196355	0					
ANR	5196833	Identifier	t		5196355	0					
ANR	5196834	Identifier	red		5196355	1					
ANR	5196835	AssignmentExpression	q -> red = true		5196355	1		=			
ANR	5196836	PtrMemberAccess	q -> red		5196355	0					
ANR	5196837	Identifier	q		5196355	0					
ANR	5196838	Identifier	red		5196355	1					
ANR	5196839	Identifier	true		5196355	1					
ANR	5196840	ExpressionStatement	t -> child [ 0 ] -> red = t -> child [ 1 ] -> red = false	147:4:3224:3267	5196355	4	True				
ANR	5196841	AssignmentExpression	t -> child [ 0 ] -> red = t -> child [ 1 ] -> red = false		5196355	0		=			
ANR	5196842	PtrMemberAccess	t -> child [ 0 ] -> red		5196355	0					
ANR	5196843	ArrayIndexing	t -> child [ 0 ]		5196355	0					
ANR	5196844	PtrMemberAccess	t -> child		5196355	0					
ANR	5196845	Identifier	t		5196355	0					
ANR	5196846	Identifier	child		5196355	1					
ANR	5196847	PrimaryExpression	0		5196355	1					
ANR	5196848	Identifier	red		5196355	1					
ANR	5196849	AssignmentExpression	t -> child [ 1 ] -> red = false		5196355	1		=			
ANR	5196850	PtrMemberAccess	t -> child [ 1 ] -> red		5196355	0					
ANR	5196851	ArrayIndexing	t -> child [ 1 ]		5196355	0					
ANR	5196852	PtrMemberAccess	t -> child		5196355	0					
ANR	5196853	Identifier	t		5196355	0					
ANR	5196854	Identifier	child		5196355	1					
ANR	5196855	PrimaryExpression	1		5196355	1					
ANR	5196856	Identifier	red		5196355	1					
ANR	5196857	Identifier	false		5196355	1					
ANR	5196858	ExpressionStatement	g -> child [ d3 ] = t	148:4:3273:3289	5196355	5	True				
ANR	5196859	AssignmentExpression	g -> child [ d3 ] = t		5196355	0		=			
ANR	5196860	ArrayIndexing	g -> child [ d3 ]		5196355	0					
ANR	5196861	PtrMemberAccess	g -> child		5196355	0					
ANR	5196862	Identifier	g		5196355	0					
ANR	5196863	Identifier	child		5196355	1					
ANR	5196864	Identifier	d3		5196355	1					
ANR	5196865	Identifier	t		5196355	1					
ANR	5196866	ExpressionStatement	path [ dep - 1 ] = t	149:4:3295:3312	5196355	6	True				
ANR	5196867	AssignmentExpression	path [ dep - 1 ] = t		5196355	0		=			
ANR	5196868	ArrayIndexing	path [ dep - 1 ]		5196355	0					
ANR	5196869	Identifier	path		5196355	0					
ANR	5196870	AdditiveExpression	dep - 1		5196355	1		-			
ANR	5196871	Identifier	dep		5196355	0					
ANR	5196872	PrimaryExpression	1		5196355	1					
ANR	5196873	Identifier	t		5196355	1					
ANR	5196874	ExpressionStatement	path [ dep ++ ] = p	150:4:3318:3333	5196355	7	True				
ANR	5196875	AssignmentExpression	path [ dep ++ ] = p		5196355	0		=			
ANR	5196876	ArrayIndexing	path [ dep ++ ]		5196355	0					
ANR	5196877	Identifier	path		5196355	0					
ANR	5196878	PostIncDecOperationExpression	dep ++		5196355	1					
ANR	5196879	Identifier	dep		5196355	0					
ANR	5196880	IncDec	++		5196355	1					
ANR	5196881	Identifier	p		5196355	1					
ANR	5196882	IfStatement	if ( del_link )		5196355	5					
ANR	5196883	Condition	del_link	154:5:3352:3359	5196355	0	True				
ANR	5196884	Identifier	del_link		5196355	0					
ANR	5196885	CompoundStatement		74:15:1572:1572	5196355	1					
ANR	5196886	ExpressionStatement	del = * del_link	155:2:3366:3381	5196355	0	True				
ANR	5196887	AssignmentExpression	del = * del_link		5196355	0		=			
ANR	5196888	Identifier	del		5196355	0					
ANR	5196889	UnaryOperationExpression	* del_link		5196355	1					
ANR	5196890	UnaryOperator	*		5196355	0					
ANR	5196891	Identifier	del_link		5196355	1					
ANR	5196892	ExpressionStatement	p -> child [ q != p -> child [ 0 ] ] = q -> child [ q -> child [ 0 ] == NULL ]	156:2:3385:3443	5196355	1	True				
ANR	5196893	AssignmentExpression	p -> child [ q != p -> child [ 0 ] ] = q -> child [ q -> child [ 0 ] == NULL ]		5196355	0		=			
ANR	5196894	ArrayIndexing	p -> child [ q != p -> child [ 0 ] ]		5196355	0					
ANR	5196895	PtrMemberAccess	p -> child		5196355	0					
ANR	5196896	Identifier	p		5196355	0					
ANR	5196897	Identifier	child		5196355	1					
ANR	5196898	EqualityExpression	q != p -> child [ 0 ]		5196355	1		!=			
ANR	5196899	Identifier	q		5196355	0					
ANR	5196900	ArrayIndexing	p -> child [ 0 ]		5196355	1					
ANR	5196901	PtrMemberAccess	p -> child		5196355	0					
ANR	5196902	Identifier	p		5196355	0					
ANR	5196903	Identifier	child		5196355	1					
ANR	5196904	PrimaryExpression	0		5196355	1					
ANR	5196905	ArrayIndexing	q -> child [ q -> child [ 0 ] == NULL ]		5196355	1					
ANR	5196906	PtrMemberAccess	q -> child		5196355	0					
ANR	5196907	Identifier	q		5196355	0					
ANR	5196908	Identifier	child		5196355	1					
ANR	5196909	EqualityExpression	q -> child [ 0 ] == NULL		5196355	1		==			
ANR	5196910	ArrayIndexing	q -> child [ 0 ]		5196355	0					
ANR	5196911	PtrMemberAccess	q -> child		5196355	0					
ANR	5196912	Identifier	q		5196355	0					
ANR	5196913	Identifier	child		5196355	1					
ANR	5196914	PrimaryExpression	0		5196355	1					
ANR	5196915	Identifier	NULL		5196355	1					
ANR	5196916	IfStatement	if ( del != q )		5196355	2					
ANR	5196917	Condition	del != q	157:6:3451:3458	5196355	0	True				
ANR	5196918	EqualityExpression	del != q		5196355	0		!=			
ANR	5196919	Identifier	del		5196355	0					
ANR	5196920	Identifier	q		5196355	1					
ANR	5196921	CompoundStatement		77:16:1671:1671	5196355	1					
ANR	5196922	ExpressionStatement	* q = * del	158:3:3466:3475	5196355	0	True				
ANR	5196923	AssignmentExpression	* q = * del		5196355	0		=			
ANR	5196924	UnaryOperationExpression	* q		5196355	0					
ANR	5196925	UnaryOperator	*		5196355	0					
ANR	5196926	Identifier	q		5196355	1					
ANR	5196927	UnaryOperationExpression	* del		5196355	1					
ANR	5196928	UnaryOperator	*		5196355	0					
ANR	5196929	Identifier	del		5196355	1					
ANR	5196930	ExpressionStatement	* del_link = q	159:3:3480:3493	5196355	1	True				
ANR	5196931	AssignmentExpression	* del_link = q		5196355	0		=			
ANR	5196932	UnaryOperationExpression	* del_link		5196355	0					
ANR	5196933	UnaryOperator	*		5196355	0					
ANR	5196934	Identifier	del_link		5196355	1					
ANR	5196935	Identifier	q		5196355	1					
ANR	5196936	IfStatement	if ( freefn )		5196355	3					
ANR	5196937	Condition	freefn	161:6:3505:3510	5196355	0	True				
ANR	5196938	Identifier	freefn		5196355	0					
ANR	5196939	CompoundStatement		81:14:1723:1723	5196355	1					
ANR	5196940	ExpressionStatement	freefn ( del )	162:3:3518:3530	5196355	0	True				
ANR	5196941	CallExpression	freefn ( del )		5196355	0					
ANR	5196942	Callee	freefn		5196355	0					
ANR	5196943	Identifier	freefn		5196355	0					
ANR	5196944	ArgumentList	del		5196355	1					
ANR	5196945	Argument	del		5196355	0					
ANR	5196946	Identifier	del		5196355	0					
ANR	5196947	IfStatement	if ( sum )		5196355	6					
ANR	5196948	Condition	sum	165:5:3544:3546	5196355	0	True				
ANR	5196949	Identifier	sum		5196355	0					
ANR	5196950	CompoundStatement		85:10:1759:1759	5196355	1					
ANR	5196951	WhileStatement	while ( dep -- )		5196355	0					
ANR	5196952	Condition	dep --	166:9:3560:3564	5196355	0	True				
ANR	5196953	PostIncDecOperationExpression	dep --		5196355	0					
ANR	5196954	Identifier	dep		5196355	0					
ANR	5196955	IncDec	--		5196355	1					
ANR	5196956	CompoundStatement		86:16:1777:1777	5196355	1					
ANR	5196957	ExpressionStatement	sum ( path [ dep ] == del ? q : path [ dep ] )	167:3:3572:3610	5196355	0	True				
ANR	5196958	CallExpression	sum ( path [ dep ] == del ? q : path [ dep ] )		5196355	0					
ANR	5196959	Callee	sum		5196355	0					
ANR	5196960	Identifier	sum		5196355	0					
ANR	5196961	ArgumentList	path [ dep ] == del ? q : path [ dep ]		5196355	1					
ANR	5196962	Argument	path [ dep ] == del ? q : path [ dep ]		5196355	0					
ANR	5196963	ConditionalExpression	path [ dep ] == del ? q : path [ dep ]		5196355	0					
ANR	5196964	Condition	path [ dep ] == del		5196355	0					
ANR	5196965	EqualityExpression	path [ dep ] == del		5196355	0		==			
ANR	5196966	ArrayIndexing	path [ dep ]		5196355	0					
ANR	5196967	Identifier	path		5196355	0					
ANR	5196968	Identifier	dep		5196355	1					
ANR	5196969	Identifier	del		5196355	1					
ANR	5196970	Identifier	q		5196355	1					
ANR	5196971	ArrayIndexing	path [ dep ]		5196355	2					
ANR	5196972	Identifier	path		5196355	0					
ANR	5196973	Identifier	dep		5196355	1					
ANR	5196974	IfStatement	if ( ( * root = head . child [ 1 ] ) )		5196355	7					
ANR	5196975	Condition	* root = head . child [ 1 ]	170:5:3624:3646	5196355	0	True				
ANR	5196976	AssignmentExpression	* root = head . child [ 1 ]		5196355	0		=			
ANR	5196977	UnaryOperationExpression	* root		5196355	0					
ANR	5196978	UnaryOperator	*		5196355	0					
ANR	5196979	Identifier	root		5196355	1					
ANR	5196980	ArrayIndexing	head . child [ 1 ]		5196355	1					
ANR	5196981	MemberAccess	head . child		5196355	0					
ANR	5196982	Identifier	head		5196355	0					
ANR	5196983	Identifier	child		5196355	1					
ANR	5196984	PrimaryExpression	1		5196355	1					
ANR	5196985	CompoundStatement		90:30:1859:1859	5196355	1					
ANR	5196986	ExpressionStatement	( * root ) -> red = false	171:2:3653:3673	5196355	0	True				
ANR	5196987	AssignmentExpression	( * root ) -> red = false		5196355	0		=			
ANR	5196988	PtrMemberAccess	( * root ) -> red		5196355	0					
ANR	5196989	UnaryOperationExpression	* root		5196355	0					
ANR	5196990	UnaryOperator	*		5196355	0					
ANR	5196991	Identifier	root		5196355	1					
ANR	5196992	Identifier	red		5196355	1					
ANR	5196993	Identifier	false		5196355	1					
ANR	5196994	ReturnStatement	return del ;	173:1:3679:3689	5196355	8	True				
ANR	5196995	Identifier	del		5196355	0					
ANR	5196996	ReturnType	R_API bool		5196355	1					
ANR	5196997	Identifier	r_rbtree_aug_delete		5196355	2					
ANR	5196998	ParameterList	"RBNode * * root , void * data , RBComparator cmp , RBNodeFree freefn , RBNodeSum sum"		5196355	3					
ANR	5196999	Parameter	RBNode * * root	81:31:1710:1722	5196355	0	True				
ANR	5197000	ParameterType	RBNode * *		5196355	0					
ANR	5197001	Identifier	root		5196355	1					
ANR	5197002	Parameter	void * data	81:46:1725:1734	5196355	1	True				
ANR	5197003	ParameterType	void *		5196355	0					
ANR	5197004	Identifier	data		5196355	1					
ANR	5197005	Parameter	RBComparator cmp	81:58:1737:1752	5196355	2	True				
ANR	5197006	ParameterType	RBComparator		5196355	0					
ANR	5197007	Identifier	cmp		5196355	1					
ANR	5197008	Parameter	RBNodeFree freefn	81:76:1755:1771	5196355	3	True				
ANR	5197009	ParameterType	RBNodeFree		5196355	0					
ANR	5197010	Identifier	freefn		5196355	1					
ANR	5197011	Parameter	RBNodeSum sum	81:95:1774:1786	5196355	4	True				
ANR	5197012	ParameterType	RBNodeSum		5196355	0					
ANR	5197013	Identifier	sum		5196355	1					
ANR	5197014	CFGEntryNode	ENTRY		5196355		True				
ANR	5197015	CFGExitNode	EXIT		5196355		True				
ANR	5197016	Symbol	data		5196355						
ANR	5197017	Symbol	R_RBTREE_MAX_HEIGHT		5196355						
ANR	5197018	Symbol	* head		5196355						
ANR	5197019	Symbol	del		5196355						
ANR	5197020	Symbol	dep		5196355						
ANR	5197021	Symbol	t -> child [ 0 ] -> red		5196355						
ANR	5197022	Symbol	red		5196355						
ANR	5197023	Symbol	path		5196355						
ANR	5197024	Symbol	q -> child [ ! d ] -> child		5196355						
ANR	5197025	Symbol	* * root		5196355						
ANR	5197026	Symbol	* d3		5196355						
ANR	5197027	Symbol	* d2		5196355						
ANR	5197028	Symbol	zag		5196355						
ANR	5197029	Symbol	s -> child [ d2 ] -> child		5196355						
ANR	5197030	Symbol	NULL		5196355						
ANR	5197031	Symbol	* * g		5196355						
ANR	5197032	Symbol	* * q -> child		5196355						
ANR	5197033	Symbol	* * d		5196355						
ANR	5197034	Symbol	del_link		5196355						
ANR	5197035	Symbol	* * * t		5196355						
ANR	5197036	Symbol	* * * s		5196355						
ANR	5197037	Symbol	* NULL		5196355						
ANR	5197038	Symbol	freefn		5196355						
ANR	5197039	Symbol	* * * q		5196355						
ANR	5197040	Symbol	* * * p		5196355						
ANR	5197041	Symbol	q -> child		5196355						
ANR	5197042	Symbol	g -> child		5196355						
ANR	5197043	Symbol	* q -> child		5196355						
ANR	5197044	Symbol	true		5196355						
ANR	5197045	Symbol	* * d2		5196355						
ANR	5197046	Symbol	* root		5196355						
ANR	5197047	Symbol	q -> red		5196355						
ANR	5197048	Symbol	zig_zag		5196355						
ANR	5197049	Symbol	* dep		5196355						
ANR	5197050	Symbol	cmp		5196355						
ANR	5197051	Symbol	* * s -> child		5196355						
ANR	5197052	Symbol	sum		5196355						
ANR	5197053	Symbol	* del		5196355						
ANR	5197054	Symbol	* * p -> child		5196355						
ANR	5197055	Symbol	d2		5196355						
ANR	5197056	Symbol	d3		5196355						
ANR	5197057	Symbol	head		5196355						
ANR	5197058	Symbol	* g -> child		5196355						
ANR	5197059	Symbol	& head		5196355						
ANR	5197060	Symbol	head . child		5196355						
ANR	5197061	Symbol	* p -> child		5196355						
ANR	5197062	Symbol	root		5196355						
ANR	5197063	Symbol	* * t		5196355						
ANR	5197064	Symbol	p -> child		5196355						
ANR	5197065	Symbol	* * s		5196355						
ANR	5197066	Symbol	* * q		5196355						
ANR	5197067	Symbol	* * p		5196355						
ANR	5197068	Symbol	s -> child		5196355						
ANR	5197069	Symbol	* head . child		5196355						
ANR	5197070	Symbol	p -> red		5196355						
ANR	5197071	Symbol	s -> red		5196355						
ANR	5197072	Symbol	t -> red		5196355						
ANR	5197073	Symbol	d		5196355						
ANR	5197074	Symbol	g		5196355						
ANR	5197075	Symbol	false		5196355						
ANR	5197076	Symbol	* t -> child		5196355						
ANR	5197077	Symbol	* s -> child		5196355						
ANR	5197078	Symbol	* d		5196355						
ANR	5197079	Symbol	* * t -> child		5196355						
ANR	5197080	Symbol	p		5196355						
ANR	5197081	Symbol	q		5196355						
ANR	5197082	Symbol	* g		5196355						
ANR	5197083	Symbol	( * root ) -> red		5196355						
ANR	5197084	Symbol	t -> child		5196355						
ANR	5197085	Symbol	s		5196355						
ANR	5197086	Symbol	t		5196355						
ANR	5197087	Symbol	t -> child [ 1 ] -> red		5196355						
ANR	5197088	Symbol	* path		5196355						
ANR	5197089	Symbol	* del_link		5196355						
ANR	5197090	Symbol	* p		5196355						
ANR	5197091	Symbol	* q		5196355						
ANR	5197092	Symbol	* s		5196355						
ANR	5197093	Symbol	* t		5196355						
ANR	5197094	Function	r_rbtree_aug_insert	177:0:3788:5056							
ANR	5197095	FunctionDef	"r_rbtree_aug_insert (RBNode * * root , void * data , RBNode * node , RBComparator cmp , RBNodeSum sum)"		5197094	0					
ANR	5197096	CompoundStatement		177:105:3893:5056	5197094	0					
ANR	5197097	ExpressionStatement	node -> child [ 0 ] = node -> child [ 1 ] = NULL	178:1:3896:3934	5197094	0	True				
ANR	5197098	AssignmentExpression	node -> child [ 0 ] = node -> child [ 1 ] = NULL		5197094	0		=			
ANR	5197099	ArrayIndexing	node -> child [ 0 ]		5197094	0					
ANR	5197100	PtrMemberAccess	node -> child		5197094	0					
ANR	5197101	Identifier	node		5197094	0					
ANR	5197102	Identifier	child		5197094	1					
ANR	5197103	PrimaryExpression	0		5197094	1					
ANR	5197104	AssignmentExpression	node -> child [ 1 ] = NULL		5197094	1		=			
ANR	5197105	ArrayIndexing	node -> child [ 1 ]		5197094	0					
ANR	5197106	PtrMemberAccess	node -> child		5197094	0					
ANR	5197107	Identifier	node		5197094	0					
ANR	5197108	Identifier	child		5197094	1					
ANR	5197109	PrimaryExpression	1		5197094	1					
ANR	5197110	Identifier	NULL		5197094	1					
ANR	5197111	IfStatement	if ( ! * root )		5197094	1					
ANR	5197112	Condition	! * root	179:5:3941:3946	5197094	0	True				
ANR	5197113	UnaryOperationExpression	! * root		5197094	0					
ANR	5197114	UnaryOperator	!		5197094	0					
ANR	5197115	UnaryOperationExpression	* root		5197094	1					
ANR	5197116	UnaryOperator	*		5197094	0					
ANR	5197117	Identifier	root		5197094	1					
ANR	5197118	CompoundStatement		3:13:55:55	5197094	1					
ANR	5197119	ExpressionStatement	* root = node	180:2:3953:3965	5197094	0	True				
ANR	5197120	AssignmentExpression	* root = node		5197094	0		=			
ANR	5197121	UnaryOperationExpression	* root		5197094	0					
ANR	5197122	UnaryOperator	*		5197094	0					
ANR	5197123	Identifier	root		5197094	1					
ANR	5197124	Identifier	node		5197094	1					
ANR	5197125	ExpressionStatement	node -> red = false	181:2:3969:3986	5197094	1	True				
ANR	5197126	AssignmentExpression	node -> red = false		5197094	0		=			
ANR	5197127	PtrMemberAccess	node -> red		5197094	0					
ANR	5197128	Identifier	node		5197094	0					
ANR	5197129	Identifier	red		5197094	1					
ANR	5197130	Identifier	false		5197094	1					
ANR	5197131	IfStatement	if ( sum )		5197094	2					
ANR	5197132	Condition	sum	182:6:3994:3996	5197094	0	True				
ANR	5197133	Identifier	sum		5197094	0					
ANR	5197134	CompoundStatement		6:11:105:105	5197094	1					
ANR	5197135	ExpressionStatement	sum ( node )	183:3:4004:4014	5197094	0	True				
ANR	5197136	CallExpression	sum ( node )		5197094	0					
ANR	5197137	Callee	sum		5197094	0					
ANR	5197138	Identifier	sum		5197094	0					
ANR	5197139	ArgumentList	node		5197094	1					
ANR	5197140	Argument	node		5197094	0					
ANR	5197141	Identifier	node		5197094	0					
ANR	5197142	ReturnStatement	return ;	185:2:4022:4028	5197094	3	True				
ANR	5197143	IdentifierDeclStatement	"RBNode * t = NULL , * g = NULL , * p = NULL , * q = * root ;"	187:1:4034:4084	5197094	2	True				
ANR	5197144	IdentifierDecl	* t = NULL		5197094	0					
ANR	5197145	IdentifierDeclType	RBNode *		5197094	0					
ANR	5197146	Identifier	t		5197094	1					
ANR	5197147	AssignmentExpression	* t = NULL		5197094	2		=			
ANR	5197148	Identifier	NULL		5197094	0					
ANR	5197149	Identifier	NULL		5197094	1					
ANR	5197150	IdentifierDecl	* g = NULL		5197094	1					
ANR	5197151	IdentifierDeclType	RBNode *		5197094	0					
ANR	5197152	Identifier	g		5197094	1					
ANR	5197153	AssignmentExpression	* g = NULL		5197094	2		=			
ANR	5197154	Identifier	NULL		5197094	0					
ANR	5197155	Identifier	NULL		5197094	1					
ANR	5197156	IdentifierDecl	* p = NULL		5197094	2					
ANR	5197157	IdentifierDeclType	RBNode *		5197094	0					
ANR	5197158	Identifier	p		5197094	1					
ANR	5197159	AssignmentExpression	* p = NULL		5197094	2		=			
ANR	5197160	Identifier	NULL		5197094	0					
ANR	5197161	Identifier	NULL		5197094	1					
ANR	5197162	IdentifierDecl	* q = * root		5197094	3					
ANR	5197163	IdentifierDeclType	RBNode *		5197094	0					
ANR	5197164	Identifier	q		5197094	1					
ANR	5197165	AssignmentExpression	* q = * root		5197094	2		=			
ANR	5197166	Identifier	q		5197094	0					
ANR	5197167	UnaryOperationExpression	* root		5197094	1					
ANR	5197168	UnaryOperator	*		5197094	0					
ANR	5197169	Identifier	root		5197094	1					
ANR	5197170	IdentifierDeclStatement	"int d = 0 , dep = 0 ;"	188:1:4087:4105	5197094	3	True				
ANR	5197171	IdentifierDecl	d = 0		5197094	0					
ANR	5197172	IdentifierDeclType	int		5197094	0					
ANR	5197173	Identifier	d		5197094	1					
ANR	5197174	AssignmentExpression	d = 0		5197094	2		=			
ANR	5197175	Identifier	d		5197094	0					
ANR	5197176	PrimaryExpression	0		5197094	1					
ANR	5197177	IdentifierDecl	dep = 0		5197094	1					
ANR	5197178	IdentifierDeclType	int		5197094	0					
ANR	5197179	Identifier	dep		5197094	1					
ANR	5197180	AssignmentExpression	dep = 0		5197094	2		=			
ANR	5197181	Identifier	dep		5197094	0					
ANR	5197182	PrimaryExpression	0		5197094	1					
ANR	5197183	IdentifierDeclStatement	bool done = false ;	189:1:4108:4125	5197094	4	True				
ANR	5197184	IdentifierDecl	done = false		5197094	0					
ANR	5197185	IdentifierDeclType	bool		5197094	0					
ANR	5197186	Identifier	done		5197094	1					
ANR	5197187	AssignmentExpression	done = false		5197094	2		=			
ANR	5197188	Identifier	false		5197094	0					
ANR	5197189	Identifier	false		5197094	1					
ANR	5197190	IdentifierDeclStatement	RBNode * path [ R_RBTREE_MAX_HEIGHT ] ;	190:1:4128:4161	5197094	5	True				
ANR	5197191	IdentifierDecl	* path [ R_RBTREE_MAX_HEIGHT ]		5197094	0					
ANR	5197192	IdentifierDeclType	RBNode * [ R_RBTREE_MAX_HEIGHT ]		5197094	0					
ANR	5197193	Identifier	path		5197094	1					
ANR	5197194	Identifier	R_RBTREE_MAX_HEIGHT		5197094	2					
ANR	5197195	ForStatement	for ( ; ; )		5197094	6					
ANR	5197196	CompoundStatement		15:10:279:279	5197094	0					
ANR	5197197	IfStatement	if ( ! q )		5197094	0					
ANR	5197198	Condition	! q	192:6:4181:4182	5197094	0	True				
ANR	5197199	UnaryOperationExpression	! q		5197094	0					
ANR	5197200	UnaryOperator	!		5197094	0					
ANR	5197201	Identifier	q		5197094	1					
ANR	5197202	CompoundStatement		16:10:291:291	5197094	1					
ANR	5197203	ExpressionStatement	q = node	193:3:4190:4198	5197094	0	True				
ANR	5197204	AssignmentExpression	q = node		5197094	0		=			
ANR	5197205	Identifier	q		5197094	0					
ANR	5197206	Identifier	node		5197094	1					
ANR	5197207	ExpressionStatement	q -> red = true	194:3:4203:4216	5197094	1	True				
ANR	5197208	AssignmentExpression	q -> red = true		5197094	0		=			
ANR	5197209	PtrMemberAccess	q -> red		5197094	0					
ANR	5197210	Identifier	q		5197094	0					
ANR	5197211	Identifier	red		5197094	1					
ANR	5197212	Identifier	true		5197094	1					
ANR	5197213	ExpressionStatement	p -> child [ d ] = q	195:3:4221:4236	5197094	2	True				
ANR	5197214	AssignmentExpression	p -> child [ d ] = q		5197094	0		=			
ANR	5197215	ArrayIndexing	p -> child [ d ]		5197094	0					
ANR	5197216	PtrMemberAccess	p -> child		5197094	0					
ANR	5197217	Identifier	p		5197094	0					
ANR	5197218	Identifier	child		5197094	1					
ANR	5197219	Identifier	d		5197094	1					
ANR	5197220	Identifier	q		5197094	1					
ANR	5197221	ExpressionStatement	done = true	196:3:4241:4252	5197094	3	True				
ANR	5197222	AssignmentExpression	done = true		5197094	0		=			
ANR	5197223	Identifier	done		5197094	0					
ANR	5197224	Identifier	true		5197094	1					
ANR	5197225	ElseStatement	else		5197094	0					
ANR	5197226	IfStatement	if ( red ( q -> child [ 0 ] ) && red ( q -> child [ 1 ] ) )		5197094	0					
ANR	5197227	Condition	red ( q -> child [ 0 ] ) && red ( q -> child [ 1 ] )	197:13:4267:4304	5197094	0	True				
ANR	5197228	AndExpression	red ( q -> child [ 0 ] ) && red ( q -> child [ 1 ] )		5197094	0		&&			
ANR	5197229	CallExpression	red ( q -> child [ 0 ] )		5197094	0					
ANR	5197230	Callee	red		5197094	0					
ANR	5197231	Identifier	red		5197094	0					
ANR	5197232	ArgumentList	q -> child [ 0 ]		5197094	1					
ANR	5197233	Argument	q -> child [ 0 ]		5197094	0					
ANR	5197234	ArrayIndexing	q -> child [ 0 ]		5197094	0					
ANR	5197235	PtrMemberAccess	q -> child		5197094	0					
ANR	5197236	Identifier	q		5197094	0					
ANR	5197237	Identifier	child		5197094	1					
ANR	5197238	PrimaryExpression	0		5197094	1					
ANR	5197239	CallExpression	red ( q -> child [ 1 ] )		5197094	1					
ANR	5197240	Callee	red		5197094	0					
ANR	5197241	Identifier	red		5197094	0					
ANR	5197242	ArgumentList	q -> child [ 1 ]		5197094	1					
ANR	5197243	Argument	q -> child [ 1 ]		5197094	0					
ANR	5197244	ArrayIndexing	q -> child [ 1 ]		5197094	0					
ANR	5197245	PtrMemberAccess	q -> child		5197094	0					
ANR	5197246	Identifier	q		5197094	0					
ANR	5197247	Identifier	child		5197094	1					
ANR	5197248	PrimaryExpression	1		5197094	1					
ANR	5197249	CompoundStatement		21:53:413:413	5197094	1					
ANR	5197250	ExpressionStatement	q -> child [ 0 ] -> red = q -> child [ 1 ] -> red = false	198:3:4312:4355	5197094	0	True				
ANR	5197251	AssignmentExpression	q -> child [ 0 ] -> red = q -> child [ 1 ] -> red = false		5197094	0		=			
ANR	5197252	PtrMemberAccess	q -> child [ 0 ] -> red		5197094	0					
ANR	5197253	ArrayIndexing	q -> child [ 0 ]		5197094	0					
ANR	5197254	PtrMemberAccess	q -> child		5197094	0					
ANR	5197255	Identifier	q		5197094	0					
ANR	5197256	Identifier	child		5197094	1					
ANR	5197257	PrimaryExpression	0		5197094	1					
ANR	5197258	Identifier	red		5197094	1					
ANR	5197259	AssignmentExpression	q -> child [ 1 ] -> red = false		5197094	1		=			
ANR	5197260	PtrMemberAccess	q -> child [ 1 ] -> red		5197094	0					
ANR	5197261	ArrayIndexing	q -> child [ 1 ]		5197094	0					
ANR	5197262	PtrMemberAccess	q -> child		5197094	0					
ANR	5197263	Identifier	q		5197094	0					
ANR	5197264	Identifier	child		5197094	1					
ANR	5197265	PrimaryExpression	1		5197094	1					
ANR	5197266	Identifier	red		5197094	1					
ANR	5197267	Identifier	false		5197094	1					
ANR	5197268	IfStatement	if ( q != * root )		5197094	1					
ANR	5197269	Condition	q != * root	199:7:4364:4373	5197094	0	True				
ANR	5197270	EqualityExpression	q != * root		5197094	0		!=			
ANR	5197271	Identifier	q		5197094	0					
ANR	5197272	UnaryOperationExpression	* root		5197094	1					
ANR	5197273	UnaryOperator	*		5197094	0					
ANR	5197274	Identifier	root		5197094	1					
ANR	5197275	CompoundStatement		23:19:482:482	5197094	1					
ANR	5197276	ExpressionStatement	q -> red = true	200:4:4382:4395	5197094	0	True				
ANR	5197277	AssignmentExpression	q -> red = true		5197094	0		=			
ANR	5197278	PtrMemberAccess	q -> red		5197094	0					
ANR	5197279	Identifier	q		5197094	0					
ANR	5197280	Identifier	red		5197094	1					
ANR	5197281	Identifier	true		5197094	1					
ANR	5197282	IfStatement	if ( q -> red && p && p -> red )		5197094	1					
ANR	5197283	Condition	q -> red && p && p -> red	203:6:4412:4432	5197094	0	True				
ANR	5197284	AndExpression	q -> red && p && p -> red		5197094	0		&&			
ANR	5197285	PtrMemberAccess	q -> red		5197094	0					
ANR	5197286	Identifier	q		5197094	0					
ANR	5197287	Identifier	red		5197094	1					
ANR	5197288	AndExpression	p && p -> red		5197094	1		&&			
ANR	5197289	Identifier	p		5197094	0					
ANR	5197290	PtrMemberAccess	p -> red		5197094	1					
ANR	5197291	Identifier	p		5197094	0					
ANR	5197292	Identifier	red		5197094	1					
ANR	5197293	CompoundStatement		28:3:546:603	5197094	1					
ANR	5197294	IdentifierDeclStatement	"int d3 = t ? t -> child [ 0 ] != g : - 1 , d2 = g -> child [ 0 ] != p ;"	204:3:4440:4497	5197094	0	True				
ANR	5197295	IdentifierDecl	d3 = t ? t -> child [ 0 ] != g : - 1		5197094	0					
ANR	5197296	IdentifierDeclType	int		5197094	0					
ANR	5197297	Identifier	d3		5197094	1					
ANR	5197298	AssignmentExpression	d3 = t ? t -> child [ 0 ] != g : - 1		5197094	2		=			
ANR	5197299	Identifier	d3		5197094	0					
ANR	5197300	ConditionalExpression	t ? t -> child [ 0 ] != g : - 1		5197094	1					
ANR	5197301	Condition	t		5197094	0					
ANR	5197302	Identifier	t		5197094	0					
ANR	5197303	EqualityExpression	t -> child [ 0 ] != g		5197094	1		!=			
ANR	5197304	ArrayIndexing	t -> child [ 0 ]		5197094	0					
ANR	5197305	PtrMemberAccess	t -> child		5197094	0					
ANR	5197306	Identifier	t		5197094	0					
ANR	5197307	Identifier	child		5197094	1					
ANR	5197308	PrimaryExpression	0		5197094	1					
ANR	5197309	Identifier	g		5197094	1					
ANR	5197310	UnaryOperationExpression	- 1		5197094	2					
ANR	5197311	UnaryOperator	-		5197094	0					
ANR	5197312	PrimaryExpression	1		5197094	1					
ANR	5197313	IdentifierDecl	d2 = g -> child [ 0 ] != p		5197094	1					
ANR	5197314	IdentifierDeclType	int		5197094	0					
ANR	5197315	Identifier	d2		5197094	1					
ANR	5197316	AssignmentExpression	d2 = g -> child [ 0 ] != p		5197094	2		=			
ANR	5197317	Identifier	d2		5197094	0					
ANR	5197318	EqualityExpression	g -> child [ 0 ] != p		5197094	1		!=			
ANR	5197319	ArrayIndexing	g -> child [ 0 ]		5197094	0					
ANR	5197320	PtrMemberAccess	g -> child		5197094	0					
ANR	5197321	Identifier	g		5197094	0					
ANR	5197322	Identifier	child		5197094	1					
ANR	5197323	PrimaryExpression	0		5197094	1					
ANR	5197324	Identifier	p		5197094	1					
ANR	5197325	IfStatement	if ( p -> child [ d2 ] == q )		5197094	1					
ANR	5197326	Condition	p -> child [ d2 ] == q	205:7:4506:4522	5197094	0	True				
ANR	5197327	EqualityExpression	p -> child [ d2 ] == q		5197094	0		==			
ANR	5197328	ArrayIndexing	p -> child [ d2 ]		5197094	0					
ANR	5197329	PtrMemberAccess	p -> child		5197094	0					
ANR	5197330	Identifier	p		5197094	0					
ANR	5197331	Identifier	child		5197094	1					
ANR	5197332	Identifier	d2		5197094	1					
ANR	5197333	Identifier	q		5197094	1					
ANR	5197334	CompoundStatement		29:26:631:631	5197094	1					
ANR	5197335	ExpressionStatement	"g = zag ( g , d2 , sum )"	206:4:4531:4551	5197094	0	True				
ANR	5197336	AssignmentExpression	"g = zag ( g , d2 , sum )"		5197094	0		=			
ANR	5197337	Identifier	g		5197094	0					
ANR	5197338	CallExpression	"zag ( g , d2 , sum )"		5197094	1					
ANR	5197339	Callee	zag		5197094	0					
ANR	5197340	Identifier	zag		5197094	0					
ANR	5197341	ArgumentList	g		5197094	1					
ANR	5197342	Argument	g		5197094	0					
ANR	5197343	Identifier	g		5197094	0					
ANR	5197344	Argument	d2		5197094	1					
ANR	5197345	Identifier	d2		5197094	0					
ANR	5197346	Argument	sum		5197094	2					
ANR	5197347	Identifier	sum		5197094	0					
ANR	5197348	ExpressionStatement	dep --	207:4:4557:4562	5197094	1	True				
ANR	5197349	PostIncDecOperationExpression	dep --		5197094	0					
ANR	5197350	Identifier	dep		5197094	0					
ANR	5197351	IncDec	--		5197094	1					
ANR	5197352	ExpressionStatement	path [ dep - 1 ] = g	208:4:4568:4585	5197094	2	True				
ANR	5197353	AssignmentExpression	path [ dep - 1 ] = g		5197094	0		=			
ANR	5197354	ArrayIndexing	path [ dep - 1 ]		5197094	0					
ANR	5197355	Identifier	path		5197094	0					
ANR	5197356	AdditiveExpression	dep - 1		5197094	1		-			
ANR	5197357	Identifier	dep		5197094	0					
ANR	5197358	PrimaryExpression	1		5197094	1					
ANR	5197359	Identifier	g		5197094	1					
ANR	5197360	ElseStatement	else		5197094	0					
ANR	5197361	CompoundStatement		33:10:703:703	5197094	0					
ANR	5197362	ExpressionStatement	"g = zig_zag ( g , d2 , sum )"	210:4:4603:4627	5197094	0	True				
ANR	5197363	AssignmentExpression	"g = zig_zag ( g , d2 , sum )"		5197094	0		=			
ANR	5197364	Identifier	g		5197094	0					
ANR	5197365	CallExpression	"zig_zag ( g , d2 , sum )"		5197094	1					
ANR	5197366	Callee	zig_zag		5197094	0					
ANR	5197367	Identifier	zig_zag		5197094	0					
ANR	5197368	ArgumentList	g		5197094	1					
ANR	5197369	Argument	g		5197094	0					
ANR	5197370	Identifier	g		5197094	0					
ANR	5197371	Argument	d2		5197094	1					
ANR	5197372	Identifier	d2		5197094	0					
ANR	5197373	Argument	sum		5197094	2					
ANR	5197374	Identifier	sum		5197094	0					
ANR	5197375	ExpressionStatement	dep -= 2	211:4:4633:4641	5197094	1	True				
ANR	5197376	AssignmentExpression	dep -= 2		5197094	0		-=			
ANR	5197377	Identifier	dep		5197094	0					
ANR	5197378	PrimaryExpression	2		5197094	1					
ANR	5197379	IfStatement	if ( t )		5197094	2					
ANR	5197380	Condition	t	213:7:4655:4655	5197094	0	True				
ANR	5197381	Identifier	t		5197094	0					
ANR	5197382	CompoundStatement		37:10:764:764	5197094	1					
ANR	5197383	ExpressionStatement	t -> child [ d3 ] = g	214:4:4664:4680	5197094	0	True				
ANR	5197384	AssignmentExpression	t -> child [ d3 ] = g		5197094	0		=			
ANR	5197385	ArrayIndexing	t -> child [ d3 ]		5197094	0					
ANR	5197386	PtrMemberAccess	t -> child		5197094	0					
ANR	5197387	Identifier	t		5197094	0					
ANR	5197388	Identifier	child		5197094	1					
ANR	5197389	Identifier	d3		5197094	1					
ANR	5197390	Identifier	g		5197094	1					
ANR	5197391	ElseStatement	else		5197094	0					
ANR	5197392	CompoundStatement		39:10:798:798	5197094	0					
ANR	5197393	ExpressionStatement	* root = g	216:4:4698:4707	5197094	0	True				
ANR	5197394	AssignmentExpression	* root = g		5197094	0		=			
ANR	5197395	UnaryOperationExpression	* root		5197094	0					
ANR	5197396	UnaryOperator	*		5197094	0					
ANR	5197397	Identifier	root		5197094	1					
ANR	5197398	Identifier	g		5197094	1					
ANR	5197399	IfStatement	if ( done )		5197094	2					
ANR	5197400	Condition	done	219:6:4724:4727	5197094	0	True				
ANR	5197401	Identifier	done		5197094	0					
ANR	5197402	CompoundStatement		43:12:836:836	5197094	1					
ANR	5197403	BreakStatement	break ;	220:3:4735:4740	5197094	0	True				
ANR	5197404	ExpressionStatement	"d = cmp ( data , q )"	222:2:4748:4765	5197094	3	True				
ANR	5197405	AssignmentExpression	"d = cmp ( data , q )"		5197094	0		=			
ANR	5197406	Identifier	d		5197094	0					
ANR	5197407	CallExpression	"cmp ( data , q )"		5197094	1					
ANR	5197408	Callee	cmp		5197094	0					
ANR	5197409	Identifier	cmp		5197094	0					
ANR	5197410	ArgumentList	data		5197094	1					
ANR	5197411	Argument	data		5197094	0					
ANR	5197412	Identifier	data		5197094	0					
ANR	5197413	Argument	q		5197094	1					
ANR	5197414	Identifier	q		5197094	0					
ANR	5197415	ExpressionStatement	t = g	223:2:4769:4774	5197094	4	True				
ANR	5197416	AssignmentExpression	t = g		5197094	0		=			
ANR	5197417	Identifier	t		5197094	0					
ANR	5197418	Identifier	g		5197094	1					
ANR	5197419	ExpressionStatement	g = p	224:2:4778:4783	5197094	5	True				
ANR	5197420	AssignmentExpression	g = p		5197094	0		=			
ANR	5197421	Identifier	g		5197094	0					
ANR	5197422	Identifier	p		5197094	1					
ANR	5197423	ExpressionStatement	p = q	225:2:4787:4792	5197094	6	True				
ANR	5197424	AssignmentExpression	p = q		5197094	0		=			
ANR	5197425	Identifier	p		5197094	0					
ANR	5197426	Identifier	q		5197094	1					
ANR	5197427	IfStatement	if ( dep >= R_RBTREE_MAX_HEIGHT )		5197094	7					
ANR	5197428	Condition	dep >= R_RBTREE_MAX_HEIGHT	226:6:4800:4825	5197094	0	True				
ANR	5197429	RelationalExpression	dep >= R_RBTREE_MAX_HEIGHT		5197094	0		>=			
ANR	5197430	Identifier	dep		5197094	0					
ANR	5197431	Identifier	R_RBTREE_MAX_HEIGHT		5197094	1					
ANR	5197432	CompoundStatement		50:34:934:934	5197094	1					
ANR	5197433	ExpressionStatement	"eprintf ( ""Too deep tree\\n"" )"	227:3:4833:4860	5197094	0	True				
ANR	5197434	CallExpression	"eprintf ( ""Too deep tree\\n"" )"		5197094	0					
ANR	5197435	Callee	eprintf		5197094	0					
ANR	5197436	Identifier	eprintf		5197094	0					
ANR	5197437	ArgumentList	"""Too deep tree\\n"""		5197094	1					
ANR	5197438	Argument	"""Too deep tree\\n"""		5197094	0					
ANR	5197439	PrimaryExpression	"""Too deep tree\\n"""		5197094	0					
ANR	5197440	BreakStatement	break ;	228:3:4865:4870	5197094	1	True				
ANR	5197441	ExpressionStatement	path [ dep ++ ] = q	230:2:4878:4893	5197094	8	True				
ANR	5197442	AssignmentExpression	path [ dep ++ ] = q		5197094	0		=			
ANR	5197443	ArrayIndexing	path [ dep ++ ]		5197094	0					
ANR	5197444	Identifier	path		5197094	0					
ANR	5197445	PostIncDecOperationExpression	dep ++		5197094	1					
ANR	5197446	Identifier	dep		5197094	0					
ANR	5197447	IncDec	++		5197094	1					
ANR	5197448	Identifier	q		5197094	1					
ANR	5197449	IfStatement	if ( d < 0 )		5197094	9					
ANR	5197450	Condition	d < 0	231:6:4901:4905	5197094	0	True				
ANR	5197451	RelationalExpression	d < 0		5197094	0		<			
ANR	5197452	Identifier	d		5197094	0					
ANR	5197453	PrimaryExpression	0		5197094	1					
ANR	5197454	CompoundStatement		55:13:1014:1014	5197094	1					
ANR	5197455	ExpressionStatement	d = 0	232:3:4913:4918	5197094	0	True				
ANR	5197456	AssignmentExpression	d = 0		5197094	0		=			
ANR	5197457	Identifier	d		5197094	0					
ANR	5197458	PrimaryExpression	0		5197094	1					
ANR	5197459	ExpressionStatement	q = q -> child [ 0 ]	233:3:4923:4938	5197094	1	True				
ANR	5197460	AssignmentExpression	q = q -> child [ 0 ]		5197094	0		=			
ANR	5197461	Identifier	q		5197094	0					
ANR	5197462	ArrayIndexing	q -> child [ 0 ]		5197094	1					
ANR	5197463	PtrMemberAccess	q -> child		5197094	0					
ANR	5197464	Identifier	q		5197094	0					
ANR	5197465	Identifier	child		5197094	1					
ANR	5197466	PrimaryExpression	0		5197094	1					
ANR	5197467	ElseStatement	else		5197094	0					
ANR	5197468	CompoundStatement		58:9:1055:1055	5197094	0					
ANR	5197469	ExpressionStatement	d = 1	235:3:4954:4959	5197094	0	True				
ANR	5197470	AssignmentExpression	d = 1		5197094	0		=			
ANR	5197471	Identifier	d		5197094	0					
ANR	5197472	PrimaryExpression	1		5197094	1					
ANR	5197473	ExpressionStatement	q = q -> child [ 1 ]	236:3:4964:4979	5197094	1	True				
ANR	5197474	AssignmentExpression	q = q -> child [ 1 ]		5197094	0		=			
ANR	5197475	Identifier	q		5197094	0					
ANR	5197476	ArrayIndexing	q -> child [ 1 ]		5197094	1					
ANR	5197477	PtrMemberAccess	q -> child		5197094	0					
ANR	5197478	Identifier	q		5197094	0					
ANR	5197479	Identifier	child		5197094	1					
ANR	5197480	PrimaryExpression	1		5197094	1					
ANR	5197481	IfStatement	if ( sum )		5197094	7					
ANR	5197482	Condition	sum	239:5:4993:4995	5197094	0	True				
ANR	5197483	Identifier	sum		5197094	0					
ANR	5197484	CompoundStatement		63:10:1104:1104	5197094	1					
ANR	5197485	ExpressionStatement	sum ( q )	240:2:5002:5009	5197094	0	True				
ANR	5197486	CallExpression	sum ( q )		5197094	0					
ANR	5197487	Callee	sum		5197094	0					
ANR	5197488	Identifier	sum		5197094	0					
ANR	5197489	ArgumentList	q		5197094	1					
ANR	5197490	Argument	q		5197094	0					
ANR	5197491	Identifier	q		5197094	0					
ANR	5197492	WhileStatement	while ( dep )		5197094	1					
ANR	5197493	Condition	dep	241:9:5020:5022	5197094	0	True				
ANR	5197494	Identifier	dep		5197094	0					
ANR	5197495	CompoundStatement		65:14:1131:1131	5197094	1					
ANR	5197496	ExpressionStatement	sum ( path [ -- dep ] )	242:3:5030:5047	5197094	0	True				
ANR	5197497	CallExpression	sum ( path [ -- dep ] )		5197094	0					
ANR	5197498	Callee	sum		5197094	0					
ANR	5197499	Identifier	sum		5197094	0					
ANR	5197500	ArgumentList	path [ -- dep ]		5197094	1					
ANR	5197501	Argument	path [ -- dep ]		5197094	0					
ANR	5197502	ArrayIndexing	path [ -- dep ]		5197094	0					
ANR	5197503	Identifier	path		5197094	0					
ANR	5197504	UnaryExpression	-- dep		5197094	1					
ANR	5197505	IncDec	--		5197094	0					
ANR	5197506	Identifier	dep		5197094	1					
ANR	5197507	ReturnType	R_API void		5197094	1					
ANR	5197508	Identifier	r_rbtree_aug_insert		5197094	2					
ANR	5197509	ParameterList	"RBNode * * root , void * data , RBNode * node , RBComparator cmp , RBNodeSum sum"		5197094	3					
ANR	5197510	Parameter	RBNode * * root	177:31:3819:3831	5197094	0	True				
ANR	5197511	ParameterType	RBNode * *		5197094	0					
ANR	5197512	Identifier	root		5197094	1					
ANR	5197513	Parameter	void * data	177:46:3834:3843	5197094	1	True				
ANR	5197514	ParameterType	void *		5197094	0					
ANR	5197515	Identifier	data		5197094	1					
ANR	5197516	Parameter	RBNode * node	177:58:3846:3857	5197094	2	True				
ANR	5197517	ParameterType	RBNode *		5197094	0					
ANR	5197518	Identifier	node		5197094	1					
ANR	5197519	Parameter	RBComparator cmp	177:72:3860:3875	5197094	3	True				
ANR	5197520	ParameterType	RBComparator		5197094	0					
ANR	5197521	Identifier	cmp		5197094	1					
ANR	5197522	Parameter	RBNodeSum sum	177:90:3878:3890	5197094	4	True				
ANR	5197523	ParameterType	RBNodeSum		5197094	0					
ANR	5197524	Identifier	sum		5197094	1					
ANR	5197525	CFGEntryNode	ENTRY		5197094		True				
ANR	5197526	CFGExitNode	EXIT		5197094		True				
ANR	5197527	InfiniteForNode	true		5197094		True				
ANR	5197528	Symbol	data		5197094						
ANR	5197529	Symbol	R_RBTREE_MAX_HEIGHT		5197094						
ANR	5197530	Symbol	node -> child		5197094						
ANR	5197531	Symbol	dep		5197094						
ANR	5197532	Symbol	red		5197094						
ANR	5197533	Symbol	path		5197094						
ANR	5197534	Symbol	* d3		5197094						
ANR	5197535	Symbol	* d2		5197094						
ANR	5197536	Symbol	* node		5197094						
ANR	5197537	Symbol	q -> child [ 1 ] -> red		5197094						
ANR	5197538	Symbol	zag		5197094						
ANR	5197539	Symbol	NULL		5197094						
ANR	5197540	Symbol	* * g		5197094						
ANR	5197541	Symbol	* * q -> child		5197094						
ANR	5197542	Symbol	* node -> child		5197094						
ANR	5197543	Symbol	done		5197094						
ANR	5197544	Symbol	* * * q		5197094						
ANR	5197545	Symbol	node		5197094						
ANR	5197546	Symbol	q -> child		5197094						
ANR	5197547	Symbol	* * node		5197094						
ANR	5197548	Symbol	g -> child		5197094						
ANR	5197549	Symbol	true		5197094						
ANR	5197550	Symbol	* q -> child		5197094						
ANR	5197551	Symbol	node -> red		5197094						
ANR	5197552	Symbol	* root		5197094						
ANR	5197553	Symbol	q -> red		5197094						
ANR	5197554	Symbol	q -> child [ 0 ] -> red		5197094						
ANR	5197555	Symbol	zig_zag		5197094						
ANR	5197556	Symbol	* dep		5197094						
ANR	5197557	Symbol	cmp		5197094						
ANR	5197558	Symbol	sum		5197094						
ANR	5197559	Symbol	d2		5197094						
ANR	5197560	Symbol	d3		5197094						
ANR	5197561	Symbol	* g -> child		5197094						
ANR	5197562	Symbol	* p -> child		5197094						
ANR	5197563	Symbol	root		5197094						
ANR	5197564	Symbol	* * t		5197094						
ANR	5197565	Symbol	p -> child		5197094						
ANR	5197566	Symbol	* * q		5197094						
ANR	5197567	Symbol	* * p		5197094						
ANR	5197568	Symbol	p -> red		5197094						
ANR	5197569	Symbol	d		5197094						
ANR	5197570	Symbol	g		5197094						
ANR	5197571	Symbol	false		5197094						
ANR	5197572	Symbol	* t -> child		5197094						
ANR	5197573	Symbol	* d		5197094						
ANR	5197574	Symbol	p		5197094						
ANR	5197575	Symbol	q		5197094						
ANR	5197576	Symbol	* g		5197094						
ANR	5197577	Symbol	t -> child		5197094						
ANR	5197578	Symbol	t		5197094						
ANR	5197579	Symbol	* path		5197094						
ANR	5197580	Symbol	* p		5197094						
ANR	5197581	Symbol	* q		5197094						
ANR	5197582	Symbol	* t		5197094						
ANR	5197583	Function	r_rbtree_aug_update_sum	248:0:5137:5690							
ANR	5197584	FunctionDef	"r_rbtree_aug_update_sum (RBNode * root , void * data , RBNode * node , RBComparator cmp , RBNodeSum sum)"		5197583	0					
ANR	5197585	CompoundStatement		248:108:5245:5690	5197583	0					
ANR	5197586	IdentifierDeclStatement	int dep = 0 ;	249:1:5248:5259	5197583	0	True				
ANR	5197587	IdentifierDecl	dep = 0		5197583	0					
ANR	5197588	IdentifierDeclType	int		5197583	0					
ANR	5197589	Identifier	dep		5197583	1					
ANR	5197590	AssignmentExpression	dep = 0		5197583	2		=			
ANR	5197591	Identifier	dep		5197583	0					
ANR	5197592	PrimaryExpression	0		5197583	1					
ANR	5197593	IdentifierDeclStatement	RBNode * path [ R_RBTREE_MAX_HEIGHT ] ;	250:1:5262:5295	5197583	1	True				
ANR	5197594	IdentifierDecl	* path [ R_RBTREE_MAX_HEIGHT ]		5197583	0					
ANR	5197595	IdentifierDeclType	RBNode * [ R_RBTREE_MAX_HEIGHT ]		5197583	0					
ANR	5197596	Identifier	path		5197583	1					
ANR	5197597	Identifier	R_RBTREE_MAX_HEIGHT		5197583	2					
ANR	5197598	IdentifierDeclStatement	RBNode * cur = root ;	251:1:5298:5316	5197583	2	True				
ANR	5197599	IdentifierDecl	* cur = root		5197583	0					
ANR	5197600	IdentifierDeclType	RBNode *		5197583	0					
ANR	5197601	Identifier	cur		5197583	1					
ANR	5197602	AssignmentExpression	* cur = root		5197583	2		=			
ANR	5197603	Identifier	root		5197583	0					
ANR	5197604	Identifier	root		5197583	1					
ANR	5197605	ForStatement	for ( ; ; )		5197583	3					
ANR	5197606	CompoundStatement		19:2:274:297	5197583	0					
ANR	5197607	IfStatement	if ( dep >= R_RBTREE_MAX_HEIGHT )		5197583	0					
ANR	5197608	Condition	dep >= R_RBTREE_MAX_HEIGHT	253:6:5336:5361	5197583	0	True				
ANR	5197609	RelationalExpression	dep >= R_RBTREE_MAX_HEIGHT		5197583	0		>=			
ANR	5197610	Identifier	dep		5197583	0					
ANR	5197611	Identifier	R_RBTREE_MAX_HEIGHT		5197583	1					
ANR	5197612	CompoundStatement		6:34:118:118	5197583	1					
ANR	5197613	ExpressionStatement	"eprintf ( ""Too deep tree\\n"" )"	254:3:5369:5396	5197583	0	True				
ANR	5197614	CallExpression	"eprintf ( ""Too deep tree\\n"" )"		5197583	0					
ANR	5197615	Callee	eprintf		5197583	0					
ANR	5197616	Identifier	eprintf		5197583	0					
ANR	5197617	ArgumentList	"""Too deep tree\\n"""		5197583	1					
ANR	5197618	Argument	"""Too deep tree\\n"""		5197583	0					
ANR	5197619	PrimaryExpression	"""Too deep tree\\n"""		5197583	0					
ANR	5197620	ReturnStatement	return false ;	255:3:5401:5413	5197583	1	True				
ANR	5197621	Identifier	false		5197583	0					
ANR	5197622	IfStatement	if ( ! cur )		5197583	1					
ANR	5197623	Condition	! cur	257:6:5425:5428	5197583	0	True				
ANR	5197624	UnaryOperationExpression	! cur		5197583	0					
ANR	5197625	UnaryOperator	!		5197583	0					
ANR	5197626	Identifier	cur		5197583	1					
ANR	5197627	CompoundStatement		10:12:185:185	5197583	1					
ANR	5197628	ReturnStatement	return false ;	258:3:5436:5448	5197583	0	True				
ANR	5197629	Identifier	false		5197583	0					
ANR	5197630	ExpressionStatement	path [ dep ] = cur	260:2:5456:5471	5197583	2	True				
ANR	5197631	AssignmentExpression	path [ dep ] = cur		5197583	0		=			
ANR	5197632	ArrayIndexing	path [ dep ]		5197583	0					
ANR	5197633	Identifier	path		5197583	0					
ANR	5197634	Identifier	dep		5197583	1					
ANR	5197635	Identifier	cur		5197583	1					
ANR	5197636	ExpressionStatement	dep ++	261:2:5475:5480	5197583	3	True				
ANR	5197637	PostIncDecOperationExpression	dep ++		5197583	0					
ANR	5197638	Identifier	dep		5197583	0					
ANR	5197639	IncDec	++		5197583	1					
ANR	5197640	IfStatement	if ( cur == node )		5197583	4					
ANR	5197641	Condition	cur == node	262:6:5488:5498	5197583	0	True				
ANR	5197642	EqualityExpression	cur == node		5197583	0		==			
ANR	5197643	Identifier	cur		5197583	0					
ANR	5197644	Identifier	node		5197583	1					
ANR	5197645	CompoundStatement		15:19:255:255	5197583	1					
ANR	5197646	BreakStatement	break ;	263:3:5506:5511	5197583	0	True				
ANR	5197647	IdentifierDeclStatement	"int d = cmp ( data , cur ) ;"	266:2:5520:5543	5197583	5	True				
ANR	5197648	IdentifierDecl	"d = cmp ( data , cur )"		5197583	0					
ANR	5197649	IdentifierDeclType	int		5197583	0					
ANR	5197650	Identifier	d		5197583	1					
ANR	5197651	AssignmentExpression	"d = cmp ( data , cur )"		5197583	2		=			
ANR	5197652	Identifier	d		5197583	0					
ANR	5197653	CallExpression	"cmp ( data , cur )"		5197583	1					
ANR	5197654	Callee	cmp		5197583	0					
ANR	5197655	Identifier	cmp		5197583	0					
ANR	5197656	ArgumentList	data		5197583	1					
ANR	5197657	Argument	data		5197583	0					
ANR	5197658	Identifier	data		5197583	0					
ANR	5197659	Argument	cur		5197583	1					
ANR	5197660	Identifier	cur		5197583	0					
ANR	5197661	IfStatement	if ( d < 0 )		5197583	6					
ANR	5197662	Condition	d < 0	267:6:5551:5555	5197583	0	True				
ANR	5197663	RelationalExpression	d < 0		5197583	0		<			
ANR	5197664	Identifier	d		5197583	0					
ANR	5197665	PrimaryExpression	0		5197583	1					
ANR	5197666	CompoundStatement		20:13:312:312	5197583	1					
ANR	5197667	ExpressionStatement	cur = cur -> child [ 0 ]	268:3:5563:5582	5197583	0	True				
ANR	5197668	AssignmentExpression	cur = cur -> child [ 0 ]		5197583	0		=			
ANR	5197669	Identifier	cur		5197583	0					
ANR	5197670	ArrayIndexing	cur -> child [ 0 ]		5197583	1					
ANR	5197671	PtrMemberAccess	cur -> child		5197583	0					
ANR	5197672	Identifier	cur		5197583	0					
ANR	5197673	Identifier	child		5197583	1					
ANR	5197674	PrimaryExpression	0		5197583	1					
ANR	5197675	ElseStatement	else		5197583	0					
ANR	5197676	CompoundStatement		22:9:347:347	5197583	0					
ANR	5197677	ExpressionStatement	cur = cur -> child [ 1 ]	270:3:5598:5617	5197583	0	True				
ANR	5197678	AssignmentExpression	cur = cur -> child [ 1 ]		5197583	0		=			
ANR	5197679	Identifier	cur		5197583	0					
ANR	5197680	ArrayIndexing	cur -> child [ 1 ]		5197583	1					
ANR	5197681	PtrMemberAccess	cur -> child		5197583	0					
ANR	5197682	Identifier	cur		5197583	0					
ANR	5197683	Identifier	child		5197583	1					
ANR	5197684	PrimaryExpression	1		5197583	1					
ANR	5197685	ForStatement	for ( ; dep > 0 ; dep -- )		5197583	4					
ANR	5197686	Condition	dep > 0	274:7:5634:5640	5197583	0	True				
ANR	5197687	RelationalExpression	dep > 0		5197583	0		>			
ANR	5197688	Identifier	dep		5197583	0					
ANR	5197689	PrimaryExpression	0		5197583	1					
ANR	5197690	PostIncDecOperationExpression	dep --	274:16:5643:5647	5197583	1	True				
ANR	5197691	Identifier	dep		5197583	0					
ANR	5197692	IncDec	--		5197583	1					
ANR	5197693	CompoundStatement		27:23:404:404	5197583	2					
ANR	5197694	ExpressionStatement	sum ( path [ dep - 1 ] )	275:2:5654:5671	5197583	0	True				
ANR	5197695	CallExpression	sum ( path [ dep - 1 ] )		5197583	0					
ANR	5197696	Callee	sum		5197583	0					
ANR	5197697	Identifier	sum		5197583	0					
ANR	5197698	ArgumentList	path [ dep - 1 ]		5197583	1					
ANR	5197699	Argument	path [ dep - 1 ]		5197583	0					
ANR	5197700	ArrayIndexing	path [ dep - 1 ]		5197583	0					
ANR	5197701	Identifier	path		5197583	0					
ANR	5197702	AdditiveExpression	dep - 1		5197583	1		-			
ANR	5197703	Identifier	dep		5197583	0					
ANR	5197704	PrimaryExpression	1		5197583	1					
ANR	5197705	ReturnStatement	return true ;	277:1:5677:5688	5197583	5	True				
ANR	5197706	Identifier	true		5197583	0					
ANR	5197707	ReturnType	R_API bool		5197583	1					
ANR	5197708	Identifier	r_rbtree_aug_update_sum		5197583	2					
ANR	5197709	ParameterList	"RBNode * root , void * data , RBNode * node , RBComparator cmp , RBNodeSum sum"		5197583	3					
ANR	5197710	Parameter	RBNode * root	248:35:5172:5183	5197583	0	True				
ANR	5197711	ParameterType	RBNode *		5197583	0					
ANR	5197712	Identifier	root		5197583	1					
ANR	5197713	Parameter	void * data	248:49:5186:5195	5197583	1	True				
ANR	5197714	ParameterType	void *		5197583	0					
ANR	5197715	Identifier	data		5197583	1					
ANR	5197716	Parameter	RBNode * node	248:61:5198:5209	5197583	2	True				
ANR	5197717	ParameterType	RBNode *		5197583	0					
ANR	5197718	Identifier	node		5197583	1					
ANR	5197719	Parameter	RBComparator cmp	248:75:5212:5227	5197583	3	True				
ANR	5197720	ParameterType	RBComparator		5197583	0					
ANR	5197721	Identifier	cmp		5197583	1					
ANR	5197722	Parameter	RBNodeSum sum	248:93:5230:5242	5197583	4	True				
ANR	5197723	ParameterType	RBNodeSum		5197583	0					
ANR	5197724	Identifier	sum		5197583	1					
ANR	5197725	CFGEntryNode	ENTRY		5197583		True				
ANR	5197726	CFGExitNode	EXIT		5197583		True				
ANR	5197727	InfiniteForNode	true		5197583		True				
ANR	5197728	Symbol	cur		5197583						
ANR	5197729	Symbol	data		5197583						
ANR	5197730	Symbol	d		5197583						
ANR	5197731	Symbol	* dep		5197583						
ANR	5197732	Symbol	cmp		5197583						
ANR	5197733	Symbol	R_RBTREE_MAX_HEIGHT		5197583						
ANR	5197734	Symbol	false		5197583						
ANR	5197735	Symbol	sum		5197583						
ANR	5197736	Symbol	dep		5197583						
ANR	5197737	Symbol	node		5197583						
ANR	5197738	Symbol	path		5197583						
ANR	5197739	Symbol	* * cur		5197583						
ANR	5197740	Symbol	* cur		5197583						
ANR	5197741	Symbol	* cur -> child		5197583						
ANR	5197742	Symbol	root		5197583						
ANR	5197743	Symbol	true		5197583						
ANR	5197744	Symbol	* path		5197583						
ANR	5197745	Symbol	cur -> child		5197583						
ANR	5197746	Function	r_rbtree_delete	280:0:5693:5847							
ANR	5197747	FunctionDef	"r_rbtree_delete (RBNode * * root , void * data , RBComparator cmp , RBNodeFree freefn)"		5197746	0					
ANR	5197748	CompoundStatement		280:91:5784:5847	5197746	0					
ANR	5197749	ReturnStatement	"return r_rbtree_aug_delete ( root , data , cmp , freefn , NULL ) ;"	281:1:5787:5845	5197746	0	True				
ANR	5197750	CallExpression	"r_rbtree_aug_delete ( root , data , cmp , freefn , NULL )"		5197746	0					
ANR	5197751	Callee	r_rbtree_aug_delete		5197746	0					
ANR	5197752	Identifier	r_rbtree_aug_delete		5197746	0					
ANR	5197753	ArgumentList	root		5197746	1					
ANR	5197754	Argument	root		5197746	0					
ANR	5197755	Identifier	root		5197746	0					
ANR	5197756	Argument	data		5197746	1					
ANR	5197757	Identifier	data		5197746	0					
ANR	5197758	Argument	cmp		5197746	2					
ANR	5197759	Identifier	cmp		5197746	0					
ANR	5197760	Argument	freefn		5197746	3					
ANR	5197761	Identifier	freefn		5197746	0					
ANR	5197762	Argument	NULL		5197746	4					
ANR	5197763	Identifier	NULL		5197746	0					
ANR	5197764	ReturnType	R_API bool		5197746	1					
ANR	5197765	Identifier	r_rbtree_delete		5197746	2					
ANR	5197766	ParameterList	"RBNode * * root , void * data , RBComparator cmp , RBNodeFree freefn"		5197746	3					
ANR	5197767	Parameter	RBNode * * root	280:27:5720:5732	5197746	0	True				
ANR	5197768	ParameterType	RBNode * *		5197746	0					
ANR	5197769	Identifier	root		5197746	1					
ANR	5197770	Parameter	void * data	280:42:5735:5744	5197746	1	True				
ANR	5197771	ParameterType	void *		5197746	0					
ANR	5197772	Identifier	data		5197746	1					
ANR	5197773	Parameter	RBComparator cmp	280:54:5747:5762	5197746	2	True				
ANR	5197774	ParameterType	RBComparator		5197746	0					
ANR	5197775	Identifier	cmp		5197746	1					
ANR	5197776	Parameter	RBNodeFree freefn	280:72:5765:5781	5197746	3	True				
ANR	5197777	ParameterType	RBNodeFree		5197746	0					
ANR	5197778	Identifier	freefn		5197746	1					
ANR	5197779	CFGEntryNode	ENTRY		5197746		True				
ANR	5197780	CFGExitNode	EXIT		5197746		True				
ANR	5197781	Symbol	freefn		5197746						
ANR	5197782	Symbol	NULL		5197746						
ANR	5197783	Symbol	data		5197746						
ANR	5197784	Symbol	r_rbtree_aug_delete		5197746						
ANR	5197785	Symbol	root		5197746						
ANR	5197786	Symbol	cmp		5197746						
ANR	5197787	Function	r_rbtree_find	284:0:5850:6081							
ANR	5197788	FunctionDef	"r_rbtree_find (RBNode * x , void * data , RBComparator cmp)"		5197787	0					
ANR	5197789	CompoundStatement		284:69:5919:6081	5197787	0					
ANR	5197790	WhileStatement	while ( x )		5197787	0					
ANR	5197791	Condition	x	285:8:5929:5929	5197787	0	True				
ANR	5197792	Identifier	x		5197787	0					
ANR	5197793	CompoundStatement		3:2:16:37	5197787	1					
ANR	5197794	IdentifierDeclStatement	"int d = cmp ( data , x ) ;"	286:2:5936:5957	5197787	0	True				
ANR	5197795	IdentifierDecl	"d = cmp ( data , x )"		5197787	0					
ANR	5197796	IdentifierDeclType	int		5197787	0					
ANR	5197797	Identifier	d		5197787	1					
ANR	5197798	AssignmentExpression	"d = cmp ( data , x )"		5197787	2		=			
ANR	5197799	Identifier	d		5197787	0					
ANR	5197800	CallExpression	"cmp ( data , x )"		5197787	1					
ANR	5197801	Callee	cmp		5197787	0					
ANR	5197802	Identifier	cmp		5197787	0					
ANR	5197803	ArgumentList	data		5197787	1					
ANR	5197804	Argument	data		5197787	0					
ANR	5197805	Identifier	data		5197787	0					
ANR	5197806	Argument	x		5197787	1					
ANR	5197807	Identifier	x		5197787	0					
ANR	5197808	IfStatement	if ( d < 0 )		5197787	1					
ANR	5197809	Condition	d < 0	287:6:5965:5969	5197787	0	True				
ANR	5197810	RelationalExpression	d < 0		5197787	0		<			
ANR	5197811	Identifier	d		5197787	0					
ANR	5197812	PrimaryExpression	0		5197787	1					
ANR	5197813	CompoundStatement		4:13:52:52	5197787	1					
ANR	5197814	ExpressionStatement	x = x -> child [ 0 ]	288:3:5977:5992	5197787	0	True				
ANR	5197815	AssignmentExpression	x = x -> child [ 0 ]		5197787	0		=			
ANR	5197816	Identifier	x		5197787	0					
ANR	5197817	ArrayIndexing	x -> child [ 0 ]		5197787	1					
ANR	5197818	PtrMemberAccess	x -> child		5197787	0					
ANR	5197819	Identifier	x		5197787	0					
ANR	5197820	Identifier	child		5197787	1					
ANR	5197821	PrimaryExpression	0		5197787	1					
ANR	5197822	ElseStatement	else		5197787	0					
ANR	5197823	IfStatement	if ( d > 0 )		5197787	0					
ANR	5197824	Condition	d > 0	289:13:6007:6011	5197787	0	True				
ANR	5197825	RelationalExpression	d > 0		5197787	0		>			
ANR	5197826	Identifier	d		5197787	0					
ANR	5197827	PrimaryExpression	0		5197787	1					
ANR	5197828	CompoundStatement		6:20:94:94	5197787	1					
ANR	5197829	ExpressionStatement	x = x -> child [ 1 ]	290:3:6019:6034	5197787	0	True				
ANR	5197830	AssignmentExpression	x = x -> child [ 1 ]		5197787	0		=			
ANR	5197831	Identifier	x		5197787	0					
ANR	5197832	ArrayIndexing	x -> child [ 1 ]		5197787	1					
ANR	5197833	PtrMemberAccess	x -> child		5197787	0					
ANR	5197834	Identifier	x		5197787	0					
ANR	5197835	Identifier	child		5197787	1					
ANR	5197836	PrimaryExpression	1		5197787	1					
ANR	5197837	ElseStatement	else		5197787	0					
ANR	5197838	CompoundStatement		8:9:125:125	5197787	0					
ANR	5197839	ReturnStatement	return x ;	292:3:6050:6058	5197787	0	True				
ANR	5197840	Identifier	x		5197787	0					
ANR	5197841	ReturnStatement	return NULL ;	295:1:6068:6079	5197787	1	True				
ANR	5197842	Identifier	NULL		5197787	0					
ANR	5197843	ReturnType	R_API RBNode *		5197787	1					
ANR	5197844	Identifier	r_rbtree_find		5197787	2					
ANR	5197845	ParameterList	"RBNode * x , void * data , RBComparator cmp"		5197787	3					
ANR	5197846	Parameter	RBNode * x	284:28:5878:5886	5197787	0	True				
ANR	5197847	ParameterType	RBNode *		5197787	0					
ANR	5197848	Identifier	x		5197787	1					
ANR	5197849	Parameter	void * data	284:39:5889:5898	5197787	1	True				
ANR	5197850	ParameterType	void *		5197787	0					
ANR	5197851	Identifier	data		5197787	1					
ANR	5197852	Parameter	RBComparator cmp	284:51:5901:5916	5197787	2	True				
ANR	5197853	ParameterType	RBComparator		5197787	0					
ANR	5197854	Identifier	cmp		5197787	1					
ANR	5197855	CFGEntryNode	ENTRY		5197787		True				
ANR	5197856	CFGExitNode	EXIT		5197787		True				
ANR	5197857	Symbol	* x		5197787						
ANR	5197858	Symbol	* * x		5197787						
ANR	5197859	Symbol	NULL		5197787						
ANR	5197860	Symbol	data		5197787						
ANR	5197861	Symbol	d		5197787						
ANR	5197862	Symbol	x -> child		5197787						
ANR	5197863	Symbol	cmp		5197787						
ANR	5197864	Symbol	* x -> child		5197787						
ANR	5197865	Symbol	x		5197787						
ANR	5197866	Function	r_rbtree_free	298:0:6084:6246							
ANR	5197867	FunctionDef	"r_rbtree_free (RBNode * x , RBNodeFree freefn)"		5197866	0					
ANR	5197868	CompoundStatement		298:55:6139:6246	5197866	0					
ANR	5197869	IfStatement	if ( x )		5197866	0					
ANR	5197870	Condition	x	299:5:6146:6146	5197866	0	True				
ANR	5197871	Identifier	x		5197866	0					
ANR	5197872	CompoundStatement		2:8:9:9	5197866	1					
ANR	5197873	ExpressionStatement	"r_rbtree_free ( x -> child [ 0 ] , freefn )"	300:2:6153:6188	5197866	0	True				
ANR	5197874	CallExpression	"r_rbtree_free ( x -> child [ 0 ] , freefn )"		5197866	0					
ANR	5197875	Callee	r_rbtree_free		5197866	0					
ANR	5197876	Identifier	r_rbtree_free		5197866	0					
ANR	5197877	ArgumentList	x -> child [ 0 ]		5197866	1					
ANR	5197878	Argument	x -> child [ 0 ]		5197866	0					
ANR	5197879	ArrayIndexing	x -> child [ 0 ]		5197866	0					
ANR	5197880	PtrMemberAccess	x -> child		5197866	0					
ANR	5197881	Identifier	x		5197866	0					
ANR	5197882	Identifier	child		5197866	1					
ANR	5197883	PrimaryExpression	0		5197866	1					
ANR	5197884	Argument	freefn		5197866	1					
ANR	5197885	Identifier	freefn		5197866	0					
ANR	5197886	ExpressionStatement	"r_rbtree_free ( x -> child [ 1 ] , freefn )"	301:2:6192:6227	5197866	1	True				
ANR	5197887	CallExpression	"r_rbtree_free ( x -> child [ 1 ] , freefn )"		5197866	0					
ANR	5197888	Callee	r_rbtree_free		5197866	0					
ANR	5197889	Identifier	r_rbtree_free		5197866	0					
ANR	5197890	ArgumentList	x -> child [ 1 ]		5197866	1					
ANR	5197891	Argument	x -> child [ 1 ]		5197866	0					
ANR	5197892	ArrayIndexing	x -> child [ 1 ]		5197866	0					
ANR	5197893	PtrMemberAccess	x -> child		5197866	0					
ANR	5197894	Identifier	x		5197866	0					
ANR	5197895	Identifier	child		5197866	1					
ANR	5197896	PrimaryExpression	1		5197866	1					
ANR	5197897	Argument	freefn		5197866	1					
ANR	5197898	Identifier	freefn		5197866	0					
ANR	5197899	ExpressionStatement	freefn ( x )	302:2:6231:6241	5197866	2	True				
ANR	5197900	CallExpression	freefn ( x )		5197866	0					
ANR	5197901	Callee	freefn		5197866	0					
ANR	5197902	Identifier	freefn		5197866	0					
ANR	5197903	ArgumentList	x		5197866	1					
ANR	5197904	Argument	x		5197866	0					
ANR	5197905	Identifier	x		5197866	0					
ANR	5197906	ReturnType	R_API void		5197866	1					
ANR	5197907	Identifier	r_rbtree_free		5197866	2					
ANR	5197908	ParameterList	"RBNode * x , RBNodeFree freefn"		5197866	3					
ANR	5197909	Parameter	RBNode * x	298:25:6109:6117	5197866	0	True				
ANR	5197910	ParameterType	RBNode *		5197866	0					
ANR	5197911	Identifier	x		5197866	1					
ANR	5197912	Parameter	RBNodeFree freefn	298:36:6120:6136	5197866	1	True				
ANR	5197913	ParameterType	RBNodeFree		5197866	0					
ANR	5197914	Identifier	freefn		5197866	1					
ANR	5197915	CFGEntryNode	ENTRY		5197866		True				
ANR	5197916	CFGExitNode	EXIT		5197866		True				
ANR	5197917	Symbol	freefn		5197866						
ANR	5197918	Symbol	* x		5197866						
ANR	5197919	Symbol	* * x		5197866						
ANR	5197920	Symbol	x -> child		5197866						
ANR	5197921	Symbol	* x -> child		5197866						
ANR	5197922	Symbol	x		5197866						
ANR	5197923	Function	r_rbtree_insert	306:0:6249:6389							
ANR	5197924	FunctionDef	"r_rbtree_insert (RBNode * * root , void * data , RBNode * node , RBComparator cmp)"		5197923	0					
ANR	5197925	CompoundStatement		306:86:6335:6389	5197923	0					
ANR	5197926	ExpressionStatement	"r_rbtree_aug_insert ( root , data , node , cmp , NULL )"	307:1:6338:6387	5197923	0	True				
ANR	5197927	CallExpression	"r_rbtree_aug_insert ( root , data , node , cmp , NULL )"		5197923	0					
ANR	5197928	Callee	r_rbtree_aug_insert		5197923	0					
ANR	5197929	Identifier	r_rbtree_aug_insert		5197923	0					
ANR	5197930	ArgumentList	root		5197923	1					
ANR	5197931	Argument	root		5197923	0					
ANR	5197932	Identifier	root		5197923	0					
ANR	5197933	Argument	data		5197923	1					
ANR	5197934	Identifier	data		5197923	0					
ANR	5197935	Argument	node		5197923	2					
ANR	5197936	Identifier	node		5197923	0					
ANR	5197937	Argument	cmp		5197923	3					
ANR	5197938	Identifier	cmp		5197923	0					
ANR	5197939	Argument	NULL		5197923	4					
ANR	5197940	Identifier	NULL		5197923	0					
ANR	5197941	ReturnType	R_API void		5197923	1					
ANR	5197942	Identifier	r_rbtree_insert		5197923	2					
ANR	5197943	ParameterList	"RBNode * * root , void * data , RBNode * node , RBComparator cmp"		5197923	3					
ANR	5197944	Parameter	RBNode * * root	306:27:6276:6288	5197923	0	True				
ANR	5197945	ParameterType	RBNode * *		5197923	0					
ANR	5197946	Identifier	root		5197923	1					
ANR	5197947	Parameter	void * data	306:42:6291:6300	5197923	1	True				
ANR	5197948	ParameterType	void *		5197923	0					
ANR	5197949	Identifier	data		5197923	1					
ANR	5197950	Parameter	RBNode * node	306:54:6303:6314	5197923	2	True				
ANR	5197951	ParameterType	RBNode *		5197923	0					
ANR	5197952	Identifier	node		5197923	1					
ANR	5197953	Parameter	RBComparator cmp	306:68:6317:6332	5197923	3	True				
ANR	5197954	ParameterType	RBComparator		5197923	0					
ANR	5197955	Identifier	cmp		5197923	1					
ANR	5197956	CFGEntryNode	ENTRY		5197923		True				
ANR	5197957	CFGExitNode	EXIT		5197923		True				
ANR	5197958	Symbol	node		5197923						
ANR	5197959	Symbol	NULL		5197923						
ANR	5197960	Symbol	data		5197923						
ANR	5197961	Symbol	root		5197923						
ANR	5197962	Symbol	cmp		5197923						
ANR	5197963	Function	r_rbtree_lower_bound	310:0:6392:6628							
ANR	5197964	FunctionDef	"r_rbtree_lower_bound (RBNode * x , void * data , RBComparator cmp)"		5197963	0					
ANR	5197965	CompoundStatement		310:76:6468:6628	5197963	0					
ANR	5197966	IdentifierDeclStatement	RBNode * ret = NULL ;	311:1:6471:6489	5197963	0	True				
ANR	5197967	IdentifierDecl	* ret = NULL		5197963	0					
ANR	5197968	IdentifierDeclType	RBNode *		5197963	0					
ANR	5197969	Identifier	ret		5197963	1					
ANR	5197970	AssignmentExpression	* ret = NULL		5197963	2		=			
ANR	5197971	Identifier	NULL		5197963	0					
ANR	5197972	Identifier	NULL		5197963	1					
ANR	5197973	WhileStatement	while ( x )		5197963	1					
ANR	5197974	Condition	x	312:8:6499:6499	5197963	0	True				
ANR	5197975	Identifier	x		5197963	0					
ANR	5197976	CompoundStatement		4:2:37:58	5197963	1					
ANR	5197977	IdentifierDeclStatement	"int d = cmp ( data , x ) ;"	313:2:6506:6527	5197963	0	True				
ANR	5197978	IdentifierDecl	"d = cmp ( data , x )"		5197963	0					
ANR	5197979	IdentifierDeclType	int		5197963	0					
ANR	5197980	Identifier	d		5197963	1					
ANR	5197981	AssignmentExpression	"d = cmp ( data , x )"		5197963	2		=			
ANR	5197982	Identifier	d		5197963	0					
ANR	5197983	CallExpression	"cmp ( data , x )"		5197963	1					
ANR	5197984	Callee	cmp		5197963	0					
ANR	5197985	Identifier	cmp		5197963	0					
ANR	5197986	ArgumentList	data		5197963	1					
ANR	5197987	Argument	data		5197963	0					
ANR	5197988	Identifier	data		5197963	0					
ANR	5197989	Argument	x		5197963	1					
ANR	5197990	Identifier	x		5197963	0					
ANR	5197991	IfStatement	if ( d <= 0 )		5197963	1					
ANR	5197992	Condition	d <= 0	314:6:6535:6540	5197963	0	True				
ANR	5197993	RelationalExpression	d <= 0		5197963	0		<=			
ANR	5197994	Identifier	d		5197963	0					
ANR	5197995	PrimaryExpression	0		5197963	1					
ANR	5197996	CompoundStatement		5:14:74:74	5197963	1					
ANR	5197997	ExpressionStatement	ret = x	315:3:6548:6555	5197963	0	True				
ANR	5197998	AssignmentExpression	ret = x		5197963	0		=			
ANR	5197999	Identifier	ret		5197963	0					
ANR	5198000	Identifier	x		5197963	1					
ANR	5198001	ExpressionStatement	x = x -> child [ 0 ]	316:3:6560:6575	5197963	1	True				
ANR	5198002	AssignmentExpression	x = x -> child [ 0 ]		5197963	0		=			
ANR	5198003	Identifier	x		5197963	0					
ANR	5198004	ArrayIndexing	x -> child [ 0 ]		5197963	1					
ANR	5198005	PtrMemberAccess	x -> child		5197963	0					
ANR	5198006	Identifier	x		5197963	0					
ANR	5198007	Identifier	child		5197963	1					
ANR	5198008	PrimaryExpression	0		5197963	1					
ANR	5198009	ElseStatement	else		5197963	0					
ANR	5198010	CompoundStatement		8:9:117:117	5197963	0					
ANR	5198011	ExpressionStatement	x = x -> child [ 1 ]	318:3:6591:6606	5197963	0	True				
ANR	5198012	AssignmentExpression	x = x -> child [ 1 ]		5197963	0		=			
ANR	5198013	Identifier	x		5197963	0					
ANR	5198014	ArrayIndexing	x -> child [ 1 ]		5197963	1					
ANR	5198015	PtrMemberAccess	x -> child		5197963	0					
ANR	5198016	Identifier	x		5197963	0					
ANR	5198017	Identifier	child		5197963	1					
ANR	5198018	PrimaryExpression	1		5197963	1					
ANR	5198019	ReturnStatement	return ret ;	321:1:6616:6626	5197963	2	True				
ANR	5198020	Identifier	ret		5197963	0					
ANR	5198021	ReturnType	R_API RBNode *		5197963	1					
ANR	5198022	Identifier	r_rbtree_lower_bound		5197963	2					
ANR	5198023	ParameterList	"RBNode * x , void * data , RBComparator cmp"		5197963	3					
ANR	5198024	Parameter	RBNode * x	310:35:6427:6435	5197963	0	True				
ANR	5198025	ParameterType	RBNode *		5197963	0					
ANR	5198026	Identifier	x		5197963	1					
ANR	5198027	Parameter	void * data	310:46:6438:6447	5197963	1	True				
ANR	5198028	ParameterType	void *		5197963	0					
ANR	5198029	Identifier	data		5197963	1					
ANR	5198030	Parameter	RBComparator cmp	310:58:6450:6465	5197963	2	True				
ANR	5198031	ParameterType	RBComparator		5197963	0					
ANR	5198032	Identifier	cmp		5197963	1					
ANR	5198033	CFGEntryNode	ENTRY		5197963		True				
ANR	5198034	CFGExitNode	EXIT		5197963		True				
ANR	5198035	Symbol	ret		5197963						
ANR	5198036	Symbol	* x		5197963						
ANR	5198037	Symbol	NULL		5197963						
ANR	5198038	Symbol	* * x		5197963						
ANR	5198039	Symbol	data		5197963						
ANR	5198040	Symbol	d		5197963						
ANR	5198041	Symbol	x -> child		5197963						
ANR	5198042	Symbol	cmp		5197963						
ANR	5198043	Symbol	* x -> child		5197963						
ANR	5198044	Symbol	x		5197963						
ANR	5198045	Function	r_rbtree_lower_bound_backward	324:0:6631:6771							
ANR	5198046	FunctionDef	"r_rbtree_lower_bound_backward (RBNode * root , void * data , RBComparator cmp)"		5198045	0					
ANR	5198047	CompoundStatement		324:87:6718:6771	5198045	0					
ANR	5198048	ReturnStatement	"return bound_iter ( root , data , cmp , false , true ) ;"	325:1:6721:6769	5198045	0	True				
ANR	5198049	CallExpression	"bound_iter ( root , data , cmp , false , true )"		5198045	0					
ANR	5198050	Callee	bound_iter		5198045	0					
ANR	5198051	Identifier	bound_iter		5198045	0					
ANR	5198052	ArgumentList	root		5198045	1					
ANR	5198053	Argument	root		5198045	0					
ANR	5198054	Identifier	root		5198045	0					
ANR	5198055	Argument	data		5198045	1					
ANR	5198056	Identifier	data		5198045	0					
ANR	5198057	Argument	cmp		5198045	2					
ANR	5198058	Identifier	cmp		5198045	0					
ANR	5198059	Argument	false		5198045	3					
ANR	5198060	Identifier	false		5198045	0					
ANR	5198061	Argument	true		5198045	4					
ANR	5198062	Identifier	true		5198045	0					
ANR	5198063	ReturnType	R_API RBIter		5198045	1					
ANR	5198064	Identifier	r_rbtree_lower_bound_backward		5198045	2					
ANR	5198065	ParameterList	"RBNode * root , void * data , RBComparator cmp"		5198045	3					
ANR	5198066	Parameter	RBNode * root	324:43:6674:6685	5198045	0	True				
ANR	5198067	ParameterType	RBNode *		5198045	0					
ANR	5198068	Identifier	root		5198045	1					
ANR	5198069	Parameter	void * data	324:57:6688:6697	5198045	1	True				
ANR	5198070	ParameterType	void *		5198045	0					
ANR	5198071	Identifier	data		5198045	1					
ANR	5198072	Parameter	RBComparator cmp	324:69:6700:6715	5198045	2	True				
ANR	5198073	ParameterType	RBComparator		5198045	0					
ANR	5198074	Identifier	cmp		5198045	1					
ANR	5198075	CFGEntryNode	ENTRY		5198045		True				
ANR	5198076	CFGExitNode	EXIT		5198045		True				
ANR	5198077	Symbol	data		5198045						
ANR	5198078	Symbol	root		5198045						
ANR	5198079	Symbol	cmp		5198045						
ANR	5198080	Symbol	true		5198045						
ANR	5198081	Symbol	false		5198045						
ANR	5198082	Symbol	bound_iter		5198045						
ANR	5198083	Function	r_rbtree_lower_bound_forward	328:0:6774:6914							
ANR	5198084	FunctionDef	"r_rbtree_lower_bound_forward (RBNode * root , void * data , RBComparator cmp)"		5198083	0					
ANR	5198085	CompoundStatement		328:86:6860:6914	5198083	0					
ANR	5198086	ReturnStatement	"return bound_iter ( root , data , cmp , false , false ) ;"	329:1:6863:6912	5198083	0	True				
ANR	5198087	CallExpression	"bound_iter ( root , data , cmp , false , false )"		5198083	0					
ANR	5198088	Callee	bound_iter		5198083	0					
ANR	5198089	Identifier	bound_iter		5198083	0					
ANR	5198090	ArgumentList	root		5198083	1					
ANR	5198091	Argument	root		5198083	0					
ANR	5198092	Identifier	root		5198083	0					
ANR	5198093	Argument	data		5198083	1					
ANR	5198094	Identifier	data		5198083	0					
ANR	5198095	Argument	cmp		5198083	2					
ANR	5198096	Identifier	cmp		5198083	0					
ANR	5198097	Argument	false		5198083	3					
ANR	5198098	Identifier	false		5198083	0					
ANR	5198099	Argument	false		5198083	4					
ANR	5198100	Identifier	false		5198083	0					
ANR	5198101	ReturnType	R_API RBIter		5198083	1					
ANR	5198102	Identifier	r_rbtree_lower_bound_forward		5198083	2					
ANR	5198103	ParameterList	"RBNode * root , void * data , RBComparator cmp"		5198083	3					
ANR	5198104	Parameter	RBNode * root	328:42:6816:6827	5198083	0	True				
ANR	5198105	ParameterType	RBNode *		5198083	0					
ANR	5198106	Identifier	root		5198083	1					
ANR	5198107	Parameter	void * data	328:56:6830:6839	5198083	1	True				
ANR	5198108	ParameterType	void *		5198083	0					
ANR	5198109	Identifier	data		5198083	1					
ANR	5198110	Parameter	RBComparator cmp	328:68:6842:6857	5198083	2	True				
ANR	5198111	ParameterType	RBComparator		5198083	0					
ANR	5198112	Identifier	cmp		5198083	1					
ANR	5198113	CFGEntryNode	ENTRY		5198083		True				
ANR	5198114	CFGExitNode	EXIT		5198083		True				
ANR	5198115	Symbol	data		5198083						
ANR	5198116	Symbol	root		5198083						
ANR	5198117	Symbol	cmp		5198083						
ANR	5198118	Symbol	bound_iter		5198083						
ANR	5198119	Symbol	false		5198083						
ANR	5198120	Function	r_rbtree_upper_bound	332:0:6917:7150							
ANR	5198121	FunctionDef	"r_rbtree_upper_bound (RBNode * x , void * data , RBComparator cmp)"		5198120	0					
ANR	5198122	CompoundStatement		332:76:6993:7150	5198120	0					
ANR	5198123	IdentifierDeclStatement	void * ret = NULL ;	333:1:6996:7012	5198120	0	True				
ANR	5198124	IdentifierDecl	* ret = NULL		5198120	0					
ANR	5198125	IdentifierDeclType	void *		5198120	0					
ANR	5198126	Identifier	ret		5198120	1					
ANR	5198127	AssignmentExpression	* ret = NULL		5198120	2		=			
ANR	5198128	Identifier	NULL		5198120	0					
ANR	5198129	Identifier	NULL		5198120	1					
ANR	5198130	WhileStatement	while ( x )		5198120	1					
ANR	5198131	Condition	x	334:8:7022:7022	5198120	0	True				
ANR	5198132	Identifier	x		5198120	0					
ANR	5198133	CompoundStatement		4:2:35:56	5198120	1					
ANR	5198134	IdentifierDeclStatement	"int d = cmp ( data , x ) ;"	335:2:7029:7050	5198120	0	True				
ANR	5198135	IdentifierDecl	"d = cmp ( data , x )"		5198120	0					
ANR	5198136	IdentifierDeclType	int		5198120	0					
ANR	5198137	Identifier	d		5198120	1					
ANR	5198138	AssignmentExpression	"d = cmp ( data , x )"		5198120	2		=			
ANR	5198139	Identifier	d		5198120	0					
ANR	5198140	CallExpression	"cmp ( data , x )"		5198120	1					
ANR	5198141	Callee	cmp		5198120	0					
ANR	5198142	Identifier	cmp		5198120	0					
ANR	5198143	ArgumentList	data		5198120	1					
ANR	5198144	Argument	data		5198120	0					
ANR	5198145	Identifier	data		5198120	0					
ANR	5198146	Argument	x		5198120	1					
ANR	5198147	Identifier	x		5198120	0					
ANR	5198148	IfStatement	if ( d < 0 )		5198120	1					
ANR	5198149	Condition	d < 0	336:6:7058:7062	5198120	0	True				
ANR	5198150	RelationalExpression	d < 0		5198120	0		<			
ANR	5198151	Identifier	d		5198120	0					
ANR	5198152	PrimaryExpression	0		5198120	1					
ANR	5198153	CompoundStatement		5:13:71:71	5198120	1					
ANR	5198154	ExpressionStatement	ret = x	337:3:7070:7077	5198120	0	True				
ANR	5198155	AssignmentExpression	ret = x		5198120	0		=			
ANR	5198156	Identifier	ret		5198120	0					
ANR	5198157	Identifier	x		5198120	1					
ANR	5198158	ExpressionStatement	x = x -> child [ 0 ]	338:3:7082:7097	5198120	1	True				
ANR	5198159	AssignmentExpression	x = x -> child [ 0 ]		5198120	0		=			
ANR	5198160	Identifier	x		5198120	0					
ANR	5198161	ArrayIndexing	x -> child [ 0 ]		5198120	1					
ANR	5198162	PtrMemberAccess	x -> child		5198120	0					
ANR	5198163	Identifier	x		5198120	0					
ANR	5198164	Identifier	child		5198120	1					
ANR	5198165	PrimaryExpression	0		5198120	1					
ANR	5198166	ElseStatement	else		5198120	0					
ANR	5198167	CompoundStatement		8:9:114:114	5198120	0					
ANR	5198168	ExpressionStatement	x = x -> child [ 1 ]	340:3:7113:7128	5198120	0	True				
ANR	5198169	AssignmentExpression	x = x -> child [ 1 ]		5198120	0		=			
ANR	5198170	Identifier	x		5198120	0					
ANR	5198171	ArrayIndexing	x -> child [ 1 ]		5198120	1					
ANR	5198172	PtrMemberAccess	x -> child		5198120	0					
ANR	5198173	Identifier	x		5198120	0					
ANR	5198174	Identifier	child		5198120	1					
ANR	5198175	PrimaryExpression	1		5198120	1					
ANR	5198176	ReturnStatement	return ret ;	343:1:7138:7148	5198120	2	True				
ANR	5198177	Identifier	ret		5198120	0					
ANR	5198178	ReturnType	R_API RBNode *		5198120	1					
ANR	5198179	Identifier	r_rbtree_upper_bound		5198120	2					
ANR	5198180	ParameterList	"RBNode * x , void * data , RBComparator cmp"		5198120	3					
ANR	5198181	Parameter	RBNode * x	332:35:6952:6960	5198120	0	True				
ANR	5198182	ParameterType	RBNode *		5198120	0					
ANR	5198183	Identifier	x		5198120	1					
ANR	5198184	Parameter	void * data	332:46:6963:6972	5198120	1	True				
ANR	5198185	ParameterType	void *		5198120	0					
ANR	5198186	Identifier	data		5198120	1					
ANR	5198187	Parameter	RBComparator cmp	332:58:6975:6990	5198120	2	True				
ANR	5198188	ParameterType	RBComparator		5198120	0					
ANR	5198189	Identifier	cmp		5198120	1					
ANR	5198190	CFGEntryNode	ENTRY		5198120		True				
ANR	5198191	CFGExitNode	EXIT		5198120		True				
ANR	5198192	Symbol	ret		5198120						
ANR	5198193	Symbol	* x		5198120						
ANR	5198194	Symbol	NULL		5198120						
ANR	5198195	Symbol	* * x		5198120						
ANR	5198196	Symbol	data		5198120						
ANR	5198197	Symbol	d		5198120						
ANR	5198198	Symbol	x -> child		5198120						
ANR	5198199	Symbol	cmp		5198120						
ANR	5198200	Symbol	* x -> child		5198120						
ANR	5198201	Symbol	x		5198120						
ANR	5198202	Function	r_rbtree_upper_bound_backward	346:0:7153:7292							
ANR	5198203	FunctionDef	"r_rbtree_upper_bound_backward (RBNode * root , void * data , RBComparator cmp)"		5198202	0					
ANR	5198204	CompoundStatement		346:87:7240:7292	5198202	0					
ANR	5198205	ReturnStatement	"return bound_iter ( root , data , cmp , true , true ) ;"	347:1:7243:7290	5198202	0	True				
ANR	5198206	CallExpression	"bound_iter ( root , data , cmp , true , true )"		5198202	0					
ANR	5198207	Callee	bound_iter		5198202	0					
ANR	5198208	Identifier	bound_iter		5198202	0					
ANR	5198209	ArgumentList	root		5198202	1					
ANR	5198210	Argument	root		5198202	0					
ANR	5198211	Identifier	root		5198202	0					
ANR	5198212	Argument	data		5198202	1					
ANR	5198213	Identifier	data		5198202	0					
ANR	5198214	Argument	cmp		5198202	2					
ANR	5198215	Identifier	cmp		5198202	0					
ANR	5198216	Argument	true		5198202	3					
ANR	5198217	Identifier	true		5198202	0					
ANR	5198218	Argument	true		5198202	4					
ANR	5198219	Identifier	true		5198202	0					
ANR	5198220	ReturnType	R_API RBIter		5198202	1					
ANR	5198221	Identifier	r_rbtree_upper_bound_backward		5198202	2					
ANR	5198222	ParameterList	"RBNode * root , void * data , RBComparator cmp"		5198202	3					
ANR	5198223	Parameter	RBNode * root	346:43:7196:7207	5198202	0	True				
ANR	5198224	ParameterType	RBNode *		5198202	0					
ANR	5198225	Identifier	root		5198202	1					
ANR	5198226	Parameter	void * data	346:57:7210:7219	5198202	1	True				
ANR	5198227	ParameterType	void *		5198202	0					
ANR	5198228	Identifier	data		5198202	1					
ANR	5198229	Parameter	RBComparator cmp	346:69:7222:7237	5198202	2	True				
ANR	5198230	ParameterType	RBComparator		5198202	0					
ANR	5198231	Identifier	cmp		5198202	1					
ANR	5198232	CFGEntryNode	ENTRY		5198202		True				
ANR	5198233	CFGExitNode	EXIT		5198202		True				
ANR	5198234	Symbol	data		5198202						
ANR	5198235	Symbol	root		5198202						
ANR	5198236	Symbol	cmp		5198202						
ANR	5198237	Symbol	true		5198202						
ANR	5198238	Symbol	bound_iter		5198202						
ANR	5198239	Function	r_rbtree_upper_bound_forward	350:0:7295:7434							
ANR	5198240	FunctionDef	"r_rbtree_upper_bound_forward (RBNode * root , void * data , RBComparator cmp)"		5198239	0					
ANR	5198241	CompoundStatement		350:86:7381:7434	5198239	0					
ANR	5198242	ReturnStatement	"return bound_iter ( root , data , cmp , true , false ) ;"	351:1:7384:7432	5198239	0	True				
ANR	5198243	CallExpression	"bound_iter ( root , data , cmp , true , false )"		5198239	0					
ANR	5198244	Callee	bound_iter		5198239	0					
ANR	5198245	Identifier	bound_iter		5198239	0					
ANR	5198246	ArgumentList	root		5198239	1					
ANR	5198247	Argument	root		5198239	0					
ANR	5198248	Identifier	root		5198239	0					
ANR	5198249	Argument	data		5198239	1					
ANR	5198250	Identifier	data		5198239	0					
ANR	5198251	Argument	cmp		5198239	2					
ANR	5198252	Identifier	cmp		5198239	0					
ANR	5198253	Argument	true		5198239	3					
ANR	5198254	Identifier	true		5198239	0					
ANR	5198255	Argument	false		5198239	4					
ANR	5198256	Identifier	false		5198239	0					
ANR	5198257	ReturnType	R_API RBIter		5198239	1					
ANR	5198258	Identifier	r_rbtree_upper_bound_forward		5198239	2					
ANR	5198259	ParameterList	"RBNode * root , void * data , RBComparator cmp"		5198239	3					
ANR	5198260	Parameter	RBNode * root	350:42:7337:7348	5198239	0	True				
ANR	5198261	ParameterType	RBNode *		5198239	0					
ANR	5198262	Identifier	root		5198239	1					
ANR	5198263	Parameter	void * data	350:56:7351:7360	5198239	1	True				
ANR	5198264	ParameterType	void *		5198239	0					
ANR	5198265	Identifier	data		5198239	1					
ANR	5198266	Parameter	RBComparator cmp	350:68:7363:7378	5198239	2	True				
ANR	5198267	ParameterType	RBComparator		5198239	0					
ANR	5198268	Identifier	cmp		5198239	1					
ANR	5198269	CFGEntryNode	ENTRY		5198239		True				
ANR	5198270	CFGExitNode	EXIT		5198239		True				
ANR	5198271	Symbol	data		5198239						
ANR	5198272	Symbol	root		5198239						
ANR	5198273	Symbol	cmp		5198239						
ANR	5198274	Symbol	bound_iter		5198239						
ANR	5198275	Symbol	true		5198239						
ANR	5198276	Symbol	false		5198239						
ANR	5198277	Function	_first	354:0:7437:7577							
ANR	5198278	FunctionDef	"_first (RBNode * x , int dir)"		5198277	0					
ANR	5198279	CompoundStatement		354:41:7478:7577	5198277	0					
ANR	5198280	IdentifierDeclStatement	RBIter it ;	355:1:7481:7490	5198277	0	True				
ANR	5198281	IdentifierDecl	it		5198277	0					
ANR	5198282	IdentifierDeclType	RBIter		5198277	0					
ANR	5198283	Identifier	it		5198277	1					
ANR	5198284	ExpressionStatement	it . len = 0	356:1:7493:7503	5198277	1	True				
ANR	5198285	AssignmentExpression	it . len = 0		5198277	0		=			
ANR	5198286	MemberAccess	it . len		5198277	0					
ANR	5198287	Identifier	it		5198277	0					
ANR	5198288	Identifier	len		5198277	1					
ANR	5198289	PrimaryExpression	0		5198277	1					
ANR	5198290	ForStatement	for ( ; x ; x = x -> child [ dir ] )		5198277	2					
ANR	5198291	Condition	x	357:8:7513:7513	5198277	0	True				
ANR	5198292	Identifier	x		5198277	0					
ANR	5198293	AssignmentExpression	x = x -> child [ dir ]	357:11:7516:7532	5198277	1	True	=			
ANR	5198294	Identifier	x		5198277	0					
ANR	5198295	ArrayIndexing	x -> child [ dir ]		5198277	1					
ANR	5198296	PtrMemberAccess	x -> child		5198277	0					
ANR	5198297	Identifier	x		5198277	0					
ANR	5198298	Identifier	child		5198277	1					
ANR	5198299	Identifier	dir		5198277	1					
ANR	5198300	CompoundStatement		4:30:56:56	5198277	2					
ANR	5198301	ExpressionStatement	it . path [ it . len ++ ] = x	358:2:7539:7560	5198277	0	True				
ANR	5198302	AssignmentExpression	it . path [ it . len ++ ] = x		5198277	0		=			
ANR	5198303	ArrayIndexing	it . path [ it . len ++ ]		5198277	0					
ANR	5198304	MemberAccess	it . path		5198277	0					
ANR	5198305	Identifier	it		5198277	0					
ANR	5198306	Identifier	path		5198277	1					
ANR	5198307	PostIncDecOperationExpression	it . len ++		5198277	1					
ANR	5198308	MemberAccess	it . len		5198277	0					
ANR	5198309	Identifier	it		5198277	0					
ANR	5198310	Identifier	len		5198277	1					
ANR	5198311	IncDec	++		5198277	1					
ANR	5198312	Identifier	x		5198277	1					
ANR	5198313	ReturnStatement	return it ;	360:1:7566:7575	5198277	3	True				
ANR	5198314	Identifier	it		5198277	0					
ANR	5198315	ReturnType	static RBIter		5198277	1					
ANR	5198316	Identifier	_first		5198277	2					
ANR	5198317	ParameterList	"RBNode * x , int dir"		5198277	3					
ANR	5198318	Parameter	RBNode * x	354:21:7458:7466	5198277	0	True				
ANR	5198319	ParameterType	RBNode *		5198277	0					
ANR	5198320	Identifier	x		5198277	1					
ANR	5198321	Parameter	int dir	354:32:7469:7475	5198277	1	True				
ANR	5198322	ParameterType	int		5198277	0					
ANR	5198323	Identifier	dir		5198277	1					
ANR	5198324	CFGEntryNode	ENTRY		5198277		True				
ANR	5198325	CFGExitNode	EXIT		5198277		True				
ANR	5198326	Symbol	* x		5198277						
ANR	5198327	Symbol	* it		5198277						
ANR	5198328	Symbol	* * x		5198277						
ANR	5198329	Symbol	x -> child		5198277						
ANR	5198330	Symbol	* x -> child		5198277						
ANR	5198331	Symbol	x		5198277						
ANR	5198332	Symbol	* dir		5198277						
ANR	5198333	Symbol	it		5198277						
ANR	5198334	Symbol	it . path		5198277						
ANR	5198335	Symbol	dir		5198277						
ANR	5198336	Symbol	* it . path		5198277						
ANR	5198337	Symbol	it . len		5198277						
ANR	5198338	Function	r_rbtree_first	363:0:7580:7650							
ANR	5198339	FunctionDef	r_rbtree_first (RBNode * tree)		5198338	0					
ANR	5198340	CompoundStatement		363:42:7622:7650	5198338	0					
ANR	5198341	ReturnStatement	"return _first ( tree , 0 ) ;"	364:1:7625:7648	5198338	0	True				
ANR	5198342	CallExpression	"_first ( tree , 0 )"		5198338	0					
ANR	5198343	Callee	_first		5198338	0					
ANR	5198344	Identifier	_first		5198338	0					
ANR	5198345	ArgumentList	tree		5198338	1					
ANR	5198346	Argument	tree		5198338	0					
ANR	5198347	Identifier	tree		5198338	0					
ANR	5198348	Argument	0		5198338	1					
ANR	5198349	PrimaryExpression	0		5198338	0					
ANR	5198350	ReturnType	R_API RBIter		5198338	1					
ANR	5198351	Identifier	r_rbtree_first		5198338	2					
ANR	5198352	ParameterList	RBNode * tree		5198338	3					
ANR	5198353	Parameter	RBNode * tree	363:28:7608:7619	5198338	0	True				
ANR	5198354	ParameterType	RBNode *		5198338	0					
ANR	5198355	Identifier	tree		5198338	1					
ANR	5198356	CFGEntryNode	ENTRY		5198338		True				
ANR	5198357	CFGExitNode	EXIT		5198338		True				
ANR	5198358	Symbol	tree		5198338						
ANR	5198359	Symbol	_first		5198338						
ANR	5198360	Function	r_rbtree_last	367:0:7653:7722							
ANR	5198361	FunctionDef	r_rbtree_last (RBNode * tree)		5198360	0					
ANR	5198362	CompoundStatement		367:41:7694:7722	5198360	0					
ANR	5198363	ReturnStatement	"return _first ( tree , 1 ) ;"	368:1:7697:7720	5198360	0	True				
ANR	5198364	CallExpression	"_first ( tree , 1 )"		5198360	0					
ANR	5198365	Callee	_first		5198360	0					
ANR	5198366	Identifier	_first		5198360	0					
ANR	5198367	ArgumentList	tree		5198360	1					
ANR	5198368	Argument	tree		5198360	0					
ANR	5198369	Identifier	tree		5198360	0					
ANR	5198370	Argument	1		5198360	1					
ANR	5198371	PrimaryExpression	1		5198360	0					
ANR	5198372	ReturnType	R_API RBIter		5198360	1					
ANR	5198373	Identifier	r_rbtree_last		5198360	2					
ANR	5198374	ParameterList	RBNode * tree		5198360	3					
ANR	5198375	Parameter	RBNode * tree	367:27:7680:7691	5198360	0	True				
ANR	5198376	ParameterType	RBNode *		5198360	0					
ANR	5198377	Identifier	tree		5198360	1					
ANR	5198378	CFGEntryNode	ENTRY		5198360		True				
ANR	5198379	CFGExitNode	EXIT		5198360		True				
ANR	5198380	Symbol	tree		5198360						
ANR	5198381	Symbol	_first		5198360						
ANR	5198382	Function	_next	371:0:7725:7887							
ANR	5198383	FunctionDef	"_next (RBIter * it , int dir)"		5198382	0					
ANR	5198384	CompoundStatement		371:46:7771:7887	5198382	0					
ANR	5198385	IdentifierDeclStatement	RBNode * x = it -> path [ -- it -> len ] ;	372:1:7774:7805	5198382	0	True				
ANR	5198386	IdentifierDecl	* x = it -> path [ -- it -> len ]		5198382	0					
ANR	5198387	IdentifierDeclType	RBNode *		5198382	0					
ANR	5198388	Identifier	x		5198382	1					
ANR	5198389	AssignmentExpression	* x = it -> path [ -- it -> len ]		5198382	2		=			
ANR	5198390	Identifier	x		5198382	0					
ANR	5198391	ArrayIndexing	it -> path [ -- it -> len ]		5198382	1					
ANR	5198392	PtrMemberAccess	it -> path		5198382	0					
ANR	5198393	Identifier	it		5198382	0					
ANR	5198394	Identifier	path		5198382	1					
ANR	5198395	UnaryExpression	-- it -> len		5198382	1					
ANR	5198396	IncDec	--		5198382	0					
ANR	5198397	PtrMemberAccess	it -> len		5198382	1					
ANR	5198398	Identifier	it		5198382	0					
ANR	5198399	Identifier	len		5198382	1					
ANR	5198400	ForStatement	for ( x = x -> child [ ! dir ] ; x ; x = x -> child [ dir ] )		5198382	1					
ANR	5198401	ForInit	x = x -> child [ ! dir ] ;	373:6:7813:7831	5198382	0	True				
ANR	5198402	AssignmentExpression	x = x -> child [ ! dir ]		5198382	0		=			
ANR	5198403	Identifier	x		5198382	0					
ANR	5198404	ArrayIndexing	x -> child [ ! dir ]		5198382	1					
ANR	5198405	PtrMemberAccess	x -> child		5198382	0					
ANR	5198406	Identifier	x		5198382	0					
ANR	5198407	Identifier	child		5198382	1					
ANR	5198408	UnaryOperationExpression	! dir		5198382	1					
ANR	5198409	UnaryOperator	!		5198382	0					
ANR	5198410	Identifier	dir		5198382	1					
ANR	5198411	Condition	x	373:26:7833:7833	5198382	1	True				
ANR	5198412	Identifier	x		5198382	0					
ANR	5198413	AssignmentExpression	x = x -> child [ dir ]	373:29:7836:7852	5198382	2	True	=			
ANR	5198414	Identifier	x		5198382	0					
ANR	5198415	ArrayIndexing	x -> child [ dir ]		5198382	1					
ANR	5198416	PtrMemberAccess	x -> child		5198382	0					
ANR	5198417	Identifier	x		5198382	0					
ANR	5198418	Identifier	child		5198382	1					
ANR	5198419	Identifier	dir		5198382	1					
ANR	5198420	CompoundStatement		3:48:83:83	5198382	3					
ANR	5198421	ExpressionStatement	it -> path [ it -> len ++ ] = x	374:2:7859:7882	5198382	0	True				
ANR	5198422	AssignmentExpression	it -> path [ it -> len ++ ] = x		5198382	0		=			
ANR	5198423	ArrayIndexing	it -> path [ it -> len ++ ]		5198382	0					
ANR	5198424	PtrMemberAccess	it -> path		5198382	0					
ANR	5198425	Identifier	it		5198382	0					
ANR	5198426	Identifier	path		5198382	1					
ANR	5198427	PostIncDecOperationExpression	it -> len ++		5198382	1					
ANR	5198428	PtrMemberAccess	it -> len		5198382	0					
ANR	5198429	Identifier	it		5198382	0					
ANR	5198430	Identifier	len		5198382	1					
ANR	5198431	IncDec	++		5198382	1					
ANR	5198432	Identifier	x		5198382	1					
ANR	5198433	ReturnType	static inline void		5198382	1					
ANR	5198434	Identifier	_next		5198382	2					
ANR	5198435	ParameterList	"RBIter * it , int dir"		5198382	3					
ANR	5198436	Parameter	RBIter * it	371:25:7750:7759	5198382	0	True				
ANR	5198437	ParameterType	RBIter *		5198382	0					
ANR	5198438	Identifier	it		5198382	1					
ANR	5198439	Parameter	int dir	371:37:7762:7768	5198382	1	True				
ANR	5198440	ParameterType	int		5198382	0					
ANR	5198441	Identifier	dir		5198382	1					
ANR	5198442	CFGEntryNode	ENTRY		5198382		True				
ANR	5198443	CFGExitNode	EXIT		5198382		True				
ANR	5198444	Symbol	* x		5198382						
ANR	5198445	Symbol	x -> child		5198382						
ANR	5198446	Symbol	* x -> child		5198382						
ANR	5198447	Symbol	* dir		5198382						
ANR	5198448	Symbol	it		5198382						
ANR	5198449	Symbol	* it -> path		5198382						
ANR	5198450	Symbol	dir		5198382						
ANR	5198451	Symbol	* it		5198382						
ANR	5198452	Symbol	* * x		5198382						
ANR	5198453	Symbol	* * it		5198382						
ANR	5198454	Symbol	x		5198382						
ANR	5198455	Symbol	it -> path		5198382						
ANR	5198456	Symbol	* it -> len		5198382						
ANR	5198457	Symbol	it -> len		5198382						
ANR	5198458	Function	r_rbtree_iter_next	378:0:7890:7950							
ANR	5198459	FunctionDef	r_rbtree_iter_next (RBIter * it)		5198458	0					
ANR	5198460	CompoundStatement		378:42:7932:7950	5198458	0					
ANR	5198461	ExpressionStatement	"_next ( it , 0 )"	379:1:7935:7948	5198458	0	True				
ANR	5198462	CallExpression	"_next ( it , 0 )"		5198458	0					
ANR	5198463	Callee	_next		5198458	0					
ANR	5198464	Identifier	_next		5198458	0					
ANR	5198465	ArgumentList	it		5198458	1					
ANR	5198466	Argument	it		5198458	0					
ANR	5198467	Identifier	it		5198458	0					
ANR	5198468	Argument	0		5198458	1					
ANR	5198469	PrimaryExpression	0		5198458	0					
ANR	5198470	ReturnType	R_API void		5198458	1					
ANR	5198471	Identifier	r_rbtree_iter_next		5198458	2					
ANR	5198472	ParameterList	RBIter * it		5198458	3					
ANR	5198473	Parameter	RBIter * it	378:30:7920:7929	5198458	0	True				
ANR	5198474	ParameterType	RBIter *		5198458	0					
ANR	5198475	Identifier	it		5198458	1					
ANR	5198476	CFGEntryNode	ENTRY		5198458		True				
ANR	5198477	CFGExitNode	EXIT		5198458		True				
ANR	5198478	Symbol	it		5198458						
ANR	5198479	Function	r_rbtree_iter_prev	382:0:7953:8013							
ANR	5198480	FunctionDef	r_rbtree_iter_prev (RBIter * it)		5198479	0					
ANR	5198481	CompoundStatement		382:42:7995:8013	5198479	0					
ANR	5198482	ExpressionStatement	"_next ( it , 1 )"	383:1:7998:8011	5198479	0	True				
ANR	5198483	CallExpression	"_next ( it , 1 )"		5198479	0					
ANR	5198484	Callee	_next		5198479	0					
ANR	5198485	Identifier	_next		5198479	0					
ANR	5198486	ArgumentList	it		5198479	1					
ANR	5198487	Argument	it		5198479	0					
ANR	5198488	Identifier	it		5198479	0					
ANR	5198489	Argument	1		5198479	1					
ANR	5198490	PrimaryExpression	1		5198479	0					
ANR	5198491	ReturnType	R_API void		5198479	1					
ANR	5198492	Identifier	r_rbtree_iter_prev		5198479	2					
ANR	5198493	ParameterList	RBIter * it		5198479	3					
ANR	5198494	Parameter	RBIter * it	382:30:7983:7992	5198479	0	True				
ANR	5198495	ParameterType	RBIter *		5198479	0					
ANR	5198496	Identifier	it		5198479	1					
ANR	5198497	CFGEntryNode	ENTRY		5198479		True				
ANR	5198498	CFGExitNode	EXIT		5198479		True				
ANR	5198499	Symbol	it		5198479						
