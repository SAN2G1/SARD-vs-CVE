command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2725858	File	data/converged/CVE-2019-16718~_radare2/libr_asm_arch_hexagon_gnu_hexagon-opc.c								
ANR	2725859	ClassDef	<unnamed>	36:0:1171:3116							
ANR	2725860	DeclStmt									
ANR	2725861	Decl							long	"long ( long * , unsigned , int ATTRIBUTE_UNUSED )"	hexagon_extend
ANR	2725862	DeclStmt									
ANR	2725863	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg
ANR	2725864	DeclStmt									
ANR	2725865	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg
ANR	2725866	DeclStmt									
ANR	2725867	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg16
ANR	2725868	DeclStmt									
ANR	2725869	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg16
ANR	2725870	DeclStmt									
ANR	2725871	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_reg8
ANR	2725872	DeclStmt									
ANR	2725873	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dreg8
ANR	2725874	DeclStmt									
ANR	2725875	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_nreg
ANR	2725876	DeclStmt									
ANR	2725877	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_preg
ANR	2725878	DeclStmt									
ANR	2725879	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_creg
ANR	2725880	DeclStmt									
ANR	2725881	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dcreg
ANR	2725882	DeclStmt									
ANR	2725883	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_greg
ANR	2725884	DeclStmt									
ANR	2725885	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dgreg
ANR	2725886	DeclStmt									
ANR	2725887	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_sreg
ANR	2725888	DeclStmt									
ANR	2725889	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_dsreg
ANR	2725890	DeclStmt									
ANR	2725891	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_mreg
ANR	2725892	DeclStmt									
ANR	2725893	Decl							char	"char * ( const hexagon_operand * , hexagon_insn * , const hexagon_opcode * , char * , long * , int * , char * * )"	hexagon_parse_splr
ANR	2725894	DeclStmt									
ANR	2725895	Decl							int	int	hexagon_verify_hw
ANR	2725896	DeclStmt									
ANR	2725897	Decl							hexagon_insn	hexagon_insn	hexagon_nop
ANR	2725898	Decl							hexagon_insn	hexagon_insn	hexagon_kext
ANR	2725899	DeclStmt									
ANR	2725900	Decl							hexagon_insn	hexagon_insn	hexagon_nop_mask
ANR	2725901	Decl							hexagon_insn	hexagon_insn	hexagon_kext_mask
ANR	2725902	DeclStmt									
ANR	2725903	Decl							const hexagon_operand	const hexagon_operand [ ]	hexagon_operands
ANR	2725904	DeclStmt									
ANR	2725905	Decl							const size_t	const size_t	hexagon_operand_count
ANR	2725906	DeclStmt									
ANR	2725907	Decl							hexagon_opcode	hexagon_opcode *	hexagon_opcodes
ANR	2725908	DeclStmt									
ANR	2725909	Decl							size_t	size_t	hexagon_opcodes_count
ANR	2725910	DeclStmt									
ANR	2725911	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v2
ANR	2725912	DeclStmt									
ANR	2725913	Decl							const size_t	const size_t	hexagon_opcodes_count_v2
ANR	2725914	DeclStmt									
ANR	2725915	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v3
ANR	2725916	DeclStmt									
ANR	2725917	Decl							const size_t	const size_t	hexagon_opcodes_count_v3
ANR	2725918	DeclStmt									
ANR	2725919	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v4
ANR	2725920	DeclStmt									
ANR	2725921	Decl							const size_t	const size_t	hexagon_opcodes_count_v4
ANR	2725922	DeclStmt									
ANR	2725923	Decl							hexagon_opcode	hexagon_opcode [ ]	hexagon_opcodes_v5
ANR	2725924	DeclStmt									
ANR	2725925	Decl							const size_t	const size_t	hexagon_opcodes_count_v5
ANR	2725926	DeclStmt									
ANR	2725927	Decl							hexagon_opcode	hexagon_opcode * [ HEXAGON_HASH_SIZE ]	opcode_map
ANR	2725928	DeclStmt									
ANR	2725929	Decl							size_t	size_t	hexagon_icode_hash_bits
ANR	2725930	DeclStmt									
ANR	2725931	Decl							hexagon_opcode	hexagon_opcode * *	icode_map
ANR	2725932	DeclStmt									
ANR	2725933	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_gp_regs
ANR	2725934	DeclStmt									
ANR	2725935	Decl							const size_t	const size_t	hexagon_gp_regs_count
ANR	2725936	DeclStmt									
ANR	2725937	Decl							hexagon_reg	hexagon_reg [ ]	hexagon_supervisor_regs
ANR	2725938	DeclStmt									
ANR	2725939	Decl							const size_t	const size_t	hexagon_supervisor_regs_count
ANR	2725940	DeclStmt									
ANR	2725941	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_control_regs
ANR	2725942	DeclStmt									
ANR	2725943	Decl							const size_t	const size_t	hexagon_control_regs_count
ANR	2725944	DeclStmt									
ANR	2725945	Decl							const hexagon_reg	const hexagon_reg [ ]	hexagon_guest_regs
ANR	2725946	DeclStmt									
ANR	2725947	Decl							const size_t	const size_t	hexagon_guest_regs_count
ANR	2725948	Function	hexagon_extend	1150:0:50270:50755							
ANR	2725949	FunctionDef	"hexagon_extend (long * value , unsigned bits , int is_signed ATTRIBUTE_UNUSED)"		2725948	0					
ANR	2725950	CompoundStatement		1153:0:50351:50755	2725948	0					
ANR	2725951	IdentifierDeclStatement	long xvalue = 0 ;	1154:2:50355:50370	2725948	0	True				
ANR	2725952	IdentifierDecl	xvalue = 0		2725948	0					
ANR	2725953	IdentifierDeclType	long		2725948	0					
ANR	2725954	Identifier	xvalue		2725948	1					
ANR	2725955	AssignmentExpression	xvalue = 0		2725948	2		=			
ANR	2725956	Identifier	xvalue		2725948	0					
ANR	2725957	PrimaryExpression	0		2725948	1					
ANR	2725958	IfStatement	if ( bits < 6 )		2725948	1					
ANR	2725959	Condition	bits < 6	1156:6:50379:50386	2725948	0	True				
ANR	2725960	RelationalExpression	bits < 6		2725948	0		<			
ANR	2725961	Identifier	bits		2725948	0					
ANR	2725962	PrimaryExpression	6		2725948	1					
ANR	2725963	ReturnStatement	return ( 0 ) ;	1157:4:50393:50403	2725948	1	True				
ANR	2725964	PrimaryExpression	0		2725948	0					
ANR	2725965	IfStatement	if ( hexagon_if_arch_kext ( ) )		2725948	2					
ANR	2725966	Condition	hexagon_if_arch_kext ( )	1159:6:50412:50434	2725948	0	True				
ANR	2725967	CallExpression	hexagon_if_arch_kext ( )		2725948	0					
ANR	2725968	Callee	hexagon_if_arch_kext		2725948	0					
ANR	2725969	Identifier	hexagon_if_arch_kext		2725948	0					
ANR	2725970	ArgumentList			2725948	1					
ANR	2725971	CompoundStatement		8:4:89:89	2725948	1					
ANR	2725972	ExpressionStatement	xvalue = * value & ( ( ~0UL >> 6 ) << 6 )	1162:6:50542:50579	2725948	0	True				
ANR	2725973	AssignmentExpression	xvalue = * value & ( ( ~0UL >> 6 ) << 6 )		2725948	0		=			
ANR	2725974	Identifier	xvalue		2725948	0					
ANR	2725975	BitAndExpression	* value & ( ( ~0UL >> 6 ) << 6 )		2725948	1		&			
ANR	2725976	UnaryOperationExpression	* value		2725948	0					
ANR	2725977	UnaryOperator	*		2725948	0					
ANR	2725978	Identifier	value		2725948	1					
ANR	2725979	ShiftExpression	( ~0UL >> 6 ) << 6		2725948	1		<<			
ANR	2725980	ShiftExpression	~0UL >> 6		2725948	0		>>			
ANR	2725981	Identifier	~0UL		2725948	0					
ANR	2725982	PrimaryExpression	6		2725948	1					
ANR	2725983	PrimaryExpression	6		2725948	1					
ANR	2725984	ExpressionStatement	* value = * value & ~ ( ( ~0UL >> 6 ) << 6 )	1163:6:50587:50624	2725948	1	True				
ANR	2725985	AssignmentExpression	* value = * value & ~ ( ( ~0UL >> 6 ) << 6 )		2725948	0		=			
ANR	2725986	UnaryOperationExpression	* value		2725948	0					
ANR	2725987	UnaryOperator	*		2725948	0					
ANR	2725988	Identifier	value		2725948	1					
ANR	2725989	BitAndExpression	* value & ~ ( ( ~0UL >> 6 ) << 6 )		2725948	1		&			
ANR	2725990	UnaryOperationExpression	* value		2725948	0					
ANR	2725991	UnaryOperator	*		2725948	0					
ANR	2725992	Identifier	value		2725948	1					
ANR	2725993	UnaryOperationExpression	~ ( ( ~0UL >> 6 ) << 6 )		2725948	1					
ANR	2725994	UnaryOperator	~		2725948	0					
ANR	2725995	ShiftExpression	( ~0UL >> 6 ) << 6		2725948	1		<<			
ANR	2725996	ShiftExpression	~0UL >> 6		2725948	0		>>			
ANR	2725997	Identifier	~0UL		2725948	0					
ANR	2725998	PrimaryExpression	6		2725948	1					
ANR	2725999	PrimaryExpression	6		2725948	1					
ANR	2726000	ReturnStatement	return ( xvalue ) ;	1171:2:50738:50753	2725948	3	True				
ANR	2726001	Identifier	xvalue		2725948	0					
ANR	2726002	ReturnType	long		2725948	1					
ANR	2726003	Identifier	hexagon_extend		2725948	2					
ANR	2726004	ParameterList	"long * value , unsigned bits , int is_signed ATTRIBUTE_UNUSED"		2725948	3					
ANR	2726005	Parameter	long * value	1152:1:50291:50301	2725948	0	True				
ANR	2726006	ParameterType	long *		2725948	0					
ANR	2726007	Identifier	value		2725948	1					
ANR	2726008	Parameter	unsigned bits	1152:14:50304:50316	2725948	1	True				
ANR	2726009	ParameterType	unsigned		2725948	0					
ANR	2726010	Identifier	bits		2725948	1					
ANR	2726011	Parameter	int is_signed ATTRIBUTE_UNUSED	1152:29:50319:50348	2725948	2	True				
ANR	2726012	ParameterType	int is_signed		2725948	0					
ANR	2726013	Identifier	ATTRIBUTE_UNUSED		2725948	1					
ANR	2726014	CFGEntryNode	ENTRY		2725948		True				
ANR	2726015	CFGExitNode	EXIT		2725948		True				
ANR	2726016	Symbol	ATTRIBUTE_UNUSED		2725948						
ANR	2726017	Symbol	~0UL		2725948						
ANR	2726018	Symbol	* value		2725948						
ANR	2726019	Symbol	bits		2725948						
ANR	2726020	Symbol	hexagon_if_arch_kext		2725948						
ANR	2726021	Symbol	xvalue		2725948						
ANR	2726022	Symbol	value		2725948						
ANR	2726023	Function	hexagon_hash_opcode	1183:0:51061:54239							
ANR	2726024	FunctionDef	hexagon_hash_opcode (const char * syntax)		2726023	0					
ANR	2726025	CompoundStatement		1186:0:51115:54239	2726023	0					
ANR	2726026	IdentifierDeclStatement	"const char * p1 , * p2 , * pair , * peq ;"	1187:2:51119:51151	2726023	0	True				
ANR	2726027	IdentifierDecl	* p1		2726023	0					
ANR	2726028	IdentifierDeclType	const char *		2726023	0					
ANR	2726029	Identifier	p1		2726023	1					
ANR	2726030	IdentifierDecl	* p2		2726023	1					
ANR	2726031	IdentifierDeclType	const char *		2726023	0					
ANR	2726032	Identifier	p2		2726023	1					
ANR	2726033	IdentifierDecl	* pair		2726023	2					
ANR	2726034	IdentifierDeclType	const char *		2726023	0					
ANR	2726035	Identifier	pair		2726023	1					
ANR	2726036	IdentifierDecl	* peq		2726023	3					
ANR	2726037	IdentifierDeclType	const char *		2726023	0					
ANR	2726038	Identifier	peq		2726023	1					
ANR	2726039	IdentifierDeclStatement	size_t token ;	1188:2:51155:51167	2726023	1	True				
ANR	2726040	IdentifierDecl	token		2726023	0					
ANR	2726041	IdentifierDeclType	size_t		2726023	0					
ANR	2726042	Identifier	token		2726023	1					
ANR	2726043	IdentifierDeclStatement	int is_if ;	1189:2:51171:51180	2726023	2	True				
ANR	2726044	IdentifierDecl	is_if		2726023	0					
ANR	2726045	IdentifierDeclType	int		2726023	0					
ANR	2726046	Identifier	is_if		2726023	1					
ANR	2726047	IdentifierDeclStatement	char ch ;	1190:2:51184:51191	2726023	3	True				
ANR	2726048	IdentifierDecl	ch		2726023	0					
ANR	2726049	IdentifierDeclType	char		2726023	0					
ANR	2726050	Identifier	ch		2726023	1					
ANR	2726051	IfStatement	"if ( ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" ) )"		2726023	4					
ANR	2726052	Condition	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"	1192:6:51200:51299	2726023	0	True				
ANR	2726053	OrExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" ) || ! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		2726023	0		||			
ANR	2726054	UnaryOperationExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" )"		2726023	0					
ANR	2726055	UnaryOperator	!		2726023	0					
ANR	2726056	CallExpression	"strcmp ( syntax , ""Rd8 = #s6 ; Re8 = #S6"" )"		2726023	1					
ANR	2726057	Callee	strcmp		2726023	0					
ANR	2726058	Identifier	strcmp		2726023	0					
ANR	2726059	ArgumentList	syntax		2726023	1					
ANR	2726060	Argument	syntax		2726023	0					
ANR	2726061	Identifier	syntax		2726023	0					
ANR	2726062	Argument	"""Rd8 = #s6 ; Re8 = #S6"""		2726023	1					
ANR	2726063	PrimaryExpression	"""Rd8 = #s6 ; Re8 = #S6"""		2726023	0					
ANR	2726064	UnaryOperationExpression	"! strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		2726023	1					
ANR	2726065	UnaryOperator	!		2726023	0					
ANR	2726066	CallExpression	"strcmp ( syntax , ""Rd8 = #s6 ; Re8 = aslh (Rs8 )"" )"		2726023	1					
ANR	2726067	Callee	strcmp		2726023	0					
ANR	2726068	Identifier	strcmp		2726023	0					
ANR	2726069	ArgumentList	syntax		2726023	1					
ANR	2726070	Argument	syntax		2726023	0					
ANR	2726071	Identifier	syntax		2726023	0					
ANR	2726072	Argument	"""Rd8 = #s6 ; Re8 = aslh (Rs8 )"""		2726023	1					
ANR	2726073	PrimaryExpression	"""Rd8 = #s6 ; Re8 = aslh (Rs8 )"""		2726023	0					
ANR	2726074	CompoundStatement		9:4:190:190	2726023	1					
ANR	2726075	ExpressionStatement	p1 = NULL	1195:6:51314:51323	2726023	0	True				
ANR	2726076	AssignmentExpression	p1 = NULL		2726023	0		=			
ANR	2726077	Identifier	p1		2726023	0					
ANR	2726078	Identifier	NULL		2726023	1					
ANR	2726079	ExpressionStatement	p2 = p1	1196:6:51331:51338	2726023	1	True				
ANR	2726080	AssignmentExpression	p2 = p1		2726023	0		=			
ANR	2726081	Identifier	p2		2726023	0					
ANR	2726082	Identifier	p1		2726023	1					
ANR	2726083	ExpressionStatement	"pair = strchr ( syntax , PACKET_PAIR )"	1199:2:51349:51384	2726023	5	True				
ANR	2726084	AssignmentExpression	"pair = strchr ( syntax , PACKET_PAIR )"		2726023	0		=			
ANR	2726085	Identifier	pair		2726023	0					
ANR	2726086	CallExpression	"strchr ( syntax , PACKET_PAIR )"		2726023	1					
ANR	2726087	Callee	strchr		2726023	0					
ANR	2726088	Identifier	strchr		2726023	0					
ANR	2726089	ArgumentList	syntax		2726023	1					
ANR	2726090	Argument	syntax		2726023	0					
ANR	2726091	Identifier	syntax		2726023	0					
ANR	2726092	Argument	PACKET_PAIR		2726023	1					
ANR	2726093	Identifier	PACKET_PAIR		2726023	0					
ANR	2726094	ExpressionStatement	"peq = strchr ( syntax , '=' )"	1200:2:51388:51415	2726023	6	True				
ANR	2726095	AssignmentExpression	"peq = strchr ( syntax , '=' )"		2726023	0		=			
ANR	2726096	Identifier	peq		2726023	0					
ANR	2726097	CallExpression	"strchr ( syntax , '=' )"		2726023	1					
ANR	2726098	Callee	strchr		2726023	0					
ANR	2726099	Identifier	strchr		2726023	0					
ANR	2726100	ArgumentList	syntax		2726023	1					
ANR	2726101	Argument	syntax		2726023	0					
ANR	2726102	Identifier	syntax		2726023	0					
ANR	2726103	Argument	'='		2726023	1					
ANR	2726104	PrimaryExpression	'='		2726023	0					
ANR	2726105	ExpressionStatement	"token = strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"	1202:2:51420:51485	2726023	7	True				
ANR	2726106	AssignmentExpression	"token = strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"		2726023	0		=			
ANR	2726107	Identifier	token		2726023	0					
ANR	2726108	CallExpression	"strcspn ( syntax , "" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"" )"		2726023	1					
ANR	2726109	Callee	strcspn		2726023	0					
ANR	2726110	Identifier	strcspn		2726023	0					
ANR	2726111	ArgumentList	syntax		2726023	1					
ANR	2726112	Argument	syntax		2726023	0					
ANR	2726113	Identifier	syntax		2726023	0					
ANR	2726114	Argument	""" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"""		2726023	1					
ANR	2726115	PrimaryExpression	""" \\t`~!@#$%^&*()_-=+[{]}\\\\|;:'\\"",<.>/?"""		2726023	0					
ANR	2726116	ExpressionStatement	"is_if = ! strncmp ( syntax , ""if"" , token )"	1203:2:51510:51548	2726023	8	True				
ANR	2726117	AssignmentExpression	"is_if = ! strncmp ( syntax , ""if"" , token )"		2726023	0		=			
ANR	2726118	Identifier	is_if		2726023	0					
ANR	2726119	UnaryOperationExpression	"! strncmp ( syntax , ""if"" , token )"		2726023	1					
ANR	2726120	UnaryOperator	!		2726023	0					
ANR	2726121	CallExpression	"strncmp ( syntax , ""if"" , token )"		2726023	1					
ANR	2726122	Callee	strncmp		2726023	0					
ANR	2726123	Identifier	strncmp		2726023	0					
ANR	2726124	ArgumentList	syntax		2726023	1					
ANR	2726125	Argument	syntax		2726023	0					
ANR	2726126	Identifier	syntax		2726023	0					
ANR	2726127	Argument	"""if"""		2726023	1					
ANR	2726128	PrimaryExpression	"""if"""		2726023	0					
ANR	2726129	Argument	token		2726023	2					
ANR	2726130	Identifier	token		2726023	0					
ANR	2726131	IfStatement	"if ( ( p1 = strncmp ( syntax , ""mem"" , 3 ) ) )"		2726023	9					
ANR	2726132	Condition	"p1 = strncmp ( syntax , ""mem"" , 3 )"	1206:6:51563:51595	2726023	0	True				
ANR	2726133	AssignmentExpression	"p1 = strncmp ( syntax , ""mem"" , 3 )"		2726023	0		=			
ANR	2726134	Identifier	p1		2726023	0					
ANR	2726135	CallExpression	"strncmp ( syntax , ""mem"" , 3 )"		2726023	1					
ANR	2726136	Callee	strncmp		2726023	0					
ANR	2726137	Identifier	strncmp		2726023	0					
ANR	2726138	ArgumentList	syntax		2726023	1					
ANR	2726139	Argument	syntax		2726023	0					
ANR	2726140	Identifier	syntax		2726023	0					
ANR	2726141	Argument	"""mem"""		2726023	1					
ANR	2726142	PrimaryExpression	"""mem"""		2726023	0					
ANR	2726143	Argument	3		2726023	2					
ANR	2726144	PrimaryExpression	3		2726023	0					
ANR	2726145	CompoundStatement		22:4:486:486	2726023	1					
ANR	2726146	IfStatement	if ( peq )		2726023	0					
ANR	2726147	Condition	peq	1209:10:51644:51646	2726023	0	True				
ANR	2726148	Identifier	peq		2726023	0					
ANR	2726149	ReturnStatement	return ( pif ? ( pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B ) : HEXAGON_HASH_C ) ;	1211:8:51709:51777	2726023	1	True				
ANR	2726150	ConditionalExpression	pif ? ( pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B ) : HEXAGON_HASH_C		2726023	0					
ANR	2726151	Condition	pif		2726023	0					
ANR	2726152	Identifier	pif		2726023	0					
ANR	2726153	ConditionalExpression	pnew ? HEXAGON_HASH_A : HEXAGON_HASH_B		2726023	1					
ANR	2726154	Condition	pnew		2726023	0					
ANR	2726155	Identifier	pnew		2726023	0					
ANR	2726156	Identifier	HEXAGON_HASH_A		2726023	1					
ANR	2726157	Identifier	HEXAGON_HASH_B		2726023	2					
ANR	2726158	Identifier	HEXAGON_HASH_C		2726023	2					
ANR	2726159	ElseStatement	else		2726023	0					
ANR	2726160	ReturnStatement	return ( pif ? ( pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E ) : HEXAGON_HASH_F ) ;	1214:8:51849:51917	2726023	0	True				
ANR	2726161	ConditionalExpression	pif ? ( pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E ) : HEXAGON_HASH_F		2726023	0					
ANR	2726162	Condition	pif		2726023	0					
ANR	2726163	Identifier	pif		2726023	0					
ANR	2726164	ConditionalExpression	pnew ? HEXAGON_HASH_D : HEXAGON_HASH_E		2726023	1					
ANR	2726165	Condition	pnew		2726023	0					
ANR	2726166	Identifier	pnew		2726023	0					
ANR	2726167	Identifier	HEXAGON_HASH_D		2726023	1					
ANR	2726168	Identifier	HEXAGON_HASH_E		2726023	2					
ANR	2726169	Identifier	HEXAGON_HASH_F		2726023	2					
ANR	2726170	IfStatement	if ( pair )		2726023	10					
ANR	2726171	Condition	pair	1218:6:51939:51942	2726023	0	True				
ANR	2726172	Identifier	pair		2726023	0					
ANR	2726173	CompoundStatement		34:4:833:833	2726023	1					
ANR	2726174	ExpressionStatement	p1 = pair + 1	1220:6:51957:51970	2726023	0	True				
ANR	2726175	AssignmentExpression	p1 = pair + 1		2726023	0		=			
ANR	2726176	Identifier	p1		2726023	0					
ANR	2726177	AdditiveExpression	pair + 1		2726023	1		+			
ANR	2726178	Identifier	pair		2726023	0					
ANR	2726179	PrimaryExpression	1		2726023	1					
ANR	2726180	WhileStatement	while ( ISSPACE ( * p1 ) )		2726023	1					
ANR	2726181	Condition	ISSPACE ( * p1 )	1221:13:51985:51997	2726023	0	True				
ANR	2726182	CallExpression	ISSPACE ( * p1 )		2726023	0					
ANR	2726183	Callee	ISSPACE		2726023	0					
ANR	2726184	Identifier	ISSPACE		2726023	0					
ANR	2726185	ArgumentList	* p1		2726023	1					
ANR	2726186	Argument	* p1		2726023	0					
ANR	2726187	UnaryOperationExpression	* p1		2726023	0					
ANR	2726188	UnaryOperator	*		2726023	0					
ANR	2726189	Identifier	p1		2726023	1					
ANR	2726190	ExpressionStatement	p1 ++	1222:8:52008:52012	2726023	1	True				
ANR	2726191	PostIncDecOperationExpression	p1 ++		2726023	0					
ANR	2726192	Identifier	p1		2726023	0					
ANR	2726193	IncDec	++		2726023	1					
ANR	2726194	IfStatement	"if ( ! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) ) )"		2726023	2					
ANR	2726195	Condition	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"	1224:10:52025:52302	2726023	0	True				
ANR	2726196	OrExpression	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		2726023	0		||			
ANR	2726197	UnaryOperationExpression	"! strncmp ( p1 , ""jump"" , 4 )"		2726023	0					
ANR	2726198	UnaryOperator	!		2726023	0					
ANR	2726199	CallExpression	"strncmp ( p1 , ""jump"" , 4 )"		2726023	1					
ANR	2726200	Callee	strncmp		2726023	0					
ANR	2726201	Identifier	strncmp		2726023	0					
ANR	2726202	ArgumentList	p1		2726023	1					
ANR	2726203	Argument	p1		2726023	0					
ANR	2726204	Identifier	p1		2726023	0					
ANR	2726205	Argument	"""jump"""		2726023	1					
ANR	2726206	PrimaryExpression	"""jump"""		2726023	0					
ANR	2726207	Argument	4		2726023	2					
ANR	2726208	PrimaryExpression	4		2726023	0					
ANR	2726209	OrExpression	"! strncmp ( syntax , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		2726023	1		||			
ANR	2726210	UnaryOperationExpression	"! strncmp ( syntax , ""jump"" , 4 )"		2726023	0					
ANR	2726211	UnaryOperator	!		2726023	0					
ANR	2726212	CallExpression	"strncmp ( syntax , ""jump"" , 4 )"		2726023	1					
ANR	2726213	Callee	strncmp		2726023	0					
ANR	2726214	Identifier	strncmp		2726023	0					
ANR	2726215	ArgumentList	syntax		2726023	1					
ANR	2726216	Argument	syntax		2726023	0					
ANR	2726217	Identifier	syntax		2726023	0					
ANR	2726218	Argument	"""jump"""		2726023	1					
ANR	2726219	PrimaryExpression	"""jump"""		2726023	0					
ANR	2726220	Argument	4		2726023	2					
ANR	2726221	PrimaryExpression	4		2726023	0					
ANR	2726222	OrExpression	"! strncmp ( p1 , ""call"" , 4 ) || ! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		2726023	1		||			
ANR	2726223	UnaryOperationExpression	"! strncmp ( p1 , ""call"" , 4 )"		2726023	0					
ANR	2726224	UnaryOperator	!		2726023	0					
ANR	2726225	CallExpression	"strncmp ( p1 , ""call"" , 4 )"		2726023	1					
ANR	2726226	Callee	strncmp		2726023	0					
ANR	2726227	Identifier	strncmp		2726023	0					
ANR	2726228	ArgumentList	p1		2726023	1					
ANR	2726229	Argument	p1		2726023	0					
ANR	2726230	Identifier	p1		2726023	0					
ANR	2726231	Argument	"""call"""		2726023	1					
ANR	2726232	PrimaryExpression	"""call"""		2726023	0					
ANR	2726233	Argument	4		2726023	2					
ANR	2726234	PrimaryExpression	4		2726023	0					
ANR	2726235	OrExpression	"! strncmp ( syntax , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) ) )"		2726023	1		||			
ANR	2726236	UnaryOperationExpression	"! strncmp ( syntax , ""call"" , 4 )"		2726023	0					
ANR	2726237	UnaryOperator	!		2726023	0					
ANR	2726238	CallExpression	"strncmp ( syntax , ""call"" , 4 )"		2726023	1					
ANR	2726239	Callee	strncmp		2726023	0					
ANR	2726240	Identifier	strncmp		2726023	0					
ANR	2726241	ArgumentList	syntax		2726023	1					
ANR	2726242	Argument	syntax		2726023	0					
ANR	2726243	Identifier	syntax		2726023	0					
ANR	2726244	Argument	"""call"""		2726023	1					
ANR	2726245	PrimaryExpression	"""call"""		2726023	0					
ANR	2726246	Argument	4		2726023	2					
ANR	2726247	PrimaryExpression	4		2726023	0					
ANR	2726248	AndExpression	"( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token ) )"		2726023	1		&&			
ANR	2726249	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		2726023	0		||			
ANR	2726250	CallExpression	hexagon_if_arch_v4 ( )		2726023	0					
ANR	2726251	Callee	hexagon_if_arch_v4		2726023	0					
ANR	2726252	Identifier	hexagon_if_arch_v4		2726023	0					
ANR	2726253	ArgumentList			2726023	1					
ANR	2726254	CallExpression	hexagon_if_arch_v5 ( )		2726023	1					
ANR	2726255	Callee	hexagon_if_arch_v5		2726023	0					
ANR	2726256	Identifier	hexagon_if_arch_v5		2726023	0					
ANR	2726257	ArgumentList			2726023	1					
ANR	2726258	OrExpression	"! strncmp ( p1 , ""return"" , token ) || ! strncmp ( syntax , ""return"" , token )"		2726023	1		||			
ANR	2726259	UnaryOperationExpression	"! strncmp ( p1 , ""return"" , token )"		2726023	0					
ANR	2726260	UnaryOperator	!		2726023	0					
ANR	2726261	CallExpression	"strncmp ( p1 , ""return"" , token )"		2726023	1					
ANR	2726262	Callee	strncmp		2726023	0					
ANR	2726263	Identifier	strncmp		2726023	0					
ANR	2726264	ArgumentList	p1		2726023	1					
ANR	2726265	Argument	p1		2726023	0					
ANR	2726266	Identifier	p1		2726023	0					
ANR	2726267	Argument	"""return"""		2726023	1					
ANR	2726268	PrimaryExpression	"""return"""		2726023	0					
ANR	2726269	Argument	token		2726023	2					
ANR	2726270	Identifier	token		2726023	0					
ANR	2726271	UnaryOperationExpression	"! strncmp ( syntax , ""return"" , token )"		2726023	1					
ANR	2726272	UnaryOperator	!		2726023	0					
ANR	2726273	CallExpression	"strncmp ( syntax , ""return"" , token )"		2726023	1					
ANR	2726274	Callee	strncmp		2726023	0					
ANR	2726275	Identifier	strncmp		2726023	0					
ANR	2726276	ArgumentList	syntax		2726023	1					
ANR	2726277	Argument	syntax		2726023	0					
ANR	2726278	Identifier	syntax		2726023	0					
ANR	2726279	Argument	"""return"""		2726023	1					
ANR	2726280	PrimaryExpression	"""return"""		2726023	0					
ANR	2726281	Argument	token		2726023	2					
ANR	2726282	Identifier	token		2726023	0					
ANR	2726283	ReturnStatement	return ( is_if ? HEXAGON_HASH_G : HEXAGON_HASH_H ) ;	1229:8:52368:52414	2726023	1	True				
ANR	2726284	ConditionalExpression	is_if ? HEXAGON_HASH_G : HEXAGON_HASH_H		2726023	0					
ANR	2726285	Condition	is_if		2726023	0					
ANR	2726286	Identifier	is_if		2726023	0					
ANR	2726287	Identifier	HEXAGON_HASH_G		2726023	1					
ANR	2726288	Identifier	HEXAGON_HASH_H		2726023	2					
ANR	2726289	ElseStatement	else		2726023	0					
ANR	2726290	CompoundStatement		47:4:1317:1317	2726023	0					
ANR	2726291	ExpressionStatement	p1 = syntax	1233:6:52441:52452	2726023	0	True				
ANR	2726292	AssignmentExpression	p1 = syntax		2726023	0		=			
ANR	2726293	Identifier	p1		2726023	0					
ANR	2726294	Identifier	syntax		2726023	1					
ANR	2726295	IfStatement	"if ( ! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) ) )"		2726023	1					
ANR	2726296	Condition	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"	1235:10:52465:52640	2726023	0	True				
ANR	2726297	OrExpression	"! strncmp ( p1 , ""jump"" , 4 ) || ! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"		2726023	0		||			
ANR	2726298	UnaryOperationExpression	"! strncmp ( p1 , ""jump"" , 4 )"		2726023	0					
ANR	2726299	UnaryOperator	!		2726023	0					
ANR	2726300	CallExpression	"strncmp ( p1 , ""jump"" , 4 )"		2726023	1					
ANR	2726301	Callee	strncmp		2726023	0					
ANR	2726302	Identifier	strncmp		2726023	0					
ANR	2726303	ArgumentList	p1		2726023	1					
ANR	2726304	Argument	p1		2726023	0					
ANR	2726305	Identifier	p1		2726023	0					
ANR	2726306	Argument	"""jump"""		2726023	1					
ANR	2726307	PrimaryExpression	"""jump"""		2726023	0					
ANR	2726308	Argument	4		2726023	2					
ANR	2726309	PrimaryExpression	4		2726023	0					
ANR	2726310	OrExpression	"! strncmp ( p1 , ""call"" , 4 ) || ( ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) ) )"		2726023	1		||			
ANR	2726311	UnaryOperationExpression	"! strncmp ( p1 , ""call"" , 4 )"		2726023	0					
ANR	2726312	UnaryOperator	!		2726023	0					
ANR	2726313	CallExpression	"strncmp ( p1 , ""call"" , 4 )"		2726023	1					
ANR	2726314	Callee	strncmp		2726023	0					
ANR	2726315	Identifier	strncmp		2726023	0					
ANR	2726316	ArgumentList	p1		2726023	1					
ANR	2726317	Argument	p1		2726023	0					
ANR	2726318	Identifier	p1		2726023	0					
ANR	2726319	Argument	"""call"""		2726023	1					
ANR	2726320	PrimaryExpression	"""call"""		2726023	0					
ANR	2726321	Argument	4		2726023	2					
ANR	2726322	PrimaryExpression	4		2726023	0					
ANR	2726323	AndExpression	"( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) && ( ! strncmp ( p1 , ""return"" , token ) )"		2726023	1		&&			
ANR	2726324	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		2726023	0		||			
ANR	2726325	CallExpression	hexagon_if_arch_v4 ( )		2726023	0					
ANR	2726326	Callee	hexagon_if_arch_v4		2726023	0					
ANR	2726327	Identifier	hexagon_if_arch_v4		2726023	0					
ANR	2726328	ArgumentList			2726023	1					
ANR	2726329	CallExpression	hexagon_if_arch_v5 ( )		2726023	1					
ANR	2726330	Callee	hexagon_if_arch_v5		2726023	0					
ANR	2726331	Identifier	hexagon_if_arch_v5		2726023	0					
ANR	2726332	ArgumentList			2726023	1					
ANR	2726333	UnaryOperationExpression	"! strncmp ( p1 , ""return"" , token )"		2726023	1					
ANR	2726334	UnaryOperator	!		2726023	0					
ANR	2726335	CallExpression	"strncmp ( p1 , ""return"" , token )"		2726023	1					
ANR	2726336	Callee	strncmp		2726023	0					
ANR	2726337	Identifier	strncmp		2726023	0					
ANR	2726338	ArgumentList	p1		2726023	1					
ANR	2726339	Argument	p1		2726023	0					
ANR	2726340	Identifier	p1		2726023	0					
ANR	2726341	Argument	"""return"""		2726023	1					
ANR	2726342	PrimaryExpression	"""return"""		2726023	0					
ANR	2726343	Argument	token		2726023	2					
ANR	2726344	Identifier	token		2726023	0					
ANR	2726345	ReturnStatement	return ( is_if ? HEXAGON_HASH_I : HEXAGON_HASH_J ) ;	1240:8:52706:52752	2726023	1	True				
ANR	2726346	ConditionalExpression	is_if ? HEXAGON_HASH_I : HEXAGON_HASH_J		2726023	0					
ANR	2726347	Condition	is_if		2726023	0					
ANR	2726348	Identifier	is_if		2726023	0					
ANR	2726349	Identifier	HEXAGON_HASH_I		2726023	1					
ANR	2726350	Identifier	HEXAGON_HASH_J		2726023	2					
ANR	2726351	IfStatement	if ( peq )		2726023	11					
ANR	2726352	Condition	peq	1243:6:52767:52769	2726023	0	True				
ANR	2726353	Identifier	peq		2726023	0					
ANR	2726354	CompoundStatement		59:4:1660:1660	2726023	1					
ANR	2726355	ExpressionStatement	p1 = peq + 1	1246:6:52809:52821	2726023	0	True				
ANR	2726356	AssignmentExpression	p1 = peq + 1		2726023	0		=			
ANR	2726357	Identifier	p1		2726023	0					
ANR	2726358	AdditiveExpression	peq + 1		2726023	1		+			
ANR	2726359	Identifier	peq		2726023	0					
ANR	2726360	PrimaryExpression	1		2726023	1					
ANR	2726361	WhileStatement	while ( ISSPACE ( * p1 ) )		2726023	1					
ANR	2726362	Condition	ISSPACE ( * p1 )	1247:13:52836:52848	2726023	0	True				
ANR	2726363	CallExpression	ISSPACE ( * p1 )		2726023	0					
ANR	2726364	Callee	ISSPACE		2726023	0					
ANR	2726365	Identifier	ISSPACE		2726023	0					
ANR	2726366	ArgumentList	* p1		2726023	1					
ANR	2726367	Argument	* p1		2726023	0					
ANR	2726368	UnaryOperationExpression	* p1		2726023	0					
ANR	2726369	UnaryOperator	*		2726023	0					
ANR	2726370	Identifier	p1		2726023	1					
ANR	2726371	ExpressionStatement	p1 ++	1248:8:52859:52863	2726023	1	True				
ANR	2726372	PostIncDecOperationExpression	p1 ++		2726023	0					
ANR	2726373	Identifier	p1		2726023	0					
ANR	2726374	IncDec	++		2726023	1					
ANR	2726375	IfStatement	"if ( * p1 != '#' && ( p2 = strchr ( p1 , '(' ) ) )"		2726023	2					
ANR	2726376	Condition	"* p1 != '#' && ( p2 = strchr ( p1 , '(' ) )"	1250:10:52876:52912	2726023	0	True				
ANR	2726377	AndExpression	"* p1 != '#' && ( p2 = strchr ( p1 , '(' ) )"		2726023	0		&&			
ANR	2726378	EqualityExpression	* p1 != '#'		2726023	0		!=			
ANR	2726379	UnaryOperationExpression	* p1		2726023	0					
ANR	2726380	UnaryOperator	*		2726023	0					
ANR	2726381	Identifier	p1		2726023	1					
ANR	2726382	PrimaryExpression	'#'		2726023	1					
ANR	2726383	AssignmentExpression	"p2 = strchr ( p1 , '(' )"		2726023	1		=			
ANR	2726384	Identifier	p2		2726023	0					
ANR	2726385	CallExpression	"strchr ( p1 , '(' )"		2726023	1					
ANR	2726386	Callee	strchr		2726023	0					
ANR	2726387	Identifier	strchr		2726023	0					
ANR	2726388	ArgumentList	p1		2726023	1					
ANR	2726389	Argument	p1		2726023	0					
ANR	2726390	Identifier	p1		2726023	0					
ANR	2726391	Argument	'('		2726023	1					
ANR	2726392	PrimaryExpression	'('		2726023	0					
ANR	2726393	CompoundStatement		66:8:1807:1807	2726023	1					
ANR	2726394	WhileStatement	while ( ISSPACE ( * p1 ) || ISPUNCT ( * p1 ) )		2726023	0					
ANR	2726395	Condition	ISSPACE ( * p1 ) || ISPUNCT ( * p1 )	1253:17:52970:52999	2726023	0	True				
ANR	2726396	OrExpression	ISSPACE ( * p1 ) || ISPUNCT ( * p1 )		2726023	0		||			
ANR	2726397	CallExpression	ISSPACE ( * p1 )		2726023	0					
ANR	2726398	Callee	ISSPACE		2726023	0					
ANR	2726399	Identifier	ISSPACE		2726023	0					
ANR	2726400	ArgumentList	* p1		2726023	1					
ANR	2726401	Argument	* p1		2726023	0					
ANR	2726402	UnaryOperationExpression	* p1		2726023	0					
ANR	2726403	UnaryOperator	*		2726023	0					
ANR	2726404	Identifier	p1		2726023	1					
ANR	2726405	CallExpression	ISPUNCT ( * p1 )		2726023	1					
ANR	2726406	Callee	ISPUNCT		2726023	0					
ANR	2726407	Identifier	ISPUNCT		2726023	0					
ANR	2726408	ArgumentList	* p1		2726023	1					
ANR	2726409	Argument	* p1		2726023	0					
ANR	2726410	UnaryOperationExpression	* p1		2726023	0					
ANR	2726411	UnaryOperator	*		2726023	0					
ANR	2726412	Identifier	p1		2726023	1					
ANR	2726413	ExpressionStatement	p1 ++	1254:12:53014:53018	2726023	1	True				
ANR	2726414	PostIncDecOperationExpression	p1 ++		2726023	0					
ANR	2726415	Identifier	p1		2726023	0					
ANR	2726416	IncDec	++		2726023	1					
ANR	2726417	IfStatement	if ( ISALPHA ( ch = TOLOWER ( * p1 ) ) )		2726023	1					
ANR	2726418	Condition	ISALPHA ( ch = TOLOWER ( * p1 ) )	1256:14:53035:53062	2726023	0	True				
ANR	2726419	CallExpression	ISALPHA ( ch = TOLOWER ( * p1 ) )		2726023	0					
ANR	2726420	Callee	ISALPHA		2726023	0					
ANR	2726421	Identifier	ISALPHA		2726023	0					
ANR	2726422	ArgumentList	ch = TOLOWER ( * p1 )		2726023	1					
ANR	2726423	Argument	ch = TOLOWER ( * p1 )		2726023	0					
ANR	2726424	AssignmentExpression	ch = TOLOWER ( * p1 )		2726023	0		=			
ANR	2726425	Identifier	ch		2726023	0					
ANR	2726426	CallExpression	TOLOWER ( * p1 )		2726023	1					
ANR	2726427	Callee	TOLOWER		2726023	0					
ANR	2726428	Identifier	TOLOWER		2726023	0					
ANR	2726429	ArgumentList	* p1		2726023	1					
ANR	2726430	Argument	* p1		2726023	0					
ANR	2726431	UnaryOperationExpression	* p1		2726023	0					
ANR	2726432	UnaryOperator	*		2726023	0					
ANR	2726433	Identifier	p1		2726023	1					
ANR	2726434	CompoundStatement		72:12:1961:1961	2726023	1					
ANR	2726435	IfStatement	if ( ch == 'v' )		2726023	0					
ANR	2726436	Condition	ch == 'v'	1258:18:53097:53105	2726023	0	True				
ANR	2726437	EqualityExpression	ch == 'v'		2726023	0		==			
ANR	2726438	Identifier	ch		2726023	0					
ANR	2726439	PrimaryExpression	'v'		2726023	1					
ANR	2726440	CompoundStatement		74:16:2008:2008	2726023	1					
ANR	2726441	ExpressionStatement	ch = TOLOWER ( p1 [ 1 ] )	1261:18:53230:53251	2726023	0	True				
ANR	2726442	AssignmentExpression	ch = TOLOWER ( p1 [ 1 ] )		2726023	0		=			
ANR	2726443	Identifier	ch		2726023	0					
ANR	2726444	CallExpression	TOLOWER ( p1 [ 1 ] )		2726023	1					
ANR	2726445	Callee	TOLOWER		2726023	0					
ANR	2726446	Identifier	TOLOWER		2726023	0					
ANR	2726447	ArgumentList	p1 [ 1 ]		2726023	1					
ANR	2726448	Argument	p1 [ 1 ]		2726023	0					
ANR	2726449	ArrayIndexing	p1 [ 1 ]		2726023	0					
ANR	2726450	Identifier	p1		2726023	0					
ANR	2726451	PrimaryExpression	1		2726023	1					
ANR	2726452	ReturnStatement	return ( pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) ) ;	1263:18:53272:53496	2726023	1	True				
ANR	2726453	ConditionalExpression	pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) )		2726023	0					
ANR	2726454	Condition	pair		2726023	0					
ANR	2726455	Identifier	pair		2726023	0					
ANR	2726456	AdditiveExpression	HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726457	Identifier	HEXAGON_HASH_2		2726023	0					
ANR	2726458	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		-			
ANR	2726459	Identifier	ch		2726023	0					
ANR	2726460	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726461	PrimaryExpression	'a'		2726023	0					
ANR	2726462	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		2726023	1					
ANR	2726463	Condition	is_if		2726023	0					
ANR	2726464	Identifier	is_if		2726023	0					
ANR	2726465	Identifier	HEXAGON_HASH_1		2726023	1					
ANR	2726466	PrimaryExpression	0		2726023	2					
ANR	2726467	AdditiveExpression	HEXAGON_HASH_4 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	2		+			
ANR	2726468	Identifier	HEXAGON_HASH_4		2726023	0					
ANR	2726469	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		-			
ANR	2726470	Identifier	ch		2726023	0					
ANR	2726471	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726472	PrimaryExpression	'a'		2726023	0					
ANR	2726473	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		2726023	1					
ANR	2726474	Condition	is_if		2726023	0					
ANR	2726475	Identifier	is_if		2726023	0					
ANR	2726476	Identifier	HEXAGON_HASH_1		2726023	1					
ANR	2726477	PrimaryExpression	0		2726023	2					
ANR	2726478	ElseStatement	else		2726023	0					
ANR	2726479	ReturnStatement	return ( pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) ) ;	1268:16:53551:53771	2726023	0	True				
ANR	2726480	ConditionalExpression	pair ? ( HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) ) : ( HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 ) )		2726023	0					
ANR	2726481	Condition	pair		2726023	0					
ANR	2726482	Identifier	pair		2726023	0					
ANR	2726483	AdditiveExpression	HEXAGON_HASH_2 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726484	Identifier	HEXAGON_HASH_2		2726023	0					
ANR	2726485	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		-			
ANR	2726486	Identifier	ch		2726023	0					
ANR	2726487	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726488	PrimaryExpression	'a'		2726023	0					
ANR	2726489	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		2726023	1					
ANR	2726490	Condition	is_if		2726023	0					
ANR	2726491	Identifier	is_if		2726023	0					
ANR	2726492	Identifier	HEXAGON_HASH_1		2726023	1					
ANR	2726493	PrimaryExpression	0		2726023	2					
ANR	2726494	AdditiveExpression	HEXAGON_HASH_0 + ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	2		+			
ANR	2726495	Identifier	HEXAGON_HASH_0		2726023	0					
ANR	2726496	AdditiveExpression	ch - 'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		-			
ANR	2726497	Identifier	ch		2726023	0					
ANR	2726498	AdditiveExpression	'a' + ( is_if ? HEXAGON_HASH_1 : 0 )		2726023	1		+			
ANR	2726499	PrimaryExpression	'a'		2726023	0					
ANR	2726500	ConditionalExpression	is_if ? HEXAGON_HASH_1 : 0		2726023	1					
ANR	2726501	Condition	is_if		2726023	0					
ANR	2726502	Identifier	is_if		2726023	0					
ANR	2726503	Identifier	HEXAGON_HASH_1		2726023	1					
ANR	2726504	PrimaryExpression	0		2726023	2					
ANR	2726505	ElseStatement	else		2726023	0					
ANR	2726506	ReturnStatement	return ( pair ? is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L : is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N ) ;	1275:8:53871:53996	2726023	0	True				
ANR	2726507	ConditionalExpression	pair ? is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L : is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N		2726023	0					
ANR	2726508	Condition	pair		2726023	0					
ANR	2726509	Identifier	pair		2726023	0					
ANR	2726510	ConditionalExpression	is_if ? HEXAGON_HASH_K : HEXAGON_HASH_L		2726023	1					
ANR	2726511	Condition	is_if		2726023	0					
ANR	2726512	Identifier	is_if		2726023	0					
ANR	2726513	Identifier	HEXAGON_HASH_K		2726023	1					
ANR	2726514	Identifier	HEXAGON_HASH_L		2726023	2					
ANR	2726515	ConditionalExpression	is_if ? HEXAGON_HASH_M : HEXAGON_HASH_N		2726023	2					
ANR	2726516	Condition	is_if		2726023	0					
ANR	2726517	Identifier	is_if		2726023	0					
ANR	2726518	Identifier	HEXAGON_HASH_M		2726023	1					
ANR	2726519	Identifier	HEXAGON_HASH_N		2726023	2					
ANR	2726520	IfStatement	"if ( ! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token ) )"		2726023	12					
ANR	2726521	Condition	"! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"	1280:6:54011:54136	2726023	0	True				
ANR	2726522	OrExpression	"! strncmp ( syntax , ""allocframe"" , 10 ) || ! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"		2726023	0		||			
ANR	2726523	UnaryOperationExpression	"! strncmp ( syntax , ""allocframe"" , 10 )"		2726023	0					
ANR	2726524	UnaryOperator	!		2726023	0					
ANR	2726525	CallExpression	"strncmp ( syntax , ""allocframe"" , 10 )"		2726023	1					
ANR	2726526	Callee	strncmp		2726023	0					
ANR	2726527	Identifier	strncmp		2726023	0					
ANR	2726528	ArgumentList	syntax		2726023	1					
ANR	2726529	Argument	syntax		2726023	0					
ANR	2726530	Identifier	syntax		2726023	0					
ANR	2726531	Argument	"""allocframe"""		2726023	1					
ANR	2726532	PrimaryExpression	"""allocframe"""		2726023	0					
ANR	2726533	Argument	10		2726023	2					
ANR	2726534	PrimaryExpression	10		2726023	0					
ANR	2726535	OrExpression	"! strncmp ( syntax , ""deallocframe"" , token ) || ! strncmp ( syntax , ""nop"" , token )"		2726023	1		||			
ANR	2726536	UnaryOperationExpression	"! strncmp ( syntax , ""deallocframe"" , token )"		2726023	0					
ANR	2726537	UnaryOperator	!		2726023	0					
ANR	2726538	CallExpression	"strncmp ( syntax , ""deallocframe"" , token )"		2726023	1					
ANR	2726539	Callee	strncmp		2726023	0					
ANR	2726540	Identifier	strncmp		2726023	0					
ANR	2726541	ArgumentList	syntax		2726023	1					
ANR	2726542	Argument	syntax		2726023	0					
ANR	2726543	Identifier	syntax		2726023	0					
ANR	2726544	Argument	"""deallocframe"""		2726023	1					
ANR	2726545	PrimaryExpression	"""deallocframe"""		2726023	0					
ANR	2726546	Argument	token		2726023	2					
ANR	2726547	Identifier	token		2726023	0					
ANR	2726548	UnaryOperationExpression	"! strncmp ( syntax , ""nop"" , token )"		2726023	1					
ANR	2726549	UnaryOperator	!		2726023	0					
ANR	2726550	CallExpression	"strncmp ( syntax , ""nop"" , token )"		2726023	1					
ANR	2726551	Callee	strncmp		2726023	0					
ANR	2726552	Identifier	strncmp		2726023	0					
ANR	2726553	ArgumentList	syntax		2726023	1					
ANR	2726554	Argument	syntax		2726023	0					
ANR	2726555	Identifier	syntax		2726023	0					
ANR	2726556	Argument	"""nop"""		2726023	1					
ANR	2726557	PrimaryExpression	"""nop"""		2726023	0					
ANR	2726558	Argument	token		2726023	2					
ANR	2726559	Identifier	token		2726023	0					
ANR	2726560	ReturnStatement	return ( pair ? HEXAGON_HASH_O : HEXAGON_HASH_P ) ;	1283:4:54143:54188	2726023	1	True				
ANR	2726561	ConditionalExpression	pair ? HEXAGON_HASH_O : HEXAGON_HASH_P		2726023	0					
ANR	2726562	Condition	pair		2726023	0					
ANR	2726563	Identifier	pair		2726023	0					
ANR	2726564	Identifier	HEXAGON_HASH_O		2726023	1					
ANR	2726565	Identifier	HEXAGON_HASH_P		2726023	2					
ANR	2726566	ReturnStatement	return ( HEXAGON_HASH_Z ) ;	1286:2:54214:54237	2726023	13	True				
ANR	2726567	Identifier	HEXAGON_HASH_Z		2726023	0					
ANR	2726568	ReturnType	hexagon_hash		2726023	1					
ANR	2726569	Identifier	hexagon_hash_opcode		2726023	2					
ANR	2726570	ParameterList	const char * syntax		2726023	3					
ANR	2726571	Parameter	const char * syntax	1185:1:51095:51112	2726023	0	True				
ANR	2726572	ParameterType	const char *		2726023	0					
ANR	2726573	Identifier	syntax		2726023	1					
ANR	2726574	CFGEntryNode	ENTRY		2726023		True				
ANR	2726575	CFGExitNode	EXIT		2726023		True				
ANR	2726576	Symbol	HEXAGON_HASH_E		2726023						
ANR	2726577	Symbol	p1		2726023						
ANR	2726578	Symbol	HEXAGON_HASH_D		2726023						
ANR	2726579	Symbol	p2		2726023						
ANR	2726580	Symbol	HEXAGON_HASH_C		2726023						
ANR	2726581	Symbol	hexagon_if_arch_v5		2726023						
ANR	2726582	Symbol	HEXAGON_HASH_B		2726023						
ANR	2726583	Symbol	hexagon_if_arch_v4		2726023						
ANR	2726584	Symbol	pnew		2726023						
ANR	2726585	Symbol	HEXAGON_HASH_I		2726023						
ANR	2726586	Symbol	HEXAGON_HASH_H		2726023						
ANR	2726587	Symbol	HEXAGON_HASH_G		2726023						
ANR	2726588	Symbol	HEXAGON_HASH_F		2726023						
ANR	2726589	Symbol	HEXAGON_HASH_M		2726023						
ANR	2726590	Symbol	strchr		2726023						
ANR	2726591	Symbol	HEXAGON_HASH_L		2726023						
ANR	2726592	Symbol	HEXAGON_HASH_K		2726023						
ANR	2726593	Symbol	HEXAGON_HASH_J		2726023						
ANR	2726594	Symbol	strcspn		2726023						
ANR	2726595	Symbol	pif		2726023						
ANR	2726596	Symbol	HEXAGON_HASH_P		2726023						
ANR	2726597	Symbol	HEXAGON_HASH_O		2726023						
ANR	2726598	Symbol	HEXAGON_HASH_N		2726023						
ANR	2726599	Symbol	strncmp		2726023						
ANR	2726600	Symbol	HEXAGON_HASH_4		2726023						
ANR	2726601	Symbol	HEXAGON_HASH_2		2726023						
ANR	2726602	Symbol	ISALPHA		2726023						
ANR	2726603	Symbol	HEXAGON_HASH_A		2726023						
ANR	2726604	Symbol	peq		2726023						
ANR	2726605	Symbol	strcmp		2726023						
ANR	2726606	Symbol	NULL		2726023						
ANR	2726607	Symbol	* p1		2726023						
ANR	2726608	Symbol	ch		2726023						
ANR	2726609	Symbol	ISPUNCT		2726023						
ANR	2726610	Symbol	TOLOWER		2726023						
ANR	2726611	Symbol	HEXAGON_HASH_1		2726023						
ANR	2726612	Symbol	HEXAGON_HASH_0		2726023						
ANR	2726613	Symbol	pair		2726023						
ANR	2726614	Symbol	token		2726023						
ANR	2726615	Symbol	is_if		2726023						
ANR	2726616	Symbol	PACKET_PAIR		2726023						
ANR	2726617	Symbol	syntax		2726023						
ANR	2726618	Symbol	HEXAGON_HASH_Z		2726023						
ANR	2726619	Symbol	ISSPACE		2726023						
ANR	2726620	Function	hexagon_encode_opcode	1291:0:54309:54896							
ANR	2726621	FunctionDef	hexagon_encode_opcode (const char * enc)		2726620	0					
ANR	2726622	CompoundStatement		1294:0:54362:54896	2726620	0					
ANR	2726623	IdentifierDeclStatement	hexagon_insn insn ;	1295:2:54366:54383	2726620	0	True				
ANR	2726624	IdentifierDecl	insn		2726620	0					
ANR	2726625	IdentifierDeclType	hexagon_insn		2726620	0					
ANR	2726626	Identifier	insn		2726620	1					
ANR	2726627	IdentifierDeclStatement	int num_bits ;	1296:2:54387:54399	2726620	1	True				
ANR	2726628	IdentifierDecl	num_bits		2726620	0					
ANR	2726629	IdentifierDeclType	int		2726620	0					
ANR	2726630	Identifier	num_bits		2726620	1					
ANR	2726631	IdentifierDeclStatement	int pair ;	1297:2:54403:54411	2726620	2	True				
ANR	2726632	IdentifierDecl	pair		2726620	0					
ANR	2726633	IdentifierDeclType	int		2726620	0					
ANR	2726634	Identifier	pair		2726620	1					
ANR	2726635	ForStatement	"for ( insn = 0 , num_bits = 0 , pair = 0 ; * enc ; enc ++ )"		2726620	3					
ANR	2726636	ForInit	"insn = 0 , num_bits = 0 , pair = 0 ;"	1299:7:54421:54453	2726620	0	True				
ANR	2726637	Expression	"insn = 0 , num_bits = 0 , pair = 0"		2726620	0					
ANR	2726638	AssignmentExpression	insn = 0		2726620	0		=			
ANR	2726639	Identifier	insn		2726620	0					
ANR	2726640	PrimaryExpression	0		2726620	1					
ANR	2726641	Expression	"num_bits = 0 , pair = 0"		2726620	1					
ANR	2726642	AssignmentExpression	num_bits = 0		2726620	0		=			
ANR	2726643	Identifier	num_bits		2726620	0					
ANR	2726644	PrimaryExpression	0		2726620	1					
ANR	2726645	AssignmentExpression	pair = 0		2726620	1		=			
ANR	2726646	Identifier	pair		2726620	0					
ANR	2726647	PrimaryExpression	0		2726620	1					
ANR	2726648	Condition	* enc	1299:41:54455:54458	2726620	1	True				
ANR	2726649	UnaryOperationExpression	* enc		2726620	0					
ANR	2726650	UnaryOperator	*		2726620	0					
ANR	2726651	Identifier	enc		2726620	1					
ANR	2726652	PostIncDecOperationExpression	enc ++	1299:47:54461:54465	2726620	2	True				
ANR	2726653	Identifier	enc		2726620	0					
ANR	2726654	IncDec	++		2726620	1					
ANR	2726655	CompoundStatement		7:4:109:109	2726620	3					
ANR	2726656	WhileStatement	while ( ISSPACE ( * enc ) )		2726620	0					
ANR	2726657	Condition	ISSPACE ( * enc )	1301:13:54487:54500	2726620	0	True				
ANR	2726658	CallExpression	ISSPACE ( * enc )		2726620	0					
ANR	2726659	Callee	ISSPACE		2726620	0					
ANR	2726660	Identifier	ISSPACE		2726620	0					
ANR	2726661	ArgumentList	* enc		2726620	1					
ANR	2726662	Argument	* enc		2726620	0					
ANR	2726663	UnaryOperationExpression	* enc		2726620	0					
ANR	2726664	UnaryOperator	*		2726620	0					
ANR	2726665	Identifier	enc		2726620	1					
ANR	2726666	ExpressionStatement	enc ++	1302:8:54511:54516	2726620	1	True				
ANR	2726667	PostIncDecOperationExpression	enc ++		2726620	0					
ANR	2726668	Identifier	enc		2726620	0					
ANR	2726669	IncDec	++		2726620	1					
ANR	2726670	IfStatement	if ( ! * enc )		2726620	1					
ANR	2726671	Condition	! * enc	1304:10:54529:54533	2726620	0	True				
ANR	2726672	UnaryOperationExpression	! * enc		2726620	0					
ANR	2726673	UnaryOperator	!		2726620	0					
ANR	2726674	UnaryOperationExpression	* enc		2726620	1					
ANR	2726675	UnaryOperator	*		2726620	0					
ANR	2726676	Identifier	enc		2726620	1					
ANR	2726677	BreakStatement	break ;	1305:8:54544:54549	2726620	1	True				
ANR	2726678	ExpressionStatement	insn = ( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )	1307:6:54558:54600	2726620	2	True				
ANR	2726679	AssignmentExpression	insn = ( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )		2726620	0		=			
ANR	2726680	Identifier	insn		2726620	0					
ANR	2726681	AdditiveExpression	( insn << 1 ) + ( ( * enc == '1' ) ? 1 : 0 )		2726620	1		+			
ANR	2726682	ShiftExpression	insn << 1		2726620	0		<<			
ANR	2726683	Identifier	insn		2726620	0					
ANR	2726684	PrimaryExpression	1		2726620	1					
ANR	2726685	ConditionalExpression	( * enc == '1' ) ? 1 : 0		2726620	1					
ANR	2726686	Condition	* enc == '1'		2726620	0					
ANR	2726687	EqualityExpression	* enc == '1'		2726620	0		==			
ANR	2726688	UnaryOperationExpression	* enc		2726620	0					
ANR	2726689	UnaryOperator	*		2726620	0					
ANR	2726690	Identifier	enc		2726620	1					
ANR	2726691	PrimaryExpression	'1'		2726620	1					
ANR	2726692	PrimaryExpression	1		2726620	1					
ANR	2726693	PrimaryExpression	0		2726620	2					
ANR	2726694	ExpressionStatement	num_bits ++	1309:6:54609:54619	2726620	3	True				
ANR	2726695	PostIncDecOperationExpression	num_bits ++		2726620	0					
ANR	2726696	Identifier	num_bits		2726620	0					
ANR	2726697	IncDec	++		2726620	1					
ANR	2726698	ExpressionStatement	pair |= ( ( enc [ 0 ] == 'E' && enc [ 1 ] == 'E' ) )	1311:6:54628:54672	2726620	4	True				
ANR	2726699	AssignmentExpression	pair |= ( ( enc [ 0 ] == 'E' && enc [ 1 ] == 'E' ) )		2726620	0		|=			
ANR	2726700	Identifier	pair		2726620	0					
ANR	2726701	AndExpression	enc [ 0 ] == 'E' && enc [ 1 ] == 'E'		2726620	1		&&			
ANR	2726702	EqualityExpression	enc [ 0 ] == 'E'		2726620	0		==			
ANR	2726703	ArrayIndexing	enc [ 0 ]		2726620	0					
ANR	2726704	Identifier	enc		2726620	0					
ANR	2726705	PrimaryExpression	0		2726620	1					
ANR	2726706	PrimaryExpression	'E'		2726620	1					
ANR	2726707	EqualityExpression	enc [ 1 ] == 'E'		2726620	1		==			
ANR	2726708	ArrayIndexing	enc [ 1 ]		2726620	0					
ANR	2726709	Identifier	enc		2726620	0					
ANR	2726710	PrimaryExpression	1		2726620	1					
ANR	2726711	PrimaryExpression	'E'		2726620	1					
ANR	2726712	IfStatement	if ( num_bits != HEXAGON_INSN_LEN * 8 )		2726620	4					
ANR	2726713	Condition	num_bits != HEXAGON_INSN_LEN * 8	1314:6:54687:54718	2726620	0	True				
ANR	2726714	EqualityExpression	num_bits != HEXAGON_INSN_LEN * 8		2726620	0		!=			
ANR	2726715	Identifier	num_bits		2726620	0					
ANR	2726716	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		2726620	1		*			
ANR	2726717	Identifier	HEXAGON_INSN_LEN		2726620	0					
ANR	2726718	PrimaryExpression	8		2726620	1					
ANR	2726719	CompoundStatement		22:4:362:362	2726620	1					
ANR	2726720	ExpressionStatement	"printf ( ""invalid number of bits: %d\\n"" , num_bits )"	1316:6:54733:54782	2726620	0	True				
ANR	2726721	CallExpression	"printf ( ""invalid number of bits: %d\\n"" , num_bits )"		2726620	0					
ANR	2726722	Callee	printf		2726620	0					
ANR	2726723	Identifier	printf		2726620	0					
ANR	2726724	ArgumentList	"""invalid number of bits: %d\\n"""		2726620	1					
ANR	2726725	Argument	"""invalid number of bits: %d\\n"""		2726620	0					
ANR	2726726	PrimaryExpression	"""invalid number of bits: %d\\n"""		2726620	0					
ANR	2726727	Argument	num_bits		2726620	1					
ANR	2726728	Identifier	num_bits		2726620	0					
ANR	2726729	ExpressionStatement	assert ( FALSE )	1317:6:54790:54804	2726620	1	True				
ANR	2726730	CallExpression	assert ( FALSE )		2726620	0					
ANR	2726731	Callee	assert		2726620	0					
ANR	2726732	Identifier	assert		2726620	0					
ANR	2726733	ArgumentList	FALSE		2726620	1					
ANR	2726734	Argument	FALSE		2726620	0					
ANR	2726735	Identifier	FALSE		2726620	0					
ANR	2726736	ReturnStatement	"return ( HEXAGON_END_PACKET_SET ( insn , pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT ) ) ;"	1320:2:54815:54894	2726620	5	True				
ANR	2726737	CallExpression	"HEXAGON_END_PACKET_SET ( insn , pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT )"		2726620	0					
ANR	2726738	Callee	HEXAGON_END_PACKET_SET		2726620	0					
ANR	2726739	Identifier	HEXAGON_END_PACKET_SET		2726620	0					
ANR	2726740	ArgumentList	insn		2726620	1					
ANR	2726741	Argument	insn		2726620	0					
ANR	2726742	Identifier	insn		2726620	0					
ANR	2726743	Argument	pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT		2726620	1					
ANR	2726744	ConditionalExpression	pair ? HEXAGON_END_PAIR : HEXAGON_END_NOT		2726620	0					
ANR	2726745	Condition	pair		2726620	0					
ANR	2726746	Identifier	pair		2726620	0					
ANR	2726747	Identifier	HEXAGON_END_PAIR		2726620	1					
ANR	2726748	Identifier	HEXAGON_END_NOT		2726620	2					
ANR	2726749	ReturnType	hexagon_insn		2726620	1					
ANR	2726750	Identifier	hexagon_encode_opcode		2726620	2					
ANR	2726751	ParameterList	const char * enc		2726620	3					
ANR	2726752	Parameter	const char * enc	1293:1:54345:54359	2726620	0	True				
ANR	2726753	ParameterType	const char *		2726620	0					
ANR	2726754	Identifier	enc		2726620	1					
ANR	2726755	CFGEntryNode	ENTRY		2726620		True				
ANR	2726756	CFGExitNode	EXIT		2726620		True				
ANR	2726757	Symbol	insn		2726620						
ANR	2726758	Symbol	HEXAGON_END_PACKET_SET		2726620						
ANR	2726759	Symbol	HEXAGON_END_NOT		2726620						
ANR	2726760	Symbol	HEXAGON_END_PAIR		2726620						
ANR	2726761	Symbol	HEXAGON_INSN_LEN		2726620						
ANR	2726762	Symbol	FALSE		2726620						
ANR	2726763	Symbol	enc		2726620						
ANR	2726764	Symbol	* enc		2726620						
ANR	2726765	Symbol	num_bits		2726620						
ANR	2726766	Symbol	ISSPACE		2726620						
ANR	2726767	Symbol	pair		2726620						
ANR	2726768	Function	hexagon_hash_icode	1323:0:54899:55270							
ANR	2726769	FunctionDef	hexagon_hash_icode (hexagon_insn insn)		2726768	0					
ANR	2726770	CompoundStatement		1326:0:54951:55270	2726768	0					
ANR	2726771	IdentifierDeclStatement	const hexagon_hash xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) ) ;	1327:2:54955:55036	2726768	0	True				
ANR	2726772	IdentifierDecl	xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		2726768	0					
ANR	2726773	IdentifierDeclType	const hexagon_hash		2726768	0					
ANR	2726774	Identifier	xtra		2726768	1					
ANR	2726775	AssignmentExpression	xtra = ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		2726768	2		=			
ANR	2726776	Identifier	xtra		2726768	0					
ANR	2726777	UnaryOperationExpression	~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		2726768	1					
ANR	2726778	UnaryOperator	~		2726768	0					
ANR	2726779	UnaryOperationExpression	- ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS )		2726768	1					
ANR	2726780	UnaryOperator	-		2726768	0					
ANR	2726781	ShiftExpression	HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS		2726768	1		>>			
ANR	2726782	Identifier	HEXAGON_END_PACKET_MASK		2726768	0					
ANR	2726783	Identifier	HEXAGON_END_PACKET_POS		2726768	1					
ANR	2726784	IdentifierDeclStatement	hexagon_hash hash ;	1328:2:55040:55057	2726768	1	True				
ANR	2726785	IdentifierDecl	hash		2726768	0					
ANR	2726786	IdentifierDeclType	hexagon_hash		2726768	0					
ANR	2726787	Identifier	hash		2726768	1					
ANR	2726788	ExpressionStatement	hash = insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )	1330:2:55062:55135	2726768	2	True				
ANR	2726789	AssignmentExpression	hash = insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )		2726768	0		=			
ANR	2726790	Identifier	hash		2726768	0					
ANR	2726791	ShiftExpression	insn >> ( HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra ) )		2726768	1		>>			
ANR	2726792	Identifier	insn		2726768	0					
ANR	2726793	AdditiveExpression	HEXAGON_INSN_LEN * 8 - ( hexagon_icode_hash_bits - xtra )		2726768	1		-			
ANR	2726794	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		2726768	0		*			
ANR	2726795	Identifier	HEXAGON_INSN_LEN		2726768	0					
ANR	2726796	PrimaryExpression	8		2726768	1					
ANR	2726797	AdditiveExpression	hexagon_icode_hash_bits - xtra		2726768	1		-			
ANR	2726798	Identifier	hexagon_icode_hash_bits		2726768	0					
ANR	2726799	Identifier	xtra		2726768	1					
ANR	2726800	ExpressionStatement	hash |= ( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )	1331:2:55139:55250	2726768	3	True				
ANR	2726801	AssignmentExpression	hash |= ( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )		2726768	0		|=			
ANR	2726802	Identifier	hash		2726768	0					
ANR	2726803	ShiftExpression	( HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS ) << ( hexagon_icode_hash_bits - xtra )		2726768	1		<<			
ANR	2726804	ShiftExpression	HEXAGON_END_PACKET_GET ( insn ) >> HEXAGON_END_PACKET_POS		2726768	0		>>			
ANR	2726805	CallExpression	HEXAGON_END_PACKET_GET ( insn )		2726768	0					
ANR	2726806	Callee	HEXAGON_END_PACKET_GET		2726768	0					
ANR	2726807	Identifier	HEXAGON_END_PACKET_GET		2726768	0					
ANR	2726808	ArgumentList	insn		2726768	1					
ANR	2726809	Argument	insn		2726768	0					
ANR	2726810	Identifier	insn		2726768	0					
ANR	2726811	Identifier	HEXAGON_END_PACKET_POS		2726768	1					
ANR	2726812	AdditiveExpression	hexagon_icode_hash_bits - xtra		2726768	1		-			
ANR	2726813	Identifier	hexagon_icode_hash_bits		2726768	0					
ANR	2726814	Identifier	xtra		2726768	1					
ANR	2726815	ReturnStatement	return ( hash ) ;	1334:2:55255:55268	2726768	4	True				
ANR	2726816	Identifier	hash		2726768	0					
ANR	2726817	ReturnType	hexagon_hash		2726768	1					
ANR	2726818	Identifier	hexagon_hash_icode		2726768	2					
ANR	2726819	ParameterList	hexagon_insn insn		2726768	3					
ANR	2726820	Parameter	hexagon_insn insn	1325:1:54932:54948	2726768	0	True				
ANR	2726821	ParameterType	hexagon_insn		2726768	0					
ANR	2726822	Identifier	insn		2726768	1					
ANR	2726823	CFGEntryNode	ENTRY		2726768		True				
ANR	2726824	CFGExitNode	EXIT		2726768		True				
ANR	2726825	Symbol	insn		2726768						
ANR	2726826	Symbol	xtra		2726768						
ANR	2726827	Symbol	hexagon_icode_hash_bits		2726768						
ANR	2726828	Symbol	HEXAGON_END_PACKET_MASK		2726768						
ANR	2726829	Symbol	HEXAGON_INSN_LEN		2726768						
ANR	2726830	Symbol	HEXAGON_END_PACKET_POS		2726768						
ANR	2726831	Symbol	hash		2726768						
ANR	2726832	Symbol	HEXAGON_END_PACKET_GET		2726768						
ANR	2726833	DeclStmt									
ANR	2726834	Decl							int	int	cpu_type
ANR	2726835	DeclStmt									
ANR	2726836	Decl							int	int	cpu_flag
ANR	2726837	Function	hexagon_arch	1346:0:55479:55526							
ANR	2726838	FunctionDef	hexagon_arch ()		2726837	0					
ANR	2726839	CompoundStatement		1349:0:55503:55526	2726837	0					
ANR	2726840	ReturnStatement	return ( cpu_type ) ;	1350:2:55507:55524	2726837	0	True				
ANR	2726841	Identifier	cpu_type		2726837	0					
ANR	2726842	ReturnType	int		2726837	1					
ANR	2726843	Identifier	hexagon_arch		2726837	2					
ANR	2726844	ParameterList			2726837	3					
ANR	2726845	CFGEntryNode	ENTRY		2726837		True				
ANR	2726846	CFGExitNode	EXIT		2726837		True				
ANR	2726847	Symbol	cpu_type		2726837						
ANR	2726848	Function	hexagon_if_arch	1355:0:55600:55669							
ANR	2726849	FunctionDef	hexagon_if_arch (int arch)		2726848	0					
ANR	2726850	CompoundStatement		1358:0:55631:55669	2726848	0					
ANR	2726851	ReturnStatement	return ( hexagon_arch ( ) == arch ) ;	1359:2:55635:55667	2726848	0	True				
ANR	2726852	EqualityExpression	hexagon_arch ( ) == arch		2726848	0		==			
ANR	2726853	CallExpression	hexagon_arch ( )		2726848	0					
ANR	2726854	Callee	hexagon_arch		2726848	0					
ANR	2726855	Identifier	hexagon_arch		2726848	0					
ANR	2726856	ArgumentList			2726848	1					
ANR	2726857	Identifier	arch		2726848	1					
ANR	2726858	ReturnType	int		2726848	1					
ANR	2726859	Identifier	hexagon_if_arch		2726848	2					
ANR	2726860	ParameterList	int arch		2726848	3					
ANR	2726861	Parameter	int arch	1357:1:55621:55628	2726848	0	True				
ANR	2726862	ParameterType	int		2726848	0					
ANR	2726863	Identifier	arch		2726848	1					
ANR	2726864	CFGEntryNode	ENTRY		2726848		True				
ANR	2726865	CFGExitNode	EXIT		2726848		True				
ANR	2726866	Symbol	arch		2726848						
ANR	2726867	Symbol	hexagon_arch		2726848						
ANR	2726868	Function	hexagon_if_arch_kext	1366:0:55773:55866							
ANR	2726869	FunctionDef	hexagon_if_arch_kext ()		2726868	0					
ANR	2726870	CompoundStatement		1369:0:55805:55866	2726868	0					
ANR	2726871	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1370:2:55809:55864	2726868	0	True				
ANR	2726872	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		2726868	0		||			
ANR	2726873	CallExpression	hexagon_if_arch_v4 ( )		2726868	0					
ANR	2726874	Callee	hexagon_if_arch_v4		2726868	0					
ANR	2726875	Identifier	hexagon_if_arch_v4		2726868	0					
ANR	2726876	ArgumentList			2726868	1					
ANR	2726877	CallExpression	hexagon_if_arch_v5 ( )		2726868	1					
ANR	2726878	Callee	hexagon_if_arch_v5		2726868	0					
ANR	2726879	Identifier	hexagon_if_arch_v5		2726868	0					
ANR	2726880	ArgumentList			2726868	1					
ANR	2726881	ReturnType	int		2726868	1					
ANR	2726882	Identifier	hexagon_if_arch_kext		2726868	2					
ANR	2726883	ParameterList			2726868	3					
ANR	2726884	CFGEntryNode	ENTRY		2726868		True				
ANR	2726885	CFGExitNode	EXIT		2726868		True				
ANR	2726886	Symbol	hexagon_if_arch_v5		2726868						
ANR	2726887	Symbol	hexagon_if_arch_v4		2726868						
ANR	2726888	Function	hexagon_if_arch_pairs	1377:0:55937:56031							
ANR	2726889	FunctionDef	hexagon_if_arch_pairs ()		2726888	0					
ANR	2726890	CompoundStatement		1380:0:55970:56031	2726888	0					
ANR	2726891	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1381:2:55974:56029	2726888	0	True				
ANR	2726892	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		2726888	0		||			
ANR	2726893	CallExpression	hexagon_if_arch_v4 ( )		2726888	0					
ANR	2726894	Callee	hexagon_if_arch_v4		2726888	0					
ANR	2726895	Identifier	hexagon_if_arch_v4		2726888	0					
ANR	2726896	ArgumentList			2726888	1					
ANR	2726897	CallExpression	hexagon_if_arch_v5 ( )		2726888	1					
ANR	2726898	Callee	hexagon_if_arch_v5		2726888	0					
ANR	2726899	Identifier	hexagon_if_arch_v5		2726888	0					
ANR	2726900	ArgumentList			2726888	1					
ANR	2726901	ReturnType	int		2726888	1					
ANR	2726902	Identifier	hexagon_if_arch_pairs		2726888	2					
ANR	2726903	ParameterList			2726888	3					
ANR	2726904	CFGEntryNode	ENTRY		2726888		True				
ANR	2726905	CFGExitNode	EXIT		2726888		True				
ANR	2726906	Symbol	hexagon_if_arch_v5		2726888						
ANR	2726907	Symbol	hexagon_if_arch_v4		2726888						
ANR	2726908	Function	hexagon_if_arch_autoand	1389:0:56162:56258							
ANR	2726909	FunctionDef	hexagon_if_arch_autoand ()		2726908	0					
ANR	2726910	CompoundStatement		1392:0:56197:56258	2726908	0					
ANR	2726911	ReturnStatement	return ( hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( ) ) ;	1393:2:56201:56256	2726908	0	True				
ANR	2726912	OrExpression	hexagon_if_arch_v4 ( ) || hexagon_if_arch_v5 ( )		2726908	0		||			
ANR	2726913	CallExpression	hexagon_if_arch_v4 ( )		2726908	0					
ANR	2726914	Callee	hexagon_if_arch_v4		2726908	0					
ANR	2726915	Identifier	hexagon_if_arch_v4		2726908	0					
ANR	2726916	ArgumentList			2726908	1					
ANR	2726917	CallExpression	hexagon_if_arch_v5 ( )		2726908	1					
ANR	2726918	Callee	hexagon_if_arch_v5		2726908	0					
ANR	2726919	Identifier	hexagon_if_arch_v5		2726908	0					
ANR	2726920	ArgumentList			2726908	1					
ANR	2726921	ReturnType	int		2726908	1					
ANR	2726922	Identifier	hexagon_if_arch_autoand		2726908	2					
ANR	2726923	ParameterList			2726908	3					
ANR	2726924	CFGEntryNode	ENTRY		2726908		True				
ANR	2726925	CFGExitNode	EXIT		2726908		True				
ANR	2726926	Symbol	hexagon_if_arch_v5		2726908						
ANR	2726927	Symbol	hexagon_if_arch_v4		2726908						
ANR	2726928	Function	hexagon_get_opcode_mach	1397:0:56334:56919							
ANR	2726929	FunctionDef	"hexagon_get_opcode_mach (int bfd_mach , int big_p)"		2726928	0					
ANR	2726930	CompoundStatement		1400:0:56388:56919	2726928	0					
ANR	2726931	Statement	static	1402:2:56398:56403	2726928	0	True				
ANR	2726932	Statement	int	1402:9:56405:56407	2726928	1	True				
ANR	2726933	Statement	mach_type_map	1402:13:56409:56421	2726928	2	True				
ANR	2726934	Statement	[	1402:27:56423:56423	2726928	3	True				
ANR	2726935	Statement	]	1402:28:56424:56424	2726928	4	True				
ANR	2726936	Statement	=	1402:30:56426:56426	2726928	5	True				
ANR	2726937	CompoundStatement		4:2:41:41	2726928	6					
ANR	2726938	Statement	HEXAGON_MACH_V2	1404:4:56436:56450	2726928	0	True				
ANR	2726939	Statement	","	1404:19:56451:56451	2726928	1	True				
ANR	2726940	Statement	HEXAGON_MACH_V3	1405:4:56457:56471	2726928	2	True				
ANR	2726941	Statement	","	1405:19:56472:56472	2726928	3	True				
ANR	2726942	Statement	HEXAGON_MACH_V4	1406:4:56478:56492	2726928	4	True				
ANR	2726943	Statement	","	1406:19:56493:56493	2726928	5	True				
ANR	2726944	Statement	HEXAGON_MACH_V5	1407:4:56499:56513	2726928	6	True				
ANR	2726945	Statement	","	1407:19:56514:56514	2726928	7	True				
ANR	2726946	ExpressionStatement		1409:3:56560:56560	2726928	7	True				
ANR	2726947	ReturnStatement	return HEXAGON_MACH_V5 ;	1413:0:56615:56637	2726928	8	True				
ANR	2726948	Identifier	HEXAGON_MACH_V5		2726928	0					
ANR	2726949	IfStatement	if ( bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5 )		2726928	9					
ANR	2726950	Condition	bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5	1417:6:56709:56772	2726928	0	True				
ANR	2726951	OrExpression	bfd_mach < bfd_mach_hexagon_v2 || bfd_mach > bfd_mach_hexagon_v5		2726928	0		||			
ANR	2726952	RelationalExpression	bfd_mach < bfd_mach_hexagon_v2		2726928	0		<			
ANR	2726953	Identifier	bfd_mach		2726928	0					
ANR	2726954	Identifier	bfd_mach_hexagon_v2		2726928	1					
ANR	2726955	RelationalExpression	bfd_mach > bfd_mach_hexagon_v5		2726928	1		>			
ANR	2726956	Identifier	bfd_mach		2726928	0					
ANR	2726957	Identifier	bfd_mach_hexagon_v5		2726928	1					
ANR	2726958	ReturnStatement	return HEXAGON_CPU_TYPE_UNINIT ;	1418:4:56779:56809	2726928	1	True				
ANR	2726959	Identifier	HEXAGON_CPU_TYPE_UNINIT		2726928	0					
ANR	2726960	ReturnStatement	return ( mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ] | ( big_p ? HEXAGON_MACH_BIG : 0 ) ) ;	1420:2:56814:56910	2726928	10	True				
ANR	2726961	InclusiveOrExpression	mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ] | ( big_p ? HEXAGON_MACH_BIG : 0 )		2726928	0		|			
ANR	2726962	ArrayIndexing	mach_type_map [ bfd_mach - bfd_mach_hexagon_v2 ]		2726928	0					
ANR	2726963	Identifier	mach_type_map		2726928	0					
ANR	2726964	AdditiveExpression	bfd_mach - bfd_mach_hexagon_v2		2726928	1		-			
ANR	2726965	Identifier	bfd_mach		2726928	0					
ANR	2726966	Identifier	bfd_mach_hexagon_v2		2726928	1					
ANR	2726967	ConditionalExpression	big_p ? HEXAGON_MACH_BIG : 0		2726928	1					
ANR	2726968	Condition	big_p		2726928	0					
ANR	2726969	Identifier	big_p		2726928	0					
ANR	2726970	Identifier	HEXAGON_MACH_BIG		2726928	1					
ANR	2726971	PrimaryExpression	0		2726928	2					
ANR	2726972	ReturnType	int		2726928	1					
ANR	2726973	Identifier	hexagon_get_opcode_mach		2726928	2					
ANR	2726974	ParameterList	"int bfd_mach , int big_p"		2726928	3					
ANR	2726975	Parameter	int bfd_mach	1399:1:56363:56374	2726928	0	True				
ANR	2726976	ParameterType	int		2726928	0					
ANR	2726977	Identifier	bfd_mach		2726928	1					
ANR	2726978	Parameter	int big_p	1399:15:56377:56385	2726928	1	True				
ANR	2726979	ParameterType	int		2726928	0					
ANR	2726980	Identifier	big_p		2726928	1					
ANR	2726981	CFGEntryNode	ENTRY		2726928		True				
ANR	2726982	CFGExitNode	EXIT		2726928		True				
ANR	2726983	Symbol	bfd_mach_hexagon_v2		2726928						
ANR	2726984	Symbol	HEXAGON_CPU_TYPE_UNINIT		2726928						
ANR	2726985	Symbol	* mach_type_map		2726928						
ANR	2726986	Symbol	* bfd_mach		2726928						
ANR	2726987	Symbol	HEXAGON_MACH_V5		2726928						
ANR	2726988	Symbol	big_p		2726928						
ANR	2726989	Symbol	bfd_mach_hexagon_v5		2726928						
ANR	2726990	Symbol	mach_type_map		2726928						
ANR	2726991	Symbol	bfd_mach		2726928						
ANR	2726992	Symbol	* bfd_mach_hexagon_v2		2726928						
ANR	2726993	Symbol	HEXAGON_MACH_BIG		2726928						
ANR	2726994	Function	hexagon_opcode_init_tables	1431:0:57149:61829							
ANR	2726995	FunctionDef	hexagon_opcode_init_tables (int cpu)		2726994	0					
ANR	2726996	CompoundStatement		1434:0:57191:61829	2726994	0					
ANR	2726997	IdentifierDeclStatement	size_t i ;	1435:2:57195:57203	2726994	0	True				
ANR	2726998	IdentifierDecl	i		2726994	0					
ANR	2726999	IdentifierDeclType	size_t		2726994	0					
ANR	2727000	Identifier	i		2726994	1					
ANR	2727001	IfStatement	if ( cpu_type == cpu )		2726994	1					
ANR	2727002	Condition	cpu_type == cpu	1437:6:57212:57226	2726994	0	True				
ANR	2727003	EqualityExpression	cpu_type == cpu		2726994	0		==			
ANR	2727004	Identifier	cpu_type		2726994	0					
ANR	2727005	Identifier	cpu		2726994	1					
ANR	2727006	ReturnStatement	return ;	1438:4:57233:57239	2726994	1	True				
ANR	2727007	ExpressionStatement	cpu_type = cpu	1440:2:57244:57258	2726994	2	True				
ANR	2727008	AssignmentExpression	cpu_type = cpu		2726994	0		=			
ANR	2727009	Identifier	cpu_type		2726994	0					
ANR	2727010	Identifier	cpu		2726994	1					
ANR	2727011	IfStatement	if ( cpu_type == HEXAGON_CPU_TYPE_UNINIT )		2726994	3					
ANR	2727012	Condition	cpu_type == HEXAGON_CPU_TYPE_UNINIT	1441:6:57266:57300	2726994	0	True				
ANR	2727013	EqualityExpression	cpu_type == HEXAGON_CPU_TYPE_UNINIT		2726994	0		==			
ANR	2727014	Identifier	cpu_type		2726994	0					
ANR	2727015	Identifier	HEXAGON_CPU_TYPE_UNINIT		2726994	1					
ANR	2727016	ReturnStatement	return ;	1442:4:57307:57313	2726994	1	True				
ANR	2727017	ExpressionStatement	cpu_flag = hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0	1444:2:57318:57530	2726994	4	True				
ANR	2727018	AssignmentExpression	cpu_flag = hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		2726994	0		=			
ANR	2727019	Identifier	cpu_flag		2726994	0					
ANR	2727020	ConditionalExpression	hexagon_if_arch_v2 ( ) ? HEXAGON_IS_V2 : hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		2726994	1					
ANR	2727021	Condition	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727022	CallExpression	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727023	Callee	hexagon_if_arch_v2		2726994	0					
ANR	2727024	Identifier	hexagon_if_arch_v2		2726994	0					
ANR	2727025	ArgumentList			2726994	1					
ANR	2727026	Identifier	HEXAGON_IS_V2		2726994	1					
ANR	2727027	ConditionalExpression	hexagon_if_arch_v3 ( ) ? HEXAGON_IS_V3 : hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		2726994	2					
ANR	2727028	Condition	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727029	CallExpression	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727030	Callee	hexagon_if_arch_v3		2726994	0					
ANR	2727031	Identifier	hexagon_if_arch_v3		2726994	0					
ANR	2727032	ArgumentList			2726994	1					
ANR	2727033	Identifier	HEXAGON_IS_V3		2726994	1					
ANR	2727034	ConditionalExpression	hexagon_if_arch_v4 ( ) ? HEXAGON_IS_V4 : hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		2726994	2					
ANR	2727035	Condition	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727036	CallExpression	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727037	Callee	hexagon_if_arch_v4		2726994	0					
ANR	2727038	Identifier	hexagon_if_arch_v4		2726994	0					
ANR	2727039	ArgumentList			2726994	1					
ANR	2727040	Identifier	HEXAGON_IS_V4		2726994	1					
ANR	2727041	ConditionalExpression	hexagon_if_arch_v5 ( ) ? HEXAGON_IS_V5 : 0		2726994	2					
ANR	2727042	Condition	hexagon_if_arch_v5 ( )		2726994	0					
ANR	2727043	CallExpression	hexagon_if_arch_v5 ( )		2726994	0					
ANR	2727044	Callee	hexagon_if_arch_v5		2726994	0					
ANR	2727045	Identifier	hexagon_if_arch_v5		2726994	0					
ANR	2727046	ArgumentList			2726994	1					
ANR	2727047	Identifier	HEXAGON_IS_V5		2726994	1					
ANR	2727048	PrimaryExpression	0		2726994	2					
ANR	2727049	ExpressionStatement	hexagon_opcodes = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5	1455:2:57775:58074	2726994	5	True				
ANR	2727050	AssignmentExpression	hexagon_opcodes = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		2726994	0		=			
ANR	2727051	Identifier	hexagon_opcodes		2726994	0					
ANR	2727052	ConditionalExpression	hexagon_if_arch_v2 ( ) ? hexagon_opcodes_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		2726994	1					
ANR	2727053	Condition	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727054	CallExpression	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727055	Callee	hexagon_if_arch_v2		2726994	0					
ANR	2727056	Identifier	hexagon_if_arch_v2		2726994	0					
ANR	2727057	ArgumentList			2726994	1					
ANR	2727058	Identifier	hexagon_opcodes_v2		2726994	1					
ANR	2727059	ConditionalExpression	hexagon_if_arch_v3 ( ) ? hexagon_opcodes_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		2726994	2					
ANR	2727060	Condition	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727061	CallExpression	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727062	Callee	hexagon_if_arch_v3		2726994	0					
ANR	2727063	Identifier	hexagon_if_arch_v3		2726994	0					
ANR	2727064	ArgumentList			2726994	1					
ANR	2727065	Identifier	hexagon_opcodes_v3		2726994	1					
ANR	2727066	ConditionalExpression	hexagon_if_arch_v4 ( ) ? hexagon_opcodes_v4 : hexagon_opcodes_v5		2726994	2					
ANR	2727067	Condition	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727068	CallExpression	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727069	Callee	hexagon_if_arch_v4		2726994	0					
ANR	2727070	Identifier	hexagon_if_arch_v4		2726994	0					
ANR	2727071	ArgumentList			2726994	1					
ANR	2727072	Identifier	hexagon_opcodes_v4		2726994	1					
ANR	2727073	Identifier	hexagon_opcodes_v5		2726994	2					
ANR	2727074	ExpressionStatement	hexagon_opcodes_count = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5	1460:2:58079:58402	2726994	6	True				
ANR	2727075	AssignmentExpression	hexagon_opcodes_count = hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		2726994	0		=			
ANR	2727076	Identifier	hexagon_opcodes_count		2726994	0					
ANR	2727077	ConditionalExpression	hexagon_if_arch_v2 ( ) ? hexagon_opcodes_count_v2 : hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		2726994	1					
ANR	2727078	Condition	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727079	CallExpression	hexagon_if_arch_v2 ( )		2726994	0					
ANR	2727080	Callee	hexagon_if_arch_v2		2726994	0					
ANR	2727081	Identifier	hexagon_if_arch_v2		2726994	0					
ANR	2727082	ArgumentList			2726994	1					
ANR	2727083	Identifier	hexagon_opcodes_count_v2		2726994	1					
ANR	2727084	ConditionalExpression	hexagon_if_arch_v3 ( ) ? hexagon_opcodes_count_v3 : hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		2726994	2					
ANR	2727085	Condition	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727086	CallExpression	hexagon_if_arch_v3 ( )		2726994	0					
ANR	2727087	Callee	hexagon_if_arch_v3		2726994	0					
ANR	2727088	Identifier	hexagon_if_arch_v3		2726994	0					
ANR	2727089	ArgumentList			2726994	1					
ANR	2727090	Identifier	hexagon_opcodes_count_v3		2726994	1					
ANR	2727091	ConditionalExpression	hexagon_if_arch_v4 ( ) ? hexagon_opcodes_count_v4 : hexagon_opcodes_count_v5		2726994	2					
ANR	2727092	Condition	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727093	CallExpression	hexagon_if_arch_v4 ( )		2726994	0					
ANR	2727094	Callee	hexagon_if_arch_v4		2726994	0					
ANR	2727095	Identifier	hexagon_if_arch_v4		2726994	0					
ANR	2727096	ArgumentList			2726994	1					
ANR	2727097	Identifier	hexagon_opcodes_count_v4		2726994	1					
ANR	2727098	Identifier	hexagon_opcodes_count_v5		2726994	2					
ANR	2727099	ExpressionStatement	hexagon_icode_hash_bits = HEXAGON_INSN_LEN * 8	1467:2:58516:58562	2726994	7	True				
ANR	2727100	AssignmentExpression	hexagon_icode_hash_bits = HEXAGON_INSN_LEN * 8		2726994	0		=			
ANR	2727101	Identifier	hexagon_icode_hash_bits		2726994	0					
ANR	2727102	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		2726994	1		*			
ANR	2727103	Identifier	HEXAGON_INSN_LEN		2726994	0					
ANR	2727104	PrimaryExpression	8		2726994	1					
ANR	2727105	ForStatement	for ( i = 0 ; i < hexagon_opcodes_count ; i ++ )		2726994	8					
ANR	2727106	ForInit	i = 0 ;	1468:7:58571:58576	2726994	0	True				
ANR	2727107	AssignmentExpression	i = 0		2726994	0		=			
ANR	2727108	Identifier	i		2726994	0					
ANR	2727109	PrimaryExpression	0		2726994	1					
ANR	2727110	Condition	i < hexagon_opcodes_count	1468:14:58578:58602	2726994	1	True				
ANR	2727111	RelationalExpression	i < hexagon_opcodes_count		2726994	0		<			
ANR	2727112	Identifier	i		2726994	0					
ANR	2727113	Identifier	hexagon_opcodes_count		2726994	1					
ANR	2727114	PostIncDecOperationExpression	i ++	1468:41:58605:58607	2726994	2	True				
ANR	2727115	Identifier	i		2726994	0					
ANR	2727116	IncDec	++		2726994	1					
ANR	2727117	CompoundStatement		38:6:1455:1470	2726994	3					
ANR	2727118	IdentifierDeclStatement	unsigned int bits ;	1470:6:58622:58639	2726994	0	True				
ANR	2727119	IdentifierDecl	bits		2726994	0					
ANR	2727120	IdentifierDeclType	unsigned int		2726994	0					
ANR	2727121	Identifier	bits		2726994	1					
ANR	2727122	IdentifierDeclStatement	const char * str ;	1471:6:58647:58662	2726994	1	True				
ANR	2727123	IdentifierDecl	* str		2726994	0					
ANR	2727124	IdentifierDeclType	const char *		2726994	0					
ANR	2727125	Identifier	str		2726994	1					
ANR	2727126	ForStatement	"for ( bits = 0 , str = hexagon_opcodes [ i ] . enc ; * str ; str ++ )"		2726994	2					
ANR	2727127	ForInit	"bits = 0 , str = hexagon_opcodes [ i ] . enc ;"	1473:11:58676:58715	2726994	0	True				
ANR	2727128	Expression	"bits = 0 , str = hexagon_opcodes [ i ] . enc"		2726994	0					
ANR	2727129	AssignmentExpression	bits = 0		2726994	0		=			
ANR	2727130	Identifier	bits		2726994	0					
ANR	2727131	PrimaryExpression	0		2726994	1					
ANR	2727132	AssignmentExpression	str = hexagon_opcodes [ i ] . enc		2726994	1		=			
ANR	2727133	Identifier	str		2726994	0					
ANR	2727134	MemberAccess	hexagon_opcodes [ i ] . enc		2726994	1					
ANR	2727135	ArrayIndexing	hexagon_opcodes [ i ]		2726994	0					
ANR	2727136	Identifier	hexagon_opcodes		2726994	0					
ANR	2727137	Identifier	i		2726994	1					
ANR	2727138	Identifier	enc		2726994	1					
ANR	2727139	Condition	* str	1473:52:58717:58720	2726994	1	True				
ANR	2727140	UnaryOperationExpression	* str		2726994	0					
ANR	2727141	UnaryOperator	*		2726994	0					
ANR	2727142	Identifier	str		2726994	1					
ANR	2727143	PostIncDecOperationExpression	str ++	1473:58:58723:58727	2726994	2	True				
ANR	2727144	Identifier	str		2726994	0					
ANR	2727145	IncDec	++		2726994	1					
ANR	2727146	CompoundStatement		41:8:1546:1546	2726994	3					
ANR	2727147	IfStatement	if ( * str == '0' || * str == '1' || * str == 'P' || * str == 'E' )		2726994	0					
ANR	2727148	Condition	* str == '0' || * str == '1' || * str == 'P' || * str == 'E'	1475:14:58754:58809	2726994	0	True				
ANR	2727149	OrExpression	* str == '0' || * str == '1' || * str == 'P' || * str == 'E'		2726994	0		||			
ANR	2727150	EqualityExpression	* str == '0'		2726994	0		==			
ANR	2727151	UnaryOperationExpression	* str		2726994	0					
ANR	2727152	UnaryOperator	*		2726994	0					
ANR	2727153	Identifier	str		2726994	1					
ANR	2727154	PrimaryExpression	'0'		2726994	1					
ANR	2727155	OrExpression	* str == '1' || * str == 'P' || * str == 'E'		2726994	1		||			
ANR	2727156	EqualityExpression	* str == '1'		2726994	0		==			
ANR	2727157	UnaryOperationExpression	* str		2726994	0					
ANR	2727158	UnaryOperator	*		2726994	0					
ANR	2727159	Identifier	str		2726994	1					
ANR	2727160	PrimaryExpression	'1'		2726994	1					
ANR	2727161	OrExpression	* str == 'P' || * str == 'E'		2726994	1		||			
ANR	2727162	EqualityExpression	* str == 'P'		2726994	0		==			
ANR	2727163	UnaryOperationExpression	* str		2726994	0					
ANR	2727164	UnaryOperator	*		2726994	0					
ANR	2727165	Identifier	str		2726994	1					
ANR	2727166	PrimaryExpression	'P'		2726994	1					
ANR	2727167	EqualityExpression	* str == 'E'		2726994	1		==			
ANR	2727168	UnaryOperationExpression	* str		2726994	0					
ANR	2727169	UnaryOperator	*		2726994	0					
ANR	2727170	Identifier	str		2726994	1					
ANR	2727171	PrimaryExpression	'E'		2726994	1					
ANR	2727172	ExpressionStatement	bits ++	1476:12:58824:58830	2726994	1	True				
ANR	2727173	PostIncDecOperationExpression	bits ++		2726994	0					
ANR	2727174	Identifier	bits		2726994	0					
ANR	2727175	IncDec	++		2726994	1					
ANR	2727176	ElseStatement	else		2726994	0					
ANR	2727177	BreakStatement	break ;	1478:12:58859:58864	2726994	0	True				
ANR	2727178	IfStatement	if ( bits < hexagon_icode_hash_bits )		2726994	3					
ANR	2727179	Condition	bits < hexagon_icode_hash_bits	1481:10:58887:58916	2726994	0	True				
ANR	2727180	RelationalExpression	bits < hexagon_icode_hash_bits		2726994	0		<			
ANR	2727181	Identifier	bits		2726994	0					
ANR	2727182	Identifier	hexagon_icode_hash_bits		2726994	1					
ANR	2727183	ExpressionStatement	hexagon_icode_hash_bits = bits	1482:8:58927:58957	2726994	1	True				
ANR	2727184	AssignmentExpression	hexagon_icode_hash_bits = bits		2726994	0		=			
ANR	2727185	Identifier	hexagon_icode_hash_bits		2726994	0					
ANR	2727186	Identifier	bits		2726994	1					
ANR	2727187	ExpressionStatement	hexagon_icode_hash_bits += ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )	1484:2:58967:59049	2726994	9	True				
ANR	2727188	AssignmentExpression	hexagon_icode_hash_bits += ~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		2726994	0		+=			
ANR	2727189	Identifier	hexagon_icode_hash_bits		2726994	0					
ANR	2727190	UnaryOperationExpression	~ ( - ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS ) )		2726994	1					
ANR	2727191	UnaryOperator	~		2726994	0					
ANR	2727192	UnaryOperationExpression	- ( HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS )		2726994	1					
ANR	2727193	UnaryOperator	-		2726994	0					
ANR	2727194	ShiftExpression	HEXAGON_END_PACKET_MASK >> HEXAGON_END_PACKET_POS		2726994	1		>>			
ANR	2727195	Identifier	HEXAGON_END_PACKET_MASK		2726994	0					
ANR	2727196	Identifier	HEXAGON_END_PACKET_POS		2726994	1					
ANR	2727197	ExpressionStatement	"memset ( opcode_map , 0 , sizeof ( opcode_map ) )"	1487:2:59084:59127	2726994	10	True				
ANR	2727198	CallExpression	"memset ( opcode_map , 0 , sizeof ( opcode_map ) )"		2726994	0					
ANR	2727199	Callee	memset		2726994	0					
ANR	2727200	Identifier	memset		2726994	0					
ANR	2727201	ArgumentList	opcode_map		2726994	1					
ANR	2727202	Argument	opcode_map		2726994	0					
ANR	2727203	Identifier	opcode_map		2726994	0					
ANR	2727204	Argument	0		2726994	1					
ANR	2727205	PrimaryExpression	0		2726994	0					
ANR	2727206	Argument	sizeof ( opcode_map )		2726994	2					
ANR	2727207	SizeofExpression	sizeof ( opcode_map )		2726994	0					
ANR	2727208	Sizeof	sizeof		2726994	0					
ANR	2727209	SizeofOperand	opcode_map		2726994	1					
ANR	2727210	ExpressionStatement	"icode_map = calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"	1488:2:59131:59201	2726994	11	True				
ANR	2727211	AssignmentExpression	"icode_map = calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"		2726994	0		=			
ANR	2727212	Identifier	icode_map		2726994	0					
ANR	2727213	CallExpression	"calloc ( 1 << hexagon_icode_hash_bits , sizeof ( * icode_map ) )"		2726994	1					
ANR	2727214	Callee	calloc		2726994	0					
ANR	2727215	Identifier	calloc		2726994	0					
ANR	2727216	ArgumentList	1 << hexagon_icode_hash_bits		2726994	1					
ANR	2727217	Argument	1 << hexagon_icode_hash_bits		2726994	0					
ANR	2727218	ShiftExpression	1 << hexagon_icode_hash_bits		2726994	0		<<			
ANR	2727219	PrimaryExpression	1		2726994	0					
ANR	2727220	Identifier	hexagon_icode_hash_bits		2726994	1					
ANR	2727221	Argument	sizeof ( * icode_map )		2726994	1					
ANR	2727222	SizeofExpression	sizeof ( * icode_map )		2726994	0					
ANR	2727223	Sizeof	sizeof		2726994	0					
ANR	2727224	UnaryOperationExpression	* icode_map		2726994	1					
ANR	2727225	UnaryOperator	*		2726994	0					
ANR	2727226	Identifier	icode_map		2726994	1					
ANR	2727227	ForStatement	for ( i = hexagon_opcodes_count ; i > 0 ; -- i )		2726994	12					
ANR	2727228	ForInit	i = hexagon_opcodes_count ;	1491:7:59276:59301	2726994	0	True				
ANR	2727229	AssignmentExpression	i = hexagon_opcodes_count		2726994	0		=			
ANR	2727230	Identifier	i		2726994	0					
ANR	2727231	Identifier	hexagon_opcodes_count		2726994	1					
ANR	2727232	Condition	i > 0	1491:34:59303:59307	2726994	1	True				
ANR	2727233	RelationalExpression	i > 0		2726994	0		>			
ANR	2727234	Identifier	i		2726994	0					
ANR	2727235	PrimaryExpression	0		2726994	1					
ANR	2727236	UnaryExpression	-- i	1491:41:59310:59312	2726994	2	True				
ANR	2727237	IncDec	--		2726994	0					
ANR	2727238	Identifier	i		2726994	1					
ANR	2727239	CompoundStatement		62:6:2187:2205	2726994	3					
ANR	2727240	IdentifierDeclStatement	hexagon_hash opcode ;	1493:6:59327:59346	2726994	0	True				
ANR	2727241	IdentifierDecl	opcode		2726994	0					
ANR	2727242	IdentifierDeclType	hexagon_hash		2726994	0					
ANR	2727243	Identifier	opcode		2726994	1					
ANR	2727244	IdentifierDeclStatement	hexagon_insn insn ;	1494:6:59354:59371	2726994	1	True				
ANR	2727245	IdentifierDecl	insn		2726994	0					
ANR	2727246	IdentifierDeclType	hexagon_insn		2726994	0					
ANR	2727247	Identifier	insn		2726994	1					
ANR	2727248	IdentifierDeclStatement	hexagon_hash icode ;	1495:6:59379:59397	2726994	2	True				
ANR	2727249	IdentifierDecl	icode		2726994	0					
ANR	2727250	IdentifierDeclType	hexagon_hash		2726994	0					
ANR	2727251	Identifier	icode		2726994	1					
ANR	2727252	ExpressionStatement	opcode = HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )	1497:6:59406:59467	2726994	3	True				
ANR	2727253	AssignmentExpression	opcode = HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )		2726994	0		=			
ANR	2727254	Identifier	opcode		2726994	0					
ANR	2727255	CallExpression	HEXAGON_HASH_OPCODE ( hexagon_opcodes [ i - 1 ] . syntax )		2726994	1					
ANR	2727256	Callee	HEXAGON_HASH_OPCODE		2726994	0					
ANR	2727257	Identifier	HEXAGON_HASH_OPCODE		2726994	0					
ANR	2727258	ArgumentList	hexagon_opcodes [ i - 1 ] . syntax		2726994	1					
ANR	2727259	Argument	hexagon_opcodes [ i - 1 ] . syntax		2726994	0					
ANR	2727260	MemberAccess	hexagon_opcodes [ i - 1 ] . syntax		2726994	0					
ANR	2727261	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727262	Identifier	hexagon_opcodes		2726994	0					
ANR	2727263	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727264	Identifier	i		2726994	0					
ANR	2727265	PrimaryExpression	1		2726994	1					
ANR	2727266	Identifier	syntax		2726994	1					
ANR	2727267	ExpressionStatement	insn = hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )	1498:6:59475:59535	2726994	4	True				
ANR	2727268	AssignmentExpression	insn = hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )		2726994	0		=			
ANR	2727269	Identifier	insn		2726994	0					
ANR	2727270	CallExpression	hexagon_encode_opcode ( hexagon_opcodes [ i - 1 ] . enc )		2726994	1					
ANR	2727271	Callee	hexagon_encode_opcode		2726994	0					
ANR	2727272	Identifier	hexagon_encode_opcode		2726994	0					
ANR	2727273	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		2726994	1					
ANR	2727274	Argument	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727275	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727276	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727277	Identifier	hexagon_opcodes		2726994	0					
ANR	2727278	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727279	Identifier	i		2726994	0					
ANR	2727280	PrimaryExpression	1		2726994	1					
ANR	2727281	Identifier	enc		2726994	1					
ANR	2727282	ExpressionStatement	icode = HEXAGON_HASH_ICODE ( insn )	1499:6:59543:59577	2726994	5	True				
ANR	2727283	AssignmentExpression	icode = HEXAGON_HASH_ICODE ( insn )		2726994	0		=			
ANR	2727284	Identifier	icode		2726994	0					
ANR	2727285	CallExpression	HEXAGON_HASH_ICODE ( insn )		2726994	1					
ANR	2727286	Callee	HEXAGON_HASH_ICODE		2726994	0					
ANR	2727287	Identifier	HEXAGON_HASH_ICODE		2726994	0					
ANR	2727288	ArgumentList	insn		2726994	1					
ANR	2727289	Argument	insn		2726994	0					
ANR	2727290	Identifier	insn		2726994	0					
ANR	2727291	ExpressionStatement	hexagon_opcodes [ i - 1 ] . next_asm = opcode_map [ opcode ]	1501:6:59586:59640	2726994	6	True				
ANR	2727292	AssignmentExpression	hexagon_opcodes [ i - 1 ] . next_asm = opcode_map [ opcode ]		2726994	0		=			
ANR	2727293	MemberAccess	hexagon_opcodes [ i - 1 ] . next_asm		2726994	0					
ANR	2727294	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727295	Identifier	hexagon_opcodes		2726994	0					
ANR	2727296	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727297	Identifier	i		2726994	0					
ANR	2727298	PrimaryExpression	1		2726994	1					
ANR	2727299	Identifier	next_asm		2726994	1					
ANR	2727300	ArrayIndexing	opcode_map [ opcode ]		2726994	1					
ANR	2727301	Identifier	opcode_map		2726994	0					
ANR	2727302	Identifier	opcode		2726994	1					
ANR	2727303	ExpressionStatement	opcode_map [ opcode ] = hexagon_opcodes + i - 1	1502:6:59648:59693	2726994	7	True				
ANR	2727304	AssignmentExpression	opcode_map [ opcode ] = hexagon_opcodes + i - 1		2726994	0		=			
ANR	2727305	ArrayIndexing	opcode_map [ opcode ]		2726994	0					
ANR	2727306	Identifier	opcode_map		2726994	0					
ANR	2727307	Identifier	opcode		2726994	1					
ANR	2727308	AdditiveExpression	hexagon_opcodes + i - 1		2726994	1		+			
ANR	2727309	Identifier	hexagon_opcodes		2726994	0					
ANR	2727310	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727311	Identifier	i		2726994	0					
ANR	2727312	PrimaryExpression	1		2726994	1					
ANR	2727313	ExpressionStatement	hexagon_opcodes [ i - 1 ] . next_dis = icode_map [ icode ]	1504:6:59702:59754	2726994	8	True				
ANR	2727314	AssignmentExpression	hexagon_opcodes [ i - 1 ] . next_dis = icode_map [ icode ]		2726994	0		=			
ANR	2727315	MemberAccess	hexagon_opcodes [ i - 1 ] . next_dis		2726994	0					
ANR	2727316	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727317	Identifier	hexagon_opcodes		2726994	0					
ANR	2727318	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727319	Identifier	i		2726994	0					
ANR	2727320	PrimaryExpression	1		2726994	1					
ANR	2727321	Identifier	next_dis		2726994	1					
ANR	2727322	ArrayIndexing	icode_map [ icode ]		2726994	1					
ANR	2727323	Identifier	icode_map		2726994	0					
ANR	2727324	Identifier	icode		2726994	1					
ANR	2727325	ExpressionStatement	icode_map [ icode ] = hexagon_opcodes + i - 1	1505:6:59762:59805	2726994	9	True				
ANR	2727326	AssignmentExpression	icode_map [ icode ] = hexagon_opcodes + i - 1		2726994	0		=			
ANR	2727327	ArrayIndexing	icode_map [ icode ]		2726994	0					
ANR	2727328	Identifier	icode_map		2726994	0					
ANR	2727329	Identifier	icode		2726994	1					
ANR	2727330	AdditiveExpression	hexagon_opcodes + i - 1		2726994	1		+			
ANR	2727331	Identifier	hexagon_opcodes		2726994	0					
ANR	2727332	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727333	Identifier	i		2726994	0					
ANR	2727334	PrimaryExpression	1		2726994	1					
ANR	2727335	IfStatement	"if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" ) )"		2726994	10					
ANR	2727336	Condition	"( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"	1507:10:59818:59925	2726994	0	True				
ANR	2727337	OrExpression	"( hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP ) || ! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		2726994	0		||			
ANR	2727338	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_IT_NOP		2726994	0		&			
ANR	2727339	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727340	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727341	Identifier	hexagon_opcodes		2726994	0					
ANR	2727342	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727343	Identifier	i		2726994	0					
ANR	2727344	PrimaryExpression	1		2726994	1					
ANR	2727345	Identifier	attributes		2726994	1					
ANR	2727346	Identifier	A_IT_NOP		2726994	1					
ANR	2727347	UnaryOperationExpression	"! strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		2726994	1					
ANR	2727348	UnaryOperator	!		2726994	0					
ANR	2727349	CallExpression	"strcmp ( hexagon_opcodes [ i - 1 ] . syntax , ""nop"" )"		2726994	1					
ANR	2727350	Callee	strcmp		2726994	0					
ANR	2727351	Identifier	strcmp		2726994	0					
ANR	2727352	ArgumentList	hexagon_opcodes [ i - 1 ] . syntax		2726994	1					
ANR	2727353	Argument	hexagon_opcodes [ i - 1 ] . syntax		2726994	0					
ANR	2727354	MemberAccess	hexagon_opcodes [ i - 1 ] . syntax		2726994	0					
ANR	2727355	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727356	Identifier	hexagon_opcodes		2726994	0					
ANR	2727357	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727358	Identifier	i		2726994	0					
ANR	2727359	PrimaryExpression	1		2726994	1					
ANR	2727360	Identifier	syntax		2726994	1					
ANR	2727361	Argument	"""nop"""		2726994	1					
ANR	2727362	PrimaryExpression	"""nop"""		2726994	0					
ANR	2727363	CompoundStatement		76:8:2744:2744	2726994	1					
ANR	2727364	ExpressionStatement	hexagon_nop = insn	1510:10:59948:59966	2726994	0	True				
ANR	2727365	AssignmentExpression	hexagon_nop = insn		2726994	0		=			
ANR	2727366	Identifier	hexagon_nop		2726994	0					
ANR	2727367	Identifier	insn		2726994	1					
ANR	2727368	ExpressionStatement	hexagon_nop_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )	1511:10:59978:60046	2726994	1	True				
ANR	2727369	AssignmentExpression	hexagon_nop_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		2726994	0		=			
ANR	2727370	Identifier	hexagon_nop_mask		2726994	0					
ANR	2727371	CallExpression	hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		2726994	1					
ANR	2727372	Callee	hexagon_encode_mask		2726994	0					
ANR	2727373	Identifier	hexagon_encode_mask		2726994	0					
ANR	2727374	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		2726994	1					
ANR	2727375	Argument	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727376	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727377	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727378	Identifier	hexagon_opcodes		2726994	0					
ANR	2727379	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727380	Identifier	i		2726994	0					
ANR	2727381	PrimaryExpression	1		2726994	1					
ANR	2727382	Identifier	enc		2726994	1					
ANR	2727383	ExpressionStatement	hexagon_opcodes [ i - 1 ] . attributes |= A_IT_NOP	1512:10:60058:60104	2726994	2	True				
ANR	2727384	AssignmentExpression	hexagon_opcodes [ i - 1 ] . attributes |= A_IT_NOP		2726994	0		|=			
ANR	2727385	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727386	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727387	Identifier	hexagon_opcodes		2726994	0					
ANR	2727388	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727389	Identifier	i		2726994	0					
ANR	2727390	PrimaryExpression	1		2726994	1					
ANR	2727391	Identifier	attributes		2726994	1					
ANR	2727392	Identifier	A_IT_NOP		2726994	1					
ANR	2727393	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER ) )		2726994	11					
ANR	2727394	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER	1515:10:60127:60178	2726994	0	True				
ANR	2727395	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_IT_EXTENDER		2726994	0		&			
ANR	2727396	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727397	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727398	Identifier	hexagon_opcodes		2726994	0					
ANR	2727399	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727400	Identifier	i		2726994	0					
ANR	2727401	PrimaryExpression	1		2726994	1					
ANR	2727402	Identifier	attributes		2726994	1					
ANR	2727403	Identifier	A_IT_EXTENDER		2726994	1					
ANR	2727404	CompoundStatement		83:8:2997:2997	2726994	1					
ANR	2727405	ExpressionStatement	hexagon_kext = insn	1517:10:60201:60220	2726994	0	True				
ANR	2727406	AssignmentExpression	hexagon_kext = insn		2726994	0		=			
ANR	2727407	Identifier	hexagon_kext		2726994	0					
ANR	2727408	Identifier	insn		2726994	1					
ANR	2727409	ExpressionStatement	hexagon_kext_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )	1518:10:60232:60301	2726994	1	True				
ANR	2727410	AssignmentExpression	hexagon_kext_mask = hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		2726994	0		=			
ANR	2727411	Identifier	hexagon_kext_mask		2726994	0					
ANR	2727412	CallExpression	hexagon_encode_mask ( hexagon_opcodes [ i - 1 ] . enc )		2726994	1					
ANR	2727413	Callee	hexagon_encode_mask		2726994	0					
ANR	2727414	Identifier	hexagon_encode_mask		2726994	0					
ANR	2727415	ArgumentList	hexagon_opcodes [ i - 1 ] . enc		2726994	1					
ANR	2727416	Argument	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727417	MemberAccess	hexagon_opcodes [ i - 1 ] . enc		2726994	0					
ANR	2727418	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727419	Identifier	hexagon_opcodes		2726994	0					
ANR	2727420	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727421	Identifier	i		2726994	0					
ANR	2727422	PrimaryExpression	1		2726994	1					
ANR	2727423	Identifier	enc		2726994	1					
ANR	2727424	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_PREFIX	1519:10:60313:60368	2726994	2	True				
ANR	2727425	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_PREFIX		2726994	0		|=			
ANR	2727426	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727427	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727428	Identifier	hexagon_opcodes		2726994	0					
ANR	2727429	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727430	Identifier	i		2726994	0					
ANR	2727431	PrimaryExpression	1		2726994	1					
ANR	2727432	Identifier	flags		2726994	1					
ANR	2727433	Identifier	HEXAGON_CODE_IS_PREFIX		2726994	1					
ANR	2727434	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER ) )		2726994	12					
ANR	2727435	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER	1522:10:60391:60442	2726994	0	True				
ANR	2727436	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_BRANCHADDER		2726994	0		&			
ANR	2727437	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727438	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727439	Identifier	hexagon_opcodes		2726994	0					
ANR	2727440	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727441	Identifier	i		2726994	0					
ANR	2727442	PrimaryExpression	1		2726994	1					
ANR	2727443	Identifier	attributes		2726994	1					
ANR	2727444	Identifier	A_BRANCHADDER		2726994	1					
ANR	2727445	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_BRANCH	1523:8:60453:60508	2726994	1	True				
ANR	2727446	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_BRANCH		2726994	0		|=			
ANR	2727447	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727448	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727449	Identifier	hexagon_opcodes		2726994	0					
ANR	2727450	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727451	Identifier	i		2726994	0					
ANR	2727452	PrimaryExpression	1		2726994	1					
ANR	2727453	Identifier	flags		2726994	1					
ANR	2727454	Identifier	HEXAGON_CODE_IS_BRANCH		2726994	1					
ANR	2727455	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST ) )		2726994	13					
ANR	2727456	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST	1525:10:60521:60586	2726994	0	True				
ANR	2727457	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_RESTRICT_SINGLE_MEM_FIRST		2726994	0		&			
ANR	2727458	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727459	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727460	Identifier	hexagon_opcodes		2726994	0					
ANR	2727461	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727462	Identifier	i		2726994	0					
ANR	2727463	PrimaryExpression	1		2726994	1					
ANR	2727464	Identifier	attributes		2726994	1					
ANR	2727465	Identifier	A_RESTRICT_SINGLE_MEM_FIRST		2726994	1					
ANR	2727466	CompoundStatement		93:8:3405:3405	2726994	1					
ANR	2727467	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_MEMORY	1527:10:60609:60664	2726994	0	True				
ANR	2727468	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_MEMORY		2726994	0		|=			
ANR	2727469	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727470	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727471	Identifier	hexagon_opcodes		2726994	0					
ANR	2727472	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727473	Identifier	i		2726994	0					
ANR	2727474	PrimaryExpression	1		2726994	1					
ANR	2727475	Identifier	flags		2726994	1					
ANR	2727476	Identifier	HEXAGON_CODE_IS_MEMORY		2726994	1					
ANR	2727477	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & A_STORE ) )		2726994	1					
ANR	2727478	Condition	hexagon_opcodes [ i - 1 ] . attributes & A_STORE	1529:14:60681:60726	2726994	0	True				
ANR	2727479	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & A_STORE		2726994	0		&			
ANR	2727480	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727481	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727482	Identifier	hexagon_opcodes		2726994	0					
ANR	2727483	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727484	Identifier	i		2726994	0					
ANR	2727485	PrimaryExpression	1		2726994	1					
ANR	2727486	Identifier	attributes		2726994	1					
ANR	2727487	Identifier	A_STORE		2726994	1					
ANR	2727488	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_STORE	1530:12:60741:60795	2726994	1	True				
ANR	2727489	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_STORE		2726994	0		|=			
ANR	2727490	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727491	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727492	Identifier	hexagon_opcodes		2726994	0					
ANR	2727493	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727494	Identifier	i		2726994	0					
ANR	2727495	PrimaryExpression	1		2726994	1					
ANR	2727496	Identifier	flags		2726994	1					
ANR	2727497	Identifier	HEXAGON_CODE_IS_STORE		2726994	1					
ANR	2727498	ElseStatement	else		2726994	0					
ANR	2727499	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_LOAD	1532:12:60824:60877	2726994	0	True				
ANR	2727500	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_LOAD		2726994	0		|=			
ANR	2727501	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727502	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727503	Identifier	hexagon_opcodes		2726994	0					
ANR	2727504	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727505	Identifier	i		2726994	0					
ANR	2727506	PrimaryExpression	1		2726994	1					
ANR	2727507	Identifier	flags		2726994	1					
ANR	2727508	Identifier	HEXAGON_CODE_IS_LOAD		2726994	1					
ANR	2727509	IfStatement	if ( HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR )		2726994	14					
ANR	2727510	Condition	HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR	1535:10:60900:60948	2726994	0	True				
ANR	2727511	EqualityExpression	HEXAGON_END_PACKET_GET ( insn ) == HEXAGON_END_PAIR		2726994	0		==			
ANR	2727512	CallExpression	HEXAGON_END_PACKET_GET ( insn )		2726994	0					
ANR	2727513	Callee	HEXAGON_END_PACKET_GET		2726994	0					
ANR	2727514	Identifier	HEXAGON_END_PACKET_GET		2726994	0					
ANR	2727515	ArgumentList	insn		2726994	1					
ANR	2727516	Argument	insn		2726994	0					
ANR	2727517	Identifier	insn		2726994	0					
ANR	2727518	Identifier	HEXAGON_END_PAIR		2726994	1					
ANR	2727519	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_DUPLEX	1536:8:60959:61014	2726994	1	True				
ANR	2727520	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_DUPLEX		2726994	0		|=			
ANR	2727521	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727522	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727523	Identifier	hexagon_opcodes		2726994	0					
ANR	2727524	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727525	Identifier	i		2726994	0					
ANR	2727526	PrimaryExpression	1		2726994	1					
ANR	2727527	Identifier	flags		2726994	1					
ANR	2727528	Identifier	HEXAGON_CODE_IS_DUPLEX		2726994	1					
ANR	2727529	ElseStatement	else		2726994	0					
ANR	2727530	IfStatement	if ( ( hexagon_opcodes [ i - 1 ] . attributes & PACKED ) )		2726994	0					
ANR	2727531	Condition	hexagon_opcodes [ i - 1 ] . attributes & PACKED	1537:15:61031:61075	2726994	0	True				
ANR	2727532	BitAndExpression	hexagon_opcodes [ i - 1 ] . attributes & PACKED		2726994	0		&			
ANR	2727533	MemberAccess	hexagon_opcodes [ i - 1 ] . attributes		2726994	0					
ANR	2727534	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727535	Identifier	hexagon_opcodes		2726994	0					
ANR	2727536	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727537	Identifier	i		2726994	0					
ANR	2727538	PrimaryExpression	1		2726994	1					
ANR	2727539	Identifier	attributes		2726994	1					
ANR	2727540	Identifier	PACKED		2726994	1					
ANR	2727541	ExpressionStatement	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_COMPND	1538:8:61086:61141	2726994	1	True				
ANR	2727542	AssignmentExpression	hexagon_opcodes [ i - 1 ] . flags |= HEXAGON_CODE_IS_COMPND		2726994	0		|=			
ANR	2727543	MemberAccess	hexagon_opcodes [ i - 1 ] . flags		2726994	0					
ANR	2727544	ArrayIndexing	hexagon_opcodes [ i - 1 ]		2726994	0					
ANR	2727545	Identifier	hexagon_opcodes		2726994	0					
ANR	2727546	AdditiveExpression	i - 1		2726994	1		-			
ANR	2727547	Identifier	i		2726994	0					
ANR	2727548	PrimaryExpression	1		2726994	1					
ANR	2727549	Identifier	flags		2726994	1					
ANR	2727550	Identifier	HEXAGON_CODE_IS_COMPND		2726994	1					
ANR	2727551	ExpressionStatement	"puts ( ""Hash Table Depth:"" )"	1542:4:61160:61186	2726994	13	True				
ANR	2727552	CallExpression	"puts ( ""Hash Table Depth:"" )"		2726994	0					
ANR	2727553	Callee	puts		2726994	0					
ANR	2727554	Identifier	puts		2726994	0					
ANR	2727555	ArgumentList	"""Hash Table Depth:"""		2726994	1					
ANR	2727556	Argument	"""Hash Table Depth:"""		2726994	0					
ANR	2727557	PrimaryExpression	"""Hash Table Depth:"""		2726994	0					
ANR	2727558	ForStatement	for ( i = 0 ; i < HEXAGON_HASH_SIZE ; i ++ )		2726994	14					
ANR	2727559	ForInit	i = 0 ;	1543:9:61197:61202	2726994	0	True				
ANR	2727560	AssignmentExpression	i = 0		2726994	0		=			
ANR	2727561	Identifier	i		2726994	0					
ANR	2727562	PrimaryExpression	0		2726994	1					
ANR	2727563	Condition	i < HEXAGON_HASH_SIZE	1543:16:61204:61224	2726994	1	True				
ANR	2727564	RelationalExpression	i < HEXAGON_HASH_SIZE		2726994	0		<			
ANR	2727565	Identifier	i		2726994	0					
ANR	2727566	Identifier	HEXAGON_HASH_SIZE		2726994	1					
ANR	2727567	PostIncDecOperationExpression	i ++	1543:39:61227:61229	2726994	2	True				
ANR	2727568	Identifier	i		2726994	0					
ANR	2727569	IncDec	++		2726994	1					
ANR	2727570	CompoundStatement		113:8:4084:4092	2726994	3					
ANR	2727571	IdentifierDeclStatement	hexagon_opcode * op ;	1545:8:61248:61266	2726994	0	True				
ANR	2727572	IdentifierDecl	* op		2726994	0					
ANR	2727573	IdentifierDeclType	hexagon_opcode *		2726994	0					
ANR	2727574	Identifier	op		2726994	1					
ANR	2727575	IdentifierDeclStatement	size_t j ;	1546:8:61276:61284	2726994	1	True				
ANR	2727576	IdentifierDecl	j		2726994	0					
ANR	2727577	IdentifierDeclType	size_t		2726994	0					
ANR	2727578	Identifier	j		2726994	1					
ANR	2727579	ForStatement	"for ( j = 0 , op = opcode_map [ i ] ; op ; j ++ )"		2726994	2					
ANR	2727580	ForInit	"j = 0 , op = opcode_map [ i ] ;"	1548:13:61300:61326	2726994	0	True				
ANR	2727581	Expression	"j = 0 , op = opcode_map [ i ]"		2726994	0					
ANR	2727582	AssignmentExpression	j = 0		2726994	0		=			
ANR	2727583	Identifier	j		2726994	0					
ANR	2727584	PrimaryExpression	0		2726994	1					
ANR	2727585	AssignmentExpression	op = opcode_map [ i ]		2726994	1		=			
ANR	2727586	Identifier	op		2726994	0					
ANR	2727587	ArrayIndexing	opcode_map [ i ]		2726994	1					
ANR	2727588	Identifier	opcode_map		2726994	0					
ANR	2727589	Identifier	i		2726994	1					
ANR	2727590	Condition	op	1548:41:61328:61329	2726994	1	True				
ANR	2727591	Identifier	op		2726994	0					
ANR	2727592	PostIncDecOperationExpression	j ++	1548:45:61332:61334	2726994	2	True				
ANR	2727593	Identifier	j		2726994	0					
ANR	2727594	IncDec	++		2726994	1					
ANR	2727595	ExpressionStatement	op = HEXAGON_CODE_NEXT_ASM ( op )	1549:10:61347:61378	2726994	3	True				
ANR	2727596	AssignmentExpression	op = HEXAGON_CODE_NEXT_ASM ( op )		2726994	0		=			
ANR	2727597	Identifier	op		2726994	0					
ANR	2727598	CallExpression	HEXAGON_CODE_NEXT_ASM ( op )		2726994	1					
ANR	2727599	Callee	HEXAGON_CODE_NEXT_ASM		2726994	0					
ANR	2727600	Identifier	HEXAGON_CODE_NEXT_ASM		2726994	0					
ANR	2727601	ArgumentList	op		2726994	1					
ANR	2727602	Argument	op		2726994	0					
ANR	2727603	Identifier	op		2726994	0					
ANR	2727604	ExpressionStatement	"printf ( ""#%02ld ('%c'): %02ld\\t"" , i , ( i % HEXAGON_HASH_1 ) + 'a' , j )"	1551:8:61389:61456	2726994	3	True				
ANR	2727605	CallExpression	"printf ( ""#%02ld ('%c'): %02ld\\t"" , i , ( i % HEXAGON_HASH_1 ) + 'a' , j )"		2726994	0					
ANR	2727606	Callee	printf		2726994	0					
ANR	2727607	Identifier	printf		2726994	0					
ANR	2727608	ArgumentList	"""#%02ld ('%c'): %02ld\\t"""		2726994	1					
ANR	2727609	Argument	"""#%02ld ('%c'): %02ld\\t"""		2726994	0					
ANR	2727610	PrimaryExpression	"""#%02ld ('%c'): %02ld\\t"""		2726994	0					
ANR	2727611	Argument	i		2726994	1					
ANR	2727612	Identifier	i		2726994	0					
ANR	2727613	Argument	( i % HEXAGON_HASH_1 ) + 'a'		2726994	2					
ANR	2727614	AdditiveExpression	( i % HEXAGON_HASH_1 ) + 'a'		2726994	0		+			
ANR	2727615	MultiplicativeExpression	i % HEXAGON_HASH_1		2726994	0		%			
ANR	2727616	Identifier	i		2726994	0					
ANR	2727617	Identifier	HEXAGON_HASH_1		2726994	1					
ANR	2727618	PrimaryExpression	'a'		2726994	1					
ANR	2727619	Argument	j		2726994	3					
ANR	2727620	Identifier	j		2726994	0					
ANR	2727621	ExpressionStatement	"puts ( """" )"	1553:4:61470:61479	2726994	15	True				
ANR	2727622	CallExpression	"puts ( """" )"		2726994	0					
ANR	2727623	Callee	puts		2726994	0					
ANR	2727624	Identifier	puts		2726994	0					
ANR	2727625	ArgumentList	""""""		2726994	1					
ANR	2727626	Argument	""""""		2726994	0					
ANR	2727627	PrimaryExpression	""""""		2726994	0					
ANR	2727628	ExpressionStatement	"puts ( ""Hash Table Syntax:"" )"	1555:4:61486:61513	2726994	16	True				
ANR	2727629	CallExpression	"puts ( ""Hash Table Syntax:"" )"		2726994	0					
ANR	2727630	Callee	puts		2726994	0					
ANR	2727631	Identifier	puts		2726994	0					
ANR	2727632	ArgumentList	"""Hash Table Syntax:"""		2726994	1					
ANR	2727633	Argument	"""Hash Table Syntax:"""		2726994	0					
ANR	2727634	PrimaryExpression	"""Hash Table Syntax:"""		2726994	0					
ANR	2727635	ForStatement	for ( i = 0 ; i < HEXAGON_HASH_SIZE ; i ++ )		2726994	17					
ANR	2727636	ForInit	i = 0 ;	1556:9:61524:61529	2726994	0	True				
ANR	2727637	AssignmentExpression	i = 0		2726994	0		=			
ANR	2727638	Identifier	i		2726994	0					
ANR	2727639	PrimaryExpression	0		2726994	1					
ANR	2727640	Condition	i < HEXAGON_HASH_SIZE	1556:16:61531:61551	2726994	1	True				
ANR	2727641	RelationalExpression	i < HEXAGON_HASH_SIZE		2726994	0		<			
ANR	2727642	Identifier	i		2726994	0					
ANR	2727643	Identifier	HEXAGON_HASH_SIZE		2726994	1					
ANR	2727644	PostIncDecOperationExpression	i ++	1556:39:61554:61556	2726994	2	True				
ANR	2727645	Identifier	i		2726994	0					
ANR	2727646	IncDec	++		2726994	1					
ANR	2727647	CompoundStatement		126:8:4411:4419	2726994	3					
ANR	2727648	IdentifierDeclStatement	hexagon_opcode * op ;	1558:8:61575:61593	2726994	0	True				
ANR	2727649	IdentifierDecl	* op		2726994	0					
ANR	2727650	IdentifierDeclType	hexagon_opcode *		2726994	0					
ANR	2727651	Identifier	op		2726994	1					
ANR	2727652	IdentifierDeclStatement	size_t j ;	1559:8:61603:61611	2726994	1	True				
ANR	2727653	IdentifierDecl	j		2726994	0					
ANR	2727654	IdentifierDeclType	size_t		2726994	0					
ANR	2727655	Identifier	j		2726994	1					
ANR	2727656	ExpressionStatement	"printf ( ""#%02ld ('%c')\\n"" , i , ( i % HEXAGON_HASH_1 ) + 'a' )"	1561:8:61622:61679	2726994	2	True				
ANR	2727657	CallExpression	"printf ( ""#%02ld ('%c')\\n"" , i , ( i % HEXAGON_HASH_1 ) + 'a' )"		2726994	0					
ANR	2727658	Callee	printf		2726994	0					
ANR	2727659	Identifier	printf		2726994	0					
ANR	2727660	ArgumentList	"""#%02ld ('%c')\\n"""		2726994	1					
ANR	2727661	Argument	"""#%02ld ('%c')\\n"""		2726994	0					
ANR	2727662	PrimaryExpression	"""#%02ld ('%c')\\n"""		2726994	0					
ANR	2727663	Argument	i		2726994	1					
ANR	2727664	Identifier	i		2726994	0					
ANR	2727665	Argument	( i % HEXAGON_HASH_1 ) + 'a'		2726994	2					
ANR	2727666	AdditiveExpression	( i % HEXAGON_HASH_1 ) + 'a'		2726994	0		+			
ANR	2727667	MultiplicativeExpression	i % HEXAGON_HASH_1		2726994	0		%			
ANR	2727668	Identifier	i		2726994	0					
ANR	2727669	Identifier	HEXAGON_HASH_1		2726994	1					
ANR	2727670	PrimaryExpression	'a'		2726994	1					
ANR	2727671	ForStatement	"for ( j = 0 , op = opcode_map [ i ] ; op ; j ++ , op = HEXAGON_CODE_NEXT_ASM ( op ) )"		2726994	3					
ANR	2727672	ForInit	"j = 0 , op = opcode_map [ i ] ;"	1563:13:61695:61721	2726994	0	True				
ANR	2727673	Expression	"j = 0 , op = opcode_map [ i ]"		2726994	0					
ANR	2727674	AssignmentExpression	j = 0		2726994	0		=			
ANR	2727675	Identifier	j		2726994	0					
ANR	2727676	PrimaryExpression	0		2726994	1					
ANR	2727677	AssignmentExpression	op = opcode_map [ i ]		2726994	1		=			
ANR	2727678	Identifier	op		2726994	0					
ANR	2727679	ArrayIndexing	opcode_map [ i ]		2726994	1					
ANR	2727680	Identifier	opcode_map		2726994	0					
ANR	2727681	Identifier	i		2726994	1					
ANR	2727682	Condition	op	1563:41:61723:61724	2726994	1	True				
ANR	2727683	Identifier	op		2726994	0					
ANR	2727684	Expression	"j ++ , op = HEXAGON_CODE_NEXT_ASM ( op )"	1563:45:61727:61762	2726994	2	True				
ANR	2727685	PostIncDecOperationExpression	j ++		2726994	0					
ANR	2727686	Identifier	j		2726994	0					
ANR	2727687	IncDec	++		2726994	1					
ANR	2727688	AssignmentExpression	op = HEXAGON_CODE_NEXT_ASM ( op )		2726994	1		=			
ANR	2727689	Identifier	op		2726994	0					
ANR	2727690	CallExpression	HEXAGON_CODE_NEXT_ASM ( op )		2726994	1					
ANR	2727691	Callee	HEXAGON_CODE_NEXT_ASM		2726994	0					
ANR	2727692	Identifier	HEXAGON_CODE_NEXT_ASM		2726994	0					
ANR	2727693	ArgumentList	op		2726994	1					
ANR	2727694	Argument	op		2726994	0					
ANR	2727695	Identifier	op		2726994	0					
ANR	2727696	ExpressionStatement	puts ( op -> syntax )	1564:10:61775:61792	2726994	3	True				
ANR	2727697	CallExpression	puts ( op -> syntax )		2726994	0					
ANR	2727698	Callee	puts		2726994	0					
ANR	2727699	Identifier	puts		2726994	0					
ANR	2727700	ArgumentList	op -> syntax		2726994	1					
ANR	2727701	Argument	op -> syntax		2726994	0					
ANR	2727702	PtrMemberAccess	op -> syntax		2726994	0					
ANR	2727703	Identifier	op		2726994	0					
ANR	2727704	Identifier	syntax		2726994	1					
ANR	2727705	ExpressionStatement	"puts ( """" )"	1566:8:61803:61812	2726994	4	True				
ANR	2727706	CallExpression	"puts ( """" )"		2726994	0					
ANR	2727707	Callee	puts		2726994	0					
ANR	2727708	Identifier	puts		2726994	0					
ANR	2727709	ArgumentList	""""""		2726994	1					
ANR	2727710	Argument	""""""		2726994	0					
ANR	2727711	PrimaryExpression	""""""		2726994	0					
ANR	2727712	ReturnType	void		2726994	1					
ANR	2727713	Identifier	hexagon_opcode_init_tables		2726994	2					
ANR	2727714	ParameterList	int cpu		2726994	3					
ANR	2727715	Parameter	int cpu	1433:1:57182:57188	2726994	0	True				
ANR	2727716	ParameterType	int		2726994	0					
ANR	2727717	Identifier	cpu		2726994	1					
ANR	2727718	CFGEntryNode	ENTRY		2726994		True				
ANR	2727719	CFGExitNode	EXIT		2726994		True				
ANR	2727720	Symbol	hexagon_if_arch_v5		2726994						
ANR	2727721	Symbol	hexagon_if_arch_v4		2726994						
ANR	2727722	Symbol	hexagon_if_arch_v3		2726994						
ANR	2727723	Symbol	* op		2726994						
ANR	2727724	Symbol	hexagon_if_arch_v2		2726994						
ANR	2727725	Symbol	HEXAGON_END_PACKET_MASK		2726994						
ANR	2727726	Symbol	op -> syntax		2726994						
ANR	2727727	Symbol	hexagon_opcodes [ i - 1 ] . enc		2726994						
ANR	2727728	Symbol	A_STORE		2726994						
ANR	2727729	Symbol	opcode		2726994						
ANR	2727730	Symbol	hexagon_opcodes		2726994						
ANR	2727731	Symbol	HEXAGON_CODE_NEXT_ASM		2726994						
ANR	2727732	Symbol	cpu_type		2726994						
ANR	2727733	Symbol	HEXAGON_CODE_IS_DUPLEX		2726994						
ANR	2727734	Symbol	icode		2726994						
ANR	2727735	Symbol	strcmp		2726994						
ANR	2727736	Symbol	A_IT_NOP		2726994						
ANR	2727737	Symbol	hexagon_kext_mask		2726994						
ANR	2727738	Symbol	bits		2726994						
ANR	2727739	Symbol	HEXAGON_HASH_SIZE		2726994						
ANR	2727740	Symbol	cpu		2726994						
ANR	2727741	Symbol	icode_map		2726994						
ANR	2727742	Symbol	HEXAGON_HASH_1		2726994						
ANR	2727743	Symbol	HEXAGON_IS_V4		2726994						
ANR	2727744	Symbol	hexagon_opcodes_v2		2726994						
ANR	2727745	Symbol	hexagon_opcodes_count_v3		2726994						
ANR	2727746	Symbol	str		2726994						
ANR	2727747	Symbol	HEXAGON_IS_V5		2726994						
ANR	2727748	Symbol	hexagon_opcodes_count_v4		2726994						
ANR	2727749	Symbol	hexagon_opcodes_v4		2726994						
ANR	2727750	Symbol	hexagon_opcodes_v3		2726994						
ANR	2727751	Symbol	hexagon_opcodes_count_v2		2726994						
ANR	2727752	Symbol	hexagon_opcodes [ i - 1 ] . next_asm		2726994						
ANR	2727753	Symbol	HEXAGON_CODE_IS_PREFIX		2726994						
ANR	2727754	Symbol	hexagon_opcodes_count		2726994						
ANR	2727755	Symbol	* hexagon_opcodes		2726994						
ANR	2727756	Symbol	A_RESTRICT_SINGLE_MEM_FIRST		2726994						
ANR	2727757	Symbol	HEXAGON_IS_V2		2726994						
ANR	2727758	Symbol	HEXAGON_IS_V3		2726994						
ANR	2727759	Symbol	* icode		2726994						
ANR	2727760	Symbol	HEXAGON_END_PAIR		2726994						
ANR	2727761	Symbol	hexagon_encode_mask		2726994						
ANR	2727762	Symbol	HEXAGON_CODE_IS_LOAD		2726994						
ANR	2727763	Symbol	HEXAGON_CODE_IS_STORE		2726994						
ANR	2727764	Symbol	hexagon_nop_mask		2726994						
ANR	2727765	Symbol	hexagon_opcodes_v5		2726994						
ANR	2727766	Symbol	hexagon_opcodes_count_v5		2726994						
ANR	2727767	Symbol	hexagon_nop		2726994						
ANR	2727768	Symbol	hexagon_opcodes [ i - 1 ] . next_dis		2726994						
ANR	2727769	Symbol	HEXAGON_HASH_ICODE		2726994						
ANR	2727770	Symbol	calloc		2726994						
ANR	2727771	Symbol	PACKED		2726994						
ANR	2727772	Symbol	HEXAGON_CPU_TYPE_UNINIT		2726994						
ANR	2727773	Symbol	HEXAGON_CODE_IS_MEMORY		2726994						
ANR	2727774	Symbol	HEXAGON_CODE_IS_COMPND		2726994						
ANR	2727775	Symbol	hexagon_kext		2726994						
ANR	2727776	Symbol	* str		2726994						
ANR	2727777	Symbol	hexagon_encode_opcode		2726994						
ANR	2727778	Symbol	HEXAGON_END_PACKET_POS		2726994						
ANR	2727779	Symbol	hexagon_opcodes [ i ] . enc		2726994						
ANR	2727780	Symbol	A_IT_EXTENDER		2726994						
ANR	2727781	Symbol	HEXAGON_END_PACKET_GET		2726994						
ANR	2727782	Symbol	op		2726994						
ANR	2727783	Symbol	HEXAGON_CODE_IS_BRANCH		2726994						
ANR	2727784	Symbol	i		2726994						
ANR	2727785	Symbol	HEXAGON_INSN_LEN		2726994						
ANR	2727786	Symbol	j		2726994						
ANR	2727787	Symbol	hexagon_opcodes [ i - 1 ] . flags		2726994						
ANR	2727788	Symbol	* opcode_map		2726994						
ANR	2727789	Symbol	* icode_map		2726994						
ANR	2727790	Symbol	insn		2726994						
ANR	2727791	Symbol	HEXAGON_HASH_OPCODE		2726994						
ANR	2727792	Symbol	* i		2726994						
ANR	2727793	Symbol	hexagon_icode_hash_bits		2726994						
ANR	2727794	Symbol	A_BRANCHADDER		2726994						
ANR	2727795	Symbol	hexagon_opcodes [ i - 1 ] . attributes		2726994						
ANR	2727796	Symbol	hexagon_opcodes [ i - 1 ] . syntax		2726994						
ANR	2727797	Symbol	opcode_map		2726994						
ANR	2727798	Symbol	cpu_flag		2726994						
ANR	2727799	Symbol	* opcode		2726994						
ANR	2727800	Function	hexagon_opcode_supported	1574:0:61969:62088							
ANR	2727801	FunctionDef	hexagon_opcode_supported (const hexagon_opcode * opcode)		2727800	0					
ANR	2727802	CompoundStatement		1577:0:62029:62088	2727800	0					
ANR	2727803	ReturnStatement	return ( HEXAGON_CODE_CPU ( opcode -> flags ) <= cpu_type ) ;	1578:2:62033:62086	2727800	0	True				
ANR	2727804	RelationalExpression	HEXAGON_CODE_CPU ( opcode -> flags ) <= cpu_type		2727800	0		<=			
ANR	2727805	CallExpression	HEXAGON_CODE_CPU ( opcode -> flags )		2727800	0					
ANR	2727806	Callee	HEXAGON_CODE_CPU		2727800	0					
ANR	2727807	Identifier	HEXAGON_CODE_CPU		2727800	0					
ANR	2727808	ArgumentList	opcode -> flags		2727800	1					
ANR	2727809	Argument	opcode -> flags		2727800	0					
ANR	2727810	PtrMemberAccess	opcode -> flags		2727800	0					
ANR	2727811	Identifier	opcode		2727800	0					
ANR	2727812	Identifier	flags		2727800	1					
ANR	2727813	Identifier	cpu_type		2727800	1					
ANR	2727814	ReturnType	int		2727800	1					
ANR	2727815	Identifier	hexagon_opcode_supported		2727800	2					
ANR	2727816	ParameterList	const hexagon_opcode * opcode		2727800	3					
ANR	2727817	Parameter	const hexagon_opcode * opcode	1576:1:61999:62026	2727800	0	True				
ANR	2727818	ParameterType	const hexagon_opcode *		2727800	0					
ANR	2727819	Identifier	opcode		2727800	1					
ANR	2727820	CFGEntryNode	ENTRY		2727800		True				
ANR	2727821	CFGExitNode	EXIT		2727800		True				
ANR	2727822	Symbol	HEXAGON_CODE_CPU		2727800						
ANR	2727823	Symbol	cpu_type		2727800						
ANR	2727824	Symbol	opcode -> flags		2727800						
ANR	2727825	Symbol	opcode		2727800						
ANR	2727826	Symbol	* opcode		2727800						
ANR	2727827	Function	hexagon_opcode_lookup_asm	1583:0:62155:62277							
ANR	2727828	FunctionDef	hexagon_opcode_lookup_asm (const char * insn)		2727827	0					
ANR	2727829	CompoundStatement		1586:0:62223:62277	2727827	0					
ANR	2727830	ReturnStatement	return ( opcode_map [ HEXAGON_HASH_OPCODE ( insn ) ] ) ;	1587:2:62227:62275	2727827	0	True				
ANR	2727831	ArrayIndexing	opcode_map [ HEXAGON_HASH_OPCODE ( insn ) ]		2727827	0					
ANR	2727832	Identifier	opcode_map		2727827	0					
ANR	2727833	CallExpression	HEXAGON_HASH_OPCODE ( insn )		2727827	1					
ANR	2727834	Callee	HEXAGON_HASH_OPCODE		2727827	0					
ANR	2727835	Identifier	HEXAGON_HASH_OPCODE		2727827	0					
ANR	2727836	ArgumentList	insn		2727827	1					
ANR	2727837	Argument	insn		2727827	0					
ANR	2727838	Identifier	insn		2727827	0					
ANR	2727839	ReturnType	const hexagon_opcode *		2727827	1					
ANR	2727840	Identifier	hexagon_opcode_lookup_asm		2727827	2					
ANR	2727841	ParameterList	const char * insn		2727827	3					
ANR	2727842	Parameter	const char * insn	1585:1:62205:62220	2727827	0	True				
ANR	2727843	ParameterType	const char *		2727827	0					
ANR	2727844	Identifier	insn		2727827	1					
ANR	2727845	CFGEntryNode	ENTRY		2727827		True				
ANR	2727846	CFGExitNode	EXIT		2727827		True				
ANR	2727847	Symbol	insn		2727827						
ANR	2727848	Symbol	HEXAGON_HASH_OPCODE		2727827						
ANR	2727849	Symbol	opcode_map		2727827						
ANR	2727850	Symbol	* opcode_map		2727827						
ANR	2727851	Symbol	* HEXAGON_HASH_OPCODE		2727827						
ANR	2727852	Function	hexagon_opcode_lookup_dis	1592:0:62347:62500							
ANR	2727853	FunctionDef	hexagon_opcode_lookup_dis (hexagon_insn insn)		2727852	0					
ANR	2727854	CompoundStatement		1595:0:62416:62500	2727852	0					
ANR	2727855	IfStatement	if ( icode_map )		2727852	0					
ANR	2727856	Condition	icode_map	1596:4:62422:62430	2727852	0	True				
ANR	2727857	Identifier	icode_map		2727852	0					
ANR	2727858	CompoundStatement		2:15:16:16	2727852	1					
ANR	2727859	ReturnStatement	return ( icode_map [ HEXAGON_HASH_ICODE ( insn ) ] ) ;	1597:2:62437:62483	2727852	0	True				
ANR	2727860	ArrayIndexing	icode_map [ HEXAGON_HASH_ICODE ( insn ) ]		2727852	0					
ANR	2727861	Identifier	icode_map		2727852	0					
ANR	2727862	CallExpression	HEXAGON_HASH_ICODE ( insn )		2727852	1					
ANR	2727863	Callee	HEXAGON_HASH_ICODE		2727852	0					
ANR	2727864	Identifier	HEXAGON_HASH_ICODE		2727852	0					
ANR	2727865	ArgumentList	insn		2727852	1					
ANR	2727866	Argument	insn		2727852	0					
ANR	2727867	Identifier	insn		2727852	0					
ANR	2727868	ReturnStatement	return NULL ;	1599:0:62487:62498	2727852	1	True				
ANR	2727869	Identifier	NULL		2727852	0					
ANR	2727870	ReturnType	const hexagon_opcode *		2727852	1					
ANR	2727871	Identifier	hexagon_opcode_lookup_dis		2727852	2					
ANR	2727872	ParameterList	hexagon_insn insn		2727852	3					
ANR	2727873	Parameter	hexagon_insn insn	1594:1:62397:62413	2727852	0	True				
ANR	2727874	ParameterType	hexagon_insn		2727852	0					
ANR	2727875	Identifier	insn		2727852	1					
ANR	2727876	CFGEntryNode	ENTRY		2727852		True				
ANR	2727877	CFGExitNode	EXIT		2727852		True				
ANR	2727878	Symbol	* icode_map		2727852						
ANR	2727879	Symbol	insn		2727852						
ANR	2727880	Symbol	HEXAGON_HASH_ICODE		2727852						
ANR	2727881	Symbol	NULL		2727852						
ANR	2727882	Symbol	* HEXAGON_HASH_ICODE		2727852						
ANR	2727883	Symbol	icode_map		2727852						
ANR	2727884	Function	hexagon_lookup_insn	1602:0:62503:63076							
ANR	2727885	FunctionDef	hexagon_lookup_insn (hexagon_insn insn)		2727884	0					
ANR	2727886	CompoundStatement		1605:0:62566:63076	2727884	0					
ANR	2727887	IdentifierDeclStatement	const hexagon_opcode * opcode ;	1606:2:62570:62598	2727884	0	True				
ANR	2727888	IdentifierDecl	* opcode		2727884	0					
ANR	2727889	IdentifierDeclType	const hexagon_opcode *		2727884	0					
ANR	2727890	Identifier	opcode		2727884	1					
ANR	2727891	IdentifierDeclStatement	hexagon_insn encode ;	1607:2:62602:62621	2727884	1	True				
ANR	2727892	IdentifierDecl	encode		2727884	0					
ANR	2727893	IdentifierDeclType	hexagon_insn		2727884	0					
ANR	2727894	Identifier	encode		2727884	1					
ANR	2727895	IdentifierDeclStatement	hexagon_insn mask ;	1608:2:62625:62642	2727884	2	True				
ANR	2727896	IdentifierDecl	mask		2727884	0					
ANR	2727897	IdentifierDeclType	hexagon_insn		2727884	0					
ANR	2727898	Identifier	mask		2727884	1					
ANR	2727899	ExpressionStatement	insn = HEXAGON_END_PACKET_RESET ( insn )	1611:2:62678:62716	2727884	3	True				
ANR	2727900	AssignmentExpression	insn = HEXAGON_END_PACKET_RESET ( insn )		2727884	0		=			
ANR	2727901	Identifier	insn		2727884	0					
ANR	2727902	CallExpression	HEXAGON_END_PACKET_RESET ( insn )		2727884	1					
ANR	2727903	Callee	HEXAGON_END_PACKET_RESET		2727884	0					
ANR	2727904	Identifier	HEXAGON_END_PACKET_RESET		2727884	0					
ANR	2727905	ArgumentList	insn		2727884	1					
ANR	2727906	Argument	insn		2727884	0					
ANR	2727907	Identifier	insn		2727884	0					
ANR	2727908	ForStatement	for ( opcode = hexagon_opcode_lookup_dis ( insn ) ; opcode ; opcode = HEXAGON_CODE_NEXT_DIS ( opcode ) )		2727884	4					
ANR	2727909	ForInit	opcode = hexagon_opcode_lookup_dis ( insn ) ;	1613:7:62726:62767	2727884	0	True				
ANR	2727910	AssignmentExpression	opcode = hexagon_opcode_lookup_dis ( insn )		2727884	0		=			
ANR	2727911	Identifier	opcode		2727884	0					
ANR	2727912	CallExpression	hexagon_opcode_lookup_dis ( insn )		2727884	1					
ANR	2727913	Callee	hexagon_opcode_lookup_dis		2727884	0					
ANR	2727914	Identifier	hexagon_opcode_lookup_dis		2727884	0					
ANR	2727915	ArgumentList	insn		2727884	1					
ANR	2727916	Argument	insn		2727884	0					
ANR	2727917	Identifier	insn		2727884	0					
ANR	2727918	Condition	opcode	1614:7:62776:62781	2727884	1	True				
ANR	2727919	Identifier	opcode		2727884	0					
ANR	2727920	AssignmentExpression	opcode = HEXAGON_CODE_NEXT_DIS ( opcode )	1615:7:62791:62829	2727884	2	True	=			
ANR	2727921	Identifier	opcode		2727884	0					
ANR	2727922	CallExpression	HEXAGON_CODE_NEXT_DIS ( opcode )		2727884	1					
ANR	2727923	Callee	HEXAGON_CODE_NEXT_DIS		2727884	0					
ANR	2727924	Identifier	HEXAGON_CODE_NEXT_DIS		2727884	0					
ANR	2727925	ArgumentList	opcode		2727884	1					
ANR	2727926	Argument	opcode		2727884	0					
ANR	2727927	Identifier	opcode		2727884	0					
ANR	2727928	CompoundStatement		12:4:269:269	2727884	3					
ANR	2727929	IfStatement	if ( opcode -> map )		2727884	0					
ANR	2727930	Condition	opcode -> map	1617:10:62848:62858	2727884	0	True				
ANR	2727931	PtrMemberAccess	opcode -> map		2727884	0					
ANR	2727932	Identifier	opcode		2727884	0					
ANR	2727933	Identifier	map		2727884	1					
ANR	2727934	ContinueStatement	continue ;	1618:8:62869:62877	2727884	1	True				
ANR	2727935	ExpressionStatement	encode = hexagon_encode_opcode ( opcode -> enc )	1620:6:62886:62930	2727884	1	True				
ANR	2727936	AssignmentExpression	encode = hexagon_encode_opcode ( opcode -> enc )		2727884	0		=			
ANR	2727937	Identifier	encode		2727884	0					
ANR	2727938	CallExpression	hexagon_encode_opcode ( opcode -> enc )		2727884	1					
ANR	2727939	Callee	hexagon_encode_opcode		2727884	0					
ANR	2727940	Identifier	hexagon_encode_opcode		2727884	0					
ANR	2727941	ArgumentList	opcode -> enc		2727884	1					
ANR	2727942	Argument	opcode -> enc		2727884	0					
ANR	2727943	PtrMemberAccess	opcode -> enc		2727884	0					
ANR	2727944	Identifier	opcode		2727884	0					
ANR	2727945	Identifier	enc		2727884	1					
ANR	2727946	ExpressionStatement	mask = hexagon_encode_mask ( opcode -> enc )	1621:6:62938:62982	2727884	2	True				
ANR	2727947	AssignmentExpression	mask = hexagon_encode_mask ( opcode -> enc )		2727884	0		=			
ANR	2727948	Identifier	mask		2727884	0					
ANR	2727949	CallExpression	hexagon_encode_mask ( opcode -> enc )		2727884	1					
ANR	2727950	Callee	hexagon_encode_mask		2727884	0					
ANR	2727951	Identifier	hexagon_encode_mask		2727884	0					
ANR	2727952	ArgumentList	opcode -> enc		2727884	1					
ANR	2727953	Argument	opcode -> enc		2727884	0					
ANR	2727954	PtrMemberAccess	opcode -> enc		2727884	0					
ANR	2727955	Identifier	opcode		2727884	0					
ANR	2727956	Identifier	enc		2727884	1					
ANR	2727957	IfStatement	if ( ( insn & mask ) == ( encode & mask ) )		2727884	3					
ANR	2727958	Condition	( insn & mask ) == ( encode & mask )	1623:10:62995:63026	2727884	0	True				
ANR	2727959	EqualityExpression	( insn & mask ) == ( encode & mask )		2727884	0		==			
ANR	2727960	BitAndExpression	insn & mask		2727884	0		&			
ANR	2727961	Identifier	insn		2727884	0					
ANR	2727962	Identifier	mask		2727884	1					
ANR	2727963	BitAndExpression	encode & mask		2727884	1		&			
ANR	2727964	Identifier	encode		2727884	0					
ANR	2727965	Identifier	mask		2727884	1					
ANR	2727966	ReturnStatement	return ( opcode ) ;	1624:8:63037:63052	2727884	1	True				
ANR	2727967	Identifier	opcode		2727884	0					
ANR	2727968	ReturnStatement	return NULL ;	1627:2:63063:63074	2727884	5	True				
ANR	2727969	Identifier	NULL		2727884	0					
ANR	2727970	ReturnType	const hexagon_opcode *		2727884	1					
ANR	2727971	Identifier	hexagon_lookup_insn		2727884	2					
ANR	2727972	ParameterList	hexagon_insn insn		2727884	3					
ANR	2727973	Parameter	hexagon_insn insn	1604:1:62547:62563	2727884	0	True				
ANR	2727974	ParameterType	hexagon_insn		2727884	0					
ANR	2727975	Identifier	insn		2727884	1					
ANR	2727976	CFGEntryNode	ENTRY		2727884		True				
ANR	2727977	CFGExitNode	EXIT		2727884		True				
ANR	2727978	Symbol	encode		2727884						
ANR	2727979	Symbol	HEXAGON_END_PACKET_RESET		2727884						
ANR	2727980	Symbol	HEXAGON_CODE_NEXT_DIS		2727884						
ANR	2727981	Symbol	hexagon_opcode_lookup_dis		2727884						
ANR	2727982	Symbol	NULL		2727884						
ANR	2727983	Symbol	opcode		2727884						
ANR	2727984	Symbol	insn		2727884						
ANR	2727985	Symbol	opcode -> map		2727884						
ANR	2727986	Symbol	opcode -> enc		2727884						
ANR	2727987	Symbol	hexagon_encode_mask		2727884						
ANR	2727988	Symbol	hexagon_encode_opcode		2727884						
ANR	2727989	Symbol	mask		2727884						
ANR	2727990	Symbol	* opcode		2727884						
ANR	2727991	Function	hexagon_encode_operand	1643:0:63416:67062							
ANR	2727992	FunctionDef	"hexagon_encode_operand (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , long avalue , long * xvalue , int is_x , int is_rel , char * * errmsg)"		2727991	0					
ANR	2727993	CompoundStatement		1648:0:63592:67062	2727991	0					
ANR	2727994	IdentifierDeclStatement	char enc_letter ;	1649:2:63596:63611	2727991	0	True				
ANR	2727995	IdentifierDecl	enc_letter		2727991	0					
ANR	2727996	IdentifierDeclType	char		2727991	0					
ANR	2727997	Identifier	enc_letter		2727991	1					
ANR	2727998	IdentifierDeclStatement	int shift_count = 0 ;	1650:2:63615:63634	2727991	1	True				
ANR	2727999	IdentifierDecl	shift_count = 0		2727991	0					
ANR	2728000	IdentifierDeclType	int		2727991	0					
ANR	2728001	Identifier	shift_count		2727991	1					
ANR	2728002	AssignmentExpression	shift_count = 0		2727991	2		=			
ANR	2728003	Identifier	shift_count		2727991	0					
ANR	2728004	PrimaryExpression	0		2727991	1					
ANR	2728005	IdentifierDeclStatement	int num_bits = 0 ;	1651:2:63638:63654	2727991	2	True				
ANR	2728006	IdentifierDecl	num_bits = 0		2727991	0					
ANR	2728007	IdentifierDeclType	int		2727991	0					
ANR	2728008	Identifier	num_bits		2727991	1					
ANR	2728009	AssignmentExpression	num_bits = 0		2727991	2		=			
ANR	2728010	Identifier	num_bits		2727991	0					
ANR	2728011	PrimaryExpression	0		2727991	1					
ANR	2728012	IdentifierDeclStatement	size_t len = strlen ( opcode -> enc ) ;	1652:2:63658:63691	2727991	3	True				
ANR	2728013	IdentifierDecl	len = strlen ( opcode -> enc )		2727991	0					
ANR	2728014	IdentifierDeclType	size_t		2727991	0					
ANR	2728015	Identifier	len		2727991	1					
ANR	2728016	AssignmentExpression	len = strlen ( opcode -> enc )		2727991	2		=			
ANR	2728017	Identifier	len		2727991	0					
ANR	2728018	CallExpression	strlen ( opcode -> enc )		2727991	1					
ANR	2728019	Callee	strlen		2727991	0					
ANR	2728020	Identifier	strlen		2727991	0					
ANR	2728021	ArgumentList	opcode -> enc		2727991	1					
ANR	2728022	Argument	opcode -> enc		2727991	0					
ANR	2728023	PtrMemberAccess	opcode -> enc		2727991	0					
ANR	2728024	Identifier	opcode		2727991	0					
ANR	2728025	Identifier	enc		2727991	1					
ANR	2728026	IdentifierDeclStatement	unsigned bits ;	1653:2:63695:63708	2727991	4	True				
ANR	2728027	IdentifierDecl	bits		2727991	0					
ANR	2728028	IdentifierDeclType	unsigned		2727991	0					
ANR	2728029	Identifier	bits		2727991	1					
ANR	2728030	IdentifierDeclStatement	"long smin , smax ;"	1654:2:63712:63727	2727991	5	True				
ANR	2728031	IdentifierDecl	smin		2727991	0					
ANR	2728032	IdentifierDeclType	long		2727991	0					
ANR	2728033	Identifier	smin		2727991	1					
ANR	2728034	IdentifierDecl	smax		2727991	1					
ANR	2728035	IdentifierDeclType	long		2727991	0					
ANR	2728036	Identifier	smax		2727991	1					
ANR	2728037	IdentifierDeclStatement	"unsigned long umin , umax ;"	1655:2:63731:63755	2727991	6	True				
ANR	2728038	IdentifierDecl	umin		2727991	0					
ANR	2728039	IdentifierDeclType	unsigned long		2727991	0					
ANR	2728040	Identifier	umin		2727991	1					
ANR	2728041	IdentifierDecl	umax		2727991	1					
ANR	2728042	IdentifierDeclType	unsigned long		2727991	0					
ANR	2728043	Identifier	umax		2727991	1					
ANR	2728044	IdentifierDeclStatement	"long xer , xed ;"	1656:2:63759:63772	2727991	7	True				
ANR	2728045	IdentifierDecl	xer		2727991	0					
ANR	2728046	IdentifierDeclType	long		2727991	0					
ANR	2728047	Identifier	xer		2727991	1					
ANR	2728048	IdentifierDecl	xed		2727991	1					
ANR	2728049	IdentifierDeclType	long		2727991	0					
ANR	2728050	Identifier	xed		2727991	1					
ANR	2728051	ClassDefStatement	union { long s ; unsigned long u ; } value ;	1657:2:63776:63836	2727991	8	True				
ANR	2728052	IdentifierDecl	value		2727991	0					
ANR	2728053	IdentifierDeclType			2727991	0					
ANR	2728054	Identifier	value		2727991	1					
ANR	2728055	IdentifierDeclStatement	int is_s ;	1662:2:63840:63848	2727991	9	True				
ANR	2728056	IdentifierDecl	is_s		2727991	0					
ANR	2728057	IdentifierDeclType	int		2727991	0					
ANR	2728058	Identifier	is_s		2727991	1					
ANR	2728059	IdentifierDeclStatement	ptrdiff_t i ;	1663:2:63852:63863	2727991	10	True				
ANR	2728060	IdentifierDecl	i		2727991	0					
ANR	2728061	IdentifierDeclType	ptrdiff_t		2727991	0					
ANR	2728062	Identifier	i		2727991	1					
ANR	2728063	Statement	static	1664:2:63867:63872	2727991	11	True				
ANR	2728064	IdentifierDeclStatement	char buf [ 500 ] ;	1664:9:63874:63888	2727991	12	True				
ANR	2728065	IdentifierDecl	buf [ 500 ]		2727991	0					
ANR	2728066	IdentifierDeclType	char [ 500 ]		2727991	0					
ANR	2728067	Identifier	buf		2727991	1					
ANR	2728068	PrimaryExpression	500		2727991	2					
ANR	2728069	ExpressionStatement	value . s = avalue	1666:2:63893:63909	2727991	13	True				
ANR	2728070	AssignmentExpression	value . s = avalue		2727991	0		=			
ANR	2728071	MemberAccess	value . s		2727991	0					
ANR	2728072	Identifier	value		2727991	0					
ANR	2728073	Identifier	s		2727991	1					
ANR	2728074	Identifier	avalue		2727991	1					
ANR	2728075	ExpressionStatement	is_x = is_x && xvalue	1668:2:63914:63935	2727991	14	True				
ANR	2728076	AssignmentExpression	is_x = is_x && xvalue		2727991	0		=			
ANR	2728077	Identifier	is_x		2727991	0					
ANR	2728078	AndExpression	is_x && xvalue		2727991	1		&&			
ANR	2728079	Identifier	is_x		2727991	0					
ANR	2728080	Identifier	xvalue		2727991	1					
ANR	2728081	ExpressionStatement	is_s = ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )	1669:2:63939:63990	2727991	15	True				
ANR	2728082	AssignmentExpression	is_s = ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )		2727991	0		=			
ANR	2728083	Identifier	is_s		2727991	0					
ANR	2728084	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SIGNED		2727991	1		&			
ANR	2728085	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728086	Identifier	operand		2727991	0					
ANR	2728087	Identifier	flags		2727991	1					
ANR	2728088	Identifier	HEXAGON_OPERAND_IS_SIGNED		2727991	1					
ANR	2728089	ExpressionStatement	enc_letter = operand -> enc_letter	1671:2:63995:64027	2727991	16	True				
ANR	2728090	AssignmentExpression	enc_letter = operand -> enc_letter		2727991	0		=			
ANR	2728091	Identifier	enc_letter		2727991	0					
ANR	2728092	PtrMemberAccess	operand -> enc_letter		2727991	1					
ANR	2728093	Identifier	operand		2727991	0					
ANR	2728094	Identifier	enc_letter		2727991	1					
ANR	2728095	IfStatement	if ( FALSE && is_rel )		2727991	17					
ANR	2728096	Condition	FALSE && is_rel	1674:6:64080:64094	2727991	0	True				
ANR	2728097	AndExpression	FALSE && is_rel		2727991	0		&&			
ANR	2728098	Identifier	FALSE		2727991	0					
ANR	2728099	Identifier	is_rel		2727991	1					
ANR	2728100	SwitchStatement	switch ( opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE ) )		2727991	1					
ANR	2728101	Condition	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )	1675:12:64109:64208	2727991	0	True				
ANR	2728102	BitAndExpression	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )		2727991	0		&			
ANR	2728103	PtrMemberAccess	opcode -> attributes		2727991	0					
ANR	2728104	Identifier	opcode		2727991	0					
ANR	2728105	Identifier	attributes		2727991	1					
ANR	2728106	InclusiveOrExpression	EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE		2727991	1		|			
ANR	2728107	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		2727991	0					
ANR	2728108	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		2727991	1					
ANR	2728109	CompoundStatement		30:6:624:624	2727991	1					
ANR	2728110	Label	case EXTENDABLE_LOWER_CASE_IMMEDIATE :	1678:6:64225:64261	2727991	0	True				
ANR	2728111	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		2727991	0					
ANR	2728112	ExpressionStatement	enc_letter = TOLOWER ( enc_letter )	1679:8:64271:64304	2727991	1	True				
ANR	2728113	AssignmentExpression	enc_letter = TOLOWER ( enc_letter )		2727991	0		=			
ANR	2728114	Identifier	enc_letter		2727991	0					
ANR	2728115	CallExpression	TOLOWER ( enc_letter )		2727991	1					
ANR	2728116	Callee	TOLOWER		2727991	0					
ANR	2728117	Identifier	TOLOWER		2727991	0					
ANR	2728118	ArgumentList	enc_letter		2727991	1					
ANR	2728119	Argument	enc_letter		2727991	0					
ANR	2728120	Identifier	enc_letter		2727991	0					
ANR	2728121	BreakStatement	break ;	1680:8:64314:64319	2727991	2	True				
ANR	2728122	Label	case EXTENDABLE_UPPER_CASE_IMMEDIATE :	1682:6:64328:64364	2727991	3	True				
ANR	2728123	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		2727991	0					
ANR	2728124	ExpressionStatement	enc_letter = TOUPPER ( enc_letter )	1683:8:64374:64407	2727991	4	True				
ANR	2728125	AssignmentExpression	enc_letter = TOUPPER ( enc_letter )		2727991	0		=			
ANR	2728126	Identifier	enc_letter		2727991	0					
ANR	2728127	CallExpression	TOUPPER ( enc_letter )		2727991	1					
ANR	2728128	Callee	TOUPPER		2727991	0					
ANR	2728129	Identifier	TOUPPER		2727991	0					
ANR	2728130	ArgumentList	enc_letter		2727991	1					
ANR	2728131	Argument	enc_letter		2727991	0					
ANR	2728132	Identifier	enc_letter		2727991	0					
ANR	2728133	BreakStatement	break ;	1684:8:64417:64422	2727991	5	True				
ANR	2728134	IfStatement	if ( operand -> shift_count )		2727991	18					
ANR	2728135	Condition	operand -> shift_count	1687:6:64439:64458	2727991	0	True				
ANR	2728136	PtrMemberAccess	operand -> shift_count		2727991	0					
ANR	2728137	Identifier	operand		2727991	0					
ANR	2728138	Identifier	shift_count		2727991	1					
ANR	2728139	CompoundStatement		41:4:872:872	2727991	1					
ANR	2728140	IfStatement	if ( value . s & ( ~ ( ~0L << operand -> shift_count ) ) )		2727991	0					
ANR	2728141	Condition	value . s & ( ~ ( ~0L << operand -> shift_count ) )	1690:10:64521:64562	2727991	0	True				
ANR	2728142	BitAndExpression	value . s & ( ~ ( ~0L << operand -> shift_count ) )		2727991	0		&			
ANR	2728143	MemberAccess	value . s		2727991	0					
ANR	2728144	Identifier	value		2727991	0					
ANR	2728145	Identifier	s		2727991	1					
ANR	2728146	UnaryOperationExpression	~ ( ~0L << operand -> shift_count )		2727991	1					
ANR	2728147	UnaryOperator	~		2727991	0					
ANR	2728148	ShiftExpression	~0L << operand -> shift_count		2727991	1		<<			
ANR	2728149	Identifier	~0L		2727991	0					
ANR	2728150	PtrMemberAccess	operand -> shift_count		2727991	1					
ANR	2728151	Identifier	operand		2727991	0					
ANR	2728152	Identifier	shift_count		2727991	1					
ANR	2728153	CompoundStatement		44:8:980:980	2727991	1					
ANR	2728154	IfStatement	if ( errmsg )		2727991	0					
ANR	2728155	Condition	errmsg	1692:14:64589:64594	2727991	0	True				
ANR	2728156	Identifier	errmsg		2727991	0					
ANR	2728157	CompoundStatement		46:12:1016:1016	2727991	1					
ANR	2728158	ExpressionStatement	"sprintf ( buf , ""low %d bits of immediate %ld must be zero"" , operand -> shift_count , value . s )"	1694:14:64625:64737	2727991	0	True				
ANR	2728159	CallExpression	"sprintf ( buf , ""low %d bits of immediate %ld must be zero"" , operand -> shift_count , value . s )"		2727991	0					
ANR	2728160	Callee	sprintf		2727991	0					
ANR	2728161	Identifier	sprintf		2727991	0					
ANR	2728162	ArgumentList	buf		2727991	1					
ANR	2728163	Argument	buf		2727991	0					
ANR	2728164	Identifier	buf		2727991	0					
ANR	2728165	Argument	"""low %d bits of immediate %ld must be zero"""		2727991	1					
ANR	2728166	PrimaryExpression	"""low %d bits of immediate %ld must be zero"""		2727991	0					
ANR	2728167	Argument	operand -> shift_count		2727991	2					
ANR	2728168	PtrMemberAccess	operand -> shift_count		2727991	0					
ANR	2728169	Identifier	operand		2727991	0					
ANR	2728170	Identifier	shift_count		2727991	1					
ANR	2728171	Argument	value . s		2727991	3					
ANR	2728172	MemberAccess	value . s		2727991	0					
ANR	2728173	Identifier	value		2727991	0					
ANR	2728174	Identifier	s		2727991	1					
ANR	2728175	ExpressionStatement	* errmsg = buf	1696:14:64753:64766	2727991	1	True				
ANR	2728176	AssignmentExpression	* errmsg = buf		2727991	0		=			
ANR	2728177	UnaryOperationExpression	* errmsg		2727991	0					
ANR	2728178	UnaryOperator	*		2727991	0					
ANR	2728179	Identifier	errmsg		2727991	1					
ANR	2728180	Identifier	buf		2727991	1					
ANR	2728181	ReturnStatement	return FALSE ;	1698:10:64792:64804	2727991	1	True				
ANR	2728182	Identifier	FALSE		2727991	0					
ANR	2728183	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_LO16 )		2727991	19					
ANR	2728184	Condition	operand -> flags & HEXAGON_OPERAND_IS_LO16	1702:6:64829:64868	2727991	0	True				
ANR	2728185	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_LO16		2727991	0		&			
ANR	2728186	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728187	Identifier	operand		2727991	0					
ANR	2728188	Identifier	flags		2727991	1					
ANR	2728189	Identifier	HEXAGON_OPERAND_IS_LO16		2727991	1					
ANR	2728190	ExpressionStatement	value . s = HEXAGON_LO16 ( value . u )	1703:4:64875:64907	2727991	1	True				
ANR	2728191	AssignmentExpression	value . s = HEXAGON_LO16 ( value . u )		2727991	0		=			
ANR	2728192	MemberAccess	value . s		2727991	0					
ANR	2728193	Identifier	value		2727991	0					
ANR	2728194	Identifier	s		2727991	1					
ANR	2728195	CallExpression	HEXAGON_LO16 ( value . u )		2727991	1					
ANR	2728196	Callee	HEXAGON_LO16		2727991	0					
ANR	2728197	Identifier	HEXAGON_LO16		2727991	0					
ANR	2728198	ArgumentList	value . u		2727991	1					
ANR	2728199	Argument	value . u		2727991	0					
ANR	2728200	MemberAccess	value . u		2727991	0					
ANR	2728201	Identifier	value		2727991	0					
ANR	2728202	Identifier	u		2727991	1					
ANR	2728203	ElseStatement	else		2727991	0					
ANR	2728204	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_HI16 )		2727991	0					
ANR	2728205	Condition	operand -> flags & HEXAGON_OPERAND_IS_HI16	1704:11:64920:64959	2727991	0	True				
ANR	2728206	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_HI16		2727991	0		&			
ANR	2728207	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728208	Identifier	operand		2727991	0					
ANR	2728209	Identifier	flags		2727991	1					
ANR	2728210	Identifier	HEXAGON_OPERAND_IS_HI16		2727991	1					
ANR	2728211	ExpressionStatement	value . s = HEXAGON_HI16 ( value . u )	1705:4:64966:64998	2727991	1	True				
ANR	2728212	AssignmentExpression	value . s = HEXAGON_HI16 ( value . u )		2727991	0		=			
ANR	2728213	MemberAccess	value . s		2727991	0					
ANR	2728214	Identifier	value		2727991	0					
ANR	2728215	Identifier	s		2727991	1					
ANR	2728216	CallExpression	HEXAGON_HI16 ( value . u )		2727991	1					
ANR	2728217	Callee	HEXAGON_HI16		2727991	0					
ANR	2728218	Identifier	HEXAGON_HI16		2727991	0					
ANR	2728219	ArgumentList	value . u		2727991	1					
ANR	2728220	Argument	value . u		2727991	0					
ANR	2728221	MemberAccess	value . u		2727991	0					
ANR	2728222	Identifier	value		2727991	0					
ANR	2728223	Identifier	u		2727991	1					
ANR	2728224	ElseStatement	else		2727991	0					
ANR	2728225	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		2727991	0					
ANR	2728226	Condition	operand -> flags & HEXAGON_OPERAND_IS_SUBSET	1706:11:65011:65052	2727991	0	True				
ANR	2728227	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		2727991	0		&			
ANR	2728228	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728229	Identifier	operand		2727991	0					
ANR	2728230	Identifier	flags		2727991	1					
ANR	2728231	Identifier	HEXAGON_OPERAND_IS_SUBSET		2727991	1					
ANR	2728232	ExpressionStatement	"value . s = HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"	1707:4:65059:65139	2727991	1	True				
ANR	2728233	AssignmentExpression	"value . s = HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		2727991	0		=			
ANR	2728234	MemberAccess	value . s		2727991	0					
ANR	2728235	Identifier	value		2727991	0					
ANR	2728236	Identifier	s		2727991	1					
ANR	2728237	CallExpression	"HEXAGON_SUBREGS_TO ( value . s , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		2727991	1					
ANR	2728238	Callee	HEXAGON_SUBREGS_TO		2727991	0					
ANR	2728239	Identifier	HEXAGON_SUBREGS_TO		2727991	0					
ANR	2728240	ArgumentList	value . s		2727991	1					
ANR	2728241	Argument	value . s		2727991	0					
ANR	2728242	MemberAccess	value . s		2727991	0					
ANR	2728243	Identifier	value		2727991	0					
ANR	2728244	Identifier	s		2727991	1					
ANR	2728245	Argument	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2727991	1					
ANR	2728246	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2727991	0		&			
ANR	2728247	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728248	Identifier	operand		2727991	0					
ANR	2728249	Identifier	flags		2727991	1					
ANR	2728250	Identifier	HEXAGON_OPERAND_IS_PAIR		2727991	1					
ANR	2728251	ExpressionStatement	bits = operand -> bits + operand -> shift_count	1711:2:65233:65276	2727991	20	True				
ANR	2728252	AssignmentExpression	bits = operand -> bits + operand -> shift_count		2727991	0		=			
ANR	2728253	Identifier	bits		2727991	0					
ANR	2728254	AdditiveExpression	operand -> bits + operand -> shift_count		2727991	1		+			
ANR	2728255	PtrMemberAccess	operand -> bits		2727991	0					
ANR	2728256	Identifier	operand		2727991	0					
ANR	2728257	Identifier	bits		2727991	1					
ANR	2728258	PtrMemberAccess	operand -> shift_count		2727991	1					
ANR	2728259	Identifier	operand		2727991	0					
ANR	2728260	Identifier	shift_count		2727991	1					
ANR	2728261	ExpressionStatement	smax = ~ ( ~0L << ( bits - 1 ) )	1712:2:65280:65307	2727991	21	True				
ANR	2728262	AssignmentExpression	smax = ~ ( ~0L << ( bits - 1 ) )		2727991	0		=			
ANR	2728263	Identifier	smax		2727991	0					
ANR	2728264	UnaryOperationExpression	~ ( ~0L << ( bits - 1 ) )		2727991	1					
ANR	2728265	UnaryOperator	~		2727991	0					
ANR	2728266	ShiftExpression	~0L << ( bits - 1 )		2727991	1		<<			
ANR	2728267	Identifier	~0L		2727991	0					
ANR	2728268	AdditiveExpression	bits - 1		2727991	1		-			
ANR	2728269	Identifier	bits		2727991	0					
ANR	2728270	PrimaryExpression	1		2727991	1					
ANR	2728271	ExpressionStatement	smin = ( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )	1713:2:65311:65395	2727991	22	True				
ANR	2728272	AssignmentExpression	smin = ( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )		2727991	0		=			
ANR	2728273	Identifier	smin		2727991	0					
ANR	2728274	AdditiveExpression	( ~0L << ( bits - 1 ) ) + ( ( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0 )		2727991	1		+			
ANR	2728275	ShiftExpression	~0L << ( bits - 1 )		2727991	0		<<			
ANR	2728276	Identifier	~0L		2727991	0					
ANR	2728277	AdditiveExpression	bits - 1		2727991	1		-			
ANR	2728278	Identifier	bits		2727991	0					
ANR	2728279	PrimaryExpression	1		2727991	1					
ANR	2728280	ConditionalExpression	( operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE ) ? 1 : 0		2727991	1					
ANR	2728281	Condition	operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE		2727991	0					
ANR	2728282	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_NEGATIVE		2727991	0		&			
ANR	2728283	PtrMemberAccess	operand -> flags		2727991	0					
ANR	2728284	Identifier	operand		2727991	0					
ANR	2728285	Identifier	flags		2727991	1					
ANR	2728286	Identifier	HEXAGON_OPERAND_IS_NEGATIVE		2727991	1					
ANR	2728287	PrimaryExpression	1		2727991	1					
ANR	2728288	PrimaryExpression	0		2727991	2					
ANR	2728289	ExpressionStatement	umax = ~ ( ~0UL << bits )	1714:2:65399:65421	2727991	23	True				
ANR	2728290	AssignmentExpression	umax = ~ ( ~0UL << bits )		2727991	0		=			
ANR	2728291	Identifier	umax		2727991	0					
ANR	2728292	UnaryOperationExpression	~ ( ~0UL << bits )		2727991	1					
ANR	2728293	UnaryOperator	~		2727991	0					
ANR	2728294	ShiftExpression	~0UL << bits		2727991	1		<<			
ANR	2728295	Identifier	~0UL		2727991	0					
ANR	2728296	Identifier	bits		2727991	1					
ANR	2728297	ExpressionStatement	umin = 0UL	1715:2:65425:65435	2727991	24	True				
ANR	2728298	AssignmentExpression	umin = 0UL		2727991	0		=			
ANR	2728299	Identifier	umin		2727991	0					
ANR	2728300	PrimaryExpression	0UL		2727991	1					
ANR	2728301	ExpressionStatement	xed = value . s	1717:2:65440:65453	2727991	25	True				
ANR	2728302	AssignmentExpression	xed = value . s		2727991	0		=			
ANR	2728303	Identifier	xed		2727991	0					
ANR	2728304	MemberAccess	value . s		2727991	1					
ANR	2728305	Identifier	value		2727991	0					
ANR	2728306	Identifier	s		2727991	1					
ANR	2728307	ExpressionStatement	"xer = hexagon_extend ( & xed , bits , is_s )"	1718:2:65457:65496	2727991	26	True				
ANR	2728308	AssignmentExpression	"xer = hexagon_extend ( & xed , bits , is_s )"		2727991	0		=			
ANR	2728309	Identifier	xer		2727991	0					
ANR	2728310	CallExpression	"hexagon_extend ( & xed , bits , is_s )"		2727991	1					
ANR	2728311	Callee	hexagon_extend		2727991	0					
ANR	2728312	Identifier	hexagon_extend		2727991	0					
ANR	2728313	ArgumentList	& xed		2727991	1					
ANR	2728314	Argument	& xed		2727991	0					
ANR	2728315	UnaryOperationExpression	& xed		2727991	0					
ANR	2728316	UnaryOperator	&		2727991	0					
ANR	2728317	Identifier	xed		2727991	1					
ANR	2728318	Argument	bits		2727991	1					
ANR	2728319	Identifier	bits		2727991	0					
ANR	2728320	Argument	is_s		2727991	2					
ANR	2728321	Identifier	is_s		2727991	0					
ANR	2728322	IfStatement	if ( is_x )		2727991	27					
ANR	2728323	Condition	is_x	1720:6:65505:65508	2727991	0	True				
ANR	2728324	Identifier	is_x		2727991	0					
ANR	2728325	CompoundStatement		74:4:1922:1922	2727991	1					
ANR	2728326	ExpressionStatement	is_s = ( xed < 0 )	1722:6:65523:65539	2727991	0	True				
ANR	2728327	AssignmentExpression	is_s = ( xed < 0 )		2727991	0		=			
ANR	2728328	Identifier	is_s		2727991	0					
ANR	2728329	RelationalExpression	xed < 0		2727991	1		<			
ANR	2728330	Identifier	xed		2727991	0					
ANR	2728331	PrimaryExpression	0		2727991	1					
ANR	2728332	ExpressionStatement	* xvalue = xer	1724:6:65548:65561	2727991	1	True				
ANR	2728333	AssignmentExpression	* xvalue = xer		2727991	0		=			
ANR	2728334	UnaryOperationExpression	* xvalue		2727991	0					
ANR	2728335	UnaryOperator	*		2727991	0					
ANR	2728336	Identifier	xvalue		2727991	1					
ANR	2728337	Identifier	xer		2727991	1					
ANR	2728338	ExpressionStatement	value . s = xed	1725:6:65569:65582	2727991	2	True				
ANR	2728339	AssignmentExpression	value . s = xed		2727991	0		=			
ANR	2728340	MemberAccess	value . s		2727991	0					
ANR	2728341	Identifier	value		2727991	0					
ANR	2728342	Identifier	s		2727991	1					
ANR	2728343	Identifier	xed		2727991	1					
ANR	2728344	IfStatement	if ( is_s )		2727991	28					
ANR	2728345	Condition	is_s	1729:6:65632:65635	2727991	0	True				
ANR	2728346	Identifier	is_s		2727991	0					
ANR	2728347	CompoundStatement		83:4:2049:2049	2727991	1					
ANR	2728348	IfStatement	if ( value . s < smin || ( smax > 0 && value . s > smax ) )		2727991	0					
ANR	2728349	Condition	value . s < smin || ( smax > 0 && value . s > smax )	1731:10:65654:65699	2727991	0	True				
ANR	2728350	OrExpression	value . s < smin || ( smax > 0 && value . s > smax )		2727991	0		||			
ANR	2728351	RelationalExpression	value . s < smin		2727991	0		<			
ANR	2728352	MemberAccess	value . s		2727991	0					
ANR	2728353	Identifier	value		2727991	0					
ANR	2728354	Identifier	s		2727991	1					
ANR	2728355	Identifier	smin		2727991	1					
ANR	2728356	AndExpression	smax > 0 && value . s > smax		2727991	1		&&			
ANR	2728357	RelationalExpression	smax > 0		2727991	0		>			
ANR	2728358	Identifier	smax		2727991	0					
ANR	2728359	PrimaryExpression	0		2727991	1					
ANR	2728360	RelationalExpression	value . s > smax		2727991	1		>			
ANR	2728361	MemberAccess	value . s		2727991	0					
ANR	2728362	Identifier	value		2727991	0					
ANR	2728363	Identifier	s		2727991	1					
ANR	2728364	Identifier	smax		2727991	1					
ANR	2728365	CompoundStatement		85:1:2110:2110	2727991	1					
ANR	2728366	IfStatement	if ( errmsg )		2727991	0					
ANR	2728367	Condition	errmsg	1733:7:65712:65717	2727991	0	True				
ANR	2728368	Identifier	errmsg		2727991	0					
ANR	2728369	CompoundStatement		87:5:2132:2132	2727991	1					
ANR	2728370	ExpressionStatement	"sprintf ( buf , ""value %ld out of range: %ld-%ld"" , value . s , smin , smax )"	1735:7:65734:65803	2727991	0	True				
ANR	2728371	CallExpression	"sprintf ( buf , ""value %ld out of range: %ld-%ld"" , value . s , smin , smax )"		2727991	0					
ANR	2728372	Callee	sprintf		2727991	0					
ANR	2728373	Identifier	sprintf		2727991	0					
ANR	2728374	ArgumentList	buf		2727991	1					
ANR	2728375	Argument	buf		2727991	0					
ANR	2728376	Identifier	buf		2727991	0					
ANR	2728377	Argument	"""value %ld out of range: %ld-%ld"""		2727991	1					
ANR	2728378	PrimaryExpression	"""value %ld out of range: %ld-%ld"""		2727991	0					
ANR	2728379	Argument	value . s		2727991	2					
ANR	2728380	MemberAccess	value . s		2727991	0					
ANR	2728381	Identifier	value		2727991	0					
ANR	2728382	Identifier	s		2727991	1					
ANR	2728383	Argument	smin		2727991	3					
ANR	2728384	Identifier	smin		2727991	0					
ANR	2728385	Argument	smax		2727991	4					
ANR	2728386	Identifier	smax		2727991	0					
ANR	2728387	ExpressionStatement	* errmsg = buf	1736:7:65812:65825	2727991	1	True				
ANR	2728388	AssignmentExpression	* errmsg = buf		2727991	0		=			
ANR	2728389	UnaryOperationExpression	* errmsg		2727991	0					
ANR	2728390	UnaryOperator	*		2727991	0					
ANR	2728391	Identifier	errmsg		2727991	1					
ANR	2728392	Identifier	buf		2727991	1					
ANR	2728393	ReturnStatement	return FALSE ;	1738:3:65837:65849	2727991	1	True				
ANR	2728394	Identifier	FALSE		2727991	0					
ANR	2728395	ElseStatement	else		2727991	0					
ANR	2728396	CompoundStatement		95:4:2278:2278	2727991	0					
ANR	2728397	IfStatement	if ( value . u < umin || ( umax > 0 && value . u > umax ) )		2727991	0					
ANR	2728398	Condition	value . u < umin || ( umax > 0 && value . u > umax )	1743:10:65883:65928	2727991	0	True				
ANR	2728399	OrExpression	value . u < umin || ( umax > 0 && value . u > umax )		2727991	0		||			
ANR	2728400	RelationalExpression	value . u < umin		2727991	0		<			
ANR	2728401	MemberAccess	value . u		2727991	0					
ANR	2728402	Identifier	value		2727991	0					
ANR	2728403	Identifier	u		2727991	1					
ANR	2728404	Identifier	umin		2727991	1					
ANR	2728405	AndExpression	umax > 0 && value . u > umax		2727991	1		&&			
ANR	2728406	RelationalExpression	umax > 0		2727991	0		>			
ANR	2728407	Identifier	umax		2727991	0					
ANR	2728408	PrimaryExpression	0		2727991	1					
ANR	2728409	RelationalExpression	value . u > umax		2727991	1		>			
ANR	2728410	MemberAccess	value . u		2727991	0					
ANR	2728411	Identifier	value		2727991	0					
ANR	2728412	Identifier	u		2727991	1					
ANR	2728413	Identifier	umax		2727991	1					
ANR	2728414	CompoundStatement		97:1:2339:2339	2727991	1					
ANR	2728415	IfStatement	if ( errmsg )		2727991	0					
ANR	2728416	Condition	errmsg	1745:7:65941:65946	2727991	0	True				
ANR	2728417	Identifier	errmsg		2727991	0					
ANR	2728418	CompoundStatement		99:5:2361:2361	2727991	1					
ANR	2728419	ExpressionStatement	"sprintf ( buf , ""value %lu out of range: %lu-%lu"" , value . u , umin , umax )"	1747:7:65963:66032	2727991	0	True				
ANR	2728420	CallExpression	"sprintf ( buf , ""value %lu out of range: %lu-%lu"" , value . u , umin , umax )"		2727991	0					
ANR	2728421	Callee	sprintf		2727991	0					
ANR	2728422	Identifier	sprintf		2727991	0					
ANR	2728423	ArgumentList	buf		2727991	1					
ANR	2728424	Argument	buf		2727991	0					
ANR	2728425	Identifier	buf		2727991	0					
ANR	2728426	Argument	"""value %lu out of range: %lu-%lu"""		2727991	1					
ANR	2728427	PrimaryExpression	"""value %lu out of range: %lu-%lu"""		2727991	0					
ANR	2728428	Argument	value . u		2727991	2					
ANR	2728429	MemberAccess	value . u		2727991	0					
ANR	2728430	Identifier	value		2727991	0					
ANR	2728431	Identifier	u		2727991	1					
ANR	2728432	Argument	umin		2727991	3					
ANR	2728433	Identifier	umin		2727991	0					
ANR	2728434	Argument	umax		2727991	4					
ANR	2728435	Identifier	umax		2727991	0					
ANR	2728436	ExpressionStatement	* errmsg = buf	1748:7:66041:66054	2727991	1	True				
ANR	2728437	AssignmentExpression	* errmsg = buf		2727991	0		=			
ANR	2728438	UnaryOperationExpression	* errmsg		2727991	0					
ANR	2728439	UnaryOperator	*		2727991	0					
ANR	2728440	Identifier	errmsg		2727991	1					
ANR	2728441	Identifier	buf		2727991	1					
ANR	2728442	ReturnStatement	return FALSE ;	1750:3:66066:66078	2727991	1	True				
ANR	2728443	Identifier	FALSE		2727991	0					
ANR	2728444	IfStatement	if ( ! is_x )		2727991	29					
ANR	2728445	Condition	! is_x	1755:6:66162:66166	2727991	0	True				
ANR	2728446	UnaryOperationExpression	! is_x		2727991	0					
ANR	2728447	UnaryOperator	!		2727991	0					
ANR	2728448	Identifier	is_x		2727991	1					
ANR	2728449	ExpressionStatement	value . s >>= operand -> shift_count	1756:4:66173:66205	2727991	1	True				
ANR	2728450	AssignmentExpression	value . s >>= operand -> shift_count		2727991	0		>>=			
ANR	2728451	MemberAccess	value . s		2727991	0					
ANR	2728452	Identifier	value		2727991	0					
ANR	2728453	Identifier	s		2727991	1					
ANR	2728454	PtrMemberAccess	operand -> shift_count		2727991	1					
ANR	2728455	Identifier	operand		2727991	0					
ANR	2728456	Identifier	shift_count		2727991	1					
ANR	2728457	ForStatement	for ( i = len - 1 ; i >= 0 ; i -- )		2727991	30					
ANR	2728458	ForInit	i = len - 1 ;	1759:7:66286:66297	2727991	0	True				
ANR	2728459	AssignmentExpression	i = len - 1		2727991	0		=			
ANR	2728460	Identifier	i		2727991	0					
ANR	2728461	AdditiveExpression	len - 1		2727991	1		-			
ANR	2728462	Identifier	len		2727991	0					
ANR	2728463	PrimaryExpression	1		2727991	1					
ANR	2728464	Condition	i >= 0	1759:20:66299:66304	2727991	1	True				
ANR	2728465	RelationalExpression	i >= 0		2727991	0		>=			
ANR	2728466	Identifier	i		2727991	0					
ANR	2728467	PrimaryExpression	0		2727991	1					
ANR	2728468	PostIncDecOperationExpression	i --	1759:28:66307:66309	2727991	2	True				
ANR	2728469	Identifier	i		2727991	0					
ANR	2728470	IncDec	--		2727991	1					
ANR	2728471	IfStatement	if ( ! ISSPACE ( opcode -> enc [ i ] ) )		2727991	3					
ANR	2728472	Condition	! ISSPACE ( opcode -> enc [ i ] )	1760:8:66320:66345	2727991	0	True				
ANR	2728473	UnaryOperationExpression	! ISSPACE ( opcode -> enc [ i ] )		2727991	0					
ANR	2728474	UnaryOperator	!		2727991	0					
ANR	2728475	CallExpression	ISSPACE ( opcode -> enc [ i ] )		2727991	1					
ANR	2728476	Callee	ISSPACE		2727991	0					
ANR	2728477	Identifier	ISSPACE		2727991	0					
ANR	2728478	ArgumentList	opcode -> enc [ i ]		2727991	1					
ANR	2728479	Argument	opcode -> enc [ i ]		2727991	0					
ANR	2728480	ArrayIndexing	opcode -> enc [ i ]		2727991	0					
ANR	2728481	PtrMemberAccess	opcode -> enc		2727991	0					
ANR	2728482	Identifier	opcode		2727991	0					
ANR	2728483	Identifier	enc		2727991	1					
ANR	2728484	Identifier	i		2727991	1					
ANR	2728485	CompoundStatement		114:6:2761:2761	2727991	1					
ANR	2728486	IfStatement	if ( opcode -> enc [ i ] == enc_letter )		2727991	0					
ANR	2728487	Condition	opcode -> enc [ i ] == enc_letter	1762:12:66368:66396	2727991	0	True				
ANR	2728488	EqualityExpression	opcode -> enc [ i ] == enc_letter		2727991	0		==			
ANR	2728489	ArrayIndexing	opcode -> enc [ i ]		2727991	0					
ANR	2728490	PtrMemberAccess	opcode -> enc		2727991	0					
ANR	2728491	Identifier	opcode		2727991	0					
ANR	2728492	Identifier	enc		2727991	1					
ANR	2728493	Identifier	i		2727991	1					
ANR	2728494	Identifier	enc_letter		2727991	1					
ANR	2728495	CompoundStatement		116:10:2816:2816	2727991	1					
ANR	2728496	ExpressionStatement	( * insn ) &= ~ ( 1 << shift_count )	1765:12:66452:66482	2727991	0	True				
ANR	2728497	AssignmentExpression	( * insn ) &= ~ ( 1 << shift_count )		2727991	0		&=			
ANR	2728498	UnaryOperationExpression	* insn		2727991	0					
ANR	2728499	UnaryOperator	*		2727991	0					
ANR	2728500	Identifier	insn		2727991	1					
ANR	2728501	UnaryOperationExpression	~ ( 1 << shift_count )		2727991	1					
ANR	2728502	UnaryOperator	~		2727991	0					
ANR	2728503	ShiftExpression	1 << shift_count		2727991	1		<<			
ANR	2728504	PrimaryExpression	1		2727991	0					
ANR	2728505	Identifier	shift_count		2727991	1					
ANR	2728506	ExpressionStatement	( * insn ) |= ( value . s & 1 ) << shift_count	1767:12:66530:66569	2727991	1	True				
ANR	2728507	AssignmentExpression	( * insn ) |= ( value . s & 1 ) << shift_count		2727991	0		|=			
ANR	2728508	UnaryOperationExpression	* insn		2727991	0					
ANR	2728509	UnaryOperator	*		2727991	0					
ANR	2728510	Identifier	insn		2727991	1					
ANR	2728511	ShiftExpression	( value . s & 1 ) << shift_count		2727991	1		<<			
ANR	2728512	BitAndExpression	value . s & 1		2727991	0		&			
ANR	2728513	MemberAccess	value . s		2727991	0					
ANR	2728514	Identifier	value		2727991	0					
ANR	2728515	Identifier	s		2727991	1					
ANR	2728516	PrimaryExpression	1		2727991	1					
ANR	2728517	Identifier	shift_count		2727991	1					
ANR	2728518	ExpressionStatement	value . s >>= 1	1768:12:66583:66596	2727991	2	True				
ANR	2728519	AssignmentExpression	value . s >>= 1		2727991	0		>>=			
ANR	2728520	MemberAccess	value . s		2727991	0					
ANR	2728521	Identifier	value		2727991	0					
ANR	2728522	Identifier	s		2727991	1					
ANR	2728523	PrimaryExpression	1		2727991	1					
ANR	2728524	ExpressionStatement	num_bits ++	1769:12:66610:66620	2727991	3	True				
ANR	2728525	PostIncDecOperationExpression	num_bits ++		2727991	0					
ANR	2728526	Identifier	num_bits		2727991	0					
ANR	2728527	IncDec	++		2727991	1					
ANR	2728528	ExpressionStatement	shift_count ++	1771:8:66642:66655	2727991	1	True				
ANR	2728529	PostIncDecOperationExpression	shift_count ++		2727991	0					
ANR	2728530	Identifier	shift_count		2727991	0					
ANR	2728531	IncDec	++		2727991	1					
ANR	2728532	IfStatement	if ( num_bits != operand -> bits )		2727991	31					
ANR	2728533	Condition	num_bits != operand -> bits	1775:6:66728:66752	2727991	0	True				
ANR	2728534	EqualityExpression	num_bits != operand -> bits		2727991	0		!=			
ANR	2728535	Identifier	num_bits		2727991	0					
ANR	2728536	PtrMemberAccess	operand -> bits		2727991	1					
ANR	2728537	Identifier	operand		2727991	0					
ANR	2728538	Identifier	bits		2727991	1					
ANR	2728539	CompoundStatement		129:4:3166:3166	2727991	1					
ANR	2728540	IfStatement	if ( errmsg )		2727991	0					
ANR	2728541	Condition	errmsg	1777:10:66771:66776	2727991	0	True				
ANR	2728542	Identifier	errmsg		2727991	0					
ANR	2728543	CompoundStatement		131:8:3194:3194	2727991	1					
ANR	2728544	Statement	sprintf	1779:10:66799:66805	2727991	0	True				
ANR	2728545	Statement	(	1779:18:66807:66807	2727991	1	True				
ANR	2728546	Statement	buf	1779:19:66808:66810	2727991	2	True				
ANR	2728547	Statement	","	1779:22:66811:66811	2727991	3	True				
ANR	2728548	Statement	"""did not encode expected number of bits: %d != %d\\n"""	1779:24:66813:66864	2727991	4	True				
ANR	2728549	Statement	"""enc = %s\\n  operand = %s"""	1780:19:66885:66910	2727991	5	True				
ANR	2728550	Statement	","	1780:45:66911:66911	2727991	6	True				
ANR	2728551	Statement	num_bits	1781:19:66932:66939	2727991	7	True				
ANR	2728552	Statement	","	1781:27:66940:66940	2727991	8	True				
ANR	2728553	Statement	operand	1781:29:66942:66948	2727991	9	True				
ANR	2728554	Statement	->	1781:36:66949:66950	2727991	10	True				
ANR	2728555	Statement	bits	1781:38:66951:66954	2727991	11	True				
ANR	2728556	Statement	","	1781:42:66955:66955	2727991	12	True				
ANR	2728557	Statement	opcode	1781:44:66957:66962	2727991	13	True				
ANR	2728558	Statement	->	1781:50:66963:66964	2727991	14	True				
ANR	2728559	Statement	enc	1781:52:66965:66967	2727991	15	True				
ANR	2728560	Statement	","	1781:55:66968:66968	2727991	16	True				
ANR	2728561	Statement	operand	1781:57:66970:66976	2727991	17	True				
ANR	2728562	Statement	->	1781:64:66977:66978	2727991	18	True				
ANR	2728563	Statement	fmt	1781:66:66979:66981	2727991	19	True				
ANR	2728564	Statement	)	1781:69:66982:66982	2727991	20	True				
ANR	2728565	ExpressionStatement		1781:70:66983:66983	2727991	21	True				
ANR	2728566	ExpressionStatement	* errmsg = buf	1782:10:66995:67008	2727991	22	True				
ANR	2728567	AssignmentExpression	* errmsg = buf		2727991	0		=			
ANR	2728568	UnaryOperationExpression	* errmsg		2727991	0					
ANR	2728569	UnaryOperator	*		2727991	0					
ANR	2728570	Identifier	errmsg		2727991	1					
ANR	2728571	Identifier	buf		2727991	1					
ANR	2728572	ReturnStatement	return FALSE ;	1784:6:67026:67038	2727991	1	True				
ANR	2728573	Identifier	FALSE		2727991	0					
ANR	2728574	ReturnStatement	return TRUE ;	1787:2:67049:67060	2727991	32	True				
ANR	2728575	Identifier	TRUE		2727991	0					
ANR	2728576	ReturnType	int		2727991	1					
ANR	2728577	Identifier	hexagon_encode_operand		2727991	2					
ANR	2728578	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , long avalue , long * xvalue , int is_x , int is_rel , char * * errmsg"		2727991	3					
ANR	2728579	Parameter	const hexagon_operand * operand	1645:1:63444:63473	2727991	0	True				
ANR	2728580	ParameterType	const hexagon_operand *		2727991	0					
ANR	2728581	Identifier	operand		2727991	1					
ANR	2728582	Parameter	hexagon_insn * insn	1645:33:63476:63493	2727991	1	True				
ANR	2728583	ParameterType	hexagon_insn *		2727991	0					
ANR	2728584	Identifier	insn		2727991	1					
ANR	2728585	Parameter	const hexagon_opcode * opcode	1646:1:63497:63524	2727991	2	True				
ANR	2728586	ParameterType	const hexagon_opcode *		2727991	0					
ANR	2728587	Identifier	opcode		2727991	1					
ANR	2728588	Parameter	long avalue	1646:31:63527:63537	2727991	3	True				
ANR	2728589	ParameterType	long		2727991	0					
ANR	2728590	Identifier	avalue		2727991	1					
ANR	2728591	Parameter	long * xvalue	1646:44:63540:63551	2727991	4	True				
ANR	2728592	ParameterType	long *		2727991	0					
ANR	2728593	Identifier	xvalue		2727991	1					
ANR	2728594	Parameter	int is_x	1646:58:63554:63561	2727991	5	True				
ANR	2728595	ParameterType	int		2727991	0					
ANR	2728596	Identifier	is_x		2727991	1					
ANR	2728597	Parameter	int is_rel	1646:68:63564:63573	2727991	6	True				
ANR	2728598	ParameterType	int		2727991	0					
ANR	2728599	Identifier	is_rel		2727991	1					
ANR	2728600	Parameter	char * * errmsg	1647:1:63577:63589	2727991	7	True				
ANR	2728601	ParameterType	char * *		2727991	0					
ANR	2728602	Identifier	errmsg		2727991	1					
ANR	2728603	CFGEntryNode	ENTRY		2727991		True				
ANR	2728604	CFGExitNode	EXIT		2727991		True				
ANR	2728605	Symbol	avalue		2727991						
ANR	2728606	Symbol	HEXAGON_OPERAND_IS_SIGNED		2727991						
ANR	2728607	Symbol	* xvalue		2727991						
ANR	2728608	Symbol	operand -> enc_letter		2727991						
ANR	2728609	Symbol	xvalue		2727991						
ANR	2728610	Symbol	umin		2727991						
ANR	2728611	Symbol	opcode -> attributes		2727991						
ANR	2728612	Symbol	opcode		2727991						
ANR	2728613	Symbol	strlen		2727991						
ANR	2728614	Symbol	value . s		2727991						
ANR	2728615	Symbol	is_x		2727991						
ANR	2728616	Symbol	opcode -> enc		2727991						
ANR	2728617	Symbol	len		2727991						
ANR	2728618	Symbol	xed		2727991						
ANR	2728619	Symbol	value . u		2727991						
ANR	2728620	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		2727991						
ANR	2728621	Symbol	~0L		2727991						
ANR	2728622	Symbol	HEXAGON_OPERAND_IS_PAIR		2727991						
ANR	2728623	Symbol	* opcode -> enc		2727991						
ANR	2728624	Symbol	smax		2727991						
ANR	2728625	Symbol	xer		2727991						
ANR	2728626	Symbol	HEXAGON_OPERAND_IS_SUBSET		2727991						
ANR	2728627	Symbol	bits		2727991						
ANR	2728628	Symbol	errmsg		2727991						
ANR	2728629	Symbol	TRUE		2727991						
ANR	2728630	Symbol	is_rel		2727991						
ANR	2728631	Symbol	* * opcode		2727991						
ANR	2728632	Symbol	is_s		2727991						
ANR	2728633	Symbol	~0UL		2727991						
ANR	2728634	Symbol	& xed		2727991						
ANR	2728635	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		2727991						
ANR	2728636	Symbol	* errmsg		2727991						
ANR	2728637	Symbol	* operand		2727991						
ANR	2728638	Symbol	smin		2727991						
ANR	2728639	Symbol	TOUPPER		2727991						
ANR	2728640	Symbol	hexagon_extend		2727991						
ANR	2728641	Symbol	enc_letter		2727991						
ANR	2728642	Symbol	value		2727991						
ANR	2728643	Symbol	shift_count		2727991						
ANR	2728644	Symbol	HEXAGON_OPERAND_IS_HI16		2727991						
ANR	2728645	Symbol	operand -> flags		2727991						
ANR	2728646	Symbol	HEXAGON_SUBREGS_TO		2727991						
ANR	2728647	Symbol	TOLOWER		2727991						
ANR	2728648	Symbol	i		2727991						
ANR	2728649	Symbol	* insn		2727991						
ANR	2728650	Symbol	HEXAGON_OPERAND_IS_NEGATIVE		2727991						
ANR	2728651	Symbol	HEXAGON_OPERAND_IS_LO16		2727991						
ANR	2728652	Symbol	insn		2727991						
ANR	2728653	Symbol	operand -> shift_count		2727991						
ANR	2728654	Symbol	buf		2727991						
ANR	2728655	Symbol	* i		2727991						
ANR	2728656	Symbol	HEXAGON_HI16		2727991						
ANR	2728657	Symbol	HEXAGON_LO16		2727991						
ANR	2728658	Symbol	umax		2727991						
ANR	2728659	Symbol	FALSE		2727991						
ANR	2728660	Symbol	operand -> bits		2727991						
ANR	2728661	Symbol	num_bits		2727991						
ANR	2728662	Symbol	ISSPACE		2727991						
ANR	2728663	Symbol	operand		2727991						
ANR	2728664	Symbol	* opcode		2727991						
ANR	2728665	DeclStmt									
ANR	2728666	Decl							unsigned long	unsigned long	regn
ANR	2728667	DeclStmt									
ANR	2728668	Decl							char	char *	regs
ANR	2728669	DeclStmt									
ANR	2728670	Decl							size_t	size_t	i
ANR	2728671	DeclStmt									
ANR	2728672	Decl							char	char [ 4 ]	name
ANR	2728673	DeclStmt									
ANR	2728674	Decl							size_t	size_t	len
ANR	2728675	Function	hexagon_parse_dreg	1854:0:68584:70148							
ANR	2728676	FunctionDef	"hexagon_parse_dreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2728675	0					
ANR	2728677	CompoundStatement		1858:0:68751:70148	2728675	0					
ANR	2728678	IdentifierDeclStatement	int reg_odd ;	1859:2:68755:68766	2728675	0	True				
ANR	2728679	IdentifierDecl	reg_odd		2728675	0					
ANR	2728680	IdentifierDeclType	int		2728675	0					
ANR	2728681	Identifier	reg_odd		2728675	1					
ANR	2728682	IdentifierDeclStatement	int reg_even ;	1860:2:68770:68782	2728675	1	True				
ANR	2728683	IdentifierDecl	reg_even		2728675	0					
ANR	2728684	IdentifierDeclType	int		2728675	0					
ANR	2728685	Identifier	reg_even		2728675	1					
ANR	2728686	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1862:2:68787:68888	2728675	2	True				
ANR	2728687	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728675	0		=			
ANR	2728688	Identifier	reg_odd		2728675	0					
ANR	2728689	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728675	1					
ANR	2728690	Callee	hexagon_reg_num		2728675	0					
ANR	2728691	Identifier	hexagon_reg_num		2728675	0					
ANR	2728692	ArgumentList	operand		2728675	1					
ANR	2728693	Argument	operand		2728675	0					
ANR	2728694	Identifier	operand		2728675	0					
ANR	2728695	Argument	& input		2728675	1					
ANR	2728696	UnaryOperationExpression	& input		2728675	0					
ANR	2728697	UnaryOperator	&		2728675	0					
ANR	2728698	Identifier	input		2728675	1					
ANR	2728699	Argument	'r'		2728675	2					
ANR	2728700	PrimaryExpression	'r'		2728675	0					
ANR	2728701	Argument	hexagon_gp_regs		2728675	3					
ANR	2728702	Identifier	hexagon_gp_regs		2728675	0					
ANR	2728703	Argument	hexagon_gp_regs_count		2728675	4					
ANR	2728704	Identifier	hexagon_gp_regs_count		2728675	0					
ANR	2728705	Argument	NULL		2728675	5					
ANR	2728706	Identifier	NULL		2728675	0					
ANR	2728707	Argument	'\\0'		2728675	6					
ANR	2728708	PrimaryExpression	'\\0'		2728675	0					
ANR	2728709	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1863:2:68892:68993	2728675	3	True				
ANR	2728710	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728675	0		=			
ANR	2728711	Identifier	reg_even		2728675	0					
ANR	2728712	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728675	1					
ANR	2728713	Callee	hexagon_reg_num		2728675	0					
ANR	2728714	Identifier	hexagon_reg_num		2728675	0					
ANR	2728715	ArgumentList	operand		2728675	1					
ANR	2728716	Argument	operand		2728675	0					
ANR	2728717	Identifier	operand		2728675	0					
ANR	2728718	Argument	& input		2728675	1					
ANR	2728719	UnaryOperationExpression	& input		2728675	0					
ANR	2728720	UnaryOperator	&		2728675	0					
ANR	2728721	Identifier	input		2728675	1					
ANR	2728722	Argument	':'		2728675	2					
ANR	2728723	PrimaryExpression	':'		2728675	0					
ANR	2728724	Argument	hexagon_gp_regs		2728675	3					
ANR	2728725	Identifier	hexagon_gp_regs		2728675	0					
ANR	2728726	Argument	hexagon_gp_regs_count		2728675	4					
ANR	2728727	Identifier	hexagon_gp_regs_count		2728675	0					
ANR	2728728	Argument	NULL		2728675	5					
ANR	2728729	Identifier	NULL		2728675	0					
ANR	2728730	Argument	'\\0'		2728675	6					
ANR	2728731	PrimaryExpression	'\\0'		2728675	0					
ANR	2728732	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2728675	4					
ANR	2728733	Condition	reg_odd < 0 || reg_even < 0	1864:6:69001:69027	2728675	0	True				
ANR	2728734	OrExpression	reg_odd < 0 || reg_even < 0		2728675	0		||			
ANR	2728735	RelationalExpression	reg_odd < 0		2728675	0		<			
ANR	2728736	Identifier	reg_odd		2728675	0					
ANR	2728737	PrimaryExpression	0		2728675	1					
ANR	2728738	RelationalExpression	reg_even < 0		2728675	1		<			
ANR	2728739	Identifier	reg_even		2728675	0					
ANR	2728740	PrimaryExpression	0		2728675	1					
ANR	2728741	ReturnStatement	return ( NULL ) ;	1865:4:69034:69047	2728675	1	True				
ANR	2728742	Identifier	NULL		2728675	0					
ANR	2728743	IfStatement	if ( reg_odd % 2 != 1 )		2728675	5					
ANR	2728744	Condition	reg_odd % 2 != 1	1868:6:69101:69116	2728675	0	True				
ANR	2728745	EqualityExpression	reg_odd % 2 != 1		2728675	0		!=			
ANR	2728746	MultiplicativeExpression	reg_odd % 2		2728675	0		%			
ANR	2728747	Identifier	reg_odd		2728675	0					
ANR	2728748	PrimaryExpression	2		2728675	1					
ANR	2728749	PrimaryExpression	1		2728675	1					
ANR	2728750	CompoundStatement		12:4:371:371	2728675	1					
ANR	2728751	IfStatement	if ( errmsg )		2728675	0					
ANR	2728752	Condition	errmsg	1870:10:69135:69140	2728675	0	True				
ANR	2728753	Identifier	errmsg		2728675	0					
ANR	2728754	CompoundStatement		15:19:420:434	2728675	1					
ANR	2728755	Statement	static	1872:12:69165:69170	2728675	0	True				
ANR	2728756	IdentifierDeclStatement	char buf [ 100 ] ;	1872:19:69172:69186	2728675	1	True				
ANR	2728757	IdentifierDecl	buf [ 100 ]		2728675	0					
ANR	2728758	IdentifierDeclType	char [ 100 ]		2728675	0					
ANR	2728759	Identifier	buf		2728675	1					
ANR	2728760	PrimaryExpression	100		2728675	2					
ANR	2728761	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	1873:12:69200:69257	2728675	2	True				
ANR	2728762	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2728675	0					
ANR	2728763	Callee	sprintf		2728675	0					
ANR	2728764	Identifier	sprintf		2728675	0					
ANR	2728765	ArgumentList	buf		2728675	1					
ANR	2728766	Argument	buf		2728675	0					
ANR	2728767	Identifier	buf		2728675	0					
ANR	2728768	Argument	"""invalid odd register number: %d"""		2728675	1					
ANR	2728769	PrimaryExpression	"""invalid odd register number: %d"""		2728675	0					
ANR	2728770	Argument	reg_odd		2728675	2					
ANR	2728771	Identifier	reg_odd		2728675	0					
ANR	2728772	ExpressionStatement	* errmsg = buf	1874:12:69271:69284	2728675	3	True				
ANR	2728773	AssignmentExpression	* errmsg = buf		2728675	0		=			
ANR	2728774	UnaryOperationExpression	* errmsg		2728675	0					
ANR	2728775	UnaryOperator	*		2728675	0					
ANR	2728776	Identifier	errmsg		2728675	1					
ANR	2728777	Identifier	buf		2728675	1					
ANR	2728778	ReturnStatement	return NULL ;	1876:6:69302:69313	2728675	1	True				
ANR	2728779	Identifier	NULL		2728675	0					
ANR	2728780	IfStatement	if ( reg_even % 2 != 0 )		2728675	6					
ANR	2728781	Condition	reg_even % 2 != 0	1880:6:69374:69390	2728675	0	True				
ANR	2728782	EqualityExpression	reg_even % 2 != 0		2728675	0		!=			
ANR	2728783	MultiplicativeExpression	reg_even % 2		2728675	0		%			
ANR	2728784	Identifier	reg_even		2728675	0					
ANR	2728785	PrimaryExpression	2		2728675	1					
ANR	2728786	PrimaryExpression	0		2728675	1					
ANR	2728787	CompoundStatement		24:4:645:645	2728675	1					
ANR	2728788	IfStatement	if ( errmsg )		2728675	0					
ANR	2728789	Condition	errmsg	1882:10:69409:69414	2728675	0	True				
ANR	2728790	Identifier	errmsg		2728675	0					
ANR	2728791	CompoundStatement		27:19:694:708	2728675	1					
ANR	2728792	Statement	static	1884:12:69439:69444	2728675	0	True				
ANR	2728793	IdentifierDeclStatement	char buf [ 100 ] ;	1884:19:69446:69460	2728675	1	True				
ANR	2728794	IdentifierDecl	buf [ 100 ]		2728675	0					
ANR	2728795	IdentifierDeclType	char [ 100 ]		2728675	0					
ANR	2728796	Identifier	buf		2728675	1					
ANR	2728797	PrimaryExpression	100		2728675	2					
ANR	2728798	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	1885:12:69474:69533	2728675	2	True				
ANR	2728799	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2728675	0					
ANR	2728800	Callee	sprintf		2728675	0					
ANR	2728801	Identifier	sprintf		2728675	0					
ANR	2728802	ArgumentList	buf		2728675	1					
ANR	2728803	Argument	buf		2728675	0					
ANR	2728804	Identifier	buf		2728675	0					
ANR	2728805	Argument	"""invalid even register number: %d"""		2728675	1					
ANR	2728806	PrimaryExpression	"""invalid even register number: %d"""		2728675	0					
ANR	2728807	Argument	reg_even		2728675	2					
ANR	2728808	Identifier	reg_even		2728675	0					
ANR	2728809	ExpressionStatement	* errmsg = buf	1886:12:69547:69560	2728675	3	True				
ANR	2728810	AssignmentExpression	* errmsg = buf		2728675	0		=			
ANR	2728811	UnaryOperationExpression	* errmsg		2728675	0					
ANR	2728812	UnaryOperator	*		2728675	0					
ANR	2728813	Identifier	errmsg		2728675	1					
ANR	2728814	Identifier	buf		2728675	1					
ANR	2728815	ReturnStatement	return NULL ;	1888:6:69578:69589	2728675	1	True				
ANR	2728816	Identifier	NULL		2728675	0					
ANR	2728817	IfStatement	if ( reg_odd != reg_even + 1 )		2728675	7					
ANR	2728818	Condition	reg_odd != reg_even + 1	1892:6:69652:69674	2728675	0	True				
ANR	2728819	EqualityExpression	reg_odd != reg_even + 1		2728675	0		!=			
ANR	2728820	Identifier	reg_odd		2728675	0					
ANR	2728821	AdditiveExpression	reg_even + 1		2728675	1		+			
ANR	2728822	Identifier	reg_even		2728675	0					
ANR	2728823	PrimaryExpression	1		2728675	1					
ANR	2728824	CompoundStatement		36:4:929:929	2728675	1					
ANR	2728825	IfStatement	if ( errmsg )		2728675	0					
ANR	2728826	Condition	errmsg	1894:10:69693:69698	2728675	0	True				
ANR	2728827	Identifier	errmsg		2728675	0					
ANR	2728828	CompoundStatement		39:19:978:992	2728675	1					
ANR	2728829	Statement	static	1896:12:69723:69728	2728675	0	True				
ANR	2728830	IdentifierDeclStatement	char buf [ 100 ] ;	1896:19:69730:69744	2728675	1	True				
ANR	2728831	IdentifierDecl	buf [ 100 ]		2728675	0					
ANR	2728832	IdentifierDeclType	char [ 100 ]		2728675	0					
ANR	2728833	Identifier	buf		2728675	1					
ANR	2728834	PrimaryExpression	100		2728675	2					
ANR	2728835	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	1897:12:69758:69852	2728675	2	True				
ANR	2728836	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2728675	0					
ANR	2728837	Callee	sprintf		2728675	0					
ANR	2728838	Identifier	sprintf		2728675	0					
ANR	2728839	ArgumentList	buf		2728675	1					
ANR	2728840	Argument	buf		2728675	0					
ANR	2728841	Identifier	buf		2728675	0					
ANR	2728842	Argument	"""registers must be consecutive: %d:%d"""		2728675	1					
ANR	2728843	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2728675	0					
ANR	2728844	Argument	reg_odd		2728675	2					
ANR	2728845	Identifier	reg_odd		2728675	0					
ANR	2728846	Argument	reg_even		2728675	3					
ANR	2728847	Identifier	reg_even		2728675	0					
ANR	2728848	ExpressionStatement	* errmsg = buf	1899:12:69866:69879	2728675	3	True				
ANR	2728849	AssignmentExpression	* errmsg = buf		2728675	0		=			
ANR	2728850	UnaryOperationExpression	* errmsg		2728675	0					
ANR	2728851	UnaryOperator	*		2728675	0					
ANR	2728852	Identifier	errmsg		2728675	1					
ANR	2728853	Identifier	buf		2728675	1					
ANR	2728854	ReturnStatement	return NULL ;	1901:6:69897:69908	2728675	1	True				
ANR	2728855	Identifier	NULL		2728675	0					
ANR	2728856	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2728675	8					
ANR	2728857	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	1904:6:69923:70014	2728675	0	True				
ANR	2728858	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2728675	0					
ANR	2728859	Callee	hexagon_encode_operand		2728675	0					
ANR	2728860	Identifier	hexagon_encode_operand		2728675	0					
ANR	2728861	ArgumentList	operand		2728675	1					
ANR	2728862	Argument	operand		2728675	0					
ANR	2728863	Identifier	operand		2728675	0					
ANR	2728864	Argument	insn		2728675	1					
ANR	2728865	Identifier	insn		2728675	0					
ANR	2728866	Argument	opcode		2728675	2					
ANR	2728867	Identifier	opcode		2728675	0					
ANR	2728868	Argument	reg_even		2728675	3					
ANR	2728869	Identifier	reg_even		2728675	0					
ANR	2728870	Argument	NULL		2728675	4					
ANR	2728871	Identifier	NULL		2728675	0					
ANR	2728872	Argument	FALSE		2728675	5					
ANR	2728873	Identifier	FALSE		2728675	0					
ANR	2728874	Argument	FALSE		2728675	6					
ANR	2728875	Identifier	FALSE		2728675	0					
ANR	2728876	Argument	errmsg		2728675	7					
ANR	2728877	Identifier	errmsg		2728675	0					
ANR	2728878	CompoundStatement		49:4:1269:1269	2728675	1					
ANR	2728879	IfStatement	if ( flag )		2728675	0					
ANR	2728880	Condition	flag	1907:10:70033:70036	2728675	0	True				
ANR	2728881	Identifier	flag		2728675	0					
ANR	2728882	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	1908:8:70047:70078	2728675	1	True				
ANR	2728883	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		2728675	0		=			
ANR	2728884	UnaryOperationExpression	* flag		2728675	0					
ANR	2728885	UnaryOperator	*		2728675	0					
ANR	2728886	Identifier	flag		2728675	1					
ANR	2728887	Identifier	HEXAGON_OPERAND_IS_PAIR		2728675	1					
ANR	2728888	ExpressionStatement	* val = reg_even	1910:6:70087:70102	2728675	1	True				
ANR	2728889	AssignmentExpression	* val = reg_even		2728675	0		=			
ANR	2728890	UnaryOperationExpression	* val		2728675	0					
ANR	2728891	UnaryOperator	*		2728675	0					
ANR	2728892	Identifier	val		2728675	1					
ANR	2728893	Identifier	reg_even		2728675	1					
ANR	2728894	ReturnStatement	return ( input ) ;	1911:6:70110:70124	2728675	2	True				
ANR	2728895	Identifier	input		2728675	0					
ANR	2728896	ReturnStatement	return NULL ;	1914:2:70135:70146	2728675	9	True				
ANR	2728897	Identifier	NULL		2728675	0					
ANR	2728898	ReturnType	static char *		2728675	1					
ANR	2728899	Identifier	hexagon_parse_dreg		2728675	2					
ANR	2728900	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2728675	3					
ANR	2728901	Parameter	const hexagon_operand * operand	1856:1:68618:68647	2728675	0	True				
ANR	2728902	ParameterType	const hexagon_operand *		2728675	0					
ANR	2728903	Identifier	operand		2728675	1					
ANR	2728904	Parameter	hexagon_insn * insn	1856:33:68650:68667	2728675	1	True				
ANR	2728905	ParameterType	hexagon_insn *		2728675	0					
ANR	2728906	Identifier	insn		2728675	1					
ANR	2728907	Parameter	const hexagon_opcode * opcode	1856:53:68670:68697	2728675	2	True				
ANR	2728908	ParameterType	const hexagon_opcode *		2728675	0					
ANR	2728909	Identifier	opcode		2728675	1					
ANR	2728910	Parameter	char * input	1857:1:68701:68711	2728675	3	True				
ANR	2728911	ParameterType	char *		2728675	0					
ANR	2728912	Identifier	input		2728675	1					
ANR	2728913	Parameter	long * val	1857:14:68714:68722	2728675	4	True				
ANR	2728914	ParameterType	long *		2728675	0					
ANR	2728915	Identifier	val		2728675	1					
ANR	2728916	Parameter	int * flag	1857:25:68725:68733	2728675	5	True				
ANR	2728917	ParameterType	int *		2728675	0					
ANR	2728918	Identifier	flag		2728675	1					
ANR	2728919	Parameter	char * * errmsg	1857:36:68736:68748	2728675	6	True				
ANR	2728920	ParameterType	char * *		2728675	0					
ANR	2728921	Identifier	errmsg		2728675	1					
ANR	2728922	CFGEntryNode	ENTRY		2728675		True				
ANR	2728923	CFGExitNode	EXIT		2728675		True				
ANR	2728924	Symbol	val		2728675						
ANR	2728925	Symbol	flag		2728675						
ANR	2728926	Symbol	NULL		2728675						
ANR	2728927	Symbol	errmsg		2728675						
ANR	2728928	Symbol	* val		2728675						
ANR	2728929	Symbol	opcode		2728675						
ANR	2728930	Symbol	reg_even		2728675						
ANR	2728931	Symbol	insn		2728675						
ANR	2728932	Symbol	input		2728675						
ANR	2728933	Symbol	buf		2728675						
ANR	2728934	Symbol	& input		2728675						
ANR	2728935	Symbol	hexagon_gp_regs		2728675						
ANR	2728936	Symbol	hexagon_encode_operand		2728675						
ANR	2728937	Symbol	hexagon_reg_num		2728675						
ANR	2728938	Symbol	FALSE		2728675						
ANR	2728939	Symbol	reg_odd		2728675						
ANR	2728940	Symbol	hexagon_gp_regs_count		2728675						
ANR	2728941	Symbol	* errmsg		2728675						
ANR	2728942	Symbol	* flag		2728675						
ANR	2728943	Symbol	HEXAGON_OPERAND_IS_PAIR		2728675						
ANR	2728944	Symbol	operand		2728675						
ANR	2728945	Function	hexagon_parse_dreg16	1917:0:70151:71829							
ANR	2728946	FunctionDef	"hexagon_parse_dreg16 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2728945	0					
ANR	2728947	CompoundStatement		1921:0:70320:71829	2728945	0					
ANR	2728948	IdentifierDeclStatement	int reg_odd ;	1922:2:70324:70335	2728945	0	True				
ANR	2728949	IdentifierDecl	reg_odd		2728945	0					
ANR	2728950	IdentifierDeclType	int		2728945	0					
ANR	2728951	Identifier	reg_odd		2728945	1					
ANR	2728952	IdentifierDeclStatement	int reg_even ;	1923:2:70339:70351	2728945	1	True				
ANR	2728953	IdentifierDecl	reg_even		2728945	0					
ANR	2728954	IdentifierDeclType	int		2728945	0					
ANR	2728955	Identifier	reg_even		2728945	1					
ANR	2728956	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1925:2:70356:70457	2728945	2	True				
ANR	2728957	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728945	0		=			
ANR	2728958	Identifier	reg_odd		2728945	0					
ANR	2728959	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728945	1					
ANR	2728960	Callee	hexagon_reg_num		2728945	0					
ANR	2728961	Identifier	hexagon_reg_num		2728945	0					
ANR	2728962	ArgumentList	operand		2728945	1					
ANR	2728963	Argument	operand		2728945	0					
ANR	2728964	Identifier	operand		2728945	0					
ANR	2728965	Argument	& input		2728945	1					
ANR	2728966	UnaryOperationExpression	& input		2728945	0					
ANR	2728967	UnaryOperator	&		2728945	0					
ANR	2728968	Identifier	input		2728945	1					
ANR	2728969	Argument	'r'		2728945	2					
ANR	2728970	PrimaryExpression	'r'		2728945	0					
ANR	2728971	Argument	hexagon_gp_regs		2728945	3					
ANR	2728972	Identifier	hexagon_gp_regs		2728945	0					
ANR	2728973	Argument	hexagon_gp_regs_count		2728945	4					
ANR	2728974	Identifier	hexagon_gp_regs_count		2728945	0					
ANR	2728975	Argument	NULL		2728945	5					
ANR	2728976	Identifier	NULL		2728945	0					
ANR	2728977	Argument	'\\0'		2728945	6					
ANR	2728978	PrimaryExpression	'\\0'		2728945	0					
ANR	2728979	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1926:2:70461:70562	2728945	3	True				
ANR	2728980	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728945	0		=			
ANR	2728981	Identifier	reg_even		2728945	0					
ANR	2728982	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2728945	1					
ANR	2728983	Callee	hexagon_reg_num		2728945	0					
ANR	2728984	Identifier	hexagon_reg_num		2728945	0					
ANR	2728985	ArgumentList	operand		2728945	1					
ANR	2728986	Argument	operand		2728945	0					
ANR	2728987	Identifier	operand		2728945	0					
ANR	2728988	Argument	& input		2728945	1					
ANR	2728989	UnaryOperationExpression	& input		2728945	0					
ANR	2728990	UnaryOperator	&		2728945	0					
ANR	2728991	Identifier	input		2728945	1					
ANR	2728992	Argument	':'		2728945	2					
ANR	2728993	PrimaryExpression	':'		2728945	0					
ANR	2728994	Argument	hexagon_gp_regs		2728945	3					
ANR	2728995	Identifier	hexagon_gp_regs		2728945	0					
ANR	2728996	Argument	hexagon_gp_regs_count		2728945	4					
ANR	2728997	Identifier	hexagon_gp_regs_count		2728945	0					
ANR	2728998	Argument	NULL		2728945	5					
ANR	2728999	Identifier	NULL		2728945	0					
ANR	2729000	Argument	'\\0'		2728945	6					
ANR	2729001	PrimaryExpression	'\\0'		2728945	0					
ANR	2729002	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2728945	4					
ANR	2729003	Condition	reg_odd < 0 || reg_even < 0	1927:6:70570:70596	2728945	0	True				
ANR	2729004	OrExpression	reg_odd < 0 || reg_even < 0		2728945	0		||			
ANR	2729005	RelationalExpression	reg_odd < 0		2728945	0		<			
ANR	2729006	Identifier	reg_odd		2728945	0					
ANR	2729007	PrimaryExpression	0		2728945	1					
ANR	2729008	RelationalExpression	reg_even < 0		2728945	1		<			
ANR	2729009	Identifier	reg_even		2728945	0					
ANR	2729010	PrimaryExpression	0		2728945	1					
ANR	2729011	ReturnStatement	return ( NULL ) ;	1928:4:70603:70616	2728945	1	True				
ANR	2729012	Identifier	NULL		2728945	0					
ANR	2729013	IfStatement	if ( reg_odd % 2 != 1 )		2728945	5					
ANR	2729014	Condition	reg_odd % 2 != 1	1931:6:70670:70685	2728945	0	True				
ANR	2729015	EqualityExpression	reg_odd % 2 != 1		2728945	0		!=			
ANR	2729016	MultiplicativeExpression	reg_odd % 2		2728945	0		%			
ANR	2729017	Identifier	reg_odd		2728945	0					
ANR	2729018	PrimaryExpression	2		2728945	1					
ANR	2729019	PrimaryExpression	1		2728945	1					
ANR	2729020	CompoundStatement		12:4:371:371	2728945	1					
ANR	2729021	IfStatement	if ( errmsg )		2728945	0					
ANR	2729022	Condition	errmsg	1933:10:70704:70709	2728945	0	True				
ANR	2729023	Identifier	errmsg		2728945	0					
ANR	2729024	CompoundStatement		15:19:420:434	2728945	1					
ANR	2729025	Statement	static	1935:12:70734:70739	2728945	0	True				
ANR	2729026	IdentifierDeclStatement	char buf [ 100 ] ;	1935:19:70741:70755	2728945	1	True				
ANR	2729027	IdentifierDecl	buf [ 100 ]		2728945	0					
ANR	2729028	IdentifierDeclType	char [ 100 ]		2728945	0					
ANR	2729029	Identifier	buf		2728945	1					
ANR	2729030	PrimaryExpression	100		2728945	2					
ANR	2729031	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	1936:12:70769:70826	2728945	2	True				
ANR	2729032	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2728945	0					
ANR	2729033	Callee	sprintf		2728945	0					
ANR	2729034	Identifier	sprintf		2728945	0					
ANR	2729035	ArgumentList	buf		2728945	1					
ANR	2729036	Argument	buf		2728945	0					
ANR	2729037	Identifier	buf		2728945	0					
ANR	2729038	Argument	"""invalid odd register number: %d"""		2728945	1					
ANR	2729039	PrimaryExpression	"""invalid odd register number: %d"""		2728945	0					
ANR	2729040	Argument	reg_odd		2728945	2					
ANR	2729041	Identifier	reg_odd		2728945	0					
ANR	2729042	ExpressionStatement	* errmsg = buf	1937:12:70840:70853	2728945	3	True				
ANR	2729043	AssignmentExpression	* errmsg = buf		2728945	0		=			
ANR	2729044	UnaryOperationExpression	* errmsg		2728945	0					
ANR	2729045	UnaryOperator	*		2728945	0					
ANR	2729046	Identifier	errmsg		2728945	1					
ANR	2729047	Identifier	buf		2728945	1					
ANR	2729048	ReturnStatement	return ( NULL ) ;	1939:6:70871:70884	2728945	1	True				
ANR	2729049	Identifier	NULL		2728945	0					
ANR	2729050	IfStatement	if ( reg_even % 2 != 0 )		2728945	6					
ANR	2729051	Condition	reg_even % 2 != 0	1943:6:70945:70961	2728945	0	True				
ANR	2729052	EqualityExpression	reg_even % 2 != 0		2728945	0		!=			
ANR	2729053	MultiplicativeExpression	reg_even % 2		2728945	0		%			
ANR	2729054	Identifier	reg_even		2728945	0					
ANR	2729055	PrimaryExpression	2		2728945	1					
ANR	2729056	PrimaryExpression	0		2728945	1					
ANR	2729057	CompoundStatement		24:4:647:647	2728945	1					
ANR	2729058	IfStatement	if ( errmsg )		2728945	0					
ANR	2729059	Condition	errmsg	1945:10:70980:70985	2728945	0	True				
ANR	2729060	Identifier	errmsg		2728945	0					
ANR	2729061	CompoundStatement		27:19:696:710	2728945	1					
ANR	2729062	Statement	static	1947:12:71010:71015	2728945	0	True				
ANR	2729063	IdentifierDeclStatement	char buf [ 100 ] ;	1947:19:71017:71031	2728945	1	True				
ANR	2729064	IdentifierDecl	buf [ 100 ]		2728945	0					
ANR	2729065	IdentifierDeclType	char [ 100 ]		2728945	0					
ANR	2729066	Identifier	buf		2728945	1					
ANR	2729067	PrimaryExpression	100		2728945	2					
ANR	2729068	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	1948:12:71045:71104	2728945	2	True				
ANR	2729069	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2728945	0					
ANR	2729070	Callee	sprintf		2728945	0					
ANR	2729071	Identifier	sprintf		2728945	0					
ANR	2729072	ArgumentList	buf		2728945	1					
ANR	2729073	Argument	buf		2728945	0					
ANR	2729074	Identifier	buf		2728945	0					
ANR	2729075	Argument	"""invalid even register number: %d"""		2728945	1					
ANR	2729076	PrimaryExpression	"""invalid even register number: %d"""		2728945	0					
ANR	2729077	Argument	reg_even		2728945	2					
ANR	2729078	Identifier	reg_even		2728945	0					
ANR	2729079	ExpressionStatement	* errmsg = buf	1949:12:71118:71131	2728945	3	True				
ANR	2729080	AssignmentExpression	* errmsg = buf		2728945	0		=			
ANR	2729081	UnaryOperationExpression	* errmsg		2728945	0					
ANR	2729082	UnaryOperator	*		2728945	0					
ANR	2729083	Identifier	errmsg		2728945	1					
ANR	2729084	Identifier	buf		2728945	1					
ANR	2729085	ReturnStatement	return ( NULL ) ;	1951:6:71149:71162	2728945	1	True				
ANR	2729086	Identifier	NULL		2728945	0					
ANR	2729087	IfStatement	if ( reg_odd != reg_even + 1 )		2728945	7					
ANR	2729088	Condition	reg_odd != reg_even + 1	1955:6:71225:71247	2728945	0	True				
ANR	2729089	EqualityExpression	reg_odd != reg_even + 1		2728945	0		!=			
ANR	2729090	Identifier	reg_odd		2728945	0					
ANR	2729091	AdditiveExpression	reg_even + 1		2728945	1		+			
ANR	2729092	Identifier	reg_even		2728945	0					
ANR	2729093	PrimaryExpression	1		2728945	1					
ANR	2729094	CompoundStatement		36:4:933:933	2728945	1					
ANR	2729095	IfStatement	if ( errmsg )		2728945	0					
ANR	2729096	Condition	errmsg	1957:10:71266:71271	2728945	0	True				
ANR	2729097	Identifier	errmsg		2728945	0					
ANR	2729098	CompoundStatement		39:19:982:996	2728945	1					
ANR	2729099	Statement	static	1959:12:71296:71301	2728945	0	True				
ANR	2729100	IdentifierDeclStatement	char buf [ 100 ] ;	1959:19:71303:71317	2728945	1	True				
ANR	2729101	IdentifierDecl	buf [ 100 ]		2728945	0					
ANR	2729102	IdentifierDeclType	char [ 100 ]		2728945	0					
ANR	2729103	Identifier	buf		2728945	1					
ANR	2729104	PrimaryExpression	100		2728945	2					
ANR	2729105	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	1960:12:71331:71425	2728945	2	True				
ANR	2729106	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2728945	0					
ANR	2729107	Callee	sprintf		2728945	0					
ANR	2729108	Identifier	sprintf		2728945	0					
ANR	2729109	ArgumentList	buf		2728945	1					
ANR	2729110	Argument	buf		2728945	0					
ANR	2729111	Identifier	buf		2728945	0					
ANR	2729112	Argument	"""registers must be consecutive: %d:%d"""		2728945	1					
ANR	2729113	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2728945	0					
ANR	2729114	Argument	reg_odd		2728945	2					
ANR	2729115	Identifier	reg_odd		2728945	0					
ANR	2729116	Argument	reg_even		2728945	3					
ANR	2729117	Identifier	reg_even		2728945	0					
ANR	2729118	ExpressionStatement	* errmsg = buf	1962:12:71439:71452	2728945	3	True				
ANR	2729119	AssignmentExpression	* errmsg = buf		2728945	0		=			
ANR	2729120	UnaryOperationExpression	* errmsg		2728945	0					
ANR	2729121	UnaryOperator	*		2728945	0					
ANR	2729122	Identifier	errmsg		2728945	1					
ANR	2729123	Identifier	buf		2728945	1					
ANR	2729124	ReturnStatement	return ( NULL ) ;	1964:6:71470:71483	2728945	1	True				
ANR	2729125	Identifier	NULL		2728945	0					
ANR	2729126	IfStatement	if ( ( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) ) )		2728945	8					
ANR	2729127	Condition	( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) )	1967:6:71498:71573	2728945	0	True				
ANR	2729128	OrExpression	( ( reg_odd < 1 || reg_odd > 31 ) ) || ( ( reg_even < 0 || reg_even > 30 ) )		2728945	0		||			
ANR	2729129	OrExpression	reg_odd < 1 || reg_odd > 31		2728945	0		||			
ANR	2729130	RelationalExpression	reg_odd < 1		2728945	0		<			
ANR	2729131	Identifier	reg_odd		2728945	0					
ANR	2729132	PrimaryExpression	1		2728945	1					
ANR	2729133	RelationalExpression	reg_odd > 31		2728945	1		>			
ANR	2729134	Identifier	reg_odd		2728945	0					
ANR	2729135	PrimaryExpression	31		2728945	1					
ANR	2729136	OrExpression	reg_even < 0 || reg_even > 30		2728945	1		||			
ANR	2729137	RelationalExpression	reg_even < 0		2728945	0		<			
ANR	2729138	Identifier	reg_even		2728945	0					
ANR	2729139	PrimaryExpression	0		2728945	1					
ANR	2729140	RelationalExpression	reg_even > 30		2728945	1		>			
ANR	2729141	Identifier	reg_even		2728945	0					
ANR	2729142	PrimaryExpression	30		2728945	1					
ANR	2729143	ReturnStatement	return ( NULL ) ;	1969:4:71580:71593	2728945	1	True				
ANR	2729144	Identifier	NULL		2728945	0					
ANR	2729145	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2728945	9					
ANR	2729146	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	1971:6:71602:71693	2728945	0	True				
ANR	2729147	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2728945	0					
ANR	2729148	Callee	hexagon_encode_operand		2728945	0					
ANR	2729149	Identifier	hexagon_encode_operand		2728945	0					
ANR	2729150	ArgumentList	operand		2728945	1					
ANR	2729151	Argument	operand		2728945	0					
ANR	2729152	Identifier	operand		2728945	0					
ANR	2729153	Argument	insn		2728945	1					
ANR	2729154	Identifier	insn		2728945	0					
ANR	2729155	Argument	opcode		2728945	2					
ANR	2729156	Identifier	opcode		2728945	0					
ANR	2729157	Argument	reg_even		2728945	3					
ANR	2729158	Identifier	reg_even		2728945	0					
ANR	2729159	Argument	NULL		2728945	4					
ANR	2729160	Identifier	NULL		2728945	0					
ANR	2729161	Argument	FALSE		2728945	5					
ANR	2729162	Identifier	FALSE		2728945	0					
ANR	2729163	Argument	FALSE		2728945	6					
ANR	2729164	Identifier	FALSE		2728945	0					
ANR	2729165	Argument	errmsg		2728945	7					
ANR	2729166	Identifier	errmsg		2728945	0					
ANR	2729167	CompoundStatement		53:4:1379:1379	2728945	1					
ANR	2729168	IfStatement	if ( flag )		2728945	0					
ANR	2729169	Condition	flag	1974:10:71712:71715	2728945	0	True				
ANR	2729170	Identifier	flag		2728945	0					
ANR	2729171	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	1975:8:71726:71757	2728945	1	True				
ANR	2729172	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		2728945	0		=			
ANR	2729173	UnaryOperationExpression	* flag		2728945	0					
ANR	2729174	UnaryOperator	*		2728945	0					
ANR	2729175	Identifier	flag		2728945	1					
ANR	2729176	Identifier	HEXAGON_OPERAND_IS_PAIR		2728945	1					
ANR	2729177	ExpressionStatement	* val = reg_even	1977:6:71766:71781	2728945	1	True				
ANR	2729178	AssignmentExpression	* val = reg_even		2728945	0		=			
ANR	2729179	UnaryOperationExpression	* val		2728945	0					
ANR	2729180	UnaryOperator	*		2728945	0					
ANR	2729181	Identifier	val		2728945	1					
ANR	2729182	Identifier	reg_even		2728945	1					
ANR	2729183	ReturnStatement	return ( input ) ;	1978:6:71789:71803	2728945	2	True				
ANR	2729184	Identifier	input		2728945	0					
ANR	2729185	ReturnStatement	return ( NULL ) ;	1981:2:71814:71827	2728945	10	True				
ANR	2729186	Identifier	NULL		2728945	0					
ANR	2729187	ReturnType	static char *		2728945	1					
ANR	2729188	Identifier	hexagon_parse_dreg16		2728945	2					
ANR	2729189	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2728945	3					
ANR	2729190	Parameter	const hexagon_operand * operand	1919:1:70187:70216	2728945	0	True				
ANR	2729191	ParameterType	const hexagon_operand *		2728945	0					
ANR	2729192	Identifier	operand		2728945	1					
ANR	2729193	Parameter	hexagon_insn * insn	1919:33:70219:70236	2728945	1	True				
ANR	2729194	ParameterType	hexagon_insn *		2728945	0					
ANR	2729195	Identifier	insn		2728945	1					
ANR	2729196	Parameter	const hexagon_opcode * opcode	1919:53:70239:70266	2728945	2	True				
ANR	2729197	ParameterType	const hexagon_opcode *		2728945	0					
ANR	2729198	Identifier	opcode		2728945	1					
ANR	2729199	Parameter	char * input	1920:1:70270:70280	2728945	3	True				
ANR	2729200	ParameterType	char *		2728945	0					
ANR	2729201	Identifier	input		2728945	1					
ANR	2729202	Parameter	long * val	1920:14:70283:70291	2728945	4	True				
ANR	2729203	ParameterType	long *		2728945	0					
ANR	2729204	Identifier	val		2728945	1					
ANR	2729205	Parameter	int * flag	1920:25:70294:70302	2728945	5	True				
ANR	2729206	ParameterType	int *		2728945	0					
ANR	2729207	Identifier	flag		2728945	1					
ANR	2729208	Parameter	char * * errmsg	1920:36:70305:70317	2728945	6	True				
ANR	2729209	ParameterType	char * *		2728945	0					
ANR	2729210	Identifier	errmsg		2728945	1					
ANR	2729211	CFGEntryNode	ENTRY		2728945		True				
ANR	2729212	CFGExitNode	EXIT		2728945		True				
ANR	2729213	Symbol	val		2728945						
ANR	2729214	Symbol	flag		2728945						
ANR	2729215	Symbol	NULL		2728945						
ANR	2729216	Symbol	errmsg		2728945						
ANR	2729217	Symbol	* val		2728945						
ANR	2729218	Symbol	opcode		2728945						
ANR	2729219	Symbol	reg_even		2728945						
ANR	2729220	Symbol	insn		2728945						
ANR	2729221	Symbol	input		2728945						
ANR	2729222	Symbol	buf		2728945						
ANR	2729223	Symbol	& input		2728945						
ANR	2729224	Symbol	hexagon_gp_regs		2728945						
ANR	2729225	Symbol	hexagon_encode_operand		2728945						
ANR	2729226	Symbol	hexagon_reg_num		2728945						
ANR	2729227	Symbol	FALSE		2728945						
ANR	2729228	Symbol	reg_odd		2728945						
ANR	2729229	Symbol	hexagon_gp_regs_count		2728945						
ANR	2729230	Symbol	* errmsg		2728945						
ANR	2729231	Symbol	* flag		2728945						
ANR	2729232	Symbol	HEXAGON_OPERAND_IS_PAIR		2728945						
ANR	2729233	Symbol	operand		2728945						
ANR	2729234	Function	hexagon_parse_dreg8	1984:0:71832:73580							
ANR	2729235	FunctionDef	"hexagon_parse_dreg8 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2729234	0					
ANR	2729236	CompoundStatement		1988:0:72000:73580	2729234	0					
ANR	2729237	IdentifierDeclStatement	int reg_odd ;	1989:2:72004:72015	2729234	0	True				
ANR	2729238	IdentifierDecl	reg_odd		2729234	0					
ANR	2729239	IdentifierDeclType	int		2729234	0					
ANR	2729240	Identifier	reg_odd		2729234	1					
ANR	2729241	IdentifierDeclStatement	int reg_even ;	1990:2:72019:72031	2729234	1	True				
ANR	2729242	IdentifierDecl	reg_even		2729234	0					
ANR	2729243	IdentifierDeclType	int		2729234	0					
ANR	2729244	Identifier	reg_even		2729234	1					
ANR	2729245	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1992:2:72036:72137	2729234	2	True				
ANR	2729246	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729234	0		=			
ANR	2729247	Identifier	reg_odd		2729234	0					
ANR	2729248	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729234	1					
ANR	2729249	Callee	hexagon_reg_num		2729234	0					
ANR	2729250	Identifier	hexagon_reg_num		2729234	0					
ANR	2729251	ArgumentList	operand		2729234	1					
ANR	2729252	Argument	operand		2729234	0					
ANR	2729253	Identifier	operand		2729234	0					
ANR	2729254	Argument	& input		2729234	1					
ANR	2729255	UnaryOperationExpression	& input		2729234	0					
ANR	2729256	UnaryOperator	&		2729234	0					
ANR	2729257	Identifier	input		2729234	1					
ANR	2729258	Argument	'r'		2729234	2					
ANR	2729259	PrimaryExpression	'r'		2729234	0					
ANR	2729260	Argument	hexagon_gp_regs		2729234	3					
ANR	2729261	Identifier	hexagon_gp_regs		2729234	0					
ANR	2729262	Argument	hexagon_gp_regs_count		2729234	4					
ANR	2729263	Identifier	hexagon_gp_regs_count		2729234	0					
ANR	2729264	Argument	NULL		2729234	5					
ANR	2729265	Identifier	NULL		2729234	0					
ANR	2729266	Argument	'\\0'		2729234	6					
ANR	2729267	PrimaryExpression	'\\0'		2729234	0					
ANR	2729268	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	1993:2:72141:72242	2729234	3	True				
ANR	2729269	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729234	0		=			
ANR	2729270	Identifier	reg_even		2729234	0					
ANR	2729271	CallExpression	"hexagon_reg_num ( operand , & input , ':' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729234	1					
ANR	2729272	Callee	hexagon_reg_num		2729234	0					
ANR	2729273	Identifier	hexagon_reg_num		2729234	0					
ANR	2729274	ArgumentList	operand		2729234	1					
ANR	2729275	Argument	operand		2729234	0					
ANR	2729276	Identifier	operand		2729234	0					
ANR	2729277	Argument	& input		2729234	1					
ANR	2729278	UnaryOperationExpression	& input		2729234	0					
ANR	2729279	UnaryOperator	&		2729234	0					
ANR	2729280	Identifier	input		2729234	1					
ANR	2729281	Argument	':'		2729234	2					
ANR	2729282	PrimaryExpression	':'		2729234	0					
ANR	2729283	Argument	hexagon_gp_regs		2729234	3					
ANR	2729284	Identifier	hexagon_gp_regs		2729234	0					
ANR	2729285	Argument	hexagon_gp_regs_count		2729234	4					
ANR	2729286	Identifier	hexagon_gp_regs_count		2729234	0					
ANR	2729287	Argument	NULL		2729234	5					
ANR	2729288	Identifier	NULL		2729234	0					
ANR	2729289	Argument	'\\0'		2729234	6					
ANR	2729290	PrimaryExpression	'\\0'		2729234	0					
ANR	2729291	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2729234	4					
ANR	2729292	Condition	reg_odd < 0 || reg_even < 0	1994:6:72250:72276	2729234	0	True				
ANR	2729293	OrExpression	reg_odd < 0 || reg_even < 0		2729234	0		||			
ANR	2729294	RelationalExpression	reg_odd < 0		2729234	0		<			
ANR	2729295	Identifier	reg_odd		2729234	0					
ANR	2729296	PrimaryExpression	0		2729234	1					
ANR	2729297	RelationalExpression	reg_even < 0		2729234	1		<			
ANR	2729298	Identifier	reg_even		2729234	0					
ANR	2729299	PrimaryExpression	0		2729234	1					
ANR	2729300	ReturnStatement	return ( NULL ) ;	1995:4:72283:72296	2729234	1	True				
ANR	2729301	Identifier	NULL		2729234	0					
ANR	2729302	IfStatement	if ( reg_odd % 2 != 1 )		2729234	5					
ANR	2729303	Condition	reg_odd % 2 != 1	1998:6:72350:72365	2729234	0	True				
ANR	2729304	EqualityExpression	reg_odd % 2 != 1		2729234	0		!=			
ANR	2729305	MultiplicativeExpression	reg_odd % 2		2729234	0		%			
ANR	2729306	Identifier	reg_odd		2729234	0					
ANR	2729307	PrimaryExpression	2		2729234	1					
ANR	2729308	PrimaryExpression	1		2729234	1					
ANR	2729309	CompoundStatement		12:4:371:371	2729234	1					
ANR	2729310	IfStatement	if ( errmsg )		2729234	0					
ANR	2729311	Condition	errmsg	2000:10:72384:72389	2729234	0	True				
ANR	2729312	Identifier	errmsg		2729234	0					
ANR	2729313	CompoundStatement		15:19:420:434	2729234	1					
ANR	2729314	Statement	static	2002:12:72414:72419	2729234	0	True				
ANR	2729315	IdentifierDeclStatement	char buf [ 100 ] ;	2002:19:72421:72435	2729234	1	True				
ANR	2729316	IdentifierDecl	buf [ 100 ]		2729234	0					
ANR	2729317	IdentifierDeclType	char [ 100 ]		2729234	0					
ANR	2729318	Identifier	buf		2729234	1					
ANR	2729319	PrimaryExpression	100		2729234	2					
ANR	2729320	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2003:12:72449:72506	2729234	2	True				
ANR	2729321	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2729234	0					
ANR	2729322	Callee	sprintf		2729234	0					
ANR	2729323	Identifier	sprintf		2729234	0					
ANR	2729324	ArgumentList	buf		2729234	1					
ANR	2729325	Argument	buf		2729234	0					
ANR	2729326	Identifier	buf		2729234	0					
ANR	2729327	Argument	"""invalid odd register number: %d"""		2729234	1					
ANR	2729328	PrimaryExpression	"""invalid odd register number: %d"""		2729234	0					
ANR	2729329	Argument	reg_odd		2729234	2					
ANR	2729330	Identifier	reg_odd		2729234	0					
ANR	2729331	ExpressionStatement	* errmsg = buf	2004:12:72520:72533	2729234	3	True				
ANR	2729332	AssignmentExpression	* errmsg = buf		2729234	0		=			
ANR	2729333	UnaryOperationExpression	* errmsg		2729234	0					
ANR	2729334	UnaryOperator	*		2729234	0					
ANR	2729335	Identifier	errmsg		2729234	1					
ANR	2729336	Identifier	buf		2729234	1					
ANR	2729337	ReturnStatement	return ( NULL ) ;	2006:6:72551:72564	2729234	1	True				
ANR	2729338	Identifier	NULL		2729234	0					
ANR	2729339	IfStatement	if ( reg_even % 2 != 0 )		2729234	6					
ANR	2729340	Condition	reg_even % 2 != 0	2010:6:72625:72641	2729234	0	True				
ANR	2729341	EqualityExpression	reg_even % 2 != 0		2729234	0		!=			
ANR	2729342	MultiplicativeExpression	reg_even % 2		2729234	0		%			
ANR	2729343	Identifier	reg_even		2729234	0					
ANR	2729344	PrimaryExpression	2		2729234	1					
ANR	2729345	PrimaryExpression	0		2729234	1					
ANR	2729346	CompoundStatement		24:4:647:647	2729234	1					
ANR	2729347	IfStatement	if ( errmsg )		2729234	0					
ANR	2729348	Condition	errmsg	2012:10:72660:72665	2729234	0	True				
ANR	2729349	Identifier	errmsg		2729234	0					
ANR	2729350	CompoundStatement		27:19:696:710	2729234	1					
ANR	2729351	Statement	static	2014:12:72690:72695	2729234	0	True				
ANR	2729352	IdentifierDeclStatement	char buf [ 100 ] ;	2014:19:72697:72711	2729234	1	True				
ANR	2729353	IdentifierDecl	buf [ 100 ]		2729234	0					
ANR	2729354	IdentifierDeclType	char [ 100 ]		2729234	0					
ANR	2729355	Identifier	buf		2729234	1					
ANR	2729356	PrimaryExpression	100		2729234	2					
ANR	2729357	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2015:12:72725:72784	2729234	2	True				
ANR	2729358	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2729234	0					
ANR	2729359	Callee	sprintf		2729234	0					
ANR	2729360	Identifier	sprintf		2729234	0					
ANR	2729361	ArgumentList	buf		2729234	1					
ANR	2729362	Argument	buf		2729234	0					
ANR	2729363	Identifier	buf		2729234	0					
ANR	2729364	Argument	"""invalid even register number: %d"""		2729234	1					
ANR	2729365	PrimaryExpression	"""invalid even register number: %d"""		2729234	0					
ANR	2729366	Argument	reg_even		2729234	2					
ANR	2729367	Identifier	reg_even		2729234	0					
ANR	2729368	ExpressionStatement	* errmsg = buf	2016:12:72798:72811	2729234	3	True				
ANR	2729369	AssignmentExpression	* errmsg = buf		2729234	0		=			
ANR	2729370	UnaryOperationExpression	* errmsg		2729234	0					
ANR	2729371	UnaryOperator	*		2729234	0					
ANR	2729372	Identifier	errmsg		2729234	1					
ANR	2729373	Identifier	buf		2729234	1					
ANR	2729374	ReturnStatement	return ( NULL ) ;	2018:6:72829:72842	2729234	1	True				
ANR	2729375	Identifier	NULL		2729234	0					
ANR	2729376	IfStatement	if ( reg_odd != reg_even + 1 )		2729234	7					
ANR	2729377	Condition	reg_odd != reg_even + 1	2022:6:72905:72927	2729234	0	True				
ANR	2729378	EqualityExpression	reg_odd != reg_even + 1		2729234	0		!=			
ANR	2729379	Identifier	reg_odd		2729234	0					
ANR	2729380	AdditiveExpression	reg_even + 1		2729234	1		+			
ANR	2729381	Identifier	reg_even		2729234	0					
ANR	2729382	PrimaryExpression	1		2729234	1					
ANR	2729383	CompoundStatement		36:4:933:933	2729234	1					
ANR	2729384	IfStatement	if ( errmsg )		2729234	0					
ANR	2729385	Condition	errmsg	2024:10:72946:72951	2729234	0	True				
ANR	2729386	Identifier	errmsg		2729234	0					
ANR	2729387	CompoundStatement		39:19:982:996	2729234	1					
ANR	2729388	Statement	static	2026:12:72976:72981	2729234	0	True				
ANR	2729389	IdentifierDeclStatement	char buf [ 100 ] ;	2026:19:72983:72997	2729234	1	True				
ANR	2729390	IdentifierDecl	buf [ 100 ]		2729234	0					
ANR	2729391	IdentifierDeclType	char [ 100 ]		2729234	0					
ANR	2729392	Identifier	buf		2729234	1					
ANR	2729393	PrimaryExpression	100		2729234	2					
ANR	2729394	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2027:12:73011:73105	2729234	2	True				
ANR	2729395	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2729234	0					
ANR	2729396	Callee	sprintf		2729234	0					
ANR	2729397	Identifier	sprintf		2729234	0					
ANR	2729398	ArgumentList	buf		2729234	1					
ANR	2729399	Argument	buf		2729234	0					
ANR	2729400	Identifier	buf		2729234	0					
ANR	2729401	Argument	"""registers must be consecutive: %d:%d"""		2729234	1					
ANR	2729402	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2729234	0					
ANR	2729403	Argument	reg_odd		2729234	2					
ANR	2729404	Identifier	reg_odd		2729234	0					
ANR	2729405	Argument	reg_even		2729234	3					
ANR	2729406	Identifier	reg_even		2729234	0					
ANR	2729407	ExpressionStatement	* errmsg = buf	2029:12:73119:73132	2729234	3	True				
ANR	2729408	AssignmentExpression	* errmsg = buf		2729234	0		=			
ANR	2729409	UnaryOperationExpression	* errmsg		2729234	0					
ANR	2729410	UnaryOperator	*		2729234	0					
ANR	2729411	Identifier	errmsg		2729234	1					
ANR	2729412	Identifier	buf		2729234	1					
ANR	2729413	ReturnStatement	return ( NULL ) ;	2031:6:73150:73163	2729234	1	True				
ANR	2729414	Identifier	NULL		2729234	0					
ANR	2729415	IfStatement	if ( ( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) ) )		2729234	8					
ANR	2729416	Condition	( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) )	2034:6:73178:73324	2729234	0	True				
ANR	2729417	OrExpression	( ( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 ) ) || ( ( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 ) )		2729234	0		||			
ANR	2729418	AndExpression	( reg_odd < 1 || reg_odd > 7 ) && ( reg_odd < 17 || reg_odd > 23 )		2729234	0		&&			
ANR	2729419	OrExpression	reg_odd < 1 || reg_odd > 7		2729234	0		||			
ANR	2729420	RelationalExpression	reg_odd < 1		2729234	0		<			
ANR	2729421	Identifier	reg_odd		2729234	0					
ANR	2729422	PrimaryExpression	1		2729234	1					
ANR	2729423	RelationalExpression	reg_odd > 7		2729234	1		>			
ANR	2729424	Identifier	reg_odd		2729234	0					
ANR	2729425	PrimaryExpression	7		2729234	1					
ANR	2729426	OrExpression	reg_odd < 17 || reg_odd > 23		2729234	1		||			
ANR	2729427	RelationalExpression	reg_odd < 17		2729234	0		<			
ANR	2729428	Identifier	reg_odd		2729234	0					
ANR	2729429	PrimaryExpression	17		2729234	1					
ANR	2729430	RelationalExpression	reg_odd > 23		2729234	1		>			
ANR	2729431	Identifier	reg_odd		2729234	0					
ANR	2729432	PrimaryExpression	23		2729234	1					
ANR	2729433	AndExpression	( reg_even > 6 ) && ( reg_even < 16 || reg_even > 22 )		2729234	1		&&			
ANR	2729434	RelationalExpression	reg_even > 6		2729234	0		>			
ANR	2729435	Identifier	reg_even		2729234	0					
ANR	2729436	PrimaryExpression	6		2729234	1					
ANR	2729437	OrExpression	reg_even < 16 || reg_even > 22		2729234	1		||			
ANR	2729438	RelationalExpression	reg_even < 16		2729234	0		<			
ANR	2729439	Identifier	reg_even		2729234	0					
ANR	2729440	PrimaryExpression	16		2729234	1					
ANR	2729441	RelationalExpression	reg_even > 22		2729234	1		>			
ANR	2729442	Identifier	reg_even		2729234	0					
ANR	2729443	PrimaryExpression	22		2729234	1					
ANR	2729444	ReturnStatement	return ( NULL ) ;	2038:4:73331:73344	2729234	1	True				
ANR	2729445	Identifier	NULL		2729234	0					
ANR	2729446	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2729234	9					
ANR	2729447	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2040:6:73353:73444	2729234	0	True				
ANR	2729448	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2729234	0					
ANR	2729449	Callee	hexagon_encode_operand		2729234	0					
ANR	2729450	Identifier	hexagon_encode_operand		2729234	0					
ANR	2729451	ArgumentList	operand		2729234	1					
ANR	2729452	Argument	operand		2729234	0					
ANR	2729453	Identifier	operand		2729234	0					
ANR	2729454	Argument	insn		2729234	1					
ANR	2729455	Identifier	insn		2729234	0					
ANR	2729456	Argument	opcode		2729234	2					
ANR	2729457	Identifier	opcode		2729234	0					
ANR	2729458	Argument	reg_even		2729234	3					
ANR	2729459	Identifier	reg_even		2729234	0					
ANR	2729460	Argument	NULL		2729234	4					
ANR	2729461	Identifier	NULL		2729234	0					
ANR	2729462	Argument	FALSE		2729234	5					
ANR	2729463	Identifier	FALSE		2729234	0					
ANR	2729464	Argument	FALSE		2729234	6					
ANR	2729465	Identifier	FALSE		2729234	0					
ANR	2729466	Argument	errmsg		2729234	7					
ANR	2729467	Identifier	errmsg		2729234	0					
ANR	2729468	CompoundStatement		55:4:1450:1450	2729234	1					
ANR	2729469	IfStatement	if ( flag )		2729234	0					
ANR	2729470	Condition	flag	2043:10:73463:73466	2729234	0	True				
ANR	2729471	Identifier	flag		2729234	0					
ANR	2729472	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PAIR	2044:8:73477:73508	2729234	1	True				
ANR	2729473	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PAIR		2729234	0		=			
ANR	2729474	UnaryOperationExpression	* flag		2729234	0					
ANR	2729475	UnaryOperator	*		2729234	0					
ANR	2729476	Identifier	flag		2729234	1					
ANR	2729477	Identifier	HEXAGON_OPERAND_IS_PAIR		2729234	1					
ANR	2729478	ExpressionStatement	* val = reg_even	2046:6:73517:73532	2729234	1	True				
ANR	2729479	AssignmentExpression	* val = reg_even		2729234	0		=			
ANR	2729480	UnaryOperationExpression	* val		2729234	0					
ANR	2729481	UnaryOperator	*		2729234	0					
ANR	2729482	Identifier	val		2729234	1					
ANR	2729483	Identifier	reg_even		2729234	1					
ANR	2729484	ReturnStatement	return ( input ) ;	2047:6:73540:73554	2729234	2	True				
ANR	2729485	Identifier	input		2729234	0					
ANR	2729486	ReturnStatement	return ( NULL ) ;	2050:2:73565:73578	2729234	10	True				
ANR	2729487	Identifier	NULL		2729234	0					
ANR	2729488	ReturnType	static char *		2729234	1					
ANR	2729489	Identifier	hexagon_parse_dreg8		2729234	2					
ANR	2729490	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2729234	3					
ANR	2729491	Parameter	const hexagon_operand * operand	1986:1:71867:71896	2729234	0	True				
ANR	2729492	ParameterType	const hexagon_operand *		2729234	0					
ANR	2729493	Identifier	operand		2729234	1					
ANR	2729494	Parameter	hexagon_insn * insn	1986:33:71899:71916	2729234	1	True				
ANR	2729495	ParameterType	hexagon_insn *		2729234	0					
ANR	2729496	Identifier	insn		2729234	1					
ANR	2729497	Parameter	const hexagon_opcode * opcode	1986:53:71919:71946	2729234	2	True				
ANR	2729498	ParameterType	const hexagon_opcode *		2729234	0					
ANR	2729499	Identifier	opcode		2729234	1					
ANR	2729500	Parameter	char * input	1987:1:71950:71960	2729234	3	True				
ANR	2729501	ParameterType	char *		2729234	0					
ANR	2729502	Identifier	input		2729234	1					
ANR	2729503	Parameter	long * val	1987:14:71963:71971	2729234	4	True				
ANR	2729504	ParameterType	long *		2729234	0					
ANR	2729505	Identifier	val		2729234	1					
ANR	2729506	Parameter	int * flag	1987:25:71974:71982	2729234	5	True				
ANR	2729507	ParameterType	int *		2729234	0					
ANR	2729508	Identifier	flag		2729234	1					
ANR	2729509	Parameter	char * * errmsg	1987:36:71985:71997	2729234	6	True				
ANR	2729510	ParameterType	char * *		2729234	0					
ANR	2729511	Identifier	errmsg		2729234	1					
ANR	2729512	CFGEntryNode	ENTRY		2729234		True				
ANR	2729513	CFGExitNode	EXIT		2729234		True				
ANR	2729514	Symbol	val		2729234						
ANR	2729515	Symbol	flag		2729234						
ANR	2729516	Symbol	NULL		2729234						
ANR	2729517	Symbol	errmsg		2729234						
ANR	2729518	Symbol	* val		2729234						
ANR	2729519	Symbol	opcode		2729234						
ANR	2729520	Symbol	reg_even		2729234						
ANR	2729521	Symbol	insn		2729234						
ANR	2729522	Symbol	input		2729234						
ANR	2729523	Symbol	buf		2729234						
ANR	2729524	Symbol	& input		2729234						
ANR	2729525	Symbol	hexagon_gp_regs		2729234						
ANR	2729526	Symbol	hexagon_encode_operand		2729234						
ANR	2729527	Symbol	hexagon_reg_num		2729234						
ANR	2729528	Symbol	FALSE		2729234						
ANR	2729529	Symbol	reg_odd		2729234						
ANR	2729530	Symbol	hexagon_gp_regs_count		2729234						
ANR	2729531	Symbol	* errmsg		2729234						
ANR	2729532	Symbol	* flag		2729234						
ANR	2729533	Symbol	HEXAGON_OPERAND_IS_PAIR		2729234						
ANR	2729534	Symbol	operand		2729234						
ANR	2729535	Function	hexagon_parse_reg	2053:0:73583:74118							
ANR	2729536	FunctionDef	"hexagon_parse_reg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2729535	0					
ANR	2729537	CompoundStatement		2057:0:73742:74118	2729535	0					
ANR	2729538	IdentifierDeclStatement	int reg ;	2058:2:73746:73753	2729535	0	True				
ANR	2729539	IdentifierDecl	reg		2729535	0					
ANR	2729540	IdentifierDeclType	int		2729535	0					
ANR	2729541	Identifier	reg		2729535	1					
ANR	2729542	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2060:2:73758:73854	2729535	1	True				
ANR	2729543	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729535	0		=			
ANR	2729544	Identifier	reg		2729535	0					
ANR	2729545	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729535	1					
ANR	2729546	Callee	hexagon_reg_num		2729535	0					
ANR	2729547	Identifier	hexagon_reg_num		2729535	0					
ANR	2729548	ArgumentList	operand		2729535	1					
ANR	2729549	Argument	operand		2729535	0					
ANR	2729550	Identifier	operand		2729535	0					
ANR	2729551	Argument	& input		2729535	1					
ANR	2729552	UnaryOperationExpression	& input		2729535	0					
ANR	2729553	UnaryOperator	&		2729535	0					
ANR	2729554	Identifier	input		2729535	1					
ANR	2729555	Argument	'r'		2729535	2					
ANR	2729556	PrimaryExpression	'r'		2729535	0					
ANR	2729557	Argument	hexagon_gp_regs		2729535	3					
ANR	2729558	Identifier	hexagon_gp_regs		2729535	0					
ANR	2729559	Argument	hexagon_gp_regs_count		2729535	4					
ANR	2729560	Identifier	hexagon_gp_regs_count		2729535	0					
ANR	2729561	Argument	NULL		2729535	5					
ANR	2729562	Identifier	NULL		2729535	0					
ANR	2729563	Argument	'\\0'		2729535	6					
ANR	2729564	PrimaryExpression	'\\0'		2729535	0					
ANR	2729565	IfStatement	if ( reg < 0 )		2729535	2					
ANR	2729566	Condition	reg < 0	2061:6:73862:73868	2729535	0	True				
ANR	2729567	RelationalExpression	reg < 0		2729535	0		<			
ANR	2729568	Identifier	reg		2729535	0					
ANR	2729569	PrimaryExpression	0		2729535	1					
ANR	2729570	ReturnStatement	return ( NULL ) ;	2062:4:73875:73888	2729535	1	True				
ANR	2729571	Identifier	NULL		2729535	0					
ANR	2729572	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2729535	3					
ANR	2729573	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2064:6:73897:73983	2729535	0	True				
ANR	2729574	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2729535	0					
ANR	2729575	Callee	hexagon_encode_operand		2729535	0					
ANR	2729576	Identifier	hexagon_encode_operand		2729535	0					
ANR	2729577	ArgumentList	operand		2729535	1					
ANR	2729578	Argument	operand		2729535	0					
ANR	2729579	Identifier	operand		2729535	0					
ANR	2729580	Argument	insn		2729535	1					
ANR	2729581	Identifier	insn		2729535	0					
ANR	2729582	Argument	opcode		2729535	2					
ANR	2729583	Identifier	opcode		2729535	0					
ANR	2729584	Argument	reg		2729535	3					
ANR	2729585	Identifier	reg		2729535	0					
ANR	2729586	Argument	NULL		2729535	4					
ANR	2729587	Identifier	NULL		2729535	0					
ANR	2729588	Argument	FALSE		2729535	5					
ANR	2729589	Identifier	FALSE		2729535	0					
ANR	2729590	Argument	FALSE		2729535	6					
ANR	2729591	Identifier	FALSE		2729535	0					
ANR	2729592	Argument	errmsg		2729535	7					
ANR	2729593	Identifier	errmsg		2729535	0					
ANR	2729594	CompoundStatement		10:4:247:247	2729535	1					
ANR	2729595	IfStatement	if ( flag )		2729535	0					
ANR	2729596	Condition	flag	2067:10:74002:74005	2729535	0	True				
ANR	2729597	Identifier	flag		2729535	0					
ANR	2729598	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2068:8:74016:74051	2729535	1	True				
ANR	2729599	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		2729535	0		=			
ANR	2729600	UnaryOperationExpression	* flag		2729535	0					
ANR	2729601	UnaryOperator	*		2729535	0					
ANR	2729602	Identifier	flag		2729535	1					
ANR	2729603	Identifier	HEXAGON_OPERAND_IS_REGISTER		2729535	1					
ANR	2729604	ExpressionStatement	* val = reg	2070:6:74060:74070	2729535	1	True				
ANR	2729605	AssignmentExpression	* val = reg		2729535	0		=			
ANR	2729606	UnaryOperationExpression	* val		2729535	0					
ANR	2729607	UnaryOperator	*		2729535	0					
ANR	2729608	Identifier	val		2729535	1					
ANR	2729609	Identifier	reg		2729535	1					
ANR	2729610	ReturnStatement	return ( input ) ;	2071:6:74078:74092	2729535	2	True				
ANR	2729611	Identifier	input		2729535	0					
ANR	2729612	ReturnStatement	return ( NULL ) ;	2074:2:74103:74116	2729535	4	True				
ANR	2729613	Identifier	NULL		2729535	0					
ANR	2729614	ReturnType	char *		2729535	1					
ANR	2729615	Identifier	hexagon_parse_reg		2729535	2					
ANR	2729616	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2729535	3					
ANR	2729617	Parameter	const hexagon_operand * operand	2055:1:73609:73638	2729535	0	True				
ANR	2729618	ParameterType	const hexagon_operand *		2729535	0					
ANR	2729619	Identifier	operand		2729535	1					
ANR	2729620	Parameter	hexagon_insn * insn	2055:33:73641:73658	2729535	1	True				
ANR	2729621	ParameterType	hexagon_insn *		2729535	0					
ANR	2729622	Identifier	insn		2729535	1					
ANR	2729623	Parameter	const hexagon_opcode * opcode	2055:53:73661:73688	2729535	2	True				
ANR	2729624	ParameterType	const hexagon_opcode *		2729535	0					
ANR	2729625	Identifier	opcode		2729535	1					
ANR	2729626	Parameter	char * input	2056:1:73692:73702	2729535	3	True				
ANR	2729627	ParameterType	char *		2729535	0					
ANR	2729628	Identifier	input		2729535	1					
ANR	2729629	Parameter	long * val	2056:14:73705:73713	2729535	4	True				
ANR	2729630	ParameterType	long *		2729535	0					
ANR	2729631	Identifier	val		2729535	1					
ANR	2729632	Parameter	int * flag	2056:25:73716:73724	2729535	5	True				
ANR	2729633	ParameterType	int *		2729535	0					
ANR	2729634	Identifier	flag		2729535	1					
ANR	2729635	Parameter	char * * errmsg	2056:36:73727:73739	2729535	6	True				
ANR	2729636	ParameterType	char * *		2729535	0					
ANR	2729637	Identifier	errmsg		2729535	1					
ANR	2729638	CFGEntryNode	ENTRY		2729535		True				
ANR	2729639	CFGExitNode	EXIT		2729535		True				
ANR	2729640	Symbol	val		2729535						
ANR	2729641	Symbol	flag		2729535						
ANR	2729642	Symbol	NULL		2729535						
ANR	2729643	Symbol	errmsg		2729535						
ANR	2729644	Symbol	* val		2729535						
ANR	2729645	Symbol	opcode		2729535						
ANR	2729646	Symbol	HEXAGON_OPERAND_IS_REGISTER		2729535						
ANR	2729647	Symbol	insn		2729535						
ANR	2729648	Symbol	input		2729535						
ANR	2729649	Symbol	& input		2729535						
ANR	2729650	Symbol	hexagon_gp_regs		2729535						
ANR	2729651	Symbol	hexagon_encode_operand		2729535						
ANR	2729652	Symbol	reg		2729535						
ANR	2729653	Symbol	hexagon_reg_num		2729535						
ANR	2729654	Symbol	FALSE		2729535						
ANR	2729655	Symbol	hexagon_gp_regs_count		2729535						
ANR	2729656	Symbol	* flag		2729535						
ANR	2729657	Symbol	operand		2729535						
ANR	2729658	Function	hexagon_parse_reg16	2077:0:74121:74721							
ANR	2729659	FunctionDef	"hexagon_parse_reg16 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2729658	0					
ANR	2729660	CompoundStatement		2081:0:74282:74721	2729658	0					
ANR	2729661	IdentifierDeclStatement	int reg ;	2082:2:74286:74293	2729658	0	True				
ANR	2729662	IdentifierDecl	reg		2729658	0					
ANR	2729663	IdentifierDeclType	int		2729658	0					
ANR	2729664	Identifier	reg		2729658	1					
ANR	2729665	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2084:2:74298:74394	2729658	1	True				
ANR	2729666	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729658	0		=			
ANR	2729667	Identifier	reg		2729658	0					
ANR	2729668	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729658	1					
ANR	2729669	Callee	hexagon_reg_num		2729658	0					
ANR	2729670	Identifier	hexagon_reg_num		2729658	0					
ANR	2729671	ArgumentList	operand		2729658	1					
ANR	2729672	Argument	operand		2729658	0					
ANR	2729673	Identifier	operand		2729658	0					
ANR	2729674	Argument	& input		2729658	1					
ANR	2729675	UnaryOperationExpression	& input		2729658	0					
ANR	2729676	UnaryOperator	&		2729658	0					
ANR	2729677	Identifier	input		2729658	1					
ANR	2729678	Argument	'r'		2729658	2					
ANR	2729679	PrimaryExpression	'r'		2729658	0					
ANR	2729680	Argument	hexagon_gp_regs		2729658	3					
ANR	2729681	Identifier	hexagon_gp_regs		2729658	0					
ANR	2729682	Argument	hexagon_gp_regs_count		2729658	4					
ANR	2729683	Identifier	hexagon_gp_regs_count		2729658	0					
ANR	2729684	Argument	NULL		2729658	5					
ANR	2729685	Identifier	NULL		2729658	0					
ANR	2729686	Argument	'\\0'		2729658	6					
ANR	2729687	PrimaryExpression	'\\0'		2729658	0					
ANR	2729688	IfStatement	if ( reg < 0 )		2729658	2					
ANR	2729689	Condition	reg < 0	2085:6:74402:74408	2729658	0	True				
ANR	2729690	RelationalExpression	reg < 0		2729658	0		<			
ANR	2729691	Identifier	reg		2729658	0					
ANR	2729692	PrimaryExpression	0		2729658	1					
ANR	2729693	ReturnStatement	return ( NULL ) ;	2086:4:74415:74428	2729658	1	True				
ANR	2729694	Identifier	NULL		2729658	0					
ANR	2729695	IfStatement	if ( ( reg > 7 ) && ( reg < 16 || reg > 23 ) )		2729658	3					
ANR	2729696	Condition	( reg > 7 ) && ( reg < 16 || reg > 23 )	2088:6:74437:74471	2729658	0	True				
ANR	2729697	AndExpression	( reg > 7 ) && ( reg < 16 || reg > 23 )		2729658	0		&&			
ANR	2729698	RelationalExpression	reg > 7		2729658	0		>			
ANR	2729699	Identifier	reg		2729658	0					
ANR	2729700	PrimaryExpression	7		2729658	1					
ANR	2729701	OrExpression	reg < 16 || reg > 23		2729658	1		||			
ANR	2729702	RelationalExpression	reg < 16		2729658	0		<			
ANR	2729703	Identifier	reg		2729658	0					
ANR	2729704	PrimaryExpression	16		2729658	1					
ANR	2729705	RelationalExpression	reg > 23		2729658	1		>			
ANR	2729706	Identifier	reg		2729658	0					
ANR	2729707	PrimaryExpression	23		2729658	1					
ANR	2729708	ReturnStatement	return ( NULL ) ;	2089:4:74478:74491	2729658	1	True				
ANR	2729709	Identifier	NULL		2729658	0					
ANR	2729710	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2729658	4					
ANR	2729711	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2091:6:74500:74586	2729658	0	True				
ANR	2729712	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2729658	0					
ANR	2729713	Callee	hexagon_encode_operand		2729658	0					
ANR	2729714	Identifier	hexagon_encode_operand		2729658	0					
ANR	2729715	ArgumentList	operand		2729658	1					
ANR	2729716	Argument	operand		2729658	0					
ANR	2729717	Identifier	operand		2729658	0					
ANR	2729718	Argument	insn		2729658	1					
ANR	2729719	Identifier	insn		2729658	0					
ANR	2729720	Argument	opcode		2729658	2					
ANR	2729721	Identifier	opcode		2729658	0					
ANR	2729722	Argument	reg		2729658	3					
ANR	2729723	Identifier	reg		2729658	0					
ANR	2729724	Argument	NULL		2729658	4					
ANR	2729725	Identifier	NULL		2729658	0					
ANR	2729726	Argument	FALSE		2729658	5					
ANR	2729727	Identifier	FALSE		2729658	0					
ANR	2729728	Argument	FALSE		2729658	6					
ANR	2729729	Identifier	FALSE		2729658	0					
ANR	2729730	Argument	errmsg		2729658	7					
ANR	2729731	Identifier	errmsg		2729658	0					
ANR	2729732	CompoundStatement		13:4:310:310	2729658	1					
ANR	2729733	IfStatement	if ( flag )		2729658	0					
ANR	2729734	Condition	flag	2094:10:74605:74608	2729658	0	True				
ANR	2729735	Identifier	flag		2729658	0					
ANR	2729736	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2095:8:74619:74654	2729658	1	True				
ANR	2729737	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		2729658	0		=			
ANR	2729738	UnaryOperationExpression	* flag		2729658	0					
ANR	2729739	UnaryOperator	*		2729658	0					
ANR	2729740	Identifier	flag		2729658	1					
ANR	2729741	Identifier	HEXAGON_OPERAND_IS_REGISTER		2729658	1					
ANR	2729742	ExpressionStatement	* val = reg	2097:6:74663:74673	2729658	1	True				
ANR	2729743	AssignmentExpression	* val = reg		2729658	0		=			
ANR	2729744	UnaryOperationExpression	* val		2729658	0					
ANR	2729745	UnaryOperator	*		2729658	0					
ANR	2729746	Identifier	val		2729658	1					
ANR	2729747	Identifier	reg		2729658	1					
ANR	2729748	ReturnStatement	return ( input ) ;	2098:6:74681:74695	2729658	2	True				
ANR	2729749	Identifier	input		2729658	0					
ANR	2729750	ReturnStatement	return ( NULL ) ;	2101:2:74706:74719	2729658	5	True				
ANR	2729751	Identifier	NULL		2729658	0					
ANR	2729752	ReturnType	char *		2729658	1					
ANR	2729753	Identifier	hexagon_parse_reg16		2729658	2					
ANR	2729754	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2729658	3					
ANR	2729755	Parameter	const hexagon_operand * operand	2079:1:74149:74178	2729658	0	True				
ANR	2729756	ParameterType	const hexagon_operand *		2729658	0					
ANR	2729757	Identifier	operand		2729658	1					
ANR	2729758	Parameter	hexagon_insn * insn	2079:33:74181:74198	2729658	1	True				
ANR	2729759	ParameterType	hexagon_insn *		2729658	0					
ANR	2729760	Identifier	insn		2729658	1					
ANR	2729761	Parameter	const hexagon_opcode * opcode	2079:53:74201:74228	2729658	2	True				
ANR	2729762	ParameterType	const hexagon_opcode *		2729658	0					
ANR	2729763	Identifier	opcode		2729658	1					
ANR	2729764	Parameter	char * input	2080:1:74232:74242	2729658	3	True				
ANR	2729765	ParameterType	char *		2729658	0					
ANR	2729766	Identifier	input		2729658	1					
ANR	2729767	Parameter	long * val	2080:14:74245:74253	2729658	4	True				
ANR	2729768	ParameterType	long *		2729658	0					
ANR	2729769	Identifier	val		2729658	1					
ANR	2729770	Parameter	int * flag	2080:25:74256:74264	2729658	5	True				
ANR	2729771	ParameterType	int *		2729658	0					
ANR	2729772	Identifier	flag		2729658	1					
ANR	2729773	Parameter	char * * errmsg	2080:36:74267:74279	2729658	6	True				
ANR	2729774	ParameterType	char * *		2729658	0					
ANR	2729775	Identifier	errmsg		2729658	1					
ANR	2729776	CFGEntryNode	ENTRY		2729658		True				
ANR	2729777	CFGExitNode	EXIT		2729658		True				
ANR	2729778	Symbol	val		2729658						
ANR	2729779	Symbol	flag		2729658						
ANR	2729780	Symbol	NULL		2729658						
ANR	2729781	Symbol	errmsg		2729658						
ANR	2729782	Symbol	* val		2729658						
ANR	2729783	Symbol	opcode		2729658						
ANR	2729784	Symbol	HEXAGON_OPERAND_IS_REGISTER		2729658						
ANR	2729785	Symbol	insn		2729658						
ANR	2729786	Symbol	input		2729658						
ANR	2729787	Symbol	& input		2729658						
ANR	2729788	Symbol	hexagon_gp_regs		2729658						
ANR	2729789	Symbol	hexagon_encode_operand		2729658						
ANR	2729790	Symbol	reg		2729658						
ANR	2729791	Symbol	hexagon_reg_num		2729658						
ANR	2729792	Symbol	FALSE		2729658						
ANR	2729793	Symbol	hexagon_gp_regs_count		2729658						
ANR	2729794	Symbol	* flag		2729658						
ANR	2729795	Symbol	operand		2729658						
ANR	2729796	Function	hexagon_parse_reg8	2104:0:74724:75323							
ANR	2729797	FunctionDef	"hexagon_parse_reg8 (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2729796	0					
ANR	2729798	CompoundStatement		2108:0:74884:75323	2729796	0					
ANR	2729799	IdentifierDeclStatement	int reg ;	2109:2:74888:74895	2729796	0	True				
ANR	2729800	IdentifierDecl	reg		2729796	0					
ANR	2729801	IdentifierDeclType	int		2729796	0					
ANR	2729802	Identifier	reg		2729796	1					
ANR	2729803	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2111:2:74900:74996	2729796	1	True				
ANR	2729804	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729796	0		=			
ANR	2729805	Identifier	reg		2729796	0					
ANR	2729806	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729796	1					
ANR	2729807	Callee	hexagon_reg_num		2729796	0					
ANR	2729808	Identifier	hexagon_reg_num		2729796	0					
ANR	2729809	ArgumentList	operand		2729796	1					
ANR	2729810	Argument	operand		2729796	0					
ANR	2729811	Identifier	operand		2729796	0					
ANR	2729812	Argument	& input		2729796	1					
ANR	2729813	UnaryOperationExpression	& input		2729796	0					
ANR	2729814	UnaryOperator	&		2729796	0					
ANR	2729815	Identifier	input		2729796	1					
ANR	2729816	Argument	'r'		2729796	2					
ANR	2729817	PrimaryExpression	'r'		2729796	0					
ANR	2729818	Argument	hexagon_gp_regs		2729796	3					
ANR	2729819	Identifier	hexagon_gp_regs		2729796	0					
ANR	2729820	Argument	hexagon_gp_regs_count		2729796	4					
ANR	2729821	Identifier	hexagon_gp_regs_count		2729796	0					
ANR	2729822	Argument	NULL		2729796	5					
ANR	2729823	Identifier	NULL		2729796	0					
ANR	2729824	Argument	'\\0'		2729796	6					
ANR	2729825	PrimaryExpression	'\\0'		2729796	0					
ANR	2729826	IfStatement	if ( reg < 0 )		2729796	2					
ANR	2729827	Condition	reg < 0	2112:6:75004:75010	2729796	0	True				
ANR	2729828	RelationalExpression	reg < 0		2729796	0		<			
ANR	2729829	Identifier	reg		2729796	0					
ANR	2729830	PrimaryExpression	0		2729796	1					
ANR	2729831	ReturnStatement	return ( NULL ) ;	2113:4:75017:75030	2729796	1	True				
ANR	2729832	Identifier	NULL		2729796	0					
ANR	2729833	IfStatement	if ( ( reg > 3 ) && ( reg < 16 || reg > 19 ) )		2729796	3					
ANR	2729834	Condition	( reg > 3 ) && ( reg < 16 || reg > 19 )	2115:6:75039:75073	2729796	0	True				
ANR	2729835	AndExpression	( reg > 3 ) && ( reg < 16 || reg > 19 )		2729796	0		&&			
ANR	2729836	RelationalExpression	reg > 3		2729796	0		>			
ANR	2729837	Identifier	reg		2729796	0					
ANR	2729838	PrimaryExpression	3		2729796	1					
ANR	2729839	OrExpression	reg < 16 || reg > 19		2729796	1		||			
ANR	2729840	RelationalExpression	reg < 16		2729796	0		<			
ANR	2729841	Identifier	reg		2729796	0					
ANR	2729842	PrimaryExpression	16		2729796	1					
ANR	2729843	RelationalExpression	reg > 19		2729796	1		>			
ANR	2729844	Identifier	reg		2729796	0					
ANR	2729845	PrimaryExpression	19		2729796	1					
ANR	2729846	ReturnStatement	return ( NULL ) ;	2116:4:75080:75093	2729796	1	True				
ANR	2729847	Identifier	NULL		2729796	0					
ANR	2729848	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2729796	4					
ANR	2729849	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2118:6:75102:75188	2729796	0	True				
ANR	2729850	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2729796	0					
ANR	2729851	Callee	hexagon_encode_operand		2729796	0					
ANR	2729852	Identifier	hexagon_encode_operand		2729796	0					
ANR	2729853	ArgumentList	operand		2729796	1					
ANR	2729854	Argument	operand		2729796	0					
ANR	2729855	Identifier	operand		2729796	0					
ANR	2729856	Argument	insn		2729796	1					
ANR	2729857	Identifier	insn		2729796	0					
ANR	2729858	Argument	opcode		2729796	2					
ANR	2729859	Identifier	opcode		2729796	0					
ANR	2729860	Argument	reg		2729796	3					
ANR	2729861	Identifier	reg		2729796	0					
ANR	2729862	Argument	NULL		2729796	4					
ANR	2729863	Identifier	NULL		2729796	0					
ANR	2729864	Argument	FALSE		2729796	5					
ANR	2729865	Identifier	FALSE		2729796	0					
ANR	2729866	Argument	FALSE		2729796	6					
ANR	2729867	Identifier	FALSE		2729796	0					
ANR	2729868	Argument	errmsg		2729796	7					
ANR	2729869	Identifier	errmsg		2729796	0					
ANR	2729870	CompoundStatement		13:4:310:310	2729796	1					
ANR	2729871	IfStatement	if ( flag )		2729796	0					
ANR	2729872	Condition	flag	2121:10:75207:75210	2729796	0	True				
ANR	2729873	Identifier	flag		2729796	0					
ANR	2729874	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2122:8:75221:75256	2729796	1	True				
ANR	2729875	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		2729796	0		=			
ANR	2729876	UnaryOperationExpression	* flag		2729796	0					
ANR	2729877	UnaryOperator	*		2729796	0					
ANR	2729878	Identifier	flag		2729796	1					
ANR	2729879	Identifier	HEXAGON_OPERAND_IS_REGISTER		2729796	1					
ANR	2729880	ExpressionStatement	* val = reg	2124:6:75265:75275	2729796	1	True				
ANR	2729881	AssignmentExpression	* val = reg		2729796	0		=			
ANR	2729882	UnaryOperationExpression	* val		2729796	0					
ANR	2729883	UnaryOperator	*		2729796	0					
ANR	2729884	Identifier	val		2729796	1					
ANR	2729885	Identifier	reg		2729796	1					
ANR	2729886	ReturnStatement	return ( input ) ;	2125:6:75283:75297	2729796	2	True				
ANR	2729887	Identifier	input		2729796	0					
ANR	2729888	ReturnStatement	return ( NULL ) ;	2128:2:75308:75321	2729796	5	True				
ANR	2729889	Identifier	NULL		2729796	0					
ANR	2729890	ReturnType	char *		2729796	1					
ANR	2729891	Identifier	hexagon_parse_reg8		2729796	2					
ANR	2729892	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2729796	3					
ANR	2729893	Parameter	const hexagon_operand * operand	2106:1:74751:74780	2729796	0	True				
ANR	2729894	ParameterType	const hexagon_operand *		2729796	0					
ANR	2729895	Identifier	operand		2729796	1					
ANR	2729896	Parameter	hexagon_insn * insn	2106:33:74783:74800	2729796	1	True				
ANR	2729897	ParameterType	hexagon_insn *		2729796	0					
ANR	2729898	Identifier	insn		2729796	1					
ANR	2729899	Parameter	const hexagon_opcode * opcode	2106:53:74803:74830	2729796	2	True				
ANR	2729900	ParameterType	const hexagon_opcode *		2729796	0					
ANR	2729901	Identifier	opcode		2729796	1					
ANR	2729902	Parameter	char * input	2107:1:74834:74844	2729796	3	True				
ANR	2729903	ParameterType	char *		2729796	0					
ANR	2729904	Identifier	input		2729796	1					
ANR	2729905	Parameter	long * val	2107:14:74847:74855	2729796	4	True				
ANR	2729906	ParameterType	long *		2729796	0					
ANR	2729907	Identifier	val		2729796	1					
ANR	2729908	Parameter	int * flag	2107:25:74858:74866	2729796	5	True				
ANR	2729909	ParameterType	int *		2729796	0					
ANR	2729910	Identifier	flag		2729796	1					
ANR	2729911	Parameter	char * * errmsg	2107:36:74869:74881	2729796	6	True				
ANR	2729912	ParameterType	char * *		2729796	0					
ANR	2729913	Identifier	errmsg		2729796	1					
ANR	2729914	CFGEntryNode	ENTRY		2729796		True				
ANR	2729915	CFGExitNode	EXIT		2729796		True				
ANR	2729916	Symbol	val		2729796						
ANR	2729917	Symbol	flag		2729796						
ANR	2729918	Symbol	NULL		2729796						
ANR	2729919	Symbol	errmsg		2729796						
ANR	2729920	Symbol	* val		2729796						
ANR	2729921	Symbol	opcode		2729796						
ANR	2729922	Symbol	HEXAGON_OPERAND_IS_REGISTER		2729796						
ANR	2729923	Symbol	insn		2729796						
ANR	2729924	Symbol	input		2729796						
ANR	2729925	Symbol	& input		2729796						
ANR	2729926	Symbol	hexagon_gp_regs		2729796						
ANR	2729927	Symbol	hexagon_encode_operand		2729796						
ANR	2729928	Symbol	reg		2729796						
ANR	2729929	Symbol	hexagon_reg_num		2729796						
ANR	2729930	Symbol	FALSE		2729796						
ANR	2729931	Symbol	hexagon_gp_regs_count		2729796						
ANR	2729932	Symbol	* flag		2729796						
ANR	2729933	Symbol	operand		2729796						
ANR	2729934	Function	hexagon_parse_nreg	2131:0:75326:75874							
ANR	2729935	FunctionDef	"hexagon_parse_nreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2729934	0					
ANR	2729936	CompoundStatement		2135:0:75486:75874	2729934	0					
ANR	2729937	IdentifierDeclStatement	int reg ;	2136:2:75490:75497	2729934	0	True				
ANR	2729938	IdentifierDecl	reg		2729934	0					
ANR	2729939	IdentifierDeclType	int		2729934	0					
ANR	2729940	Identifier	reg		2729934	1					
ANR	2729941	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2138:2:75502:75598	2729934	1	True				
ANR	2729942	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729934	0		=			
ANR	2729943	Identifier	reg		2729934	0					
ANR	2729944	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2729934	1					
ANR	2729945	Callee	hexagon_reg_num		2729934	0					
ANR	2729946	Identifier	hexagon_reg_num		2729934	0					
ANR	2729947	ArgumentList	operand		2729934	1					
ANR	2729948	Argument	operand		2729934	0					
ANR	2729949	Identifier	operand		2729934	0					
ANR	2729950	Argument	& input		2729934	1					
ANR	2729951	UnaryOperationExpression	& input		2729934	0					
ANR	2729952	UnaryOperator	&		2729934	0					
ANR	2729953	Identifier	input		2729934	1					
ANR	2729954	Argument	'r'		2729934	2					
ANR	2729955	PrimaryExpression	'r'		2729934	0					
ANR	2729956	Argument	hexagon_gp_regs		2729934	3					
ANR	2729957	Identifier	hexagon_gp_regs		2729934	0					
ANR	2729958	Argument	hexagon_gp_regs_count		2729934	4					
ANR	2729959	Identifier	hexagon_gp_regs_count		2729934	0					
ANR	2729960	Argument	NULL		2729934	5					
ANR	2729961	Identifier	NULL		2729934	0					
ANR	2729962	Argument	'\\0'		2729934	6					
ANR	2729963	PrimaryExpression	'\\0'		2729934	0					
ANR	2729964	IfStatement	if ( reg < 0 || reg > 31 )		2729934	2					
ANR	2729965	Condition	reg < 0 || reg > 31	2139:6:75606:75624	2729934	0	True				
ANR	2729966	OrExpression	reg < 0 || reg > 31		2729934	0		||			
ANR	2729967	RelationalExpression	reg < 0		2729934	0		<			
ANR	2729968	Identifier	reg		2729934	0					
ANR	2729969	PrimaryExpression	0		2729934	1					
ANR	2729970	RelationalExpression	reg > 31		2729934	1		>			
ANR	2729971	Identifier	reg		2729934	0					
ANR	2729972	PrimaryExpression	31		2729934	1					
ANR	2729973	ReturnStatement	return ( NULL ) ;	2140:4:75631:75644	2729934	1	True				
ANR	2729974	Identifier	NULL		2729934	0					
ANR	2729975	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg ) )"		2729934	3					
ANR	2729976	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg )"	2142:6:75653:75743	2729934	0	True				
ANR	2729977	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg % 2 , NULL , FALSE , FALSE , errmsg )"		2729934	0					
ANR	2729978	Callee	hexagon_encode_operand		2729934	0					
ANR	2729979	Identifier	hexagon_encode_operand		2729934	0					
ANR	2729980	ArgumentList	operand		2729934	1					
ANR	2729981	Argument	operand		2729934	0					
ANR	2729982	Identifier	operand		2729934	0					
ANR	2729983	Argument	insn		2729934	1					
ANR	2729984	Identifier	insn		2729934	0					
ANR	2729985	Argument	opcode		2729934	2					
ANR	2729986	Identifier	opcode		2729934	0					
ANR	2729987	Argument	reg % 2		2729934	3					
ANR	2729988	MultiplicativeExpression	reg % 2		2729934	0		%			
ANR	2729989	Identifier	reg		2729934	0					
ANR	2729990	PrimaryExpression	2		2729934	1					
ANR	2729991	Argument	NULL		2729934	4					
ANR	2729992	Identifier	NULL		2729934	0					
ANR	2729993	Argument	FALSE		2729934	5					
ANR	2729994	Identifier	FALSE		2729934	0					
ANR	2729995	Argument	FALSE		2729934	6					
ANR	2729996	Identifier	FALSE		2729934	0					
ANR	2729997	Argument	errmsg		2729934	7					
ANR	2729998	Identifier	errmsg		2729934	0					
ANR	2729999	CompoundStatement		10:4:263:263	2729934	1					
ANR	2730000	IfStatement	if ( flag )		2729934	0					
ANR	2730001	Condition	flag	2145:10:75762:75765	2729934	0	True				
ANR	2730002	Identifier	flag		2729934	0					
ANR	2730003	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_RNEW	2146:8:75776:75807	2729934	1	True				
ANR	2730004	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_RNEW		2729934	0		=			
ANR	2730005	UnaryOperationExpression	* flag		2729934	0					
ANR	2730006	UnaryOperator	*		2729934	0					
ANR	2730007	Identifier	flag		2729934	1					
ANR	2730008	Identifier	HEXAGON_OPERAND_IS_RNEW		2729934	1					
ANR	2730009	ExpressionStatement	* val = reg	2148:6:75816:75826	2729934	1	True				
ANR	2730010	AssignmentExpression	* val = reg		2729934	0		=			
ANR	2730011	UnaryOperationExpression	* val		2729934	0					
ANR	2730012	UnaryOperator	*		2729934	0					
ANR	2730013	Identifier	val		2729934	1					
ANR	2730014	Identifier	reg		2729934	1					
ANR	2730015	ReturnStatement	return ( input ) ;	2149:6:75834:75848	2729934	2	True				
ANR	2730016	Identifier	input		2729934	0					
ANR	2730017	ReturnStatement	return ( NULL ) ;	2152:2:75859:75872	2729934	4	True				
ANR	2730018	Identifier	NULL		2729934	0					
ANR	2730019	ReturnType	char *		2729934	1					
ANR	2730020	Identifier	hexagon_parse_nreg		2729934	2					
ANR	2730021	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2729934	3					
ANR	2730022	Parameter	const hexagon_operand * operand	2133:1:75353:75382	2729934	0	True				
ANR	2730023	ParameterType	const hexagon_operand *		2729934	0					
ANR	2730024	Identifier	operand		2729934	1					
ANR	2730025	Parameter	hexagon_insn * insn	2133:33:75385:75402	2729934	1	True				
ANR	2730026	ParameterType	hexagon_insn *		2729934	0					
ANR	2730027	Identifier	insn		2729934	1					
ANR	2730028	Parameter	const hexagon_opcode * opcode	2133:53:75405:75432	2729934	2	True				
ANR	2730029	ParameterType	const hexagon_opcode *		2729934	0					
ANR	2730030	Identifier	opcode		2729934	1					
ANR	2730031	Parameter	char * input	2134:1:75436:75446	2729934	3	True				
ANR	2730032	ParameterType	char *		2729934	0					
ANR	2730033	Identifier	input		2729934	1					
ANR	2730034	Parameter	long * val	2134:14:75449:75457	2729934	4	True				
ANR	2730035	ParameterType	long *		2729934	0					
ANR	2730036	Identifier	val		2729934	1					
ANR	2730037	Parameter	int * flag	2134:25:75460:75468	2729934	5	True				
ANR	2730038	ParameterType	int *		2729934	0					
ANR	2730039	Identifier	flag		2729934	1					
ANR	2730040	Parameter	char * * errmsg	2134:36:75471:75483	2729934	6	True				
ANR	2730041	ParameterType	char * *		2729934	0					
ANR	2730042	Identifier	errmsg		2729934	1					
ANR	2730043	CFGEntryNode	ENTRY		2729934		True				
ANR	2730044	CFGExitNode	EXIT		2729934		True				
ANR	2730045	Symbol	val		2729934						
ANR	2730046	Symbol	flag		2729934						
ANR	2730047	Symbol	NULL		2729934						
ANR	2730048	Symbol	HEXAGON_OPERAND_IS_RNEW		2729934						
ANR	2730049	Symbol	errmsg		2729934						
ANR	2730050	Symbol	* val		2729934						
ANR	2730051	Symbol	opcode		2729934						
ANR	2730052	Symbol	insn		2729934						
ANR	2730053	Symbol	input		2729934						
ANR	2730054	Symbol	& input		2729934						
ANR	2730055	Symbol	hexagon_gp_regs		2729934						
ANR	2730056	Symbol	hexagon_encode_operand		2729934						
ANR	2730057	Symbol	reg		2729934						
ANR	2730058	Symbol	hexagon_reg_num		2729934						
ANR	2730059	Symbol	FALSE		2729934						
ANR	2730060	Symbol	hexagon_gp_regs_count		2729934						
ANR	2730061	Symbol	* flag		2729934						
ANR	2730062	Symbol	operand		2729934						
ANR	2730063	Function	hexagon_parse_splr	2155:0:75877:76573							
ANR	2730064	FunctionDef	"hexagon_parse_splr (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2730063	0					
ANR	2730065	CompoundStatement		2159:0:76037:76573	2730063	0					
ANR	2730066	IdentifierDeclStatement	int reg ;	2160:2:76041:76048	2730063	0	True				
ANR	2730067	IdentifierDecl	reg		2730063	0					
ANR	2730068	IdentifierDeclType	int		2730063	0					
ANR	2730069	Identifier	reg		2730063	1					
ANR	2730070	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2162:2:76053:76159	2730063	1	True				
ANR	2730071	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2730063	0		=			
ANR	2730072	Identifier	reg		2730063	0					
ANR	2730073	CallExpression	"hexagon_reg_num ( operand , & input , 'r' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2730063	1					
ANR	2730074	Callee	hexagon_reg_num		2730063	0					
ANR	2730075	Identifier	hexagon_reg_num		2730063	0					
ANR	2730076	ArgumentList	operand		2730063	1					
ANR	2730077	Argument	operand		2730063	0					
ANR	2730078	Identifier	operand		2730063	0					
ANR	2730079	Argument	& input		2730063	1					
ANR	2730080	UnaryOperationExpression	& input		2730063	0					
ANR	2730081	UnaryOperator	&		2730063	0					
ANR	2730082	Identifier	input		2730063	1					
ANR	2730083	Argument	'r'		2730063	2					
ANR	2730084	PrimaryExpression	'r'		2730063	0					
ANR	2730085	Argument	hexagon_gp_regs		2730063	3					
ANR	2730086	Identifier	hexagon_gp_regs		2730063	0					
ANR	2730087	Argument	hexagon_gp_regs_count		2730063	4					
ANR	2730088	Identifier	hexagon_gp_regs_count		2730063	0					
ANR	2730089	Argument	NULL		2730063	5					
ANR	2730090	Identifier	NULL		2730063	0					
ANR	2730091	Argument	'\\0'		2730063	6					
ANR	2730092	PrimaryExpression	'\\0'		2730063	0					
ANR	2730093	IfStatement	if ( reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 ) )		2730063	2					
ANR	2730094	Condition	reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )	2164:6:76167:76323	2730063	0	True				
ANR	2730095	OrExpression	reg < 0 || ( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )		2730063	0		||			
ANR	2730096	RelationalExpression	reg < 0		2730063	0		<			
ANR	2730097	Identifier	reg		2730063	0					
ANR	2730098	PrimaryExpression	0		2730063	1					
ANR	2730099	OrExpression	( operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29 ) || ( operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31 )		2730063	1		||			
ANR	2730100	AndExpression	operand -> fmt [ 0 ] == 'S' && operand -> fmt [ 1 ] == 'p' && reg != 29		2730063	0		&&			
ANR	2730101	EqualityExpression	operand -> fmt [ 0 ] == 'S'		2730063	0		==			
ANR	2730102	ArrayIndexing	operand -> fmt [ 0 ]		2730063	0					
ANR	2730103	PtrMemberAccess	operand -> fmt		2730063	0					
ANR	2730104	Identifier	operand		2730063	0					
ANR	2730105	Identifier	fmt		2730063	1					
ANR	2730106	PrimaryExpression	0		2730063	1					
ANR	2730107	PrimaryExpression	'S'		2730063	1					
ANR	2730108	AndExpression	operand -> fmt [ 1 ] == 'p' && reg != 29		2730063	1		&&			
ANR	2730109	EqualityExpression	operand -> fmt [ 1 ] == 'p'		2730063	0		==			
ANR	2730110	ArrayIndexing	operand -> fmt [ 1 ]		2730063	0					
ANR	2730111	PtrMemberAccess	operand -> fmt		2730063	0					
ANR	2730112	Identifier	operand		2730063	0					
ANR	2730113	Identifier	fmt		2730063	1					
ANR	2730114	PrimaryExpression	1		2730063	1					
ANR	2730115	PrimaryExpression	'p'		2730063	1					
ANR	2730116	EqualityExpression	reg != 29		2730063	1		!=			
ANR	2730117	Identifier	reg		2730063	0					
ANR	2730118	PrimaryExpression	29		2730063	1					
ANR	2730119	AndExpression	operand -> fmt [ 0 ] == 'L' && operand -> fmt [ 1 ] == 'r' && reg != 31		2730063	1		&&			
ANR	2730120	EqualityExpression	operand -> fmt [ 0 ] == 'L'		2730063	0		==			
ANR	2730121	ArrayIndexing	operand -> fmt [ 0 ]		2730063	0					
ANR	2730122	PtrMemberAccess	operand -> fmt		2730063	0					
ANR	2730123	Identifier	operand		2730063	0					
ANR	2730124	Identifier	fmt		2730063	1					
ANR	2730125	PrimaryExpression	0		2730063	1					
ANR	2730126	PrimaryExpression	'L'		2730063	1					
ANR	2730127	AndExpression	operand -> fmt [ 1 ] == 'r' && reg != 31		2730063	1		&&			
ANR	2730128	EqualityExpression	operand -> fmt [ 1 ] == 'r'		2730063	0		==			
ANR	2730129	ArrayIndexing	operand -> fmt [ 1 ]		2730063	0					
ANR	2730130	PtrMemberAccess	operand -> fmt		2730063	0					
ANR	2730131	Identifier	operand		2730063	0					
ANR	2730132	Identifier	fmt		2730063	1					
ANR	2730133	PrimaryExpression	1		2730063	1					
ANR	2730134	PrimaryExpression	'r'		2730063	1					
ANR	2730135	EqualityExpression	reg != 31		2730063	1		!=			
ANR	2730136	Identifier	reg		2730063	0					
ANR	2730137	PrimaryExpression	31		2730063	1					
ANR	2730138	ReturnStatement	return ( NULL ) ;	2167:4:76330:76343	2730063	1	True				
ANR	2730139	Identifier	NULL		2730063	0					
ANR	2730140	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2730063	3					
ANR	2730141	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2169:6:76352:76438	2730063	0	True				
ANR	2730142	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2730063	0					
ANR	2730143	Callee	hexagon_encode_operand		2730063	0					
ANR	2730144	Identifier	hexagon_encode_operand		2730063	0					
ANR	2730145	ArgumentList	operand		2730063	1					
ANR	2730146	Argument	operand		2730063	0					
ANR	2730147	Identifier	operand		2730063	0					
ANR	2730148	Argument	insn		2730063	1					
ANR	2730149	Identifier	insn		2730063	0					
ANR	2730150	Argument	opcode		2730063	2					
ANR	2730151	Identifier	opcode		2730063	0					
ANR	2730152	Argument	reg		2730063	3					
ANR	2730153	Identifier	reg		2730063	0					
ANR	2730154	Argument	NULL		2730063	4					
ANR	2730155	Identifier	NULL		2730063	0					
ANR	2730156	Argument	FALSE		2730063	5					
ANR	2730157	Identifier	FALSE		2730063	0					
ANR	2730158	Argument	FALSE		2730063	6					
ANR	2730159	Identifier	FALSE		2730063	0					
ANR	2730160	Argument	errmsg		2730063	7					
ANR	2730161	Identifier	errmsg		2730063	0					
ANR	2730162	CompoundStatement		13:4:407:407	2730063	1					
ANR	2730163	IfStatement	if ( flag )		2730063	0					
ANR	2730164	Condition	flag	2172:10:76457:76460	2730063	0	True				
ANR	2730165	Identifier	flag		2730063	0					
ANR	2730166	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_REGISTER	2173:8:76471:76506	2730063	1	True				
ANR	2730167	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_REGISTER		2730063	0		=			
ANR	2730168	UnaryOperationExpression	* flag		2730063	0					
ANR	2730169	UnaryOperator	*		2730063	0					
ANR	2730170	Identifier	flag		2730063	1					
ANR	2730171	Identifier	HEXAGON_OPERAND_IS_REGISTER		2730063	1					
ANR	2730172	ExpressionStatement	* val = reg	2175:6:76515:76525	2730063	1	True				
ANR	2730173	AssignmentExpression	* val = reg		2730063	0		=			
ANR	2730174	UnaryOperationExpression	* val		2730063	0					
ANR	2730175	UnaryOperator	*		2730063	0					
ANR	2730176	Identifier	val		2730063	1					
ANR	2730177	Identifier	reg		2730063	1					
ANR	2730178	ReturnStatement	return ( input ) ;	2176:6:76533:76547	2730063	2	True				
ANR	2730179	Identifier	input		2730063	0					
ANR	2730180	ReturnStatement	return ( NULL ) ;	2179:2:76558:76571	2730063	4	True				
ANR	2730181	Identifier	NULL		2730063	0					
ANR	2730182	ReturnType	char *		2730063	1					
ANR	2730183	Identifier	hexagon_parse_splr		2730063	2					
ANR	2730184	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2730063	3					
ANR	2730185	Parameter	const hexagon_operand * operand	2157:1:75904:75933	2730063	0	True				
ANR	2730186	ParameterType	const hexagon_operand *		2730063	0					
ANR	2730187	Identifier	operand		2730063	1					
ANR	2730188	Parameter	hexagon_insn * insn	2157:33:75936:75953	2730063	1	True				
ANR	2730189	ParameterType	hexagon_insn *		2730063	0					
ANR	2730190	Identifier	insn		2730063	1					
ANR	2730191	Parameter	const hexagon_opcode * opcode	2157:53:75956:75983	2730063	2	True				
ANR	2730192	ParameterType	const hexagon_opcode *		2730063	0					
ANR	2730193	Identifier	opcode		2730063	1					
ANR	2730194	Parameter	char * input	2158:1:75987:75997	2730063	3	True				
ANR	2730195	ParameterType	char *		2730063	0					
ANR	2730196	Identifier	input		2730063	1					
ANR	2730197	Parameter	long * val	2158:14:76000:76008	2730063	4	True				
ANR	2730198	ParameterType	long *		2730063	0					
ANR	2730199	Identifier	val		2730063	1					
ANR	2730200	Parameter	int * flag	2158:25:76011:76019	2730063	5	True				
ANR	2730201	ParameterType	int *		2730063	0					
ANR	2730202	Identifier	flag		2730063	1					
ANR	2730203	Parameter	char * * errmsg	2158:36:76022:76034	2730063	6	True				
ANR	2730204	ParameterType	char * *		2730063	0					
ANR	2730205	Identifier	errmsg		2730063	1					
ANR	2730206	CFGEntryNode	ENTRY		2730063		True				
ANR	2730207	CFGExitNode	EXIT		2730063		True				
ANR	2730208	Symbol	val		2730063						
ANR	2730209	Symbol	flag		2730063						
ANR	2730210	Symbol	NULL		2730063						
ANR	2730211	Symbol	* operand		2730063						
ANR	2730212	Symbol	* operand -> fmt		2730063						
ANR	2730213	Symbol	errmsg		2730063						
ANR	2730214	Symbol	* val		2730063						
ANR	2730215	Symbol	opcode		2730063						
ANR	2730216	Symbol	HEXAGON_OPERAND_IS_REGISTER		2730063						
ANR	2730217	Symbol	insn		2730063						
ANR	2730218	Symbol	input		2730063						
ANR	2730219	Symbol	operand -> fmt		2730063						
ANR	2730220	Symbol	& input		2730063						
ANR	2730221	Symbol	hexagon_gp_regs		2730063						
ANR	2730222	Symbol	hexagon_encode_operand		2730063						
ANR	2730223	Symbol	reg		2730063						
ANR	2730224	Symbol	hexagon_reg_num		2730063						
ANR	2730225	Symbol	* * operand		2730063						
ANR	2730226	Symbol	FALSE		2730063						
ANR	2730227	Symbol	hexagon_gp_regs_count		2730063						
ANR	2730228	Symbol	* flag		2730063						
ANR	2730229	Symbol	operand		2730063						
ANR	2730230	Function	hexagon_parse_preg	2182:0:76576:77113							
ANR	2730231	FunctionDef	"hexagon_parse_preg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2730230	0					
ANR	2730232	CompoundStatement		2186:0:76736:77113	2730230	0					
ANR	2730233	IdentifierDeclStatement	int reg ;	2187:2:76740:76747	2730230	0	True				
ANR	2730234	IdentifierDecl	reg		2730230	0					
ANR	2730235	IdentifierDeclType	int		2730230	0					
ANR	2730236	Identifier	reg		2730230	1					
ANR	2730237	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"	2189:2:76752:76848	2730230	1	True				
ANR	2730238	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2730230	0		=			
ANR	2730239	Identifier	reg		2730230	0					
ANR	2730240	CallExpression	"hexagon_reg_num ( operand , & input , 'p' , hexagon_gp_regs , hexagon_gp_regs_count , NULL , '\\0' )"		2730230	1					
ANR	2730241	Callee	hexagon_reg_num		2730230	0					
ANR	2730242	Identifier	hexagon_reg_num		2730230	0					
ANR	2730243	ArgumentList	operand		2730230	1					
ANR	2730244	Argument	operand		2730230	0					
ANR	2730245	Identifier	operand		2730230	0					
ANR	2730246	Argument	& input		2730230	1					
ANR	2730247	UnaryOperationExpression	& input		2730230	0					
ANR	2730248	UnaryOperator	&		2730230	0					
ANR	2730249	Identifier	input		2730230	1					
ANR	2730250	Argument	'p'		2730230	2					
ANR	2730251	PrimaryExpression	'p'		2730230	0					
ANR	2730252	Argument	hexagon_gp_regs		2730230	3					
ANR	2730253	Identifier	hexagon_gp_regs		2730230	0					
ANR	2730254	Argument	hexagon_gp_regs_count		2730230	4					
ANR	2730255	Identifier	hexagon_gp_regs_count		2730230	0					
ANR	2730256	Argument	NULL		2730230	5					
ANR	2730257	Identifier	NULL		2730230	0					
ANR	2730258	Argument	'\\0'		2730230	6					
ANR	2730259	PrimaryExpression	'\\0'		2730230	0					
ANR	2730260	IfStatement	if ( reg < 0 )		2730230	2					
ANR	2730261	Condition	reg < 0	2190:6:76856:76862	2730230	0	True				
ANR	2730262	RelationalExpression	reg < 0		2730230	0		<			
ANR	2730263	Identifier	reg		2730230	0					
ANR	2730264	PrimaryExpression	0		2730230	1					
ANR	2730265	ReturnStatement	return ( NULL ) ;	2191:4:76869:76882	2730230	1	True				
ANR	2730266	Identifier	NULL		2730230	0					
ANR	2730267	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2730230	3					
ANR	2730268	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2193:6:76891:76977	2730230	0	True				
ANR	2730269	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2730230	0					
ANR	2730270	Callee	hexagon_encode_operand		2730230	0					
ANR	2730271	Identifier	hexagon_encode_operand		2730230	0					
ANR	2730272	ArgumentList	operand		2730230	1					
ANR	2730273	Argument	operand		2730230	0					
ANR	2730274	Identifier	operand		2730230	0					
ANR	2730275	Argument	insn		2730230	1					
ANR	2730276	Identifier	insn		2730230	0					
ANR	2730277	Argument	opcode		2730230	2					
ANR	2730278	Identifier	opcode		2730230	0					
ANR	2730279	Argument	reg		2730230	3					
ANR	2730280	Identifier	reg		2730230	0					
ANR	2730281	Argument	NULL		2730230	4					
ANR	2730282	Identifier	NULL		2730230	0					
ANR	2730283	Argument	FALSE		2730230	5					
ANR	2730284	Identifier	FALSE		2730230	0					
ANR	2730285	Argument	FALSE		2730230	6					
ANR	2730286	Identifier	FALSE		2730230	0					
ANR	2730287	Argument	errmsg		2730230	7					
ANR	2730288	Identifier	errmsg		2730230	0					
ANR	2730289	CompoundStatement		10:4:247:247	2730230	1					
ANR	2730290	IfStatement	if ( flag )		2730230	0					
ANR	2730291	Condition	flag	2196:10:76996:76999	2730230	0	True				
ANR	2730292	Identifier	flag		2730230	0					
ANR	2730293	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_PREDICATE	2197:8:77010:77046	2730230	1	True				
ANR	2730294	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_PREDICATE		2730230	0		=			
ANR	2730295	UnaryOperationExpression	* flag		2730230	0					
ANR	2730296	UnaryOperator	*		2730230	0					
ANR	2730297	Identifier	flag		2730230	1					
ANR	2730298	Identifier	HEXAGON_OPERAND_IS_PREDICATE		2730230	1					
ANR	2730299	ExpressionStatement	* val = reg	2199:6:77055:77065	2730230	1	True				
ANR	2730300	AssignmentExpression	* val = reg		2730230	0		=			
ANR	2730301	UnaryOperationExpression	* val		2730230	0					
ANR	2730302	UnaryOperator	*		2730230	0					
ANR	2730303	Identifier	val		2730230	1					
ANR	2730304	Identifier	reg		2730230	1					
ANR	2730305	ReturnStatement	return ( input ) ;	2200:6:77073:77087	2730230	2	True				
ANR	2730306	Identifier	input		2730230	0					
ANR	2730307	ReturnStatement	return ( NULL ) ;	2203:2:77098:77111	2730230	4	True				
ANR	2730308	Identifier	NULL		2730230	0					
ANR	2730309	ReturnType	char *		2730230	1					
ANR	2730310	Identifier	hexagon_parse_preg		2730230	2					
ANR	2730311	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2730230	3					
ANR	2730312	Parameter	const hexagon_operand * operand	2184:1:76603:76632	2730230	0	True				
ANR	2730313	ParameterType	const hexagon_operand *		2730230	0					
ANR	2730314	Identifier	operand		2730230	1					
ANR	2730315	Parameter	hexagon_insn * insn	2184:33:76635:76652	2730230	1	True				
ANR	2730316	ParameterType	hexagon_insn *		2730230	0					
ANR	2730317	Identifier	insn		2730230	1					
ANR	2730318	Parameter	const hexagon_opcode * opcode	2184:53:76655:76682	2730230	2	True				
ANR	2730319	ParameterType	const hexagon_opcode *		2730230	0					
ANR	2730320	Identifier	opcode		2730230	1					
ANR	2730321	Parameter	char * input	2185:1:76686:76696	2730230	3	True				
ANR	2730322	ParameterType	char *		2730230	0					
ANR	2730323	Identifier	input		2730230	1					
ANR	2730324	Parameter	long * val	2185:14:76699:76707	2730230	4	True				
ANR	2730325	ParameterType	long *		2730230	0					
ANR	2730326	Identifier	val		2730230	1					
ANR	2730327	Parameter	int * flag	2185:25:76710:76718	2730230	5	True				
ANR	2730328	ParameterType	int *		2730230	0					
ANR	2730329	Identifier	flag		2730230	1					
ANR	2730330	Parameter	char * * errmsg	2185:36:76721:76733	2730230	6	True				
ANR	2730331	ParameterType	char * *		2730230	0					
ANR	2730332	Identifier	errmsg		2730230	1					
ANR	2730333	CFGEntryNode	ENTRY		2730230		True				
ANR	2730334	CFGExitNode	EXIT		2730230		True				
ANR	2730335	Symbol	val		2730230						
ANR	2730336	Symbol	flag		2730230						
ANR	2730337	Symbol	NULL		2730230						
ANR	2730338	Symbol	HEXAGON_OPERAND_IS_PREDICATE		2730230						
ANR	2730339	Symbol	errmsg		2730230						
ANR	2730340	Symbol	* val		2730230						
ANR	2730341	Symbol	opcode		2730230						
ANR	2730342	Symbol	insn		2730230						
ANR	2730343	Symbol	input		2730230						
ANR	2730344	Symbol	& input		2730230						
ANR	2730345	Symbol	hexagon_gp_regs		2730230						
ANR	2730346	Symbol	hexagon_encode_operand		2730230						
ANR	2730347	Symbol	reg		2730230						
ANR	2730348	Symbol	hexagon_reg_num		2730230						
ANR	2730349	Symbol	FALSE		2730230						
ANR	2730350	Symbol	hexagon_gp_regs_count		2730230						
ANR	2730351	Symbol	* flag		2730230						
ANR	2730352	Symbol	operand		2730230						
ANR	2730353	Function	hexagon_parse_mreg	2206:0:77116:77621							
ANR	2730354	FunctionDef	"hexagon_parse_mreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2730353	0					
ANR	2730355	CompoundStatement		2210:0:77276:77621	2730353	0					
ANR	2730356	IdentifierDeclStatement	int reg ;	2211:2:77280:77287	2730353	0	True				
ANR	2730357	IdentifierDecl	reg		2730353	0					
ANR	2730358	IdentifierDeclType	int		2730353	0					
ANR	2730359	Identifier	reg		2730353	1					
ANR	2730360	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"	2213:2:77292:77357	2730353	1	True				
ANR	2730361	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"		2730353	0		=			
ANR	2730362	Identifier	reg		2730353	0					
ANR	2730363	CallExpression	"hexagon_reg_num ( operand , & input , 'm' , NULL , 0 , NULL , '\\0' )"		2730353	1					
ANR	2730364	Callee	hexagon_reg_num		2730353	0					
ANR	2730365	Identifier	hexagon_reg_num		2730353	0					
ANR	2730366	ArgumentList	operand		2730353	1					
ANR	2730367	Argument	operand		2730353	0					
ANR	2730368	Identifier	operand		2730353	0					
ANR	2730369	Argument	& input		2730353	1					
ANR	2730370	UnaryOperationExpression	& input		2730353	0					
ANR	2730371	UnaryOperator	&		2730353	0					
ANR	2730372	Identifier	input		2730353	1					
ANR	2730373	Argument	'm'		2730353	2					
ANR	2730374	PrimaryExpression	'm'		2730353	0					
ANR	2730375	Argument	NULL		2730353	3					
ANR	2730376	Identifier	NULL		2730353	0					
ANR	2730377	Argument	0		2730353	4					
ANR	2730378	PrimaryExpression	0		2730353	0					
ANR	2730379	Argument	NULL		2730353	5					
ANR	2730380	Identifier	NULL		2730353	0					
ANR	2730381	Argument	'\\0'		2730353	6					
ANR	2730382	PrimaryExpression	'\\0'		2730353	0					
ANR	2730383	IfStatement	if ( reg < 0 )		2730353	2					
ANR	2730384	Condition	reg < 0	2214:6:77365:77371	2730353	0	True				
ANR	2730385	RelationalExpression	reg < 0		2730353	0		<			
ANR	2730386	Identifier	reg		2730353	0					
ANR	2730387	PrimaryExpression	0		2730353	1					
ANR	2730388	ReturnStatement	return ( NULL ) ;	2215:4:77378:77391	2730353	1	True				
ANR	2730389	Identifier	NULL		2730353	0					
ANR	2730390	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2730353	3					
ANR	2730391	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2217:6:77400:77486	2730353	0	True				
ANR	2730392	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2730353	0					
ANR	2730393	Callee	hexagon_encode_operand		2730353	0					
ANR	2730394	Identifier	hexagon_encode_operand		2730353	0					
ANR	2730395	ArgumentList	operand		2730353	1					
ANR	2730396	Argument	operand		2730353	0					
ANR	2730397	Identifier	operand		2730353	0					
ANR	2730398	Argument	insn		2730353	1					
ANR	2730399	Identifier	insn		2730353	0					
ANR	2730400	Argument	opcode		2730353	2					
ANR	2730401	Identifier	opcode		2730353	0					
ANR	2730402	Argument	reg		2730353	3					
ANR	2730403	Identifier	reg		2730353	0					
ANR	2730404	Argument	NULL		2730353	4					
ANR	2730405	Identifier	NULL		2730353	0					
ANR	2730406	Argument	FALSE		2730353	5					
ANR	2730407	Identifier	FALSE		2730353	0					
ANR	2730408	Argument	FALSE		2730353	6					
ANR	2730409	Identifier	FALSE		2730353	0					
ANR	2730410	Argument	errmsg		2730353	7					
ANR	2730411	Identifier	errmsg		2730353	0					
ANR	2730412	CompoundStatement		10:4:216:216	2730353	1					
ANR	2730413	IfStatement	if ( flag )		2730353	0					
ANR	2730414	Condition	flag	2220:10:77505:77508	2730353	0	True				
ANR	2730415	Identifier	flag		2730353	0					
ANR	2730416	ExpressionStatement	* flag = HEXAGON_OPERAND_IS_MODIFIER	2221:8:77519:77554	2730353	1	True				
ANR	2730417	AssignmentExpression	* flag = HEXAGON_OPERAND_IS_MODIFIER		2730353	0		=			
ANR	2730418	UnaryOperationExpression	* flag		2730353	0					
ANR	2730419	UnaryOperator	*		2730353	0					
ANR	2730420	Identifier	flag		2730353	1					
ANR	2730421	Identifier	HEXAGON_OPERAND_IS_MODIFIER		2730353	1					
ANR	2730422	ExpressionStatement	* val = reg	2223:6:77563:77573	2730353	1	True				
ANR	2730423	AssignmentExpression	* val = reg		2730353	0		=			
ANR	2730424	UnaryOperationExpression	* val		2730353	0					
ANR	2730425	UnaryOperator	*		2730353	0					
ANR	2730426	Identifier	val		2730353	1					
ANR	2730427	Identifier	reg		2730353	1					
ANR	2730428	ReturnStatement	return ( input ) ;	2224:6:77581:77595	2730353	2	True				
ANR	2730429	Identifier	input		2730353	0					
ANR	2730430	ReturnStatement	return ( NULL ) ;	2227:2:77606:77619	2730353	4	True				
ANR	2730431	Identifier	NULL		2730353	0					
ANR	2730432	ReturnType	char *		2730353	1					
ANR	2730433	Identifier	hexagon_parse_mreg		2730353	2					
ANR	2730434	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2730353	3					
ANR	2730435	Parameter	const hexagon_operand * operand	2208:1:77143:77172	2730353	0	True				
ANR	2730436	ParameterType	const hexagon_operand *		2730353	0					
ANR	2730437	Identifier	operand		2730353	1					
ANR	2730438	Parameter	hexagon_insn * insn	2208:33:77175:77192	2730353	1	True				
ANR	2730439	ParameterType	hexagon_insn *		2730353	0					
ANR	2730440	Identifier	insn		2730353	1					
ANR	2730441	Parameter	const hexagon_opcode * opcode	2208:53:77195:77222	2730353	2	True				
ANR	2730442	ParameterType	const hexagon_opcode *		2730353	0					
ANR	2730443	Identifier	opcode		2730353	1					
ANR	2730444	Parameter	char * input	2209:1:77226:77236	2730353	3	True				
ANR	2730445	ParameterType	char *		2730353	0					
ANR	2730446	Identifier	input		2730353	1					
ANR	2730447	Parameter	long * val	2209:14:77239:77247	2730353	4	True				
ANR	2730448	ParameterType	long *		2730353	0					
ANR	2730449	Identifier	val		2730353	1					
ANR	2730450	Parameter	int * flag	2209:25:77250:77258	2730353	5	True				
ANR	2730451	ParameterType	int *		2730353	0					
ANR	2730452	Identifier	flag		2730353	1					
ANR	2730453	Parameter	char * * errmsg	2209:36:77261:77273	2730353	6	True				
ANR	2730454	ParameterType	char * *		2730353	0					
ANR	2730455	Identifier	errmsg		2730353	1					
ANR	2730456	CFGEntryNode	ENTRY		2730353		True				
ANR	2730457	CFGExitNode	EXIT		2730353		True				
ANR	2730458	Symbol	val		2730353						
ANR	2730459	Symbol	flag		2730353						
ANR	2730460	Symbol	NULL		2730353						
ANR	2730461	Symbol	errmsg		2730353						
ANR	2730462	Symbol	* val		2730353						
ANR	2730463	Symbol	opcode		2730353						
ANR	2730464	Symbol	insn		2730353						
ANR	2730465	Symbol	input		2730353						
ANR	2730466	Symbol	& input		2730353						
ANR	2730467	Symbol	hexagon_encode_operand		2730353						
ANR	2730468	Symbol	reg		2730353						
ANR	2730469	Symbol	hexagon_reg_num		2730353						
ANR	2730470	Symbol	HEXAGON_OPERAND_IS_MODIFIER		2730353						
ANR	2730471	Symbol	FALSE		2730353						
ANR	2730472	Symbol	* flag		2730353						
ANR	2730473	Symbol	operand		2730353						
ANR	2730474	Function	hexagon_parse_creg	2230:0:77624:78679							
ANR	2730475	FunctionDef	"hexagon_parse_creg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2730474	0					
ANR	2730476	CompoundStatement		2234:0:77791:78679	2730474	0					
ANR	2730477	IdentifierDeclStatement	size_t regn ;	2235:2:77795:77806	2730474	0	True				
ANR	2730478	IdentifierDecl	regn		2730474	0					
ANR	2730479	IdentifierDeclType	size_t		2730474	0					
ANR	2730480	Identifier	regn		2730474	1					
ANR	2730481	IdentifierDeclStatement	int reg ;	2236:2:77810:77817	2730474	1	True				
ANR	2730482	IdentifierDecl	reg		2730474	0					
ANR	2730483	IdentifierDeclType	int		2730474	0					
ANR	2730484	Identifier	reg		2730474	1					
ANR	2730485	Statement	static	2237:2:77821:77826	2730474	2	True				
ANR	2730486	IdentifierDeclStatement	char buf [ 150 ] ;	2237:9:77828:77842	2730474	3	True				
ANR	2730487	IdentifierDecl	buf [ 150 ]		2730474	0					
ANR	2730488	IdentifierDeclType	char [ 150 ]		2730474	0					
ANR	2730489	Identifier	buf		2730474	1					
ANR	2730490	PrimaryExpression	150		2730474	2					
ANR	2730491	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"	2239:2:77847:77955	2730474	4	True				
ANR	2730492	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"		2730474	0		=			
ANR	2730493	Identifier	reg		2730474	0					
ANR	2730494	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & regn , '\\0' )"		2730474	1					
ANR	2730495	Callee	hexagon_reg_num		2730474	0					
ANR	2730496	Identifier	hexagon_reg_num		2730474	0					
ANR	2730497	ArgumentList	operand		2730474	1					
ANR	2730498	Argument	operand		2730474	0					
ANR	2730499	Identifier	operand		2730474	0					
ANR	2730500	Argument	& input		2730474	1					
ANR	2730501	UnaryOperationExpression	& input		2730474	0					
ANR	2730502	UnaryOperator	&		2730474	0					
ANR	2730503	Identifier	input		2730474	1					
ANR	2730504	Argument	'\\0'		2730474	2					
ANR	2730505	PrimaryExpression	'\\0'		2730474	0					
ANR	2730506	Argument	hexagon_control_regs		2730474	3					
ANR	2730507	Identifier	hexagon_control_regs		2730474	0					
ANR	2730508	Argument	hexagon_control_regs_count		2730474	4					
ANR	2730509	Identifier	hexagon_control_regs_count		2730474	0					
ANR	2730510	Argument	& regn		2730474	5					
ANR	2730511	UnaryOperationExpression	& regn		2730474	0					
ANR	2730512	UnaryOperator	&		2730474	0					
ANR	2730513	Identifier	regn		2730474	1					
ANR	2730514	Argument	'\\0'		2730474	6					
ANR	2730515	PrimaryExpression	'\\0'		2730474	0					
ANR	2730516	IfStatement	if ( reg < 0 )		2730474	5					
ANR	2730517	Condition	reg < 0	2240:6:77963:77969	2730474	0	True				
ANR	2730518	RelationalExpression	reg < 0		2730474	0		<			
ANR	2730519	Identifier	reg		2730474	0					
ANR	2730520	PrimaryExpression	0		2730474	1					
ANR	2730521	ReturnStatement	return ( NULL ) ;	2241:4:77976:77989	2730474	1	True				
ANR	2730522	Identifier	NULL		2730474	0					
ANR	2730523	IfStatement	if ( flag )		2730474	6					
ANR	2730524	Condition	flag	2243:6:77998:78001	2730474	0	True				
ANR	2730525	Identifier	flag		2730474	0					
ANR	2730526	ExpressionStatement	* flag = 0	2244:4:78008:78017	2730474	1	True				
ANR	2730527	AssignmentExpression	* flag = 0		2730474	0		=			
ANR	2730528	UnaryOperationExpression	* flag		2730474	0					
ANR	2730529	UnaryOperator	*		2730474	0					
ANR	2730530	Identifier	flag		2730474	1					
ANR	2730531	PrimaryExpression	0		2730474	1					
ANR	2730532	IfStatement	if ( ! hexagon_verify_hw )		2730474	7					
ANR	2730533	Condition	! hexagon_verify_hw	2246:6:78026:78043	2730474	0	True				
ANR	2730534	UnaryOperationExpression	! hexagon_verify_hw		2730474	0					
ANR	2730535	UnaryOperator	!		2730474	0					
ANR	2730536	Identifier	hexagon_verify_hw		2730474	1					
ANR	2730537	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		2730474	1					
ANR	2730538	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2247:8:78054:78169	2730474	0	True				
ANR	2730539	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		2730474	0		&&			
ANR	2730540	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2730474	0		&			
ANR	2730541	PtrMemberAccess	operand -> flags		2730474	0					
ANR	2730542	Identifier	operand		2730474	0					
ANR	2730543	Identifier	flags		2730474	1					
ANR	2730544	Identifier	HEXAGON_OPERAND_IS_WRITE		2730474	1					
ANR	2730545	BitAndExpression	hexagon_control_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		2730474	1		&			
ANR	2730546	MemberAccess	hexagon_control_regs [ regn ] . flags		2730474	0					
ANR	2730547	ArrayIndexing	hexagon_control_regs [ regn ]		2730474	0					
ANR	2730548	Identifier	hexagon_control_regs		2730474	0					
ANR	2730549	Identifier	regn		2730474	1					
ANR	2730550	Identifier	flags		2730474	1					
ANR	2730551	Identifier	HEXAGON_REG_IS_READONLY		2730474	1					
ANR	2730552	CompoundStatement		16:6:386:386	2730474	1					
ANR	2730553	IfStatement	if ( errmsg )		2730474	0					
ANR	2730554	Condition	errmsg	2250:12:78192:78197	2730474	0	True				
ANR	2730555	Identifier	errmsg		2730474	0					
ANR	2730556	CompoundStatement		18:10:418:418	2730474	1					
ANR	2730557	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_control_regs [ regn ] . name )"	2252:12:78224:78337	2730474	0	True				
ANR	2730558	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_control_regs [ regn ] . name )"		2730474	0					
ANR	2730559	Callee	sprintf		2730474	0					
ANR	2730560	Identifier	sprintf		2730474	0					
ANR	2730561	ArgumentList	buf		2730474	1					
ANR	2730562	Argument	buf		2730474	0					
ANR	2730563	Identifier	buf		2730474	0					
ANR	2730564	Argument	"""cannot write to read-only register `%s'."""		2730474	1					
ANR	2730565	PrimaryExpression	"""cannot write to read-only register `%s'."""		2730474	0					
ANR	2730566	Argument	hexagon_control_regs [ regn ] . name		2730474	2					
ANR	2730567	MemberAccess	hexagon_control_regs [ regn ] . name		2730474	0					
ANR	2730568	ArrayIndexing	hexagon_control_regs [ regn ]		2730474	0					
ANR	2730569	Identifier	hexagon_control_regs		2730474	0					
ANR	2730570	Identifier	regn		2730474	1					
ANR	2730571	Identifier	name		2730474	1					
ANR	2730572	ExpressionStatement	* errmsg = buf	2254:12:78351:78364	2730474	1	True				
ANR	2730573	AssignmentExpression	* errmsg = buf		2730474	0		=			
ANR	2730574	UnaryOperationExpression	* errmsg		2730474	0					
ANR	2730575	UnaryOperator	*		2730474	0					
ANR	2730576	Identifier	errmsg		2730474	1					
ANR	2730577	Identifier	buf		2730474	1					
ANR	2730578	IfStatement	if ( flag )		2730474	1					
ANR	2730579	Condition	flag	2256:12:78390:78393	2730474	0	True				
ANR	2730580	Identifier	flag		2730474	0					
ANR	2730581	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2257:10:78406:78441	2730474	1	True				
ANR	2730582	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2730474	0		|=			
ANR	2730583	UnaryOperationExpression	* flag		2730474	0					
ANR	2730584	UnaryOperator	*		2730474	0					
ANR	2730585	Identifier	flag		2730474	1					
ANR	2730586	Identifier	HEXAGON_OPERAND_IS_INVALID		2730474	1					
ANR	2730587	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2730474	8					
ANR	2730588	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2260:6:78458:78544	2730474	0	True				
ANR	2730589	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2730474	0					
ANR	2730590	Callee	hexagon_encode_operand		2730474	0					
ANR	2730591	Identifier	hexagon_encode_operand		2730474	0					
ANR	2730592	ArgumentList	operand		2730474	1					
ANR	2730593	Argument	operand		2730474	0					
ANR	2730594	Identifier	operand		2730474	0					
ANR	2730595	Argument	insn		2730474	1					
ANR	2730596	Identifier	insn		2730474	0					
ANR	2730597	Argument	opcode		2730474	2					
ANR	2730598	Identifier	opcode		2730474	0					
ANR	2730599	Argument	reg		2730474	3					
ANR	2730600	Identifier	reg		2730474	0					
ANR	2730601	Argument	NULL		2730474	4					
ANR	2730602	Identifier	NULL		2730474	0					
ANR	2730603	Argument	FALSE		2730474	5					
ANR	2730604	Identifier	FALSE		2730474	0					
ANR	2730605	Argument	FALSE		2730474	6					
ANR	2730606	Identifier	FALSE		2730474	0					
ANR	2730607	Argument	errmsg		2730474	7					
ANR	2730608	Identifier	errmsg		2730474	0					
ANR	2730609	CompoundStatement		29:4:759:759	2730474	1					
ANR	2730610	IfStatement	if ( flag )		2730474	0					
ANR	2730611	Condition	flag	2263:10:78563:78566	2730474	0	True				
ANR	2730612	Identifier	flag		2730474	0					
ANR	2730613	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_CONTROL	2264:8:78577:78612	2730474	1	True				
ANR	2730614	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_CONTROL		2730474	0		|=			
ANR	2730615	UnaryOperationExpression	* flag		2730474	0					
ANR	2730616	UnaryOperator	*		2730474	0					
ANR	2730617	Identifier	flag		2730474	1					
ANR	2730618	Identifier	HEXAGON_OPERAND_IS_CONTROL		2730474	1					
ANR	2730619	ExpressionStatement	* val = reg	2266:6:78621:78631	2730474	1	True				
ANR	2730620	AssignmentExpression	* val = reg		2730474	0		=			
ANR	2730621	UnaryOperationExpression	* val		2730474	0					
ANR	2730622	UnaryOperator	*		2730474	0					
ANR	2730623	Identifier	val		2730474	1					
ANR	2730624	Identifier	reg		2730474	1					
ANR	2730625	ReturnStatement	return ( input ) ;	2267:6:78639:78653	2730474	2	True				
ANR	2730626	Identifier	input		2730474	0					
ANR	2730627	ReturnStatement	return ( NULL ) ;	2270:2:78664:78677	2730474	9	True				
ANR	2730628	Identifier	NULL		2730474	0					
ANR	2730629	ReturnType	static char *		2730474	1					
ANR	2730630	Identifier	hexagon_parse_creg		2730474	2					
ANR	2730631	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2730474	3					
ANR	2730632	Parameter	const hexagon_operand * operand	2232:1:77658:77687	2730474	0	True				
ANR	2730633	ParameterType	const hexagon_operand *		2730474	0					
ANR	2730634	Identifier	operand		2730474	1					
ANR	2730635	Parameter	hexagon_insn * insn	2232:33:77690:77707	2730474	1	True				
ANR	2730636	ParameterType	hexagon_insn *		2730474	0					
ANR	2730637	Identifier	insn		2730474	1					
ANR	2730638	Parameter	const hexagon_opcode * opcode	2232:53:77710:77737	2730474	2	True				
ANR	2730639	ParameterType	const hexagon_opcode *		2730474	0					
ANR	2730640	Identifier	opcode		2730474	1					
ANR	2730641	Parameter	char * input	2233:1:77741:77751	2730474	3	True				
ANR	2730642	ParameterType	char *		2730474	0					
ANR	2730643	Identifier	input		2730474	1					
ANR	2730644	Parameter	long * val	2233:14:77754:77762	2730474	4	True				
ANR	2730645	ParameterType	long *		2730474	0					
ANR	2730646	Identifier	val		2730474	1					
ANR	2730647	Parameter	int * flag	2233:25:77765:77773	2730474	5	True				
ANR	2730648	ParameterType	int *		2730474	0					
ANR	2730649	Identifier	flag		2730474	1					
ANR	2730650	Parameter	char * * errmsg	2233:36:77776:77788	2730474	6	True				
ANR	2730651	ParameterType	char * *		2730474	0					
ANR	2730652	Identifier	errmsg		2730474	1					
ANR	2730653	CFGEntryNode	ENTRY		2730474		True				
ANR	2730654	CFGExitNode	EXIT		2730474		True				
ANR	2730655	Symbol	flag		2730474						
ANR	2730656	Symbol	& regn		2730474						
ANR	2730657	Symbol	* operand		2730474						
ANR	2730658	Symbol	* val		2730474						
ANR	2730659	Symbol	opcode		2730474						
ANR	2730660	Symbol	& input		2730474						
ANR	2730661	Symbol	HEXAGON_OPERAND_IS_INVALID		2730474						
ANR	2730662	Symbol	reg		2730474						
ANR	2730663	Symbol	hexagon_reg_num		2730474						
ANR	2730664	Symbol	hexagon_verify_hw		2730474						
ANR	2730665	Symbol	HEXAGON_OPERAND_IS_CONTROL		2730474						
ANR	2730666	Symbol	hexagon_control_regs_count		2730474						
ANR	2730667	Symbol	val		2730474						
ANR	2730668	Symbol	NULL		2730474						
ANR	2730669	Symbol	HEXAGON_REG_IS_READONLY		2730474						
ANR	2730670	Symbol	HEXAGON_OPERAND_IS_WRITE		2730474						
ANR	2730671	Symbol	operand -> flags		2730474						
ANR	2730672	Symbol	errmsg		2730474						
ANR	2730673	Symbol	regn		2730474						
ANR	2730674	Symbol	insn		2730474						
ANR	2730675	Symbol	input		2730474						
ANR	2730676	Symbol	* hexagon_control_regs		2730474						
ANR	2730677	Symbol	buf		2730474						
ANR	2730678	Symbol	* regn		2730474						
ANR	2730679	Symbol	hexagon_encode_operand		2730474						
ANR	2730680	Symbol	hexagon_control_regs [ regn ] . flags		2730474						
ANR	2730681	Symbol	hexagon_control_regs		2730474						
ANR	2730682	Symbol	FALSE		2730474						
ANR	2730683	Symbol	* flag		2730474						
ANR	2730684	Symbol	* errmsg		2730474						
ANR	2730685	Symbol	operand		2730474						
ANR	2730686	Symbol	hexagon_control_regs [ regn ] . name		2730474						
ANR	2730687	Function	hexagon_parse_dcreg	2273:0:78682:80807							
ANR	2730688	FunctionDef	"hexagon_parse_dcreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2730687	0					
ANR	2730689	CompoundStatement		2277:0:78850:80807	2730687	0					
ANR	2730690	Statement	static	2278:2:78854:78859	2730687	0	True				
ANR	2730691	IdentifierDeclStatement	char buf [ 100 ] ;	2278:9:78861:78875	2730687	1	True				
ANR	2730692	IdentifierDecl	buf [ 100 ]		2730687	0					
ANR	2730693	IdentifierDeclType	char [ 100 ]		2730687	0					
ANR	2730694	Identifier	buf		2730687	1					
ANR	2730695	PrimaryExpression	100		2730687	2					
ANR	2730696	IdentifierDeclStatement	"size_t rege , rego ;"	2279:2:78879:78896	2730687	2	True				
ANR	2730697	IdentifierDecl	rege		2730687	0					
ANR	2730698	IdentifierDeclType	size_t		2730687	0					
ANR	2730699	Identifier	rege		2730687	1					
ANR	2730700	IdentifierDecl	rego		2730687	1					
ANR	2730701	IdentifierDeclType	size_t		2730687	0					
ANR	2730702	Identifier	rego		2730687	1					
ANR	2730703	IdentifierDeclStatement	int reg_odd ;	2280:2:78900:78911	2730687	3	True				
ANR	2730704	IdentifierDecl	reg_odd		2730687	0					
ANR	2730705	IdentifierDeclType	int		2730687	0					
ANR	2730706	Identifier	reg_odd		2730687	1					
ANR	2730707	IdentifierDeclStatement	int reg_even ;	2281:2:78915:78927	2730687	4	True				
ANR	2730708	IdentifierDecl	reg_even		2730687	0					
ANR	2730709	IdentifierDeclType	int		2730687	0					
ANR	2730710	Identifier	reg_even		2730687	1					
ANR	2730711	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"	2283:2:78932:79045	2730687	5	True				
ANR	2730712	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"		2730687	0		=			
ANR	2730713	Identifier	reg_odd		2730687	0					
ANR	2730714	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rego , '\\0' )"		2730687	1					
ANR	2730715	Callee	hexagon_reg_num		2730687	0					
ANR	2730716	Identifier	hexagon_reg_num		2730687	0					
ANR	2730717	ArgumentList	operand		2730687	1					
ANR	2730718	Argument	operand		2730687	0					
ANR	2730719	Identifier	operand		2730687	0					
ANR	2730720	Argument	& input		2730687	1					
ANR	2730721	UnaryOperationExpression	& input		2730687	0					
ANR	2730722	UnaryOperator	&		2730687	0					
ANR	2730723	Identifier	input		2730687	1					
ANR	2730724	Argument	'\\0'		2730687	2					
ANR	2730725	PrimaryExpression	'\\0'		2730687	0					
ANR	2730726	Argument	hexagon_control_regs		2730687	3					
ANR	2730727	Identifier	hexagon_control_regs		2730687	0					
ANR	2730728	Argument	hexagon_control_regs_count		2730687	4					
ANR	2730729	Identifier	hexagon_control_regs_count		2730687	0					
ANR	2730730	Argument	& rego		2730687	5					
ANR	2730731	UnaryOperationExpression	& rego		2730687	0					
ANR	2730732	UnaryOperator	&		2730687	0					
ANR	2730733	Identifier	rego		2730687	1					
ANR	2730734	Argument	'\\0'		2730687	6					
ANR	2730735	PrimaryExpression	'\\0'		2730687	0					
ANR	2730736	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"	2284:2:79049:79161	2730687	6	True				
ANR	2730737	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"		2730687	0		=			
ANR	2730738	Identifier	reg_even		2730687	0					
ANR	2730739	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_control_regs , hexagon_control_regs_count , & rege , 'c' )"		2730687	1					
ANR	2730740	Callee	hexagon_reg_num		2730687	0					
ANR	2730741	Identifier	hexagon_reg_num		2730687	0					
ANR	2730742	ArgumentList	operand		2730687	1					
ANR	2730743	Argument	operand		2730687	0					
ANR	2730744	Identifier	operand		2730687	0					
ANR	2730745	Argument	& input		2730687	1					
ANR	2730746	UnaryOperationExpression	& input		2730687	0					
ANR	2730747	UnaryOperator	&		2730687	0					
ANR	2730748	Identifier	input		2730687	1					
ANR	2730749	Argument	'\\0'		2730687	2					
ANR	2730750	PrimaryExpression	'\\0'		2730687	0					
ANR	2730751	Argument	hexagon_control_regs		2730687	3					
ANR	2730752	Identifier	hexagon_control_regs		2730687	0					
ANR	2730753	Argument	hexagon_control_regs_count		2730687	4					
ANR	2730754	Identifier	hexagon_control_regs_count		2730687	0					
ANR	2730755	Argument	& rege		2730687	5					
ANR	2730756	UnaryOperationExpression	& rege		2730687	0					
ANR	2730757	UnaryOperator	&		2730687	0					
ANR	2730758	Identifier	rege		2730687	1					
ANR	2730759	Argument	'c'		2730687	6					
ANR	2730760	PrimaryExpression	'c'		2730687	0					
ANR	2730761	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2730687	7					
ANR	2730762	Condition	reg_odd < 0 || reg_even < 0	2285:6:79169:79195	2730687	0	True				
ANR	2730763	OrExpression	reg_odd < 0 || reg_even < 0		2730687	0		||			
ANR	2730764	RelationalExpression	reg_odd < 0		2730687	0		<			
ANR	2730765	Identifier	reg_odd		2730687	0					
ANR	2730766	PrimaryExpression	0		2730687	1					
ANR	2730767	RelationalExpression	reg_even < 0		2730687	1		<			
ANR	2730768	Identifier	reg_even		2730687	0					
ANR	2730769	PrimaryExpression	0		2730687	1					
ANR	2730770	ReturnStatement	return ( NULL ) ;	2286:4:79202:79215	2730687	1	True				
ANR	2730771	Identifier	NULL		2730687	0					
ANR	2730772	IfStatement	if ( reg_odd % 2 != 1 )		2730687	8					
ANR	2730773	Condition	reg_odd % 2 != 1	2289:6:79269:79284	2730687	0	True				
ANR	2730774	EqualityExpression	reg_odd % 2 != 1		2730687	0		!=			
ANR	2730775	MultiplicativeExpression	reg_odd % 2		2730687	0		%			
ANR	2730776	Identifier	reg_odd		2730687	0					
ANR	2730777	PrimaryExpression	2		2730687	1					
ANR	2730778	PrimaryExpression	1		2730687	1					
ANR	2730779	CompoundStatement		14:4:440:440	2730687	1					
ANR	2730780	IfStatement	if ( errmsg )		2730687	0					
ANR	2730781	Condition	errmsg	2291:10:79303:79308	2730687	0	True				
ANR	2730782	Identifier	errmsg		2730687	0					
ANR	2730783	CompoundStatement		16:8:468:468	2730687	1					
ANR	2730784	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2293:12:79333:79390	2730687	0	True				
ANR	2730785	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2730687	0					
ANR	2730786	Callee	sprintf		2730687	0					
ANR	2730787	Identifier	sprintf		2730687	0					
ANR	2730788	ArgumentList	buf		2730687	1					
ANR	2730789	Argument	buf		2730687	0					
ANR	2730790	Identifier	buf		2730687	0					
ANR	2730791	Argument	"""invalid odd register number: %d"""		2730687	1					
ANR	2730792	PrimaryExpression	"""invalid odd register number: %d"""		2730687	0					
ANR	2730793	Argument	reg_odd		2730687	2					
ANR	2730794	Identifier	reg_odd		2730687	0					
ANR	2730795	ExpressionStatement	* errmsg = buf	2294:12:79404:79417	2730687	1	True				
ANR	2730796	AssignmentExpression	* errmsg = buf		2730687	0		=			
ANR	2730797	UnaryOperationExpression	* errmsg		2730687	0					
ANR	2730798	UnaryOperator	*		2730687	0					
ANR	2730799	Identifier	errmsg		2730687	1					
ANR	2730800	Identifier	buf		2730687	1					
ANR	2730801	ReturnStatement	return NULL ;	2296:6:79435:79446	2730687	1	True				
ANR	2730802	Identifier	NULL		2730687	0					
ANR	2730803	IfStatement	if ( reg_even % 2 != 0 )		2730687	9					
ANR	2730804	Condition	reg_even % 2 != 0	2300:6:79507:79523	2730687	0	True				
ANR	2730805	EqualityExpression	reg_even % 2 != 0		2730687	0		!=			
ANR	2730806	MultiplicativeExpression	reg_even % 2		2730687	0		%			
ANR	2730807	Identifier	reg_even		2730687	0					
ANR	2730808	PrimaryExpression	2		2730687	1					
ANR	2730809	PrimaryExpression	0		2730687	1					
ANR	2730810	CompoundStatement		25:4:679:679	2730687	1					
ANR	2730811	IfStatement	if ( errmsg )		2730687	0					
ANR	2730812	Condition	errmsg	2302:10:79542:79547	2730687	0	True				
ANR	2730813	Identifier	errmsg		2730687	0					
ANR	2730814	CompoundStatement		27:8:707:707	2730687	1					
ANR	2730815	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2304:12:79572:79631	2730687	0	True				
ANR	2730816	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2730687	0					
ANR	2730817	Callee	sprintf		2730687	0					
ANR	2730818	Identifier	sprintf		2730687	0					
ANR	2730819	ArgumentList	buf		2730687	1					
ANR	2730820	Argument	buf		2730687	0					
ANR	2730821	Identifier	buf		2730687	0					
ANR	2730822	Argument	"""invalid even register number: %d"""		2730687	1					
ANR	2730823	PrimaryExpression	"""invalid even register number: %d"""		2730687	0					
ANR	2730824	Argument	reg_even		2730687	2					
ANR	2730825	Identifier	reg_even		2730687	0					
ANR	2730826	ExpressionStatement	* errmsg = buf	2305:12:79645:79658	2730687	1	True				
ANR	2730827	AssignmentExpression	* errmsg = buf		2730687	0		=			
ANR	2730828	UnaryOperationExpression	* errmsg		2730687	0					
ANR	2730829	UnaryOperator	*		2730687	0					
ANR	2730830	Identifier	errmsg		2730687	1					
ANR	2730831	Identifier	buf		2730687	1					
ANR	2730832	ReturnStatement	return NULL ;	2307:6:79676:79687	2730687	1	True				
ANR	2730833	Identifier	NULL		2730687	0					
ANR	2730834	IfStatement	if ( reg_odd != reg_even + 1 )		2730687	10					
ANR	2730835	Condition	reg_odd != reg_even + 1	2311:6:79750:79772	2730687	0	True				
ANR	2730836	EqualityExpression	reg_odd != reg_even + 1		2730687	0		!=			
ANR	2730837	Identifier	reg_odd		2730687	0					
ANR	2730838	AdditiveExpression	reg_even + 1		2730687	1		+			
ANR	2730839	Identifier	reg_even		2730687	0					
ANR	2730840	PrimaryExpression	1		2730687	1					
ANR	2730841	CompoundStatement		36:4:928:928	2730687	1					
ANR	2730842	IfStatement	if ( errmsg )		2730687	0					
ANR	2730843	Condition	errmsg	2313:10:79791:79796	2730687	0	True				
ANR	2730844	Identifier	errmsg		2730687	0					
ANR	2730845	CompoundStatement		38:8:956:956	2730687	1					
ANR	2730846	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2315:12:79821:79914	2730687	0	True				
ANR	2730847	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2730687	0					
ANR	2730848	Callee	sprintf		2730687	0					
ANR	2730849	Identifier	sprintf		2730687	0					
ANR	2730850	ArgumentList	buf		2730687	1					
ANR	2730851	Argument	buf		2730687	0					
ANR	2730852	Identifier	buf		2730687	0					
ANR	2730853	Argument	"""registers must be consecutive: %d:%d"""		2730687	1					
ANR	2730854	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2730687	0					
ANR	2730855	Argument	reg_odd		2730687	2					
ANR	2730856	Identifier	reg_odd		2730687	0					
ANR	2730857	Argument	reg_even		2730687	3					
ANR	2730858	Identifier	reg_even		2730687	0					
ANR	2730859	ExpressionStatement	* errmsg = buf	2317:12:79928:79941	2730687	1	True				
ANR	2730860	AssignmentExpression	* errmsg = buf		2730687	0		=			
ANR	2730861	UnaryOperationExpression	* errmsg		2730687	0					
ANR	2730862	UnaryOperator	*		2730687	0					
ANR	2730863	Identifier	errmsg		2730687	1					
ANR	2730864	Identifier	buf		2730687	1					
ANR	2730865	ReturnStatement	return NULL ;	2319:6:79959:79970	2730687	1	True				
ANR	2730866	Identifier	NULL		2730687	0					
ANR	2730867	IfStatement	if ( flag )		2730687	11					
ANR	2730868	Condition	flag	2322:6:79985:79988	2730687	0	True				
ANR	2730869	Identifier	flag		2730687	0					
ANR	2730870	ExpressionStatement	* flag = 0	2323:4:79995:80004	2730687	1	True				
ANR	2730871	AssignmentExpression	* flag = 0		2730687	0		=			
ANR	2730872	UnaryOperationExpression	* flag		2730687	0					
ANR	2730873	UnaryOperator	*		2730687	0					
ANR	2730874	Identifier	flag		2730687	1					
ANR	2730875	PrimaryExpression	0		2730687	1					
ANR	2730876	IfStatement	if ( ! hexagon_verify_hw )		2730687	12					
ANR	2730877	Condition	! hexagon_verify_hw	2325:6:80013:80030	2730687	0	True				
ANR	2730878	UnaryOperationExpression	! hexagon_verify_hw		2730687	0					
ANR	2730879	UnaryOperator	!		2730687	0					
ANR	2730880	Identifier	hexagon_verify_hw		2730687	1					
ANR	2730881	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		2730687	1					
ANR	2730882	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2326:8:80041:80235	2730687	0	True				
ANR	2730883	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		2730687	0		&&			
ANR	2730884	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2730687	0		&			
ANR	2730885	PtrMemberAccess	operand -> flags		2730687	0					
ANR	2730886	Identifier	operand		2730687	0					
ANR	2730887	Identifier	flags		2730687	1					
ANR	2730888	Identifier	HEXAGON_OPERAND_IS_WRITE		2730687	1					
ANR	2730889	OrExpression	( hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		2730687	1		||			
ANR	2730890	BitAndExpression	hexagon_control_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		2730687	0		&			
ANR	2730891	MemberAccess	hexagon_control_regs [ rege ] . flags		2730687	0					
ANR	2730892	ArrayIndexing	hexagon_control_regs [ rege ]		2730687	0					
ANR	2730893	Identifier	hexagon_control_regs		2730687	0					
ANR	2730894	Identifier	rege		2730687	1					
ANR	2730895	Identifier	flags		2730687	1					
ANR	2730896	Identifier	HEXAGON_REG_IS_READONLY		2730687	1					
ANR	2730897	BitAndExpression	hexagon_control_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		2730687	1		&			
ANR	2730898	MemberAccess	hexagon_control_regs [ rego ] . flags		2730687	0					
ANR	2730899	ArrayIndexing	hexagon_control_regs [ rego ]		2730687	0					
ANR	2730900	Identifier	hexagon_control_regs		2730687	0					
ANR	2730901	Identifier	rego		2730687	1					
ANR	2730902	Identifier	flags		2730687	1					
ANR	2730903	Identifier	HEXAGON_REG_IS_READONLY		2730687	1					
ANR	2730904	CompoundStatement		53:6:1393:1393	2730687	1					
ANR	2730905	IfStatement	if ( errmsg )		2730687	0					
ANR	2730906	Condition	errmsg	2330:12:80258:80263	2730687	0	True				
ANR	2730907	Identifier	errmsg		2730687	0					
ANR	2730908	CompoundStatement		55:10:1425:1425	2730687	1					
ANR	2730909	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_control_regs [ rego ] . name , hexagon_control_regs [ rege ] . name )"	2332:12:80290:80460	2730687	0	True				
ANR	2730910	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_control_regs [ rego ] . name , hexagon_control_regs [ rege ] . name )"		2730687	0					
ANR	2730911	Callee	sprintf		2730687	0					
ANR	2730912	Identifier	sprintf		2730687	0					
ANR	2730913	ArgumentList	buf		2730687	1					
ANR	2730914	Argument	buf		2730687	0					
ANR	2730915	Identifier	buf		2730687	0					
ANR	2730916	Argument	"""cannot write to read-only register `%s:%s'."""		2730687	1					
ANR	2730917	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		2730687	0					
ANR	2730918	Argument	hexagon_control_regs [ rego ] . name		2730687	2					
ANR	2730919	MemberAccess	hexagon_control_regs [ rego ] . name		2730687	0					
ANR	2730920	ArrayIndexing	hexagon_control_regs [ rego ]		2730687	0					
ANR	2730921	Identifier	hexagon_control_regs		2730687	0					
ANR	2730922	Identifier	rego		2730687	1					
ANR	2730923	Identifier	name		2730687	1					
ANR	2730924	Argument	hexagon_control_regs [ rege ] . name		2730687	3					
ANR	2730925	MemberAccess	hexagon_control_regs [ rege ] . name		2730687	0					
ANR	2730926	ArrayIndexing	hexagon_control_regs [ rege ]		2730687	0					
ANR	2730927	Identifier	hexagon_control_regs		2730687	0					
ANR	2730928	Identifier	rege		2730687	1					
ANR	2730929	Identifier	name		2730687	1					
ANR	2730930	ExpressionStatement	* errmsg = buf	2335:12:80474:80487	2730687	1	True				
ANR	2730931	AssignmentExpression	* errmsg = buf		2730687	0		=			
ANR	2730932	UnaryOperationExpression	* errmsg		2730687	0					
ANR	2730933	UnaryOperator	*		2730687	0					
ANR	2730934	Identifier	errmsg		2730687	1					
ANR	2730935	Identifier	buf		2730687	1					
ANR	2730936	IfStatement	if ( flag )		2730687	1					
ANR	2730937	Condition	flag	2337:12:80513:80516	2730687	0	True				
ANR	2730938	Identifier	flag		2730687	0					
ANR	2730939	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2338:10:80529:80564	2730687	1	True				
ANR	2730940	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2730687	0		|=			
ANR	2730941	UnaryOperationExpression	* flag		2730687	0					
ANR	2730942	UnaryOperator	*		2730687	0					
ANR	2730943	Identifier	flag		2730687	1					
ANR	2730944	Identifier	HEXAGON_OPERAND_IS_INVALID		2730687	1					
ANR	2730945	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2730687	13					
ANR	2730946	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2341:6:80581:80672	2730687	0	True				
ANR	2730947	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2730687	0					
ANR	2730948	Callee	hexagon_encode_operand		2730687	0					
ANR	2730949	Identifier	hexagon_encode_operand		2730687	0					
ANR	2730950	ArgumentList	operand		2730687	1					
ANR	2730951	Argument	operand		2730687	0					
ANR	2730952	Identifier	operand		2730687	0					
ANR	2730953	Argument	insn		2730687	1					
ANR	2730954	Identifier	insn		2730687	0					
ANR	2730955	Argument	opcode		2730687	2					
ANR	2730956	Identifier	opcode		2730687	0					
ANR	2730957	Argument	reg_even		2730687	3					
ANR	2730958	Identifier	reg_even		2730687	0					
ANR	2730959	Argument	NULL		2730687	4					
ANR	2730960	Identifier	NULL		2730687	0					
ANR	2730961	Argument	FALSE		2730687	5					
ANR	2730962	Identifier	FALSE		2730687	0					
ANR	2730963	Argument	FALSE		2730687	6					
ANR	2730964	Identifier	FALSE		2730687	0					
ANR	2730965	Argument	errmsg		2730687	7					
ANR	2730966	Identifier	errmsg		2730687	0					
ANR	2730967	CompoundStatement		67:4:1828:1828	2730687	1					
ANR	2730968	IfStatement	if ( flag )		2730687	0					
ANR	2730969	Condition	flag	2344:10:80691:80694	2730687	0	True				
ANR	2730970	Identifier	flag		2730687	0					
ANR	2730971	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2345:8:80705:80737	2730687	1	True				
ANR	2730972	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		2730687	0		|=			
ANR	2730973	UnaryOperationExpression	* flag		2730687	0					
ANR	2730974	UnaryOperator	*		2730687	0					
ANR	2730975	Identifier	flag		2730687	1					
ANR	2730976	Identifier	HEXAGON_OPERAND_IS_PAIR		2730687	1					
ANR	2730977	ExpressionStatement	* val = reg_even	2347:6:80746:80761	2730687	1	True				
ANR	2730978	AssignmentExpression	* val = reg_even		2730687	0		=			
ANR	2730979	UnaryOperationExpression	* val		2730687	0					
ANR	2730980	UnaryOperator	*		2730687	0					
ANR	2730981	Identifier	val		2730687	1					
ANR	2730982	Identifier	reg_even		2730687	1					
ANR	2730983	ReturnStatement	return ( input ) ;	2348:6:80769:80783	2730687	2	True				
ANR	2730984	Identifier	input		2730687	0					
ANR	2730985	ReturnStatement	return NULL ;	2351:2:80794:80805	2730687	14	True				
ANR	2730986	Identifier	NULL		2730687	0					
ANR	2730987	ReturnType	static char *		2730687	1					
ANR	2730988	Identifier	hexagon_parse_dcreg		2730687	2					
ANR	2730989	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2730687	3					
ANR	2730990	Parameter	const hexagon_operand * operand	2275:1:78717:78746	2730687	0	True				
ANR	2730991	ParameterType	const hexagon_operand *		2730687	0					
ANR	2730992	Identifier	operand		2730687	1					
ANR	2730993	Parameter	hexagon_insn * insn	2275:33:78749:78766	2730687	1	True				
ANR	2730994	ParameterType	hexagon_insn *		2730687	0					
ANR	2730995	Identifier	insn		2730687	1					
ANR	2730996	Parameter	const hexagon_opcode * opcode	2275:53:78769:78796	2730687	2	True				
ANR	2730997	ParameterType	const hexagon_opcode *		2730687	0					
ANR	2730998	Identifier	opcode		2730687	1					
ANR	2730999	Parameter	char * input	2276:1:78800:78810	2730687	3	True				
ANR	2731000	ParameterType	char *		2730687	0					
ANR	2731001	Identifier	input		2730687	1					
ANR	2731002	Parameter	long * val	2276:14:78813:78821	2730687	4	True				
ANR	2731003	ParameterType	long *		2730687	0					
ANR	2731004	Identifier	val		2730687	1					
ANR	2731005	Parameter	int * flag	2276:25:78824:78832	2730687	5	True				
ANR	2731006	ParameterType	int *		2730687	0					
ANR	2731007	Identifier	flag		2730687	1					
ANR	2731008	Parameter	char * * errmsg	2276:36:78835:78847	2730687	6	True				
ANR	2731009	ParameterType	char * *		2730687	0					
ANR	2731010	Identifier	errmsg		2730687	1					
ANR	2731011	CFGEntryNode	ENTRY		2730687		True				
ANR	2731012	CFGExitNode	EXIT		2730687		True				
ANR	2731013	Symbol	flag		2730687						
ANR	2731014	Symbol	hexagon_control_regs [ rege ] . name		2730687						
ANR	2731015	Symbol	& rego		2730687						
ANR	2731016	Symbol	* operand		2730687						
ANR	2731017	Symbol	* val		2730687						
ANR	2731018	Symbol	opcode		2730687						
ANR	2731019	Symbol	hexagon_control_regs [ rege ] . flags		2730687						
ANR	2731020	Symbol	& input		2730687						
ANR	2731021	Symbol	HEXAGON_OPERAND_IS_INVALID		2730687						
ANR	2731022	Symbol	hexagon_reg_num		2730687						
ANR	2731023	Symbol	hexagon_verify_hw		2730687						
ANR	2731024	Symbol	hexagon_control_regs [ rego ] . flags		2730687						
ANR	2731025	Symbol	& rege		2730687						
ANR	2731026	Symbol	HEXAGON_OPERAND_IS_PAIR		2730687						
ANR	2731027	Symbol	hexagon_control_regs_count		2730687						
ANR	2731028	Symbol	val		2730687						
ANR	2731029	Symbol	NULL		2730687						
ANR	2731030	Symbol	HEXAGON_OPERAND_IS_WRITE		2730687						
ANR	2731031	Symbol	HEXAGON_REG_IS_READONLY		2730687						
ANR	2731032	Symbol	rege		2730687						
ANR	2731033	Symbol	* rege		2730687						
ANR	2731034	Symbol	operand -> flags		2730687						
ANR	2731035	Symbol	hexagon_control_regs [ rego ] . name		2730687						
ANR	2731036	Symbol	errmsg		2730687						
ANR	2731037	Symbol	reg_even		2730687						
ANR	2731038	Symbol	rego		2730687						
ANR	2731039	Symbol	insn		2730687						
ANR	2731040	Symbol	input		2730687						
ANR	2731041	Symbol	* hexagon_control_regs		2730687						
ANR	2731042	Symbol	buf		2730687						
ANR	2731043	Symbol	* rego		2730687						
ANR	2731044	Symbol	hexagon_encode_operand		2730687						
ANR	2731045	Symbol	hexagon_control_regs		2730687						
ANR	2731046	Symbol	FALSE		2730687						
ANR	2731047	Symbol	reg_odd		2730687						
ANR	2731048	Symbol	* errmsg		2730687						
ANR	2731049	Symbol	* flag		2730687						
ANR	2731050	Symbol	operand		2730687						
ANR	2731051	Function	hexagon_parse_greg	2354:0:80810:81856							
ANR	2731052	FunctionDef	"hexagon_parse_greg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2731051	0					
ANR	2731053	CompoundStatement		2358:0:80977:81856	2731051	0					
ANR	2731054	IdentifierDeclStatement	size_t regn ;	2359:2:80981:80992	2731051	0	True				
ANR	2731055	IdentifierDecl	regn		2731051	0					
ANR	2731056	IdentifierDeclType	size_t		2731051	0					
ANR	2731057	Identifier	regn		2731051	1					
ANR	2731058	IdentifierDeclStatement	int reg ;	2360:2:80996:81003	2731051	1	True				
ANR	2731059	IdentifierDecl	reg		2731051	0					
ANR	2731060	IdentifierDeclType	int		2731051	0					
ANR	2731061	Identifier	reg		2731051	1					
ANR	2731062	Statement	static	2361:2:81007:81012	2731051	2	True				
ANR	2731063	IdentifierDeclStatement	char buf [ 150 ] ;	2361:9:81014:81028	2731051	3	True				
ANR	2731064	IdentifierDecl	buf [ 150 ]		2731051	0					
ANR	2731065	IdentifierDeclType	char [ 150 ]		2731051	0					
ANR	2731066	Identifier	buf		2731051	1					
ANR	2731067	PrimaryExpression	150		2731051	2					
ANR	2731068	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"	2363:2:81033:81137	2731051	4	True				
ANR	2731069	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"		2731051	0		=			
ANR	2731070	Identifier	reg		2731051	0					
ANR	2731071	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & regn , '\\0' )"		2731051	1					
ANR	2731072	Callee	hexagon_reg_num		2731051	0					
ANR	2731073	Identifier	hexagon_reg_num		2731051	0					
ANR	2731074	ArgumentList	operand		2731051	1					
ANR	2731075	Argument	operand		2731051	0					
ANR	2731076	Identifier	operand		2731051	0					
ANR	2731077	Argument	& input		2731051	1					
ANR	2731078	UnaryOperationExpression	& input		2731051	0					
ANR	2731079	UnaryOperator	&		2731051	0					
ANR	2731080	Identifier	input		2731051	1					
ANR	2731081	Argument	'\\0'		2731051	2					
ANR	2731082	PrimaryExpression	'\\0'		2731051	0					
ANR	2731083	Argument	hexagon_guest_regs		2731051	3					
ANR	2731084	Identifier	hexagon_guest_regs		2731051	0					
ANR	2731085	Argument	hexagon_guest_regs_count		2731051	4					
ANR	2731086	Identifier	hexagon_guest_regs_count		2731051	0					
ANR	2731087	Argument	& regn		2731051	5					
ANR	2731088	UnaryOperationExpression	& regn		2731051	0					
ANR	2731089	UnaryOperator	&		2731051	0					
ANR	2731090	Identifier	regn		2731051	1					
ANR	2731091	Argument	'\\0'		2731051	6					
ANR	2731092	PrimaryExpression	'\\0'		2731051	0					
ANR	2731093	IfStatement	if ( reg < 0 )		2731051	5					
ANR	2731094	Condition	reg < 0	2364:6:81145:81151	2731051	0	True				
ANR	2731095	RelationalExpression	reg < 0		2731051	0		<			
ANR	2731096	Identifier	reg		2731051	0					
ANR	2731097	PrimaryExpression	0		2731051	1					
ANR	2731098	ReturnStatement	return ( NULL ) ;	2365:4:81158:81171	2731051	1	True				
ANR	2731099	Identifier	NULL		2731051	0					
ANR	2731100	IfStatement	if ( flag )		2731051	6					
ANR	2731101	Condition	flag	2367:6:81180:81183	2731051	0	True				
ANR	2731102	Identifier	flag		2731051	0					
ANR	2731103	ExpressionStatement	* flag = 0	2368:4:81190:81199	2731051	1	True				
ANR	2731104	AssignmentExpression	* flag = 0		2731051	0		=			
ANR	2731105	UnaryOperationExpression	* flag		2731051	0					
ANR	2731106	UnaryOperator	*		2731051	0					
ANR	2731107	Identifier	flag		2731051	1					
ANR	2731108	PrimaryExpression	0		2731051	1					
ANR	2731109	IfStatement	if ( ! hexagon_verify_hw )		2731051	7					
ANR	2731110	Condition	! hexagon_verify_hw	2370:6:81208:81225	2731051	0	True				
ANR	2731111	UnaryOperationExpression	! hexagon_verify_hw		2731051	0					
ANR	2731112	UnaryOperator	!		2731051	0					
ANR	2731113	Identifier	hexagon_verify_hw		2731051	1					
ANR	2731114	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		2731051	1					
ANR	2731115	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2371:8:81236:81349	2731051	0	True				
ANR	2731116	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		2731051	0		&&			
ANR	2731117	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2731051	0		&			
ANR	2731118	PtrMemberAccess	operand -> flags		2731051	0					
ANR	2731119	Identifier	operand		2731051	0					
ANR	2731120	Identifier	flags		2731051	1					
ANR	2731121	Identifier	HEXAGON_OPERAND_IS_WRITE		2731051	1					
ANR	2731122	BitAndExpression	hexagon_guest_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		2731051	1		&			
ANR	2731123	MemberAccess	hexagon_guest_regs [ regn ] . flags		2731051	0					
ANR	2731124	ArrayIndexing	hexagon_guest_regs [ regn ]		2731051	0					
ANR	2731125	Identifier	hexagon_guest_regs		2731051	0					
ANR	2731126	Identifier	regn		2731051	1					
ANR	2731127	Identifier	flags		2731051	1					
ANR	2731128	Identifier	HEXAGON_REG_IS_READONLY		2731051	1					
ANR	2731129	CompoundStatement		16:6:380:380	2731051	1					
ANR	2731130	IfStatement	if ( errmsg )		2731051	0					
ANR	2731131	Condition	errmsg	2374:12:81372:81377	2731051	0	True				
ANR	2731132	Identifier	errmsg		2731051	0					
ANR	2731133	CompoundStatement		18:10:412:412	2731051	1					
ANR	2731134	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_guest_regs [ regn ] . name )"	2376:12:81404:81514	2731051	0	True				
ANR	2731135	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_guest_regs [ regn ] . name )"		2731051	0					
ANR	2731136	Callee	sprintf		2731051	0					
ANR	2731137	Identifier	sprintf		2731051	0					
ANR	2731138	ArgumentList	buf		2731051	1					
ANR	2731139	Argument	buf		2731051	0					
ANR	2731140	Identifier	buf		2731051	0					
ANR	2731141	Argument	"""cannot write to read-only register `%s'."""		2731051	1					
ANR	2731142	PrimaryExpression	"""cannot write to read-only register `%s'."""		2731051	0					
ANR	2731143	Argument	hexagon_guest_regs [ regn ] . name		2731051	2					
ANR	2731144	MemberAccess	hexagon_guest_regs [ regn ] . name		2731051	0					
ANR	2731145	ArrayIndexing	hexagon_guest_regs [ regn ]		2731051	0					
ANR	2731146	Identifier	hexagon_guest_regs		2731051	0					
ANR	2731147	Identifier	regn		2731051	1					
ANR	2731148	Identifier	name		2731051	1					
ANR	2731149	ExpressionStatement	* errmsg = buf	2378:12:81528:81541	2731051	1	True				
ANR	2731150	AssignmentExpression	* errmsg = buf		2731051	0		=			
ANR	2731151	UnaryOperationExpression	* errmsg		2731051	0					
ANR	2731152	UnaryOperator	*		2731051	0					
ANR	2731153	Identifier	errmsg		2731051	1					
ANR	2731154	Identifier	buf		2731051	1					
ANR	2731155	IfStatement	if ( flag )		2731051	1					
ANR	2731156	Condition	flag	2380:12:81567:81570	2731051	0	True				
ANR	2731157	Identifier	flag		2731051	0					
ANR	2731158	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2381:10:81583:81618	2731051	1	True				
ANR	2731159	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2731051	0		|=			
ANR	2731160	UnaryOperationExpression	* flag		2731051	0					
ANR	2731161	UnaryOperator	*		2731051	0					
ANR	2731162	Identifier	flag		2731051	1					
ANR	2731163	Identifier	HEXAGON_OPERAND_IS_INVALID		2731051	1					
ANR	2731164	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2731051	8					
ANR	2731165	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2384:6:81635:81721	2731051	0	True				
ANR	2731166	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2731051	0					
ANR	2731167	Callee	hexagon_encode_operand		2731051	0					
ANR	2731168	Identifier	hexagon_encode_operand		2731051	0					
ANR	2731169	ArgumentList	operand		2731051	1					
ANR	2731170	Argument	operand		2731051	0					
ANR	2731171	Identifier	operand		2731051	0					
ANR	2731172	Argument	insn		2731051	1					
ANR	2731173	Identifier	insn		2731051	0					
ANR	2731174	Argument	opcode		2731051	2					
ANR	2731175	Identifier	opcode		2731051	0					
ANR	2731176	Argument	reg		2731051	3					
ANR	2731177	Identifier	reg		2731051	0					
ANR	2731178	Argument	NULL		2731051	4					
ANR	2731179	Identifier	NULL		2731051	0					
ANR	2731180	Argument	FALSE		2731051	5					
ANR	2731181	Identifier	FALSE		2731051	0					
ANR	2731182	Argument	FALSE		2731051	6					
ANR	2731183	Identifier	FALSE		2731051	0					
ANR	2731184	Argument	errmsg		2731051	7					
ANR	2731185	Identifier	errmsg		2731051	0					
ANR	2731186	CompoundStatement		29:4:750:750	2731051	1					
ANR	2731187	IfStatement	if ( flag )		2731051	0					
ANR	2731188	Condition	flag	2387:10:81740:81743	2731051	0	True				
ANR	2731189	Identifier	flag		2731051	0					
ANR	2731190	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_CONTROL	2388:8:81754:81789	2731051	1	True				
ANR	2731191	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_CONTROL		2731051	0		|=			
ANR	2731192	UnaryOperationExpression	* flag		2731051	0					
ANR	2731193	UnaryOperator	*		2731051	0					
ANR	2731194	Identifier	flag		2731051	1					
ANR	2731195	Identifier	HEXAGON_OPERAND_IS_CONTROL		2731051	1					
ANR	2731196	ExpressionStatement	* val = reg	2390:6:81798:81808	2731051	1	True				
ANR	2731197	AssignmentExpression	* val = reg		2731051	0		=			
ANR	2731198	UnaryOperationExpression	* val		2731051	0					
ANR	2731199	UnaryOperator	*		2731051	0					
ANR	2731200	Identifier	val		2731051	1					
ANR	2731201	Identifier	reg		2731051	1					
ANR	2731202	ReturnStatement	return ( input ) ;	2391:6:81816:81830	2731051	2	True				
ANR	2731203	Identifier	input		2731051	0					
ANR	2731204	ReturnStatement	return ( NULL ) ;	2394:2:81841:81854	2731051	9	True				
ANR	2731205	Identifier	NULL		2731051	0					
ANR	2731206	ReturnType	static char *		2731051	1					
ANR	2731207	Identifier	hexagon_parse_greg		2731051	2					
ANR	2731208	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2731051	3					
ANR	2731209	Parameter	const hexagon_operand * operand	2356:1:80844:80873	2731051	0	True				
ANR	2731210	ParameterType	const hexagon_operand *		2731051	0					
ANR	2731211	Identifier	operand		2731051	1					
ANR	2731212	Parameter	hexagon_insn * insn	2356:33:80876:80893	2731051	1	True				
ANR	2731213	ParameterType	hexagon_insn *		2731051	0					
ANR	2731214	Identifier	insn		2731051	1					
ANR	2731215	Parameter	const hexagon_opcode * opcode	2356:53:80896:80923	2731051	2	True				
ANR	2731216	ParameterType	const hexagon_opcode *		2731051	0					
ANR	2731217	Identifier	opcode		2731051	1					
ANR	2731218	Parameter	char * input	2357:1:80927:80937	2731051	3	True				
ANR	2731219	ParameterType	char *		2731051	0					
ANR	2731220	Identifier	input		2731051	1					
ANR	2731221	Parameter	long * val	2357:14:80940:80948	2731051	4	True				
ANR	2731222	ParameterType	long *		2731051	0					
ANR	2731223	Identifier	val		2731051	1					
ANR	2731224	Parameter	int * flag	2357:25:80951:80959	2731051	5	True				
ANR	2731225	ParameterType	int *		2731051	0					
ANR	2731226	Identifier	flag		2731051	1					
ANR	2731227	Parameter	char * * errmsg	2357:36:80962:80974	2731051	6	True				
ANR	2731228	ParameterType	char * *		2731051	0					
ANR	2731229	Identifier	errmsg		2731051	1					
ANR	2731230	CFGEntryNode	ENTRY		2731051		True				
ANR	2731231	CFGExitNode	EXIT		2731051		True				
ANR	2731232	Symbol	flag		2731051						
ANR	2731233	Symbol	& regn		2731051						
ANR	2731234	Symbol	* operand		2731051						
ANR	2731235	Symbol	* hexagon_guest_regs		2731051						
ANR	2731236	Symbol	hexagon_guest_regs_count		2731051						
ANR	2731237	Symbol	* val		2731051						
ANR	2731238	Symbol	opcode		2731051						
ANR	2731239	Symbol	hexagon_guest_regs [ regn ] . name		2731051						
ANR	2731240	Symbol	& input		2731051						
ANR	2731241	Symbol	HEXAGON_OPERAND_IS_INVALID		2731051						
ANR	2731242	Symbol	reg		2731051						
ANR	2731243	Symbol	hexagon_reg_num		2731051						
ANR	2731244	Symbol	hexagon_verify_hw		2731051						
ANR	2731245	Symbol	HEXAGON_OPERAND_IS_CONTROL		2731051						
ANR	2731246	Symbol	val		2731051						
ANR	2731247	Symbol	NULL		2731051						
ANR	2731248	Symbol	HEXAGON_REG_IS_READONLY		2731051						
ANR	2731249	Symbol	HEXAGON_OPERAND_IS_WRITE		2731051						
ANR	2731250	Symbol	operand -> flags		2731051						
ANR	2731251	Symbol	hexagon_guest_regs		2731051						
ANR	2731252	Symbol	errmsg		2731051						
ANR	2731253	Symbol	regn		2731051						
ANR	2731254	Symbol	insn		2731051						
ANR	2731255	Symbol	input		2731051						
ANR	2731256	Symbol	buf		2731051						
ANR	2731257	Symbol	* regn		2731051						
ANR	2731258	Symbol	hexagon_encode_operand		2731051						
ANR	2731259	Symbol	hexagon_guest_regs [ regn ] . flags		2731051						
ANR	2731260	Symbol	FALSE		2731051						
ANR	2731261	Symbol	* flag		2731051						
ANR	2731262	Symbol	* errmsg		2731051						
ANR	2731263	Symbol	operand		2731051						
ANR	2731264	Function	hexagon_parse_dgreg	2397:0:81859:83968							
ANR	2731265	FunctionDef	"hexagon_parse_dgreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2731264	0					
ANR	2731266	CompoundStatement		2401:0:82027:83968	2731264	0					
ANR	2731267	Statement	static	2402:2:82031:82036	2731264	0	True				
ANR	2731268	IdentifierDeclStatement	char buf [ 100 ] ;	2402:9:82038:82052	2731264	1	True				
ANR	2731269	IdentifierDecl	buf [ 100 ]		2731264	0					
ANR	2731270	IdentifierDeclType	char [ 100 ]		2731264	0					
ANR	2731271	Identifier	buf		2731264	1					
ANR	2731272	PrimaryExpression	100		2731264	2					
ANR	2731273	IdentifierDeclStatement	"size_t rege , rego ;"	2403:2:82056:82073	2731264	2	True				
ANR	2731274	IdentifierDecl	rege		2731264	0					
ANR	2731275	IdentifierDeclType	size_t		2731264	0					
ANR	2731276	Identifier	rege		2731264	1					
ANR	2731277	IdentifierDecl	rego		2731264	1					
ANR	2731278	IdentifierDeclType	size_t		2731264	0					
ANR	2731279	Identifier	rego		2731264	1					
ANR	2731280	IdentifierDeclStatement	int reg_odd ;	2404:2:82077:82088	2731264	3	True				
ANR	2731281	IdentifierDecl	reg_odd		2731264	0					
ANR	2731282	IdentifierDeclType	int		2731264	0					
ANR	2731283	Identifier	reg_odd		2731264	1					
ANR	2731284	IdentifierDeclStatement	int reg_even ;	2405:2:82092:82104	2731264	4	True				
ANR	2731285	IdentifierDecl	reg_even		2731264	0					
ANR	2731286	IdentifierDeclType	int		2731264	0					
ANR	2731287	Identifier	reg_even		2731264	1					
ANR	2731288	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"	2407:2:82109:82218	2731264	5	True				
ANR	2731289	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"		2731264	0		=			
ANR	2731290	Identifier	reg_odd		2731264	0					
ANR	2731291	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rego , '\\0' )"		2731264	1					
ANR	2731292	Callee	hexagon_reg_num		2731264	0					
ANR	2731293	Identifier	hexagon_reg_num		2731264	0					
ANR	2731294	ArgumentList	operand		2731264	1					
ANR	2731295	Argument	operand		2731264	0					
ANR	2731296	Identifier	operand		2731264	0					
ANR	2731297	Argument	& input		2731264	1					
ANR	2731298	UnaryOperationExpression	& input		2731264	0					
ANR	2731299	UnaryOperator	&		2731264	0					
ANR	2731300	Identifier	input		2731264	1					
ANR	2731301	Argument	'\\0'		2731264	2					
ANR	2731302	PrimaryExpression	'\\0'		2731264	0					
ANR	2731303	Argument	hexagon_guest_regs		2731264	3					
ANR	2731304	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731305	Argument	hexagon_guest_regs_count		2731264	4					
ANR	2731306	Identifier	hexagon_guest_regs_count		2731264	0					
ANR	2731307	Argument	& rego		2731264	5					
ANR	2731308	UnaryOperationExpression	& rego		2731264	0					
ANR	2731309	UnaryOperator	&		2731264	0					
ANR	2731310	Identifier	rego		2731264	1					
ANR	2731311	Argument	'\\0'		2731264	6					
ANR	2731312	PrimaryExpression	'\\0'		2731264	0					
ANR	2731313	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"	2408:2:82222:82330	2731264	6	True				
ANR	2731314	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"		2731264	0		=			
ANR	2731315	Identifier	reg_even		2731264	0					
ANR	2731316	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_guest_regs , hexagon_guest_regs_count , & rege , 'g' )"		2731264	1					
ANR	2731317	Callee	hexagon_reg_num		2731264	0					
ANR	2731318	Identifier	hexagon_reg_num		2731264	0					
ANR	2731319	ArgumentList	operand		2731264	1					
ANR	2731320	Argument	operand		2731264	0					
ANR	2731321	Identifier	operand		2731264	0					
ANR	2731322	Argument	& input		2731264	1					
ANR	2731323	UnaryOperationExpression	& input		2731264	0					
ANR	2731324	UnaryOperator	&		2731264	0					
ANR	2731325	Identifier	input		2731264	1					
ANR	2731326	Argument	'\\0'		2731264	2					
ANR	2731327	PrimaryExpression	'\\0'		2731264	0					
ANR	2731328	Argument	hexagon_guest_regs		2731264	3					
ANR	2731329	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731330	Argument	hexagon_guest_regs_count		2731264	4					
ANR	2731331	Identifier	hexagon_guest_regs_count		2731264	0					
ANR	2731332	Argument	& rege		2731264	5					
ANR	2731333	UnaryOperationExpression	& rege		2731264	0					
ANR	2731334	UnaryOperator	&		2731264	0					
ANR	2731335	Identifier	rege		2731264	1					
ANR	2731336	Argument	'g'		2731264	6					
ANR	2731337	PrimaryExpression	'g'		2731264	0					
ANR	2731338	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2731264	7					
ANR	2731339	Condition	reg_odd < 0 || reg_even < 0	2409:6:82338:82364	2731264	0	True				
ANR	2731340	OrExpression	reg_odd < 0 || reg_even < 0		2731264	0		||			
ANR	2731341	RelationalExpression	reg_odd < 0		2731264	0		<			
ANR	2731342	Identifier	reg_odd		2731264	0					
ANR	2731343	PrimaryExpression	0		2731264	1					
ANR	2731344	RelationalExpression	reg_even < 0		2731264	1		<			
ANR	2731345	Identifier	reg_even		2731264	0					
ANR	2731346	PrimaryExpression	0		2731264	1					
ANR	2731347	ReturnStatement	return ( NULL ) ;	2410:4:82371:82384	2731264	1	True				
ANR	2731348	Identifier	NULL		2731264	0					
ANR	2731349	IfStatement	if ( reg_odd % 2 != 1 )		2731264	8					
ANR	2731350	Condition	reg_odd % 2 != 1	2413:6:82438:82453	2731264	0	True				
ANR	2731351	EqualityExpression	reg_odd % 2 != 1		2731264	0		!=			
ANR	2731352	MultiplicativeExpression	reg_odd % 2		2731264	0		%			
ANR	2731353	Identifier	reg_odd		2731264	0					
ANR	2731354	PrimaryExpression	2		2731264	1					
ANR	2731355	PrimaryExpression	1		2731264	1					
ANR	2731356	CompoundStatement		14:4:432:432	2731264	1					
ANR	2731357	IfStatement	if ( errmsg )		2731264	0					
ANR	2731358	Condition	errmsg	2415:10:82472:82477	2731264	0	True				
ANR	2731359	Identifier	errmsg		2731264	0					
ANR	2731360	CompoundStatement		16:8:460:460	2731264	1					
ANR	2731361	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2417:12:82502:82559	2731264	0	True				
ANR	2731362	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2731264	0					
ANR	2731363	Callee	sprintf		2731264	0					
ANR	2731364	Identifier	sprintf		2731264	0					
ANR	2731365	ArgumentList	buf		2731264	1					
ANR	2731366	Argument	buf		2731264	0					
ANR	2731367	Identifier	buf		2731264	0					
ANR	2731368	Argument	"""invalid odd register number: %d"""		2731264	1					
ANR	2731369	PrimaryExpression	"""invalid odd register number: %d"""		2731264	0					
ANR	2731370	Argument	reg_odd		2731264	2					
ANR	2731371	Identifier	reg_odd		2731264	0					
ANR	2731372	ExpressionStatement	* errmsg = buf	2418:12:82573:82586	2731264	1	True				
ANR	2731373	AssignmentExpression	* errmsg = buf		2731264	0		=			
ANR	2731374	UnaryOperationExpression	* errmsg		2731264	0					
ANR	2731375	UnaryOperator	*		2731264	0					
ANR	2731376	Identifier	errmsg		2731264	1					
ANR	2731377	Identifier	buf		2731264	1					
ANR	2731378	ReturnStatement	return NULL ;	2420:6:82604:82615	2731264	1	True				
ANR	2731379	Identifier	NULL		2731264	0					
ANR	2731380	IfStatement	if ( reg_even % 2 != 0 )		2731264	9					
ANR	2731381	Condition	reg_even % 2 != 0	2424:6:82676:82692	2731264	0	True				
ANR	2731382	EqualityExpression	reg_even % 2 != 0		2731264	0		!=			
ANR	2731383	MultiplicativeExpression	reg_even % 2		2731264	0		%			
ANR	2731384	Identifier	reg_even		2731264	0					
ANR	2731385	PrimaryExpression	2		2731264	1					
ANR	2731386	PrimaryExpression	0		2731264	1					
ANR	2731387	CompoundStatement		25:4:671:671	2731264	1					
ANR	2731388	IfStatement	if ( errmsg )		2731264	0					
ANR	2731389	Condition	errmsg	2426:10:82711:82716	2731264	0	True				
ANR	2731390	Identifier	errmsg		2731264	0					
ANR	2731391	CompoundStatement		27:8:699:699	2731264	1					
ANR	2731392	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2428:12:82741:82800	2731264	0	True				
ANR	2731393	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2731264	0					
ANR	2731394	Callee	sprintf		2731264	0					
ANR	2731395	Identifier	sprintf		2731264	0					
ANR	2731396	ArgumentList	buf		2731264	1					
ANR	2731397	Argument	buf		2731264	0					
ANR	2731398	Identifier	buf		2731264	0					
ANR	2731399	Argument	"""invalid even register number: %d"""		2731264	1					
ANR	2731400	PrimaryExpression	"""invalid even register number: %d"""		2731264	0					
ANR	2731401	Argument	reg_even		2731264	2					
ANR	2731402	Identifier	reg_even		2731264	0					
ANR	2731403	ExpressionStatement	* errmsg = buf	2429:12:82814:82827	2731264	1	True				
ANR	2731404	AssignmentExpression	* errmsg = buf		2731264	0		=			
ANR	2731405	UnaryOperationExpression	* errmsg		2731264	0					
ANR	2731406	UnaryOperator	*		2731264	0					
ANR	2731407	Identifier	errmsg		2731264	1					
ANR	2731408	Identifier	buf		2731264	1					
ANR	2731409	ReturnStatement	return NULL ;	2431:6:82845:82856	2731264	1	True				
ANR	2731410	Identifier	NULL		2731264	0					
ANR	2731411	IfStatement	if ( reg_odd != reg_even + 1 )		2731264	10					
ANR	2731412	Condition	reg_odd != reg_even + 1	2435:6:82919:82941	2731264	0	True				
ANR	2731413	EqualityExpression	reg_odd != reg_even + 1		2731264	0		!=			
ANR	2731414	Identifier	reg_odd		2731264	0					
ANR	2731415	AdditiveExpression	reg_even + 1		2731264	1		+			
ANR	2731416	Identifier	reg_even		2731264	0					
ANR	2731417	PrimaryExpression	1		2731264	1					
ANR	2731418	CompoundStatement		36:4:920:920	2731264	1					
ANR	2731419	IfStatement	if ( errmsg )		2731264	0					
ANR	2731420	Condition	errmsg	2437:10:82960:82965	2731264	0	True				
ANR	2731421	Identifier	errmsg		2731264	0					
ANR	2731422	CompoundStatement		38:8:948:948	2731264	1					
ANR	2731423	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2439:12:82990:83083	2731264	0	True				
ANR	2731424	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2731264	0					
ANR	2731425	Callee	sprintf		2731264	0					
ANR	2731426	Identifier	sprintf		2731264	0					
ANR	2731427	ArgumentList	buf		2731264	1					
ANR	2731428	Argument	buf		2731264	0					
ANR	2731429	Identifier	buf		2731264	0					
ANR	2731430	Argument	"""registers must be consecutive: %d:%d"""		2731264	1					
ANR	2731431	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2731264	0					
ANR	2731432	Argument	reg_odd		2731264	2					
ANR	2731433	Identifier	reg_odd		2731264	0					
ANR	2731434	Argument	reg_even		2731264	3					
ANR	2731435	Identifier	reg_even		2731264	0					
ANR	2731436	ExpressionStatement	* errmsg = buf	2441:12:83097:83110	2731264	1	True				
ANR	2731437	AssignmentExpression	* errmsg = buf		2731264	0		=			
ANR	2731438	UnaryOperationExpression	* errmsg		2731264	0					
ANR	2731439	UnaryOperator	*		2731264	0					
ANR	2731440	Identifier	errmsg		2731264	1					
ANR	2731441	Identifier	buf		2731264	1					
ANR	2731442	ReturnStatement	return NULL ;	2443:6:83128:83139	2731264	1	True				
ANR	2731443	Identifier	NULL		2731264	0					
ANR	2731444	IfStatement	if ( flag )		2731264	11					
ANR	2731445	Condition	flag	2446:6:83154:83157	2731264	0	True				
ANR	2731446	Identifier	flag		2731264	0					
ANR	2731447	ExpressionStatement	* flag = 0	2447:4:83164:83173	2731264	1	True				
ANR	2731448	AssignmentExpression	* flag = 0		2731264	0		=			
ANR	2731449	UnaryOperationExpression	* flag		2731264	0					
ANR	2731450	UnaryOperator	*		2731264	0					
ANR	2731451	Identifier	flag		2731264	1					
ANR	2731452	PrimaryExpression	0		2731264	1					
ANR	2731453	IfStatement	if ( ! hexagon_verify_hw )		2731264	12					
ANR	2731454	Condition	! hexagon_verify_hw	2449:6:83182:83199	2731264	0	True				
ANR	2731455	UnaryOperationExpression	! hexagon_verify_hw		2731264	0					
ANR	2731456	UnaryOperator	!		2731264	0					
ANR	2731457	Identifier	hexagon_verify_hw		2731264	1					
ANR	2731458	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		2731264	1					
ANR	2731459	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2450:8:83210:83400	2731264	0	True				
ANR	2731460	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		2731264	0		&&			
ANR	2731461	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2731264	0		&			
ANR	2731462	PtrMemberAccess	operand -> flags		2731264	0					
ANR	2731463	Identifier	operand		2731264	0					
ANR	2731464	Identifier	flags		2731264	1					
ANR	2731465	Identifier	HEXAGON_OPERAND_IS_WRITE		2731264	1					
ANR	2731466	OrExpression	( hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		2731264	1		||			
ANR	2731467	BitAndExpression	hexagon_guest_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		2731264	0		&			
ANR	2731468	MemberAccess	hexagon_guest_regs [ rege ] . flags		2731264	0					
ANR	2731469	ArrayIndexing	hexagon_guest_regs [ rege ]		2731264	0					
ANR	2731470	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731471	Identifier	rege		2731264	1					
ANR	2731472	Identifier	flags		2731264	1					
ANR	2731473	Identifier	HEXAGON_REG_IS_READONLY		2731264	1					
ANR	2731474	BitAndExpression	hexagon_guest_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		2731264	1		&			
ANR	2731475	MemberAccess	hexagon_guest_regs [ rego ] . flags		2731264	0					
ANR	2731476	ArrayIndexing	hexagon_guest_regs [ rego ]		2731264	0					
ANR	2731477	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731478	Identifier	rego		2731264	1					
ANR	2731479	Identifier	flags		2731264	1					
ANR	2731480	Identifier	HEXAGON_REG_IS_READONLY		2731264	1					
ANR	2731481	CompoundStatement		53:6:1381:1381	2731264	1					
ANR	2731482	IfStatement	if ( errmsg )		2731264	0					
ANR	2731483	Condition	errmsg	2454:12:83423:83428	2731264	0	True				
ANR	2731484	Identifier	errmsg		2731264	0					
ANR	2731485	CompoundStatement		55:10:1413:1413	2731264	1					
ANR	2731486	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_guest_regs [ rego ] . name , hexagon_guest_regs [ rege ] . name )"	2456:12:83455:83621	2731264	0	True				
ANR	2731487	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_guest_regs [ rego ] . name , hexagon_guest_regs [ rege ] . name )"		2731264	0					
ANR	2731488	Callee	sprintf		2731264	0					
ANR	2731489	Identifier	sprintf		2731264	0					
ANR	2731490	ArgumentList	buf		2731264	1					
ANR	2731491	Argument	buf		2731264	0					
ANR	2731492	Identifier	buf		2731264	0					
ANR	2731493	Argument	"""cannot write to read-only register `%s:%s'."""		2731264	1					
ANR	2731494	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		2731264	0					
ANR	2731495	Argument	hexagon_guest_regs [ rego ] . name		2731264	2					
ANR	2731496	MemberAccess	hexagon_guest_regs [ rego ] . name		2731264	0					
ANR	2731497	ArrayIndexing	hexagon_guest_regs [ rego ]		2731264	0					
ANR	2731498	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731499	Identifier	rego		2731264	1					
ANR	2731500	Identifier	name		2731264	1					
ANR	2731501	Argument	hexagon_guest_regs [ rege ] . name		2731264	3					
ANR	2731502	MemberAccess	hexagon_guest_regs [ rege ] . name		2731264	0					
ANR	2731503	ArrayIndexing	hexagon_guest_regs [ rege ]		2731264	0					
ANR	2731504	Identifier	hexagon_guest_regs		2731264	0					
ANR	2731505	Identifier	rege		2731264	1					
ANR	2731506	Identifier	name		2731264	1					
ANR	2731507	ExpressionStatement	* errmsg = buf	2459:12:83635:83648	2731264	1	True				
ANR	2731508	AssignmentExpression	* errmsg = buf		2731264	0		=			
ANR	2731509	UnaryOperationExpression	* errmsg		2731264	0					
ANR	2731510	UnaryOperator	*		2731264	0					
ANR	2731511	Identifier	errmsg		2731264	1					
ANR	2731512	Identifier	buf		2731264	1					
ANR	2731513	IfStatement	if ( flag )		2731264	1					
ANR	2731514	Condition	flag	2461:12:83674:83677	2731264	0	True				
ANR	2731515	Identifier	flag		2731264	0					
ANR	2731516	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2462:10:83690:83725	2731264	1	True				
ANR	2731517	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2731264	0		|=			
ANR	2731518	UnaryOperationExpression	* flag		2731264	0					
ANR	2731519	UnaryOperator	*		2731264	0					
ANR	2731520	Identifier	flag		2731264	1					
ANR	2731521	Identifier	HEXAGON_OPERAND_IS_INVALID		2731264	1					
ANR	2731522	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2731264	13					
ANR	2731523	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2465:6:83742:83833	2731264	0	True				
ANR	2731524	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2731264	0					
ANR	2731525	Callee	hexagon_encode_operand		2731264	0					
ANR	2731526	Identifier	hexagon_encode_operand		2731264	0					
ANR	2731527	ArgumentList	operand		2731264	1					
ANR	2731528	Argument	operand		2731264	0					
ANR	2731529	Identifier	operand		2731264	0					
ANR	2731530	Argument	insn		2731264	1					
ANR	2731531	Identifier	insn		2731264	0					
ANR	2731532	Argument	opcode		2731264	2					
ANR	2731533	Identifier	opcode		2731264	0					
ANR	2731534	Argument	reg_even		2731264	3					
ANR	2731535	Identifier	reg_even		2731264	0					
ANR	2731536	Argument	NULL		2731264	4					
ANR	2731537	Identifier	NULL		2731264	0					
ANR	2731538	Argument	FALSE		2731264	5					
ANR	2731539	Identifier	FALSE		2731264	0					
ANR	2731540	Argument	FALSE		2731264	6					
ANR	2731541	Identifier	FALSE		2731264	0					
ANR	2731542	Argument	errmsg		2731264	7					
ANR	2731543	Identifier	errmsg		2731264	0					
ANR	2731544	CompoundStatement		67:4:1812:1812	2731264	1					
ANR	2731545	IfStatement	if ( flag )		2731264	0					
ANR	2731546	Condition	flag	2468:10:83852:83855	2731264	0	True				
ANR	2731547	Identifier	flag		2731264	0					
ANR	2731548	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2469:8:83866:83898	2731264	1	True				
ANR	2731549	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		2731264	0		|=			
ANR	2731550	UnaryOperationExpression	* flag		2731264	0					
ANR	2731551	UnaryOperator	*		2731264	0					
ANR	2731552	Identifier	flag		2731264	1					
ANR	2731553	Identifier	HEXAGON_OPERAND_IS_PAIR		2731264	1					
ANR	2731554	ExpressionStatement	* val = reg_even	2471:6:83907:83922	2731264	1	True				
ANR	2731555	AssignmentExpression	* val = reg_even		2731264	0		=			
ANR	2731556	UnaryOperationExpression	* val		2731264	0					
ANR	2731557	UnaryOperator	*		2731264	0					
ANR	2731558	Identifier	val		2731264	1					
ANR	2731559	Identifier	reg_even		2731264	1					
ANR	2731560	ReturnStatement	return ( input ) ;	2472:6:83930:83944	2731264	2	True				
ANR	2731561	Identifier	input		2731264	0					
ANR	2731562	ReturnStatement	return NULL ;	2475:2:83955:83966	2731264	14	True				
ANR	2731563	Identifier	NULL		2731264	0					
ANR	2731564	ReturnType	static char *		2731264	1					
ANR	2731565	Identifier	hexagon_parse_dgreg		2731264	2					
ANR	2731566	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2731264	3					
ANR	2731567	Parameter	const hexagon_operand * operand	2399:1:81894:81923	2731264	0	True				
ANR	2731568	ParameterType	const hexagon_operand *		2731264	0					
ANR	2731569	Identifier	operand		2731264	1					
ANR	2731570	Parameter	hexagon_insn * insn	2399:33:81926:81943	2731264	1	True				
ANR	2731571	ParameterType	hexagon_insn *		2731264	0					
ANR	2731572	Identifier	insn		2731264	1					
ANR	2731573	Parameter	const hexagon_opcode * opcode	2399:53:81946:81973	2731264	2	True				
ANR	2731574	ParameterType	const hexagon_opcode *		2731264	0					
ANR	2731575	Identifier	opcode		2731264	1					
ANR	2731576	Parameter	char * input	2400:1:81977:81987	2731264	3	True				
ANR	2731577	ParameterType	char *		2731264	0					
ANR	2731578	Identifier	input		2731264	1					
ANR	2731579	Parameter	long * val	2400:14:81990:81998	2731264	4	True				
ANR	2731580	ParameterType	long *		2731264	0					
ANR	2731581	Identifier	val		2731264	1					
ANR	2731582	Parameter	int * flag	2400:25:82001:82009	2731264	5	True				
ANR	2731583	ParameterType	int *		2731264	0					
ANR	2731584	Identifier	flag		2731264	1					
ANR	2731585	Parameter	char * * errmsg	2400:36:82012:82024	2731264	6	True				
ANR	2731586	ParameterType	char * *		2731264	0					
ANR	2731587	Identifier	errmsg		2731264	1					
ANR	2731588	CFGEntryNode	ENTRY		2731264		True				
ANR	2731589	CFGExitNode	EXIT		2731264		True				
ANR	2731590	Symbol	flag		2731264						
ANR	2731591	Symbol	& rego		2731264						
ANR	2731592	Symbol	* operand		2731264						
ANR	2731593	Symbol	hexagon_guest_regs [ rego ] . name		2731264						
ANR	2731594	Symbol	* hexagon_guest_regs		2731264						
ANR	2731595	Symbol	hexagon_guest_regs_count		2731264						
ANR	2731596	Symbol	* val		2731264						
ANR	2731597	Symbol	opcode		2731264						
ANR	2731598	Symbol	& input		2731264						
ANR	2731599	Symbol	hexagon_guest_regs [ rego ] . flags		2731264						
ANR	2731600	Symbol	HEXAGON_OPERAND_IS_INVALID		2731264						
ANR	2731601	Symbol	hexagon_reg_num		2731264						
ANR	2731602	Symbol	hexagon_verify_hw		2731264						
ANR	2731603	Symbol	& rege		2731264						
ANR	2731604	Symbol	HEXAGON_OPERAND_IS_PAIR		2731264						
ANR	2731605	Symbol	val		2731264						
ANR	2731606	Symbol	NULL		2731264						
ANR	2731607	Symbol	HEXAGON_OPERAND_IS_WRITE		2731264						
ANR	2731608	Symbol	HEXAGON_REG_IS_READONLY		2731264						
ANR	2731609	Symbol	rege		2731264						
ANR	2731610	Symbol	operand -> flags		2731264						
ANR	2731611	Symbol	* rege		2731264						
ANR	2731612	Symbol	hexagon_guest_regs		2731264						
ANR	2731613	Symbol	errmsg		2731264						
ANR	2731614	Symbol	hexagon_guest_regs [ rege ] . flags		2731264						
ANR	2731615	Symbol	reg_even		2731264						
ANR	2731616	Symbol	rego		2731264						
ANR	2731617	Symbol	hexagon_guest_regs [ rege ] . name		2731264						
ANR	2731618	Symbol	insn		2731264						
ANR	2731619	Symbol	input		2731264						
ANR	2731620	Symbol	buf		2731264						
ANR	2731621	Symbol	* rego		2731264						
ANR	2731622	Symbol	hexagon_encode_operand		2731264						
ANR	2731623	Symbol	FALSE		2731264						
ANR	2731624	Symbol	reg_odd		2731264						
ANR	2731625	Symbol	* errmsg		2731264						
ANR	2731626	Symbol	* flag		2731264						
ANR	2731627	Symbol	operand		2731264						
ANR	2731628	Function	hexagon_parse_sreg	2478:0:83971:85036							
ANR	2731629	FunctionDef	"hexagon_parse_sreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2731628	0					
ANR	2731630	CompoundStatement		2482:0:84138:85036	2731628	0					
ANR	2731631	IdentifierDeclStatement	size_t regn ;	2483:2:84142:84153	2731628	0	True				
ANR	2731632	IdentifierDecl	regn		2731628	0					
ANR	2731633	IdentifierDeclType	size_t		2731628	0					
ANR	2731634	Identifier	regn		2731628	1					
ANR	2731635	IdentifierDeclStatement	int reg ;	2484:2:84157:84164	2731628	1	True				
ANR	2731636	IdentifierDecl	reg		2731628	0					
ANR	2731637	IdentifierDeclType	int		2731628	0					
ANR	2731638	Identifier	reg		2731628	1					
ANR	2731639	Statement	static	2485:2:84168:84173	2731628	2	True				
ANR	2731640	IdentifierDeclStatement	char buf [ 150 ] ;	2485:9:84175:84189	2731628	3	True				
ANR	2731641	IdentifierDecl	buf [ 150 ]		2731628	0					
ANR	2731642	IdentifierDeclType	char [ 150 ]		2731628	0					
ANR	2731643	Identifier	buf		2731628	1					
ANR	2731644	PrimaryExpression	150		2731628	2					
ANR	2731645	ExpressionStatement	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"	2487:2:84194:84308	2731628	4	True				
ANR	2731646	AssignmentExpression	"reg = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"		2731628	0		=			
ANR	2731647	Identifier	reg		2731628	0					
ANR	2731648	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & regn , '\\0' )"		2731628	1					
ANR	2731649	Callee	hexagon_reg_num		2731628	0					
ANR	2731650	Identifier	hexagon_reg_num		2731628	0					
ANR	2731651	ArgumentList	operand		2731628	1					
ANR	2731652	Argument	operand		2731628	0					
ANR	2731653	Identifier	operand		2731628	0					
ANR	2731654	Argument	& input		2731628	1					
ANR	2731655	UnaryOperationExpression	& input		2731628	0					
ANR	2731656	UnaryOperator	&		2731628	0					
ANR	2731657	Identifier	input		2731628	1					
ANR	2731658	Argument	'\\0'		2731628	2					
ANR	2731659	PrimaryExpression	'\\0'		2731628	0					
ANR	2731660	Argument	hexagon_supervisor_regs		2731628	3					
ANR	2731661	Identifier	hexagon_supervisor_regs		2731628	0					
ANR	2731662	Argument	hexagon_supervisor_regs_count		2731628	4					
ANR	2731663	Identifier	hexagon_supervisor_regs_count		2731628	0					
ANR	2731664	Argument	& regn		2731628	5					
ANR	2731665	UnaryOperationExpression	& regn		2731628	0					
ANR	2731666	UnaryOperator	&		2731628	0					
ANR	2731667	Identifier	regn		2731628	1					
ANR	2731668	Argument	'\\0'		2731628	6					
ANR	2731669	PrimaryExpression	'\\0'		2731628	0					
ANR	2731670	IfStatement	if ( reg < 0 )		2731628	5					
ANR	2731671	Condition	reg < 0	2488:6:84316:84322	2731628	0	True				
ANR	2731672	RelationalExpression	reg < 0		2731628	0		<			
ANR	2731673	Identifier	reg		2731628	0					
ANR	2731674	PrimaryExpression	0		2731628	1					
ANR	2731675	ReturnStatement	return ( NULL ) ;	2489:4:84329:84342	2731628	1	True				
ANR	2731676	Identifier	NULL		2731628	0					
ANR	2731677	IfStatement	if ( flag )		2731628	6					
ANR	2731678	Condition	flag	2491:6:84351:84354	2731628	0	True				
ANR	2731679	Identifier	flag		2731628	0					
ANR	2731680	ExpressionStatement	* flag = 0	2492:4:84361:84370	2731628	1	True				
ANR	2731681	AssignmentExpression	* flag = 0		2731628	0		=			
ANR	2731682	UnaryOperationExpression	* flag		2731628	0					
ANR	2731683	UnaryOperator	*		2731628	0					
ANR	2731684	Identifier	flag		2731628	1					
ANR	2731685	PrimaryExpression	0		2731628	1					
ANR	2731686	IfStatement	if ( ! hexagon_verify_hw )		2731628	7					
ANR	2731687	Condition	! hexagon_verify_hw	2494:6:84379:84396	2731628	0	True				
ANR	2731688	UnaryOperationExpression	! hexagon_verify_hw		2731628	0					
ANR	2731689	UnaryOperator	!		2731628	0					
ANR	2731690	Identifier	hexagon_verify_hw		2731628	1					
ANR	2731691	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY ) )		2731628	1					
ANR	2731692	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )	2495:8:84407:84525	2731628	0	True				
ANR	2731693	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY )		2731628	0		&&			
ANR	2731694	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2731628	0		&			
ANR	2731695	PtrMemberAccess	operand -> flags		2731628	0					
ANR	2731696	Identifier	operand		2731628	0					
ANR	2731697	Identifier	flags		2731628	1					
ANR	2731698	Identifier	HEXAGON_OPERAND_IS_WRITE		2731628	1					
ANR	2731699	BitAndExpression	hexagon_supervisor_regs [ regn ] . flags & HEXAGON_REG_IS_READONLY		2731628	1		&			
ANR	2731700	MemberAccess	hexagon_supervisor_regs [ regn ] . flags		2731628	0					
ANR	2731701	ArrayIndexing	hexagon_supervisor_regs [ regn ]		2731628	0					
ANR	2731702	Identifier	hexagon_supervisor_regs		2731628	0					
ANR	2731703	Identifier	regn		2731628	1					
ANR	2731704	Identifier	flags		2731628	1					
ANR	2731705	Identifier	HEXAGON_REG_IS_READONLY		2731628	1					
ANR	2731706	CompoundStatement		16:6:395:395	2731628	1					
ANR	2731707	IfStatement	if ( errmsg )		2731628	0					
ANR	2731708	Condition	errmsg	2498:12:84548:84553	2731628	0	True				
ANR	2731709	Identifier	errmsg		2731628	0					
ANR	2731710	CompoundStatement		18:10:427:427	2731628	1					
ANR	2731711	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_supervisor_regs [ regn ] . name )"	2500:12:84580:84695	2731628	0	True				
ANR	2731712	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s'."" , hexagon_supervisor_regs [ regn ] . name )"		2731628	0					
ANR	2731713	Callee	sprintf		2731628	0					
ANR	2731714	Identifier	sprintf		2731628	0					
ANR	2731715	ArgumentList	buf		2731628	1					
ANR	2731716	Argument	buf		2731628	0					
ANR	2731717	Identifier	buf		2731628	0					
ANR	2731718	Argument	"""cannot write to read-only register `%s'."""		2731628	1					
ANR	2731719	PrimaryExpression	"""cannot write to read-only register `%s'."""		2731628	0					
ANR	2731720	Argument	hexagon_supervisor_regs [ regn ] . name		2731628	2					
ANR	2731721	MemberAccess	hexagon_supervisor_regs [ regn ] . name		2731628	0					
ANR	2731722	ArrayIndexing	hexagon_supervisor_regs [ regn ]		2731628	0					
ANR	2731723	Identifier	hexagon_supervisor_regs		2731628	0					
ANR	2731724	Identifier	regn		2731628	1					
ANR	2731725	Identifier	name		2731628	1					
ANR	2731726	ExpressionStatement	* errmsg = buf	2502:12:84709:84722	2731628	1	True				
ANR	2731727	AssignmentExpression	* errmsg = buf		2731628	0		=			
ANR	2731728	UnaryOperationExpression	* errmsg		2731628	0					
ANR	2731729	UnaryOperator	*		2731628	0					
ANR	2731730	Identifier	errmsg		2731628	1					
ANR	2731731	Identifier	buf		2731628	1					
ANR	2731732	IfStatement	if ( flag )		2731628	1					
ANR	2731733	Condition	flag	2504:12:84748:84751	2731628	0	True				
ANR	2731734	Identifier	flag		2731628	0					
ANR	2731735	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2505:10:84764:84799	2731628	1	True				
ANR	2731736	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2731628	0		|=			
ANR	2731737	UnaryOperationExpression	* flag		2731628	0					
ANR	2731738	UnaryOperator	*		2731628	0					
ANR	2731739	Identifier	flag		2731628	1					
ANR	2731740	Identifier	HEXAGON_OPERAND_IS_INVALID		2731628	1					
ANR	2731741	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg ) )"		2731628	8					
ANR	2731742	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"	2508:6:84816:84902	2731628	0	True				
ANR	2731743	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg , NULL , FALSE , FALSE , errmsg )"		2731628	0					
ANR	2731744	Callee	hexagon_encode_operand		2731628	0					
ANR	2731745	Identifier	hexagon_encode_operand		2731628	0					
ANR	2731746	ArgumentList	operand		2731628	1					
ANR	2731747	Argument	operand		2731628	0					
ANR	2731748	Identifier	operand		2731628	0					
ANR	2731749	Argument	insn		2731628	1					
ANR	2731750	Identifier	insn		2731628	0					
ANR	2731751	Argument	opcode		2731628	2					
ANR	2731752	Identifier	opcode		2731628	0					
ANR	2731753	Argument	reg		2731628	3					
ANR	2731754	Identifier	reg		2731628	0					
ANR	2731755	Argument	NULL		2731628	4					
ANR	2731756	Identifier	NULL		2731628	0					
ANR	2731757	Argument	FALSE		2731628	5					
ANR	2731758	Identifier	FALSE		2731628	0					
ANR	2731759	Argument	FALSE		2731628	6					
ANR	2731760	Identifier	FALSE		2731628	0					
ANR	2731761	Argument	errmsg		2731628	7					
ANR	2731762	Identifier	errmsg		2731628	0					
ANR	2731763	CompoundStatement		29:4:770:770	2731628	1					
ANR	2731764	IfStatement	if ( flag )		2731628	0					
ANR	2731765	Condition	flag	2511:10:84921:84924	2731628	0	True				
ANR	2731766	Identifier	flag		2731628	0					
ANR	2731767	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_SYSTEM	2512:8:84935:84969	2731628	1	True				
ANR	2731768	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_SYSTEM		2731628	0		|=			
ANR	2731769	UnaryOperationExpression	* flag		2731628	0					
ANR	2731770	UnaryOperator	*		2731628	0					
ANR	2731771	Identifier	flag		2731628	1					
ANR	2731772	Identifier	HEXAGON_OPERAND_IS_SYSTEM		2731628	1					
ANR	2731773	ExpressionStatement	* val = reg	2514:6:84978:84988	2731628	1	True				
ANR	2731774	AssignmentExpression	* val = reg		2731628	0		=			
ANR	2731775	UnaryOperationExpression	* val		2731628	0					
ANR	2731776	UnaryOperator	*		2731628	0					
ANR	2731777	Identifier	val		2731628	1					
ANR	2731778	Identifier	reg		2731628	1					
ANR	2731779	ReturnStatement	return ( input ) ;	2515:6:84996:85010	2731628	2	True				
ANR	2731780	Identifier	input		2731628	0					
ANR	2731781	ReturnStatement	return ( NULL ) ;	2518:2:85021:85034	2731628	9	True				
ANR	2731782	Identifier	NULL		2731628	0					
ANR	2731783	ReturnType	static char *		2731628	1					
ANR	2731784	Identifier	hexagon_parse_sreg		2731628	2					
ANR	2731785	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2731628	3					
ANR	2731786	Parameter	const hexagon_operand * operand	2480:1:84005:84034	2731628	0	True				
ANR	2731787	ParameterType	const hexagon_operand *		2731628	0					
ANR	2731788	Identifier	operand		2731628	1					
ANR	2731789	Parameter	hexagon_insn * insn	2480:33:84037:84054	2731628	1	True				
ANR	2731790	ParameterType	hexagon_insn *		2731628	0					
ANR	2731791	Identifier	insn		2731628	1					
ANR	2731792	Parameter	const hexagon_opcode * opcode	2480:53:84057:84084	2731628	2	True				
ANR	2731793	ParameterType	const hexagon_opcode *		2731628	0					
ANR	2731794	Identifier	opcode		2731628	1					
ANR	2731795	Parameter	char * input	2481:1:84088:84098	2731628	3	True				
ANR	2731796	ParameterType	char *		2731628	0					
ANR	2731797	Identifier	input		2731628	1					
ANR	2731798	Parameter	long * val	2481:14:84101:84109	2731628	4	True				
ANR	2731799	ParameterType	long *		2731628	0					
ANR	2731800	Identifier	val		2731628	1					
ANR	2731801	Parameter	int * flag	2481:25:84112:84120	2731628	5	True				
ANR	2731802	ParameterType	int *		2731628	0					
ANR	2731803	Identifier	flag		2731628	1					
ANR	2731804	Parameter	char * * errmsg	2481:36:84123:84135	2731628	6	True				
ANR	2731805	ParameterType	char * *		2731628	0					
ANR	2731806	Identifier	errmsg		2731628	1					
ANR	2731807	CFGEntryNode	ENTRY		2731628		True				
ANR	2731808	CFGExitNode	EXIT		2731628		True				
ANR	2731809	Symbol	flag		2731628						
ANR	2731810	Symbol	& regn		2731628						
ANR	2731811	Symbol	* operand		2731628						
ANR	2731812	Symbol	* hexagon_supervisor_regs		2731628						
ANR	2731813	Symbol	* val		2731628						
ANR	2731814	Symbol	opcode		2731628						
ANR	2731815	Symbol	& input		2731628						
ANR	2731816	Symbol	HEXAGON_OPERAND_IS_INVALID		2731628						
ANR	2731817	Symbol	reg		2731628						
ANR	2731818	Symbol	hexagon_reg_num		2731628						
ANR	2731819	Symbol	hexagon_verify_hw		2731628						
ANR	2731820	Symbol	hexagon_supervisor_regs_count		2731628						
ANR	2731821	Symbol	hexagon_supervisor_regs		2731628						
ANR	2731822	Symbol	val		2731628						
ANR	2731823	Symbol	NULL		2731628						
ANR	2731824	Symbol	HEXAGON_REG_IS_READONLY		2731628						
ANR	2731825	Symbol	HEXAGON_OPERAND_IS_WRITE		2731628						
ANR	2731826	Symbol	operand -> flags		2731628						
ANR	2731827	Symbol	errmsg		2731628						
ANR	2731828	Symbol	HEXAGON_OPERAND_IS_SYSTEM		2731628						
ANR	2731829	Symbol	regn		2731628						
ANR	2731830	Symbol	insn		2731628						
ANR	2731831	Symbol	input		2731628						
ANR	2731832	Symbol	buf		2731628						
ANR	2731833	Symbol	* regn		2731628						
ANR	2731834	Symbol	hexagon_supervisor_regs [ regn ] . name		2731628						
ANR	2731835	Symbol	hexagon_encode_operand		2731628						
ANR	2731836	Symbol	FALSE		2731628						
ANR	2731837	Symbol	* flag		2731628						
ANR	2731838	Symbol	* errmsg		2731628						
ANR	2731839	Symbol	operand		2731628						
ANR	2731840	Symbol	hexagon_supervisor_regs [ regn ] . flags		2731628						
ANR	2731841	Function	hexagon_parse_dsreg	2521:0:85039:87188							
ANR	2731842	FunctionDef	"hexagon_parse_dsreg (const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg)"		2731841	0					
ANR	2731843	CompoundStatement		2525:0:85207:87188	2731841	0					
ANR	2731844	Statement	static	2526:2:85211:85216	2731841	0	True				
ANR	2731845	IdentifierDeclStatement	char buf [ 100 ] ;	2526:9:85218:85232	2731841	1	True				
ANR	2731846	IdentifierDecl	buf [ 100 ]		2731841	0					
ANR	2731847	IdentifierDeclType	char [ 100 ]		2731841	0					
ANR	2731848	Identifier	buf		2731841	1					
ANR	2731849	PrimaryExpression	100		2731841	2					
ANR	2731850	IdentifierDeclStatement	"size_t rege , rego ;"	2527:2:85236:85253	2731841	2	True				
ANR	2731851	IdentifierDecl	rege		2731841	0					
ANR	2731852	IdentifierDeclType	size_t		2731841	0					
ANR	2731853	Identifier	rege		2731841	1					
ANR	2731854	IdentifierDecl	rego		2731841	1					
ANR	2731855	IdentifierDeclType	size_t		2731841	0					
ANR	2731856	Identifier	rego		2731841	1					
ANR	2731857	IdentifierDeclStatement	int reg_odd ;	2528:2:85257:85268	2731841	3	True				
ANR	2731858	IdentifierDecl	reg_odd		2731841	0					
ANR	2731859	IdentifierDeclType	int		2731841	0					
ANR	2731860	Identifier	reg_odd		2731841	1					
ANR	2731861	IdentifierDeclStatement	int reg_even ;	2529:2:85272:85284	2731841	4	True				
ANR	2731862	IdentifierDecl	reg_even		2731841	0					
ANR	2731863	IdentifierDeclType	int		2731841	0					
ANR	2731864	Identifier	reg_even		2731841	1					
ANR	2731865	ExpressionStatement	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"	2531:2:85289:85408	2731841	5	True				
ANR	2731866	AssignmentExpression	"reg_odd = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"		2731841	0		=			
ANR	2731867	Identifier	reg_odd		2731841	0					
ANR	2731868	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rego , '\\0' )"		2731841	1					
ANR	2731869	Callee	hexagon_reg_num		2731841	0					
ANR	2731870	Identifier	hexagon_reg_num		2731841	0					
ANR	2731871	ArgumentList	operand		2731841	1					
ANR	2731872	Argument	operand		2731841	0					
ANR	2731873	Identifier	operand		2731841	0					
ANR	2731874	Argument	& input		2731841	1					
ANR	2731875	UnaryOperationExpression	& input		2731841	0					
ANR	2731876	UnaryOperator	&		2731841	0					
ANR	2731877	Identifier	input		2731841	1					
ANR	2731878	Argument	'\\0'		2731841	2					
ANR	2731879	PrimaryExpression	'\\0'		2731841	0					
ANR	2731880	Argument	hexagon_supervisor_regs		2731841	3					
ANR	2731881	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2731882	Argument	hexagon_supervisor_regs_count		2731841	4					
ANR	2731883	Identifier	hexagon_supervisor_regs_count		2731841	0					
ANR	2731884	Argument	& rego		2731841	5					
ANR	2731885	UnaryOperationExpression	& rego		2731841	0					
ANR	2731886	UnaryOperator	&		2731841	0					
ANR	2731887	Identifier	rego		2731841	1					
ANR	2731888	Argument	'\\0'		2731841	6					
ANR	2731889	PrimaryExpression	'\\0'		2731841	0					
ANR	2731890	ExpressionStatement	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"	2532:2:85412:85530	2731841	6	True				
ANR	2731891	AssignmentExpression	"reg_even = hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"		2731841	0		=			
ANR	2731892	Identifier	reg_even		2731841	0					
ANR	2731893	CallExpression	"hexagon_reg_num ( operand , & input , '\\0' , hexagon_supervisor_regs , hexagon_supervisor_regs_count , & rege , 's' )"		2731841	1					
ANR	2731894	Callee	hexagon_reg_num		2731841	0					
ANR	2731895	Identifier	hexagon_reg_num		2731841	0					
ANR	2731896	ArgumentList	operand		2731841	1					
ANR	2731897	Argument	operand		2731841	0					
ANR	2731898	Identifier	operand		2731841	0					
ANR	2731899	Argument	& input		2731841	1					
ANR	2731900	UnaryOperationExpression	& input		2731841	0					
ANR	2731901	UnaryOperator	&		2731841	0					
ANR	2731902	Identifier	input		2731841	1					
ANR	2731903	Argument	'\\0'		2731841	2					
ANR	2731904	PrimaryExpression	'\\0'		2731841	0					
ANR	2731905	Argument	hexagon_supervisor_regs		2731841	3					
ANR	2731906	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2731907	Argument	hexagon_supervisor_regs_count		2731841	4					
ANR	2731908	Identifier	hexagon_supervisor_regs_count		2731841	0					
ANR	2731909	Argument	& rege		2731841	5					
ANR	2731910	UnaryOperationExpression	& rege		2731841	0					
ANR	2731911	UnaryOperator	&		2731841	0					
ANR	2731912	Identifier	rege		2731841	1					
ANR	2731913	Argument	's'		2731841	6					
ANR	2731914	PrimaryExpression	's'		2731841	0					
ANR	2731915	IfStatement	if ( reg_odd < 0 || reg_even < 0 )		2731841	7					
ANR	2731916	Condition	reg_odd < 0 || reg_even < 0	2533:6:85538:85564	2731841	0	True				
ANR	2731917	OrExpression	reg_odd < 0 || reg_even < 0		2731841	0		||			
ANR	2731918	RelationalExpression	reg_odd < 0		2731841	0		<			
ANR	2731919	Identifier	reg_odd		2731841	0					
ANR	2731920	PrimaryExpression	0		2731841	1					
ANR	2731921	RelationalExpression	reg_even < 0		2731841	1		<			
ANR	2731922	Identifier	reg_even		2731841	0					
ANR	2731923	PrimaryExpression	0		2731841	1					
ANR	2731924	ReturnStatement	return ( NULL ) ;	2534:4:85571:85584	2731841	1	True				
ANR	2731925	Identifier	NULL		2731841	0					
ANR	2731926	IfStatement	if ( reg_odd % 2 != 1 )		2731841	8					
ANR	2731927	Condition	reg_odd % 2 != 1	2537:6:85638:85653	2731841	0	True				
ANR	2731928	EqualityExpression	reg_odd % 2 != 1		2731841	0		!=			
ANR	2731929	MultiplicativeExpression	reg_odd % 2		2731841	0		%			
ANR	2731930	Identifier	reg_odd		2731841	0					
ANR	2731931	PrimaryExpression	2		2731841	1					
ANR	2731932	PrimaryExpression	1		2731841	1					
ANR	2731933	CompoundStatement		14:4:452:452	2731841	1					
ANR	2731934	IfStatement	if ( errmsg )		2731841	0					
ANR	2731935	Condition	errmsg	2539:10:85672:85677	2731841	0	True				
ANR	2731936	Identifier	errmsg		2731841	0					
ANR	2731937	CompoundStatement		16:8:480:480	2731841	1					
ANR	2731938	ExpressionStatement	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"	2541:12:85702:85759	2731841	0	True				
ANR	2731939	CallExpression	"sprintf ( buf , ""invalid odd register number: %d"" , reg_odd )"		2731841	0					
ANR	2731940	Callee	sprintf		2731841	0					
ANR	2731941	Identifier	sprintf		2731841	0					
ANR	2731942	ArgumentList	buf		2731841	1					
ANR	2731943	Argument	buf		2731841	0					
ANR	2731944	Identifier	buf		2731841	0					
ANR	2731945	Argument	"""invalid odd register number: %d"""		2731841	1					
ANR	2731946	PrimaryExpression	"""invalid odd register number: %d"""		2731841	0					
ANR	2731947	Argument	reg_odd		2731841	2					
ANR	2731948	Identifier	reg_odd		2731841	0					
ANR	2731949	ExpressionStatement	* errmsg = buf	2542:12:85773:85786	2731841	1	True				
ANR	2731950	AssignmentExpression	* errmsg = buf		2731841	0		=			
ANR	2731951	UnaryOperationExpression	* errmsg		2731841	0					
ANR	2731952	UnaryOperator	*		2731841	0					
ANR	2731953	Identifier	errmsg		2731841	1					
ANR	2731954	Identifier	buf		2731841	1					
ANR	2731955	ReturnStatement	return NULL ;	2544:6:85804:85815	2731841	1	True				
ANR	2731956	Identifier	NULL		2731841	0					
ANR	2731957	IfStatement	if ( reg_even % 2 != 0 )		2731841	9					
ANR	2731958	Condition	reg_even % 2 != 0	2548:6:85876:85892	2731841	0	True				
ANR	2731959	EqualityExpression	reg_even % 2 != 0		2731841	0		!=			
ANR	2731960	MultiplicativeExpression	reg_even % 2		2731841	0		%			
ANR	2731961	Identifier	reg_even		2731841	0					
ANR	2731962	PrimaryExpression	2		2731841	1					
ANR	2731963	PrimaryExpression	0		2731841	1					
ANR	2731964	CompoundStatement		25:4:691:691	2731841	1					
ANR	2731965	IfStatement	if ( errmsg )		2731841	0					
ANR	2731966	Condition	errmsg	2550:10:85911:85916	2731841	0	True				
ANR	2731967	Identifier	errmsg		2731841	0					
ANR	2731968	CompoundStatement		27:8:719:719	2731841	1					
ANR	2731969	ExpressionStatement	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"	2552:12:85941:86000	2731841	0	True				
ANR	2731970	CallExpression	"sprintf ( buf , ""invalid even register number: %d"" , reg_even )"		2731841	0					
ANR	2731971	Callee	sprintf		2731841	0					
ANR	2731972	Identifier	sprintf		2731841	0					
ANR	2731973	ArgumentList	buf		2731841	1					
ANR	2731974	Argument	buf		2731841	0					
ANR	2731975	Identifier	buf		2731841	0					
ANR	2731976	Argument	"""invalid even register number: %d"""		2731841	1					
ANR	2731977	PrimaryExpression	"""invalid even register number: %d"""		2731841	0					
ANR	2731978	Argument	reg_even		2731841	2					
ANR	2731979	Identifier	reg_even		2731841	0					
ANR	2731980	ExpressionStatement	* errmsg = buf	2553:12:86014:86027	2731841	1	True				
ANR	2731981	AssignmentExpression	* errmsg = buf		2731841	0		=			
ANR	2731982	UnaryOperationExpression	* errmsg		2731841	0					
ANR	2731983	UnaryOperator	*		2731841	0					
ANR	2731984	Identifier	errmsg		2731841	1					
ANR	2731985	Identifier	buf		2731841	1					
ANR	2731986	ReturnStatement	return NULL ;	2555:6:86045:86056	2731841	1	True				
ANR	2731987	Identifier	NULL		2731841	0					
ANR	2731988	IfStatement	if ( reg_odd != reg_even + 1 )		2731841	10					
ANR	2731989	Condition	reg_odd != reg_even + 1	2559:6:86119:86141	2731841	0	True				
ANR	2731990	EqualityExpression	reg_odd != reg_even + 1		2731841	0		!=			
ANR	2731991	Identifier	reg_odd		2731841	0					
ANR	2731992	AdditiveExpression	reg_even + 1		2731841	1		+			
ANR	2731993	Identifier	reg_even		2731841	0					
ANR	2731994	PrimaryExpression	1		2731841	1					
ANR	2731995	CompoundStatement		36:4:940:940	2731841	1					
ANR	2731996	IfStatement	if ( errmsg )		2731841	0					
ANR	2731997	Condition	errmsg	2561:10:86160:86165	2731841	0	True				
ANR	2731998	Identifier	errmsg		2731841	0					
ANR	2731999	CompoundStatement		38:8:968:968	2731841	1					
ANR	2732000	ExpressionStatement	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"	2563:12:86190:86283	2731841	0	True				
ANR	2732001	CallExpression	"sprintf ( buf , ""registers must be consecutive: %d:%d"" , reg_odd , reg_even )"		2731841	0					
ANR	2732002	Callee	sprintf		2731841	0					
ANR	2732003	Identifier	sprintf		2731841	0					
ANR	2732004	ArgumentList	buf		2731841	1					
ANR	2732005	Argument	buf		2731841	0					
ANR	2732006	Identifier	buf		2731841	0					
ANR	2732007	Argument	"""registers must be consecutive: %d:%d"""		2731841	1					
ANR	2732008	PrimaryExpression	"""registers must be consecutive: %d:%d"""		2731841	0					
ANR	2732009	Argument	reg_odd		2731841	2					
ANR	2732010	Identifier	reg_odd		2731841	0					
ANR	2732011	Argument	reg_even		2731841	3					
ANR	2732012	Identifier	reg_even		2731841	0					
ANR	2732013	ExpressionStatement	* errmsg = buf	2565:12:86297:86310	2731841	1	True				
ANR	2732014	AssignmentExpression	* errmsg = buf		2731841	0		=			
ANR	2732015	UnaryOperationExpression	* errmsg		2731841	0					
ANR	2732016	UnaryOperator	*		2731841	0					
ANR	2732017	Identifier	errmsg		2731841	1					
ANR	2732018	Identifier	buf		2731841	1					
ANR	2732019	ReturnStatement	return NULL ;	2567:6:86328:86339	2731841	1	True				
ANR	2732020	Identifier	NULL		2731841	0					
ANR	2732021	IfStatement	if ( flag )		2731841	11					
ANR	2732022	Condition	flag	2570:6:86354:86357	2731841	0	True				
ANR	2732023	Identifier	flag		2731841	0					
ANR	2732024	ExpressionStatement	* flag = 0	2571:4:86364:86373	2731841	1	True				
ANR	2732025	AssignmentExpression	* flag = 0		2731841	0		=			
ANR	2732026	UnaryOperationExpression	* flag		2731841	0					
ANR	2732027	UnaryOperator	*		2731841	0					
ANR	2732028	Identifier	flag		2731841	1					
ANR	2732029	PrimaryExpression	0		2731841	1					
ANR	2732030	IfStatement	if ( ! hexagon_verify_hw )		2731841	12					
ANR	2732031	Condition	! hexagon_verify_hw	2573:6:86382:86399	2731841	0	True				
ANR	2732032	UnaryOperationExpression	! hexagon_verify_hw		2731841	0					
ANR	2732033	UnaryOperator	!		2731841	0					
ANR	2732034	Identifier	hexagon_verify_hw		2731841	1					
ANR	2732035	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) ) )		2731841	1					
ANR	2732036	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )	2574:8:86410:86610	2731841	0	True				
ANR	2732037	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY ) )		2731841	0		&&			
ANR	2732038	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2731841	0		&			
ANR	2732039	PtrMemberAccess	operand -> flags		2731841	0					
ANR	2732040	Identifier	operand		2731841	0					
ANR	2732041	Identifier	flags		2731841	1					
ANR	2732042	Identifier	HEXAGON_OPERAND_IS_WRITE		2731841	1					
ANR	2732043	OrExpression	( hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY ) || ( hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY )		2731841	1		||			
ANR	2732044	BitAndExpression	hexagon_supervisor_regs [ rege ] . flags & HEXAGON_REG_IS_READONLY		2731841	0		&			
ANR	2732045	MemberAccess	hexagon_supervisor_regs [ rege ] . flags		2731841	0					
ANR	2732046	ArrayIndexing	hexagon_supervisor_regs [ rege ]		2731841	0					
ANR	2732047	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2732048	Identifier	rege		2731841	1					
ANR	2732049	Identifier	flags		2731841	1					
ANR	2732050	Identifier	HEXAGON_REG_IS_READONLY		2731841	1					
ANR	2732051	BitAndExpression	hexagon_supervisor_regs [ rego ] . flags & HEXAGON_REG_IS_READONLY		2731841	1		&			
ANR	2732052	MemberAccess	hexagon_supervisor_regs [ rego ] . flags		2731841	0					
ANR	2732053	ArrayIndexing	hexagon_supervisor_regs [ rego ]		2731841	0					
ANR	2732054	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2732055	Identifier	rego		2731841	1					
ANR	2732056	Identifier	flags		2731841	1					
ANR	2732057	Identifier	HEXAGON_REG_IS_READONLY		2731841	1					
ANR	2732058	CompoundStatement		53:6:1411:1411	2731841	1					
ANR	2732059	IfStatement	if ( errmsg )		2731841	0					
ANR	2732060	Condition	errmsg	2578:12:86633:86638	2731841	0	True				
ANR	2732061	Identifier	errmsg		2731841	0					
ANR	2732062	CompoundStatement		55:10:1443:1443	2731841	1					
ANR	2732063	ExpressionStatement	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_supervisor_regs [ rego ] . name , hexagon_supervisor_regs [ rege ] . name )"	2580:12:86665:86841	2731841	0	True				
ANR	2732064	CallExpression	"sprintf ( buf , ""cannot write to read-only register `%s:%s'."" , hexagon_supervisor_regs [ rego ] . name , hexagon_supervisor_regs [ rege ] . name )"		2731841	0					
ANR	2732065	Callee	sprintf		2731841	0					
ANR	2732066	Identifier	sprintf		2731841	0					
ANR	2732067	ArgumentList	buf		2731841	1					
ANR	2732068	Argument	buf		2731841	0					
ANR	2732069	Identifier	buf		2731841	0					
ANR	2732070	Argument	"""cannot write to read-only register `%s:%s'."""		2731841	1					
ANR	2732071	PrimaryExpression	"""cannot write to read-only register `%s:%s'."""		2731841	0					
ANR	2732072	Argument	hexagon_supervisor_regs [ rego ] . name		2731841	2					
ANR	2732073	MemberAccess	hexagon_supervisor_regs [ rego ] . name		2731841	0					
ANR	2732074	ArrayIndexing	hexagon_supervisor_regs [ rego ]		2731841	0					
ANR	2732075	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2732076	Identifier	rego		2731841	1					
ANR	2732077	Identifier	name		2731841	1					
ANR	2732078	Argument	hexagon_supervisor_regs [ rege ] . name		2731841	3					
ANR	2732079	MemberAccess	hexagon_supervisor_regs [ rege ] . name		2731841	0					
ANR	2732080	ArrayIndexing	hexagon_supervisor_regs [ rege ]		2731841	0					
ANR	2732081	Identifier	hexagon_supervisor_regs		2731841	0					
ANR	2732082	Identifier	rege		2731841	1					
ANR	2732083	Identifier	name		2731841	1					
ANR	2732084	ExpressionStatement	* errmsg = buf	2583:12:86855:86868	2731841	1	True				
ANR	2732085	AssignmentExpression	* errmsg = buf		2731841	0		=			
ANR	2732086	UnaryOperationExpression	* errmsg		2731841	0					
ANR	2732087	UnaryOperator	*		2731841	0					
ANR	2732088	Identifier	errmsg		2731841	1					
ANR	2732089	Identifier	buf		2731841	1					
ANR	2732090	IfStatement	if ( flag )		2731841	1					
ANR	2732091	Condition	flag	2585:12:86894:86897	2731841	0	True				
ANR	2732092	Identifier	flag		2731841	0					
ANR	2732093	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_INVALID	2586:10:86910:86945	2731841	1	True				
ANR	2732094	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_INVALID		2731841	0		|=			
ANR	2732095	UnaryOperationExpression	* flag		2731841	0					
ANR	2732096	UnaryOperator	*		2731841	0					
ANR	2732097	Identifier	flag		2731841	1					
ANR	2732098	Identifier	HEXAGON_OPERAND_IS_INVALID		2731841	1					
ANR	2732099	IfStatement	"if ( hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg ) )"		2731841	13					
ANR	2732100	Condition	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"	2589:6:86962:87053	2731841	0	True				
ANR	2732101	CallExpression	"hexagon_encode_operand ( operand , insn , opcode , reg_even , NULL , FALSE , FALSE , errmsg )"		2731841	0					
ANR	2732102	Callee	hexagon_encode_operand		2731841	0					
ANR	2732103	Identifier	hexagon_encode_operand		2731841	0					
ANR	2732104	ArgumentList	operand		2731841	1					
ANR	2732105	Argument	operand		2731841	0					
ANR	2732106	Identifier	operand		2731841	0					
ANR	2732107	Argument	insn		2731841	1					
ANR	2732108	Identifier	insn		2731841	0					
ANR	2732109	Argument	opcode		2731841	2					
ANR	2732110	Identifier	opcode		2731841	0					
ANR	2732111	Argument	reg_even		2731841	3					
ANR	2732112	Identifier	reg_even		2731841	0					
ANR	2732113	Argument	NULL		2731841	4					
ANR	2732114	Identifier	NULL		2731841	0					
ANR	2732115	Argument	FALSE		2731841	5					
ANR	2732116	Identifier	FALSE		2731841	0					
ANR	2732117	Argument	FALSE		2731841	6					
ANR	2732118	Identifier	FALSE		2731841	0					
ANR	2732119	Argument	errmsg		2731841	7					
ANR	2732120	Identifier	errmsg		2731841	0					
ANR	2732121	CompoundStatement		67:4:1852:1852	2731841	1					
ANR	2732122	IfStatement	if ( flag )		2731841	0					
ANR	2732123	Condition	flag	2592:10:87072:87075	2731841	0	True				
ANR	2732124	Identifier	flag		2731841	0					
ANR	2732125	ExpressionStatement	* flag |= HEXAGON_OPERAND_IS_PAIR	2593:8:87086:87118	2731841	1	True				
ANR	2732126	AssignmentExpression	* flag |= HEXAGON_OPERAND_IS_PAIR		2731841	0		|=			
ANR	2732127	UnaryOperationExpression	* flag		2731841	0					
ANR	2732128	UnaryOperator	*		2731841	0					
ANR	2732129	Identifier	flag		2731841	1					
ANR	2732130	Identifier	HEXAGON_OPERAND_IS_PAIR		2731841	1					
ANR	2732131	ExpressionStatement	* val = reg_even	2595:6:87127:87142	2731841	1	True				
ANR	2732132	AssignmentExpression	* val = reg_even		2731841	0		=			
ANR	2732133	UnaryOperationExpression	* val		2731841	0					
ANR	2732134	UnaryOperator	*		2731841	0					
ANR	2732135	Identifier	val		2731841	1					
ANR	2732136	Identifier	reg_even		2731841	1					
ANR	2732137	ReturnStatement	return ( input ) ;	2596:6:87150:87164	2731841	2	True				
ANR	2732138	Identifier	input		2731841	0					
ANR	2732139	ReturnStatement	return NULL ;	2599:2:87175:87186	2731841	14	True				
ANR	2732140	Identifier	NULL		2731841	0					
ANR	2732141	ReturnType	static char *		2731841	1					
ANR	2732142	Identifier	hexagon_parse_dsreg		2731841	2					
ANR	2732143	ParameterList	"const hexagon_operand * operand , hexagon_insn * insn , const hexagon_opcode * opcode , char * input , long * val , int * flag , char * * errmsg"		2731841	3					
ANR	2732144	Parameter	const hexagon_operand * operand	2523:1:85074:85103	2731841	0	True				
ANR	2732145	ParameterType	const hexagon_operand *		2731841	0					
ANR	2732146	Identifier	operand		2731841	1					
ANR	2732147	Parameter	hexagon_insn * insn	2523:33:85106:85123	2731841	1	True				
ANR	2732148	ParameterType	hexagon_insn *		2731841	0					
ANR	2732149	Identifier	insn		2731841	1					
ANR	2732150	Parameter	const hexagon_opcode * opcode	2523:53:85126:85153	2731841	2	True				
ANR	2732151	ParameterType	const hexagon_opcode *		2731841	0					
ANR	2732152	Identifier	opcode		2731841	1					
ANR	2732153	Parameter	char * input	2524:1:85157:85167	2731841	3	True				
ANR	2732154	ParameterType	char *		2731841	0					
ANR	2732155	Identifier	input		2731841	1					
ANR	2732156	Parameter	long * val	2524:14:85170:85178	2731841	4	True				
ANR	2732157	ParameterType	long *		2731841	0					
ANR	2732158	Identifier	val		2731841	1					
ANR	2732159	Parameter	int * flag	2524:25:85181:85189	2731841	5	True				
ANR	2732160	ParameterType	int *		2731841	0					
ANR	2732161	Identifier	flag		2731841	1					
ANR	2732162	Parameter	char * * errmsg	2524:36:85192:85204	2731841	6	True				
ANR	2732163	ParameterType	char * *		2731841	0					
ANR	2732164	Identifier	errmsg		2731841	1					
ANR	2732165	CFGEntryNode	ENTRY		2731841		True				
ANR	2732166	CFGExitNode	EXIT		2731841		True				
ANR	2732167	Symbol	hexagon_supervisor_regs [ rego ] . name		2731841						
ANR	2732168	Symbol	flag		2731841						
ANR	2732169	Symbol	& rego		2731841						
ANR	2732170	Symbol	* operand		2731841						
ANR	2732171	Symbol	* hexagon_supervisor_regs		2731841						
ANR	2732172	Symbol	hexagon_supervisor_regs [ rege ] . flags		2731841						
ANR	2732173	Symbol	* val		2731841						
ANR	2732174	Symbol	opcode		2731841						
ANR	2732175	Symbol	hexagon_supervisor_regs [ rego ] . flags		2731841						
ANR	2732176	Symbol	& input		2731841						
ANR	2732177	Symbol	HEXAGON_OPERAND_IS_INVALID		2731841						
ANR	2732178	Symbol	hexagon_reg_num		2731841						
ANR	2732179	Symbol	hexagon_verify_hw		2731841						
ANR	2732180	Symbol	hexagon_supervisor_regs [ rege ] . name		2731841						
ANR	2732181	Symbol	hexagon_supervisor_regs_count		2731841						
ANR	2732182	Symbol	& rege		2731841						
ANR	2732183	Symbol	HEXAGON_OPERAND_IS_PAIR		2731841						
ANR	2732184	Symbol	hexagon_supervisor_regs		2731841						
ANR	2732185	Symbol	val		2731841						
ANR	2732186	Symbol	NULL		2731841						
ANR	2732187	Symbol	HEXAGON_OPERAND_IS_WRITE		2731841						
ANR	2732188	Symbol	HEXAGON_REG_IS_READONLY		2731841						
ANR	2732189	Symbol	rege		2731841						
ANR	2732190	Symbol	* rege		2731841						
ANR	2732191	Symbol	operand -> flags		2731841						
ANR	2732192	Symbol	errmsg		2731841						
ANR	2732193	Symbol	reg_even		2731841						
ANR	2732194	Symbol	rego		2731841						
ANR	2732195	Symbol	insn		2731841						
ANR	2732196	Symbol	input		2731841						
ANR	2732197	Symbol	buf		2731841						
ANR	2732198	Symbol	* rego		2731841						
ANR	2732199	Symbol	hexagon_encode_operand		2731841						
ANR	2732200	Symbol	FALSE		2731841						
ANR	2732201	Symbol	reg_odd		2731841						
ANR	2732202	Symbol	* errmsg		2731841						
ANR	2732203	Symbol	* flag		2731841						
ANR	2732204	Symbol	operand		2731841						
ANR	2732205	Function	hexagon_encode_mask	2609:0:87400:87766							
ANR	2732206	FunctionDef	hexagon_encode_mask (char * enc)		2732205	0					
ANR	2732207	CompoundStatement		2612:0:87445:87766	2732205	0					
ANR	2732208	IdentifierDeclStatement	hexagon_insn mask ;	2613:2:87449:87466	2732205	0	True				
ANR	2732209	IdentifierDecl	mask		2732205	0					
ANR	2732210	IdentifierDeclType	hexagon_insn		2732205	0					
ANR	2732211	Identifier	mask		2732205	1					
ANR	2732212	IdentifierDeclStatement	int num_bits ;	2614:2:87470:87482	2732205	1	True				
ANR	2732213	IdentifierDecl	num_bits		2732205	0					
ANR	2732214	IdentifierDeclType	int		2732205	0					
ANR	2732215	Identifier	num_bits		2732205	1					
ANR	2732216	ForStatement	"for ( mask = 0 , num_bits = 0 ; * enc ; enc ++ )"		2732205	2					
ANR	2732217	ForInit	"mask = 0 , num_bits = 0 ;"	2616:7:87492:87514	2732205	0	True				
ANR	2732218	Expression	"mask = 0 , num_bits = 0"		2732205	0					
ANR	2732219	AssignmentExpression	mask = 0		2732205	0		=			
ANR	2732220	Identifier	mask		2732205	0					
ANR	2732221	PrimaryExpression	0		2732205	1					
ANR	2732222	AssignmentExpression	num_bits = 0		2732205	1		=			
ANR	2732223	Identifier	num_bits		2732205	0					
ANR	2732224	PrimaryExpression	0		2732205	1					
ANR	2732225	Condition	* enc	2616:31:87516:87519	2732205	1	True				
ANR	2732226	UnaryOperationExpression	* enc		2732205	0					
ANR	2732227	UnaryOperator	*		2732205	0					
ANR	2732228	Identifier	enc		2732205	1					
ANR	2732229	PostIncDecOperationExpression	enc ++	2616:37:87522:87526	2732205	2	True				
ANR	2732230	Identifier	enc		2732205	0					
ANR	2732231	IncDec	++		2732205	1					
ANR	2732232	CompoundStatement		6:4:87:87	2732205	3					
ANR	2732233	WhileStatement	while ( ISSPACE ( * enc ) )		2732205	0					
ANR	2732234	Condition	ISSPACE ( * enc )	2618:13:87548:87561	2732205	0	True				
ANR	2732235	CallExpression	ISSPACE ( * enc )		2732205	0					
ANR	2732236	Callee	ISSPACE		2732205	0					
ANR	2732237	Identifier	ISSPACE		2732205	0					
ANR	2732238	ArgumentList	* enc		2732205	1					
ANR	2732239	Argument	* enc		2732205	0					
ANR	2732240	UnaryOperationExpression	* enc		2732205	0					
ANR	2732241	UnaryOperator	*		2732205	0					
ANR	2732242	Identifier	enc		2732205	1					
ANR	2732243	ExpressionStatement	enc ++	2619:8:87572:87577	2732205	1	True				
ANR	2732244	PostIncDecOperationExpression	enc ++		2732205	0					
ANR	2732245	Identifier	enc		2732205	0					
ANR	2732246	IncDec	++		2732205	1					
ANR	2732247	IfStatement	if ( ! * enc )		2732205	1					
ANR	2732248	Condition	! * enc	2621:10:87590:87594	2732205	0	True				
ANR	2732249	UnaryOperationExpression	! * enc		2732205	0					
ANR	2732250	UnaryOperator	!		2732205	0					
ANR	2732251	UnaryOperationExpression	* enc		2732205	1					
ANR	2732252	UnaryOperator	*		2732205	0					
ANR	2732253	Identifier	enc		2732205	1					
ANR	2732254	BreakStatement	break ;	2622:8:87605:87610	2732205	1	True				
ANR	2732255	ExpressionStatement	mask = ( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )	2624:6:87619:87676	2732205	2	True				
ANR	2732256	AssignmentExpression	mask = ( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )		2732205	0		=			
ANR	2732257	Identifier	mask		2732205	0					
ANR	2732258	AdditiveExpression	( mask << 1 ) + ( ( * enc == '1' || * enc == '0' ) ? 1 : 0 )		2732205	1		+			
ANR	2732259	ShiftExpression	mask << 1		2732205	0		<<			
ANR	2732260	Identifier	mask		2732205	0					
ANR	2732261	PrimaryExpression	1		2732205	1					
ANR	2732262	ConditionalExpression	( * enc == '1' || * enc == '0' ) ? 1 : 0		2732205	1					
ANR	2732263	Condition	* enc == '1' || * enc == '0'		2732205	0					
ANR	2732264	OrExpression	* enc == '1' || * enc == '0'		2732205	0		||			
ANR	2732265	EqualityExpression	* enc == '1'		2732205	0		==			
ANR	2732266	UnaryOperationExpression	* enc		2732205	0					
ANR	2732267	UnaryOperator	*		2732205	0					
ANR	2732268	Identifier	enc		2732205	1					
ANR	2732269	PrimaryExpression	'1'		2732205	1					
ANR	2732270	EqualityExpression	* enc == '0'		2732205	1		==			
ANR	2732271	UnaryOperationExpression	* enc		2732205	0					
ANR	2732272	UnaryOperator	*		2732205	0					
ANR	2732273	Identifier	enc		2732205	1					
ANR	2732274	PrimaryExpression	'0'		2732205	1					
ANR	2732275	PrimaryExpression	1		2732205	1					
ANR	2732276	PrimaryExpression	0		2732205	2					
ANR	2732277	ExpressionStatement	num_bits ++	2626:6:87685:87695	2732205	3	True				
ANR	2732278	PostIncDecOperationExpression	num_bits ++		2732205	0					
ANR	2732279	Identifier	num_bits		2732205	0					
ANR	2732280	IncDec	++		2732205	1					
ANR	2732281	ExpressionStatement	assert ( num_bits == HEXAGON_INSN_LEN * 8 )	2629:2:87706:87747	2732205	3	True				
ANR	2732282	CallExpression	assert ( num_bits == HEXAGON_INSN_LEN * 8 )		2732205	0					
ANR	2732283	Callee	assert		2732205	0					
ANR	2732284	Identifier	assert		2732205	0					
ANR	2732285	ArgumentList	num_bits == HEXAGON_INSN_LEN * 8		2732205	1					
ANR	2732286	Argument	num_bits == HEXAGON_INSN_LEN * 8		2732205	0					
ANR	2732287	EqualityExpression	num_bits == HEXAGON_INSN_LEN * 8		2732205	0		==			
ANR	2732288	Identifier	num_bits		2732205	0					
ANR	2732289	MultiplicativeExpression	HEXAGON_INSN_LEN * 8		2732205	1		*			
ANR	2732290	Identifier	HEXAGON_INSN_LEN		2732205	0					
ANR	2732291	PrimaryExpression	8		2732205	1					
ANR	2732292	ReturnStatement	return ( mask ) ;	2630:2:87751:87764	2732205	4	True				
ANR	2732293	Identifier	mask		2732205	0					
ANR	2732294	ReturnType	hexagon_insn		2732205	1					
ANR	2732295	Identifier	hexagon_encode_mask		2732205	2					
ANR	2732296	ParameterList	char * enc		2732205	3					
ANR	2732297	Parameter	char * enc	2611:1:87434:87442	2732205	0	True				
ANR	2732298	ParameterType	char *		2732205	0					
ANR	2732299	Identifier	enc		2732205	1					
ANR	2732300	CFGEntryNode	ENTRY		2732205		True				
ANR	2732301	CFGExitNode	EXIT		2732205		True				
ANR	2732302	Symbol	HEXAGON_INSN_LEN		2732205						
ANR	2732303	Symbol	enc		2732205						
ANR	2732304	Symbol	* enc		2732205						
ANR	2732305	Symbol	num_bits		2732205						
ANR	2732306	Symbol	ISSPACE		2732205						
ANR	2732307	Symbol	mask		2732205						
ANR	2732308	Function	hexagon_lookup_operand	2633:0:87769:88220							
ANR	2732309	FunctionDef	hexagon_lookup_operand (const char * name)		2732308	0					
ANR	2732310	CompoundStatement		2636:0:87835:88220	2732308	0					
ANR	2732311	IdentifierDeclStatement	"size_t op_len , fm_len ;"	2637:2:87839:87860	2732308	0	True				
ANR	2732312	IdentifierDecl	op_len		2732308	0					
ANR	2732313	IdentifierDeclType	size_t		2732308	0					
ANR	2732314	Identifier	op_len		2732308	1					
ANR	2732315	IdentifierDecl	fm_len		2732308	1					
ANR	2732316	IdentifierDeclType	size_t		2732308	0					
ANR	2732317	Identifier	fm_len		2732308	1					
ANR	2732318	IdentifierDeclStatement	size_t i ;	2638:2:87864:87872	2732308	1	True				
ANR	2732319	IdentifierDecl	i		2732308	0					
ANR	2732320	IdentifierDeclType	size_t		2732308	0					
ANR	2732321	Identifier	i		2732308	1					
ANR	2732322	ExpressionStatement	"op_len = strcspn ( name , "" .,"" )"	2641:2:87941:87971	2732308	2	True				
ANR	2732323	AssignmentExpression	"op_len = strcspn ( name , "" .,"" )"		2732308	0		=			
ANR	2732324	Identifier	op_len		2732308	0					
ANR	2732325	CallExpression	"strcspn ( name , "" .,"" )"		2732308	1					
ANR	2732326	Callee	strcspn		2732308	0					
ANR	2732327	Identifier	strcspn		2732308	0					
ANR	2732328	ArgumentList	name		2732308	1					
ANR	2732329	Argument	name		2732308	0					
ANR	2732330	Identifier	name		2732308	0					
ANR	2732331	Argument	""" .,"""		2732308	1					
ANR	2732332	PrimaryExpression	""" .,"""		2732308	0					
ANR	2732333	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		2732308	3					
ANR	2732334	ForInit	i = 0 ;	2643:7:87981:87986	2732308	0	True				
ANR	2732335	AssignmentExpression	i = 0		2732308	0		=			
ANR	2732336	Identifier	i		2732308	0					
ANR	2732337	PrimaryExpression	0		2732308	1					
ANR	2732338	Condition	i < hexagon_operand_count	2643:14:87988:88012	2732308	1	True				
ANR	2732339	RelationalExpression	i < hexagon_operand_count		2732308	0		<			
ANR	2732340	Identifier	i		2732308	0					
ANR	2732341	Identifier	hexagon_operand_count		2732308	1					
ANR	2732342	PostIncDecOperationExpression	i ++	2643:41:88015:88017	2732308	2	True				
ANR	2732343	Identifier	i		2732308	0					
ANR	2732344	IncDec	++		2732308	1					
ANR	2732345	CompoundStatement		9:4:188:188	2732308	3					
ANR	2732346	ExpressionStatement	fm_len = strlen ( hexagon_operands [ i ] . fmt )	2645:6:88032:88075	2732308	0	True				
ANR	2732347	AssignmentExpression	fm_len = strlen ( hexagon_operands [ i ] . fmt )		2732308	0		=			
ANR	2732348	Identifier	fm_len		2732308	0					
ANR	2732349	CallExpression	strlen ( hexagon_operands [ i ] . fmt )		2732308	1					
ANR	2732350	Callee	strlen		2732308	0					
ANR	2732351	Identifier	strlen		2732308	0					
ANR	2732352	ArgumentList	hexagon_operands [ i ] . fmt		2732308	1					
ANR	2732353	Argument	hexagon_operands [ i ] . fmt		2732308	0					
ANR	2732354	MemberAccess	hexagon_operands [ i ] . fmt		2732308	0					
ANR	2732355	ArrayIndexing	hexagon_operands [ i ]		2732308	0					
ANR	2732356	Identifier	hexagon_operands		2732308	0					
ANR	2732357	Identifier	i		2732308	1					
ANR	2732358	Identifier	fmt		2732308	1					
ANR	2732359	IfStatement	"if ( op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len ) )"		2732308	1					
ANR	2732360	Condition	"op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"	2647:10:88088:88156	2732308	0	True				
ANR	2732361	AndExpression	"op_len == fm_len && ! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		2732308	0		&&			
ANR	2732362	EqualityExpression	op_len == fm_len		2732308	0		==			
ANR	2732363	Identifier	op_len		2732308	0					
ANR	2732364	Identifier	fm_len		2732308	1					
ANR	2732365	UnaryOperationExpression	"! strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		2732308	1					
ANR	2732366	UnaryOperator	!		2732308	0					
ANR	2732367	CallExpression	"strncmp ( name , hexagon_operands [ i ] . fmt , op_len )"		2732308	1					
ANR	2732368	Callee	strncmp		2732308	0					
ANR	2732369	Identifier	strncmp		2732308	0					
ANR	2732370	ArgumentList	name		2732308	1					
ANR	2732371	Argument	name		2732308	0					
ANR	2732372	Identifier	name		2732308	0					
ANR	2732373	Argument	hexagon_operands [ i ] . fmt		2732308	1					
ANR	2732374	MemberAccess	hexagon_operands [ i ] . fmt		2732308	0					
ANR	2732375	ArrayIndexing	hexagon_operands [ i ]		2732308	0					
ANR	2732376	Identifier	hexagon_operands		2732308	0					
ANR	2732377	Identifier	i		2732308	1					
ANR	2732378	Identifier	fmt		2732308	1					
ANR	2732379	Argument	op_len		2732308	2					
ANR	2732380	Identifier	op_len		2732308	0					
ANR	2732381	ReturnStatement	return ( hexagon_operands + i ) ;	2648:8:88167:88196	2732308	1	True				
ANR	2732382	AdditiveExpression	hexagon_operands + i		2732308	0		+			
ANR	2732383	Identifier	hexagon_operands		2732308	0					
ANR	2732384	Identifier	i		2732308	1					
ANR	2732385	ReturnStatement	return NULL ;	2651:2:88207:88218	2732308	4	True				
ANR	2732386	Identifier	NULL		2732308	0					
ANR	2732387	ReturnType	const hexagon_operand *		2732308	1					
ANR	2732388	Identifier	hexagon_lookup_operand		2732308	2					
ANR	2732389	ParameterList	const char * name		2732308	3					
ANR	2732390	Parameter	const char * name	2635:1:87817:87832	2732308	0	True				
ANR	2732391	ParameterType	const char *		2732308	0					
ANR	2732392	Identifier	name		2732308	1					
ANR	2732393	CFGEntryNode	ENTRY		2732308		True				
ANR	2732394	CFGExitNode	EXIT		2732308		True				
ANR	2732395	Symbol	NULL		2732308						
ANR	2732396	Symbol	* hexagon_operands		2732308						
ANR	2732397	Symbol	fm_len		2732308						
ANR	2732398	Symbol	hexagon_operands		2732308						
ANR	2732399	Symbol	i		2732308						
ANR	2732400	Symbol	strcspn		2732308						
ANR	2732401	Symbol	strlen		2732308						
ANR	2732402	Symbol	strncmp		2732308						
ANR	2732403	Symbol	hexagon_operand_count		2732308						
ANR	2732404	Symbol	* i		2732308						
ANR	2732405	Symbol	op_len		2732308						
ANR	2732406	Symbol	name		2732308						
ANR	2732407	Symbol	hexagon_operands [ i ] . fmt		2732308						
ANR	2732408	Function	hexagon_lookup_reloc	2654:0:88223:89616							
ANR	2732409	FunctionDef	"hexagon_lookup_reloc (bfd_reloc_code_real_type reloc_type , int flags , const hexagon_opcode * opcode)"		2732408	0					
ANR	2732410	CompoundStatement		2657:0:88347:89616	2732408	0					
ANR	2732411	IdentifierDeclStatement	bfd_reloc_code_real_type r ;	2658:2:88351:88377	2732408	0	True				
ANR	2732412	IdentifierDecl	r		2732408	0					
ANR	2732413	IdentifierDeclType	bfd_reloc_code_real_type		2732408	0					
ANR	2732414	Identifier	r		2732408	1					
ANR	2732415	IdentifierDeclStatement	size_t i ;	2659:2:88381:88389	2732408	1	True				
ANR	2732416	IdentifierDecl	i		2732408	0					
ANR	2732417	IdentifierDeclType	size_t		2732408	0					
ANR	2732418	Identifier	i		2732408	1					
ANR	2732419	IfStatement	if ( reloc_type == BFD_RELOC_NONE || ! opcode )		2732408	2					
ANR	2732420	Condition	reloc_type == BFD_RELOC_NONE || ! opcode	2661:6:88398:88436	2732408	0	True				
ANR	2732421	OrExpression	reloc_type == BFD_RELOC_NONE || ! opcode		2732408	0		||			
ANR	2732422	EqualityExpression	reloc_type == BFD_RELOC_NONE		2732408	0		==			
ANR	2732423	Identifier	reloc_type		2732408	0					
ANR	2732424	Identifier	BFD_RELOC_NONE		2732408	1					
ANR	2732425	UnaryOperationExpression	! opcode		2732408	1					
ANR	2732426	UnaryOperator	!		2732408	0					
ANR	2732427	Identifier	opcode		2732408	1					
ANR	2732428	ReturnStatement	return NULL ;	2662:4:88443:88454	2732408	1	True				
ANR	2732429	Identifier	NULL		2732408	0					
ANR	2732430	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		2732408	3					
ANR	2732431	ForInit	i = 0 ;	2664:7:88464:88469	2732408	0	True				
ANR	2732432	AssignmentExpression	i = 0		2732408	0		=			
ANR	2732433	Identifier	i		2732408	0					
ANR	2732434	PrimaryExpression	0		2732408	1					
ANR	2732435	Condition	i < hexagon_operand_count	2664:14:88471:88495	2732408	1	True				
ANR	2732436	RelationalExpression	i < hexagon_operand_count		2732408	0		<			
ANR	2732437	Identifier	i		2732408	0					
ANR	2732438	Identifier	hexagon_operand_count		2732408	1					
ANR	2732439	PostIncDecOperationExpression	i ++	2664:41:88498:88500	2732408	2	True				
ANR	2732440	Identifier	i		2732408	0					
ANR	2732441	IncDec	++		2732408	1					
ANR	2732442	CompoundStatement		9:4:159:159	2732408	3					
ANR	2732443	IfStatement	if ( flags & HEXAGON_OPERAND_IS_KXED )		2732408	0					
ANR	2732444	Condition	flags & HEXAGON_OPERAND_IS_KXED	2666:10:88519:88549	2732408	0	True				
ANR	2732445	BitAndExpression	flags & HEXAGON_OPERAND_IS_KXED		2732408	0		&			
ANR	2732446	Identifier	flags		2732408	0					
ANR	2732447	Identifier	HEXAGON_OPERAND_IS_KXED		2732408	1					
ANR	2732448	CompoundStatement		11:8:212:212	2732408	1					
ANR	2732449	IfStatement	if ( hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE )		2732408	0					
ANR	2732450	Condition	hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE	2668:14:88576:88632	2732408	0	True				
ANR	2732451	BitAndExpression	hexagon_operands [ i ] . flags & HEXAGON_OPERAND_IS_IMMEDIATE		2732408	0		&			
ANR	2732452	MemberAccess	hexagon_operands [ i ] . flags		2732408	0					
ANR	2732453	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732454	Identifier	hexagon_operands		2732408	0					
ANR	2732455	Identifier	i		2732408	1					
ANR	2732456	Identifier	flags		2732408	1					
ANR	2732457	Identifier	HEXAGON_OPERAND_IS_IMMEDIATE		2732408	1					
ANR	2732458	SwitchStatement	switch ( opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE ) )		2732408	1					
ANR	2732459	Condition	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )	2669:20:88655:88785	2732408	0	True				
ANR	2732460	BitAndExpression	opcode -> attributes & ( EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE )		2732408	0		&			
ANR	2732461	PtrMemberAccess	opcode -> attributes		2732408	0					
ANR	2732462	Identifier	opcode		2732408	0					
ANR	2732463	Identifier	attributes		2732408	1					
ANR	2732464	InclusiveOrExpression	EXTENDABLE_LOWER_CASE_IMMEDIATE | EXTENDABLE_UPPER_CASE_IMMEDIATE		2732408	1		|			
ANR	2732465	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		2732408	0					
ANR	2732466	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		2732408	1					
ANR	2732467	CompoundStatement		16:14:454:454	2732408	1					
ANR	2732468	Label	case EXTENDABLE_LOWER_CASE_IMMEDIATE :	2673:14:88818:88854	2732408	0	True				
ANR	2732469	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		2732408	0					
ANR	2732470	IfStatement	"if ( hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt ) )"		2732408	1					
ANR	2732471	Condition	"hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"	2674:20:88876:89045	2732408	0	True				
ANR	2732472	OrExpression	"hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	0		||			
ANR	2732473	EqualityExpression	hexagon_operands [ i ] . enc_letter != TOLOWER ( hexagon_operands [ i ] . enc_letter )		2732408	0		!=			
ANR	2732474	MemberAccess	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732475	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732476	Identifier	hexagon_operands		2732408	0					
ANR	2732477	Identifier	i		2732408	1					
ANR	2732478	Identifier	enc_letter		2732408	1					
ANR	2732479	CallExpression	TOLOWER ( hexagon_operands [ i ] . enc_letter )		2732408	1					
ANR	2732480	Callee	TOLOWER		2732408	0					
ANR	2732481	Identifier	TOLOWER		2732408	0					
ANR	2732482	ArgumentList	hexagon_operands [ i ] . enc_letter		2732408	1					
ANR	2732483	Argument	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732484	MemberAccess	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732485	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732486	Identifier	hexagon_operands		2732408	0					
ANR	2732487	Identifier	i		2732408	1					
ANR	2732488	Identifier	enc_letter		2732408	1					
ANR	2732489	UnaryOperationExpression	"! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	1					
ANR	2732490	UnaryOperator	!		2732408	0					
ANR	2732491	CallExpression	"strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	1					
ANR	2732492	Callee	strstr		2732408	0					
ANR	2732493	Identifier	strstr		2732408	0					
ANR	2732494	ArgumentList	opcode -> syntax		2732408	1					
ANR	2732495	Argument	opcode -> syntax		2732408	0					
ANR	2732496	PtrMemberAccess	opcode -> syntax		2732408	0					
ANR	2732497	Identifier	opcode		2732408	0					
ANR	2732498	Identifier	syntax		2732408	1					
ANR	2732499	Argument	hexagon_operands [ i ] . fmt		2732408	1					
ANR	2732500	MemberAccess	hexagon_operands [ i ] . fmt		2732408	0					
ANR	2732501	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732502	Identifier	hexagon_operands		2732408	0					
ANR	2732503	Identifier	i		2732408	1					
ANR	2732504	Identifier	fmt		2732408	1					
ANR	2732505	ContinueStatement	continue ;	2677:18:89066:89074	2732408	1	True				
ANR	2732506	BreakStatement	break ;	2679:16:89093:89098	2732408	2	True				
ANR	2732507	Label	case EXTENDABLE_UPPER_CASE_IMMEDIATE :	2681:14:89115:89151	2732408	3	True				
ANR	2732508	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		2732408	0					
ANR	2732509	IfStatement	"if ( hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt ) )"		2732408	4					
ANR	2732510	Condition	"hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"	2682:20:89173:89342	2732408	0	True				
ANR	2732511	OrExpression	"hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter ) || ! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	0		||			
ANR	2732512	EqualityExpression	hexagon_operands [ i ] . enc_letter != TOUPPER ( hexagon_operands [ i ] . enc_letter )		2732408	0		!=			
ANR	2732513	MemberAccess	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732514	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732515	Identifier	hexagon_operands		2732408	0					
ANR	2732516	Identifier	i		2732408	1					
ANR	2732517	Identifier	enc_letter		2732408	1					
ANR	2732518	CallExpression	TOUPPER ( hexagon_operands [ i ] . enc_letter )		2732408	1					
ANR	2732519	Callee	TOUPPER		2732408	0					
ANR	2732520	Identifier	TOUPPER		2732408	0					
ANR	2732521	ArgumentList	hexagon_operands [ i ] . enc_letter		2732408	1					
ANR	2732522	Argument	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732523	MemberAccess	hexagon_operands [ i ] . enc_letter		2732408	0					
ANR	2732524	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732525	Identifier	hexagon_operands		2732408	0					
ANR	2732526	Identifier	i		2732408	1					
ANR	2732527	Identifier	enc_letter		2732408	1					
ANR	2732528	UnaryOperationExpression	"! strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	1					
ANR	2732529	UnaryOperator	!		2732408	0					
ANR	2732530	CallExpression	"strstr ( opcode -> syntax , hexagon_operands [ i ] . fmt )"		2732408	1					
ANR	2732531	Callee	strstr		2732408	0					
ANR	2732532	Identifier	strstr		2732408	0					
ANR	2732533	ArgumentList	opcode -> syntax		2732408	1					
ANR	2732534	Argument	opcode -> syntax		2732408	0					
ANR	2732535	PtrMemberAccess	opcode -> syntax		2732408	0					
ANR	2732536	Identifier	opcode		2732408	0					
ANR	2732537	Identifier	syntax		2732408	1					
ANR	2732538	Argument	hexagon_operands [ i ] . fmt		2732408	1					
ANR	2732539	MemberAccess	hexagon_operands [ i ] . fmt		2732408	0					
ANR	2732540	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732541	Identifier	hexagon_operands		2732408	0					
ANR	2732542	Identifier	i		2732408	1					
ANR	2732543	Identifier	fmt		2732408	1					
ANR	2732544	ContinueStatement	continue ;	2685:18:89363:89371	2732408	1	True				
ANR	2732545	BreakStatement	break ;	2687:16:89390:89395	2732408	5	True				
ANR	2732546	ExpressionStatement	r = hexagon_operands [ i ] . reloc_kxed	2690:10:89424:89459	2732408	1	True				
ANR	2732547	AssignmentExpression	r = hexagon_operands [ i ] . reloc_kxed		2732408	0		=			
ANR	2732548	Identifier	r		2732408	0					
ANR	2732549	MemberAccess	hexagon_operands [ i ] . reloc_kxed		2732408	1					
ANR	2732550	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732551	Identifier	hexagon_operands		2732408	0					
ANR	2732552	Identifier	i		2732408	1					
ANR	2732553	Identifier	reloc_kxed		2732408	1					
ANR	2732554	ElseStatement	else		2732408	0					
ANR	2732555	ExpressionStatement	r = hexagon_operands [ i ] . reloc_type	2693:8:89490:89525	2732408	0	True				
ANR	2732556	AssignmentExpression	r = hexagon_operands [ i ] . reloc_type		2732408	0		=			
ANR	2732557	Identifier	r		2732408	0					
ANR	2732558	MemberAccess	hexagon_operands [ i ] . reloc_type		2732408	1					
ANR	2732559	ArrayIndexing	hexagon_operands [ i ]		2732408	0					
ANR	2732560	Identifier	hexagon_operands		2732408	0					
ANR	2732561	Identifier	i		2732408	1					
ANR	2732562	Identifier	reloc_type		2732408	1					
ANR	2732563	IfStatement	if ( r == reloc_type )		2732408	1					
ANR	2732564	Condition	r == reloc_type	2695:10:89538:89552	2732408	0	True				
ANR	2732565	EqualityExpression	r == reloc_type		2732408	0		==			
ANR	2732566	Identifier	r		2732408	0					
ANR	2732567	Identifier	reloc_type		2732408	1					
ANR	2732568	ReturnStatement	return ( hexagon_operands + i ) ;	2696:8:89563:89592	2732408	1	True				
ANR	2732569	AdditiveExpression	hexagon_operands + i		2732408	0		+			
ANR	2732570	Identifier	hexagon_operands		2732408	0					
ANR	2732571	Identifier	i		2732408	1					
ANR	2732572	ReturnStatement	return NULL ;	2699:2:89603:89614	2732408	4	True				
ANR	2732573	Identifier	NULL		2732408	0					
ANR	2732574	ReturnType	const hexagon_operand *		2732408	1					
ANR	2732575	Identifier	hexagon_lookup_reloc		2732408	2					
ANR	2732576	ParameterList	"bfd_reloc_code_real_type reloc_type , int flags , const hexagon_opcode * opcode"		2732408	3					
ANR	2732577	Parameter	bfd_reloc_code_real_type reloc_type	2656:1:88269:88303	2732408	0	True				
ANR	2732578	ParameterType	bfd_reloc_code_real_type		2732408	0					
ANR	2732579	Identifier	reloc_type		2732408	1					
ANR	2732580	Parameter	int flags	2656:38:88306:88314	2732408	1	True				
ANR	2732581	ParameterType	int		2732408	0					
ANR	2732582	Identifier	flags		2732408	1					
ANR	2732583	Parameter	const hexagon_opcode * opcode	2656:49:88317:88344	2732408	2	True				
ANR	2732584	ParameterType	const hexagon_opcode *		2732408	0					
ANR	2732585	Identifier	opcode		2732408	1					
ANR	2732586	CFGEntryNode	ENTRY		2732408		True				
ANR	2732587	CFGExitNode	EXIT		2732408		True				
ANR	2732588	Symbol	flags		2732408						
ANR	2732589	Symbol	hexagon_operands [ i ] . reloc_type		2732408						
ANR	2732590	Symbol	HEXAGON_OPERAND_IS_KXED		2732408						
ANR	2732591	Symbol	TOUPPER		2732408						
ANR	2732592	Symbol	opcode -> attributes		2732408						
ANR	2732593	Symbol	opcode		2732408						
ANR	2732594	Symbol	hexagon_operand_count		2732408						
ANR	2732595	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		2732408						
ANR	2732596	Symbol	hexagon_operands [ i ] . enc_letter		2732408						
ANR	2732597	Symbol	hexagon_operands [ i ] . fmt		2732408						
ANR	2732598	Symbol	NULL		2732408						
ANR	2732599	Symbol	* hexagon_operands		2732408						
ANR	2732600	Symbol	hexagon_operands		2732408						
ANR	2732601	Symbol	BFD_RELOC_NONE		2732408						
ANR	2732602	Symbol	TOLOWER		2732408						
ANR	2732603	Symbol	i		2732408						
ANR	2732604	Symbol	reloc_type		2732408						
ANR	2732605	Symbol	HEXAGON_OPERAND_IS_IMMEDIATE		2732408						
ANR	2732606	Symbol	opcode -> syntax		2732408						
ANR	2732607	Symbol	r		2732408						
ANR	2732608	Symbol	* i		2732408						
ANR	2732609	Symbol	hexagon_operands [ i ] . flags		2732408						
ANR	2732610	Symbol	strstr		2732408						
ANR	2732611	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		2732408						
ANR	2732612	Symbol	hexagon_operands [ i ] . reloc_kxed		2732408						
ANR	2732613	Symbol	* opcode		2732408						
ANR	2732614	Function	hexagon_extract_operand	2702:0:89619:91279							
ANR	2732615	FunctionDef	"hexagon_extract_operand (const hexagon_operand * operand , hexagon_insn insn , bfd_vma addr , char * enc , int * return_value , char * * errmsg)"		2732614	0					
ANR	2732616	CompoundStatement		2707:0:89760:91279	2732614	0					
ANR	2732617	IdentifierDeclStatement	int value = 0 ;	2708:2:89764:89777	2732614	0	True				
ANR	2732618	IdentifierDecl	value = 0		2732614	0					
ANR	2732619	IdentifierDeclType	int		2732614	0					
ANR	2732620	Identifier	value		2732614	1					
ANR	2732621	AssignmentExpression	value = 0		2732614	2		=			
ANR	2732622	Identifier	value		2732614	0					
ANR	2732623	PrimaryExpression	0		2732614	1					
ANR	2732624	IdentifierDeclStatement	char enc_letter = operand -> enc_letter ;	2709:2:89781:89818	2732614	1	True				
ANR	2732625	IdentifierDecl	enc_letter = operand -> enc_letter		2732614	0					
ANR	2732626	IdentifierDeclType	char		2732614	0					
ANR	2732627	Identifier	enc_letter		2732614	1					
ANR	2732628	AssignmentExpression	enc_letter = operand -> enc_letter		2732614	2		=			
ANR	2732629	Identifier	enc_letter		2732614	0					
ANR	2732630	PtrMemberAccess	operand -> enc_letter		2732614	1					
ANR	2732631	Identifier	operand		2732614	0					
ANR	2732632	Identifier	enc_letter		2732614	1					
ANR	2732633	IdentifierDeclStatement	char * enc_ptr = enc ;	2710:2:89822:89841	2732614	2	True				
ANR	2732634	IdentifierDecl	* enc_ptr = enc		2732614	0					
ANR	2732635	IdentifierDeclType	char *		2732614	0					
ANR	2732636	Identifier	enc_ptr		2732614	1					
ANR	2732637	AssignmentExpression	* enc_ptr = enc		2732614	2		=			
ANR	2732638	Identifier	enc		2732614	0					
ANR	2732639	Identifier	enc		2732614	1					
ANR	2732640	IdentifierDeclStatement	unsigned int bits_found ;	2711:2:89845:89868	2732614	3	True				
ANR	2732641	IdentifierDecl	bits_found		2732614	0					
ANR	2732642	IdentifierDeclType	unsigned int		2732614	0					
ANR	2732643	Identifier	bits_found		2732614	1					
ANR	2732644	IdentifierDeclStatement	hexagon_insn mask ;	2712:2:89872:89889	2732614	4	True				
ANR	2732645	IdentifierDecl	mask		2732614	0					
ANR	2732646	IdentifierDeclType	hexagon_insn		2732614	0					
ANR	2732647	Identifier	mask		2732614	1					
ANR	2732648	IfStatement	if ( HEXAGON_IS16BITS ( insn ) )		2732614	5					
ANR	2732649	Condition	HEXAGON_IS16BITS ( insn )	2714:6:89898:89919	2732614	0	True				
ANR	2732650	CallExpression	HEXAGON_IS16BITS ( insn )		2732614	0					
ANR	2732651	Callee	HEXAGON_IS16BITS		2732614	0					
ANR	2732652	Identifier	HEXAGON_IS16BITS		2732614	0					
ANR	2732653	ArgumentList	insn		2732614	1					
ANR	2732654	Argument	insn		2732614	0					
ANR	2732655	Identifier	insn		2732614	0					
ANR	2732656	ExpressionStatement	mask = 1 << 15	2715:4:89926:89940	2732614	1	True				
ANR	2732657	AssignmentExpression	mask = 1 << 15		2732614	0		=			
ANR	2732658	Identifier	mask		2732614	0					
ANR	2732659	ShiftExpression	1 << 15		2732614	1		<<			
ANR	2732660	PrimaryExpression	1		2732614	0					
ANR	2732661	PrimaryExpression	15		2732614	1					
ANR	2732662	ElseStatement	else		2732614	0					
ANR	2732663	ExpressionStatement	mask = 1 << 31	2717:4:89953:89967	2732614	0	True				
ANR	2732664	AssignmentExpression	mask = 1 << 31		2732614	0		=			
ANR	2732665	Identifier	mask		2732614	0					
ANR	2732666	ShiftExpression	1 << 31		2732614	1		<<			
ANR	2732667	PrimaryExpression	1		2732614	0					
ANR	2732668	PrimaryExpression	31		2732614	1					
ANR	2732669	ExpressionStatement	bits_found = 0	2720:2:90015:90029	2732614	6	True				
ANR	2732670	AssignmentExpression	bits_found = 0		2732614	0		=			
ANR	2732671	Identifier	bits_found		2732614	0					
ANR	2732672	PrimaryExpression	0		2732614	1					
ANR	2732673	WhileStatement	while ( * enc_ptr )		2732614	7					
ANR	2732674	Condition	* enc_ptr	2721:9:90040:90047	2732614	0	True				
ANR	2732675	UnaryOperationExpression	* enc_ptr		2732614	0					
ANR	2732676	UnaryOperator	*		2732614	0					
ANR	2732677	Identifier	enc_ptr		2732614	1					
ANR	2732678	CompoundStatement		17:6:301:321	2732614	1					
ANR	2732679	IdentifierDeclStatement	char ch = * enc_ptr ++ ;	2723:6:90062:90082	2732614	0	True				
ANR	2732680	IdentifierDecl	ch = * enc_ptr ++		2732614	0					
ANR	2732681	IdentifierDeclType	char		2732614	0					
ANR	2732682	Identifier	ch		2732614	1					
ANR	2732683	AssignmentExpression	ch = * enc_ptr ++		2732614	2		=			
ANR	2732684	Identifier	ch		2732614	0					
ANR	2732685	UnaryOperationExpression	* enc_ptr ++		2732614	1					
ANR	2732686	UnaryOperator	*		2732614	0					
ANR	2732687	PostIncDecOperationExpression	enc_ptr ++		2732614	1					
ANR	2732688	Identifier	enc_ptr		2732614	0					
ANR	2732689	IncDec	++		2732614	1					
ANR	2732690	IfStatement	if ( ! ISSPACE ( ch ) )		2732614	1					
ANR	2732691	Condition	! ISSPACE ( ch )	2725:10:90095:90106	2732614	0	True				
ANR	2732692	UnaryOperationExpression	! ISSPACE ( ch )		2732614	0					
ANR	2732693	UnaryOperator	!		2732614	0					
ANR	2732694	CallExpression	ISSPACE ( ch )		2732614	1					
ANR	2732695	Callee	ISSPACE		2732614	0					
ANR	2732696	Identifier	ISSPACE		2732614	0					
ANR	2732697	ArgumentList	ch		2732614	1					
ANR	2732698	Argument	ch		2732614	0					
ANR	2732699	Identifier	ch		2732614	0					
ANR	2732700	CompoundStatement		20:8:356:356	2732614	1					
ANR	2732701	IfStatement	if ( ch == enc_letter )		2732614	0					
ANR	2732702	Condition	ch == enc_letter	2727:14:90133:90148	2732614	0	True				
ANR	2732703	EqualityExpression	ch == enc_letter		2732614	0		==			
ANR	2732704	Identifier	ch		2732614	0					
ANR	2732705	Identifier	enc_letter		2732614	1					
ANR	2732706	CompoundStatement		22:12:402:402	2732614	1					
ANR	2732707	ExpressionStatement	value = ( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )	2729:14:90179:90223	2732614	0	True				
ANR	2732708	AssignmentExpression	value = ( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )		2732614	0		=			
ANR	2732709	Identifier	value		2732614	0					
ANR	2732710	AdditiveExpression	( value << 1 ) + ( ( insn & mask ) ? 1 : 0 )		2732614	1		+			
ANR	2732711	ShiftExpression	value << 1		2732614	0		<<			
ANR	2732712	Identifier	value		2732614	0					
ANR	2732713	PrimaryExpression	1		2732614	1					
ANR	2732714	ConditionalExpression	( insn & mask ) ? 1 : 0		2732614	1					
ANR	2732715	Condition	insn & mask		2732614	0					
ANR	2732716	BitAndExpression	insn & mask		2732614	0		&			
ANR	2732717	Identifier	insn		2732614	0					
ANR	2732718	Identifier	mask		2732614	1					
ANR	2732719	PrimaryExpression	1		2732614	1					
ANR	2732720	PrimaryExpression	0		2732614	2					
ANR	2732721	ExpressionStatement	bits_found ++	2730:14:90239:90251	2732614	1	True				
ANR	2732722	PostIncDecOperationExpression	bits_found ++		2732614	0					
ANR	2732723	Identifier	bits_found		2732614	0					
ANR	2732724	IncDec	++		2732614	1					
ANR	2732725	ExpressionStatement	mask >>= 1	2732:10:90277:90287	2732614	1	True				
ANR	2732726	AssignmentExpression	mask >>= 1		2732614	0		>>=			
ANR	2732727	Identifier	mask		2732614	0					
ANR	2732728	PrimaryExpression	1		2732614	1					
ANR	2732729	IfStatement	if ( bits_found != operand -> bits )		2732614	8					
ANR	2732730	Condition	bits_found != operand -> bits	2737:6:90363:90389	2732614	0	True				
ANR	2732731	EqualityExpression	bits_found != operand -> bits		2732614	0		!=			
ANR	2732732	Identifier	bits_found		2732614	0					
ANR	2732733	PtrMemberAccess	operand -> bits		2732614	1					
ANR	2732734	Identifier	operand		2732614	0					
ANR	2732735	Identifier	bits		2732614	1					
ANR	2732736	CompoundStatement		32:4:635:635	2732614	1					
ANR	2732737	IfStatement	if ( errmsg )		2732614	0					
ANR	2732738	Condition	errmsg	2739:10:90408:90413	2732614	0	True				
ANR	2732739	Identifier	errmsg		2732614	0					
ANR	2732740	CompoundStatement		35:17:682:694	2732614	1					
ANR	2732741	Statement	static	2741:10:90436:90441	2732614	0	True				
ANR	2732742	IdentifierDeclStatement	char xx [ 100 ] ;	2741:17:90443:90455	2732614	1	True				
ANR	2732743	IdentifierDecl	xx [ 100 ]		2732614	0					
ANR	2732744	IdentifierDeclType	char [ 100 ]		2732614	0					
ANR	2732745	Identifier	xx		2732614	1					
ANR	2732746	PrimaryExpression	100		2732614	2					
ANR	2732747	ExpressionStatement	"sprintf ( xx , ""operand %c wrong number of bits found in %s, %d != %d"" , operand -> enc_letter , enc , bits_found , operand -> bits )"	2743:10:90468:90609	2732614	2	True				
ANR	2732748	CallExpression	"sprintf ( xx , ""operand %c wrong number of bits found in %s, %d != %d"" , operand -> enc_letter , enc , bits_found , operand -> bits )"		2732614	0					
ANR	2732749	Callee	sprintf		2732614	0					
ANR	2732750	Identifier	sprintf		2732614	0					
ANR	2732751	ArgumentList	xx		2732614	1					
ANR	2732752	Argument	xx		2732614	0					
ANR	2732753	Identifier	xx		2732614	0					
ANR	2732754	Argument	"""operand %c wrong number of bits found in %s, %d != %d"""		2732614	1					
ANR	2732755	PrimaryExpression	"""operand %c wrong number of bits found in %s, %d != %d"""		2732614	0					
ANR	2732756	Argument	operand -> enc_letter		2732614	2					
ANR	2732757	PtrMemberAccess	operand -> enc_letter		2732614	0					
ANR	2732758	Identifier	operand		2732614	0					
ANR	2732759	Identifier	enc_letter		2732614	1					
ANR	2732760	Argument	enc		2732614	3					
ANR	2732761	Identifier	enc		2732614	0					
ANR	2732762	Argument	bits_found		2732614	4					
ANR	2732763	Identifier	bits_found		2732614	0					
ANR	2732764	Argument	operand -> bits		2732614	5					
ANR	2732765	PtrMemberAccess	operand -> bits		2732614	0					
ANR	2732766	Identifier	operand		2732614	0					
ANR	2732767	Identifier	bits		2732614	1					
ANR	2732768	ExpressionStatement	* errmsg = xx	2745:10:90621:90633	2732614	3	True				
ANR	2732769	AssignmentExpression	* errmsg = xx		2732614	0		=			
ANR	2732770	UnaryOperationExpression	* errmsg		2732614	0					
ANR	2732771	UnaryOperator	*		2732614	0					
ANR	2732772	Identifier	errmsg		2732614	1					
ANR	2732773	Identifier	xx		2732614	1					
ANR	2732774	ReturnStatement	return FALSE ;	2747:6:90651:90663	2732614	1	True				
ANR	2732775	Identifier	FALSE		2732614	0					
ANR	2732776	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SIGNED )		2732614	9					
ANR	2732777	Condition	operand -> flags & HEXAGON_OPERAND_IS_SIGNED	2750:6:90678:90719	2732614	0	True				
ANR	2732778	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SIGNED		2732614	0		&			
ANR	2732779	PtrMemberAccess	operand -> flags		2732614	0					
ANR	2732780	Identifier	operand		2732614	0					
ANR	2732781	Identifier	flags		2732614	1					
ANR	2732782	Identifier	HEXAGON_OPERAND_IS_SIGNED		2732614	1					
ANR	2732783	CompoundStatement		45:4:965:965	2732614	1					
ANR	2732784	IfStatement	if ( bits_found > 31 )		2732614	0					
ANR	2732785	Condition	bits_found > 31	2752:10:90738:90752	2732614	0	True				
ANR	2732786	RelationalExpression	bits_found > 31		2732614	0		>			
ANR	2732787	Identifier	bits_found		2732614	0					
ANR	2732788	PrimaryExpression	31		2732614	1					
ANR	2732789	CompoundStatement		46:27:994:994	2732614	1					
ANR	2732790	ReturnStatement	return FALSE ;	2754:8:90793:90805	2732614	0	True				
ANR	2732791	Identifier	FALSE		2732614	0					
ANR	2732792	IfStatement	if ( value & ( 1 << ( bits_found - 1 ) ) )		2732614	1					
ANR	2732793	Condition	value & ( 1 << ( bits_found - 1 ) )	2757:10:90863:90893	2732614	0	True				
ANR	2732794	BitAndExpression	value & ( 1 << ( bits_found - 1 ) )		2732614	0		&			
ANR	2732795	Identifier	value		2732614	0					
ANR	2732796	ShiftExpression	1 << ( bits_found - 1 )		2732614	1		<<			
ANR	2732797	PrimaryExpression	1		2732614	0					
ANR	2732798	AdditiveExpression	bits_found - 1		2732614	1		-			
ANR	2732799	Identifier	bits_found		2732614	0					
ANR	2732800	PrimaryExpression	1		2732614	1					
ANR	2732801	CompoundStatement		52:8:1143:1143	2732614	1					
ANR	2732802	ExpressionStatement	value <<= 32 - bits_found	2759:10:90916:90941	2732614	0	True				
ANR	2732803	AssignmentExpression	value <<= 32 - bits_found		2732614	0		<<=			
ANR	2732804	Identifier	value		2732614	0					
ANR	2732805	AdditiveExpression	32 - bits_found		2732614	1		-			
ANR	2732806	PrimaryExpression	32		2732614	0					
ANR	2732807	Identifier	bits_found		2732614	1					
ANR	2732808	ExpressionStatement	value >>= 32 - bits_found	2760:10:90953:90978	2732614	1	True				
ANR	2732809	AssignmentExpression	value >>= 32 - bits_found		2732614	0		>>=			
ANR	2732810	Identifier	value		2732614	0					
ANR	2732811	AdditiveExpression	32 - bits_found		2732614	1		-			
ANR	2732812	PrimaryExpression	32		2732614	0					
ANR	2732813	Identifier	bits_found		2732614	1					
ANR	2732814	ExpressionStatement	value <<= operand -> shift_count	2764:2:90999:91029	2732614	10	True				
ANR	2732815	AssignmentExpression	value <<= operand -> shift_count		2732614	0		<<=			
ANR	2732816	Identifier	value		2732614	0					
ANR	2732817	PtrMemberAccess	operand -> shift_count		2732614	1					
ANR	2732818	Identifier	operand		2732614	0					
ANR	2732819	Identifier	shift_count		2732614	1					
ANR	2732820	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_PC_RELATIVE )		2732614	11					
ANR	2732821	Condition	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE	2766:6:91038:91081	2732614	0	True				
ANR	2732822	BitAndExpression	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE		2732614	0		&			
ANR	2732823	PtrMemberAccess	operand -> flags		2732614	0					
ANR	2732824	Identifier	operand		2732614	0					
ANR	2732825	Identifier	flags		2732614	1					
ANR	2732826	Identifier	HEXAGON_OPERAND_PC_RELATIVE		2732614	1					
ANR	2732827	ExpressionStatement	value += addr	2767:4:91088:91101	2732614	1	True				
ANR	2732828	AssignmentExpression	value += addr		2732614	0		+=			
ANR	2732829	Identifier	value		2732614	0					
ANR	2732830	Identifier	addr		2732614	1					
ANR	2732831	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		2732614	12					
ANR	2732832	Condition	operand -> flags & HEXAGON_OPERAND_IS_SUBSET	2769:6:91110:91151	2732614	0	True				
ANR	2732833	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		2732614	0		&			
ANR	2732834	PtrMemberAccess	operand -> flags		2732614	0					
ANR	2732835	Identifier	operand		2732614	0					
ANR	2732836	Identifier	flags		2732614	1					
ANR	2732837	Identifier	HEXAGON_OPERAND_IS_SUBSET		2732614	1					
ANR	2732838	ExpressionStatement	"value = HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"	2770:4:91158:91236	2732614	1	True				
ANR	2732839	AssignmentExpression	"value = HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		2732614	0		=			
ANR	2732840	Identifier	value		2732614	0					
ANR	2732841	CallExpression	"HEXAGON_SUBREGS_FROM ( value , operand -> flags & HEXAGON_OPERAND_IS_PAIR )"		2732614	1					
ANR	2732842	Callee	HEXAGON_SUBREGS_FROM		2732614	0					
ANR	2732843	Identifier	HEXAGON_SUBREGS_FROM		2732614	0					
ANR	2732844	ArgumentList	value		2732614	1					
ANR	2732845	Argument	value		2732614	0					
ANR	2732846	Identifier	value		2732614	0					
ANR	2732847	Argument	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2732614	1					
ANR	2732848	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2732614	0		&			
ANR	2732849	PtrMemberAccess	operand -> flags		2732614	0					
ANR	2732850	Identifier	operand		2732614	0					
ANR	2732851	Identifier	flags		2732614	1					
ANR	2732852	Identifier	HEXAGON_OPERAND_IS_PAIR		2732614	1					
ANR	2732853	ExpressionStatement	* return_value = value	2772:2:91241:91262	2732614	13	True				
ANR	2732854	AssignmentExpression	* return_value = value		2732614	0		=			
ANR	2732855	UnaryOperationExpression	* return_value		2732614	0					
ANR	2732856	UnaryOperator	*		2732614	0					
ANR	2732857	Identifier	return_value		2732614	1					
ANR	2732858	Identifier	value		2732614	1					
ANR	2732859	ReturnStatement	return TRUE ;	2773:2:91266:91277	2732614	14	True				
ANR	2732860	Identifier	TRUE		2732614	0					
ANR	2732861	ReturnType	int		2732614	1					
ANR	2732862	Identifier	hexagon_extract_operand		2732614	2					
ANR	2732863	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , bfd_vma addr , char * enc , int * return_value , char * * errmsg"		2732614	3					
ANR	2732864	Parameter	const hexagon_operand * operand	2704:1:89648:89677	2732614	0	True				
ANR	2732865	ParameterType	const hexagon_operand *		2732614	0					
ANR	2732866	Identifier	operand		2732614	1					
ANR	2732867	Parameter	hexagon_insn insn	2704:33:89680:89696	2732614	1	True				
ANR	2732868	ParameterType	hexagon_insn		2732614	0					
ANR	2732869	Identifier	insn		2732614	1					
ANR	2732870	Parameter	bfd_vma addr	2705:1:89700:89711	2732614	2	True				
ANR	2732871	ParameterType	bfd_vma		2732614	0					
ANR	2732872	Identifier	addr		2732614	1					
ANR	2732873	Parameter	char * enc	2705:15:89714:89722	2732614	3	True				
ANR	2732874	ParameterType	char *		2732614	0					
ANR	2732875	Identifier	enc		2732614	1					
ANR	2732876	Parameter	int * return_value	2705:26:89725:89741	2732614	4	True				
ANR	2732877	ParameterType	int *		2732614	0					
ANR	2732878	Identifier	return_value		2732614	1					
ANR	2732879	Parameter	char * * errmsg	2706:1:89745:89757	2732614	5	True				
ANR	2732880	ParameterType	char * *		2732614	0					
ANR	2732881	Identifier	errmsg		2732614	1					
ANR	2732882	CFGEntryNode	ENTRY		2732614		True				
ANR	2732883	CFGExitNode	EXIT		2732614		True				
ANR	2732884	Symbol	xx		2732614						
ANR	2732885	Symbol	return_value		2732614						
ANR	2732886	Symbol	HEXAGON_OPERAND_IS_SIGNED		2732614						
ANR	2732887	Symbol	* operand		2732614						
ANR	2732888	Symbol	operand -> enc_letter		2732614						
ANR	2732889	Symbol	HEXAGON_SUBREGS_FROM		2732614						
ANR	2732890	Symbol	bits_found		2732614						
ANR	2732891	Symbol	* enc_ptr		2732614						
ANR	2732892	Symbol	enc		2732614						
ANR	2732893	Symbol	* enc_ptr ++		2732614						
ANR	2732894	Symbol	addr		2732614						
ANR	2732895	Symbol	value		2732614						
ANR	2732896	Symbol	enc_letter		2732614						
ANR	2732897	Symbol	HEXAGON_OPERAND_IS_PAIR		2732614						
ANR	2732898	Symbol	mask		2732614						
ANR	2732899	Symbol	enc_ptr		2732614						
ANR	2732900	Symbol	operand -> flags		2732614						
ANR	2732901	Symbol	ch		2732614						
ANR	2732902	Symbol	HEXAGON_OPERAND_IS_SUBSET		2732614						
ANR	2732903	Symbol	errmsg		2732614						
ANR	2732904	Symbol	TRUE		2732614						
ANR	2732905	Symbol	HEXAGON_OPERAND_PC_RELATIVE		2732614						
ANR	2732906	Symbol	HEXAGON_IS16BITS		2732614						
ANR	2732907	Symbol	insn		2732614						
ANR	2732908	Symbol	operand -> shift_count		2732614						
ANR	2732909	Symbol	FALSE		2732614						
ANR	2732910	Symbol	operand -> bits		2732614						
ANR	2732911	Symbol	ISSPACE		2732614						
ANR	2732912	Symbol	* errmsg		2732614						
ANR	2732913	Symbol	* return_value		2732614						
ANR	2732914	Symbol	operand		2732614						
ANR	2732915	Function	hexagon_dis_named_reg	2776:0:91282:91905							
ANR	2732916	FunctionDef	"hexagon_dis_named_reg (int value , int count , const hexagon_reg * regs , char * buf , char * * errmsg)"		2732915	0					
ANR	2732917	CompoundStatement		2779:0:91392:91905	2732915	0					
ANR	2732918	IdentifierDeclStatement	int n = 0 ;	2780:2:91396:91405	2732915	0	True				
ANR	2732919	IdentifierDecl	n = 0		2732915	0					
ANR	2732920	IdentifierDeclType	int		2732915	0					
ANR	2732921	Identifier	n		2732915	1					
ANR	2732922	AssignmentExpression	n = 0		2732915	2		=			
ANR	2732923	Identifier	n		2732915	0					
ANR	2732924	PrimaryExpression	0		2732915	1					
ANR	2732925	IdentifierDeclStatement	int found = 0 ;	2781:2:91409:91422	2732915	1	True				
ANR	2732926	IdentifierDecl	found = 0		2732915	0					
ANR	2732927	IdentifierDeclType	int		2732915	0					
ANR	2732928	Identifier	found		2732915	1					
ANR	2732929	AssignmentExpression	found = 0		2732915	2		=			
ANR	2732930	Identifier	found		2732915	0					
ANR	2732931	PrimaryExpression	0		2732915	1					
ANR	2732932	IdentifierDeclStatement	int i ;	2782:2:91426:91431	2732915	2	True				
ANR	2732933	IdentifierDecl	i		2732915	0					
ANR	2732934	IdentifierDeclType	int		2732915	0					
ANR	2732935	Identifier	i		2732915	1					
ANR	2732936	ForStatement	for ( i = 0 ; i < count ; i ++ )		2732915	3					
ANR	2732937	ForInit	i = 0 ;	2784:7:91441:91446	2732915	0	True				
ANR	2732938	AssignmentExpression	i = 0		2732915	0		=			
ANR	2732939	Identifier	i		2732915	0					
ANR	2732940	PrimaryExpression	0		2732915	1					
ANR	2732941	Condition	i < count	2784:14:91448:91456	2732915	1	True				
ANR	2732942	RelationalExpression	i < count		2732915	0		<			
ANR	2732943	Identifier	i		2732915	0					
ANR	2732944	Identifier	count		2732915	1					
ANR	2732945	PostIncDecOperationExpression	i ++	2784:25:91459:91461	2732915	2	True				
ANR	2732946	Identifier	i		2732915	0					
ANR	2732947	IncDec	++		2732915	1					
ANR	2732948	CompoundStatement		7:4:75:75	2732915	3					
ANR	2732949	IfStatement	if ( ! ( regs [ i ] . flags & cpu_flag ) )		2732915	0					
ANR	2732950	Condition	! ( regs [ i ] . flags & cpu_flag )	2786:10:91480:91507	2732915	0	True				
ANR	2732951	UnaryOperationExpression	! ( regs [ i ] . flags & cpu_flag )		2732915	0					
ANR	2732952	UnaryOperator	!		2732915	0					
ANR	2732953	BitAndExpression	regs [ i ] . flags & cpu_flag		2732915	1		&			
ANR	2732954	MemberAccess	regs [ i ] . flags		2732915	0					
ANR	2732955	ArrayIndexing	regs [ i ]		2732915	0					
ANR	2732956	Identifier	regs		2732915	0					
ANR	2732957	Identifier	i		2732915	1					
ANR	2732958	Identifier	flags		2732915	1					
ANR	2732959	Identifier	cpu_flag		2732915	1					
ANR	2732960	ContinueStatement	continue ;	2787:8:91518:91526	2732915	1	True				
ANR	2732961	IfStatement	if ( value == regs [ i ] . reg_num )		2732915	1					
ANR	2732962	Condition	value == regs [ i ] . reg_num	2789:10:91539:91563	2732915	0	True				
ANR	2732963	EqualityExpression	value == regs [ i ] . reg_num		2732915	0		==			
ANR	2732964	Identifier	value		2732915	0					
ANR	2732965	MemberAccess	regs [ i ] . reg_num		2732915	1					
ANR	2732966	ArrayIndexing	regs [ i ]		2732915	0					
ANR	2732967	Identifier	regs		2732915	0					
ANR	2732968	Identifier	i		2732915	1					
ANR	2732969	Identifier	reg_num		2732915	1					
ANR	2732970	CompoundStatement		12:8:181:181	2732915	1					
ANR	2732971	ExpressionStatement	found = 1	2791:10:91586:91595	2732915	0	True				
ANR	2732972	AssignmentExpression	found = 1		2732915	0		=			
ANR	2732973	Identifier	found		2732915	0					
ANR	2732974	PrimaryExpression	1		2732915	1					
ANR	2732975	ExpressionStatement	"n = sprintf ( buf , ""%s"" , regs [ i ] . name )"	2792:10:91607:91645	2732915	1	True				
ANR	2732976	AssignmentExpression	"n = sprintf ( buf , ""%s"" , regs [ i ] . name )"		2732915	0		=			
ANR	2732977	Identifier	n		2732915	0					
ANR	2732978	CallExpression	"sprintf ( buf , ""%s"" , regs [ i ] . name )"		2732915	1					
ANR	2732979	Callee	sprintf		2732915	0					
ANR	2732980	Identifier	sprintf		2732915	0					
ANR	2732981	ArgumentList	buf		2732915	1					
ANR	2732982	Argument	buf		2732915	0					
ANR	2732983	Identifier	buf		2732915	0					
ANR	2732984	Argument	"""%s"""		2732915	1					
ANR	2732985	PrimaryExpression	"""%s"""		2732915	0					
ANR	2732986	Argument	regs [ i ] . name		2732915	2					
ANR	2732987	MemberAccess	regs [ i ] . name		2732915	0					
ANR	2732988	ArrayIndexing	regs [ i ]		2732915	0					
ANR	2732989	Identifier	regs		2732915	0					
ANR	2732990	Identifier	i		2732915	1					
ANR	2732991	Identifier	name		2732915	1					
ANR	2732992	BreakStatement	break ;	2793:10:91657:91662	2732915	2	True				
ANR	2732993	IfStatement	if ( ! found )		2732915	4					
ANR	2732994	Condition	! found	2797:6:91687:91692	2732915	0	True				
ANR	2732995	UnaryOperationExpression	! found		2732915	0					
ANR	2732996	UnaryOperator	!		2732915	0					
ANR	2732997	Identifier	found		2732915	1					
ANR	2732998	CompoundStatement		20:4:306:306	2732915	1					
ANR	2732999	IfStatement	if ( errmsg )		2732915	0					
ANR	2733000	Condition	errmsg	2799:10:91711:91716	2732915	0	True				
ANR	2733001	Identifier	errmsg		2732915	0					
ANR	2733002	CompoundStatement		23:17:353:366	2732915	1					
ANR	2733003	Statement	static	2801:10:91739:91744	2732915	0	True				
ANR	2733004	IdentifierDeclStatement	char xx [ 100 ] ;	2801:17:91746:91759	2732915	1	True				
ANR	2733005	IdentifierDecl	xx [ 100 ]		2732915	0					
ANR	2733006	IdentifierDeclType	char [ 100 ]		2732915	0					
ANR	2733007	Identifier	xx		2732915	1					
ANR	2733008	PrimaryExpression	100		2732915	2					
ANR	2733009	ExpressionStatement	"sprintf ( xx , ""control register not found: %d"" , value )"	2802:10:91771:91823	2732915	2	True				
ANR	2733010	CallExpression	"sprintf ( xx , ""control register not found: %d"" , value )"		2732915	0					
ANR	2733011	Callee	sprintf		2732915	0					
ANR	2733012	Identifier	sprintf		2732915	0					
ANR	2733013	ArgumentList	xx		2732915	1					
ANR	2733014	Argument	xx		2732915	0					
ANR	2733015	Identifier	xx		2732915	0					
ANR	2733016	Argument	"""control register not found: %d"""		2732915	1					
ANR	2733017	PrimaryExpression	"""control register not found: %d"""		2732915	0					
ANR	2733018	Argument	value		2732915	2					
ANR	2733019	Identifier	value		2732915	0					
ANR	2733020	ExpressionStatement	* errmsg = xx	2803:10:91835:91847	2732915	3	True				
ANR	2733021	AssignmentExpression	* errmsg = xx		2732915	0		=			
ANR	2733022	UnaryOperationExpression	* errmsg		2732915	0					
ANR	2733023	UnaryOperator	*		2732915	0					
ANR	2733024	Identifier	errmsg		2732915	1					
ANR	2733025	Identifier	xx		2732915	1					
ANR	2733026	ReturnStatement	return NULL ;	2805:6:91865:91876	2732915	1	True				
ANR	2733027	Identifier	NULL		2732915	0					
ANR	2733028	ReturnStatement	return ( buf + n ) ;	2808:2:91887:91903	2732915	5	True				
ANR	2733029	AdditiveExpression	buf + n		2732915	0		+			
ANR	2733030	Identifier	buf		2732915	0					
ANR	2733031	Identifier	n		2732915	1					
ANR	2733032	ReturnType	static char *		2732915	1					
ANR	2733033	Identifier	hexagon_dis_named_reg		2732915	2					
ANR	2733034	ParameterList	"int value , int count , const hexagon_reg * regs , char * buf , char * * errmsg"		2732915	3					
ANR	2733035	Parameter	int value	2778:1:91319:91327	2732915	0	True				
ANR	2733036	ParameterType	int		2732915	0					
ANR	2733037	Identifier	value		2732915	1					
ANR	2733038	Parameter	int count	2778:12:91330:91338	2732915	1	True				
ANR	2733039	ParameterType	int		2732915	0					
ANR	2733040	Identifier	count		2732915	1					
ANR	2733041	Parameter	const hexagon_reg * regs	2778:23:91341:91363	2732915	2	True				
ANR	2733042	ParameterType	const hexagon_reg *		2732915	0					
ANR	2733043	Identifier	regs		2732915	1					
ANR	2733044	Parameter	char * buf	2778:48:91366:91374	2732915	3	True				
ANR	2733045	ParameterType	char *		2732915	0					
ANR	2733046	Identifier	buf		2732915	1					
ANR	2733047	Parameter	char * * errmsg	2778:59:91377:91389	2732915	4	True				
ANR	2733048	ParameterType	char * *		2732915	0					
ANR	2733049	Identifier	errmsg		2732915	1					
ANR	2733050	CFGEntryNode	ENTRY		2732915		True				
ANR	2733051	CFGExitNode	EXIT		2732915		True				
ANR	2733052	Symbol	xx		2732915						
ANR	2733053	Symbol	NULL		2732915						
ANR	2733054	Symbol	count		2732915						
ANR	2733055	Symbol	errmsg		2732915						
ANR	2733056	Symbol	i		2732915						
ANR	2733057	Symbol	regs		2732915						
ANR	2733058	Symbol	n		2732915						
ANR	2733059	Symbol	sprintf		2732915						
ANR	2733060	Symbol	regs [ i ] . flags		2732915						
ANR	2733061	Symbol	buf		2732915						
ANR	2733062	Symbol	found		2732915						
ANR	2733063	Symbol	* i		2732915						
ANR	2733064	Symbol	regs [ i ] . name		2732915						
ANR	2733065	Symbol	regs [ i ] . reg_num		2732915						
ANR	2733066	Symbol	* regs		2732915						
ANR	2733067	Symbol	cpu_flag		2732915						
ANR	2733068	Symbol	* errmsg		2732915						
ANR	2733069	Symbol	value		2732915						
ANR	2733070	Function	hexagon_dis_operand	2811:0:91908:94917							
ANR	2733071	FunctionDef	"hexagon_dis_operand (const hexagon_operand * operand , hexagon_insn insn , bfd_vma iaddr , bfd_vma paddr , char * enc , char * buf , char * * errmsg)"		2733070	0					
ANR	2733072	CompoundStatement		2815:0:92055:94917	2733070	0					
ANR	2733073	Statement	static	2816:2:92059:92064	2733070	0	True				
ANR	2733074	IdentifierDeclStatement	bfd_vma previous ;	2816:9:92066:92082	2733070	1	True				
ANR	2733075	IdentifierDecl	previous		2733070	0					
ANR	2733076	IdentifierDeclType	bfd_vma		2733070	0					
ANR	2733077	Identifier	previous		2733070	1					
ANR	2733078	Statement	static	2817:2:92086:92091	2733070	2	True				
ANR	2733079	IdentifierDeclStatement	"int xer , xreg , xvalue ;"	2817:9:92093:92114	2733070	3	True				
ANR	2733080	IdentifierDecl	xer		2733070	0					
ANR	2733081	IdentifierDeclType	int		2733070	0					
ANR	2733082	Identifier	xer		2733070	1					
ANR	2733083	IdentifierDecl	xreg		2733070	1					
ANR	2733084	IdentifierDeclType	int		2733070	0					
ANR	2733085	Identifier	xreg		2733070	1					
ANR	2733086	IdentifierDecl	xvalue		2733070	2					
ANR	2733087	IdentifierDeclType	int		2733070	0					
ANR	2733088	Identifier	xvalue		2733070	1					
ANR	2733089	IdentifierDeclStatement	"int xed , value ;"	2818:2:92118:92132	2733070	4	True				
ANR	2733090	IdentifierDecl	xed		2733070	0					
ANR	2733091	IdentifierDeclType	int		2733070	0					
ANR	2733092	Identifier	xed		2733070	1					
ANR	2733093	IdentifierDecl	value		2733070	1					
ANR	2733094	IdentifierDeclType	int		2733070	0					
ANR	2733095	Identifier	value		2733070	1					
ANR	2733096	Statement	static	2819:2:92136:92141	2733070	5	True				
ANR	2733097	ClassDefStatement	"struct { int n , y ; } reg [ MAX_PACKET_INSNS ] ;"	2819:9:92143:92184	2733070	6	True				
ANR	2733098	IdentifierDecl	reg [ MAX_PACKET_INSNS ]		2733070	0					
ANR	2733099	IdentifierDeclType	 [ MAX_PACKET_INSNS ]		2733070	0					
ANR	2733100	Identifier	reg		2733070	1					
ANR	2733101	Identifier	MAX_PACKET_INSNS		2733070	2					
ANR	2733102	IdentifierDeclStatement	size_t ireg ;	2820:2:92188:92199	2733070	7	True				
ANR	2733103	IdentifierDecl	ireg		2733070	0					
ANR	2733104	IdentifierDeclType	size_t		2733070	0					
ANR	2733105	Identifier	ireg		2733070	1					
ANR	2733106	IdentifierDeclStatement	int n ;	2821:2:92203:92208	2733070	8	True				
ANR	2733107	IdentifierDecl	n		2733070	0					
ANR	2733108	IdentifierDeclType	int		2733070	0					
ANR	2733109	Identifier	n		2733070	1					
ANR	2733110	IfStatement	"if ( ! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg ) )"		2733070	9					
ANR	2733111	Condition	"! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"	2823:6:92217:92284	2733070	0	True				
ANR	2733112	UnaryOperationExpression	"! hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"		2733070	0					
ANR	2733113	UnaryOperator	!		2733070	0					
ANR	2733114	CallExpression	"hexagon_extract_operand ( operand , insn , paddr , enc , & value , errmsg )"		2733070	1					
ANR	2733115	Callee	hexagon_extract_operand		2733070	0					
ANR	2733116	Identifier	hexagon_extract_operand		2733070	0					
ANR	2733117	ArgumentList	operand		2733070	1					
ANR	2733118	Argument	operand		2733070	0					
ANR	2733119	Identifier	operand		2733070	0					
ANR	2733120	Argument	insn		2733070	1					
ANR	2733121	Identifier	insn		2733070	0					
ANR	2733122	Argument	paddr		2733070	2					
ANR	2733123	Identifier	paddr		2733070	0					
ANR	2733124	Argument	enc		2733070	3					
ANR	2733125	Identifier	enc		2733070	0					
ANR	2733126	Argument	& value		2733070	4					
ANR	2733127	UnaryOperationExpression	& value		2733070	0					
ANR	2733128	UnaryOperator	&		2733070	0					
ANR	2733129	Identifier	value		2733070	1					
ANR	2733130	Argument	errmsg		2733070	5					
ANR	2733131	Identifier	errmsg		2733070	0					
ANR	2733132	ReturnStatement	return NULL ;	2824:4:92291:92302	2733070	1	True				
ANR	2733133	Identifier	NULL		2733070	0					
ANR	2733134	ExpressionStatement	xed = FALSE	2827:2:92333:92344	2733070	10	True				
ANR	2733135	AssignmentExpression	xed = FALSE		2733070	0		=			
ANR	2733136	Identifier	xed		2733070	0					
ANR	2733137	Identifier	FALSE		2733070	1					
ANR	2733138	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_KXER )		2733070	11					
ANR	2733139	Condition	operand -> flags & HEXAGON_OPERAND_IS_KXER	2828:6:92352:92391	2733070	0	True				
ANR	2733140	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_KXER		2733070	0		&			
ANR	2733141	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733142	Identifier	operand		2733070	0					
ANR	2733143	Identifier	flags		2733070	1					
ANR	2733144	Identifier	HEXAGON_OPERAND_IS_KXER		2733070	1					
ANR	2733145	CompoundStatement		15:4:342:342	2733070	1					
ANR	2733146	ExpressionStatement	xreg ++	2830:6:92406:92412	2733070	0	True				
ANR	2733147	PostIncDecOperationExpression	xreg ++		2733070	0					
ANR	2733148	Identifier	xreg		2733070	0					
ANR	2733149	IncDec	++		2733070	1					
ANR	2733150	ExpressionStatement	xer = TRUE	2831:6:92420:92430	2733070	1	True				
ANR	2733151	AssignmentExpression	xer = TRUE		2733070	0		=			
ANR	2733152	Identifier	xer		2733070	0					
ANR	2733153	Identifier	TRUE		2733070	1					
ANR	2733154	ExpressionStatement	xvalue = value	2832:6:92438:92452	2733070	2	True				
ANR	2733155	AssignmentExpression	xvalue = value		2733070	0		=			
ANR	2733156	Identifier	xvalue		2733070	0					
ANR	2733157	Identifier	value		2733070	1					
ANR	2733158	ElseStatement	else		2733070	0					
ANR	2733159	IfStatement	if ( xer && operand -> flags & HEXAGON_OPERAND_IS_KXED )		2733070	0					
ANR	2733160	Condition	xer && operand -> flags & HEXAGON_OPERAND_IS_KXED	2834:11:92471:92517	2733070	0	True				
ANR	2733161	AndExpression	xer && operand -> flags & HEXAGON_OPERAND_IS_KXED		2733070	0		&&			
ANR	2733162	Identifier	xer		2733070	0					
ANR	2733163	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_KXED		2733070	1		&			
ANR	2733164	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733165	Identifier	operand		2733070	0					
ANR	2733166	Identifier	flags		2733070	1					
ANR	2733167	Identifier	HEXAGON_OPERAND_IS_KXED		2733070	1					
ANR	2733168	CompoundStatement		21:4:468:468	2733070	1					
ANR	2733169	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_PC_RELATIVE )		2733070	0					
ANR	2733170	Condition	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE	2836:10:92536:92579	2733070	0	True				
ANR	2733171	BitAndExpression	operand -> flags & HEXAGON_OPERAND_PC_RELATIVE		2733070	0		&			
ANR	2733172	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733173	Identifier	operand		2733070	0					
ANR	2733174	Identifier	flags		2733070	1					
ANR	2733175	Identifier	HEXAGON_OPERAND_PC_RELATIVE		2733070	1					
ANR	2733176	CompoundStatement		23:8:534:534	2733070	1					
ANR	2733177	ExpressionStatement	xed = FALSE	2838:10:92602:92613	2733070	0	True				
ANR	2733178	AssignmentExpression	xed = FALSE		2733070	0		=			
ANR	2733179	Identifier	xed		2733070	0					
ANR	2733180	Identifier	FALSE		2733070	1					
ANR	2733181	ExpressionStatement	value -= paddr	2839:10:92625:92640	2733070	1	True				
ANR	2733182	AssignmentExpression	value -= paddr		2733070	0		-=			
ANR	2733183	Identifier	value		2733070	0					
ANR	2733184	Identifier	paddr		2733070	1					
ANR	2733185	ExpressionStatement	value >>= operand -> shift_count	2840:10:92652:92682	2733070	2	True				
ANR	2733186	AssignmentExpression	value >>= operand -> shift_count		2733070	0		>>=			
ANR	2733187	Identifier	value		2733070	0					
ANR	2733188	PtrMemberAccess	operand -> shift_count		2733070	1					
ANR	2733189	Identifier	operand		2733070	0					
ANR	2733190	Identifier	shift_count		2733070	1					
ANR	2733191	ExpressionStatement	value &= ~ ( ~0UL << 6 )	2841:10:92694:92716	2733070	3	True				
ANR	2733192	AssignmentExpression	value &= ~ ( ~0UL << 6 )		2733070	0		&=			
ANR	2733193	Identifier	value		2733070	0					
ANR	2733194	UnaryOperationExpression	~ ( ~0UL << 6 )		2733070	1					
ANR	2733195	UnaryOperator	~		2733070	0					
ANR	2733196	ShiftExpression	~0UL << 6		2733070	1		<<			
ANR	2733197	Identifier	~0UL		2733070	0					
ANR	2733198	PrimaryExpression	6		2733070	1					
ANR	2733199	ExpressionStatement	value += xvalue + paddr	2842:10:92728:92752	2733070	4	True				
ANR	2733200	AssignmentExpression	value += xvalue + paddr		2733070	0		+=			
ANR	2733201	Identifier	value		2733070	0					
ANR	2733202	AdditiveExpression	xvalue + paddr		2733070	1		+			
ANR	2733203	Identifier	xvalue		2733070	0					
ANR	2733204	Identifier	paddr		2733070	1					
ANR	2733205	ElseStatement	else		2733070	0					
ANR	2733206	CompoundStatement		31:8:727:727	2733070	0					
ANR	2733207	ExpressionStatement	xed = TRUE	2846:10:92795:92805	2733070	0	True				
ANR	2733208	AssignmentExpression	xed = TRUE		2733070	0		=			
ANR	2733209	Identifier	xed		2733070	0					
ANR	2733210	Identifier	TRUE		2733070	1					
ANR	2733211	ExpressionStatement	value >>= operand -> shift_count	2847:10:92817:92847	2733070	1	True				
ANR	2733212	AssignmentExpression	value >>= operand -> shift_count		2733070	0		>>=			
ANR	2733213	Identifier	value		2733070	0					
ANR	2733214	PtrMemberAccess	operand -> shift_count		2733070	1					
ANR	2733215	Identifier	operand		2733070	0					
ANR	2733216	Identifier	shift_count		2733070	1					
ANR	2733217	ExpressionStatement	value &= ~ ( ~0UL << 6 )	2848:10:92859:92881	2733070	2	True				
ANR	2733218	AssignmentExpression	value &= ~ ( ~0UL << 6 )		2733070	0		&=			
ANR	2733219	Identifier	value		2733070	0					
ANR	2733220	UnaryOperationExpression	~ ( ~0UL << 6 )		2733070	1					
ANR	2733221	UnaryOperator	~		2733070	0					
ANR	2733222	ShiftExpression	~0UL << 6		2733070	1		<<			
ANR	2733223	Identifier	~0UL		2733070	0					
ANR	2733224	PrimaryExpression	6		2733070	1					
ANR	2733225	ExpressionStatement	value += xvalue	2849:10:92893:92909	2733070	3	True				
ANR	2733226	AssignmentExpression	value += xvalue		2733070	0		+=			
ANR	2733227	Identifier	value		2733070	0					
ANR	2733228	Identifier	xvalue		2733070	1					
ANR	2733229	ExpressionStatement	xer = xvalue = 0	2851:6:92927:92943	2733070	1	True				
ANR	2733230	AssignmentExpression	xer = xvalue = 0		2733070	0		=			
ANR	2733231	Identifier	xer		2733070	0					
ANR	2733232	AssignmentExpression	xvalue = 0		2733070	1		=			
ANR	2733233	Identifier	xvalue		2733070	0					
ANR	2733234	PrimaryExpression	0		2733070	1					
ANR	2733235	IfStatement	if ( previous != paddr )		2733070	12					
ANR	2733236	Condition	previous != paddr	2855:6:92980:92996	2733070	0	True				
ANR	2733237	EqualityExpression	previous != paddr		2733070	0		!=			
ANR	2733238	Identifier	previous		2733070	0					
ANR	2733239	Identifier	paddr		2733070	1					
ANR	2733240	CompoundStatement		42:4:947:947	2733070	1					
ANR	2733241	ExpressionStatement	previous = paddr	2857:6:93011:93027	2733070	0	True				
ANR	2733242	AssignmentExpression	previous = paddr		2733070	0		=			
ANR	2733243	Identifier	previous		2733070	0					
ANR	2733244	Identifier	paddr		2733070	1					
ANR	2733245	ExpressionStatement	xreg = 0	2858:6:93035:93043	2733070	1	True				
ANR	2733246	AssignmentExpression	xreg = 0		2733070	0		=			
ANR	2733247	Identifier	xreg		2733070	0					
ANR	2733248	PrimaryExpression	0		2733070	1					
ANR	2733249	ExpressionStatement	"memset ( reg , 0 , sizeof ( reg ) )"	2859:6:93051:93080	2733070	2	True				
ANR	2733250	CallExpression	"memset ( reg , 0 , sizeof ( reg ) )"		2733070	0					
ANR	2733251	Callee	memset		2733070	0					
ANR	2733252	Identifier	memset		2733070	0					
ANR	2733253	ArgumentList	reg		2733070	1					
ANR	2733254	Argument	reg		2733070	0					
ANR	2733255	Identifier	reg		2733070	0					
ANR	2733256	Argument	0		2733070	1					
ANR	2733257	PrimaryExpression	0		2733070	0					
ANR	2733258	Argument	sizeof ( reg )		2733070	2					
ANR	2733259	SizeofExpression	sizeof ( reg )		2733070	0					
ANR	2733260	Sizeof	sizeof		2733070	0					
ANR	2733261	SizeofOperand	reg		2733070	1					
ANR	2733262	ExpressionStatement	ireg = ( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS	2862:2:93091:93174	2733070	13	True				
ANR	2733263	AssignmentExpression	ireg = ( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS		2733070	0		=			
ANR	2733264	Identifier	ireg		2733070	0					
ANR	2733265	MultiplicativeExpression	( ( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN ) ) / MAX_PACKET_INSNS		2733070	1		/			
ANR	2733266	MultiplicativeExpression	( iaddr - paddr ) % ( MAX_PACKET_INSNS * HEXAGON_INSN_LEN )		2733070	0		%			
ANR	2733267	AdditiveExpression	iaddr - paddr		2733070	0		-			
ANR	2733268	Identifier	iaddr		2733070	0					
ANR	2733269	Identifier	paddr		2733070	1					
ANR	2733270	MultiplicativeExpression	MAX_PACKET_INSNS * HEXAGON_INSN_LEN		2733070	1		*			
ANR	2733271	Identifier	MAX_PACKET_INSNS		2733070	0					
ANR	2733272	Identifier	HEXAGON_INSN_LEN		2733070	1					
ANR	2733273	Identifier	MAX_PACKET_INSNS		2733070	1					
ANR	2733274	ExpressionStatement	ireg -= xreg	2863:2:93178:93190	2733070	14	True				
ANR	2733275	AssignmentExpression	ireg -= xreg		2733070	0		-=			
ANR	2733276	Identifier	ireg		2733070	0					
ANR	2733277	Identifier	xreg		2733070	1					
ANR	2733278	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) ) )		2733070	15					
ANR	2733279	Condition	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) )	2864:6:93198:93412	2733070	0	True				
ANR	2733280	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_WRITE ) && ( ( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET ) )		2733070	0		&&			
ANR	2733281	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_WRITE		2733070	0		&			
ANR	2733282	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733283	Identifier	operand		2733070	0					
ANR	2733284	Identifier	flags		2733070	1					
ANR	2733285	Identifier	HEXAGON_OPERAND_IS_WRITE		2733070	1					
ANR	2733286	OrExpression	( operand -> flags & HEXAGON_OPERAND_IS_REGISTER ) || ( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		2733070	1		||			
ANR	2733287	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_REGISTER		2733070	0		&			
ANR	2733288	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733289	Identifier	operand		2733070	0					
ANR	2733290	Identifier	flags		2733070	1					
ANR	2733291	Identifier	HEXAGON_OPERAND_IS_REGISTER		2733070	1					
ANR	2733292	OrExpression	( operand -> flags & HEXAGON_OPERAND_IS_PAIR ) || ( operand -> flags & HEXAGON_OPERAND_IS_SUBSET )		2733070	1		||			
ANR	2733293	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2733070	0		&			
ANR	2733294	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733295	Identifier	operand		2733070	0					
ANR	2733296	Identifier	flags		2733070	1					
ANR	2733297	Identifier	HEXAGON_OPERAND_IS_PAIR		2733070	1					
ANR	2733298	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SUBSET		2733070	1		&			
ANR	2733299	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733300	Identifier	operand		2733070	0					
ANR	2733301	Identifier	flags		2733070	1					
ANR	2733302	Identifier	HEXAGON_OPERAND_IS_SUBSET		2733070	1					
ANR	2733303	CompoundStatement		54:4:1363:1363	2733070	1					
ANR	2733304	IfStatement	if ( ! reg [ ireg ] . y )		2733070	0					
ANR	2733305	Condition	! reg [ ireg ] . y	2869:10:93431:93443	2733070	0	True				
ANR	2733306	UnaryOperationExpression	! reg [ ireg ] . y		2733070	0					
ANR	2733307	UnaryOperator	!		2733070	0					
ANR	2733308	MemberAccess	reg [ ireg ] . y		2733070	1					
ANR	2733309	ArrayIndexing	reg [ ireg ]		2733070	0					
ANR	2733310	Identifier	reg		2733070	0					
ANR	2733311	Identifier	ireg		2733070	1					
ANR	2733312	Identifier	y		2733070	1					
ANR	2733313	CompoundStatement		56:8:1398:1398	2733070	1					
ANR	2733314	ExpressionStatement	reg [ ireg ] . n = value	2871:10:93466:93486	2733070	0	True				
ANR	2733315	AssignmentExpression	reg [ ireg ] . n = value		2733070	0		=			
ANR	2733316	MemberAccess	reg [ ireg ] . n		2733070	0					
ANR	2733317	ArrayIndexing	reg [ ireg ]		2733070	0					
ANR	2733318	Identifier	reg		2733070	0					
ANR	2733319	Identifier	ireg		2733070	1					
ANR	2733320	Identifier	n		2733070	1					
ANR	2733321	Identifier	value		2733070	1					
ANR	2733322	ExpressionStatement	reg [ ireg ] . y = TRUE	2872:10:93498:93517	2733070	1	True				
ANR	2733323	AssignmentExpression	reg [ ireg ] . y = TRUE		2733070	0		=			
ANR	2733324	MemberAccess	reg [ ireg ] . y		2733070	0					
ANR	2733325	ArrayIndexing	reg [ ireg ]		2733070	0					
ANR	2733326	Identifier	reg		2733070	0					
ANR	2733327	Identifier	ireg		2733070	1					
ANR	2733328	Identifier	y		2733070	1					
ANR	2733329	Identifier	TRUE		2733070	1					
ANR	2733330	ElseStatement	else		2733070	0					
ANR	2733331	IfStatement	if ( ( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW ) )		2733070	0					
ANR	2733332	Condition	( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW )	2875:11:93546:93643	2733070	0	True				
ANR	2733333	AndExpression	( operand -> flags & HEXAGON_OPERAND_IS_READ ) && ( operand -> flags & HEXAGON_OPERAND_IS_NEW )		2733070	0		&&			
ANR	2733334	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_READ		2733070	0		&			
ANR	2733335	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733336	Identifier	operand		2733070	0					
ANR	2733337	Identifier	flags		2733070	1					
ANR	2733338	Identifier	HEXAGON_OPERAND_IS_READ		2733070	1					
ANR	2733339	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_NEW		2733070	1		&			
ANR	2733340	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733341	Identifier	operand		2733070	0					
ANR	2733342	Identifier	flags		2733070	1					
ANR	2733343	Identifier	HEXAGON_OPERAND_IS_NEW		2733070	1					
ANR	2733344	CompoundStatement		63:4:1594:1594	2733070	1					
ANR	2733345	ExpressionStatement	value = reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )	2878:6:93658:93757	2733070	0	True				
ANR	2733346	AssignmentExpression	value = reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )		2733070	0		=			
ANR	2733347	Identifier	value		2733070	0					
ANR	2733348	AdditiveExpression	reg [ ireg - ( value / 2 ) ] . n + ( ( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 ) )		2733070	1		+			
ANR	2733349	MemberAccess	reg [ ireg - ( value / 2 ) ] . n		2733070	0					
ANR	2733350	ArrayIndexing	reg [ ireg - ( value / 2 ) ]		2733070	0					
ANR	2733351	Identifier	reg		2733070	0					
ANR	2733352	AdditiveExpression	ireg - ( value / 2 )		2733070	1		-			
ANR	2733353	Identifier	ireg		2733070	0					
ANR	2733354	MultiplicativeExpression	value / 2		2733070	1		/			
ANR	2733355	Identifier	value		2733070	0					
ANR	2733356	PrimaryExpression	2		2733070	1					
ANR	2733357	Identifier	n		2733070	1					
ANR	2733358	ExclusiveOrExpression	( reg [ ireg - ( value / 2 ) ] . n % 2 ) ^ ( value % 2 )		2733070	1		^			
ANR	2733359	MultiplicativeExpression	reg [ ireg - ( value / 2 ) ] . n % 2		2733070	0		%			
ANR	2733360	MemberAccess	reg [ ireg - ( value / 2 ) ] . n		2733070	0					
ANR	2733361	ArrayIndexing	reg [ ireg - ( value / 2 ) ]		2733070	0					
ANR	2733362	Identifier	reg		2733070	0					
ANR	2733363	AdditiveExpression	ireg - ( value / 2 )		2733070	1		-			
ANR	2733364	Identifier	ireg		2733070	0					
ANR	2733365	MultiplicativeExpression	value / 2		2733070	1		/			
ANR	2733366	Identifier	value		2733070	0					
ANR	2733367	PrimaryExpression	2		2733070	1					
ANR	2733368	Identifier	n		2733070	1					
ANR	2733369	PrimaryExpression	2		2733070	1					
ANR	2733370	MultiplicativeExpression	value % 2		2733070	1		%			
ANR	2733371	Identifier	value		2733070	0					
ANR	2733372	PrimaryExpression	2		2733070	1					
ANR	2733373	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_PAIR )		2733070	16					
ANR	2733374	Condition	operand -> flags & HEXAGON_OPERAND_IS_PAIR	2882:6:93772:93811	2733070	0	True				
ANR	2733375	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_PAIR		2733070	0		&			
ANR	2733376	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733377	Identifier	operand		2733070	0					
ANR	2733378	Identifier	flags		2733070	1					
ANR	2733379	Identifier	HEXAGON_OPERAND_IS_PAIR		2733070	1					
ANR	2733380	ExpressionStatement	"n = sprintf ( buf , operand -> dis_fmt , value + 1 , value )"	2883:4:93818:93871	2733070	1	True				
ANR	2733381	AssignmentExpression	"n = sprintf ( buf , operand -> dis_fmt , value + 1 , value )"		2733070	0		=			
ANR	2733382	Identifier	n		2733070	0					
ANR	2733383	CallExpression	"sprintf ( buf , operand -> dis_fmt , value + 1 , value )"		2733070	1					
ANR	2733384	Callee	sprintf		2733070	0					
ANR	2733385	Identifier	sprintf		2733070	0					
ANR	2733386	ArgumentList	buf		2733070	1					
ANR	2733387	Argument	buf		2733070	0					
ANR	2733388	Identifier	buf		2733070	0					
ANR	2733389	Argument	operand -> dis_fmt		2733070	1					
ANR	2733390	PtrMemberAccess	operand -> dis_fmt		2733070	0					
ANR	2733391	Identifier	operand		2733070	0					
ANR	2733392	Identifier	dis_fmt		2733070	1					
ANR	2733393	Argument	value + 1		2733070	2					
ANR	2733394	AdditiveExpression	value + 1		2733070	0		+			
ANR	2733395	Identifier	value		2733070	0					
ANR	2733396	PrimaryExpression	1		2733070	1					
ANR	2733397	Argument	value		2733070	3					
ANR	2733398	Identifier	value		2733070	0					
ANR	2733399	ElseStatement	else		2733070	0					
ANR	2733400	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_CONTROL )		2733070	0					
ANR	2733401	Condition	operand -> flags & HEXAGON_OPERAND_IS_CONTROL	2884:11:93884:93926	2733070	0	True				
ANR	2733402	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_CONTROL		2733070	0		&			
ANR	2733403	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733404	Identifier	operand		2733070	0					
ANR	2733405	Identifier	flags		2733070	1					
ANR	2733406	Identifier	HEXAGON_OPERAND_IS_CONTROL		2733070	1					
ANR	2733407	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_control_regs_count , hexagon_control_regs , buf , errmsg ) ) ;"	2885:4:93933:94100	2733070	1	True				
ANR	2733408	CallExpression	"hexagon_dis_named_reg ( value , hexagon_control_regs_count , hexagon_control_regs , buf , errmsg )"		2733070	0					
ANR	2733409	Callee	hexagon_dis_named_reg		2733070	0					
ANR	2733410	Identifier	hexagon_dis_named_reg		2733070	0					
ANR	2733411	ArgumentList	value		2733070	1					
ANR	2733412	Argument	value		2733070	0					
ANR	2733413	Identifier	value		2733070	0					
ANR	2733414	Argument	hexagon_control_regs_count		2733070	1					
ANR	2733415	Identifier	hexagon_control_regs_count		2733070	0					
ANR	2733416	Argument	hexagon_control_regs		2733070	2					
ANR	2733417	Identifier	hexagon_control_regs		2733070	0					
ANR	2733418	Argument	buf		2733070	3					
ANR	2733419	Identifier	buf		2733070	0					
ANR	2733420	Argument	errmsg		2733070	4					
ANR	2733421	Identifier	errmsg		2733070	0					
ANR	2733422	ElseStatement	else		2733070	0					
ANR	2733423	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_GUEST )		2733070	0					
ANR	2733424	Condition	operand -> flags & HEXAGON_OPERAND_IS_GUEST	2888:11:94113:94153	2733070	0	True				
ANR	2733425	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_GUEST		2733070	0		&			
ANR	2733426	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733427	Identifier	operand		2733070	0					
ANR	2733428	Identifier	flags		2733070	1					
ANR	2733429	Identifier	HEXAGON_OPERAND_IS_GUEST		2733070	1					
ANR	2733430	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_guest_regs_count , hexagon_guest_regs , buf , errmsg ) ) ;"	2889:4:94160:94323	2733070	1	True				
ANR	2733431	CallExpression	"hexagon_dis_named_reg ( value , hexagon_guest_regs_count , hexagon_guest_regs , buf , errmsg )"		2733070	0					
ANR	2733432	Callee	hexagon_dis_named_reg		2733070	0					
ANR	2733433	Identifier	hexagon_dis_named_reg		2733070	0					
ANR	2733434	ArgumentList	value		2733070	1					
ANR	2733435	Argument	value		2733070	0					
ANR	2733436	Identifier	value		2733070	0					
ANR	2733437	Argument	hexagon_guest_regs_count		2733070	1					
ANR	2733438	Identifier	hexagon_guest_regs_count		2733070	0					
ANR	2733439	Argument	hexagon_guest_regs		2733070	2					
ANR	2733440	Identifier	hexagon_guest_regs		2733070	0					
ANR	2733441	Argument	buf		2733070	3					
ANR	2733442	Identifier	buf		2733070	0					
ANR	2733443	Argument	errmsg		2733070	4					
ANR	2733444	Identifier	errmsg		2733070	0					
ANR	2733445	ElseStatement	else		2733070	0					
ANR	2733446	IfStatement	if ( operand -> flags & HEXAGON_OPERAND_IS_SYSTEM )		2733070	0					
ANR	2733447	Condition	operand -> flags & HEXAGON_OPERAND_IS_SYSTEM	2892:11:94336:94377	2733070	0	True				
ANR	2733448	BitAndExpression	operand -> flags & HEXAGON_OPERAND_IS_SYSTEM		2733070	0		&			
ANR	2733449	PtrMemberAccess	operand -> flags		2733070	0					
ANR	2733450	Identifier	operand		2733070	0					
ANR	2733451	Identifier	flags		2733070	1					
ANR	2733452	Identifier	HEXAGON_OPERAND_IS_SYSTEM		2733070	1					
ANR	2733453	ReturnStatement	"return ( hexagon_dis_named_reg ( value , hexagon_supervisor_regs_count , hexagon_supervisor_regs , buf , errmsg ) ) ;"	2893:4:94384:94557	2733070	1	True				
ANR	2733454	CallExpression	"hexagon_dis_named_reg ( value , hexagon_supervisor_regs_count , hexagon_supervisor_regs , buf , errmsg )"		2733070	0					
ANR	2733455	Callee	hexagon_dis_named_reg		2733070	0					
ANR	2733456	Identifier	hexagon_dis_named_reg		2733070	0					
ANR	2733457	ArgumentList	value		2733070	1					
ANR	2733458	Argument	value		2733070	0					
ANR	2733459	Identifier	value		2733070	0					
ANR	2733460	Argument	hexagon_supervisor_regs_count		2733070	1					
ANR	2733461	Identifier	hexagon_supervisor_regs_count		2733070	0					
ANR	2733462	Argument	hexagon_supervisor_regs		2733070	2					
ANR	2733463	Identifier	hexagon_supervisor_regs		2733070	0					
ANR	2733464	Argument	buf		2733070	3					
ANR	2733465	Identifier	buf		2733070	0					
ANR	2733466	Argument	errmsg		2733070	4					
ANR	2733467	Identifier	errmsg		2733070	0					
ANR	2733468	ElseStatement	else		2733070	0					
ANR	2733469	CompoundStatement		83:4:2514:2514	2733070	0					
ANR	2733470	ExpressionStatement	n = 0	2898:6:94578:94583	2733070	0	True				
ANR	2733471	AssignmentExpression	n = 0		2733070	0		=			
ANR	2733472	Identifier	n		2733070	0					
ANR	2733473	PrimaryExpression	0		2733070	1					
ANR	2733474	IfStatement	if ( xed )		2733070	1					
ANR	2733475	Condition	xed	2899:10:94595:94597	2733070	0	True				
ANR	2733476	Identifier	xed		2733070	0					
ANR	2733477	ExpressionStatement	buf [ n ++ ] = '#'	2900:8:94608:94623	2733070	1	True				
ANR	2733478	AssignmentExpression	buf [ n ++ ] = '#'		2733070	0		=			
ANR	2733479	ArrayIndexing	buf [ n ++ ]		2733070	0					
ANR	2733480	Identifier	buf		2733070	0					
ANR	2733481	PostIncDecOperationExpression	n ++		2733070	1					
ANR	2733482	Identifier	n		2733070	0					
ANR	2733483	IncDec	++		2733070	1					
ANR	2733484	PrimaryExpression	'#'		2733070	1					
ANR	2733485	ExpressionStatement	"n += sprintf ( buf + n , operand -> dis_fmt , value )"	2901:6:94631:94678	2733070	2	True				
ANR	2733486	AssignmentExpression	"n += sprintf ( buf + n , operand -> dis_fmt , value )"		2733070	0		+=			
ANR	2733487	Identifier	n		2733070	0					
ANR	2733488	CallExpression	"sprintf ( buf + n , operand -> dis_fmt , value )"		2733070	1					
ANR	2733489	Callee	sprintf		2733070	0					
ANR	2733490	Identifier	sprintf		2733070	0					
ANR	2733491	ArgumentList	buf + n		2733070	1					
ANR	2733492	Argument	buf + n		2733070	0					
ANR	2733493	AdditiveExpression	buf + n		2733070	0		+			
ANR	2733494	Identifier	buf		2733070	0					
ANR	2733495	Identifier	n		2733070	1					
ANR	2733496	Argument	operand -> dis_fmt		2733070	1					
ANR	2733497	PtrMemberAccess	operand -> dis_fmt		2733070	0					
ANR	2733498	Identifier	operand		2733070	0					
ANR	2733499	Identifier	dis_fmt		2733070	1					
ANR	2733500	Argument	value		2733070	2					
ANR	2733501	Identifier	value		2733070	0					
ANR	2733502	IfStatement	if ( n > 0 )		2733070	17					
ANR	2733503	Condition	n > 0	2904:6:94693:94697	2733070	0	True				
ANR	2733504	RelationalExpression	n > 0		2733070	0		>			
ANR	2733505	Identifier	n		2733070	0					
ANR	2733506	PrimaryExpression	0		2733070	1					
ANR	2733507	ReturnStatement	return ( buf + n ) ;	2905:4:94704:94720	2733070	1	True				
ANR	2733508	AdditiveExpression	buf + n		2733070	0		+			
ANR	2733509	Identifier	buf		2733070	0					
ANR	2733510	Identifier	n		2733070	1					
ANR	2733511	ElseStatement	else		2733070	0					
ANR	2733512	CompoundStatement		93:4:2677:2677	2733070	0					
ANR	2733513	IfStatement	if ( errmsg )		2733070	0					
ANR	2733514	Condition	errmsg	2908:10:94745:94750	2733070	0	True				
ANR	2733515	Identifier	errmsg		2733070	0					
ANR	2733516	CompoundStatement		96:17:2724:2737	2733070	1					
ANR	2733517	Statement	static	2910:10:94773:94778	2733070	0	True				
ANR	2733518	IdentifierDeclStatement	char xx [ 100 ] ;	2910:17:94780:94793	2733070	1	True				
ANR	2733519	IdentifierDecl	xx [ 100 ]		2733070	0					
ANR	2733520	IdentifierDeclType	char [ 100 ]		2733070	0					
ANR	2733521	Identifier	xx		2733070	1					
ANR	2733522	PrimaryExpression	100		2733070	2					
ANR	2733523	ExpressionStatement	"sprintf ( xx , ""bad return code from sprintf: %d"" , n )"	2911:10:94805:94856	2733070	2	True				
ANR	2733524	CallExpression	"sprintf ( xx , ""bad return code from sprintf: %d"" , n )"		2733070	0					
ANR	2733525	Callee	sprintf		2733070	0					
ANR	2733526	Identifier	sprintf		2733070	0					
ANR	2733527	ArgumentList	xx		2733070	1					
ANR	2733528	Argument	xx		2733070	0					
ANR	2733529	Identifier	xx		2733070	0					
ANR	2733530	Argument	"""bad return code from sprintf: %d"""		2733070	1					
ANR	2733531	PrimaryExpression	"""bad return code from sprintf: %d"""		2733070	0					
ANR	2733532	Argument	n		2733070	2					
ANR	2733533	Identifier	n		2733070	0					
ANR	2733534	ExpressionStatement	* errmsg = xx	2912:10:94868:94880	2733070	3	True				
ANR	2733535	AssignmentExpression	* errmsg = xx		2733070	0		=			
ANR	2733536	UnaryOperationExpression	* errmsg		2733070	0					
ANR	2733537	UnaryOperator	*		2733070	0					
ANR	2733538	Identifier	errmsg		2733070	1					
ANR	2733539	Identifier	xx		2733070	1					
ANR	2733540	ReturnStatement	return NULL ;	2914:6:94898:94909	2733070	1	True				
ANR	2733541	Identifier	NULL		2733070	0					
ANR	2733542	ReturnType	char *		2733070	1					
ANR	2733543	Identifier	hexagon_dis_operand		2733070	2					
ANR	2733544	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , bfd_vma iaddr , bfd_vma paddr , char * enc , char * buf , char * * errmsg"		2733070	3					
ANR	2733545	Parameter	const hexagon_operand * operand	2813:1:91936:91965	2733070	0	True				
ANR	2733546	ParameterType	const hexagon_operand *		2733070	0					
ANR	2733547	Identifier	operand		2733070	1					
ANR	2733548	Parameter	hexagon_insn insn	2813:33:91968:91984	2733070	1	True				
ANR	2733549	ParameterType	hexagon_insn		2733070	0					
ANR	2733550	Identifier	insn		2733070	1					
ANR	2733551	Parameter	bfd_vma iaddr	2813:52:91987:91999	2733070	2	True				
ANR	2733552	ParameterType	bfd_vma		2733070	0					
ANR	2733553	Identifier	iaddr		2733070	1					
ANR	2733554	Parameter	bfd_vma paddr	2813:67:92002:92014	2733070	3	True				
ANR	2733555	ParameterType	bfd_vma		2733070	0					
ANR	2733556	Identifier	paddr		2733070	1					
ANR	2733557	Parameter	char * enc	2814:1:92018:92026	2733070	4	True				
ANR	2733558	ParameterType	char *		2733070	0					
ANR	2733559	Identifier	enc		2733070	1					
ANR	2733560	Parameter	char * buf	2814:12:92029:92037	2733070	5	True				
ANR	2733561	ParameterType	char *		2733070	0					
ANR	2733562	Identifier	buf		2733070	1					
ANR	2733563	Parameter	char * * errmsg	2814:23:92040:92052	2733070	6	True				
ANR	2733564	ParameterType	char * *		2733070	0					
ANR	2733565	Identifier	errmsg		2733070	1					
ANR	2733566	CFGEntryNode	ENTRY		2733070		True				
ANR	2733567	CFGExitNode	EXIT		2733070		True				
ANR	2733568	Symbol	xx		2733070						
ANR	2733569	Symbol	& value		2733070						
ANR	2733570	Symbol	HEXAGON_OPERAND_IS_GUEST		2733070						
ANR	2733571	Symbol	hexagon_guest_regs_count		2733070						
ANR	2733572	Symbol	HEXAGON_OPERAND_IS_KXED		2733070						
ANR	2733573	Symbol	xvalue		2733070						
ANR	2733574	Symbol	sprintf		2733070						
ANR	2733575	Symbol	reg		2733070						
ANR	2733576	Symbol	xed		2733070						
ANR	2733577	Symbol	HEXAGON_OPERAND_IS_PAIR		2733070						
ANR	2733578	Symbol	HEXAGON_OPERAND_IS_KXER		2733070						
ANR	2733579	Symbol	hexagon_control_regs_count		2733070						
ANR	2733580	Symbol	hexagon_dis_named_reg		2733070						
ANR	2733581	Symbol	* buf		2733070						
ANR	2733582	Symbol	NULL		2733070						
ANR	2733583	Symbol	xer		2733070						
ANR	2733584	Symbol	xreg		2733070						
ANR	2733585	Symbol	HEXAGON_OPERAND_IS_SUBSET		2733070						
ANR	2733586	Symbol	errmsg		2733070						
ANR	2733587	Symbol	TRUE		2733070						
ANR	2733588	Symbol	HEXAGON_OPERAND_PC_RELATIVE		2733070						
ANR	2733589	Symbol	iaddr		2733070						
ANR	2733590	Symbol	~0UL		2733070						
ANR	2733591	Symbol	paddr		2733070						
ANR	2733592	Symbol	reg [ ireg - ( value / 2 ) ] . n		2733070						
ANR	2733593	Symbol	ireg		2733070						
ANR	2733594	Symbol	* errmsg		2733070						
ANR	2733595	Symbol	* operand		2733070						
ANR	2733596	Symbol	operand -> dis_fmt		2733070						
ANR	2733597	Symbol	HEXAGON_OPERAND_IS_CONTROL		2733070						
ANR	2733598	Symbol	hexagon_extract_operand		2733070						
ANR	2733599	Symbol	hexagon_supervisor_regs_count		2733070						
ANR	2733600	Symbol	reg [ ireg ] . y		2733070						
ANR	2733601	Symbol	enc		2733070						
ANR	2733602	Symbol	value		2733070						
ANR	2733603	Symbol	* ireg		2733070						
ANR	2733604	Symbol	HEXAGON_OPERAND_IS_READ		2733070						
ANR	2733605	Symbol	hexagon_supervisor_regs		2733070						
ANR	2733606	Symbol	HEXAGON_OPERAND_IS_WRITE		2733070						
ANR	2733607	Symbol	previous		2733070						
ANR	2733608	Symbol	operand -> flags		2733070						
ANR	2733609	Symbol	hexagon_guest_regs		2733070						
ANR	2733610	Symbol	HEXAGON_INSN_LEN		2733070						
ANR	2733611	Symbol	HEXAGON_OPERAND_IS_SYSTEM		2733070						
ANR	2733612	Symbol	reg [ ireg ] . n		2733070						
ANR	2733613	Symbol	n		2733070						
ANR	2733614	Symbol	HEXAGON_OPERAND_IS_REGISTER		2733070						
ANR	2733615	Symbol	HEXAGON_OPERAND_IS_NEW		2733070						
ANR	2733616	Symbol	insn		2733070						
ANR	2733617	Symbol	operand -> shift_count		2733070						
ANR	2733618	Symbol	buf		2733070						
ANR	2733619	Symbol	* value		2733070						
ANR	2733620	Symbol	hexagon_control_regs		2733070						
ANR	2733621	Symbol	MAX_PACKET_INSNS		2733070						
ANR	2733622	Symbol	FALSE		2733070						
ANR	2733623	Symbol	operand		2733070						
ANR	2733624	Symbol	* reg		2733070						
ANR	2733625	Function	hexagon_dis_opcode	2918:0:94920:99337							
ANR	2733626	FunctionDef	"hexagon_dis_opcode (char * buf , hexagon_insn insn , bfd_vma address , const hexagon_opcode * opcode , char * * errmsg)"		2733625	0					
ANR	2733627	CompoundStatement		2922:0:95037:99337	2733625	0					
ANR	2733628	Statement	static	2923:2:95041:95046	2733625	0	True				
ANR	2733629	IdentifierDeclStatement	char temp [ 40 ] ;	2923:9:95048:95062	2733625	1	True				
ANR	2733630	IdentifierDecl	temp [ 40 ]		2733625	0					
ANR	2733631	IdentifierDeclType	char [ 40 ]		2733625	0					
ANR	2733632	Identifier	temp		2733625	1					
ANR	2733633	PrimaryExpression	40		2733625	2					
ANR	2733634	Statement	static	2924:2:95066:95071	2733625	2	True				
ANR	2733635	IdentifierDeclStatement	int in_packet ;	2924:9:95073:95086	2733625	3	True				
ANR	2733636	IdentifierDecl	in_packet		2733625	0					
ANR	2733637	IdentifierDeclType	int		2733625	0					
ANR	2733638	Identifier	in_packet		2733625	1					
ANR	2733639	Statement	static	2925:2:95090:95095	2733625	4	True				
ANR	2733640	IdentifierDeclStatement	int end_inner ;	2925:9:95097:95110	2733625	5	True				
ANR	2733641	IdentifierDecl	end_inner		2733625	0					
ANR	2733642	IdentifierDeclType	int		2733625	0					
ANR	2733643	Identifier	end_inner		2733625	1					
ANR	2733644	Statement	static	2926:2:95114:95119	2733625	6	True				
ANR	2733645	IdentifierDeclStatement	int end_outer ;	2926:9:95121:95134	2733625	7	True				
ANR	2733646	IdentifierDecl	end_outer		2733625	0					
ANR	2733647	IdentifierDeclType	int		2733625	0					
ANR	2733648	Identifier	end_outer		2733625	1					
ANR	2733649	Statement	static	2927:2:95138:95143	2733625	8	True				
ANR	2733650	IdentifierDeclStatement	bfd_vma packet_addr ;	2927:9:95145:95164	2733625	9	True				
ANR	2733651	IdentifierDecl	packet_addr		2733625	0					
ANR	2733652	IdentifierDeclType	bfd_vma		2733625	0					
ANR	2733653	Identifier	packet_addr		2733625	1					
ANR	2733654	IdentifierDeclStatement	hexagon_insn packet_bits = HEXAGON_END_PACKET_GET ( insn ) ;	2928:2:95168:95224	2733625	10	True				
ANR	2733655	IdentifierDecl	packet_bits = HEXAGON_END_PACKET_GET ( insn )		2733625	0					
ANR	2733656	IdentifierDeclType	hexagon_insn		2733625	0					
ANR	2733657	Identifier	packet_bits		2733625	1					
ANR	2733658	AssignmentExpression	packet_bits = HEXAGON_END_PACKET_GET ( insn )		2733625	2		=			
ANR	2733659	Identifier	packet_bits		2733625	0					
ANR	2733660	CallExpression	HEXAGON_END_PACKET_GET ( insn )		2733625	1					
ANR	2733661	Callee	HEXAGON_END_PACKET_GET		2733625	0					
ANR	2733662	Identifier	HEXAGON_END_PACKET_GET		2733625	0					
ANR	2733663	ArgumentList	insn		2733625	1					
ANR	2733664	Argument	insn		2733625	0					
ANR	2733665	Identifier	insn		2733625	0					
ANR	2733666	IdentifierDeclStatement	int end_packet = FALSE ;	2929:2:95228:95250	2733625	11	True				
ANR	2733667	IdentifierDecl	end_packet = FALSE		2733625	0					
ANR	2733668	IdentifierDeclType	int		2733625	0					
ANR	2733669	Identifier	end_packet		2733625	1					
ANR	2733670	AssignmentExpression	end_packet = FALSE		2733625	2		=			
ANR	2733671	Identifier	FALSE		2733625	0					
ANR	2733672	Identifier	FALSE		2733625	1					
ANR	2733673	IdentifierDeclStatement	char * src = opcode -> syntax ;	2930:2:95254:95280	2733625	12	True				
ANR	2733674	IdentifierDecl	* src = opcode -> syntax		2733625	0					
ANR	2733675	IdentifierDeclType	char *		2733625	0					
ANR	2733676	Identifier	src		2733625	1					
ANR	2733677	AssignmentExpression	* src = opcode -> syntax		2733625	2		=			
ANR	2733678	Identifier	src		2733625	0					
ANR	2733679	PtrMemberAccess	opcode -> syntax		2733625	1					
ANR	2733680	Identifier	opcode		2733625	0					
ANR	2733681	Identifier	syntax		2733625	1					
ANR	2733682	IdentifierDeclStatement	char * dst = buf ;	2931:2:95284:95299	2733625	13	True				
ANR	2733683	IdentifierDecl	* dst = buf		2733625	0					
ANR	2733684	IdentifierDeclType	char *		2733625	0					
ANR	2733685	Identifier	dst		2733625	1					
ANR	2733686	AssignmentExpression	* dst = buf		2733625	2		=			
ANR	2733687	Identifier	buf		2733625	0					
ANR	2733688	Identifier	buf		2733625	1					
ANR	2733689	SwitchStatement	switch ( packet_bits )		2733625	14					
ANR	2733690	Condition	packet_bits	2933:10:95312:95322	2733625	0	True				
ANR	2733691	Identifier	packet_bits		2733625	0					
ANR	2733692	CompoundStatement		13:4:291:291	2733625	1					
ANR	2733693	Label	case HEXAGON_END_PACKET :	2935:6:95337:95360	2733625	0	True				
ANR	2733694	Identifier	HEXAGON_END_PACKET		2733625	0					
ANR	2733695	Label	case HEXAGON_END_PAIR :	2936:6:95368:95389	2733625	1	True				
ANR	2733696	Identifier	HEXAGON_END_PAIR		2733625	0					
ANR	2733697	IfStatement	if ( in_packet )		2733625	2					
ANR	2733698	Condition	in_packet	2937:12:95403:95411	2733625	0	True				
ANR	2733699	Identifier	in_packet		2733625	0					
ANR	2733700	ExpressionStatement	"dst += sprintf ( dst , ""  "" )"	2938:10:95424:95450	2733625	1	True				
ANR	2733701	AssignmentExpression	"dst += sprintf ( dst , ""  "" )"		2733625	0		+=			
ANR	2733702	Identifier	dst		2733625	0					
ANR	2733703	CallExpression	"sprintf ( dst , ""  "" )"		2733625	1					
ANR	2733704	Callee	sprintf		2733625	0					
ANR	2733705	Identifier	sprintf		2733625	0					
ANR	2733706	ArgumentList	dst		2733625	1					
ANR	2733707	Argument	dst		2733625	0					
ANR	2733708	Identifier	dst		2733625	0					
ANR	2733709	Argument	"""  """		2733625	1					
ANR	2733710	PrimaryExpression	"""  """		2733625	0					
ANR	2733711	ElseStatement	else		2733625	0					
ANR	2733712	ExpressionStatement	packet_addr = address	2940:10:95475:95496	2733625	0	True				
ANR	2733713	AssignmentExpression	packet_addr = address		2733625	0		=			
ANR	2733714	Identifier	packet_addr		2733625	0					
ANR	2733715	Identifier	address		2733625	1					
ANR	2733716	ExpressionStatement	end_packet = TRUE	2941:8:95506:95523	2733625	3	True				
ANR	2733717	AssignmentExpression	end_packet = TRUE		2733625	0		=			
ANR	2733718	Identifier	end_packet		2733625	0					
ANR	2733719	Identifier	TRUE		2733625	1					
ANR	2733720	BreakStatement	break ;	2942:8:95533:95538	2733625	4	True				
ANR	2733721	Label	case HEXAGON_END_LOOP :	2944:6:95547:95568	2733625	5	True				
ANR	2733722	Identifier	HEXAGON_END_LOOP		2733625	0					
ANR	2733723	Label	case HEXAGON_END_NOT :	2945:6:95576:95596	2733625	6	True				
ANR	2733724	Identifier	HEXAGON_END_NOT		2733625	0					
ANR	2733725	IfStatement	if ( ! in_packet )		2733625	7					
ANR	2733726	Condition	! in_packet	2946:12:95610:95619	2733625	0	True				
ANR	2733727	UnaryOperationExpression	! in_packet		2733625	0					
ANR	2733728	UnaryOperator	!		2733625	0					
ANR	2733729	Identifier	in_packet		2733625	1					
ANR	2733730	CompoundStatement		26:10:594:594	2733625	1					
ANR	2733731	ExpressionStatement	"dst += sprintf ( dst , ""%c "" , PACKET_BEGIN )"	2948:12:95646:95687	2733625	0	True				
ANR	2733732	AssignmentExpression	"dst += sprintf ( dst , ""%c "" , PACKET_BEGIN )"		2733625	0		+=			
ANR	2733733	Identifier	dst		2733625	0					
ANR	2733734	CallExpression	"sprintf ( dst , ""%c "" , PACKET_BEGIN )"		2733625	1					
ANR	2733735	Callee	sprintf		2733625	0					
ANR	2733736	Identifier	sprintf		2733625	0					
ANR	2733737	ArgumentList	dst		2733625	1					
ANR	2733738	Argument	dst		2733625	0					
ANR	2733739	Identifier	dst		2733625	0					
ANR	2733740	Argument	"""%c """		2733625	1					
ANR	2733741	PrimaryExpression	"""%c """		2733625	0					
ANR	2733742	Argument	PACKET_BEGIN		2733625	2					
ANR	2733743	Identifier	PACKET_BEGIN		2733625	0					
ANR	2733744	ExpressionStatement	packet_addr = address	2949:12:95701:95722	2733625	1	True				
ANR	2733745	AssignmentExpression	packet_addr = address		2733625	0		=			
ANR	2733746	Identifier	packet_addr		2733625	0					
ANR	2733747	Identifier	address		2733625	1					
ANR	2733748	ElseStatement	else		2733625	0					
ANR	2733749	ExpressionStatement	"dst += sprintf ( dst , ""  "" )"	2952:10:95759:95785	2733625	0	True				
ANR	2733750	AssignmentExpression	"dst += sprintf ( dst , ""  "" )"		2733625	0		+=			
ANR	2733751	Identifier	dst		2733625	0					
ANR	2733752	CallExpression	"sprintf ( dst , ""  "" )"		2733625	1					
ANR	2733753	Callee	sprintf		2733625	0					
ANR	2733754	Identifier	sprintf		2733625	0					
ANR	2733755	ArgumentList	dst		2733625	1					
ANR	2733756	Argument	dst		2733625	0					
ANR	2733757	Identifier	dst		2733625	0					
ANR	2733758	Argument	"""  """		2733625	1					
ANR	2733759	PrimaryExpression	"""  """		2733625	0					
ANR	2733760	ExpressionStatement	++ in_packet	2954:8:95796:95807	2733625	8	True				
ANR	2733761	UnaryExpression	++ in_packet		2733625	0					
ANR	2733762	IncDec	++		2733625	0					
ANR	2733763	Identifier	in_packet		2733625	1					
ANR	2733764	IfStatement	if ( packet_bits == HEXAGON_END_LOOP )		2733625	9					
ANR	2733765	Condition	packet_bits == HEXAGON_END_LOOP	2956:12:95822:95852	2733625	0	True				
ANR	2733766	EqualityExpression	packet_bits == HEXAGON_END_LOOP		2733625	0		==			
ANR	2733767	Identifier	packet_bits		2733625	0					
ANR	2733768	Identifier	HEXAGON_END_LOOP		2733625	1					
ANR	2733769	CompoundStatement		36:10:827:827	2733625	1					
ANR	2733770	IfStatement	if ( in_packet == 1 )		2733625	0					
ANR	2733771	Condition	in_packet == 1	2958:16:95883:95896	2733625	0	True				
ANR	2733772	EqualityExpression	in_packet == 1		2733625	0		==			
ANR	2733773	Identifier	in_packet		2733625	0					
ANR	2733774	PrimaryExpression	1		2733625	1					
ANR	2733775	ExpressionStatement	end_inner = TRUE	2958:32:95899:95915	2733625	1	True				
ANR	2733776	AssignmentExpression	end_inner = TRUE		2733625	0		=			
ANR	2733777	Identifier	end_inner		2733625	0					
ANR	2733778	Identifier	TRUE		2733625	1					
ANR	2733779	IfStatement	if ( in_packet == 2 )		2733625	1					
ANR	2733780	Condition	in_packet == 2	2959:16:95933:95946	2733625	0	True				
ANR	2733781	EqualityExpression	in_packet == 2		2733625	0		==			
ANR	2733782	Identifier	in_packet		2733625	0					
ANR	2733783	PrimaryExpression	2		2733625	1					
ANR	2733784	ExpressionStatement	end_outer = TRUE	2959:32:95949:95965	2733625	1	True				
ANR	2733785	AssignmentExpression	end_outer = TRUE		2733625	0		=			
ANR	2733786	Identifier	end_outer		2733625	0					
ANR	2733787	Identifier	TRUE		2733625	1					
ANR	2733788	BreakStatement	break ;	2961:8:95987:95992	2733625	10	True				
ANR	2733789	Label	default :	2963:6:96001:96008	2733625	11	True				
ANR	2733790	Identifier	default		2733625	0					
ANR	2733791	IfStatement	if ( errmsg )		2733625	12					
ANR	2733792	Condition	errmsg	2964:12:96022:96027	2733625	0	True				
ANR	2733793	Identifier	errmsg		2733625	0					
ANR	2733794	CompoundStatement		44:10:1002:1002	2733625	1					
ANR	2733795	ExpressionStatement	"snprintf ( temp , sizeof ( temp ) , ""invalid packet bits: %.8x"" , packet_bits )"	2966:12:96054:96126	2733625	0	True				
ANR	2733796	CallExpression	"snprintf ( temp , sizeof ( temp ) , ""invalid packet bits: %.8x"" , packet_bits )"		2733625	0					
ANR	2733797	Callee	snprintf		2733625	0					
ANR	2733798	Identifier	snprintf		2733625	0					
ANR	2733799	ArgumentList	temp		2733625	1					
ANR	2733800	Argument	temp		2733625	0					
ANR	2733801	Identifier	temp		2733625	0					
ANR	2733802	Argument	sizeof ( temp )		2733625	1					
ANR	2733803	SizeofExpression	sizeof ( temp )		2733625	0					
ANR	2733804	Sizeof	sizeof		2733625	0					
ANR	2733805	SizeofOperand	temp		2733625	1					
ANR	2733806	Argument	"""invalid packet bits: %.8x"""		2733625	2					
ANR	2733807	PrimaryExpression	"""invalid packet bits: %.8x"""		2733625	0					
ANR	2733808	Argument	packet_bits		2733625	3					
ANR	2733809	Identifier	packet_bits		2733625	0					
ANR	2733810	ExpressionStatement	* errmsg = temp	2967:12:96140:96154	2733625	1	True				
ANR	2733811	AssignmentExpression	* errmsg = temp		2733625	0		=			
ANR	2733812	UnaryOperationExpression	* errmsg		2733625	0					
ANR	2733813	UnaryOperator	*		2733625	0					
ANR	2733814	Identifier	errmsg		2733625	1					
ANR	2733815	Identifier	temp		2733625	1					
ANR	2733816	ReturnStatement	return FALSE ;	2969:8:96176:96188	2733625	13	True				
ANR	2733817	Identifier	FALSE		2733625	0					
ANR	2733818	BreakStatement	break ;	2970:8:96198:96203	2733625	14	True				
ANR	2733819	WhileStatement	while ( * src )		2733625	15					
ANR	2733820	Condition	* src	2973:9:96221:96224	2733625	0	True				
ANR	2733821	UnaryOperationExpression	* src		2733625	0					
ANR	2733822	UnaryOperator	*		2733625	0					
ANR	2733823	Identifier	src		2733625	1					
ANR	2733824	CompoundStatement		53:4:1193:1193	2733625	1					
ANR	2733825	IfStatement	if ( ( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#' )		2733625	0					
ANR	2733826	Condition	( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#'	2976:10:96270:96325	2733625	0	True				
ANR	2733827	OrExpression	( ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' ) ) || * src == '#'		2733625	0		||			
ANR	2733828	AndExpression	ISUPPER ( * src ) && ( TOUPPER ( * src ) != 'I' )		2733625	0		&&			
ANR	2733829	CallExpression	ISUPPER ( * src )		2733625	0					
ANR	2733830	Callee	ISUPPER		2733625	0					
ANR	2733831	Identifier	ISUPPER		2733625	0					
ANR	2733832	ArgumentList	* src		2733625	1					
ANR	2733833	Argument	* src		2733625	0					
ANR	2733834	UnaryOperationExpression	* src		2733625	0					
ANR	2733835	UnaryOperator	*		2733625	0					
ANR	2733836	Identifier	src		2733625	1					
ANR	2733837	EqualityExpression	TOUPPER ( * src ) != 'I'		2733625	1		!=			
ANR	2733838	CallExpression	TOUPPER ( * src )		2733625	0					
ANR	2733839	Callee	TOUPPER		2733625	0					
ANR	2733840	Identifier	TOUPPER		2733625	0					
ANR	2733841	ArgumentList	* src		2733625	1					
ANR	2733842	Argument	* src		2733625	0					
ANR	2733843	UnaryOperationExpression	* src		2733625	0					
ANR	2733844	UnaryOperator	*		2733625	0					
ANR	2733845	Identifier	src		2733625	1					
ANR	2733846	PrimaryExpression	'I'		2733625	1					
ANR	2733847	EqualityExpression	* src == '#'		2733625	1		==			
ANR	2733848	UnaryOperationExpression	* src		2733625	0					
ANR	2733849	UnaryOperator	*		2733625	0					
ANR	2733850	Identifier	src		2733625	1					
ANR	2733851	PrimaryExpression	'#'		2733625	1					
ANR	2733852	CompoundStatement		59:10:1374:1382	2733625	1					
ANR	2733853	IdentifierDeclStatement	int found = FALSE ;	2979:10:96383:96400	2733625	0	True				
ANR	2733854	IdentifierDecl	found = FALSE		2733625	0					
ANR	2733855	IdentifierDeclType	int		2733625	0					
ANR	2733856	Identifier	found		2733625	1					
ANR	2733857	AssignmentExpression	found = FALSE		2733625	2		=			
ANR	2733858	Identifier	FALSE		2733625	0					
ANR	2733859	Identifier	FALSE		2733625	1					
ANR	2733860	IdentifierDeclStatement	size_t i ;	2980:10:96412:96420	2733625	1	True				
ANR	2733861	IdentifierDecl	i		2733625	0					
ANR	2733862	IdentifierDeclType	size_t		2733625	0					
ANR	2733863	Identifier	i		2733625	1					
ANR	2733864	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		2733625	2					
ANR	2733865	ForInit	i = 0 ;	2982:15:96438:96443	2733625	0	True				
ANR	2733866	AssignmentExpression	i = 0		2733625	0		=			
ANR	2733867	Identifier	i		2733625	0					
ANR	2733868	PrimaryExpression	0		2733625	1					
ANR	2733869	Condition	i < hexagon_operand_count	2982:22:96445:96469	2733625	1	True				
ANR	2733870	RelationalExpression	i < hexagon_operand_count		2733625	0		<			
ANR	2733871	Identifier	i		2733625	0					
ANR	2733872	Identifier	hexagon_operand_count		2733625	1					
ANR	2733873	PostIncDecOperationExpression	i ++	2982:49:96472:96474	2733625	2	True				
ANR	2733874	Identifier	i		2733625	0					
ANR	2733875	IncDec	++		2733625	1					
ANR	2733876	CompoundStatement		64:14:1506:1516	2733625	3					
ANR	2733877	IdentifierDeclStatement	hexagon_operand operand ;	2984:14:96505:96528	2733625	0	True				
ANR	2733878	IdentifierDecl	operand		2733625	0					
ANR	2733879	IdentifierDeclType	hexagon_operand		2733625	0					
ANR	2733880	Identifier	operand		2733625	1					
ANR	2733881	IdentifierDeclStatement	size_t len ;	2985:14:96544:96554	2733625	1	True				
ANR	2733882	IdentifierDecl	len		2733625	0					
ANR	2733883	IdentifierDeclType	size_t		2733625	0					
ANR	2733884	Identifier	len		2733625	1					
ANR	2733885	ExpressionStatement	operand = hexagon_operands [ i ]	2987:14:96571:96601	2733625	2	True				
ANR	2733886	AssignmentExpression	operand = hexagon_operands [ i ]		2733625	0		=			
ANR	2733887	Identifier	operand		2733625	0					
ANR	2733888	ArrayIndexing	hexagon_operands [ i ]		2733625	1					
ANR	2733889	Identifier	hexagon_operands		2733625	0					
ANR	2733890	Identifier	i		2733625	1					
ANR	2733891	ExpressionStatement	len = strlen ( operand . fmt )	2988:14:96617:96643	2733625	3	True				
ANR	2733892	AssignmentExpression	len = strlen ( operand . fmt )		2733625	0		=			
ANR	2733893	Identifier	len		2733625	0					
ANR	2733894	CallExpression	strlen ( operand . fmt )		2733625	1					
ANR	2733895	Callee	strlen		2733625	0					
ANR	2733896	Identifier	strlen		2733625	0					
ANR	2733897	ArgumentList	operand . fmt		2733625	1					
ANR	2733898	Argument	operand . fmt		2733625	0					
ANR	2733899	MemberAccess	operand . fmt		2733625	0					
ANR	2733900	Identifier	operand		2733625	0					
ANR	2733901	Identifier	fmt		2733625	1					
ANR	2733902	IfStatement	"if ( ! strncmp ( src , operand . fmt , len ) )"		2733625	4					
ANR	2733903	Condition	"! strncmp ( src , operand . fmt , len )"	2990:18:96664:96695	2733625	0	True				
ANR	2733904	UnaryOperationExpression	"! strncmp ( src , operand . fmt , len )"		2733625	0					
ANR	2733905	UnaryOperator	!		2733625	0					
ANR	2733906	CallExpression	"strncmp ( src , operand . fmt , len )"		2733625	1					
ANR	2733907	Callee	strncmp		2733625	0					
ANR	2733908	Identifier	strncmp		2733625	0					
ANR	2733909	ArgumentList	src		2733625	1					
ANR	2733910	Argument	src		2733625	0					
ANR	2733911	Identifier	src		2733625	0					
ANR	2733912	Argument	operand . fmt		2733625	1					
ANR	2733913	MemberAccess	operand . fmt		2733625	0					
ANR	2733914	Identifier	operand		2733625	0					
ANR	2733915	Identifier	fmt		2733625	1					
ANR	2733916	Argument	len		2733625	2					
ANR	2733917	Identifier	len		2733625	0					
ANR	2733918	CompoundStatement		70:16:1676:1676	2733625	1					
ANR	2733919	ExpressionStatement	found = TRUE	2992:18:96734:96746	2733625	0	True				
ANR	2733920	AssignmentExpression	found = TRUE		2733625	0		=			
ANR	2733921	Identifier	found		2733625	0					
ANR	2733922	Identifier	TRUE		2733625	1					
ANR	2733923	IfStatement	if ( opcode -> attributes & A_IT_EXTENDER )		2733625	1					
ANR	2733924	Condition	opcode -> attributes & A_IT_EXTENDER	2994:22:96771:96804	2733625	0	True				
ANR	2733925	BitAndExpression	opcode -> attributes & A_IT_EXTENDER		2733625	0		&			
ANR	2733926	PtrMemberAccess	opcode -> attributes		2733625	0					
ANR	2733927	Identifier	opcode		2733625	0					
ANR	2733928	Identifier	attributes		2733625	1					
ANR	2733929	Identifier	A_IT_EXTENDER		2733625	1					
ANR	2733930	ExpressionStatement	operand . flags |= HEXAGON_OPERAND_IS_KXER	2995:20:96827:96867	2733625	1	True				
ANR	2733931	AssignmentExpression	operand . flags |= HEXAGON_OPERAND_IS_KXER		2733625	0		|=			
ANR	2733932	MemberAccess	operand . flags		2733625	0					
ANR	2733933	Identifier	operand		2733625	0					
ANR	2733934	Identifier	flags		2733625	1					
ANR	2733935	Identifier	HEXAGON_OPERAND_IS_KXER		2733625	1					
ANR	2733936	ElseStatement	else		2733625	0					
ANR	2733937	IfStatement	if ( ( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) ) )		2733625	0					
ANR	2733938	Condition	( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) )	2996:27:96896:97256	2733625	0	True				
ANR	2733939	AndExpression	( operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE ) && ( ( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) ) )		2733625	0		&&			
ANR	2733940	BitAndExpression	operand . flags & HEXAGON_OPERAND_IS_IMMEDIATE		2733625	0		&			
ANR	2733941	MemberAccess	operand . flags		2733625	0					
ANR	2733942	Identifier	operand		2733625	0					
ANR	2733943	Identifier	flags		2733625	1					
ANR	2733944	Identifier	HEXAGON_OPERAND_IS_IMMEDIATE		2733625	1					
ANR	2733945	OrExpression	( ( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) ) ) || ( ( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) ) )		2733625	1		||			
ANR	2733946	AndExpression	( opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE ) && ( ISLOWER ( operand . enc_letter ) )		2733625	0		&&			
ANR	2733947	BitAndExpression	opcode -> attributes & EXTENDABLE_LOWER_CASE_IMMEDIATE		2733625	0		&			
ANR	2733948	PtrMemberAccess	opcode -> attributes		2733625	0					
ANR	2733949	Identifier	opcode		2733625	0					
ANR	2733950	Identifier	attributes		2733625	1					
ANR	2733951	Identifier	EXTENDABLE_LOWER_CASE_IMMEDIATE		2733625	1					
ANR	2733952	CallExpression	ISLOWER ( operand . enc_letter )		2733625	1					
ANR	2733953	Callee	ISLOWER		2733625	0					
ANR	2733954	Identifier	ISLOWER		2733625	0					
ANR	2733955	ArgumentList	operand . enc_letter		2733625	1					
ANR	2733956	Argument	operand . enc_letter		2733625	0					
ANR	2733957	MemberAccess	operand . enc_letter		2733625	0					
ANR	2733958	Identifier	operand		2733625	0					
ANR	2733959	Identifier	enc_letter		2733625	1					
ANR	2733960	AndExpression	( opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE ) && ( ISUPPER ( operand . enc_letter ) )		2733625	1		&&			
ANR	2733961	BitAndExpression	opcode -> attributes & EXTENDABLE_UPPER_CASE_IMMEDIATE		2733625	0		&			
ANR	2733962	PtrMemberAccess	opcode -> attributes		2733625	0					
ANR	2733963	Identifier	opcode		2733625	0					
ANR	2733964	Identifier	attributes		2733625	1					
ANR	2733965	Identifier	EXTENDABLE_UPPER_CASE_IMMEDIATE		2733625	1					
ANR	2733966	CallExpression	ISUPPER ( operand . enc_letter )		2733625	1					
ANR	2733967	Callee	ISUPPER		2733625	0					
ANR	2733968	Identifier	ISUPPER		2733625	0					
ANR	2733969	ArgumentList	operand . enc_letter		2733625	1					
ANR	2733970	Argument	operand . enc_letter		2733625	0					
ANR	2733971	MemberAccess	operand . enc_letter		2733625	0					
ANR	2733972	Identifier	operand		2733625	0					
ANR	2733973	Identifier	enc_letter		2733625	1					
ANR	2733974	ExpressionStatement	operand . flags |= HEXAGON_OPERAND_IS_KXED	3002:20:97345:97385	2733625	1	True				
ANR	2733975	AssignmentExpression	operand . flags |= HEXAGON_OPERAND_IS_KXED		2733625	0		|=			
ANR	2733976	MemberAccess	operand . flags		2733625	0					
ANR	2733977	Identifier	operand		2733625	0					
ANR	2733978	Identifier	flags		2733625	1					
ANR	2733979	Identifier	HEXAGON_OPERAND_IS_KXED		2733625	1					
ANR	2733980	ExpressionStatement	"dst = hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"	3003:18:97405:97538	2733625	2	True				
ANR	2733981	AssignmentExpression	"dst = hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"		2733625	0		=			
ANR	2733982	Identifier	dst		2733625	0					
ANR	2733983	CallExpression	"hexagon_dis_operand ( & operand , insn , address , packet_addr , opcode -> enc , dst , errmsg )"		2733625	1					
ANR	2733984	Callee	hexagon_dis_operand		2733625	0					
ANR	2733985	Identifier	hexagon_dis_operand		2733625	0					
ANR	2733986	ArgumentList	& operand		2733625	1					
ANR	2733987	Argument	& operand		2733625	0					
ANR	2733988	UnaryOperationExpression	& operand		2733625	0					
ANR	2733989	UnaryOperator	&		2733625	0					
ANR	2733990	Identifier	operand		2733625	1					
ANR	2733991	Argument	insn		2733625	1					
ANR	2733992	Identifier	insn		2733625	0					
ANR	2733993	Argument	address		2733625	2					
ANR	2733994	Identifier	address		2733625	0					
ANR	2733995	Argument	packet_addr		2733625	3					
ANR	2733996	Identifier	packet_addr		2733625	0					
ANR	2733997	Argument	opcode -> enc		2733625	4					
ANR	2733998	PtrMemberAccess	opcode -> enc		2733625	0					
ANR	2733999	Identifier	opcode		2733625	0					
ANR	2734000	Identifier	enc		2733625	1					
ANR	2734001	Argument	dst		2733625	5					
ANR	2734002	Identifier	dst		2733625	0					
ANR	2734003	Argument	errmsg		2733625	6					
ANR	2734004	Identifier	errmsg		2733625	0					
ANR	2734005	IfStatement	if ( ! dst )		2733625	3					
ANR	2734006	Condition	! dst	3005:22:97562:97565	2733625	0	True				
ANR	2734007	UnaryOperationExpression	! dst		2733625	0					
ANR	2734008	UnaryOperator	!		2733625	0					
ANR	2734009	Identifier	dst		2733625	1					
ANR	2734010	CompoundStatement		85:20:2550:2550	2733625	1					
ANR	2734011	ExpressionStatement	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"	3008:22:97660:97704	2733625	0	True				
ANR	2734012	CallExpression	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"		2733625	0					
ANR	2734013	Callee	sprintf		2733625	0					
ANR	2734014	Identifier	sprintf		2733625	0					
ANR	2734015	ArgumentList	buf		2733625	1					
ANR	2734016	Argument	buf		2733625	0					
ANR	2734017	Identifier	buf		2733625	0					
ANR	2734018	Argument	"""<unknown insn 0x%08x>"""		2733625	1					
ANR	2734019	PrimaryExpression	"""<unknown insn 0x%08x>"""		2733625	0					
ANR	2734020	Argument	insn		2733625	2					
ANR	2734021	Identifier	insn		2733625	0					
ANR	2734022	ReturnStatement	return FALSE ;	3009:22:97728:97740	2733625	1	True				
ANR	2734023	Identifier	FALSE		2733625	0					
ANR	2734024	ExpressionStatement	src += len	3013:18:97838:97848	2733625	4	True				
ANR	2734025	AssignmentExpression	src += len		2733625	0		+=			
ANR	2734026	Identifier	src		2733625	0					
ANR	2734027	Identifier	len		2733625	1					
ANR	2734028	BreakStatement	break ;	3014:18:97868:97873	2733625	5	True				
ANR	2734029	IfStatement	if ( ! found )		2733625	3					
ANR	2734030	Condition	! found	3018:14:97922:97927	2733625	0	True				
ANR	2734031	UnaryOperationExpression	! found		2733625	0					
ANR	2734032	UnaryOperator	!		2733625	0					
ANR	2734033	Identifier	found		2733625	1					
ANR	2734034	CompoundStatement		98:12:2904:2904	2733625	1					
ANR	2734035	ExpressionStatement	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"	3020:14:97958:98002	2733625	0	True				
ANR	2734036	CallExpression	"sprintf ( buf , ""<unknown insn 0x%08x>"" , insn )"		2733625	0					
ANR	2734037	Callee	sprintf		2733625	0					
ANR	2734038	Identifier	sprintf		2733625	0					
ANR	2734039	ArgumentList	buf		2733625	1					
ANR	2734040	Argument	buf		2733625	0					
ANR	2734041	Identifier	buf		2733625	0					
ANR	2734042	Argument	"""<unknown insn 0x%08x>"""		2733625	1					
ANR	2734043	PrimaryExpression	"""<unknown insn 0x%08x>"""		2733625	0					
ANR	2734044	Argument	insn		2733625	2					
ANR	2734045	Identifier	insn		2733625	0					
ANR	2734046	IfStatement	if ( errmsg )		2733625	1					
ANR	2734047	Condition	errmsg	3022:18:98023:98028	2733625	0	True				
ANR	2734048	Identifier	errmsg		2733625	0					
ANR	2734049	CompoundStatement		102:16:3009:3009	2733625	1					
ANR	2734050	ExpressionStatement	"snprintf ( temp , sizeof ( temp ) , ""unknown operand: %s"" , src )"	3024:18:98067:98125	2733625	0	True				
ANR	2734051	CallExpression	"snprintf ( temp , sizeof ( temp ) , ""unknown operand: %s"" , src )"		2733625	0					
ANR	2734052	Callee	snprintf		2733625	0					
ANR	2734053	Identifier	snprintf		2733625	0					
ANR	2734054	ArgumentList	temp		2733625	1					
ANR	2734055	Argument	temp		2733625	0					
ANR	2734056	Identifier	temp		2733625	0					
ANR	2734057	Argument	sizeof ( temp )		2733625	1					
ANR	2734058	SizeofExpression	sizeof ( temp )		2733625	0					
ANR	2734059	Sizeof	sizeof		2733625	0					
ANR	2734060	SizeofOperand	temp		2733625	1					
ANR	2734061	Argument	"""unknown operand: %s"""		2733625	2					
ANR	2734062	PrimaryExpression	"""unknown operand: %s"""		2733625	0					
ANR	2734063	Argument	src		2733625	3					
ANR	2734064	Identifier	src		2733625	0					
ANR	2734065	ExpressionStatement	* errmsg = temp	3025:18:98145:98159	2733625	1	True				
ANR	2734066	AssignmentExpression	* errmsg = temp		2733625	0		=			
ANR	2734067	UnaryOperationExpression	* errmsg		2733625	0					
ANR	2734068	UnaryOperator	*		2733625	0					
ANR	2734069	Identifier	errmsg		2733625	1					
ANR	2734070	Identifier	temp		2733625	1					
ANR	2734071	ReturnStatement	return FALSE ;	3027:14:98193:98205	2733625	2	True				
ANR	2734072	Identifier	FALSE		2733625	0					
ANR	2734073	ElseStatement	else		2733625	0					
ANR	2734074	CompoundStatement		110:8:3212:3212	2733625	0					
ANR	2734075	SwitchStatement	switch ( * src )		2733625	0					
ANR	2734076	Condition	* src	3033:18:98308:98311	2733625	0	True				
ANR	2734077	UnaryOperationExpression	* src		2733625	0					
ANR	2734078	UnaryOperator	*		2733625	0					
ANR	2734079	Identifier	src		2733625	1					
ANR	2734080	CompoundStatement		113:12:3288:3288	2733625	1					
ANR	2734081	Label	case '(' :	3036:14:98380:98388	2733625	0	True				
ANR	2734082	Label	case '!' :	3037:14:98404:98412	2733625	1	True				
ANR	2734083	ExpressionStatement	* dst ++ = * src ++	3038:16:98430:98445	2733625	2	True				
ANR	2734084	AssignmentExpression	* dst ++ = * src ++		2733625	0		=			
ANR	2734085	UnaryOperationExpression	* dst ++		2733625	0					
ANR	2734086	UnaryOperator	*		2733625	0					
ANR	2734087	PostIncDecOperationExpression	dst ++		2733625	1					
ANR	2734088	Identifier	dst		2733625	0					
ANR	2734089	IncDec	++		2733625	1					
ANR	2734090	UnaryOperationExpression	* src ++		2733625	1					
ANR	2734091	UnaryOperator	*		2733625	0					
ANR	2734092	PostIncDecOperationExpression	src ++		2733625	1					
ANR	2734093	Identifier	src		2733625	0					
ANR	2734094	IncDec	++		2733625	1					
ANR	2734095	WhileStatement	while ( ISBLANK ( src [ 0 ] ) )		2733625	3					
ANR	2734096	Condition	ISBLANK ( src [ 0 ] )	3040:23:98471:98487	2733625	0	True				
ANR	2734097	CallExpression	ISBLANK ( src [ 0 ] )		2733625	0					
ANR	2734098	Callee	ISBLANK		2733625	0					
ANR	2734099	Identifier	ISBLANK		2733625	0					
ANR	2734100	ArgumentList	src [ 0 ]		2733625	1					
ANR	2734101	Argument	src [ 0 ]		2733625	0					
ANR	2734102	ArrayIndexing	src [ 0 ]		2733625	0					
ANR	2734103	Identifier	src		2733625	0					
ANR	2734104	PrimaryExpression	0		2733625	1					
ANR	2734105	ExpressionStatement	src ++	3041:18:98508:98513	2733625	1	True				
ANR	2734106	PostIncDecOperationExpression	src ++		2733625	0					
ANR	2734107	Identifier	src		2733625	0					
ANR	2734108	IncDec	++		2733625	1					
ANR	2734109	BreakStatement	break ;	3042:16:98531:98536	2733625	4	True				
ANR	2734110	Label	case ')' :	3045:14:98594:98602	2733625	5	True				
ANR	2734111	Label	case '.' :	3046:14:98618:98626	2733625	6	True				
ANR	2734112	Label	"case ',' :"	3047:14:98642:98650	2733625	7	True				
ANR	2734113	Label	case ':' :	3048:14:98666:98674	2733625	8	True				
ANR	2734114	WhileStatement	while ( ISBLANK ( dst [ - 1 ] ) )		2733625	9					
ANR	2734115	Condition	ISBLANK ( dst [ - 1 ] )	3049:23:98699:98716	2733625	0	True				
ANR	2734116	CallExpression	ISBLANK ( dst [ - 1 ] )		2733625	0					
ANR	2734117	Callee	ISBLANK		2733625	0					
ANR	2734118	Identifier	ISBLANK		2733625	0					
ANR	2734119	ArgumentList	dst [ - 1 ]		2733625	1					
ANR	2734120	Argument	dst [ - 1 ]		2733625	0					
ANR	2734121	ArrayIndexing	dst [ - 1 ]		2733625	0					
ANR	2734122	Identifier	dst		2733625	0					
ANR	2734123	UnaryOperationExpression	- 1		2733625	1					
ANR	2734124	UnaryOperator	-		2733625	0					
ANR	2734125	PrimaryExpression	1		2733625	1					
ANR	2734126	ExpressionStatement	dst --	3050:18:98737:98742	2733625	1	True				
ANR	2734127	PostIncDecOperationExpression	dst --		2733625	0					
ANR	2734128	Identifier	dst		2733625	0					
ANR	2734129	IncDec	--		2733625	1					
ANR	2734130	ExpressionStatement	* dst ++ = * src ++	3052:16:98761:98776	2733625	10	True				
ANR	2734131	AssignmentExpression	* dst ++ = * src ++		2733625	0		=			
ANR	2734132	UnaryOperationExpression	* dst ++		2733625	0					
ANR	2734133	UnaryOperator	*		2733625	0					
ANR	2734134	PostIncDecOperationExpression	dst ++		2733625	1					
ANR	2734135	Identifier	dst		2733625	0					
ANR	2734136	IncDec	++		2733625	1					
ANR	2734137	UnaryOperationExpression	* src ++		2733625	1					
ANR	2734138	UnaryOperator	*		2733625	0					
ANR	2734139	PostIncDecOperationExpression	src ++		2733625	1					
ANR	2734140	Identifier	src		2733625	0					
ANR	2734141	IncDec	++		2733625	1					
ANR	2734142	BreakStatement	break ;	3053:16:98794:98799	2733625	11	True				
ANR	2734143	Label	default :	3056:14:98856:98863	2733625	12	True				
ANR	2734144	Identifier	default		2733625	0					
ANR	2734145	ExpressionStatement	* dst ++ = * src ++	3057:16:98881:98896	2733625	13	True				
ANR	2734146	AssignmentExpression	* dst ++ = * src ++		2733625	0		=			
ANR	2734147	UnaryOperationExpression	* dst ++		2733625	0					
ANR	2734148	UnaryOperator	*		2733625	0					
ANR	2734149	PostIncDecOperationExpression	dst ++		2733625	1					
ANR	2734150	Identifier	dst		2733625	0					
ANR	2734151	IncDec	++		2733625	1					
ANR	2734152	UnaryOperationExpression	* src ++		2733625	1					
ANR	2734153	UnaryOperator	*		2733625	0					
ANR	2734154	PostIncDecOperationExpression	src ++		2733625	1					
ANR	2734155	Identifier	src		2733625	0					
ANR	2734156	IncDec	++		2733625	1					
ANR	2734157	BreakStatement	break ;	3058:16:98914:98919	2733625	14	True				
ANR	2734158	ExpressionStatement	* dst = '\\0'	3063:2:98954:98965	2733625	16	True				
ANR	2734159	AssignmentExpression	* dst = '\\0'		2733625	0		=			
ANR	2734160	UnaryOperationExpression	* dst		2733625	0					
ANR	2734161	UnaryOperator	*		2733625	0					
ANR	2734162	Identifier	dst		2733625	1					
ANR	2734163	PrimaryExpression	'\\0'		2733625	1					
ANR	2734164	IfStatement	if ( end_packet )		2733625	17					
ANR	2734165	Condition	end_packet	3065:6:98974:98983	2733625	0	True				
ANR	2734166	Identifier	end_packet		2733625	0					
ANR	2734167	CompoundStatement		145:4:3952:3952	2733625	1					
ANR	2734168	IfStatement	if ( in_packet )		2733625	0					
ANR	2734169	Condition	in_packet	3067:10:99002:99010	2733625	0	True				
ANR	2734170	Identifier	in_packet		2733625	0					
ANR	2734171	CompoundStatement		147:8:3983:3983	2733625	1					
ANR	2734172	ExpressionStatement	"dst += sprintf ( dst , "" %c"" , PACKET_END )"	3069:10:99033:99072	2733625	0	True				
ANR	2734173	AssignmentExpression	"dst += sprintf ( dst , "" %c"" , PACKET_END )"		2733625	0		+=			
ANR	2734174	Identifier	dst		2733625	0					
ANR	2734175	CallExpression	"sprintf ( dst , "" %c"" , PACKET_END )"		2733625	1					
ANR	2734176	Callee	sprintf		2733625	0					
ANR	2734177	Identifier	sprintf		2733625	0					
ANR	2734178	ArgumentList	dst		2733625	1					
ANR	2734179	Argument	dst		2733625	0					
ANR	2734180	Identifier	dst		2733625	0					
ANR	2734181	Argument	""" %c"""		2733625	1					
ANR	2734182	PrimaryExpression	""" %c"""		2733625	0					
ANR	2734183	Argument	PACKET_END		2733625	2					
ANR	2734184	Identifier	PACKET_END		2733625	0					
ANR	2734185	IfStatement	if ( end_inner )		2733625	1					
ANR	2734186	Condition	end_inner	3071:14:99089:99097	2733625	0	True				
ANR	2734187	Identifier	end_inner		2733625	0					
ANR	2734188	ExpressionStatement	"dst += sprintf ( dst , PACKET_END_INNER )"	3072:12:99112:99150	2733625	1	True				
ANR	2734189	AssignmentExpression	"dst += sprintf ( dst , PACKET_END_INNER )"		2733625	0		+=			
ANR	2734190	Identifier	dst		2733625	0					
ANR	2734191	CallExpression	"sprintf ( dst , PACKET_END_INNER )"		2733625	1					
ANR	2734192	Callee	sprintf		2733625	0					
ANR	2734193	Identifier	sprintf		2733625	0					
ANR	2734194	ArgumentList	dst		2733625	1					
ANR	2734195	Argument	dst		2733625	0					
ANR	2734196	Identifier	dst		2733625	0					
ANR	2734197	Argument	PACKET_END_INNER		2733625	1					
ANR	2734198	Identifier	PACKET_END_INNER		2733625	0					
ANR	2734199	IfStatement	if ( end_outer )		2733625	2					
ANR	2734200	Condition	end_outer	3073:14:99166:99174	2733625	0	True				
ANR	2734201	Identifier	end_outer		2733625	0					
ANR	2734202	ExpressionStatement	"dst += sprintf ( dst , PACKET_END_OUTER )"	3074:12:99189:99227	2733625	1	True				
ANR	2734203	AssignmentExpression	"dst += sprintf ( dst , PACKET_END_OUTER )"		2733625	0		+=			
ANR	2734204	Identifier	dst		2733625	0					
ANR	2734205	CallExpression	"sprintf ( dst , PACKET_END_OUTER )"		2733625	1					
ANR	2734206	Callee	sprintf		2733625	0					
ANR	2734207	Identifier	sprintf		2733625	0					
ANR	2734208	ArgumentList	dst		2733625	1					
ANR	2734209	Argument	dst		2733625	0					
ANR	2734210	Identifier	dst		2733625	0					
ANR	2734211	Argument	PACKET_END_OUTER		2733625	1					
ANR	2734212	Identifier	PACKET_END_OUTER		2733625	0					
ANR	2734213	ExpressionStatement	in_packet = FALSE	3077:6:99246:99263	2733625	1	True				
ANR	2734214	AssignmentExpression	in_packet = FALSE		2733625	0		=			
ANR	2734215	Identifier	in_packet		2733625	0					
ANR	2734216	Identifier	FALSE		2733625	1					
ANR	2734217	ExpressionStatement	end_inner = FALSE	3078:6:99271:99288	2733625	2	True				
ANR	2734218	AssignmentExpression	end_inner = FALSE		2733625	0		=			
ANR	2734219	Identifier	end_inner		2733625	0					
ANR	2734220	Identifier	FALSE		2733625	1					
ANR	2734221	ExpressionStatement	end_outer = FALSE	3079:6:99296:99313	2733625	3	True				
ANR	2734222	AssignmentExpression	end_outer = FALSE		2733625	0		=			
ANR	2734223	Identifier	end_outer		2733625	0					
ANR	2734224	Identifier	FALSE		2733625	1					
ANR	2734225	ReturnStatement	return TRUE ;	3082:2:99324:99335	2733625	18	True				
ANR	2734226	Identifier	TRUE		2733625	0					
ANR	2734227	ReturnType	int		2733625	1					
ANR	2734228	Identifier	hexagon_dis_opcode		2733625	2					
ANR	2734229	ParameterList	"char * buf , hexagon_insn insn , bfd_vma address , const hexagon_opcode * opcode , char * * errmsg"		2733625	3					
ANR	2734230	Parameter	char * buf	2920:1:94944:94952	2733625	0	True				
ANR	2734231	ParameterType	char *		2733625	0					
ANR	2734232	Identifier	buf		2733625	1					
ANR	2734233	Parameter	hexagon_insn insn	2920:12:94955:94971	2733625	1	True				
ANR	2734234	ParameterType	hexagon_insn		2733625	0					
ANR	2734235	Identifier	insn		2733625	1					
ANR	2734236	Parameter	bfd_vma address	2920:31:94974:94988	2733625	2	True				
ANR	2734237	ParameterType	bfd_vma		2733625	0					
ANR	2734238	Identifier	address		2733625	1					
ANR	2734239	Parameter	const hexagon_opcode * opcode	2921:1:94992:95019	2733625	3	True				
ANR	2734240	ParameterType	const hexagon_opcode *		2733625	0					
ANR	2734241	Identifier	opcode		2733625	1					
ANR	2734242	Parameter	char * * errmsg	2921:31:95022:95034	2733625	4	True				
ANR	2734243	ParameterType	char * *		2733625	0					
ANR	2734244	Identifier	errmsg		2733625	1					
ANR	2734245	CFGEntryNode	ENTRY		2733625		True				
ANR	2734246	CFGExitNode	EXIT		2733625		True				
ANR	2734247	Symbol	ISUPPER		2733625						
ANR	2734248	Symbol	in_packet		2733625						
ANR	2734249	Symbol	end_packet		2733625						
ANR	2734250	Symbol	end_outer		2733625						
ANR	2734251	Symbol	HEXAGON_OPERAND_IS_KXED		2733625						
ANR	2734252	Symbol	opcode -> attributes		2733625						
ANR	2734253	Symbol	opcode		2733625						
ANR	2734254	Symbol	* src		2733625						
ANR	2734255	Symbol	sprintf		2733625						
ANR	2734256	Symbol	HEXAGON_END_LOOP		2733625						
ANR	2734257	Symbol	* dst		2733625						
ANR	2734258	Symbol	strlen		2733625						
ANR	2734259	Symbol	strncmp		2733625						
ANR	2734260	Symbol	hexagon_operand_count		2733625						
ANR	2734261	Symbol	opcode -> enc		2733625						
ANR	2734262	Symbol	len		2733625						
ANR	2734263	Symbol	EXTENDABLE_LOWER_CASE_IMMEDIATE		2733625						
ANR	2734264	Symbol	HEXAGON_OPERAND_IS_KXER		2733625						
ANR	2734265	Symbol	hexagon_operands		2733625						
ANR	2734266	Symbol	operand . enc_letter		2733625						
ANR	2734267	Symbol	errmsg		2733625						
ANR	2734268	Symbol	TRUE		2733625						
ANR	2734269	Symbol	hexagon_dis_operand		2733625						
ANR	2734270	Symbol	HEXAGON_OPERAND_IS_IMMEDIATE		2733625						
ANR	2734271	Symbol	end_inner		2733625						
ANR	2734272	Symbol	* dst ++		2733625						
ANR	2734273	Symbol	* src ++		2733625						
ANR	2734274	Symbol	EXTENDABLE_UPPER_CASE_IMMEDIATE		2733625						
ANR	2734275	Symbol	PACKET_END		2733625						
ANR	2734276	Symbol	* errmsg		2733625						
ANR	2734277	Symbol	dst		2733625						
ANR	2734278	Symbol	ISBLANK		2733625						
ANR	2734279	Symbol	TOUPPER		2733625						
ANR	2734280	Symbol	& operand		2733625						
ANR	2734281	Symbol	operand . fmt		2733625						
ANR	2734282	Symbol	found		2733625						
ANR	2734283	Symbol	PACKET_END_INNER		2733625						
ANR	2734284	Symbol	PACKET_END_OUTER		2733625						
ANR	2734285	Symbol	HEXAGON_END_PACKET_GET		2733625						
ANR	2734286	Symbol	A_IT_EXTENDER		2733625						
ANR	2734287	Symbol	temp		2733625						
ANR	2734288	Symbol	address		2733625						
ANR	2734289	Symbol	src		2733625						
ANR	2734290	Symbol	* hexagon_operands		2733625						
ANR	2734291	Symbol	PACKET_BEGIN		2733625						
ANR	2734292	Symbol	operand . flags		2733625						
ANR	2734293	Symbol	i		2733625						
ANR	2734294	Symbol	ISLOWER		2733625						
ANR	2734295	Symbol	packet_addr		2733625						
ANR	2734296	Symbol	insn		2733625						
ANR	2734297	Symbol	opcode -> syntax		2733625						
ANR	2734298	Symbol	buf		2733625						
ANR	2734299	Symbol	* i		2733625						
ANR	2734300	Symbol	packet_bits		2733625						
ANR	2734301	Symbol	FALSE		2733625						
ANR	2734302	Symbol	operand		2733625						
ANR	2734303	Symbol	* opcode		2733625						
ANR	2734304	Function	hexagon_operand_find	3085:0:99340:99731							
ANR	2734305	FunctionDef	"hexagon_operand_find (const hexagon_operand * operand , const char * suffix)"		2734304	0					
ANR	2734306	CompoundStatement		3088:0:99438:99731	2734304	0					
ANR	2734307	IdentifierDeclStatement	size_t i ;	3089:2:99442:99450	2734304	0	True				
ANR	2734308	IdentifierDecl	i		2734304	0					
ANR	2734309	IdentifierDeclType	size_t		2734304	0					
ANR	2734310	Identifier	i		2734304	1					
ANR	2734311	IdentifierDeclStatement	char * buf ;	3090:2:99454:99463	2734304	1	True				
ANR	2734312	IdentifierDecl	* buf		2734304	0					
ANR	2734313	IdentifierDeclType	char *		2734304	0					
ANR	2734314	Identifier	buf		2734304	1					
ANR	2734315	ExpressionStatement	buf = alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )	3092:2:99468:99526	2734304	2	True				
ANR	2734316	AssignmentExpression	buf = alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )		2734304	0		=			
ANR	2734317	Identifier	buf		2734304	0					
ANR	2734318	CallExpression	alloca ( strlen ( operand -> fmt ) + strlen ( suffix ) + 1 )		2734304	1					
ANR	2734319	Callee	alloca		2734304	0					
ANR	2734320	Identifier	alloca		2734304	0					
ANR	2734321	ArgumentList	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		2734304	1					
ANR	2734322	Argument	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		2734304	0					
ANR	2734323	AdditiveExpression	strlen ( operand -> fmt ) + strlen ( suffix ) + 1		2734304	0		+			
ANR	2734324	CallExpression	strlen ( operand -> fmt )		2734304	0					
ANR	2734325	Callee	strlen		2734304	0					
ANR	2734326	Identifier	strlen		2734304	0					
ANR	2734327	ArgumentList	operand -> fmt		2734304	1					
ANR	2734328	Argument	operand -> fmt		2734304	0					
ANR	2734329	PtrMemberAccess	operand -> fmt		2734304	0					
ANR	2734330	Identifier	operand		2734304	0					
ANR	2734331	Identifier	fmt		2734304	1					
ANR	2734332	AdditiveExpression	strlen ( suffix ) + 1		2734304	1		+			
ANR	2734333	CallExpression	strlen ( suffix )		2734304	0					
ANR	2734334	Callee	strlen		2734304	0					
ANR	2734335	Identifier	strlen		2734304	0					
ANR	2734336	ArgumentList	suffix		2734304	1					
ANR	2734337	Argument	suffix		2734304	0					
ANR	2734338	Identifier	suffix		2734304	0					
ANR	2734339	PrimaryExpression	1		2734304	1					
ANR	2734340	ExpressionStatement	"strcpy ( buf , operand -> fmt )"	3093:2:99530:99556	2734304	3	True				
ANR	2734341	CallExpression	"strcpy ( buf , operand -> fmt )"		2734304	0					
ANR	2734342	Callee	strcpy		2734304	0					
ANR	2734343	Identifier	strcpy		2734304	0					
ANR	2734344	ArgumentList	buf		2734304	1					
ANR	2734345	Argument	buf		2734304	0					
ANR	2734346	Identifier	buf		2734304	0					
ANR	2734347	Argument	operand -> fmt		2734304	1					
ANR	2734348	PtrMemberAccess	operand -> fmt		2734304	0					
ANR	2734349	Identifier	operand		2734304	0					
ANR	2734350	Identifier	fmt		2734304	1					
ANR	2734351	ExpressionStatement	"strcat ( buf , suffix )"	3094:2:99560:99580	2734304	4	True				
ANR	2734352	CallExpression	"strcat ( buf , suffix )"		2734304	0					
ANR	2734353	Callee	strcat		2734304	0					
ANR	2734354	Identifier	strcat		2734304	0					
ANR	2734355	ArgumentList	buf		2734304	1					
ANR	2734356	Argument	buf		2734304	0					
ANR	2734357	Identifier	buf		2734304	0					
ANR	2734358	Argument	suffix		2734304	1					
ANR	2734359	Identifier	suffix		2734304	0					
ANR	2734360	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		2734304	5					
ANR	2734361	ForInit	i = 0 ;	3096:7:99590:99595	2734304	0	True				
ANR	2734362	AssignmentExpression	i = 0		2734304	0		=			
ANR	2734363	Identifier	i		2734304	0					
ANR	2734364	PrimaryExpression	0		2734304	1					
ANR	2734365	Condition	i < hexagon_operand_count	3096:14:99597:99621	2734304	1	True				
ANR	2734366	RelationalExpression	i < hexagon_operand_count		2734304	0		<			
ANR	2734367	Identifier	i		2734304	0					
ANR	2734368	Identifier	hexagon_operand_count		2734304	1					
ANR	2734369	PostIncDecOperationExpression	i ++	3096:41:99624:99626	2734304	2	True				
ANR	2734370	Identifier	i		2734304	0					
ANR	2734371	IncDec	++		2734304	1					
ANR	2734372	IfStatement	"if ( ! strcmp ( hexagon_operands [ i ] . fmt , buf ) )"		2734304	3					
ANR	2734373	Condition	"! strcmp ( hexagon_operands [ i ] . fmt , buf )"	3097:8:99637:99675	2734304	0	True				
ANR	2734374	UnaryOperationExpression	"! strcmp ( hexagon_operands [ i ] . fmt , buf )"		2734304	0					
ANR	2734375	UnaryOperator	!		2734304	0					
ANR	2734376	CallExpression	"strcmp ( hexagon_operands [ i ] . fmt , buf )"		2734304	1					
ANR	2734377	Callee	strcmp		2734304	0					
ANR	2734378	Identifier	strcmp		2734304	0					
ANR	2734379	ArgumentList	hexagon_operands [ i ] . fmt		2734304	1					
ANR	2734380	Argument	hexagon_operands [ i ] . fmt		2734304	0					
ANR	2734381	MemberAccess	hexagon_operands [ i ] . fmt		2734304	0					
ANR	2734382	ArrayIndexing	hexagon_operands [ i ]		2734304	0					
ANR	2734383	Identifier	hexagon_operands		2734304	0					
ANR	2734384	Identifier	i		2734304	1					
ANR	2734385	Identifier	fmt		2734304	1					
ANR	2734386	Argument	buf		2734304	1					
ANR	2734387	Identifier	buf		2734304	0					
ANR	2734388	ReturnStatement	return ( hexagon_operands + i ) ;	3098:6:99684:99713	2734304	1	True				
ANR	2734389	AdditiveExpression	hexagon_operands + i		2734304	0		+			
ANR	2734390	Identifier	hexagon_operands		2734304	0					
ANR	2734391	Identifier	i		2734304	1					
ANR	2734392	ReturnStatement	return NULL ;	3100:2:99718:99729	2734304	6	True				
ANR	2734393	Identifier	NULL		2734304	0					
ANR	2734394	ReturnType	const hexagon_operand *		2734304	1					
ANR	2734395	Identifier	hexagon_operand_find		2734304	2					
ANR	2734396	ParameterList	"const hexagon_operand * operand , const char * suffix"		2734304	3					
ANR	2734397	Parameter	const hexagon_operand * operand	3087:1:99386:99415	2734304	0	True				
ANR	2734398	ParameterType	const hexagon_operand *		2734304	0					
ANR	2734399	Identifier	operand		2734304	1					
ANR	2734400	Parameter	const char * suffix	3087:33:99418:99435	2734304	1	True				
ANR	2734401	ParameterType	const char *		2734304	0					
ANR	2734402	Identifier	suffix		2734304	1					
ANR	2734403	CFGEntryNode	ENTRY		2734304		True				
ANR	2734404	CFGExitNode	EXIT		2734304		True				
ANR	2734405	Symbol	strcmp		2734304						
ANR	2734406	Symbol	NULL		2734304						
ANR	2734407	Symbol	* operand		2734304						
ANR	2734408	Symbol	* hexagon_operands		2734304						
ANR	2734409	Symbol	alloca		2734304						
ANR	2734410	Symbol	hexagon_operands		2734304						
ANR	2734411	Symbol	i		2734304						
ANR	2734412	Symbol	suffix		2734304						
ANR	2734413	Symbol	strlen		2734304						
ANR	2734414	Symbol	buf		2734304						
ANR	2734415	Symbol	operand -> fmt		2734304						
ANR	2734416	Symbol	hexagon_operand_count		2734304						
ANR	2734417	Symbol	* i		2734304						
ANR	2734418	Symbol	hexagon_operands [ i ] . fmt		2734304						
ANR	2734419	Symbol	operand		2734304						
ANR	2734420	Function	hexagon_operand_find_xx16	3103:0:99734:100099							
ANR	2734421	FunctionDef	"hexagon_operand_find_xx16 (const hexagon_operand * operand , char * suffix)"		2734420	0					
ANR	2734422	CompoundStatement		3106:0:99838:100099	2734420	0					
ANR	2734423	IdentifierDeclStatement	char buf [ 100 ] ;	3107:2:99842:99855	2734420	0	True				
ANR	2734424	IdentifierDecl	buf [ 100 ]		2734420	0					
ANR	2734425	IdentifierDeclType	char [ 100 ]		2734420	0					
ANR	2734426	Identifier	buf		2734420	1					
ANR	2734427	PrimaryExpression	100		2734420	2					
ANR	2734428	IdentifierDeclStatement	size_t i ;	3108:2:99859:99867	2734420	1	True				
ANR	2734429	IdentifierDecl	i		2734420	0					
ANR	2734430	IdentifierDeclType	size_t		2734420	0					
ANR	2734431	Identifier	i		2734420	1					
ANR	2734432	ExpressionStatement	"sprintf ( buf , ""%s%s"" , operand -> fmt , suffix )"	3110:2:99872:99914	2734420	2	True				
ANR	2734433	CallExpression	"sprintf ( buf , ""%s%s"" , operand -> fmt , suffix )"		2734420	0					
ANR	2734434	Callee	sprintf		2734420	0					
ANR	2734435	Identifier	sprintf		2734420	0					
ANR	2734436	ArgumentList	buf		2734420	1					
ANR	2734437	Argument	buf		2734420	0					
ANR	2734438	Identifier	buf		2734420	0					
ANR	2734439	Argument	"""%s%s"""		2734420	1					
ANR	2734440	PrimaryExpression	"""%s%s"""		2734420	0					
ANR	2734441	Argument	operand -> fmt		2734420	2					
ANR	2734442	PtrMemberAccess	operand -> fmt		2734420	0					
ANR	2734443	Identifier	operand		2734420	0					
ANR	2734444	Identifier	fmt		2734420	1					
ANR	2734445	Argument	suffix		2734420	3					
ANR	2734446	Identifier	suffix		2734420	0					
ANR	2734447	ForStatement	for ( i = 0 ; i < hexagon_operand_count ; i ++ )		2734420	3					
ANR	2734448	ForInit	i = 0 ;	3111:7:99923:99928	2734420	0	True				
ANR	2734449	AssignmentExpression	i = 0		2734420	0		=			
ANR	2734450	Identifier	i		2734420	0					
ANR	2734451	PrimaryExpression	0		2734420	1					
ANR	2734452	Condition	i < hexagon_operand_count	3111:14:99930:99954	2734420	1	True				
ANR	2734453	RelationalExpression	i < hexagon_operand_count		2734420	0		<			
ANR	2734454	Identifier	i		2734420	0					
ANR	2734455	Identifier	hexagon_operand_count		2734420	1					
ANR	2734456	PostIncDecOperationExpression	i ++	3111:41:99957:99959	2734420	2	True				
ANR	2734457	Identifier	i		2734420	0					
ANR	2734458	IncDec	++		2734420	1					
ANR	2734459	CompoundStatement		7:4:129:179	2734420	3					
ANR	2734460	IdentifierDeclStatement	const hexagon_operand * oper = & hexagon_operands [ i ] ;	3112:4:99968:100018	2734420	0	True				
ANR	2734461	IdentifierDecl	* oper = & hexagon_operands [ i ]		2734420	0					
ANR	2734462	IdentifierDeclType	const hexagon_operand *		2734420	0					
ANR	2734463	Identifier	oper		2734420	1					
ANR	2734464	AssignmentExpression	* oper = & hexagon_operands [ i ]		2734420	2		=			
ANR	2734465	Identifier	oper		2734420	0					
ANR	2734466	UnaryOperationExpression	& hexagon_operands [ i ]		2734420	1					
ANR	2734467	UnaryOperator	&		2734420	0					
ANR	2734468	ArrayIndexing	hexagon_operands [ i ]		2734420	1					
ANR	2734469	Identifier	hexagon_operands		2734420	0					
ANR	2734470	Identifier	i		2734420	1					
ANR	2734471	IfStatement	"if ( ! strcmp ( oper -> fmt , buf ) )"		2734420	1					
ANR	2734472	Condition	"! strcmp ( oper -> fmt , buf )"	3113:8:100028:100050	2734420	0	True				
ANR	2734473	UnaryOperationExpression	"! strcmp ( oper -> fmt , buf )"		2734420	0					
ANR	2734474	UnaryOperator	!		2734420	0					
ANR	2734475	CallExpression	"strcmp ( oper -> fmt , buf )"		2734420	1					
ANR	2734476	Callee	strcmp		2734420	0					
ANR	2734477	Identifier	strcmp		2734420	0					
ANR	2734478	ArgumentList	oper -> fmt		2734420	1					
ANR	2734479	Argument	oper -> fmt		2734420	0					
ANR	2734480	PtrMemberAccess	oper -> fmt		2734420	0					
ANR	2734481	Identifier	oper		2734420	0					
ANR	2734482	Identifier	fmt		2734420	1					
ANR	2734483	Argument	buf		2734420	1					
ANR	2734484	Identifier	buf		2734420	0					
ANR	2734485	CompoundStatement		8:33:214:214	2734420	1					
ANR	2734486	ReturnStatement	return oper ;	3114:6:100061:100072	2734420	0	True				
ANR	2734487	Identifier	oper		2734420	0					
ANR	2734488	ReturnStatement	return NULL ;	3117:2:100086:100097	2734420	4	True				
ANR	2734489	Identifier	NULL		2734420	0					
ANR	2734490	ReturnType	static const hexagon_operand *		2734420	1					
ANR	2734491	Identifier	hexagon_operand_find_xx16		2734420	2					
ANR	2734492	ParameterList	"const hexagon_operand * operand , char * suffix"		2734420	3					
ANR	2734493	Parameter	const hexagon_operand * operand	3105:1:99792:99821	2734420	0	True				
ANR	2734494	ParameterType	const hexagon_operand *		2734420	0					
ANR	2734495	Identifier	operand		2734420	1					
ANR	2734496	Parameter	char * suffix	3105:33:99824:99835	2734420	1	True				
ANR	2734497	ParameterType	char *		2734420	0					
ANR	2734498	Identifier	suffix		2734420	1					
ANR	2734499	CFGEntryNode	ENTRY		2734420		True				
ANR	2734500	CFGExitNode	EXIT		2734420		True				
ANR	2734501	Symbol	strcmp		2734420						
ANR	2734502	Symbol	NULL		2734420						
ANR	2734503	Symbol	* operand		2734420						
ANR	2734504	Symbol	hexagon_operands		2734420						
ANR	2734505	Symbol	* oper		2734420						
ANR	2734506	Symbol	i		2734420						
ANR	2734507	Symbol	suffix		2734420						
ANR	2734508	Symbol	oper -> fmt		2734420						
ANR	2734509	Symbol	buf		2734420						
ANR	2734510	Symbol	operand -> fmt		2734420						
ANR	2734511	Symbol	hexagon_operand_count		2734420						
ANR	2734512	Symbol	oper		2734420						
ANR	2734513	Symbol	operand		2734420						
ANR	2734514	Function	hexagon_operand_find_lo16	3126:0:100263:100403							
ANR	2734515	FunctionDef	hexagon_operand_find_lo16 (const hexagon_operand * operand)		2734514	0					
ANR	2734516	CompoundStatement		3129:0:100346:100403	2734514	0					
ANR	2734517	ReturnStatement	"return hexagon_operand_find_xx16 ( operand , ""_lo16"" ) ;"	3130:2:100350:100401	2734514	0	True				
ANR	2734518	CallExpression	"hexagon_operand_find_xx16 ( operand , ""_lo16"" )"		2734514	0					
ANR	2734519	Callee	hexagon_operand_find_xx16		2734514	0					
ANR	2734520	Identifier	hexagon_operand_find_xx16		2734514	0					
ANR	2734521	ArgumentList	operand		2734514	1					
ANR	2734522	Argument	operand		2734514	0					
ANR	2734523	Identifier	operand		2734514	0					
ANR	2734524	Argument	"""_lo16"""		2734514	1					
ANR	2734525	PrimaryExpression	"""_lo16"""		2734514	0					
ANR	2734526	ReturnType	const hexagon_operand *		2734514	1					
ANR	2734527	Identifier	hexagon_operand_find_lo16		2734514	2					
ANR	2734528	ParameterList	const hexagon_operand * operand		2734514	3					
ANR	2734529	Parameter	const hexagon_operand * operand	3128:1:100314:100343	2734514	0	True				
ANR	2734530	ParameterType	const hexagon_operand *		2734514	0					
ANR	2734531	Identifier	operand		2734514	1					
ANR	2734532	CFGEntryNode	ENTRY		2734514		True				
ANR	2734533	CFGExitNode	EXIT		2734514		True				
ANR	2734534	Symbol	hexagon_operand_find_xx16		2734514						
ANR	2734535	Symbol	operand		2734514						
ANR	2734536	Function	hexagon_operand_find_hi16	3139:0:100568:100708							
ANR	2734537	FunctionDef	hexagon_operand_find_hi16 (const hexagon_operand * operand)		2734536	0					
ANR	2734538	CompoundStatement		3142:0:100651:100708	2734536	0					
ANR	2734539	ReturnStatement	"return hexagon_operand_find_xx16 ( operand , ""_hi16"" ) ;"	3143:2:100655:100706	2734536	0	True				
ANR	2734540	CallExpression	"hexagon_operand_find_xx16 ( operand , ""_hi16"" )"		2734536	0					
ANR	2734541	Callee	hexagon_operand_find_xx16		2734536	0					
ANR	2734542	Identifier	hexagon_operand_find_xx16		2734536	0					
ANR	2734543	ArgumentList	operand		2734536	1					
ANR	2734544	Argument	operand		2734536	0					
ANR	2734545	Identifier	operand		2734536	0					
ANR	2734546	Argument	"""_hi16"""		2734536	1					
ANR	2734547	PrimaryExpression	"""_hi16"""		2734536	0					
ANR	2734548	ReturnType	const hexagon_operand *		2734536	1					
ANR	2734549	Identifier	hexagon_operand_find_hi16		2734536	2					
ANR	2734550	ParameterList	const hexagon_operand * operand		2734536	3					
ANR	2734551	Parameter	const hexagon_operand * operand	3141:1:100619:100648	2734536	0	True				
ANR	2734552	ParameterType	const hexagon_operand *		2734536	0					
ANR	2734553	Identifier	operand		2734536	1					
ANR	2734554	CFGEntryNode	ENTRY		2734536		True				
ANR	2734555	CFGExitNode	EXIT		2734536		True				
ANR	2734556	Symbol	hexagon_operand_find_xx16		2734536						
ANR	2734557	Symbol	operand		2734536						
ANR	2734558	Function	hexagon_extract_modifier_operand	3148:0:100782:101584							
ANR	2734559	FunctionDef	"hexagon_extract_modifier_operand (const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg)"		2734558	0					
ANR	2734560	CompoundStatement		3156:0:100937:101584	2734558	0					
ANR	2734561	IdentifierDeclStatement	size_t i ;	3157:2:100941:100949	2734558	0	True				
ANR	2734562	IdentifierDecl	i		2734558	0					
ANR	2734563	IdentifierDeclType	size_t		2734558	0					
ANR	2734564	Identifier	i		2734558	1					
ANR	2734565	IdentifierDeclStatement	char reg_name [ 100 ] ;	3158:2:100953:100971	2734558	1	True				
ANR	2734566	IdentifierDecl	reg_name [ 100 ]		2734558	0					
ANR	2734567	IdentifierDeclType	char [ 100 ]		2734558	0					
ANR	2734568	Identifier	reg_name		2734558	1					
ANR	2734569	PrimaryExpression	100		2734558	2					
ANR	2734570	Statement	static	3159:2:100975:100980	2734558	2	True				
ANR	2734571	IdentifierDeclStatement	char xx [ 100 ] ;	3159:9:100982:100994	2734558	3	True				
ANR	2734572	IdentifierDecl	xx [ 100 ]		2734558	0					
ANR	2734573	IdentifierDeclType	char [ 100 ]		2734558	0					
ANR	2734574	Identifier	xx		2734558	1					
ANR	2734575	PrimaryExpression	100		2734558	2					
ANR	2734576	IfStatement	"if ( ! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg ) )"		2734558	4					
ANR	2734577	Condition	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"	3162:5:101062:101125	2734558	0	True				
ANR	2734578	UnaryOperationExpression	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		2734558	0					
ANR	2734579	UnaryOperator	!		2734558	0					
ANR	2734580	CallExpression	"hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		2734558	1					
ANR	2734581	Callee	hexagon_dis_operand		2734558	0					
ANR	2734582	Identifier	hexagon_dis_operand		2734558	0					
ANR	2734583	ArgumentList	operand		2734558	1					
ANR	2734584	Argument	operand		2734558	0					
ANR	2734585	Identifier	operand		2734558	0					
ANR	2734586	Argument	insn		2734558	1					
ANR	2734587	Identifier	insn		2734558	0					
ANR	2734588	Argument	0		2734558	2					
ANR	2734589	PrimaryExpression	0		2734558	0					
ANR	2734590	Argument	0		2734558	3					
ANR	2734591	PrimaryExpression	0		2734558	0					
ANR	2734592	Argument	enc		2734558	4					
ANR	2734593	Identifier	enc		2734558	0					
ANR	2734594	Argument	reg_name		2734558	5					
ANR	2734595	Identifier	reg_name		2734558	0					
ANR	2734596	Argument	errmsg		2734558	6					
ANR	2734597	Identifier	errmsg		2734558	0					
ANR	2734598	ReturnStatement	return 0 ;	3163:4:101132:101140	2734558	1	True				
ANR	2734599	PrimaryExpression	0		2734558	0					
ANR	2734600	ForStatement	for ( i = 0 ; i < hexagon_control_regs_count ; i ++ )		2734558	5					
ANR	2734601	ForInit	i = 0 ;	3167:6:101250:101253	2734558	0	True				
ANR	2734602	AssignmentExpression	i = 0		2734558	0		=			
ANR	2734603	Identifier	i		2734558	0					
ANR	2734604	PrimaryExpression	0		2734558	1					
ANR	2734605	Condition	i < hexagon_control_regs_count	3167:10:101254:101281	2734558	1	True				
ANR	2734606	RelationalExpression	i < hexagon_control_regs_count		2734558	0		<			
ANR	2734607	Identifier	i		2734558	0					
ANR	2734608	Identifier	hexagon_control_regs_count		2734558	1					
ANR	2734609	PostIncDecOperationExpression	i ++	3167:39:101283:101285	2734558	2	True				
ANR	2734610	Identifier	i		2734558	0					
ANR	2734611	IncDec	++		2734558	1					
ANR	2734612	CompoundStatement		14:4:408:433	2734558	3					
ANR	2734613	IdentifierDeclStatement	const char * name = hexagon_control_regs [ i ] . name ;	3168:4:101293:101340	2734558	0	True				
ANR	2734614	IdentifierDecl	* name = hexagon_control_regs [ i ] . name		2734558	0					
ANR	2734615	IdentifierDeclType	const char *		2734558	0					
ANR	2734616	Identifier	name		2734558	1					
ANR	2734617	AssignmentExpression	* name = hexagon_control_regs [ i ] . name		2734558	2		=			
ANR	2734618	Identifier	name		2734558	0					
ANR	2734619	MemberAccess	hexagon_control_regs [ i ] . name		2734558	1					
ANR	2734620	ArrayIndexing	hexagon_control_regs [ i ]		2734558	0					
ANR	2734621	Identifier	hexagon_control_regs		2734558	0					
ANR	2734622	Identifier	i		2734558	1					
ANR	2734623	Identifier	name		2734558	1					
ANR	2734624	IdentifierDeclStatement	size_t len = strlen ( name ) ;	3169:4:101346:101371	2734558	1	True				
ANR	2734625	IdentifierDecl	len = strlen ( name )		2734558	0					
ANR	2734626	IdentifierDeclType	size_t		2734558	0					
ANR	2734627	Identifier	len		2734558	1					
ANR	2734628	AssignmentExpression	len = strlen ( name )		2734558	2		=			
ANR	2734629	Identifier	len		2734558	0					
ANR	2734630	CallExpression	strlen ( name )		2734558	1					
ANR	2734631	Callee	strlen		2734558	0					
ANR	2734632	Identifier	strlen		2734558	0					
ANR	2734633	ArgumentList	name		2734558	1					
ANR	2734634	Argument	name		2734558	0					
ANR	2734635	Identifier	name		2734558	0					
ANR	2734636	IfStatement	"if ( ! r_str_ncasecmp ( reg_name , name , len ) )"		2734558	2					
ANR	2734637	Condition	"! r_str_ncasecmp ( reg_name , name , len )"	3170:7:101380:101413	2734558	0	True				
ANR	2734638	UnaryOperationExpression	"! r_str_ncasecmp ( reg_name , name , len )"		2734558	0					
ANR	2734639	UnaryOperator	!		2734558	0					
ANR	2734640	CallExpression	"r_str_ncasecmp ( reg_name , name , len )"		2734558	1					
ANR	2734641	Callee	r_str_ncasecmp		2734558	0					
ANR	2734642	Identifier	r_str_ncasecmp		2734558	0					
ANR	2734643	ArgumentList	reg_name		2734558	1					
ANR	2734644	Argument	reg_name		2734558	0					
ANR	2734645	Identifier	reg_name		2734558	0					
ANR	2734646	Argument	name		2734558	1					
ANR	2734647	Identifier	name		2734558	0					
ANR	2734648	Argument	len		2734558	2					
ANR	2734649	Identifier	len		2734558	0					
ANR	2734650	CompoundStatement		15:42:477:477	2734558	1					
ANR	2734651	ExpressionStatement	* return_value = hexagon_control_regs [ i ] . reg_num	3171:6:101423:101470	2734558	0	True				
ANR	2734652	AssignmentExpression	* return_value = hexagon_control_regs [ i ] . reg_num		2734558	0		=			
ANR	2734653	UnaryOperationExpression	* return_value		2734558	0					
ANR	2734654	UnaryOperator	*		2734558	0					
ANR	2734655	Identifier	return_value		2734558	1					
ANR	2734656	MemberAccess	hexagon_control_regs [ i ] . reg_num		2734558	1					
ANR	2734657	ArrayIndexing	hexagon_control_regs [ i ]		2734558	0					
ANR	2734658	Identifier	hexagon_control_regs		2734558	0					
ANR	2734659	Identifier	i		2734558	1					
ANR	2734660	Identifier	reg_num		2734558	1					
ANR	2734661	ReturnStatement	return 1 ;	3172:6:101478:101486	2734558	1	True				
ANR	2734662	PrimaryExpression	1		2734558	0					
ANR	2734663	ExpressionStatement	"sprintf ( xx , ""Illegal modifier operand: %s"" , reg_name )"	3176:2:101501:101554	2734558	6	True				
ANR	2734664	CallExpression	"sprintf ( xx , ""Illegal modifier operand: %s"" , reg_name )"		2734558	0					
ANR	2734665	Callee	sprintf		2734558	0					
ANR	2734666	Identifier	sprintf		2734558	0					
ANR	2734667	ArgumentList	xx		2734558	1					
ANR	2734668	Argument	xx		2734558	0					
ANR	2734669	Identifier	xx		2734558	0					
ANR	2734670	Argument	"""Illegal modifier operand: %s"""		2734558	1					
ANR	2734671	PrimaryExpression	"""Illegal modifier operand: %s"""		2734558	0					
ANR	2734672	Argument	reg_name		2734558	2					
ANR	2734673	Identifier	reg_name		2734558	0					
ANR	2734674	ExpressionStatement	* errmsg = xx	3177:2:101558:101570	2734558	7	True				
ANR	2734675	AssignmentExpression	* errmsg = xx		2734558	0		=			
ANR	2734676	UnaryOperationExpression	* errmsg		2734558	0					
ANR	2734677	UnaryOperator	*		2734558	0					
ANR	2734678	Identifier	errmsg		2734558	1					
ANR	2734679	Identifier	xx		2734558	1					
ANR	2734680	ReturnStatement	return 0 ;	3178:2:101574:101582	2734558	8	True				
ANR	2734681	PrimaryExpression	0		2734558	0					
ANR	2734682	ReturnType	int		2734558	1					
ANR	2734683	Identifier	hexagon_extract_modifier_operand		2734558	2					
ANR	2734684	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg"		2734558	3					
ANR	2734685	Parameter	const hexagon_operand * operand	3150:4:100824:100853	2734558	0	True				
ANR	2734686	ParameterType	const hexagon_operand *		2734558	0					
ANR	2734687	Identifier	operand		2734558	1					
ANR	2734688	Parameter	hexagon_insn insn	3151:4:100860:100876	2734558	1	True				
ANR	2734689	ParameterType	hexagon_insn		2734558	0					
ANR	2734690	Identifier	insn		2734558	1					
ANR	2734691	Parameter	char * enc	3152:4:100883:100891	2734558	2	True				
ANR	2734692	ParameterType	char *		2734558	0					
ANR	2734693	Identifier	enc		2734558	1					
ANR	2734694	Parameter	int * return_value	3153:4:100898:100914	2734558	3	True				
ANR	2734695	ParameterType	int *		2734558	0					
ANR	2734696	Identifier	return_value		2734558	1					
ANR	2734697	Parameter	char * * errmsg	3154:4:100921:100933	2734558	4	True				
ANR	2734698	ParameterType	char * *		2734558	0					
ANR	2734699	Identifier	errmsg		2734558	1					
ANR	2734700	CFGEntryNode	ENTRY		2734558		True				
ANR	2734701	CFGExitNode	EXIT		2734558		True				
ANR	2734702	Symbol	xx		2734558						
ANR	2734703	Symbol	return_value		2734558						
ANR	2734704	Symbol	hexagon_control_regs [ i ] . name		2734558						
ANR	2734705	Symbol	errmsg		2734558						
ANR	2734706	Symbol	i		2734558						
ANR	2734707	Symbol	hexagon_dis_operand		2734558						
ANR	2734708	Symbol	hexagon_control_regs [ i ] . reg_num		2734558						
ANR	2734709	Symbol	insn		2734558						
ANR	2734710	Symbol	* hexagon_control_regs		2734558						
ANR	2734711	Symbol	strlen		2734558						
ANR	2734712	Symbol	* i		2734558						
ANR	2734713	Symbol	len		2734558						
ANR	2734714	Symbol	name		2734558						
ANR	2734715	Symbol	hexagon_control_regs		2734558						
ANR	2734716	Symbol	reg_name		2734558						
ANR	2734717	Symbol	enc		2734558						
ANR	2734718	Symbol	r_str_ncasecmp		2734558						
ANR	2734719	Symbol	* return_value		2734558						
ANR	2734720	Symbol	* errmsg		2734558						
ANR	2734721	Symbol	operand		2734558						
ANR	2734722	Symbol	hexagon_control_regs_count		2734558						
ANR	2734723	Function	hexagon_extract_predicate_operand	3183:0:101696:102197							
ANR	2734724	FunctionDef	"hexagon_extract_predicate_operand (const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg)"		2734723	0					
ANR	2734725	CompoundStatement		3187:0:101832:102197	2734723	0					
ANR	2734726	IdentifierDeclStatement	char reg_name [ 100 ] ;	3188:2:101836:101855	2734723	0	True				
ANR	2734727	IdentifierDecl	reg_name [ 100 ]		2734723	0					
ANR	2734728	IdentifierDeclType	char [ 100 ]		2734723	0					
ANR	2734729	Identifier	reg_name		2734723	1					
ANR	2734730	PrimaryExpression	100		2734723	2					
ANR	2734731	IdentifierDeclStatement	int reg_num ;	3189:2:101859:101870	2734723	1	True				
ANR	2734732	IdentifierDecl	reg_num		2734723	0					
ANR	2734733	IdentifierDeclType	int		2734723	0					
ANR	2734734	Identifier	reg_num		2734723	1					
ANR	2734735	IfStatement	"if ( ! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg ) )"		2734723	2					
ANR	2734736	Condition	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"	3192:6:101937:102001	2734723	0	True				
ANR	2734737	UnaryOperationExpression	"! hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		2734723	0					
ANR	2734738	UnaryOperator	!		2734723	0					
ANR	2734739	CallExpression	"hexagon_dis_operand ( operand , insn , 0 , 0 , enc , reg_name , errmsg )"		2734723	1					
ANR	2734740	Callee	hexagon_dis_operand		2734723	0					
ANR	2734741	Identifier	hexagon_dis_operand		2734723	0					
ANR	2734742	ArgumentList	operand		2734723	1					
ANR	2734743	Argument	operand		2734723	0					
ANR	2734744	Identifier	operand		2734723	0					
ANR	2734745	Argument	insn		2734723	1					
ANR	2734746	Identifier	insn		2734723	0					
ANR	2734747	Argument	0		2734723	2					
ANR	2734748	PrimaryExpression	0		2734723	0					
ANR	2734749	Argument	0		2734723	3					
ANR	2734750	PrimaryExpression	0		2734723	0					
ANR	2734751	Argument	enc		2734723	4					
ANR	2734752	Identifier	enc		2734723	0					
ANR	2734753	Argument	reg_name		2734723	5					
ANR	2734754	Identifier	reg_name		2734723	0					
ANR	2734755	Argument	errmsg		2734723	6					
ANR	2734756	Identifier	errmsg		2734723	0					
ANR	2734757	ReturnStatement	return FALSE ;	3193:4:102008:102020	2734723	1	True				
ANR	2734758	Identifier	FALSE		2734723	0					
ANR	2734759	IfStatement	"if ( ! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg ) )"		2734723	3					
ANR	2734760	Condition	"! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"	3196:6:102068:102133	2734723	0	True				
ANR	2734761	UnaryOperationExpression	"! hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"		2734723	0					
ANR	2734762	UnaryOperator	!		2734723	0					
ANR	2734763	CallExpression	"hexagon_extract_operand ( operand , insn , 0 , enc , & reg_num , errmsg )"		2734723	1					
ANR	2734764	Callee	hexagon_extract_operand		2734723	0					
ANR	2734765	Identifier	hexagon_extract_operand		2734723	0					
ANR	2734766	ArgumentList	operand		2734723	1					
ANR	2734767	Argument	operand		2734723	0					
ANR	2734768	Identifier	operand		2734723	0					
ANR	2734769	Argument	insn		2734723	1					
ANR	2734770	Identifier	insn		2734723	0					
ANR	2734771	Argument	0		2734723	2					
ANR	2734772	PrimaryExpression	0		2734723	0					
ANR	2734773	Argument	enc		2734723	3					
ANR	2734774	Identifier	enc		2734723	0					
ANR	2734775	Argument	& reg_num		2734723	4					
ANR	2734776	UnaryOperationExpression	& reg_num		2734723	0					
ANR	2734777	UnaryOperator	&		2734723	0					
ANR	2734778	Identifier	reg_num		2734723	1					
ANR	2734779	Argument	errmsg		2734723	5					
ANR	2734780	Identifier	errmsg		2734723	0					
ANR	2734781	ReturnStatement	return FALSE ;	3197:4:102140:102152	2734723	1	True				
ANR	2734782	Identifier	FALSE		2734723	0					
ANR	2734783	ExpressionStatement	* return_value = reg_num	3199:2:102157:102180	2734723	4	True				
ANR	2734784	AssignmentExpression	* return_value = reg_num		2734723	0		=			
ANR	2734785	UnaryOperationExpression	* return_value		2734723	0					
ANR	2734786	UnaryOperator	*		2734723	0					
ANR	2734787	Identifier	return_value		2734723	1					
ANR	2734788	Identifier	reg_num		2734723	1					
ANR	2734789	ReturnStatement	return TRUE ;	3200:2:102184:102195	2734723	5	True				
ANR	2734790	Identifier	TRUE		2734723	0					
ANR	2734791	ReturnType	int		2734723	1					
ANR	2734792	Identifier	hexagon_extract_predicate_operand		2734723	2					
ANR	2734793	ParameterList	"const hexagon_operand * operand , hexagon_insn insn , char * enc , int * return_value , char * * errmsg"		2734723	3					
ANR	2734794	Parameter	const hexagon_operand * operand	3185:1:101735:101764	2734723	0	True				
ANR	2734795	ParameterType	const hexagon_operand *		2734723	0					
ANR	2734796	Identifier	operand		2734723	1					
ANR	2734797	Parameter	hexagon_insn insn	3185:33:101767:101783	2734723	1	True				
ANR	2734798	ParameterType	hexagon_insn		2734723	0					
ANR	2734799	Identifier	insn		2734723	1					
ANR	2734800	Parameter	char * enc	3186:1:101787:101795	2734723	2	True				
ANR	2734801	ParameterType	char *		2734723	0					
ANR	2734802	Identifier	enc		2734723	1					
ANR	2734803	Parameter	int * return_value	3186:12:101798:101814	2734723	3	True				
ANR	2734804	ParameterType	int *		2734723	0					
ANR	2734805	Identifier	return_value		2734723	1					
ANR	2734806	Parameter	char * * errmsg	3186:31:101817:101829	2734723	4	True				
ANR	2734807	ParameterType	char * *		2734723	0					
ANR	2734808	Identifier	errmsg		2734723	1					
ANR	2734809	CFGEntryNode	ENTRY		2734723		True				
ANR	2734810	CFGExitNode	EXIT		2734723		True				
ANR	2734811	Symbol	return_value		2734723						
ANR	2734812	Symbol	reg_num		2734723						
ANR	2734813	Symbol	& reg_num		2734723						
ANR	2734814	Symbol	errmsg		2734723						
ANR	2734815	Symbol	hexagon_dis_operand		2734723						
ANR	2734816	Symbol	TRUE		2734723						
ANR	2734817	Symbol	insn		2734723						
ANR	2734818	Symbol	hexagon_extract_operand		2734723						
ANR	2734819	Symbol	reg_name		2734723						
ANR	2734820	Symbol	FALSE		2734723						
ANR	2734821	Symbol	enc		2734723						
ANR	2734822	Symbol	* return_value		2734723						
ANR	2734823	Symbol	operand		2734723						
ANR	2734824	Function	hexagon_opcode_next_asm	3209:0:102328:102453							
ANR	2734825	FunctionDef	hexagon_opcode_next_asm (const hexagon_opcode * op)		2734824	0					
ANR	2734826	CompoundStatement		3212:0:102402:102453	2734824	0					
ANR	2734827	IfStatement	if ( op )		2734824	0					
ANR	2734828	Condition	op	3213:6:102410:102411	2734824	0	True				
ANR	2734829	Identifier	op		2734824	0					
ANR	2734830	ExpressionStatement	op = op -> next_asm	3214:4:102418:102435	2734824	1	True				
ANR	2734831	AssignmentExpression	op = op -> next_asm		2734824	0		=			
ANR	2734832	Identifier	op		2734824	0					
ANR	2734833	PtrMemberAccess	op -> next_asm		2734824	1					
ANR	2734834	Identifier	op		2734824	0					
ANR	2734835	Identifier	next_asm		2734824	1					
ANR	2734836	ReturnStatement	return ( op ) ;	3216:2:102440:102451	2734824	1	True				
ANR	2734837	Identifier	op		2734824	0					
ANR	2734838	ReturnType	const hexagon_opcode *		2734824	1					
ANR	2734839	Identifier	hexagon_opcode_next_asm		2734824	2					
ANR	2734840	ParameterList	const hexagon_opcode * op		2734824	3					
ANR	2734841	Parameter	const hexagon_opcode * op	3211:1:102376:102399	2734824	0	True				
ANR	2734842	ParameterType	const hexagon_opcode *		2734824	0					
ANR	2734843	Identifier	op		2734824	1					
ANR	2734844	CFGEntryNode	ENTRY		2734824		True				
ANR	2734845	CFGExitNode	EXIT		2734824		True				
ANR	2734846	Symbol	op		2734824						
ANR	2734847	Symbol	* op		2734824						
ANR	2734848	Symbol	op -> next_asm		2734824						
