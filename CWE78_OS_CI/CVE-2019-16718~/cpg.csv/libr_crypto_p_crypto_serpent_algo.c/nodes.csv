command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4666648	File	data/converged/CVE-2019-16718~_radare2/libr_crypto_p_crypto_serpent_algo.c								
ANR	4666649	DeclStmt									
ANR	4666650	Decl							const ut8	const ut8 [ ]	IPTable
ANR	4666651	DeclStmt									
ANR	4666652	Decl							const ut8	const ut8 [ ]	FPTable
ANR	4666653	Function	rotr	47:0:2311:2389							
ANR	4666654	FunctionDef	"rotr (ut32 * x , int s)"		4666653	0					
ANR	4666655	CompoundStatement		47:40:2351:2389	4666653	0					
ANR	4666656	ExpressionStatement	* x = ( * x >> s ) | ( * x << ( 32 - s ) )	48:1:2354:2387	4666653	0	True				
ANR	4666657	AssignmentExpression	* x = ( * x >> s ) | ( * x << ( 32 - s ) )		4666653	0		=			
ANR	4666658	UnaryOperationExpression	* x		4666653	0					
ANR	4666659	UnaryOperator	*		4666653	0					
ANR	4666660	Identifier	x		4666653	1					
ANR	4666661	InclusiveOrExpression	( * x >> s ) | ( * x << ( 32 - s ) )		4666653	1		|			
ANR	4666662	ShiftExpression	* x >> s		4666653	0		>>			
ANR	4666663	UnaryOperationExpression	* x		4666653	0					
ANR	4666664	UnaryOperator	*		4666653	0					
ANR	4666665	Identifier	x		4666653	1					
ANR	4666666	Identifier	s		4666653	1					
ANR	4666667	ShiftExpression	* x << ( 32 - s )		4666653	1		<<			
ANR	4666668	UnaryOperationExpression	* x		4666653	0					
ANR	4666669	UnaryOperator	*		4666653	0					
ANR	4666670	Identifier	x		4666653	1					
ANR	4666671	AdditiveExpression	32 - s		4666653	1		-			
ANR	4666672	PrimaryExpression	32		4666653	0					
ANR	4666673	Identifier	s		4666653	1					
ANR	4666674	ReturnType	static inline void		4666653	1					
ANR	4666675	Identifier	rotr		4666653	2					
ANR	4666676	ParameterList	"ut32 * x , int s"		4666653	3					
ANR	4666677	Parameter	ut32 * x	47:24:2335:2341	4666653	0	True				
ANR	4666678	ParameterType	ut32 *		4666653	0					
ANR	4666679	Identifier	x		4666653	1					
ANR	4666680	Parameter	int s	47:33:2344:2348	4666653	1	True				
ANR	4666681	ParameterType	int		4666653	0					
ANR	4666682	Identifier	s		4666653	1					
ANR	4666683	CFGEntryNode	ENTRY		4666653		True				
ANR	4666684	CFGExitNode	EXIT		4666653		True				
ANR	4666685	Symbol	* x		4666653						
ANR	4666686	Symbol	s		4666653						
ANR	4666687	Symbol	x		4666653						
ANR	4666688	Function	rotl	51:0:2392:2470							
ANR	4666689	FunctionDef	"rotl (ut32 * x , int s)"		4666688	0					
ANR	4666690	CompoundStatement		51:40:2432:2470	4666688	0					
ANR	4666691	ExpressionStatement	* x = ( * x << s ) | ( * x >> ( 32 - s ) )	52:1:2435:2468	4666688	0	True				
ANR	4666692	AssignmentExpression	* x = ( * x << s ) | ( * x >> ( 32 - s ) )		4666688	0		=			
ANR	4666693	UnaryOperationExpression	* x		4666688	0					
ANR	4666694	UnaryOperator	*		4666688	0					
ANR	4666695	Identifier	x		4666688	1					
ANR	4666696	InclusiveOrExpression	( * x << s ) | ( * x >> ( 32 - s ) )		4666688	1		|			
ANR	4666697	ShiftExpression	* x << s		4666688	0		<<			
ANR	4666698	UnaryOperationExpression	* x		4666688	0					
ANR	4666699	UnaryOperator	*		4666688	0					
ANR	4666700	Identifier	x		4666688	1					
ANR	4666701	Identifier	s		4666688	1					
ANR	4666702	ShiftExpression	* x >> ( 32 - s )		4666688	1		>>			
ANR	4666703	UnaryOperationExpression	* x		4666688	0					
ANR	4666704	UnaryOperator	*		4666688	0					
ANR	4666705	Identifier	x		4666688	1					
ANR	4666706	AdditiveExpression	32 - s		4666688	1		-			
ANR	4666707	PrimaryExpression	32		4666688	0					
ANR	4666708	Identifier	s		4666688	1					
ANR	4666709	ReturnType	static inline void		4666688	1					
ANR	4666710	Identifier	rotl		4666688	2					
ANR	4666711	ParameterList	"ut32 * x , int s"		4666688	3					
ANR	4666712	Parameter	ut32 * x	51:24:2416:2422	4666688	0	True				
ANR	4666713	ParameterType	ut32 *		4666688	0					
ANR	4666714	Identifier	x		4666688	1					
ANR	4666715	Parameter	int s	51:33:2425:2429	4666688	1	True				
ANR	4666716	ParameterType	int		4666688	0					
ANR	4666717	Identifier	s		4666688	1					
ANR	4666718	CFGEntryNode	ENTRY		4666688		True				
ANR	4666719	CFGExitNode	EXIT		4666688		True				
ANR	4666720	Symbol	* x		4666688						
ANR	4666721	Symbol	s		4666688						
ANR	4666722	Symbol	x		4666688						
ANR	4666723	Function	apply_sbox	56:0:2525:2603							
ANR	4666724	FunctionDef	"apply_sbox (int si , ut8 x)"		4666723	0					
ANR	4666725	CompoundStatement		56:44:2569:2603	4666723	0					
ANR	4666726	ExpressionStatement	x = S [ si ] [ x & 0xf ]	57:1:2572:2590	4666723	0	True				
ANR	4666727	AssignmentExpression	x = S [ si ] [ x & 0xf ]		4666723	0		=			
ANR	4666728	Identifier	x		4666723	0					
ANR	4666729	ArrayIndexing	S [ si ] [ x & 0xf ]		4666723	1					
ANR	4666730	ArrayIndexing	S [ si ]		4666723	0					
ANR	4666731	Identifier	S		4666723	0					
ANR	4666732	Identifier	si		4666723	1					
ANR	4666733	BitAndExpression	x & 0xf		4666723	1		&			
ANR	4666734	Identifier	x		4666723	0					
ANR	4666735	PrimaryExpression	0xf		4666723	1					
ANR	4666736	ReturnStatement	return x ;	58:1:2593:2601	4666723	1	True				
ANR	4666737	Identifier	x		4666723	0					
ANR	4666738	ReturnType	static inline ut8		4666723	1					
ANR	4666739	Identifier	apply_sbox		4666723	2					
ANR	4666740	ParameterList	"int si , ut8 x"		4666723	3					
ANR	4666741	Parameter	int si	56:29:2554:2559	4666723	0	True				
ANR	4666742	ParameterType	int		4666723	0					
ANR	4666743	Identifier	si		4666723	1					
ANR	4666744	Parameter	ut8 x	56:37:2562:2566	4666723	1	True				
ANR	4666745	ParameterType	ut8		4666723	0					
ANR	4666746	Identifier	x		4666723	1					
ANR	4666747	CFGEntryNode	ENTRY		4666723		True				
ANR	4666748	CFGExitNode	EXIT		4666723		True				
ANR	4666749	Symbol	* * si		4666723						
ANR	4666750	Symbol	* x		4666723						
ANR	4666751	Symbol	S		4666723						
ANR	4666752	Symbol	si		4666723						
ANR	4666753	Symbol	x		4666723						
ANR	4666754	Symbol	* * S		4666723						
ANR	4666755	Symbol	* S		4666723						
ANR	4666756	Symbol	* si		4666723						
ANR	4666757	Function	apply_sbox_inv	61:0:2657:2742							
ANR	4666758	FunctionDef	"apply_sbox_inv (int si , ut8 x)"		4666757	0					
ANR	4666759	CompoundStatement		61:48:2705:2742	4666757	0					
ANR	4666760	ExpressionStatement	x = Sinv [ si ] [ x & 0xf ]	62:1:2708:2729	4666757	0	True				
ANR	4666761	AssignmentExpression	x = Sinv [ si ] [ x & 0xf ]		4666757	0		=			
ANR	4666762	Identifier	x		4666757	0					
ANR	4666763	ArrayIndexing	Sinv [ si ] [ x & 0xf ]		4666757	1					
ANR	4666764	ArrayIndexing	Sinv [ si ]		4666757	0					
ANR	4666765	Identifier	Sinv		4666757	0					
ANR	4666766	Identifier	si		4666757	1					
ANR	4666767	BitAndExpression	x & 0xf		4666757	1		&			
ANR	4666768	Identifier	x		4666757	0					
ANR	4666769	PrimaryExpression	0xf		4666757	1					
ANR	4666770	ReturnStatement	return x ;	63:1:2732:2740	4666757	1	True				
ANR	4666771	Identifier	x		4666757	0					
ANR	4666772	ReturnType	static inline ut8		4666757	1					
ANR	4666773	Identifier	apply_sbox_inv		4666757	2					
ANR	4666774	ParameterList	"int si , ut8 x"		4666757	3					
ANR	4666775	Parameter	int si	61:33:2690:2695	4666757	0	True				
ANR	4666776	ParameterType	int		4666757	0					
ANR	4666777	Identifier	si		4666757	1					
ANR	4666778	Parameter	ut8 x	61:41:2698:2702	4666757	1	True				
ANR	4666779	ParameterType	ut8		4666757	0					
ANR	4666780	Identifier	x		4666757	1					
ANR	4666781	CFGEntryNode	ENTRY		4666757		True				
ANR	4666782	CFGExitNode	EXIT		4666757		True				
ANR	4666783	Symbol	* * si		4666757						
ANR	4666784	Symbol	* Sinv		4666757						
ANR	4666785	Symbol	* x		4666757						
ANR	4666786	Symbol	* * Sinv		4666757						
ANR	4666787	Symbol	si		4666757						
ANR	4666788	Symbol	x		4666757						
ANR	4666789	Symbol	Sinv		4666757						
ANR	4666790	Symbol	* si		4666757						
ANR	4666791	Function	get_bit	66:0:2745:2878							
ANR	4666792	FunctionDef	"get_bit (int i , ut32 input)"		4666791	0					
ANR	4666793	CompoundStatement		66:45:2790:2878	4666791	0					
ANR	4666794	IfStatement	if ( i >= 32 )		4666791	0					
ANR	4666795	Condition	i >= 32	67:5:2797:2803	4666791	0	True				
ANR	4666796	RelationalExpression	i >= 32		4666791	0		>=			
ANR	4666797	Identifier	i		4666791	0					
ANR	4666798	PrimaryExpression	32		4666791	1					
ANR	4666799	CompoundStatement		2:14:15:15	4666791	1					
ANR	4666800	ExpressionStatement	"eprintf ( ""Wrong bit asked"" )"	68:2:2810:2836	4666791	0	True				
ANR	4666801	CallExpression	"eprintf ( ""Wrong bit asked"" )"		4666791	0					
ANR	4666802	Callee	eprintf		4666791	0					
ANR	4666803	Identifier	eprintf		4666791	0					
ANR	4666804	ArgumentList	"""Wrong bit asked"""		4666791	1					
ANR	4666805	Argument	"""Wrong bit asked"""		4666791	0					
ANR	4666806	PrimaryExpression	"""Wrong bit asked"""		4666791	0					
ANR	4666807	ExpressionStatement	exit ( 1 )	69:2:2840:2847	4666791	1	True				
ANR	4666808	CallExpression	exit ( 1 )		4666791	0					
ANR	4666809	Callee	exit		4666791	0					
ANR	4666810	Identifier	exit		4666791	0					
ANR	4666811	ArgumentList	1		4666791	1					
ANR	4666812	Argument	1		4666791	0					
ANR	4666813	PrimaryExpression	1		4666791	0					
ANR	4666814	ReturnStatement	return ( input >> i ) & 1 ;	71:1:2853:2876	4666791	1	True				
ANR	4666815	BitAndExpression	( input >> i ) & 1		4666791	0		&			
ANR	4666816	ShiftExpression	input >> i		4666791	0		>>			
ANR	4666817	Identifier	input		4666791	0					
ANR	4666818	Identifier	i		4666791	1					
ANR	4666819	PrimaryExpression	1		4666791	1					
ANR	4666820	ReturnType	static inline ut8		4666791	1					
ANR	4666821	Identifier	get_bit		4666791	2					
ANR	4666822	ParameterList	"int i , ut32 input"		4666791	3					
ANR	4666823	Parameter	int i	66:26:2771:2775	4666791	0	True				
ANR	4666824	ParameterType	int		4666791	0					
ANR	4666825	Identifier	i		4666791	1					
ANR	4666826	Parameter	ut32 input	66:33:2778:2787	4666791	1	True				
ANR	4666827	ParameterType	ut32		4666791	0					
ANR	4666828	Identifier	input		4666791	1					
ANR	4666829	CFGEntryNode	ENTRY		4666791		True				
ANR	4666830	CFGExitNode	EXIT		4666791		True				
ANR	4666831	Symbol	input		4666791						
ANR	4666832	Symbol	i		4666791						
ANR	4666833	Function	apply_IP	74:0:2881:3111							
ANR	4666834	FunctionDef	"apply_IP (ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ])"		4666833	0					
ANR	4666835	CompoundStatement		74:59:2940:3111	4666833	0					
ANR	4666836	IdentifierDeclStatement	int index ;	75:1:2943:2952	4666833	0	True				
ANR	4666837	IdentifierDecl	index		4666833	0					
ANR	4666838	IdentifierDeclType	int		4666833	0					
ANR	4666839	Identifier	index		4666833	1					
ANR	4666840	IdentifierDeclStatement	int i ;	76:1:2955:2960	4666833	1	True				
ANR	4666841	IdentifierDecl	i		4666833	0					
ANR	4666842	IdentifierDeclType	int		4666833	0					
ANR	4666843	Identifier	i		4666833	1					
ANR	4666844	ForStatement	for ( i = 0 ; i < DW_BY_BLOCK * 32 ; i ++ )		4666833	2					
ANR	4666845	ForInit	i = 0 ;	77:6:2968:2973	4666833	0	True				
ANR	4666846	AssignmentExpression	i = 0		4666833	0		=			
ANR	4666847	Identifier	i		4666833	0					
ANR	4666848	PrimaryExpression	0		4666833	1					
ANR	4666849	Condition	i < DW_BY_BLOCK * 32	77:13:2975:2992	4666833	1	True				
ANR	4666850	RelationalExpression	i < DW_BY_BLOCK * 32		4666833	0		<			
ANR	4666851	Identifier	i		4666833	0					
ANR	4666852	MultiplicativeExpression	DW_BY_BLOCK * 32		4666833	1		*			
ANR	4666853	Identifier	DW_BY_BLOCK		4666833	0					
ANR	4666854	PrimaryExpression	32		4666833	1					
ANR	4666855	PostIncDecOperationExpression	i ++	77:33:2995:2997	4666833	2	True				
ANR	4666856	Identifier	i		4666833	0					
ANR	4666857	IncDec	++		4666833	1					
ANR	4666858	CompoundStatement		4:38:59:59	4666833	3					
ANR	4666859	ExpressionStatement	index = IPTable [ i ]	78:2:3004:3022	4666833	0	True				
ANR	4666860	AssignmentExpression	index = IPTable [ i ]		4666833	0		=			
ANR	4666861	Identifier	index		4666833	0					
ANR	4666862	ArrayIndexing	IPTable [ i ]		4666833	1					
ANR	4666863	Identifier	IPTable		4666833	0					
ANR	4666864	Identifier	i		4666833	1					
ANR	4666865	ExpressionStatement	"out [ i / 32 ] ^= ( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"	79:2:3026:3106	4666833	1	True				
ANR	4666866	AssignmentExpression	"out [ i / 32 ] ^= ( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"		4666833	0		^=			
ANR	4666867	ArrayIndexing	out [ i / 32 ]		4666833	0					
ANR	4666868	Identifier	out		4666833	0					
ANR	4666869	MultiplicativeExpression	i / 32		4666833	1		/			
ANR	4666870	Identifier	i		4666833	0					
ANR	4666871	PrimaryExpression	32		4666833	1					
ANR	4666872	BitAndExpression	"( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"		4666833	1		&			
ANR	4666873	ExclusiveOrExpression	"- ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ]"		4666833	0		^			
ANR	4666874	UnaryOperationExpression	"- ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] )"		4666833	0					
ANR	4666875	UnaryOperator	-		4666833	0					
ANR	4666876	CastExpression	"( ut32 ) get_bit ( index % 32 , in [ index / 32 ] )"		4666833	1					
ANR	4666877	CastTarget	ut32		4666833	0					
ANR	4666878	CallExpression	"get_bit ( index % 32 , in [ index / 32 ] )"		4666833	1					
ANR	4666879	Callee	get_bit		4666833	0					
ANR	4666880	Identifier	get_bit		4666833	0					
ANR	4666881	ArgumentList	index % 32		4666833	1					
ANR	4666882	Argument	index % 32		4666833	0					
ANR	4666883	MultiplicativeExpression	index % 32		4666833	0		%			
ANR	4666884	Identifier	index		4666833	0					
ANR	4666885	PrimaryExpression	32		4666833	1					
ANR	4666886	Argument	in [ index / 32 ]		4666833	1					
ANR	4666887	ArrayIndexing	in [ index / 32 ]		4666833	0					
ANR	4666888	Identifier	in		4666833	0					
ANR	4666889	MultiplicativeExpression	index / 32		4666833	1		/			
ANR	4666890	Identifier	index		4666833	0					
ANR	4666891	PrimaryExpression	32		4666833	1					
ANR	4666892	ArrayIndexing	out [ i / 32 ]		4666833	1					
ANR	4666893	Identifier	out		4666833	0					
ANR	4666894	MultiplicativeExpression	i / 32		4666833	1		/			
ANR	4666895	Identifier	i		4666833	0					
ANR	4666896	PrimaryExpression	32		4666833	1					
ANR	4666897	ShiftExpression	1 << i		4666833	1		<<			
ANR	4666898	PrimaryExpression	1		4666833	0					
ANR	4666899	Identifier	i		4666833	1					
ANR	4666900	ReturnType	void		4666833	1					
ANR	4666901	Identifier	apply_IP		4666833	2					
ANR	4666902	ParameterList	"ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ]"		4666833	3					
ANR	4666903	Parameter	ut32 in [ DW_BY_BLOCK ]	74:14:2895:2914	4666833	0	True				
ANR	4666904	ParameterType	ut32 [ DW_BY_BLOCK ]		4666833	0					
ANR	4666905	Identifier	in		4666833	1					
ANR	4666906	Parameter	ut32 out [ DW_BY_BLOCK ]	74:36:2917:2937	4666833	1	True				
ANR	4666907	ParameterType	ut32 [ DW_BY_BLOCK ]		4666833	0					
ANR	4666908	Identifier	out		4666833	1					
ANR	4666909	CFGEntryNode	ENTRY		4666833		True				
ANR	4666910	CFGExitNode	EXIT		4666833		True				
ANR	4666911	Symbol	IPTable		4666833						
ANR	4666912	Symbol	* i		4666833						
ANR	4666913	Symbol	in		4666833						
ANR	4666914	Symbol	DW_BY_BLOCK		4666833						
ANR	4666915	Symbol	* IPTable		4666833						
ANR	4666916	Symbol	* index		4666833						
ANR	4666917	Symbol	* in		4666833						
ANR	4666918	Symbol	* out		4666833						
ANR	4666919	Symbol	index		4666833						
ANR	4666920	Symbol	i		4666833						
ANR	4666921	Symbol	get_bit		4666833						
ANR	4666922	Symbol	out		4666833						
ANR	4666923	Function	apply_FP	84:0:3114:3344							
ANR	4666924	FunctionDef	"apply_FP (ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ])"		4666923	0					
ANR	4666925	CompoundStatement		84:59:3173:3344	4666923	0					
ANR	4666926	IdentifierDeclStatement	int index ;	85:1:3176:3185	4666923	0	True				
ANR	4666927	IdentifierDecl	index		4666923	0					
ANR	4666928	IdentifierDeclType	int		4666923	0					
ANR	4666929	Identifier	index		4666923	1					
ANR	4666930	IdentifierDeclStatement	int i ;	86:1:3188:3193	4666923	1	True				
ANR	4666931	IdentifierDecl	i		4666923	0					
ANR	4666932	IdentifierDeclType	int		4666923	0					
ANR	4666933	Identifier	i		4666923	1					
ANR	4666934	ForStatement	for ( i = 0 ; i < DW_BY_BLOCK * 32 ; i ++ )		4666923	2					
ANR	4666935	ForInit	i = 0 ;	87:6:3201:3206	4666923	0	True				
ANR	4666936	AssignmentExpression	i = 0		4666923	0		=			
ANR	4666937	Identifier	i		4666923	0					
ANR	4666938	PrimaryExpression	0		4666923	1					
ANR	4666939	Condition	i < DW_BY_BLOCK * 32	87:13:3208:3225	4666923	1	True				
ANR	4666940	RelationalExpression	i < DW_BY_BLOCK * 32		4666923	0		<			
ANR	4666941	Identifier	i		4666923	0					
ANR	4666942	MultiplicativeExpression	DW_BY_BLOCK * 32		4666923	1		*			
ANR	4666943	Identifier	DW_BY_BLOCK		4666923	0					
ANR	4666944	PrimaryExpression	32		4666923	1					
ANR	4666945	PostIncDecOperationExpression	i ++	87:33:3228:3230	4666923	2	True				
ANR	4666946	Identifier	i		4666923	0					
ANR	4666947	IncDec	++		4666923	1					
ANR	4666948	CompoundStatement		4:38:59:59	4666923	3					
ANR	4666949	ExpressionStatement	index = FPTable [ i ]	88:2:3237:3255	4666923	0	True				
ANR	4666950	AssignmentExpression	index = FPTable [ i ]		4666923	0		=			
ANR	4666951	Identifier	index		4666923	0					
ANR	4666952	ArrayIndexing	FPTable [ i ]		4666923	1					
ANR	4666953	Identifier	FPTable		4666923	0					
ANR	4666954	Identifier	i		4666923	1					
ANR	4666955	ExpressionStatement	"out [ i / 32 ] ^= ( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"	89:2:3259:3339	4666923	1	True				
ANR	4666956	AssignmentExpression	"out [ i / 32 ] ^= ( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"		4666923	0		^=			
ANR	4666957	ArrayIndexing	out [ i / 32 ]		4666923	0					
ANR	4666958	Identifier	out		4666923	0					
ANR	4666959	MultiplicativeExpression	i / 32		4666923	1		/			
ANR	4666960	Identifier	i		4666923	0					
ANR	4666961	PrimaryExpression	32		4666923	1					
ANR	4666962	BitAndExpression	"( - ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ] ) & ( 1 << i )"		4666923	1		&			
ANR	4666963	ExclusiveOrExpression	"- ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] ) ^ out [ i / 32 ]"		4666923	0		^			
ANR	4666964	UnaryOperationExpression	"- ( ut32 ) get_bit ( index % 32 , in [ index / 32 ] )"		4666923	0					
ANR	4666965	UnaryOperator	-		4666923	0					
ANR	4666966	CastExpression	"( ut32 ) get_bit ( index % 32 , in [ index / 32 ] )"		4666923	1					
ANR	4666967	CastTarget	ut32		4666923	0					
ANR	4666968	CallExpression	"get_bit ( index % 32 , in [ index / 32 ] )"		4666923	1					
ANR	4666969	Callee	get_bit		4666923	0					
ANR	4666970	Identifier	get_bit		4666923	0					
ANR	4666971	ArgumentList	index % 32		4666923	1					
ANR	4666972	Argument	index % 32		4666923	0					
ANR	4666973	MultiplicativeExpression	index % 32		4666923	0		%			
ANR	4666974	Identifier	index		4666923	0					
ANR	4666975	PrimaryExpression	32		4666923	1					
ANR	4666976	Argument	in [ index / 32 ]		4666923	1					
ANR	4666977	ArrayIndexing	in [ index / 32 ]		4666923	0					
ANR	4666978	Identifier	in		4666923	0					
ANR	4666979	MultiplicativeExpression	index / 32		4666923	1		/			
ANR	4666980	Identifier	index		4666923	0					
ANR	4666981	PrimaryExpression	32		4666923	1					
ANR	4666982	ArrayIndexing	out [ i / 32 ]		4666923	1					
ANR	4666983	Identifier	out		4666923	0					
ANR	4666984	MultiplicativeExpression	i / 32		4666923	1		/			
ANR	4666985	Identifier	i		4666923	0					
ANR	4666986	PrimaryExpression	32		4666923	1					
ANR	4666987	ShiftExpression	1 << i		4666923	1		<<			
ANR	4666988	PrimaryExpression	1		4666923	0					
ANR	4666989	Identifier	i		4666923	1					
ANR	4666990	ReturnType	void		4666923	1					
ANR	4666991	Identifier	apply_FP		4666923	2					
ANR	4666992	ParameterList	"ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ]"		4666923	3					
ANR	4666993	Parameter	ut32 in [ DW_BY_BLOCK ]	84:14:3128:3147	4666923	0	True				
ANR	4666994	ParameterType	ut32 [ DW_BY_BLOCK ]		4666923	0					
ANR	4666995	Identifier	in		4666923	1					
ANR	4666996	Parameter	ut32 out [ DW_BY_BLOCK ]	84:36:3150:3170	4666923	1	True				
ANR	4666997	ParameterType	ut32 [ DW_BY_BLOCK ]		4666923	0					
ANR	4666998	Identifier	out		4666923	1					
ANR	4666999	CFGEntryNode	ENTRY		4666923		True				
ANR	4667000	CFGExitNode	EXIT		4666923		True				
ANR	4667001	Symbol	FPTable		4666923						
ANR	4667002	Symbol	* i		4666923						
ANR	4667003	Symbol	in		4666923						
ANR	4667004	Symbol	DW_BY_BLOCK		4666923						
ANR	4667005	Symbol	* index		4666923						
ANR	4667006	Symbol	* out		4666923						
ANR	4667007	Symbol	* in		4666923						
ANR	4667008	Symbol	index		4666923						
ANR	4667009	Symbol	i		4666923						
ANR	4667010	Symbol	* FPTable		4666923						
ANR	4667011	Symbol	get_bit		4666923						
ANR	4667012	Symbol	out		4666923						
ANR	4667013	Function	serpent_keyschedule	94:0:3347:4828							
ANR	4667014	FunctionDef	"serpent_keyschedule (struct serpent_state st , ut32 subkeys [ NB_SUBKEYS * DW_BY_BLOCK ])"		4667013	0					
ANR	4667015	CompoundStatement		95:40:3437:4828	4667013	0					
ANR	4667016	IfStatement	if ( ( st . key_size != 128 ) && ( st . key_size != 192 ) && ( st . key_size != 256 ) )		4667013	0					
ANR	4667017	Condition	( st . key_size != 128 ) && ( st . key_size != 192 ) && ( st . key_size != 256 )	96:5:3444:3515	4667013	0	True				
ANR	4667018	AndExpression	( st . key_size != 128 ) && ( st . key_size != 192 ) && ( st . key_size != 256 )		4667013	0		&&			
ANR	4667019	EqualityExpression	st . key_size != 128		4667013	0		!=			
ANR	4667020	MemberAccess	st . key_size		4667013	0					
ANR	4667021	Identifier	st		4667013	0					
ANR	4667022	Identifier	key_size		4667013	1					
ANR	4667023	PrimaryExpression	128		4667013	1					
ANR	4667024	AndExpression	( st . key_size != 192 ) && ( st . key_size != 256 )		4667013	1		&&			
ANR	4667025	EqualityExpression	st . key_size != 192		4667013	0		!=			
ANR	4667026	MemberAccess	st . key_size		4667013	0					
ANR	4667027	Identifier	st		4667013	0					
ANR	4667028	Identifier	key_size		4667013	1					
ANR	4667029	PrimaryExpression	192		4667013	1					
ANR	4667030	EqualityExpression	st . key_size != 256		4667013	1		!=			
ANR	4667031	MemberAccess	st . key_size		4667013	0					
ANR	4667032	Identifier	st		4667013	0					
ANR	4667033	Identifier	key_size		4667013	1					
ANR	4667034	PrimaryExpression	256		4667013	1					
ANR	4667035	CompoundStatement		3:28:80:80	4667013	1					
ANR	4667036	ExpressionStatement	"eprintf ( ""Invalid key size"" )"	98:2:3522:3550	4667013	0	True				
ANR	4667037	CallExpression	"eprintf ( ""Invalid key size"" )"		4667013	0					
ANR	4667038	Callee	eprintf		4667013	0					
ANR	4667039	Identifier	eprintf		4667013	0					
ANR	4667040	ArgumentList	"""Invalid key size"""		4667013	1					
ANR	4667041	Argument	"""Invalid key size"""		4667013	0					
ANR	4667042	PrimaryExpression	"""Invalid key size"""		4667013	0					
ANR	4667043	ExpressionStatement	exit ( 1 )	99:2:3554:3562	4667013	1	True				
ANR	4667044	CallExpression	exit ( 1 )		4667013	0					
ANR	4667045	Callee	exit		4667013	0					
ANR	4667046	Identifier	exit		4667013	0					
ANR	4667047	ArgumentList	1		4667013	1					
ANR	4667048	Argument	1		4667013	0					
ANR	4667049	PrimaryExpression	1		4667013	0					
ANR	4667050	IdentifierDeclStatement	ut32 tmpkeys [ DW_BY_BLOCK * NB_SUBKEYS + DW_BY_USERKEY ] = { 0 } ;	102:1:3569:3625	4667013	1	True				
ANR	4667051	IdentifierDecl	tmpkeys [ DW_BY_BLOCK * NB_SUBKEYS + DW_BY_USERKEY ] = { 0 }		4667013	0					
ANR	4667052	IdentifierDeclType	ut32 [ DW_BY_BLOCK * NB_SUBKEYS + DW_BY_USERKEY ]		4667013	0					
ANR	4667053	Identifier	tmpkeys		4667013	1					
ANR	4667054	AdditiveExpression	DW_BY_BLOCK * NB_SUBKEYS + DW_BY_USERKEY		4667013	2		+			
ANR	4667055	MultiplicativeExpression	DW_BY_BLOCK * NB_SUBKEYS		4667013	0		*			
ANR	4667056	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667057	Identifier	NB_SUBKEYS		4667013	1					
ANR	4667058	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667059	AssignmentExpression	tmpkeys [ DW_BY_BLOCK * NB_SUBKEYS + DW_BY_USERKEY ] = { 0 }		4667013	3		=			
ANR	4667060	Identifier	tmpkeys		4667013	0					
ANR	4667061	InitializerList	0		4667013	1					
ANR	4667062	PrimaryExpression	0		4667013	0					
ANR	4667063	IdentifierDeclStatement	const ut32 phi = 0x9e3779b9 ;	103:1:3628:3655	4667013	2	True				
ANR	4667064	IdentifierDecl	phi = 0x9e3779b9		4667013	0					
ANR	4667065	IdentifierDeclType	const ut32		4667013	0					
ANR	4667066	Identifier	phi		4667013	1					
ANR	4667067	AssignmentExpression	phi = 0x9e3779b9		4667013	2		=			
ANR	4667068	Identifier	phi		4667013	0					
ANR	4667069	PrimaryExpression	0x9e3779b9		4667013	1					
ANR	4667070	IdentifierDeclStatement	int si ;	104:1:3658:3664	4667013	3	True				
ANR	4667071	IdentifierDecl	si		4667013	0					
ANR	4667072	IdentifierDeclType	int		4667013	0					
ANR	4667073	Identifier	si		4667013	1					
ANR	4667074	IdentifierDeclStatement	"ut8 in , out ;"	105:1:3667:3678	4667013	4	True				
ANR	4667075	IdentifierDecl	in		4667013	0					
ANR	4667076	IdentifierDeclType	ut8		4667013	0					
ANR	4667077	Identifier	in		4667013	1					
ANR	4667078	IdentifierDecl	out		4667013	1					
ANR	4667079	IdentifierDeclType	ut8		4667013	0					
ANR	4667080	Identifier	out		4667013	1					
ANR	4667081	IdentifierDeclStatement	"int i , j , l ;"	106:1:3681:3692	4667013	5	True				
ANR	4667082	IdentifierDecl	i		4667013	0					
ANR	4667083	IdentifierDeclType	int		4667013	0					
ANR	4667084	Identifier	i		4667013	1					
ANR	4667085	IdentifierDecl	j		4667013	1					
ANR	4667086	IdentifierDeclType	int		4667013	0					
ANR	4667087	Identifier	j		4667013	1					
ANR	4667088	IdentifierDecl	l		4667013	2					
ANR	4667089	IdentifierDeclType	int		4667013	0					
ANR	4667090	Identifier	l		4667013	1					
ANR	4667091	ForStatement	for ( i = 0 ; i < st . key_size / 32 ; i ++ )		4667013	6					
ANR	4667092	ForInit	i = 0 ;	108:6:3701:3706	4667013	0	True				
ANR	4667093	AssignmentExpression	i = 0		4667013	0		=			
ANR	4667094	Identifier	i		4667013	0					
ANR	4667095	PrimaryExpression	0		4667013	1					
ANR	4667096	Condition	i < st . key_size / 32	108:13:3708:3725	4667013	1	True				
ANR	4667097	RelationalExpression	i < st . key_size / 32		4667013	0		<			
ANR	4667098	Identifier	i		4667013	0					
ANR	4667099	MultiplicativeExpression	st . key_size / 32		4667013	1		/			
ANR	4667100	MemberAccess	st . key_size		4667013	0					
ANR	4667101	Identifier	st		4667013	0					
ANR	4667102	Identifier	key_size		4667013	1					
ANR	4667103	PrimaryExpression	32		4667013	1					
ANR	4667104	PostIncDecOperationExpression	i ++	108:33:3728:3730	4667013	2	True				
ANR	4667105	Identifier	i		4667013	0					
ANR	4667106	IncDec	++		4667013	1					
ANR	4667107	CompoundStatement		14:38:295:295	4667013	3					
ANR	4667108	ExpressionStatement	tmpkeys [ i ] = st . key [ i ]	109:2:3737:3759	4667013	0	True				
ANR	4667109	AssignmentExpression	tmpkeys [ i ] = st . key [ i ]		4667013	0		=			
ANR	4667110	ArrayIndexing	tmpkeys [ i ]		4667013	0					
ANR	4667111	Identifier	tmpkeys		4667013	0					
ANR	4667112	Identifier	i		4667013	1					
ANR	4667113	ArrayIndexing	st . key [ i ]		4667013	1					
ANR	4667114	MemberAccess	st . key		4667013	0					
ANR	4667115	Identifier	st		4667013	0					
ANR	4667116	Identifier	key		4667013	1					
ANR	4667117	Identifier	i		4667013	1					
ANR	4667118	IfStatement	if ( st . key_size != 256 )		4667013	7					
ANR	4667119	Condition	st . key_size != 256	113:5:3786:3803	4667013	0	True				
ANR	4667120	EqualityExpression	st . key_size != 256		4667013	0		!=			
ANR	4667121	MemberAccess	st . key_size		4667013	0					
ANR	4667122	Identifier	st		4667013	0					
ANR	4667123	Identifier	key_size		4667013	1					
ANR	4667124	PrimaryExpression	256		4667013	1					
ANR	4667125	CompoundStatement		19:25:368:368	4667013	1					
ANR	4667126	ExpressionStatement	tmpkeys [ st . key_size / 32 ] = 1	114:2:3810:3837	4667013	0	True				
ANR	4667127	AssignmentExpression	tmpkeys [ st . key_size / 32 ] = 1		4667013	0		=			
ANR	4667128	ArrayIndexing	tmpkeys [ st . key_size / 32 ]		4667013	0					
ANR	4667129	Identifier	tmpkeys		4667013	0					
ANR	4667130	MultiplicativeExpression	st . key_size / 32		4667013	1		/			
ANR	4667131	MemberAccess	st . key_size		4667013	0					
ANR	4667132	Identifier	st		4667013	0					
ANR	4667133	Identifier	key_size		4667013	1					
ANR	4667134	PrimaryExpression	32		4667013	1					
ANR	4667135	PrimaryExpression	1		4667013	1					
ANR	4667136	ForStatement	for ( i = DW_BY_USERKEY ; i < NB_SUBKEYS * DW_BY_BLOCK + DW_BY_USERKEY ; i ++ )		4667013	8					
ANR	4667137	ForInit	i = DW_BY_USERKEY ;	117:6:3849:3864	4667013	0	True				
ANR	4667138	AssignmentExpression	i = DW_BY_USERKEY		4667013	0		=			
ANR	4667139	Identifier	i		4667013	0					
ANR	4667140	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667141	Condition	i < NB_SUBKEYS * DW_BY_BLOCK + DW_BY_USERKEY	117:23:3866:3905	4667013	1	True				
ANR	4667142	RelationalExpression	i < NB_SUBKEYS * DW_BY_BLOCK + DW_BY_USERKEY		4667013	0		<			
ANR	4667143	Identifier	i		4667013	0					
ANR	4667144	AdditiveExpression	NB_SUBKEYS * DW_BY_BLOCK + DW_BY_USERKEY		4667013	1		+			
ANR	4667145	MultiplicativeExpression	NB_SUBKEYS * DW_BY_BLOCK		4667013	0		*			
ANR	4667146	Identifier	NB_SUBKEYS		4667013	0					
ANR	4667147	Identifier	DW_BY_BLOCK		4667013	1					
ANR	4667148	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667149	PostIncDecOperationExpression	i ++	117:65:3908:3910	4667013	2	True				
ANR	4667150	Identifier	i		4667013	0					
ANR	4667151	IncDec	++		4667013	1					
ANR	4667152	CompoundStatement		23:70:475:475	4667013	3					
ANR	4667153	ExpressionStatement	tmpkeys [ i ] = tmpkeys [ i - 8 ] ^ tmpkeys [ i - 5 ] ^ tmpkeys [ i - 3 ] ^ tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )	118:2:3917:4004	4667013	0	True				
ANR	4667154	AssignmentExpression	tmpkeys [ i ] = tmpkeys [ i - 8 ] ^ tmpkeys [ i - 5 ] ^ tmpkeys [ i - 3 ] ^ tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )		4667013	0		=			
ANR	4667155	ArrayIndexing	tmpkeys [ i ]		4667013	0					
ANR	4667156	Identifier	tmpkeys		4667013	0					
ANR	4667157	Identifier	i		4667013	1					
ANR	4667158	ExclusiveOrExpression	tmpkeys [ i - 8 ] ^ tmpkeys [ i - 5 ] ^ tmpkeys [ i - 3 ] ^ tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )		4667013	1		^			
ANR	4667159	ArrayIndexing	tmpkeys [ i - 8 ]		4667013	0					
ANR	4667160	Identifier	tmpkeys		4667013	0					
ANR	4667161	AdditiveExpression	i - 8		4667013	1		-			
ANR	4667162	Identifier	i		4667013	0					
ANR	4667163	PrimaryExpression	8		4667013	1					
ANR	4667164	ExclusiveOrExpression	tmpkeys [ i - 5 ] ^ tmpkeys [ i - 3 ] ^ tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )		4667013	1		^			
ANR	4667165	ArrayIndexing	tmpkeys [ i - 5 ]		4667013	0					
ANR	4667166	Identifier	tmpkeys		4667013	0					
ANR	4667167	AdditiveExpression	i - 5		4667013	1		-			
ANR	4667168	Identifier	i		4667013	0					
ANR	4667169	PrimaryExpression	5		4667013	1					
ANR	4667170	ExclusiveOrExpression	tmpkeys [ i - 3 ] ^ tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )		4667013	1		^			
ANR	4667171	ArrayIndexing	tmpkeys [ i - 3 ]		4667013	0					
ANR	4667172	Identifier	tmpkeys		4667013	0					
ANR	4667173	AdditiveExpression	i - 3		4667013	1		-			
ANR	4667174	Identifier	i		4667013	0					
ANR	4667175	PrimaryExpression	3		4667013	1					
ANR	4667176	ExclusiveOrExpression	tmpkeys [ i - 1 ] ^ phi ^ ( i - 8 )		4667013	1		^			
ANR	4667177	ArrayIndexing	tmpkeys [ i - 1 ]		4667013	0					
ANR	4667178	Identifier	tmpkeys		4667013	0					
ANR	4667179	AdditiveExpression	i - 1		4667013	1		-			
ANR	4667180	Identifier	i		4667013	0					
ANR	4667181	PrimaryExpression	1		4667013	1					
ANR	4667182	ExclusiveOrExpression	phi ^ ( i - 8 )		4667013	1		^			
ANR	4667183	Identifier	phi		4667013	0					
ANR	4667184	AdditiveExpression	i - 8		4667013	1		-			
ANR	4667185	Identifier	i		4667013	0					
ANR	4667186	PrimaryExpression	8		4667013	1					
ANR	4667187	ExpressionStatement	"rotl ( tmpkeys + i , 11 )"	120:2:4008:4030	4667013	1	True				
ANR	4667188	CallExpression	"rotl ( tmpkeys + i , 11 )"		4667013	0					
ANR	4667189	Callee	rotl		4667013	0					
ANR	4667190	Identifier	rotl		4667013	0					
ANR	4667191	ArgumentList	tmpkeys + i		4667013	1					
ANR	4667192	Argument	tmpkeys + i		4667013	0					
ANR	4667193	AdditiveExpression	tmpkeys + i		4667013	0		+			
ANR	4667194	Identifier	tmpkeys		4667013	0					
ANR	4667195	Identifier	i		4667013	1					
ANR	4667196	Argument	11		4667013	1					
ANR	4667197	PrimaryExpression	11		4667013	0					
ANR	4667198	ForStatement	for ( i = 0 ; i < NB_SUBKEYS ; i ++ )		4667013	9					
ANR	4667199	ForInit	i = 0 ;	124:6:4073:4078	4667013	0	True				
ANR	4667200	AssignmentExpression	i = 0		4667013	0		=			
ANR	4667201	Identifier	i		4667013	0					
ANR	4667202	PrimaryExpression	0		4667013	1					
ANR	4667203	Condition	i < NB_SUBKEYS	124:13:4080:4093	4667013	1	True				
ANR	4667204	RelationalExpression	i < NB_SUBKEYS		4667013	0		<			
ANR	4667205	Identifier	i		4667013	0					
ANR	4667206	Identifier	NB_SUBKEYS		4667013	1					
ANR	4667207	PostIncDecOperationExpression	i ++	124:29:4096:4098	4667013	2	True				
ANR	4667208	Identifier	i		4667013	0					
ANR	4667209	IncDec	++		4667013	1					
ANR	4667210	CompoundStatement		30:34:663:663	4667013	3					
ANR	4667211	ExpressionStatement	si = ( 32 + 3 - i ) % 8	125:2:4105:4126	4667013	0	True				
ANR	4667212	AssignmentExpression	si = ( 32 + 3 - i ) % 8		4667013	0		=			
ANR	4667213	Identifier	si		4667013	0					
ANR	4667214	MultiplicativeExpression	( 32 + 3 - i ) % 8		4667013	1		%			
ANR	4667215	AdditiveExpression	32 + 3 - i		4667013	0		+			
ANR	4667216	PrimaryExpression	32		4667013	0					
ANR	4667217	AdditiveExpression	3 - i		4667013	1		-			
ANR	4667218	PrimaryExpression	3		4667013	0					
ANR	4667219	Identifier	i		4667013	1					
ANR	4667220	PrimaryExpression	8		4667013	1					
ANR	4667221	ForStatement	for ( j = 0 ; j < NIBBLES_BY_SUBKEY ; j ++ )		4667013	1					
ANR	4667222	ForInit	j = 0 ;	128:7:4183:4188	4667013	0	True				
ANR	4667223	AssignmentExpression	j = 0		4667013	0		=			
ANR	4667224	Identifier	j		4667013	0					
ANR	4667225	PrimaryExpression	0		4667013	1					
ANR	4667226	Condition	j < NIBBLES_BY_SUBKEY	128:14:4190:4210	4667013	1	True				
ANR	4667227	RelationalExpression	j < NIBBLES_BY_SUBKEY		4667013	0		<			
ANR	4667228	Identifier	j		4667013	0					
ANR	4667229	Identifier	NIBBLES_BY_SUBKEY		4667013	1					
ANR	4667230	PostIncDecOperationExpression	j ++	128:37:4213:4215	4667013	2	True				
ANR	4667231	Identifier	j		4667013	0					
ANR	4667232	IncDec	++		4667013	1					
ANR	4667233	CompoundStatement		34:42:780:780	4667013	3					
ANR	4667234	ExpressionStatement	"in = get_bit ( j , tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) | get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 1 | get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2 | get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"	129:3:4223:4468	4667013	0	True				
ANR	4667235	AssignmentExpression	"in = get_bit ( j , tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) | get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 1 | get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2 | get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"		4667013	0		=			
ANR	4667236	Identifier	in		4667013	0					
ANR	4667237	InclusiveOrExpression	"get_bit ( j , tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) | get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 1 | get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2 | get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"		4667013	1		|			
ANR	4667238	CallExpression	"get_bit ( j , tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ] )"		4667013	0					
ANR	4667239	Callee	get_bit		4667013	0					
ANR	4667240	Identifier	get_bit		4667013	0					
ANR	4667241	ArgumentList	j		4667013	1					
ANR	4667242	Argument	j		4667013	0					
ANR	4667243	Identifier	j		4667013	0					
ANR	4667244	Argument	tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	1					
ANR	4667245	ArrayIndexing	tmpkeys [ 0 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	0					
ANR	4667246	Identifier	tmpkeys		4667013	0					
ANR	4667247	AdditiveExpression	0 + DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667248	PrimaryExpression	0		4667013	0					
ANR	4667249	AdditiveExpression	DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667250	MultiplicativeExpression	DW_BY_BLOCK * i		4667013	0		*			
ANR	4667251	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667252	Identifier	i		4667013	1					
ANR	4667253	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667254	InclusiveOrExpression	"get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 1 | get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2 | get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"		4667013	1		|			
ANR	4667255	ShiftExpression	"get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 1"		4667013	0		<<			
ANR	4667256	CallExpression	"get_bit ( j , tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ] )"		4667013	0					
ANR	4667257	Callee	get_bit		4667013	0					
ANR	4667258	Identifier	get_bit		4667013	0					
ANR	4667259	ArgumentList	j		4667013	1					
ANR	4667260	Argument	j		4667013	0					
ANR	4667261	Identifier	j		4667013	0					
ANR	4667262	Argument	tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	1					
ANR	4667263	ArrayIndexing	tmpkeys [ 1 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	0					
ANR	4667264	Identifier	tmpkeys		4667013	0					
ANR	4667265	AdditiveExpression	1 + DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667266	PrimaryExpression	1		4667013	0					
ANR	4667267	AdditiveExpression	DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667268	MultiplicativeExpression	DW_BY_BLOCK * i		4667013	0		*			
ANR	4667269	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667270	Identifier	i		4667013	1					
ANR	4667271	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667272	PrimaryExpression	1		4667013	1					
ANR	4667273	InclusiveOrExpression	"get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2 | get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"		4667013	1		|			
ANR	4667274	ShiftExpression	"get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 2"		4667013	0		<<			
ANR	4667275	CallExpression	"get_bit ( j , tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ] )"		4667013	0					
ANR	4667276	Callee	get_bit		4667013	0					
ANR	4667277	Identifier	get_bit		4667013	0					
ANR	4667278	ArgumentList	j		4667013	1					
ANR	4667279	Argument	j		4667013	0					
ANR	4667280	Identifier	j		4667013	0					
ANR	4667281	Argument	tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	1					
ANR	4667282	ArrayIndexing	tmpkeys [ 2 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	0					
ANR	4667283	Identifier	tmpkeys		4667013	0					
ANR	4667284	AdditiveExpression	2 + DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667285	PrimaryExpression	2		4667013	0					
ANR	4667286	AdditiveExpression	DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667287	MultiplicativeExpression	DW_BY_BLOCK * i		4667013	0		*			
ANR	4667288	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667289	Identifier	i		4667013	1					
ANR	4667290	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667291	PrimaryExpression	2		4667013	1					
ANR	4667292	ShiftExpression	"get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] ) << 3"		4667013	1		<<			
ANR	4667293	CallExpression	"get_bit ( j , tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ] )"		4667013	0					
ANR	4667294	Callee	get_bit		4667013	0					
ANR	4667295	Identifier	get_bit		4667013	0					
ANR	4667296	ArgumentList	j		4667013	1					
ANR	4667297	Argument	j		4667013	0					
ANR	4667298	Identifier	j		4667013	0					
ANR	4667299	Argument	tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	1					
ANR	4667300	ArrayIndexing	tmpkeys [ 3 + DW_BY_BLOCK * i + DW_BY_USERKEY ]		4667013	0					
ANR	4667301	Identifier	tmpkeys		4667013	0					
ANR	4667302	AdditiveExpression	3 + DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667303	PrimaryExpression	3		4667013	0					
ANR	4667304	AdditiveExpression	DW_BY_BLOCK * i + DW_BY_USERKEY		4667013	1		+			
ANR	4667305	MultiplicativeExpression	DW_BY_BLOCK * i		4667013	0		*			
ANR	4667306	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667307	Identifier	i		4667013	1					
ANR	4667308	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667309	PrimaryExpression	3		4667013	1					
ANR	4667310	ExpressionStatement	"out = apply_sbox ( si , in )"	133:3:4473:4498	4667013	1	True				
ANR	4667311	AssignmentExpression	"out = apply_sbox ( si , in )"		4667013	0		=			
ANR	4667312	Identifier	out		4667013	0					
ANR	4667313	CallExpression	"apply_sbox ( si , in )"		4667013	1					
ANR	4667314	Callee	apply_sbox		4667013	0					
ANR	4667315	Identifier	apply_sbox		4667013	0					
ANR	4667316	ArgumentList	si		4667013	1					
ANR	4667317	Argument	si		4667013	0					
ANR	4667318	Identifier	si		4667013	0					
ANR	4667319	Argument	in		4667013	1					
ANR	4667320	Identifier	in		4667013	0					
ANR	4667321	ForStatement	for ( l = 0 ; l < DW_BY_BLOCK ; l ++ )		4667013	2					
ANR	4667322	ForInit	l = 0 ;	134:8:4508:4513	4667013	0	True				
ANR	4667323	AssignmentExpression	l = 0		4667013	0		=			
ANR	4667324	Identifier	l		4667013	0					
ANR	4667325	PrimaryExpression	0		4667013	1					
ANR	4667326	Condition	l < DW_BY_BLOCK	134:15:4515:4529	4667013	1	True				
ANR	4667327	RelationalExpression	l < DW_BY_BLOCK		4667013	0		<			
ANR	4667328	Identifier	l		4667013	0					
ANR	4667329	Identifier	DW_BY_BLOCK		4667013	1					
ANR	4667330	PostIncDecOperationExpression	l ++	134:32:4532:4534	4667013	2	True				
ANR	4667331	Identifier	l		4667013	0					
ANR	4667332	IncDec	++		4667013	1					
ANR	4667333	CompoundStatement		40:37:1099:1099	4667013	3					
ANR	4667334	ExpressionStatement	"subkeys [ l + DW_BY_BLOCK * i ] |= get_bit ( l , ( ut32 ) out ) << j"	135:4:4543:4598	4667013	0	True				
ANR	4667335	AssignmentExpression	"subkeys [ l + DW_BY_BLOCK * i ] |= get_bit ( l , ( ut32 ) out ) << j"		4667013	0		|=			
ANR	4667336	ArrayIndexing	subkeys [ l + DW_BY_BLOCK * i ]		4667013	0					
ANR	4667337	Identifier	subkeys		4667013	0					
ANR	4667338	AdditiveExpression	l + DW_BY_BLOCK * i		4667013	1		+			
ANR	4667339	Identifier	l		4667013	0					
ANR	4667340	MultiplicativeExpression	DW_BY_BLOCK * i		4667013	1		*			
ANR	4667341	Identifier	DW_BY_BLOCK		4667013	0					
ANR	4667342	Identifier	i		4667013	1					
ANR	4667343	ShiftExpression	"get_bit ( l , ( ut32 ) out ) << j"		4667013	1		<<			
ANR	4667344	CallExpression	"get_bit ( l , ( ut32 ) out )"		4667013	0					
ANR	4667345	Callee	get_bit		4667013	0					
ANR	4667346	Identifier	get_bit		4667013	0					
ANR	4667347	ArgumentList	l		4667013	1					
ANR	4667348	Argument	l		4667013	0					
ANR	4667349	Identifier	l		4667013	0					
ANR	4667350	Argument	( ut32 ) out		4667013	1					
ANR	4667351	CastExpression	( ut32 ) out		4667013	0					
ANR	4667352	CastTarget	ut32		4667013	0					
ANR	4667353	Identifier	out		4667013	1					
ANR	4667354	Identifier	j		4667013	1					
ANR	4667355	ForStatement	for ( i = 0 ; i < NB_SUBKEYS ; i ++ )		4667013	10					
ANR	4667356	ForInit	i = 0 ;	141:6:4648:4653	4667013	0	True				
ANR	4667357	AssignmentExpression	i = 0		4667013	0		=			
ANR	4667358	Identifier	i		4667013	0					
ANR	4667359	PrimaryExpression	0		4667013	1					
ANR	4667360	Condition	i < NB_SUBKEYS	141:13:4655:4668	4667013	1	True				
ANR	4667361	RelationalExpression	i < NB_SUBKEYS		4667013	0		<			
ANR	4667362	Identifier	i		4667013	0					
ANR	4667363	Identifier	NB_SUBKEYS		4667013	1					
ANR	4667364	PostIncDecOperationExpression	i ++	141:29:4671:4673	4667013	2	True				
ANR	4667365	Identifier	i		4667013	0					
ANR	4667366	IncDec	++		4667013	1					
ANR	4667367	CompoundStatement		47:34:1238:1238	4667013	3					
ANR	4667368	ExpressionStatement	"apply_IP ( & subkeys [ i * DW_BY_BLOCK ] , & tmpkeys [ DW_BY_USERKEY + i * DW_BY_BLOCK ] )"	142:2:4680:4760	4667013	0	True				
ANR	4667369	CallExpression	"apply_IP ( & subkeys [ i * DW_BY_BLOCK ] , & tmpkeys [ DW_BY_USERKEY + i * DW_BY_BLOCK ] )"		4667013	0					
ANR	4667370	Callee	apply_IP		4667013	0					
ANR	4667371	Identifier	apply_IP		4667013	0					
ANR	4667372	ArgumentList	& subkeys [ i * DW_BY_BLOCK ]		4667013	1					
ANR	4667373	Argument	& subkeys [ i * DW_BY_BLOCK ]		4667013	0					
ANR	4667374	UnaryOperationExpression	& subkeys [ i * DW_BY_BLOCK ]		4667013	0					
ANR	4667375	UnaryOperator	&		4667013	0					
ANR	4667376	ArrayIndexing	subkeys [ i * DW_BY_BLOCK ]		4667013	1					
ANR	4667377	Identifier	subkeys		4667013	0					
ANR	4667378	MultiplicativeExpression	i * DW_BY_BLOCK		4667013	1		*			
ANR	4667379	Identifier	i		4667013	0					
ANR	4667380	Identifier	DW_BY_BLOCK		4667013	1					
ANR	4667381	Argument	& tmpkeys [ DW_BY_USERKEY + i * DW_BY_BLOCK ]		4667013	1					
ANR	4667382	UnaryOperationExpression	& tmpkeys [ DW_BY_USERKEY + i * DW_BY_BLOCK ]		4667013	0					
ANR	4667383	UnaryOperator	&		4667013	0					
ANR	4667384	ArrayIndexing	tmpkeys [ DW_BY_USERKEY + i * DW_BY_BLOCK ]		4667013	1					
ANR	4667385	Identifier	tmpkeys		4667013	0					
ANR	4667386	AdditiveExpression	DW_BY_USERKEY + i * DW_BY_BLOCK		4667013	1		+			
ANR	4667387	Identifier	DW_BY_USERKEY		4667013	0					
ANR	4667388	MultiplicativeExpression	i * DW_BY_BLOCK		4667013	1		*			
ANR	4667389	Identifier	i		4667013	0					
ANR	4667390	Identifier	DW_BY_BLOCK		4667013	1					
ANR	4667391	ExpressionStatement	"memcpy ( subkeys , tmpkeys + DW_BY_USERKEY , 132 * sizeof ( ut32 ) )"	146:1:4767:4826	4667013	11	True				
ANR	4667392	CallExpression	"memcpy ( subkeys , tmpkeys + DW_BY_USERKEY , 132 * sizeof ( ut32 ) )"		4667013	0					
ANR	4667393	Callee	memcpy		4667013	0					
ANR	4667394	Identifier	memcpy		4667013	0					
ANR	4667395	ArgumentList	subkeys		4667013	1					
ANR	4667396	Argument	subkeys		4667013	0					
ANR	4667397	Identifier	subkeys		4667013	0					
ANR	4667398	Argument	tmpkeys + DW_BY_USERKEY		4667013	1					
ANR	4667399	AdditiveExpression	tmpkeys + DW_BY_USERKEY		4667013	0		+			
ANR	4667400	Identifier	tmpkeys		4667013	0					
ANR	4667401	Identifier	DW_BY_USERKEY		4667013	1					
ANR	4667402	Argument	132 * sizeof ( ut32 )		4667013	2					
ANR	4667403	MultiplicativeExpression	132 * sizeof ( ut32 )		4667013	0		*			
ANR	4667404	PrimaryExpression	132		4667013	0					
ANR	4667405	SizeofExpression	sizeof ( ut32 )		4667013	1					
ANR	4667406	Sizeof	sizeof		4667013	0					
ANR	4667407	SizeofOperand	ut32		4667013	1					
ANR	4667408	ReturnType	void		4667013	1					
ANR	4667409	Identifier	serpent_keyschedule		4667013	2					
ANR	4667410	ParameterList	"struct serpent_state st , ut32 subkeys [ NB_SUBKEYS * DW_BY_BLOCK ]"		4667013	3					
ANR	4667411	Parameter	struct serpent_state st	94:25:3372:3394	4667013	0	True				
ANR	4667412	ParameterType	struct serpent_state		4667013	0					
ANR	4667413	Identifier	st		4667013	1					
ANR	4667414	Parameter	ut32 subkeys [ NB_SUBKEYS * DW_BY_BLOCK ]	95:2:3399:3434	4667013	1	True				
ANR	4667415	ParameterType	ut32 [ NB_SUBKEYS * DW_BY_BLOCK ]		4667013	0					
ANR	4667416	Identifier	subkeys		4667013	1					
ANR	4667417	CFGEntryNode	ENTRY		4667013		True				
ANR	4667418	CFGExitNode	EXIT		4667013		True				
ANR	4667419	Symbol	NB_SUBKEYS		4667013						
ANR	4667420	Symbol	st . key		4667013						
ANR	4667421	Symbol	DW_BY_USERKEY		4667013						
ANR	4667422	Symbol	* st		4667013						
ANR	4667423	Symbol	out		4667013						
ANR	4667424	Symbol	si		4667013						
ANR	4667425	Symbol	* tmpkeys		4667013						
ANR	4667426	Symbol	subkeys		4667013						
ANR	4667427	Symbol	st		4667013						
ANR	4667428	Symbol	* st . key		4667013						
ANR	4667429	Symbol	tmpkeys		4667013						
ANR	4667430	Symbol	in		4667013						
ANR	4667431	Symbol	DW_BY_BLOCK		4667013						
ANR	4667432	Symbol	i		4667013						
ANR	4667433	Symbol	j		4667013						
ANR	4667434	Symbol	l		4667013						
ANR	4667435	Symbol	get_bit		4667013						
ANR	4667436	Symbol	phi		4667013						
ANR	4667437	Symbol	* DW_BY_USERKEY		4667013						
ANR	4667438	Symbol	* i		4667013						
ANR	4667439	Symbol	NIBBLES_BY_SUBKEY		4667013						
ANR	4667440	Symbol	* DW_BY_BLOCK		4667013						
ANR	4667441	Symbol	* st . key_size		4667013						
ANR	4667442	Symbol	* subkeys		4667013						
ANR	4667443	Symbol	* l		4667013						
ANR	4667444	Symbol	apply_sbox		4667013						
ANR	4667445	Symbol	st . key_size		4667013						
ANR	4667446	Function	apply_xor	149:0:4831:4972							
ANR	4667447	FunctionDef	"apply_xor (ut32 block [ DW_BY_BLOCK ] , ut32 subkey [ DW_BY_BLOCK ])"		4667446	0					
ANR	4667448	CompoundStatement		149:66:4897:4972	4667446	0					
ANR	4667449	IdentifierDeclStatement	int i ;	150:1:4900:4905	4667446	0	True				
ANR	4667450	IdentifierDecl	i		4667446	0					
ANR	4667451	IdentifierDeclType	int		4667446	0					
ANR	4667452	Identifier	i		4667446	1					
ANR	4667453	ForStatement	for ( i = 0 ; i < DW_BY_BLOCK ; i ++ )		4667446	1					
ANR	4667454	ForInit	i = 0 ;	151:6:4913:4918	4667446	0	True				
ANR	4667455	AssignmentExpression	i = 0		4667446	0		=			
ANR	4667456	Identifier	i		4667446	0					
ANR	4667457	PrimaryExpression	0		4667446	1					
ANR	4667458	Condition	i < DW_BY_BLOCK	151:13:4920:4934	4667446	1	True				
ANR	4667459	RelationalExpression	i < DW_BY_BLOCK		4667446	0		<			
ANR	4667460	Identifier	i		4667446	0					
ANR	4667461	Identifier	DW_BY_BLOCK		4667446	1					
ANR	4667462	PostIncDecOperationExpression	i ++	151:30:4937:4939	4667446	2	True				
ANR	4667463	Identifier	i		4667446	0					
ANR	4667464	IncDec	++		4667446	1					
ANR	4667465	CompoundStatement		3:35:44:44	4667446	3					
ANR	4667466	ExpressionStatement	block [ i ] ^= subkey [ i ]	152:2:4946:4967	4667446	0	True				
ANR	4667467	AssignmentExpression	block [ i ] ^= subkey [ i ]		4667446	0		^=			
ANR	4667468	ArrayIndexing	block [ i ]		4667446	0					
ANR	4667469	Identifier	block		4667446	0					
ANR	4667470	Identifier	i		4667446	1					
ANR	4667471	ArrayIndexing	subkey [ i ]		4667446	1					
ANR	4667472	Identifier	subkey		4667446	0					
ANR	4667473	Identifier	i		4667446	1					
ANR	4667474	ReturnType	void		4667446	1					
ANR	4667475	Identifier	apply_xor		4667446	2					
ANR	4667476	ParameterList	"ut32 block [ DW_BY_BLOCK ] , ut32 subkey [ DW_BY_BLOCK ]"		4667446	3					
ANR	4667477	Parameter	ut32 block [ DW_BY_BLOCK ]	149:15:4846:4868	4667446	0	True				
ANR	4667478	ParameterType	ut32 [ DW_BY_BLOCK ]		4667446	0					
ANR	4667479	Identifier	block		4667446	1					
ANR	4667480	Parameter	ut32 subkey [ DW_BY_BLOCK ]	149:40:4871:4894	4667446	1	True				
ANR	4667481	ParameterType	ut32 [ DW_BY_BLOCK ]		4667446	0					
ANR	4667482	Identifier	subkey		4667446	1					
ANR	4667483	CFGEntryNode	ENTRY		4667446		True				
ANR	4667484	CFGExitNode	EXIT		4667446		True				
ANR	4667485	Symbol	* subkey		4667446						
ANR	4667486	Symbol	subkey		4667446						
ANR	4667487	Symbol	* i		4667446						
ANR	4667488	Symbol	DW_BY_BLOCK		4667446						
ANR	4667489	Symbol	i		4667446						
ANR	4667490	Symbol	block		4667446						
ANR	4667491	Symbol	* block		4667446						
ANR	4667492	Function	apply_permut	156:0:4975:5469							
ANR	4667493	FunctionDef	apply_permut (ut32 block [ DW_BY_BLOCK ])		4667492	0					
ANR	4667494	CompoundStatement		156:43:5018:5469	4667492	0					
ANR	4667495	IdentifierDeclStatement	ut32 tmp_block [ DW_BY_BLOCK ] = { 0 } ;	157:1:5021:5054	4667492	0	True				
ANR	4667496	IdentifierDecl	tmp_block [ DW_BY_BLOCK ] = { 0 }		4667492	0					
ANR	4667497	IdentifierDeclType	ut32 [ DW_BY_BLOCK ]		4667492	0					
ANR	4667498	Identifier	tmp_block		4667492	1					
ANR	4667499	Identifier	DW_BY_BLOCK		4667492	2					
ANR	4667500	AssignmentExpression	tmp_block [ DW_BY_BLOCK ] = { 0 }		4667492	3		=			
ANR	4667501	Identifier	DW_BY_BLOCK		4667492	0					
ANR	4667502	InitializerList	0		4667492	1					
ANR	4667503	PrimaryExpression	0		4667492	0					
ANR	4667504	ExpressionStatement	"apply_FP ( block , tmp_block )"	158:1:5057:5084	4667492	1	True				
ANR	4667505	CallExpression	"apply_FP ( block , tmp_block )"		4667492	0					
ANR	4667506	Callee	apply_FP		4667492	0					
ANR	4667507	Identifier	apply_FP		4667492	0					
ANR	4667508	ArgumentList	block		4667492	1					
ANR	4667509	Argument	block		4667492	0					
ANR	4667510	Identifier	block		4667492	0					
ANR	4667511	Argument	tmp_block		4667492	1					
ANR	4667512	Identifier	tmp_block		4667492	0					
ANR	4667513	ExpressionStatement	"rotl ( tmp_block + 0 , 13 )"	159:1:5087:5111	4667492	2	True				
ANR	4667514	CallExpression	"rotl ( tmp_block + 0 , 13 )"		4667492	0					
ANR	4667515	Callee	rotl		4667492	0					
ANR	4667516	Identifier	rotl		4667492	0					
ANR	4667517	ArgumentList	tmp_block + 0		4667492	1					
ANR	4667518	Argument	tmp_block + 0		4667492	0					
ANR	4667519	AdditiveExpression	tmp_block + 0		4667492	0		+			
ANR	4667520	Identifier	tmp_block		4667492	0					
ANR	4667521	PrimaryExpression	0		4667492	1					
ANR	4667522	Argument	13		4667492	1					
ANR	4667523	PrimaryExpression	13		4667492	0					
ANR	4667524	ExpressionStatement	"rotl ( tmp_block + 2 , 3 )"	160:1:5114:5137	4667492	3	True				
ANR	4667525	CallExpression	"rotl ( tmp_block + 2 , 3 )"		4667492	0					
ANR	4667526	Callee	rotl		4667492	0					
ANR	4667527	Identifier	rotl		4667492	0					
ANR	4667528	ArgumentList	tmp_block + 2		4667492	1					
ANR	4667529	Argument	tmp_block + 2		4667492	0					
ANR	4667530	AdditiveExpression	tmp_block + 2		4667492	0		+			
ANR	4667531	Identifier	tmp_block		4667492	0					
ANR	4667532	PrimaryExpression	2		4667492	1					
ANR	4667533	Argument	3		4667492	1					
ANR	4667534	PrimaryExpression	3		4667492	0					
ANR	4667535	ExpressionStatement	tmp_block [ 1 ] ^= tmp_block [ 0 ] ^ tmp_block [ 2 ]	161:1:5141:5184	4667492	4	True				
ANR	4667536	AssignmentExpression	tmp_block [ 1 ] ^= tmp_block [ 0 ] ^ tmp_block [ 2 ]		4667492	0		^=			
ANR	4667537	ArrayIndexing	tmp_block [ 1 ]		4667492	0					
ANR	4667538	Identifier	tmp_block		4667492	0					
ANR	4667539	PrimaryExpression	1		4667492	1					
ANR	4667540	ExclusiveOrExpression	tmp_block [ 0 ] ^ tmp_block [ 2 ]		4667492	1		^			
ANR	4667541	ArrayIndexing	tmp_block [ 0 ]		4667492	0					
ANR	4667542	Identifier	tmp_block		4667492	0					
ANR	4667543	PrimaryExpression	0		4667492	1					
ANR	4667544	ArrayIndexing	tmp_block [ 2 ]		4667492	1					
ANR	4667545	Identifier	tmp_block		4667492	0					
ANR	4667546	PrimaryExpression	2		4667492	1					
ANR	4667547	ExpressionStatement	tmp_block [ 3 ] ^= tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )	162:1:5187:5235	4667492	5	True				
ANR	4667548	AssignmentExpression	tmp_block [ 3 ] ^= tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )		4667492	0		^=			
ANR	4667549	ArrayIndexing	tmp_block [ 3 ]		4667492	0					
ANR	4667550	Identifier	tmp_block		4667492	0					
ANR	4667551	PrimaryExpression	3		4667492	1					
ANR	4667552	ExclusiveOrExpression	tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )		4667492	1		^			
ANR	4667553	ArrayIndexing	tmp_block [ 2 ]		4667492	0					
ANR	4667554	Identifier	tmp_block		4667492	0					
ANR	4667555	PrimaryExpression	2		4667492	1					
ANR	4667556	ShiftExpression	tmp_block [ 0 ] << 3		4667492	1		<<			
ANR	4667557	ArrayIndexing	tmp_block [ 0 ]		4667492	0					
ANR	4667558	Identifier	tmp_block		4667492	0					
ANR	4667559	PrimaryExpression	0		4667492	1					
ANR	4667560	PrimaryExpression	3		4667492	1					
ANR	4667561	ExpressionStatement	"rotl ( tmp_block + 1 , 1 )"	163:1:5238:5261	4667492	6	True				
ANR	4667562	CallExpression	"rotl ( tmp_block + 1 , 1 )"		4667492	0					
ANR	4667563	Callee	rotl		4667492	0					
ANR	4667564	Identifier	rotl		4667492	0					
ANR	4667565	ArgumentList	tmp_block + 1		4667492	1					
ANR	4667566	Argument	tmp_block + 1		4667492	0					
ANR	4667567	AdditiveExpression	tmp_block + 1		4667492	0		+			
ANR	4667568	Identifier	tmp_block		4667492	0					
ANR	4667569	PrimaryExpression	1		4667492	1					
ANR	4667570	Argument	1		4667492	1					
ANR	4667571	PrimaryExpression	1		4667492	0					
ANR	4667572	ExpressionStatement	"rotl ( tmp_block + 3 , 7 )"	164:1:5264:5287	4667492	7	True				
ANR	4667573	CallExpression	"rotl ( tmp_block + 3 , 7 )"		4667492	0					
ANR	4667574	Callee	rotl		4667492	0					
ANR	4667575	Identifier	rotl		4667492	0					
ANR	4667576	ArgumentList	tmp_block + 3		4667492	1					
ANR	4667577	Argument	tmp_block + 3		4667492	0					
ANR	4667578	AdditiveExpression	tmp_block + 3		4667492	0		+			
ANR	4667579	Identifier	tmp_block		4667492	0					
ANR	4667580	PrimaryExpression	3		4667492	1					
ANR	4667581	Argument	7		4667492	1					
ANR	4667582	PrimaryExpression	7		4667492	0					
ANR	4667583	ExpressionStatement	tmp_block [ 0 ] ^= tmp_block [ 1 ] ^ tmp_block [ 3 ]	165:1:5290:5333	4667492	8	True				
ANR	4667584	AssignmentExpression	tmp_block [ 0 ] ^= tmp_block [ 1 ] ^ tmp_block [ 3 ]		4667492	0		^=			
ANR	4667585	ArrayIndexing	tmp_block [ 0 ]		4667492	0					
ANR	4667586	Identifier	tmp_block		4667492	0					
ANR	4667587	PrimaryExpression	0		4667492	1					
ANR	4667588	ExclusiveOrExpression	tmp_block [ 1 ] ^ tmp_block [ 3 ]		4667492	1		^			
ANR	4667589	ArrayIndexing	tmp_block [ 1 ]		4667492	0					
ANR	4667590	Identifier	tmp_block		4667492	0					
ANR	4667591	PrimaryExpression	1		4667492	1					
ANR	4667592	ArrayIndexing	tmp_block [ 3 ]		4667492	1					
ANR	4667593	Identifier	tmp_block		4667492	0					
ANR	4667594	PrimaryExpression	3		4667492	1					
ANR	4667595	ExpressionStatement	tmp_block [ 2 ] ^= tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )	166:1:5336:5384	4667492	9	True				
ANR	4667596	AssignmentExpression	tmp_block [ 2 ] ^= tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )		4667492	0		^=			
ANR	4667597	ArrayIndexing	tmp_block [ 2 ]		4667492	0					
ANR	4667598	Identifier	tmp_block		4667492	0					
ANR	4667599	PrimaryExpression	2		4667492	1					
ANR	4667600	ExclusiveOrExpression	tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )		4667492	1		^			
ANR	4667601	ArrayIndexing	tmp_block [ 3 ]		4667492	0					
ANR	4667602	Identifier	tmp_block		4667492	0					
ANR	4667603	PrimaryExpression	3		4667492	1					
ANR	4667604	ShiftExpression	tmp_block [ 1 ] << 7		4667492	1		<<			
ANR	4667605	ArrayIndexing	tmp_block [ 1 ]		4667492	0					
ANR	4667606	Identifier	tmp_block		4667492	0					
ANR	4667607	PrimaryExpression	1		4667492	1					
ANR	4667608	PrimaryExpression	7		4667492	1					
ANR	4667609	ExpressionStatement	"rotl ( tmp_block + 0 , 5 )"	167:1:5387:5410	4667492	10	True				
ANR	4667610	CallExpression	"rotl ( tmp_block + 0 , 5 )"		4667492	0					
ANR	4667611	Callee	rotl		4667492	0					
ANR	4667612	Identifier	rotl		4667492	0					
ANR	4667613	ArgumentList	tmp_block + 0		4667492	1					
ANR	4667614	Argument	tmp_block + 0		4667492	0					
ANR	4667615	AdditiveExpression	tmp_block + 0		4667492	0		+			
ANR	4667616	Identifier	tmp_block		4667492	0					
ANR	4667617	PrimaryExpression	0		4667492	1					
ANR	4667618	Argument	5		4667492	1					
ANR	4667619	PrimaryExpression	5		4667492	0					
ANR	4667620	ExpressionStatement	"rotl ( tmp_block + 2 , 22 )"	168:1:5413:5437	4667492	11	True				
ANR	4667621	CallExpression	"rotl ( tmp_block + 2 , 22 )"		4667492	0					
ANR	4667622	Callee	rotl		4667492	0					
ANR	4667623	Identifier	rotl		4667492	0					
ANR	4667624	ArgumentList	tmp_block + 2		4667492	1					
ANR	4667625	Argument	tmp_block + 2		4667492	0					
ANR	4667626	AdditiveExpression	tmp_block + 2		4667492	0		+			
ANR	4667627	Identifier	tmp_block		4667492	0					
ANR	4667628	PrimaryExpression	2		4667492	1					
ANR	4667629	Argument	22		4667492	1					
ANR	4667630	PrimaryExpression	22		4667492	0					
ANR	4667631	ExpressionStatement	"apply_IP ( tmp_block , block )"	169:1:5440:5467	4667492	12	True				
ANR	4667632	CallExpression	"apply_IP ( tmp_block , block )"		4667492	0					
ANR	4667633	Callee	apply_IP		4667492	0					
ANR	4667634	Identifier	apply_IP		4667492	0					
ANR	4667635	ArgumentList	tmp_block		4667492	1					
ANR	4667636	Argument	tmp_block		4667492	0					
ANR	4667637	Identifier	tmp_block		4667492	0					
ANR	4667638	Argument	block		4667492	1					
ANR	4667639	Identifier	block		4667492	0					
ANR	4667640	ReturnType	void		4667492	1					
ANR	4667641	Identifier	apply_permut		4667492	2					
ANR	4667642	ParameterList	ut32 block [ DW_BY_BLOCK ]		4667492	3					
ANR	4667643	Parameter	ut32 block [ DW_BY_BLOCK ]	156:18:4993:5015	4667492	0	True				
ANR	4667644	ParameterType	ut32 [ DW_BY_BLOCK ]		4667492	0					
ANR	4667645	Identifier	block		4667492	1					
ANR	4667646	CFGEntryNode	ENTRY		4667492		True				
ANR	4667647	CFGExitNode	EXIT		4667492		True				
ANR	4667648	Symbol	tmp_block		4667492						
ANR	4667649	Symbol	DW_BY_BLOCK		4667492						
ANR	4667650	Symbol	block		4667492						
ANR	4667651	Symbol	* tmp_block		4667492						
ANR	4667652	Function	apply_permut_inv	172:0:5472:5970							
ANR	4667653	FunctionDef	apply_permut_inv (ut32 block [ DW_BY_BLOCK ])		4667652	0					
ANR	4667654	CompoundStatement		172:47:5519:5970	4667652	0					
ANR	4667655	IdentifierDeclStatement	ut32 tmp_block [ DW_BY_BLOCK ] = { 0 } ;	173:1:5522:5555	4667652	0	True				
ANR	4667656	IdentifierDecl	tmp_block [ DW_BY_BLOCK ] = { 0 }		4667652	0					
ANR	4667657	IdentifierDeclType	ut32 [ DW_BY_BLOCK ]		4667652	0					
ANR	4667658	Identifier	tmp_block		4667652	1					
ANR	4667659	Identifier	DW_BY_BLOCK		4667652	2					
ANR	4667660	AssignmentExpression	tmp_block [ DW_BY_BLOCK ] = { 0 }		4667652	3		=			
ANR	4667661	Identifier	DW_BY_BLOCK		4667652	0					
ANR	4667662	InitializerList	0		4667652	1					
ANR	4667663	PrimaryExpression	0		4667652	0					
ANR	4667664	ExpressionStatement	"apply_FP ( block , tmp_block )"	174:1:5558:5585	4667652	1	True				
ANR	4667665	CallExpression	"apply_FP ( block , tmp_block )"		4667652	0					
ANR	4667666	Callee	apply_FP		4667652	0					
ANR	4667667	Identifier	apply_FP		4667652	0					
ANR	4667668	ArgumentList	block		4667652	1					
ANR	4667669	Argument	block		4667652	0					
ANR	4667670	Identifier	block		4667652	0					
ANR	4667671	Argument	tmp_block		4667652	1					
ANR	4667672	Identifier	tmp_block		4667652	0					
ANR	4667673	ExpressionStatement	"rotr ( tmp_block + 0 , 5 )"	175:1:5588:5611	4667652	2	True				
ANR	4667674	CallExpression	"rotr ( tmp_block + 0 , 5 )"		4667652	0					
ANR	4667675	Callee	rotr		4667652	0					
ANR	4667676	Identifier	rotr		4667652	0					
ANR	4667677	ArgumentList	tmp_block + 0		4667652	1					
ANR	4667678	Argument	tmp_block + 0		4667652	0					
ANR	4667679	AdditiveExpression	tmp_block + 0		4667652	0		+			
ANR	4667680	Identifier	tmp_block		4667652	0					
ANR	4667681	PrimaryExpression	0		4667652	1					
ANR	4667682	Argument	5		4667652	1					
ANR	4667683	PrimaryExpression	5		4667652	0					
ANR	4667684	ExpressionStatement	"rotr ( tmp_block + 2 , 22 )"	176:1:5614:5638	4667652	3	True				
ANR	4667685	CallExpression	"rotr ( tmp_block + 2 , 22 )"		4667652	0					
ANR	4667686	Callee	rotr		4667652	0					
ANR	4667687	Identifier	rotr		4667652	0					
ANR	4667688	ArgumentList	tmp_block + 2		4667652	1					
ANR	4667689	Argument	tmp_block + 2		4667652	0					
ANR	4667690	AdditiveExpression	tmp_block + 2		4667652	0		+			
ANR	4667691	Identifier	tmp_block		4667652	0					
ANR	4667692	PrimaryExpression	2		4667652	1					
ANR	4667693	Argument	22		4667652	1					
ANR	4667694	PrimaryExpression	22		4667652	0					
ANR	4667695	ExpressionStatement	tmp_block [ 2 ] ^= tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )	177:1:5641:5689	4667652	4	True				
ANR	4667696	AssignmentExpression	tmp_block [ 2 ] ^= tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )		4667652	0		^=			
ANR	4667697	ArrayIndexing	tmp_block [ 2 ]		4667652	0					
ANR	4667698	Identifier	tmp_block		4667652	0					
ANR	4667699	PrimaryExpression	2		4667652	1					
ANR	4667700	ExclusiveOrExpression	tmp_block [ 3 ] ^ ( tmp_block [ 1 ] << 7 )		4667652	1		^			
ANR	4667701	ArrayIndexing	tmp_block [ 3 ]		4667652	0					
ANR	4667702	Identifier	tmp_block		4667652	0					
ANR	4667703	PrimaryExpression	3		4667652	1					
ANR	4667704	ShiftExpression	tmp_block [ 1 ] << 7		4667652	1		<<			
ANR	4667705	ArrayIndexing	tmp_block [ 1 ]		4667652	0					
ANR	4667706	Identifier	tmp_block		4667652	0					
ANR	4667707	PrimaryExpression	1		4667652	1					
ANR	4667708	PrimaryExpression	7		4667652	1					
ANR	4667709	ExpressionStatement	tmp_block [ 0 ] ^= tmp_block [ 1 ] ^ tmp_block [ 3 ]	178:1:5692:5735	4667652	5	True				
ANR	4667710	AssignmentExpression	tmp_block [ 0 ] ^= tmp_block [ 1 ] ^ tmp_block [ 3 ]		4667652	0		^=			
ANR	4667711	ArrayIndexing	tmp_block [ 0 ]		4667652	0					
ANR	4667712	Identifier	tmp_block		4667652	0					
ANR	4667713	PrimaryExpression	0		4667652	1					
ANR	4667714	ExclusiveOrExpression	tmp_block [ 1 ] ^ tmp_block [ 3 ]		4667652	1		^			
ANR	4667715	ArrayIndexing	tmp_block [ 1 ]		4667652	0					
ANR	4667716	Identifier	tmp_block		4667652	0					
ANR	4667717	PrimaryExpression	1		4667652	1					
ANR	4667718	ArrayIndexing	tmp_block [ 3 ]		4667652	1					
ANR	4667719	Identifier	tmp_block		4667652	0					
ANR	4667720	PrimaryExpression	3		4667652	1					
ANR	4667721	ExpressionStatement	"rotr ( tmp_block + 3 , 7 )"	179:1:5738:5761	4667652	6	True				
ANR	4667722	CallExpression	"rotr ( tmp_block + 3 , 7 )"		4667652	0					
ANR	4667723	Callee	rotr		4667652	0					
ANR	4667724	Identifier	rotr		4667652	0					
ANR	4667725	ArgumentList	tmp_block + 3		4667652	1					
ANR	4667726	Argument	tmp_block + 3		4667652	0					
ANR	4667727	AdditiveExpression	tmp_block + 3		4667652	0		+			
ANR	4667728	Identifier	tmp_block		4667652	0					
ANR	4667729	PrimaryExpression	3		4667652	1					
ANR	4667730	Argument	7		4667652	1					
ANR	4667731	PrimaryExpression	7		4667652	0					
ANR	4667732	ExpressionStatement	"rotr ( tmp_block + 1 , 1 )"	180:1:5764:5787	4667652	7	True				
ANR	4667733	CallExpression	"rotr ( tmp_block + 1 , 1 )"		4667652	0					
ANR	4667734	Callee	rotr		4667652	0					
ANR	4667735	Identifier	rotr		4667652	0					
ANR	4667736	ArgumentList	tmp_block + 1		4667652	1					
ANR	4667737	Argument	tmp_block + 1		4667652	0					
ANR	4667738	AdditiveExpression	tmp_block + 1		4667652	0		+			
ANR	4667739	Identifier	tmp_block		4667652	0					
ANR	4667740	PrimaryExpression	1		4667652	1					
ANR	4667741	Argument	1		4667652	1					
ANR	4667742	PrimaryExpression	1		4667652	0					
ANR	4667743	ExpressionStatement	tmp_block [ 3 ] ^= tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )	181:1:5790:5838	4667652	8	True				
ANR	4667744	AssignmentExpression	tmp_block [ 3 ] ^= tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )		4667652	0		^=			
ANR	4667745	ArrayIndexing	tmp_block [ 3 ]		4667652	0					
ANR	4667746	Identifier	tmp_block		4667652	0					
ANR	4667747	PrimaryExpression	3		4667652	1					
ANR	4667748	ExclusiveOrExpression	tmp_block [ 2 ] ^ ( tmp_block [ 0 ] << 3 )		4667652	1		^			
ANR	4667749	ArrayIndexing	tmp_block [ 2 ]		4667652	0					
ANR	4667750	Identifier	tmp_block		4667652	0					
ANR	4667751	PrimaryExpression	2		4667652	1					
ANR	4667752	ShiftExpression	tmp_block [ 0 ] << 3		4667652	1		<<			
ANR	4667753	ArrayIndexing	tmp_block [ 0 ]		4667652	0					
ANR	4667754	Identifier	tmp_block		4667652	0					
ANR	4667755	PrimaryExpression	0		4667652	1					
ANR	4667756	PrimaryExpression	3		4667652	1					
ANR	4667757	ExpressionStatement	tmp_block [ 1 ] ^= tmp_block [ 0 ] ^ tmp_block [ 2 ]	182:1:5841:5884	4667652	9	True				
ANR	4667758	AssignmentExpression	tmp_block [ 1 ] ^= tmp_block [ 0 ] ^ tmp_block [ 2 ]		4667652	0		^=			
ANR	4667759	ArrayIndexing	tmp_block [ 1 ]		4667652	0					
ANR	4667760	Identifier	tmp_block		4667652	0					
ANR	4667761	PrimaryExpression	1		4667652	1					
ANR	4667762	ExclusiveOrExpression	tmp_block [ 0 ] ^ tmp_block [ 2 ]		4667652	1		^			
ANR	4667763	ArrayIndexing	tmp_block [ 0 ]		4667652	0					
ANR	4667764	Identifier	tmp_block		4667652	0					
ANR	4667765	PrimaryExpression	0		4667652	1					
ANR	4667766	ArrayIndexing	tmp_block [ 2 ]		4667652	1					
ANR	4667767	Identifier	tmp_block		4667652	0					
ANR	4667768	PrimaryExpression	2		4667652	1					
ANR	4667769	ExpressionStatement	"rotr ( tmp_block + 2 , 3 )"	183:1:5887:5910	4667652	10	True				
ANR	4667770	CallExpression	"rotr ( tmp_block + 2 , 3 )"		4667652	0					
ANR	4667771	Callee	rotr		4667652	0					
ANR	4667772	Identifier	rotr		4667652	0					
ANR	4667773	ArgumentList	tmp_block + 2		4667652	1					
ANR	4667774	Argument	tmp_block + 2		4667652	0					
ANR	4667775	AdditiveExpression	tmp_block + 2		4667652	0		+			
ANR	4667776	Identifier	tmp_block		4667652	0					
ANR	4667777	PrimaryExpression	2		4667652	1					
ANR	4667778	Argument	3		4667652	1					
ANR	4667779	PrimaryExpression	3		4667652	0					
ANR	4667780	ExpressionStatement	"rotr ( tmp_block + 0 , 13 )"	184:1:5914:5938	4667652	11	True				
ANR	4667781	CallExpression	"rotr ( tmp_block + 0 , 13 )"		4667652	0					
ANR	4667782	Callee	rotr		4667652	0					
ANR	4667783	Identifier	rotr		4667652	0					
ANR	4667784	ArgumentList	tmp_block + 0		4667652	1					
ANR	4667785	Argument	tmp_block + 0		4667652	0					
ANR	4667786	AdditiveExpression	tmp_block + 0		4667652	0		+			
ANR	4667787	Identifier	tmp_block		4667652	0					
ANR	4667788	PrimaryExpression	0		4667652	1					
ANR	4667789	Argument	13		4667652	1					
ANR	4667790	PrimaryExpression	13		4667652	0					
ANR	4667791	ExpressionStatement	"apply_IP ( tmp_block , block )"	185:1:5941:5968	4667652	12	True				
ANR	4667792	CallExpression	"apply_IP ( tmp_block , block )"		4667652	0					
ANR	4667793	Callee	apply_IP		4667652	0					
ANR	4667794	Identifier	apply_IP		4667652	0					
ANR	4667795	ArgumentList	tmp_block		4667652	1					
ANR	4667796	Argument	tmp_block		4667652	0					
ANR	4667797	Identifier	tmp_block		4667652	0					
ANR	4667798	Argument	block		4667652	1					
ANR	4667799	Identifier	block		4667652	0					
ANR	4667800	ReturnType	void		4667652	1					
ANR	4667801	Identifier	apply_permut_inv		4667652	2					
ANR	4667802	ParameterList	ut32 block [ DW_BY_BLOCK ]		4667652	3					
ANR	4667803	Parameter	ut32 block [ DW_BY_BLOCK ]	172:22:5494:5516	4667652	0	True				
ANR	4667804	ParameterType	ut32 [ DW_BY_BLOCK ]		4667652	0					
ANR	4667805	Identifier	block		4667652	1					
ANR	4667806	CFGEntryNode	ENTRY		4667652		True				
ANR	4667807	CFGExitNode	EXIT		4667652		True				
ANR	4667808	Symbol	DW_BY_BLOCK		4667652						
ANR	4667809	Symbol	tmp_block		4667652						
ANR	4667810	Symbol	block		4667652						
ANR	4667811	Symbol	* tmp_block		4667652						
ANR	4667812	Function	apply_round	188:0:5973:6405							
ANR	4667813	FunctionDef	"apply_round (int round , ut32 block [ DW_BY_BLOCK ] , ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ])"		4667812	0					
ANR	4667814	CompoundStatement		189:40:6067:6405	4667812	0					
ANR	4667815	IdentifierDeclStatement	"int i , j ;"	190:1:6070:6078	4667812	0	True				
ANR	4667816	IdentifierDecl	i		4667812	0					
ANR	4667817	IdentifierDeclType	int		4667812	0					
ANR	4667818	Identifier	i		4667812	1					
ANR	4667819	IdentifierDecl	j		4667812	1					
ANR	4667820	IdentifierDeclType	int		4667812	0					
ANR	4667821	Identifier	j		4667812	1					
ANR	4667822	ExpressionStatement	"apply_xor ( block , subkeys + 4 * round )"	192:1:6082:6118	4667812	1	True				
ANR	4667823	CallExpression	"apply_xor ( block , subkeys + 4 * round )"		4667812	0					
ANR	4667824	Callee	apply_xor		4667812	0					
ANR	4667825	Identifier	apply_xor		4667812	0					
ANR	4667826	ArgumentList	block		4667812	1					
ANR	4667827	Argument	block		4667812	0					
ANR	4667828	Identifier	block		4667812	0					
ANR	4667829	Argument	subkeys + 4 * round		4667812	1					
ANR	4667830	AdditiveExpression	subkeys + 4 * round		4667812	0		+			
ANR	4667831	Identifier	subkeys		4667812	0					
ANR	4667832	MultiplicativeExpression	4 * round		4667812	1		*			
ANR	4667833	PrimaryExpression	4		4667812	0					
ANR	4667834	Identifier	round		4667812	1					
ANR	4667835	ForStatement	for ( i = 0 ; i < DW_BY_BLOCK ; i ++ )		4667812	2					
ANR	4667836	ForInit	i = 0 ;	194:6:6127:6132	4667812	0	True				
ANR	4667837	AssignmentExpression	i = 0		4667812	0		=			
ANR	4667838	Identifier	i		4667812	0					
ANR	4667839	PrimaryExpression	0		4667812	1					
ANR	4667840	Condition	i < DW_BY_BLOCK	194:13:6134:6148	4667812	1	True				
ANR	4667841	RelationalExpression	i < DW_BY_BLOCK		4667812	0		<			
ANR	4667842	Identifier	i		4667812	0					
ANR	4667843	Identifier	DW_BY_BLOCK		4667812	1					
ANR	4667844	PostIncDecOperationExpression	i ++	194:30:6151:6153	4667812	2	True				
ANR	4667845	Identifier	i		4667812	0					
ANR	4667846	IncDec	++		4667812	1					
ANR	4667847	CompoundStatement		7:2:92:104	4667812	3					
ANR	4667848	IdentifierDeclStatement	ut32 res = 0 ;	195:2:6160:6172	4667812	0	True				
ANR	4667849	IdentifierDecl	res = 0		4667812	0					
ANR	4667850	IdentifierDeclType	ut32		4667812	0					
ANR	4667851	Identifier	res		4667812	1					
ANR	4667852	AssignmentExpression	res = 0		4667812	2		=			
ANR	4667853	Identifier	res		4667812	0					
ANR	4667854	PrimaryExpression	0		4667812	1					
ANR	4667855	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		4667812	1					
ANR	4667856	ForInit	j = 0 ;	196:7:6182:6187	4667812	0	True				
ANR	4667857	AssignmentExpression	j = 0		4667812	0		=			
ANR	4667858	Identifier	j		4667812	0					
ANR	4667859	PrimaryExpression	0		4667812	1					
ANR	4667860	Condition	j < 8	196:14:6189:6193	4667812	1	True				
ANR	4667861	RelationalExpression	j < 8		4667812	0		<			
ANR	4667862	Identifier	j		4667812	0					
ANR	4667863	PrimaryExpression	8		4667812	1					
ANR	4667864	PostIncDecOperationExpression	j ++	196:21:6196:6198	4667812	2	True				
ANR	4667865	Identifier	j		4667812	0					
ANR	4667866	IncDec	++		4667812	1					
ANR	4667867	CompoundStatement		8:26:133:133	4667812	3					
ANR	4667868	ExpressionStatement	"res |= apply_sbox ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"	197:3:6206:6265	4667812	0	True				
ANR	4667869	AssignmentExpression	"res |= apply_sbox ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"		4667812	0		|=			
ANR	4667870	Identifier	res		4667812	0					
ANR	4667871	ShiftExpression	"apply_sbox ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"		4667812	1		<<			
ANR	4667872	CallExpression	"apply_sbox ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf )"		4667812	0					
ANR	4667873	Callee	apply_sbox		4667812	0					
ANR	4667874	Identifier	apply_sbox		4667812	0					
ANR	4667875	ArgumentList	round % 8		4667812	1					
ANR	4667876	Argument	round % 8		4667812	0					
ANR	4667877	MultiplicativeExpression	round % 8		4667812	0		%			
ANR	4667878	Identifier	round		4667812	0					
ANR	4667879	PrimaryExpression	8		4667812	1					
ANR	4667880	Argument	( block [ i ] >> 4 * j ) & 0xf		4667812	1					
ANR	4667881	BitAndExpression	( block [ i ] >> 4 * j ) & 0xf		4667812	0		&			
ANR	4667882	ShiftExpression	block [ i ] >> 4 * j		4667812	0		>>			
ANR	4667883	ArrayIndexing	block [ i ]		4667812	0					
ANR	4667884	Identifier	block		4667812	0					
ANR	4667885	Identifier	i		4667812	1					
ANR	4667886	MultiplicativeExpression	4 * j		4667812	1		*			
ANR	4667887	PrimaryExpression	4		4667812	0					
ANR	4667888	Identifier	j		4667812	1					
ANR	4667889	PrimaryExpression	0xf		4667812	1					
ANR	4667890	MultiplicativeExpression	4 * j		4667812	1		*			
ANR	4667891	PrimaryExpression	4		4667812	0					
ANR	4667892	Identifier	j		4667812	1					
ANR	4667893	ExpressionStatement	block [ i ] = res	199:2:6273:6287	4667812	2	True				
ANR	4667894	AssignmentExpression	block [ i ] = res		4667812	0		=			
ANR	4667895	ArrayIndexing	block [ i ]		4667812	0					
ANR	4667896	Identifier	block		4667812	0					
ANR	4667897	Identifier	i		4667812	1					
ANR	4667898	Identifier	res		4667812	1					
ANR	4667899	IfStatement	if ( round == NB_ROUNDS - 1 )		4667812	3					
ANR	4667900	Condition	round == NB_ROUNDS - 1	202:5:6298:6319	4667812	0	True				
ANR	4667901	EqualityExpression	round == NB_ROUNDS - 1		4667812	0		==			
ANR	4667902	Identifier	round		4667812	0					
ANR	4667903	AdditiveExpression	NB_ROUNDS - 1		4667812	1		-			
ANR	4667904	Identifier	NB_ROUNDS		4667812	0					
ANR	4667905	PrimaryExpression	1		4667812	1					
ANR	4667906	CompoundStatement		14:29:254:254	4667812	1					
ANR	4667907	ExpressionStatement	"apply_xor ( block , subkeys + 4 * ( round + 1 ) )"	203:2:6326:6366	4667812	0	True				
ANR	4667908	CallExpression	"apply_xor ( block , subkeys + 4 * ( round + 1 ) )"		4667812	0					
ANR	4667909	Callee	apply_xor		4667812	0					
ANR	4667910	Identifier	apply_xor		4667812	0					
ANR	4667911	ArgumentList	block		4667812	1					
ANR	4667912	Argument	block		4667812	0					
ANR	4667913	Identifier	block		4667812	0					
ANR	4667914	Argument	subkeys + 4 * ( round + 1 )		4667812	1					
ANR	4667915	AdditiveExpression	subkeys + 4 * ( round + 1 )		4667812	0		+			
ANR	4667916	Identifier	subkeys		4667812	0					
ANR	4667917	MultiplicativeExpression	4 * ( round + 1 )		4667812	1		*			
ANR	4667918	PrimaryExpression	4		4667812	0					
ANR	4667919	AdditiveExpression	round + 1		4667812	1		+			
ANR	4667920	Identifier	round		4667812	0					
ANR	4667921	PrimaryExpression	1		4667812	1					
ANR	4667922	ElseStatement	else		4667812	0					
ANR	4667923	CompoundStatement		16:8:308:308	4667812	0					
ANR	4667924	ExpressionStatement	apply_permut ( block )	205:2:6380:6400	4667812	0	True				
ANR	4667925	CallExpression	apply_permut ( block )		4667812	0					
ANR	4667926	Callee	apply_permut		4667812	0					
ANR	4667927	Identifier	apply_permut		4667812	0					
ANR	4667928	ArgumentList	block		4667812	1					
ANR	4667929	Argument	block		4667812	0					
ANR	4667930	Identifier	block		4667812	0					
ANR	4667931	ReturnType	void		4667812	1					
ANR	4667932	Identifier	apply_round		4667812	2					
ANR	4667933	ParameterList	"int round , ut32 block [ DW_BY_BLOCK ] , ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ]"		4667812	3					
ANR	4667934	Parameter	int round	188:17:5990:5998	4667812	0	True				
ANR	4667935	ParameterType	int		4667812	0					
ANR	4667936	Identifier	round		4667812	1					
ANR	4667937	Parameter	ut32 block [ DW_BY_BLOCK ]	188:28:6001:6023	4667812	1	True				
ANR	4667938	ParameterType	ut32 [ DW_BY_BLOCK ]		4667812	0					
ANR	4667939	Identifier	block		4667812	1					
ANR	4667940	Parameter	ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ]	189:2:6029:6064	4667812	2	True				
ANR	4667941	ParameterType	ut32 [ DW_BY_BLOCK * NB_SUBKEYS ]		4667812	0					
ANR	4667942	Identifier	subkeys		4667812	1					
ANR	4667943	CFGEntryNode	ENTRY		4667812		True				
ANR	4667944	CFGExitNode	EXIT		4667812		True				
ANR	4667945	Symbol	res		4667812						
ANR	4667946	Symbol	* i		4667812						
ANR	4667947	Symbol	round		4667812						
ANR	4667948	Symbol	DW_BY_BLOCK		4667812						
ANR	4667949	Symbol	NB_ROUNDS		4667812						
ANR	4667950	Symbol	i		4667812						
ANR	4667951	Symbol	block		4667812						
ANR	4667952	Symbol	j		4667812						
ANR	4667953	Symbol	apply_sbox		4667812						
ANR	4667954	Symbol	subkeys		4667812						
ANR	4667955	Symbol	* block		4667812						
ANR	4667956	Function	apply_round_inv	209:0:6408:6858							
ANR	4667957	FunctionDef	"apply_round_inv (int round , ut32 block [ DW_BY_BLOCK ] , ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ])"		4667956	0					
ANR	4667958	CompoundStatement		210:40:6506:6858	4667956	0					
ANR	4667959	IfStatement	if ( round == NB_ROUNDS - 1 )		4667956	0					
ANR	4667960	Condition	round == NB_ROUNDS - 1	211:5:6513:6534	4667956	0	True				
ANR	4667961	EqualityExpression	round == NB_ROUNDS - 1		4667956	0		==			
ANR	4667962	Identifier	round		4667956	0					
ANR	4667963	AdditiveExpression	NB_ROUNDS - 1		4667956	1		-			
ANR	4667964	Identifier	NB_ROUNDS		4667956	0					
ANR	4667965	PrimaryExpression	1		4667956	1					
ANR	4667966	CompoundStatement		2:29:30:30	4667956	1					
ANR	4667967	ExpressionStatement	"apply_xor ( block , subkeys + 4 * ( round + 1 ) )"	212:2:6541:6581	4667956	0	True				
ANR	4667968	CallExpression	"apply_xor ( block , subkeys + 4 * ( round + 1 ) )"		4667956	0					
ANR	4667969	Callee	apply_xor		4667956	0					
ANR	4667970	Identifier	apply_xor		4667956	0					
ANR	4667971	ArgumentList	block		4667956	1					
ANR	4667972	Argument	block		4667956	0					
ANR	4667973	Identifier	block		4667956	0					
ANR	4667974	Argument	subkeys + 4 * ( round + 1 )		4667956	1					
ANR	4667975	AdditiveExpression	subkeys + 4 * ( round + 1 )		4667956	0		+			
ANR	4667976	Identifier	subkeys		4667956	0					
ANR	4667977	MultiplicativeExpression	4 * ( round + 1 )		4667956	1		*			
ANR	4667978	PrimaryExpression	4		4667956	0					
ANR	4667979	AdditiveExpression	round + 1		4667956	1		+			
ANR	4667980	Identifier	round		4667956	0					
ANR	4667981	PrimaryExpression	1		4667956	1					
ANR	4667982	ElseStatement	else		4667956	0					
ANR	4667983	CompoundStatement		4:8:84:84	4667956	0					
ANR	4667984	ExpressionStatement	apply_permut_inv ( block )	214:2:6595:6619	4667956	0	True				
ANR	4667985	CallExpression	apply_permut_inv ( block )		4667956	0					
ANR	4667986	Callee	apply_permut_inv		4667956	0					
ANR	4667987	Identifier	apply_permut_inv		4667956	0					
ANR	4667988	ArgumentList	block		4667956	1					
ANR	4667989	Argument	block		4667956	0					
ANR	4667990	Identifier	block		4667956	0					
ANR	4667991	IdentifierDeclStatement	"int i , j ;"	217:1:6626:6634	4667956	1	True				
ANR	4667992	IdentifierDecl	i		4667956	0					
ANR	4667993	IdentifierDeclType	int		4667956	0					
ANR	4667994	Identifier	i		4667956	1					
ANR	4667995	IdentifierDecl	j		4667956	1					
ANR	4667996	IdentifierDeclType	int		4667956	0					
ANR	4667997	Identifier	j		4667956	1					
ANR	4667998	IdentifierDeclStatement	ut32 res ;	218:1:6637:6645	4667956	2	True				
ANR	4667999	IdentifierDecl	res		4667956	0					
ANR	4668000	IdentifierDeclType	ut32		4667956	0					
ANR	4668001	Identifier	res		4667956	1					
ANR	4668002	ForStatement	for ( i = 0 ; i < DW_BY_BLOCK ; i ++ )		4667956	3					
ANR	4668003	ForInit	i = 0 ;	220:6:6654:6659	4667956	0	True				
ANR	4668004	AssignmentExpression	i = 0		4667956	0		=			
ANR	4668005	Identifier	i		4667956	0					
ANR	4668006	PrimaryExpression	0		4667956	1					
ANR	4668007	Condition	i < DW_BY_BLOCK	220:13:6661:6675	4667956	1	True				
ANR	4668008	RelationalExpression	i < DW_BY_BLOCK		4667956	0		<			
ANR	4668009	Identifier	i		4667956	0					
ANR	4668010	Identifier	DW_BY_BLOCK		4667956	1					
ANR	4668011	PostIncDecOperationExpression	i ++	220:30:6678:6680	4667956	2	True				
ANR	4668012	Identifier	i		4667956	0					
ANR	4668013	IncDec	++		4667956	1					
ANR	4668014	CompoundStatement		11:35:176:176	4667956	3					
ANR	4668015	ExpressionStatement	res = 0	221:2:6687:6694	4667956	0	True				
ANR	4668016	AssignmentExpression	res = 0		4667956	0		=			
ANR	4668017	Identifier	res		4667956	0					
ANR	4668018	PrimaryExpression	0		4667956	1					
ANR	4668019	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		4667956	1					
ANR	4668020	ForInit	j = 0 ;	222:7:6704:6709	4667956	0	True				
ANR	4668021	AssignmentExpression	j = 0		4667956	0		=			
ANR	4668022	Identifier	j		4667956	0					
ANR	4668023	PrimaryExpression	0		4667956	1					
ANR	4668024	Condition	j < 8	222:14:6711:6715	4667956	1	True				
ANR	4668025	RelationalExpression	j < 8		4667956	0		<			
ANR	4668026	Identifier	j		4667956	0					
ANR	4668027	PrimaryExpression	8		4667956	1					
ANR	4668028	PostIncDecOperationExpression	j ++	222:21:6718:6720	4667956	2	True				
ANR	4668029	Identifier	j		4667956	0					
ANR	4668030	IncDec	++		4667956	1					
ANR	4668031	CompoundStatement		13:26:216:216	4667956	3					
ANR	4668032	ExpressionStatement	"res |= apply_sbox_inv ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"	223:3:6728:6791	4667956	0	True				
ANR	4668033	AssignmentExpression	"res |= apply_sbox_inv ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"		4667956	0		|=			
ANR	4668034	Identifier	res		4667956	0					
ANR	4668035	ShiftExpression	"apply_sbox_inv ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf ) << 4 * j"		4667956	1		<<			
ANR	4668036	CallExpression	"apply_sbox_inv ( round % 8 , ( block [ i ] >> 4 * j ) & 0xf )"		4667956	0					
ANR	4668037	Callee	apply_sbox_inv		4667956	0					
ANR	4668038	Identifier	apply_sbox_inv		4667956	0					
ANR	4668039	ArgumentList	round % 8		4667956	1					
ANR	4668040	Argument	round % 8		4667956	0					
ANR	4668041	MultiplicativeExpression	round % 8		4667956	0		%			
ANR	4668042	Identifier	round		4667956	0					
ANR	4668043	PrimaryExpression	8		4667956	1					
ANR	4668044	Argument	( block [ i ] >> 4 * j ) & 0xf		4667956	1					
ANR	4668045	BitAndExpression	( block [ i ] >> 4 * j ) & 0xf		4667956	0		&			
ANR	4668046	ShiftExpression	block [ i ] >> 4 * j		4667956	0		>>			
ANR	4668047	ArrayIndexing	block [ i ]		4667956	0					
ANR	4668048	Identifier	block		4667956	0					
ANR	4668049	Identifier	i		4667956	1					
ANR	4668050	MultiplicativeExpression	4 * j		4667956	1		*			
ANR	4668051	PrimaryExpression	4		4667956	0					
ANR	4668052	Identifier	j		4667956	1					
ANR	4668053	PrimaryExpression	0xf		4667956	1					
ANR	4668054	MultiplicativeExpression	4 * j		4667956	1		*			
ANR	4668055	PrimaryExpression	4		4667956	0					
ANR	4668056	Identifier	j		4667956	1					
ANR	4668057	ExpressionStatement	block [ i ] = res	225:2:6799:6813	4667956	2	True				
ANR	4668058	AssignmentExpression	block [ i ] = res		4667956	0		=			
ANR	4668059	ArrayIndexing	block [ i ]		4667956	0					
ANR	4668060	Identifier	block		4667956	0					
ANR	4668061	Identifier	i		4667956	1					
ANR	4668062	Identifier	res		4667956	1					
ANR	4668063	ExpressionStatement	"apply_xor ( block , subkeys + 4 * round )"	228:1:6820:6856	4667956	4	True				
ANR	4668064	CallExpression	"apply_xor ( block , subkeys + 4 * round )"		4667956	0					
ANR	4668065	Callee	apply_xor		4667956	0					
ANR	4668066	Identifier	apply_xor		4667956	0					
ANR	4668067	ArgumentList	block		4667956	1					
ANR	4668068	Argument	block		4667956	0					
ANR	4668069	Identifier	block		4667956	0					
ANR	4668070	Argument	subkeys + 4 * round		4667956	1					
ANR	4668071	AdditiveExpression	subkeys + 4 * round		4667956	0		+			
ANR	4668072	Identifier	subkeys		4667956	0					
ANR	4668073	MultiplicativeExpression	4 * round		4667956	1		*			
ANR	4668074	PrimaryExpression	4		4667956	0					
ANR	4668075	Identifier	round		4667956	1					
ANR	4668076	ReturnType	void		4667956	1					
ANR	4668077	Identifier	apply_round_inv		4667956	2					
ANR	4668078	ParameterList	"int round , ut32 block [ DW_BY_BLOCK ] , ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ]"		4667956	3					
ANR	4668079	Parameter	int round	209:21:6429:6437	4667956	0	True				
ANR	4668080	ParameterType	int		4667956	0					
ANR	4668081	Identifier	round		4667956	1					
ANR	4668082	Parameter	ut32 block [ DW_BY_BLOCK ]	209:32:6440:6462	4667956	1	True				
ANR	4668083	ParameterType	ut32 [ DW_BY_BLOCK ]		4667956	0					
ANR	4668084	Identifier	block		4667956	1					
ANR	4668085	Parameter	ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ]	210:2:6468:6503	4667956	2	True				
ANR	4668086	ParameterType	ut32 [ DW_BY_BLOCK * NB_SUBKEYS ]		4667956	0					
ANR	4668087	Identifier	subkeys		4667956	1					
ANR	4668088	CFGEntryNode	ENTRY		4667956		True				
ANR	4668089	CFGExitNode	EXIT		4667956		True				
ANR	4668090	Symbol	res		4667956						
ANR	4668091	Symbol	* i		4667956						
ANR	4668092	Symbol	round		4667956						
ANR	4668093	Symbol	NB_ROUNDS		4667956						
ANR	4668094	Symbol	DW_BY_BLOCK		4667956						
ANR	4668095	Symbol	i		4667956						
ANR	4668096	Symbol	block		4667956						
ANR	4668097	Symbol	j		4667956						
ANR	4668098	Symbol	apply_sbox_inv		4667956						
ANR	4668099	Symbol	subkeys		4667956						
ANR	4668100	Symbol	* block		4667956						
ANR	4668101	Function	serpent_encrypt	231:0:6861:7217							
ANR	4668102	FunctionDef	"serpent_encrypt (struct serpent_state * st , ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ])"		4668101	0					
ANR	4668103	CompoundStatement		232:25:6956:7217	4668101	0					
ANR	4668104	IdentifierDeclStatement	int i ;	233:1:6959:6964	4668101	0	True				
ANR	4668105	IdentifierDecl	i		4668101	0					
ANR	4668106	IdentifierDeclType	int		4668101	0					
ANR	4668107	Identifier	i		4668101	1					
ANR	4668108	IdentifierDeclStatement	ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 } ;	234:1:6967:7009	4668101	1	True				
ANR	4668109	IdentifierDecl	subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 }		4668101	0					
ANR	4668110	IdentifierDeclType	ut32 [ DW_BY_BLOCK * NB_SUBKEYS ]		4668101	0					
ANR	4668111	Identifier	subkeys		4668101	1					
ANR	4668112	MultiplicativeExpression	DW_BY_BLOCK * NB_SUBKEYS		4668101	2		*			
ANR	4668113	Identifier	DW_BY_BLOCK		4668101	0					
ANR	4668114	Identifier	NB_SUBKEYS		4668101	1					
ANR	4668115	AssignmentExpression	subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 }		4668101	3		=			
ANR	4668116	Identifier	subkeys		4668101	0					
ANR	4668117	InitializerList	0		4668101	1					
ANR	4668118	PrimaryExpression	0		4668101	0					
ANR	4668119	IdentifierDeclStatement	ut32 tmp_block [ DW_BY_BLOCK ] = { 0 } ;	235:1:7012:7045	4668101	2	True				
ANR	4668120	IdentifierDecl	tmp_block [ DW_BY_BLOCK ] = { 0 }		4668101	0					
ANR	4668121	IdentifierDeclType	ut32 [ DW_BY_BLOCK ]		4668101	0					
ANR	4668122	Identifier	tmp_block		4668101	1					
ANR	4668123	Identifier	DW_BY_BLOCK		4668101	2					
ANR	4668124	AssignmentExpression	tmp_block [ DW_BY_BLOCK ] = { 0 }		4668101	3		=			
ANR	4668125	Identifier	DW_BY_BLOCK		4668101	0					
ANR	4668126	InitializerList	0		4668101	1					
ANR	4668127	PrimaryExpression	0		4668101	0					
ANR	4668128	ExpressionStatement	"serpent_keyschedule ( * st , subkeys )"	237:1:7049:7083	4668101	3	True				
ANR	4668129	CallExpression	"serpent_keyschedule ( * st , subkeys )"		4668101	0					
ANR	4668130	Callee	serpent_keyschedule		4668101	0					
ANR	4668131	Identifier	serpent_keyschedule		4668101	0					
ANR	4668132	ArgumentList	* st		4668101	1					
ANR	4668133	Argument	* st		4668101	0					
ANR	4668134	UnaryOperationExpression	* st		4668101	0					
ANR	4668135	UnaryOperator	*		4668101	0					
ANR	4668136	Identifier	st		4668101	1					
ANR	4668137	Argument	subkeys		4668101	1					
ANR	4668138	Identifier	subkeys		4668101	0					
ANR	4668139	ExpressionStatement	"apply_IP ( in , tmp_block )"	239:1:7087:7111	4668101	4	True				
ANR	4668140	CallExpression	"apply_IP ( in , tmp_block )"		4668101	0					
ANR	4668141	Callee	apply_IP		4668101	0					
ANR	4668142	Identifier	apply_IP		4668101	0					
ANR	4668143	ArgumentList	in		4668101	1					
ANR	4668144	Argument	in		4668101	0					
ANR	4668145	Identifier	in		4668101	0					
ANR	4668146	Argument	tmp_block		4668101	1					
ANR	4668147	Identifier	tmp_block		4668101	0					
ANR	4668148	ForStatement	for ( i = 0 ; i < NB_ROUNDS ; i ++ )		4668101	5					
ANR	4668149	ForInit	i = 0 ;	240:6:7119:7124	4668101	0	True				
ANR	4668150	AssignmentExpression	i = 0		4668101	0		=			
ANR	4668151	Identifier	i		4668101	0					
ANR	4668152	PrimaryExpression	0		4668101	1					
ANR	4668153	Condition	i < NB_ROUNDS	240:13:7126:7138	4668101	1	True				
ANR	4668154	RelationalExpression	i < NB_ROUNDS		4668101	0		<			
ANR	4668155	Identifier	i		4668101	0					
ANR	4668156	Identifier	NB_ROUNDS		4668101	1					
ANR	4668157	PostIncDecOperationExpression	i ++	240:28:7141:7143	4668101	2	True				
ANR	4668158	Identifier	i		4668101	0					
ANR	4668159	IncDec	++		4668101	1					
ANR	4668160	CompoundStatement		9:33:189:189	4668101	3					
ANR	4668161	ExpressionStatement	"apply_round ( i , tmp_block , subkeys )"	241:2:7150:7184	4668101	0	True				
ANR	4668162	CallExpression	"apply_round ( i , tmp_block , subkeys )"		4668101	0					
ANR	4668163	Callee	apply_round		4668101	0					
ANR	4668164	Identifier	apply_round		4668101	0					
ANR	4668165	ArgumentList	i		4668101	1					
ANR	4668166	Argument	i		4668101	0					
ANR	4668167	Identifier	i		4668101	0					
ANR	4668168	Argument	tmp_block		4668101	1					
ANR	4668169	Identifier	tmp_block		4668101	0					
ANR	4668170	Argument	subkeys		4668101	2					
ANR	4668171	Identifier	subkeys		4668101	0					
ANR	4668172	ExpressionStatement	"apply_FP ( tmp_block , out )"	243:1:7190:7215	4668101	6	True				
ANR	4668173	CallExpression	"apply_FP ( tmp_block , out )"		4668101	0					
ANR	4668174	Callee	apply_FP		4668101	0					
ANR	4668175	Identifier	apply_FP		4668101	0					
ANR	4668176	ArgumentList	tmp_block		4668101	1					
ANR	4668177	Argument	tmp_block		4668101	0					
ANR	4668178	Identifier	tmp_block		4668101	0					
ANR	4668179	Argument	out		4668101	1					
ANR	4668180	Identifier	out		4668101	0					
ANR	4668181	ReturnType	void		4668101	1					
ANR	4668182	Identifier	serpent_encrypt		4668101	2					
ANR	4668183	ParameterList	"struct serpent_state * st , ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ]"		4668101	3					
ANR	4668184	Parameter	struct serpent_state * st	231:21:6882:6905	4668101	0	True				
ANR	4668185	ParameterType	struct serpent_state *		4668101	0					
ANR	4668186	Identifier	st		4668101	1					
ANR	4668187	Parameter	ut32 in [ DW_BY_BLOCK ]	231:47:6908:6927	4668101	1	True				
ANR	4668188	ParameterType	ut32 [ DW_BY_BLOCK ]		4668101	0					
ANR	4668189	Identifier	in		4668101	1					
ANR	4668190	Parameter	ut32 out [ DW_BY_BLOCK ]	232:2:6933:6953	4668101	2	True				
ANR	4668191	ParameterType	ut32 [ DW_BY_BLOCK ]		4668101	0					
ANR	4668192	Identifier	out		4668101	1					
ANR	4668193	CFGEntryNode	ENTRY		4668101		True				
ANR	4668194	CFGExitNode	EXIT		4668101		True				
ANR	4668195	Symbol	st		4668101						
ANR	4668196	Symbol	* st		4668101						
ANR	4668197	Symbol	in		4668101						
ANR	4668198	Symbol	DW_BY_BLOCK		4668101						
ANR	4668199	Symbol	tmp_block		4668101						
ANR	4668200	Symbol	NB_ROUNDS		4668101						
ANR	4668201	Symbol	i		4668101						
ANR	4668202	Symbol	subkeys		4668101						
ANR	4668203	Symbol	out		4668101						
ANR	4668204	Function	serpent_decrypt	248:0:7222:7587							
ANR	4668205	FunctionDef	"serpent_decrypt (struct serpent_state * st , ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ])"		4668204	0					
ANR	4668206	CompoundStatement		249:25:7316:7587	4668204	0					
ANR	4668207	IdentifierDeclStatement	int i ;	250:1:7319:7324	4668204	0	True				
ANR	4668208	IdentifierDecl	i		4668204	0					
ANR	4668209	IdentifierDeclType	int		4668204	0					
ANR	4668210	Identifier	i		4668204	1					
ANR	4668211	IdentifierDeclStatement	ut32 subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 } ;	251:1:7327:7369	4668204	1	True				
ANR	4668212	IdentifierDecl	subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 }		4668204	0					
ANR	4668213	IdentifierDeclType	ut32 [ DW_BY_BLOCK * NB_SUBKEYS ]		4668204	0					
ANR	4668214	Identifier	subkeys		4668204	1					
ANR	4668215	MultiplicativeExpression	DW_BY_BLOCK * NB_SUBKEYS		4668204	2		*			
ANR	4668216	Identifier	DW_BY_BLOCK		4668204	0					
ANR	4668217	Identifier	NB_SUBKEYS		4668204	1					
ANR	4668218	AssignmentExpression	subkeys [ DW_BY_BLOCK * NB_SUBKEYS ] = { 0 }		4668204	3		=			
ANR	4668219	Identifier	subkeys		4668204	0					
ANR	4668220	InitializerList	0		4668204	1					
ANR	4668221	PrimaryExpression	0		4668204	0					
ANR	4668222	IdentifierDeclStatement	ut32 tmp_block [ DW_BY_BLOCK ] = { 0 } ;	252:1:7372:7405	4668204	2	True				
ANR	4668223	IdentifierDecl	tmp_block [ DW_BY_BLOCK ] = { 0 }		4668204	0					
ANR	4668224	IdentifierDeclType	ut32 [ DW_BY_BLOCK ]		4668204	0					
ANR	4668225	Identifier	tmp_block		4668204	1					
ANR	4668226	Identifier	DW_BY_BLOCK		4668204	2					
ANR	4668227	AssignmentExpression	tmp_block [ DW_BY_BLOCK ] = { 0 }		4668204	3		=			
ANR	4668228	Identifier	DW_BY_BLOCK		4668204	0					
ANR	4668229	InitializerList	0		4668204	1					
ANR	4668230	PrimaryExpression	0		4668204	0					
ANR	4668231	ExpressionStatement	"serpent_keyschedule ( * st , subkeys )"	254:1:7409:7443	4668204	3	True				
ANR	4668232	CallExpression	"serpent_keyschedule ( * st , subkeys )"		4668204	0					
ANR	4668233	Callee	serpent_keyschedule		4668204	0					
ANR	4668234	Identifier	serpent_keyschedule		4668204	0					
ANR	4668235	ArgumentList	* st		4668204	1					
ANR	4668236	Argument	* st		4668204	0					
ANR	4668237	UnaryOperationExpression	* st		4668204	0					
ANR	4668238	UnaryOperator	*		4668204	0					
ANR	4668239	Identifier	st		4668204	1					
ANR	4668240	Argument	subkeys		4668204	1					
ANR	4668241	Identifier	subkeys		4668204	0					
ANR	4668242	ExpressionStatement	"apply_IP ( in , tmp_block )"	256:1:7447:7471	4668204	4	True				
ANR	4668243	CallExpression	"apply_IP ( in , tmp_block )"		4668204	0					
ANR	4668244	Callee	apply_IP		4668204	0					
ANR	4668245	Identifier	apply_IP		4668204	0					
ANR	4668246	ArgumentList	in		4668204	1					
ANR	4668247	Argument	in		4668204	0					
ANR	4668248	Identifier	in		4668204	0					
ANR	4668249	Argument	tmp_block		4668204	1					
ANR	4668250	Identifier	tmp_block		4668204	0					
ANR	4668251	ForStatement	for ( i = NB_ROUNDS - 1 ; i >= 0 ; i -- )		4668204	5					
ANR	4668252	ForInit	i = NB_ROUNDS - 1 ;	257:6:7479:7496	4668204	0	True				
ANR	4668253	AssignmentExpression	i = NB_ROUNDS - 1		4668204	0		=			
ANR	4668254	Identifier	i		4668204	0					
ANR	4668255	AdditiveExpression	NB_ROUNDS - 1		4668204	1		-			
ANR	4668256	Identifier	NB_ROUNDS		4668204	0					
ANR	4668257	PrimaryExpression	1		4668204	1					
ANR	4668258	Condition	i >= 0	257:25:7498:7503	4668204	1	True				
ANR	4668259	RelationalExpression	i >= 0		4668204	0		>=			
ANR	4668260	Identifier	i		4668204	0					
ANR	4668261	PrimaryExpression	0		4668204	1					
ANR	4668262	PostIncDecOperationExpression	i --	257:33:7506:7508	4668204	2	True				
ANR	4668263	Identifier	i		4668204	0					
ANR	4668264	IncDec	--		4668204	1					
ANR	4668265	CompoundStatement		9:38:194:194	4668204	3					
ANR	4668266	ExpressionStatement	"apply_round_inv ( i , tmp_block , subkeys )"	258:2:7515:7554	4668204	0	True				
ANR	4668267	CallExpression	"apply_round_inv ( i , tmp_block , subkeys )"		4668204	0					
ANR	4668268	Callee	apply_round_inv		4668204	0					
ANR	4668269	Identifier	apply_round_inv		4668204	0					
ANR	4668270	ArgumentList	i		4668204	1					
ANR	4668271	Argument	i		4668204	0					
ANR	4668272	Identifier	i		4668204	0					
ANR	4668273	Argument	tmp_block		4668204	1					
ANR	4668274	Identifier	tmp_block		4668204	0					
ANR	4668275	Argument	subkeys		4668204	2					
ANR	4668276	Identifier	subkeys		4668204	0					
ANR	4668277	ExpressionStatement	"apply_FP ( tmp_block , out )"	260:1:7560:7585	4668204	6	True				
ANR	4668278	CallExpression	"apply_FP ( tmp_block , out )"		4668204	0					
ANR	4668279	Callee	apply_FP		4668204	0					
ANR	4668280	Identifier	apply_FP		4668204	0					
ANR	4668281	ArgumentList	tmp_block		4668204	1					
ANR	4668282	Argument	tmp_block		4668204	0					
ANR	4668283	Identifier	tmp_block		4668204	0					
ANR	4668284	Argument	out		4668204	1					
ANR	4668285	Identifier	out		4668204	0					
ANR	4668286	ReturnType	void		4668204	1					
ANR	4668287	Identifier	serpent_decrypt		4668204	2					
ANR	4668288	ParameterList	"struct serpent_state * st , ut32 in [ DW_BY_BLOCK ] , ut32 out [ DW_BY_BLOCK ]"		4668204	3					
ANR	4668289	Parameter	struct serpent_state * st	248:21:7243:7266	4668204	0	True				
ANR	4668290	ParameterType	struct serpent_state *		4668204	0					
ANR	4668291	Identifier	st		4668204	1					
ANR	4668292	Parameter	ut32 in [ DW_BY_BLOCK ]	248:47:7269:7288	4668204	1	True				
ANR	4668293	ParameterType	ut32 [ DW_BY_BLOCK ]		4668204	0					
ANR	4668294	Identifier	in		4668204	1					
ANR	4668295	Parameter	ut32 out [ DW_BY_BLOCK ]	249:2:7293:7313	4668204	2	True				
ANR	4668296	ParameterType	ut32 [ DW_BY_BLOCK ]		4668204	0					
ANR	4668297	Identifier	out		4668204	1					
ANR	4668298	CFGEntryNode	ENTRY		4668204		True				
ANR	4668299	CFGExitNode	EXIT		4668204		True				
ANR	4668300	Symbol	st		4668204						
ANR	4668301	Symbol	* st		4668204						
ANR	4668302	Symbol	in		4668204						
ANR	4668303	Symbol	DW_BY_BLOCK		4668204						
ANR	4668304	Symbol	tmp_block		4668204						
ANR	4668305	Symbol	NB_ROUNDS		4668204						
ANR	4668306	Symbol	i		4668204						
ANR	4668307	Symbol	subkeys		4668204						
ANR	4668308	Symbol	out		4668204						
