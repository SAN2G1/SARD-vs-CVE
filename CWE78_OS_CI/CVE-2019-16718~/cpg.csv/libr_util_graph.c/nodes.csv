command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5141983	File	data/converged/CVE-2019-16718~_radare2/libr_util_graph.c								
ANR	5141984	ClassDef	<unnamed>	5:0:84:135							
ANR	5141985	Function	r_graph_node_new	11:0:139:388							
ANR	5141986	FunctionDef	r_graph_node_new (void * data)		5141985	0					
ANR	5141987	CompoundStatement		11:49:188:388	5141985	0					
ANR	5141988	IdentifierDeclStatement	RGraphNode * p = R_NEW0 ( RGraphNode ) ;	12:1:191:226	5141985	0	True				
ANR	5141989	IdentifierDecl	* p = R_NEW0 ( RGraphNode )		5141985	0					
ANR	5141990	IdentifierDeclType	RGraphNode *		5141985	0					
ANR	5141991	Identifier	p		5141985	1					
ANR	5141992	AssignmentExpression	* p = R_NEW0 ( RGraphNode )		5141985	2		=			
ANR	5141993	Identifier	p		5141985	0					
ANR	5141994	CallExpression	R_NEW0 ( RGraphNode )		5141985	1					
ANR	5141995	Callee	R_NEW0		5141985	0					
ANR	5141996	Identifier	R_NEW0		5141985	0					
ANR	5141997	ArgumentList	RGraphNode		5141985	1					
ANR	5141998	Argument	RGraphNode		5141985	0					
ANR	5141999	Identifier	RGraphNode		5141985	0					
ANR	5142000	IfStatement	if ( p )		5141985	1					
ANR	5142001	Condition	p	13:5:233:233	5141985	0	True				
ANR	5142002	Identifier	p		5141985	0					
ANR	5142003	CompoundStatement		3:8:47:47	5141985	1					
ANR	5142004	ExpressionStatement	p -> data = data	14:2:240:254	5141985	0	True				
ANR	5142005	AssignmentExpression	p -> data = data		5141985	0		=			
ANR	5142006	PtrMemberAccess	p -> data		5141985	0					
ANR	5142007	Identifier	p		5141985	0					
ANR	5142008	Identifier	data		5141985	1					
ANR	5142009	Identifier	data		5141985	1					
ANR	5142010	ExpressionStatement	p -> free = NULL	15:2:258:272	5141985	1	True				
ANR	5142011	AssignmentExpression	p -> free = NULL		5141985	0		=			
ANR	5142012	PtrMemberAccess	p -> free		5141985	0					
ANR	5142013	Identifier	p		5141985	0					
ANR	5142014	Identifier	free		5141985	1					
ANR	5142015	Identifier	NULL		5141985	1					
ANR	5142016	ExpressionStatement	p -> out_nodes = r_list_new ( )	16:2:276:304	5141985	2	True				
ANR	5142017	AssignmentExpression	p -> out_nodes = r_list_new ( )		5141985	0		=			
ANR	5142018	PtrMemberAccess	p -> out_nodes		5141985	0					
ANR	5142019	Identifier	p		5141985	0					
ANR	5142020	Identifier	out_nodes		5141985	1					
ANR	5142021	CallExpression	r_list_new ( )		5141985	1					
ANR	5142022	Callee	r_list_new		5141985	0					
ANR	5142023	Identifier	r_list_new		5141985	0					
ANR	5142024	ArgumentList			5141985	1					
ANR	5142025	ExpressionStatement	p -> in_nodes = r_list_new ( )	17:2:308:335	5141985	3	True				
ANR	5142026	AssignmentExpression	p -> in_nodes = r_list_new ( )		5141985	0		=			
ANR	5142027	PtrMemberAccess	p -> in_nodes		5141985	0					
ANR	5142028	Identifier	p		5141985	0					
ANR	5142029	Identifier	in_nodes		5141985	1					
ANR	5142030	CallExpression	r_list_new ( )		5141985	1					
ANR	5142031	Callee	r_list_new		5141985	0					
ANR	5142032	Identifier	r_list_new		5141985	0					
ANR	5142033	ArgumentList			5141985	1					
ANR	5142034	ExpressionStatement	p -> all_neighbours = r_list_new ( )	18:2:339:372	5141985	4	True				
ANR	5142035	AssignmentExpression	p -> all_neighbours = r_list_new ( )		5141985	0		=			
ANR	5142036	PtrMemberAccess	p -> all_neighbours		5141985	0					
ANR	5142037	Identifier	p		5141985	0					
ANR	5142038	Identifier	all_neighbours		5141985	1					
ANR	5142039	CallExpression	r_list_new ( )		5141985	1					
ANR	5142040	Callee	r_list_new		5141985	0					
ANR	5142041	Identifier	r_list_new		5141985	0					
ANR	5142042	ArgumentList			5141985	1					
ANR	5142043	ReturnStatement	return p ;	20:1:378:386	5141985	2	True				
ANR	5142044	Identifier	p		5141985	0					
ANR	5142045	ReturnType	static RGraphNode *		5141985	1					
ANR	5142046	Identifier	r_graph_node_new		5141985	2					
ANR	5142047	ParameterList	void * data		5141985	3					
ANR	5142048	Parameter	void * data	11:37:176:185	5141985	0	True				
ANR	5142049	ParameterType	void *		5141985	0					
ANR	5142050	Identifier	data		5141985	1					
ANR	5142051	CFGEntryNode	ENTRY		5141985		True				
ANR	5142052	CFGExitNode	EXIT		5141985		True				
ANR	5142053	Symbol	p		5141985						
ANR	5142054	Symbol	R_NEW0		5141985						
ANR	5142055	Symbol	p -> all_neighbours		5141985						
ANR	5142056	Symbol	NULL		5141985						
ANR	5142057	Symbol	data		5141985						
ANR	5142058	Symbol	p -> data		5141985						
ANR	5142059	Symbol	p -> free		5141985						
ANR	5142060	Symbol	* p		5141985						
ANR	5142061	Symbol	p -> out_nodes		5141985						
ANR	5142062	Symbol	RGraphNode		5141985						
ANR	5142063	Symbol	r_list_new		5141985						
ANR	5142064	Symbol	p -> in_nodes		5141985						
ANR	5142065	Function	r_graph_node_free	23:0:391:605							
ANR	5142066	FunctionDef	r_graph_node_free (RGraphNode * n)		5142065	0					
ANR	5142067	CompoundStatement		23:46:437:605	5142065	0					
ANR	5142068	IfStatement	if ( ! n )		5142065	0					
ANR	5142069	Condition	! n	24:5:444:445	5142065	0	True				
ANR	5142070	UnaryOperationExpression	! n		5142065	0					
ANR	5142071	UnaryOperator	!		5142065	0					
ANR	5142072	Identifier	n		5142065	1					
ANR	5142073	CompoundStatement		2:9:10:10	5142065	1					
ANR	5142074	ReturnStatement	return ;	25:2:452:458	5142065	0	True				
ANR	5142075	IfStatement	if ( n -> free )		5142065	1					
ANR	5142076	Condition	n -> free	27:5:468:474	5142065	0	True				
ANR	5142077	PtrMemberAccess	n -> free		5142065	0					
ANR	5142078	Identifier	n		5142065	0					
ANR	5142079	Identifier	free		5142065	1					
ANR	5142080	CompoundStatement		5:14:39:39	5142065	1					
ANR	5142081	ExpressionStatement	n -> free ( n -> data )	28:2:481:498	5142065	0	True				
ANR	5142082	CallExpression	n -> free ( n -> data )		5142065	0					
ANR	5142083	Callee	n -> free		5142065	0					
ANR	5142084	PtrMemberAccess	n -> free		5142065	0					
ANR	5142085	Identifier	n		5142065	0					
ANR	5142086	Identifier	free		5142065	1					
ANR	5142087	ArgumentList	n -> data		5142065	1					
ANR	5142088	Argument	n -> data		5142065	0					
ANR	5142089	PtrMemberAccess	n -> data		5142065	0					
ANR	5142090	Identifier	n		5142065	0					
ANR	5142091	Identifier	data		5142065	1					
ANR	5142092	ExpressionStatement	r_list_free ( n -> out_nodes )	30:1:504:530	5142065	2	True				
ANR	5142093	CallExpression	r_list_free ( n -> out_nodes )		5142065	0					
ANR	5142094	Callee	r_list_free		5142065	0					
ANR	5142095	Identifier	r_list_free		5142065	0					
ANR	5142096	ArgumentList	n -> out_nodes		5142065	1					
ANR	5142097	Argument	n -> out_nodes		5142065	0					
ANR	5142098	PtrMemberAccess	n -> out_nodes		5142065	0					
ANR	5142099	Identifier	n		5142065	0					
ANR	5142100	Identifier	out_nodes		5142065	1					
ANR	5142101	ExpressionStatement	r_list_free ( n -> in_nodes )	31:1:533:558	5142065	3	True				
ANR	5142102	CallExpression	r_list_free ( n -> in_nodes )		5142065	0					
ANR	5142103	Callee	r_list_free		5142065	0					
ANR	5142104	Identifier	r_list_free		5142065	0					
ANR	5142105	ArgumentList	n -> in_nodes		5142065	1					
ANR	5142106	Argument	n -> in_nodes		5142065	0					
ANR	5142107	PtrMemberAccess	n -> in_nodes		5142065	0					
ANR	5142108	Identifier	n		5142065	0					
ANR	5142109	Identifier	in_nodes		5142065	1					
ANR	5142110	ExpressionStatement	r_list_free ( n -> all_neighbours )	32:1:561:592	5142065	4	True				
ANR	5142111	CallExpression	r_list_free ( n -> all_neighbours )		5142065	0					
ANR	5142112	Callee	r_list_free		5142065	0					
ANR	5142113	Identifier	r_list_free		5142065	0					
ANR	5142114	ArgumentList	n -> all_neighbours		5142065	1					
ANR	5142115	Argument	n -> all_neighbours		5142065	0					
ANR	5142116	PtrMemberAccess	n -> all_neighbours		5142065	0					
ANR	5142117	Identifier	n		5142065	0					
ANR	5142118	Identifier	all_neighbours		5142065	1					
ANR	5142119	ExpressionStatement	free ( n )	33:1:595:603	5142065	5	True				
ANR	5142120	CallExpression	free ( n )		5142065	0					
ANR	5142121	Callee	free		5142065	0					
ANR	5142122	Identifier	free		5142065	0					
ANR	5142123	ArgumentList	n		5142065	1					
ANR	5142124	Argument	n		5142065	0					
ANR	5142125	Identifier	n		5142065	0					
ANR	5142126	ReturnType	static void		5142065	1					
ANR	5142127	Identifier	r_graph_node_free		5142065	2					
ANR	5142128	ParameterList	RGraphNode * n		5142065	3					
ANR	5142129	Parameter	RGraphNode * n	23:31:422:434	5142065	0	True				
ANR	5142130	ParameterType	RGraphNode *		5142065	0					
ANR	5142131	Identifier	n		5142065	1					
ANR	5142132	CFGEntryNode	ENTRY		5142065		True				
ANR	5142133	CFGExitNode	EXIT		5142065		True				
ANR	5142134	Symbol	n -> data		5142065						
ANR	5142135	Symbol	n -> in_nodes		5142065						
ANR	5142136	Symbol	* n		5142065						
ANR	5142137	Symbol	n -> free		5142065						
ANR	5142138	Symbol	n -> out_nodes		5142065						
ANR	5142139	Symbol	n -> all_neighbours		5142065						
ANR	5142140	Symbol	n		5142065						
ANR	5142141	Function	node_cmp	36:0:608:696							
ANR	5142142	FunctionDef	"node_cmp (unsigned int idx , RGraphNode * b)"		5142141	0					
ANR	5142143	CompoundStatement		36:54:662:696	5142141	0					
ANR	5142144	ReturnStatement	return idx == b -> idx ? 0 : - 1 ;	37:1:665:694	5142141	0	True				
ANR	5142145	ConditionalExpression	idx == b -> idx ? 0 : - 1		5142141	0					
ANR	5142146	Condition	idx == b -> idx		5142141	0					
ANR	5142147	EqualityExpression	idx == b -> idx		5142141	0		==			
ANR	5142148	Identifier	idx		5142141	0					
ANR	5142149	PtrMemberAccess	b -> idx		5142141	1					
ANR	5142150	Identifier	b		5142141	0					
ANR	5142151	Identifier	idx		5142141	1					
ANR	5142152	PrimaryExpression	0		5142141	1					
ANR	5142153	UnaryOperationExpression	- 1		5142141	2					
ANR	5142154	UnaryOperator	-		5142141	0					
ANR	5142155	PrimaryExpression	1		5142141	1					
ANR	5142156	ReturnType	static int		5142141	1					
ANR	5142157	Identifier	node_cmp		5142141	2					
ANR	5142158	ParameterList	"unsigned int idx , RGraphNode * b"		5142141	3					
ANR	5142159	Parameter	unsigned int idx	36:21:629:644	5142141	0	True				
ANR	5142160	ParameterType	unsigned int		5142141	0					
ANR	5142161	Identifier	idx		5142141	1					
ANR	5142162	Parameter	RGraphNode * b	36:39:647:659	5142141	1	True				
ANR	5142163	ParameterType	RGraphNode *		5142141	0					
ANR	5142164	Identifier	b		5142141	1					
ANR	5142165	CFGEntryNode	ENTRY		5142141		True				
ANR	5142166	CFGExitNode	EXIT		5142141		True				
ANR	5142167	Symbol	b		5142141						
ANR	5142168	Symbol	b -> idx		5142141						
ANR	5142169	Symbol	idx		5142141						
ANR	5142170	Symbol	* b		5142141						
ANR	5142171	Function	dfs_node	40:0:699:2235							
ANR	5142172	FunctionDef	"dfs_node (RGraph * g , RGraphNode * n , RGraphVisitor * vis , int color [ ])"		5142171	0					
ANR	5142173	CompoundStatement		40:81:780:2235	5142171	0					
ANR	5142174	IdentifierDeclStatement	RStack * s = r_stack_new ( 2 * g -> n_edges + 1 ) ;	41:1:783:827	5142171	0	True				
ANR	5142175	IdentifierDecl	* s = r_stack_new ( 2 * g -> n_edges + 1 )		5142171	0					
ANR	5142176	IdentifierDeclType	RStack *		5142171	0					
ANR	5142177	Identifier	s		5142171	1					
ANR	5142178	AssignmentExpression	* s = r_stack_new ( 2 * g -> n_edges + 1 )		5142171	2		=			
ANR	5142179	Identifier	s		5142171	0					
ANR	5142180	CallExpression	r_stack_new ( 2 * g -> n_edges + 1 )		5142171	1					
ANR	5142181	Callee	r_stack_new		5142171	0					
ANR	5142182	Identifier	r_stack_new		5142171	0					
ANR	5142183	ArgumentList	2 * g -> n_edges + 1		5142171	1					
ANR	5142184	Argument	2 * g -> n_edges + 1		5142171	0					
ANR	5142185	AdditiveExpression	2 * g -> n_edges + 1		5142171	0		+			
ANR	5142186	MultiplicativeExpression	2 * g -> n_edges		5142171	0		*			
ANR	5142187	PrimaryExpression	2		5142171	0					
ANR	5142188	PtrMemberAccess	g -> n_edges		5142171	1					
ANR	5142189	Identifier	g		5142171	0					
ANR	5142190	Identifier	n_edges		5142171	1					
ANR	5142191	PrimaryExpression	1		5142171	1					
ANR	5142192	IfStatement	if ( ! s )		5142171	1					
ANR	5142193	Condition	! s	42:5:834:835	5142171	0	True				
ANR	5142194	UnaryOperationExpression	! s		5142171	0					
ANR	5142195	UnaryOperator	!		5142171	0					
ANR	5142196	Identifier	s		5142171	1					
ANR	5142197	CompoundStatement		3:9:57:57	5142171	1					
ANR	5142198	ReturnStatement	return ;	43:2:842:848	5142171	0	True				
ANR	5142199	IdentifierDeclStatement	RGraphEdge * edg = R_NEW0 ( RGraphEdge ) ;	45:1:854:891	5142171	2	True				
ANR	5142200	IdentifierDecl	* edg = R_NEW0 ( RGraphEdge )		5142171	0					
ANR	5142201	IdentifierDeclType	RGraphEdge *		5142171	0					
ANR	5142202	Identifier	edg		5142171	1					
ANR	5142203	AssignmentExpression	* edg = R_NEW0 ( RGraphEdge )		5142171	2		=			
ANR	5142204	Identifier	edg		5142171	0					
ANR	5142205	CallExpression	R_NEW0 ( RGraphEdge )		5142171	1					
ANR	5142206	Callee	R_NEW0		5142171	0					
ANR	5142207	Identifier	R_NEW0		5142171	0					
ANR	5142208	ArgumentList	RGraphEdge		5142171	1					
ANR	5142209	Argument	RGraphEdge		5142171	0					
ANR	5142210	Identifier	RGraphEdge		5142171	0					
ANR	5142211	IfStatement	if ( ! edg )		5142171	3					
ANR	5142212	Condition	! edg	46:5:898:901	5142171	0	True				
ANR	5142213	UnaryOperationExpression	! edg		5142171	0					
ANR	5142214	UnaryOperator	!		5142171	0					
ANR	5142215	Identifier	edg		5142171	1					
ANR	5142216	CompoundStatement		7:11:123:123	5142171	1					
ANR	5142217	ExpressionStatement	r_stack_free ( s )	47:2:908:924	5142171	0	True				
ANR	5142218	CallExpression	r_stack_free ( s )		5142171	0					
ANR	5142219	Callee	r_stack_free		5142171	0					
ANR	5142220	Identifier	r_stack_free		5142171	0					
ANR	5142221	ArgumentList	s		5142171	1					
ANR	5142222	Argument	s		5142171	0					
ANR	5142223	Identifier	s		5142171	0					
ANR	5142224	ReturnStatement	return ;	48:2:928:934	5142171	1	True				
ANR	5142225	ExpressionStatement	edg -> from = NULL	50:1:940:956	5142171	4	True				
ANR	5142226	AssignmentExpression	edg -> from = NULL		5142171	0		=			
ANR	5142227	PtrMemberAccess	edg -> from		5142171	0					
ANR	5142228	Identifier	edg		5142171	0					
ANR	5142229	Identifier	from		5142171	1					
ANR	5142230	Identifier	NULL		5142171	1					
ANR	5142231	ExpressionStatement	edg -> to = n	51:1:959:970	5142171	5	True				
ANR	5142232	AssignmentExpression	edg -> to = n		5142171	0		=			
ANR	5142233	PtrMemberAccess	edg -> to		5142171	0					
ANR	5142234	Identifier	edg		5142171	0					
ANR	5142235	Identifier	to		5142171	1					
ANR	5142236	Identifier	n		5142171	1					
ANR	5142237	ExpressionStatement	"r_stack_push ( s , edg )"	52:1:973:994	5142171	6	True				
ANR	5142238	CallExpression	"r_stack_push ( s , edg )"		5142171	0					
ANR	5142239	Callee	r_stack_push		5142171	0					
ANR	5142240	Identifier	r_stack_push		5142171	0					
ANR	5142241	ArgumentList	s		5142171	1					
ANR	5142242	Argument	s		5142171	0					
ANR	5142243	Identifier	s		5142171	0					
ANR	5142244	Argument	edg		5142171	1					
ANR	5142245	Identifier	edg		5142171	0					
ANR	5142246	WhileStatement	while ( ! r_stack_is_empty ( s ) )		5142171	7					
ANR	5142247	Condition	! r_stack_is_empty ( s )	53:8:1004:1024	5142171	0	True				
ANR	5142248	UnaryOperationExpression	! r_stack_is_empty ( s )		5142171	0					
ANR	5142249	UnaryOperator	!		5142171	0					
ANR	5142250	CallExpression	r_stack_is_empty ( s )		5142171	1					
ANR	5142251	Callee	r_stack_is_empty		5142171	0					
ANR	5142252	Identifier	r_stack_is_empty		5142171	0					
ANR	5142253	ArgumentList	s		5142171	1					
ANR	5142254	Argument	s		5142171	0					
ANR	5142255	Identifier	s		5142171	0					
ANR	5142256	CompoundStatement		51:2:1220:1277	5142171	1					
ANR	5142257	IdentifierDeclStatement	RGraphEdge * cur_edge = ( RGraphEdge * ) r_stack_pop ( s ) ;	54:2:1031:1083	5142171	0	True				
ANR	5142258	IdentifierDecl	* cur_edge = ( RGraphEdge * ) r_stack_pop ( s )		5142171	0					
ANR	5142259	IdentifierDeclType	RGraphEdge *		5142171	0					
ANR	5142260	Identifier	cur_edge		5142171	1					
ANR	5142261	AssignmentExpression	* cur_edge = ( RGraphEdge * ) r_stack_pop ( s )		5142171	2		=			
ANR	5142262	Identifier	cur_edge		5142171	0					
ANR	5142263	CastExpression	( RGraphEdge * ) r_stack_pop ( s )		5142171	1					
ANR	5142264	CastTarget	RGraphEdge *		5142171	0					
ANR	5142265	CallExpression	r_stack_pop ( s )		5142171	1					
ANR	5142266	Callee	r_stack_pop		5142171	0					
ANR	5142267	Identifier	r_stack_pop		5142171	0					
ANR	5142268	ArgumentList	s		5142171	1					
ANR	5142269	Argument	s		5142171	0					
ANR	5142270	Identifier	s		5142171	0					
ANR	5142271	IdentifierDeclStatement	"RGraphNode * v , * cur = cur_edge -> to , * from = cur_edge -> from ;"	55:2:1087:1145	5142171	1	True				
ANR	5142272	IdentifierDecl	* v		5142171	0					
ANR	5142273	IdentifierDeclType	RGraphNode *		5142171	0					
ANR	5142274	Identifier	v		5142171	1					
ANR	5142275	IdentifierDecl	* cur = cur_edge -> to		5142171	1					
ANR	5142276	IdentifierDeclType	RGraphNode *		5142171	0					
ANR	5142277	Identifier	cur		5142171	1					
ANR	5142278	AssignmentExpression	* cur = cur_edge -> to		5142171	2		=			
ANR	5142279	Identifier	cur		5142171	0					
ANR	5142280	PtrMemberAccess	cur_edge -> to		5142171	1					
ANR	5142281	Identifier	cur_edge		5142171	0					
ANR	5142282	Identifier	to		5142171	1					
ANR	5142283	IdentifierDecl	* from = cur_edge -> from		5142171	2					
ANR	5142284	IdentifierDeclType	RGraphNode *		5142171	0					
ANR	5142285	Identifier	from		5142171	1					
ANR	5142286	AssignmentExpression	* from = cur_edge -> from		5142171	2		=			
ANR	5142287	Identifier	from		5142171	0					
ANR	5142288	PtrMemberAccess	cur_edge -> from		5142171	1					
ANR	5142289	Identifier	cur_edge		5142171	0					
ANR	5142290	Identifier	from		5142171	1					
ANR	5142291	IdentifierDeclStatement	RListIter * it ;	56:2:1149:1162	5142171	2	True				
ANR	5142292	IdentifierDecl	* it		5142171	0					
ANR	5142293	IdentifierDeclType	RListIter *		5142171	0					
ANR	5142294	Identifier	it		5142171	1					
ANR	5142295	IdentifierDeclStatement	int i ;	57:2:1166:1171	5142171	3	True				
ANR	5142296	IdentifierDecl	i		5142171	0					
ANR	5142297	IdentifierDeclType	int		5142171	0					
ANR	5142298	Identifier	i		5142171	1					
ANR	5142299	IfStatement	if ( from && cur )		5142171	4					
ANR	5142300	Condition	from && cur	59:6:1180:1190	5142171	0	True				
ANR	5142301	AndExpression	from && cur		5142171	0		&&			
ANR	5142302	Identifier	from		5142171	0					
ANR	5142303	Identifier	cur		5142171	1					
ANR	5142304	CompoundStatement		20:19:412:412	5142171	1					
ANR	5142305	IfStatement	if ( color [ cur -> idx ] == WHITE_COLOR && vis -> tree_edge )		5142171	0					
ANR	5142306	Condition	color [ cur -> idx ] == WHITE_COLOR && vis -> tree_edge	60:7:1202:1249	5142171	0	True				
ANR	5142307	AndExpression	color [ cur -> idx ] == WHITE_COLOR && vis -> tree_edge		5142171	0		&&			
ANR	5142308	EqualityExpression	color [ cur -> idx ] == WHITE_COLOR		5142171	0		==			
ANR	5142309	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142310	Identifier	color		5142171	0					
ANR	5142311	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142312	Identifier	cur		5142171	0					
ANR	5142313	Identifier	idx		5142171	1					
ANR	5142314	Identifier	WHITE_COLOR		5142171	1					
ANR	5142315	PtrMemberAccess	vis -> tree_edge		5142171	1					
ANR	5142316	Identifier	vis		5142171	0					
ANR	5142317	Identifier	tree_edge		5142171	1					
ANR	5142318	CompoundStatement		21:57:471:471	5142171	1					
ANR	5142319	ExpressionStatement	"vis -> tree_edge ( cur_edge , vis )"	61:4:1258:1288	5142171	0	True				
ANR	5142320	CallExpression	"vis -> tree_edge ( cur_edge , vis )"		5142171	0					
ANR	5142321	Callee	vis -> tree_edge		5142171	0					
ANR	5142322	PtrMemberAccess	vis -> tree_edge		5142171	0					
ANR	5142323	Identifier	vis		5142171	0					
ANR	5142324	Identifier	tree_edge		5142171	1					
ANR	5142325	ArgumentList	cur_edge		5142171	1					
ANR	5142326	Argument	cur_edge		5142171	0					
ANR	5142327	Identifier	cur_edge		5142171	0					
ANR	5142328	Argument	vis		5142171	1					
ANR	5142329	Identifier	vis		5142171	0					
ANR	5142330	ElseStatement	else		5142171	0					
ANR	5142331	IfStatement	if ( color [ cur -> idx ] == GRAY_COLOR && vis -> back_edge )		5142171	0					
ANR	5142332	Condition	color [ cur -> idx ] == GRAY_COLOR && vis -> back_edge	62:14:1304:1350	5142171	0	True				
ANR	5142333	AndExpression	color [ cur -> idx ] == GRAY_COLOR && vis -> back_edge		5142171	0		&&			
ANR	5142334	EqualityExpression	color [ cur -> idx ] == GRAY_COLOR		5142171	0		==			
ANR	5142335	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142336	Identifier	color		5142171	0					
ANR	5142337	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142338	Identifier	cur		5142171	0					
ANR	5142339	Identifier	idx		5142171	1					
ANR	5142340	Identifier	GRAY_COLOR		5142171	1					
ANR	5142341	PtrMemberAccess	vis -> back_edge		5142171	1					
ANR	5142342	Identifier	vis		5142171	0					
ANR	5142343	Identifier	back_edge		5142171	1					
ANR	5142344	CompoundStatement		23:63:572:572	5142171	1					
ANR	5142345	ExpressionStatement	"vis -> back_edge ( cur_edge , vis )"	63:4:1359:1389	5142171	0	True				
ANR	5142346	CallExpression	"vis -> back_edge ( cur_edge , vis )"		5142171	0					
ANR	5142347	Callee	vis -> back_edge		5142171	0					
ANR	5142348	PtrMemberAccess	vis -> back_edge		5142171	0					
ANR	5142349	Identifier	vis		5142171	0					
ANR	5142350	Identifier	back_edge		5142171	1					
ANR	5142351	ArgumentList	cur_edge		5142171	1					
ANR	5142352	Argument	cur_edge		5142171	0					
ANR	5142353	Identifier	cur_edge		5142171	0					
ANR	5142354	Argument	vis		5142171	1					
ANR	5142355	Identifier	vis		5142171	0					
ANR	5142356	ElseStatement	else		5142171	0					
ANR	5142357	IfStatement	if ( color [ cur -> idx ] == BLACK_COLOR && vis -> fcross_edge )		5142171	0					
ANR	5142358	Condition	color [ cur -> idx ] == BLACK_COLOR && vis -> fcross_edge	64:14:1405:1454	5142171	0	True				
ANR	5142359	AndExpression	color [ cur -> idx ] == BLACK_COLOR && vis -> fcross_edge		5142171	0		&&			
ANR	5142360	EqualityExpression	color [ cur -> idx ] == BLACK_COLOR		5142171	0		==			
ANR	5142361	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142362	Identifier	color		5142171	0					
ANR	5142363	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142364	Identifier	cur		5142171	0					
ANR	5142365	Identifier	idx		5142171	1					
ANR	5142366	Identifier	BLACK_COLOR		5142171	1					
ANR	5142367	PtrMemberAccess	vis -> fcross_edge		5142171	1					
ANR	5142368	Identifier	vis		5142171	0					
ANR	5142369	Identifier	fcross_edge		5142171	1					
ANR	5142370	CompoundStatement		25:66:676:676	5142171	1					
ANR	5142371	ExpressionStatement	"vis -> fcross_edge ( cur_edge , vis )"	65:4:1463:1495	5142171	0	True				
ANR	5142372	CallExpression	"vis -> fcross_edge ( cur_edge , vis )"		5142171	0					
ANR	5142373	Callee	vis -> fcross_edge		5142171	0					
ANR	5142374	PtrMemberAccess	vis -> fcross_edge		5142171	0					
ANR	5142375	Identifier	vis		5142171	0					
ANR	5142376	Identifier	fcross_edge		5142171	1					
ANR	5142377	ArgumentList	cur_edge		5142171	1					
ANR	5142378	Argument	cur_edge		5142171	0					
ANR	5142379	Identifier	cur_edge		5142171	0					
ANR	5142380	Argument	vis		5142171	1					
ANR	5142381	Identifier	vis		5142171	0					
ANR	5142382	ElseStatement	else		5142171	0					
ANR	5142383	IfStatement	if ( ! cur && from )		5142171	0					
ANR	5142384	Condition	! cur && from	67:13:1515:1526	5142171	0	True				
ANR	5142385	AndExpression	! cur && from		5142171	0		&&			
ANR	5142386	UnaryOperationExpression	! cur		5142171	0					
ANR	5142387	UnaryOperator	!		5142171	0					
ANR	5142388	Identifier	cur		5142171	1					
ANR	5142389	Identifier	from		5142171	1					
ANR	5142390	CompoundStatement		28:27:748:748	5142171	1					
ANR	5142391	IfStatement	if ( color [ from -> idx ] != BLACK_COLOR && vis -> finish_node )		5142171	0					
ANR	5142392	Condition	color [ from -> idx ] != BLACK_COLOR && vis -> finish_node	68:7:1538:1588	5142171	0	True				
ANR	5142393	AndExpression	color [ from -> idx ] != BLACK_COLOR && vis -> finish_node		5142171	0		&&			
ANR	5142394	EqualityExpression	color [ from -> idx ] != BLACK_COLOR		5142171	0		!=			
ANR	5142395	ArrayIndexing	color [ from -> idx ]		5142171	0					
ANR	5142396	Identifier	color		5142171	0					
ANR	5142397	PtrMemberAccess	from -> idx		5142171	1					
ANR	5142398	Identifier	from		5142171	0					
ANR	5142399	Identifier	idx		5142171	1					
ANR	5142400	Identifier	BLACK_COLOR		5142171	1					
ANR	5142401	PtrMemberAccess	vis -> finish_node		5142171	1					
ANR	5142402	Identifier	vis		5142171	0					
ANR	5142403	Identifier	finish_node		5142171	1					
ANR	5142404	CompoundStatement		29:60:810:810	5142171	1					
ANR	5142405	ExpressionStatement	"vis -> finish_node ( from , vis )"	69:4:1597:1625	5142171	0	True				
ANR	5142406	CallExpression	"vis -> finish_node ( from , vis )"		5142171	0					
ANR	5142407	Callee	vis -> finish_node		5142171	0					
ANR	5142408	PtrMemberAccess	vis -> finish_node		5142171	0					
ANR	5142409	Identifier	vis		5142171	0					
ANR	5142410	Identifier	finish_node		5142171	1					
ANR	5142411	ArgumentList	from		5142171	1					
ANR	5142412	Argument	from		5142171	0					
ANR	5142413	Identifier	from		5142171	0					
ANR	5142414	Argument	vis		5142171	1					
ANR	5142415	Identifier	vis		5142171	0					
ANR	5142416	ExpressionStatement	color [ from -> idx ] = BLACK_COLOR	71:3:1635:1665	5142171	1	True				
ANR	5142417	AssignmentExpression	color [ from -> idx ] = BLACK_COLOR		5142171	0		=			
ANR	5142418	ArrayIndexing	color [ from -> idx ]		5142171	0					
ANR	5142419	Identifier	color		5142171	0					
ANR	5142420	PtrMemberAccess	from -> idx		5142171	1					
ANR	5142421	Identifier	from		5142171	0					
ANR	5142422	Identifier	idx		5142171	1					
ANR	5142423	Identifier	BLACK_COLOR		5142171	1					
ANR	5142424	ExpressionStatement	free ( cur_edge )	73:2:1673:1688	5142171	5	True				
ANR	5142425	CallExpression	free ( cur_edge )		5142171	0					
ANR	5142426	Callee	free		5142171	0					
ANR	5142427	Identifier	free		5142171	0					
ANR	5142428	ArgumentList	cur_edge		5142171	1					
ANR	5142429	Argument	cur_edge		5142171	0					
ANR	5142430	Identifier	cur_edge		5142171	0					
ANR	5142431	IfStatement	if ( ! cur || color [ cur -> idx ] != WHITE_COLOR )		5142171	6					
ANR	5142432	Condition	! cur || color [ cur -> idx ] != WHITE_COLOR	74:6:1696:1733	5142171	0	True				
ANR	5142433	OrExpression	! cur || color [ cur -> idx ] != WHITE_COLOR		5142171	0		||			
ANR	5142434	UnaryOperationExpression	! cur		5142171	0					
ANR	5142435	UnaryOperator	!		5142171	0					
ANR	5142436	Identifier	cur		5142171	1					
ANR	5142437	EqualityExpression	color [ cur -> idx ] != WHITE_COLOR		5142171	1		!=			
ANR	5142438	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142439	Identifier	color		5142171	0					
ANR	5142440	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142441	Identifier	cur		5142171	0					
ANR	5142442	Identifier	idx		5142171	1					
ANR	5142443	Identifier	WHITE_COLOR		5142171	1					
ANR	5142444	CompoundStatement		35:46:955:955	5142171	1					
ANR	5142445	ContinueStatement	continue ;	75:3:1741:1749	5142171	0	True				
ANR	5142446	IfStatement	if ( color [ cur -> idx ] == WHITE_COLOR && vis -> discover_node )		5142171	7					
ANR	5142447	Condition	color [ cur -> idx ] == WHITE_COLOR && vis -> discover_node	77:6:1761:1812	5142171	0	True				
ANR	5142448	AndExpression	color [ cur -> idx ] == WHITE_COLOR && vis -> discover_node		5142171	0		&&			
ANR	5142449	EqualityExpression	color [ cur -> idx ] == WHITE_COLOR		5142171	0		==			
ANR	5142450	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142451	Identifier	color		5142171	0					
ANR	5142452	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142453	Identifier	cur		5142171	0					
ANR	5142454	Identifier	idx		5142171	1					
ANR	5142455	Identifier	WHITE_COLOR		5142171	1					
ANR	5142456	PtrMemberAccess	vis -> discover_node		5142171	1					
ANR	5142457	Identifier	vis		5142171	0					
ANR	5142458	Identifier	discover_node		5142171	1					
ANR	5142459	CompoundStatement		38:60:1034:1034	5142171	1					
ANR	5142460	ExpressionStatement	"vis -> discover_node ( cur , vis )"	78:3:1820:1849	5142171	0	True				
ANR	5142461	CallExpression	"vis -> discover_node ( cur , vis )"		5142171	0					
ANR	5142462	Callee	vis -> discover_node		5142171	0					
ANR	5142463	PtrMemberAccess	vis -> discover_node		5142171	0					
ANR	5142464	Identifier	vis		5142171	0					
ANR	5142465	Identifier	discover_node		5142171	1					
ANR	5142466	ArgumentList	cur		5142171	1					
ANR	5142467	Argument	cur		5142171	0					
ANR	5142468	Identifier	cur		5142171	0					
ANR	5142469	Argument	vis		5142171	1					
ANR	5142470	Identifier	vis		5142171	0					
ANR	5142471	ExpressionStatement	color [ cur -> idx ] = GRAY_COLOR	80:2:1857:1885	5142171	8	True				
ANR	5142472	AssignmentExpression	color [ cur -> idx ] = GRAY_COLOR		5142171	0		=			
ANR	5142473	ArrayIndexing	color [ cur -> idx ]		5142171	0					
ANR	5142474	Identifier	color		5142171	0					
ANR	5142475	PtrMemberAccess	cur -> idx		5142171	1					
ANR	5142476	Identifier	cur		5142171	0					
ANR	5142477	Identifier	idx		5142171	1					
ANR	5142478	Identifier	GRAY_COLOR		5142171	1					
ANR	5142479	ExpressionStatement	edg = R_NEW0 ( RGraphEdge )	82:2:1890:1915	5142171	9	True				
ANR	5142480	AssignmentExpression	edg = R_NEW0 ( RGraphEdge )		5142171	0		=			
ANR	5142481	Identifier	edg		5142171	0					
ANR	5142482	CallExpression	R_NEW0 ( RGraphEdge )		5142171	1					
ANR	5142483	Callee	R_NEW0		5142171	0					
ANR	5142484	Identifier	R_NEW0		5142171	0					
ANR	5142485	ArgumentList	RGraphEdge		5142171	1					
ANR	5142486	Argument	RGraphEdge		5142171	0					
ANR	5142487	Identifier	RGraphEdge		5142171	0					
ANR	5142488	IfStatement	if ( ! edg )		5142171	10					
ANR	5142489	Condition	! edg	83:6:1923:1926	5142171	0	True				
ANR	5142490	UnaryOperationExpression	! edg		5142171	0					
ANR	5142491	UnaryOperator	!		5142171	0					
ANR	5142492	Identifier	edg		5142171	1					
ANR	5142493	CompoundStatement		44:12:1148:1148	5142171	1					
ANR	5142494	BreakStatement	break ;	84:3:1934:1939	5142171	0	True				
ANR	5142495	ExpressionStatement	edg -> from = cur	86:2:1947:1962	5142171	11	True				
ANR	5142496	AssignmentExpression	edg -> from = cur		5142171	0		=			
ANR	5142497	PtrMemberAccess	edg -> from		5142171	0					
ANR	5142498	Identifier	edg		5142171	0					
ANR	5142499	Identifier	from		5142171	1					
ANR	5142500	Identifier	cur		5142171	1					
ANR	5142501	ExpressionStatement	"r_stack_push ( s , edg )"	87:2:1966:1987	5142171	12	True				
ANR	5142502	CallExpression	"r_stack_push ( s , edg )"		5142171	0					
ANR	5142503	Callee	r_stack_push		5142171	0					
ANR	5142504	Identifier	r_stack_push		5142171	0					
ANR	5142505	ArgumentList	s		5142171	1					
ANR	5142506	Argument	s		5142171	0					
ANR	5142507	Identifier	s		5142171	0					
ANR	5142508	Argument	edg		5142171	1					
ANR	5142509	Identifier	edg		5142171	0					
ANR	5142510	ExpressionStatement	i = 0	89:2:1992:1997	5142171	13	True				
ANR	5142511	AssignmentExpression	i = 0		5142171	0		=			
ANR	5142512	Identifier	i		5142171	0					
ANR	5142513	PrimaryExpression	0		5142171	1					
ANR	5142514	IdentifierDeclStatement	"const RList * neighbours = r_graph_get_neighbours ( g , cur ) ;"	90:2:2001:2058	5142171	14	True				
ANR	5142515	IdentifierDecl	"* neighbours = r_graph_get_neighbours ( g , cur )"		5142171	0					
ANR	5142516	IdentifierDeclType	const RList *		5142171	0					
ANR	5142517	Identifier	neighbours		5142171	1					
ANR	5142518	AssignmentExpression	"* neighbours = r_graph_get_neighbours ( g , cur )"		5142171	2		=			
ANR	5142519	Identifier	neighbours		5142171	0					
ANR	5142520	CallExpression	"r_graph_get_neighbours ( g , cur )"		5142171	1					
ANR	5142521	Callee	r_graph_get_neighbours		5142171	0					
ANR	5142522	Identifier	r_graph_get_neighbours		5142171	0					
ANR	5142523	ArgumentList	g		5142171	1					
ANR	5142524	Argument	g		5142171	0					
ANR	5142525	Identifier	g		5142171	0					
ANR	5142526	Argument	cur		5142171	1					
ANR	5142527	Identifier	cur		5142171	0					
ANR	5142528	Statement	r_list_foreach	91:2:2062:2075	5142171	15	True				
ANR	5142529	Statement	(	91:17:2077:2077	5142171	16	True				
ANR	5142530	Statement	neighbours	91:18:2078:2087	5142171	17	True				
ANR	5142531	Statement	","	91:28:2088:2088	5142171	18	True				
ANR	5142532	Statement	it	91:30:2090:2091	5142171	19	True				
ANR	5142533	Statement	","	91:32:2092:2092	5142171	20	True				
ANR	5142534	Statement	v	91:34:2094:2094	5142171	21	True				
ANR	5142535	Statement	)	91:35:2095:2095	5142171	22	True				
ANR	5142536	CompoundStatement		52:37:1316:1316	5142171	23					
ANR	5142537	ExpressionStatement	edg = R_NEW ( RGraphEdge )	92:3:2102:2126	5142171	0	True				
ANR	5142538	AssignmentExpression	edg = R_NEW ( RGraphEdge )		5142171	0		=			
ANR	5142539	Identifier	edg		5142171	0					
ANR	5142540	CallExpression	R_NEW ( RGraphEdge )		5142171	1					
ANR	5142541	Callee	R_NEW		5142171	0					
ANR	5142542	Identifier	R_NEW		5142171	0					
ANR	5142543	ArgumentList	RGraphEdge		5142171	1					
ANR	5142544	Argument	RGraphEdge		5142171	0					
ANR	5142545	Identifier	RGraphEdge		5142171	0					
ANR	5142546	ExpressionStatement	edg -> from = cur	93:3:2131:2146	5142171	1	True				
ANR	5142547	AssignmentExpression	edg -> from = cur		5142171	0		=			
ANR	5142548	PtrMemberAccess	edg -> from		5142171	0					
ANR	5142549	Identifier	edg		5142171	0					
ANR	5142550	Identifier	from		5142171	1					
ANR	5142551	Identifier	cur		5142171	1					
ANR	5142552	ExpressionStatement	edg -> to = v	94:3:2151:2162	5142171	2	True				
ANR	5142553	AssignmentExpression	edg -> to = v		5142171	0		=			
ANR	5142554	PtrMemberAccess	edg -> to		5142171	0					
ANR	5142555	Identifier	edg		5142171	0					
ANR	5142556	Identifier	to		5142171	1					
ANR	5142557	Identifier	v		5142171	1					
ANR	5142558	ExpressionStatement	edg -> nth = i ++	95:3:2167:2181	5142171	3	True				
ANR	5142559	AssignmentExpression	edg -> nth = i ++		5142171	0		=			
ANR	5142560	PtrMemberAccess	edg -> nth		5142171	0					
ANR	5142561	Identifier	edg		5142171	0					
ANR	5142562	Identifier	nth		5142171	1					
ANR	5142563	PostIncDecOperationExpression	i ++		5142171	1					
ANR	5142564	Identifier	i		5142171	0					
ANR	5142565	IncDec	++		5142171	1					
ANR	5142566	ExpressionStatement	"r_stack_push ( s , edg )"	96:3:2186:2207	5142171	4	True				
ANR	5142567	CallExpression	"r_stack_push ( s , edg )"		5142171	0					
ANR	5142568	Callee	r_stack_push		5142171	0					
ANR	5142569	Identifier	r_stack_push		5142171	0					
ANR	5142570	ArgumentList	s		5142171	1					
ANR	5142571	Argument	s		5142171	0					
ANR	5142572	Identifier	s		5142171	0					
ANR	5142573	Argument	edg		5142171	1					
ANR	5142574	Identifier	edg		5142171	0					
ANR	5142575	ExpressionStatement	r_stack_free ( s )	99:1:2217:2233	5142171	8	True				
ANR	5142576	CallExpression	r_stack_free ( s )		5142171	0					
ANR	5142577	Callee	r_stack_free		5142171	0					
ANR	5142578	Identifier	r_stack_free		5142171	0					
ANR	5142579	ArgumentList	s		5142171	1					
ANR	5142580	Argument	s		5142171	0					
ANR	5142581	Identifier	s		5142171	0					
ANR	5142582	ReturnType	static void		5142171	1					
ANR	5142583	Identifier	dfs_node		5142171	2					
ANR	5142584	ParameterList	"RGraph * g , RGraphNode * n , RGraphVisitor * vis , int color [ ]"		5142171	3					
ANR	5142585	Parameter	RGraph * g	40:22:721:729	5142171	0	True				
ANR	5142586	ParameterType	RGraph *		5142171	0					
ANR	5142587	Identifier	g		5142171	1					
ANR	5142588	Parameter	RGraphNode * n	40:33:732:744	5142171	1	True				
ANR	5142589	ParameterType	RGraphNode *		5142171	0					
ANR	5142590	Identifier	n		5142171	1					
ANR	5142591	Parameter	RGraphVisitor * vis	40:48:747:764	5142171	2	True				
ANR	5142592	ParameterType	RGraphVisitor *		5142171	0					
ANR	5142593	Identifier	vis		5142171	1					
ANR	5142594	Parameter	int color [ ]	40:68:767:777	5142171	3	True				
ANR	5142595	ParameterType	int [ ]		5142171	0					
ANR	5142596	Identifier	color		5142171	1					
ANR	5142597	CFGEntryNode	ENTRY		5142171		True				
ANR	5142598	CFGExitNode	EXIT		5142171		True				
ANR	5142599	Symbol	cur		5142171						
ANR	5142600	Symbol	* * from		5142171						
ANR	5142601	Symbol	color		5142171						
ANR	5142602	Symbol	RGraphEdge		5142171						
ANR	5142603	Symbol	r_graph_get_neighbours		5142171						
ANR	5142604	Symbol	r_stack_new		5142171						
ANR	5142605	Symbol	* cur_edge		5142171						
ANR	5142606	Symbol	* vis		5142171						
ANR	5142607	Symbol	WHITE_COLOR		5142171						
ANR	5142608	Symbol	cur -> idx		5142171						
ANR	5142609	Symbol	* from -> idx		5142171						
ANR	5142610	Symbol	edg -> from		5142171						
ANR	5142611	Symbol	vis -> fcross_edge		5142171						
ANR	5142612	Symbol	* * cur		5142171						
ANR	5142613	Symbol	BLACK_COLOR		5142171						
ANR	5142614	Symbol	* cur		5142171						
ANR	5142615	Symbol	GRAY_COLOR		5142171						
ANR	5142616	Symbol	g -> n_edges		5142171						
ANR	5142617	Symbol	r_stack_pop		5142171						
ANR	5142618	Symbol	vis -> discover_node		5142171						
ANR	5142619	Symbol	from		5142171						
ANR	5142620	Symbol	edg -> to		5142171						
ANR	5142621	Symbol	r_stack_is_empty		5142171						
ANR	5142622	Symbol	cur_edge		5142171						
ANR	5142623	Symbol	cur_edge -> from		5142171						
ANR	5142624	Symbol	* cur -> idx		5142171						
ANR	5142625	Symbol	vis -> finish_node		5142171						
ANR	5142626	Symbol	vis		5142171						
ANR	5142627	Symbol	NULL		5142171						
ANR	5142628	Symbol	vis -> tree_edge		5142171						
ANR	5142629	Symbol	g		5142171						
ANR	5142630	Symbol	edg		5142171						
ANR	5142631	Symbol	i		5142171						
ANR	5142632	Symbol	* color		5142171						
ANR	5142633	Symbol	neighbours		5142171						
ANR	5142634	Symbol	it		5142171						
ANR	5142635	Symbol	* edg		5142171						
ANR	5142636	Symbol	n		5142171						
ANR	5142637	Symbol	from -> idx		5142171						
ANR	5142638	Symbol	cur_edge -> to		5142171						
ANR	5142639	Symbol	vis -> back_edge		5142171						
ANR	5142640	Symbol	* g		5142171						
ANR	5142641	Symbol	R_NEW0		5142171						
ANR	5142642	Symbol	edg -> nth		5142171						
ANR	5142643	Symbol	s		5142171						
ANR	5142644	Symbol	v		5142171						
ANR	5142645	Symbol	R_NEW		5142171						
ANR	5142646	Symbol	* from		5142171						
ANR	5142647	Function	r_graph_new	102:0:2238:2506							
ANR	5142648	FunctionDef	r_graph_new ()		5142647	0					
ANR	5142649	CompoundStatement		102:29:2267:2506	5142647	0					
ANR	5142650	IdentifierDeclStatement	RGraph * t = R_NEW0 ( RGraph ) ;	103:1:2270:2297	5142647	0	True				
ANR	5142651	IdentifierDecl	* t = R_NEW0 ( RGraph )		5142647	0					
ANR	5142652	IdentifierDeclType	RGraph *		5142647	0					
ANR	5142653	Identifier	t		5142647	1					
ANR	5142654	AssignmentExpression	* t = R_NEW0 ( RGraph )		5142647	2		=			
ANR	5142655	Identifier	t		5142647	0					
ANR	5142656	CallExpression	R_NEW0 ( RGraph )		5142647	1					
ANR	5142657	Callee	R_NEW0		5142647	0					
ANR	5142658	Identifier	R_NEW0		5142647	0					
ANR	5142659	ArgumentList	RGraph		5142647	1					
ANR	5142660	Argument	RGraph		5142647	0					
ANR	5142661	Identifier	RGraph		5142647	0					
ANR	5142662	IfStatement	if ( ! t )		5142647	1					
ANR	5142663	Condition	! t	104:5:2304:2305	5142647	0	True				
ANR	5142664	UnaryOperationExpression	! t		5142647	0					
ANR	5142665	UnaryOperator	!		5142647	0					
ANR	5142666	Identifier	t		5142647	1					
ANR	5142667	CompoundStatement		3:9:40:40	5142647	1					
ANR	5142668	ReturnStatement	return NULL ;	105:2:2312:2323	5142647	0	True				
ANR	5142669	Identifier	NULL		5142647	0					
ANR	5142670	ExpressionStatement	t -> nodes = r_list_new ( )	107:1:2329:2353	5142647	2	True				
ANR	5142671	AssignmentExpression	t -> nodes = r_list_new ( )		5142647	0		=			
ANR	5142672	PtrMemberAccess	t -> nodes		5142647	0					
ANR	5142673	Identifier	t		5142647	0					
ANR	5142674	Identifier	nodes		5142647	1					
ANR	5142675	CallExpression	r_list_new ( )		5142647	1					
ANR	5142676	Callee	r_list_new		5142647	0					
ANR	5142677	Identifier	r_list_new		5142647	0					
ANR	5142678	ArgumentList			5142647	1					
ANR	5142679	IfStatement	if ( ! t -> nodes )		5142647	3					
ANR	5142680	Condition	! t -> nodes	108:5:2360:2368	5142647	0	True				
ANR	5142681	UnaryOperationExpression	! t -> nodes		5142647	0					
ANR	5142682	UnaryOperator	!		5142647	0					
ANR	5142683	PtrMemberAccess	t -> nodes		5142647	1					
ANR	5142684	Identifier	t		5142647	0					
ANR	5142685	Identifier	nodes		5142647	1					
ANR	5142686	CompoundStatement		7:16:103:103	5142647	1					
ANR	5142687	ExpressionStatement	r_graph_free ( t )	109:2:2375:2390	5142647	0	True				
ANR	5142688	CallExpression	r_graph_free ( t )		5142647	0					
ANR	5142689	Callee	r_graph_free		5142647	0					
ANR	5142690	Identifier	r_graph_free		5142647	0					
ANR	5142691	ArgumentList	t		5142647	1					
ANR	5142692	Argument	t		5142647	0					
ANR	5142693	Identifier	t		5142647	0					
ANR	5142694	ReturnStatement	return NULL ;	110:2:2394:2405	5142647	1	True				
ANR	5142695	Identifier	NULL		5142647	0					
ANR	5142696	ExpressionStatement	t -> nodes -> free = ( RListFree ) r_graph_node_free	112:1:2411:2456	5142647	4	True				
ANR	5142697	AssignmentExpression	t -> nodes -> free = ( RListFree ) r_graph_node_free		5142647	0		=			
ANR	5142698	PtrMemberAccess	t -> nodes -> free		5142647	0					
ANR	5142699	PtrMemberAccess	t -> nodes		5142647	0					
ANR	5142700	Identifier	t		5142647	0					
ANR	5142701	Identifier	nodes		5142647	1					
ANR	5142702	Identifier	free		5142647	1					
ANR	5142703	CastExpression	( RListFree ) r_graph_node_free		5142647	1					
ANR	5142704	CastTarget	RListFree		5142647	0					
ANR	5142705	Identifier	r_graph_node_free		5142647	1					
ANR	5142706	ExpressionStatement	t -> n_nodes = 0	113:1:2459:2473	5142647	5	True				
ANR	5142707	AssignmentExpression	t -> n_nodes = 0		5142647	0		=			
ANR	5142708	PtrMemberAccess	t -> n_nodes		5142647	0					
ANR	5142709	Identifier	t		5142647	0					
ANR	5142710	Identifier	n_nodes		5142647	1					
ANR	5142711	PrimaryExpression	0		5142647	1					
ANR	5142712	ExpressionStatement	t -> last_index = 0	114:1:2476:2493	5142647	6	True				
ANR	5142713	AssignmentExpression	t -> last_index = 0		5142647	0		=			
ANR	5142714	PtrMemberAccess	t -> last_index		5142647	0					
ANR	5142715	Identifier	t		5142647	0					
ANR	5142716	Identifier	last_index		5142647	1					
ANR	5142717	PrimaryExpression	0		5142647	1					
ANR	5142718	ReturnStatement	return t ;	115:1:2496:2504	5142647	7	True				
ANR	5142719	Identifier	t		5142647	0					
ANR	5142720	ReturnType	R_API RGraph *		5142647	1					
ANR	5142721	Identifier	r_graph_new		5142647	2					
ANR	5142722	ParameterList			5142647	3					
ANR	5142723	CFGEntryNode	ENTRY		5142647		True				
ANR	5142724	CFGExitNode	EXIT		5142647		True				
ANR	5142725	Symbol	* t -> nodes		5142647						
ANR	5142726	Symbol	NULL		5142647						
ANR	5142727	Symbol	t -> nodes		5142647						
ANR	5142728	Symbol	t -> last_index		5142647						
ANR	5142729	Symbol	R_NEW0		5142647						
ANR	5142730	Symbol	t		5142647						
ANR	5142731	Symbol	RGraph		5142647						
ANR	5142732	Symbol	* * t		5142647						
ANR	5142733	Symbol	t -> nodes -> free		5142647						
ANR	5142734	Symbol	r_graph_node_free		5142647						
ANR	5142735	Symbol	* t		5142647						
ANR	5142736	Symbol	r_list_new		5142647						
ANR	5142737	Symbol	t -> n_nodes		5142647						
ANR	5142738	Function	r_graph_free	118:0:2509:2583							
ANR	5142739	FunctionDef	r_graph_free (RGraph * t)		5142738	0					
ANR	5142740	CompoundStatement		118:36:2545:2583	5142738	0					
ANR	5142741	ExpressionStatement	r_list_free ( t -> nodes )	119:1:2548:2570	5142738	0	True				
ANR	5142742	CallExpression	r_list_free ( t -> nodes )		5142738	0					
ANR	5142743	Callee	r_list_free		5142738	0					
ANR	5142744	Identifier	r_list_free		5142738	0					
ANR	5142745	ArgumentList	t -> nodes		5142738	1					
ANR	5142746	Argument	t -> nodes		5142738	0					
ANR	5142747	PtrMemberAccess	t -> nodes		5142738	0					
ANR	5142748	Identifier	t		5142738	0					
ANR	5142749	Identifier	nodes		5142738	1					
ANR	5142750	ExpressionStatement	free ( t )	120:1:2573:2581	5142738	1	True				
ANR	5142751	CallExpression	free ( t )		5142738	0					
ANR	5142752	Callee	free		5142738	0					
ANR	5142753	Identifier	free		5142738	0					
ANR	5142754	ArgumentList	t		5142738	1					
ANR	5142755	Argument	t		5142738	0					
ANR	5142756	Identifier	t		5142738	0					
ANR	5142757	ReturnType	R_API void		5142738	1					
ANR	5142758	Identifier	r_graph_free		5142738	2					
ANR	5142759	ParameterList	RGraph * t		5142738	3					
ANR	5142760	Parameter	RGraph * t	118:25:2534:2542	5142738	0	True				
ANR	5142761	ParameterType	RGraph *		5142738	0					
ANR	5142762	Identifier	t		5142738	1					
ANR	5142763	CFGEntryNode	ENTRY		5142738		True				
ANR	5142764	CFGExitNode	EXIT		5142738		True				
ANR	5142765	Symbol	t		5142738						
ANR	5142766	Symbol	t -> nodes		5142738						
ANR	5142767	Symbol	* t		5142738						
ANR	5142768	Function	r_graph_get_node	123:0:2586:2810							
ANR	5142769	FunctionDef	"r_graph_get_node (const RGraph * t , unsigned int idx)"		5142768	0					
ANR	5142770	CompoundStatement		123:71:2657:2810	5142768	0					
ANR	5142771	IdentifierDeclStatement	"RListIter * it = r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp ) ;"	124:1:2660:2746	5142768	0	True				
ANR	5142772	IdentifierDecl	"* it = r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp )"		5142768	0					
ANR	5142773	IdentifierDeclType	RListIter *		5142768	0					
ANR	5142774	Identifier	it		5142768	1					
ANR	5142775	AssignmentExpression	"* it = r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp )"		5142768	2		=			
ANR	5142776	Identifier	it		5142768	0					
ANR	5142777	CallExpression	"r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp )"		5142768	1					
ANR	5142778	Callee	r_list_find		5142768	0					
ANR	5142779	Identifier	r_list_find		5142768	0					
ANR	5142780	ArgumentList	t -> nodes		5142768	1					
ANR	5142781	Argument	t -> nodes		5142768	0					
ANR	5142782	PtrMemberAccess	t -> nodes		5142768	0					
ANR	5142783	Identifier	t		5142768	0					
ANR	5142784	Identifier	nodes		5142768	1					
ANR	5142785	Argument	( void * ) ( size_t ) idx		5142768	1					
ANR	5142786	CastExpression	( void * ) ( size_t ) idx		5142768	0					
ANR	5142787	CastTarget	void *		5142768	0					
ANR	5142788	CastExpression	( size_t ) idx		5142768	1					
ANR	5142789	CastTarget	size_t		5142768	0					
ANR	5142790	Identifier	idx		5142768	1					
ANR	5142791	Argument	( RListComparator ) node_cmp		5142768	2					
ANR	5142792	CastExpression	( RListComparator ) node_cmp		5142768	0					
ANR	5142793	CastTarget	RListComparator		5142768	0					
ANR	5142794	Identifier	node_cmp		5142768	1					
ANR	5142795	IfStatement	if ( ! it )		5142768	1					
ANR	5142796	Condition	! it	125:5:2753:2755	5142768	0	True				
ANR	5142797	UnaryOperationExpression	! it		5142768	0					
ANR	5142798	UnaryOperator	!		5142768	0					
ANR	5142799	Identifier	it		5142768	1					
ANR	5142800	CompoundStatement		3:10:100:100	5142768	1					
ANR	5142801	ReturnStatement	return NULL ;	126:2:2762:2773	5142768	0	True				
ANR	5142802	Identifier	NULL		5142768	0					
ANR	5142803	ReturnStatement	return ( RGraphNode * ) it -> data ;	128:1:2779:2808	5142768	2	True				
ANR	5142804	CastExpression	( RGraphNode * ) it -> data		5142768	0					
ANR	5142805	CastTarget	RGraphNode *		5142768	0					
ANR	5142806	PtrMemberAccess	it -> data		5142768	1					
ANR	5142807	Identifier	it		5142768	0					
ANR	5142808	Identifier	data		5142768	1					
ANR	5142809	ReturnType	R_API RGraphNode *		5142768	1					
ANR	5142810	Identifier	r_graph_get_node		5142768	2					
ANR	5142811	ParameterList	"const RGraph * t , unsigned int idx"		5142768	3					
ANR	5142812	Parameter	const RGraph * t	123:36:2622:2636	5142768	0	True				
ANR	5142813	ParameterType	const RGraph *		5142768	0					
ANR	5142814	Identifier	t		5142768	1					
ANR	5142815	Parameter	unsigned int idx	123:53:2639:2654	5142768	1	True				
ANR	5142816	ParameterType	unsigned int		5142768	0					
ANR	5142817	Identifier	idx		5142768	1					
ANR	5142818	CFGEntryNode	ENTRY		5142768		True				
ANR	5142819	CFGExitNode	EXIT		5142768		True				
ANR	5142820	Symbol	r_list_find		5142768						
ANR	5142821	Symbol	* it		5142768						
ANR	5142822	Symbol	NULL		5142768						
ANR	5142823	Symbol	t		5142768						
ANR	5142824	Symbol	t -> nodes		5142768						
ANR	5142825	Symbol	it -> data		5142768						
ANR	5142826	Symbol	it		5142768						
ANR	5142827	Symbol	idx		5142768						
ANR	5142828	Symbol	node_cmp		5142768						
ANR	5142829	Symbol	* t		5142768						
ANR	5142830	Function	r_graph_node_iter	131:0:2813:2966							
ANR	5142831	FunctionDef	"r_graph_node_iter (const RGraph * t , unsigned int idx)"		5142830	0					
ANR	5142832	CompoundStatement		131:71:2884:2966	5142830	0					
ANR	5142833	ReturnStatement	"return r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp ) ;"	132:1:2887:2964	5142830	0	True				
ANR	5142834	CallExpression	"r_list_find ( t -> nodes , ( void * ) ( size_t ) idx , ( RListComparator ) node_cmp )"		5142830	0					
ANR	5142835	Callee	r_list_find		5142830	0					
ANR	5142836	Identifier	r_list_find		5142830	0					
ANR	5142837	ArgumentList	t -> nodes		5142830	1					
ANR	5142838	Argument	t -> nodes		5142830	0					
ANR	5142839	PtrMemberAccess	t -> nodes		5142830	0					
ANR	5142840	Identifier	t		5142830	0					
ANR	5142841	Identifier	nodes		5142830	1					
ANR	5142842	Argument	( void * ) ( size_t ) idx		5142830	1					
ANR	5142843	CastExpression	( void * ) ( size_t ) idx		5142830	0					
ANR	5142844	CastTarget	void *		5142830	0					
ANR	5142845	CastExpression	( size_t ) idx		5142830	1					
ANR	5142846	CastTarget	size_t		5142830	0					
ANR	5142847	Identifier	idx		5142830	1					
ANR	5142848	Argument	( RListComparator ) node_cmp		5142830	2					
ANR	5142849	CastExpression	( RListComparator ) node_cmp		5142830	0					
ANR	5142850	CastTarget	RListComparator		5142830	0					
ANR	5142851	Identifier	node_cmp		5142830	1					
ANR	5142852	ReturnType	R_API RListIter *		5142830	1					
ANR	5142853	Identifier	r_graph_node_iter		5142830	2					
ANR	5142854	ParameterList	"const RGraph * t , unsigned int idx"		5142830	3					
ANR	5142855	Parameter	const RGraph * t	131:36:2849:2863	5142830	0	True				
ANR	5142856	ParameterType	const RGraph *		5142830	0					
ANR	5142857	Identifier	t		5142830	1					
ANR	5142858	Parameter	unsigned int idx	131:53:2866:2881	5142830	1	True				
ANR	5142859	ParameterType	unsigned int		5142830	0					
ANR	5142860	Identifier	idx		5142830	1					
ANR	5142861	CFGEntryNode	ENTRY		5142830		True				
ANR	5142862	CFGExitNode	EXIT		5142830		True				
ANR	5142863	Symbol	r_list_find		5142830						
ANR	5142864	Symbol	t		5142830						
ANR	5142865	Symbol	t -> nodes		5142830						
ANR	5142866	Symbol	idx		5142830						
ANR	5142867	Symbol	node_cmp		5142830						
ANR	5142868	Symbol	* t		5142830						
ANR	5142869	Function	r_graph_reset	135:0:2969:3193							
ANR	5142870	FunctionDef	r_graph_reset (RGraph * t)		5142869	0					
ANR	5142871	CompoundStatement		135:37:3006:3193	5142869	0					
ANR	5142872	ExpressionStatement	r_list_free ( t -> nodes )	136:1:3009:3031	5142869	0	True				
ANR	5142873	CallExpression	r_list_free ( t -> nodes )		5142869	0					
ANR	5142874	Callee	r_list_free		5142869	0					
ANR	5142875	Identifier	r_list_free		5142869	0					
ANR	5142876	ArgumentList	t -> nodes		5142869	1					
ANR	5142877	Argument	t -> nodes		5142869	0					
ANR	5142878	PtrMemberAccess	t -> nodes		5142869	0					
ANR	5142879	Identifier	t		5142869	0					
ANR	5142880	Identifier	nodes		5142869	1					
ANR	5142881	ExpressionStatement	t -> nodes = r_list_new ( )	137:1:3034:3058	5142869	1	True				
ANR	5142882	AssignmentExpression	t -> nodes = r_list_new ( )		5142869	0		=			
ANR	5142883	PtrMemberAccess	t -> nodes		5142869	0					
ANR	5142884	Identifier	t		5142869	0					
ANR	5142885	Identifier	nodes		5142869	1					
ANR	5142886	CallExpression	r_list_new ( )		5142869	1					
ANR	5142887	Callee	r_list_new		5142869	0					
ANR	5142888	Identifier	r_list_new		5142869	0					
ANR	5142889	ArgumentList			5142869	1					
ANR	5142890	IfStatement	if ( ! t -> nodes )		5142869	2					
ANR	5142891	Condition	! t -> nodes	138:5:3065:3073	5142869	0	True				
ANR	5142892	UnaryOperationExpression	! t -> nodes		5142869	0					
ANR	5142893	UnaryOperator	!		5142869	0					
ANR	5142894	PtrMemberAccess	t -> nodes		5142869	1					
ANR	5142895	Identifier	t		5142869	0					
ANR	5142896	Identifier	nodes		5142869	1					
ANR	5142897	CompoundStatement		4:16:69:69	5142869	1					
ANR	5142898	ReturnStatement	return ;	139:2:3080:3086	5142869	0	True				
ANR	5142899	ExpressionStatement	t -> nodes -> free = ( RListFree ) r_graph_node_free	141:1:3092:3137	5142869	3	True				
ANR	5142900	AssignmentExpression	t -> nodes -> free = ( RListFree ) r_graph_node_free		5142869	0		=			
ANR	5142901	PtrMemberAccess	t -> nodes -> free		5142869	0					
ANR	5142902	PtrMemberAccess	t -> nodes		5142869	0					
ANR	5142903	Identifier	t		5142869	0					
ANR	5142904	Identifier	nodes		5142869	1					
ANR	5142905	Identifier	free		5142869	1					
ANR	5142906	CastExpression	( RListFree ) r_graph_node_free		5142869	1					
ANR	5142907	CastTarget	RListFree		5142869	0					
ANR	5142908	Identifier	r_graph_node_free		5142869	1					
ANR	5142909	ExpressionStatement	t -> n_nodes = 0	142:1:3140:3154	5142869	4	True				
ANR	5142910	AssignmentExpression	t -> n_nodes = 0		5142869	0		=			
ANR	5142911	PtrMemberAccess	t -> n_nodes		5142869	0					
ANR	5142912	Identifier	t		5142869	0					
ANR	5142913	Identifier	n_nodes		5142869	1					
ANR	5142914	PrimaryExpression	0		5142869	1					
ANR	5142915	ExpressionStatement	t -> n_edges = 0	143:1:3157:3171	5142869	5	True				
ANR	5142916	AssignmentExpression	t -> n_edges = 0		5142869	0		=			
ANR	5142917	PtrMemberAccess	t -> n_edges		5142869	0					
ANR	5142918	Identifier	t		5142869	0					
ANR	5142919	Identifier	n_edges		5142869	1					
ANR	5142920	PrimaryExpression	0		5142869	1					
ANR	5142921	ExpressionStatement	t -> last_index = 0	144:1:3174:3191	5142869	6	True				
ANR	5142922	AssignmentExpression	t -> last_index = 0		5142869	0		=			
ANR	5142923	PtrMemberAccess	t -> last_index		5142869	0					
ANR	5142924	Identifier	t		5142869	0					
ANR	5142925	Identifier	last_index		5142869	1					
ANR	5142926	PrimaryExpression	0		5142869	1					
ANR	5142927	ReturnType	R_API void		5142869	1					
ANR	5142928	Identifier	r_graph_reset		5142869	2					
ANR	5142929	ParameterList	RGraph * t		5142869	3					
ANR	5142930	Parameter	RGraph * t	135:26:2995:3003	5142869	0	True				
ANR	5142931	ParameterType	RGraph *		5142869	0					
ANR	5142932	Identifier	t		5142869	1					
ANR	5142933	CFGEntryNode	ENTRY		5142869		True				
ANR	5142934	CFGExitNode	EXIT		5142869		True				
ANR	5142935	Symbol	* t -> nodes		5142869						
ANR	5142936	Symbol	t		5142869						
ANR	5142937	Symbol	t -> nodes		5142869						
ANR	5142938	Symbol	* * t		5142869						
ANR	5142939	Symbol	t -> last_index		5142869						
ANR	5142940	Symbol	t -> nodes -> free		5142869						
ANR	5142941	Symbol	t -> n_edges		5142869						
ANR	5142942	Symbol	r_graph_node_free		5142869						
ANR	5142943	Symbol	* t		5142869						
ANR	5142944	Symbol	r_list_new		5142869						
ANR	5142945	Symbol	t -> n_nodes		5142869						
ANR	5142946	Function	r_graph_add_node	147:0:3196:3440							
ANR	5142947	FunctionDef	"r_graph_add_node (RGraph * t , void * data)"		5142946	0					
ANR	5142948	CompoundStatement		147:59:3255:3440	5142946	0					
ANR	5142949	IfStatement	if ( ! t )		5142946	0					
ANR	5142950	Condition	! t	148:5:3262:3263	5142946	0	True				
ANR	5142951	UnaryOperationExpression	! t		5142946	0					
ANR	5142952	UnaryOperator	!		5142946	0					
ANR	5142953	Identifier	t		5142946	1					
ANR	5142954	CompoundStatement		2:9:10:10	5142946	1					
ANR	5142955	ReturnStatement	return NULL ;	149:2:3270:3281	5142946	0	True				
ANR	5142956	Identifier	NULL		5142946	0					
ANR	5142957	IdentifierDeclStatement	RGraphNode * n = r_graph_node_new ( data ) ;	151:1:3287:3326	5142946	1	True				
ANR	5142958	IdentifierDecl	* n = r_graph_node_new ( data )		5142946	0					
ANR	5142959	IdentifierDeclType	RGraphNode *		5142946	0					
ANR	5142960	Identifier	n		5142946	1					
ANR	5142961	AssignmentExpression	* n = r_graph_node_new ( data )		5142946	2		=			
ANR	5142962	Identifier	n		5142946	0					
ANR	5142963	CallExpression	r_graph_node_new ( data )		5142946	1					
ANR	5142964	Callee	r_graph_node_new		5142946	0					
ANR	5142965	Identifier	r_graph_node_new		5142946	0					
ANR	5142966	ArgumentList	data		5142946	1					
ANR	5142967	Argument	data		5142946	0					
ANR	5142968	Identifier	data		5142946	0					
ANR	5142969	IfStatement	if ( ! n )		5142946	2					
ANR	5142970	Condition	! n	152:5:3333:3334	5142946	0	True				
ANR	5142971	UnaryOperationExpression	! n		5142946	0					
ANR	5142972	UnaryOperator	!		5142946	0					
ANR	5142973	Identifier	n		5142946	1					
ANR	5142974	CompoundStatement		6:9:81:81	5142946	1					
ANR	5142975	ReturnStatement	return NULL ;	153:2:3341:3352	5142946	0	True				
ANR	5142976	Identifier	NULL		5142946	0					
ANR	5142977	ExpressionStatement	n -> idx = t -> last_index ++	155:1:3358:3382	5142946	3	True				
ANR	5142978	AssignmentExpression	n -> idx = t -> last_index ++		5142946	0		=			
ANR	5142979	PtrMemberAccess	n -> idx		5142946	0					
ANR	5142980	Identifier	n		5142946	0					
ANR	5142981	Identifier	idx		5142946	1					
ANR	5142982	PostIncDecOperationExpression	t -> last_index ++		5142946	1					
ANR	5142983	PtrMemberAccess	t -> last_index		5142946	0					
ANR	5142984	Identifier	t		5142946	0					
ANR	5142985	Identifier	last_index		5142946	1					
ANR	5142986	IncDec	++		5142946	1					
ANR	5142987	ExpressionStatement	"r_list_append ( t -> nodes , n )"	156:1:3385:3412	5142946	4	True				
ANR	5142988	CallExpression	"r_list_append ( t -> nodes , n )"		5142946	0					
ANR	5142989	Callee	r_list_append		5142946	0					
ANR	5142990	Identifier	r_list_append		5142946	0					
ANR	5142991	ArgumentList	t -> nodes		5142946	1					
ANR	5142992	Argument	t -> nodes		5142946	0					
ANR	5142993	PtrMemberAccess	t -> nodes		5142946	0					
ANR	5142994	Identifier	t		5142946	0					
ANR	5142995	Identifier	nodes		5142946	1					
ANR	5142996	Argument	n		5142946	1					
ANR	5142997	Identifier	n		5142946	0					
ANR	5142998	ExpressionStatement	t -> n_nodes ++	157:1:3415:3427	5142946	5	True				
ANR	5142999	PostIncDecOperationExpression	t -> n_nodes ++		5142946	0					
ANR	5143000	PtrMemberAccess	t -> n_nodes		5142946	0					
ANR	5143001	Identifier	t		5142946	0					
ANR	5143002	Identifier	n_nodes		5142946	1					
ANR	5143003	IncDec	++		5142946	1					
ANR	5143004	ReturnStatement	return n ;	158:1:3430:3438	5142946	6	True				
ANR	5143005	Identifier	n		5142946	0					
ANR	5143006	ReturnType	R_API RGraphNode *		5142946	1					
ANR	5143007	Identifier	r_graph_add_node		5142946	2					
ANR	5143008	ParameterList	"RGraph * t , void * data"		5142946	3					
ANR	5143009	Parameter	RGraph * t	147:36:3232:3240	5142946	0	True				
ANR	5143010	ParameterType	RGraph *		5142946	0					
ANR	5143011	Identifier	t		5142946	1					
ANR	5143012	Parameter	void * data	147:47:3243:3252	5142946	1	True				
ANR	5143013	ParameterType	void *		5142946	0					
ANR	5143014	Identifier	data		5142946	1					
ANR	5143015	CFGEntryNode	ENTRY		5142946		True				
ANR	5143016	CFGExitNode	EXIT		5142946		True				
ANR	5143017	Symbol	NULL		5142946						
ANR	5143018	Symbol	t		5142946						
ANR	5143019	Symbol	data		5142946						
ANR	5143020	Symbol	r_graph_node_new		5142946						
ANR	5143021	Symbol	t -> nodes		5142946						
ANR	5143022	Symbol	* n		5142946						
ANR	5143023	Symbol	t -> last_index		5142946						
ANR	5143024	Symbol	n -> idx		5142946						
ANR	5143025	Symbol	n		5142946						
ANR	5143026	Symbol	* t		5142946						
ANR	5143027	Symbol	t -> n_nodes		5142946						
ANR	5143028	Function	r_graph_del_node	163:0:3571:4028							
ANR	5143029	FunctionDef	"r_graph_del_node (RGraph * t , RGraphNode * n)"		5143028	0					
ANR	5143030	CompoundStatement		163:54:3625:4028	5143028	0					
ANR	5143031	IdentifierDeclStatement	RGraphNode * gn ;	164:1:3628:3642	5143028	0	True				
ANR	5143032	IdentifierDecl	* gn		5143028	0					
ANR	5143033	IdentifierDeclType	RGraphNode *		5143028	0					
ANR	5143034	Identifier	gn		5143028	1					
ANR	5143035	IdentifierDeclStatement	RListIter * it ;	165:1:3645:3658	5143028	1	True				
ANR	5143036	IdentifierDecl	* it		5143028	0					
ANR	5143037	IdentifierDeclType	RListIter *		5143028	0					
ANR	5143038	Identifier	it		5143028	1					
ANR	5143039	IfStatement	if ( ! n )		5143028	2					
ANR	5143040	Condition	! n	166:5:3665:3666	5143028	0	True				
ANR	5143041	UnaryOperationExpression	! n		5143028	0					
ANR	5143042	UnaryOperator	!		5143028	0					
ANR	5143043	Identifier	n		5143028	1					
ANR	5143044	CompoundStatement		4:9:43:43	5143028	1					
ANR	5143045	ReturnStatement	return ;	167:2:3673:3679	5143028	0	True				
ANR	5143046	Statement	r_list_foreach	169:1:3685:3698	5143028	3	True				
ANR	5143047	Statement	(	169:16:3700:3700	5143028	4	True				
ANR	5143048	Statement	n	169:17:3701:3701	5143028	5	True				
ANR	5143049	Statement	->	169:18:3702:3703	5143028	6	True				
ANR	5143050	Statement	in_nodes	169:20:3704:3711	5143028	7	True				
ANR	5143051	Statement	","	169:28:3712:3712	5143028	8	True				
ANR	5143052	Statement	it	169:30:3714:3715	5143028	9	True				
ANR	5143053	Statement	","	169:32:3716:3716	5143028	10	True				
ANR	5143054	Statement	gn	169:34:3718:3719	5143028	11	True				
ANR	5143055	Statement	)	169:36:3720:3720	5143028	12	True				
ANR	5143056	CompoundStatement		7:38:96:96	5143028	13					
ANR	5143057	ExpressionStatement	"r_list_delete_data ( gn -> out_nodes , n )"	170:2:3726:3763	5143028	0	True				
ANR	5143058	CallExpression	"r_list_delete_data ( gn -> out_nodes , n )"		5143028	0					
ANR	5143059	Callee	r_list_delete_data		5143028	0					
ANR	5143060	Identifier	r_list_delete_data		5143028	0					
ANR	5143061	ArgumentList	gn -> out_nodes		5143028	1					
ANR	5143062	Argument	gn -> out_nodes		5143028	0					
ANR	5143063	PtrMemberAccess	gn -> out_nodes		5143028	0					
ANR	5143064	Identifier	gn		5143028	0					
ANR	5143065	Identifier	out_nodes		5143028	1					
ANR	5143066	Argument	n		5143028	1					
ANR	5143067	Identifier	n		5143028	0					
ANR	5143068	ExpressionStatement	"r_list_delete_data ( gn -> all_neighbours , n )"	171:2:3767:3809	5143028	1	True				
ANR	5143069	CallExpression	"r_list_delete_data ( gn -> all_neighbours , n )"		5143028	0					
ANR	5143070	Callee	r_list_delete_data		5143028	0					
ANR	5143071	Identifier	r_list_delete_data		5143028	0					
ANR	5143072	ArgumentList	gn -> all_neighbours		5143028	1					
ANR	5143073	Argument	gn -> all_neighbours		5143028	0					
ANR	5143074	PtrMemberAccess	gn -> all_neighbours		5143028	0					
ANR	5143075	Identifier	gn		5143028	0					
ANR	5143076	Identifier	all_neighbours		5143028	1					
ANR	5143077	Argument	n		5143028	1					
ANR	5143078	Identifier	n		5143028	0					
ANR	5143079	ExpressionStatement	t -> n_edges --	172:2:3813:3825	5143028	2	True				
ANR	5143080	PostIncDecOperationExpression	t -> n_edges --		5143028	0					
ANR	5143081	PtrMemberAccess	t -> n_edges		5143028	0					
ANR	5143082	Identifier	t		5143028	0					
ANR	5143083	Identifier	n_edges		5143028	1					
ANR	5143084	IncDec	--		5143028	1					
ANR	5143085	Statement	r_list_foreach	175:1:3832:3845	5143028	14	True				
ANR	5143086	Statement	(	175:16:3847:3847	5143028	15	True				
ANR	5143087	Statement	n	175:17:3848:3848	5143028	16	True				
ANR	5143088	Statement	->	175:18:3849:3850	5143028	17	True				
ANR	5143089	Statement	out_nodes	175:20:3851:3859	5143028	18	True				
ANR	5143090	Statement	","	175:29:3860:3860	5143028	19	True				
ANR	5143091	Statement	it	175:31:3862:3863	5143028	20	True				
ANR	5143092	Statement	","	175:33:3864:3864	5143028	21	True				
ANR	5143093	Statement	gn	175:35:3866:3867	5143028	22	True				
ANR	5143094	Statement	)	175:37:3868:3868	5143028	23	True				
ANR	5143095	CompoundStatement		13:39:244:244	5143028	24					
ANR	5143096	ExpressionStatement	"r_list_delete_data ( gn -> in_nodes , n )"	176:2:3874:3910	5143028	0	True				
ANR	5143097	CallExpression	"r_list_delete_data ( gn -> in_nodes , n )"		5143028	0					
ANR	5143098	Callee	r_list_delete_data		5143028	0					
ANR	5143099	Identifier	r_list_delete_data		5143028	0					
ANR	5143100	ArgumentList	gn -> in_nodes		5143028	1					
ANR	5143101	Argument	gn -> in_nodes		5143028	0					
ANR	5143102	PtrMemberAccess	gn -> in_nodes		5143028	0					
ANR	5143103	Identifier	gn		5143028	0					
ANR	5143104	Identifier	in_nodes		5143028	1					
ANR	5143105	Argument	n		5143028	1					
ANR	5143106	Identifier	n		5143028	0					
ANR	5143107	ExpressionStatement	"r_list_delete_data ( gn -> all_neighbours , n )"	177:2:3914:3956	5143028	1	True				
ANR	5143108	CallExpression	"r_list_delete_data ( gn -> all_neighbours , n )"		5143028	0					
ANR	5143109	Callee	r_list_delete_data		5143028	0					
ANR	5143110	Identifier	r_list_delete_data		5143028	0					
ANR	5143111	ArgumentList	gn -> all_neighbours		5143028	1					
ANR	5143112	Argument	gn -> all_neighbours		5143028	0					
ANR	5143113	PtrMemberAccess	gn -> all_neighbours		5143028	0					
ANR	5143114	Identifier	gn		5143028	0					
ANR	5143115	Identifier	all_neighbours		5143028	1					
ANR	5143116	Argument	n		5143028	1					
ANR	5143117	Identifier	n		5143028	0					
ANR	5143118	ExpressionStatement	t -> n_edges --	178:2:3960:3972	5143028	2	True				
ANR	5143119	PostIncDecOperationExpression	t -> n_edges --		5143028	0					
ANR	5143120	PtrMemberAccess	t -> n_edges		5143028	0					
ANR	5143121	Identifier	t		5143028	0					
ANR	5143122	Identifier	n_edges		5143028	1					
ANR	5143123	IncDec	--		5143028	1					
ANR	5143124	ExpressionStatement	"r_list_delete_data ( t -> nodes , n )"	181:1:3979:4011	5143028	25	True				
ANR	5143125	CallExpression	"r_list_delete_data ( t -> nodes , n )"		5143028	0					
ANR	5143126	Callee	r_list_delete_data		5143028	0					
ANR	5143127	Identifier	r_list_delete_data		5143028	0					
ANR	5143128	ArgumentList	t -> nodes		5143028	1					
ANR	5143129	Argument	t -> nodes		5143028	0					
ANR	5143130	PtrMemberAccess	t -> nodes		5143028	0					
ANR	5143131	Identifier	t		5143028	0					
ANR	5143132	Identifier	nodes		5143028	1					
ANR	5143133	Argument	n		5143028	1					
ANR	5143134	Identifier	n		5143028	0					
ANR	5143135	ExpressionStatement	t -> n_nodes --	182:1:4014:4026	5143028	26	True				
ANR	5143136	PostIncDecOperationExpression	t -> n_nodes --		5143028	0					
ANR	5143137	PtrMemberAccess	t -> n_nodes		5143028	0					
ANR	5143138	Identifier	t		5143028	0					
ANR	5143139	Identifier	n_nodes		5143028	1					
ANR	5143140	IncDec	--		5143028	1					
ANR	5143141	ReturnType	R_API void		5143028	1					
ANR	5143142	Identifier	r_graph_del_node		5143028	2					
ANR	5143143	ParameterList	"RGraph * t , RGraphNode * n"		5143028	3					
ANR	5143144	Parameter	RGraph * t	163:28:3599:3607	5143028	0	True				
ANR	5143145	ParameterType	RGraph *		5143028	0					
ANR	5143146	Identifier	t		5143028	1					
ANR	5143147	Parameter	RGraphNode * n	163:39:3610:3622	5143028	1	True				
ANR	5143148	ParameterType	RGraphNode *		5143028	0					
ANR	5143149	Identifier	n		5143028	1					
ANR	5143150	CFGEntryNode	ENTRY		5143028		True				
ANR	5143151	CFGExitNode	EXIT		5143028		True				
ANR	5143152	Symbol	gn -> in_nodes		5143028						
ANR	5143153	Symbol	gn -> all_neighbours		5143028						
ANR	5143154	Symbol	t		5143028						
ANR	5143155	Symbol	gn		5143028						
ANR	5143156	Symbol	t -> nodes		5143028						
ANR	5143157	Symbol	it		5143028						
ANR	5143158	Symbol	t -> n_edges		5143028						
ANR	5143159	Symbol	gn -> out_nodes		5143028						
ANR	5143160	Symbol	n		5143028						
ANR	5143161	Symbol	* gn		5143028						
ANR	5143162	Symbol	* t		5143028						
ANR	5143163	Symbol	t -> n_nodes		5143028						
ANR	5143164	Function	r_graph_add_edge	185:0:4031:4147							
ANR	5143165	FunctionDef	"r_graph_add_edge (RGraph * t , RGraphNode * from , RGraphNode * to)"		5143164	0					
ANR	5143166	CompoundStatement		185:74:4105:4147	5143164	0					
ANR	5143167	ExpressionStatement	"r_graph_add_edge_at ( t , from , to , - 1 )"	186:1:4108:4145	5143164	0	True				
ANR	5143168	CallExpression	"r_graph_add_edge_at ( t , from , to , - 1 )"		5143164	0					
ANR	5143169	Callee	r_graph_add_edge_at		5143164	0					
ANR	5143170	Identifier	r_graph_add_edge_at		5143164	0					
ANR	5143171	ArgumentList	t		5143164	1					
ANR	5143172	Argument	t		5143164	0					
ANR	5143173	Identifier	t		5143164	0					
ANR	5143174	Argument	from		5143164	1					
ANR	5143175	Identifier	from		5143164	0					
ANR	5143176	Argument	to		5143164	2					
ANR	5143177	Identifier	to		5143164	0					
ANR	5143178	Argument	- 1		5143164	3					
ANR	5143179	UnaryOperationExpression	- 1		5143164	0					
ANR	5143180	UnaryOperator	-		5143164	0					
ANR	5143181	PrimaryExpression	1		5143164	1					
ANR	5143182	ReturnType	R_API void		5143164	1					
ANR	5143183	Identifier	r_graph_add_edge		5143164	2					
ANR	5143184	ParameterList	"RGraph * t , RGraphNode * from , RGraphNode * to"		5143164	3					
ANR	5143185	Parameter	RGraph * t	185:29:4060:4068	5143164	0	True				
ANR	5143186	ParameterType	RGraph *		5143164	0					
ANR	5143187	Identifier	t		5143164	1					
ANR	5143188	Parameter	RGraphNode * from	185:40:4071:4086	5143164	1	True				
ANR	5143189	ParameterType	RGraphNode *		5143164	0					
ANR	5143190	Identifier	from		5143164	1					
ANR	5143191	Parameter	RGraphNode * to	185:58:4089:4102	5143164	2	True				
ANR	5143192	ParameterType	RGraphNode *		5143164	0					
ANR	5143193	Identifier	to		5143164	1					
ANR	5143194	CFGEntryNode	ENTRY		5143164		True				
ANR	5143195	CFGExitNode	EXIT		5143164		True				
ANR	5143196	Symbol	t		5143164						
ANR	5143197	Symbol	from		5143164						
ANR	5143198	Symbol	to		5143164						
ANR	5143199	Function	r_graph_add_edge_at	189:0:4150:4446							
ANR	5143200	FunctionDef	"r_graph_add_edge_at (RGraph * t , RGraphNode * from , RGraphNode * to , int nth)"		5143199	0					
ANR	5143201	CompoundStatement		189:86:4236:4446	5143199	0					
ANR	5143202	IfStatement	if ( from && to )		5143199	0					
ANR	5143203	Condition	from && to	190:5:4243:4252	5143199	0	True				
ANR	5143204	AndExpression	from && to		5143199	0		&&			
ANR	5143205	Identifier	from		5143199	0					
ANR	5143206	Identifier	to		5143199	1					
ANR	5143207	CompoundStatement		2:17:18:18	5143199	1					
ANR	5143208	ExpressionStatement	"r_list_insert ( from -> out_nodes , nth , to )"	191:2:4259:4299	5143199	0	True				
ANR	5143209	CallExpression	"r_list_insert ( from -> out_nodes , nth , to )"		5143199	0					
ANR	5143210	Callee	r_list_insert		5143199	0					
ANR	5143211	Identifier	r_list_insert		5143199	0					
ANR	5143212	ArgumentList	from -> out_nodes		5143199	1					
ANR	5143213	Argument	from -> out_nodes		5143199	0					
ANR	5143214	PtrMemberAccess	from -> out_nodes		5143199	0					
ANR	5143215	Identifier	from		5143199	0					
ANR	5143216	Identifier	out_nodes		5143199	1					
ANR	5143217	Argument	nth		5143199	1					
ANR	5143218	Identifier	nth		5143199	0					
ANR	5143219	Argument	to		5143199	2					
ANR	5143220	Identifier	to		5143199	0					
ANR	5143221	ExpressionStatement	"r_list_append ( from -> all_neighbours , to )"	192:2:4303:4343	5143199	1	True				
ANR	5143222	CallExpression	"r_list_append ( from -> all_neighbours , to )"		5143199	0					
ANR	5143223	Callee	r_list_append		5143199	0					
ANR	5143224	Identifier	r_list_append		5143199	0					
ANR	5143225	ArgumentList	from -> all_neighbours		5143199	1					
ANR	5143226	Argument	from -> all_neighbours		5143199	0					
ANR	5143227	PtrMemberAccess	from -> all_neighbours		5143199	0					
ANR	5143228	Identifier	from		5143199	0					
ANR	5143229	Identifier	all_neighbours		5143199	1					
ANR	5143230	Argument	to		5143199	1					
ANR	5143231	Identifier	to		5143199	0					
ANR	5143232	ExpressionStatement	"r_list_append ( to -> in_nodes , from )"	193:2:4347:4381	5143199	2	True				
ANR	5143233	CallExpression	"r_list_append ( to -> in_nodes , from )"		5143199	0					
ANR	5143234	Callee	r_list_append		5143199	0					
ANR	5143235	Identifier	r_list_append		5143199	0					
ANR	5143236	ArgumentList	to -> in_nodes		5143199	1					
ANR	5143237	Argument	to -> in_nodes		5143199	0					
ANR	5143238	PtrMemberAccess	to -> in_nodes		5143199	0					
ANR	5143239	Identifier	to		5143199	0					
ANR	5143240	Identifier	in_nodes		5143199	1					
ANR	5143241	Argument	from		5143199	1					
ANR	5143242	Identifier	from		5143199	0					
ANR	5143243	ExpressionStatement	"r_list_append ( to -> all_neighbours , from )"	194:2:4385:4425	5143199	3	True				
ANR	5143244	CallExpression	"r_list_append ( to -> all_neighbours , from )"		5143199	0					
ANR	5143245	Callee	r_list_append		5143199	0					
ANR	5143246	Identifier	r_list_append		5143199	0					
ANR	5143247	ArgumentList	to -> all_neighbours		5143199	1					
ANR	5143248	Argument	to -> all_neighbours		5143199	0					
ANR	5143249	PtrMemberAccess	to -> all_neighbours		5143199	0					
ANR	5143250	Identifier	to		5143199	0					
ANR	5143251	Identifier	all_neighbours		5143199	1					
ANR	5143252	Argument	from		5143199	1					
ANR	5143253	Identifier	from		5143199	0					
ANR	5143254	ExpressionStatement	t -> n_edges ++	195:2:4429:4441	5143199	4	True				
ANR	5143255	PostIncDecOperationExpression	t -> n_edges ++		5143199	0					
ANR	5143256	PtrMemberAccess	t -> n_edges		5143199	0					
ANR	5143257	Identifier	t		5143199	0					
ANR	5143258	Identifier	n_edges		5143199	1					
ANR	5143259	IncDec	++		5143199	1					
ANR	5143260	ReturnType	R_API void		5143199	1					
ANR	5143261	Identifier	r_graph_add_edge_at		5143199	2					
ANR	5143262	ParameterList	"RGraph * t , RGraphNode * from , RGraphNode * to , int nth"		5143199	3					
ANR	5143263	Parameter	RGraph * t	189:32:4182:4190	5143199	0	True				
ANR	5143264	ParameterType	RGraph *		5143199	0					
ANR	5143265	Identifier	t		5143199	1					
ANR	5143266	Parameter	RGraphNode * from	189:43:4193:4208	5143199	1	True				
ANR	5143267	ParameterType	RGraphNode *		5143199	0					
ANR	5143268	Identifier	from		5143199	1					
ANR	5143269	Parameter	RGraphNode * to	189:61:4211:4224	5143199	2	True				
ANR	5143270	ParameterType	RGraphNode *		5143199	0					
ANR	5143271	Identifier	to		5143199	1					
ANR	5143272	Parameter	int nth	189:77:4227:4233	5143199	3	True				
ANR	5143273	ParameterType	int		5143199	0					
ANR	5143274	Identifier	nth		5143199	1					
ANR	5143275	CFGEntryNode	ENTRY		5143199		True				
ANR	5143276	CFGExitNode	EXIT		5143199		True				
ANR	5143277	Symbol	* to		5143199						
ANR	5143278	Symbol	nth		5143199						
ANR	5143279	Symbol	t		5143199						
ANR	5143280	Symbol	to -> in_nodes		5143199						
ANR	5143281	Symbol	to -> all_neighbours		5143199						
ANR	5143282	Symbol	from		5143199						
ANR	5143283	Symbol	to		5143199						
ANR	5143284	Symbol	t -> n_edges		5143199						
ANR	5143285	Symbol	* from		5143199						
ANR	5143286	Symbol	from -> all_neighbours		5143199						
ANR	5143287	Symbol	* t		5143199						
ANR	5143288	Symbol	from -> out_nodes		5143199						
ANR	5143289	Function	r_graph_del_edge	199:0:4449:4790							
ANR	5143290	FunctionDef	"r_graph_del_edge (RGraph * t , RGraphNode * from , RGraphNode * to)"		5143289	0					
ANR	5143291	CompoundStatement		199:74:4523:4790	5143289	0					
ANR	5143292	IfStatement	"if ( ! from || ! to || ! r_graph_adjacent ( t , from , to ) )"		5143289	0					
ANR	5143293	Condition	"! from || ! to || ! r_graph_adjacent ( t , from , to )"	200:5:4530:4576	5143289	0	True				
ANR	5143294	OrExpression	"! from || ! to || ! r_graph_adjacent ( t , from , to )"		5143289	0		||			
ANR	5143295	UnaryOperationExpression	! from		5143289	0					
ANR	5143296	UnaryOperator	!		5143289	0					
ANR	5143297	Identifier	from		5143289	1					
ANR	5143298	OrExpression	"! to || ! r_graph_adjacent ( t , from , to )"		5143289	1		||			
ANR	5143299	UnaryOperationExpression	! to		5143289	0					
ANR	5143300	UnaryOperator	!		5143289	0					
ANR	5143301	Identifier	to		5143289	1					
ANR	5143302	UnaryOperationExpression	"! r_graph_adjacent ( t , from , to )"		5143289	1					
ANR	5143303	UnaryOperator	!		5143289	0					
ANR	5143304	CallExpression	"r_graph_adjacent ( t , from , to )"		5143289	1					
ANR	5143305	Callee	r_graph_adjacent		5143289	0					
ANR	5143306	Identifier	r_graph_adjacent		5143289	0					
ANR	5143307	ArgumentList	t		5143289	1					
ANR	5143308	Argument	t		5143289	0					
ANR	5143309	Identifier	t		5143289	0					
ANR	5143310	Argument	from		5143289	1					
ANR	5143311	Identifier	from		5143289	0					
ANR	5143312	Argument	to		5143289	2					
ANR	5143313	Identifier	to		5143289	0					
ANR	5143314	CompoundStatement		2:54:55:55	5143289	1					
ANR	5143315	ReturnStatement	return ;	201:2:4583:4589	5143289	0	True				
ANR	5143316	ExpressionStatement	"r_list_delete_data ( from -> out_nodes , to )"	203:1:4595:4635	5143289	1	True				
ANR	5143317	CallExpression	"r_list_delete_data ( from -> out_nodes , to )"		5143289	0					
ANR	5143318	Callee	r_list_delete_data		5143289	0					
ANR	5143319	Identifier	r_list_delete_data		5143289	0					
ANR	5143320	ArgumentList	from -> out_nodes		5143289	1					
ANR	5143321	Argument	from -> out_nodes		5143289	0					
ANR	5143322	PtrMemberAccess	from -> out_nodes		5143289	0					
ANR	5143323	Identifier	from		5143289	0					
ANR	5143324	Identifier	out_nodes		5143289	1					
ANR	5143325	Argument	to		5143289	1					
ANR	5143326	Identifier	to		5143289	0					
ANR	5143327	ExpressionStatement	"r_list_delete_data ( from -> all_neighbours , to )"	204:1:4638:4683	5143289	2	True				
ANR	5143328	CallExpression	"r_list_delete_data ( from -> all_neighbours , to )"		5143289	0					
ANR	5143329	Callee	r_list_delete_data		5143289	0					
ANR	5143330	Identifier	r_list_delete_data		5143289	0					
ANR	5143331	ArgumentList	from -> all_neighbours		5143289	1					
ANR	5143332	Argument	from -> all_neighbours		5143289	0					
ANR	5143333	PtrMemberAccess	from -> all_neighbours		5143289	0					
ANR	5143334	Identifier	from		5143289	0					
ANR	5143335	Identifier	all_neighbours		5143289	1					
ANR	5143336	Argument	to		5143289	1					
ANR	5143337	Identifier	to		5143289	0					
ANR	5143338	ExpressionStatement	"r_list_delete_data ( to -> in_nodes , from )"	205:1:4686:4725	5143289	3	True				
ANR	5143339	CallExpression	"r_list_delete_data ( to -> in_nodes , from )"		5143289	0					
ANR	5143340	Callee	r_list_delete_data		5143289	0					
ANR	5143341	Identifier	r_list_delete_data		5143289	0					
ANR	5143342	ArgumentList	to -> in_nodes		5143289	1					
ANR	5143343	Argument	to -> in_nodes		5143289	0					
ANR	5143344	PtrMemberAccess	to -> in_nodes		5143289	0					
ANR	5143345	Identifier	to		5143289	0					
ANR	5143346	Identifier	in_nodes		5143289	1					
ANR	5143347	Argument	from		5143289	1					
ANR	5143348	Identifier	from		5143289	0					
ANR	5143349	ExpressionStatement	"r_list_delete_data ( to -> all_neighbours , from )"	206:1:4728:4773	5143289	4	True				
ANR	5143350	CallExpression	"r_list_delete_data ( to -> all_neighbours , from )"		5143289	0					
ANR	5143351	Callee	r_list_delete_data		5143289	0					
ANR	5143352	Identifier	r_list_delete_data		5143289	0					
ANR	5143353	ArgumentList	to -> all_neighbours		5143289	1					
ANR	5143354	Argument	to -> all_neighbours		5143289	0					
ANR	5143355	PtrMemberAccess	to -> all_neighbours		5143289	0					
ANR	5143356	Identifier	to		5143289	0					
ANR	5143357	Identifier	all_neighbours		5143289	1					
ANR	5143358	Argument	from		5143289	1					
ANR	5143359	Identifier	from		5143289	0					
ANR	5143360	ExpressionStatement	t -> n_edges --	207:1:4776:4788	5143289	5	True				
ANR	5143361	PostIncDecOperationExpression	t -> n_edges --		5143289	0					
ANR	5143362	PtrMemberAccess	t -> n_edges		5143289	0					
ANR	5143363	Identifier	t		5143289	0					
ANR	5143364	Identifier	n_edges		5143289	1					
ANR	5143365	IncDec	--		5143289	1					
ANR	5143366	ReturnType	R_API void		5143289	1					
ANR	5143367	Identifier	r_graph_del_edge		5143289	2					
ANR	5143368	ParameterList	"RGraph * t , RGraphNode * from , RGraphNode * to"		5143289	3					
ANR	5143369	Parameter	RGraph * t	199:29:4478:4486	5143289	0	True				
ANR	5143370	ParameterType	RGraph *		5143289	0					
ANR	5143371	Identifier	t		5143289	1					
ANR	5143372	Parameter	RGraphNode * from	199:40:4489:4504	5143289	1	True				
ANR	5143373	ParameterType	RGraphNode *		5143289	0					
ANR	5143374	Identifier	from		5143289	1					
ANR	5143375	Parameter	RGraphNode * to	199:58:4507:4520	5143289	2	True				
ANR	5143376	ParameterType	RGraphNode *		5143289	0					
ANR	5143377	Identifier	to		5143289	1					
ANR	5143378	CFGEntryNode	ENTRY		5143289		True				
ANR	5143379	CFGExitNode	EXIT		5143289		True				
ANR	5143380	Symbol	* to		5143289						
ANR	5143381	Symbol	t		5143289						
ANR	5143382	Symbol	to -> in_nodes		5143289						
ANR	5143383	Symbol	to -> all_neighbours		5143289						
ANR	5143384	Symbol	r_graph_adjacent		5143289						
ANR	5143385	Symbol	from		5143289						
ANR	5143386	Symbol	to		5143289						
ANR	5143387	Symbol	t -> n_edges		5143289						
ANR	5143388	Symbol	* from		5143289						
ANR	5143389	Symbol	from -> all_neighbours		5143289						
ANR	5143390	Symbol	* t		5143289						
ANR	5143391	Symbol	from -> out_nodes		5143289						
ANR	5143392	Function	r_graph_get_neighbours	212:6:4905:5013							
ANR	5143393	FunctionDef	"r_graph_get_neighbours (const RGraph * g , const RGraphNode * n)"		5143392	0					
ANR	5143394	CompoundStatement		212:81:4980:5013	5143392	0					
ANR	5143395	ReturnStatement	return n ? n -> out_nodes : NULL ;	213:1:4983:5011	5143392	0	True				
ANR	5143396	ConditionalExpression	n ? n -> out_nodes : NULL		5143392	0					
ANR	5143397	Condition	n		5143392	0					
ANR	5143398	Identifier	n		5143392	0					
ANR	5143399	PtrMemberAccess	n -> out_nodes		5143392	1					
ANR	5143400	Identifier	n		5143392	0					
ANR	5143401	Identifier	out_nodes		5143392	1					
ANR	5143402	Identifier	NULL		5143392	2					
ANR	5143403	ReturnType	const RList *		5143392	1					
ANR	5143404	Identifier	r_graph_get_neighbours		5143392	2					
ANR	5143405	ParameterList	"const RGraph * g , const RGraphNode * n"		5143392	3					
ANR	5143406	Parameter	const RGraph * g	212:43:4942:4956	5143392	0	True				
ANR	5143407	ParameterType	const RGraph *		5143392	0					
ANR	5143408	Identifier	g		5143392	1					
ANR	5143409	Parameter	const RGraphNode * n	212:60:4959:4977	5143392	1	True				
ANR	5143410	ParameterType	const RGraphNode *		5143392	0					
ANR	5143411	Identifier	n		5143392	1					
ANR	5143412	CFGEntryNode	ENTRY		5143392		True				
ANR	5143413	CFGExitNode	EXIT		5143392		True				
ANR	5143414	Symbol	NULL		5143392						
ANR	5143415	Symbol	g		5143392						
ANR	5143416	Symbol	* n		5143392						
ANR	5143417	Symbol	n -> out_nodes		5143392						
ANR	5143418	Symbol	n		5143392						
ANR	5143419	Function	r_graph_nth_neighbour	218:0:5134:5289							
ANR	5143420	FunctionDef	"r_graph_nth_neighbour (const RGraph * g , const RGraphNode * n , int nth)"		5143419	0					
ANR	5143421	CompoundStatement		218:88:5222:5289	5143419	0					
ANR	5143422	ReturnStatement	"return n ? ( RGraphNode * ) r_list_get_n ( n -> out_nodes , nth ) : NULL ;"	219:1:5225:5287	5143419	0	True				
ANR	5143423	ConditionalExpression	"n ? ( RGraphNode * ) r_list_get_n ( n -> out_nodes , nth ) : NULL"		5143419	0					
ANR	5143424	Condition	n		5143419	0					
ANR	5143425	Identifier	n		5143419	0					
ANR	5143426	CastExpression	"( RGraphNode * ) r_list_get_n ( n -> out_nodes , nth )"		5143419	1					
ANR	5143427	CastTarget	RGraphNode *		5143419	0					
ANR	5143428	CallExpression	"r_list_get_n ( n -> out_nodes , nth )"		5143419	1					
ANR	5143429	Callee	r_list_get_n		5143419	0					
ANR	5143430	Identifier	r_list_get_n		5143419	0					
ANR	5143431	ArgumentList	n -> out_nodes		5143419	1					
ANR	5143432	Argument	n -> out_nodes		5143419	0					
ANR	5143433	PtrMemberAccess	n -> out_nodes		5143419	0					
ANR	5143434	Identifier	n		5143419	0					
ANR	5143435	Identifier	out_nodes		5143419	1					
ANR	5143436	Argument	nth		5143419	1					
ANR	5143437	Identifier	nth		5143419	0					
ANR	5143438	Identifier	NULL		5143419	2					
ANR	5143439	ReturnType	R_API RGraphNode *		5143419	1					
ANR	5143440	Identifier	r_graph_nth_neighbour		5143419	2					
ANR	5143441	ParameterList	"const RGraph * g , const RGraphNode * n , int nth"		5143419	3					
ANR	5143442	Parameter	const RGraph * g	218:41:5175:5189	5143419	0	True				
ANR	5143443	ParameterType	const RGraph *		5143419	0					
ANR	5143444	Identifier	g		5143419	1					
ANR	5143445	Parameter	const RGraphNode * n	218:58:5192:5210	5143419	1	True				
ANR	5143446	ParameterType	const RGraphNode *		5143419	0					
ANR	5143447	Identifier	n		5143419	1					
ANR	5143448	Parameter	int nth	218:79:5213:5219	5143419	2	True				
ANR	5143449	ParameterType	int		5143419	0					
ANR	5143450	Identifier	nth		5143419	1					
ANR	5143451	CFGEntryNode	ENTRY		5143419		True				
ANR	5143452	CFGExitNode	EXIT		5143419		True				
ANR	5143453	Symbol	nth		5143419						
ANR	5143454	Symbol	NULL		5143419						
ANR	5143455	Symbol	g		5143419						
ANR	5143456	Symbol	* n		5143419						
ANR	5143457	Symbol	r_list_get_n		5143419						
ANR	5143458	Symbol	n -> out_nodes		5143419						
ANR	5143459	Symbol	n		5143419						
ANR	5143460	Function	r_graph_innodes	223:6:5349:5449							
ANR	5143461	FunctionDef	"r_graph_innodes (const RGraph * g , const RGraphNode * n)"		5143460	0					
ANR	5143462	CompoundStatement		223:74:5417:5449	5143460	0					
ANR	5143463	ReturnStatement	return n ? n -> in_nodes : NULL ;	224:1:5420:5447	5143460	0	True				
ANR	5143464	ConditionalExpression	n ? n -> in_nodes : NULL		5143460	0					
ANR	5143465	Condition	n		5143460	0					
ANR	5143466	Identifier	n		5143460	0					
ANR	5143467	PtrMemberAccess	n -> in_nodes		5143460	1					
ANR	5143468	Identifier	n		5143460	0					
ANR	5143469	Identifier	in_nodes		5143460	1					
ANR	5143470	Identifier	NULL		5143460	2					
ANR	5143471	ReturnType	const RList *		5143460	1					
ANR	5143472	Identifier	r_graph_innodes		5143460	2					
ANR	5143473	ParameterList	"const RGraph * g , const RGraphNode * n"		5143460	3					
ANR	5143474	Parameter	const RGraph * g	223:36:5379:5393	5143460	0	True				
ANR	5143475	ParameterType	const RGraph *		5143460	0					
ANR	5143476	Identifier	g		5143460	1					
ANR	5143477	Parameter	const RGraphNode * n	223:53:5396:5414	5143460	1	True				
ANR	5143478	ParameterType	const RGraphNode *		5143460	0					
ANR	5143479	Identifier	n		5143460	1					
ANR	5143480	CFGEntryNode	ENTRY		5143460		True				
ANR	5143481	CFGExitNode	EXIT		5143460		True				
ANR	5143482	Symbol	NULL		5143460						
ANR	5143483	Symbol	g		5143460						
ANR	5143484	Symbol	n -> in_nodes		5143460						
ANR	5143485	Symbol	* n		5143460						
ANR	5143486	Symbol	n		5143460						
ANR	5143487	Function	r_graph_all_neighbours	228:6:5533:5646							
ANR	5143488	FunctionDef	"r_graph_all_neighbours (const RGraph * g , const RGraphNode * n)"		5143487	0					
ANR	5143489	CompoundStatement		228:81:5608:5646	5143487	0					
ANR	5143490	ReturnStatement	return n ? n -> all_neighbours : NULL ;	229:1:5611:5644	5143487	0	True				
ANR	5143491	ConditionalExpression	n ? n -> all_neighbours : NULL		5143487	0					
ANR	5143492	Condition	n		5143487	0					
ANR	5143493	Identifier	n		5143487	0					
ANR	5143494	PtrMemberAccess	n -> all_neighbours		5143487	1					
ANR	5143495	Identifier	n		5143487	0					
ANR	5143496	Identifier	all_neighbours		5143487	1					
ANR	5143497	Identifier	NULL		5143487	2					
ANR	5143498	ReturnType	const RList *		5143487	1					
ANR	5143499	Identifier	r_graph_all_neighbours		5143487	2					
ANR	5143500	ParameterList	"const RGraph * g , const RGraphNode * n"		5143487	3					
ANR	5143501	Parameter	const RGraph * g	228:43:5570:5584	5143487	0	True				
ANR	5143502	ParameterType	const RGraph *		5143487	0					
ANR	5143503	Identifier	g		5143487	1					
ANR	5143504	Parameter	const RGraphNode * n	228:60:5587:5605	5143487	1	True				
ANR	5143505	ParameterType	const RGraphNode *		5143487	0					
ANR	5143506	Identifier	n		5143487	1					
ANR	5143507	CFGEntryNode	ENTRY		5143487		True				
ANR	5143508	CFGExitNode	EXIT		5143487		True				
ANR	5143509	Symbol	NULL		5143487						
ANR	5143510	Symbol	g		5143487						
ANR	5143511	Symbol	* n		5143487						
ANR	5143512	Symbol	n -> all_neighbours		5143487						
ANR	5143513	Symbol	n		5143487						
ANR	5143514	Function	r_graph_get_nodes	232:6:5655:5733							
ANR	5143515	FunctionDef	r_graph_get_nodes (const RGraph * g)		5143514	0					
ANR	5143516	CompoundStatement		232:55:5704:5733	5143514	0					
ANR	5143517	ReturnStatement	return g ? g -> nodes : NULL ;	233:1:5707:5731	5143514	0	True				
ANR	5143518	ConditionalExpression	g ? g -> nodes : NULL		5143514	0					
ANR	5143519	Condition	g		5143514	0					
ANR	5143520	Identifier	g		5143514	0					
ANR	5143521	PtrMemberAccess	g -> nodes		5143514	1					
ANR	5143522	Identifier	g		5143514	0					
ANR	5143523	Identifier	nodes		5143514	1					
ANR	5143524	Identifier	NULL		5143514	2					
ANR	5143525	ReturnType	const RList *		5143514	1					
ANR	5143526	Identifier	r_graph_get_nodes		5143514	2					
ANR	5143527	ParameterList	const RGraph * g		5143514	3					
ANR	5143528	Parameter	const RGraph * g	232:38:5687:5701	5143514	0	True				
ANR	5143529	ParameterType	const RGraph *		5143514	0					
ANR	5143530	Identifier	g		5143514	1					
ANR	5143531	CFGEntryNode	ENTRY		5143514		True				
ANR	5143532	CFGExitNode	EXIT		5143514		True				
ANR	5143533	Symbol	* g		5143514						
ANR	5143534	Symbol	NULL		5143514						
ANR	5143535	Symbol	g -> nodes		5143514						
ANR	5143536	Symbol	g		5143514						
ANR	5143537	Function	r_graph_adjacent	237:0:5805:5999							
ANR	5143538	FunctionDef	"r_graph_adjacent (const RGraph * g , const RGraphNode * from , const RGraphNode * to)"		5143537	0					
ANR	5143539	CompoundStatement		237:91:5896:5999	5143537	0					
ANR	5143540	IfStatement	if ( ! g || ! from )		5143537	0					
ANR	5143541	Condition	! g || ! from	238:5:5903:5913	5143537	0	True				
ANR	5143542	OrExpression	! g || ! from		5143537	0		||			
ANR	5143543	UnaryOperationExpression	! g		5143537	0					
ANR	5143544	UnaryOperator	!		5143537	0					
ANR	5143545	Identifier	g		5143537	1					
ANR	5143546	UnaryOperationExpression	! from		5143537	1					
ANR	5143547	UnaryOperator	!		5143537	0					
ANR	5143548	Identifier	from		5143537	1					
ANR	5143549	CompoundStatement		2:18:19:19	5143537	1					
ANR	5143550	ReturnStatement	return false ;	239:2:5920:5932	5143537	0	True				
ANR	5143551	Identifier	false		5143537	0					
ANR	5143552	ReturnStatement	"return r_list_contains ( from -> out_nodes , to ) ? true : false ;"	241:1:5938:5997	5143537	1	True				
ANR	5143553	ConditionalExpression	"r_list_contains ( from -> out_nodes , to ) ? true : false"		5143537	0					
ANR	5143554	Condition	"r_list_contains ( from -> out_nodes , to )"		5143537	0					
ANR	5143555	CallExpression	"r_list_contains ( from -> out_nodes , to )"		5143537	0					
ANR	5143556	Callee	r_list_contains		5143537	0					
ANR	5143557	Identifier	r_list_contains		5143537	0					
ANR	5143558	ArgumentList	from -> out_nodes		5143537	1					
ANR	5143559	Argument	from -> out_nodes		5143537	0					
ANR	5143560	PtrMemberAccess	from -> out_nodes		5143537	0					
ANR	5143561	Identifier	from		5143537	0					
ANR	5143562	Identifier	out_nodes		5143537	1					
ANR	5143563	Argument	to		5143537	1					
ANR	5143564	Identifier	to		5143537	0					
ANR	5143565	Identifier	true		5143537	1					
ANR	5143566	Identifier	false		5143537	2					
ANR	5143567	ReturnType	R_API int		5143537	1					
ANR	5143568	Identifier	r_graph_adjacent		5143537	2					
ANR	5143569	ParameterList	"const RGraph * g , const RGraphNode * from , const RGraphNode * to"		5143537	3					
ANR	5143570	Parameter	const RGraph * g	237:28:5833:5847	5143537	0	True				
ANR	5143571	ParameterType	const RGraph *		5143537	0					
ANR	5143572	Identifier	g		5143537	1					
ANR	5143573	Parameter	const RGraphNode * from	237:45:5850:5871	5143537	1	True				
ANR	5143574	ParameterType	const RGraphNode *		5143537	0					
ANR	5143575	Identifier	from		5143537	1					
ANR	5143576	Parameter	const RGraphNode * to	237:69:5874:5893	5143537	2	True				
ANR	5143577	ParameterType	const RGraphNode *		5143537	0					
ANR	5143578	Identifier	to		5143537	1					
ANR	5143579	CFGEntryNode	ENTRY		5143537		True				
ANR	5143580	CFGExitNode	EXIT		5143537		True				
ANR	5143581	Symbol	g		5143537						
ANR	5143582	Symbol	false		5143537						
ANR	5143583	Symbol	true		5143537						
ANR	5143584	Symbol	from		5143537						
ANR	5143585	Symbol	to		5143537						
ANR	5143586	Symbol	* from		5143537						
ANR	5143587	Symbol	from -> out_nodes		5143537						
ANR	5143588	Symbol	r_list_contains		5143537						
ANR	5143589	Function	r_graph_dfs_node	244:0:6002:6225							
ANR	5143590	FunctionDef	"r_graph_dfs_node (RGraph * g , RGraphNode * n , RGraphVisitor * vis)"		5143589	0					
ANR	5143591	CompoundStatement		244:75:6077:6225	5143589	0					
ANR	5143592	IfStatement	if ( ! g || ! n || ! vis )		5143589	0					
ANR	5143593	Condition	! g || ! n || ! vis	245:5:6084:6099	5143589	0	True				
ANR	5143594	OrExpression	! g || ! n || ! vis		5143589	0		||			
ANR	5143595	UnaryOperationExpression	! g		5143589	0					
ANR	5143596	UnaryOperator	!		5143589	0					
ANR	5143597	Identifier	g		5143589	1					
ANR	5143598	OrExpression	! n || ! vis		5143589	1		||			
ANR	5143599	UnaryOperationExpression	! n		5143589	0					
ANR	5143600	UnaryOperator	!		5143589	0					
ANR	5143601	Identifier	n		5143589	1					
ANR	5143602	UnaryOperationExpression	! vis		5143589	1					
ANR	5143603	UnaryOperator	!		5143589	0					
ANR	5143604	Identifier	vis		5143589	1					
ANR	5143605	CompoundStatement		2:23:24:24	5143589	1					
ANR	5143606	ReturnStatement	return ;	246:2:6106:6112	5143589	0	True				
ANR	5143607	IdentifierDeclStatement	"int * color = R_NEWS0 ( int , g -> last_index ) ;"	248:1:6118:6159	5143589	1	True				
ANR	5143608	IdentifierDecl	"* color = R_NEWS0 ( int , g -> last_index )"		5143589	0					
ANR	5143609	IdentifierDeclType	int *		5143589	0					
ANR	5143610	Identifier	color		5143589	1					
ANR	5143611	AssignmentExpression	"* color = R_NEWS0 ( int , g -> last_index )"		5143589	2		=			
ANR	5143612	Identifier	color		5143589	0					
ANR	5143613	CallExpression	"R_NEWS0 ( int , g -> last_index )"		5143589	1					
ANR	5143614	Callee	R_NEWS0		5143589	0					
ANR	5143615	Identifier	R_NEWS0		5143589	0					
ANR	5143616	ArgumentList	int		5143589	1					
ANR	5143617	Argument	int		5143589	0					
ANR	5143618	Identifier	int		5143589	0					
ANR	5143619	Argument	g -> last_index		5143589	1					
ANR	5143620	PtrMemberAccess	g -> last_index		5143589	0					
ANR	5143621	Identifier	g		5143589	0					
ANR	5143622	Identifier	last_index		5143589	1					
ANR	5143623	IfStatement	if ( color )		5143589	2					
ANR	5143624	Condition	color	249:5:6166:6170	5143589	0	True				
ANR	5143625	Identifier	color		5143589	0					
ANR	5143626	CompoundStatement		6:12:95:95	5143589	1					
ANR	5143627	ExpressionStatement	"dfs_node ( g , n , vis , color )"	250:2:6177:6204	5143589	0	True				
ANR	5143628	CallExpression	"dfs_node ( g , n , vis , color )"		5143589	0					
ANR	5143629	Callee	dfs_node		5143589	0					
ANR	5143630	Identifier	dfs_node		5143589	0					
ANR	5143631	ArgumentList	g		5143589	1					
ANR	5143632	Argument	g		5143589	0					
ANR	5143633	Identifier	g		5143589	0					
ANR	5143634	Argument	n		5143589	1					
ANR	5143635	Identifier	n		5143589	0					
ANR	5143636	Argument	vis		5143589	2					
ANR	5143637	Identifier	vis		5143589	0					
ANR	5143638	Argument	color		5143589	3					
ANR	5143639	Identifier	color		5143589	0					
ANR	5143640	ExpressionStatement	free ( color )	251:2:6208:6220	5143589	1	True				
ANR	5143641	CallExpression	free ( color )		5143589	0					
ANR	5143642	Callee	free		5143589	0					
ANR	5143643	Identifier	free		5143589	0					
ANR	5143644	ArgumentList	color		5143589	1					
ANR	5143645	Argument	color		5143589	0					
ANR	5143646	Identifier	color		5143589	0					
ANR	5143647	ReturnType	R_API void		5143589	1					
ANR	5143648	Identifier	r_graph_dfs_node		5143589	2					
ANR	5143649	ParameterList	"RGraph * g , RGraphNode * n , RGraphVisitor * vis"		5143589	3					
ANR	5143650	Parameter	RGraph * g	244:29:6031:6039	5143589	0	True				
ANR	5143651	ParameterType	RGraph *		5143589	0					
ANR	5143652	Identifier	g		5143589	1					
ANR	5143653	Parameter	RGraphNode * n	244:40:6042:6054	5143589	1	True				
ANR	5143654	ParameterType	RGraphNode *		5143589	0					
ANR	5143655	Identifier	n		5143589	1					
ANR	5143656	Parameter	RGraphVisitor * vis	244:55:6057:6074	5143589	2	True				
ANR	5143657	ParameterType	RGraphVisitor *		5143589	0					
ANR	5143658	Identifier	vis		5143589	1					
ANR	5143659	CFGEntryNode	ENTRY		5143589		True				
ANR	5143660	CFGExitNode	EXIT		5143589		True				
ANR	5143661	Symbol	vis		5143589						
ANR	5143662	Symbol	* g		5143589						
ANR	5143663	Symbol	color		5143589						
ANR	5143664	Symbol	g		5143589						
ANR	5143665	Symbol	R_NEWS0		5143589						
ANR	5143666	Symbol	n		5143589						
ANR	5143667	Symbol	int		5143589						
ANR	5143668	Symbol	g -> last_index		5143589						
ANR	5143669	Function	r_graph_dfs	255:0:6228:6543							
ANR	5143670	FunctionDef	"r_graph_dfs (RGraph * g , RGraphVisitor * vis)"		5143669	0					
ANR	5143671	CompoundStatement		255:55:6283:6543	5143669	0					
ANR	5143672	ExpressionStatement	r_return_if_fail ( g && vis )	256:1:6286:6313	5143669	0	True				
ANR	5143673	CallExpression	r_return_if_fail ( g && vis )		5143669	0					
ANR	5143674	Callee	r_return_if_fail		5143669	0					
ANR	5143675	Identifier	r_return_if_fail		5143669	0					
ANR	5143676	ArgumentList	g && vis		5143669	1					
ANR	5143677	Argument	g && vis		5143669	0					
ANR	5143678	AndExpression	g && vis		5143669	0		&&			
ANR	5143679	Identifier	g		5143669	0					
ANR	5143680	Identifier	vis		5143669	1					
ANR	5143681	IdentifierDeclStatement	RGraphNode * n ;	257:1:6316:6329	5143669	1	True				
ANR	5143682	IdentifierDecl	* n		5143669	0					
ANR	5143683	IdentifierDeclType	RGraphNode *		5143669	0					
ANR	5143684	Identifier	n		5143669	1					
ANR	5143685	IdentifierDeclStatement	RListIter * it ;	258:1:6332:6345	5143669	2	True				
ANR	5143686	IdentifierDecl	* it		5143669	0					
ANR	5143687	IdentifierDeclType	RListIter *		5143669	0					
ANR	5143688	Identifier	it		5143669	1					
ANR	5143689	IdentifierDeclStatement	"int * color = R_NEWS0 ( int , g -> last_index ) ;"	260:1:6349:6390	5143669	3	True				
ANR	5143690	IdentifierDecl	"* color = R_NEWS0 ( int , g -> last_index )"		5143669	0					
ANR	5143691	IdentifierDeclType	int *		5143669	0					
ANR	5143692	Identifier	color		5143669	1					
ANR	5143693	AssignmentExpression	"* color = R_NEWS0 ( int , g -> last_index )"		5143669	2		=			
ANR	5143694	Identifier	color		5143669	0					
ANR	5143695	CallExpression	"R_NEWS0 ( int , g -> last_index )"		5143669	1					
ANR	5143696	Callee	R_NEWS0		5143669	0					
ANR	5143697	Identifier	R_NEWS0		5143669	0					
ANR	5143698	ArgumentList	int		5143669	1					
ANR	5143699	Argument	int		5143669	0					
ANR	5143700	Identifier	int		5143669	0					
ANR	5143701	Argument	g -> last_index		5143669	1					
ANR	5143702	PtrMemberAccess	g -> last_index		5143669	0					
ANR	5143703	Identifier	g		5143669	0					
ANR	5143704	Identifier	last_index		5143669	1					
ANR	5143705	IfStatement	if ( color )		5143669	4					
ANR	5143706	Condition	color	261:5:6397:6401	5143669	0	True				
ANR	5143707	Identifier	color		5143669	0					
ANR	5143708	CompoundStatement		7:12:120:120	5143669	1					
ANR	5143709	Statement	r_list_foreach	262:2:6408:6421	5143669	0	True				
ANR	5143710	Statement	(	262:17:6423:6423	5143669	1	True				
ANR	5143711	Statement	g	262:18:6424:6424	5143669	2	True				
ANR	5143712	Statement	->	262:19:6425:6426	5143669	3	True				
ANR	5143713	Statement	nodes	262:21:6427:6431	5143669	4	True				
ANR	5143714	Statement	","	262:26:6432:6432	5143669	5	True				
ANR	5143715	Statement	it	262:28:6434:6435	5143669	6	True				
ANR	5143716	Statement	","	262:30:6436:6436	5143669	7	True				
ANR	5143717	Statement	n	262:32:6438:6438	5143669	8	True				
ANR	5143718	Statement	)	262:33:6439:6439	5143669	9	True				
ANR	5143719	CompoundStatement		8:35:157:157	5143669	10					
ANR	5143720	IfStatement	if ( color [ n -> idx ] == WHITE_COLOR )		5143669	0					
ANR	5143721	Condition	color [ n -> idx ] == WHITE_COLOR	263:7:6450:6477	5143669	0	True				
ANR	5143722	EqualityExpression	color [ n -> idx ] == WHITE_COLOR		5143669	0		==			
ANR	5143723	ArrayIndexing	color [ n -> idx ]		5143669	0					
ANR	5143724	Identifier	color		5143669	0					
ANR	5143725	PtrMemberAccess	n -> idx		5143669	1					
ANR	5143726	Identifier	n		5143669	0					
ANR	5143727	Identifier	idx		5143669	1					
ANR	5143728	Identifier	WHITE_COLOR		5143669	1					
ANR	5143729	CompoundStatement		9:37:196:196	5143669	1					
ANR	5143730	ExpressionStatement	"dfs_node ( g , n , vis , color )"	264:4:6486:6513	5143669	0	True				
ANR	5143731	CallExpression	"dfs_node ( g , n , vis , color )"		5143669	0					
ANR	5143732	Callee	dfs_node		5143669	0					
ANR	5143733	Identifier	dfs_node		5143669	0					
ANR	5143734	ArgumentList	g		5143669	1					
ANR	5143735	Argument	g		5143669	0					
ANR	5143736	Identifier	g		5143669	0					
ANR	5143737	Argument	n		5143669	1					
ANR	5143738	Identifier	n		5143669	0					
ANR	5143739	Argument	vis		5143669	2					
ANR	5143740	Identifier	vis		5143669	0					
ANR	5143741	Argument	color		5143669	3					
ANR	5143742	Identifier	color		5143669	0					
ANR	5143743	ExpressionStatement	free ( color )	267:2:6526:6538	5143669	11	True				
ANR	5143744	CallExpression	free ( color )		5143669	0					
ANR	5143745	Callee	free		5143669	0					
ANR	5143746	Identifier	free		5143669	0					
ANR	5143747	ArgumentList	color		5143669	1					
ANR	5143748	Argument	color		5143669	0					
ANR	5143749	Identifier	color		5143669	0					
ANR	5143750	ReturnType	R_API void		5143669	1					
ANR	5143751	Identifier	r_graph_dfs		5143669	2					
ANR	5143752	ParameterList	"RGraph * g , RGraphVisitor * vis"		5143669	3					
ANR	5143753	Parameter	RGraph * g	255:24:6252:6260	5143669	0	True				
ANR	5143754	ParameterType	RGraph *		5143669	0					
ANR	5143755	Identifier	g		5143669	1					
ANR	5143756	Parameter	RGraphVisitor * vis	255:35:6263:6280	5143669	1	True				
ANR	5143757	ParameterType	RGraphVisitor *		5143669	0					
ANR	5143758	Identifier	vis		5143669	1					
ANR	5143759	CFGEntryNode	ENTRY		5143669		True				
ANR	5143760	CFGExitNode	EXIT		5143669		True				
ANR	5143761	Symbol	vis		5143669						
ANR	5143762	Symbol	color		5143669						
ANR	5143763	Symbol	g		5143669						
ANR	5143764	Symbol	* color		5143669						
ANR	5143765	Symbol	it		5143669						
ANR	5143766	Symbol	WHITE_COLOR		5143669						
ANR	5143767	Symbol	n -> idx		5143669						
ANR	5143768	Symbol	n		5143669						
ANR	5143769	Symbol	int		5143669						
ANR	5143770	Symbol	* g		5143669						
ANR	5143771	Symbol	* n -> idx		5143669						
ANR	5143772	Symbol	R_NEWS0		5143669						
ANR	5143773	Symbol	* n		5143669						
ANR	5143774	Symbol	* * n		5143669						
ANR	5143775	Symbol	g -> last_index		5143669						
