command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5035128	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_x86_pseudo.c								
ANR	5035129	Function	replace	15:0:415:4912							
ANR	5035130	FunctionDef	"replace (int argc , char * argv [ ] , char * newstr)"		5035129	0					
ANR	5035131	CompoundStatement		15:58:473:4912	5035129	0					
ANR	5035132	Statement	define	16:1:476:481	5035129	0	True				
ANR	5035133	Statement	MAXPSEUDOOPS	16:8:483:494	5035129	1	True				
ANR	5035134	Statement	10	16:21:496:497	5035129	2	True				
ANR	5035135	IdentifierDeclStatement	"int i , j , k , d ;"	17:1:500:514	5035129	3	True				
ANR	5035136	IdentifierDecl	i		5035129	0					
ANR	5035137	IdentifierDeclType	int		5035129	0					
ANR	5035138	Identifier	i		5035129	1					
ANR	5035139	IdentifierDecl	j		5035129	1					
ANR	5035140	IdentifierDeclType	int		5035129	0					
ANR	5035141	Identifier	j		5035129	1					
ANR	5035142	IdentifierDecl	k		5035129	2					
ANR	5035143	IdentifierDeclType	int		5035129	0					
ANR	5035144	Identifier	k		5035129	1					
ANR	5035145	IdentifierDecl	d		5035129	3					
ANR	5035146	IdentifierDeclType	int		5035129	0					
ANR	5035147	Identifier	d		5035129	1					
ANR	5035148	IdentifierDeclStatement	char ch ;	18:1:517:524	5035129	4	True				
ANR	5035149	IdentifierDecl	ch		5035129	0					
ANR	5035150	IdentifierDeclType	char		5035129	0					
ANR	5035151	Identifier	ch		5035129	1					
ANR	5035152	ClassDefStatement	"struct { char * op ; char * str ; int args [ MAXPSEUDOOPS ] ; } ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } } ;"	19:1:527:3873	5035129	5	True				
ANR	5035153	IdentifierDecl	"ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } }"		5035129	0					
ANR	5035154	IdentifierDeclType	 [ ]		5035129	0					
ANR	5035155	Identifier	ops		5035129	1					
ANR	5035156	AssignmentExpression	"ops [ ] = { { ""adc"" , ""# += #"" , { 1 , 2 } } , { ""add"" , ""# += #"" , { 1 , 2 } } , { ""and"" , ""# &= #"" , { 1 , 2 } } , { ""call"" , ""# ()"" , { 1 } } , { ""cmove"" , ""if (!var) # = #"" , { 1 , 2 } } , { ""cmovl"" , ""if (var < 0) # = #"" , { 1 , 2 } } , { ""cmp"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsq"" , ""var = # - #"" , { 1 , 2 } } , { ""cmpsb"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"" , { 0 } } , { ""cmpsw"" , ""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"" , { 0 } } , { ""dec"" , ""#--"" , { 1 } } , { ""div"" , ""# /= #"" , { 1 , 2 } } , { ""fabs"" , ""abs(#)"" , { 1 } } , { ""fadd"" , ""# = # + #"" , { 1 , 1 , 2 } } , { ""fcomp"" , ""var = # - #"" , { 1 , 2 } } , { ""fcos"" , ""# = cos(#)"" , { 1 , 1 } } , { ""fdiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fiadd"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""ficom"" , ""var = # - #"" , { 1 , 2 } } , { ""fidiv"" , ""# = # / #"" , { 1 , 1 , 2 } } , { ""fidiv"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fisub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fnul"" , ""# = # * #"" , { 1 , 1 , 2 } } , { ""fnop"" , "" "" , { 0 } } , { ""frndint"" , ""# = (int) #"" , { 1 , 1 } } , { ""fsin"" , ""# = sin(#)"" , { 1 , 1 } } , { ""fsqrt"" , ""# = sqrt(#)"" , { 1 , 1 } } , { ""fsub"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""fxch"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""idiv"" , ""# /= #"" , { 1 , 2 } } , { ""imul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""in"" , ""# = io[#]"" , { 1 , 2 } } , { ""inc"" , ""#++"" , { 1 } } , { ""ja"" , ""if (((unsigned) var) > 0) goto #"" , { 1 } } , { ""jb"" , ""if (((unsigned) var) < 0) goto #"" , { 1 } } , { ""jbe"" , ""if (((unsigned) var) <= 0) goto #"" , { 1 } } , { ""je"" , ""if (!var) goto #"" , { 1 } } , { ""jg"" , ""if (var > 0) goto #"" , { 1 } } , { ""jge"" , ""if (var >= 0) goto #"" , { 1 } } , { ""jle"" , ""if (var <= 0) goto #"" , { 1 } } , { ""jmp"" , ""goto #"" , { 1 } } , { ""jne"" , ""if (var) goto #"" , { 1 } } , { ""lea"" , ""# = #"" , { 1 , 2 } } , { ""mov"" , ""# = #"" , { 1 , 2 } } , { ""movq"" , ""# = #"" , { 1 , 2 } } , { ""movaps"" , ""# = #"" , { 1 , 2 } } , { ""movups"" , ""# = #"" , { 1 , 2 } } , { ""movsd"" , ""# = #"" , { 1 , 2 } } , { ""movsx"" , ""# = #"" , { 1 , 2 } } , { ""movsxd"" , ""# = #"" , { 1 , 2 } } , { ""movzx"" , ""# = #"" , { 1 , 2 } } , { ""movntdq"" , ""# = #"" , { 1 , 2 } } , { ""movnti"" , ""# = #"" , { 1 , 2 } } , { ""movntpd"" , ""# = #"" , { 1 , 2 } } , { ""pcmpeqb"" , ""# == #"" , { 1 , 2 } } , { ""movdqu"" , ""# = #"" , { 1 , 2 } } , { ""movdqa"" , ""# = #"" , { 1 , 2 } } , { ""pextrb"" , ""# = (byte) # [#]"" , { 1 , 2 , 3 } } , { ""palignr"" , ""# = # align #"" , { 1 , 2 , 3 } } , { ""pxor"" , ""# ^= #"" , { 1 , 2 } } , { ""xorps"" , ""# ^= #"" , { 1 , 2 } } , { ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""mulss"" , ""# = # * #"" , { 1 , 2 , 3 } } , { ""neg"" , ""# ~= #"" , { 1 , 1 } } , { ""nop"" , """" , { 0 } } , { ""not"" , ""# = !#"" , { 1 , 1 } } , { ""or"" , ""# |= #"" , { 1 , 2 } } , { ""out"" , ""io[#] = #"" , { 1 , 2 } } , { ""pop"" , ""pop #"" , { 1 } } , { ""push"" , ""push #"" , { 1 } } , { ""ret"" , ""return"" , { 0 } } , { ""sal"" , ""# <<= #"" , { 1 , 2 } } , { ""sar"" , ""# >>= #"" , { 1 , 2 } } , { ""sete"" , ""# = e"" , { 1 } } , { ""setne"" , ""# = ne"" , { 1 } } , { ""shl"" , ""# <<<= #"" , { 1 , 2 } } , { ""shld"" , ""# <<<= #"" , { 1 , 2 } } , { ""sbb"" , ""# = # - #"" , { 1 , 1 , 2 } } , { ""shr"" , ""# >>>= #"" , { 1 , 2 } } , { ""shlr"" , ""# >>>= #"" , { 1 , 2 } } , { ""sub"" , ""# -= #"" , { 1 , 2 } } , { ""swap"" , ""var = #; # = #; # = var"" , { 1 , 1 , 2 , 2 } } , { ""test"" , ""var = # & #"" , { 1 , 2 } } , { ""xchg"" , ""#,# = #,#"" , { 1 , 2 , 2 , 1 } } , { ""xadd"" , ""#,# = #,#+#"" , { 1 , 2 , 2 , 1 , 2 } } , { ""xor"" , ""# ^= #"" , { 1 , 2 } } , { NULL } }"		5035129	2		=			
ANR	5035157	Identifier	ops		5035129	0					
ANR	5035158	InitializerList	"""adc"""		5035129	1					
ANR	5035159	InitializerList	"""adc"""		5035129	0					
ANR	5035160	PrimaryExpression	"""adc"""		5035129	0					
ANR	5035161	PrimaryExpression	"""# += #"""		5035129	1					
ANR	5035162	InitializerList	1		5035129	2					
ANR	5035163	PrimaryExpression	1		5035129	0					
ANR	5035164	PrimaryExpression	2		5035129	1					
ANR	5035165	InitializerList	"""add"""		5035129	1					
ANR	5035166	PrimaryExpression	"""add"""		5035129	0					
ANR	5035167	PrimaryExpression	"""# += #"""		5035129	1					
ANR	5035168	InitializerList	1		5035129	2					
ANR	5035169	PrimaryExpression	1		5035129	0					
ANR	5035170	PrimaryExpression	2		5035129	1					
ANR	5035171	InitializerList	"""and"""		5035129	2					
ANR	5035172	PrimaryExpression	"""and"""		5035129	0					
ANR	5035173	PrimaryExpression	"""# &= #"""		5035129	1					
ANR	5035174	InitializerList	1		5035129	2					
ANR	5035175	PrimaryExpression	1		5035129	0					
ANR	5035176	PrimaryExpression	2		5035129	1					
ANR	5035177	InitializerList	"""call"""		5035129	3					
ANR	5035178	PrimaryExpression	"""call"""		5035129	0					
ANR	5035179	PrimaryExpression	"""# ()"""		5035129	1					
ANR	5035180	InitializerList	1		5035129	2					
ANR	5035181	PrimaryExpression	1		5035129	0					
ANR	5035182	InitializerList	"""cmove"""		5035129	4					
ANR	5035183	PrimaryExpression	"""cmove"""		5035129	0					
ANR	5035184	PrimaryExpression	"""if (!var) # = #"""		5035129	1					
ANR	5035185	InitializerList	1		5035129	2					
ANR	5035186	PrimaryExpression	1		5035129	0					
ANR	5035187	PrimaryExpression	2		5035129	1					
ANR	5035188	InitializerList	"""cmovl"""		5035129	5					
ANR	5035189	PrimaryExpression	"""cmovl"""		5035129	0					
ANR	5035190	PrimaryExpression	"""if (var < 0) # = #"""		5035129	1					
ANR	5035191	InitializerList	1		5035129	2					
ANR	5035192	PrimaryExpression	1		5035129	0					
ANR	5035193	PrimaryExpression	2		5035129	1					
ANR	5035194	InitializerList	"""cmp"""		5035129	6					
ANR	5035195	PrimaryExpression	"""cmp"""		5035129	0					
ANR	5035196	PrimaryExpression	"""var = # - #"""		5035129	1					
ANR	5035197	InitializerList	1		5035129	2					
ANR	5035198	PrimaryExpression	1		5035129	0					
ANR	5035199	PrimaryExpression	2		5035129	1					
ANR	5035200	InitializerList	"""cmpsq"""		5035129	7					
ANR	5035201	PrimaryExpression	"""cmpsq"""		5035129	0					
ANR	5035202	PrimaryExpression	"""var = # - #"""		5035129	1					
ANR	5035203	InitializerList	1		5035129	2					
ANR	5035204	PrimaryExpression	1		5035129	0					
ANR	5035205	PrimaryExpression	2		5035129	1					
ANR	5035206	InitializerList	"""cmpsb"""		5035129	8					
ANR	5035207	PrimaryExpression	"""cmpsb"""		5035129	0					
ANR	5035208	PrimaryExpression	"""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"""		5035129	1					
ANR	5035209	InitializerList	0		5035129	2					
ANR	5035210	PrimaryExpression	0		5035129	0					
ANR	5035211	InitializerList	"""cmpsw"""		5035129	9					
ANR	5035212	PrimaryExpression	"""cmpsw"""		5035129	0					
ANR	5035213	PrimaryExpression	"""while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"""		5035129	1					
ANR	5035214	InitializerList	0		5035129	2					
ANR	5035215	PrimaryExpression	0		5035129	0					
ANR	5035216	InitializerList	"""dec"""		5035129	10					
ANR	5035217	PrimaryExpression	"""dec"""		5035129	0					
ANR	5035218	PrimaryExpression	"""#--"""		5035129	1					
ANR	5035219	InitializerList	1		5035129	2					
ANR	5035220	PrimaryExpression	1		5035129	0					
ANR	5035221	InitializerList	"""div"""		5035129	11					
ANR	5035222	PrimaryExpression	"""div"""		5035129	0					
ANR	5035223	PrimaryExpression	"""# /= #"""		5035129	1					
ANR	5035224	InitializerList	1		5035129	2					
ANR	5035225	PrimaryExpression	1		5035129	0					
ANR	5035226	PrimaryExpression	2		5035129	1					
ANR	5035227	InitializerList	"""fabs"""		5035129	12					
ANR	5035228	PrimaryExpression	"""fabs"""		5035129	0					
ANR	5035229	PrimaryExpression	"""abs(#)"""		5035129	1					
ANR	5035230	InitializerList	1		5035129	2					
ANR	5035231	PrimaryExpression	1		5035129	0					
ANR	5035232	InitializerList	"""fadd"""		5035129	13					
ANR	5035233	PrimaryExpression	"""fadd"""		5035129	0					
ANR	5035234	PrimaryExpression	"""# = # + #"""		5035129	1					
ANR	5035235	InitializerList	1		5035129	2					
ANR	5035236	PrimaryExpression	1		5035129	0					
ANR	5035237	PrimaryExpression	1		5035129	1					
ANR	5035238	PrimaryExpression	2		5035129	2					
ANR	5035239	InitializerList	"""fcomp"""		5035129	14					
ANR	5035240	PrimaryExpression	"""fcomp"""		5035129	0					
ANR	5035241	PrimaryExpression	"""var = # - #"""		5035129	1					
ANR	5035242	InitializerList	1		5035129	2					
ANR	5035243	PrimaryExpression	1		5035129	0					
ANR	5035244	PrimaryExpression	2		5035129	1					
ANR	5035245	InitializerList	"""fcos"""		5035129	15					
ANR	5035246	PrimaryExpression	"""fcos"""		5035129	0					
ANR	5035247	PrimaryExpression	"""# = cos(#)"""		5035129	1					
ANR	5035248	InitializerList	1		5035129	2					
ANR	5035249	PrimaryExpression	1		5035129	0					
ANR	5035250	PrimaryExpression	1		5035129	1					
ANR	5035251	InitializerList	"""fdiv"""		5035129	16					
ANR	5035252	PrimaryExpression	"""fdiv"""		5035129	0					
ANR	5035253	PrimaryExpression	"""# = # / #"""		5035129	1					
ANR	5035254	InitializerList	1		5035129	2					
ANR	5035255	PrimaryExpression	1		5035129	0					
ANR	5035256	PrimaryExpression	1		5035129	1					
ANR	5035257	PrimaryExpression	2		5035129	2					
ANR	5035258	InitializerList	"""fiadd"""		5035129	17					
ANR	5035259	PrimaryExpression	"""fiadd"""		5035129	0					
ANR	5035260	PrimaryExpression	"""# = # / #"""		5035129	1					
ANR	5035261	InitializerList	1		5035129	2					
ANR	5035262	PrimaryExpression	1		5035129	0					
ANR	5035263	PrimaryExpression	1		5035129	1					
ANR	5035264	PrimaryExpression	2		5035129	2					
ANR	5035265	InitializerList	"""ficom"""		5035129	18					
ANR	5035266	PrimaryExpression	"""ficom"""		5035129	0					
ANR	5035267	PrimaryExpression	"""var = # - #"""		5035129	1					
ANR	5035268	InitializerList	1		5035129	2					
ANR	5035269	PrimaryExpression	1		5035129	0					
ANR	5035270	PrimaryExpression	2		5035129	1					
ANR	5035271	InitializerList	"""fidiv"""		5035129	19					
ANR	5035272	PrimaryExpression	"""fidiv"""		5035129	0					
ANR	5035273	PrimaryExpression	"""# = # / #"""		5035129	1					
ANR	5035274	InitializerList	1		5035129	2					
ANR	5035275	PrimaryExpression	1		5035129	0					
ANR	5035276	PrimaryExpression	1		5035129	1					
ANR	5035277	PrimaryExpression	2		5035129	2					
ANR	5035278	InitializerList	"""fidiv"""		5035129	20					
ANR	5035279	PrimaryExpression	"""fidiv"""		5035129	0					
ANR	5035280	PrimaryExpression	"""# = # * #"""		5035129	1					
ANR	5035281	InitializerList	1		5035129	2					
ANR	5035282	PrimaryExpression	1		5035129	0					
ANR	5035283	PrimaryExpression	1		5035129	1					
ANR	5035284	PrimaryExpression	2		5035129	2					
ANR	5035285	InitializerList	"""fisub"""		5035129	21					
ANR	5035286	PrimaryExpression	"""fisub"""		5035129	0					
ANR	5035287	PrimaryExpression	"""# = # - #"""		5035129	1					
ANR	5035288	InitializerList	1		5035129	2					
ANR	5035289	PrimaryExpression	1		5035129	0					
ANR	5035290	PrimaryExpression	1		5035129	1					
ANR	5035291	PrimaryExpression	2		5035129	2					
ANR	5035292	InitializerList	"""fnul"""		5035129	22					
ANR	5035293	PrimaryExpression	"""fnul"""		5035129	0					
ANR	5035294	PrimaryExpression	"""# = # * #"""		5035129	1					
ANR	5035295	InitializerList	1		5035129	2					
ANR	5035296	PrimaryExpression	1		5035129	0					
ANR	5035297	PrimaryExpression	1		5035129	1					
ANR	5035298	PrimaryExpression	2		5035129	2					
ANR	5035299	InitializerList	"""fnop"""		5035129	23					
ANR	5035300	PrimaryExpression	"""fnop"""		5035129	0					
ANR	5035301	PrimaryExpression	""" """		5035129	1					
ANR	5035302	InitializerList	0		5035129	2					
ANR	5035303	PrimaryExpression	0		5035129	0					
ANR	5035304	InitializerList	"""frndint"""		5035129	24					
ANR	5035305	PrimaryExpression	"""frndint"""		5035129	0					
ANR	5035306	PrimaryExpression	"""# = (int) #"""		5035129	1					
ANR	5035307	InitializerList	1		5035129	2					
ANR	5035308	PrimaryExpression	1		5035129	0					
ANR	5035309	PrimaryExpression	1		5035129	1					
ANR	5035310	InitializerList	"""fsin"""		5035129	25					
ANR	5035311	PrimaryExpression	"""fsin"""		5035129	0					
ANR	5035312	PrimaryExpression	"""# = sin(#)"""		5035129	1					
ANR	5035313	InitializerList	1		5035129	2					
ANR	5035314	PrimaryExpression	1		5035129	0					
ANR	5035315	PrimaryExpression	1		5035129	1					
ANR	5035316	InitializerList	"""fsqrt"""		5035129	26					
ANR	5035317	PrimaryExpression	"""fsqrt"""		5035129	0					
ANR	5035318	PrimaryExpression	"""# = sqrt(#)"""		5035129	1					
ANR	5035319	InitializerList	1		5035129	2					
ANR	5035320	PrimaryExpression	1		5035129	0					
ANR	5035321	PrimaryExpression	1		5035129	1					
ANR	5035322	InitializerList	"""fsub"""		5035129	27					
ANR	5035323	PrimaryExpression	"""fsub"""		5035129	0					
ANR	5035324	PrimaryExpression	"""# = # - #"""		5035129	1					
ANR	5035325	InitializerList	1		5035129	2					
ANR	5035326	PrimaryExpression	1		5035129	0					
ANR	5035327	PrimaryExpression	1		5035129	1					
ANR	5035328	PrimaryExpression	2		5035129	2					
ANR	5035329	InitializerList	"""fxch"""		5035129	28					
ANR	5035330	PrimaryExpression	"""fxch"""		5035129	0					
ANR	5035331	PrimaryExpression	"""#,# = #,#"""		5035129	1					
ANR	5035332	InitializerList	1		5035129	2					
ANR	5035333	PrimaryExpression	1		5035129	0					
ANR	5035334	PrimaryExpression	2		5035129	1					
ANR	5035335	PrimaryExpression	2		5035129	2					
ANR	5035336	PrimaryExpression	1		5035129	3					
ANR	5035337	InitializerList	"""idiv"""		5035129	29					
ANR	5035338	PrimaryExpression	"""idiv"""		5035129	0					
ANR	5035339	PrimaryExpression	"""# /= #"""		5035129	1					
ANR	5035340	InitializerList	1		5035129	2					
ANR	5035341	PrimaryExpression	1		5035129	0					
ANR	5035342	PrimaryExpression	2		5035129	1					
ANR	5035343	InitializerList	"""imul"""		5035129	30					
ANR	5035344	PrimaryExpression	"""imul"""		5035129	0					
ANR	5035345	PrimaryExpression	"""# = # * #"""		5035129	1					
ANR	5035346	InitializerList	1		5035129	2					
ANR	5035347	PrimaryExpression	1		5035129	0					
ANR	5035348	PrimaryExpression	2		5035129	1					
ANR	5035349	PrimaryExpression	3		5035129	2					
ANR	5035350	InitializerList	"""in"""		5035129	31					
ANR	5035351	PrimaryExpression	"""in"""		5035129	0					
ANR	5035352	PrimaryExpression	"""# = io[#]"""		5035129	1					
ANR	5035353	InitializerList	1		5035129	2					
ANR	5035354	PrimaryExpression	1		5035129	0					
ANR	5035355	PrimaryExpression	2		5035129	1					
ANR	5035356	InitializerList	"""inc"""		5035129	32					
ANR	5035357	PrimaryExpression	"""inc"""		5035129	0					
ANR	5035358	PrimaryExpression	"""#++"""		5035129	1					
ANR	5035359	InitializerList	1		5035129	2					
ANR	5035360	PrimaryExpression	1		5035129	0					
ANR	5035361	InitializerList	"""ja"""		5035129	33					
ANR	5035362	PrimaryExpression	"""ja"""		5035129	0					
ANR	5035363	PrimaryExpression	"""if (((unsigned) var) > 0) goto #"""		5035129	1					
ANR	5035364	InitializerList	1		5035129	2					
ANR	5035365	PrimaryExpression	1		5035129	0					
ANR	5035366	InitializerList	"""jb"""		5035129	34					
ANR	5035367	PrimaryExpression	"""jb"""		5035129	0					
ANR	5035368	PrimaryExpression	"""if (((unsigned) var) < 0) goto #"""		5035129	1					
ANR	5035369	InitializerList	1		5035129	2					
ANR	5035370	PrimaryExpression	1		5035129	0					
ANR	5035371	InitializerList	"""jbe"""		5035129	35					
ANR	5035372	PrimaryExpression	"""jbe"""		5035129	0					
ANR	5035373	PrimaryExpression	"""if (((unsigned) var) <= 0) goto #"""		5035129	1					
ANR	5035374	InitializerList	1		5035129	2					
ANR	5035375	PrimaryExpression	1		5035129	0					
ANR	5035376	InitializerList	"""je"""		5035129	36					
ANR	5035377	PrimaryExpression	"""je"""		5035129	0					
ANR	5035378	PrimaryExpression	"""if (!var) goto #"""		5035129	1					
ANR	5035379	InitializerList	1		5035129	2					
ANR	5035380	PrimaryExpression	1		5035129	0					
ANR	5035381	InitializerList	"""jg"""		5035129	37					
ANR	5035382	PrimaryExpression	"""jg"""		5035129	0					
ANR	5035383	PrimaryExpression	"""if (var > 0) goto #"""		5035129	1					
ANR	5035384	InitializerList	1		5035129	2					
ANR	5035385	PrimaryExpression	1		5035129	0					
ANR	5035386	InitializerList	"""jge"""		5035129	38					
ANR	5035387	PrimaryExpression	"""jge"""		5035129	0					
ANR	5035388	PrimaryExpression	"""if (var >= 0) goto #"""		5035129	1					
ANR	5035389	InitializerList	1		5035129	2					
ANR	5035390	PrimaryExpression	1		5035129	0					
ANR	5035391	InitializerList	"""jle"""		5035129	39					
ANR	5035392	PrimaryExpression	"""jle"""		5035129	0					
ANR	5035393	PrimaryExpression	"""if (var <= 0) goto #"""		5035129	1					
ANR	5035394	InitializerList	1		5035129	2					
ANR	5035395	PrimaryExpression	1		5035129	0					
ANR	5035396	InitializerList	"""jmp"""		5035129	40					
ANR	5035397	PrimaryExpression	"""jmp"""		5035129	0					
ANR	5035398	PrimaryExpression	"""goto #"""		5035129	1					
ANR	5035399	InitializerList	1		5035129	2					
ANR	5035400	PrimaryExpression	1		5035129	0					
ANR	5035401	InitializerList	"""jne"""		5035129	41					
ANR	5035402	PrimaryExpression	"""jne"""		5035129	0					
ANR	5035403	PrimaryExpression	"""if (var) goto #"""		5035129	1					
ANR	5035404	InitializerList	1		5035129	2					
ANR	5035405	PrimaryExpression	1		5035129	0					
ANR	5035406	InitializerList	"""lea"""		5035129	42					
ANR	5035407	PrimaryExpression	"""lea"""		5035129	0					
ANR	5035408	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035409	InitializerList	1		5035129	2					
ANR	5035410	PrimaryExpression	1		5035129	0					
ANR	5035411	PrimaryExpression	2		5035129	1					
ANR	5035412	InitializerList	"""mov"""		5035129	43					
ANR	5035413	PrimaryExpression	"""mov"""		5035129	0					
ANR	5035414	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035415	InitializerList	1		5035129	2					
ANR	5035416	PrimaryExpression	1		5035129	0					
ANR	5035417	PrimaryExpression	2		5035129	1					
ANR	5035418	InitializerList	"""movq"""		5035129	44					
ANR	5035419	PrimaryExpression	"""movq"""		5035129	0					
ANR	5035420	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035421	InitializerList	1		5035129	2					
ANR	5035422	PrimaryExpression	1		5035129	0					
ANR	5035423	PrimaryExpression	2		5035129	1					
ANR	5035424	InitializerList	"""movaps"""		5035129	45					
ANR	5035425	PrimaryExpression	"""movaps"""		5035129	0					
ANR	5035426	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035427	InitializerList	1		5035129	2					
ANR	5035428	PrimaryExpression	1		5035129	0					
ANR	5035429	PrimaryExpression	2		5035129	1					
ANR	5035430	InitializerList	"""movups"""		5035129	46					
ANR	5035431	PrimaryExpression	"""movups"""		5035129	0					
ANR	5035432	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035433	InitializerList	1		5035129	2					
ANR	5035434	PrimaryExpression	1		5035129	0					
ANR	5035435	PrimaryExpression	2		5035129	1					
ANR	5035436	InitializerList	"""movsd"""		5035129	47					
ANR	5035437	PrimaryExpression	"""movsd"""		5035129	0					
ANR	5035438	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035439	InitializerList	1		5035129	2					
ANR	5035440	PrimaryExpression	1		5035129	0					
ANR	5035441	PrimaryExpression	2		5035129	1					
ANR	5035442	InitializerList	"""movsx"""		5035129	48					
ANR	5035443	PrimaryExpression	"""movsx"""		5035129	0					
ANR	5035444	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035445	InitializerList	1		5035129	2					
ANR	5035446	PrimaryExpression	1		5035129	0					
ANR	5035447	PrimaryExpression	2		5035129	1					
ANR	5035448	InitializerList	"""movsxd"""		5035129	49					
ANR	5035449	PrimaryExpression	"""movsxd"""		5035129	0					
ANR	5035450	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035451	InitializerList	1		5035129	2					
ANR	5035452	PrimaryExpression	1		5035129	0					
ANR	5035453	PrimaryExpression	2		5035129	1					
ANR	5035454	InitializerList	"""movzx"""		5035129	50					
ANR	5035455	PrimaryExpression	"""movzx"""		5035129	0					
ANR	5035456	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035457	InitializerList	1		5035129	2					
ANR	5035458	PrimaryExpression	1		5035129	0					
ANR	5035459	PrimaryExpression	2		5035129	1					
ANR	5035460	InitializerList	"""movntdq"""		5035129	51					
ANR	5035461	PrimaryExpression	"""movntdq"""		5035129	0					
ANR	5035462	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035463	InitializerList	1		5035129	2					
ANR	5035464	PrimaryExpression	1		5035129	0					
ANR	5035465	PrimaryExpression	2		5035129	1					
ANR	5035466	InitializerList	"""movnti"""		5035129	52					
ANR	5035467	PrimaryExpression	"""movnti"""		5035129	0					
ANR	5035468	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035469	InitializerList	1		5035129	2					
ANR	5035470	PrimaryExpression	1		5035129	0					
ANR	5035471	PrimaryExpression	2		5035129	1					
ANR	5035472	InitializerList	"""movntpd"""		5035129	53					
ANR	5035473	PrimaryExpression	"""movntpd"""		5035129	0					
ANR	5035474	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035475	InitializerList	1		5035129	2					
ANR	5035476	PrimaryExpression	1		5035129	0					
ANR	5035477	PrimaryExpression	2		5035129	1					
ANR	5035478	InitializerList	"""pcmpeqb"""		5035129	54					
ANR	5035479	PrimaryExpression	"""pcmpeqb"""		5035129	0					
ANR	5035480	PrimaryExpression	"""# == #"""		5035129	1					
ANR	5035481	InitializerList	1		5035129	2					
ANR	5035482	PrimaryExpression	1		5035129	0					
ANR	5035483	PrimaryExpression	2		5035129	1					
ANR	5035484	InitializerList	"""movdqu"""		5035129	55					
ANR	5035485	PrimaryExpression	"""movdqu"""		5035129	0					
ANR	5035486	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035487	InitializerList	1		5035129	2					
ANR	5035488	PrimaryExpression	1		5035129	0					
ANR	5035489	PrimaryExpression	2		5035129	1					
ANR	5035490	InitializerList	"""movdqa"""		5035129	56					
ANR	5035491	PrimaryExpression	"""movdqa"""		5035129	0					
ANR	5035492	PrimaryExpression	"""# = #"""		5035129	1					
ANR	5035493	InitializerList	1		5035129	2					
ANR	5035494	PrimaryExpression	1		5035129	0					
ANR	5035495	PrimaryExpression	2		5035129	1					
ANR	5035496	InitializerList	"""pextrb"""		5035129	57					
ANR	5035497	PrimaryExpression	"""pextrb"""		5035129	0					
ANR	5035498	PrimaryExpression	"""# = (byte) # [#]"""		5035129	1					
ANR	5035499	InitializerList	1		5035129	2					
ANR	5035500	PrimaryExpression	1		5035129	0					
ANR	5035501	PrimaryExpression	2		5035129	1					
ANR	5035502	PrimaryExpression	3		5035129	2					
ANR	5035503	InitializerList	"""palignr"""		5035129	58					
ANR	5035504	PrimaryExpression	"""palignr"""		5035129	0					
ANR	5035505	PrimaryExpression	"""# = # align #"""		5035129	1					
ANR	5035506	InitializerList	1		5035129	2					
ANR	5035507	PrimaryExpression	1		5035129	0					
ANR	5035508	PrimaryExpression	2		5035129	1					
ANR	5035509	PrimaryExpression	3		5035129	2					
ANR	5035510	InitializerList	"""pxor"""		5035129	59					
ANR	5035511	PrimaryExpression	"""pxor"""		5035129	0					
ANR	5035512	PrimaryExpression	"""# ^= #"""		5035129	1					
ANR	5035513	InitializerList	1		5035129	2					
ANR	5035514	PrimaryExpression	1		5035129	0					
ANR	5035515	PrimaryExpression	2		5035129	1					
ANR	5035516	InitializerList	"""xorps"""		5035129	60					
ANR	5035517	PrimaryExpression	"""xorps"""		5035129	0					
ANR	5035518	PrimaryExpression	"""# ^= #"""		5035129	1					
ANR	5035519	InitializerList	1		5035129	2					
ANR	5035520	PrimaryExpression	1		5035129	0					
ANR	5035521	PrimaryExpression	2		5035129	1					
ANR	5035522	InitializerList	"""mul"""		5035129	61					
ANR	5035523	PrimaryExpression	"""mul"""		5035129	0					
ANR	5035524	PrimaryExpression	"""# = # * #"""		5035129	1					
ANR	5035525	InitializerList	1		5035129	2					
ANR	5035526	PrimaryExpression	1		5035129	0					
ANR	5035527	PrimaryExpression	2		5035129	1					
ANR	5035528	PrimaryExpression	3		5035129	2					
ANR	5035529	InitializerList	"""mulss"""		5035129	62					
ANR	5035530	PrimaryExpression	"""mulss"""		5035129	0					
ANR	5035531	PrimaryExpression	"""# = # * #"""		5035129	1					
ANR	5035532	InitializerList	1		5035129	2					
ANR	5035533	PrimaryExpression	1		5035129	0					
ANR	5035534	PrimaryExpression	2		5035129	1					
ANR	5035535	PrimaryExpression	3		5035129	2					
ANR	5035536	InitializerList	"""neg"""		5035129	63					
ANR	5035537	PrimaryExpression	"""neg"""		5035129	0					
ANR	5035538	PrimaryExpression	"""# ~= #"""		5035129	1					
ANR	5035539	InitializerList	1		5035129	2					
ANR	5035540	PrimaryExpression	1		5035129	0					
ANR	5035541	PrimaryExpression	1		5035129	1					
ANR	5035542	InitializerList	"""nop"""		5035129	64					
ANR	5035543	PrimaryExpression	"""nop"""		5035129	0					
ANR	5035544	PrimaryExpression	""""""		5035129	1					
ANR	5035545	InitializerList	0		5035129	2					
ANR	5035546	PrimaryExpression	0		5035129	0					
ANR	5035547	InitializerList	"""not"""		5035129	65					
ANR	5035548	PrimaryExpression	"""not"""		5035129	0					
ANR	5035549	PrimaryExpression	"""# = !#"""		5035129	1					
ANR	5035550	InitializerList	1		5035129	2					
ANR	5035551	PrimaryExpression	1		5035129	0					
ANR	5035552	PrimaryExpression	1		5035129	1					
ANR	5035553	InitializerList	"""or"""		5035129	66					
ANR	5035554	PrimaryExpression	"""or"""		5035129	0					
ANR	5035555	PrimaryExpression	"""# |= #"""		5035129	1					
ANR	5035556	InitializerList	1		5035129	2					
ANR	5035557	PrimaryExpression	1		5035129	0					
ANR	5035558	PrimaryExpression	2		5035129	1					
ANR	5035559	InitializerList	"""out"""		5035129	67					
ANR	5035560	PrimaryExpression	"""out"""		5035129	0					
ANR	5035561	PrimaryExpression	"""io[#] = #"""		5035129	1					
ANR	5035562	InitializerList	1		5035129	2					
ANR	5035563	PrimaryExpression	1		5035129	0					
ANR	5035564	PrimaryExpression	2		5035129	1					
ANR	5035565	InitializerList	"""pop"""		5035129	68					
ANR	5035566	PrimaryExpression	"""pop"""		5035129	0					
ANR	5035567	PrimaryExpression	"""pop #"""		5035129	1					
ANR	5035568	InitializerList	1		5035129	2					
ANR	5035569	PrimaryExpression	1		5035129	0					
ANR	5035570	InitializerList	"""push"""		5035129	69					
ANR	5035571	PrimaryExpression	"""push"""		5035129	0					
ANR	5035572	PrimaryExpression	"""push #"""		5035129	1					
ANR	5035573	InitializerList	1		5035129	2					
ANR	5035574	PrimaryExpression	1		5035129	0					
ANR	5035575	InitializerList	"""ret"""		5035129	70					
ANR	5035576	PrimaryExpression	"""ret"""		5035129	0					
ANR	5035577	PrimaryExpression	"""return"""		5035129	1					
ANR	5035578	InitializerList	0		5035129	2					
ANR	5035579	PrimaryExpression	0		5035129	0					
ANR	5035580	InitializerList	"""sal"""		5035129	71					
ANR	5035581	PrimaryExpression	"""sal"""		5035129	0					
ANR	5035582	PrimaryExpression	"""# <<= #"""		5035129	1					
ANR	5035583	InitializerList	1		5035129	2					
ANR	5035584	PrimaryExpression	1		5035129	0					
ANR	5035585	PrimaryExpression	2		5035129	1					
ANR	5035586	InitializerList	"""sar"""		5035129	72					
ANR	5035587	PrimaryExpression	"""sar"""		5035129	0					
ANR	5035588	PrimaryExpression	"""# >>= #"""		5035129	1					
ANR	5035589	InitializerList	1		5035129	2					
ANR	5035590	PrimaryExpression	1		5035129	0					
ANR	5035591	PrimaryExpression	2		5035129	1					
ANR	5035592	InitializerList	"""sete"""		5035129	73					
ANR	5035593	PrimaryExpression	"""sete"""		5035129	0					
ANR	5035594	PrimaryExpression	"""# = e"""		5035129	1					
ANR	5035595	InitializerList	1		5035129	2					
ANR	5035596	PrimaryExpression	1		5035129	0					
ANR	5035597	InitializerList	"""setne"""		5035129	74					
ANR	5035598	PrimaryExpression	"""setne"""		5035129	0					
ANR	5035599	PrimaryExpression	"""# = ne"""		5035129	1					
ANR	5035600	InitializerList	1		5035129	2					
ANR	5035601	PrimaryExpression	1		5035129	0					
ANR	5035602	InitializerList	"""shl"""		5035129	75					
ANR	5035603	PrimaryExpression	"""shl"""		5035129	0					
ANR	5035604	PrimaryExpression	"""# <<<= #"""		5035129	1					
ANR	5035605	InitializerList	1		5035129	2					
ANR	5035606	PrimaryExpression	1		5035129	0					
ANR	5035607	PrimaryExpression	2		5035129	1					
ANR	5035608	InitializerList	"""shld"""		5035129	76					
ANR	5035609	PrimaryExpression	"""shld"""		5035129	0					
ANR	5035610	PrimaryExpression	"""# <<<= #"""		5035129	1					
ANR	5035611	InitializerList	1		5035129	2					
ANR	5035612	PrimaryExpression	1		5035129	0					
ANR	5035613	PrimaryExpression	2		5035129	1					
ANR	5035614	InitializerList	"""sbb"""		5035129	77					
ANR	5035615	PrimaryExpression	"""sbb"""		5035129	0					
ANR	5035616	PrimaryExpression	"""# = # - #"""		5035129	1					
ANR	5035617	InitializerList	1		5035129	2					
ANR	5035618	PrimaryExpression	1		5035129	0					
ANR	5035619	PrimaryExpression	1		5035129	1					
ANR	5035620	PrimaryExpression	2		5035129	2					
ANR	5035621	InitializerList	"""shr"""		5035129	78					
ANR	5035622	PrimaryExpression	"""shr"""		5035129	0					
ANR	5035623	PrimaryExpression	"""# >>>= #"""		5035129	1					
ANR	5035624	InitializerList	1		5035129	2					
ANR	5035625	PrimaryExpression	1		5035129	0					
ANR	5035626	PrimaryExpression	2		5035129	1					
ANR	5035627	InitializerList	"""shlr"""		5035129	79					
ANR	5035628	PrimaryExpression	"""shlr"""		5035129	0					
ANR	5035629	PrimaryExpression	"""# >>>= #"""		5035129	1					
ANR	5035630	InitializerList	1		5035129	2					
ANR	5035631	PrimaryExpression	1		5035129	0					
ANR	5035632	PrimaryExpression	2		5035129	1					
ANR	5035633	InitializerList	"""sub"""		5035129	80					
ANR	5035634	PrimaryExpression	"""sub"""		5035129	0					
ANR	5035635	PrimaryExpression	"""# -= #"""		5035129	1					
ANR	5035636	InitializerList	1		5035129	2					
ANR	5035637	PrimaryExpression	1		5035129	0					
ANR	5035638	PrimaryExpression	2		5035129	1					
ANR	5035639	InitializerList	"""swap"""		5035129	81					
ANR	5035640	PrimaryExpression	"""swap"""		5035129	0					
ANR	5035641	PrimaryExpression	"""var = #; # = #; # = var"""		5035129	1					
ANR	5035642	InitializerList	1		5035129	2					
ANR	5035643	PrimaryExpression	1		5035129	0					
ANR	5035644	PrimaryExpression	1		5035129	1					
ANR	5035645	PrimaryExpression	2		5035129	2					
ANR	5035646	PrimaryExpression	2		5035129	3					
ANR	5035647	InitializerList	"""test"""		5035129	82					
ANR	5035648	PrimaryExpression	"""test"""		5035129	0					
ANR	5035649	PrimaryExpression	"""var = # & #"""		5035129	1					
ANR	5035650	InitializerList	1		5035129	2					
ANR	5035651	PrimaryExpression	1		5035129	0					
ANR	5035652	PrimaryExpression	2		5035129	1					
ANR	5035653	InitializerList	"""xchg"""		5035129	83					
ANR	5035654	PrimaryExpression	"""xchg"""		5035129	0					
ANR	5035655	PrimaryExpression	"""#,# = #,#"""		5035129	1					
ANR	5035656	InitializerList	1		5035129	2					
ANR	5035657	PrimaryExpression	1		5035129	0					
ANR	5035658	PrimaryExpression	2		5035129	1					
ANR	5035659	PrimaryExpression	2		5035129	2					
ANR	5035660	PrimaryExpression	1		5035129	3					
ANR	5035661	InitializerList	"""xadd"""		5035129	84					
ANR	5035662	PrimaryExpression	"""xadd"""		5035129	0					
ANR	5035663	PrimaryExpression	"""#,# = #,#+#"""		5035129	1					
ANR	5035664	InitializerList	1		5035129	2					
ANR	5035665	PrimaryExpression	1		5035129	0					
ANR	5035666	PrimaryExpression	2		5035129	1					
ANR	5035667	PrimaryExpression	2		5035129	2					
ANR	5035668	PrimaryExpression	1		5035129	3					
ANR	5035669	PrimaryExpression	2		5035129	4					
ANR	5035670	InitializerList	"""xor"""		5035129	85					
ANR	5035671	PrimaryExpression	"""xor"""		5035129	0					
ANR	5035672	PrimaryExpression	"""# ^= #"""		5035129	1					
ANR	5035673	InitializerList	1		5035129	2					
ANR	5035674	PrimaryExpression	1		5035129	0					
ANR	5035675	PrimaryExpression	2		5035129	1					
ANR	5035676	InitializerList	NULL		5035129	86					
ANR	5035677	Identifier	NULL		5035129	0					
ANR	5035678	IfStatement	"if ( argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" ) )"		5035129	6					
ANR	5035679	Condition	"argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" )"	115:5:3881:3916	5035129	0	True				
ANR	5035680	AndExpression	"argc > 2 && ! strcmp ( argv [ 0 ] , ""xor"" )"		5035129	0		&&			
ANR	5035681	RelationalExpression	argc > 2		5035129	0		>			
ANR	5035682	Identifier	argc		5035129	0					
ANR	5035683	PrimaryExpression	2		5035129	1					
ANR	5035684	UnaryOperationExpression	"! strcmp ( argv [ 0 ] , ""xor"" )"		5035129	1					
ANR	5035685	UnaryOperator	!		5035129	0					
ANR	5035686	CallExpression	"strcmp ( argv [ 0 ] , ""xor"" )"		5035129	1					
ANR	5035687	Callee	strcmp		5035129	0					
ANR	5035688	Identifier	strcmp		5035129	0					
ANR	5035689	ArgumentList	argv [ 0 ]		5035129	1					
ANR	5035690	Argument	argv [ 0 ]		5035129	0					
ANR	5035691	ArrayIndexing	argv [ 0 ]		5035129	0					
ANR	5035692	Identifier	argv		5035129	0					
ANR	5035693	PrimaryExpression	0		5035129	1					
ANR	5035694	Argument	"""xor"""		5035129	1					
ANR	5035695	PrimaryExpression	"""xor"""		5035129	0					
ANR	5035696	CompoundStatement		101:43:3445:3445	5035129	1					
ANR	5035697	IfStatement	"if ( ! strcmp ( argv [ 1 ] , argv [ 2 ] ) )"		5035129	0					
ANR	5035698	Condition	"! strcmp ( argv [ 1 ] , argv [ 2 ] )"	116:6:3927:3952	5035129	0	True				
ANR	5035699	UnaryOperationExpression	"! strcmp ( argv [ 1 ] , argv [ 2 ] )"		5035129	0					
ANR	5035700	UnaryOperator	!		5035129	0					
ANR	5035701	CallExpression	"strcmp ( argv [ 1 ] , argv [ 2 ] )"		5035129	1					
ANR	5035702	Callee	strcmp		5035129	0					
ANR	5035703	Identifier	strcmp		5035129	0					
ANR	5035704	ArgumentList	argv [ 1 ]		5035129	1					
ANR	5035705	Argument	argv [ 1 ]		5035129	0					
ANR	5035706	ArrayIndexing	argv [ 1 ]		5035129	0					
ANR	5035707	Identifier	argv		5035129	0					
ANR	5035708	PrimaryExpression	1		5035129	1					
ANR	5035709	Argument	argv [ 2 ]		5035129	1					
ANR	5035710	ArrayIndexing	argv [ 2 ]		5035129	0					
ANR	5035711	Identifier	argv		5035129	0					
ANR	5035712	PrimaryExpression	2		5035129	1					
ANR	5035713	CompoundStatement		102:34:3481:3481	5035129	1					
ANR	5035714	ExpressionStatement	"argv [ 0 ] = ""mov"""	117:3:3960:3975	5035129	0	True				
ANR	5035715	AssignmentExpression	"argv [ 0 ] = ""mov"""		5035129	0		=			
ANR	5035716	ArrayIndexing	argv [ 0 ]		5035129	0					
ANR	5035717	Identifier	argv		5035129	0					
ANR	5035718	PrimaryExpression	0		5035129	1					
ANR	5035719	PrimaryExpression	"""mov"""		5035129	1					
ANR	5035720	ExpressionStatement	"argv [ 2 ] = ""0"""	118:3:3980:3993	5035129	1	True				
ANR	5035721	AssignmentExpression	"argv [ 2 ] = ""0"""		5035129	0		=			
ANR	5035722	ArrayIndexing	argv [ 2 ]		5035129	0					
ANR	5035723	Identifier	argv		5035129	0					
ANR	5035724	PrimaryExpression	2		5035129	1					
ANR	5035725	PrimaryExpression	"""0"""		5035129	1					
ANR	5035726	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5035129	7					
ANR	5035727	ForInit	i = 0 ;	121:6:4008:4013	5035129	0	True				
ANR	5035728	AssignmentExpression	i = 0		5035129	0		=			
ANR	5035729	Identifier	i		5035129	0					
ANR	5035730	PrimaryExpression	0		5035129	1					
ANR	5035731	Condition	ops [ i ] . op != NULL	121:13:4015:4031	5035129	1	True				
ANR	5035732	EqualityExpression	ops [ i ] . op != NULL		5035129	0		!=			
ANR	5035733	MemberAccess	ops [ i ] . op		5035129	0					
ANR	5035734	ArrayIndexing	ops [ i ]		5035129	0					
ANR	5035735	Identifier	ops		5035129	0					
ANR	5035736	Identifier	i		5035129	1					
ANR	5035737	Identifier	op		5035129	1					
ANR	5035738	Identifier	NULL		5035129	1					
ANR	5035739	PostIncDecOperationExpression	i ++	121:32:4034:4036	5035129	2	True				
ANR	5035740	Identifier	i		5035129	0					
ANR	5035741	IncDec	++		5035129	1					
ANR	5035742	CompoundStatement		107:37:3565:3565	5035129	3					
ANR	5035743	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5035129	0					
ANR	5035744	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	122:6:4047:4074	5035129	0	True				
ANR	5035745	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5035129	0					
ANR	5035746	UnaryOperator	!		5035129	0					
ANR	5035747	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5035129	1					
ANR	5035748	Callee	strcmp		5035129	0					
ANR	5035749	Identifier	strcmp		5035129	0					
ANR	5035750	ArgumentList	ops [ i ] . op		5035129	1					
ANR	5035751	Argument	ops [ i ] . op		5035129	0					
ANR	5035752	MemberAccess	ops [ i ] . op		5035129	0					
ANR	5035753	ArrayIndexing	ops [ i ]		5035129	0					
ANR	5035754	Identifier	ops		5035129	0					
ANR	5035755	Identifier	i		5035129	1					
ANR	5035756	Identifier	op		5035129	1					
ANR	5035757	Argument	argv [ 0 ]		5035129	1					
ANR	5035758	ArrayIndexing	argv [ 0 ]		5035129	0					
ANR	5035759	Identifier	argv		5035129	0					
ANR	5035760	PrimaryExpression	0		5035129	1					
ANR	5035761	CompoundStatement		108:36:3603:3603	5035129	1					
ANR	5035762	IfStatement	if ( newstr != NULL )		5035129	0					
ANR	5035763	Condition	newstr != NULL	123:7:4086:4099	5035129	0	True				
ANR	5035764	EqualityExpression	newstr != NULL		5035129	0		!=			
ANR	5035765	Identifier	newstr		5035129	0					
ANR	5035766	Identifier	NULL		5035129	1					
ANR	5035767	CompoundStatement		109:23:3628:3628	5035129	1					
ANR	5035768	ExpressionStatement	d = 0	124:4:4108:4113	5035129	0	True				
ANR	5035769	AssignmentExpression	d = 0		5035129	0		=			
ANR	5035770	Identifier	d		5035129	0					
ANR	5035771	PrimaryExpression	0		5035129	1					
ANR	5035772	ExpressionStatement	j = 0	125:4:4119:4124	5035129	1	True				
ANR	5035773	AssignmentExpression	j = 0		5035129	0		=			
ANR	5035774	Identifier	j		5035129	0					
ANR	5035775	PrimaryExpression	0		5035129	1					
ANR	5035776	ExpressionStatement	ch = ops [ i ] . str [ j ]	126:4:4130:4148	5035129	2	True				
ANR	5035777	AssignmentExpression	ch = ops [ i ] . str [ j ]		5035129	0		=			
ANR	5035778	Identifier	ch		5035129	0					
ANR	5035779	ArrayIndexing	ops [ i ] . str [ j ]		5035129	1					
ANR	5035780	MemberAccess	ops [ i ] . str		5035129	0					
ANR	5035781	ArrayIndexing	ops [ i ]		5035129	0					
ANR	5035782	Identifier	ops		5035129	0					
ANR	5035783	Identifier	i		5035129	1					
ANR	5035784	Identifier	str		5035129	1					
ANR	5035785	Identifier	j		5035129	1					
ANR	5035786	ForStatement	"for ( j = 0 , k = 0 ; ch != '\\0' ; j ++ , k ++ )"		5035129	3					
ANR	5035787	ForInit	"j = 0 , k = 0 ;"	127:9:4159:4171	5035129	0	True				
ANR	5035788	Expression	"j = 0 , k = 0"		5035129	0					
ANR	5035789	AssignmentExpression	j = 0		5035129	0		=			
ANR	5035790	Identifier	j		5035129	0					
ANR	5035791	PrimaryExpression	0		5035129	1					
ANR	5035792	AssignmentExpression	k = 0		5035129	1		=			
ANR	5035793	Identifier	k		5035129	0					
ANR	5035794	PrimaryExpression	0		5035129	1					
ANR	5035795	Condition	ch != '\\0'	127:23:4173:4182	5035129	1	True				
ANR	5035796	EqualityExpression	ch != '\\0'		5035129	0		!=			
ANR	5035797	Identifier	ch		5035129	0					
ANR	5035798	PrimaryExpression	'\\0'		5035129	1					
ANR	5035799	Expression	"j ++ , k ++"	127:35:4185:4192	5035129	2	True				
ANR	5035800	PostIncDecOperationExpression	j ++		5035129	0					
ANR	5035801	Identifier	j		5035129	0					
ANR	5035802	IncDec	++		5035129	1					
ANR	5035803	PostIncDecOperationExpression	k ++		5035129	1					
ANR	5035804	Identifier	k		5035129	0					
ANR	5035805	IncDec	++		5035129	1					
ANR	5035806	CompoundStatement		113:45:3721:3721	5035129	3					
ANR	5035807	ExpressionStatement	ch = ops [ i ] . str [ j ]	128:5:4202:4220	5035129	0	True				
ANR	5035808	AssignmentExpression	ch = ops [ i ] . str [ j ]		5035129	0		=			
ANR	5035809	Identifier	ch		5035129	0					
ANR	5035810	ArrayIndexing	ops [ i ] . str [ j ]		5035129	1					
ANR	5035811	MemberAccess	ops [ i ] . str		5035129	0					
ANR	5035812	ArrayIndexing	ops [ i ]		5035129	0					
ANR	5035813	Identifier	ops		5035129	0					
ANR	5035814	Identifier	i		5035129	1					
ANR	5035815	Identifier	str		5035129	1					
ANR	5035816	Identifier	j		5035129	1					
ANR	5035817	IfStatement	if ( ch == '#' )		5035129	1					
ANR	5035818	Condition	ch == '#'	129:9:4231:4239	5035129	0	True				
ANR	5035819	EqualityExpression	ch == '#'		5035129	0		==			
ANR	5035820	Identifier	ch		5035129	0					
ANR	5035821	PrimaryExpression	'#'		5035129	1					
ANR	5035822	CompoundStatement		126:6:4000:4025	5035129	1					
ANR	5035823	IfStatement	if ( d >= MAXPSEUDOOPS )		5035129	0					
ANR	5035824	Condition	d >= MAXPSEUDOOPS	130:10:4254:4270	5035129	0	True				
ANR	5035825	RelationalExpression	d >= MAXPSEUDOOPS		5035129	0		>=			
ANR	5035826	Identifier	d		5035129	0					
ANR	5035827	Identifier	MAXPSEUDOOPS		5035129	1					
ANR	5035828	CompoundStatement		116:29:3799:3799	5035129	1					
ANR	5035829	ContinueStatement	continue ;	132:7:4321:4329	5035129	0	True				
ANR	5035830	IdentifierDeclStatement	int idx = ops [ i ] . args [ d ] ;	134:6:4345:4369	5035129	1	True				
ANR	5035831	IdentifierDecl	idx = ops [ i ] . args [ d ]		5035129	0					
ANR	5035832	IdentifierDeclType	int		5035129	0					
ANR	5035833	Identifier	idx		5035129	1					
ANR	5035834	AssignmentExpression	idx = ops [ i ] . args [ d ]		5035129	2		=			
ANR	5035835	Identifier	idx		5035129	0					
ANR	5035836	ArrayIndexing	ops [ i ] . args [ d ]		5035129	1					
ANR	5035837	MemberAccess	ops [ i ] . args		5035129	0					
ANR	5035838	ArrayIndexing	ops [ i ]		5035129	0					
ANR	5035839	Identifier	ops		5035129	0					
ANR	5035840	Identifier	i		5035129	1					
ANR	5035841	Identifier	args		5035129	1					
ANR	5035842	Identifier	d		5035129	1					
ANR	5035843	ExpressionStatement	d ++	135:6:4377:4380	5035129	2	True				
ANR	5035844	PostIncDecOperationExpression	d ++		5035129	0					
ANR	5035845	Identifier	d		5035129	0					
ANR	5035846	IncDec	++		5035129	1					
ANR	5035847	IfStatement	if ( idx <= 0 )		5035129	3					
ANR	5035848	Condition	idx <= 0	136:10:4392:4399	5035129	0	True				
ANR	5035849	RelationalExpression	idx <= 0		5035129	0		<=			
ANR	5035850	Identifier	idx		5035129	0					
ANR	5035851	PrimaryExpression	0		5035129	1					
ANR	5035852	CompoundStatement		122:20:3928:3928	5035129	1					
ANR	5035853	ContinueStatement	continue ;	138:7:4450:4458	5035129	0	True				
ANR	5035854	IdentifierDeclStatement	const char * w = argv [ idx ] ;	140:6:4474:4499	5035129	4	True				
ANR	5035855	IdentifierDecl	* w = argv [ idx ]		5035129	0					
ANR	5035856	IdentifierDeclType	const char *		5035129	0					
ANR	5035857	Identifier	w		5035129	1					
ANR	5035858	AssignmentExpression	* w = argv [ idx ]		5035129	2		=			
ANR	5035859	Identifier	w		5035129	0					
ANR	5035860	ArrayIndexing	argv [ idx ]		5035129	1					
ANR	5035861	Identifier	argv		5035129	0					
ANR	5035862	Identifier	idx		5035129	1					
ANR	5035863	IfStatement	if ( w != NULL )		5035129	5					
ANR	5035864	Condition	w != NULL	141:10:4511:4519	5035129	0	True				
ANR	5035865	EqualityExpression	w != NULL		5035129	0		!=			
ANR	5035866	Identifier	w		5035129	0					
ANR	5035867	Identifier	NULL		5035129	1					
ANR	5035868	CompoundStatement		127:21:4048:4048	5035129	1					
ANR	5035869	ExpressionStatement	"strcpy ( newstr + k , w )"	142:7:4531:4553	5035129	0	True				
ANR	5035870	CallExpression	"strcpy ( newstr + k , w )"		5035129	0					
ANR	5035871	Callee	strcpy		5035129	0					
ANR	5035872	Identifier	strcpy		5035129	0					
ANR	5035873	ArgumentList	newstr + k		5035129	1					
ANR	5035874	Argument	newstr + k		5035129	0					
ANR	5035875	AdditiveExpression	newstr + k		5035129	0		+			
ANR	5035876	Identifier	newstr		5035129	0					
ANR	5035877	Identifier	k		5035129	1					
ANR	5035878	Argument	w		5035129	1					
ANR	5035879	Identifier	w		5035129	0					
ANR	5035880	ExpressionStatement	k += strlen ( w ) - 1	143:7:4562:4581	5035129	1	True				
ANR	5035881	AssignmentExpression	k += strlen ( w ) - 1		5035129	0		+=			
ANR	5035882	Identifier	k		5035129	0					
ANR	5035883	AdditiveExpression	strlen ( w ) - 1		5035129	1		-			
ANR	5035884	CallExpression	strlen ( w )		5035129	0					
ANR	5035885	Callee	strlen		5035129	0					
ANR	5035886	Identifier	strlen		5035129	0					
ANR	5035887	ArgumentList	w		5035129	1					
ANR	5035888	Argument	w		5035129	0					
ANR	5035889	Identifier	w		5035129	0					
ANR	5035890	PrimaryExpression	1		5035129	1					
ANR	5035891	ElseStatement	else		5035129	0					
ANR	5035892	CompoundStatement		131:12:4129:4129	5035129	0					
ANR	5035893	ExpressionStatement	newstr [ k ] = ch	146:6:4611:4625	5035129	0	True				
ANR	5035894	AssignmentExpression	newstr [ k ] = ch		5035129	0		=			
ANR	5035895	ArrayIndexing	newstr [ k ]		5035129	0					
ANR	5035896	Identifier	newstr		5035129	0					
ANR	5035897	Identifier	k		5035129	1					
ANR	5035898	Identifier	ch		5035129	1					
ANR	5035899	ExpressionStatement	newstr [ k ] = '\\0'	149:4:4644:4660	5035129	4	True				
ANR	5035900	AssignmentExpression	newstr [ k ] = '\\0'		5035129	0		=			
ANR	5035901	ArrayIndexing	newstr [ k ]		5035129	0					
ANR	5035902	Identifier	newstr		5035129	0					
ANR	5035903	Identifier	k		5035129	1					
ANR	5035904	PrimaryExpression	'\\0'		5035129	1					
ANR	5035905	ReturnStatement	return true ;	151:3:4670:4681	5035129	1	True				
ANR	5035906	Identifier	true		5035129	0					
ANR	5035907	IfStatement	if ( newstr != NULL )		5035129	8					
ANR	5035908	Condition	newstr != NULL	156:5:4722:4735	5035129	0	True				
ANR	5035909	EqualityExpression	newstr != NULL		5035129	0		!=			
ANR	5035910	Identifier	newstr		5035129	0					
ANR	5035911	Identifier	NULL		5035129	1					
ANR	5035912	CompoundStatement		142:21:4264:4264	5035129	1					
ANR	5035913	ExpressionStatement	newstr [ 0 ] = '\\0'	157:2:4742:4758	5035129	0	True				
ANR	5035914	AssignmentExpression	newstr [ 0 ] = '\\0'		5035129	0		=			
ANR	5035915	ArrayIndexing	newstr [ 0 ]		5035129	0					
ANR	5035916	Identifier	newstr		5035129	0					
ANR	5035917	PrimaryExpression	0		5035129	1					
ANR	5035918	PrimaryExpression	'\\0'		5035129	1					
ANR	5035919	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5035129	1					
ANR	5035920	ForInit	i = 0 ;	158:7:4767:4770	5035129	0	True				
ANR	5035921	AssignmentExpression	i = 0		5035129	0		=			
ANR	5035922	Identifier	i		5035129	0					
ANR	5035923	PrimaryExpression	0		5035129	1					
ANR	5035924	Condition	i < argc	158:12:4772:4777	5035129	1	True				
ANR	5035925	RelationalExpression	i < argc		5035129	0		<			
ANR	5035926	Identifier	i		5035129	0					
ANR	5035927	Identifier	argc		5035129	1					
ANR	5035928	PostIncDecOperationExpression	i ++	158:20:4780:4782	5035129	2	True				
ANR	5035929	Identifier	i		5035129	0					
ANR	5035930	IncDec	++		5035129	1					
ANR	5035931	CompoundStatement		144:25:4311:4311	5035129	3					
ANR	5035932	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	159:3:4790:4814	5035129	0	True				
ANR	5035933	CallExpression	"strcat ( newstr , argv [ i ] )"		5035129	0					
ANR	5035934	Callee	strcat		5035129	0					
ANR	5035935	Identifier	strcat		5035129	0					
ANR	5035936	ArgumentList	newstr		5035129	1					
ANR	5035937	Argument	newstr		5035129	0					
ANR	5035938	Identifier	newstr		5035129	0					
ANR	5035939	Argument	argv [ i ]		5035129	1					
ANR	5035940	ArrayIndexing	argv [ i ]		5035129	0					
ANR	5035941	Identifier	argv		5035129	0					
ANR	5035942	Identifier	i		5035129	1					
ANR	5035943	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"	160:3:4819:4868	5035129	1	True				
ANR	5035944	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"		5035129	0					
ANR	5035945	Callee	strcat		5035129	0					
ANR	5035946	Identifier	strcat		5035129	0					
ANR	5035947	ArgumentList	newstr		5035129	1					
ANR	5035948	Argument	newstr		5035129	0					
ANR	5035949	Identifier	newstr		5035129	0					
ANR	5035950	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5035129	1					
ANR	5035951	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5035129	0					
ANR	5035952	Condition	i == 0 || i == argc - 1		5035129	0					
ANR	5035953	OrExpression	i == 0 || i == argc - 1		5035129	0		||			
ANR	5035954	EqualityExpression	i == 0		5035129	0		==			
ANR	5035955	Identifier	i		5035129	0					
ANR	5035956	PrimaryExpression	0		5035129	1					
ANR	5035957	EqualityExpression	i == argc - 1		5035129	1		==			
ANR	5035958	Identifier	i		5035129	0					
ANR	5035959	AdditiveExpression	argc - 1		5035129	1		-			
ANR	5035960	Identifier	argc		5035129	0					
ANR	5035961	PrimaryExpression	1		5035129	1					
ANR	5035962	PrimaryExpression	""" """		5035129	1					
ANR	5035963	PrimaryExpression	""","""		5035129	2					
ANR	5035964	ReturnStatement	return false ;	163:1:4878:4890	5035129	9	True				
ANR	5035965	Identifier	false		5035129	0					
ANR	5035966	Statement	undef	164:1:4893:4897	5035129	10	True				
ANR	5035967	Statement	MAXPSEUDOOPS	164:7:4899:4910	5035129	11	True				
ANR	5035968	ReturnType	static int		5035129	1					
ANR	5035969	Identifier	replace		5035129	2					
ANR	5035970	ParameterList	"int argc , char * argv [ ] , char * newstr"		5035129	3					
ANR	5035971	Parameter	int argc	15:20:435:442	5035129	0	True				
ANR	5035972	ParameterType	int		5035129	0					
ANR	5035973	Identifier	argc		5035129	1					
ANR	5035974	Parameter	char * argv [ ]	15:30:445:456	5035129	1	True				
ANR	5035975	ParameterType	char * [ ]		5035129	0					
ANR	5035976	Identifier	argv		5035129	1					
ANR	5035977	Parameter	char * newstr	15:44:459:470	5035129	2	True				
ANR	5035978	ParameterType	char *		5035129	0					
ANR	5035979	Identifier	newstr		5035129	1					
ANR	5035980	CFGEntryNode	ENTRY		5035129		True				
ANR	5035981	CFGExitNode	EXIT		5035129		True				
ANR	5035982	Symbol	* ops [ i ] . str		5035129						
ANR	5035983	Symbol	* * ops		5035129						
ANR	5035984	Symbol	* argv		5035129						
ANR	5035985	Symbol	* ops [ i ] . args		5035129						
ANR	5035986	Symbol	argv		5035129						
ANR	5035987	Symbol	ops [ i ] . str		5035129						
ANR	5035988	Symbol	strlen		5035129						
ANR	5035989	Symbol	ops [ i ] . op		5035129						
ANR	5035990	Symbol	* idx		5035129						
ANR	5035991	Symbol	* ops		5035129						
ANR	5035992	Symbol	argc		5035129						
ANR	5035993	Symbol	strcmp		5035129						
ANR	5035994	Symbol	* * i		5035129						
ANR	5035995	Symbol	NULL		5035129						
ANR	5035996	Symbol	d		5035129						
ANR	5035997	Symbol	ch		5035129						
ANR	5035998	Symbol	false		5035129						
ANR	5035999	Symbol	i		5035129						
ANR	5036000	Symbol	j		5035129						
ANR	5036001	Symbol	k		5035129						
ANR	5036002	Symbol	newstr		5035129						
ANR	5036003	Symbol	* d		5035129						
ANR	5036004	Symbol	MAXPSEUDOOPS		5035129						
ANR	5036005	Symbol	ops [ i ] . args		5035129						
ANR	5036006	Symbol	ops		5035129						
ANR	5036007	Symbol	* i		5035129						
ANR	5036008	Symbol	* newstr		5035129						
ANR	5036009	Symbol	* j		5035129						
ANR	5036010	Symbol	* k		5035129						
ANR	5036011	Symbol	w		5035129						
ANR	5036012	Symbol	true		5035129						
ANR	5036013	Symbol	idx		5035129						
ANR	5036014	Function	parse	167:0:4915:7851							
ANR	5036015	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5036014	0					
ANR	5036016	CompoundStatement		167:58:4973:7851	5036014	0					
ANR	5036017	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] , w3 [ 256 ] ;"	168:1:4976:5015	5036014	0	True				
ANR	5036018	IdentifierDecl	w0 [ 256 ]		5036014	0					
ANR	5036019	IdentifierDeclType	char [ 256 ]		5036014	0					
ANR	5036020	Identifier	w0		5036014	1					
ANR	5036021	PrimaryExpression	256		5036014	2					
ANR	5036022	IdentifierDecl	w1 [ 256 ]		5036014	1					
ANR	5036023	IdentifierDeclType	char [ 256 ]		5036014	0					
ANR	5036024	Identifier	w1		5036014	1					
ANR	5036025	PrimaryExpression	256		5036014	2					
ANR	5036026	IdentifierDecl	w2 [ 256 ]		5036014	2					
ANR	5036027	IdentifierDeclType	char [ 256 ]		5036014	0					
ANR	5036028	Identifier	w2		5036014	1					
ANR	5036029	PrimaryExpression	256		5036014	2					
ANR	5036030	IdentifierDecl	w3 [ 256 ]		5036014	3					
ANR	5036031	IdentifierDeclType	char [ 256 ]		5036014	0					
ANR	5036032	Identifier	w3		5036014	1					
ANR	5036033	PrimaryExpression	256		5036014	2					
ANR	5036034	IdentifierDeclStatement	int i ;	169:1:5018:5023	5036014	1	True				
ANR	5036035	IdentifierDecl	i		5036014	0					
ANR	5036036	IdentifierDeclType	int		5036014	0					
ANR	5036037	Identifier	i		5036014	1					
ANR	5036038	IdentifierDeclStatement	size_t len = strlen ( data ) ;	170:1:5026:5052	5036014	2	True				
ANR	5036039	IdentifierDecl	len = strlen ( data )		5036014	0					
ANR	5036040	IdentifierDeclType	size_t		5036014	0					
ANR	5036041	Identifier	len		5036014	1					
ANR	5036042	AssignmentExpression	len = strlen ( data )		5036014	2		=			
ANR	5036043	Identifier	len		5036014	0					
ANR	5036044	CallExpression	strlen ( data )		5036014	1					
ANR	5036045	Callee	strlen		5036014	0					
ANR	5036046	Identifier	strlen		5036014	0					
ANR	5036047	ArgumentList	data		5036014	1					
ANR	5036048	Argument	data		5036014	0					
ANR	5036049	Identifier	data		5036014	0					
ANR	5036050	IdentifierDeclStatement	int sz = 32 ;	171:1:5055:5066	5036014	3	True				
ANR	5036051	IdentifierDecl	sz = 32		5036014	0					
ANR	5036052	IdentifierDeclType	int		5036014	0					
ANR	5036053	Identifier	sz		5036014	1					
ANR	5036054	AssignmentExpression	sz = 32		5036014	2		=			
ANR	5036055	Identifier	sz		5036014	0					
ANR	5036056	PrimaryExpression	32		5036014	1					
ANR	5036057	IdentifierDeclStatement	"char * buf , * ptr , * optr , * end ;"	172:1:5069:5097	5036014	4	True				
ANR	5036058	IdentifierDecl	* buf		5036014	0					
ANR	5036059	IdentifierDeclType	char *		5036014	0					
ANR	5036060	Identifier	buf		5036014	1					
ANR	5036061	IdentifierDecl	* ptr		5036014	1					
ANR	5036062	IdentifierDeclType	char *		5036014	0					
ANR	5036063	Identifier	ptr		5036014	1					
ANR	5036064	IdentifierDecl	* optr		5036014	2					
ANR	5036065	IdentifierDeclType	char *		5036014	0					
ANR	5036066	Identifier	optr		5036014	1					
ANR	5036067	IdentifierDecl	* end		5036014	3					
ANR	5036068	IdentifierDeclType	char *		5036014	0					
ANR	5036069	Identifier	end		5036014	1					
ANR	5036070	IfStatement	if ( len >= sizeof ( w0 ) || sz >= sizeof ( w0 ) )		5036014	5					
ANR	5036071	Condition	len >= sizeof ( w0 ) || sz >= sizeof ( w0 )	173:5:5104:5142	5036014	0	True				
ANR	5036072	OrExpression	len >= sizeof ( w0 ) || sz >= sizeof ( w0 )		5036014	0		||			
ANR	5036073	RelationalExpression	len >= sizeof ( w0 )		5036014	0		>=			
ANR	5036074	Identifier	len		5036014	0					
ANR	5036075	SizeofExpression	sizeof ( w0 )		5036014	1					
ANR	5036076	Sizeof	sizeof		5036014	0					
ANR	5036077	SizeofOperand	w0		5036014	1					
ANR	5036078	RelationalExpression	sz >= sizeof ( w0 )		5036014	1		>=			
ANR	5036079	Identifier	sz		5036014	0					
ANR	5036080	SizeofExpression	sizeof ( w0 )		5036014	1					
ANR	5036081	Sizeof	sizeof		5036014	0					
ANR	5036082	SizeofOperand	w0		5036014	1					
ANR	5036083	CompoundStatement		7:46:171:171	5036014	1					
ANR	5036084	ReturnStatement	return false ;	174:2:5149:5161	5036014	0	True				
ANR	5036085	Identifier	false		5036014	0					
ANR	5036086	IfStatement	if ( ! ( buf = strdup ( data ) ) )		5036014	6					
ANR	5036087	Condition	! ( buf = strdup ( data ) )	177:5:5202:5223	5036014	0	True				
ANR	5036088	UnaryOperationExpression	! ( buf = strdup ( data ) )		5036014	0					
ANR	5036089	UnaryOperator	!		5036014	0					
ANR	5036090	AssignmentExpression	buf = strdup ( data )		5036014	1		=			
ANR	5036091	Identifier	buf		5036014	0					
ANR	5036092	CallExpression	strdup ( data )		5036014	1					
ANR	5036093	Callee	strdup		5036014	0					
ANR	5036094	Identifier	strdup		5036014	0					
ANR	5036095	ArgumentList	data		5036014	1					
ANR	5036096	Argument	data		5036014	0					
ANR	5036097	Identifier	data		5036014	0					
ANR	5036098	CompoundStatement		11:29:252:252	5036014	1					
ANR	5036099	ReturnStatement	return false ;	178:2:5230:5242	5036014	0	True				
ANR	5036100	Identifier	false		5036014	0					
ANR	5036101	ExpressionStatement	* w0 = * w1 = * w2 = * w3 = '\\0'	180:1:5248:5276	5036014	7	True				
ANR	5036102	AssignmentExpression	* w0 = * w1 = * w2 = * w3 = '\\0'		5036014	0		=			
ANR	5036103	UnaryOperationExpression	* w0		5036014	0					
ANR	5036104	UnaryOperator	*		5036014	0					
ANR	5036105	Identifier	w0		5036014	1					
ANR	5036106	AssignmentExpression	* w1 = * w2 = * w3 = '\\0'		5036014	1		=			
ANR	5036107	UnaryOperationExpression	* w1		5036014	0					
ANR	5036108	UnaryOperator	*		5036014	0					
ANR	5036109	Identifier	w1		5036014	1					
ANR	5036110	AssignmentExpression	* w2 = * w3 = '\\0'		5036014	1		=			
ANR	5036111	UnaryOperationExpression	* w2		5036014	0					
ANR	5036112	UnaryOperator	*		5036014	0					
ANR	5036113	Identifier	w2		5036014	1					
ANR	5036114	AssignmentExpression	* w3 = '\\0'		5036014	1		=			
ANR	5036115	UnaryOperationExpression	* w3		5036014	0					
ANR	5036116	UnaryOperator	*		5036014	0					
ANR	5036117	Identifier	w3		5036014	1					
ANR	5036118	PrimaryExpression	'\\0'		5036014	1					
ANR	5036119	IfStatement	if ( * buf )		5036014	8					
ANR	5036120	Condition	* buf	181:5:5283:5286	5036014	0	True				
ANR	5036121	UnaryOperationExpression	* buf		5036014	0					
ANR	5036122	UnaryOperator	*		5036014	0					
ANR	5036123	Identifier	buf		5036014	1					
ANR	5036124	CompoundStatement		15:11:315:315	5036014	1					
ANR	5036125	ExpressionStatement	"end = strchr ( buf , '\\0' )"	182:2:5293:5317	5036014	0	True				
ANR	5036126	AssignmentExpression	"end = strchr ( buf , '\\0' )"		5036014	0		=			
ANR	5036127	Identifier	end		5036014	0					
ANR	5036128	CallExpression	"strchr ( buf , '\\0' )"		5036014	1					
ANR	5036129	Callee	strchr		5036014	0					
ANR	5036130	Identifier	strchr		5036014	0					
ANR	5036131	ArgumentList	buf		5036014	1					
ANR	5036132	Argument	buf		5036014	0					
ANR	5036133	Identifier	buf		5036014	0					
ANR	5036134	Argument	'\\0'		5036014	1					
ANR	5036135	PrimaryExpression	'\\0'		5036014	0					
ANR	5036136	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	183:2:5321:5344	5036014	1	True				
ANR	5036137	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5036014	0		=			
ANR	5036138	Identifier	ptr		5036014	0					
ANR	5036139	CallExpression	"strchr ( buf , ' ' )"		5036014	1					
ANR	5036140	Callee	strchr		5036014	0					
ANR	5036141	Identifier	strchr		5036014	0					
ANR	5036142	ArgumentList	buf		5036014	1					
ANR	5036143	Argument	buf		5036014	0					
ANR	5036144	Identifier	buf		5036014	0					
ANR	5036145	Argument	' '		5036014	1					
ANR	5036146	PrimaryExpression	' '		5036014	0					
ANR	5036147	IfStatement	if ( ! ptr )		5036014	2					
ANR	5036148	Condition	! ptr	184:6:5352:5355	5036014	0	True				
ANR	5036149	UnaryOperationExpression	! ptr		5036014	0					
ANR	5036150	UnaryOperator	!		5036014	0					
ANR	5036151	Identifier	ptr		5036014	1					
ANR	5036152	CompoundStatement		18:12:384:384	5036014	1					
ANR	5036153	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	185:3:5363:5387	5036014	0	True				
ANR	5036154	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5036014	0		=			
ANR	5036155	Identifier	ptr		5036014	0					
ANR	5036156	CallExpression	"strchr ( buf , '\\t' )"		5036014	1					
ANR	5036157	Callee	strchr		5036014	0					
ANR	5036158	Identifier	strchr		5036014	0					
ANR	5036159	ArgumentList	buf		5036014	1					
ANR	5036160	Argument	buf		5036014	0					
ANR	5036161	Identifier	buf		5036014	0					
ANR	5036162	Argument	'\\t'		5036014	1					
ANR	5036163	PrimaryExpression	'\\t'		5036014	0					
ANR	5036164	IfStatement	if ( ! ptr )		5036014	3					
ANR	5036165	Condition	! ptr	187:6:5399:5402	5036014	0	True				
ANR	5036166	UnaryOperationExpression	! ptr		5036014	0					
ANR	5036167	UnaryOperator	!		5036014	0					
ANR	5036168	Identifier	ptr		5036014	1					
ANR	5036169	CompoundStatement		21:12:431:431	5036014	1					
ANR	5036170	ExpressionStatement	ptr = end	188:3:5410:5419	5036014	0	True				
ANR	5036171	AssignmentExpression	ptr = end		5036014	0		=			
ANR	5036172	Identifier	ptr		5036014	0					
ANR	5036173	Identifier	end		5036014	1					
ANR	5036174	ExpressionStatement	* ptr = '\\0'	190:2:5427:5438	5036014	4	True				
ANR	5036175	AssignmentExpression	* ptr = '\\0'		5036014	0		=			
ANR	5036176	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036177	UnaryOperator	*		5036014	0					
ANR	5036178	Identifier	ptr		5036014	1					
ANR	5036179	PrimaryExpression	'\\0'		5036014	1					
ANR	5036180	IfStatement	if ( ptr != end )		5036014	5					
ANR	5036181	Condition	ptr != end	191:6:5446:5455	5036014	0	True				
ANR	5036182	EqualityExpression	ptr != end		5036014	0		!=			
ANR	5036183	Identifier	ptr		5036014	0					
ANR	5036184	Identifier	end		5036014	1					
ANR	5036185	CompoundStatement		25:18:484:484	5036014	1					
ANR	5036186	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5036014	0					
ANR	5036187	ForInit	++ ptr ;	192:8:5468:5473	5036014	0	True				
ANR	5036188	UnaryExpression	++ ptr		5036014	0					
ANR	5036189	IncDec	++		5036014	0					
ANR	5036190	Identifier	ptr		5036014	1					
ANR	5036191	Condition	* ptr == ' '	192:15:5475:5485	5036014	1	True				
ANR	5036192	EqualityExpression	* ptr == ' '		5036014	0		==			
ANR	5036193	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036194	UnaryOperator	*		5036014	0					
ANR	5036195	Identifier	ptr		5036014	1					
ANR	5036196	PrimaryExpression	' '		5036014	1					
ANR	5036197	PostIncDecOperationExpression	ptr ++	192:28:5488:5492	5036014	2	True				
ANR	5036198	Identifier	ptr		5036014	0					
ANR	5036199	IncDec	++		5036014	1					
ANR	5036200	CompoundStatement		26:35:521:521	5036014	3					
ANR	5036201	ExpressionStatement		193:4:5501:5501	5036014	0	True				
ANR	5036202	ExpressionStatement	"r_str_ncpy ( w0 , buf , sizeof ( w0 ) )"	196:2:5514:5547	5036014	6	True				
ANR	5036203	CallExpression	"r_str_ncpy ( w0 , buf , sizeof ( w0 ) )"		5036014	0					
ANR	5036204	Callee	r_str_ncpy		5036014	0					
ANR	5036205	Identifier	r_str_ncpy		5036014	0					
ANR	5036206	ArgumentList	w0		5036014	1					
ANR	5036207	Argument	w0		5036014	0					
ANR	5036208	Identifier	w0		5036014	0					
ANR	5036209	Argument	buf		5036014	1					
ANR	5036210	Identifier	buf		5036014	0					
ANR	5036211	Argument	sizeof ( w0 )		5036014	2					
ANR	5036212	SizeofExpression	sizeof ( w0 )		5036014	0					
ANR	5036213	Sizeof	sizeof		5036014	0					
ANR	5036214	SizeofOperand	w0		5036014	1					
ANR	5036215	ExpressionStatement	"r_str_ncpy ( w1 , ptr , sizeof ( w1 ) )"	197:2:5551:5584	5036014	7	True				
ANR	5036216	CallExpression	"r_str_ncpy ( w1 , ptr , sizeof ( w1 ) )"		5036014	0					
ANR	5036217	Callee	r_str_ncpy		5036014	0					
ANR	5036218	Identifier	r_str_ncpy		5036014	0					
ANR	5036219	ArgumentList	w1		5036014	1					
ANR	5036220	Argument	w1		5036014	0					
ANR	5036221	Identifier	w1		5036014	0					
ANR	5036222	Argument	ptr		5036014	1					
ANR	5036223	Identifier	ptr		5036014	0					
ANR	5036224	Argument	sizeof ( w1 )		5036014	2					
ANR	5036225	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036226	Sizeof	sizeof		5036014	0					
ANR	5036227	SizeofOperand	w1		5036014	1					
ANR	5036228	ExpressionStatement	optr = ptr	198:2:5588:5598	5036014	8	True				
ANR	5036229	AssignmentExpression	optr = ptr		5036014	0		=			
ANR	5036230	Identifier	optr		5036014	0					
ANR	5036231	Identifier	ptr		5036014	1					
ANR	5036232	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	199:2:5602:5625	5036014	9	True				
ANR	5036233	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5036014	0		=			
ANR	5036234	Identifier	ptr		5036014	0					
ANR	5036235	CallExpression	"strchr ( ptr , ',' )"		5036014	1					
ANR	5036236	Callee	strchr		5036014	0					
ANR	5036237	Identifier	strchr		5036014	0					
ANR	5036238	ArgumentList	ptr		5036014	1					
ANR	5036239	Argument	ptr		5036014	0					
ANR	5036240	Identifier	ptr		5036014	0					
ANR	5036241	Argument	"','"		5036014	1					
ANR	5036242	PrimaryExpression	"','"		5036014	0					
ANR	5036243	IfStatement	if ( ptr )		5036014	10					
ANR	5036244	Condition	ptr	200:6:5633:5635	5036014	0	True				
ANR	5036245	Identifier	ptr		5036014	0					
ANR	5036246	CompoundStatement		34:11:664:664	5036014	1					
ANR	5036247	ExpressionStatement	* ptr = '\\0'	201:3:5643:5654	5036014	0	True				
ANR	5036248	AssignmentExpression	* ptr = '\\0'		5036014	0		=			
ANR	5036249	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036250	UnaryOperator	*		5036014	0					
ANR	5036251	Identifier	ptr		5036014	1					
ANR	5036252	PrimaryExpression	'\\0'		5036014	1					
ANR	5036253	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5036014	1					
ANR	5036254	ForInit	++ ptr ;	202:8:5664:5669	5036014	0	True				
ANR	5036255	UnaryExpression	++ ptr		5036014	0					
ANR	5036256	IncDec	++		5036014	0					
ANR	5036257	Identifier	ptr		5036014	1					
ANR	5036258	Condition	* ptr == ' '	202:15:5671:5681	5036014	1	True				
ANR	5036259	EqualityExpression	* ptr == ' '		5036014	0		==			
ANR	5036260	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036261	UnaryOperator	*		5036014	0					
ANR	5036262	Identifier	ptr		5036014	1					
ANR	5036263	PrimaryExpression	' '		5036014	1					
ANR	5036264	PostIncDecOperationExpression	ptr ++	202:28:5684:5688	5036014	2	True				
ANR	5036265	Identifier	ptr		5036014	0					
ANR	5036266	IncDec	++		5036014	1					
ANR	5036267	CompoundStatement		36:35:717:717	5036014	3					
ANR	5036268	ExpressionStatement		203:4:5697:5697	5036014	0	True				
ANR	5036269	ExpressionStatement	"r_str_ncpy ( w1 , optr , sizeof ( w1 ) )"	205:3:5707:5741	5036014	2	True				
ANR	5036270	CallExpression	"r_str_ncpy ( w1 , optr , sizeof ( w1 ) )"		5036014	0					
ANR	5036271	Callee	r_str_ncpy		5036014	0					
ANR	5036272	Identifier	r_str_ncpy		5036014	0					
ANR	5036273	ArgumentList	w1		5036014	1					
ANR	5036274	Argument	w1		5036014	0					
ANR	5036275	Identifier	w1		5036014	0					
ANR	5036276	Argument	optr		5036014	1					
ANR	5036277	Identifier	optr		5036014	0					
ANR	5036278	Argument	sizeof ( w1 )		5036014	2					
ANR	5036279	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036280	Sizeof	sizeof		5036014	0					
ANR	5036281	SizeofOperand	w1		5036014	1					
ANR	5036282	ExpressionStatement	"r_str_ncpy ( w2 , ptr , sizeof ( w2 ) )"	206:3:5746:5779	5036014	3	True				
ANR	5036283	CallExpression	"r_str_ncpy ( w2 , ptr , sizeof ( w2 ) )"		5036014	0					
ANR	5036284	Callee	r_str_ncpy		5036014	0					
ANR	5036285	Identifier	r_str_ncpy		5036014	0					
ANR	5036286	ArgumentList	w2		5036014	1					
ANR	5036287	Argument	w2		5036014	0					
ANR	5036288	Identifier	w2		5036014	0					
ANR	5036289	Argument	ptr		5036014	1					
ANR	5036290	Identifier	ptr		5036014	0					
ANR	5036291	Argument	sizeof ( w2 )		5036014	2					
ANR	5036292	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036293	Sizeof	sizeof		5036014	0					
ANR	5036294	SizeofOperand	w2		5036014	1					
ANR	5036295	ExpressionStatement	optr = ptr	207:3:5784:5794	5036014	4	True				
ANR	5036296	AssignmentExpression	optr = ptr		5036014	0		=			
ANR	5036297	Identifier	optr		5036014	0					
ANR	5036298	Identifier	ptr		5036014	1					
ANR	5036299	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	208:3:5799:5822	5036014	5	True				
ANR	5036300	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5036014	0		=			
ANR	5036301	Identifier	ptr		5036014	0					
ANR	5036302	CallExpression	"strchr ( ptr , ',' )"		5036014	1					
ANR	5036303	Callee	strchr		5036014	0					
ANR	5036304	Identifier	strchr		5036014	0					
ANR	5036305	ArgumentList	ptr		5036014	1					
ANR	5036306	Argument	ptr		5036014	0					
ANR	5036307	Identifier	ptr		5036014	0					
ANR	5036308	Argument	"','"		5036014	1					
ANR	5036309	PrimaryExpression	"','"		5036014	0					
ANR	5036310	IfStatement	if ( ptr )		5036014	6					
ANR	5036311	Condition	ptr	209:7:5831:5833	5036014	0	True				
ANR	5036312	Identifier	ptr		5036014	0					
ANR	5036313	CompoundStatement		43:12:862:862	5036014	1					
ANR	5036314	ExpressionStatement	* ptr = '\\0'	210:4:5842:5853	5036014	0	True				
ANR	5036315	AssignmentExpression	* ptr = '\\0'		5036014	0		=			
ANR	5036316	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036317	UnaryOperator	*		5036014	0					
ANR	5036318	Identifier	ptr		5036014	1					
ANR	5036319	PrimaryExpression	'\\0'		5036014	1					
ANR	5036320	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5036014	1					
ANR	5036321	ForInit	++ ptr ;	211:9:5864:5869	5036014	0	True				
ANR	5036322	UnaryExpression	++ ptr		5036014	0					
ANR	5036323	IncDec	++		5036014	0					
ANR	5036324	Identifier	ptr		5036014	1					
ANR	5036325	Condition	* ptr == ' '	211:16:5871:5881	5036014	1	True				
ANR	5036326	EqualityExpression	* ptr == ' '		5036014	0		==			
ANR	5036327	UnaryOperationExpression	* ptr		5036014	0					
ANR	5036328	UnaryOperator	*		5036014	0					
ANR	5036329	Identifier	ptr		5036014	1					
ANR	5036330	PrimaryExpression	' '		5036014	1					
ANR	5036331	PostIncDecOperationExpression	ptr ++	211:29:5884:5888	5036014	2	True				
ANR	5036332	Identifier	ptr		5036014	0					
ANR	5036333	IncDec	++		5036014	1					
ANR	5036334	CompoundStatement		45:36:917:917	5036014	3					
ANR	5036335	ExpressionStatement		212:5:5898:5898	5036014	0	True				
ANR	5036336	ExpressionStatement	"r_str_ncpy ( w2 , optr , sizeof ( w2 ) )"	214:4:5910:5944	5036014	2	True				
ANR	5036337	CallExpression	"r_str_ncpy ( w2 , optr , sizeof ( w2 ) )"		5036014	0					
ANR	5036338	Callee	r_str_ncpy		5036014	0					
ANR	5036339	Identifier	r_str_ncpy		5036014	0					
ANR	5036340	ArgumentList	w2		5036014	1					
ANR	5036341	Argument	w2		5036014	0					
ANR	5036342	Identifier	w2		5036014	0					
ANR	5036343	Argument	optr		5036014	1					
ANR	5036344	Identifier	optr		5036014	0					
ANR	5036345	Argument	sizeof ( w2 )		5036014	2					
ANR	5036346	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036347	Sizeof	sizeof		5036014	0					
ANR	5036348	SizeofOperand	w2		5036014	1					
ANR	5036349	ExpressionStatement	"r_str_ncpy ( w3 , ptr , sizeof ( w3 ) )"	215:4:5950:5983	5036014	3	True				
ANR	5036350	CallExpression	"r_str_ncpy ( w3 , ptr , sizeof ( w3 ) )"		5036014	0					
ANR	5036351	Callee	r_str_ncpy		5036014	0					
ANR	5036352	Identifier	r_str_ncpy		5036014	0					
ANR	5036353	ArgumentList	w3		5036014	1					
ANR	5036354	Argument	w3		5036014	0					
ANR	5036355	Identifier	w3		5036014	0					
ANR	5036356	Argument	ptr		5036014	1					
ANR	5036357	Identifier	ptr		5036014	0					
ANR	5036358	Argument	sizeof ( w3 )		5036014	2					
ANR	5036359	SizeofExpression	sizeof ( w3 )		5036014	0					
ANR	5036360	Sizeof	sizeof		5036014	0					
ANR	5036361	SizeofOperand	w3		5036014	1					
ANR	5036362	IdentifierDeclStatement	"char * wa [ ] = { w0 , w1 , w2 , w3 } ;"	219:1:5998:6029	5036014	9	True				
ANR	5036363	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5036014	0					
ANR	5036364	IdentifierDeclType	char * [ ]		5036014	0					
ANR	5036365	Identifier	wa		5036014	1					
ANR	5036366	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5036014	2		=			
ANR	5036367	Identifier	wa		5036014	0					
ANR	5036368	InitializerList	w0		5036014	1					
ANR	5036369	Identifier	w0		5036014	0					
ANR	5036370	Identifier	w1		5036014	1					
ANR	5036371	Identifier	w2		5036014	2					
ANR	5036372	Identifier	w3		5036014	3					
ANR	5036373	IdentifierDeclStatement	int nw = 0 ;	220:1:6032:6042	5036014	10	True				
ANR	5036374	IdentifierDecl	nw = 0		5036014	0					
ANR	5036375	IdentifierDeclType	int		5036014	0					
ANR	5036376	Identifier	nw		5036014	1					
ANR	5036377	AssignmentExpression	nw = 0		5036014	2		=			
ANR	5036378	Identifier	nw		5036014	0					
ANR	5036379	PrimaryExpression	0		5036014	1					
ANR	5036380	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5036014	11					
ANR	5036381	ForInit	i = 0 ;	221:6:6050:6055	5036014	0	True				
ANR	5036382	AssignmentExpression	i = 0		5036014	0		=			
ANR	5036383	Identifier	i		5036014	0					
ANR	5036384	PrimaryExpression	0		5036014	1					
ANR	5036385	Condition	i < 4	221:13:6057:6061	5036014	1	True				
ANR	5036386	RelationalExpression	i < 4		5036014	0		<			
ANR	5036387	Identifier	i		5036014	0					
ANR	5036388	PrimaryExpression	4		5036014	1					
ANR	5036389	PostIncDecOperationExpression	i ++	221:20:6064:6066	5036014	2	True				
ANR	5036390	Identifier	i		5036014	0					
ANR	5036391	IncDec	++		5036014	1					
ANR	5036392	CompoundStatement		55:25:1095:1095	5036014	3					
ANR	5036393	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5036014	0					
ANR	5036394	Condition	wa [ i ] [ 0 ] != '\\0'	222:6:6077:6092	5036014	0	True				
ANR	5036395	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5036014	0		!=			
ANR	5036396	ArrayIndexing	wa [ i ] [ 0 ]		5036014	0					
ANR	5036397	ArrayIndexing	wa [ i ]		5036014	0					
ANR	5036398	Identifier	wa		5036014	0					
ANR	5036399	Identifier	i		5036014	1					
ANR	5036400	PrimaryExpression	0		5036014	1					
ANR	5036401	PrimaryExpression	'\\0'		5036014	1					
ANR	5036402	CompoundStatement		56:24:1121:1121	5036014	1					
ANR	5036403	ExpressionStatement	nw ++	223:3:6100:6104	5036014	0	True				
ANR	5036404	PostIncDecOperationExpression	nw ++		5036014	0					
ANR	5036405	Identifier	nw		5036014	0					
ANR	5036406	IncDec	++		5036014	1					
ANR	5036407	IfStatement	"if ( strstr ( w0 , ""mul"" ) )"		5036014	12					
ANR	5036408	Condition	"strstr ( w0 , ""mul"" )"	228:5:6213:6230	5036014	0	True				
ANR	5036409	CallExpression	"strstr ( w0 , ""mul"" )"		5036014	0					
ANR	5036410	Callee	strstr		5036014	0					
ANR	5036411	Identifier	strstr		5036014	0					
ANR	5036412	ArgumentList	w0		5036014	1					
ANR	5036413	Argument	w0		5036014	0					
ANR	5036414	Identifier	w0		5036014	0					
ANR	5036415	Argument	"""mul"""		5036014	1					
ANR	5036416	PrimaryExpression	"""mul"""		5036014	0					
ANR	5036417	CompoundStatement		62:25:1259:1259	5036014	1					
ANR	5036418	IfStatement	if ( nw == 2 )		5036014	0					
ANR	5036419	Condition	nw == 2	229:6:6241:6247	5036014	0	True				
ANR	5036420	EqualityExpression	nw == 2		5036014	0		==			
ANR	5036421	Identifier	nw		5036014	0					
ANR	5036422	PrimaryExpression	2		5036014	1					
ANR	5036423	CompoundStatement		64:2:1278:1278	5036014	1					
ANR	5036424	ExpressionStatement	"r_str_ncpy ( wa [ 3 ] , wa [ 1 ] , sizeof ( w3 ) )"	231:3:6257:6295	5036014	0	True				
ANR	5036425	CallExpression	"r_str_ncpy ( wa [ 3 ] , wa [ 1 ] , sizeof ( w3 ) )"		5036014	0					
ANR	5036426	Callee	r_str_ncpy		5036014	0					
ANR	5036427	Identifier	r_str_ncpy		5036014	0					
ANR	5036428	ArgumentList	wa [ 3 ]		5036014	1					
ANR	5036429	Argument	wa [ 3 ]		5036014	0					
ANR	5036430	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036431	Identifier	wa		5036014	0					
ANR	5036432	PrimaryExpression	3		5036014	1					
ANR	5036433	Argument	wa [ 1 ]		5036014	1					
ANR	5036434	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036435	Identifier	wa		5036014	0					
ANR	5036436	PrimaryExpression	1		5036014	1					
ANR	5036437	Argument	sizeof ( w3 )		5036014	2					
ANR	5036438	SizeofExpression	sizeof ( w3 )		5036014	0					
ANR	5036439	Sizeof	sizeof		5036014	0					
ANR	5036440	SizeofOperand	w3		5036014	1					
ANR	5036441	SwitchStatement	switch ( wa [ 3 ] [ 0 ] )		5036014	1					
ANR	5036442	Condition	wa [ 3 ] [ 0 ]	233:11:6309:6316	5036014	0	True				
ANR	5036443	ArrayIndexing	wa [ 3 ] [ 0 ]		5036014	0					
ANR	5036444	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036445	Identifier	wa		5036014	0					
ANR	5036446	PrimaryExpression	3		5036014	1					
ANR	5036447	PrimaryExpression	0		5036014	1					
ANR	5036448	CompoundStatement		67:21:1345:1345	5036014	1					
ANR	5036449	Label	case 'q' :	234:3:6324:6332	5036014	0	True				
ANR	5036450	Label	case 'r' :	235:3:6337:6345	5036014	1	True				
ANR	5036451	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""rax"" , sizeof ( w1 ) )"	236:4:6364:6402	5036014	2	True				
ANR	5036452	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""rax"" , sizeof ( w1 ) )"		5036014	0					
ANR	5036453	Callee	r_str_ncpy		5036014	0					
ANR	5036454	Identifier	r_str_ncpy		5036014	0					
ANR	5036455	ArgumentList	wa [ 1 ]		5036014	1					
ANR	5036456	Argument	wa [ 1 ]		5036014	0					
ANR	5036457	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036458	Identifier	wa		5036014	0					
ANR	5036459	PrimaryExpression	1		5036014	1					
ANR	5036460	Argument	"""rax"""		5036014	1					
ANR	5036461	PrimaryExpression	"""rax"""		5036014	0					
ANR	5036462	Argument	sizeof ( w1 )		5036014	2					
ANR	5036463	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036464	Sizeof	sizeof		5036014	0					
ANR	5036465	SizeofOperand	w1		5036014	1					
ANR	5036466	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""rax"" , sizeof ( w2 ) )"	237:4:6408:6446	5036014	3	True				
ANR	5036467	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""rax"" , sizeof ( w2 ) )"		5036014	0					
ANR	5036468	Callee	r_str_ncpy		5036014	0					
ANR	5036469	Identifier	r_str_ncpy		5036014	0					
ANR	5036470	ArgumentList	wa [ 2 ]		5036014	1					
ANR	5036471	Argument	wa [ 2 ]		5036014	0					
ANR	5036472	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036473	Identifier	wa		5036014	0					
ANR	5036474	PrimaryExpression	2		5036014	1					
ANR	5036475	Argument	"""rax"""		5036014	1					
ANR	5036476	PrimaryExpression	"""rax"""		5036014	0					
ANR	5036477	Argument	sizeof ( w2 )		5036014	2					
ANR	5036478	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036479	Sizeof	sizeof		5036014	0					
ANR	5036480	SizeofOperand	w2		5036014	1					
ANR	5036481	BreakStatement	break ;	238:4:6452:6457	5036014	4	True				
ANR	5036482	Label	case 'd' :	239:3:6462:6470	5036014	5	True				
ANR	5036483	Label	case 'e' :	240:3:6475:6483	5036014	6	True				
ANR	5036484	IfStatement	if ( strlen ( wa [ 3 ] ) > 2 )		5036014	7					
ANR	5036485	Condition	strlen ( wa [ 3 ] ) > 2	241:8:6506:6523	5036014	0	True				
ANR	5036486	RelationalExpression	strlen ( wa [ 3 ] ) > 2		5036014	0		>			
ANR	5036487	CallExpression	strlen ( wa [ 3 ] )		5036014	0					
ANR	5036488	Callee	strlen		5036014	0					
ANR	5036489	Identifier	strlen		5036014	0					
ANR	5036490	ArgumentList	wa [ 3 ]		5036014	1					
ANR	5036491	Argument	wa [ 3 ]		5036014	0					
ANR	5036492	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036493	Identifier	wa		5036014	0					
ANR	5036494	PrimaryExpression	3		5036014	1					
ANR	5036495	PrimaryExpression	2		5036014	1					
ANR	5036496	CompoundStatement		75:28:1552:1552	5036014	1					
ANR	5036497	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""eax"" , sizeof ( w1 ) )"	242:5:6533:6571	5036014	0	True				
ANR	5036498	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""eax"" , sizeof ( w1 ) )"		5036014	0					
ANR	5036499	Callee	r_str_ncpy		5036014	0					
ANR	5036500	Identifier	r_str_ncpy		5036014	0					
ANR	5036501	ArgumentList	wa [ 1 ]		5036014	1					
ANR	5036502	Argument	wa [ 1 ]		5036014	0					
ANR	5036503	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036504	Identifier	wa		5036014	0					
ANR	5036505	PrimaryExpression	1		5036014	1					
ANR	5036506	Argument	"""eax"""		5036014	1					
ANR	5036507	PrimaryExpression	"""eax"""		5036014	0					
ANR	5036508	Argument	sizeof ( w1 )		5036014	2					
ANR	5036509	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036510	Sizeof	sizeof		5036014	0					
ANR	5036511	SizeofOperand	w1		5036014	1					
ANR	5036512	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""eax"" , sizeof ( w2 ) )"	243:5:6578:6616	5036014	1	True				
ANR	5036513	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""eax"" , sizeof ( w2 ) )"		5036014	0					
ANR	5036514	Callee	r_str_ncpy		5036014	0					
ANR	5036515	Identifier	r_str_ncpy		5036014	0					
ANR	5036516	ArgumentList	wa [ 2 ]		5036014	1					
ANR	5036517	Argument	wa [ 2 ]		5036014	0					
ANR	5036518	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036519	Identifier	wa		5036014	0					
ANR	5036520	PrimaryExpression	2		5036014	1					
ANR	5036521	Argument	"""eax"""		5036014	1					
ANR	5036522	PrimaryExpression	"""eax"""		5036014	0					
ANR	5036523	Argument	sizeof ( w2 )		5036014	2					
ANR	5036524	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036525	Sizeof	sizeof		5036014	0					
ANR	5036526	SizeofOperand	w2		5036014	1					
ANR	5036527	BreakStatement	break ;	244:5:6623:6628	5036014	2	True				
ANR	5036528	Label	default :	246:3:6639:6647	5036014	8	True				
ANR	5036529	Identifier	default		5036014	0					
ANR	5036530	IfStatement	if ( wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w' )		5036014	9					
ANR	5036531	Condition	wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'	247:8:6679:6757	5036014	0	True				
ANR	5036532	OrExpression	wa [ 3 ] [ 1 ] == 'x' || wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5036014	0		||			
ANR	5036533	EqualityExpression	wa [ 3 ] [ 1 ] == 'x'		5036014	0		==			
ANR	5036534	ArrayIndexing	wa [ 3 ] [ 1 ]		5036014	0					
ANR	5036535	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036536	Identifier	wa		5036014	0					
ANR	5036537	PrimaryExpression	3		5036014	1					
ANR	5036538	PrimaryExpression	1		5036014	1					
ANR	5036539	PrimaryExpression	'x'		5036014	1					
ANR	5036540	OrExpression	wa [ 3 ] [ 1 ] == 'p' || wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5036014	1		||			
ANR	5036541	EqualityExpression	wa [ 3 ] [ 1 ] == 'p'		5036014	0		==			
ANR	5036542	ArrayIndexing	wa [ 3 ] [ 1 ]		5036014	0					
ANR	5036543	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036544	Identifier	wa		5036014	0					
ANR	5036545	PrimaryExpression	3		5036014	1					
ANR	5036546	PrimaryExpression	1		5036014	1					
ANR	5036547	PrimaryExpression	'p'		5036014	1					
ANR	5036548	OrExpression	wa [ 3 ] [ 1 ] == 'i' || wa [ 3 ] [ 0 ] == 'w'		5036014	1		||			
ANR	5036549	EqualityExpression	wa [ 3 ] [ 1 ] == 'i'		5036014	0		==			
ANR	5036550	ArrayIndexing	wa [ 3 ] [ 1 ]		5036014	0					
ANR	5036551	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036552	Identifier	wa		5036014	0					
ANR	5036553	PrimaryExpression	3		5036014	1					
ANR	5036554	PrimaryExpression	1		5036014	1					
ANR	5036555	PrimaryExpression	'i'		5036014	1					
ANR	5036556	EqualityExpression	wa [ 3 ] [ 0 ] == 'w'		5036014	1		==			
ANR	5036557	ArrayIndexing	wa [ 3 ] [ 0 ]		5036014	0					
ANR	5036558	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036559	Identifier	wa		5036014	0					
ANR	5036560	PrimaryExpression	3		5036014	1					
ANR	5036561	PrimaryExpression	0		5036014	1					
ANR	5036562	PrimaryExpression	'w'		5036014	1					
ANR	5036563	CompoundStatement		82:41:1786:1786	5036014	1					
ANR	5036564	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""ax"" , sizeof ( w1 ) )"	249:5:6767:6804	5036014	0	True				
ANR	5036565	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""ax"" , sizeof ( w1 ) )"		5036014	0					
ANR	5036566	Callee	r_str_ncpy		5036014	0					
ANR	5036567	Identifier	r_str_ncpy		5036014	0					
ANR	5036568	ArgumentList	wa [ 1 ]		5036014	1					
ANR	5036569	Argument	wa [ 1 ]		5036014	0					
ANR	5036570	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036571	Identifier	wa		5036014	0					
ANR	5036572	PrimaryExpression	1		5036014	1					
ANR	5036573	Argument	"""ax"""		5036014	1					
ANR	5036574	PrimaryExpression	"""ax"""		5036014	0					
ANR	5036575	Argument	sizeof ( w1 )		5036014	2					
ANR	5036576	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036577	Sizeof	sizeof		5036014	0					
ANR	5036578	SizeofOperand	w1		5036014	1					
ANR	5036579	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""ax"" , sizeof ( w2 ) )"	250:5:6811:6848	5036014	1	True				
ANR	5036580	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""ax"" , sizeof ( w2 ) )"		5036014	0					
ANR	5036581	Callee	r_str_ncpy		5036014	0					
ANR	5036582	Identifier	r_str_ncpy		5036014	0					
ANR	5036583	ArgumentList	wa [ 2 ]		5036014	1					
ANR	5036584	Argument	wa [ 2 ]		5036014	0					
ANR	5036585	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036586	Identifier	wa		5036014	0					
ANR	5036587	PrimaryExpression	2		5036014	1					
ANR	5036588	Argument	"""ax"""		5036014	1					
ANR	5036589	PrimaryExpression	"""ax"""		5036014	0					
ANR	5036590	Argument	sizeof ( w2 )		5036014	2					
ANR	5036591	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036592	Sizeof	sizeof		5036014	0					
ANR	5036593	SizeofOperand	w2		5036014	1					
ANR	5036594	ElseStatement	else		5036014	0					
ANR	5036595	CompoundStatement		85:11:1887:1887	5036014	0					
ANR	5036596	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , ""al"" , sizeof ( w1 ) )"	252:5:6903:6940	5036014	0	True				
ANR	5036597	CallExpression	"r_str_ncpy ( wa [ 1 ] , ""al"" , sizeof ( w1 ) )"		5036014	0					
ANR	5036598	Callee	r_str_ncpy		5036014	0					
ANR	5036599	Identifier	r_str_ncpy		5036014	0					
ANR	5036600	ArgumentList	wa [ 1 ]		5036014	1					
ANR	5036601	Argument	wa [ 1 ]		5036014	0					
ANR	5036602	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036603	Identifier	wa		5036014	0					
ANR	5036604	PrimaryExpression	1		5036014	1					
ANR	5036605	Argument	"""al"""		5036014	1					
ANR	5036606	PrimaryExpression	"""al"""		5036014	0					
ANR	5036607	Argument	sizeof ( w1 )		5036014	2					
ANR	5036608	SizeofExpression	sizeof ( w1 )		5036014	0					
ANR	5036609	Sizeof	sizeof		5036014	0					
ANR	5036610	SizeofOperand	w1		5036014	1					
ANR	5036611	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , ""al"" , sizeof ( w2 ) )"	253:5:6947:6984	5036014	1	True				
ANR	5036612	CallExpression	"r_str_ncpy ( wa [ 2 ] , ""al"" , sizeof ( w2 ) )"		5036014	0					
ANR	5036613	Callee	r_str_ncpy		5036014	0					
ANR	5036614	Identifier	r_str_ncpy		5036014	0					
ANR	5036615	ArgumentList	wa [ 2 ]		5036014	1					
ANR	5036616	Argument	wa [ 2 ]		5036014	0					
ANR	5036617	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036618	Identifier	wa		5036014	0					
ANR	5036619	PrimaryExpression	2		5036014	1					
ANR	5036620	Argument	"""al"""		5036014	1					
ANR	5036621	PrimaryExpression	"""al"""		5036014	0					
ANR	5036622	Argument	sizeof ( w2 )		5036014	2					
ANR	5036623	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036624	Sizeof	sizeof		5036014	0					
ANR	5036625	SizeofOperand	w2		5036014	1					
ANR	5036626	ElseStatement	else		5036014	0					
ANR	5036627	IfStatement	if ( nw == 3 )		5036014	0					
ANR	5036628	Condition	nw == 3	257:11:7012:7018	5036014	0	True				
ANR	5036629	EqualityExpression	nw == 3		5036014	0		==			
ANR	5036630	Identifier	nw		5036014	0					
ANR	5036631	PrimaryExpression	3		5036014	1					
ANR	5036632	CompoundStatement		92:2:2049:2049	5036014	1					
ANR	5036633	ExpressionStatement	"r_str_ncpy ( wa [ 3 ] , wa [ 2 ] , sizeof ( w3 ) )"	259:3:7028:7066	5036014	0	True				
ANR	5036634	CallExpression	"r_str_ncpy ( wa [ 3 ] , wa [ 2 ] , sizeof ( w3 ) )"		5036014	0					
ANR	5036635	Callee	r_str_ncpy		5036014	0					
ANR	5036636	Identifier	r_str_ncpy		5036014	0					
ANR	5036637	ArgumentList	wa [ 3 ]		5036014	1					
ANR	5036638	Argument	wa [ 3 ]		5036014	0					
ANR	5036639	ArrayIndexing	wa [ 3 ]		5036014	0					
ANR	5036640	Identifier	wa		5036014	0					
ANR	5036641	PrimaryExpression	3		5036014	1					
ANR	5036642	Argument	wa [ 2 ]		5036014	1					
ANR	5036643	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036644	Identifier	wa		5036014	0					
ANR	5036645	PrimaryExpression	2		5036014	1					
ANR	5036646	Argument	sizeof ( w3 )		5036014	2					
ANR	5036647	SizeofExpression	sizeof ( w3 )		5036014	0					
ANR	5036648	Sizeof	sizeof		5036014	0					
ANR	5036649	SizeofOperand	w3		5036014	1					
ANR	5036650	ExpressionStatement	"r_str_ncpy ( wa [ 2 ] , wa [ 1 ] , sizeof ( w2 ) )"	260:3:7071:7109	5036014	1	True				
ANR	5036651	CallExpression	"r_str_ncpy ( wa [ 2 ] , wa [ 1 ] , sizeof ( w2 ) )"		5036014	0					
ANR	5036652	Callee	r_str_ncpy		5036014	0					
ANR	5036653	Identifier	r_str_ncpy		5036014	0					
ANR	5036654	ArgumentList	wa [ 2 ]		5036014	1					
ANR	5036655	Argument	wa [ 2 ]		5036014	0					
ANR	5036656	ArrayIndexing	wa [ 2 ]		5036014	0					
ANR	5036657	Identifier	wa		5036014	0					
ANR	5036658	PrimaryExpression	2		5036014	1					
ANR	5036659	Argument	wa [ 1 ]		5036014	1					
ANR	5036660	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036661	Identifier	wa		5036014	0					
ANR	5036662	PrimaryExpression	1		5036014	1					
ANR	5036663	Argument	sizeof ( w2 )		5036014	2					
ANR	5036664	SizeofExpression	sizeof ( w2 )		5036014	0					
ANR	5036665	Sizeof	sizeof		5036014	0					
ANR	5036666	SizeofOperand	w2		5036014	1					
ANR	5036667	ExpressionStatement	"replace ( nw , wa , str )"	263:2:7118:7139	5036014	1	True				
ANR	5036668	CallExpression	"replace ( nw , wa , str )"		5036014	0					
ANR	5036669	Callee	replace		5036014	0					
ANR	5036670	Identifier	replace		5036014	0					
ANR	5036671	ArgumentList	nw		5036014	1					
ANR	5036672	Argument	nw		5036014	0					
ANR	5036673	Identifier	nw		5036014	0					
ANR	5036674	Argument	wa		5036014	1					
ANR	5036675	Identifier	wa		5036014	0					
ANR	5036676	Argument	str		5036014	2					
ANR	5036677	Identifier	str		5036014	0					
ANR	5036678	ElseStatement	else		5036014	0					
ANR	5036679	IfStatement	"if ( ( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm )"		5036014	0					
ANR	5036680	Condition	"( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm"	265:12:7154:7234	5036014	0	True				
ANR	5036681	AndExpression	"( strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" ) ) && ! p -> retleave_asm"		5036014	0		&&			
ANR	5036682	OrExpression	"strstr ( w1 , ""ax"" ) || strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" )"		5036014	0		||			
ANR	5036683	CallExpression	"strstr ( w1 , ""ax"" )"		5036014	0					
ANR	5036684	Callee	strstr		5036014	0					
ANR	5036685	Identifier	strstr		5036014	0					
ANR	5036686	ArgumentList	w1		5036014	1					
ANR	5036687	Argument	w1		5036014	0					
ANR	5036688	Identifier	w1		5036014	0					
ANR	5036689	Argument	"""ax"""		5036014	1					
ANR	5036690	PrimaryExpression	"""ax"""		5036014	0					
ANR	5036691	OrExpression	"strstr ( w1 , ""ah"" ) || strstr ( w1 , ""al"" )"		5036014	1		||			
ANR	5036692	CallExpression	"strstr ( w1 , ""ah"" )"		5036014	0					
ANR	5036693	Callee	strstr		5036014	0					
ANR	5036694	Identifier	strstr		5036014	0					
ANR	5036695	ArgumentList	w1		5036014	1					
ANR	5036696	Argument	w1		5036014	0					
ANR	5036697	Identifier	w1		5036014	0					
ANR	5036698	Argument	"""ah"""		5036014	1					
ANR	5036699	PrimaryExpression	"""ah"""		5036014	0					
ANR	5036700	CallExpression	"strstr ( w1 , ""al"" )"		5036014	1					
ANR	5036701	Callee	strstr		5036014	0					
ANR	5036702	Identifier	strstr		5036014	0					
ANR	5036703	ArgumentList	w1		5036014	1					
ANR	5036704	Argument	w1		5036014	0					
ANR	5036705	Identifier	w1		5036014	0					
ANR	5036706	Argument	"""al"""		5036014	1					
ANR	5036707	PrimaryExpression	"""al"""		5036014	0					
ANR	5036708	UnaryOperationExpression	! p -> retleave_asm		5036014	1					
ANR	5036709	UnaryOperator	!		5036014	0					
ANR	5036710	PtrMemberAccess	p -> retleave_asm		5036014	1					
ANR	5036711	Identifier	p		5036014	0					
ANR	5036712	Identifier	retleave_asm		5036014	1					
ANR	5036713	CompoundStatement		99:95:2263:2263	5036014	1					
ANR	5036714	IfStatement	if ( ! ( p -> retleave_asm = ( char * ) malloc ( sz ) ) )		5036014	0					
ANR	5036715	Condition	! ( p -> retleave_asm = ( char * ) malloc ( sz ) )	266:6:7245:7285	5036014	0	True				
ANR	5036716	UnaryOperationExpression	! ( p -> retleave_asm = ( char * ) malloc ( sz ) )		5036014	0					
ANR	5036717	UnaryOperator	!		5036014	0					
ANR	5036718	AssignmentExpression	p -> retleave_asm = ( char * ) malloc ( sz )		5036014	1		=			
ANR	5036719	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036720	Identifier	p		5036014	0					
ANR	5036721	Identifier	retleave_asm		5036014	1					
ANR	5036722	CastExpression	( char * ) malloc ( sz )		5036014	1					
ANR	5036723	CastTarget	char *		5036014	0					
ANR	5036724	CallExpression	malloc ( sz )		5036014	1					
ANR	5036725	Callee	malloc		5036014	0					
ANR	5036726	Identifier	malloc		5036014	0					
ANR	5036727	ArgumentList	sz		5036014	1					
ANR	5036728	Argument	sz		5036014	0					
ANR	5036729	Identifier	sz		5036014	0					
ANR	5036730	CompoundStatement		100:49:2314:2314	5036014	1					
ANR	5036731	ReturnStatement	return false ;	267:3:7293:7305	5036014	0	True				
ANR	5036732	Identifier	false		5036014	0					
ANR	5036733	ExpressionStatement	"r_snprintf ( p -> retleave_asm , sz , ""return %s"" , w2 )"	269:2:7313:7362	5036014	1	True				
ANR	5036734	CallExpression	"r_snprintf ( p -> retleave_asm , sz , ""return %s"" , w2 )"		5036014	0					
ANR	5036735	Callee	r_snprintf		5036014	0					
ANR	5036736	Identifier	r_snprintf		5036014	0					
ANR	5036737	ArgumentList	p -> retleave_asm		5036014	1					
ANR	5036738	Argument	p -> retleave_asm		5036014	0					
ANR	5036739	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036740	Identifier	p		5036014	0					
ANR	5036741	Identifier	retleave_asm		5036014	1					
ANR	5036742	Argument	sz		5036014	1					
ANR	5036743	Identifier	sz		5036014	0					
ANR	5036744	Argument	"""return %s"""		5036014	2					
ANR	5036745	PrimaryExpression	"""return %s"""		5036014	0					
ANR	5036746	Argument	w2		5036014	3					
ANR	5036747	Identifier	w2		5036014	0					
ANR	5036748	ExpressionStatement	"replace ( nw , wa , str )"	270:2:7366:7387	5036014	2	True				
ANR	5036749	CallExpression	"replace ( nw , wa , str )"		5036014	0					
ANR	5036750	Callee	replace		5036014	0					
ANR	5036751	Identifier	replace		5036014	0					
ANR	5036752	ArgumentList	nw		5036014	1					
ANR	5036753	Argument	nw		5036014	0					
ANR	5036754	Identifier	nw		5036014	0					
ANR	5036755	Argument	wa		5036014	1					
ANR	5036756	Identifier	wa		5036014	0					
ANR	5036757	Argument	str		5036014	2					
ANR	5036758	Identifier	str		5036014	0					
ANR	5036759	ElseStatement	else		5036014	0					
ANR	5036760	IfStatement	"if ( ( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) ) )"		5036014	0					
ANR	5036761	Condition	"( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) )"	271:12:7401:7486	5036014	0	True				
ANR	5036762	OrExpression	"( strstr ( w0 , ""leave"" ) && p -> retleave_asm ) || ( strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" ) )"		5036014	0		||			
ANR	5036763	AndExpression	"strstr ( w0 , ""leave"" ) && p -> retleave_asm"		5036014	0		&&			
ANR	5036764	CallExpression	"strstr ( w0 , ""leave"" )"		5036014	0					
ANR	5036765	Callee	strstr		5036014	0					
ANR	5036766	Identifier	strstr		5036014	0					
ANR	5036767	ArgumentList	w0		5036014	1					
ANR	5036768	Argument	w0		5036014	0					
ANR	5036769	Identifier	w0		5036014	0					
ANR	5036770	Argument	"""leave"""		5036014	1					
ANR	5036771	PrimaryExpression	"""leave"""		5036014	0					
ANR	5036772	PtrMemberAccess	p -> retleave_asm		5036014	1					
ANR	5036773	Identifier	p		5036014	0					
ANR	5036774	Identifier	retleave_asm		5036014	1					
ANR	5036775	AndExpression	"strstr ( w0 , ""pop"" ) && strstr ( w1 , ""bp"" )"		5036014	1		&&			
ANR	5036776	CallExpression	"strstr ( w0 , ""pop"" )"		5036014	0					
ANR	5036777	Callee	strstr		5036014	0					
ANR	5036778	Identifier	strstr		5036014	0					
ANR	5036779	ArgumentList	w0		5036014	1					
ANR	5036780	Argument	w0		5036014	0					
ANR	5036781	Identifier	w0		5036014	0					
ANR	5036782	Argument	"""pop"""		5036014	1					
ANR	5036783	PrimaryExpression	"""pop"""		5036014	0					
ANR	5036784	CallExpression	"strstr ( w1 , ""bp"" )"		5036014	1					
ANR	5036785	Callee	strstr		5036014	0					
ANR	5036786	Identifier	strstr		5036014	0					
ANR	5036787	ArgumentList	w1		5036014	1					
ANR	5036788	Argument	w1		5036014	0					
ANR	5036789	Identifier	w1		5036014	0					
ANR	5036790	Argument	"""bp"""		5036014	1					
ANR	5036791	PrimaryExpression	"""bp"""		5036014	0					
ANR	5036792	CompoundStatement		105:100:2515:2515	5036014	1					
ANR	5036793	ExpressionStatement	"r_str_ncpy ( wa [ 0 ] , "" \\0"" , 2 )"	272:2:7493:7521	5036014	0	True				
ANR	5036794	CallExpression	"r_str_ncpy ( wa [ 0 ] , "" \\0"" , 2 )"		5036014	0					
ANR	5036795	Callee	r_str_ncpy		5036014	0					
ANR	5036796	Identifier	r_str_ncpy		5036014	0					
ANR	5036797	ArgumentList	wa [ 0 ]		5036014	1					
ANR	5036798	Argument	wa [ 0 ]		5036014	0					
ANR	5036799	ArrayIndexing	wa [ 0 ]		5036014	0					
ANR	5036800	Identifier	wa		5036014	0					
ANR	5036801	PrimaryExpression	0		5036014	1					
ANR	5036802	Argument	""" \\0"""		5036014	1					
ANR	5036803	PrimaryExpression	""" \\0"""		5036014	0					
ANR	5036804	Argument	2		5036014	2					
ANR	5036805	PrimaryExpression	2		5036014	0					
ANR	5036806	ExpressionStatement	"r_str_ncpy ( wa [ 1 ] , "" \\0"" , 2 )"	273:2:7525:7553	5036014	1	True				
ANR	5036807	CallExpression	"r_str_ncpy ( wa [ 1 ] , "" \\0"" , 2 )"		5036014	0					
ANR	5036808	Callee	r_str_ncpy		5036014	0					
ANR	5036809	Identifier	r_str_ncpy		5036014	0					
ANR	5036810	ArgumentList	wa [ 1 ]		5036014	1					
ANR	5036811	Argument	wa [ 1 ]		5036014	0					
ANR	5036812	ArrayIndexing	wa [ 1 ]		5036014	0					
ANR	5036813	Identifier	wa		5036014	0					
ANR	5036814	PrimaryExpression	1		5036014	1					
ANR	5036815	Argument	""" \\0"""		5036014	1					
ANR	5036816	PrimaryExpression	""" \\0"""		5036014	0					
ANR	5036817	Argument	2		5036014	2					
ANR	5036818	PrimaryExpression	2		5036014	0					
ANR	5036819	ExpressionStatement	"replace ( nw , wa , str )"	274:2:7557:7578	5036014	2	True				
ANR	5036820	CallExpression	"replace ( nw , wa , str )"		5036014	0					
ANR	5036821	Callee	replace		5036014	0					
ANR	5036822	Identifier	replace		5036014	0					
ANR	5036823	ArgumentList	nw		5036014	1					
ANR	5036824	Argument	nw		5036014	0					
ANR	5036825	Identifier	nw		5036014	0					
ANR	5036826	Argument	wa		5036014	1					
ANR	5036827	Identifier	wa		5036014	0					
ANR	5036828	Argument	str		5036014	2					
ANR	5036829	Identifier	str		5036014	0					
ANR	5036830	ElseStatement	else		5036014	0					
ANR	5036831	IfStatement	"if ( strstr ( w0 , ""ret"" ) && p -> retleave_asm )"		5036014	0					
ANR	5036832	Condition	"strstr ( w0 , ""ret"" ) && p -> retleave_asm"	275:12:7592:7628	5036014	0	True				
ANR	5036833	AndExpression	"strstr ( w0 , ""ret"" ) && p -> retleave_asm"		5036014	0		&&			
ANR	5036834	CallExpression	"strstr ( w0 , ""ret"" )"		5036014	0					
ANR	5036835	Callee	strstr		5036014	0					
ANR	5036836	Identifier	strstr		5036014	0					
ANR	5036837	ArgumentList	w0		5036014	1					
ANR	5036838	Argument	w0		5036014	0					
ANR	5036839	Identifier	w0		5036014	0					
ANR	5036840	Argument	"""ret"""		5036014	1					
ANR	5036841	PrimaryExpression	"""ret"""		5036014	0					
ANR	5036842	PtrMemberAccess	p -> retleave_asm		5036014	1					
ANR	5036843	Identifier	p		5036014	0					
ANR	5036844	Identifier	retleave_asm		5036014	1					
ANR	5036845	CompoundStatement		109:51:2657:2657	5036014	1					
ANR	5036846	ExpressionStatement	"r_str_ncpy ( str , p -> retleave_asm , sz )"	276:2:7635:7672	5036014	0	True				
ANR	5036847	CallExpression	"r_str_ncpy ( str , p -> retleave_asm , sz )"		5036014	0					
ANR	5036848	Callee	r_str_ncpy		5036014	0					
ANR	5036849	Identifier	r_str_ncpy		5036014	0					
ANR	5036850	ArgumentList	str		5036014	1					
ANR	5036851	Argument	str		5036014	0					
ANR	5036852	Identifier	str		5036014	0					
ANR	5036853	Argument	p -> retleave_asm		5036014	1					
ANR	5036854	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036855	Identifier	p		5036014	0					
ANR	5036856	Identifier	retleave_asm		5036014	1					
ANR	5036857	Argument	sz		5036014	2					
ANR	5036858	Identifier	sz		5036014	0					
ANR	5036859	ExpressionStatement	R_FREE ( p -> retleave_asm )	277:2:7676:7700	5036014	1	True				
ANR	5036860	CallExpression	R_FREE ( p -> retleave_asm )		5036014	0					
ANR	5036861	Callee	R_FREE		5036014	0					
ANR	5036862	Identifier	R_FREE		5036014	0					
ANR	5036863	ArgumentList	p -> retleave_asm		5036014	1					
ANR	5036864	Argument	p -> retleave_asm		5036014	0					
ANR	5036865	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036866	Identifier	p		5036014	0					
ANR	5036867	Identifier	retleave_asm		5036014	1					
ANR	5036868	ElseStatement	else		5036014	0					
ANR	5036869	IfStatement	if ( p -> retleave_asm )		5036014	0					
ANR	5036870	Condition	p -> retleave_asm	278:12:7714:7728	5036014	0	True				
ANR	5036871	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036872	Identifier	p		5036014	0					
ANR	5036873	Identifier	retleave_asm		5036014	1					
ANR	5036874	CompoundStatement		112:29:2757:2757	5036014	1					
ANR	5036875	ExpressionStatement	R_FREE ( p -> retleave_asm )	279:2:7735:7759	5036014	0	True				
ANR	5036876	CallExpression	R_FREE ( p -> retleave_asm )		5036014	0					
ANR	5036877	Callee	R_FREE		5036014	0					
ANR	5036878	Identifier	R_FREE		5036014	0					
ANR	5036879	ArgumentList	p -> retleave_asm		5036014	1					
ANR	5036880	Argument	p -> retleave_asm		5036014	0					
ANR	5036881	PtrMemberAccess	p -> retleave_asm		5036014	0					
ANR	5036882	Identifier	p		5036014	0					
ANR	5036883	Identifier	retleave_asm		5036014	1					
ANR	5036884	ExpressionStatement	"replace ( nw , wa , str )"	280:2:7763:7784	5036014	1	True				
ANR	5036885	CallExpression	"replace ( nw , wa , str )"		5036014	0					
ANR	5036886	Callee	replace		5036014	0					
ANR	5036887	Identifier	replace		5036014	0					
ANR	5036888	ArgumentList	nw		5036014	1					
ANR	5036889	Argument	nw		5036014	0					
ANR	5036890	Identifier	nw		5036014	0					
ANR	5036891	Argument	wa		5036014	1					
ANR	5036892	Identifier	wa		5036014	0					
ANR	5036893	Argument	str		5036014	2					
ANR	5036894	Identifier	str		5036014	0					
ANR	5036895	ElseStatement	else		5036014	0					
ANR	5036896	CompoundStatement		115:8:2820:2820	5036014	0					
ANR	5036897	ExpressionStatement	"replace ( nw , wa , str )"	282:2:7798:7819	5036014	0	True				
ANR	5036898	CallExpression	"replace ( nw , wa , str )"		5036014	0					
ANR	5036899	Callee	replace		5036014	0					
ANR	5036900	Identifier	replace		5036014	0					
ANR	5036901	ArgumentList	nw		5036014	1					
ANR	5036902	Argument	nw		5036014	0					
ANR	5036903	Identifier	nw		5036014	0					
ANR	5036904	Argument	wa		5036014	1					
ANR	5036905	Identifier	wa		5036014	0					
ANR	5036906	Argument	str		5036014	2					
ANR	5036907	Identifier	str		5036014	0					
ANR	5036908	ExpressionStatement	free ( buf )	284:1:7825:7835	5036014	13	True				
ANR	5036909	CallExpression	free ( buf )		5036014	0					
ANR	5036910	Callee	free		5036014	0					
ANR	5036911	Identifier	free		5036014	0					
ANR	5036912	ArgumentList	buf		5036014	1					
ANR	5036913	Argument	buf		5036014	0					
ANR	5036914	Identifier	buf		5036014	0					
ANR	5036915	ReturnStatement	return true ;	285:1:7838:7849	5036014	14	True				
ANR	5036916	Identifier	true		5036014	0					
ANR	5036917	ReturnType	static int		5036014	1					
ANR	5036918	Identifier	parse		5036014	2					
ANR	5036919	ParameterList	"RParse * p , const char * data , char * str"		5036014	3					
ANR	5036920	Parameter	RParse * p	167:18:4933:4941	5036014	0	True				
ANR	5036921	ParameterType	RParse *		5036014	0					
ANR	5036922	Identifier	p		5036014	1					
ANR	5036923	Parameter	const char * data	167:29:4944:4959	5036014	1	True				
ANR	5036924	ParameterType	const char *		5036014	0					
ANR	5036925	Identifier	data		5036014	1					
ANR	5036926	Parameter	char * str	167:47:4962:4970	5036014	2	True				
ANR	5036927	ParameterType	char *		5036014	0					
ANR	5036928	Identifier	str		5036014	1					
ANR	5036929	CFGEntryNode	ENTRY		5036014		True				
ANR	5036930	CFGExitNode	EXIT		5036014		True				
ANR	5036931	Symbol	* w3		5036014						
ANR	5036932	Symbol	* w2		5036014						
ANR	5036933	Symbol	* w1		5036014						
ANR	5036934	Symbol	data		5036014						
ANR	5036935	Symbol	strchr		5036014						
ANR	5036936	Symbol	nw		5036014						
ANR	5036937	Symbol	wa		5036014						
ANR	5036938	Symbol	p -> retleave_asm		5036014						
ANR	5036939	Symbol	strlen		5036014						
ANR	5036940	Symbol	* wa		5036014						
ANR	5036941	Symbol	len		5036014						
ANR	5036942	Symbol	* ptr		5036014						
ANR	5036943	Symbol	w0		5036014						
ANR	5036944	Symbol	w1		5036014						
ANR	5036945	Symbol	end		5036014						
ANR	5036946	Symbol	w2		5036014						
ANR	5036947	Symbol	w3		5036014						
ANR	5036948	Symbol	* w0		5036014						
ANR	5036949	Symbol	malloc		5036014						
ANR	5036950	Symbol	* buf		5036014						
ANR	5036951	Symbol	* * i		5036014						
ANR	5036952	Symbol	sz		5036014						
ANR	5036953	Symbol	false		5036014						
ANR	5036954	Symbol	i		5036014						
ANR	5036955	Symbol	optr		5036014						
ANR	5036956	Symbol	ptr		5036014						
ANR	5036957	Symbol	p		5036014						
ANR	5036958	Symbol	str		5036014						
ANR	5036959	Symbol	buf		5036014						
ANR	5036960	Symbol	* i		5036014						
ANR	5036961	Symbol	* * wa		5036014						
ANR	5036962	Symbol	strstr		5036014						
ANR	5036963	Symbol	true		5036014						
ANR	5036964	Symbol	* p		5036014						
ANR	5036965	Symbol	strdup		5036014						
ANR	5036966	Function	ishexch	289:0:7860:8003							
ANR	5036967	FunctionDef	ishexch (char c)		5036966	0					
ANR	5036968	CompoundStatement		289:35:7895:8003	5036966	0					
ANR	5036969	IfStatement	if ( c >= 0 && c <= 9 )		5036966	0					
ANR	5036970	Condition	c >= 0 && c <= 9	290:5:7902:7913	5036966	0	True				
ANR	5036971	AndExpression	c >= 0 && c <= 9		5036966	0		&&			
ANR	5036972	RelationalExpression	c >= 0		5036966	0		>=			
ANR	5036973	Identifier	c		5036966	0					
ANR	5036974	PrimaryExpression	0		5036966	1					
ANR	5036975	RelationalExpression	c <= 9		5036966	1		<=			
ANR	5036976	Identifier	c		5036966	0					
ANR	5036977	PrimaryExpression	9		5036966	1					
ANR	5036978	ReturnStatement	return 1 ;	290:19:7916:7924	5036966	1	True				
ANR	5036979	PrimaryExpression	1		5036966	0					
ANR	5036980	IfStatement	if ( c >= 'a' && c <= 'f' )		5036966	1					
ANR	5036981	Condition	c >= 'a' && c <= 'f'	291:5:7931:7946	5036966	0	True				
ANR	5036982	AndExpression	c >= 'a' && c <= 'f'		5036966	0		&&			
ANR	5036983	RelationalExpression	c >= 'a'		5036966	0		>=			
ANR	5036984	Identifier	c		5036966	0					
ANR	5036985	PrimaryExpression	'a'		5036966	1					
ANR	5036986	RelationalExpression	c <= 'f'		5036966	1		<=			
ANR	5036987	Identifier	c		5036966	0					
ANR	5036988	PrimaryExpression	'f'		5036966	1					
ANR	5036989	ReturnStatement	return 1 ;	291:23:7949:7957	5036966	1	True				
ANR	5036990	PrimaryExpression	1		5036966	0					
ANR	5036991	IfStatement	if ( c >= 'A' && c <= 'F' )		5036966	2					
ANR	5036992	Condition	c >= 'A' && c <= 'F'	292:5:7964:7979	5036966	0	True				
ANR	5036993	AndExpression	c >= 'A' && c <= 'F'		5036966	0		&&			
ANR	5036994	RelationalExpression	c >= 'A'		5036966	0		>=			
ANR	5036995	Identifier	c		5036966	0					
ANR	5036996	PrimaryExpression	'A'		5036966	1					
ANR	5036997	RelationalExpression	c <= 'F'		5036966	1		<=			
ANR	5036998	Identifier	c		5036966	0					
ANR	5036999	PrimaryExpression	'F'		5036966	1					
ANR	5037000	ReturnStatement	return 1 ;	292:23:7982:7990	5036966	1	True				
ANR	5037001	PrimaryExpression	1		5036966	0					
ANR	5037002	ReturnStatement	return 0 ;	293:1:7993:8001	5036966	3	True				
ANR	5037003	PrimaryExpression	0		5036966	0					
ANR	5037004	ReturnType	static inline int		5036966	1					
ANR	5037005	Identifier	ishexch		5036966	2					
ANR	5037006	ParameterList	char c		5036966	3					
ANR	5037007	Parameter	char c	289:27:7887:7892	5036966	0	True				
ANR	5037008	ParameterType	char		5036966	0					
ANR	5037009	Identifier	c		5036966	1					
ANR	5037010	CFGEntryNode	ENTRY		5036966		True				
ANR	5037011	CFGExitNode	EXIT		5036966		True				
ANR	5037012	Symbol	c		5036966						
ANR	5037013	Function	issegoff	296:0:8006:8324							
ANR	5037014	FunctionDef	issegoff (const char * w)		5037013	0					
ANR	5037015	CompoundStatement		296:43:8049:8324	5037013	0					
ANR	5037016	IfStatement	if ( ! ishexch ( w [ 0 ] ) )		5037013	0					
ANR	5037017	Condition	! ishexch ( w [ 0 ] )	297:5:8056:8070	5037013	0	True				
ANR	5037018	UnaryOperationExpression	! ishexch ( w [ 0 ] )		5037013	0					
ANR	5037019	UnaryOperator	!		5037013	0					
ANR	5037020	CallExpression	ishexch ( w [ 0 ] )		5037013	1					
ANR	5037021	Callee	ishexch		5037013	0					
ANR	5037022	Identifier	ishexch		5037013	0					
ANR	5037023	ArgumentList	w [ 0 ]		5037013	1					
ANR	5037024	Argument	w [ 0 ]		5037013	0					
ANR	5037025	ArrayIndexing	w [ 0 ]		5037013	0					
ANR	5037026	Identifier	w		5037013	0					
ANR	5037027	PrimaryExpression	0		5037013	1					
ANR	5037028	ReturnStatement	return 0 ;	297:22:8073:8081	5037013	1	True				
ANR	5037029	PrimaryExpression	0		5037013	0					
ANR	5037030	IfStatement	if ( ! ishexch ( w [ 1 ] ) )		5037013	1					
ANR	5037031	Condition	! ishexch ( w [ 1 ] )	298:5:8088:8102	5037013	0	True				
ANR	5037032	UnaryOperationExpression	! ishexch ( w [ 1 ] )		5037013	0					
ANR	5037033	UnaryOperator	!		5037013	0					
ANR	5037034	CallExpression	ishexch ( w [ 1 ] )		5037013	1					
ANR	5037035	Callee	ishexch		5037013	0					
ANR	5037036	Identifier	ishexch		5037013	0					
ANR	5037037	ArgumentList	w [ 1 ]		5037013	1					
ANR	5037038	Argument	w [ 1 ]		5037013	0					
ANR	5037039	ArrayIndexing	w [ 1 ]		5037013	0					
ANR	5037040	Identifier	w		5037013	0					
ANR	5037041	PrimaryExpression	1		5037013	1					
ANR	5037042	ReturnStatement	return 0 ;	298:22:8105:8113	5037013	1	True				
ANR	5037043	PrimaryExpression	0		5037013	0					
ANR	5037044	IfStatement	if ( ! ishexch ( w [ 2 ] ) )		5037013	2					
ANR	5037045	Condition	! ishexch ( w [ 2 ] )	299:5:8120:8134	5037013	0	True				
ANR	5037046	UnaryOperationExpression	! ishexch ( w [ 2 ] )		5037013	0					
ANR	5037047	UnaryOperator	!		5037013	0					
ANR	5037048	CallExpression	ishexch ( w [ 2 ] )		5037013	1					
ANR	5037049	Callee	ishexch		5037013	0					
ANR	5037050	Identifier	ishexch		5037013	0					
ANR	5037051	ArgumentList	w [ 2 ]		5037013	1					
ANR	5037052	Argument	w [ 2 ]		5037013	0					
ANR	5037053	ArrayIndexing	w [ 2 ]		5037013	0					
ANR	5037054	Identifier	w		5037013	0					
ANR	5037055	PrimaryExpression	2		5037013	1					
ANR	5037056	ReturnStatement	return 0 ;	299:22:8137:8145	5037013	1	True				
ANR	5037057	PrimaryExpression	0		5037013	0					
ANR	5037058	IfStatement	if ( ! ishexch ( w [ 3 ] ) )		5037013	3					
ANR	5037059	Condition	! ishexch ( w [ 3 ] )	300:5:8152:8166	5037013	0	True				
ANR	5037060	UnaryOperationExpression	! ishexch ( w [ 3 ] )		5037013	0					
ANR	5037061	UnaryOperator	!		5037013	0					
ANR	5037062	CallExpression	ishexch ( w [ 3 ] )		5037013	1					
ANR	5037063	Callee	ishexch		5037013	0					
ANR	5037064	Identifier	ishexch		5037013	0					
ANR	5037065	ArgumentList	w [ 3 ]		5037013	1					
ANR	5037066	Argument	w [ 3 ]		5037013	0					
ANR	5037067	ArrayIndexing	w [ 3 ]		5037013	0					
ANR	5037068	Identifier	w		5037013	0					
ANR	5037069	PrimaryExpression	3		5037013	1					
ANR	5037070	ReturnStatement	return 0 ;	300:22:8169:8177	5037013	1	True				
ANR	5037071	PrimaryExpression	0		5037013	0					
ANR	5037072	IfStatement	if ( ! ishexch ( w [ 5 ] ) )		5037013	4					
ANR	5037073	Condition	! ishexch ( w [ 5 ] )	302:5:8190:8204	5037013	0	True				
ANR	5037074	UnaryOperationExpression	! ishexch ( w [ 5 ] )		5037013	0					
ANR	5037075	UnaryOperator	!		5037013	0					
ANR	5037076	CallExpression	ishexch ( w [ 5 ] )		5037013	1					
ANR	5037077	Callee	ishexch		5037013	0					
ANR	5037078	Identifier	ishexch		5037013	0					
ANR	5037079	ArgumentList	w [ 5 ]		5037013	1					
ANR	5037080	Argument	w [ 5 ]		5037013	0					
ANR	5037081	ArrayIndexing	w [ 5 ]		5037013	0					
ANR	5037082	Identifier	w		5037013	0					
ANR	5037083	PrimaryExpression	5		5037013	1					
ANR	5037084	ReturnStatement	return 0 ;	302:22:8207:8215	5037013	1	True				
ANR	5037085	PrimaryExpression	0		5037013	0					
ANR	5037086	IfStatement	if ( ! ishexch ( w [ 6 ] ) )		5037013	5					
ANR	5037087	Condition	! ishexch ( w [ 6 ] )	303:5:8222:8236	5037013	0	True				
ANR	5037088	UnaryOperationExpression	! ishexch ( w [ 6 ] )		5037013	0					
ANR	5037089	UnaryOperator	!		5037013	0					
ANR	5037090	CallExpression	ishexch ( w [ 6 ] )		5037013	1					
ANR	5037091	Callee	ishexch		5037013	0					
ANR	5037092	Identifier	ishexch		5037013	0					
ANR	5037093	ArgumentList	w [ 6 ]		5037013	1					
ANR	5037094	Argument	w [ 6 ]		5037013	0					
ANR	5037095	ArrayIndexing	w [ 6 ]		5037013	0					
ANR	5037096	Identifier	w		5037013	0					
ANR	5037097	PrimaryExpression	6		5037013	1					
ANR	5037098	ReturnStatement	return 0 ;	303:22:8239:8247	5037013	1	True				
ANR	5037099	PrimaryExpression	0		5037013	0					
ANR	5037100	IfStatement	if ( ! ishexch ( w [ 7 ] ) )		5037013	6					
ANR	5037101	Condition	! ishexch ( w [ 7 ] )	304:5:8254:8268	5037013	0	True				
ANR	5037102	UnaryOperationExpression	! ishexch ( w [ 7 ] )		5037013	0					
ANR	5037103	UnaryOperator	!		5037013	0					
ANR	5037104	CallExpression	ishexch ( w [ 7 ] )		5037013	1					
ANR	5037105	Callee	ishexch		5037013	0					
ANR	5037106	Identifier	ishexch		5037013	0					
ANR	5037107	ArgumentList	w [ 7 ]		5037013	1					
ANR	5037108	Argument	w [ 7 ]		5037013	0					
ANR	5037109	ArrayIndexing	w [ 7 ]		5037013	0					
ANR	5037110	Identifier	w		5037013	0					
ANR	5037111	PrimaryExpression	7		5037013	1					
ANR	5037112	ReturnStatement	return 0 ;	304:22:8271:8279	5037013	1	True				
ANR	5037113	PrimaryExpression	0		5037013	0					
ANR	5037114	IfStatement	if ( ! ishexch ( w [ 8 ] ) )		5037013	7					
ANR	5037115	Condition	! ishexch ( w [ 8 ] )	305:5:8286:8300	5037013	0	True				
ANR	5037116	UnaryOperationExpression	! ishexch ( w [ 8 ] )		5037013	0					
ANR	5037117	UnaryOperator	!		5037013	0					
ANR	5037118	CallExpression	ishexch ( w [ 8 ] )		5037013	1					
ANR	5037119	Callee	ishexch		5037013	0					
ANR	5037120	Identifier	ishexch		5037013	0					
ANR	5037121	ArgumentList	w [ 8 ]		5037013	1					
ANR	5037122	Argument	w [ 8 ]		5037013	0					
ANR	5037123	ArrayIndexing	w [ 8 ]		5037013	0					
ANR	5037124	Identifier	w		5037013	0					
ANR	5037125	PrimaryExpression	8		5037013	1					
ANR	5037126	ReturnStatement	return 0 ;	305:22:8303:8311	5037013	1	True				
ANR	5037127	PrimaryExpression	0		5037013	0					
ANR	5037128	ReturnStatement	return 1 ;	306:1:8314:8322	5037013	8	True				
ANR	5037129	PrimaryExpression	1		5037013	0					
ANR	5037130	ReturnType	static inline int		5037013	1					
ANR	5037131	Identifier	issegoff		5037013	2					
ANR	5037132	ParameterList	const char * w		5037013	3					
ANR	5037133	Parameter	const char * w	296:28:8034:8046	5037013	0	True				
ANR	5037134	ParameterType	const char *		5037013	0					
ANR	5037135	Identifier	w		5037013	1					
ANR	5037136	CFGEntryNode	ENTRY		5037013		True				
ANR	5037137	CFGExitNode	EXIT		5037013		True				
ANR	5037138	Symbol	* w		5037013						
ANR	5037139	Symbol	ishexch		5037013						
ANR	5037140	Symbol	w		5037013						
ANR	5037141	Function	parse_localvar	310:0:8334:9125							
ANR	5037142	FunctionDef	"parse_localvar (RParse * p , char * newstr , size_t newstr_len , const char * var , const char * reg , char sign , char * ireg , bool att)"		5037141	0					
ANR	5037143	CompoundStatement		310:139:8473:9125	5037141	0					
ANR	5037144	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	311:1:8476:8507	5037141	0	True				
ANR	5037145	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5037141	0					
ANR	5037146	IdentifierDeclType	RStrBuf *		5037141	0					
ANR	5037147	Identifier	sb		5037141	1					
ANR	5037148	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5037141	2		=			
ANR	5037149	Identifier	sb		5037141	0					
ANR	5037150	CallExpression	"r_strbuf_new ( """" )"		5037141	1					
ANR	5037151	Callee	r_strbuf_new		5037141	0					
ANR	5037152	Identifier	r_strbuf_new		5037141	0					
ANR	5037153	ArgumentList	""""""		5037141	1					
ANR	5037154	Argument	""""""		5037141	0					
ANR	5037155	PrimaryExpression	""""""		5037141	0					
ANR	5037156	IfStatement	if ( att )		5037141	1					
ANR	5037157	Condition	att	312:5:8514:8516	5037141	0	True				
ANR	5037158	Identifier	att		5037141	0					
ANR	5037159	CompoundStatement		3:10:45:45	5037141	1					
ANR	5037160	IfStatement	if ( p -> localvar_only )		5037141	0					
ANR	5037161	Condition	p -> localvar_only	313:6:8527:8542	5037141	0	True				
ANR	5037162	PtrMemberAccess	p -> localvar_only		5037141	0					
ANR	5037163	Identifier	p		5037141	0					
ANR	5037164	Identifier	localvar_only		5037141	1					
ANR	5037165	CompoundStatement		4:24:71:71	5037141	1					
ANR	5037166	IfStatement	if ( ireg )		5037141	0					
ANR	5037167	Condition	ireg	314:7:8554:8557	5037141	0	True				
ANR	5037168	Identifier	ireg		5037141	0					
ANR	5037169	CompoundStatement		5:13:86:86	5037141	1					
ANR	5037170	ExpressionStatement	"r_strbuf_setf ( sb , ""(%%%s)"" , ireg )"	315:4:8566:8600	5037141	0	True				
ANR	5037171	CallExpression	"r_strbuf_setf ( sb , ""(%%%s)"" , ireg )"		5037141	0					
ANR	5037172	Callee	r_strbuf_setf		5037141	0					
ANR	5037173	Identifier	r_strbuf_setf		5037141	0					
ANR	5037174	ArgumentList	sb		5037141	1					
ANR	5037175	Argument	sb		5037141	0					
ANR	5037176	Identifier	sb		5037141	0					
ANR	5037177	Argument	"""(%%%s)"""		5037141	1					
ANR	5037178	PrimaryExpression	"""(%%%s)"""		5037141	0					
ANR	5037179	Argument	ireg		5037141	2					
ANR	5037180	Identifier	ireg		5037141	0					
ANR	5037181	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""%s%s"" , var , r_strbuf_get ( sb ) )"	317:3:8610:8675	5037141	1	True				
ANR	5037182	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""%s%s"" , var , r_strbuf_get ( sb ) )"		5037141	0					
ANR	5037183	Callee	snprintf		5037141	0					
ANR	5037184	Identifier	snprintf		5037141	0					
ANR	5037185	ArgumentList	newstr		5037141	1					
ANR	5037186	Argument	newstr		5037141	0					
ANR	5037187	Identifier	newstr		5037141	0					
ANR	5037188	Argument	newstr_len - 1		5037141	1					
ANR	5037189	AdditiveExpression	newstr_len - 1		5037141	0		-			
ANR	5037190	Identifier	newstr_len		5037141	0					
ANR	5037191	PrimaryExpression	1		5037141	1					
ANR	5037192	Argument	"""%s%s"""		5037141	2					
ANR	5037193	PrimaryExpression	"""%s%s"""		5037141	0					
ANR	5037194	Argument	var		5037141	3					
ANR	5037195	Identifier	var		5037141	0					
ANR	5037196	Argument	r_strbuf_get ( sb )		5037141	4					
ANR	5037197	CallExpression	r_strbuf_get ( sb )		5037141	0					
ANR	5037198	Callee	r_strbuf_get		5037141	0					
ANR	5037199	Identifier	r_strbuf_get		5037141	0					
ANR	5037200	ArgumentList	sb		5037141	1					
ANR	5037201	Argument	sb		5037141	0					
ANR	5037202	Identifier	sb		5037141	0					
ANR	5037203	ElseStatement	else		5037141	0					
ANR	5037204	CompoundStatement		9:9:212:212	5037141	0					
ANR	5037205	IfStatement	if ( ireg )		5037141	0					
ANR	5037206	Condition	ireg	319:7:8695:8698	5037141	0	True				
ANR	5037207	Identifier	ireg		5037141	0					
ANR	5037208	CompoundStatement		10:13:227:227	5037141	1					
ANR	5037209	ExpressionStatement	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"	320:4:8707:8741	5037141	0	True				
ANR	5037210	CallExpression	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"		5037141	0					
ANR	5037211	Callee	r_strbuf_setf		5037141	0					
ANR	5037212	Identifier	r_strbuf_setf		5037141	0					
ANR	5037213	ArgumentList	sb		5037141	1					
ANR	5037214	Argument	sb		5037141	0					
ANR	5037215	Identifier	sb		5037141	0					
ANR	5037216	Argument	""", %%%s"""		5037141	1					
ANR	5037217	PrimaryExpression	""", %%%s"""		5037141	0					
ANR	5037218	Argument	ireg		5037141	2					
ANR	5037219	Identifier	ireg		5037141	0					
ANR	5037220	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""%s(%%%s%s)"" , var , reg , r_strbuf_get ( sb ) )"	322:3:8751:8827	5037141	1	True				
ANR	5037221	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""%s(%%%s%s)"" , var , reg , r_strbuf_get ( sb ) )"		5037141	0					
ANR	5037222	Callee	snprintf		5037141	0					
ANR	5037223	Identifier	snprintf		5037141	0					
ANR	5037224	ArgumentList	newstr		5037141	1					
ANR	5037225	Argument	newstr		5037141	0					
ANR	5037226	Identifier	newstr		5037141	0					
ANR	5037227	Argument	newstr_len - 1		5037141	1					
ANR	5037228	AdditiveExpression	newstr_len - 1		5037141	0		-			
ANR	5037229	Identifier	newstr_len		5037141	0					
ANR	5037230	PrimaryExpression	1		5037141	1					
ANR	5037231	Argument	"""%s(%%%s%s)"""		5037141	2					
ANR	5037232	PrimaryExpression	"""%s(%%%s%s)"""		5037141	0					
ANR	5037233	Argument	var		5037141	3					
ANR	5037234	Identifier	var		5037141	0					
ANR	5037235	Argument	reg		5037141	4					
ANR	5037236	Identifier	reg		5037141	0					
ANR	5037237	Argument	r_strbuf_get ( sb )		5037141	5					
ANR	5037238	CallExpression	r_strbuf_get ( sb )		5037141	0					
ANR	5037239	Callee	r_strbuf_get		5037141	0					
ANR	5037240	Identifier	r_strbuf_get		5037141	0					
ANR	5037241	ArgumentList	sb		5037141	1					
ANR	5037242	Argument	sb		5037141	0					
ANR	5037243	Identifier	sb		5037141	0					
ANR	5037244	ElseStatement	else		5037141	0					
ANR	5037245	CompoundStatement		15:8:367:367	5037141	0					
ANR	5037246	IfStatement	if ( ireg )		5037141	0					
ANR	5037247	Condition	ireg	325:6:8849:8852	5037141	0	True				
ANR	5037248	Identifier	ireg		5037141	0					
ANR	5037249	CompoundStatement		16:12:381:381	5037141	1					
ANR	5037250	ExpressionStatement	"r_strbuf_setf ( sb , "" + %s"" , ireg )"	326:3:8860:8893	5037141	0	True				
ANR	5037251	CallExpression	"r_strbuf_setf ( sb , "" + %s"" , ireg )"		5037141	0					
ANR	5037252	Callee	r_strbuf_setf		5037141	0					
ANR	5037253	Identifier	r_strbuf_setf		5037141	0					
ANR	5037254	ArgumentList	sb		5037141	1					
ANR	5037255	Argument	sb		5037141	0					
ANR	5037256	Identifier	sb		5037141	0					
ANR	5037257	Argument	""" + %s"""		5037141	1					
ANR	5037258	PrimaryExpression	""" + %s"""		5037141	0					
ANR	5037259	Argument	ireg		5037141	2					
ANR	5037260	Identifier	ireg		5037141	0					
ANR	5037261	IfStatement	if ( p -> localvar_only )		5037141	1					
ANR	5037262	Condition	p -> localvar_only	328:6:8905:8920	5037141	0	True				
ANR	5037263	PtrMemberAccess	p -> localvar_only		5037141	0					
ANR	5037264	Identifier	p		5037141	0					
ANR	5037265	Identifier	localvar_only		5037141	1					
ANR	5037266	CompoundStatement		19:24:449:449	5037141	1					
ANR	5037267	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""[%s%s]"" , var , r_strbuf_get ( sb ) )"	329:3:8928:8995	5037141	0	True				
ANR	5037268	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""[%s%s]"" , var , r_strbuf_get ( sb ) )"		5037141	0					
ANR	5037269	Callee	snprintf		5037141	0					
ANR	5037270	Identifier	snprintf		5037141	0					
ANR	5037271	ArgumentList	newstr		5037141	1					
ANR	5037272	Argument	newstr		5037141	0					
ANR	5037273	Identifier	newstr		5037141	0					
ANR	5037274	Argument	newstr_len - 1		5037141	1					
ANR	5037275	AdditiveExpression	newstr_len - 1		5037141	0		-			
ANR	5037276	Identifier	newstr_len		5037141	0					
ANR	5037277	PrimaryExpression	1		5037141	1					
ANR	5037278	Argument	"""[%s%s]"""		5037141	2					
ANR	5037279	PrimaryExpression	"""[%s%s]"""		5037141	0					
ANR	5037280	Argument	var		5037141	3					
ANR	5037281	Identifier	var		5037141	0					
ANR	5037282	Argument	r_strbuf_get ( sb )		5037141	4					
ANR	5037283	CallExpression	r_strbuf_get ( sb )		5037141	0					
ANR	5037284	Callee	r_strbuf_get		5037141	0					
ANR	5037285	Identifier	r_strbuf_get		5037141	0					
ANR	5037286	ArgumentList	sb		5037141	1					
ANR	5037287	Argument	sb		5037141	0					
ANR	5037288	Identifier	sb		5037141	0					
ANR	5037289	ElseStatement	else		5037141	0					
ANR	5037290	CompoundStatement		21:9:532:532	5037141	0					
ANR	5037291	ExpressionStatement	"snprintf ( newstr , newstr_len - 1 , ""[%s%s %c %s]"" , reg , r_strbuf_get ( sb ) , sign , var )"	331:3:9011:9095	5037141	0	True				
ANR	5037292	CallExpression	"snprintf ( newstr , newstr_len - 1 , ""[%s%s %c %s]"" , reg , r_strbuf_get ( sb ) , sign , var )"		5037141	0					
ANR	5037293	Callee	snprintf		5037141	0					
ANR	5037294	Identifier	snprintf		5037141	0					
ANR	5037295	ArgumentList	newstr		5037141	1					
ANR	5037296	Argument	newstr		5037141	0					
ANR	5037297	Identifier	newstr		5037141	0					
ANR	5037298	Argument	newstr_len - 1		5037141	1					
ANR	5037299	AdditiveExpression	newstr_len - 1		5037141	0		-			
ANR	5037300	Identifier	newstr_len		5037141	0					
ANR	5037301	PrimaryExpression	1		5037141	1					
ANR	5037302	Argument	"""[%s%s %c %s]"""		5037141	2					
ANR	5037303	PrimaryExpression	"""[%s%s %c %s]"""		5037141	0					
ANR	5037304	Argument	reg		5037141	3					
ANR	5037305	Identifier	reg		5037141	0					
ANR	5037306	Argument	r_strbuf_get ( sb )		5037141	4					
ANR	5037307	CallExpression	r_strbuf_get ( sb )		5037141	0					
ANR	5037308	Callee	r_strbuf_get		5037141	0					
ANR	5037309	Identifier	r_strbuf_get		5037141	0					
ANR	5037310	ArgumentList	sb		5037141	1					
ANR	5037311	Argument	sb		5037141	0					
ANR	5037312	Identifier	sb		5037141	0					
ANR	5037313	Argument	sign		5037141	5					
ANR	5037314	Identifier	sign		5037141	0					
ANR	5037315	Argument	var		5037141	6					
ANR	5037316	Identifier	var		5037141	0					
ANR	5037317	ExpressionStatement	r_strbuf_free ( sb )	334:1:9105:9123	5037141	2	True				
ANR	5037318	CallExpression	r_strbuf_free ( sb )		5037141	0					
ANR	5037319	Callee	r_strbuf_free		5037141	0					
ANR	5037320	Identifier	r_strbuf_free		5037141	0					
ANR	5037321	ArgumentList	sb		5037141	1					
ANR	5037322	Argument	sb		5037141	0					
ANR	5037323	Identifier	sb		5037141	0					
ANR	5037324	ReturnType	static void		5037141	1					
ANR	5037325	Identifier	parse_localvar		5037141	2					
ANR	5037326	ParameterList	"RParse * p , char * newstr , size_t newstr_len , const char * var , const char * reg , char sign , char * ireg , bool att"		5037141	3					
ANR	5037327	Parameter	RParse * p	310:28:8362:8370	5037141	0	True				
ANR	5037328	ParameterType	RParse *		5037141	0					
ANR	5037329	Identifier	p		5037141	1					
ANR	5037330	Parameter	char * newstr	310:39:8373:8384	5037141	1	True				
ANR	5037331	ParameterType	char *		5037141	0					
ANR	5037332	Identifier	newstr		5037141	1					
ANR	5037333	Parameter	size_t newstr_len	310:53:8387:8403	5037141	2	True				
ANR	5037334	ParameterType	size_t		5037141	0					
ANR	5037335	Identifier	newstr_len		5037141	1					
ANR	5037336	Parameter	const char * var	310:72:8406:8420	5037141	3	True				
ANR	5037337	ParameterType	const char *		5037141	0					
ANR	5037338	Identifier	var		5037141	1					
ANR	5037339	Parameter	const char * reg	310:89:8423:8437	5037141	4	True				
ANR	5037340	ParameterType	const char *		5037141	0					
ANR	5037341	Identifier	reg		5037141	1					
ANR	5037342	Parameter	char sign	310:106:8440:8448	5037141	5	True				
ANR	5037343	ParameterType	char		5037141	0					
ANR	5037344	Identifier	sign		5037141	1					
ANR	5037345	Parameter	char * ireg	310:117:8451:8460	5037141	6	True				
ANR	5037346	ParameterType	char *		5037141	0					
ANR	5037347	Identifier	ireg		5037141	1					
ANR	5037348	Parameter	bool att	310:129:8463:8470	5037141	7	True				
ANR	5037349	ParameterType	bool		5037141	0					
ANR	5037350	Identifier	att		5037141	1					
ANR	5037351	CFGEntryNode	ENTRY		5037141		True				
ANR	5037352	CFGExitNode	EXIT		5037141		True				
ANR	5037353	Symbol	att		5037141						
ANR	5037354	Symbol	r_strbuf_new		5037141						
ANR	5037355	Symbol	var		5037141						
ANR	5037356	Symbol	sign		5037141						
ANR	5037357	Symbol	newstr_len		5037141						
ANR	5037358	Symbol	newstr		5037141						
ANR	5037359	Symbol	sb		5037141						
ANR	5037360	Symbol	p -> localvar_only		5037141						
ANR	5037361	Symbol	p		5037141						
ANR	5037362	Symbol	reg		5037141						
ANR	5037363	Symbol	r_strbuf_get		5037141						
ANR	5037364	Symbol	ireg		5037141						
ANR	5037365	Symbol	* p		5037141						
ANR	5037366	Function	mk_reg_str	337:0:9128:9899							
ANR	5037367	FunctionDef	"mk_reg_str (const char * regname , int delta , bool sign , bool att , char * ireg , char * dest , int len)"		5037366	0					
ANR	5037368	CompoundStatement		337:116:9244:9899	5037366	0					
ANR	5037369	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	338:1:9247:9278	5037366	0	True				
ANR	5037370	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		5037366	0					
ANR	5037371	IdentifierDeclType	RStrBuf *		5037366	0					
ANR	5037372	Identifier	sb		5037366	1					
ANR	5037373	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		5037366	2		=			
ANR	5037374	Identifier	sb		5037366	0					
ANR	5037375	CallExpression	"r_strbuf_new ( """" )"		5037366	1					
ANR	5037376	Callee	r_strbuf_new		5037366	0					
ANR	5037377	Identifier	r_strbuf_new		5037366	0					
ANR	5037378	ArgumentList	""""""		5037366	1					
ANR	5037379	Argument	""""""		5037366	0					
ANR	5037380	PrimaryExpression	""""""		5037366	0					
ANR	5037381	IfStatement	if ( att )		5037366	1					
ANR	5037382	Condition	att	339:5:9285:9287	5037366	0	True				
ANR	5037383	Identifier	att		5037366	0					
ANR	5037384	CompoundStatement		3:10:45:45	5037366	1					
ANR	5037385	IfStatement	if ( ireg )		5037366	0					
ANR	5037386	Condition	ireg	340:6:9298:9301	5037366	0	True				
ANR	5037387	Identifier	ireg		5037366	0					
ANR	5037388	CompoundStatement		4:12:59:59	5037366	1					
ANR	5037389	ExpressionStatement	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"	341:3:9309:9343	5037366	0	True				
ANR	5037390	CallExpression	"r_strbuf_setf ( sb , "", %%%s"" , ireg )"		5037366	0					
ANR	5037391	Callee	r_strbuf_setf		5037366	0					
ANR	5037392	Identifier	r_strbuf_setf		5037366	0					
ANR	5037393	ArgumentList	sb		5037366	1					
ANR	5037394	Argument	sb		5037366	0					
ANR	5037395	Identifier	sb		5037366	0					
ANR	5037396	Argument	""", %%%s"""		5037366	1					
ANR	5037397	PrimaryExpression	""", %%%s"""		5037366	0					
ANR	5037398	Argument	ireg		5037366	2					
ANR	5037399	Identifier	ireg		5037366	0					
ANR	5037400	IfStatement	if ( delta < 10 )		5037366	1					
ANR	5037401	Condition	delta < 10	343:6:9355:9364	5037366	0	True				
ANR	5037402	RelationalExpression	delta < 10		5037366	0		<			
ANR	5037403	Identifier	delta		5037366	0					
ANR	5037404	PrimaryExpression	10		5037366	1					
ANR	5037405	CompoundStatement		7:18:122:122	5037366	1					
ANR	5037406	ExpressionStatement	"snprintf ( dest , len - 1 , ""%s%d(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"	344:3:9372:9464	5037366	0	True				
ANR	5037407	CallExpression	"snprintf ( dest , len - 1 , ""%s%d(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"		5037366	0					
ANR	5037408	Callee	snprintf		5037366	0					
ANR	5037409	Identifier	snprintf		5037366	0					
ANR	5037410	ArgumentList	dest		5037366	1					
ANR	5037411	Argument	dest		5037366	0					
ANR	5037412	Identifier	dest		5037366	0					
ANR	5037413	Argument	len - 1		5037366	1					
ANR	5037414	AdditiveExpression	len - 1		5037366	0		-			
ANR	5037415	Identifier	len		5037366	0					
ANR	5037416	PrimaryExpression	1		5037366	1					
ANR	5037417	Argument	"""%s%d(%%%s%s)"""		5037366	2					
ANR	5037418	PrimaryExpression	"""%s%d(%%%s%s)"""		5037366	0					
ANR	5037419	Argument	"sign ? """" : ""-"""		5037366	3					
ANR	5037420	ConditionalExpression	"sign ? """" : ""-"""		5037366	0					
ANR	5037421	Condition	sign		5037366	0					
ANR	5037422	Identifier	sign		5037366	0					
ANR	5037423	PrimaryExpression	""""""		5037366	1					
ANR	5037424	PrimaryExpression	"""-"""		5037366	2					
ANR	5037425	Argument	delta		5037366	4					
ANR	5037426	Identifier	delta		5037366	0					
ANR	5037427	Argument	regname		5037366	5					
ANR	5037428	Identifier	regname		5037366	0					
ANR	5037429	Argument	r_strbuf_get ( sb )		5037366	6					
ANR	5037430	CallExpression	r_strbuf_get ( sb )		5037366	0					
ANR	5037431	Callee	r_strbuf_get		5037366	0					
ANR	5037432	Identifier	r_strbuf_get		5037366	0					
ANR	5037433	ArgumentList	sb		5037366	1					
ANR	5037434	Argument	sb		5037366	0					
ANR	5037435	Identifier	sb		5037366	0					
ANR	5037436	ElseStatement	else		5037366	0					
ANR	5037437	CompoundStatement		9:9:230:230	5037366	0					
ANR	5037438	ExpressionStatement	"snprintf ( dest , len - 1 , ""%s0x%x(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"	346:3:9480:9574	5037366	0	True				
ANR	5037439	CallExpression	"snprintf ( dest , len - 1 , ""%s0x%x(%%%s%s)"" , sign ? """" : ""-"" , delta , regname , r_strbuf_get ( sb ) )"		5037366	0					
ANR	5037440	Callee	snprintf		5037366	0					
ANR	5037441	Identifier	snprintf		5037366	0					
ANR	5037442	ArgumentList	dest		5037366	1					
ANR	5037443	Argument	dest		5037366	0					
ANR	5037444	Identifier	dest		5037366	0					
ANR	5037445	Argument	len - 1		5037366	1					
ANR	5037446	AdditiveExpression	len - 1		5037366	0		-			
ANR	5037447	Identifier	len		5037366	0					
ANR	5037448	PrimaryExpression	1		5037366	1					
ANR	5037449	Argument	"""%s0x%x(%%%s%s)"""		5037366	2					
ANR	5037450	PrimaryExpression	"""%s0x%x(%%%s%s)"""		5037366	0					
ANR	5037451	Argument	"sign ? """" : ""-"""		5037366	3					
ANR	5037452	ConditionalExpression	"sign ? """" : ""-"""		5037366	0					
ANR	5037453	Condition	sign		5037366	0					
ANR	5037454	Identifier	sign		5037366	0					
ANR	5037455	PrimaryExpression	""""""		5037366	1					
ANR	5037456	PrimaryExpression	"""-"""		5037366	2					
ANR	5037457	Argument	delta		5037366	4					
ANR	5037458	Identifier	delta		5037366	0					
ANR	5037459	Argument	regname		5037366	5					
ANR	5037460	Identifier	regname		5037366	0					
ANR	5037461	Argument	r_strbuf_get ( sb )		5037366	6					
ANR	5037462	CallExpression	r_strbuf_get ( sb )		5037366	0					
ANR	5037463	Callee	r_strbuf_get		5037366	0					
ANR	5037464	Identifier	r_strbuf_get		5037366	0					
ANR	5037465	ArgumentList	sb		5037366	1					
ANR	5037466	Argument	sb		5037366	0					
ANR	5037467	Identifier	sb		5037366	0					
ANR	5037468	ElseStatement	else		5037366	0					
ANR	5037469	CompoundStatement		12:8:343:343	5037366	0					
ANR	5037470	IfStatement	if ( ireg )		5037366	0					
ANR	5037471	Condition	ireg	349:6:9596:9599	5037366	0	True				
ANR	5037472	Identifier	ireg		5037366	0					
ANR	5037473	CompoundStatement		13:12:357:357	5037366	1					
ANR	5037474	ExpressionStatement	"r_strbuf_setf ( sb , "" + %s"" , ireg )"	350:3:9607:9640	5037366	0	True				
ANR	5037475	CallExpression	"r_strbuf_setf ( sb , "" + %s"" , ireg )"		5037366	0					
ANR	5037476	Callee	r_strbuf_setf		5037366	0					
ANR	5037477	Identifier	r_strbuf_setf		5037366	0					
ANR	5037478	ArgumentList	sb		5037366	1					
ANR	5037479	Argument	sb		5037366	0					
ANR	5037480	Identifier	sb		5037366	0					
ANR	5037481	Argument	""" + %s"""		5037366	1					
ANR	5037482	PrimaryExpression	""" + %s"""		5037366	0					
ANR	5037483	Argument	ireg		5037366	2					
ANR	5037484	Identifier	ireg		5037366	0					
ANR	5037485	IfStatement	if ( delta < 10 )		5037366	1					
ANR	5037486	Condition	delta < 10	352:6:9652:9661	5037366	0	True				
ANR	5037487	RelationalExpression	delta < 10		5037366	0		<			
ANR	5037488	Identifier	delta		5037366	0					
ANR	5037489	PrimaryExpression	10		5037366	1					
ANR	5037490	CompoundStatement		16:18:419:419	5037366	1					
ANR	5037491	ExpressionStatement	"snprintf ( dest , len - 1 , ""[%s%s %c %d]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"	353:3:9669:9760	5037366	0	True				
ANR	5037492	CallExpression	"snprintf ( dest , len - 1 , ""[%s%s %c %d]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"		5037366	0					
ANR	5037493	Callee	snprintf		5037366	0					
ANR	5037494	Identifier	snprintf		5037366	0					
ANR	5037495	ArgumentList	dest		5037366	1					
ANR	5037496	Argument	dest		5037366	0					
ANR	5037497	Identifier	dest		5037366	0					
ANR	5037498	Argument	len - 1		5037366	1					
ANR	5037499	AdditiveExpression	len - 1		5037366	0		-			
ANR	5037500	Identifier	len		5037366	0					
ANR	5037501	PrimaryExpression	1		5037366	1					
ANR	5037502	Argument	"""[%s%s %c %d]"""		5037366	2					
ANR	5037503	PrimaryExpression	"""[%s%s %c %d]"""		5037366	0					
ANR	5037504	Argument	regname		5037366	3					
ANR	5037505	Identifier	regname		5037366	0					
ANR	5037506	Argument	r_strbuf_get ( sb )		5037366	4					
ANR	5037507	CallExpression	r_strbuf_get ( sb )		5037366	0					
ANR	5037508	Callee	r_strbuf_get		5037366	0					
ANR	5037509	Identifier	r_strbuf_get		5037366	0					
ANR	5037510	ArgumentList	sb		5037366	1					
ANR	5037511	Argument	sb		5037366	0					
ANR	5037512	Identifier	sb		5037366	0					
ANR	5037513	Argument	sign ? '+' : '-'		5037366	5					
ANR	5037514	ConditionalExpression	sign ? '+' : '-'		5037366	0					
ANR	5037515	Condition	sign		5037366	0					
ANR	5037516	Identifier	sign		5037366	0					
ANR	5037517	PrimaryExpression	'+'		5037366	1					
ANR	5037518	PrimaryExpression	'-'		5037366	2					
ANR	5037519	Argument	delta		5037366	6					
ANR	5037520	Identifier	delta		5037366	0					
ANR	5037521	ElseStatement	else		5037366	0					
ANR	5037522	CompoundStatement		18:9:526:526	5037366	0					
ANR	5037523	ExpressionStatement	"snprintf ( dest , len - 1 , ""[%s%s %c 0x%x]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"	355:3:9776:9869	5037366	0	True				
ANR	5037524	CallExpression	"snprintf ( dest , len - 1 , ""[%s%s %c 0x%x]"" , regname , r_strbuf_get ( sb ) , sign ? '+' : '-' , delta )"		5037366	0					
ANR	5037525	Callee	snprintf		5037366	0					
ANR	5037526	Identifier	snprintf		5037366	0					
ANR	5037527	ArgumentList	dest		5037366	1					
ANR	5037528	Argument	dest		5037366	0					
ANR	5037529	Identifier	dest		5037366	0					
ANR	5037530	Argument	len - 1		5037366	1					
ANR	5037531	AdditiveExpression	len - 1		5037366	0		-			
ANR	5037532	Identifier	len		5037366	0					
ANR	5037533	PrimaryExpression	1		5037366	1					
ANR	5037534	Argument	"""[%s%s %c 0x%x]"""		5037366	2					
ANR	5037535	PrimaryExpression	"""[%s%s %c 0x%x]"""		5037366	0					
ANR	5037536	Argument	regname		5037366	3					
ANR	5037537	Identifier	regname		5037366	0					
ANR	5037538	Argument	r_strbuf_get ( sb )		5037366	4					
ANR	5037539	CallExpression	r_strbuf_get ( sb )		5037366	0					
ANR	5037540	Callee	r_strbuf_get		5037366	0					
ANR	5037541	Identifier	r_strbuf_get		5037366	0					
ANR	5037542	ArgumentList	sb		5037366	1					
ANR	5037543	Argument	sb		5037366	0					
ANR	5037544	Identifier	sb		5037366	0					
ANR	5037545	Argument	sign ? '+' : '-'		5037366	5					
ANR	5037546	ConditionalExpression	sign ? '+' : '-'		5037366	0					
ANR	5037547	Condition	sign		5037366	0					
ANR	5037548	Identifier	sign		5037366	0					
ANR	5037549	PrimaryExpression	'+'		5037366	1					
ANR	5037550	PrimaryExpression	'-'		5037366	2					
ANR	5037551	Argument	delta		5037366	6					
ANR	5037552	Identifier	delta		5037366	0					
ANR	5037553	ExpressionStatement	r_strbuf_free ( sb )	358:1:9879:9897	5037366	2	True				
ANR	5037554	CallExpression	r_strbuf_free ( sb )		5037366	0					
ANR	5037555	Callee	r_strbuf_free		5037366	0					
ANR	5037556	Identifier	r_strbuf_free		5037366	0					
ANR	5037557	ArgumentList	sb		5037366	1					
ANR	5037558	Argument	sb		5037366	0					
ANR	5037559	Identifier	sb		5037366	0					
ANR	5037560	ReturnType	static inline void		5037366	1					
ANR	5037561	Identifier	mk_reg_str		5037366	2					
ANR	5037562	ParameterList	"const char * regname , int delta , bool sign , bool att , char * ireg , char * dest , int len"		5037366	3					
ANR	5037563	Parameter	const char * regname	337:30:9158:9176	5037366	0	True				
ANR	5037564	ParameterType	const char *		5037366	0					
ANR	5037565	Identifier	regname		5037366	1					
ANR	5037566	Parameter	int delta	337:51:9179:9187	5037366	1	True				
ANR	5037567	ParameterType	int		5037366	0					
ANR	5037568	Identifier	delta		5037366	1					
ANR	5037569	Parameter	bool sign	337:62:9190:9198	5037366	2	True				
ANR	5037570	ParameterType	bool		5037366	0					
ANR	5037571	Identifier	sign		5037366	1					
ANR	5037572	Parameter	bool att	337:73:9201:9208	5037366	3	True				
ANR	5037573	ParameterType	bool		5037366	0					
ANR	5037574	Identifier	att		5037366	1					
ANR	5037575	Parameter	char * ireg	337:83:9211:9220	5037366	4	True				
ANR	5037576	ParameterType	char *		5037366	0					
ANR	5037577	Identifier	ireg		5037366	1					
ANR	5037578	Parameter	char * dest	337:95:9223:9232	5037366	5	True				
ANR	5037579	ParameterType	char *		5037366	0					
ANR	5037580	Identifier	dest		5037366	1					
ANR	5037581	Parameter	int len	337:107:9235:9241	5037366	6	True				
ANR	5037582	ParameterType	int		5037366	0					
ANR	5037583	Identifier	len		5037366	1					
ANR	5037584	CFGEntryNode	ENTRY		5037366		True				
ANR	5037585	CFGExitNode	EXIT		5037366		True				
ANR	5037586	Symbol	att		5037366						
ANR	5037587	Symbol	regname		5037366						
ANR	5037588	Symbol	r_strbuf_new		5037366						
ANR	5037589	Symbol	len		5037366						
ANR	5037590	Symbol	r_strbuf_get		5037366						
ANR	5037591	Symbol	delta		5037366						
ANR	5037592	Symbol	sign		5037366						
ANR	5037593	Symbol	ireg		5037366						
ANR	5037594	Symbol	dest		5037366						
ANR	5037595	Symbol	sb		5037366						
ANR	5037596	Function	varsub	361:0:9902:14272							
ANR	5037597	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5037596	0					
ANR	5037598	CompoundStatement		361:103:10005:14272	5037596	0					
ANR	5037599	IdentifierDeclStatement	"RList * bpargs , * spargs ;"	362:1:10008:10030	5037596	0	True				
ANR	5037600	IdentifierDecl	* bpargs		5037596	0					
ANR	5037601	IdentifierDeclType	RList *		5037596	0					
ANR	5037602	Identifier	bpargs		5037596	1					
ANR	5037603	IdentifierDecl	* spargs		5037596	1					
ANR	5037604	IdentifierDeclType	RList *		5037596	0					
ANR	5037605	Identifier	spargs		5037596	1					
ANR	5037606	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	363:1:10033:10060	5037596	1	True				
ANR	5037607	IdentifierDecl	* anal = p -> analb . anal		5037596	0					
ANR	5037608	IdentifierDeclType	RAnal *		5037596	0					
ANR	5037609	Identifier	anal		5037596	1					
ANR	5037610	AssignmentExpression	* anal = p -> analb . anal		5037596	2		=			
ANR	5037611	Identifier	anal		5037596	0					
ANR	5037612	MemberAccess	p -> analb . anal		5037596	1					
ANR	5037613	PtrMemberAccess	p -> analb		5037596	0					
ANR	5037614	Identifier	p		5037596	0					
ANR	5037615	Identifier	analb		5037596	1					
ANR	5037616	Identifier	anal		5037596	1					
ANR	5037617	IdentifierDeclStatement	"RAnalVar * bparg , * sparg ;"	364:1:10063:10086	5037596	2	True				
ANR	5037618	IdentifierDecl	* bparg		5037596	0					
ANR	5037619	IdentifierDeclType	RAnalVar *		5037596	0					
ANR	5037620	Identifier	bparg		5037596	1					
ANR	5037621	IdentifierDecl	* sparg		5037596	1					
ANR	5037622	IdentifierDeclType	RAnalVar *		5037596	0					
ANR	5037623	Identifier	sparg		5037596	1					
ANR	5037624	IdentifierDeclStatement	"RListIter * bpargiter , * spiter ;"	365:1:10089:10118	5037596	3	True				
ANR	5037625	IdentifierDecl	* bpargiter		5037596	0					
ANR	5037626	IdentifierDeclType	RListIter *		5037596	0					
ANR	5037627	Identifier	bpargiter		5037596	1					
ANR	5037628	IdentifierDecl	* spiter		5037596	1					
ANR	5037629	IdentifierDeclType	RListIter *		5037596	0					
ANR	5037630	Identifier	spiter		5037596	1					
ANR	5037631	IdentifierDeclStatement	"char oldstr [ 64 ] , newstr [ 64 ] ;"	366:1:10121:10148	5037596	4	True				
ANR	5037632	IdentifierDecl	oldstr [ 64 ]		5037596	0					
ANR	5037633	IdentifierDeclType	char [ 64 ]		5037596	0					
ANR	5037634	Identifier	oldstr		5037596	1					
ANR	5037635	PrimaryExpression	64		5037596	2					
ANR	5037636	IdentifierDecl	newstr [ 64 ]		5037596	1					
ANR	5037637	IdentifierDeclType	char [ 64 ]		5037596	0					
ANR	5037638	Identifier	newstr		5037596	1					
ANR	5037639	PrimaryExpression	64		5037596	2					
ANR	5037640	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	367:1:10151:10177	5037596	5	True				
ANR	5037641	IdentifierDecl	* tstr = strdup ( data )		5037596	0					
ANR	5037642	IdentifierDeclType	char *		5037596	0					
ANR	5037643	Identifier	tstr		5037596	1					
ANR	5037644	AssignmentExpression	* tstr = strdup ( data )		5037596	2		=			
ANR	5037645	Identifier	tstr		5037596	0					
ANR	5037646	CallExpression	strdup ( data )		5037596	1					
ANR	5037647	Callee	strdup		5037596	0					
ANR	5037648	Identifier	strdup		5037596	0					
ANR	5037649	ArgumentList	data		5037596	1					
ANR	5037650	Argument	data		5037596	0					
ANR	5037651	Identifier	data		5037596	0					
ANR	5037652	IfStatement	if ( ! tstr )		5037596	6					
ANR	5037653	Condition	! tstr	368:5:10184:10188	5037596	0	True				
ANR	5037654	UnaryOperationExpression	! tstr		5037596	0					
ANR	5037655	UnaryOperator	!		5037596	0					
ANR	5037656	Identifier	tstr		5037596	1					
ANR	5037657	CompoundStatement		8:12:185:185	5037596	1					
ANR	5037658	ReturnStatement	return false ;	369:2:10195:10207	5037596	0	True				
ANR	5037659	Identifier	false		5037596	0					
ANR	5037660	IdentifierDeclStatement	"bool att = strchr ( data , '%' ) ;"	372:1:10214:10243	5037596	7	True				
ANR	5037661	IdentifierDecl	"att = strchr ( data , '%' )"		5037596	0					
ANR	5037662	IdentifierDeclType	bool		5037596	0					
ANR	5037663	Identifier	att		5037596	1					
ANR	5037664	AssignmentExpression	"att = strchr ( data , '%' )"		5037596	2		=			
ANR	5037665	Identifier	att		5037596	0					
ANR	5037666	CallExpression	"strchr ( data , '%' )"		5037596	1					
ANR	5037667	Callee	strchr		5037596	0					
ANR	5037668	Identifier	strchr		5037596	0					
ANR	5037669	ArgumentList	data		5037596	1					
ANR	5037670	Argument	data		5037596	0					
ANR	5037671	Identifier	data		5037596	0					
ANR	5037672	Argument	'%'		5037596	1					
ANR	5037673	PrimaryExpression	'%'		5037596	0					
ANR	5037674	IfStatement	if ( p -> relsub )		5037596	8					
ANR	5037675	Condition	p -> relsub	374:5:10251:10259	5037596	0	True				
ANR	5037676	PtrMemberAccess	p -> relsub		5037596	0					
ANR	5037677	Identifier	p		5037596	0					
ANR	5037678	Identifier	relsub		5037596	1					
ANR	5037679	CompoundStatement		14:16:256:256	5037596	1					
ANR	5037680	IfStatement	if ( att )		5037596	0					
ANR	5037681	Condition	att	375:6:10270:10272	5037596	0	True				
ANR	5037682	Identifier	att		5037596	0					
ANR	5037683	CompoundStatement		16:3:274:325	5037596	1					
ANR	5037684	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" ) ;"	376:3:10280:10331	5037596	0	True				
ANR	5037685	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5037596	0					
ANR	5037686	IdentifierDeclType	char *		5037596	0					
ANR	5037687	Identifier	rip		5037596	1					
ANR	5037688	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5037596	2		=			
ANR	5037689	Identifier	rip		5037596	0					
ANR	5037690	CastExpression	"( char * ) r_str_casestr ( tstr , ""(%rip)"" )"		5037596	1					
ANR	5037691	CastTarget	char *		5037596	0					
ANR	5037692	CallExpression	"r_str_casestr ( tstr , ""(%rip)"" )"		5037596	1					
ANR	5037693	Callee	r_str_casestr		5037596	0					
ANR	5037694	Identifier	r_str_casestr		5037596	0					
ANR	5037695	ArgumentList	tstr		5037596	1					
ANR	5037696	Argument	tstr		5037596	0					
ANR	5037697	Identifier	tstr		5037596	0					
ANR	5037698	Argument	"""(%rip)"""		5037596	1					
ANR	5037699	PrimaryExpression	"""(%rip)"""		5037596	0					
ANR	5037700	IfStatement	if ( rip )		5037596	1					
ANR	5037701	Condition	rip	377:7:10340:10342	5037596	0	True				
ANR	5037702	Identifier	rip		5037596	0					
ANR	5037703	CompoundStatement		21:4:406:422	5037596	1					
ANR	5037704	ExpressionStatement	* rip = 0	378:4:10351:10359	5037596	0	True				
ANR	5037705	AssignmentExpression	* rip = 0		5037596	0		=			
ANR	5037706	UnaryOperationExpression	* rip		5037596	0					
ANR	5037707	UnaryOperator	*		5037596	0					
ANR	5037708	Identifier	rip		5037596	1					
ANR	5037709	PrimaryExpression	0		5037596	1					
ANR	5037710	IdentifierDeclStatement	char * pre = tstr ;	379:4:10365:10381	5037596	1	True				
ANR	5037711	IdentifierDecl	* pre = tstr		5037596	0					
ANR	5037712	IdentifierDeclType	char *		5037596	0					
ANR	5037713	Identifier	pre		5037596	1					
ANR	5037714	AssignmentExpression	* pre = tstr		5037596	2		=			
ANR	5037715	Identifier	tstr		5037596	0					
ANR	5037716	Identifier	tstr		5037596	1					
ANR	5037717	IdentifierDeclStatement	char * pos = rip + 6 ;	380:4:10387:10406	5037596	2	True				
ANR	5037718	IdentifierDecl	* pos = rip + 6		5037596	0					
ANR	5037719	IdentifierDeclType	char *		5037596	0					
ANR	5037720	Identifier	pos		5037596	1					
ANR	5037721	AssignmentExpression	* pos = rip + 6		5037596	2		=			
ANR	5037722	Identifier	pos		5037596	0					
ANR	5037723	AdditiveExpression	rip + 6		5037596	1		+			
ANR	5037724	Identifier	rip		5037596	0					
ANR	5037725	PrimaryExpression	6		5037596	1					
ANR	5037726	IdentifierDeclStatement	char * word = rip ;	381:4:10412:10428	5037596	3	True				
ANR	5037727	IdentifierDecl	* word = rip		5037596	0					
ANR	5037728	IdentifierDeclType	char *		5037596	0					
ANR	5037729	Identifier	word		5037596	1					
ANR	5037730	AssignmentExpression	* word = rip		5037596	2		=			
ANR	5037731	Identifier	rip		5037596	0					
ANR	5037732	Identifier	rip		5037596	1					
ANR	5037733	WhileStatement	while ( word > tstr && * word != ' ' )		5037596	4					
ANR	5037734	Condition	word > tstr && * word != ' '	382:11:10441:10467	5037596	0	True				
ANR	5037735	AndExpression	word > tstr && * word != ' '		5037596	0		&&			
ANR	5037736	RelationalExpression	word > tstr		5037596	0		>			
ANR	5037737	Identifier	word		5037596	0					
ANR	5037738	Identifier	tstr		5037596	1					
ANR	5037739	EqualityExpression	* word != ' '		5037596	1		!=			
ANR	5037740	UnaryOperationExpression	* word		5037596	0					
ANR	5037741	UnaryOperator	*		5037596	0					
ANR	5037742	Identifier	word		5037596	1					
ANR	5037743	PrimaryExpression	' '		5037596	1					
ANR	5037744	CompoundStatement		22:40:464:464	5037596	1					
ANR	5037745	ExpressionStatement	word --	383:5:10477:10483	5037596	0	True				
ANR	5037746	PostIncDecOperationExpression	word --		5037596	0					
ANR	5037747	Identifier	word		5037596	0					
ANR	5037748	IncDec	--		5037596	1					
ANR	5037749	IfStatement	if ( word > tstr )		5037596	5					
ANR	5037750	Condition	word > tstr	386:8:10500:10510	5037596	0	True				
ANR	5037751	RelationalExpression	word > tstr		5037596	0		>			
ANR	5037752	Identifier	word		5037596	0					
ANR	5037753	Identifier	tstr		5037596	1					
ANR	5037754	CompoundStatement		30:5:586:618	5037596	1					
ANR	5037755	ExpressionStatement	* word ++ = 0	387:5:10520:10531	5037596	0	True				
ANR	5037756	AssignmentExpression	* word ++ = 0		5037596	0		=			
ANR	5037757	UnaryOperationExpression	* word ++		5037596	0					
ANR	5037758	UnaryOperator	*		5037596	0					
ANR	5037759	PostIncDecOperationExpression	word ++		5037596	1					
ANR	5037760	Identifier	word		5037596	0					
ANR	5037761	IncDec	++		5037596	1					
ANR	5037762	PrimaryExpression	0		5037596	1					
ANR	5037763	ExpressionStatement	* rip = 0	388:5:10538:10546	5037596	1	True				
ANR	5037764	AssignmentExpression	* rip = 0		5037596	0		=			
ANR	5037765	UnaryOperationExpression	* rip		5037596	0					
ANR	5037766	UnaryOperator	*		5037596	0					
ANR	5037767	Identifier	rip		5037596	1					
ANR	5037768	PrimaryExpression	0		5037596	1					
ANR	5037769	IdentifierDeclStatement	"st64 n = r_num_math ( NULL , word ) ;"	389:5:10553:10585	5037596	2	True				
ANR	5037770	IdentifierDecl	"n = r_num_math ( NULL , word )"		5037596	0					
ANR	5037771	IdentifierDeclType	st64		5037596	0					
ANR	5037772	Identifier	n		5037596	1					
ANR	5037773	AssignmentExpression	"n = r_num_math ( NULL , word )"		5037596	2		=			
ANR	5037774	Identifier	n		5037596	0					
ANR	5037775	CallExpression	"r_num_math ( NULL , word )"		5037596	1					
ANR	5037776	Callee	r_num_math		5037596	0					
ANR	5037777	Identifier	r_num_math		5037596	0					
ANR	5037778	ArgumentList	NULL		5037596	1					
ANR	5037779	Argument	NULL		5037596	0					
ANR	5037780	Identifier	NULL		5037596	0					
ANR	5037781	Argument	word		5037596	1					
ANR	5037782	Identifier	word		5037596	0					
ANR	5037783	IdentifierDeclStatement	ut64 repl_num = oplen + addr + n ;	390:5:10592:10624	5037596	3	True				
ANR	5037784	IdentifierDecl	repl_num = oplen + addr + n		5037596	0					
ANR	5037785	IdentifierDeclType	ut64		5037596	0					
ANR	5037786	Identifier	repl_num		5037596	1					
ANR	5037787	AssignmentExpression	repl_num = oplen + addr + n		5037596	2		=			
ANR	5037788	Identifier	repl_num		5037596	0					
ANR	5037789	AdditiveExpression	oplen + addr + n		5037596	1		+			
ANR	5037790	Identifier	oplen		5037596	0					
ANR	5037791	AdditiveExpression	addr + n		5037596	1		+			
ANR	5037792	Identifier	addr		5037596	0					
ANR	5037793	Identifier	n		5037596	1					
ANR	5037794	Statement	char	391:5:10631:10634	5037596	4	True				
ANR	5037795	Statement	*	391:10:10636:10636	5037596	5	True				
ANR	5037796	Statement	tstr_new	391:11:10637:10644	5037596	6	True				
ANR	5037797	Statement	=	391:20:10646:10646	5037596	7	True				
ANR	5037798	Statement	r_str_newf	391:22:10648:10657	5037596	8	True				
ANR	5037799	Statement	(	391:33:10659:10659	5037596	9	True				
ANR	5037800	Statement	"""%s 0x%08"""	391:34:10660:10669	5037596	10	True				
ANR	5037801	Statement	PFMT64x	391:44:10670:10676	5037596	11	True				
ANR	5037802	Statement	"""%s"""	391:51:10677:10680	5037596	12	True				
ANR	5037803	Statement	","	391:55:10681:10681	5037596	13	True				
ANR	5037804	Statement	pre	391:57:10683:10685	5037596	14	True				
ANR	5037805	Statement	","	391:60:10686:10686	5037596	15	True				
ANR	5037806	Statement	repl_num	391:62:10688:10695	5037596	16	True				
ANR	5037807	Statement	","	391:70:10696:10696	5037596	17	True				
ANR	5037808	Statement	pos	391:72:10698:10700	5037596	18	True				
ANR	5037809	Statement	)	391:75:10701:10701	5037596	19	True				
ANR	5037810	ExpressionStatement		391:76:10702:10702	5037596	20	True				
ANR	5037811	ExpressionStatement	* rip = '('	392:5:10709:10719	5037596	21	True				
ANR	5037812	AssignmentExpression	* rip = '('		5037596	0		=			
ANR	5037813	UnaryOperationExpression	* rip		5037596	0					
ANR	5037814	UnaryOperator	*		5037596	0					
ANR	5037815	Identifier	rip		5037596	1					
ANR	5037816	PrimaryExpression	'('		5037596	1					
ANR	5037817	ExpressionStatement	free ( tstr )	393:5:10726:10737	5037596	22	True				
ANR	5037818	CallExpression	free ( tstr )		5037596	0					
ANR	5037819	Callee	free		5037596	0					
ANR	5037820	Identifier	free		5037596	0					
ANR	5037821	ArgumentList	tstr		5037596	1					
ANR	5037822	Argument	tstr		5037596	0					
ANR	5037823	Identifier	tstr		5037596	0					
ANR	5037824	ExpressionStatement	tstr = tstr_new	394:5:10744:10759	5037596	23	True				
ANR	5037825	AssignmentExpression	tstr = tstr_new		5037596	0		=			
ANR	5037826	Identifier	tstr		5037596	0					
ANR	5037827	Identifier	tstr_new		5037596	1					
ANR	5037828	ElseStatement	else		5037596	0					
ANR	5037829	CompoundStatement		38:3:780:829	5037596	0					
ANR	5037830	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""[rip"" ) ;"	398:3:10786:10835	5037596	0	True				
ANR	5037831	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""[rip"" )"		5037596	0					
ANR	5037832	IdentifierDeclType	char *		5037596	0					
ANR	5037833	Identifier	rip		5037596	1					
ANR	5037834	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""[rip"" )"		5037596	2		=			
ANR	5037835	Identifier	rip		5037596	0					
ANR	5037836	CastExpression	"( char * ) r_str_casestr ( tstr , ""[rip"" )"		5037596	1					
ANR	5037837	CastTarget	char *		5037596	0					
ANR	5037838	CallExpression	"r_str_casestr ( tstr , ""[rip"" )"		5037596	1					
ANR	5037839	Callee	r_str_casestr		5037596	0					
ANR	5037840	Identifier	r_str_casestr		5037596	0					
ANR	5037841	ArgumentList	tstr		5037596	1					
ANR	5037842	Argument	tstr		5037596	0					
ANR	5037843	Identifier	tstr		5037596	0					
ANR	5037844	Argument	"""[rip"""		5037596	1					
ANR	5037845	PrimaryExpression	"""[rip"""		5037596	0					
ANR	5037846	IfStatement	if ( rip )		5037596	1					
ANR	5037847	Condition	rip	399:7:10844:10846	5037596	0	True				
ANR	5037848	Identifier	rip		5037596	0					
ANR	5037849	CompoundStatement		44:4:994:1022	5037596	1					
ANR	5037850	IdentifierDeclStatement	"char * ripend = strchr ( rip + 3 , ']' ) ;"	400:4:10855:10891	5037596	0	True				
ANR	5037851	IdentifierDecl	"* ripend = strchr ( rip + 3 , ']' )"		5037596	0					
ANR	5037852	IdentifierDeclType	char *		5037596	0					
ANR	5037853	Identifier	ripend		5037596	1					
ANR	5037854	AssignmentExpression	"* ripend = strchr ( rip + 3 , ']' )"		5037596	2		=			
ANR	5037855	Identifier	ripend		5037596	0					
ANR	5037856	CallExpression	"strchr ( rip + 3 , ']' )"		5037596	1					
ANR	5037857	Callee	strchr		5037596	0					
ANR	5037858	Identifier	strchr		5037596	0					
ANR	5037859	ArgumentList	rip + 3		5037596	1					
ANR	5037860	Argument	rip + 3		5037596	0					
ANR	5037861	AdditiveExpression	rip + 3		5037596	0		+			
ANR	5037862	Identifier	rip		5037596	0					
ANR	5037863	PrimaryExpression	3		5037596	1					
ANR	5037864	Argument	']'		5037596	1					
ANR	5037865	PrimaryExpression	']'		5037596	0					
ANR	5037866	IdentifierDeclStatement	"const char * plus = strchr ( rip , '+' ) ;"	401:4:10897:10933	5037596	1	True				
ANR	5037867	IdentifierDecl	"* plus = strchr ( rip , '+' )"		5037596	0					
ANR	5037868	IdentifierDeclType	const char *		5037596	0					
ANR	5037869	Identifier	plus		5037596	1					
ANR	5037870	AssignmentExpression	"* plus = strchr ( rip , '+' )"		5037596	2		=			
ANR	5037871	Identifier	plus		5037596	0					
ANR	5037872	CallExpression	"strchr ( rip , '+' )"		5037596	1					
ANR	5037873	Callee	strchr		5037596	0					
ANR	5037874	Identifier	strchr		5037596	0					
ANR	5037875	ArgumentList	rip		5037596	1					
ANR	5037876	Argument	rip		5037596	0					
ANR	5037877	Identifier	rip		5037596	0					
ANR	5037878	Argument	'+'		5037596	1					
ANR	5037879	PrimaryExpression	'+'		5037596	0					
ANR	5037880	IdentifierDeclStatement	"const char * neg = strchr ( rip , '-' ) ;"	402:4:10939:10974	5037596	2	True				
ANR	5037881	IdentifierDecl	"* neg = strchr ( rip , '-' )"		5037596	0					
ANR	5037882	IdentifierDeclType	const char *		5037596	0					
ANR	5037883	Identifier	neg		5037596	1					
ANR	5037884	AssignmentExpression	"* neg = strchr ( rip , '-' )"		5037596	2		=			
ANR	5037885	Identifier	neg		5037596	0					
ANR	5037886	CallExpression	"strchr ( rip , '-' )"		5037596	1					
ANR	5037887	Callee	strchr		5037596	0					
ANR	5037888	Identifier	strchr		5037596	0					
ANR	5037889	ArgumentList	rip		5037596	1					
ANR	5037890	Argument	rip		5037596	0					
ANR	5037891	Identifier	rip		5037596	0					
ANR	5037892	Argument	'-'		5037596	1					
ANR	5037893	PrimaryExpression	'-'		5037596	0					
ANR	5037894	IdentifierDeclStatement	char * tstr_new ;	403:4:10980:10994	5037596	3	True				
ANR	5037895	IdentifierDecl	* tstr_new		5037596	0					
ANR	5037896	IdentifierDeclType	char *		5037596	0					
ANR	5037897	Identifier	tstr_new		5037596	1					
ANR	5037898	IdentifierDeclStatement	ut64 repl_num = oplen + addr ;	404:4:11000:11028	5037596	4	True				
ANR	5037899	IdentifierDecl	repl_num = oplen + addr		5037596	0					
ANR	5037900	IdentifierDeclType	ut64		5037596	0					
ANR	5037901	Identifier	repl_num		5037596	1					
ANR	5037902	AssignmentExpression	repl_num = oplen + addr		5037596	2		=			
ANR	5037903	Identifier	repl_num		5037596	0					
ANR	5037904	AdditiveExpression	oplen + addr		5037596	1		+			
ANR	5037905	Identifier	oplen		5037596	0					
ANR	5037906	Identifier	addr		5037596	1					
ANR	5037907	IfStatement	if ( ! ripend )		5037596	5					
ANR	5037908	Condition	! ripend	406:8:11039:11045	5037596	0	True				
ANR	5037909	UnaryOperationExpression	! ripend		5037596	0					
ANR	5037910	UnaryOperator	!		5037596	0					
ANR	5037911	Identifier	ripend		5037596	1					
ANR	5037912	CompoundStatement		46:17:1042:1042	5037596	1					
ANR	5037913	ExpressionStatement	"ripend = ""]"""	407:5:11055:11067	5037596	0	True				
ANR	5037914	AssignmentExpression	"ripend = ""]"""		5037596	0		=			
ANR	5037915	Identifier	ripend		5037596	0					
ANR	5037916	PrimaryExpression	"""]"""		5037596	1					
ANR	5037917	IfStatement	if ( plus )		5037596	6					
ANR	5037918	Condition	plus	409:8:11083:11086	5037596	0	True				
ANR	5037919	Identifier	plus		5037596	0					
ANR	5037920	CompoundStatement		49:14:1083:1083	5037596	1					
ANR	5037921	ExpressionStatement	"repl_num += r_num_get ( NULL , plus + 1 )"	410:5:11096:11134	5037596	0	True				
ANR	5037922	AssignmentExpression	"repl_num += r_num_get ( NULL , plus + 1 )"		5037596	0		+=			
ANR	5037923	Identifier	repl_num		5037596	0					
ANR	5037924	CallExpression	"r_num_get ( NULL , plus + 1 )"		5037596	1					
ANR	5037925	Callee	r_num_get		5037596	0					
ANR	5037926	Identifier	r_num_get		5037596	0					
ANR	5037927	ArgumentList	NULL		5037596	1					
ANR	5037928	Argument	NULL		5037596	0					
ANR	5037929	Identifier	NULL		5037596	0					
ANR	5037930	Argument	plus + 1		5037596	1					
ANR	5037931	AdditiveExpression	plus + 1		5037596	0		+			
ANR	5037932	Identifier	plus		5037596	0					
ANR	5037933	PrimaryExpression	1		5037596	1					
ANR	5037934	IfStatement	if ( neg )		5037596	7					
ANR	5037935	Condition	neg	412:8:11150:11152	5037596	0	True				
ANR	5037936	Identifier	neg		5037596	0					
ANR	5037937	CompoundStatement		52:13:1149:1149	5037596	1					
ANR	5037938	ExpressionStatement	"repl_num -= r_num_get ( NULL , neg + 1 )"	413:5:11162:11199	5037596	0	True				
ANR	5037939	AssignmentExpression	"repl_num -= r_num_get ( NULL , neg + 1 )"		5037596	0		-=			
ANR	5037940	Identifier	repl_num		5037596	0					
ANR	5037941	CallExpression	"r_num_get ( NULL , neg + 1 )"		5037596	1					
ANR	5037942	Callee	r_num_get		5037596	0					
ANR	5037943	Identifier	r_num_get		5037596	0					
ANR	5037944	ArgumentList	NULL		5037596	1					
ANR	5037945	Argument	NULL		5037596	0					
ANR	5037946	Identifier	NULL		5037596	0					
ANR	5037947	Argument	neg + 1		5037596	1					
ANR	5037948	AdditiveExpression	neg + 1		5037596	0		+			
ANR	5037949	Identifier	neg		5037596	0					
ANR	5037950	PrimaryExpression	1		5037596	1					
ANR	5037951	ExpressionStatement	rip [ 1 ] = '\\0'	416:4:11212:11225	5037596	8	True				
ANR	5037952	AssignmentExpression	rip [ 1 ] = '\\0'		5037596	0		=			
ANR	5037953	ArrayIndexing	rip [ 1 ]		5037596	0					
ANR	5037954	Identifier	rip		5037596	0					
ANR	5037955	PrimaryExpression	1		5037596	1					
ANR	5037956	PrimaryExpression	'\\0'		5037596	1					
ANR	5037957	Statement	tstr_new	417:4:11231:11238	5037596	9	True				
ANR	5037958	Statement	=	417:13:11240:11240	5037596	10	True				
ANR	5037959	Statement	r_str_newf	417:15:11242:11251	5037596	11	True				
ANR	5037960	Statement	(	417:26:11253:11253	5037596	12	True				
ANR	5037961	Statement	"""%s0x%08"""	417:27:11254:11262	5037596	13	True				
ANR	5037962	Statement	PFMT64x	417:36:11263:11269	5037596	14	True				
ANR	5037963	Statement	"""%s"""	417:43:11270:11273	5037596	15	True				
ANR	5037964	Statement	","	417:47:11274:11274	5037596	16	True				
ANR	5037965	Statement	tstr	417:49:11276:11279	5037596	17	True				
ANR	5037966	Statement	","	417:53:11280:11280	5037596	18	True				
ANR	5037967	Statement	repl_num	417:55:11282:11289	5037596	19	True				
ANR	5037968	Statement	","	417:63:11290:11290	5037596	20	True				
ANR	5037969	Statement	ripend	417:65:11292:11297	5037596	21	True				
ANR	5037970	Statement	)	417:71:11298:11298	5037596	22	True				
ANR	5037971	ExpressionStatement		417:72:11299:11299	5037596	23	True				
ANR	5037972	ExpressionStatement	free ( tstr )	418:4:11305:11316	5037596	24	True				
ANR	5037973	CallExpression	free ( tstr )		5037596	0					
ANR	5037974	Callee	free		5037596	0					
ANR	5037975	Identifier	free		5037596	0					
ANR	5037976	ArgumentList	tstr		5037596	1					
ANR	5037977	Argument	tstr		5037596	0					
ANR	5037978	Identifier	tstr		5037596	0					
ANR	5037979	ExpressionStatement	tstr = tstr_new	419:4:11322:11337	5037596	25	True				
ANR	5037980	AssignmentExpression	tstr = tstr_new		5037596	0		=			
ANR	5037981	Identifier	tstr		5037596	0					
ANR	5037982	Identifier	tstr_new		5037596	1					
ANR	5037983	IfStatement	if ( ! p -> varlist )		5037596	9					
ANR	5037984	Condition	! p -> varlist	424:5:11357:11367	5037596	0	True				
ANR	5037985	UnaryOperationExpression	! p -> varlist		5037596	0					
ANR	5037986	UnaryOperator	!		5037596	0					
ANR	5037987	PtrMemberAccess	p -> varlist		5037596	1					
ANR	5037988	Identifier	p		5037596	0					
ANR	5037989	Identifier	varlist		5037596	1					
ANR	5037990	CompoundStatement		64:18:1364:1364	5037596	1					
ANR	5037991	ExpressionStatement	free ( tstr )	425:16:11388:11399	5037596	0	True				
ANR	5037992	CallExpression	free ( tstr )		5037596	0					
ANR	5037993	Callee	free		5037596	0					
ANR	5037994	Identifier	free		5037596	0					
ANR	5037995	ArgumentList	tstr		5037596	1					
ANR	5037996	Argument	tstr		5037596	0					
ANR	5037997	Identifier	tstr		5037596	0					
ANR	5037998	ReturnStatement	return false ;	426:2:11403:11415	5037596	1	True				
ANR	5037999	Identifier	false		5037596	0					
ANR	5038000	ExpressionStatement	"bpargs = p -> varlist ( anal , f , 'b' )"	428:1:11428:11462	5037596	10	True				
ANR	5038001	AssignmentExpression	"bpargs = p -> varlist ( anal , f , 'b' )"		5037596	0		=			
ANR	5038002	Identifier	bpargs		5037596	0					
ANR	5038003	CallExpression	"p -> varlist ( anal , f , 'b' )"		5037596	1					
ANR	5038004	Callee	p -> varlist		5037596	0					
ANR	5038005	PtrMemberAccess	p -> varlist		5037596	0					
ANR	5038006	Identifier	p		5037596	0					
ANR	5038007	Identifier	varlist		5037596	1					
ANR	5038008	ArgumentList	anal		5037596	1					
ANR	5038009	Argument	anal		5037596	0					
ANR	5038010	Identifier	anal		5037596	0					
ANR	5038011	Argument	f		5037596	1					
ANR	5038012	Identifier	f		5037596	0					
ANR	5038013	Argument	'b'		5037596	2					
ANR	5038014	PrimaryExpression	'b'		5037596	0					
ANR	5038015	ExpressionStatement	"spargs = p -> varlist ( anal , f , 's' )"	429:1:11465:11499	5037596	11	True				
ANR	5038016	AssignmentExpression	"spargs = p -> varlist ( anal , f , 's' )"		5037596	0		=			
ANR	5038017	Identifier	spargs		5037596	0					
ANR	5038018	CallExpression	"p -> varlist ( anal , f , 's' )"		5037596	1					
ANR	5038019	Callee	p -> varlist		5037596	0					
ANR	5038020	PtrMemberAccess	p -> varlist		5037596	0					
ANR	5038021	Identifier	p		5037596	0					
ANR	5038022	Identifier	varlist		5037596	1					
ANR	5038023	ArgumentList	anal		5037596	1					
ANR	5038024	Argument	anal		5037596	0					
ANR	5038025	Identifier	anal		5037596	0					
ANR	5038026	Argument	f		5037596	1					
ANR	5038027	Identifier	f		5037596	0					
ANR	5038028	Argument	's'		5037596	2					
ANR	5038029	PrimaryExpression	's'		5037596	0					
ANR	5038030	IdentifierDeclStatement	bool ucase = * tstr >= 'A' && * tstr <= 'Z' ;	431:1:11554:11595	5037596	12	True				
ANR	5038031	IdentifierDecl	ucase = * tstr >= 'A' && * tstr <= 'Z'		5037596	0					
ANR	5038032	IdentifierDeclType	bool		5037596	0					
ANR	5038033	Identifier	ucase		5037596	1					
ANR	5038034	AssignmentExpression	ucase = * tstr >= 'A' && * tstr <= 'Z'		5037596	2		=			
ANR	5038035	Identifier	ucase		5037596	0					
ANR	5038036	AndExpression	* tstr >= 'A' && * tstr <= 'Z'		5037596	1		&&			
ANR	5038037	RelationalExpression	* tstr >= 'A'		5037596	0		>=			
ANR	5038038	UnaryOperationExpression	* tstr		5037596	0					
ANR	5038039	UnaryOperator	*		5037596	0					
ANR	5038040	Identifier	tstr		5037596	1					
ANR	5038041	PrimaryExpression	'A'		5037596	1					
ANR	5038042	RelationalExpression	* tstr <= 'Z'		5037596	1		<=			
ANR	5038043	UnaryOperationExpression	* tstr		5037596	0					
ANR	5038044	UnaryOperator	*		5037596	0					
ANR	5038045	Identifier	tstr		5037596	1					
ANR	5038046	PrimaryExpression	'Z'		5037596	1					
ANR	5038047	IfStatement	if ( ucase && tstr [ 1 ] )		5037596	13					
ANR	5038048	Condition	ucase && tstr [ 1 ]	432:5:11602:11617	5037596	0	True				
ANR	5038049	AndExpression	ucase && tstr [ 1 ]		5037596	0		&&			
ANR	5038050	Identifier	ucase		5037596	0					
ANR	5038051	ArrayIndexing	tstr [ 1 ]		5037596	1					
ANR	5038052	Identifier	tstr		5037596	0					
ANR	5038053	PrimaryExpression	1		5037596	1					
ANR	5038054	CompoundStatement		72:23:1614:1614	5037596	1					
ANR	5038055	ExpressionStatement	ucase = tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'	433:2:11624:11664	5037596	0	True				
ANR	5038056	AssignmentExpression	ucase = tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'		5037596	0		=			
ANR	5038057	Identifier	ucase		5037596	0					
ANR	5038058	AndExpression	tstr [ 1 ] >= 'A' && tstr [ 1 ] <= 'Z'		5037596	1		&&			
ANR	5038059	RelationalExpression	tstr [ 1 ] >= 'A'		5037596	0		>=			
ANR	5038060	ArrayIndexing	tstr [ 1 ]		5037596	0					
ANR	5038061	Identifier	tstr		5037596	0					
ANR	5038062	PrimaryExpression	1		5037596	1					
ANR	5038063	PrimaryExpression	'A'		5037596	1					
ANR	5038064	RelationalExpression	tstr [ 1 ] <= 'Z'		5037596	1		<=			
ANR	5038065	ArrayIndexing	tstr [ 1 ]		5037596	0					
ANR	5038066	Identifier	tstr		5037596	0					
ANR	5038067	PrimaryExpression	1		5037596	1					
ANR	5038068	PrimaryExpression	'Z'		5037596	1					
ANR	5038069	IdentifierDeclStatement	char * ireg = NULL ;	435:1:11670:11687	5037596	14	True				
ANR	5038070	IdentifierDecl	* ireg = NULL		5037596	0					
ANR	5038071	IdentifierDeclType	char *		5037596	0					
ANR	5038072	Identifier	ireg		5037596	1					
ANR	5038073	AssignmentExpression	* ireg = NULL		5037596	2		=			
ANR	5038074	Identifier	NULL		5037596	0					
ANR	5038075	Identifier	NULL		5037596	1					
ANR	5038076	IfStatement	if ( p -> get_op_ireg )		5037596	15					
ANR	5038077	Condition	p -> get_op_ireg	436:5:11694:11707	5037596	0	True				
ANR	5038078	PtrMemberAccess	p -> get_op_ireg		5037596	0					
ANR	5038079	Identifier	p		5037596	0					
ANR	5038080	Identifier	get_op_ireg		5037596	1					
ANR	5038081	CompoundStatement		76:21:1704:1704	5037596	1					
ANR	5038082	ExpressionStatement	"ireg = p -> get_op_ireg ( p -> user , addr )"	437:2:11714:11750	5037596	0	True				
ANR	5038083	AssignmentExpression	"ireg = p -> get_op_ireg ( p -> user , addr )"		5037596	0		=			
ANR	5038084	Identifier	ireg		5037596	0					
ANR	5038085	CallExpression	"p -> get_op_ireg ( p -> user , addr )"		5037596	1					
ANR	5038086	Callee	p -> get_op_ireg		5037596	0					
ANR	5038087	PtrMemberAccess	p -> get_op_ireg		5037596	0					
ANR	5038088	Identifier	p		5037596	0					
ANR	5038089	Identifier	get_op_ireg		5037596	1					
ANR	5038090	ArgumentList	p -> user		5037596	1					
ANR	5038091	Argument	p -> user		5037596	0					
ANR	5038092	PtrMemberAccess	p -> user		5037596	0					
ANR	5038093	Identifier	p		5037596	0					
ANR	5038094	Identifier	user		5037596	1					
ANR	5038095	Argument	addr		5037596	1					
ANR	5038096	Identifier	addr		5037596	0					
ANR	5038097	Statement	r_list_foreach	439:1:11756:11769	5037596	16	True				
ANR	5038098	Statement	(	439:16:11771:11771	5037596	17	True				
ANR	5038099	Statement	spargs	439:17:11772:11777	5037596	18	True				
ANR	5038100	Statement	","	439:23:11778:11778	5037596	19	True				
ANR	5038101	Statement	spiter	439:25:11780:11785	5037596	20	True				
ANR	5038102	Statement	","	439:31:11786:11786	5037596	21	True				
ANR	5038103	Statement	sparg	439:33:11788:11792	5037596	22	True				
ANR	5038104	Statement	)	439:38:11793:11793	5037596	23	True				
ANR	5038105	CompoundStatement		97:2:2274:2306	5037596	24					
ANR	5038106	ExpressionStatement	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_SP ] , sparg -> delta , true , att , ireg , oldstr , sizeof ( oldstr ) )"	441:2:11836:11935	5037596	0	True				
ANR	5038107	CallExpression	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_SP ] , sparg -> delta , true , att , ireg , oldstr , sizeof ( oldstr ) )"		5037596	0					
ANR	5038108	Callee	mk_reg_str		5037596	0					
ANR	5038109	Identifier	mk_reg_str		5037596	0					
ANR	5038110	ArgumentList	anal -> reg -> name [ R_REG_NAME_SP ]		5037596	1					
ANR	5038111	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5037596	0					
ANR	5038112	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5037596	0					
ANR	5038113	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038114	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038115	Identifier	anal		5037596	0					
ANR	5038116	Identifier	reg		5037596	1					
ANR	5038117	Identifier	name		5037596	1					
ANR	5038118	Identifier	R_REG_NAME_SP		5037596	1					
ANR	5038119	Argument	sparg -> delta		5037596	1					
ANR	5038120	PtrMemberAccess	sparg -> delta		5037596	0					
ANR	5038121	Identifier	sparg		5037596	0					
ANR	5038122	Identifier	delta		5037596	1					
ANR	5038123	Argument	true		5037596	2					
ANR	5038124	Identifier	true		5037596	0					
ANR	5038125	Argument	att		5037596	3					
ANR	5038126	Identifier	att		5037596	0					
ANR	5038127	Argument	ireg		5037596	4					
ANR	5038128	Identifier	ireg		5037596	0					
ANR	5038129	Argument	oldstr		5037596	5					
ANR	5038130	Identifier	oldstr		5037596	0					
ANR	5038131	Argument	sizeof ( oldstr )		5037596	6					
ANR	5038132	SizeofExpression	sizeof ( oldstr )		5037596	0					
ANR	5038133	Sizeof	sizeof		5037596	0					
ANR	5038134	SizeofOperand	oldstr		5037596	1					
ANR	5038135	IfStatement	if ( ucase )		5037596	1					
ANR	5038136	Condition	ucase	443:6:11944:11948	5037596	0	True				
ANR	5038137	Identifier	ucase		5037596	0					
ANR	5038138	CompoundStatement		83:13:1945:1945	5037596	1					
ANR	5038139	ExpressionStatement	"r_str_case ( oldstr , true )"	444:3:11956:11981	5037596	0	True				
ANR	5038140	CallExpression	"r_str_case ( oldstr , true )"		5037596	0					
ANR	5038141	Callee	r_str_case		5037596	0					
ANR	5038142	Identifier	r_str_case		5037596	0					
ANR	5038143	ArgumentList	oldstr		5037596	1					
ANR	5038144	Argument	oldstr		5037596	0					
ANR	5038145	Identifier	oldstr		5037596	0					
ANR	5038146	Argument	true		5037596	1					
ANR	5038147	Identifier	true		5037596	0					
ANR	5038148	ExpressionStatement	"parse_localvar ( p , newstr , sizeof ( newstr ) , sparg -> name , anal -> reg -> name [ R_REG_NAME_SP ] , '+' , ireg , att )"	446:2:11989:12093	5037596	2	True				
ANR	5038149	CallExpression	"parse_localvar ( p , newstr , sizeof ( newstr ) , sparg -> name , anal -> reg -> name [ R_REG_NAME_SP ] , '+' , ireg , att )"		5037596	0					
ANR	5038150	Callee	parse_localvar		5037596	0					
ANR	5038151	Identifier	parse_localvar		5037596	0					
ANR	5038152	ArgumentList	p		5037596	1					
ANR	5038153	Argument	p		5037596	0					
ANR	5038154	Identifier	p		5037596	0					
ANR	5038155	Argument	newstr		5037596	1					
ANR	5038156	Identifier	newstr		5037596	0					
ANR	5038157	Argument	sizeof ( newstr )		5037596	2					
ANR	5038158	SizeofExpression	sizeof ( newstr )		5037596	0					
ANR	5038159	Sizeof	sizeof		5037596	0					
ANR	5038160	SizeofOperand	newstr		5037596	1					
ANR	5038161	Argument	sparg -> name		5037596	3					
ANR	5038162	PtrMemberAccess	sparg -> name		5037596	0					
ANR	5038163	Identifier	sparg		5037596	0					
ANR	5038164	Identifier	name		5037596	1					
ANR	5038165	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5037596	4					
ANR	5038166	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5037596	0					
ANR	5038167	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038168	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038169	Identifier	anal		5037596	0					
ANR	5038170	Identifier	reg		5037596	1					
ANR	5038171	Identifier	name		5037596	1					
ANR	5038172	Identifier	R_REG_NAME_SP		5037596	1					
ANR	5038173	Argument	'+'		5037596	5					
ANR	5038174	PrimaryExpression	'+'		5037596	0					
ANR	5038175	Argument	ireg		5037596	6					
ANR	5038176	Identifier	ireg		5037596	0					
ANR	5038177	Argument	att		5037596	7					
ANR	5038178	Identifier	att		5037596	0					
ANR	5038179	IfStatement	if ( ucase )		5037596	3					
ANR	5038180	Condition	ucase	447:6:12101:12105	5037596	0	True				
ANR	5038181	Identifier	ucase		5037596	0					
ANR	5038182	CompoundStatement		88:3:2107:2140	5037596	1					
ANR	5038183	IdentifierDeclStatement	"char * plus = strchr ( newstr , '+' ) ;"	448:3:12113:12146	5037596	0	True				
ANR	5038184	IdentifierDecl	"* plus = strchr ( newstr , '+' )"		5037596	0					
ANR	5038185	IdentifierDeclType	char *		5037596	0					
ANR	5038186	Identifier	plus		5037596	1					
ANR	5038187	AssignmentExpression	"* plus = strchr ( newstr , '+' )"		5037596	2		=			
ANR	5038188	Identifier	plus		5037596	0					
ANR	5038189	CallExpression	"strchr ( newstr , '+' )"		5037596	1					
ANR	5038190	Callee	strchr		5037596	0					
ANR	5038191	Identifier	strchr		5037596	0					
ANR	5038192	ArgumentList	newstr		5037596	1					
ANR	5038193	Argument	newstr		5037596	0					
ANR	5038194	Identifier	newstr		5037596	0					
ANR	5038195	Argument	'+'		5037596	1					
ANR	5038196	PrimaryExpression	'+'		5037596	0					
ANR	5038197	IfStatement	if ( plus )		5037596	1					
ANR	5038198	Condition	plus	449:7:12155:12158	5037596	0	True				
ANR	5038199	Identifier	plus		5037596	0					
ANR	5038200	CompoundStatement		89:13:2155:2155	5037596	1					
ANR	5038201	ExpressionStatement	* plus = 0	450:4:12167:12176	5037596	0	True				
ANR	5038202	AssignmentExpression	* plus = 0		5037596	0		=			
ANR	5038203	UnaryOperationExpression	* plus		5037596	0					
ANR	5038204	UnaryOperator	*		5037596	0					
ANR	5038205	Identifier	plus		5037596	1					
ANR	5038206	PrimaryExpression	0		5037596	1					
ANR	5038207	ExpressionStatement	"r_str_case ( newstr , true )"	451:4:12182:12207	5037596	1	True				
ANR	5038208	CallExpression	"r_str_case ( newstr , true )"		5037596	0					
ANR	5038209	Callee	r_str_case		5037596	0					
ANR	5038210	Identifier	r_str_case		5037596	0					
ANR	5038211	ArgumentList	newstr		5037596	1					
ANR	5038212	Argument	newstr		5037596	0					
ANR	5038213	Identifier	newstr		5037596	0					
ANR	5038214	Argument	true		5037596	1					
ANR	5038215	Identifier	true		5037596	0					
ANR	5038216	ExpressionStatement	* plus = '+'	452:4:12213:12224	5037596	2	True				
ANR	5038217	AssignmentExpression	* plus = '+'		5037596	0		=			
ANR	5038218	UnaryOperationExpression	* plus		5037596	0					
ANR	5038219	UnaryOperator	*		5037596	0					
ANR	5038220	Identifier	plus		5037596	1					
ANR	5038221	PrimaryExpression	'+'		5037596	1					
ANR	5038222	ElseStatement	else		5037596	0					
ANR	5038223	CompoundStatement		93:10:2230:2230	5037596	0					
ANR	5038224	ExpressionStatement	"r_str_case ( newstr , true )"	454:4:12242:12267	5037596	0	True				
ANR	5038225	CallExpression	"r_str_case ( newstr , true )"		5037596	0					
ANR	5038226	Callee	r_str_case		5037596	0					
ANR	5038227	Identifier	r_str_case		5037596	0					
ANR	5038228	ArgumentList	newstr		5037596	1					
ANR	5038229	Argument	newstr		5037596	0					
ANR	5038230	Identifier	newstr		5037596	0					
ANR	5038231	Argument	true		5037596	1					
ANR	5038232	Identifier	true		5037596	0					
ANR	5038233	IdentifierDeclStatement	"char * ptr = strstr ( tstr , oldstr ) ;"	457:2:12280:12312	5037596	4	True				
ANR	5038234	IdentifierDecl	"* ptr = strstr ( tstr , oldstr )"		5037596	0					
ANR	5038235	IdentifierDeclType	char *		5037596	0					
ANR	5038236	Identifier	ptr		5037596	1					
ANR	5038237	AssignmentExpression	"* ptr = strstr ( tstr , oldstr )"		5037596	2		=			
ANR	5038238	Identifier	ptr		5037596	0					
ANR	5038239	CallExpression	"strstr ( tstr , oldstr )"		5037596	1					
ANR	5038240	Callee	strstr		5037596	0					
ANR	5038241	Identifier	strstr		5037596	0					
ANR	5038242	ArgumentList	tstr		5037596	1					
ANR	5038243	Argument	tstr		5037596	0					
ANR	5038244	Identifier	tstr		5037596	0					
ANR	5038245	Argument	oldstr		5037596	1					
ANR	5038246	Identifier	oldstr		5037596	0					
ANR	5038247	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5037596	5					
ANR	5038248	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	458:6:12320:12353	5037596	0	True				
ANR	5038249	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5037596	0		&&			
ANR	5038250	Identifier	ptr		5037596	0					
ANR	5038251	OrExpression	! att || * ( ptr - 1 ) == ' '		5037596	1		||			
ANR	5038252	UnaryOperationExpression	! att		5037596	0					
ANR	5038253	UnaryOperator	!		5037596	0					
ANR	5038254	Identifier	att		5037596	1					
ANR	5038255	EqualityExpression	* ( ptr - 1 ) == ' '		5037596	1		==			
ANR	5038256	UnaryOperationExpression	* ( ptr - 1 )		5037596	0					
ANR	5038257	UnaryOperator	*		5037596	0					
ANR	5038258	AdditiveExpression	ptr - 1		5037596	1		-			
ANR	5038259	Identifier	ptr		5037596	0					
ANR	5038260	PrimaryExpression	1		5037596	1					
ANR	5038261	PrimaryExpression	' '		5037596	1					
ANR	5038262	CompoundStatement		98:42:2350:2350	5037596	1					
ANR	5038263	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	459:3:12361:12407	5037596	0	True				
ANR	5038264	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	0		=			
ANR	5038265	Identifier	tstr		5037596	0					
ANR	5038266	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	1					
ANR	5038267	Callee	r_str_replace		5037596	0					
ANR	5038268	Identifier	r_str_replace		5037596	0					
ANR	5038269	ArgumentList	tstr		5037596	1					
ANR	5038270	Argument	tstr		5037596	0					
ANR	5038271	Identifier	tstr		5037596	0					
ANR	5038272	Argument	oldstr		5037596	1					
ANR	5038273	Identifier	oldstr		5037596	0					
ANR	5038274	Argument	newstr		5037596	2					
ANR	5038275	Identifier	newstr		5037596	0					
ANR	5038276	Argument	1		5037596	3					
ANR	5038277	PrimaryExpression	1		5037596	0					
ANR	5038278	BreakStatement	break ;	460:3:12412:12417	5037596	1	True				
ANR	5038279	ElseStatement	else		5037596	0					
ANR	5038280	CompoundStatement		101:9:2422:2422	5037596	0					
ANR	5038281	ExpressionStatement	"r_str_case ( oldstr , false )"	462:3:12433:12459	5037596	0	True				
ANR	5038282	CallExpression	"r_str_case ( oldstr , false )"		5037596	0					
ANR	5038283	Callee	r_str_case		5037596	0					
ANR	5038284	Identifier	r_str_case		5037596	0					
ANR	5038285	ArgumentList	oldstr		5037596	1					
ANR	5038286	Argument	oldstr		5037596	0					
ANR	5038287	Identifier	oldstr		5037596	0					
ANR	5038288	Argument	false		5037596	1					
ANR	5038289	Identifier	false		5037596	0					
ANR	5038290	ExpressionStatement	"ptr = strstr ( tstr , oldstr )"	463:3:12464:12490	5037596	1	True				
ANR	5038291	AssignmentExpression	"ptr = strstr ( tstr , oldstr )"		5037596	0		=			
ANR	5038292	Identifier	ptr		5037596	0					
ANR	5038293	CallExpression	"strstr ( tstr , oldstr )"		5037596	1					
ANR	5038294	Callee	strstr		5037596	0					
ANR	5038295	Identifier	strstr		5037596	0					
ANR	5038296	ArgumentList	tstr		5037596	1					
ANR	5038297	Argument	tstr		5037596	0					
ANR	5038298	Identifier	tstr		5037596	0					
ANR	5038299	Argument	oldstr		5037596	1					
ANR	5038300	Identifier	oldstr		5037596	0					
ANR	5038301	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5037596	2					
ANR	5038302	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	464:7:12499:12532	5037596	0	True				
ANR	5038303	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5037596	0		&&			
ANR	5038304	Identifier	ptr		5037596	0					
ANR	5038305	OrExpression	! att || * ( ptr - 1 ) == ' '		5037596	1		||			
ANR	5038306	UnaryOperationExpression	! att		5037596	0					
ANR	5038307	UnaryOperator	!		5037596	0					
ANR	5038308	Identifier	att		5037596	1					
ANR	5038309	EqualityExpression	* ( ptr - 1 ) == ' '		5037596	1		==			
ANR	5038310	UnaryOperationExpression	* ( ptr - 1 )		5037596	0					
ANR	5038311	UnaryOperator	*		5037596	0					
ANR	5038312	AdditiveExpression	ptr - 1		5037596	1		-			
ANR	5038313	Identifier	ptr		5037596	0					
ANR	5038314	PrimaryExpression	1		5037596	1					
ANR	5038315	PrimaryExpression	' '		5037596	1					
ANR	5038316	CompoundStatement		104:43:2529:2529	5037596	1					
ANR	5038317	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	465:4:12541:12587	5037596	0	True				
ANR	5038318	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	0		=			
ANR	5038319	Identifier	tstr		5037596	0					
ANR	5038320	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	1					
ANR	5038321	Callee	r_str_replace		5037596	0					
ANR	5038322	Identifier	r_str_replace		5037596	0					
ANR	5038323	ArgumentList	tstr		5037596	1					
ANR	5038324	Argument	tstr		5037596	0					
ANR	5038325	Identifier	tstr		5037596	0					
ANR	5038326	Argument	oldstr		5037596	1					
ANR	5038327	Identifier	oldstr		5037596	0					
ANR	5038328	Argument	newstr		5037596	2					
ANR	5038329	Identifier	newstr		5037596	0					
ANR	5038330	Argument	1		5037596	3					
ANR	5038331	PrimaryExpression	1		5037596	0					
ANR	5038332	BreakStatement	break ;	466:4:12593:12598	5037596	1	True				
ANR	5038333	Statement	r_list_foreach	471:1:12656:12669	5037596	25	True				
ANR	5038334	Statement	(	471:16:12671:12671	5037596	26	True				
ANR	5038335	Statement	bpargs	471:17:12672:12677	5037596	27	True				
ANR	5038336	Statement	","	471:23:12678:12678	5037596	28	True				
ANR	5038337	Statement	bpargiter	471:25:12680:12688	5037596	29	True				
ANR	5038338	Statement	","	471:34:12689:12689	5037596	30	True				
ANR	5038339	Statement	bparg	471:36:12691:12695	5037596	31	True				
ANR	5038340	Statement	)	471:41:12696:12696	5037596	32	True				
ANR	5038341	CompoundStatement		132:2:3244:3277	5037596	33					
ANR	5038342	IdentifierDeclStatement	char sign = '+' ;	472:2:12702:12717	5037596	0	True				
ANR	5038343	IdentifierDecl	sign = '+'		5037596	0					
ANR	5038344	IdentifierDeclType	char		5037596	0					
ANR	5038345	Identifier	sign		5037596	1					
ANR	5038346	AssignmentExpression	sign = '+'		5037596	2		=			
ANR	5038347	Identifier	sign		5037596	0					
ANR	5038348	PrimaryExpression	'+'		5037596	1					
ANR	5038349	IfStatement	if ( bparg -> delta < 0 )		5037596	1					
ANR	5038350	Condition	bparg -> delta < 0	473:6:12725:12740	5037596	0	True				
ANR	5038351	RelationalExpression	bparg -> delta < 0		5037596	0		<			
ANR	5038352	PtrMemberAccess	bparg -> delta		5037596	0					
ANR	5038353	Identifier	bparg		5037596	0					
ANR	5038354	Identifier	delta		5037596	1					
ANR	5038355	PrimaryExpression	0		5037596	1					
ANR	5038356	CompoundStatement		113:24:2737:2737	5037596	1					
ANR	5038357	ExpressionStatement	sign = '-'	474:3:12748:12758	5037596	0	True				
ANR	5038358	AssignmentExpression	sign = '-'		5037596	0		=			
ANR	5038359	Identifier	sign		5037596	0					
ANR	5038360	PrimaryExpression	'-'		5037596	1					
ANR	5038361	ExpressionStatement	bparg -> delta = - bparg -> delta	475:3:12763:12791	5037596	1	True				
ANR	5038362	AssignmentExpression	bparg -> delta = - bparg -> delta		5037596	0		=			
ANR	5038363	PtrMemberAccess	bparg -> delta		5037596	0					
ANR	5038364	Identifier	bparg		5037596	0					
ANR	5038365	Identifier	delta		5037596	1					
ANR	5038366	UnaryOperationExpression	- bparg -> delta		5037596	1					
ANR	5038367	UnaryOperator	-		5037596	0					
ANR	5038368	PtrMemberAccess	bparg -> delta		5037596	1					
ANR	5038369	Identifier	bparg		5037596	0					
ANR	5038370	Identifier	delta		5037596	1					
ANR	5038371	ExpressionStatement	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_BP ] , bparg -> delta , sign == '+' , att , ireg , oldstr , sizeof ( oldstr ) )"	477:2:12799:12903	5037596	2	True				
ANR	5038372	CallExpression	"mk_reg_str ( anal -> reg -> name [ R_REG_NAME_BP ] , bparg -> delta , sign == '+' , att , ireg , oldstr , sizeof ( oldstr ) )"		5037596	0					
ANR	5038373	Callee	mk_reg_str		5037596	0					
ANR	5038374	Identifier	mk_reg_str		5037596	0					
ANR	5038375	ArgumentList	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	1					
ANR	5038376	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038377	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038378	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038379	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038380	Identifier	anal		5037596	0					
ANR	5038381	Identifier	reg		5037596	1					
ANR	5038382	Identifier	name		5037596	1					
ANR	5038383	Identifier	R_REG_NAME_BP		5037596	1					
ANR	5038384	Argument	bparg -> delta		5037596	1					
ANR	5038385	PtrMemberAccess	bparg -> delta		5037596	0					
ANR	5038386	Identifier	bparg		5037596	0					
ANR	5038387	Identifier	delta		5037596	1					
ANR	5038388	Argument	sign == '+'		5037596	2					
ANR	5038389	EqualityExpression	sign == '+'		5037596	0		==			
ANR	5038390	Identifier	sign		5037596	0					
ANR	5038391	PrimaryExpression	'+'		5037596	1					
ANR	5038392	Argument	att		5037596	3					
ANR	5038393	Identifier	att		5037596	0					
ANR	5038394	Argument	ireg		5037596	4					
ANR	5038395	Identifier	ireg		5037596	0					
ANR	5038396	Argument	oldstr		5037596	5					
ANR	5038397	Identifier	oldstr		5037596	0					
ANR	5038398	Argument	sizeof ( oldstr )		5037596	6					
ANR	5038399	SizeofExpression	sizeof ( oldstr )		5037596	0					
ANR	5038400	Sizeof	sizeof		5037596	0					
ANR	5038401	SizeofOperand	oldstr		5037596	1					
ANR	5038402	IfStatement	if ( ucase )		5037596	3					
ANR	5038403	Condition	ucase	478:6:12911:12915	5037596	0	True				
ANR	5038404	Identifier	ucase		5037596	0					
ANR	5038405	CompoundStatement		118:13:2912:2912	5037596	1					
ANR	5038406	ExpressionStatement	"r_str_case ( oldstr , true )"	479:3:12923:12948	5037596	0	True				
ANR	5038407	CallExpression	"r_str_case ( oldstr , true )"		5037596	0					
ANR	5038408	Callee	r_str_case		5037596	0					
ANR	5038409	Identifier	r_str_case		5037596	0					
ANR	5038410	ArgumentList	oldstr		5037596	1					
ANR	5038411	Argument	oldstr		5037596	0					
ANR	5038412	Identifier	oldstr		5037596	0					
ANR	5038413	Argument	true		5037596	1					
ANR	5038414	Identifier	true		5037596	0					
ANR	5038415	ExpressionStatement	"parse_localvar ( p , newstr , sizeof ( newstr ) , bparg -> name , anal -> reg -> name [ R_REG_NAME_BP ] , sign , ireg , att )"	481:2:12956:13061	5037596	4	True				
ANR	5038416	CallExpression	"parse_localvar ( p , newstr , sizeof ( newstr ) , bparg -> name , anal -> reg -> name [ R_REG_NAME_BP ] , sign , ireg , att )"		5037596	0					
ANR	5038417	Callee	parse_localvar		5037596	0					
ANR	5038418	Identifier	parse_localvar		5037596	0					
ANR	5038419	ArgumentList	p		5037596	1					
ANR	5038420	Argument	p		5037596	0					
ANR	5038421	Identifier	p		5037596	0					
ANR	5038422	Argument	newstr		5037596	1					
ANR	5038423	Identifier	newstr		5037596	0					
ANR	5038424	Argument	sizeof ( newstr )		5037596	2					
ANR	5038425	SizeofExpression	sizeof ( newstr )		5037596	0					
ANR	5038426	Sizeof	sizeof		5037596	0					
ANR	5038427	SizeofOperand	newstr		5037596	1					
ANR	5038428	Argument	bparg -> name		5037596	3					
ANR	5038429	PtrMemberAccess	bparg -> name		5037596	0					
ANR	5038430	Identifier	bparg		5037596	0					
ANR	5038431	Identifier	name		5037596	1					
ANR	5038432	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	4					
ANR	5038433	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038434	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038435	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038436	Identifier	anal		5037596	0					
ANR	5038437	Identifier	reg		5037596	1					
ANR	5038438	Identifier	name		5037596	1					
ANR	5038439	Identifier	R_REG_NAME_BP		5037596	1					
ANR	5038440	Argument	sign		5037596	5					
ANR	5038441	Identifier	sign		5037596	0					
ANR	5038442	Argument	ireg		5037596	6					
ANR	5038443	Identifier	ireg		5037596	0					
ANR	5038444	Argument	att		5037596	7					
ANR	5038445	Identifier	att		5037596	0					
ANR	5038446	IfStatement	if ( ucase )		5037596	5					
ANR	5038447	Condition	ucase	482:6:13069:13073	5037596	0	True				
ANR	5038448	Identifier	ucase		5037596	0					
ANR	5038449	CompoundStatement		123:3:3075:3109	5037596	1					
ANR	5038450	IdentifierDeclStatement	"char * plus = strchr ( newstr , sign ) ;"	483:3:13081:13115	5037596	0	True				
ANR	5038451	IdentifierDecl	"* plus = strchr ( newstr , sign )"		5037596	0					
ANR	5038452	IdentifierDeclType	char *		5037596	0					
ANR	5038453	Identifier	plus		5037596	1					
ANR	5038454	AssignmentExpression	"* plus = strchr ( newstr , sign )"		5037596	2		=			
ANR	5038455	Identifier	plus		5037596	0					
ANR	5038456	CallExpression	"strchr ( newstr , sign )"		5037596	1					
ANR	5038457	Callee	strchr		5037596	0					
ANR	5038458	Identifier	strchr		5037596	0					
ANR	5038459	ArgumentList	newstr		5037596	1					
ANR	5038460	Argument	newstr		5037596	0					
ANR	5038461	Identifier	newstr		5037596	0					
ANR	5038462	Argument	sign		5037596	1					
ANR	5038463	Identifier	sign		5037596	0					
ANR	5038464	IfStatement	if ( plus )		5037596	1					
ANR	5038465	Condition	plus	484:7:13124:13127	5037596	0	True				
ANR	5038466	Identifier	plus		5037596	0					
ANR	5038467	CompoundStatement		124:13:3124:3124	5037596	1					
ANR	5038468	ExpressionStatement	* plus = 0	485:4:13136:13145	5037596	0	True				
ANR	5038469	AssignmentExpression	* plus = 0		5037596	0		=			
ANR	5038470	UnaryOperationExpression	* plus		5037596	0					
ANR	5038471	UnaryOperator	*		5037596	0					
ANR	5038472	Identifier	plus		5037596	1					
ANR	5038473	PrimaryExpression	0		5037596	1					
ANR	5038474	ExpressionStatement	"r_str_case ( newstr , true )"	486:4:13151:13176	5037596	1	True				
ANR	5038475	CallExpression	"r_str_case ( newstr , true )"		5037596	0					
ANR	5038476	Callee	r_str_case		5037596	0					
ANR	5038477	Identifier	r_str_case		5037596	0					
ANR	5038478	ArgumentList	newstr		5037596	1					
ANR	5038479	Argument	newstr		5037596	0					
ANR	5038480	Identifier	newstr		5037596	0					
ANR	5038481	Argument	true		5037596	1					
ANR	5038482	Identifier	true		5037596	0					
ANR	5038483	ExpressionStatement	* plus = sign	487:4:13182:13194	5037596	2	True				
ANR	5038484	AssignmentExpression	* plus = sign		5037596	0		=			
ANR	5038485	UnaryOperationExpression	* plus		5037596	0					
ANR	5038486	UnaryOperator	*		5037596	0					
ANR	5038487	Identifier	plus		5037596	1					
ANR	5038488	Identifier	sign		5037596	1					
ANR	5038489	ElseStatement	else		5037596	0					
ANR	5038490	CompoundStatement		128:10:3200:3200	5037596	0					
ANR	5038491	ExpressionStatement	"r_str_case ( newstr , true )"	489:4:13212:13237	5037596	0	True				
ANR	5038492	CallExpression	"r_str_case ( newstr , true )"		5037596	0					
ANR	5038493	Callee	r_str_case		5037596	0					
ANR	5038494	Identifier	r_str_case		5037596	0					
ANR	5038495	ArgumentList	newstr		5037596	1					
ANR	5038496	Argument	newstr		5037596	0					
ANR	5038497	Identifier	newstr		5037596	0					
ANR	5038498	Argument	true		5037596	1					
ANR	5038499	Identifier	true		5037596	0					
ANR	5038500	IdentifierDeclStatement	"char * ptr = strstr ( tstr , oldstr ) ;"	492:2:13250:13283	5037596	6	True				
ANR	5038501	IdentifierDecl	"* ptr = strstr ( tstr , oldstr )"		5037596	0					
ANR	5038502	IdentifierDeclType	char *		5037596	0					
ANR	5038503	Identifier	ptr		5037596	1					
ANR	5038504	AssignmentExpression	"* ptr = strstr ( tstr , oldstr )"		5037596	2		=			
ANR	5038505	Identifier	ptr		5037596	0					
ANR	5038506	CallExpression	"strstr ( tstr , oldstr )"		5037596	1					
ANR	5038507	Callee	strstr		5037596	0					
ANR	5038508	Identifier	strstr		5037596	0					
ANR	5038509	ArgumentList	tstr		5037596	1					
ANR	5038510	Argument	tstr		5037596	0					
ANR	5038511	Identifier	tstr		5037596	0					
ANR	5038512	Argument	oldstr		5037596	1					
ANR	5038513	Identifier	oldstr		5037596	0					
ANR	5038514	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5037596	7					
ANR	5038515	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	493:6:13291:13324	5037596	0	True				
ANR	5038516	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5037596	0		&&			
ANR	5038517	Identifier	ptr		5037596	0					
ANR	5038518	OrExpression	! att || * ( ptr - 1 ) == ' '		5037596	1		||			
ANR	5038519	UnaryOperationExpression	! att		5037596	0					
ANR	5038520	UnaryOperator	!		5037596	0					
ANR	5038521	Identifier	att		5037596	1					
ANR	5038522	EqualityExpression	* ( ptr - 1 ) == ' '		5037596	1		==			
ANR	5038523	UnaryOperationExpression	* ( ptr - 1 )		5037596	0					
ANR	5038524	UnaryOperator	*		5037596	0					
ANR	5038525	AdditiveExpression	ptr - 1		5037596	1		-			
ANR	5038526	Identifier	ptr		5037596	0					
ANR	5038527	PrimaryExpression	1		5037596	1					
ANR	5038528	PrimaryExpression	' '		5037596	1					
ANR	5038529	CompoundStatement		133:42:3321:3321	5037596	1					
ANR	5038530	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	494:3:13332:13378	5037596	0	True				
ANR	5038531	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	0		=			
ANR	5038532	Identifier	tstr		5037596	0					
ANR	5038533	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	1					
ANR	5038534	Callee	r_str_replace		5037596	0					
ANR	5038535	Identifier	r_str_replace		5037596	0					
ANR	5038536	ArgumentList	tstr		5037596	1					
ANR	5038537	Argument	tstr		5037596	0					
ANR	5038538	Identifier	tstr		5037596	0					
ANR	5038539	Argument	oldstr		5037596	1					
ANR	5038540	Identifier	oldstr		5037596	0					
ANR	5038541	Argument	newstr		5037596	2					
ANR	5038542	Identifier	newstr		5037596	0					
ANR	5038543	Argument	1		5037596	3					
ANR	5038544	PrimaryExpression	1		5037596	0					
ANR	5038545	BreakStatement	break ;	495:3:13383:13388	5037596	1	True				
ANR	5038546	ElseStatement	else		5037596	0					
ANR	5038547	CompoundStatement		136:9:3393:3393	5037596	0					
ANR	5038548	ExpressionStatement	"r_str_case ( oldstr , false )"	497:3:13404:13430	5037596	0	True				
ANR	5038549	CallExpression	"r_str_case ( oldstr , false )"		5037596	0					
ANR	5038550	Callee	r_str_case		5037596	0					
ANR	5038551	Identifier	r_str_case		5037596	0					
ANR	5038552	ArgumentList	oldstr		5037596	1					
ANR	5038553	Argument	oldstr		5037596	0					
ANR	5038554	Identifier	oldstr		5037596	0					
ANR	5038555	Argument	false		5037596	1					
ANR	5038556	Identifier	false		5037596	0					
ANR	5038557	ExpressionStatement	"ptr = strstr ( tstr , oldstr )"	498:3:13435:13461	5037596	1	True				
ANR	5038558	AssignmentExpression	"ptr = strstr ( tstr , oldstr )"		5037596	0		=			
ANR	5038559	Identifier	ptr		5037596	0					
ANR	5038560	CallExpression	"strstr ( tstr , oldstr )"		5037596	1					
ANR	5038561	Callee	strstr		5037596	0					
ANR	5038562	Identifier	strstr		5037596	0					
ANR	5038563	ArgumentList	tstr		5037596	1					
ANR	5038564	Argument	tstr		5037596	0					
ANR	5038565	Identifier	tstr		5037596	0					
ANR	5038566	Argument	oldstr		5037596	1					
ANR	5038567	Identifier	oldstr		5037596	0					
ANR	5038568	IfStatement	if ( ptr && ( ! att || * ( ptr - 1 ) == ' ' ) )		5037596	2					
ANR	5038569	Condition	ptr && ( ! att || * ( ptr - 1 ) == ' ' )	499:7:13470:13503	5037596	0	True				
ANR	5038570	AndExpression	ptr && ( ! att || * ( ptr - 1 ) == ' ' )		5037596	0		&&			
ANR	5038571	Identifier	ptr		5037596	0					
ANR	5038572	OrExpression	! att || * ( ptr - 1 ) == ' '		5037596	1		||			
ANR	5038573	UnaryOperationExpression	! att		5037596	0					
ANR	5038574	UnaryOperator	!		5037596	0					
ANR	5038575	Identifier	att		5037596	1					
ANR	5038576	EqualityExpression	* ( ptr - 1 ) == ' '		5037596	1		==			
ANR	5038577	UnaryOperationExpression	* ( ptr - 1 )		5037596	0					
ANR	5038578	UnaryOperator	*		5037596	0					
ANR	5038579	AdditiveExpression	ptr - 1		5037596	1		-			
ANR	5038580	Identifier	ptr		5037596	0					
ANR	5038581	PrimaryExpression	1		5037596	1					
ANR	5038582	PrimaryExpression	' '		5037596	1					
ANR	5038583	CompoundStatement		139:43:3500:3500	5037596	1					
ANR	5038584	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	500:4:13512:13558	5037596	0	True				
ANR	5038585	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	0		=			
ANR	5038586	Identifier	tstr		5037596	0					
ANR	5038587	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	1					
ANR	5038588	Callee	r_str_replace		5037596	0					
ANR	5038589	Identifier	r_str_replace		5037596	0					
ANR	5038590	ArgumentList	tstr		5037596	1					
ANR	5038591	Argument	tstr		5037596	0					
ANR	5038592	Identifier	tstr		5037596	0					
ANR	5038593	Argument	oldstr		5037596	1					
ANR	5038594	Identifier	oldstr		5037596	0					
ANR	5038595	Argument	newstr		5037596	2					
ANR	5038596	Identifier	newstr		5037596	0					
ANR	5038597	Argument	1		5037596	3					
ANR	5038598	PrimaryExpression	1		5037596	0					
ANR	5038599	BreakStatement	break ;	501:4:13564:13569	5037596	1	True				
ANR	5038600	ExpressionStatement	"snprintf ( oldstr , sizeof ( oldstr ) - 1 , ""[%s%c0x%x]"" , anal -> reg -> name [ R_REG_NAME_BP ] , sign , bparg -> delta )"	505:2:13606:13708	5037596	8	True				
ANR	5038601	CallExpression	"snprintf ( oldstr , sizeof ( oldstr ) - 1 , ""[%s%c0x%x]"" , anal -> reg -> name [ R_REG_NAME_BP ] , sign , bparg -> delta )"		5037596	0					
ANR	5038602	Callee	snprintf		5037596	0					
ANR	5038603	Identifier	snprintf		5037596	0					
ANR	5038604	ArgumentList	oldstr		5037596	1					
ANR	5038605	Argument	oldstr		5037596	0					
ANR	5038606	Identifier	oldstr		5037596	0					
ANR	5038607	Argument	sizeof ( oldstr ) - 1		5037596	1					
ANR	5038608	AdditiveExpression	sizeof ( oldstr ) - 1		5037596	0		-			
ANR	5038609	SizeofExpression	sizeof ( oldstr )		5037596	0					
ANR	5038610	Sizeof	sizeof		5037596	0					
ANR	5038611	SizeofOperand	oldstr		5037596	1					
ANR	5038612	PrimaryExpression	1		5037596	1					
ANR	5038613	Argument	"""[%s%c0x%x]"""		5037596	2					
ANR	5038614	PrimaryExpression	"""[%s%c0x%x]"""		5037596	0					
ANR	5038615	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	3					
ANR	5038616	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038617	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038618	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038619	Identifier	anal		5037596	0					
ANR	5038620	Identifier	reg		5037596	1					
ANR	5038621	Identifier	name		5037596	1					
ANR	5038622	Identifier	R_REG_NAME_BP		5037596	1					
ANR	5038623	Argument	sign		5037596	4					
ANR	5038624	Identifier	sign		5037596	0					
ANR	5038625	Argument	bparg -> delta		5037596	5					
ANR	5038626	PtrMemberAccess	bparg -> delta		5037596	0					
ANR	5038627	Identifier	bparg		5037596	0					
ANR	5038628	Identifier	delta		5037596	1					
ANR	5038629	IfStatement	"if ( strstr ( tstr , oldstr ) != NULL )"		5037596	9					
ANR	5038630	Condition	"strstr ( tstr , oldstr ) != NULL"	506:6:13716:13744	5037596	0	True				
ANR	5038631	EqualityExpression	"strstr ( tstr , oldstr ) != NULL"		5037596	0		!=			
ANR	5038632	CallExpression	"strstr ( tstr , oldstr )"		5037596	0					
ANR	5038633	Callee	strstr		5037596	0					
ANR	5038634	Identifier	strstr		5037596	0					
ANR	5038635	ArgumentList	tstr		5037596	1					
ANR	5038636	Argument	tstr		5037596	0					
ANR	5038637	Identifier	tstr		5037596	0					
ANR	5038638	Argument	oldstr		5037596	1					
ANR	5038639	Identifier	oldstr		5037596	0					
ANR	5038640	Identifier	NULL		5037596	1					
ANR	5038641	CompoundStatement		146:37:3741:3741	5037596	1					
ANR	5038642	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	507:3:13752:13798	5037596	0	True				
ANR	5038643	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	0		=			
ANR	5038644	Identifier	tstr		5037596	0					
ANR	5038645	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5037596	1					
ANR	5038646	Callee	r_str_replace		5037596	0					
ANR	5038647	Identifier	r_str_replace		5037596	0					
ANR	5038648	ArgumentList	tstr		5037596	1					
ANR	5038649	Argument	tstr		5037596	0					
ANR	5038650	Identifier	tstr		5037596	0					
ANR	5038651	Argument	oldstr		5037596	1					
ANR	5038652	Identifier	oldstr		5037596	0					
ANR	5038653	Argument	newstr		5037596	2					
ANR	5038654	Identifier	newstr		5037596	0					
ANR	5038655	Argument	1		5037596	3					
ANR	5038656	PrimaryExpression	1		5037596	0					
ANR	5038657	BreakStatement	break ;	508:3:13803:13808	5037596	1	True				
ANR	5038658	IdentifierDeclStatement	char bp [ 32 ] ;	512:1:13819:13830	5037596	34	True				
ANR	5038659	IdentifierDecl	bp [ 32 ]		5037596	0					
ANR	5038660	IdentifierDeclType	char [ 32 ]		5037596	0					
ANR	5038661	Identifier	bp		5037596	1					
ANR	5038662	PrimaryExpression	32		5037596	2					
ANR	5038663	IfStatement	if ( anal -> reg -> name [ R_REG_NAME_BP ] )		5037596	35					
ANR	5038664	Condition	anal -> reg -> name [ R_REG_NAME_BP ]	513:5:13837:13866	5037596	0	True				
ANR	5038665	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038666	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038667	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038668	Identifier	anal		5037596	0					
ANR	5038669	Identifier	reg		5037596	1					
ANR	5038670	Identifier	name		5037596	1					
ANR	5038671	Identifier	R_REG_NAME_BP		5037596	1					
ANR	5038672	CompoundStatement		153:37:3863:3863	5037596	1					
ANR	5038673	ExpressionStatement	"strncpy ( bp , anal -> reg -> name [ R_REG_NAME_BP ] , sizeof ( bp ) - 1 )"	514:2:13873:13934	5037596	0	True				
ANR	5038674	CallExpression	"strncpy ( bp , anal -> reg -> name [ R_REG_NAME_BP ] , sizeof ( bp ) - 1 )"		5037596	0					
ANR	5038675	Callee	strncpy		5037596	0					
ANR	5038676	Identifier	strncpy		5037596	0					
ANR	5038677	ArgumentList	bp		5037596	1					
ANR	5038678	Argument	bp		5037596	0					
ANR	5038679	Identifier	bp		5037596	0					
ANR	5038680	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	1					
ANR	5038681	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5037596	0					
ANR	5038682	PtrMemberAccess	anal -> reg -> name		5037596	0					
ANR	5038683	PtrMemberAccess	anal -> reg		5037596	0					
ANR	5038684	Identifier	anal		5037596	0					
ANR	5038685	Identifier	reg		5037596	1					
ANR	5038686	Identifier	name		5037596	1					
ANR	5038687	Identifier	R_REG_NAME_BP		5037596	1					
ANR	5038688	Argument	sizeof ( bp ) - 1		5037596	2					
ANR	5038689	AdditiveExpression	sizeof ( bp ) - 1		5037596	0		-			
ANR	5038690	SizeofExpression	sizeof ( bp )		5037596	0					
ANR	5038691	Sizeof	sizeof		5037596	0					
ANR	5038692	SizeofOperand	bp		5037596	1					
ANR	5038693	PrimaryExpression	1		5037596	1					
ANR	5038694	IfStatement	if ( isupper ( ( ut8 ) * str ) )		5037596	1					
ANR	5038695	Condition	isupper ( ( ut8 ) * str )	515:6:13942:13960	5037596	0	True				
ANR	5038696	CallExpression	isupper ( ( ut8 ) * str )		5037596	0					
ANR	5038697	Callee	isupper		5037596	0					
ANR	5038698	Identifier	isupper		5037596	0					
ANR	5038699	ArgumentList	( ut8 ) * str		5037596	1					
ANR	5038700	Argument	( ut8 ) * str		5037596	0					
ANR	5038701	CastExpression	( ut8 ) * str		5037596	0					
ANR	5038702	CastTarget	ut8		5037596	0					
ANR	5038703	UnaryOperationExpression	* str		5037596	1					
ANR	5038704	UnaryOperator	*		5037596	0					
ANR	5038705	Identifier	str		5037596	1					
ANR	5038706	CompoundStatement		155:27:3957:3957	5037596	1					
ANR	5038707	ExpressionStatement	"r_str_case ( bp , true )"	516:3:13968:13989	5037596	0	True				
ANR	5038708	CallExpression	"r_str_case ( bp , true )"		5037596	0					
ANR	5038709	Callee	r_str_case		5037596	0					
ANR	5038710	Identifier	r_str_case		5037596	0					
ANR	5038711	ArgumentList	bp		5037596	1					
ANR	5038712	Argument	bp		5037596	0					
ANR	5038713	Identifier	bp		5037596	0					
ANR	5038714	Argument	true		5037596	1					
ANR	5038715	Identifier	true		5037596	0					
ANR	5038716	ExpressionStatement	bp [ sizeof ( bp ) - 1 ] = 0	518:2:13997:14020	5037596	2	True				
ANR	5038717	AssignmentExpression	bp [ sizeof ( bp ) - 1 ] = 0		5037596	0		=			
ANR	5038718	ArrayIndexing	bp [ sizeof ( bp ) - 1 ]		5037596	0					
ANR	5038719	Identifier	bp		5037596	0					
ANR	5038720	AdditiveExpression	sizeof ( bp ) - 1		5037596	1		-			
ANR	5038721	SizeofExpression	sizeof ( bp )		5037596	0					
ANR	5038722	Sizeof	sizeof		5037596	0					
ANR	5038723	SizeofOperand	bp		5037596	1					
ANR	5038724	PrimaryExpression	1		5037596	1					
ANR	5038725	PrimaryExpression	0		5037596	1					
ANR	5038726	ElseStatement	else		5037596	0					
ANR	5038727	CompoundStatement		159:8:4024:4024	5037596	0					
ANR	5038728	ExpressionStatement	bp [ 0 ] = 0	520:2:14034:14043	5037596	0	True				
ANR	5038729	AssignmentExpression	bp [ 0 ] = 0		5037596	0		=			
ANR	5038730	ArrayIndexing	bp [ 0 ]		5037596	0					
ANR	5038731	Identifier	bp		5037596	0					
ANR	5038732	PrimaryExpression	0		5037596	1					
ANR	5038733	PrimaryExpression	0		5037596	1					
ANR	5038734	IdentifierDeclStatement	bool ret = true ;	523:1:14050:14065	5037596	36	True				
ANR	5038735	IdentifierDecl	ret = true		5037596	0					
ANR	5038736	IdentifierDeclType	bool		5037596	0					
ANR	5038737	Identifier	ret		5037596	1					
ANR	5038738	AssignmentExpression	ret = true		5037596	2		=			
ANR	5038739	Identifier	true		5037596	0					
ANR	5038740	Identifier	true		5037596	1					
ANR	5038741	IfStatement	if ( len > strlen ( tstr ) )		5037596	37					
ANR	5038742	Condition	len > strlen ( tstr )	524:5:14072:14090	5037596	0	True				
ANR	5038743	RelationalExpression	len > strlen ( tstr )		5037596	0		>			
ANR	5038744	Identifier	len		5037596	0					
ANR	5038745	CallExpression	strlen ( tstr )		5037596	1					
ANR	5038746	Callee	strlen		5037596	0					
ANR	5038747	Identifier	strlen		5037596	0					
ANR	5038748	ArgumentList	tstr		5037596	1					
ANR	5038749	Argument	tstr		5037596	0					
ANR	5038750	Identifier	tstr		5037596	0					
ANR	5038751	CompoundStatement		164:26:4087:4087	5037596	1					
ANR	5038752	ExpressionStatement	"strcpy ( str , tstr )"	525:2:14097:14115	5037596	0	True				
ANR	5038753	CallExpression	"strcpy ( str , tstr )"		5037596	0					
ANR	5038754	Callee	strcpy		5037596	0					
ANR	5038755	Identifier	strcpy		5037596	0					
ANR	5038756	ArgumentList	str		5037596	1					
ANR	5038757	Argument	str		5037596	0					
ANR	5038758	Identifier	str		5037596	0					
ANR	5038759	Argument	tstr		5037596	1					
ANR	5038760	Identifier	tstr		5037596	0					
ANR	5038761	ElseStatement	else		5037596	0					
ANR	5038762	CompoundStatement		166:8:4119:4119	5037596	0					
ANR	5038763	ExpressionStatement	ret = false	528:2:14169:14180	5037596	0	True				
ANR	5038764	AssignmentExpression	ret = false		5037596	0		=			
ANR	5038765	Identifier	ret		5037596	0					
ANR	5038766	Identifier	false		5037596	1					
ANR	5038767	ExpressionStatement	free ( tstr )	530:1:14186:14197	5037596	38	True				
ANR	5038768	CallExpression	free ( tstr )		5037596	0					
ANR	5038769	Callee	free		5037596	0					
ANR	5038770	Identifier	free		5037596	0					
ANR	5038771	ArgumentList	tstr		5037596	1					
ANR	5038772	Argument	tstr		5037596	0					
ANR	5038773	Identifier	tstr		5037596	0					
ANR	5038774	ExpressionStatement	free ( ireg )	531:1:14200:14211	5037596	39	True				
ANR	5038775	CallExpression	free ( ireg )		5037596	0					
ANR	5038776	Callee	free		5037596	0					
ANR	5038777	Identifier	free		5037596	0					
ANR	5038778	ArgumentList	ireg		5037596	1					
ANR	5038779	Argument	ireg		5037596	0					
ANR	5038780	Identifier	ireg		5037596	0					
ANR	5038781	ExpressionStatement	r_list_free ( spargs )	532:1:14214:14234	5037596	40	True				
ANR	5038782	CallExpression	r_list_free ( spargs )		5037596	0					
ANR	5038783	Callee	r_list_free		5037596	0					
ANR	5038784	Identifier	r_list_free		5037596	0					
ANR	5038785	ArgumentList	spargs		5037596	1					
ANR	5038786	Argument	spargs		5037596	0					
ANR	5038787	Identifier	spargs		5037596	0					
ANR	5038788	ExpressionStatement	r_list_free ( bpargs )	533:1:14237:14257	5037596	41	True				
ANR	5038789	CallExpression	r_list_free ( bpargs )		5037596	0					
ANR	5038790	Callee	r_list_free		5037596	0					
ANR	5038791	Identifier	r_list_free		5037596	0					
ANR	5038792	ArgumentList	bpargs		5037596	1					
ANR	5038793	Argument	bpargs		5037596	0					
ANR	5038794	Identifier	bpargs		5037596	0					
ANR	5038795	ReturnStatement	return ret ;	534:1:14260:14270	5037596	42	True				
ANR	5038796	Identifier	ret		5037596	0					
ANR	5038797	ReturnType	static bool		5037596	1					
ANR	5038798	Identifier	varsub		5037596	2					
ANR	5038799	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5037596	3					
ANR	5038800	Parameter	RParse * p	361:20:9922:9930	5037596	0	True				
ANR	5038801	ParameterType	RParse *		5037596	0					
ANR	5038802	Identifier	p		5037596	1					
ANR	5038803	Parameter	RAnalFunction * f	361:31:9933:9948	5037596	1	True				
ANR	5038804	ParameterType	RAnalFunction *		5037596	0					
ANR	5038805	Identifier	f		5037596	1					
ANR	5038806	Parameter	ut64 addr	361:49:9951:9959	5037596	2	True				
ANR	5038807	ParameterType	ut64		5037596	0					
ANR	5038808	Identifier	addr		5037596	1					
ANR	5038809	Parameter	int oplen	361:60:9962:9970	5037596	3	True				
ANR	5038810	ParameterType	int		5037596	0					
ANR	5038811	Identifier	oplen		5037596	1					
ANR	5038812	Parameter	char * data	361:71:9973:9982	5037596	4	True				
ANR	5038813	ParameterType	char *		5037596	0					
ANR	5038814	Identifier	data		5037596	1					
ANR	5038815	Parameter	char * str	361:83:9985:9993	5037596	5	True				
ANR	5038816	ParameterType	char *		5037596	0					
ANR	5038817	Identifier	str		5037596	1					
ANR	5038818	Parameter	int len	361:94:9996:10002	5037596	6	True				
ANR	5038819	ParameterType	int		5037596	0					
ANR	5038820	Identifier	len		5037596	1					
ANR	5038821	CFGEntryNode	ENTRY		5037596		True				
ANR	5038822	CFGExitNode	EXIT		5037596		True				
ANR	5038823	CFGErrorNode	ERROR		5037596		True				
ANR	5038824	Symbol	* word ++		5037596						
ANR	5038825	Symbol	anal -> reg		5037596						
ANR	5038826	Symbol	data		5037596						
ANR	5038827	Symbol	p -> varlist		5037596						
ANR	5038828	Symbol	sign		5037596						
ANR	5038829	Symbol	strchr		5037596						
ANR	5038830	Symbol	* sparg		5037596						
ANR	5038831	Symbol	sparg -> name		5037596						
ANR	5038832	Symbol	tstr		5037596						
ANR	5038833	Symbol	neg		5037596						
ANR	5038834	Symbol	strlen		5037596						
ANR	5038835	Symbol	len		5037596						
ANR	5038836	Symbol	* bp		5037596						
ANR	5038837	Symbol	rip		5037596						
ANR	5038838	Symbol	p -> get_op_ireg		5037596						
ANR	5038839	Symbol	* ptr		5037596						
ANR	5038840	Symbol	r_num_get		5037596						
ANR	5038841	Symbol	anal -> reg -> name		5037596						
ANR	5038842	Symbol	att		5037596						
ANR	5038843	Symbol	R_REG_NAME_BP		5037596						
ANR	5038844	Symbol	ret		5037596						
ANR	5038845	Symbol	oldstr		5037596						
ANR	5038846	Symbol	pre		5037596						
ANR	5038847	Symbol	NULL		5037596						
ANR	5038848	Symbol	ripend		5037596						
ANR	5038849	Symbol	* ( ptr - 1 )		5037596						
ANR	5038850	Symbol	* bparg		5037596						
ANR	5038851	Symbol	sparg -> delta		5037596						
ANR	5038852	Symbol	plus		5037596						
ANR	5038853	Symbol	spargs		5037596						
ANR	5038854	Symbol	str		5037596						
ANR	5038855	Symbol	R_REG_NAME_SP		5037596						
ANR	5038856	Symbol	anal		5037596						
ANR	5038857	Symbol	strstr		5037596						
ANR	5038858	Symbol	bpargiter		5037596						
ANR	5038859	Symbol	bpargs		5037596						
ANR	5038860	Symbol	true		5037596						
ANR	5038861	Symbol	ucase		5037596						
ANR	5038862	Symbol	ireg		5037596						
ANR	5038863	Symbol	word		5037596						
ANR	5038864	Symbol	* anal -> reg -> name		5037596						
ANR	5038865	Symbol	* R_REG_NAME_SP		5037596						
ANR	5038866	Symbol	r_str_casestr		5037596						
ANR	5038867	Symbol	* rip		5037596						
ANR	5038868	Symbol	oplen		5037596						
ANR	5038869	Symbol	tstr_new		5037596						
ANR	5038870	Symbol	bp		5037596						
ANR	5038871	Symbol	r_num_math		5037596						
ANR	5038872	Symbol	bparg		5037596						
ANR	5038873	Symbol	sparg		5037596						
ANR	5038874	Symbol	* * anal		5037596						
ANR	5038875	Symbol	* anal		5037596						
ANR	5038876	Symbol	pos		5037596						
ANR	5038877	Symbol	* anal -> reg		5037596						
ANR	5038878	Symbol	* * * anal		5037596						
ANR	5038879	Symbol	* tstr		5037596						
ANR	5038880	Symbol	r_str_replace		5037596						
ANR	5038881	Symbol	p -> analb . anal		5037596						
ANR	5038882	Symbol	* * anal -> reg		5037596						
ANR	5038883	Symbol	* str		5037596						
ANR	5038884	Symbol	addr		5037596						
ANR	5038885	Symbol	bparg -> name		5037596						
ANR	5038886	Symbol	f		5037596						
ANR	5038887	Symbol	* word		5037596						
ANR	5038888	Symbol	p -> analb		5037596						
ANR	5038889	Symbol	false		5037596						
ANR	5038890	Symbol	isupper		5037596						
ANR	5038891	Symbol	spiter		5037596						
ANR	5038892	Symbol	newstr		5037596						
ANR	5038893	Symbol	n		5037596						
ANR	5038894	Symbol	repl_num		5037596						
ANR	5038895	Symbol	ptr		5037596						
ANR	5038896	Symbol	p		5037596						
ANR	5038897	Symbol	* plus		5037596						
ANR	5038898	Symbol	* R_REG_NAME_BP		5037596						
ANR	5038899	Symbol	p -> relsub		5037596						
ANR	5038900	Symbol	* p		5037596						
ANR	5038901	Symbol	strdup		5037596						
ANR	5038902	Symbol	p -> user		5037596						
ANR	5038903	Symbol	bparg -> delta		5037596						
ANR	5038904	DeclStmt									
ANR	5038905	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_x86_pseudo
ANR	5038906	DeclStmt									
ANR	5038907	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
