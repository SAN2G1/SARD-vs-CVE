command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6529534	File	data/converged/CVE-2019-16718~_radare2/xnu_debug.c								
ANR	6529535	DeclStmt									
ANR	6529536	Decl							task_t	task_t	task_dbg
ANR	6529537	DeclStmt									
ANR	6529538	Decl							extern int	"extern int ( int pid , uint64_t address , void * buffer , uint32_t buffersize )"	proc_regionfilename
ANR	6529539	ClassDef	<unnamed>	43:8:1033:1120							
ANR	6529540	DeclStmt									
ANR	6529541	Decl							ut32	ut32	version
ANR	6529542	DeclStmt									
ANR	6529543	Decl							ut32	ut32	info_array_count
ANR	6529544	DeclStmt									
ANR	6529545	Decl							ut32	ut32	info_array
ANR	6529546	DeclStmt									
ANR	6529547	Decl									DyldAllImageInfos32
ANR	6529548	ClassDef	<unnamed>	49:8:1131:1233							
ANR	6529549	DeclStmt									
ANR	6529550	Decl							ut32	ut32	image_load_address
ANR	6529551	DeclStmt									
ANR	6529552	Decl							ut32	ut32	image_file_path
ANR	6529553	DeclStmt									
ANR	6529554	Decl							ut32	ut32	image_file_mod_date
ANR	6529555	DeclStmt									
ANR	6529556	Decl									DyldImageInfo32
ANR	6529557	ClassDef	<unnamed>	55:8:1244:1331							
ANR	6529558	DeclStmt									
ANR	6529559	Decl							ut32	ut32	version
ANR	6529560	DeclStmt									
ANR	6529561	Decl							ut32	ut32	info_array_count
ANR	6529562	DeclStmt									
ANR	6529563	Decl							ut64	ut64	info_array
ANR	6529564	DeclStmt									
ANR	6529565	Decl									DyldAllImageInfos64
ANR	6529566	ClassDef	<unnamed>	61:8:1342:1444							
ANR	6529567	DeclStmt									
ANR	6529568	Decl							ut64	ut64	image_load_address
ANR	6529569	DeclStmt									
ANR	6529570	Decl							ut64	ut64	image_file_path
ANR	6529571	DeclStmt									
ANR	6529572	Decl							ut64	ut64	image_file_mod_date
ANR	6529573	DeclStmt									
ANR	6529574	Decl									DyldImageInfo64
ANR	6529575	Function	getcurthread	68:0:1535:1971							
ANR	6529576	FunctionDef	getcurthread (RDebug * dbg)		6529575	0					
ANR	6529577	CompoundStatement		68:43:1578:1971	6529575	0					
ANR	6529578	IdentifierDeclStatement	thread_t th ;	69:1:1581:1592	6529575	0	True				
ANR	6529579	IdentifierDecl	th		6529575	0					
ANR	6529580	IdentifierDeclType	thread_t		6529575	0					
ANR	6529581	Identifier	th		6529575	1					
ANR	6529582	IdentifierDeclStatement	thread_array_t threads = NULL ;	70:1:1595:1624	6529575	1	True				
ANR	6529583	IdentifierDecl	threads = NULL		6529575	0					
ANR	6529584	IdentifierDeclType	thread_array_t		6529575	0					
ANR	6529585	Identifier	threads		6529575	1					
ANR	6529586	AssignmentExpression	threads = NULL		6529575	2		=			
ANR	6529587	Identifier	NULL		6529575	0					
ANR	6529588	Identifier	NULL		6529575	1					
ANR	6529589	IdentifierDeclStatement	unsigned int n_threads = 0 ;	71:1:1627:1653	6529575	2	True				
ANR	6529590	IdentifierDecl	n_threads = 0		6529575	0					
ANR	6529591	IdentifierDeclType	unsigned int		6529575	0					
ANR	6529592	Identifier	n_threads		6529575	1					
ANR	6529593	AssignmentExpression	n_threads = 0		6529575	2		=			
ANR	6529594	Identifier	n_threads		6529575	0					
ANR	6529595	PrimaryExpression	0		6529575	1					
ANR	6529596	IdentifierDeclStatement	task_t t = pid_to_task ( dbg -> pid ) ;	72:1:1656:1689	6529575	3	True				
ANR	6529597	IdentifierDecl	t = pid_to_task ( dbg -> pid )		6529575	0					
ANR	6529598	IdentifierDeclType	task_t		6529575	0					
ANR	6529599	Identifier	t		6529575	1					
ANR	6529600	AssignmentExpression	t = pid_to_task ( dbg -> pid )		6529575	2		=			
ANR	6529601	Identifier	t		6529575	0					
ANR	6529602	CallExpression	pid_to_task ( dbg -> pid )		6529575	1					
ANR	6529603	Callee	pid_to_task		6529575	0					
ANR	6529604	Identifier	pid_to_task		6529575	0					
ANR	6529605	ArgumentList	dbg -> pid		6529575	1					
ANR	6529606	Argument	dbg -> pid		6529575	0					
ANR	6529607	PtrMemberAccess	dbg -> pid		6529575	0					
ANR	6529608	Identifier	dbg		6529575	0					
ANR	6529609	Identifier	pid		6529575	1					
ANR	6529610	IfStatement	if ( ! t )		6529575	4					
ANR	6529611	Condition	! t	73:5:1696:1697	6529575	0	True				
ANR	6529612	UnaryOperationExpression	! t		6529575	0					
ANR	6529613	UnaryOperator	!		6529575	0					
ANR	6529614	Identifier	t		6529575	1					
ANR	6529615	CompoundStatement		6:9:121:121	6529575	1					
ANR	6529616	ReturnStatement	return - 1 ;	74:2:1704:1713	6529575	0	True				
ANR	6529617	UnaryOperationExpression	- 1		6529575	0					
ANR	6529618	UnaryOperator	-		6529575	0					
ANR	6529619	PrimaryExpression	1		6529575	1					
ANR	6529620	IfStatement	"if ( task_threads ( t , & threads , & n_threads ) != KERN_SUCCESS )"		6529575	5					
ANR	6529621	Condition	"task_threads ( t , & threads , & n_threads ) != KERN_SUCCESS"	76:5:1723:1776	6529575	0	True				
ANR	6529622	EqualityExpression	"task_threads ( t , & threads , & n_threads ) != KERN_SUCCESS"		6529575	0		!=			
ANR	6529623	CallExpression	"task_threads ( t , & threads , & n_threads )"		6529575	0					
ANR	6529624	Callee	task_threads		6529575	0					
ANR	6529625	Identifier	task_threads		6529575	0					
ANR	6529626	ArgumentList	t		6529575	1					
ANR	6529627	Argument	t		6529575	0					
ANR	6529628	Identifier	t		6529575	0					
ANR	6529629	Argument	& threads		6529575	1					
ANR	6529630	UnaryOperationExpression	& threads		6529575	0					
ANR	6529631	UnaryOperator	&		6529575	0					
ANR	6529632	Identifier	threads		6529575	1					
ANR	6529633	Argument	& n_threads		6529575	2					
ANR	6529634	UnaryOperationExpression	& n_threads		6529575	0					
ANR	6529635	UnaryOperator	&		6529575	0					
ANR	6529636	Identifier	n_threads		6529575	1					
ANR	6529637	Identifier	KERN_SUCCESS		6529575	1					
ANR	6529638	CompoundStatement		9:61:200:200	6529575	1					
ANR	6529639	ReturnStatement	return - 1 ;	77:2:1783:1792	6529575	0	True				
ANR	6529640	UnaryOperationExpression	- 1		6529575	0					
ANR	6529641	UnaryOperator	-		6529575	0					
ANR	6529642	PrimaryExpression	1		6529575	1					
ANR	6529643	IfStatement	if ( n_threads > 0 )		6529575	6					
ANR	6529644	Condition	n_threads > 0	79:5:1802:1814	6529575	0	True				
ANR	6529645	RelationalExpression	n_threads > 0		6529575	0		>			
ANR	6529646	Identifier	n_threads		6529575	0					
ANR	6529647	PrimaryExpression	0		6529575	1					
ANR	6529648	CompoundStatement		12:20:238:238	6529575	1					
ANR	6529649	ExpressionStatement	"memcpy ( & th , threads , sizeof ( th ) )"	80:2:1821:1855	6529575	0	True				
ANR	6529650	CallExpression	"memcpy ( & th , threads , sizeof ( th ) )"		6529575	0					
ANR	6529651	Callee	memcpy		6529575	0					
ANR	6529652	Identifier	memcpy		6529575	0					
ANR	6529653	ArgumentList	& th		6529575	1					
ANR	6529654	Argument	& th		6529575	0					
ANR	6529655	UnaryOperationExpression	& th		6529575	0					
ANR	6529656	UnaryOperator	&		6529575	0					
ANR	6529657	Identifier	th		6529575	1					
ANR	6529658	Argument	threads		6529575	1					
ANR	6529659	Identifier	threads		6529575	0					
ANR	6529660	Argument	sizeof ( th )		6529575	2					
ANR	6529661	SizeofExpression	sizeof ( th )		6529575	0					
ANR	6529662	Sizeof	sizeof		6529575	0					
ANR	6529663	SizeofOperand	th		6529575	1					
ANR	6529664	ElseStatement	else		6529575	0					
ANR	6529665	CompoundStatement		14:8:286:286	6529575	0					
ANR	6529666	ExpressionStatement	th = - 1	82:2:1869:1876	6529575	0	True				
ANR	6529667	AssignmentExpression	th = - 1		6529575	0		=			
ANR	6529668	Identifier	th		6529575	0					
ANR	6529669	UnaryOperationExpression	- 1		6529575	1					
ANR	6529670	UnaryOperator	-		6529575	0					
ANR	6529671	PrimaryExpression	1		6529575	1					
ANR	6529672	ExpressionStatement	"vm_deallocate ( t , ( vm_address_t ) threads , n_threads * sizeof ( thread_act_t ) )"	84:1:1882:1957	6529575	7	True				
ANR	6529673	CallExpression	"vm_deallocate ( t , ( vm_address_t ) threads , n_threads * sizeof ( thread_act_t ) )"		6529575	0					
ANR	6529674	Callee	vm_deallocate		6529575	0					
ANR	6529675	Identifier	vm_deallocate		6529575	0					
ANR	6529676	ArgumentList	t		6529575	1					
ANR	6529677	Argument	t		6529575	0					
ANR	6529678	Identifier	t		6529575	0					
ANR	6529679	Argument	( vm_address_t ) threads		6529575	1					
ANR	6529680	CastExpression	( vm_address_t ) threads		6529575	0					
ANR	6529681	CastTarget	vm_address_t		6529575	0					
ANR	6529682	Identifier	threads		6529575	1					
ANR	6529683	Argument	n_threads * sizeof ( thread_act_t )		6529575	2					
ANR	6529684	MultiplicativeExpression	n_threads * sizeof ( thread_act_t )		6529575	0		*			
ANR	6529685	Identifier	n_threads		6529575	0					
ANR	6529686	SizeofExpression	sizeof ( thread_act_t )		6529575	1					
ANR	6529687	Sizeof	sizeof		6529575	0					
ANR	6529688	SizeofOperand	thread_act_t		6529575	1					
ANR	6529689	ReturnStatement	return th ;	85:1:1960:1969	6529575	8	True				
ANR	6529690	Identifier	th		6529575	0					
ANR	6529691	ReturnType	static thread_t		6529575	1					
ANR	6529692	Identifier	getcurthread		6529575	2					
ANR	6529693	ParameterList	RDebug * dbg		6529575	3					
ANR	6529694	Parameter	RDebug * dbg	68:30:1565:1575	6529575	0	True				
ANR	6529695	ParameterType	RDebug *		6529575	0					
ANR	6529696	Identifier	dbg		6529575	1					
ANR	6529697	CFGEntryNode	ENTRY		6529575		True				
ANR	6529698	CFGExitNode	EXIT		6529575		True				
ANR	6529699	Symbol	n_threads		6529575						
ANR	6529700	Symbol	task_threads		6529575						
ANR	6529701	Symbol	& threads		6529575						
ANR	6529702	Symbol	NULL		6529575						
ANR	6529703	Symbol	& n_threads		6529575						
ANR	6529704	Symbol	dbg		6529575						
ANR	6529705	Symbol	threads		6529575						
ANR	6529706	Symbol	* dbg		6529575						
ANR	6529707	Symbol	pid_to_task		6529575						
ANR	6529708	Symbol	th		6529575						
ANR	6529709	Symbol	t		6529575						
ANR	6529710	Symbol	dbg -> pid		6529575						
ANR	6529711	Symbol	KERN_SUCCESS		6529575						
ANR	6529712	Symbol	& th		6529575						
ANR	6529713	Function	get_xnu_thread	88:0:1974:2600							
ANR	6529714	FunctionDef	"get_xnu_thread (RDebug * dbg , int tid)"		6529713	0					
ANR	6529715	CompoundStatement		88:58:2032:2600	6529713	0					
ANR	6529716	IfStatement	if ( ! dbg || tid < 0 )		6529713	0					
ANR	6529717	Condition	! dbg || tid < 0	89:5:2039:2053	6529713	0	True				
ANR	6529718	OrExpression	! dbg || tid < 0		6529713	0		||			
ANR	6529719	UnaryOperationExpression	! dbg		6529713	0					
ANR	6529720	UnaryOperator	!		6529713	0					
ANR	6529721	Identifier	dbg		6529713	1					
ANR	6529722	RelationalExpression	tid < 0		6529713	1		<			
ANR	6529723	Identifier	tid		6529713	0					
ANR	6529724	PrimaryExpression	0		6529713	1					
ANR	6529725	CompoundStatement		2:22:23:23	6529713	1					
ANR	6529726	ReturnStatement	return NULL ;	90:2:2060:2071	6529713	0	True				
ANR	6529727	Identifier	NULL		6529713	0					
ANR	6529728	IfStatement	if ( ! xnu_update_thread_list ( dbg ) )		6529713	1					
ANR	6529729	Condition	! xnu_update_thread_list ( dbg )	92:5:2081:2109	6529713	0	True				
ANR	6529730	UnaryOperationExpression	! xnu_update_thread_list ( dbg )		6529713	0					
ANR	6529731	UnaryOperator	!		6529713	0					
ANR	6529732	CallExpression	xnu_update_thread_list ( dbg )		6529713	1					
ANR	6529733	Callee	xnu_update_thread_list		6529713	0					
ANR	6529734	Identifier	xnu_update_thread_list		6529713	0					
ANR	6529735	ArgumentList	dbg		6529713	1					
ANR	6529736	Argument	dbg		6529713	0					
ANR	6529737	Identifier	dbg		6529713	0					
ANR	6529738	CompoundStatement		5:36:79:79	6529713	1					
ANR	6529739	ExpressionStatement	"eprintf ( ""Failed to update thread_list xnu_udpate_thread_list\\n"" )"	93:2:2116:2181	6529713	0	True				
ANR	6529740	CallExpression	"eprintf ( ""Failed to update thread_list xnu_udpate_thread_list\\n"" )"		6529713	0					
ANR	6529741	Callee	eprintf		6529713	0					
ANR	6529742	Identifier	eprintf		6529713	0					
ANR	6529743	ArgumentList	"""Failed to update thread_list xnu_udpate_thread_list\\n"""		6529713	1					
ANR	6529744	Argument	"""Failed to update thread_list xnu_udpate_thread_list\\n"""		6529713	0					
ANR	6529745	PrimaryExpression	"""Failed to update thread_list xnu_udpate_thread_list\\n"""		6529713	0					
ANR	6529746	ReturnStatement	return NULL ;	94:2:2185:2196	6529713	1	True				
ANR	6529747	Identifier	NULL		6529713	0					
ANR	6529748	IdentifierDeclStatement	"RListIter * it = r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find ) ;"	97:1:2233:2339	6529713	2	True				
ANR	6529749	IdentifierDecl	"* it = r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"		6529713	0					
ANR	6529750	IdentifierDeclType	RListIter *		6529713	0					
ANR	6529751	Identifier	it		6529713	1					
ANR	6529752	AssignmentExpression	"* it = r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"		6529713	2		=			
ANR	6529753	Identifier	it		6529713	0					
ANR	6529754	CallExpression	"r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"		6529713	1					
ANR	6529755	Callee	r_list_find		6529713	0					
ANR	6529756	Identifier	r_list_find		6529713	0					
ANR	6529757	ArgumentList	dbg -> threads		6529713	1					
ANR	6529758	Argument	dbg -> threads		6529713	0					
ANR	6529759	PtrMemberAccess	dbg -> threads		6529713	0					
ANR	6529760	Identifier	dbg		6529713	0					
ANR	6529761	Identifier	threads		6529713	1					
ANR	6529762	Argument	( const void * ) ( size_t ) & tid		6529713	1					
ANR	6529763	CastExpression	( const void * ) ( size_t ) & tid		6529713	0					
ANR	6529764	CastTarget	const void *		6529713	0					
ANR	6529765	CastExpression	( size_t ) & tid		6529713	1					
ANR	6529766	CastTarget	size_t		6529713	0					
ANR	6529767	UnaryOperationExpression	& tid		6529713	1					
ANR	6529768	UnaryOperator	&		6529713	0					
ANR	6529769	Identifier	tid		6529713	1					
ANR	6529770	Argument	( RListComparator ) & thread_find		6529713	2					
ANR	6529771	CastExpression	( RListComparator ) & thread_find		6529713	0					
ANR	6529772	CastTarget	RListComparator		6529713	0					
ANR	6529773	UnaryOperationExpression	& thread_find		6529713	1					
ANR	6529774	UnaryOperator	&		6529713	0					
ANR	6529775	Identifier	thread_find		6529713	1					
ANR	6529776	IfStatement	if ( ! it )		6529713	3					
ANR	6529777	Condition	! it	99:5:2346:2348	6529713	0	True				
ANR	6529778	UnaryOperationExpression	! it		6529713	0					
ANR	6529779	UnaryOperator	!		6529713	0					
ANR	6529780	Identifier	it		6529713	1					
ANR	6529781	CompoundStatement		12:10:318:318	6529713	1					
ANR	6529782	ExpressionStatement	tid = getcurthread ( dbg )	100:2:2355:2379	6529713	0	True				
ANR	6529783	AssignmentExpression	tid = getcurthread ( dbg )		6529713	0		=			
ANR	6529784	Identifier	tid		6529713	0					
ANR	6529785	CallExpression	getcurthread ( dbg )		6529713	1					
ANR	6529786	Callee	getcurthread		6529713	0					
ANR	6529787	Identifier	getcurthread		6529713	0					
ANR	6529788	ArgumentList	dbg		6529713	1					
ANR	6529789	Argument	dbg		6529713	0					
ANR	6529790	Identifier	dbg		6529713	0					
ANR	6529791	ExpressionStatement	"it = r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"	101:2:2383:2478	6529713	1	True				
ANR	6529792	AssignmentExpression	"it = r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"		6529713	0		=			
ANR	6529793	Identifier	it		6529713	0					
ANR	6529794	CallExpression	"r_list_find ( dbg -> threads , ( const void * ) ( size_t ) & tid , ( RListComparator ) & thread_find )"		6529713	1					
ANR	6529795	Callee	r_list_find		6529713	0					
ANR	6529796	Identifier	r_list_find		6529713	0					
ANR	6529797	ArgumentList	dbg -> threads		6529713	1					
ANR	6529798	Argument	dbg -> threads		6529713	0					
ANR	6529799	PtrMemberAccess	dbg -> threads		6529713	0					
ANR	6529800	Identifier	dbg		6529713	0					
ANR	6529801	Identifier	threads		6529713	1					
ANR	6529802	Argument	( const void * ) ( size_t ) & tid		6529713	1					
ANR	6529803	CastExpression	( const void * ) ( size_t ) & tid		6529713	0					
ANR	6529804	CastTarget	const void *		6529713	0					
ANR	6529805	CastExpression	( size_t ) & tid		6529713	1					
ANR	6529806	CastTarget	size_t		6529713	0					
ANR	6529807	UnaryOperationExpression	& tid		6529713	1					
ANR	6529808	UnaryOperator	&		6529713	0					
ANR	6529809	Identifier	tid		6529713	1					
ANR	6529810	Argument	( RListComparator ) & thread_find		6529713	2					
ANR	6529811	CastExpression	( RListComparator ) & thread_find		6529713	0					
ANR	6529812	CastTarget	RListComparator		6529713	0					
ANR	6529813	UnaryOperationExpression	& thread_find		6529713	1					
ANR	6529814	UnaryOperator	&		6529713	0					
ANR	6529815	Identifier	thread_find		6529713	1					
ANR	6529816	IfStatement	if ( ! it )		6529713	2					
ANR	6529817	Condition	! it	103:6:2486:2488	6529713	0	True				
ANR	6529818	UnaryOperationExpression	! it		6529713	0					
ANR	6529819	UnaryOperator	!		6529713	0					
ANR	6529820	Identifier	it		6529713	1					
ANR	6529821	CompoundStatement		16:11:458:458	6529713	1					
ANR	6529822	ExpressionStatement	"eprintf ( ""Thread not found get_xnu_thread\\n"" )"	104:3:2496:2541	6529713	0	True				
ANR	6529823	CallExpression	"eprintf ( ""Thread not found get_xnu_thread\\n"" )"		6529713	0					
ANR	6529824	Callee	eprintf		6529713	0					
ANR	6529825	Identifier	eprintf		6529713	0					
ANR	6529826	ArgumentList	"""Thread not found get_xnu_thread\\n"""		6529713	1					
ANR	6529827	Argument	"""Thread not found get_xnu_thread\\n"""		6529713	0					
ANR	6529828	PrimaryExpression	"""Thread not found get_xnu_thread\\n"""		6529713	0					
ANR	6529829	ReturnStatement	return NULL ;	105:3:2546:2557	6529713	1	True				
ANR	6529830	Identifier	NULL		6529713	0					
ANR	6529831	ReturnStatement	return ( xnu_thread_t * ) it -> data ;	108:1:2567:2598	6529713	4	True				
ANR	6529832	CastExpression	( xnu_thread_t * ) it -> data		6529713	0					
ANR	6529833	CastTarget	xnu_thread_t *		6529713	0					
ANR	6529834	PtrMemberAccess	it -> data		6529713	1					
ANR	6529835	Identifier	it		6529713	0					
ANR	6529836	Identifier	data		6529713	1					
ANR	6529837	ReturnType	static xnu_thread_t *		6529713	1					
ANR	6529838	Identifier	get_xnu_thread		6529713	2					
ANR	6529839	ParameterList	"RDebug * dbg , int tid"		6529713	3					
ANR	6529840	Parameter	RDebug * dbg	88:36:2010:2020	6529713	0	True				
ANR	6529841	ParameterType	RDebug *		6529713	0					
ANR	6529842	Identifier	dbg		6529713	1					
ANR	6529843	Parameter	int tid	88:49:2023:2029	6529713	1	True				
ANR	6529844	ParameterType	int		6529713	0					
ANR	6529845	Identifier	tid		6529713	1					
ANR	6529846	CFGEntryNode	ENTRY		6529713		True				
ANR	6529847	CFGExitNode	EXIT		6529713		True				
ANR	6529848	Symbol	NULL		6529713						
ANR	6529849	Symbol	dbg		6529713						
ANR	6529850	Symbol	it		6529713						
ANR	6529851	Symbol	* dbg		6529713						
ANR	6529852	Symbol	dbg -> threads		6529713						
ANR	6529853	Symbol	tid		6529713						
ANR	6529854	Symbol	& thread_find		6529713						
ANR	6529855	Symbol	r_list_find		6529713						
ANR	6529856	Symbol	& tid		6529713						
ANR	6529857	Symbol	* it		6529713						
ANR	6529858	Symbol	xnu_update_thread_list		6529713						
ANR	6529859	Symbol	getcurthread		6529713						
ANR	6529860	Symbol	it -> data		6529713						
ANR	6529861	Function	task_for_pid_workaround	111:0:2603:3697							
ANR	6529862	FunctionDef	task_for_pid_workaround (int Pid)		6529861	0					
ANR	6529863	CompoundStatement		111:47:2650:3697	6529861	0					
ANR	6529864	IdentifierDeclStatement	host_t myhost = mach_host_self ( ) ;	112:1:2653:2685	6529861	0	True				
ANR	6529865	IdentifierDecl	myhost = mach_host_self ( )		6529861	0					
ANR	6529866	IdentifierDeclType	host_t		6529861	0					
ANR	6529867	Identifier	myhost		6529861	1					
ANR	6529868	AssignmentExpression	myhost = mach_host_self ( )		6529861	2		=			
ANR	6529869	Identifier	myhost		6529861	0					
ANR	6529870	CallExpression	mach_host_self ( )		6529861	1					
ANR	6529871	Callee	mach_host_self		6529861	0					
ANR	6529872	Identifier	mach_host_self		6529861	0					
ANR	6529873	ArgumentList			6529861	1					
ANR	6529874	IdentifierDeclStatement	mach_port_t psDefault = 0 ;	113:1:2688:2713	6529861	1	True				
ANR	6529875	IdentifierDecl	psDefault = 0		6529861	0					
ANR	6529876	IdentifierDeclType	mach_port_t		6529861	0					
ANR	6529877	Identifier	psDefault		6529861	1					
ANR	6529878	AssignmentExpression	psDefault = 0		6529861	2		=			
ANR	6529879	Identifier	psDefault		6529861	0					
ANR	6529880	PrimaryExpression	0		6529861	1					
ANR	6529881	IdentifierDeclStatement	mach_port_t psDefault_control = 0 ;	114:1:2716:2749	6529861	2	True				
ANR	6529882	IdentifierDecl	psDefault_control = 0		6529861	0					
ANR	6529883	IdentifierDeclType	mach_port_t		6529861	0					
ANR	6529884	Identifier	psDefault_control		6529861	1					
ANR	6529885	AssignmentExpression	psDefault_control = 0		6529861	2		=			
ANR	6529886	Identifier	psDefault_control		6529861	0					
ANR	6529887	PrimaryExpression	0		6529861	1					
ANR	6529888	IdentifierDeclStatement	task_array_t tasks = NULL ;	115:1:2752:2777	6529861	3	True				
ANR	6529889	IdentifierDecl	tasks = NULL		6529861	0					
ANR	6529890	IdentifierDeclType	task_array_t		6529861	0					
ANR	6529891	Identifier	tasks		6529861	1					
ANR	6529892	AssignmentExpression	tasks = NULL		6529861	2		=			
ANR	6529893	Identifier	NULL		6529861	0					
ANR	6529894	Identifier	NULL		6529861	1					
ANR	6529895	IdentifierDeclStatement	mach_msg_type_number_t numTasks = 0 ;	116:1:2780:2815	6529861	4	True				
ANR	6529896	IdentifierDecl	numTasks = 0		6529861	0					
ANR	6529897	IdentifierDeclType	mach_msg_type_number_t		6529861	0					
ANR	6529898	Identifier	numTasks		6529861	1					
ANR	6529899	AssignmentExpression	numTasks = 0		6529861	2		=			
ANR	6529900	Identifier	numTasks		6529861	0					
ANR	6529901	PrimaryExpression	0		6529861	1					
ANR	6529902	IdentifierDeclStatement	int i ;	117:1:2818:2823	6529861	5	True				
ANR	6529903	IdentifierDecl	i		6529861	0					
ANR	6529904	IdentifierDeclType	int		6529861	0					
ANR	6529905	Identifier	i		6529861	1					
ANR	6529906	IfStatement	if ( Pid == - 1 )		6529861	6					
ANR	6529907	Condition	Pid == - 1	118:5:2830:2838	6529861	0	True				
ANR	6529908	EqualityExpression	Pid == - 1		6529861	0		==			
ANR	6529909	Identifier	Pid		6529861	0					
ANR	6529910	UnaryOperationExpression	- 1		6529861	1					
ANR	6529911	UnaryOperator	-		6529861	0					
ANR	6529912	PrimaryExpression	1		6529861	1					
ANR	6529913	CompoundStatement		8:16:190:190	6529861	1					
ANR	6529914	ReturnStatement	return 0 ;	119:2:2845:2853	6529861	0	True				
ANR	6529915	PrimaryExpression	0		6529861	0					
ANR	6529916	IdentifierDeclStatement	"kern_return_t kr = processor_set_default ( myhost , & psDefault ) ;"	121:1:2859:2920	6529861	7	True				
ANR	6529917	IdentifierDecl	"kr = processor_set_default ( myhost , & psDefault )"		6529861	0					
ANR	6529918	IdentifierDeclType	kern_return_t		6529861	0					
ANR	6529919	Identifier	kr		6529861	1					
ANR	6529920	AssignmentExpression	"kr = processor_set_default ( myhost , & psDefault )"		6529861	2		=			
ANR	6529921	Identifier	kr		6529861	0					
ANR	6529922	CallExpression	"processor_set_default ( myhost , & psDefault )"		6529861	1					
ANR	6529923	Callee	processor_set_default		6529861	0					
ANR	6529924	Identifier	processor_set_default		6529861	0					
ANR	6529925	ArgumentList	myhost		6529861	1					
ANR	6529926	Argument	myhost		6529861	0					
ANR	6529927	Identifier	myhost		6529861	0					
ANR	6529928	Argument	& psDefault		6529861	1					
ANR	6529929	UnaryOperationExpression	& psDefault		6529861	0					
ANR	6529930	UnaryOperator	&		6529861	0					
ANR	6529931	Identifier	psDefault		6529861	1					
ANR	6529932	IfStatement	if ( kr != KERN_SUCCESS )		6529861	8					
ANR	6529933	Condition	kr != KERN_SUCCESS	122:5:2927:2944	6529861	0	True				
ANR	6529934	EqualityExpression	kr != KERN_SUCCESS		6529861	0		!=			
ANR	6529935	Identifier	kr		6529861	0					
ANR	6529936	Identifier	KERN_SUCCESS		6529861	1					
ANR	6529937	CompoundStatement		12:25:296:296	6529861	1					
ANR	6529938	ReturnStatement	return 0 ;	123:2:2951:2959	6529861	0	True				
ANR	6529939	PrimaryExpression	0		6529861	0					
ANR	6529940	ExpressionStatement	"kr = host_processor_set_priv ( myhost , psDefault , & psDefault_control )"	125:1:2965:3033	6529861	9	True				
ANR	6529941	AssignmentExpression	"kr = host_processor_set_priv ( myhost , psDefault , & psDefault_control )"		6529861	0		=			
ANR	6529942	Identifier	kr		6529861	0					
ANR	6529943	CallExpression	"host_processor_set_priv ( myhost , psDefault , & psDefault_control )"		6529861	1					
ANR	6529944	Callee	host_processor_set_priv		6529861	0					
ANR	6529945	Identifier	host_processor_set_priv		6529861	0					
ANR	6529946	ArgumentList	myhost		6529861	1					
ANR	6529947	Argument	myhost		6529861	0					
ANR	6529948	Identifier	myhost		6529861	0					
ANR	6529949	Argument	psDefault		6529861	1					
ANR	6529950	Identifier	psDefault		6529861	0					
ANR	6529951	Argument	& psDefault_control		6529861	2					
ANR	6529952	UnaryOperationExpression	& psDefault_control		6529861	0					
ANR	6529953	UnaryOperator	&		6529861	0					
ANR	6529954	Identifier	psDefault_control		6529861	1					
ANR	6529955	IfStatement	if ( kr != KERN_SUCCESS )		6529861	10					
ANR	6529956	Condition	kr != KERN_SUCCESS	126:5:3040:3057	6529861	0	True				
ANR	6529957	EqualityExpression	kr != KERN_SUCCESS		6529861	0		!=			
ANR	6529958	Identifier	kr		6529861	0					
ANR	6529959	Identifier	KERN_SUCCESS		6529861	1					
ANR	6529960	CompoundStatement		16:25:409:409	6529861	1					
ANR	6529961	ExpressionStatement	"eprintf ( ""host_processor_set_priv failed with error 0x%x\\n"" , kr )"	127:2:3064:3128	6529861	0	True				
ANR	6529962	CallExpression	"eprintf ( ""host_processor_set_priv failed with error 0x%x\\n"" , kr )"		6529861	0					
ANR	6529963	Callee	eprintf		6529861	0					
ANR	6529964	Identifier	eprintf		6529861	0					
ANR	6529965	ArgumentList	"""host_processor_set_priv failed with error 0x%x\\n"""		6529861	1					
ANR	6529966	Argument	"""host_processor_set_priv failed with error 0x%x\\n"""		6529861	0					
ANR	6529967	PrimaryExpression	"""host_processor_set_priv failed with error 0x%x\\n"""		6529861	0					
ANR	6529968	Argument	kr		6529861	1					
ANR	6529969	Identifier	kr		6529861	0					
ANR	6529970	ReturnStatement	return - 1 ;	129:2:3179:3188	6529861	1	True				
ANR	6529971	UnaryOperationExpression	- 1		6529861	0					
ANR	6529972	UnaryOperator	-		6529861	0					
ANR	6529973	PrimaryExpression	1		6529861	1					
ANR	6529974	ExpressionStatement	numTasks = 0	132:1:3195:3207	6529861	11	True				
ANR	6529975	AssignmentExpression	numTasks = 0		6529861	0		=			
ANR	6529976	Identifier	numTasks		6529861	0					
ANR	6529977	PrimaryExpression	0		6529861	1					
ANR	6529978	ExpressionStatement	"kr = processor_set_tasks ( psDefault_control , & tasks , & numTasks )"	133:1:3210:3273	6529861	12	True				
ANR	6529979	AssignmentExpression	"kr = processor_set_tasks ( psDefault_control , & tasks , & numTasks )"		6529861	0		=			
ANR	6529980	Identifier	kr		6529861	0					
ANR	6529981	CallExpression	"processor_set_tasks ( psDefault_control , & tasks , & numTasks )"		6529861	1					
ANR	6529982	Callee	processor_set_tasks		6529861	0					
ANR	6529983	Identifier	processor_set_tasks		6529861	0					
ANR	6529984	ArgumentList	psDefault_control		6529861	1					
ANR	6529985	Argument	psDefault_control		6529861	0					
ANR	6529986	Identifier	psDefault_control		6529861	0					
ANR	6529987	Argument	& tasks		6529861	1					
ANR	6529988	UnaryOperationExpression	& tasks		6529861	0					
ANR	6529989	UnaryOperator	&		6529861	0					
ANR	6529990	Identifier	tasks		6529861	1					
ANR	6529991	Argument	& numTasks		6529861	2					
ANR	6529992	UnaryOperationExpression	& numTasks		6529861	0					
ANR	6529993	UnaryOperator	&		6529861	0					
ANR	6529994	Identifier	numTasks		6529861	1					
ANR	6529995	IfStatement	if ( kr != KERN_SUCCESS )		6529861	13					
ANR	6529996	Condition	kr != KERN_SUCCESS	134:5:3280:3297	6529861	0	True				
ANR	6529997	EqualityExpression	kr != KERN_SUCCESS		6529861	0		!=			
ANR	6529998	Identifier	kr		6529861	0					
ANR	6529999	Identifier	KERN_SUCCESS		6529861	1					
ANR	6530000	CompoundStatement		24:25:649:649	6529861	1					
ANR	6530001	ExpressionStatement	"eprintf ( ""processor_set_tasks failed with error %x\\n"" , kr )"	135:2:3304:3362	6529861	0	True				
ANR	6530002	CallExpression	"eprintf ( ""processor_set_tasks failed with error %x\\n"" , kr )"		6529861	0					
ANR	6530003	Callee	eprintf		6529861	0					
ANR	6530004	Identifier	eprintf		6529861	0					
ANR	6530005	ArgumentList	"""processor_set_tasks failed with error %x\\n"""		6529861	1					
ANR	6530006	Argument	"""processor_set_tasks failed with error %x\\n"""		6529861	0					
ANR	6530007	PrimaryExpression	"""processor_set_tasks failed with error %x\\n"""		6529861	0					
ANR	6530008	Argument	kr		6529861	1					
ANR	6530009	Identifier	kr		6529861	0					
ANR	6530010	ReturnStatement	return - 1 ;	136:2:3366:3375	6529861	1	True				
ANR	6530011	UnaryOperationExpression	- 1		6529861	0					
ANR	6530012	UnaryOperator	-		6529861	0					
ANR	6530013	PrimaryExpression	1		6529861	1					
ANR	6530014	IdentifierDeclStatement	task_t task = - 1 ;	139:1:3400:3416	6529861	14	True				
ANR	6530015	IdentifierDecl	task = - 1		6529861	0					
ANR	6530016	IdentifierDeclType	task_t		6529861	0					
ANR	6530017	Identifier	task		6529861	1					
ANR	6530018	AssignmentExpression	task = - 1		6529861	2		=			
ANR	6530019	Identifier	task		6529861	0					
ANR	6530020	UnaryOperationExpression	- 1		6529861	1					
ANR	6530021	UnaryOperator	-		6529861	0					
ANR	6530022	PrimaryExpression	1		6529861	1					
ANR	6530023	IfStatement	if ( Pid == 0 )		6529861	15					
ANR	6530024	Condition	Pid == 0	140:5:3423:3430	6529861	0	True				
ANR	6530025	EqualityExpression	Pid == 0		6529861	0		==			
ANR	6530026	Identifier	Pid		6529861	0					
ANR	6530027	PrimaryExpression	0		6529861	1					
ANR	6530028	CompoundStatement		30:15:782:782	6529861	1					
ANR	6530029	ExpressionStatement	task = tasks [ 0 ]	141:2:3437:3452	6529861	0	True				
ANR	6530030	AssignmentExpression	task = tasks [ 0 ]		6529861	0		=			
ANR	6530031	Identifier	task		6529861	0					
ANR	6530032	ArrayIndexing	tasks [ 0 ]		6529861	1					
ANR	6530033	Identifier	tasks		6529861	0					
ANR	6530034	PrimaryExpression	0		6529861	1					
ANR	6530035	ElseStatement	else		6529861	0					
ANR	6530036	CompoundStatement		32:8:811:811	6529861	0					
ANR	6530037	ForStatement	for ( i = 0 ; i < numTasks ; i ++ )		6529861	0					
ANR	6530038	ForInit	i = 0 ;	143:7:3471:3476	6529861	0	True				
ANR	6530039	AssignmentExpression	i = 0		6529861	0		=			
ANR	6530040	Identifier	i		6529861	0					
ANR	6530041	PrimaryExpression	0		6529861	1					
ANR	6530042	Condition	i < numTasks	143:14:3478:3489	6529861	1	True				
ANR	6530043	RelationalExpression	i < numTasks		6529861	0		<			
ANR	6530044	Identifier	i		6529861	0					
ANR	6530045	Identifier	numTasks		6529861	1					
ANR	6530046	PostIncDecOperationExpression	i ++	143:28:3492:3494	6529861	2	True				
ANR	6530047	Identifier	i		6529861	0					
ANR	6530048	IncDec	++		6529861	1					
ANR	6530049	CompoundStatement		34:3:851:864	6529861	3					
ANR	6530050	IdentifierDeclStatement	pid_t pid = 0 ;	144:3:3502:3515	6529861	0	True				
ANR	6530051	IdentifierDecl	pid = 0		6529861	0					
ANR	6530052	IdentifierDeclType	pid_t		6529861	0					
ANR	6530053	Identifier	pid		6529861	1					
ANR	6530054	AssignmentExpression	pid = 0		6529861	2		=			
ANR	6530055	Identifier	pid		6529861	0					
ANR	6530056	PrimaryExpression	0		6529861	1					
ANR	6530057	ExpressionStatement	"pid_for_task ( i , & pid )"	145:3:3520:3542	6529861	1	True				
ANR	6530058	CallExpression	"pid_for_task ( i , & pid )"		6529861	0					
ANR	6530059	Callee	pid_for_task		6529861	0					
ANR	6530060	Identifier	pid_for_task		6529861	0					
ANR	6530061	ArgumentList	i		6529861	1					
ANR	6530062	Argument	i		6529861	0					
ANR	6530063	Identifier	i		6529861	0					
ANR	6530064	Argument	& pid		6529861	1					
ANR	6530065	UnaryOperationExpression	& pid		6529861	0					
ANR	6530066	UnaryOperator	&		6529861	0					
ANR	6530067	Identifier	pid		6529861	1					
ANR	6530068	IfStatement	if ( pid == Pid )		6529861	2					
ANR	6530069	Condition	pid == Pid	146:7:3551:3560	6529861	0	True				
ANR	6530070	EqualityExpression	pid == Pid		6529861	0		==			
ANR	6530071	Identifier	pid		6529861	0					
ANR	6530072	Identifier	Pid		6529861	1					
ANR	6530073	CompoundStatement		36:19:912:912	6529861	1					
ANR	6530074	ExpressionStatement	task = tasks [ i ]	147:4:3569:3584	6529861	0	True				
ANR	6530075	AssignmentExpression	task = tasks [ i ]		6529861	0		=			
ANR	6530076	Identifier	task		6529861	0					
ANR	6530077	ArrayIndexing	tasks [ i ]		6529861	1					
ANR	6530078	Identifier	tasks		6529861	0					
ANR	6530079	Identifier	i		6529861	1					
ANR	6530080	BreakStatement	break ;	148:4:3590:3595	6529861	1	True				
ANR	6530081	ExpressionStatement	"vm_deallocate ( myhost , ( vm_address_t ) tasks , numTasks * sizeof ( task_t ) )"	152:1:3610:3681	6529861	16	True				
ANR	6530082	CallExpression	"vm_deallocate ( myhost , ( vm_address_t ) tasks , numTasks * sizeof ( task_t ) )"		6529861	0					
ANR	6530083	Callee	vm_deallocate		6529861	0					
ANR	6530084	Identifier	vm_deallocate		6529861	0					
ANR	6530085	ArgumentList	myhost		6529861	1					
ANR	6530086	Argument	myhost		6529861	0					
ANR	6530087	Identifier	myhost		6529861	0					
ANR	6530088	Argument	( vm_address_t ) tasks		6529861	1					
ANR	6530089	CastExpression	( vm_address_t ) tasks		6529861	0					
ANR	6530090	CastTarget	vm_address_t		6529861	0					
ANR	6530091	Identifier	tasks		6529861	1					
ANR	6530092	Argument	numTasks * sizeof ( task_t )		6529861	2					
ANR	6530093	MultiplicativeExpression	numTasks * sizeof ( task_t )		6529861	0		*			
ANR	6530094	Identifier	numTasks		6529861	0					
ANR	6530095	SizeofExpression	sizeof ( task_t )		6529861	1					
ANR	6530096	Sizeof	sizeof		6529861	0					
ANR	6530097	SizeofOperand	task_t		6529861	1					
ANR	6530098	ReturnStatement	return task ;	153:1:3684:3695	6529861	17	True				
ANR	6530099	Identifier	task		6529861	0					
ANR	6530100	ReturnType	static task_t		6529861	1					
ANR	6530101	Identifier	task_for_pid_workaround		6529861	2					
ANR	6530102	ParameterList	int Pid		6529861	3					
ANR	6530103	Parameter	int Pid	111:38:2641:2647	6529861	0	True				
ANR	6530104	ParameterType	int		6529861	0					
ANR	6530105	Identifier	Pid		6529861	1					
ANR	6530106	CFGEntryNode	ENTRY		6529861		True				
ANR	6530107	CFGExitNode	EXIT		6529861		True				
ANR	6530108	Symbol	numTasks		6529861						
ANR	6530109	Symbol	& psDefault		6529861						
ANR	6530110	Symbol	NULL		6529861						
ANR	6530111	Symbol	kr		6529861						
ANR	6530112	Symbol	i		6529861						
ANR	6530113	Symbol	* tasks		6529861						
ANR	6530114	Symbol	Pid		6529861						
ANR	6530115	Symbol	pid		6529861						
ANR	6530116	Symbol	& tasks		6529861						
ANR	6530117	Symbol	myhost		6529861						
ANR	6530118	Symbol	mach_host_self		6529861						
ANR	6530119	Symbol	psDefault_control		6529861						
ANR	6530120	Symbol	host_processor_set_priv		6529861						
ANR	6530121	Symbol	task		6529861						
ANR	6530122	Symbol	* i		6529861						
ANR	6530123	Symbol	& psDefault_control		6529861						
ANR	6530124	Symbol	& pid		6529861						
ANR	6530125	Symbol	processor_set_tasks		6529861						
ANR	6530126	Symbol	processor_set_default		6529861						
ANR	6530127	Symbol	psDefault		6529861						
ANR	6530128	Symbol	KERN_SUCCESS		6529861						
ANR	6530129	Symbol	tasks		6529861						
ANR	6530130	Symbol	& numTasks		6529861						
ANR	6530131	Function	task_for_pid_ios9pangu	156:0:3700:3864							
ANR	6530132	FunctionDef	task_for_pid_ios9pangu (int pid)		6530131	0					
ANR	6530133	CompoundStatement		156:46:3746:3864	6530131	0					
ANR	6530134	IdentifierDeclStatement	task_t task = MACH_PORT_NULL ;	157:1:3749:3777	6530131	0	True				
ANR	6530135	IdentifierDecl	task = MACH_PORT_NULL		6530131	0					
ANR	6530136	IdentifierDeclType	task_t		6530131	0					
ANR	6530137	Identifier	task		6530131	1					
ANR	6530138	AssignmentExpression	task = MACH_PORT_NULL		6530131	2		=			
ANR	6530139	Identifier	MACH_PORT_NULL		6530131	0					
ANR	6530140	Identifier	MACH_PORT_NULL		6530131	1					
ANR	6530141	ExpressionStatement	"host_get_special_port ( mach_host_self ( ) , HOST_LOCAL_NODE , 4 , & task )"	158:1:3780:3848	6530131	1	True				
ANR	6530142	CallExpression	"host_get_special_port ( mach_host_self ( ) , HOST_LOCAL_NODE , 4 , & task )"		6530131	0					
ANR	6530143	Callee	host_get_special_port		6530131	0					
ANR	6530144	Identifier	host_get_special_port		6530131	0					
ANR	6530145	ArgumentList	mach_host_self ( )		6530131	1					
ANR	6530146	Argument	mach_host_self ( )		6530131	0					
ANR	6530147	CallExpression	mach_host_self ( )		6530131	0					
ANR	6530148	Callee	mach_host_self		6530131	0					
ANR	6530149	Identifier	mach_host_self		6530131	0					
ANR	6530150	ArgumentList			6530131	1					
ANR	6530151	Argument	HOST_LOCAL_NODE		6530131	1					
ANR	6530152	Identifier	HOST_LOCAL_NODE		6530131	0					
ANR	6530153	Argument	4		6530131	2					
ANR	6530154	PrimaryExpression	4		6530131	0					
ANR	6530155	Argument	& task		6530131	3					
ANR	6530156	UnaryOperationExpression	& task		6530131	0					
ANR	6530157	UnaryOperator	&		6530131	0					
ANR	6530158	Identifier	task		6530131	1					
ANR	6530159	ReturnStatement	return task ;	159:1:3851:3862	6530131	2	True				
ANR	6530160	Identifier	task		6530131	0					
ANR	6530161	ReturnType	static task_t		6530131	1					
ANR	6530162	Identifier	task_for_pid_ios9pangu		6530131	2					
ANR	6530163	ParameterList	int pid		6530131	3					
ANR	6530164	Parameter	int pid	156:37:3737:3743	6530131	0	True				
ANR	6530165	ParameterType	int		6530131	0					
ANR	6530166	Identifier	pid		6530131	1					
ANR	6530167	CFGEntryNode	ENTRY		6530131		True				
ANR	6530168	CFGExitNode	EXIT		6530131		True				
ANR	6530169	Symbol	mach_host_self		6530131						
ANR	6530170	Symbol	task		6530131						
ANR	6530171	Symbol	HOST_LOCAL_NODE		6530131						
ANR	6530172	Symbol	pid		6530131						
ANR	6530173	Symbol	& task		6530131						
ANR	6530174	Symbol	MACH_PORT_NULL		6530131						
ANR	6530175	Function	xnu_wait	162:0:3867:3999							
ANR	6530176	FunctionDef	"xnu_wait (RDebug * dbg , int pid)"		6530175	0					
ANR	6530177	CompoundStatement		162:35:3902:3999	6530175	0					
ANR	6530178	ReturnStatement	return R_DEBUG_REASON_UNKNOWN ;	164:1:3924:3953	6530175	0	True				
ANR	6530179	Identifier	R_DEBUG_REASON_UNKNOWN		6530175	0					
ANR	6530180	ReturnType	int		6530175	1					
ANR	6530181	Identifier	xnu_wait		6530175	2					
ANR	6530182	ParameterList	"RDebug * dbg , int pid"		6530175	3					
ANR	6530183	Parameter	RDebug * dbg	162:13:3880:3890	6530175	0	True				
ANR	6530184	ParameterType	RDebug *		6530175	0					
ANR	6530185	Identifier	dbg		6530175	1					
ANR	6530186	Parameter	int pid	162:26:3893:3899	6530175	1	True				
ANR	6530187	ParameterType	int		6530175	0					
ANR	6530188	Identifier	pid		6530175	1					
ANR	6530189	CFGEntryNode	ENTRY		6530175		True				
ANR	6530190	CFGExitNode	EXIT		6530175		True				
ANR	6530191	Symbol	dbg		6530175						
ANR	6530192	Symbol	pid		6530175						
ANR	6530193	Symbol	R_DEBUG_REASON_UNKNOWN		6530175						
ANR	6530194	Function	xnu_step	170:0:4002:4743							
ANR	6530195	FunctionDef	xnu_step (RDebug * dbg)		6530194	0					
ANR	6530196	CompoundStatement		170:27:4029:4743	6530194	0					
ANR	6530197	IdentifierDeclStatement	"int ret = r_debug_ptrace ( dbg , PT_STEP , dbg -> pid , ( caddr_t ) 1 , 0 ) == 0 ;"	172:1:4051:4120	6530194	0	True				
ANR	6530198	IdentifierDecl	"ret = r_debug_ptrace ( dbg , PT_STEP , dbg -> pid , ( caddr_t ) 1 , 0 ) == 0"		6530194	0					
ANR	6530199	IdentifierDeclType	int		6530194	0					
ANR	6530200	Identifier	ret		6530194	1					
ANR	6530201	AssignmentExpression	"ret = r_debug_ptrace ( dbg , PT_STEP , dbg -> pid , ( caddr_t ) 1 , 0 ) == 0"		6530194	2		=			
ANR	6530202	Identifier	ret		6530194	0					
ANR	6530203	EqualityExpression	"r_debug_ptrace ( dbg , PT_STEP , dbg -> pid , ( caddr_t ) 1 , 0 ) == 0"		6530194	1		==			
ANR	6530204	CallExpression	"r_debug_ptrace ( dbg , PT_STEP , dbg -> pid , ( caddr_t ) 1 , 0 )"		6530194	0					
ANR	6530205	Callee	r_debug_ptrace		6530194	0					
ANR	6530206	Identifier	r_debug_ptrace		6530194	0					
ANR	6530207	ArgumentList	dbg		6530194	1					
ANR	6530208	Argument	dbg		6530194	0					
ANR	6530209	Identifier	dbg		6530194	0					
ANR	6530210	Argument	PT_STEP		6530194	1					
ANR	6530211	Identifier	PT_STEP		6530194	0					
ANR	6530212	Argument	dbg -> pid		6530194	2					
ANR	6530213	PtrMemberAccess	dbg -> pid		6530194	0					
ANR	6530214	Identifier	dbg		6530194	0					
ANR	6530215	Identifier	pid		6530194	1					
ANR	6530216	Argument	( caddr_t ) 1		6530194	3					
ANR	6530217	CastExpression	( caddr_t ) 1		6530194	0					
ANR	6530218	CastTarget	caddr_t		6530194	0					
ANR	6530219	PrimaryExpression	1		6530194	1					
ANR	6530220	Argument	0		6530194	4					
ANR	6530221	PrimaryExpression	0		6530194	0					
ANR	6530222	PrimaryExpression	0		6530194	1					
ANR	6530223	IfStatement	if ( ! ret )		6530194	1					
ANR	6530224	Condition	! ret	173:5:4136:4139	6530194	0	True				
ANR	6530225	UnaryOperationExpression	! ret		6530194	0					
ANR	6530226	UnaryOperator	!		6530194	0					
ANR	6530227	Identifier	ret		6530194	1					
ANR	6530228	CompoundStatement		4:11:112:112	6530194	1					
ANR	6530229	ExpressionStatement	"perror ( ""ptrace-step"" )"	174:2:4146:4168	6530194	0	True				
ANR	6530230	CallExpression	"perror ( ""ptrace-step"" )"		6530194	0					
ANR	6530231	Callee	perror		6530194	0					
ANR	6530232	Identifier	perror		6530194	0					
ANR	6530233	ArgumentList	"""ptrace-step"""		6530194	1					
ANR	6530234	Argument	"""ptrace-step"""		6530194	0					
ANR	6530235	PrimaryExpression	"""ptrace-step"""		6530194	0					
ANR	6530236	ExpressionStatement	"eprintf ( ""mach-error: %d, %s\\n"" , ret , MACH_ERROR_STRING ( ret ) )"	175:2:4172:4234	6530194	1	True				
ANR	6530237	CallExpression	"eprintf ( ""mach-error: %d, %s\\n"" , ret , MACH_ERROR_STRING ( ret ) )"		6530194	0					
ANR	6530238	Callee	eprintf		6530194	0					
ANR	6530239	Identifier	eprintf		6530194	0					
ANR	6530240	ArgumentList	"""mach-error: %d, %s\\n"""		6530194	1					
ANR	6530241	Argument	"""mach-error: %d, %s\\n"""		6530194	0					
ANR	6530242	PrimaryExpression	"""mach-error: %d, %s\\n"""		6530194	0					
ANR	6530243	Argument	ret		6530194	1					
ANR	6530244	Identifier	ret		6530194	0					
ANR	6530245	Argument	MACH_ERROR_STRING ( ret )		6530194	2					
ANR	6530246	CallExpression	MACH_ERROR_STRING ( ret )		6530194	0					
ANR	6530247	Callee	MACH_ERROR_STRING		6530194	0					
ANR	6530248	Identifier	MACH_ERROR_STRING		6530194	0					
ANR	6530249	ArgumentList	ret		6530194	1					
ANR	6530250	Argument	ret		6530194	0					
ANR	6530251	Identifier	ret		6530194	0					
ANR	6530252	ReturnStatement	return ret ;	177:1:4240:4250	6530194	2	True				
ANR	6530253	Identifier	ret		6530194	0					
ANR	6530254	ReturnType	bool		6530194	1					
ANR	6530255	Identifier	xnu_step		6530194	2					
ANR	6530256	ParameterList	RDebug * dbg		6530194	3					
ANR	6530257	Parameter	RDebug * dbg	170:14:4016:4026	6530194	0	True				
ANR	6530258	ParameterType	RDebug *		6530194	0					
ANR	6530259	Identifier	dbg		6530194	1					
ANR	6530260	CFGEntryNode	ENTRY		6530194		True				
ANR	6530261	CFGExitNode	EXIT		6530194		True				
ANR	6530262	Symbol	ret		6530194						
ANR	6530263	Symbol	MACH_ERROR_STRING		6530194						
ANR	6530264	Symbol	dbg -> pid		6530194						
ANR	6530265	Symbol	dbg		6530194						
ANR	6530266	Symbol	r_debug_ptrace		6530194						
ANR	6530267	Symbol	PT_STEP		6530194						
ANR	6530268	Symbol	* dbg		6530194						
ANR	6530269	Function	xnu_attach	200:0:4746:5194							
ANR	6530270	FunctionDef	"xnu_attach (RDebug * dbg , int pid)"		6530269	0					
ANR	6530271	CompoundStatement		200:37:4783:5194	6530269	0					
ANR	6530272	IfStatement	"if ( r_debug_ptrace ( dbg , PT_ATTACHEXC , pid , 0 , 0 ) == - 1 )"		6530269	0					
ANR	6530273	Condition	"r_debug_ptrace ( dbg , PT_ATTACHEXC , pid , 0 , 0 ) == - 1"	203:5:4828:4878	6530269	0	True				
ANR	6530274	EqualityExpression	"r_debug_ptrace ( dbg , PT_ATTACHEXC , pid , 0 , 0 ) == - 1"		6530269	0		==			
ANR	6530275	CallExpression	"r_debug_ptrace ( dbg , PT_ATTACHEXC , pid , 0 , 0 )"		6530269	0					
ANR	6530276	Callee	r_debug_ptrace		6530269	0					
ANR	6530277	Identifier	r_debug_ptrace		6530269	0					
ANR	6530278	ArgumentList	dbg		6530269	1					
ANR	6530279	Argument	dbg		6530269	0					
ANR	6530280	Identifier	dbg		6530269	0					
ANR	6530281	Argument	PT_ATTACHEXC		6530269	1					
ANR	6530282	Identifier	PT_ATTACHEXC		6530269	0					
ANR	6530283	Argument	pid		6530269	2					
ANR	6530284	Identifier	pid		6530269	0					
ANR	6530285	Argument	0		6530269	3					
ANR	6530286	PrimaryExpression	0		6530269	0					
ANR	6530287	Argument	0		6530269	4					
ANR	6530288	PrimaryExpression	0		6530269	0					
ANR	6530289	UnaryOperationExpression	- 1		6530269	1					
ANR	6530290	UnaryOperator	-		6530269	0					
ANR	6530291	PrimaryExpression	1		6530269	1					
ANR	6530292	CompoundStatement		4:58:97:97	6530269	1					
ANR	6530293	ExpressionStatement	"perror ( ""ptrace (PT_ATTACH)"" )"	207:2:4959:4988	6530269	0	True				
ANR	6530294	CallExpression	"perror ( ""ptrace (PT_ATTACH)"" )"		6530269	0					
ANR	6530295	Callee	perror		6530269	0					
ANR	6530296	Identifier	perror		6530269	0					
ANR	6530297	ArgumentList	"""ptrace (PT_ATTACH)"""		6530269	1					
ANR	6530298	Argument	"""ptrace (PT_ATTACH)"""		6530269	0					
ANR	6530299	PrimaryExpression	"""ptrace (PT_ATTACH)"""		6530269	0					
ANR	6530300	ReturnStatement	return - 1 ;	208:2:4992:5001	6530269	1	True				
ANR	6530301	UnaryOperationExpression	- 1		6530269	0					
ANR	6530302	UnaryOperator	-		6530269	0					
ANR	6530303	PrimaryExpression	1		6530269	1					
ANR	6530304	ReturnStatement	return pid ;	210:1:5007:5017	6530269	1	True				
ANR	6530305	Identifier	pid		6530269	0					
ANR	6530306	ReturnType	int		6530269	1					
ANR	6530307	Identifier	xnu_attach		6530269	2					
ANR	6530308	ParameterList	"RDebug * dbg , int pid"		6530269	3					
ANR	6530309	Parameter	RDebug * dbg	200:15:4761:4771	6530269	0	True				
ANR	6530310	ParameterType	RDebug *		6530269	0					
ANR	6530311	Identifier	dbg		6530269	1					
ANR	6530312	Parameter	int pid	200:28:4774:4780	6530269	1	True				
ANR	6530313	ParameterType	int		6530269	0					
ANR	6530314	Identifier	pid		6530269	1					
ANR	6530315	CFGEntryNode	ENTRY		6530269		True				
ANR	6530316	CFGExitNode	EXIT		6530269		True				
ANR	6530317	Symbol	dbg		6530269						
ANR	6530318	Symbol	r_debug_ptrace		6530269						
ANR	6530319	Symbol	pid		6530269						
ANR	6530320	Symbol	PT_ATTACHEXC		6530269						
ANR	6530321	Function	xnu_detach	222:0:5197:5763							
ANR	6530322	FunctionDef	"xnu_detach (RDebug * dbg , int pid)"		6530321	0					
ANR	6530323	CompoundStatement		222:37:5234:5763	6530321	0					
ANR	6530324	ReturnStatement	"return r_debug_ptrace ( dbg , PT_DETACH , pid , NULL , 0 ) ;"	224:1:5256:5308	6530321	0	True				
ANR	6530325	CallExpression	"r_debug_ptrace ( dbg , PT_DETACH , pid , NULL , 0 )"		6530321	0					
ANR	6530326	Callee	r_debug_ptrace		6530321	0					
ANR	6530327	Identifier	r_debug_ptrace		6530321	0					
ANR	6530328	ArgumentList	dbg		6530321	1					
ANR	6530329	Argument	dbg		6530321	0					
ANR	6530330	Identifier	dbg		6530321	0					
ANR	6530331	Argument	PT_DETACH		6530321	1					
ANR	6530332	Identifier	PT_DETACH		6530321	0					
ANR	6530333	Argument	pid		6530321	2					
ANR	6530334	Identifier	pid		6530321	0					
ANR	6530335	Argument	NULL		6530321	3					
ANR	6530336	Identifier	NULL		6530321	0					
ANR	6530337	Argument	0		6530321	4					
ANR	6530338	PrimaryExpression	0		6530321	0					
ANR	6530339	ReturnType	int		6530321	1					
ANR	6530340	Identifier	xnu_detach		6530321	2					
ANR	6530341	ParameterList	"RDebug * dbg , int pid"		6530321	3					
ANR	6530342	Parameter	RDebug * dbg	222:15:5212:5222	6530321	0	True				
ANR	6530343	ParameterType	RDebug *		6530321	0					
ANR	6530344	Identifier	dbg		6530321	1					
ANR	6530345	Parameter	int pid	222:28:5225:5231	6530321	1	True				
ANR	6530346	ParameterType	int		6530321	0					
ANR	6530347	Identifier	pid		6530321	1					
ANR	6530348	CFGEntryNode	ENTRY		6530321		True				
ANR	6530349	CFGExitNode	EXIT		6530321		True				
ANR	6530350	Symbol	NULL		6530321						
ANR	6530351	Symbol	dbg		6530321						
ANR	6530352	Symbol	r_debug_ptrace		6530321						
ANR	6530353	Symbol	pid		6530321						
ANR	6530354	Symbol	PT_DETACH		6530321						
ANR	6530355	Function	task_suspend_count	243:0:5766:6097							
ANR	6530356	FunctionDef	task_suspend_count (task_t task)		6530355	0					
ANR	6530357	CompoundStatement		243:43:5809:6097	6530355	0					
ANR	6530358	IdentifierDeclStatement	kern_return_t kr ;	244:1:5812:5828	6530355	0	True				
ANR	6530359	IdentifierDecl	kr		6530355	0					
ANR	6530360	IdentifierDeclType	kern_return_t		6530355	0					
ANR	6530361	Identifier	kr		6530355	1					
ANR	6530362	IdentifierDeclStatement	struct task_basic_info info ;	245:1:5831:5858	6530355	1	True				
ANR	6530363	IdentifierDecl	info		6530355	0					
ANR	6530364	IdentifierDeclType	struct task_basic_info		6530355	0					
ANR	6530365	Identifier	info		6530355	1					
ANR	6530366	IdentifierDeclStatement	mach_msg_type_number_t count = TASK_BASIC_INFO_COUNT ;	246:1:5861:5913	6530355	2	True				
ANR	6530367	IdentifierDecl	count = TASK_BASIC_INFO_COUNT		6530355	0					
ANR	6530368	IdentifierDeclType	mach_msg_type_number_t		6530355	0					
ANR	6530369	Identifier	count		6530355	1					
ANR	6530370	AssignmentExpression	count = TASK_BASIC_INFO_COUNT		6530355	2		=			
ANR	6530371	Identifier	TASK_BASIC_INFO_COUNT		6530355	0					
ANR	6530372	Identifier	TASK_BASIC_INFO_COUNT		6530355	1					
ANR	6530373	ExpressionStatement	"kr = task_info ( task , TASK_BASIC_INFO , ( task_info_t ) & info , & count )"	247:1:5916:5983	6530355	3	True				
ANR	6530374	AssignmentExpression	"kr = task_info ( task , TASK_BASIC_INFO , ( task_info_t ) & info , & count )"		6530355	0		=			
ANR	6530375	Identifier	kr		6530355	0					
ANR	6530376	CallExpression	"task_info ( task , TASK_BASIC_INFO , ( task_info_t ) & info , & count )"		6530355	1					
ANR	6530377	Callee	task_info		6530355	0					
ANR	6530378	Identifier	task_info		6530355	0					
ANR	6530379	ArgumentList	task		6530355	1					
ANR	6530380	Argument	task		6530355	0					
ANR	6530381	Identifier	task		6530355	0					
ANR	6530382	Argument	TASK_BASIC_INFO		6530355	1					
ANR	6530383	Identifier	TASK_BASIC_INFO		6530355	0					
ANR	6530384	Argument	( task_info_t ) & info		6530355	2					
ANR	6530385	CastExpression	( task_info_t ) & info		6530355	0					
ANR	6530386	CastTarget	task_info_t		6530355	0					
ANR	6530387	UnaryOperationExpression	& info		6530355	1					
ANR	6530388	UnaryOperator	&		6530355	0					
ANR	6530389	Identifier	info		6530355	1					
ANR	6530390	Argument	& count		6530355	3					
ANR	6530391	UnaryOperationExpression	& count		6530355	0					
ANR	6530392	UnaryOperator	&		6530355	0					
ANR	6530393	Identifier	count		6530355	1					
ANR	6530394	IfStatement	if ( kr != KERN_SUCCESS )		6530355	4					
ANR	6530395	Condition	kr != KERN_SUCCESS	248:5:5990:6007	6530355	0	True				
ANR	6530396	EqualityExpression	kr != KERN_SUCCESS		6530355	0		!=			
ANR	6530397	Identifier	kr		6530355	0					
ANR	6530398	Identifier	KERN_SUCCESS		6530355	1					
ANR	6530399	CompoundStatement		6:25:200:200	6530355	1					
ANR	6530400	ExpressionStatement	"eprintf ( ""failed to get task info\\n"" )"	249:2:6014:6051	6530355	0	True				
ANR	6530401	CallExpression	"eprintf ( ""failed to get task info\\n"" )"		6530355	0					
ANR	6530402	Callee	eprintf		6530355	0					
ANR	6530403	Identifier	eprintf		6530355	0					
ANR	6530404	ArgumentList	"""failed to get task info\\n"""		6530355	1					
ANR	6530405	Argument	"""failed to get task info\\n"""		6530355	0					
ANR	6530406	PrimaryExpression	"""failed to get task info\\n"""		6530355	0					
ANR	6530407	ReturnStatement	return - 1 ;	250:2:6055:6064	6530355	1	True				
ANR	6530408	UnaryOperationExpression	- 1		6530355	0					
ANR	6530409	UnaryOperator	-		6530355	0					
ANR	6530410	PrimaryExpression	1		6530355	1					
ANR	6530411	ReturnStatement	return info . suspend_count ;	252:1:6070:6095	6530355	5	True				
ANR	6530412	MemberAccess	info . suspend_count		6530355	0					
ANR	6530413	Identifier	info		6530355	0					
ANR	6530414	Identifier	suspend_count		6530355	1					
ANR	6530415	ReturnType	static int		6530355	1					
ANR	6530416	Identifier	task_suspend_count		6530355	2					
ANR	6530417	ParameterList	task_t task		6530355	3					
ANR	6530418	Parameter	task_t task	243:30:5796:5806	6530355	0	True				
ANR	6530419	ParameterType	task_t		6530355	0					
ANR	6530420	Identifier	task		6530355	1					
ANR	6530421	CFGEntryNode	ENTRY		6530355		True				
ANR	6530422	CFGExitNode	EXIT		6530355		True				
ANR	6530423	Symbol	task		6530355						
ANR	6530424	Symbol	TASK_BASIC_INFO_COUNT		6530355						
ANR	6530425	Symbol	TASK_BASIC_INFO		6530355						
ANR	6530426	Symbol	& info		6530355						
ANR	6530427	Symbol	info . suspend_count		6530355						
ANR	6530428	Symbol	kr		6530355						
ANR	6530429	Symbol	count		6530355						
ANR	6530430	Symbol	& count		6530355						
ANR	6530431	Symbol	KERN_SUCCESS		6530355						
ANR	6530432	Symbol	task_info		6530355						
ANR	6530433	Symbol	info		6530355						
ANR	6530434	Function	xnu_stop	255:0:6100:6796							
ANR	6530435	FunctionDef	"xnu_stop (RDebug * dbg , int pid)"		6530434	0					
ANR	6530436	CompoundStatement		255:35:6135:6796	6530434	0					
ANR	6530437	ExpressionStatement	"eprintf ( ""xnu_stop: not implemented\\n"" )"	257:1:6157:6196	6530434	0	True				
ANR	6530438	CallExpression	"eprintf ( ""xnu_stop: not implemented\\n"" )"		6530434	0					
ANR	6530439	Callee	eprintf		6530434	0					
ANR	6530440	Identifier	eprintf		6530434	0					
ANR	6530441	ArgumentList	"""xnu_stop: not implemented\\n"""		6530434	1					
ANR	6530442	Argument	"""xnu_stop: not implemented\\n"""		6530434	0					
ANR	6530443	PrimaryExpression	"""xnu_stop: not implemented\\n"""		6530434	0					
ANR	6530444	ReturnStatement	return false ;	258:1:6199:6211	6530434	1	True				
ANR	6530445	Identifier	false		6530434	0					
ANR	6530446	ReturnType	int		6530434	1					
ANR	6530447	Identifier	xnu_stop		6530434	2					
ANR	6530448	ParameterList	"RDebug * dbg , int pid"		6530434	3					
ANR	6530449	Parameter	RDebug * dbg	255:13:6113:6123	6530434	0	True				
ANR	6530450	ParameterType	RDebug *		6530434	0					
ANR	6530451	Identifier	dbg		6530434	1					
ANR	6530452	Parameter	int pid	255:26:6126:6132	6530434	1	True				
ANR	6530453	ParameterType	int		6530434	0					
ANR	6530454	Identifier	pid		6530434	1					
ANR	6530455	CFGEntryNode	ENTRY		6530434		True				
ANR	6530456	CFGExitNode	EXIT		6530434		True				
ANR	6530457	Symbol	dbg		6530434						
ANR	6530458	Symbol	false		6530434						
ANR	6530459	Symbol	pid		6530434						
ANR	6530460	Function	xnu_continue	293:0:6799:7651							
ANR	6530461	FunctionDef	"xnu_continue (RDebug * dbg , int pid , int tid , int sig)"		6530460	0					
ANR	6530462	CompoundStatement		293:57:6856:7651	6530460	0					
ANR	6530463	IdentifierDeclStatement	void * data = ( void * ) ( size_t ) ( ( sig != - 1 ) ? sig : dbg -> reason . signum ) ;	295:1:6878:6946	6530460	0	True				
ANR	6530464	IdentifierDecl	* data = ( void * ) ( size_t ) ( ( sig != - 1 ) ? sig : dbg -> reason . signum )		6530460	0					
ANR	6530465	IdentifierDeclType	void *		6530460	0					
ANR	6530466	Identifier	data		6530460	1					
ANR	6530467	AssignmentExpression	* data = ( void * ) ( size_t ) ( ( sig != - 1 ) ? sig : dbg -> reason . signum )		6530460	2		=			
ANR	6530468	Identifier	data		6530460	0					
ANR	6530469	CastExpression	( void * ) ( size_t ) ( ( sig != - 1 ) ? sig : dbg -> reason . signum )		6530460	1					
ANR	6530470	CastTarget	void *		6530460	0					
ANR	6530471	CastExpression	( size_t ) ( ( sig != - 1 ) ? sig : dbg -> reason . signum )		6530460	1					
ANR	6530472	CastTarget	size_t		6530460	0					
ANR	6530473	ConditionalExpression	( sig != - 1 ) ? sig : dbg -> reason . signum		6530460	1					
ANR	6530474	Condition	sig != - 1		6530460	0					
ANR	6530475	EqualityExpression	sig != - 1		6530460	0		!=			
ANR	6530476	Identifier	sig		6530460	0					
ANR	6530477	UnaryOperationExpression	- 1		6530460	1					
ANR	6530478	UnaryOperator	-		6530460	0					
ANR	6530479	PrimaryExpression	1		6530460	1					
ANR	6530480	Identifier	sig		6530460	1					
ANR	6530481	MemberAccess	dbg -> reason . signum		6530460	2					
ANR	6530482	PtrMemberAccess	dbg -> reason		6530460	0					
ANR	6530483	Identifier	dbg		6530460	0					
ANR	6530484	Identifier	reason		6530460	1					
ANR	6530485	Identifier	signum		6530460	1					
ANR	6530486	ExpressionStatement	task_resume ( pid_to_task ( pid ) )	296:1:6949:6980	6530460	1	True				
ANR	6530487	CallExpression	task_resume ( pid_to_task ( pid ) )		6530460	0					
ANR	6530488	Callee	task_resume		6530460	0					
ANR	6530489	Identifier	task_resume		6530460	0					
ANR	6530490	ArgumentList	pid_to_task ( pid )		6530460	1					
ANR	6530491	Argument	pid_to_task ( pid )		6530460	0					
ANR	6530492	CallExpression	pid_to_task ( pid )		6530460	0					
ANR	6530493	Callee	pid_to_task		6530460	0					
ANR	6530494	Identifier	pid_to_task		6530460	0					
ANR	6530495	ArgumentList	pid		6530460	1					
ANR	6530496	Argument	pid		6530460	0					
ANR	6530497	Identifier	pid		6530460	0					
ANR	6530498	ReturnStatement	"return r_debug_ptrace ( dbg , PT_CONTINUE , pid , ( void * ) ( size_t ) 1 , ( int ) ( size_t ) data ) == 0 ;"	297:1:6983:7073	6530460	2	True				
ANR	6530499	EqualityExpression	"r_debug_ptrace ( dbg , PT_CONTINUE , pid , ( void * ) ( size_t ) 1 , ( int ) ( size_t ) data ) == 0"		6530460	0		==			
ANR	6530500	CallExpression	"r_debug_ptrace ( dbg , PT_CONTINUE , pid , ( void * ) ( size_t ) 1 , ( int ) ( size_t ) data )"		6530460	0					
ANR	6530501	Callee	r_debug_ptrace		6530460	0					
ANR	6530502	Identifier	r_debug_ptrace		6530460	0					
ANR	6530503	ArgumentList	dbg		6530460	1					
ANR	6530504	Argument	dbg		6530460	0					
ANR	6530505	Identifier	dbg		6530460	0					
ANR	6530506	Argument	PT_CONTINUE		6530460	1					
ANR	6530507	Identifier	PT_CONTINUE		6530460	0					
ANR	6530508	Argument	pid		6530460	2					
ANR	6530509	Identifier	pid		6530460	0					
ANR	6530510	Argument	( void * ) ( size_t ) 1		6530460	3					
ANR	6530511	CastExpression	( void * ) ( size_t ) 1		6530460	0					
ANR	6530512	CastTarget	void *		6530460	0					
ANR	6530513	CastExpression	( size_t ) 1		6530460	1					
ANR	6530514	CastTarget	size_t		6530460	0					
ANR	6530515	PrimaryExpression	1		6530460	1					
ANR	6530516	Argument	( int ) ( size_t ) data		6530460	4					
ANR	6530517	CastExpression	( int ) ( size_t ) data		6530460	0					
ANR	6530518	CastTarget	int		6530460	0					
ANR	6530519	CastExpression	( size_t ) data		6530460	1					
ANR	6530520	CastTarget	size_t		6530460	0					
ANR	6530521	Identifier	data		6530460	1					
ANR	6530522	PrimaryExpression	0		6530460	1					
ANR	6530523	ReturnType	int		6530460	1					
ANR	6530524	Identifier	xnu_continue		6530460	2					
ANR	6530525	ParameterList	"RDebug * dbg , int pid , int tid , int sig"		6530460	3					
ANR	6530526	Parameter	RDebug * dbg	293:17:6816:6826	6530460	0	True				
ANR	6530527	ParameterType	RDebug *		6530460	0					
ANR	6530528	Identifier	dbg		6530460	1					
ANR	6530529	Parameter	int pid	293:30:6829:6835	6530460	1	True				
ANR	6530530	ParameterType	int		6530460	0					
ANR	6530531	Identifier	pid		6530460	1					
ANR	6530532	Parameter	int tid	293:39:6838:6844	6530460	2	True				
ANR	6530533	ParameterType	int		6530460	0					
ANR	6530534	Identifier	tid		6530460	1					
ANR	6530535	Parameter	int sig	293:48:6847:6853	6530460	3	True				
ANR	6530536	ParameterType	int		6530460	0					
ANR	6530537	Identifier	sig		6530460	1					
ANR	6530538	CFGEntryNode	ENTRY		6530460		True				
ANR	6530539	CFGExitNode	EXIT		6530460		True				
ANR	6530540	Symbol	sig		6530460						
ANR	6530541	Symbol	dbg -> reason . signum		6530460						
ANR	6530542	Symbol	dbg -> reason		6530460						
ANR	6530543	Symbol	pid_to_task		6530460						
ANR	6530544	Symbol	data		6530460						
ANR	6530545	Symbol	dbg		6530460						
ANR	6530546	Symbol	r_debug_ptrace		6530460						
ANR	6530547	Symbol	pid		6530460						
ANR	6530548	Symbol	* dbg		6530460						
ANR	6530549	Symbol	tid		6530460						
ANR	6530550	Symbol	PT_CONTINUE		6530460						
ANR	6530551	Function	xnu_reg_profile	325:0:7654:8183							
ANR	6530552	FunctionDef	xnu_reg_profile (RDebug * dbg)		6530551	0					
ANR	6530553	CompoundStatement		325:35:7689:8183	6530551	0					
ANR	6530554	IfStatement	if ( dbg -> bits & R_SYS_BITS_32 )		6530551	0					
ANR	6530555	Condition	dbg -> bits & R_SYS_BITS_32	327:5:7723:7747	6530551	0	True				
ANR	6530556	BitAndExpression	dbg -> bits & R_SYS_BITS_32		6530551	0		&			
ANR	6530557	PtrMemberAccess	dbg -> bits		6530551	0					
ANR	6530558	Identifier	dbg		6530551	0					
ANR	6530559	Identifier	bits		6530551	1					
ANR	6530560	Identifier	R_SYS_BITS_32		6530551	1					
ANR	6530561	CompoundStatement		3:32:60:60	6530551	1					
ANR	6530562	Statement	include	328:3:7755:7761	6530551	0	True				
ANR	6530563	Statement	"""reg/darwin-x86.h"""	328:11:7763:7780	6530551	1	True				
ANR	6530564	ElseStatement	else		6530551	0					
ANR	6530565	IfStatement	if ( dbg -> bits == R_SYS_BITS_64 )		6530551	0					
ANR	6530566	Condition	dbg -> bits == R_SYS_BITS_64	329:12:7794:7819	6530551	0	True				
ANR	6530567	EqualityExpression	dbg -> bits == R_SYS_BITS_64		6530551	0		==			
ANR	6530568	PtrMemberAccess	dbg -> bits		6530551	0					
ANR	6530569	Identifier	dbg		6530551	0					
ANR	6530570	Identifier	bits		6530551	1					
ANR	6530571	Identifier	R_SYS_BITS_64		6530551	1					
ANR	6530572	CompoundStatement		5:40:132:132	6530551	1					
ANR	6530573	Statement	include	330:3:7827:7833	6530551	0	True				
ANR	6530574	Statement	"""reg/darwin-x64.h"""	330:11:7835:7852	6530551	1	True				
ANR	6530575	ElseStatement	else		6530551	0					
ANR	6530576	CompoundStatement		7:8:172:172	6530551	0					
ANR	6530577	ExpressionStatement	"eprintf ( ""invalid bit size\\n"" )"	332:2:7866:7896	6530551	0	True				
ANR	6530578	CallExpression	"eprintf ( ""invalid bit size\\n"" )"		6530551	0					
ANR	6530579	Callee	eprintf		6530551	0					
ANR	6530580	Identifier	eprintf		6530551	0					
ANR	6530581	ArgumentList	"""invalid bit size\\n"""		6530551	1					
ANR	6530582	Argument	"""invalid bit size\\n"""		6530551	0					
ANR	6530583	PrimaryExpression	"""invalid bit size\\n"""		6530551	0					
ANR	6530584	ReturnStatement	return NULL ;	333:2:7900:7911	6530551	1	True				
ANR	6530585	Identifier	NULL		6530551	0					
ANR	6530586	ReturnType	char *		6530551	1					
ANR	6530587	Identifier	xnu_reg_profile		6530551	2					
ANR	6530588	ParameterList	RDebug * dbg		6530551	3					
ANR	6530589	Parameter	RDebug * dbg	325:22:7676:7686	6530551	0	True				
ANR	6530590	ParameterType	RDebug *		6530551	0					
ANR	6530591	Identifier	dbg		6530551	1					
ANR	6530592	CFGEntryNode	ENTRY		6530551		True				
ANR	6530593	CFGExitNode	EXIT		6530551		True				
ANR	6530594	Symbol	NULL		6530551						
ANR	6530595	Symbol	dbg		6530551						
ANR	6530596	Symbol	dbg -> bits		6530551						
ANR	6530597	Symbol	* dbg		6530551						
ANR	6530598	Symbol	R_SYS_BITS_64		6530551						
ANR	6530599	Symbol	R_SYS_BITS_32		6530551						
ANR	6530600	Function	xnu_reg_write	352:0:8387:9433							
ANR	6530601	FunctionDef	"xnu_reg_write (RDebug * dbg , int type , const ut8 * buf , int size)"		6530600	0					
ANR	6530602	CompoundStatement		352:67:8454:9433	6530600	0					
ANR	6530603	IdentifierDeclStatement	bool ret ;	353:1:8457:8465	6530600	0	True				
ANR	6530604	IdentifierDecl	ret		6530600	0					
ANR	6530605	IdentifierDeclType	bool		6530600	0					
ANR	6530606	Identifier	ret		6530600	1					
ANR	6530607	IdentifierDeclStatement	"xnu_thread_t * th = get_xnu_thread ( dbg , getcurthread ( dbg ) ) ;"	354:1:8468:8527	6530600	1	True				
ANR	6530608	IdentifierDecl	"* th = get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530600	0					
ANR	6530609	IdentifierDeclType	xnu_thread_t *		6530600	0					
ANR	6530610	Identifier	th		6530600	1					
ANR	6530611	AssignmentExpression	"* th = get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530600	2		=			
ANR	6530612	Identifier	th		6530600	0					
ANR	6530613	CallExpression	"get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530600	1					
ANR	6530614	Callee	get_xnu_thread		6530600	0					
ANR	6530615	Identifier	get_xnu_thread		6530600	0					
ANR	6530616	ArgumentList	dbg		6530600	1					
ANR	6530617	Argument	dbg		6530600	0					
ANR	6530618	Identifier	dbg		6530600	0					
ANR	6530619	Argument	getcurthread ( dbg )		6530600	1					
ANR	6530620	CallExpression	getcurthread ( dbg )		6530600	0					
ANR	6530621	Callee	getcurthread		6530600	0					
ANR	6530622	Identifier	getcurthread		6530600	0					
ANR	6530623	ArgumentList	dbg		6530600	1					
ANR	6530624	Argument	dbg		6530600	0					
ANR	6530625	Identifier	dbg		6530600	0					
ANR	6530626	IfStatement	if ( ! th )		6530600	2					
ANR	6530627	Condition	! th	355:5:8534:8536	6530600	0	True				
ANR	6530628	UnaryOperationExpression	! th		6530600	0					
ANR	6530629	UnaryOperator	!		6530600	0					
ANR	6530630	Identifier	th		6530600	1					
ANR	6530631	CompoundStatement		4:10:84:84	6530600	1					
ANR	6530632	ReturnStatement	return 0 ;	356:2:8543:8551	6530600	0	True				
ANR	6530633	PrimaryExpression	0		6530600	0					
ANR	6530634	SwitchStatement	switch ( type )		6530600	3					
ANR	6530635	Condition	type	358:9:8565:8568	6530600	0	True				
ANR	6530636	Identifier	type		6530600	0					
ANR	6530637	CompoundStatement		7:15:116:116	6530600	1					
ANR	6530638	Label	case R_REG_TYPE_DRX :	359:1:8574:8593	6530600	0	True				
ANR	6530639	Identifier	R_REG_TYPE_DRX		6530600	0					
ANR	6530640	ExpressionStatement	"memcpy ( & th -> drx . uds . ds32 , buf , R_MIN ( size , sizeof ( th -> drx ) ) )"	361:2:8612:8675	6530600	1	True				
ANR	6530641	CallExpression	"memcpy ( & th -> drx . uds . ds32 , buf , R_MIN ( size , sizeof ( th -> drx ) ) )"		6530600	0					
ANR	6530642	Callee	memcpy		6530600	0					
ANR	6530643	Identifier	memcpy		6530600	0					
ANR	6530644	ArgumentList	& th -> drx . uds . ds32		6530600	1					
ANR	6530645	Argument	& th -> drx . uds . ds32		6530600	0					
ANR	6530646	UnaryOperationExpression	& th -> drx . uds . ds32		6530600	0					
ANR	6530647	UnaryOperator	&		6530600	0					
ANR	6530648	MemberAccess	th -> drx . uds . ds32		6530600	1					
ANR	6530649	MemberAccess	th -> drx . uds		6530600	0					
ANR	6530650	PtrMemberAccess	th -> drx		6530600	0					
ANR	6530651	Identifier	th		6530600	0					
ANR	6530652	Identifier	drx		6530600	1					
ANR	6530653	Identifier	uds		6530600	1					
ANR	6530654	Identifier	ds32		6530600	1					
ANR	6530655	Argument	buf		6530600	1					
ANR	6530656	Identifier	buf		6530600	0					
ANR	6530657	Argument	"R_MIN ( size , sizeof ( th -> drx ) )"		6530600	2					
ANR	6530658	CallExpression	"R_MIN ( size , sizeof ( th -> drx ) )"		6530600	0					
ANR	6530659	Callee	R_MIN		6530600	0					
ANR	6530660	Identifier	R_MIN		6530600	0					
ANR	6530661	ArgumentList	size		6530600	1					
ANR	6530662	Argument	size		6530600	0					
ANR	6530663	Identifier	size		6530600	0					
ANR	6530664	Argument	sizeof ( th -> drx )		6530600	1					
ANR	6530665	SizeofExpression	sizeof ( th -> drx )		6530600	0					
ANR	6530666	Sizeof	sizeof		6530600	0					
ANR	6530667	PtrMemberAccess	th -> drx		6530600	1					
ANR	6530668	Identifier	th		6530600	0					
ANR	6530669	Identifier	drx		6530600	1					
ANR	6530670	ExpressionStatement	"ret = xnu_thread_set_drx ( dbg , th )"	373:2:9113:9147	6530600	2	True				
ANR	6530671	AssignmentExpression	"ret = xnu_thread_set_drx ( dbg , th )"		6530600	0		=			
ANR	6530672	Identifier	ret		6530600	0					
ANR	6530673	CallExpression	"xnu_thread_set_drx ( dbg , th )"		6530600	1					
ANR	6530674	Callee	xnu_thread_set_drx		6530600	0					
ANR	6530675	Identifier	xnu_thread_set_drx		6530600	0					
ANR	6530676	ArgumentList	dbg		6530600	1					
ANR	6530677	Argument	dbg		6530600	0					
ANR	6530678	Identifier	dbg		6530600	0					
ANR	6530679	Argument	th		6530600	1					
ANR	6530680	Identifier	th		6530600	0					
ANR	6530681	BreakStatement	break ;	374:2:9151:9156	6530600	3	True				
ANR	6530682	Label	default :	375:1:9159:9166	6530600	4	True				
ANR	6530683	Identifier	default		6530600	0					
ANR	6530684	Statement	warning	378:1:9257:9263	6530600	5	True				
ANR	6530685	Statement	TODO	378:9:9265:9268	6530600	6	True				
ANR	6530686	Statement	powerpc	378:14:9270:9276	6530600	7	True				
ANR	6530687	Statement	support	378:22:9278:9284	6530600	8	True				
ANR	6530688	Statement	here	378:30:9286:9289	6530600	9	True				
ANR	6530689	ExpressionStatement	"ret = xnu_thread_set_gpr ( dbg , th )"	382:2:9372:9406	6530600	10	True				
ANR	6530690	AssignmentExpression	"ret = xnu_thread_set_gpr ( dbg , th )"		6530600	0		=			
ANR	6530691	Identifier	ret		6530600	0					
ANR	6530692	CallExpression	"xnu_thread_set_gpr ( dbg , th )"		6530600	1					
ANR	6530693	Callee	xnu_thread_set_gpr		6530600	0					
ANR	6530694	Identifier	xnu_thread_set_gpr		6530600	0					
ANR	6530695	ArgumentList	dbg		6530600	1					
ANR	6530696	Argument	dbg		6530600	0					
ANR	6530697	Identifier	dbg		6530600	0					
ANR	6530698	Argument	th		6530600	1					
ANR	6530699	Identifier	th		6530600	0					
ANR	6530700	BreakStatement	break ;	383:2:9410:9415	6530600	11	True				
ANR	6530701	ReturnStatement	return ret ;	385:1:9421:9431	6530600	4	True				
ANR	6530702	Identifier	ret		6530600	0					
ANR	6530703	ReturnType	int		6530600	1					
ANR	6530704	Identifier	xnu_reg_write		6530600	2					
ANR	6530705	ParameterList	"RDebug * dbg , int type , const ut8 * buf , int size"		6530600	3					
ANR	6530706	Parameter	RDebug * dbg	352:18:8405:8415	6530600	0	True				
ANR	6530707	ParameterType	RDebug *		6530600	0					
ANR	6530708	Identifier	dbg		6530600	1					
ANR	6530709	Parameter	int type	352:31:8418:8425	6530600	1	True				
ANR	6530710	ParameterType	int		6530600	0					
ANR	6530711	Identifier	type		6530600	1					
ANR	6530712	Parameter	const ut8 * buf	352:41:8428:8441	6530600	2	True				
ANR	6530713	ParameterType	const ut8 *		6530600	0					
ANR	6530714	Identifier	buf		6530600	1					
ANR	6530715	Parameter	int size	352:57:8444:8451	6530600	3	True				
ANR	6530716	ParameterType	int		6530600	0					
ANR	6530717	Identifier	size		6530600	1					
ANR	6530718	CFGEntryNode	ENTRY		6530600		True				
ANR	6530719	CFGExitNode	EXIT		6530600		True				
ANR	6530720	Symbol	ret		6530600						
ANR	6530721	Symbol	th -> drx		6530600						
ANR	6530722	Symbol	xnu_thread_set_drx		6530600						
ANR	6530723	Symbol	& th -> drx		6530600						
ANR	6530724	Symbol	dbg		6530600						
ANR	6530725	Symbol	get_xnu_thread		6530600						
ANR	6530726	Symbol	th -> drx . uds		6530600						
ANR	6530727	Symbol	R_MIN		6530600						
ANR	6530728	Symbol	type		6530600						
ANR	6530729	Symbol	xnu_thread_set_gpr		6530600						
ANR	6530730	Symbol	buf		6530600						
ANR	6530731	Symbol	size		6530600						
ANR	6530732	Symbol	th		6530600						
ANR	6530733	Symbol	getcurthread		6530600						
ANR	6530734	Symbol	* th		6530600						
ANR	6530735	Symbol	& th -> drx . uds		6530600						
ANR	6530736	Symbol	& th -> drx . uds . ds32		6530600						
ANR	6530737	Function	xnu_reg_read	388:0:9436:9990							
ANR	6530738	FunctionDef	"xnu_reg_read (RDebug * dbg , int type , ut8 * buf , int size)"		6530737	0					
ANR	6530739	CompoundStatement		388:60:9496:9990	6530737	0					
ANR	6530740	IdentifierDeclStatement	"xnu_thread_t * th = get_xnu_thread ( dbg , getcurthread ( dbg ) ) ;"	389:1:9499:9558	6530737	0	True				
ANR	6530741	IdentifierDecl	"* th = get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530737	0					
ANR	6530742	IdentifierDeclType	xnu_thread_t *		6530737	0					
ANR	6530743	Identifier	th		6530737	1					
ANR	6530744	AssignmentExpression	"* th = get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530737	2		=			
ANR	6530745	Identifier	th		6530737	0					
ANR	6530746	CallExpression	"get_xnu_thread ( dbg , getcurthread ( dbg ) )"		6530737	1					
ANR	6530747	Callee	get_xnu_thread		6530737	0					
ANR	6530748	Identifier	get_xnu_thread		6530737	0					
ANR	6530749	ArgumentList	dbg		6530737	1					
ANR	6530750	Argument	dbg		6530737	0					
ANR	6530751	Identifier	dbg		6530737	0					
ANR	6530752	Argument	getcurthread ( dbg )		6530737	1					
ANR	6530753	CallExpression	getcurthread ( dbg )		6530737	0					
ANR	6530754	Callee	getcurthread		6530737	0					
ANR	6530755	Identifier	getcurthread		6530737	0					
ANR	6530756	ArgumentList	dbg		6530737	1					
ANR	6530757	Argument	dbg		6530737	0					
ANR	6530758	Identifier	dbg		6530737	0					
ANR	6530759	IfStatement	if ( ! th )		6530737	1					
ANR	6530760	Condition	! th	390:5:9565:9567	6530737	0	True				
ANR	6530761	UnaryOperationExpression	! th		6530737	0					
ANR	6530762	UnaryOperator	!		6530737	0					
ANR	6530763	Identifier	th		6530737	1					
ANR	6530764	CompoundStatement		3:10:73:73	6530737	1					
ANR	6530765	ReturnStatement	return 0 ;	391:2:9574:9582	6530737	0	True				
ANR	6530766	PrimaryExpression	0		6530737	0					
ANR	6530767	SwitchStatement	switch ( type )		6530737	2					
ANR	6530768	Condition	type	393:9:9596:9599	6530737	0	True				
ANR	6530769	Identifier	type		6530737	0					
ANR	6530770	CompoundStatement		6:15:105:105	6530737	1					
ANR	6530771	Label	case R_REG_TYPE_SEG :	394:1:9605:9624	6530737	0	True				
ANR	6530772	Identifier	R_REG_TYPE_SEG		6530737	0					
ANR	6530773	Label	case R_REG_TYPE_FLG :	395:1:9627:9646	6530737	1	True				
ANR	6530774	Identifier	R_REG_TYPE_FLG		6530737	0					
ANR	6530775	Label	case R_REG_TYPE_GPR :	396:1:9649:9668	6530737	2	True				
ANR	6530776	Identifier	R_REG_TYPE_GPR		6530737	0					
ANR	6530777	IfStatement	"if ( ! xnu_thread_get_gpr ( dbg , th ) )"		6530737	3					
ANR	6530778	Condition	"! xnu_thread_get_gpr ( dbg , th )"	397:6:9676:9704	6530737	0	True				
ANR	6530779	UnaryOperationExpression	"! xnu_thread_get_gpr ( dbg , th )"		6530737	0					
ANR	6530780	UnaryOperator	!		6530737	0					
ANR	6530781	CallExpression	"xnu_thread_get_gpr ( dbg , th )"		6530737	1					
ANR	6530782	Callee	xnu_thread_get_gpr		6530737	0					
ANR	6530783	Identifier	xnu_thread_get_gpr		6530737	0					
ANR	6530784	ArgumentList	dbg		6530737	1					
ANR	6530785	Argument	dbg		6530737	0					
ANR	6530786	Identifier	dbg		6530737	0					
ANR	6530787	Argument	th		6530737	1					
ANR	6530788	Identifier	th		6530737	0					
ANR	6530789	CompoundStatement		10:37:210:210	6530737	1					
ANR	6530790	ReturnStatement	return 0 ;	398:3:9712:9720	6530737	0	True				
ANR	6530791	PrimaryExpression	0		6530737	0					
ANR	6530792	BreakStatement	break ;	400:2:9728:9733	6530737	4	True				
ANR	6530793	Label	case R_REG_TYPE_DRX :	401:1:9736:9755	6530737	5	True				
ANR	6530794	Identifier	R_REG_TYPE_DRX		6530737	0					
ANR	6530795	IfStatement	"if ( ! xnu_thread_get_drx ( dbg , th ) )"		6530737	6					
ANR	6530796	Condition	"! xnu_thread_get_drx ( dbg , th )"	402:6:9763:9791	6530737	0	True				
ANR	6530797	UnaryOperationExpression	"! xnu_thread_get_drx ( dbg , th )"		6530737	0					
ANR	6530798	UnaryOperator	!		6530737	0					
ANR	6530799	CallExpression	"xnu_thread_get_drx ( dbg , th )"		6530737	1					
ANR	6530800	Callee	xnu_thread_get_drx		6530737	0					
ANR	6530801	Identifier	xnu_thread_get_drx		6530737	0					
ANR	6530802	ArgumentList	dbg		6530737	1					
ANR	6530803	Argument	dbg		6530737	0					
ANR	6530804	Identifier	dbg		6530737	0					
ANR	6530805	Argument	th		6530737	1					
ANR	6530806	Identifier	th		6530737	0					
ANR	6530807	CompoundStatement		15:37:297:297	6530737	1					
ANR	6530808	ReturnStatement	return 0 ;	403:3:9799:9807	6530737	0	True				
ANR	6530809	PrimaryExpression	0		6530737	0					
ANR	6530810	BreakStatement	break ;	405:2:9815:9820	6530737	7	True				
ANR	6530811	Label	default :	406:1:9823:9830	6530737	8	True				
ANR	6530812	Identifier	default		6530737	0					
ANR	6530813	ReturnStatement	return 0 ;	407:2:9834:9842	6530737	9	True				
ANR	6530814	PrimaryExpression	0		6530737	0					
ANR	6530815	IfStatement	if ( th -> state )		6530737	3					
ANR	6530816	Condition	th -> state	409:5:9852:9860	6530737	0	True				
ANR	6530817	PtrMemberAccess	th -> state		6530737	0					
ANR	6530818	Identifier	th		6530737	0					
ANR	6530819	Identifier	state		6530737	1					
ANR	6530820	CompoundStatement		23:2:370:408	6530737	1					
ANR	6530821	IdentifierDeclStatement	"int rsz = R_MIN ( th -> state_size , size ) ;"	410:2:9867:9905	6530737	0	True				
ANR	6530822	IdentifierDecl	"rsz = R_MIN ( th -> state_size , size )"		6530737	0					
ANR	6530823	IdentifierDeclType	int		6530737	0					
ANR	6530824	Identifier	rsz		6530737	1					
ANR	6530825	AssignmentExpression	"rsz = R_MIN ( th -> state_size , size )"		6530737	2		=			
ANR	6530826	Identifier	rsz		6530737	0					
ANR	6530827	CallExpression	"R_MIN ( th -> state_size , size )"		6530737	1					
ANR	6530828	Callee	R_MIN		6530737	0					
ANR	6530829	Identifier	R_MIN		6530737	0					
ANR	6530830	ArgumentList	th -> state_size		6530737	1					
ANR	6530831	Argument	th -> state_size		6530737	0					
ANR	6530832	PtrMemberAccess	th -> state_size		6530737	0					
ANR	6530833	Identifier	th		6530737	0					
ANR	6530834	Identifier	state_size		6530737	1					
ANR	6530835	Argument	size		6530737	1					
ANR	6530836	Identifier	size		6530737	0					
ANR	6530837	IfStatement	if ( rsz > 0 )		6530737	1					
ANR	6530838	Condition	rsz > 0	411:6:9913:9919	6530737	0	True				
ANR	6530839	RelationalExpression	rsz > 0		6530737	0		>			
ANR	6530840	Identifier	rsz		6530737	0					
ANR	6530841	PrimaryExpression	0		6530737	1					
ANR	6530842	CompoundStatement		24:15:425:425	6530737	1					
ANR	6530843	ExpressionStatement	"memcpy ( buf , th -> state , rsz )"	412:3:9927:9955	6530737	0	True				
ANR	6530844	CallExpression	"memcpy ( buf , th -> state , rsz )"		6530737	0					
ANR	6530845	Callee	memcpy		6530737	0					
ANR	6530846	Identifier	memcpy		6530737	0					
ANR	6530847	ArgumentList	buf		6530737	1					
ANR	6530848	Argument	buf		6530737	0					
ANR	6530849	Identifier	buf		6530737	0					
ANR	6530850	Argument	th -> state		6530737	1					
ANR	6530851	PtrMemberAccess	th -> state		6530737	0					
ANR	6530852	Identifier	th		6530737	0					
ANR	6530853	Identifier	state		6530737	1					
ANR	6530854	Argument	rsz		6530737	2					
ANR	6530855	Identifier	rsz		6530737	0					
ANR	6530856	ReturnStatement	return rsz ;	413:3:9960:9970	6530737	1	True				
ANR	6530857	Identifier	rsz		6530737	0					
ANR	6530858	ReturnStatement	return 0 ;	416:1:9980:9988	6530737	4	True				
ANR	6530859	PrimaryExpression	0		6530737	0					
ANR	6530860	ReturnType	int		6530737	1					
ANR	6530861	Identifier	xnu_reg_read		6530737	2					
ANR	6530862	ParameterList	"RDebug * dbg , int type , ut8 * buf , int size"		6530737	3					
ANR	6530863	Parameter	RDebug * dbg	388:17:9453:9463	6530737	0	True				
ANR	6530864	ParameterType	RDebug *		6530737	0					
ANR	6530865	Identifier	dbg		6530737	1					
ANR	6530866	Parameter	int type	388:30:9466:9473	6530737	1	True				
ANR	6530867	ParameterType	int		6530737	0					
ANR	6530868	Identifier	type		6530737	1					
ANR	6530869	Parameter	ut8 * buf	388:40:9476:9483	6530737	2	True				
ANR	6530870	ParameterType	ut8 *		6530737	0					
ANR	6530871	Identifier	buf		6530737	1					
ANR	6530872	Parameter	int size	388:50:9486:9493	6530737	3	True				
ANR	6530873	ParameterType	int		6530737	0					
ANR	6530874	Identifier	size		6530737	1					
ANR	6530875	CFGEntryNode	ENTRY		6530737		True				
ANR	6530876	CFGExitNode	EXIT		6530737		True				
ANR	6530877	Symbol	xnu_thread_get_drx		6530737						
ANR	6530878	Symbol	xnu_thread_get_gpr		6530737						
ANR	6530879	Symbol	dbg		6530737						
ANR	6530880	Symbol	get_xnu_thread		6530737						
ANR	6530881	Symbol	R_MIN		6530737						
ANR	6530882	Symbol	type		6530737						
ANR	6530883	Symbol	th -> state		6530737						
ANR	6530884	Symbol	buf		6530737						
ANR	6530885	Symbol	size		6530737						
ANR	6530886	Symbol	th		6530737						
ANR	6530887	Symbol	getcurthread		6530737						
ANR	6530888	Symbol	rsz		6530737						
ANR	6530889	Symbol	* th		6530737						
ANR	6530890	Symbol	th -> state_size		6530737						
ANR	6530891	Function	xnu_map_alloc	419:0:9993:10576							
ANR	6530892	FunctionDef	"xnu_map_alloc (RDebug * dbg , ut64 addr , int size)"		6530891	0					
ANR	6530893	CompoundStatement		419:59:10052:10576	6530891	0					
ANR	6530894	IdentifierDeclStatement	kern_return_t ret ;	420:1:10055:10072	6530891	0	True				
ANR	6530895	IdentifierDecl	ret		6530891	0					
ANR	6530896	IdentifierDeclType	kern_return_t		6530891	0					
ANR	6530897	Identifier	ret		6530891	1					
ANR	6530898	IdentifierDeclStatement	ut8 * base = ( ut8 * ) addr ;	421:1:10075:10098	6530891	1	True				
ANR	6530899	IdentifierDecl	* base = ( ut8 * ) addr		6530891	0					
ANR	6530900	IdentifierDeclType	ut8 *		6530891	0					
ANR	6530901	Identifier	base		6530891	1					
ANR	6530902	AssignmentExpression	* base = ( ut8 * ) addr		6530891	2		=			
ANR	6530903	Identifier	base		6530891	0					
ANR	6530904	CastExpression	( ut8 * ) addr		6530891	1					
ANR	6530905	CastTarget	ut8 *		6530891	0					
ANR	6530906	Identifier	addr		6530891	1					
ANR	6530907	IdentifierDeclStatement	"xnu_thread_t * th = get_xnu_thread ( dbg , dbg -> tid ) ;"	422:1:10101:10150	6530891	2	True				
ANR	6530908	IdentifierDecl	"* th = get_xnu_thread ( dbg , dbg -> tid )"		6530891	0					
ANR	6530909	IdentifierDeclType	xnu_thread_t *		6530891	0					
ANR	6530910	Identifier	th		6530891	1					
ANR	6530911	AssignmentExpression	"* th = get_xnu_thread ( dbg , dbg -> tid )"		6530891	2		=			
ANR	6530912	Identifier	th		6530891	0					
ANR	6530913	CallExpression	"get_xnu_thread ( dbg , dbg -> tid )"		6530891	1					
ANR	6530914	Callee	get_xnu_thread		6530891	0					
ANR	6530915	Identifier	get_xnu_thread		6530891	0					
ANR	6530916	ArgumentList	dbg		6530891	1					
ANR	6530917	Argument	dbg		6530891	0					
ANR	6530918	Identifier	dbg		6530891	0					
ANR	6530919	Argument	dbg -> tid		6530891	1					
ANR	6530920	PtrMemberAccess	dbg -> tid		6530891	0					
ANR	6530921	Identifier	dbg		6530891	0					
ANR	6530922	Identifier	tid		6530891	1					
ANR	6530923	IdentifierDeclStatement	bool anywhere = ! VM_FLAGS_ANYWHERE ;	423:1:10153:10187	6530891	3	True				
ANR	6530924	IdentifierDecl	anywhere = ! VM_FLAGS_ANYWHERE		6530891	0					
ANR	6530925	IdentifierDeclType	bool		6530891	0					
ANR	6530926	Identifier	anywhere		6530891	1					
ANR	6530927	AssignmentExpression	anywhere = ! VM_FLAGS_ANYWHERE		6530891	2		=			
ANR	6530928	Identifier	anywhere		6530891	0					
ANR	6530929	UnaryOperationExpression	! VM_FLAGS_ANYWHERE		6530891	1					
ANR	6530930	UnaryOperator	!		6530891	0					
ANR	6530931	Identifier	VM_FLAGS_ANYWHERE		6530891	1					
ANR	6530932	IfStatement	if ( ! th )		6530891	4					
ANR	6530933	Condition	! th	424:5:10194:10196	6530891	0	True				
ANR	6530934	UnaryOperationExpression	! th		6530891	0					
ANR	6530935	UnaryOperator	!		6530891	0					
ANR	6530936	Identifier	th		6530891	1					
ANR	6530937	CompoundStatement		6:10:146:146	6530891	1					
ANR	6530938	ReturnStatement	return NULL ;	425:2:10203:10214	6530891	0	True				
ANR	6530939	Identifier	NULL		6530891	0					
ANR	6530940	IfStatement	if ( addr == - 1 )		6530891	5					
ANR	6530941	Condition	addr == - 1	427:5:10224:10233	6530891	0	True				
ANR	6530942	EqualityExpression	addr == - 1		6530891	0		==			
ANR	6530943	Identifier	addr		6530891	0					
ANR	6530944	UnaryOperationExpression	- 1		6530891	1					
ANR	6530945	UnaryOperator	-		6530891	0					
ANR	6530946	PrimaryExpression	1		6530891	1					
ANR	6530947	CompoundStatement		9:17:183:183	6530891	1					
ANR	6530948	ExpressionStatement	anywhere = VM_FLAGS_ANYWHERE	428:2:10240:10268	6530891	0	True				
ANR	6530949	AssignmentExpression	anywhere = VM_FLAGS_ANYWHERE		6530891	0		=			
ANR	6530950	Identifier	anywhere		6530891	0					
ANR	6530951	Identifier	VM_FLAGS_ANYWHERE		6530891	1					
ANR	6530952	ExpressionStatement	"ret = vm_allocate ( th -> port , ( vm_address_t * ) & base , ( vm_size_t ) size , anywhere | VM_MAKE_TAG ( DEBUG_MAP_TAG_ID ) )"	430:1:10274:10394	6530891	6	True				
ANR	6530953	AssignmentExpression	"ret = vm_allocate ( th -> port , ( vm_address_t * ) & base , ( vm_size_t ) size , anywhere | VM_MAKE_TAG ( DEBUG_MAP_TAG_ID ) )"		6530891	0		=			
ANR	6530954	Identifier	ret		6530891	0					
ANR	6530955	CallExpression	"vm_allocate ( th -> port , ( vm_address_t * ) & base , ( vm_size_t ) size , anywhere | VM_MAKE_TAG ( DEBUG_MAP_TAG_ID ) )"		6530891	1					
ANR	6530956	Callee	vm_allocate		6530891	0					
ANR	6530957	Identifier	vm_allocate		6530891	0					
ANR	6530958	ArgumentList	th -> port		6530891	1					
ANR	6530959	Argument	th -> port		6530891	0					
ANR	6530960	PtrMemberAccess	th -> port		6530891	0					
ANR	6530961	Identifier	th		6530891	0					
ANR	6530962	Identifier	port		6530891	1					
ANR	6530963	Argument	( vm_address_t * ) & base		6530891	1					
ANR	6530964	CastExpression	( vm_address_t * ) & base		6530891	0					
ANR	6530965	CastTarget	vm_address_t *		6530891	0					
ANR	6530966	UnaryOperationExpression	& base		6530891	1					
ANR	6530967	UnaryOperator	&		6530891	0					
ANR	6530968	Identifier	base		6530891	1					
ANR	6530969	Argument	( vm_size_t ) size		6530891	2					
ANR	6530970	CastExpression	( vm_size_t ) size		6530891	0					
ANR	6530971	CastTarget	vm_size_t		6530891	0					
ANR	6530972	Identifier	size		6530891	1					
ANR	6530973	Argument	anywhere | VM_MAKE_TAG ( DEBUG_MAP_TAG_ID )		6530891	3					
ANR	6530974	InclusiveOrExpression	anywhere | VM_MAKE_TAG ( DEBUG_MAP_TAG_ID )		6530891	0		|			
ANR	6530975	Identifier	anywhere		6530891	0					
ANR	6530976	CallExpression	VM_MAKE_TAG ( DEBUG_MAP_TAG_ID )		6530891	1					
ANR	6530977	Callee	VM_MAKE_TAG		6530891	0					
ANR	6530978	Identifier	VM_MAKE_TAG		6530891	0					
ANR	6530979	ArgumentList	DEBUG_MAP_TAG_ID		6530891	1					
ANR	6530980	Argument	DEBUG_MAP_TAG_ID		6530891	0					
ANR	6530981	Identifier	DEBUG_MAP_TAG_ID		6530891	0					
ANR	6530982	IfStatement	if ( ret != KERN_SUCCESS )		6530891	7					
ANR	6530983	Condition	ret != KERN_SUCCESS	433:5:10401:10419	6530891	0	True				
ANR	6530984	EqualityExpression	ret != KERN_SUCCESS		6530891	0		!=			
ANR	6530985	Identifier	ret		6530891	0					
ANR	6530986	Identifier	KERN_SUCCESS		6530891	1					
ANR	6530987	CompoundStatement		15:26:369:369	6530891	1					
ANR	6530988	ExpressionStatement	"eprintf ( ""vm_allocate failed\\n"" )"	434:2:10426:10458	6530891	0	True				
ANR	6530989	CallExpression	"eprintf ( ""vm_allocate failed\\n"" )"		6530891	0					
ANR	6530990	Callee	eprintf		6530891	0					
ANR	6530991	Identifier	eprintf		6530891	0					
ANR	6530992	ArgumentList	"""vm_allocate failed\\n"""		6530891	1					
ANR	6530993	Argument	"""vm_allocate failed\\n"""		6530891	0					
ANR	6530994	PrimaryExpression	"""vm_allocate failed\\n"""		6530891	0					
ANR	6530995	ReturnStatement	return NULL ;	435:2:10462:10473	6530891	1	True				
ANR	6530996	Identifier	NULL		6530891	0					
ANR	6530997	ExpressionStatement	r_debug_map_sync ( dbg )	437:1:10479:10501	6530891	8	True				
ANR	6530998	CallExpression	r_debug_map_sync ( dbg )		6530891	0					
ANR	6530999	Callee	r_debug_map_sync		6530891	0					
ANR	6531000	Identifier	r_debug_map_sync		6530891	0					
ANR	6531001	ArgumentList	dbg		6530891	1					
ANR	6531002	Argument	dbg		6530891	0					
ANR	6531003	Identifier	dbg		6530891	0					
ANR	6531004	ReturnStatement	"return r_debug_map_get ( dbg , ( ut64 ) base ) ;"	438:1:10534:10574	6530891	9	True				
ANR	6531005	CallExpression	"r_debug_map_get ( dbg , ( ut64 ) base )"		6530891	0					
ANR	6531006	Callee	r_debug_map_get		6530891	0					
ANR	6531007	Identifier	r_debug_map_get		6530891	0					
ANR	6531008	ArgumentList	dbg		6530891	1					
ANR	6531009	Argument	dbg		6530891	0					
ANR	6531010	Identifier	dbg		6530891	0					
ANR	6531011	Argument	( ut64 ) base		6530891	1					
ANR	6531012	CastExpression	( ut64 ) base		6530891	0					
ANR	6531013	CastTarget	ut64		6530891	0					
ANR	6531014	Identifier	base		6530891	1					
ANR	6531015	ReturnType	RDebugMap *		6530891	1					
ANR	6531016	Identifier	xnu_map_alloc		6530891	2					
ANR	6531017	ParameterList	"RDebug * dbg , ut64 addr , int size"		6530891	3					
ANR	6531018	Parameter	RDebug * dbg	419:25:10018:10028	6530891	0	True				
ANR	6531019	ParameterType	RDebug *		6530891	0					
ANR	6531020	Identifier	dbg		6530891	1					
ANR	6531021	Parameter	ut64 addr	419:38:10031:10039	6530891	1	True				
ANR	6531022	ParameterType	ut64		6530891	0					
ANR	6531023	Identifier	addr		6530891	1					
ANR	6531024	Parameter	int size	419:49:10042:10049	6530891	2	True				
ANR	6531025	ParameterType	int		6530891	0					
ANR	6531026	Identifier	size		6530891	1					
ANR	6531027	CFGEntryNode	ENTRY		6530891		True				
ANR	6531028	CFGExitNode	EXIT		6530891		True				
ANR	6531029	Symbol	ret		6530891						
ANR	6531030	Symbol	& base		6530891						
ANR	6531031	Symbol	NULL		6530891						
ANR	6531032	Symbol	VM_MAKE_TAG		6530891						
ANR	6531033	Symbol	dbg		6530891						
ANR	6531034	Symbol	get_xnu_thread		6530891						
ANR	6531035	Symbol	DEBUG_MAP_TAG_ID		6530891						
ANR	6531036	Symbol	* dbg		6530891						
ANR	6531037	Symbol	anywhere		6530891						
ANR	6531038	Symbol	dbg -> tid		6530891						
ANR	6531039	Symbol	th -> port		6530891						
ANR	6531040	Symbol	size		6530891						
ANR	6531041	Symbol	th		6530891						
ANR	6531042	Symbol	vm_allocate		6530891						
ANR	6531043	Symbol	VM_FLAGS_ANYWHERE		6530891						
ANR	6531044	Symbol	* th		6530891						
ANR	6531045	Symbol	KERN_SUCCESS		6530891						
ANR	6531046	Symbol	r_debug_map_get		6530891						
ANR	6531047	Symbol	addr		6530891						
ANR	6531048	Symbol	base		6530891						
ANR	6531049	Function	xnu_map_dealloc	441:0:10579:10882							
ANR	6531050	FunctionDef	"xnu_map_dealloc (RDebug * dbg , ut64 addr , int size)"		6531049	0					
ANR	6531051	CompoundStatement		441:55:10634:10882	6531049	0					
ANR	6531052	IdentifierDeclStatement	"xnu_thread_t * th = get_xnu_thread ( dbg , dbg -> tid ) ;"	442:1:10637:10686	6531049	0	True				
ANR	6531053	IdentifierDecl	"* th = get_xnu_thread ( dbg , dbg -> tid )"		6531049	0					
ANR	6531054	IdentifierDeclType	xnu_thread_t *		6531049	0					
ANR	6531055	Identifier	th		6531049	1					
ANR	6531056	AssignmentExpression	"* th = get_xnu_thread ( dbg , dbg -> tid )"		6531049	2		=			
ANR	6531057	Identifier	th		6531049	0					
ANR	6531058	CallExpression	"get_xnu_thread ( dbg , dbg -> tid )"		6531049	1					
ANR	6531059	Callee	get_xnu_thread		6531049	0					
ANR	6531060	Identifier	get_xnu_thread		6531049	0					
ANR	6531061	ArgumentList	dbg		6531049	1					
ANR	6531062	Argument	dbg		6531049	0					
ANR	6531063	Identifier	dbg		6531049	0					
ANR	6531064	Argument	dbg -> tid		6531049	1					
ANR	6531065	PtrMemberAccess	dbg -> tid		6531049	0					
ANR	6531066	Identifier	dbg		6531049	0					
ANR	6531067	Identifier	tid		6531049	1					
ANR	6531068	IfStatement	if ( ! th )		6531049	1					
ANR	6531069	Condition	! th	443:5:10693:10695	6531049	0	True				
ANR	6531070	UnaryOperationExpression	! th		6531049	0					
ANR	6531071	UnaryOperator	!		6531049	0					
ANR	6531072	Identifier	th		6531049	1					
ANR	6531073	CompoundStatement		3:10:63:63	6531049	1					
ANR	6531074	ReturnStatement	return false ;	444:2:10702:10714	6531049	0	True				
ANR	6531075	Identifier	false		6531049	0					
ANR	6531076	IdentifierDeclStatement	"int ret = vm_deallocate ( th -> port , ( vm_address_t ) addr , ( vm_size_t ) size ) ;"	446:1:10720:10791	6531049	2	True				
ANR	6531077	IdentifierDecl	"ret = vm_deallocate ( th -> port , ( vm_address_t ) addr , ( vm_size_t ) size )"		6531049	0					
ANR	6531078	IdentifierDeclType	int		6531049	0					
ANR	6531079	Identifier	ret		6531049	1					
ANR	6531080	AssignmentExpression	"ret = vm_deallocate ( th -> port , ( vm_address_t ) addr , ( vm_size_t ) size )"		6531049	2		=			
ANR	6531081	Identifier	ret		6531049	0					
ANR	6531082	CallExpression	"vm_deallocate ( th -> port , ( vm_address_t ) addr , ( vm_size_t ) size )"		6531049	1					
ANR	6531083	Callee	vm_deallocate		6531049	0					
ANR	6531084	Identifier	vm_deallocate		6531049	0					
ANR	6531085	ArgumentList	th -> port		6531049	1					
ANR	6531086	Argument	th -> port		6531049	0					
ANR	6531087	PtrMemberAccess	th -> port		6531049	0					
ANR	6531088	Identifier	th		6531049	0					
ANR	6531089	Identifier	port		6531049	1					
ANR	6531090	Argument	( vm_address_t ) addr		6531049	1					
ANR	6531091	CastExpression	( vm_address_t ) addr		6531049	0					
ANR	6531092	CastTarget	vm_address_t		6531049	0					
ANR	6531093	Identifier	addr		6531049	1					
ANR	6531094	Argument	( vm_size_t ) size		6531049	2					
ANR	6531095	CastExpression	( vm_size_t ) size		6531049	0					
ANR	6531096	CastTarget	vm_size_t		6531049	0					
ANR	6531097	Identifier	size		6531049	1					
ANR	6531098	IfStatement	if ( ret != KERN_SUCCESS )		6531049	3					
ANR	6531099	Condition	ret != KERN_SUCCESS	447:5:10798:10816	6531049	0	True				
ANR	6531100	EqualityExpression	ret != KERN_SUCCESS		6531049	0		!=			
ANR	6531101	Identifier	ret		6531049	0					
ANR	6531102	Identifier	KERN_SUCCESS		6531049	1					
ANR	6531103	CompoundStatement		7:26:184:184	6531049	1					
ANR	6531104	ExpressionStatement	"perror ( ""vm_deallocate"" )"	448:2:10823:10847	6531049	0	True				
ANR	6531105	CallExpression	"perror ( ""vm_deallocate"" )"		6531049	0					
ANR	6531106	Callee	perror		6531049	0					
ANR	6531107	Identifier	perror		6531049	0					
ANR	6531108	ArgumentList	"""vm_deallocate"""		6531049	1					
ANR	6531109	Argument	"""vm_deallocate"""		6531049	0					
ANR	6531110	PrimaryExpression	"""vm_deallocate"""		6531049	0					
ANR	6531111	ReturnStatement	return false ;	449:2:10851:10863	6531049	1	True				
ANR	6531112	Identifier	false		6531049	0					
ANR	6531113	ReturnStatement	return true ;	451:1:10869:10880	6531049	4	True				
ANR	6531114	Identifier	true		6531049	0					
ANR	6531115	ReturnType	int		6531049	1					
ANR	6531116	Identifier	xnu_map_dealloc		6531049	2					
ANR	6531117	ParameterList	"RDebug * dbg , ut64 addr , int size"		6531049	3					
ANR	6531118	Parameter	RDebug * dbg	441:21:10600:10610	6531049	0	True				
ANR	6531119	ParameterType	RDebug *		6531049	0					
ANR	6531120	Identifier	dbg		6531049	1					
ANR	6531121	Parameter	ut64 addr	441:34:10613:10621	6531049	1	True				
ANR	6531122	ParameterType	ut64		6531049	0					
ANR	6531123	Identifier	addr		6531049	1					
ANR	6531124	Parameter	int size	441:45:10624:10631	6531049	2	True				
ANR	6531125	ParameterType	int		6531049	0					
ANR	6531126	Identifier	size		6531049	1					
ANR	6531127	CFGEntryNode	ENTRY		6531049		True				
ANR	6531128	CFGExitNode	EXIT		6531049		True				
ANR	6531129	Symbol	ret		6531049						
ANR	6531130	Symbol	dbg		6531049						
ANR	6531131	Symbol	false		6531049						
ANR	6531132	Symbol	get_xnu_thread		6531049						
ANR	6531133	Symbol	* dbg		6531049						
ANR	6531134	Symbol	dbg -> tid		6531049						
ANR	6531135	Symbol	th -> port		6531049						
ANR	6531136	Symbol	size		6531049						
ANR	6531137	Symbol	th		6531049						
ANR	6531138	Symbol	true		6531049						
ANR	6531139	Symbol	* th		6531049						
ANR	6531140	Symbol	vm_deallocate		6531049						
ANR	6531141	Symbol	KERN_SUCCESS		6531049						
ANR	6531142	Symbol	addr		6531049						
ANR	6531143	Function	xnu_get_kinfo_proc	454:0:10885:11214							
ANR	6531144	FunctionDef	"xnu_get_kinfo_proc (int pid , struct kinfo_proc * kp)"		6531143	0					
ANR	6531145	CompoundStatement		454:63:10948:11214	6531143	0					
ANR	6531146	IdentifierDeclStatement	"int mib [ 4 ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , 0 } ;"	455:1:10951:11005	6531143	0	True				
ANR	6531147	IdentifierDecl	"mib [ 4 ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , 0 }"		6531143	0					
ANR	6531148	IdentifierDeclType	int [ 4 ]		6531143	0					
ANR	6531149	Identifier	mib		6531143	1					
ANR	6531150	PrimaryExpression	4		6531143	2					
ANR	6531151	AssignmentExpression	"mib [ 4 ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , 0 }"		6531143	3		=			
ANR	6531152	Identifier	mib		6531143	0					
ANR	6531153	InitializerList	CTL_KERN		6531143	1					
ANR	6531154	Identifier	CTL_KERN		6531143	0					
ANR	6531155	Identifier	KERN_PROC		6531143	1					
ANR	6531156	Identifier	KERN_PROC_PID		6531143	2					
ANR	6531157	PrimaryExpression	0		6531143	3					
ANR	6531158	IdentifierDeclStatement	int len = 4 ;	456:1:11008:11019	6531143	1	True				
ANR	6531159	IdentifierDecl	len = 4		6531143	0					
ANR	6531160	IdentifierDeclType	int		6531143	0					
ANR	6531161	Identifier	len		6531143	1					
ANR	6531162	AssignmentExpression	len = 4		6531143	2		=			
ANR	6531163	Identifier	len		6531143	0					
ANR	6531164	PrimaryExpression	4		6531143	1					
ANR	6531165	IdentifierDeclStatement	size_t kpl = sizeof ( struct kinfo_proc ) ;	457:1:11022:11061	6531143	2	True				
ANR	6531166	IdentifierDecl	kpl = sizeof ( struct kinfo_proc )		6531143	0					
ANR	6531167	IdentifierDeclType	size_t		6531143	0					
ANR	6531168	Identifier	kpl		6531143	1					
ANR	6531169	AssignmentExpression	kpl = sizeof ( struct kinfo_proc )		6531143	2		=			
ANR	6531170	Identifier	kpl		6531143	0					
ANR	6531171	SizeofExpression	sizeof ( struct kinfo_proc )		6531143	1					
ANR	6531172	Sizeof	sizeof		6531143	0					
ANR	6531173	SizeofOperand	struct kinfo_proc		6531143	1					
ANR	6531174	ExpressionStatement	mib [ 3 ] = pid	459:1:11065:11077	6531143	3	True				
ANR	6531175	AssignmentExpression	mib [ 3 ] = pid		6531143	0		=			
ANR	6531176	ArrayIndexing	mib [ 3 ]		6531143	0					
ANR	6531177	Identifier	mib		6531143	0					
ANR	6531178	PrimaryExpression	3		6531143	1					
ANR	6531179	Identifier	pid		6531143	1					
ANR	6531180	IfStatement	"if ( sysctl ( mib , len , kp , & kpl , NULL , 0 ) == - 1 )"		6531143	4					
ANR	6531181	Condition	"sysctl ( mib , len , kp , & kpl , NULL , 0 ) == - 1"	460:5:11084:11125	6531143	0	True				
ANR	6531182	EqualityExpression	"sysctl ( mib , len , kp , & kpl , NULL , 0 ) == - 1"		6531143	0		==			
ANR	6531183	CallExpression	"sysctl ( mib , len , kp , & kpl , NULL , 0 )"		6531143	0					
ANR	6531184	Callee	sysctl		6531143	0					
ANR	6531185	Identifier	sysctl		6531143	0					
ANR	6531186	ArgumentList	mib		6531143	1					
ANR	6531187	Argument	mib		6531143	0					
ANR	6531188	Identifier	mib		6531143	0					
ANR	6531189	Argument	len		6531143	1					
ANR	6531190	Identifier	len		6531143	0					
ANR	6531191	Argument	kp		6531143	2					
ANR	6531192	Identifier	kp		6531143	0					
ANR	6531193	Argument	& kpl		6531143	3					
ANR	6531194	UnaryOperationExpression	& kpl		6531143	0					
ANR	6531195	UnaryOperator	&		6531143	0					
ANR	6531196	Identifier	kpl		6531143	1					
ANR	6531197	Argument	NULL		6531143	4					
ANR	6531198	Identifier	NULL		6531143	0					
ANR	6531199	Argument	0		6531143	5					
ANR	6531200	PrimaryExpression	0		6531143	0					
ANR	6531201	UnaryOperationExpression	- 1		6531143	1					
ANR	6531202	UnaryOperator	-		6531143	0					
ANR	6531203	PrimaryExpression	1		6531143	1					
ANR	6531204	CompoundStatement		7:49:179:179	6531143	1					
ANR	6531205	ExpressionStatement	"perror ( ""sysctl"" )"	461:2:11132:11149	6531143	0	True				
ANR	6531206	CallExpression	"perror ( ""sysctl"" )"		6531143	0					
ANR	6531207	Callee	perror		6531143	0					
ANR	6531208	Identifier	perror		6531143	0					
ANR	6531209	ArgumentList	"""sysctl"""		6531143	1					
ANR	6531210	Argument	"""sysctl"""		6531143	0					
ANR	6531211	PrimaryExpression	"""sysctl"""		6531143	0					
ANR	6531212	ReturnStatement	return - 1 ;	462:2:11153:11162	6531143	1	True				
ANR	6531213	UnaryOperationExpression	- 1		6531143	0					
ANR	6531214	UnaryOperator	-		6531143	0					
ANR	6531215	PrimaryExpression	1		6531143	1					
ANR	6531216	IfStatement	if ( kpl < 1 )		6531143	5					
ANR	6531217	Condition	kpl < 1	464:7:11176:11182	6531143	0	True				
ANR	6531218	RelationalExpression	kpl < 1		6531143	0		<			
ANR	6531219	Identifier	kpl		6531143	0					
ANR	6531220	PrimaryExpression	1		6531143	1					
ANR	6531221	CompoundStatement		11:16:236:236	6531143	1					
ANR	6531222	ReturnStatement	return - 1 ;	465:2:11189:11198	6531143	0	True				
ANR	6531223	UnaryOperationExpression	- 1		6531143	0					
ANR	6531224	UnaryOperator	-		6531143	0					
ANR	6531225	PrimaryExpression	1		6531143	1					
ANR	6531226	ReturnStatement	return 0 ;	467:1:11204:11212	6531143	6	True				
ANR	6531227	PrimaryExpression	0		6531143	0					
ANR	6531228	ReturnType	static int		6531143	1					
ANR	6531229	Identifier	xnu_get_kinfo_proc		6531143	2					
ANR	6531230	ParameterList	"int pid , struct kinfo_proc * kp"		6531143	3					
ANR	6531231	Parameter	int pid	454:31:10916:10922	6531143	0	True				
ANR	6531232	ParameterType	int		6531143	0					
ANR	6531233	Identifier	pid		6531143	1					
ANR	6531234	Parameter	struct kinfo_proc * kp	454:40:10925:10945	6531143	1	True				
ANR	6531235	ParameterType	struct kinfo_proc *		6531143	0					
ANR	6531236	Identifier	kp		6531143	1					
ANR	6531237	CFGEntryNode	ENTRY		6531143		True				
ANR	6531238	CFGExitNode	EXIT		6531143		True				
ANR	6531239	Symbol	* mib		6531143						
ANR	6531240	Symbol	CTL_KERN		6531143						
ANR	6531241	Symbol	sysctl		6531143						
ANR	6531242	Symbol	NULL		6531143						
ANR	6531243	Symbol	len		6531143						
ANR	6531244	Symbol	kp		6531143						
ANR	6531245	Symbol	kpl		6531143						
ANR	6531246	Symbol	mib		6531143						
ANR	6531247	Symbol	KERN_PROC_PID		6531143						
ANR	6531248	Symbol	KERN_PROC		6531143						
ANR	6531249	Symbol	pid		6531143						
ANR	6531250	Symbol	& kpl		6531143						
ANR	6531251	Function	xnu_info	470:0:11217:12016							
ANR	6531252	FunctionDef	"xnu_info (RDebug * dbg , const char * arg)"		6531251	0					
ANR	6531253	CompoundStatement		470:52:11269:12016	6531251	0					
ANR	6531254	IdentifierDeclStatement	struct kinfo_proc kp ;	471:1:11272:11292	6531251	0	True				
ANR	6531255	IdentifierDecl	kp		6531251	0					
ANR	6531256	IdentifierDeclType	struct kinfo_proc		6531251	0					
ANR	6531257	Identifier	kp		6531251	1					
ANR	6531258	IdentifierDeclStatement	int kinfo_proc_error = 0 ;	472:1:11325:11349	6531251	1	True				
ANR	6531259	IdentifierDecl	kinfo_proc_error = 0		6531251	0					
ANR	6531260	IdentifierDeclType	int		6531251	0					
ANR	6531261	Identifier	kinfo_proc_error		6531251	1					
ANR	6531262	AssignmentExpression	kinfo_proc_error = 0		6531251	2		=			
ANR	6531263	Identifier	kinfo_proc_error		6531251	0					
ANR	6531264	PrimaryExpression	0		6531251	1					
ANR	6531265	IdentifierDeclStatement	RDebugInfo * rdi = R_NEW0 ( RDebugInfo ) ;	473:1:11352:11389	6531251	2	True				
ANR	6531266	IdentifierDecl	* rdi = R_NEW0 ( RDebugInfo )		6531251	0					
ANR	6531267	IdentifierDeclType	RDebugInfo *		6531251	0					
ANR	6531268	Identifier	rdi		6531251	1					
ANR	6531269	AssignmentExpression	* rdi = R_NEW0 ( RDebugInfo )		6531251	2		=			
ANR	6531270	Identifier	rdi		6531251	0					
ANR	6531271	CallExpression	R_NEW0 ( RDebugInfo )		6531251	1					
ANR	6531272	Callee	R_NEW0		6531251	0					
ANR	6531273	Identifier	R_NEW0		6531251	0					
ANR	6531274	ArgumentList	RDebugInfo		6531251	1					
ANR	6531275	Argument	RDebugInfo		6531251	0					
ANR	6531276	Identifier	RDebugInfo		6531251	0					
ANR	6531277	IfStatement	if ( ! rdi )		6531251	3					
ANR	6531278	Condition	! rdi	474:5:11396:11399	6531251	0	True				
ANR	6531279	UnaryOperationExpression	! rdi		6531251	0					
ANR	6531280	UnaryOperator	!		6531251	0					
ANR	6531281	Identifier	rdi		6531251	1					
ANR	6531282	ReturnStatement	return NULL ;	474:11:11402:11413	6531251	1	True				
ANR	6531283	Identifier	NULL		6531251	0					
ANR	6531284	ExpressionStatement	"kinfo_proc_error = xnu_get_kinfo_proc ( dbg -> pid , & kp )"	476:1:11417:11469	6531251	4	True				
ANR	6531285	AssignmentExpression	"kinfo_proc_error = xnu_get_kinfo_proc ( dbg -> pid , & kp )"		6531251	0		=			
ANR	6531286	Identifier	kinfo_proc_error		6531251	0					
ANR	6531287	CallExpression	"xnu_get_kinfo_proc ( dbg -> pid , & kp )"		6531251	1					
ANR	6531288	Callee	xnu_get_kinfo_proc		6531251	0					
ANR	6531289	Identifier	xnu_get_kinfo_proc		6531251	0					
ANR	6531290	ArgumentList	dbg -> pid		6531251	1					
ANR	6531291	Argument	dbg -> pid		6531251	0					
ANR	6531292	PtrMemberAccess	dbg -> pid		6531251	0					
ANR	6531293	Identifier	dbg		6531251	0					
ANR	6531294	Identifier	pid		6531251	1					
ANR	6531295	Argument	& kp		6531251	1					
ANR	6531296	UnaryOperationExpression	& kp		6531251	0					
ANR	6531297	UnaryOperator	&		6531251	0					
ANR	6531298	Identifier	kp		6531251	1					
ANR	6531299	IfStatement	if ( kinfo_proc_error )		6531251	5					
ANR	6531300	Condition	kinfo_proc_error	478:5:11477:11492	6531251	0	True				
ANR	6531301	Identifier	kinfo_proc_error		6531251	0					
ANR	6531302	CompoundStatement		9:23:225:225	6531251	1					
ANR	6531303	ExpressionStatement	"eprintf ( ""Error while querying the process info to sysctl\\n"" )"	479:2:11499:11560	6531251	0	True				
ANR	6531304	CallExpression	"eprintf ( ""Error while querying the process info to sysctl\\n"" )"		6531251	0					
ANR	6531305	Callee	eprintf		6531251	0					
ANR	6531306	Identifier	eprintf		6531251	0					
ANR	6531307	ArgumentList	"""Error while querying the process info to sysctl\\n"""		6531251	1					
ANR	6531308	Argument	"""Error while querying the process info to sysctl\\n"""		6531251	0					
ANR	6531309	PrimaryExpression	"""Error while querying the process info to sysctl\\n"""		6531251	0					
ANR	6531310	ReturnStatement	return NULL ;	480:2:11564:11575	6531251	1	True				
ANR	6531311	Identifier	NULL		6531251	0					
ANR	6531312	ExpressionStatement	rdi -> status = R_DBG_PROC_SLEEP	482:1:11581:11611	6531251	6	True				
ANR	6531313	AssignmentExpression	rdi -> status = R_DBG_PROC_SLEEP		6531251	0		=			
ANR	6531314	PtrMemberAccess	rdi -> status		6531251	0					
ANR	6531315	Identifier	rdi		6531251	0					
ANR	6531316	Identifier	status		6531251	1					
ANR	6531317	Identifier	R_DBG_PROC_SLEEP		6531251	1					
ANR	6531318	ExpressionStatement	rdi -> pid = dbg -> pid	483:1:11632:11651	6531251	7	True				
ANR	6531319	AssignmentExpression	rdi -> pid = dbg -> pid		6531251	0		=			
ANR	6531320	PtrMemberAccess	rdi -> pid		6531251	0					
ANR	6531321	Identifier	rdi		6531251	0					
ANR	6531322	Identifier	pid		6531251	1					
ANR	6531323	PtrMemberAccess	dbg -> pid		6531251	1					
ANR	6531324	Identifier	dbg		6531251	0					
ANR	6531325	Identifier	pid		6531251	1					
ANR	6531326	ExpressionStatement	rdi -> tid = dbg -> tid	484:1:11654:11673	6531251	8	True				
ANR	6531327	AssignmentExpression	rdi -> tid = dbg -> tid		6531251	0		=			
ANR	6531328	PtrMemberAccess	rdi -> tid		6531251	0					
ANR	6531329	Identifier	rdi		6531251	0					
ANR	6531330	Identifier	tid		6531251	1					
ANR	6531331	PtrMemberAccess	dbg -> tid		6531251	1					
ANR	6531332	Identifier	dbg		6531251	0					
ANR	6531333	Identifier	tid		6531251	1					
ANR	6531334	ExpressionStatement	rdi -> uid = kp . kp_eproc . e_ucred . cr_uid	485:1:11676:11713	6531251	9	True				
ANR	6531335	AssignmentExpression	rdi -> uid = kp . kp_eproc . e_ucred . cr_uid		6531251	0		=			
ANR	6531336	PtrMemberAccess	rdi -> uid		6531251	0					
ANR	6531337	Identifier	rdi		6531251	0					
ANR	6531338	Identifier	uid		6531251	1					
ANR	6531339	MemberAccess	kp . kp_eproc . e_ucred . cr_uid		6531251	1					
ANR	6531340	MemberAccess	kp . kp_eproc . e_ucred		6531251	0					
ANR	6531341	MemberAccess	kp . kp_eproc		6531251	0					
ANR	6531342	Identifier	kp		6531251	0					
ANR	6531343	Identifier	kp_eproc		6531251	1					
ANR	6531344	Identifier	e_ucred		6531251	1					
ANR	6531345	Identifier	cr_uid		6531251	1					
ANR	6531346	ExpressionStatement	rdi -> gid = kp . kp_eproc . e_ucred . cr_gid	486:1:11716:11753	6531251	10	True				
ANR	6531347	AssignmentExpression	rdi -> gid = kp . kp_eproc . e_ucred . cr_gid		6531251	0		=			
ANR	6531348	PtrMemberAccess	rdi -> gid		6531251	0					
ANR	6531349	Identifier	rdi		6531251	0					
ANR	6531350	Identifier	gid		6531251	1					
ANR	6531351	MemberAccess	kp . kp_eproc . e_ucred . cr_gid		6531251	1					
ANR	6531352	MemberAccess	kp . kp_eproc . e_ucred		6531251	0					
ANR	6531353	MemberAccess	kp . kp_eproc		6531251	0					
ANR	6531354	Identifier	kp		6531251	0					
ANR	6531355	Identifier	kp_eproc		6531251	1					
ANR	6531356	Identifier	e_ucred		6531251	1					
ANR	6531357	Identifier	cr_gid		6531251	1					
ANR	6531358	IdentifierDeclStatement	char file_path [ MAXPATHLEN ] = { 0 } ;	488:1:11775:11807	6531251	11	True				
ANR	6531359	IdentifierDecl	file_path [ MAXPATHLEN ] = { 0 }		6531251	0					
ANR	6531360	IdentifierDeclType	char [ MAXPATHLEN ]		6531251	0					
ANR	6531361	Identifier	file_path		6531251	1					
ANR	6531362	Identifier	MAXPATHLEN		6531251	2					
ANR	6531363	AssignmentExpression	file_path [ MAXPATHLEN ] = { 0 }		6531251	3		=			
ANR	6531364	Identifier	MAXPATHLEN		6531251	0					
ANR	6531365	InitializerList	0		6531251	1					
ANR	6531366	PrimaryExpression	0		6531251	0					
ANR	6531367	IdentifierDeclStatement	int file_path_len ;	489:1:11810:11827	6531251	12	True				
ANR	6531368	IdentifierDecl	file_path_len		6531251	0					
ANR	6531369	IdentifierDeclType	int		6531251	0					
ANR	6531370	Identifier	file_path_len		6531251	1					
ANR	6531371	ExpressionStatement	"file_path_len = proc_pidpath ( rdi -> pid , file_path , sizeof ( file_path ) )"	490:1:11830:11900	6531251	13	True				
ANR	6531372	AssignmentExpression	"file_path_len = proc_pidpath ( rdi -> pid , file_path , sizeof ( file_path ) )"		6531251	0		=			
ANR	6531373	Identifier	file_path_len		6531251	0					
ANR	6531374	CallExpression	"proc_pidpath ( rdi -> pid , file_path , sizeof ( file_path ) )"		6531251	1					
ANR	6531375	Callee	proc_pidpath		6531251	0					
ANR	6531376	Identifier	proc_pidpath		6531251	0					
ANR	6531377	ArgumentList	rdi -> pid		6531251	1					
ANR	6531378	Argument	rdi -> pid		6531251	0					
ANR	6531379	PtrMemberAccess	rdi -> pid		6531251	0					
ANR	6531380	Identifier	rdi		6531251	0					
ANR	6531381	Identifier	pid		6531251	1					
ANR	6531382	Argument	file_path		6531251	1					
ANR	6531383	Identifier	file_path		6531251	0					
ANR	6531384	Argument	sizeof ( file_path )		6531251	2					
ANR	6531385	SizeofExpression	sizeof ( file_path )		6531251	0					
ANR	6531386	Sizeof	sizeof		6531251	0					
ANR	6531387	SizeofOperand	file_path		6531251	1					
ANR	6531388	IfStatement	if ( file_path_len > 0 )		6531251	14					
ANR	6531389	Condition	file_path_len > 0	491:5:11907:11923	6531251	0	True				
ANR	6531390	RelationalExpression	file_path_len > 0		6531251	0		>			
ANR	6531391	Identifier	file_path_len		6531251	0					
ANR	6531392	PrimaryExpression	0		6531251	1					
ANR	6531393	CompoundStatement		22:24:656:656	6531251	1					
ANR	6531394	ExpressionStatement	file_path [ file_path_len ] = 0	492:2:11930:11958	6531251	0	True				
ANR	6531395	AssignmentExpression	file_path [ file_path_len ] = 0		6531251	0		=			
ANR	6531396	ArrayIndexing	file_path [ file_path_len ]		6531251	0					
ANR	6531397	Identifier	file_path		6531251	0					
ANR	6531398	Identifier	file_path_len		6531251	1					
ANR	6531399	PrimaryExpression	0		6531251	1					
ANR	6531400	ExpressionStatement	rdi -> exe = strdup ( file_path )	493:2:11962:11991	6531251	1	True				
ANR	6531401	AssignmentExpression	rdi -> exe = strdup ( file_path )		6531251	0		=			
ANR	6531402	PtrMemberAccess	rdi -> exe		6531251	0					
ANR	6531403	Identifier	rdi		6531251	0					
ANR	6531404	Identifier	exe		6531251	1					
ANR	6531405	CallExpression	strdup ( file_path )		6531251	1					
ANR	6531406	Callee	strdup		6531251	0					
ANR	6531407	Identifier	strdup		6531251	0					
ANR	6531408	ArgumentList	file_path		6531251	1					
ANR	6531409	Argument	file_path		6531251	0					
ANR	6531410	Identifier	file_path		6531251	0					
ANR	6531411	ReturnStatement	return rdi ;	496:1:12004:12014	6531251	15	True				
ANR	6531412	Identifier	rdi		6531251	0					
ANR	6531413	ReturnType	RDebugInfo *		6531251	1					
ANR	6531414	Identifier	xnu_info		6531251	2					
ANR	6531415	ParameterList	"RDebug * dbg , const char * arg"		6531251	3					
ANR	6531416	Parameter	RDebug * dbg	470:22:11239:11249	6531251	0	True				
ANR	6531417	ParameterType	RDebug *		6531251	0					
ANR	6531418	Identifier	dbg		6531251	1					
ANR	6531419	Parameter	const char * arg	470:35:11252:11266	6531251	1	True				
ANR	6531420	ParameterType	const char *		6531251	0					
ANR	6531421	Identifier	arg		6531251	1					
ANR	6531422	CFGEntryNode	ENTRY		6531251		True				
ANR	6531423	CFGExitNode	EXIT		6531251		True				
ANR	6531424	Symbol	kinfo_proc_error		6531251						
ANR	6531425	Symbol	file_path		6531251						
ANR	6531426	Symbol	rdi -> status		6531251						
ANR	6531427	Symbol	kp . kp_eproc . e_ucred		6531251						
ANR	6531428	Symbol	rdi -> gid		6531251						
ANR	6531429	Symbol	RDebugInfo		6531251						
ANR	6531430	Symbol	proc_pidpath		6531251						
ANR	6531431	Symbol	& kp		6531251						
ANR	6531432	Symbol	MAXPATHLEN		6531251						
ANR	6531433	Symbol	* file_path_len		6531251						
ANR	6531434	Symbol	arg		6531251						
ANR	6531435	Symbol	file_path_len		6531251						
ANR	6531436	Symbol	kp . kp_eproc . e_ucred . cr_uid		6531251						
ANR	6531437	Symbol	xnu_get_kinfo_proc		6531251						
ANR	6531438	Symbol	* rdi		6531251						
ANR	6531439	Symbol	NULL		6531251						
ANR	6531440	Symbol	kp . kp_eproc		6531251						
ANR	6531441	Symbol	kp		6531251						
ANR	6531442	Symbol	dbg		6531251						
ANR	6531443	Symbol	* dbg		6531251						
ANR	6531444	Symbol	kp . kp_eproc . e_ucred . cr_gid		6531251						
ANR	6531445	Symbol	* file_path		6531251						
ANR	6531446	Symbol	dbg -> tid		6531251						
ANR	6531447	Symbol	R_NEW0		6531251						
ANR	6531448	Symbol	rdi -> pid		6531251						
ANR	6531449	Symbol	dbg -> pid		6531251						
ANR	6531450	Symbol	rdi		6531251						
ANR	6531451	Symbol	R_DBG_PROC_SLEEP		6531251						
ANR	6531452	Symbol	rdi -> exe		6531251						
ANR	6531453	Symbol	strdup		6531251						
ANR	6531454	Symbol	rdi -> uid		6531251						
ANR	6531455	Symbol	rdi -> tid		6531251						
ANR	6531456	Function	xnu_thread_list	514:0:12319:13195							
ANR	6531457	FunctionDef	"xnu_thread_list (RDebug * dbg , int pid , RList * list)"		6531456	0					
ANR	6531458	CompoundStatement		514:59:12378:13195	6531456	0					
ANR	6531459	Statement	define	516:2:12423:12428	6531456	0	True				
ANR	6531460	Statement	CPU_PC	516:9:12430:12435	6531456	1	True				
ANR	6531461	Statement	(	516:16:12437:12437	6531456	2	True				
ANR	6531462	Statement	dbg	516:17:12438:12440	6531456	3	True				
ANR	6531463	Statement	->	516:20:12441:12442	6531456	4	True				
ANR	6531464	Statement	bits	516:22:12443:12446	6531456	5	True				
ANR	6531465	Statement	==	516:27:12448:12449	6531456	6	True				
ANR	6531466	Statement	R_SYS_BITS_64	516:30:12451:12463	6531456	7	True				
ANR	6531467	Statement	)	516:43:12464:12464	6531456	8	True				
ANR	6531468	Statement	?	516:45:12466:12466	6531456	9	True				
ANR	6531469	Statement	state	517:2:12472:12476	6531456	10	True				
ANR	6531470	Statement	.	517:7:12477:12477	6531456	11	True				
ANR	6531471	Statement	ts_64	517:8:12478:12482	6531456	12	True				
ANR	6531472	Statement	.	517:13:12483:12483	6531456	13	True				
ANR	6531473	Label	__pc :	517:14:12484:12489	6531456	14	True				
ANR	6531474	Identifier	__pc		6531456	0					
ANR	6531475	Statement	state	517:21:12491:12495	6531456	15	True				
ANR	6531476	Statement	.	517:26:12496:12496	6531456	16	True				
ANR	6531477	Statement	ts_32	517:27:12497:12501	6531456	17	True				
ANR	6531478	Statement	.	517:32:12502:12502	6531456	18	True				
ANR	6531479	Statement	__pc	517:33:12503:12506	6531456	19	True				
ANR	6531480	IdentifierDeclStatement	RListIter * iter ;	524:1:12685:12700	6531456	20	True				
ANR	6531481	IdentifierDecl	* iter		6531456	0					
ANR	6531482	IdentifierDeclType	RListIter *		6531456	0					
ANR	6531483	Identifier	iter		6531456	1					
ANR	6531484	IdentifierDeclStatement	xnu_thread_t * thread ;	525:1:12703:12723	6531456	21	True				
ANR	6531485	IdentifierDecl	* thread		6531456	0					
ANR	6531486	IdentifierDeclType	xnu_thread_t *		6531456	0					
ANR	6531487	Identifier	thread		6531456	1					
ANR	6531488	IdentifierDeclStatement	R_REG_T state ;	526:1:12726:12739	6531456	22	True				
ANR	6531489	IdentifierDecl	state		6531456	0					
ANR	6531490	IdentifierDeclType	R_REG_T		6531456	0					
ANR	6531491	Identifier	state		6531456	1					
ANR	6531492	ExpressionStatement	xnu_update_thread_list ( dbg )	527:1:12742:12770	6531456	23	True				
ANR	6531493	CallExpression	xnu_update_thread_list ( dbg )		6531456	0					
ANR	6531494	Callee	xnu_update_thread_list		6531456	0					
ANR	6531495	Identifier	xnu_update_thread_list		6531456	0					
ANR	6531496	ArgumentList	dbg		6531456	1					
ANR	6531497	Argument	dbg		6531456	0					
ANR	6531498	Identifier	dbg		6531456	0					
ANR	6531499	ExpressionStatement	list -> free = ( RListFree ) & r_debug_pid_free	528:1:12773:12814	6531456	24	True				
ANR	6531500	AssignmentExpression	list -> free = ( RListFree ) & r_debug_pid_free		6531456	0		=			
ANR	6531501	PtrMemberAccess	list -> free		6531456	0					
ANR	6531502	Identifier	list		6531456	0					
ANR	6531503	Identifier	free		6531456	1					
ANR	6531504	CastExpression	( RListFree ) & r_debug_pid_free		6531456	1					
ANR	6531505	CastTarget	RListFree		6531456	0					
ANR	6531506	UnaryOperationExpression	& r_debug_pid_free		6531456	1					
ANR	6531507	UnaryOperator	&		6531456	0					
ANR	6531508	Identifier	r_debug_pid_free		6531456	1					
ANR	6531509	Statement	r_list_foreach	529:1:12817:12830	6531456	25	True				
ANR	6531510	Statement	(	529:16:12832:12832	6531456	26	True				
ANR	6531511	Statement	dbg	529:17:12833:12835	6531456	27	True				
ANR	6531512	Statement	->	529:20:12836:12837	6531456	28	True				
ANR	6531513	Statement	threads	529:22:12838:12844	6531456	29	True				
ANR	6531514	Statement	","	529:29:12845:12845	6531456	30	True				
ANR	6531515	Statement	iter	529:31:12847:12850	6531456	31	True				
ANR	6531516	Statement	","	529:35:12851:12851	6531456	32	True				
ANR	6531517	Statement	thread	529:37:12853:12858	6531456	33	True				
ANR	6531518	Statement	)	529:43:12859:12859	6531456	34	True				
ANR	6531519	CompoundStatement		16:45:482:482	6531456	35					
ANR	6531520	IfStatement	"if ( ! xnu_thread_get_gpr ( dbg , thread ) )"		6531456	0					
ANR	6531521	Condition	"! xnu_thread_get_gpr ( dbg , thread )"	530:6:12869:12901	6531456	0	True				
ANR	6531522	UnaryOperationExpression	"! xnu_thread_get_gpr ( dbg , thread )"		6531456	0					
ANR	6531523	UnaryOperator	!		6531456	0					
ANR	6531524	CallExpression	"xnu_thread_get_gpr ( dbg , thread )"		6531456	1					
ANR	6531525	Callee	xnu_thread_get_gpr		6531456	0					
ANR	6531526	Identifier	xnu_thread_get_gpr		6531456	0					
ANR	6531527	ArgumentList	dbg		6531456	1					
ANR	6531528	Argument	dbg		6531456	0					
ANR	6531529	Identifier	dbg		6531456	0					
ANR	6531530	Argument	thread		6531456	1					
ANR	6531531	Identifier	thread		6531456	0					
ANR	6531532	CompoundStatement		17:41:525:525	6531456	1					
ANR	6531533	ExpressionStatement	"eprintf ( ""Failed to get gpr registers xnu_thread_list\\n"" )"	531:3:12909:12966	6531456	0	True				
ANR	6531534	CallExpression	"eprintf ( ""Failed to get gpr registers xnu_thread_list\\n"" )"		6531456	0					
ANR	6531535	Callee	eprintf		6531456	0					
ANR	6531536	Identifier	eprintf		6531456	0					
ANR	6531537	ArgumentList	"""Failed to get gpr registers xnu_thread_list\\n"""		6531456	1					
ANR	6531538	Argument	"""Failed to get gpr registers xnu_thread_list\\n"""		6531456	0					
ANR	6531539	PrimaryExpression	"""Failed to get gpr registers xnu_thread_list\\n"""		6531456	0					
ANR	6531540	ContinueStatement	continue ;	532:3:12971:12979	6531456	1	True				
ANR	6531541	ExpressionStatement	thread -> state_size = sizeof ( thread -> gpr )	534:2:12987:13028	6531456	1	True				
ANR	6531542	AssignmentExpression	thread -> state_size = sizeof ( thread -> gpr )		6531456	0		=			
ANR	6531543	PtrMemberAccess	thread -> state_size		6531456	0					
ANR	6531544	Identifier	thread		6531456	0					
ANR	6531545	Identifier	state_size		6531456	1					
ANR	6531546	SizeofExpression	sizeof ( thread -> gpr )		6531456	1					
ANR	6531547	Sizeof	sizeof		6531456	0					
ANR	6531548	PtrMemberAccess	thread -> gpr		6531456	1					
ANR	6531549	Identifier	thread		6531456	0					
ANR	6531550	Identifier	gpr		6531456	1					
ANR	6531551	ExpressionStatement	"memcpy ( & state , & thread -> gpr , sizeof ( R_REG_T ) )"	535:2:13032:13079	6531456	2	True				
ANR	6531552	CallExpression	"memcpy ( & state , & thread -> gpr , sizeof ( R_REG_T ) )"		6531456	0					
ANR	6531553	Callee	memcpy		6531456	0					
ANR	6531554	Identifier	memcpy		6531456	0					
ANR	6531555	ArgumentList	& state		6531456	1					
ANR	6531556	Argument	& state		6531456	0					
ANR	6531557	UnaryOperationExpression	& state		6531456	0					
ANR	6531558	UnaryOperator	&		6531456	0					
ANR	6531559	Identifier	state		6531456	1					
ANR	6531560	Argument	& thread -> gpr		6531456	1					
ANR	6531561	UnaryOperationExpression	& thread -> gpr		6531456	0					
ANR	6531562	UnaryOperator	&		6531456	0					
ANR	6531563	PtrMemberAccess	thread -> gpr		6531456	1					
ANR	6531564	Identifier	thread		6531456	0					
ANR	6531565	Identifier	gpr		6531456	1					
ANR	6531566	Argument	sizeof ( R_REG_T )		6531456	2					
ANR	6531567	SizeofExpression	sizeof ( R_REG_T )		6531456	0					
ANR	6531568	Sizeof	sizeof		6531456	0					
ANR	6531569	SizeofOperand	R_REG_T		6531456	1					
ANR	6531570	ExpressionStatement	"r_list_append ( list , r_debug_pid_new ( thread -> name , thread -> port , getuid ( ) , 's' , CPU_PC ) )"	536:2:13083:13176	6531456	3	True				
ANR	6531571	CallExpression	"r_list_append ( list , r_debug_pid_new ( thread -> name , thread -> port , getuid ( ) , 's' , CPU_PC ) )"		6531456	0					
ANR	6531572	Callee	r_list_append		6531456	0					
ANR	6531573	Identifier	r_list_append		6531456	0					
ANR	6531574	ArgumentList	list		6531456	1					
ANR	6531575	Argument	list		6531456	0					
ANR	6531576	Identifier	list		6531456	0					
ANR	6531577	Argument	"r_debug_pid_new ( thread -> name , thread -> port , getuid ( ) , 's' , CPU_PC )"		6531456	1					
ANR	6531578	CallExpression	"r_debug_pid_new ( thread -> name , thread -> port , getuid ( ) , 's' , CPU_PC )"		6531456	0					
ANR	6531579	Callee	r_debug_pid_new		6531456	0					
ANR	6531580	Identifier	r_debug_pid_new		6531456	0					
ANR	6531581	ArgumentList	thread -> name		6531456	1					
ANR	6531582	Argument	thread -> name		6531456	0					
ANR	6531583	PtrMemberAccess	thread -> name		6531456	0					
ANR	6531584	Identifier	thread		6531456	0					
ANR	6531585	Identifier	name		6531456	1					
ANR	6531586	Argument	thread -> port		6531456	1					
ANR	6531587	PtrMemberAccess	thread -> port		6531456	0					
ANR	6531588	Identifier	thread		6531456	0					
ANR	6531589	Identifier	port		6531456	1					
ANR	6531590	Argument	getuid ( )		6531456	2					
ANR	6531591	CallExpression	getuid ( )		6531456	0					
ANR	6531592	Callee	getuid		6531456	0					
ANR	6531593	Identifier	getuid		6531456	0					
ANR	6531594	ArgumentList			6531456	1					
ANR	6531595	Argument	's'		6531456	3					
ANR	6531596	PrimaryExpression	's'		6531456	0					
ANR	6531597	Argument	CPU_PC		6531456	4					
ANR	6531598	Identifier	CPU_PC		6531456	0					
ANR	6531599	ReturnStatement	return list ;	539:1:13182:13193	6531456	36	True				
ANR	6531600	Identifier	list		6531456	0					
ANR	6531601	ReturnType	RList *		6531456	1					
ANR	6531602	Identifier	xnu_thread_list		6531456	2					
ANR	6531603	ParameterList	"RDebug * dbg , int pid , RList * list"		6531456	3					
ANR	6531604	Parameter	RDebug * dbg	514:24:12343:12353	6531456	0	True				
ANR	6531605	ParameterType	RDebug *		6531456	0					
ANR	6531606	Identifier	dbg		6531456	1					
ANR	6531607	Parameter	int pid	514:37:12356:12362	6531456	1	True				
ANR	6531608	ParameterType	int		6531456	0					
ANR	6531609	Identifier	pid		6531456	1					
ANR	6531610	Parameter	RList * list	514:46:12365:12375	6531456	2	True				
ANR	6531611	ParameterType	RList *		6531456	0					
ANR	6531612	Identifier	list		6531456	1					
ANR	6531613	CFGEntryNode	ENTRY		6531456		True				
ANR	6531614	CFGExitNode	EXIT		6531456		True				
ANR	6531615	CFGErrorNode	ERROR		6531456		True				
ANR	6531616	Symbol	& r_debug_pid_free		6531456						
ANR	6531617	Symbol	r_debug_pid_new		6531456						
ANR	6531618	Symbol	& thread -> gpr		6531456						
ANR	6531619	Symbol	xnu_thread_get_gpr		6531456						
ANR	6531620	Symbol	thread -> name		6531456						
ANR	6531621	Symbol	list -> free		6531456						
ANR	6531622	Symbol	& state		6531456						
ANR	6531623	Symbol	thread -> state_size		6531456						
ANR	6531624	Symbol	dbg		6531456						
ANR	6531625	Symbol	iter		6531456						
ANR	6531626	Symbol	pid		6531456						
ANR	6531627	Symbol	thread		6531456						
ANR	6531628	Symbol	list		6531456						
ANR	6531629	Symbol	CPU_PC		6531456						
ANR	6531630	Symbol	getuid		6531456						
ANR	6531631	Symbol	* list		6531456						
ANR	6531632	Symbol	* thread		6531456						
ANR	6531633	Symbol	thread -> gpr		6531456						
ANR	6531634	Symbol	state		6531456						
ANR	6531635	Symbol	thread -> port		6531456						
ANR	6531636	Function	unix_prot_to_darwin	543:0:13204:13386							
ANR	6531637	FunctionDef	unix_prot_to_darwin (int prot)		6531636	0					
ANR	6531638	CompoundStatement		543:47:13251:13386	6531636	0					
ANR	6531639	ReturnStatement	return ( ( prot & 1 << 4 ) ? VM_PROT_READ : 0 | ( prot & 1 << 2 ) ? VM_PROT_WRITE : 0 | ( prot & 1 << 1 ) ? VM_PROT_EXECUTE : 0 ) ;	544:2:13255:13384	6531636	0	True				
ANR	6531640	ConditionalExpression	( prot & 1 << 4 ) ? VM_PROT_READ : 0 | ( prot & 1 << 2 ) ? VM_PROT_WRITE : 0 | ( prot & 1 << 1 ) ? VM_PROT_EXECUTE : 0		6531636	0					
ANR	6531641	Condition	prot & 1 << 4		6531636	0					
ANR	6531642	BitAndExpression	prot & 1 << 4		6531636	0		&			
ANR	6531643	Identifier	prot		6531636	0					
ANR	6531644	ShiftExpression	1 << 4		6531636	1		<<			
ANR	6531645	PrimaryExpression	1		6531636	0					
ANR	6531646	PrimaryExpression	4		6531636	1					
ANR	6531647	Identifier	VM_PROT_READ		6531636	1					
ANR	6531648	ConditionalExpression	0 | ( prot & 1 << 2 ) ? VM_PROT_WRITE : 0 | ( prot & 1 << 1 ) ? VM_PROT_EXECUTE : 0		6531636	2					
ANR	6531649	Condition	0 | ( prot & 1 << 2 )		6531636	0					
ANR	6531650	InclusiveOrExpression	0 | ( prot & 1 << 2 )		6531636	0		|			
ANR	6531651	PrimaryExpression	0		6531636	0					
ANR	6531652	BitAndExpression	prot & 1 << 2		6531636	1		&			
ANR	6531653	Identifier	prot		6531636	0					
ANR	6531654	ShiftExpression	1 << 2		6531636	1		<<			
ANR	6531655	PrimaryExpression	1		6531636	0					
ANR	6531656	PrimaryExpression	2		6531636	1					
ANR	6531657	Identifier	VM_PROT_WRITE		6531636	1					
ANR	6531658	ConditionalExpression	0 | ( prot & 1 << 1 ) ? VM_PROT_EXECUTE : 0		6531636	2					
ANR	6531659	Condition	0 | ( prot & 1 << 1 )		6531636	0					
ANR	6531660	InclusiveOrExpression	0 | ( prot & 1 << 1 )		6531636	0		|			
ANR	6531661	PrimaryExpression	0		6531636	0					
ANR	6531662	BitAndExpression	prot & 1 << 1		6531636	1		&			
ANR	6531663	Identifier	prot		6531636	0					
ANR	6531664	ShiftExpression	1 << 1		6531636	1		<<			
ANR	6531665	PrimaryExpression	1		6531636	0					
ANR	6531666	PrimaryExpression	1		6531636	1					
ANR	6531667	Identifier	VM_PROT_EXECUTE		6531636	1					
ANR	6531668	PrimaryExpression	0		6531636	2					
ANR	6531669	ReturnType	static vm_prot_t		6531636	1					
ANR	6531670	Identifier	unix_prot_to_darwin		6531636	2					
ANR	6531671	ParameterList	int prot		6531636	3					
ANR	6531672	Parameter	int prot	543:37:13241:13248	6531636	0	True				
ANR	6531673	ParameterType	int		6531636	0					
ANR	6531674	Identifier	prot		6531636	1					
ANR	6531675	CFGEntryNode	ENTRY		6531636		True				
ANR	6531676	CFGExitNode	EXIT		6531636		True				
ANR	6531677	Symbol	prot		6531636						
ANR	6531678	Symbol	VM_PROT_EXECUTE		6531636						
ANR	6531679	Symbol	VM_PROT_READ		6531636						
ANR	6531680	Symbol	VM_PROT_WRITE		6531636						
ANR	6531681	Function	xnu_map_protect	550:0:13396:13802							
ANR	6531682	FunctionDef	"xnu_map_protect (RDebug * dbg , ut64 addr , int size , int perms)"		6531681	0					
ANR	6531683	CompoundStatement		550:66:13462:13802	6531681	0					
ANR	6531684	IdentifierDeclStatement	int ret ;	551:1:13465:13472	6531681	0	True				
ANR	6531685	IdentifierDecl	ret		6531681	0					
ANR	6531686	IdentifierDeclType	int		6531681	0					
ANR	6531687	Identifier	ret		6531681	1					
ANR	6531688	IdentifierDeclStatement	task_t task = pid_to_task ( dbg -> tid ) ;	552:1:13475:13511	6531681	1	True				
ANR	6531689	IdentifierDecl	task = pid_to_task ( dbg -> tid )		6531681	0					
ANR	6531690	IdentifierDeclType	task_t		6531681	0					
ANR	6531691	Identifier	task		6531681	1					
ANR	6531692	AssignmentExpression	task = pid_to_task ( dbg -> tid )		6531681	2		=			
ANR	6531693	Identifier	task		6531681	0					
ANR	6531694	CallExpression	pid_to_task ( dbg -> tid )		6531681	1					
ANR	6531695	Callee	pid_to_task		6531681	0					
ANR	6531696	Identifier	pid_to_task		6531681	0					
ANR	6531697	ArgumentList	dbg -> tid		6531681	1					
ANR	6531698	Argument	dbg -> tid		6531681	0					
ANR	6531699	PtrMemberAccess	dbg -> tid		6531681	0					
ANR	6531700	Identifier	dbg		6531681	0					
ANR	6531701	Identifier	tid		6531681	1					
ANR	6531702	Statement	define	553:1:13514:13519	6531681	2	True				
ANR	6531703	Statement	xwr2rwx	553:8:13521:13527	6531681	3	True				
ANR	6531704	Statement	(	553:15:13528:13528	6531681	4	True				
ANR	6531705	Statement	x	553:16:13529:13529	6531681	5	True				
ANR	6531706	Statement	)	553:17:13530:13530	6531681	6	True				
ANR	6531707	Statement	(	553:19:13532:13532	6531681	7	True				
ANR	6531708	Statement	(	553:20:13533:13533	6531681	8	True				
ANR	6531709	Statement	x	553:21:13534:13534	6531681	9	True				
ANR	6531710	Statement	&	553:22:13535:13535	6531681	10	True				
ANR	6531711	Statement	1	553:23:13536:13536	6531681	11	True				
ANR	6531712	Statement	)	553:24:13537:13537	6531681	12	True				
ANR	6531713	Statement	<<	553:25:13538:13539	6531681	13	True				
ANR	6531714	Statement	2	553:27:13540:13540	6531681	14	True				
ANR	6531715	Statement	)	553:28:13541:13541	6531681	15	True				
ANR	6531716	Statement	|	553:30:13543:13543	6531681	16	True				
ANR	6531717	Statement	(	553:32:13545:13545	6531681	17	True				
ANR	6531718	Statement	x	553:33:13546:13546	6531681	18	True				
ANR	6531719	Statement	&	553:34:13547:13547	6531681	19	True				
ANR	6531720	Statement	2	553:35:13548:13548	6531681	20	True				
ANR	6531721	Statement	)	553:36:13549:13549	6531681	21	True				
ANR	6531722	Statement	|	553:38:13551:13551	6531681	22	True				
ANR	6531723	Statement	(	553:40:13553:13553	6531681	23	True				
ANR	6531724	Statement	(	553:41:13554:13554	6531681	24	True				
ANR	6531725	Statement	x	553:42:13555:13555	6531681	25	True				
ANR	6531726	Statement	&	553:43:13556:13556	6531681	26	True				
ANR	6531727	Statement	4	553:44:13557:13557	6531681	27	True				
ANR	6531728	Statement	)	553:45:13558:13558	6531681	28	True				
ANR	6531729	Statement	>>	553:46:13559:13560	6531681	29	True				
ANR	6531730	Statement	2	553:48:13561:13561	6531681	30	True				
ANR	6531731	Statement	)	553:49:13562:13562	6531681	31	True				
ANR	6531732	IdentifierDeclStatement	int xnu_perms = xwr2rwx ( perms ) ;	554:1:13565:13596	6531681	32	True				
ANR	6531733	IdentifierDecl	xnu_perms = xwr2rwx ( perms )		6531681	0					
ANR	6531734	IdentifierDeclType	int		6531681	0					
ANR	6531735	Identifier	xnu_perms		6531681	1					
ANR	6531736	AssignmentExpression	xnu_perms = xwr2rwx ( perms )		6531681	2		=			
ANR	6531737	Identifier	xnu_perms		6531681	0					
ANR	6531738	CallExpression	xwr2rwx ( perms )		6531681	1					
ANR	6531739	Callee	xwr2rwx		6531681	0					
ANR	6531740	Identifier	xwr2rwx		6531681	0					
ANR	6531741	ArgumentList	perms		6531681	1					
ANR	6531742	Argument	perms		6531681	0					
ANR	6531743	Identifier	perms		6531681	0					
ANR	6531744	ExpressionStatement	"ret = mach_vm_protect ( task , ( vm_address_t ) addr , ( vm_size_t ) size , ( boolean_t ) 0 , xnu_perms )"	555:1:13599:13689	6531681	33	True				
ANR	6531745	AssignmentExpression	"ret = mach_vm_protect ( task , ( vm_address_t ) addr , ( vm_size_t ) size , ( boolean_t ) 0 , xnu_perms )"		6531681	0		=			
ANR	6531746	Identifier	ret		6531681	0					
ANR	6531747	CallExpression	"mach_vm_protect ( task , ( vm_address_t ) addr , ( vm_size_t ) size , ( boolean_t ) 0 , xnu_perms )"		6531681	1					
ANR	6531748	Callee	mach_vm_protect		6531681	0					
ANR	6531749	Identifier	mach_vm_protect		6531681	0					
ANR	6531750	ArgumentList	task		6531681	1					
ANR	6531751	Argument	task		6531681	0					
ANR	6531752	Identifier	task		6531681	0					
ANR	6531753	Argument	( vm_address_t ) addr		6531681	1					
ANR	6531754	CastExpression	( vm_address_t ) addr		6531681	0					
ANR	6531755	CastTarget	vm_address_t		6531681	0					
ANR	6531756	Identifier	addr		6531681	1					
ANR	6531757	Argument	( vm_size_t ) size		6531681	2					
ANR	6531758	CastExpression	( vm_size_t ) size		6531681	0					
ANR	6531759	CastTarget	vm_size_t		6531681	0					
ANR	6531760	Identifier	size		6531681	1					
ANR	6531761	Argument	( boolean_t ) 0		6531681	3					
ANR	6531762	CastExpression	( boolean_t ) 0		6531681	0					
ANR	6531763	CastTarget	boolean_t		6531681	0					
ANR	6531764	PrimaryExpression	0		6531681	1					
ANR	6531765	Argument	xnu_perms		6531681	4					
ANR	6531766	Identifier	xnu_perms		6531681	0					
ANR	6531767	IfStatement	if ( ret != KERN_SUCCESS )		6531681	34					
ANR	6531768	Condition	ret != KERN_SUCCESS	556:5:13721:13739	6531681	0	True				
ANR	6531769	EqualityExpression	ret != KERN_SUCCESS		6531681	0		!=			
ANR	6531770	Identifier	ret		6531681	0					
ANR	6531771	Identifier	KERN_SUCCESS		6531681	1					
ANR	6531772	CompoundStatement		7:26:279:279	6531681	1					
ANR	6531773	ExpressionStatement	"perror ( ""vm_protect"" )"	557:2:13746:13767	6531681	0	True				
ANR	6531774	CallExpression	"perror ( ""vm_protect"" )"		6531681	0					
ANR	6531775	Callee	perror		6531681	0					
ANR	6531776	Identifier	perror		6531681	0					
ANR	6531777	ArgumentList	"""vm_protect"""		6531681	1					
ANR	6531778	Argument	"""vm_protect"""		6531681	0					
ANR	6531779	PrimaryExpression	"""vm_protect"""		6531681	0					
ANR	6531780	ReturnStatement	return false ;	558:2:13771:13783	6531681	1	True				
ANR	6531781	Identifier	false		6531681	0					
ANR	6531782	ReturnStatement	return true ;	560:1:13789:13800	6531681	35	True				
ANR	6531783	Identifier	true		6531681	0					
ANR	6531784	ReturnType	int		6531681	1					
ANR	6531785	Identifier	xnu_map_protect		6531681	2					
ANR	6531786	ParameterList	"RDebug * dbg , ut64 addr , int size , int perms"		6531681	3					
ANR	6531787	Parameter	RDebug * dbg	550:21:13417:13427	6531681	0	True				
ANR	6531788	ParameterType	RDebug *		6531681	0					
ANR	6531789	Identifier	dbg		6531681	1					
ANR	6531790	Parameter	ut64 addr	550:34:13430:13438	6531681	1	True				
ANR	6531791	ParameterType	ut64		6531681	0					
ANR	6531792	Identifier	addr		6531681	1					
ANR	6531793	Parameter	int size	550:45:13441:13448	6531681	2	True				
ANR	6531794	ParameterType	int		6531681	0					
ANR	6531795	Identifier	size		6531681	1					
ANR	6531796	Parameter	int perms	550:55:13451:13459	6531681	3	True				
ANR	6531797	ParameterType	int		6531681	0					
ANR	6531798	Identifier	perms		6531681	1					
ANR	6531799	CFGEntryNode	ENTRY		6531681		True				
ANR	6531800	CFGExitNode	EXIT		6531681		True				
ANR	6531801	Symbol	ret		6531681						
ANR	6531802	Symbol	mach_vm_protect		6531681						
ANR	6531803	Symbol	xnu_perms		6531681						
ANR	6531804	Symbol	dbg		6531681						
ANR	6531805	Symbol	false		6531681						
ANR	6531806	Symbol	* dbg		6531681						
ANR	6531807	Symbol	xwr2rwx		6531681						
ANR	6531808	Symbol	dbg -> tid		6531681						
ANR	6531809	Symbol	pid_to_task		6531681						
ANR	6531810	Symbol	task		6531681						
ANR	6531811	Symbol	size		6531681						
ANR	6531812	Symbol	true		6531681						
ANR	6531813	Symbol	perms		6531681						
ANR	6531814	Symbol	KERN_SUCCESS		6531681						
ANR	6531815	Symbol	addr		6531681						
ANR	6531816	Function	pid_to_task	563:0:13805:15075							
ANR	6531817	FunctionDef	pid_to_task (int pid)		6531816	0					
ANR	6531818	CompoundStatement		563:29:13834:15075	6531816	0					
ANR	6531819	Statement	static	564:1:13837:13842	6531816	0	True				
ANR	6531820	IdentifierDeclStatement	int old_pid = - 1 ;	564:8:13844:13860	6531816	1	True				
ANR	6531821	IdentifierDecl	old_pid = - 1		6531816	0					
ANR	6531822	IdentifierDeclType	int		6531816	0					
ANR	6531823	Identifier	old_pid		6531816	1					
ANR	6531824	AssignmentExpression	old_pid = - 1		6531816	2		=			
ANR	6531825	Identifier	old_pid		6531816	0					
ANR	6531826	UnaryOperationExpression	- 1		6531816	1					
ANR	6531827	UnaryOperator	-		6531816	0					
ANR	6531828	PrimaryExpression	1		6531816	1					
ANR	6531829	IdentifierDeclStatement	kern_return_t kr ;	565:1:13863:13879	6531816	2	True				
ANR	6531830	IdentifierDecl	kr		6531816	0					
ANR	6531831	IdentifierDeclType	kern_return_t		6531816	0					
ANR	6531832	Identifier	kr		6531816	1					
ANR	6531833	IdentifierDeclStatement	task_t task = - 1 ;	566:1:13882:13898	6531816	3	True				
ANR	6531834	IdentifierDecl	task = - 1		6531816	0					
ANR	6531835	IdentifierDeclType	task_t		6531816	0					
ANR	6531836	Identifier	task		6531816	1					
ANR	6531837	AssignmentExpression	task = - 1		6531816	2		=			
ANR	6531838	Identifier	task		6531816	0					
ANR	6531839	UnaryOperationExpression	- 1		6531816	1					
ANR	6531840	UnaryOperator	-		6531816	0					
ANR	6531841	PrimaryExpression	1		6531816	1					
ANR	6531842	IdentifierDeclStatement	int err ;	567:1:13901:13908	6531816	4	True				
ANR	6531843	IdentifierDecl	err		6531816	0					
ANR	6531844	IdentifierDeclType	int		6531816	0					
ANR	6531845	Identifier	err		6531816	1					
ANR	6531846	IfStatement	if ( task_dbg != 0 && old_pid == pid )		6531816	5					
ANR	6531847	Condition	task_dbg != 0 && old_pid == pid	569:5:13961:13991	6531816	0	True				
ANR	6531848	AndExpression	task_dbg != 0 && old_pid == pid		6531816	0		&&			
ANR	6531849	EqualityExpression	task_dbg != 0		6531816	0		!=			
ANR	6531850	Identifier	task_dbg		6531816	0					
ANR	6531851	PrimaryExpression	0		6531816	1					
ANR	6531852	EqualityExpression	old_pid == pid		6531816	1		==			
ANR	6531853	Identifier	old_pid		6531816	0					
ANR	6531854	Identifier	pid		6531816	1					
ANR	6531855	CompoundStatement		7:38:159:159	6531816	1					
ANR	6531856	ReturnStatement	return task_dbg ;	570:2:13998:14013	6531816	0	True				
ANR	6531857	Identifier	task_dbg		6531816	0					
ANR	6531858	IfStatement	if ( task_dbg != 0 && old_pid != pid )		6531816	6					
ANR	6531859	Condition	task_dbg != 0 && old_pid != pid	572:5:14023:14053	6531816	0	True				
ANR	6531860	AndExpression	task_dbg != 0 && old_pid != pid		6531816	0		&&			
ANR	6531861	EqualityExpression	task_dbg != 0		6531816	0		!=			
ANR	6531862	Identifier	task_dbg		6531816	0					
ANR	6531863	PrimaryExpression	0		6531816	1					
ANR	6531864	EqualityExpression	old_pid != pid		6531816	1		!=			
ANR	6531865	Identifier	old_pid		6531816	0					
ANR	6531866	Identifier	pid		6531816	1					
ANR	6531867	CompoundStatement		10:38:221:221	6531816	1					
ANR	6531868	ExpressionStatement	"kr = mach_port_deallocate ( mach_task_self ( ) , task_dbg )"	575:2:14170:14225	6531816	0	True				
ANR	6531869	AssignmentExpression	"kr = mach_port_deallocate ( mach_task_self ( ) , task_dbg )"		6531816	0		=			
ANR	6531870	Identifier	kr		6531816	0					
ANR	6531871	CallExpression	"mach_port_deallocate ( mach_task_self ( ) , task_dbg )"		6531816	1					
ANR	6531872	Callee	mach_port_deallocate		6531816	0					
ANR	6531873	Identifier	mach_port_deallocate		6531816	0					
ANR	6531874	ArgumentList	mach_task_self ( )		6531816	1					
ANR	6531875	Argument	mach_task_self ( )		6531816	0					
ANR	6531876	CallExpression	mach_task_self ( )		6531816	0					
ANR	6531877	Callee	mach_task_self		6531816	0					
ANR	6531878	Identifier	mach_task_self		6531816	0					
ANR	6531879	ArgumentList			6531816	1					
ANR	6531880	Argument	task_dbg		6531816	1					
ANR	6531881	Identifier	task_dbg		6531816	0					
ANR	6531882	IfStatement	if ( kr != KERN_SUCCESS )		6531816	1					
ANR	6531883	Condition	kr != KERN_SUCCESS	576:6:14233:14250	6531816	0	True				
ANR	6531884	EqualityExpression	kr != KERN_SUCCESS		6531816	0		!=			
ANR	6531885	Identifier	kr		6531816	0					
ANR	6531886	Identifier	KERN_SUCCESS		6531816	1					
ANR	6531887	CompoundStatement		14:26:418:418	6531816	1					
ANR	6531888	ExpressionStatement	"eprintf ( ""pid_to_task: fail to deallocate port\\n"" )"	577:3:14258:14308	6531816	0	True				
ANR	6531889	CallExpression	"eprintf ( ""pid_to_task: fail to deallocate port\\n"" )"		6531816	0					
ANR	6531890	Callee	eprintf		6531816	0					
ANR	6531891	Identifier	eprintf		6531816	0					
ANR	6531892	ArgumentList	"""pid_to_task: fail to deallocate port\\n"""		6531816	1					
ANR	6531893	Argument	"""pid_to_task: fail to deallocate port\\n"""		6531816	0					
ANR	6531894	PrimaryExpression	"""pid_to_task: fail to deallocate port\\n"""		6531816	0					
ANR	6531895	ExpressionStatement	"err = task_for_pid ( mach_task_self ( ) , ( pid_t ) pid , & task )"	583:1:14394:14451	6531816	7	True				
ANR	6531896	AssignmentExpression	"err = task_for_pid ( mach_task_self ( ) , ( pid_t ) pid , & task )"		6531816	0		=			
ANR	6531897	Identifier	err		6531816	0					
ANR	6531898	CallExpression	"task_for_pid ( mach_task_self ( ) , ( pid_t ) pid , & task )"		6531816	1					
ANR	6531899	Callee	task_for_pid		6531816	0					
ANR	6531900	Identifier	task_for_pid		6531816	0					
ANR	6531901	ArgumentList	mach_task_self ( )		6531816	1					
ANR	6531902	Argument	mach_task_self ( )		6531816	0					
ANR	6531903	CallExpression	mach_task_self ( )		6531816	0					
ANR	6531904	Callee	mach_task_self		6531816	0					
ANR	6531905	Identifier	mach_task_self		6531816	0					
ANR	6531906	ArgumentList			6531816	1					
ANR	6531907	Argument	( pid_t ) pid		6531816	1					
ANR	6531908	CastExpression	( pid_t ) pid		6531816	0					
ANR	6531909	CastTarget	pid_t		6531816	0					
ANR	6531910	Identifier	pid		6531816	1					
ANR	6531911	Argument	& task		6531816	2					
ANR	6531912	UnaryOperationExpression	& task		6531816	0					
ANR	6531913	UnaryOperator	&		6531816	0					
ANR	6531914	Identifier	task		6531816	1					
ANR	6531915	IfStatement	if ( ( err != KERN_SUCCESS ) || ! MACH_PORT_VALID ( task ) )		6531816	8					
ANR	6531916	Condition	( err != KERN_SUCCESS ) || ! MACH_PORT_VALID ( task )	584:5:14458:14505	6531816	0	True				
ANR	6531917	OrExpression	( err != KERN_SUCCESS ) || ! MACH_PORT_VALID ( task )		6531816	0		||			
ANR	6531918	EqualityExpression	err != KERN_SUCCESS		6531816	0		!=			
ANR	6531919	Identifier	err		6531816	0					
ANR	6531920	Identifier	KERN_SUCCESS		6531816	1					
ANR	6531921	UnaryOperationExpression	! MACH_PORT_VALID ( task )		6531816	1					
ANR	6531922	UnaryOperator	!		6531816	0					
ANR	6531923	CallExpression	MACH_PORT_VALID ( task )		6531816	1					
ANR	6531924	Callee	MACH_PORT_VALID		6531816	0					
ANR	6531925	Identifier	MACH_PORT_VALID		6531816	0					
ANR	6531926	ArgumentList	task		6531816	1					
ANR	6531927	Argument	task		6531816	0					
ANR	6531928	Identifier	task		6531816	0					
ANR	6531929	CompoundStatement		22:55:673:673	6531816	1					
ANR	6531930	ExpressionStatement	task = task_for_pid_workaround ( pid )	585:2:14512:14548	6531816	0	True				
ANR	6531931	AssignmentExpression	task = task_for_pid_workaround ( pid )		6531816	0		=			
ANR	6531932	Identifier	task		6531816	0					
ANR	6531933	CallExpression	task_for_pid_workaround ( pid )		6531816	1					
ANR	6531934	Callee	task_for_pid_workaround		6531816	0					
ANR	6531935	Identifier	task_for_pid_workaround		6531816	0					
ANR	6531936	ArgumentList	pid		6531816	1					
ANR	6531937	Argument	pid		6531816	0					
ANR	6531938	Identifier	pid		6531816	0					
ANR	6531939	IfStatement	if ( task == 0 )		6531816	1					
ANR	6531940	Condition	task == 0	586:6:14556:14564	6531816	0	True				
ANR	6531941	EqualityExpression	task == 0		6531816	0		==			
ANR	6531942	Identifier	task		6531816	0					
ANR	6531943	PrimaryExpression	0		6531816	1					
ANR	6531944	CompoundStatement		24:17:732:732	6531816	1					
ANR	6531945	ExpressionStatement	task = task_for_pid_ios9pangu ( pid )	587:3:14572:14607	6531816	0	True				
ANR	6531946	AssignmentExpression	task = task_for_pid_ios9pangu ( pid )		6531816	0		=			
ANR	6531947	Identifier	task		6531816	0					
ANR	6531948	CallExpression	task_for_pid_ios9pangu ( pid )		6531816	1					
ANR	6531949	Callee	task_for_pid_ios9pangu		6531816	0					
ANR	6531950	Identifier	task_for_pid_ios9pangu		6531816	0					
ANR	6531951	ArgumentList	pid		6531816	1					
ANR	6531952	Argument	pid		6531816	0					
ANR	6531953	Identifier	pid		6531816	0					
ANR	6531954	IfStatement	if ( task != MACH_PORT_NULL )		6531816	1					
ANR	6531955	Condition	task != MACH_PORT_NULL	588:7:14616:14637	6531816	0	True				
ANR	6531956	EqualityExpression	task != MACH_PORT_NULL		6531816	0		!=			
ANR	6531957	Identifier	task		6531816	0					
ANR	6531958	Identifier	MACH_PORT_NULL		6531816	1					
ANR	6531959	CompoundStatement		26:31:805:805	6531816	1					
ANR	6531960	IfStatement	if ( pid != - 1 )		6531816	0					
ANR	6531961	Condition	pid != - 1	589:8:14650:14658	6531816	0	True				
ANR	6531962	EqualityExpression	pid != - 1		6531816	0		!=			
ANR	6531963	Identifier	pid		6531816	0					
ANR	6531964	UnaryOperationExpression	- 1		6531816	1					
ANR	6531965	UnaryOperator	-		6531816	0					
ANR	6531966	PrimaryExpression	1		6531816	1					
ANR	6531967	CompoundStatement		27:19:826:826	6531816	1					
ANR	6531968	ExpressionStatement	"eprintf ( ""Failed to get task %d for pid %d.\\n"" , ( int ) task , ( int ) pid )"	590:5:14668:14743	6531816	0	True				
ANR	6531969	CallExpression	"eprintf ( ""Failed to get task %d for pid %d.\\n"" , ( int ) task , ( int ) pid )"		6531816	0					
ANR	6531970	Callee	eprintf		6531816	0					
ANR	6531971	Identifier	eprintf		6531816	0					
ANR	6531972	ArgumentList	"""Failed to get task %d for pid %d.\\n"""		6531816	1					
ANR	6531973	Argument	"""Failed to get task %d for pid %d.\\n"""		6531816	0					
ANR	6531974	PrimaryExpression	"""Failed to get task %d for pid %d.\\n"""		6531816	0					
ANR	6531975	Argument	( int ) task		6531816	1					
ANR	6531976	CastExpression	( int ) task		6531816	0					
ANR	6531977	CastTarget	int		6531816	0					
ANR	6531978	Identifier	task		6531816	1					
ANR	6531979	Argument	( int ) pid		6531816	2					
ANR	6531980	CastExpression	( int ) pid		6531816	0					
ANR	6531981	CastTarget	int		6531816	0					
ANR	6531982	Identifier	pid		6531816	1					
ANR	6531983	ExpressionStatement	"eprintf ( ""Reason: 0x%x: %s\\n"" , err , ( char * ) MACH_ERROR_STRING ( err ) )"	592:5:14750:14825	6531816	1	True				
ANR	6531984	CallExpression	"eprintf ( ""Reason: 0x%x: %s\\n"" , err , ( char * ) MACH_ERROR_STRING ( err ) )"		6531816	0					
ANR	6531985	Callee	eprintf		6531816	0					
ANR	6531986	Identifier	eprintf		6531816	0					
ANR	6531987	ArgumentList	"""Reason: 0x%x: %s\\n"""		6531816	1					
ANR	6531988	Argument	"""Reason: 0x%x: %s\\n"""		6531816	0					
ANR	6531989	PrimaryExpression	"""Reason: 0x%x: %s\\n"""		6531816	0					
ANR	6531990	Argument	err		6531816	1					
ANR	6531991	Identifier	err		6531816	0					
ANR	6531992	Argument	( char * ) MACH_ERROR_STRING ( err )		6531816	2					
ANR	6531993	CastExpression	( char * ) MACH_ERROR_STRING ( err )		6531816	0					
ANR	6531994	CastTarget	char *		6531816	0					
ANR	6531995	CallExpression	MACH_ERROR_STRING ( err )		6531816	1					
ANR	6531996	Callee	MACH_ERROR_STRING		6531816	0					
ANR	6531997	Identifier	MACH_ERROR_STRING		6531816	0					
ANR	6531998	ArgumentList	err		6531816	1					
ANR	6531999	Argument	err		6531816	0					
ANR	6532000	Identifier	err		6531816	0					
ANR	6532001	Statement	eprintf	595:4:14837:14843	6531816	1	True				
ANR	6532002	Statement	(	595:12:14845:14845	6531816	2	True				
ANR	6532003	Statement	"""You probably need to run as root or sign """	595:13:14846:14888	6531816	3	True				
ANR	6532004	Statement	"""the binary.\\n Read doc/ios.md || doc/macos.md\\n"""	596:5:14895:14943	6531816	4	True				
ANR	6532005	Statement	""" make -C binr/radare2 ios-sign || macos-sign\\n"""	597:5:14950:14997	6531816	5	True				
ANR	6532006	Statement	)	597:53:14998:14998	6531816	6	True				
ANR	6532007	ExpressionStatement		597:54:14999:14999	6531816	7	True				
ANR	6532008	ReturnStatement	return 0 ;	598:4:15005:15013	6531816	8	True				
ANR	6532009	PrimaryExpression	0		6531816	0					
ANR	6532010	ExpressionStatement	old_pid = pid	602:1:15028:15041	6531816	9	True				
ANR	6532011	AssignmentExpression	old_pid = pid		6531816	0		=			
ANR	6532012	Identifier	old_pid		6531816	0					
ANR	6532013	Identifier	pid		6531816	1					
ANR	6532014	ExpressionStatement	task_dbg = task	603:1:15044:15059	6531816	10	True				
ANR	6532015	AssignmentExpression	task_dbg = task		6531816	0		=			
ANR	6532016	Identifier	task_dbg		6531816	0					
ANR	6532017	Identifier	task		6531816	1					
ANR	6532018	ReturnStatement	return task ;	604:1:15062:15073	6531816	11	True				
ANR	6532019	Identifier	task		6531816	0					
ANR	6532020	ReturnType	task_t		6531816	1					
ANR	6532021	Identifier	pid_to_task		6531816	2					
ANR	6532022	ParameterList	int pid		6531816	3					
ANR	6532023	Parameter	int pid	563:20:13825:13831	6531816	0	True				
ANR	6532024	ParameterType	int		6531816	0					
ANR	6532025	Identifier	pid		6531816	1					
ANR	6532026	CFGEntryNode	ENTRY		6531816		True				
ANR	6532027	CFGExitNode	EXIT		6531816		True				
ANR	6532028	Symbol	MACH_ERROR_STRING		6531816						
ANR	6532029	Symbol	err		6531816						
ANR	6532030	Symbol	kr		6531816						
ANR	6532031	Symbol	MACH_PORT_VALID		6531816						
ANR	6532032	Symbol	pid		6531816						
ANR	6532033	Symbol	mach_port_deallocate		6531816						
ANR	6532034	Symbol	& task		6531816						
ANR	6532035	Symbol	task		6531816						
ANR	6532036	Symbol	task_for_pid_ios9pangu		6531816						
ANR	6532037	Symbol	mach_task_self		6531816						
ANR	6532038	Symbol	KERN_SUCCESS		6531816						
ANR	6532039	Symbol	task_for_pid		6531816						
ANR	6532040	Symbol	task_dbg		6531816						
ANR	6532041	Symbol	old_pid		6531816						
ANR	6532042	Symbol	task_for_pid_workaround		6531816						
ANR	6532043	Symbol	MACH_PORT_NULL		6531816						
ANR	6532044	Function	xnu_get_vmmap_entries_for_pid	607:0:15078:15725							
ANR	6532045	FunctionDef	xnu_get_vmmap_entries_for_pid (pid_t pid)		6532044	0					
ANR	6532046	CompoundStatement		607:46:15124:15725	6532044	0					
ANR	6532047	IdentifierDeclStatement	task_t task = pid_to_task ( pid ) ;	608:1:15127:15158	6532044	0	True				
ANR	6532048	IdentifierDecl	task = pid_to_task ( pid )		6532044	0					
ANR	6532049	IdentifierDeclType	task_t		6532044	0					
ANR	6532050	Identifier	task		6532044	1					
ANR	6532051	AssignmentExpression	task = pid_to_task ( pid )		6532044	2		=			
ANR	6532052	Identifier	task		6532044	0					
ANR	6532053	CallExpression	pid_to_task ( pid )		6532044	1					
ANR	6532054	Callee	pid_to_task		6532044	0					
ANR	6532055	Identifier	pid_to_task		6532044	0					
ANR	6532056	ArgumentList	pid		6532044	1					
ANR	6532057	Argument	pid		6532044	0					
ANR	6532058	Identifier	pid		6532044	0					
ANR	6532059	IdentifierDeclStatement	kern_return_t kr = KERN_SUCCESS ;	609:1:15161:15192	6532044	1	True				
ANR	6532060	IdentifierDecl	kr = KERN_SUCCESS		6532044	0					
ANR	6532061	IdentifierDeclType	kern_return_t		6532044	0					
ANR	6532062	Identifier	kr		6532044	1					
ANR	6532063	AssignmentExpression	kr = KERN_SUCCESS		6532044	2		=			
ANR	6532064	Identifier	KERN_SUCCESS		6532044	0					
ANR	6532065	Identifier	KERN_SUCCESS		6532044	1					
ANR	6532066	IdentifierDeclStatement	vm_address_t address = 0 ;	610:1:15195:15219	6532044	2	True				
ANR	6532067	IdentifierDecl	address = 0		6532044	0					
ANR	6532068	IdentifierDeclType	vm_address_t		6532044	0					
ANR	6532069	Identifier	address		6532044	1					
ANR	6532070	AssignmentExpression	address = 0		6532044	2		=			
ANR	6532071	Identifier	address		6532044	0					
ANR	6532072	PrimaryExpression	0		6532044	1					
ANR	6532073	IdentifierDeclStatement	vm_size_t size = 0 ;	611:1:15222:15240	6532044	3	True				
ANR	6532074	IdentifierDecl	size = 0		6532044	0					
ANR	6532075	IdentifierDeclType	vm_size_t		6532044	0					
ANR	6532076	Identifier	size		6532044	1					
ANR	6532077	AssignmentExpression	size = 0		6532044	2		=			
ANR	6532078	Identifier	size		6532044	0					
ANR	6532079	PrimaryExpression	0		6532044	1					
ANR	6532080	IdentifierDeclStatement	int n = 1 ;	612:1:15243:15252	6532044	4	True				
ANR	6532081	IdentifierDecl	n = 1		6532044	0					
ANR	6532082	IdentifierDeclType	int		6532044	0					
ANR	6532083	Identifier	n		6532044	1					
ANR	6532084	AssignmentExpression	n = 1		6532044	2		=			
ANR	6532085	Identifier	n		6532044	0					
ANR	6532086	PrimaryExpression	1		6532044	1					
ANR	6532087	ForStatement	for ( ; ; )		6532044	5					
ANR	6532088	CompoundStatement		11:2:216:234	6532044	0					
ANR	6532089	IdentifierDeclStatement	mach_msg_type_number_t count ;	615:2:15269:15297	6532044	0	True				
ANR	6532090	IdentifierDecl	count		6532044	0					
ANR	6532091	IdentifierDeclType	mach_msg_type_number_t		6532044	0					
ANR	6532092	Identifier	count		6532044	1					
ANR	6532093	IdentifierDeclStatement	struct vm_region_submap_info_64 info ;	616:2:15301:15337	6532044	1	True				
ANR	6532094	IdentifierDecl	info		6532044	0					
ANR	6532095	IdentifierDeclType	struct vm_region_submap_info_64		6532044	0					
ANR	6532096	Identifier	info		6532044	1					
ANR	6532097	IdentifierDeclStatement	ut32 nesting_depth ;	617:2:15341:15359	6532044	2	True				
ANR	6532098	IdentifierDecl	nesting_depth		6532044	0					
ANR	6532099	IdentifierDeclType	ut32		6532044	0					
ANR	6532100	Identifier	nesting_depth		6532044	1					
ANR	6532101	ExpressionStatement	count = VM_REGION_SUBMAP_INFO_COUNT_64	619:2:15364:15402	6532044	3	True				
ANR	6532102	AssignmentExpression	count = VM_REGION_SUBMAP_INFO_COUNT_64		6532044	0		=			
ANR	6532103	Identifier	count		6532044	0					
ANR	6532104	Identifier	VM_REGION_SUBMAP_INFO_COUNT_64		6532044	1					
ANR	6532105	ExpressionStatement	"kr = vm_region_recurse_64 ( task , & address , & size , & nesting_depth , ( vm_region_info_64_t ) & info , & count )"	620:2:15406:15510	6532044	4	True				
ANR	6532106	AssignmentExpression	"kr = vm_region_recurse_64 ( task , & address , & size , & nesting_depth , ( vm_region_info_64_t ) & info , & count )"		6532044	0		=			
ANR	6532107	Identifier	kr		6532044	0					
ANR	6532108	CallExpression	"vm_region_recurse_64 ( task , & address , & size , & nesting_depth , ( vm_region_info_64_t ) & info , & count )"		6532044	1					
ANR	6532109	Callee	vm_region_recurse_64		6532044	0					
ANR	6532110	Identifier	vm_region_recurse_64		6532044	0					
ANR	6532111	ArgumentList	task		6532044	1					
ANR	6532112	Argument	task		6532044	0					
ANR	6532113	Identifier	task		6532044	0					
ANR	6532114	Argument	& address		6532044	1					
ANR	6532115	UnaryOperationExpression	& address		6532044	0					
ANR	6532116	UnaryOperator	&		6532044	0					
ANR	6532117	Identifier	address		6532044	1					
ANR	6532118	Argument	& size		6532044	2					
ANR	6532119	UnaryOperationExpression	& size		6532044	0					
ANR	6532120	UnaryOperator	&		6532044	0					
ANR	6532121	Identifier	size		6532044	1					
ANR	6532122	Argument	& nesting_depth		6532044	3					
ANR	6532123	UnaryOperationExpression	& nesting_depth		6532044	0					
ANR	6532124	UnaryOperator	&		6532044	0					
ANR	6532125	Identifier	nesting_depth		6532044	1					
ANR	6532126	Argument	( vm_region_info_64_t ) & info		6532044	4					
ANR	6532127	CastExpression	( vm_region_info_64_t ) & info		6532044	0					
ANR	6532128	CastTarget	vm_region_info_64_t		6532044	0					
ANR	6532129	UnaryOperationExpression	& info		6532044	1					
ANR	6532130	UnaryOperator	&		6532044	0					
ANR	6532131	Identifier	info		6532044	1					
ANR	6532132	Argument	& count		6532044	5					
ANR	6532133	UnaryOperationExpression	& count		6532044	0					
ANR	6532134	UnaryOperator	&		6532044	0					
ANR	6532135	Identifier	count		6532044	1					
ANR	6532136	IfStatement	if ( kr == KERN_INVALID_ADDRESS )		6532044	5					
ANR	6532137	Condition	kr == KERN_INVALID_ADDRESS	622:6:15518:15543	6532044	0	True				
ANR	6532138	EqualityExpression	kr == KERN_INVALID_ADDRESS		6532044	0		==			
ANR	6532139	Identifier	kr		6532044	0					
ANR	6532140	Identifier	KERN_INVALID_ADDRESS		6532044	1					
ANR	6532141	CompoundStatement		16:34:421:421	6532044	1					
ANR	6532142	BreakStatement	break ;	623:3:15551:15556	6532044	0	True				
ANR	6532143	IfStatement	if ( kr )		6532044	6					
ANR	6532144	Condition	kr	625:6:15568:15569	6532044	0	True				
ANR	6532145	Identifier	kr		6532044	0					
ANR	6532146	CompoundStatement		19:10:447:447	6532044	1					
ANR	6532147	ExpressionStatement	"mach_error ( ""vm_region:"" , kr )"	626:3:15577:15606	6532044	0	True				
ANR	6532148	CallExpression	"mach_error ( ""vm_region:"" , kr )"		6532044	0					
ANR	6532149	Callee	mach_error		6532044	0					
ANR	6532150	Identifier	mach_error		6532044	0					
ANR	6532151	ArgumentList	"""vm_region:"""		6532044	1					
ANR	6532152	Argument	"""vm_region:"""		6532044	0					
ANR	6532153	PrimaryExpression	"""vm_region:"""		6532044	0					
ANR	6532154	Argument	kr		6532044	1					
ANR	6532155	Identifier	kr		6532044	0					
ANR	6532156	BreakStatement	break ;	627:3:15611:15616	6532044	1	True				
ANR	6532157	IfStatement	if ( info . is_submap )		6532044	7					
ANR	6532158	Condition	info . is_submap	629:6:15628:15641	6532044	0	True				
ANR	6532159	MemberAccess	info . is_submap		6532044	0					
ANR	6532160	Identifier	info		6532044	0					
ANR	6532161	Identifier	is_submap		6532044	1					
ANR	6532162	CompoundStatement		23:22:519:519	6532044	1					
ANR	6532163	ExpressionStatement	nesting_depth ++	630:3:15649:15664	6532044	0	True				
ANR	6532164	PostIncDecOperationExpression	nesting_depth ++		6532044	0					
ANR	6532165	Identifier	nesting_depth		6532044	0					
ANR	6532166	IncDec	++		6532044	1					
ANR	6532167	ElseStatement	else		6532044	0					
ANR	6532168	CompoundStatement		25:9:550:550	6532044	0					
ANR	6532169	ExpressionStatement	address += size	632:3:15680:15695	6532044	0	True				
ANR	6532170	AssignmentExpression	address += size		6532044	0		+=			
ANR	6532171	Identifier	address		6532044	0					
ANR	6532172	Identifier	size		6532044	1					
ANR	6532173	ExpressionStatement	n ++	633:3:15701:15704	6532044	1	True				
ANR	6532174	PostIncDecOperationExpression	n ++		6532044	0					
ANR	6532175	Identifier	n		6532044	0					
ANR	6532176	IncDec	++		6532044	1					
ANR	6532177	ReturnStatement	return n ;	637:1:15715:15723	6532044	6	True				
ANR	6532178	Identifier	n		6532044	0					
ANR	6532179	ReturnType	int		6532044	1					
ANR	6532180	Identifier	xnu_get_vmmap_entries_for_pid		6532044	2					
ANR	6532181	ParameterList	pid_t pid		6532044	3					
ANR	6532182	Parameter	pid_t pid	607:35:15113:15121	6532044	0	True				
ANR	6532183	ParameterType	pid_t		6532044	0					
ANR	6532184	Identifier	pid		6532044	1					
ANR	6532185	CFGEntryNode	ENTRY		6532044		True				
ANR	6532186	CFGExitNode	EXIT		6532044		True				
ANR	6532187	InfiniteForNode	true		6532044		True				
ANR	6532188	Symbol	address		6532044						
ANR	6532189	Symbol	& info		6532044						
ANR	6532190	Symbol	info . is_submap		6532044						
ANR	6532191	Symbol	nesting_depth		6532044						
ANR	6532192	Symbol	kr		6532044						
ANR	6532193	Symbol	& nesting_depth		6532044						
ANR	6532194	Symbol	count		6532044						
ANR	6532195	Symbol	vm_region_recurse_64		6532044						
ANR	6532196	Symbol	pid		6532044						
ANR	6532197	Symbol	& size		6532044						
ANR	6532198	Symbol	KERN_INVALID_ADDRESS		6532044						
ANR	6532199	Symbol	n		6532044						
ANR	6532200	Symbol	task		6532044						
ANR	6532201	Symbol	pid_to_task		6532044						
ANR	6532202	Symbol	size		6532044						
ANR	6532203	Symbol	KERN_SUCCESS		6532044						
ANR	6532204	Symbol	& count		6532044						
ANR	6532205	Symbol	VM_REGION_SUBMAP_INFO_COUNT_64		6532044						
ANR	6532206	Symbol	info		6532044						
ANR	6532207	Symbol	& address		6532044						
ANR	6532208	Function	get_mach_header_sizes	646:0:15980:16394							
ANR	6532209	FunctionDef	"get_mach_header_sizes (size_t * mach_header_sz , size_t * segment_command_sz)"		6532208	0					
ANR	6532210	CompoundStatement		647:37:16076:16394	6532208	0					
ANR	6532211	ExpressionStatement	* mach_header_sz = sizeof ( struct mach_header_64 )	649:1:16107:16154	6532208	0	True				
ANR	6532212	AssignmentExpression	* mach_header_sz = sizeof ( struct mach_header_64 )		6532208	0		=			
ANR	6532213	UnaryOperationExpression	* mach_header_sz		6532208	0					
ANR	6532214	UnaryOperator	*		6532208	0					
ANR	6532215	Identifier	mach_header_sz		6532208	1					
ANR	6532216	SizeofExpression	sizeof ( struct mach_header_64 )		6532208	1					
ANR	6532217	Sizeof	sizeof		6532208	0					
ANR	6532218	SizeofOperand	struct mach_header_64		6532208	1					
ANR	6532219	ExpressionStatement	* segment_command_sz = sizeof ( struct segment_command_64 )	650:1:16157:16212	6532208	1	True				
ANR	6532220	AssignmentExpression	* segment_command_sz = sizeof ( struct segment_command_64 )		6532208	0		=			
ANR	6532221	UnaryOperationExpression	* segment_command_sz		6532208	0					
ANR	6532222	UnaryOperator	*		6532208	0					
ANR	6532223	Identifier	segment_command_sz		6532208	1					
ANR	6532224	SizeofExpression	sizeof ( struct segment_command_64 )		6532208	1					
ANR	6532225	Sizeof	sizeof		6532208	0					
ANR	6532226	SizeofOperand	struct segment_command_64		6532208	1					
ANR	6532227	ReturnType	static void		6532208	1					
ANR	6532228	Identifier	get_mach_header_sizes		6532208	2					
ANR	6532229	ParameterList	"size_t * mach_header_sz , size_t * segment_command_sz"		6532208	3					
ANR	6532230	Parameter	size_t * mach_header_sz	646:34:16014:16035	6532208	0	True				
ANR	6532231	ParameterType	size_t *		6532208	0					
ANR	6532232	Identifier	mach_header_sz		6532208	1					
ANR	6532233	Parameter	size_t * segment_command_sz	647:9:16048:16073	6532208	1	True				
ANR	6532234	ParameterType	size_t *		6532208	0					
ANR	6532235	Identifier	segment_command_sz		6532208	1					
ANR	6532236	CFGEntryNode	ENTRY		6532208		True				
ANR	6532237	CFGExitNode	EXIT		6532208		True				
ANR	6532238	Symbol	segment_command_sz		6532208						
ANR	6532239	Symbol	* segment_command_sz		6532208						
ANR	6532240	Symbol	mach_header_sz		6532208						
ANR	6532241	Symbol	* mach_header_sz		6532208						
ANR	6532242	Function	xnu_get_cpu_type	660:0:16461:16913							
ANR	6532243	FunctionDef	xnu_get_cpu_type (pid_t pid)		6532242	0					
ANR	6532244	CompoundStatement		660:47:16508:16913	6532242	0					
ANR	6532245	IdentifierDeclStatement	int mib [ CTL_MAXNAME ] ;	661:1:16511:16531	6532242	0	True				
ANR	6532246	IdentifierDecl	mib [ CTL_MAXNAME ]		6532242	0					
ANR	6532247	IdentifierDeclType	int [ CTL_MAXNAME ]		6532242	0					
ANR	6532248	Identifier	mib		6532242	1					
ANR	6532249	Identifier	CTL_MAXNAME		6532242	2					
ANR	6532250	IdentifierDeclStatement	size_t len = CTL_MAXNAME ;	662:1:16534:16558	6532242	1	True				
ANR	6532251	IdentifierDecl	len = CTL_MAXNAME		6532242	0					
ANR	6532252	IdentifierDeclType	size_t		6532242	0					
ANR	6532253	Identifier	len		6532242	1					
ANR	6532254	AssignmentExpression	len = CTL_MAXNAME		6532242	2		=			
ANR	6532255	Identifier	CTL_MAXNAME		6532242	0					
ANR	6532256	Identifier	CTL_MAXNAME		6532242	1					
ANR	6532257	IdentifierDeclStatement	cpu_type_t cpu_type ;	663:1:16561:16580	6532242	2	True				
ANR	6532258	IdentifierDecl	cpu_type		6532242	0					
ANR	6532259	IdentifierDeclType	cpu_type_t		6532242	0					
ANR	6532260	Identifier	cpu_type		6532242	1					
ANR	6532261	IdentifierDeclStatement	size_t cpu_type_len = sizeof ( cpu_type_t ) ;	664:1:16583:16624	6532242	3	True				
ANR	6532262	IdentifierDecl	cpu_type_len = sizeof ( cpu_type_t )		6532242	0					
ANR	6532263	IdentifierDeclType	size_t		6532242	0					
ANR	6532264	Identifier	cpu_type_len		6532242	1					
ANR	6532265	AssignmentExpression	cpu_type_len = sizeof ( cpu_type_t )		6532242	2		=			
ANR	6532266	Identifier	cpu_type_len		6532242	0					
ANR	6532267	SizeofExpression	sizeof ( cpu_type_t )		6532242	1					
ANR	6532268	Sizeof	sizeof		6532242	0					
ANR	6532269	SizeofOperand	cpu_type_t		6532242	1					
ANR	6532270	IfStatement	"if ( sysctlnametomib ( ""sysctl.proc_cputype"" , mib , & len ) == - 1 )"		6532242	4					
ANR	6532271	Condition	"sysctlnametomib ( ""sysctl.proc_cputype"" , mib , & len ) == - 1"	666:5:16632:16687	6532242	0	True				
ANR	6532272	EqualityExpression	"sysctlnametomib ( ""sysctl.proc_cputype"" , mib , & len ) == - 1"		6532242	0		==			
ANR	6532273	CallExpression	"sysctlnametomib ( ""sysctl.proc_cputype"" , mib , & len )"		6532242	0					
ANR	6532274	Callee	sysctlnametomib		6532242	0					
ANR	6532275	Identifier	sysctlnametomib		6532242	0					
ANR	6532276	ArgumentList	"""sysctl.proc_cputype"""		6532242	1					
ANR	6532277	Argument	"""sysctl.proc_cputype"""		6532242	0					
ANR	6532278	PrimaryExpression	"""sysctl.proc_cputype"""		6532242	0					
ANR	6532279	Argument	mib		6532242	1					
ANR	6532280	Identifier	mib		6532242	0					
ANR	6532281	Argument	& len		6532242	2					
ANR	6532282	UnaryOperationExpression	& len		6532242	0					
ANR	6532283	UnaryOperator	&		6532242	0					
ANR	6532284	Identifier	len		6532242	1					
ANR	6532285	UnaryOperationExpression	- 1		6532242	1					
ANR	6532286	UnaryOperator	-		6532242	0					
ANR	6532287	PrimaryExpression	1		6532242	1					
ANR	6532288	CompoundStatement		7:63:181:181	6532242	1					
ANR	6532289	ExpressionStatement	"perror ( ""sysctlnametomib"" )"	667:2:16694:16720	6532242	0	True				
ANR	6532290	CallExpression	"perror ( ""sysctlnametomib"" )"		6532242	0					
ANR	6532291	Callee	perror		6532242	0					
ANR	6532292	Identifier	perror		6532242	0					
ANR	6532293	ArgumentList	"""sysctlnametomib"""		6532242	1					
ANR	6532294	Argument	"""sysctlnametomib"""		6532242	0					
ANR	6532295	PrimaryExpression	"""sysctlnametomib"""		6532242	0					
ANR	6532296	ReturnStatement	return - 1 ;	668:2:16724:16733	6532242	1	True				
ANR	6532297	UnaryOperationExpression	- 1		6532242	0					
ANR	6532298	UnaryOperator	-		6532242	0					
ANR	6532299	PrimaryExpression	1		6532242	1					
ANR	6532300	ExpressionStatement	mib [ len ++ ] = pid	670:1:16739:16755	6532242	5	True				
ANR	6532301	AssignmentExpression	mib [ len ++ ] = pid		6532242	0		=			
ANR	6532302	ArrayIndexing	mib [ len ++ ]		6532242	0					
ANR	6532303	Identifier	mib		6532242	0					
ANR	6532304	PostIncDecOperationExpression	len ++		6532242	1					
ANR	6532305	Identifier	len		6532242	0					
ANR	6532306	IncDec	++		6532242	1					
ANR	6532307	Identifier	pid		6532242	1					
ANR	6532308	IfStatement	"if ( sysctl ( mib , len , & cpu_type , & cpu_type_len , NULL , 0 ) == - 1 )"		6532242	6					
ANR	6532309	Condition	"sysctl ( mib , len , & cpu_type , & cpu_type_len , NULL , 0 ) == - 1"	671:5:16762:16819	6532242	0	True				
ANR	6532310	EqualityExpression	"sysctl ( mib , len , & cpu_type , & cpu_type_len , NULL , 0 ) == - 1"		6532242	0		==			
ANR	6532311	CallExpression	"sysctl ( mib , len , & cpu_type , & cpu_type_len , NULL , 0 )"		6532242	0					
ANR	6532312	Callee	sysctl		6532242	0					
ANR	6532313	Identifier	sysctl		6532242	0					
ANR	6532314	ArgumentList	mib		6532242	1					
ANR	6532315	Argument	mib		6532242	0					
ANR	6532316	Identifier	mib		6532242	0					
ANR	6532317	Argument	len		6532242	1					
ANR	6532318	Identifier	len		6532242	0					
ANR	6532319	Argument	& cpu_type		6532242	2					
ANR	6532320	UnaryOperationExpression	& cpu_type		6532242	0					
ANR	6532321	UnaryOperator	&		6532242	0					
ANR	6532322	Identifier	cpu_type		6532242	1					
ANR	6532323	Argument	& cpu_type_len		6532242	3					
ANR	6532324	UnaryOperationExpression	& cpu_type_len		6532242	0					
ANR	6532325	UnaryOperator	&		6532242	0					
ANR	6532326	Identifier	cpu_type_len		6532242	1					
ANR	6532327	Argument	NULL		6532242	4					
ANR	6532328	Identifier	NULL		6532242	0					
ANR	6532329	Argument	0		6532242	5					
ANR	6532330	PrimaryExpression	0		6532242	0					
ANR	6532331	UnaryOperationExpression	- 1		6532242	1					
ANR	6532332	UnaryOperator	-		6532242	0					
ANR	6532333	PrimaryExpression	1		6532242	1					
ANR	6532334	CompoundStatement		12:65:313:313	6532242	1					
ANR	6532335	ExpressionStatement	"perror ( ""sysctl"" )"	672:2:16826:16843	6532242	0	True				
ANR	6532336	CallExpression	"perror ( ""sysctl"" )"		6532242	0					
ANR	6532337	Callee	perror		6532242	0					
ANR	6532338	Identifier	perror		6532242	0					
ANR	6532339	ArgumentList	"""sysctl"""		6532242	1					
ANR	6532340	Argument	"""sysctl"""		6532242	0					
ANR	6532341	PrimaryExpression	"""sysctl"""		6532242	0					
ANR	6532342	ReturnStatement	return - 1 ;	673:2:16847:16856	6532242	1	True				
ANR	6532343	UnaryOperationExpression	- 1		6532242	0					
ANR	6532344	UnaryOperator	-		6532242	0					
ANR	6532345	PrimaryExpression	1		6532242	1					
ANR	6532346	IfStatement	if ( cpu_type_len > 0 )		6532242	7					
ANR	6532347	Condition	cpu_type_len > 0	675:5:16866:16881	6532242	0	True				
ANR	6532348	RelationalExpression	cpu_type_len > 0		6532242	0		>			
ANR	6532349	Identifier	cpu_type_len		6532242	0					
ANR	6532350	PrimaryExpression	0		6532242	1					
ANR	6532351	ReturnStatement	return cpu_type ;	675:23:16884:16899	6532242	1	True				
ANR	6532352	Identifier	cpu_type		6532242	0					
ANR	6532353	ReturnStatement	return - 1 ;	676:1:16902:16911	6532242	8	True				
ANR	6532354	UnaryOperationExpression	- 1		6532242	0					
ANR	6532355	UnaryOperator	-		6532242	0					
ANR	6532356	PrimaryExpression	1		6532242	1					
ANR	6532357	ReturnType	static cpu_type_t		6532242	1					
ANR	6532358	Identifier	xnu_get_cpu_type		6532242	2					
ANR	6532359	ParameterList	pid_t pid		6532242	3					
ANR	6532360	Parameter	pid_t pid	660:36:16497:16505	6532242	0	True				
ANR	6532361	ParameterType	pid_t		6532242	0					
ANR	6532362	Identifier	pid		6532242	1					
ANR	6532363	CFGEntryNode	ENTRY		6532242		True				
ANR	6532364	CFGExitNode	EXIT		6532242		True				
ANR	6532365	Symbol	NULL		6532242						
ANR	6532366	Symbol	mib		6532242						
ANR	6532367	Symbol	pid		6532242						
ANR	6532368	Symbol	cpu_type_len		6532242						
ANR	6532369	Symbol	CTL_MAXNAME		6532242						
ANR	6532370	Symbol	* mib		6532242						
ANR	6532371	Symbol	& cpu_type		6532242						
ANR	6532372	Symbol	sysctl		6532242						
ANR	6532373	Symbol	sysctlnametomib		6532242						
ANR	6532374	Symbol	len		6532242						
ANR	6532375	Symbol	cpu_type		6532242						
ANR	6532376	Symbol	& cpu_type_len		6532242						
ANR	6532377	Symbol	& len		6532242						
ANR	6532378	Function	xnu_get_cpu_subtype	679:0:16916:17110							
ANR	6532379	FunctionDef	xnu_get_cpu_subtype ()		6532378	0					
ANR	6532380	CompoundStatement		679:44:16960:17110	6532378	0					
ANR	6532381	IdentifierDeclStatement	size_t size ;	680:1:16963:16974	6532378	0	True				
ANR	6532382	IdentifierDecl	size		6532378	0					
ANR	6532383	IdentifierDeclType	size_t		6532378	0					
ANR	6532384	Identifier	size		6532378	1					
ANR	6532385	IdentifierDeclStatement	cpu_subtype_t subtype ;	681:1:16977:16998	6532378	1	True				
ANR	6532386	IdentifierDecl	subtype		6532378	0					
ANR	6532387	IdentifierDeclType	cpu_subtype_t		6532378	0					
ANR	6532388	Identifier	subtype		6532378	1					
ANR	6532389	ExpressionStatement	size = sizeof ( cpu_subtype_t )	683:1:17002:17031	6532378	2	True				
ANR	6532390	AssignmentExpression	size = sizeof ( cpu_subtype_t )		6532378	0		=			
ANR	6532391	Identifier	size		6532378	0					
ANR	6532392	SizeofExpression	sizeof ( cpu_subtype_t )		6532378	1					
ANR	6532393	Sizeof	sizeof		6532378	0					
ANR	6532394	SizeofOperand	cpu_subtype_t		6532378	1					
ANR	6532395	ExpressionStatement	"sysctlbyname ( ""hw.cpusubtype"" , & subtype , & size , NULL , 0 )"	684:1:17034:17090	6532378	3	True				
ANR	6532396	CallExpression	"sysctlbyname ( ""hw.cpusubtype"" , & subtype , & size , NULL , 0 )"		6532378	0					
ANR	6532397	Callee	sysctlbyname		6532378	0					
ANR	6532398	Identifier	sysctlbyname		6532378	0					
ANR	6532399	ArgumentList	"""hw.cpusubtype"""		6532378	1					
ANR	6532400	Argument	"""hw.cpusubtype"""		6532378	0					
ANR	6532401	PrimaryExpression	"""hw.cpusubtype"""		6532378	0					
ANR	6532402	Argument	& subtype		6532378	1					
ANR	6532403	UnaryOperationExpression	& subtype		6532378	0					
ANR	6532404	UnaryOperator	&		6532378	0					
ANR	6532405	Identifier	subtype		6532378	1					
ANR	6532406	Argument	& size		6532378	2					
ANR	6532407	UnaryOperationExpression	& size		6532378	0					
ANR	6532408	UnaryOperator	&		6532378	0					
ANR	6532409	Identifier	size		6532378	1					
ANR	6532410	Argument	NULL		6532378	3					
ANR	6532411	Identifier	NULL		6532378	0					
ANR	6532412	Argument	0		6532378	4					
ANR	6532413	PrimaryExpression	0		6532378	0					
ANR	6532414	ReturnStatement	return subtype ;	686:1:17094:17108	6532378	4	True				
ANR	6532415	Identifier	subtype		6532378	0					
ANR	6532416	ReturnType	static cpu_subtype_t		6532378	1					
ANR	6532417	Identifier	xnu_get_cpu_subtype		6532378	2					
ANR	6532418	ParameterList			6532378	3					
ANR	6532419	CFGEntryNode	ENTRY		6532378		True				
ANR	6532420	CFGExitNode	EXIT		6532378		True				
ANR	6532421	Symbol	NULL		6532378						
ANR	6532422	Symbol	size		6532378						
ANR	6532423	Symbol	subtype		6532378						
ANR	6532424	Symbol	& size		6532378						
ANR	6532425	Symbol	& subtype		6532378						
ANR	6532426	Function	xnu_build_corefile_header	689:0:17113:17915							
ANR	6532427	FunctionDef	"xnu_build_corefile_header (vm_offset_t header , int segment_count , int thread_count , int command_size , pid_t pid)"		6532426	0					
ANR	6532428	CompoundStatement		690:67:17239:17915	6532426	0					
ANR	6532429	IdentifierDeclStatement	struct mach_header_64 * mh64 ;	692:1:17270:17297	6532426	0	True				
ANR	6532430	IdentifierDecl	* mh64		6532426	0					
ANR	6532431	IdentifierDeclType	struct mach_header_64 *		6532426	0					
ANR	6532432	Identifier	mh64		6532426	1					
ANR	6532433	ExpressionStatement	mh64 = ( struct mach_header_64 * ) header	693:1:17300:17338	6532426	1	True				
ANR	6532434	AssignmentExpression	mh64 = ( struct mach_header_64 * ) header		6532426	0		=			
ANR	6532435	Identifier	mh64		6532426	0					
ANR	6532436	CastExpression	( struct mach_header_64 * ) header		6532426	1					
ANR	6532437	CastTarget	struct mach_header_64 *		6532426	0					
ANR	6532438	Identifier	header		6532426	1					
ANR	6532439	ExpressionStatement	mh64 -> magic = MH_MAGIC_64	694:1:17341:17366	6532426	2	True				
ANR	6532440	AssignmentExpression	mh64 -> magic = MH_MAGIC_64		6532426	0		=			
ANR	6532441	PtrMemberAccess	mh64 -> magic		6532426	0					
ANR	6532442	Identifier	mh64		6532426	0					
ANR	6532443	Identifier	magic		6532426	1					
ANR	6532444	Identifier	MH_MAGIC_64		6532426	1					
ANR	6532445	ExpressionStatement	mh64 -> cputype = xnu_get_cpu_type ( pid )	695:1:17369:17407	6532426	3	True				
ANR	6532446	AssignmentExpression	mh64 -> cputype = xnu_get_cpu_type ( pid )		6532426	0		=			
ANR	6532447	PtrMemberAccess	mh64 -> cputype		6532426	0					
ANR	6532448	Identifier	mh64		6532426	0					
ANR	6532449	Identifier	cputype		6532426	1					
ANR	6532450	CallExpression	xnu_get_cpu_type ( pid )		6532426	1					
ANR	6532451	Callee	xnu_get_cpu_type		6532426	0					
ANR	6532452	Identifier	xnu_get_cpu_type		6532426	0					
ANR	6532453	ArgumentList	pid		6532426	1					
ANR	6532454	Argument	pid		6532426	0					
ANR	6532455	Identifier	pid		6532426	0					
ANR	6532456	ExpressionStatement	mh64 -> cpusubtype = xnu_get_cpu_subtype ( )	696:1:17410:17451	6532426	4	True				
ANR	6532457	AssignmentExpression	mh64 -> cpusubtype = xnu_get_cpu_subtype ( )		6532426	0		=			
ANR	6532458	PtrMemberAccess	mh64 -> cpusubtype		6532426	0					
ANR	6532459	Identifier	mh64		6532426	0					
ANR	6532460	Identifier	cpusubtype		6532426	1					
ANR	6532461	CallExpression	xnu_get_cpu_subtype ( )		6532426	1					
ANR	6532462	Callee	xnu_get_cpu_subtype		6532426	0					
ANR	6532463	Identifier	xnu_get_cpu_subtype		6532426	0					
ANR	6532464	ArgumentList			6532426	1					
ANR	6532465	ExpressionStatement	mh64 -> filetype = MH_CORE	697:1:17455:17479	6532426	5	True				
ANR	6532466	AssignmentExpression	mh64 -> filetype = MH_CORE		6532426	0		=			
ANR	6532467	PtrMemberAccess	mh64 -> filetype		6532426	0					
ANR	6532468	Identifier	mh64		6532426	0					
ANR	6532469	Identifier	filetype		6532426	1					
ANR	6532470	Identifier	MH_CORE		6532426	1					
ANR	6532471	ExpressionStatement	mh64 -> ncmds = segment_count + thread_count	698:1:17482:17524	6532426	6	True				
ANR	6532472	AssignmentExpression	mh64 -> ncmds = segment_count + thread_count		6532426	0		=			
ANR	6532473	PtrMemberAccess	mh64 -> ncmds		6532426	0					
ANR	6532474	Identifier	mh64		6532426	0					
ANR	6532475	Identifier	ncmds		6532426	1					
ANR	6532476	AdditiveExpression	segment_count + thread_count		6532426	1		+			
ANR	6532477	Identifier	segment_count		6532426	0					
ANR	6532478	Identifier	thread_count		6532426	1					
ANR	6532479	ExpressionStatement	mh64 -> sizeofcmds = command_size	699:1:17527:17558	6532426	7	True				
ANR	6532480	AssignmentExpression	mh64 -> sizeofcmds = command_size		6532426	0		=			
ANR	6532481	PtrMemberAccess	mh64 -> sizeofcmds		6532426	0					
ANR	6532482	Identifier	mh64		6532426	0					
ANR	6532483	Identifier	sizeofcmds		6532426	1					
ANR	6532484	Identifier	command_size		6532426	1					
ANR	6532485	ExpressionStatement	mh64 -> reserved = 0	700:1:17561:17579	6532426	8	True				
ANR	6532486	AssignmentExpression	mh64 -> reserved = 0		6532426	0		=			
ANR	6532487	PtrMemberAccess	mh64 -> reserved		6532426	0					
ANR	6532488	Identifier	mh64		6532426	0					
ANR	6532489	Identifier	reserved		6532426	1					
ANR	6532490	PrimaryExpression	0		6532426	1					
ANR	6532491	ReturnType	static void		6532426	1					
ANR	6532492	Identifier	xnu_build_corefile_header		6532426	2					
ANR	6532493	ParameterList	"vm_offset_t header , int segment_count , int thread_count , int command_size , pid_t pid"		6532426	3					
ANR	6532494	Parameter	vm_offset_t header	689:39:17152:17169	6532426	0	True				
ANR	6532495	ParameterType	vm_offset_t		6532426	0					
ANR	6532496	Identifier	header		6532426	1					
ANR	6532497	Parameter	int segment_count	690:1:17173:17189	6532426	1	True				
ANR	6532498	ParameterType	int		6532426	0					
ANR	6532499	Identifier	segment_count		6532426	1					
ANR	6532500	Parameter	int thread_count	690:20:17192:17207	6532426	2	True				
ANR	6532501	ParameterType	int		6532426	0					
ANR	6532502	Identifier	thread_count		6532426	1					
ANR	6532503	Parameter	int command_size	690:38:17210:17225	6532426	3	True				
ANR	6532504	ParameterType	int		6532426	0					
ANR	6532505	Identifier	command_size		6532426	1					
ANR	6532506	Parameter	pid_t pid	690:56:17228:17236	6532426	4	True				
ANR	6532507	ParameterType	pid_t		6532426	0					
ANR	6532508	Identifier	pid		6532426	1					
ANR	6532509	CFGEntryNode	ENTRY		6532426		True				
ANR	6532510	CFGExitNode	EXIT		6532426		True				
ANR	6532511	Symbol	mh64 -> sizeofcmds		6532426						
ANR	6532512	Symbol	mh64 -> filetype		6532426						
ANR	6532513	Symbol	mh64 -> ncmds		6532426						
ANR	6532514	Symbol	MH_MAGIC_64		6532426						
ANR	6532515	Symbol	xnu_get_cpu_subtype		6532426						
ANR	6532516	Symbol	pid		6532426						
ANR	6532517	Symbol	mh64		6532426						
ANR	6532518	Symbol	command_size		6532426						
ANR	6532519	Symbol	mh64 -> magic		6532426						
ANR	6532520	Symbol	* mh64		6532426						
ANR	6532521	Symbol	segment_count		6532426						
ANR	6532522	Symbol	xnu_get_cpu_type		6532426						
ANR	6532523	Symbol	mh64 -> reserved		6532426						
ANR	6532524	Symbol	MH_CORE		6532426						
ANR	6532525	Symbol	header		6532426						
ANR	6532526	Symbol	mh64 -> cpusubtype		6532426						
ANR	6532527	Symbol	thread_count		6532426						
ANR	6532528	Symbol	mh64 -> cputype		6532426						
ANR	6532529	Function	xnu_dealloc_threads	713:0:17918:18481							
ANR	6532530	FunctionDef	xnu_dealloc_threads (RList * threads)		6532529	0					
ANR	6532531	CompoundStatement		713:48:17966:18481	6532529	0					
ANR	6532532	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	714:1:17969:17992	6532529	0	True				
ANR	6532533	IdentifierDecl	* iter		6532529	0					
ANR	6532534	IdentifierDeclType	RListIter *		6532529	0					
ANR	6532535	Identifier	iter		6532529	1					
ANR	6532536	IdentifierDecl	* iter2		6532529	1					
ANR	6532537	IdentifierDeclType	RListIter *		6532529	0					
ANR	6532538	Identifier	iter2		6532529	1					
ANR	6532539	IdentifierDeclStatement	xnu_thread_t * thread ;	715:1:17995:18015	6532529	1	True				
ANR	6532540	IdentifierDecl	* thread		6532529	0					
ANR	6532541	IdentifierDeclType	xnu_thread_t *		6532529	0					
ANR	6532542	Identifier	thread		6532529	1					
ANR	6532543	IdentifierDeclStatement	mach_msg_type_number_t thread_count ;	716:1:18018:18053	6532529	2	True				
ANR	6532544	IdentifierDecl	thread_count		6532529	0					
ANR	6532545	IdentifierDeclType	mach_msg_type_number_t		6532529	0					
ANR	6532546	Identifier	thread_count		6532529	1					
ANR	6532547	IdentifierDeclStatement	thread_array_t thread_list ;	717:1:18056:18082	6532529	3	True				
ANR	6532548	IdentifierDecl	thread_list		6532529	0					
ANR	6532549	IdentifierDeclType	thread_array_t		6532529	0					
ANR	6532550	Identifier	thread_list		6532529	1					
ANR	6532551	IdentifierDeclStatement	kern_return_t kr = KERN_SUCCESS ;	718:1:18085:18116	6532529	4	True				
ANR	6532552	IdentifierDecl	kr = KERN_SUCCESS		6532529	0					
ANR	6532553	IdentifierDeclType	kern_return_t		6532529	0					
ANR	6532554	Identifier	kr		6532529	1					
ANR	6532555	AssignmentExpression	kr = KERN_SUCCESS		6532529	2		=			
ANR	6532556	Identifier	KERN_SUCCESS		6532529	0					
ANR	6532557	Identifier	KERN_SUCCESS		6532529	1					
ANR	6532558	ExpressionStatement	"kr = task_threads ( task_dbg , & thread_list , & thread_count )"	720:1:18120:18177	6532529	5	True				
ANR	6532559	AssignmentExpression	"kr = task_threads ( task_dbg , & thread_list , & thread_count )"		6532529	0		=			
ANR	6532560	Identifier	kr		6532529	0					
ANR	6532561	CallExpression	"task_threads ( task_dbg , & thread_list , & thread_count )"		6532529	1					
ANR	6532562	Callee	task_threads		6532529	0					
ANR	6532563	Identifier	task_threads		6532529	0					
ANR	6532564	ArgumentList	task_dbg		6532529	1					
ANR	6532565	Argument	task_dbg		6532529	0					
ANR	6532566	Identifier	task_dbg		6532529	0					
ANR	6532567	Argument	& thread_list		6532529	1					
ANR	6532568	UnaryOperationExpression	& thread_list		6532529	0					
ANR	6532569	UnaryOperator	&		6532529	0					
ANR	6532570	Identifier	thread_list		6532529	1					
ANR	6532571	Argument	& thread_count		6532529	2					
ANR	6532572	UnaryOperationExpression	& thread_count		6532529	0					
ANR	6532573	UnaryOperator	&		6532529	0					
ANR	6532574	Identifier	thread_count		6532529	1					
ANR	6532575	IfStatement	if ( kr != KERN_SUCCESS )		6532529	6					
ANR	6532576	Condition	kr != KERN_SUCCESS	721:5:18184:18201	6532529	0	True				
ANR	6532577	EqualityExpression	kr != KERN_SUCCESS		6532529	0		!=			
ANR	6532578	Identifier	kr		6532529	0					
ANR	6532579	Identifier	KERN_SUCCESS		6532529	1					
ANR	6532580	CompoundStatement		9:25:237:237	6532529	1					
ANR	6532581	ExpressionStatement	"perror ( ""task_threads"" )"	722:2:18208:18231	6532529	0	True				
ANR	6532582	CallExpression	"perror ( ""task_threads"" )"		6532529	0					
ANR	6532583	Callee	perror		6532529	0					
ANR	6532584	Identifier	perror		6532529	0					
ANR	6532585	ArgumentList	"""task_threads"""		6532529	1					
ANR	6532586	Argument	"""task_threads"""		6532529	0					
ANR	6532587	PrimaryExpression	"""task_threads"""		6532529	0					
ANR	6532588	ElseStatement	else		6532529	0					
ANR	6532589	CompoundStatement		11:8:274:274	6532529	0					
ANR	6532590	Statement	r_list_foreach_safe	724:2:18245:18263	6532529	0	True				
ANR	6532591	Statement	(	724:22:18265:18265	6532529	1	True				
ANR	6532592	Statement	threads	724:23:18266:18272	6532529	2	True				
ANR	6532593	Statement	","	724:30:18273:18273	6532529	3	True				
ANR	6532594	Statement	iter	724:32:18275:18278	6532529	4	True				
ANR	6532595	Statement	","	724:36:18279:18279	6532529	5	True				
ANR	6532596	Statement	iter2	724:38:18281:18285	6532529	6	True				
ANR	6532597	Statement	","	724:43:18286:18286	6532529	7	True				
ANR	6532598	Statement	thread	724:45:18288:18293	6532529	8	True				
ANR	6532599	Statement	)	724:51:18294:18294	6532529	9	True				
ANR	6532600	CompoundStatement		12:53:329:329	6532529	10					
ANR	6532601	ExpressionStatement	"mach_port_deallocate ( mach_task_self ( ) , thread -> port )"	725:3:18301:18355	6532529	0	True				
ANR	6532602	CallExpression	"mach_port_deallocate ( mach_task_self ( ) , thread -> port )"		6532529	0					
ANR	6532603	Callee	mach_port_deallocate		6532529	0					
ANR	6532604	Identifier	mach_port_deallocate		6532529	0					
ANR	6532605	ArgumentList	mach_task_self ( )		6532529	1					
ANR	6532606	Argument	mach_task_self ( )		6532529	0					
ANR	6532607	CallExpression	mach_task_self ( )		6532529	0					
ANR	6532608	Callee	mach_task_self		6532529	0					
ANR	6532609	Identifier	mach_task_self		6532529	0					
ANR	6532610	ArgumentList			6532529	1					
ANR	6532611	Argument	thread -> port		6532529	1					
ANR	6532612	PtrMemberAccess	thread -> port		6532529	0					
ANR	6532613	Identifier	thread		6532529	0					
ANR	6532614	Identifier	port		6532529	1					
ANR	6532615	ExpressionStatement	"vm_deallocate ( mach_task_self ( ) , ( vm_address_t ) thread_list , thread_count * sizeof ( thread_act_t ) )"	727:2:18363:18464	6532529	11	True				
ANR	6532616	CallExpression	"vm_deallocate ( mach_task_self ( ) , ( vm_address_t ) thread_list , thread_count * sizeof ( thread_act_t ) )"		6532529	0					
ANR	6532617	Callee	vm_deallocate		6532529	0					
ANR	6532618	Identifier	vm_deallocate		6532529	0					
ANR	6532619	ArgumentList	mach_task_self ( )		6532529	1					
ANR	6532620	Argument	mach_task_self ( )		6532529	0					
ANR	6532621	CallExpression	mach_task_self ( )		6532529	0					
ANR	6532622	Callee	mach_task_self		6532529	0					
ANR	6532623	Identifier	mach_task_self		6532529	0					
ANR	6532624	ArgumentList			6532529	1					
ANR	6532625	Argument	( vm_address_t ) thread_list		6532529	1					
ANR	6532626	CastExpression	( vm_address_t ) thread_list		6532529	0					
ANR	6532627	CastTarget	vm_address_t		6532529	0					
ANR	6532628	Identifier	thread_list		6532529	1					
ANR	6532629	Argument	thread_count * sizeof ( thread_act_t )		6532529	2					
ANR	6532630	MultiplicativeExpression	thread_count * sizeof ( thread_act_t )		6532529	0		*			
ANR	6532631	Identifier	thread_count		6532529	0					
ANR	6532632	SizeofExpression	sizeof ( thread_act_t )		6532529	1					
ANR	6532633	Sizeof	sizeof		6532529	0					
ANR	6532634	SizeofOperand	thread_act_t		6532529	1					
ANR	6532635	ReturnStatement	return kr ;	730:1:18470:18479	6532529	7	True				
ANR	6532636	Identifier	kr		6532529	0					
ANR	6532637	ReturnType	static int		6532529	1					
ANR	6532638	Identifier	xnu_dealloc_threads		6532529	2					
ANR	6532639	ParameterList	RList * threads		6532529	3					
ANR	6532640	Parameter	RList * threads	713:32:17950:17963	6532529	0	True				
ANR	6532641	ParameterType	RList *		6532529	0					
ANR	6532642	Identifier	threads		6532529	1					
ANR	6532643	CFGEntryNode	ENTRY		6532529		True				
ANR	6532644	CFGExitNode	EXIT		6532529		True				
ANR	6532645	Symbol	task_threads		6532529						
ANR	6532646	Symbol	& thread_list		6532529						
ANR	6532647	Symbol	thread_list		6532529						
ANR	6532648	Symbol	iter2		6532529						
ANR	6532649	Symbol	kr		6532529						
ANR	6532650	Symbol	threads		6532529						
ANR	6532651	Symbol	iter		6532529						
ANR	6532652	Symbol	thread		6532529						
ANR	6532653	Symbol	mach_task_self		6532529						
ANR	6532654	Symbol	& thread_count		6532529						
ANR	6532655	Symbol	* thread		6532529						
ANR	6532656	Symbol	thread_count		6532529						
ANR	6532657	Symbol	KERN_SUCCESS		6532529						
ANR	6532658	Symbol	thread -> port		6532529						
ANR	6532659	Symbol	task_dbg		6532529						
ANR	6532660	Function	xnu_write_mem_maps_to_buffer	738:0:18766:38000							
ANR	6532661	FunctionDef	"xnu_write_mem_maps_to_buffer (RBuffer * buffer , RList * mem_maps , int start_offset , vm_offset_t header , int header_end , int segment_command_sz , int * hoffset_out)"		6532660	0					
ANR	6532662	CompoundStatement		739:79:18938:38000	6532660	0					
ANR	6532663	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	740:1:18941:18964	6532660	0	True				
ANR	6532664	IdentifierDecl	* iter		6532660	0					
ANR	6532665	IdentifierDeclType	RListIter *		6532660	0					
ANR	6532666	Identifier	iter		6532660	1					
ANR	6532667	IdentifierDecl	* iter2		6532660	1					
ANR	6532668	IdentifierDeclType	RListIter *		6532660	0					
ANR	6532669	Identifier	iter2		6532660	1					
ANR	6532670	IdentifierDeclStatement	RDebugMap * curr_map ;	741:1:18967:18986	6532660	1	True				
ANR	6532671	IdentifierDecl	* curr_map		6532660	0					
ANR	6532672	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6532673	Identifier	curr_map		6532660	1					
ANR	6532674	IdentifierDeclStatement	int foffset = 0 ;	742:1:18989:19004	6532660	2	True				
ANR	6532675	IdentifierDecl	foffset = 0		6532660	0					
ANR	6532676	IdentifierDeclType	int		6532660	0					
ANR	6532677	Identifier	foffset		6532660	1					
ANR	6532678	AssignmentExpression	foffset = 0		6532660	2		=			
ANR	6532679	Identifier	foffset		6532660	0					
ANR	6532680	PrimaryExpression	0		6532660	1					
ANR	6532681	IdentifierDeclStatement	int hoffset = header_end ;	743:1:19023:19047	6532660	3	True				
ANR	6532682	IdentifierDecl	hoffset = header_end		6532660	0					
ANR	6532683	IdentifierDeclType	int		6532660	0					
ANR	6532684	Identifier	hoffset		6532660	1					
ANR	6532685	AssignmentExpression	hoffset = header_end		6532660	2		=			
ANR	6532686	Identifier	header_end		6532660	0					
ANR	6532687	Identifier	header_end		6532660	1					
ANR	6532688	IdentifierDeclStatement	kern_return_t kr = KERN_SUCCESS ;	744:1:19050:19081	6532660	4	True				
ANR	6532689	IdentifierDecl	kr = KERN_SUCCESS		6532660	0					
ANR	6532690	IdentifierDeclType	kern_return_t		6532660	0					
ANR	6532691	Identifier	kr		6532660	1					
ANR	6532692	AssignmentExpression	kr = KERN_SUCCESS		6532660	2		=			
ANR	6532693	Identifier	KERN_SUCCESS		6532660	0					
ANR	6532694	Identifier	KERN_SUCCESS		6532660	1					
ANR	6532695	IdentifierDeclStatement	int error = 0 ;	745:1:19084:19097	6532660	5	True				
ANR	6532696	IdentifierDecl	error = 0		6532660	0					
ANR	6532697	IdentifierDeclType	int		6532660	0					
ANR	6532698	Identifier	error		6532660	1					
ANR	6532699	AssignmentExpression	error = 0		6532660	2		=			
ANR	6532700	Identifier	error		6532660	0					
ANR	6532701	PrimaryExpression	0		6532660	1					
ANR	6532702	IdentifierDeclStatement	ssize_t rc = 0 ;	746:1:19100:19114	6532660	6	True				
ANR	6532703	IdentifierDecl	rc = 0		6532660	0					
ANR	6532704	IdentifierDeclType	ssize_t		6532660	0					
ANR	6532705	Identifier	rc		6532660	1					
ANR	6532706	AssignmentExpression	rc = 0		6532660	2		=			
ANR	6532707	Identifier	rc		6532660	0					
ANR	6532708	PrimaryExpression	0		6532660	1					
ANR	6532709	Statement	define	748:1:19118:19123	6532660	7	True				
ANR	6532710	Statement	CAST_DOWN	748:8:19125:19133	6532660	8	True				
ANR	6532711	Statement	(	748:17:19134:19134	6532660	9	True				
ANR	6532712	Statement	type	748:18:19135:19138	6532660	10	True				
ANR	6532713	Statement	","	748:22:19139:19139	6532660	11	True				
ANR	6532714	Statement	addr	748:24:19141:19144	6532660	12	True				
ANR	6532715	Statement	)	748:28:19145:19145	6532660	13	True				
ANR	6532716	Statement	(	748:30:19147:19147	6532660	14	True				
ANR	6532717	Statement	(	748:31:19148:19148	6532660	15	True				
ANR	6532718	Statement	(	748:32:19149:19149	6532660	16	True				
ANR	6532719	Statement	type	748:33:19150:19153	6532660	17	True				
ANR	6532720	Statement	)	748:37:19154:19154	6532660	18	True				
ANR	6532721	Statement	(	748:38:19155:19155	6532660	19	True				
ANR	6532722	Statement	(	748:39:19156:19156	6532660	20	True				
ANR	6532723	Statement	uintptr_t	748:40:19157:19165	6532660	21	True				
ANR	6532724	Statement	)	748:49:19166:19166	6532660	22	True				
ANR	6532725	Statement	(	748:50:19167:19167	6532660	23	True				
ANR	6532726	Statement	addr	748:51:19168:19171	6532660	24	True				
ANR	6532727	Statement	)	748:55:19172:19172	6532660	25	True				
ANR	6532728	Statement	)	748:56:19173:19173	6532660	26	True				
ANR	6532729	Statement	)	748:57:19174:19174	6532660	27	True				
ANR	6532730	Statement	)	748:58:19175:19175	6532660	28	True				
ANR	6532731	IdentifierDeclStatement	struct segment_command_64 * sc64 ;	750:1:19206:19237	6532660	29	True				
ANR	6532732	IdentifierDecl	* sc64		6532660	0					
ANR	6532733	IdentifierDeclType	struct segment_command_64 *		6532660	0					
ANR	6532734	Identifier	sc64		6532660	1					
ANR	6532735	Statement	r_list_foreach_safe	754:1:19317:19335	6532660	30	True				
ANR	6532736	Statement	(	754:21:19337:19337	6532660	31	True				
ANR	6532737	Statement	mem_maps	754:22:19338:19345	6532660	32	True				
ANR	6532738	Statement	","	754:30:19346:19346	6532660	33	True				
ANR	6532739	Statement	iter	754:32:19348:19351	6532660	34	True				
ANR	6532740	Statement	","	754:36:19352:19352	6532660	35	True				
ANR	6532741	Statement	iter2	754:38:19354:19358	6532660	36	True				
ANR	6532742	Statement	","	754:43:19359:19359	6532660	37	True				
ANR	6532743	Statement	curr_map	754:45:19361:19368	6532660	38	True				
ANR	6532744	Statement	)	754:53:19369:19369	6532660	39	True				
ANR	6532745	CompoundStatement		20:2:573:614	6532660	40					
ANR	6532746	Statement	eprintf	755:2:19375:19381	6532660	0	True				
ANR	6532747	Statement	(	755:10:19383:19383	6532660	1	True				
ANR	6532748	Statement	"""Writing section from 0x%"""	755:11:19384:19409	6532660	2	True				
ANR	6532749	Statement	PFMT64x	755:37:19410:19416	6532660	3	True				
ANR	6532750	Statement	""" to 0x%"""	755:44:19417:19425	6532660	4	True				
ANR	6532751	Statement	PFMT64x	755:53:19426:19432	6532660	5	True				
ANR	6532752	Statement	""" (%"""	755:60:19433:19437	6532660	6	True				
ANR	6532753	Statement	PFMT64d	755:65:19438:19444	6532660	7	True				
ANR	6532754	Statement	""")\\n"""	755:72:19445:19449	6532660	8	True				
ANR	6532755	Statement	","	755:77:19450:19450	6532660	9	True				
ANR	6532756	Statement	curr_map	756:3:19456:19463	6532660	10	True				
ANR	6532757	Statement	->	756:11:19464:19465	6532660	11	True				
ANR	6532758	Statement	addr	756:13:19466:19469	6532660	12	True				
ANR	6532759	Statement	","	756:17:19470:19470	6532660	13	True				
ANR	6532760	Statement	curr_map	756:19:19472:19479	6532660	14	True				
ANR	6532761	Statement	->	756:27:19480:19481	6532660	15	True				
ANR	6532762	Statement	addr_end	756:29:19482:19489	6532660	16	True				
ANR	6532763	Statement	","	756:37:19490:19490	6532660	17	True				
ANR	6532764	Statement	curr_map	756:39:19492:19499	6532660	18	True				
ANR	6532765	Statement	->	756:47:19500:19501	6532660	19	True				
ANR	6532766	Statement	size	756:49:19502:19505	6532660	20	True				
ANR	6532767	Statement	)	756:53:19506:19506	6532660	21	True				
ANR	6532768	ExpressionStatement		756:54:19507:19507	6532660	22	True				
ANR	6532769	IdentifierDeclStatement	vm_map_offset_t vmoffset = curr_map -> addr ;	758:2:19512:19553	6532660	23	True				
ANR	6532770	IdentifierDecl	vmoffset = curr_map -> addr		6532660	0					
ANR	6532771	IdentifierDeclType	vm_map_offset_t		6532660	0					
ANR	6532772	Identifier	vmoffset		6532660	1					
ANR	6532773	AssignmentExpression	vmoffset = curr_map -> addr		6532660	2		=			
ANR	6532774	Identifier	vmoffset		6532660	0					
ANR	6532775	PtrMemberAccess	curr_map -> addr		6532660	1					
ANR	6532776	Identifier	curr_map		6532660	0					
ANR	6532777	Identifier	addr		6532660	1					
ANR	6532778	ExpressionStatement	sc64 = ( struct segment_command_64 * ) ( header + hoffset )	760:2:19585:19639	6532660	24	True				
ANR	6532779	AssignmentExpression	sc64 = ( struct segment_command_64 * ) ( header + hoffset )		6532660	0		=			
ANR	6532780	Identifier	sc64		6532660	0					
ANR	6532781	CastExpression	( struct segment_command_64 * ) ( header + hoffset )		6532660	1					
ANR	6532782	CastTarget	struct segment_command_64 *		6532660	0					
ANR	6532783	AdditiveExpression	header + hoffset		6532660	1		+			
ANR	6532784	Identifier	header		6532660	0					
ANR	6532785	Identifier	hoffset		6532660	1					
ANR	6532786	ExpressionStatement	sc64 -> cmd = LC_SEGMENT_64	761:2:19643:19668	6532660	25	True				
ANR	6532787	AssignmentExpression	sc64 -> cmd = LC_SEGMENT_64		6532660	0		=			
ANR	6532788	PtrMemberAccess	sc64 -> cmd		6532660	0					
ANR	6532789	Identifier	sc64		6532660	0					
ANR	6532790	Identifier	cmd		6532660	1					
ANR	6532791	Identifier	LC_SEGMENT_64		6532660	1					
ANR	6532792	ExpressionStatement	sc64 -> cmdsize = sizeof ( struct segment_command_64 )	762:2:19672:19722	6532660	26	True				
ANR	6532793	AssignmentExpression	sc64 -> cmdsize = sizeof ( struct segment_command_64 )		6532660	0		=			
ANR	6532794	PtrMemberAccess	sc64 -> cmdsize		6532660	0					
ANR	6532795	Identifier	sc64		6532660	0					
ANR	6532796	Identifier	cmdsize		6532660	1					
ANR	6532797	SizeofExpression	sizeof ( struct segment_command_64 )		6532660	1					
ANR	6532798	Sizeof	sizeof		6532660	0					
ANR	6532799	SizeofOperand	struct segment_command_64		6532660	1					
ANR	6532800	ExpressionStatement	sc64 -> segname [ 0 ] = 0	763:2:19726:19746	6532660	27	True				
ANR	6532801	AssignmentExpression	sc64 -> segname [ 0 ] = 0		6532660	0		=			
ANR	6532802	ArrayIndexing	sc64 -> segname [ 0 ]		6532660	0					
ANR	6532803	PtrMemberAccess	sc64 -> segname		6532660	0					
ANR	6532804	Identifier	sc64		6532660	0					
ANR	6532805	Identifier	segname		6532660	1					
ANR	6532806	PrimaryExpression	0		6532660	1					
ANR	6532807	PrimaryExpression	0		6532660	1					
ANR	6532808	ExpressionStatement	sc64 -> vmaddr = curr_map -> addr	764:2:19794:19823	6532660	28	True				
ANR	6532809	AssignmentExpression	sc64 -> vmaddr = curr_map -> addr		6532660	0		=			
ANR	6532810	PtrMemberAccess	sc64 -> vmaddr		6532660	0					
ANR	6532811	Identifier	sc64		6532660	0					
ANR	6532812	Identifier	vmaddr		6532660	1					
ANR	6532813	PtrMemberAccess	curr_map -> addr		6532660	1					
ANR	6532814	Identifier	curr_map		6532660	0					
ANR	6532815	Identifier	addr		6532660	1					
ANR	6532816	ExpressionStatement	sc64 -> vmsize = curr_map -> size	765:2:19827:19856	6532660	29	True				
ANR	6532817	AssignmentExpression	sc64 -> vmsize = curr_map -> size		6532660	0		=			
ANR	6532818	PtrMemberAccess	sc64 -> vmsize		6532660	0					
ANR	6532819	Identifier	sc64		6532660	0					
ANR	6532820	Identifier	vmsize		6532660	1					
ANR	6532821	PtrMemberAccess	curr_map -> size		6532660	1					
ANR	6532822	Identifier	curr_map		6532660	0					
ANR	6532823	Identifier	size		6532660	1					
ANR	6532824	ExpressionStatement	sc64 -> maxprot = 7	766:2:19860:19877	6532660	30	True				
ANR	6532825	AssignmentExpression	sc64 -> maxprot = 7		6532660	0		=			
ANR	6532826	PtrMemberAccess	sc64 -> maxprot		6532660	0					
ANR	6532827	Identifier	sc64		6532660	0					
ANR	6532828	Identifier	maxprot		6532660	1					
ANR	6532829	PrimaryExpression	7		6532660	1					
ANR	6532830	ExpressionStatement	sc64 -> initprot = xwr2rwx ( curr_map -> perm )	767:2:19889:19930	6532660	31	True				
ANR	6532831	AssignmentExpression	sc64 -> initprot = xwr2rwx ( curr_map -> perm )		6532660	0		=			
ANR	6532832	PtrMemberAccess	sc64 -> initprot		6532660	0					
ANR	6532833	Identifier	sc64		6532660	0					
ANR	6532834	Identifier	initprot		6532660	1					
ANR	6532835	CallExpression	xwr2rwx ( curr_map -> perm )		6532660	1					
ANR	6532836	Callee	xwr2rwx		6532660	0					
ANR	6532837	Identifier	xwr2rwx		6532660	0					
ANR	6532838	ArgumentList	curr_map -> perm		6532660	1					
ANR	6532839	Argument	curr_map -> perm		6532660	0					
ANR	6532840	PtrMemberAccess	curr_map -> perm		6532660	0					
ANR	6532841	Identifier	curr_map		6532660	0					
ANR	6532842	Identifier	perm		6532660	1					
ANR	6532843	ExpressionStatement	sc64 -> nsects = 0	768:2:19934:19950	6532660	32	True				
ANR	6532844	AssignmentExpression	sc64 -> nsects = 0		6532660	0		=			
ANR	6532845	PtrMemberAccess	sc64 -> nsects		6532660	0					
ANR	6532846	Identifier	sc64		6532660	0					
ANR	6532847	Identifier	nsects		6532660	1					
ANR	6532848	PrimaryExpression	0		6532660	1					
ANR	6532849	IfStatement	if ( ( curr_map -> perm & VM_PROT_READ ) == 0 )		6532660	33					
ANR	6532850	Condition	( curr_map -> perm & VM_PROT_READ ) == 0	782:6:20454:20489	6532660	0	True				
ANR	6532851	EqualityExpression	( curr_map -> perm & VM_PROT_READ ) == 0		6532660	0		==			
ANR	6532852	BitAndExpression	curr_map -> perm & VM_PROT_READ		6532660	0		&			
ANR	6532853	PtrMemberAccess	curr_map -> perm		6532660	0					
ANR	6532854	Identifier	curr_map		6532660	0					
ANR	6532855	Identifier	perm		6532660	1					
ANR	6532856	Identifier	VM_PROT_READ		6532660	1					
ANR	6532857	PrimaryExpression	0		6532660	1					
ANR	6532858	CompoundStatement		44:44:1553:1553	6532660	1					
ANR	6532859	ExpressionStatement	"mach_vm_protect ( task_dbg , curr_map -> addr , curr_map -> size , FALSE , curr_map -> perm | VM_PROT_READ )"	783:3:20497:20597	6532660	0	True				
ANR	6532860	CallExpression	"mach_vm_protect ( task_dbg , curr_map -> addr , curr_map -> size , FALSE , curr_map -> perm | VM_PROT_READ )"		6532660	0					
ANR	6532861	Callee	mach_vm_protect		6532660	0					
ANR	6532862	Identifier	mach_vm_protect		6532660	0					
ANR	6532863	ArgumentList	task_dbg		6532660	1					
ANR	6532864	Argument	task_dbg		6532660	0					
ANR	6532865	Identifier	task_dbg		6532660	0					
ANR	6532866	Argument	curr_map -> addr		6532660	1					
ANR	6532867	PtrMemberAccess	curr_map -> addr		6532660	0					
ANR	6532868	Identifier	curr_map		6532660	0					
ANR	6532869	Identifier	addr		6532660	1					
ANR	6532870	Argument	curr_map -> size		6532660	2					
ANR	6532871	PtrMemberAccess	curr_map -> size		6532660	0					
ANR	6532872	Identifier	curr_map		6532660	0					
ANR	6532873	Identifier	size		6532660	1					
ANR	6532874	Argument	FALSE		6532660	3					
ANR	6532875	Identifier	FALSE		6532660	0					
ANR	6532876	Argument	curr_map -> perm | VM_PROT_READ		6532660	4					
ANR	6532877	InclusiveOrExpression	curr_map -> perm | VM_PROT_READ		6532660	0		|			
ANR	6532878	PtrMemberAccess	curr_map -> perm		6532660	0					
ANR	6532879	Identifier	curr_map		6532660	0					
ANR	6532880	Identifier	perm		6532660	1					
ANR	6532881	Identifier	VM_PROT_READ		6532660	1					
ANR	6532882	IfStatement	if ( ( maxprot & VM_PROT_READ ) == VM_PROT_READ && ( vbr . user_tag != VM_MEMORY_IOKIT ) )		6532660	34					
ANR	6532883	Condition	( maxprot & VM_PROT_READ ) == VM_PROT_READ && ( vbr . user_tag != VM_MEMORY_IOKIT )	789:6:20676:20755	6532660	0	True				
ANR	6532884	AndExpression	( maxprot & VM_PROT_READ ) == VM_PROT_READ && ( vbr . user_tag != VM_MEMORY_IOKIT )		6532660	0		&&			
ANR	6532885	EqualityExpression	( maxprot & VM_PROT_READ ) == VM_PROT_READ		6532660	0		==			
ANR	6532886	BitAndExpression	maxprot & VM_PROT_READ		6532660	0		&			
ANR	6532887	Identifier	maxprot		6532660	0					
ANR	6532888	Identifier	VM_PROT_READ		6532660	1					
ANR	6532889	Identifier	VM_PROT_READ		6532660	1					
ANR	6532890	EqualityExpression	vbr . user_tag != VM_MEMORY_IOKIT		6532660	1		!=			
ANR	6532891	MemberAccess	vbr . user_tag		6532660	0					
ANR	6532892	Identifier	vbr		6532660	0					
ANR	6532893	Identifier	user_tag		6532660	1					
ANR	6532894	Identifier	VM_MEMORY_IOKIT		6532660	1					
ANR	6532895	CompoundStatement		52:38:1819:1819	6532660	1					
ANR	6532896	IfStatement	if ( ( curr_map -> perm & VM_PROT_READ ) == VM_PROT_READ )		6532660	0					
ANR	6532897	Condition	( curr_map -> perm & VM_PROT_READ ) == VM_PROT_READ	792:6:20773:20819	6532660	0	True				
ANR	6532898	EqualityExpression	( curr_map -> perm & VM_PROT_READ ) == VM_PROT_READ		6532660	0		==			
ANR	6532899	BitAndExpression	curr_map -> perm & VM_PROT_READ		6532660	0		&			
ANR	6532900	PtrMemberAccess	curr_map -> perm		6532660	0					
ANR	6532901	Identifier	curr_map		6532660	0					
ANR	6532902	Identifier	perm		6532660	1					
ANR	6532903	Identifier	VM_PROT_READ		6532660	1					
ANR	6532904	Identifier	VM_PROT_READ		6532660	1					
ANR	6532905	CompoundStatement		56:3:1932:1960	6532660	1					
ANR	6532906	IdentifierDeclStatement	vm_map_size_t tmp_size = curr_map -> size ;	793:3:20827:20866	6532660	0	True				
ANR	6532907	IdentifierDecl	tmp_size = curr_map -> size		6532660	0					
ANR	6532908	IdentifierDeclType	vm_map_size_t		6532660	0					
ANR	6532909	Identifier	tmp_size		6532660	1					
ANR	6532910	AssignmentExpression	tmp_size = curr_map -> size		6532660	2		=			
ANR	6532911	Identifier	tmp_size		6532660	0					
ANR	6532912	PtrMemberAccess	curr_map -> size		6532660	1					
ANR	6532913	Identifier	curr_map		6532660	0					
ANR	6532914	Identifier	size		6532660	1					
ANR	6532915	IdentifierDeclStatement	off_t xfer_foffset = foffset ;	794:3:20871:20899	6532660	1	True				
ANR	6532916	IdentifierDecl	xfer_foffset = foffset		6532660	0					
ANR	6532917	IdentifierDeclType	off_t		6532660	0					
ANR	6532918	Identifier	xfer_foffset		6532660	1					
ANR	6532919	AssignmentExpression	xfer_foffset = foffset		6532660	2		=			
ANR	6532920	Identifier	foffset		6532660	0					
ANR	6532921	Identifier	foffset		6532660	1					
ANR	6532922	WhileStatement	while ( tmp_size > 0 )		6532660	2					
ANR	6532923	Condition	tmp_size > 0	796:10:20912:20923	6532660	0	True				
ANR	6532924	RelationalExpression	tmp_size > 0		6532660	0		>			
ANR	6532925	Identifier	tmp_size		6532660	0					
ANR	6532926	PrimaryExpression	0		6532660	1					
ANR	6532927	CompoundStatement		61:4:2064:2097	6532660	1					
ANR	6532928	IdentifierDeclStatement	vm_map_size_t xfer_size = tmp_size ;	797:4:20932:20966	6532660	0	True				
ANR	6532929	IdentifierDecl	xfer_size = tmp_size		6532660	0					
ANR	6532930	IdentifierDeclType	vm_map_size_t		6532660	0					
ANR	6532931	Identifier	xfer_size		6532660	1					
ANR	6532932	AssignmentExpression	xfer_size = tmp_size		6532660	2		=			
ANR	6532933	Identifier	tmp_size		6532660	0					
ANR	6532934	Identifier	tmp_size		6532660	1					
ANR	6532935	IdentifierDeclStatement	vm_offset_t local_address ;	798:4:20972:20997	6532660	1	True				
ANR	6532936	IdentifierDecl	local_address		6532660	0					
ANR	6532937	IdentifierDeclType	vm_offset_t		6532660	0					
ANR	6532938	Identifier	local_address		6532660	1					
ANR	6532939	IdentifierDeclStatement	mach_msg_type_number_t local_size ;	799:4:21003:21036	6532660	2	True				
ANR	6532940	IdentifierDecl	local_size		6532660	0					
ANR	6532941	IdentifierDeclType	mach_msg_type_number_t		6532660	0					
ANR	6532942	Identifier	local_size		6532660	1					
ANR	6532943	IfStatement	if ( xfer_size > INT_MAX )		6532660	3					
ANR	6532944	Condition	xfer_size > INT_MAX	801:8:21047:21065	6532660	0	True				
ANR	6532945	RelationalExpression	xfer_size > INT_MAX		6532660	0		>			
ANR	6532946	Identifier	xfer_size		6532660	0					
ANR	6532947	Identifier	INT_MAX		6532660	1					
ANR	6532948	ExpressionStatement	xfer_size = INT_MAX	801:29:21068:21087	6532660	1	True				
ANR	6532949	AssignmentExpression	xfer_size = INT_MAX		6532660	0		=			
ANR	6532950	Identifier	xfer_size		6532660	0					
ANR	6532951	Identifier	INT_MAX		6532660	1					
ANR	6532952	ExpressionStatement	"kr = mach_vm_read ( task_dbg , vmoffset , xfer_size , & local_address , & local_size )"	802:4:21093:21176	6532660	4	True				
ANR	6532953	AssignmentExpression	"kr = mach_vm_read ( task_dbg , vmoffset , xfer_size , & local_address , & local_size )"		6532660	0		=			
ANR	6532954	Identifier	kr		6532660	0					
ANR	6532955	CallExpression	"mach_vm_read ( task_dbg , vmoffset , xfer_size , & local_address , & local_size )"		6532660	1					
ANR	6532956	Callee	mach_vm_read		6532660	0					
ANR	6532957	Identifier	mach_vm_read		6532660	0					
ANR	6532958	ArgumentList	task_dbg		6532660	1					
ANR	6532959	Argument	task_dbg		6532660	0					
ANR	6532960	Identifier	task_dbg		6532660	0					
ANR	6532961	Argument	vmoffset		6532660	1					
ANR	6532962	Identifier	vmoffset		6532660	0					
ANR	6532963	Argument	xfer_size		6532660	2					
ANR	6532964	Identifier	xfer_size		6532660	0					
ANR	6532965	Argument	& local_address		6532660	3					
ANR	6532966	UnaryOperationExpression	& local_address		6532660	0					
ANR	6532967	UnaryOperator	&		6532660	0					
ANR	6532968	Identifier	local_address		6532660	1					
ANR	6532969	Argument	& local_size		6532660	4					
ANR	6532970	UnaryOperationExpression	& local_size		6532660	0					
ANR	6532971	UnaryOperator	&		6532660	0					
ANR	6532972	Identifier	local_size		6532660	1					
ANR	6532973	IfStatement	if ( ( kr != KERN_SUCCESS ) || ( xfer_size != local_size ) )		6532660	5					
ANR	6532974	Condition	( kr != KERN_SUCCESS ) || ( xfer_size != local_size )	805:8:21187:21235	6532660	0	True				
ANR	6532975	OrExpression	( kr != KERN_SUCCESS ) || ( xfer_size != local_size )		6532660	0		||			
ANR	6532976	EqualityExpression	kr != KERN_SUCCESS		6532660	0		!=			
ANR	6532977	Identifier	kr		6532660	0					
ANR	6532978	Identifier	KERN_SUCCESS		6532660	1					
ANR	6532979	EqualityExpression	xfer_size != local_size		6532660	1		!=			
ANR	6532980	Identifier	xfer_size		6532660	0					
ANR	6532981	Identifier	local_size		6532660	1					
ANR	6532982	CompoundStatement		67:59:2299:2299	6532660	1					
ANR	6532983	ExpressionStatement	"eprintf ( ""Failed to read target memory\\n"" )"	806:5:21245:21287	6532660	0	True				
ANR	6532984	CallExpression	"eprintf ( ""Failed to read target memory\\n"" )"		6532660	0					
ANR	6532985	Callee	eprintf		6532660	0					
ANR	6532986	Identifier	eprintf		6532660	0					
ANR	6532987	ArgumentList	"""Failed to read target memory\\n"""		6532660	1					
ANR	6532988	Argument	"""Failed to read target memory\\n"""		6532660	0					
ANR	6532989	PrimaryExpression	"""Failed to read target memory\\n"""		6532660	0					
ANR	6532990	ExpressionStatement	"eprintf ( ""[DEBUG] kr = %d\\n"" , kr )"	807:5:21324:21357	6532660	1	True				
ANR	6532991	CallExpression	"eprintf ( ""[DEBUG] kr = %d\\n"" , kr )"		6532660	0					
ANR	6532992	Callee	eprintf		6532660	0					
ANR	6532993	Identifier	eprintf		6532660	0					
ANR	6532994	ArgumentList	"""[DEBUG] kr = %d\\n"""		6532660	1					
ANR	6532995	Argument	"""[DEBUG] kr = %d\\n"""		6532660	0					
ANR	6532996	PrimaryExpression	"""[DEBUG] kr = %d\\n"""		6532660	0					
ANR	6532997	Argument	kr		6532660	1					
ANR	6532998	Identifier	kr		6532660	0					
ANR	6532999	ExpressionStatement	"eprintf ( ""[DEBUG] KERN_SUCCESS = %d\\n"" , KERN_SUCCESS )"	808:5:21364:21417	6532660	2	True				
ANR	6533000	CallExpression	"eprintf ( ""[DEBUG] KERN_SUCCESS = %d\\n"" , KERN_SUCCESS )"		6532660	0					
ANR	6533001	Callee	eprintf		6532660	0					
ANR	6533002	Identifier	eprintf		6532660	0					
ANR	6533003	ArgumentList	"""[DEBUG] KERN_SUCCESS = %d\\n"""		6532660	1					
ANR	6533004	Argument	"""[DEBUG] KERN_SUCCESS = %d\\n"""		6532660	0					
ANR	6533005	PrimaryExpression	"""[DEBUG] KERN_SUCCESS = %d\\n"""		6532660	0					
ANR	6533006	Argument	KERN_SUCCESS		6532660	1					
ANR	6533007	Identifier	KERN_SUCCESS		6532660	0					
ANR	6533008	Statement	eprintf	809:5:21424:21430	6532660	3	True				
ANR	6533009	Statement	(	809:13:21432:21432	6532660	4	True				
ANR	6533010	Statement	"""[DEBUG] xfer_size = %"""	809:14:21433:21455	6532660	5	True				
ANR	6533011	Statement	PFMT64d	809:37:21456:21462	6532660	6	True				
ANR	6533012	Statement	"""\\n"""	809:44:21463:21466	6532660	7	True				
ANR	6533013	Statement	","	809:48:21467:21467	6532660	8	True				
ANR	6533014	Statement	(	809:50:21469:21469	6532660	9	True				
ANR	6533015	Statement	ut64	809:51:21470:21473	6532660	10	True				
ANR	6533016	Statement	)	809:55:21474:21474	6532660	11	True				
ANR	6533017	Statement	xfer_size	809:56:21475:21483	6532660	12	True				
ANR	6533018	Statement	)	809:65:21484:21484	6532660	13	True				
ANR	6533019	ExpressionStatement		809:66:21485:21485	6532660	14	True				
ANR	6533020	ExpressionStatement	"eprintf ( ""[DEBUG] local_size = %d\\n"" , local_size )"	810:5:21492:21541	6532660	15	True				
ANR	6533021	CallExpression	"eprintf ( ""[DEBUG] local_size = %d\\n"" , local_size )"		6532660	0					
ANR	6533022	Callee	eprintf		6532660	0					
ANR	6533023	Identifier	eprintf		6532660	0					
ANR	6533024	ArgumentList	"""[DEBUG] local_size = %d\\n"""		6532660	1					
ANR	6533025	Argument	"""[DEBUG] local_size = %d\\n"""		6532660	0					
ANR	6533026	PrimaryExpression	"""[DEBUG] local_size = %d\\n"""		6532660	0					
ANR	6533027	Argument	local_size		6532660	1					
ANR	6533028	Identifier	local_size		6532660	0					
ANR	6533029	IfStatement	if ( kr > 1 )		6532660	16					
ANR	6533030	Condition	kr > 1	811:9:21552:21557	6532660	0	True				
ANR	6533031	RelationalExpression	kr > 1		6532660	0		>			
ANR	6533032	Identifier	kr		6532660	0					
ANR	6533033	PrimaryExpression	1		6532660	1					
ANR	6533034	ExpressionStatement	error = - 1	811:17:21560:21570	6532660	1	True				
ANR	6533035	AssignmentExpression	error = - 1		6532660	0		=			
ANR	6533036	Identifier	error		6532660	0					
ANR	6533037	UnaryOperationExpression	- 1		6532660	1					
ANR	6533038	UnaryOperator	-		6532660	0					
ANR	6533039	PrimaryExpression	1		6532660	1					
ANR	6533040	GotoStatement	goto cleanup ;	812:5:21625:21637	6532660	17	True				
ANR	6533041	Identifier	cleanup		6532660	0					
ANR	6533042	ExpressionStatement	"rc = r_buf_append_bytes ( buffer , ( const ut8 * ) local_address , xfer_size )"	815:4:21705:21775	6532660	6	True				
ANR	6533043	AssignmentExpression	"rc = r_buf_append_bytes ( buffer , ( const ut8 * ) local_address , xfer_size )"		6532660	0		=			
ANR	6533044	Identifier	rc		6532660	0					
ANR	6533045	CallExpression	"r_buf_append_bytes ( buffer , ( const ut8 * ) local_address , xfer_size )"		6532660	1					
ANR	6533046	Callee	r_buf_append_bytes		6532660	0					
ANR	6533047	Identifier	r_buf_append_bytes		6532660	0					
ANR	6533048	ArgumentList	buffer		6532660	1					
ANR	6533049	Argument	buffer		6532660	0					
ANR	6533050	Identifier	buffer		6532660	0					
ANR	6533051	Argument	( const ut8 * ) local_address		6532660	1					
ANR	6533052	CastExpression	( const ut8 * ) local_address		6532660	0					
ANR	6533053	CastTarget	const ut8 *		6532660	0					
ANR	6533054	Identifier	local_address		6532660	1					
ANR	6533055	Argument	xfer_size		6532660	2					
ANR	6533056	Identifier	xfer_size		6532660	0					
ANR	6533057	IfStatement	if ( ! rc )		6532660	7					
ANR	6533058	Condition	! rc	821:8:21951:21953	6532660	0	True				
ANR	6533059	UnaryOperationExpression	! rc		6532660	0					
ANR	6533060	UnaryOperator	!		6532660	0					
ANR	6533061	Identifier	rc		6532660	1					
ANR	6533062	CompoundStatement		83:13:3017:3017	6532660	1					
ANR	6533063	ExpressionStatement	error = errno	822:5:21963:21976	6532660	0	True				
ANR	6533064	AssignmentExpression	error = errno		6532660	0		=			
ANR	6533065	Identifier	error		6532660	0					
ANR	6533066	Identifier	errno		6532660	1					
ANR	6533067	ExpressionStatement	"eprintf ( ""Failed to write in the destination\\n"" )"	823:5:21983:22031	6532660	1	True				
ANR	6533068	CallExpression	"eprintf ( ""Failed to write in the destination\\n"" )"		6532660	0					
ANR	6533069	Callee	eprintf		6532660	0					
ANR	6533070	Identifier	eprintf		6532660	0					
ANR	6533071	ArgumentList	"""Failed to write in the destination\\n"""		6532660	1					
ANR	6533072	Argument	"""Failed to write in the destination\\n"""		6532660	0					
ANR	6533073	PrimaryExpression	"""Failed to write in the destination\\n"""		6532660	0					
ANR	6533074	GotoStatement	goto cleanup ;	824:5:22038:22050	6532660	2	True				
ANR	6533075	Identifier	cleanup		6532660	0					
ANR	6533076	ExpressionStatement	tmp_size -= xfer_size	827:4:22063:22084	6532660	8	True				
ANR	6533077	AssignmentExpression	tmp_size -= xfer_size		6532660	0		-=			
ANR	6533078	Identifier	tmp_size		6532660	0					
ANR	6533079	Identifier	xfer_size		6532660	1					
ANR	6533080	ExpressionStatement	xfer_foffset += xfer_size	828:4:22090:22115	6532660	9	True				
ANR	6533081	AssignmentExpression	xfer_foffset += xfer_size		6532660	0		+=			
ANR	6533082	Identifier	xfer_foffset		6532660	0					
ANR	6533083	Identifier	xfer_size		6532660	1					
ANR	6533084	ExpressionStatement	hoffset += segment_command_sz	832:2:22129:22158	6532660	1	True				
ANR	6533085	AssignmentExpression	hoffset += segment_command_sz		6532660	0		+=			
ANR	6533086	Identifier	hoffset		6532660	0					
ANR	6533087	Identifier	segment_command_sz		6532660	1					
ANR	6533088	ExpressionStatement	foffset += curr_map -> size	833:2:22162:22187	6532660	2	True				
ANR	6533089	AssignmentExpression	foffset += curr_map -> size		6532660	0		+=			
ANR	6533090	Identifier	foffset		6532660	0					
ANR	6533091	PtrMemberAccess	curr_map -> size		6532660	1					
ANR	6533092	Identifier	curr_map		6532660	0					
ANR	6533093	Identifier	size		6532660	1					
ANR	6533094	ExpressionStatement	vmoffset += curr_map -> size	834:2:22191:22217	6532660	3	True				
ANR	6533095	AssignmentExpression	vmoffset += curr_map -> size		6532660	0		+=			
ANR	6533096	Identifier	vmoffset		6532660	0					
ANR	6533097	PtrMemberAccess	curr_map -> size		6532660	1					
ANR	6533098	Identifier	curr_map		6532660	0					
ANR	6533099	Identifier	size		6532660	1					
ANR	6533100	Label	cleanup :	837:0:22223:22230	6532660	35	True				
ANR	6533101	Identifier	cleanup		6532660	0					
ANR	6533102	ExpressionStatement	* hoffset_out = hoffset	838:1:22233:22255	6532660	36	True				
ANR	6533103	AssignmentExpression	* hoffset_out = hoffset		6532660	0		=			
ANR	6533104	UnaryOperationExpression	* hoffset_out		6532660	0					
ANR	6533105	UnaryOperator	*		6532660	0					
ANR	6533106	Identifier	hoffset_out		6532660	1					
ANR	6533107	Identifier	hoffset		6532660	1					
ANR	6533108	ReturnStatement	return error ;	839:1:22258:22270	6532660	37	True				
ANR	6533109	Identifier	error		6532660	0					
ANR	6533110	Statement	static	842:0:22275:22280	6532660	41	True				
ANR	6533111	Statement	int	842:7:22282:22284	6532660	42	True				
ANR	6533112	Statement	xnu_get_thread_status	842:11:22286:22306	6532660	43	True				
ANR	6533113	Statement	(	842:33:22308:22308	6532660	44	True				
ANR	6533114	Statement	register	842:34:22309:22316	6532660	45	True				
ANR	6533115	Statement	thread_t	842:43:22318:22325	6532660	46	True				
ANR	6533116	Statement	thread	842:52:22327:22332	6532660	47	True				
ANR	6533117	Statement	","	842:58:22333:22333	6532660	48	True				
ANR	6533118	Statement	int	842:60:22335:22337	6532660	49	True				
ANR	6533119	Statement	flavor	842:64:22339:22344	6532660	50	True				
ANR	6533120	Statement	","	842:70:22345:22345	6532660	51	True				
ANR	6533121	Statement	thread_state_t	843:1:22349:22362	6532660	52	True				
ANR	6533122	Statement	tstate	843:16:22364:22369	6532660	53	True				
ANR	6533123	Statement	","	843:22:22370:22370	6532660	54	True				
ANR	6533124	Statement	mach_msg_type_number_t	843:24:22372:22393	6532660	55	True				
ANR	6533125	Statement	*	843:47:22395:22395	6532660	56	True				
ANR	6533126	Statement	count	843:48:22396:22400	6532660	57	True				
ANR	6533127	Statement	)	843:53:22401:22401	6532660	58	True				
ANR	6533128	CompoundStatement		105:55:3464:3464	6532660	59					
ANR	6533129	ReturnStatement	"return thread_get_state ( thread , flavor , tstate , count ) ;"	844:1:22406:22461	6532660	0	True				
ANR	6533130	CallExpression	"thread_get_state ( thread , flavor , tstate , count )"		6532660	0					
ANR	6533131	Callee	thread_get_state		6532660	0					
ANR	6533132	Identifier	thread_get_state		6532660	0					
ANR	6533133	ArgumentList	thread		6532660	1					
ANR	6533134	Argument	thread		6532660	0					
ANR	6533135	Identifier	thread		6532660	0					
ANR	6533136	Argument	flavor		6532660	1					
ANR	6533137	Identifier	flavor		6532660	0					
ANR	6533138	Argument	tstate		6532660	2					
ANR	6533139	Identifier	tstate		6532660	0					
ANR	6533140	Argument	count		6532660	3					
ANR	6533141	Identifier	count		6532660	0					
ANR	6533142	Statement	static	847:0:22466:22471	6532660	60	True				
ANR	6533143	Statement	void	847:7:22473:22476	6532660	61	True				
ANR	6533144	Statement	xnu_collect_thread_state	847:12:22478:22501	6532660	62	True				
ANR	6533145	Statement	(	847:37:22503:22503	6532660	63	True				
ANR	6533146	Statement	thread_t	847:38:22504:22511	6532660	64	True				
ANR	6533147	Statement	port	847:47:22513:22516	6532660	65	True				
ANR	6533148	Statement	","	847:51:22517:22517	6532660	66	True				
ANR	6533149	Statement	void	847:53:22519:22522	6532660	67	True				
ANR	6533150	Statement	*	847:58:22524:22524	6532660	68	True				
ANR	6533151	Statement	tirp	847:59:22525:22528	6532660	69	True				
ANR	6533152	Statement	)	847:63:22529:22529	6532660	70	True				
ANR	6533153	CompoundStatement		115:1:3730:3735	6532660	71					
ANR	6533154	IdentifierDeclStatement	coredump_thread_state_flavor_t * flavors ;	848:1:22534:22573	6532660	0	True				
ANR	6533155	IdentifierDecl	* flavors		6532660	0					
ANR	6533156	IdentifierDeclType	coredump_thread_state_flavor_t *		6532660	0					
ANR	6533157	Identifier	flavors		6532660	1					
ANR	6533158	IdentifierDeclStatement	tir_t * tir = ( tir_t * ) tirp ;	849:1:22576:22602	6532660	1	True				
ANR	6533159	IdentifierDecl	* tir = ( tir_t * ) tirp		6532660	0					
ANR	6533160	IdentifierDeclType	tir_t *		6532660	0					
ANR	6533161	Identifier	tir		6532660	1					
ANR	6533162	AssignmentExpression	* tir = ( tir_t * ) tirp		6532660	2		=			
ANR	6533163	Identifier	tir		6532660	0					
ANR	6533164	CastExpression	( tir_t * ) tirp		6532660	1					
ANR	6533165	CastTarget	tir_t *		6532660	0					
ANR	6533166	Identifier	tirp		6532660	1					
ANR	6533167	IdentifierDeclStatement	struct thread_command * tc ;	850:1:22605:22630	6532660	2	True				
ANR	6533168	IdentifierDecl	* tc		6532660	0					
ANR	6533169	IdentifierDeclType	struct thread_command *		6532660	0					
ANR	6533170	Identifier	tc		6532660	1					
ANR	6533171	IdentifierDeclStatement	vm_offset_t header ;	851:1:22633:22651	6532660	3	True				
ANR	6533172	IdentifierDecl	header		6532660	0					
ANR	6533173	IdentifierDeclType	vm_offset_t		6532660	0					
ANR	6533174	Identifier	header		6532660	1					
ANR	6533175	IdentifierDeclStatement	ut64 hoffset ;	852:1:22654:22666	6532660	4	True				
ANR	6533176	IdentifierDecl	hoffset		6532660	0					
ANR	6533177	IdentifierDeclType	ut64		6532660	0					
ANR	6533178	Identifier	hoffset		6532660	1					
ANR	6533179	IdentifierDeclStatement	int i ;	853:1:22669:22674	6532660	5	True				
ANR	6533180	IdentifierDecl	i		6532660	0					
ANR	6533181	IdentifierDeclType	int		6532660	0					
ANR	6533182	Identifier	i		6532660	1					
ANR	6533183	ExpressionStatement	header = tir -> header	855:1:22678:22698	6532660	6	True				
ANR	6533184	AssignmentExpression	header = tir -> header		6532660	0		=			
ANR	6533185	Identifier	header		6532660	0					
ANR	6533186	PtrMemberAccess	tir -> header		6532660	1					
ANR	6533187	Identifier	tir		6532660	0					
ANR	6533188	Identifier	header		6532660	1					
ANR	6533189	ExpressionStatement	hoffset = tir -> hoffset	856:1:22701:22723	6532660	7	True				
ANR	6533190	AssignmentExpression	hoffset = tir -> hoffset		6532660	0		=			
ANR	6533191	Identifier	hoffset		6532660	0					
ANR	6533192	PtrMemberAccess	tir -> hoffset		6532660	1					
ANR	6533193	Identifier	tir		6532660	0					
ANR	6533194	Identifier	hoffset		6532660	1					
ANR	6533195	ExpressionStatement	flavors = tir -> flavors	857:1:22726:22748	6532660	8	True				
ANR	6533196	AssignmentExpression	flavors = tir -> flavors		6532660	0		=			
ANR	6533197	Identifier	flavors		6532660	0					
ANR	6533198	PtrMemberAccess	tir -> flavors		6532660	1					
ANR	6533199	Identifier	tir		6532660	0					
ANR	6533200	Identifier	flavors		6532660	1					
ANR	6533201	Statement	eprintf	858:1:22751:22757	6532660	9	True				
ANR	6533202	Statement	(	858:9:22759:22759	6532660	10	True				
ANR	6533203	Statement	"""[DEBUG] tc location: 0x%"""	858:10:22760:22785	6532660	11	True				
ANR	6533204	Statement	PFMT64x	858:37:22787:22793	6532660	12	True				
ANR	6533205	Statement	"""\\n"""	858:45:22795:22798	6532660	13	True				
ANR	6533206	Statement	","	858:49:22799:22799	6532660	14	True				
ANR	6533207	Statement	hoffset	858:51:22801:22807	6532660	15	True				
ANR	6533208	Statement	)	858:58:22808:22808	6532660	16	True				
ANR	6533209	ExpressionStatement		858:59:22809:22809	6532660	17	True				
ANR	6533210	ExpressionStatement	tc = ( struct thread_command * ) ( header + hoffset )	860:1:22813:22861	6532660	18	True				
ANR	6533211	AssignmentExpression	tc = ( struct thread_command * ) ( header + hoffset )		6532660	0		=			
ANR	6533212	Identifier	tc		6532660	0					
ANR	6533213	CastExpression	( struct thread_command * ) ( header + hoffset )		6532660	1					
ANR	6533214	CastTarget	struct thread_command *		6532660	0					
ANR	6533215	AdditiveExpression	header + hoffset		6532660	1		+			
ANR	6533216	Identifier	header		6532660	0					
ANR	6533217	Identifier	hoffset		6532660	1					
ANR	6533218	ExpressionStatement	tc -> cmd = LC_THREAD	861:1:22864:22883	6532660	19	True				
ANR	6533219	AssignmentExpression	tc -> cmd = LC_THREAD		6532660	0		=			
ANR	6533220	PtrMemberAccess	tc -> cmd		6532660	0					
ANR	6533221	Identifier	tc		6532660	0					
ANR	6533222	Identifier	cmd		6532660	1					
ANR	6533223	Identifier	LC_THREAD		6532660	1					
ANR	6533224	ExpressionStatement	tc -> cmdsize = sizeof ( struct thread_command ) + tir -> tstate_size	862:1:22886:22949	6532660	20	True				
ANR	6533225	AssignmentExpression	tc -> cmdsize = sizeof ( struct thread_command ) + tir -> tstate_size		6532660	0		=			
ANR	6533226	PtrMemberAccess	tc -> cmdsize		6532660	0					
ANR	6533227	Identifier	tc		6532660	0					
ANR	6533228	Identifier	cmdsize		6532660	1					
ANR	6533229	AdditiveExpression	sizeof ( struct thread_command ) + tir -> tstate_size		6532660	1		+			
ANR	6533230	SizeofExpression	sizeof ( struct thread_command )		6532660	0					
ANR	6533231	Sizeof	sizeof		6532660	0					
ANR	6533232	SizeofOperand	struct thread_command		6532660	1					
ANR	6533233	PtrMemberAccess	tir -> tstate_size		6532660	1					
ANR	6533234	Identifier	tir		6532660	0					
ANR	6533235	Identifier	tstate_size		6532660	1					
ANR	6533236	ExpressionStatement	hoffset += sizeof ( struct thread_command )	863:1:22952:22993	6532660	21	True				
ANR	6533237	AssignmentExpression	hoffset += sizeof ( struct thread_command )		6532660	0		+=			
ANR	6533238	Identifier	hoffset		6532660	0					
ANR	6533239	SizeofExpression	sizeof ( struct thread_command )		6532660	1					
ANR	6533240	Sizeof	sizeof		6532660	0					
ANR	6533241	SizeofOperand	struct thread_command		6532660	1					
ANR	6533242	ForStatement	for ( i = 0 ; i < coredump_nflavors ; i ++ )		6532660	22					
ANR	6533243	ForInit	i = 0 ;	865:6:23002:23007	6532660	0	True				
ANR	6533244	AssignmentExpression	i = 0		6532660	0		=			
ANR	6533245	Identifier	i		6532660	0					
ANR	6533246	PrimaryExpression	0		6532660	1					
ANR	6533247	Condition	i < coredump_nflavors	865:13:23009:23029	6532660	1	True				
ANR	6533248	RelationalExpression	i < coredump_nflavors		6532660	0		<			
ANR	6533249	Identifier	i		6532660	0					
ANR	6533250	Identifier	coredump_nflavors		6532660	1					
ANR	6533251	PostIncDecOperationExpression	i ++	865:36:23032:23034	6532660	2	True				
ANR	6533252	Identifier	i		6532660	0					
ANR	6533253	IncDec	++		6532660	1					
ANR	6533254	CompoundStatement		127:41:4098:4098	6532660	3					
ANR	6533255	ExpressionStatement	"eprintf ( ""[DEBUG] %d/%d\\n"" , i + 1 , coredump_nflavors )"	866:2:23041:23092	6532660	0	True				
ANR	6533256	CallExpression	"eprintf ( ""[DEBUG] %d/%d\\n"" , i + 1 , coredump_nflavors )"		6532660	0					
ANR	6533257	Callee	eprintf		6532660	0					
ANR	6533258	Identifier	eprintf		6532660	0					
ANR	6533259	ArgumentList	"""[DEBUG] %d/%d\\n"""		6532660	1					
ANR	6533260	Argument	"""[DEBUG] %d/%d\\n"""		6532660	0					
ANR	6533261	PrimaryExpression	"""[DEBUG] %d/%d\\n"""		6532660	0					
ANR	6533262	Argument	i + 1		6532660	1					
ANR	6533263	AdditiveExpression	i + 1		6532660	0		+			
ANR	6533264	Identifier	i		6532660	0					
ANR	6533265	PrimaryExpression	1		6532660	1					
ANR	6533266	Argument	coredump_nflavors		6532660	2					
ANR	6533267	Identifier	coredump_nflavors		6532660	0					
ANR	6533268	ExpressionStatement	* ( coredump_thread_state_flavor_t * ) ( header + hoffset ) = flavors [ i ]	867:2:23096:23162	6532660	1	True				
ANR	6533269	AssignmentExpression	* ( coredump_thread_state_flavor_t * ) ( header + hoffset ) = flavors [ i ]		6532660	0		=			
ANR	6533270	UnaryOperationExpression	* ( coredump_thread_state_flavor_t * ) ( header + hoffset )		6532660	0					
ANR	6533271	UnaryOperator	*		6532660	0					
ANR	6533272	CastExpression	( coredump_thread_state_flavor_t * ) ( header + hoffset )		6532660	1					
ANR	6533273	CastTarget	coredump_thread_state_flavor_t *		6532660	0					
ANR	6533274	AdditiveExpression	header + hoffset		6532660	1		+			
ANR	6533275	Identifier	header		6532660	0					
ANR	6533276	Identifier	hoffset		6532660	1					
ANR	6533277	ArrayIndexing	flavors [ i ]		6532660	1					
ANR	6533278	Identifier	flavors		6532660	0					
ANR	6533279	Identifier	i		6532660	1					
ANR	6533280	ExpressionStatement	hoffset += sizeof ( coredump_thread_state_flavor_t )	868:2:23166:23216	6532660	2	True				
ANR	6533281	AssignmentExpression	hoffset += sizeof ( coredump_thread_state_flavor_t )		6532660	0		+=			
ANR	6533282	Identifier	hoffset		6532660	0					
ANR	6533283	SizeofExpression	sizeof ( coredump_thread_state_flavor_t )		6532660	1					
ANR	6533284	Sizeof	sizeof		6532660	0					
ANR	6533285	SizeofOperand	coredump_thread_state_flavor_t		6532660	1					
ANR	6533286	ExpressionStatement	"xnu_get_thread_status ( port , flavors [ i ] . flavor , ( thread_state_t ) ( header + hoffset ) , & flavors [ i ] . count )"	869:2:23220:23325	6532660	3	True				
ANR	6533287	CallExpression	"xnu_get_thread_status ( port , flavors [ i ] . flavor , ( thread_state_t ) ( header + hoffset ) , & flavors [ i ] . count )"		6532660	0					
ANR	6533288	Callee	xnu_get_thread_status		6532660	0					
ANR	6533289	Identifier	xnu_get_thread_status		6532660	0					
ANR	6533290	ArgumentList	port		6532660	1					
ANR	6533291	Argument	port		6532660	0					
ANR	6533292	Identifier	port		6532660	0					
ANR	6533293	Argument	flavors [ i ] . flavor		6532660	1					
ANR	6533294	MemberAccess	flavors [ i ] . flavor		6532660	0					
ANR	6533295	ArrayIndexing	flavors [ i ]		6532660	0					
ANR	6533296	Identifier	flavors		6532660	0					
ANR	6533297	Identifier	i		6532660	1					
ANR	6533298	Identifier	flavor		6532660	1					
ANR	6533299	Argument	( thread_state_t ) ( header + hoffset )		6532660	2					
ANR	6533300	CastExpression	( thread_state_t ) ( header + hoffset )		6532660	0					
ANR	6533301	CastTarget	thread_state_t		6532660	0					
ANR	6533302	AdditiveExpression	header + hoffset		6532660	1		+			
ANR	6533303	Identifier	header		6532660	0					
ANR	6533304	Identifier	hoffset		6532660	1					
ANR	6533305	Argument	& flavors [ i ] . count		6532660	3					
ANR	6533306	UnaryOperationExpression	& flavors [ i ] . count		6532660	0					
ANR	6533307	UnaryOperator	&		6532660	0					
ANR	6533308	MemberAccess	flavors [ i ] . count		6532660	1					
ANR	6533309	ArrayIndexing	flavors [ i ]		6532660	0					
ANR	6533310	Identifier	flavors		6532660	0					
ANR	6533311	Identifier	i		6532660	1					
ANR	6533312	Identifier	count		6532660	1					
ANR	6533313	ExpressionStatement	hoffset += flavors [ i ] . count * sizeof ( int )	871:2:23329:23371	6532660	4	True				
ANR	6533314	AssignmentExpression	hoffset += flavors [ i ] . count * sizeof ( int )		6532660	0		+=			
ANR	6533315	Identifier	hoffset		6532660	0					
ANR	6533316	MultiplicativeExpression	flavors [ i ] . count * sizeof ( int )		6532660	1		*			
ANR	6533317	MemberAccess	flavors [ i ] . count		6532660	0					
ANR	6533318	ArrayIndexing	flavors [ i ]		6532660	0					
ANR	6533319	Identifier	flavors		6532660	0					
ANR	6533320	Identifier	i		6532660	1					
ANR	6533321	Identifier	count		6532660	1					
ANR	6533322	SizeofExpression	sizeof ( int )		6532660	1					
ANR	6533323	Sizeof	sizeof		6532660	0					
ANR	6533324	SizeofOperand	int		6532660	1					
ANR	6533325	ExpressionStatement	tir -> hoffset = hoffset	873:1:23377:23399	6532660	23	True				
ANR	6533326	AssignmentExpression	tir -> hoffset = hoffset		6532660	0		=			
ANR	6533327	PtrMemberAccess	tir -> hoffset		6532660	0					
ANR	6533328	Identifier	tir		6532660	0					
ANR	6533329	Identifier	hoffset		6532660	1					
ANR	6533330	Identifier	hoffset		6532660	1					
ANR	6533331	Statement	define	876:1:23405:23410	6532660	72	True				
ANR	6533332	Statement	CORE_ALL_SECT	876:8:23412:23424	6532660	73	True				
ANR	6533333	Statement	0	876:22:23426:23426	6532660	74	True				
ANR	6533334	Statement	include	878:1:23430:23436	6532660	75	True				
ANR	6533335	Statement	<	878:9:23438:23438	6532660	76	True				
ANR	6533336	Statement	sys	878:10:23439:23441	6532660	77	True				
ANR	6533337	Statement	/	878:13:23442:23442	6532660	78	True				
ANR	6533338	Statement	sysctl	878:14:23443:23448	6532660	79	True				
ANR	6533339	Statement	.	878:20:23449:23449	6532660	80	True				
ANR	6533340	Statement	h	878:21:23450:23450	6532660	81	True				
ANR	6533341	Statement	>	878:22:23451:23451	6532660	82	True				
ANR	6533342	Statement	static	880:0:23454:23459	6532660	83	True				
ANR	6533343	Statement	uid_t	880:7:23461:23465	6532660	84	True				
ANR	6533344	Statement	uidFromPid	880:13:23467:23476	6532660	85	True				
ANR	6533345	Statement	(	880:23:23477:23477	6532660	86	True				
ANR	6533346	Statement	pid_t	880:24:23478:23482	6532660	87	True				
ANR	6533347	Statement	pid	880:30:23484:23486	6532660	88	True				
ANR	6533348	Statement	)	880:33:23487:23487	6532660	89	True				
ANR	6533349	CompoundStatement		151:1:4826:4905	6532660	90					
ANR	6533350	IdentifierDeclStatement	uid_t uid = - 1 ;	881:1:23492:23506	6532660	0	True				
ANR	6533351	IdentifierDecl	uid = - 1		6532660	0					
ANR	6533352	IdentifierDeclType	uid_t		6532660	0					
ANR	6533353	Identifier	uid		6532660	1					
ANR	6533354	AssignmentExpression	uid = - 1		6532660	2		=			
ANR	6533355	Identifier	uid		6532660	0					
ANR	6533356	UnaryOperationExpression	- 1		6532660	1					
ANR	6533357	UnaryOperator	-		6532660	0					
ANR	6533358	PrimaryExpression	1		6532660	1					
ANR	6533359	IdentifierDeclStatement	struct kinfo_proc process ;	883:1:23510:23535	6532660	1	True				
ANR	6533360	IdentifierDecl	process		6532660	0					
ANR	6533361	IdentifierDeclType	struct kinfo_proc		6532660	0					
ANR	6533362	Identifier	process		6532660	1					
ANR	6533363	IdentifierDeclStatement	size_t procBufferSize = sizeof ( process ) ;	884:1:23538:23578	6532660	2	True				
ANR	6533364	IdentifierDecl	procBufferSize = sizeof ( process )		6532660	0					
ANR	6533365	IdentifierDeclType	size_t		6532660	0					
ANR	6533366	Identifier	procBufferSize		6532660	1					
ANR	6533367	AssignmentExpression	procBufferSize = sizeof ( process )		6532660	2		=			
ANR	6533368	Identifier	procBufferSize		6532660	0					
ANR	6533369	SizeofExpression	sizeof ( process )		6532660	1					
ANR	6533370	Sizeof	sizeof		6532660	0					
ANR	6533371	SizeofOperand	process		6532660	1					
ANR	6533372	IdentifierDeclStatement	"int path [ ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , pid } ;"	887:1:23653:23707	6532660	3	True				
ANR	6533373	IdentifierDecl	"path [ ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , pid }"		6532660	0					
ANR	6533374	IdentifierDeclType	int [ ]		6532660	0					
ANR	6533375	Identifier	path		6532660	1					
ANR	6533376	AssignmentExpression	"path [ ] = { CTL_KERN , KERN_PROC , KERN_PROC_PID , pid }"		6532660	2		=			
ANR	6533377	Identifier	path		6532660	0					
ANR	6533378	InitializerList	CTL_KERN		6532660	1					
ANR	6533379	Identifier	CTL_KERN		6532660	0					
ANR	6533380	Identifier	KERN_PROC		6532660	1					
ANR	6533381	Identifier	KERN_PROC_PID		6532660	2					
ANR	6533382	Identifier	pid		6532660	3					
ANR	6533383	IdentifierDeclStatement	const int pathLenth = ( sizeof ( path ) / sizeof ( int ) ) ;	888:1:23710:23762	6532660	4	True				
ANR	6533384	IdentifierDecl	pathLenth = ( sizeof ( path ) / sizeof ( int ) )		6532660	0					
ANR	6533385	IdentifierDeclType	const int		6532660	0					
ANR	6533386	Identifier	pathLenth		6532660	1					
ANR	6533387	AssignmentExpression	pathLenth = ( sizeof ( path ) / sizeof ( int ) )		6532660	2		=			
ANR	6533388	Identifier	pathLenth		6532660	0					
ANR	6533389	MultiplicativeExpression	sizeof ( path ) / sizeof ( int )		6532660	1		/			
ANR	6533390	SizeofExpression	sizeof ( path )		6532660	0					
ANR	6533391	Sizeof	sizeof		6532660	0					
ANR	6533392	SizeofOperand	path		6532660	1					
ANR	6533393	SizeofExpression	sizeof ( int )		6532660	1					
ANR	6533394	Sizeof	sizeof		6532660	0					
ANR	6533395	SizeofOperand	int		6532660	1					
ANR	6533396	IdentifierDeclStatement	"int sysctlResult = sysctl ( path , pathLenth , & process , & procBufferSize , NULL , 0 ) ;"	889:1:23765:23844	6532660	5	True				
ANR	6533397	IdentifierDecl	"sysctlResult = sysctl ( path , pathLenth , & process , & procBufferSize , NULL , 0 )"		6532660	0					
ANR	6533398	IdentifierDeclType	int		6532660	0					
ANR	6533399	Identifier	sysctlResult		6532660	1					
ANR	6533400	AssignmentExpression	"sysctlResult = sysctl ( path , pathLenth , & process , & procBufferSize , NULL , 0 )"		6532660	2		=			
ANR	6533401	Identifier	sysctlResult		6532660	0					
ANR	6533402	CallExpression	"sysctl ( path , pathLenth , & process , & procBufferSize , NULL , 0 )"		6532660	1					
ANR	6533403	Callee	sysctl		6532660	0					
ANR	6533404	Identifier	sysctl		6532660	0					
ANR	6533405	ArgumentList	path		6532660	1					
ANR	6533406	Argument	path		6532660	0					
ANR	6533407	Identifier	path		6532660	0					
ANR	6533408	Argument	pathLenth		6532660	1					
ANR	6533409	Identifier	pathLenth		6532660	0					
ANR	6533410	Argument	& process		6532660	2					
ANR	6533411	UnaryOperationExpression	& process		6532660	0					
ANR	6533412	UnaryOperator	&		6532660	0					
ANR	6533413	Identifier	process		6532660	1					
ANR	6533414	Argument	& procBufferSize		6532660	3					
ANR	6533415	UnaryOperationExpression	& procBufferSize		6532660	0					
ANR	6533416	UnaryOperator	&		6532660	0					
ANR	6533417	Identifier	procBufferSize		6532660	1					
ANR	6533418	Argument	NULL		6532660	4					
ANR	6533419	Identifier	NULL		6532660	0					
ANR	6533420	Argument	0		6532660	5					
ANR	6533421	PrimaryExpression	0		6532660	0					
ANR	6533422	IfStatement	if ( ( sysctlResult == 0 ) && ( procBufferSize != 0 ) )		6532660	6					
ANR	6533423	Condition	( sysctlResult == 0 ) && ( procBufferSize != 0 )	891:5:23921:23964	6532660	0	True				
ANR	6533424	AndExpression	( sysctlResult == 0 ) && ( procBufferSize != 0 )		6532660	0		&&			
ANR	6533425	EqualityExpression	sysctlResult == 0		6532660	0		==			
ANR	6533426	Identifier	sysctlResult		6532660	0					
ANR	6533427	PrimaryExpression	0		6532660	1					
ANR	6533428	EqualityExpression	procBufferSize != 0		6532660	1		!=			
ANR	6533429	Identifier	procBufferSize		6532660	0					
ANR	6533430	PrimaryExpression	0		6532660	1					
ANR	6533431	CompoundStatement		153:51:5028:5028	6532660	1					
ANR	6533432	ExpressionStatement	uid = process . kp_eproc . e_ucred . cr_uid	892:2:23971:24008	6532660	0	True				
ANR	6533433	AssignmentExpression	uid = process . kp_eproc . e_ucred . cr_uid		6532660	0		=			
ANR	6533434	Identifier	uid		6532660	0					
ANR	6533435	MemberAccess	process . kp_eproc . e_ucred . cr_uid		6532660	1					
ANR	6533436	MemberAccess	process . kp_eproc . e_ucred		6532660	0					
ANR	6533437	MemberAccess	process . kp_eproc		6532660	0					
ANR	6533438	Identifier	process		6532660	0					
ANR	6533439	Identifier	kp_eproc		6532660	1					
ANR	6533440	Identifier	e_ucred		6532660	1					
ANR	6533441	Identifier	cr_uid		6532660	1					
ANR	6533442	ReturnStatement	return uid ;	894:1:24014:24024	6532660	7	True				
ANR	6533443	Identifier	uid		6532660	0					
ANR	6533444	Statement	bool	897:0:24029:24032	6532660	91	True				
ANR	6533445	Statement	xnu_generate_corefile	897:5:24034:24054	6532660	92	True				
ANR	6533446	Statement	(	897:27:24056:24056	6532660	93	True				
ANR	6533447	Statement	RDebug	897:28:24057:24062	6532660	94	True				
ANR	6533448	Statement	*	897:35:24064:24064	6532660	95	True				
ANR	6533449	Statement	dbg	897:36:24065:24067	6532660	96	True				
ANR	6533450	Statement	","	897:39:24068:24068	6532660	97	True				
ANR	6533451	Statement	RBuffer	897:41:24070:24076	6532660	98	True				
ANR	6533452	Statement	*	897:49:24078:24078	6532660	99	True				
ANR	6533453	Statement	dest	897:50:24079:24082	6532660	100	True				
ANR	6533454	Statement	)	897:54:24083:24083	6532660	101	True				
ANR	6533455	CompoundStatement		178:1:5571:5580	6532660	102					
ANR	6533456	IdentifierDeclStatement	"int error = 0 , i ;"	898:1:24088:24104	6532660	0	True				
ANR	6533457	IdentifierDecl	error = 0		6532660	0					
ANR	6533458	IdentifierDeclType	int		6532660	0					
ANR	6533459	Identifier	error		6532660	1					
ANR	6533460	AssignmentExpression	error = 0		6532660	2		=			
ANR	6533461	Identifier	error		6532660	0					
ANR	6533462	PrimaryExpression	0		6532660	1					
ANR	6533463	IdentifierDecl	i		6532660	1					
ANR	6533464	IdentifierDeclType	int		6532660	0					
ANR	6533465	Identifier	i		6532660	1					
ANR	6533466	IdentifierDeclStatement	int tstate_size ;	899:1:24107:24122	6532660	1	True				
ANR	6533467	IdentifierDecl	tstate_size		6532660	0					
ANR	6533468	IdentifierDeclType	int		6532660	0					
ANR	6533469	Identifier	tstate_size		6532660	1					
ANR	6533470	IdentifierDeclStatement	int segment_count ;	900:1:24125:24142	6532660	2	True				
ANR	6533471	IdentifierDecl	segment_count		6532660	0					
ANR	6533472	IdentifierDeclType	int		6532660	0					
ANR	6533473	Identifier	segment_count		6532660	1					
ANR	6533474	IdentifierDeclStatement	int command_size ;	901:1:24145:24161	6532660	3	True				
ANR	6533475	IdentifierDecl	command_size		6532660	0					
ANR	6533476	IdentifierDeclType	int		6532660	0					
ANR	6533477	Identifier	command_size		6532660	1					
ANR	6533478	IdentifierDeclStatement	int header_size ;	902:1:24164:24179	6532660	4	True				
ANR	6533479	IdentifierDecl	header_size		6532660	0					
ANR	6533480	IdentifierDeclType	int		6532660	0					
ANR	6533481	Identifier	header_size		6532660	1					
ANR	6533482	IdentifierDeclStatement	size_t mach_header_sz ;	903:1:24182:24203	6532660	5	True				
ANR	6533483	IdentifierDecl	mach_header_sz		6532660	0					
ANR	6533484	IdentifierDeclType	size_t		6532660	0					
ANR	6533485	Identifier	mach_header_sz		6532660	1					
ANR	6533486	IdentifierDeclStatement	size_t segment_command_sz ;	904:1:24206:24231	6532660	6	True				
ANR	6533487	IdentifierDecl	segment_command_sz		6532660	0					
ANR	6533488	IdentifierDeclType	size_t		6532660	0					
ANR	6533489	Identifier	segment_command_sz		6532660	1					
ANR	6533490	IdentifierDeclStatement	size_t padding_sz ;	905:1:24234:24251	6532660	7	True				
ANR	6533491	IdentifierDecl	padding_sz		6532660	0					
ANR	6533492	IdentifierDeclType	size_t		6532660	0					
ANR	6533493	Identifier	padding_sz		6532660	1					
ANR	6533494	IdentifierDeclStatement	int hoffset ;	906:1:24254:24265	6532660	8	True				
ANR	6533495	IdentifierDecl	hoffset		6532660	0					
ANR	6533496	IdentifierDeclType	int		6532660	0					
ANR	6533497	Identifier	hoffset		6532660	1					
ANR	6533498	IdentifierDeclStatement	RBuffer * mem_maps_buffer ;	908:1:24269:24293	6532660	9	True				
ANR	6533499	IdentifierDecl	* mem_maps_buffer		6532660	0					
ANR	6533500	IdentifierDeclType	RBuffer *		6532660	0					
ANR	6533501	Identifier	mem_maps_buffer		6532660	1					
ANR	6533502	IdentifierDeclStatement	vm_offset_t header ;	909:1:24296:24314	6532660	10	True				
ANR	6533503	IdentifierDecl	header		6532660	0					
ANR	6533504	IdentifierDeclType	vm_offset_t		6532660	0					
ANR	6533505	Identifier	header		6532660	1					
ANR	6533506	IdentifierDeclStatement	ut8 * padding = NULL ;	910:1:24317:24336	6532660	11	True				
ANR	6533507	IdentifierDecl	* padding = NULL		6532660	0					
ANR	6533508	IdentifierDeclType	ut8 *		6532660	0					
ANR	6533509	Identifier	padding		6532660	1					
ANR	6533510	AssignmentExpression	* padding = NULL		6532660	2		=			
ANR	6533511	Identifier	NULL		6532660	0					
ANR	6533512	Identifier	NULL		6532660	1					
ANR	6533513	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	911:1:24339:24362	6532660	12	True				
ANR	6533514	IdentifierDecl	* iter		6532660	0					
ANR	6533515	IdentifierDeclType	RListIter *		6532660	0					
ANR	6533516	Identifier	iter		6532660	1					
ANR	6533517	IdentifierDecl	* iter2		6532660	1					
ANR	6533518	IdentifierDeclType	RListIter *		6532660	0					
ANR	6533519	Identifier	iter2		6532660	1					
ANR	6533520	IdentifierDeclStatement	RList * threads_list ;	912:1:24365:24384	6532660	13	True				
ANR	6533521	IdentifierDecl	* threads_list		6532660	0					
ANR	6533522	IdentifierDeclType	RList *		6532660	0					
ANR	6533523	Identifier	threads_list		6532660	1					
ANR	6533524	IdentifierDeclStatement	xnu_thread_t * thread ;	913:1:24387:24407	6532660	14	True				
ANR	6533525	IdentifierDecl	* thread		6532660	0					
ANR	6533526	IdentifierDeclType	xnu_thread_t *		6532660	0					
ANR	6533527	Identifier	thread		6532660	1					
ANR	6533528	IdentifierDeclStatement	task_t task = pid_to_task ( dbg -> pid ) ;	914:1:24410:24446	6532660	15	True				
ANR	6533529	IdentifierDecl	task = pid_to_task ( dbg -> pid )		6532660	0					
ANR	6533530	IdentifierDeclType	task_t		6532660	0					
ANR	6533531	Identifier	task		6532660	1					
ANR	6533532	AssignmentExpression	task = pid_to_task ( dbg -> pid )		6532660	2		=			
ANR	6533533	Identifier	task		6532660	0					
ANR	6533534	CallExpression	pid_to_task ( dbg -> pid )		6532660	1					
ANR	6533535	Callee	pid_to_task		6532660	0					
ANR	6533536	Identifier	pid_to_task		6532660	0					
ANR	6533537	ArgumentList	dbg -> pid		6532660	1					
ANR	6533538	Argument	dbg -> pid		6532660	0					
ANR	6533539	PtrMemberAccess	dbg -> pid		6532660	0					
ANR	6533540	Identifier	dbg		6532660	0					
ANR	6533541	Identifier	pid		6532660	1					
ANR	6533542	IdentifierDeclStatement	coredump_thread_state_flavor_t flavors [ MAX_TSTATE_FLAVORS ] ;	915:1:24449:24507	6532660	16	True				
ANR	6533543	IdentifierDecl	flavors [ MAX_TSTATE_FLAVORS ]		6532660	0					
ANR	6533544	IdentifierDeclType	coredump_thread_state_flavor_t [ MAX_TSTATE_FLAVORS ]		6532660	0					
ANR	6533545	Identifier	flavors		6532660	1					
ANR	6533546	Identifier	MAX_TSTATE_FLAVORS		6532660	2					
ANR	6533547	IdentifierDeclStatement	tir_t tir ;	916:1:24510:24519	6532660	17	True				
ANR	6533548	IdentifierDecl	tir		6532660	0					
ANR	6533549	IdentifierDeclType	tir_t		6532660	0					
ANR	6533550	Identifier	tir		6532660	1					
ANR	6533551	ExpressionStatement	mem_maps_buffer = r_buf_new ( )	918:1:24523:24553	6532660	18	True				
ANR	6533552	AssignmentExpression	mem_maps_buffer = r_buf_new ( )		6532660	0		=			
ANR	6533553	Identifier	mem_maps_buffer		6532660	0					
ANR	6533554	CallExpression	r_buf_new ( )		6532660	1					
ANR	6533555	Callee	r_buf_new		6532660	0					
ANR	6533556	Identifier	r_buf_new		6532660	0					
ANR	6533557	ArgumentList			6532660	1					
ANR	6533558	ExpressionStatement	"get_mach_header_sizes ( & mach_header_sz , & segment_command_sz )"	920:1:24557:24617	6532660	19	True				
ANR	6533559	CallExpression	"get_mach_header_sizes ( & mach_header_sz , & segment_command_sz )"		6532660	0					
ANR	6533560	Callee	get_mach_header_sizes		6532660	0					
ANR	6533561	Identifier	get_mach_header_sizes		6532660	0					
ANR	6533562	ArgumentList	& mach_header_sz		6532660	1					
ANR	6533563	Argument	& mach_header_sz		6532660	0					
ANR	6533564	UnaryOperationExpression	& mach_header_sz		6532660	0					
ANR	6533565	UnaryOperator	&		6532660	0					
ANR	6533566	Identifier	mach_header_sz		6532660	1					
ANR	6533567	Argument	& segment_command_sz		6532660	1					
ANR	6533568	UnaryOperationExpression	& segment_command_sz		6532660	0					
ANR	6533569	UnaryOperator	&		6532660	0					
ANR	6533570	Identifier	segment_command_sz		6532660	1					
ANR	6533571	ExpressionStatement	( void ) task_suspend ( task )	921:1:24620:24644	6532660	20	True				
ANR	6533572	CastExpression	( void ) task_suspend ( task )		6532660	0					
ANR	6533573	CastTarget	void		6532660	0					
ANR	6533574	CallExpression	task_suspend ( task )		6532660	1					
ANR	6533575	Callee	task_suspend		6532660	0					
ANR	6533576	Identifier	task_suspend		6532660	0					
ANR	6533577	ArgumentList	task		6532660	1					
ANR	6533578	Argument	task		6532660	0					
ANR	6533579	Identifier	task		6532660	0					
ANR	6533580	ExpressionStatement	"threads_list = xnu_thread_list ( dbg , dbg -> pid , r_list_new ( ) )"	922:1:24647:24708	6532660	21	True				
ANR	6533581	AssignmentExpression	"threads_list = xnu_thread_list ( dbg , dbg -> pid , r_list_new ( ) )"		6532660	0		=			
ANR	6533582	Identifier	threads_list		6532660	0					
ANR	6533583	CallExpression	"xnu_thread_list ( dbg , dbg -> pid , r_list_new ( ) )"		6532660	1					
ANR	6533584	Callee	xnu_thread_list		6532660	0					
ANR	6533585	Identifier	xnu_thread_list		6532660	0					
ANR	6533586	ArgumentList	dbg		6532660	1					
ANR	6533587	Argument	dbg		6532660	0					
ANR	6533588	Identifier	dbg		6532660	0					
ANR	6533589	Argument	dbg -> pid		6532660	1					
ANR	6533590	PtrMemberAccess	dbg -> pid		6532660	0					
ANR	6533591	Identifier	dbg		6532660	0					
ANR	6533592	Identifier	pid		6532660	1					
ANR	6533593	Argument	r_list_new ( )		6532660	2					
ANR	6533594	CallExpression	r_list_new ( )		6532660	0					
ANR	6533595	Callee	r_list_new		6532660	0					
ANR	6533596	Identifier	r_list_new		6532660	0					
ANR	6533597	ArgumentList			6532660	1					
ANR	6533598	ExpressionStatement	xnu_dealloc_threads ( threads_list )	923:1:24711:24745	6532660	22	True				
ANR	6533599	CallExpression	xnu_dealloc_threads ( threads_list )		6532660	0					
ANR	6533600	Callee	xnu_dealloc_threads		6532660	0					
ANR	6533601	Identifier	xnu_dealloc_threads		6532660	0					
ANR	6533602	ArgumentList	threads_list		6532660	1					
ANR	6533603	Argument	threads_list		6532660	0					
ANR	6533604	Identifier	threads_list		6532660	0					
ANR	6533605	ExpressionStatement	segment_count = xnu_get_vmmap_entries_for_pid ( dbg -> pid )	925:1:24749:24805	6532660	23	True				
ANR	6533606	AssignmentExpression	segment_count = xnu_get_vmmap_entries_for_pid ( dbg -> pid )		6532660	0		=			
ANR	6533607	Identifier	segment_count		6532660	0					
ANR	6533608	CallExpression	xnu_get_vmmap_entries_for_pid ( dbg -> pid )		6532660	1					
ANR	6533609	Callee	xnu_get_vmmap_entries_for_pid		6532660	0					
ANR	6533610	Identifier	xnu_get_vmmap_entries_for_pid		6532660	0					
ANR	6533611	ArgumentList	dbg -> pid		6532660	1					
ANR	6533612	Argument	dbg -> pid		6532660	0					
ANR	6533613	PtrMemberAccess	dbg -> pid		6532660	0					
ANR	6533614	Identifier	dbg		6532660	0					
ANR	6533615	Identifier	pid		6532660	1					
ANR	6533616	ExpressionStatement	"memcpy ( thread_flavor_array , & flavors , sizeof ( thread_flavor_array ) )"	927:1:24809:24877	6532660	24	True				
ANR	6533617	CallExpression	"memcpy ( thread_flavor_array , & flavors , sizeof ( thread_flavor_array ) )"		6532660	0					
ANR	6533618	Callee	memcpy		6532660	0					
ANR	6533619	Identifier	memcpy		6532660	0					
ANR	6533620	ArgumentList	thread_flavor_array		6532660	1					
ANR	6533621	Argument	thread_flavor_array		6532660	0					
ANR	6533622	Identifier	thread_flavor_array		6532660	0					
ANR	6533623	Argument	& flavors		6532660	1					
ANR	6533624	UnaryOperationExpression	& flavors		6532660	0					
ANR	6533625	UnaryOperator	&		6532660	0					
ANR	6533626	Identifier	flavors		6532660	1					
ANR	6533627	Argument	sizeof ( thread_flavor_array )		6532660	2					
ANR	6533628	SizeofExpression	sizeof ( thread_flavor_array )		6532660	0					
ANR	6533629	Sizeof	sizeof		6532660	0					
ANR	6533630	SizeofOperand	thread_flavor_array		6532660	1					
ANR	6533631	ExpressionStatement	tstate_size = 0	928:1:24880:24895	6532660	25	True				
ANR	6533632	AssignmentExpression	tstate_size = 0		6532660	0		=			
ANR	6533633	Identifier	tstate_size		6532660	0					
ANR	6533634	PrimaryExpression	0		6532660	1					
ANR	6533635	ForStatement	for ( i = 0 ; i < coredump_nflavors ; i ++ )		6532660	26					
ANR	6533636	ForInit	i = 0 ;	930:6:24904:24909	6532660	0	True				
ANR	6533637	AssignmentExpression	i = 0		6532660	0		=			
ANR	6533638	Identifier	i		6532660	0					
ANR	6533639	PrimaryExpression	0		6532660	1					
ANR	6533640	Condition	i < coredump_nflavors	930:13:24911:24931	6532660	1	True				
ANR	6533641	RelationalExpression	i < coredump_nflavors		6532660	0		<			
ANR	6533642	Identifier	i		6532660	0					
ANR	6533643	Identifier	coredump_nflavors		6532660	1					
ANR	6533644	PostIncDecOperationExpression	i ++	930:36:24934:24936	6532660	2	True				
ANR	6533645	Identifier	i		6532660	0					
ANR	6533646	IncDec	++		6532660	1					
ANR	6533647	CompoundStatement		192:41:6000:6000	6532660	3					
ANR	6533648	ExpressionStatement	tstate_size += sizeof ( coredump_thread_state_flavor_t ) + ( flavors [ i ] . count * sizeof ( int ) )	931:2:24943:25035	6532660	0	True				
ANR	6533649	AssignmentExpression	tstate_size += sizeof ( coredump_thread_state_flavor_t ) + ( flavors [ i ] . count * sizeof ( int ) )		6532660	0		+=			
ANR	6533650	Identifier	tstate_size		6532660	0					
ANR	6533651	AdditiveExpression	sizeof ( coredump_thread_state_flavor_t ) + ( flavors [ i ] . count * sizeof ( int ) )		6532660	1		+			
ANR	6533652	SizeofExpression	sizeof ( coredump_thread_state_flavor_t )		6532660	0					
ANR	6533653	Sizeof	sizeof		6532660	0					
ANR	6533654	SizeofOperand	coredump_thread_state_flavor_t		6532660	1					
ANR	6533655	MultiplicativeExpression	flavors [ i ] . count * sizeof ( int )		6532660	1		*			
ANR	6533656	MemberAccess	flavors [ i ] . count		6532660	0					
ANR	6533657	ArrayIndexing	flavors [ i ]		6532660	0					
ANR	6533658	Identifier	flavors		6532660	0					
ANR	6533659	Identifier	i		6532660	1					
ANR	6533660	Identifier	count		6532660	1					
ANR	6533661	SizeofExpression	sizeof ( int )		6532660	1					
ANR	6533662	Sizeof	sizeof		6532660	0					
ANR	6533663	SizeofOperand	int		6532660	1					
ANR	6533664	ExpressionStatement	"command_size = COMMAND_SIZE ( segment_count , segment_command_sz , r_list_length ( threads_list ) , tstate_size )"	935:1:25042:25150	6532660	27	True				
ANR	6533665	AssignmentExpression	"command_size = COMMAND_SIZE ( segment_count , segment_command_sz , r_list_length ( threads_list ) , tstate_size )"		6532660	0		=			
ANR	6533666	Identifier	command_size		6532660	0					
ANR	6533667	CallExpression	"COMMAND_SIZE ( segment_count , segment_command_sz , r_list_length ( threads_list ) , tstate_size )"		6532660	1					
ANR	6533668	Callee	COMMAND_SIZE		6532660	0					
ANR	6533669	Identifier	COMMAND_SIZE		6532660	0					
ANR	6533670	ArgumentList	segment_count		6532660	1					
ANR	6533671	Argument	segment_count		6532660	0					
ANR	6533672	Identifier	segment_count		6532660	0					
ANR	6533673	Argument	segment_command_sz		6532660	1					
ANR	6533674	Identifier	segment_command_sz		6532660	0					
ANR	6533675	Argument	r_list_length ( threads_list )		6532660	2					
ANR	6533676	CallExpression	r_list_length ( threads_list )		6532660	0					
ANR	6533677	Callee	r_list_length		6532660	0					
ANR	6533678	Identifier	r_list_length		6532660	0					
ANR	6533679	ArgumentList	threads_list		6532660	1					
ANR	6533680	Argument	threads_list		6532660	0					
ANR	6533681	Identifier	threads_list		6532660	0					
ANR	6533682	Argument	tstate_size		6532660	3					
ANR	6533683	Identifier	tstate_size		6532660	0					
ANR	6533684	ExpressionStatement	header_size = command_size + mach_header_sz	937:1:25153:25196	6532660	28	True				
ANR	6533685	AssignmentExpression	header_size = command_size + mach_header_sz		6532660	0		=			
ANR	6533686	Identifier	header_size		6532660	0					
ANR	6533687	AdditiveExpression	command_size + mach_header_sz		6532660	1		+			
ANR	6533688	Identifier	command_size		6532660	0					
ANR	6533689	Identifier	mach_header_sz		6532660	1					
ANR	6533690	ExpressionStatement	"header = ( vm_offset_t ) calloc ( 1 , header_size )"	938:1:25235:25280	6532660	29	True				
ANR	6533691	AssignmentExpression	"header = ( vm_offset_t ) calloc ( 1 , header_size )"		6532660	0		=			
ANR	6533692	Identifier	header		6532660	0					
ANR	6533693	CastExpression	"( vm_offset_t ) calloc ( 1 , header_size )"		6532660	1					
ANR	6533694	CastTarget	vm_offset_t		6532660	0					
ANR	6533695	CallExpression	"calloc ( 1 , header_size )"		6532660	1					
ANR	6533696	Callee	calloc		6532660	0					
ANR	6533697	Identifier	calloc		6532660	0					
ANR	6533698	ArgumentList	1		6532660	1					
ANR	6533699	Argument	1		6532660	0					
ANR	6533700	PrimaryExpression	1		6532660	0					
ANR	6533701	Argument	header_size		6532660	1					
ANR	6533702	Identifier	header_size		6532660	0					
ANR	6533703	ExpressionStatement	"xnu_build_corefile_header ( header , segment_count , r_list_length ( threads_list ) , command_size , dbg -> pid )"	939:1:25283:25388	6532660	30	True				
ANR	6533704	CallExpression	"xnu_build_corefile_header ( header , segment_count , r_list_length ( threads_list ) , command_size , dbg -> pid )"		6532660	0					
ANR	6533705	Callee	xnu_build_corefile_header		6532660	0					
ANR	6533706	Identifier	xnu_build_corefile_header		6532660	0					
ANR	6533707	ArgumentList	header		6532660	1					
ANR	6533708	Argument	header		6532660	0					
ANR	6533709	Identifier	header		6532660	0					
ANR	6533710	Argument	segment_count		6532660	1					
ANR	6533711	Identifier	segment_count		6532660	0					
ANR	6533712	Argument	r_list_length ( threads_list )		6532660	2					
ANR	6533713	CallExpression	r_list_length ( threads_list )		6532660	0					
ANR	6533714	Callee	r_list_length		6532660	0					
ANR	6533715	Identifier	r_list_length		6532660	0					
ANR	6533716	ArgumentList	threads_list		6532660	1					
ANR	6533717	Argument	threads_list		6532660	0					
ANR	6533718	Identifier	threads_list		6532660	0					
ANR	6533719	Argument	command_size		6532660	3					
ANR	6533720	Identifier	command_size		6532660	0					
ANR	6533721	Argument	dbg -> pid		6532660	4					
ANR	6533722	PtrMemberAccess	dbg -> pid		6532660	0					
ANR	6533723	Identifier	dbg		6532660	0					
ANR	6533724	Identifier	pid		6532660	1					
ANR	6533725	IfStatement	if ( ! dbg -> maps )		6532660	31					
ANR	6533726	Condition	! dbg -> maps	942:5:25396:25405	6532660	0	True				
ANR	6533727	UnaryOperationExpression	! dbg -> maps		6532660	0					
ANR	6533728	UnaryOperator	!		6532660	0					
ANR	6533729	PtrMemberAccess	dbg -> maps		6532660	1					
ANR	6533730	Identifier	dbg		6532660	0					
ANR	6533731	Identifier	maps		6532660	1					
ANR	6533732	CompoundStatement		204:17:6469:6469	6532660	1					
ANR	6533733	ExpressionStatement	"perror ( ""There are not loaded maps"" )"	943:2:25412:25448	6532660	0	True				
ANR	6533734	CallExpression	"perror ( ""There are not loaded maps"" )"		6532660	0					
ANR	6533735	Callee	perror		6532660	0					
ANR	6533736	Identifier	perror		6532660	0					
ANR	6533737	ArgumentList	"""There are not loaded maps"""		6532660	1					
ANR	6533738	Argument	"""There are not loaded maps"""		6532660	0					
ANR	6533739	PrimaryExpression	"""There are not loaded maps"""		6532660	0					
ANR	6533740	IfStatement	"if ( xnu_write_mem_maps_to_buffer ( mem_maps_buffer , dbg -> maps , round_page ( header_size ) , header , mach_header_sz , segment_command_sz , & hoffset ) < 0 )"		6532660	32					
ANR	6533741	Condition	"xnu_write_mem_maps_to_buffer ( mem_maps_buffer , dbg -> maps , round_page ( header_size ) , header , mach_header_sz , segment_command_sz , & hoffset ) < 0"	945:5:25458:25600	6532660	0	True				
ANR	6533742	RelationalExpression	"xnu_write_mem_maps_to_buffer ( mem_maps_buffer , dbg -> maps , round_page ( header_size ) , header , mach_header_sz , segment_command_sz , & hoffset ) < 0"		6532660	0		<			
ANR	6533743	CallExpression	"xnu_write_mem_maps_to_buffer ( mem_maps_buffer , dbg -> maps , round_page ( header_size ) , header , mach_header_sz , segment_command_sz , & hoffset )"		6532660	0					
ANR	6533744	Callee	xnu_write_mem_maps_to_buffer		6532660	0					
ANR	6533745	Identifier	xnu_write_mem_maps_to_buffer		6532660	0					
ANR	6533746	ArgumentList	mem_maps_buffer		6532660	1					
ANR	6533747	Argument	mem_maps_buffer		6532660	0					
ANR	6533748	Identifier	mem_maps_buffer		6532660	0					
ANR	6533749	Argument	dbg -> maps		6532660	1					
ANR	6533750	PtrMemberAccess	dbg -> maps		6532660	0					
ANR	6533751	Identifier	dbg		6532660	0					
ANR	6533752	Identifier	maps		6532660	1					
ANR	6533753	Argument	round_page ( header_size )		6532660	2					
ANR	6533754	CallExpression	round_page ( header_size )		6532660	0					
ANR	6533755	Callee	round_page		6532660	0					
ANR	6533756	Identifier	round_page		6532660	0					
ANR	6533757	ArgumentList	header_size		6532660	1					
ANR	6533758	Argument	header_size		6532660	0					
ANR	6533759	Identifier	header_size		6532660	0					
ANR	6533760	Argument	header		6532660	3					
ANR	6533761	Identifier	header		6532660	0					
ANR	6533762	Argument	mach_header_sz		6532660	4					
ANR	6533763	Identifier	mach_header_sz		6532660	0					
ANR	6533764	Argument	segment_command_sz		6532660	5					
ANR	6533765	Identifier	segment_command_sz		6532660	0					
ANR	6533766	Argument	& hoffset		6532660	6					
ANR	6533767	UnaryOperationExpression	& hoffset		6532660	0					
ANR	6533768	UnaryOperator	&		6532660	0					
ANR	6533769	Identifier	hoffset		6532660	1					
ANR	6533770	PrimaryExpression	0		6532660	1					
ANR	6533771	CompoundStatement		208:61:6664:6664	6532660	1					
ANR	6533772	ExpressionStatement	"eprintf ( ""There was an error while writing the memory maps"" )"	947:2:25607:25667	6532660	0	True				
ANR	6533773	CallExpression	"eprintf ( ""There was an error while writing the memory maps"" )"		6532660	0					
ANR	6533774	Callee	eprintf		6532660	0					
ANR	6533775	Identifier	eprintf		6532660	0					
ANR	6533776	ArgumentList	"""There was an error while writing the memory maps"""		6532660	1					
ANR	6533777	Argument	"""There was an error while writing the memory maps"""		6532660	0					
ANR	6533778	PrimaryExpression	"""There was an error while writing the memory maps"""		6532660	0					
ANR	6533779	ExpressionStatement	error = false	948:2:25671:25684	6532660	1	True				
ANR	6533780	AssignmentExpression	error = false		6532660	0		=			
ANR	6533781	Identifier	error		6532660	0					
ANR	6533782	Identifier	false		6532660	1					
ANR	6533783	GotoStatement	goto cleanup ;	949:2:25688:25700	6532660	2	True				
ANR	6533784	Identifier	cleanup		6532660	0					
ANR	6533785	ExpressionStatement	tir . header = header	952:1:25707:25726	6532660	33	True				
ANR	6533786	AssignmentExpression	tir . header = header		6532660	0		=			
ANR	6533787	MemberAccess	tir . header		6532660	0					
ANR	6533788	Identifier	tir		6532660	0					
ANR	6533789	Identifier	header		6532660	1					
ANR	6533790	Identifier	header		6532660	1					
ANR	6533791	ExpressionStatement	tir . hoffset = hoffset	953:1:25729:25750	6532660	34	True				
ANR	6533792	AssignmentExpression	tir . hoffset = hoffset		6532660	0		=			
ANR	6533793	MemberAccess	tir . hoffset		6532660	0					
ANR	6533794	Identifier	tir		6532660	0					
ANR	6533795	Identifier	hoffset		6532660	1					
ANR	6533796	Identifier	hoffset		6532660	1					
ANR	6533797	ExpressionStatement	tir . flavors = flavors	954:1:25753:25774	6532660	35	True				
ANR	6533798	AssignmentExpression	tir . flavors = flavors		6532660	0		=			
ANR	6533799	MemberAccess	tir . flavors		6532660	0					
ANR	6533800	Identifier	tir		6532660	0					
ANR	6533801	Identifier	flavors		6532660	1					
ANR	6533802	Identifier	flavors		6532660	1					
ANR	6533803	ExpressionStatement	tir . tstate_size = tstate_size	955:1:25777:25806	6532660	36	True				
ANR	6533804	AssignmentExpression	tir . tstate_size = tstate_size		6532660	0		=			
ANR	6533805	MemberAccess	tir . tstate_size		6532660	0					
ANR	6533806	Identifier	tir		6532660	0					
ANR	6533807	Identifier	tstate_size		6532660	1					
ANR	6533808	Identifier	tstate_size		6532660	1					
ANR	6533809	Statement	r_list_foreach_safe	957:1:25810:25828	6532660	37	True				
ANR	6533810	Statement	(	957:21:25830:25830	6532660	38	True				
ANR	6533811	Statement	threads_list	957:22:25831:25842	6532660	39	True				
ANR	6533812	Statement	","	957:34:25843:25843	6532660	40	True				
ANR	6533813	Statement	iter	957:36:25845:25848	6532660	41	True				
ANR	6533814	Statement	","	957:40:25849:25849	6532660	42	True				
ANR	6533815	Statement	iter2	957:42:25851:25855	6532660	43	True				
ANR	6533816	Statement	","	957:47:25856:25856	6532660	44	True				
ANR	6533817	Statement	thread	957:49:25858:25863	6532660	45	True				
ANR	6533818	Statement	)	957:55:25864:25864	6532660	46	True				
ANR	6533819	CompoundStatement		219:57:6927:6927	6532660	47					
ANR	6533820	ExpressionStatement	"xnu_collect_thread_state ( thread -> port , & tir )"	958:2:25870:25915	6532660	0	True				
ANR	6533821	CallExpression	"xnu_collect_thread_state ( thread -> port , & tir )"		6532660	0					
ANR	6533822	Callee	xnu_collect_thread_state		6532660	0					
ANR	6533823	Identifier	xnu_collect_thread_state		6532660	0					
ANR	6533824	ArgumentList	thread -> port		6532660	1					
ANR	6533825	Argument	thread -> port		6532660	0					
ANR	6533826	PtrMemberAccess	thread -> port		6532660	0					
ANR	6533827	Identifier	thread		6532660	0					
ANR	6533828	Identifier	port		6532660	1					
ANR	6533829	Argument	& tir		6532660	1					
ANR	6533830	UnaryOperationExpression	& tir		6532660	0					
ANR	6533831	UnaryOperator	&		6532660	0					
ANR	6533832	Identifier	tir		6532660	1					
ANR	6533833	ExpressionStatement	xnu_dealloc_threads ( threads_list )	960:1:25921:25955	6532660	48	True				
ANR	6533834	CallExpression	xnu_dealloc_threads ( threads_list )		6532660	0					
ANR	6533835	Callee	xnu_dealloc_threads		6532660	0					
ANR	6533836	Identifier	xnu_dealloc_threads		6532660	0					
ANR	6533837	ArgumentList	threads_list		6532660	1					
ANR	6533838	Argument	threads_list		6532660	0					
ANR	6533839	Identifier	threads_list		6532660	0					
ANR	6533840	ExpressionStatement	"r_buf_append_bytes ( dest , ( const ut8 * ) header , header_size )"	962:1:25959:26017	6532660	49	True				
ANR	6533841	CallExpression	"r_buf_append_bytes ( dest , ( const ut8 * ) header , header_size )"		6532660	0					
ANR	6533842	Callee	r_buf_append_bytes		6532660	0					
ANR	6533843	Identifier	r_buf_append_bytes		6532660	0					
ANR	6533844	ArgumentList	dest		6532660	1					
ANR	6533845	Argument	dest		6532660	0					
ANR	6533846	Identifier	dest		6532660	0					
ANR	6533847	Argument	( const ut8 * ) header		6532660	1					
ANR	6533848	CastExpression	( const ut8 * ) header		6532660	0					
ANR	6533849	CastTarget	const ut8 *		6532660	0					
ANR	6533850	Identifier	header		6532660	1					
ANR	6533851	Argument	header_size		6532660	2					
ANR	6533852	Identifier	header_size		6532660	0					
ANR	6533853	ExpressionStatement	padding_sz = round_page ( header_size ) - header_size	963:1:26020:26071	6532660	50	True				
ANR	6533854	AssignmentExpression	padding_sz = round_page ( header_size ) - header_size		6532660	0		=			
ANR	6533855	Identifier	padding_sz		6532660	0					
ANR	6533856	AdditiveExpression	round_page ( header_size ) - header_size		6532660	1		-			
ANR	6533857	CallExpression	round_page ( header_size )		6532660	0					
ANR	6533858	Callee	round_page		6532660	0					
ANR	6533859	Identifier	round_page		6532660	0					
ANR	6533860	ArgumentList	header_size		6532660	1					
ANR	6533861	Argument	header_size		6532660	0					
ANR	6533862	Identifier	header_size		6532660	0					
ANR	6533863	Identifier	header_size		6532660	1					
ANR	6533864	ExpressionStatement	"padding = ( ut8 * ) calloc ( 1 , padding_sz )"	964:1:26074:26112	6532660	51	True				
ANR	6533865	AssignmentExpression	"padding = ( ut8 * ) calloc ( 1 , padding_sz )"		6532660	0		=			
ANR	6533866	Identifier	padding		6532660	0					
ANR	6533867	CastExpression	"( ut8 * ) calloc ( 1 , padding_sz )"		6532660	1					
ANR	6533868	CastTarget	ut8 *		6532660	0					
ANR	6533869	CallExpression	"calloc ( 1 , padding_sz )"		6532660	1					
ANR	6533870	Callee	calloc		6532660	0					
ANR	6533871	Identifier	calloc		6532660	0					
ANR	6533872	ArgumentList	1		6532660	1					
ANR	6533873	Argument	1		6532660	0					
ANR	6533874	PrimaryExpression	1		6532660	0					
ANR	6533875	Argument	padding_sz		6532660	1					
ANR	6533876	Identifier	padding_sz		6532660	0					
ANR	6533877	ExpressionStatement	"r_buf_append_bytes ( dest , ( const ut8 * ) padding , padding_sz )"	965:1:26115:26173	6532660	52	True				
ANR	6533878	CallExpression	"r_buf_append_bytes ( dest , ( const ut8 * ) padding , padding_sz )"		6532660	0					
ANR	6533879	Callee	r_buf_append_bytes		6532660	0					
ANR	6533880	Identifier	r_buf_append_bytes		6532660	0					
ANR	6533881	ArgumentList	dest		6532660	1					
ANR	6533882	Argument	dest		6532660	0					
ANR	6533883	Identifier	dest		6532660	0					
ANR	6533884	Argument	( const ut8 * ) padding		6532660	1					
ANR	6533885	CastExpression	( const ut8 * ) padding		6532660	0					
ANR	6533886	CastTarget	const ut8 *		6532660	0					
ANR	6533887	Identifier	padding		6532660	1					
ANR	6533888	Argument	padding_sz		6532660	2					
ANR	6533889	Identifier	padding_sz		6532660	0					
ANR	6533890	ExpressionStatement	"r_buf_append_buf ( dest , mem_maps_buffer )"	966:1:26176:26216	6532660	53	True				
ANR	6533891	CallExpression	"r_buf_append_buf ( dest , mem_maps_buffer )"		6532660	0					
ANR	6533892	Callee	r_buf_append_buf		6532660	0					
ANR	6533893	Identifier	r_buf_append_buf		6532660	0					
ANR	6533894	ArgumentList	dest		6532660	1					
ANR	6533895	Argument	dest		6532660	0					
ANR	6533896	Identifier	dest		6532660	0					
ANR	6533897	Argument	mem_maps_buffer		6532660	1					
ANR	6533898	Identifier	mem_maps_buffer		6532660	0					
ANR	6533899	Label	cleanup :	968:0:26219:26226	6532660	54	True				
ANR	6533900	Identifier	cleanup		6532660	0					
ANR	6533901	ExpressionStatement	r_buf_free ( mem_maps_buffer )	970:1:26274:26302	6532660	55	True				
ANR	6533902	CallExpression	r_buf_free ( mem_maps_buffer )		6532660	0					
ANR	6533903	Callee	r_buf_free		6532660	0					
ANR	6533904	Identifier	r_buf_free		6532660	0					
ANR	6533905	ArgumentList	mem_maps_buffer		6532660	1					
ANR	6533906	Argument	mem_maps_buffer		6532660	0					
ANR	6533907	Identifier	mem_maps_buffer		6532660	0					
ANR	6533908	ExpressionStatement	free ( ( void * ) header )	971:1:26305:26326	6532660	56	True				
ANR	6533909	CallExpression	free ( ( void * ) header )		6532660	0					
ANR	6533910	Callee	free		6532660	0					
ANR	6533911	Identifier	free		6532660	0					
ANR	6533912	ArgumentList	( void * ) header		6532660	1					
ANR	6533913	Argument	( void * ) header		6532660	0					
ANR	6533914	CastExpression	( void * ) header		6532660	0					
ANR	6533915	CastTarget	void *		6532660	0					
ANR	6533916	Identifier	header		6532660	1					
ANR	6533917	ExpressionStatement	free ( ( void * ) padding )	972:1:26329:26351	6532660	57	True				
ANR	6533918	CallExpression	free ( ( void * ) padding )		6532660	0					
ANR	6533919	Callee	free		6532660	0					
ANR	6533920	Identifier	free		6532660	0					
ANR	6533921	ArgumentList	( void * ) padding		6532660	1					
ANR	6533922	Argument	( void * ) padding		6532660	0					
ANR	6533923	CastExpression	( void * ) padding		6532660	0					
ANR	6533924	CastTarget	void *		6532660	0					
ANR	6533925	Identifier	padding		6532660	1					
ANR	6533926	ExpressionStatement	r_list_free ( threads_list )	973:1:26354:26380	6532660	58	True				
ANR	6533927	CallExpression	r_list_free ( threads_list )		6532660	0					
ANR	6533928	Callee	r_list_free		6532660	0					
ANR	6533929	Identifier	r_list_free		6532660	0					
ANR	6533930	ArgumentList	threads_list		6532660	1					
ANR	6533931	Argument	threads_list		6532660	0					
ANR	6533932	Identifier	threads_list		6532660	0					
ANR	6533933	ReturnStatement	return ! error ;	974:1:26383:26396	6532660	59	True				
ANR	6533934	UnaryOperationExpression	! error		6532660	0					
ANR	6533935	UnaryOperator	!		6532660	0					
ANR	6533936	Identifier	error		6532660	1					
ANR	6533937	Statement	RDebugPid	977:0:26401:26409	6532660	103	True				
ANR	6533938	Statement	*	977:10:26411:26411	6532660	104	True				
ANR	6533939	Statement	xnu_get_pid	977:11:26412:26422	6532660	105	True				
ANR	6533940	Statement	(	977:23:26424:26424	6532660	106	True				
ANR	6533941	Statement	int	977:24:26425:26427	6532660	107	True				
ANR	6533942	Statement	pid	977:28:26429:26431	6532660	108	True				
ANR	6533943	Statement	)	977:31:26432:26432	6532660	109	True				
ANR	6533944	CompoundStatement		244:1:7645:7662	6532660	110					
ANR	6533945	IdentifierDeclStatement	"int psnamelen , foo , nargs , mib [ 3 ] , uid ;"	978:1:26437:26475	6532660	0	True				
ANR	6533946	IdentifierDecl	psnamelen		6532660	0					
ANR	6533947	IdentifierDeclType	int		6532660	0					
ANR	6533948	Identifier	psnamelen		6532660	1					
ANR	6533949	IdentifierDecl	foo		6532660	1					
ANR	6533950	IdentifierDeclType	int		6532660	0					
ANR	6533951	Identifier	foo		6532660	1					
ANR	6533952	IdentifierDecl	nargs		6532660	2					
ANR	6533953	IdentifierDeclType	int		6532660	0					
ANR	6533954	Identifier	nargs		6532660	1					
ANR	6533955	IdentifierDecl	mib [ 3 ]		6532660	3					
ANR	6533956	IdentifierDeclType	int [ 3 ]		6532660	0					
ANR	6533957	Identifier	mib		6532660	1					
ANR	6533958	PrimaryExpression	3		6532660	2					
ANR	6533959	IdentifierDecl	uid		6532660	4					
ANR	6533960	IdentifierDeclType	int		6532660	0					
ANR	6533961	Identifier	uid		6532660	1					
ANR	6533962	IdentifierDeclStatement	"size_t size , argmax = 4096 ;"	979:1:26478:26504	6532660	1	True				
ANR	6533963	IdentifierDecl	size		6532660	0					
ANR	6533964	IdentifierDeclType	size_t		6532660	0					
ANR	6533965	Identifier	size		6532660	1					
ANR	6533966	IdentifierDecl	argmax = 4096		6532660	1					
ANR	6533967	IdentifierDeclType	size_t		6532660	0					
ANR	6533968	Identifier	argmax		6532660	1					
ANR	6533969	AssignmentExpression	argmax = 4096		6532660	2		=			
ANR	6533970	Identifier	argmax		6532660	0					
ANR	6533971	PrimaryExpression	4096		6532660	1					
ANR	6533972	IdentifierDeclStatement	"char * curr_arg , * start_args , * iter_args , * end_args ;"	980:1:26507:26557	6532660	2	True				
ANR	6533973	IdentifierDecl	* curr_arg		6532660	0					
ANR	6533974	IdentifierDeclType	char *		6532660	0					
ANR	6533975	Identifier	curr_arg		6532660	1					
ANR	6533976	IdentifierDecl	* start_args		6532660	1					
ANR	6533977	IdentifierDeclType	char *		6532660	0					
ANR	6533978	Identifier	start_args		6532660	1					
ANR	6533979	IdentifierDecl	* iter_args		6532660	2					
ANR	6533980	IdentifierDeclType	char *		6532660	0					
ANR	6533981	Identifier	iter_args		6532660	1					
ANR	6533982	IdentifierDecl	* end_args		6532660	3					
ANR	6533983	IdentifierDeclType	char *		6532660	0					
ANR	6533984	Identifier	end_args		6532660	1					
ANR	6533985	IdentifierDeclStatement	char * procargs = NULL ;	981:1:26560:26581	6532660	3	True				
ANR	6533986	IdentifierDecl	* procargs = NULL		6532660	0					
ANR	6533987	IdentifierDeclType	char *		6532660	0					
ANR	6533988	Identifier	procargs		6532660	1					
ANR	6533989	AssignmentExpression	* procargs = NULL		6532660	2		=			
ANR	6533990	Identifier	NULL		6532660	0					
ANR	6533991	Identifier	NULL		6532660	1					
ANR	6533992	IdentifierDeclStatement	char psname [ 4096 ] ;	982:1:26584:26601	6532660	4	True				
ANR	6533993	IdentifierDecl	psname [ 4096 ]		6532660	0					
ANR	6533994	IdentifierDeclType	char [ 4096 ]		6532660	0					
ANR	6533995	Identifier	psname		6532660	1					
ANR	6533996	PrimaryExpression	4096		6532660	2					
ANR	6533997	ExpressionStatement	mib [ 0 ] = CTL_KERN	985:1:26657:26674	6532660	5	True				
ANR	6533998	AssignmentExpression	mib [ 0 ] = CTL_KERN		6532660	0		=			
ANR	6533999	ArrayIndexing	mib [ 0 ]		6532660	0					
ANR	6534000	Identifier	mib		6532660	0					
ANR	6534001	PrimaryExpression	0		6532660	1					
ANR	6534002	Identifier	CTL_KERN		6532660	1					
ANR	6534003	ExpressionStatement	mib [ 1 ] = KERN_ARGMAX	986:1:26677:26697	6532660	6	True				
ANR	6534004	AssignmentExpression	mib [ 1 ] = KERN_ARGMAX		6532660	0		=			
ANR	6534005	ArrayIndexing	mib [ 1 ]		6532660	0					
ANR	6534006	Identifier	mib		6532660	0					
ANR	6534007	PrimaryExpression	1		6532660	1					
ANR	6534008	Identifier	KERN_ARGMAX		6532660	1					
ANR	6534009	ExpressionStatement	size = sizeof ( argmax )	987:1:26700:26721	6532660	7	True				
ANR	6534010	AssignmentExpression	size = sizeof ( argmax )		6532660	0		=			
ANR	6534011	Identifier	size		6532660	0					
ANR	6534012	SizeofExpression	sizeof ( argmax )		6532660	1					
ANR	6534013	Sizeof	sizeof		6532660	0					
ANR	6534014	SizeofOperand	argmax		6532660	1					
ANR	6534015	IfStatement	"if ( sysctl ( mib , 2 , & argmax , & size , NULL , 0 ) == - 1 )"		6532660	8					
ANR	6534016	Condition	"sysctl ( mib , 2 , & argmax , & size , NULL , 0 ) == - 1"	988:5:26728:26773	6532660	0	True				
ANR	6534017	EqualityExpression	"sysctl ( mib , 2 , & argmax , & size , NULL , 0 ) == - 1"		6532660	0		==			
ANR	6534018	CallExpression	"sysctl ( mib , 2 , & argmax , & size , NULL , 0 )"		6532660	0					
ANR	6534019	Callee	sysctl		6532660	0					
ANR	6534020	Identifier	sysctl		6532660	0					
ANR	6534021	ArgumentList	mib		6532660	1					
ANR	6534022	Argument	mib		6532660	0					
ANR	6534023	Identifier	mib		6532660	0					
ANR	6534024	Argument	2		6532660	1					
ANR	6534025	PrimaryExpression	2		6532660	0					
ANR	6534026	Argument	& argmax		6532660	2					
ANR	6534027	UnaryOperationExpression	& argmax		6532660	0					
ANR	6534028	UnaryOperator	&		6532660	0					
ANR	6534029	Identifier	argmax		6532660	1					
ANR	6534030	Argument	& size		6532660	3					
ANR	6534031	UnaryOperationExpression	& size		6532660	0					
ANR	6534032	UnaryOperator	&		6532660	0					
ANR	6534033	Identifier	size		6532660	1					
ANR	6534034	Argument	NULL		6532660	4					
ANR	6534035	Identifier	NULL		6532660	0					
ANR	6534036	Argument	0		6532660	5					
ANR	6534037	PrimaryExpression	0		6532660	0					
ANR	6534038	UnaryOperationExpression	- 1		6532660	1					
ANR	6534039	UnaryOperator	-		6532660	0					
ANR	6534040	PrimaryExpression	1		6532660	1					
ANR	6534041	CompoundStatement		250:53:7837:7837	6532660	1					
ANR	6534042	ExpressionStatement	"eprintf ( ""sysctl() error on getting argmax\\n"" )"	989:2:26780:26826	6532660	0	True				
ANR	6534043	CallExpression	"eprintf ( ""sysctl() error on getting argmax\\n"" )"		6532660	0					
ANR	6534044	Callee	eprintf		6532660	0					
ANR	6534045	Identifier	eprintf		6532660	0					
ANR	6534046	ArgumentList	"""sysctl() error on getting argmax\\n"""		6532660	1					
ANR	6534047	Argument	"""sysctl() error on getting argmax\\n"""		6532660	0					
ANR	6534048	PrimaryExpression	"""sysctl() error on getting argmax\\n"""		6532660	0					
ANR	6534049	ReturnStatement	return NULL ;	990:2:26830:26841	6532660	1	True				
ANR	6534050	Identifier	NULL		6532660	0					
ANR	6534051	ExpressionStatement	uid = uidFromPid ( pid )	993:1:26854:26876	6532660	9	True				
ANR	6534052	AssignmentExpression	uid = uidFromPid ( pid )		6532660	0		=			
ANR	6534053	Identifier	uid		6532660	0					
ANR	6534054	CallExpression	uidFromPid ( pid )		6532660	1					
ANR	6534055	Callee	uidFromPid		6532660	0					
ANR	6534056	Identifier	uidFromPid		6532660	0					
ANR	6534057	ArgumentList	pid		6532660	1					
ANR	6534058	Argument	pid		6532660	0					
ANR	6534059	Identifier	pid		6532660	0					
ANR	6534060	ExpressionStatement	procargs = ( char * ) malloc ( argmax )	996:1:26921:26955	6532660	10	True				
ANR	6534061	AssignmentExpression	procargs = ( char * ) malloc ( argmax )		6532660	0		=			
ANR	6534062	Identifier	procargs		6532660	0					
ANR	6534063	CastExpression	( char * ) malloc ( argmax )		6532660	1					
ANR	6534064	CastTarget	char *		6532660	0					
ANR	6534065	CallExpression	malloc ( argmax )		6532660	1					
ANR	6534066	Callee	malloc		6532660	0					
ANR	6534067	Identifier	malloc		6532660	0					
ANR	6534068	ArgumentList	argmax		6532660	1					
ANR	6534069	Argument	argmax		6532660	0					
ANR	6534070	Identifier	argmax		6532660	0					
ANR	6534071	IfStatement	if ( ! procargs )		6532660	11					
ANR	6534072	Condition	! procargs	997:5:26962:26970	6532660	0	True				
ANR	6534073	UnaryOperationExpression	! procargs		6532660	0					
ANR	6534074	UnaryOperator	!		6532660	0					
ANR	6534075	Identifier	procargs		6532660	1					
ANR	6534076	CompoundStatement		259:16:8034:8034	6532660	1					
ANR	6534077	ExpressionStatement	"eprintf ( ""getcmdargs(): insufficient memory for procargs %d\\n"" , ( int ) ( size_t ) argmax )"	998:2:26977:27064	6532660	0	True				
ANR	6534078	CallExpression	"eprintf ( ""getcmdargs(): insufficient memory for procargs %d\\n"" , ( int ) ( size_t ) argmax )"		6532660	0					
ANR	6534079	Callee	eprintf		6532660	0					
ANR	6534080	Identifier	eprintf		6532660	0					
ANR	6534081	ArgumentList	"""getcmdargs(): insufficient memory for procargs %d\\n"""		6532660	1					
ANR	6534082	Argument	"""getcmdargs(): insufficient memory for procargs %d\\n"""		6532660	0					
ANR	6534083	PrimaryExpression	"""getcmdargs(): insufficient memory for procargs %d\\n"""		6532660	0					
ANR	6534084	Argument	( int ) ( size_t ) argmax		6532660	1					
ANR	6534085	CastExpression	( int ) ( size_t ) argmax		6532660	0					
ANR	6534086	CastTarget	int		6532660	0					
ANR	6534087	CastExpression	( size_t ) argmax		6532660	1					
ANR	6534088	CastTarget	size_t		6532660	0					
ANR	6534089	Identifier	argmax		6532660	1					
ANR	6534090	ReturnStatement	return NULL ;	1000:2:27068:27079	6532660	1	True				
ANR	6534091	Identifier	NULL		6532660	0					
ANR	6534092	ExpressionStatement	mib [ 0 ] = CTL_KERN	1006:1:27166:27183	6532660	12	True				
ANR	6534093	AssignmentExpression	mib [ 0 ] = CTL_KERN		6532660	0		=			
ANR	6534094	ArrayIndexing	mib [ 0 ]		6532660	0					
ANR	6534095	Identifier	mib		6532660	0					
ANR	6534096	PrimaryExpression	0		6532660	1					
ANR	6534097	Identifier	CTL_KERN		6532660	1					
ANR	6534098	ExpressionStatement	mib [ 1 ] = KERN_PROCARGS2	1007:1:27186:27209	6532660	13	True				
ANR	6534099	AssignmentExpression	mib [ 1 ] = KERN_PROCARGS2		6532660	0		=			
ANR	6534100	ArrayIndexing	mib [ 1 ]		6532660	0					
ANR	6534101	Identifier	mib		6532660	0					
ANR	6534102	PrimaryExpression	1		6532660	1					
ANR	6534103	Identifier	KERN_PROCARGS2		6532660	1					
ANR	6534104	ExpressionStatement	mib [ 2 ] = pid	1008:1:27212:27224	6532660	14	True				
ANR	6534105	AssignmentExpression	mib [ 2 ] = pid		6532660	0		=			
ANR	6534106	ArrayIndexing	mib [ 2 ]		6532660	0					
ANR	6534107	Identifier	mib		6532660	0					
ANR	6534108	PrimaryExpression	2		6532660	1					
ANR	6534109	Identifier	pid		6532660	1					
ANR	6534110	ExpressionStatement	size = argmax	1010:1:27228:27241	6532660	15	True				
ANR	6534111	AssignmentExpression	size = argmax		6532660	0		=			
ANR	6534112	Identifier	size		6532660	0					
ANR	6534113	Identifier	argmax		6532660	1					
ANR	6534114	ExpressionStatement	procargs [ 0 ] = 0	1011:1:27244:27259	6532660	16	True				
ANR	6534115	AssignmentExpression	procargs [ 0 ] = 0		6532660	0		=			
ANR	6534116	ArrayIndexing	procargs [ 0 ]		6532660	0					
ANR	6534117	Identifier	procargs		6532660	0					
ANR	6534118	PrimaryExpression	0		6532660	1					
ANR	6534119	PrimaryExpression	0		6532660	1					
ANR	6534120	IfStatement	"if ( sysctl ( mib , 3 , procargs , & size , NULL , 0 ) == - 1 )"		6532660	17					
ANR	6534121	Condition	"sysctl ( mib , 3 , procargs , & size , NULL , 0 ) == - 1"	1012:5:27266:27312	6532660	0	True				
ANR	6534122	EqualityExpression	"sysctl ( mib , 3 , procargs , & size , NULL , 0 ) == - 1"		6532660	0		==			
ANR	6534123	CallExpression	"sysctl ( mib , 3 , procargs , & size , NULL , 0 )"		6532660	0					
ANR	6534124	Callee	sysctl		6532660	0					
ANR	6534125	Identifier	sysctl		6532660	0					
ANR	6534126	ArgumentList	mib		6532660	1					
ANR	6534127	Argument	mib		6532660	0					
ANR	6534128	Identifier	mib		6532660	0					
ANR	6534129	Argument	3		6532660	1					
ANR	6534130	PrimaryExpression	3		6532660	0					
ANR	6534131	Argument	procargs		6532660	2					
ANR	6534132	Identifier	procargs		6532660	0					
ANR	6534133	Argument	& size		6532660	3					
ANR	6534134	UnaryOperationExpression	& size		6532660	0					
ANR	6534135	UnaryOperator	&		6532660	0					
ANR	6534136	Identifier	size		6532660	1					
ANR	6534137	Argument	NULL		6532660	4					
ANR	6534138	Identifier	NULL		6532660	0					
ANR	6534139	Argument	0		6532660	5					
ANR	6534140	PrimaryExpression	0		6532660	0					
ANR	6534141	UnaryOperationExpression	- 1		6532660	1					
ANR	6534142	UnaryOperator	-		6532660	0					
ANR	6534143	PrimaryExpression	1		6532660	1					
ANR	6534144	CompoundStatement		274:54:8376:8376	6532660	1					
ANR	6534145	IfStatement	if ( EINVAL == errno )		6532660	0					
ANR	6534146	Condition	EINVAL == errno	1013:6:27323:27337	6532660	0	True				
ANR	6534147	EqualityExpression	EINVAL == errno		6532660	0		==			
ANR	6534148	Identifier	EINVAL		6532660	0					
ANR	6534149	Identifier	errno		6532660	1					
ANR	6534150	CompoundStatement		275:23:8401:8401	6532660	1					
ANR	6534151	ExpressionStatement	free ( procargs )	1015:3:27448:27463	6532660	0	True				
ANR	6534152	CallExpression	free ( procargs )		6532660	0					
ANR	6534153	Callee	free		6532660	0					
ANR	6534154	Identifier	free		6532660	0					
ANR	6534155	ArgumentList	procargs		6532660	1					
ANR	6534156	Argument	procargs		6532660	0					
ANR	6534157	Identifier	procargs		6532660	0					
ANR	6534158	ReturnStatement	return NULL ;	1016:3:27468:27479	6532660	1	True				
ANR	6534159	Identifier	NULL		6532660	0					
ANR	6534160	ExpressionStatement	"eprintf ( ""sysctl(): unspecified sysctl error - %i\\n"" , errno )"	1018:2:27487:27547	6532660	1	True				
ANR	6534161	CallExpression	"eprintf ( ""sysctl(): unspecified sysctl error - %i\\n"" , errno )"		6532660	0					
ANR	6534162	Callee	eprintf		6532660	0					
ANR	6534163	Identifier	eprintf		6532660	0					
ANR	6534164	ArgumentList	"""sysctl(): unspecified sysctl error - %i\\n"""		6532660	1					
ANR	6534165	Argument	"""sysctl(): unspecified sysctl error - %i\\n"""		6532660	0					
ANR	6534166	PrimaryExpression	"""sysctl(): unspecified sysctl error - %i\\n"""		6532660	0					
ANR	6534167	Argument	errno		6532660	1					
ANR	6534168	Identifier	errno		6532660	0					
ANR	6534169	ExpressionStatement	free ( procargs )	1019:2:27551:27566	6532660	2	True				
ANR	6534170	CallExpression	free ( procargs )		6532660	0					
ANR	6534171	Callee	free		6532660	0					
ANR	6534172	Identifier	free		6532660	0					
ANR	6534173	ArgumentList	procargs		6532660	1					
ANR	6534174	Argument	procargs		6532660	0					
ANR	6534175	Identifier	procargs		6532660	0					
ANR	6534176	ReturnStatement	return NULL ;	1020:2:27570:27581	6532660	3	True				
ANR	6534177	Identifier	NULL		6532660	0					
ANR	6534178	ExpressionStatement	"memcpy ( & nargs , procargs , sizeof ( nargs ) )"	1024:1:27629:27670	6532660	18	True				
ANR	6534179	CallExpression	"memcpy ( & nargs , procargs , sizeof ( nargs ) )"		6532660	0					
ANR	6534180	Callee	memcpy		6532660	0					
ANR	6534181	Identifier	memcpy		6532660	0					
ANR	6534182	ArgumentList	& nargs		6532660	1					
ANR	6534183	Argument	& nargs		6532660	0					
ANR	6534184	UnaryOperationExpression	& nargs		6532660	0					
ANR	6534185	UnaryOperator	&		6532660	0					
ANR	6534186	Identifier	nargs		6532660	1					
ANR	6534187	Argument	procargs		6532660	1					
ANR	6534188	Identifier	procargs		6532660	0					
ANR	6534189	Argument	sizeof ( nargs )		6532660	2					
ANR	6534190	SizeofExpression	sizeof ( nargs )		6532660	0					
ANR	6534191	Sizeof	sizeof		6532660	0					
ANR	6534192	SizeofOperand	nargs		6532660	1					
ANR	6534193	ExpressionStatement	iter_args = procargs + sizeof ( nargs )	1025:1:27673:27710	6532660	19	True				
ANR	6534194	AssignmentExpression	iter_args = procargs + sizeof ( nargs )		6532660	0		=			
ANR	6534195	Identifier	iter_args		6532660	0					
ANR	6534196	AdditiveExpression	procargs + sizeof ( nargs )		6532660	1		+			
ANR	6534197	Identifier	procargs		6532660	0					
ANR	6534198	SizeofExpression	sizeof ( nargs )		6532660	1					
ANR	6534199	Sizeof	sizeof		6532660	0					
ANR	6534200	SizeofOperand	nargs		6532660	1					
ANR	6534201	ExpressionStatement	end_args = & procargs [ size - 30 ]	1026:1:27713:27744	6532660	20	True				
ANR	6534202	AssignmentExpression	end_args = & procargs [ size - 30 ]		6532660	0		=			
ANR	6534203	Identifier	end_args		6532660	0					
ANR	6534204	UnaryOperationExpression	& procargs [ size - 30 ]		6532660	1					
ANR	6534205	UnaryOperator	&		6532660	0					
ANR	6534206	ArrayIndexing	procargs [ size - 30 ]		6532660	1					
ANR	6534207	Identifier	procargs		6532660	0					
ANR	6534208	AdditiveExpression	size - 30		6532660	1		-			
ANR	6534209	Identifier	size		6532660	0					
ANR	6534210	PrimaryExpression	30		6532660	1					
ANR	6534211	IfStatement	if ( iter_args >= end_args )		6532660	21					
ANR	6534212	Condition	iter_args >= end_args	1027:5:27780:27800	6532660	0	True				
ANR	6534213	RelationalExpression	iter_args >= end_args		6532660	0		>=			
ANR	6534214	Identifier	iter_args		6532660	0					
ANR	6534215	Identifier	end_args		6532660	1					
ANR	6534216	CompoundStatement		289:28:8864:8864	6532660	1					
ANR	6534217	ExpressionStatement	"eprintf ( ""getcmdargs(): argument length mismatch"" )"	1028:2:27807:27857	6532660	0	True				
ANR	6534218	CallExpression	"eprintf ( ""getcmdargs(): argument length mismatch"" )"		6532660	0					
ANR	6534219	Callee	eprintf		6532660	0					
ANR	6534220	Identifier	eprintf		6532660	0					
ANR	6534221	ArgumentList	"""getcmdargs(): argument length mismatch"""		6532660	1					
ANR	6534222	Argument	"""getcmdargs(): argument length mismatch"""		6532660	0					
ANR	6534223	PrimaryExpression	"""getcmdargs(): argument length mismatch"""		6532660	0					
ANR	6534224	ExpressionStatement	free ( procargs )	1029:2:27861:27876	6532660	1	True				
ANR	6534225	CallExpression	free ( procargs )		6532660	0					
ANR	6534226	Callee	free		6532660	0					
ANR	6534227	Identifier	free		6532660	0					
ANR	6534228	ArgumentList	procargs		6532660	1					
ANR	6534229	Argument	procargs		6532660	0					
ANR	6534230	Identifier	procargs		6532660	0					
ANR	6534231	ReturnStatement	return NULL ;	1030:2:27880:27891	6532660	2	True				
ANR	6534232	Identifier	NULL		6532660	0					
ANR	6534233	WhileStatement	while ( iter_args < end_args && * iter_args != '\\0' )		6532660	22					
ANR	6534234	Condition	iter_args < end_args && * iter_args != '\\0'	1037:8:28040:28081	6532660	0	True				
ANR	6534235	AndExpression	iter_args < end_args && * iter_args != '\\0'		6532660	0		&&			
ANR	6534236	RelationalExpression	iter_args < end_args		6532660	0		<			
ANR	6534237	Identifier	iter_args		6532660	0					
ANR	6534238	Identifier	end_args		6532660	1					
ANR	6534239	EqualityExpression	* iter_args != '\\0'		6532660	1		!=			
ANR	6534240	UnaryOperationExpression	* iter_args		6532660	0					
ANR	6534241	UnaryOperator	*		6532660	0					
ANR	6534242	Identifier	iter_args		6532660	1					
ANR	6534243	PrimaryExpression	'\\0'		6532660	1					
ANR	6534244	CompoundStatement		299:52:9145:9145	6532660	1					
ANR	6534245	ExpressionStatement	iter_args ++	1037:54:28086:28097	6532660	0	True				
ANR	6534246	PostIncDecOperationExpression	iter_args ++		6532660	0					
ANR	6534247	Identifier	iter_args		6532660	0					
ANR	6534248	IncDec	++		6532660	1					
ANR	6534249	WhileStatement	while ( iter_args < end_args && * iter_args == '\\0' )		6532660	23					
ANR	6534250	Condition	iter_args < end_args && * iter_args == '\\0'	1038:8:28109:28150	6532660	0	True				
ANR	6534251	AndExpression	iter_args < end_args && * iter_args == '\\0'		6532660	0		&&			
ANR	6534252	RelationalExpression	iter_args < end_args		6532660	0		<			
ANR	6534253	Identifier	iter_args		6532660	0					
ANR	6534254	Identifier	end_args		6532660	1					
ANR	6534255	EqualityExpression	* iter_args == '\\0'		6532660	1		==			
ANR	6534256	UnaryOperationExpression	* iter_args		6532660	0					
ANR	6534257	UnaryOperator	*		6532660	0					
ANR	6534258	Identifier	iter_args		6532660	1					
ANR	6534259	PrimaryExpression	'\\0'		6532660	1					
ANR	6534260	CompoundStatement		300:52:9214:9214	6532660	1					
ANR	6534261	ExpressionStatement	iter_args ++	1038:54:28155:28166	6532660	0	True				
ANR	6534262	PostIncDecOperationExpression	iter_args ++		6532660	0					
ANR	6534263	Identifier	iter_args		6532660	0					
ANR	6534264	IncDec	++		6532660	1					
ANR	6534265	IfStatement	if ( iter_args == end_args )		6532660	24					
ANR	6534266	Condition	iter_args == end_args	1040:5:28182:28202	6532660	0	True				
ANR	6534267	EqualityExpression	iter_args == end_args		6532660	0		==			
ANR	6534268	Identifier	iter_args		6532660	0					
ANR	6534269	Identifier	end_args		6532660	1					
ANR	6534270	CompoundStatement		302:28:9266:9266	6532660	1					
ANR	6534271	ExpressionStatement	free ( procargs )	1041:2:28209:28224	6532660	0	True				
ANR	6534272	CallExpression	free ( procargs )		6532660	0					
ANR	6534273	Callee	free		6532660	0					
ANR	6534274	Identifier	free		6532660	0					
ANR	6534275	ArgumentList	procargs		6532660	1					
ANR	6534276	Argument	procargs		6532660	0					
ANR	6534277	Identifier	procargs		6532660	0					
ANR	6534278	ReturnStatement	return NULL ;	1042:2:28228:28239	6532660	1	True				
ANR	6534279	Identifier	NULL		6532660	0					
ANR	6534280	ExpressionStatement	curr_arg = iter_args	1044:1:28245:28265	6532660	25	True				
ANR	6534281	AssignmentExpression	curr_arg = iter_args		6532660	0		=			
ANR	6534282	Identifier	curr_arg		6532660	0					
ANR	6534283	Identifier	iter_args		6532660	1					
ANR	6534284	ExpressionStatement	start_args = iter_args	1045:1:28268:28290	6532660	26	True				
ANR	6534285	AssignmentExpression	start_args = iter_args		6532660	0		=			
ANR	6534286	Identifier	start_args		6532660	0					
ANR	6534287	Identifier	iter_args		6532660	1					
ANR	6534288	ExpressionStatement	foo = 1	1046:1:28340:28347	6532660	27	True				
ANR	6534289	AssignmentExpression	foo = 1		6532660	0		=			
ANR	6534290	Identifier	foo		6532660	0					
ANR	6534291	PrimaryExpression	1		6532660	1					
ANR	6534292	ExpressionStatement	* psname = 0	1047:1:28350:28361	6532660	28	True				
ANR	6534293	AssignmentExpression	* psname = 0		6532660	0		=			
ANR	6534294	UnaryOperationExpression	* psname		6532660	0					
ANR	6534295	UnaryOperator	*		6532660	0					
ANR	6534296	Identifier	psname		6532660	1					
ANR	6534297	PrimaryExpression	0		6532660	1					
ANR	6534298	ExpressionStatement	psnamelen = 0	1048:1:28364:28377	6532660	29	True				
ANR	6534299	AssignmentExpression	psnamelen = 0		6532660	0		=			
ANR	6534300	Identifier	psnamelen		6532660	0					
ANR	6534301	PrimaryExpression	0		6532660	1					
ANR	6534302	WhileStatement	while ( iter_args < end_args && nargs > 0 )		6532660	30					
ANR	6534303	Condition	iter_args < end_args && nargs > 0	1049:8:28387:28419	6532660	0	True				
ANR	6534304	AndExpression	iter_args < end_args && nargs > 0		6532660	0		&&			
ANR	6534305	RelationalExpression	iter_args < end_args		6532660	0		<			
ANR	6534306	Identifier	iter_args		6532660	0					
ANR	6534307	Identifier	end_args		6532660	1					
ANR	6534308	RelationalExpression	nargs > 0		6532660	1		>			
ANR	6534309	Identifier	nargs		6532660	0					
ANR	6534310	PrimaryExpression	0		6532660	1					
ANR	6534311	CompoundStatement		311:43:9483:9483	6532660	1					
ANR	6534312	IfStatement	if ( * iter_args ++ == '\\0' )		6532660	0					
ANR	6534313	Condition	* iter_args ++ == '\\0'	1050:6:28430:28449	6532660	0	True				
ANR	6534314	EqualityExpression	* iter_args ++ == '\\0'		6532660	0		==			
ANR	6534315	UnaryOperationExpression	* iter_args ++		6532660	0					
ANR	6534316	UnaryOperator	*		6532660	0					
ANR	6534317	PostIncDecOperationExpression	iter_args ++		6532660	1					
ANR	6534318	Identifier	iter_args		6532660	0					
ANR	6534319	IncDec	++		6532660	1					
ANR	6534320	PrimaryExpression	'\\0'		6532660	1					
ANR	6534321	CompoundStatement		313:3:9518:9546	6532660	1					
ANR	6534322	IdentifierDeclStatement	int alen = strlen ( curr_arg ) ;	1051:3:28457:28485	6532660	0	True				
ANR	6534323	IdentifierDecl	alen = strlen ( curr_arg )		6532660	0					
ANR	6534324	IdentifierDeclType	int		6532660	0					
ANR	6534325	Identifier	alen		6532660	1					
ANR	6534326	AssignmentExpression	alen = strlen ( curr_arg )		6532660	2		=			
ANR	6534327	Identifier	alen		6532660	0					
ANR	6534328	CallExpression	strlen ( curr_arg )		6532660	1					
ANR	6534329	Callee	strlen		6532660	0					
ANR	6534330	Identifier	strlen		6532660	0					
ANR	6534331	ArgumentList	curr_arg		6532660	1					
ANR	6534332	Argument	curr_arg		6532660	0					
ANR	6534333	Identifier	curr_arg		6532660	0					
ANR	6534334	IfStatement	if ( foo )		6532660	1					
ANR	6534335	Condition	foo	1052:7:28494:28496	6532660	0	True				
ANR	6534336	Identifier	foo		6532660	0					
ANR	6534337	CompoundStatement		314:12:9560:9560	6532660	1					
ANR	6534338	ExpressionStatement	"memcpy ( psname , curr_arg , alen + 1 )"	1053:4:28505:28538	6532660	0	True				
ANR	6534339	CallExpression	"memcpy ( psname , curr_arg , alen + 1 )"		6532660	0					
ANR	6534340	Callee	memcpy		6532660	0					
ANR	6534341	Identifier	memcpy		6532660	0					
ANR	6534342	ArgumentList	psname		6532660	1					
ANR	6534343	Argument	psname		6532660	0					
ANR	6534344	Identifier	psname		6532660	0					
ANR	6534345	Argument	curr_arg		6532660	1					
ANR	6534346	Identifier	curr_arg		6532660	0					
ANR	6534347	Argument	alen + 1		6532660	2					
ANR	6534348	AdditiveExpression	alen + 1		6532660	0		+			
ANR	6534349	Identifier	alen		6532660	0					
ANR	6534350	PrimaryExpression	1		6532660	1					
ANR	6534351	ExpressionStatement	foo = 0	1054:4:28544:28551	6532660	1	True				
ANR	6534352	AssignmentExpression	foo = 0		6532660	0		=			
ANR	6534353	Identifier	foo		6532660	0					
ANR	6534354	PrimaryExpression	0		6532660	1					
ANR	6534355	ElseStatement	else		6532660	0					
ANR	6534356	CompoundStatement		317:10:9624:9624	6532660	0					
ANR	6534357	ExpressionStatement	psname [ psnamelen ] = ' '	1056:4:28569:28592	6532660	0	True				
ANR	6534358	AssignmentExpression	psname [ psnamelen ] = ' '		6532660	0		=			
ANR	6534359	ArrayIndexing	psname [ psnamelen ]		6532660	0					
ANR	6534360	Identifier	psname		6532660	0					
ANR	6534361	Identifier	psnamelen		6532660	1					
ANR	6534362	PrimaryExpression	' '		6532660	1					
ANR	6534363	ExpressionStatement	"memcpy ( psname + psnamelen + 1 , curr_arg , alen + 1 )"	1057:4:28598:28649	6532660	1	True				
ANR	6534364	CallExpression	"memcpy ( psname + psnamelen + 1 , curr_arg , alen + 1 )"		6532660	0					
ANR	6534365	Callee	memcpy		6532660	0					
ANR	6534366	Identifier	memcpy		6532660	0					
ANR	6534367	ArgumentList	psname + psnamelen + 1		6532660	1					
ANR	6534368	Argument	psname + psnamelen + 1		6532660	0					
ANR	6534369	AdditiveExpression	psname + psnamelen + 1		6532660	0		+			
ANR	6534370	Identifier	psname		6532660	0					
ANR	6534371	AdditiveExpression	psnamelen + 1		6532660	1		+			
ANR	6534372	Identifier	psnamelen		6532660	0					
ANR	6534373	PrimaryExpression	1		6532660	1					
ANR	6534374	Argument	curr_arg		6532660	1					
ANR	6534375	Identifier	curr_arg		6532660	0					
ANR	6534376	Argument	alen + 1		6532660	2					
ANR	6534377	AdditiveExpression	alen + 1		6532660	0		+			
ANR	6534378	Identifier	alen		6532660	0					
ANR	6534379	PrimaryExpression	1		6532660	1					
ANR	6534380	ExpressionStatement	psnamelen += alen	1059:3:28659:28676	6532660	2	True				
ANR	6534381	AssignmentExpression	psnamelen += alen		6532660	0		+=			
ANR	6534382	Identifier	psnamelen		6532660	0					
ANR	6534383	Identifier	alen		6532660	1					
ANR	6534384	ExpressionStatement	curr_arg = iter_args	1062:3:28761:28781	6532660	3	True				
ANR	6534385	AssignmentExpression	curr_arg = iter_args		6532660	0		=			
ANR	6534386	Identifier	curr_arg		6532660	0					
ANR	6534387	Identifier	iter_args		6532660	1					
ANR	6534388	ExpressionStatement	nargs --	1063:3:28786:28793	6532660	4	True				
ANR	6534389	PostIncDecOperationExpression	nargs --		6532660	0					
ANR	6534390	Identifier	nargs		6532660	0					
ANR	6534391	IncDec	--		6532660	1					
ANR	6534392	IfStatement	if ( curr_arg == start_args || nargs > 0 )		6532660	31					
ANR	6534393	Condition	curr_arg == start_args || nargs > 0	1072:5:29034:29068	6532660	0	True				
ANR	6534394	OrExpression	curr_arg == start_args || nargs > 0		6532660	0		||			
ANR	6534395	EqualityExpression	curr_arg == start_args		6532660	0		==			
ANR	6534396	Identifier	curr_arg		6532660	0					
ANR	6534397	Identifier	start_args		6532660	1					
ANR	6534398	RelationalExpression	nargs > 0		6532660	1		>			
ANR	6534399	Identifier	nargs		6532660	0					
ANR	6534400	PrimaryExpression	0		6532660	1					
ANR	6534401	CompoundStatement		334:42:10132:10132	6532660	1					
ANR	6534402	ExpressionStatement	psname [ 0 ] = 0	1073:2:29075:29088	6532660	0	True				
ANR	6534403	AssignmentExpression	psname [ 0 ] = 0		6532660	0		=			
ANR	6534404	ArrayIndexing	psname [ 0 ]		6532660	0					
ANR	6534405	Identifier	psname		6532660	0					
ANR	6534406	PrimaryExpression	0		6532660	1					
ANR	6534407	PrimaryExpression	0		6532660	1					
ANR	6534408	ExpressionStatement	free ( procargs )	1075:2:29147:29162	6532660	1	True				
ANR	6534409	CallExpression	free ( procargs )		6532660	0					
ANR	6534410	Callee	free		6532660	0					
ANR	6534411	Identifier	free		6532660	0					
ANR	6534412	ArgumentList	procargs		6532660	1					
ANR	6534413	Argument	procargs		6532660	0					
ANR	6534414	Identifier	procargs		6532660	0					
ANR	6534415	ReturnStatement	return NULL ;	1076:2:29166:29177	6532660	2	True				
ANR	6534416	Identifier	NULL		6532660	0					
ANR	6534417	ReturnStatement	"return r_debug_pid_new ( psname , pid , uid , 's' , 0 ) ;"	1079:1:29190:29239	6532660	32	True				
ANR	6534418	CallExpression	"r_debug_pid_new ( psname , pid , uid , 's' , 0 )"		6532660	0					
ANR	6534419	Callee	r_debug_pid_new		6532660	0					
ANR	6534420	Identifier	r_debug_pid_new		6532660	0					
ANR	6534421	ArgumentList	psname		6532660	1					
ANR	6534422	Argument	psname		6532660	0					
ANR	6534423	Identifier	psname		6532660	0					
ANR	6534424	Argument	pid		6532660	1					
ANR	6534425	Identifier	pid		6532660	0					
ANR	6534426	Argument	uid		6532660	2					
ANR	6534427	Identifier	uid		6532660	0					
ANR	6534428	Argument	's'		6532660	3					
ANR	6534429	PrimaryExpression	's'		6532660	0					
ANR	6534430	Argument	0		6532660	4					
ANR	6534431	PrimaryExpression	0		6532660	0					
ANR	6534432	IdentifierDeclStatement	"kern_return_t mach_vm_region_recurse ( vm_map_t target_task , mach_vm_address_t * address , mach_vm_size_t * size , natural_t * nesting_depth , vm_region_recurse_info_t info , mach_msg_type_number_t * infoCnt ) ;"	1082:0:29287:29494	6532660	111	True				
ANR	6534433	IdentifierDecl	"mach_vm_region_recurse ( vm_map_t target_task , mach_vm_address_t * address , mach_vm_size_t * size , natural_t * nesting_depth , vm_region_recurse_info_t info , mach_msg_type_number_t * infoCnt )"		6532660	0					
ANR	6534434	IdentifierDeclType	"kern_return_t ( vm_map_t target_task , mach_vm_address_t * address , mach_vm_size_t * size , natural_t * nesting_depth , vm_region_recurse_info_t info , mach_msg_type_number_t * infoCnt )"		6532660	0					
ANR	6534435	Identifier	mach_vm_region_recurse		6532660	1					
ANR	6534436	Identifier	address		6532660	2					
ANR	6534437	Identifier	size		6532660	3					
ANR	6534438	Identifier	nesting_depth		6532660	4					
ANR	6534439	Identifier	infoCnt		6532660	5					
ANR	6534440	Statement	static	1091:0:29497:29502	6532660	112	True				
ANR	6534441	Statement	const	1091:7:29504:29508	6532660	113	True				
ANR	6534442	Statement	char	1091:13:29510:29513	6532660	114	True				
ANR	6534443	Statement	*	1091:18:29515:29515	6532660	115	True				
ANR	6534444	Statement	unparse_inheritance	1091:20:29517:29535	6532660	116	True				
ANR	6534445	Statement	(	1091:40:29537:29537	6532660	117	True				
ANR	6534446	Statement	vm_inherit_t	1091:41:29538:29549	6532660	118	True				
ANR	6534447	Statement	i	1091:54:29551:29551	6532660	119	True				
ANR	6534448	Statement	)	1091:55:29552:29552	6532660	120	True				
ANR	6534449	CompoundStatement		353:57:10615:10615	6532660	121					
ANR	6534450	SwitchStatement	switch ( i )		6532660	0					
ANR	6534451	Condition	i	1092:9:29565:29565	6532660	0	True				
ANR	6534452	Identifier	i		6532660	0					
ANR	6534453	CompoundStatement		354:12:10629:10629	6532660	1					
ANR	6534454	Label	case VM_INHERIT_SHARE :	1093:1:29571:29592	6532660	0	True				
ANR	6534455	Identifier	VM_INHERIT_SHARE		6532660	0					
ANR	6534456	ReturnStatement	"return ""share"" ;"	1093:24:29594:29608	6532660	1	True				
ANR	6534457	PrimaryExpression	"""share"""		6532660	0					
ANR	6534458	Label	case VM_INHERIT_COPY :	1094:1:29611:29631	6532660	2	True				
ANR	6534459	Identifier	VM_INHERIT_COPY		6532660	0					
ANR	6534460	ReturnStatement	"return ""copy"" ;"	1094:23:29633:29646	6532660	3	True				
ANR	6534461	PrimaryExpression	"""copy"""		6532660	0					
ANR	6534462	Label	case VM_INHERIT_NONE :	1095:1:29649:29669	6532660	4	True				
ANR	6534463	Identifier	VM_INHERIT_NONE		6532660	0					
ANR	6534464	ReturnStatement	"return ""none"" ;"	1095:23:29671:29684	6532660	5	True				
ANR	6534465	PrimaryExpression	"""none"""		6532660	0					
ANR	6534466	Label	default :	1096:1:29687:29694	6532660	6	True				
ANR	6534467	Identifier	default		6532660	0					
ANR	6534468	ReturnStatement	"return ""???"" ;"	1096:10:29696:29708	6532660	7	True				
ANR	6534469	PrimaryExpression	"""???"""		6532660	0					
ANR	6534470	Statement	define	1101:1:29738:29743	6532660	122	True				
ANR	6534471	Statement	ADDR	1101:8:29745:29748	6532660	123	True				
ANR	6534472	Statement	"""%8x"""	1101:13:29750:29754	6532660	124	True				
ANR	6534473	Statement	define	1102:1:29757:29762	6532660	125	True				
ANR	6534474	Statement	HEADER_SIZE	1102:8:29764:29774	6532660	126	True				
ANR	6534475	Statement	0x1000	1102:20:29776:29781	6532660	127	True				
ANR	6534476	Statement	define	1103:1:29784:29789	6532660	128	True				
ANR	6534477	Statement	IMAGE_OFFSET	1103:8:29791:29802	6532660	129	True				
ANR	6534478	Statement	0x201000	1103:21:29804:29811	6532660	130	True				
ANR	6534479	Statement	define	1104:1:29814:29819	6532660	131	True				
ANR	6534480	Statement	KERNEL_LOWER	1104:8:29821:29832	6532660	132	True				
ANR	6534481	Statement	0x80000000	1104:21:29834:29843	6532660	133	True				
ANR	6534482	Statement	vm_address_t	1108:0:29875:29886	6532660	134	True				
ANR	6534483	Statement	get_kernel_base	1108:13:29888:29902	6532660	135	True				
ANR	6534484	Statement	(	1108:28:29903:29903	6532660	136	True				
ANR	6534485	Statement	task_t	1108:29:29904:29909	6532660	137	True				
ANR	6534486	Statement	___task	1108:36:29911:29917	6532660	138	True				
ANR	6534487	Statement	)	1108:43:29918:29918	6532660	139	True				
ANR	6534488	CompoundStatement		378:1:11236:11245	6532660	140					
ANR	6534489	IdentifierDeclStatement	mach_msg_type_number_t info_count = VM_REGION_SUBMAP_INFO_COUNT_64 ;	1109:1:29923:29989	6532660	0	True				
ANR	6534490	IdentifierDecl	info_count = VM_REGION_SUBMAP_INFO_COUNT_64		6532660	0					
ANR	6534491	IdentifierDeclType	mach_msg_type_number_t		6532660	0					
ANR	6534492	Identifier	info_count		6532660	1					
ANR	6534493	AssignmentExpression	info_count = VM_REGION_SUBMAP_INFO_COUNT_64		6532660	2		=			
ANR	6534494	Identifier	VM_REGION_SUBMAP_INFO_COUNT_64		6532660	0					
ANR	6534495	Identifier	VM_REGION_SUBMAP_INFO_COUNT_64		6532660	1					
ANR	6534496	IdentifierDeclStatement	vm_region_submap_info_data_64_t info ;	1110:1:29992:30028	6532660	1	True				
ANR	6534497	IdentifierDecl	info		6532660	0					
ANR	6534498	IdentifierDeclType	vm_region_submap_info_data_64_t		6532660	0					
ANR	6534499	Identifier	info		6532660	1					
ANR	6534500	IdentifierDeclStatement	"ut64 naddr , addr = KERNEL_LOWER ;"	1111:1:30031:30062	6532660	2	True				
ANR	6534501	IdentifierDecl	naddr		6532660	0					
ANR	6534502	IdentifierDeclType	ut64		6532660	0					
ANR	6534503	Identifier	naddr		6532660	1					
ANR	6534504	IdentifierDecl	addr = KERNEL_LOWER		6532660	1					
ANR	6534505	IdentifierDeclType	ut64		6532660	0					
ANR	6534506	Identifier	addr		6532660	1					
ANR	6534507	AssignmentExpression	addr = KERNEL_LOWER		6532660	2		=			
ANR	6534508	Identifier	KERNEL_LOWER		6532660	0					
ANR	6534509	Identifier	KERNEL_LOWER		6532660	1					
ANR	6534510	IdentifierDeclStatement	unsigned int depth = 0 ;	1112:1:30104:30126	6532660	3	True				
ANR	6534511	IdentifierDecl	depth = 0		6532660	0					
ANR	6534512	IdentifierDeclType	unsigned int		6532660	0					
ANR	6534513	Identifier	depth		6532660	1					
ANR	6534514	AssignmentExpression	depth = 0		6532660	2		=			
ANR	6534515	Identifier	depth		6532660	0					
ANR	6534516	PrimaryExpression	0		6532660	1					
ANR	6534517	IdentifierDeclStatement	kern_return_t ret ;	1113:1:30129:30146	6532660	4	True				
ANR	6534518	IdentifierDecl	ret		6532660	0					
ANR	6534519	IdentifierDeclType	kern_return_t		6532660	0					
ANR	6534520	Identifier	ret		6532660	1					
ANR	6534521	IdentifierDeclStatement	task_t task ;	1114:1:30149:30160	6532660	5	True				
ANR	6534522	IdentifierDecl	task		6532660	0					
ANR	6534523	IdentifierDeclType	task_t		6532660	0					
ANR	6534524	Identifier	task		6532660	1					
ANR	6534525	IdentifierDeclStatement	ut64 size ;	1115:1:30163:30172	6532660	6	True				
ANR	6534526	IdentifierDecl	size		6532660	0					
ANR	6534527	IdentifierDeclType	ut64		6532660	0					
ANR	6534528	Identifier	size		6532660	1					
ANR	6534529	IdentifierDeclStatement	int count ;	1116:1:30175:30184	6532660	7	True				
ANR	6534530	IdentifierDecl	count		6532660	0					
ANR	6534531	IdentifierDeclType	int		6532660	0					
ANR	6534532	Identifier	count		6532660	1					
ANR	6534533	ExpressionStatement	"ret = task_for_pid ( mach_task_self ( ) , 0 , & task )"	1118:1:30188:30235	6532660	8	True				
ANR	6534534	AssignmentExpression	"ret = task_for_pid ( mach_task_self ( ) , 0 , & task )"		6532660	0		=			
ANR	6534535	Identifier	ret		6532660	0					
ANR	6534536	CallExpression	"task_for_pid ( mach_task_self ( ) , 0 , & task )"		6532660	1					
ANR	6534537	Callee	task_for_pid		6532660	0					
ANR	6534538	Identifier	task_for_pid		6532660	0					
ANR	6534539	ArgumentList	mach_task_self ( )		6532660	1					
ANR	6534540	Argument	mach_task_self ( )		6532660	0					
ANR	6534541	CallExpression	mach_task_self ( )		6532660	0					
ANR	6534542	Callee	mach_task_self		6532660	0					
ANR	6534543	Identifier	mach_task_self		6532660	0					
ANR	6534544	ArgumentList			6532660	1					
ANR	6534545	Argument	0		6532660	1					
ANR	6534546	PrimaryExpression	0		6532660	0					
ANR	6534547	Argument	& task		6532660	2					
ANR	6534548	UnaryOperationExpression	& task		6532660	0					
ANR	6534549	UnaryOperator	&		6532660	0					
ANR	6534550	Identifier	task		6532660	1					
ANR	6534551	IfStatement	if ( ret != KERN_SUCCESS )		6532660	9					
ANR	6534552	Condition	ret != KERN_SUCCESS	1119:5:30242:30260	6532660	0	True				
ANR	6534553	EqualityExpression	ret != KERN_SUCCESS		6532660	0		!=			
ANR	6534554	Identifier	ret		6532660	0					
ANR	6534555	Identifier	KERN_SUCCESS		6532660	1					
ANR	6534556	CompoundStatement		381:26:11324:11324	6532660	1					
ANR	6534557	ReturnStatement	return 0 ;	1120:2:30267:30275	6532660	0	True				
ANR	6534558	PrimaryExpression	0		6532660	0					
ANR	6534559	ForStatement	for ( count = 128 ; count ; count -- )		6532660	10					
ANR	6534560	ForInit	count = 128 ;	1123:6:30329:30340	6532660	0	True				
ANR	6534561	AssignmentExpression	count = 128		6532660	0		=			
ANR	6534562	Identifier	count		6532660	0					
ANR	6534563	PrimaryExpression	128		6532660	1					
ANR	6534564	Condition	count	1123:19:30342:30346	6532660	1	True				
ANR	6534565	Identifier	count		6532660	0					
ANR	6534566	PostIncDecOperationExpression	count --	1123:26:30349:30355	6532660	2	True				
ANR	6534567	Identifier	count		6532660	0					
ANR	6534568	IncDec	--		6532660	1					
ANR	6534569	CompoundStatement		385:35:11419:11419	6532660	3					
ANR	6534570	ExpressionStatement	naddr = addr	1125:2:30390:30402	6532660	0	True				
ANR	6534571	AssignmentExpression	naddr = addr		6532660	0		=			
ANR	6534572	Identifier	naddr		6532660	0					
ANR	6534573	Identifier	addr		6532660	1					
ANR	6534574	ExpressionStatement	"ret = vm_region_recurse_64 ( task , ( vm_address_t * ) & naddr , ( vm_size_t * ) & size , & depth , ( vm_region_info_t ) & info , & info_count )"	1126:2:30406:30543	6532660	1	True				
ANR	6534575	AssignmentExpression	"ret = vm_region_recurse_64 ( task , ( vm_address_t * ) & naddr , ( vm_size_t * ) & size , & depth , ( vm_region_info_t ) & info , & info_count )"		6532660	0		=			
ANR	6534576	Identifier	ret		6532660	0					
ANR	6534577	CallExpression	"vm_region_recurse_64 ( task , ( vm_address_t * ) & naddr , ( vm_size_t * ) & size , & depth , ( vm_region_info_t ) & info , & info_count )"		6532660	1					
ANR	6534578	Callee	vm_region_recurse_64		6532660	0					
ANR	6534579	Identifier	vm_region_recurse_64		6532660	0					
ANR	6534580	ArgumentList	task		6532660	1					
ANR	6534581	Argument	task		6532660	0					
ANR	6534582	Identifier	task		6532660	0					
ANR	6534583	Argument	( vm_address_t * ) & naddr		6532660	1					
ANR	6534584	CastExpression	( vm_address_t * ) & naddr		6532660	0					
ANR	6534585	CastTarget	vm_address_t *		6532660	0					
ANR	6534586	UnaryOperationExpression	& naddr		6532660	1					
ANR	6534587	UnaryOperator	&		6532660	0					
ANR	6534588	Identifier	naddr		6532660	1					
ANR	6534589	Argument	( vm_size_t * ) & size		6532660	2					
ANR	6534590	CastExpression	( vm_size_t * ) & size		6532660	0					
ANR	6534591	CastTarget	vm_size_t *		6532660	0					
ANR	6534592	UnaryOperationExpression	& size		6532660	1					
ANR	6534593	UnaryOperator	&		6532660	0					
ANR	6534594	Identifier	size		6532660	1					
ANR	6534595	Argument	& depth		6532660	3					
ANR	6534596	UnaryOperationExpression	& depth		6532660	0					
ANR	6534597	UnaryOperator	&		6532660	0					
ANR	6534598	Identifier	depth		6532660	1					
ANR	6534599	Argument	( vm_region_info_t ) & info		6532660	4					
ANR	6534600	CastExpression	( vm_region_info_t ) & info		6532660	0					
ANR	6534601	CastTarget	vm_region_info_t		6532660	0					
ANR	6534602	UnaryOperationExpression	& info		6532660	1					
ANR	6534603	UnaryOperator	&		6532660	0					
ANR	6534604	Identifier	info		6532660	1					
ANR	6534605	Argument	& info_count		6532660	5					
ANR	6534606	UnaryOperationExpression	& info_count		6532660	0					
ANR	6534607	UnaryOperator	&		6532660	0					
ANR	6534608	Identifier	info_count		6532660	1					
ANR	6534609	IfStatement	if ( ret != KERN_SUCCESS )		6532660	2					
ANR	6534610	Condition	ret != KERN_SUCCESS	1129:6:30551:30569	6532660	0	True				
ANR	6534611	EqualityExpression	ret != KERN_SUCCESS		6532660	0		!=			
ANR	6534612	Identifier	ret		6532660	0					
ANR	6534613	Identifier	KERN_SUCCESS		6532660	1					
ANR	6534614	CompoundStatement		391:27:11633:11633	6532660	1					
ANR	6534615	BreakStatement	break ;	1130:3:30577:30582	6532660	0	True				
ANR	6534616	IfStatement	if ( size < 1 )		6532660	3					
ANR	6534617	Condition	size < 1	1132:6:30594:30601	6532660	0	True				
ANR	6534618	RelationalExpression	size < 1		6532660	0		<			
ANR	6534619	Identifier	size		6532660	0					
ANR	6534620	PrimaryExpression	1		6532660	1					
ANR	6534621	CompoundStatement		394:16:11665:11665	6532660	1					
ANR	6534622	BreakStatement	break ;	1133:3:30609:30614	6532660	0	True				
ANR	6534623	IfStatement	if ( addr == naddr )		6532660	4					
ANR	6534624	Condition	addr == naddr	1135:6:30626:30638	6532660	0	True				
ANR	6534625	EqualityExpression	addr == naddr		6532660	0		==			
ANR	6534626	Identifier	addr		6532660	0					
ANR	6534627	Identifier	naddr		6532660	1					
ANR	6534628	CompoundStatement		397:21:11702:11702	6532660	1					
ANR	6534629	ExpressionStatement	addr += size	1136:3:30646:30658	6532660	0	True				
ANR	6534630	AssignmentExpression	addr += size		6532660	0		+=			
ANR	6534631	Identifier	addr		6532660	0					
ANR	6534632	Identifier	size		6532660	1					
ANR	6534633	ContinueStatement	continue ;	1137:3:30663:30671	6532660	1	True				
ANR	6534634	Statement	eprintf	1139:2:30679:30685	6532660	5	True				
ANR	6534635	Statement	(	1139:10:30687:30687	6532660	6	True				
ANR	6534636	Statement	"""0x%08"""	1139:11:30688:30694	6532660	7	True				
ANR	6534637	Statement	PFMT64x	1139:18:30695:30701	6532660	8	True				
ANR	6534638	Statement	""" size 0x%08"""	1139:25:30702:30714	6532660	9	True				
ANR	6534639	Statement	PFMT64x	1139:38:30715:30721	6532660	10	True				
ANR	6534640	Statement	""" perm 0x%x\\n"""	1139:45:30722:30735	6532660	11	True				
ANR	6534641	Statement	","	1139:59:30736:30736	6532660	12	True				
ANR	6534642	Statement	(	1140:3:30741:30741	6532660	13	True				
ANR	6534643	Statement	ut64	1140:4:30742:30745	6532660	14	True				
ANR	6534644	Statement	)	1140:8:30746:30746	6532660	15	True				
ANR	6534645	Statement	addr	1140:9:30747:30750	6532660	16	True				
ANR	6534646	Statement	","	1140:13:30751:30751	6532660	17	True				
ANR	6534647	Statement	(	1140:15:30753:30753	6532660	18	True				
ANR	6534648	Statement	ut64	1140:16:30754:30757	6532660	19	True				
ANR	6534649	Statement	)	1140:20:30758:30758	6532660	20	True				
ANR	6534650	Statement	size	1140:21:30759:30762	6532660	21	True				
ANR	6534651	Statement	","	1140:25:30763:30763	6532660	22	True				
ANR	6534652	Statement	info	1140:27:30765:30768	6532660	23	True				
ANR	6534653	Statement	.	1140:31:30769:30769	6532660	24	True				
ANR	6534654	Statement	max_protection	1140:32:30770:30783	6532660	25	True				
ANR	6534655	Statement	)	1140:46:30784:30784	6532660	26	True				
ANR	6534656	ExpressionStatement		1140:47:30785:30785	6532660	27	True				
ANR	6534657	IfStatement	if ( size > 1024 * 1024 * 1024 )		6532660	28					
ANR	6534658	Condition	size > 1024 * 1024 * 1024	1143:6:30916:30940	6532660	0	True				
ANR	6534659	RelationalExpression	size > 1024 * 1024 * 1024		6532660	0		>			
ANR	6534660	Identifier	size		6532660	0					
ANR	6534661	MultiplicativeExpression	1024 * 1024 * 1024		6532660	1		*			
ANR	6534662	PrimaryExpression	1024		6532660	0					
ANR	6534663	MultiplicativeExpression	1024 * 1024		6532660	1		*			
ANR	6534664	PrimaryExpression	1024		6532660	0					
ANR	6534665	PrimaryExpression	1024		6532660	1					
ANR	6534666	CompoundStatement		405:33:12004:12004	6532660	1					
ANR	6534667	ReturnStatement	return addr + IMAGE_OFFSET ;	1144:3:30948:30974	6532660	0	True				
ANR	6534668	AdditiveExpression	addr + IMAGE_OFFSET		6532660	0		+			
ANR	6534669	Identifier	addr		6532660	0					
ANR	6534670	Identifier	IMAGE_OFFSET		6532660	1					
ANR	6534671	ExpressionStatement	addr += size	1146:2:30982:30994	6532660	29	True				
ANR	6534672	AssignmentExpression	addr += size		6532660	0		+=			
ANR	6534673	Identifier	addr		6532660	0					
ANR	6534674	Identifier	size		6532660	1					
ANR	6534675	ExpressionStatement	"ret = mach_port_deallocate ( mach_task_self ( ) , 0 )"	1148:1:31000:31049	6532660	11	True				
ANR	6534676	AssignmentExpression	"ret = mach_port_deallocate ( mach_task_self ( ) , 0 )"		6532660	0		=			
ANR	6534677	Identifier	ret		6532660	0					
ANR	6534678	CallExpression	"mach_port_deallocate ( mach_task_self ( ) , 0 )"		6532660	1					
ANR	6534679	Callee	mach_port_deallocate		6532660	0					
ANR	6534680	Identifier	mach_port_deallocate		6532660	0					
ANR	6534681	ArgumentList	mach_task_self ( )		6532660	1					
ANR	6534682	Argument	mach_task_self ( )		6532660	0					
ANR	6534683	CallExpression	mach_task_self ( )		6532660	0					
ANR	6534684	Callee	mach_task_self		6532660	0					
ANR	6534685	Identifier	mach_task_self		6532660	0					
ANR	6534686	ArgumentList			6532660	1					
ANR	6534687	Argument	0		6532660	1					
ANR	6534688	PrimaryExpression	0		6532660	0					
ANR	6534689	IfStatement	if ( ret != KERN_SUCCESS )		6532660	12					
ANR	6534690	Condition	ret != KERN_SUCCESS	1149:5:31056:31074	6532660	0	True				
ANR	6534691	EqualityExpression	ret != KERN_SUCCESS		6532660	0		!=			
ANR	6534692	Identifier	ret		6532660	0					
ANR	6534693	Identifier	KERN_SUCCESS		6532660	1					
ANR	6534694	CompoundStatement		411:26:12138:12138	6532660	1					
ANR	6534695	ExpressionStatement	"eprintf ( ""get_kernel_base: leaking kernel port\\n"" )"	1150:2:31081:31131	6532660	0	True				
ANR	6534696	CallExpression	"eprintf ( ""get_kernel_base: leaking kernel port\\n"" )"		6532660	0					
ANR	6534697	Callee	eprintf		6532660	0					
ANR	6534698	Identifier	eprintf		6532660	0					
ANR	6534699	ArgumentList	"""get_kernel_base: leaking kernel port\\n"""		6532660	1					
ANR	6534700	Argument	"""get_kernel_base: leaking kernel port\\n"""		6532660	0					
ANR	6534701	PrimaryExpression	"""get_kernel_base: leaking kernel port\\n"""		6532660	0					
ANR	6534702	ReturnStatement	return ( vm_address_t ) 0 ;	1152:1:31137:31159	6532660	13	True				
ANR	6534703	CastExpression	( vm_address_t ) 0		6532660	0					
ANR	6534704	CastTarget	vm_address_t		6532660	0					
ANR	6534705	PrimaryExpression	0		6532660	1					
ANR	6534706	Statement	static	1156:0:31223:31228	6532660	141	True				
ANR	6534707	Statement	int	1156:7:31230:31232	6532660	142	True				
ANR	6534708	Statement	mach0_size	1156:11:31234:31243	6532660	143	True				
ANR	6534709	Statement	(	1156:22:31245:31245	6532660	144	True				
ANR	6534710	Statement	RDebug	1156:23:31246:31251	6532660	145	True				
ANR	6534711	Statement	*	1156:30:31253:31253	6532660	146	True				
ANR	6534712	Statement	dbg	1156:31:31254:31256	6532660	147	True				
ANR	6534713	Statement	","	1156:34:31257:31257	6532660	148	True				
ANR	6534714	Statement	ut64	1156:36:31259:31262	6532660	149	True				
ANR	6534715	Statement	addr	1156:41:31264:31267	6532660	150	True				
ANR	6534716	Statement	)	1156:45:31268:31268	6532660	151	True				
ANR	6534717	CompoundStatement		418:47:12331:12331	6532660	152					
ANR	6534718	ReturnStatement	return 4096 ;	1157:1:31273:31284	6532660	0	True				
ANR	6534719	PrimaryExpression	4096		6532660	0					
ANR	6534720	Statement	static	1160:0:31289:31294	6532660	153	True				
ANR	6534721	Statement	void	1160:7:31296:31299	6532660	154	True				
ANR	6534722	Statement	xnu_map_free	1160:12:31301:31312	6532660	155	True				
ANR	6534723	Statement	(	1160:24:31313:31313	6532660	156	True				
ANR	6534724	Statement	RDebugMap	1160:25:31314:31322	6532660	157	True				
ANR	6534725	Statement	*	1160:35:31324:31324	6532660	158	True				
ANR	6534726	Statement	map	1160:36:31325:31327	6532660	159	True				
ANR	6534727	Statement	)	1160:39:31328:31328	6532660	160	True				
ANR	6534728	CompoundStatement		422:41:12391:12391	6532660	161					
ANR	6534729	IfStatement	if ( map )		6532660	0					
ANR	6534730	Condition	map	1161:5:31337:31339	6532660	0	True				
ANR	6534731	Identifier	map		6532660	0					
ANR	6534732	CompoundStatement		423:10:12403:12403	6532660	1					
ANR	6534733	ExpressionStatement	free ( map -> name )	1162:2:31346:31362	6532660	0	True				
ANR	6534734	CallExpression	free ( map -> name )		6532660	0					
ANR	6534735	Callee	free		6532660	0					
ANR	6534736	Identifier	free		6532660	0					
ANR	6534737	ArgumentList	map -> name		6532660	1					
ANR	6534738	Argument	map -> name		6532660	0					
ANR	6534739	PtrMemberAccess	map -> name		6532660	0					
ANR	6534740	Identifier	map		6532660	0					
ANR	6534741	Identifier	name		6532660	1					
ANR	6534742	ExpressionStatement	free ( map -> file )	1163:2:31366:31382	6532660	1	True				
ANR	6534743	CallExpression	free ( map -> file )		6532660	0					
ANR	6534744	Callee	free		6532660	0					
ANR	6534745	Identifier	free		6532660	0					
ANR	6534746	ArgumentList	map -> file		6532660	1					
ANR	6534747	Argument	map -> file		6532660	0					
ANR	6534748	PtrMemberAccess	map -> file		6532660	0					
ANR	6534749	Identifier	map		6532660	0					
ANR	6534750	Identifier	file		6532660	1					
ANR	6534751	ExpressionStatement	free ( map )	1164:2:31386:31396	6532660	2	True				
ANR	6534752	CallExpression	free ( map )		6532660	0					
ANR	6534753	Callee	free		6532660	0					
ANR	6534754	Identifier	free		6532660	0					
ANR	6534755	ArgumentList	map		6532660	1					
ANR	6534756	Argument	map		6532660	0					
ANR	6534757	Identifier	map		6532660	0					
ANR	6534758	Statement	static	1168:0:31404:31409	6532660	162	True				
ANR	6534759	Statement	RList	1168:7:31411:31415	6532660	163	True				
ANR	6534760	Statement	*	1168:13:31417:31417	6532660	164	True				
ANR	6534761	Statement	xnu_dbg_modules	1168:14:31418:31432	6532660	165	True				
ANR	6534762	Statement	(	1168:29:31433:31433	6532660	166	True				
ANR	6534763	Statement	RDebug	1168:30:31434:31439	6532660	167	True				
ANR	6534764	Statement	*	1168:37:31441:31441	6532660	168	True				
ANR	6534765	Statement	dbg	1168:38:31442:31444	6532660	169	True				
ANR	6534766	Statement	)	1168:41:31445:31445	6532660	170	True				
ANR	6534767	CompoundStatement		430:43:12508:12508	6532660	171					
ANR	6534768	Statement	warning	1170:1:31466:31472	6532660	0	True				
ANR	6534769	Label	TODO :	1170:9:31474:31478	6532660	1	True				
ANR	6534770	Identifier	TODO		6532660	0					
ANR	6534771	Statement	xnu_dbg_modules	1170:15:31480:31494	6532660	2	True				
ANR	6534772	Statement	not	1170:31:31496:31498	6532660	3	True				
ANR	6534773	Statement	supported	1170:35:31500:31508	6532660	4	True				
ANR	6534774	ReturnStatement	return NULL ;	1171:1:31511:31522	6532660	5	True				
ANR	6534775	Identifier	NULL		6532660	0					
ANR	6534776	Statement	static	1261:0:34137:34142	6532660	172	True				
ANR	6534777	Statement	RDebugMap	1261:7:34144:34152	6532660	173	True				
ANR	6534778	Statement	*	1261:17:34154:34154	6532660	174	True				
ANR	6534779	Statement	moduleAt	1261:18:34155:34162	6532660	175	True				
ANR	6534780	Statement	(	1261:26:34163:34163	6532660	176	True				
ANR	6534781	Statement	RList	1261:27:34164:34168	6532660	177	True				
ANR	6534782	Statement	*	1261:33:34170:34170	6532660	178	True				
ANR	6534783	Statement	list	1261:34:34171:34174	6532660	179	True				
ANR	6534784	Statement	","	1261:38:34175:34175	6532660	180	True				
ANR	6534785	Statement	ut64	1261:40:34177:34180	6532660	181	True				
ANR	6534786	Statement	addr	1261:45:34182:34185	6532660	182	True				
ANR	6534787	Statement	)	1261:49:34186:34186	6532660	183	True				
ANR	6534788	CompoundStatement		525:1:15270:15284	6532660	184					
ANR	6534789	IdentifierDeclStatement	RListIter * iter ;	1262:1:34191:34206	6532660	0	True				
ANR	6534790	IdentifierDecl	* iter		6532660	0					
ANR	6534791	IdentifierDeclType	RListIter *		6532660	0					
ANR	6534792	Identifier	iter		6532660	1					
ANR	6534793	IdentifierDeclStatement	RDebugMap * map ;	1263:1:34209:34223	6532660	1	True				
ANR	6534794	IdentifierDecl	* map		6532660	0					
ANR	6534795	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6534796	Identifier	map		6532660	1					
ANR	6534797	Statement	r_list_foreach	1264:1:34226:34239	6532660	2	True				
ANR	6534798	Statement	(	1264:16:34241:34241	6532660	3	True				
ANR	6534799	Statement	list	1264:17:34242:34245	6532660	4	True				
ANR	6534800	Statement	","	1264:21:34246:34246	6532660	5	True				
ANR	6534801	Statement	iter	1264:23:34248:34251	6532660	6	True				
ANR	6534802	Statement	","	1264:27:34252:34252	6532660	7	True				
ANR	6534803	Statement	map	1264:29:34254:34256	6532660	8	True				
ANR	6534804	Statement	)	1264:32:34257:34257	6532660	9	True				
ANR	6534805	CompoundStatement		526:34:15320:15320	6532660	10					
ANR	6534806	IfStatement	"if ( R_BETWEEN ( map -> addr , addr , map -> addr_end ) )"		6532660	0					
ANR	6534807	Condition	"R_BETWEEN ( map -> addr , addr , map -> addr_end )"	1265:6:34267:34308	6532660	0	True				
ANR	6534808	CallExpression	"R_BETWEEN ( map -> addr , addr , map -> addr_end )"		6532660	0					
ANR	6534809	Callee	R_BETWEEN		6532660	0					
ANR	6534810	Identifier	R_BETWEEN		6532660	0					
ANR	6534811	ArgumentList	map -> addr		6532660	1					
ANR	6534812	Argument	map -> addr		6532660	0					
ANR	6534813	PtrMemberAccess	map -> addr		6532660	0					
ANR	6534814	Identifier	map		6532660	0					
ANR	6534815	Identifier	addr		6532660	1					
ANR	6534816	Argument	addr		6532660	1					
ANR	6534817	Identifier	addr		6532660	0					
ANR	6534818	Argument	map -> addr_end		6532660	2					
ANR	6534819	PtrMemberAccess	map -> addr_end		6532660	0					
ANR	6534820	Identifier	map		6532660	0					
ANR	6534821	Identifier	addr_end		6532660	1					
ANR	6534822	CompoundStatement		527:50:15372:15372	6532660	1					
ANR	6534823	ReturnStatement	return map ;	1266:3:34316:34326	6532660	0	True				
ANR	6534824	Identifier	map		6532660	0					
ANR	6534825	ReturnStatement	return NULL ;	1269:1:34336:34347	6532660	11	True				
ANR	6534826	Identifier	NULL		6532660	0					
ANR	6534827	Statement	static	1272:0:34352:34357	6532660	185	True				
ANR	6534828	Statement	int	1272:7:34359:34361	6532660	186	True				
ANR	6534829	Statement	cmp	1272:11:34363:34365	6532660	187	True				
ANR	6534830	Statement	(	1272:15:34367:34367	6532660	188	True				
ANR	6534831	Statement	const	1272:16:34368:34372	6532660	189	True				
ANR	6534832	Statement	void	1272:22:34374:34377	6532660	190	True				
ANR	6534833	Statement	*	1272:27:34379:34379	6532660	191	True				
ANR	6534834	Statement	_a	1272:28:34380:34381	6532660	192	True				
ANR	6534835	Statement	","	1272:30:34382:34382	6532660	193	True				
ANR	6534836	Statement	const	1272:32:34384:34388	6532660	194	True				
ANR	6534837	Statement	void	1272:38:34390:34393	6532660	195	True				
ANR	6534838	Statement	*	1272:43:34395:34395	6532660	196	True				
ANR	6534839	Statement	_b	1272:44:34396:34397	6532660	197	True				
ANR	6534840	Statement	)	1272:46:34398:34398	6532660	198	True				
ANR	6534841	CompoundStatement		536:1:15490:15513	6532660	199					
ANR	6534842	IdentifierDeclStatement	const RDebugMap * a = _a ;	1273:1:34403:34426	6532660	0	True				
ANR	6534843	IdentifierDecl	* a = _a		6532660	0					
ANR	6534844	IdentifierDeclType	const RDebugMap *		6532660	0					
ANR	6534845	Identifier	a		6532660	1					
ANR	6534846	AssignmentExpression	* a = _a		6532660	2		=			
ANR	6534847	Identifier	_a		6532660	0					
ANR	6534848	Identifier	_a		6532660	1					
ANR	6534849	IdentifierDeclStatement	const RDebugMap * b = _b ;	1274:1:34429:34452	6532660	1	True				
ANR	6534850	IdentifierDecl	* b = _b		6532660	0					
ANR	6534851	IdentifierDeclType	const RDebugMap *		6532660	0					
ANR	6534852	Identifier	b		6532660	1					
ANR	6534853	AssignmentExpression	* b = _b		6532660	2		=			
ANR	6534854	Identifier	_b		6532660	0					
ANR	6534855	Identifier	_b		6532660	1					
ANR	6534856	IfStatement	if ( a -> addr > b -> addr )		6532660	2					
ANR	6534857	Condition	a -> addr > b -> addr	1275:5:34459:34475	6532660	0	True				
ANR	6534858	RelationalExpression	a -> addr > b -> addr		6532660	0		>			
ANR	6534859	PtrMemberAccess	a -> addr		6532660	0					
ANR	6534860	Identifier	a		6532660	0					
ANR	6534861	Identifier	addr		6532660	1					
ANR	6534862	PtrMemberAccess	b -> addr		6532660	1					
ANR	6534863	Identifier	b		6532660	0					
ANR	6534864	Identifier	addr		6532660	1					
ANR	6534865	CompoundStatement		537:24:15539:15539	6532660	1					
ANR	6534866	ReturnStatement	return 1 ;	1276:2:34482:34490	6532660	0	True				
ANR	6534867	PrimaryExpression	1		6532660	0					
ANR	6534868	IfStatement	if ( a -> addr < b -> addr )		6532660	3					
ANR	6534869	Condition	a -> addr < b -> addr	1278:5:34500:34516	6532660	0	True				
ANR	6534870	RelationalExpression	a -> addr < b -> addr		6532660	0		<			
ANR	6534871	PtrMemberAccess	a -> addr		6532660	0					
ANR	6534872	Identifier	a		6532660	0					
ANR	6534873	Identifier	addr		6532660	1					
ANR	6534874	PtrMemberAccess	b -> addr		6532660	1					
ANR	6534875	Identifier	b		6532660	0					
ANR	6534876	Identifier	addr		6532660	1					
ANR	6534877	CompoundStatement		540:24:15580:15580	6532660	1					
ANR	6534878	ReturnStatement	return - 1 ;	1279:2:34523:34532	6532660	0	True				
ANR	6534879	UnaryOperationExpression	- 1		6532660	0					
ANR	6534880	UnaryOperator	-		6532660	0					
ANR	6534881	PrimaryExpression	1		6532660	1					
ANR	6534882	ReturnStatement	return 0 ;	1281:1:34538:34546	6532660	4	True				
ANR	6534883	PrimaryExpression	0		6532660	0					
ANR	6534884	Statement	static	1284:0:34551:34556	6532660	200	True				
ANR	6534885	Statement	RDebugMap	1284:7:34558:34566	6532660	201	True				
ANR	6534886	Statement	*	1284:17:34568:34568	6532660	202	True				
ANR	6534887	Statement	r_debug_map_clone	1284:18:34569:34585	6532660	203	True				
ANR	6534888	Statement	(	1284:36:34587:34587	6532660	204	True				
ANR	6534889	Statement	RDebugMap	1284:37:34588:34596	6532660	205	True				
ANR	6534890	Statement	*	1284:47:34598:34598	6532660	206	True				
ANR	6534891	Statement	m	1284:48:34599:34599	6532660	207	True				
ANR	6534892	Statement	)	1284:49:34600:34600	6532660	208	True				
ANR	6534893	CompoundStatement		547:1:15666:15707	6532660	209					
ANR	6534894	IdentifierDeclStatement	"RDebugMap * map = R_NEWCOPY ( RDebugMap , m ) ;"	1285:1:34605:34646	6532660	0	True				
ANR	6534895	IdentifierDecl	"* map = R_NEWCOPY ( RDebugMap , m )"		6532660	0					
ANR	6534896	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6534897	Identifier	map		6532660	1					
ANR	6534898	AssignmentExpression	"* map = R_NEWCOPY ( RDebugMap , m )"		6532660	2		=			
ANR	6534899	Identifier	map		6532660	0					
ANR	6534900	CallExpression	"R_NEWCOPY ( RDebugMap , m )"		6532660	1					
ANR	6534901	Callee	R_NEWCOPY		6532660	0					
ANR	6534902	Identifier	R_NEWCOPY		6532660	0					
ANR	6534903	ArgumentList	RDebugMap		6532660	1					
ANR	6534904	Argument	RDebugMap		6532660	0					
ANR	6534905	Identifier	RDebugMap		6532660	0					
ANR	6534906	Argument	m		6532660	1					
ANR	6534907	Identifier	m		6532660	0					
ANR	6534908	IfStatement	if ( m -> name )		6532660	1					
ANR	6534909	Condition	m -> name	1287:5:34694:34700	6532660	0	True				
ANR	6534910	PtrMemberAccess	m -> name		6532660	0					
ANR	6534911	Identifier	m		6532660	0					
ANR	6534912	Identifier	name		6532660	1					
ANR	6534913	CompoundStatement		549:14:15764:15764	6532660	1					
ANR	6534914	ExpressionStatement	map -> name = strdup ( m -> name )	1288:2:34707:34735	6532660	0	True				
ANR	6534915	AssignmentExpression	map -> name = strdup ( m -> name )		6532660	0		=			
ANR	6534916	PtrMemberAccess	map -> name		6532660	0					
ANR	6534917	Identifier	map		6532660	0					
ANR	6534918	Identifier	name		6532660	1					
ANR	6534919	CallExpression	strdup ( m -> name )		6532660	1					
ANR	6534920	Callee	strdup		6532660	0					
ANR	6534921	Identifier	strdup		6532660	0					
ANR	6534922	ArgumentList	m -> name		6532660	1					
ANR	6534923	Argument	m -> name		6532660	0					
ANR	6534924	PtrMemberAccess	m -> name		6532660	0					
ANR	6534925	Identifier	m		6532660	0					
ANR	6534926	Identifier	name		6532660	1					
ANR	6534927	IfStatement	if ( m -> file )		6532660	2					
ANR	6534928	Condition	m -> file	1290:5:34745:34751	6532660	0	True				
ANR	6534929	PtrMemberAccess	m -> file		6532660	0					
ANR	6534930	Identifier	m		6532660	0					
ANR	6534931	Identifier	file		6532660	1					
ANR	6534932	CompoundStatement		552:14:15815:15815	6532660	1					
ANR	6534933	ExpressionStatement	map -> file = strdup ( m -> file )	1291:2:34758:34786	6532660	0	True				
ANR	6534934	AssignmentExpression	map -> file = strdup ( m -> file )		6532660	0		=			
ANR	6534935	PtrMemberAccess	map -> file		6532660	0					
ANR	6534936	Identifier	map		6532660	0					
ANR	6534937	Identifier	file		6532660	1					
ANR	6534938	CallExpression	strdup ( m -> file )		6532660	1					
ANR	6534939	Callee	strdup		6532660	0					
ANR	6534940	Identifier	strdup		6532660	0					
ANR	6534941	ArgumentList	m -> file		6532660	1					
ANR	6534942	Argument	m -> file		6532660	0					
ANR	6534943	PtrMemberAccess	m -> file		6532660	0					
ANR	6534944	Identifier	m		6532660	0					
ANR	6534945	Identifier	file		6532660	1					
ANR	6534946	ReturnStatement	return map ;	1293:1:34792:34802	6532660	3	True				
ANR	6534947	Identifier	map		6532660	0					
ANR	6534948	Statement	RList	1296:0:34807:34811	6532660	210	True				
ANR	6534949	Statement	*	1296:6:34813:34813	6532660	211	True				
ANR	6534950	Statement	xnu_dbg_maps	1296:7:34814:34825	6532660	212	True				
ANR	6534951	Statement	(	1296:19:34826:34826	6532660	213	True				
ANR	6534952	Statement	RDebug	1296:20:34827:34832	6532660	214	True				
ANR	6534953	Statement	*	1296:27:34834:34834	6532660	215	True				
ANR	6534954	Statement	dbg	1296:28:34835:34837	6532660	216	True				
ANR	6534955	Statement	","	1296:31:34838:34838	6532660	217	True				
ANR	6534956	Statement	int	1296:33:34840:34842	6532660	218	True				
ANR	6534957	Statement	only_modules	1296:37:34844:34855	6532660	219	True				
ANR	6534958	Statement	)	1296:49:34856:34856	6532660	220	True				
ANR	6534959	CompoundStatement		672:1:18654:18666	6532660	221					
ANR	6534960	IdentifierDeclStatement	char buf [ 1024 ] ;	1300:1:34948:34962	6532660	0	True				
ANR	6534961	IdentifierDecl	buf [ 1024 ]		6532660	0					
ANR	6534962	IdentifierDeclType	char [ 1024 ]		6532660	0					
ANR	6534963	Identifier	buf		6532660	1					
ANR	6534964	PrimaryExpression	1024		6532660	2					
ANR	6534965	IdentifierDeclStatement	char module_name [ MAXPATHLEN ] ;	1301:1:34965:34993	6532660	1	True				
ANR	6534966	IdentifierDecl	module_name [ MAXPATHLEN ]		6532660	0					
ANR	6534967	IdentifierDeclType	char [ MAXPATHLEN ]		6532660	0					
ANR	6534968	Identifier	module_name		6532660	1					
ANR	6534969	Identifier	MAXPATHLEN		6532660	2					
ANR	6534970	IdentifierDeclStatement	mach_vm_address_t address = MACH_VM_MIN_ADDRESS ;	1302:1:34996:35043	6532660	2	True				
ANR	6534971	IdentifierDecl	address = MACH_VM_MIN_ADDRESS		6532660	0					
ANR	6534972	IdentifierDeclType	mach_vm_address_t		6532660	0					
ANR	6534973	Identifier	address		6532660	1					
ANR	6534974	AssignmentExpression	address = MACH_VM_MIN_ADDRESS		6532660	2		=			
ANR	6534975	Identifier	MACH_VM_MIN_ADDRESS		6532660	0					
ANR	6534976	Identifier	MACH_VM_MIN_ADDRESS		6532660	1					
ANR	6534977	IdentifierDeclStatement	mach_vm_size_t size = ( mach_vm_size_t ) 0 ;	1303:1:35046:35086	6532660	3	True				
ANR	6534978	IdentifierDecl	size = ( mach_vm_size_t ) 0		6532660	0					
ANR	6534979	IdentifierDeclType	mach_vm_size_t		6532660	0					
ANR	6534980	Identifier	size		6532660	1					
ANR	6534981	AssignmentExpression	size = ( mach_vm_size_t ) 0		6532660	2		=			
ANR	6534982	Identifier	size		6532660	0					
ANR	6534983	CastExpression	( mach_vm_size_t ) 0		6532660	1					
ANR	6534984	CastTarget	mach_vm_size_t		6532660	0					
ANR	6534985	PrimaryExpression	0		6532660	1					
ANR	6534986	IdentifierDeclStatement	mach_vm_size_t osize = ( mach_vm_size_t ) 0 ;	1304:1:35089:35130	6532660	4	True				
ANR	6534987	IdentifierDecl	osize = ( mach_vm_size_t ) 0		6532660	0					
ANR	6534988	IdentifierDeclType	mach_vm_size_t		6532660	0					
ANR	6534989	Identifier	osize		6532660	1					
ANR	6534990	AssignmentExpression	osize = ( mach_vm_size_t ) 0		6532660	2		=			
ANR	6534991	Identifier	osize		6532660	0					
ANR	6534992	CastExpression	( mach_vm_size_t ) 0		6532660	1					
ANR	6534993	CastTarget	mach_vm_size_t		6532660	0					
ANR	6534994	PrimaryExpression	0		6532660	1					
ANR	6534995	IdentifierDeclStatement	natural_t depth = 0 ;	1305:1:35133:35152	6532660	5	True				
ANR	6534996	IdentifierDecl	depth = 0		6532660	0					
ANR	6534997	IdentifierDeclType	natural_t		6532660	0					
ANR	6534998	Identifier	depth		6532660	1					
ANR	6534999	AssignmentExpression	depth = 0		6532660	2		=			
ANR	6535000	Identifier	depth		6532660	0					
ANR	6535001	PrimaryExpression	0		6532660	1					
ANR	6535002	IdentifierDeclStatement	int tid = dbg -> pid ;	1306:1:35155:35173	6532660	6	True				
ANR	6535003	IdentifierDecl	tid = dbg -> pid		6532660	0					
ANR	6535004	IdentifierDeclType	int		6532660	0					
ANR	6535005	Identifier	tid		6532660	1					
ANR	6535006	AssignmentExpression	tid = dbg -> pid		6532660	2		=			
ANR	6535007	Identifier	tid		6532660	0					
ANR	6535008	PtrMemberAccess	dbg -> pid		6532660	1					
ANR	6535009	Identifier	dbg		6532660	0					
ANR	6535010	Identifier	pid		6532660	1					
ANR	6535011	IdentifierDeclStatement	task_t task = pid_to_task ( tid ) ;	1307:1:35176:35207	6532660	7	True				
ANR	6535012	IdentifierDecl	task = pid_to_task ( tid )		6532660	0					
ANR	6535013	IdentifierDeclType	task_t		6532660	0					
ANR	6535014	Identifier	task		6532660	1					
ANR	6535015	AssignmentExpression	task = pid_to_task ( tid )		6532660	2		=			
ANR	6535016	Identifier	task		6532660	0					
ANR	6535017	CallExpression	pid_to_task ( tid )		6532660	1					
ANR	6535018	Callee	pid_to_task		6532660	0					
ANR	6535019	Identifier	pid_to_task		6532660	0					
ANR	6535020	ArgumentList	tid		6532660	1					
ANR	6535021	Argument	tid		6532660	0					
ANR	6535022	Identifier	tid		6532660	0					
ANR	6535023	IdentifierDeclStatement	RDebugMap * mr = NULL ;	1308:1:35210:35230	6532660	8	True				
ANR	6535024	IdentifierDecl	* mr = NULL		6532660	0					
ANR	6535025	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6535026	Identifier	mr		6532660	1					
ANR	6535027	AssignmentExpression	* mr = NULL		6532660	2		=			
ANR	6535028	Identifier	NULL		6532660	0					
ANR	6535029	Identifier	NULL		6532660	1					
ANR	6535030	IdentifierDeclStatement	int i = 0 ;	1309:1:35233:35242	6532660	9	True				
ANR	6535031	IdentifierDecl	i = 0		6532660	0					
ANR	6535032	IdentifierDeclType	int		6532660	0					
ANR	6535033	Identifier	i		6532660	1					
ANR	6535034	AssignmentExpression	i = 0		6532660	2		=			
ANR	6535035	Identifier	i		6532660	0					
ANR	6535036	PrimaryExpression	0		6532660	1					
ANR	6535037	IfStatement	if ( ! task )		6532660	10					
ANR	6535038	Condition	! task	1311:5:35250:35254	6532660	0	True				
ANR	6535039	UnaryOperationExpression	! task		6532660	0					
ANR	6535040	UnaryOperator	!		6532660	0					
ANR	6535041	Identifier	task		6532660	1					
ANR	6535042	CompoundStatement		573:12:16318:16318	6532660	1					
ANR	6535043	ReturnStatement	return NULL ;	1312:2:35261:35272	6532660	0	True				
ANR	6535044	Identifier	NULL		6532660	0					
ANR	6535045	IdentifierDeclStatement	RList * modules = xnu_dbg_modules ( dbg ) ;	1314:1:35278:35316	6532660	11	True				
ANR	6535046	IdentifierDecl	* modules = xnu_dbg_modules ( dbg )		6532660	0					
ANR	6535047	IdentifierDeclType	RList *		6532660	0					
ANR	6535048	Identifier	modules		6532660	1					
ANR	6535049	AssignmentExpression	* modules = xnu_dbg_modules ( dbg )		6532660	2		=			
ANR	6535050	Identifier	modules		6532660	0					
ANR	6535051	CallExpression	xnu_dbg_modules ( dbg )		6532660	1					
ANR	6535052	Callee	xnu_dbg_modules		6532660	0					
ANR	6535053	Identifier	xnu_dbg_modules		6532660	0					
ANR	6535054	ArgumentList	dbg		6532660	1					
ANR	6535055	Argument	dbg		6532660	0					
ANR	6535056	Identifier	dbg		6532660	0					
ANR	6535057	IfStatement	if ( only_modules )		6532660	12					
ANR	6535058	Condition	only_modules	1315:5:35323:35334	6532660	0	True				
ANR	6535059	Identifier	only_modules		6532660	0					
ANR	6535060	CompoundStatement		577:19:16398:16398	6532660	1					
ANR	6535061	ReturnStatement	return modules ;	1316:2:35341:35355	6532660	0	True				
ANR	6535062	Identifier	modules		6532660	0					
ANR	6535063	ExpressionStatement	size = osize = 16384	1319:1:35390:35410	6532660	13	True				
ANR	6535064	AssignmentExpression	size = osize = 16384		6532660	0		=			
ANR	6535065	Identifier	size		6532660	0					
ANR	6535066	AssignmentExpression	osize = 16384		6532660	1		=			
ANR	6535067	Identifier	osize		6532660	0					
ANR	6535068	PrimaryExpression	16384		6532660	1					
ANR	6535069	IfStatement	if ( dbg -> pid == 0 )		6532660	14					
ANR	6535070	Condition	dbg -> pid == 0	1324:5:35458:35470	6532660	0	True				
ANR	6535071	EqualityExpression	dbg -> pid == 0		6532660	0		==			
ANR	6535072	PtrMemberAccess	dbg -> pid		6532660	0					
ANR	6535073	Identifier	dbg		6532660	0					
ANR	6535074	Identifier	pid		6532660	1					
ANR	6535075	PrimaryExpression	0		6532660	1					
ANR	6535076	CompoundStatement		587:2:16538:16580	6532660	1					
ANR	6535077	IdentifierDeclStatement	vm_address_t base = get_kernel_base ( task ) ;	1325:2:35477:35519	6532660	0	True				
ANR	6535078	IdentifierDecl	base = get_kernel_base ( task )		6532660	0					
ANR	6535079	IdentifierDeclType	vm_address_t		6532660	0					
ANR	6535080	Identifier	base		6532660	1					
ANR	6535081	AssignmentExpression	base = get_kernel_base ( task )		6532660	2		=			
ANR	6535082	Identifier	base		6532660	0					
ANR	6535083	CallExpression	get_kernel_base ( task )		6532660	1					
ANR	6535084	Callee	get_kernel_base		6532660	0					
ANR	6535085	Identifier	get_kernel_base		6532660	0					
ANR	6535086	ArgumentList	task		6532660	1					
ANR	6535087	Argument	task		6532660	0					
ANR	6535088	Identifier	task		6532660	0					
ANR	6535089	Statement	eprintf	1326:2:35523:35529	6532660	1	True				
ANR	6535090	Statement	(	1326:10:35531:35531	6532660	2	True				
ANR	6535091	Statement	"""Kernel Base Address: 0x%"""	1326:11:35532:35557	6532660	3	True				
ANR	6535092	Statement	PFMT64x	1326:37:35558:35564	6532660	4	True				
ANR	6535093	Statement	"""\\n"""	1326:44:35565:35568	6532660	5	True				
ANR	6535094	Statement	","	1326:48:35569:35569	6532660	6	True				
ANR	6535095	Statement	(	1326:50:35571:35571	6532660	7	True				
ANR	6535096	Statement	ut64	1326:51:35572:35575	6532660	8	True				
ANR	6535097	Statement	)	1326:55:35576:35576	6532660	9	True				
ANR	6535098	Statement	base	1326:56:35577:35580	6532660	10	True				
ANR	6535099	Statement	)	1326:60:35581:35581	6532660	11	True				
ANR	6535100	ExpressionStatement		1326:61:35582:35582	6532660	12	True				
ANR	6535101	ReturnStatement	return NULL ;	1327:2:35586:35597	6532660	13	True				
ANR	6535102	Identifier	NULL		6532660	0					
ANR	6535103	IdentifierDeclStatement	RList * list = r_list_new ( ) ;	1330:1:35610:35637	6532660	15	True				
ANR	6535104	IdentifierDecl	* list = r_list_new ( )		6532660	0					
ANR	6535105	IdentifierDeclType	RList *		6532660	0					
ANR	6535106	Identifier	list		6532660	1					
ANR	6535107	AssignmentExpression	* list = r_list_new ( )		6532660	2		=			
ANR	6535108	Identifier	list		6532660	0					
ANR	6535109	CallExpression	r_list_new ( )		6532660	1					
ANR	6535110	Callee	r_list_new		6532660	0					
ANR	6535111	Identifier	r_list_new		6532660	0					
ANR	6535112	ArgumentList			6532660	1					
ANR	6535113	IfStatement	if ( ! list )		6532660	16					
ANR	6535114	Condition	! list	1331:5:35644:35648	6532660	0	True				
ANR	6535115	UnaryOperationExpression	! list		6532660	0					
ANR	6535116	UnaryOperator	!		6532660	0					
ANR	6535117	Identifier	list		6532660	1					
ANR	6535118	CompoundStatement		593:12:16712:16712	6532660	1					
ANR	6535119	ReturnStatement	return NULL ;	1332:2:35655:35666	6532660	0	True				
ANR	6535120	Identifier	NULL		6532660	0					
ANR	6535121	ExpressionStatement	list -> free = ( RListFree ) xnu_map_free	1334:1:35672:35708	6532660	17	True				
ANR	6535122	AssignmentExpression	list -> free = ( RListFree ) xnu_map_free		6532660	0		=			
ANR	6535123	PtrMemberAccess	list -> free		6532660	0					
ANR	6535124	Identifier	list		6532660	0					
ANR	6535125	Identifier	free		6532660	1					
ANR	6535126	CastExpression	( RListFree ) xnu_map_free		6532660	1					
ANR	6535127	CastTarget	RListFree		6532660	0					
ANR	6535128	Identifier	xnu_map_free		6532660	1					
ANR	6535129	ForStatement	for ( ; ; )		6532660	18					
ANR	6535130	CompoundStatement		600:2:16901:17026	6532660	0					
ANR	6535131	IdentifierDeclStatement	struct vm_region_submap_info_64 info = { 0 } ;	1336:2:35724:35766	6532660	0	True				
ANR	6535132	IdentifierDecl	info = { 0 }		6532660	0					
ANR	6535133	IdentifierDeclType	struct vm_region_submap_info_64		6532660	0					
ANR	6535134	Identifier	info		6532660	1					
ANR	6535135	AssignmentExpression	info = { 0 }		6532660	2		=			
ANR	6535136	Identifier	info		6532660	0					
ANR	6535137	InitializerList	0		6532660	1					
ANR	6535138	PrimaryExpression	0		6532660	0					
ANR	6535139	IdentifierDeclStatement	mach_msg_type_number_t info_count = VM_REGION_SUBMAP_INFO_COUNT_64 ;	1337:2:35770:35836	6532660	1	True				
ANR	6535140	IdentifierDecl	info_count = VM_REGION_SUBMAP_INFO_COUNT_64		6532660	0					
ANR	6535141	IdentifierDeclType	mach_msg_type_number_t		6532660	0					
ANR	6535142	Identifier	info_count		6532660	1					
ANR	6535143	AssignmentExpression	info_count = VM_REGION_SUBMAP_INFO_COUNT_64		6532660	2		=			
ANR	6535144	Identifier	VM_REGION_SUBMAP_INFO_COUNT_64		6532660	0					
ANR	6535145	Identifier	VM_REGION_SUBMAP_INFO_COUNT_64		6532660	1					
ANR	6535146	IdentifierDeclStatement	"kern_return_t kr = mach_vm_region_recurse ( task , & address , & size , & depth , ( vm_region_recurse_info_t ) & info , & info_count ) ;"	1338:2:35840:35965	6532660	2	True				
ANR	6535147	IdentifierDecl	"kr = mach_vm_region_recurse ( task , & address , & size , & depth , ( vm_region_recurse_info_t ) & info , & info_count )"		6532660	0					
ANR	6535148	IdentifierDeclType	kern_return_t		6532660	0					
ANR	6535149	Identifier	kr		6532660	1					
ANR	6535150	AssignmentExpression	"kr = mach_vm_region_recurse ( task , & address , & size , & depth , ( vm_region_recurse_info_t ) & info , & info_count )"		6532660	2		=			
ANR	6535151	Identifier	kr		6532660	0					
ANR	6535152	CallExpression	"mach_vm_region_recurse ( task , & address , & size , & depth , ( vm_region_recurse_info_t ) & info , & info_count )"		6532660	1					
ANR	6535153	Callee	mach_vm_region_recurse		6532660	0					
ANR	6535154	Identifier	mach_vm_region_recurse		6532660	0					
ANR	6535155	ArgumentList	task		6532660	1					
ANR	6535156	Argument	task		6532660	0					
ANR	6535157	Identifier	task		6532660	0					
ANR	6535158	Argument	& address		6532660	1					
ANR	6535159	UnaryOperationExpression	& address		6532660	0					
ANR	6535160	UnaryOperator	&		6532660	0					
ANR	6535161	Identifier	address		6532660	1					
ANR	6535162	Argument	& size		6532660	2					
ANR	6535163	UnaryOperationExpression	& size		6532660	0					
ANR	6535164	UnaryOperator	&		6532660	0					
ANR	6535165	Identifier	size		6532660	1					
ANR	6535166	Argument	& depth		6532660	3					
ANR	6535167	UnaryOperationExpression	& depth		6532660	0					
ANR	6535168	UnaryOperator	&		6532660	0					
ANR	6535169	Identifier	depth		6532660	1					
ANR	6535170	Argument	( vm_region_recurse_info_t ) & info		6532660	4					
ANR	6535171	CastExpression	( vm_region_recurse_info_t ) & info		6532660	0					
ANR	6535172	CastTarget	vm_region_recurse_info_t		6532660	0					
ANR	6535173	UnaryOperationExpression	& info		6532660	1					
ANR	6535174	UnaryOperator	&		6532660	0					
ANR	6535175	Identifier	info		6532660	1					
ANR	6535176	Argument	& info_count		6532660	5					
ANR	6535177	UnaryOperationExpression	& info_count		6532660	0					
ANR	6535178	UnaryOperator	&		6532660	0					
ANR	6535179	Identifier	info_count		6532660	1					
ANR	6535180	IfStatement	if ( kr != KERN_SUCCESS )		6532660	3					
ANR	6535181	Condition	kr != KERN_SUCCESS	1340:6:35973:35990	6532660	0	True				
ANR	6535182	EqualityExpression	kr != KERN_SUCCESS		6532660	0		!=			
ANR	6535183	Identifier	kr		6532660	0					
ANR	6535184	Identifier	KERN_SUCCESS		6532660	1					
ANR	6535185	CompoundStatement		602:26:17054:17054	6532660	1					
ANR	6535186	BreakStatement	break ;	1341:3:35998:36003	6532660	0	True				
ANR	6535187	IfStatement	if ( info . is_submap )		6532660	4					
ANR	6535188	Condition	info . is_submap	1343:6:36015:36028	6532660	0	True				
ANR	6535189	MemberAccess	info . is_submap		6532660	0					
ANR	6535190	Identifier	info		6532660	0					
ANR	6535191	Identifier	is_submap		6532660	1					
ANR	6535192	CompoundStatement		605:22:17092:17092	6532660	1					
ANR	6535193	ExpressionStatement	depth ++	1344:3:36036:36043	6532660	0	True				
ANR	6535194	PostIncDecOperationExpression	depth ++		6532660	0					
ANR	6535195	Identifier	depth		6532660	0					
ANR	6535196	IncDec	++		6532660	1					
ANR	6535197	ContinueStatement	continue ;	1345:3:36048:36056	6532660	1	True				
ANR	6535198	ExpressionStatement	module_name [ 0 ] = 0	1347:2:36064:36082	6532660	5	True				
ANR	6535199	AssignmentExpression	module_name [ 0 ] = 0		6532660	0		=			
ANR	6535200	ArrayIndexing	module_name [ 0 ]		6532660	0					
ANR	6535201	Identifier	module_name		6532660	0					
ANR	6535202	PrimaryExpression	0		6532660	1					
ANR	6535203	PrimaryExpression	0		6532660	1					
ANR	6535204	CompoundStatement		612:3:17172:17259	6532660	6					
ANR	6535205	IdentifierDeclStatement	"int ret = proc_regionfilename ( tid , address , module_name , sizeof ( module_name ) ) ;"	1350:3:36111:36198	6532660	0	True				
ANR	6535206	IdentifierDecl	"ret = proc_regionfilename ( tid , address , module_name , sizeof ( module_name ) )"		6532660	0					
ANR	6535207	IdentifierDeclType	int		6532660	0					
ANR	6535208	Identifier	ret		6532660	1					
ANR	6535209	AssignmentExpression	"ret = proc_regionfilename ( tid , address , module_name , sizeof ( module_name ) )"		6532660	2		=			
ANR	6535210	Identifier	ret		6532660	0					
ANR	6535211	CallExpression	"proc_regionfilename ( tid , address , module_name , sizeof ( module_name ) )"		6532660	1					
ANR	6535212	Callee	proc_regionfilename		6532660	0					
ANR	6535213	Identifier	proc_regionfilename		6532660	0					
ANR	6535214	ArgumentList	tid		6532660	1					
ANR	6535215	Argument	tid		6532660	0					
ANR	6535216	Identifier	tid		6532660	0					
ANR	6535217	Argument	address		6532660	1					
ANR	6535218	Identifier	address		6532660	0					
ANR	6535219	Argument	module_name		6532660	2					
ANR	6535220	Identifier	module_name		6532660	0					
ANR	6535221	Argument	sizeof ( module_name )		6532660	3					
ANR	6535222	SizeofExpression	sizeof ( module_name )		6532660	0					
ANR	6535223	Sizeof	sizeof		6532660	0					
ANR	6535224	SizeofOperand	module_name		6532660	1					
ANR	6535225	ExpressionStatement	module_name [ ret ] = 0	1352:3:36203:36223	6532660	1	True				
ANR	6535226	AssignmentExpression	module_name [ ret ] = 0		6532660	0		=			
ANR	6535227	ArrayIndexing	module_name [ ret ]		6532660	0					
ANR	6535228	Identifier	module_name		6532660	0					
ANR	6535229	Identifier	ret		6532660	1					
ANR	6535230	PrimaryExpression	0		6532660	1					
ANR	6535231	IfStatement	if ( true )		6532660	7					
ANR	6535232	Condition	true	1355:6:36242:36245	6532660	0	True				
ANR	6535233	Identifier	true		6532660	0					
ANR	6535234	CompoundStatement		643:3:18083:18127	6532660	1					
ANR	6535235	IdentifierDeclStatement	char maxperm [ 32 ] ;	1356:3:36253:36269	6532660	0	True				
ANR	6535236	IdentifierDecl	maxperm [ 32 ]		6532660	0					
ANR	6535237	IdentifierDeclType	char [ 32 ]		6532660	0					
ANR	6535238	Identifier	maxperm		6532660	1					
ANR	6535239	PrimaryExpression	32		6532660	2					
ANR	6535240	IdentifierDeclStatement	char depthstr [ 32 ] ;	1357:3:36274:36291	6532660	1	True				
ANR	6535241	IdentifierDecl	depthstr [ 32 ]		6532660	0					
ANR	6535242	IdentifierDeclType	char [ 32 ]		6532660	0					
ANR	6535243	Identifier	depthstr		6532660	1					
ANR	6535244	PrimaryExpression	32		6532660	2					
ANR	6535245	IfStatement	if ( depth > 0 )		6532660	2					
ANR	6535246	Condition	depth > 0	1358:7:36300:36308	6532660	0	True				
ANR	6535247	RelationalExpression	depth > 0		6532660	0		>			
ANR	6535248	Identifier	depth		6532660	0					
ANR	6535249	PrimaryExpression	0		6532660	1					
ANR	6535250	CompoundStatement		620:18:17372:17372	6532660	1					
ANR	6535251	ExpressionStatement	"snprintf ( depthstr , sizeof ( depthstr ) , ""_%d"" , depth )"	1359:4:36317:36369	6532660	0	True				
ANR	6535252	CallExpression	"snprintf ( depthstr , sizeof ( depthstr ) , ""_%d"" , depth )"		6532660	0					
ANR	6535253	Callee	snprintf		6532660	0					
ANR	6535254	Identifier	snprintf		6532660	0					
ANR	6535255	ArgumentList	depthstr		6532660	1					
ANR	6535256	Argument	depthstr		6532660	0					
ANR	6535257	Identifier	depthstr		6532660	0					
ANR	6535258	Argument	sizeof ( depthstr )		6532660	1					
ANR	6535259	SizeofExpression	sizeof ( depthstr )		6532660	0					
ANR	6535260	Sizeof	sizeof		6532660	0					
ANR	6535261	SizeofOperand	depthstr		6532660	1					
ANR	6535262	Argument	"""_%d"""		6532660	2					
ANR	6535263	PrimaryExpression	"""_%d"""		6532660	0					
ANR	6535264	Argument	depth		6532660	3					
ANR	6535265	Identifier	depth		6532660	0					
ANR	6535266	ElseStatement	else		6532660	0					
ANR	6535267	CompoundStatement		622:10:17442:17442	6532660	0					
ANR	6535268	ExpressionStatement	depthstr [ 0 ] = 0	1361:4:36387:36402	6532660	0	True				
ANR	6535269	AssignmentExpression	depthstr [ 0 ] = 0		6532660	0		=			
ANR	6535270	ArrayIndexing	depthstr [ 0 ]		6532660	0					
ANR	6535271	Identifier	depthstr		6532660	0					
ANR	6535272	PrimaryExpression	0		6532660	1					
ANR	6535273	PrimaryExpression	0		6532660	1					
ANR	6535274	IfStatement	if ( info . max_protection != info . protection )		6532660	3					
ANR	6535275	Condition	info . max_protection != info . protection	1364:7:36417:36454	6532660	0	True				
ANR	6535276	EqualityExpression	info . max_protection != info . protection		6532660	0		!=			
ANR	6535277	MemberAccess	info . max_protection		6532660	0					
ANR	6535278	Identifier	info		6532660	0					
ANR	6535279	Identifier	max_protection		6532660	1					
ANR	6535280	MemberAccess	info . protection		6532660	1					
ANR	6535281	Identifier	info		6532660	0					
ANR	6535282	Identifier	protection		6532660	1					
ANR	6535283	CompoundStatement		626:47:17518:17518	6532660	1					
ANR	6535284	ExpressionStatement	"strcpy ( maxperm , r_str_rwx_i ( xwr2rwx ( info . max_protection ) ) )"	1365:4:36463:36530	6532660	0	True				
ANR	6535285	CallExpression	"strcpy ( maxperm , r_str_rwx_i ( xwr2rwx ( info . max_protection ) ) )"		6532660	0					
ANR	6535286	Callee	strcpy		6532660	0					
ANR	6535287	Identifier	strcpy		6532660	0					
ANR	6535288	ArgumentList	maxperm		6532660	1					
ANR	6535289	Argument	maxperm		6532660	0					
ANR	6535290	Identifier	maxperm		6532660	0					
ANR	6535291	Argument	r_str_rwx_i ( xwr2rwx ( info . max_protection ) )		6532660	1					
ANR	6535292	CallExpression	r_str_rwx_i ( xwr2rwx ( info . max_protection ) )		6532660	0					
ANR	6535293	Callee	r_str_rwx_i		6532660	0					
ANR	6535294	Identifier	r_str_rwx_i		6532660	0					
ANR	6535295	ArgumentList	xwr2rwx ( info . max_protection )		6532660	1					
ANR	6535296	Argument	xwr2rwx ( info . max_protection )		6532660	0					
ANR	6535297	CallExpression	xwr2rwx ( info . max_protection )		6532660	0					
ANR	6535298	Callee	xwr2rwx		6532660	0					
ANR	6535299	Identifier	xwr2rwx		6532660	0					
ANR	6535300	ArgumentList	info . max_protection		6532660	1					
ANR	6535301	Argument	info . max_protection		6532660	0					
ANR	6535302	MemberAccess	info . max_protection		6532660	0					
ANR	6535303	Identifier	info		6532660	0					
ANR	6535304	Identifier	max_protection		6532660	1					
ANR	6535305	ElseStatement	else		6532660	0					
ANR	6535306	CompoundStatement		629:10:17603:17603	6532660	0					
ANR	6535307	ExpressionStatement	maxperm [ 0 ] = 0	1368:4:36548:36562	6532660	0	True				
ANR	6535308	AssignmentExpression	maxperm [ 0 ] = 0		6532660	0		=			
ANR	6535309	ArrayIndexing	maxperm [ 0 ]		6532660	0					
ANR	6535310	Identifier	maxperm		6532660	0					
ANR	6535311	PrimaryExpression	0		6532660	1					
ANR	6535312	PrimaryExpression	0		6532660	1					
ANR	6535313	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""%02x_%s%s%s%s%s%s%s%s"" , i , unparse_inheritance ( info . inheritance ) , info . user_tag ? ""_user"" : """" , info . is_submap ? ""_sub"" : """" , """" , info . is_submap ? ""_submap"" : """" , module_name , maxperm , depthstr )"	1371:3:36617:36857	6532660	4	True				
ANR	6535314	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""%02x_%s%s%s%s%s%s%s%s"" , i , unparse_inheritance ( info . inheritance ) , info . user_tag ? ""_user"" : """" , info . is_submap ? ""_sub"" : """" , """" , info . is_submap ? ""_submap"" : """" , module_name , maxperm , depthstr )"		6532660	0					
ANR	6535315	Callee	snprintf		6532660	0					
ANR	6535316	Identifier	snprintf		6532660	0					
ANR	6535317	ArgumentList	buf		6532660	1					
ANR	6535318	Argument	buf		6532660	0					
ANR	6535319	Identifier	buf		6532660	0					
ANR	6535320	Argument	sizeof ( buf )		6532660	1					
ANR	6535321	SizeofExpression	sizeof ( buf )		6532660	0					
ANR	6535322	Sizeof	sizeof		6532660	0					
ANR	6535323	SizeofOperand	buf		6532660	1					
ANR	6535324	Argument	"""%02x_%s%s%s%s%s%s%s%s"""		6532660	2					
ANR	6535325	PrimaryExpression	"""%02x_%s%s%s%s%s%s%s%s"""		6532660	0					
ANR	6535326	Argument	i		6532660	3					
ANR	6535327	Identifier	i		6532660	0					
ANR	6535328	Argument	unparse_inheritance ( info . inheritance )		6532660	4					
ANR	6535329	CallExpression	unparse_inheritance ( info . inheritance )		6532660	0					
ANR	6535330	Callee	unparse_inheritance		6532660	0					
ANR	6535331	Identifier	unparse_inheritance		6532660	0					
ANR	6535332	ArgumentList	info . inheritance		6532660	1					
ANR	6535333	Argument	info . inheritance		6532660	0					
ANR	6535334	MemberAccess	info . inheritance		6532660	0					
ANR	6535335	Identifier	info		6532660	0					
ANR	6535336	Identifier	inheritance		6532660	1					
ANR	6535337	Argument	"info . user_tag ? ""_user"" : """""		6532660	5					
ANR	6535338	ConditionalExpression	"info . user_tag ? ""_user"" : """""		6532660	0					
ANR	6535339	Condition	info . user_tag		6532660	0					
ANR	6535340	MemberAccess	info . user_tag		6532660	0					
ANR	6535341	Identifier	info		6532660	0					
ANR	6535342	Identifier	user_tag		6532660	1					
ANR	6535343	PrimaryExpression	"""_user"""		6532660	1					
ANR	6535344	PrimaryExpression	""""""		6532660	2					
ANR	6535345	Argument	"info . is_submap ? ""_sub"" : """""		6532660	6					
ANR	6535346	ConditionalExpression	"info . is_submap ? ""_sub"" : """""		6532660	0					
ANR	6535347	Condition	info . is_submap		6532660	0					
ANR	6535348	MemberAccess	info . is_submap		6532660	0					
ANR	6535349	Identifier	info		6532660	0					
ANR	6535350	Identifier	is_submap		6532660	1					
ANR	6535351	PrimaryExpression	"""_sub"""		6532660	1					
ANR	6535352	PrimaryExpression	""""""		6532660	2					
ANR	6535353	Argument	""""""		6532660	7					
ANR	6535354	PrimaryExpression	""""""		6532660	0					
ANR	6535355	Argument	"info . is_submap ? ""_submap"" : """""		6532660	8					
ANR	6535356	ConditionalExpression	"info . is_submap ? ""_submap"" : """""		6532660	0					
ANR	6535357	Condition	info . is_submap		6532660	0					
ANR	6535358	MemberAccess	info . is_submap		6532660	0					
ANR	6535359	Identifier	info		6532660	0					
ANR	6535360	Identifier	is_submap		6532660	1					
ANR	6535361	PrimaryExpression	"""_submap"""		6532660	1					
ANR	6535362	PrimaryExpression	""""""		6532660	2					
ANR	6535363	Argument	module_name		6532660	9					
ANR	6535364	Identifier	module_name		6532660	0					
ANR	6535365	Argument	maxperm		6532660	10					
ANR	6535366	Identifier	maxperm		6532660	0					
ANR	6535367	Argument	depthstr		6532660	11					
ANR	6535368	Identifier	depthstr		6532660	0					
ANR	6535369	IfStatement	"if ( ! ( mr = r_debug_map_new ( buf , address , address + size , xwr2rwx ( info . protection ) , 0 ) ) )"		6532660	5					
ANR	6535370	Condition	"! ( mr = r_debug_map_new ( buf , address , address + size , xwr2rwx ( info . protection ) , 0 ) )"	1377:7:36866:36949	6532660	0	True				
ANR	6535371	UnaryOperationExpression	"! ( mr = r_debug_map_new ( buf , address , address + size , xwr2rwx ( info . protection ) , 0 ) )"		6532660	0					
ANR	6535372	UnaryOperator	!		6532660	0					
ANR	6535373	AssignmentExpression	"mr = r_debug_map_new ( buf , address , address + size , xwr2rwx ( info . protection ) , 0 )"		6532660	1		=			
ANR	6535374	Identifier	mr		6532660	0					
ANR	6535375	CallExpression	"r_debug_map_new ( buf , address , address + size , xwr2rwx ( info . protection ) , 0 )"		6532660	1					
ANR	6535376	Callee	r_debug_map_new		6532660	0					
ANR	6535377	Identifier	r_debug_map_new		6532660	0					
ANR	6535378	ArgumentList	buf		6532660	1					
ANR	6535379	Argument	buf		6532660	0					
ANR	6535380	Identifier	buf		6532660	0					
ANR	6535381	Argument	address		6532660	1					
ANR	6535382	Identifier	address		6532660	0					
ANR	6535383	Argument	address + size		6532660	2					
ANR	6535384	AdditiveExpression	address + size		6532660	0		+			
ANR	6535385	Identifier	address		6532660	0					
ANR	6535386	Identifier	size		6532660	1					
ANR	6535387	Argument	xwr2rwx ( info . protection )		6532660	3					
ANR	6535388	CallExpression	xwr2rwx ( info . protection )		6532660	0					
ANR	6535389	Callee	xwr2rwx		6532660	0					
ANR	6535390	Identifier	xwr2rwx		6532660	0					
ANR	6535391	ArgumentList	info . protection		6532660	1					
ANR	6535392	Argument	info . protection		6532660	0					
ANR	6535393	MemberAccess	info . protection		6532660	0					
ANR	6535394	Identifier	info		6532660	0					
ANR	6535395	Identifier	protection		6532660	1					
ANR	6535396	Argument	0		6532660	4					
ANR	6535397	PrimaryExpression	0		6532660	0					
ANR	6535398	CompoundStatement		639:93:18013:18013	6532660	1					
ANR	6535399	ExpressionStatement	"eprintf ( ""Cannot create r_debug_map_new\\n"" )"	1378:4:36958:37001	6532660	0	True				
ANR	6535400	CallExpression	"eprintf ( ""Cannot create r_debug_map_new\\n"" )"		6532660	0					
ANR	6535401	Callee	eprintf		6532660	0					
ANR	6535402	Identifier	eprintf		6532660	0					
ANR	6535403	ArgumentList	"""Cannot create r_debug_map_new\\n"""		6532660	1					
ANR	6535404	Argument	"""Cannot create r_debug_map_new\\n"""		6532660	0					
ANR	6535405	PrimaryExpression	"""Cannot create r_debug_map_new\\n"""		6532660	0					
ANR	6535406	BreakStatement	break ;	1379:4:37007:37012	6532660	1	True				
ANR	6535407	IdentifierDeclStatement	"RDebugMap * rdm = moduleAt ( modules , address ) ;"	1381:3:37022:37066	6532660	6	True				
ANR	6535408	IdentifierDecl	"* rdm = moduleAt ( modules , address )"		6532660	0					
ANR	6535409	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6535410	Identifier	rdm		6532660	1					
ANR	6535411	AssignmentExpression	"* rdm = moduleAt ( modules , address )"		6532660	2		=			
ANR	6535412	Identifier	rdm		6532660	0					
ANR	6535413	CallExpression	"moduleAt ( modules , address )"		6532660	1					
ANR	6535414	Callee	moduleAt		6532660	0					
ANR	6535415	Identifier	moduleAt		6532660	0					
ANR	6535416	ArgumentList	modules		6532660	1					
ANR	6535417	Argument	modules		6532660	0					
ANR	6535418	Identifier	modules		6532660	0					
ANR	6535419	Argument	address		6532660	1					
ANR	6535420	Identifier	address		6532660	0					
ANR	6535421	IfStatement	if ( rdm )		6532660	7					
ANR	6535422	Condition	rdm	1382:7:37075:37077	6532660	0	True				
ANR	6535423	Identifier	rdm		6532660	0					
ANR	6535424	CompoundStatement		644:12:18141:18141	6532660	1					
ANR	6535425	ExpressionStatement	mr -> file = strdup ( rdm -> name )	1383:4:37086:37115	6532660	0	True				
ANR	6535426	AssignmentExpression	mr -> file = strdup ( rdm -> name )		6532660	0		=			
ANR	6535427	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535428	Identifier	mr		6532660	0					
ANR	6535429	Identifier	file		6532660	1					
ANR	6535430	CallExpression	strdup ( rdm -> name )		6532660	1					
ANR	6535431	Callee	strdup		6532660	0					
ANR	6535432	Identifier	strdup		6532660	0					
ANR	6535433	ArgumentList	rdm -> name		6532660	1					
ANR	6535434	Argument	rdm -> name		6532660	0					
ANR	6535435	PtrMemberAccess	rdm -> name		6532660	0					
ANR	6535436	Identifier	rdm		6532660	0					
ANR	6535437	Identifier	name		6532660	1					
ANR	6535438	ElseStatement	else		6532660	0					
ANR	6535439	CompoundStatement		646:10:18188:18188	6532660	0					
ANR	6535440	IfStatement	if ( * module_name )		6532660	0					
ANR	6535441	Condition	* module_name	1385:8:37137:37148	6532660	0	True				
ANR	6535442	UnaryOperationExpression	* module_name		6532660	0					
ANR	6535443	UnaryOperator	*		6532660	0					
ANR	6535444	Identifier	module_name		6532660	1					
ANR	6535445	CompoundStatement		647:22:18212:18212	6532660	1					
ANR	6535446	ExpressionStatement	mr -> file = strdup ( module_name )	1386:5:37158:37189	6532660	0	True				
ANR	6535447	AssignmentExpression	mr -> file = strdup ( module_name )		6532660	0		=			
ANR	6535448	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535449	Identifier	mr		6532660	0					
ANR	6535450	Identifier	file		6532660	1					
ANR	6535451	CallExpression	strdup ( module_name )		6532660	1					
ANR	6535452	Callee	strdup		6532660	0					
ANR	6535453	Identifier	strdup		6532660	0					
ANR	6535454	ArgumentList	module_name		6532660	1					
ANR	6535455	Argument	module_name		6532660	0					
ANR	6535456	Identifier	module_name		6532660	0					
ANR	6535457	IfStatement	if ( mr -> file )		6532660	8					
ANR	6535458	Condition	mr -> file	1389:7:37209:37216	6532660	0	True				
ANR	6535459	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535460	Identifier	mr		6532660	0					
ANR	6535461	Identifier	file		6532660	1					
ANR	6535462	CompoundStatement		651:17:18280:18280	6532660	1					
ANR	6535463	IfStatement	"if ( ! strcmp ( mr -> file , mr -> file ) )"		6532660	0					
ANR	6535464	Condition	"! strcmp ( mr -> file , mr -> file )"	1390:8:37229:37256	6532660	0	True				
ANR	6535465	UnaryOperationExpression	"! strcmp ( mr -> file , mr -> file )"		6532660	0					
ANR	6535466	UnaryOperator	!		6532660	0					
ANR	6535467	CallExpression	"strcmp ( mr -> file , mr -> file )"		6532660	1					
ANR	6535468	Callee	strcmp		6532660	0					
ANR	6535469	Identifier	strcmp		6532660	0					
ANR	6535470	ArgumentList	mr -> file		6532660	1					
ANR	6535471	Argument	mr -> file		6532660	0					
ANR	6535472	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535473	Identifier	mr		6532660	0					
ANR	6535474	Identifier	file		6532660	1					
ANR	6535475	Argument	mr -> file		6532660	1					
ANR	6535476	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535477	Identifier	mr		6532660	0					
ANR	6535478	Identifier	file		6532660	1					
ANR	6535479	CompoundStatement		654:5:18349:18395	6532660	1					
ANR	6535480	ExpressionStatement	mr -> name [ 0 ] = 0	1391:5:37266:37281	6532660	0	True				
ANR	6535481	AssignmentExpression	mr -> name [ 0 ] = 0		6532660	0		=			
ANR	6535482	ArrayIndexing	mr -> name [ 0 ]		6532660	0					
ANR	6535483	PtrMemberAccess	mr -> name		6532660	0					
ANR	6535484	Identifier	mr		6532660	0					
ANR	6535485	Identifier	name		6532660	1					
ANR	6535486	PrimaryExpression	0		6532660	1					
ANR	6535487	PrimaryExpression	0		6532660	1					
ANR	6535488	IdentifierDeclStatement	"const char * slash = r_str_lchr ( mr -> file , '/' ) ;"	1392:5:37288:37334	6532660	1	True				
ANR	6535489	IdentifierDecl	"* slash = r_str_lchr ( mr -> file , '/' )"		6532660	0					
ANR	6535490	IdentifierDeclType	const char *		6532660	0					
ANR	6535491	Identifier	slash		6532660	1					
ANR	6535492	AssignmentExpression	"* slash = r_str_lchr ( mr -> file , '/' )"		6532660	2		=			
ANR	6535493	Identifier	slash		6532660	0					
ANR	6535494	CallExpression	"r_str_lchr ( mr -> file , '/' )"		6532660	1					
ANR	6535495	Callee	r_str_lchr		6532660	0					
ANR	6535496	Identifier	r_str_lchr		6532660	0					
ANR	6535497	ArgumentList	mr -> file		6532660	1					
ANR	6535498	Argument	mr -> file		6532660	0					
ANR	6535499	PtrMemberAccess	mr -> file		6532660	0					
ANR	6535500	Identifier	mr		6532660	0					
ANR	6535501	Identifier	file		6532660	1					
ANR	6535502	Argument	'/'		6532660	1					
ANR	6535503	PrimaryExpression	'/'		6532660	0					
ANR	6535504	IfStatement	if ( slash )		6532660	2					
ANR	6535505	Condition	slash	1393:9:37345:37349	6532660	0	True				
ANR	6535506	Identifier	slash		6532660	0					
ANR	6535507	CompoundStatement		655:16:18413:18413	6532660	1					
ANR	6535508	ExpressionStatement	"strcpy ( mr -> name , slash + 1 )"	1394:6:37360:37388	6532660	0	True				
ANR	6535509	CallExpression	"strcpy ( mr -> name , slash + 1 )"		6532660	0					
ANR	6535510	Callee	strcpy		6532660	0					
ANR	6535511	Identifier	strcpy		6532660	0					
ANR	6535512	ArgumentList	mr -> name		6532660	1					
ANR	6535513	Argument	mr -> name		6532660	0					
ANR	6535514	PtrMemberAccess	mr -> name		6532660	0					
ANR	6535515	Identifier	mr		6532660	0					
ANR	6535516	Identifier	name		6532660	1					
ANR	6535517	Argument	slash + 1		6532660	1					
ANR	6535518	AdditiveExpression	slash + 1		6532660	0		+			
ANR	6535519	Identifier	slash		6532660	0					
ANR	6535520	PrimaryExpression	1		6532660	1					
ANR	6535521	ExpressionStatement	i ++	1398:3:37411:37414	6532660	9	True				
ANR	6535522	PostIncDecOperationExpression	i ++		6532660	0					
ANR	6535523	Identifier	i		6532660	0					
ANR	6535524	IncDec	++		6532660	1					
ANR	6535525	ExpressionStatement	mr -> shared = false	1399:3:37419:37437	6532660	10	True				
ANR	6535526	AssignmentExpression	mr -> shared = false		6532660	0		=			
ANR	6535527	PtrMemberAccess	mr -> shared		6532660	0					
ANR	6535528	Identifier	mr		6532660	0					
ANR	6535529	Identifier	shared		6532660	1					
ANR	6535530	Identifier	false		6532660	1					
ANR	6535531	ExpressionStatement	"r_list_append ( list , mr )"	1400:3:37442:37466	6532660	11	True				
ANR	6535532	CallExpression	"r_list_append ( list , mr )"		6532660	0					
ANR	6535533	Callee	r_list_append		6532660	0					
ANR	6535534	Identifier	r_list_append		6532660	0					
ANR	6535535	ArgumentList	list		6532660	1					
ANR	6535536	Argument	list		6532660	0					
ANR	6535537	Identifier	list		6532660	0					
ANR	6535538	Argument	mr		6532660	1					
ANR	6535539	Identifier	mr		6532660	0					
ANR	6535540	IfStatement	if ( size < 1 )		6532660	8					
ANR	6535541	Condition	size < 1	1402:6:37478:37485	6532660	0	True				
ANR	6535542	RelationalExpression	size < 1		6532660	0		<			
ANR	6535543	Identifier	size		6532660	0					
ANR	6535544	PrimaryExpression	1		6532660	1					
ANR	6535545	CompoundStatement		664:16:18549:18549	6532660	1					
ANR	6535546	ExpressionStatement	"eprintf ( ""size error\\n"" )"	1403:3:37493:37517	6532660	0	True				
ANR	6535547	CallExpression	"eprintf ( ""size error\\n"" )"		6532660	0					
ANR	6535548	Callee	eprintf		6532660	0					
ANR	6535549	Identifier	eprintf		6532660	0					
ANR	6535550	ArgumentList	"""size error\\n"""		6532660	1					
ANR	6535551	Argument	"""size error\\n"""		6532660	0					
ANR	6535552	PrimaryExpression	"""size error\\n"""		6532660	0					
ANR	6535553	ExpressionStatement	size = osize	1404:3:37522:37534	6532660	1	True				
ANR	6535554	AssignmentExpression	size = osize		6532660	0		=			
ANR	6535555	Identifier	size		6532660	0					
ANR	6535556	Identifier	osize		6532660	1					
ANR	6535557	ExpressionStatement	address += size	1406:2:37542:37557	6532660	9	True				
ANR	6535558	AssignmentExpression	address += size		6532660	0		+=			
ANR	6535559	Identifier	address		6532660	0					
ANR	6535560	Identifier	size		6532660	1					
ANR	6535561	ExpressionStatement	size = 0	1407:2:37561:37569	6532660	10	True				
ANR	6535562	AssignmentExpression	size = 0		6532660	0		=			
ANR	6535563	Identifier	size		6532660	0					
ANR	6535564	PrimaryExpression	0		6532660	1					
ANR	6535565	IdentifierDeclStatement	RListIter * iter ;	1409:1:37575:37590	6532660	19	True				
ANR	6535566	IdentifierDecl	* iter		6532660	0					
ANR	6535567	IdentifierDeclType	RListIter *		6532660	0					
ANR	6535568	Identifier	iter		6532660	1					
ANR	6535569	IdentifierDeclStatement	RDebugMap * m ;	1410:1:37593:37605	6532660	20	True				
ANR	6535570	IdentifierDecl	* m		6532660	0					
ANR	6535571	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6535572	Identifier	m		6532660	1					
ANR	6535573	Statement	r_list_foreach	1411:1:37608:37621	6532660	21	True				
ANR	6535574	Statement	(	1411:16:37623:37623	6532660	22	True				
ANR	6535575	Statement	modules	1411:17:37624:37630	6532660	23	True				
ANR	6535576	Statement	","	1411:24:37631:37631	6532660	24	True				
ANR	6535577	Statement	iter	1411:26:37633:37636	6532660	25	True				
ANR	6535578	Statement	","	1411:30:37637:37637	6532660	26	True				
ANR	6535579	Statement	m	1411:32:37639:37639	6532660	27	True				
ANR	6535580	Statement	)	1411:33:37640:37640	6532660	28	True				
ANR	6535581	CompoundStatement		674:2:18707:18744	6532660	29					
ANR	6535582	IdentifierDeclStatement	RDebugMap * m2 = r_debug_map_clone ( m ) ;	1412:2:37646:37683	6532660	0	True				
ANR	6535583	IdentifierDecl	* m2 = r_debug_map_clone ( m )		6532660	0					
ANR	6535584	IdentifierDeclType	RDebugMap *		6532660	0					
ANR	6535585	Identifier	m2		6532660	1					
ANR	6535586	AssignmentExpression	* m2 = r_debug_map_clone ( m )		6532660	2		=			
ANR	6535587	Identifier	m2		6532660	0					
ANR	6535588	CallExpression	r_debug_map_clone ( m )		6532660	1					
ANR	6535589	Callee	r_debug_map_clone		6532660	0					
ANR	6535590	Identifier	r_debug_map_clone		6532660	0					
ANR	6535591	ArgumentList	m		6532660	1					
ANR	6535592	Argument	m		6532660	0					
ANR	6535593	Identifier	m		6532660	0					
ANR	6535594	IfStatement	if ( m2 -> name && m2 -> file )		6532660	1					
ANR	6535595	Condition	m2 -> name && m2 -> file	1413:6:37691:37710	6532660	0	True				
ANR	6535596	AndExpression	m2 -> name && m2 -> file		6532660	0		&&			
ANR	6535597	PtrMemberAccess	m2 -> name		6532660	0					
ANR	6535598	Identifier	m2		6532660	0					
ANR	6535599	Identifier	name		6532660	1					
ANR	6535600	PtrMemberAccess	m2 -> file		6532660	1					
ANR	6535601	Identifier	m2		6532660	0					
ANR	6535602	Identifier	file		6532660	1					
ANR	6535603	CompoundStatement		675:28:18774:18774	6532660	1					
ANR	6535604	IfStatement	"if ( ! strcmp ( m2 -> name , m2 -> file ) )"		6532660	0					
ANR	6535605	Condition	"! strcmp ( m2 -> name , m2 -> file )"	1414:7:37722:37749	6532660	0	True				
ANR	6535606	UnaryOperationExpression	"! strcmp ( m2 -> name , m2 -> file )"		6532660	0					
ANR	6535607	UnaryOperator	!		6532660	0					
ANR	6535608	CallExpression	"strcmp ( m2 -> name , m2 -> file )"		6532660	1					
ANR	6535609	Callee	strcmp		6532660	0					
ANR	6535610	Identifier	strcmp		6532660	0					
ANR	6535611	ArgumentList	m2 -> name		6532660	1					
ANR	6535612	Argument	m2 -> name		6532660	0					
ANR	6535613	PtrMemberAccess	m2 -> name		6532660	0					
ANR	6535614	Identifier	m2		6532660	0					
ANR	6535615	Identifier	name		6532660	1					
ANR	6535616	Argument	m2 -> file		6532660	1					
ANR	6535617	PtrMemberAccess	m2 -> file		6532660	0					
ANR	6535618	Identifier	m2		6532660	0					
ANR	6535619	Identifier	file		6532660	1					
ANR	6535620	CompoundStatement		678:4:18840:18886	6532660	1					
ANR	6535621	ExpressionStatement	m2 -> name [ 0 ] = 0	1415:4:37758:37773	6532660	0	True				
ANR	6535622	AssignmentExpression	m2 -> name [ 0 ] = 0		6532660	0		=			
ANR	6535623	ArrayIndexing	m2 -> name [ 0 ]		6532660	0					
ANR	6535624	PtrMemberAccess	m2 -> name		6532660	0					
ANR	6535625	Identifier	m2		6532660	0					
ANR	6535626	Identifier	name		6532660	1					
ANR	6535627	PrimaryExpression	0		6532660	1					
ANR	6535628	PrimaryExpression	0		6532660	1					
ANR	6535629	IdentifierDeclStatement	"const char * slash = r_str_lchr ( m2 -> file , '/' ) ;"	1416:4:37779:37825	6532660	1	True				
ANR	6535630	IdentifierDecl	"* slash = r_str_lchr ( m2 -> file , '/' )"		6532660	0					
ANR	6535631	IdentifierDeclType	const char *		6532660	0					
ANR	6535632	Identifier	slash		6532660	1					
ANR	6535633	AssignmentExpression	"* slash = r_str_lchr ( m2 -> file , '/' )"		6532660	2		=			
ANR	6535634	Identifier	slash		6532660	0					
ANR	6535635	CallExpression	"r_str_lchr ( m2 -> file , '/' )"		6532660	1					
ANR	6535636	Callee	r_str_lchr		6532660	0					
ANR	6535637	Identifier	r_str_lchr		6532660	0					
ANR	6535638	ArgumentList	m2 -> file		6532660	1					
ANR	6535639	Argument	m2 -> file		6532660	0					
ANR	6535640	PtrMemberAccess	m2 -> file		6532660	0					
ANR	6535641	Identifier	m2		6532660	0					
ANR	6535642	Identifier	file		6532660	1					
ANR	6535643	Argument	'/'		6532660	1					
ANR	6535644	PrimaryExpression	'/'		6532660	0					
ANR	6535645	IfStatement	if ( slash )		6532660	2					
ANR	6535646	Condition	slash	1417:8:37835:37839	6532660	0	True				
ANR	6535647	Identifier	slash		6532660	0					
ANR	6535648	CompoundStatement		679:15:18903:18903	6532660	1					
ANR	6535649	ExpressionStatement	"strcpy ( m2 -> name , slash + 1 )"	1418:5:37849:37877	6532660	0	True				
ANR	6535650	CallExpression	"strcpy ( m2 -> name , slash + 1 )"		6532660	0					
ANR	6535651	Callee	strcpy		6532660	0					
ANR	6535652	Identifier	strcpy		6532660	0					
ANR	6535653	ArgumentList	m2 -> name		6532660	1					
ANR	6535654	Argument	m2 -> name		6532660	0					
ANR	6535655	PtrMemberAccess	m2 -> name		6532660	0					
ANR	6535656	Identifier	m2		6532660	0					
ANR	6535657	Identifier	name		6532660	1					
ANR	6535658	Argument	slash + 1		6532660	1					
ANR	6535659	AdditiveExpression	slash + 1		6532660	0		+			
ANR	6535660	Identifier	slash		6532660	0					
ANR	6535661	PrimaryExpression	1		6532660	1					
ANR	6535662	ExpressionStatement	"r_list_append ( list , m2 )"	1422:2:37896:37920	6532660	2	True				
ANR	6535663	CallExpression	"r_list_append ( list , m2 )"		6532660	0					
ANR	6535664	Callee	r_list_append		6532660	0					
ANR	6535665	Identifier	r_list_append		6532660	0					
ANR	6535666	ArgumentList	list		6532660	1					
ANR	6535667	Argument	list		6532660	0					
ANR	6535668	Identifier	list		6532660	0					
ANR	6535669	Argument	m2		6532660	1					
ANR	6535670	Identifier	m2		6532660	0					
ANR	6535671	ExpressionStatement	"r_list_sort ( list , cmp )"	1424:1:37927:37950	6532660	30	True				
ANR	6535672	CallExpression	"r_list_sort ( list , cmp )"		6532660	0					
ANR	6535673	Callee	r_list_sort		6532660	0					
ANR	6535674	Identifier	r_list_sort		6532660	0					
ANR	6535675	ArgumentList	list		6532660	1					
ANR	6535676	Argument	list		6532660	0					
ANR	6535677	Identifier	list		6532660	0					
ANR	6535678	Argument	cmp		6532660	1					
ANR	6535679	Identifier	cmp		6532660	0					
ANR	6535680	ExpressionStatement	r_list_free ( modules )	1425:2:37954:37975	6532660	31	True				
ANR	6535681	CallExpression	r_list_free ( modules )		6532660	0					
ANR	6535682	Callee	r_list_free		6532660	0					
ANR	6535683	Identifier	r_list_free		6532660	0					
ANR	6535684	ArgumentList	modules		6532660	1					
ANR	6535685	Argument	modules		6532660	0					
ANR	6535686	Identifier	modules		6532660	0					
ANR	6535687	ReturnStatement	return list ;	1426:1:37978:37989	6532660	32	True				
ANR	6535688	Identifier	list		6532660	0					
ANR	6535689	Statement	endif	1429:1:37995:37999	6532660	222	True				
ANR	6535690	ReturnType	static int		6532660	1					
ANR	6535691	Identifier	xnu_write_mem_maps_to_buffer		6532660	2					
ANR	6535692	ParameterList	"RBuffer * buffer , RList * mem_maps , int start_offset , vm_offset_t header , int header_end , int segment_command_sz , int * hoffset_out"		6532660	3					
ANR	6535693	Parameter	RBuffer * buffer	738:41:18807:18821	6532660	0	True				
ANR	6535694	ParameterType	RBuffer *		6532660	0					
ANR	6535695	Identifier	buffer		6532660	1					
ANR	6535696	Parameter	RList * mem_maps	738:58:18824:18838	6532660	1	True				
ANR	6535697	ParameterType	RList *		6532660	0					
ANR	6535698	Identifier	mem_maps		6532660	1					
ANR	6535699	Parameter	int start_offset	738:75:18841:18856	6532660	2	True				
ANR	6535700	ParameterType	int		6532660	0					
ANR	6535701	Identifier	start_offset		6532660	1					
ANR	6535702	Parameter	vm_offset_t header	739:1:18860:18877	6532660	3	True				
ANR	6535703	ParameterType	vm_offset_t		6532660	0					
ANR	6535704	Identifier	header		6532660	1					
ANR	6535705	Parameter	int header_end	739:21:18880:18893	6532660	4	True				
ANR	6535706	ParameterType	int		6532660	0					
ANR	6535707	Identifier	header_end		6532660	1					
ANR	6535708	Parameter	int segment_command_sz	739:37:18896:18917	6532660	5	True				
ANR	6535709	ParameterType	int		6532660	0					
ANR	6535710	Identifier	segment_command_sz		6532660	1					
ANR	6535711	Parameter	int * hoffset_out	739:61:18920:18935	6532660	6	True				
ANR	6535712	ParameterType	int *		6532660	0					
ANR	6535713	Identifier	hoffset_out		6532660	1					
ANR	6535714	CFGEntryNode	ENTRY		6532660		True				
ANR	6535715	CFGExitNode	EXIT		6532660		True				
ANR	6535716	InfiniteForNode	true		6532660		True				
ANR	6535717	Symbol	flavors		6532660						
ANR	6535718	Symbol	mr -> name		6532660						
ANR	6535719	Symbol	* map		6532660						
ANR	6535720	Symbol	a -> addr		6532660						
ANR	6535721	Symbol	maxperm		6532660						
ANR	6535722	Symbol	mach_vm_region_recurse		6532660						
ANR	6535723	Symbol	vbr . user_tag		6532660						
ANR	6535724	Symbol	padding_sz		6532660						
ANR	6535725	Symbol	& hoffset		6532660						
ANR	6535726	Symbol	flavors [ i ] . flavor		6532660						
ANR	6535727	Symbol	thread_flavor_array		6532660						
ANR	6535728	Symbol	* mr -> name		6532660						
ANR	6535729	Symbol	path		6532660						
ANR	6535730	Symbol	segment_count		6532660						
ANR	6535731	Symbol	* * mr		6532660						
ANR	6535732	Symbol	RDebugMap		6532660						
ANR	6535733	Symbol	hoffset_out		6532660						
ANR	6535734	Symbol	sc64 -> cmdsize		6532660						
ANR	6535735	Symbol	r_str_rwx_i		6532660						
ANR	6535736	Symbol	procBufferSize		6532660						
ANR	6535737	Symbol	& address		6532660						
ANR	6535738	Symbol	errno		6532660						
ANR	6535739	Symbol	tir . tstate_size		6532660						
ANR	6535740	Symbol	& local_size		6532660						
ANR	6535741	Symbol	proc_regionfilename		6532660						
ANR	6535742	Symbol	process . kp_eproc		6532660						
ANR	6535743	Symbol	rc		6532660						
ANR	6535744	Symbol	& depth		6532660						
ANR	6535745	Symbol	tir . hoffset		6532660						
ANR	6535746	Symbol	size		6532660						
ANR	6535747	Symbol	* tc		6532660						
ANR	6535748	Symbol	info . inheritance		6532660						
ANR	6535749	Symbol	alen		6532660						
ANR	6535750	Symbol	& segment_command_sz		6532660						
ANR	6535751	Symbol	get_kernel_base		6532660						
ANR	6535752	Symbol	hoffset		6532660						
ANR	6535753	Symbol	moduleAt		6532660						
ANR	6535754	Symbol	& local_address		6532660						
ANR	6535755	Symbol	map -> file		6532660						
ANR	6535756	Symbol	mib		6532660						
ANR	6535757	Symbol	xnu_map_free		6532660						
ANR	6535758	Symbol	pathLenth		6532660						
ANR	6535759	Symbol	uid		6532660						
ANR	6535760	Symbol	CTL_KERN		6532660						
ANR	6535761	Symbol	m -> file		6532660						
ANR	6535762	Symbol	VM_MEMORY_IOKIT		6532660						
ANR	6535763	Symbol	a		6532660						
ANR	6535764	Symbol	b		6532660						
ANR	6535765	Symbol	address		6532660						
ANR	6535766	Symbol	sc64 -> nsects		6532660						
ANR	6535767	Symbol	i		6532660						
ANR	6535768	Symbol	m		6532660						
ANR	6535769	Symbol	xwr2rwx		6532660						
ANR	6535770	Symbol	tc		6532660						
ANR	6535771	Symbol	nargs		6532660						
ANR	6535772	Symbol	tir -> tstate_size		6532660						
ANR	6535773	Symbol	uidFromPid		6532660						
ANR	6535774	Symbol	buf		6532660						
ANR	6535775	Symbol	tstate_size		6532660						
ANR	6535776	Symbol	threads_list		6532660						
ANR	6535777	Symbol	& flavors		6532660						
ANR	6535778	Symbol	rdm		6532660						
ANR	6535779	Symbol	start_offset		6532660						
ANR	6535780	Symbol	* iter_args ++		6532660						
ANR	6535781	Symbol	VM_REGION_SUBMAP_INFO_COUNT_64		6532660						
ANR	6535782	Symbol	task_dbg		6532660						
ANR	6535783	Symbol	curr_arg		6532660						
ANR	6535784	Symbol	thread_get_state		6532660						
ANR	6535785	Symbol	foffset		6532660						
ANR	6535786	Symbol	info . user_tag		6532660						
ANR	6535787	Symbol	r_debug_map_clone		6532660						
ANR	6535788	Symbol	dest		6532660						
ANR	6535789	Symbol	tid		6532660						
ANR	6535790	Symbol	curr_map -> perm		6532660						
ANR	6535791	Symbol	strlen		6532660						
ANR	6535792	Symbol	maxprot		6532660						
ANR	6535793	Symbol	KERN_SUCCESS		6532660						
ANR	6535794	Symbol	* psname		6532660						
ANR	6535795	Symbol	tir		6532660						
ANR	6535796	Symbol	info		6532660						
ANR	6535797	Symbol	tir -> hoffset		6532660						
ANR	6535798	Symbol	ret		6532660						
ANR	6535799	Symbol	osize		6532660						
ANR	6535800	Symbol	sc64 -> vmsize		6532660						
ANR	6535801	Symbol	& info		6532660						
ANR	6535802	Symbol	info . is_submap		6532660						
ANR	6535803	Symbol	* * sc64		6532660						
ANR	6535804	Symbol	R_BETWEEN		6532660						
ANR	6535805	Symbol	sc64 -> segname		6532660						
ANR	6535806	Symbol	count		6532660						
ANR	6535807	Symbol	psname		6532660						
ANR	6535808	Symbol	vm_region_recurse_64		6532660						
ANR	6535809	Symbol	start_args		6532660						
ANR	6535810	Symbol	sc64 -> vmaddr		6532660						
ANR	6535811	Symbol	tir -> flavors		6532660						
ANR	6535812	Symbol	only_modules		6532660						
ANR	6535813	Symbol	list		6532660						
ANR	6535814	Symbol	modules		6532660						
ANR	6535815	Symbol	flavor		6532660						
ANR	6535816	Symbol	pid_to_task		6532660						
ANR	6535817	Symbol	argmax		6532660						
ANR	6535818	Symbol	port		6532660						
ANR	6535819	Symbol	tmp_size		6532660						
ANR	6535820	Symbol	map -> addr_end		6532660						
ANR	6535821	Symbol	& argmax		6532660						
ANR	6535822	Symbol	module_name		6532660						
ANR	6535823	Symbol	task_for_pid		6532660						
ANR	6535824	Symbol	* iter_args		6532660						
ANR	6535825	Symbol	& flavors [ i ] . count		6532660						
ANR	6535826	Symbol	* psnamelen		6532660						
ANR	6535827	Symbol	KERN_ARGMAX		6532660						
ANR	6535828	Symbol	* procargs		6532660						
ANR	6535829	Symbol	foo		6532660						
ANR	6535830	Symbol	KERN_PROCARGS2		6532660						
ANR	6535831	Symbol	calloc		6532660						
ANR	6535832	Symbol	& procBufferSize		6532660						
ANR	6535833	Symbol	coredump_nflavors		6532660						
ANR	6535834	Symbol	* hoffset_out		6532660						
ANR	6535835	Symbol	& nargs		6532660						
ANR	6535836	Symbol	* depthstr		6532660						
ANR	6535837	Symbol	* * m2		6532660						
ANR	6535838	Symbol	MACH_VM_MIN_ADDRESS		6532660						
ANR	6535839	Symbol	tir -> header		6532660						
ANR	6535840	Symbol	m2 -> name		6532660						
ANR	6535841	Symbol	sysctlResult		6532660						
ANR	6535842	Symbol	* sc64		6532660						
ANR	6535843	Symbol	tstate		6532660						
ANR	6535844	Symbol	tir . header		6532660						
ANR	6535845	Symbol	list -> free		6532660						
ANR	6535846	Symbol	header_size		6532660						
ANR	6535847	Symbol	false		6532660						
ANR	6535848	Symbol	info_count		6532660						
ANR	6535849	Symbol	command_size		6532660						
ANR	6535850	Symbol	* dbg		6532660						
ANR	6535851	Symbol	info . max_protection		6532660						
ANR	6535852	Symbol	COMMAND_SIZE		6532660						
ANR	6535853	Symbol	LC_THREAD		6532660						
ANR	6535854	Symbol	depthstr		6532660						
ANR	6535855	Symbol	FALSE		6532660						
ANR	6535856	Symbol	strdup		6532660						
ANR	6535857	Symbol	psnamelen		6532660						
ANR	6535858	Symbol	rdm -> name		6532660						
ANR	6535859	Symbol	base		6532660						
ANR	6535860	Symbol	flavors [ i ] . count		6532660						
ANR	6535861	Symbol	vmoffset		6532660						
ANR	6535862	Symbol	* m2		6532660						
ANR	6535863	Symbol	mr -> file		6532660						
ANR	6535864	Symbol	sc64 -> maxprot		6532660						
ANR	6535865	Symbol	xfer_foffset		6532660						
ANR	6535866	Symbol	end_args		6532660						
ANR	6535867	Symbol	tc -> cmdsize		6532660						
ANR	6535868	Symbol	KERN_PROC_PID		6532660						
ANR	6535869	Symbol	VM_PROT_READ		6532660						
ANR	6535870	Symbol	* hoffset		6532660						
ANR	6535871	Symbol	r_debug_map_new		6532660						
ANR	6535872	Symbol	procargs		6532660						
ANR	6535873	Symbol	iter		6532660						
ANR	6535874	Symbol	KERN_PROC		6532660						
ANR	6535875	Symbol	* m2 -> name		6532660						
ANR	6535876	Symbol	* mib		6532660						
ANR	6535877	Symbol	sysctl		6532660						
ANR	6535878	Symbol	sc64		6532660						
ANR	6535879	Symbol	tc -> cmd		6532660						
ANR	6535880	Symbol	xfer_size		6532660						
ANR	6535881	Symbol	R_NEWCOPY		6532660						
ANR	6535882	Symbol	map -> addr		6532660						
ANR	6535883	Symbol	mem_maps_buffer		6532660						
ANR	6535884	Symbol	iter_args		6532660						
ANR	6535885	Symbol	tirp		6532660						
ANR	6535886	Symbol	mach_vm_read		6532660						
ANR	6535887	Symbol	vbr		6532660						
ANR	6535888	Symbol	cmp		6532660						
ANR	6535889	Symbol	* sc64 -> segname		6532660						
ANR	6535890	Symbol	process . kp_eproc . e_ucred		6532660						
ANR	6535891	Symbol	* mr		6532660						
ANR	6535892	Symbol	map -> name		6532660						
ANR	6535893	Symbol	INT_MAX		6532660						
ANR	6535894	Symbol	xnu_dbg_modules		6532660						
ANR	6535895	Symbol	* thread		6532660						
ANR	6535896	Symbol	LC_SEGMENT_64		6532660						
ANR	6535897	Symbol	info . protection		6532660						
ANR	6535898	Symbol	map		6532660						
ANR	6535899	Symbol	malloc		6532660						
ANR	6535900	Symbol	m -> name		6532660						
ANR	6535901	Symbol	naddr		6532660						
ANR	6535902	Symbol	m2		6532660						
ANR	6535903	Symbol	sc64 -> initprot		6532660						
ANR	6535904	Symbol	xnu_write_mem_maps_to_buffer		6532660						
ANR	6535905	Symbol	kr		6532660						
ANR	6535906	Symbol	* flavors		6532660						
ANR	6535907	Symbol	& size		6532660						
ANR	6535908	Symbol	mach_port_deallocate		6532660						
ANR	6535909	Symbol	EINVAL		6532660						
ANR	6535910	Symbol	dbg -> maps		6532660						
ANR	6535911	Symbol	depth		6532660						
ANR	6535912	Symbol	dbg -> pid		6532660						
ANR	6535913	Symbol	* list		6532660						
ANR	6535914	Symbol	r_buf_append_bytes		6532660						
ANR	6535915	Symbol	thread -> port		6532660						
ANR	6535916	Symbol	r_list_length		6532660						
ANR	6535917	Symbol	& mach_header_sz		6532660						
ANR	6535918	Symbol	& tir		6532660						
ANR	6535919	Symbol	curr_map		6532660						
ANR	6535920	Symbol	pid		6532660						
ANR	6535921	Symbol	xnu_get_vmmap_entries_for_pid		6532660						
ANR	6535922	Symbol	process . kp_eproc . e_ucred . cr_uid		6532660						
ANR	6535923	Symbol	curr_map -> addr		6532660						
ANR	6535924	Symbol	* ( coredump_thread_state_flavor_t * ) ( header + hoffset )		6532660						
ANR	6535925	Symbol	unparse_inheritance		6532660						
ANR	6535926	Symbol	buffer		6532660						
ANR	6535927	Symbol	r_buf_new		6532660						
ANR	6535928	Symbol	strcmp		6532660						
ANR	6535929	Symbol	NULL		6532660						
ANR	6535930	Symbol	mr		6532660						
ANR	6535931	Symbol	dbg		6532660						
ANR	6535932	Symbol	tir . flavors		6532660						
ANR	6535933	Symbol	mach_header_sz		6532660						
ANR	6535934	Symbol	* header		6532660						
ANR	6535935	Symbol	& process		6532660						
ANR	6535936	Symbol	task		6532660						
ANR	6535937	Symbol	& info_count		6532660						
ANR	6535938	Symbol	r_str_lchr		6532660						
ANR	6535939	Symbol	local_address		6532660						
ANR	6535940	Symbol	mach_task_self		6532660						
ANR	6535941	Symbol	true		6532660						
ANR	6535942	Symbol	header		6532660						
ANR	6535943	Symbol	xnu_thread_list		6532660						
ANR	6535944	Symbol	sc64 -> cmd		6532660						
ANR	6535945	Symbol	* tir		6532660						
ANR	6535946	Symbol	header_end		6532660						
ANR	6535947	Symbol	* ret		6532660						
ANR	6535948	Symbol	error		6532660						
ANR	6535949	Symbol	b -> addr		6532660						
ANR	6535950	Symbol	m2 -> file		6532660						
ANR	6535951	Symbol	KERNEL_LOWER		6532660						
ANR	6535952	Symbol	addr		6532660						
ANR	6535953	Symbol	mr -> shared		6532660						
ANR	6535954	Symbol	local_size		6532660						
ANR	6535955	Symbol	padding		6532660						
ANR	6535956	Symbol	r_debug_pid_new		6532660						
ANR	6535957	Symbol	mem_maps		6532660						
ANR	6535958	Symbol	process		6532660						
ANR	6535959	Symbol	_a		6532660						
ANR	6535960	Symbol	* maxperm		6532660						
ANR	6535961	Symbol	_b		6532660						
ANR	6535962	Symbol	* rdm		6532660						
ANR	6535963	Symbol	* curr_map		6532660						
ANR	6535964	Symbol	& naddr		6532660						
ANR	6535965	Symbol	iter2		6532660						
ANR	6535966	Symbol	IMAGE_OFFSET		6532660						
ANR	6535967	Symbol	thread		6532660						
ANR	6535968	Symbol	round_page		6532660						
ANR	6535969	Symbol	* a		6532660						
ANR	6535970	Symbol	* b		6532660						
ANR	6535971	Symbol	& task		6532660						
ANR	6535972	Symbol	* module_name		6532660						
ANR	6535973	Symbol	* i		6532660						
ANR	6535974	Symbol	segment_command_sz		6532660						
ANR	6535975	Symbol	* m		6532660						
ANR	6535976	Symbol	slash		6532660						
ANR	6535977	Symbol	curr_map -> size		6532660						
ANR	6535978	Symbol	r_list_new		6532660						
