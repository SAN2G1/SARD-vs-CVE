command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1062922	File	data/converged/CVE-2019-16718~_radare2/cmd_zign.c								
ANR	1062923	DeclStmt									
ANR	1062924	Decl							const char	const char * [ ]	help_msg_z
ANR	1062925	DeclStmt									
ANR	1062926	Decl							const char	const char * [ ]	help_msg_z_slash
ANR	1062927	DeclStmt									
ANR	1062928	Decl							const char	const char * [ ]	help_msg_za
ANR	1062929	DeclStmt									
ANR	1062930	Decl							const char	const char * [ ]	help_msg_zf
ANR	1062931	DeclStmt									
ANR	1062932	Decl							const char	const char * [ ]	help_msg_zo
ANR	1062933	DeclStmt									
ANR	1062934	Decl							const char	const char * [ ]	help_msg_zs
ANR	1062935	DeclStmt									
ANR	1062936	Decl							const char	const char * [ ]	help_msg_zc
ANR	1062937	Function	cmd_zign_init	85:0:3059:3361							
ANR	1062938	FunctionDef	cmd_zign_init (RCore * core)		1062937	0					
ANR	1062939	CompoundStatement		85:39:3098:3361	1062937	0					
ANR	1062940	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , z )"	86:1:3101:3132	1062937	0	True				
ANR	1062941	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , z )"		1062937	0					
ANR	1062942	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062943	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062944	ArgumentList	core		1062937	1					
ANR	1062945	Argument	core		1062937	0					
ANR	1062946	Identifier	core		1062937	0					
ANR	1062947	Argument	z		1062937	1					
ANR	1062948	Identifier	z		1062937	0					
ANR	1062949	Statement	DEFINE_CMD_DESCRIPTOR_SPECIAL	87:1:3135:3163	1062937	1	True				
ANR	1062950	Statement	(	87:31:3165:3165	1062937	2	True				
ANR	1062951	Statement	core	87:32:3166:3169	1062937	3	True				
ANR	1062952	Statement	","	87:36:3170:3170	1062937	4	True				
ANR	1062953	Statement	z	87:38:3172:3172	1062937	5	True				
ANR	1062954	Statement	/	87:39:3173:3173	1062937	6	True				
ANR	1062955	Statement	","	87:40:3174:3174	1062937	7	True				
ANR	1062956	Statement	z_slash	87:42:3176:3182	1062937	8	True				
ANR	1062957	Statement	)	87:49:3183:3183	1062937	9	True				
ANR	1062958	ExpressionStatement		87:50:3184:3184	1062937	10	True				
ANR	1062959	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , za )"	88:1:3187:3219	1062937	11	True				
ANR	1062960	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , za )"		1062937	0					
ANR	1062961	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062962	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062963	ArgumentList	core		1062937	1					
ANR	1062964	Argument	core		1062937	0					
ANR	1062965	Identifier	core		1062937	0					
ANR	1062966	Argument	za		1062937	1					
ANR	1062967	Identifier	za		1062937	0					
ANR	1062968	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , zf )"	89:1:3222:3254	1062937	12	True				
ANR	1062969	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , zf )"		1062937	0					
ANR	1062970	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062971	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062972	ArgumentList	core		1062937	1					
ANR	1062973	Argument	core		1062937	0					
ANR	1062974	Identifier	core		1062937	0					
ANR	1062975	Argument	zf		1062937	1					
ANR	1062976	Identifier	zf		1062937	0					
ANR	1062977	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , zo )"	90:1:3257:3289	1062937	13	True				
ANR	1062978	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , zo )"		1062937	0					
ANR	1062979	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062980	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062981	ArgumentList	core		1062937	1					
ANR	1062982	Argument	core		1062937	0					
ANR	1062983	Identifier	core		1062937	0					
ANR	1062984	Argument	zo		1062937	1					
ANR	1062985	Identifier	zo		1062937	0					
ANR	1062986	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , zs )"	91:1:3292:3324	1062937	14	True				
ANR	1062987	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , zs )"		1062937	0					
ANR	1062988	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062989	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062990	ArgumentList	core		1062937	1					
ANR	1062991	Argument	core		1062937	0					
ANR	1062992	Identifier	core		1062937	0					
ANR	1062993	Argument	zs		1062937	1					
ANR	1062994	Identifier	zs		1062937	0					
ANR	1062995	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , zc )"	92:1:3327:3359	1062937	15	True				
ANR	1062996	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , zc )"		1062937	0					
ANR	1062997	Callee	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062998	Identifier	DEFINE_CMD_DESCRIPTOR		1062937	0					
ANR	1062999	ArgumentList	core		1062937	1					
ANR	1063000	Argument	core		1062937	0					
ANR	1063001	Identifier	core		1062937	0					
ANR	1063002	Argument	zc		1062937	1					
ANR	1063003	Identifier	zc		1062937	0					
ANR	1063004	ReturnType	static void		1062937	1					
ANR	1063005	Identifier	cmd_zign_init		1062937	2					
ANR	1063006	ParameterList	RCore * core		1062937	3					
ANR	1063007	Parameter	RCore * core	85:26:3085:3095	1062937	0	True				
ANR	1063008	ParameterType	RCore *		1062937	0					
ANR	1063009	Identifier	core		1062937	1					
ANR	1063010	CFGEntryNode	ENTRY		1062937		True				
ANR	1063011	CFGExitNode	EXIT		1062937		True				
ANR	1063012	Symbol	core		1062937						
ANR	1063013	Symbol	zo		1062937						
ANR	1063014	Symbol	za		1062937						
ANR	1063015	Symbol	zs		1062937						
ANR	1063016	Symbol	zc		1062937						
ANR	1063017	Symbol	z		1062937						
ANR	1063018	Symbol	zf		1062937						
ANR	1063019	Function	addFcnHash	95:0:3364:3544							
ANR	1063020	FunctionDef	"addFcnHash (RCore * core , RAnalFunction * fcn , const char * name)"		1063019	0					
ANR	1063021	CompoundStatement		95:74:3438:3544	1063019	0					
ANR	1063022	ExpressionStatement	"r_return_val_if_fail ( core && fcn && name , false )"	96:1:3441:3490	1063019	0	True				
ANR	1063023	CallExpression	"r_return_val_if_fail ( core && fcn && name , false )"		1063019	0					
ANR	1063024	Callee	r_return_val_if_fail		1063019	0					
ANR	1063025	Identifier	r_return_val_if_fail		1063019	0					
ANR	1063026	ArgumentList	core && fcn && name		1063019	1					
ANR	1063027	Argument	core && fcn && name		1063019	0					
ANR	1063028	AndExpression	core && fcn && name		1063019	0		&&			
ANR	1063029	Identifier	core		1063019	0					
ANR	1063030	AndExpression	fcn && name		1063019	1		&&			
ANR	1063031	Identifier	fcn		1063019	0					
ANR	1063032	Identifier	name		1063019	1					
ANR	1063033	Argument	false		1063019	1					
ANR	1063034	Identifier	false		1063019	0					
ANR	1063035	ReturnStatement	"return r_sign_add_bb_hash ( core -> anal , fcn , name ) ;"	97:1:3493:3542	1063019	1	True				
ANR	1063036	CallExpression	"r_sign_add_bb_hash ( core -> anal , fcn , name )"		1063019	0					
ANR	1063037	Callee	r_sign_add_bb_hash		1063019	0					
ANR	1063038	Identifier	r_sign_add_bb_hash		1063019	0					
ANR	1063039	ArgumentList	core -> anal		1063019	1					
ANR	1063040	Argument	core -> anal		1063019	0					
ANR	1063041	PtrMemberAccess	core -> anal		1063019	0					
ANR	1063042	Identifier	core		1063019	0					
ANR	1063043	Identifier	anal		1063019	1					
ANR	1063044	Argument	fcn		1063019	1					
ANR	1063045	Identifier	fcn		1063019	0					
ANR	1063046	Argument	name		1063019	2					
ANR	1063047	Identifier	name		1063019	0					
ANR	1063048	ReturnType	static bool		1063019	1					
ANR	1063049	Identifier	addFcnHash		1063019	2					
ANR	1063050	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063019	3					
ANR	1063051	Parameter	RCore * core	95:23:3387:3397	1063019	0	True				
ANR	1063052	ParameterType	RCore *		1063019	0					
ANR	1063053	Identifier	core		1063019	1					
ANR	1063054	Parameter	RAnalFunction * fcn	95:36:3400:3417	1063019	1	True				
ANR	1063055	ParameterType	RAnalFunction *		1063019	0					
ANR	1063056	Identifier	fcn		1063019	1					
ANR	1063057	Parameter	const char * name	95:56:3420:3435	1063019	2	True				
ANR	1063058	ParameterType	const char *		1063019	0					
ANR	1063059	Identifier	name		1063019	1					
ANR	1063060	CFGEntryNode	ENTRY		1063019		True				
ANR	1063061	CFGExitNode	EXIT		1063019		True				
ANR	1063062	Symbol	fcn		1063019						
ANR	1063063	Symbol	core		1063019						
ANR	1063064	Symbol	name		1063019						
ANR	1063065	Symbol	false		1063019						
ANR	1063066	Symbol	* core		1063019						
ANR	1063067	Symbol	r_sign_add_bb_hash		1063019						
ANR	1063068	Symbol	core -> anal		1063019						
ANR	1063069	Function	addFcnBytes	100:0:3547:4196							
ANR	1063070	FunctionDef	"addFcnBytes (RCore * core , RAnalFunction * fcn , const char * name)"		1063069	0					
ANR	1063071	CompoundStatement		100:75:3622:4196	1063069	0					
ANR	1063072	ExpressionStatement	"r_return_val_if_fail ( core && fcn && name , false )"	101:1:3625:3674	1063069	0	True				
ANR	1063073	CallExpression	"r_return_val_if_fail ( core && fcn && name , false )"		1063069	0					
ANR	1063074	Callee	r_return_val_if_fail		1063069	0					
ANR	1063075	Identifier	r_return_val_if_fail		1063069	0					
ANR	1063076	ArgumentList	core && fcn && name		1063069	1					
ANR	1063077	Argument	core && fcn && name		1063069	0					
ANR	1063078	AndExpression	core && fcn && name		1063069	0		&&			
ANR	1063079	Identifier	core		1063069	0					
ANR	1063080	AndExpression	fcn && name		1063069	1		&&			
ANR	1063081	Identifier	fcn		1063069	0					
ANR	1063082	Identifier	name		1063069	1					
ANR	1063083	Argument	false		1063069	1					
ANR	1063084	Identifier	false		1063069	0					
ANR	1063085	IdentifierDeclStatement	"int maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" ) ;"	102:1:3677:3732	1063069	1	True				
ANR	1063086	IdentifierDecl	"maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" )"		1063069	0					
ANR	1063087	IdentifierDeclType	int		1063069	0					
ANR	1063088	Identifier	maxsz		1063069	1					
ANR	1063089	AssignmentExpression	"maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" )"		1063069	2		=			
ANR	1063090	Identifier	maxsz		1063069	0					
ANR	1063091	CallExpression	"r_config_get_i ( core -> config , ""zign.maxsz"" )"		1063069	1					
ANR	1063092	Callee	r_config_get_i		1063069	0					
ANR	1063093	Identifier	r_config_get_i		1063069	0					
ANR	1063094	ArgumentList	core -> config		1063069	1					
ANR	1063095	Argument	core -> config		1063069	0					
ANR	1063096	PtrMemberAccess	core -> config		1063069	0					
ANR	1063097	Identifier	core		1063069	0					
ANR	1063098	Identifier	config		1063069	1					
ANR	1063099	Argument	"""zign.maxsz"""		1063069	1					
ANR	1063100	PrimaryExpression	"""zign.maxsz"""		1063069	0					
ANR	1063101	IdentifierDeclStatement	int fcnlen = r_anal_fcn_realsize ( fcn ) ;	103:1:3735:3773	1063069	2	True				
ANR	1063102	IdentifierDecl	fcnlen = r_anal_fcn_realsize ( fcn )		1063069	0					
ANR	1063103	IdentifierDeclType	int		1063069	0					
ANR	1063104	Identifier	fcnlen		1063069	1					
ANR	1063105	AssignmentExpression	fcnlen = r_anal_fcn_realsize ( fcn )		1063069	2		=			
ANR	1063106	Identifier	fcnlen		1063069	0					
ANR	1063107	CallExpression	r_anal_fcn_realsize ( fcn )		1063069	1					
ANR	1063108	Callee	r_anal_fcn_realsize		1063069	0					
ANR	1063109	Identifier	r_anal_fcn_realsize		1063069	0					
ANR	1063110	ArgumentList	fcn		1063069	1					
ANR	1063111	Argument	fcn		1063069	0					
ANR	1063112	Identifier	fcn		1063069	0					
ANR	1063113	IdentifierDeclStatement	"int len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz ) ;"	104:1:3776:3829	1063069	3	True				
ANR	1063114	IdentifierDecl	"len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1063069	0					
ANR	1063115	IdentifierDeclType	int		1063069	0					
ANR	1063116	Identifier	len		1063069	1					
ANR	1063117	AssignmentExpression	"len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1063069	2		=			
ANR	1063118	Identifier	len		1063069	0					
ANR	1063119	CallExpression	"R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1063069	1					
ANR	1063120	Callee	R_MIN		1063069	0					
ANR	1063121	Identifier	R_MIN		1063069	0					
ANR	1063122	ArgumentList	core -> io -> addrbytes * fcnlen		1063069	1					
ANR	1063123	Argument	core -> io -> addrbytes * fcnlen		1063069	0					
ANR	1063124	MultiplicativeExpression	core -> io -> addrbytes * fcnlen		1063069	0		*			
ANR	1063125	PtrMemberAccess	core -> io -> addrbytes		1063069	0					
ANR	1063126	PtrMemberAccess	core -> io		1063069	0					
ANR	1063127	Identifier	core		1063069	0					
ANR	1063128	Identifier	io		1063069	1					
ANR	1063129	Identifier	addrbytes		1063069	1					
ANR	1063130	Identifier	fcnlen		1063069	1					
ANR	1063131	Argument	maxsz		1063069	1					
ANR	1063132	Identifier	maxsz		1063069	0					
ANR	1063133	IdentifierDeclStatement	ut8 * buf = malloc ( len ) ;	106:1:3833:3856	1063069	4	True				
ANR	1063134	IdentifierDecl	* buf = malloc ( len )		1063069	0					
ANR	1063135	IdentifierDeclType	ut8 *		1063069	0					
ANR	1063136	Identifier	buf		1063069	1					
ANR	1063137	AssignmentExpression	* buf = malloc ( len )		1063069	2		=			
ANR	1063138	Identifier	buf		1063069	0					
ANR	1063139	CallExpression	malloc ( len )		1063069	1					
ANR	1063140	Callee	malloc		1063069	0					
ANR	1063141	Identifier	malloc		1063069	0					
ANR	1063142	ArgumentList	len		1063069	1					
ANR	1063143	Argument	len		1063069	0					
ANR	1063144	Identifier	len		1063069	0					
ANR	1063145	IfStatement	if ( ! buf )		1063069	5					
ANR	1063146	Condition	! buf	107:5:3863:3866	1063069	0	True				
ANR	1063147	UnaryOperationExpression	! buf		1063069	0					
ANR	1063148	UnaryOperator	!		1063069	0					
ANR	1063149	Identifier	buf		1063069	1					
ANR	1063150	CompoundStatement		8:11:246:246	1063069	1					
ANR	1063151	ReturnStatement	return false ;	108:2:3873:3885	1063069	0	True				
ANR	1063152	Identifier	false		1063069	0					
ANR	1063153	IdentifierDeclStatement	bool retval = false ;	111:1:3892:3911	1063069	6	True				
ANR	1063154	IdentifierDecl	retval = false		1063069	0					
ANR	1063155	IdentifierDeclType	bool		1063069	0					
ANR	1063156	Identifier	retval		1063069	1					
ANR	1063157	AssignmentExpression	retval = false		1063069	2		=			
ANR	1063158	Identifier	false		1063069	0					
ANR	1063159	Identifier	false		1063069	1					
ANR	1063160	IfStatement	"if ( r_io_is_valid_offset ( core -> io , fcn -> addr , 0 ) )"		1063069	7					
ANR	1063161	Condition	"r_io_is_valid_offset ( core -> io , fcn -> addr , 0 )"	112:5:3918:3962	1063069	0	True				
ANR	1063162	CallExpression	"r_io_is_valid_offset ( core -> io , fcn -> addr , 0 )"		1063069	0					
ANR	1063163	Callee	r_io_is_valid_offset		1063069	0					
ANR	1063164	Identifier	r_io_is_valid_offset		1063069	0					
ANR	1063165	ArgumentList	core -> io		1063069	1					
ANR	1063166	Argument	core -> io		1063069	0					
ANR	1063167	PtrMemberAccess	core -> io		1063069	0					
ANR	1063168	Identifier	core		1063069	0					
ANR	1063169	Identifier	io		1063069	1					
ANR	1063170	Argument	fcn -> addr		1063069	1					
ANR	1063171	PtrMemberAccess	fcn -> addr		1063069	0					
ANR	1063172	Identifier	fcn		1063069	0					
ANR	1063173	Identifier	addr		1063069	1					
ANR	1063174	Argument	0		1063069	2					
ANR	1063175	PrimaryExpression	0		1063069	0					
ANR	1063176	CompoundStatement		13:52:342:342	1063069	1					
ANR	1063177	ExpressionStatement	"( void ) r_io_read_at ( core -> io , fcn -> addr , buf , len )"	113:2:3969:4019	1063069	0	True				
ANR	1063178	CastExpression	"( void ) r_io_read_at ( core -> io , fcn -> addr , buf , len )"		1063069	0					
ANR	1063179	CastTarget	void		1063069	0					
ANR	1063180	CallExpression	"r_io_read_at ( core -> io , fcn -> addr , buf , len )"		1063069	1					
ANR	1063181	Callee	r_io_read_at		1063069	0					
ANR	1063182	Identifier	r_io_read_at		1063069	0					
ANR	1063183	ArgumentList	core -> io		1063069	1					
ANR	1063184	Argument	core -> io		1063069	0					
ANR	1063185	PtrMemberAccess	core -> io		1063069	0					
ANR	1063186	Identifier	core		1063069	0					
ANR	1063187	Identifier	io		1063069	1					
ANR	1063188	Argument	fcn -> addr		1063069	1					
ANR	1063189	PtrMemberAccess	fcn -> addr		1063069	0					
ANR	1063190	Identifier	fcn		1063069	0					
ANR	1063191	Identifier	addr		1063069	1					
ANR	1063192	Argument	buf		1063069	2					
ANR	1063193	Identifier	buf		1063069	0					
ANR	1063194	Argument	len		1063069	3					
ANR	1063195	Identifier	len		1063069	0					
ANR	1063196	ExpressionStatement	"retval = r_sign_add_anal ( core -> anal , name , len , buf , fcn -> addr )"	114:2:4023:4087	1063069	1	True				
ANR	1063197	AssignmentExpression	"retval = r_sign_add_anal ( core -> anal , name , len , buf , fcn -> addr )"		1063069	0		=			
ANR	1063198	Identifier	retval		1063069	0					
ANR	1063199	CallExpression	"r_sign_add_anal ( core -> anal , name , len , buf , fcn -> addr )"		1063069	1					
ANR	1063200	Callee	r_sign_add_anal		1063069	0					
ANR	1063201	Identifier	r_sign_add_anal		1063069	0					
ANR	1063202	ArgumentList	core -> anal		1063069	1					
ANR	1063203	Argument	core -> anal		1063069	0					
ANR	1063204	PtrMemberAccess	core -> anal		1063069	0					
ANR	1063205	Identifier	core		1063069	0					
ANR	1063206	Identifier	anal		1063069	1					
ANR	1063207	Argument	name		1063069	1					
ANR	1063208	Identifier	name		1063069	0					
ANR	1063209	Argument	len		1063069	2					
ANR	1063210	Identifier	len		1063069	0					
ANR	1063211	Argument	buf		1063069	3					
ANR	1063212	Identifier	buf		1063069	0					
ANR	1063213	Argument	fcn -> addr		1063069	4					
ANR	1063214	PtrMemberAccess	fcn -> addr		1063069	0					
ANR	1063215	Identifier	fcn		1063069	0					
ANR	1063216	Identifier	addr		1063069	1					
ANR	1063217	ElseStatement	else		1063069	0					
ANR	1063218	CompoundStatement		16:8:474:474	1063069	0					
ANR	1063219	Statement	eprintf	116:2:4101:4107	1063069	0	True				
ANR	1063220	Statement	(	116:10:4109:4109	1063069	1	True				
ANR	1063221	Statement	"""error: cannot read at 0x%08"""	116:11:4110:4138	1063069	2	True				
ANR	1063222	Statement	PFMT64x	116:40:4139:4145	1063069	3	True				
ANR	1063223	Statement	"""\\n"""	116:47:4146:4149	1063069	4	True				
ANR	1063224	Statement	","	116:51:4150:4150	1063069	5	True				
ANR	1063225	Statement	fcn	116:53:4152:4154	1063069	6	True				
ANR	1063226	Statement	->	116:56:4155:4156	1063069	7	True				
ANR	1063227	Statement	addr	116:58:4157:4160	1063069	8	True				
ANR	1063228	Statement	)	116:62:4161:4161	1063069	9	True				
ANR	1063229	ExpressionStatement		116:63:4162:4162	1063069	10	True				
ANR	1063230	ExpressionStatement	free ( buf )	118:1:4168:4178	1063069	8	True				
ANR	1063231	CallExpression	free ( buf )		1063069	0					
ANR	1063232	Callee	free		1063069	0					
ANR	1063233	Identifier	free		1063069	0					
ANR	1063234	ArgumentList	buf		1063069	1					
ANR	1063235	Argument	buf		1063069	0					
ANR	1063236	Identifier	buf		1063069	0					
ANR	1063237	ReturnStatement	return retval ;	119:1:4181:4194	1063069	9	True				
ANR	1063238	Identifier	retval		1063069	0					
ANR	1063239	ReturnType	static bool		1063069	1					
ANR	1063240	Identifier	addFcnBytes		1063069	2					
ANR	1063241	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063069	3					
ANR	1063242	Parameter	RCore * core	100:24:3571:3581	1063069	0	True				
ANR	1063243	ParameterType	RCore *		1063069	0					
ANR	1063244	Identifier	core		1063069	1					
ANR	1063245	Parameter	RAnalFunction * fcn	100:37:3584:3601	1063069	1	True				
ANR	1063246	ParameterType	RAnalFunction *		1063069	0					
ANR	1063247	Identifier	fcn		1063069	1					
ANR	1063248	Parameter	const char * name	100:57:3604:3619	1063069	2	True				
ANR	1063249	ParameterType	const char *		1063069	0					
ANR	1063250	Identifier	name		1063069	1					
ANR	1063251	CFGEntryNode	ENTRY		1063069		True				
ANR	1063252	CFGExitNode	EXIT		1063069		True				
ANR	1063253	Symbol	core -> config		1063069						
ANR	1063254	Symbol	malloc		1063069						
ANR	1063255	Symbol	r_io_is_valid_offset		1063069						
ANR	1063256	Symbol	* fcn		1063069						
ANR	1063257	Symbol	maxsz		1063069						
ANR	1063258	Symbol	false		1063069						
ANR	1063259	Symbol	* core		1063069						
ANR	1063260	Symbol	core -> io -> addrbytes		1063069						
ANR	1063261	Symbol	R_MIN		1063069						
ANR	1063262	Symbol	r_sign_add_anal		1063069						
ANR	1063263	Symbol	core -> anal		1063069						
ANR	1063264	Symbol	retval		1063069						
ANR	1063265	Symbol	fcn		1063069						
ANR	1063266	Symbol	core		1063069						
ANR	1063267	Symbol	fcnlen		1063069						
ANR	1063268	Symbol	r_anal_fcn_realsize		1063069						
ANR	1063269	Symbol	* core -> io		1063069						
ANR	1063270	Symbol	buf		1063069						
ANR	1063271	Symbol	len		1063069						
ANR	1063272	Symbol	core -> io		1063069						
ANR	1063273	Symbol	r_config_get_i		1063069						
ANR	1063274	Symbol	name		1063069						
ANR	1063275	Symbol	fcn -> addr		1063069						
ANR	1063276	Symbol	* * core		1063069						
ANR	1063277	Function	addFcnGraph	122:0:4199:4602							
ANR	1063278	FunctionDef	"addFcnGraph (RCore * core , RAnalFunction * fcn , const char * name)"		1063277	0					
ANR	1063279	CompoundStatement		122:75:4274:4602	1063277	0					
ANR	1063280	Statement	RSignGraph	123:1:4277:4286	1063277	0	True				
ANR	1063281	Statement	graph	123:12:4288:4292	1063277	1	True				
ANR	1063282	Statement	=	123:18:4294:4294	1063277	2	True				
ANR	1063283	CompoundStatement		2:20:21:21	1063277	3					
ANR	1063284	Statement	.	124:2:4300:4300	1063277	0	True				
ANR	1063285	Statement	cc	124:3:4301:4302	1063277	1	True				
ANR	1063286	Statement	=	124:6:4304:4304	1063277	2	True				
ANR	1063287	Statement	r_anal_fcn_cc	124:8:4306:4318	1063277	3	True				
ANR	1063288	Statement	(	124:22:4320:4320	1063277	4	True				
ANR	1063289	Statement	core	124:23:4321:4324	1063277	5	True				
ANR	1063290	Statement	->	124:27:4325:4326	1063277	6	True				
ANR	1063291	Statement	anal	124:29:4327:4330	1063277	7	True				
ANR	1063292	Statement	","	124:33:4331:4331	1063277	8	True				
ANR	1063293	Statement	fcn	124:35:4333:4335	1063277	9	True				
ANR	1063294	Statement	)	124:38:4336:4336	1063277	10	True				
ANR	1063295	Statement	","	124:39:4337:4337	1063277	11	True				
ANR	1063296	Statement	.	125:2:4341:4341	1063277	12	True				
ANR	1063297	Statement	nbbs	125:3:4342:4345	1063277	13	True				
ANR	1063298	Statement	=	125:8:4347:4347	1063277	14	True				
ANR	1063299	Statement	r_list_length	125:10:4349:4361	1063277	15	True				
ANR	1063300	Statement	(	125:24:4363:4363	1063277	16	True				
ANR	1063301	Statement	fcn	125:25:4364:4366	1063277	17	True				
ANR	1063302	Statement	->	125:28:4367:4368	1063277	18	True				
ANR	1063303	Statement	bbs	125:30:4369:4371	1063277	19	True				
ANR	1063304	Statement	)	125:33:4372:4372	1063277	20	True				
ANR	1063305	ExpressionStatement		126:2:4376:4376	1063277	4	True				
ANR	1063306	ExpressionStatement	"graph . edges = r_anal_fcn_count_edges ( fcn , & graph . ebbs )"	128:1:4455:4510	1063277	5	True				
ANR	1063307	AssignmentExpression	"graph . edges = r_anal_fcn_count_edges ( fcn , & graph . ebbs )"		1063277	0		=			
ANR	1063308	MemberAccess	graph . edges		1063277	0					
ANR	1063309	Identifier	graph		1063277	0					
ANR	1063310	Identifier	edges		1063277	1					
ANR	1063311	CallExpression	"r_anal_fcn_count_edges ( fcn , & graph . ebbs )"		1063277	1					
ANR	1063312	Callee	r_anal_fcn_count_edges		1063277	0					
ANR	1063313	Identifier	r_anal_fcn_count_edges		1063277	0					
ANR	1063314	ArgumentList	fcn		1063277	1					
ANR	1063315	Argument	fcn		1063277	0					
ANR	1063316	Identifier	fcn		1063277	0					
ANR	1063317	Argument	& graph . ebbs		1063277	1					
ANR	1063318	UnaryOperationExpression	& graph . ebbs		1063277	0					
ANR	1063319	UnaryOperator	&		1063277	0					
ANR	1063320	MemberAccess	graph . ebbs		1063277	1					
ANR	1063321	Identifier	graph		1063277	0					
ANR	1063322	Identifier	ebbs		1063277	1					
ANR	1063323	ExpressionStatement	graph . bbsum = r_anal_fcn_size ( fcn )	129:1:4513:4548	1063277	6	True				
ANR	1063324	AssignmentExpression	graph . bbsum = r_anal_fcn_size ( fcn )		1063277	0		=			
ANR	1063325	MemberAccess	graph . bbsum		1063277	0					
ANR	1063326	Identifier	graph		1063277	0					
ANR	1063327	Identifier	bbsum		1063277	1					
ANR	1063328	CallExpression	r_anal_fcn_size ( fcn )		1063277	1					
ANR	1063329	Callee	r_anal_fcn_size		1063277	0					
ANR	1063330	Identifier	r_anal_fcn_size		1063277	0					
ANR	1063331	ArgumentList	fcn		1063277	1					
ANR	1063332	Argument	fcn		1063277	0					
ANR	1063333	Identifier	fcn		1063277	0					
ANR	1063334	ReturnStatement	"return r_sign_add_graph ( core -> anal , name , graph ) ;"	130:1:4551:4600	1063277	7	True				
ANR	1063335	CallExpression	"r_sign_add_graph ( core -> anal , name , graph )"		1063277	0					
ANR	1063336	Callee	r_sign_add_graph		1063277	0					
ANR	1063337	Identifier	r_sign_add_graph		1063277	0					
ANR	1063338	ArgumentList	core -> anal		1063277	1					
ANR	1063339	Argument	core -> anal		1063277	0					
ANR	1063340	PtrMemberAccess	core -> anal		1063277	0					
ANR	1063341	Identifier	core		1063277	0					
ANR	1063342	Identifier	anal		1063277	1					
ANR	1063343	Argument	name		1063277	1					
ANR	1063344	Identifier	name		1063277	0					
ANR	1063345	Argument	graph		1063277	2					
ANR	1063346	Identifier	graph		1063277	0					
ANR	1063347	ReturnType	static bool		1063277	1					
ANR	1063348	Identifier	addFcnGraph		1063277	2					
ANR	1063349	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063277	3					
ANR	1063350	Parameter	RCore * core	122:24:4223:4233	1063277	0	True				
ANR	1063351	ParameterType	RCore *		1063277	0					
ANR	1063352	Identifier	core		1063277	1					
ANR	1063353	Parameter	RAnalFunction * fcn	122:37:4236:4253	1063277	1	True				
ANR	1063354	ParameterType	RAnalFunction *		1063277	0					
ANR	1063355	Identifier	fcn		1063277	1					
ANR	1063356	Parameter	const char * name	122:57:4256:4271	1063277	2	True				
ANR	1063357	ParameterType	const char *		1063277	0					
ANR	1063358	Identifier	name		1063277	1					
ANR	1063359	CFGEntryNode	ENTRY		1063277		True				
ANR	1063360	CFGExitNode	EXIT		1063277		True				
ANR	1063361	Symbol	r_anal_fcn_size		1063277						
ANR	1063362	Symbol	* core		1063277						
ANR	1063363	Symbol	r_anal_fcn_count_edges		1063277						
ANR	1063364	Symbol	core -> anal		1063277						
ANR	1063365	Symbol	graph		1063277						
ANR	1063366	Symbol	fcn		1063277						
ANR	1063367	Symbol	core		1063277						
ANR	1063368	Symbol	r_sign_add_graph		1063277						
ANR	1063369	Symbol	graph . edges		1063277						
ANR	1063370	Symbol	name		1063277						
ANR	1063371	Symbol	& graph . ebbs		1063277						
ANR	1063372	Symbol	graph . bbsum		1063277						
ANR	1063373	Symbol	& graph		1063277						
ANR	1063374	Function	addFcnXRefs	133:0:4605:4867							
ANR	1063375	FunctionDef	"addFcnXRefs (RCore * core , RAnalFunction * fcn , const char * name)"		1063374	0					
ANR	1063376	CompoundStatement		133:75:4680:4867	1063374	0					
ANR	1063377	IdentifierDeclStatement	bool retval = false ;	134:1:4683:4702	1063374	0	True				
ANR	1063378	IdentifierDecl	retval = false		1063374	0					
ANR	1063379	IdentifierDeclType	bool		1063374	0					
ANR	1063380	Identifier	retval		1063374	1					
ANR	1063381	AssignmentExpression	retval = false		1063374	2		=			
ANR	1063382	Identifier	false		1063374	0					
ANR	1063383	Identifier	false		1063374	1					
ANR	1063384	IdentifierDeclStatement	"RList * xrefs = r_sign_fcn_xrefs ( core -> anal , fcn ) ;"	135:1:4705:4754	1063374	1	True				
ANR	1063385	IdentifierDecl	"* xrefs = r_sign_fcn_xrefs ( core -> anal , fcn )"		1063374	0					
ANR	1063386	IdentifierDeclType	RList *		1063374	0					
ANR	1063387	Identifier	xrefs		1063374	1					
ANR	1063388	AssignmentExpression	"* xrefs = r_sign_fcn_xrefs ( core -> anal , fcn )"		1063374	2		=			
ANR	1063389	Identifier	xrefs		1063374	0					
ANR	1063390	CallExpression	"r_sign_fcn_xrefs ( core -> anal , fcn )"		1063374	1					
ANR	1063391	Callee	r_sign_fcn_xrefs		1063374	0					
ANR	1063392	Identifier	r_sign_fcn_xrefs		1063374	0					
ANR	1063393	ArgumentList	core -> anal		1063374	1					
ANR	1063394	Argument	core -> anal		1063374	0					
ANR	1063395	PtrMemberAccess	core -> anal		1063374	0					
ANR	1063396	Identifier	core		1063374	0					
ANR	1063397	Identifier	anal		1063374	1					
ANR	1063398	Argument	fcn		1063374	1					
ANR	1063399	Identifier	fcn		1063374	0					
ANR	1063400	IfStatement	if ( xrefs )		1063374	2					
ANR	1063401	Condition	xrefs	136:5:4761:4765	1063374	0	True				
ANR	1063402	Identifier	xrefs		1063374	0					
ANR	1063403	CompoundStatement		4:12:87:87	1063374	1					
ANR	1063404	ExpressionStatement	"retval = r_sign_add_xrefs ( core -> anal , name , xrefs )"	137:2:4772:4823	1063374	0	True				
ANR	1063405	AssignmentExpression	"retval = r_sign_add_xrefs ( core -> anal , name , xrefs )"		1063374	0		=			
ANR	1063406	Identifier	retval		1063374	0					
ANR	1063407	CallExpression	"r_sign_add_xrefs ( core -> anal , name , xrefs )"		1063374	1					
ANR	1063408	Callee	r_sign_add_xrefs		1063374	0					
ANR	1063409	Identifier	r_sign_add_xrefs		1063374	0					
ANR	1063410	ArgumentList	core -> anal		1063374	1					
ANR	1063411	Argument	core -> anal		1063374	0					
ANR	1063412	PtrMemberAccess	core -> anal		1063374	0					
ANR	1063413	Identifier	core		1063374	0					
ANR	1063414	Identifier	anal		1063374	1					
ANR	1063415	Argument	name		1063374	1					
ANR	1063416	Identifier	name		1063374	0					
ANR	1063417	Argument	xrefs		1063374	2					
ANR	1063418	Identifier	xrefs		1063374	0					
ANR	1063419	ExpressionStatement	r_list_free ( xrefs )	138:2:4827:4846	1063374	1	True				
ANR	1063420	CallExpression	r_list_free ( xrefs )		1063374	0					
ANR	1063421	Callee	r_list_free		1063374	0					
ANR	1063422	Identifier	r_list_free		1063374	0					
ANR	1063423	ArgumentList	xrefs		1063374	1					
ANR	1063424	Argument	xrefs		1063374	0					
ANR	1063425	Identifier	xrefs		1063374	0					
ANR	1063426	ReturnStatement	return retval ;	140:1:4852:4865	1063374	3	True				
ANR	1063427	Identifier	retval		1063374	0					
ANR	1063428	ReturnType	static bool		1063374	1					
ANR	1063429	Identifier	addFcnXRefs		1063374	2					
ANR	1063430	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063374	3					
ANR	1063431	Parameter	RCore * core	133:24:4629:4639	1063374	0	True				
ANR	1063432	ParameterType	RCore *		1063374	0					
ANR	1063433	Identifier	core		1063374	1					
ANR	1063434	Parameter	RAnalFunction * fcn	133:37:4642:4659	1063374	1	True				
ANR	1063435	ParameterType	RAnalFunction *		1063374	0					
ANR	1063436	Identifier	fcn		1063374	1					
ANR	1063437	Parameter	const char * name	133:57:4662:4677	1063374	2	True				
ANR	1063438	ParameterType	const char *		1063374	0					
ANR	1063439	Identifier	name		1063374	1					
ANR	1063440	CFGEntryNode	ENTRY		1063374		True				
ANR	1063441	CFGExitNode	EXIT		1063374		True				
ANR	1063442	Symbol	fcn		1063374						
ANR	1063443	Symbol	core		1063374						
ANR	1063444	Symbol	r_sign_fcn_xrefs		1063374						
ANR	1063445	Symbol	name		1063374						
ANR	1063446	Symbol	false		1063374						
ANR	1063447	Symbol	xrefs		1063374						
ANR	1063448	Symbol	* core		1063374						
ANR	1063449	Symbol	r_sign_add_xrefs		1063374						
ANR	1063450	Symbol	core -> anal		1063374						
ANR	1063451	Symbol	retval		1063374						
ANR	1063452	Function	addFcnRefs	143:0:4870:5123							
ANR	1063453	FunctionDef	"addFcnRefs (RCore * core , RAnalFunction * fcn , const char * name)"		1063452	0					
ANR	1063454	CompoundStatement		143:74:4944:5123	1063452	0					
ANR	1063455	IdentifierDeclStatement	"RList * refs = r_sign_fcn_refs ( core -> anal , fcn ) ;"	144:1:4947:4994	1063452	0	True				
ANR	1063456	IdentifierDecl	"* refs = r_sign_fcn_refs ( core -> anal , fcn )"		1063452	0					
ANR	1063457	IdentifierDeclType	RList *		1063452	0					
ANR	1063458	Identifier	refs		1063452	1					
ANR	1063459	AssignmentExpression	"* refs = r_sign_fcn_refs ( core -> anal , fcn )"		1063452	2		=			
ANR	1063460	Identifier	refs		1063452	0					
ANR	1063461	CallExpression	"r_sign_fcn_refs ( core -> anal , fcn )"		1063452	1					
ANR	1063462	Callee	r_sign_fcn_refs		1063452	0					
ANR	1063463	Identifier	r_sign_fcn_refs		1063452	0					
ANR	1063464	ArgumentList	core -> anal		1063452	1					
ANR	1063465	Argument	core -> anal		1063452	0					
ANR	1063466	PtrMemberAccess	core -> anal		1063452	0					
ANR	1063467	Identifier	core		1063452	0					
ANR	1063468	Identifier	anal		1063452	1					
ANR	1063469	Argument	fcn		1063452	1					
ANR	1063470	Identifier	fcn		1063452	0					
ANR	1063471	IfStatement	if ( ! refs )		1063452	1					
ANR	1063472	Condition	! refs	145:5:5001:5005	1063452	0	True				
ANR	1063473	UnaryOperationExpression	! refs		1063452	0					
ANR	1063474	UnaryOperator	!		1063452	0					
ANR	1063475	Identifier	refs		1063452	1					
ANR	1063476	CompoundStatement		3:12:63:63	1063452	1					
ANR	1063477	ReturnStatement	return false ;	146:2:5012:5024	1063452	0	True				
ANR	1063478	Identifier	false		1063452	0					
ANR	1063479	IdentifierDeclStatement	"bool retval = r_sign_add_refs ( core -> anal , name , refs ) ;"	148:1:5030:5084	1063452	2	True				
ANR	1063480	IdentifierDecl	"retval = r_sign_add_refs ( core -> anal , name , refs )"		1063452	0					
ANR	1063481	IdentifierDeclType	bool		1063452	0					
ANR	1063482	Identifier	retval		1063452	1					
ANR	1063483	AssignmentExpression	"retval = r_sign_add_refs ( core -> anal , name , refs )"		1063452	2		=			
ANR	1063484	Identifier	retval		1063452	0					
ANR	1063485	CallExpression	"r_sign_add_refs ( core -> anal , name , refs )"		1063452	1					
ANR	1063486	Callee	r_sign_add_refs		1063452	0					
ANR	1063487	Identifier	r_sign_add_refs		1063452	0					
ANR	1063488	ArgumentList	core -> anal		1063452	1					
ANR	1063489	Argument	core -> anal		1063452	0					
ANR	1063490	PtrMemberAccess	core -> anal		1063452	0					
ANR	1063491	Identifier	core		1063452	0					
ANR	1063492	Identifier	anal		1063452	1					
ANR	1063493	Argument	name		1063452	1					
ANR	1063494	Identifier	name		1063452	0					
ANR	1063495	Argument	refs		1063452	2					
ANR	1063496	Identifier	refs		1063452	0					
ANR	1063497	ExpressionStatement	r_list_free ( refs )	149:1:5087:5105	1063452	3	True				
ANR	1063498	CallExpression	r_list_free ( refs )		1063452	0					
ANR	1063499	Callee	r_list_free		1063452	0					
ANR	1063500	Identifier	r_list_free		1063452	0					
ANR	1063501	ArgumentList	refs		1063452	1					
ANR	1063502	Argument	refs		1063452	0					
ANR	1063503	Identifier	refs		1063452	0					
ANR	1063504	ReturnStatement	return retval ;	150:1:5108:5121	1063452	4	True				
ANR	1063505	Identifier	retval		1063452	0					
ANR	1063506	ReturnType	static bool		1063452	1					
ANR	1063507	Identifier	addFcnRefs		1063452	2					
ANR	1063508	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063452	3					
ANR	1063509	Parameter	RCore * core	143:23:4893:4903	1063452	0	True				
ANR	1063510	ParameterType	RCore *		1063452	0					
ANR	1063511	Identifier	core		1063452	1					
ANR	1063512	Parameter	RAnalFunction * fcn	143:36:4906:4923	1063452	1	True				
ANR	1063513	ParameterType	RAnalFunction *		1063452	0					
ANR	1063514	Identifier	fcn		1063452	1					
ANR	1063515	Parameter	const char * name	143:56:4926:4941	1063452	2	True				
ANR	1063516	ParameterType	const char *		1063452	0					
ANR	1063517	Identifier	name		1063452	1					
ANR	1063518	CFGEntryNode	ENTRY		1063452		True				
ANR	1063519	CFGExitNode	EXIT		1063452		True				
ANR	1063520	Symbol	fcn		1063452						
ANR	1063521	Symbol	core		1063452						
ANR	1063522	Symbol	refs		1063452						
ANR	1063523	Symbol	name		1063452						
ANR	1063524	Symbol	* core		1063452						
ANR	1063525	Symbol	false		1063452						
ANR	1063526	Symbol	r_sign_fcn_refs		1063452						
ANR	1063527	Symbol	r_sign_add_refs		1063452						
ANR	1063528	Symbol	core -> anal		1063452						
ANR	1063529	Symbol	retval		1063452						
ANR	1063530	Function	addFcnVars	153:0:5126:5379							
ANR	1063531	FunctionDef	"addFcnVars (RCore * core , RAnalFunction * fcn , const char * name)"		1063530	0					
ANR	1063532	CompoundStatement		153:74:5200:5379	1063530	0					
ANR	1063533	IdentifierDeclStatement	"RList * vars = r_sign_fcn_vars ( core -> anal , fcn ) ;"	154:1:5203:5250	1063530	0	True				
ANR	1063534	IdentifierDecl	"* vars = r_sign_fcn_vars ( core -> anal , fcn )"		1063530	0					
ANR	1063535	IdentifierDeclType	RList *		1063530	0					
ANR	1063536	Identifier	vars		1063530	1					
ANR	1063537	AssignmentExpression	"* vars = r_sign_fcn_vars ( core -> anal , fcn )"		1063530	2		=			
ANR	1063538	Identifier	vars		1063530	0					
ANR	1063539	CallExpression	"r_sign_fcn_vars ( core -> anal , fcn )"		1063530	1					
ANR	1063540	Callee	r_sign_fcn_vars		1063530	0					
ANR	1063541	Identifier	r_sign_fcn_vars		1063530	0					
ANR	1063542	ArgumentList	core -> anal		1063530	1					
ANR	1063543	Argument	core -> anal		1063530	0					
ANR	1063544	PtrMemberAccess	core -> anal		1063530	0					
ANR	1063545	Identifier	core		1063530	0					
ANR	1063546	Identifier	anal		1063530	1					
ANR	1063547	Argument	fcn		1063530	1					
ANR	1063548	Identifier	fcn		1063530	0					
ANR	1063549	IfStatement	if ( ! vars )		1063530	1					
ANR	1063550	Condition	! vars	155:5:5257:5261	1063530	0	True				
ANR	1063551	UnaryOperationExpression	! vars		1063530	0					
ANR	1063552	UnaryOperator	!		1063530	0					
ANR	1063553	Identifier	vars		1063530	1					
ANR	1063554	CompoundStatement		3:12:63:63	1063530	1					
ANR	1063555	ReturnStatement	return false ;	156:2:5268:5280	1063530	0	True				
ANR	1063556	Identifier	false		1063530	0					
ANR	1063557	IdentifierDeclStatement	"bool retval = r_sign_add_vars ( core -> anal , name , vars ) ;"	158:1:5286:5340	1063530	2	True				
ANR	1063558	IdentifierDecl	"retval = r_sign_add_vars ( core -> anal , name , vars )"		1063530	0					
ANR	1063559	IdentifierDeclType	bool		1063530	0					
ANR	1063560	Identifier	retval		1063530	1					
ANR	1063561	AssignmentExpression	"retval = r_sign_add_vars ( core -> anal , name , vars )"		1063530	2		=			
ANR	1063562	Identifier	retval		1063530	0					
ANR	1063563	CallExpression	"r_sign_add_vars ( core -> anal , name , vars )"		1063530	1					
ANR	1063564	Callee	r_sign_add_vars		1063530	0					
ANR	1063565	Identifier	r_sign_add_vars		1063530	0					
ANR	1063566	ArgumentList	core -> anal		1063530	1					
ANR	1063567	Argument	core -> anal		1063530	0					
ANR	1063568	PtrMemberAccess	core -> anal		1063530	0					
ANR	1063569	Identifier	core		1063530	0					
ANR	1063570	Identifier	anal		1063530	1					
ANR	1063571	Argument	name		1063530	1					
ANR	1063572	Identifier	name		1063530	0					
ANR	1063573	Argument	vars		1063530	2					
ANR	1063574	Identifier	vars		1063530	0					
ANR	1063575	ExpressionStatement	r_list_free ( vars )	159:1:5343:5361	1063530	3	True				
ANR	1063576	CallExpression	r_list_free ( vars )		1063530	0					
ANR	1063577	Callee	r_list_free		1063530	0					
ANR	1063578	Identifier	r_list_free		1063530	0					
ANR	1063579	ArgumentList	vars		1063530	1					
ANR	1063580	Argument	vars		1063530	0					
ANR	1063581	Identifier	vars		1063530	0					
ANR	1063582	ReturnStatement	return retval ;	160:1:5364:5377	1063530	4	True				
ANR	1063583	Identifier	retval		1063530	0					
ANR	1063584	ReturnType	static bool		1063530	1					
ANR	1063585	Identifier	addFcnVars		1063530	2					
ANR	1063586	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063530	3					
ANR	1063587	Parameter	RCore * core	153:23:5149:5159	1063530	0	True				
ANR	1063588	ParameterType	RCore *		1063530	0					
ANR	1063589	Identifier	core		1063530	1					
ANR	1063590	Parameter	RAnalFunction * fcn	153:36:5162:5179	1063530	1	True				
ANR	1063591	ParameterType	RAnalFunction *		1063530	0					
ANR	1063592	Identifier	fcn		1063530	1					
ANR	1063593	Parameter	const char * name	153:56:5182:5197	1063530	2	True				
ANR	1063594	ParameterType	const char *		1063530	0					
ANR	1063595	Identifier	name		1063530	1					
ANR	1063596	CFGEntryNode	ENTRY		1063530		True				
ANR	1063597	CFGExitNode	EXIT		1063530		True				
ANR	1063598	Symbol	fcn		1063530						
ANR	1063599	Symbol	core		1063530						
ANR	1063600	Symbol	r_sign_fcn_vars		1063530						
ANR	1063601	Symbol	r_sign_add_vars		1063530						
ANR	1063602	Symbol	name		1063530						
ANR	1063603	Symbol	* core		1063530						
ANR	1063604	Symbol	false		1063530						
ANR	1063605	Symbol	vars		1063530						
ANR	1063606	Symbol	core -> anal		1063530						
ANR	1063607	Symbol	retval		1063530						
ANR	1063608	Function	getFcnComments	164:0:5388:5614							
ANR	1063609	FunctionDef	"getFcnComments (RCore * core , RAnalFunction * fcn)"		1063608	0					
ANR	1063610	CompoundStatement		164:61:5449:5614	1063608	0					
ANR	1063611	Statement	char	166:1:5497:5500	1063608	0	True				
ANR	1063612	Statement	*	166:6:5502:5502	1063608	1	True				
ANR	1063613	Statement	r	166:7:5503:5503	1063608	2	True				
ANR	1063614	Statement	=	166:9:5505:5505	1063608	3	True				
ANR	1063615	Statement	r_core_cmd_strf	166:11:5507:5521	1063608	4	True				
ANR	1063616	Statement	(	166:27:5523:5523	1063608	5	True				
ANR	1063617	Statement	core	166:28:5524:5527	1063608	6	True				
ANR	1063618	Statement	","	166:32:5528:5528	1063608	7	True				
ANR	1063619	Statement	"""CCf* @ 0x%08"""	166:34:5530:5543	1063608	8	True				
ANR	1063620	Statement	PFMT64x	166:48:5544:5550	1063608	9	True				
ANR	1063621	Statement	","	166:55:5551:5551	1063608	10	True				
ANR	1063622	Statement	fcn	166:57:5553:5555	1063608	11	True				
ANR	1063623	Statement	->	166:60:5556:5557	1063608	12	True				
ANR	1063624	Statement	addr	166:62:5558:5561	1063608	13	True				
ANR	1063625	Statement	)	166:66:5562:5562	1063608	14	True				
ANR	1063626	ExpressionStatement		166:67:5563:5563	1063608	15	True				
ANR	1063627	IfStatement	if ( r && * r )		1063608	16					
ANR	1063628	Condition	r && * r	167:5:5570:5576	1063608	0	True				
ANR	1063629	AndExpression	r && * r		1063608	0		&&			
ANR	1063630	Identifier	r		1063608	0					
ANR	1063631	UnaryOperationExpression	* r		1063608	1					
ANR	1063632	UnaryOperator	*		1063608	0					
ANR	1063633	Identifier	r		1063608	1					
ANR	1063634	CompoundStatement		4:14:129:129	1063608	1					
ANR	1063635	ReturnStatement	return r ;	168:2:5583:5591	1063608	0	True				
ANR	1063636	Identifier	r		1063608	0					
ANR	1063637	ReturnStatement	return NULL ;	171:1:5601:5612	1063608	17	True				
ANR	1063638	Identifier	NULL		1063608	0					
ANR	1063639	ReturnType	static char *		1063608	1					
ANR	1063640	Identifier	getFcnComments		1063608	2					
ANR	1063641	ParameterList	"RCore * core , RAnalFunction * fcn"		1063608	3					
ANR	1063642	Parameter	RCore * core	164:28:5416:5426	1063608	0	True				
ANR	1063643	ParameterType	RCore *		1063608	0					
ANR	1063644	Identifier	core		1063608	1					
ANR	1063645	Parameter	RAnalFunction * fcn	164:41:5429:5446	1063608	1	True				
ANR	1063646	ParameterType	RAnalFunction *		1063608	0					
ANR	1063647	Identifier	fcn		1063608	1					
ANR	1063648	CFGEntryNode	ENTRY		1063608		True				
ANR	1063649	CFGExitNode	EXIT		1063608		True				
ANR	1063650	Symbol	fcn		1063608						
ANR	1063651	Symbol	core		1063608						
ANR	1063652	Symbol	r		1063608						
ANR	1063653	Symbol	NULL		1063608						
ANR	1063654	Symbol	* r		1063608						
ANR	1063655	Function	addFcnZign	175:0:5624:6511							
ANR	1063656	FunctionDef	"addFcnZign (RCore * core , RAnalFunction * fcn , const char * name)"		1063655	0					
ANR	1063657	CompoundStatement		175:74:5698:6511	1063655	0					
ANR	1063658	IdentifierDeclStatement	char * zigname = NULL ;	176:1:5701:5721	1063655	0	True				
ANR	1063659	IdentifierDecl	* zigname = NULL		1063655	0					
ANR	1063660	IdentifierDeclType	char *		1063655	0					
ANR	1063661	Identifier	zigname		1063655	1					
ANR	1063662	AssignmentExpression	* zigname = NULL		1063655	2		=			
ANR	1063663	Identifier	NULL		1063655	0					
ANR	1063664	Identifier	NULL		1063655	1					
ANR	1063665	IdentifierDeclStatement	const RSpace * curspace = r_spaces_current ( & core -> anal -> zign_spaces ) ;	177:1:5724:5792	1063655	1	True				
ANR	1063666	IdentifierDecl	* curspace = r_spaces_current ( & core -> anal -> zign_spaces )		1063655	0					
ANR	1063667	IdentifierDeclType	const RSpace *		1063655	0					
ANR	1063668	Identifier	curspace		1063655	1					
ANR	1063669	AssignmentExpression	* curspace = r_spaces_current ( & core -> anal -> zign_spaces )		1063655	2		=			
ANR	1063670	Identifier	curspace		1063655	0					
ANR	1063671	CallExpression	r_spaces_current ( & core -> anal -> zign_spaces )		1063655	1					
ANR	1063672	Callee	r_spaces_current		1063655	0					
ANR	1063673	Identifier	r_spaces_current		1063655	0					
ANR	1063674	ArgumentList	& core -> anal -> zign_spaces		1063655	1					
ANR	1063675	Argument	& core -> anal -> zign_spaces		1063655	0					
ANR	1063676	UnaryOperationExpression	& core -> anal -> zign_spaces		1063655	0					
ANR	1063677	UnaryOperator	&		1063655	0					
ANR	1063678	PtrMemberAccess	core -> anal -> zign_spaces		1063655	1					
ANR	1063679	PtrMemberAccess	core -> anal		1063655	0					
ANR	1063680	Identifier	core		1063655	0					
ANR	1063681	Identifier	anal		1063655	1					
ANR	1063682	Identifier	zign_spaces		1063655	1					
ANR	1063683	IfStatement	if ( name )		1063655	2					
ANR	1063684	Condition	name	179:5:5800:5803	1063655	0	True				
ANR	1063685	Identifier	name		1063655	0					
ANR	1063686	CompoundStatement		5:11:107:107	1063655	1					
ANR	1063687	ExpressionStatement	zigname = r_str_new ( name )	180:2:5810:5836	1063655	0	True				
ANR	1063688	AssignmentExpression	zigname = r_str_new ( name )		1063655	0		=			
ANR	1063689	Identifier	zigname		1063655	0					
ANR	1063690	CallExpression	r_str_new ( name )		1063655	1					
ANR	1063691	Callee	r_str_new		1063655	0					
ANR	1063692	Identifier	r_str_new		1063655	0					
ANR	1063693	ArgumentList	name		1063655	1					
ANR	1063694	Argument	name		1063655	0					
ANR	1063695	Identifier	name		1063655	0					
ANR	1063696	ElseStatement	else		1063655	0					
ANR	1063697	CompoundStatement		7:8:147:147	1063655	0					
ANR	1063698	IfStatement	if ( curspace )		1063655	0					
ANR	1063699	Condition	curspace	182:6:5854:5861	1063655	0	True				
ANR	1063700	Identifier	curspace		1063655	0					
ANR	1063701	CompoundStatement		8:16:165:165	1063655	1					
ANR	1063702	ExpressionStatement	"zigname = r_str_newf ( ""%s:"" , curspace -> name )"	183:3:5869:5913	1063655	0	True				
ANR	1063703	AssignmentExpression	"zigname = r_str_newf ( ""%s:"" , curspace -> name )"		1063655	0		=			
ANR	1063704	Identifier	zigname		1063655	0					
ANR	1063705	CallExpression	"r_str_newf ( ""%s:"" , curspace -> name )"		1063655	1					
ANR	1063706	Callee	r_str_newf		1063655	0					
ANR	1063707	Identifier	r_str_newf		1063655	0					
ANR	1063708	ArgumentList	"""%s:"""		1063655	1					
ANR	1063709	Argument	"""%s:"""		1063655	0					
ANR	1063710	PrimaryExpression	"""%s:"""		1063655	0					
ANR	1063711	Argument	curspace -> name		1063655	1					
ANR	1063712	PtrMemberAccess	curspace -> name		1063655	0					
ANR	1063713	Identifier	curspace		1063655	0					
ANR	1063714	Identifier	name		1063655	1					
ANR	1063715	ExpressionStatement	"zigname = r_str_appendf ( zigname , ""%s"" , fcn -> name )"	185:2:5921:5971	1063655	1	True				
ANR	1063716	AssignmentExpression	"zigname = r_str_appendf ( zigname , ""%s"" , fcn -> name )"		1063655	0		=			
ANR	1063717	Identifier	zigname		1063655	0					
ANR	1063718	CallExpression	"r_str_appendf ( zigname , ""%s"" , fcn -> name )"		1063655	1					
ANR	1063719	Callee	r_str_appendf		1063655	0					
ANR	1063720	Identifier	r_str_appendf		1063655	0					
ANR	1063721	ArgumentList	zigname		1063655	1					
ANR	1063722	Argument	zigname		1063655	0					
ANR	1063723	Identifier	zigname		1063655	0					
ANR	1063724	Argument	"""%s"""		1063655	1					
ANR	1063725	PrimaryExpression	"""%s"""		1063655	0					
ANR	1063726	Argument	fcn -> name		1063655	2					
ANR	1063727	PtrMemberAccess	fcn -> name		1063655	0					
ANR	1063728	Identifier	fcn		1063655	0					
ANR	1063729	Identifier	name		1063655	1					
ANR	1063730	ExpressionStatement	"addFcnGraph ( core , fcn , zigname )"	188:1:5978:6010	1063655	3	True				
ANR	1063731	CallExpression	"addFcnGraph ( core , fcn , zigname )"		1063655	0					
ANR	1063732	Callee	addFcnGraph		1063655	0					
ANR	1063733	Identifier	addFcnGraph		1063655	0					
ANR	1063734	ArgumentList	core		1063655	1					
ANR	1063735	Argument	core		1063655	0					
ANR	1063736	Identifier	core		1063655	0					
ANR	1063737	Argument	fcn		1063655	1					
ANR	1063738	Identifier	fcn		1063655	0					
ANR	1063739	Argument	zigname		1063655	2					
ANR	1063740	Identifier	zigname		1063655	0					
ANR	1063741	ExpressionStatement	"addFcnBytes ( core , fcn , zigname )"	189:1:6013:6045	1063655	4	True				
ANR	1063742	CallExpression	"addFcnBytes ( core , fcn , zigname )"		1063655	0					
ANR	1063743	Callee	addFcnBytes		1063655	0					
ANR	1063744	Identifier	addFcnBytes		1063655	0					
ANR	1063745	ArgumentList	core		1063655	1					
ANR	1063746	Argument	core		1063655	0					
ANR	1063747	Identifier	core		1063655	0					
ANR	1063748	Argument	fcn		1063655	1					
ANR	1063749	Identifier	fcn		1063655	0					
ANR	1063750	Argument	zigname		1063655	2					
ANR	1063751	Identifier	zigname		1063655	0					
ANR	1063752	ExpressionStatement	"addFcnXRefs ( core , fcn , zigname )"	190:1:6048:6080	1063655	5	True				
ANR	1063753	CallExpression	"addFcnXRefs ( core , fcn , zigname )"		1063655	0					
ANR	1063754	Callee	addFcnXRefs		1063655	0					
ANR	1063755	Identifier	addFcnXRefs		1063655	0					
ANR	1063756	ArgumentList	core		1063655	1					
ANR	1063757	Argument	core		1063655	0					
ANR	1063758	Identifier	core		1063655	0					
ANR	1063759	Argument	fcn		1063655	1					
ANR	1063760	Identifier	fcn		1063655	0					
ANR	1063761	Argument	zigname		1063655	2					
ANR	1063762	Identifier	zigname		1063655	0					
ANR	1063763	ExpressionStatement	"addFcnRefs ( core , fcn , zigname )"	191:1:6083:6114	1063655	6	True				
ANR	1063764	CallExpression	"addFcnRefs ( core , fcn , zigname )"		1063655	0					
ANR	1063765	Callee	addFcnRefs		1063655	0					
ANR	1063766	Identifier	addFcnRefs		1063655	0					
ANR	1063767	ArgumentList	core		1063655	1					
ANR	1063768	Argument	core		1063655	0					
ANR	1063769	Identifier	core		1063655	0					
ANR	1063770	Argument	fcn		1063655	1					
ANR	1063771	Identifier	fcn		1063655	0					
ANR	1063772	Argument	zigname		1063655	2					
ANR	1063773	Identifier	zigname		1063655	0					
ANR	1063774	ExpressionStatement	"addFcnVars ( core , fcn , zigname )"	192:1:6117:6148	1063655	7	True				
ANR	1063775	CallExpression	"addFcnVars ( core , fcn , zigname )"		1063655	0					
ANR	1063776	Callee	addFcnVars		1063655	0					
ANR	1063777	Identifier	addFcnVars		1063655	0					
ANR	1063778	ArgumentList	core		1063655	1					
ANR	1063779	Argument	core		1063655	0					
ANR	1063780	Identifier	core		1063655	0					
ANR	1063781	Argument	fcn		1063655	1					
ANR	1063782	Identifier	fcn		1063655	0					
ANR	1063783	Argument	zigname		1063655	2					
ANR	1063784	Identifier	zigname		1063655	0					
ANR	1063785	ExpressionStatement	"addFcnHash ( core , fcn , zigname )"	193:1:6151:6182	1063655	8	True				
ANR	1063786	CallExpression	"addFcnHash ( core , fcn , zigname )"		1063655	0					
ANR	1063787	Callee	addFcnHash		1063655	0					
ANR	1063788	Identifier	addFcnHash		1063655	0					
ANR	1063789	ArgumentList	core		1063655	1					
ANR	1063790	Argument	core		1063655	0					
ANR	1063791	Identifier	core		1063655	0					
ANR	1063792	Argument	fcn		1063655	1					
ANR	1063793	Identifier	fcn		1063655	0					
ANR	1063794	Argument	zigname		1063655	2					
ANR	1063795	Identifier	zigname		1063655	0					
ANR	1063796	IfStatement	"if ( strcmp ( zigname , fcn -> name ) )"		1063655	9					
ANR	1063797	Condition	"strcmp ( zigname , fcn -> name )"	194:5:6189:6215	1063655	0	True				
ANR	1063798	CallExpression	"strcmp ( zigname , fcn -> name )"		1063655	0					
ANR	1063799	Callee	strcmp		1063655	0					
ANR	1063800	Identifier	strcmp		1063655	0					
ANR	1063801	ArgumentList	zigname		1063655	1					
ANR	1063802	Argument	zigname		1063655	0					
ANR	1063803	Identifier	zigname		1063655	0					
ANR	1063804	Argument	fcn -> name		1063655	1					
ANR	1063805	PtrMemberAccess	fcn -> name		1063655	0					
ANR	1063806	Identifier	fcn		1063655	0					
ANR	1063807	Identifier	name		1063655	1					
ANR	1063808	CompoundStatement		20:34:519:519	1063655	1					
ANR	1063809	ExpressionStatement	"r_sign_add_name ( core -> anal , zigname , fcn -> name )"	195:2:6222:6270	1063655	0	True				
ANR	1063810	CallExpression	"r_sign_add_name ( core -> anal , zigname , fcn -> name )"		1063655	0					
ANR	1063811	Callee	r_sign_add_name		1063655	0					
ANR	1063812	Identifier	r_sign_add_name		1063655	0					
ANR	1063813	ArgumentList	core -> anal		1063655	1					
ANR	1063814	Argument	core -> anal		1063655	0					
ANR	1063815	PtrMemberAccess	core -> anal		1063655	0					
ANR	1063816	Identifier	core		1063655	0					
ANR	1063817	Identifier	anal		1063655	1					
ANR	1063818	Argument	zigname		1063655	1					
ANR	1063819	Identifier	zigname		1063655	0					
ANR	1063820	Argument	fcn -> name		1063655	2					
ANR	1063821	PtrMemberAccess	fcn -> name		1063655	0					
ANR	1063822	Identifier	fcn		1063655	0					
ANR	1063823	Identifier	name		1063655	1					
ANR	1063824	ExpressionStatement	"r_sign_add_addr ( core -> anal , zigname , fcn -> addr )"	204:1:6443:6491	1063655	10	True				
ANR	1063825	CallExpression	"r_sign_add_addr ( core -> anal , zigname , fcn -> addr )"		1063655	0					
ANR	1063826	Callee	r_sign_add_addr		1063655	0					
ANR	1063827	Identifier	r_sign_add_addr		1063655	0					
ANR	1063828	ArgumentList	core -> anal		1063655	1					
ANR	1063829	Argument	core -> anal		1063655	0					
ANR	1063830	PtrMemberAccess	core -> anal		1063655	0					
ANR	1063831	Identifier	core		1063655	0					
ANR	1063832	Identifier	anal		1063655	1					
ANR	1063833	Argument	zigname		1063655	1					
ANR	1063834	Identifier	zigname		1063655	0					
ANR	1063835	Argument	fcn -> addr		1063655	2					
ANR	1063836	PtrMemberAccess	fcn -> addr		1063655	0					
ANR	1063837	Identifier	fcn		1063655	0					
ANR	1063838	Identifier	addr		1063655	1					
ANR	1063839	ExpressionStatement	free ( zigname )	206:1:6495:6509	1063655	11	True				
ANR	1063840	CallExpression	free ( zigname )		1063655	0					
ANR	1063841	Callee	free		1063655	0					
ANR	1063842	Identifier	free		1063655	0					
ANR	1063843	ArgumentList	zigname		1063655	1					
ANR	1063844	Argument	zigname		1063655	0					
ANR	1063845	Identifier	zigname		1063655	0					
ANR	1063846	ReturnType	static void		1063655	1					
ANR	1063847	Identifier	addFcnZign		1063655	2					
ANR	1063848	ParameterList	"RCore * core , RAnalFunction * fcn , const char * name"		1063655	3					
ANR	1063849	Parameter	RCore * core	175:23:5647:5657	1063655	0	True				
ANR	1063850	ParameterType	RCore *		1063655	0					
ANR	1063851	Identifier	core		1063655	1					
ANR	1063852	Parameter	RAnalFunction * fcn	175:36:5660:5677	1063655	1	True				
ANR	1063853	ParameterType	RAnalFunction *		1063655	0					
ANR	1063854	Identifier	fcn		1063655	1					
ANR	1063855	Parameter	const char * name	175:56:5680:5695	1063655	2	True				
ANR	1063856	ParameterType	const char *		1063655	0					
ANR	1063857	Identifier	name		1063655	1					
ANR	1063858	CFGEntryNode	ENTRY		1063655		True				
ANR	1063859	CFGExitNode	EXIT		1063655		True				
ANR	1063860	Symbol	strcmp		1063655						
ANR	1063861	Symbol	NULL		1063655						
ANR	1063862	Symbol	* fcn		1063655						
ANR	1063863	Symbol	* curspace		1063655						
ANR	1063864	Symbol	fcn -> name		1063655						
ANR	1063865	Symbol	zigname		1063655						
ANR	1063866	Symbol	* core		1063655						
ANR	1063867	Symbol	r_str_newf		1063655						
ANR	1063868	Symbol	core -> anal		1063655						
ANR	1063869	Symbol	fcn		1063655						
ANR	1063870	Symbol	core		1063655						
ANR	1063871	Symbol	& core -> anal -> zign_spaces		1063655						
ANR	1063872	Symbol	curspace -> name		1063655						
ANR	1063873	Symbol	r_str_appendf		1063655						
ANR	1063874	Symbol	name		1063655						
ANR	1063875	Symbol	curspace		1063655						
ANR	1063876	Symbol	fcn -> addr		1063655						
ANR	1063877	Symbol	r_spaces_current		1063655						
ANR	1063878	Symbol	r_str_new		1063655						
ANR	1063879	Function	parseGraphMetrics	209:0:6514:7242							
ANR	1063880	FunctionDef	"parseGraphMetrics (const char * args0 , int nargs , RSignGraph * graph)"		1063879	0					
ANR	1063881	CompoundStatement		209:79:6593:7242	1063879	0					
ANR	1063882	IdentifierDeclStatement	const char * ptr = NULL ;	210:1:6596:6618	1063879	0	True				
ANR	1063883	IdentifierDecl	* ptr = NULL		1063879	0					
ANR	1063884	IdentifierDeclType	const char *		1063879	0					
ANR	1063885	Identifier	ptr		1063879	1					
ANR	1063886	AssignmentExpression	* ptr = NULL		1063879	2		=			
ANR	1063887	Identifier	NULL		1063879	0					
ANR	1063888	Identifier	NULL		1063879	1					
ANR	1063889	IdentifierDeclStatement	int i = 0 ;	211:1:6621:6630	1063879	1	True				
ANR	1063890	IdentifierDecl	i = 0		1063879	0					
ANR	1063891	IdentifierDeclType	int		1063879	0					
ANR	1063892	Identifier	i		1063879	1					
ANR	1063893	AssignmentExpression	i = 0		1063879	2		=			
ANR	1063894	Identifier	i		1063879	0					
ANR	1063895	PrimaryExpression	0		1063879	1					
ANR	1063896	ExpressionStatement	graph -> cc = - 1	213:1:6634:6648	1063879	2	True				
ANR	1063897	AssignmentExpression	graph -> cc = - 1		1063879	0		=			
ANR	1063898	PtrMemberAccess	graph -> cc		1063879	0					
ANR	1063899	Identifier	graph		1063879	0					
ANR	1063900	Identifier	cc		1063879	1					
ANR	1063901	UnaryOperationExpression	- 1		1063879	1					
ANR	1063902	UnaryOperator	-		1063879	0					
ANR	1063903	PrimaryExpression	1		1063879	1					
ANR	1063904	ExpressionStatement	graph -> nbbs = - 1	214:1:6651:6667	1063879	3	True				
ANR	1063905	AssignmentExpression	graph -> nbbs = - 1		1063879	0		=			
ANR	1063906	PtrMemberAccess	graph -> nbbs		1063879	0					
ANR	1063907	Identifier	graph		1063879	0					
ANR	1063908	Identifier	nbbs		1063879	1					
ANR	1063909	UnaryOperationExpression	- 1		1063879	1					
ANR	1063910	UnaryOperator	-		1063879	0					
ANR	1063911	PrimaryExpression	1		1063879	1					
ANR	1063912	ExpressionStatement	graph -> edges = - 1	215:1:6670:6687	1063879	4	True				
ANR	1063913	AssignmentExpression	graph -> edges = - 1		1063879	0		=			
ANR	1063914	PtrMemberAccess	graph -> edges		1063879	0					
ANR	1063915	Identifier	graph		1063879	0					
ANR	1063916	Identifier	edges		1063879	1					
ANR	1063917	UnaryOperationExpression	- 1		1063879	1					
ANR	1063918	UnaryOperator	-		1063879	0					
ANR	1063919	PrimaryExpression	1		1063879	1					
ANR	1063920	ExpressionStatement	graph -> ebbs = - 1	216:1:6690:6706	1063879	5	True				
ANR	1063921	AssignmentExpression	graph -> ebbs = - 1		1063879	0		=			
ANR	1063922	PtrMemberAccess	graph -> ebbs		1063879	0					
ANR	1063923	Identifier	graph		1063879	0					
ANR	1063924	Identifier	ebbs		1063879	1					
ANR	1063925	UnaryOperationExpression	- 1		1063879	1					
ANR	1063926	UnaryOperator	-		1063879	0					
ANR	1063927	PrimaryExpression	1		1063879	1					
ANR	1063928	ExpressionStatement	graph -> bbsum = 0	217:1:6709:6725	1063879	6	True				
ANR	1063929	AssignmentExpression	graph -> bbsum = 0		1063879	0		=			
ANR	1063930	PtrMemberAccess	graph -> bbsum		1063879	0					
ANR	1063931	Identifier	graph		1063879	0					
ANR	1063932	Identifier	bbsum		1063879	1					
ANR	1063933	PrimaryExpression	0		1063879	1					
ANR	1063934	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		1063879	7					
ANR	1063935	ForInit	i = 0 ;	219:6:6734:6739	1063879	0	True				
ANR	1063936	AssignmentExpression	i = 0		1063879	0		=			
ANR	1063937	Identifier	i		1063879	0					
ANR	1063938	PrimaryExpression	0		1063879	1					
ANR	1063939	Condition	i < nargs	219:13:6741:6749	1063879	1	True				
ANR	1063940	RelationalExpression	i < nargs		1063879	0		<			
ANR	1063941	Identifier	i		1063879	0					
ANR	1063942	Identifier	nargs		1063879	1					
ANR	1063943	PostIncDecOperationExpression	i ++	219:24:6752:6754	1063879	2	True				
ANR	1063944	Identifier	i		1063879	0					
ANR	1063945	IncDec	++		1063879	1					
ANR	1063946	CompoundStatement		11:29:163:163	1063879	3					
ANR	1063947	ExpressionStatement	"ptr = r_str_word_get0 ( args0 , i )"	220:2:6761:6793	1063879	0	True				
ANR	1063948	AssignmentExpression	"ptr = r_str_word_get0 ( args0 , i )"		1063879	0		=			
ANR	1063949	Identifier	ptr		1063879	0					
ANR	1063950	CallExpression	"r_str_word_get0 ( args0 , i )"		1063879	1					
ANR	1063951	Callee	r_str_word_get0		1063879	0					
ANR	1063952	Identifier	r_str_word_get0		1063879	0					
ANR	1063953	ArgumentList	args0		1063879	1					
ANR	1063954	Argument	args0		1063879	0					
ANR	1063955	Identifier	args0		1063879	0					
ANR	1063956	Argument	i		1063879	1					
ANR	1063957	Identifier	i		1063879	0					
ANR	1063958	IfStatement	"if ( r_str_startswith ( ptr , ""cc="" ) )"		1063879	1					
ANR	1063959	Condition	"r_str_startswith ( ptr , ""cc="" )"	221:6:6801:6829	1063879	0	True				
ANR	1063960	CallExpression	"r_str_startswith ( ptr , ""cc="" )"		1063879	0					
ANR	1063961	Callee	r_str_startswith		1063879	0					
ANR	1063962	Identifier	r_str_startswith		1063879	0					
ANR	1063963	ArgumentList	ptr		1063879	1					
ANR	1063964	Argument	ptr		1063879	0					
ANR	1063965	Identifier	ptr		1063879	0					
ANR	1063966	Argument	"""cc="""		1063879	1					
ANR	1063967	PrimaryExpression	"""cc="""		1063879	0					
ANR	1063968	CompoundStatement		13:37:238:238	1063879	1					
ANR	1063969	ExpressionStatement	graph -> cc = atoi ( ptr + 3 )	222:3:6837:6863	1063879	0	True				
ANR	1063970	AssignmentExpression	graph -> cc = atoi ( ptr + 3 )		1063879	0		=			
ANR	1063971	PtrMemberAccess	graph -> cc		1063879	0					
ANR	1063972	Identifier	graph		1063879	0					
ANR	1063973	Identifier	cc		1063879	1					
ANR	1063974	CallExpression	atoi ( ptr + 3 )		1063879	1					
ANR	1063975	Callee	atoi		1063879	0					
ANR	1063976	Identifier	atoi		1063879	0					
ANR	1063977	ArgumentList	ptr + 3		1063879	1					
ANR	1063978	Argument	ptr + 3		1063879	0					
ANR	1063979	AdditiveExpression	ptr + 3		1063879	0		+			
ANR	1063980	Identifier	ptr		1063879	0					
ANR	1063981	PrimaryExpression	3		1063879	1					
ANR	1063982	ElseStatement	else		1063879	0					
ANR	1063983	IfStatement	"if ( r_str_startswith ( ptr , ""nbbs="" ) )"		1063879	0					
ANR	1063984	Condition	"r_str_startswith ( ptr , ""nbbs="" )"	223:13:6878:6908	1063879	0	True				
ANR	1063985	CallExpression	"r_str_startswith ( ptr , ""nbbs="" )"		1063879	0					
ANR	1063986	Callee	r_str_startswith		1063879	0					
ANR	1063987	Identifier	r_str_startswith		1063879	0					
ANR	1063988	ArgumentList	ptr		1063879	1					
ANR	1063989	Argument	ptr		1063879	0					
ANR	1063990	Identifier	ptr		1063879	0					
ANR	1063991	Argument	"""nbbs="""		1063879	1					
ANR	1063992	PrimaryExpression	"""nbbs="""		1063879	0					
ANR	1063993	CompoundStatement		15:46:317:317	1063879	1					
ANR	1063994	ExpressionStatement	graph -> nbbs = atoi ( ptr + 5 )	224:3:6916:6944	1063879	0	True				
ANR	1063995	AssignmentExpression	graph -> nbbs = atoi ( ptr + 5 )		1063879	0		=			
ANR	1063996	PtrMemberAccess	graph -> nbbs		1063879	0					
ANR	1063997	Identifier	graph		1063879	0					
ANR	1063998	Identifier	nbbs		1063879	1					
ANR	1063999	CallExpression	atoi ( ptr + 5 )		1063879	1					
ANR	1064000	Callee	atoi		1063879	0					
ANR	1064001	Identifier	atoi		1063879	0					
ANR	1064002	ArgumentList	ptr + 5		1063879	1					
ANR	1064003	Argument	ptr + 5		1063879	0					
ANR	1064004	AdditiveExpression	ptr + 5		1063879	0		+			
ANR	1064005	Identifier	ptr		1063879	0					
ANR	1064006	PrimaryExpression	5		1063879	1					
ANR	1064007	ElseStatement	else		1063879	0					
ANR	1064008	IfStatement	"if ( r_str_startswith ( ptr , ""edges="" ) )"		1063879	0					
ANR	1064009	Condition	"r_str_startswith ( ptr , ""edges="" )"	225:13:6959:6990	1063879	0	True				
ANR	1064010	CallExpression	"r_str_startswith ( ptr , ""edges="" )"		1063879	0					
ANR	1064011	Callee	r_str_startswith		1063879	0					
ANR	1064012	Identifier	r_str_startswith		1063879	0					
ANR	1064013	ArgumentList	ptr		1063879	1					
ANR	1064014	Argument	ptr		1063879	0					
ANR	1064015	Identifier	ptr		1063879	0					
ANR	1064016	Argument	"""edges="""		1063879	1					
ANR	1064017	PrimaryExpression	"""edges="""		1063879	0					
ANR	1064018	CompoundStatement		17:47:399:399	1063879	1					
ANR	1064019	ExpressionStatement	graph -> edges = atoi ( ptr + 6 )	226:3:6998:7027	1063879	0	True				
ANR	1064020	AssignmentExpression	graph -> edges = atoi ( ptr + 6 )		1063879	0		=			
ANR	1064021	PtrMemberAccess	graph -> edges		1063879	0					
ANR	1064022	Identifier	graph		1063879	0					
ANR	1064023	Identifier	edges		1063879	1					
ANR	1064024	CallExpression	atoi ( ptr + 6 )		1063879	1					
ANR	1064025	Callee	atoi		1063879	0					
ANR	1064026	Identifier	atoi		1063879	0					
ANR	1064027	ArgumentList	ptr + 6		1063879	1					
ANR	1064028	Argument	ptr + 6		1063879	0					
ANR	1064029	AdditiveExpression	ptr + 6		1063879	0		+			
ANR	1064030	Identifier	ptr		1063879	0					
ANR	1064031	PrimaryExpression	6		1063879	1					
ANR	1064032	ElseStatement	else		1063879	0					
ANR	1064033	IfStatement	"if ( r_str_startswith ( ptr , ""ebbs="" ) )"		1063879	0					
ANR	1064034	Condition	"r_str_startswith ( ptr , ""ebbs="" )"	227:13:7042:7072	1063879	0	True				
ANR	1064035	CallExpression	"r_str_startswith ( ptr , ""ebbs="" )"		1063879	0					
ANR	1064036	Callee	r_str_startswith		1063879	0					
ANR	1064037	Identifier	r_str_startswith		1063879	0					
ANR	1064038	ArgumentList	ptr		1063879	1					
ANR	1064039	Argument	ptr		1063879	0					
ANR	1064040	Identifier	ptr		1063879	0					
ANR	1064041	Argument	"""ebbs="""		1063879	1					
ANR	1064042	PrimaryExpression	"""ebbs="""		1063879	0					
ANR	1064043	CompoundStatement		19:46:481:481	1063879	1					
ANR	1064044	ExpressionStatement	graph -> ebbs = atoi ( ptr + 5 )	228:3:7080:7108	1063879	0	True				
ANR	1064045	AssignmentExpression	graph -> ebbs = atoi ( ptr + 5 )		1063879	0		=			
ANR	1064046	PtrMemberAccess	graph -> ebbs		1063879	0					
ANR	1064047	Identifier	graph		1063879	0					
ANR	1064048	Identifier	ebbs		1063879	1					
ANR	1064049	CallExpression	atoi ( ptr + 5 )		1063879	1					
ANR	1064050	Callee	atoi		1063879	0					
ANR	1064051	Identifier	atoi		1063879	0					
ANR	1064052	ArgumentList	ptr + 5		1063879	1					
ANR	1064053	Argument	ptr + 5		1063879	0					
ANR	1064054	AdditiveExpression	ptr + 5		1063879	0		+			
ANR	1064055	Identifier	ptr		1063879	0					
ANR	1064056	PrimaryExpression	5		1063879	1					
ANR	1064057	ElseStatement	else		1063879	0					
ANR	1064058	IfStatement	"if ( r_str_startswith ( ptr , ""bbsum="" ) )"		1063879	0					
ANR	1064059	Condition	"r_str_startswith ( ptr , ""bbsum="" )"	229:13:7123:7154	1063879	0	True				
ANR	1064060	CallExpression	"r_str_startswith ( ptr , ""bbsum="" )"		1063879	0					
ANR	1064061	Callee	r_str_startswith		1063879	0					
ANR	1064062	Identifier	r_str_startswith		1063879	0					
ANR	1064063	ArgumentList	ptr		1063879	1					
ANR	1064064	Argument	ptr		1063879	0					
ANR	1064065	Identifier	ptr		1063879	0					
ANR	1064066	Argument	"""bbsum="""		1063879	1					
ANR	1064067	PrimaryExpression	"""bbsum="""		1063879	0					
ANR	1064068	CompoundStatement		21:47:563:563	1063879	1					
ANR	1064069	ExpressionStatement	graph -> bbsum = atoi ( ptr + 6 )	230:3:7162:7191	1063879	0	True				
ANR	1064070	AssignmentExpression	graph -> bbsum = atoi ( ptr + 6 )		1063879	0		=			
ANR	1064071	PtrMemberAccess	graph -> bbsum		1063879	0					
ANR	1064072	Identifier	graph		1063879	0					
ANR	1064073	Identifier	bbsum		1063879	1					
ANR	1064074	CallExpression	atoi ( ptr + 6 )		1063879	1					
ANR	1064075	Callee	atoi		1063879	0					
ANR	1064076	Identifier	atoi		1063879	0					
ANR	1064077	ArgumentList	ptr + 6		1063879	1					
ANR	1064078	Argument	ptr + 6		1063879	0					
ANR	1064079	AdditiveExpression	ptr + 6		1063879	0		+			
ANR	1064080	Identifier	ptr		1063879	0					
ANR	1064081	PrimaryExpression	6		1063879	1					
ANR	1064082	ElseStatement	else		1063879	0					
ANR	1064083	CompoundStatement		23:9:608:608	1063879	0					
ANR	1064084	ReturnStatement	return false ;	232:3:7207:7219	1063879	0	True				
ANR	1064085	Identifier	false		1063879	0					
ANR	1064086	ReturnStatement	return true ;	235:1:7229:7240	1063879	8	True				
ANR	1064087	Identifier	true		1063879	0					
ANR	1064088	ReturnType	static bool		1063879	1					
ANR	1064089	Identifier	parseGraphMetrics		1063879	2					
ANR	1064090	ParameterList	"const char * args0 , int nargs , RSignGraph * graph"		1063879	3					
ANR	1064091	Parameter	const char * args0	209:30:6544:6560	1063879	0	True				
ANR	1064092	ParameterType	const char *		1063879	0					
ANR	1064093	Identifier	args0		1063879	1					
ANR	1064094	Parameter	int nargs	209:49:6563:6571	1063879	1	True				
ANR	1064095	ParameterType	int		1063879	0					
ANR	1064096	Identifier	nargs		1063879	1					
ANR	1064097	Parameter	RSignGraph * graph	209:60:6574:6590	1063879	2	True				
ANR	1064098	ParameterType	RSignGraph *		1063879	0					
ANR	1064099	Identifier	graph		1063879	1					
ANR	1064100	CFGEntryNode	ENTRY		1063879		True				
ANR	1064101	CFGExitNode	EXIT		1063879		True				
ANR	1064102	Symbol	r_str_startswith		1063879						
ANR	1064103	Symbol	atoi		1063879						
ANR	1064104	Symbol	NULL		1063879						
ANR	1064105	Symbol	graph -> nbbs		1063879						
ANR	1064106	Symbol	false		1063879						
ANR	1064107	Symbol	i		1063879						
ANR	1064108	Symbol	r_str_word_get0		1063879						
ANR	1064109	Symbol	graph -> ebbs		1063879						
ANR	1064110	Symbol	graph		1063879						
ANR	1064111	Symbol	ptr		1063879						
ANR	1064112	Symbol	nargs		1063879						
ANR	1064113	Symbol	graph -> bbsum		1063879						
ANR	1064114	Symbol	true		1063879						
ANR	1064115	Symbol	* graph		1063879						
ANR	1064116	Symbol	graph -> cc		1063879						
ANR	1064117	Symbol	graph -> edges		1063879						
ANR	1064118	Symbol	args0		1063879						
ANR	1064119	Function	addCommentZign	238:0:7245:7421							
ANR	1064120	FunctionDef	"addCommentZign (RCore * core , const char * name , const char * args0 , int nargs)"		1064119	0					
ANR	1064121	CompoundStatement		238:88:7333:7421	1064119	0					
ANR	1064122	IdentifierDeclStatement	const char * comment = args0 ;	239:1:7336:7363	1064119	0	True				
ANR	1064123	IdentifierDecl	* comment = args0		1064119	0					
ANR	1064124	IdentifierDeclType	const char *		1064119	0					
ANR	1064125	Identifier	comment		1064119	1					
ANR	1064126	AssignmentExpression	* comment = args0		1064119	2		=			
ANR	1064127	Identifier	args0		1064119	0					
ANR	1064128	Identifier	args0		1064119	1					
ANR	1064129	ReturnStatement	"return r_sign_add_comment ( core -> anal , name , comment ) ;"	240:1:7366:7419	1064119	1	True				
ANR	1064130	CallExpression	"r_sign_add_comment ( core -> anal , name , comment )"		1064119	0					
ANR	1064131	Callee	r_sign_add_comment		1064119	0					
ANR	1064132	Identifier	r_sign_add_comment		1064119	0					
ANR	1064133	ArgumentList	core -> anal		1064119	1					
ANR	1064134	Argument	core -> anal		1064119	0					
ANR	1064135	PtrMemberAccess	core -> anal		1064119	0					
ANR	1064136	Identifier	core		1064119	0					
ANR	1064137	Identifier	anal		1064119	1					
ANR	1064138	Argument	name		1064119	1					
ANR	1064139	Identifier	name		1064119	0					
ANR	1064140	Argument	comment		1064119	2					
ANR	1064141	Identifier	comment		1064119	0					
ANR	1064142	ReturnType	static bool		1064119	1					
ANR	1064143	Identifier	addCommentZign		1064119	2					
ANR	1064144	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1064119	3					
ANR	1064145	Parameter	RCore * core	238:27:7272:7282	1064119	0	True				
ANR	1064146	ParameterType	RCore *		1064119	0					
ANR	1064147	Identifier	core		1064119	1					
ANR	1064148	Parameter	const char * name	238:40:7285:7300	1064119	1	True				
ANR	1064149	ParameterType	const char *		1064119	0					
ANR	1064150	Identifier	name		1064119	1					
ANR	1064151	Parameter	const char * args0	238:58:7303:7319	1064119	2	True				
ANR	1064152	ParameterType	const char *		1064119	0					
ANR	1064153	Identifier	args0		1064119	1					
ANR	1064154	Parameter	int nargs	238:77:7322:7330	1064119	3	True				
ANR	1064155	ParameterType	int		1064119	0					
ANR	1064156	Identifier	nargs		1064119	1					
ANR	1064157	CFGEntryNode	ENTRY		1064119		True				
ANR	1064158	CFGExitNode	EXIT		1064119		True				
ANR	1064159	Symbol	nargs		1064119						
ANR	1064160	Symbol	core		1064119						
ANR	1064161	Symbol	name		1064119						
ANR	1064162	Symbol	* core		1064119						
ANR	1064163	Symbol	comment		1064119						
ANR	1064164	Symbol	core -> anal		1064119						
ANR	1064165	Symbol	args0		1064119						
ANR	1064166	Symbol	r_sign_add_comment		1064119						
ANR	1064167	Function	addNameZign	243:0:7424:7617							
ANR	1064168	FunctionDef	"addNameZign (RCore * core , const char * name , const char * args0 , int nargs)"		1064167	0					
ANR	1064169	CompoundStatement		243:85:7509:7617	1064167	0					
ANR	1064170	IdentifierDeclStatement	"const char * realname = r_str_word_get0 ( args0 , 0 ) ;"	244:1:7512:7561	1064167	0	True				
ANR	1064171	IdentifierDecl	"* realname = r_str_word_get0 ( args0 , 0 )"		1064167	0					
ANR	1064172	IdentifierDeclType	const char *		1064167	0					
ANR	1064173	Identifier	realname		1064167	1					
ANR	1064174	AssignmentExpression	"* realname = r_str_word_get0 ( args0 , 0 )"		1064167	2		=			
ANR	1064175	Identifier	realname		1064167	0					
ANR	1064176	CallExpression	"r_str_word_get0 ( args0 , 0 )"		1064167	1					
ANR	1064177	Callee	r_str_word_get0		1064167	0					
ANR	1064178	Identifier	r_str_word_get0		1064167	0					
ANR	1064179	ArgumentList	args0		1064167	1					
ANR	1064180	Argument	args0		1064167	0					
ANR	1064181	Identifier	args0		1064167	0					
ANR	1064182	Argument	0		1064167	1					
ANR	1064183	PrimaryExpression	0		1064167	0					
ANR	1064184	ReturnStatement	"return r_sign_add_name ( core -> anal , name , realname ) ;"	245:1:7564:7615	1064167	1	True				
ANR	1064185	CallExpression	"r_sign_add_name ( core -> anal , name , realname )"		1064167	0					
ANR	1064186	Callee	r_sign_add_name		1064167	0					
ANR	1064187	Identifier	r_sign_add_name		1064167	0					
ANR	1064188	ArgumentList	core -> anal		1064167	1					
ANR	1064189	Argument	core -> anal		1064167	0					
ANR	1064190	PtrMemberAccess	core -> anal		1064167	0					
ANR	1064191	Identifier	core		1064167	0					
ANR	1064192	Identifier	anal		1064167	1					
ANR	1064193	Argument	name		1064167	1					
ANR	1064194	Identifier	name		1064167	0					
ANR	1064195	Argument	realname		1064167	2					
ANR	1064196	Identifier	realname		1064167	0					
ANR	1064197	ReturnType	static bool		1064167	1					
ANR	1064198	Identifier	addNameZign		1064167	2					
ANR	1064199	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1064167	3					
ANR	1064200	Parameter	RCore * core	243:24:7448:7458	1064167	0	True				
ANR	1064201	ParameterType	RCore *		1064167	0					
ANR	1064202	Identifier	core		1064167	1					
ANR	1064203	Parameter	const char * name	243:37:7461:7476	1064167	1	True				
ANR	1064204	ParameterType	const char *		1064167	0					
ANR	1064205	Identifier	name		1064167	1					
ANR	1064206	Parameter	const char * args0	243:55:7479:7495	1064167	2	True				
ANR	1064207	ParameterType	const char *		1064167	0					
ANR	1064208	Identifier	args0		1064167	1					
ANR	1064209	Parameter	int nargs	243:74:7498:7506	1064167	3	True				
ANR	1064210	ParameterType	int		1064167	0					
ANR	1064211	Identifier	nargs		1064167	1					
ANR	1064212	CFGEntryNode	ENTRY		1064167		True				
ANR	1064213	CFGExitNode	EXIT		1064167		True				
ANR	1064214	Symbol	nargs		1064167						
ANR	1064215	Symbol	core		1064167						
ANR	1064216	Symbol	name		1064167						
ANR	1064217	Symbol	* core		1064167						
ANR	1064218	Symbol	r_sign_add_name		1064167						
ANR	1064219	Symbol	r_str_word_get0		1064167						
ANR	1064220	Symbol	core -> anal		1064167						
ANR	1064221	Symbol	args0		1064167						
ANR	1064222	Symbol	realname		1064167						
ANR	1064223	Function	addGraphZign	248:0:7620:7896							
ANR	1064224	FunctionDef	"addGraphZign (RCore * core , const char * name , const char * args0 , int nargs)"		1064223	0					
ANR	1064225	CompoundStatement		248:86:7706:7896	1064223	0					
ANR	1064226	IdentifierDeclStatement	RSignGraph graph = { 0 } ;	249:1:7709:7731	1064223	0	True				
ANR	1064227	IdentifierDecl	graph = { 0 }		1064223	0					
ANR	1064228	IdentifierDeclType	RSignGraph		1064223	0					
ANR	1064229	Identifier	graph		1064223	1					
ANR	1064230	AssignmentExpression	graph = { 0 }		1064223	2		=			
ANR	1064231	Identifier	graph		1064223	0					
ANR	1064232	InitializerList	0		1064223	1					
ANR	1064233	PrimaryExpression	0		1064223	0					
ANR	1064234	IfStatement	"if ( ! parseGraphMetrics ( args0 , nargs , & graph ) )"		1064223	1					
ANR	1064235	Condition	"! parseGraphMetrics ( args0 , nargs , & graph )"	250:5:7738:7778	1064223	0	True				
ANR	1064236	UnaryOperationExpression	"! parseGraphMetrics ( args0 , nargs , & graph )"		1064223	0					
ANR	1064237	UnaryOperator	!		1064223	0					
ANR	1064238	CallExpression	"parseGraphMetrics ( args0 , nargs , & graph )"		1064223	1					
ANR	1064239	Callee	parseGraphMetrics		1064223	0					
ANR	1064240	Identifier	parseGraphMetrics		1064223	0					
ANR	1064241	ArgumentList	args0		1064223	1					
ANR	1064242	Argument	args0		1064223	0					
ANR	1064243	Identifier	args0		1064223	0					
ANR	1064244	Argument	nargs		1064223	1					
ANR	1064245	Identifier	nargs		1064223	0					
ANR	1064246	Argument	& graph		1064223	2					
ANR	1064247	UnaryOperationExpression	& graph		1064223	0					
ANR	1064248	UnaryOperator	&		1064223	0					
ANR	1064249	Identifier	graph		1064223	1					
ANR	1064250	CompoundStatement		3:48:74:74	1064223	1					
ANR	1064251	ExpressionStatement	"eprintf ( ""error: invalid arguments\\n"" )"	251:2:7785:7823	1064223	0	True				
ANR	1064252	CallExpression	"eprintf ( ""error: invalid arguments\\n"" )"		1064223	0					
ANR	1064253	Callee	eprintf		1064223	0					
ANR	1064254	Identifier	eprintf		1064223	0					
ANR	1064255	ArgumentList	"""error: invalid arguments\\n"""		1064223	1					
ANR	1064256	Argument	"""error: invalid arguments\\n"""		1064223	0					
ANR	1064257	PrimaryExpression	"""error: invalid arguments\\n"""		1064223	0					
ANR	1064258	ReturnStatement	return false ;	252:2:7827:7839	1064223	1	True				
ANR	1064259	Identifier	false		1064223	0					
ANR	1064260	ReturnStatement	"return r_sign_add_graph ( core -> anal , name , graph ) ;"	254:1:7845:7894	1064223	2	True				
ANR	1064261	CallExpression	"r_sign_add_graph ( core -> anal , name , graph )"		1064223	0					
ANR	1064262	Callee	r_sign_add_graph		1064223	0					
ANR	1064263	Identifier	r_sign_add_graph		1064223	0					
ANR	1064264	ArgumentList	core -> anal		1064223	1					
ANR	1064265	Argument	core -> anal		1064223	0					
ANR	1064266	PtrMemberAccess	core -> anal		1064223	0					
ANR	1064267	Identifier	core		1064223	0					
ANR	1064268	Identifier	anal		1064223	1					
ANR	1064269	Argument	name		1064223	1					
ANR	1064270	Identifier	name		1064223	0					
ANR	1064271	Argument	graph		1064223	2					
ANR	1064272	Identifier	graph		1064223	0					
ANR	1064273	ReturnType	static bool		1064223	1					
ANR	1064274	Identifier	addGraphZign		1064223	2					
ANR	1064275	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1064223	3					
ANR	1064276	Parameter	RCore * core	248:25:7645:7655	1064223	0	True				
ANR	1064277	ParameterType	RCore *		1064223	0					
ANR	1064278	Identifier	core		1064223	1					
ANR	1064279	Parameter	const char * name	248:38:7658:7673	1064223	1	True				
ANR	1064280	ParameterType	const char *		1064223	0					
ANR	1064281	Identifier	name		1064223	1					
ANR	1064282	Parameter	const char * args0	248:56:7676:7692	1064223	2	True				
ANR	1064283	ParameterType	const char *		1064223	0					
ANR	1064284	Identifier	args0		1064223	1					
ANR	1064285	Parameter	int nargs	248:75:7695:7703	1064223	3	True				
ANR	1064286	ParameterType	int		1064223	0					
ANR	1064287	Identifier	nargs		1064223	1					
ANR	1064288	CFGEntryNode	ENTRY		1064223		True				
ANR	1064289	CFGExitNode	EXIT		1064223		True				
ANR	1064290	Symbol	nargs		1064223						
ANR	1064291	Symbol	core		1064223						
ANR	1064292	Symbol	parseGraphMetrics		1064223						
ANR	1064293	Symbol	r_sign_add_graph		1064223						
ANR	1064294	Symbol	name		1064223						
ANR	1064295	Symbol	false		1064223						
ANR	1064296	Symbol	* core		1064223						
ANR	1064297	Symbol	& graph		1064223						
ANR	1064298	Symbol	core -> anal		1064223						
ANR	1064299	Symbol	graph		1064223						
ANR	1064300	Symbol	args0		1064223						
ANR	1064301	Function	addHashZign	257:0:7899:8151							
ANR	1064302	FunctionDef	"addHashZign (RCore * core , const char * name , int type , const char * args0 , int nargs)"		1064301	0					
ANR	1064303	CompoundStatement		257:95:7994:8151	1064301	0					
ANR	1064304	IfStatement	if ( ! args0 )		1064301	0					
ANR	1064305	Condition	! args0	258:5:8001:8006	1064301	0	True				
ANR	1064306	UnaryOperationExpression	! args0		1064301	0					
ANR	1064307	UnaryOperator	!		1064301	0					
ANR	1064308	Identifier	args0		1064301	1					
ANR	1064309	CompoundStatement		2:13:14:14	1064301	1					
ANR	1064310	ReturnStatement	return false ;	259:2:8013:8025	1064301	0	True				
ANR	1064311	Identifier	false		1064301	0					
ANR	1064312	IdentifierDeclStatement	int len = strlen ( args0 ) ;	261:1:8031:8055	1064301	1	True				
ANR	1064313	IdentifierDecl	len = strlen ( args0 )		1064301	0					
ANR	1064314	IdentifierDeclType	int		1064301	0					
ANR	1064315	Identifier	len		1064301	1					
ANR	1064316	AssignmentExpression	len = strlen ( args0 )		1064301	2		=			
ANR	1064317	Identifier	len		1064301	0					
ANR	1064318	CallExpression	strlen ( args0 )		1064301	1					
ANR	1064319	Callee	strlen		1064301	0					
ANR	1064320	Identifier	strlen		1064301	0					
ANR	1064321	ArgumentList	args0		1064301	1					
ANR	1064322	Argument	args0		1064301	0					
ANR	1064323	Identifier	args0		1064301	0					
ANR	1064324	IfStatement	if ( ! len )		1064301	2					
ANR	1064325	Condition	! len	262:5:8062:8065	1064301	0	True				
ANR	1064326	UnaryOperationExpression	! len		1064301	0					
ANR	1064327	UnaryOperator	!		1064301	0					
ANR	1064328	Identifier	len		1064301	1					
ANR	1064329	CompoundStatement		6:11:73:73	1064301	1					
ANR	1064330	ReturnStatement	return false ;	263:2:8072:8084	1064301	0	True				
ANR	1064331	Identifier	false		1064301	0					
ANR	1064332	ReturnStatement	"return r_sign_add_hash ( core -> anal , name , type , args0 , len ) ;"	265:1:8090:8149	1064301	3	True				
ANR	1064333	CallExpression	"r_sign_add_hash ( core -> anal , name , type , args0 , len )"		1064301	0					
ANR	1064334	Callee	r_sign_add_hash		1064301	0					
ANR	1064335	Identifier	r_sign_add_hash		1064301	0					
ANR	1064336	ArgumentList	core -> anal		1064301	1					
ANR	1064337	Argument	core -> anal		1064301	0					
ANR	1064338	PtrMemberAccess	core -> anal		1064301	0					
ANR	1064339	Identifier	core		1064301	0					
ANR	1064340	Identifier	anal		1064301	1					
ANR	1064341	Argument	name		1064301	1					
ANR	1064342	Identifier	name		1064301	0					
ANR	1064343	Argument	type		1064301	2					
ANR	1064344	Identifier	type		1064301	0					
ANR	1064345	Argument	args0		1064301	3					
ANR	1064346	Identifier	args0		1064301	0					
ANR	1064347	Argument	len		1064301	4					
ANR	1064348	Identifier	len		1064301	0					
ANR	1064349	ReturnType	static bool		1064301	1					
ANR	1064350	Identifier	addHashZign		1064301	2					
ANR	1064351	ParameterList	"RCore * core , const char * name , int type , const char * args0 , int nargs"		1064301	3					
ANR	1064352	Parameter	RCore * core	257:24:7923:7933	1064301	0	True				
ANR	1064353	ParameterType	RCore *		1064301	0					
ANR	1064354	Identifier	core		1064301	1					
ANR	1064355	Parameter	const char * name	257:37:7936:7951	1064301	1	True				
ANR	1064356	ParameterType	const char *		1064301	0					
ANR	1064357	Identifier	name		1064301	1					
ANR	1064358	Parameter	int type	257:55:7954:7961	1064301	2	True				
ANR	1064359	ParameterType	int		1064301	0					
ANR	1064360	Identifier	type		1064301	1					
ANR	1064361	Parameter	const char * args0	257:65:7964:7980	1064301	3	True				
ANR	1064362	ParameterType	const char *		1064301	0					
ANR	1064363	Identifier	args0		1064301	1					
ANR	1064364	Parameter	int nargs	257:84:7983:7991	1064301	4	True				
ANR	1064365	ParameterType	int		1064301	0					
ANR	1064366	Identifier	nargs		1064301	1					
ANR	1064367	CFGEntryNode	ENTRY		1064301		True				
ANR	1064368	CFGExitNode	EXIT		1064301		True				
ANR	1064369	Symbol	nargs		1064301						
ANR	1064370	Symbol	core		1064301						
ANR	1064371	Symbol	strlen		1064301						
ANR	1064372	Symbol	len		1064301						
ANR	1064373	Symbol	r_sign_add_hash		1064301						
ANR	1064374	Symbol	name		1064301						
ANR	1064375	Symbol	false		1064301						
ANR	1064376	Symbol	* core		1064301						
ANR	1064377	Symbol	type		1064301						
ANR	1064378	Symbol	core -> anal		1064301						
ANR	1064379	Symbol	args0		1064301						
ANR	1064380	Function	addBytesZign	268:0:8154:9568							
ANR	1064381	FunctionDef	"addBytesZign (RCore * core , const char * name , int type , const char * args0 , int nargs)"		1064380	0					
ANR	1064382	CompoundStatement		268:96:8250:9568	1064380	0					
ANR	1064383	IdentifierDeclStatement	const char * hexbytes = NULL ;	269:1:8253:8280	1064380	0	True				
ANR	1064384	IdentifierDecl	* hexbytes = NULL		1064380	0					
ANR	1064385	IdentifierDeclType	const char *		1064380	0					
ANR	1064386	Identifier	hexbytes		1064380	1					
ANR	1064387	AssignmentExpression	* hexbytes = NULL		1064380	2		=			
ANR	1064388	Identifier	NULL		1064380	0					
ANR	1064389	Identifier	NULL		1064380	1					
ANR	1064390	IdentifierDeclStatement	"ut8 * mask = NULL , * bytes = NULL , * sep = NULL ;"	270:1:8283:8327	1064380	1	True				
ANR	1064391	IdentifierDecl	* mask = NULL		1064380	0					
ANR	1064392	IdentifierDeclType	ut8 *		1064380	0					
ANR	1064393	Identifier	mask		1064380	1					
ANR	1064394	AssignmentExpression	* mask = NULL		1064380	2		=			
ANR	1064395	Identifier	NULL		1064380	0					
ANR	1064396	Identifier	NULL		1064380	1					
ANR	1064397	IdentifierDecl	* bytes = NULL		1064380	1					
ANR	1064398	IdentifierDeclType	ut8 *		1064380	0					
ANR	1064399	Identifier	bytes		1064380	1					
ANR	1064400	AssignmentExpression	* bytes = NULL		1064380	2		=			
ANR	1064401	Identifier	NULL		1064380	0					
ANR	1064402	Identifier	NULL		1064380	1					
ANR	1064403	IdentifierDecl	* sep = NULL		1064380	2					
ANR	1064404	IdentifierDeclType	ut8 *		1064380	0					
ANR	1064405	Identifier	sep		1064380	1					
ANR	1064406	AssignmentExpression	* sep = NULL		1064380	2		=			
ANR	1064407	Identifier	NULL		1064380	0					
ANR	1064408	Identifier	NULL		1064380	1					
ANR	1064409	IdentifierDeclStatement	"int size = 0 , blen = 0 ;"	271:1:8330:8352	1064380	2	True				
ANR	1064410	IdentifierDecl	size = 0		1064380	0					
ANR	1064411	IdentifierDeclType	int		1064380	0					
ANR	1064412	Identifier	size		1064380	1					
ANR	1064413	AssignmentExpression	size = 0		1064380	2		=			
ANR	1064414	Identifier	size		1064380	0					
ANR	1064415	PrimaryExpression	0		1064380	1					
ANR	1064416	IdentifierDecl	blen = 0		1064380	1					
ANR	1064417	IdentifierDeclType	int		1064380	0					
ANR	1064418	Identifier	blen		1064380	1					
ANR	1064419	AssignmentExpression	blen = 0		1064380	2		=			
ANR	1064420	Identifier	blen		1064380	0					
ANR	1064421	PrimaryExpression	0		1064380	1					
ANR	1064422	IdentifierDeclStatement	bool retval = true ;	272:1:8355:8373	1064380	3	True				
ANR	1064423	IdentifierDecl	retval = true		1064380	0					
ANR	1064424	IdentifierDeclType	bool		1064380	0					
ANR	1064425	Identifier	retval		1064380	1					
ANR	1064426	AssignmentExpression	retval = true		1064380	2		=			
ANR	1064427	Identifier	true		1064380	0					
ANR	1064428	Identifier	true		1064380	1					
ANR	1064429	IfStatement	if ( nargs != 1 )		1064380	4					
ANR	1064430	Condition	nargs != 1	274:5:8381:8390	1064380	0	True				
ANR	1064431	EqualityExpression	nargs != 1		1064380	0		!=			
ANR	1064432	Identifier	nargs		1064380	0					
ANR	1064433	PrimaryExpression	1		1064380	1					
ANR	1064434	CompoundStatement		7:17:142:142	1064380	1					
ANR	1064435	ExpressionStatement	"eprintf ( ""error: invalid syntax\\n"" )"	275:2:8397:8432	1064380	0	True				
ANR	1064436	CallExpression	"eprintf ( ""error: invalid syntax\\n"" )"		1064380	0					
ANR	1064437	Callee	eprintf		1064380	0					
ANR	1064438	Identifier	eprintf		1064380	0					
ANR	1064439	ArgumentList	"""error: invalid syntax\\n"""		1064380	1					
ANR	1064440	Argument	"""error: invalid syntax\\n"""		1064380	0					
ANR	1064441	PrimaryExpression	"""error: invalid syntax\\n"""		1064380	0					
ANR	1064442	ExpressionStatement	retval = false	276:2:8436:8450	1064380	1	True				
ANR	1064443	AssignmentExpression	retval = false		1064380	0		=			
ANR	1064444	Identifier	retval		1064380	0					
ANR	1064445	Identifier	false		1064380	1					
ANR	1064446	GotoStatement	goto out ;	277:2:8454:8462	1064380	2	True				
ANR	1064447	Identifier	out		1064380	0					
ANR	1064448	ExpressionStatement	"hexbytes = r_str_word_get0 ( args0 , 0 )"	280:1:8469:8506	1064380	5	True				
ANR	1064449	AssignmentExpression	"hexbytes = r_str_word_get0 ( args0 , 0 )"		1064380	0		=			
ANR	1064450	Identifier	hexbytes		1064380	0					
ANR	1064451	CallExpression	"r_str_word_get0 ( args0 , 0 )"		1064380	1					
ANR	1064452	Callee	r_str_word_get0		1064380	0					
ANR	1064453	Identifier	r_str_word_get0		1064380	0					
ANR	1064454	ArgumentList	args0		1064380	1					
ANR	1064455	Argument	args0		1064380	0					
ANR	1064456	Identifier	args0		1064380	0					
ANR	1064457	Argument	0		1064380	1					
ANR	1064458	PrimaryExpression	0		1064380	0					
ANR	1064459	IfStatement	"if ( ( sep = ( ut8 * ) strchr ( hexbytes , ':' ) ) )"		1064380	6					
ANR	1064460	Condition	"sep = ( ut8 * ) strchr ( hexbytes , ':' )"	281:5:8513:8549	1064380	0	True				
ANR	1064461	AssignmentExpression	"sep = ( ut8 * ) strchr ( hexbytes , ':' )"		1064380	0		=			
ANR	1064462	Identifier	sep		1064380	0					
ANR	1064463	CastExpression	"( ut8 * ) strchr ( hexbytes , ':' )"		1064380	1					
ANR	1064464	CastTarget	ut8 *		1064380	0					
ANR	1064465	CallExpression	"strchr ( hexbytes , ':' )"		1064380	1					
ANR	1064466	Callee	strchr		1064380	0					
ANR	1064467	Identifier	strchr		1064380	0					
ANR	1064468	ArgumentList	hexbytes		1064380	1					
ANR	1064469	Argument	hexbytes		1064380	0					
ANR	1064470	Identifier	hexbytes		1064380	0					
ANR	1064471	Argument	':'		1064380	1					
ANR	1064472	PrimaryExpression	':'		1064380	0					
ANR	1064473	CompoundStatement		14:44:301:301	1064380	1					
ANR	1064474	ExpressionStatement	blen = sep - ( ut8 * ) hexbytes	282:2:8556:8584	1064380	0	True				
ANR	1064475	AssignmentExpression	blen = sep - ( ut8 * ) hexbytes		1064380	0		=			
ANR	1064476	Identifier	blen		1064380	0					
ANR	1064477	AdditiveExpression	sep - ( ut8 * ) hexbytes		1064380	1		-			
ANR	1064478	Identifier	sep		1064380	0					
ANR	1064479	CastExpression	( ut8 * ) hexbytes		1064380	1					
ANR	1064480	CastTarget	ut8 *		1064380	0					
ANR	1064481	Identifier	hexbytes		1064380	1					
ANR	1064482	IfStatement	if ( ! blen || ( blen & 1 ) || strlen ( ( char * ) ++ sep ) != blen )		1064380	1					
ANR	1064483	Condition	! blen || ( blen & 1 ) || strlen ( ( char * ) ++ sep ) != blen	283:6:8592:8644	1064380	0	True				
ANR	1064484	OrExpression	! blen || ( blen & 1 ) || strlen ( ( char * ) ++ sep ) != blen		1064380	0		||			
ANR	1064485	UnaryOperationExpression	! blen		1064380	0					
ANR	1064486	UnaryOperator	!		1064380	0					
ANR	1064487	Identifier	blen		1064380	1					
ANR	1064488	OrExpression	( blen & 1 ) || strlen ( ( char * ) ++ sep ) != blen		1064380	1		||			
ANR	1064489	BitAndExpression	blen & 1		1064380	0		&			
ANR	1064490	Identifier	blen		1064380	0					
ANR	1064491	PrimaryExpression	1		1064380	1					
ANR	1064492	EqualityExpression	strlen ( ( char * ) ++ sep ) != blen		1064380	1		!=			
ANR	1064493	CallExpression	strlen ( ( char * ) ++ sep )		1064380	0					
ANR	1064494	Callee	strlen		1064380	0					
ANR	1064495	Identifier	strlen		1064380	0					
ANR	1064496	ArgumentList	( char * ) ++ sep		1064380	1					
ANR	1064497	Argument	( char * ) ++ sep		1064380	0					
ANR	1064498	CastExpression	( char * ) ++ sep		1064380	0					
ANR	1064499	CastTarget	char *		1064380	0					
ANR	1064500	UnaryExpression	++ sep		1064380	1					
ANR	1064501	IncDec	++		1064380	0					
ANR	1064502	Identifier	sep		1064380	1					
ANR	1064503	Identifier	blen		1064380	1					
ANR	1064504	CompoundStatement		16:61:396:396	1064380	1					
ANR	1064505	ExpressionStatement	"eprintf ( ""error: cannot parse hexpairs\\n"" )"	284:3:8652:8694	1064380	0	True				
ANR	1064506	CallExpression	"eprintf ( ""error: cannot parse hexpairs\\n"" )"		1064380	0					
ANR	1064507	Callee	eprintf		1064380	0					
ANR	1064508	Identifier	eprintf		1064380	0					
ANR	1064509	ArgumentList	"""error: cannot parse hexpairs\\n"""		1064380	1					
ANR	1064510	Argument	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064511	PrimaryExpression	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064512	ExpressionStatement	retval = false	285:3:8699:8713	1064380	1	True				
ANR	1064513	AssignmentExpression	retval = false		1064380	0		=			
ANR	1064514	Identifier	retval		1064380	0					
ANR	1064515	Identifier	false		1064380	1					
ANR	1064516	GotoStatement	goto out ;	286:3:8718:8726	1064380	2	True				
ANR	1064517	Identifier	out		1064380	0					
ANR	1064518	ExpressionStatement	"bytes = calloc ( 1 , blen + 1 )"	288:2:8734:8762	1064380	2	True				
ANR	1064519	AssignmentExpression	"bytes = calloc ( 1 , blen + 1 )"		1064380	0		=			
ANR	1064520	Identifier	bytes		1064380	0					
ANR	1064521	CallExpression	"calloc ( 1 , blen + 1 )"		1064380	1					
ANR	1064522	Callee	calloc		1064380	0					
ANR	1064523	Identifier	calloc		1064380	0					
ANR	1064524	ArgumentList	1		1064380	1					
ANR	1064525	Argument	1		1064380	0					
ANR	1064526	PrimaryExpression	1		1064380	0					
ANR	1064527	Argument	blen + 1		1064380	1					
ANR	1064528	AdditiveExpression	blen + 1		1064380	0		+			
ANR	1064529	Identifier	blen		1064380	0					
ANR	1064530	PrimaryExpression	1		1064380	1					
ANR	1064531	ExpressionStatement	"mask = calloc ( 1 , blen + 1 )"	289:2:8766:8793	1064380	3	True				
ANR	1064532	AssignmentExpression	"mask = calloc ( 1 , blen + 1 )"		1064380	0		=			
ANR	1064533	Identifier	mask		1064380	0					
ANR	1064534	CallExpression	"calloc ( 1 , blen + 1 )"		1064380	1					
ANR	1064535	Callee	calloc		1064380	0					
ANR	1064536	Identifier	calloc		1064380	0					
ANR	1064537	ArgumentList	1		1064380	1					
ANR	1064538	Argument	1		1064380	0					
ANR	1064539	PrimaryExpression	1		1064380	0					
ANR	1064540	Argument	blen + 1		1064380	1					
ANR	1064541	AdditiveExpression	blen + 1		1064380	0		+			
ANR	1064542	Identifier	blen		1064380	0					
ANR	1064543	PrimaryExpression	1		1064380	1					
ANR	1064544	ExpressionStatement	"memcpy ( bytes , hexbytes , blen )"	290:2:8797:8827	1064380	4	True				
ANR	1064545	CallExpression	"memcpy ( bytes , hexbytes , blen )"		1064380	0					
ANR	1064546	Callee	memcpy		1064380	0					
ANR	1064547	Identifier	memcpy		1064380	0					
ANR	1064548	ArgumentList	bytes		1064380	1					
ANR	1064549	Argument	bytes		1064380	0					
ANR	1064550	Identifier	bytes		1064380	0					
ANR	1064551	Argument	hexbytes		1064380	1					
ANR	1064552	Identifier	hexbytes		1064380	0					
ANR	1064553	Argument	blen		1064380	2					
ANR	1064554	Identifier	blen		1064380	0					
ANR	1064555	ExpressionStatement	"memcpy ( mask , sep , blen )"	291:2:8831:8855	1064380	5	True				
ANR	1064556	CallExpression	"memcpy ( mask , sep , blen )"		1064380	0					
ANR	1064557	Callee	memcpy		1064380	0					
ANR	1064558	Identifier	memcpy		1064380	0					
ANR	1064559	ArgumentList	mask		1064380	1					
ANR	1064560	Argument	mask		1064380	0					
ANR	1064561	Identifier	mask		1064380	0					
ANR	1064562	Argument	sep		1064380	1					
ANR	1064563	Identifier	sep		1064380	0					
ANR	1064564	Argument	blen		1064380	2					
ANR	1064565	Identifier	blen		1064380	0					
ANR	1064566	ExpressionStatement	"size = r_hex_str2bin ( ( char * ) bytes , bytes )"	292:2:8859:8902	1064380	6	True				
ANR	1064567	AssignmentExpression	"size = r_hex_str2bin ( ( char * ) bytes , bytes )"		1064380	0		=			
ANR	1064568	Identifier	size		1064380	0					
ANR	1064569	CallExpression	"r_hex_str2bin ( ( char * ) bytes , bytes )"		1064380	1					
ANR	1064570	Callee	r_hex_str2bin		1064380	0					
ANR	1064571	Identifier	r_hex_str2bin		1064380	0					
ANR	1064572	ArgumentList	( char * ) bytes		1064380	1					
ANR	1064573	Argument	( char * ) bytes		1064380	0					
ANR	1064574	CastExpression	( char * ) bytes		1064380	0					
ANR	1064575	CastTarget	char *		1064380	0					
ANR	1064576	Identifier	bytes		1064380	1					
ANR	1064577	Argument	bytes		1064380	1					
ANR	1064578	Identifier	bytes		1064380	0					
ANR	1064579	IfStatement	"if ( size != blen / 2 || r_hex_str2bin ( ( char * ) mask , mask ) != size )"		1064380	7					
ANR	1064580	Condition	"size != blen / 2 || r_hex_str2bin ( ( char * ) mask , mask ) != size"	293:6:8910:8971	1064380	0	True				
ANR	1064581	OrExpression	"size != blen / 2 || r_hex_str2bin ( ( char * ) mask , mask ) != size"		1064380	0		||			
ANR	1064582	EqualityExpression	size != blen / 2		1064380	0		!=			
ANR	1064583	Identifier	size		1064380	0					
ANR	1064584	MultiplicativeExpression	blen / 2		1064380	1		/			
ANR	1064585	Identifier	blen		1064380	0					
ANR	1064586	PrimaryExpression	2		1064380	1					
ANR	1064587	EqualityExpression	"r_hex_str2bin ( ( char * ) mask , mask ) != size"		1064380	1		!=			
ANR	1064588	CallExpression	"r_hex_str2bin ( ( char * ) mask , mask )"		1064380	0					
ANR	1064589	Callee	r_hex_str2bin		1064380	0					
ANR	1064590	Identifier	r_hex_str2bin		1064380	0					
ANR	1064591	ArgumentList	( char * ) mask		1064380	1					
ANR	1064592	Argument	( char * ) mask		1064380	0					
ANR	1064593	CastExpression	( char * ) mask		1064380	0					
ANR	1064594	CastTarget	char *		1064380	0					
ANR	1064595	Identifier	mask		1064380	1					
ANR	1064596	Argument	mask		1064380	1					
ANR	1064597	Identifier	mask		1064380	0					
ANR	1064598	Identifier	size		1064380	1					
ANR	1064599	CompoundStatement		26:70:723:723	1064380	1					
ANR	1064600	ExpressionStatement	"eprintf ( ""error: cannot parse hexpairs\\n"" )"	294:3:8979:9021	1064380	0	True				
ANR	1064601	CallExpression	"eprintf ( ""error: cannot parse hexpairs\\n"" )"		1064380	0					
ANR	1064602	Callee	eprintf		1064380	0					
ANR	1064603	Identifier	eprintf		1064380	0					
ANR	1064604	ArgumentList	"""error: cannot parse hexpairs\\n"""		1064380	1					
ANR	1064605	Argument	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064606	PrimaryExpression	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064607	ExpressionStatement	retval = false	295:3:9026:9040	1064380	1	True				
ANR	1064608	AssignmentExpression	retval = false		1064380	0		=			
ANR	1064609	Identifier	retval		1064380	0					
ANR	1064610	Identifier	false		1064380	1					
ANR	1064611	GotoStatement	goto out ;	296:3:9045:9053	1064380	2	True				
ANR	1064612	Identifier	out		1064380	0					
ANR	1064613	ElseStatement	else		1064380	0					
ANR	1064614	CompoundStatement		31:8:816:816	1064380	0					
ANR	1064615	ExpressionStatement	blen = strlen ( hexbytes ) + 4	299:2:9071:9099	1064380	0	True				
ANR	1064616	AssignmentExpression	blen = strlen ( hexbytes ) + 4		1064380	0		=			
ANR	1064617	Identifier	blen		1064380	0					
ANR	1064618	AdditiveExpression	strlen ( hexbytes ) + 4		1064380	1		+			
ANR	1064619	CallExpression	strlen ( hexbytes )		1064380	0					
ANR	1064620	Callee	strlen		1064380	0					
ANR	1064621	Identifier	strlen		1064380	0					
ANR	1064622	ArgumentList	hexbytes		1064380	1					
ANR	1064623	Argument	hexbytes		1064380	0					
ANR	1064624	Identifier	hexbytes		1064380	0					
ANR	1064625	PrimaryExpression	4		1064380	1					
ANR	1064626	ExpressionStatement	bytes = malloc ( blen )	300:2:9103:9124	1064380	1	True				
ANR	1064627	AssignmentExpression	bytes = malloc ( blen )		1064380	0		=			
ANR	1064628	Identifier	bytes		1064380	0					
ANR	1064629	CallExpression	malloc ( blen )		1064380	1					
ANR	1064630	Callee	malloc		1064380	0					
ANR	1064631	Identifier	malloc		1064380	0					
ANR	1064632	ArgumentList	blen		1064380	1					
ANR	1064633	Argument	blen		1064380	0					
ANR	1064634	Identifier	blen		1064380	0					
ANR	1064635	ExpressionStatement	mask = malloc ( blen )	301:2:9128:9148	1064380	2	True				
ANR	1064636	AssignmentExpression	mask = malloc ( blen )		1064380	0		=			
ANR	1064637	Identifier	mask		1064380	0					
ANR	1064638	CallExpression	malloc ( blen )		1064380	1					
ANR	1064639	Callee	malloc		1064380	0					
ANR	1064640	Identifier	malloc		1064380	0					
ANR	1064641	ArgumentList	blen		1064380	1					
ANR	1064642	Argument	blen		1064380	0					
ANR	1064643	Identifier	blen		1064380	0					
ANR	1064644	ExpressionStatement	"size = r_hex_str2binmask ( hexbytes , bytes , mask )"	303:2:9153:9201	1064380	3	True				
ANR	1064645	AssignmentExpression	"size = r_hex_str2binmask ( hexbytes , bytes , mask )"		1064380	0		=			
ANR	1064646	Identifier	size		1064380	0					
ANR	1064647	CallExpression	"r_hex_str2binmask ( hexbytes , bytes , mask )"		1064380	1					
ANR	1064648	Callee	r_hex_str2binmask		1064380	0					
ANR	1064649	Identifier	r_hex_str2binmask		1064380	0					
ANR	1064650	ArgumentList	hexbytes		1064380	1					
ANR	1064651	Argument	hexbytes		1064380	0					
ANR	1064652	Identifier	hexbytes		1064380	0					
ANR	1064653	Argument	bytes		1064380	1					
ANR	1064654	Identifier	bytes		1064380	0					
ANR	1064655	Argument	mask		1064380	2					
ANR	1064656	Identifier	mask		1064380	0					
ANR	1064657	IfStatement	if ( size <= 0 )		1064380	4					
ANR	1064658	Condition	size <= 0	304:6:9209:9217	1064380	0	True				
ANR	1064659	RelationalExpression	size <= 0		1064380	0		<=			
ANR	1064660	Identifier	size		1064380	0					
ANR	1064661	PrimaryExpression	0		1064380	1					
ANR	1064662	CompoundStatement		37:17:969:969	1064380	1					
ANR	1064663	ExpressionStatement	"eprintf ( ""error: cannot parse hexpairs\\n"" )"	305:3:9225:9267	1064380	0	True				
ANR	1064664	CallExpression	"eprintf ( ""error: cannot parse hexpairs\\n"" )"		1064380	0					
ANR	1064665	Callee	eprintf		1064380	0					
ANR	1064666	Identifier	eprintf		1064380	0					
ANR	1064667	ArgumentList	"""error: cannot parse hexpairs\\n"""		1064380	1					
ANR	1064668	Argument	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064669	PrimaryExpression	"""error: cannot parse hexpairs\\n"""		1064380	0					
ANR	1064670	ExpressionStatement	retval = false	306:3:9272:9286	1064380	1	True				
ANR	1064671	AssignmentExpression	retval = false		1064380	0		=			
ANR	1064672	Identifier	retval		1064380	0					
ANR	1064673	Identifier	false		1064380	1					
ANR	1064674	GotoStatement	goto out ;	307:3:9291:9299	1064380	2	True				
ANR	1064675	Identifier	out		1064380	0					
ANR	1064676	SwitchStatement	switch ( type )		1064380	7					
ANR	1064677	Condition	type	311:9:9318:9321	1064380	0	True				
ANR	1064678	Identifier	type		1064380	0					
ANR	1064679	CompoundStatement		44:15:1073:1073	1064380	1					
ANR	1064680	Label	case R_SIGN_BYTES :	312:1:9327:9344	1064380	0	True				
ANR	1064681	Identifier	R_SIGN_BYTES		1064380	0					
ANR	1064682	ExpressionStatement	"retval = r_sign_add_bytes ( core -> anal , name , size , bytes , mask )"	313:2:9348:9411	1064380	1	True				
ANR	1064683	AssignmentExpression	"retval = r_sign_add_bytes ( core -> anal , name , size , bytes , mask )"		1064380	0		=			
ANR	1064684	Identifier	retval		1064380	0					
ANR	1064685	CallExpression	"r_sign_add_bytes ( core -> anal , name , size , bytes , mask )"		1064380	1					
ANR	1064686	Callee	r_sign_add_bytes		1064380	0					
ANR	1064687	Identifier	r_sign_add_bytes		1064380	0					
ANR	1064688	ArgumentList	core -> anal		1064380	1					
ANR	1064689	Argument	core -> anal		1064380	0					
ANR	1064690	PtrMemberAccess	core -> anal		1064380	0					
ANR	1064691	Identifier	core		1064380	0					
ANR	1064692	Identifier	anal		1064380	1					
ANR	1064693	Argument	name		1064380	1					
ANR	1064694	Identifier	name		1064380	0					
ANR	1064695	Argument	size		1064380	2					
ANR	1064696	Identifier	size		1064380	0					
ANR	1064697	Argument	bytes		1064380	3					
ANR	1064698	Identifier	bytes		1064380	0					
ANR	1064699	Argument	mask		1064380	4					
ANR	1064700	Identifier	mask		1064380	0					
ANR	1064701	BreakStatement	break ;	314:2:9415:9420	1064380	2	True				
ANR	1064702	Label	case R_SIGN_ANAL :	315:1:9423:9439	1064380	3	True				
ANR	1064703	Identifier	R_SIGN_ANAL		1064380	0					
ANR	1064704	ExpressionStatement	"retval = r_sign_add_anal ( core -> anal , name , size , bytes , 0 )"	316:2:9443:9502	1064380	4	True				
ANR	1064705	AssignmentExpression	"retval = r_sign_add_anal ( core -> anal , name , size , bytes , 0 )"		1064380	0		=			
ANR	1064706	Identifier	retval		1064380	0					
ANR	1064707	CallExpression	"r_sign_add_anal ( core -> anal , name , size , bytes , 0 )"		1064380	1					
ANR	1064708	Callee	r_sign_add_anal		1064380	0					
ANR	1064709	Identifier	r_sign_add_anal		1064380	0					
ANR	1064710	ArgumentList	core -> anal		1064380	1					
ANR	1064711	Argument	core -> anal		1064380	0					
ANR	1064712	PtrMemberAccess	core -> anal		1064380	0					
ANR	1064713	Identifier	core		1064380	0					
ANR	1064714	Identifier	anal		1064380	1					
ANR	1064715	Argument	name		1064380	1					
ANR	1064716	Identifier	name		1064380	0					
ANR	1064717	Argument	size		1064380	2					
ANR	1064718	Identifier	size		1064380	0					
ANR	1064719	Argument	bytes		1064380	3					
ANR	1064720	Identifier	bytes		1064380	0					
ANR	1064721	Argument	0		1064380	4					
ANR	1064722	PrimaryExpression	0		1064380	0					
ANR	1064723	BreakStatement	break ;	317:2:9506:9511	1064380	5	True				
ANR	1064724	Label	out :	320:0:9517:9520	1064380	8	True				
ANR	1064725	Identifier	out		1064380	0					
ANR	1064726	ExpressionStatement	free ( bytes )	321:1:9523:9535	1064380	9	True				
ANR	1064727	CallExpression	free ( bytes )		1064380	0					
ANR	1064728	Callee	free		1064380	0					
ANR	1064729	Identifier	free		1064380	0					
ANR	1064730	ArgumentList	bytes		1064380	1					
ANR	1064731	Argument	bytes		1064380	0					
ANR	1064732	Identifier	bytes		1064380	0					
ANR	1064733	ExpressionStatement	free ( mask )	322:1:9538:9549	1064380	10	True				
ANR	1064734	CallExpression	free ( mask )		1064380	0					
ANR	1064735	Callee	free		1064380	0					
ANR	1064736	Identifier	free		1064380	0					
ANR	1064737	ArgumentList	mask		1064380	1					
ANR	1064738	Argument	mask		1064380	0					
ANR	1064739	Identifier	mask		1064380	0					
ANR	1064740	ReturnStatement	return retval ;	324:1:9553:9566	1064380	11	True				
ANR	1064741	Identifier	retval		1064380	0					
ANR	1064742	ReturnType	static bool		1064380	1					
ANR	1064743	Identifier	addBytesZign		1064380	2					
ANR	1064744	ParameterList	"RCore * core , const char * name , int type , const char * args0 , int nargs"		1064380	3					
ANR	1064745	Parameter	RCore * core	268:25:8179:8189	1064380	0	True				
ANR	1064746	ParameterType	RCore *		1064380	0					
ANR	1064747	Identifier	core		1064380	1					
ANR	1064748	Parameter	const char * name	268:38:8192:8207	1064380	1	True				
ANR	1064749	ParameterType	const char *		1064380	0					
ANR	1064750	Identifier	name		1064380	1					
ANR	1064751	Parameter	int type	268:56:8210:8217	1064380	2	True				
ANR	1064752	ParameterType	int		1064380	0					
ANR	1064753	Identifier	type		1064380	1					
ANR	1064754	Parameter	const char * args0	268:66:8220:8236	1064380	3	True				
ANR	1064755	ParameterType	const char *		1064380	0					
ANR	1064756	Identifier	args0		1064380	1					
ANR	1064757	Parameter	int nargs	268:85:8239:8247	1064380	4	True				
ANR	1064758	ParameterType	int		1064380	0					
ANR	1064759	Identifier	nargs		1064380	1					
ANR	1064760	CFGEntryNode	ENTRY		1064380		True				
ANR	1064761	CFGExitNode	EXIT		1064380		True				
ANR	1064762	Symbol	hexbytes		1064380						
ANR	1064763	Symbol	r_hex_str2binmask		1064380						
ANR	1064764	Symbol	* core		1064380						
ANR	1064765	Symbol	strchr		1064380						
ANR	1064766	Symbol	calloc		1064380						
ANR	1064767	Symbol	type		1064380						
ANR	1064768	Symbol	core -> anal		1064380						
ANR	1064769	Symbol	strlen		1064380						
ANR	1064770	Symbol	blen		1064380						
ANR	1064771	Symbol	r_hex_str2bin		1064380						
ANR	1064772	Symbol	mask		1064380						
ANR	1064773	Symbol	sep		1064380						
ANR	1064774	Symbol	malloc		1064380						
ANR	1064775	Symbol	NULL		1064380						
ANR	1064776	Symbol	false		1064380						
ANR	1064777	Symbol	r_str_word_get0		1064380						
ANR	1064778	Symbol	r_sign_add_anal		1064380						
ANR	1064779	Symbol	retval		1064380						
ANR	1064780	Symbol	nargs		1064380						
ANR	1064781	Symbol	core		1064380						
ANR	1064782	Symbol	size		1064380						
ANR	1064783	Symbol	r_sign_add_bytes		1064380						
ANR	1064784	Symbol	bytes		1064380						
ANR	1064785	Symbol	name		1064380						
ANR	1064786	Symbol	true		1064380						
ANR	1064787	Symbol	args0		1064380						
ANR	1064788	Function	addOffsetZign	327:0:9571:9924							
ANR	1064789	FunctionDef	"addOffsetZign (RCore * core , const char * name , const char * args0 , int nargs)"		1064788	0					
ANR	1064790	CompoundStatement		327:87:9658:9924	1064788	0					
ANR	1064791	IdentifierDeclStatement	const char * offstr = NULL ;	328:1:9661:9686	1064788	0	True				
ANR	1064792	IdentifierDecl	* offstr = NULL		1064788	0					
ANR	1064793	IdentifierDeclType	const char *		1064788	0					
ANR	1064794	Identifier	offstr		1064788	1					
ANR	1064795	AssignmentExpression	* offstr = NULL		1064788	2		=			
ANR	1064796	Identifier	NULL		1064788	0					
ANR	1064797	Identifier	NULL		1064788	1					
ANR	1064798	IdentifierDeclStatement	ut64 offset = UT64_MAX ;	329:1:9689:9711	1064788	1	True				
ANR	1064799	IdentifierDecl	offset = UT64_MAX		1064788	0					
ANR	1064800	IdentifierDeclType	ut64		1064788	0					
ANR	1064801	Identifier	offset		1064788	1					
ANR	1064802	AssignmentExpression	offset = UT64_MAX		1064788	2		=			
ANR	1064803	Identifier	UT64_MAX		1064788	0					
ANR	1064804	Identifier	UT64_MAX		1064788	1					
ANR	1064805	IfStatement	if ( nargs != 1 )		1064788	2					
ANR	1064806	Condition	nargs != 1	331:5:9719:9728	1064788	0	True				
ANR	1064807	EqualityExpression	nargs != 1		1064788	0		!=			
ANR	1064808	Identifier	nargs		1064788	0					
ANR	1064809	PrimaryExpression	1		1064788	1					
ANR	1064810	CompoundStatement		5:17:72:72	1064788	1					
ANR	1064811	ExpressionStatement	"eprintf ( ""error: invalid syntax\\n"" )"	332:2:9735:9770	1064788	0	True				
ANR	1064812	CallExpression	"eprintf ( ""error: invalid syntax\\n"" )"		1064788	0					
ANR	1064813	Callee	eprintf		1064788	0					
ANR	1064814	Identifier	eprintf		1064788	0					
ANR	1064815	ArgumentList	"""error: invalid syntax\\n"""		1064788	1					
ANR	1064816	Argument	"""error: invalid syntax\\n"""		1064788	0					
ANR	1064817	PrimaryExpression	"""error: invalid syntax\\n"""		1064788	0					
ANR	1064818	ReturnStatement	return false ;	333:2:9774:9786	1064788	1	True				
ANR	1064819	Identifier	false		1064788	0					
ANR	1064820	ExpressionStatement	"offstr = r_str_word_get0 ( args0 , 0 )"	336:1:9793:9828	1064788	3	True				
ANR	1064821	AssignmentExpression	"offstr = r_str_word_get0 ( args0 , 0 )"		1064788	0		=			
ANR	1064822	Identifier	offstr		1064788	0					
ANR	1064823	CallExpression	"r_str_word_get0 ( args0 , 0 )"		1064788	1					
ANR	1064824	Callee	r_str_word_get0		1064788	0					
ANR	1064825	Identifier	r_str_word_get0		1064788	0					
ANR	1064826	ArgumentList	args0		1064788	1					
ANR	1064827	Argument	args0		1064788	0					
ANR	1064828	Identifier	args0		1064788	0					
ANR	1064829	Argument	0		1064788	1					
ANR	1064830	PrimaryExpression	0		1064788	0					
ANR	1064831	ExpressionStatement	"offset = r_num_get ( core -> num , offstr )"	337:1:9831:9869	1064788	4	True				
ANR	1064832	AssignmentExpression	"offset = r_num_get ( core -> num , offstr )"		1064788	0		=			
ANR	1064833	Identifier	offset		1064788	0					
ANR	1064834	CallExpression	"r_num_get ( core -> num , offstr )"		1064788	1					
ANR	1064835	Callee	r_num_get		1064788	0					
ANR	1064836	Identifier	r_num_get		1064788	0					
ANR	1064837	ArgumentList	core -> num		1064788	1					
ANR	1064838	Argument	core -> num		1064788	0					
ANR	1064839	PtrMemberAccess	core -> num		1064788	0					
ANR	1064840	Identifier	core		1064788	0					
ANR	1064841	Identifier	num		1064788	1					
ANR	1064842	Argument	offstr		1064788	1					
ANR	1064843	Identifier	offstr		1064788	0					
ANR	1064844	ReturnStatement	"return r_sign_add_addr ( core -> anal , name , offset ) ;"	339:1:9873:9922	1064788	5	True				
ANR	1064845	CallExpression	"r_sign_add_addr ( core -> anal , name , offset )"		1064788	0					
ANR	1064846	Callee	r_sign_add_addr		1064788	0					
ANR	1064847	Identifier	r_sign_add_addr		1064788	0					
ANR	1064848	ArgumentList	core -> anal		1064788	1					
ANR	1064849	Argument	core -> anal		1064788	0					
ANR	1064850	PtrMemberAccess	core -> anal		1064788	0					
ANR	1064851	Identifier	core		1064788	0					
ANR	1064852	Identifier	anal		1064788	1					
ANR	1064853	Argument	name		1064788	1					
ANR	1064854	Identifier	name		1064788	0					
ANR	1064855	Argument	offset		1064788	2					
ANR	1064856	Identifier	offset		1064788	0					
ANR	1064857	ReturnType	static bool		1064788	1					
ANR	1064858	Identifier	addOffsetZign		1064788	2					
ANR	1064859	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1064788	3					
ANR	1064860	Parameter	RCore * core	327:26:9597:9607	1064788	0	True				
ANR	1064861	ParameterType	RCore *		1064788	0					
ANR	1064862	Identifier	core		1064788	1					
ANR	1064863	Parameter	const char * name	327:39:9610:9625	1064788	1	True				
ANR	1064864	ParameterType	const char *		1064788	0					
ANR	1064865	Identifier	name		1064788	1					
ANR	1064866	Parameter	const char * args0	327:57:9628:9644	1064788	2	True				
ANR	1064867	ParameterType	const char *		1064788	0					
ANR	1064868	Identifier	args0		1064788	1					
ANR	1064869	Parameter	int nargs	327:76:9647:9655	1064788	3	True				
ANR	1064870	ParameterType	int		1064788	0					
ANR	1064871	Identifier	nargs		1064788	1					
ANR	1064872	CFGEntryNode	ENTRY		1064788		True				
ANR	1064873	CFGExitNode	EXIT		1064788		True				
ANR	1064874	Symbol	NULL		1064788						
ANR	1064875	Symbol	offset		1064788						
ANR	1064876	Symbol	r_sign_add_addr		1064788						
ANR	1064877	Symbol	false		1064788						
ANR	1064878	Symbol	* core		1064788						
ANR	1064879	Symbol	r_str_word_get0		1064788						
ANR	1064880	Symbol	core -> anal		1064788						
ANR	1064881	Symbol	nargs		1064788						
ANR	1064882	Symbol	core		1064788						
ANR	1064883	Symbol	offstr		1064788						
ANR	1064884	Symbol	name		1064788						
ANR	1064885	Symbol	r_num_get		1064788						
ANR	1064886	Symbol	UT64_MAX		1064788						
ANR	1064887	Symbol	core -> num		1064788						
ANR	1064888	Symbol	args0		1064788						
ANR	1064889	Function	addRefsZign	342:0:9927:10343							
ANR	1064890	FunctionDef	"addRefsZign (RCore * core , const char * name , const char * args0 , int nargs)"		1064889	0					
ANR	1064891	CompoundStatement		342:85:10012:10343	1064889	0					
ANR	1064892	IdentifierDeclStatement	int i = 0 ;	343:1:10015:10024	1064889	0	True				
ANR	1064893	IdentifierDecl	i = 0		1064889	0					
ANR	1064894	IdentifierDeclType	int		1064889	0					
ANR	1064895	Identifier	i		1064889	1					
ANR	1064896	AssignmentExpression	i = 0		1064889	2		=			
ANR	1064897	Identifier	i		1064889	0					
ANR	1064898	PrimaryExpression	0		1064889	1					
ANR	1064899	IfStatement	if ( nargs < 1 )		1064889	1					
ANR	1064900	Condition	nargs < 1	344:5:10031:10039	1064889	0	True				
ANR	1064901	RelationalExpression	nargs < 1		1064889	0		<			
ANR	1064902	Identifier	nargs		1064889	0					
ANR	1064903	PrimaryExpression	1		1064889	1					
ANR	1064904	CompoundStatement		3:16:29:29	1064889	1					
ANR	1064905	ExpressionStatement	"eprintf ( ""error: invalid syntax\\n"" )"	345:2:10046:10081	1064889	0	True				
ANR	1064906	CallExpression	"eprintf ( ""error: invalid syntax\\n"" )"		1064889	0					
ANR	1064907	Callee	eprintf		1064889	0					
ANR	1064908	Identifier	eprintf		1064889	0					
ANR	1064909	ArgumentList	"""error: invalid syntax\\n"""		1064889	1					
ANR	1064910	Argument	"""error: invalid syntax\\n"""		1064889	0					
ANR	1064911	PrimaryExpression	"""error: invalid syntax\\n"""		1064889	0					
ANR	1064912	ReturnStatement	return false ;	346:2:10085:10097	1064889	1	True				
ANR	1064913	Identifier	false		1064889	0					
ANR	1064914	IdentifierDeclStatement	RList * refs = r_list_newf ( ( RListFree ) free ) ;	349:1:10104:10148	1064889	2	True				
ANR	1064915	IdentifierDecl	* refs = r_list_newf ( ( RListFree ) free )		1064889	0					
ANR	1064916	IdentifierDeclType	RList *		1064889	0					
ANR	1064917	Identifier	refs		1064889	1					
ANR	1064918	AssignmentExpression	* refs = r_list_newf ( ( RListFree ) free )		1064889	2		=			
ANR	1064919	Identifier	refs		1064889	0					
ANR	1064920	CallExpression	r_list_newf ( ( RListFree ) free )		1064889	1					
ANR	1064921	Callee	r_list_newf		1064889	0					
ANR	1064922	Identifier	r_list_newf		1064889	0					
ANR	1064923	ArgumentList	( RListFree ) free		1064889	1					
ANR	1064924	Argument	( RListFree ) free		1064889	0					
ANR	1064925	CastExpression	( RListFree ) free		1064889	0					
ANR	1064926	CastTarget	RListFree		1064889	0					
ANR	1064927	Identifier	free		1064889	1					
ANR	1064928	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		1064889	3					
ANR	1064929	ForInit	i = 0 ;	350:6:10156:10161	1064889	0	True				
ANR	1064930	AssignmentExpression	i = 0		1064889	0		=			
ANR	1064931	Identifier	i		1064889	0					
ANR	1064932	PrimaryExpression	0		1064889	1					
ANR	1064933	Condition	i < nargs	350:13:10163:10171	1064889	1	True				
ANR	1064934	RelationalExpression	i < nargs		1064889	0		<			
ANR	1064935	Identifier	i		1064889	0					
ANR	1064936	Identifier	nargs		1064889	1					
ANR	1064937	PostIncDecOperationExpression	i ++	350:24:10174:10176	1064889	2	True				
ANR	1064938	Identifier	i		1064889	0					
ANR	1064939	IncDec	++		1064889	1					
ANR	1064940	CompoundStatement		9:29:166:166	1064889	3					
ANR	1064941	ExpressionStatement	"r_list_append ( refs , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"	351:2:10183:10243	1064889	0	True				
ANR	1064942	CallExpression	"r_list_append ( refs , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"		1064889	0					
ANR	1064943	Callee	r_list_append		1064889	0					
ANR	1064944	Identifier	r_list_append		1064889	0					
ANR	1064945	ArgumentList	refs		1064889	1					
ANR	1064946	Argument	refs		1064889	0					
ANR	1064947	Identifier	refs		1064889	0					
ANR	1064948	Argument	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1064889	1					
ANR	1064949	CallExpression	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1064889	0					
ANR	1064950	Callee	r_str_new		1064889	0					
ANR	1064951	Identifier	r_str_new		1064889	0					
ANR	1064952	ArgumentList	"r_str_word_get0 ( args0 , i )"		1064889	1					
ANR	1064953	Argument	"r_str_word_get0 ( args0 , i )"		1064889	0					
ANR	1064954	CallExpression	"r_str_word_get0 ( args0 , i )"		1064889	0					
ANR	1064955	Callee	r_str_word_get0		1064889	0					
ANR	1064956	Identifier	r_str_word_get0		1064889	0					
ANR	1064957	ArgumentList	args0		1064889	1					
ANR	1064958	Argument	args0		1064889	0					
ANR	1064959	Identifier	args0		1064889	0					
ANR	1064960	Argument	i		1064889	1					
ANR	1064961	Identifier	i		1064889	0					
ANR	1064962	IdentifierDeclStatement	"bool retval = r_sign_add_refs ( core -> anal , name , refs ) ;"	354:1:10250:10304	1064889	4	True				
ANR	1064963	IdentifierDecl	"retval = r_sign_add_refs ( core -> anal , name , refs )"		1064889	0					
ANR	1064964	IdentifierDeclType	bool		1064889	0					
ANR	1064965	Identifier	retval		1064889	1					
ANR	1064966	AssignmentExpression	"retval = r_sign_add_refs ( core -> anal , name , refs )"		1064889	2		=			
ANR	1064967	Identifier	retval		1064889	0					
ANR	1064968	CallExpression	"r_sign_add_refs ( core -> anal , name , refs )"		1064889	1					
ANR	1064969	Callee	r_sign_add_refs		1064889	0					
ANR	1064970	Identifier	r_sign_add_refs		1064889	0					
ANR	1064971	ArgumentList	core -> anal		1064889	1					
ANR	1064972	Argument	core -> anal		1064889	0					
ANR	1064973	PtrMemberAccess	core -> anal		1064889	0					
ANR	1064974	Identifier	core		1064889	0					
ANR	1064975	Identifier	anal		1064889	1					
ANR	1064976	Argument	name		1064889	1					
ANR	1064977	Identifier	name		1064889	0					
ANR	1064978	Argument	refs		1064889	2					
ANR	1064979	Identifier	refs		1064889	0					
ANR	1064980	ExpressionStatement	r_list_free ( refs )	355:1:10307:10325	1064889	5	True				
ANR	1064981	CallExpression	r_list_free ( refs )		1064889	0					
ANR	1064982	Callee	r_list_free		1064889	0					
ANR	1064983	Identifier	r_list_free		1064889	0					
ANR	1064984	ArgumentList	refs		1064889	1					
ANR	1064985	Argument	refs		1064889	0					
ANR	1064986	Identifier	refs		1064889	0					
ANR	1064987	ReturnStatement	return retval ;	356:1:10328:10341	1064889	6	True				
ANR	1064988	Identifier	retval		1064889	0					
ANR	1064989	ReturnType	static bool		1064889	1					
ANR	1064990	Identifier	addRefsZign		1064889	2					
ANR	1064991	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1064889	3					
ANR	1064992	Parameter	RCore * core	342:24:9951:9961	1064889	0	True				
ANR	1064993	ParameterType	RCore *		1064889	0					
ANR	1064994	Identifier	core		1064889	1					
ANR	1064995	Parameter	const char * name	342:37:9964:9979	1064889	1	True				
ANR	1064996	ParameterType	const char *		1064889	0					
ANR	1064997	Identifier	name		1064889	1					
ANR	1064998	Parameter	const char * args0	342:55:9982:9998	1064889	2	True				
ANR	1064999	ParameterType	const char *		1064889	0					
ANR	1065000	Identifier	args0		1064889	1					
ANR	1065001	Parameter	int nargs	342:74:10001:10009	1064889	3	True				
ANR	1065002	ParameterType	int		1064889	0					
ANR	1065003	Identifier	nargs		1064889	1					
ANR	1065004	CFGEntryNode	ENTRY		1064889		True				
ANR	1065005	CFGExitNode	EXIT		1064889		True				
ANR	1065006	Symbol	r_list_newf		1064889						
ANR	1065007	Symbol	false		1064889						
ANR	1065008	Symbol	* core		1064889						
ANR	1065009	Symbol	i		1064889						
ANR	1065010	Symbol	r_str_word_get0		1064889						
ANR	1065011	Symbol	core -> anal		1064889						
ANR	1065012	Symbol	retval		1064889						
ANR	1065013	Symbol	nargs		1064889						
ANR	1065014	Symbol	core		1064889						
ANR	1065015	Symbol	refs		1064889						
ANR	1065016	Symbol	name		1064889						
ANR	1065017	Symbol	r_sign_add_refs		1064889						
ANR	1065018	Symbol	free		1064889						
ANR	1065019	Symbol	r_str_new		1064889						
ANR	1065020	Symbol	args0		1064889						
ANR	1065021	Function	addXRefsZign	359:0:10346:10764							
ANR	1065022	FunctionDef	"addXRefsZign (RCore * core , const char * name , const char * args0 , int nargs)"		1065021	0					
ANR	1065023	CompoundStatement		359:86:10432:10764	1065021	0					
ANR	1065024	IdentifierDeclStatement	int i = 0 ;	360:1:10435:10444	1065021	0	True				
ANR	1065025	IdentifierDecl	i = 0		1065021	0					
ANR	1065026	IdentifierDeclType	int		1065021	0					
ANR	1065027	Identifier	i		1065021	1					
ANR	1065028	AssignmentExpression	i = 0		1065021	2		=			
ANR	1065029	Identifier	i		1065021	0					
ANR	1065030	PrimaryExpression	0		1065021	1					
ANR	1065031	IfStatement	if ( nargs < 1 )		1065021	1					
ANR	1065032	Condition	nargs < 1	361:5:10451:10459	1065021	0	True				
ANR	1065033	RelationalExpression	nargs < 1		1065021	0		<			
ANR	1065034	Identifier	nargs		1065021	0					
ANR	1065035	PrimaryExpression	1		1065021	1					
ANR	1065036	CompoundStatement		3:16:29:29	1065021	1					
ANR	1065037	ExpressionStatement	"eprintf ( ""error: invalid syntax\\n"" )"	362:2:10466:10501	1065021	0	True				
ANR	1065038	CallExpression	"eprintf ( ""error: invalid syntax\\n"" )"		1065021	0					
ANR	1065039	Callee	eprintf		1065021	0					
ANR	1065040	Identifier	eprintf		1065021	0					
ANR	1065041	ArgumentList	"""error: invalid syntax\\n"""		1065021	1					
ANR	1065042	Argument	"""error: invalid syntax\\n"""		1065021	0					
ANR	1065043	PrimaryExpression	"""error: invalid syntax\\n"""		1065021	0					
ANR	1065044	ReturnStatement	return false ;	363:2:10505:10517	1065021	1	True				
ANR	1065045	Identifier	false		1065021	0					
ANR	1065046	IdentifierDeclStatement	RList * refs = r_list_newf ( ( RListFree ) free ) ;	366:1:10524:10568	1065021	2	True				
ANR	1065047	IdentifierDecl	* refs = r_list_newf ( ( RListFree ) free )		1065021	0					
ANR	1065048	IdentifierDeclType	RList *		1065021	0					
ANR	1065049	Identifier	refs		1065021	1					
ANR	1065050	AssignmentExpression	* refs = r_list_newf ( ( RListFree ) free )		1065021	2		=			
ANR	1065051	Identifier	refs		1065021	0					
ANR	1065052	CallExpression	r_list_newf ( ( RListFree ) free )		1065021	1					
ANR	1065053	Callee	r_list_newf		1065021	0					
ANR	1065054	Identifier	r_list_newf		1065021	0					
ANR	1065055	ArgumentList	( RListFree ) free		1065021	1					
ANR	1065056	Argument	( RListFree ) free		1065021	0					
ANR	1065057	CastExpression	( RListFree ) free		1065021	0					
ANR	1065058	CastTarget	RListFree		1065021	0					
ANR	1065059	Identifier	free		1065021	1					
ANR	1065060	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		1065021	3					
ANR	1065061	ForInit	i = 0 ;	367:6:10576:10581	1065021	0	True				
ANR	1065062	AssignmentExpression	i = 0		1065021	0		=			
ANR	1065063	Identifier	i		1065021	0					
ANR	1065064	PrimaryExpression	0		1065021	1					
ANR	1065065	Condition	i < nargs	367:13:10583:10591	1065021	1	True				
ANR	1065066	RelationalExpression	i < nargs		1065021	0		<			
ANR	1065067	Identifier	i		1065021	0					
ANR	1065068	Identifier	nargs		1065021	1					
ANR	1065069	PostIncDecOperationExpression	i ++	367:24:10594:10596	1065021	2	True				
ANR	1065070	Identifier	i		1065021	0					
ANR	1065071	IncDec	++		1065021	1					
ANR	1065072	CompoundStatement		9:29:166:166	1065021	3					
ANR	1065073	ExpressionStatement	"r_list_append ( refs , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"	368:2:10603:10663	1065021	0	True				
ANR	1065074	CallExpression	"r_list_append ( refs , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"		1065021	0					
ANR	1065075	Callee	r_list_append		1065021	0					
ANR	1065076	Identifier	r_list_append		1065021	0					
ANR	1065077	ArgumentList	refs		1065021	1					
ANR	1065078	Argument	refs		1065021	0					
ANR	1065079	Identifier	refs		1065021	0					
ANR	1065080	Argument	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1065021	1					
ANR	1065081	CallExpression	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1065021	0					
ANR	1065082	Callee	r_str_new		1065021	0					
ANR	1065083	Identifier	r_str_new		1065021	0					
ANR	1065084	ArgumentList	"r_str_word_get0 ( args0 , i )"		1065021	1					
ANR	1065085	Argument	"r_str_word_get0 ( args0 , i )"		1065021	0					
ANR	1065086	CallExpression	"r_str_word_get0 ( args0 , i )"		1065021	0					
ANR	1065087	Callee	r_str_word_get0		1065021	0					
ANR	1065088	Identifier	r_str_word_get0		1065021	0					
ANR	1065089	ArgumentList	args0		1065021	1					
ANR	1065090	Argument	args0		1065021	0					
ANR	1065091	Identifier	args0		1065021	0					
ANR	1065092	Argument	i		1065021	1					
ANR	1065093	Identifier	i		1065021	0					
ANR	1065094	IdentifierDeclStatement	"bool retval = r_sign_add_xrefs ( core -> anal , name , refs ) ;"	371:1:10670:10725	1065021	4	True				
ANR	1065095	IdentifierDecl	"retval = r_sign_add_xrefs ( core -> anal , name , refs )"		1065021	0					
ANR	1065096	IdentifierDeclType	bool		1065021	0					
ANR	1065097	Identifier	retval		1065021	1					
ANR	1065098	AssignmentExpression	"retval = r_sign_add_xrefs ( core -> anal , name , refs )"		1065021	2		=			
ANR	1065099	Identifier	retval		1065021	0					
ANR	1065100	CallExpression	"r_sign_add_xrefs ( core -> anal , name , refs )"		1065021	1					
ANR	1065101	Callee	r_sign_add_xrefs		1065021	0					
ANR	1065102	Identifier	r_sign_add_xrefs		1065021	0					
ANR	1065103	ArgumentList	core -> anal		1065021	1					
ANR	1065104	Argument	core -> anal		1065021	0					
ANR	1065105	PtrMemberAccess	core -> anal		1065021	0					
ANR	1065106	Identifier	core		1065021	0					
ANR	1065107	Identifier	anal		1065021	1					
ANR	1065108	Argument	name		1065021	1					
ANR	1065109	Identifier	name		1065021	0					
ANR	1065110	Argument	refs		1065021	2					
ANR	1065111	Identifier	refs		1065021	0					
ANR	1065112	ExpressionStatement	r_list_free ( refs )	372:1:10728:10746	1065021	5	True				
ANR	1065113	CallExpression	r_list_free ( refs )		1065021	0					
ANR	1065114	Callee	r_list_free		1065021	0					
ANR	1065115	Identifier	r_list_free		1065021	0					
ANR	1065116	ArgumentList	refs		1065021	1					
ANR	1065117	Argument	refs		1065021	0					
ANR	1065118	Identifier	refs		1065021	0					
ANR	1065119	ReturnStatement	return retval ;	373:1:10749:10762	1065021	6	True				
ANR	1065120	Identifier	retval		1065021	0					
ANR	1065121	ReturnType	static bool		1065021	1					
ANR	1065122	Identifier	addXRefsZign		1065021	2					
ANR	1065123	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1065021	3					
ANR	1065124	Parameter	RCore * core	359:25:10371:10381	1065021	0	True				
ANR	1065125	ParameterType	RCore *		1065021	0					
ANR	1065126	Identifier	core		1065021	1					
ANR	1065127	Parameter	const char * name	359:38:10384:10399	1065021	1	True				
ANR	1065128	ParameterType	const char *		1065021	0					
ANR	1065129	Identifier	name		1065021	1					
ANR	1065130	Parameter	const char * args0	359:56:10402:10418	1065021	2	True				
ANR	1065131	ParameterType	const char *		1065021	0					
ANR	1065132	Identifier	args0		1065021	1					
ANR	1065133	Parameter	int nargs	359:75:10421:10429	1065021	3	True				
ANR	1065134	ParameterType	int		1065021	0					
ANR	1065135	Identifier	nargs		1065021	1					
ANR	1065136	CFGEntryNode	ENTRY		1065021		True				
ANR	1065137	CFGExitNode	EXIT		1065021		True				
ANR	1065138	Symbol	r_list_newf		1065021						
ANR	1065139	Symbol	false		1065021						
ANR	1065140	Symbol	* core		1065021						
ANR	1065141	Symbol	i		1065021						
ANR	1065142	Symbol	r_str_word_get0		1065021						
ANR	1065143	Symbol	core -> anal		1065021						
ANR	1065144	Symbol	retval		1065021						
ANR	1065145	Symbol	nargs		1065021						
ANR	1065146	Symbol	core		1065021						
ANR	1065147	Symbol	refs		1065021						
ANR	1065148	Symbol	name		1065021						
ANR	1065149	Symbol	r_sign_add_xrefs		1065021						
ANR	1065150	Symbol	free		1065021						
ANR	1065151	Symbol	r_str_new		1065021						
ANR	1065152	Symbol	args0		1065021						
ANR	1065153	Function	addVarsZign	376:0:10767:11183							
ANR	1065154	FunctionDef	"addVarsZign (RCore * core , const char * name , const char * args0 , int nargs)"		1065153	0					
ANR	1065155	CompoundStatement		376:85:10852:11183	1065153	0					
ANR	1065156	IdentifierDeclStatement	int i = 0 ;	377:1:10855:10864	1065153	0	True				
ANR	1065157	IdentifierDecl	i = 0		1065153	0					
ANR	1065158	IdentifierDeclType	int		1065153	0					
ANR	1065159	Identifier	i		1065153	1					
ANR	1065160	AssignmentExpression	i = 0		1065153	2		=			
ANR	1065161	Identifier	i		1065153	0					
ANR	1065162	PrimaryExpression	0		1065153	1					
ANR	1065163	IfStatement	if ( nargs < 1 )		1065153	1					
ANR	1065164	Condition	nargs < 1	378:5:10871:10879	1065153	0	True				
ANR	1065165	RelationalExpression	nargs < 1		1065153	0		<			
ANR	1065166	Identifier	nargs		1065153	0					
ANR	1065167	PrimaryExpression	1		1065153	1					
ANR	1065168	CompoundStatement		3:16:29:29	1065153	1					
ANR	1065169	ExpressionStatement	"eprintf ( ""error: invalid syntax\\n"" )"	379:2:10886:10921	1065153	0	True				
ANR	1065170	CallExpression	"eprintf ( ""error: invalid syntax\\n"" )"		1065153	0					
ANR	1065171	Callee	eprintf		1065153	0					
ANR	1065172	Identifier	eprintf		1065153	0					
ANR	1065173	ArgumentList	"""error: invalid syntax\\n"""		1065153	1					
ANR	1065174	Argument	"""error: invalid syntax\\n"""		1065153	0					
ANR	1065175	PrimaryExpression	"""error: invalid syntax\\n"""		1065153	0					
ANR	1065176	ReturnStatement	return false ;	380:2:10925:10937	1065153	1	True				
ANR	1065177	Identifier	false		1065153	0					
ANR	1065178	IdentifierDeclStatement	RList * vars = r_list_newf ( ( RListFree ) free ) ;	383:1:10944:10988	1065153	2	True				
ANR	1065179	IdentifierDecl	* vars = r_list_newf ( ( RListFree ) free )		1065153	0					
ANR	1065180	IdentifierDeclType	RList *		1065153	0					
ANR	1065181	Identifier	vars		1065153	1					
ANR	1065182	AssignmentExpression	* vars = r_list_newf ( ( RListFree ) free )		1065153	2		=			
ANR	1065183	Identifier	vars		1065153	0					
ANR	1065184	CallExpression	r_list_newf ( ( RListFree ) free )		1065153	1					
ANR	1065185	Callee	r_list_newf		1065153	0					
ANR	1065186	Identifier	r_list_newf		1065153	0					
ANR	1065187	ArgumentList	( RListFree ) free		1065153	1					
ANR	1065188	Argument	( RListFree ) free		1065153	0					
ANR	1065189	CastExpression	( RListFree ) free		1065153	0					
ANR	1065190	CastTarget	RListFree		1065153	0					
ANR	1065191	Identifier	free		1065153	1					
ANR	1065192	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		1065153	3					
ANR	1065193	ForInit	i = 0 ;	384:6:10996:11001	1065153	0	True				
ANR	1065194	AssignmentExpression	i = 0		1065153	0		=			
ANR	1065195	Identifier	i		1065153	0					
ANR	1065196	PrimaryExpression	0		1065153	1					
ANR	1065197	Condition	i < nargs	384:13:11003:11011	1065153	1	True				
ANR	1065198	RelationalExpression	i < nargs		1065153	0		<			
ANR	1065199	Identifier	i		1065153	0					
ANR	1065200	Identifier	nargs		1065153	1					
ANR	1065201	PostIncDecOperationExpression	i ++	384:24:11014:11016	1065153	2	True				
ANR	1065202	Identifier	i		1065153	0					
ANR	1065203	IncDec	++		1065153	1					
ANR	1065204	CompoundStatement		9:29:166:166	1065153	3					
ANR	1065205	ExpressionStatement	"r_list_append ( vars , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"	385:2:11023:11083	1065153	0	True				
ANR	1065206	CallExpression	"r_list_append ( vars , r_str_new ( r_str_word_get0 ( args0 , i ) ) )"		1065153	0					
ANR	1065207	Callee	r_list_append		1065153	0					
ANR	1065208	Identifier	r_list_append		1065153	0					
ANR	1065209	ArgumentList	vars		1065153	1					
ANR	1065210	Argument	vars		1065153	0					
ANR	1065211	Identifier	vars		1065153	0					
ANR	1065212	Argument	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1065153	1					
ANR	1065213	CallExpression	"r_str_new ( r_str_word_get0 ( args0 , i ) )"		1065153	0					
ANR	1065214	Callee	r_str_new		1065153	0					
ANR	1065215	Identifier	r_str_new		1065153	0					
ANR	1065216	ArgumentList	"r_str_word_get0 ( args0 , i )"		1065153	1					
ANR	1065217	Argument	"r_str_word_get0 ( args0 , i )"		1065153	0					
ANR	1065218	CallExpression	"r_str_word_get0 ( args0 , i )"		1065153	0					
ANR	1065219	Callee	r_str_word_get0		1065153	0					
ANR	1065220	Identifier	r_str_word_get0		1065153	0					
ANR	1065221	ArgumentList	args0		1065153	1					
ANR	1065222	Argument	args0		1065153	0					
ANR	1065223	Identifier	args0		1065153	0					
ANR	1065224	Argument	i		1065153	1					
ANR	1065225	Identifier	i		1065153	0					
ANR	1065226	IdentifierDeclStatement	"bool retval = r_sign_add_vars ( core -> anal , name , vars ) ;"	388:1:11090:11144	1065153	4	True				
ANR	1065227	IdentifierDecl	"retval = r_sign_add_vars ( core -> anal , name , vars )"		1065153	0					
ANR	1065228	IdentifierDeclType	bool		1065153	0					
ANR	1065229	Identifier	retval		1065153	1					
ANR	1065230	AssignmentExpression	"retval = r_sign_add_vars ( core -> anal , name , vars )"		1065153	2		=			
ANR	1065231	Identifier	retval		1065153	0					
ANR	1065232	CallExpression	"r_sign_add_vars ( core -> anal , name , vars )"		1065153	1					
ANR	1065233	Callee	r_sign_add_vars		1065153	0					
ANR	1065234	Identifier	r_sign_add_vars		1065153	0					
ANR	1065235	ArgumentList	core -> anal		1065153	1					
ANR	1065236	Argument	core -> anal		1065153	0					
ANR	1065237	PtrMemberAccess	core -> anal		1065153	0					
ANR	1065238	Identifier	core		1065153	0					
ANR	1065239	Identifier	anal		1065153	1					
ANR	1065240	Argument	name		1065153	1					
ANR	1065241	Identifier	name		1065153	0					
ANR	1065242	Argument	vars		1065153	2					
ANR	1065243	Identifier	vars		1065153	0					
ANR	1065244	ExpressionStatement	r_list_free ( vars )	389:1:11147:11165	1065153	5	True				
ANR	1065245	CallExpression	r_list_free ( vars )		1065153	0					
ANR	1065246	Callee	r_list_free		1065153	0					
ANR	1065247	Identifier	r_list_free		1065153	0					
ANR	1065248	ArgumentList	vars		1065153	1					
ANR	1065249	Argument	vars		1065153	0					
ANR	1065250	Identifier	vars		1065153	0					
ANR	1065251	ReturnStatement	return retval ;	390:1:11168:11181	1065153	6	True				
ANR	1065252	Identifier	retval		1065153	0					
ANR	1065253	ReturnType	static bool		1065153	1					
ANR	1065254	Identifier	addVarsZign		1065153	2					
ANR	1065255	ParameterList	"RCore * core , const char * name , const char * args0 , int nargs"		1065153	3					
ANR	1065256	Parameter	RCore * core	376:24:10791:10801	1065153	0	True				
ANR	1065257	ParameterType	RCore *		1065153	0					
ANR	1065258	Identifier	core		1065153	1					
ANR	1065259	Parameter	const char * name	376:37:10804:10819	1065153	1	True				
ANR	1065260	ParameterType	const char *		1065153	0					
ANR	1065261	Identifier	name		1065153	1					
ANR	1065262	Parameter	const char * args0	376:55:10822:10838	1065153	2	True				
ANR	1065263	ParameterType	const char *		1065153	0					
ANR	1065264	Identifier	args0		1065153	1					
ANR	1065265	Parameter	int nargs	376:74:10841:10849	1065153	3	True				
ANR	1065266	ParameterType	int		1065153	0					
ANR	1065267	Identifier	nargs		1065153	1					
ANR	1065268	CFGEntryNode	ENTRY		1065153		True				
ANR	1065269	CFGExitNode	EXIT		1065153		True				
ANR	1065270	Symbol	r_list_newf		1065153						
ANR	1065271	Symbol	false		1065153						
ANR	1065272	Symbol	* core		1065153						
ANR	1065273	Symbol	i		1065153						
ANR	1065274	Symbol	r_str_word_get0		1065153						
ANR	1065275	Symbol	core -> anal		1065153						
ANR	1065276	Symbol	retval		1065153						
ANR	1065277	Symbol	nargs		1065153						
ANR	1065278	Symbol	core		1065153						
ANR	1065279	Symbol	r_sign_add_vars		1065153						
ANR	1065280	Symbol	name		1065153						
ANR	1065281	Symbol	vars		1065153						
ANR	1065282	Symbol	free		1065153						
ANR	1065283	Symbol	r_str_new		1065153						
ANR	1065284	Symbol	args0		1065153						
ANR	1065285	Function	addZign	393:0:11186:12033							
ANR	1065286	FunctionDef	"addZign (RCore * core , const char * name , int type , const char * args0 , int nargs)"		1065285	0					
ANR	1065287	CompoundStatement		393:91:11277:12033	1065285	0					
ANR	1065288	SwitchStatement	switch ( type )		1065285	0					
ANR	1065289	Condition	type	394:9:11288:11291	1065285	0	True				
ANR	1065290	Identifier	type		1065285	0					
ANR	1065291	CompoundStatement		2:15:16:16	1065285	1					
ANR	1065292	Label	case R_SIGN_BYTES :	395:1:11297:11314	1065285	0	True				
ANR	1065293	Identifier	R_SIGN_BYTES		1065285	0					
ANR	1065294	Label	case R_SIGN_ANAL :	396:1:11317:11333	1065285	1	True				
ANR	1065295	Identifier	R_SIGN_ANAL		1065285	0					
ANR	1065296	ReturnStatement	"return addBytesZign ( core , name , type , args0 , nargs ) ;"	397:2:11337:11389	1065285	2	True				
ANR	1065297	CallExpression	"addBytesZign ( core , name , type , args0 , nargs )"		1065285	0					
ANR	1065298	Callee	addBytesZign		1065285	0					
ANR	1065299	Identifier	addBytesZign		1065285	0					
ANR	1065300	ArgumentList	core		1065285	1					
ANR	1065301	Argument	core		1065285	0					
ANR	1065302	Identifier	core		1065285	0					
ANR	1065303	Argument	name		1065285	1					
ANR	1065304	Identifier	name		1065285	0					
ANR	1065305	Argument	type		1065285	2					
ANR	1065306	Identifier	type		1065285	0					
ANR	1065307	Argument	args0		1065285	3					
ANR	1065308	Identifier	args0		1065285	0					
ANR	1065309	Argument	nargs		1065285	4					
ANR	1065310	Identifier	nargs		1065285	0					
ANR	1065311	Label	case R_SIGN_GRAPH :	398:1:11392:11409	1065285	3	True				
ANR	1065312	Identifier	R_SIGN_GRAPH		1065285	0					
ANR	1065313	ReturnStatement	"return addGraphZign ( core , name , args0 , nargs ) ;"	399:2:11413:11459	1065285	4	True				
ANR	1065314	CallExpression	"addGraphZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065315	Callee	addGraphZign		1065285	0					
ANR	1065316	Identifier	addGraphZign		1065285	0					
ANR	1065317	ArgumentList	core		1065285	1					
ANR	1065318	Argument	core		1065285	0					
ANR	1065319	Identifier	core		1065285	0					
ANR	1065320	Argument	name		1065285	1					
ANR	1065321	Identifier	name		1065285	0					
ANR	1065322	Argument	args0		1065285	2					
ANR	1065323	Identifier	args0		1065285	0					
ANR	1065324	Argument	nargs		1065285	3					
ANR	1065325	Identifier	nargs		1065285	0					
ANR	1065326	Label	case R_SIGN_COMMENT :	400:1:11462:11481	1065285	5	True				
ANR	1065327	Identifier	R_SIGN_COMMENT		1065285	0					
ANR	1065328	ReturnStatement	"return addCommentZign ( core , name , args0 , nargs ) ;"	401:2:11485:11533	1065285	6	True				
ANR	1065329	CallExpression	"addCommentZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065330	Callee	addCommentZign		1065285	0					
ANR	1065331	Identifier	addCommentZign		1065285	0					
ANR	1065332	ArgumentList	core		1065285	1					
ANR	1065333	Argument	core		1065285	0					
ANR	1065334	Identifier	core		1065285	0					
ANR	1065335	Argument	name		1065285	1					
ANR	1065336	Identifier	name		1065285	0					
ANR	1065337	Argument	args0		1065285	2					
ANR	1065338	Identifier	args0		1065285	0					
ANR	1065339	Argument	nargs		1065285	3					
ANR	1065340	Identifier	nargs		1065285	0					
ANR	1065341	Label	case R_SIGN_NAME :	402:1:11536:11552	1065285	7	True				
ANR	1065342	Identifier	R_SIGN_NAME		1065285	0					
ANR	1065343	ReturnStatement	"return addNameZign ( core , name , args0 , nargs ) ;"	403:2:11556:11601	1065285	8	True				
ANR	1065344	CallExpression	"addNameZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065345	Callee	addNameZign		1065285	0					
ANR	1065346	Identifier	addNameZign		1065285	0					
ANR	1065347	ArgumentList	core		1065285	1					
ANR	1065348	Argument	core		1065285	0					
ANR	1065349	Identifier	core		1065285	0					
ANR	1065350	Argument	name		1065285	1					
ANR	1065351	Identifier	name		1065285	0					
ANR	1065352	Argument	args0		1065285	2					
ANR	1065353	Identifier	args0		1065285	0					
ANR	1065354	Argument	nargs		1065285	3					
ANR	1065355	Identifier	nargs		1065285	0					
ANR	1065356	Label	case R_SIGN_OFFSET :	404:1:11604:11622	1065285	9	True				
ANR	1065357	Identifier	R_SIGN_OFFSET		1065285	0					
ANR	1065358	ReturnStatement	"return addOffsetZign ( core , name , args0 , nargs ) ;"	405:2:11626:11673	1065285	10	True				
ANR	1065359	CallExpression	"addOffsetZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065360	Callee	addOffsetZign		1065285	0					
ANR	1065361	Identifier	addOffsetZign		1065285	0					
ANR	1065362	ArgumentList	core		1065285	1					
ANR	1065363	Argument	core		1065285	0					
ANR	1065364	Identifier	core		1065285	0					
ANR	1065365	Argument	name		1065285	1					
ANR	1065366	Identifier	name		1065285	0					
ANR	1065367	Argument	args0		1065285	2					
ANR	1065368	Identifier	args0		1065285	0					
ANR	1065369	Argument	nargs		1065285	3					
ANR	1065370	Identifier	nargs		1065285	0					
ANR	1065371	Label	case R_SIGN_REFS :	406:1:11676:11692	1065285	11	True				
ANR	1065372	Identifier	R_SIGN_REFS		1065285	0					
ANR	1065373	ReturnStatement	"return addRefsZign ( core , name , args0 , nargs ) ;"	407:2:11696:11741	1065285	12	True				
ANR	1065374	CallExpression	"addRefsZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065375	Callee	addRefsZign		1065285	0					
ANR	1065376	Identifier	addRefsZign		1065285	0					
ANR	1065377	ArgumentList	core		1065285	1					
ANR	1065378	Argument	core		1065285	0					
ANR	1065379	Identifier	core		1065285	0					
ANR	1065380	Argument	name		1065285	1					
ANR	1065381	Identifier	name		1065285	0					
ANR	1065382	Argument	args0		1065285	2					
ANR	1065383	Identifier	args0		1065285	0					
ANR	1065384	Argument	nargs		1065285	3					
ANR	1065385	Identifier	nargs		1065285	0					
ANR	1065386	Label	case R_SIGN_XREFS :	408:1:11744:11761	1065285	13	True				
ANR	1065387	Identifier	R_SIGN_XREFS		1065285	0					
ANR	1065388	ReturnStatement	"return addXRefsZign ( core , name , args0 , nargs ) ;"	409:2:11765:11811	1065285	14	True				
ANR	1065389	CallExpression	"addXRefsZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065390	Callee	addXRefsZign		1065285	0					
ANR	1065391	Identifier	addXRefsZign		1065285	0					
ANR	1065392	ArgumentList	core		1065285	1					
ANR	1065393	Argument	core		1065285	0					
ANR	1065394	Identifier	core		1065285	0					
ANR	1065395	Argument	name		1065285	1					
ANR	1065396	Identifier	name		1065285	0					
ANR	1065397	Argument	args0		1065285	2					
ANR	1065398	Identifier	args0		1065285	0					
ANR	1065399	Argument	nargs		1065285	3					
ANR	1065400	Identifier	nargs		1065285	0					
ANR	1065401	Label	case R_SIGN_VARS :	410:1:11814:11830	1065285	15	True				
ANR	1065402	Identifier	R_SIGN_VARS		1065285	0					
ANR	1065403	ReturnStatement	"return addVarsZign ( core , name , args0 , nargs ) ;"	411:2:11834:11879	1065285	16	True				
ANR	1065404	CallExpression	"addVarsZign ( core , name , args0 , nargs )"		1065285	0					
ANR	1065405	Callee	addVarsZign		1065285	0					
ANR	1065406	Identifier	addVarsZign		1065285	0					
ANR	1065407	ArgumentList	core		1065285	1					
ANR	1065408	Argument	core		1065285	0					
ANR	1065409	Identifier	core		1065285	0					
ANR	1065410	Argument	name		1065285	1					
ANR	1065411	Identifier	name		1065285	0					
ANR	1065412	Argument	args0		1065285	2					
ANR	1065413	Identifier	args0		1065285	0					
ANR	1065414	Argument	nargs		1065285	3					
ANR	1065415	Identifier	nargs		1065285	0					
ANR	1065416	Label	case R_SIGN_BBHASH :	412:1:11882:11900	1065285	17	True				
ANR	1065417	Identifier	R_SIGN_BBHASH		1065285	0					
ANR	1065418	ReturnStatement	"return addHashZign ( core , name , type , args0 , nargs ) ;"	413:2:11904:11955	1065285	18	True				
ANR	1065419	CallExpression	"addHashZign ( core , name , type , args0 , nargs )"		1065285	0					
ANR	1065420	Callee	addHashZign		1065285	0					
ANR	1065421	Identifier	addHashZign		1065285	0					
ANR	1065422	ArgumentList	core		1065285	1					
ANR	1065423	Argument	core		1065285	0					
ANR	1065424	Identifier	core		1065285	0					
ANR	1065425	Argument	name		1065285	1					
ANR	1065426	Identifier	name		1065285	0					
ANR	1065427	Argument	type		1065285	2					
ANR	1065428	Identifier	type		1065285	0					
ANR	1065429	Argument	args0		1065285	3					
ANR	1065430	Identifier	args0		1065285	0					
ANR	1065431	Argument	nargs		1065285	4					
ANR	1065432	Identifier	nargs		1065285	0					
ANR	1065433	Label	default :	414:1:11958:11965	1065285	19	True				
ANR	1065434	Identifier	default		1065285	0					
ANR	1065435	ExpressionStatement	"eprintf ( ""error: unknown zignature type\\n"" )"	415:2:11969:12012	1065285	20	True				
ANR	1065436	CallExpression	"eprintf ( ""error: unknown zignature type\\n"" )"		1065285	0					
ANR	1065437	Callee	eprintf		1065285	0					
ANR	1065438	Identifier	eprintf		1065285	0					
ANR	1065439	ArgumentList	"""error: unknown zignature type\\n"""		1065285	1					
ANR	1065440	Argument	"""error: unknown zignature type\\n"""		1065285	0					
ANR	1065441	PrimaryExpression	"""error: unknown zignature type\\n"""		1065285	0					
ANR	1065442	ReturnStatement	return false ;	418:1:12019:12031	1065285	1	True				
ANR	1065443	Identifier	false		1065285	0					
ANR	1065444	ReturnType	static bool		1065285	1					
ANR	1065445	Identifier	addZign		1065285	2					
ANR	1065446	ParameterList	"RCore * core , const char * name , int type , const char * args0 , int nargs"		1065285	3					
ANR	1065447	Parameter	RCore * core	393:20:11206:11216	1065285	0	True				
ANR	1065448	ParameterType	RCore *		1065285	0					
ANR	1065449	Identifier	core		1065285	1					
ANR	1065450	Parameter	const char * name	393:33:11219:11234	1065285	1	True				
ANR	1065451	ParameterType	const char *		1065285	0					
ANR	1065452	Identifier	name		1065285	1					
ANR	1065453	Parameter	int type	393:51:11237:11244	1065285	2	True				
ANR	1065454	ParameterType	int		1065285	0					
ANR	1065455	Identifier	type		1065285	1					
ANR	1065456	Parameter	const char * args0	393:61:11247:11263	1065285	3	True				
ANR	1065457	ParameterType	const char *		1065285	0					
ANR	1065458	Identifier	args0		1065285	1					
ANR	1065459	Parameter	int nargs	393:80:11266:11274	1065285	4	True				
ANR	1065460	ParameterType	int		1065285	0					
ANR	1065461	Identifier	nargs		1065285	1					
ANR	1065462	CFGEntryNode	ENTRY		1065285		True				
ANR	1065463	CFGExitNode	EXIT		1065285		True				
ANR	1065464	Symbol	addHashZign		1065285						
ANR	1065465	Symbol	addRefsZign		1065285						
ANR	1065466	Symbol	addNameZign		1065285						
ANR	1065467	Symbol	false		1065285						
ANR	1065468	Symbol	type		1065285						
ANR	1065469	Symbol	nargs		1065285						
ANR	1065470	Symbol	core		1065285						
ANR	1065471	Symbol	addBytesZign		1065285						
ANR	1065472	Symbol	addOffsetZign		1065285						
ANR	1065473	Symbol	addXRefsZign		1065285						
ANR	1065474	Symbol	addGraphZign		1065285						
ANR	1065475	Symbol	name		1065285						
ANR	1065476	Symbol	addCommentZign		1065285						
ANR	1065477	Symbol	args0		1065285						
ANR	1065478	Symbol	addVarsZign		1065285						
ANR	1065479	Function	cmdAdd	421:0:12036:15349							
ANR	1065480	FunctionDef	"cmdAdd (void * data , const char * input)"		1065479	0					
ANR	1065481	CompoundStatement		421:49:12085:15349	1065479	0					
ANR	1065482	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	422:1:12088:12116	1065479	0	True				
ANR	1065483	IdentifierDecl	* core = ( RCore * ) data		1065479	0					
ANR	1065484	IdentifierDeclType	RCore *		1065479	0					
ANR	1065485	Identifier	core		1065479	1					
ANR	1065486	AssignmentExpression	* core = ( RCore * ) data		1065479	2		=			
ANR	1065487	Identifier	core		1065479	0					
ANR	1065488	CastExpression	( RCore * ) data		1065479	1					
ANR	1065489	CastTarget	RCore *		1065479	0					
ANR	1065490	Identifier	data		1065479	1					
ANR	1065491	SwitchStatement	switch ( * input )		1065479	1					
ANR	1065492	Condition	* input	424:9:12128:12133	1065479	0	True				
ANR	1065493	UnaryOperationExpression	* input		1065479	0					
ANR	1065494	UnaryOperator	*		1065479	0					
ANR	1065495	Identifier	input		1065479	1					
ANR	1065496	CompoundStatement		4:17:50:50	1065479	1					
ANR	1065497	Label	case ' ' :	425:1:12139:12147	1065479	0	True				
ANR	1065498	CompoundStatement		10:3:162:180	1065479	1					
ANR	1065499	IdentifierDeclStatement	"const char * zigname = NULL , * args0 = NULL ;"	427:3:12156:12197	1065479	0	True				
ANR	1065500	IdentifierDecl	* zigname = NULL		1065479	0					
ANR	1065501	IdentifierDeclType	const char *		1065479	0					
ANR	1065502	Identifier	zigname		1065479	1					
ANR	1065503	AssignmentExpression	* zigname = NULL		1065479	2		=			
ANR	1065504	Identifier	NULL		1065479	0					
ANR	1065505	Identifier	NULL		1065479	1					
ANR	1065506	IdentifierDecl	* args0 = NULL		1065479	1					
ANR	1065507	IdentifierDeclType	const char *		1065479	0					
ANR	1065508	Identifier	args0		1065479	1					
ANR	1065509	AssignmentExpression	* args0 = NULL		1065479	2		=			
ANR	1065510	Identifier	NULL		1065479	0					
ANR	1065511	Identifier	NULL		1065479	1					
ANR	1065512	IdentifierDeclStatement	char * args = NULL ;	428:3:12202:12219	1065479	1	True				
ANR	1065513	IdentifierDecl	* args = NULL		1065479	0					
ANR	1065514	IdentifierDeclType	char *		1065479	0					
ANR	1065515	Identifier	args		1065479	1					
ANR	1065516	AssignmentExpression	* args = NULL		1065479	2		=			
ANR	1065517	Identifier	NULL		1065479	0					
ANR	1065518	Identifier	NULL		1065479	1					
ANR	1065519	IdentifierDeclStatement	"int type = 0 , n = 0 ;"	429:3:12224:12243	1065479	2	True				
ANR	1065520	IdentifierDecl	type = 0		1065479	0					
ANR	1065521	IdentifierDeclType	int		1065479	0					
ANR	1065522	Identifier	type		1065479	1					
ANR	1065523	AssignmentExpression	type = 0		1065479	2		=			
ANR	1065524	Identifier	type		1065479	0					
ANR	1065525	PrimaryExpression	0		1065479	1					
ANR	1065526	IdentifierDecl	n = 0		1065479	1					
ANR	1065527	IdentifierDeclType	int		1065479	0					
ANR	1065528	Identifier	n		1065479	1					
ANR	1065529	AssignmentExpression	n = 0		1065479	2		=			
ANR	1065530	Identifier	n		1065479	0					
ANR	1065531	PrimaryExpression	0		1065479	1					
ANR	1065532	IdentifierDeclStatement	bool retval = true ;	430:3:12248:12266	1065479	3	True				
ANR	1065533	IdentifierDecl	retval = true		1065479	0					
ANR	1065534	IdentifierDeclType	bool		1065479	0					
ANR	1065535	Identifier	retval		1065479	1					
ANR	1065536	AssignmentExpression	retval = true		1065479	2		=			
ANR	1065537	Identifier	true		1065479	0					
ANR	1065538	Identifier	true		1065479	1					
ANR	1065539	ExpressionStatement	args = r_str_new ( input + 1 )	432:3:12272:12300	1065479	4	True				
ANR	1065540	AssignmentExpression	args = r_str_new ( input + 1 )		1065479	0		=			
ANR	1065541	Identifier	args		1065479	0					
ANR	1065542	CallExpression	r_str_new ( input + 1 )		1065479	1					
ANR	1065543	Callee	r_str_new		1065479	0					
ANR	1065544	Identifier	r_str_new		1065479	0					
ANR	1065545	ArgumentList	input + 1		1065479	1					
ANR	1065546	Argument	input + 1		1065479	0					
ANR	1065547	AdditiveExpression	input + 1		1065479	0		+			
ANR	1065548	Identifier	input		1065479	0					
ANR	1065549	PrimaryExpression	1		1065479	1					
ANR	1065550	ExpressionStatement	n = r_str_word_set0 ( args )	433:3:12305:12331	1065479	5	True				
ANR	1065551	AssignmentExpression	n = r_str_word_set0 ( args )		1065479	0		=			
ANR	1065552	Identifier	n		1065479	0					
ANR	1065553	CallExpression	r_str_word_set0 ( args )		1065479	1					
ANR	1065554	Callee	r_str_word_set0		1065479	0					
ANR	1065555	Identifier	r_str_word_set0		1065479	0					
ANR	1065556	ArgumentList	args		1065479	1					
ANR	1065557	Argument	args		1065479	0					
ANR	1065558	Identifier	args		1065479	0					
ANR	1065559	IfStatement	if ( n < 3 )		1065479	6					
ANR	1065560	Condition	n < 3	435:7:12341:12345	1065479	0	True				
ANR	1065561	RelationalExpression	n < 3		1065479	0		<			
ANR	1065562	Identifier	n		1065479	0					
ANR	1065563	PrimaryExpression	3		1065479	1					
ANR	1065564	CompoundStatement		15:14:262:262	1065479	1					
ANR	1065565	ExpressionStatement	"eprintf ( ""usage: za zigname type params\\n"" )"	436:4:12354:12397	1065479	0	True				
ANR	1065566	CallExpression	"eprintf ( ""usage: za zigname type params\\n"" )"		1065479	0					
ANR	1065567	Callee	eprintf		1065479	0					
ANR	1065568	Identifier	eprintf		1065479	0					
ANR	1065569	ArgumentList	"""usage: za zigname type params\\n"""		1065479	1					
ANR	1065570	Argument	"""usage: za zigname type params\\n"""		1065479	0					
ANR	1065571	PrimaryExpression	"""usage: za zigname type params\\n"""		1065479	0					
ANR	1065572	ExpressionStatement	retval = false	437:4:12403:12417	1065479	1	True				
ANR	1065573	AssignmentExpression	retval = false		1065479	0		=			
ANR	1065574	Identifier	retval		1065479	0					
ANR	1065575	Identifier	false		1065479	1					
ANR	1065576	GotoStatement	goto out_case_manual ;	438:4:12423:12443	1065479	2	True				
ANR	1065577	Identifier	out_case_manual		1065479	0					
ANR	1065578	ExpressionStatement	"zigname = r_str_word_get0 ( args , 0 )"	441:3:12454:12489	1065479	7	True				
ANR	1065579	AssignmentExpression	"zigname = r_str_word_get0 ( args , 0 )"		1065479	0		=			
ANR	1065580	Identifier	zigname		1065479	0					
ANR	1065581	CallExpression	"r_str_word_get0 ( args , 0 )"		1065479	1					
ANR	1065582	Callee	r_str_word_get0		1065479	0					
ANR	1065583	Identifier	r_str_word_get0		1065479	0					
ANR	1065584	ArgumentList	args		1065479	1					
ANR	1065585	Argument	args		1065479	0					
ANR	1065586	Identifier	args		1065479	0					
ANR	1065587	Argument	0		1065479	1					
ANR	1065588	PrimaryExpression	0		1065479	0					
ANR	1065589	ExpressionStatement	"type = r_str_word_get0 ( args , 1 ) [ 0 ]"	442:3:12494:12529	1065479	8	True				
ANR	1065590	AssignmentExpression	"type = r_str_word_get0 ( args , 1 ) [ 0 ]"		1065479	0		=			
ANR	1065591	Identifier	type		1065479	0					
ANR	1065592	ArrayIndexing	"r_str_word_get0 ( args , 1 ) [ 0 ]"		1065479	1					
ANR	1065593	CallExpression	"r_str_word_get0 ( args , 1 )"		1065479	0					
ANR	1065594	Callee	r_str_word_get0		1065479	0					
ANR	1065595	Identifier	r_str_word_get0		1065479	0					
ANR	1065596	ArgumentList	args		1065479	1					
ANR	1065597	Argument	args		1065479	0					
ANR	1065598	Identifier	args		1065479	0					
ANR	1065599	Argument	1		1065479	1					
ANR	1065600	PrimaryExpression	1		1065479	0					
ANR	1065601	PrimaryExpression	0		1065479	1					
ANR	1065602	ExpressionStatement	"args0 = r_str_word_get0 ( args , 2 )"	443:3:12534:12567	1065479	9	True				
ANR	1065603	AssignmentExpression	"args0 = r_str_word_get0 ( args , 2 )"		1065479	0		=			
ANR	1065604	Identifier	args0		1065479	0					
ANR	1065605	CallExpression	"r_str_word_get0 ( args , 2 )"		1065479	1					
ANR	1065606	Callee	r_str_word_get0		1065479	0					
ANR	1065607	Identifier	r_str_word_get0		1065479	0					
ANR	1065608	ArgumentList	args		1065479	1					
ANR	1065609	Argument	args		1065479	0					
ANR	1065610	Identifier	args		1065479	0					
ANR	1065611	Argument	2		1065479	1					
ANR	1065612	PrimaryExpression	2		1065479	0					
ANR	1065613	IfStatement	"if ( ! addZign ( core , zigname , type , args0 , n - 2 ) )"		1065479	10					
ANR	1065614	Condition	"! addZign ( core , zigname , type , args0 , n - 2 )"	445:7:12577:12620	1065479	0	True				
ANR	1065615	UnaryOperationExpression	"! addZign ( core , zigname , type , args0 , n - 2 )"		1065479	0					
ANR	1065616	UnaryOperator	!		1065479	0					
ANR	1065617	CallExpression	"addZign ( core , zigname , type , args0 , n - 2 )"		1065479	1					
ANR	1065618	Callee	addZign		1065479	0					
ANR	1065619	Identifier	addZign		1065479	0					
ANR	1065620	ArgumentList	core		1065479	1					
ANR	1065621	Argument	core		1065479	0					
ANR	1065622	Identifier	core		1065479	0					
ANR	1065623	Argument	zigname		1065479	1					
ANR	1065624	Identifier	zigname		1065479	0					
ANR	1065625	Argument	type		1065479	2					
ANR	1065626	Identifier	type		1065479	0					
ANR	1065627	Argument	args0		1065479	3					
ANR	1065628	Identifier	args0		1065479	0					
ANR	1065629	Argument	n - 2		1065479	4					
ANR	1065630	AdditiveExpression	n - 2		1065479	0		-			
ANR	1065631	Identifier	n		1065479	0					
ANR	1065632	PrimaryExpression	2		1065479	1					
ANR	1065633	CompoundStatement		25:53:537:537	1065479	1					
ANR	1065634	ExpressionStatement	retval = false	446:4:12629:12643	1065479	0	True				
ANR	1065635	AssignmentExpression	retval = false		1065479	0		=			
ANR	1065636	Identifier	retval		1065479	0					
ANR	1065637	Identifier	false		1065479	1					
ANR	1065638	GotoStatement	goto out_case_manual ;	447:4:12649:12669	1065479	1	True				
ANR	1065639	Identifier	out_case_manual		1065479	0					
ANR	1065640	Label	out_case_manual :	450:0:12677:12692	1065479	11	True				
ANR	1065641	Identifier	out_case_manual		1065479	0					
ANR	1065642	ExpressionStatement	free ( args )	451:3:12697:12708	1065479	12	True				
ANR	1065643	CallExpression	free ( args )		1065479	0					
ANR	1065644	Callee	free		1065479	0					
ANR	1065645	Identifier	free		1065479	0					
ANR	1065646	ArgumentList	args		1065479	1					
ANR	1065647	Argument	args		1065479	0					
ANR	1065648	Identifier	args		1065479	0					
ANR	1065649	ReturnStatement	return retval ;	452:3:12713:12726	1065479	13	True				
ANR	1065650	Identifier	retval		1065479	0					
ANR	1065651	BreakStatement	break ;	454:2:12734:12739	1065479	2	True				
ANR	1065652	Label	case 'f' :	455:1:12742:12750	1065479	3	True				
ANR	1065653	CompoundStatement		42:3:824:842	1065479	4					
ANR	1065654	IdentifierDeclStatement	RAnalFunction * fcni = NULL ;	457:3:12768:12794	1065479	0	True				
ANR	1065655	IdentifierDecl	* fcni = NULL		1065479	0					
ANR	1065656	IdentifierDeclType	RAnalFunction *		1065479	0					
ANR	1065657	Identifier	fcni		1065479	1					
ANR	1065658	AssignmentExpression	* fcni = NULL		1065479	2		=			
ANR	1065659	Identifier	NULL		1065479	0					
ANR	1065660	Identifier	NULL		1065479	1					
ANR	1065661	IdentifierDeclStatement	RListIter * iter = NULL ;	458:3:12799:12821	1065479	1	True				
ANR	1065662	IdentifierDecl	* iter = NULL		1065479	0					
ANR	1065663	IdentifierDeclType	RListIter *		1065479	0					
ANR	1065664	Identifier	iter		1065479	1					
ANR	1065665	AssignmentExpression	* iter = NULL		1065479	2		=			
ANR	1065666	Identifier	NULL		1065479	0					
ANR	1065667	Identifier	NULL		1065479	1					
ANR	1065668	IdentifierDeclStatement	"const char * fcnname = NULL , * zigname = NULL ;"	459:3:12826:12869	1065479	2	True				
ANR	1065669	IdentifierDecl	* fcnname = NULL		1065479	0					
ANR	1065670	IdentifierDeclType	const char *		1065479	0					
ANR	1065671	Identifier	fcnname		1065479	1					
ANR	1065672	AssignmentExpression	* fcnname = NULL		1065479	2		=			
ANR	1065673	Identifier	NULL		1065479	0					
ANR	1065674	Identifier	NULL		1065479	1					
ANR	1065675	IdentifierDecl	* zigname = NULL		1065479	1					
ANR	1065676	IdentifierDeclType	const char *		1065479	0					
ANR	1065677	Identifier	zigname		1065479	1					
ANR	1065678	AssignmentExpression	* zigname = NULL		1065479	2		=			
ANR	1065679	Identifier	NULL		1065479	0					
ANR	1065680	Identifier	NULL		1065479	1					
ANR	1065681	IdentifierDeclStatement	char * args = NULL ;	460:3:12874:12891	1065479	3	True				
ANR	1065682	IdentifierDecl	* args = NULL		1065479	0					
ANR	1065683	IdentifierDeclType	char *		1065479	0					
ANR	1065684	Identifier	args		1065479	1					
ANR	1065685	AssignmentExpression	* args = NULL		1065479	2		=			
ANR	1065686	Identifier	NULL		1065479	0					
ANR	1065687	Identifier	NULL		1065479	1					
ANR	1065688	IdentifierDeclStatement	int n = 0 ;	461:3:12896:12905	1065479	4	True				
ANR	1065689	IdentifierDecl	n = 0		1065479	0					
ANR	1065690	IdentifierDeclType	int		1065479	0					
ANR	1065691	Identifier	n		1065479	1					
ANR	1065692	AssignmentExpression	n = 0		1065479	2		=			
ANR	1065693	Identifier	n		1065479	0					
ANR	1065694	PrimaryExpression	0		1065479	1					
ANR	1065695	IdentifierDeclStatement	bool retval = true ;	462:3:12910:12928	1065479	5	True				
ANR	1065696	IdentifierDecl	retval = true		1065479	0					
ANR	1065697	IdentifierDeclType	bool		1065479	0					
ANR	1065698	Identifier	retval		1065479	1					
ANR	1065699	AssignmentExpression	retval = true		1065479	2		=			
ANR	1065700	Identifier	true		1065479	0					
ANR	1065701	Identifier	true		1065479	1					
ANR	1065702	ExpressionStatement	args = r_str_new ( r_str_trim_ro ( input + 1 ) )	464:3:12934:12978	1065479	6	True				
ANR	1065703	AssignmentExpression	args = r_str_new ( r_str_trim_ro ( input + 1 ) )		1065479	0		=			
ANR	1065704	Identifier	args		1065479	0					
ANR	1065705	CallExpression	r_str_new ( r_str_trim_ro ( input + 1 ) )		1065479	1					
ANR	1065706	Callee	r_str_new		1065479	0					
ANR	1065707	Identifier	r_str_new		1065479	0					
ANR	1065708	ArgumentList	r_str_trim_ro ( input + 1 )		1065479	1					
ANR	1065709	Argument	r_str_trim_ro ( input + 1 )		1065479	0					
ANR	1065710	CallExpression	r_str_trim_ro ( input + 1 )		1065479	0					
ANR	1065711	Callee	r_str_trim_ro		1065479	0					
ANR	1065712	Identifier	r_str_trim_ro		1065479	0					
ANR	1065713	ArgumentList	input + 1		1065479	1					
ANR	1065714	Argument	input + 1		1065479	0					
ANR	1065715	AdditiveExpression	input + 1		1065479	0		+			
ANR	1065716	Identifier	input		1065479	0					
ANR	1065717	PrimaryExpression	1		1065479	1					
ANR	1065718	ExpressionStatement	n = r_str_word_set0 ( args )	465:3:12983:13009	1065479	7	True				
ANR	1065719	AssignmentExpression	n = r_str_word_set0 ( args )		1065479	0		=			
ANR	1065720	Identifier	n		1065479	0					
ANR	1065721	CallExpression	r_str_word_set0 ( args )		1065479	1					
ANR	1065722	Callee	r_str_word_set0		1065479	0					
ANR	1065723	Identifier	r_str_word_set0		1065479	0					
ANR	1065724	ArgumentList	args		1065479	1					
ANR	1065725	Argument	args		1065479	0					
ANR	1065726	Identifier	args		1065479	0					
ANR	1065727	IfStatement	if ( n > 2 )		1065479	8					
ANR	1065728	Condition	n > 2	467:7:13019:13023	1065479	0	True				
ANR	1065729	RelationalExpression	n > 2		1065479	0		>			
ANR	1065730	Identifier	n		1065479	0					
ANR	1065731	PrimaryExpression	2		1065479	1					
ANR	1065732	CompoundStatement		47:14:940:940	1065479	1					
ANR	1065733	ExpressionStatement	"eprintf ( ""usage: zaf [fcnname] [zigname]\\n"" )"	468:4:13032:13076	1065479	0	True				
ANR	1065734	CallExpression	"eprintf ( ""usage: zaf [fcnname] [zigname]\\n"" )"		1065479	0					
ANR	1065735	Callee	eprintf		1065479	0					
ANR	1065736	Identifier	eprintf		1065479	0					
ANR	1065737	ArgumentList	"""usage: zaf [fcnname] [zigname]\\n"""		1065479	1					
ANR	1065738	Argument	"""usage: zaf [fcnname] [zigname]\\n"""		1065479	0					
ANR	1065739	PrimaryExpression	"""usage: zaf [fcnname] [zigname]\\n"""		1065479	0					
ANR	1065740	ExpressionStatement	retval = false	469:4:13082:13096	1065479	1	True				
ANR	1065741	AssignmentExpression	retval = false		1065479	0		=			
ANR	1065742	Identifier	retval		1065479	0					
ANR	1065743	Identifier	false		1065479	1					
ANR	1065744	GotoStatement	goto out_case_fcn ;	470:4:13102:13119	1065479	2	True				
ANR	1065745	Identifier	out_case_fcn		1065479	0					
ANR	1065746	SwitchStatement	switch ( n )		1065479	9					
ANR	1065747	Condition	n	473:11:13138:13138	1065479	0	True				
ANR	1065748	Identifier	n		1065479	0					
ANR	1065749	CompoundStatement		53:14:1055:1055	1065479	1					
ANR	1065750	Label	case 2 :	474:3:13146:13152	1065479	0	True				
ANR	1065751	ExpressionStatement	"zigname = r_str_word_get0 ( args , 1 )"	475:4:13158:13193	1065479	1	True				
ANR	1065752	AssignmentExpression	"zigname = r_str_word_get0 ( args , 1 )"		1065479	0		=			
ANR	1065753	Identifier	zigname		1065479	0					
ANR	1065754	CallExpression	"r_str_word_get0 ( args , 1 )"		1065479	1					
ANR	1065755	Callee	r_str_word_get0		1065479	0					
ANR	1065756	Identifier	r_str_word_get0		1065479	0					
ANR	1065757	ArgumentList	args		1065479	1					
ANR	1065758	Argument	args		1065479	0					
ANR	1065759	Identifier	args		1065479	0					
ANR	1065760	Argument	1		1065479	1					
ANR	1065761	PrimaryExpression	1		1065479	0					
ANR	1065762	Label	case 1 :	476:3:13198:13204	1065479	2	True				
ANR	1065763	ExpressionStatement	"fcnname = r_str_word_get0 ( args , 0 )"	477:4:13210:13245	1065479	3	True				
ANR	1065764	AssignmentExpression	"fcnname = r_str_word_get0 ( args , 0 )"		1065479	0		=			
ANR	1065765	Identifier	fcnname		1065479	0					
ANR	1065766	CallExpression	"r_str_word_get0 ( args , 0 )"		1065479	1					
ANR	1065767	Callee	r_str_word_get0		1065479	0					
ANR	1065768	Identifier	r_str_word_get0		1065479	0					
ANR	1065769	ArgumentList	args		1065479	1					
ANR	1065770	Argument	args		1065479	0					
ANR	1065771	Identifier	args		1065479	0					
ANR	1065772	Argument	0		1065479	1					
ANR	1065773	PrimaryExpression	0		1065479	0					
ANR	1065774	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	480:3:13256:13286	1065479	10	True				
ANR	1065775	CallExpression	"r_cons_break_push ( NULL , NULL )"		1065479	0					
ANR	1065776	Callee	r_cons_break_push		1065479	0					
ANR	1065777	Identifier	r_cons_break_push		1065479	0					
ANR	1065778	ArgumentList	NULL		1065479	1					
ANR	1065779	Argument	NULL		1065479	0					
ANR	1065780	Identifier	NULL		1065479	0					
ANR	1065781	Argument	NULL		1065479	1					
ANR	1065782	Identifier	NULL		1065479	0					
ANR	1065783	Statement	r_list_foreach	481:3:13291:13304	1065479	11	True				
ANR	1065784	Statement	(	481:18:13306:13306	1065479	12	True				
ANR	1065785	Statement	core	481:19:13307:13310	1065479	13	True				
ANR	1065786	Statement	->	481:23:13311:13312	1065479	14	True				
ANR	1065787	Statement	anal	481:25:13313:13316	1065479	15	True				
ANR	1065788	Statement	->	481:29:13317:13318	1065479	16	True				
ANR	1065789	Statement	fcns	481:31:13319:13322	1065479	17	True				
ANR	1065790	Statement	","	481:35:13323:13323	1065479	18	True				
ANR	1065791	Statement	iter	481:37:13325:13328	1065479	19	True				
ANR	1065792	Statement	","	481:41:13329:13329	1065479	20	True				
ANR	1065793	Statement	fcni	481:43:13331:13334	1065479	21	True				
ANR	1065794	Statement	)	481:47:13335:13335	1065479	22	True				
ANR	1065795	CompoundStatement		61:49:1251:1251	1065479	23					
ANR	1065796	IfStatement	if ( r_cons_is_breaked ( ) )		1065479	0					
ANR	1065797	Condition	r_cons_is_breaked ( )	482:8:13347:13366	1065479	0	True				
ANR	1065798	CallExpression	r_cons_is_breaked ( )		1065479	0					
ANR	1065799	Callee	r_cons_is_breaked		1065479	0					
ANR	1065800	Identifier	r_cons_is_breaked		1065479	0					
ANR	1065801	ArgumentList			1065479	1					
ANR	1065802	CompoundStatement		62:30:1283:1283	1065479	1					
ANR	1065803	BreakStatement	break ;	483:5:13376:13381	1065479	0	True				
ANR	1065804	IfStatement	"if ( ( ! fcnname && core -> offset == fcni -> addr ) || ( fcnname && ! strcmp ( fcnname , fcni -> name ) ) )"		1065479	1					
ANR	1065805	Condition	"( ! fcnname && core -> offset == fcni -> addr ) || ( fcnname && ! strcmp ( fcnname , fcni -> name ) )"	485:8:13397:13487	1065479	0	True				
ANR	1065806	OrExpression	"( ! fcnname && core -> offset == fcni -> addr ) || ( fcnname && ! strcmp ( fcnname , fcni -> name ) )"		1065479	0		||			
ANR	1065807	AndExpression	! fcnname && core -> offset == fcni -> addr		1065479	0		&&			
ANR	1065808	UnaryOperationExpression	! fcnname		1065479	0					
ANR	1065809	UnaryOperator	!		1065479	0					
ANR	1065810	Identifier	fcnname		1065479	1					
ANR	1065811	EqualityExpression	core -> offset == fcni -> addr		1065479	1		==			
ANR	1065812	PtrMemberAccess	core -> offset		1065479	0					
ANR	1065813	Identifier	core		1065479	0					
ANR	1065814	Identifier	offset		1065479	1					
ANR	1065815	PtrMemberAccess	fcni -> addr		1065479	1					
ANR	1065816	Identifier	fcni		1065479	0					
ANR	1065817	Identifier	addr		1065479	1					
ANR	1065818	AndExpression	"fcnname && ! strcmp ( fcnname , fcni -> name )"		1065479	1		&&			
ANR	1065819	Identifier	fcnname		1065479	0					
ANR	1065820	UnaryOperationExpression	"! strcmp ( fcnname , fcni -> name )"		1065479	1					
ANR	1065821	UnaryOperator	!		1065479	0					
ANR	1065822	CallExpression	"strcmp ( fcnname , fcni -> name )"		1065479	1					
ANR	1065823	Callee	strcmp		1065479	0					
ANR	1065824	Identifier	strcmp		1065479	0					
ANR	1065825	ArgumentList	fcnname		1065479	1					
ANR	1065826	Argument	fcnname		1065479	0					
ANR	1065827	Identifier	fcnname		1065479	0					
ANR	1065828	Argument	fcni -> name		1065479	1					
ANR	1065829	PtrMemberAccess	fcni -> name		1065479	0					
ANR	1065830	Identifier	fcni		1065479	0					
ANR	1065831	Identifier	name		1065479	1					
ANR	1065832	CompoundStatement		66:49:1404:1404	1065479	1					
ANR	1065833	ExpressionStatement	"addFcnZign ( core , fcni , zigname )"	487:5:13497:13529	1065479	0	True				
ANR	1065834	CallExpression	"addFcnZign ( core , fcni , zigname )"		1065479	0					
ANR	1065835	Callee	addFcnZign		1065479	0					
ANR	1065836	Identifier	addFcnZign		1065479	0					
ANR	1065837	ArgumentList	core		1065479	1					
ANR	1065838	Argument	core		1065479	0					
ANR	1065839	Identifier	core		1065479	0					
ANR	1065840	Argument	fcni		1065479	1					
ANR	1065841	Identifier	fcni		1065479	0					
ANR	1065842	Argument	zigname		1065479	2					
ANR	1065843	Identifier	zigname		1065479	0					
ANR	1065844	BreakStatement	break ;	488:5:13536:13541	1065479	1	True				
ANR	1065845	ExpressionStatement	r_cons_break_pop ( )	491:3:13557:13576	1065479	24	True				
ANR	1065846	CallExpression	r_cons_break_pop ( )		1065479	0					
ANR	1065847	Callee	r_cons_break_pop		1065479	0					
ANR	1065848	Identifier	r_cons_break_pop		1065479	0					
ANR	1065849	ArgumentList			1065479	1					
ANR	1065850	Label	out_case_fcn :	493:0:13579:13591	1065479	25	True				
ANR	1065851	Identifier	out_case_fcn		1065479	0					
ANR	1065852	ExpressionStatement	free ( args )	494:3:13596:13607	1065479	26	True				
ANR	1065853	CallExpression	free ( args )		1065479	0					
ANR	1065854	Callee	free		1065479	0					
ANR	1065855	Identifier	free		1065479	0					
ANR	1065856	ArgumentList	args		1065479	1					
ANR	1065857	Argument	args		1065479	0					
ANR	1065858	Identifier	args		1065479	0					
ANR	1065859	ReturnStatement	return retval ;	495:3:13612:13625	1065479	27	True				
ANR	1065860	Identifier	retval		1065479	0					
ANR	1065861	BreakStatement	break ;	497:2:13633:13638	1065479	5	True				
ANR	1065862	Label	case 'F' :	498:1:13641:13649	1065479	6	True				
ANR	1065863	CompoundStatement		82:3:1630:1643	1065479	7					
ANR	1065864	IdentifierDeclStatement	RAnalFunction * fcni = NULL ;	500:3:13658:13684	1065479	0	True				
ANR	1065865	IdentifierDecl	* fcni = NULL		1065479	0					
ANR	1065866	IdentifierDeclType	RAnalFunction *		1065479	0					
ANR	1065867	Identifier	fcni		1065479	1					
ANR	1065868	AssignmentExpression	* fcni = NULL		1065479	2		=			
ANR	1065869	Identifier	NULL		1065479	0					
ANR	1065870	Identifier	NULL		1065479	1					
ANR	1065871	IdentifierDeclStatement	RListIter * iter = NULL ;	501:3:13689:13711	1065479	1	True				
ANR	1065872	IdentifierDecl	* iter = NULL		1065479	0					
ANR	1065873	IdentifierDeclType	RListIter *		1065479	0					
ANR	1065874	Identifier	iter		1065479	1					
ANR	1065875	AssignmentExpression	* iter = NULL		1065479	2		=			
ANR	1065876	Identifier	NULL		1065479	0					
ANR	1065877	Identifier	NULL		1065479	1					
ANR	1065878	IdentifierDeclStatement	int count = 0 ;	502:3:13716:13729	1065479	2	True				
ANR	1065879	IdentifierDecl	count = 0		1065479	0					
ANR	1065880	IdentifierDeclType	int		1065479	0					
ANR	1065881	Identifier	count		1065479	1					
ANR	1065882	AssignmentExpression	count = 0		1065479	2		=			
ANR	1065883	Identifier	count		1065479	0					
ANR	1065884	PrimaryExpression	0		1065479	1					
ANR	1065885	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	504:3:13735:13765	1065479	3	True				
ANR	1065886	CallExpression	"r_cons_break_push ( NULL , NULL )"		1065479	0					
ANR	1065887	Callee	r_cons_break_push		1065479	0					
ANR	1065888	Identifier	r_cons_break_push		1065479	0					
ANR	1065889	ArgumentList	NULL		1065479	1					
ANR	1065890	Argument	NULL		1065479	0					
ANR	1065891	Identifier	NULL		1065479	0					
ANR	1065892	Argument	NULL		1065479	1					
ANR	1065893	Identifier	NULL		1065479	0					
ANR	1065894	Statement	r_list_foreach	505:3:13770:13783	1065479	4	True				
ANR	1065895	Statement	(	505:18:13785:13785	1065479	5	True				
ANR	1065896	Statement	core	505:19:13786:13789	1065479	6	True				
ANR	1065897	Statement	->	505:23:13790:13791	1065479	7	True				
ANR	1065898	Statement	anal	505:25:13792:13795	1065479	8	True				
ANR	1065899	Statement	->	505:29:13796:13797	1065479	9	True				
ANR	1065900	Statement	fcns	505:31:13798:13801	1065479	10	True				
ANR	1065901	Statement	","	505:35:13802:13802	1065479	11	True				
ANR	1065902	Statement	iter	505:37:13804:13807	1065479	12	True				
ANR	1065903	Statement	","	505:41:13808:13808	1065479	13	True				
ANR	1065904	Statement	fcni	505:43:13810:13813	1065479	14	True				
ANR	1065905	Statement	)	505:47:13814:13814	1065479	15	True				
ANR	1065906	CompoundStatement		85:49:1730:1730	1065479	16					
ANR	1065907	IfStatement	if ( r_cons_is_breaked ( ) )		1065479	0					
ANR	1065908	Condition	r_cons_is_breaked ( )	506:8:13826:13845	1065479	0	True				
ANR	1065909	CallExpression	r_cons_is_breaked ( )		1065479	0					
ANR	1065910	Callee	r_cons_is_breaked		1065479	0					
ANR	1065911	Identifier	r_cons_is_breaked		1065479	0					
ANR	1065912	ArgumentList			1065479	1					
ANR	1065913	CompoundStatement		86:30:1762:1762	1065479	1					
ANR	1065914	BreakStatement	break ;	507:5:13855:13860	1065479	0	True				
ANR	1065915	ExpressionStatement	"addFcnZign ( core , fcni , NULL )"	509:4:13872:13901	1065479	1	True				
ANR	1065916	CallExpression	"addFcnZign ( core , fcni , NULL )"		1065479	0					
ANR	1065917	Callee	addFcnZign		1065479	0					
ANR	1065918	Identifier	addFcnZign		1065479	0					
ANR	1065919	ArgumentList	core		1065479	1					
ANR	1065920	Argument	core		1065479	0					
ANR	1065921	Identifier	core		1065479	0					
ANR	1065922	Argument	fcni		1065479	1					
ANR	1065923	Identifier	fcni		1065479	0					
ANR	1065924	Argument	NULL		1065479	2					
ANR	1065925	Identifier	NULL		1065479	0					
ANR	1065926	ExpressionStatement	count ++	510:4:13907:13914	1065479	2	True				
ANR	1065927	PostIncDecOperationExpression	count ++		1065479	0					
ANR	1065928	Identifier	count		1065479	0					
ANR	1065929	IncDec	++		1065479	1					
ANR	1065930	ExpressionStatement	r_cons_break_pop ( )	512:3:13924:13943	1065479	17	True				
ANR	1065931	CallExpression	r_cons_break_pop ( )		1065479	0					
ANR	1065932	Callee	r_cons_break_pop		1065479	0					
ANR	1065933	Identifier	r_cons_break_pop		1065479	0					
ANR	1065934	ArgumentList			1065479	1					
ANR	1065935	ExpressionStatement	"eprintf ( ""generated zignatures: %d\\n"" , count )"	513:3:13948:13993	1065479	18	True				
ANR	1065936	CallExpression	"eprintf ( ""generated zignatures: %d\\n"" , count )"		1065479	0					
ANR	1065937	Callee	eprintf		1065479	0					
ANR	1065938	Identifier	eprintf		1065479	0					
ANR	1065939	ArgumentList	"""generated zignatures: %d\\n"""		1065479	1					
ANR	1065940	Argument	"""generated zignatures: %d\\n"""		1065479	0					
ANR	1065941	PrimaryExpression	"""generated zignatures: %d\\n"""		1065479	0					
ANR	1065942	Argument	count		1065479	1					
ANR	1065943	Identifier	count		1065479	0					
ANR	1065944	BreakStatement	break ;	515:2:14001:14006	1065479	8	True				
ANR	1065945	Label	case '?' :	516:1:14009:14017	1065479	9	True				
ANR	1065946	IfStatement	if ( input [ 1 ] == '?' )		1065479	10					
ANR	1065947	Condition	input [ 1 ] == '?'	517:6:14025:14039	1065479	0	True				
ANR	1065948	EqualityExpression	input [ 1 ] == '?'		1065479	0		==			
ANR	1065949	ArrayIndexing	input [ 1 ]		1065479	0					
ANR	1065950	Identifier	input		1065479	0					
ANR	1065951	PrimaryExpression	1		1065479	1					
ANR	1065952	PrimaryExpression	'?'		1065479	1					
ANR	1065953	CompoundStatement		97:23:1956:1956	1065479	1					
ANR	1065954	Statement	r_cons_printf	519:3:14094:14106	1065479	0	True				
ANR	1065955	Statement	(	519:17:14108:14108	1065479	1	True				
ANR	1065956	Statement	"""Adding Zignatures (examples and documentation)\\n\\n"""	519:18:14109:14160	1065479	2	True				
ANR	1065957	Statement	"""Zignature types:\\n"""	520:4:14166:14185	1065479	3	True				
ANR	1065958	Statement	"""  a: bytes pattern (anal mask)\\n"""	521:4:14191:14224	1065479	4	True				
ANR	1065959	Statement	"""  b: bytes pattern\\n"""	522:4:14230:14251	1065479	5	True				
ANR	1065960	Statement	"""  c: base64 comment\\n"""	523:4:14257:14279	1065479	6	True				
ANR	1065961	Statement	"""  n: real function name\\n"""	524:4:14285:14311	1065479	7	True				
ANR	1065962	Statement	"""  g: graph metrics\\n"""	525:4:14317:14338	1065479	8	True				
ANR	1065963	Statement	"""  o: original offset\\n"""	526:4:14344:14367	1065479	9	True				
ANR	1065964	Statement	"""  r: references\\n"""	527:4:14373:14391	1065479	10	True				
ANR	1065965	Statement	"""  x: cross references\\n"""	528:4:14397:14421	1065479	11	True				
ANR	1065966	Statement	"""  h: bbhash (hashing of fcn basic blocks)\\n"""	529:4:14427:14471	1065479	12	True				
ANR	1065967	Statement	"""  v: vars (and args)\\n"""	530:4:14477:14500	1065479	13	True				
ANR	1065968	Statement	"""Bytes patterns:\\n"""	531:4:14506:14524	1065479	14	True				
ANR	1065969	Statement	"""  bytes can contain '..' (dots) to specify a binary mask\\n\\n"""	532:4:14530:14591	1065479	15	True				
ANR	1065970	Statement	"""Graph metrics:\\n"""	533:4:14597:14614	1065479	16	True				
ANR	1065971	Statement	"""  cc:    cyclomatic complexity\\n"""	534:4:14620:14653	1065479	17	True				
ANR	1065972	Statement	"""  edges: number of edges\\n"""	535:4:14659:14686	1065479	18	True				
ANR	1065973	Statement	"""  nbbs:  number of basic blocks\\n"""	536:4:14692:14726	1065479	19	True				
ANR	1065974	Statement	"""  ebbs:  number of end basic blocks\\n\\n"""	537:4:14732:14772	1065479	20	True				
ANR	1065975	Statement	"""Examples:\\n"""	538:4:14778:14790	1065479	21	True				
ANR	1065976	Statement	"""  za foo b 558bec..e8........\\n"""	539:4:14796:14828	1065479	22	True				
ANR	1065977	Statement	"""  za foo a e811223344\\n"""	540:4:14834:14858	1065479	23	True				
ANR	1065978	Statement	"""  za foo g cc=2 nbbs=3 edges=3 ebbs=1\\n"""	541:4:14864:14904	1065479	24	True				
ANR	1065979	Statement	"""  za foo g nbbs=3 edges=3\\n"""	542:4:14910:14938	1065479	25	True				
ANR	1065980	Statement	"""  za foo v b-32 b-48 b-64\\n"""	543:4:14944:14972	1065479	26	True				
ANR	1065981	Statement	"""  za foo o 0x08048123\\n"""	544:4:14978:15002	1065479	27	True				
ANR	1065982	Statement	"""  za foo c this is a comment (base64?)\\n"""	545:4:15008:15049	1065479	28	True				
ANR	1065983	Statement	"""  za foo r sym.imp.strcpy sym.imp.sprintf sym.imp.strlen\\n"""	546:4:15055:15114	1065479	29	True				
ANR	1065984	Statement	"""  za foo h 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae\\n"""	547:4:15120:15198	1065479	30	True				
ANR	1065985	Statement	)	547:83:15199:15199	1065479	31	True				
ANR	1065986	ExpressionStatement		547:84:15200:15200	1065479	32	True				
ANR	1065987	ElseStatement	else		1065479	0					
ANR	1065988	CompoundStatement		128:9:3125:3125	1065479	0					
ANR	1065989	ExpressionStatement	"r_core_cmd_help ( core , help_msg_za )"	549:3:15216:15251	1065479	0	True				
ANR	1065990	CallExpression	"r_core_cmd_help ( core , help_msg_za )"		1065479	0					
ANR	1065991	Callee	r_core_cmd_help		1065479	0					
ANR	1065992	Identifier	r_core_cmd_help		1065479	0					
ANR	1065993	ArgumentList	core		1065479	1					
ANR	1065994	Argument	core		1065479	0					
ANR	1065995	Identifier	core		1065479	0					
ANR	1065996	Argument	help_msg_za		1065479	1					
ANR	1065997	Identifier	help_msg_za		1065479	0					
ANR	1065998	BreakStatement	break ;	551:2:15259:15264	1065479	11	True				
ANR	1065999	Label	default :	552:1:15267:15274	1065479	12	True				
ANR	1066000	Identifier	default		1065479	0					
ANR	1066001	ExpressionStatement	"eprintf ( ""usage: za[fF?] [args]\\n"" )"	553:2:15278:15313	1065479	13	True				
ANR	1066002	CallExpression	"eprintf ( ""usage: za[fF?] [args]\\n"" )"		1065479	0					
ANR	1066003	Callee	eprintf		1065479	0					
ANR	1066004	Identifier	eprintf		1065479	0					
ANR	1066005	ArgumentList	"""usage: za[fF?] [args]\\n"""		1065479	1					
ANR	1066006	Argument	"""usage: za[fF?] [args]\\n"""		1065479	0					
ANR	1066007	PrimaryExpression	"""usage: za[fF?] [args]\\n"""		1065479	0					
ANR	1066008	ReturnStatement	return false ;	554:2:15317:15329	1065479	14	True				
ANR	1066009	Identifier	false		1065479	0					
ANR	1066010	ReturnStatement	return true ;	557:1:15336:15347	1065479	2	True				
ANR	1066011	Identifier	true		1065479	0					
ANR	1066012	ReturnType	static int		1065479	1					
ANR	1066013	Identifier	cmdAdd		1065479	2					
ANR	1066014	ParameterList	"void * data , const char * input"		1065479	3					
ANR	1066015	Parameter	void * data	421:18:12054:12063	1065479	0	True				
ANR	1066016	ParameterType	void *		1065479	0					
ANR	1066017	Identifier	data		1065479	1					
ANR	1066018	Parameter	const char * input	421:30:12066:12082	1065479	1	True				
ANR	1066019	ParameterType	const char *		1065479	0					
ANR	1066020	Identifier	input		1065479	1					
ANR	1066021	CFGEntryNode	ENTRY		1065479		True				
ANR	1066022	CFGExitNode	EXIT		1065479		True				
ANR	1066023	Symbol	data		1065479						
ANR	1066024	Symbol	* r_str_word_get0		1065479						
ANR	1066025	Symbol	* input		1065479						
ANR	1066026	Symbol	fcni -> name		1065479						
ANR	1066027	Symbol	* core		1065479						
ANR	1066028	Symbol	core -> offset		1065479						
ANR	1066029	Symbol	type		1065479						
ANR	1066030	Symbol	r_str_word_set0		1065479						
ANR	1066031	Symbol	r_cons_is_breaked		1065479						
ANR	1066032	Symbol	fcni		1065479						
ANR	1066033	Symbol	help_msg_za		1065479						
ANR	1066034	Symbol	addZign		1065479						
ANR	1066035	Symbol	r_str_new		1065479						
ANR	1066036	Symbol	strcmp		1065479						
ANR	1066037	Symbol	NULL		1065479						
ANR	1066038	Symbol	zigname		1065479						
ANR	1066039	Symbol	false		1065479						
ANR	1066040	Symbol	count		1065479						
ANR	1066041	Symbol	iter		1065479						
ANR	1066042	Symbol	r_str_word_get0		1065479						
ANR	1066043	Symbol	fcni -> addr		1065479						
ANR	1066044	Symbol	n		1065479						
ANR	1066045	Symbol	retval		1065479						
ANR	1066046	Symbol	args		1065479						
ANR	1066047	Symbol	fcnname		1065479						
ANR	1066048	Symbol	* fcni		1065479						
ANR	1066049	Symbol	input		1065479						
ANR	1066050	Symbol	core		1065479						
ANR	1066051	Symbol	true		1065479						
ANR	1066052	Symbol	r_str_trim_ro		1065479						
ANR	1066053	Symbol	args0		1065479						
ANR	1066054	Function	cmdOpen	560:0:15352:16037							
ANR	1066055	FunctionDef	"cmdOpen (void * data , const char * input)"		1066054	0					
ANR	1066056	CompoundStatement		560:50:15402:16037	1066054	0					
ANR	1066057	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	561:1:15405:15433	1066054	0	True				
ANR	1066058	IdentifierDecl	* core = ( RCore * ) data		1066054	0					
ANR	1066059	IdentifierDeclType	RCore *		1066054	0					
ANR	1066060	Identifier	core		1066054	1					
ANR	1066061	AssignmentExpression	* core = ( RCore * ) data		1066054	2		=			
ANR	1066062	Identifier	core		1066054	0					
ANR	1066063	CastExpression	( RCore * ) data		1066054	1					
ANR	1066064	CastTarget	RCore *		1066054	0					
ANR	1066065	Identifier	data		1066054	1					
ANR	1066066	SwitchStatement	switch ( * input )		1066054	1					
ANR	1066067	Condition	* input	563:9:15445:15450	1066054	0	True				
ANR	1066068	UnaryOperationExpression	* input		1066054	0					
ANR	1066069	UnaryOperator	*		1066054	0					
ANR	1066070	Identifier	input		1066054	1					
ANR	1066071	CompoundStatement		4:17:50:50	1066054	1					
ANR	1066072	Label	case ' ' :	564:1:15456:15464	1066054	0	True				
ANR	1066073	IfStatement	if ( input [ 1 ] )		1066054	1					
ANR	1066074	Condition	input [ 1 ]	565:6:15472:15479	1066054	0	True				
ANR	1066075	ArrayIndexing	input [ 1 ]		1066054	0					
ANR	1066076	Identifier	input		1066054	0					
ANR	1066077	PrimaryExpression	1		1066054	1					
ANR	1066078	CompoundStatement		6:16:79:79	1066054	1					
ANR	1066079	ReturnStatement	"return r_sign_load ( core -> anal , input + 1 ) ;"	566:3:15487:15529	1066054	0	True				
ANR	1066080	CallExpression	"r_sign_load ( core -> anal , input + 1 )"		1066054	0					
ANR	1066081	Callee	r_sign_load		1066054	0					
ANR	1066082	Identifier	r_sign_load		1066054	0					
ANR	1066083	ArgumentList	core -> anal		1066054	1					
ANR	1066084	Argument	core -> anal		1066054	0					
ANR	1066085	PtrMemberAccess	core -> anal		1066054	0					
ANR	1066086	Identifier	core		1066054	0					
ANR	1066087	Identifier	anal		1066054	1					
ANR	1066088	Argument	input + 1		1066054	1					
ANR	1066089	AdditiveExpression	input + 1		1066054	0		+			
ANR	1066090	Identifier	input		1066054	0					
ANR	1066091	PrimaryExpression	1		1066054	1					
ANR	1066092	ExpressionStatement	"eprintf ( ""usage: zo filename\\n"" )"	568:2:15537:15569	1066054	2	True				
ANR	1066093	CallExpression	"eprintf ( ""usage: zo filename\\n"" )"		1066054	0					
ANR	1066094	Callee	eprintf		1066054	0					
ANR	1066095	Identifier	eprintf		1066054	0					
ANR	1066096	ArgumentList	"""usage: zo filename\\n"""		1066054	1					
ANR	1066097	Argument	"""usage: zo filename\\n"""		1066054	0					
ANR	1066098	PrimaryExpression	"""usage: zo filename\\n"""		1066054	0					
ANR	1066099	ReturnStatement	return false ;	569:2:15573:15585	1066054	3	True				
ANR	1066100	Identifier	false		1066054	0					
ANR	1066101	Label	case 's' :	570:1:15588:15596	1066054	4	True				
ANR	1066102	IfStatement	if ( input [ 1 ] == ' ' && input [ 2 ] )		1066054	5					
ANR	1066103	Condition	input [ 1 ] == ' ' && input [ 2 ]	571:6:15604:15630	1066054	0	True				
ANR	1066104	AndExpression	input [ 1 ] == ' ' && input [ 2 ]		1066054	0		&&			
ANR	1066105	EqualityExpression	input [ 1 ] == ' '		1066054	0		==			
ANR	1066106	ArrayIndexing	input [ 1 ]		1066054	0					
ANR	1066107	Identifier	input		1066054	0					
ANR	1066108	PrimaryExpression	1		1066054	1					
ANR	1066109	PrimaryExpression	' '		1066054	1					
ANR	1066110	ArrayIndexing	input [ 2 ]		1066054	1					
ANR	1066111	Identifier	input		1066054	0					
ANR	1066112	PrimaryExpression	2		1066054	1					
ANR	1066113	CompoundStatement		12:35:230:230	1066054	1					
ANR	1066114	ReturnStatement	"return r_sign_save ( core -> anal , input + 2 ) ;"	572:3:15638:15680	1066054	0	True				
ANR	1066115	CallExpression	"r_sign_save ( core -> anal , input + 2 )"		1066054	0					
ANR	1066116	Callee	r_sign_save		1066054	0					
ANR	1066117	Identifier	r_sign_save		1066054	0					
ANR	1066118	ArgumentList	core -> anal		1066054	1					
ANR	1066119	Argument	core -> anal		1066054	0					
ANR	1066120	PtrMemberAccess	core -> anal		1066054	0					
ANR	1066121	Identifier	core		1066054	0					
ANR	1066122	Identifier	anal		1066054	1					
ANR	1066123	Argument	input + 2		1066054	1					
ANR	1066124	AdditiveExpression	input + 2		1066054	0		+			
ANR	1066125	Identifier	input		1066054	0					
ANR	1066126	PrimaryExpression	2		1066054	1					
ANR	1066127	ExpressionStatement	"eprintf ( ""usage: zos filename\\n"" )"	574:2:15688:15721	1066054	6	True				
ANR	1066128	CallExpression	"eprintf ( ""usage: zos filename\\n"" )"		1066054	0					
ANR	1066129	Callee	eprintf		1066054	0					
ANR	1066130	Identifier	eprintf		1066054	0					
ANR	1066131	ArgumentList	"""usage: zos filename\\n"""		1066054	1					
ANR	1066132	Argument	"""usage: zos filename\\n"""		1066054	0					
ANR	1066133	PrimaryExpression	"""usage: zos filename\\n"""		1066054	0					
ANR	1066134	ReturnStatement	return false ;	575:2:15725:15737	1066054	7	True				
ANR	1066135	Identifier	false		1066054	0					
ANR	1066136	Label	case 'z' :	576:1:15740:15748	1066054	8	True				
ANR	1066137	IfStatement	if ( input [ 1 ] == ' ' && input [ 2 ] )		1066054	9					
ANR	1066138	Condition	input [ 1 ] == ' ' && input [ 2 ]	577:6:15756:15782	1066054	0	True				
ANR	1066139	AndExpression	input [ 1 ] == ' ' && input [ 2 ]		1066054	0		&&			
ANR	1066140	EqualityExpression	input [ 1 ] == ' '		1066054	0		==			
ANR	1066141	ArrayIndexing	input [ 1 ]		1066054	0					
ANR	1066142	Identifier	input		1066054	0					
ANR	1066143	PrimaryExpression	1		1066054	1					
ANR	1066144	PrimaryExpression	' '		1066054	1					
ANR	1066145	ArrayIndexing	input [ 2 ]		1066054	1					
ANR	1066146	Identifier	input		1066054	0					
ANR	1066147	PrimaryExpression	2		1066054	1					
ANR	1066148	CompoundStatement		18:35:382:382	1066054	1					
ANR	1066149	ReturnStatement	"return r_sign_load_gz ( core -> anal , input + 2 ) ;"	578:3:15790:15835	1066054	0	True				
ANR	1066150	CallExpression	"r_sign_load_gz ( core -> anal , input + 2 )"		1066054	0					
ANR	1066151	Callee	r_sign_load_gz		1066054	0					
ANR	1066152	Identifier	r_sign_load_gz		1066054	0					
ANR	1066153	ArgumentList	core -> anal		1066054	1					
ANR	1066154	Argument	core -> anal		1066054	0					
ANR	1066155	PtrMemberAccess	core -> anal		1066054	0					
ANR	1066156	Identifier	core		1066054	0					
ANR	1066157	Identifier	anal		1066054	1					
ANR	1066158	Argument	input + 2		1066054	1					
ANR	1066159	AdditiveExpression	input + 2		1066054	0		+			
ANR	1066160	Identifier	input		1066054	0					
ANR	1066161	PrimaryExpression	2		1066054	1					
ANR	1066162	ExpressionStatement	"eprintf ( ""usage: zoz filename\\n"" )"	580:2:15843:15876	1066054	10	True				
ANR	1066163	CallExpression	"eprintf ( ""usage: zoz filename\\n"" )"		1066054	0					
ANR	1066164	Callee	eprintf		1066054	0					
ANR	1066165	Identifier	eprintf		1066054	0					
ANR	1066166	ArgumentList	"""usage: zoz filename\\n"""		1066054	1					
ANR	1066167	Argument	"""usage: zoz filename\\n"""		1066054	0					
ANR	1066168	PrimaryExpression	"""usage: zoz filename\\n"""		1066054	0					
ANR	1066169	ReturnStatement	return false ;	581:2:15880:15892	1066054	11	True				
ANR	1066170	Identifier	false		1066054	0					
ANR	1066171	Label	case '?' :	582:1:15895:15903	1066054	12	True				
ANR	1066172	ExpressionStatement	"r_core_cmd_help ( core , help_msg_zo )"	583:2:15907:15942	1066054	13	True				
ANR	1066173	CallExpression	"r_core_cmd_help ( core , help_msg_zo )"		1066054	0					
ANR	1066174	Callee	r_core_cmd_help		1066054	0					
ANR	1066175	Identifier	r_core_cmd_help		1066054	0					
ANR	1066176	ArgumentList	core		1066054	1					
ANR	1066177	Argument	core		1066054	0					
ANR	1066178	Identifier	core		1066054	0					
ANR	1066179	Argument	help_msg_zo		1066054	1					
ANR	1066180	Identifier	help_msg_zo		1066054	0					
ANR	1066181	BreakStatement	break ;	584:2:15946:15951	1066054	14	True				
ANR	1066182	Label	default :	585:1:15954:15961	1066054	15	True				
ANR	1066183	Identifier	default		1066054	0					
ANR	1066184	ExpressionStatement	"eprintf ( ""usage: zo[zs] filename\\n"" )"	586:2:15965:16001	1066054	16	True				
ANR	1066185	CallExpression	"eprintf ( ""usage: zo[zs] filename\\n"" )"		1066054	0					
ANR	1066186	Callee	eprintf		1066054	0					
ANR	1066187	Identifier	eprintf		1066054	0					
ANR	1066188	ArgumentList	"""usage: zo[zs] filename\\n"""		1066054	1					
ANR	1066189	Argument	"""usage: zo[zs] filename\\n"""		1066054	0					
ANR	1066190	PrimaryExpression	"""usage: zo[zs] filename\\n"""		1066054	0					
ANR	1066191	ReturnStatement	return false ;	587:2:16005:16017	1066054	17	True				
ANR	1066192	Identifier	false		1066054	0					
ANR	1066193	ReturnStatement	return true ;	590:1:16024:16035	1066054	2	True				
ANR	1066194	Identifier	true		1066054	0					
ANR	1066195	ReturnType	static int		1066054	1					
ANR	1066196	Identifier	cmdOpen		1066054	2					
ANR	1066197	ParameterList	"void * data , const char * input"		1066054	3					
ANR	1066198	Parameter	void * data	560:19:15371:15380	1066054	0	True				
ANR	1066199	ParameterType	void *		1066054	0					
ANR	1066200	Identifier	data		1066054	1					
ANR	1066201	Parameter	const char * input	560:31:15383:15399	1066054	1	True				
ANR	1066202	ParameterType	const char *		1066054	0					
ANR	1066203	Identifier	input		1066054	1					
ANR	1066204	CFGEntryNode	ENTRY		1066054		True				
ANR	1066205	CFGExitNode	EXIT		1066054		True				
ANR	1066206	Symbol	input		1066054						
ANR	1066207	Symbol	core		1066054						
ANR	1066208	Symbol	data		1066054						
ANR	1066209	Symbol	r_sign_load_gz		1066054						
ANR	1066210	Symbol	* input		1066054						
ANR	1066211	Symbol	* core		1066054						
ANR	1066212	Symbol	false		1066054						
ANR	1066213	Symbol	help_msg_zo		1066054						
ANR	1066214	Symbol	true		1066054						
ANR	1066215	Symbol	r_sign_save		1066054						
ANR	1066216	Symbol	r_sign_load		1066054						
ANR	1066217	Symbol	core -> anal		1066054						
ANR	1066218	Function	cmdSpace	593:0:16040:17005							
ANR	1066219	FunctionDef	"cmdSpace (void * data , const char * input)"		1066218	0					
ANR	1066220	CompoundStatement		593:51:16091:17005	1066218	0					
ANR	1066221	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	594:1:16094:16122	1066218	0	True				
ANR	1066222	IdentifierDecl	* core = ( RCore * ) data		1066218	0					
ANR	1066223	IdentifierDeclType	RCore *		1066218	0					
ANR	1066224	Identifier	core		1066218	1					
ANR	1066225	AssignmentExpression	* core = ( RCore * ) data		1066218	2		=			
ANR	1066226	Identifier	core		1066218	0					
ANR	1066227	CastExpression	( RCore * ) data		1066218	1					
ANR	1066228	CastTarget	RCore *		1066218	0					
ANR	1066229	Identifier	data		1066218	1					
ANR	1066230	IdentifierDeclStatement	RSpaces * zs = & core -> anal -> zign_spaces ;	595:1:16125:16163	1066218	1	True				
ANR	1066231	IdentifierDecl	* zs = & core -> anal -> zign_spaces		1066218	0					
ANR	1066232	IdentifierDeclType	RSpaces *		1066218	0					
ANR	1066233	Identifier	zs		1066218	1					
ANR	1066234	AssignmentExpression	* zs = & core -> anal -> zign_spaces		1066218	2		=			
ANR	1066235	Identifier	zs		1066218	0					
ANR	1066236	UnaryOperationExpression	& core -> anal -> zign_spaces		1066218	1					
ANR	1066237	UnaryOperator	&		1066218	0					
ANR	1066238	PtrMemberAccess	core -> anal -> zign_spaces		1066218	1					
ANR	1066239	PtrMemberAccess	core -> anal		1066218	0					
ANR	1066240	Identifier	core		1066218	0					
ANR	1066241	Identifier	anal		1066218	1					
ANR	1066242	Identifier	zign_spaces		1066218	1					
ANR	1066243	SwitchStatement	switch ( * input )		1066218	2					
ANR	1066244	Condition	* input	597:9:16175:16180	1066218	0	True				
ANR	1066245	UnaryOperationExpression	* input		1066218	0					
ANR	1066246	UnaryOperator	*		1066218	0					
ANR	1066247	Identifier	input		1066218	1					
ANR	1066248	CompoundStatement		5:17:91:91	1066218	1					
ANR	1066249	Label	case '+' :	598:1:16186:16194	1066218	0	True				
ANR	1066250	IfStatement	if ( ! input [ 1 ] )		1066218	1					
ANR	1066251	Condition	! input [ 1 ]	599:6:16202:16210	1066218	0	True				
ANR	1066252	UnaryOperationExpression	! input [ 1 ]		1066218	0					
ANR	1066253	UnaryOperator	!		1066218	0					
ANR	1066254	ArrayIndexing	input [ 1 ]		1066218	1					
ANR	1066255	Identifier	input		1066218	0					
ANR	1066256	PrimaryExpression	1		1066218	1					
ANR	1066257	CompoundStatement		7:17:121:121	1066218	1					
ANR	1066258	ExpressionStatement	"eprintf ( ""usage: zs+zignspace\\n"" )"	600:3:16218:16251	1066218	0	True				
ANR	1066259	CallExpression	"eprintf ( ""usage: zs+zignspace\\n"" )"		1066218	0					
ANR	1066260	Callee	eprintf		1066218	0					
ANR	1066261	Identifier	eprintf		1066218	0					
ANR	1066262	ArgumentList	"""usage: zs+zignspace\\n"""		1066218	1					
ANR	1066263	Argument	"""usage: zs+zignspace\\n"""		1066218	0					
ANR	1066264	PrimaryExpression	"""usage: zs+zignspace\\n"""		1066218	0					
ANR	1066265	ReturnStatement	return false ;	601:3:16256:16268	1066218	1	True				
ANR	1066266	Identifier	false		1066218	0					
ANR	1066267	ExpressionStatement	"r_spaces_push ( zs , input + 1 )"	603:2:16276:16305	1066218	2	True				
ANR	1066268	CallExpression	"r_spaces_push ( zs , input + 1 )"		1066218	0					
ANR	1066269	Callee	r_spaces_push		1066218	0					
ANR	1066270	Identifier	r_spaces_push		1066218	0					
ANR	1066271	ArgumentList	zs		1066218	1					
ANR	1066272	Argument	zs		1066218	0					
ANR	1066273	Identifier	zs		1066218	0					
ANR	1066274	Argument	input + 1		1066218	1					
ANR	1066275	AdditiveExpression	input + 1		1066218	0		+			
ANR	1066276	Identifier	input		1066218	0					
ANR	1066277	PrimaryExpression	1		1066218	1					
ANR	1066278	BreakStatement	break ;	604:2:16309:16314	1066218	3	True				
ANR	1066279	Label	case 'r' :	605:1:16317:16325	1066218	4	True				
ANR	1066280	IfStatement	if ( input [ 1 ] != ' ' || ! input [ 2 ] )		1066218	5					
ANR	1066281	Condition	input [ 1 ] != ' ' || ! input [ 2 ]	606:6:16333:16360	1066218	0	True				
ANR	1066282	OrExpression	input [ 1 ] != ' ' || ! input [ 2 ]		1066218	0		||			
ANR	1066283	EqualityExpression	input [ 1 ] != ' '		1066218	0		!=			
ANR	1066284	ArrayIndexing	input [ 1 ]		1066218	0					
ANR	1066285	Identifier	input		1066218	0					
ANR	1066286	PrimaryExpression	1		1066218	1					
ANR	1066287	PrimaryExpression	' '		1066218	1					
ANR	1066288	UnaryOperationExpression	! input [ 2 ]		1066218	1					
ANR	1066289	UnaryOperator	!		1066218	0					
ANR	1066290	ArrayIndexing	input [ 2 ]		1066218	1					
ANR	1066291	Identifier	input		1066218	0					
ANR	1066292	PrimaryExpression	2		1066218	1					
ANR	1066293	CompoundStatement		14:36:271:271	1066218	1					
ANR	1066294	ExpressionStatement	"eprintf ( ""usage: zsr newname\\n"" )"	607:3:16368:16400	1066218	0	True				
ANR	1066295	CallExpression	"eprintf ( ""usage: zsr newname\\n"" )"		1066218	0					
ANR	1066296	Callee	eprintf		1066218	0					
ANR	1066297	Identifier	eprintf		1066218	0					
ANR	1066298	ArgumentList	"""usage: zsr newname\\n"""		1066218	1					
ANR	1066299	Argument	"""usage: zsr newname\\n"""		1066218	0					
ANR	1066300	PrimaryExpression	"""usage: zsr newname\\n"""		1066218	0					
ANR	1066301	ReturnStatement	return false ;	608:3:16405:16417	1066218	1	True				
ANR	1066302	Identifier	false		1066218	0					
ANR	1066303	ExpressionStatement	"r_spaces_rename ( zs , NULL , input + 2 )"	610:2:16425:16462	1066218	6	True				
ANR	1066304	CallExpression	"r_spaces_rename ( zs , NULL , input + 2 )"		1066218	0					
ANR	1066305	Callee	r_spaces_rename		1066218	0					
ANR	1066306	Identifier	r_spaces_rename		1066218	0					
ANR	1066307	ArgumentList	zs		1066218	1					
ANR	1066308	Argument	zs		1066218	0					
ANR	1066309	Identifier	zs		1066218	0					
ANR	1066310	Argument	NULL		1066218	1					
ANR	1066311	Identifier	NULL		1066218	0					
ANR	1066312	Argument	input + 2		1066218	2					
ANR	1066313	AdditiveExpression	input + 2		1066218	0		+			
ANR	1066314	Identifier	input		1066218	0					
ANR	1066315	PrimaryExpression	2		1066218	1					
ANR	1066316	BreakStatement	break ;	611:2:16466:16471	1066218	7	True				
ANR	1066317	Label	case '-' :	612:1:16474:16482	1066218	8	True				
ANR	1066318	IfStatement	if ( input [ 1 ] == x00 )		1066218	9					
ANR	1066319	Condition	input [ 1 ] == x00	613:6:16490:16506	1066218	0	True				
ANR	1066320	EqualityExpression	input [ 1 ] == x00		1066218	0		==			
ANR	1066321	ArrayIndexing	input [ 1 ]		1066218	0					
ANR	1066322	Identifier	input		1066218	0					
ANR	1066323	PrimaryExpression	1		1066218	1					
ANR	1066324	Identifier	x00		1066218	1					
ANR	1066325	CompoundStatement		21:26:418:418	1066218	1					
ANR	1066326	ExpressionStatement	r_spaces_pop ( zs )	614:3:16515:16532	1066218	0	True				
ANR	1066327	CallExpression	r_spaces_pop ( zs )		1066218	0					
ANR	1066328	Callee	r_spaces_pop		1066218	0					
ANR	1066329	Identifier	r_spaces_pop		1066218	0					
ANR	1066330	ArgumentList	zs		1066218	1					
ANR	1066331	Argument	zs		1066218	0					
ANR	1066332	Identifier	zs		1066218	0					
ANR	1066333	ElseStatement	else		1066218	0					
ANR	1066334	IfStatement	if ( input [ 1 ] == '*' )		1066218	0					
ANR	1066335	Condition	input [ 1 ] == '*'	615:13:16547:16561	1066218	0	True				
ANR	1066336	EqualityExpression	input [ 1 ] == '*'		1066218	0		==			
ANR	1066337	ArrayIndexing	input [ 1 ]		1066218	0					
ANR	1066338	Identifier	input		1066218	0					
ANR	1066339	PrimaryExpression	1		1066218	1					
ANR	1066340	PrimaryExpression	'*'		1066218	1					
ANR	1066341	CompoundStatement		23:30:472:472	1066218	1					
ANR	1066342	ExpressionStatement	"r_spaces_unset ( zs , NULL )"	616:3:16569:16594	1066218	0	True				
ANR	1066343	CallExpression	"r_spaces_unset ( zs , NULL )"		1066218	0					
ANR	1066344	Callee	r_spaces_unset		1066218	0					
ANR	1066345	Identifier	r_spaces_unset		1066218	0					
ANR	1066346	ArgumentList	zs		1066218	1					
ANR	1066347	Argument	zs		1066218	0					
ANR	1066348	Identifier	zs		1066218	0					
ANR	1066349	Argument	NULL		1066218	1					
ANR	1066350	Identifier	NULL		1066218	0					
ANR	1066351	ElseStatement	else		1066218	0					
ANR	1066352	CompoundStatement		25:9:513:513	1066218	0					
ANR	1066353	ExpressionStatement	"r_spaces_unset ( zs , input + 1 )"	618:3:16610:16640	1066218	0	True				
ANR	1066354	CallExpression	"r_spaces_unset ( zs , input + 1 )"		1066218	0					
ANR	1066355	Callee	r_spaces_unset		1066218	0					
ANR	1066356	Identifier	r_spaces_unset		1066218	0					
ANR	1066357	ArgumentList	zs		1066218	1					
ANR	1066358	Argument	zs		1066218	0					
ANR	1066359	Identifier	zs		1066218	0					
ANR	1066360	Argument	input + 1		1066218	1					
ANR	1066361	AdditiveExpression	input + 1		1066218	0		+			
ANR	1066362	Identifier	input		1066218	0					
ANR	1066363	PrimaryExpression	1		1066218	1					
ANR	1066364	BreakStatement	break ;	620:2:16648:16653	1066218	10	True				
ANR	1066365	Label	case 'j' :	621:1:16656:16664	1066218	11	True				
ANR	1066366	Label	case '*' :	622:1:16667:16675	1066218	12	True				
ANR	1066367	Label	case '\\0' :	623:1:16678:16687	1066218	13	True				
ANR	1066368	ExpressionStatement	"spaces_list ( zs , input [ 0 ] )"	624:2:16691:16717	1066218	14	True				
ANR	1066369	CallExpression	"spaces_list ( zs , input [ 0 ] )"		1066218	0					
ANR	1066370	Callee	spaces_list		1066218	0					
ANR	1066371	Identifier	spaces_list		1066218	0					
ANR	1066372	ArgumentList	zs		1066218	1					
ANR	1066373	Argument	zs		1066218	0					
ANR	1066374	Identifier	zs		1066218	0					
ANR	1066375	Argument	input [ 0 ]		1066218	1					
ANR	1066376	ArrayIndexing	input [ 0 ]		1066218	0					
ANR	1066377	Identifier	input		1066218	0					
ANR	1066378	PrimaryExpression	0		1066218	1					
ANR	1066379	BreakStatement	break ;	625:2:16721:16726	1066218	15	True				
ANR	1066380	Label	case ' ' :	626:1:16729:16737	1066218	16	True				
ANR	1066381	IfStatement	if ( ! input [ 1 ] )		1066218	17					
ANR	1066382	Condition	! input [ 1 ]	627:6:16745:16753	1066218	0	True				
ANR	1066383	UnaryOperationExpression	! input [ 1 ]		1066218	0					
ANR	1066384	UnaryOperator	!		1066218	0					
ANR	1066385	ArrayIndexing	input [ 1 ]		1066218	1					
ANR	1066386	Identifier	input		1066218	0					
ANR	1066387	PrimaryExpression	1		1066218	1					
ANR	1066388	CompoundStatement		35:17:664:664	1066218	1					
ANR	1066389	ExpressionStatement	"eprintf ( ""usage: zs zignspace\\n"" )"	628:3:16761:16794	1066218	0	True				
ANR	1066390	CallExpression	"eprintf ( ""usage: zs zignspace\\n"" )"		1066218	0					
ANR	1066391	Callee	eprintf		1066218	0					
ANR	1066392	Identifier	eprintf		1066218	0					
ANR	1066393	ArgumentList	"""usage: zs zignspace\\n"""		1066218	1					
ANR	1066394	Argument	"""usage: zs zignspace\\n"""		1066218	0					
ANR	1066395	PrimaryExpression	"""usage: zs zignspace\\n"""		1066218	0					
ANR	1066396	ReturnStatement	return false ;	629:3:16799:16811	1066218	1	True				
ANR	1066397	Identifier	false		1066218	0					
ANR	1066398	ExpressionStatement	"r_spaces_set ( zs , input + 1 )"	631:2:16819:16847	1066218	18	True				
ANR	1066399	CallExpression	"r_spaces_set ( zs , input + 1 )"		1066218	0					
ANR	1066400	Callee	r_spaces_set		1066218	0					
ANR	1066401	Identifier	r_spaces_set		1066218	0					
ANR	1066402	ArgumentList	zs		1066218	1					
ANR	1066403	Argument	zs		1066218	0					
ANR	1066404	Identifier	zs		1066218	0					
ANR	1066405	Argument	input + 1		1066218	1					
ANR	1066406	AdditiveExpression	input + 1		1066218	0		+			
ANR	1066407	Identifier	input		1066218	0					
ANR	1066408	PrimaryExpression	1		1066218	1					
ANR	1066409	BreakStatement	break ;	632:2:16851:16856	1066218	19	True				
ANR	1066410	Label	case '?' :	633:1:16859:16867	1066218	20	True				
ANR	1066411	ExpressionStatement	"r_core_cmd_help ( core , help_msg_zs )"	634:2:16871:16906	1066218	21	True				
ANR	1066412	CallExpression	"r_core_cmd_help ( core , help_msg_zs )"		1066218	0					
ANR	1066413	Callee	r_core_cmd_help		1066218	0					
ANR	1066414	Identifier	r_core_cmd_help		1066218	0					
ANR	1066415	ArgumentList	core		1066218	1					
ANR	1066416	Argument	core		1066218	0					
ANR	1066417	Identifier	core		1066218	0					
ANR	1066418	Argument	help_msg_zs		1066218	1					
ANR	1066419	Identifier	help_msg_zs		1066218	0					
ANR	1066420	BreakStatement	break ;	635:2:16910:16915	1066218	22	True				
ANR	1066421	Label	default :	636:1:16918:16925	1066218	23	True				
ANR	1066422	Identifier	default		1066218	0					
ANR	1066423	ExpressionStatement	"eprintf ( ""usage: zs[+-*] [namespace]\\n"" )"	637:2:16929:16969	1066218	24	True				
ANR	1066424	CallExpression	"eprintf ( ""usage: zs[+-*] [namespace]\\n"" )"		1066218	0					
ANR	1066425	Callee	eprintf		1066218	0					
ANR	1066426	Identifier	eprintf		1066218	0					
ANR	1066427	ArgumentList	"""usage: zs[+-*] [namespace]\\n"""		1066218	1					
ANR	1066428	Argument	"""usage: zs[+-*] [namespace]\\n"""		1066218	0					
ANR	1066429	PrimaryExpression	"""usage: zs[+-*] [namespace]\\n"""		1066218	0					
ANR	1066430	ReturnStatement	return false ;	638:2:16973:16985	1066218	25	True				
ANR	1066431	Identifier	false		1066218	0					
ANR	1066432	ReturnStatement	return true ;	641:1:16992:17003	1066218	3	True				
ANR	1066433	Identifier	true		1066218	0					
ANR	1066434	ReturnType	static int		1066218	1					
ANR	1066435	Identifier	cmdSpace		1066218	2					
ANR	1066436	ParameterList	"void * data , const char * input"		1066218	3					
ANR	1066437	Parameter	void * data	593:20:16060:16069	1066218	0	True				
ANR	1066438	ParameterType	void *		1066218	0					
ANR	1066439	Identifier	data		1066218	1					
ANR	1066440	Parameter	const char * input	593:32:16072:16088	1066218	1	True				
ANR	1066441	ParameterType	const char *		1066218	0					
ANR	1066442	Identifier	input		1066218	1					
ANR	1066443	CFGEntryNode	ENTRY		1066218		True				
ANR	1066444	CFGExitNode	EXIT		1066218		True				
ANR	1066445	Symbol	NULL		1066218						
ANR	1066446	Symbol	data		1066218						
ANR	1066447	Symbol	* core		1066218						
ANR	1066448	Symbol	* input		1066218						
ANR	1066449	Symbol	false		1066218						
ANR	1066450	Symbol	help_msg_zs		1066218						
ANR	1066451	Symbol	core -> anal		1066218						
ANR	1066452	Symbol	input		1066218						
ANR	1066453	Symbol	core		1066218						
ANR	1066454	Symbol	& core -> anal -> zign_spaces		1066218						
ANR	1066455	Symbol	true		1066218						
ANR	1066456	Symbol	zs		1066218						
ANR	1066457	Symbol	x00		1066218						
ANR	1066458	Function	cmdFlirt	644:0:17008:17811							
ANR	1066459	FunctionDef	"cmdFlirt (void * data , const char * input)"		1066458	0					
ANR	1066460	CompoundStatement		644:51:17059:17811	1066458	0					
ANR	1066461	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	645:1:17062:17090	1066458	0	True				
ANR	1066462	IdentifierDecl	* core = ( RCore * ) data		1066458	0					
ANR	1066463	IdentifierDeclType	RCore *		1066458	0					
ANR	1066464	Identifier	core		1066458	1					
ANR	1066465	AssignmentExpression	* core = ( RCore * ) data		1066458	2		=			
ANR	1066466	Identifier	core		1066458	0					
ANR	1066467	CastExpression	( RCore * ) data		1066458	1					
ANR	1066468	CastTarget	RCore *		1066458	0					
ANR	1066469	Identifier	data		1066458	1					
ANR	1066470	SwitchStatement	switch ( * input )		1066458	1					
ANR	1066471	Condition	* input	647:9:17102:17107	1066458	0	True				
ANR	1066472	UnaryOperationExpression	* input		1066458	0					
ANR	1066473	UnaryOperator	*		1066458	0					
ANR	1066474	Identifier	input		1066458	1					
ANR	1066475	CompoundStatement		22:2:409:460	1066458	1					
ANR	1066476	Label	case 'd' :	648:1:17113:17121	1066458	0	True				
ANR	1066477	IfStatement	if ( input [ 1 ] != ' ' )		1066458	1					
ANR	1066478	Condition	input [ 1 ] != ' '	650:6:17139:17153	1066458	0	True				
ANR	1066479	EqualityExpression	input [ 1 ] != ' '		1066458	0		!=			
ANR	1066480	ArrayIndexing	input [ 1 ]		1066458	0					
ANR	1066481	Identifier	input		1066458	0					
ANR	1066482	PrimaryExpression	1		1066458	1					
ANR	1066483	PrimaryExpression	' '		1066458	1					
ANR	1066484	CompoundStatement		7:23:96:96	1066458	1					
ANR	1066485	ExpressionStatement	"eprintf ( ""usage: zfd filename\\n"" )"	651:3:17161:17194	1066458	0	True				
ANR	1066486	CallExpression	"eprintf ( ""usage: zfd filename\\n"" )"		1066458	0					
ANR	1066487	Callee	eprintf		1066458	0					
ANR	1066488	Identifier	eprintf		1066458	0					
ANR	1066489	ArgumentList	"""usage: zfd filename\\n"""		1066458	1					
ANR	1066490	Argument	"""usage: zfd filename\\n"""		1066458	0					
ANR	1066491	PrimaryExpression	"""usage: zfd filename\\n"""		1066458	0					
ANR	1066492	ReturnStatement	return false ;	652:3:17199:17211	1066458	1	True				
ANR	1066493	Identifier	false		1066458	0					
ANR	1066494	ExpressionStatement	"r_sign_flirt_dump ( core -> anal , input + 2 )"	654:2:17219:17260	1066458	2	True				
ANR	1066495	CallExpression	"r_sign_flirt_dump ( core -> anal , input + 2 )"		1066458	0					
ANR	1066496	Callee	r_sign_flirt_dump		1066458	0					
ANR	1066497	Identifier	r_sign_flirt_dump		1066458	0					
ANR	1066498	ArgumentList	core -> anal		1066458	1					
ANR	1066499	Argument	core -> anal		1066458	0					
ANR	1066500	PtrMemberAccess	core -> anal		1066458	0					
ANR	1066501	Identifier	core		1066458	0					
ANR	1066502	Identifier	anal		1066458	1					
ANR	1066503	Argument	input + 2		1066458	1					
ANR	1066504	AdditiveExpression	input + 2		1066458	0		+			
ANR	1066505	Identifier	input		1066458	0					
ANR	1066506	PrimaryExpression	2		1066458	1					
ANR	1066507	BreakStatement	break ;	655:2:17264:17269	1066458	3	True				
ANR	1066508	Label	case 's' :	656:1:17272:17280	1066458	4	True				
ANR	1066509	IfStatement	if ( input [ 1 ] != ' ' )		1066458	5					
ANR	1066510	Condition	input [ 1 ] != ' '	658:6:17298:17312	1066458	0	True				
ANR	1066511	EqualityExpression	input [ 1 ] != ' '		1066458	0		!=			
ANR	1066512	ArrayIndexing	input [ 1 ]		1066458	0					
ANR	1066513	Identifier	input		1066458	0					
ANR	1066514	PrimaryExpression	1		1066458	1					
ANR	1066515	PrimaryExpression	' '		1066458	1					
ANR	1066516	CompoundStatement		15:23:255:255	1066458	1					
ANR	1066517	ExpressionStatement	"eprintf ( ""usage: zfs filename\\n"" )"	659:3:17320:17353	1066458	0	True				
ANR	1066518	CallExpression	"eprintf ( ""usage: zfs filename\\n"" )"		1066458	0					
ANR	1066519	Callee	eprintf		1066458	0					
ANR	1066520	Identifier	eprintf		1066458	0					
ANR	1066521	ArgumentList	"""usage: zfs filename\\n"""		1066458	1					
ANR	1066522	Argument	"""usage: zfs filename\\n"""		1066458	0					
ANR	1066523	PrimaryExpression	"""usage: zfs filename\\n"""		1066458	0					
ANR	1066524	ReturnStatement	return false ;	660:3:17358:17370	1066458	1	True				
ANR	1066525	Identifier	false		1066458	0					
ANR	1066526	IdentifierDeclStatement	"int depth = r_config_get_i ( core -> config , ""dir.depth"" ) ;"	662:2:17378:17432	1066458	6	True				
ANR	1066527	IdentifierDecl	"depth = r_config_get_i ( core -> config , ""dir.depth"" )"		1066458	0					
ANR	1066528	IdentifierDeclType	int		1066458	0					
ANR	1066529	Identifier	depth		1066458	1					
ANR	1066530	AssignmentExpression	"depth = r_config_get_i ( core -> config , ""dir.depth"" )"		1066458	2		=			
ANR	1066531	Identifier	depth		1066458	0					
ANR	1066532	CallExpression	"r_config_get_i ( core -> config , ""dir.depth"" )"		1066458	1					
ANR	1066533	Callee	r_config_get_i		1066458	0					
ANR	1066534	Identifier	r_config_get_i		1066458	0					
ANR	1066535	ArgumentList	core -> config		1066458	1					
ANR	1066536	Argument	core -> config		1066458	0					
ANR	1066537	PtrMemberAccess	core -> config		1066458	0					
ANR	1066538	Identifier	core		1066458	0					
ANR	1066539	Identifier	config		1066458	1					
ANR	1066540	Argument	"""dir.depth"""		1066458	1					
ANR	1066541	PrimaryExpression	"""dir.depth"""		1066458	0					
ANR	1066542	IdentifierDeclStatement	char * file ;	663:2:17436:17446	1066458	7	True				
ANR	1066543	IdentifierDecl	* file		1066458	0					
ANR	1066544	IdentifierDeclType	char *		1066458	0					
ANR	1066545	Identifier	file		1066458	1					
ANR	1066546	IdentifierDeclStatement	RListIter * iter ;	664:2:17450:17465	1066458	8	True				
ANR	1066547	IdentifierDecl	* iter		1066458	0					
ANR	1066548	IdentifierDeclType	RListIter *		1066458	0					
ANR	1066549	Identifier	iter		1066458	1					
ANR	1066550	IdentifierDeclStatement	"RList * files = r_file_globsearch ( input + 2 , depth ) ;"	665:2:17469:17520	1066458	9	True				
ANR	1066551	IdentifierDecl	"* files = r_file_globsearch ( input + 2 , depth )"		1066458	0					
ANR	1066552	IdentifierDeclType	RList *		1066458	0					
ANR	1066553	Identifier	files		1066458	1					
ANR	1066554	AssignmentExpression	"* files = r_file_globsearch ( input + 2 , depth )"		1066458	2		=			
ANR	1066555	Identifier	files		1066458	0					
ANR	1066556	CallExpression	"r_file_globsearch ( input + 2 , depth )"		1066458	1					
ANR	1066557	Callee	r_file_globsearch		1066458	0					
ANR	1066558	Identifier	r_file_globsearch		1066458	0					
ANR	1066559	ArgumentList	input + 2		1066458	1					
ANR	1066560	Argument	input + 2		1066458	0					
ANR	1066561	AdditiveExpression	input + 2		1066458	0		+			
ANR	1066562	Identifier	input		1066458	0					
ANR	1066563	PrimaryExpression	2		1066458	1					
ANR	1066564	Argument	depth		1066458	1					
ANR	1066565	Identifier	depth		1066458	0					
ANR	1066566	Statement	r_list_foreach	666:2:17524:17537	1066458	10	True				
ANR	1066567	Statement	(	666:17:17539:17539	1066458	11	True				
ANR	1066568	Statement	files	666:18:17540:17544	1066458	12	True				
ANR	1066569	Statement	","	666:23:17545:17545	1066458	13	True				
ANR	1066570	Statement	iter	666:25:17547:17550	1066458	14	True				
ANR	1066571	Statement	","	666:29:17551:17551	1066458	15	True				
ANR	1066572	Statement	file	666:31:17553:17556	1066458	16	True				
ANR	1066573	Statement	)	666:35:17557:17557	1066458	17	True				
ANR	1066574	CompoundStatement		23:37:499:499	1066458	18					
ANR	1066575	ExpressionStatement	"r_sign_flirt_scan ( core -> anal , file )"	667:3:17564:17600	1066458	0	True				
ANR	1066576	CallExpression	"r_sign_flirt_scan ( core -> anal , file )"		1066458	0					
ANR	1066577	Callee	r_sign_flirt_scan		1066458	0					
ANR	1066578	Identifier	r_sign_flirt_scan		1066458	0					
ANR	1066579	ArgumentList	core -> anal		1066458	1					
ANR	1066580	Argument	core -> anal		1066458	0					
ANR	1066581	PtrMemberAccess	core -> anal		1066458	0					
ANR	1066582	Identifier	core		1066458	0					
ANR	1066583	Identifier	anal		1066458	1					
ANR	1066584	Argument	file		1066458	1					
ANR	1066585	Identifier	file		1066458	0					
ANR	1066586	ExpressionStatement	r_list_free ( files )	669:2:17608:17627	1066458	19	True				
ANR	1066587	CallExpression	r_list_free ( files )		1066458	0					
ANR	1066588	Callee	r_list_free		1066458	0					
ANR	1066589	Identifier	r_list_free		1066458	0					
ANR	1066590	ArgumentList	files		1066458	1					
ANR	1066591	Argument	files		1066458	0					
ANR	1066592	Identifier	files		1066458	0					
ANR	1066593	BreakStatement	break ;	670:2:17631:17636	1066458	20	True				
ANR	1066594	Label	case 'z' :	671:1:17639:17647	1066458	21	True				
ANR	1066595	BreakStatement	break ;	673:2:17661:17666	1066458	22	True				
ANR	1066596	Label	case '?' :	674:1:17669:17677	1066458	23	True				
ANR	1066597	ExpressionStatement	"r_core_cmd_help ( core , help_msg_zf )"	675:2:17681:17716	1066458	24	True				
ANR	1066598	CallExpression	"r_core_cmd_help ( core , help_msg_zf )"		1066458	0					
ANR	1066599	Callee	r_core_cmd_help		1066458	0					
ANR	1066600	Identifier	r_core_cmd_help		1066458	0					
ANR	1066601	ArgumentList	core		1066458	1					
ANR	1066602	Argument	core		1066458	0					
ANR	1066603	Identifier	core		1066458	0					
ANR	1066604	Argument	help_msg_zf		1066458	1					
ANR	1066605	Identifier	help_msg_zf		1066458	0					
ANR	1066606	BreakStatement	break ;	676:2:17720:17725	1066458	25	True				
ANR	1066607	Label	default :	677:1:17728:17735	1066458	26	True				
ANR	1066608	Identifier	default		1066458	0					
ANR	1066609	ExpressionStatement	"eprintf ( ""usage: zf[dsz] filename\\n"" )"	678:2:17739:17776	1066458	27	True				
ANR	1066610	CallExpression	"eprintf ( ""usage: zf[dsz] filename\\n"" )"		1066458	0					
ANR	1066611	Callee	eprintf		1066458	0					
ANR	1066612	Identifier	eprintf		1066458	0					
ANR	1066613	ArgumentList	"""usage: zf[dsz] filename\\n"""		1066458	1					
ANR	1066614	Argument	"""usage: zf[dsz] filename\\n"""		1066458	0					
ANR	1066615	PrimaryExpression	"""usage: zf[dsz] filename\\n"""		1066458	0					
ANR	1066616	ReturnStatement	return false ;	679:2:17780:17792	1066458	28	True				
ANR	1066617	Identifier	false		1066458	0					
ANR	1066618	ReturnStatement	return true ;	681:1:17798:17809	1066458	2	True				
ANR	1066619	Identifier	true		1066458	0					
ANR	1066620	ReturnType	static int		1066458	1					
ANR	1066621	Identifier	cmdFlirt		1066458	2					
ANR	1066622	ParameterList	"void * data , const char * input"		1066458	3					
ANR	1066623	Parameter	void * data	644:20:17028:17037	1066458	0	True				
ANR	1066624	ParameterType	void *		1066458	0					
ANR	1066625	Identifier	data		1066458	1					
ANR	1066626	Parameter	const char * input	644:32:17040:17056	1066458	1	True				
ANR	1066627	ParameterType	const char *		1066458	0					
ANR	1066628	Identifier	input		1066458	1					
ANR	1066629	CFGEntryNode	ENTRY		1066458		True				
ANR	1066630	CFGExitNode	EXIT		1066458		True				
ANR	1066631	Symbol	core -> config		1066458						
ANR	1066632	Symbol	data		1066458						
ANR	1066633	Symbol	r_file_globsearch		1066458						
ANR	1066634	Symbol	* input		1066458						
ANR	1066635	Symbol	false		1066458						
ANR	1066636	Symbol	* core		1066458						
ANR	1066637	Symbol	iter		1066458						
ANR	1066638	Symbol	core -> anal		1066458						
ANR	1066639	Symbol	input		1066458						
ANR	1066640	Symbol	core		1066458						
ANR	1066641	Symbol	help_msg_zf		1066458						
ANR	1066642	Symbol	depth		1066458						
ANR	1066643	Symbol	file		1066458						
ANR	1066644	Symbol	r_config_get_i		1066458						
ANR	1066645	Symbol	true		1066458						
ANR	1066646	Symbol	files		1066458						
ANR	1066647	ClassDef	ctxSearchCB	684:0:17814:17893							
ANR	1066648	DeclStmt									
ANR	1066649	Decl							RCore	RCore *	core
ANR	1066650	DeclStmt									
ANR	1066651	Decl							bool	bool	rad
ANR	1066652	DeclStmt									
ANR	1066653	Decl							int	int	count
ANR	1066654	DeclStmt									
ANR	1066655	Decl							const char	const char *	prefix
ANR	1066656	Function	addFlag	691:0:17897:18461							
ANR	1066657	FunctionDef	"addFlag (RCore * core , RSignItem * it , ut64 addr , int size , int count , const char * prefix , bool rad)"		1066656	0					
ANR	1066658	CompoundStatement		691:110:18007:18461	1066656	0					
ANR	1066659	IdentifierDeclStatement	"const char * zign_prefix = r_config_get ( core -> config , ""zign.prefix"" ) ;"	692:1:18010:18078	1066656	0	True				
ANR	1066660	IdentifierDecl	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1066656	0					
ANR	1066661	IdentifierDeclType	const char *		1066656	0					
ANR	1066662	Identifier	zign_prefix		1066656	1					
ANR	1066663	AssignmentExpression	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1066656	2		=			
ANR	1066664	Identifier	zign_prefix		1066656	0					
ANR	1066665	CallExpression	"r_config_get ( core -> config , ""zign.prefix"" )"		1066656	1					
ANR	1066666	Callee	r_config_get		1066656	0					
ANR	1066667	Identifier	r_config_get		1066656	0					
ANR	1066668	ArgumentList	core -> config		1066656	1					
ANR	1066669	Argument	core -> config		1066656	0					
ANR	1066670	PtrMemberAccess	core -> config		1066656	0					
ANR	1066671	Identifier	core		1066656	0					
ANR	1066672	Identifier	config		1066656	1					
ANR	1066673	Argument	"""zign.prefix"""		1066656	1					
ANR	1066674	PrimaryExpression	"""zign.prefix"""		1066656	0					
ANR	1066675	IdentifierDeclStatement	"char * name = r_str_newf ( ""%s.%s.%s_%d"" , zign_prefix , prefix , it -> name , count ) ;"	693:1:18081:18158	1066656	1	True				
ANR	1066676	IdentifierDecl	"* name = r_str_newf ( ""%s.%s.%s_%d"" , zign_prefix , prefix , it -> name , count )"		1066656	0					
ANR	1066677	IdentifierDeclType	char *		1066656	0					
ANR	1066678	Identifier	name		1066656	1					
ANR	1066679	AssignmentExpression	"* name = r_str_newf ( ""%s.%s.%s_%d"" , zign_prefix , prefix , it -> name , count )"		1066656	2		=			
ANR	1066680	Identifier	name		1066656	0					
ANR	1066681	CallExpression	"r_str_newf ( ""%s.%s.%s_%d"" , zign_prefix , prefix , it -> name , count )"		1066656	1					
ANR	1066682	Callee	r_str_newf		1066656	0					
ANR	1066683	Identifier	r_str_newf		1066656	0					
ANR	1066684	ArgumentList	"""%s.%s.%s_%d"""		1066656	1					
ANR	1066685	Argument	"""%s.%s.%s_%d"""		1066656	0					
ANR	1066686	PrimaryExpression	"""%s.%s.%s_%d"""		1066656	0					
ANR	1066687	Argument	zign_prefix		1066656	1					
ANR	1066688	Identifier	zign_prefix		1066656	0					
ANR	1066689	Argument	prefix		1066656	2					
ANR	1066690	Identifier	prefix		1066656	0					
ANR	1066691	Argument	it -> name		1066656	3					
ANR	1066692	PtrMemberAccess	it -> name		1066656	0					
ANR	1066693	Identifier	it		1066656	0					
ANR	1066694	Identifier	name		1066656	1					
ANR	1066695	Argument	count		1066656	4					
ANR	1066696	Identifier	count		1066656	0					
ANR	1066697	IfStatement	if ( ! name )		1066656	2					
ANR	1066698	Condition	! name	694:5:18165:18169	1066656	0	True				
ANR	1066699	UnaryOperationExpression	! name		1066656	0					
ANR	1066700	UnaryOperator	!		1066656	0					
ANR	1066701	Identifier	name		1066656	1					
ANR	1066702	CompoundStatement		4:12:164:164	1066656	1					
ANR	1066703	ReturnStatement	return ;	695:2:18176:18182	1066656	0	True				
ANR	1066704	IfStatement	if ( rad )		1066656	3					
ANR	1066705	Condition	rad	697:5:18192:18194	1066656	0	True				
ANR	1066706	Identifier	rad		1066656	0					
ANR	1066707	CompoundStatement		7:10:189:189	1066656	1					
ANR	1066708	Statement	r_cons_printf	698:2:18201:18213	1066656	0	True				
ANR	1066709	Statement	(	698:16:18215:18215	1066656	1	True				
ANR	1066710	Statement	"""f %s %d @ 0x%08"""	698:17:18216:18232	1066656	2	True				
ANR	1066711	Statement	PFMT64x	698:34:18233:18239	1066656	3	True				
ANR	1066712	Statement	"""\\n"""	698:41:18240:18243	1066656	4	True				
ANR	1066713	Statement	","	698:45:18244:18244	1066656	5	True				
ANR	1066714	Statement	name	698:47:18246:18249	1066656	6	True				
ANR	1066715	Statement	","	698:51:18250:18250	1066656	7	True				
ANR	1066716	Statement	size	698:53:18252:18255	1066656	8	True				
ANR	1066717	Statement	","	698:57:18256:18256	1066656	9	True				
ANR	1066718	Statement	addr	698:59:18258:18261	1066656	10	True				
ANR	1066719	Statement	)	698:63:18262:18262	1066656	11	True				
ANR	1066720	ExpressionStatement		698:64:18263:18263	1066656	12	True				
ANR	1066721	IfStatement	if ( it -> realname )		1066656	13					
ANR	1066722	Condition	it -> realname	699:6:18271:18282	1066656	0	True				
ANR	1066723	PtrMemberAccess	it -> realname		1066656	0					
ANR	1066724	Identifier	it		1066656	0					
ANR	1066725	Identifier	realname		1066656	1					
ANR	1066726	CompoundStatement		9:20:277:277	1066656	1					
ANR	1066727	Statement	r_cons_printf	700:3:18290:18302	1066656	0	True				
ANR	1066728	Statement	(	700:17:18304:18304	1066656	1	True				
ANR	1066729	Statement	"""\\""afn %s @ 0x%08"""	700:18:18305:18322	1066656	2	True				
ANR	1066730	Statement	PFMT64x	700:36:18323:18329	1066656	3	True				
ANR	1066731	Statement	"""\\""\\n"""	700:43:18330:18335	1066656	4	True				
ANR	1066732	Statement	","	700:49:18336:18336	1066656	5	True				
ANR	1066733	Statement	it	700:51:18338:18339	1066656	6	True				
ANR	1066734	Statement	->	700:53:18340:18341	1066656	7	True				
ANR	1066735	Statement	realname	700:55:18342:18349	1066656	8	True				
ANR	1066736	Statement	","	700:63:18350:18350	1066656	9	True				
ANR	1066737	Statement	addr	700:65:18352:18355	1066656	10	True				
ANR	1066738	Statement	)	700:69:18356:18356	1066656	11	True				
ANR	1066739	ExpressionStatement		700:70:18357:18357	1066656	12	True				
ANR	1066740	ElseStatement	else		1066656	0					
ANR	1066741	CompoundStatement		12:8:388:388	1066656	0					
ANR	1066742	ExpressionStatement	"r_flag_set ( core -> flags , name , addr , size )"	703:2:18400:18442	1066656	0	True				
ANR	1066743	CallExpression	"r_flag_set ( core -> flags , name , addr , size )"		1066656	0					
ANR	1066744	Callee	r_flag_set		1066656	0					
ANR	1066745	Identifier	r_flag_set		1066656	0					
ANR	1066746	ArgumentList	core -> flags		1066656	1					
ANR	1066747	Argument	core -> flags		1066656	0					
ANR	1066748	PtrMemberAccess	core -> flags		1066656	0					
ANR	1066749	Identifier	core		1066656	0					
ANR	1066750	Identifier	flags		1066656	1					
ANR	1066751	Argument	name		1066656	1					
ANR	1066752	Identifier	name		1066656	0					
ANR	1066753	Argument	addr		1066656	2					
ANR	1066754	Identifier	addr		1066656	0					
ANR	1066755	Argument	size		1066656	3					
ANR	1066756	Identifier	size		1066656	0					
ANR	1066757	ExpressionStatement	free ( name )	705:1:18448:18459	1066656	4	True				
ANR	1066758	CallExpression	free ( name )		1066656	0					
ANR	1066759	Callee	free		1066656	0					
ANR	1066760	Identifier	free		1066656	0					
ANR	1066761	ArgumentList	name		1066656	1					
ANR	1066762	Argument	name		1066656	0					
ANR	1066763	Identifier	name		1066656	0					
ANR	1066764	ReturnType	static void		1066656	1					
ANR	1066765	Identifier	addFlag		1066656	2					
ANR	1066766	ParameterList	"RCore * core , RSignItem * it , ut64 addr , int size , int count , const char * prefix , bool rad"		1066656	3					
ANR	1066767	Parameter	RCore * core	691:20:17917:17927	1066656	0	True				
ANR	1066768	ParameterType	RCore *		1066656	0					
ANR	1066769	Identifier	core		1066656	1					
ANR	1066770	Parameter	RSignItem * it	691:33:17930:17942	1066656	1	True				
ANR	1066771	ParameterType	RSignItem *		1066656	0					
ANR	1066772	Identifier	it		1066656	1					
ANR	1066773	Parameter	ut64 addr	691:48:17945:17953	1066656	2	True				
ANR	1066774	ParameterType	ut64		1066656	0					
ANR	1066775	Identifier	addr		1066656	1					
ANR	1066776	Parameter	int size	691:59:17956:17963	1066656	3	True				
ANR	1066777	ParameterType	int		1066656	0					
ANR	1066778	Identifier	size		1066656	1					
ANR	1066779	Parameter	int count	691:69:17966:17974	1066656	4	True				
ANR	1066780	ParameterType	int		1066656	0					
ANR	1066781	Identifier	count		1066656	1					
ANR	1066782	Parameter	const char * prefix	691:80:17977:17994	1066656	5	True				
ANR	1066783	ParameterType	const char *		1066656	0					
ANR	1066784	Identifier	prefix		1066656	1					
ANR	1066785	Parameter	bool rad	691:100:17997:18004	1066656	6	True				
ANR	1066786	ParameterType	bool		1066656	0					
ANR	1066787	Identifier	rad		1066656	1					
ANR	1066788	CFGEntryNode	ENTRY		1066656		True				
ANR	1066789	CFGExitNode	EXIT		1066656		True				
ANR	1066790	Symbol	core -> config		1066656						
ANR	1066791	Symbol	prefix		1066656						
ANR	1066792	Symbol	it -> name		1066656						
ANR	1066793	Symbol	count		1066656						
ANR	1066794	Symbol	r_config_get		1066656						
ANR	1066795	Symbol	* core		1066656						
ANR	1066796	Symbol	core -> flags		1066656						
ANR	1066797	Symbol	it		1066656						
ANR	1066798	Symbol	r_str_newf		1066656						
ANR	1066799	Symbol	zign_prefix		1066656						
ANR	1066800	Symbol	core		1066656						
ANR	1066801	Symbol	* it		1066656						
ANR	1066802	Symbol	size		1066656						
ANR	1066803	Symbol	rad		1066656						
ANR	1066804	Symbol	name		1066656						
ANR	1066805	Symbol	addr		1066656						
ANR	1066806	Symbol	it -> realname		1066656						
ANR	1066807	Function	searchHitCB	708:0:18464:18715							
ANR	1066808	FunctionDef	"searchHitCB (RSignItem * it , RSearchKeyword * kw , ut64 addr , void * user)"		1066807	0					
ANR	1066809	CompoundStatement		708:81:18545:18715	1066807	0					
ANR	1066810	IdentifierDeclStatement	struct ctxSearchCB * ctx = ( struct ctxSearchCB * ) user ;	709:1:18548:18601	1066807	0	True				
ANR	1066811	IdentifierDecl	* ctx = ( struct ctxSearchCB * ) user		1066807	0					
ANR	1066812	IdentifierDeclType	struct ctxSearchCB *		1066807	0					
ANR	1066813	Identifier	ctx		1066807	1					
ANR	1066814	AssignmentExpression	* ctx = ( struct ctxSearchCB * ) user		1066807	2		=			
ANR	1066815	Identifier	ctx		1066807	0					
ANR	1066816	CastExpression	( struct ctxSearchCB * ) user		1066807	1					
ANR	1066817	CastTarget	struct ctxSearchCB *		1066807	0					
ANR	1066818	Identifier	user		1066807	1					
ANR	1066819	ExpressionStatement	"addFlag ( ctx -> core , it , addr , kw -> keyword_length , kw -> count , ctx -> prefix , ctx -> rad )"	710:1:18604:18687	1066807	1	True				
ANR	1066820	CallExpression	"addFlag ( ctx -> core , it , addr , kw -> keyword_length , kw -> count , ctx -> prefix , ctx -> rad )"		1066807	0					
ANR	1066821	Callee	addFlag		1066807	0					
ANR	1066822	Identifier	addFlag		1066807	0					
ANR	1066823	ArgumentList	ctx -> core		1066807	1					
ANR	1066824	Argument	ctx -> core		1066807	0					
ANR	1066825	PtrMemberAccess	ctx -> core		1066807	0					
ANR	1066826	Identifier	ctx		1066807	0					
ANR	1066827	Identifier	core		1066807	1					
ANR	1066828	Argument	it		1066807	1					
ANR	1066829	Identifier	it		1066807	0					
ANR	1066830	Argument	addr		1066807	2					
ANR	1066831	Identifier	addr		1066807	0					
ANR	1066832	Argument	kw -> keyword_length		1066807	3					
ANR	1066833	PtrMemberAccess	kw -> keyword_length		1066807	0					
ANR	1066834	Identifier	kw		1066807	0					
ANR	1066835	Identifier	keyword_length		1066807	1					
ANR	1066836	Argument	kw -> count		1066807	4					
ANR	1066837	PtrMemberAccess	kw -> count		1066807	0					
ANR	1066838	Identifier	kw		1066807	0					
ANR	1066839	Identifier	count		1066807	1					
ANR	1066840	Argument	ctx -> prefix		1066807	5					
ANR	1066841	PtrMemberAccess	ctx -> prefix		1066807	0					
ANR	1066842	Identifier	ctx		1066807	0					
ANR	1066843	Identifier	prefix		1066807	1					
ANR	1066844	Argument	ctx -> rad		1066807	6					
ANR	1066845	PtrMemberAccess	ctx -> rad		1066807	0					
ANR	1066846	Identifier	ctx		1066807	0					
ANR	1066847	Identifier	rad		1066807	1					
ANR	1066848	ExpressionStatement	ctx -> count ++	711:1:18690:18702	1066807	2	True				
ANR	1066849	PostIncDecOperationExpression	ctx -> count ++		1066807	0					
ANR	1066850	PtrMemberAccess	ctx -> count		1066807	0					
ANR	1066851	Identifier	ctx		1066807	0					
ANR	1066852	Identifier	count		1066807	1					
ANR	1066853	IncDec	++		1066807	1					
ANR	1066854	ReturnStatement	return 1 ;	712:1:18705:18713	1066807	3	True				
ANR	1066855	PrimaryExpression	1		1066807	0					
ANR	1066856	ReturnType	static int		1066807	1					
ANR	1066857	Identifier	searchHitCB		1066807	2					
ANR	1066858	ParameterList	"RSignItem * it , RSearchKeyword * kw , ut64 addr , void * user"		1066807	3					
ANR	1066859	Parameter	RSignItem * it	708:23:18487:18499	1066807	0	True				
ANR	1066860	ParameterType	RSignItem *		1066807	0					
ANR	1066861	Identifier	it		1066807	1					
ANR	1066862	Parameter	RSearchKeyword * kw	708:38:18502:18519	1066807	1	True				
ANR	1066863	ParameterType	RSearchKeyword *		1066807	0					
ANR	1066864	Identifier	kw		1066807	1					
ANR	1066865	Parameter	ut64 addr	708:58:18522:18530	1066807	2	True				
ANR	1066866	ParameterType	ut64		1066807	0					
ANR	1066867	Identifier	addr		1066807	1					
ANR	1066868	Parameter	void * user	708:69:18533:18542	1066807	3	True				
ANR	1066869	ParameterType	void *		1066807	0					
ANR	1066870	Identifier	user		1066807	1					
ANR	1066871	CFGEntryNode	ENTRY		1066807		True				
ANR	1066872	CFGExitNode	EXIT		1066807		True				
ANR	1066873	Symbol	ctx		1066807						
ANR	1066874	Symbol	it		1066807						
ANR	1066875	Symbol	kw		1066807						
ANR	1066876	Symbol	* ctx		1066807						
ANR	1066877	Symbol	ctx -> prefix		1066807						
ANR	1066878	Symbol	* kw		1066807						
ANR	1066879	Symbol	ctx -> count		1066807						
ANR	1066880	Symbol	kw -> count		1066807						
ANR	1066881	Symbol	kw -> keyword_length		1066807						
ANR	1066882	Symbol	addr		1066807						
ANR	1066883	Symbol	user		1066807						
ANR	1066884	Symbol	ctx -> core		1066807						
ANR	1066885	Symbol	ctx -> rad		1066807						
ANR	1066886	Function	fcnMatchCB	715:0:18718:19042							
ANR	1066887	FunctionDef	"fcnMatchCB (RSignItem * it , RAnalFunction * fcn , void * user)"		1066886	0					
ANR	1066888	CompoundStatement		715:69:18787:19042	1066886	0					
ANR	1066889	IdentifierDeclStatement	struct ctxSearchCB * ctx = ( struct ctxSearchCB * ) user ;	716:1:18790:18843	1066886	0	True				
ANR	1066890	IdentifierDecl	* ctx = ( struct ctxSearchCB * ) user		1066886	0					
ANR	1066891	IdentifierDeclType	struct ctxSearchCB *		1066886	0					
ANR	1066892	Identifier	ctx		1066886	1					
ANR	1066893	AssignmentExpression	* ctx = ( struct ctxSearchCB * ) user		1066886	2		=			
ANR	1066894	Identifier	ctx		1066886	0					
ANR	1066895	CastExpression	( struct ctxSearchCB * ) user		1066886	1					
ANR	1066896	CastTarget	struct ctxSearchCB *		1066886	0					
ANR	1066897	Identifier	user		1066886	1					
ANR	1066898	ExpressionStatement	"addFlag ( ctx -> core , it , fcn -> addr , r_anal_fcn_realsize ( fcn ) , ctx -> count , ctx -> prefix , ctx -> rad )"	718:1:18918:19014	1066886	1	True				
ANR	1066899	CallExpression	"addFlag ( ctx -> core , it , fcn -> addr , r_anal_fcn_realsize ( fcn ) , ctx -> count , ctx -> prefix , ctx -> rad )"		1066886	0					
ANR	1066900	Callee	addFlag		1066886	0					
ANR	1066901	Identifier	addFlag		1066886	0					
ANR	1066902	ArgumentList	ctx -> core		1066886	1					
ANR	1066903	Argument	ctx -> core		1066886	0					
ANR	1066904	PtrMemberAccess	ctx -> core		1066886	0					
ANR	1066905	Identifier	ctx		1066886	0					
ANR	1066906	Identifier	core		1066886	1					
ANR	1066907	Argument	it		1066886	1					
ANR	1066908	Identifier	it		1066886	0					
ANR	1066909	Argument	fcn -> addr		1066886	2					
ANR	1066910	PtrMemberAccess	fcn -> addr		1066886	0					
ANR	1066911	Identifier	fcn		1066886	0					
ANR	1066912	Identifier	addr		1066886	1					
ANR	1066913	Argument	r_anal_fcn_realsize ( fcn )		1066886	3					
ANR	1066914	CallExpression	r_anal_fcn_realsize ( fcn )		1066886	0					
ANR	1066915	Callee	r_anal_fcn_realsize		1066886	0					
ANR	1066916	Identifier	r_anal_fcn_realsize		1066886	0					
ANR	1066917	ArgumentList	fcn		1066886	1					
ANR	1066918	Argument	fcn		1066886	0					
ANR	1066919	Identifier	fcn		1066886	0					
ANR	1066920	Argument	ctx -> count		1066886	4					
ANR	1066921	PtrMemberAccess	ctx -> count		1066886	0					
ANR	1066922	Identifier	ctx		1066886	0					
ANR	1066923	Identifier	count		1066886	1					
ANR	1066924	Argument	ctx -> prefix		1066886	5					
ANR	1066925	PtrMemberAccess	ctx -> prefix		1066886	0					
ANR	1066926	Identifier	ctx		1066886	0					
ANR	1066927	Identifier	prefix		1066886	1					
ANR	1066928	Argument	ctx -> rad		1066886	6					
ANR	1066929	PtrMemberAccess	ctx -> rad		1066886	0					
ANR	1066930	Identifier	ctx		1066886	0					
ANR	1066931	Identifier	rad		1066886	1					
ANR	1066932	ExpressionStatement	ctx -> count ++	719:1:19017:19029	1066886	2	True				
ANR	1066933	PostIncDecOperationExpression	ctx -> count ++		1066886	0					
ANR	1066934	PtrMemberAccess	ctx -> count		1066886	0					
ANR	1066935	Identifier	ctx		1066886	0					
ANR	1066936	Identifier	count		1066886	1					
ANR	1066937	IncDec	++		1066886	1					
ANR	1066938	ReturnStatement	return 1 ;	720:1:19032:19040	1066886	3	True				
ANR	1066939	PrimaryExpression	1		1066886	0					
ANR	1066940	ReturnType	static int		1066886	1					
ANR	1066941	Identifier	fcnMatchCB		1066886	2					
ANR	1066942	ParameterList	"RSignItem * it , RAnalFunction * fcn , void * user"		1066886	3					
ANR	1066943	Parameter	RSignItem * it	715:22:18740:18752	1066886	0	True				
ANR	1066944	ParameterType	RSignItem *		1066886	0					
ANR	1066945	Identifier	it		1066886	1					
ANR	1066946	Parameter	RAnalFunction * fcn	715:37:18755:18772	1066886	1	True				
ANR	1066947	ParameterType	RAnalFunction *		1066886	0					
ANR	1066948	Identifier	fcn		1066886	1					
ANR	1066949	Parameter	void * user	715:57:18775:18784	1066886	2	True				
ANR	1066950	ParameterType	void *		1066886	0					
ANR	1066951	Identifier	user		1066886	1					
ANR	1066952	CFGEntryNode	ENTRY		1066886		True				
ANR	1066953	CFGExitNode	EXIT		1066886		True				
ANR	1066954	Symbol	fcn		1066886						
ANR	1066955	Symbol	ctx -> prefix		1066886						
ANR	1066956	Symbol	ctx -> count		1066886						
ANR	1066957	Symbol	r_anal_fcn_realsize		1066886						
ANR	1066958	Symbol	* fcn		1066886						
ANR	1066959	Symbol	ctx		1066886						
ANR	1066960	Symbol	fcn -> addr		1066886						
ANR	1066961	Symbol	it		1066886						
ANR	1066962	Symbol	user		1066886						
ANR	1066963	Symbol	ctx -> core		1066886						
ANR	1066964	Symbol	ctx -> rad		1066886						
ANR	1066965	Symbol	* ctx		1066886						
ANR	1066966	Function	searchRange	723:0:19045:20052							
ANR	1066967	FunctionDef	"searchRange (RCore * core , ut64 from , ut64 to , bool rad , struct ctxSearchCB * ctx)"		1066966	0					
ANR	1066968	CompoundStatement		723:92:19137:20052	1066966	0					
ANR	1066969	IdentifierDeclStatement	ut8 * buf = malloc ( core -> blocksize ) ;	724:1:19140:19175	1066966	0	True				
ANR	1066970	IdentifierDecl	* buf = malloc ( core -> blocksize )		1066966	0					
ANR	1066971	IdentifierDeclType	ut8 *		1066966	0					
ANR	1066972	Identifier	buf		1066966	1					
ANR	1066973	AssignmentExpression	* buf = malloc ( core -> blocksize )		1066966	2		=			
ANR	1066974	Identifier	buf		1066966	0					
ANR	1066975	CallExpression	malloc ( core -> blocksize )		1066966	1					
ANR	1066976	Callee	malloc		1066966	0					
ANR	1066977	Identifier	malloc		1066966	0					
ANR	1066978	ArgumentList	core -> blocksize		1066966	1					
ANR	1066979	Argument	core -> blocksize		1066966	0					
ANR	1066980	PtrMemberAccess	core -> blocksize		1066966	0					
ANR	1066981	Identifier	core		1066966	0					
ANR	1066982	Identifier	blocksize		1066966	1					
ANR	1066983	IdentifierDeclStatement	ut64 at ;	725:1:19178:19185	1066966	1	True				
ANR	1066984	IdentifierDecl	at		1066966	0					
ANR	1066985	IdentifierDeclType	ut64		1066966	0					
ANR	1066986	Identifier	at		1066966	1					
ANR	1066987	IdentifierDeclStatement	int rlen ;	726:1:19188:19196	1066966	2	True				
ANR	1066988	IdentifierDecl	rlen		1066966	0					
ANR	1066989	IdentifierDeclType	int		1066966	0					
ANR	1066990	Identifier	rlen		1066966	1					
ANR	1066991	IdentifierDeclStatement	bool retval = true ;	727:1:19199:19217	1066966	3	True				
ANR	1066992	IdentifierDecl	retval = true		1066966	0					
ANR	1066993	IdentifierDeclType	bool		1066966	0					
ANR	1066994	Identifier	retval		1066966	1					
ANR	1066995	AssignmentExpression	retval = true		1066966	2		=			
ANR	1066996	Identifier	true		1066966	0					
ANR	1066997	Identifier	true		1066966	1					
ANR	1066998	IdentifierDeclStatement	"int minsz = r_config_get_i ( core -> config , ""zign.minsz"" ) ;"	728:1:19220:19275	1066966	4	True				
ANR	1066999	IdentifierDecl	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1066966	0					
ANR	1067000	IdentifierDeclType	int		1066966	0					
ANR	1067001	Identifier	minsz		1066966	1					
ANR	1067002	AssignmentExpression	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1066966	2		=			
ANR	1067003	Identifier	minsz		1066966	0					
ANR	1067004	CallExpression	"r_config_get_i ( core -> config , ""zign.minsz"" )"		1066966	1					
ANR	1067005	Callee	r_config_get_i		1066966	0					
ANR	1067006	Identifier	r_config_get_i		1066966	0					
ANR	1067007	ArgumentList	core -> config		1066966	1					
ANR	1067008	Argument	core -> config		1066966	0					
ANR	1067009	PtrMemberAccess	core -> config		1066966	0					
ANR	1067010	Identifier	core		1066966	0					
ANR	1067011	Identifier	config		1066966	1					
ANR	1067012	Argument	"""zign.minsz"""		1066966	1					
ANR	1067013	PrimaryExpression	"""zign.minsz"""		1066966	0					
ANR	1067014	IfStatement	if ( ! buf )		1066966	5					
ANR	1067015	Condition	! buf	730:5:19283:19286	1066966	0	True				
ANR	1067016	UnaryOperationExpression	! buf		1066966	0					
ANR	1067017	UnaryOperator	!		1066966	0					
ANR	1067018	Identifier	buf		1066966	1					
ANR	1067019	CompoundStatement		8:11:151:151	1066966	1					
ANR	1067020	ReturnStatement	return false ;	731:2:19293:19305	1066966	0	True				
ANR	1067021	Identifier	false		1066966	0					
ANR	1067022	IdentifierDeclStatement	RSignSearch * ss = r_sign_search_new ( ) ;	733:1:19311:19349	1066966	6	True				
ANR	1067023	IdentifierDecl	* ss = r_sign_search_new ( )		1066966	0					
ANR	1067024	IdentifierDeclType	RSignSearch *		1066966	0					
ANR	1067025	Identifier	ss		1066966	1					
ANR	1067026	AssignmentExpression	* ss = r_sign_search_new ( )		1066966	2		=			
ANR	1067027	Identifier	ss		1066966	0					
ANR	1067028	CallExpression	r_sign_search_new ( )		1066966	1					
ANR	1067029	Callee	r_sign_search_new		1066966	0					
ANR	1067030	Identifier	r_sign_search_new		1066966	0					
ANR	1067031	ArgumentList			1066966	1					
ANR	1067032	ExpressionStatement	"ss -> search -> align = r_config_get_i ( core -> config , ""search.align"" )"	734:1:19352:19417	1066966	7	True				
ANR	1067033	AssignmentExpression	"ss -> search -> align = r_config_get_i ( core -> config , ""search.align"" )"		1066966	0		=			
ANR	1067034	PtrMemberAccess	ss -> search -> align		1066966	0					
ANR	1067035	PtrMemberAccess	ss -> search		1066966	0					
ANR	1067036	Identifier	ss		1066966	0					
ANR	1067037	Identifier	search		1066966	1					
ANR	1067038	Identifier	align		1066966	1					
ANR	1067039	CallExpression	"r_config_get_i ( core -> config , ""search.align"" )"		1066966	1					
ANR	1067040	Callee	r_config_get_i		1066966	0					
ANR	1067041	Identifier	r_config_get_i		1066966	0					
ANR	1067042	ArgumentList	core -> config		1066966	1					
ANR	1067043	Argument	core -> config		1066966	0					
ANR	1067044	PtrMemberAccess	core -> config		1066966	0					
ANR	1067045	Identifier	core		1066966	0					
ANR	1067046	Identifier	config		1066966	1					
ANR	1067047	Argument	"""search.align"""		1066966	1					
ANR	1067048	PrimaryExpression	"""search.align"""		1066966	0					
ANR	1067049	ExpressionStatement	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , ctx )"	735:1:19420:19480	1066966	8	True				
ANR	1067050	CallExpression	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , ctx )"		1066966	0					
ANR	1067051	Callee	r_sign_search_init		1066966	0					
ANR	1067052	Identifier	r_sign_search_init		1066966	0					
ANR	1067053	ArgumentList	core -> anal		1066966	1					
ANR	1067054	Argument	core -> anal		1066966	0					
ANR	1067055	PtrMemberAccess	core -> anal		1066966	0					
ANR	1067056	Identifier	core		1066966	0					
ANR	1067057	Identifier	anal		1066966	1					
ANR	1067058	Argument	ss		1066966	1					
ANR	1067059	Identifier	ss		1066966	0					
ANR	1067060	Argument	minsz		1066966	2					
ANR	1067061	Identifier	minsz		1066966	0					
ANR	1067062	Argument	searchHitCB		1066966	3					
ANR	1067063	Identifier	searchHitCB		1066966	0					
ANR	1067064	Argument	ctx		1066966	4					
ANR	1067065	Identifier	ctx		1066966	0					
ANR	1067066	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	737:1:19484:19514	1066966	9	True				
ANR	1067067	CallExpression	"r_cons_break_push ( NULL , NULL )"		1066966	0					
ANR	1067068	Callee	r_cons_break_push		1066966	0					
ANR	1067069	Identifier	r_cons_break_push		1066966	0					
ANR	1067070	ArgumentList	NULL		1066966	1					
ANR	1067071	Argument	NULL		1066966	0					
ANR	1067072	Identifier	NULL		1066966	0					
ANR	1067073	Argument	NULL		1066966	1					
ANR	1067074	Identifier	NULL		1066966	0					
ANR	1067075	ForStatement	for ( at = from ; at < to ; at += core -> blocksize )		1066966	10					
ANR	1067076	ForInit	at = from ;	738:6:19522:19531	1066966	0	True				
ANR	1067077	AssignmentExpression	at = from		1066966	0		=			
ANR	1067078	Identifier	at		1066966	0					
ANR	1067079	Identifier	from		1066966	1					
ANR	1067080	Condition	at < to	738:17:19533:19539	1066966	1	True				
ANR	1067081	RelationalExpression	at < to		1066966	0		<			
ANR	1067082	Identifier	at		1066966	0					
ANR	1067083	Identifier	to		1066966	1					
ANR	1067084	AssignmentExpression	at += core -> blocksize	738:26:19542:19562	1066966	2	True	+=			
ANR	1067085	Identifier	at		1066966	0					
ANR	1067086	PtrMemberAccess	core -> blocksize		1066966	1					
ANR	1067087	Identifier	core		1066966	0					
ANR	1067088	Identifier	blocksize		1066966	1					
ANR	1067089	CompoundStatement		16:49:427:427	1066966	3					
ANR	1067090	IfStatement	if ( r_cons_is_breaked ( ) )		1066966	0					
ANR	1067091	Condition	r_cons_is_breaked ( )	739:6:19573:19592	1066966	0	True				
ANR	1067092	CallExpression	r_cons_is_breaked ( )		1066966	0					
ANR	1067093	Callee	r_cons_is_breaked		1066966	0					
ANR	1067094	Identifier	r_cons_is_breaked		1066966	0					
ANR	1067095	ArgumentList			1066966	1					
ANR	1067096	CompoundStatement		17:28:457:457	1066966	1					
ANR	1067097	ExpressionStatement	retval = false	740:3:19600:19614	1066966	0	True				
ANR	1067098	AssignmentExpression	retval = false		1066966	0		=			
ANR	1067099	Identifier	retval		1066966	0					
ANR	1067100	Identifier	false		1066966	1					
ANR	1067101	BreakStatement	break ;	741:3:19619:19624	1066966	1	True				
ANR	1067102	ExpressionStatement	"rlen = R_MIN ( core -> blocksize , to - at )"	743:2:19632:19671	1066966	1	True				
ANR	1067103	AssignmentExpression	"rlen = R_MIN ( core -> blocksize , to - at )"		1066966	0		=			
ANR	1067104	Identifier	rlen		1066966	0					
ANR	1067105	CallExpression	"R_MIN ( core -> blocksize , to - at )"		1066966	1					
ANR	1067106	Callee	R_MIN		1066966	0					
ANR	1067107	Identifier	R_MIN		1066966	0					
ANR	1067108	ArgumentList	core -> blocksize		1066966	1					
ANR	1067109	Argument	core -> blocksize		1066966	0					
ANR	1067110	PtrMemberAccess	core -> blocksize		1066966	0					
ANR	1067111	Identifier	core		1066966	0					
ANR	1067112	Identifier	blocksize		1066966	1					
ANR	1067113	Argument	to - at		1066966	1					
ANR	1067114	AdditiveExpression	to - at		1066966	0		-			
ANR	1067115	Identifier	to		1066966	0					
ANR	1067116	Identifier	at		1066966	1					
ANR	1067117	IfStatement	"if ( ! r_io_is_valid_offset ( core -> io , at , 0 ) )"		1066966	2					
ANR	1067118	Condition	"! r_io_is_valid_offset ( core -> io , at , 0 )"	744:6:19679:19717	1066966	0	True				
ANR	1067119	UnaryOperationExpression	"! r_io_is_valid_offset ( core -> io , at , 0 )"		1066966	0					
ANR	1067120	UnaryOperator	!		1066966	0					
ANR	1067121	CallExpression	"r_io_is_valid_offset ( core -> io , at , 0 )"		1066966	1					
ANR	1067122	Callee	r_io_is_valid_offset		1066966	0					
ANR	1067123	Identifier	r_io_is_valid_offset		1066966	0					
ANR	1067124	ArgumentList	core -> io		1066966	1					
ANR	1067125	Argument	core -> io		1066966	0					
ANR	1067126	PtrMemberAccess	core -> io		1066966	0					
ANR	1067127	Identifier	core		1066966	0					
ANR	1067128	Identifier	io		1066966	1					
ANR	1067129	Argument	at		1066966	1					
ANR	1067130	Identifier	at		1066966	0					
ANR	1067131	Argument	0		1066966	2					
ANR	1067132	PrimaryExpression	0		1066966	0					
ANR	1067133	CompoundStatement		22:47:582:582	1066966	1					
ANR	1067134	ExpressionStatement	retval = false	745:3:19725:19739	1066966	0	True				
ANR	1067135	AssignmentExpression	retval = false		1066966	0		=			
ANR	1067136	Identifier	retval		1066966	0					
ANR	1067137	Identifier	false		1066966	1					
ANR	1067138	BreakStatement	break ;	746:3:19744:19749	1066966	1	True				
ANR	1067139	ExpressionStatement	"( void ) r_io_read_at ( core -> io , at , buf , rlen )"	748:2:19757:19801	1066966	3	True				
ANR	1067140	CastExpression	"( void ) r_io_read_at ( core -> io , at , buf , rlen )"		1066966	0					
ANR	1067141	CastTarget	void		1066966	0					
ANR	1067142	CallExpression	"r_io_read_at ( core -> io , at , buf , rlen )"		1066966	1					
ANR	1067143	Callee	r_io_read_at		1066966	0					
ANR	1067144	Identifier	r_io_read_at		1066966	0					
ANR	1067145	ArgumentList	core -> io		1066966	1					
ANR	1067146	Argument	core -> io		1066966	0					
ANR	1067147	PtrMemberAccess	core -> io		1066966	0					
ANR	1067148	Identifier	core		1066966	0					
ANR	1067149	Identifier	io		1066966	1					
ANR	1067150	Argument	at		1066966	1					
ANR	1067151	Identifier	at		1066966	0					
ANR	1067152	Argument	buf		1066966	2					
ANR	1067153	Identifier	buf		1066966	0					
ANR	1067154	Argument	rlen		1066966	3					
ANR	1067155	Identifier	rlen		1066966	0					
ANR	1067156	IfStatement	"if ( r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1 )"		1066966	4					
ANR	1067157	Condition	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1"	749:6:19809:19867	1066966	0	True				
ANR	1067158	EqualityExpression	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1"		1066966	0		==			
ANR	1067159	CallExpression	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen )"		1066966	0					
ANR	1067160	Callee	r_sign_search_update		1066966	0					
ANR	1067161	Identifier	r_sign_search_update		1066966	0					
ANR	1067162	ArgumentList	core -> anal		1066966	1					
ANR	1067163	Argument	core -> anal		1066966	0					
ANR	1067164	PtrMemberAccess	core -> anal		1066966	0					
ANR	1067165	Identifier	core		1066966	0					
ANR	1067166	Identifier	anal		1066966	1					
ANR	1067167	Argument	ss		1066966	1					
ANR	1067168	Identifier	ss		1066966	0					
ANR	1067169	Argument	& at		1066966	2					
ANR	1067170	UnaryOperationExpression	& at		1066966	0					
ANR	1067171	UnaryOperator	&		1066966	0					
ANR	1067172	Identifier	at		1066966	1					
ANR	1067173	Argument	buf		1066966	3					
ANR	1067174	Identifier	buf		1066966	0					
ANR	1067175	Argument	rlen		1066966	4					
ANR	1067176	Identifier	rlen		1066966	0					
ANR	1067177	UnaryOperationExpression	- 1		1066966	1					
ANR	1067178	UnaryOperator	-		1066966	0					
ANR	1067179	PrimaryExpression	1		1066966	1					
ANR	1067180	CompoundStatement		27:67:732:732	1066966	1					
ANR	1067181	Statement	eprintf	750:3:19875:19881	1066966	0	True				
ANR	1067182	Statement	(	750:11:19883:19883	1066966	1	True				
ANR	1067183	Statement	"""search: update read error at 0x%08"""	750:12:19884:19919	1066966	2	True				
ANR	1067184	Statement	PFMT64x	750:48:19920:19926	1066966	3	True				
ANR	1067185	Statement	"""\\n"""	750:55:19927:19930	1066966	4	True				
ANR	1067186	Statement	","	750:59:19931:19931	1066966	5	True				
ANR	1067187	Statement	at	750:61:19933:19934	1066966	6	True				
ANR	1067188	Statement	)	750:63:19935:19935	1066966	7	True				
ANR	1067189	ExpressionStatement		750:64:19936:19936	1066966	8	True				
ANR	1067190	ExpressionStatement	retval = false	751:3:19941:19955	1066966	9	True				
ANR	1067191	AssignmentExpression	retval = false		1066966	0		=			
ANR	1067192	Identifier	retval		1066966	0					
ANR	1067193	Identifier	false		1066966	1					
ANR	1067194	BreakStatement	break ;	752:3:19960:19965	1066966	10	True				
ANR	1067195	ExpressionStatement	r_cons_break_pop ( )	755:1:19975:19994	1066966	11	True				
ANR	1067196	CallExpression	r_cons_break_pop ( )		1066966	0					
ANR	1067197	Callee	r_cons_break_pop		1066966	0					
ANR	1067198	Identifier	r_cons_break_pop		1066966	0					
ANR	1067199	ArgumentList			1066966	1					
ANR	1067200	ExpressionStatement	free ( buf )	756:1:19997:20007	1066966	12	True				
ANR	1067201	CallExpression	free ( buf )		1066966	0					
ANR	1067202	Callee	free		1066966	0					
ANR	1067203	Identifier	free		1066966	0					
ANR	1067204	ArgumentList	buf		1066966	1					
ANR	1067205	Argument	buf		1066966	0					
ANR	1067206	Identifier	buf		1066966	0					
ANR	1067207	ExpressionStatement	r_sign_search_free ( ss )	757:1:20010:20033	1066966	13	True				
ANR	1067208	CallExpression	r_sign_search_free ( ss )		1066966	0					
ANR	1067209	Callee	r_sign_search_free		1066966	0					
ANR	1067210	Identifier	r_sign_search_free		1066966	0					
ANR	1067211	ArgumentList	ss		1066966	1					
ANR	1067212	Argument	ss		1066966	0					
ANR	1067213	Identifier	ss		1066966	0					
ANR	1067214	ReturnStatement	return retval ;	759:1:20037:20050	1066966	14	True				
ANR	1067215	Identifier	retval		1066966	0					
ANR	1067216	ReturnType	static bool		1066966	1					
ANR	1067217	Identifier	searchRange		1066966	2					
ANR	1067218	ParameterList	"RCore * core , ut64 from , ut64 to , bool rad , struct ctxSearchCB * ctx"		1066966	3					
ANR	1067219	Parameter	RCore * core	723:24:19069:19079	1066966	0	True				
ANR	1067220	ParameterType	RCore *		1066966	0					
ANR	1067221	Identifier	core		1066966	1					
ANR	1067222	Parameter	ut64 from	723:37:19082:19090	1066966	1	True				
ANR	1067223	ParameterType	ut64		1066966	0					
ANR	1067224	Identifier	from		1066966	1					
ANR	1067225	Parameter	ut64 to	723:48:19093:19099	1066966	2	True				
ANR	1067226	ParameterType	ut64		1066966	0					
ANR	1067227	Identifier	to		1066966	1					
ANR	1067228	Parameter	bool rad	723:57:19102:19109	1066966	3	True				
ANR	1067229	ParameterType	bool		1066966	0					
ANR	1067230	Identifier	rad		1066966	1					
ANR	1067231	Parameter	struct ctxSearchCB * ctx	723:67:19112:19134	1066966	4	True				
ANR	1067232	ParameterType	struct ctxSearchCB *		1066966	0					
ANR	1067233	Identifier	ctx		1066966	1					
ANR	1067234	CFGEntryNode	ENTRY		1066966		True				
ANR	1067235	CFGExitNode	EXIT		1066966		True				
ANR	1067236	Symbol	ss -> search -> align		1066966						
ANR	1067237	Symbol	* ss		1066966						
ANR	1067238	Symbol	* core		1066966						
ANR	1067239	Symbol	minsz		1066966						
ANR	1067240	Symbol	core -> anal		1066966						
ANR	1067241	Symbol	* * ss		1066966						
ANR	1067242	Symbol	r_cons_is_breaked		1066966						
ANR	1067243	Symbol	rad		1066966						
ANR	1067244	Symbol	core -> io		1066966						
ANR	1067245	Symbol	rlen		1066966						
ANR	1067246	Symbol	from		1066966						
ANR	1067247	Symbol	r_sign_search_new		1066966						
ANR	1067248	Symbol	r_sign_search_update		1066966						
ANR	1067249	Symbol	core -> blocksize		1066966						
ANR	1067250	Symbol	core -> config		1066966						
ANR	1067251	Symbol	ss		1066966						
ANR	1067252	Symbol	* ss -> search		1066966						
ANR	1067253	Symbol	malloc		1066966						
ANR	1067254	Symbol	r_io_is_valid_offset		1066966						
ANR	1067255	Symbol	NULL		1066966						
ANR	1067256	Symbol	ctx		1066966						
ANR	1067257	Symbol	false		1066966						
ANR	1067258	Symbol	R_MIN		1066966						
ANR	1067259	Symbol	retval		1066966						
ANR	1067260	Symbol	core		1066966						
ANR	1067261	Symbol	buf		1066966						
ANR	1067262	Symbol	at		1066966						
ANR	1067263	Symbol	r_config_get_i		1066966						
ANR	1067264	Symbol	true		1066966						
ANR	1067265	Symbol	searchHitCB		1066966						
ANR	1067266	Symbol	to		1066966						
ANR	1067267	Symbol	& at		1066966						
ANR	1067268	Symbol	ss -> search		1066966						
ANR	1067269	Function	searchRange2	762:0:20055:20823							
ANR	1067270	FunctionDef	"searchRange2 (RCore * core , RSignSearch * ss , ut64 from , ut64 to , bool rad , struct ctxSearchCB * ctx)"		1067269	0					
ANR	1067271	CompoundStatement		762:110:20165:20823	1067269	0					
ANR	1067272	IdentifierDeclStatement	ut8 * buf = malloc ( core -> blocksize ) ;	763:1:20168:20203	1067269	0	True				
ANR	1067273	IdentifierDecl	* buf = malloc ( core -> blocksize )		1067269	0					
ANR	1067274	IdentifierDeclType	ut8 *		1067269	0					
ANR	1067275	Identifier	buf		1067269	1					
ANR	1067276	AssignmentExpression	* buf = malloc ( core -> blocksize )		1067269	2		=			
ANR	1067277	Identifier	buf		1067269	0					
ANR	1067278	CallExpression	malloc ( core -> blocksize )		1067269	1					
ANR	1067279	Callee	malloc		1067269	0					
ANR	1067280	Identifier	malloc		1067269	0					
ANR	1067281	ArgumentList	core -> blocksize		1067269	1					
ANR	1067282	Argument	core -> blocksize		1067269	0					
ANR	1067283	PtrMemberAccess	core -> blocksize		1067269	0					
ANR	1067284	Identifier	core		1067269	0					
ANR	1067285	Identifier	blocksize		1067269	1					
ANR	1067286	IdentifierDeclStatement	ut64 at ;	764:1:20206:20213	1067269	1	True				
ANR	1067287	IdentifierDecl	at		1067269	0					
ANR	1067288	IdentifierDeclType	ut64		1067269	0					
ANR	1067289	Identifier	at		1067269	1					
ANR	1067290	IdentifierDeclStatement	int rlen ;	765:1:20216:20224	1067269	2	True				
ANR	1067291	IdentifierDecl	rlen		1067269	0					
ANR	1067292	IdentifierDeclType	int		1067269	0					
ANR	1067293	Identifier	rlen		1067269	1					
ANR	1067294	IdentifierDeclStatement	bool retval = true ;	766:1:20227:20245	1067269	3	True				
ANR	1067295	IdentifierDecl	retval = true		1067269	0					
ANR	1067296	IdentifierDeclType	bool		1067269	0					
ANR	1067297	Identifier	retval		1067269	1					
ANR	1067298	AssignmentExpression	retval = true		1067269	2		=			
ANR	1067299	Identifier	true		1067269	0					
ANR	1067300	Identifier	true		1067269	1					
ANR	1067301	IfStatement	if ( ! buf )		1067269	4					
ANR	1067302	Condition	! buf	768:5:20253:20256	1067269	0	True				
ANR	1067303	UnaryOperationExpression	! buf		1067269	0					
ANR	1067304	UnaryOperator	!		1067269	0					
ANR	1067305	Identifier	buf		1067269	1					
ANR	1067306	CompoundStatement		7:11:93:93	1067269	1					
ANR	1067307	ReturnStatement	return false ;	769:2:20263:20275	1067269	0	True				
ANR	1067308	Identifier	false		1067269	0					
ANR	1067309	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	771:1:20281:20311	1067269	5	True				
ANR	1067310	CallExpression	"r_cons_break_push ( NULL , NULL )"		1067269	0					
ANR	1067311	Callee	r_cons_break_push		1067269	0					
ANR	1067312	Identifier	r_cons_break_push		1067269	0					
ANR	1067313	ArgumentList	NULL		1067269	1					
ANR	1067314	Argument	NULL		1067269	0					
ANR	1067315	Identifier	NULL		1067269	0					
ANR	1067316	Argument	NULL		1067269	1					
ANR	1067317	Identifier	NULL		1067269	0					
ANR	1067318	ForStatement	for ( at = from ; at < to ; at += core -> blocksize )		1067269	6					
ANR	1067319	ForInit	at = from ;	772:6:20319:20328	1067269	0	True				
ANR	1067320	AssignmentExpression	at = from		1067269	0		=			
ANR	1067321	Identifier	at		1067269	0					
ANR	1067322	Identifier	from		1067269	1					
ANR	1067323	Condition	at < to	772:17:20330:20336	1067269	1	True				
ANR	1067324	RelationalExpression	at < to		1067269	0		<			
ANR	1067325	Identifier	at		1067269	0					
ANR	1067326	Identifier	to		1067269	1					
ANR	1067327	AssignmentExpression	at += core -> blocksize	772:26:20339:20359	1067269	2	True	+=			
ANR	1067328	Identifier	at		1067269	0					
ANR	1067329	PtrMemberAccess	core -> blocksize		1067269	1					
ANR	1067330	Identifier	core		1067269	0					
ANR	1067331	Identifier	blocksize		1067269	1					
ANR	1067332	CompoundStatement		11:49:196:196	1067269	3					
ANR	1067333	IfStatement	if ( r_cons_is_breaked ( ) )		1067269	0					
ANR	1067334	Condition	r_cons_is_breaked ( )	773:6:20370:20389	1067269	0	True				
ANR	1067335	CallExpression	r_cons_is_breaked ( )		1067269	0					
ANR	1067336	Callee	r_cons_is_breaked		1067269	0					
ANR	1067337	Identifier	r_cons_is_breaked		1067269	0					
ANR	1067338	ArgumentList			1067269	1					
ANR	1067339	CompoundStatement		12:28:226:226	1067269	1					
ANR	1067340	ExpressionStatement	retval = false	774:3:20397:20411	1067269	0	True				
ANR	1067341	AssignmentExpression	retval = false		1067269	0		=			
ANR	1067342	Identifier	retval		1067269	0					
ANR	1067343	Identifier	false		1067269	1					
ANR	1067344	BreakStatement	break ;	775:3:20416:20421	1067269	1	True				
ANR	1067345	ExpressionStatement	"rlen = R_MIN ( core -> blocksize , to - at )"	777:2:20429:20468	1067269	1	True				
ANR	1067346	AssignmentExpression	"rlen = R_MIN ( core -> blocksize , to - at )"		1067269	0		=			
ANR	1067347	Identifier	rlen		1067269	0					
ANR	1067348	CallExpression	"R_MIN ( core -> blocksize , to - at )"		1067269	1					
ANR	1067349	Callee	R_MIN		1067269	0					
ANR	1067350	Identifier	R_MIN		1067269	0					
ANR	1067351	ArgumentList	core -> blocksize		1067269	1					
ANR	1067352	Argument	core -> blocksize		1067269	0					
ANR	1067353	PtrMemberAccess	core -> blocksize		1067269	0					
ANR	1067354	Identifier	core		1067269	0					
ANR	1067355	Identifier	blocksize		1067269	1					
ANR	1067356	Argument	to - at		1067269	1					
ANR	1067357	AdditiveExpression	to - at		1067269	0		-			
ANR	1067358	Identifier	to		1067269	0					
ANR	1067359	Identifier	at		1067269	1					
ANR	1067360	IfStatement	"if ( ! r_io_is_valid_offset ( core -> io , at , 0 ) )"		1067269	2					
ANR	1067361	Condition	"! r_io_is_valid_offset ( core -> io , at , 0 )"	778:6:20476:20514	1067269	0	True				
ANR	1067362	UnaryOperationExpression	"! r_io_is_valid_offset ( core -> io , at , 0 )"		1067269	0					
ANR	1067363	UnaryOperator	!		1067269	0					
ANR	1067364	CallExpression	"r_io_is_valid_offset ( core -> io , at , 0 )"		1067269	1					
ANR	1067365	Callee	r_io_is_valid_offset		1067269	0					
ANR	1067366	Identifier	r_io_is_valid_offset		1067269	0					
ANR	1067367	ArgumentList	core -> io		1067269	1					
ANR	1067368	Argument	core -> io		1067269	0					
ANR	1067369	PtrMemberAccess	core -> io		1067269	0					
ANR	1067370	Identifier	core		1067269	0					
ANR	1067371	Identifier	io		1067269	1					
ANR	1067372	Argument	at		1067269	1					
ANR	1067373	Identifier	at		1067269	0					
ANR	1067374	Argument	0		1067269	2					
ANR	1067375	PrimaryExpression	0		1067269	0					
ANR	1067376	CompoundStatement		17:47:351:351	1067269	1					
ANR	1067377	ExpressionStatement	retval = false	779:3:20522:20536	1067269	0	True				
ANR	1067378	AssignmentExpression	retval = false		1067269	0		=			
ANR	1067379	Identifier	retval		1067269	0					
ANR	1067380	Identifier	false		1067269	1					
ANR	1067381	BreakStatement	break ;	780:3:20541:20546	1067269	1	True				
ANR	1067382	ExpressionStatement	"( void ) r_io_read_at ( core -> io , at , buf , rlen )"	782:2:20554:20598	1067269	3	True				
ANR	1067383	CastExpression	"( void ) r_io_read_at ( core -> io , at , buf , rlen )"		1067269	0					
ANR	1067384	CastTarget	void		1067269	0					
ANR	1067385	CallExpression	"r_io_read_at ( core -> io , at , buf , rlen )"		1067269	1					
ANR	1067386	Callee	r_io_read_at		1067269	0					
ANR	1067387	Identifier	r_io_read_at		1067269	0					
ANR	1067388	ArgumentList	core -> io		1067269	1					
ANR	1067389	Argument	core -> io		1067269	0					
ANR	1067390	PtrMemberAccess	core -> io		1067269	0					
ANR	1067391	Identifier	core		1067269	0					
ANR	1067392	Identifier	io		1067269	1					
ANR	1067393	Argument	at		1067269	1					
ANR	1067394	Identifier	at		1067269	0					
ANR	1067395	Argument	buf		1067269	2					
ANR	1067396	Identifier	buf		1067269	0					
ANR	1067397	Argument	rlen		1067269	3					
ANR	1067398	Identifier	rlen		1067269	0					
ANR	1067399	IfStatement	"if ( r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1 )"		1067269	4					
ANR	1067400	Condition	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1"	783:6:20606:20664	1067269	0	True				
ANR	1067401	EqualityExpression	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen ) == - 1"		1067269	0		==			
ANR	1067402	CallExpression	"r_sign_search_update ( core -> anal , ss , & at , buf , rlen )"		1067269	0					
ANR	1067403	Callee	r_sign_search_update		1067269	0					
ANR	1067404	Identifier	r_sign_search_update		1067269	0					
ANR	1067405	ArgumentList	core -> anal		1067269	1					
ANR	1067406	Argument	core -> anal		1067269	0					
ANR	1067407	PtrMemberAccess	core -> anal		1067269	0					
ANR	1067408	Identifier	core		1067269	0					
ANR	1067409	Identifier	anal		1067269	1					
ANR	1067410	Argument	ss		1067269	1					
ANR	1067411	Identifier	ss		1067269	0					
ANR	1067412	Argument	& at		1067269	2					
ANR	1067413	UnaryOperationExpression	& at		1067269	0					
ANR	1067414	UnaryOperator	&		1067269	0					
ANR	1067415	Identifier	at		1067269	1					
ANR	1067416	Argument	buf		1067269	3					
ANR	1067417	Identifier	buf		1067269	0					
ANR	1067418	Argument	rlen		1067269	4					
ANR	1067419	Identifier	rlen		1067269	0					
ANR	1067420	UnaryOperationExpression	- 1		1067269	1					
ANR	1067421	UnaryOperator	-		1067269	0					
ANR	1067422	PrimaryExpression	1		1067269	1					
ANR	1067423	CompoundStatement		22:67:501:501	1067269	1					
ANR	1067424	Statement	eprintf	784:3:20672:20678	1067269	0	True				
ANR	1067425	Statement	(	784:11:20680:20680	1067269	1	True				
ANR	1067426	Statement	"""search: update read error at 0x%08"""	784:12:20681:20716	1067269	2	True				
ANR	1067427	Statement	PFMT64x	784:48:20717:20723	1067269	3	True				
ANR	1067428	Statement	"""\\n"""	784:55:20724:20727	1067269	4	True				
ANR	1067429	Statement	","	784:59:20728:20728	1067269	5	True				
ANR	1067430	Statement	at	784:61:20730:20731	1067269	6	True				
ANR	1067431	Statement	)	784:63:20732:20732	1067269	7	True				
ANR	1067432	ExpressionStatement		784:64:20733:20733	1067269	8	True				
ANR	1067433	ExpressionStatement	retval = false	785:3:20738:20752	1067269	9	True				
ANR	1067434	AssignmentExpression	retval = false		1067269	0		=			
ANR	1067435	Identifier	retval		1067269	0					
ANR	1067436	Identifier	false		1067269	1					
ANR	1067437	BreakStatement	break ;	786:3:20757:20762	1067269	10	True				
ANR	1067438	ExpressionStatement	r_cons_break_pop ( )	789:1:20772:20791	1067269	7	True				
ANR	1067439	CallExpression	r_cons_break_pop ( )		1067269	0					
ANR	1067440	Callee	r_cons_break_pop		1067269	0					
ANR	1067441	Identifier	r_cons_break_pop		1067269	0					
ANR	1067442	ArgumentList			1067269	1					
ANR	1067443	ExpressionStatement	free ( buf )	790:1:20794:20804	1067269	8	True				
ANR	1067444	CallExpression	free ( buf )		1067269	0					
ANR	1067445	Callee	free		1067269	0					
ANR	1067446	Identifier	free		1067269	0					
ANR	1067447	ArgumentList	buf		1067269	1					
ANR	1067448	Argument	buf		1067269	0					
ANR	1067449	Identifier	buf		1067269	0					
ANR	1067450	ReturnStatement	return retval ;	792:1:20808:20821	1067269	9	True				
ANR	1067451	Identifier	retval		1067269	0					
ANR	1067452	ReturnType	static bool		1067269	1					
ANR	1067453	Identifier	searchRange2		1067269	2					
ANR	1067454	ParameterList	"RCore * core , RSignSearch * ss , ut64 from , ut64 to , bool rad , struct ctxSearchCB * ctx"		1067269	3					
ANR	1067455	Parameter	RCore * core	762:25:20080:20090	1067269	0	True				
ANR	1067456	ParameterType	RCore *		1067269	0					
ANR	1067457	Identifier	core		1067269	1					
ANR	1067458	Parameter	RSignSearch * ss	762:38:20093:20107	1067269	1	True				
ANR	1067459	ParameterType	RSignSearch *		1067269	0					
ANR	1067460	Identifier	ss		1067269	1					
ANR	1067461	Parameter	ut64 from	762:55:20110:20118	1067269	2	True				
ANR	1067462	ParameterType	ut64		1067269	0					
ANR	1067463	Identifier	from		1067269	1					
ANR	1067464	Parameter	ut64 to	762:66:20121:20127	1067269	3	True				
ANR	1067465	ParameterType	ut64		1067269	0					
ANR	1067466	Identifier	to		1067269	1					
ANR	1067467	Parameter	bool rad	762:75:20130:20137	1067269	4	True				
ANR	1067468	ParameterType	bool		1067269	0					
ANR	1067469	Identifier	rad		1067269	1					
ANR	1067470	Parameter	struct ctxSearchCB * ctx	762:85:20140:20162	1067269	5	True				
ANR	1067471	ParameterType	struct ctxSearchCB *		1067269	0					
ANR	1067472	Identifier	ctx		1067269	1					
ANR	1067473	CFGEntryNode	ENTRY		1067269		True				
ANR	1067474	CFGExitNode	EXIT		1067269		True				
ANR	1067475	Symbol	ss		1067269						
ANR	1067476	Symbol	core -> blocksize		1067269						
ANR	1067477	Symbol	malloc		1067269						
ANR	1067478	Symbol	r_io_is_valid_offset		1067269						
ANR	1067479	Symbol	NULL		1067269						
ANR	1067480	Symbol	ctx		1067269						
ANR	1067481	Symbol	* core		1067269						
ANR	1067482	Symbol	false		1067269						
ANR	1067483	Symbol	R_MIN		1067269						
ANR	1067484	Symbol	core -> anal		1067269						
ANR	1067485	Symbol	retval		1067269						
ANR	1067486	Symbol	core		1067269						
ANR	1067487	Symbol	buf		1067269						
ANR	1067488	Symbol	r_cons_is_breaked		1067269						
ANR	1067489	Symbol	at		1067269						
ANR	1067490	Symbol	rad		1067269						
ANR	1067491	Symbol	core -> io		1067269						
ANR	1067492	Symbol	rlen		1067269						
ANR	1067493	Symbol	true		1067269						
ANR	1067494	Symbol	from		1067269						
ANR	1067495	Symbol	to		1067269						
ANR	1067496	Symbol	& at		1067269						
ANR	1067497	Symbol	r_sign_search_update		1067269						
ANR	1067498	Function	search	795:0:20826:24278							
ANR	1067499	FunctionDef	"search (RCore * core , bool rad , bool only_func)"		1067498	0					
ANR	1067500	CompoundStatement		795:58:20884:24278	1067498	0					
ANR	1067501	IdentifierDeclStatement	RList * list ;	796:1:20887:20898	1067498	0	True				
ANR	1067502	IdentifierDecl	* list		1067498	0					
ANR	1067503	IdentifierDeclType	RList *		1067498	0					
ANR	1067504	Identifier	list		1067498	1					
ANR	1067505	IdentifierDeclStatement	RListIter * iter ;	797:1:20901:20916	1067498	1	True				
ANR	1067506	IdentifierDecl	* iter		1067498	0					
ANR	1067507	IdentifierDeclType	RListIter *		1067498	0					
ANR	1067508	Identifier	iter		1067498	1					
ANR	1067509	IdentifierDeclStatement	RAnalFunction * fcni = NULL ;	798:1:20919:20945	1067498	2	True				
ANR	1067510	IdentifierDecl	* fcni = NULL		1067498	0					
ANR	1067511	IdentifierDeclType	RAnalFunction *		1067498	0					
ANR	1067512	Identifier	fcni		1067498	1					
ANR	1067513	AssignmentExpression	* fcni = NULL		1067498	2		=			
ANR	1067514	Identifier	NULL		1067498	0					
ANR	1067515	Identifier	NULL		1067498	1					
ANR	1067516	IdentifierDeclStatement	RIOMap * map ;	799:1:20948:20959	1067498	3	True				
ANR	1067517	IdentifierDecl	* map		1067498	0					
ANR	1067518	IdentifierDeclType	RIOMap *		1067498	0					
ANR	1067519	Identifier	map		1067498	1					
ANR	1067520	IdentifierDeclStatement	bool retval = true ;	800:1:20962:20980	1067498	4	True				
ANR	1067521	IdentifierDecl	retval = true		1067498	0					
ANR	1067522	IdentifierDeclType	bool		1067498	0					
ANR	1067523	Identifier	retval		1067498	1					
ANR	1067524	AssignmentExpression	retval = true		1067498	2		=			
ANR	1067525	Identifier	true		1067498	0					
ANR	1067526	Identifier	true		1067498	1					
ANR	1067527	IdentifierDeclStatement	int hits = 0 ;	801:1:20983:20995	1067498	5	True				
ANR	1067528	IdentifierDecl	hits = 0		1067498	0					
ANR	1067529	IdentifierDeclType	int		1067498	0					
ANR	1067530	Identifier	hits		1067498	1					
ANR	1067531	AssignmentExpression	hits = 0		1067498	2		=			
ANR	1067532	Identifier	hits		1067498	0					
ANR	1067533	PrimaryExpression	0		1067498	1					
ANR	1067534	IdentifierDeclStatement	"struct ctxSearchCB bytes_search_ctx = { core , rad , 0 , ""bytes"" } ;"	803:1:20999:21062	1067498	6	True				
ANR	1067535	IdentifierDecl	"bytes_search_ctx = { core , rad , 0 , ""bytes"" }"		1067498	0					
ANR	1067536	IdentifierDeclType	struct ctxSearchCB		1067498	0					
ANR	1067537	Identifier	bytes_search_ctx		1067498	1					
ANR	1067538	AssignmentExpression	"bytes_search_ctx = { core , rad , 0 , ""bytes"" }"		1067498	2		=			
ANR	1067539	Identifier	bytes_search_ctx		1067498	0					
ANR	1067540	InitializerList	core		1067498	1					
ANR	1067541	Identifier	core		1067498	0					
ANR	1067542	Identifier	rad		1067498	1					
ANR	1067543	PrimaryExpression	0		1067498	2					
ANR	1067544	PrimaryExpression	"""bytes"""		1067498	3					
ANR	1067545	IdentifierDeclStatement	"struct ctxSearchCB graph_match_ctx = { core , rad , 0 , ""graph"" } ;"	804:1:21065:21127	1067498	7	True				
ANR	1067546	IdentifierDecl	"graph_match_ctx = { core , rad , 0 , ""graph"" }"		1067498	0					
ANR	1067547	IdentifierDeclType	struct ctxSearchCB		1067498	0					
ANR	1067548	Identifier	graph_match_ctx		1067498	1					
ANR	1067549	AssignmentExpression	"graph_match_ctx = { core , rad , 0 , ""graph"" }"		1067498	2		=			
ANR	1067550	Identifier	graph_match_ctx		1067498	0					
ANR	1067551	InitializerList	core		1067498	1					
ANR	1067552	Identifier	core		1067498	0					
ANR	1067553	Identifier	rad		1067498	1					
ANR	1067554	PrimaryExpression	0		1067498	2					
ANR	1067555	PrimaryExpression	"""graph"""		1067498	3					
ANR	1067556	IdentifierDeclStatement	"struct ctxSearchCB offset_match_ctx = { core , rad , 0 , ""offset"" } ;"	805:1:21130:21194	1067498	8	True				
ANR	1067557	IdentifierDecl	"offset_match_ctx = { core , rad , 0 , ""offset"" }"		1067498	0					
ANR	1067558	IdentifierDeclType	struct ctxSearchCB		1067498	0					
ANR	1067559	Identifier	offset_match_ctx		1067498	1					
ANR	1067560	AssignmentExpression	"offset_match_ctx = { core , rad , 0 , ""offset"" }"		1067498	2		=			
ANR	1067561	Identifier	offset_match_ctx		1067498	0					
ANR	1067562	InitializerList	core		1067498	1					
ANR	1067563	Identifier	core		1067498	0					
ANR	1067564	Identifier	rad		1067498	1					
ANR	1067565	PrimaryExpression	0		1067498	2					
ANR	1067566	PrimaryExpression	"""offset"""		1067498	3					
ANR	1067567	IdentifierDeclStatement	"struct ctxSearchCB refs_match_ctx = { core , rad , 0 , ""refs"" } ;"	806:1:21197:21257	1067498	9	True				
ANR	1067568	IdentifierDecl	"refs_match_ctx = { core , rad , 0 , ""refs"" }"		1067498	0					
ANR	1067569	IdentifierDeclType	struct ctxSearchCB		1067498	0					
ANR	1067570	Identifier	refs_match_ctx		1067498	1					
ANR	1067571	AssignmentExpression	"refs_match_ctx = { core , rad , 0 , ""refs"" }"		1067498	2		=			
ANR	1067572	Identifier	refs_match_ctx		1067498	0					
ANR	1067573	InitializerList	core		1067498	1					
ANR	1067574	Identifier	core		1067498	0					
ANR	1067575	Identifier	rad		1067498	1					
ANR	1067576	PrimaryExpression	0		1067498	2					
ANR	1067577	PrimaryExpression	"""refs"""		1067498	3					
ANR	1067578	IdentifierDeclStatement	"struct ctxSearchCB hash_match_ctx = { core , rad , 0 , ""bbhash"" } ;"	807:1:21260:21322	1067498	10	True				
ANR	1067579	IdentifierDecl	"hash_match_ctx = { core , rad , 0 , ""bbhash"" }"		1067498	0					
ANR	1067580	IdentifierDeclType	struct ctxSearchCB		1067498	0					
ANR	1067581	Identifier	hash_match_ctx		1067498	1					
ANR	1067582	AssignmentExpression	"hash_match_ctx = { core , rad , 0 , ""bbhash"" }"		1067498	2		=			
ANR	1067583	Identifier	hash_match_ctx		1067498	0					
ANR	1067584	InitializerList	core		1067498	1					
ANR	1067585	Identifier	core		1067498	0					
ANR	1067586	Identifier	rad		1067498	1					
ANR	1067587	PrimaryExpression	0		1067498	2					
ANR	1067588	PrimaryExpression	"""bbhash"""		1067498	3					
ANR	1067589	IdentifierDeclStatement	"const char * zign_prefix = r_config_get ( core -> config , ""zign.prefix"" ) ;"	809:1:21326:21394	1067498	11	True				
ANR	1067590	IdentifierDecl	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1067498	0					
ANR	1067591	IdentifierDeclType	const char *		1067498	0					
ANR	1067592	Identifier	zign_prefix		1067498	1					
ANR	1067593	AssignmentExpression	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1067498	2		=			
ANR	1067594	Identifier	zign_prefix		1067498	0					
ANR	1067595	CallExpression	"r_config_get ( core -> config , ""zign.prefix"" )"		1067498	1					
ANR	1067596	Callee	r_config_get		1067498	0					
ANR	1067597	Identifier	r_config_get		1067498	0					
ANR	1067598	ArgumentList	core -> config		1067498	1					
ANR	1067599	Argument	core -> config		1067498	0					
ANR	1067600	PtrMemberAccess	core -> config		1067498	0					
ANR	1067601	Identifier	core		1067498	0					
ANR	1067602	Identifier	config		1067498	1					
ANR	1067603	Argument	"""zign.prefix"""		1067498	1					
ANR	1067604	PrimaryExpression	"""zign.prefix"""		1067498	0					
ANR	1067605	IdentifierDeclStatement	"int mincc = r_config_get_i ( core -> config , ""zign.mincc"" ) ;"	810:1:21397:21452	1067498	12	True				
ANR	1067606	IdentifierDecl	"mincc = r_config_get_i ( core -> config , ""zign.mincc"" )"		1067498	0					
ANR	1067607	IdentifierDeclType	int		1067498	0					
ANR	1067608	Identifier	mincc		1067498	1					
ANR	1067609	AssignmentExpression	"mincc = r_config_get_i ( core -> config , ""zign.mincc"" )"		1067498	2		=			
ANR	1067610	Identifier	mincc		1067498	0					
ANR	1067611	CallExpression	"r_config_get_i ( core -> config , ""zign.mincc"" )"		1067498	1					
ANR	1067612	Callee	r_config_get_i		1067498	0					
ANR	1067613	Identifier	r_config_get_i		1067498	0					
ANR	1067614	ArgumentList	core -> config		1067498	1					
ANR	1067615	Argument	core -> config		1067498	0					
ANR	1067616	PtrMemberAccess	core -> config		1067498	0					
ANR	1067617	Identifier	core		1067498	0					
ANR	1067618	Identifier	config		1067498	1					
ANR	1067619	Argument	"""zign.mincc"""		1067498	1					
ANR	1067620	PrimaryExpression	"""zign.mincc"""		1067498	0					
ANR	1067621	IdentifierDeclStatement	"const char * mode = r_config_get ( core -> config , ""search.in"" ) ;"	811:1:21455:21514	1067498	13	True				
ANR	1067622	IdentifierDecl	"* mode = r_config_get ( core -> config , ""search.in"" )"		1067498	0					
ANR	1067623	IdentifierDeclType	const char *		1067498	0					
ANR	1067624	Identifier	mode		1067498	1					
ANR	1067625	AssignmentExpression	"* mode = r_config_get ( core -> config , ""search.in"" )"		1067498	2		=			
ANR	1067626	Identifier	mode		1067498	0					
ANR	1067627	CallExpression	"r_config_get ( core -> config , ""search.in"" )"		1067498	1					
ANR	1067628	Callee	r_config_get		1067498	0					
ANR	1067629	Identifier	r_config_get		1067498	0					
ANR	1067630	ArgumentList	core -> config		1067498	1					
ANR	1067631	Argument	core -> config		1067498	0					
ANR	1067632	PtrMemberAccess	core -> config		1067498	0					
ANR	1067633	Identifier	core		1067498	0					
ANR	1067634	Identifier	config		1067498	1					
ANR	1067635	Argument	"""search.in"""		1067498	1					
ANR	1067636	PrimaryExpression	"""search.in"""		1067498	0					
ANR	1067637	IdentifierDeclStatement	"bool useBytes = r_config_get_i ( core -> config , ""zign.bytes"" ) ;"	812:1:21517:21576	1067498	14	True				
ANR	1067638	IdentifierDecl	"useBytes = r_config_get_i ( core -> config , ""zign.bytes"" )"		1067498	0					
ANR	1067639	IdentifierDeclType	bool		1067498	0					
ANR	1067640	Identifier	useBytes		1067498	1					
ANR	1067641	AssignmentExpression	"useBytes = r_config_get_i ( core -> config , ""zign.bytes"" )"		1067498	2		=			
ANR	1067642	Identifier	useBytes		1067498	0					
ANR	1067643	CallExpression	"r_config_get_i ( core -> config , ""zign.bytes"" )"		1067498	1					
ANR	1067644	Callee	r_config_get_i		1067498	0					
ANR	1067645	Identifier	r_config_get_i		1067498	0					
ANR	1067646	ArgumentList	core -> config		1067498	1					
ANR	1067647	Argument	core -> config		1067498	0					
ANR	1067648	PtrMemberAccess	core -> config		1067498	0					
ANR	1067649	Identifier	core		1067498	0					
ANR	1067650	Identifier	config		1067498	1					
ANR	1067651	Argument	"""zign.bytes"""		1067498	1					
ANR	1067652	PrimaryExpression	"""zign.bytes"""		1067498	0					
ANR	1067653	IdentifierDeclStatement	"bool useGraph = r_config_get_i ( core -> config , ""zign.graph"" ) ;"	813:1:21579:21638	1067498	15	True				
ANR	1067654	IdentifierDecl	"useGraph = r_config_get_i ( core -> config , ""zign.graph"" )"		1067498	0					
ANR	1067655	IdentifierDeclType	bool		1067498	0					
ANR	1067656	Identifier	useGraph		1067498	1					
ANR	1067657	AssignmentExpression	"useGraph = r_config_get_i ( core -> config , ""zign.graph"" )"		1067498	2		=			
ANR	1067658	Identifier	useGraph		1067498	0					
ANR	1067659	CallExpression	"r_config_get_i ( core -> config , ""zign.graph"" )"		1067498	1					
ANR	1067660	Callee	r_config_get_i		1067498	0					
ANR	1067661	Identifier	r_config_get_i		1067498	0					
ANR	1067662	ArgumentList	core -> config		1067498	1					
ANR	1067663	Argument	core -> config		1067498	0					
ANR	1067664	PtrMemberAccess	core -> config		1067498	0					
ANR	1067665	Identifier	core		1067498	0					
ANR	1067666	Identifier	config		1067498	1					
ANR	1067667	Argument	"""zign.graph"""		1067498	1					
ANR	1067668	PrimaryExpression	"""zign.graph"""		1067498	0					
ANR	1067669	IdentifierDeclStatement	"bool useOffset = r_config_get_i ( core -> config , ""zign.offset"" ) ;"	814:1:21641:21702	1067498	16	True				
ANR	1067670	IdentifierDecl	"useOffset = r_config_get_i ( core -> config , ""zign.offset"" )"		1067498	0					
ANR	1067671	IdentifierDeclType	bool		1067498	0					
ANR	1067672	Identifier	useOffset		1067498	1					
ANR	1067673	AssignmentExpression	"useOffset = r_config_get_i ( core -> config , ""zign.offset"" )"		1067498	2		=			
ANR	1067674	Identifier	useOffset		1067498	0					
ANR	1067675	CallExpression	"r_config_get_i ( core -> config , ""zign.offset"" )"		1067498	1					
ANR	1067676	Callee	r_config_get_i		1067498	0					
ANR	1067677	Identifier	r_config_get_i		1067498	0					
ANR	1067678	ArgumentList	core -> config		1067498	1					
ANR	1067679	Argument	core -> config		1067498	0					
ANR	1067680	PtrMemberAccess	core -> config		1067498	0					
ANR	1067681	Identifier	core		1067498	0					
ANR	1067682	Identifier	config		1067498	1					
ANR	1067683	Argument	"""zign.offset"""		1067498	1					
ANR	1067684	PrimaryExpression	"""zign.offset"""		1067498	0					
ANR	1067685	IdentifierDeclStatement	"bool useRefs = r_config_get_i ( core -> config , ""zign.refs"" ) ;"	815:1:21705:21762	1067498	17	True				
ANR	1067686	IdentifierDecl	"useRefs = r_config_get_i ( core -> config , ""zign.refs"" )"		1067498	0					
ANR	1067687	IdentifierDeclType	bool		1067498	0					
ANR	1067688	Identifier	useRefs		1067498	1					
ANR	1067689	AssignmentExpression	"useRefs = r_config_get_i ( core -> config , ""zign.refs"" )"		1067498	2		=			
ANR	1067690	Identifier	useRefs		1067498	0					
ANR	1067691	CallExpression	"r_config_get_i ( core -> config , ""zign.refs"" )"		1067498	1					
ANR	1067692	Callee	r_config_get_i		1067498	0					
ANR	1067693	Identifier	r_config_get_i		1067498	0					
ANR	1067694	ArgumentList	core -> config		1067498	1					
ANR	1067695	Argument	core -> config		1067498	0					
ANR	1067696	PtrMemberAccess	core -> config		1067498	0					
ANR	1067697	Identifier	core		1067498	0					
ANR	1067698	Identifier	config		1067498	1					
ANR	1067699	Argument	"""zign.refs"""		1067498	1					
ANR	1067700	PrimaryExpression	"""zign.refs"""		1067498	0					
ANR	1067701	IdentifierDeclStatement	"bool useHash = r_config_get_i ( core -> config , ""zign.hash"" ) ;"	816:1:21765:21822	1067498	18	True				
ANR	1067702	IdentifierDecl	"useHash = r_config_get_i ( core -> config , ""zign.hash"" )"		1067498	0					
ANR	1067703	IdentifierDeclType	bool		1067498	0					
ANR	1067704	Identifier	useHash		1067498	1					
ANR	1067705	AssignmentExpression	"useHash = r_config_get_i ( core -> config , ""zign.hash"" )"		1067498	2		=			
ANR	1067706	Identifier	useHash		1067498	0					
ANR	1067707	CallExpression	"r_config_get_i ( core -> config , ""zign.hash"" )"		1067498	1					
ANR	1067708	Callee	r_config_get_i		1067498	0					
ANR	1067709	Identifier	r_config_get_i		1067498	0					
ANR	1067710	ArgumentList	core -> config		1067498	1					
ANR	1067711	Argument	core -> config		1067498	0					
ANR	1067712	PtrMemberAccess	core -> config		1067498	0					
ANR	1067713	Identifier	core		1067498	0					
ANR	1067714	Identifier	config		1067498	1					
ANR	1067715	Argument	"""zign.hash"""		1067498	1					
ANR	1067716	PrimaryExpression	"""zign.hash"""		1067498	0					
ANR	1067717	IdentifierDeclStatement	"int maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" ) ;"	817:1:21825:21880	1067498	19	True				
ANR	1067718	IdentifierDecl	"maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" )"		1067498	0					
ANR	1067719	IdentifierDeclType	int		1067498	0					
ANR	1067720	Identifier	maxsz		1067498	1					
ANR	1067721	AssignmentExpression	"maxsz = r_config_get_i ( core -> config , ""zign.maxsz"" )"		1067498	2		=			
ANR	1067722	Identifier	maxsz		1067498	0					
ANR	1067723	CallExpression	"r_config_get_i ( core -> config , ""zign.maxsz"" )"		1067498	1					
ANR	1067724	Callee	r_config_get_i		1067498	0					
ANR	1067725	Identifier	r_config_get_i		1067498	0					
ANR	1067726	ArgumentList	core -> config		1067498	1					
ANR	1067727	Argument	core -> config		1067498	0					
ANR	1067728	PtrMemberAccess	core -> config		1067498	0					
ANR	1067729	Identifier	core		1067498	0					
ANR	1067730	Identifier	config		1067498	1					
ANR	1067731	Argument	"""zign.maxsz"""		1067498	1					
ANR	1067732	PrimaryExpression	"""zign.maxsz"""		1067498	0					
ANR	1067733	IfStatement	if ( rad )		1067498	20					
ANR	1067734	Condition	rad	819:5:21888:21890	1067498	0	True				
ANR	1067735	Identifier	rad		1067498	0					
ANR	1067736	CompoundStatement		25:10:1008:1008	1067498	1					
ANR	1067737	ExpressionStatement	"r_cons_printf ( ""fs+%s\\n"" , zign_prefix )"	820:2:21897:21935	1067498	0	True				
ANR	1067738	CallExpression	"r_cons_printf ( ""fs+%s\\n"" , zign_prefix )"		1067498	0					
ANR	1067739	Callee	r_cons_printf		1067498	0					
ANR	1067740	Identifier	r_cons_printf		1067498	0					
ANR	1067741	ArgumentList	"""fs+%s\\n"""		1067498	1					
ANR	1067742	Argument	"""fs+%s\\n"""		1067498	0					
ANR	1067743	PrimaryExpression	"""fs+%s\\n"""		1067498	0					
ANR	1067744	Argument	zign_prefix		1067498	1					
ANR	1067745	Identifier	zign_prefix		1067498	0					
ANR	1067746	ElseStatement	else		1067498	0					
ANR	1067747	CompoundStatement		27:8:1060:1060	1067498	0					
ANR	1067748	IfStatement	"if ( ! r_flag_space_push ( core -> flags , zign_prefix ) )"		1067498	0					
ANR	1067749	Condition	"! r_flag_space_push ( core -> flags , zign_prefix )"	822:6:21953:21997	1067498	0	True				
ANR	1067750	UnaryOperationExpression	"! r_flag_space_push ( core -> flags , zign_prefix )"		1067498	0					
ANR	1067751	UnaryOperator	!		1067498	0					
ANR	1067752	CallExpression	"r_flag_space_push ( core -> flags , zign_prefix )"		1067498	1					
ANR	1067753	Callee	r_flag_space_push		1067498	0					
ANR	1067754	Identifier	r_flag_space_push		1067498	0					
ANR	1067755	ArgumentList	core -> flags		1067498	1					
ANR	1067756	Argument	core -> flags		1067498	0					
ANR	1067757	PtrMemberAccess	core -> flags		1067498	0					
ANR	1067758	Identifier	core		1067498	0					
ANR	1067759	Identifier	flags		1067498	1					
ANR	1067760	Argument	zign_prefix		1067498	1					
ANR	1067761	Identifier	zign_prefix		1067498	0					
ANR	1067762	CompoundStatement		28:53:1115:1115	1067498	1					
ANR	1067763	ExpressionStatement	"eprintf ( ""error: cannot create flagspace\\n"" )"	823:3:22005:22049	1067498	0	True				
ANR	1067764	CallExpression	"eprintf ( ""error: cannot create flagspace\\n"" )"		1067498	0					
ANR	1067765	Callee	eprintf		1067498	0					
ANR	1067766	Identifier	eprintf		1067498	0					
ANR	1067767	ArgumentList	"""error: cannot create flagspace\\n"""		1067498	1					
ANR	1067768	Argument	"""error: cannot create flagspace\\n"""		1067498	0					
ANR	1067769	PrimaryExpression	"""error: cannot create flagspace\\n"""		1067498	0					
ANR	1067770	ReturnStatement	return false ;	824:3:22054:22066	1067498	1	True				
ANR	1067771	Identifier	false		1067498	0					
ANR	1067772	IfStatement	if ( useBytes && ! only_func )		1067498	21					
ANR	1067773	Condition	useBytes && ! only_func	829:5:22098:22119	1067498	0	True				
ANR	1067774	AndExpression	useBytes && ! only_func		1067498	0		&&			
ANR	1067775	Identifier	useBytes		1067498	0					
ANR	1067776	UnaryOperationExpression	! only_func		1067498	1					
ANR	1067777	UnaryOperator	!		1067498	0					
ANR	1067778	Identifier	only_func		1067498	1					
ANR	1067779	CompoundStatement		35:29:1237:1237	1067498	1					
ANR	1067780	ExpressionStatement	"list = r_core_get_boundaries_prot ( core , - 1 , mode , ""search"" )"	830:2:22126:22186	1067498	0	True				
ANR	1067781	AssignmentExpression	"list = r_core_get_boundaries_prot ( core , - 1 , mode , ""search"" )"		1067498	0		=			
ANR	1067782	Identifier	list		1067498	0					
ANR	1067783	CallExpression	"r_core_get_boundaries_prot ( core , - 1 , mode , ""search"" )"		1067498	1					
ANR	1067784	Callee	r_core_get_boundaries_prot		1067498	0					
ANR	1067785	Identifier	r_core_get_boundaries_prot		1067498	0					
ANR	1067786	ArgumentList	core		1067498	1					
ANR	1067787	Argument	core		1067498	0					
ANR	1067788	Identifier	core		1067498	0					
ANR	1067789	Argument	- 1		1067498	1					
ANR	1067790	UnaryOperationExpression	- 1		1067498	0					
ANR	1067791	UnaryOperator	-		1067498	0					
ANR	1067792	PrimaryExpression	1		1067498	1					
ANR	1067793	Argument	mode		1067498	2					
ANR	1067794	Identifier	mode		1067498	0					
ANR	1067795	Argument	"""search"""		1067498	3					
ANR	1067796	PrimaryExpression	"""search"""		1067498	0					
ANR	1067797	IfStatement	if ( ! list )		1067498	1					
ANR	1067798	Condition	! list	831:6:22194:22198	1067498	0	True				
ANR	1067799	UnaryOperationExpression	! list		1067498	0					
ANR	1067800	UnaryOperator	!		1067498	0					
ANR	1067801	Identifier	list		1067498	1					
ANR	1067802	CompoundStatement		37:13:1316:1316	1067498	1					
ANR	1067803	ReturnStatement	return false ;	832:3:22206:22218	1067498	0	True				
ANR	1067804	Identifier	false		1067498	0					
ANR	1067805	Statement	r_list_foreach	834:2:22226:22239	1067498	2	True				
ANR	1067806	Statement	(	834:17:22241:22241	1067498	3	True				
ANR	1067807	Statement	list	834:18:22242:22245	1067498	4	True				
ANR	1067808	Statement	","	834:22:22246:22246	1067498	5	True				
ANR	1067809	Statement	iter	834:24:22248:22251	1067498	6	True				
ANR	1067810	Statement	","	834:28:22252:22252	1067498	7	True				
ANR	1067811	Statement	map	834:30:22254:22256	1067498	8	True				
ANR	1067812	Statement	)	834:33:22257:22257	1067498	9	True				
ANR	1067813	CompoundStatement		40:35:1374:1374	1067498	10					
ANR	1067814	Statement	eprintf	835:3:22264:22270	1067498	0	True				
ANR	1067815	Statement	(	835:11:22272:22272	1067498	1	True				
ANR	1067816	Statement	"""[+] searching 0x%08"""	835:12:22273:22293	1067498	2	True				
ANR	1067817	Statement	PFMT64x	835:33:22294:22300	1067498	3	True				
ANR	1067818	Statement	""" - 0x%08"""	835:40:22301:22310	1067498	4	True				
ANR	1067819	Statement	PFMT64x	835:50:22311:22317	1067498	5	True				
ANR	1067820	Statement	"""\\n"""	835:57:22318:22321	1067498	6	True				
ANR	1067821	Statement	","	835:61:22322:22322	1067498	7	True				
ANR	1067822	Statement	map	835:63:22324:22326	1067498	8	True				
ANR	1067823	Statement	->	835:66:22327:22328	1067498	9	True				
ANR	1067824	Statement	itv	835:68:22329:22331	1067498	10	True				
ANR	1067825	Statement	.	835:71:22332:22332	1067498	11	True				
ANR	1067826	Statement	addr	835:72:22333:22336	1067498	12	True				
ANR	1067827	Statement	","	835:76:22337:22337	1067498	13	True				
ANR	1067828	Statement	r_itv_end	835:78:22339:22347	1067498	14	True				
ANR	1067829	Statement	(	835:88:22349:22349	1067498	15	True				
ANR	1067830	Statement	map	835:89:22350:22352	1067498	16	True				
ANR	1067831	Statement	->	835:92:22353:22354	1067498	17	True				
ANR	1067832	Statement	itv	835:94:22355:22357	1067498	18	True				
ANR	1067833	Statement	)	835:97:22358:22358	1067498	19	True				
ANR	1067834	Statement	)	835:98:22359:22359	1067498	20	True				
ANR	1067835	ExpressionStatement		835:99:22360:22360	1067498	21	True				
ANR	1067836	ExpressionStatement	"retval &= searchRange ( core , map -> itv . addr , r_itv_end ( map -> itv ) , rad , & bytes_search_ctx )"	836:3:22365:22454	1067498	22	True				
ANR	1067837	AssignmentExpression	"retval &= searchRange ( core , map -> itv . addr , r_itv_end ( map -> itv ) , rad , & bytes_search_ctx )"		1067498	0		&=			
ANR	1067838	Identifier	retval		1067498	0					
ANR	1067839	CallExpression	"searchRange ( core , map -> itv . addr , r_itv_end ( map -> itv ) , rad , & bytes_search_ctx )"		1067498	1					
ANR	1067840	Callee	searchRange		1067498	0					
ANR	1067841	Identifier	searchRange		1067498	0					
ANR	1067842	ArgumentList	core		1067498	1					
ANR	1067843	Argument	core		1067498	0					
ANR	1067844	Identifier	core		1067498	0					
ANR	1067845	Argument	map -> itv . addr		1067498	1					
ANR	1067846	MemberAccess	map -> itv . addr		1067498	0					
ANR	1067847	PtrMemberAccess	map -> itv		1067498	0					
ANR	1067848	Identifier	map		1067498	0					
ANR	1067849	Identifier	itv		1067498	1					
ANR	1067850	Identifier	addr		1067498	1					
ANR	1067851	Argument	r_itv_end ( map -> itv )		1067498	2					
ANR	1067852	CallExpression	r_itv_end ( map -> itv )		1067498	0					
ANR	1067853	Callee	r_itv_end		1067498	0					
ANR	1067854	Identifier	r_itv_end		1067498	0					
ANR	1067855	ArgumentList	map -> itv		1067498	1					
ANR	1067856	Argument	map -> itv		1067498	0					
ANR	1067857	PtrMemberAccess	map -> itv		1067498	0					
ANR	1067858	Identifier	map		1067498	0					
ANR	1067859	Identifier	itv		1067498	1					
ANR	1067860	Argument	rad		1067498	3					
ANR	1067861	Identifier	rad		1067498	0					
ANR	1067862	Argument	& bytes_search_ctx		1067498	4					
ANR	1067863	UnaryOperationExpression	& bytes_search_ctx		1067498	0					
ANR	1067864	UnaryOperator	&		1067498	0					
ANR	1067865	Identifier	bytes_search_ctx		1067498	1					
ANR	1067866	ExpressionStatement	r_list_free ( list )	838:2:22462:22480	1067498	11	True				
ANR	1067867	CallExpression	r_list_free ( list )		1067498	0					
ANR	1067868	Callee	r_list_free		1067498	0					
ANR	1067869	Identifier	r_list_free		1067498	0					
ANR	1067870	ArgumentList	list		1067498	1					
ANR	1067871	Argument	list		1067498	0					
ANR	1067872	Identifier	list		1067498	0					
ANR	1067873	IfStatement	if ( useGraph || useOffset || useRefs || useHash || ( useBytes && only_func ) )		1067498	22					
ANR	1067874	Condition	useGraph || useOffset || useRefs || useHash || ( useBytes && only_func )	842:5:22511:22580	1067498	0	True				
ANR	1067875	OrExpression	useGraph || useOffset || useRefs || useHash || ( useBytes && only_func )		1067498	0		||			
ANR	1067876	Identifier	useGraph		1067498	0					
ANR	1067877	OrExpression	useOffset || useRefs || useHash || ( useBytes && only_func )		1067498	1		||			
ANR	1067878	Identifier	useOffset		1067498	0					
ANR	1067879	OrExpression	useRefs || useHash || ( useBytes && only_func )		1067498	1		||			
ANR	1067880	Identifier	useRefs		1067498	0					
ANR	1067881	OrExpression	useHash || ( useBytes && only_func )		1067498	1		||			
ANR	1067882	Identifier	useHash		1067498	0					
ANR	1067883	AndExpression	useBytes && only_func		1067498	1		&&			
ANR	1067884	Identifier	useBytes		1067498	0					
ANR	1067885	Identifier	only_func		1067498	1					
ANR	1067886	CompoundStatement		53:2:1802:1824	1067498	1					
ANR	1067887	ExpressionStatement	"eprintf ( ""[+] searching function metrics\\n"" )"	843:2:22587:22631	1067498	0	True				
ANR	1067888	CallExpression	"eprintf ( ""[+] searching function metrics\\n"" )"		1067498	0					
ANR	1067889	Callee	eprintf		1067498	0					
ANR	1067890	Identifier	eprintf		1067498	0					
ANR	1067891	ArgumentList	"""[+] searching function metrics\\n"""		1067498	1					
ANR	1067892	Argument	"""[+] searching function metrics\\n"""		1067498	0					
ANR	1067893	PrimaryExpression	"""[+] searching function metrics\\n"""		1067498	0					
ANR	1067894	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	844:2:22635:22665	1067498	1	True				
ANR	1067895	CallExpression	"r_cons_break_push ( NULL , NULL )"		1067498	0					
ANR	1067896	Callee	r_cons_break_push		1067498	0					
ANR	1067897	Identifier	r_cons_break_push		1067498	0					
ANR	1067898	ArgumentList	NULL		1067498	1					
ANR	1067899	Argument	NULL		1067498	0					
ANR	1067900	Identifier	NULL		1067498	0					
ANR	1067901	Argument	NULL		1067498	1					
ANR	1067902	Identifier	NULL		1067498	0					
ANR	1067903	IdentifierDeclStatement	int count = 0 ;	845:2:22669:22682	1067498	2	True				
ANR	1067904	IdentifierDecl	count = 0		1067498	0					
ANR	1067905	IdentifierDeclType	int		1067498	0					
ANR	1067906	Identifier	count		1067498	1					
ANR	1067907	AssignmentExpression	count = 0		1067498	2		=			
ANR	1067908	Identifier	count		1067498	0					
ANR	1067909	PrimaryExpression	0		1067498	1					
ANR	1067910	IdentifierDeclStatement	RSignSearch * ss = NULL ;	847:2:22687:22709	1067498	3	True				
ANR	1067911	IdentifierDecl	* ss = NULL		1067498	0					
ANR	1067912	IdentifierDeclType	RSignSearch *		1067498	0					
ANR	1067913	Identifier	ss		1067498	1					
ANR	1067914	AssignmentExpression	* ss = NULL		1067498	2		=			
ANR	1067915	Identifier	NULL		1067498	0					
ANR	1067916	Identifier	NULL		1067498	1					
ANR	1067917	IfStatement	if ( useBytes && only_func )		1067498	4					
ANR	1067918	Condition	useBytes && only_func	849:6:22718:22738	1067498	0	True				
ANR	1067919	AndExpression	useBytes && only_func		1067498	0		&&			
ANR	1067920	Identifier	useBytes		1067498	0					
ANR	1067921	Identifier	only_func		1067498	1					
ANR	1067922	CompoundStatement		58:3:1961:2016	1067498	1					
ANR	1067923	ExpressionStatement	ss = r_sign_search_new ( )	850:3:22746:22771	1067498	0	True				
ANR	1067924	AssignmentExpression	ss = r_sign_search_new ( )		1067498	0		=			
ANR	1067925	Identifier	ss		1067498	0					
ANR	1067926	CallExpression	r_sign_search_new ( )		1067498	1					
ANR	1067927	Callee	r_sign_search_new		1067498	0					
ANR	1067928	Identifier	r_sign_search_new		1067498	0					
ANR	1067929	ArgumentList			1067498	1					
ANR	1067930	ExpressionStatement	"ss -> search -> align = r_config_get_i ( core -> config , ""search.align"" )"	851:3:22776:22841	1067498	1	True				
ANR	1067931	AssignmentExpression	"ss -> search -> align = r_config_get_i ( core -> config , ""search.align"" )"		1067498	0		=			
ANR	1067932	PtrMemberAccess	ss -> search -> align		1067498	0					
ANR	1067933	PtrMemberAccess	ss -> search		1067498	0					
ANR	1067934	Identifier	ss		1067498	0					
ANR	1067935	Identifier	search		1067498	1					
ANR	1067936	Identifier	align		1067498	1					
ANR	1067937	CallExpression	"r_config_get_i ( core -> config , ""search.align"" )"		1067498	1					
ANR	1067938	Callee	r_config_get_i		1067498	0					
ANR	1067939	Identifier	r_config_get_i		1067498	0					
ANR	1067940	ArgumentList	core -> config		1067498	1					
ANR	1067941	Argument	core -> config		1067498	0					
ANR	1067942	PtrMemberAccess	core -> config		1067498	0					
ANR	1067943	Identifier	core		1067498	0					
ANR	1067944	Identifier	config		1067498	1					
ANR	1067945	Argument	"""search.align"""		1067498	1					
ANR	1067946	PrimaryExpression	"""search.align"""		1067498	0					
ANR	1067947	IdentifierDeclStatement	"int minsz = r_config_get_i ( core -> config , ""zign.minsz"" ) ;"	852:3:22846:22901	1067498	2	True				
ANR	1067948	IdentifierDecl	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1067498	0					
ANR	1067949	IdentifierDeclType	int		1067498	0					
ANR	1067950	Identifier	minsz		1067498	1					
ANR	1067951	AssignmentExpression	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1067498	2		=			
ANR	1067952	Identifier	minsz		1067498	0					
ANR	1067953	CallExpression	"r_config_get_i ( core -> config , ""zign.minsz"" )"		1067498	1					
ANR	1067954	Callee	r_config_get_i		1067498	0					
ANR	1067955	Identifier	r_config_get_i		1067498	0					
ANR	1067956	ArgumentList	core -> config		1067498	1					
ANR	1067957	Argument	core -> config		1067498	0					
ANR	1067958	PtrMemberAccess	core -> config		1067498	0					
ANR	1067959	Identifier	core		1067498	0					
ANR	1067960	Identifier	config		1067498	1					
ANR	1067961	Argument	"""zign.minsz"""		1067498	1					
ANR	1067962	PrimaryExpression	"""zign.minsz"""		1067498	0					
ANR	1067963	ExpressionStatement	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , & bytes_search_ctx )"	853:3:22906:22980	1067498	3	True				
ANR	1067964	CallExpression	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , & bytes_search_ctx )"		1067498	0					
ANR	1067965	Callee	r_sign_search_init		1067498	0					
ANR	1067966	Identifier	r_sign_search_init		1067498	0					
ANR	1067967	ArgumentList	core -> anal		1067498	1					
ANR	1067968	Argument	core -> anal		1067498	0					
ANR	1067969	PtrMemberAccess	core -> anal		1067498	0					
ANR	1067970	Identifier	core		1067498	0					
ANR	1067971	Identifier	anal		1067498	1					
ANR	1067972	Argument	ss		1067498	1					
ANR	1067973	Identifier	ss		1067498	0					
ANR	1067974	Argument	minsz		1067498	2					
ANR	1067975	Identifier	minsz		1067498	0					
ANR	1067976	Argument	searchHitCB		1067498	3					
ANR	1067977	Identifier	searchHitCB		1067498	0					
ANR	1067978	Argument	& bytes_search_ctx		1067498	4					
ANR	1067979	UnaryOperationExpression	& bytes_search_ctx		1067498	0					
ANR	1067980	UnaryOperator	&		1067498	0					
ANR	1067981	Identifier	bytes_search_ctx		1067498	1					
ANR	1067982	Statement	r_list_foreach	856:2:22989:23002	1067498	5	True				
ANR	1067983	Statement	(	856:17:23004:23004	1067498	6	True				
ANR	1067984	Statement	core	856:18:23005:23008	1067498	7	True				
ANR	1067985	Statement	->	856:22:23009:23010	1067498	8	True				
ANR	1067986	Statement	anal	856:24:23011:23014	1067498	9	True				
ANR	1067987	Statement	->	856:28:23015:23016	1067498	10	True				
ANR	1067988	Statement	fcns	856:30:23017:23020	1067498	11	True				
ANR	1067989	Statement	","	856:34:23021:23021	1067498	12	True				
ANR	1067990	Statement	iter	856:36:23023:23026	1067498	13	True				
ANR	1067991	Statement	","	856:40:23027:23027	1067498	14	True				
ANR	1067992	Statement	fcni	856:42:23029:23032	1067498	15	True				
ANR	1067993	Statement	)	856:46:23033:23033	1067498	16	True				
ANR	1067994	CompoundStatement		62:48:2150:2150	1067498	17					
ANR	1067995	IfStatement	if ( r_cons_is_breaked ( ) )		1067498	0					
ANR	1067996	Condition	r_cons_is_breaked ( )	857:7:23044:23063	1067498	0	True				
ANR	1067997	CallExpression	r_cons_is_breaked ( )		1067498	0					
ANR	1067998	Callee	r_cons_is_breaked		1067498	0					
ANR	1067999	Identifier	r_cons_is_breaked		1067498	0					
ANR	1068000	ArgumentList			1067498	1					
ANR	1068001	CompoundStatement		63:29:2181:2181	1067498	1					
ANR	1068002	BreakStatement	break ;	858:4:23072:23077	1067498	0	True				
ANR	1068003	IfStatement	if ( useGraph )		1067498	1					
ANR	1068004	Condition	useGraph	860:7:23091:23098	1067498	0	True				
ANR	1068005	Identifier	useGraph		1067498	0					
ANR	1068006	CompoundStatement		66:17:2216:2216	1067498	1					
ANR	1068007	ExpressionStatement	"r_sign_match_graph ( core -> anal , fcni , mincc , fcnMatchCB , & graph_match_ctx )"	861:4:23107:23181	1067498	0	True				
ANR	1068008	CallExpression	"r_sign_match_graph ( core -> anal , fcni , mincc , fcnMatchCB , & graph_match_ctx )"		1067498	0					
ANR	1068009	Callee	r_sign_match_graph		1067498	0					
ANR	1068010	Identifier	r_sign_match_graph		1067498	0					
ANR	1068011	ArgumentList	core -> anal		1067498	1					
ANR	1068012	Argument	core -> anal		1067498	0					
ANR	1068013	PtrMemberAccess	core -> anal		1067498	0					
ANR	1068014	Identifier	core		1067498	0					
ANR	1068015	Identifier	anal		1067498	1					
ANR	1068016	Argument	fcni		1067498	1					
ANR	1068017	Identifier	fcni		1067498	0					
ANR	1068018	Argument	mincc		1067498	2					
ANR	1068019	Identifier	mincc		1067498	0					
ANR	1068020	Argument	fcnMatchCB		1067498	3					
ANR	1068021	Identifier	fcnMatchCB		1067498	0					
ANR	1068022	Argument	& graph_match_ctx		1067498	4					
ANR	1068023	UnaryOperationExpression	& graph_match_ctx		1067498	0					
ANR	1068024	UnaryOperator	&		1067498	0					
ANR	1068025	Identifier	graph_match_ctx		1067498	1					
ANR	1068026	IfStatement	if ( useOffset )		1067498	2					
ANR	1068027	Condition	useOffset	863:7:23195:23203	1067498	0	True				
ANR	1068028	Identifier	useOffset		1067498	0					
ANR	1068029	CompoundStatement		69:18:2321:2321	1067498	1					
ANR	1068030	ExpressionStatement	"r_sign_match_addr ( core -> anal , fcni , fcnMatchCB , & offset_match_ctx )"	864:4:23212:23279	1067498	0	True				
ANR	1068031	CallExpression	"r_sign_match_addr ( core -> anal , fcni , fcnMatchCB , & offset_match_ctx )"		1067498	0					
ANR	1068032	Callee	r_sign_match_addr		1067498	0					
ANR	1068033	Identifier	r_sign_match_addr		1067498	0					
ANR	1068034	ArgumentList	core -> anal		1067498	1					
ANR	1068035	Argument	core -> anal		1067498	0					
ANR	1068036	PtrMemberAccess	core -> anal		1067498	0					
ANR	1068037	Identifier	core		1067498	0					
ANR	1068038	Identifier	anal		1067498	1					
ANR	1068039	Argument	fcni		1067498	1					
ANR	1068040	Identifier	fcni		1067498	0					
ANR	1068041	Argument	fcnMatchCB		1067498	2					
ANR	1068042	Identifier	fcnMatchCB		1067498	0					
ANR	1068043	Argument	& offset_match_ctx		1067498	3					
ANR	1068044	UnaryOperationExpression	& offset_match_ctx		1067498	0					
ANR	1068045	UnaryOperator	&		1067498	0					
ANR	1068046	Identifier	offset_match_ctx		1067498	1					
ANR	1068047	IfStatement	if ( useRefs )		1067498	3					
ANR	1068048	Condition	useRefs	866:7:23293:23299	1067498	0	True				
ANR	1068049	Identifier	useRefs		1067498	0					
ANR	1068050	CompoundStatement		72:16:2417:2417	1067498	1					
ANR	1068051	ExpressionStatement	"r_sign_match_refs ( core -> anal , fcni , fcnMatchCB , & refs_match_ctx )"	867:4:23308:23373	1067498	0	True				
ANR	1068052	CallExpression	"r_sign_match_refs ( core -> anal , fcni , fcnMatchCB , & refs_match_ctx )"		1067498	0					
ANR	1068053	Callee	r_sign_match_refs		1067498	0					
ANR	1068054	Identifier	r_sign_match_refs		1067498	0					
ANR	1068055	ArgumentList	core -> anal		1067498	1					
ANR	1068056	Argument	core -> anal		1067498	0					
ANR	1068057	PtrMemberAccess	core -> anal		1067498	0					
ANR	1068058	Identifier	core		1067498	0					
ANR	1068059	Identifier	anal		1067498	1					
ANR	1068060	Argument	fcni		1067498	1					
ANR	1068061	Identifier	fcni		1067498	0					
ANR	1068062	Argument	fcnMatchCB		1067498	2					
ANR	1068063	Identifier	fcnMatchCB		1067498	0					
ANR	1068064	Argument	& refs_match_ctx		1067498	3					
ANR	1068065	UnaryOperationExpression	& refs_match_ctx		1067498	0					
ANR	1068066	UnaryOperator	&		1067498	0					
ANR	1068067	Identifier	refs_match_ctx		1067498	1					
ANR	1068068	IfStatement	if ( useHash )		1067498	4					
ANR	1068069	Condition	useHash	869:7:23387:23393	1067498	0	True				
ANR	1068070	Identifier	useHash		1067498	0					
ANR	1068071	CompoundStatement		75:16:2511:2511	1067498	1					
ANR	1068072	ExpressionStatement	"r_sign_match_hash ( core -> anal , fcni , fcnMatchCB , & hash_match_ctx )"	870:4:23402:23467	1067498	0	True				
ANR	1068073	CallExpression	"r_sign_match_hash ( core -> anal , fcni , fcnMatchCB , & hash_match_ctx )"		1067498	0					
ANR	1068074	Callee	r_sign_match_hash		1067498	0					
ANR	1068075	Identifier	r_sign_match_hash		1067498	0					
ANR	1068076	ArgumentList	core -> anal		1067498	1					
ANR	1068077	Argument	core -> anal		1067498	0					
ANR	1068078	PtrMemberAccess	core -> anal		1067498	0					
ANR	1068079	Identifier	core		1067498	0					
ANR	1068080	Identifier	anal		1067498	1					
ANR	1068081	Argument	fcni		1067498	1					
ANR	1068082	Identifier	fcni		1067498	0					
ANR	1068083	Argument	fcnMatchCB		1067498	2					
ANR	1068084	Identifier	fcnMatchCB		1067498	0					
ANR	1068085	Argument	& hash_match_ctx		1067498	3					
ANR	1068086	UnaryOperationExpression	& hash_match_ctx		1067498	0					
ANR	1068087	UnaryOperator	&		1067498	0					
ANR	1068088	Identifier	hash_match_ctx		1067498	1					
ANR	1068089	IfStatement	if ( useBytes && only_func )		1067498	5					
ANR	1068090	Condition	useBytes && only_func	872:7:23481:23501	1067498	0	True				
ANR	1068091	AndExpression	useBytes && only_func		1067498	0		&&			
ANR	1068092	Identifier	useBytes		1067498	0					
ANR	1068093	Identifier	only_func		1067498	1					
ANR	1068094	CompoundStatement		81:4:2786:2839	1067498	1					
ANR	1068095	ExpressionStatement	"eprintf ( ""Matching func %d / %d (hits %d)\\n"" , count , r_list_length ( core -> anal -> fcns ) , bytes_search_ctx . count )"	873:4:23510:23620	1067498	0	True				
ANR	1068096	CallExpression	"eprintf ( ""Matching func %d / %d (hits %d)\\n"" , count , r_list_length ( core -> anal -> fcns ) , bytes_search_ctx . count )"		1067498	0					
ANR	1068097	Callee	eprintf		1067498	0					
ANR	1068098	Identifier	eprintf		1067498	0					
ANR	1068099	ArgumentList	"""Matching func %d / %d (hits %d)\\n"""		1067498	1					
ANR	1068100	Argument	"""Matching func %d / %d (hits %d)\\n"""		1067498	0					
ANR	1068101	PrimaryExpression	"""Matching func %d / %d (hits %d)\\n"""		1067498	0					
ANR	1068102	Argument	count		1067498	1					
ANR	1068103	Identifier	count		1067498	0					
ANR	1068104	Argument	r_list_length ( core -> anal -> fcns )		1067498	2					
ANR	1068105	CallExpression	r_list_length ( core -> anal -> fcns )		1067498	0					
ANR	1068106	Callee	r_list_length		1067498	0					
ANR	1068107	Identifier	r_list_length		1067498	0					
ANR	1068108	ArgumentList	core -> anal -> fcns		1067498	1					
ANR	1068109	Argument	core -> anal -> fcns		1067498	0					
ANR	1068110	PtrMemberAccess	core -> anal -> fcns		1067498	0					
ANR	1068111	PtrMemberAccess	core -> anal		1067498	0					
ANR	1068112	Identifier	core		1067498	0					
ANR	1068113	Identifier	anal		1067498	1					
ANR	1068114	Identifier	fcns		1067498	1					
ANR	1068115	Argument	bytes_search_ctx . count		1067498	3					
ANR	1068116	MemberAccess	bytes_search_ctx . count		1067498	0					
ANR	1068117	Identifier	bytes_search_ctx		1067498	0					
ANR	1068118	Identifier	count		1067498	1					
ANR	1068119	IdentifierDeclStatement	int fcnlen = r_anal_fcn_realsize ( fcni ) ;	874:4:23626:23665	1067498	1	True				
ANR	1068120	IdentifierDecl	fcnlen = r_anal_fcn_realsize ( fcni )		1067498	0					
ANR	1068121	IdentifierDeclType	int		1067498	0					
ANR	1068122	Identifier	fcnlen		1067498	1					
ANR	1068123	AssignmentExpression	fcnlen = r_anal_fcn_realsize ( fcni )		1067498	2		=			
ANR	1068124	Identifier	fcnlen		1067498	0					
ANR	1068125	CallExpression	r_anal_fcn_realsize ( fcni )		1067498	1					
ANR	1068126	Callee	r_anal_fcn_realsize		1067498	0					
ANR	1068127	Identifier	r_anal_fcn_realsize		1067498	0					
ANR	1068128	ArgumentList	fcni		1067498	1					
ANR	1068129	Argument	fcni		1067498	0					
ANR	1068130	Identifier	fcni		1067498	0					
ANR	1068131	IdentifierDeclStatement	"int len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz ) ;"	875:4:23671:23724	1067498	2	True				
ANR	1068132	IdentifierDecl	"len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1067498	0					
ANR	1068133	IdentifierDeclType	int		1067498	0					
ANR	1068134	Identifier	len		1067498	1					
ANR	1068135	AssignmentExpression	"len = R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1067498	2		=			
ANR	1068136	Identifier	len		1067498	0					
ANR	1068137	CallExpression	"R_MIN ( core -> io -> addrbytes * fcnlen , maxsz )"		1067498	1					
ANR	1068138	Callee	R_MIN		1067498	0					
ANR	1068139	Identifier	R_MIN		1067498	0					
ANR	1068140	ArgumentList	core -> io -> addrbytes * fcnlen		1067498	1					
ANR	1068141	Argument	core -> io -> addrbytes * fcnlen		1067498	0					
ANR	1068142	MultiplicativeExpression	core -> io -> addrbytes * fcnlen		1067498	0		*			
ANR	1068143	PtrMemberAccess	core -> io -> addrbytes		1067498	0					
ANR	1068144	PtrMemberAccess	core -> io		1067498	0					
ANR	1068145	Identifier	core		1067498	0					
ANR	1068146	Identifier	io		1067498	1					
ANR	1068147	Identifier	addrbytes		1067498	1					
ANR	1068148	Identifier	fcnlen		1067498	1					
ANR	1068149	Argument	maxsz		1067498	1					
ANR	1068150	Identifier	maxsz		1067498	0					
ANR	1068151	ExpressionStatement	"retval &= searchRange2 ( core , ss , fcni -> addr , fcni -> addr + len , rad , & bytes_search_ctx )"	876:4:23730:23817	1067498	3	True				
ANR	1068152	AssignmentExpression	"retval &= searchRange2 ( core , ss , fcni -> addr , fcni -> addr + len , rad , & bytes_search_ctx )"		1067498	0		&=			
ANR	1068153	Identifier	retval		1067498	0					
ANR	1068154	CallExpression	"searchRange2 ( core , ss , fcni -> addr , fcni -> addr + len , rad , & bytes_search_ctx )"		1067498	1					
ANR	1068155	Callee	searchRange2		1067498	0					
ANR	1068156	Identifier	searchRange2		1067498	0					
ANR	1068157	ArgumentList	core		1067498	1					
ANR	1068158	Argument	core		1067498	0					
ANR	1068159	Identifier	core		1067498	0					
ANR	1068160	Argument	ss		1067498	1					
ANR	1068161	Identifier	ss		1067498	0					
ANR	1068162	Argument	fcni -> addr		1067498	2					
ANR	1068163	PtrMemberAccess	fcni -> addr		1067498	0					
ANR	1068164	Identifier	fcni		1067498	0					
ANR	1068165	Identifier	addr		1067498	1					
ANR	1068166	Argument	fcni -> addr + len		1067498	3					
ANR	1068167	AdditiveExpression	fcni -> addr + len		1067498	0		+			
ANR	1068168	PtrMemberAccess	fcni -> addr		1067498	0					
ANR	1068169	Identifier	fcni		1067498	0					
ANR	1068170	Identifier	addr		1067498	1					
ANR	1068171	Identifier	len		1067498	1					
ANR	1068172	Argument	rad		1067498	4					
ANR	1068173	Identifier	rad		1067498	0					
ANR	1068174	Argument	& bytes_search_ctx		1067498	5					
ANR	1068175	UnaryOperationExpression	& bytes_search_ctx		1067498	0					
ANR	1068176	UnaryOperator	&		1067498	0					
ANR	1068177	Identifier	bytes_search_ctx		1067498	1					
ANR	1068178	ExpressionStatement	count ++	878:3:23827:23835	1067498	6	True				
ANR	1068179	PostIncDecOperationExpression	count ++		1067498	0					
ANR	1068180	Identifier	count		1067498	0					
ANR	1068181	IncDec	++		1067498	1					
ANR	1068182	Label	TODO :	880:0:23843:23847	1067498	7	True				
ANR	1068183	Identifier	TODO		1067498	0					
ANR	1068184	Statement	add	880:6:23849:23851	1067498	8	True				
ANR	1068185	Statement	useXRefs	880:10:23853:23860	1067498	9	True				
ANR	1068186	Statement	","	880:18:23861:23861	1067498	10	True				
ANR	1068187	Statement	useName	880:20:23863:23869	1067498	11	True				
ANR	1068188	ExpressionStatement	r_cons_break_pop ( )	883:2:23884:23903	1067498	18	True				
ANR	1068189	CallExpression	r_cons_break_pop ( )		1067498	0					
ANR	1068190	Callee	r_cons_break_pop		1067498	0					
ANR	1068191	Identifier	r_cons_break_pop		1067498	0					
ANR	1068192	ArgumentList			1067498	1					
ANR	1068193	ExpressionStatement	r_sign_search_free ( ss )	884:2:23907:23930	1067498	19	True				
ANR	1068194	CallExpression	r_sign_search_free ( ss )		1067498	0					
ANR	1068195	Callee	r_sign_search_free		1067498	0					
ANR	1068196	Identifier	r_sign_search_free		1067498	0					
ANR	1068197	ArgumentList	ss		1067498	1					
ANR	1068198	Argument	ss		1067498	0					
ANR	1068199	Identifier	ss		1067498	0					
ANR	1068200	IfStatement	if ( rad )		1067498	23					
ANR	1068201	Condition	rad	887:5:23941:23943	1067498	0	True				
ANR	1068202	Identifier	rad		1067498	0					
ANR	1068203	CompoundStatement		93:10:3061:3061	1067498	1					
ANR	1068204	ExpressionStatement	"r_cons_printf ( ""fs-\\n"" )"	888:2:23950:23973	1067498	0	True				
ANR	1068205	CallExpression	"r_cons_printf ( ""fs-\\n"" )"		1067498	0					
ANR	1068206	Callee	r_cons_printf		1067498	0					
ANR	1068207	Identifier	r_cons_printf		1067498	0					
ANR	1068208	ArgumentList	"""fs-\\n"""		1067498	1					
ANR	1068209	Argument	"""fs-\\n"""		1067498	0					
ANR	1068210	PrimaryExpression	"""fs-\\n"""		1067498	0					
ANR	1068211	ElseStatement	else		1067498	0					
ANR	1068212	CompoundStatement		95:8:3098:3098	1067498	0					
ANR	1068213	IfStatement	if ( ! r_flag_space_pop ( core -> flags ) )		1067498	0					
ANR	1068214	Condition	! r_flag_space_pop ( core -> flags )	890:6:23991:24021	1067498	0	True				
ANR	1068215	UnaryOperationExpression	! r_flag_space_pop ( core -> flags )		1067498	0					
ANR	1068216	UnaryOperator	!		1067498	0					
ANR	1068217	CallExpression	r_flag_space_pop ( core -> flags )		1067498	1					
ANR	1068218	Callee	r_flag_space_pop		1067498	0					
ANR	1068219	Identifier	r_flag_space_pop		1067498	0					
ANR	1068220	ArgumentList	core -> flags		1067498	1					
ANR	1068221	Argument	core -> flags		1067498	0					
ANR	1068222	PtrMemberAccess	core -> flags		1067498	0					
ANR	1068223	Identifier	core		1067498	0					
ANR	1068224	Identifier	flags		1067498	1					
ANR	1068225	CompoundStatement		96:39:3139:3139	1067498	1					
ANR	1068226	ExpressionStatement	"eprintf ( ""error: cannot restore flagspace\\n"" )"	891:3:24029:24074	1067498	0	True				
ANR	1068227	CallExpression	"eprintf ( ""error: cannot restore flagspace\\n"" )"		1067498	0					
ANR	1068228	Callee	eprintf		1067498	0					
ANR	1068229	Identifier	eprintf		1067498	0					
ANR	1068230	ArgumentList	"""error: cannot restore flagspace\\n"""		1067498	1					
ANR	1068231	Argument	"""error: cannot restore flagspace\\n"""		1067498	0					
ANR	1068232	PrimaryExpression	"""error: cannot restore flagspace\\n"""		1067498	0					
ANR	1068233	ReturnStatement	return false ;	892:3:24079:24091	1067498	1	True				
ANR	1068234	Identifier	false		1067498	0					
ANR	1068235	ExpressionStatement	hits = bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count	896:1:24102:24228	1067498	24	True				
ANR	1068236	AssignmentExpression	hits = bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1067498	0		=			
ANR	1068237	Identifier	hits		1067498	0					
ANR	1068238	AdditiveExpression	bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1067498	1		+			
ANR	1068239	MemberAccess	bytes_search_ctx . count		1067498	0					
ANR	1068240	Identifier	bytes_search_ctx		1067498	0					
ANR	1068241	Identifier	count		1067498	1					
ANR	1068242	AdditiveExpression	graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1067498	1		+			
ANR	1068243	MemberAccess	graph_match_ctx . count		1067498	0					
ANR	1068244	Identifier	graph_match_ctx		1067498	0					
ANR	1068245	Identifier	count		1067498	1					
ANR	1068246	AdditiveExpression	offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1067498	1		+			
ANR	1068247	MemberAccess	offset_match_ctx . count		1067498	0					
ANR	1068248	Identifier	offset_match_ctx		1067498	0					
ANR	1068249	Identifier	count		1067498	1					
ANR	1068250	AdditiveExpression	refs_match_ctx . count + hash_match_ctx . count		1067498	1		+			
ANR	1068251	MemberAccess	refs_match_ctx . count		1067498	0					
ANR	1068252	Identifier	refs_match_ctx		1067498	0					
ANR	1068253	Identifier	count		1067498	1					
ANR	1068254	MemberAccess	hash_match_ctx . count		1067498	1					
ANR	1068255	Identifier	hash_match_ctx		1067498	0					
ANR	1068256	Identifier	count		1067498	1					
ANR	1068257	ExpressionStatement	"eprintf ( ""hits: %d\\n"" , hits )"	898:1:24231:24259	1067498	25	True				
ANR	1068258	CallExpression	"eprintf ( ""hits: %d\\n"" , hits )"		1067498	0					
ANR	1068259	Callee	eprintf		1067498	0					
ANR	1068260	Identifier	eprintf		1067498	0					
ANR	1068261	ArgumentList	"""hits: %d\\n"""		1067498	1					
ANR	1068262	Argument	"""hits: %d\\n"""		1067498	0					
ANR	1068263	PrimaryExpression	"""hits: %d\\n"""		1067498	0					
ANR	1068264	Argument	hits		1067498	1					
ANR	1068265	Identifier	hits		1067498	0					
ANR	1068266	ReturnStatement	return retval ;	900:1:24263:24276	1067498	26	True				
ANR	1068267	Identifier	retval		1067498	0					
ANR	1068268	ReturnType	static bool		1067498	1					
ANR	1068269	Identifier	search		1067498	2					
ANR	1068270	ParameterList	"RCore * core , bool rad , bool only_func"		1067498	3					
ANR	1068271	Parameter	RCore * core	795:19:20845:20855	1067498	0	True				
ANR	1068272	ParameterType	RCore *		1067498	0					
ANR	1068273	Identifier	core		1067498	1					
ANR	1068274	Parameter	bool rad	795:32:20858:20865	1067498	1	True				
ANR	1068275	ParameterType	bool		1067498	0					
ANR	1068276	Identifier	rad		1067498	1					
ANR	1068277	Parameter	bool only_func	795:42:20868:20881	1067498	2	True				
ANR	1068278	ParameterType	bool		1067498	0					
ANR	1068279	Identifier	only_func		1067498	1					
ANR	1068280	CFGEntryNode	ENTRY		1067498		True				
ANR	1068281	CFGExitNode	EXIT		1067498		True				
ANR	1068282	CFGErrorNode	ERROR		1067498		True				
ANR	1068283	Symbol	fcnMatchCB		1067498						
ANR	1068284	Symbol	mincc		1067498						
ANR	1068285	Symbol	only_func		1067498						
ANR	1068286	Symbol	* ss		1067498						
ANR	1068287	Symbol	* map		1067498						
ANR	1068288	Symbol	minsz		1067498						
ANR	1068289	Symbol	bytes_search_ctx . count		1067498						
ANR	1068290	Symbol	mode		1067498						
ANR	1068291	Symbol	fcnlen		1067498						
ANR	1068292	Symbol	useHash		1067498						
ANR	1068293	Symbol	rad		1067498						
ANR	1068294	Symbol	len		1067498						
ANR	1068295	Symbol	fcni		1067498						
ANR	1068296	Symbol	r_sign_search_new		1067498						
ANR	1068297	Symbol	& hash_match_ctx		1067498						
ANR	1068298	Symbol	* ss -> search		1067498						
ANR	1068299	Symbol	& graph_match_ctx		1067498						
ANR	1068300	Symbol	NULL		1067498						
ANR	1068301	Symbol	useOffset		1067498						
ANR	1068302	Symbol	count		1067498						
ANR	1068303	Symbol	iter		1067498						
ANR	1068304	Symbol	list		1067498						
ANR	1068305	Symbol	core -> anal -> fcns		1067498						
ANR	1068306	Symbol	fcni -> addr		1067498						
ANR	1068307	Symbol	retval		1067498						
ANR	1068308	Symbol	useBytes		1067498						
ANR	1068309	Symbol	core		1067498						
ANR	1068310	Symbol	searchRange2		1067498						
ANR	1068311	Symbol	refs_match_ctx		1067498						
ANR	1068312	Symbol	r_flag_space_pop		1067498						
ANR	1068313	Symbol	r_config_get_i		1067498						
ANR	1068314	Symbol	true		1067498						
ANR	1068315	Symbol	ss -> search		1067498						
ANR	1068316	Symbol	map -> itv		1067498						
ANR	1068317	Symbol	ss -> search -> align		1067498						
ANR	1068318	Symbol	& refs_match_ctx		1067498						
ANR	1068319	Symbol	r_config_get		1067498						
ANR	1068320	Symbol	* core		1067498						
ANR	1068321	Symbol	useGraph		1067498						
ANR	1068322	Symbol	r_flag_space_push		1067498						
ANR	1068323	Symbol	useRefs		1067498						
ANR	1068324	Symbol	graph_match_ctx		1067498						
ANR	1068325	Symbol	core -> anal		1067498						
ANR	1068326	Symbol	* * ss		1067498						
ANR	1068327	Symbol	r_anal_fcn_realsize		1067498						
ANR	1068328	Symbol	r_cons_is_breaked		1067498						
ANR	1068329	Symbol	core -> io		1067498						
ANR	1068330	Symbol	map -> itv . addr		1067498						
ANR	1068331	Symbol	graph_match_ctx . count		1067498						
ANR	1068332	Symbol	map		1067498						
ANR	1068333	Symbol	offset_match_ctx . count		1067498						
ANR	1068334	Symbol	* * core		1067498						
ANR	1068335	Symbol	core -> config		1067498						
ANR	1068336	Symbol	ss		1067498						
ANR	1068337	Symbol	hash_match_ctx . count		1067498						
ANR	1068338	Symbol	& offset_match_ctx		1067498						
ANR	1068339	Symbol	maxsz		1067498						
ANR	1068340	Symbol	& bytes_search_ctx		1067498						
ANR	1068341	Symbol	hash_match_ctx		1067498						
ANR	1068342	Symbol	false		1067498						
ANR	1068343	Symbol	core -> io -> addrbytes		1067498						
ANR	1068344	Symbol	searchRange		1067498						
ANR	1068345	Symbol	core -> flags		1067498						
ANR	1068346	Symbol	R_MIN		1067498						
ANR	1068347	Symbol	r_itv_end		1067498						
ANR	1068348	Symbol	hits		1067498						
ANR	1068349	Symbol	bytes_search_ctx		1067498						
ANR	1068350	Symbol	zign_prefix		1067498						
ANR	1068351	Symbol	* fcni		1067498						
ANR	1068352	Symbol	* core -> io		1067498						
ANR	1068353	Symbol	* core -> anal		1067498						
ANR	1068354	Symbol	searchHitCB		1067498						
ANR	1068355	Symbol	refs_match_ctx . count		1067498						
ANR	1068356	Symbol	r_core_get_boundaries_prot		1067498						
ANR	1068357	Symbol	offset_match_ctx		1067498						
ANR	1068358	Symbol	r_list_length		1067498						
ANR	1068359	Function	cmdCompare	903:0:24281:25529							
ANR	1068360	FunctionDef	"cmdCompare (void * data , const char * input)"		1068359	0					
ANR	1068361	CompoundStatement		903:53:24334:25529	1068359	0					
ANR	1068362	IdentifierDeclStatement	int result = true ;	904:1:24337:24354	1068359	0	True				
ANR	1068363	IdentifierDecl	result = true		1068359	0					
ANR	1068364	IdentifierDeclType	int		1068359	0					
ANR	1068365	Identifier	result		1068359	1					
ANR	1068366	AssignmentExpression	result = true		1068359	2		=			
ANR	1068367	Identifier	true		1068359	0					
ANR	1068368	Identifier	true		1068359	1					
ANR	1068369	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	905:1:24357:24385	1068359	1	True				
ANR	1068370	IdentifierDecl	* core = ( RCore * ) data		1068359	0					
ANR	1068371	IdentifierDeclType	RCore *		1068359	0					
ANR	1068372	Identifier	core		1068359	1					
ANR	1068373	AssignmentExpression	* core = ( RCore * ) data		1068359	2		=			
ANR	1068374	Identifier	core		1068359	0					
ANR	1068375	CastExpression	( RCore * ) data		1068359	1					
ANR	1068376	CastTarget	RCore *		1068359	0					
ANR	1068377	Identifier	data		1068359	1					
ANR	1068378	IdentifierDeclStatement	"const char * raw_bytes_thresh = r_config_get ( core -> config , ""zign.diff.bthresh"" ) ;"	906:1:24388:24467	1068359	2	True				
ANR	1068379	IdentifierDecl	"* raw_bytes_thresh = r_config_get ( core -> config , ""zign.diff.bthresh"" )"		1068359	0					
ANR	1068380	IdentifierDeclType	const char *		1068359	0					
ANR	1068381	Identifier	raw_bytes_thresh		1068359	1					
ANR	1068382	AssignmentExpression	"* raw_bytes_thresh = r_config_get ( core -> config , ""zign.diff.bthresh"" )"		1068359	2		=			
ANR	1068383	Identifier	raw_bytes_thresh		1068359	0					
ANR	1068384	CallExpression	"r_config_get ( core -> config , ""zign.diff.bthresh"" )"		1068359	1					
ANR	1068385	Callee	r_config_get		1068359	0					
ANR	1068386	Identifier	r_config_get		1068359	0					
ANR	1068387	ArgumentList	core -> config		1068359	1					
ANR	1068388	Argument	core -> config		1068359	0					
ANR	1068389	PtrMemberAccess	core -> config		1068359	0					
ANR	1068390	Identifier	core		1068359	0					
ANR	1068391	Identifier	config		1068359	1					
ANR	1068392	Argument	"""zign.diff.bthresh"""		1068359	1					
ANR	1068393	PrimaryExpression	"""zign.diff.bthresh"""		1068359	0					
ANR	1068394	IdentifierDeclStatement	"const char * raw_graph_thresh = r_config_get ( core -> config , ""zign.diff.gthresh"" ) ;"	907:1:24470:24549	1068359	3	True				
ANR	1068395	IdentifierDecl	"* raw_graph_thresh = r_config_get ( core -> config , ""zign.diff.gthresh"" )"		1068359	0					
ANR	1068396	IdentifierDeclType	const char *		1068359	0					
ANR	1068397	Identifier	raw_graph_thresh		1068359	1					
ANR	1068398	AssignmentExpression	"* raw_graph_thresh = r_config_get ( core -> config , ""zign.diff.gthresh"" )"		1068359	2		=			
ANR	1068399	Identifier	raw_graph_thresh		1068359	0					
ANR	1068400	CallExpression	"r_config_get ( core -> config , ""zign.diff.gthresh"" )"		1068359	1					
ANR	1068401	Callee	r_config_get		1068359	0					
ANR	1068402	Identifier	r_config_get		1068359	0					
ANR	1068403	ArgumentList	core -> config		1068359	1					
ANR	1068404	Argument	core -> config		1068359	0					
ANR	1068405	PtrMemberAccess	core -> config		1068359	0					
ANR	1068406	Identifier	core		1068359	0					
ANR	1068407	Identifier	config		1068359	1					
ANR	1068408	Argument	"""zign.diff.gthresh"""		1068359	1					
ANR	1068409	PrimaryExpression	"""zign.diff.gthresh"""		1068359	0					
ANR	1068410	IdentifierDeclStatement	"RSignOptions * options = r_sign_options_new ( raw_bytes_thresh , raw_graph_thresh ) ;"	908:1:24552:24631	1068359	4	True				
ANR	1068411	IdentifierDecl	"* options = r_sign_options_new ( raw_bytes_thresh , raw_graph_thresh )"		1068359	0					
ANR	1068412	IdentifierDeclType	RSignOptions *		1068359	0					
ANR	1068413	Identifier	options		1068359	1					
ANR	1068414	AssignmentExpression	"* options = r_sign_options_new ( raw_bytes_thresh , raw_graph_thresh )"		1068359	2		=			
ANR	1068415	Identifier	options		1068359	0					
ANR	1068416	CallExpression	"r_sign_options_new ( raw_bytes_thresh , raw_graph_thresh )"		1068359	1					
ANR	1068417	Callee	r_sign_options_new		1068359	0					
ANR	1068418	Identifier	r_sign_options_new		1068359	0					
ANR	1068419	ArgumentList	raw_bytes_thresh		1068359	1					
ANR	1068420	Argument	raw_bytes_thresh		1068359	0					
ANR	1068421	Identifier	raw_bytes_thresh		1068359	0					
ANR	1068422	Argument	raw_graph_thresh		1068359	1					
ANR	1068423	Identifier	raw_graph_thresh		1068359	0					
ANR	1068424	SwitchStatement	switch ( * input )		1068359	5					
ANR	1068425	Condition	* input	910:9:24643:24648	1068359	0	True				
ANR	1068426	UnaryOperationExpression	* input		1068359	0					
ANR	1068427	UnaryOperator	*		1068359	0					
ANR	1068428	Identifier	input		1068359	1					
ANR	1068429	CompoundStatement		8:17:316:316	1068359	1					
ANR	1068430	Label	case ' ' :	911:1:24654:24662	1068359	0	True				
ANR	1068431	IfStatement	if ( ! input [ 1 ] )		1068359	1					
ANR	1068432	Condition	! input [ 1 ]	912:6:24670:24678	1068359	0	True				
ANR	1068433	UnaryOperationExpression	! input [ 1 ]		1068359	0					
ANR	1068434	UnaryOperator	!		1068359	0					
ANR	1068435	ArrayIndexing	input [ 1 ]		1068359	1					
ANR	1068436	Identifier	input		1068359	0					
ANR	1068437	PrimaryExpression	1		1068359	1					
ANR	1068438	CompoundStatement		10:17:346:346	1068359	1					
ANR	1068439	ExpressionStatement	"eprintf ( ""usage: zc other_space\\n"" )"	913:3:24686:24721	1068359	0	True				
ANR	1068440	CallExpression	"eprintf ( ""usage: zc other_space\\n"" )"		1068359	0					
ANR	1068441	Callee	eprintf		1068359	0					
ANR	1068442	Identifier	eprintf		1068359	0					
ANR	1068443	ArgumentList	"""usage: zc other_space\\n"""		1068359	1					
ANR	1068444	Argument	"""usage: zc other_space\\n"""		1068359	0					
ANR	1068445	PrimaryExpression	"""usage: zc other_space\\n"""		1068359	0					
ANR	1068446	ExpressionStatement	result = false	914:3:24726:24740	1068359	1	True				
ANR	1068447	AssignmentExpression	result = false		1068359	0		=			
ANR	1068448	Identifier	result		1068359	0					
ANR	1068449	Identifier	false		1068359	1					
ANR	1068450	BreakStatement	break ;	915:3:24745:24750	1068359	2	True				
ANR	1068451	ExpressionStatement	"result = r_sign_diff ( core -> anal , options , input + 1 )"	917:2:24758:24811	1068359	2	True				
ANR	1068452	AssignmentExpression	"result = r_sign_diff ( core -> anal , options , input + 1 )"		1068359	0		=			
ANR	1068453	Identifier	result		1068359	0					
ANR	1068454	CallExpression	"r_sign_diff ( core -> anal , options , input + 1 )"		1068359	1					
ANR	1068455	Callee	r_sign_diff		1068359	0					
ANR	1068456	Identifier	r_sign_diff		1068359	0					
ANR	1068457	ArgumentList	core -> anal		1068359	1					
ANR	1068458	Argument	core -> anal		1068359	0					
ANR	1068459	PtrMemberAccess	core -> anal		1068359	0					
ANR	1068460	Identifier	core		1068359	0					
ANR	1068461	Identifier	anal		1068359	1					
ANR	1068462	Argument	options		1068359	1					
ANR	1068463	Identifier	options		1068359	0					
ANR	1068464	Argument	input + 1		1068359	2					
ANR	1068465	AdditiveExpression	input + 1		1068359	0		+			
ANR	1068466	Identifier	input		1068359	0					
ANR	1068467	PrimaryExpression	1		1068359	1					
ANR	1068468	BreakStatement	break ;	918:2:24815:24820	1068359	3	True				
ANR	1068469	Label	case 'n' :	919:1:24823:24831	1068359	4	True				
ANR	1068470	SwitchStatement	switch ( input [ 1 ] )		1068359	5					
ANR	1068471	Condition	input [ 1 ]	920:10:24843:24850	1068359	0	True				
ANR	1068472	ArrayIndexing	input [ 1 ]		1068359	0					
ANR	1068473	Identifier	input		1068359	0					
ANR	1068474	PrimaryExpression	1		1068359	1					
ANR	1068475	CompoundStatement		18:20:518:518	1068359	1					
ANR	1068476	Label	case ' ' :	921:2:24857:24865	1068359	0	True				
ANR	1068477	IfStatement	if ( ! input [ 2 ] )		1068359	1					
ANR	1068478	Condition	! input [ 2 ]	922:7:24874:24882	1068359	0	True				
ANR	1068479	UnaryOperationExpression	! input [ 2 ]		1068359	0					
ANR	1068480	UnaryOperator	!		1068359	0					
ANR	1068481	ArrayIndexing	input [ 2 ]		1068359	1					
ANR	1068482	Identifier	input		1068359	0					
ANR	1068483	PrimaryExpression	2		1068359	1					
ANR	1068484	CompoundStatement		20:18:550:550	1068359	1					
ANR	1068485	ExpressionStatement	"eprintf ( ""usage: zcn other_space\\n"" )"	923:4:24891:24927	1068359	0	True				
ANR	1068486	CallExpression	"eprintf ( ""usage: zcn other_space\\n"" )"		1068359	0					
ANR	1068487	Callee	eprintf		1068359	0					
ANR	1068488	Identifier	eprintf		1068359	0					
ANR	1068489	ArgumentList	"""usage: zcn other_space\\n"""		1068359	1					
ANR	1068490	Argument	"""usage: zcn other_space\\n"""		1068359	0					
ANR	1068491	PrimaryExpression	"""usage: zcn other_space\\n"""		1068359	0					
ANR	1068492	ExpressionStatement	result = false	924:4:24933:24947	1068359	1	True				
ANR	1068493	AssignmentExpression	result = false		1068359	0		=			
ANR	1068494	Identifier	result		1068359	0					
ANR	1068495	Identifier	false		1068359	1					
ANR	1068496	BreakStatement	break ;	925:4:24953:24958	1068359	2	True				
ANR	1068497	ExpressionStatement	"result = r_sign_diff_by_name ( core -> anal , options , input + 2 , false )"	927:3:24968:25036	1068359	2	True				
ANR	1068498	AssignmentExpression	"result = r_sign_diff_by_name ( core -> anal , options , input + 2 , false )"		1068359	0		=			
ANR	1068499	Identifier	result		1068359	0					
ANR	1068500	CallExpression	"r_sign_diff_by_name ( core -> anal , options , input + 2 , false )"		1068359	1					
ANR	1068501	Callee	r_sign_diff_by_name		1068359	0					
ANR	1068502	Identifier	r_sign_diff_by_name		1068359	0					
ANR	1068503	ArgumentList	core -> anal		1068359	1					
ANR	1068504	Argument	core -> anal		1068359	0					
ANR	1068505	PtrMemberAccess	core -> anal		1068359	0					
ANR	1068506	Identifier	core		1068359	0					
ANR	1068507	Identifier	anal		1068359	1					
ANR	1068508	Argument	options		1068359	1					
ANR	1068509	Identifier	options		1068359	0					
ANR	1068510	Argument	input + 2		1068359	2					
ANR	1068511	AdditiveExpression	input + 2		1068359	0		+			
ANR	1068512	Identifier	input		1068359	0					
ANR	1068513	PrimaryExpression	2		1068359	1					
ANR	1068514	Argument	false		1068359	3					
ANR	1068515	Identifier	false		1068359	0					
ANR	1068516	BreakStatement	break ;	928:3:25041:25046	1068359	3	True				
ANR	1068517	Label	case '!' :	929:2:25050:25058	1068359	4	True				
ANR	1068518	IfStatement	if ( input [ 2 ] != ' ' || ! input [ 3 ] )		1068359	5					
ANR	1068519	Condition	input [ 2 ] != ' ' || ! input [ 3 ]	930:7:25067:25094	1068359	0	True				
ANR	1068520	OrExpression	input [ 2 ] != ' ' || ! input [ 3 ]		1068359	0		||			
ANR	1068521	EqualityExpression	input [ 2 ] != ' '		1068359	0		!=			
ANR	1068522	ArrayIndexing	input [ 2 ]		1068359	0					
ANR	1068523	Identifier	input		1068359	0					
ANR	1068524	PrimaryExpression	2		1068359	1					
ANR	1068525	PrimaryExpression	' '		1068359	1					
ANR	1068526	UnaryOperationExpression	! input [ 3 ]		1068359	1					
ANR	1068527	UnaryOperator	!		1068359	0					
ANR	1068528	ArrayIndexing	input [ 3 ]		1068359	1					
ANR	1068529	Identifier	input		1068359	0					
ANR	1068530	PrimaryExpression	3		1068359	1					
ANR	1068531	CompoundStatement		28:37:762:762	1068359	1					
ANR	1068532	ExpressionStatement	"eprintf ( ""usage: zcn! other_space\\n"" )"	931:4:25103:25140	1068359	0	True				
ANR	1068533	CallExpression	"eprintf ( ""usage: zcn! other_space\\n"" )"		1068359	0					
ANR	1068534	Callee	eprintf		1068359	0					
ANR	1068535	Identifier	eprintf		1068359	0					
ANR	1068536	ArgumentList	"""usage: zcn! other_space\\n"""		1068359	1					
ANR	1068537	Argument	"""usage: zcn! other_space\\n"""		1068359	0					
ANR	1068538	PrimaryExpression	"""usage: zcn! other_space\\n"""		1068359	0					
ANR	1068539	ExpressionStatement	result = false	932:4:25146:25160	1068359	1	True				
ANR	1068540	AssignmentExpression	result = false		1068359	0		=			
ANR	1068541	Identifier	result		1068359	0					
ANR	1068542	Identifier	false		1068359	1					
ANR	1068543	BreakStatement	break ;	933:4:25166:25171	1068359	2	True				
ANR	1068544	ExpressionStatement	"result = r_sign_diff_by_name ( core -> anal , options , input + 3 , true )"	935:3:25181:25248	1068359	6	True				
ANR	1068545	AssignmentExpression	"result = r_sign_diff_by_name ( core -> anal , options , input + 3 , true )"		1068359	0		=			
ANR	1068546	Identifier	result		1068359	0					
ANR	1068547	CallExpression	"r_sign_diff_by_name ( core -> anal , options , input + 3 , true )"		1068359	1					
ANR	1068548	Callee	r_sign_diff_by_name		1068359	0					
ANR	1068549	Identifier	r_sign_diff_by_name		1068359	0					
ANR	1068550	ArgumentList	core -> anal		1068359	1					
ANR	1068551	Argument	core -> anal		1068359	0					
ANR	1068552	PtrMemberAccess	core -> anal		1068359	0					
ANR	1068553	Identifier	core		1068359	0					
ANR	1068554	Identifier	anal		1068359	1					
ANR	1068555	Argument	options		1068359	1					
ANR	1068556	Identifier	options		1068359	0					
ANR	1068557	Argument	input + 3		1068359	2					
ANR	1068558	AdditiveExpression	input + 3		1068359	0		+			
ANR	1068559	Identifier	input		1068359	0					
ANR	1068560	PrimaryExpression	3		1068359	1					
ANR	1068561	Argument	true		1068359	3					
ANR	1068562	Identifier	true		1068359	0					
ANR	1068563	BreakStatement	break ;	936:3:25253:25258	1068359	7	True				
ANR	1068564	Label	default :	937:2:25262:25269	1068359	8	True				
ANR	1068565	Identifier	default		1068359	0					
ANR	1068566	ExpressionStatement	"eprintf ( ""usage: zcn! other_space\\n"" )"	938:3:25274:25311	1068359	9	True				
ANR	1068567	CallExpression	"eprintf ( ""usage: zcn! other_space\\n"" )"		1068359	0					
ANR	1068568	Callee	eprintf		1068359	0					
ANR	1068569	Identifier	eprintf		1068359	0					
ANR	1068570	ArgumentList	"""usage: zcn! other_space\\n"""		1068359	1					
ANR	1068571	Argument	"""usage: zcn! other_space\\n"""		1068359	0					
ANR	1068572	PrimaryExpression	"""usage: zcn! other_space\\n"""		1068359	0					
ANR	1068573	ExpressionStatement	result = false	939:3:25316:25330	1068359	10	True				
ANR	1068574	AssignmentExpression	result = false		1068359	0		=			
ANR	1068575	Identifier	result		1068359	0					
ANR	1068576	Identifier	false		1068359	1					
ANR	1068577	BreakStatement	break ;	941:2:25338:25343	1068359	6	True				
ANR	1068578	Label	case '?' :	942:1:25346:25354	1068359	7	True				
ANR	1068579	ExpressionStatement	"r_core_cmd_help ( core , help_msg_zc )"	943:2:25358:25393	1068359	8	True				
ANR	1068580	CallExpression	"r_core_cmd_help ( core , help_msg_zc )"		1068359	0					
ANR	1068581	Callee	r_core_cmd_help		1068359	0					
ANR	1068582	Identifier	r_core_cmd_help		1068359	0					
ANR	1068583	ArgumentList	core		1068359	1					
ANR	1068584	Argument	core		1068359	0					
ANR	1068585	Identifier	core		1068359	0					
ANR	1068586	Argument	help_msg_zc		1068359	1					
ANR	1068587	Identifier	help_msg_zc		1068359	0					
ANR	1068588	BreakStatement	break ;	944:2:25397:25402	1068359	9	True				
ANR	1068589	Label	default :	945:1:25405:25412	1068359	10	True				
ANR	1068590	Identifier	default		1068359	0					
ANR	1068591	ExpressionStatement	"eprintf ( ""usage: zc[?n!] other_space\\n"" )"	946:2:25416:25456	1068359	11	True				
ANR	1068592	CallExpression	"eprintf ( ""usage: zc[?n!] other_space\\n"" )"		1068359	0					
ANR	1068593	Callee	eprintf		1068359	0					
ANR	1068594	Identifier	eprintf		1068359	0					
ANR	1068595	ArgumentList	"""usage: zc[?n!] other_space\\n"""		1068359	1					
ANR	1068596	Argument	"""usage: zc[?n!] other_space\\n"""		1068359	0					
ANR	1068597	PrimaryExpression	"""usage: zc[?n!] other_space\\n"""		1068359	0					
ANR	1068598	ExpressionStatement	result = false	947:2:25460:25474	1068359	12	True				
ANR	1068599	AssignmentExpression	result = false		1068359	0		=			
ANR	1068600	Identifier	result		1068359	0					
ANR	1068601	Identifier	false		1068359	1					
ANR	1068602	ExpressionStatement	r_sign_options_free ( options )	950:1:25481:25510	1068359	6	True				
ANR	1068603	CallExpression	r_sign_options_free ( options )		1068359	0					
ANR	1068604	Callee	r_sign_options_free		1068359	0					
ANR	1068605	Identifier	r_sign_options_free		1068359	0					
ANR	1068606	ArgumentList	options		1068359	1					
ANR	1068607	Argument	options		1068359	0					
ANR	1068608	Identifier	options		1068359	0					
ANR	1068609	ReturnStatement	return result ;	952:1:25514:25527	1068359	7	True				
ANR	1068610	Identifier	result		1068359	0					
ANR	1068611	ReturnType	static int		1068359	1					
ANR	1068612	Identifier	cmdCompare		1068359	2					
ANR	1068613	ParameterList	"void * data , const char * input"		1068359	3					
ANR	1068614	Parameter	void * data	903:22:24303:24312	1068359	0	True				
ANR	1068615	ParameterType	void *		1068359	0					
ANR	1068616	Identifier	data		1068359	1					
ANR	1068617	Parameter	const char * input	903:34:24315:24331	1068359	1	True				
ANR	1068618	ParameterType	const char *		1068359	0					
ANR	1068619	Identifier	input		1068359	1					
ANR	1068620	CFGEntryNode	ENTRY		1068359		True				
ANR	1068621	CFGExitNode	EXIT		1068359		True				
ANR	1068622	Symbol	core -> config		1068359						
ANR	1068623	Symbol	r_sign_diff_by_name		1068359						
ANR	1068624	Symbol	data		1068359						
ANR	1068625	Symbol	r_sign_options_new		1068359						
ANR	1068626	Symbol	r_config_get		1068359						
ANR	1068627	Symbol	* core		1068359						
ANR	1068628	Symbol	* input		1068359						
ANR	1068629	Symbol	false		1068359						
ANR	1068630	Symbol	r_sign_diff		1068359						
ANR	1068631	Symbol	core -> anal		1068359						
ANR	1068632	Symbol	raw_bytes_thresh		1068359						
ANR	1068633	Symbol	result		1068359						
ANR	1068634	Symbol	input		1068359						
ANR	1068635	Symbol	core		1068359						
ANR	1068636	Symbol	raw_graph_thresh		1068359						
ANR	1068637	Symbol	true		1068359						
ANR	1068638	Symbol	options		1068359						
ANR	1068639	Symbol	help_msg_zc		1068359						
ANR	1068640	Function	cmdCheck	955:0:25532:28303							
ANR	1068641	FunctionDef	"cmdCheck (void * data , const char * input)"		1068640	0					
ANR	1068642	CompoundStatement		955:51:25583:28303	1068640	0					
ANR	1068643	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	956:1:25586:25614	1068640	0	True				
ANR	1068644	IdentifierDecl	* core = ( RCore * ) data		1068640	0					
ANR	1068645	IdentifierDeclType	RCore *		1068640	0					
ANR	1068646	Identifier	core		1068640	1					
ANR	1068647	AssignmentExpression	* core = ( RCore * ) data		1068640	2		=			
ANR	1068648	Identifier	core		1068640	0					
ANR	1068649	CastExpression	( RCore * ) data		1068640	1					
ANR	1068650	CastTarget	RCore *		1068640	0					
ANR	1068651	Identifier	data		1068640	1					
ANR	1068652	IdentifierDeclStatement	RSignSearch * ss ;	957:1:25617:25632	1068640	1	True				
ANR	1068653	IdentifierDecl	* ss		1068640	0					
ANR	1068654	IdentifierDeclType	RSignSearch *		1068640	0					
ANR	1068655	Identifier	ss		1068640	1					
ANR	1068656	IdentifierDeclStatement	RListIter * iter ;	958:1:25635:25650	1068640	2	True				
ANR	1068657	IdentifierDecl	* iter		1068640	0					
ANR	1068658	IdentifierDeclType	RListIter *		1068640	0					
ANR	1068659	Identifier	iter		1068640	1					
ANR	1068660	IdentifierDeclStatement	RAnalFunction * fcni = NULL ;	959:1:25653:25679	1068640	3	True				
ANR	1068661	IdentifierDecl	* fcni = NULL		1068640	0					
ANR	1068662	IdentifierDeclType	RAnalFunction *		1068640	0					
ANR	1068663	Identifier	fcni		1068640	1					
ANR	1068664	AssignmentExpression	* fcni = NULL		1068640	2		=			
ANR	1068665	Identifier	NULL		1068640	0					
ANR	1068666	Identifier	NULL		1068640	1					
ANR	1068667	IdentifierDeclStatement	ut64 at = core -> offset ;	960:1:25682:25704	1068640	4	True				
ANR	1068668	IdentifierDecl	at = core -> offset		1068640	0					
ANR	1068669	IdentifierDeclType	ut64		1068640	0					
ANR	1068670	Identifier	at		1068640	1					
ANR	1068671	AssignmentExpression	at = core -> offset		1068640	2		=			
ANR	1068672	Identifier	at		1068640	0					
ANR	1068673	PtrMemberAccess	core -> offset		1068640	1					
ANR	1068674	Identifier	core		1068640	0					
ANR	1068675	Identifier	offset		1068640	1					
ANR	1068676	IdentifierDeclStatement	bool retval = true ;	961:1:25707:25725	1068640	5	True				
ANR	1068677	IdentifierDecl	retval = true		1068640	0					
ANR	1068678	IdentifierDeclType	bool		1068640	0					
ANR	1068679	Identifier	retval		1068640	1					
ANR	1068680	AssignmentExpression	retval = true		1068640	2		=			
ANR	1068681	Identifier	true		1068640	0					
ANR	1068682	Identifier	true		1068640	1					
ANR	1068683	IdentifierDeclStatement	bool rad = input [ 0 ] == '*' ;	962:1:25728:25754	1068640	6	True				
ANR	1068684	IdentifierDecl	rad = input [ 0 ] == '*'		1068640	0					
ANR	1068685	IdentifierDeclType	bool		1068640	0					
ANR	1068686	Identifier	rad		1068640	1					
ANR	1068687	AssignmentExpression	rad = input [ 0 ] == '*'		1068640	2		=			
ANR	1068688	Identifier	rad		1068640	0					
ANR	1068689	EqualityExpression	input [ 0 ] == '*'		1068640	1		==			
ANR	1068690	ArrayIndexing	input [ 0 ]		1068640	0					
ANR	1068691	Identifier	input		1068640	0					
ANR	1068692	PrimaryExpression	0		1068640	1					
ANR	1068693	PrimaryExpression	'*'		1068640	1					
ANR	1068694	IdentifierDeclStatement	int hits = 0 ;	963:1:25757:25769	1068640	7	True				
ANR	1068695	IdentifierDecl	hits = 0		1068640	0					
ANR	1068696	IdentifierDeclType	int		1068640	0					
ANR	1068697	Identifier	hits		1068640	1					
ANR	1068698	AssignmentExpression	hits = 0		1068640	2		=			
ANR	1068699	Identifier	hits		1068640	0					
ANR	1068700	PrimaryExpression	0		1068640	1					
ANR	1068701	IdentifierDeclStatement	"struct ctxSearchCB bytes_search_ctx = { core , rad , 0 , ""bytes"" } ;"	965:1:25773:25836	1068640	8	True				
ANR	1068702	IdentifierDecl	"bytes_search_ctx = { core , rad , 0 , ""bytes"" }"		1068640	0					
ANR	1068703	IdentifierDeclType	struct ctxSearchCB		1068640	0					
ANR	1068704	Identifier	bytes_search_ctx		1068640	1					
ANR	1068705	AssignmentExpression	"bytes_search_ctx = { core , rad , 0 , ""bytes"" }"		1068640	2		=			
ANR	1068706	Identifier	bytes_search_ctx		1068640	0					
ANR	1068707	InitializerList	core		1068640	1					
ANR	1068708	Identifier	core		1068640	0					
ANR	1068709	Identifier	rad		1068640	1					
ANR	1068710	PrimaryExpression	0		1068640	2					
ANR	1068711	PrimaryExpression	"""bytes"""		1068640	3					
ANR	1068712	IdentifierDeclStatement	"struct ctxSearchCB graph_match_ctx = { core , rad , 0 , ""graph"" } ;"	966:1:25839:25901	1068640	9	True				
ANR	1068713	IdentifierDecl	"graph_match_ctx = { core , rad , 0 , ""graph"" }"		1068640	0					
ANR	1068714	IdentifierDeclType	struct ctxSearchCB		1068640	0					
ANR	1068715	Identifier	graph_match_ctx		1068640	1					
ANR	1068716	AssignmentExpression	"graph_match_ctx = { core , rad , 0 , ""graph"" }"		1068640	2		=			
ANR	1068717	Identifier	graph_match_ctx		1068640	0					
ANR	1068718	InitializerList	core		1068640	1					
ANR	1068719	Identifier	core		1068640	0					
ANR	1068720	Identifier	rad		1068640	1					
ANR	1068721	PrimaryExpression	0		1068640	2					
ANR	1068722	PrimaryExpression	"""graph"""		1068640	3					
ANR	1068723	IdentifierDeclStatement	"struct ctxSearchCB offset_match_ctx = { core , rad , 0 , ""offset"" } ;"	967:1:25904:25968	1068640	10	True				
ANR	1068724	IdentifierDecl	"offset_match_ctx = { core , rad , 0 , ""offset"" }"		1068640	0					
ANR	1068725	IdentifierDeclType	struct ctxSearchCB		1068640	0					
ANR	1068726	Identifier	offset_match_ctx		1068640	1					
ANR	1068727	AssignmentExpression	"offset_match_ctx = { core , rad , 0 , ""offset"" }"		1068640	2		=			
ANR	1068728	Identifier	offset_match_ctx		1068640	0					
ANR	1068729	InitializerList	core		1068640	1					
ANR	1068730	Identifier	core		1068640	0					
ANR	1068731	Identifier	rad		1068640	1					
ANR	1068732	PrimaryExpression	0		1068640	2					
ANR	1068733	PrimaryExpression	"""offset"""		1068640	3					
ANR	1068734	IdentifierDeclStatement	"struct ctxSearchCB refs_match_ctx = { core , rad , 0 , ""refs"" } ;"	968:1:25971:26031	1068640	11	True				
ANR	1068735	IdentifierDecl	"refs_match_ctx = { core , rad , 0 , ""refs"" }"		1068640	0					
ANR	1068736	IdentifierDeclType	struct ctxSearchCB		1068640	0					
ANR	1068737	Identifier	refs_match_ctx		1068640	1					
ANR	1068738	AssignmentExpression	"refs_match_ctx = { core , rad , 0 , ""refs"" }"		1068640	2		=			
ANR	1068739	Identifier	refs_match_ctx		1068640	0					
ANR	1068740	InitializerList	core		1068640	1					
ANR	1068741	Identifier	core		1068640	0					
ANR	1068742	Identifier	rad		1068640	1					
ANR	1068743	PrimaryExpression	0		1068640	2					
ANR	1068744	PrimaryExpression	"""refs"""		1068640	3					
ANR	1068745	IdentifierDeclStatement	"struct ctxSearchCB hash_match_ctx = { core , rad , 0 , ""bbhash"" } ;"	969:1:26034:26096	1068640	12	True				
ANR	1068746	IdentifierDecl	"hash_match_ctx = { core , rad , 0 , ""bbhash"" }"		1068640	0					
ANR	1068747	IdentifierDeclType	struct ctxSearchCB		1068640	0					
ANR	1068748	Identifier	hash_match_ctx		1068640	1					
ANR	1068749	AssignmentExpression	"hash_match_ctx = { core , rad , 0 , ""bbhash"" }"		1068640	2		=			
ANR	1068750	Identifier	hash_match_ctx		1068640	0					
ANR	1068751	InitializerList	core		1068640	1					
ANR	1068752	Identifier	core		1068640	0					
ANR	1068753	Identifier	rad		1068640	1					
ANR	1068754	PrimaryExpression	0		1068640	2					
ANR	1068755	PrimaryExpression	"""bbhash"""		1068640	3					
ANR	1068756	IdentifierDeclStatement	"const char * zign_prefix = r_config_get ( core -> config , ""zign.prefix"" ) ;"	971:1:26100:26168	1068640	13	True				
ANR	1068757	IdentifierDecl	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1068640	0					
ANR	1068758	IdentifierDeclType	const char *		1068640	0					
ANR	1068759	Identifier	zign_prefix		1068640	1					
ANR	1068760	AssignmentExpression	"* zign_prefix = r_config_get ( core -> config , ""zign.prefix"" )"		1068640	2		=			
ANR	1068761	Identifier	zign_prefix		1068640	0					
ANR	1068762	CallExpression	"r_config_get ( core -> config , ""zign.prefix"" )"		1068640	1					
ANR	1068763	Callee	r_config_get		1068640	0					
ANR	1068764	Identifier	r_config_get		1068640	0					
ANR	1068765	ArgumentList	core -> config		1068640	1					
ANR	1068766	Argument	core -> config		1068640	0					
ANR	1068767	PtrMemberAccess	core -> config		1068640	0					
ANR	1068768	Identifier	core		1068640	0					
ANR	1068769	Identifier	config		1068640	1					
ANR	1068770	Argument	"""zign.prefix"""		1068640	1					
ANR	1068771	PrimaryExpression	"""zign.prefix"""		1068640	0					
ANR	1068772	IdentifierDeclStatement	"int minsz = r_config_get_i ( core -> config , ""zign.minsz"" ) ;"	972:1:26171:26226	1068640	14	True				
ANR	1068773	IdentifierDecl	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1068640	0					
ANR	1068774	IdentifierDeclType	int		1068640	0					
ANR	1068775	Identifier	minsz		1068640	1					
ANR	1068776	AssignmentExpression	"minsz = r_config_get_i ( core -> config , ""zign.minsz"" )"		1068640	2		=			
ANR	1068777	Identifier	minsz		1068640	0					
ANR	1068778	CallExpression	"r_config_get_i ( core -> config , ""zign.minsz"" )"		1068640	1					
ANR	1068779	Callee	r_config_get_i		1068640	0					
ANR	1068780	Identifier	r_config_get_i		1068640	0					
ANR	1068781	ArgumentList	core -> config		1068640	1					
ANR	1068782	Argument	core -> config		1068640	0					
ANR	1068783	PtrMemberAccess	core -> config		1068640	0					
ANR	1068784	Identifier	core		1068640	0					
ANR	1068785	Identifier	config		1068640	1					
ANR	1068786	Argument	"""zign.minsz"""		1068640	1					
ANR	1068787	PrimaryExpression	"""zign.minsz"""		1068640	0					
ANR	1068788	IdentifierDeclStatement	"int mincc = r_config_get_i ( core -> config , ""zign.mincc"" ) ;"	973:1:26229:26284	1068640	15	True				
ANR	1068789	IdentifierDecl	"mincc = r_config_get_i ( core -> config , ""zign.mincc"" )"		1068640	0					
ANR	1068790	IdentifierDeclType	int		1068640	0					
ANR	1068791	Identifier	mincc		1068640	1					
ANR	1068792	AssignmentExpression	"mincc = r_config_get_i ( core -> config , ""zign.mincc"" )"		1068640	2		=			
ANR	1068793	Identifier	mincc		1068640	0					
ANR	1068794	CallExpression	"r_config_get_i ( core -> config , ""zign.mincc"" )"		1068640	1					
ANR	1068795	Callee	r_config_get_i		1068640	0					
ANR	1068796	Identifier	r_config_get_i		1068640	0					
ANR	1068797	ArgumentList	core -> config		1068640	1					
ANR	1068798	Argument	core -> config		1068640	0					
ANR	1068799	PtrMemberAccess	core -> config		1068640	0					
ANR	1068800	Identifier	core		1068640	0					
ANR	1068801	Identifier	config		1068640	1					
ANR	1068802	Argument	"""zign.mincc"""		1068640	1					
ANR	1068803	PrimaryExpression	"""zign.mincc"""		1068640	0					
ANR	1068804	IdentifierDeclStatement	"bool useBytes = r_config_get_i ( core -> config , ""zign.bytes"" ) ;"	974:1:26287:26346	1068640	16	True				
ANR	1068805	IdentifierDecl	"useBytes = r_config_get_i ( core -> config , ""zign.bytes"" )"		1068640	0					
ANR	1068806	IdentifierDeclType	bool		1068640	0					
ANR	1068807	Identifier	useBytes		1068640	1					
ANR	1068808	AssignmentExpression	"useBytes = r_config_get_i ( core -> config , ""zign.bytes"" )"		1068640	2		=			
ANR	1068809	Identifier	useBytes		1068640	0					
ANR	1068810	CallExpression	"r_config_get_i ( core -> config , ""zign.bytes"" )"		1068640	1					
ANR	1068811	Callee	r_config_get_i		1068640	0					
ANR	1068812	Identifier	r_config_get_i		1068640	0					
ANR	1068813	ArgumentList	core -> config		1068640	1					
ANR	1068814	Argument	core -> config		1068640	0					
ANR	1068815	PtrMemberAccess	core -> config		1068640	0					
ANR	1068816	Identifier	core		1068640	0					
ANR	1068817	Identifier	config		1068640	1					
ANR	1068818	Argument	"""zign.bytes"""		1068640	1					
ANR	1068819	PrimaryExpression	"""zign.bytes"""		1068640	0					
ANR	1068820	IdentifierDeclStatement	"bool useGraph = r_config_get_i ( core -> config , ""zign.graph"" ) ;"	975:1:26349:26408	1068640	17	True				
ANR	1068821	IdentifierDecl	"useGraph = r_config_get_i ( core -> config , ""zign.graph"" )"		1068640	0					
ANR	1068822	IdentifierDeclType	bool		1068640	0					
ANR	1068823	Identifier	useGraph		1068640	1					
ANR	1068824	AssignmentExpression	"useGraph = r_config_get_i ( core -> config , ""zign.graph"" )"		1068640	2		=			
ANR	1068825	Identifier	useGraph		1068640	0					
ANR	1068826	CallExpression	"r_config_get_i ( core -> config , ""zign.graph"" )"		1068640	1					
ANR	1068827	Callee	r_config_get_i		1068640	0					
ANR	1068828	Identifier	r_config_get_i		1068640	0					
ANR	1068829	ArgumentList	core -> config		1068640	1					
ANR	1068830	Argument	core -> config		1068640	0					
ANR	1068831	PtrMemberAccess	core -> config		1068640	0					
ANR	1068832	Identifier	core		1068640	0					
ANR	1068833	Identifier	config		1068640	1					
ANR	1068834	Argument	"""zign.graph"""		1068640	1					
ANR	1068835	PrimaryExpression	"""zign.graph"""		1068640	0					
ANR	1068836	IdentifierDeclStatement	"bool useOffset = r_config_get_i ( core -> config , ""zign.offset"" ) ;"	976:1:26411:26472	1068640	18	True				
ANR	1068837	IdentifierDecl	"useOffset = r_config_get_i ( core -> config , ""zign.offset"" )"		1068640	0					
ANR	1068838	IdentifierDeclType	bool		1068640	0					
ANR	1068839	Identifier	useOffset		1068640	1					
ANR	1068840	AssignmentExpression	"useOffset = r_config_get_i ( core -> config , ""zign.offset"" )"		1068640	2		=			
ANR	1068841	Identifier	useOffset		1068640	0					
ANR	1068842	CallExpression	"r_config_get_i ( core -> config , ""zign.offset"" )"		1068640	1					
ANR	1068843	Callee	r_config_get_i		1068640	0					
ANR	1068844	Identifier	r_config_get_i		1068640	0					
ANR	1068845	ArgumentList	core -> config		1068640	1					
ANR	1068846	Argument	core -> config		1068640	0					
ANR	1068847	PtrMemberAccess	core -> config		1068640	0					
ANR	1068848	Identifier	core		1068640	0					
ANR	1068849	Identifier	config		1068640	1					
ANR	1068850	Argument	"""zign.offset"""		1068640	1					
ANR	1068851	PrimaryExpression	"""zign.offset"""		1068640	0					
ANR	1068852	IdentifierDeclStatement	"bool useRefs = r_config_get_i ( core -> config , ""zign.refs"" ) ;"	977:1:26475:26532	1068640	19	True				
ANR	1068853	IdentifierDecl	"useRefs = r_config_get_i ( core -> config , ""zign.refs"" )"		1068640	0					
ANR	1068854	IdentifierDeclType	bool		1068640	0					
ANR	1068855	Identifier	useRefs		1068640	1					
ANR	1068856	AssignmentExpression	"useRefs = r_config_get_i ( core -> config , ""zign.refs"" )"		1068640	2		=			
ANR	1068857	Identifier	useRefs		1068640	0					
ANR	1068858	CallExpression	"r_config_get_i ( core -> config , ""zign.refs"" )"		1068640	1					
ANR	1068859	Callee	r_config_get_i		1068640	0					
ANR	1068860	Identifier	r_config_get_i		1068640	0					
ANR	1068861	ArgumentList	core -> config		1068640	1					
ANR	1068862	Argument	core -> config		1068640	0					
ANR	1068863	PtrMemberAccess	core -> config		1068640	0					
ANR	1068864	Identifier	core		1068640	0					
ANR	1068865	Identifier	config		1068640	1					
ANR	1068866	Argument	"""zign.refs"""		1068640	1					
ANR	1068867	PrimaryExpression	"""zign.refs"""		1068640	0					
ANR	1068868	IdentifierDeclStatement	"bool useHash = r_config_get_i ( core -> config , ""zign.hash"" ) ;"	978:1:26535:26592	1068640	20	True				
ANR	1068869	IdentifierDecl	"useHash = r_config_get_i ( core -> config , ""zign.hash"" )"		1068640	0					
ANR	1068870	IdentifierDeclType	bool		1068640	0					
ANR	1068871	Identifier	useHash		1068640	1					
ANR	1068872	AssignmentExpression	"useHash = r_config_get_i ( core -> config , ""zign.hash"" )"		1068640	2		=			
ANR	1068873	Identifier	useHash		1068640	0					
ANR	1068874	CallExpression	"r_config_get_i ( core -> config , ""zign.hash"" )"		1068640	1					
ANR	1068875	Callee	r_config_get_i		1068640	0					
ANR	1068876	Identifier	r_config_get_i		1068640	0					
ANR	1068877	ArgumentList	core -> config		1068640	1					
ANR	1068878	Argument	core -> config		1068640	0					
ANR	1068879	PtrMemberAccess	core -> config		1068640	0					
ANR	1068880	Identifier	core		1068640	0					
ANR	1068881	Identifier	config		1068640	1					
ANR	1068882	Argument	"""zign.hash"""		1068640	1					
ANR	1068883	PrimaryExpression	"""zign.hash"""		1068640	0					
ANR	1068884	IfStatement	if ( rad )		1068640	21					
ANR	1068885	Condition	rad	980:5:26600:26602	1068640	0	True				
ANR	1068886	Identifier	rad		1068640	0					
ANR	1068887	CompoundStatement		26:10:1021:1021	1068640	1					
ANR	1068888	ExpressionStatement	"r_cons_printf ( ""fs+%s\\n"" , zign_prefix )"	981:2:26609:26647	1068640	0	True				
ANR	1068889	CallExpression	"r_cons_printf ( ""fs+%s\\n"" , zign_prefix )"		1068640	0					
ANR	1068890	Callee	r_cons_printf		1068640	0					
ANR	1068891	Identifier	r_cons_printf		1068640	0					
ANR	1068892	ArgumentList	"""fs+%s\\n"""		1068640	1					
ANR	1068893	Argument	"""fs+%s\\n"""		1068640	0					
ANR	1068894	PrimaryExpression	"""fs+%s\\n"""		1068640	0					
ANR	1068895	Argument	zign_prefix		1068640	1					
ANR	1068896	Identifier	zign_prefix		1068640	0					
ANR	1068897	ElseStatement	else		1068640	0					
ANR	1068898	CompoundStatement		28:8:1073:1073	1068640	0					
ANR	1068899	IfStatement	"if ( ! r_flag_space_push ( core -> flags , zign_prefix ) )"		1068640	0					
ANR	1068900	Condition	"! r_flag_space_push ( core -> flags , zign_prefix )"	983:6:26665:26709	1068640	0	True				
ANR	1068901	UnaryOperationExpression	"! r_flag_space_push ( core -> flags , zign_prefix )"		1068640	0					
ANR	1068902	UnaryOperator	!		1068640	0					
ANR	1068903	CallExpression	"r_flag_space_push ( core -> flags , zign_prefix )"		1068640	1					
ANR	1068904	Callee	r_flag_space_push		1068640	0					
ANR	1068905	Identifier	r_flag_space_push		1068640	0					
ANR	1068906	ArgumentList	core -> flags		1068640	1					
ANR	1068907	Argument	core -> flags		1068640	0					
ANR	1068908	PtrMemberAccess	core -> flags		1068640	0					
ANR	1068909	Identifier	core		1068640	0					
ANR	1068910	Identifier	flags		1068640	1					
ANR	1068911	Argument	zign_prefix		1068640	1					
ANR	1068912	Identifier	zign_prefix		1068640	0					
ANR	1068913	CompoundStatement		29:53:1128:1128	1068640	1					
ANR	1068914	ExpressionStatement	"eprintf ( ""error: cannot create flagspace\\n"" )"	984:3:26717:26761	1068640	0	True				
ANR	1068915	CallExpression	"eprintf ( ""error: cannot create flagspace\\n"" )"		1068640	0					
ANR	1068916	Callee	eprintf		1068640	0					
ANR	1068917	Identifier	eprintf		1068640	0					
ANR	1068918	ArgumentList	"""error: cannot create flagspace\\n"""		1068640	1					
ANR	1068919	Argument	"""error: cannot create flagspace\\n"""		1068640	0					
ANR	1068920	PrimaryExpression	"""error: cannot create flagspace\\n"""		1068640	0					
ANR	1068921	ReturnStatement	return false ;	985:3:26766:26778	1068640	1	True				
ANR	1068922	Identifier	false		1068640	0					
ANR	1068923	IfStatement	if ( useBytes )		1068640	22					
ANR	1068924	Condition	useBytes	990:5:26810:26817	1068640	0	True				
ANR	1068925	Identifier	useBytes		1068640	0					
ANR	1068926	CompoundStatement		36:15:1236:1236	1068640	1					
ANR	1068927	Statement	eprintf	991:2:26824:26830	1068640	0	True				
ANR	1068928	Statement	(	991:10:26832:26832	1068640	1	True				
ANR	1068929	Statement	"""[+] searching 0x%08"""	991:11:26833:26853	1068640	2	True				
ANR	1068930	Statement	PFMT64x	991:32:26854:26860	1068640	3	True				
ANR	1068931	Statement	""" - 0x%08"""	991:39:26861:26870	1068640	4	True				
ANR	1068932	Statement	PFMT64x	991:49:26871:26877	1068640	5	True				
ANR	1068933	Statement	"""\\n"""	991:56:26878:26881	1068640	6	True				
ANR	1068934	Statement	","	991:60:26882:26882	1068640	7	True				
ANR	1068935	Statement	at	991:62:26884:26885	1068640	8	True				
ANR	1068936	Statement	","	991:64:26886:26886	1068640	9	True				
ANR	1068937	Statement	at	991:66:26888:26889	1068640	10	True				
ANR	1068938	Statement	+	991:69:26891:26891	1068640	11	True				
ANR	1068939	Statement	core	991:71:26893:26896	1068640	12	True				
ANR	1068940	Statement	->	991:75:26897:26898	1068640	13	True				
ANR	1068941	Statement	blocksize	991:77:26899:26907	1068640	14	True				
ANR	1068942	Statement	)	991:86:26908:26908	1068640	15	True				
ANR	1068943	ExpressionStatement		991:87:26909:26909	1068640	16	True				
ANR	1068944	ExpressionStatement	ss = r_sign_search_new ( )	992:2:26913:26938	1068640	17	True				
ANR	1068945	AssignmentExpression	ss = r_sign_search_new ( )		1068640	0		=			
ANR	1068946	Identifier	ss		1068640	0					
ANR	1068947	CallExpression	r_sign_search_new ( )		1068640	1					
ANR	1068948	Callee	r_sign_search_new		1068640	0					
ANR	1068949	Identifier	r_sign_search_new		1068640	0					
ANR	1068950	ArgumentList			1068640	1					
ANR	1068951	ExpressionStatement	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , & bytes_search_ctx )"	993:2:26942:27016	1068640	18	True				
ANR	1068952	CallExpression	"r_sign_search_init ( core -> anal , ss , minsz , searchHitCB , & bytes_search_ctx )"		1068640	0					
ANR	1068953	Callee	r_sign_search_init		1068640	0					
ANR	1068954	Identifier	r_sign_search_init		1068640	0					
ANR	1068955	ArgumentList	core -> anal		1068640	1					
ANR	1068956	Argument	core -> anal		1068640	0					
ANR	1068957	PtrMemberAccess	core -> anal		1068640	0					
ANR	1068958	Identifier	core		1068640	0					
ANR	1068959	Identifier	anal		1068640	1					
ANR	1068960	Argument	ss		1068640	1					
ANR	1068961	Identifier	ss		1068640	0					
ANR	1068962	Argument	minsz		1068640	2					
ANR	1068963	Identifier	minsz		1068640	0					
ANR	1068964	Argument	searchHitCB		1068640	3					
ANR	1068965	Identifier	searchHitCB		1068640	0					
ANR	1068966	Argument	& bytes_search_ctx		1068640	4					
ANR	1068967	UnaryOperationExpression	& bytes_search_ctx		1068640	0					
ANR	1068968	UnaryOperator	&		1068640	0					
ANR	1068969	Identifier	bytes_search_ctx		1068640	1					
ANR	1068970	IfStatement	"if ( r_sign_search_update ( core -> anal , ss , & at , core -> block , core -> blocksize ) == - 1 )"		1068640	19					
ANR	1068971	Condition	"r_sign_search_update ( core -> anal , ss , & at , core -> block , core -> blocksize ) == - 1"	994:6:27024:27101	1068640	0	True				
ANR	1068972	EqualityExpression	"r_sign_search_update ( core -> anal , ss , & at , core -> block , core -> blocksize ) == - 1"		1068640	0		==			
ANR	1068973	CallExpression	"r_sign_search_update ( core -> anal , ss , & at , core -> block , core -> blocksize )"		1068640	0					
ANR	1068974	Callee	r_sign_search_update		1068640	0					
ANR	1068975	Identifier	r_sign_search_update		1068640	0					
ANR	1068976	ArgumentList	core -> anal		1068640	1					
ANR	1068977	Argument	core -> anal		1068640	0					
ANR	1068978	PtrMemberAccess	core -> anal		1068640	0					
ANR	1068979	Identifier	core		1068640	0					
ANR	1068980	Identifier	anal		1068640	1					
ANR	1068981	Argument	ss		1068640	1					
ANR	1068982	Identifier	ss		1068640	0					
ANR	1068983	Argument	& at		1068640	2					
ANR	1068984	UnaryOperationExpression	& at		1068640	0					
ANR	1068985	UnaryOperator	&		1068640	0					
ANR	1068986	Identifier	at		1068640	1					
ANR	1068987	Argument	core -> block		1068640	3					
ANR	1068988	PtrMemberAccess	core -> block		1068640	0					
ANR	1068989	Identifier	core		1068640	0					
ANR	1068990	Identifier	block		1068640	1					
ANR	1068991	Argument	core -> blocksize		1068640	4					
ANR	1068992	PtrMemberAccess	core -> blocksize		1068640	0					
ANR	1068993	Identifier	core		1068640	0					
ANR	1068994	Identifier	blocksize		1068640	1					
ANR	1068995	UnaryOperationExpression	- 1		1068640	1					
ANR	1068996	UnaryOperator	-		1068640	0					
ANR	1068997	PrimaryExpression	1		1068640	1					
ANR	1068998	CompoundStatement		40:86:1520:1520	1068640	1					
ANR	1068999	Statement	eprintf	995:3:27109:27115	1068640	0	True				
ANR	1069000	Statement	(	995:11:27117:27117	1068640	1	True				
ANR	1069001	Statement	"""search: update read error at 0x%08"""	995:12:27118:27153	1068640	2	True				
ANR	1069002	Statement	PFMT64x	995:48:27154:27160	1068640	3	True				
ANR	1069003	Statement	"""\\n"""	995:55:27161:27164	1068640	4	True				
ANR	1069004	Statement	","	995:59:27165:27165	1068640	5	True				
ANR	1069005	Statement	at	995:61:27167:27168	1068640	6	True				
ANR	1069006	Statement	)	995:63:27169:27169	1068640	7	True				
ANR	1069007	ExpressionStatement		995:64:27170:27170	1068640	8	True				
ANR	1069008	ExpressionStatement	retval = false	996:3:27175:27189	1068640	9	True				
ANR	1069009	AssignmentExpression	retval = false		1068640	0		=			
ANR	1069010	Identifier	retval		1068640	0					
ANR	1069011	Identifier	false		1068640	1					
ANR	1069012	ExpressionStatement	r_sign_search_free ( ss )	998:2:27197:27220	1068640	20	True				
ANR	1069013	CallExpression	r_sign_search_free ( ss )		1068640	0					
ANR	1069014	Callee	r_sign_search_free		1068640	0					
ANR	1069015	Identifier	r_sign_search_free		1068640	0					
ANR	1069016	ArgumentList	ss		1068640	1					
ANR	1069017	Argument	ss		1068640	0					
ANR	1069018	Identifier	ss		1068640	0					
ANR	1069019	IfStatement	if ( useGraph || useOffset || useRefs || useHash )		1068640	23					
ANR	1069020	Condition	useGraph || useOffset || useRefs || useHash	1002:5:27251:27293	1068640	0	True				
ANR	1069021	OrExpression	useGraph || useOffset || useRefs || useHash		1068640	0		||			
ANR	1069022	Identifier	useGraph		1068640	0					
ANR	1069023	OrExpression	useOffset || useRefs || useHash		1068640	1		||			
ANR	1069024	Identifier	useOffset		1068640	0					
ANR	1069025	OrExpression	useRefs || useHash		1068640	1		||			
ANR	1069026	Identifier	useRefs		1068640	0					
ANR	1069027	Identifier	useHash		1068640	1					
ANR	1069028	CompoundStatement		48:50:1712:1712	1068640	1					
ANR	1069029	ExpressionStatement	"eprintf ( ""[+] searching function metrics\\n"" )"	1003:2:27300:27344	1068640	0	True				
ANR	1069030	CallExpression	"eprintf ( ""[+] searching function metrics\\n"" )"		1068640	0					
ANR	1069031	Callee	eprintf		1068640	0					
ANR	1069032	Identifier	eprintf		1068640	0					
ANR	1069033	ArgumentList	"""[+] searching function metrics\\n"""		1068640	1					
ANR	1069034	Argument	"""[+] searching function metrics\\n"""		1068640	0					
ANR	1069035	PrimaryExpression	"""[+] searching function metrics\\n"""		1068640	0					
ANR	1069036	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	1004:2:27348:27378	1068640	1	True				
ANR	1069037	CallExpression	"r_cons_break_push ( NULL , NULL )"		1068640	0					
ANR	1069038	Callee	r_cons_break_push		1068640	0					
ANR	1069039	Identifier	r_cons_break_push		1068640	0					
ANR	1069040	ArgumentList	NULL		1068640	1					
ANR	1069041	Argument	NULL		1068640	0					
ANR	1069042	Identifier	NULL		1068640	0					
ANR	1069043	Argument	NULL		1068640	1					
ANR	1069044	Identifier	NULL		1068640	0					
ANR	1069045	Statement	r_list_foreach	1005:2:27382:27395	1068640	2	True				
ANR	1069046	Statement	(	1005:17:27397:27397	1068640	3	True				
ANR	1069047	Statement	core	1005:18:27398:27401	1068640	4	True				
ANR	1069048	Statement	->	1005:22:27402:27403	1068640	5	True				
ANR	1069049	Statement	anal	1005:24:27404:27407	1068640	6	True				
ANR	1069050	Statement	->	1005:28:27408:27409	1068640	7	True				
ANR	1069051	Statement	fcns	1005:30:27410:27413	1068640	8	True				
ANR	1069052	Statement	","	1005:34:27414:27414	1068640	9	True				
ANR	1069053	Statement	iter	1005:36:27416:27419	1068640	10	True				
ANR	1069054	Statement	","	1005:40:27420:27420	1068640	11	True				
ANR	1069055	Statement	fcni	1005:42:27422:27425	1068640	12	True				
ANR	1069056	Statement	)	1005:46:27426:27426	1068640	13	True				
ANR	1069057	CompoundStatement		51:48:1844:1844	1068640	14					
ANR	1069058	IfStatement	if ( r_cons_is_breaked ( ) )		1068640	0					
ANR	1069059	Condition	r_cons_is_breaked ( )	1006:7:27437:27456	1068640	0	True				
ANR	1069060	CallExpression	r_cons_is_breaked ( )		1068640	0					
ANR	1069061	Callee	r_cons_is_breaked		1068640	0					
ANR	1069062	Identifier	r_cons_is_breaked		1068640	0					
ANR	1069063	ArgumentList			1068640	1					
ANR	1069064	CompoundStatement		52:29:1875:1875	1068640	1					
ANR	1069065	BreakStatement	break ;	1007:4:27465:27470	1068640	0	True				
ANR	1069066	IfStatement	if ( fcni -> addr == core -> offset )		1068640	1					
ANR	1069067	Condition	fcni -> addr == core -> offset	1009:7:27484:27509	1068640	0	True				
ANR	1069068	EqualityExpression	fcni -> addr == core -> offset		1068640	0		==			
ANR	1069069	PtrMemberAccess	fcni -> addr		1068640	0					
ANR	1069070	Identifier	fcni		1068640	0					
ANR	1069071	Identifier	addr		1068640	1					
ANR	1069072	PtrMemberAccess	core -> offset		1068640	1					
ANR	1069073	Identifier	core		1068640	0					
ANR	1069074	Identifier	offset		1068640	1					
ANR	1069075	CompoundStatement		55:35:1928:1928	1068640	1					
ANR	1069076	IfStatement	if ( useGraph )		1068640	0					
ANR	1069077	Condition	useGraph	1010:8:27522:27529	1068640	0	True				
ANR	1069078	Identifier	useGraph		1068640	0					
ANR	1069079	CompoundStatement		56:18:1948:1948	1068640	1					
ANR	1069080	ExpressionStatement	"r_sign_match_graph ( core -> anal , fcni , mincc , fcnMatchCB , & graph_match_ctx )"	1011:5:27539:27613	1068640	0	True				
ANR	1069081	CallExpression	"r_sign_match_graph ( core -> anal , fcni , mincc , fcnMatchCB , & graph_match_ctx )"		1068640	0					
ANR	1069082	Callee	r_sign_match_graph		1068640	0					
ANR	1069083	Identifier	r_sign_match_graph		1068640	0					
ANR	1069084	ArgumentList	core -> anal		1068640	1					
ANR	1069085	Argument	core -> anal		1068640	0					
ANR	1069086	PtrMemberAccess	core -> anal		1068640	0					
ANR	1069087	Identifier	core		1068640	0					
ANR	1069088	Identifier	anal		1068640	1					
ANR	1069089	Argument	fcni		1068640	1					
ANR	1069090	Identifier	fcni		1068640	0					
ANR	1069091	Argument	mincc		1068640	2					
ANR	1069092	Identifier	mincc		1068640	0					
ANR	1069093	Argument	fcnMatchCB		1068640	3					
ANR	1069094	Identifier	fcnMatchCB		1068640	0					
ANR	1069095	Argument	& graph_match_ctx		1068640	4					
ANR	1069096	UnaryOperationExpression	& graph_match_ctx		1068640	0					
ANR	1069097	UnaryOperator	&		1068640	0					
ANR	1069098	Identifier	graph_match_ctx		1068640	1					
ANR	1069099	IfStatement	if ( useOffset )		1068640	1					
ANR	1069100	Condition	useOffset	1013:8:27629:27637	1068640	0	True				
ANR	1069101	Identifier	useOffset		1068640	0					
ANR	1069102	CompoundStatement		59:19:2056:2056	1068640	1					
ANR	1069103	ExpressionStatement	"r_sign_match_addr ( core -> anal , fcni , fcnMatchCB , & offset_match_ctx )"	1014:5:27647:27714	1068640	0	True				
ANR	1069104	CallExpression	"r_sign_match_addr ( core -> anal , fcni , fcnMatchCB , & offset_match_ctx )"		1068640	0					
ANR	1069105	Callee	r_sign_match_addr		1068640	0					
ANR	1069106	Identifier	r_sign_match_addr		1068640	0					
ANR	1069107	ArgumentList	core -> anal		1068640	1					
ANR	1069108	Argument	core -> anal		1068640	0					
ANR	1069109	PtrMemberAccess	core -> anal		1068640	0					
ANR	1069110	Identifier	core		1068640	0					
ANR	1069111	Identifier	anal		1068640	1					
ANR	1069112	Argument	fcni		1068640	1					
ANR	1069113	Identifier	fcni		1068640	0					
ANR	1069114	Argument	fcnMatchCB		1068640	2					
ANR	1069115	Identifier	fcnMatchCB		1068640	0					
ANR	1069116	Argument	& offset_match_ctx		1068640	3					
ANR	1069117	UnaryOperationExpression	& offset_match_ctx		1068640	0					
ANR	1069118	UnaryOperator	&		1068640	0					
ANR	1069119	Identifier	offset_match_ctx		1068640	1					
ANR	1069120	IfStatement	if ( useRefs )		1068640	2					
ANR	1069121	Condition	useRefs	1016:8:27730:27736	1068640	0	True				
ANR	1069122	Identifier	useRefs		1068640	0					
ANR	1069123	CompoundStatement		62:16:2154:2154	1068640	1					
ANR	1069124	ExpressionStatement	"r_sign_match_refs ( core -> anal , fcni , fcnMatchCB , & refs_match_ctx )"	1017:5:27745:27810	1068640	0	True				
ANR	1069125	CallExpression	"r_sign_match_refs ( core -> anal , fcni , fcnMatchCB , & refs_match_ctx )"		1068640	0					
ANR	1069126	Callee	r_sign_match_refs		1068640	0					
ANR	1069127	Identifier	r_sign_match_refs		1068640	0					
ANR	1069128	ArgumentList	core -> anal		1068640	1					
ANR	1069129	Argument	core -> anal		1068640	0					
ANR	1069130	PtrMemberAccess	core -> anal		1068640	0					
ANR	1069131	Identifier	core		1068640	0					
ANR	1069132	Identifier	anal		1068640	1					
ANR	1069133	Argument	fcni		1068640	1					
ANR	1069134	Identifier	fcni		1068640	0					
ANR	1069135	Argument	fcnMatchCB		1068640	2					
ANR	1069136	Identifier	fcnMatchCB		1068640	0					
ANR	1069137	Argument	& refs_match_ctx		1068640	3					
ANR	1069138	UnaryOperationExpression	& refs_match_ctx		1068640	0					
ANR	1069139	UnaryOperator	&		1068640	0					
ANR	1069140	Identifier	refs_match_ctx		1068640	1					
ANR	1069141	IfStatement	if ( useHash )		1068640	3					
ANR	1069142	Condition	useHash	1019:8:27826:27832	1068640	0	True				
ANR	1069143	Identifier	useHash		1068640	0					
ANR	1069144	CompoundStatement		65:16:2250:2250	1068640	1					
ANR	1069145	ExpressionStatement	"r_sign_match_hash ( core -> anal , fcni , fcnMatchCB , & hash_match_ctx )"	1020:5:27841:27906	1068640	0	True				
ANR	1069146	CallExpression	"r_sign_match_hash ( core -> anal , fcni , fcnMatchCB , & hash_match_ctx )"		1068640	0					
ANR	1069147	Callee	r_sign_match_hash		1068640	0					
ANR	1069148	Identifier	r_sign_match_hash		1068640	0					
ANR	1069149	ArgumentList	core -> anal		1068640	1					
ANR	1069150	Argument	core -> anal		1068640	0					
ANR	1069151	PtrMemberAccess	core -> anal		1068640	0					
ANR	1069152	Identifier	core		1068640	0					
ANR	1069153	Identifier	anal		1068640	1					
ANR	1069154	Argument	fcni		1068640	1					
ANR	1069155	Identifier	fcni		1068640	0					
ANR	1069156	Argument	fcnMatchCB		1068640	2					
ANR	1069157	Identifier	fcnMatchCB		1068640	0					
ANR	1069158	Argument	& hash_match_ctx		1068640	3					
ANR	1069159	UnaryOperationExpression	& hash_match_ctx		1068640	0					
ANR	1069160	UnaryOperator	&		1068640	0					
ANR	1069161	Identifier	hash_match_ctx		1068640	1					
ANR	1069162	BreakStatement	break ;	1022:4:27918:27923	1068640	4	True				
ANR	1069163	ExpressionStatement	r_cons_break_pop ( )	1025:2:27936:27955	1068640	15	True				
ANR	1069164	CallExpression	r_cons_break_pop ( )		1068640	0					
ANR	1069165	Callee	r_cons_break_pop		1068640	0					
ANR	1069166	Identifier	r_cons_break_pop		1068640	0					
ANR	1069167	ArgumentList			1068640	1					
ANR	1069168	IfStatement	if ( rad )		1068640	24					
ANR	1069169	Condition	rad	1028:5:27966:27968	1068640	0	True				
ANR	1069170	Identifier	rad		1068640	0					
ANR	1069171	CompoundStatement		74:10:2387:2387	1068640	1					
ANR	1069172	ExpressionStatement	"r_cons_printf ( ""fs-\\n"" )"	1029:2:27975:27998	1068640	0	True				
ANR	1069173	CallExpression	"r_cons_printf ( ""fs-\\n"" )"		1068640	0					
ANR	1069174	Callee	r_cons_printf		1068640	0					
ANR	1069175	Identifier	r_cons_printf		1068640	0					
ANR	1069176	ArgumentList	"""fs-\\n"""		1068640	1					
ANR	1069177	Argument	"""fs-\\n"""		1068640	0					
ANR	1069178	PrimaryExpression	"""fs-\\n"""		1068640	0					
ANR	1069179	ElseStatement	else		1068640	0					
ANR	1069180	CompoundStatement		76:8:2424:2424	1068640	0					
ANR	1069181	IfStatement	if ( ! r_flag_space_pop ( core -> flags ) )		1068640	0					
ANR	1069182	Condition	! r_flag_space_pop ( core -> flags )	1031:6:28016:28046	1068640	0	True				
ANR	1069183	UnaryOperationExpression	! r_flag_space_pop ( core -> flags )		1068640	0					
ANR	1069184	UnaryOperator	!		1068640	0					
ANR	1069185	CallExpression	r_flag_space_pop ( core -> flags )		1068640	1					
ANR	1069186	Callee	r_flag_space_pop		1068640	0					
ANR	1069187	Identifier	r_flag_space_pop		1068640	0					
ANR	1069188	ArgumentList	core -> flags		1068640	1					
ANR	1069189	Argument	core -> flags		1068640	0					
ANR	1069190	PtrMemberAccess	core -> flags		1068640	0					
ANR	1069191	Identifier	core		1068640	0					
ANR	1069192	Identifier	flags		1068640	1					
ANR	1069193	CompoundStatement		77:39:2465:2465	1068640	1					
ANR	1069194	ExpressionStatement	"eprintf ( ""error: cannot restore flagspace\\n"" )"	1032:3:28054:28099	1068640	0	True				
ANR	1069195	CallExpression	"eprintf ( ""error: cannot restore flagspace\\n"" )"		1068640	0					
ANR	1069196	Callee	eprintf		1068640	0					
ANR	1069197	Identifier	eprintf		1068640	0					
ANR	1069198	ArgumentList	"""error: cannot restore flagspace\\n"""		1068640	1					
ANR	1069199	Argument	"""error: cannot restore flagspace\\n"""		1068640	0					
ANR	1069200	PrimaryExpression	"""error: cannot restore flagspace\\n"""		1068640	0					
ANR	1069201	ReturnStatement	return false ;	1033:3:28104:28116	1068640	1	True				
ANR	1069202	Identifier	false		1068640	0					
ANR	1069203	ExpressionStatement	hits = bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count	1037:1:28127:28253	1068640	25	True				
ANR	1069204	AssignmentExpression	hits = bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1068640	0		=			
ANR	1069205	Identifier	hits		1068640	0					
ANR	1069206	AdditiveExpression	bytes_search_ctx . count + graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1068640	1		+			
ANR	1069207	MemberAccess	bytes_search_ctx . count		1068640	0					
ANR	1069208	Identifier	bytes_search_ctx		1068640	0					
ANR	1069209	Identifier	count		1068640	1					
ANR	1069210	AdditiveExpression	graph_match_ctx . count + offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1068640	1		+			
ANR	1069211	MemberAccess	graph_match_ctx . count		1068640	0					
ANR	1069212	Identifier	graph_match_ctx		1068640	0					
ANR	1069213	Identifier	count		1068640	1					
ANR	1069214	AdditiveExpression	offset_match_ctx . count + refs_match_ctx . count + hash_match_ctx . count		1068640	1		+			
ANR	1069215	MemberAccess	offset_match_ctx . count		1068640	0					
ANR	1069216	Identifier	offset_match_ctx		1068640	0					
ANR	1069217	Identifier	count		1068640	1					
ANR	1069218	AdditiveExpression	refs_match_ctx . count + hash_match_ctx . count		1068640	1		+			
ANR	1069219	MemberAccess	refs_match_ctx . count		1068640	0					
ANR	1069220	Identifier	refs_match_ctx		1068640	0					
ANR	1069221	Identifier	count		1068640	1					
ANR	1069222	MemberAccess	hash_match_ctx . count		1068640	1					
ANR	1069223	Identifier	hash_match_ctx		1068640	0					
ANR	1069224	Identifier	count		1068640	1					
ANR	1069225	ExpressionStatement	"eprintf ( ""hits: %d\\n"" , hits )"	1039:1:28256:28284	1068640	26	True				
ANR	1069226	CallExpression	"eprintf ( ""hits: %d\\n"" , hits )"		1068640	0					
ANR	1069227	Callee	eprintf		1068640	0					
ANR	1069228	Identifier	eprintf		1068640	0					
ANR	1069229	ArgumentList	"""hits: %d\\n"""		1068640	1					
ANR	1069230	Argument	"""hits: %d\\n"""		1068640	0					
ANR	1069231	PrimaryExpression	"""hits: %d\\n"""		1068640	0					
ANR	1069232	Argument	hits		1068640	1					
ANR	1069233	Identifier	hits		1068640	0					
ANR	1069234	ReturnStatement	return retval ;	1041:1:28288:28301	1068640	27	True				
ANR	1069235	Identifier	retval		1068640	0					
ANR	1069236	ReturnType	static int		1068640	1					
ANR	1069237	Identifier	cmdCheck		1068640	2					
ANR	1069238	ParameterList	"void * data , const char * input"		1068640	3					
ANR	1069239	Parameter	void * data	955:20:25552:25561	1068640	0	True				
ANR	1069240	ParameterType	void *		1068640	0					
ANR	1069241	Identifier	data		1068640	1					
ANR	1069242	Parameter	const char * input	955:32:25564:25580	1068640	1	True				
ANR	1069243	ParameterType	const char *		1068640	0					
ANR	1069244	Identifier	input		1068640	1					
ANR	1069245	CFGEntryNode	ENTRY		1068640		True				
ANR	1069246	CFGExitNode	EXIT		1068640		True				
ANR	1069247	CFGErrorNode	ERROR		1068640		True				
ANR	1069248	Symbol	fcnMatchCB		1068640						
ANR	1069249	Symbol	mincc		1068640						
ANR	1069250	Symbol	data		1068640						
ANR	1069251	Symbol	* input		1068640						
ANR	1069252	Symbol	minsz		1068640						
ANR	1069253	Symbol	core -> offset		1068640						
ANR	1069254	Symbol	bytes_search_ctx . count		1068640						
ANR	1069255	Symbol	useHash		1068640						
ANR	1069256	Symbol	rad		1068640						
ANR	1069257	Symbol	fcni		1068640						
ANR	1069258	Symbol	r_sign_search_new		1068640						
ANR	1069259	Symbol	& hash_match_ctx		1068640						
ANR	1069260	Symbol	core -> blocksize		1068640						
ANR	1069261	Symbol	& graph_match_ctx		1068640						
ANR	1069262	Symbol	NULL		1068640						
ANR	1069263	Symbol	core -> block		1068640						
ANR	1069264	Symbol	useOffset		1068640						
ANR	1069265	Symbol	iter		1068640						
ANR	1069266	Symbol	fcni -> addr		1068640						
ANR	1069267	Symbol	retval		1068640						
ANR	1069268	Symbol	useBytes		1068640						
ANR	1069269	Symbol	input		1068640						
ANR	1069270	Symbol	core		1068640						
ANR	1069271	Symbol	at		1068640						
ANR	1069272	Symbol	refs_match_ctx		1068640						
ANR	1069273	Symbol	r_flag_space_pop		1068640						
ANR	1069274	Symbol	r_config_get_i		1068640						
ANR	1069275	Symbol	true		1068640						
ANR	1069276	Symbol	& refs_match_ctx		1068640						
ANR	1069277	Symbol	* core		1068640						
ANR	1069278	Symbol	r_config_get		1068640						
ANR	1069279	Symbol	useGraph		1068640						
ANR	1069280	Symbol	r_flag_space_push		1068640						
ANR	1069281	Symbol	useRefs		1068640						
ANR	1069282	Symbol	graph_match_ctx		1068640						
ANR	1069283	Symbol	core -> anal		1068640						
ANR	1069284	Symbol	r_cons_is_breaked		1068640						
ANR	1069285	Symbol	graph_match_ctx . count		1068640						
ANR	1069286	Symbol	offset_match_ctx . count		1068640						
ANR	1069287	Symbol	r_sign_search_update		1068640						
ANR	1069288	Symbol	ss		1068640						
ANR	1069289	Symbol	core -> config		1068640						
ANR	1069290	Symbol	hash_match_ctx . count		1068640						
ANR	1069291	Symbol	& offset_match_ctx		1068640						
ANR	1069292	Symbol	& bytes_search_ctx		1068640						
ANR	1069293	Symbol	hash_match_ctx		1068640						
ANR	1069294	Symbol	false		1068640						
ANR	1069295	Symbol	core -> flags		1068640						
ANR	1069296	Symbol	hits		1068640						
ANR	1069297	Symbol	bytes_search_ctx		1068640						
ANR	1069298	Symbol	zign_prefix		1068640						
ANR	1069299	Symbol	* fcni		1068640						
ANR	1069300	Symbol	searchHitCB		1068640						
ANR	1069301	Symbol	refs_match_ctx . count		1068640						
ANR	1069302	Symbol	& at		1068640						
ANR	1069303	Symbol	offset_match_ctx		1068640						
ANR	1069304	Function	cmdSearch	1044:0:28306:28784							
ANR	1069305	FunctionDef	"cmdSearch (void * data , const char * input)"		1069304	0					
ANR	1069306	CompoundStatement		1044:52:28358:28784	1069304	0					
ANR	1069307	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	1045:1:28361:28389	1069304	0	True				
ANR	1069308	IdentifierDecl	* core = ( RCore * ) data		1069304	0					
ANR	1069309	IdentifierDeclType	RCore *		1069304	0					
ANR	1069310	Identifier	core		1069304	1					
ANR	1069311	AssignmentExpression	* core = ( RCore * ) data		1069304	2		=			
ANR	1069312	Identifier	core		1069304	0					
ANR	1069313	CastExpression	( RCore * ) data		1069304	1					
ANR	1069314	CastTarget	RCore *		1069304	0					
ANR	1069315	Identifier	data		1069304	1					
ANR	1069316	SwitchStatement	switch ( * input )		1069304	1					
ANR	1069317	Condition	* input	1047:9:28401:28406	1069304	0	True				
ANR	1069318	UnaryOperationExpression	* input		1069304	0					
ANR	1069319	UnaryOperator	*		1069304	0					
ANR	1069320	Identifier	input		1069304	1					
ANR	1069321	CompoundStatement		4:17:50:50	1069304	1					
ANR	1069322	Label	case 0 :	1048:1:28412:28418	1069304	0	True				
ANR	1069323	Label	case '*' :	1049:1:28421:28429	1069304	1	True				
ANR	1069324	ReturnStatement	"return search ( core , input [ 0 ] == '*' , false ) ;"	1050:2:28433:28477	1069304	2	True				
ANR	1069325	CallExpression	"search ( core , input [ 0 ] == '*' , false )"		1069304	0					
ANR	1069326	Callee	search		1069304	0					
ANR	1069327	Identifier	search		1069304	0					
ANR	1069328	ArgumentList	core		1069304	1					
ANR	1069329	Argument	core		1069304	0					
ANR	1069330	Identifier	core		1069304	0					
ANR	1069331	Argument	input [ 0 ] == '*'		1069304	1					
ANR	1069332	EqualityExpression	input [ 0 ] == '*'		1069304	0		==			
ANR	1069333	ArrayIndexing	input [ 0 ]		1069304	0					
ANR	1069334	Identifier	input		1069304	0					
ANR	1069335	PrimaryExpression	0		1069304	1					
ANR	1069336	PrimaryExpression	'*'		1069304	1					
ANR	1069337	Argument	false		1069304	2					
ANR	1069338	Identifier	false		1069304	0					
ANR	1069339	Label	case 'f' :	1051:1:28480:28488	1069304	3	True				
ANR	1069340	SwitchStatement	switch ( input [ 1 ] )		1069304	4					
ANR	1069341	Condition	input [ 1 ]	1052:10:28500:28507	1069304	0	True				
ANR	1069342	ArrayIndexing	input [ 1 ]		1069304	0					
ANR	1069343	Identifier	input		1069304	0					
ANR	1069344	PrimaryExpression	1		1069304	1					
ANR	1069345	CompoundStatement		9:20:151:151	1069304	1					
ANR	1069346	Label	case 0 :	1053:2:28514:28520	1069304	0	True				
ANR	1069347	Label	case '*' :	1054:2:28524:28532	1069304	1	True				
ANR	1069348	ReturnStatement	"return search ( core , input [ 1 ] == '*' , true ) ;"	1055:3:28537:28580	1069304	2	True				
ANR	1069349	CallExpression	"search ( core , input [ 1 ] == '*' , true )"		1069304	0					
ANR	1069350	Callee	search		1069304	0					
ANR	1069351	Identifier	search		1069304	0					
ANR	1069352	ArgumentList	core		1069304	1					
ANR	1069353	Argument	core		1069304	0					
ANR	1069354	Identifier	core		1069304	0					
ANR	1069355	Argument	input [ 1 ] == '*'		1069304	1					
ANR	1069356	EqualityExpression	input [ 1 ] == '*'		1069304	0		==			
ANR	1069357	ArrayIndexing	input [ 1 ]		1069304	0					
ANR	1069358	Identifier	input		1069304	0					
ANR	1069359	PrimaryExpression	1		1069304	1					
ANR	1069360	PrimaryExpression	'*'		1069304	1					
ANR	1069361	Argument	true		1069304	2					
ANR	1069362	Identifier	true		1069304	0					
ANR	1069363	Label	default :	1056:2:28584:28591	1069304	3	True				
ANR	1069364	Identifier	default		1069304	0					
ANR	1069365	ExpressionStatement	"eprintf ( ""usage: z/[f*]\\n"" )"	1057:3:28596:28623	1069304	4	True				
ANR	1069366	CallExpression	"eprintf ( ""usage: z/[f*]\\n"" )"		1069304	0					
ANR	1069367	Callee	eprintf		1069304	0					
ANR	1069368	Identifier	eprintf		1069304	0					
ANR	1069369	ArgumentList	"""usage: z/[f*]\\n"""		1069304	1					
ANR	1069370	Argument	"""usage: z/[f*]\\n"""		1069304	0					
ANR	1069371	PrimaryExpression	"""usage: z/[f*]\\n"""		1069304	0					
ANR	1069372	ReturnStatement	return false ;	1058:3:28628:28640	1069304	5	True				
ANR	1069373	Identifier	false		1069304	0					
ANR	1069374	Label	case '?' :	1060:1:28647:28655	1069304	5	True				
ANR	1069375	ExpressionStatement	"r_core_cmd_help ( core , help_msg_z_slash )"	1061:2:28659:28699	1069304	6	True				
ANR	1069376	CallExpression	"r_core_cmd_help ( core , help_msg_z_slash )"		1069304	0					
ANR	1069377	Callee	r_core_cmd_help		1069304	0					
ANR	1069378	Identifier	r_core_cmd_help		1069304	0					
ANR	1069379	ArgumentList	core		1069304	1					
ANR	1069380	Argument	core		1069304	0					
ANR	1069381	Identifier	core		1069304	0					
ANR	1069382	Argument	help_msg_z_slash		1069304	1					
ANR	1069383	Identifier	help_msg_z_slash		1069304	0					
ANR	1069384	BreakStatement	break ;	1062:2:28703:28708	1069304	7	True				
ANR	1069385	Label	default :	1063:1:28711:28718	1069304	8	True				
ANR	1069386	Identifier	default		1069304	0					
ANR	1069387	ExpressionStatement	"eprintf ( ""usage: z/[*]\\n"" )"	1064:2:28722:28748	1069304	9	True				
ANR	1069388	CallExpression	"eprintf ( ""usage: z/[*]\\n"" )"		1069304	0					
ANR	1069389	Callee	eprintf		1069304	0					
ANR	1069390	Identifier	eprintf		1069304	0					
ANR	1069391	ArgumentList	"""usage: z/[*]\\n"""		1069304	1					
ANR	1069392	Argument	"""usage: z/[*]\\n"""		1069304	0					
ANR	1069393	PrimaryExpression	"""usage: z/[*]\\n"""		1069304	0					
ANR	1069394	ReturnStatement	return false ;	1065:2:28752:28764	1069304	10	True				
ANR	1069395	Identifier	false		1069304	0					
ANR	1069396	ReturnStatement	return true ;	1068:1:28771:28782	1069304	2	True				
ANR	1069397	Identifier	true		1069304	0					
ANR	1069398	ReturnType	static int		1069304	1					
ANR	1069399	Identifier	cmdSearch		1069304	2					
ANR	1069400	ParameterList	"void * data , const char * input"		1069304	3					
ANR	1069401	Parameter	void * data	1044:21:28327:28336	1069304	0	True				
ANR	1069402	ParameterType	void *		1069304	0					
ANR	1069403	Identifier	data		1069304	1					
ANR	1069404	Parameter	const char * input	1044:33:28339:28355	1069304	1	True				
ANR	1069405	ParameterType	const char *		1069304	0					
ANR	1069406	Identifier	input		1069304	1					
ANR	1069407	CFGEntryNode	ENTRY		1069304		True				
ANR	1069408	CFGExitNode	EXIT		1069304		True				
ANR	1069409	Symbol	input		1069304						
ANR	1069410	Symbol	core		1069304						
ANR	1069411	Symbol	search		1069304						
ANR	1069412	Symbol	data		1069304						
ANR	1069413	Symbol	* input		1069304						
ANR	1069414	Symbol	false		1069304						
ANR	1069415	Symbol	true		1069304						
ANR	1069416	Symbol	help_msg_z_slash		1069304						
ANR	1069417	Function	cmdInfo	1071:0:28787:29074							
ANR	1069418	FunctionDef	"cmdInfo (void * data , const char * input)"		1069417	0					
ANR	1069419	CompoundStatement		1071:50:28837:29074	1069417	0					
ANR	1069420	IfStatement	if ( ! data || ! input )		1069417	0					
ANR	1069421	Condition	! data || ! input	1072:5:28844:28858	1069417	0	True				
ANR	1069422	OrExpression	! data || ! input		1069417	0		||			
ANR	1069423	UnaryOperationExpression	! data		1069417	0					
ANR	1069424	UnaryOperator	!		1069417	0					
ANR	1069425	Identifier	data		1069417	1					
ANR	1069426	UnaryOperationExpression	! input		1069417	1					
ANR	1069427	UnaryOperator	!		1069417	0					
ANR	1069428	Identifier	input		1069417	1					
ANR	1069429	CompoundStatement		2:22:23:23	1069417	1					
ANR	1069430	ReturnStatement	return false ;	1073:2:28865:28877	1069417	0	True				
ANR	1069431	Identifier	false		1069417	0					
ANR	1069432	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	1075:1:28883:28911	1069417	1	True				
ANR	1069433	IdentifierDecl	* core = ( RCore * ) data		1069417	0					
ANR	1069434	IdentifierDeclType	RCore *		1069417	0					
ANR	1069435	Identifier	core		1069417	1					
ANR	1069436	AssignmentExpression	* core = ( RCore * ) data		1069417	2		=			
ANR	1069437	Identifier	core		1069417	0					
ANR	1069438	CastExpression	( RCore * ) data		1069417	1					
ANR	1069439	CastTarget	RCore *		1069417	0					
ANR	1069440	Identifier	data		1069417	1					
ANR	1069441	ExpressionStatement	"r_flag_space_push ( core -> flags , R_FLAGS_FS_SIGNS )"	1076:1:28914:28963	1069417	2	True				
ANR	1069442	CallExpression	"r_flag_space_push ( core -> flags , R_FLAGS_FS_SIGNS )"		1069417	0					
ANR	1069443	Callee	r_flag_space_push		1069417	0					
ANR	1069444	Identifier	r_flag_space_push		1069417	0					
ANR	1069445	ArgumentList	core -> flags		1069417	1					
ANR	1069446	Argument	core -> flags		1069417	0					
ANR	1069447	PtrMemberAccess	core -> flags		1069417	0					
ANR	1069448	Identifier	core		1069417	0					
ANR	1069449	Identifier	flags		1069417	1					
ANR	1069450	Argument	R_FLAGS_FS_SIGNS		1069417	1					
ANR	1069451	Identifier	R_FLAGS_FS_SIGNS		1069417	0					
ANR	1069452	ExpressionStatement	"r_flag_list ( core -> flags , * input , input [ 0 ] ? input + 1 : """" )"	1077:1:28966:29025	1069417	3	True				
ANR	1069453	CallExpression	"r_flag_list ( core -> flags , * input , input [ 0 ] ? input + 1 : """" )"		1069417	0					
ANR	1069454	Callee	r_flag_list		1069417	0					
ANR	1069455	Identifier	r_flag_list		1069417	0					
ANR	1069456	ArgumentList	core -> flags		1069417	1					
ANR	1069457	Argument	core -> flags		1069417	0					
ANR	1069458	PtrMemberAccess	core -> flags		1069417	0					
ANR	1069459	Identifier	core		1069417	0					
ANR	1069460	Identifier	flags		1069417	1					
ANR	1069461	Argument	* input		1069417	1					
ANR	1069462	UnaryOperationExpression	* input		1069417	0					
ANR	1069463	UnaryOperator	*		1069417	0					
ANR	1069464	Identifier	input		1069417	1					
ANR	1069465	Argument	"input [ 0 ] ? input + 1 : """""		1069417	2					
ANR	1069466	ConditionalExpression	"input [ 0 ] ? input + 1 : """""		1069417	0					
ANR	1069467	Condition	input [ 0 ]		1069417	0					
ANR	1069468	ArrayIndexing	input [ 0 ]		1069417	0					
ANR	1069469	Identifier	input		1069417	0					
ANR	1069470	PrimaryExpression	0		1069417	1					
ANR	1069471	AdditiveExpression	input + 1		1069417	1		+			
ANR	1069472	Identifier	input		1069417	0					
ANR	1069473	PrimaryExpression	1		1069417	1					
ANR	1069474	PrimaryExpression	""""""		1069417	2					
ANR	1069475	ExpressionStatement	r_flag_space_pop ( core -> flags )	1078:1:29028:29058	1069417	4	True				
ANR	1069476	CallExpression	r_flag_space_pop ( core -> flags )		1069417	0					
ANR	1069477	Callee	r_flag_space_pop		1069417	0					
ANR	1069478	Identifier	r_flag_space_pop		1069417	0					
ANR	1069479	ArgumentList	core -> flags		1069417	1					
ANR	1069480	Argument	core -> flags		1069417	0					
ANR	1069481	PtrMemberAccess	core -> flags		1069417	0					
ANR	1069482	Identifier	core		1069417	0					
ANR	1069483	Identifier	flags		1069417	1					
ANR	1069484	ReturnStatement	return true ;	1079:1:29061:29072	1069417	5	True				
ANR	1069485	Identifier	true		1069417	0					
ANR	1069486	ReturnType	static int		1069417	1					
ANR	1069487	Identifier	cmdInfo		1069417	2					
ANR	1069488	ParameterList	"void * data , const char * input"		1069417	3					
ANR	1069489	Parameter	void * data	1071:19:28806:28815	1069417	0	True				
ANR	1069490	ParameterType	void *		1069417	0					
ANR	1069491	Identifier	data		1069417	1					
ANR	1069492	Parameter	const char * input	1071:31:28818:28834	1069417	1	True				
ANR	1069493	ParameterType	const char *		1069417	0					
ANR	1069494	Identifier	input		1069417	1					
ANR	1069495	CFGEntryNode	ENTRY		1069417		True				
ANR	1069496	CFGExitNode	EXIT		1069417		True				
ANR	1069497	Symbol	input		1069417						
ANR	1069498	Symbol	core		1069417						
ANR	1069499	Symbol	data		1069417						
ANR	1069500	Symbol	false		1069417						
ANR	1069501	Symbol	* core		1069417						
ANR	1069502	Symbol	* input		1069417						
ANR	1069503	Symbol	true		1069417						
ANR	1069504	Symbol	core -> flags		1069417						
ANR	1069505	Symbol	R_FLAGS_FS_SIGNS		1069417						
ANR	1069506	Function	cmd_zign	1082:0:29077:30029							
ANR	1069507	FunctionDef	"cmd_zign (void * data , const char * input)"		1069506	0					
ANR	1069508	CompoundStatement		1082:51:29128:30029	1069506	0					
ANR	1069509	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	1083:1:29131:29159	1069506	0	True				
ANR	1069510	IdentifierDecl	* core = ( RCore * ) data		1069506	0					
ANR	1069511	IdentifierDeclType	RCore *		1069506	0					
ANR	1069512	Identifier	core		1069506	1					
ANR	1069513	AssignmentExpression	* core = ( RCore * ) data		1069506	2		=			
ANR	1069514	Identifier	core		1069506	0					
ANR	1069515	CastExpression	( RCore * ) data		1069506	1					
ANR	1069516	CastTarget	RCore *		1069506	0					
ANR	1069517	Identifier	data		1069506	1					
ANR	1069518	SwitchStatement	switch ( * input )		1069506	1					
ANR	1069519	Condition	* input	1085:9:29171:29176	1069506	0	True				
ANR	1069520	UnaryOperationExpression	* input		1069506	0					
ANR	1069521	UnaryOperator	*		1069506	0					
ANR	1069522	Identifier	input		1069506	1					
ANR	1069523	CompoundStatement		4:17:50:50	1069506	1					
ANR	1069524	Label	case '\\0' :	1086:1:29182:29191	1069506	0	True				
ANR	1069525	Label	case '*' :	1087:1:29194:29202	1069506	1	True				
ANR	1069526	Label	case 'q' :	1088:1:29205:29213	1069506	2	True				
ANR	1069527	Label	case 'j' :	1089:1:29216:29224	1069506	3	True				
ANR	1069528	ExpressionStatement	"r_sign_list ( core -> anal , input [ 0 ] )"	1090:2:29228:29262	1069506	4	True				
ANR	1069529	CallExpression	"r_sign_list ( core -> anal , input [ 0 ] )"		1069506	0					
ANR	1069530	Callee	r_sign_list		1069506	0					
ANR	1069531	Identifier	r_sign_list		1069506	0					
ANR	1069532	ArgumentList	core -> anal		1069506	1					
ANR	1069533	Argument	core -> anal		1069506	0					
ANR	1069534	PtrMemberAccess	core -> anal		1069506	0					
ANR	1069535	Identifier	core		1069506	0					
ANR	1069536	Identifier	anal		1069506	1					
ANR	1069537	Argument	input [ 0 ]		1069506	1					
ANR	1069538	ArrayIndexing	input [ 0 ]		1069506	0					
ANR	1069539	Identifier	input		1069506	0					
ANR	1069540	PrimaryExpression	0		1069506	1					
ANR	1069541	BreakStatement	break ;	1091:2:29266:29271	1069506	5	True				
ANR	1069542	Label	case 'k' :	1092:1:29274:29282	1069506	6	True				
ANR	1069543	ExpressionStatement	"r_core_cmd0 ( core , ""k anal/zigns/*"" )"	1093:2:29286:29322	1069506	7	True				
ANR	1069544	CallExpression	"r_core_cmd0 ( core , ""k anal/zigns/*"" )"		1069506	0					
ANR	1069545	Callee	r_core_cmd0		1069506	0					
ANR	1069546	Identifier	r_core_cmd0		1069506	0					
ANR	1069547	ArgumentList	core		1069506	1					
ANR	1069548	Argument	core		1069506	0					
ANR	1069549	Identifier	core		1069506	0					
ANR	1069550	Argument	"""k anal/zigns/*"""		1069506	1					
ANR	1069551	PrimaryExpression	"""k anal/zigns/*"""		1069506	0					
ANR	1069552	BreakStatement	break ;	1094:2:29326:29331	1069506	8	True				
ANR	1069553	Label	case '-' :	1095:1:29334:29342	1069506	9	True				
ANR	1069554	ExpressionStatement	"r_sign_delete ( core -> anal , input + 1 )"	1096:2:29346:29383	1069506	10	True				
ANR	1069555	CallExpression	"r_sign_delete ( core -> anal , input + 1 )"		1069506	0					
ANR	1069556	Callee	r_sign_delete		1069506	0					
ANR	1069557	Identifier	r_sign_delete		1069506	0					
ANR	1069558	ArgumentList	core -> anal		1069506	1					
ANR	1069559	Argument	core -> anal		1069506	0					
ANR	1069560	PtrMemberAccess	core -> anal		1069506	0					
ANR	1069561	Identifier	core		1069506	0					
ANR	1069562	Identifier	anal		1069506	1					
ANR	1069563	Argument	input + 1		1069506	1					
ANR	1069564	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069565	Identifier	input		1069506	0					
ANR	1069566	PrimaryExpression	1		1069506	1					
ANR	1069567	BreakStatement	break ;	1097:2:29387:29392	1069506	11	True				
ANR	1069568	Label	case '.' :	1098:1:29395:29403	1069506	12	True				
ANR	1069569	ReturnStatement	"return cmdCheck ( data , input + 1 ) ;"	1099:2:29407:29440	1069506	13	True				
ANR	1069570	CallExpression	"cmdCheck ( data , input + 1 )"		1069506	0					
ANR	1069571	Callee	cmdCheck		1069506	0					
ANR	1069572	Identifier	cmdCheck		1069506	0					
ANR	1069573	ArgumentList	data		1069506	1					
ANR	1069574	Argument	data		1069506	0					
ANR	1069575	Identifier	data		1069506	0					
ANR	1069576	Argument	input + 1		1069506	1					
ANR	1069577	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069578	Identifier	input		1069506	0					
ANR	1069579	PrimaryExpression	1		1069506	1					
ANR	1069580	Label	case 'o' :	1100:1:29443:29451	1069506	14	True				
ANR	1069581	ReturnStatement	"return cmdOpen ( data , input + 1 ) ;"	1101:2:29463:29495	1069506	15	True				
ANR	1069582	CallExpression	"cmdOpen ( data , input + 1 )"		1069506	0					
ANR	1069583	Callee	cmdOpen		1069506	0					
ANR	1069584	Identifier	cmdOpen		1069506	0					
ANR	1069585	ArgumentList	data		1069506	1					
ANR	1069586	Argument	data		1069506	0					
ANR	1069587	Identifier	data		1069506	0					
ANR	1069588	Argument	input + 1		1069506	1					
ANR	1069589	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069590	Identifier	input		1069506	0					
ANR	1069591	PrimaryExpression	1		1069506	1					
ANR	1069592	Label	case 'g' :	1102:1:29498:29506	1069506	16	True				
ANR	1069593	ReturnStatement	"return cmdAdd ( data , ""F"" ) ;"	1103:2:29518:29543	1069506	17	True				
ANR	1069594	CallExpression	"cmdAdd ( data , ""F"" )"		1069506	0					
ANR	1069595	Callee	cmdAdd		1069506	0					
ANR	1069596	Identifier	cmdAdd		1069506	0					
ANR	1069597	ArgumentList	data		1069506	1					
ANR	1069598	Argument	data		1069506	0					
ANR	1069599	Identifier	data		1069506	0					
ANR	1069600	Argument	"""F"""		1069506	1					
ANR	1069601	PrimaryExpression	"""F"""		1069506	0					
ANR	1069602	Label	case 'a' :	1104:1:29546:29554	1069506	18	True				
ANR	1069603	ReturnStatement	"return cmdAdd ( data , input + 1 ) ;"	1105:2:29566:29597	1069506	19	True				
ANR	1069604	CallExpression	"cmdAdd ( data , input + 1 )"		1069506	0					
ANR	1069605	Callee	cmdAdd		1069506	0					
ANR	1069606	Identifier	cmdAdd		1069506	0					
ANR	1069607	ArgumentList	data		1069506	1					
ANR	1069608	Argument	data		1069506	0					
ANR	1069609	Identifier	data		1069506	0					
ANR	1069610	Argument	input + 1		1069506	1					
ANR	1069611	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069612	Identifier	input		1069506	0					
ANR	1069613	PrimaryExpression	1		1069506	1					
ANR	1069614	Label	case 'f' :	1106:1:29600:29608	1069506	20	True				
ANR	1069615	ReturnStatement	"return cmdFlirt ( data , input + 1 ) ;"	1107:2:29620:29653	1069506	21	True				
ANR	1069616	CallExpression	"cmdFlirt ( data , input + 1 )"		1069506	0					
ANR	1069617	Callee	cmdFlirt		1069506	0					
ANR	1069618	Identifier	cmdFlirt		1069506	0					
ANR	1069619	ArgumentList	data		1069506	1					
ANR	1069620	Argument	data		1069506	0					
ANR	1069621	Identifier	data		1069506	0					
ANR	1069622	Argument	input + 1		1069506	1					
ANR	1069623	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069624	Identifier	input		1069506	0					
ANR	1069625	PrimaryExpression	1		1069506	1					
ANR	1069626	Label	case '/' :	1108:1:29656:29664	1069506	22	True				
ANR	1069627	ReturnStatement	"return cmdSearch ( data , input + 1 ) ;"	1109:2:29676:29710	1069506	23	True				
ANR	1069628	CallExpression	"cmdSearch ( data , input + 1 )"		1069506	0					
ANR	1069629	Callee	cmdSearch		1069506	0					
ANR	1069630	Identifier	cmdSearch		1069506	0					
ANR	1069631	ArgumentList	data		1069506	1					
ANR	1069632	Argument	data		1069506	0					
ANR	1069633	Identifier	data		1069506	0					
ANR	1069634	Argument	input + 1		1069506	1					
ANR	1069635	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069636	Identifier	input		1069506	0					
ANR	1069637	PrimaryExpression	1		1069506	1					
ANR	1069638	Label	case 'c' :	1110:1:29713:29721	1069506	24	True				
ANR	1069639	ReturnStatement	"return cmdCompare ( data , input + 1 ) ;"	1111:2:29733:29768	1069506	25	True				
ANR	1069640	CallExpression	"cmdCompare ( data , input + 1 )"		1069506	0					
ANR	1069641	Callee	cmdCompare		1069506	0					
ANR	1069642	Identifier	cmdCompare		1069506	0					
ANR	1069643	ArgumentList	data		1069506	1					
ANR	1069644	Argument	data		1069506	0					
ANR	1069645	Identifier	data		1069506	0					
ANR	1069646	Argument	input + 1		1069506	1					
ANR	1069647	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069648	Identifier	input		1069506	0					
ANR	1069649	PrimaryExpression	1		1069506	1					
ANR	1069650	Label	case 's' :	1112:1:29771:29779	1069506	26	True				
ANR	1069651	ReturnStatement	"return cmdSpace ( data , input + 1 ) ;"	1113:2:29791:29824	1069506	27	True				
ANR	1069652	CallExpression	"cmdSpace ( data , input + 1 )"		1069506	0					
ANR	1069653	Callee	cmdSpace		1069506	0					
ANR	1069654	Identifier	cmdSpace		1069506	0					
ANR	1069655	ArgumentList	data		1069506	1					
ANR	1069656	Argument	data		1069506	0					
ANR	1069657	Identifier	data		1069506	0					
ANR	1069658	Argument	input + 1		1069506	1					
ANR	1069659	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069660	Identifier	input		1069506	0					
ANR	1069661	PrimaryExpression	1		1069506	1					
ANR	1069662	Label	case 'i' :	1114:1:29827:29835	1069506	28	True				
ANR	1069663	ReturnStatement	"return cmdInfo ( data , input + 1 ) ;"	1115:2:29847:29879	1069506	29	True				
ANR	1069664	CallExpression	"cmdInfo ( data , input + 1 )"		1069506	0					
ANR	1069665	Callee	cmdInfo		1069506	0					
ANR	1069666	Identifier	cmdInfo		1069506	0					
ANR	1069667	ArgumentList	data		1069506	1					
ANR	1069668	Argument	data		1069506	0					
ANR	1069669	Identifier	data		1069506	0					
ANR	1069670	Argument	input + 1		1069506	1					
ANR	1069671	AdditiveExpression	input + 1		1069506	0		+			
ANR	1069672	Identifier	input		1069506	0					
ANR	1069673	PrimaryExpression	1		1069506	1					
ANR	1069674	Label	case '?' :	1116:1:29882:29890	1069506	30	True				
ANR	1069675	ExpressionStatement	"r_core_cmd_help ( core , help_msg_z )"	1117:2:29902:29936	1069506	31	True				
ANR	1069676	CallExpression	"r_core_cmd_help ( core , help_msg_z )"		1069506	0					
ANR	1069677	Callee	r_core_cmd_help		1069506	0					
ANR	1069678	Identifier	r_core_cmd_help		1069506	0					
ANR	1069679	ArgumentList	core		1069506	1					
ANR	1069680	Argument	core		1069506	0					
ANR	1069681	Identifier	core		1069506	0					
ANR	1069682	Argument	help_msg_z		1069506	1					
ANR	1069683	Identifier	help_msg_z		1069506	0					
ANR	1069684	BreakStatement	break ;	1118:2:29940:29945	1069506	32	True				
ANR	1069685	Label	default :	1119:1:29948:29955	1069506	33	True				
ANR	1069686	Identifier	default		1069506	0					
ANR	1069687	ExpressionStatement	"r_core_cmd_help ( core , help_msg_z )"	1120:2:29959:29993	1069506	34	True				
ANR	1069688	CallExpression	"r_core_cmd_help ( core , help_msg_z )"		1069506	0					
ANR	1069689	Callee	r_core_cmd_help		1069506	0					
ANR	1069690	Identifier	r_core_cmd_help		1069506	0					
ANR	1069691	ArgumentList	core		1069506	1					
ANR	1069692	Argument	core		1069506	0					
ANR	1069693	Identifier	core		1069506	0					
ANR	1069694	Argument	help_msg_z		1069506	1					
ANR	1069695	Identifier	help_msg_z		1069506	0					
ANR	1069696	ReturnStatement	return false ;	1121:2:29997:30009	1069506	35	True				
ANR	1069697	Identifier	false		1069506	0					
ANR	1069698	ReturnStatement	return true ;	1124:1:30016:30027	1069506	2	True				
ANR	1069699	Identifier	true		1069506	0					
ANR	1069700	ReturnType	static int		1069506	1					
ANR	1069701	Identifier	cmd_zign		1069506	2					
ANR	1069702	ParameterList	"void * data , const char * input"		1069506	3					
ANR	1069703	Parameter	void * data	1082:20:29097:29106	1069506	0	True				
ANR	1069704	ParameterType	void *		1069506	0					
ANR	1069705	Identifier	data		1069506	1					
ANR	1069706	Parameter	const char * input	1082:32:29109:29125	1069506	1	True				
ANR	1069707	ParameterType	const char *		1069506	0					
ANR	1069708	Identifier	input		1069506	1					
ANR	1069709	CFGEntryNode	ENTRY		1069506		True				
ANR	1069710	CFGExitNode	EXIT		1069506		True				
ANR	1069711	Symbol	data		1069506						
ANR	1069712	Symbol	cmdInfo		1069506						
ANR	1069713	Symbol	cmdFlirt		1069506						
ANR	1069714	Symbol	cmdSearch		1069506						
ANR	1069715	Symbol	* input		1069506						
ANR	1069716	Symbol	* core		1069506						
ANR	1069717	Symbol	false		1069506						
ANR	1069718	Symbol	cmdSpace		1069506						
ANR	1069719	Symbol	cmdOpen		1069506						
ANR	1069720	Symbol	core -> anal		1069506						
ANR	1069721	Symbol	cmdCheck		1069506						
ANR	1069722	Symbol	input		1069506						
ANR	1069723	Symbol	core		1069506						
ANR	1069724	Symbol	cmdCompare		1069506						
ANR	1069725	Symbol	true		1069506						
ANR	1069726	Symbol	cmdAdd		1069506						
ANR	1069727	Symbol	help_msg_z		1069506						
