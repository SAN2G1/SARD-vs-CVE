command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5014146	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_arm_pseudo.c								
ANR	5014147	Function	replace	12:0:213:6226							
ANR	5014148	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5014147	0					
ANR	5014149	CompoundStatement		12:63:276:6226	5014147	0					
ANR	5014150	Statement	define	13:1:279:284	5014147	0	True				
ANR	5014151	Statement	MAXPSEUDOOPS	13:8:286:297	5014147	1	True				
ANR	5014152	Statement	10	13:21:299:300	5014147	2	True				
ANR	5014153	IdentifierDeclStatement	"int i , j , k , d ;"	14:1:303:317	5014147	3	True				
ANR	5014154	IdentifierDecl	i		5014147	0					
ANR	5014155	IdentifierDeclType	int		5014147	0					
ANR	5014156	Identifier	i		5014147	1					
ANR	5014157	IdentifierDecl	j		5014147	1					
ANR	5014158	IdentifierDeclType	int		5014147	0					
ANR	5014159	Identifier	j		5014147	1					
ANR	5014160	IdentifierDecl	k		5014147	2					
ANR	5014161	IdentifierDeclType	int		5014147	0					
ANR	5014162	Identifier	k		5014147	1					
ANR	5014163	IdentifierDecl	d		5014147	3					
ANR	5014164	IdentifierDeclType	int		5014147	0					
ANR	5014165	Identifier	d		5014147	1					
ANR	5014166	IdentifierDeclStatement	char ch ;	15:1:320:327	5014147	4	True				
ANR	5014167	IdentifierDecl	ch		5014147	0					
ANR	5014168	IdentifierDeclType	char		5014147	0					
ANR	5014169	Identifier	ch		5014147	1					
ANR	5014170	ClassDefStatement	"struct { int narg ; char * op ; char * str ; int args [ MAXPSEUDOOPS ] ; } ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } } ;"	16:1:330:5106	5014147	5	True				
ANR	5014171	IdentifierDecl	"ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } }"		5014147	0					
ANR	5014172	IdentifierDeclType	 [ ]		5014147	0					
ANR	5014173	Identifier	ops		5014147	1					
ANR	5014174	AssignmentExpression	"ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } }"		5014147	2		=			
ANR	5014175	Identifier	ops		5014147	0					
ANR	5014176	InitializerList	0		5014147	1					
ANR	5014177	InitializerList	0		5014147	0					
ANR	5014178	PrimaryExpression	0		5014147	0					
ANR	5014179	PrimaryExpression	"""abs"""		5014147	1					
ANR	5014180	PrimaryExpression	"""# = abs(#)"""		5014147	2					
ANR	5014181	InitializerList	1		5014147	3					
ANR	5014182	PrimaryExpression	1		5014147	0					
ANR	5014183	PrimaryExpression	1		5014147	1					
ANR	5014184	InitializerList	0		5014147	1					
ANR	5014185	PrimaryExpression	0		5014147	0					
ANR	5014186	PrimaryExpression	"""adc"""		5014147	1					
ANR	5014187	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014188	InitializerList	1		5014147	3					
ANR	5014189	PrimaryExpression	1		5014147	0					
ANR	5014190	PrimaryExpression	2		5014147	1					
ANR	5014191	PrimaryExpression	3		5014147	2					
ANR	5014192	InitializerList	3		5014147	2					
ANR	5014193	PrimaryExpression	3		5014147	0					
ANR	5014194	PrimaryExpression	"""add"""		5014147	1					
ANR	5014195	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014196	InitializerList	1		5014147	3					
ANR	5014197	PrimaryExpression	1		5014147	0					
ANR	5014198	PrimaryExpression	2		5014147	1					
ANR	5014199	PrimaryExpression	3		5014147	2					
ANR	5014200	InitializerList	2		5014147	3					
ANR	5014201	PrimaryExpression	2		5014147	0					
ANR	5014202	PrimaryExpression	"""add"""		5014147	1					
ANR	5014203	PrimaryExpression	"""# += #"""		5014147	2					
ANR	5014204	InitializerList	1		5014147	3					
ANR	5014205	PrimaryExpression	1		5014147	0					
ANR	5014206	PrimaryExpression	2		5014147	1					
ANR	5014207	InitializerList	2		5014147	4					
ANR	5014208	PrimaryExpression	2		5014147	0					
ANR	5014209	PrimaryExpression	"""adds"""		5014147	1					
ANR	5014210	PrimaryExpression	"""# += #"""		5014147	2					
ANR	5014211	InitializerList	1		5014147	3					
ANR	5014212	PrimaryExpression	1		5014147	0					
ANR	5014213	PrimaryExpression	2		5014147	1					
ANR	5014214	InitializerList	3		5014147	5					
ANR	5014215	PrimaryExpression	3		5014147	0					
ANR	5014216	PrimaryExpression	"""adds"""		5014147	1					
ANR	5014217	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014218	InitializerList	1		5014147	3					
ANR	5014219	PrimaryExpression	1		5014147	0					
ANR	5014220	PrimaryExpression	2		5014147	1					
ANR	5014221	PrimaryExpression	3		5014147	2					
ANR	5014222	InitializerList	3		5014147	6					
ANR	5014223	PrimaryExpression	3		5014147	0					
ANR	5014224	PrimaryExpression	"""addw"""		5014147	1					
ANR	5014225	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014226	InitializerList	1		5014147	3					
ANR	5014227	PrimaryExpression	1		5014147	0					
ANR	5014228	PrimaryExpression	2		5014147	1					
ANR	5014229	PrimaryExpression	3		5014147	2					
ANR	5014230	InitializerList	3		5014147	7					
ANR	5014231	PrimaryExpression	3		5014147	0					
ANR	5014232	PrimaryExpression	"""add.w"""		5014147	1					
ANR	5014233	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014234	InitializerList	1		5014147	3					
ANR	5014235	PrimaryExpression	1		5014147	0					
ANR	5014236	PrimaryExpression	2		5014147	1					
ANR	5014237	PrimaryExpression	3		5014147	2					
ANR	5014238	InitializerList	0		5014147	8					
ANR	5014239	PrimaryExpression	0		5014147	0					
ANR	5014240	PrimaryExpression	"""adf"""		5014147	1					
ANR	5014241	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014242	InitializerList	1		5014147	3					
ANR	5014243	PrimaryExpression	1		5014147	0					
ANR	5014244	PrimaryExpression	2		5014147	1					
ANR	5014245	PrimaryExpression	3		5014147	2					
ANR	5014246	InitializerList	0		5014147	9					
ANR	5014247	PrimaryExpression	0		5014147	0					
ANR	5014248	PrimaryExpression	"""adrp"""		5014147	1					
ANR	5014249	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014250	InitializerList	1		5014147	3					
ANR	5014251	PrimaryExpression	1		5014147	0					
ANR	5014252	PrimaryExpression	2		5014147	1					
ANR	5014253	InitializerList	0		5014147	10					
ANR	5014254	PrimaryExpression	0		5014147	0					
ANR	5014255	PrimaryExpression	"""adr"""		5014147	1					
ANR	5014256	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014257	InitializerList	1		5014147	3					
ANR	5014258	PrimaryExpression	1		5014147	0					
ANR	5014259	PrimaryExpression	2		5014147	1					
ANR	5014260	InitializerList	0		5014147	11					
ANR	5014261	PrimaryExpression	0		5014147	0					
ANR	5014262	PrimaryExpression	"""and"""		5014147	1					
ANR	5014263	PrimaryExpression	"""# = # & #"""		5014147	2					
ANR	5014264	InitializerList	1		5014147	3					
ANR	5014265	PrimaryExpression	1		5014147	0					
ANR	5014266	PrimaryExpression	2		5014147	1					
ANR	5014267	PrimaryExpression	3		5014147	2					
ANR	5014268	InitializerList	0		5014147	12					
ANR	5014269	PrimaryExpression	0		5014147	0					
ANR	5014270	PrimaryExpression	"""ands"""		5014147	1					
ANR	5014271	PrimaryExpression	"""# &= #"""		5014147	2					
ANR	5014272	InitializerList	1		5014147	3					
ANR	5014273	PrimaryExpression	1		5014147	0					
ANR	5014274	PrimaryExpression	2		5014147	1					
ANR	5014275	InitializerList	0		5014147	13					
ANR	5014276	PrimaryExpression	0		5014147	0					
ANR	5014277	PrimaryExpression	"""asls"""		5014147	1					
ANR	5014278	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014279	InitializerList	1		5014147	3					
ANR	5014280	PrimaryExpression	1		5014147	0					
ANR	5014281	PrimaryExpression	2		5014147	1					
ANR	5014282	PrimaryExpression	3		5014147	2					
ANR	5014283	InitializerList	0		5014147	14					
ANR	5014284	PrimaryExpression	0		5014147	0					
ANR	5014285	PrimaryExpression	"""asl"""		5014147	1					
ANR	5014286	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014287	InitializerList	1		5014147	3					
ANR	5014288	PrimaryExpression	1		5014147	0					
ANR	5014289	PrimaryExpression	2		5014147	1					
ANR	5014290	PrimaryExpression	3		5014147	2					
ANR	5014291	InitializerList	0		5014147	15					
ANR	5014292	PrimaryExpression	0		5014147	0					
ANR	5014293	PrimaryExpression	"""asrs"""		5014147	1					
ANR	5014294	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014295	InitializerList	1		5014147	3					
ANR	5014296	PrimaryExpression	1		5014147	0					
ANR	5014297	PrimaryExpression	2		5014147	1					
ANR	5014298	PrimaryExpression	3		5014147	2					
ANR	5014299	InitializerList	0		5014147	16					
ANR	5014300	PrimaryExpression	0		5014147	0					
ANR	5014301	PrimaryExpression	"""asr"""		5014147	1					
ANR	5014302	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014303	InitializerList	1		5014147	3					
ANR	5014304	PrimaryExpression	1		5014147	0					
ANR	5014305	PrimaryExpression	2		5014147	1					
ANR	5014306	PrimaryExpression	3		5014147	2					
ANR	5014307	InitializerList	0		5014147	17					
ANR	5014308	PrimaryExpression	0		5014147	0					
ANR	5014309	PrimaryExpression	"""b"""		5014147	1					
ANR	5014310	PrimaryExpression	"""jmp #"""		5014147	2					
ANR	5014311	InitializerList	1		5014147	3					
ANR	5014312	PrimaryExpression	1		5014147	0					
ANR	5014313	InitializerList	0		5014147	18					
ANR	5014314	PrimaryExpression	0		5014147	0					
ANR	5014315	PrimaryExpression	"""cbz"""		5014147	1					
ANR	5014316	PrimaryExpression	"""if !# jmp #"""		5014147	2					
ANR	5014317	InitializerList	1		5014147	3					
ANR	5014318	PrimaryExpression	1		5014147	0					
ANR	5014319	PrimaryExpression	2		5014147	1					
ANR	5014320	InitializerList	0		5014147	19					
ANR	5014321	PrimaryExpression	0		5014147	0					
ANR	5014322	PrimaryExpression	"""cbnz"""		5014147	1					
ANR	5014323	PrimaryExpression	"""if # jmp #"""		5014147	2					
ANR	5014324	InitializerList	1		5014147	3					
ANR	5014325	PrimaryExpression	1		5014147	0					
ANR	5014326	PrimaryExpression	2		5014147	1					
ANR	5014327	InitializerList	0		5014147	20					
ANR	5014328	PrimaryExpression	0		5014147	0					
ANR	5014329	PrimaryExpression	"""b.w"""		5014147	1					
ANR	5014330	PrimaryExpression	"""jmp #"""		5014147	2					
ANR	5014331	InitializerList	1		5014147	3					
ANR	5014332	PrimaryExpression	1		5014147	0					
ANR	5014333	InitializerList	0		5014147	21					
ANR	5014334	PrimaryExpression	0		5014147	0					
ANR	5014335	PrimaryExpression	"""b.gt"""		5014147	1					
ANR	5014336	PrimaryExpression	"""jmp ifgt #"""		5014147	2					
ANR	5014337	InitializerList	1		5014147	3					
ANR	5014338	PrimaryExpression	1		5014147	0					
ANR	5014339	InitializerList	0		5014147	22					
ANR	5014340	PrimaryExpression	0		5014147	0					
ANR	5014341	PrimaryExpression	"""b.le"""		5014147	1					
ANR	5014342	PrimaryExpression	"""jmp ifle #"""		5014147	2					
ANR	5014343	InitializerList	1		5014147	3					
ANR	5014344	PrimaryExpression	1		5014147	0					
ANR	5014345	InitializerList	0		5014147	23					
ANR	5014346	PrimaryExpression	0		5014147	0					
ANR	5014347	PrimaryExpression	"""beq lr"""		5014147	1					
ANR	5014348	PrimaryExpression	"""ifeq ret"""		5014147	2					
ANR	5014349	InitializerList	0		5014147	3					
ANR	5014350	PrimaryExpression	0		5014147	0					
ANR	5014351	InitializerList	0		5014147	24					
ANR	5014352	PrimaryExpression	0		5014147	0					
ANR	5014353	PrimaryExpression	"""beq"""		5014147	1					
ANR	5014354	PrimaryExpression	"""je #"""		5014147	2					
ANR	5014355	InitializerList	1		5014147	3					
ANR	5014356	PrimaryExpression	1		5014147	0					
ANR	5014357	InitializerList	0		5014147	25					
ANR	5014358	PrimaryExpression	0		5014147	0					
ANR	5014359	PrimaryExpression	"""call"""		5014147	1					
ANR	5014360	PrimaryExpression	"""# ()"""		5014147	2					
ANR	5014361	InitializerList	1		5014147	3					
ANR	5014362	PrimaryExpression	1		5014147	0					
ANR	5014363	InitializerList	0		5014147	26					
ANR	5014364	PrimaryExpression	0		5014147	0					
ANR	5014365	PrimaryExpression	"""bl"""		5014147	1					
ANR	5014366	PrimaryExpression	"""# ()"""		5014147	2					
ANR	5014367	InitializerList	1		5014147	3					
ANR	5014368	PrimaryExpression	1		5014147	0					
ANR	5014369	InitializerList	0		5014147	27					
ANR	5014370	PrimaryExpression	0		5014147	0					
ANR	5014371	PrimaryExpression	"""blx"""		5014147	1					
ANR	5014372	PrimaryExpression	"""# ()"""		5014147	2					
ANR	5014373	InitializerList	1		5014147	3					
ANR	5014374	PrimaryExpression	1		5014147	0					
ANR	5014375	InitializerList	0		5014147	28					
ANR	5014376	PrimaryExpression	0		5014147	0					
ANR	5014377	PrimaryExpression	"""bx lr"""		5014147	1					
ANR	5014378	PrimaryExpression	"""ret"""		5014147	2					
ANR	5014379	InitializerList	0		5014147	3					
ANR	5014380	PrimaryExpression	0		5014147	0					
ANR	5014381	InitializerList	0		5014147	29					
ANR	5014382	PrimaryExpression	0		5014147	0					
ANR	5014383	PrimaryExpression	"""bxeq"""		5014147	1					
ANR	5014384	PrimaryExpression	"""je #"""		5014147	2					
ANR	5014385	InitializerList	1		5014147	3					
ANR	5014386	PrimaryExpression	1		5014147	0					
ANR	5014387	InitializerList	0		5014147	30					
ANR	5014388	PrimaryExpression	0		5014147	0					
ANR	5014389	PrimaryExpression	"""cmf"""		5014147	1					
ANR	5014390	PrimaryExpression	"""if (# == #)"""		5014147	2					
ANR	5014391	InitializerList	1		5014147	3					
ANR	5014392	PrimaryExpression	1		5014147	0					
ANR	5014393	PrimaryExpression	2		5014147	1					
ANR	5014394	InitializerList	0		5014147	31					
ANR	5014395	PrimaryExpression	0		5014147	0					
ANR	5014396	PrimaryExpression	"""cmn"""		5014147	1					
ANR	5014397	PrimaryExpression	"""if (# != #)"""		5014147	2					
ANR	5014398	InitializerList	1		5014147	3					
ANR	5014399	PrimaryExpression	1		5014147	0					
ANR	5014400	PrimaryExpression	2		5014147	1					
ANR	5014401	InitializerList	0		5014147	32					
ANR	5014402	PrimaryExpression	0		5014147	0					
ANR	5014403	PrimaryExpression	"""cmp"""		5014147	1					
ANR	5014404	PrimaryExpression	"""if (# == #)"""		5014147	2					
ANR	5014405	InitializerList	1		5014147	3					
ANR	5014406	PrimaryExpression	1		5014147	0					
ANR	5014407	PrimaryExpression	2		5014147	1					
ANR	5014408	InitializerList	0		5014147	33					
ANR	5014409	PrimaryExpression	0		5014147	0					
ANR	5014410	PrimaryExpression	"""fcmp"""		5014147	1					
ANR	5014411	PrimaryExpression	"""if (# == #)"""		5014147	2					
ANR	5014412	InitializerList	1		5014147	3					
ANR	5014413	PrimaryExpression	1		5014147	0					
ANR	5014414	PrimaryExpression	2		5014147	1					
ANR	5014415	InitializerList	0		5014147	34					
ANR	5014416	PrimaryExpression	0		5014147	0					
ANR	5014417	PrimaryExpression	"""tst"""		5014147	1					
ANR	5014418	PrimaryExpression	"""if (# == #)"""		5014147	2					
ANR	5014419	InitializerList	1		5014147	3					
ANR	5014420	PrimaryExpression	1		5014147	0					
ANR	5014421	PrimaryExpression	2		5014147	1					
ANR	5014422	InitializerList	0		5014147	35					
ANR	5014423	PrimaryExpression	0		5014147	0					
ANR	5014424	PrimaryExpression	"""dvf"""		5014147	1					
ANR	5014425	PrimaryExpression	"""# = # / #"""		5014147	2					
ANR	5014426	InitializerList	1		5014147	3					
ANR	5014427	PrimaryExpression	1		5014147	0					
ANR	5014428	PrimaryExpression	2		5014147	1					
ANR	5014429	PrimaryExpression	3		5014147	2					
ANR	5014430	InitializerList	0		5014147	36					
ANR	5014431	PrimaryExpression	0		5014147	0					
ANR	5014432	PrimaryExpression	"""eor"""		5014147	1					
ANR	5014433	PrimaryExpression	"""# = # ^ #"""		5014147	2					
ANR	5014434	InitializerList	1		5014147	3					
ANR	5014435	PrimaryExpression	1		5014147	0					
ANR	5014436	PrimaryExpression	2		5014147	1					
ANR	5014437	PrimaryExpression	3		5014147	2					
ANR	5014438	InitializerList	1		5014147	37					
ANR	5014439	PrimaryExpression	1		5014147	0					
ANR	5014440	PrimaryExpression	"""bkpt"""		5014147	1					
ANR	5014441	PrimaryExpression	"""breakpoint #"""		5014147	2					
ANR	5014442	InitializerList	1		5014147	3					
ANR	5014443	PrimaryExpression	1		5014147	0					
ANR	5014444	InitializerList	1		5014147	38					
ANR	5014445	PrimaryExpression	1		5014147	0					
ANR	5014446	PrimaryExpression	"""udf"""		5014147	1					
ANR	5014447	PrimaryExpression	"""undefined #"""		5014147	2					
ANR	5014448	InitializerList	1		5014147	3					
ANR	5014449	PrimaryExpression	1		5014147	0					
ANR	5014450	InitializerList	2		5014147	39					
ANR	5014451	PrimaryExpression	2		5014147	0					
ANR	5014452	PrimaryExpression	"""sxtb"""		5014147	1					
ANR	5014453	PrimaryExpression	"""# = (char) #"""		5014147	2					
ANR	5014454	InitializerList	1		5014147	3					
ANR	5014455	PrimaryExpression	1		5014147	0					
ANR	5014456	PrimaryExpression	2		5014147	1					
ANR	5014457	InitializerList	2		5014147	40					
ANR	5014458	PrimaryExpression	2		5014147	0					
ANR	5014459	PrimaryExpression	"""sxth"""		5014147	1					
ANR	5014460	PrimaryExpression	"""# = (short) #"""		5014147	2					
ANR	5014461	InitializerList	1		5014147	3					
ANR	5014462	PrimaryExpression	1		5014147	0					
ANR	5014463	PrimaryExpression	2		5014147	1					
ANR	5014464	InitializerList	0		5014147	41					
ANR	5014465	PrimaryExpression	0		5014147	0					
ANR	5014466	PrimaryExpression	"""fdv"""		5014147	1					
ANR	5014467	PrimaryExpression	"""# = # / #"""		5014147	2					
ANR	5014468	InitializerList	1		5014147	3					
ANR	5014469	PrimaryExpression	1		5014147	0					
ANR	5014470	PrimaryExpression	2		5014147	1					
ANR	5014471	PrimaryExpression	3		5014147	2					
ANR	5014472	InitializerList	0		5014147	42					
ANR	5014473	PrimaryExpression	0		5014147	0					
ANR	5014474	PrimaryExpression	"""fml"""		5014147	1					
ANR	5014475	PrimaryExpression	"""# = # * #"""		5014147	2					
ANR	5014476	InitializerList	1		5014147	3					
ANR	5014477	PrimaryExpression	1		5014147	0					
ANR	5014478	PrimaryExpression	2		5014147	1					
ANR	5014479	PrimaryExpression	3		5014147	2					
ANR	5014480	InitializerList	2		5014147	43					
ANR	5014481	PrimaryExpression	2		5014147	0					
ANR	5014482	PrimaryExpression	"""ldr"""		5014147	1					
ANR	5014483	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014484	InitializerList	1		5014147	3					
ANR	5014485	PrimaryExpression	1		5014147	0					
ANR	5014486	PrimaryExpression	2		5014147	1					
ANR	5014487	InitializerList	2		5014147	44					
ANR	5014488	PrimaryExpression	2		5014147	0					
ANR	5014489	PrimaryExpression	"""ldrh"""		5014147	1					
ANR	5014490	PrimaryExpression	"""# = (word) #"""		5014147	2					
ANR	5014491	InitializerList	1		5014147	3					
ANR	5014492	PrimaryExpression	1		5014147	0					
ANR	5014493	PrimaryExpression	2		5014147	1					
ANR	5014494	InitializerList	3		5014147	45					
ANR	5014495	PrimaryExpression	3		5014147	0					
ANR	5014496	PrimaryExpression	"""ldrh"""		5014147	1					
ANR	5014497	PrimaryExpression	"""# = (word) # + #"""		5014147	2					
ANR	5014498	InitializerList	1		5014147	3					
ANR	5014499	PrimaryExpression	1		5014147	0					
ANR	5014500	PrimaryExpression	2		5014147	1					
ANR	5014501	PrimaryExpression	3		5014147	2					
ANR	5014502	InitializerList	2		5014147	46					
ANR	5014503	PrimaryExpression	2		5014147	0					
ANR	5014504	PrimaryExpression	"""ldrb"""		5014147	1					
ANR	5014505	PrimaryExpression	"""# = (byte) #"""		5014147	2					
ANR	5014506	InitializerList	1		5014147	3					
ANR	5014507	PrimaryExpression	1		5014147	0					
ANR	5014508	PrimaryExpression	2		5014147	1					
ANR	5014509	InitializerList	3		5014147	47					
ANR	5014510	PrimaryExpression	3		5014147	0					
ANR	5014511	PrimaryExpression	"""ldrb"""		5014147	1					
ANR	5014512	PrimaryExpression	"""# = (byte) # + #"""		5014147	2					
ANR	5014513	InitializerList	1		5014147	3					
ANR	5014514	PrimaryExpression	1		5014147	0					
ANR	5014515	PrimaryExpression	2		5014147	1					
ANR	5014516	PrimaryExpression	3		5014147	2					
ANR	5014517	InitializerList	2		5014147	48					
ANR	5014518	PrimaryExpression	2		5014147	0					
ANR	5014519	PrimaryExpression	"""ldrsb"""		5014147	1					
ANR	5014520	PrimaryExpression	"""# = (byte) #"""		5014147	2					
ANR	5014521	InitializerList	1		5014147	3					
ANR	5014522	PrimaryExpression	1		5014147	0					
ANR	5014523	PrimaryExpression	2		5014147	1					
ANR	5014524	InitializerList	2		5014147	49					
ANR	5014525	PrimaryExpression	2		5014147	0					
ANR	5014526	PrimaryExpression	"""ldr.w"""		5014147	1					
ANR	5014527	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014528	InitializerList	1		5014147	3					
ANR	5014529	PrimaryExpression	1		5014147	0					
ANR	5014530	PrimaryExpression	2		5014147	1					
ANR	5014531	InitializerList	2		5014147	50					
ANR	5014532	PrimaryExpression	2		5014147	0					
ANR	5014533	PrimaryExpression	"""ldrsw"""		5014147	1					
ANR	5014534	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014535	InitializerList	1		5014147	3					
ANR	5014536	PrimaryExpression	1		5014147	0					
ANR	5014537	PrimaryExpression	2		5014147	1					
ANR	5014538	InitializerList	3		5014147	51					
ANR	5014539	PrimaryExpression	3		5014147	0					
ANR	5014540	PrimaryExpression	"""ldr"""		5014147	1					
ANR	5014541	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014542	InitializerList	1		5014147	3					
ANR	5014543	PrimaryExpression	1		5014147	0					
ANR	5014544	PrimaryExpression	2		5014147	1					
ANR	5014545	PrimaryExpression	3		5014147	2					
ANR	5014546	InitializerList	3		5014147	52					
ANR	5014547	PrimaryExpression	3		5014147	0					
ANR	5014548	PrimaryExpression	"""ldrb"""		5014147	1					
ANR	5014549	PrimaryExpression	"""# = (byte) # + #"""		5014147	2					
ANR	5014550	InitializerList	1		5014147	3					
ANR	5014551	PrimaryExpression	1		5014147	0					
ANR	5014552	PrimaryExpression	2		5014147	1					
ANR	5014553	PrimaryExpression	3		5014147	2					
ANR	5014554	InitializerList	3		5014147	53					
ANR	5014555	PrimaryExpression	3		5014147	0					
ANR	5014556	PrimaryExpression	"""ldrsb"""		5014147	1					
ANR	5014557	PrimaryExpression	"""# = (byte) # + #"""		5014147	2					
ANR	5014558	InitializerList	1		5014147	3					
ANR	5014559	PrimaryExpression	1		5014147	0					
ANR	5014560	PrimaryExpression	2		5014147	1					
ANR	5014561	PrimaryExpression	3		5014147	2					
ANR	5014562	InitializerList	3		5014147	54					
ANR	5014563	PrimaryExpression	3		5014147	0					
ANR	5014564	PrimaryExpression	"""ldr.w"""		5014147	1					
ANR	5014565	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014566	InitializerList	1		5014147	3					
ANR	5014567	PrimaryExpression	1		5014147	0					
ANR	5014568	PrimaryExpression	2		5014147	1					
ANR	5014569	PrimaryExpression	3		5014147	2					
ANR	5014570	InitializerList	3		5014147	55					
ANR	5014571	PrimaryExpression	3		5014147	0					
ANR	5014572	PrimaryExpression	"""ldrsw"""		5014147	1					
ANR	5014573	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014574	InitializerList	1		5014147	3					
ANR	5014575	PrimaryExpression	1		5014147	0					
ANR	5014576	PrimaryExpression	2		5014147	1					
ANR	5014577	PrimaryExpression	3		5014147	2					
ANR	5014578	InitializerList	0		5014147	56					
ANR	5014579	PrimaryExpression	0		5014147	0					
ANR	5014580	PrimaryExpression	"""lsl"""		5014147	1					
ANR	5014581	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014582	InitializerList	1		5014147	3					
ANR	5014583	PrimaryExpression	1		5014147	0					
ANR	5014584	PrimaryExpression	2		5014147	1					
ANR	5014585	PrimaryExpression	3		5014147	2					
ANR	5014586	InitializerList	0		5014147	57					
ANR	5014587	PrimaryExpression	0		5014147	0					
ANR	5014588	PrimaryExpression	"""lsr"""		5014147	1					
ANR	5014589	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014590	InitializerList	1		5014147	3					
ANR	5014591	PrimaryExpression	1		5014147	0					
ANR	5014592	PrimaryExpression	2		5014147	1					
ANR	5014593	PrimaryExpression	3		5014147	2					
ANR	5014594	InitializerList	0		5014147	58					
ANR	5014595	PrimaryExpression	0		5014147	0					
ANR	5014596	PrimaryExpression	"""mov"""		5014147	1					
ANR	5014597	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014598	InitializerList	1		5014147	3					
ANR	5014599	PrimaryExpression	1		5014147	0					
ANR	5014600	PrimaryExpression	2		5014147	1					
ANR	5014601	InitializerList	0		5014147	59					
ANR	5014602	PrimaryExpression	0		5014147	0					
ANR	5014603	PrimaryExpression	"""fmov"""		5014147	1					
ANR	5014604	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014605	InitializerList	1		5014147	3					
ANR	5014606	PrimaryExpression	1		5014147	0					
ANR	5014607	PrimaryExpression	2		5014147	1					
ANR	5014608	InitializerList	0		5014147	60					
ANR	5014609	PrimaryExpression	0		5014147	0					
ANR	5014610	PrimaryExpression	"""mvn"""		5014147	1					
ANR	5014611	PrimaryExpression	"""# = ~#"""		5014147	2					
ANR	5014612	InitializerList	1		5014147	3					
ANR	5014613	PrimaryExpression	1		5014147	0					
ANR	5014614	PrimaryExpression	2		5014147	1					
ANR	5014615	InitializerList	0		5014147	61					
ANR	5014616	PrimaryExpression	0		5014147	0					
ANR	5014617	PrimaryExpression	"""movz"""		5014147	1					
ANR	5014618	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014619	InitializerList	1		5014147	3					
ANR	5014620	PrimaryExpression	1		5014147	0					
ANR	5014621	PrimaryExpression	2		5014147	1					
ANR	5014622	InitializerList	0		5014147	62					
ANR	5014623	PrimaryExpression	0		5014147	0					
ANR	5014624	PrimaryExpression	"""movk"""		5014147	1					
ANR	5014625	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014626	InitializerList	1		5014147	3					
ANR	5014627	PrimaryExpression	1		5014147	0					
ANR	5014628	PrimaryExpression	2		5014147	1					
ANR	5014629	InitializerList	0		5014147	63					
ANR	5014630	PrimaryExpression	0		5014147	0					
ANR	5014631	PrimaryExpression	"""movn"""		5014147	1					
ANR	5014632	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014633	InitializerList	1		5014147	3					
ANR	5014634	PrimaryExpression	1		5014147	0					
ANR	5014635	PrimaryExpression	2		5014147	1					
ANR	5014636	InitializerList	0		5014147	64					
ANR	5014637	PrimaryExpression	0		5014147	0					
ANR	5014638	PrimaryExpression	"""neg"""		5014147	1					
ANR	5014639	PrimaryExpression	"""# = !#"""		5014147	2					
ANR	5014640	InitializerList	1		5014147	3					
ANR	5014641	PrimaryExpression	1		5014147	0					
ANR	5014642	PrimaryExpression	2		5014147	1					
ANR	5014643	InitializerList	0		5014147	65					
ANR	5014644	PrimaryExpression	0		5014147	0					
ANR	5014645	PrimaryExpression	"""sxtw"""		5014147	1					
ANR	5014646	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014647	InitializerList	1		5014147	3					
ANR	5014648	PrimaryExpression	1		5014147	0					
ANR	5014649	PrimaryExpression	2		5014147	1					
ANR	5014650	InitializerList	0		5014147	66					
ANR	5014651	PrimaryExpression	0		5014147	0					
ANR	5014652	PrimaryExpression	"""stur"""		5014147	1					
ANR	5014653	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014654	InitializerList	2		5014147	3					
ANR	5014655	PrimaryExpression	2		5014147	0					
ANR	5014656	PrimaryExpression	1		5014147	1					
ANR	5014657	InitializerList	0		5014147	67					
ANR	5014658	PrimaryExpression	0		5014147	0					
ANR	5014659	PrimaryExpression	"""stp"""		5014147	1					
ANR	5014660	PrimaryExpression	"""# = (#, 2)"""		5014147	2					
ANR	5014661	InitializerList	3		5014147	3					
ANR	5014662	PrimaryExpression	3		5014147	0					
ANR	5014663	PrimaryExpression	1		5014147	1					
ANR	5014664	InitializerList	0		5014147	68					
ANR	5014665	PrimaryExpression	0		5014147	0					
ANR	5014666	PrimaryExpression	"""ldp"""		5014147	1					
ANR	5014667	PrimaryExpression	"""(#, 2) = 3"""		5014147	2					
ANR	5014668	InitializerList	1		5014147	3					
ANR	5014669	PrimaryExpression	1		5014147	0					
ANR	5014670	InitializerList	0		5014147	69					
ANR	5014671	PrimaryExpression	0		5014147	0					
ANR	5014672	PrimaryExpression	"""vmov.i32"""		5014147	1					
ANR	5014673	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014674	InitializerList	1		5014147	3					
ANR	5014675	PrimaryExpression	1		5014147	0					
ANR	5014676	PrimaryExpression	2		5014147	1					
ANR	5014677	InitializerList	0		5014147	70					
ANR	5014678	PrimaryExpression	0		5014147	0					
ANR	5014679	PrimaryExpression	"""muf"""		5014147	1					
ANR	5014680	PrimaryExpression	"""# = # * #"""		5014147	2					
ANR	5014681	InitializerList	1		5014147	3					
ANR	5014682	PrimaryExpression	1		5014147	0					
ANR	5014683	PrimaryExpression	2		5014147	1					
ANR	5014684	PrimaryExpression	3		5014147	2					
ANR	5014685	InitializerList	0		5014147	71					
ANR	5014686	PrimaryExpression	0		5014147	0					
ANR	5014687	PrimaryExpression	"""mul"""		5014147	1					
ANR	5014688	PrimaryExpression	"""# = # * #"""		5014147	2					
ANR	5014689	InitializerList	1		5014147	3					
ANR	5014690	PrimaryExpression	1		5014147	0					
ANR	5014691	PrimaryExpression	2		5014147	1					
ANR	5014692	PrimaryExpression	3		5014147	2					
ANR	5014693	InitializerList	0		5014147	72					
ANR	5014694	PrimaryExpression	0		5014147	0					
ANR	5014695	PrimaryExpression	"""fmul"""		5014147	1					
ANR	5014696	PrimaryExpression	"""# = # * #"""		5014147	2					
ANR	5014697	InitializerList	1		5014147	3					
ANR	5014698	PrimaryExpression	1		5014147	0					
ANR	5014699	PrimaryExpression	2		5014147	1					
ANR	5014700	PrimaryExpression	3		5014147	2					
ANR	5014701	InitializerList	0		5014147	73					
ANR	5014702	PrimaryExpression	0		5014147	0					
ANR	5014703	PrimaryExpression	"""muls"""		5014147	1					
ANR	5014704	PrimaryExpression	"""# = # * #"""		5014147	2					
ANR	5014705	InitializerList	1		5014147	3					
ANR	5014706	PrimaryExpression	1		5014147	0					
ANR	5014707	PrimaryExpression	2		5014147	1					
ANR	5014708	PrimaryExpression	3		5014147	2					
ANR	5014709	InitializerList	0		5014147	74					
ANR	5014710	PrimaryExpression	0		5014147	0					
ANR	5014711	PrimaryExpression	"""div"""		5014147	1					
ANR	5014712	PrimaryExpression	"""# = # / #"""		5014147	2					
ANR	5014713	InitializerList	1		5014147	3					
ANR	5014714	PrimaryExpression	1		5014147	0					
ANR	5014715	PrimaryExpression	2		5014147	1					
ANR	5014716	PrimaryExpression	3		5014147	2					
ANR	5014717	InitializerList	0		5014147	75					
ANR	5014718	PrimaryExpression	0		5014147	0					
ANR	5014719	PrimaryExpression	"""fdiv"""		5014147	1					
ANR	5014720	PrimaryExpression	"""# = # / #"""		5014147	2					
ANR	5014721	InitializerList	1		5014147	3					
ANR	5014722	PrimaryExpression	1		5014147	0					
ANR	5014723	PrimaryExpression	2		5014147	1					
ANR	5014724	PrimaryExpression	3		5014147	2					
ANR	5014725	InitializerList	0		5014147	76					
ANR	5014726	PrimaryExpression	0		5014147	0					
ANR	5014727	PrimaryExpression	"""udiv"""		5014147	1					
ANR	5014728	PrimaryExpression	"""# = (unsigned) # / #"""		5014147	2					
ANR	5014729	InitializerList	1		5014147	3					
ANR	5014730	PrimaryExpression	1		5014147	0					
ANR	5014731	PrimaryExpression	2		5014147	1					
ANR	5014732	PrimaryExpression	3		5014147	2					
ANR	5014733	InitializerList	0		5014147	77					
ANR	5014734	PrimaryExpression	0		5014147	0					
ANR	5014735	PrimaryExpression	"""orr"""		5014147	1					
ANR	5014736	PrimaryExpression	"""# = # | #"""		5014147	2					
ANR	5014737	InitializerList	1		5014147	3					
ANR	5014738	PrimaryExpression	1		5014147	0					
ANR	5014739	PrimaryExpression	2		5014147	1					
ANR	5014740	PrimaryExpression	3		5014147	2					
ANR	5014741	InitializerList	0		5014147	78					
ANR	5014742	PrimaryExpression	0		5014147	0					
ANR	5014743	PrimaryExpression	"""rmf"""		5014147	1					
ANR	5014744	PrimaryExpression	"""# = # % #"""		5014147	2					
ANR	5014745	InitializerList	1		5014147	3					
ANR	5014746	PrimaryExpression	1		5014147	0					
ANR	5014747	PrimaryExpression	2		5014147	1					
ANR	5014748	PrimaryExpression	3		5014147	2					
ANR	5014749	InitializerList	0		5014147	79					
ANR	5014750	PrimaryExpression	0		5014147	0					
ANR	5014751	PrimaryExpression	"""bge"""		5014147	1					
ANR	5014752	PrimaryExpression	"""(>=) goto #"""		5014147	2					
ANR	5014753	InitializerList	1		5014147	3					
ANR	5014754	PrimaryExpression	1		5014147	0					
ANR	5014755	InitializerList	0		5014147	80					
ANR	5014756	PrimaryExpression	0		5014147	0					
ANR	5014757	PrimaryExpression	"""sbc"""		5014147	1					
ANR	5014758	PrimaryExpression	"""# = # - #"""		5014147	2					
ANR	5014759	InitializerList	1		5014147	3					
ANR	5014760	PrimaryExpression	1		5014147	0					
ANR	5014761	PrimaryExpression	2		5014147	1					
ANR	5014762	PrimaryExpression	3		5014147	2					
ANR	5014763	InitializerList	0		5014147	81					
ANR	5014764	PrimaryExpression	0		5014147	0					
ANR	5014765	PrimaryExpression	"""sqt"""		5014147	1					
ANR	5014766	PrimaryExpression	"""# = sqrt(#)"""		5014147	2					
ANR	5014767	InitializerList	1		5014147	3					
ANR	5014768	PrimaryExpression	1		5014147	0					
ANR	5014769	PrimaryExpression	2		5014147	1					
ANR	5014770	InitializerList	0		5014147	82					
ANR	5014771	PrimaryExpression	0		5014147	0					
ANR	5014772	PrimaryExpression	"""lsrs"""		5014147	1					
ANR	5014773	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014774	InitializerList	1		5014147	3					
ANR	5014775	PrimaryExpression	1		5014147	0					
ANR	5014776	PrimaryExpression	2		5014147	1					
ANR	5014777	PrimaryExpression	3		5014147	2					
ANR	5014778	InitializerList	0		5014147	83					
ANR	5014779	PrimaryExpression	0		5014147	0					
ANR	5014780	PrimaryExpression	"""lsls"""		5014147	1					
ANR	5014781	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014782	InitializerList	1		5014147	3					
ANR	5014783	PrimaryExpression	1		5014147	0					
ANR	5014784	PrimaryExpression	2		5014147	1					
ANR	5014785	PrimaryExpression	3		5014147	2					
ANR	5014786	InitializerList	0		5014147	84					
ANR	5014787	PrimaryExpression	0		5014147	0					
ANR	5014788	PrimaryExpression	"""lsr"""		5014147	1					
ANR	5014789	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014790	InitializerList	1		5014147	3					
ANR	5014791	PrimaryExpression	1		5014147	0					
ANR	5014792	PrimaryExpression	2		5014147	1					
ANR	5014793	PrimaryExpression	3		5014147	2					
ANR	5014794	InitializerList	0		5014147	85					
ANR	5014795	PrimaryExpression	0		5014147	0					
ANR	5014796	PrimaryExpression	"""lsl"""		5014147	1					
ANR	5014797	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014798	InitializerList	1		5014147	3					
ANR	5014799	PrimaryExpression	1		5014147	0					
ANR	5014800	PrimaryExpression	2		5014147	1					
ANR	5014801	PrimaryExpression	3		5014147	2					
ANR	5014802	InitializerList	2		5014147	86					
ANR	5014803	PrimaryExpression	2		5014147	0					
ANR	5014804	PrimaryExpression	"""str"""		5014147	1					
ANR	5014805	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014806	InitializerList	2		5014147	3					
ANR	5014807	PrimaryExpression	2		5014147	0					
ANR	5014808	PrimaryExpression	1		5014147	1					
ANR	5014809	InitializerList	2		5014147	87					
ANR	5014810	PrimaryExpression	2		5014147	0					
ANR	5014811	PrimaryExpression	"""strb"""		5014147	1					
ANR	5014812	PrimaryExpression	"""# = (byte) #"""		5014147	2					
ANR	5014813	InitializerList	2		5014147	3					
ANR	5014814	PrimaryExpression	2		5014147	0					
ANR	5014815	PrimaryExpression	1		5014147	1					
ANR	5014816	InitializerList	2		5014147	88					
ANR	5014817	PrimaryExpression	2		5014147	0					
ANR	5014818	PrimaryExpression	"""strh"""		5014147	1					
ANR	5014819	PrimaryExpression	"""# = (half) #"""		5014147	2					
ANR	5014820	InitializerList	2		5014147	3					
ANR	5014821	PrimaryExpression	2		5014147	0					
ANR	5014822	PrimaryExpression	1		5014147	1					
ANR	5014823	InitializerList	2		5014147	89					
ANR	5014824	PrimaryExpression	2		5014147	0					
ANR	5014825	PrimaryExpression	"""strh.w"""		5014147	1					
ANR	5014826	PrimaryExpression	"""# = (half) #"""		5014147	2					
ANR	5014827	InitializerList	2		5014147	3					
ANR	5014828	PrimaryExpression	2		5014147	0					
ANR	5014829	PrimaryExpression	1		5014147	1					
ANR	5014830	InitializerList	3		5014147	90					
ANR	5014831	PrimaryExpression	3		5014147	0					
ANR	5014832	PrimaryExpression	"""str"""		5014147	1					
ANR	5014833	PrimaryExpression	"""# + # = #"""		5014147	2					
ANR	5014834	InitializerList	2		5014147	3					
ANR	5014835	PrimaryExpression	2		5014147	0					
ANR	5014836	PrimaryExpression	3		5014147	1					
ANR	5014837	PrimaryExpression	1		5014147	2					
ANR	5014838	InitializerList	3		5014147	91					
ANR	5014839	PrimaryExpression	3		5014147	0					
ANR	5014840	PrimaryExpression	"""strb"""		5014147	1					
ANR	5014841	PrimaryExpression	"""# + # = (byte) #"""		5014147	2					
ANR	5014842	InitializerList	2		5014147	3					
ANR	5014843	PrimaryExpression	2		5014147	0					
ANR	5014844	PrimaryExpression	3		5014147	1					
ANR	5014845	PrimaryExpression	1		5014147	2					
ANR	5014846	InitializerList	3		5014147	92					
ANR	5014847	PrimaryExpression	3		5014147	0					
ANR	5014848	PrimaryExpression	"""strh"""		5014147	1					
ANR	5014849	PrimaryExpression	"""# + # = (half) #"""		5014147	2					
ANR	5014850	InitializerList	2		5014147	3					
ANR	5014851	PrimaryExpression	2		5014147	0					
ANR	5014852	PrimaryExpression	3		5014147	1					
ANR	5014853	PrimaryExpression	1		5014147	2					
ANR	5014854	InitializerList	3		5014147	93					
ANR	5014855	PrimaryExpression	3		5014147	0					
ANR	5014856	PrimaryExpression	"""strh.w"""		5014147	1					
ANR	5014857	PrimaryExpression	"""# + # = (half) #"""		5014147	2					
ANR	5014858	InitializerList	2		5014147	3					
ANR	5014859	PrimaryExpression	2		5014147	0					
ANR	5014860	PrimaryExpression	3		5014147	1					
ANR	5014861	PrimaryExpression	1		5014147	2					
ANR	5014862	InitializerList	3		5014147	94					
ANR	5014863	PrimaryExpression	3		5014147	0					
ANR	5014864	PrimaryExpression	"""sub"""		5014147	1					
ANR	5014865	PrimaryExpression	"""# = # - #"""		5014147	2					
ANR	5014866	InitializerList	1		5014147	3					
ANR	5014867	PrimaryExpression	1		5014147	0					
ANR	5014868	PrimaryExpression	2		5014147	1					
ANR	5014869	PrimaryExpression	3		5014147	2					
ANR	5014870	InitializerList	3		5014147	95					
ANR	5014871	PrimaryExpression	3		5014147	0					
ANR	5014872	PrimaryExpression	"""subs"""		5014147	1					
ANR	5014873	PrimaryExpression	"""# = # - #"""		5014147	2					
ANR	5014874	InitializerList	1		5014147	3					
ANR	5014875	PrimaryExpression	1		5014147	0					
ANR	5014876	PrimaryExpression	2		5014147	1					
ANR	5014877	PrimaryExpression	3		5014147	2					
ANR	5014878	InitializerList	3		5014147	96					
ANR	5014879	PrimaryExpression	3		5014147	0					
ANR	5014880	PrimaryExpression	"""fsub"""		5014147	1					
ANR	5014881	PrimaryExpression	"""# = # - #"""		5014147	2					
ANR	5014882	InitializerList	1		5014147	3					
ANR	5014883	PrimaryExpression	1		5014147	0					
ANR	5014884	PrimaryExpression	2		5014147	1					
ANR	5014885	PrimaryExpression	3		5014147	2					
ANR	5014886	InitializerList	2		5014147	97					
ANR	5014887	PrimaryExpression	2		5014147	0					
ANR	5014888	PrimaryExpression	"""sub"""		5014147	1					
ANR	5014889	PrimaryExpression	"""# -= #"""		5014147	2					
ANR	5014890	InitializerList	1		5014147	3					
ANR	5014891	PrimaryExpression	1		5014147	0					
ANR	5014892	PrimaryExpression	2		5014147	1					
ANR	5014893	InitializerList	2		5014147	98					
ANR	5014894	PrimaryExpression	2		5014147	0					
ANR	5014895	PrimaryExpression	"""subs"""		5014147	1					
ANR	5014896	PrimaryExpression	"""# -= #"""		5014147	2					
ANR	5014897	InitializerList	1		5014147	3					
ANR	5014898	PrimaryExpression	1		5014147	0					
ANR	5014899	PrimaryExpression	2		5014147	1					
ANR	5014900	InitializerList	0		5014147	99					
ANR	5014901	PrimaryExpression	0		5014147	0					
ANR	5014902	PrimaryExpression	"""swp"""		5014147	1					
ANR	5014903	PrimaryExpression	"""swap(#, 2)"""		5014147	2					
ANR	5014904	InitializerList	1		5014147	3					
ANR	5014905	PrimaryExpression	1		5014147	0					
ANR	5014906	InitializerList	0		5014147	100					
ANR	5014907	PrimaryExpression	0		5014147	0					
ANR	5014908	PrimaryExpression	"""movs"""		5014147	1					
ANR	5014909	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014910	InitializerList	1		5014147	3					
ANR	5014911	PrimaryExpression	1		5014147	0					
ANR	5014912	PrimaryExpression	2		5014147	1					
ANR	5014913	InitializerList	0		5014147	101					
ANR	5014914	PrimaryExpression	0		5014147	0					
ANR	5014915	PrimaryExpression	"""movw"""		5014147	1					
ANR	5014916	PrimaryExpression	"""# = #"""		5014147	2					
ANR	5014917	InitializerList	1		5014147	3					
ANR	5014918	PrimaryExpression	1		5014147	0					
ANR	5014919	PrimaryExpression	2		5014147	1					
ANR	5014920	InitializerList	0		5014147	102					
ANR	5014921	PrimaryExpression	0		5014147	0					
ANR	5014922	PrimaryExpression	"""movt"""		5014147	1					
ANR	5014923	PrimaryExpression	"""# |= # << 16"""		5014147	2					
ANR	5014924	InitializerList	1		5014147	3					
ANR	5014925	PrimaryExpression	1		5014147	0					
ANR	5014926	PrimaryExpression	2		5014147	1					
ANR	5014927	InitializerList	0		5014147	103					
ANR	5014928	PrimaryExpression	0		5014147	0					
ANR	5014929	PrimaryExpression	"""vmov"""		5014147	1					
ANR	5014930	PrimaryExpression	"""# = (float) # . #"""		5014147	2					
ANR	5014931	InitializerList	1		5014147	3					
ANR	5014932	PrimaryExpression	1		5014147	0					
ANR	5014933	PrimaryExpression	2		5014147	1					
ANR	5014934	PrimaryExpression	3		5014147	2					
ANR	5014935	InitializerList	0		5014147	104					
ANR	5014936	PrimaryExpression	0		5014147	0					
ANR	5014937	PrimaryExpression	"""vdiv.f64"""		5014147	1					
ANR	5014938	PrimaryExpression	"""# = (float) # / #"""		5014147	2					
ANR	5014939	InitializerList	1		5014147	3					
ANR	5014940	PrimaryExpression	1		5014147	0					
ANR	5014941	PrimaryExpression	2		5014147	1					
ANR	5014942	PrimaryExpression	3		5014147	2					
ANR	5014943	InitializerList	0		5014147	105					
ANR	5014944	PrimaryExpression	0		5014147	0					
ANR	5014945	PrimaryExpression	"""addw"""		5014147	1					
ANR	5014946	PrimaryExpression	"""# = # + #"""		5014147	2					
ANR	5014947	InitializerList	1		5014147	3					
ANR	5014948	PrimaryExpression	1		5014147	0					
ANR	5014949	PrimaryExpression	2		5014147	1					
ANR	5014950	PrimaryExpression	3		5014147	2					
ANR	5014951	InitializerList	0		5014147	106					
ANR	5014952	PrimaryExpression	0		5014147	0					
ANR	5014953	PrimaryExpression	"""sub.w"""		5014147	1					
ANR	5014954	PrimaryExpression	"""# = # - #"""		5014147	2					
ANR	5014955	InitializerList	1		5014147	3					
ANR	5014956	PrimaryExpression	1		5014147	0					
ANR	5014957	PrimaryExpression	2		5014147	1					
ANR	5014958	PrimaryExpression	3		5014147	2					
ANR	5014959	InitializerList	0		5014147	107					
ANR	5014960	PrimaryExpression	0		5014147	0					
ANR	5014961	PrimaryExpression	"""tst.w"""		5014147	1					
ANR	5014962	PrimaryExpression	"""if (# == #)"""		5014147	2					
ANR	5014963	InitializerList	1		5014147	3					
ANR	5014964	PrimaryExpression	1		5014147	0					
ANR	5014965	PrimaryExpression	2		5014147	1					
ANR	5014966	InitializerList	0		5014147	108					
ANR	5014967	PrimaryExpression	0		5014147	0					
ANR	5014968	PrimaryExpression	"""lsr.w"""		5014147	1					
ANR	5014969	PrimaryExpression	"""# = # >> #"""		5014147	2					
ANR	5014970	InitializerList	1		5014147	3					
ANR	5014971	PrimaryExpression	1		5014147	0					
ANR	5014972	PrimaryExpression	2		5014147	1					
ANR	5014973	PrimaryExpression	3		5014147	2					
ANR	5014974	InitializerList	0		5014147	109					
ANR	5014975	PrimaryExpression	0		5014147	0					
ANR	5014976	PrimaryExpression	"""lsl.w"""		5014147	1					
ANR	5014977	PrimaryExpression	"""# = # << #"""		5014147	2					
ANR	5014978	InitializerList	1		5014147	3					
ANR	5014979	PrimaryExpression	1		5014147	0					
ANR	5014980	PrimaryExpression	2		5014147	1					
ANR	5014981	PrimaryExpression	3		5014147	2					
ANR	5014982	InitializerList	0		5014147	110					
ANR	5014983	PrimaryExpression	0		5014147	0					
ANR	5014984	PrimaryExpression	"""pop.w"""		5014147	1					
ANR	5014985	PrimaryExpression	"""pop #"""		5014147	2					
ANR	5014986	InitializerList	1		5014147	3					
ANR	5014987	PrimaryExpression	1		5014147	0					
ANR	5014988	InitializerList	0		5014147	111					
ANR	5014989	PrimaryExpression	0		5014147	0					
ANR	5014990	PrimaryExpression	"""vpop"""		5014147	1					
ANR	5014991	PrimaryExpression	"""pop #"""		5014147	2					
ANR	5014992	InitializerList	1		5014147	3					
ANR	5014993	PrimaryExpression	1		5014147	0					
ANR	5014994	InitializerList	0		5014147	112					
ANR	5014995	PrimaryExpression	0		5014147	0					
ANR	5014996	PrimaryExpression	"""vpush"""		5014147	1					
ANR	5014997	PrimaryExpression	"""push #"""		5014147	2					
ANR	5014998	InitializerList	1		5014147	3					
ANR	5014999	PrimaryExpression	1		5014147	0					
ANR	5015000	InitializerList	0		5014147	113					
ANR	5015001	PrimaryExpression	0		5014147	0					
ANR	5015002	PrimaryExpression	"""push.w"""		5014147	1					
ANR	5015003	PrimaryExpression	"""push #"""		5014147	2					
ANR	5015004	InitializerList	1		5014147	3					
ANR	5015005	PrimaryExpression	1		5014147	0					
ANR	5015006	InitializerList	0		5014147	114					
ANR	5015007	PrimaryExpression	0		5014147	0					
ANR	5015008	Identifier	NULL		5014147	1					
ANR	5015009	IfStatement	if ( ! newstr )		5014147	6					
ANR	5015010	Condition	! newstr	139:5:5113:5119	5014147	0	True				
ANR	5015011	UnaryOperationExpression	! newstr		5014147	0					
ANR	5015012	UnaryOperator	!		5014147	0					
ANR	5015013	Identifier	newstr		5014147	1					
ANR	5015014	CompoundStatement		128:14:4845:4845	5014147	1					
ANR	5015015	ReturnStatement	return false ;	140:2:5126:5138	5014147	0	True				
ANR	5015016	Identifier	false		5014147	0					
ANR	5015017	ForStatement	for ( i = 0 ; ops [ i ] . op ; i ++ )		5014147	7					
ANR	5015018	ForInit	i = 0 ;	143:6:5150:5155	5014147	0	True				
ANR	5015019	AssignmentExpression	i = 0		5014147	0		=			
ANR	5015020	Identifier	i		5014147	0					
ANR	5015021	PrimaryExpression	0		5014147	1					
ANR	5015022	Condition	ops [ i ] . op	143:13:5157:5165	5014147	1	True				
ANR	5015023	MemberAccess	ops [ i ] . op		5014147	0					
ANR	5015024	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015025	Identifier	ops		5014147	0					
ANR	5015026	Identifier	i		5014147	1					
ANR	5015027	Identifier	op		5014147	1					
ANR	5015028	PostIncDecOperationExpression	i ++	143:24:5168:5170	5014147	2	True				
ANR	5015029	Identifier	i		5014147	0					
ANR	5015030	IncDec	++		5014147	1					
ANR	5015031	CompoundStatement		132:29:4896:4896	5014147	3					
ANR	5015032	IfStatement	if ( ops [ i ] . narg )		5014147	0					
ANR	5015033	Condition	ops [ i ] . narg	144:6:5181:5191	5014147	0	True				
ANR	5015034	MemberAccess	ops [ i ] . narg		5014147	0					
ANR	5015035	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015036	Identifier	ops		5014147	0					
ANR	5015037	Identifier	i		5014147	1					
ANR	5015038	Identifier	narg		5014147	1					
ANR	5015039	CompoundStatement		133:19:4917:4917	5014147	1					
ANR	5015040	IfStatement	if ( argc - 1 != ops [ i ] . narg )		5014147	0					
ANR	5015041	Condition	argc - 1 != ops [ i ] . narg	145:7:5203:5225	5014147	0	True				
ANR	5015042	EqualityExpression	argc - 1 != ops [ i ] . narg		5014147	0		!=			
ANR	5015043	AdditiveExpression	argc - 1		5014147	0		-			
ANR	5015044	Identifier	argc		5014147	0					
ANR	5015045	PrimaryExpression	1		5014147	1					
ANR	5015046	MemberAccess	ops [ i ] . narg		5014147	1					
ANR	5015047	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015048	Identifier	ops		5014147	0					
ANR	5015049	Identifier	i		5014147	1					
ANR	5015050	Identifier	narg		5014147	1					
ANR	5015051	CompoundStatement		134:32:4951:4951	5014147	1					
ANR	5015052	ContinueStatement	continue ;	146:4:5234:5242	5014147	0	True				
ANR	5015053	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5014147	1					
ANR	5015054	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	149:6:5259:5286	5014147	0	True				
ANR	5015055	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5014147	0					
ANR	5015056	UnaryOperator	!		5014147	0					
ANR	5015057	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5014147	1					
ANR	5015058	Callee	strcmp		5014147	0					
ANR	5015059	Identifier	strcmp		5014147	0					
ANR	5015060	ArgumentList	ops [ i ] . op		5014147	1					
ANR	5015061	Argument	ops [ i ] . op		5014147	0					
ANR	5015062	MemberAccess	ops [ i ] . op		5014147	0					
ANR	5015063	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015064	Identifier	ops		5014147	0					
ANR	5015065	Identifier	i		5014147	1					
ANR	5015066	Identifier	op		5014147	1					
ANR	5015067	Argument	argv [ 0 ]		5014147	1					
ANR	5015068	ArrayIndexing	argv [ 0 ]		5014147	0					
ANR	5015069	Identifier	argv		5014147	0					
ANR	5015070	PrimaryExpression	0		5014147	1					
ANR	5015071	CompoundStatement		138:36:5012:5012	5014147	1					
ANR	5015072	IfStatement	if ( newstr )		5014147	0					
ANR	5015073	Condition	newstr	150:7:5298:5303	5014147	0	True				
ANR	5015074	Identifier	newstr		5014147	0					
ANR	5015075	CompoundStatement		139:15:5029:5029	5014147	1					
ANR	5015076	ExpressionStatement	d = 0	151:4:5312:5317	5014147	0	True				
ANR	5015077	AssignmentExpression	d = 0		5014147	0		=			
ANR	5015078	Identifier	d		5014147	0					
ANR	5015079	PrimaryExpression	0		5014147	1					
ANR	5015080	ExpressionStatement	j = 0	152:4:5323:5328	5014147	1	True				
ANR	5015081	AssignmentExpression	j = 0		5014147	0		=			
ANR	5015082	Identifier	j		5014147	0					
ANR	5015083	PrimaryExpression	0		5014147	1					
ANR	5015084	ExpressionStatement	ch = ops [ i ] . str [ j ]	153:4:5334:5352	5014147	2	True				
ANR	5015085	AssignmentExpression	ch = ops [ i ] . str [ j ]		5014147	0		=			
ANR	5015086	Identifier	ch		5014147	0					
ANR	5015087	ArrayIndexing	ops [ i ] . str [ j ]		5014147	1					
ANR	5015088	MemberAccess	ops [ i ] . str		5014147	0					
ANR	5015089	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015090	Identifier	ops		5014147	0					
ANR	5015091	Identifier	i		5014147	1					
ANR	5015092	Identifier	str		5014147	1					
ANR	5015093	Identifier	j		5014147	1					
ANR	5015094	ForStatement	"for ( j = 0 , k = 0 ; ch != '\\0' ; j ++ , k ++ )"		5014147	3					
ANR	5015095	ForInit	"j = 0 , k = 0 ;"	154:9:5363:5375	5014147	0	True				
ANR	5015096	Expression	"j = 0 , k = 0"		5014147	0					
ANR	5015097	AssignmentExpression	j = 0		5014147	0		=			
ANR	5015098	Identifier	j		5014147	0					
ANR	5015099	PrimaryExpression	0		5014147	1					
ANR	5015100	AssignmentExpression	k = 0		5014147	1		=			
ANR	5015101	Identifier	k		5014147	0					
ANR	5015102	PrimaryExpression	0		5014147	1					
ANR	5015103	Condition	ch != '\\0'	154:23:5377:5386	5014147	1	True				
ANR	5015104	EqualityExpression	ch != '\\0'		5014147	0		!=			
ANR	5015105	Identifier	ch		5014147	0					
ANR	5015106	PrimaryExpression	'\\0'		5014147	1					
ANR	5015107	Expression	"j ++ , k ++"	154:35:5389:5396	5014147	2	True				
ANR	5015108	PostIncDecOperationExpression	j ++		5014147	0					
ANR	5015109	Identifier	j		5014147	0					
ANR	5015110	IncDec	++		5014147	1					
ANR	5015111	PostIncDecOperationExpression	k ++		5014147	1					
ANR	5015112	Identifier	k		5014147	0					
ANR	5015113	IncDec	++		5014147	1					
ANR	5015114	CompoundStatement		143:45:5122:5122	5014147	3					
ANR	5015115	ExpressionStatement	ch = ops [ i ] . str [ j ]	155:5:5406:5424	5014147	0	True				
ANR	5015116	AssignmentExpression	ch = ops [ i ] . str [ j ]		5014147	0		=			
ANR	5015117	Identifier	ch		5014147	0					
ANR	5015118	ArrayIndexing	ops [ i ] . str [ j ]		5014147	1					
ANR	5015119	MemberAccess	ops [ i ] . str		5014147	0					
ANR	5015120	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015121	Identifier	ops		5014147	0					
ANR	5015122	Identifier	i		5014147	1					
ANR	5015123	Identifier	str		5014147	1					
ANR	5015124	Identifier	j		5014147	1					
ANR	5015125	IfStatement	if ( ch == '#' )		5014147	1					
ANR	5015126	Condition	ch == '#'	156:9:5435:5443	5014147	0	True				
ANR	5015127	EqualityExpression	ch == '#'		5014147	0		==			
ANR	5015128	Identifier	ch		5014147	0					
ANR	5015129	PrimaryExpression	'#'		5014147	1					
ANR	5015130	CompoundStatement		156:6:5401:5426	5014147	1					
ANR	5015131	IfStatement	if ( d >= MAXPSEUDOOPS )		5014147	0					
ANR	5015132	Condition	d >= MAXPSEUDOOPS	157:10:5458:5474	5014147	0	True				
ANR	5015133	RelationalExpression	d >= MAXPSEUDOOPS		5014147	0		>=			
ANR	5015134	Identifier	d		5014147	0					
ANR	5015135	Identifier	MAXPSEUDOOPS		5014147	1					
ANR	5015136	CompoundStatement		146:29:5200:5200	5014147	1					
ANR	5015137	ContinueStatement	continue ;	159:7:5525:5533	5014147	0	True				
ANR	5015138	IdentifierDeclStatement	int idx = ops [ i ] . args [ d ] ;	161:6:5549:5573	5014147	1	True				
ANR	5015139	IdentifierDecl	idx = ops [ i ] . args [ d ]		5014147	0					
ANR	5015140	IdentifierDeclType	int		5014147	0					
ANR	5015141	Identifier	idx		5014147	1					
ANR	5015142	AssignmentExpression	idx = ops [ i ] . args [ d ]		5014147	2		=			
ANR	5015143	Identifier	idx		5014147	0					
ANR	5015144	ArrayIndexing	ops [ i ] . args [ d ]		5014147	1					
ANR	5015145	MemberAccess	ops [ i ] . args		5014147	0					
ANR	5015146	ArrayIndexing	ops [ i ]		5014147	0					
ANR	5015147	Identifier	ops		5014147	0					
ANR	5015148	Identifier	i		5014147	1					
ANR	5015149	Identifier	args		5014147	1					
ANR	5015150	Identifier	d		5014147	1					
ANR	5015151	ExpressionStatement	d ++	162:6:5581:5584	5014147	2	True				
ANR	5015152	PostIncDecOperationExpression	d ++		5014147	0					
ANR	5015153	Identifier	d		5014147	0					
ANR	5015154	IncDec	++		5014147	1					
ANR	5015155	IfStatement	if ( idx <= 0 )		5014147	3					
ANR	5015156	Condition	idx <= 0	163:10:5596:5603	5014147	0	True				
ANR	5015157	RelationalExpression	idx <= 0		5014147	0		<=			
ANR	5015158	Identifier	idx		5014147	0					
ANR	5015159	PrimaryExpression	0		5014147	1					
ANR	5015160	CompoundStatement		152:20:5329:5329	5014147	1					
ANR	5015161	ContinueStatement	continue ;	165:7:5654:5662	5014147	0	True				
ANR	5015162	IdentifierDeclStatement	const char * w = argv [ idx ] ;	167:6:5678:5703	5014147	4	True				
ANR	5015163	IdentifierDecl	* w = argv [ idx ]		5014147	0					
ANR	5015164	IdentifierDeclType	const char *		5014147	0					
ANR	5015165	Identifier	w		5014147	1					
ANR	5015166	AssignmentExpression	* w = argv [ idx ]		5014147	2		=			
ANR	5015167	Identifier	w		5014147	0					
ANR	5015168	ArrayIndexing	argv [ idx ]		5014147	1					
ANR	5015169	Identifier	argv		5014147	0					
ANR	5015170	Identifier	idx		5014147	1					
ANR	5015171	IfStatement	if ( w )		5014147	5					
ANR	5015172	Condition	w	168:10:5715:5715	5014147	0	True				
ANR	5015173	Identifier	w		5014147	0					
ANR	5015174	CompoundStatement		157:13:5441:5441	5014147	1					
ANR	5015175	ExpressionStatement	"strcpy ( newstr + k , w )"	169:7:5727:5749	5014147	0	True				
ANR	5015176	CallExpression	"strcpy ( newstr + k , w )"		5014147	0					
ANR	5015177	Callee	strcpy		5014147	0					
ANR	5015178	Identifier	strcpy		5014147	0					
ANR	5015179	ArgumentList	newstr + k		5014147	1					
ANR	5015180	Argument	newstr + k		5014147	0					
ANR	5015181	AdditiveExpression	newstr + k		5014147	0		+			
ANR	5015182	Identifier	newstr		5014147	0					
ANR	5015183	Identifier	k		5014147	1					
ANR	5015184	Argument	w		5014147	1					
ANR	5015185	Identifier	w		5014147	0					
ANR	5015186	ExpressionStatement	k += strlen ( w ) - 1	170:7:5758:5777	5014147	1	True				
ANR	5015187	AssignmentExpression	k += strlen ( w ) - 1		5014147	0		+=			
ANR	5015188	Identifier	k		5014147	0					
ANR	5015189	AdditiveExpression	strlen ( w ) - 1		5014147	1		-			
ANR	5015190	CallExpression	strlen ( w )		5014147	0					
ANR	5015191	Callee	strlen		5014147	0					
ANR	5015192	Identifier	strlen		5014147	0					
ANR	5015193	ArgumentList	w		5014147	1					
ANR	5015194	Argument	w		5014147	0					
ANR	5015195	Identifier	w		5014147	0					
ANR	5015196	PrimaryExpression	1		5014147	1					
ANR	5015197	ElseStatement	else		5014147	0					
ANR	5015198	CompoundStatement		161:12:5522:5522	5014147	0					
ANR	5015199	ExpressionStatement	newstr [ k ] = ch	173:6:5807:5821	5014147	0	True				
ANR	5015200	AssignmentExpression	newstr [ k ] = ch		5014147	0		=			
ANR	5015201	ArrayIndexing	newstr [ k ]		5014147	0					
ANR	5015202	Identifier	newstr		5014147	0					
ANR	5015203	Identifier	k		5014147	1					
ANR	5015204	Identifier	ch		5014147	1					
ANR	5015205	ExpressionStatement	newstr [ k ] = '\\0'	176:4:5840:5856	5014147	4	True				
ANR	5015206	AssignmentExpression	newstr [ k ] = '\\0'		5014147	0		=			
ANR	5015207	ArrayIndexing	newstr [ k ]		5014147	0					
ANR	5015208	Identifier	newstr		5014147	0					
ANR	5015209	Identifier	k		5014147	1					
ANR	5015210	PrimaryExpression	'\\0'		5014147	1					
ANR	5015211	ExpressionStatement	"r_str_replace_char ( newstr , '{' , '(' )"	179:3:5867:5904	5014147	1	True				
ANR	5015212	CallExpression	"r_str_replace_char ( newstr , '{' , '(' )"		5014147	0					
ANR	5015213	Callee	r_str_replace_char		5014147	0					
ANR	5015214	Identifier	r_str_replace_char		5014147	0					
ANR	5015215	ArgumentList	newstr		5014147	1					
ANR	5015216	Argument	newstr		5014147	0					
ANR	5015217	Identifier	newstr		5014147	0					
ANR	5015218	Argument	'{'		5014147	1					
ANR	5015219	PrimaryExpression	'{'		5014147	0					
ANR	5015220	Argument	'('		5014147	2					
ANR	5015221	PrimaryExpression	'('		5014147	0					
ANR	5015222	ExpressionStatement	"r_str_replace_char ( newstr , '}' , ')' )"	180:3:5909:5946	5014147	2	True				
ANR	5015223	CallExpression	"r_str_replace_char ( newstr , '}' , ')' )"		5014147	0					
ANR	5015224	Callee	r_str_replace_char		5014147	0					
ANR	5015225	Identifier	r_str_replace_char		5014147	0					
ANR	5015226	ArgumentList	newstr		5014147	1					
ANR	5015227	Argument	newstr		5014147	0					
ANR	5015228	Identifier	newstr		5014147	0					
ANR	5015229	Argument	'}'		5014147	1					
ANR	5015230	PrimaryExpression	'}'		5014147	0					
ANR	5015231	Argument	')'		5014147	2					
ANR	5015232	PrimaryExpression	')'		5014147	0					
ANR	5015233	ReturnStatement	return true ;	181:3:5951:5962	5014147	3	True				
ANR	5015234	Identifier	true		5014147	0					
ANR	5015235	ExpressionStatement	newstr [ 0 ] = '\\0'	186:1:5999:6015	5014147	8	True				
ANR	5015236	AssignmentExpression	newstr [ 0 ] = '\\0'		5014147	0		=			
ANR	5015237	ArrayIndexing	newstr [ 0 ]		5014147	0					
ANR	5015238	Identifier	newstr		5014147	0					
ANR	5015239	PrimaryExpression	0		5014147	1					
ANR	5015240	PrimaryExpression	'\\0'		5014147	1					
ANR	5015241	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5014147	9					
ANR	5015242	ForInit	i = 0 ;	187:6:6023:6028	5014147	0	True				
ANR	5015243	AssignmentExpression	i = 0		5014147	0		=			
ANR	5015244	Identifier	i		5014147	0					
ANR	5015245	PrimaryExpression	0		5014147	1					
ANR	5015246	Condition	i < argc	187:13:6030:6037	5014147	1	True				
ANR	5015247	RelationalExpression	i < argc		5014147	0		<			
ANR	5015248	Identifier	i		5014147	0					
ANR	5015249	Identifier	argc		5014147	1					
ANR	5015250	PostIncDecOperationExpression	i ++	187:23:6040:6042	5014147	2	True				
ANR	5015251	Identifier	i		5014147	0					
ANR	5015252	IncDec	++		5014147	1					
ANR	5015253	CompoundStatement		176:28:5768:5768	5014147	3					
ANR	5015254	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	188:2:6049:6073	5014147	0	True				
ANR	5015255	CallExpression	"strcat ( newstr , argv [ i ] )"		5014147	0					
ANR	5015256	Callee	strcat		5014147	0					
ANR	5015257	Identifier	strcat		5014147	0					
ANR	5015258	ArgumentList	newstr		5014147	1					
ANR	5015259	Argument	newstr		5014147	0					
ANR	5015260	Identifier	newstr		5014147	0					
ANR	5015261	Argument	argv [ i ]		5014147	1					
ANR	5015262	ArrayIndexing	argv [ i ]		5014147	0					
ANR	5015263	Identifier	argv		5014147	0					
ANR	5015264	Identifier	i		5014147	1					
ANR	5015265	ExpressionStatement	"strcat ( newstr , ( ! i || i == argc - 1 ) ? "" "" : "","" )"	189:2:6077:6126	5014147	1	True				
ANR	5015266	CallExpression	"strcat ( newstr , ( ! i || i == argc - 1 ) ? "" "" : "","" )"		5014147	0					
ANR	5015267	Callee	strcat		5014147	0					
ANR	5015268	Identifier	strcat		5014147	0					
ANR	5015269	ArgumentList	newstr		5014147	1					
ANR	5015270	Argument	newstr		5014147	0					
ANR	5015271	Identifier	newstr		5014147	0					
ANR	5015272	Argument	"( ! i || i == argc - 1 ) ? "" "" : "","""		5014147	1					
ANR	5015273	ConditionalExpression	"( ! i || i == argc - 1 ) ? "" "" : "","""		5014147	0					
ANR	5015274	Condition	! i || i == argc - 1		5014147	0					
ANR	5015275	OrExpression	! i || i == argc - 1		5014147	0		||			
ANR	5015276	UnaryOperationExpression	! i		5014147	0					
ANR	5015277	UnaryOperator	!		5014147	0					
ANR	5015278	Identifier	i		5014147	1					
ANR	5015279	EqualityExpression	i == argc - 1		5014147	1		==			
ANR	5015280	Identifier	i		5014147	0					
ANR	5015281	AdditiveExpression	argc - 1		5014147	1		-			
ANR	5015282	Identifier	argc		5014147	0					
ANR	5015283	PrimaryExpression	1		5014147	1					
ANR	5015284	PrimaryExpression	""" """		5014147	1					
ANR	5015285	PrimaryExpression	""","""		5014147	2					
ANR	5015286	ExpressionStatement	"r_str_replace_char ( newstr , '{' , '(' )"	191:1:6132:6169	5014147	10	True				
ANR	5015287	CallExpression	"r_str_replace_char ( newstr , '{' , '(' )"		5014147	0					
ANR	5015288	Callee	r_str_replace_char		5014147	0					
ANR	5015289	Identifier	r_str_replace_char		5014147	0					
ANR	5015290	ArgumentList	newstr		5014147	1					
ANR	5015291	Argument	newstr		5014147	0					
ANR	5015292	Identifier	newstr		5014147	0					
ANR	5015293	Argument	'{'		5014147	1					
ANR	5015294	PrimaryExpression	'{'		5014147	0					
ANR	5015295	Argument	'('		5014147	2					
ANR	5015296	PrimaryExpression	'('		5014147	0					
ANR	5015297	ExpressionStatement	"r_str_replace_char ( newstr , '}' , ')' )"	192:1:6172:6209	5014147	11	True				
ANR	5015298	CallExpression	"r_str_replace_char ( newstr , '}' , ')' )"		5014147	0					
ANR	5015299	Callee	r_str_replace_char		5014147	0					
ANR	5015300	Identifier	r_str_replace_char		5014147	0					
ANR	5015301	ArgumentList	newstr		5014147	1					
ANR	5015302	Argument	newstr		5014147	0					
ANR	5015303	Identifier	newstr		5014147	0					
ANR	5015304	Argument	'}'		5014147	1					
ANR	5015305	PrimaryExpression	'}'		5014147	0					
ANR	5015306	Argument	')'		5014147	2					
ANR	5015307	PrimaryExpression	')'		5014147	0					
ANR	5015308	ReturnStatement	return false ;	193:1:6212:6224	5014147	12	True				
ANR	5015309	Identifier	false		5014147	0					
ANR	5015310	ReturnType	static int		5014147	1					
ANR	5015311	Identifier	replace		5014147	2					
ANR	5015312	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5014147	3					
ANR	5015313	Parameter	int argc	12:19:232:239	5014147	0	True				
ANR	5015314	ParameterType	int		5014147	0					
ANR	5015315	Identifier	argc		5014147	1					
ANR	5015316	Parameter	const char * argv [ ]	12:29:242:259	5014147	1	True				
ANR	5015317	ParameterType	const char * [ ]		5014147	0					
ANR	5015318	Identifier	argv		5014147	1					
ANR	5015319	Parameter	char * newstr	12:49:262:273	5014147	2	True				
ANR	5015320	ParameterType	char *		5014147	0					
ANR	5015321	Identifier	newstr		5014147	1					
ANR	5015322	CFGEntryNode	ENTRY		5014147		True				
ANR	5015323	CFGExitNode	EXIT		5014147		True				
ANR	5015324	Symbol	* ops [ i ] . str		5014147						
ANR	5015325	Symbol	* * ops		5014147						
ANR	5015326	Symbol	* argv		5014147						
ANR	5015327	Symbol	* ops [ i ] . args		5014147						
ANR	5015328	Symbol	argv		5014147						
ANR	5015329	Symbol	ops [ i ] . str		5014147						
ANR	5015330	Symbol	strlen		5014147						
ANR	5015331	Symbol	ops [ i ] . narg		5014147						
ANR	5015332	Symbol	ops [ i ] . op		5014147						
ANR	5015333	Symbol	* idx		5014147						
ANR	5015334	Symbol	* ops		5014147						
ANR	5015335	Symbol	argc		5014147						
ANR	5015336	Symbol	strcmp		5014147						
ANR	5015337	Symbol	* * i		5014147						
ANR	5015338	Symbol	NULL		5014147						
ANR	5015339	Symbol	d		5014147						
ANR	5015340	Symbol	ch		5014147						
ANR	5015341	Symbol	false		5014147						
ANR	5015342	Symbol	i		5014147						
ANR	5015343	Symbol	j		5014147						
ANR	5015344	Symbol	k		5014147						
ANR	5015345	Symbol	newstr		5014147						
ANR	5015346	Symbol	* d		5014147						
ANR	5015347	Symbol	MAXPSEUDOOPS		5014147						
ANR	5015348	Symbol	ops [ i ] . args		5014147						
ANR	5015349	Symbol	ops		5014147						
ANR	5015350	Symbol	* i		5014147						
ANR	5015351	Symbol	* newstr		5014147						
ANR	5015352	Symbol	* j		5014147						
ANR	5015353	Symbol	* k		5014147						
ANR	5015354	Symbol	w		5014147						
ANR	5015355	Symbol	true		5014147						
ANR	5015356	Symbol	idx		5014147						
ANR	5015357	Function	parse	196:0:6229:7872							
ANR	5015358	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5015357	0					
ANR	5015359	CompoundStatement		196:57:6286:7872	5015357	0					
ANR	5015360	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] , w3 [ 256 ] ;"	197:1:6289:6328	5015357	0	True				
ANR	5015361	IdentifierDecl	w0 [ 256 ]		5015357	0					
ANR	5015362	IdentifierDeclType	char [ 256 ]		5015357	0					
ANR	5015363	Identifier	w0		5015357	1					
ANR	5015364	PrimaryExpression	256		5015357	2					
ANR	5015365	IdentifierDecl	w1 [ 256 ]		5015357	1					
ANR	5015366	IdentifierDeclType	char [ 256 ]		5015357	0					
ANR	5015367	Identifier	w1		5015357	1					
ANR	5015368	PrimaryExpression	256		5015357	2					
ANR	5015369	IdentifierDecl	w2 [ 256 ]		5015357	2					
ANR	5015370	IdentifierDeclType	char [ 256 ]		5015357	0					
ANR	5015371	Identifier	w2		5015357	1					
ANR	5015372	PrimaryExpression	256		5015357	2					
ANR	5015373	IdentifierDecl	w3 [ 256 ]		5015357	3					
ANR	5015374	IdentifierDeclType	char [ 256 ]		5015357	0					
ANR	5015375	Identifier	w3		5015357	1					
ANR	5015376	PrimaryExpression	256		5015357	2					
ANR	5015377	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	198:1:6331:6357	5015357	1	True				
ANR	5015378	IdentifierDecl	i		5015357	0					
ANR	5015379	IdentifierDeclType	int		5015357	0					
ANR	5015380	Identifier	i		5015357	1					
ANR	5015381	IdentifierDecl	len = strlen ( data )		5015357	1					
ANR	5015382	IdentifierDeclType	int		5015357	0					
ANR	5015383	Identifier	len		5015357	1					
ANR	5015384	AssignmentExpression	len = strlen ( data )		5015357	2		=			
ANR	5015385	Identifier	len		5015357	0					
ANR	5015386	CallExpression	strlen ( data )		5015357	1					
ANR	5015387	Callee	strlen		5015357	0					
ANR	5015388	Identifier	strlen		5015357	0					
ANR	5015389	ArgumentList	data		5015357	1					
ANR	5015390	Argument	data		5015357	0					
ANR	5015391	Identifier	data		5015357	0					
ANR	5015392	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	199:1:6360:6382	5015357	2	True				
ANR	5015393	IdentifierDecl	* buf		5015357	0					
ANR	5015394	IdentifierDeclType	char *		5015357	0					
ANR	5015395	Identifier	buf		5015357	1					
ANR	5015396	IdentifierDecl	* ptr		5015357	1					
ANR	5015397	IdentifierDeclType	char *		5015357	0					
ANR	5015398	Identifier	ptr		5015357	1					
ANR	5015399	IdentifierDecl	* optr		5015357	2					
ANR	5015400	IdentifierDeclType	char *		5015357	0					
ANR	5015401	Identifier	optr		5015357	1					
ANR	5015402	IfStatement	if ( len >= sizeof ( w0 ) )		5015357	3					
ANR	5015403	Condition	len >= sizeof ( w0 )	201:5:6390:6407	5015357	0	True				
ANR	5015404	RelationalExpression	len >= sizeof ( w0 )		5015357	0		>=			
ANR	5015405	Identifier	len		5015357	0					
ANR	5015406	SizeofExpression	sizeof ( w0 )		5015357	1					
ANR	5015407	Sizeof	sizeof		5015357	0					
ANR	5015408	SizeofOperand	w0		5015357	1					
ANR	5015409	CompoundStatement		6:25:123:123	5015357	1					
ANR	5015410	ReturnStatement	return false ;	202:2:6414:6426	5015357	0	True				
ANR	5015411	Identifier	false		5015357	0					
ANR	5015412	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5015357	4					
ANR	5015413	Condition	! ( buf = malloc ( len + 1 ) )	205:5:6467:6491	5015357	0	True				
ANR	5015414	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5015357	0					
ANR	5015415	UnaryOperator	!		5015357	0					
ANR	5015416	AssignmentExpression	buf = malloc ( len + 1 )		5015357	1		=			
ANR	5015417	Identifier	buf		5015357	0					
ANR	5015418	CallExpression	malloc ( len + 1 )		5015357	1					
ANR	5015419	Callee	malloc		5015357	0					
ANR	5015420	Identifier	malloc		5015357	0					
ANR	5015421	ArgumentList	len + 1		5015357	1					
ANR	5015422	Argument	len + 1		5015357	0					
ANR	5015423	AdditiveExpression	len + 1		5015357	0		+			
ANR	5015424	Identifier	len		5015357	0					
ANR	5015425	PrimaryExpression	1		5015357	1					
ANR	5015426	CompoundStatement		10:32:207:207	5015357	1					
ANR	5015427	ReturnStatement	return false ;	206:2:6498:6510	5015357	0	True				
ANR	5015428	Identifier	false		5015357	0					
ANR	5015429	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	208:1:6516:6543	5015357	5	True				
ANR	5015430	CallExpression	"memcpy ( buf , data , len + 1 )"		5015357	0					
ANR	5015431	Callee	memcpy		5015357	0					
ANR	5015432	Identifier	memcpy		5015357	0					
ANR	5015433	ArgumentList	buf		5015357	1					
ANR	5015434	Argument	buf		5015357	0					
ANR	5015435	Identifier	buf		5015357	0					
ANR	5015436	Argument	data		5015357	1					
ANR	5015437	Identifier	data		5015357	0					
ANR	5015438	Argument	len + 1		5015357	2					
ANR	5015439	AdditiveExpression	len + 1		5015357	0		+			
ANR	5015440	Identifier	len		5015357	0					
ANR	5015441	PrimaryExpression	1		5015357	1					
ANR	5015442	IfStatement	if ( * buf )		5015357	6					
ANR	5015443	Condition	* buf	209:5:6550:6553	5015357	0	True				
ANR	5015444	UnaryOperationExpression	* buf		5015357	0					
ANR	5015445	UnaryOperator	*		5015357	0					
ANR	5015446	Identifier	buf		5015357	1					
ANR	5015447	CompoundStatement		14:11:269:269	5015357	1					
ANR	5015448	ExpressionStatement	* w0 = * w1 = * w2 = * w3 = '\\0'	210:2:6560:6588	5015357	0	True				
ANR	5015449	AssignmentExpression	* w0 = * w1 = * w2 = * w3 = '\\0'		5015357	0		=			
ANR	5015450	UnaryOperationExpression	* w0		5015357	0					
ANR	5015451	UnaryOperator	*		5015357	0					
ANR	5015452	Identifier	w0		5015357	1					
ANR	5015453	AssignmentExpression	* w1 = * w2 = * w3 = '\\0'		5015357	1		=			
ANR	5015454	UnaryOperationExpression	* w1		5015357	0					
ANR	5015455	UnaryOperator	*		5015357	0					
ANR	5015456	Identifier	w1		5015357	1					
ANR	5015457	AssignmentExpression	* w2 = * w3 = '\\0'		5015357	1		=			
ANR	5015458	UnaryOperationExpression	* w2		5015357	0					
ANR	5015459	UnaryOperator	*		5015357	0					
ANR	5015460	Identifier	w2		5015357	1					
ANR	5015461	AssignmentExpression	* w3 = '\\0'		5015357	1		=			
ANR	5015462	UnaryOperationExpression	* w3		5015357	0					
ANR	5015463	UnaryOperator	*		5015357	0					
ANR	5015464	Identifier	w3		5015357	1					
ANR	5015465	PrimaryExpression	'\\0'		5015357	1					
ANR	5015466	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	211:2:6592:6615	5015357	1	True				
ANR	5015467	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5015357	0		=			
ANR	5015468	Identifier	ptr		5015357	0					
ANR	5015469	CallExpression	"strchr ( buf , ' ' )"		5015357	1					
ANR	5015470	Callee	strchr		5015357	0					
ANR	5015471	Identifier	strchr		5015357	0					
ANR	5015472	ArgumentList	buf		5015357	1					
ANR	5015473	Argument	buf		5015357	0					
ANR	5015474	Identifier	buf		5015357	0					
ANR	5015475	Argument	' '		5015357	1					
ANR	5015476	PrimaryExpression	' '		5015357	0					
ANR	5015477	IfStatement	if ( ! ptr )		5015357	2					
ANR	5015478	Condition	! ptr	212:6:6623:6626	5015357	0	True				
ANR	5015479	UnaryOperationExpression	! ptr		5015357	0					
ANR	5015480	UnaryOperator	!		5015357	0					
ANR	5015481	Identifier	ptr		5015357	1					
ANR	5015482	CompoundStatement		17:12:342:342	5015357	1					
ANR	5015483	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	213:3:6634:6658	5015357	0	True				
ANR	5015484	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5015357	0		=			
ANR	5015485	Identifier	ptr		5015357	0					
ANR	5015486	CallExpression	"strchr ( buf , '\\t' )"		5015357	1					
ANR	5015487	Callee	strchr		5015357	0					
ANR	5015488	Identifier	strchr		5015357	0					
ANR	5015489	ArgumentList	buf		5015357	1					
ANR	5015490	Argument	buf		5015357	0					
ANR	5015491	Identifier	buf		5015357	0					
ANR	5015492	Argument	'\\t'		5015357	1					
ANR	5015493	PrimaryExpression	'\\t'		5015357	0					
ANR	5015494	IfStatement	if ( ptr )		5015357	3					
ANR	5015495	Condition	ptr	215:6:6670:6672	5015357	0	True				
ANR	5015496	Identifier	ptr		5015357	0					
ANR	5015497	CompoundStatement		20:11:388:388	5015357	1					
ANR	5015498	ExpressionStatement	* ptr = '\\0'	216:3:6680:6691	5015357	0	True				
ANR	5015499	AssignmentExpression	* ptr = '\\0'		5015357	0		=			
ANR	5015500	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015501	UnaryOperator	*		5015357	0					
ANR	5015502	Identifier	ptr		5015357	1					
ANR	5015503	PrimaryExpression	'\\0'		5015357	1					
ANR	5015504	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5015357	1					
ANR	5015505	ForInit	++ ptr ;	217:8:6701:6706	5015357	0	True				
ANR	5015506	UnaryExpression	++ ptr		5015357	0					
ANR	5015507	IncDec	++		5015357	0					
ANR	5015508	Identifier	ptr		5015357	1					
ANR	5015509	Condition	* ptr == ' '	217:15:6708:6718	5015357	1	True				
ANR	5015510	EqualityExpression	* ptr == ' '		5015357	0		==			
ANR	5015511	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015512	UnaryOperator	*		5015357	0					
ANR	5015513	Identifier	ptr		5015357	1					
ANR	5015514	PrimaryExpression	' '		5015357	1					
ANR	5015515	PostIncDecOperationExpression	ptr ++	217:28:6721:6725	5015357	2	True				
ANR	5015516	Identifier	ptr		5015357	0					
ANR	5015517	IncDec	++		5015357	1					
ANR	5015518	CompoundStatement		22:35:441:441	5015357	3					
ANR	5015519	ExpressionStatement		218:4:6734:6734	5015357	0	True				
ANR	5015520	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	220:3:6744:6778	5015357	2	True				
ANR	5015521	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5015357	0					
ANR	5015522	Callee	strncpy		5015357	0					
ANR	5015523	Identifier	strncpy		5015357	0					
ANR	5015524	ArgumentList	w0		5015357	1					
ANR	5015525	Argument	w0		5015357	0					
ANR	5015526	Identifier	w0		5015357	0					
ANR	5015527	Argument	buf		5015357	1					
ANR	5015528	Identifier	buf		5015357	0					
ANR	5015529	Argument	sizeof ( w0 ) - 1		5015357	2					
ANR	5015530	AdditiveExpression	sizeof ( w0 ) - 1		5015357	0		-			
ANR	5015531	SizeofExpression	sizeof ( w0 )		5015357	0					
ANR	5015532	Sizeof	sizeof		5015357	0					
ANR	5015533	SizeofOperand	w0		5015357	1					
ANR	5015534	PrimaryExpression	1		5015357	1					
ANR	5015535	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	221:3:6783:6817	5015357	3	True				
ANR	5015536	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5015357	0					
ANR	5015537	Callee	strncpy		5015357	0					
ANR	5015538	Identifier	strncpy		5015357	0					
ANR	5015539	ArgumentList	w1		5015357	1					
ANR	5015540	Argument	w1		5015357	0					
ANR	5015541	Identifier	w1		5015357	0					
ANR	5015542	Argument	ptr		5015357	1					
ANR	5015543	Identifier	ptr		5015357	0					
ANR	5015544	Argument	sizeof ( w1 ) - 1		5015357	2					
ANR	5015545	AdditiveExpression	sizeof ( w1 ) - 1		5015357	0		-			
ANR	5015546	SizeofExpression	sizeof ( w1 )		5015357	0					
ANR	5015547	Sizeof	sizeof		5015357	0					
ANR	5015548	SizeofOperand	w1		5015357	1					
ANR	5015549	PrimaryExpression	1		5015357	1					
ANR	5015550	ExpressionStatement	optr = ptr	223:3:6823:6833	5015357	4	True				
ANR	5015551	AssignmentExpression	optr = ptr		5015357	0		=			
ANR	5015552	Identifier	optr		5015357	0					
ANR	5015553	Identifier	ptr		5015357	1					
ANR	5015554	IfStatement	if ( * ptr == '(' )		5015357	5					
ANR	5015555	Condition	* ptr == '('	224:7:6842:6852	5015357	0	True				
ANR	5015556	EqualityExpression	* ptr == '('		5015357	0		==			
ANR	5015557	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015558	UnaryOperator	*		5015357	0					
ANR	5015559	Identifier	ptr		5015357	1					
ANR	5015560	PrimaryExpression	'('		5015357	1					
ANR	5015561	CompoundStatement		29:20:568:568	5015357	1					
ANR	5015562	ExpressionStatement	"ptr = strchr ( ptr + 1 , ')' )"	225:4:6861:6886	5015357	0	True				
ANR	5015563	AssignmentExpression	"ptr = strchr ( ptr + 1 , ')' )"		5015357	0		=			
ANR	5015564	Identifier	ptr		5015357	0					
ANR	5015565	CallExpression	"strchr ( ptr + 1 , ')' )"		5015357	1					
ANR	5015566	Callee	strchr		5015357	0					
ANR	5015567	Identifier	strchr		5015357	0					
ANR	5015568	ArgumentList	ptr + 1		5015357	1					
ANR	5015569	Argument	ptr + 1		5015357	0					
ANR	5015570	AdditiveExpression	ptr + 1		5015357	0		+			
ANR	5015571	Identifier	ptr		5015357	0					
ANR	5015572	PrimaryExpression	1		5015357	1					
ANR	5015573	Argument	')'		5015357	1					
ANR	5015574	PrimaryExpression	')'		5015357	0					
ANR	5015575	IfStatement	if ( ptr && * ptr == '[' )		5015357	6					
ANR	5015576	Condition	ptr && * ptr == '['	227:7:6900:6917	5015357	0	True				
ANR	5015577	AndExpression	ptr && * ptr == '['		5015357	0		&&			
ANR	5015578	Identifier	ptr		5015357	0					
ANR	5015579	EqualityExpression	* ptr == '['		5015357	1		==			
ANR	5015580	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015581	UnaryOperator	*		5015357	0					
ANR	5015582	Identifier	ptr		5015357	1					
ANR	5015583	PrimaryExpression	'['		5015357	1					
ANR	5015584	CompoundStatement		32:27:633:633	5015357	1					
ANR	5015585	ExpressionStatement	"ptr = strchr ( ptr + 1 , ']' )"	228:4:6926:6951	5015357	0	True				
ANR	5015586	AssignmentExpression	"ptr = strchr ( ptr + 1 , ']' )"		5015357	0		=			
ANR	5015587	Identifier	ptr		5015357	0					
ANR	5015588	CallExpression	"strchr ( ptr + 1 , ']' )"		5015357	1					
ANR	5015589	Callee	strchr		5015357	0					
ANR	5015590	Identifier	strchr		5015357	0					
ANR	5015591	ArgumentList	ptr + 1		5015357	1					
ANR	5015592	Argument	ptr + 1		5015357	0					
ANR	5015593	AdditiveExpression	ptr + 1		5015357	0		+			
ANR	5015594	Identifier	ptr		5015357	0					
ANR	5015595	PrimaryExpression	1		5015357	1					
ANR	5015596	Argument	']'		5015357	1					
ANR	5015597	PrimaryExpression	']'		5015357	0					
ANR	5015598	IfStatement	if ( ptr && * ptr == '{' )		5015357	7					
ANR	5015599	Condition	ptr && * ptr == '{'	230:7:6965:6982	5015357	0	True				
ANR	5015600	AndExpression	ptr && * ptr == '{'		5015357	0		&&			
ANR	5015601	Identifier	ptr		5015357	0					
ANR	5015602	EqualityExpression	* ptr == '{'		5015357	1		==			
ANR	5015603	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015604	UnaryOperator	*		5015357	0					
ANR	5015605	Identifier	ptr		5015357	1					
ANR	5015606	PrimaryExpression	'{'		5015357	1					
ANR	5015607	CompoundStatement		35:27:698:698	5015357	1					
ANR	5015608	ExpressionStatement	"ptr = strchr ( ptr + 1 , '}' )"	231:4:6991:7016	5015357	0	True				
ANR	5015609	AssignmentExpression	"ptr = strchr ( ptr + 1 , '}' )"		5015357	0		=			
ANR	5015610	Identifier	ptr		5015357	0					
ANR	5015611	CallExpression	"strchr ( ptr + 1 , '}' )"		5015357	1					
ANR	5015612	Callee	strchr		5015357	0					
ANR	5015613	Identifier	strchr		5015357	0					
ANR	5015614	ArgumentList	ptr + 1		5015357	1					
ANR	5015615	Argument	ptr + 1		5015357	0					
ANR	5015616	AdditiveExpression	ptr + 1		5015357	0		+			
ANR	5015617	Identifier	ptr		5015357	0					
ANR	5015618	PrimaryExpression	1		5015357	1					
ANR	5015619	Argument	'}'		5015357	1					
ANR	5015620	PrimaryExpression	'}'		5015357	0					
ANR	5015621	IfStatement	if ( ! ptr )		5015357	8					
ANR	5015622	Condition	! ptr	233:7:7030:7033	5015357	0	True				
ANR	5015623	UnaryOperationExpression	! ptr		5015357	0					
ANR	5015624	UnaryOperator	!		5015357	0					
ANR	5015625	Identifier	ptr		5015357	1					
ANR	5015626	CompoundStatement		38:13:749:749	5015357	1					
ANR	5015627	ExpressionStatement	"eprintf ( ""Unbalanced bracket\\n"" )"	234:4:7042:7074	5015357	0	True				
ANR	5015628	CallExpression	"eprintf ( ""Unbalanced bracket\\n"" )"		5015357	0					
ANR	5015629	Callee	eprintf		5015357	0					
ANR	5015630	Identifier	eprintf		5015357	0					
ANR	5015631	ArgumentList	"""Unbalanced bracket\\n"""		5015357	1					
ANR	5015632	Argument	"""Unbalanced bracket\\n"""		5015357	0					
ANR	5015633	PrimaryExpression	"""Unbalanced bracket\\n"""		5015357	0					
ANR	5015634	ExpressionStatement	free ( buf )	235:4:7080:7089	5015357	1	True				
ANR	5015635	CallExpression	free ( buf )		5015357	0					
ANR	5015636	Callee	free		5015357	0					
ANR	5015637	Identifier	free		5015357	0					
ANR	5015638	ArgumentList	buf		5015357	1					
ANR	5015639	Argument	buf		5015357	0					
ANR	5015640	Identifier	buf		5015357	0					
ANR	5015641	ReturnStatement	return false ;	236:4:7095:7107	5015357	2	True				
ANR	5015642	Identifier	false		5015357	0					
ANR	5015643	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	238:3:7117:7140	5015357	9	True				
ANR	5015644	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5015357	0		=			
ANR	5015645	Identifier	ptr		5015357	0					
ANR	5015646	CallExpression	"strchr ( ptr , ',' )"		5015357	1					
ANR	5015647	Callee	strchr		5015357	0					
ANR	5015648	Identifier	strchr		5015357	0					
ANR	5015649	ArgumentList	ptr		5015357	1					
ANR	5015650	Argument	ptr		5015357	0					
ANR	5015651	Identifier	ptr		5015357	0					
ANR	5015652	Argument	"','"		5015357	1					
ANR	5015653	PrimaryExpression	"','"		5015357	0					
ANR	5015654	IfStatement	if ( ptr )		5015357	10					
ANR	5015655	Condition	ptr	239:7:7149:7151	5015357	0	True				
ANR	5015656	Identifier	ptr		5015357	0					
ANR	5015657	CompoundStatement		44:12:867:867	5015357	1					
ANR	5015658	ExpressionStatement	* ptr = '\\0'	240:4:7160:7171	5015357	0	True				
ANR	5015659	AssignmentExpression	* ptr = '\\0'		5015357	0		=			
ANR	5015660	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015661	UnaryOperator	*		5015357	0					
ANR	5015662	Identifier	ptr		5015357	1					
ANR	5015663	PrimaryExpression	'\\0'		5015357	1					
ANR	5015664	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5015357	1					
ANR	5015665	ForInit	++ ptr ;	241:9:7182:7187	5015357	0	True				
ANR	5015666	UnaryExpression	++ ptr		5015357	0					
ANR	5015667	IncDec	++		5015357	0					
ANR	5015668	Identifier	ptr		5015357	1					
ANR	5015669	Condition	* ptr == ' '	241:16:7189:7199	5015357	1	True				
ANR	5015670	EqualityExpression	* ptr == ' '		5015357	0		==			
ANR	5015671	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015672	UnaryOperator	*		5015357	0					
ANR	5015673	Identifier	ptr		5015357	1					
ANR	5015674	PrimaryExpression	' '		5015357	1					
ANR	5015675	PostIncDecOperationExpression	ptr ++	241:29:7202:7206	5015357	2	True				
ANR	5015676	Identifier	ptr		5015357	0					
ANR	5015677	IncDec	++		5015357	1					
ANR	5015678	CompoundStatement		46:36:922:922	5015357	3					
ANR	5015679	ExpressionStatement		242:5:7216:7216	5015357	0	True				
ANR	5015680	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	244:4:7228:7263	5015357	2	True				
ANR	5015681	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5015357	0					
ANR	5015682	Callee	strncpy		5015357	0					
ANR	5015683	Identifier	strncpy		5015357	0					
ANR	5015684	ArgumentList	w1		5015357	1					
ANR	5015685	Argument	w1		5015357	0					
ANR	5015686	Identifier	w1		5015357	0					
ANR	5015687	Argument	optr		5015357	1					
ANR	5015688	Identifier	optr		5015357	0					
ANR	5015689	Argument	sizeof ( w1 ) - 1		5015357	2					
ANR	5015690	AdditiveExpression	sizeof ( w1 ) - 1		5015357	0		-			
ANR	5015691	SizeofExpression	sizeof ( w1 )		5015357	0					
ANR	5015692	Sizeof	sizeof		5015357	0					
ANR	5015693	SizeofOperand	w1		5015357	1					
ANR	5015694	PrimaryExpression	1		5015357	1					
ANR	5015695	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	245:4:7269:7303	5015357	3	True				
ANR	5015696	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5015357	0					
ANR	5015697	Callee	strncpy		5015357	0					
ANR	5015698	Identifier	strncpy		5015357	0					
ANR	5015699	ArgumentList	w2		5015357	1					
ANR	5015700	Argument	w2		5015357	0					
ANR	5015701	Identifier	w2		5015357	0					
ANR	5015702	Argument	ptr		5015357	1					
ANR	5015703	Identifier	ptr		5015357	0					
ANR	5015704	Argument	sizeof ( w2 ) - 1		5015357	2					
ANR	5015705	AdditiveExpression	sizeof ( w2 ) - 1		5015357	0		-			
ANR	5015706	SizeofExpression	sizeof ( w2 )		5015357	0					
ANR	5015707	Sizeof	sizeof		5015357	0					
ANR	5015708	SizeofOperand	w2		5015357	1					
ANR	5015709	PrimaryExpression	1		5015357	1					
ANR	5015710	ExpressionStatement	optr = ptr	246:4:7309:7319	5015357	4	True				
ANR	5015711	AssignmentExpression	optr = ptr		5015357	0		=			
ANR	5015712	Identifier	optr		5015357	0					
ANR	5015713	Identifier	ptr		5015357	1					
ANR	5015714	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	247:4:7325:7348	5015357	5	True				
ANR	5015715	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5015357	0		=			
ANR	5015716	Identifier	ptr		5015357	0					
ANR	5015717	CallExpression	"strchr ( ptr , ',' )"		5015357	1					
ANR	5015718	Callee	strchr		5015357	0					
ANR	5015719	Identifier	strchr		5015357	0					
ANR	5015720	ArgumentList	ptr		5015357	1					
ANR	5015721	Argument	ptr		5015357	0					
ANR	5015722	Identifier	ptr		5015357	0					
ANR	5015723	Argument	"','"		5015357	1					
ANR	5015724	PrimaryExpression	"','"		5015357	0					
ANR	5015725	IfStatement	if ( ptr )		5015357	6					
ANR	5015726	Condition	ptr	248:8:7358:7360	5015357	0	True				
ANR	5015727	Identifier	ptr		5015357	0					
ANR	5015728	CompoundStatement		53:13:1076:1076	5015357	1					
ANR	5015729	ExpressionStatement	* ptr = '\\0'	249:5:7370:7381	5015357	0	True				
ANR	5015730	AssignmentExpression	* ptr = '\\0'		5015357	0		=			
ANR	5015731	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015732	UnaryOperator	*		5015357	0					
ANR	5015733	Identifier	ptr		5015357	1					
ANR	5015734	PrimaryExpression	'\\0'		5015357	1					
ANR	5015735	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5015357	1					
ANR	5015736	ForInit	++ ptr ;	250:10:7393:7398	5015357	0	True				
ANR	5015737	UnaryExpression	++ ptr		5015357	0					
ANR	5015738	IncDec	++		5015357	0					
ANR	5015739	Identifier	ptr		5015357	1					
ANR	5015740	Condition	* ptr == ' '	250:17:7400:7410	5015357	1	True				
ANR	5015741	EqualityExpression	* ptr == ' '		5015357	0		==			
ANR	5015742	UnaryOperationExpression	* ptr		5015357	0					
ANR	5015743	UnaryOperator	*		5015357	0					
ANR	5015744	Identifier	ptr		5015357	1					
ANR	5015745	PrimaryExpression	' '		5015357	1					
ANR	5015746	PostIncDecOperationExpression	ptr ++	250:30:7413:7417	5015357	2	True				
ANR	5015747	Identifier	ptr		5015357	0					
ANR	5015748	IncDec	++		5015357	1					
ANR	5015749	CompoundStatement		55:37:1133:1133	5015357	3					
ANR	5015750	ExpressionStatement		251:6:7428:7428	5015357	0	True				
ANR	5015751	ExpressionStatement	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"	253:5:7442:7477	5015357	2	True				
ANR	5015752	CallExpression	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"		5015357	0					
ANR	5015753	Callee	strncpy		5015357	0					
ANR	5015754	Identifier	strncpy		5015357	0					
ANR	5015755	ArgumentList	w2		5015357	1					
ANR	5015756	Argument	w2		5015357	0					
ANR	5015757	Identifier	w2		5015357	0					
ANR	5015758	Argument	optr		5015357	1					
ANR	5015759	Identifier	optr		5015357	0					
ANR	5015760	Argument	sizeof ( w2 ) - 1		5015357	2					
ANR	5015761	AdditiveExpression	sizeof ( w2 ) - 1		5015357	0		-			
ANR	5015762	SizeofExpression	sizeof ( w2 )		5015357	0					
ANR	5015763	Sizeof	sizeof		5015357	0					
ANR	5015764	SizeofOperand	w2		5015357	1					
ANR	5015765	PrimaryExpression	1		5015357	1					
ANR	5015766	ExpressionStatement	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"	254:5:7484:7518	5015357	3	True				
ANR	5015767	CallExpression	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"		5015357	0					
ANR	5015768	Callee	strncpy		5015357	0					
ANR	5015769	Identifier	strncpy		5015357	0					
ANR	5015770	ArgumentList	w3		5015357	1					
ANR	5015771	Argument	w3		5015357	0					
ANR	5015772	Identifier	w3		5015357	0					
ANR	5015773	Argument	ptr		5015357	1					
ANR	5015774	Identifier	ptr		5015357	0					
ANR	5015775	Argument	sizeof ( w3 ) - 1		5015357	2					
ANR	5015776	AdditiveExpression	sizeof ( w3 ) - 1		5015357	0		-			
ANR	5015777	SizeofExpression	sizeof ( w3 )		5015357	0					
ANR	5015778	Sizeof	sizeof		5015357	0					
ANR	5015779	SizeofOperand	w3		5015357	1					
ANR	5015780	PrimaryExpression	1		5015357	1					
ANR	5015781	CompoundStatement		65:3:1297:1307	5015357	4					
ANR	5015782	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 } ;"	259:3:7542:7579	5015357	0	True				
ANR	5015783	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5015357	0					
ANR	5015784	IdentifierDeclType	const char * [ ]		5015357	0					
ANR	5015785	Identifier	wa		5015357	1					
ANR	5015786	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5015357	2		=			
ANR	5015787	Identifier	wa		5015357	0					
ANR	5015788	InitializerList	w0		5015357	1					
ANR	5015789	Identifier	w0		5015357	0					
ANR	5015790	Identifier	w1		5015357	1					
ANR	5015791	Identifier	w2		5015357	2					
ANR	5015792	Identifier	w3		5015357	3					
ANR	5015793	IdentifierDeclStatement	int nw = 0 ;	260:3:7584:7594	5015357	1	True				
ANR	5015794	IdentifierDecl	nw = 0		5015357	0					
ANR	5015795	IdentifierDeclType	int		5015357	0					
ANR	5015796	Identifier	nw		5015357	1					
ANR	5015797	AssignmentExpression	nw = 0		5015357	2		=			
ANR	5015798	Identifier	nw		5015357	0					
ANR	5015799	PrimaryExpression	0		5015357	1					
ANR	5015800	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5015357	2					
ANR	5015801	ForInit	i = 0 ;	261:8:7604:7609	5015357	0	True				
ANR	5015802	AssignmentExpression	i = 0		5015357	0		=			
ANR	5015803	Identifier	i		5015357	0					
ANR	5015804	PrimaryExpression	0		5015357	1					
ANR	5015805	Condition	i < 4	261:15:7611:7615	5015357	1	True				
ANR	5015806	RelationalExpression	i < 4		5015357	0		<			
ANR	5015807	Identifier	i		5015357	0					
ANR	5015808	PrimaryExpression	4		5015357	1					
ANR	5015809	PostIncDecOperationExpression	i ++	261:22:7618:7620	5015357	2	True				
ANR	5015810	Identifier	i		5015357	0					
ANR	5015811	IncDec	++		5015357	1					
ANR	5015812	CompoundStatement		66:27:1336:1336	5015357	3					
ANR	5015813	IfStatement	if ( wa [ i ] [ 0 ] )		5015357	0					
ANR	5015814	Condition	wa [ i ] [ 0 ]	262:8:7633:7640	5015357	0	True				
ANR	5015815	ArrayIndexing	wa [ i ] [ 0 ]		5015357	0					
ANR	5015816	ArrayIndexing	wa [ i ]		5015357	0					
ANR	5015817	Identifier	wa		5015357	0					
ANR	5015818	Identifier	i		5015357	1					
ANR	5015819	PrimaryExpression	0		5015357	1					
ANR	5015820	CompoundStatement		67:18:1356:1356	5015357	1					
ANR	5015821	ExpressionStatement	nw ++	263:5:7650:7654	5015357	0	True				
ANR	5015822	PostIncDecOperationExpression	nw ++		5015357	0					
ANR	5015823	Identifier	nw		5015357	0					
ANR	5015824	IncDec	++		5015357	1					
ANR	5015825	ExpressionStatement	"replace ( nw , wa , str )"	266:3:7670:7691	5015357	3	True				
ANR	5015826	CallExpression	"replace ( nw , wa , str )"		5015357	0					
ANR	5015827	Callee	replace		5015357	0					
ANR	5015828	Identifier	replace		5015357	0					
ANR	5015829	ArgumentList	nw		5015357	1					
ANR	5015830	Argument	nw		5015357	0					
ANR	5015831	Identifier	nw		5015357	0					
ANR	5015832	Argument	wa		5015357	1					
ANR	5015833	Identifier	wa		5015357	0					
ANR	5015834	Argument	str		5015357	2					
ANR	5015835	Identifier	str		5015357	0					
ANR	5015836	CompoundStatement		75:2:1418:1440	5015357	7					
ANR	5015837	IdentifierDeclStatement	char * s = strdup ( str ) ;	270:2:7705:7727	5015357	0	True				
ANR	5015838	IdentifierDecl	* s = strdup ( str )		5015357	0					
ANR	5015839	IdentifierDeclType	char *		5015357	0					
ANR	5015840	Identifier	s		5015357	1					
ANR	5015841	AssignmentExpression	* s = strdup ( str )		5015357	2		=			
ANR	5015842	Identifier	s		5015357	0					
ANR	5015843	CallExpression	strdup ( str )		5015357	1					
ANR	5015844	Callee	strdup		5015357	0					
ANR	5015845	Identifier	strdup		5015357	0					
ANR	5015846	ArgumentList	str		5015357	1					
ANR	5015847	Argument	str		5015357	0					
ANR	5015848	Identifier	str		5015357	0					
ANR	5015849	ExpressionStatement	"s = r_str_replace ( s , ""+ -"" , ""- "" , 1 )"	271:2:7731:7768	5015357	1	True				
ANR	5015850	AssignmentExpression	"s = r_str_replace ( s , ""+ -"" , ""- "" , 1 )"		5015357	0		=			
ANR	5015851	Identifier	s		5015357	0					
ANR	5015852	CallExpression	"r_str_replace ( s , ""+ -"" , ""- "" , 1 )"		5015357	1					
ANR	5015853	Callee	r_str_replace		5015357	0					
ANR	5015854	Identifier	r_str_replace		5015357	0					
ANR	5015855	ArgumentList	s		5015357	1					
ANR	5015856	Argument	s		5015357	0					
ANR	5015857	Identifier	s		5015357	0					
ANR	5015858	Argument	"""+ -"""		5015357	1					
ANR	5015859	PrimaryExpression	"""+ -"""		5015357	0					
ANR	5015860	Argument	"""- """		5015357	2					
ANR	5015861	PrimaryExpression	"""- """		5015357	0					
ANR	5015862	Argument	1		5015357	3					
ANR	5015863	PrimaryExpression	1		5015357	0					
ANR	5015864	ExpressionStatement	"s = r_str_replace ( s , ""- -"" , ""+ "" , 1 )"	272:2:7772:7809	5015357	2	True				
ANR	5015865	AssignmentExpression	"s = r_str_replace ( s , ""- -"" , ""+ "" , 1 )"		5015357	0		=			
ANR	5015866	Identifier	s		5015357	0					
ANR	5015867	CallExpression	"r_str_replace ( s , ""- -"" , ""+ "" , 1 )"		5015357	1					
ANR	5015868	Callee	r_str_replace		5015357	0					
ANR	5015869	Identifier	r_str_replace		5015357	0					
ANR	5015870	ArgumentList	s		5015357	1					
ANR	5015871	Argument	s		5015357	0					
ANR	5015872	Identifier	s		5015357	0					
ANR	5015873	Argument	"""- -"""		5015357	1					
ANR	5015874	PrimaryExpression	"""- -"""		5015357	0					
ANR	5015875	Argument	"""+ """		5015357	2					
ANR	5015876	PrimaryExpression	"""+ """		5015357	0					
ANR	5015877	Argument	1		5015357	3					
ANR	5015878	PrimaryExpression	1		5015357	0					
ANR	5015879	ExpressionStatement	"strcpy ( str , s )"	273:2:7813:7828	5015357	3	True				
ANR	5015880	CallExpression	"strcpy ( str , s )"		5015357	0					
ANR	5015881	Callee	strcpy		5015357	0					
ANR	5015882	Identifier	strcpy		5015357	0					
ANR	5015883	ArgumentList	str		5015357	1					
ANR	5015884	Argument	str		5015357	0					
ANR	5015885	Identifier	str		5015357	0					
ANR	5015886	Argument	s		5015357	1					
ANR	5015887	Identifier	s		5015357	0					
ANR	5015888	ExpressionStatement	free ( s )	274:2:7832:7840	5015357	4	True				
ANR	5015889	CallExpression	free ( s )		5015357	0					
ANR	5015890	Callee	free		5015357	0					
ANR	5015891	Identifier	free		5015357	0					
ANR	5015892	ArgumentList	s		5015357	1					
ANR	5015893	Argument	s		5015357	0					
ANR	5015894	Identifier	s		5015357	0					
ANR	5015895	ExpressionStatement	free ( buf )	276:1:7846:7856	5015357	8	True				
ANR	5015896	CallExpression	free ( buf )		5015357	0					
ANR	5015897	Callee	free		5015357	0					
ANR	5015898	Identifier	free		5015357	0					
ANR	5015899	ArgumentList	buf		5015357	1					
ANR	5015900	Argument	buf		5015357	0					
ANR	5015901	Identifier	buf		5015357	0					
ANR	5015902	ReturnStatement	return true ;	277:1:7859:7870	5015357	9	True				
ANR	5015903	Identifier	true		5015357	0					
ANR	5015904	ReturnType	static int		5015357	1					
ANR	5015905	Identifier	parse		5015357	2					
ANR	5015906	ParameterList	"RParse * p , const char * data , char * str"		5015357	3					
ANR	5015907	Parameter	RParse * p	196:17:6246:6254	5015357	0	True				
ANR	5015908	ParameterType	RParse *		5015357	0					
ANR	5015909	Identifier	p		5015357	1					
ANR	5015910	Parameter	const char * data	196:28:6257:6272	5015357	1	True				
ANR	5015911	ParameterType	const char *		5015357	0					
ANR	5015912	Identifier	data		5015357	1					
ANR	5015913	Parameter	char * str	196:46:6275:6283	5015357	2	True				
ANR	5015914	ParameterType	char *		5015357	0					
ANR	5015915	Identifier	str		5015357	1					
ANR	5015916	CFGEntryNode	ENTRY		5015357		True				
ANR	5015917	CFGExitNode	EXIT		5015357		True				
ANR	5015918	Symbol	* w3		5015357						
ANR	5015919	Symbol	* w2		5015357						
ANR	5015920	Symbol	* w1		5015357						
ANR	5015921	Symbol	data		5015357						
ANR	5015922	Symbol	strchr		5015357						
ANR	5015923	Symbol	nw		5015357						
ANR	5015924	Symbol	wa		5015357						
ANR	5015925	Symbol	strlen		5015357						
ANR	5015926	Symbol	* wa		5015357						
ANR	5015927	Symbol	len		5015357						
ANR	5015928	Symbol	r_str_replace		5015357						
ANR	5015929	Symbol	* ptr		5015357						
ANR	5015930	Symbol	w0		5015357						
ANR	5015931	Symbol	w1		5015357						
ANR	5015932	Symbol	w2		5015357						
ANR	5015933	Symbol	w3		5015357						
ANR	5015934	Symbol	* w0		5015357						
ANR	5015935	Symbol	malloc		5015357						
ANR	5015936	Symbol	* buf		5015357						
ANR	5015937	Symbol	* * i		5015357						
ANR	5015938	Symbol	false		5015357						
ANR	5015939	Symbol	i		5015357						
ANR	5015940	Symbol	optr		5015357						
ANR	5015941	Symbol	ptr		5015357						
ANR	5015942	Symbol	p		5015357						
ANR	5015943	Symbol	str		5015357						
ANR	5015944	Symbol	buf		5015357						
ANR	5015945	Symbol	* i		5015357						
ANR	5015946	Symbol	s		5015357						
ANR	5015947	Symbol	* * wa		5015357						
ANR	5015948	Symbol	true		5015357						
ANR	5015949	Symbol	strdup		5015357						
ANR	5015950	Function	varsub	280:0:7875:11742							
ANR	5015951	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5015950	0					
ANR	5015952	CompoundStatement		280:102:7977:11742	5015950	0					
ANR	5015953	IdentifierDeclStatement	RList * spargs = NULL ;	281:1:7980:8000	5015950	0	True				
ANR	5015954	IdentifierDecl	* spargs = NULL		5015950	0					
ANR	5015955	IdentifierDeclType	RList *		5015950	0					
ANR	5015956	Identifier	spargs		5015950	1					
ANR	5015957	AssignmentExpression	* spargs = NULL		5015950	2		=			
ANR	5015958	Identifier	NULL		5015950	0					
ANR	5015959	Identifier	NULL		5015950	1					
ANR	5015960	IdentifierDeclStatement	RList * bpargs = NULL ;	282:1:8003:8023	5015950	1	True				
ANR	5015961	IdentifierDecl	* bpargs = NULL		5015950	0					
ANR	5015962	IdentifierDeclType	RList *		5015950	0					
ANR	5015963	Identifier	bpargs		5015950	1					
ANR	5015964	AssignmentExpression	* bpargs = NULL		5015950	2		=			
ANR	5015965	Identifier	NULL		5015950	0					
ANR	5015966	Identifier	NULL		5015950	1					
ANR	5015967	IdentifierDeclStatement	RAnalVar * var ;	283:1:8026:8039	5015950	2	True				
ANR	5015968	IdentifierDecl	* var		5015950	0					
ANR	5015969	IdentifierDeclType	RAnalVar *		5015950	0					
ANR	5015970	Identifier	var		5015950	1					
ANR	5015971	IdentifierDeclStatement	RListIter * iter ;	284:1:8042:8057	5015950	3	True				
ANR	5015972	IdentifierDecl	* iter		5015950	0					
ANR	5015973	IdentifierDeclType	RListIter *		5015950	0					
ANR	5015974	Identifier	iter		5015950	1					
ANR	5015975	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	285:1:8060:8087	5015950	4	True				
ANR	5015976	IdentifierDecl	* anal = p -> analb . anal		5015950	0					
ANR	5015977	IdentifierDeclType	RAnal *		5015950	0					
ANR	5015978	Identifier	anal		5015950	1					
ANR	5015979	AssignmentExpression	* anal = p -> analb . anal		5015950	2		=			
ANR	5015980	Identifier	anal		5015950	0					
ANR	5015981	MemberAccess	p -> analb . anal		5015950	1					
ANR	5015982	PtrMemberAccess	p -> analb		5015950	0					
ANR	5015983	Identifier	p		5015950	0					
ANR	5015984	Identifier	analb		5015950	1					
ANR	5015985	Identifier	anal		5015950	1					
ANR	5015986	IdentifierDeclStatement	"char * oldstr , * newstr ;"	286:1:8090:8111	5015950	5	True				
ANR	5015987	IdentifierDecl	* oldstr		5015950	0					
ANR	5015988	IdentifierDeclType	char *		5015950	0					
ANR	5015989	Identifier	oldstr		5015950	1					
ANR	5015990	IdentifierDecl	* newstr		5015950	1					
ANR	5015991	IdentifierDeclType	char *		5015950	0					
ANR	5015992	Identifier	newstr		5015950	1					
ANR	5015993	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	287:1:8114:8140	5015950	6	True				
ANR	5015994	IdentifierDecl	* tstr = strdup ( data )		5015950	0					
ANR	5015995	IdentifierDeclType	char *		5015950	0					
ANR	5015996	Identifier	tstr		5015950	1					
ANR	5015997	AssignmentExpression	* tstr = strdup ( data )		5015950	2		=			
ANR	5015998	Identifier	tstr		5015950	0					
ANR	5015999	CallExpression	strdup ( data )		5015950	1					
ANR	5016000	Callee	strdup		5015950	0					
ANR	5016001	Identifier	strdup		5015950	0					
ANR	5016002	ArgumentList	data		5015950	1					
ANR	5016003	Argument	data		5015950	0					
ANR	5016004	Identifier	data		5015950	0					
ANR	5016005	IfStatement	if ( ! tstr )		5015950	7					
ANR	5016006	Condition	! tstr	288:5:8147:8151	5015950	0	True				
ANR	5016007	UnaryOperationExpression	! tstr		5015950	0					
ANR	5016008	UnaryOperator	!		5015950	0					
ANR	5016009	Identifier	tstr		5015950	1					
ANR	5016010	CompoundStatement		9:12:176:176	5015950	1					
ANR	5016011	ReturnStatement	return false ;	289:2:8158:8170	5015950	0	True				
ANR	5016012	Identifier	false		5015950	0					
ANR	5016013	IfStatement	if ( ! p -> varlist )		5015950	8					
ANR	5016014	Condition	! p -> varlist	292:5:8181:8191	5015950	0	True				
ANR	5016015	UnaryOperationExpression	! p -> varlist		5015950	0					
ANR	5016016	UnaryOperator	!		5015950	0					
ANR	5016017	PtrMemberAccess	p -> varlist		5015950	1					
ANR	5016018	Identifier	p		5015950	0					
ANR	5016019	Identifier	varlist		5015950	1					
ANR	5016020	CompoundStatement		13:18:216:216	5015950	1					
ANR	5016021	ExpressionStatement	free ( tstr )	293:2:8198:8209	5015950	0	True				
ANR	5016022	CallExpression	free ( tstr )		5015950	0					
ANR	5016023	Callee	free		5015950	0					
ANR	5016024	Identifier	free		5015950	0					
ANR	5016025	ArgumentList	tstr		5015950	1					
ANR	5016026	Argument	tstr		5015950	0					
ANR	5016027	Identifier	tstr		5015950	0					
ANR	5016028	ReturnStatement	return false ;	294:2:8213:8225	5015950	1	True				
ANR	5016029	Identifier	false		5015950	0					
ANR	5016030	IfStatement	if ( p -> relsub )		5015950	9					
ANR	5016031	Condition	p -> relsub	296:5:8235:8243	5015950	0	True				
ANR	5016032	PtrMemberAccess	p -> relsub		5015950	0					
ANR	5016033	Identifier	p		5015950	0					
ANR	5016034	Identifier	relsub		5015950	1					
ANR	5016035	CompoundStatement		18:2:272:321	5015950	1					
ANR	5016036	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" ) ;"	297:2:8250:8299	5015950	0	True				
ANR	5016037	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5015950	0					
ANR	5016038	IdentifierDeclType	char *		5015950	0					
ANR	5016039	Identifier	rip		5015950	1					
ANR	5016040	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5015950	2		=			
ANR	5016041	Identifier	rip		5015950	0					
ANR	5016042	CastExpression	"( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5015950	1					
ANR	5016043	CastTarget	char *		5015950	0					
ANR	5016044	CallExpression	"r_str_casestr ( tstr , ""[pc, "" )"		5015950	1					
ANR	5016045	Callee	r_str_casestr		5015950	0					
ANR	5016046	Identifier	r_str_casestr		5015950	0					
ANR	5016047	ArgumentList	tstr		5015950	1					
ANR	5016048	Argument	tstr		5015950	0					
ANR	5016049	Identifier	tstr		5015950	0					
ANR	5016050	Argument	"""[pc, """		5015950	1					
ANR	5016051	PrimaryExpression	"""[pc, """		5015950	0					
ANR	5016052	IfStatement	if ( ! rip )		5015950	1					
ANR	5016053	Condition	! rip	298:6:8307:8310	5015950	0	True				
ANR	5016054	UnaryOperationExpression	! rip		5015950	0					
ANR	5016055	UnaryOperator	!		5015950	0					
ANR	5016056	Identifier	rip		5015950	1					
ANR	5016057	CompoundStatement		19:12:335:335	5015950	1					
ANR	5016058	ExpressionStatement	"rip = ( char * ) r_str_casestr ( tstr , ""[PC, "" )"	299:3:8318:8361	5015950	0	True				
ANR	5016059	AssignmentExpression	"rip = ( char * ) r_str_casestr ( tstr , ""[PC, "" )"		5015950	0		=			
ANR	5016060	Identifier	rip		5015950	0					
ANR	5016061	CastExpression	"( char * ) r_str_casestr ( tstr , ""[PC, "" )"		5015950	1					
ANR	5016062	CastTarget	char *		5015950	0					
ANR	5016063	CallExpression	"r_str_casestr ( tstr , ""[PC, "" )"		5015950	1					
ANR	5016064	Callee	r_str_casestr		5015950	0					
ANR	5016065	Identifier	r_str_casestr		5015950	0					
ANR	5016066	ArgumentList	tstr		5015950	1					
ANR	5016067	Argument	tstr		5015950	0					
ANR	5016068	Identifier	tstr		5015950	0					
ANR	5016069	Argument	"""[PC, """		5015950	1					
ANR	5016070	PrimaryExpression	"""[PC, """		5015950	0					
ANR	5016071	IfStatement	"if ( rip && ! strchr ( rip + 4 , ',' ) )"		5015950	2					
ANR	5016072	Condition	"rip && ! strchr ( rip + 4 , ',' )"	301:6:8373:8401	5015950	0	True				
ANR	5016073	AndExpression	"rip && ! strchr ( rip + 4 , ',' )"		5015950	0		&&			
ANR	5016074	Identifier	rip		5015950	0					
ANR	5016075	UnaryOperationExpression	"! strchr ( rip + 4 , ',' )"		5015950	1					
ANR	5016076	UnaryOperator	!		5015950	0					
ANR	5016077	CallExpression	"strchr ( rip + 4 , ',' )"		5015950	1					
ANR	5016078	Callee	strchr		5015950	0					
ANR	5016079	Identifier	strchr		5015950	0					
ANR	5016080	ArgumentList	rip + 4		5015950	1					
ANR	5016081	Argument	rip + 4		5015950	0					
ANR	5016082	AdditiveExpression	rip + 4		5015950	0		+			
ANR	5016083	Identifier	rip		5015950	0					
ANR	5016084	PrimaryExpression	4		5015950	1					
ANR	5016085	Argument	"','"		5015950	1					
ANR	5016086	PrimaryExpression	"','"		5015950	0					
ANR	5016087	CompoundStatement		27:3:613:646	5015950	1					
ANR	5016088	ExpressionStatement	rip += 4	302:3:8409:8417	5015950	0	True				
ANR	5016089	AssignmentExpression	rip += 4		5015950	0		+=			
ANR	5016090	Identifier	rip		5015950	0					
ANR	5016091	PrimaryExpression	4		5015950	1					
ANR	5016092	IdentifierDeclStatement	"char * tstr_new , * ripend = strchr ( rip , ']' ) ;"	303:3:8422:8465	5015950	1	True				
ANR	5016093	IdentifierDecl	* tstr_new		5015950	0					
ANR	5016094	IdentifierDeclType	char *		5015950	0					
ANR	5016095	Identifier	tstr_new		5015950	1					
ANR	5016096	IdentifierDecl	"* ripend = strchr ( rip , ']' )"		5015950	1					
ANR	5016097	IdentifierDeclType	char *		5015950	0					
ANR	5016098	Identifier	ripend		5015950	1					
ANR	5016099	AssignmentExpression	"* ripend = strchr ( rip , ']' )"		5015950	2		=			
ANR	5016100	Identifier	ripend		5015950	0					
ANR	5016101	CallExpression	"strchr ( rip , ']' )"		5015950	1					
ANR	5016102	Callee	strchr		5015950	0					
ANR	5016103	Identifier	strchr		5015950	0					
ANR	5016104	ArgumentList	rip		5015950	1					
ANR	5016105	Argument	rip		5015950	0					
ANR	5016106	Identifier	rip		5015950	0					
ANR	5016107	Argument	']'		5015950	1					
ANR	5016108	PrimaryExpression	']'		5015950	0					
ANR	5016109	IdentifierDeclStatement	"const char * neg = strchr ( rip , '-' ) ;"	304:3:8470:8505	5015950	2	True				
ANR	5016110	IdentifierDecl	"* neg = strchr ( rip , '-' )"		5015950	0					
ANR	5016111	IdentifierDeclType	const char *		5015950	0					
ANR	5016112	Identifier	neg		5015950	1					
ANR	5016113	AssignmentExpression	"* neg = strchr ( rip , '-' )"		5015950	2		=			
ANR	5016114	Identifier	neg		5015950	0					
ANR	5016115	CallExpression	"strchr ( rip , '-' )"		5015950	1					
ANR	5016116	Callee	strchr		5015950	0					
ANR	5016117	Identifier	strchr		5015950	0					
ANR	5016118	ArgumentList	rip		5015950	1					
ANR	5016119	Argument	rip		5015950	0					
ANR	5016120	Identifier	rip		5015950	0					
ANR	5016121	Argument	'-'		5015950	1					
ANR	5016122	PrimaryExpression	'-'		5015950	0					
ANR	5016123	IdentifierDeclStatement	"ut64 off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8 ;"	305:3:8510:8586	5015950	3	True				
ANR	5016124	IdentifierDecl	"off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5015950	0					
ANR	5016125	IdentifierDeclType	ut64		5015950	0					
ANR	5016126	Identifier	off		5015950	1					
ANR	5016127	AssignmentExpression	"off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5015950	2		=			
ANR	5016128	Identifier	off		5015950	0					
ANR	5016129	ConditionalExpression	"( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5015950	1					
ANR	5016130	Condition	"oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5015950	0					
ANR	5016131	OrExpression	"oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5015950	0		||			
ANR	5016132	EqualityExpression	oplen == 2		5015950	0		==			
ANR	5016133	Identifier	oplen		5015950	0					
ANR	5016134	PrimaryExpression	2		5015950	1					
ANR	5016135	OrExpression	"strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5015950	1		||			
ANR	5016136	CallExpression	"strstr ( tstr , "".w"" )"		5015950	0					
ANR	5016137	Callee	strstr		5015950	0					
ANR	5016138	Identifier	strstr		5015950	0					
ANR	5016139	ArgumentList	tstr		5015950	1					
ANR	5016140	Argument	tstr		5015950	0					
ANR	5016141	Identifier	tstr		5015950	0					
ANR	5016142	Argument	""".w"""		5015950	1					
ANR	5016143	PrimaryExpression	""".w"""		5015950	0					
ANR	5016144	CallExpression	"strstr ( tstr , "".W"" )"		5015950	1					
ANR	5016145	Callee	strstr		5015950	0					
ANR	5016146	Identifier	strstr		5015950	0					
ANR	5016147	ArgumentList	tstr		5015950	1					
ANR	5016148	Argument	tstr		5015950	0					
ANR	5016149	Identifier	tstr		5015950	0					
ANR	5016150	Argument	""".W"""		5015950	1					
ANR	5016151	PrimaryExpression	""".W"""		5015950	0					
ANR	5016152	PrimaryExpression	4		5015950	1					
ANR	5016153	PrimaryExpression	8		5015950	2					
ANR	5016154	IdentifierDeclStatement	ut64 repl_num = ( addr + off ) & ~3 ;	306:3:8591:8624	5015950	4	True				
ANR	5016155	IdentifierDecl	repl_num = ( addr + off ) & ~3		5015950	0					
ANR	5016156	IdentifierDeclType	ut64		5015950	0					
ANR	5016157	Identifier	repl_num		5015950	1					
ANR	5016158	AssignmentExpression	repl_num = ( addr + off ) & ~3		5015950	2		=			
ANR	5016159	Identifier	repl_num		5015950	0					
ANR	5016160	BitAndExpression	( addr + off ) & ~3		5015950	1		&			
ANR	5016161	AdditiveExpression	addr + off		5015950	0		+			
ANR	5016162	Identifier	addr		5015950	0					
ANR	5016163	Identifier	off		5015950	1					
ANR	5016164	Identifier	~3		5015950	1					
ANR	5016165	IfStatement	if ( ! ripend )		5015950	5					
ANR	5016166	Condition	! ripend	307:7:8633:8639	5015950	0	True				
ANR	5016167	UnaryOperationExpression	! ripend		5015950	0					
ANR	5016168	UnaryOperator	!		5015950	0					
ANR	5016169	Identifier	ripend		5015950	1					
ANR	5016170	CompoundStatement		28:16:664:664	5015950	1					
ANR	5016171	ExpressionStatement	"ripend = ""]"""	308:4:8648:8660	5015950	0	True				
ANR	5016172	AssignmentExpression	"ripend = ""]"""		5015950	0		=			
ANR	5016173	Identifier	ripend		5015950	0					
ANR	5016174	PrimaryExpression	"""]"""		5015950	1					
ANR	5016175	IfStatement	if ( neg )		5015950	6					
ANR	5016176	Condition	neg	310:7:8674:8676	5015950	0	True				
ANR	5016177	Identifier	neg		5015950	0					
ANR	5016178	CompoundStatement		31:12:701:701	5015950	1					
ANR	5016179	ExpressionStatement	"repl_num -= r_num_get ( NULL , neg + 1 )"	311:4:8685:8722	5015950	0	True				
ANR	5016180	AssignmentExpression	"repl_num -= r_num_get ( NULL , neg + 1 )"		5015950	0		-=			
ANR	5016181	Identifier	repl_num		5015950	0					
ANR	5016182	CallExpression	"r_num_get ( NULL , neg + 1 )"		5015950	1					
ANR	5016183	Callee	r_num_get		5015950	0					
ANR	5016184	Identifier	r_num_get		5015950	0					
ANR	5016185	ArgumentList	NULL		5015950	1					
ANR	5016186	Argument	NULL		5015950	0					
ANR	5016187	Identifier	NULL		5015950	0					
ANR	5016188	Argument	neg + 1		5015950	1					
ANR	5016189	AdditiveExpression	neg + 1		5015950	0		+			
ANR	5016190	Identifier	neg		5015950	0					
ANR	5016191	PrimaryExpression	1		5015950	1					
ANR	5016192	ElseStatement	else		5015950	0					
ANR	5016193	CompoundStatement		33:10:756:756	5015950	0					
ANR	5016194	ExpressionStatement	"repl_num += r_num_get ( NULL , rip )"	313:4:8740:8773	5015950	0	True				
ANR	5016195	AssignmentExpression	"repl_num += r_num_get ( NULL , rip )"		5015950	0		+=			
ANR	5016196	Identifier	repl_num		5015950	0					
ANR	5016197	CallExpression	"r_num_get ( NULL , rip )"		5015950	1					
ANR	5016198	Callee	r_num_get		5015950	0					
ANR	5016199	Identifier	r_num_get		5015950	0					
ANR	5016200	ArgumentList	NULL		5015950	1					
ANR	5016201	Argument	NULL		5015950	0					
ANR	5016202	Identifier	NULL		5015950	0					
ANR	5016203	Argument	rip		5015950	1					
ANR	5016204	Identifier	rip		5015950	0					
ANR	5016205	ExpressionStatement	rip -= 3	315:3:8783:8791	5015950	7	True				
ANR	5016206	AssignmentExpression	rip -= 3		5015950	0		-=			
ANR	5016207	Identifier	rip		5015950	0					
ANR	5016208	PrimaryExpression	3		5015950	1					
ANR	5016209	ExpressionStatement	* rip = 0	316:3:8796:8804	5015950	8	True				
ANR	5016210	AssignmentExpression	* rip = 0		5015950	0		=			
ANR	5016211	UnaryOperationExpression	* rip		5015950	0					
ANR	5016212	UnaryOperator	*		5015950	0					
ANR	5016213	Identifier	rip		5015950	1					
ANR	5016214	PrimaryExpression	0		5015950	1					
ANR	5016215	Statement	tstr_new	317:3:8809:8816	5015950	9	True				
ANR	5016216	Statement	=	317:12:8818:8818	5015950	10	True				
ANR	5016217	Statement	r_str_newf	317:14:8820:8829	5015950	11	True				
ANR	5016218	Statement	(	317:25:8831:8831	5015950	12	True				
ANR	5016219	Statement	"""%s0x%08"""	317:26:8832:8840	5015950	13	True				
ANR	5016220	Statement	PFMT64x	317:35:8841:8847	5015950	14	True				
ANR	5016221	Statement	"""%s"""	317:42:8848:8851	5015950	15	True				
ANR	5016222	Statement	","	317:46:8852:8852	5015950	16	True				
ANR	5016223	Statement	tstr	317:48:8854:8857	5015950	17	True				
ANR	5016224	Statement	","	317:52:8858:8858	5015950	18	True				
ANR	5016225	Statement	repl_num	317:54:8860:8867	5015950	19	True				
ANR	5016226	Statement	","	317:62:8868:8868	5015950	20	True				
ANR	5016227	Statement	ripend	317:64:8870:8875	5015950	21	True				
ANR	5016228	Statement	)	317:70:8876:8876	5015950	22	True				
ANR	5016229	ExpressionStatement		317:71:8877:8877	5015950	23	True				
ANR	5016230	ExpressionStatement	free ( tstr )	318:3:8882:8893	5015950	24	True				
ANR	5016231	CallExpression	free ( tstr )		5015950	0					
ANR	5016232	Callee	free		5015950	0					
ANR	5016233	Identifier	free		5015950	0					
ANR	5016234	ArgumentList	tstr		5015950	1					
ANR	5016235	Argument	tstr		5015950	0					
ANR	5016236	Identifier	tstr		5015950	0					
ANR	5016237	ExpressionStatement	tstr = tstr_new	319:3:8898:8913	5015950	25	True				
ANR	5016238	AssignmentExpression	tstr = tstr_new		5015950	0		=			
ANR	5016239	Identifier	tstr		5015950	0					
ANR	5016240	Identifier	tstr_new		5015950	1					
ANR	5016241	ExpressionStatement	"bpargs = p -> varlist ( anal , f , 'b' )"	323:1:8924:8958	5015950	10	True				
ANR	5016242	AssignmentExpression	"bpargs = p -> varlist ( anal , f , 'b' )"		5015950	0		=			
ANR	5016243	Identifier	bpargs		5015950	0					
ANR	5016244	CallExpression	"p -> varlist ( anal , f , 'b' )"		5015950	1					
ANR	5016245	Callee	p -> varlist		5015950	0					
ANR	5016246	PtrMemberAccess	p -> varlist		5015950	0					
ANR	5016247	Identifier	p		5015950	0					
ANR	5016248	Identifier	varlist		5015950	1					
ANR	5016249	ArgumentList	anal		5015950	1					
ANR	5016250	Argument	anal		5015950	0					
ANR	5016251	Identifier	anal		5015950	0					
ANR	5016252	Argument	f		5015950	1					
ANR	5016253	Identifier	f		5015950	0					
ANR	5016254	Argument	'b'		5015950	2					
ANR	5016255	PrimaryExpression	'b'		5015950	0					
ANR	5016256	ExpressionStatement	"spargs = p -> varlist ( anal , f , 's' )"	324:1:8961:8995	5015950	11	True				
ANR	5016257	AssignmentExpression	"spargs = p -> varlist ( anal , f , 's' )"		5015950	0		=			
ANR	5016258	Identifier	spargs		5015950	0					
ANR	5016259	CallExpression	"p -> varlist ( anal , f , 's' )"		5015950	1					
ANR	5016260	Callee	p -> varlist		5015950	0					
ANR	5016261	PtrMemberAccess	p -> varlist		5015950	0					
ANR	5016262	Identifier	p		5015950	0					
ANR	5016263	Identifier	varlist		5015950	1					
ANR	5016264	ArgumentList	anal		5015950	1					
ANR	5016265	Argument	anal		5015950	0					
ANR	5016266	Identifier	anal		5015950	0					
ANR	5016267	Argument	f		5015950	1					
ANR	5016268	Identifier	f		5015950	0					
ANR	5016269	Argument	's'		5015950	2					
ANR	5016270	PrimaryExpression	's'		5015950	0					
ANR	5016271	IdentifierDeclStatement	bool ucase = IS_UPPER ( * tstr ) ;	325:1:8998:9027	5015950	12	True				
ANR	5016272	IdentifierDecl	ucase = IS_UPPER ( * tstr )		5015950	0					
ANR	5016273	IdentifierDeclType	bool		5015950	0					
ANR	5016274	Identifier	ucase		5015950	1					
ANR	5016275	AssignmentExpression	ucase = IS_UPPER ( * tstr )		5015950	2		=			
ANR	5016276	Identifier	ucase		5015950	0					
ANR	5016277	CallExpression	IS_UPPER ( * tstr )		5015950	1					
ANR	5016278	Callee	IS_UPPER		5015950	0					
ANR	5016279	Identifier	IS_UPPER		5015950	0					
ANR	5016280	ArgumentList	* tstr		5015950	1					
ANR	5016281	Argument	* tstr		5015950	0					
ANR	5016282	UnaryOperationExpression	* tstr		5015950	0					
ANR	5016283	UnaryOperator	*		5015950	0					
ANR	5016284	Identifier	tstr		5015950	1					
ANR	5016285	Statement	r_list_foreach	326:1:9030:9043	5015950	13	True				
ANR	5016286	Statement	(	326:16:9045:9045	5015950	14	True				
ANR	5016287	Statement	bpargs	326:17:9046:9051	5015950	15	True				
ANR	5016288	Statement	","	326:23:9052:9052	5015950	16	True				
ANR	5016289	Statement	iter	326:25:9054:9057	5015950	17	True				
ANR	5016290	Statement	","	326:29:9058:9058	5015950	18	True				
ANR	5016291	Statement	var	326:31:9060:9062	5015950	19	True				
ANR	5016292	Statement	)	326:34:9063:9063	5015950	20	True				
ANR	5016293	CompoundStatement		49:2:1137:1155	5015950	21					
ANR	5016294	IdentifierDeclStatement	char * reg = anal -> reg -> name [ R_REG_NAME_BP ] ;	327:2:9069:9111	5015950	0	True				
ANR	5016295	IdentifierDecl	* reg = anal -> reg -> name [ R_REG_NAME_BP ]		5015950	0					
ANR	5016296	IdentifierDeclType	char *		5015950	0					
ANR	5016297	Identifier	reg		5015950	1					
ANR	5016298	AssignmentExpression	* reg = anal -> reg -> name [ R_REG_NAME_BP ]		5015950	2		=			
ANR	5016299	Identifier	reg		5015950	0					
ANR	5016300	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5015950	1					
ANR	5016301	PtrMemberAccess	anal -> reg -> name		5015950	0					
ANR	5016302	PtrMemberAccess	anal -> reg		5015950	0					
ANR	5016303	Identifier	anal		5015950	0					
ANR	5016304	Identifier	reg		5015950	1					
ANR	5016305	Identifier	name		5015950	1					
ANR	5016306	Identifier	R_REG_NAME_BP		5015950	1					
ANR	5016307	IdentifierDeclStatement	char * tmplt = NULL ;	328:2:9115:9133	5015950	1	True				
ANR	5016308	IdentifierDecl	* tmplt = NULL		5015950	0					
ANR	5016309	IdentifierDeclType	char *		5015950	0					
ANR	5016310	Identifier	tmplt		5015950	1					
ANR	5016311	AssignmentExpression	* tmplt = NULL		5015950	2		=			
ANR	5016312	Identifier	NULL		5015950	0					
ANR	5016313	Identifier	NULL		5015950	1					
ANR	5016314	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5015950	2					
ANR	5016315	Condition	var -> delta > - 10 && var -> delta < 10	329:6:9141:9175	5015950	0	True				
ANR	5016316	AndExpression	var -> delta > - 10 && var -> delta < 10		5015950	0		&&			
ANR	5016317	RelationalExpression	var -> delta > - 10		5015950	0		>			
ANR	5016318	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016319	Identifier	var		5015950	0					
ANR	5016320	Identifier	delta		5015950	1					
ANR	5016321	UnaryOperationExpression	- 10		5015950	1					
ANR	5016322	UnaryOperator	-		5015950	0					
ANR	5016323	PrimaryExpression	10		5015950	1					
ANR	5016324	RelationalExpression	var -> delta < 10		5015950	1		<			
ANR	5016325	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016326	Identifier	var		5015950	0					
ANR	5016327	Identifier	delta		5015950	1					
ANR	5016328	PrimaryExpression	10		5015950	1					
ANR	5016329	CompoundStatement		50:43:1200:1200	5015950	1					
ANR	5016330	IfStatement	if ( p -> pseudo )		5015950	0					
ANR	5016331	Condition	p -> pseudo	330:7:9187:9195	5015950	0	True				
ANR	5016332	PtrMemberAccess	p -> pseudo		5015950	0					
ANR	5016333	Identifier	p		5015950	0					
ANR	5016334	Identifier	pseudo		5015950	1					
ANR	5016335	CompoundStatement		53:4:1247:1269	5015950	1					
ANR	5016336	IdentifierDeclStatement	char sign = '+' ;	331:4:9204:9219	5015950	0	True				
ANR	5016337	IdentifierDecl	sign = '+'		5015950	0					
ANR	5016338	IdentifierDeclType	char		5015950	0					
ANR	5016339	Identifier	sign		5015950	1					
ANR	5016340	AssignmentExpression	sign = '+'		5015950	2		=			
ANR	5016341	Identifier	sign		5015950	0					
ANR	5016342	PrimaryExpression	'+'		5015950	1					
ANR	5016343	IdentifierDeclStatement	int delta = var -> delta ;	332:4:9225:9247	5015950	1	True				
ANR	5016344	IdentifierDecl	delta = var -> delta		5015950	0					
ANR	5016345	IdentifierDeclType	int		5015950	0					
ANR	5016346	Identifier	delta		5015950	1					
ANR	5016347	AssignmentExpression	delta = var -> delta		5015950	2		=			
ANR	5016348	Identifier	delta		5015950	0					
ANR	5016349	PtrMemberAccess	var -> delta		5015950	1					
ANR	5016350	Identifier	var		5015950	0					
ANR	5016351	Identifier	delta		5015950	1					
ANR	5016352	IfStatement	if ( var -> delta < 0 )		5015950	2					
ANR	5016353	Condition	var -> delta < 0	333:8:9257:9270	5015950	0	True				
ANR	5016354	RelationalExpression	var -> delta < 0		5015950	0		<			
ANR	5016355	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016356	Identifier	var		5015950	0					
ANR	5016357	Identifier	delta		5015950	1					
ANR	5016358	PrimaryExpression	0		5015950	1					
ANR	5016359	CompoundStatement		54:24:1295:1295	5015950	1					
ANR	5016360	ExpressionStatement	sign = '-'	334:5:9280:9290	5015950	0	True				
ANR	5016361	AssignmentExpression	sign = '-'		5015950	0		=			
ANR	5016362	Identifier	sign		5015950	0					
ANR	5016363	PrimaryExpression	'-'		5015950	1					
ANR	5016364	ExpressionStatement	delta = - delta	335:5:9297:9311	5015950	1	True				
ANR	5016365	AssignmentExpression	delta = - delta		5015950	0		=			
ANR	5016366	Identifier	delta		5015950	0					
ANR	5016367	UnaryOperationExpression	- delta		5015950	1					
ANR	5016368	UnaryOperator	-		5015950	0					
ANR	5016369	Identifier	delta		5015950	1					
ANR	5016370	ExpressionStatement	"oldstr = r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"	337:4:9323:9375	5015950	3	True				
ANR	5016371	AssignmentExpression	"oldstr = r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"		5015950	0		=			
ANR	5016372	Identifier	oldstr		5015950	0					
ANR	5016373	CallExpression	"r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"		5015950	1					
ANR	5016374	Callee	r_str_newf		5015950	0					
ANR	5016375	Identifier	r_str_newf		5015950	0					
ANR	5016376	ArgumentList	"""[%s %c %d]"""		5015950	1					
ANR	5016377	Argument	"""[%s %c %d]"""		5015950	0					
ANR	5016378	PrimaryExpression	"""[%s %c %d]"""		5015950	0					
ANR	5016379	Argument	reg		5015950	1					
ANR	5016380	Identifier	reg		5015950	0					
ANR	5016381	Argument	sign		5015950	2					
ANR	5016382	Identifier	sign		5015950	0					
ANR	5016383	Argument	delta		5015950	3					
ANR	5016384	Identifier	delta		5015950	0					
ANR	5016385	ElseStatement	else		5015950	0					
ANR	5016386	CompoundStatement		59:10:1409:1409	5015950	0					
ANR	5016387	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"	339:4:9393:9442	5015950	0	True				
ANR	5016388	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"		5015950	0		=			
ANR	5016389	Identifier	oldstr		5015950	0					
ANR	5016390	CallExpression	"r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"		5015950	1					
ANR	5016391	Callee	r_str_newf		5015950	0					
ANR	5016392	Identifier	r_str_newf		5015950	0					
ANR	5016393	ArgumentList	"""[%s, %d]"""		5015950	1					
ANR	5016394	Argument	"""[%s, %d]"""		5015950	0					
ANR	5016395	PrimaryExpression	"""[%s, %d]"""		5015950	0					
ANR	5016396	Argument	reg		5015950	1					
ANR	5016397	Identifier	reg		5015950	0					
ANR	5016398	Argument	var -> delta		5015950	2					
ANR	5016399	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016400	Identifier	var		5015950	0					
ANR	5016401	Identifier	delta		5015950	1					
ANR	5016402	ElseStatement	else		5015950	0					
ANR	5016403	IfStatement	if ( var -> delta > 0 )		5015950	0					
ANR	5016404	Condition	var -> delta > 0	341:13:9462:9475	5015950	0	True				
ANR	5016405	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016406	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016407	Identifier	var		5015950	0					
ANR	5016408	Identifier	delta		5015950	1					
ANR	5016409	PrimaryExpression	0		5015950	1					
ANR	5016410	CompoundStatement		62:29:1500:1500	5015950	1					
ANR	5016411	ExpressionStatement	"tmplt = p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"	342:3:9483:9556	5015950	0	True				
ANR	5016412	AssignmentExpression	"tmplt = p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"		5015950	0		=			
ANR	5016413	Identifier	tmplt		5015950	0					
ANR	5016414	ConditionalExpression	"p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"		5015950	1					
ANR	5016415	Condition	p -> pseudo		5015950	0					
ANR	5016416	PtrMemberAccess	p -> pseudo		5015950	0					
ANR	5016417	Identifier	p		5015950	0					
ANR	5016418	Identifier	pseudo		5015950	1					
ANR	5016419	PrimaryExpression	"""[%s + 0x%x]"""		5015950	1					
ANR	5016420	ConditionalExpression	"ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"""		5015950	2					
ANR	5016421	Condition	ucase		5015950	0					
ANR	5016422	Identifier	ucase		5015950	0					
ANR	5016423	PrimaryExpression	"""[%s, 0x%X]"""		5015950	1					
ANR	5016424	PrimaryExpression	"""[%s, 0x%x]"""		5015950	2					
ANR	5016425	ExpressionStatement	"oldstr = r_str_newf ( tmplt , reg , var -> delta )"	343:3:9561:9605	5015950	1	True				
ANR	5016426	AssignmentExpression	"oldstr = r_str_newf ( tmplt , reg , var -> delta )"		5015950	0		=			
ANR	5016427	Identifier	oldstr		5015950	0					
ANR	5016428	CallExpression	"r_str_newf ( tmplt , reg , var -> delta )"		5015950	1					
ANR	5016429	Callee	r_str_newf		5015950	0					
ANR	5016430	Identifier	r_str_newf		5015950	0					
ANR	5016431	ArgumentList	tmplt		5015950	1					
ANR	5016432	Argument	tmplt		5015950	0					
ANR	5016433	Identifier	tmplt		5015950	0					
ANR	5016434	Argument	reg		5015950	1					
ANR	5016435	Identifier	reg		5015950	0					
ANR	5016436	Argument	var -> delta		5015950	2					
ANR	5016437	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016438	Identifier	var		5015950	0					
ANR	5016439	Identifier	delta		5015950	1					
ANR	5016440	ElseStatement	else		5015950	0					
ANR	5016441	CompoundStatement		65:9:1638:1638	5015950	0					
ANR	5016442	ExpressionStatement	"tmplt = p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"	345:3:9621:9696	5015950	0	True				
ANR	5016443	AssignmentExpression	"tmplt = p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"		5015950	0		=			
ANR	5016444	Identifier	tmplt		5015950	0					
ANR	5016445	ConditionalExpression	"p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"		5015950	1					
ANR	5016446	Condition	p -> pseudo		5015950	0					
ANR	5016447	PtrMemberAccess	p -> pseudo		5015950	0					
ANR	5016448	Identifier	p		5015950	0					
ANR	5016449	Identifier	pseudo		5015950	1					
ANR	5016450	PrimaryExpression	"""[%s - 0x%x]"""		5015950	1					
ANR	5016451	ConditionalExpression	"ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"""		5015950	2					
ANR	5016452	Condition	ucase		5015950	0					
ANR	5016453	Identifier	ucase		5015950	0					
ANR	5016454	PrimaryExpression	"""[%s, -0x%X]"""		5015950	1					
ANR	5016455	PrimaryExpression	"""[%s, -0x%x]"""		5015950	2					
ANR	5016456	ExpressionStatement	"oldstr = r_str_newf ( tmplt , reg , - var -> delta )"	346:3:9701:9746	5015950	1	True				
ANR	5016457	AssignmentExpression	"oldstr = r_str_newf ( tmplt , reg , - var -> delta )"		5015950	0		=			
ANR	5016458	Identifier	oldstr		5015950	0					
ANR	5016459	CallExpression	"r_str_newf ( tmplt , reg , - var -> delta )"		5015950	1					
ANR	5016460	Callee	r_str_newf		5015950	0					
ANR	5016461	Identifier	r_str_newf		5015950	0					
ANR	5016462	ArgumentList	tmplt		5015950	1					
ANR	5016463	Argument	tmplt		5015950	0					
ANR	5016464	Identifier	tmplt		5015950	0					
ANR	5016465	Argument	reg		5015950	1					
ANR	5016466	Identifier	reg		5015950	0					
ANR	5016467	Argument	- var -> delta		5015950	2					
ANR	5016468	UnaryOperationExpression	- var -> delta		5015950	0					
ANR	5016469	UnaryOperator	-		5015950	0					
ANR	5016470	PtrMemberAccess	var -> delta		5015950	1					
ANR	5016471	Identifier	var		5015950	0					
ANR	5016472	Identifier	delta		5015950	1					
ANR	5016473	IfStatement	if ( ucase )		5015950	3					
ANR	5016474	Condition	ucase	348:6:9758:9762	5015950	0	True				
ANR	5016475	Identifier	ucase		5015950	0					
ANR	5016476	CompoundStatement		70:3:1792:1826	5015950	1					
ANR	5016477	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	349:3:9770:9804	5015950	0	True				
ANR	5016478	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5015950	0					
ANR	5016479	IdentifierDeclType	char *		5015950	0					
ANR	5016480	Identifier	comma		5015950	1					
ANR	5016481	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5015950	2		=			
ANR	5016482	Identifier	comma		5015950	0					
ANR	5016483	CallExpression	"strchr ( oldstr , ',' )"		5015950	1					
ANR	5016484	Callee	strchr		5015950	0					
ANR	5016485	Identifier	strchr		5015950	0					
ANR	5016486	ArgumentList	oldstr		5015950	1					
ANR	5016487	Argument	oldstr		5015950	0					
ANR	5016488	Identifier	oldstr		5015950	0					
ANR	5016489	Argument	"','"		5015950	1					
ANR	5016490	PrimaryExpression	"','"		5015950	0					
ANR	5016491	IfStatement	if ( comma )		5015950	1					
ANR	5016492	Condition	comma	350:7:9813:9817	5015950	0	True				
ANR	5016493	Identifier	comma		5015950	0					
ANR	5016494	CompoundStatement		71:14:1842:1842	5015950	1					
ANR	5016495	ExpressionStatement	* comma = 0	351:4:9826:9836	5015950	0	True				
ANR	5016496	AssignmentExpression	* comma = 0		5015950	0		=			
ANR	5016497	UnaryOperationExpression	* comma		5015950	0					
ANR	5016498	UnaryOperator	*		5015950	0					
ANR	5016499	Identifier	comma		5015950	1					
ANR	5016500	PrimaryExpression	0		5015950	1					
ANR	5016501	ExpressionStatement	"r_str_case ( oldstr , true )"	352:4:9842:9867	5015950	1	True				
ANR	5016502	CallExpression	"r_str_case ( oldstr , true )"		5015950	0					
ANR	5016503	Callee	r_str_case		5015950	0					
ANR	5016504	Identifier	r_str_case		5015950	0					
ANR	5016505	ArgumentList	oldstr		5015950	1					
ANR	5016506	Argument	oldstr		5015950	0					
ANR	5016507	Identifier	oldstr		5015950	0					
ANR	5016508	Argument	true		5015950	1					
ANR	5016509	Identifier	true		5015950	0					
ANR	5016510	ExpressionStatement	"* comma = ','"	353:4:9873:9885	5015950	2	True				
ANR	5016511	AssignmentExpression	"* comma = ','"		5015950	0		=			
ANR	5016512	UnaryOperationExpression	* comma		5015950	0					
ANR	5016513	UnaryOperator	*		5015950	0					
ANR	5016514	Identifier	comma		5015950	1					
ANR	5016515	PrimaryExpression	"','"		5015950	1					
ANR	5016516	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5015950	4					
ANR	5016517	Condition	"strstr ( tstr , oldstr )"	356:6:9902:9922	5015950	0	True				
ANR	5016518	CallExpression	"strstr ( tstr , oldstr )"		5015950	0					
ANR	5016519	Callee	strstr		5015950	0					
ANR	5016520	Identifier	strstr		5015950	0					
ANR	5016521	ArgumentList	tstr		5015950	1					
ANR	5016522	Argument	tstr		5015950	0					
ANR	5016523	Identifier	tstr		5015950	0					
ANR	5016524	Argument	oldstr		5015950	1					
ANR	5016525	Identifier	oldstr		5015950	0					
ANR	5016526	CompoundStatement		77:29:1947:1947	5015950	1					
ANR	5016527	IfStatement	if ( p -> localvar_only )		5015950	0					
ANR	5016528	Condition	p -> localvar_only	357:7:9934:9949	5015950	0	True				
ANR	5016529	PtrMemberAccess	p -> localvar_only		5015950	0					
ANR	5016530	Identifier	p		5015950	0					
ANR	5016531	Identifier	localvar_only		5015950	1					
ANR	5016532	CompoundStatement		78:25:1974:1974	5015950	1					
ANR	5016533	ExpressionStatement	"newstr = r_str_newf ( ""[%s]"" , var -> name )"	358:4:9958:9997	5015950	0	True				
ANR	5016534	AssignmentExpression	"newstr = r_str_newf ( ""[%s]"" , var -> name )"		5015950	0		=			
ANR	5016535	Identifier	newstr		5015950	0					
ANR	5016536	CallExpression	"r_str_newf ( ""[%s]"" , var -> name )"		5015950	1					
ANR	5016537	Callee	r_str_newf		5015950	0					
ANR	5016538	Identifier	r_str_newf		5015950	0					
ANR	5016539	ArgumentList	"""[%s]"""		5015950	1					
ANR	5016540	Argument	"""[%s]"""		5015950	0					
ANR	5016541	PrimaryExpression	"""[%s]"""		5015950	0					
ANR	5016542	Argument	var -> name		5015950	1					
ANR	5016543	PtrMemberAccess	var -> name		5015950	0					
ANR	5016544	Identifier	var		5015950	0					
ANR	5016545	Identifier	name		5015950	1					
ANR	5016546	ElseStatement	else		5015950	0					
ANR	5016547	CompoundStatement		80:10:2031:2031	5015950	0					
ANR	5016548	ExpressionStatement	"newstr = r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"	360:4:10015:10098	5015950	0	True				
ANR	5016549	AssignmentExpression	"newstr = r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	0		=			
ANR	5016550	Identifier	newstr		5015950	0					
ANR	5016551	CallExpression	"r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	1					
ANR	5016552	Callee	r_str_newf		5015950	0					
ANR	5016553	Identifier	r_str_newf		5015950	0					
ANR	5016554	ArgumentList	"""[%s %c %s]"""		5015950	1					
ANR	5016555	Argument	"""[%s %c %s]"""		5015950	0					
ANR	5016556	PrimaryExpression	"""[%s %c %s]"""		5015950	0					
ANR	5016557	Argument	reg		5015950	1					
ANR	5016558	Identifier	reg		5015950	0					
ANR	5016559	Argument	var -> delta > 0 ? '+' : '-'		5015950	2					
ANR	5016560	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5015950	0					
ANR	5016561	Condition	var -> delta > 0		5015950	0					
ANR	5016562	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016563	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016564	Identifier	var		5015950	0					
ANR	5016565	Identifier	delta		5015950	1					
ANR	5016566	PrimaryExpression	0		5015950	1					
ANR	5016567	PrimaryExpression	'+'		5015950	1					
ANR	5016568	PrimaryExpression	'-'		5015950	2					
ANR	5016569	Argument	var -> name		5015950	3					
ANR	5016570	PtrMemberAccess	var -> name		5015950	0					
ANR	5016571	Identifier	var		5015950	0					
ANR	5016572	Identifier	name		5015950	1					
ANR	5016573	IfStatement	if ( ucase )		5015950	1					
ANR	5016574	Condition	ucase	363:7:10112:10116	5015950	0	True				
ANR	5016575	Identifier	ucase		5015950	0					
ANR	5016576	CompoundStatement		85:4:2147:2181	5015950	1					
ANR	5016577	IdentifierDeclStatement	"char * comma = strchr ( newstr , ' ' ) ;"	364:4:10125:10159	5015950	0	True				
ANR	5016578	IdentifierDecl	"* comma = strchr ( newstr , ' ' )"		5015950	0					
ANR	5016579	IdentifierDeclType	char *		5015950	0					
ANR	5016580	Identifier	comma		5015950	1					
ANR	5016581	AssignmentExpression	"* comma = strchr ( newstr , ' ' )"		5015950	2		=			
ANR	5016582	Identifier	comma		5015950	0					
ANR	5016583	CallExpression	"strchr ( newstr , ' ' )"		5015950	1					
ANR	5016584	Callee	strchr		5015950	0					
ANR	5016585	Identifier	strchr		5015950	0					
ANR	5016586	ArgumentList	newstr		5015950	1					
ANR	5016587	Argument	newstr		5015950	0					
ANR	5016588	Identifier	newstr		5015950	0					
ANR	5016589	Argument	' '		5015950	1					
ANR	5016590	PrimaryExpression	' '		5015950	0					
ANR	5016591	IfStatement	if ( comma )		5015950	1					
ANR	5016592	Condition	comma	365:8:10169:10173	5015950	0	True				
ANR	5016593	Identifier	comma		5015950	0					
ANR	5016594	CompoundStatement		86:15:2198:2198	5015950	1					
ANR	5016595	ExpressionStatement	* comma = 0	366:5:10183:10193	5015950	0	True				
ANR	5016596	AssignmentExpression	* comma = 0		5015950	0		=			
ANR	5016597	UnaryOperationExpression	* comma		5015950	0					
ANR	5016598	UnaryOperator	*		5015950	0					
ANR	5016599	Identifier	comma		5015950	1					
ANR	5016600	PrimaryExpression	0		5015950	1					
ANR	5016601	ExpressionStatement	"r_str_case ( newstr , true )"	367:5:10200:10225	5015950	1	True				
ANR	5016602	CallExpression	"r_str_case ( newstr , true )"		5015950	0					
ANR	5016603	Callee	r_str_case		5015950	0					
ANR	5016604	Identifier	r_str_case		5015950	0					
ANR	5016605	ArgumentList	newstr		5015950	1					
ANR	5016606	Argument	newstr		5015950	0					
ANR	5016607	Identifier	newstr		5015950	0					
ANR	5016608	Argument	true		5015950	1					
ANR	5016609	Identifier	true		5015950	0					
ANR	5016610	ExpressionStatement	* comma = ' '	368:5:10232:10244	5015950	2	True				
ANR	5016611	AssignmentExpression	* comma = ' '		5015950	0		=			
ANR	5016612	UnaryOperationExpression	* comma		5015950	0					
ANR	5016613	UnaryOperator	*		5015950	0					
ANR	5016614	Identifier	comma		5015950	1					
ANR	5016615	PrimaryExpression	' '		5015950	1					
ANR	5016616	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	371:3:10260:10306	5015950	2	True				
ANR	5016617	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	0		=			
ANR	5016618	Identifier	tstr		5015950	0					
ANR	5016619	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	1					
ANR	5016620	Callee	r_str_replace		5015950	0					
ANR	5016621	Identifier	r_str_replace		5015950	0					
ANR	5016622	ArgumentList	tstr		5015950	1					
ANR	5016623	Argument	tstr		5015950	0					
ANR	5016624	Identifier	tstr		5015950	0					
ANR	5016625	Argument	oldstr		5015950	1					
ANR	5016626	Identifier	oldstr		5015950	0					
ANR	5016627	Argument	newstr		5015950	2					
ANR	5016628	Identifier	newstr		5015950	0					
ANR	5016629	Argument	1		5015950	3					
ANR	5016630	PrimaryExpression	1		5015950	0					
ANR	5016631	ExpressionStatement	free ( newstr )	372:3:10311:10324	5015950	3	True				
ANR	5016632	CallExpression	free ( newstr )		5015950	0					
ANR	5016633	Callee	free		5015950	0					
ANR	5016634	Identifier	free		5015950	0					
ANR	5016635	ArgumentList	newstr		5015950	1					
ANR	5016636	Argument	newstr		5015950	0					
ANR	5016637	Identifier	newstr		5015950	0					
ANR	5016638	ExpressionStatement	free ( oldstr )	373:3:10329:10342	5015950	4	True				
ANR	5016639	CallExpression	free ( oldstr )		5015950	0					
ANR	5016640	Callee	free		5015950	0					
ANR	5016641	Identifier	free		5015950	0					
ANR	5016642	ArgumentList	oldstr		5015950	1					
ANR	5016643	Argument	oldstr		5015950	0					
ANR	5016644	Identifier	oldstr		5015950	0					
ANR	5016645	BreakStatement	break ;	374:3:10347:10352	5015950	5	True				
ANR	5016646	ExpressionStatement	free ( oldstr )	376:2:10360:10373	5015950	5	True				
ANR	5016647	CallExpression	free ( oldstr )		5015950	0					
ANR	5016648	Callee	free		5015950	0					
ANR	5016649	Identifier	free		5015950	0					
ANR	5016650	ArgumentList	oldstr		5015950	1					
ANR	5016651	Argument	oldstr		5015950	0					
ANR	5016652	Identifier	oldstr		5015950	0					
ANR	5016653	Statement	r_list_foreach	378:1:10379:10392	5015950	22	True				
ANR	5016654	Statement	(	378:16:10394:10394	5015950	23	True				
ANR	5016655	Statement	spargs	378:17:10395:10400	5015950	24	True				
ANR	5016656	Statement	","	378:23:10401:10401	5015950	25	True				
ANR	5016657	Statement	iter	378:25:10403:10406	5015950	26	True				
ANR	5016658	Statement	","	378:29:10407:10407	5015950	27	True				
ANR	5016659	Statement	var	378:31:10409:10411	5015950	28	True				
ANR	5016660	Statement	)	378:34:10412:10412	5015950	29	True				
ANR	5016661	CompoundStatement		99:36:2436:2436	5015950	30					
ANR	5016662	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5015950	0					
ANR	5016663	Condition	var -> delta > - 10 && var -> delta < 10	379:6:10422:10456	5015950	0	True				
ANR	5016664	AndExpression	var -> delta > - 10 && var -> delta < 10		5015950	0		&&			
ANR	5016665	RelationalExpression	var -> delta > - 10		5015950	0		>			
ANR	5016666	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016667	Identifier	var		5015950	0					
ANR	5016668	Identifier	delta		5015950	1					
ANR	5016669	UnaryOperationExpression	- 10		5015950	1					
ANR	5016670	UnaryOperator	-		5015950	0					
ANR	5016671	PrimaryExpression	10		5015950	1					
ANR	5016672	RelationalExpression	var -> delta < 10		5015950	1		<			
ANR	5016673	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016674	Identifier	var		5015950	0					
ANR	5016675	Identifier	delta		5015950	1					
ANR	5016676	PrimaryExpression	10		5015950	1					
ANR	5016677	CompoundStatement		100:43:2481:2481	5015950	1					
ANR	5016678	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, %d]"" , var -> delta )"	380:3:10464:10508	5015950	0	True				
ANR	5016679	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, %d]"" , var -> delta )"		5015950	0		=			
ANR	5016680	Identifier	oldstr		5015950	0					
ANR	5016681	CallExpression	"r_str_newf ( ""[sp, %d]"" , var -> delta )"		5015950	1					
ANR	5016682	Callee	r_str_newf		5015950	0					
ANR	5016683	Identifier	r_str_newf		5015950	0					
ANR	5016684	ArgumentList	"""[sp, %d]"""		5015950	1					
ANR	5016685	Argument	"""[sp, %d]"""		5015950	0					
ANR	5016686	PrimaryExpression	"""[sp, %d]"""		5015950	0					
ANR	5016687	Argument	var -> delta		5015950	1					
ANR	5016688	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016689	Identifier	var		5015950	0					
ANR	5016690	Identifier	delta		5015950	1					
ANR	5016691	ElseStatement	else		5015950	0					
ANR	5016692	IfStatement	if ( var -> delta > 0 )		5015950	0					
ANR	5016693	Condition	var -> delta > 0	381:13:10523:10536	5015950	0	True				
ANR	5016694	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016695	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016696	Identifier	var		5015950	0					
ANR	5016697	Identifier	delta		5015950	1					
ANR	5016698	PrimaryExpression	0		5015950	1					
ANR	5016699	CompoundStatement		102:29:2561:2561	5015950	1					
ANR	5016700	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"	382:3:10544:10590	5015950	0	True				
ANR	5016701	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"		5015950	0		=			
ANR	5016702	Identifier	oldstr		5015950	0					
ANR	5016703	CallExpression	"r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"		5015950	1					
ANR	5016704	Callee	r_str_newf		5015950	0					
ANR	5016705	Identifier	r_str_newf		5015950	0					
ANR	5016706	ArgumentList	"""[sp, 0x%x]"""		5015950	1					
ANR	5016707	Argument	"""[sp, 0x%x]"""		5015950	0					
ANR	5016708	PrimaryExpression	"""[sp, 0x%x]"""		5015950	0					
ANR	5016709	Argument	var -> delta		5015950	1					
ANR	5016710	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016711	Identifier	var		5015950	0					
ANR	5016712	Identifier	delta		5015950	1					
ANR	5016713	ElseStatement	else		5015950	0					
ANR	5016714	CompoundStatement		104:9:2623:2623	5015950	0					
ANR	5016715	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"	384:3:10606:10654	5015950	0	True				
ANR	5016716	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"		5015950	0		=			
ANR	5016717	Identifier	oldstr		5015950	0					
ANR	5016718	CallExpression	"r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"		5015950	1					
ANR	5016719	Callee	r_str_newf		5015950	0					
ANR	5016720	Identifier	r_str_newf		5015950	0					
ANR	5016721	ArgumentList	"""[sp, -0x%x]"""		5015950	1					
ANR	5016722	Argument	"""[sp, -0x%x]"""		5015950	0					
ANR	5016723	PrimaryExpression	"""[sp, -0x%x]"""		5015950	0					
ANR	5016724	Argument	- var -> delta		5015950	1					
ANR	5016725	UnaryOperationExpression	- var -> delta		5015950	0					
ANR	5016726	UnaryOperator	-		5015950	0					
ANR	5016727	PtrMemberAccess	var -> delta		5015950	1					
ANR	5016728	Identifier	var		5015950	0					
ANR	5016729	Identifier	delta		5015950	1					
ANR	5016730	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5015950	1					
ANR	5016731	Condition	"strstr ( tstr , oldstr )"	386:6:10666:10686	5015950	0	True				
ANR	5016732	CallExpression	"strstr ( tstr , oldstr )"		5015950	0					
ANR	5016733	Callee	strstr		5015950	0					
ANR	5016734	Identifier	strstr		5015950	0					
ANR	5016735	ArgumentList	tstr		5015950	1					
ANR	5016736	Argument	tstr		5015950	0					
ANR	5016737	Identifier	tstr		5015950	0					
ANR	5016738	Argument	oldstr		5015950	1					
ANR	5016739	Identifier	oldstr		5015950	0					
ANR	5016740	CompoundStatement		107:29:2711:2711	5015950	1					
ANR	5016741	ExpressionStatement	"newstr = r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"	387:3:10694:10775	5015950	0	True				
ANR	5016742	AssignmentExpression	"newstr = r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	0		=			
ANR	5016743	Identifier	newstr		5015950	0					
ANR	5016744	CallExpression	"r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	1					
ANR	5016745	Callee	r_str_newf		5015950	0					
ANR	5016746	Identifier	r_str_newf		5015950	0					
ANR	5016747	ArgumentList	"""[sp %c %s]"""		5015950	1					
ANR	5016748	Argument	"""[sp %c %s]"""		5015950	0					
ANR	5016749	PrimaryExpression	"""[sp %c %s]"""		5015950	0					
ANR	5016750	Argument	var -> delta > 0 ? '+' : '-'		5015950	1					
ANR	5016751	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5015950	0					
ANR	5016752	Condition	var -> delta > 0		5015950	0					
ANR	5016753	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016754	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016755	Identifier	var		5015950	0					
ANR	5016756	Identifier	delta		5015950	1					
ANR	5016757	PrimaryExpression	0		5015950	1					
ANR	5016758	PrimaryExpression	'+'		5015950	1					
ANR	5016759	PrimaryExpression	'-'		5015950	2					
ANR	5016760	Argument	var -> name		5015950	2					
ANR	5016761	PtrMemberAccess	var -> name		5015950	0					
ANR	5016762	Identifier	var		5015950	0					
ANR	5016763	Identifier	name		5015950	1					
ANR	5016764	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	390:3:10780:10826	5015950	1	True				
ANR	5016765	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	0		=			
ANR	5016766	Identifier	tstr		5015950	0					
ANR	5016767	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	1					
ANR	5016768	Callee	r_str_replace		5015950	0					
ANR	5016769	Identifier	r_str_replace		5015950	0					
ANR	5016770	ArgumentList	tstr		5015950	1					
ANR	5016771	Argument	tstr		5015950	0					
ANR	5016772	Identifier	tstr		5015950	0					
ANR	5016773	Argument	oldstr		5015950	1					
ANR	5016774	Identifier	oldstr		5015950	0					
ANR	5016775	Argument	newstr		5015950	2					
ANR	5016776	Identifier	newstr		5015950	0					
ANR	5016777	Argument	1		5015950	3					
ANR	5016778	PrimaryExpression	1		5015950	0					
ANR	5016779	ExpressionStatement	free ( newstr )	391:3:10831:10844	5015950	2	True				
ANR	5016780	CallExpression	free ( newstr )		5015950	0					
ANR	5016781	Callee	free		5015950	0					
ANR	5016782	Identifier	free		5015950	0					
ANR	5016783	ArgumentList	newstr		5015950	1					
ANR	5016784	Argument	newstr		5015950	0					
ANR	5016785	Identifier	newstr		5015950	0					
ANR	5016786	ExpressionStatement	free ( oldstr )	392:3:10849:10862	5015950	3	True				
ANR	5016787	CallExpression	free ( oldstr )		5015950	0					
ANR	5016788	Callee	free		5015950	0					
ANR	5016789	Identifier	free		5015950	0					
ANR	5016790	ArgumentList	oldstr		5015950	1					
ANR	5016791	Argument	oldstr		5015950	0					
ANR	5016792	Identifier	oldstr		5015950	0					
ANR	5016793	BreakStatement	break ;	393:3:10867:10872	5015950	4	True				
ANR	5016794	ExpressionStatement	free ( oldstr )	395:2:10880:10893	5015950	2	True				
ANR	5016795	CallExpression	free ( oldstr )		5015950	0					
ANR	5016796	Callee	free		5015950	0					
ANR	5016797	Identifier	free		5015950	0					
ANR	5016798	ArgumentList	oldstr		5015950	1					
ANR	5016799	Argument	oldstr		5015950	0					
ANR	5016800	Identifier	oldstr		5015950	0					
ANR	5016801	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5015950	3					
ANR	5016802	Condition	var -> delta > - 10 && var -> delta < 10	396:6:10901:10935	5015950	0	True				
ANR	5016803	AndExpression	var -> delta > - 10 && var -> delta < 10		5015950	0		&&			
ANR	5016804	RelationalExpression	var -> delta > - 10		5015950	0		>			
ANR	5016805	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016806	Identifier	var		5015950	0					
ANR	5016807	Identifier	delta		5015950	1					
ANR	5016808	UnaryOperationExpression	- 10		5015950	1					
ANR	5016809	UnaryOperator	-		5015950	0					
ANR	5016810	PrimaryExpression	10		5015950	1					
ANR	5016811	RelationalExpression	var -> delta < 10		5015950	1		<			
ANR	5016812	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016813	Identifier	var		5015950	0					
ANR	5016814	Identifier	delta		5015950	1					
ANR	5016815	PrimaryExpression	10		5015950	1					
ANR	5016816	CompoundStatement		117:43:2960:2960	5015950	1					
ANR	5016817	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"	397:3:10943:11027	5015950	0	True				
ANR	5016818	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5015950	0		=			
ANR	5016819	Identifier	oldstr		5015950	0					
ANR	5016820	CallExpression	"r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5015950	1					
ANR	5016821	Callee	r_str_newf		5015950	0					
ANR	5016822	Identifier	r_str_newf		5015950	0					
ANR	5016823	ArgumentList	"""[%s, %d]"""		5015950	1					
ANR	5016824	Argument	"""[%s, %d]"""		5015950	0					
ANR	5016825	PrimaryExpression	"""[%s, %d]"""		5015950	0					
ANR	5016826	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	1					
ANR	5016827	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	0					
ANR	5016828	PtrMemberAccess	anal -> reg -> name		5015950	0					
ANR	5016829	PtrMemberAccess	anal -> reg		5015950	0					
ANR	5016830	Identifier	anal		5015950	0					
ANR	5016831	Identifier	reg		5015950	1					
ANR	5016832	Identifier	name		5015950	1					
ANR	5016833	Identifier	R_REG_NAME_SP		5015950	1					
ANR	5016834	Argument	var -> delta		5015950	2					
ANR	5016835	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016836	Identifier	var		5015950	0					
ANR	5016837	Identifier	delta		5015950	1					
ANR	5016838	ElseStatement	else		5015950	0					
ANR	5016839	IfStatement	if ( var -> delta > 0 )		5015950	0					
ANR	5016840	Condition	var -> delta > 0	400:13:11042:11055	5015950	0	True				
ANR	5016841	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016842	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016843	Identifier	var		5015950	0					
ANR	5016844	Identifier	delta		5015950	1					
ANR	5016845	PrimaryExpression	0		5015950	1					
ANR	5016846	CompoundStatement		121:29:3080:3080	5015950	1					
ANR	5016847	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"	401:3:11063:11149	5015950	0	True				
ANR	5016848	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5015950	0		=			
ANR	5016849	Identifier	oldstr		5015950	0					
ANR	5016850	CallExpression	"r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5015950	1					
ANR	5016851	Callee	r_str_newf		5015950	0					
ANR	5016852	Identifier	r_str_newf		5015950	0					
ANR	5016853	ArgumentList	"""[%s, 0x%x]"""		5015950	1					
ANR	5016854	Argument	"""[%s, 0x%x]"""		5015950	0					
ANR	5016855	PrimaryExpression	"""[%s, 0x%x]"""		5015950	0					
ANR	5016856	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	1					
ANR	5016857	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	0					
ANR	5016858	PtrMemberAccess	anal -> reg -> name		5015950	0					
ANR	5016859	PtrMemberAccess	anal -> reg		5015950	0					
ANR	5016860	Identifier	anal		5015950	0					
ANR	5016861	Identifier	reg		5015950	1					
ANR	5016862	Identifier	name		5015950	1					
ANR	5016863	Identifier	R_REG_NAME_SP		5015950	1					
ANR	5016864	Argument	var -> delta		5015950	2					
ANR	5016865	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016866	Identifier	var		5015950	0					
ANR	5016867	Identifier	delta		5015950	1					
ANR	5016868	ElseStatement	else		5015950	0					
ANR	5016869	CompoundStatement		125:9:3182:3182	5015950	0					
ANR	5016870	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"	405:3:11165:11253	5015950	0	True				
ANR	5016871	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"		5015950	0		=			
ANR	5016872	Identifier	oldstr		5015950	0					
ANR	5016873	CallExpression	"r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"		5015950	1					
ANR	5016874	Callee	r_str_newf		5015950	0					
ANR	5016875	Identifier	r_str_newf		5015950	0					
ANR	5016876	ArgumentList	"""[%s, -0x%x]"""		5015950	1					
ANR	5016877	Argument	"""[%s, -0x%x]"""		5015950	0					
ANR	5016878	PrimaryExpression	"""[%s, -0x%x]"""		5015950	0					
ANR	5016879	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	1					
ANR	5016880	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5015950	0					
ANR	5016881	PtrMemberAccess	anal -> reg -> name		5015950	0					
ANR	5016882	PtrMemberAccess	anal -> reg		5015950	0					
ANR	5016883	Identifier	anal		5015950	0					
ANR	5016884	Identifier	reg		5015950	1					
ANR	5016885	Identifier	name		5015950	1					
ANR	5016886	Identifier	R_REG_NAME_SP		5015950	1					
ANR	5016887	Argument	- var -> delta		5015950	2					
ANR	5016888	UnaryOperationExpression	- var -> delta		5015950	0					
ANR	5016889	UnaryOperator	-		5015950	0					
ANR	5016890	PtrMemberAccess	var -> delta		5015950	1					
ANR	5016891	Identifier	var		5015950	0					
ANR	5016892	Identifier	delta		5015950	1					
ANR	5016893	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5015950	4					
ANR	5016894	Condition	"strstr ( tstr , oldstr )"	409:6:11265:11285	5015950	0	True				
ANR	5016895	CallExpression	"strstr ( tstr , oldstr )"		5015950	0					
ANR	5016896	Callee	strstr		5015950	0					
ANR	5016897	Identifier	strstr		5015950	0					
ANR	5016898	ArgumentList	tstr		5015950	1					
ANR	5016899	Argument	tstr		5015950	0					
ANR	5016900	Identifier	tstr		5015950	0					
ANR	5016901	Argument	oldstr		5015950	1					
ANR	5016902	Identifier	oldstr		5015950	0					
ANR	5016903	CompoundStatement		130:29:3310:3310	5015950	1					
ANR	5016904	ExpressionStatement	"newstr = r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"	410:3:11293:11410	5015950	0	True				
ANR	5016905	AssignmentExpression	"newstr = r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	0		=			
ANR	5016906	Identifier	newstr		5015950	0					
ANR	5016907	CallExpression	"r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"		5015950	1					
ANR	5016908	Callee	r_str_newf		5015950	0					
ANR	5016909	Identifier	r_str_newf		5015950	0					
ANR	5016910	ArgumentList	"""[%s %c %s]"""		5015950	1					
ANR	5016911	Argument	"""[%s %c %s]"""		5015950	0					
ANR	5016912	PrimaryExpression	"""[%s %c %s]"""		5015950	0					
ANR	5016913	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5015950	1					
ANR	5016914	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5015950	0					
ANR	5016915	PtrMemberAccess	anal -> reg -> name		5015950	0					
ANR	5016916	PtrMemberAccess	anal -> reg		5015950	0					
ANR	5016917	Identifier	anal		5015950	0					
ANR	5016918	Identifier	reg		5015950	1					
ANR	5016919	Identifier	name		5015950	1					
ANR	5016920	Identifier	R_REG_NAME_BP		5015950	1					
ANR	5016921	Argument	var -> delta > 0 ? '+' : '-'		5015950	2					
ANR	5016922	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5015950	0					
ANR	5016923	Condition	var -> delta > 0		5015950	0					
ANR	5016924	RelationalExpression	var -> delta > 0		5015950	0		>			
ANR	5016925	PtrMemberAccess	var -> delta		5015950	0					
ANR	5016926	Identifier	var		5015950	0					
ANR	5016927	Identifier	delta		5015950	1					
ANR	5016928	PrimaryExpression	0		5015950	1					
ANR	5016929	PrimaryExpression	'+'		5015950	1					
ANR	5016930	PrimaryExpression	'-'		5015950	2					
ANR	5016931	Argument	var -> name		5015950	3					
ANR	5016932	PtrMemberAccess	var -> name		5015950	0					
ANR	5016933	Identifier	var		5015950	0					
ANR	5016934	Identifier	name		5015950	1					
ANR	5016935	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	414:3:11415:11461	5015950	1	True				
ANR	5016936	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	0		=			
ANR	5016937	Identifier	tstr		5015950	0					
ANR	5016938	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5015950	1					
ANR	5016939	Callee	r_str_replace		5015950	0					
ANR	5016940	Identifier	r_str_replace		5015950	0					
ANR	5016941	ArgumentList	tstr		5015950	1					
ANR	5016942	Argument	tstr		5015950	0					
ANR	5016943	Identifier	tstr		5015950	0					
ANR	5016944	Argument	oldstr		5015950	1					
ANR	5016945	Identifier	oldstr		5015950	0					
ANR	5016946	Argument	newstr		5015950	2					
ANR	5016947	Identifier	newstr		5015950	0					
ANR	5016948	Argument	1		5015950	3					
ANR	5016949	PrimaryExpression	1		5015950	0					
ANR	5016950	ExpressionStatement	free ( newstr )	415:3:11466:11479	5015950	2	True				
ANR	5016951	CallExpression	free ( newstr )		5015950	0					
ANR	5016952	Callee	free		5015950	0					
ANR	5016953	Identifier	free		5015950	0					
ANR	5016954	ArgumentList	newstr		5015950	1					
ANR	5016955	Argument	newstr		5015950	0					
ANR	5016956	Identifier	newstr		5015950	0					
ANR	5016957	ExpressionStatement	free ( oldstr )	416:3:11484:11497	5015950	3	True				
ANR	5016958	CallExpression	free ( oldstr )		5015950	0					
ANR	5016959	Callee	free		5015950	0					
ANR	5016960	Identifier	free		5015950	0					
ANR	5016961	ArgumentList	oldstr		5015950	1					
ANR	5016962	Argument	oldstr		5015950	0					
ANR	5016963	Identifier	oldstr		5015950	0					
ANR	5016964	BreakStatement	break ;	417:3:11502:11507	5015950	4	True				
ANR	5016965	ExpressionStatement	free ( oldstr )	419:2:11515:11528	5015950	5	True				
ANR	5016966	CallExpression	free ( oldstr )		5015950	0					
ANR	5016967	Callee	free		5015950	0					
ANR	5016968	Identifier	free		5015950	0					
ANR	5016969	ArgumentList	oldstr		5015950	1					
ANR	5016970	Argument	oldstr		5015950	0					
ANR	5016971	Identifier	oldstr		5015950	0					
ANR	5016972	ExpressionStatement	r_list_free ( bpargs )	421:1:11534:11554	5015950	31	True				
ANR	5016973	CallExpression	r_list_free ( bpargs )		5015950	0					
ANR	5016974	Callee	r_list_free		5015950	0					
ANR	5016975	Identifier	r_list_free		5015950	0					
ANR	5016976	ArgumentList	bpargs		5015950	1					
ANR	5016977	Argument	bpargs		5015950	0					
ANR	5016978	Identifier	bpargs		5015950	0					
ANR	5016979	ExpressionStatement	r_list_free ( spargs )	422:1:11557:11577	5015950	32	True				
ANR	5016980	CallExpression	r_list_free ( spargs )		5015950	0					
ANR	5016981	Callee	r_list_free		5015950	0					
ANR	5016982	Identifier	r_list_free		5015950	0					
ANR	5016983	ArgumentList	spargs		5015950	1					
ANR	5016984	Argument	spargs		5015950	0					
ANR	5016985	Identifier	spargs		5015950	0					
ANR	5016986	IfStatement	if ( len > strlen ( tstr ) )		5015950	33					
ANR	5016987	Condition	len > strlen ( tstr )	423:5:11584:11602	5015950	0	True				
ANR	5016988	RelationalExpression	len > strlen ( tstr )		5015950	0		>			
ANR	5016989	Identifier	len		5015950	0					
ANR	5016990	CallExpression	strlen ( tstr )		5015950	1					
ANR	5016991	Callee	strlen		5015950	0					
ANR	5016992	Identifier	strlen		5015950	0					
ANR	5016993	ArgumentList	tstr		5015950	1					
ANR	5016994	Argument	tstr		5015950	0					
ANR	5016995	Identifier	tstr		5015950	0					
ANR	5016996	CompoundStatement		144:26:3627:3627	5015950	1					
ANR	5016997	ExpressionStatement	"strcpy ( str , tstr )"	424:2:11609:11628	5015950	0	True				
ANR	5016998	CallExpression	"strcpy ( str , tstr )"		5015950	0					
ANR	5016999	Callee	strcpy		5015950	0					
ANR	5017000	Identifier	strcpy		5015950	0					
ANR	5017001	ArgumentList	str		5015950	1					
ANR	5017002	Argument	str		5015950	0					
ANR	5017003	Identifier	str		5015950	0					
ANR	5017004	Argument	tstr		5015950	1					
ANR	5017005	Identifier	tstr		5015950	0					
ANR	5017006	ElseStatement	else		5015950	0					
ANR	5017007	CompoundStatement		146:8:3660:3660	5015950	0					
ANR	5017008	ExpressionStatement	free ( tstr )	427:2:11682:11693	5015950	0	True				
ANR	5017009	CallExpression	free ( tstr )		5015950	0					
ANR	5017010	Callee	free		5015950	0					
ANR	5017011	Identifier	free		5015950	0					
ANR	5017012	ArgumentList	tstr		5015950	1					
ANR	5017013	Argument	tstr		5015950	0					
ANR	5017014	Identifier	tstr		5015950	0					
ANR	5017015	ReturnStatement	return false ;	428:2:11697:11709	5015950	1	True				
ANR	5017016	Identifier	false		5015950	0					
ANR	5017017	ExpressionStatement	free ( tstr )	430:1:11715:11726	5015950	34	True				
ANR	5017018	CallExpression	free ( tstr )		5015950	0					
ANR	5017019	Callee	free		5015950	0					
ANR	5017020	Identifier	free		5015950	0					
ANR	5017021	ArgumentList	tstr		5015950	1					
ANR	5017022	Argument	tstr		5015950	0					
ANR	5017023	Identifier	tstr		5015950	0					
ANR	5017024	ReturnStatement	return true ;	431:1:11729:11740	5015950	35	True				
ANR	5017025	Identifier	true		5015950	0					
ANR	5017026	ReturnType	static bool		5015950	1					
ANR	5017027	Identifier	varsub		5015950	2					
ANR	5017028	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5015950	3					
ANR	5017029	Parameter	RParse * p	280:19:7894:7902	5015950	0	True				
ANR	5017030	ParameterType	RParse *		5015950	0					
ANR	5017031	Identifier	p		5015950	1					
ANR	5017032	Parameter	RAnalFunction * f	280:30:7905:7920	5015950	1	True				
ANR	5017033	ParameterType	RAnalFunction *		5015950	0					
ANR	5017034	Identifier	f		5015950	1					
ANR	5017035	Parameter	ut64 addr	280:48:7923:7931	5015950	2	True				
ANR	5017036	ParameterType	ut64		5015950	0					
ANR	5017037	Identifier	addr		5015950	1					
ANR	5017038	Parameter	int oplen	280:59:7934:7942	5015950	3	True				
ANR	5017039	ParameterType	int		5015950	0					
ANR	5017040	Identifier	oplen		5015950	1					
ANR	5017041	Parameter	char * data	280:70:7945:7954	5015950	4	True				
ANR	5017042	ParameterType	char *		5015950	0					
ANR	5017043	Identifier	data		5015950	1					
ANR	5017044	Parameter	char * str	280:82:7957:7965	5015950	5	True				
ANR	5017045	ParameterType	char *		5015950	0					
ANR	5017046	Identifier	str		5015950	1					
ANR	5017047	Parameter	int len	280:93:7968:7974	5015950	6	True				
ANR	5017048	ParameterType	int		5015950	0					
ANR	5017049	Identifier	len		5015950	1					
ANR	5017050	CFGEntryNode	ENTRY		5015950		True				
ANR	5017051	CFGExitNode	EXIT		5015950		True				
ANR	5017052	CFGErrorNode	ERROR		5015950		True				
ANR	5017053	Symbol	anal -> reg		5015950						
ANR	5017054	Symbol	data		5015950						
ANR	5017055	Symbol	p -> varlist		5015950						
ANR	5017056	Symbol	sign		5015950						
ANR	5017057	Symbol	delta		5015950						
ANR	5017058	Symbol	strchr		5015950						
ANR	5017059	Symbol	tstr		5015950						
ANR	5017060	Symbol	var -> delta		5015950						
ANR	5017061	Symbol	neg		5015950						
ANR	5017062	Symbol	strlen		5015950						
ANR	5017063	Symbol	len		5015950						
ANR	5017064	Symbol	reg		5015950						
ANR	5017065	Symbol	rip		5015950						
ANR	5017066	Symbol	r_num_get		5015950						
ANR	5017067	Symbol	anal -> reg -> name		5015950						
ANR	5017068	Symbol	R_REG_NAME_BP		5015950						
ANR	5017069	Symbol	oldstr		5015950						
ANR	5017070	Symbol	NULL		5015950						
ANR	5017071	Symbol	var		5015950						
ANR	5017072	Symbol	ripend		5015950						
ANR	5017073	Symbol	iter		5015950						
ANR	5017074	Symbol	spargs		5015950						
ANR	5017075	Symbol	str		5015950						
ANR	5017076	Symbol	R_REG_NAME_SP		5015950						
ANR	5017077	Symbol	anal		5015950						
ANR	5017078	Symbol	strstr		5015950						
ANR	5017079	Symbol	bpargs		5015950						
ANR	5017080	Symbol	true		5015950						
ANR	5017081	Symbol	var -> name		5015950						
ANR	5017082	Symbol	ucase		5015950						
ANR	5017083	Symbol	* anal -> reg -> name		5015950						
ANR	5017084	Symbol	* R_REG_NAME_SP		5015950						
ANR	5017085	Symbol	r_str_casestr		5015950						
ANR	5017086	Symbol	* rip		5015950						
ANR	5017087	Symbol	oplen		5015950						
ANR	5017088	Symbol	tstr_new		5015950						
ANR	5017089	Symbol	tmplt		5015950						
ANR	5017090	Symbol	r_str_newf		5015950						
ANR	5017091	Symbol	p -> localvar_only		5015950						
ANR	5017092	Symbol	* * anal		5015950						
ANR	5017093	Symbol	* var		5015950						
ANR	5017094	Symbol	* anal		5015950						
ANR	5017095	Symbol	* anal -> reg		5015950						
ANR	5017096	Symbol	* * * anal		5015950						
ANR	5017097	Symbol	* tstr		5015950						
ANR	5017098	Symbol	r_str_replace		5015950						
ANR	5017099	Symbol	p -> analb . anal		5015950						
ANR	5017100	Symbol	* comma		5015950						
ANR	5017101	Symbol	* * anal -> reg		5015950						
ANR	5017102	Symbol	addr		5015950						
ANR	5017103	Symbol	f		5015950						
ANR	5017104	Symbol	p -> analb		5015950						
ANR	5017105	Symbol	IS_UPPER		5015950						
ANR	5017106	Symbol	false		5015950						
ANR	5017107	Symbol	p -> pseudo		5015950						
ANR	5017108	Symbol	newstr		5015950						
ANR	5017109	Symbol	off		5015950						
ANR	5017110	Symbol	repl_num		5015950						
ANR	5017111	Symbol	p		5015950						
ANR	5017112	Symbol	comma		5015950						
ANR	5017113	Symbol	~3		5015950						
ANR	5017114	Symbol	* R_REG_NAME_BP		5015950						
ANR	5017115	Symbol	p -> relsub		5015950						
ANR	5017116	Symbol	* p		5015950						
ANR	5017117	Symbol	strdup		5015950						
ANR	5017118	DeclStmt									
ANR	5017119	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_arm_pseudo
ANR	5017120	DeclStmt									
ANR	5017121	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
